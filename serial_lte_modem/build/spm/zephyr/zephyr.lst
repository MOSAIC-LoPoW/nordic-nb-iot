
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20000a90 	.word	0x20000a90
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&mutex, *(uintptr_t *)&timeout, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	0000111d 	.word	0x0000111d
   8:	00003b77 	.word	0x00003b77
   c:	0000106d 	.word	0x0000106d
		if (fdtable[fd].obj == NULL) {
  10:	0000106d 	.word	0x0000106d
  14:	0000106d 	.word	0x0000106d
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	0000106d 	.word	0x0000106d
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
  1c:	0000106d 	.word	0x0000106d
	errno = ENFILE;
  20:	0000106d 	.word	0x0000106d
	return -1;
  24:	0000106d 	.word	0x0000106d
		arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_mutex_unlock(mutex);
  28:	0000106d 	.word	0x0000106d
  2c:	00000f5d 	.word	0x00000f5d
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	0000106d 	.word	0x0000106d
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	0000106d 	.word	0x0000106d
  38:	00000f09 	.word	0x00000f09
  3c:	00003a75 	.word	0x00003a75

00000040 <_irq_vector_table>:
  40:	000010dd 000010dd 000010dd 000010dd     ................
  50:	000010dd 000010dd 000010dd 000010dd     ................
  60:	000010dd 000010dd 000010dd 000010dd     ................
  70:	000010dd 000010dd 000010dd 000010dd     ................
  80:	000010dd 000010dd 000010dd 000010dd     ................
  90:	000010dd 000010dd 000010dd 000010dd     ................
  a0:	000010dd 000010dd 000010dd 000010dd     ................
  b0:	000010dd 000010dd 000010dd 000010dd     ................
  c0:	000010dd 000010dd 000010dd 000010dd     ................
  d0:	000010dd 000010dd 000010dd 000010dd     ................
  e0:	000010dd 000010dd 000010dd 000010dd     ................
  f0:	000010dd 000010dd 000010dd 000010dd     ................
 100:	000010dd 000010dd 000010dd 000010dd     ................
 110:	000010dd 000010dd 000010dd 000010dd     ................
 120:	000010dd 000010dd 000010dd 000010dd     ................
 130:	000010dd 000010dd 000010dd 000010dd     ................
 140:	000010dd                                ....

00000144 <_vector_end>:
	...

00000200 <m_firmware_info>:
 200:	281ee6de 8fcebb4c 00005b01 00008000     ...(L....[......
 210:	00000001 00000000 200013d0 000019c5     ........... ....

Disassembly of section _TEXT_SECTION_NAME_2:

00000220 <__aeabi_uldivmod>:
     220:	b953      	cbnz	r3, 238 <__aeabi_uldivmod+0x18>
     222:	b94a      	cbnz	r2, 238 <__aeabi_uldivmod+0x18>
     224:	2900      	cmp	r1, #0
     226:	bf08      	it	eq
     228:	2800      	cmpeq	r0, #0
     22a:	bf1c      	itt	ne
     22c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     234:	f000 b970 	b.w	518 <__aeabi_idiv0>
     238:	f1ad 0c08 	sub.w	ip, sp, #8
     23c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     240:	f000 f806 	bl	250 <__udivmoddi4>
     244:	f8dd e004 	ldr.w	lr, [sp, #4]
     248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     24c:	b004      	add	sp, #16
     24e:	4770      	bx	lr

00000250 <__udivmoddi4>:
     250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     254:	9e09      	ldr	r6, [sp, #36]	; 0x24
     256:	4604      	mov	r4, r0
     258:	4689      	mov	r9, r1
     25a:	2b00      	cmp	r3, #0
     25c:	f040 8083 	bne.w	366 <__udivmoddi4+0x116>
     260:	428a      	cmp	r2, r1
     262:	4615      	mov	r5, r2
     264:	d945      	bls.n	2f2 <__udivmoddi4+0xa2>
     266:	fab2 f282 	clz	r2, r2
     26a:	b14a      	cbz	r2, 280 <__udivmoddi4+0x30>
     26c:	f1c2 0720 	rsb	r7, r2, #32
     270:	fa01 f302 	lsl.w	r3, r1, r2
     274:	4095      	lsls	r5, r2
     276:	4094      	lsls	r4, r2
     278:	fa20 f707 	lsr.w	r7, r0, r7
     27c:	ea47 0903 	orr.w	r9, r7, r3
     280:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     284:	0c23      	lsrs	r3, r4, #16
     286:	fa1f f885 	uxth.w	r8, r5
     28a:	fbb9 fcfe 	udiv	ip, r9, lr
     28e:	fb0e 991c 	mls	r9, lr, ip, r9
     292:	fb0c f108 	mul.w	r1, ip, r8
     296:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
     29a:	4299      	cmp	r1, r3
     29c:	d90a      	bls.n	2b4 <__udivmoddi4+0x64>
     29e:	18eb      	adds	r3, r5, r3
     2a0:	bf2c      	ite	cs
     2a2:	2001      	movcs	r0, #1
     2a4:	2000      	movcc	r0, #0
     2a6:	4299      	cmp	r1, r3
     2a8:	d902      	bls.n	2b0 <__udivmoddi4+0x60>
     2aa:	2800      	cmp	r0, #0
     2ac:	f000 811d 	beq.w	4ea <CONFIG_FLASH_SIZE+0xea>
     2b0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
     2b4:	1a59      	subs	r1, r3, r1
     2b6:	b2a3      	uxth	r3, r4
     2b8:	fbb1 f0fe 	udiv	r0, r1, lr
     2bc:	fb0e 1110 	mls	r1, lr, r0, r1
     2c0:	fb00 f808 	mul.w	r8, r0, r8
     2c4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     2c8:	45a0      	cmp	r8, r4
     2ca:	d905      	bls.n	2d8 <__udivmoddi4+0x88>
     2cc:	192c      	adds	r4, r5, r4
     2ce:	d202      	bcs.n	2d6 <__udivmoddi4+0x86>
     2d0:	45a0      	cmp	r8, r4
     2d2:	f200 810e 	bhi.w	4f2 <CONFIG_FLASH_SIZE+0xf2>
     2d6:	3801      	subs	r0, #1
     2d8:	eba4 0408 	sub.w	r4, r4, r8
     2dc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     2e0:	2700      	movs	r7, #0
     2e2:	b11e      	cbz	r6, 2ec <__udivmoddi4+0x9c>
     2e4:	40d4      	lsrs	r4, r2
     2e6:	2300      	movs	r3, #0
     2e8:	e9c6 4300 	strd	r4, r3, [r6]
     2ec:	4639      	mov	r1, r7
     2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     2f2:	2a00      	cmp	r2, #0
     2f4:	d051      	beq.n	39a <__udivmoddi4+0x14a>
     2f6:	fab2 f282 	clz	r2, r2
     2fa:	2a00      	cmp	r2, #0
     2fc:	f040 80af 	bne.w	45e <CONFIG_FLASH_SIZE+0x5e>
     300:	1b49      	subs	r1, r1, r5
     302:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     306:	fa1f f885 	uxth.w	r8, r5
     30a:	2701      	movs	r7, #1
     30c:	0c23      	lsrs	r3, r4, #16
     30e:	fbb1 fcfe 	udiv	ip, r1, lr
     312:	fb0e 111c 	mls	r1, lr, ip, r1
     316:	fb08 f00c 	mul.w	r0, r8, ip
     31a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     31e:	4298      	cmp	r0, r3
     320:	d90a      	bls.n	338 <__udivmoddi4+0xe8>
     322:	18eb      	adds	r3, r5, r3
     324:	bf2c      	ite	cs
     326:	2101      	movcs	r1, #1
     328:	2100      	movcc	r1, #0
     32a:	4298      	cmp	r0, r3
     32c:	d902      	bls.n	334 <__udivmoddi4+0xe4>
     32e:	2900      	cmp	r1, #0
     330:	f000 80d7 	beq.w	4e2 <CONFIG_FLASH_SIZE+0xe2>
     334:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
     338:	1a19      	subs	r1, r3, r0
     33a:	b2a3      	uxth	r3, r4
     33c:	fbb1 f0fe 	udiv	r0, r1, lr
     340:	fb0e 1110 	mls	r1, lr, r0, r1
     344:	fb08 f800 	mul.w	r8, r8, r0
     348:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     34c:	45a0      	cmp	r8, r4
     34e:	d905      	bls.n	35c <__udivmoddi4+0x10c>
     350:	192c      	adds	r4, r5, r4
     352:	d202      	bcs.n	35a <__udivmoddi4+0x10a>
     354:	45a0      	cmp	r8, r4
     356:	f200 80c1 	bhi.w	4dc <CONFIG_FLASH_SIZE+0xdc>
     35a:	3801      	subs	r0, #1
     35c:	eba4 0408 	sub.w	r4, r4, r8
     360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     364:	e7bd      	b.n	2e2 <__udivmoddi4+0x92>
     366:	428b      	cmp	r3, r1
     368:	d908      	bls.n	37c <__udivmoddi4+0x12c>
     36a:	2e00      	cmp	r6, #0
     36c:	d074      	beq.n	458 <CONFIG_FLASH_SIZE+0x58>
     36e:	2700      	movs	r7, #0
     370:	e9c6 0100 	strd	r0, r1, [r6]
     374:	4638      	mov	r0, r7
     376:	4639      	mov	r1, r7
     378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     37c:	fab3 f783 	clz	r7, r3
     380:	b967      	cbnz	r7, 39c <__udivmoddi4+0x14c>
     382:	428b      	cmp	r3, r1
     384:	f0c0 80a4 	bcc.w	4d0 <CONFIG_FLASH_SIZE+0xd0>
     388:	4282      	cmp	r2, r0
     38a:	f240 80a1 	bls.w	4d0 <CONFIG_FLASH_SIZE+0xd0>
     38e:	4638      	mov	r0, r7
     390:	2e00      	cmp	r6, #0
     392:	d0ab      	beq.n	2ec <__udivmoddi4+0x9c>
     394:	e9c6 4900 	strd	r4, r9, [r6]
     398:	e7a8      	b.n	2ec <__udivmoddi4+0x9c>
     39a:	deff      	udf	#255	; 0xff
     39c:	f1c7 0520 	rsb	r5, r7, #32
     3a0:	40bb      	lsls	r3, r7
     3a2:	fa02 fc07 	lsl.w	ip, r2, r7
     3a6:	fa01 f407 	lsl.w	r4, r1, r7
     3aa:	40ea      	lsrs	r2, r5
     3ac:	fa20 f805 	lsr.w	r8, r0, r5
     3b0:	40e9      	lsrs	r1, r5
     3b2:	fa00 fe07 	lsl.w	lr, r0, r7
     3b6:	431a      	orrs	r2, r3
     3b8:	ea48 0404 	orr.w	r4, r8, r4
     3bc:	ea4f 4812 	mov.w	r8, r2, lsr #16
     3c0:	0c20      	lsrs	r0, r4, #16
     3c2:	fa1f f982 	uxth.w	r9, r2
     3c6:	fbb1 faf8 	udiv	sl, r1, r8
     3ca:	fb08 111a 	mls	r1, r8, sl, r1
     3ce:	fb0a fb09 	mul.w	fp, sl, r9
     3d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     3d6:	458b      	cmp	fp, r1
     3d8:	d90a      	bls.n	3f0 <__udivmoddi4+0x1a0>
     3da:	1851      	adds	r1, r2, r1
     3dc:	bf2c      	ite	cs
     3de:	2301      	movcs	r3, #1
     3e0:	2300      	movcc	r3, #0
     3e2:	458b      	cmp	fp, r1
     3e4:	d902      	bls.n	3ec <__udivmoddi4+0x19c>
     3e6:	2b00      	cmp	r3, #0
     3e8:	f000 8088 	beq.w	4fc <CONFIG_FLASH_SIZE+0xfc>
     3ec:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
     3f0:	eba1 010b 	sub.w	r1, r1, fp
     3f4:	b2a4      	uxth	r4, r4
     3f6:	fbb1 f0f8 	udiv	r0, r1, r8
     3fa:	fb08 1110 	mls	r1, r8, r0, r1
     3fe:	fb00 f909 	mul.w	r9, r0, r9
     402:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
     406:	4589      	cmp	r9, r1
     408:	d904      	bls.n	414 <CONFIG_FLASH_SIZE+0x14>
     40a:	1851      	adds	r1, r2, r1
     40c:	d201      	bcs.n	412 <CONFIG_FLASH_SIZE+0x12>
     40e:	4589      	cmp	r9, r1
     410:	d87b      	bhi.n	50a <CONFIG_FLASH_SIZE+0x10a>
     412:	3801      	subs	r0, #1
     414:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     418:	eba1 0109 	sub.w	r1, r1, r9
     41c:	fba0 890c 	umull	r8, r9, r0, ip
     420:	4549      	cmp	r1, r9
     422:	4644      	mov	r4, r8
     424:	464b      	mov	r3, r9
     426:	d302      	bcc.n	42e <CONFIG_FLASH_SIZE+0x2e>
     428:	d106      	bne.n	438 <CONFIG_FLASH_SIZE+0x38>
     42a:	45c6      	cmp	lr, r8
     42c:	d204      	bcs.n	438 <CONFIG_FLASH_SIZE+0x38>
     42e:	3801      	subs	r0, #1
     430:	ebb8 040c 	subs.w	r4, r8, ip
     434:	eb69 0302 	sbc.w	r3, r9, r2
     438:	2e00      	cmp	r6, #0
     43a:	d05d      	beq.n	4f8 <CONFIG_FLASH_SIZE+0xf8>
     43c:	ebbe 0204 	subs.w	r2, lr, r4
     440:	eb61 0103 	sbc.w	r1, r1, r3
     444:	fa01 f505 	lsl.w	r5, r1, r5
     448:	fa22 f307 	lsr.w	r3, r2, r7
     44c:	40f9      	lsrs	r1, r7
     44e:	2700      	movs	r7, #0
     450:	431d      	orrs	r5, r3
     452:	e9c6 5100 	strd	r5, r1, [r6]
     456:	e749      	b.n	2ec <__udivmoddi4+0x9c>
     458:	4637      	mov	r7, r6
     45a:	4630      	mov	r0, r6
     45c:	e746      	b.n	2ec <__udivmoddi4+0x9c>
     45e:	f1c2 0020 	rsb	r0, r2, #32
     462:	4095      	lsls	r5, r2
     464:	fa01 f702 	lsl.w	r7, r1, r2
     468:	fa21 f300 	lsr.w	r3, r1, r0
     46c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     470:	fa24 f100 	lsr.w	r1, r4, r0
     474:	fa1f f885 	uxth.w	r8, r5
     478:	4094      	lsls	r4, r2
     47a:	4339      	orrs	r1, r7
     47c:	fbb3 f0fe 	udiv	r0, r3, lr
     480:	0c0f      	lsrs	r7, r1, #16
     482:	fb0e 3310 	mls	r3, lr, r0, r3
     486:	fb00 fc08 	mul.w	ip, r0, r8
     48a:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
     48e:	459c      	cmp	ip, r3
     490:	d907      	bls.n	4a2 <CONFIG_FLASH_SIZE+0xa2>
     492:	18eb      	adds	r3, r5, r3
     494:	bf2c      	ite	cs
     496:	2701      	movcs	r7, #1
     498:	2700      	movcc	r7, #0
     49a:	459c      	cmp	ip, r3
     49c:	d900      	bls.n	4a0 <CONFIG_FLASH_SIZE+0xa0>
     49e:	b38f      	cbz	r7, 504 <CONFIG_FLASH_SIZE+0x104>
     4a0:	3801      	subs	r0, #1
     4a2:	eba3 030c 	sub.w	r3, r3, ip
     4a6:	b289      	uxth	r1, r1
     4a8:	fbb3 f7fe 	udiv	r7, r3, lr
     4ac:	fb0e 3317 	mls	r3, lr, r7, r3
     4b0:	fb07 fc08 	mul.w	ip, r7, r8
     4b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     4b8:	458c      	cmp	ip, r1
     4ba:	d904      	bls.n	4c6 <CONFIG_FLASH_SIZE+0xc6>
     4bc:	1869      	adds	r1, r5, r1
     4be:	d201      	bcs.n	4c4 <CONFIG_FLASH_SIZE+0xc4>
     4c0:	458c      	cmp	ip, r1
     4c2:	d825      	bhi.n	510 <CONFIG_FLASH_SIZE+0x110>
     4c4:	3f01      	subs	r7, #1
     4c6:	eba1 010c 	sub.w	r1, r1, ip
     4ca:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
     4ce:	e71d      	b.n	30c <__udivmoddi4+0xbc>
     4d0:	1a84      	subs	r4, r0, r2
     4d2:	eb61 0303 	sbc.w	r3, r1, r3
     4d6:	2001      	movs	r0, #1
     4d8:	4699      	mov	r9, r3
     4da:	e759      	b.n	390 <__udivmoddi4+0x140>
     4dc:	3802      	subs	r0, #2
     4de:	442c      	add	r4, r5
     4e0:	e73c      	b.n	35c <__udivmoddi4+0x10c>
     4e2:	f1ac 0c02 	sub.w	ip, ip, #2
     4e6:	442b      	add	r3, r5
     4e8:	e726      	b.n	338 <__udivmoddi4+0xe8>
     4ea:	f1ac 0c02 	sub.w	ip, ip, #2
     4ee:	442b      	add	r3, r5
     4f0:	e6e0      	b.n	2b4 <__udivmoddi4+0x64>
     4f2:	3802      	subs	r0, #2
     4f4:	442c      	add	r4, r5
     4f6:	e6ef      	b.n	2d8 <__udivmoddi4+0x88>
     4f8:	4637      	mov	r7, r6
     4fa:	e6f7      	b.n	2ec <__udivmoddi4+0x9c>
     4fc:	f1aa 0a02 	sub.w	sl, sl, #2
     500:	4411      	add	r1, r2
     502:	e775      	b.n	3f0 <__udivmoddi4+0x1a0>
     504:	3802      	subs	r0, #2
     506:	442b      	add	r3, r5
     508:	e7cb      	b.n	4a2 <CONFIG_FLASH_SIZE+0xa2>
     50a:	3802      	subs	r0, #2
     50c:	4411      	add	r1, r2
     50e:	e781      	b.n	414 <CONFIG_FLASH_SIZE+0x14>
     510:	3f02      	subs	r7, #2
     512:	4429      	add	r1, r5
     514:	e7d7      	b.n	4c6 <CONFIG_FLASH_SIZE+0xc6>
     516:	bf00      	nop

00000518 <__aeabi_idiv0>:
     518:	4770      	bx	lr
     51a:	bf00      	nop

0000051c <__gnu_cmse_nonsecure_call>:
     51c:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
     520:	4627      	mov	r7, r4
     522:	46a0      	mov	r8, r4
     524:	46a1      	mov	r9, r4
     526:	46a2      	mov	sl, r4
     528:	46a3      	mov	fp, r4
     52a:	46a4      	mov	ip, r4
     52c:	ed2d 8b10 	vpush	{d8-d15}
     530:	f04f 0500 	mov.w	r5, #0
     534:	ec45 5b18 	vmov	d8, r5, r5
     538:	ec45 5a19 	vmov	s18, s19, r5, r5
     53c:	ec45 5a1a 	vmov	s20, s21, r5, r5
     540:	ec45 5a1b 	vmov	s22, s23, r5, r5
     544:	ec45 5a1c 	vmov	s24, s25, r5, r5
     548:	ec45 5a1d 	vmov	s26, s27, r5, r5
     54c:	ec45 5a1e 	vmov	s28, s29, r5, r5
     550:	ec45 5a1f 	vmov	s30, s31, r5, r5
     554:	eef1 5a10 	vmrs	r5, fpscr
     558:	f64f 7660 	movw	r6, #65376	; 0xff60
     55c:	f6c0 76ff 	movt	r6, #4095	; 0xfff
     560:	4035      	ands	r5, r6
     562:	eee1 5a10 	vmsr	fpscr, r5
     566:	f384 8800 	msr	CPSR_f, r4
     56a:	4625      	mov	r5, r4
     56c:	4626      	mov	r6, r4
     56e:	47a4      	blxns	r4
     570:	ecbd 8b10 	vpop	{d8-d15}
     574:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

00000578 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     578:	680b      	ldr	r3, [r1, #0]
     57a:	3301      	adds	r3, #1
     57c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     57e:	4b01      	ldr	r3, [pc, #4]	; (584 <char_out+0xc>)
     580:	681b      	ldr	r3, [r3, #0]
     582:	4718      	bx	r3
     584:	200013d4 	.word	0x200013d4

00000588 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     58c:	b085      	sub	sp, #20
     58e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     590:	469b      	mov	fp, r3
     592:	2c01      	cmp	r4, #1
     594:	bfb8      	it	lt
     596:	2401      	movlt	r4, #1
     598:	2b01      	cmp	r3, #1
     59a:	bf0c      	ite	eq
     59c:	2330      	moveq	r3, #48	; 0x30
     59e:	2320      	movne	r3, #32
     5a0:	4616      	mov	r6, r2
     5a2:	4682      	mov	sl, r0
     5a4:	4688      	mov	r8, r1
     5a6:	2501      	movs	r5, #1
     5a8:	270a      	movs	r7, #10
     5aa:	2200      	movs	r2, #0
     5ac:	f8df 906c 	ldr.w	r9, [pc, #108]	; 61c <_printk_dec_ulong+0x94>
     5b0:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
     5b2:	fbb6 f3f9 	udiv	r3, r6, r9
     5b6:	9301      	str	r3, [sp, #4]
     5b8:	b90a      	cbnz	r2, 5be <_printk_dec_ulong+0x36>
     5ba:	45b1      	cmp	r9, r6
     5bc:	d81c      	bhi.n	5f8 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
     5be:	9b01      	ldr	r3, [sp, #4]
     5c0:	4641      	mov	r1, r8
     5c2:	f103 0030 	add.w	r0, r3, #48	; 0x30
     5c6:	47d0      	blx	sl
			found_largest_digit = 1;
     5c8:	2201      	movs	r2, #1
			digits++;
     5ca:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
     5cc:	9b01      	ldr	r3, [sp, #4]
		remaining--;
     5ce:	3f01      	subs	r7, #1
		remainder %= pos;
     5d0:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
     5d4:	230a      	movs	r3, #10
	while (pos >= 10) {
     5d6:	2f01      	cmp	r7, #1
		pos /= 10;
     5d8:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
     5dc:	d1e9      	bne.n	5b2 <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
     5de:	4641      	mov	r1, r8
     5e0:	f106 0030 	add.w	r0, r6, #48	; 0x30
     5e4:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
     5e6:	f1bb 0f03 	cmp.w	fp, #3
     5ea:	d102      	bne.n	5f2 <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
     5ec:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
     5ee:	2c00      	cmp	r4, #0
     5f0:	dc0e      	bgt.n	610 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
     5f2:	b005      	add	sp, #20
     5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     5f8:	42bc      	cmp	r4, r7
     5fa:	dbe7      	blt.n	5cc <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     5fc:	f1bb 0f02 	cmp.w	fp, #2
     600:	d8e4      	bhi.n	5cc <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     602:	4641      	mov	r1, r8
     604:	9802      	ldr	r0, [sp, #8]
     606:	9203      	str	r2, [sp, #12]
			digits++;
     608:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     60a:	47d0      	blx	sl
			digits++;
     60c:	9a03      	ldr	r2, [sp, #12]
     60e:	e7dd      	b.n	5cc <_printk_dec_ulong+0x44>
			out(' ', ctx);
     610:	4641      	mov	r1, r8
     612:	2020      	movs	r0, #32
     614:	47d0      	blx	sl
     616:	3c01      	subs	r4, #1
     618:	e7e9      	b.n	5ee <_printk_dec_ulong+0x66>
     61a:	bf00      	nop
     61c:	3b9aca00 	.word	0x3b9aca00

00000620 <__printk_hook_install>:
	_char_out = fn;
     620:	4b01      	ldr	r3, [pc, #4]	; (628 <__printk_hook_install+0x8>)
     622:	6018      	str	r0, [r3, #0]
}
     624:	4770      	bx	lr
     626:	bf00      	nop
     628:	200013d4 	.word	0x200013d4

0000062c <vprintk>:
	struct out_context ctx = { 0 };
     62c:	2300      	movs	r3, #0
{
     62e:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
     630:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     632:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
     634:	4803      	ldr	r0, [pc, #12]	; (644 <vprintk+0x18>)
     636:	460b      	mov	r3, r1
     638:	a901      	add	r1, sp, #4
     63a:	f002 ffda 	bl	35f2 <z_vprintk>
}
     63e:	b003      	add	sp, #12
     640:	f85d fb04 	ldr.w	pc, [sp], #4
     644:	00000579 	.word	0x00000579

00000648 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     648:	f04f 0220 	mov.w	r2, #32
     64c:	f3ef 8311 	mrs	r3, BASEPRI
     650:	f382 8811 	msr	BASEPRI, r2
     654:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     658:	2101      	movs	r1, #1
     65a:	4a04      	ldr	r2, [pc, #16]	; (66c <nordicsemi_nrf91_init+0x24>)
     65c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     660:	f383 8811 	msr	BASEPRI, r3
     664:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     668:	2000      	movs	r0, #0
     66a:	4770      	bx	lr
     66c:	50039000 	.word	0x50039000

00000670 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
     670:	280a      	cmp	r0, #10
{
     672:	b538      	push	{r3, r4, r5, lr}
     674:	4604      	mov	r4, r0
     676:	4d07      	ldr	r5, [pc, #28]	; (694 <console_out+0x24>)
	if ('\n' == c) {
     678:	d104      	bne.n	684 <console_out+0x14>
     67a:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
     67c:	6843      	ldr	r3, [r0, #4]
     67e:	210d      	movs	r1, #13
     680:	685b      	ldr	r3, [r3, #4]
     682:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
     684:	6828      	ldr	r0, [r5, #0]
     686:	6843      	ldr	r3, [r0, #4]
     688:	b2e1      	uxtb	r1, r4
     68a:	685b      	ldr	r3, [r3, #4]
     68c:	4798      	blx	r3

	return c;
}
     68e:	4620      	mov	r0, r4
     690:	bd38      	pop	{r3, r4, r5, pc}
     692:	bf00      	nop
     694:	20000008 	.word	0x20000008

00000698 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
     698:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
     69a:	4c04      	ldr	r4, [pc, #16]	; (6ac <uart_console_hook_install+0x14>)
     69c:	4620      	mov	r0, r4
     69e:	f001 f89f 	bl	17e0 <__stdout_hook_install>
	__printk_hook_install(console_out);
     6a2:	4620      	mov	r0, r4
}
     6a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
     6a8:	f7ff bfba 	b.w	620 <__printk_hook_install>
     6ac:	00000671 	.word	0x00000671

000006b0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
     6b0:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     6b2:	4804      	ldr	r0, [pc, #16]	; (6c4 <uart_console_init+0x14>)
     6b4:	f001 fa8a 	bl	1bcc <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     6b8:	4b03      	ldr	r3, [pc, #12]	; (6c8 <uart_console_init+0x18>)
     6ba:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
     6bc:	f7ff ffec 	bl	698 <uart_console_hook_install>

	return 0;
}
     6c0:	2000      	movs	r0, #0
     6c2:	bd08      	pop	{r3, pc}
     6c4:	0000462f 	.word	0x0000462f
     6c8:	20000008 	.word	0x20000008

000006cc <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
     6cc:	b508      	push	{r3, lr}
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     6ce:	4b11      	ldr	r3, [pc, #68]	; (714 <nrf_power_clock_isr+0x48>)
     6d0:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
     6d2:	b16a      	cbz	r2, 6f0 <nrf_power_clock_isr+0x24>
    return p_reg->INTENSET & mask;
     6d4:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     6d8:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
     6dc:	07d1      	lsls	r1, r2, #31
     6de:	d507      	bpl.n	6f0 <nrf_power_clock_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     6e0:	2200      	movs	r2, #0
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
     6e2:	480d      	ldr	r0, [pc, #52]	; (718 <nrf_power_clock_isr+0x4c>)
     6e4:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
     6e6:	6883      	ldr	r3, [r0, #8]
     6e8:	7a5b      	ldrb	r3, [r3, #9]
     6ea:	b90b      	cbnz	r3, 6f0 <nrf_power_clock_isr+0x24>
			clkstarted_handle(hfclk_dev);
     6ec:	f003 f9a5 	bl	3a3a <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     6f0:	4b0a      	ldr	r3, [pc, #40]	; (71c <nrf_power_clock_isr+0x50>)
     6f2:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
     6f4:	b162      	cbz	r2, 710 <nrf_power_clock_isr+0x44>
    return p_reg->INTENSET & mask;
     6f6:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     6fa:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
     6fe:	0792      	lsls	r2, r2, #30
     700:	d506      	bpl.n	710 <nrf_power_clock_isr+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     702:	2200      	movs	r2, #0

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
     704:	4806      	ldr	r0, [pc, #24]	; (720 <nrf_power_clock_isr+0x54>)
     706:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
     708:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(lfclk_dev);
     70c:	f003 b995 	b.w	3a3a <clkstarted_handle>
}
     710:	bd08      	pop	{r3, pc}
     712:	bf00      	nop
     714:	50005100 	.word	0x50005100
     718:	20001484 	.word	0x20001484
     71c:	50005104 	.word	0x50005104
     720:	20001490 	.word	0x20001490

00000724 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
     724:	2200      	movs	r2, #0
     726:	4b0d      	ldr	r3, [pc, #52]	; (75c <rtc1_nrf_isr+0x38>)
     728:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
     72c:	f04f 0220 	mov.w	r2, #32
     730:	f3ef 8111 	mrs	r1, BASEPRI
     734:	f382 8811 	msr	BASEPRI, r2
     738:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
     73c:	4a08      	ldr	r2, [pc, #32]	; (760 <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
     73e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
     742:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
     744:	1ac0      	subs	r0, r0, r3
     746:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
     74a:	4403      	add	r3, r0
     74c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
     74e:	f381 8811 	msr	BASEPRI, r1
     752:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
     756:	f001 bfa3 	b.w	26a0 <z_clock_announce>
     75a:	bf00      	nop
     75c:	50015000 	.word	0x50015000
     760:	20000024 	.word	0x20000024

00000764 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
     764:	b570      	push	{r4, r5, r6, lr}
     766:	4818      	ldr	r0, [pc, #96]	; (7c8 <z_clock_driver_init+0x64>)
     768:	f001 fa30 	bl	1bcc <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
     76c:	b348      	cbz	r0, 7c2 <z_clock_driver_init+0x5e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
     76e:	6843      	ldr	r3, [r0, #4]
     770:	2100      	movs	r1, #0
     772:	681b      	ldr	r3, [r3, #0]
     774:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
     776:	2601      	movs	r6, #1
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
     778:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
     77a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     77e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
     782:	4d12      	ldr	r5, [pc, #72]	; (7cc <z_clock_driver_init+0x68>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
     784:	4631      	mov	r1, r6
     786:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
     78a:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
     78e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     792:	4b0f      	ldr	r3, [pc, #60]	; (7d0 <z_clock_driver_init+0x6c>)
     794:	2015      	movs	r0, #21
     796:	601c      	str	r4, [r3, #0]
     798:	4b0e      	ldr	r3, [pc, #56]	; (7d4 <z_clock_driver_init+0x70>)
     79a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     79e:	4622      	mov	r2, r4
     7a0:	f000 fbfc 	bl	f9c <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
     7a4:	2015      	movs	r0, #21
     7a6:	f000 fbe9 	bl	f7c <arch_irq_enable>

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
     7aa:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
     7ac:	4b0a      	ldr	r3, [pc, #40]	; (7d8 <z_clock_driver_init+0x74>)
     7ae:	601e      	str	r6, [r3, #0]
     7b0:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
     7b2:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
     7b6:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     7b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     7bc:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
     7c0:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
     7c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     7c6:	e7fb      	b.n	7c0 <z_clock_driver_init+0x5c>
     7c8:	00004636 	.word	0x00004636
     7cc:	50015000 	.word	0x50015000
     7d0:	50015140 	.word	0x50015140
     7d4:	e000e100 	.word	0xe000e100
     7d8:	50015008 	.word	0x50015008

000007dc <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
     7dc:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
     7de:	4c25      	ldr	r4, [pc, #148]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     7e0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
     7e4:	bf08      	it	eq
     7e6:	4620      	moveq	r0, r4
	__asm__ volatile(
     7e8:	f04f 0320 	mov.w	r3, #32
     7ec:	f3ef 8511 	mrs	r5, BASEPRI
     7f0:	f383 8811 	msr	BASEPRI, r3
     7f4:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     7f8:	4b1f      	ldr	r3, [pc, #124]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     7fa:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
     7fe:	4b1f      	ldr	r3, [pc, #124]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     800:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
     802:	1aca      	subs	r2, r1, r3
     804:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
     808:	0212      	lsls	r2, r2, #8
     80a:	d41a      	bmi.n	842 <CONFIG_ISR_STACK_SIZE+0x42>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
     80c:	1e42      	subs	r2, r0, #1
     80e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
     812:	42a2      	cmp	r2, r4
     814:	bfa8      	it	ge
     816:	4622      	movge	r2, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
     818:	1c70      	adds	r0, r6, #1
     81a:	4410      	add	r0, r2
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
     81c:	42a0      	cmp	r0, r4
     81e:	bf94      	ite	ls
     820:	1818      	addls	r0, r3, r0
     822:	1918      	addhi	r0, r3, r4
	return (a - b) & COUNTER_MAX;
     824:	1a41      	subs	r1, r0, r1
     826:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     82a:	4a13      	ldr	r2, [pc, #76]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     82c:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
     830:	2902      	cmp	r1, #2
    p_reg->CC[ch] = cc_val;
     832:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
     836:	d906      	bls.n	846 <CONFIG_ISR_STACK_SIZE+0x46>
	__asm__ volatile(
     838:	f385 8811 	msr	BASEPRI, r5
     83c:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
     840:	bd70      	pop	{r4, r5, r6, pc}
		ticks = 0;
     842:	2200      	movs	r2, #0
     844:	e7e8      	b.n	818 <CONFIG_ISR_STACK_SIZE+0x18>
     return p_reg->COUNTER;
     846:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
     84a:	490d      	ldr	r1, [pc, #52]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
	return (a - b) & COUNTER_MAX;
     84c:	1ac3      	subs	r3, r0, r3
     84e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
     852:	1e5c      	subs	r4, r3, #1
     854:	428c      	cmp	r4, r1
     856:	d905      	bls.n	864 <CONFIG_ISR_STACK_SIZE+0x64>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     858:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     85c:	4b09      	ldr	r3, [pc, #36]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     85e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
     862:	e7e9      	b.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
		} else if (dt == 1) {
     864:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
     866:	bf02      	ittt	eq
     868:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     86a:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     86e:	f8c2 0540 	streq.w	r0, [r2, #1344]	; 0x540
     872:	e7e1      	b.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
     874:	00fffffe 	.word	0x00fffffe
     878:	50015000 	.word	0x50015000
     87c:	20000024 	.word	0x20000024
     880:	007ffffe 	.word	0x007ffffe
     884:	e000e100 	.word	0xe000e100

00000888 <z_clock_elapsed>:
	__asm__ volatile(
     888:	f04f 0220 	mov.w	r2, #32
     88c:	f3ef 8311 	mrs	r3, BASEPRI
     890:	f382 8811 	msr	BASEPRI, r2
     894:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     898:	4a06      	ldr	r2, [pc, #24]	; (8b4 <z_clock_elapsed+0x2c>)
     89a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
     89e:	4a06      	ldr	r2, [pc, #24]	; (8b8 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
     8a0:	6812      	ldr	r2, [r2, #0]
     8a2:	1a80      	subs	r0, r0, r2
     8a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
     8a8:	f383 8811 	msr	BASEPRI, r3
     8ac:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
     8b0:	4770      	bx	lr
     8b2:	bf00      	nop
     8b4:	50015000 	.word	0x50015000
     8b8:	20000024 	.word	0x20000024

000008bc <spm_config_peripheral.constprop.1>:
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int spm_config_peripheral(u8_t id, bool dma_present)
     8bc:	b508      	push	{r3, lr}
	 * Assign DMA capabilities and lock down the attribution.
	 *
	 * Note: the function assumes that the peripheral ID matches
	 * the IRQ line.
	 */
	NVIC_DisableIRQ(id);
     8be:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     8c0:	2b00      	cmp	r3, #0
     8c2:	db0c      	blt.n	8de <spm_config_peripheral.constprop.1+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     8c4:	2201      	movs	r2, #1
     8c6:	f000 011f 	and.w	r1, r0, #31
     8ca:	408a      	lsls	r2, r1
     8cc:	095b      	lsrs	r3, r3, #5
     8ce:	4910      	ldr	r1, [pc, #64]	; (910 <spm_config_peripheral.constprop.1+0x54>)
     8d0:	3320      	adds	r3, #32
     8d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     8d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     8da:	f3bf 8f6f 	isb	sy
	const u32_t perm = NRF_SPU->PERIPHID[id].PERM;
     8de:	0083      	lsls	r3, r0, #2
     8e0:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
     8e4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
     8e8:	2831      	cmp	r0, #49	; 0x31
	const u32_t perm = NRF_SPU->PERIPHID[id].PERM;
     8ea:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
     8ee:	d006      	beq.n	8fe <spm_config_peripheral.constprop.1+0x42>
	return present && (usel || split);
     8f0:	2a00      	cmp	r2, #0
     8f2:	da07      	bge.n	904 <spm_config_peripheral.constprop.1+0x48>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
     8f4:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
     8f8:	3a02      	subs	r2, #2
     8fa:	2a01      	cmp	r2, #1
     8fc:	d802      	bhi.n	904 <spm_config_peripheral.constprop.1+0x48>

	if (usel_or_split(id)) {
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
     8fe:	4a05      	ldr	r2, [pc, #20]	; (914 <spm_config_peripheral.constprop.1+0x58>)
     900:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, 0);
     904:	2100      	movs	r1, #0
     906:	f003 f905 	bl	3b14 <irq_target_state_set>
	return 0;
}
     90a:	2000      	movs	r0, #0
     90c:	bd08      	pop	{r3, pc}
     90e:	bf00      	nop
     910:	e000e100 	.word	0xe000e100
     914:	80000100 	.word	0x80000100

00000918 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
     918:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	u32_t *vtor_ns = (u32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
     91a:	f44f 4440 	mov.w	r4, #49152	; 0xc000
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
     91e:	f24c 0504 	movw	r5, #49156	; 0xc004
{
     922:	b085      	sub	sp, #20
	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
     924:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     928:	482c      	ldr	r0, [pc, #176]	; (9dc <spm_jump+0xc4>)
     92a:	f002 ffd2 	bl	38d2 <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
     92e:	6821      	ldr	r1, [r4, #0]
     930:	482b      	ldr	r0, [pc, #172]	; (9e0 <spm_jump+0xc8>)
     932:	f002 ffce 	bl	38d2 <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
     936:	6829      	ldr	r1, [r5, #0]
     938:	482a      	ldr	r0, [pc, #168]	; (9e4 <spm_jump+0xcc>)
     93a:	f002 ffca 	bl	38d2 <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
     93e:	2210      	movs	r2, #16
     940:	2100      	movs	r1, #0
     942:	4668      	mov	r0, sp
     944:	f003 f9ae 	bl	3ca4 <memset>
		.vtor_ns = (u32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
     948:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
     94a:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
     94c:	9300      	str	r3, [sp, #0]
     94e:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
     950:	f000 fed0 	bl	16f4 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
     954:	2001      	movs	r0, #1
     956:	f000 fefd 	bl	1754 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
     95a:	2000      	movs	r0, #0
     95c:	f000 fee6 	bl	172c <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
     960:	2000      	movs	r0, #0
     962:	f000 ff0b 	bl	177c <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
     966:	2101      	movs	r1, #1
     968:	2000      	movs	r0, #0
     96a:	f000 ff25 	bl	17b8 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
     96e:	f000 ff19 	bl	17a4 <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
     972:	682c      	ldr	r4, [r5, #0]

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
     974:	481c      	ldr	r0, [pc, #112]	; (9e8 <spm_jump+0xd0>)
     976:	f002 ffac 	bl	38d2 <printk>
		/* Note: Move UARTE0 before jumping, if it is
		 * to be used on the Non-Secure domain.
		 */

		/* Configure UARTE0 as non-secure */
		spm_config_peripheral(
     97a:	2008      	movs	r0, #8
     97c:	f7ff ff9e 	bl	8bc <spm_config_peripheral.constprop.1>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
     980:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
     984:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     988:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
     98c:	0864      	lsrs	r4, r4, #1
     98e:	0064      	lsls	r4, r4, #1
     990:	4620      	mov	r0, r4
     992:	4621      	mov	r1, r4
     994:	4622      	mov	r2, r4
     996:	4623      	mov	r3, r4
     998:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     99c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
     9a0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     9a4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
     9a8:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
     9ac:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
     9b0:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
     9b4:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
     9b8:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
     9bc:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
     9c0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
     9c4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
     9c8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
     9cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     9d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     9d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     9d8:	f7ff fda0 	bl	51c <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
     9dc:	00004798 	.word	0x00004798
     9e0:	000047af 	.word	0x000047af
     9e4:	000047c4 	.word	0x000047c4
     9e8:	000047e2 	.word	0x000047e2

000009ec <spm_config>:
		      (u32_t)reset_ns);
	}
}

void spm_config(void)
{
     9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash region\t\tDomain\t\tPermissions\n");
     9f0:	4870      	ldr	r0, [pc, #448]	; (bb4 <spm_config+0x1c8>)
     9f2:	f002 ff6e 	bl	38d2 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(flash_perm); i++) {
     9f6:	2100      	movs	r1, #0
     9f8:	4e6f      	ldr	r6, [pc, #444]	; (bb8 <spm_config+0x1cc>)
		NRF_SPU->FLASHREGION[i].PERM = flash_perm[i];
     9fa:	f8df 91d8 	ldr.w	r9, [pc, #472]	; bd4 <spm_config+0x1e8>
		PRINT("%02u 0x%05x 0x%05x \t", i, 32 * KB(i), 32 * KB(i + 1));
     9fe:	f8df 8200 	ldr.w	r8, [pc, #512]	; c00 <spm_config+0x214>
		PRINT("%c", flash_perm[i] & FLASH_READ  ? 'r' : '-');
     a02:	4d6e      	ldr	r5, [pc, #440]	; (bbc <spm_config+0x1d0>)
		NRF_SPU->FLASHREGION[i].PERM = flash_perm[i];
     a04:	f856 4b04 	ldr.w	r4, [r6], #4
     a08:	03ca      	lsls	r2, r1, #15
     a0a:	f501 73c0 	add.w	r3, r1, #384	; 0x180
     a0e:	f849 4023 	str.w	r4, [r9, r3, lsl #2]
		PRINT("%02u 0x%05x 0x%05x \t", i, 32 * KB(i), 32 * KB(i + 1));
     a12:	4640      	mov	r0, r8
     a14:	f502 4300 	add.w	r3, r2, #32768	; 0x8000
     a18:	1c4f      	adds	r7, r1, #1
     a1a:	f002 ff5a 	bl	38d2 <printk>
		PRINT("%s", flash_perm[i] & FLASH_SECURE ? "Secure\t\t" :
     a1e:	4b68      	ldr	r3, [pc, #416]	; (bc0 <spm_config+0x1d4>)
     a20:	f014 0f10 	tst.w	r4, #16
     a24:	4967      	ldr	r1, [pc, #412]	; (bc4 <spm_config+0x1d8>)
     a26:	4868      	ldr	r0, [pc, #416]	; (bc8 <spm_config+0x1dc>)
     a28:	bf08      	it	eq
     a2a:	4619      	moveq	r1, r3
     a2c:	f002 ff51 	bl	38d2 <printk>
		PRINT("%c", flash_perm[i] & FLASH_READ  ? 'r' : '-');
     a30:	f014 0f04 	tst.w	r4, #4
     a34:	bf14      	ite	ne
     a36:	2172      	movne	r1, #114	; 0x72
     a38:	212d      	moveq	r1, #45	; 0x2d
     a3a:	4628      	mov	r0, r5
     a3c:	f002 ff49 	bl	38d2 <printk>
		PRINT("%c", flash_perm[i] & FLASH_WRITE ? 'w' : '-');
     a40:	f014 0f02 	tst.w	r4, #2
     a44:	bf14      	ite	ne
     a46:	2177      	movne	r1, #119	; 0x77
     a48:	212d      	moveq	r1, #45	; 0x2d
     a4a:	4628      	mov	r0, r5
     a4c:	f002 ff41 	bl	38d2 <printk>
		PRINT("%c", flash_perm[i] & FLASH_EXEC  ? 'x' : '-');
     a50:	f014 0f01 	tst.w	r4, #1
     a54:	bf14      	ite	ne
     a56:	2178      	movne	r1, #120	; 0x78
     a58:	212d      	moveq	r1, #45	; 0x2d
     a5a:	4628      	mov	r0, r5
     a5c:	f002 ff39 	bl	38d2 <printk>
		PRINT("%c", flash_perm[i] & FLASH_LOCK  ? 'l' : '-');
     a60:	f414 7f80 	tst.w	r4, #256	; 0x100
     a64:	bf14      	ite	ne
     a66:	216c      	movne	r1, #108	; 0x6c
     a68:	212d      	moveq	r1, #45	; 0x2d
     a6a:	4628      	mov	r0, r5
     a6c:	f002 ff31 	bl	38d2 <printk>
		PRINT("\n");
     a70:	4856      	ldr	r0, [pc, #344]	; (bcc <spm_config+0x1e0>)
     a72:	f002 ff2e 	bl	38d2 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(flash_perm); i++) {
     a76:	2f20      	cmp	r7, #32
     a78:	4639      	mov	r1, r7
     a7a:	d1c3      	bne.n	a04 <spm_config+0x18>
	u32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
     a7c:	4b54      	ldr	r3, [pc, #336]	; (bd0 <spm_config+0x1e4>)
	NRF_SPU->FLASHNSC[0].REGION = FLASH_NSC_REGION_FROM_ADDR(__sg_start);
     a7e:	4a55      	ldr	r2, [pc, #340]	; (bd4 <spm_config+0x1e8>)
     a80:	f3c3 31c4 	ubfx	r1, r3, #15, #5
	u32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
     a84:	f3c3 030e 	ubfx	r3, r3, #0, #15
     a88:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
	NRF_SPU->FLASHNSC[0].SIZE = FLASH_NSC_SIZE_REG(nsc_size);
     a8c:	f3c3 1343 	ubfx	r3, r3, #5, #4
	NRF_SPU->FLASHNSC[0].REGION = FLASH_NSC_REGION_FROM_ADDR(__sg_start);
     a90:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
	NRF_SPU->FLASHNSC[0].SIZE = FLASH_NSC_SIZE_REG(nsc_size);
     a94:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
     a98:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
     a9c:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
     aa0:	484d      	ldr	r0, [pc, #308]	; (bd8 <spm_config+0x1ec>)
     aa2:	0152      	lsls	r2, r2, #5
     aa4:	f002 ff15 	bl	38d2 <printk>
	PRINT("\n");
     aa8:	4848      	ldr	r0, [pc, #288]	; (bcc <spm_config+0x1e0>)
     aaa:	f002 ff12 	bl	38d2 <printk>
	int err = spm_secure_services_init();
     aae:	f002 ffe3 	bl	3a78 <spm_secure_services_init>
	if (err != 0) {
     ab2:	4601      	mov	r1, r0
     ab4:	b110      	cbz	r0, abc <spm_config+0xd0>
		PRINT("Could not initialize secure services (err %d).\n", err);
     ab6:	4849      	ldr	r0, [pc, #292]	; (bdc <spm_config+0x1f0>)
     ab8:	f002 ff0b 	bl	38d2 <printk>
	PRINT("\n");
     abc:	4843      	ldr	r0, [pc, #268]	; (bcc <spm_config+0x1e0>)
     abe:	f002 ff08 	bl	38d2 <printk>
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
     ac2:	4847      	ldr	r0, [pc, #284]	; (be0 <spm_config+0x1f4>)
     ac4:	f002 ff05 	bl	38d2 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(sram_perm); i++) {
     ac8:	2100      	movs	r1, #0
     aca:	4e46      	ldr	r6, [pc, #280]	; (be4 <spm_config+0x1f8>)
		NRF_SPU->RAMREGION[i].PERM = sram_perm[i];
     acc:	f8df 9104 	ldr.w	r9, [pc, #260]	; bd4 <spm_config+0x1e8>
		PRINT("%02u 0x%05x 0x%05x\t", i, 8 * KB(i), 8 * KB(i + 1));
     ad0:	f8df 8130 	ldr.w	r8, [pc, #304]	; c04 <spm_config+0x218>
		PRINT("%c", sram_perm[i] & SRAM_READ  ? 'r' : '-');
     ad4:	4d39      	ldr	r5, [pc, #228]	; (bbc <spm_config+0x1d0>)
		NRF_SPU->RAMREGION[i].PERM = sram_perm[i];
     ad6:	f856 4b04 	ldr.w	r4, [r6], #4
     ada:	034a      	lsls	r2, r1, #13
     adc:	f501 73e0 	add.w	r3, r1, #448	; 0x1c0
     ae0:	f849 4023 	str.w	r4, [r9, r3, lsl #2]
		PRINT("%02u 0x%05x 0x%05x\t", i, 8 * KB(i), 8 * KB(i + 1));
     ae4:	4640      	mov	r0, r8
     ae6:	f502 5300 	add.w	r3, r2, #8192	; 0x2000
     aea:	1c4f      	adds	r7, r1, #1
     aec:	f002 fef1 	bl	38d2 <printk>
		PRINT("%s", sram_perm[i] & SRAM_SECURE ? "Secure\t\t" :
     af0:	4b33      	ldr	r3, [pc, #204]	; (bc0 <spm_config+0x1d4>)
     af2:	f014 0f10 	tst.w	r4, #16
     af6:	4933      	ldr	r1, [pc, #204]	; (bc4 <spm_config+0x1d8>)
     af8:	4833      	ldr	r0, [pc, #204]	; (bc8 <spm_config+0x1dc>)
     afa:	bf08      	it	eq
     afc:	4619      	moveq	r1, r3
     afe:	f002 fee8 	bl	38d2 <printk>
		PRINT("%c", sram_perm[i] & SRAM_READ  ? 'r' : '-');
     b02:	f014 0f04 	tst.w	r4, #4
     b06:	bf14      	ite	ne
     b08:	2172      	movne	r1, #114	; 0x72
     b0a:	212d      	moveq	r1, #45	; 0x2d
     b0c:	4628      	mov	r0, r5
     b0e:	f002 fee0 	bl	38d2 <printk>
		PRINT("%c", sram_perm[i] & SRAM_WRITE ? 'w' : '-');
     b12:	f014 0f02 	tst.w	r4, #2
     b16:	bf14      	ite	ne
     b18:	2177      	movne	r1, #119	; 0x77
     b1a:	212d      	moveq	r1, #45	; 0x2d
     b1c:	4628      	mov	r0, r5
     b1e:	f002 fed8 	bl	38d2 <printk>
		PRINT("%c", sram_perm[i] & SRAM_EXEC  ? 'x' : '-');
     b22:	f014 0f01 	tst.w	r4, #1
     b26:	bf14      	ite	ne
     b28:	2178      	movne	r1, #120	; 0x78
     b2a:	212d      	moveq	r1, #45	; 0x2d
     b2c:	4628      	mov	r0, r5
     b2e:	f002 fed0 	bl	38d2 <printk>
		PRINT("%c", sram_perm[i] & SRAM_LOCK  ? 'l' : '-');
     b32:	f414 7f80 	tst.w	r4, #256	; 0x100
     b36:	bf14      	ite	ne
     b38:	216c      	movne	r1, #108	; 0x6c
     b3a:	212d      	moveq	r1, #45	; 0x2d
     b3c:	4628      	mov	r0, r5
     b3e:	f002 fec8 	bl	38d2 <printk>
		PRINT("\n");
     b42:	4822      	ldr	r0, [pc, #136]	; (bcc <spm_config+0x1e0>)
     b44:	f002 fec5 	bl	38d2 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(sram_perm); i++) {
     b48:	2f20      	cmp	r7, #32
     b4a:	4639      	mov	r1, r7
     b4c:	d1c3      	bne.n	ad6 <spm_config+0xea>
	NRF_SPU->DPPI[0].PERM = mask;
     b4e:	2400      	movs	r4, #0
     b50:	4d20      	ldr	r5, [pc, #128]	; (bd4 <spm_config+0x1e8>)
	PRINT("\n");
     b52:	481e      	ldr	r0, [pc, #120]	; (bcc <spm_config+0x1e0>)
     b54:	f002 febd 	bl	38d2 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
     b58:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
     b5c:	4822      	ldr	r0, [pc, #136]	; (be8 <spm_config+0x1fc>)
     b5e:	f002 feb8 	bl	38d2 <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
     b62:	4f22      	ldr	r7, [pc, #136]	; (bec <spm_config+0x200>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
     b64:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
     b68:	f8df 809c 	ldr.w	r8, [pc, #156]	; c08 <spm_config+0x21c>
     b6c:	4d20      	ldr	r5, [pc, #128]	; (bf0 <spm_config+0x204>)
     b6e:	f8df 909c 	ldr.w	r9, [pc, #156]	; c0c <spm_config+0x220>
     b72:	796e      	ldrb	r6, [r5, #5]
     b74:	682a      	ldr	r2, [r5, #0]
     b76:	2e00      	cmp	r6, #0
     b78:	bf14      	ite	ne
     b7a:	463b      	movne	r3, r7
     b7c:	4643      	moveq	r3, r8
     b7e:	4621      	mov	r1, r4
     b80:	4648      	mov	r0, r9
     b82:	f002 fea6 	bl	38d2 <printk>
		if (!periph[i].nonsecure) {
     b86:	b966      	cbnz	r6, ba2 <spm_config+0x1b6>
			PRINT("\tSKIP\n");
     b88:	481a      	ldr	r0, [pc, #104]	; (bf4 <spm_config+0x208>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
     b8a:	3401      	adds	r4, #1
			PRINT("\tOK\n");
     b8c:	f002 fea1 	bl	38d2 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
     b90:	2c1a      	cmp	r4, #26
     b92:	f105 0508 	add.w	r5, r5, #8
     b96:	d1ec      	bne.n	b72 <spm_config+0x186>
	PRINT("\n");
     b98:	480c      	ldr	r0, [pc, #48]	; (bcc <spm_config+0x1e0>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
     b9a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
     b9e:	f002 be98 	b.w	38d2 <printk>
		err = spm_config_peripheral(periph[i].id, false);
     ba2:	7928      	ldrb	r0, [r5, #4]
     ba4:	f7ff fe8a 	bl	8bc <spm_config_peripheral.constprop.1>
		if (err) {
     ba8:	b108      	cbz	r0, bae <spm_config+0x1c2>
			PRINT("\tERROR\n");
     baa:	4813      	ldr	r0, [pc, #76]	; (bf8 <spm_config+0x20c>)
     bac:	e7ed      	b.n	b8a <spm_config+0x19e>
			PRINT("\tOK\n");
     bae:	4813      	ldr	r0, [pc, #76]	; (bfc <spm_config+0x210>)
     bb0:	e7eb      	b.n	b8a <spm_config+0x19e>
     bb2:	bf00      	nop
     bb4:	00004674 	.word	0x00004674
     bb8:	000042f4 	.word	0x000042f4
     bbc:	000046ac 	.word	0x000046ac
     bc0:	0000465d 	.word	0x0000465d
     bc4:	00004654 	.word	0x00004654
     bc8:	00004781 	.word	0x00004781
     bcc:	00004994 	.word	0x00004994
     bd0:	00007fe0 	.word	0x00007fe0
     bd4:	50003000 	.word	0x50003000
     bd8:	000046af 	.word	0x000046af
     bdc:	000046f5 	.word	0x000046f5
     be0:	00004725 	.word	0x00004725
     be4:	00004444 	.word	0x00004444
     be8:	0000475b 	.word	0x0000475b
     bec:	00004669 	.word	0x00004669
     bf0:	00004374 	.word	0x00004374
     bf4:	00004784 	.word	0x00004784
     bf8:	0000478b 	.word	0x0000478b
     bfc:	00004793 	.word	0x00004793
     c00:	00004697 	.word	0x00004697
     c04:	00004747 	.word	0x00004747
     c08:	00004661 	.word	0x00004661
     c0c:	00004777 	.word	0x00004777

00000c10 <__acle_se_spm_request_read>:
	size_t size;
};

__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read(void *destination, u32_t addr, size_t len)
{
     c10:	b510      	push	{r4, lr}
		 .size = FICR_PUBLIC_SIZE},
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
     c12:	2800      	cmp	r0, #0
     c14:	d04b      	beq.n	cae <__acle_se_spm_request_read+0x9e>
     c16:	2a00      	cmp	r2, #0
     c18:	d049      	beq.n	cae <__acle_se_spm_request_read+0x9e>

	for (size_t i = 0; i < ARRAY_SIZE(ranges); i++) {
		u32_t start = ranges[i].start;
		u32_t size = ranges[i].size;

		if (addr >= start && addr + len <= start + size) {
     c1a:	4b26      	ldr	r3, [pc, #152]	; (cb4 <__acle_se_spm_request_read+0xa4>)
     c1c:	4299      	cmp	r1, r3
     c1e:	d93c      	bls.n	c9a <__acle_se_spm_request_read+0x8a>
     c20:	1854      	adds	r4, r2, r1
     c22:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
     c26:	429c      	cmp	r4, r3
     c28:	d83a      	bhi.n	ca0 <__acle_se_spm_request_read+0x90>
			memcpy(destination, (const void *)addr, len);
     c2a:	f003 f811 	bl	3c50 <memcpy>
			return 0;
     c2e:	2000      	movs	r0, #0
		}
	}

	return -EPERM;
}
     c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     c34:	4671      	mov	r1, lr
     c36:	4672      	mov	r2, lr
     c38:	4673      	mov	r3, lr
     c3a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     c3e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
     c42:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     c46:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
     c4a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
     c4e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
     c52:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
     c56:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
     c5a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
     c5e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
     c62:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
     c66:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
     c6a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
     c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     c72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     c76:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     c7a:	f38e 8c00 	msr	CPSR_fs, lr
     c7e:	b410      	push	{r4}
     c80:	eef1 ca10 	vmrs	ip, fpscr
     c84:	f64f 7460 	movw	r4, #65376	; 0xff60
     c88:	f6c0 74ff 	movt	r4, #4095	; 0xfff
     c8c:	ea0c 0c04 	and.w	ip, ip, r4
     c90:	eee1 ca10 	vmsr	fpscr, ip
     c94:	bc10      	pop	{r4}
     c96:	46f4      	mov	ip, lr
     c98:	4774      	bxns	lr
		if (addr >= start && addr + len <= start + size) {
     c9a:	4b07      	ldr	r3, [pc, #28]	; (cb8 <__acle_se_spm_request_read+0xa8>)
     c9c:	4299      	cmp	r1, r3
     c9e:	d903      	bls.n	ca8 <__acle_se_spm_request_read+0x98>
     ca0:	4b06      	ldr	r3, [pc, #24]	; (cbc <__acle_se_spm_request_read+0xac>)
     ca2:	1854      	adds	r4, r2, r1
     ca4:	429c      	cmp	r4, r3
     ca6:	d9c0      	bls.n	c2a <__acle_se_spm_request_read+0x1a>
	return -EPERM;
     ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     cac:	e7c0      	b.n	c30 <__acle_se_spm_request_read+0x20>
		return -EINVAL;
     cae:	f06f 0015 	mvn.w	r0, #21
     cb2:	e7bd      	b.n	c30 <__acle_se_spm_request_read+0x20>
     cb4:	00ff0203 	.word	0x00ff0203
     cb8:	00ff012f 	.word	0x00ff012f
     cbc:	00ff0138 	.word	0x00ff0138

00000cc0 <__acle_se_spm_firmware_info>:
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info(u32_t fw_address, struct fw_info *info)
{
     cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cc4:	4683      	mov	fp, r0
     cc6:	b085      	sub	sp, #20
	const struct fw_info *tmp_info;

	if (info == NULL) {
     cc8:	4689      	mov	r9, r1
     cca:	2900      	cmp	r1, #0
     ccc:	d051      	beq.n	d72 <__acle_se_spm_firmware_info+0xb2>
 */
static inline const struct fw_info *fw_info_find(u32_t firmware_address)
{
	const struct fw_info *finfo;

	for (u32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
     cce:	2700      	movs	r7, #0
     cd0:	f8df a0b0 	ldr.w	sl, [pc, #176]	; d84 <__acle_se_spm_firmware_info+0xc4>
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
     cd4:	f8df 80b0 	ldr.w	r8, [pc, #176]	; d88 <__acle_se_spm_firmware_info+0xc8>
     cd8:	ae01      	add	r6, sp, #4
		finfo = fw_info_check(firmware_address +
						allowed_offsets[i]);
     cda:	f85a 4b04 	ldr.w	r4, [sl], #4
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
     cde:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
     ce2:	445c      	add	r4, fp
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
     ce4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
     ce8:	220c      	movs	r2, #12
     cea:	4631      	mov	r1, r6
     cec:	4620      	mov	r0, r4
     cee:	f002 ff88 	bl	3c02 <memcmp>
     cf2:	4605      	mov	r5, r0
     cf4:	b908      	cbnz	r0, cfa <__acle_se_spm_firmware_info+0x3a>
		if (finfo) {
     cf6:	2c00      	cmp	r4, #0
     cf8:	d13e      	bne.n	d78 <__acle_se_spm_firmware_info+0xb8>
	for (u32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
     cfa:	3701      	adds	r7, #1
     cfc:	2f03      	cmp	r7, #3
     cfe:	d1ec      	bne.n	cda <__acle_se_spm_firmware_info+0x1a>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
     d00:	f06f 050d 	mvn.w	r5, #13
}
     d04:	4628      	mov	r0, r5
     d06:	b005      	add	sp, #20
     d08:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     d0c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
     d10:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     d14:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
     d18:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
     d1c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
     d20:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
     d24:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
     d28:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
     d2c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
     d30:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
     d34:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
     d38:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
     d3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     d40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     d44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d48:	4671      	mov	r1, lr
     d4a:	4672      	mov	r2, lr
     d4c:	4673      	mov	r3, lr
     d4e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     d52:	f38e 8c00 	msr	CPSR_fs, lr
     d56:	b410      	push	{r4}
     d58:	eef1 ca10 	vmrs	ip, fpscr
     d5c:	f64f 7460 	movw	r4, #65376	; 0xff60
     d60:	f6c0 74ff 	movt	r4, #4095	; 0xfff
     d64:	ea0c 0c04 	and.w	ip, ip, r4
     d68:	eee1 ca10 	vmsr	fpscr, ip
     d6c:	bc10      	pop	{r4}
     d6e:	46f4      	mov	ip, lr
     d70:	4774      	bxns	lr
		return -EINVAL;
     d72:	f06f 0515 	mvn.w	r5, #21
     d76:	e7c5      	b.n	d04 <__acle_se_spm_firmware_info+0x44>
		memcpy(info, tmp_info, sizeof(*tmp_info));
     d78:	2220      	movs	r2, #32
     d7a:	4621      	mov	r1, r4
     d7c:	4648      	mov	r0, r9
     d7e:	f002 ff67 	bl	3c50 <memcpy>
		return 0;
     d82:	e7bf      	b.n	d04 <__acle_se_spm_firmware_info+0x44>
     d84:	000044c4 	.word	0x000044c4
     d88:	00004294 	.word	0x00004294

00000d8c <nrf_cc310_platform_abort_init>:

/** @brief Function to initialize the nrf_cc310_platform abort APIs.
 */
void nrf_cc310_platform_abort_init(void)
{
	nrf_cc310_platform_set_abort(&apis);
     d8c:	4801      	ldr	r0, [pc, #4]	; (d94 <nrf_cc310_platform_abort_init+0x8>)
     d8e:	f001 bee7 	b.w	2b60 <nrf_cc310_platform_set_abort>
     d92:	bf00      	nop
     d94:	000044d0 	.word	0x000044d0

00000d98 <mutex_unlock>:
}


/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock(nrf_cc310_platform_mutex_t *mutex) {
     d98:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
     d9a:	b130      	cbz	r0, daa <mutex_unlock+0x12>
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    }

    /* Ensure that the mutex has been initialized */
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
     d9c:	6843      	ldr	r3, [r0, #4]
     d9e:	b13b      	cbz	r3, db0 <mutex_unlock+0x18>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    }

    p_mutex = (struct k_mutex *)mutex->mutex;
     da0:	6800      	ldr	r0, [r0, #0]
     da2:	f001 f905 	bl	1fb0 <z_impl_k_mutex_unlock>

    k_mutex_unlock(p_mutex);
    return NRF_CC310_PLATFORM_SUCCESS;
     da6:	2000      	movs	r0, #0
}
     da8:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
     daa:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
     dae:	e7fb      	b.n	da8 <mutex_unlock+0x10>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
     db0:	4800      	ldr	r0, [pc, #0]	; (db4 <mutex_unlock+0x1c>)
     db2:	e7f9      	b.n	da8 <mutex_unlock+0x10>
     db4:	ffff8fea 	.word	0xffff8fea

00000db8 <mutex_free>:
static void mutex_free(nrf_cc310_platform_mutex_t *mutex) {
     db8:	b538      	push	{r3, r4, r5, lr}
    if (mutex == NULL) {
     dba:	4604      	mov	r4, r0
     dbc:	b918      	cbnz	r0, dc6 <mutex_free+0xe>
        platform_abort_apis.abort_fn(
     dbe:	4b0b      	ldr	r3, [pc, #44]	; (dec <mutex_free+0x34>)
     dc0:	480b      	ldr	r0, [pc, #44]	; (df0 <mutex_free+0x38>)
     dc2:	685b      	ldr	r3, [r3, #4]
     dc4:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
     dc6:	6865      	ldr	r5, [r4, #4]
     dc8:	b155      	cbz	r5, de0 <mutex_free+0x28>
    if ((mutex->flags & NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED) == 0) {
     dca:	f015 0502 	ands.w	r5, r5, #2
     dce:	6820      	ldr	r0, [r4, #0]
     dd0:	d107      	bne.n	de2 <mutex_free+0x2a>
        k_mem_slab_free(&mutex_slab, mutex->mutex);
     dd2:	4601      	mov	r1, r0
     dd4:	4807      	ldr	r0, [pc, #28]	; (df4 <mutex_free+0x3c>)
     dd6:	f001 f84b 	bl	1e70 <k_mem_slab_free>
        mutex->mutex = NULL;
     dda:	6025      	str	r5, [r4, #0]
    mutex->flags = NRF_CC310_PLATFORM_MUTEX_MASK_INVALID;
     ddc:	2300      	movs	r3, #0
     dde:	6063      	str	r3, [r4, #4]
}
     de0:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
     de2:	2214      	movs	r2, #20
     de4:	2100      	movs	r1, #0
     de6:	f002 ff5d 	bl	3ca4 <memset>
     dea:	e7f7      	b.n	ddc <mutex_free+0x24>
     dec:	20001428 	.word	0x20001428
     df0:	00004909 	.word	0x00004909
     df4:	20000028 	.word	0x20000028

00000df8 <mutex_init>:
static void mutex_init(nrf_cc310_platform_mutex_t *mutex) {
     df8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
     dfa:	4604      	mov	r4, r0
     dfc:	b918      	cbnz	r0, e06 <mutex_init+0xe>
        platform_abort_apis.abort_fn(
     dfe:	4b13      	ldr	r3, [pc, #76]	; (e4c <mutex_init+0x54>)
     e00:	4813      	ldr	r0, [pc, #76]	; (e50 <mutex_init+0x58>)
     e02:	685b      	ldr	r3, [r3, #4]
     e04:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID &&
     e06:	6863      	ldr	r3, [r4, #4]
     e08:	b9bb      	cbnz	r3, e3a <mutex_init+0x42>
     e0a:	6823      	ldr	r3, [r4, #0]
     e0c:	b9ab      	cbnz	r3, e3a <mutex_init+0x42>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
     e0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     e12:	4621      	mov	r1, r4
     e14:	480f      	ldr	r0, [pc, #60]	; (e54 <mutex_init+0x5c>)
     e16:	f000 ffff 	bl	1e18 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
     e1a:	b908      	cbnz	r0, e20 <mutex_init+0x28>
     e1c:	6823      	ldr	r3, [r4, #0]
     e1e:	b91b      	cbnz	r3, e28 <mutex_init+0x30>
            platform_abort_apis.abort_fn(
     e20:	4b0a      	ldr	r3, [pc, #40]	; (e4c <mutex_init+0x54>)
     e22:	480d      	ldr	r0, [pc, #52]	; (e58 <mutex_init+0x60>)
     e24:	685b      	ldr	r3, [r3, #4]
     e26:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
     e28:	2214      	movs	r2, #20
     e2a:	2100      	movs	r1, #0
     e2c:	6820      	ldr	r0, [r4, #0]
     e2e:	f002 ff39 	bl	3ca4 <memset>
        mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
     e32:	6863      	ldr	r3, [r4, #4]
     e34:	f043 0302 	orr.w	r3, r3, #2
     e38:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
     e3a:	6820      	ldr	r0, [r4, #0]
	z_impl_k_mutex_init(mutex);
     e3c:	f002 ffc1 	bl	3dc2 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_VALID;
     e40:	6863      	ldr	r3, [r4, #4]
     e42:	f043 0301 	orr.w	r3, r3, #1
     e46:	6063      	str	r3, [r4, #4]
}
     e48:	bd10      	pop	{r4, pc}
     e4a:	bf00      	nop
     e4c:	20001428 	.word	0x20001428
     e50:	00004909 	.word	0x00004909
     e54:	20000028 	.word	0x20000028
     e58:	0000492f 	.word	0x0000492f

00000e5c <mutex_lock>:
static int32_t mutex_lock(nrf_cc310_platform_mutex_t *mutex) {
     e5c:	b508      	push	{r3, lr}
    if(mutex == NULL) {
     e5e:	b158      	cbz	r0, e78 <mutex_lock+0x1c>
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
     e60:	6843      	ldr	r3, [r0, #4]
     e62:	b163      	cbz	r3, e7e <mutex_lock+0x22>
    p_mutex = (struct k_mutex *)mutex->mutex;
     e64:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
     e66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     e6a:	f001 f82f 	bl	1ecc <z_impl_k_mutex_lock>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
     e6e:	4b05      	ldr	r3, [pc, #20]	; (e84 <mutex_lock+0x28>)
    if (ret == 0) {
     e70:	2800      	cmp	r0, #0
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
     e72:	bf18      	it	ne
     e74:	4618      	movne	r0, r3
}
     e76:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
     e78:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
     e7c:	e7fb      	b.n	e76 <mutex_lock+0x1a>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
     e7e:	4802      	ldr	r0, [pc, #8]	; (e88 <mutex_lock+0x2c>)
     e80:	e7f9      	b.n	e76 <mutex_lock+0x1a>
     e82:	bf00      	nop
     e84:	ffff8fe9 	.word	0xffff8fe9
     e88:	ffff8fea 	.word	0xffff8fea

00000e8c <nrf_cc310_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc310_platform mutex APIs
 */
void nrf_cc310_platform_mutex_init(void)
{
     e8c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
     e8e:	4906      	ldr	r1, [pc, #24]	; (ea8 <nrf_cc310_platform_mutex_init+0x1c>)
     e90:	2340      	movs	r3, #64	; 0x40
     e92:	4806      	ldr	r0, [pc, #24]	; (eac <nrf_cc310_platform_mutex_init+0x20>)
     e94:	2214      	movs	r2, #20
     e96:	f002 ff82 	bl	3d9e <k_mem_slab_init>
            mutex_slab_buffer,
            sizeof(struct k_mutex),
            NUM_MUTEXES);

    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
}
     e9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
     e9e:	4904      	ldr	r1, [pc, #16]	; (eb0 <nrf_cc310_platform_mutex_init+0x24>)
     ea0:	4804      	ldr	r0, [pc, #16]	; (eb4 <nrf_cc310_platform_mutex_init+0x28>)
     ea2:	f001 be95 	b.w	2bd0 <nrf_cc310_platform_set_mutexes>
     ea6:	bf00      	nop
     ea8:	20000044 	.word	0x20000044
     eac:	20000028 	.word	0x20000028
     eb0:	000044e8 	.word	0x000044e8
     eb4:	000044d8 	.word	0x000044d8

00000eb8 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     eb8:	4804      	ldr	r0, [pc, #16]	; (ecc <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
     eba:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
     ebc:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
     ebe:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     ec0:	d003      	beq.n	eca <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     ec2:	4903      	ldr	r1, [pc, #12]	; (ed0 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
     ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
     ec8:	600a      	str	r2, [r1, #0]

00000eca <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
     eca:	4770      	bx	lr
    ldr r0, =_kernel
     ecc:	20000630 	.word	0x20000630
    ldr r1, =_SCS_ICSR
     ed0:	e000ed04 	.word	0xe000ed04

00000ed4 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     ed4:	4a09      	ldr	r2, [pc, #36]	; (efc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
     ed6:	490a      	ldr	r1, [pc, #40]	; (f00 <arch_swap+0x2c>)
	_current->arch.basepri = key;
     ed8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     eda:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
     edc:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
     ede:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     ee0:	4908      	ldr	r1, [pc, #32]	; (f04 <arch_swap+0x30>)
     ee2:	684b      	ldr	r3, [r1, #4]
     ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     ee8:	604b      	str	r3, [r1, #4]
     eea:	2300      	movs	r3, #0
     eec:	f383 8811 	msr	BASEPRI, r3
     ef0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
     ef4:	6893      	ldr	r3, [r2, #8]
}
     ef6:	6e98      	ldr	r0, [r3, #104]	; 0x68
     ef8:	4770      	bx	lr
     efa:	bf00      	nop
     efc:	20000630 	.word	0x20000630
     f00:	0000452c 	.word	0x0000452c
     f04:	e000ed00 	.word	0xe000ed00

00000f08 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     f08:	4912      	ldr	r1, [pc, #72]	; (f54 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
     f0a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     f0c:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
     f10:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
     f12:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     f16:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     f1a:	2020      	movs	r0, #32
    msr BASEPRI, r0
     f1c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
     f20:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
     f24:	4f0c      	ldr	r7, [pc, #48]	; (f58 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     f26:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
     f2a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
     f2c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
     f2e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
     f30:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
     f32:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     f34:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     f36:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
     f3a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
     f3c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
     f3e:	f002 fe21 	bl	3b84 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
     f42:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     f46:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
     f4a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
     f4e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
     f52:	4770      	bx	lr
    ldr r1, =_kernel
     f54:	20000630 	.word	0x20000630
    ldr v4, =_SCS_ICSR
     f58:	e000ed04 	.word	0xe000ed04

00000f5c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
     f5c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     f60:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     f62:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     f66:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     f6a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
     f6c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
     f70:	2902      	cmp	r1, #2
    beq _oops
     f72:	d0ff      	beq.n	f74 <_oops>

00000f74 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
     f74:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
     f76:	f002 fdfa 	bl	3b6e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
     f7a:	bd01      	pop	{r0, pc}

00000f7c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     f7c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     f7e:	2b00      	cmp	r3, #0
     f80:	db08      	blt.n	f94 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f82:	2201      	movs	r2, #1
     f84:	f000 001f 	and.w	r0, r0, #31
     f88:	fa02 f000 	lsl.w	r0, r2, r0
     f8c:	4a02      	ldr	r2, [pc, #8]	; (f98 <arch_irq_enable+0x1c>)
     f8e:	095b      	lsrs	r3, r3, #5
     f90:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
     f94:	4770      	bx	lr
     f96:	bf00      	nop
     f98:	e000e100 	.word	0xe000e100

00000f9c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     f9c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
     f9e:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
     fa0:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     fa4:	bfa8      	it	ge
     fa6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
     faa:	ea4f 1141 	mov.w	r1, r1, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     fae:	bfb8      	it	lt
     fb0:	4b05      	ldrlt	r3, [pc, #20]	; (fc8 <z_arm_irq_priority_set+0x2c>)
     fb2:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     fb4:	bfab      	itete	ge
     fb6:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     fba:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     fbe:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     fc2:	5419      	strblt	r1, [r3, r0]
}
     fc4:	4770      	bx	lr
     fc6:	bf00      	nop
     fc8:	e000ed14 	.word	0xe000ed14

00000fcc <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
     fcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
     fce:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
     fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
     fd2:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
     fd4:	9300      	str	r3, [sp, #0]
     fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
	stackEnd = pStackMem + stackSize;
     fd8:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
     fda:	f002 ffa8 	bl	3f2e <z_new_thread_init>
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
     fde:	4a0b      	ldr	r2, [pc, #44]	; (100c <arch_new_thread+0x40>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     fe0:	f1a4 0320 	sub.w	r3, r4, #32
     fe4:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
     fe8:	f022 0201 	bic.w	r2, r2, #1
     fec:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
     fee:	9a06      	ldr	r2, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
     ff0:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
     ff2:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
     ff4:	9a07      	ldr	r2, [sp, #28]
     ff6:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
     ff8:	9a08      	ldr	r2, [sp, #32]
     ffa:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
     ffc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1000:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1002:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    1004:	2300      	movs	r3, #0
    1006:	666b      	str	r3, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1008:	b002      	add	sp, #8
    100a:	bd70      	pop	{r4, r5, r6, pc}
    100c:	000035bf 	.word	0x000035bf

00001010 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    1010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1012:	461e      	mov	r6, r3
    1014:	4605      	mov	r5, r0
    1016:	460c      	mov	r4, r1
    1018:	4617      	mov	r7, r2
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    101a:	2300      	movs	r3, #0
    101c:	eee1 3a10 	vmsr	fpscr, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    1020:	f000 f9d6 	bl	13d0 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    1024:	4b0a      	ldr	r3, [pc, #40]	; (1050 <arch_switch_to_main_thread+0x40>)
	start_of_main_stack =
    1026:	443c      	add	r4, r7
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1028:	4628      	mov	r0, r5
	_current = main_thread;
    102a:	609d      	str	r5, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    102c:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1030:	f002 fda8 	bl	3b84 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1034:	4630      	mov	r0, r6
    1036:	f384 8809 	msr	PSP, r4
    103a:	2100      	movs	r1, #0
    103c:	b663      	cpsie	if
    103e:	f381 8811 	msr	BASEPRI, r1
    1042:	f3bf 8f6f 	isb	sy
    1046:	2200      	movs	r2, #0
    1048:	2300      	movs	r3, #0
    104a:	f002 fab8 	bl	35be <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    104e:	bf00      	nop
    1050:	20000630 	.word	0x20000630

00001054 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    1054:	4901      	ldr	r1, [pc, #4]	; (105c <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    1056:	2210      	movs	r2, #16
	str r2, [r1]
    1058:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    105a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    105c:	e000ed10 	.word	0xe000ed10

00001060 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1060:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1062:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    1066:	bf30      	wfi

	bx lr
    1068:	4770      	bx	lr
    106a:	bf00      	nop

0000106c <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
    106c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1070:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    1074:	4672      	mov	r2, lr

	push {r0, lr}
    1076:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
    1078:	f000 f8d2 	bl	1220 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    107c:	bd01      	pop	{r0, pc}
    107e:	bf00      	nop

00001080 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1080:	bf30      	wfi
    b z_SysNmiOnReset
    1082:	f7ff bffd 	b.w	1080 <z_SysNmiOnReset>
    1086:	bf00      	nop

00001088 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1088:	4a11      	ldr	r2, [pc, #68]	; (10d0 <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    108a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    108c:	4b11      	ldr	r3, [pc, #68]	; (10d4 <z_arm_prep_c+0x4c>)
    108e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1092:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1094:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1098:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    109c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    10a0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    10a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
    10a8:	4a0b      	ldr	r2, [pc, #44]	; (10d8 <z_arm_prep_c+0x50>)
    10aa:	6853      	ldr	r3, [r2, #4]
    10ac:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    10b0:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    10b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    10b6:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    10ba:	2300      	movs	r3, #0
    10bc:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    10c0:	f000 fdc4 	bl	1c4c <z_bss_zero>
	z_data_copy();
    10c4:	f000 fdcc 	bl	1c60 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    10c8:	f000 f950 	bl	136c <z_arm_int_lib_init>
	z_cstart();
    10cc:	f000 fe00 	bl	1cd0 <z_cstart>
    10d0:	00000000 	.word	0x00000000
    10d4:	e000ed00 	.word	0xe000ed00
    10d8:	e000ef30 	.word	0xe000ef30

000010dc <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    10dc:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    10de:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    10e0:	4a0b      	ldr	r2, [pc, #44]	; (1110 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    10e2:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    10e4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    10e6:	bf1e      	ittt	ne
	movne	r1, #0
    10e8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    10ea:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    10ec:	f002 fe55 	blne	3d9a <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    10f0:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    10f2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    10f6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    10fa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    10fe:	4905      	ldr	r1, [pc, #20]	; (1114 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1100:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1102:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    1104:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1106:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    110a:	4903      	ldr	r1, [pc, #12]	; (1118 <_isr_wrapper+0x3c>)
	bx r1
    110c:	4708      	bx	r1
    110e:	0000      	.short	0x0000
	ldr r2, =_kernel
    1110:	20000630 	.word	0x20000630
	ldr r1, =_sw_isr_table
    1114:	00004014 	.word	0x00004014
	ldr r1, =z_arm_int_exit
    1118:	00000eb9 	.word	0x00000eb9

0000111c <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    111c:	f002 fbe7 	bl	38ee <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1120:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1122:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    1126:	4808      	ldr	r0, [pc, #32]	; (1148 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1128:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    112c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    112e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1132:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1136:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1138:	4308      	orrs	r0, r1
    msr CONTROL, r0
    113a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    113e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1142:	f7ff ffa1 	bl	1088 <z_arm_prep_c>
    1146:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    1148:	20000bd0 	.word	0x20000bd0

0000114c <mem_manage_fault.isra.2>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    114c:	4b0c      	ldr	r3, [pc, #48]	; (1180 <mem_manage_fault.isra.2+0x34>)
    114e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1152:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1154:	0792      	lsls	r2, r2, #30
    1156:	d508      	bpl.n	116a <mem_manage_fault.isra.2+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    1158:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    115a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    115c:	0612      	lsls	r2, r2, #24
    115e:	d504      	bpl.n	116a <mem_manage_fault.isra.2+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    1160:	b118      	cbz	r0, 116a <mem_manage_fault.isra.2+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1162:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1168:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    116a:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    116c:	4b04      	ldr	r3, [pc, #16]	; (1180 <mem_manage_fault.isra.2+0x34>)
    116e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    1172:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1176:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    117a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    117c:	7008      	strb	r0, [r1, #0]

	return reason;
}
    117e:	4770      	bx	lr
    1180:	e000ed00 	.word	0xe000ed00

00001184 <bus_fault.isra.3>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1184:	4b0d      	ldr	r3, [pc, #52]	; (11bc <bus_fault.isra.3+0x38>)
    1186:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    118a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    118c:	0592      	lsls	r2, r2, #22
    118e:	d508      	bpl.n	11a2 <bus_fault.isra.3+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1190:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1192:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1194:	0412      	lsls	r2, r2, #16
    1196:	d504      	bpl.n	11a2 <bus_fault.isra.3+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    1198:	b118      	cbz	r0, 11a2 <bus_fault.isra.3+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    119a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    119c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    11a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    11a2:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    11a4:	4b05      	ldr	r3, [pc, #20]	; (11bc <bus_fault.isra.3+0x38>)
    11a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    11a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    11aa:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    11ac:	bf58      	it	pl
    11ae:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    11b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    11b2:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    11b6:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    11b8:	7008      	strb	r0, [r1, #0]

	return reason;
}
    11ba:	4770      	bx	lr
    11bc:	e000ed00 	.word	0xe000ed00

000011c0 <usage_fault.isra.4>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    11c0:	4b07      	ldr	r3, [pc, #28]	; (11e0 <usage_fault.isra.4+0x20>)

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;

	return reason;
}
    11c2:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    11c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    11c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    11c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    11ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    11cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    11ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    11d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    11d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    11d4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    11d8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    11dc:	629a      	str	r2, [r3, #40]	; 0x28
}
    11de:	4770      	bx	lr
    11e0:	e000ed00 	.word	0xe000ed00

000011e4 <secure_fault.isra.5>:
 */
static void secure_fault(const z_arch_esf_t *esf)
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
    11e4:	4b0d      	ldr	r3, [pc, #52]	; (121c <secure_fault.isra.5+0x38>)
    11e6:	699a      	ldr	r2, [r3, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    11e8:	695a      	ldr	r2, [r3, #20]
		PR_EXC("  Address: 0x%x", sfar);
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    11ea:	695a      	ldr	r2, [r3, #20]
    11ec:	07d0      	lsls	r0, r2, #31
    11ee:	d40f      	bmi.n	1210 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid entry point");
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    11f0:	695a      	ldr	r2, [r3, #20]
    11f2:	0791      	lsls	r1, r2, #30
    11f4:	d40c      	bmi.n	1210 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid integrity signature");
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    11f6:	695a      	ldr	r2, [r3, #20]
    11f8:	0752      	lsls	r2, r2, #29
    11fa:	d409      	bmi.n	1210 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid exception return");
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    11fc:	695a      	ldr	r2, [r3, #20]
    11fe:	0710      	lsls	r0, r2, #28
    1200:	d406      	bmi.n	1210 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Attribution unit violation");
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    1202:	695a      	ldr	r2, [r3, #20]
    1204:	06d1      	lsls	r1, r2, #27
    1206:	d403      	bmi.n	1210 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    1208:	695a      	ldr	r2, [r3, #20]
    120a:	0692      	lsls	r2, r2, #26
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    120c:	bf58      	it	pl
    120e:	695a      	ldrpl	r2, [r3, #20]
		PR_FAULT_INFO("  Lazy state error");
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    1210:	695a      	ldr	r2, [r3, #20]
    1212:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    1216:	615a      	str	r2, [r3, #20]
}
    1218:	4770      	bx	lr
    121a:	bf00      	nop
    121c:	e000edd0 	.word	0xe000edd0

00001220 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    1220:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1222:	4b41      	ldr	r3, [pc, #260]	; (1328 <z_arm_fault+0x108>)
{
    1224:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1226:	685b      	ldr	r3, [r3, #4]
    1228:	2500      	movs	r5, #0
    122a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    122e:	f385 8811 	msr	BASEPRI, r5
    1232:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1236:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
    123a:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
    123e:	d11e      	bne.n	127e <z_arm_fault+0x5e>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    1240:	f012 0401 	ands.w	r4, r2, #1
    1244:	d01a      	beq.n	127c <z_arm_fault+0x5c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    1246:	0656      	lsls	r6, r2, #25
    1248:	f002 0408 	and.w	r4, r2, #8
    124c:	d467      	bmi.n	131e <z_arm_fault+0xfe>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    124e:	f082 0204 	eor.w	r2, r2, #4
    1252:	f3c2 0580 	ubfx	r5, r2, #2, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1256:	b164      	cbz	r4, 1272 <z_arm_fault+0x52>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    1258:	f3ef 8689 	mrs	r6, PSP_NS
	*recoverable = false;
    125c:	2200      	movs	r2, #0
	switch (fault) {
    125e:	3b03      	subs	r3, #3
	*recoverable = false;
    1260:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    1264:	2b04      	cmp	r3, #4
    1266:	d84b      	bhi.n	1300 <z_arm_fault+0xe0>
    1268:	e8df f003 	tbb	[pc, r3]
    126c:	41504c0b 	.word	0x41504c0b
    1270:	48          	.byte	0x48
    1271:	00          	.byte	0x00
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    1272:	f3ef 8688 	mrs	r6, MSP_NS
  return(result);
    1276:	e7f1      	b.n	125c <z_arm_fault+0x3c>
			ptr_esf =  (z_arch_esf_t *)psp;
    1278:	460e      	mov	r6, r1
    127a:	e7ef      	b.n	125c <z_arm_fault+0x3c>
	*nested_exc = false;
    127c:	4625      	mov	r5, r4
		return NULL;
    127e:	462e      	mov	r6, r5
    1280:	e7ec      	b.n	125c <z_arm_fault+0x3c>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1282:	4b29      	ldr	r3, [pc, #164]	; (1328 <z_arm_fault+0x108>)
    1284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1286:	0792      	lsls	r2, r2, #30
    1288:	d43a      	bmi.n	1300 <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    128a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    128c:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    1290:	d008      	beq.n	12a4 <z_arm_fault+0x84>
		if (SCB_MMFSR != 0) {
    1292:	3328      	adds	r3, #40	; 0x28
    1294:	781b      	ldrb	r3, [r3, #0]
    1296:	b1eb      	cbz	r3, 12d4 <z_arm_fault+0xb4>
			reason = mem_manage_fault(esf, 1, recoverable);
    1298:	2001      	movs	r0, #1
    129a:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    129e:	f7ff ff55 	bl	114c <mem_manage_fault.isra.2>
    12a2:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    12a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12a8:	b993      	cbnz	r3, 12d0 <z_arm_fault+0xb0>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    12aa:	2220      	movs	r2, #32
    12ac:	4631      	mov	r1, r6
    12ae:	a802      	add	r0, sp, #8
    12b0:	f002 fcce 	bl	3c50 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    12b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    12b6:	b36d      	cbz	r5, 1314 <z_arm_fault+0xf4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    12b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
    12bc:	b922      	cbnz	r2, 12c8 <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    12be:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    12c2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    12c6:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    12c8:	a902      	add	r1, sp, #8
    12ca:	4620      	mov	r0, r4
    12cc:	f002 fc4d 	bl	3b6a <z_arm_fatal_error>
}
    12d0:	b00b      	add	sp, #44	; 0x2c
    12d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
    12d4:	4b15      	ldr	r3, [pc, #84]	; (132c <z_arm_fault+0x10c>)
    12d6:	781b      	ldrb	r3, [r3, #0]
    12d8:	b12b      	cbz	r3, 12e6 <z_arm_fault+0xc6>
			reason = bus_fault(esf, 1, recoverable);
    12da:	2001      	movs	r0, #1
    12dc:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    12e0:	f7ff ff50 	bl	1184 <bus_fault.isra.3>
    12e4:	e7dd      	b.n	12a2 <z_arm_fault+0x82>
		} else if (SCB_UFSR != 0) {
    12e6:	4b12      	ldr	r3, [pc, #72]	; (1330 <z_arm_fault+0x110>)
    12e8:	881f      	ldrh	r7, [r3, #0]
    12ea:	b2bf      	uxth	r7, r7
    12ec:	b117      	cbz	r7, 12f4 <z_arm_fault+0xd4>
		reason = usage_fault(esf);
    12ee:	f7ff ff67 	bl	11c0 <usage_fault.isra.4>
    12f2:	e7d6      	b.n	12a2 <z_arm_fault+0x82>
		} else if (SAU->SFSR != 0) {
    12f4:	4b0f      	ldr	r3, [pc, #60]	; (1334 <z_arm_fault+0x114>)
    12f6:	695c      	ldr	r4, [r3, #20]
    12f8:	2c00      	cmp	r4, #0
    12fa:	d0d3      	beq.n	12a4 <z_arm_fault+0x84>
		secure_fault(esf);
    12fc:	f7ff ff72 	bl	11e4 <secure_fault.isra.5>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    1300:	2400      	movs	r4, #0
    1302:	e7cf      	b.n	12a4 <z_arm_fault+0x84>
		reason = mem_manage_fault(esf, 0, recoverable);
    1304:	f10d 0107 	add.w	r1, sp, #7
    1308:	2000      	movs	r0, #0
    130a:	e7c8      	b.n	129e <z_arm_fault+0x7e>
		reason = bus_fault(esf, 0, recoverable);
    130c:	f10d 0107 	add.w	r1, sp, #7
    1310:	2000      	movs	r0, #0
    1312:	e7e5      	b.n	12e0 <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1314:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1318:	f023 0301 	bic.w	r3, r3, #1
    131c:	e7d3      	b.n	12c6 <z_arm_fault+0xa6>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    131e:	2c00      	cmp	r4, #0
    1320:	d1aa      	bne.n	1278 <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)msp;
    1322:	4606      	mov	r6, r0
			*nested_exc = true;
    1324:	2501      	movs	r5, #1
    1326:	e799      	b.n	125c <z_arm_fault+0x3c>
    1328:	e000ed00 	.word	0xe000ed00
    132c:	e000ed29 	.word	0xe000ed29
    1330:	e000ed2a 	.word	0xe000ed2a
    1334:	e000edd0 	.word	0xe000edd0

00001338 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1338:	4a02      	ldr	r2, [pc, #8]	; (1344 <z_arm_fault_init+0xc>)
    133a:	6953      	ldr	r3, [r2, #20]
    133c:	f043 0310 	orr.w	r3, r3, #16
    1340:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1342:	4770      	bx	lr
    1344:	e000ed00 	.word	0xe000ed00

00001348 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    1348:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    134c:	4905      	ldr	r1, [pc, #20]	; (1364 <sys_arch_reboot+0x1c>)
    134e:	4b06      	ldr	r3, [pc, #24]	; (1368 <sys_arch_reboot+0x20>)
    1350:	68ca      	ldr	r2, [r1, #12]
    1352:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1356:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1358:	60cb      	str	r3, [r1, #12]
    135a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    135e:	bf00      	nop
    1360:	e7fd      	b.n	135e <sys_arch_reboot+0x16>
    1362:	bf00      	nop
    1364:	e000ed00 	.word	0xe000ed00
    1368:	05fa0004 	.word	0x05fa0004

0000136c <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    136c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    136e:	2120      	movs	r1, #32
    1370:	4803      	ldr	r0, [pc, #12]	; (1380 <z_arm_int_lib_init+0x14>)
    1372:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1374:	3301      	adds	r3, #1
    1376:	2b41      	cmp	r3, #65	; 0x41
    1378:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    137c:	d1f9      	bne.n	1372 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    137e:	4770      	bx	lr
    1380:	e000e100 	.word	0xe000e100

00001384 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    1384:	b538      	push	{r3, r4, r5, lr}
    1386:	4605      	mov	r5, r0
	__asm__ volatile(
    1388:	f04f 0320 	mov.w	r3, #32
    138c:	f3ef 8411 	mrs	r4, BASEPRI
    1390:	f383 8811 	msr	BASEPRI, r3
    1394:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    1398:	f002 fdd8 	bl	3f4c <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    139c:	4b0a      	ldr	r3, [pc, #40]	; (13c8 <z_impl_k_thread_abort+0x44>)
    139e:	689b      	ldr	r3, [r3, #8]
    13a0:	42ab      	cmp	r3, r5
    13a2:	d10b      	bne.n	13bc <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    13a4:	4b09      	ldr	r3, [pc, #36]	; (13cc <z_impl_k_thread_abort+0x48>)
    13a6:	685a      	ldr	r2, [r3, #4]
    13a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
    13ac:	b912      	cbnz	r2, 13b4 <z_impl_k_thread_abort+0x30>
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    13ae:	4620      	mov	r0, r4
    13b0:	f7ff fd90 	bl	ed4 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    13b4:	685a      	ldr	r2, [r3, #4]
    13b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    13ba:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    13bc:	4620      	mov	r0, r4
}
    13be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    13c2:	f002 bd31 	b.w	3e28 <z_reschedule_irqlock>
    13c6:	bf00      	nop
    13c8:	20000630 	.word	0x20000630
    13cc:	e000ed00 	.word	0xe000ed00

000013d0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    13d0:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    13d2:	4b0e      	ldr	r3, [pc, #56]	; (140c <z_arm_configure_static_mpu_regions+0x3c>)
{
    13d4:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    13d6:	9302      	str	r3, [sp, #8]
    13d8:	4b0d      	ldr	r3, [pc, #52]	; (1410 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    13da:	4c0e      	ldr	r4, [pc, #56]	; (1414 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    13dc:	9303      	str	r3, [sp, #12]
    13de:	4b0e      	ldr	r3, [pc, #56]	; (1418 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    13e0:	4a0e      	ldr	r2, [pc, #56]	; (141c <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    13e2:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    13e4:	ab02      	add	r3, sp, #8
    13e6:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    13e8:	a801      	add	r0, sp, #4
    13ea:	4623      	mov	r3, r4
    13ec:	2101      	movs	r1, #1
    13ee:	f000 f903 	bl	15f8 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    13f2:	2300      	movs	r3, #0
    13f4:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    13f6:	4b0a      	ldr	r3, [pc, #40]	; (1420 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    13f8:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    13fa:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    13fc:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    13fe:	9305      	str	r3, [sp, #20]
    1400:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1402:	f000 f903 	bl	160c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1406:	b008      	add	sp, #32
    1408:	bd10      	pop	{r4, pc}
    140a:	bf00      	nop
    140c:	20000000 	.word	0x20000000
    1410:	00000000 	.word	0x00000000
    1414:	20010000 	.word	0x20010000
    1418:	00010006 	.word	0x00010006
    141c:	20000000 	.word	0x20000000
    1420:	20000000 	.word	0x20000000

00001424 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    1424:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    1426:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    1428:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    142a:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    142e:	f004 031f 	and.w	r3, r4, #31
    1432:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1434:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    1436:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1438:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    143c:	4904      	ldr	r1, [pc, #16]	; (1450 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    143e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    1442:	f043 0301 	orr.w	r3, r3, #1
    1446:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    1448:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    144a:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    144c:	bd10      	pop	{r4, pc}
    144e:	bf00      	nop
    1450:	e000ed90 	.word	0xe000ed90

00001454 <mpu_configure_regions_and_partition.constprop.1>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    1454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1458:	4680      	mov	r8, r0
    145a:	4689      	mov	r9, r1
    145c:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    145e:	2700      	movs	r7, #0
	MPU->RNR = index;
    1460:	4d48      	ldr	r5, [pc, #288]	; (1584 <mpu_configure_regions_and_partition.constprop.1+0x130>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    1462:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    1464:	454f      	cmp	r7, r9
    1466:	da07      	bge.n	1478 <mpu_configure_regions_and_partition.constprop.1+0x24>
		if (regions[i]->size == 0U) {
    1468:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
    146c:	685e      	ldr	r6, [r3, #4]
    146e:	b3c6      	cbz	r6, 14e2 <mpu_configure_regions_and_partition.constprop.1+0x8e>
		&&
    1470:	2e1f      	cmp	r6, #31
    1472:	d805      	bhi.n	1480 <mpu_configure_regions_and_partition.constprop.1+0x2c>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    1474:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    1478:	4620      	mov	r0, r4
    147a:	b005      	add	sp, #20
    147c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    1480:	06f2      	lsls	r2, r6, #27
    1482:	d1f7      	bne.n	1474 <mpu_configure_regions_and_partition.constprop.1+0x20>
		((part->start &
    1484:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    1488:	f01a 0f1f 	tst.w	sl, #31
    148c:	d1f2      	bne.n	1474 <mpu_configure_regions_and_partition.constprop.1+0x20>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    148e:	4650      	mov	r0, sl
    1490:	f002 fba2 	bl	3bd8 <arm_cmse_mpu_region_get>
    1494:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1496:	eb06 000a 	add.w	r0, r6, sl
    149a:	3801      	subs	r0, #1
    149c:	f002 fb9c 	bl	3bd8 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    14a0:	4583      	cmp	fp, r0
    14a2:	d1e7      	bne.n	1474 <mpu_configure_regions_and_partition.constprop.1+0x20>
		if ((u_reg_index == -EINVAL) ||
    14a4:	f11b 0f16 	cmn.w	fp, #22
    14a8:	d0e4      	beq.n	1474 <mpu_configure_regions_and_partition.constprop.1+0x20>
			(u_reg_index > (reg_index - 1))) {
    14aa:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    14ac:	455b      	cmp	r3, fp
    14ae:	dbe1      	blt.n	1474 <mpu_configure_regions_and_partition.constprop.1+0x20>
	MPU->RNR = index;
    14b0:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    14b4:	68e8      	ldr	r0, [r5, #12]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    14b6:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	MPU->RNR = index;
    14ba:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    14be:	692e      	ldr	r6, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    14c0:	f020 001f 	bic.w	r0, r0, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    14c4:	e9d1 3200 	ldrd	r3, r2, [r1]
    14c8:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    14ca:	4298      	cmp	r0, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    14cc:	f046 061f 	orr.w	r6, r6, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    14d0:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
    14d4:	d118      	bne.n	1508 <mpu_configure_regions_and_partition.constprop.1+0xb4>
    14d6:	4556      	cmp	r6, sl
    14d8:	d105      	bne.n	14e6 <mpu_configure_regions_and_partition.constprop.1+0x92>
			mpu_configure_region(u_reg_index, regions[i]);
    14da:	fa5f f08b 	uxtb.w	r0, fp
    14de:	f002 fb59 	bl	3b94 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    14e2:	3701      	adds	r7, #1
    14e4:	e7be      	b.n	1464 <mpu_configure_regions_and_partition.constprop.1+0x10>
	MPU->RNR = index;
    14e6:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    14ea:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    14ec:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    14f0:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    14f4:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    14f6:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    14f8:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    14fa:	f002 fb4b 	bl	3b94 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    14fe:	f110 0f16 	cmn.w	r0, #22
    1502:	d0b7      	beq.n	1474 <mpu_configure_regions_and_partition.constprop.1+0x20>
			reg_index++;
    1504:	1c44      	adds	r4, r0, #1
    1506:	e7ec      	b.n	14e2 <mpu_configure_regions_and_partition.constprop.1+0x8e>
	MPU->RNR = index;
    1508:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    150c:	692a      	ldr	r2, [r5, #16]
    150e:	3b01      	subs	r3, #1
    1510:	f023 031f 	bic.w	r3, r3, #31
    1514:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    1518:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    151a:	4556      	cmp	r6, sl
    151c:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    151e:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    1520:	d0eb      	beq.n	14fa <mpu_configure_regions_and_partition.constprop.1+0xa6>
				mpu_configure_region(reg_index, regions[i]);
    1522:	f002 fb37 	bl	3b94 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    1526:	f110 0f16 	cmn.w	r0, #22
    152a:	d0a3      	beq.n	1474 <mpu_configure_regions_and_partition.constprop.1+0x20>
	MPU->RNR = index;
    152c:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    1530:	68ea      	ldr	r2, [r5, #12]
    1532:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    1536:	3e01      	subs	r6, #1
	attr->rbar = MPU->RBAR &
    1538:	f362 0304 	bfi	r3, r2, #0, #5
    153c:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1540:	692b      	ldr	r3, [r5, #16]
    1542:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1546:	085b      	lsrs	r3, r3, #1
    1548:	f363 1247 	bfi	r2, r3, #5, #3
    154c:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    1550:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
    1554:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
    1556:	e9d2 3200 	ldrd	r3, r2, [r2]
    155a:	4413      	add	r3, r2
    155c:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    155e:	f023 031f 	bic.w	r3, r3, #31
    1562:	441e      	add	r6, r3
    1564:	eba6 060a 	sub.w	r6, r6, sl
    1568:	b2c4      	uxtb	r4, r0
    156a:	f026 061f 	bic.w	r6, r6, #31

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    156e:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
    1570:	9603      	str	r6, [sp, #12]
    1572:	f63f af7f 	bhi.w	1474 <mpu_configure_regions_and_partition.constprop.1+0x20>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    1576:	4620      	mov	r0, r4
    1578:	4669      	mov	r1, sp
    157a:	f7ff ff53 	bl	1424 <region_init>
			reg_index++;
    157e:	3401      	adds	r4, #1
    1580:	e7af      	b.n	14e2 <mpu_configure_regions_and_partition.constprop.1+0x8e>
    1582:	bf00      	nop
    1584:	e000ed90 	.word	0xe000ed90

00001588 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1588:	2205      	movs	r2, #5
    158a:	4b03      	ldr	r3, [pc, #12]	; (1598 <arm_core_mpu_enable+0x10>)
    158c:	605a      	str	r2, [r3, #4]
    158e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1592:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1596:	4770      	bx	lr
    1598:	e000ed90 	.word	0xe000ed90

0000159c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    159c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    15a0:	2200      	movs	r2, #0
    15a2:	4b01      	ldr	r3, [pc, #4]	; (15a8 <arm_core_mpu_disable+0xc>)
    15a4:	605a      	str	r2, [r3, #4]
}
    15a6:	4770      	bx	lr
    15a8:	e000ed90 	.word	0xe000ed90

000015ac <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    15ac:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    15ae:	4d0e      	ldr	r5, [pc, #56]	; (15e8 <arm_mpu_init+0x3c>)
    15b0:	682e      	ldr	r6, [r5, #0]
    15b2:	2e10      	cmp	r6, #16
    15b4:	d815      	bhi.n	15e2 <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    15b6:	2400      	movs	r4, #0
	arm_core_mpu_disable();
    15b8:	f7ff fff0 	bl	159c <arm_core_mpu_disable>
	MPU->MAIR0 =
    15bc:	4b0b      	ldr	r3, [pc, #44]	; (15ec <arm_mpu_init+0x40>)
    15be:	4a0c      	ldr	r2, [pc, #48]	; (15f0 <arm_mpu_init+0x44>)
    15c0:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    15c2:	42a6      	cmp	r6, r4
    15c4:	d105      	bne.n	15d2 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    15c6:	4b0b      	ldr	r3, [pc, #44]	; (15f4 <arm_mpu_init+0x48>)
    15c8:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
    15ca:	f7ff ffdd 	bl	1588 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    15ce:	2000      	movs	r0, #0
}
    15d0:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    15d2:	6869      	ldr	r1, [r5, #4]
    15d4:	4620      	mov	r0, r4
    15d6:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    15da:	f7ff ff23 	bl	1424 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    15de:	3401      	adds	r4, #1
    15e0:	e7ef      	b.n	15c2 <arm_mpu_init+0x16>
		return -1;
    15e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    15e6:	e7f3      	b.n	15d0 <arm_mpu_init+0x24>
    15e8:	000042a0 	.word	0x000042a0
    15ec:	e000ed90 	.word	0xe000ed90
    15f0:	0044ffaa 	.word	0x0044ffaa
    15f4:	2000068c 	.word	0x2000068c

000015f8 <arm_core_mpu_configure_static_mpu_regions>:
{
    15f8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    15fa:	4c03      	ldr	r4, [pc, #12]	; (1608 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    15fc:	7822      	ldrb	r2, [r4, #0]
    15fe:	f7ff ff29 	bl	1454 <mpu_configure_regions_and_partition.constprop.1>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1602:	7020      	strb	r0, [r4, #0]
}
    1604:	bd10      	pop	{r4, pc}
    1606:	bf00      	nop
    1608:	2000068c 	.word	0x2000068c

0000160c <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    160c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1610:	4c25      	ldr	r4, [pc, #148]	; (16a8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>)
    1612:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1614:	4680      	mov	r8, r0
    1616:	2700      	movs	r7, #0
    1618:	46a1      	mov	r9, r4
	attr->rbar = MPU->RBAR &
    161a:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
    161e:	4d23      	ldr	r5, [pc, #140]	; (16ac <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1620:	4557      	cmp	r7, sl
    1622:	da1a      	bge.n	165a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    1624:	f8d8 3004 	ldr.w	r3, [r8, #4]
    1628:	9301      	str	r3, [sp, #4]
    162a:	2b00      	cmp	r3, #0
    162c:	d036      	beq.n	169c <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    162e:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1632:	4608      	mov	r0, r1
    1634:	9100      	str	r1, [sp, #0]
    1636:	f002 facf 	bl	3bd8 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    163a:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    163e:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1640:	1858      	adds	r0, r3, r1
    1642:	3801      	subs	r0, #1
    1644:	f002 fac8 	bl	3bd8 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1648:	4286      	cmp	r6, r0
    164a:	4a19      	ldr	r2, [pc, #100]	; (16b0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
    164c:	d008      	beq.n	1660 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    164e:	2314      	movs	r3, #20
    1650:	435f      	muls	r7, r3
    1652:	f06f 0315 	mvn.w	r3, #21
    1656:	f849 3007 	str.w	r3, [r9, r7]
}
    165a:	b003      	add	sp, #12
    165c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    1660:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
    1664:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    1666:	d0f8      	beq.n	165a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1668:	7813      	ldrb	r3, [r2, #0]
    166a:	42b3      	cmp	r3, r6
    166c:	ddf5      	ble.n	165a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    166e:	fb0b 9307 	mla	r3, fp, r7, r9
	MPU->RNR = index;
    1672:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
    1674:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
    1676:	68e8      	ldr	r0, [r5, #12]
    1678:	7b19      	ldrb	r1, [r3, #12]
    167a:	f360 0104 	bfi	r1, r0, #0, #5
    167e:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1680:	6929      	ldr	r1, [r5, #16]
    1682:	7b18      	ldrb	r0, [r3, #12]
    1684:	0849      	lsrs	r1, r1, #1
    1686:	f361 1047 	bfi	r0, r1, #5, #3
    168a:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    168c:	68eb      	ldr	r3, [r5, #12]
    168e:	f023 031f 	bic.w	r3, r3, #31
    1692:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    1694:	692b      	ldr	r3, [r5, #16]
    1696:	f023 031f 	bic.w	r3, r3, #31
    169a:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    169c:	3701      	adds	r7, #1
    169e:	3414      	adds	r4, #20
    16a0:	f108 080c 	add.w	r8, r8, #12
    16a4:	e7bc      	b.n	1620 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
    16a6:	bf00      	nop
    16a8:	20000544 	.word	0x20000544
    16ac:	e000ed90 	.word	0xe000ed90
    16b0:	2000068c 	.word	0x2000068c

000016b4 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    16b4:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
    16b6:	4b0c      	ldr	r3, [pc, #48]	; (16e8 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    16b8:	460e      	mov	r6, r1
    16ba:	781c      	ldrb	r4, [r3, #0]
    16bc:	4605      	mov	r5, r0
    16be:	4623      	mov	r3, r4
  mpu->RLAR = 0U;
    16c0:	2100      	movs	r1, #0
  mpu->RNR = rnr;
    16c2:	4a0a      	ldr	r2, [pc, #40]	; (16ec <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    16c4:	2b0f      	cmp	r3, #15
    16c6:	dd0b      	ble.n	16e0 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>
#if defined(CONFIG_MPU_GAP_FILLING)
	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
    16c8:	4909      	ldr	r1, [pc, #36]	; (16f0 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    16ca:	f851 0b04 	ldr.w	r0, [r1], #4
    16ce:	f7ff fea9 	bl	1424 <region_init>

	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */
	mpu_reg_index = mpu_configure_regions_and_partition(dynamic_regions,
    16d2:	4622      	mov	r2, r4
    16d4:	4631      	mov	r1, r6
    16d6:	4628      	mov	r0, r5
}
    16d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    16dc:	f7ff beba 	b.w	1454 <mpu_configure_regions_and_partition.constprop.1>
    16e0:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    16e2:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    16e4:	3301      	adds	r3, #1
    16e6:	e7ed      	b.n	16c4 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
    16e8:	2000068c 	.word	0x2000068c
    16ec:	e000ed90 	.word	0xe000ed90
    16f0:	20000544 	.word	0x20000544

000016f4 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
    16f4:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
    16f6:	4b0c      	ldr	r3, [pc, #48]	; (1728 <tz_nonsecure_state_setup+0x34>)
    16f8:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
    16fa:	6803      	ldr	r3, [r0, #0]
    16fc:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
    1700:	6843      	ldr	r3, [r0, #4]
    1702:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
    1706:	7b02      	ldrb	r2, [r0, #12]
    1708:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
    170c:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
    1710:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
    1714:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
    1716:	bf48      	it	mi
    1718:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
    171c:	b109      	cbz	r1, 1722 <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
    171e:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
    1722:	f383 8894 	msr	CONTROL_NS, r3
}
    1726:	4770      	bx	lr
    1728:	e002ed00 	.word	0xe002ed00

0000172c <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    172c:	4a08      	ldr	r2, [pc, #32]	; (1750 <tz_nbanked_exception_target_state_set+0x24>)
    172e:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
    1730:	b148      	cbz	r0, 1746 <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
    1732:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1736:	041b      	lsls	r3, r3, #16
    1738:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    173a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    173e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    1742:	60d3      	str	r3, [r2, #12]
}
    1744:	4770      	bx	lr
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1746:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
    1748:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    174c:	e7f5      	b.n	173a <tz_nbanked_exception_target_state_set+0xe>
    174e:	bf00      	nop
    1750:	e000ed00 	.word	0xe000ed00

00001754 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1754:	4a08      	ldr	r2, [pc, #32]	; (1778 <tz_nonsecure_exception_prio_config+0x24>)
    1756:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
    1758:	b140      	cbz	r0, 176c <tz_nonsecure_exception_prio_config+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    175a:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
    175c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    1760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    1768:	60d3      	str	r3, [r2, #12]
}
    176a:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
    176c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1770:	041b      	lsls	r3, r3, #16
    1772:	0c1b      	lsrs	r3, r3, #16
    1774:	e7f4      	b.n	1760 <tz_nonsecure_exception_prio_config+0xc>
    1776:	bf00      	nop
    1778:	e000ed00 	.word	0xe000ed00

0000177c <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    177c:	4a08      	ldr	r2, [pc, #32]	; (17a0 <tz_nonsecure_system_reset_req_block+0x24>)
    177e:	68d3      	ldr	r3, [r2, #12]
	if (block) {
    1780:	b140      	cbz	r0, 1794 <tz_nonsecure_system_reset_req_block+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1782:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
    1784:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    1788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    178c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
    1790:	60d3      	str	r3, [r2, #12]
}
    1792:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
    1794:	f023 0308 	bic.w	r3, r3, #8
    1798:	041b      	lsls	r3, r3, #16
    179a:	0c1b      	lsrs	r3, r3, #16
    179c:	e7f4      	b.n	1788 <tz_nonsecure_system_reset_req_block+0xc>
    179e:	bf00      	nop
    17a0:	e000ed00 	.word	0xe000ed00

000017a4 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
    17a4:	4a03      	ldr	r2, [pc, #12]	; (17b4 <tz_nonsecure_fpu_access_enable+0x10>)
    17a6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    17aa:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    17ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
    17b2:	4770      	bx	lr
    17b4:	e000ed00 	.word	0xe000ed00

000017b8 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
    17b8:	4b08      	ldr	r3, [pc, #32]	; (17dc <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
    17ba:	681a      	ldr	r2, [r3, #0]
    17bc:	b118      	cbz	r0, 17c6 <tz_sau_configure+0xe>
    17be:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    17c2:	601a      	str	r2, [r3, #0]
		}
	}
}
    17c4:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
    17c6:	f022 0201 	bic.w	r2, r2, #1
    17ca:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    17cc:	681a      	ldr	r2, [r3, #0]
		if (allns) {
    17ce:	b111      	cbz	r1, 17d6 <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    17d0:	f042 0202 	orr.w	r2, r2, #2
    17d4:	e7f5      	b.n	17c2 <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    17d6:	f022 0202 	bic.w	r2, r2, #2
    17da:	e7f2      	b.n	17c2 <tz_sau_configure+0xa>
    17dc:	e000edd0 	.word	0xe000edd0

000017e0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    17e0:	4b01      	ldr	r3, [pc, #4]	; (17e8 <__stdout_hook_install+0x8>)
    17e2:	6018      	str	r0, [r3, #0]
}
    17e4:	4770      	bx	lr
    17e6:	bf00      	nop
    17e8:	200013f8 	.word	0x200013f8

000017ec <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    17ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    17ee:	794b      	ldrb	r3, [r1, #5]
    17f0:	2b01      	cmp	r3, #1
    17f2:	d029      	beq.n	1848 <uarte_nrfx_configure+0x5c>
    17f4:	2b03      	cmp	r3, #3
    17f6:	d124      	bne.n	1842 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    17f8:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    17fa:	798b      	ldrb	r3, [r1, #6]
    17fc:	2b03      	cmp	r3, #3
    17fe:	d120      	bne.n	1842 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    1800:	79cc      	ldrb	r4, [r1, #7]
    1802:	b12c      	cbz	r4, 1810 <uarte_nrfx_configure+0x24>
    1804:	2c01      	cmp	r4, #1
    1806:	d11c      	bne.n	1842 <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
    1808:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    180a:	689b      	ldr	r3, [r3, #8]
    180c:	791b      	ldrb	r3, [r3, #4]
    180e:	b1c3      	cbz	r3, 1842 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    1810:	790a      	ldrb	r2, [r1, #4]
    1812:	b112      	cbz	r2, 181a <uarte_nrfx_configure+0x2e>
    1814:	2a02      	cmp	r2, #2
    1816:	d114      	bne.n	1842 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    1818:	220e      	movs	r2, #14
	switch (baudrate) {
    181a:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
    181e:	6805      	ldr	r5, [r0, #0]
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    1820:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    1822:	68ad      	ldr	r5, [r5, #8]
	switch (baudrate) {
    1824:	42bb      	cmp	r3, r7
	return config->uarte_regs;
    1826:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    1828:	d062      	beq.n	18f0 <uarte_nrfx_configure+0x104>
    182a:	d829      	bhi.n	1880 <uarte_nrfx_configure+0x94>
    182c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    1830:	d061      	beq.n	18f6 <uarte_nrfx_configure+0x10a>
    1832:	d814      	bhi.n	185e <uarte_nrfx_configure+0x72>
    1834:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1838:	d05f      	beq.n	18fa <uarte_nrfx_configure+0x10e>
    183a:	d807      	bhi.n	184c <uarte_nrfx_configure+0x60>
    183c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    1840:	d05e      	beq.n	1900 <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
    1842:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1846:	e052      	b.n	18ee <uarte_nrfx_configure+0x102>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    1848:	2600      	movs	r6, #0
    184a:	e7d6      	b.n	17fa <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    184c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    1850:	d059      	beq.n	1906 <uarte_nrfx_configure+0x11a>
    1852:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    1856:	d1f4      	bne.n	1842 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    1858:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    185c:	e03c      	b.n	18d8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    185e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    1862:	d053      	beq.n	190c <uarte_nrfx_configure+0x120>
    1864:	d804      	bhi.n	1870 <uarte_nrfx_configure+0x84>
    1866:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    186a:	d1ea      	bne.n	1842 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    186c:	4b32      	ldr	r3, [pc, #200]	; (1938 <uarte_nrfx_configure+0x14c>)
    186e:	e033      	b.n	18d8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    1870:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    1874:	d04c      	beq.n	1910 <uarte_nrfx_configure+0x124>
    1876:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    187a:	d1e2      	bne.n	1842 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    187c:	4b2f      	ldr	r3, [pc, #188]	; (193c <uarte_nrfx_configure+0x150>)
    187e:	e02b      	b.n	18d8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    1880:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    1884:	d046      	beq.n	1914 <uarte_nrfx_configure+0x128>
    1886:	d812      	bhi.n	18ae <uarte_nrfx_configure+0xc2>
    1888:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    188c:	42bb      	cmp	r3, r7
    188e:	d044      	beq.n	191a <uarte_nrfx_configure+0x12e>
    1890:	d805      	bhi.n	189e <uarte_nrfx_configure+0xb2>
    1892:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    1896:	d1d4      	bne.n	1842 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    1898:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    189c:	e01c      	b.n	18d8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    189e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    18a2:	d03d      	beq.n	1920 <uarte_nrfx_configure+0x134>
    18a4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    18a8:	d1cb      	bne.n	1842 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    18aa:	4b25      	ldr	r3, [pc, #148]	; (1940 <uarte_nrfx_configure+0x154>)
    18ac:	e014      	b.n	18d8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    18ae:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    18b2:	d038      	beq.n	1926 <uarte_nrfx_configure+0x13a>
    18b4:	d808      	bhi.n	18c8 <uarte_nrfx_configure+0xdc>
    18b6:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    18ba:	d037      	beq.n	192c <uarte_nrfx_configure+0x140>
    18bc:	4f21      	ldr	r7, [pc, #132]	; (1944 <uarte_nrfx_configure+0x158>)
    18be:	42bb      	cmp	r3, r7
    18c0:	d1bf      	bne.n	1842 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    18c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    18c6:	e007      	b.n	18d8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    18c8:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    18cc:	d031      	beq.n	1932 <uarte_nrfx_configure+0x146>
    18ce:	4f1e      	ldr	r7, [pc, #120]	; (1948 <uarte_nrfx_configure+0x15c>)
    18d0:	42bb      	cmp	r3, r7
    18d2:	d1b6      	bne.n	1842 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    18d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    18d8:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
    18dc:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    18de:	6883      	ldr	r3, [r0, #8]
    18e0:	4322      	orrs	r2, r4
    18e2:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    18e4:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    18e8:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    18ec:	2000      	movs	r0, #0
}
    18ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    18f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    18f4:	e7f0      	b.n	18d8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    18f6:	4b15      	ldr	r3, [pc, #84]	; (194c <uarte_nrfx_configure+0x160>)
    18f8:	e7ee      	b.n	18d8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00027000;
    18fa:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    18fe:	e7eb      	b.n	18d8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
    1900:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    1904:	e7e8      	b.n	18d8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    1906:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    190a:	e7e5      	b.n	18d8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    190c:	4b10      	ldr	r3, [pc, #64]	; (1950 <uarte_nrfx_configure+0x164>)
    190e:	e7e3      	b.n	18d8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    1910:	4b10      	ldr	r3, [pc, #64]	; (1954 <uarte_nrfx_configure+0x168>)
    1912:	e7e1      	b.n	18d8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    1914:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    1918:	e7de      	b.n	18d8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    191a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    191e:	e7db      	b.n	18d8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    1920:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    1924:	e7d8      	b.n	18d8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    1926:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    192a:	e7d5      	b.n	18d8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    192c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    1930:	e7d2      	b.n	18d8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    1932:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    1936:	e7cf      	b.n	18d8 <uarte_nrfx_configure+0xec>
    1938:	00275000 	.word	0x00275000
    193c:	0075c000 	.word	0x0075c000
    1940:	013a9000 	.word	0x013a9000
    1944:	0003d090 	.word	0x0003d090
    1948:	000f4240 	.word	0x000f4240
    194c:	0013b000 	.word	0x0013b000
    1950:	003af000 	.word	0x003af000
    1954:	004ea000 	.word	0x004ea000

00001958 <uarte_0_init>:
	return dev->config->config_info;
    1958:	6802      	ldr	r2, [r0, #0]
	#if defined(DT_NORDIC_NRF_UARTE_UART_0_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_0_CTS_PIN)
		#define UARTE_0_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(0);
    195a:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
    195c:	6892      	ldr	r2, [r2, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    195e:	4b18      	ldr	r3, [pc, #96]	; (19c0 <uarte_0_init+0x68>)
    1960:	6814      	ldr	r4, [r2, #0]
    1962:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	struct uarte_nrfx_data *data = get_dev_data(dev);
    1966:	6885      	ldr	r5, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1968:	2103      	movs	r1, #3
    p_reg->OUTSET = set_mask;
    196a:	609a      	str	r2, [r3, #8]
    p_reg->PSEL.TXD = pseltxd;
    196c:	261d      	movs	r6, #29
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    196e:	2200      	movs	r2, #0
    1970:	f8c3 1274 	str.w	r1, [r3, #628]	; 0x274
    1974:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    1978:	f8c4 650c 	str.w	r6, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    197c:	261c      	movs	r6, #28
    197e:	f8c4 6514 	str.w	r6, [r4, #1300]	; 0x514
    p_reg->OUTSET = set_mask;
    1982:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
    1986:	609e      	str	r6, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1988:	f8c3 126c 	str.w	r1, [r3, #620]	; 0x26c
    198c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    p_reg->PSEL.RTS = pselrts;
    1990:	231b      	movs	r3, #27
    1992:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    1996:	231a      	movs	r3, #26
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    1998:	4629      	mov	r1, r5
    199a:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    199e:	f7ff ff25 	bl	17ec <uarte_nrfx_configure>
	if (err) {
    19a2:	b958      	cbnz	r0, 19bc <uarte_0_init+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    19a4:	2308      	movs	r3, #8
    19a6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    19aa:	441d      	add	r5, r3
NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
    19ac:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    19ae:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    19b2:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    19b6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    19ba:	6023      	str	r3, [r4, #0]
	UART_NRF_UARTE_DEVICE(0);
    19bc:	bd70      	pop	{r4, r5, r6, pc}
    19be:	bf00      	nop
    19c0:	50842500 	.word	0x50842500

000019c4 <ext_api_getter>:
extern const struct fw_info_ext_api * const _ext_apis_start[];
extern const u32_t _ext_apis_size;
__noinit fw_info_ext_api_getter ext_api_getter_in;

int ext_api_getter(u32_t id, u32_t index, const struct fw_info_ext_api **out)
{
    19c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!out) {
    19c6:	b1da      	cbz	r2, 1a00 <ext_api_getter+0x3c>
		return -EFAULT;
	}

	bool id_found = false;

	for (u32_t i = 0; i < (u32_t)&_ext_apis_size; i++) {
    19c8:	2300      	movs	r3, #0
	bool id_found = false;
    19ca:	461c      	mov	r4, r3
    19cc:	4d0e      	ldr	r5, [pc, #56]	; (1a08 <ext_api_getter+0x44>)
	for (u32_t i = 0; i < (u32_t)&_ext_apis_size; i++) {
    19ce:	4f0f      	ldr	r7, [pc, #60]	; (1a0c <ext_api_getter+0x48>)
    19d0:	42bb      	cmp	r3, r7
    19d2:	d306      	bcc.n	19e2 <ext_api_getter+0x1e>
				*out = ext_api;
				return 0;
			}
		}
	}
	return id_found ? -EBADF : -ENOENT;
    19d4:	2c00      	cmp	r4, #0
    19d6:	bf14      	ite	ne
    19d8:	f06f 0008 	mvnne.w	r0, #8
    19dc:	f06f 0001 	mvneq.w	r0, #1
    19e0:	e009      	b.n	19f6 <ext_api_getter+0x32>
		const struct fw_info_ext_api *ext_api = _ext_apis_start[i];
    19e2:	f855 6b04 	ldr.w	r6, [r5], #4
		if (ext_api->ext_api_id == id) {
    19e6:	f8d6 c00c 	ldr.w	ip, [r6, #12]
    19ea:	4560      	cmp	r0, ip
    19ec:	d106      	bne.n	19fc <ext_api_getter+0x38>
			if (index-- == 0) {
    19ee:	1e4c      	subs	r4, r1, #1
    19f0:	b911      	cbnz	r1, 19f8 <ext_api_getter+0x34>
				return 0;
    19f2:	4608      	mov	r0, r1
				*out = ext_api;
    19f4:	6016      	str	r6, [r2, #0]
}
    19f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (index-- == 0) {
    19f8:	4621      	mov	r1, r4
			id_found = true;
    19fa:	2401      	movs	r4, #1
	for (u32_t i = 0; i < (u32_t)&_ext_apis_size; i++) {
    19fc:	3301      	adds	r3, #1
    19fe:	e7e7      	b.n	19d0 <ext_api_getter+0xc>
		return -EFAULT;
    1a00:	f06f 000d 	mvn.w	r0, #13
    1a04:	e7f7      	b.n	19f6 <ext_api_getter+0x32>
    1a06:	bf00      	nop
    1a08:	000049a0 	.word	0x000049a0
    1a0c:	00000000 	.word	0x00000000

00001a10 <errata_14>:
}

static bool errata_14(void)
{
    uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    1a10:	4b05      	ldr	r3, [pc, #20]	; (1a28 <errata_14+0x18>)
    1a12:	6818      	ldr	r0, [r3, #0]
    uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1a14:	3b04      	subs	r3, #4

    switch(var1)
    1a16:	681b      	ldr	r3, [r3, #0]
    1a18:	2b09      	cmp	r3, #9
    1a1a:	d103      	bne.n	1a24 <errata_14+0x14>
    {
        case 0x09:
            switch(var2)
    1a1c:	1e43      	subs	r3, r0, #1
    1a1e:	4258      	negs	r0, r3
    1a20:	4158      	adcs	r0, r3
    1a22:	4770      	bx	lr
            }
        break;

    }

    return false;
    1a24:	2000      	movs	r0, #0
}
    1a26:	4770      	bx	lr
    1a28:	00ff0134 	.word	0x00ff0134

00001a2c <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    1a2c:	4a4f      	ldr	r2, [pc, #316]	; (1b6c <SystemInit+0x140>)
{
    1a2e:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    1a30:	6813      	ldr	r3, [r2, #0]
    1a32:	f043 0302 	orr.w	r3, r3, #2
    1a36:	6013      	str	r3, [r2, #0]
    uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1a38:	4b4d      	ldr	r3, [pc, #308]	; (1b70 <SystemInit+0x144>)
    switch(var1)
    1a3a:	681b      	ldr	r3, [r3, #0]
    1a3c:	2b09      	cmp	r3, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    1a3e:	bf01      	itttt	eq
    1a40:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    1a44:	2200      	moveq	r2, #0
    1a46:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    1a4a:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (errata_14()){
    1a4e:	f7ff ffdf 	bl	1a10 <errata_14>
    1a52:	b130      	cbz	r0, 1a62 <SystemInit+0x36>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    1a54:	2301      	movs	r3, #1
    1a56:	4a47      	ldr	r2, [pc, #284]	; (1b74 <SystemInit+0x148>)
    1a58:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    1a5a:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    1a5e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578

static bool errata_15(void)
{
    uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1a62:	4b43      	ldr	r3, [pc, #268]	; (1b70 <SystemInit+0x144>)
    uint32_t var2 = *(uint32_t *)0x00FF0134ul;

    switch(var1)
    1a64:	681b      	ldr	r3, [r3, #0]
    1a66:	2b09      	cmp	r3, #9
    1a68:	d107      	bne.n	1a7a <SystemInit+0x4e>
    uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    1a6a:	4b43      	ldr	r3, [pc, #268]	; (1b78 <SystemInit+0x14c>)
    {
        case 0x09:
            switch(var2)
    1a6c:	681b      	ldr	r3, [r3, #0]
    1a6e:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    1a70:	bf1e      	ittt	ne
    1a72:	2201      	movne	r2, #1
    1a74:	4b41      	ldrne	r3, [pc, #260]	; (1b7c <SystemInit+0x150>)
    1a76:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (errata_20()){
    1a7a:	f7ff ffc9 	bl	1a10 <errata_14>
    1a7e:	b110      	cbz	r0, 1a86 <SystemInit+0x5a>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    1a80:	220e      	movs	r2, #14
    1a82:	4b3f      	ldr	r3, [pc, #252]	; (1b80 <SystemInit+0x154>)
    1a84:	601a      	str	r2, [r3, #0]
    uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1a86:	4b3a      	ldr	r3, [pc, #232]	; (1b70 <SystemInit+0x144>)
    switch(var1)
    1a88:	681b      	ldr	r3, [r3, #0]
    1a8a:	2b09      	cmp	r3, #9
    1a8c:	d104      	bne.n	1a98 <SystemInit+0x6c>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    1a8e:	2200      	movs	r2, #0
    1a90:	4b3c      	ldr	r3, [pc, #240]	; (1b84 <SystemInit+0x158>)
    1a92:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    1a94:	2201      	movs	r2, #1
    1a96:	605a      	str	r2, [r3, #4]
{
    1a98:	2200      	movs	r2, #0
    1a9a:	00d3      	lsls	r3, r2, #3
    1a9c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1aa0:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    1aa4:	3101      	adds	r1, #1
    1aa6:	d008      	beq.n	1aba <SystemInit+0x8e>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1aa8:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1aac:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1aae:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1ab2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1ab6:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1ab8:	d1ef      	bne.n	1a9a <SystemInit+0x6e>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    1aba:	4b33      	ldr	r3, [pc, #204]	; (1b88 <SystemInit+0x15c>)
    1abc:	69da      	ldr	r2, [r3, #28]
    1abe:	07d1      	lsls	r1, r2, #31
    1ac0:	d53b      	bpl.n	1b3a <SystemInit+0x10e>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1ac2:	4b32      	ldr	r3, [pc, #200]	; (1b8c <SystemInit+0x160>)
    1ac4:	4619      	mov	r1, r3
    1ac6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1aca:	2a01      	cmp	r2, #1
    1acc:	d1fb      	bne.n	1ac6 <SystemInit+0x9a>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    1ace:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1ad2:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    1ad6:	2b01      	cmp	r3, #1
    1ad8:	d1fb      	bne.n	1ad2 <SystemInit+0xa6>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    1ada:	4b2b      	ldr	r3, [pc, #172]	; (1b88 <SystemInit+0x15c>)
    1adc:	69da      	ldr	r2, [r3, #28]
    1ade:	07d2      	lsls	r2, r2, #31
    1ae0:	d508      	bpl.n	1af4 <SystemInit+0xc8>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
    1ae2:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1ae4:	4929      	ldr	r1, [pc, #164]	; (1b8c <SystemInit+0x160>)
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    1ae6:	f022 0201 	bic.w	r2, r2, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
    1aea:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1aec:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
    1af0:	2a01      	cmp	r2, #1
    1af2:	d1fb      	bne.n	1aec <SystemInit+0xc0>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    1af4:	6a1a      	ldr	r2, [r3, #32]
    1af6:	3201      	adds	r2, #1
    1af8:	d10a      	bne.n	1b10 <SystemInit+0xe4>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
    1afa:	6a1a      	ldr	r2, [r3, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    1afc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    1b00:	f042 0220 	orr.w	r2, r2, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
    1b04:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1b06:	4a21      	ldr	r2, [pc, #132]	; (1b8c <SystemInit+0x160>)
    1b08:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    1b0c:	2b01      	cmp	r3, #1
    1b0e:	d1fb      	bne.n	1b08 <SystemInit+0xdc>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    1b10:	2200      	movs	r2, #0
    1b12:	4b1e      	ldr	r3, [pc, #120]	; (1b8c <SystemInit+0x160>)
    1b14:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1b18:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1b1c:	2a01      	cmp	r2, #1
    1b1e:	d1fb      	bne.n	1b18 <SystemInit+0xec>
  __ASM volatile ("dsb 0xF":::"memory");
    1b20:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1b24:	491a      	ldr	r1, [pc, #104]	; (1b90 <SystemInit+0x164>)
    1b26:	4b1b      	ldr	r3, [pc, #108]	; (1b94 <SystemInit+0x168>)
    1b28:	68ca      	ldr	r2, [r1, #12]
    1b2a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1b2e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1b30:	60cb      	str	r3, [r1, #12]
    1b32:	f3bf 8f4f 	dsb	sy
    __NOP();
    1b36:	bf00      	nop
    1b38:	e7fd      	b.n	1b36 <SystemInit+0x10a>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    1b3a:	6a1b      	ldr	r3, [r3, #32]
    1b3c:	3301      	adds	r3, #1
    1b3e:	d0c0      	beq.n	1ac2 <SystemInit+0x96>
        SCB->NSACR |= (3UL << 10);
    1b40:	4b13      	ldr	r3, [pc, #76]	; (1b90 <SystemInit+0x164>)
    1b42:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    1b46:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
    1b4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
    1b4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1b52:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    1b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1b5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b5e:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
    1b62:	4b0d      	ldr	r3, [pc, #52]	; (1b98 <SystemInit+0x16c>)
    1b64:	4a0d      	ldr	r2, [pc, #52]	; (1b9c <SystemInit+0x170>)
    1b66:	601a      	str	r2, [r3, #0]
}
    1b68:	bd08      	pop	{r3, pc}
    1b6a:	bf00      	nop
    1b6c:	e000edd0 	.word	0xe000edd0
    1b70:	00ff0130 	.word	0x00ff0130
    1b74:	50004a38 	.word	0x50004a38
    1b78:	00ff0134 	.word	0x00ff0134
    1b7c:	50004000 	.word	0x50004000
    1b80:	5003aee4 	.word	0x5003aee4
    1b84:	5000470c 	.word	0x5000470c
    1b88:	00ff8000 	.word	0x00ff8000
    1b8c:	50039000 	.word	0x50039000
    1b90:	e000ed00 	.word	0xe000ed00
    1b94:	05fa0004 	.word	0x05fa0004
    1b98:	20001408 	.word	0x20001408
    1b9c:	03d09000 	.word	0x03d09000

00001ba0 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
    1ba0:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    1ba2:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    1ba4:	4b08      	ldr	r3, [pc, #32]	; (1bc8 <z_sys_device_do_config_level+0x28>)
    1ba6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    1baa:	3001      	adds	r0, #1
    1bac:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    1bb0:	42a5      	cmp	r5, r4
    1bb2:	d800      	bhi.n	1bb6 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
    1bb4:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
    1bb6:	6823      	ldr	r3, [r4, #0]
    1bb8:	4620      	mov	r0, r4
    1bba:	685b      	ldr	r3, [r3, #4]
    1bbc:	4798      	blx	r3
		if (retval != 0) {
    1bbe:	b100      	cbz	r0, 1bc2 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
    1bc0:	6066      	str	r6, [r4, #4]
								info++) {
    1bc2:	340c      	adds	r4, #12
    1bc4:	e7f4      	b.n	1bb0 <z_sys_device_do_config_level+0x10>
    1bc6:	bf00      	nop
    1bc8:	00004518 	.word	0x00004518

00001bcc <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    1bcc:	4b10      	ldr	r3, [pc, #64]	; (1c10 <z_impl_device_get_binding+0x44>)
{
    1bce:	b570      	push	{r4, r5, r6, lr}
    1bd0:	4605      	mov	r5, r0
    1bd2:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    1bd4:	4c0f      	ldr	r4, [pc, #60]	; (1c14 <z_impl_device_get_binding+0x48>)
    1bd6:	429c      	cmp	r4, r3
    1bd8:	d104      	bne.n	1be4 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    1bda:	4c0e      	ldr	r4, [pc, #56]	; (1c14 <z_impl_device_get_binding+0x48>)
    1bdc:	42b4      	cmp	r4, r6
    1bde:	d109      	bne.n	1bf4 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    1be0:	2400      	movs	r4, #0
    1be2:	e012      	b.n	1c0a <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    1be4:	6862      	ldr	r2, [r4, #4]
    1be6:	b11a      	cbz	r2, 1bf0 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
    1be8:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    1bea:	6812      	ldr	r2, [r2, #0]
    1bec:	42aa      	cmp	r2, r5
    1bee:	d00c      	beq.n	1c0a <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    1bf0:	340c      	adds	r4, #12
    1bf2:	e7f0      	b.n	1bd6 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
    1bf4:	6863      	ldr	r3, [r4, #4]
    1bf6:	b90b      	cbnz	r3, 1bfc <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    1bf8:	340c      	adds	r4, #12
    1bfa:	e7ef      	b.n	1bdc <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    1bfc:	6823      	ldr	r3, [r4, #0]
    1bfe:	4628      	mov	r0, r5
    1c00:	6819      	ldr	r1, [r3, #0]
    1c02:	f001 fff2 	bl	3bea <strcmp>
    1c06:	2800      	cmp	r0, #0
    1c08:	d1f6      	bne.n	1bf8 <z_impl_device_get_binding+0x2c>
}
    1c0a:	4620      	mov	r0, r4
    1c0c:	bd70      	pop	{r4, r5, r6, pc}
    1c0e:	bf00      	nop
    1c10:	200014cc 	.word	0x200014cc
    1c14:	20001454 	.word	0x20001454

00001c18 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    1c18:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    1c1a:	4d0b      	ldr	r5, [pc, #44]	; (1c48 <idle+0x30>)
    1c1c:	f04f 0220 	mov.w	r2, #32
    1c20:	f3ef 8311 	mrs	r3, BASEPRI
    1c24:	f382 8811 	msr	BASEPRI, r2
    1c28:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    1c2c:	f002 f9c3 	bl	3fb6 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    1c30:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
    1c32:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    1c34:	2802      	cmp	r0, #2
    1c36:	bfd8      	it	le
    1c38:	4608      	movle	r0, r1
    1c3a:	f002 f9cc 	bl	3fd6 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    1c3e:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1c40:	f7ff fa0e 	bl	1060 <arch_cpu_idle>
    1c44:	e7ea      	b.n	1c1c <idle+0x4>
    1c46:	bf00      	nop
    1c48:	20000630 	.word	0x20000630

00001c4c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    1c4c:	4802      	ldr	r0, [pc, #8]	; (1c58 <z_bss_zero+0xc>)
    1c4e:	4a03      	ldr	r2, [pc, #12]	; (1c5c <z_bss_zero+0x10>)
    1c50:	2100      	movs	r1, #0
    1c52:	1a12      	subs	r2, r2, r0
    1c54:	f002 b826 	b.w	3ca4 <memset>
    1c58:	20000000 	.word	0x20000000
    1c5c:	20000690 	.word	0x20000690

00001c60 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    1c60:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    1c62:	4806      	ldr	r0, [pc, #24]	; (1c7c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    1c64:	4a06      	ldr	r2, [pc, #24]	; (1c80 <z_data_copy+0x20>)
    1c66:	4907      	ldr	r1, [pc, #28]	; (1c84 <z_data_copy+0x24>)
    1c68:	1a12      	subs	r2, r2, r0
    1c6a:	f001 fff1 	bl	3c50 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    1c6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    1c72:	4a05      	ldr	r2, [pc, #20]	; (1c88 <z_data_copy+0x28>)
    1c74:	4905      	ldr	r1, [pc, #20]	; (1c8c <z_data_copy+0x2c>)
    1c76:	4806      	ldr	r0, [pc, #24]	; (1c90 <z_data_copy+0x30>)
    1c78:	f001 bfea 	b.w	3c50 <memcpy>
    1c7c:	200013d4 	.word	0x200013d4
    1c80:	20001530 	.word	0x20001530
    1c84:	000049a0 	.word	0x000049a0
    1c88:	00000000 	.word	0x00000000
    1c8c:	000049a0 	.word	0x000049a0
    1c90:	20000000 	.word	0x20000000

00001c94 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    1c94:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    1c96:	2002      	movs	r0, #2
    1c98:	f7ff ff82 	bl	1ba0 <z_sys_device_do_config_level>
#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
			STRINGIFY(BUILD_VERSION), BOOT_DELAY_BANNER);
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
    1c9c:	4a08      	ldr	r2, [pc, #32]	; (1cc0 <bg_thread_main+0x2c>)
    1c9e:	4909      	ldr	r1, [pc, #36]	; (1cc4 <bg_thread_main+0x30>)
    1ca0:	4809      	ldr	r0, [pc, #36]	; (1cc8 <bg_thread_main+0x34>)
    1ca2:	f001 fe16 	bl	38d2 <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    1ca6:	2003      	movs	r0, #3
    1ca8:	f7ff ff7a 	bl	1ba0 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
    1cac:	f000 fc22 	bl	24f4 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    1cb0:	f001 fc38 	bl	3524 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    1cb4:	4a05      	ldr	r2, [pc, #20]	; (1ccc <bg_thread_main+0x38>)
    1cb6:	7b13      	ldrb	r3, [r2, #12]
    1cb8:	f023 0301 	bic.w	r3, r3, #1
    1cbc:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    1cbe:	bd08      	pop	{r3, pc}
    1cc0:	0000465c 	.word	0x0000465c
    1cc4:	00004967 	.word	0x00004967
    1cc8:	0000496d 	.word	0x0000496d
    1ccc:	200005c4 	.word	0x200005c4

00001cd0 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    1cd0:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
    1cd2:	4b37      	ldr	r3, [pc, #220]	; (1db0 <z_cstart+0xe0>)
    1cd4:	b0a2      	sub	sp, #136	; 0x88
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    1cd6:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1cda:	2500      	movs	r5, #0
    1cdc:	23e0      	movs	r3, #224	; 0xe0
    1cde:	4c35      	ldr	r4, [pc, #212]	; (1db4 <z_cstart+0xe4>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
    1ce0:	2701      	movs	r7, #1
    1ce2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    1ce6:	77e5      	strb	r5, [r4, #31]
    1ce8:	7625      	strb	r5, [r4, #24]
    1cea:	7665      	strb	r5, [r4, #25]
    1cec:	76a5      	strb	r5, [r4, #26]
    1cee:	76e5      	strb	r5, [r4, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    1cf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    1cf2:	4e31      	ldr	r6, [pc, #196]	; (1db8 <z_cstart+0xe8>)
    1cf4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    1cf8:	6263      	str	r3, [r4, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
    1cfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1cfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    1d00:	6263      	str	r3, [r4, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
    1d02:	63a5      	str	r5, [r4, #56]	; 0x38

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    1d04:	f7ff fb18 	bl	1338 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    1d08:	f7ff f9a4 	bl	1054 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    1d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1d10:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    1d12:	62e3      	str	r3, [r4, #44]	; 0x2c
	struct k_thread dummy_thread = {
    1d14:	ab07      	add	r3, sp, #28
    1d16:	226c      	movs	r2, #108	; 0x6c
    1d18:	4629      	mov	r1, r5
    1d1a:	4618      	mov	r0, r3
    1d1c:	f001 ffc2 	bl	3ca4 <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
    1d20:	4c26      	ldr	r4, [pc, #152]	; (1dbc <z_cstart+0xec>)
	struct k_thread dummy_thread = {
    1d22:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	_current = &dummy_thread;
    1d26:	60a0      	str	r0, [r4, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    1d28:	4628      	mov	r0, r5
    1d2a:	f7ff ff39 	bl	1ba0 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    1d2e:	4638      	mov	r0, r7
    1d30:	f7ff ff36 	bl	1ba0 <z_sys_device_do_config_level>
	z_sched_init();
    1d34:	f000 fb90 	bl	2458 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    1d38:	4b21      	ldr	r3, [pc, #132]	; (1dc0 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
    1d3a:	6266      	str	r6, [r4, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    1d3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1d40:	e9cd 7304 	strd	r7, r3, [sp, #16]
    1d44:	e9cd 5502 	strd	r5, r5, [sp, #8]
    1d48:	4b1e      	ldr	r3, [pc, #120]	; (1dc4 <z_cstart+0xf4>)
    1d4a:	e9cd 5500 	strd	r5, r5, [sp]
    1d4e:	491e      	ldr	r1, [pc, #120]	; (1dc8 <z_cstart+0xf8>)
    1d50:	4630      	mov	r0, r6
    1d52:	f000 fbb7 	bl	24c4 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1d56:	7b73      	ldrb	r3, [r6, #13]
    1d58:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    1d5c:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1d60:	7372      	strb	r2, [r6, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    1d62:	d104      	bne.n	1d6e <z_cstart+0x9e>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
    1d64:	69b3      	ldr	r3, [r6, #24]
    1d66:	b913      	cbnz	r3, 1d6e <z_cstart+0x9e>
		z_add_thread_to_ready_q(thread);
    1d68:	4630      	mov	r0, r6
    1d6a:	f000 fa07 	bl	217c <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
    1d6e:	4b17      	ldr	r3, [pc, #92]	; (1dcc <z_cstart+0xfc>)
    1d70:	2201      	movs	r2, #1
    1d72:	9305      	str	r3, [sp, #20]
    1d74:	230f      	movs	r3, #15
    1d76:	e9cd 3203 	strd	r3, r2, [sp, #12]
    1d7a:	2300      	movs	r3, #0
    1d7c:	4d14      	ldr	r5, [pc, #80]	; (1dd0 <z_cstart+0x100>)
    1d7e:	e9cd 3301 	strd	r3, r3, [sp, #4]
    1d82:	9300      	str	r3, [sp, #0]
    1d84:	f44f 72a0 	mov.w	r2, #320	; 0x140
    1d88:	4b12      	ldr	r3, [pc, #72]	; (1dd4 <z_cstart+0x104>)
    1d8a:	4913      	ldr	r1, [pc, #76]	; (1dd8 <z_cstart+0x108>)
    1d8c:	4628      	mov	r0, r5
    1d8e:	f000 fb99 	bl	24c4 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1d92:	7b6b      	ldrb	r3, [r5, #13]
	_kernel.cpus[0].idle_thread = &z_idle_thread;
    1d94:	60e5      	str	r5, [r4, #12]
    1d96:	f023 0304 	bic.w	r3, r3, #4
    1d9a:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    1d9c:	4b0f      	ldr	r3, [pc, #60]	; (1ddc <z_cstart+0x10c>)
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    1d9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
	list->tail = (sys_dnode_t *)list;
    1da2:	e9c4 3306 	strd	r3, r3, [r4, #24]
    1da6:	4908      	ldr	r1, [pc, #32]	; (1dc8 <z_cstart+0xf8>)
    1da8:	4b06      	ldr	r3, [pc, #24]	; (1dc4 <z_cstart+0xf4>)
    1daa:	4803      	ldr	r0, [pc, #12]	; (1db8 <z_cstart+0xe8>)
    1dac:	f7ff f930 	bl	1010 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    1db0:	200013d0 	.word	0x200013d0
    1db4:	e000ed00 	.word	0xe000ed00
    1db8:	200005c4 	.word	0x200005c4
    1dbc:	20000630 	.word	0x20000630
    1dc0:	00004996 	.word	0x00004996
    1dc4:	00001c95 	.word	0x00001c95
    1dc8:	20000690 	.word	0x20000690
    1dcc:	0000499b 	.word	0x0000499b
    1dd0:	20000558 	.word	0x20000558
    1dd4:	00001c19 	.word	0x00001c19
    1dd8:	20000a90 	.word	0x20000a90
    1ddc:	20000648 	.word	0x20000648

00001de0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
    1de0:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
    1de2:	2400      	movs	r4, #0
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    1de4:	4b0a      	ldr	r3, [pc, #40]	; (1e10 <init_mem_slab_module+0x30>)
    1de6:	480b      	ldr	r0, [pc, #44]	; (1e14 <init_mem_slab_module+0x34>)
    1de8:	4283      	cmp	r3, r0
    1dea:	d301      	bcc.n	1df0 <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
    1dec:	2000      	movs	r0, #0
    1dee:	bd70      	pop	{r4, r5, r6, pc}
	for (j = 0U; j < slab->num_blocks; j++) {
    1df0:	2100      	movs	r1, #0
	p = slab->buffer;
    1df2:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
    1df4:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    1df6:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    1df8:	42a9      	cmp	r1, r5
    1dfa:	d101      	bne.n	1e00 <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    1dfc:	331c      	adds	r3, #28
    1dfe:	e7f3      	b.n	1de8 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    1e00:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    1e02:	3101      	adds	r1, #1
		*(char **)p = slab->free_list;
    1e04:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
    1e06:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
    1e08:	615a      	str	r2, [r3, #20]
		p += slab->block_size;
    1e0a:	4432      	add	r2, r6
    1e0c:	e7f4      	b.n	1df8 <init_mem_slab_module+0x18>
    1e0e:	bf00      	nop
    1e10:	200014cc 	.word	0x200014cc
    1e14:	200014cc 	.word	0x200014cc

00001e18 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
    1e18:	b510      	push	{r4, lr}
    1e1a:	4613      	mov	r3, r2
    1e1c:	460c      	mov	r4, r1
    1e1e:	f04f 0220 	mov.w	r2, #32
    1e22:	f3ef 8111 	mrs	r1, BASEPRI
    1e26:	f382 8811 	msr	BASEPRI, r2
    1e2a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    1e2e:	6942      	ldr	r2, [r0, #20]
    1e30:	b15a      	cbz	r2, 1e4a <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
    1e32:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    1e34:	6813      	ldr	r3, [r2, #0]
    1e36:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    1e38:	6983      	ldr	r3, [r0, #24]
    1e3a:	3301      	adds	r3, #1
    1e3c:	6183      	str	r3, [r0, #24]
		result = 0;
    1e3e:	2000      	movs	r0, #0
	__asm__ volatile(
    1e40:	f381 8811 	msr	BASEPRI, r1
    1e44:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    1e48:	e00d      	b.n	1e66 <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
    1e4a:	b91b      	cbnz	r3, 1e54 <k_mem_slab_alloc+0x3c>
		*mem = NULL;
    1e4c:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    1e4e:	f06f 000b 	mvn.w	r0, #11
    1e52:	e7f5      	b.n	1e40 <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    1e54:	4602      	mov	r2, r0
    1e56:	4804      	ldr	r0, [pc, #16]	; (1e68 <k_mem_slab_alloc+0x50>)
    1e58:	f000 faa8 	bl	23ac <z_pend_curr>
		if (result == 0) {
    1e5c:	b918      	cbnz	r0, 1e66 <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
    1e5e:	4b03      	ldr	r3, [pc, #12]	; (1e6c <k_mem_slab_alloc+0x54>)
    1e60:	689b      	ldr	r3, [r3, #8]
    1e62:	695b      	ldr	r3, [r3, #20]
    1e64:	6023      	str	r3, [r4, #0]
}
    1e66:	bd10      	pop	{r4, pc}
    1e68:	2000068d 	.word	0x2000068d
    1e6c:	20000630 	.word	0x20000630

00001e70 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    1e70:	b570      	push	{r4, r5, r6, lr}
    1e72:	4604      	mov	r4, r0
    1e74:	460d      	mov	r5, r1
	__asm__ volatile(
    1e76:	f04f 0320 	mov.w	r3, #32
    1e7a:	f3ef 8611 	mrs	r6, BASEPRI
    1e7e:	f383 8811 	msr	BASEPRI, r3
    1e82:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    1e86:	f002 f81c 	bl	3ec2 <z_unpend_first_thread>

	if (pending_thread != NULL) {
    1e8a:	b180      	cbz	r0, 1eae <k_mem_slab_free+0x3e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    1e8c:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    1e8e:	682a      	ldr	r2, [r5, #0]
    1e90:	6681      	str	r1, [r0, #104]	; 0x68
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    1e92:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    1e94:	7b42      	ldrb	r2, [r0, #13]
    1e96:	06d2      	lsls	r2, r2, #27
    1e98:	d103      	bne.n	1ea2 <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
    1e9a:	6983      	ldr	r3, [r0, #24]
    1e9c:	b90b      	cbnz	r3, 1ea2 <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
    1e9e:	f000 f96d 	bl	217c <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
    1ea2:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    1ea4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    1ea8:	4807      	ldr	r0, [pc, #28]	; (1ec8 <k_mem_slab_free+0x58>)
    1eaa:	f001 bfb2 	b.w	3e12 <z_reschedule>
		**(char ***)mem = slab->free_list;
    1eae:	682b      	ldr	r3, [r5, #0]
    1eb0:	6962      	ldr	r2, [r4, #20]
    1eb2:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    1eb4:	682b      	ldr	r3, [r5, #0]
    1eb6:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    1eb8:	69a3      	ldr	r3, [r4, #24]
    1eba:	3b01      	subs	r3, #1
    1ebc:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    1ebe:	f386 8811 	msr	BASEPRI, r6
    1ec2:	f3bf 8f6f 	isb	sy
}
    1ec6:	bd70      	pop	{r4, r5, r6, pc}
    1ec8:	2000068d 	.word	0x2000068d

00001ecc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
    1ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ece:	4604      	mov	r4, r0
    1ed0:	460f      	mov	r7, r1
	__asm__ volatile(
    1ed2:	f04f 0320 	mov.w	r3, #32
    1ed6:	f3ef 8511 	mrs	r5, BASEPRI
    1eda:	f383 8811 	msr	BASEPRI, r3
    1ede:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    1ee2:	68c2      	ldr	r2, [r0, #12]
    1ee4:	4930      	ldr	r1, [pc, #192]	; (1fa8 <z_impl_k_mutex_lock+0xdc>)
    1ee6:	b15a      	cbz	r2, 1f00 <z_impl_k_mutex_lock+0x34>
    1ee8:	6880      	ldr	r0, [r0, #8]
    1eea:	688e      	ldr	r6, [r1, #8]
    1eec:	42b0      	cmp	r0, r6
    1eee:	d015      	beq.n	1f1c <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
    1ef0:	b9b7      	cbnz	r7, 1f20 <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
    1ef2:	f385 8811 	msr	BASEPRI, r5
    1ef6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    1efa:	f06f 000f 	mvn.w	r0, #15
    1efe:	e00c      	b.n	1f1a <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
    1f00:	688b      	ldr	r3, [r1, #8]
    1f02:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    1f06:	6123      	str	r3, [r4, #16]
		mutex->owner = _current;
    1f08:	688b      	ldr	r3, [r1, #8]
		mutex->lock_count++;
    1f0a:	3201      	adds	r2, #1
    1f0c:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
    1f0e:	60a3      	str	r3, [r4, #8]
    1f10:	f385 8811 	msr	BASEPRI, r5
    1f14:	f3bf 8f6f 	isb	sy
		return 0;
    1f18:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    1f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
    1f1c:	6923      	ldr	r3, [r4, #16]
    1f1e:	e7f2      	b.n	1f06 <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    1f20:	f990 300e 	ldrsb.w	r3, [r0, #14]
    1f24:	f996 100e 	ldrsb.w	r1, [r6, #14]
    1f28:	4299      	cmp	r1, r3
    1f2a:	bfa8      	it	ge
    1f2c:	4619      	movge	r1, r3
    1f2e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    1f32:	4299      	cmp	r1, r3
    1f34:	da2b      	bge.n	1f8e <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
    1f36:	f000 fa4d 	bl	23d4 <z_set_prio>
    1f3a:	4606      	mov	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    1f3c:	463b      	mov	r3, r7
    1f3e:	4622      	mov	r2, r4
    1f40:	4629      	mov	r1, r5
    1f42:	481a      	ldr	r0, [pc, #104]	; (1fac <z_impl_k_mutex_lock+0xe0>)
    1f44:	f000 fa32 	bl	23ac <z_pend_curr>
	if (got_mutex == 0) {
    1f48:	2800      	cmp	r0, #0
    1f4a:	d0e6      	beq.n	1f1a <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
    1f4c:	f04f 0320 	mov.w	r3, #32
    1f50:	f3ef 8511 	mrs	r5, BASEPRI
    1f54:	f383 8811 	msr	BASEPRI, r3
    1f58:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    1f5c:	6823      	ldr	r3, [r4, #0]
    1f5e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1f60:	429c      	cmp	r4, r3
    1f62:	d007      	beq.n	1f74 <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
    1f64:	b133      	cbz	r3, 1f74 <z_impl_k_mutex_lock+0xa8>
    1f66:	f993 300e 	ldrsb.w	r3, [r3, #14]
    1f6a:	4299      	cmp	r1, r3
    1f6c:	bfa8      	it	ge
    1f6e:	4619      	movge	r1, r3
    1f70:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    1f74:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    1f76:	f990 300e 	ldrsb.w	r3, [r0, #14]
    1f7a:	4299      	cmp	r1, r3
    1f7c:	d109      	bne.n	1f92 <z_impl_k_mutex_lock+0xc6>
	if (resched) {
    1f7e:	b16e      	cbz	r6, 1f9c <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
    1f80:	4629      	mov	r1, r5
    1f82:	480a      	ldr	r0, [pc, #40]	; (1fac <z_impl_k_mutex_lock+0xe0>)
    1f84:	f001 ff45 	bl	3e12 <z_reschedule>
	return -EAGAIN;
    1f88:	f06f 000a 	mvn.w	r0, #10
    1f8c:	e7c5      	b.n	1f1a <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
    1f8e:	2600      	movs	r6, #0
    1f90:	e7d4      	b.n	1f3c <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
    1f92:	f000 fa1f 	bl	23d4 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    1f96:	2800      	cmp	r0, #0
    1f98:	d1f2      	bne.n	1f80 <z_impl_k_mutex_lock+0xb4>
    1f9a:	e7f0      	b.n	1f7e <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
    1f9c:	f385 8811 	msr	BASEPRI, r5
    1fa0:	f3bf 8f6f 	isb	sy
    1fa4:	e7f0      	b.n	1f88 <z_impl_k_mutex_lock+0xbc>
    1fa6:	bf00      	nop
    1fa8:	20000630 	.word	0x20000630
    1fac:	2000068d 	.word	0x2000068d

00001fb0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    1fb0:	b538      	push	{r3, r4, r5, lr}
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    1fb2:	4b1d      	ldr	r3, [pc, #116]	; (2028 <z_impl_k_mutex_unlock+0x78>)
    1fb4:	4604      	mov	r4, r0
    1fb6:	689a      	ldr	r2, [r3, #8]
    1fb8:	7bd3      	ldrb	r3, [r2, #15]
    1fba:	3b01      	subs	r3, #1
    1fbc:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
    1fbe:	68c3      	ldr	r3, [r0, #12]
    1fc0:	2b01      	cmp	r3, #1
    1fc2:	d005      	beq.n	1fd0 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
    1fc4:	3b01      	subs	r3, #1
    1fc6:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
    1fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sched_unlock();
    1fcc:	f000 b8ba 	b.w	2144 <k_sched_unlock>
	__asm__ volatile(
    1fd0:	f04f 0320 	mov.w	r3, #32
    1fd4:	f3ef 8511 	mrs	r5, BASEPRI
    1fd8:	f383 8811 	msr	BASEPRI, r3
    1fdc:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    1fe0:	6901      	ldr	r1, [r0, #16]
    1fe2:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    1fe4:	f990 300e 	ldrsb.w	r3, [r0, #14]
    1fe8:	4299      	cmp	r1, r3
    1fea:	d001      	beq.n	1ff0 <z_impl_k_mutex_unlock+0x40>
		return z_set_prio(mutex->owner, new_prio);
    1fec:	f000 f9f2 	bl	23d4 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    1ff0:	4620      	mov	r0, r4
    1ff2:	f001 ff66 	bl	3ec2 <z_unpend_first_thread>
	mutex->owner = new_owner;
    1ff6:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    1ff8:	b180      	cbz	r0, 201c <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    1ffa:	f990 200e 	ldrsb.w	r2, [r0, #14]
    1ffe:	6122      	str	r2, [r4, #16]
    2000:	2200      	movs	r2, #0
    2002:	6682      	str	r2, [r0, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2004:	7b42      	ldrb	r2, [r0, #13]
    2006:	06d2      	lsls	r2, r2, #27
    2008:	d103      	bne.n	2012 <z_impl_k_mutex_unlock+0x62>
	if (z_is_thread_ready(thread)) {
    200a:	6983      	ldr	r3, [r0, #24]
    200c:	b90b      	cbnz	r3, 2012 <z_impl_k_mutex_unlock+0x62>
		z_add_thread_to_ready_q(thread);
    200e:	f000 f8b5 	bl	217c <z_add_thread_to_ready_q>
		z_reschedule(&lock, key);
    2012:	4629      	mov	r1, r5
    2014:	4805      	ldr	r0, [pc, #20]	; (202c <z_impl_k_mutex_unlock+0x7c>)
    2016:	f001 fefc 	bl	3e12 <z_reschedule>
    201a:	e7d5      	b.n	1fc8 <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0U;
    201c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    201e:	f385 8811 	msr	BASEPRI, r5
    2022:	f3bf 8f6f 	isb	sy
    2026:	e7cf      	b.n	1fc8 <z_impl_k_mutex_unlock+0x18>
    2028:	20000630 	.word	0x20000630
    202c:	2000068d 	.word	0x2000068d

00002030 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    2030:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    2032:	4c08      	ldr	r4, [pc, #32]	; (2054 <z_reset_time_slice+0x24>)
    2034:	6823      	ldr	r3, [r4, #0]
    2036:	b15b      	cbz	r3, 2050 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    2038:	f7fe fc26 	bl	888 <z_clock_elapsed>
    203c:	6823      	ldr	r3, [r4, #0]
    203e:	4a06      	ldr	r2, [pc, #24]	; (2058 <z_reset_time_slice+0x28>)
    2040:	4418      	add	r0, r3
    2042:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    2044:	2100      	movs	r1, #0
	}
}
    2046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    204a:	4618      	mov	r0, r3
    204c:	f001 bfc3 	b.w	3fd6 <z_set_timeout_expiry>
}
    2050:	bd10      	pop	{r4, pc}
    2052:	bf00      	nop
    2054:	20000668 	.word	0x20000668
    2058:	20000630 	.word	0x20000630

0000205c <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
    205c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    205e:	460d      	mov	r5, r1
	__asm__ volatile(
    2060:	f04f 0320 	mov.w	r3, #32
    2064:	f3ef 8411 	mrs	r4, BASEPRI
    2068:	f383 8811 	msr	BASEPRI, r3
    206c:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
    2070:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2074:	f240 36e7 	movw	r6, #999	; 0x3e7
    2078:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    207a:	2200      	movs	r2, #0
    207c:	fbe1 6700 	umlal	r6, r7, r1, r0
    2080:	4b09      	ldr	r3, [pc, #36]	; (20a8 <k_sched_time_slice_set+0x4c>)
    2082:	4630      	mov	r0, r6
    2084:	611a      	str	r2, [r3, #16]
    2086:	4639      	mov	r1, r7
    2088:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    208c:	2300      	movs	r3, #0
    208e:	f7fe f8c7 	bl	220 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    2092:	4b06      	ldr	r3, [pc, #24]	; (20ac <k_sched_time_slice_set+0x50>)
    2094:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    2096:	4b06      	ldr	r3, [pc, #24]	; (20b0 <k_sched_time_slice_set+0x54>)
    2098:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    209a:	f7ff ffc9 	bl	2030 <z_reset_time_slice>
	__asm__ volatile(
    209e:	f384 8811 	msr	BASEPRI, r4
    20a2:	f3bf 8f6f 	isb	sy
	}
}
    20a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    20a8:	20000630 	.word	0x20000630
    20ac:	20000668 	.word	0x20000668
    20b0:	20000664 	.word	0x20000664

000020b4 <k_sched_lock>:
	__asm__ volatile(
    20b4:	f04f 0320 	mov.w	r3, #32
    20b8:	f3ef 8111 	mrs	r1, BASEPRI
    20bc:	f383 8811 	msr	BASEPRI, r3
    20c0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    20c4:	4b04      	ldr	r3, [pc, #16]	; (20d8 <k_sched_lock+0x24>)
    20c6:	689a      	ldr	r2, [r3, #8]
    20c8:	7bd3      	ldrb	r3, [r2, #15]
    20ca:	3b01      	subs	r3, #1
    20cc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    20ce:	f381 8811 	msr	BASEPRI, r1
    20d2:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    20d6:	4770      	bx	lr
    20d8:	20000630 	.word	0x20000630

000020dc <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    20dc:	4b09      	ldr	r3, [pc, #36]	; (2104 <z_priq_dumb_remove+0x28>)
    20de:	f103 0228 	add.w	r2, r3, #40	; 0x28
    20e2:	4282      	cmp	r2, r0
    20e4:	d105      	bne.n	20f2 <z_priq_dumb_remove+0x16>
    20e6:	689b      	ldr	r3, [r3, #8]
    20e8:	428b      	cmp	r3, r1
    20ea:	d102      	bne.n	20f2 <z_priq_dumb_remove+0x16>
    20ec:	7b4b      	ldrb	r3, [r1, #13]
    20ee:	06db      	lsls	r3, r3, #27
    20f0:	d106      	bne.n	2100 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    20f2:	e9d1 3200 	ldrd	r3, r2, [r1]
    20f6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    20f8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    20fa:	2300      	movs	r3, #0
	node->prev = NULL;
    20fc:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    2100:	4770      	bx	lr
    2102:	bf00      	nop
    2104:	20000630 	.word	0x20000630

00002108 <update_cache>:
{
    2108:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    210a:	4c0d      	ldr	r4, [pc, #52]	; (2140 <update_cache+0x38>)
{
    210c:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    210e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    2112:	f001 fe9f 	bl	3e54 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
    2116:	4605      	mov	r5, r0
    2118:	b900      	cbnz	r0, 211c <update_cache+0x14>
    211a:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    211c:	68a3      	ldr	r3, [r4, #8]
    211e:	b94a      	cbnz	r2, 2134 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    2120:	7b5a      	ldrb	r2, [r3, #13]
    2122:	06d2      	lsls	r2, r2, #27
    2124:	d106      	bne.n	2134 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    2126:	69aa      	ldr	r2, [r5, #24]
    2128:	b922      	cbnz	r2, 2134 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
    212a:	89da      	ldrh	r2, [r3, #14]
    212c:	2a7f      	cmp	r2, #127	; 0x7f
    212e:	d901      	bls.n	2134 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    2130:	6263      	str	r3, [r4, #36]	; 0x24
}
    2132:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
    2134:	429d      	cmp	r5, r3
    2136:	d001      	beq.n	213c <update_cache+0x34>
			z_reset_time_slice();
    2138:	f7ff ff7a 	bl	2030 <z_reset_time_slice>
		_kernel.ready_q.cache = th;
    213c:	6265      	str	r5, [r4, #36]	; 0x24
}
    213e:	e7f8      	b.n	2132 <update_cache+0x2a>
    2140:	20000630 	.word	0x20000630

00002144 <k_sched_unlock>:
{
    2144:	b510      	push	{r4, lr}
	__asm__ volatile(
    2146:	f04f 0320 	mov.w	r3, #32
    214a:	f3ef 8411 	mrs	r4, BASEPRI
    214e:	f383 8811 	msr	BASEPRI, r3
    2152:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    2156:	4b08      	ldr	r3, [pc, #32]	; (2178 <k_sched_unlock+0x34>)
		update_cache(0);
    2158:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    215a:	689a      	ldr	r2, [r3, #8]
    215c:	7bd3      	ldrb	r3, [r2, #15]
    215e:	3301      	adds	r3, #1
    2160:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    2162:	f7ff ffd1 	bl	2108 <update_cache>
	__asm__ volatile(
    2166:	f384 8811 	msr	BASEPRI, r4
    216a:	f3bf 8f6f 	isb	sy
}
    216e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    2172:	f001 be65 	b.w	3e40 <z_reschedule_unlocked>
    2176:	bf00      	nop
    2178:	20000630 	.word	0x20000630

0000217c <z_add_thread_to_ready_q>:
{
    217c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    217e:	f04f 0320 	mov.w	r3, #32
    2182:	f3ef 8411 	mrs	r4, BASEPRI
    2186:	f383 8811 	msr	BASEPRI, r3
    218a:	f3bf 8f6f 	isb	sy
	return list->head == list;
    218e:	4a15      	ldr	r2, [pc, #84]	; (21e4 <z_add_thread_to_ready_q+0x68>)
    2190:	4611      	mov	r1, r2
    2192:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2196:	428b      	cmp	r3, r1
    2198:	d01d      	beq.n	21d6 <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    219a:	b1e3      	cbz	r3, 21d6 <z_add_thread_to_ready_q+0x5a>
    219c:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    219e:	f990 500e 	ldrsb.w	r5, [r0, #14]
    21a2:	f993 700e 	ldrsb.w	r7, [r3, #14]
    21a6:	42af      	cmp	r7, r5
    21a8:	dd10      	ble.n	21cc <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
    21aa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    21ac:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    21b0:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    21b2:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    21b4:	7b43      	ldrb	r3, [r0, #13]
    21b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    21ba:	7343      	strb	r3, [r0, #13]
		update_cache(0);
    21bc:	2000      	movs	r0, #0
    21be:	f7ff ffa3 	bl	2108 <update_cache>
	__asm__ volatile(
    21c2:	f384 8811 	msr	BASEPRI, r4
    21c6:	f3bf 8f6f 	isb	sy
}
    21ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    21cc:	42b3      	cmp	r3, r6
    21ce:	d002      	beq.n	21d6 <z_add_thread_to_ready_q+0x5a>
    21d0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    21d2:	2b00      	cmp	r3, #0
    21d4:	d1e5      	bne.n	21a2 <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
    21d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    21d8:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    21da:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    21dc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    21de:	6018      	str	r0, [r3, #0]
	list->tail = node;
    21e0:	62d0      	str	r0, [r2, #44]	; 0x2c
    21e2:	e7e7      	b.n	21b4 <z_add_thread_to_ready_q+0x38>
    21e4:	20000630 	.word	0x20000630

000021e8 <z_move_thread_to_end_of_prio_q>:
{
    21e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21ea:	4604      	mov	r4, r0
	__asm__ volatile(
    21ec:	f04f 0320 	mov.w	r3, #32
    21f0:	f3ef 8511 	mrs	r5, BASEPRI
    21f4:	f383 8811 	msr	BASEPRI, r3
    21f8:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    21fc:	7b43      	ldrb	r3, [r0, #13]
    21fe:	065a      	lsls	r2, r3, #25
    2200:	d503      	bpl.n	220a <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    2202:	4601      	mov	r1, r0
    2204:	4817      	ldr	r0, [pc, #92]	; (2264 <z_move_thread_to_end_of_prio_q+0x7c>)
    2206:	f7ff ff69 	bl	20dc <z_priq_dumb_remove>
	return list->head == list;
    220a:	4a17      	ldr	r2, [pc, #92]	; (2268 <z_move_thread_to_end_of_prio_q+0x80>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    220c:	f102 0128 	add.w	r1, r2, #40	; 0x28
    2210:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
    2214:	428b      	cmp	r3, r1
    2216:	d01f      	beq.n	2258 <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2218:	b1f3      	cbz	r3, 2258 <z_move_thread_to_end_of_prio_q+0x70>
	if (t1->base.prio < t2->base.prio) {
    221a:	f994 600e 	ldrsb.w	r6, [r4, #14]
    221e:	f993 700e 	ldrsb.w	r7, [r3, #14]
    2222:	42b7      	cmp	r7, r6
    2224:	dd13      	ble.n	224e <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
    2226:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    2228:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    222c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    222e:	605c      	str	r4, [r3, #4]
    2230:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    2232:	6890      	ldr	r0, [r2, #8]
    2234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2238:	7363      	strb	r3, [r4, #13]
    223a:	1b03      	subs	r3, r0, r4
    223c:	4258      	negs	r0, r3
    223e:	4158      	adcs	r0, r3
    2240:	f7ff ff62 	bl	2108 <update_cache>
	__asm__ volatile(
    2244:	f385 8811 	msr	BASEPRI, r5
    2248:	f3bf 8f6f 	isb	sy
}
    224c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    224e:	4298      	cmp	r0, r3
    2250:	d002      	beq.n	2258 <z_move_thread_to_end_of_prio_q+0x70>
    2252:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2254:	2b00      	cmp	r3, #0
    2256:	d1e2      	bne.n	221e <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
    2258:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    225c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    225e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    2260:	62d4      	str	r4, [r2, #44]	; 0x2c
    2262:	e7e5      	b.n	2230 <z_move_thread_to_end_of_prio_q+0x48>
    2264:	20000658 	.word	0x20000658
    2268:	20000630 	.word	0x20000630

0000226c <z_time_slice>:
	if (pending_current == _current) {
    226c:	4a15      	ldr	r2, [pc, #84]	; (22c4 <z_time_slice+0x58>)
    226e:	4916      	ldr	r1, [pc, #88]	; (22c8 <z_time_slice+0x5c>)
{
    2270:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    2272:	680c      	ldr	r4, [r1, #0]
    2274:	6893      	ldr	r3, [r2, #8]
    2276:	42a3      	cmp	r3, r4
    2278:	4614      	mov	r4, r2
    227a:	d103      	bne.n	2284 <z_time_slice+0x18>
}
    227c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    2280:	f7ff bed6 	b.w	2030 <z_reset_time_slice>
	pending_current = NULL;
    2284:	2500      	movs	r5, #0
    2286:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
    2288:	4910      	ldr	r1, [pc, #64]	; (22cc <z_time_slice+0x60>)
    228a:	6809      	ldr	r1, [r1, #0]
    228c:	b1b9      	cbz	r1, 22be <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
    228e:	89d9      	ldrh	r1, [r3, #14]
    2290:	297f      	cmp	r1, #127	; 0x7f
    2292:	d814      	bhi.n	22be <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
    2294:	490e      	ldr	r1, [pc, #56]	; (22d0 <z_time_slice+0x64>)
    2296:	f993 500e 	ldrsb.w	r5, [r3, #14]
    229a:	6809      	ldr	r1, [r1, #0]
    229c:	428d      	cmp	r5, r1
    229e:	db0e      	blt.n	22be <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
    22a0:	490c      	ldr	r1, [pc, #48]	; (22d4 <z_time_slice+0x68>)
    22a2:	428b      	cmp	r3, r1
    22a4:	d00b      	beq.n	22be <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
    22a6:	6999      	ldr	r1, [r3, #24]
    22a8:	b949      	cbnz	r1, 22be <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    22aa:	6911      	ldr	r1, [r2, #16]
    22ac:	4281      	cmp	r1, r0
    22ae:	dc03      	bgt.n	22b8 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    22b0:	4618      	mov	r0, r3
    22b2:	f7ff ff99 	bl	21e8 <z_move_thread_to_end_of_prio_q>
    22b6:	e7e1      	b.n	227c <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
    22b8:	1a09      	subs	r1, r1, r0
    22ba:	6111      	str	r1, [r2, #16]
}
    22bc:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    22be:	2300      	movs	r3, #0
    22c0:	6123      	str	r3, [r4, #16]
    22c2:	e7fb      	b.n	22bc <z_time_slice+0x50>
    22c4:	20000630 	.word	0x20000630
    22c8:	20000660 	.word	0x20000660
    22cc:	20000668 	.word	0x20000668
    22d0:	20000664 	.word	0x20000664
    22d4:	20000558 	.word	0x20000558

000022d8 <z_remove_thread_from_ready_q>:
{
    22d8:	b538      	push	{r3, r4, r5, lr}
    22da:	4604      	mov	r4, r0
	__asm__ volatile(
    22dc:	f04f 0320 	mov.w	r3, #32
    22e0:	f3ef 8511 	mrs	r5, BASEPRI
    22e4:	f383 8811 	msr	BASEPRI, r3
    22e8:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    22ec:	7b43      	ldrb	r3, [r0, #13]
    22ee:	065a      	lsls	r2, r3, #25
    22f0:	d507      	bpl.n	2302 <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    22f2:	4601      	mov	r1, r0
    22f4:	4809      	ldr	r0, [pc, #36]	; (231c <z_remove_thread_from_ready_q+0x44>)
    22f6:	f7ff fef1 	bl	20dc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    22fa:	7b63      	ldrb	r3, [r4, #13]
    22fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    2300:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    2302:	4b07      	ldr	r3, [pc, #28]	; (2320 <z_remove_thread_from_ready_q+0x48>)
    2304:	6898      	ldr	r0, [r3, #8]
    2306:	1b03      	subs	r3, r0, r4
    2308:	4258      	negs	r0, r3
    230a:	4158      	adcs	r0, r3
    230c:	f7ff fefc 	bl	2108 <update_cache>
	__asm__ volatile(
    2310:	f385 8811 	msr	BASEPRI, r5
    2314:	f3bf 8f6f 	isb	sy
}
    2318:	bd38      	pop	{r3, r4, r5, pc}
    231a:	bf00      	nop
    231c:	20000658 	.word	0x20000658
    2320:	20000630 	.word	0x20000630

00002324 <pend>:
{
    2324:	b570      	push	{r4, r5, r6, lr}
    2326:	4604      	mov	r4, r0
    2328:	460d      	mov	r5, r1
    232a:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
    232c:	f7ff ffd4 	bl	22d8 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    2330:	7b63      	ldrb	r3, [r4, #13]
    2332:	f043 0302 	orr.w	r3, r3, #2
    2336:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    2338:	b17d      	cbz	r5, 235a <pend+0x36>
	return list->head == list;
    233a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    233c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    233e:	429d      	cmp	r5, r3
    2340:	d029      	beq.n	2396 <pend+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2342:	b343      	cbz	r3, 2396 <pend+0x72>
	if (t1->base.prio < t2->base.prio) {
    2344:	f994 200e 	ldrsb.w	r2, [r4, #14]
    2348:	f993 100e 	ldrsb.w	r1, [r3, #14]
    234c:	4291      	cmp	r1, r2
    234e:	dd1c      	ble.n	238a <pend+0x66>
	node->prev = successor->prev;
    2350:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    2352:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    2356:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    2358:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
    235a:	1c73      	adds	r3, r6, #1
    235c:	d022      	beq.n	23a4 <pend+0x80>
    235e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    2362:	f240 30e7 	movw	r0, #999	; 0x3e7
    2366:	2100      	movs	r1, #0
    2368:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    236c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2370:	fbc5 0106 	smlal	r0, r1, r5, r6
    2374:	2300      	movs	r3, #0
    2376:	f7fd ff53 	bl	220 <__aeabi_uldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    237a:	490b      	ldr	r1, [pc, #44]	; (23a8 <pend+0x84>)
    237c:	1c42      	adds	r2, r0, #1
    237e:	f104 0018 	add.w	r0, r4, #24
}
    2382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2386:	f000 b949 	b.w	261c <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
    238a:	6869      	ldr	r1, [r5, #4]
    238c:	428b      	cmp	r3, r1
    238e:	d002      	beq.n	2396 <pend+0x72>
    2390:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2392:	2b00      	cmp	r3, #0
    2394:	d1d8      	bne.n	2348 <pend+0x24>
	node->prev = list->tail;
    2396:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    2398:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    239a:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    239c:	686b      	ldr	r3, [r5, #4]
    239e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    23a0:	606c      	str	r4, [r5, #4]
    23a2:	e7da      	b.n	235a <pend+0x36>
}
    23a4:	bd70      	pop	{r4, r5, r6, pc}
    23a6:	bf00      	nop
    23a8:	00003e61 	.word	0x00003e61

000023ac <z_pend_curr>:
{
    23ac:	b510      	push	{r4, lr}
    23ae:	460c      	mov	r4, r1
    23b0:	4611      	mov	r1, r2
	pending_current = _current;
    23b2:	4a06      	ldr	r2, [pc, #24]	; (23cc <z_pend_curr+0x20>)
    23b4:	6890      	ldr	r0, [r2, #8]
    23b6:	4a06      	ldr	r2, [pc, #24]	; (23d0 <z_pend_curr+0x24>)
    23b8:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
    23ba:	461a      	mov	r2, r3
    23bc:	f7ff ffb2 	bl	2324 <pend>
    23c0:	4620      	mov	r0, r4
}
    23c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    23c6:	f7fe bd85 	b.w	ed4 <arch_swap>
    23ca:	bf00      	nop
    23cc:	20000630 	.word	0x20000630
    23d0:	20000660 	.word	0x20000660

000023d4 <z_set_prio>:
{
    23d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    23d8:	4604      	mov	r4, r0
	__asm__ volatile(
    23da:	f04f 0320 	mov.w	r3, #32
    23de:	f3ef 8911 	mrs	r9, BASEPRI
    23e2:	f383 8811 	msr	BASEPRI, r3
    23e6:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
    23ea:	f001 fcf0 	bl	3dce <z_is_thread_ready>
		if (need_sched) {
    23ee:	b24e      	sxtb	r6, r1
    23f0:	4680      	mov	r8, r0
    23f2:	b360      	cbz	r0, 244e <z_set_prio+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    23f4:	4d17      	ldr	r5, [pc, #92]	; (2454 <z_set_prio+0x80>)
    23f6:	4621      	mov	r1, r4
    23f8:	f105 0728 	add.w	r7, r5, #40	; 0x28
    23fc:	4638      	mov	r0, r7
    23fe:	f7ff fe6d 	bl	20dc <z_priq_dumb_remove>
	return list->head == list;
    2402:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
    2404:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2406:	42bb      	cmp	r3, r7
    2408:	462a      	mov	r2, r5
    240a:	d019      	beq.n	2440 <z_set_prio+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    240c:	b1c3      	cbz	r3, 2440 <z_set_prio+0x6c>
    240e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    2410:	f993 000e 	ldrsb.w	r0, [r3, #14]
    2414:	42b0      	cmp	r0, r6
    2416:	dd0e      	ble.n	2436 <z_set_prio+0x62>
	node->prev = successor->prev;
    2418:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    241a:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    241e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    2420:	605c      	str	r4, [r3, #4]
			update_cache(1);
    2422:	2001      	movs	r0, #1
    2424:	f7ff fe70 	bl	2108 <update_cache>
	__asm__ volatile(
    2428:	f389 8811 	msr	BASEPRI, r9
    242c:	f3bf 8f6f 	isb	sy
}
    2430:	4640      	mov	r0, r8
    2432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (node == list->tail) ? NULL : node->next;
    2436:	4299      	cmp	r1, r3
    2438:	d002      	beq.n	2440 <z_set_prio+0x6c>
    243a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    243c:	2b00      	cmp	r3, #0
    243e:	d1e7      	bne.n	2410 <z_set_prio+0x3c>
	node->prev = list->tail;
    2440:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    2442:	6027      	str	r7, [r4, #0]
	node->prev = list->tail;
    2444:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    2446:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2448:	601c      	str	r4, [r3, #0]
	list->tail = node;
    244a:	62d4      	str	r4, [r2, #44]	; 0x2c
    244c:	e7e9      	b.n	2422 <z_set_prio+0x4e>
			thread->base.prio = prio;
    244e:	73a6      	strb	r6, [r4, #14]
    2450:	e7ea      	b.n	2428 <z_set_prio+0x54>
    2452:	bf00      	nop
    2454:	20000630 	.word	0x20000630

00002458 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    2458:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    245a:	4b04      	ldr	r3, [pc, #16]	; (246c <z_sched_init+0x14>)
    245c:	4608      	mov	r0, r1
    245e:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    2462:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    2466:	f7ff bdf9 	b.w	205c <k_sched_time_slice_set>
    246a:	bf00      	nop
    246c:	20000630 	.word	0x20000630

00002470 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
    2470:	4b01      	ldr	r3, [pc, #4]	; (2478 <z_impl_k_current_get+0x8>)
    2472:	6898      	ldr	r0, [r3, #8]
    2474:	4770      	bx	lr
    2476:	bf00      	nop
    2478:	20000630 	.word	0x20000630

0000247c <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
    247c:	b510      	push	{r4, lr}
    247e:	4602      	mov	r2, r0
	__asm__ volatile(
    2480:	f04f 0320 	mov.w	r3, #32
    2484:	f3ef 8411 	mrs	r4, BASEPRI
    2488:	f383 8811 	msr	BASEPRI, r3
    248c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
    2490:	7b43      	ldrb	r3, [r0, #13]
    2492:	0759      	lsls	r1, r3, #29
    2494:	d404      	bmi.n	24a0 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
    2496:	f384 8811 	msr	BASEPRI, r4
    249a:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
    249e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    24a0:	f023 0304 	bic.w	r3, r3, #4
    24a4:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
    24a6:	f001 fd39 	bl	3f1c <z_is_thread_ready>
    24aa:	b110      	cbz	r0, 24b2 <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
    24ac:	4610      	mov	r0, r2
    24ae:	f7ff fe65 	bl	217c <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
    24b2:	4621      	mov	r1, r4
}
    24b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
    24b8:	4801      	ldr	r0, [pc, #4]	; (24c0 <z_impl_k_thread_start+0x44>)
    24ba:	f001 bcaa 	b.w	3e12 <z_reschedule>
    24be:	bf00      	nop
    24c0:	2000068d 	.word	0x2000068d

000024c4 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    24c4:	b530      	push	{r4, r5, lr}
    24c6:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    24c8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
    24ca:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    24cc:	9504      	str	r5, [sp, #16]
    24ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    24d0:	9503      	str	r5, [sp, #12]
    24d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    24d4:	9502      	str	r5, [sp, #8]
    24d6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    24d8:	9501      	str	r5, [sp, #4]
    24da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    24dc:	9500      	str	r5, [sp, #0]
    24de:	f7fe fd75 	bl	fcc <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    24e2:	4b03      	ldr	r3, [pc, #12]	; (24f0 <z_setup_new_thread+0x2c>)
    24e4:	689b      	ldr	r3, [r3, #8]
    24e6:	b103      	cbz	r3, 24ea <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    24e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    24ea:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    24ec:	b007      	add	sp, #28
    24ee:	bd30      	pop	{r4, r5, pc}
    24f0:	20000630 	.word	0x20000630

000024f4 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    24f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    24f8:	4e28      	ldr	r6, [pc, #160]	; (259c <z_init_static_threads+0xa8>)
    24fa:	4d29      	ldr	r5, [pc, #164]	; (25a0 <z_init_static_threads+0xac>)
    24fc:	46b0      	mov	r8, r6
{
    24fe:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    2500:	42b5      	cmp	r5, r6
    2502:	f105 0430 	add.w	r4, r5, #48	; 0x30
    2506:	d310      	bcc.n	252a <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    2508:	f7ff fdd4 	bl	20b4 <k_sched_lock>
    250c:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    2510:	f240 36e7 	movw	r6, #999	; 0x3e7
    2514:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    2516:	4c22      	ldr	r4, [pc, #136]	; (25a0 <z_init_static_threads+0xac>)
    2518:	f8df a088 	ldr.w	sl, [pc, #136]	; 25a4 <z_init_static_threads+0xb0>
    251c:	4544      	cmp	r4, r8
    251e:	d321      	bcc.n	2564 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
    2520:	b007      	add	sp, #28
    2522:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    2526:	f7ff be0d 	b.w	2144 <k_sched_unlock>
		z_setup_new_thread(
    252a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    252e:	9305      	str	r3, [sp, #20]
    2530:	f854 3c10 	ldr.w	r3, [r4, #-16]
    2534:	9304      	str	r3, [sp, #16]
    2536:	f854 3c14 	ldr.w	r3, [r4, #-20]
    253a:	9303      	str	r3, [sp, #12]
    253c:	f854 3c18 	ldr.w	r3, [r4, #-24]
    2540:	9302      	str	r3, [sp, #8]
    2542:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2546:	9301      	str	r3, [sp, #4]
    2548:	f854 3c20 	ldr.w	r3, [r4, #-32]
    254c:	9300      	str	r3, [sp, #0]
    254e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    2552:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    2556:	f7ff ffb5 	bl	24c4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    255a:	f854 3c30 	ldr.w	r3, [r4, #-48]
    255e:	64dd      	str	r5, [r3, #76]	; 0x4c
    2560:	4625      	mov	r5, r4
    2562:	e7cd      	b.n	2500 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
    2564:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2566:	1c4b      	adds	r3, r1, #1
    2568:	d004      	beq.n	2574 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
    256a:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
    256c:	b921      	cbnz	r1, 2578 <z_init_static_threads+0x84>
	z_impl_k_thread_start(thread);
    256e:	4628      	mov	r0, r5
    2570:	f7ff ff84 	bl	247c <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    2574:	3430      	adds	r4, #48	; 0x30
    2576:	e7d1      	b.n	251c <z_init_static_threads+0x28>
    2578:	46b3      	mov	fp, r6
    257a:	46bc      	mov	ip, r7
    257c:	fbe9 bc01 	umlal	fp, ip, r9, r1
    2580:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2584:	2300      	movs	r3, #0
    2586:	4658      	mov	r0, fp
    2588:	4661      	mov	r1, ip
    258a:	f7fd fe49 	bl	220 <__aeabi_uldivmod>
    258e:	4651      	mov	r1, sl
    2590:	1c42      	adds	r2, r0, #1
    2592:	f105 0018 	add.w	r0, r5, #24
    2596:	f000 f841 	bl	261c <z_add_timeout>
    259a:	e7eb      	b.n	2574 <z_init_static_threads+0x80>
    259c:	200014cc 	.word	0x200014cc
    25a0:	200014cc 	.word	0x200014cc
    25a4:	00003e61 	.word	0x00003e61

000025a8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    25a8:	4b03      	ldr	r3, [pc, #12]	; (25b8 <elapsed+0x10>)
    25aa:	681b      	ldr	r3, [r3, #0]
    25ac:	b90b      	cbnz	r3, 25b2 <elapsed+0xa>
    25ae:	f7fe b96b 	b.w	888 <z_clock_elapsed>
}
    25b2:	2000      	movs	r0, #0
    25b4:	4770      	bx	lr
    25b6:	bf00      	nop
    25b8:	2000066c 	.word	0x2000066c

000025bc <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    25bc:	6803      	ldr	r3, [r0, #0]
    25be:	b140      	cbz	r0, 25d2 <remove_timeout+0x16>
    25c0:	4a07      	ldr	r2, [pc, #28]	; (25e0 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    25c2:	6852      	ldr	r2, [r2, #4]
    25c4:	4290      	cmp	r0, r2
    25c6:	d004      	beq.n	25d2 <remove_timeout+0x16>
	if (next(t) != NULL) {
    25c8:	b11b      	cbz	r3, 25d2 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    25ca:	689a      	ldr	r2, [r3, #8]
    25cc:	6881      	ldr	r1, [r0, #8]
    25ce:	440a      	add	r2, r1
    25d0:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    25d2:	6842      	ldr	r2, [r0, #4]
    25d4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    25d6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    25d8:	2300      	movs	r3, #0
	node->prev = NULL;
    25da:	e9c0 3300 	strd	r3, r3, [r0]
}
    25de:	4770      	bx	lr
    25e0:	2000140c 	.word	0x2000140c

000025e4 <next_timeout>:
	return list->head == list;
    25e4:	4b0b      	ldr	r3, [pc, #44]	; (2614 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    25e6:	b510      	push	{r4, lr}
    25e8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    25ea:	429c      	cmp	r4, r3
    25ec:	bf08      	it	eq
    25ee:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    25f0:	f7ff ffda 	bl	25a8 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    25f4:	b154      	cbz	r4, 260c <next_timeout+0x28>
    25f6:	68a3      	ldr	r3, [r4, #8]
    25f8:	1a18      	subs	r0, r3, r0
    25fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    25fe:	4b06      	ldr	r3, [pc, #24]	; (2618 <next_timeout+0x34>)
    2600:	691b      	ldr	r3, [r3, #16]
    2602:	b113      	cbz	r3, 260a <next_timeout+0x26>
    2604:	4298      	cmp	r0, r3
    2606:	bfa8      	it	ge
    2608:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    260a:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    260c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    2610:	e7f5      	b.n	25fe <next_timeout+0x1a>
    2612:	bf00      	nop
    2614:	2000140c 	.word	0x2000140c
    2618:	20000630 	.word	0x20000630

0000261c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
    261c:	b570      	push	{r4, r5, r6, lr}
    261e:	4604      	mov	r4, r0
    2620:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    2622:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
    2624:	f04f 0320 	mov.w	r3, #32
    2628:	f3ef 8511 	mrs	r5, BASEPRI
    262c:	f383 8811 	msr	BASEPRI, r3
    2630:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    2634:	f7ff ffb8 	bl	25a8 <elapsed>
    2638:	2e01      	cmp	r6, #1
    263a:	bfac      	ite	ge
    263c:	1980      	addge	r0, r0, r6
    263e:	3001      	addlt	r0, #1
	return list->head == list;
    2640:	4b16      	ldr	r3, [pc, #88]	; (269c <z_add_timeout+0x80>)
    2642:	60a0      	str	r0, [r4, #8]
    2644:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2646:	429a      	cmp	r2, r3
    2648:	d001      	beq.n	264e <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    264a:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    264c:	b932      	cbnz	r2, 265c <z_add_timeout+0x40>
	node->prev = list->tail;
    264e:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    2650:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
    2652:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    2654:	685a      	ldr	r2, [r3, #4]
    2656:	6014      	str	r4, [r2, #0]
	list->tail = node;
    2658:	605c      	str	r4, [r3, #4]
    265a:	e00a      	b.n	2672 <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    265c:	6890      	ldr	r0, [r2, #8]
    265e:	68a1      	ldr	r1, [r4, #8]
    2660:	4288      	cmp	r0, r1
    2662:	dd15      	ble.n	2690 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
    2664:	1a41      	subs	r1, r0, r1
    2666:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    2668:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    266a:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
    266e:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    2670:	6054      	str	r4, [r2, #4]
	return list->head == list;
    2672:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2674:	429a      	cmp	r2, r3
    2676:	d006      	beq.n	2686 <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    2678:	4294      	cmp	r4, r2
    267a:	d104      	bne.n	2686 <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
    267c:	f7ff ffb2 	bl	25e4 <next_timeout>
    2680:	2100      	movs	r1, #0
    2682:	f7fe f8ab 	bl	7dc <z_clock_set_timeout>
	__asm__ volatile(
    2686:	f385 8811 	msr	BASEPRI, r5
    268a:	f3bf 8f6f 	isb	sy
		}
	}
}
    268e:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
    2690:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    2692:	4296      	cmp	r6, r2
    2694:	60a1      	str	r1, [r4, #8]
    2696:	d0da      	beq.n	264e <z_add_timeout+0x32>
    2698:	6812      	ldr	r2, [r2, #0]
    269a:	e7d7      	b.n	264c <z_add_timeout+0x30>
    269c:	2000140c 	.word	0x2000140c

000026a0 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    26a0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    26a4:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    26a6:	f7ff fde1 	bl	226c <z_time_slice>
	__asm__ volatile(
    26aa:	f04f 0320 	mov.w	r3, #32
    26ae:	f3ef 8511 	mrs	r5, BASEPRI
    26b2:	f383 8811 	msr	BASEPRI, r3
    26b6:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    26ba:	4f21      	ldr	r7, [pc, #132]	; (2740 <z_clock_announce+0xa0>)
    26bc:	4e21      	ldr	r6, [pc, #132]	; (2744 <z_clock_announce+0xa4>)
    26be:	46b8      	mov	r8, r7
	return list->head == list;
    26c0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 2748 <z_clock_announce+0xa8>
    26c4:	6034      	str	r4, [r6, #0]
    26c6:	f8d9 4000 	ldr.w	r4, [r9]
    26ca:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    26cc:	454c      	cmp	r4, r9
    26ce:	e9d7 bc00 	ldrd	fp, ip, [r7]
    26d2:	d005      	beq.n	26e0 <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    26d4:	b124      	cbz	r4, 26e0 <z_clock_announce+0x40>
    26d6:	68a3      	ldr	r3, [r4, #8]
    26d8:	4293      	cmp	r3, r2
    26da:	dd14      	ble.n	2706 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    26dc:	1a9b      	subs	r3, r3, r2
    26de:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    26e0:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    26e2:	eb1b 0002 	adds.w	r0, fp, r2
    26e6:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
    26ea:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
    26ee:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    26f0:	f7ff ff78 	bl	25e4 <next_timeout>
    26f4:	4621      	mov	r1, r4
    26f6:	f7fe f871 	bl	7dc <z_clock_set_timeout>
	__asm__ volatile(
    26fa:	f385 8811 	msr	BASEPRI, r5
    26fe:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    2702:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
    2706:	eb1b 0003 	adds.w	r0, fp, r3
    270a:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
    270e:	1ad3      	subs	r3, r2, r3
    2710:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    2712:	2300      	movs	r3, #0
		curr_tick += dt;
    2714:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
    2718:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    271a:	4620      	mov	r0, r4
    271c:	f7ff ff4e 	bl	25bc <remove_timeout>
    2720:	f385 8811 	msr	BASEPRI, r5
    2724:	f3bf 8f6f 	isb	sy
		t->fn(t);
    2728:	68e3      	ldr	r3, [r4, #12]
    272a:	4798      	blx	r3
	__asm__ volatile(
    272c:	f04f 0320 	mov.w	r3, #32
    2730:	f3ef 8511 	mrs	r5, BASEPRI
    2734:	f383 8811 	msr	BASEPRI, r3
    2738:	f3bf 8f6f 	isb	sy
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    273c:	e7c3      	b.n	26c6 <z_clock_announce+0x26>
    273e:	bf00      	nop
    2740:	20000000 	.word	0x20000000
    2744:	2000066c 	.word	0x2000066c
    2748:	2000140c 	.word	0x2000140c

0000274c <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    274c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    274e:	4c07      	ldr	r4, [pc, #28]	; (276c <init_static_pools+0x20>)
    2750:	4d07      	ldr	r5, [pc, #28]	; (2770 <init_static_pools+0x24>)
    2752:	42ac      	cmp	r4, r5
    2754:	d301      	bcc.n	275a <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    2756:	2000      	movs	r0, #0
    2758:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    275a:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
    275e:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
    2760:	e9c4 3305 	strd	r3, r3, [r4, #20]
    2764:	f000 fee5 	bl	3532 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    2768:	341c      	adds	r4, #28
    276a:	e7f2      	b.n	2752 <init_static_pools+0x6>
    276c:	200014cc 	.word	0x200014cc
    2770:	200014cc 	.word	0x200014cc

00002774 <CC_PalMemCopyPlat>:
    2774:	f001 ba55 	b.w	3c22 <memmove>

00002778 <CC_PalMemSetZeroPlat>:
    2778:	460a      	mov	r2, r1
    277a:	2100      	movs	r1, #0
    277c:	f001 ba92 	b.w	3ca4 <memset>

00002780 <CC_PalInit>:
    2780:	b510      	push	{r4, lr}
    2782:	4811      	ldr	r0, [pc, #68]	; (27c8 <CC_PalInit+0x48>)
    2784:	f000 f848 	bl	2818 <CC_PalMutexCreate>
    2788:	b100      	cbz	r0, 278c <CC_PalInit+0xc>
    278a:	bd10      	pop	{r4, pc}
    278c:	480f      	ldr	r0, [pc, #60]	; (27cc <CC_PalInit+0x4c>)
    278e:	f000 f843 	bl	2818 <CC_PalMutexCreate>
    2792:	2800      	cmp	r0, #0
    2794:	d1f9      	bne.n	278a <CC_PalInit+0xa>
    2796:	4c0e      	ldr	r4, [pc, #56]	; (27d0 <CC_PalInit+0x50>)
    2798:	4620      	mov	r0, r4
    279a:	f000 f83d 	bl	2818 <CC_PalMutexCreate>
    279e:	2800      	cmp	r0, #0
    27a0:	d1f3      	bne.n	278a <CC_PalInit+0xa>
    27a2:	4b0c      	ldr	r3, [pc, #48]	; (27d4 <CC_PalInit+0x54>)
    27a4:	480c      	ldr	r0, [pc, #48]	; (27d8 <CC_PalInit+0x58>)
    27a6:	601c      	str	r4, [r3, #0]
    27a8:	f000 f836 	bl	2818 <CC_PalMutexCreate>
    27ac:	4601      	mov	r1, r0
    27ae:	2800      	cmp	r0, #0
    27b0:	d1eb      	bne.n	278a <CC_PalInit+0xa>
    27b2:	f000 f82d 	bl	2810 <CC_PalDmaInit>
    27b6:	4604      	mov	r4, r0
    27b8:	b108      	cbz	r0, 27be <CC_PalInit+0x3e>
    27ba:	4620      	mov	r0, r4
    27bc:	bd10      	pop	{r4, pc}
    27be:	f000 f851 	bl	2864 <CC_PalPowerSaveModeInit>
    27c2:	4620      	mov	r0, r4
    27c4:	e7fa      	b.n	27bc <CC_PalInit+0x3c>
    27c6:	bf00      	nop
    27c8:	20001420 	.word	0x20001420
    27cc:	20001414 	.word	0x20001414
    27d0:	2000141c 	.word	0x2000141c
    27d4:	20001424 	.word	0x20001424
    27d8:	20001418 	.word	0x20001418

000027dc <CC_PalTerminate>:
    27dc:	b508      	push	{r3, lr}
    27de:	4808      	ldr	r0, [pc, #32]	; (2800 <CC_PalTerminate+0x24>)
    27e0:	f000 f824 	bl	282c <CC_PalMutexDestroy>
    27e4:	4807      	ldr	r0, [pc, #28]	; (2804 <CC_PalTerminate+0x28>)
    27e6:	f000 f821 	bl	282c <CC_PalMutexDestroy>
    27ea:	4807      	ldr	r0, [pc, #28]	; (2808 <CC_PalTerminate+0x2c>)
    27ec:	f000 f81e 	bl	282c <CC_PalMutexDestroy>
    27f0:	4806      	ldr	r0, [pc, #24]	; (280c <CC_PalTerminate+0x30>)
    27f2:	f000 f81b 	bl	282c <CC_PalMutexDestroy>
    27f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    27fa:	f000 b80b 	b.w	2814 <CC_PalDmaTerminate>
    27fe:	bf00      	nop
    2800:	20001420 	.word	0x20001420
    2804:	20001414 	.word	0x20001414
    2808:	2000141c 	.word	0x2000141c
    280c:	20001418 	.word	0x20001418

00002810 <CC_PalDmaInit>:
    2810:	2000      	movs	r0, #0
    2812:	4770      	bx	lr

00002814 <CC_PalDmaTerminate>:
    2814:	4770      	bx	lr
    2816:	bf00      	nop

00002818 <CC_PalMutexCreate>:
    2818:	b508      	push	{r3, lr}
    281a:	4b03      	ldr	r3, [pc, #12]	; (2828 <CC_PalMutexCreate+0x10>)
    281c:	6802      	ldr	r2, [r0, #0]
    281e:	681b      	ldr	r3, [r3, #0]
    2820:	6810      	ldr	r0, [r2, #0]
    2822:	4798      	blx	r3
    2824:	2000      	movs	r0, #0
    2826:	bd08      	pop	{r3, pc}
    2828:	20001430 	.word	0x20001430

0000282c <CC_PalMutexDestroy>:
    282c:	b508      	push	{r3, lr}
    282e:	4b03      	ldr	r3, [pc, #12]	; (283c <CC_PalMutexDestroy+0x10>)
    2830:	6802      	ldr	r2, [r0, #0]
    2832:	685b      	ldr	r3, [r3, #4]
    2834:	6810      	ldr	r0, [r2, #0]
    2836:	4798      	blx	r3
    2838:	2000      	movs	r0, #0
    283a:	bd08      	pop	{r3, pc}
    283c:	20001430 	.word	0x20001430

00002840 <CC_PalMutexLock>:
    2840:	6802      	ldr	r2, [r0, #0]
    2842:	4b02      	ldr	r3, [pc, #8]	; (284c <CC_PalMutexLock+0xc>)
    2844:	6810      	ldr	r0, [r2, #0]
    2846:	689b      	ldr	r3, [r3, #8]
    2848:	4718      	bx	r3
    284a:	bf00      	nop
    284c:	20001430 	.word	0x20001430

00002850 <CC_PalMutexUnlock>:
    2850:	b508      	push	{r3, lr}
    2852:	4b03      	ldr	r3, [pc, #12]	; (2860 <CC_PalMutexUnlock+0x10>)
    2854:	6802      	ldr	r2, [r0, #0]
    2856:	68db      	ldr	r3, [r3, #12]
    2858:	6810      	ldr	r0, [r2, #0]
    285a:	4798      	blx	r3
    285c:	2000      	movs	r0, #0
    285e:	bd08      	pop	{r3, pc}
    2860:	20001430 	.word	0x20001430

00002864 <CC_PalPowerSaveModeInit>:
    2864:	b570      	push	{r4, r5, r6, lr}
    2866:	4c09      	ldr	r4, [pc, #36]	; (288c <CC_PalPowerSaveModeInit+0x28>)
    2868:	4d09      	ldr	r5, [pc, #36]	; (2890 <CC_PalPowerSaveModeInit+0x2c>)
    286a:	6920      	ldr	r0, [r4, #16]
    286c:	68ab      	ldr	r3, [r5, #8]
    286e:	4798      	blx	r3
    2870:	b118      	cbz	r0, 287a <CC_PalPowerSaveModeInit+0x16>
    2872:	4b08      	ldr	r3, [pc, #32]	; (2894 <CC_PalPowerSaveModeInit+0x30>)
    2874:	4808      	ldr	r0, [pc, #32]	; (2898 <CC_PalPowerSaveModeInit+0x34>)
    2876:	685b      	ldr	r3, [r3, #4]
    2878:	4798      	blx	r3
    287a:	2100      	movs	r1, #0
    287c:	4a07      	ldr	r2, [pc, #28]	; (289c <CC_PalPowerSaveModeInit+0x38>)
    287e:	68eb      	ldr	r3, [r5, #12]
    2880:	6011      	str	r1, [r2, #0]
    2882:	6920      	ldr	r0, [r4, #16]
    2884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2888:	4718      	bx	r3
    288a:	bf00      	nop
    288c:	20001440 	.word	0x20001440
    2890:	20001430 	.word	0x20001430
    2894:	20001428 	.word	0x20001428
    2898:	00004530 	.word	0x00004530
    289c:	20000670 	.word	0x20000670

000028a0 <CC_PalPowerSaveModeSelect>:
    28a0:	b570      	push	{r4, r5, r6, lr}
    28a2:	4c14      	ldr	r4, [pc, #80]	; (28f4 <CC_PalPowerSaveModeSelect+0x54>)
    28a4:	4d14      	ldr	r5, [pc, #80]	; (28f8 <CC_PalPowerSaveModeSelect+0x58>)
    28a6:	4606      	mov	r6, r0
    28a8:	68ab      	ldr	r3, [r5, #8]
    28aa:	6920      	ldr	r0, [r4, #16]
    28ac:	4798      	blx	r3
    28ae:	b9f0      	cbnz	r0, 28ee <CC_PalPowerSaveModeSelect+0x4e>
    28b0:	4a12      	ldr	r2, [pc, #72]	; (28fc <CC_PalPowerSaveModeSelect+0x5c>)
    28b2:	6813      	ldr	r3, [r2, #0]
    28b4:	b95e      	cbnz	r6, 28ce <CC_PalPowerSaveModeSelect+0x2e>
    28b6:	b91b      	cbnz	r3, 28c0 <CC_PalPowerSaveModeSelect+0x20>
    28b8:	2001      	movs	r0, #1
    28ba:	4911      	ldr	r1, [pc, #68]	; (2900 <CC_PalPowerSaveModeSelect+0x60>)
    28bc:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
    28c0:	3301      	adds	r3, #1
    28c2:	6013      	str	r3, [r2, #0]
    28c4:	68eb      	ldr	r3, [r5, #12]
    28c6:	6920      	ldr	r0, [r4, #16]
    28c8:	4798      	blx	r3
    28ca:	2000      	movs	r0, #0
    28cc:	bd70      	pop	{r4, r5, r6, pc}
    28ce:	2b00      	cmp	r3, #0
    28d0:	d0f8      	beq.n	28c4 <CC_PalPowerSaveModeSelect+0x24>
    28d2:	2b01      	cmp	r3, #1
    28d4:	bf08      	it	eq
    28d6:	490a      	ldreq	r1, [pc, #40]	; (2900 <CC_PalPowerSaveModeSelect+0x60>)
    28d8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    28dc:	bf08      	it	eq
    28de:	f8c1 0500 	streq.w	r0, [r1, #1280]	; 0x500
    28e2:	6920      	ldr	r0, [r4, #16]
    28e4:	6013      	str	r3, [r2, #0]
    28e6:	68eb      	ldr	r3, [r5, #12]
    28e8:	4798      	blx	r3
    28ea:	2000      	movs	r0, #0
    28ec:	e7ee      	b.n	28cc <CC_PalPowerSaveModeSelect+0x2c>
    28ee:	4805      	ldr	r0, [pc, #20]	; (2904 <CC_PalPowerSaveModeSelect+0x64>)
    28f0:	bd70      	pop	{r4, r5, r6, pc}
    28f2:	bf00      	nop
    28f4:	20001440 	.word	0x20001440
    28f8:	20001430 	.word	0x20001430
    28fc:	20000670 	.word	0x20000670
    2900:	50840000 	.word	0x50840000
    2904:	ffff8fe9 	.word	0xffff8fe9

00002908 <CC_HalInit>:
    2908:	2000      	movs	r0, #0
    290a:	4770      	bx	lr

0000290c <CC_HalTerminate>:
    290c:	2000      	movs	r0, #0
    290e:	4770      	bx	lr

00002910 <CC_HalClearInterruptBit>:
    2910:	0543      	lsls	r3, r0, #21
    2912:	d503      	bpl.n	291c <CC_HalClearInterruptBit+0xc>
    2914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2918:	4b02      	ldr	r3, [pc, #8]	; (2924 <CC_HalClearInterruptBit+0x14>)
    291a:	601a      	str	r2, [r3, #0]
    291c:	4b02      	ldr	r3, [pc, #8]	; (2928 <CC_HalClearInterruptBit+0x18>)
    291e:	6018      	str	r0, [r3, #0]
    2920:	4770      	bx	lr
    2922:	bf00      	nop
    2924:	50841108 	.word	0x50841108
    2928:	50841a08 	.word	0x50841a08

0000292c <CC_HalMaskInterrupt>:
    292c:	4b01      	ldr	r3, [pc, #4]	; (2934 <CC_HalMaskInterrupt+0x8>)
    292e:	6018      	str	r0, [r3, #0]
    2930:	4770      	bx	lr
    2932:	bf00      	nop
    2934:	50841a04 	.word	0x50841a04

00002938 <CC_HalWaitInterruptRND>:
    2938:	b108      	cbz	r0, 293e <CC_HalWaitInterruptRND+0x6>
    293a:	f000 b803 	b.w	2944 <CC_PalWaitInterruptRND>
    293e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    2942:	4770      	bx	lr

00002944 <CC_PalWaitInterruptRND>:
    2944:	4602      	mov	r2, r0
    2946:	4807      	ldr	r0, [pc, #28]	; (2964 <CC_PalWaitInterruptRND+0x20>)
    2948:	6803      	ldr	r3, [r0, #0]
    294a:	4213      	tst	r3, r2
    294c:	d0fc      	beq.n	2948 <CC_PalWaitInterruptRND+0x4>
    294e:	b121      	cbz	r1, 295a <CC_PalWaitInterruptRND+0x16>
    2950:	4b05      	ldr	r3, [pc, #20]	; (2968 <CC_PalWaitInterruptRND+0x24>)
    2952:	4806      	ldr	r0, [pc, #24]	; (296c <CC_PalWaitInterruptRND+0x28>)
    2954:	681b      	ldr	r3, [r3, #0]
    2956:	600b      	str	r3, [r1, #0]
    2958:	6003      	str	r3, [r0, #0]
    295a:	4b05      	ldr	r3, [pc, #20]	; (2970 <CC_PalWaitInterruptRND+0x2c>)
    295c:	2000      	movs	r0, #0
    295e:	601a      	str	r2, [r3, #0]
    2960:	4770      	bx	lr
    2962:	bf00      	nop
    2964:	50841a00 	.word	0x50841a00
    2968:	50841104 	.word	0x50841104
    296c:	50841108 	.word	0x50841108
    2970:	50841a08 	.word	0x50841a08

00002974 <mbedtls_platform_setup>:
    2974:	f000 b8a0 	b.w	2ab8 <nrf_cc310_platform_init>

00002978 <mbedtls_platform_zeroize>:
    2978:	b130      	cbz	r0, 2988 <mbedtls_platform_zeroize+0x10>
    297a:	b129      	cbz	r1, 2988 <mbedtls_platform_zeroize+0x10>
    297c:	2300      	movs	r3, #0
    297e:	4401      	add	r1, r0
    2980:	7003      	strb	r3, [r0, #0]
    2982:	3001      	adds	r0, #1
    2984:	4281      	cmp	r1, r0
    2986:	d1fb      	bne.n	2980 <mbedtls_platform_zeroize+0x8>
    2988:	4770      	bx	lr
    298a:	bf00      	nop

0000298c <mbedtls_hardware_poll>:
    298c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2990:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
    2994:	460f      	mov	r7, r1
    2996:	9205      	str	r2, [sp, #20]
    2998:	2100      	movs	r1, #0
    299a:	4614      	mov	r4, r2
    299c:	a812      	add	r0, sp, #72	; 0x48
    299e:	f44f 7208 	mov.w	r2, #544	; 0x220
    29a2:	461e      	mov	r6, r3
    29a4:	f001 f97e 	bl	3ca4 <memset>
    29a8:	2300      	movs	r3, #0
    29aa:	a808      	add	r0, sp, #32
    29ac:	4619      	mov	r1, r3
    29ae:	2228      	movs	r2, #40	; 0x28
    29b0:	9306      	str	r3, [sp, #24]
    29b2:	f001 f977 	bl	3ca4 <memset>
    29b6:	2f00      	cmp	r7, #0
    29b8:	d03c      	beq.n	2a34 <mbedtls_hardware_poll+0xa8>
    29ba:	2e00      	cmp	r6, #0
    29bc:	d03a      	beq.n	2a34 <mbedtls_hardware_poll+0xa8>
    29be:	2c00      	cmp	r4, #0
    29c0:	d038      	beq.n	2a34 <mbedtls_hardware_poll+0xa8>
    29c2:	2104      	movs	r1, #4
    29c4:	a806      	add	r0, sp, #24
    29c6:	f7ff fed7 	bl	2778 <CC_PalMemSetZeroPlat>
    29ca:	a808      	add	r0, sp, #32
    29cc:	2128      	movs	r1, #40	; 0x28
    29ce:	f7ff fed3 	bl	2778 <CC_PalMemSetZeroPlat>
    29d2:	a808      	add	r0, sp, #32
    29d4:	f000 f832 	bl	2a3c <RNG_PLAT_SetUserRngParameters>
    29d8:	b178      	cbz	r0, 29fa <mbedtls_hardware_poll+0x6e>
    29da:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    29de:	a812      	add	r0, sp, #72	; 0x48
    29e0:	f44f 7108 	mov.w	r1, #544	; 0x220
    29e4:	f7ff ffc8 	bl	2978 <mbedtls_platform_zeroize>
    29e8:	a806      	add	r0, sp, #24
    29ea:	2104      	movs	r1, #4
    29ec:	f7ff ffc4 	bl	2978 <mbedtls_platform_zeroize>
    29f0:	4628      	mov	r0, r5
    29f2:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
    29f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    29fa:	ab12      	add	r3, sp, #72	; 0x48
    29fc:	f10d 081c 	add.w	r8, sp, #28
    2a00:	9003      	str	r0, [sp, #12]
    2a02:	e9cd 6301 	strd	r6, r3, [sp, #4]
    2a06:	4602      	mov	r2, r0
    2a08:	ab05      	add	r3, sp, #20
    2a0a:	a908      	add	r1, sp, #32
    2a0c:	f8cd 8000 	str.w	r8, [sp]
    2a10:	a806      	add	r0, sp, #24
    2a12:	f000 fce9 	bl	33e8 <LLF_RND_GetTrngSource>
    2a16:	2800      	cmp	r0, #0
    2a18:	d1df      	bne.n	29da <mbedtls_hardware_poll+0x4e>
    2a1a:	6833      	ldr	r3, [r6, #0]
    2a1c:	42a3      	cmp	r3, r4
    2a1e:	d3dc      	bcc.n	29da <mbedtls_hardware_poll+0x4e>
    2a20:	f8d8 1000 	ldr.w	r1, [r8]
    2a24:	4605      	mov	r5, r0
    2a26:	3108      	adds	r1, #8
    2a28:	4638      	mov	r0, r7
    2a2a:	4622      	mov	r2, r4
    2a2c:	f7ff fea2 	bl	2774 <CC_PalMemCopyPlat>
    2a30:	6034      	str	r4, [r6, #0]
    2a32:	e7d4      	b.n	29de <mbedtls_hardware_poll+0x52>
    2a34:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    2a38:	e7da      	b.n	29f0 <mbedtls_hardware_poll+0x64>
    2a3a:	bf00      	nop

00002a3c <RNG_PLAT_SetUserRngParameters>:
    2a3c:	231c      	movs	r3, #28
    2a3e:	b530      	push	{r4, r5, lr}
    2a40:	b083      	sub	sp, #12
    2a42:	a902      	add	r1, sp, #8
    2a44:	f841 3d04 	str.w	r3, [r1, #-4]!
    2a48:	4604      	mov	r4, r0
    2a4a:	f000 f9b1 	bl	2db0 <CC_PalTrngParamGet>
    2a4e:	4605      	mov	r5, r0
    2a50:	b9d8      	cbnz	r0, 2a8a <RNG_PLAT_SetUserRngParameters+0x4e>
    2a52:	9b01      	ldr	r3, [sp, #4]
    2a54:	2b1c      	cmp	r3, #28
    2a56:	d11b      	bne.n	2a90 <RNG_PLAT_SetUserRngParameters+0x54>
    2a58:	e9d4 3200 	ldrd	r3, r2, [r4]
    2a5c:	2101      	movs	r1, #1
    2a5e:	3300      	adds	r3, #0
    2a60:	61e1      	str	r1, [r4, #28]
    2a62:	bf18      	it	ne
    2a64:	2301      	movne	r3, #1
    2a66:	b10a      	cbz	r2, 2a6c <RNG_PLAT_SetUserRngParameters+0x30>
    2a68:	f043 0302 	orr.w	r3, r3, #2
    2a6c:	68a2      	ldr	r2, [r4, #8]
    2a6e:	b932      	cbnz	r2, 2a7e <RNG_PLAT_SetUserRngParameters+0x42>
    2a70:	68e2      	ldr	r2, [r4, #12]
    2a72:	b9aa      	cbnz	r2, 2aa0 <RNG_PLAT_SetUserRngParameters+0x64>
    2a74:	e9c4 3208 	strd	r3, r2, [r4, #32]
    2a78:	b93b      	cbnz	r3, 2a8a <RNG_PLAT_SetUserRngParameters+0x4e>
    2a7a:	4d0d      	ldr	r5, [pc, #52]	; (2ab0 <RNG_PLAT_SetUserRngParameters+0x74>)
    2a7c:	e009      	b.n	2a92 <RNG_PLAT_SetUserRngParameters+0x56>
    2a7e:	68e2      	ldr	r2, [r4, #12]
    2a80:	f043 0304 	orr.w	r3, r3, #4
    2a84:	b962      	cbnz	r2, 2aa0 <RNG_PLAT_SetUserRngParameters+0x64>
    2a86:	e9c4 3208 	strd	r3, r2, [r4, #32]
    2a8a:	4628      	mov	r0, r5
    2a8c:	b003      	add	sp, #12
    2a8e:	bd30      	pop	{r4, r5, pc}
    2a90:	4d08      	ldr	r5, [pc, #32]	; (2ab4 <RNG_PLAT_SetUserRngParameters+0x78>)
    2a92:	4620      	mov	r0, r4
    2a94:	211c      	movs	r1, #28
    2a96:	f7ff fe6f 	bl	2778 <CC_PalMemSetZeroPlat>
    2a9a:	4628      	mov	r0, r5
    2a9c:	b003      	add	sp, #12
    2a9e:	bd30      	pop	{r4, r5, pc}
    2aa0:	2200      	movs	r2, #0
    2aa2:	4628      	mov	r0, r5
    2aa4:	f043 0308 	orr.w	r3, r3, #8
    2aa8:	e9c4 3208 	strd	r3, r2, [r4, #32]
    2aac:	b003      	add	sp, #12
    2aae:	bd30      	pop	{r4, r5, pc}
    2ab0:	00f00c0e 	.word	0x00f00c0e
    2ab4:	00f00c37 	.word	0x00f00c37

00002ab8 <nrf_cc310_platform_init>:
    2ab8:	b510      	push	{r4, lr}
    2aba:	4c0c      	ldr	r4, [pc, #48]	; (2aec <nrf_cc310_platform_init+0x34>)
    2abc:	6823      	ldr	r3, [r4, #0]
    2abe:	b113      	cbz	r3, 2ac6 <nrf_cc310_platform_init+0xe>
    2ac0:	4b0b      	ldr	r3, [pc, #44]	; (2af0 <nrf_cc310_platform_init+0x38>)
    2ac2:	681b      	ldr	r3, [r3, #0]
    2ac4:	b96b      	cbnz	r3, 2ae2 <nrf_cc310_platform_init+0x2a>
    2ac6:	f000 f931 	bl	2d2c <CC_LibInit>
    2aca:	b138      	cbz	r0, 2adc <nrf_cc310_platform_init+0x24>
    2acc:	3801      	subs	r0, #1
    2ace:	2806      	cmp	r0, #6
    2ad0:	bf96      	itet	ls
    2ad2:	4b08      	ldrls	r3, [pc, #32]	; (2af4 <nrf_cc310_platform_init+0x3c>)
    2ad4:	4808      	ldrhi	r0, [pc, #32]	; (2af8 <nrf_cc310_platform_init+0x40>)
    2ad6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    2ada:	bd10      	pop	{r4, pc}
    2adc:	2201      	movs	r2, #1
    2ade:	4b04      	ldr	r3, [pc, #16]	; (2af0 <nrf_cc310_platform_init+0x38>)
    2ae0:	601a      	str	r2, [r3, #0]
    2ae2:	2301      	movs	r3, #1
    2ae4:	2000      	movs	r0, #0
    2ae6:	6023      	str	r3, [r4, #0]
    2ae8:	bd10      	pop	{r4, pc}
    2aea:	bf00      	nop
    2aec:	20000674 	.word	0x20000674
    2af0:	20000678 	.word	0x20000678
    2af4:	00004550 	.word	0x00004550
    2af8:	ffff8ffe 	.word	0xffff8ffe

00002afc <nrf_cc310_platform_init_no_rng>:
    2afc:	b510      	push	{r4, lr}
    2afe:	4c09      	ldr	r4, [pc, #36]	; (2b24 <nrf_cc310_platform_init_no_rng+0x28>)
    2b00:	6823      	ldr	r3, [r4, #0]
    2b02:	b11b      	cbz	r3, 2b0c <nrf_cc310_platform_init_no_rng+0x10>
    2b04:	2301      	movs	r3, #1
    2b06:	2000      	movs	r0, #0
    2b08:	6023      	str	r3, [r4, #0]
    2b0a:	bd10      	pop	{r4, pc}
    2b0c:	f000 f87c 	bl	2c08 <CC_LibInitNoRng>
    2b10:	2800      	cmp	r0, #0
    2b12:	d0f7      	beq.n	2b04 <nrf_cc310_platform_init_no_rng+0x8>
    2b14:	3801      	subs	r0, #1
    2b16:	2806      	cmp	r0, #6
    2b18:	bf96      	itet	ls
    2b1a:	4b03      	ldrls	r3, [pc, #12]	; (2b28 <nrf_cc310_platform_init_no_rng+0x2c>)
    2b1c:	4803      	ldrhi	r0, [pc, #12]	; (2b2c <nrf_cc310_platform_init_no_rng+0x30>)
    2b1e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    2b22:	bd10      	pop	{r4, pc}
    2b24:	20000674 	.word	0x20000674
    2b28:	00004550 	.word	0x00004550
    2b2c:	ffff8ffe 	.word	0xffff8ffe

00002b30 <nrf_cc310_platform_abort>:
    2b30:	f3bf 8f4f 	dsb	sy
    2b34:	4905      	ldr	r1, [pc, #20]	; (2b4c <nrf_cc310_platform_abort+0x1c>)
    2b36:	4b06      	ldr	r3, [pc, #24]	; (2b50 <nrf_cc310_platform_abort+0x20>)
    2b38:	68ca      	ldr	r2, [r1, #12]
    2b3a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2b3e:	4313      	orrs	r3, r2
    2b40:	60cb      	str	r3, [r1, #12]
    2b42:	f3bf 8f4f 	dsb	sy
    2b46:	bf00      	nop
    2b48:	e7fd      	b.n	2b46 <nrf_cc310_platform_abort+0x16>
    2b4a:	bf00      	nop
    2b4c:	e000ed00 	.word	0xe000ed00
    2b50:	05fa0004 	.word	0x05fa0004

00002b54 <CC_PalAbort>:
    2b54:	4b01      	ldr	r3, [pc, #4]	; (2b5c <CC_PalAbort+0x8>)
    2b56:	685b      	ldr	r3, [r3, #4]
    2b58:	4718      	bx	r3
    2b5a:	bf00      	nop
    2b5c:	20001428 	.word	0x20001428

00002b60 <nrf_cc310_platform_set_abort>:
    2b60:	4b02      	ldr	r3, [pc, #8]	; (2b6c <nrf_cc310_platform_set_abort+0xc>)
    2b62:	e9d0 1200 	ldrd	r1, r2, [r0]
    2b66:	e9c3 1200 	strd	r1, r2, [r3]
    2b6a:	4770      	bx	lr
    2b6c:	20001428 	.word	0x20001428

00002b70 <mutex_free>:
    2b70:	4770      	bx	lr
    2b72:	bf00      	nop

00002b74 <mutex_unlock>:
    2b74:	b510      	push	{r4, lr}
    2b76:	4604      	mov	r4, r0
    2b78:	b120      	cbz	r0, 2b84 <mutex_unlock+0x10>
    2b7a:	f3bf 8f5f 	dmb	sy
    2b7e:	2000      	movs	r0, #0
    2b80:	6020      	str	r0, [r4, #0]
    2b82:	bd10      	pop	{r4, pc}
    2b84:	4803      	ldr	r0, [pc, #12]	; (2b94 <mutex_unlock+0x20>)
    2b86:	f7ff ffe5 	bl	2b54 <CC_PalAbort>
    2b8a:	f3bf 8f5f 	dmb	sy
    2b8e:	2000      	movs	r0, #0
    2b90:	6020      	str	r0, [r4, #0]
    2b92:	bd10      	pop	{r4, pc}
    2b94:	00004590 	.word	0x00004590

00002b98 <mutex_init>:
    2b98:	b510      	push	{r4, lr}
    2b9a:	4604      	mov	r4, r0
    2b9c:	b110      	cbz	r0, 2ba4 <mutex_init+0xc>
    2b9e:	2300      	movs	r3, #0
    2ba0:	6023      	str	r3, [r4, #0]
    2ba2:	bd10      	pop	{r4, pc}
    2ba4:	4802      	ldr	r0, [pc, #8]	; (2bb0 <mutex_init+0x18>)
    2ba6:	f7ff ffd5 	bl	2b54 <CC_PalAbort>
    2baa:	2300      	movs	r3, #0
    2bac:	6023      	str	r3, [r4, #0]
    2bae:	bd10      	pop	{r4, pc}
    2bb0:	0000456c 	.word	0x0000456c

00002bb4 <mutex_lock>:
    2bb4:	b150      	cbz	r0, 2bcc <mutex_lock+0x18>
    2bb6:	2201      	movs	r2, #1
    2bb8:	e8d0 3fef 	ldaex	r3, [r0]
    2bbc:	e8c0 2fe1 	stlex	r1, r2, [r0]
    2bc0:	2900      	cmp	r1, #0
    2bc2:	d1f9      	bne.n	2bb8 <mutex_lock+0x4>
    2bc4:	2b01      	cmp	r3, #1
    2bc6:	d0f7      	beq.n	2bb8 <mutex_lock+0x4>
    2bc8:	f3bf 8f5f 	dmb	sy
    2bcc:	2000      	movs	r0, #0
    2bce:	4770      	bx	lr

00002bd0 <nrf_cc310_platform_set_mutexes>:
    2bd0:	b470      	push	{r4, r5, r6}
    2bd2:	4b0b      	ldr	r3, [pc, #44]	; (2c00 <nrf_cc310_platform_set_mutexes+0x30>)
    2bd4:	6806      	ldr	r6, [r0, #0]
    2bd6:	68c2      	ldr	r2, [r0, #12]
    2bd8:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    2bdc:	e9c3 4202 	strd	r4, r2, [r3, #8]
    2be0:	e9c3 6500 	strd	r6, r5, [r3]
    2be4:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
    2be8:	680e      	ldr	r6, [r1, #0]
    2bea:	4b06      	ldr	r3, [pc, #24]	; (2c04 <nrf_cc310_platform_set_mutexes+0x34>)
    2bec:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    2bf0:	e9c3 6500 	strd	r6, r5, [r3]
    2bf4:	e9c3 4002 	strd	r4, r0, [r3, #8]
    2bf8:	611a      	str	r2, [r3, #16]
    2bfa:	bc70      	pop	{r4, r5, r6}
    2bfc:	4770      	bx	lr
    2bfe:	bf00      	nop
    2c00:	20001430 	.word	0x20001430
    2c04:	20001440 	.word	0x20001440

00002c08 <CC_LibInitNoRng>:
    2c08:	b510      	push	{r4, lr}
    2c0a:	f7ff fe7d 	bl	2908 <CC_HalInit>
    2c0e:	b970      	cbnz	r0, 2c2e <CC_LibInitNoRng+0x26>
    2c10:	f7ff fdb6 	bl	2780 <CC_PalInit>
    2c14:	b980      	cbnz	r0, 2c38 <CC_LibInitNoRng+0x30>
    2c16:	f7ff fe43 	bl	28a0 <CC_PalPowerSaveModeSelect>
    2c1a:	b980      	cbnz	r0, 2c3e <CC_LibInitNoRng+0x36>
    2c1c:	4b11      	ldr	r3, [pc, #68]	; (2c64 <CC_LibInitNoRng+0x5c>)
    2c1e:	681b      	ldr	r3, [r3, #0]
    2c20:	0e1b      	lsrs	r3, r3, #24
    2c22:	2bf0      	cmp	r3, #240	; 0xf0
    2c24:	d00d      	beq.n	2c42 <CC_LibInitNoRng+0x3a>
    2c26:	2406      	movs	r4, #6
    2c28:	f7ff fe70 	bl	290c <CC_HalTerminate>
    2c2c:	e000      	b.n	2c30 <CC_LibInitNoRng+0x28>
    2c2e:	2403      	movs	r4, #3
    2c30:	f7ff fdd4 	bl	27dc <CC_PalTerminate>
    2c34:	4620      	mov	r0, r4
    2c36:	bd10      	pop	{r4, pc}
    2c38:	2404      	movs	r4, #4
    2c3a:	4620      	mov	r0, r4
    2c3c:	bd10      	pop	{r4, pc}
    2c3e:	2400      	movs	r4, #0
    2c40:	e7f2      	b.n	2c28 <CC_LibInitNoRng+0x20>
    2c42:	4a09      	ldr	r2, [pc, #36]	; (2c68 <CC_LibInitNoRng+0x60>)
    2c44:	4b09      	ldr	r3, [pc, #36]	; (2c6c <CC_LibInitNoRng+0x64>)
    2c46:	6812      	ldr	r2, [r2, #0]
    2c48:	429a      	cmp	r2, r3
    2c4a:	d001      	beq.n	2c50 <CC_LibInitNoRng+0x48>
    2c4c:	2407      	movs	r4, #7
    2c4e:	e7eb      	b.n	2c28 <CC_LibInitNoRng+0x20>
    2c50:	2001      	movs	r0, #1
    2c52:	f7ff fe25 	bl	28a0 <CC_PalPowerSaveModeSelect>
    2c56:	2800      	cmp	r0, #0
    2c58:	d1f1      	bne.n	2c3e <CC_LibInitNoRng+0x36>
    2c5a:	4b05      	ldr	r3, [pc, #20]	; (2c70 <CC_LibInitNoRng+0x68>)
    2c5c:	4604      	mov	r4, r0
    2c5e:	6018      	str	r0, [r3, #0]
    2c60:	e7e8      	b.n	2c34 <CC_LibInitNoRng+0x2c>
    2c62:	bf00      	nop
    2c64:	50841928 	.word	0x50841928
    2c68:	50841a24 	.word	0x50841a24
    2c6c:	20e00000 	.word	0x20e00000
    2c70:	50841a0c 	.word	0x50841a0c

00002c74 <CC_LibInitRngModule>:
    2c74:	b530      	push	{r4, r5, lr}
    2c76:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
    2c7a:	f44f 7208 	mov.w	r2, #544	; 0x220
    2c7e:	2100      	movs	r1, #0
    2c80:	a80c      	add	r0, sp, #48	; 0x30
    2c82:	f001 f80f 	bl	3ca4 <memset>
    2c86:	2300      	movs	r3, #0
    2c88:	a802      	add	r0, sp, #8
    2c8a:	4619      	mov	r1, r3
    2c8c:	2228      	movs	r2, #40	; 0x28
    2c8e:	9301      	str	r3, [sp, #4]
    2c90:	f001 f808 	bl	3ca4 <memset>
    2c94:	a802      	add	r0, sp, #8
    2c96:	f7ff fed1 	bl	2a3c <RNG_PLAT_SetUserRngParameters>
    2c9a:	b118      	cbz	r0, 2ca4 <CC_LibInitRngModule+0x30>
    2c9c:	2005      	movs	r0, #5
    2c9e:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    2ca2:	bd30      	pop	{r4, r5, pc}
    2ca4:	4d1c      	ldr	r5, [pc, #112]	; (2d18 <CC_LibInitRngModule+0xa4>)
    2ca6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2caa:	6828      	ldr	r0, [r5, #0]
    2cac:	f7ff fdc8 	bl	2840 <CC_PalMutexLock>
    2cb0:	4604      	mov	r4, r0
    2cb2:	b9f0      	cbnz	r0, 2cf2 <CC_LibInitRngModule+0x7e>
    2cb4:	2000      	movs	r0, #0
    2cb6:	f7ff fdf3 	bl	28a0 <CC_PalPowerSaveModeSelect>
    2cba:	b9b0      	cbnz	r0, 2cea <CC_LibInitRngModule+0x76>
    2cbc:	aa0c      	add	r2, sp, #48	; 0x30
    2cbe:	a902      	add	r1, sp, #8
    2cc0:	a801      	add	r0, sp, #4
    2cc2:	f000 fbd5 	bl	3470 <LLF_RND_RunTrngStartupTest>
    2cc6:	4604      	mov	r4, r0
    2cc8:	2001      	movs	r0, #1
    2cca:	f7ff fde9 	bl	28a0 <CC_PalPowerSaveModeSelect>
    2cce:	b9f0      	cbnz	r0, 2d0e <CC_LibInitRngModule+0x9a>
    2cd0:	6828      	ldr	r0, [r5, #0]
    2cd2:	f7ff fdbd 	bl	2850 <CC_PalMutexUnlock>
    2cd6:	b110      	cbz	r0, 2cde <CC_LibInitRngModule+0x6a>
    2cd8:	4810      	ldr	r0, [pc, #64]	; (2d1c <CC_LibInitRngModule+0xa8>)
    2cda:	f7ff ff3b 	bl	2b54 <CC_PalAbort>
    2cde:	4620      	mov	r0, r4
    2ce0:	2c00      	cmp	r4, #0
    2ce2:	d1db      	bne.n	2c9c <CC_LibInitRngModule+0x28>
    2ce4:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    2ce8:	bd30      	pop	{r4, r5, pc}
    2cea:	480d      	ldr	r0, [pc, #52]	; (2d20 <CC_LibInitRngModule+0xac>)
    2cec:	f7ff ff32 	bl	2b54 <CC_PalAbort>
    2cf0:	e7e4      	b.n	2cbc <CC_LibInitRngModule+0x48>
    2cf2:	480c      	ldr	r0, [pc, #48]	; (2d24 <CC_LibInitRngModule+0xb0>)
    2cf4:	f7ff ff2e 	bl	2b54 <CC_PalAbort>
    2cf8:	2c01      	cmp	r4, #1
    2cfa:	d1db      	bne.n	2cb4 <CC_LibInitRngModule+0x40>
    2cfc:	6828      	ldr	r0, [r5, #0]
    2cfe:	f7ff fda7 	bl	2850 <CC_PalMutexUnlock>
    2d02:	2800      	cmp	r0, #0
    2d04:	d0ca      	beq.n	2c9c <CC_LibInitRngModule+0x28>
    2d06:	4805      	ldr	r0, [pc, #20]	; (2d1c <CC_LibInitRngModule+0xa8>)
    2d08:	f7ff ff24 	bl	2b54 <CC_PalAbort>
    2d0c:	e7c6      	b.n	2c9c <CC_LibInitRngModule+0x28>
    2d0e:	4806      	ldr	r0, [pc, #24]	; (2d28 <CC_LibInitRngModule+0xb4>)
    2d10:	f7ff ff20 	bl	2b54 <CC_PalAbort>
    2d14:	e7dc      	b.n	2cd0 <CC_LibInitRngModule+0x5c>
    2d16:	bf00      	nop
    2d18:	20001424 	.word	0x20001424
    2d1c:	000045c8 	.word	0x000045c8
    2d20:	000045e0 	.word	0x000045e0
    2d24:	000045b0 	.word	0x000045b0
    2d28:	00004600 	.word	0x00004600

00002d2c <CC_LibInit>:
    2d2c:	b508      	push	{r3, lr}
    2d2e:	f7ff fdeb 	bl	2908 <CC_HalInit>
    2d32:	b118      	cbz	r0, 2d3c <CC_LibInit+0x10>
    2d34:	f7ff fd52 	bl	27dc <CC_PalTerminate>
    2d38:	2003      	movs	r0, #3
    2d3a:	bd08      	pop	{r3, pc}
    2d3c:	f7ff fd20 	bl	2780 <CC_PalInit>
    2d40:	b968      	cbnz	r0, 2d5e <CC_LibInit+0x32>
    2d42:	f7ff fdad 	bl	28a0 <CC_PalPowerSaveModeSelect>
    2d46:	b960      	cbnz	r0, 2d62 <CC_LibInit+0x36>
    2d48:	4b15      	ldr	r3, [pc, #84]	; (2da0 <CC_LibInit+0x74>)
    2d4a:	681b      	ldr	r3, [r3, #0]
    2d4c:	0e1b      	lsrs	r3, r3, #24
    2d4e:	2bf0      	cmp	r3, #240	; 0xf0
    2d50:	d012      	beq.n	2d78 <CC_LibInit+0x4c>
    2d52:	f7ff fddb 	bl	290c <CC_HalTerminate>
    2d56:	f7ff fd41 	bl	27dc <CC_PalTerminate>
    2d5a:	2006      	movs	r0, #6
    2d5c:	bd08      	pop	{r3, pc}
    2d5e:	2004      	movs	r0, #4
    2d60:	bd08      	pop	{r3, pc}
    2d62:	f7ff fdd3 	bl	290c <CC_HalTerminate>
    2d66:	f7ff fd39 	bl	27dc <CC_PalTerminate>
    2d6a:	f7ff ff83 	bl	2c74 <CC_LibInitRngModule>
    2d6e:	2800      	cmp	r0, #0
    2d70:	bf0c      	ite	eq
    2d72:	2000      	moveq	r0, #0
    2d74:	2005      	movne	r0, #5
    2d76:	bd08      	pop	{r3, pc}
    2d78:	4a0a      	ldr	r2, [pc, #40]	; (2da4 <CC_LibInit+0x78>)
    2d7a:	4b0b      	ldr	r3, [pc, #44]	; (2da8 <CC_LibInit+0x7c>)
    2d7c:	6812      	ldr	r2, [r2, #0]
    2d7e:	429a      	cmp	r2, r3
    2d80:	d005      	beq.n	2d8e <CC_LibInit+0x62>
    2d82:	f7ff fdc3 	bl	290c <CC_HalTerminate>
    2d86:	f7ff fd29 	bl	27dc <CC_PalTerminate>
    2d8a:	2007      	movs	r0, #7
    2d8c:	bd08      	pop	{r3, pc}
    2d8e:	2001      	movs	r0, #1
    2d90:	f7ff fd86 	bl	28a0 <CC_PalPowerSaveModeSelect>
    2d94:	2800      	cmp	r0, #0
    2d96:	d1e4      	bne.n	2d62 <CC_LibInit+0x36>
    2d98:	4b04      	ldr	r3, [pc, #16]	; (2dac <CC_LibInit+0x80>)
    2d9a:	6018      	str	r0, [r3, #0]
    2d9c:	e7e5      	b.n	2d6a <CC_LibInit+0x3e>
    2d9e:	bf00      	nop
    2da0:	50841928 	.word	0x50841928
    2da4:	50841a24 	.word	0x50841a24
    2da8:	20e00000 	.word	0x20e00000
    2dac:	50841a0c 	.word	0x50841a0c

00002db0 <CC_PalTrngParamGet>:
    2db0:	b118      	cbz	r0, 2dba <CC_PalTrngParamGet+0xa>
    2db2:	b111      	cbz	r1, 2dba <CC_PalTrngParamGet+0xa>
    2db4:	680b      	ldr	r3, [r1, #0]
    2db6:	2b1c      	cmp	r3, #28
    2db8:	d001      	beq.n	2dbe <CC_PalTrngParamGet+0xe>
    2dba:	2001      	movs	r0, #1
    2dbc:	4770      	bx	lr
    2dbe:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2dc2:	4a3a      	ldr	r2, [pc, #232]	; (2eac <CC_PalTrngParamGet+0xfc>)
    2dc4:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
    2dc8:	4291      	cmp	r1, r2
    2dca:	d05a      	beq.n	2e82 <CC_PalTrngParamGet+0xd2>
    2dcc:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    2dd0:	3201      	adds	r2, #1
    2dd2:	d056      	beq.n	2e82 <CC_PalTrngParamGet+0xd2>
    2dd4:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    2dd8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2ddc:	6002      	str	r2, [r0, #0]
    2dde:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
    2de2:	4a33      	ldr	r2, [pc, #204]	; (2eb0 <CC_PalTrngParamGet+0x100>)
    2de4:	4291      	cmp	r1, r2
    2de6:	d05e      	beq.n	2ea6 <CC_PalTrngParamGet+0xf6>
    2de8:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    2dec:	3201      	adds	r2, #1
    2dee:	d05a      	beq.n	2ea6 <CC_PalTrngParamGet+0xf6>
    2df0:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    2df4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2df8:	6042      	str	r2, [r0, #4]
    2dfa:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    2dfe:	f512 7f94 	cmn.w	r2, #296	; 0x128
    2e02:	d04d      	beq.n	2ea0 <CC_PalTrngParamGet+0xf0>
    2e04:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    2e08:	3201      	adds	r2, #1
    2e0a:	d049      	beq.n	2ea0 <CC_PalTrngParamGet+0xf0>
    2e0c:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    2e10:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2e14:	6082      	str	r2, [r0, #8]
    2e16:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
    2e1a:	4a26      	ldr	r2, [pc, #152]	; (2eb4 <CC_PalTrngParamGet+0x104>)
    2e1c:	4291      	cmp	r1, r2
    2e1e:	d03c      	beq.n	2e9a <CC_PalTrngParamGet+0xea>
    2e20:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    2e24:	3201      	adds	r2, #1
    2e26:	d038      	beq.n	2e9a <CC_PalTrngParamGet+0xea>
    2e28:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    2e2c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2e30:	60c2      	str	r2, [r0, #12]
    2e32:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    2e36:	3270      	adds	r2, #112	; 0x70
    2e38:	d02d      	beq.n	2e96 <CC_PalTrngParamGet+0xe6>
    2e3a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    2e3e:	3201      	adds	r2, #1
    2e40:	d029      	beq.n	2e96 <CC_PalTrngParamGet+0xe6>
    2e42:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    2e46:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2e4a:	6102      	str	r2, [r0, #16]
    2e4c:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    2e50:	32af      	adds	r2, #175	; 0xaf
    2e52:	d01e      	beq.n	2e92 <CC_PalTrngParamGet+0xe2>
    2e54:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    2e58:	3201      	adds	r2, #1
    2e5a:	d01a      	beq.n	2e92 <CC_PalTrngParamGet+0xe2>
    2e5c:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    2e60:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2e64:	6142      	str	r2, [r0, #20]
    2e66:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
    2e6a:	4a13      	ldr	r2, [pc, #76]	; (2eb8 <CC_PalTrngParamGet+0x108>)
    2e6c:	4291      	cmp	r1, r2
    2e6e:	d00b      	beq.n	2e88 <CC_PalTrngParamGet+0xd8>
    2e70:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
    2e74:	3201      	adds	r2, #1
    2e76:	d007      	beq.n	2e88 <CC_PalTrngParamGet+0xd8>
    2e78:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
    2e7c:	6183      	str	r3, [r0, #24]
    2e7e:	2000      	movs	r0, #0
    2e80:	4770      	bx	lr
    2e82:	f640 02fc 	movw	r2, #2300	; 0x8fc
    2e86:	e7a7      	b.n	2dd8 <CC_PalTrngParamGet+0x28>
    2e88:	f240 3337 	movw	r3, #823	; 0x337
    2e8c:	6183      	str	r3, [r0, #24]
    2e8e:	2000      	movs	r0, #0
    2e90:	4770      	bx	lr
    2e92:	2251      	movs	r2, #81	; 0x51
    2e94:	e7e4      	b.n	2e60 <CC_PalTrngParamGet+0xb0>
    2e96:	2290      	movs	r2, #144	; 0x90
    2e98:	e7d5      	b.n	2e46 <CC_PalTrngParamGet+0x96>
    2e9a:	f642 1204 	movw	r2, #10500	; 0x2904
    2e9e:	e7c5      	b.n	2e2c <CC_PalTrngParamGet+0x7c>
    2ea0:	f640 62d8 	movw	r2, #3800	; 0xed8
    2ea4:	e7b4      	b.n	2e10 <CC_PalTrngParamGet+0x60>
    2ea6:	f242 02d0 	movw	r2, #8400	; 0x20d0
    2eaa:	e7a3      	b.n	2df4 <CC_PalTrngParamGet+0x44>
    2eac:	fffff8fc 	.word	0xfffff8fc
    2eb0:	ffff20d0 	.word	0xffff20d0
    2eb4:	ffff2904 	.word	0xffff2904
    2eb8:	fffff337 	.word	0xfffff337

00002ebc <LLF_RND_AdaptiveProportionTest>:
    2ebc:	b3a8      	cbz	r0, 2f2a <LLF_RND_AdaptiveProportionTest+0x6e>
    2ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ec2:	1e4c      	subs	r4, r1, #1
    2ec4:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
    2ec8:	d22c      	bcs.n	2f24 <LLF_RND_AdaptiveProportionTest+0x68>
    2eca:	b35b      	cbz	r3, 2f24 <LLF_RND_AdaptiveProportionTest+0x68>
    2ecc:	b352      	cbz	r2, 2f24 <LLF_RND_AdaptiveProportionTest+0x68>
    2ece:	f04f 0c00 	mov.w	ip, #0
    2ed2:	00c9      	lsls	r1, r1, #3
    2ed4:	46e6      	mov	lr, ip
    2ed6:	4665      	mov	r5, ip
    2ed8:	4664      	mov	r4, ip
    2eda:	1e4f      	subs	r7, r1, #1
    2edc:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    2ee0:	e00c      	b.n	2efc <LLF_RND_AdaptiveProportionTest+0x40>
    2ee2:	42ab      	cmp	r3, r5
    2ee4:	d016      	beq.n	2f14 <LLF_RND_AdaptiveProportionTest+0x58>
    2ee6:	458e      	cmp	lr, r1
    2ee8:	d101      	bne.n	2eee <LLF_RND_AdaptiveProportionTest+0x32>
    2eea:	f10c 0c01 	add.w	ip, ip, #1
    2eee:	45a8      	cmp	r8, r5
    2ef0:	d016      	beq.n	2f20 <LLF_RND_AdaptiveProportionTest+0x64>
    2ef2:	3401      	adds	r4, #1
    2ef4:	42bc      	cmp	r4, r7
    2ef6:	f105 0501 	add.w	r5, r5, #1
    2efa:	d818      	bhi.n	2f2e <LLF_RND_AdaptiveProportionTest+0x72>
    2efc:	0961      	lsrs	r1, r4, #5
    2efe:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    2f02:	f004 061f 	and.w	r6, r4, #31
    2f06:	40f1      	lsrs	r1, r6
    2f08:	2e1f      	cmp	r6, #31
    2f0a:	bf18      	it	ne
    2f0c:	f001 0101 	andne.w	r1, r1, #1
    2f10:	2c00      	cmp	r4, #0
    2f12:	d1e6      	bne.n	2ee2 <LLF_RND_AdaptiveProportionTest+0x26>
    2f14:	2500      	movs	r5, #0
    2f16:	45a8      	cmp	r8, r5
    2f18:	468e      	mov	lr, r1
    2f1a:	f04f 0c01 	mov.w	ip, #1
    2f1e:	d1e8      	bne.n	2ef2 <LLF_RND_AdaptiveProportionTest+0x36>
    2f20:	4562      	cmp	r2, ip
    2f22:	d2e6      	bcs.n	2ef2 <LLF_RND_AdaptiveProportionTest+0x36>
    2f24:	4803      	ldr	r0, [pc, #12]	; (2f34 <LLF_RND_AdaptiveProportionTest+0x78>)
    2f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f2a:	4802      	ldr	r0, [pc, #8]	; (2f34 <LLF_RND_AdaptiveProportionTest+0x78>)
    2f2c:	4770      	bx	lr
    2f2e:	2000      	movs	r0, #0
    2f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f34:	00f10c37 	.word	0x00f10c37

00002f38 <getTrngSource>:
    2f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f3c:	b08f      	sub	sp, #60	; 0x3c
    2f3e:	460d      	mov	r5, r1
    2f40:	e9dd 4119 	ldrd	r4, r1, [sp, #100]	; 0x64
    2f44:	4683      	mov	fp, r0
    2f46:	2900      	cmp	r1, #0
    2f48:	d157      	bne.n	2ffa <getTrngSource+0xc2>
    2f4a:	6929      	ldr	r1, [r5, #16]
    2f4c:	9103      	str	r1, [sp, #12]
    2f4e:	2100      	movs	r1, #0
    2f50:	601c      	str	r4, [r3, #0]
    2f52:	9b18      	ldr	r3, [sp, #96]	; 0x60
    2f54:	6019      	str	r1, [r3, #0]
    2f56:	2a00      	cmp	r2, #0
    2f58:	f000 8122 	beq.w	31a0 <getTrngSource+0x268>
    2f5c:	4a81      	ldr	r2, [pc, #516]	; (3164 <getTrngSource+0x22c>)
    2f5e:	4b82      	ldr	r3, [pc, #520]	; (3168 <getTrngSource+0x230>)
    2f60:	6811      	ldr	r1, [r2, #0]
    2f62:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2f64:	681b      	ldr	r3, [r3, #0]
    2f66:	429a      	cmp	r2, r3
    2f68:	d157      	bne.n	301a <getTrngSource+0xe2>
    2f6a:	290a      	cmp	r1, #10
    2f6c:	d155      	bne.n	301a <getTrngSource+0xe2>
    2f6e:	f89b 3003 	ldrb.w	r3, [fp, #3]
    2f72:	9306      	str	r3, [sp, #24]
    2f74:	9903      	ldr	r1, [sp, #12]
    2f76:	2304      	movs	r3, #4
    2f78:	4608      	mov	r0, r1
    2f7a:	4a7c      	ldr	r2, [pc, #496]	; (316c <getTrngSource+0x234>)
    2f7c:	9302      	str	r3, [sp, #8]
    2f7e:	fba2 0200 	umull	r0, r2, r2, r0
    2f82:	0892      	lsrs	r2, r2, #2
    2f84:	00cb      	lsls	r3, r1, #3
    2f86:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2f8a:	f104 0008 	add.w	r0, r4, #8
    2f8e:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
    2f92:	3b01      	subs	r3, #1
    2f94:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 3168 <getTrngSource+0x230>
    2f98:	f8df a200 	ldr.w	sl, [pc, #512]	; 319c <getTrngSource+0x264>
    2f9c:	9004      	str	r0, [sp, #16]
    2f9e:	9200      	str	r2, [sp, #0]
    2fa0:	9305      	str	r3, [sp, #20]
    2fa2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    2fa4:	9c03      	ldr	r4, [sp, #12]
    2fa6:	601c      	str	r4, [r3, #0]
    2fa8:	2c00      	cmp	r4, #0
    2faa:	f000 80cc 	beq.w	3146 <getTrngSource+0x20e>
    2fae:	2600      	movs	r6, #0
    2fb0:	9f04      	ldr	r7, [sp, #16]
    2fb2:	f000 faa9 	bl	3508 <LLF_RND_TurnOffTrng>
    2fb6:	2300      	movs	r3, #0
    2fb8:	9307      	str	r3, [sp, #28]
    2fba:	9b06      	ldr	r3, [sp, #24]
    2fbc:	f1bb 0f00 	cmp.w	fp, #0
    2fc0:	d03a      	beq.n	3038 <getTrngSource+0x100>
    2fc2:	2d00      	cmp	r5, #0
    2fc4:	d034      	beq.n	3030 <getTrngSource+0xf8>
    2fc6:	bb53      	cbnz	r3, 301e <getTrngSource+0xe6>
    2fc8:	005b      	lsls	r3, r3, #1
    2fca:	9306      	str	r3, [sp, #24]
    2fcc:	f1bb 0f00 	cmp.w	fp, #0
    2fd0:	d036      	beq.n	3040 <getTrngSource+0x108>
    2fd2:	2d00      	cmp	r5, #0
    2fd4:	d034      	beq.n	3040 <getTrngSource+0x108>
    2fd6:	b1e3      	cbz	r3, 3012 <getTrngSource+0xda>
    2fd8:	a906      	add	r1, sp, #24
    2fda:	4628      	mov	r0, r5
    2fdc:	f000 fa84 	bl	34e8 <LLF_RND_GetFastestRosc>
    2fe0:	2800      	cmp	r0, #0
    2fe2:	f000 817d 	beq.w	32e0 <getTrngSource+0x3a8>
    2fe6:	4b62      	ldr	r3, [pc, #392]	; (3170 <getTrngSource+0x238>)
    2fe8:	4298      	cmp	r0, r3
    2fea:	d012      	beq.n	3012 <getTrngSource+0xda>
    2fec:	9000      	str	r0, [sp, #0]
    2fee:	f000 fa8b 	bl	3508 <LLF_RND_TurnOffTrng>
    2ff2:	9800      	ldr	r0, [sp, #0]
    2ff4:	b00f      	add	sp, #60	; 0x3c
    2ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ffa:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    2ffe:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
    3002:	3001      	adds	r0, #1
    3004:	bf0c      	ite	eq
    3006:	f44f 7104 	moveq.w	r1, #528	; 0x210
    300a:	f8d1 1c0c 	ldrne.w	r1, [r1, #3084]	; 0xc0c
    300e:	9103      	str	r1, [sp, #12]
    3010:	e79d      	b.n	2f4e <getTrngSource+0x16>
    3012:	6a2b      	ldr	r3, [r5, #32]
    3014:	b973      	cbnz	r3, 3034 <getTrngSource+0xfc>
    3016:	4856      	ldr	r0, [pc, #344]	; (3170 <getTrngSource+0x238>)
    3018:	e7e8      	b.n	2fec <getTrngSource+0xb4>
    301a:	4856      	ldr	r0, [pc, #344]	; (3174 <getTrngSource+0x23c>)
    301c:	e7e6      	b.n	2fec <getTrngSource+0xb4>
    301e:	a906      	add	r1, sp, #24
    3020:	4628      	mov	r0, r5
    3022:	f000 fa61 	bl	34e8 <LLF_RND_GetFastestRosc>
    3026:	b168      	cbz	r0, 3044 <getTrngSource+0x10c>
    3028:	4b53      	ldr	r3, [pc, #332]	; (3178 <getTrngSource+0x240>)
    302a:	4298      	cmp	r0, r3
    302c:	d0de      	beq.n	2fec <getTrngSource+0xb4>
    302e:	9b06      	ldr	r3, [sp, #24]
    3030:	2b08      	cmp	r3, #8
    3032:	d1c9      	bne.n	2fc8 <getTrngSource+0x90>
    3034:	4851      	ldr	r0, [pc, #324]	; (317c <getTrngSource+0x244>)
    3036:	e7d9      	b.n	2fec <getTrngSource+0xb4>
    3038:	2b08      	cmp	r3, #8
    303a:	d0fb      	beq.n	3034 <getTrngSource+0xfc>
    303c:	005b      	lsls	r3, r3, #1
    303e:	9306      	str	r3, [sp, #24]
    3040:	484f      	ldr	r0, [pc, #316]	; (3180 <getTrngSource+0x248>)
    3042:	e7d3      	b.n	2fec <getTrngSource+0xb4>
    3044:	4629      	mov	r1, r5
    3046:	9806      	ldr	r0, [sp, #24]
    3048:	f000 fa30 	bl	34ac <LLF_RND_GetRoscSampleCnt>
    304c:	2800      	cmp	r0, #0
    304e:	d1eb      	bne.n	3028 <getTrngSource+0xf0>
    3050:	9b06      	ldr	r3, [sp, #24]
    3052:	2b08      	cmp	r3, #8
    3054:	f000 810e 	beq.w	3274 <getTrngSource+0x33c>
    3058:	2b04      	cmp	r3, #4
    305a:	f000 8131 	beq.w	32c0 <getTrngSource+0x388>
    305e:	f1a3 0302 	sub.w	r3, r3, #2
    3062:	fab3 f383 	clz	r3, r3
    3066:	095b      	lsrs	r3, r3, #5
    3068:	9301      	str	r3, [sp, #4]
    306a:	2301      	movs	r3, #1
    306c:	4619      	mov	r1, r3
    306e:	4a45      	ldr	r2, [pc, #276]	; (3184 <getTrngSource+0x24c>)
    3070:	6013      	str	r3, [r2, #0]
    3072:	f842 3c84 	str.w	r3, [r2, #-132]
    3076:	4b43      	ldr	r3, [pc, #268]	; (3184 <getTrngSource+0x24c>)
    3078:	6019      	str	r1, [r3, #0]
    307a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    307c:	f8c9 3000 	str.w	r3, [r9]
    3080:	f8d9 2000 	ldr.w	r2, [r9]
    3084:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3086:	429a      	cmp	r2, r3
    3088:	d1f5      	bne.n	3076 <getTrngSource+0x13e>
    308a:	f04f 0800 	mov.w	r8, #0
    308e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3092:	f8ca 8000 	str.w	r8, [sl]
    3096:	f7ff fc3b 	bl	2910 <CC_HalClearInterruptBit>
    309a:	4a3b      	ldr	r2, [pc, #236]	; (3188 <getTrngSource+0x250>)
    309c:	4b3b      	ldr	r3, [pc, #236]	; (318c <getTrngSource+0x254>)
    309e:	4640      	mov	r0, r8
    30a0:	601a      	str	r2, [r3, #0]
    30a2:	f7ff fc43 	bl	292c <CC_HalMaskInterrupt>
    30a6:	220a      	movs	r2, #10
    30a8:	9801      	ldr	r0, [sp, #4]
    30aa:	4939      	ldr	r1, [pc, #228]	; (3190 <getTrngSource+0x258>)
    30ac:	4b2d      	ldr	r3, [pc, #180]	; (3164 <getTrngSource+0x22c>)
    30ae:	6008      	str	r0, [r1, #0]
    30b0:	601a      	str	r2, [r3, #0]
    30b2:	692a      	ldr	r2, [r5, #16]
    30b4:	f1a8 3855 	sub.w	r8, r8, #1431655765	; 0x55555555
    30b8:	fba8 1202 	umull	r1, r2, r8, r2
    30bc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    30be:	0912      	lsrs	r2, r2, #4
    30c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    30c4:	03db      	lsls	r3, r3, #15
    30c6:	fb03 f302 	mul.w	r3, r3, r2
    30ca:	4a32      	ldr	r2, [pc, #200]	; (3194 <getTrngSource+0x25c>)
    30cc:	099b      	lsrs	r3, r3, #6
    30ce:	6013      	str	r3, [r2, #0]
    30d0:	2301      	movs	r3, #1
    30d2:	f8ca 3000 	str.w	r3, [sl]
    30d6:	9906      	ldr	r1, [sp, #24]
    30d8:	f8db 2000 	ldr.w	r2, [fp]
    30dc:	020b      	lsls	r3, r1, #8
    30de:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    30e2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    30e6:	4313      	orrs	r3, r2
    30e8:	f8cb 3000 	str.w	r3, [fp]
    30ec:	a807      	add	r0, sp, #28
    30ee:	f000 f9cd 	bl	348c <LLF_RND_WaitRngInterrupt>
    30f2:	2800      	cmp	r0, #0
    30f4:	d198      	bne.n	3028 <getTrngSource+0xf0>
    30f6:	4b28      	ldr	r3, [pc, #160]	; (3198 <getTrngSource+0x260>)
    30f8:	fba8 2804 	umull	r2, r8, r8, r4
    30fc:	681a      	ldr	r2, [r3, #0]
    30fe:	3314      	adds	r3, #20
    3100:	9208      	str	r2, [sp, #32]
    3102:	f853 2c10 	ldr.w	r2, [r3, #-16]
    3106:	ebb6 0f98 	cmp.w	r6, r8, lsr #2
    310a:	9209      	str	r2, [sp, #36]	; 0x24
    310c:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    3110:	920a      	str	r2, [sp, #40]	; 0x28
    3112:	f853 2c08 	ldr.w	r2, [r3, #-8]
    3116:	920b      	str	r2, [sp, #44]	; 0x2c
    3118:	f853 2c04 	ldr.w	r2, [r3, #-4]
    311c:	920c      	str	r2, [sp, #48]	; 0x30
    311e:	681b      	ldr	r3, [r3, #0]
    3120:	930d      	str	r3, [sp, #52]	; 0x34
    3122:	d101      	bne.n	3128 <getTrngSource+0x1f0>
    3124:	9b00      	ldr	r3, [sp, #0]
    3126:	b99b      	cbnz	r3, 3150 <getTrngSource+0x218>
    3128:	4638      	mov	r0, r7
    312a:	2218      	movs	r2, #24
    312c:	a908      	add	r1, sp, #32
    312e:	f7ff fb21 	bl	2774 <CC_PalMemCopyPlat>
    3132:	3c18      	subs	r4, #24
    3134:	3718      	adds	r7, #24
    3136:	3601      	adds	r6, #1
    3138:	2c00      	cmp	r4, #0
    313a:	f47f af3a 	bne.w	2fb2 <getTrngSource+0x7a>
    313e:	9b04      	ldr	r3, [sp, #16]
    3140:	2b00      	cmp	r3, #0
    3142:	f040 809a 	bne.w	327a <getTrngSource+0x342>
    3146:	2300      	movs	r3, #0
    3148:	9a18      	ldr	r2, [sp, #96]	; 0x60
    314a:	6013      	str	r3, [r2, #0]
    314c:	9b06      	ldr	r3, [sp, #24]
    314e:	e76f      	b.n	3030 <getTrngSource+0xf8>
    3150:	461a      	mov	r2, r3
    3152:	4638      	mov	r0, r7
    3154:	a908      	add	r1, sp, #32
    3156:	1ae4      	subs	r4, r4, r3
    3158:	f7ff fb0c 	bl	2774 <CC_PalMemCopyPlat>
    315c:	9b00      	ldr	r3, [sp, #0]
    315e:	441f      	add	r7, r3
    3160:	e7e9      	b.n	3136 <getTrngSource+0x1fe>
    3162:	bf00      	nop
    3164:	50841138 	.word	0x50841138
    3168:	50841130 	.word	0x50841130
    316c:	aaaaaaab 	.word	0xaaaaaaab
    3170:	00f10c31 	.word	0x00f10c31
    3174:	00f10c30 	.word	0x00f10c30
    3178:	00f10c02 	.word	0x00f10c02
    317c:	00f10c32 	.word	0x00f10c32
    3180:	00f10c35 	.word	0x00f10c35
    3184:	508411c4 	.word	0x508411c4
    3188:	0ffffffe 	.word	0x0ffffffe
    318c:	50841100 	.word	0x50841100
    3190:	5084110c 	.word	0x5084110c
    3194:	508411d8 	.word	0x508411d8
    3198:	50841114 	.word	0x50841114
    319c:	5084112c 	.word	0x5084112c
    31a0:	f1bb 0f00 	cmp.w	fp, #0
    31a4:	f43f af4c 	beq.w	3040 <getTrngSource+0x108>
    31a8:	2d00      	cmp	r5, #0
    31aa:	f43f af49 	beq.w	3040 <getTrngSource+0x108>
    31ae:	2301      	movs	r3, #1
    31b0:	a90e      	add	r1, sp, #56	; 0x38
    31b2:	f841 3d20 	str.w	r3, [r1, #-32]!
    31b6:	f8cb 2000 	str.w	r2, [fp]
    31ba:	4628      	mov	r0, r5
    31bc:	f000 f994 	bl	34e8 <LLF_RND_GetFastestRosc>
    31c0:	2800      	cmp	r0, #0
    31c2:	f47f af13 	bne.w	2fec <getTrngSource+0xb4>
    31c6:	4629      	mov	r1, r5
    31c8:	9806      	ldr	r0, [sp, #24]
    31ca:	f000 f96f 	bl	34ac <LLF_RND_GetRoscSampleCnt>
    31ce:	2800      	cmp	r0, #0
    31d0:	f47f af0c 	bne.w	2fec <getTrngSource+0xb4>
    31d4:	9f06      	ldr	r7, [sp, #24]
    31d6:	2f08      	cmp	r7, #8
    31d8:	f000 80eb 	beq.w	33b2 <getTrngSource+0x47a>
    31dc:	2f04      	cmp	r7, #4
    31de:	f000 80ea 	beq.w	33b6 <getTrngSource+0x47e>
    31e2:	f1a7 0702 	sub.w	r7, r7, #2
    31e6:	fab7 f787 	clz	r7, r7
    31ea:	097f      	lsrs	r7, r7, #5
    31ec:	2201      	movs	r2, #1
    31ee:	4616      	mov	r6, r2
    31f0:	4b73      	ldr	r3, [pc, #460]	; (33c0 <getTrngSource+0x488>)
    31f2:	4974      	ldr	r1, [pc, #464]	; (33c4 <getTrngSource+0x48c>)
    31f4:	601a      	str	r2, [r3, #0]
    31f6:	4618      	mov	r0, r3
    31f8:	600a      	str	r2, [r1, #0]
    31fa:	3b94      	subs	r3, #148	; 0x94
    31fc:	6006      	str	r6, [r0, #0]
    31fe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    3200:	601a      	str	r2, [r3, #0]
    3202:	6819      	ldr	r1, [r3, #0]
    3204:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    3206:	4291      	cmp	r1, r2
    3208:	d1f8      	bne.n	31fc <getTrngSource+0x2c4>
    320a:	f04f 0800 	mov.w	r8, #0
    320e:	4b6e      	ldr	r3, [pc, #440]	; (33c8 <getTrngSource+0x490>)
    3210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3214:	f8c3 8000 	str.w	r8, [r3]
    3218:	f7ff fb7a 	bl	2910 <CC_HalClearInterruptBit>
    321c:	4b6b      	ldr	r3, [pc, #428]	; (33cc <getTrngSource+0x494>)
    321e:	4a6c      	ldr	r2, [pc, #432]	; (33d0 <getTrngSource+0x498>)
    3220:	4640      	mov	r0, r8
    3222:	601a      	str	r2, [r3, #0]
    3224:	f7ff fb82 	bl	292c <CC_HalMaskInterrupt>
    3228:	220a      	movs	r2, #10
    322a:	496a      	ldr	r1, [pc, #424]	; (33d4 <getTrngSource+0x49c>)
    322c:	4b6a      	ldr	r3, [pc, #424]	; (33d8 <getTrngSource+0x4a0>)
    322e:	600f      	str	r7, [r1, #0]
    3230:	601a      	str	r2, [r3, #0]
    3232:	991a      	ldr	r1, [sp, #104]	; 0x68
    3234:	692b      	ldr	r3, [r5, #16]
    3236:	2901      	cmp	r1, #1
    3238:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    323a:	f000 80b1 	beq.w	33a0 <getTrngSource+0x468>
    323e:	4967      	ldr	r1, [pc, #412]	; (33dc <getTrngSource+0x4a4>)
    3240:	fba1 1303 	umull	r1, r3, r1, r3
    3244:	091b      	lsrs	r3, r3, #4
    3246:	2101      	movs	r1, #1
    3248:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    324c:	03d2      	lsls	r2, r2, #15
    324e:	fb03 f302 	mul.w	r3, r3, r2
    3252:	4a63      	ldr	r2, [pc, #396]	; (33e0 <getTrngSource+0x4a8>)
    3254:	099b      	lsrs	r3, r3, #6
    3256:	6013      	str	r3, [r2, #0]
    3258:	4b5b      	ldr	r3, [pc, #364]	; (33c8 <getTrngSource+0x490>)
    325a:	6019      	str	r1, [r3, #0]
    325c:	9906      	ldr	r1, [sp, #24]
    325e:	f8db 2000 	ldr.w	r2, [fp]
    3262:	020b      	lsls	r3, r1, #8
    3264:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    3268:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    326c:	4313      	orrs	r3, r2
    326e:	f8cb 3000 	str.w	r3, [fp]
    3272:	e67f      	b.n	2f74 <getTrngSource+0x3c>
    3274:	2303      	movs	r3, #3
    3276:	9301      	str	r3, [sp, #4]
    3278:	e6f7      	b.n	306a <getTrngSource+0x132>
    327a:	9b03      	ldr	r3, [sp, #12]
    327c:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
    3280:	f63f af61 	bhi.w	3146 <getTrngSource+0x20e>
    3284:	e9dd 7c04 	ldrd	r7, ip, [sp, #16]
    3288:	4620      	mov	r0, r4
    328a:	4623      	mov	r3, r4
    328c:	696e      	ldr	r6, [r5, #20]
    328e:	e004      	b.n	329a <getTrngSource+0x362>
    3290:	2001      	movs	r0, #1
    3292:	3301      	adds	r3, #1
    3294:	4563      	cmp	r3, ip
    3296:	4614      	mov	r4, r2
    3298:	d815      	bhi.n	32c6 <getTrngSource+0x38e>
    329a:	095a      	lsrs	r2, r3, #5
    329c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    32a0:	f003 011f 	and.w	r1, r3, #31
    32a4:	40ca      	lsrs	r2, r1
    32a6:	291f      	cmp	r1, #31
    32a8:	bf18      	it	ne
    32aa:	f002 0201 	andne.w	r2, r2, #1
    32ae:	2b00      	cmp	r3, #0
    32b0:	d0ee      	beq.n	3290 <getTrngSource+0x358>
    32b2:	42a2      	cmp	r2, r4
    32b4:	d1ec      	bne.n	3290 <getTrngSource+0x358>
    32b6:	3001      	adds	r0, #1
    32b8:	4286      	cmp	r6, r0
    32ba:	d1ea      	bne.n	3292 <getTrngSource+0x35a>
    32bc:	4849      	ldr	r0, [pc, #292]	; (33e4 <getTrngSource+0x4ac>)
    32be:	e00b      	b.n	32d8 <getTrngSource+0x3a0>
    32c0:	2302      	movs	r3, #2
    32c2:	9301      	str	r3, [sp, #4]
    32c4:	e6d1      	b.n	306a <getTrngSource+0x132>
    32c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    32ca:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
    32ce:	69aa      	ldr	r2, [r5, #24]
    32d0:	f7ff fdf4 	bl	2ebc <LLF_RND_AdaptiveProportionTest>
    32d4:	2800      	cmp	r0, #0
    32d6:	d05d      	beq.n	3394 <getTrngSource+0x45c>
    32d8:	2300      	movs	r3, #0
    32da:	9a18      	ldr	r2, [sp, #96]	; 0x60
    32dc:	6013      	str	r3, [r2, #0]
    32de:	e6a3      	b.n	3028 <getTrngSource+0xf0>
    32e0:	4629      	mov	r1, r5
    32e2:	9806      	ldr	r0, [sp, #24]
    32e4:	f000 f8e2 	bl	34ac <LLF_RND_GetRoscSampleCnt>
    32e8:	2800      	cmp	r0, #0
    32ea:	f47f ae7c 	bne.w	2fe6 <getTrngSource+0xae>
    32ee:	9c06      	ldr	r4, [sp, #24]
    32f0:	2c08      	cmp	r4, #8
    32f2:	d051      	beq.n	3398 <getTrngSource+0x460>
    32f4:	2c04      	cmp	r4, #4
    32f6:	d051      	beq.n	339c <getTrngSource+0x464>
    32f8:	f1a4 0402 	sub.w	r4, r4, #2
    32fc:	fab4 f484 	clz	r4, r4
    3300:	0964      	lsrs	r4, r4, #5
    3302:	2301      	movs	r3, #1
    3304:	461e      	mov	r6, r3
    3306:	4619      	mov	r1, r3
    3308:	4a2d      	ldr	r2, [pc, #180]	; (33c0 <getTrngSource+0x488>)
    330a:	6013      	str	r3, [r2, #0]
    330c:	f842 3c84 	str.w	r3, [r2, #-132]
    3310:	4b2b      	ldr	r3, [pc, #172]	; (33c0 <getTrngSource+0x488>)
    3312:	6019      	str	r1, [r3, #0]
    3314:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3316:	f8c9 3000 	str.w	r3, [r9]
    331a:	f8d9 2000 	ldr.w	r2, [r9]
    331e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3320:	429a      	cmp	r2, r3
    3322:	d1f5      	bne.n	3310 <getTrngSource+0x3d8>
    3324:	2700      	movs	r7, #0
    3326:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    332a:	f8ca 7000 	str.w	r7, [sl]
    332e:	f7ff faef 	bl	2910 <CC_HalClearInterruptBit>
    3332:	4b26      	ldr	r3, [pc, #152]	; (33cc <getTrngSource+0x494>)
    3334:	4a26      	ldr	r2, [pc, #152]	; (33d0 <getTrngSource+0x498>)
    3336:	4638      	mov	r0, r7
    3338:	601a      	str	r2, [r3, #0]
    333a:	f7ff faf7 	bl	292c <CC_HalMaskInterrupt>
    333e:	220a      	movs	r2, #10
    3340:	4924      	ldr	r1, [pc, #144]	; (33d4 <getTrngSource+0x49c>)
    3342:	4b25      	ldr	r3, [pc, #148]	; (33d8 <getTrngSource+0x4a0>)
    3344:	600c      	str	r4, [r1, #0]
    3346:	601a      	str	r2, [r3, #0]
    3348:	692a      	ldr	r2, [r5, #16]
    334a:	4924      	ldr	r1, [pc, #144]	; (33dc <getTrngSource+0x4a4>)
    334c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    334e:	fba1 1202 	umull	r1, r2, r1, r2
    3352:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3356:	0912      	lsrs	r2, r2, #4
    3358:	03db      	lsls	r3, r3, #15
    335a:	fb03 f302 	mul.w	r3, r3, r2
    335e:	4a20      	ldr	r2, [pc, #128]	; (33e0 <getTrngSource+0x4a8>)
    3360:	099b      	lsrs	r3, r3, #6
    3362:	6013      	str	r3, [r2, #0]
    3364:	f8ca 6000 	str.w	r6, [sl]
    3368:	9b06      	ldr	r3, [sp, #24]
    336a:	f8db 1000 	ldr.w	r1, [fp]
    336e:	021a      	lsls	r2, r3, #8
    3370:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
    3374:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
    3378:	431a      	orrs	r2, r3
    337a:	0a13      	lsrs	r3, r2, #8
    337c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    3380:	4313      	orrs	r3, r2
    3382:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3386:	f8cb 3000 	str.w	r3, [fp]
    338a:	9b02      	ldr	r3, [sp, #8]
    338c:	3b01      	subs	r3, #1
    338e:	9302      	str	r3, [sp, #8]
    3390:	f47f ae07 	bne.w	2fa2 <getTrngSource+0x6a>
    3394:	2000      	movs	r0, #0
    3396:	e629      	b.n	2fec <getTrngSource+0xb4>
    3398:	2403      	movs	r4, #3
    339a:	e7b2      	b.n	3302 <getTrngSource+0x3ca>
    339c:	2402      	movs	r4, #2
    339e:	e7b0      	b.n	3302 <getTrngSource+0x3ca>
    33a0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    33a4:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
    33a8:	3101      	adds	r1, #1
    33aa:	d006      	beq.n	33ba <getTrngSource+0x482>
    33ac:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
    33b0:	e745      	b.n	323e <getTrngSource+0x306>
    33b2:	2703      	movs	r7, #3
    33b4:	e71a      	b.n	31ec <getTrngSource+0x2b4>
    33b6:	2702      	movs	r7, #2
    33b8:	e718      	b.n	31ec <getTrngSource+0x2b4>
    33ba:	2316      	movs	r3, #22
    33bc:	e743      	b.n	3246 <getTrngSource+0x30e>
    33be:	bf00      	nop
    33c0:	508411c4 	.word	0x508411c4
    33c4:	50841140 	.word	0x50841140
    33c8:	5084112c 	.word	0x5084112c
    33cc:	50841100 	.word	0x50841100
    33d0:	0ffffffe 	.word	0x0ffffffe
    33d4:	5084110c 	.word	0x5084110c
    33d8:	50841138 	.word	0x50841138
    33dc:	aaaaaaab 	.word	0xaaaaaaab
    33e0:	508411d8 	.word	0x508411d8
    33e4:	00f10c36 	.word	0x00f10c36

000033e8 <LLF_RND_GetTrngSource>:
    33e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    33ec:	4c1b      	ldr	r4, [pc, #108]	; (345c <LLF_RND_GetTrngSource+0x74>)
    33ee:	b085      	sub	sp, #20
    33f0:	4607      	mov	r7, r0
    33f2:	e9dd 560d 	ldrd	r5, r6, [sp, #52]	; 0x34
    33f6:	4688      	mov	r8, r1
    33f8:	6820      	ldr	r0, [r4, #0]
    33fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    33fe:	4691      	mov	r9, r2
    3400:	f7ff fa1e 	bl	2840 <CC_PalMutexLock>
    3404:	bb28      	cbnz	r0, 3452 <LLF_RND_GetTrngSource+0x6a>
    3406:	2000      	movs	r0, #0
    3408:	f7ff fa4a 	bl	28a0 <CC_PalPowerSaveModeSelect>
    340c:	b9e8      	cbnz	r0, 344a <LLF_RND_GetTrngSource+0x62>
    340e:	2300      	movs	r3, #0
    3410:	e9cd 5600 	strd	r5, r6, [sp]
    3414:	9302      	str	r3, [sp, #8]
    3416:	464a      	mov	r2, r9
    3418:	4641      	mov	r1, r8
    341a:	4638      	mov	r0, r7
    341c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    341e:	f7ff fd8b 	bl	2f38 <getTrngSource>
    3422:	4605      	mov	r5, r0
    3424:	2001      	movs	r0, #1
    3426:	f7ff fa3b 	bl	28a0 <CC_PalPowerSaveModeSelect>
    342a:	b950      	cbnz	r0, 3442 <LLF_RND_GetTrngSource+0x5a>
    342c:	6820      	ldr	r0, [r4, #0]
    342e:	f7ff fa0f 	bl	2850 <CC_PalMutexUnlock>
    3432:	b110      	cbz	r0, 343a <LLF_RND_GetTrngSource+0x52>
    3434:	480a      	ldr	r0, [pc, #40]	; (3460 <LLF_RND_GetTrngSource+0x78>)
    3436:	f7ff fb8d 	bl	2b54 <CC_PalAbort>
    343a:	4628      	mov	r0, r5
    343c:	b005      	add	sp, #20
    343e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3442:	4808      	ldr	r0, [pc, #32]	; (3464 <LLF_RND_GetTrngSource+0x7c>)
    3444:	f7ff fb86 	bl	2b54 <CC_PalAbort>
    3448:	e7f0      	b.n	342c <LLF_RND_GetTrngSource+0x44>
    344a:	4807      	ldr	r0, [pc, #28]	; (3468 <LLF_RND_GetTrngSource+0x80>)
    344c:	f7ff fb82 	bl	2b54 <CC_PalAbort>
    3450:	e7dd      	b.n	340e <LLF_RND_GetTrngSource+0x26>
    3452:	4806      	ldr	r0, [pc, #24]	; (346c <LLF_RND_GetTrngSource+0x84>)
    3454:	f7ff fb7e 	bl	2b54 <CC_PalAbort>
    3458:	e7d5      	b.n	3406 <LLF_RND_GetTrngSource+0x1e>
    345a:	bf00      	nop
    345c:	20001424 	.word	0x20001424
    3460:	000045c8 	.word	0x000045c8
    3464:	00004600 	.word	0x00004600
    3468:	000045e0 	.word	0x000045e0
    346c:	000045b0 	.word	0x000045b0

00003470 <LLF_RND_RunTrngStartupTest>:
    3470:	b510      	push	{r4, lr}
    3472:	2401      	movs	r4, #1
    3474:	b086      	sub	sp, #24
    3476:	ab05      	add	r3, sp, #20
    3478:	e9cd 2401 	strd	r2, r4, [sp, #4]
    347c:	9300      	str	r3, [sp, #0]
    347e:	2200      	movs	r2, #0
    3480:	ab04      	add	r3, sp, #16
    3482:	f7ff fd59 	bl	2f38 <getTrngSource>
    3486:	b006      	add	sp, #24
    3488:	bd10      	pop	{r4, pc}
    348a:	bf00      	nop

0000348c <LLF_RND_WaitRngInterrupt>:
    348c:	b508      	push	{r3, lr}
    348e:	4601      	mov	r1, r0
    3490:	f44f 6080 	mov.w	r0, #1024	; 0x400
    3494:	f7ff fa50 	bl	2938 <CC_HalWaitInterruptRND>
    3498:	2300      	movs	r3, #0
    349a:	4902      	ldr	r1, [pc, #8]	; (34a4 <LLF_RND_WaitRngInterrupt+0x18>)
    349c:	4a02      	ldr	r2, [pc, #8]	; (34a8 <LLF_RND_WaitRngInterrupt+0x1c>)
    349e:	600b      	str	r3, [r1, #0]
    34a0:	6013      	str	r3, [r2, #0]
    34a2:	bd08      	pop	{r3, pc}
    34a4:	508411c8 	.word	0x508411c8
    34a8:	5084112c 	.word	0x5084112c

000034ac <LLF_RND_GetRoscSampleCnt>:
    34ac:	3801      	subs	r0, #1
    34ae:	2807      	cmp	r0, #7
    34b0:	d815      	bhi.n	34de <LLF_RND_GetRoscSampleCnt+0x32>
    34b2:	e8df f000 	tbb	[pc, r0]
    34b6:	0c10      	.short	0x0c10
    34b8:	14140814 	.word	0x14140814
    34bc:	0414      	.short	0x0414
    34be:	68cb      	ldr	r3, [r1, #12]
    34c0:	2000      	movs	r0, #0
    34c2:	624b      	str	r3, [r1, #36]	; 0x24
    34c4:	4770      	bx	lr
    34c6:	688b      	ldr	r3, [r1, #8]
    34c8:	2000      	movs	r0, #0
    34ca:	624b      	str	r3, [r1, #36]	; 0x24
    34cc:	4770      	bx	lr
    34ce:	684b      	ldr	r3, [r1, #4]
    34d0:	2000      	movs	r0, #0
    34d2:	624b      	str	r3, [r1, #36]	; 0x24
    34d4:	4770      	bx	lr
    34d6:	680b      	ldr	r3, [r1, #0]
    34d8:	2000      	movs	r0, #0
    34da:	624b      	str	r3, [r1, #36]	; 0x24
    34dc:	4770      	bx	lr
    34de:	4801      	ldr	r0, [pc, #4]	; (34e4 <LLF_RND_GetRoscSampleCnt+0x38>)
    34e0:	4770      	bx	lr
    34e2:	bf00      	nop
    34e4:	00f10c31 	.word	0x00f10c31

000034e8 <LLF_RND_GetFastestRosc>:
    34e8:	680b      	ldr	r3, [r1, #0]
    34ea:	e002      	b.n	34f2 <LLF_RND_GetFastestRosc+0xa>
    34ec:	2b08      	cmp	r3, #8
    34ee:	600b      	str	r3, [r1, #0]
    34f0:	d806      	bhi.n	3500 <LLF_RND_GetFastestRosc+0x18>
    34f2:	6a02      	ldr	r2, [r0, #32]
    34f4:	4213      	tst	r3, r2
    34f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
    34fa:	d0f7      	beq.n	34ec <LLF_RND_GetFastestRosc+0x4>
    34fc:	2000      	movs	r0, #0
    34fe:	4770      	bx	lr
    3500:	4800      	ldr	r0, [pc, #0]	; (3504 <LLF_RND_GetFastestRosc+0x1c>)
    3502:	4770      	bx	lr
    3504:	00f10c31 	.word	0x00f10c31

00003508 <LLF_RND_TurnOffTrng>:
    3508:	2300      	movs	r3, #0
    350a:	4904      	ldr	r1, [pc, #16]	; (351c <LLF_RND_TurnOffTrng+0x14>)
    350c:	4a04      	ldr	r2, [pc, #16]	; (3520 <LLF_RND_TurnOffTrng+0x18>)
    350e:	600b      	str	r3, [r1, #0]
    3510:	f44f 6080 	mov.w	r0, #1024	; 0x400
    3514:	6013      	str	r3, [r2, #0]
    3516:	f7ff b9fb 	b.w	2910 <CC_HalClearInterruptBit>
    351a:	bf00      	nop
    351c:	5084112c 	.word	0x5084112c
    3520:	508411c4 	.word	0x508411c4

00003524 <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
    3524:	b508      	push	{r3, lr}
	spm_config();
    3526:	f7fd fa61 	bl	9ec <spm_config>
	spm_jump();
}
    352a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
    352e:	f7fd b9f3 	b.w	918 <spm_jump>

00003532 <z_sys_mem_pool_base_init>:
{
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);

	p->max_inline_level = -1;
    3532:	23ff      	movs	r3, #255	; 0xff
{
    3534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    3538:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
    353a:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    353c:	4632      	mov	r2, r6

	for (i = 0; i < p->n_levels; i++) {
    353e:	2300      	movs	r3, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
    3540:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    3544:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    3546:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    3548:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
    354c:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    3550:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
    3552:	4598      	cmp	r8, r3
    3554:	dc05      	bgt.n	3562 <z_sys_mem_pool_base_init+0x30>
    3556:	2300      	movs	r3, #0
		}

		sz = WB_DN(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
    3558:	4619      	mov	r1, r3
    355a:	428f      	cmp	r7, r1
    355c:	dc20      	bgt.n	35a0 <z_sys_mem_pool_base_init+0x6e>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
	}
}
    355e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
    3562:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
    3566:	fb09 fe03 	mul.w	lr, r9, r3
    356a:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
    356e:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
    3570:	eb0a 040e 	add.w	r4, sl, lr
    3574:	f104 0b04 	add.w	fp, r4, #4
    3578:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
    357c:	d805      	bhi.n	358a <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
    357e:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
    3580:	0892      	lsrs	r2, r2, #2
    3582:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
    3586:	3301      	adds	r3, #1
    3588:	e7e3      	b.n	3552 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
    358a:	f115 041f 	adds.w	r4, r5, #31
    358e:	bf48      	it	mi
    3590:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
    3594:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
    3596:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
    359a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    359e:	e7ef      	b.n	3580 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
    35a0:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
    35a2:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
    35a4:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
    35a8:	18ec      	adds	r4, r5, r3
	node->next = list;
    35aa:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
    35ae:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
    35b0:	3101      	adds	r1, #1
    35b2:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
    35b4:	6895      	ldr	r5, [r2, #8]
    35b6:	4433      	add	r3, r6
    35b8:	602c      	str	r4, [r5, #0]
	list->tail = node;
    35ba:	6094      	str	r4, [r2, #8]
    35bc:	e7cd      	b.n	355a <z_sys_mem_pool_base_init+0x28>

000035be <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    35be:	4604      	mov	r4, r0
    35c0:	b508      	push	{r3, lr}
    35c2:	4608      	mov	r0, r1
    35c4:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    35c6:	461a      	mov	r2, r3
    35c8:	47a0      	blx	r4
	return z_impl_k_current_get();
    35ca:	f7fe ff51 	bl	2470 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    35ce:	f7fd fed9 	bl	1384 <z_impl_k_thread_abort>

000035d2 <arch_printk_char_out>:
}
    35d2:	2000      	movs	r0, #0
    35d4:	4770      	bx	lr

000035d6 <print_err>:
{
    35d6:	b570      	push	{r4, r5, r6, lr}
    35d8:	460d      	mov	r5, r1
    35da:	4604      	mov	r4, r0
	out('E', ctx);
    35dc:	2045      	movs	r0, #69	; 0x45
    35de:	47a0      	blx	r4
	out('R', ctx);
    35e0:	4629      	mov	r1, r5
    35e2:	2052      	movs	r0, #82	; 0x52
    35e4:	47a0      	blx	r4
	out('R', ctx);
    35e6:	4629      	mov	r1, r5
    35e8:	4623      	mov	r3, r4
}
    35ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    35ee:	2052      	movs	r0, #82	; 0x52
    35f0:	4718      	bx	r3

000035f2 <z_vprintk>:
{
    35f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    35f6:	f04f 0800 	mov.w	r8, #0
{
    35fa:	4606      	mov	r6, r0
    35fc:	460f      	mov	r7, r1
	int min_width = -1;
    35fe:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    3602:	46c1      	mov	r9, r8
{
    3604:	b08b      	sub	sp, #44	; 0x2c
    3606:	461c      	mov	r4, r3
	while (*fmt) {
    3608:	1e53      	subs	r3, r2, #1
    360a:	9302      	str	r3, [sp, #8]
			might_format = 0;
    360c:	2500      	movs	r5, #0
					break;
    360e:	e005      	b.n	361c <z_vprintk+0x2a>
		if (!might_format) {
    3610:	b96d      	cbnz	r5, 362e <z_vprintk+0x3c>
			if (*fmt != '%') {
    3612:	2825      	cmp	r0, #37	; 0x25
    3614:	f000 814f 	beq.w	38b6 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
    3618:	4639      	mov	r1, r7
    361a:	47b0      	blx	r6
	while (*fmt) {
    361c:	9b02      	ldr	r3, [sp, #8]
    361e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    3622:	9302      	str	r3, [sp, #8]
    3624:	2800      	cmp	r0, #0
    3626:	d1f3      	bne.n	3610 <z_vprintk+0x1e>
}
    3628:	b00b      	add	sp, #44	; 0x2c
    362a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    362e:	2864      	cmp	r0, #100	; 0x64
    3630:	d06e      	beq.n	3710 <z_vprintk+0x11e>
    3632:	d81a      	bhi.n	366a <z_vprintk+0x78>
    3634:	2839      	cmp	r0, #57	; 0x39
    3636:	d80a      	bhi.n	364e <z_vprintk+0x5c>
    3638:	2831      	cmp	r0, #49	; 0x31
    363a:	d260      	bcs.n	36fe <z_vprintk+0x10c>
    363c:	282d      	cmp	r0, #45	; 0x2d
    363e:	f000 8140 	beq.w	38c2 <z_vprintk+0x2d0>
    3642:	2830      	cmp	r0, #48	; 0x30
    3644:	d04c      	beq.n	36e0 <z_vprintk+0xee>
    3646:	2825      	cmp	r0, #37	; 0x25
    3648:	d107      	bne.n	365a <z_vprintk+0x68>
				out((int)'%', ctx);
    364a:	4639      	mov	r1, r7
    364c:	e00b      	b.n	3666 <z_vprintk+0x74>
			switch (*fmt) {
    364e:	2858      	cmp	r0, #88	; 0x58
    3650:	f000 80bb 	beq.w	37ca <z_vprintk+0x1d8>
    3654:	2863      	cmp	r0, #99	; 0x63
    3656:	f000 812a 	beq.w	38ae <z_vprintk+0x2bc>
					out((int)'%', ctx);
    365a:	4639      	mov	r1, r7
    365c:	2025      	movs	r0, #37	; 0x25
    365e:	47b0      	blx	r6
					out((int)*fmt, ctx);
    3660:	4639      	mov	r1, r7
    3662:	9b02      	ldr	r3, [sp, #8]
    3664:	7818      	ldrb	r0, [r3, #0]
    3666:	47b0      	blx	r6
    3668:	e7d0      	b.n	360c <z_vprintk+0x1a>
			switch (*fmt) {
    366a:	2870      	cmp	r0, #112	; 0x70
    366c:	f000 80a3 	beq.w	37b6 <z_vprintk+0x1c4>
    3670:	d811      	bhi.n	3696 <z_vprintk+0xa4>
    3672:	2869      	cmp	r0, #105	; 0x69
    3674:	d04c      	beq.n	3710 <z_vprintk+0x11e>
    3676:	286c      	cmp	r0, #108	; 0x6c
    3678:	d105      	bne.n	3686 <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
    367a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    367e:	d12a      	bne.n	36d6 <z_vprintk+0xe4>
					length_mod = 'L';
    3680:	f04f 084c 	mov.w	r8, #76	; 0x4c
    3684:	e7ca      	b.n	361c <z_vprintk+0x2a>
			switch (*fmt) {
    3686:	2868      	cmp	r0, #104	; 0x68
    3688:	d1e7      	bne.n	365a <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
    368a:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
    368e:	d122      	bne.n	36d6 <z_vprintk+0xe4>
					length_mod = 'H';
    3690:	f04f 0848 	mov.w	r8, #72	; 0x48
    3694:	e7c2      	b.n	361c <z_vprintk+0x2a>
			switch (*fmt) {
    3696:	2875      	cmp	r0, #117	; 0x75
    3698:	d071      	beq.n	377e <z_vprintk+0x18c>
    369a:	d818      	bhi.n	36ce <z_vprintk+0xdc>
    369c:	2873      	cmp	r0, #115	; 0x73
    369e:	d1dc      	bne.n	365a <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
    36a0:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
    36a4:	46ab      	mov	fp, r5
    36a6:	465b      	mov	r3, fp
    36a8:	f81b 0b01 	ldrb.w	r0, [fp], #1
    36ac:	2800      	cmp	r0, #0
    36ae:	f040 80fb 	bne.w	38a8 <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
    36b2:	f1b9 0f03 	cmp.w	r9, #3
    36b6:	f040 810a 	bne.w	38ce <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
    36ba:	1b5d      	subs	r5, r3, r5
    36bc:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
    36c0:	2d00      	cmp	r5, #0
    36c2:	dda3      	ble.n	360c <z_vprintk+0x1a>
						out(' ', ctx);
    36c4:	4639      	mov	r1, r7
    36c6:	2020      	movs	r0, #32
    36c8:	47b0      	blx	r6
    36ca:	3d01      	subs	r5, #1
    36cc:	e7f8      	b.n	36c0 <z_vprintk+0xce>
			switch (*fmt) {
    36ce:	2878      	cmp	r0, #120	; 0x78
    36d0:	d07b      	beq.n	37ca <z_vprintk+0x1d8>
    36d2:	287a      	cmp	r0, #122	; 0x7a
    36d4:	d1c1      	bne.n	365a <z_vprintk+0x68>
				} else if (length_mod == 0) {
    36d6:	f1b8 0f00 	cmp.w	r8, #0
    36da:	d1be      	bne.n	365a <z_vprintk+0x68>
    36dc:	4680      	mov	r8, r0
    36de:	e79d      	b.n	361c <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
    36e0:	f1ba 0f00 	cmp.w	sl, #0
    36e4:	da0e      	bge.n	3704 <z_vprintk+0x112>
    36e6:	f1b9 0f00 	cmp.w	r9, #0
    36ea:	f000 80ed 	beq.w	38c8 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
    36ee:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    36f2:	f1b9 0f00 	cmp.w	r9, #0
    36f6:	bf08      	it	eq
    36f8:	f04f 0902 	moveq.w	r9, #2
    36fc:	e78e      	b.n	361c <z_vprintk+0x2a>
				if (min_width < 0) {
    36fe:	f1ba 0f00 	cmp.w	sl, #0
    3702:	dbf4      	blt.n	36ee <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
    3704:	230a      	movs	r3, #10
    3706:	fb03 0a0a 	mla	sl, r3, sl, r0
    370a:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    370e:	e7f0      	b.n	36f2 <z_vprintk+0x100>
				if (length_mod == 'z') {
    3710:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    3714:	d102      	bne.n	371c <z_vprintk+0x12a>
					d = va_arg(ap, int);
    3716:	f854 5b04 	ldr.w	r5, [r4], #4
    371a:	e01f      	b.n	375c <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
    371c:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    3720:	d0f9      	beq.n	3716 <z_vprintk+0x124>
				} else if (length_mod == 'L') {
    3722:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    3726:	d1f6      	bne.n	3716 <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
    3728:	3407      	adds	r4, #7
    372a:	f024 0407 	bic.w	r4, r4, #7
    372e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
    3732:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
    3736:	9106      	str	r1, [sp, #24]
    3738:	f143 0100 	adc.w	r1, r3, #0
    373c:	9107      	str	r1, [sp, #28]
    373e:	2100      	movs	r1, #0
    3740:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
    3744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3748:	4561      	cmp	r1, ip
    374a:	bf08      	it	eq
    374c:	4558      	cmpeq	r0, fp
    374e:	d204      	bcs.n	375a <z_vprintk+0x168>
						print_err(out, ctx);
    3750:	4639      	mov	r1, r7
    3752:	4630      	mov	r0, r6
    3754:	f7ff ff3f 	bl	35d6 <print_err>
						break;
    3758:	e758      	b.n	360c <z_vprintk+0x1a>
					d = lld;
    375a:	4615      	mov	r5, r2
				if (d < 0) {
    375c:	2d00      	cmp	r5, #0
    375e:	da05      	bge.n	376c <z_vprintk+0x17a>
					out((int)'-', ctx);
    3760:	4639      	mov	r1, r7
    3762:	202d      	movs	r0, #45	; 0x2d
    3764:	47b0      	blx	r6
					d = -d;
    3766:	426d      	negs	r5, r5
					min_width--;
    3768:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    376c:	464b      	mov	r3, r9
    376e:	462a      	mov	r2, r5
    3770:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
    3774:	4639      	mov	r1, r7
    3776:	4630      	mov	r0, r6
    3778:	f7fc ff06 	bl	588 <_printk_dec_ulong>
				break;
    377c:	e746      	b.n	360c <z_vprintk+0x1a>
				if (length_mod == 'z') {
    377e:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    3782:	d102      	bne.n	378a <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
    3784:	f854 2b04 	ldr.w	r2, [r4], #4
    3788:	e011      	b.n	37ae <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
    378a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    378e:	d0f9      	beq.n	3784 <z_vprintk+0x192>
				} else if (length_mod == 'L') {
    3790:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    3794:	d1f6      	bne.n	3784 <z_vprintk+0x192>
					if (llu > ~0UL) {
    3796:	2100      	movs	r1, #0
    3798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
    379c:	3407      	adds	r4, #7
    379e:	f024 0407 	bic.w	r4, r4, #7
    37a2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
    37a6:	4299      	cmp	r1, r3
    37a8:	bf08      	it	eq
    37aa:	4290      	cmpeq	r0, r2
    37ac:	d3d0      	bcc.n	3750 <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
    37ae:	f8cd a000 	str.w	sl, [sp]
    37b2:	464b      	mov	r3, r9
    37b4:	e7de      	b.n	3774 <z_vprintk+0x182>
				out('0', ctx);
    37b6:	4639      	mov	r1, r7
    37b8:	2030      	movs	r0, #48	; 0x30
    37ba:	47b0      	blx	r6
				out('x', ctx);
    37bc:	4639      	mov	r1, r7
    37be:	2078      	movs	r0, #120	; 0x78
    37c0:	47b0      	blx	r6
					min_width = 8;
    37c2:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
    37c6:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
    37ca:	9b02      	ldr	r3, [sp, #8]
    37cc:	781b      	ldrb	r3, [r3, #0]
    37ce:	2b70      	cmp	r3, #112	; 0x70
    37d0:	d104      	bne.n	37dc <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
    37d2:	f854 3b04 	ldr.w	r3, [r4], #4
    37d6:	9304      	str	r3, [sp, #16]
    37d8:	2300      	movs	r3, #0
    37da:	e00d      	b.n	37f8 <z_vprintk+0x206>
				} else if (length_mod == 'l') {
    37dc:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    37e0:	d0f7      	beq.n	37d2 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
    37e2:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    37e6:	d1f4      	bne.n	37d2 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
    37e8:	3407      	adds	r4, #7
    37ea:	f024 0307 	bic.w	r3, r4, #7
    37ee:	461c      	mov	r4, r3
    37f0:	f854 2b08 	ldr.w	r2, [r4], #8
    37f4:	685b      	ldr	r3, [r3, #4]
    37f6:	9204      	str	r2, [sp, #16]
	int digits = 0;
    37f8:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
    37fa:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
    37fc:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
    3800:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
    3802:	9105      	str	r1, [sp, #20]
		shift -= 4;
    3804:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
    3808:	9804      	ldr	r0, [sp, #16]
    380a:	f1cb 0c20 	rsb	ip, fp, #32
    380e:	f1ab 0120 	sub.w	r1, fp, #32
    3812:	fa20 f00b 	lsr.w	r0, r0, fp
    3816:	fa03 fc0c 	lsl.w	ip, r3, ip
    381a:	ea40 000c 	orr.w	r0, r0, ip
    381e:	fa23 f101 	lsr.w	r1, r3, r1
    3822:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    3824:	f010 000f 	ands.w	r0, r0, #15
    3828:	d106      	bne.n	3838 <z_vprintk+0x246>
    382a:	9905      	ldr	r1, [sp, #20]
    382c:	b911      	cbnz	r1, 3834 <z_vprintk+0x242>
    382e:	f1bb 0f00 	cmp.w	fp, #0
    3832:	d122      	bne.n	387a <z_vprintk+0x288>
			nibble += nibble > 9 ? 87 : 48;
    3834:	2130      	movs	r1, #48	; 0x30
    3836:	e003      	b.n	3840 <z_vprintk+0x24e>
    3838:	2809      	cmp	r0, #9
    383a:	bf8c      	ite	hi
    383c:	2157      	movhi	r1, #87	; 0x57
    383e:	2130      	movls	r1, #48	; 0x30
    3840:	4408      	add	r0, r1
			out((int)nibble, ctx);
    3842:	b240      	sxtb	r0, r0
    3844:	4639      	mov	r1, r7
    3846:	9308      	str	r3, [sp, #32]
    3848:	9205      	str	r2, [sp, #20]
    384a:	47b0      	blx	r6
			digits++;
    384c:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
    384e:	9a05      	ldr	r2, [sp, #20]
			digits++;
    3850:	3301      	adds	r3, #1
    3852:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
    3854:	9b08      	ldr	r3, [sp, #32]
    3856:	f1bb 0f00 	cmp.w	fp, #0
    385a:	d123      	bne.n	38a4 <z_vprintk+0x2b2>
	if (padding == PAD_SPACE_AFTER) {
    385c:	f1b9 0f03 	cmp.w	r9, #3
    3860:	f47f aed4 	bne.w	360c <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
    3864:	9b03      	ldr	r3, [sp, #12]
    3866:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
    386a:	2d00      	cmp	r5, #0
    386c:	f77f aece 	ble.w	360c <z_vprintk+0x1a>
			out(' ', ctx);
    3870:	4639      	mov	r1, r7
    3872:	2020      	movs	r0, #32
    3874:	47b0      	blx	r6
    3876:	3d01      	subs	r5, #1
    3878:	e7f7      	b.n	386a <z_vprintk+0x278>
		if (remaining-- <= min_width) {
    387a:	1e51      	subs	r1, r2, #1
    387c:	4592      	cmp	sl, r2
    387e:	9108      	str	r1, [sp, #32]
    3880:	db07      	blt.n	3892 <z_vprintk+0x2a0>
			if (padding == PAD_ZERO_BEFORE) {
    3882:	f1b9 0f01 	cmp.w	r9, #1
    3886:	d106      	bne.n	3896 <z_vprintk+0x2a4>
				out('0', ctx);
    3888:	4639      	mov	r1, r7
    388a:	2030      	movs	r0, #48	; 0x30
    388c:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
    388e:	47b0      	blx	r6
    3890:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
    3892:	9a08      	ldr	r2, [sp, #32]
    3894:	e7b6      	b.n	3804 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
    3896:	f1b9 0f02 	cmp.w	r9, #2
    389a:	d1fa      	bne.n	3892 <z_vprintk+0x2a0>
    389c:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
    389e:	4639      	mov	r1, r7
    38a0:	2020      	movs	r0, #32
    38a2:	e7f4      	b.n	388e <z_vprintk+0x29c>
			found_largest_digit = 1;
    38a4:	9505      	str	r5, [sp, #20]
    38a6:	e7ad      	b.n	3804 <z_vprintk+0x212>
					out((int)(*s++), ctx);
    38a8:	4639      	mov	r1, r7
    38aa:	47b0      	blx	r6
    38ac:	e6fb      	b.n	36a6 <z_vprintk+0xb4>
				out(c, ctx);
    38ae:	4639      	mov	r1, r7
    38b0:	f854 0b04 	ldr.w	r0, [r4], #4
    38b4:	e6d7      	b.n	3666 <z_vprintk+0x74>
				length_mod = 0;
    38b6:	46a8      	mov	r8, r5
				padding = PAD_NONE;
    38b8:	46a9      	mov	r9, r5
				min_width = -1;
    38ba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
    38be:	2501      	movs	r5, #1
    38c0:	e6ac      	b.n	361c <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
    38c2:	f04f 0903 	mov.w	r9, #3
    38c6:	e6a9      	b.n	361c <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
    38c8:	f04f 0901 	mov.w	r9, #1
    38cc:	e6a6      	b.n	361c <z_vprintk+0x2a>
			might_format = 0;
    38ce:	4605      	mov	r5, r0
		++fmt;
    38d0:	e6a4      	b.n	361c <z_vprintk+0x2a>

000038d2 <printk>:
{
    38d2:	b40f      	push	{r0, r1, r2, r3}
    38d4:	b507      	push	{r0, r1, r2, lr}
    38d6:	a904      	add	r1, sp, #16
    38d8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    38dc:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    38de:	f7fc fea5 	bl	62c <vprintk>
}
    38e2:	b003      	add	sp, #12
    38e4:	f85d eb04 	ldr.w	lr, [sp], #4
    38e8:	b004      	add	sp, #16
    38ea:	4770      	bx	lr

000038ec <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    38ec:	4770      	bx	lr

000038ee <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
    38ee:	f7fe b89d 	b.w	1a2c <SystemInit>

000038f2 <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
    38f2:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
    38f4:	7a5a      	ldrb	r2, [r3, #9]
    38f6:	b932      	cbnz	r2, 3906 <get_status+0x14>
	if (data->ref > 0) {
    38f8:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
    38fc:	2800      	cmp	r0, #0
    38fe:	bfcc      	ite	gt
    3900:	2000      	movgt	r0, #0
    3902:	2001      	movle	r0, #1
    3904:	4770      	bx	lr
    3906:	2002      	movs	r0, #2
}
    3908:	4770      	bx	lr

0000390a <clock_stop>:
	const struct nrf_clock_control_config *config =
    390a:	6802      	ldr	r2, [r0, #0]
{
    390c:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
    390e:	6895      	ldr	r5, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
    3910:	6884      	ldr	r4, [r0, #8]
    3912:	f04f 0320 	mov.w	r3, #32
    3916:	f3ef 8611 	mrs	r6, BASEPRI
    391a:	f383 8811 	msr	BASEPRI, r3
    391e:	f3bf 8f6f 	isb	sy
	data->ref--;
    3922:	7a23      	ldrb	r3, [r4, #8]
    3924:	3b01      	subs	r3, #1
    3926:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
    3928:	2b00      	cmp	r3, #0
	data->ref--;
    392a:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
    392c:	d118      	bne.n	3960 <clock_stop+0x56>
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    392e:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
    3932:	686b      	ldr	r3, [r5, #4]
				config->stop_handler(dev) : true;
    3934:	b983      	cbnz	r3, 3958 <clock_stop+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3936:	2201      	movs	r2, #1
    3938:	7aeb      	ldrb	r3, [r5, #11]
    393a:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    393e:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3940:	2200      	movs	r2, #0
    3942:	892b      	ldrh	r3, [r5, #8]
    3944:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    3948:	601a      	str	r2, [r3, #0]
		data->started = false;
    394a:	2000      	movs	r0, #0
    394c:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
    394e:	f386 8811 	msr	BASEPRI, r6
    3952:	f3bf 8f6f 	isb	sy
}
    3956:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
    3958:	4798      	blx	r3
    395a:	2800      	cmp	r0, #0
    395c:	d1eb      	bne.n	3936 <clock_stop+0x2c>
    395e:	e7f4      	b.n	394a <clock_stop+0x40>
	} else if (data->ref < 0) {
    3960:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
    3964:	bfbc      	itt	lt
    3966:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
    3968:	f06f 0044 	mvnlt.w	r0, #68	; 0x44
    396c:	e7ef      	b.n	394e <clock_stop+0x44>

0000396e <clock_async_start>:
{
    396e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
    3970:	6803      	ldr	r3, [r0, #0]
{
    3972:	4606      	mov	r6, r0
    3974:	4614      	mov	r4, r2
	const struct nrf_clock_control_config *config =
    3976:	689f      	ldr	r7, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
    3978:	6885      	ldr	r5, [r0, #8]
	__asm__ volatile(
    397a:	f04f 0320 	mov.w	r3, #32
    397e:	f3ef 8211 	mrs	r2, BASEPRI
    3982:	f383 8811 	msr	BASEPRI, r3
    3986:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    398a:	7a2b      	ldrb	r3, [r5, #8]
    398c:	3301      	adds	r3, #1
    398e:	b25b      	sxtb	r3, r3
    3990:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
    3992:	f382 8811 	msr	BASEPRI, r2
    3996:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
    399a:	7a6a      	ldrb	r2, [r5, #9]
    399c:	b132      	cbz	r2, 39ac <clock_async_start+0x3e>
		if (data) {
    399e:	b90c      	cbnz	r4, 39a4 <clock_async_start+0x36>
	return 0;
    39a0:	2000      	movs	r0, #0
}
    39a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
    39a4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    39a8:	4798      	blx	r3
    39aa:	e7f9      	b.n	39a0 <clock_async_start+0x32>
		if (ref == 1) {
    39ac:	2b01      	cmp	r3, #1
    39ae:	d106      	bne.n	39be <clock_async_start+0x50>
			do_start =  (config->start_handler) ?
    39b0:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
    39b2:	b933      	cbnz	r3, 39c2 <clock_async_start+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    39b4:	2201      	movs	r2, #1
    39b6:	7abb      	ldrb	r3, [r7, #10]
    39b8:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    39bc:	601a      	str	r2, [r3, #0]
		if (data) {
    39be:	b94c      	cbnz	r4, 39d4 <clock_async_start+0x66>
    39c0:	e7ee      	b.n	39a0 <clock_async_start+0x32>
					config->start_handler(dev) : true;
    39c2:	4798      	blx	r3
    39c4:	2800      	cmp	r0, #0
    39c6:	d1f5      	bne.n	39b4 <clock_async_start+0x46>
			} else if (data) {
    39c8:	2c00      	cmp	r4, #0
    39ca:	d0e9      	beq.n	39a0 <clock_async_start+0x32>
				data->cb(dev, data->user_data);
    39cc:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    39d0:	4630      	mov	r0, r6
    39d2:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
    39d4:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
    39d6:	429c      	cmp	r4, r3
    39d8:	d00d      	beq.n	39f6 <clock_async_start+0x88>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    39da:	b113      	cbz	r3, 39e2 <clock_async_start+0x74>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    39dc:	681b      	ldr	r3, [r3, #0]
	} while (item);
    39de:	2b00      	cmp	r3, #0
    39e0:	d1f9      	bne.n	39d6 <clock_async_start+0x68>
	parent->next = child;
    39e2:	2000      	movs	r0, #0
    39e4:	6020      	str	r0, [r4, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    39e6:	686b      	ldr	r3, [r5, #4]
    39e8:	b913      	cbnz	r3, 39f0 <clock_async_start+0x82>
	list->head = node;
    39ea:	e9c5 4400 	strd	r4, r4, [r5]
    39ee:	e7d7      	b.n	39a0 <clock_async_start+0x32>
	parent->next = child;
    39f0:	601c      	str	r4, [r3, #0]
	list->tail = node;
    39f2:	606c      	str	r4, [r5, #4]
    39f4:	e7d5      	b.n	39a2 <clock_async_start+0x34>
				return -EALREADY;
    39f6:	f06f 0044 	mvn.w	r0, #68	; 0x44
    39fa:	e7d2      	b.n	39a2 <clock_async_start+0x34>

000039fc <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
    39fc:	2200      	movs	r2, #0
    39fe:	f7ff bfb6 	b.w	396e <clock_async_start>

00003a02 <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    3a02:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
    3a04:	2000      	movs	r0, #0
	list->tail = NULL;
    3a06:	e9c3 0000 	strd	r0, r0, [r3]
}
    3a0a:	4770      	bx	lr

00003a0c <hfclk_init>:
{
    3a0c:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    3a0e:	2200      	movs	r2, #0
{
    3a10:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    3a12:	2101      	movs	r1, #1
    3a14:	2005      	movs	r0, #5
    3a16:	f7fd fac1 	bl	f9c <z_arm_irq_priority_set>
	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    3a1a:	2005      	movs	r0, #5
    3a1c:	f7fd faae 	bl	f7c <arch_irq_enable>
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    3a20:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3a24:	2202      	movs	r2, #2
    3a26:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    3a2a:	2203      	movs	r2, #3
	list->head = NULL;
    3a2c:	2000      	movs	r0, #0
    3a2e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    3a32:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
    3a34:	e9c3 0000 	strd	r0, r0, [r3]
}
    3a38:	bd10      	pop	{r4, pc}

00003a3a <clkstarted_handle>:
{
    3a3a:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
    3a3c:	6884      	ldr	r4, [r0, #8]
{
    3a3e:	4605      	mov	r5, r0
Z_GENLIST_IS_EMPTY(slist)
    3a40:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    3a42:	b12b      	cbz	r3, 3a50 <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3a44:	6861      	ldr	r1, [r4, #4]
    3a46:	681a      	ldr	r2, [r3, #0]
    3a48:	428b      	cmp	r3, r1
	list->head = node;
    3a4a:	6022      	str	r2, [r4, #0]
	list->tail = node;
    3a4c:	bf08      	it	eq
    3a4e:	6062      	streq	r2, [r4, #4]
	data->started = true;
    3a50:	2201      	movs	r2, #1
    3a52:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
    3a54:	b903      	cbnz	r3, 3a58 <clkstarted_handle+0x1e>
}
    3a56:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
    3a58:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    3a5c:	4628      	mov	r0, r5
    3a5e:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
    3a60:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
    3a62:	2b00      	cmp	r3, #0
    3a64:	d0f7      	beq.n	3a56 <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3a66:	6861      	ldr	r1, [r4, #4]
    3a68:	681a      	ldr	r2, [r3, #0]
    3a6a:	428b      	cmp	r3, r1
	list->head = node;
    3a6c:	6022      	str	r2, [r4, #0]
	list->tail = node;
    3a6e:	bf08      	it	eq
    3a70:	6062      	streq	r2, [r4, #4]
    3a72:	e7ef      	b.n	3a54 <clkstarted_handle+0x1a>

00003a74 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    3a74:	4770      	bx	lr

00003a76 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    3a76:	4770      	bx	lr

00003a78 <spm_secure_services_init>:
	mbedtls_platform_context platform_ctx = {0};
    3a78:	2300      	movs	r3, #0
{
    3a7a:	b507      	push	{r0, r1, r2, lr}
	err = mbedtls_platform_setup(&platform_ctx);
    3a7c:	a801      	add	r0, sp, #4
	mbedtls_platform_context platform_ctx = {0};
    3a7e:	f88d 3004 	strb.w	r3, [sp, #4]
	err = mbedtls_platform_setup(&platform_ctx);
    3a82:	f7fe ff77 	bl	2974 <mbedtls_platform_setup>
}
    3a86:	b003      	add	sp, #12
    3a88:	f85d fb04 	ldr.w	pc, [sp], #4

00003a8c <__acle_se_spm_request_random_number>:
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
    3a8c:	2990      	cmp	r1, #144	; 0x90
{
    3a8e:	b508      	push	{r3, lr}
    3a90:	4613      	mov	r3, r2
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
    3a92:	d139      	bne.n	3b08 <__acle_se_spm_request_random_number+0x7c>
	err = mbedtls_hardware_poll(NULL, output, len, olen);
    3a94:	460a      	mov	r2, r1
    3a96:	4601      	mov	r1, r0
    3a98:	2000      	movs	r0, #0
    3a9a:	f7fe ff77 	bl	298c <mbedtls_hardware_poll>
}
    3a9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3aa2:	4671      	mov	r1, lr
    3aa4:	4672      	mov	r2, lr
    3aa6:	4673      	mov	r3, lr
    3aa8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    3aac:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    3ab0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    3ab4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    3ab8:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
    3abc:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
    3ac0:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    3ac4:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    3ac8:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    3acc:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    3ad0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    3ad4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    3ad8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    3adc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    3ae0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3ae4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    3ae8:	f38e 8c00 	msr	CPSR_fs, lr
    3aec:	b410      	push	{r4}
    3aee:	eef1 ca10 	vmrs	ip, fpscr
    3af2:	f64f 7460 	movw	r4, #65376	; 0xff60
    3af6:	f6c0 74ff 	movt	r4, #4095	; 0xfff
    3afa:	ea0c 0c04 	and.w	ip, ip, r4
    3afe:	eee1 ca10 	vmsr	fpscr, ip
    3b02:	bc10      	pop	{r4}
    3b04:	46f4      	mov	ip, lr
    3b06:	4774      	bxns	lr
		return -EINVAL;
    3b08:	f06f 0015 	mvn.w	r0, #21
    3b0c:	e7c7      	b.n	3a9e <__acle_se_spm_request_random_number+0x12>

00003b0e <abort_function>:
	while(1);
    3b0e:	e7fe      	b.n	3b0e <abort_function>

00003b10 <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	z_arm_reserved();
    3b10:	f7fd baac 	b.w	106c <z_arm_bus_fault>

00003b14 <irq_target_state_set>:
 *
 * @return N/A
 */
void irq_target_state_set(unsigned int irq, int secure_state)
{
	if (secure_state) {
    3b14:	b243      	sxtb	r3, r0
    3b16:	b1a9      	cbz	r1, 3b44 <irq_target_state_set+0x30>
  if ((int32_t)(IRQn) >= 0)
    3b18:	2b00      	cmp	r3, #0
    3b1a:	db12      	blt.n	3b42 <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    3b1c:	2101      	movs	r1, #1
    3b1e:	095b      	lsrs	r3, r3, #5
    3b20:	009b      	lsls	r3, r3, #2
    3b22:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3b26:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3b2a:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
    3b2e:	f000 001f 	and.w	r0, r0, #31
    3b32:	fa01 f000 	lsl.w	r0, r1, r0
    3b36:	ea22 0200 	bic.w	r2, r2, r0
    3b3a:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
    3b3e:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
		/* Set target state to Non-Secure */
		if (NVIC_SetTargetState(irq) != 1) {
			__ASSERT(0, "NVIC SetTargetState error");
		}
	}
}
    3b42:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
    3b44:	2b00      	cmp	r3, #0
    3b46:	dbfc      	blt.n	3b42 <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    3b48:	2201      	movs	r2, #1
    3b4a:	095b      	lsrs	r3, r3, #5
    3b4c:	009b      	lsls	r3, r3, #2
    3b4e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3b52:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3b56:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
    3b5a:	f000 001f 	and.w	r0, r0, #31
    3b5e:	fa02 f000 	lsl.w	r0, r2, r0
    3b62:	4308      	orrs	r0, r1
    3b64:	f8c3 0280 	str.w	r0, [r3, #640]	; 0x280
    3b68:	e7e9      	b.n	3b3e <irq_target_state_set+0x2a>

00003b6a <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3b6a:	f000 b907 	b.w	3d7c <z_fatal_error>

00003b6e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    3b6e:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    3b70:	6800      	ldr	r0, [r0, #0]
    3b72:	f000 b903 	b.w	3d7c <z_fatal_error>

00003b76 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    3b76:	b508      	push	{r3, lr}
	handler();
    3b78:	f7fd fa82 	bl	1080 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
    3b7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
    3b80:	f7fd b99a 	b.w	eb8 <z_arm_exc_exit>

00003b84 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    3b84:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    3b86:	2100      	movs	r1, #0
    3b88:	a801      	add	r0, sp, #4
    3b8a:	f7fd fd93 	bl	16b4 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    3b8e:	b003      	add	sp, #12
    3b90:	f85d fb04 	ldr.w	pc, [sp], #4

00003b94 <mpu_configure_region>:
{
    3b94:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
    3b96:	680b      	ldr	r3, [r1, #0]
{
    3b98:	b085      	sub	sp, #20
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    3b9a:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    3b9c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    3ba0:	890d      	ldrh	r5, [r1, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    3ba2:	3c01      	subs	r4, #1
	region_conf.base = new_region->start;
    3ba4:	9300      	str	r3, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
    3ba6:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    3ba8:	f023 031f 	bic.w	r3, r3, #31
    3bac:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    3bae:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
    3bb2:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    3bb6:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    3bba:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
    3bbc:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    3bc0:	9303      	str	r3, [sp, #12]
    3bc2:	4604      	mov	r4, r0
    3bc4:	d805      	bhi.n	3bd2 <mpu_configure_region+0x3e>
	region_init(index, region_conf);
    3bc6:	4669      	mov	r1, sp
    3bc8:	f7fd fc2c 	bl	1424 <region_init>
}
    3bcc:	4620      	mov	r0, r4
    3bce:	b005      	add	sp, #20
    3bd0:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    3bd2:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
    3bd6:	e7f9      	b.n	3bcc <mpu_configure_region+0x38>

00003bd8 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    3bd8:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    3bdc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3be0:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    3be2:	bf08      	it	eq
    3be4:	f06f 0015 	mvneq.w	r0, #21
    3be8:	4770      	bx	lr

00003bea <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    3bea:	3801      	subs	r0, #1
    3bec:	3901      	subs	r1, #1
    3bee:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    3bf2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    3bf6:	4293      	cmp	r3, r2
    3bf8:	d101      	bne.n	3bfe <strcmp+0x14>
    3bfa:	2b00      	cmp	r3, #0
    3bfc:	d1f7      	bne.n	3bee <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    3bfe:	1a98      	subs	r0, r3, r2
    3c00:	4770      	bx	lr

00003c02 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    3c02:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    3c04:	b15a      	cbz	r2, 3c1e <memcmp+0x1c>
    3c06:	3901      	subs	r1, #1
    3c08:	1884      	adds	r4, r0, r2
    3c0a:	f810 2b01 	ldrb.w	r2, [r0], #1
    3c0e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    3c12:	42a0      	cmp	r0, r4
    3c14:	d001      	beq.n	3c1a <memcmp+0x18>
    3c16:	429a      	cmp	r2, r3
    3c18:	d0f7      	beq.n	3c0a <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    3c1a:	1ad0      	subs	r0, r2, r3
}
    3c1c:	bd10      	pop	{r4, pc}
		return 0;
    3c1e:	4610      	mov	r0, r2
    3c20:	e7fc      	b.n	3c1c <memcmp+0x1a>

00003c22 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    3c22:	1a43      	subs	r3, r0, r1
    3c24:	4293      	cmp	r3, r2
{
    3c26:	b510      	push	{r4, lr}
    3c28:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    3c2c:	d308      	bcc.n	3c40 <memmove+0x1e>
	char *dest = d;
    3c2e:	4602      	mov	r2, r0
    3c30:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    3c32:	429a      	cmp	r2, r3
    3c34:	d00b      	beq.n	3c4e <memmove+0x2c>
			*dest = *src;
    3c36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    3c3a:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    3c3e:	e7f8      	b.n	3c32 <memmove+0x10>
    3c40:	440a      	add	r2, r1
			dest[n] = src[n];
    3c42:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    3c46:	428a      	cmp	r2, r1
			dest[n] = src[n];
    3c48:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    3c4c:	d1f9      	bne.n	3c42 <memmove+0x20>
		}
	}

	return d;
}
    3c4e:	bd10      	pop	{r4, pc}

00003c50 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    3c50:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    3c52:	ea81 0400 	eor.w	r4, r1, r0
    3c56:	07a5      	lsls	r5, r4, #30
    3c58:	4603      	mov	r3, r0
    3c5a:	d00b      	beq.n	3c74 <memcpy+0x24>
    3c5c:	3b01      	subs	r3, #1
    3c5e:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    3c60:	4291      	cmp	r1, r2
    3c62:	d11a      	bne.n	3c9a <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    3c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    3c66:	2a00      	cmp	r2, #0
    3c68:	d0fc      	beq.n	3c64 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    3c6a:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    3c6e:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    3c70:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    3c74:	079c      	lsls	r4, r3, #30
    3c76:	d1f6      	bne.n	3c66 <memcpy+0x16>
    3c78:	0895      	lsrs	r5, r2, #2
    3c7a:	00ac      	lsls	r4, r5, #2
    3c7c:	1f1e      	subs	r6, r3, #4
    3c7e:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    3c80:	42b9      	cmp	r1, r7
    3c82:	d105      	bne.n	3c90 <memcpy+0x40>
    3c84:	f06f 0603 	mvn.w	r6, #3
    3c88:	4423      	add	r3, r4
    3c8a:	fb06 2205 	mla	r2, r6, r5, r2
    3c8e:	e7e5      	b.n	3c5c <memcpy+0xc>
			*(d_word++) = *(s_word++);
    3c90:	f851 cb04 	ldr.w	ip, [r1], #4
    3c94:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
    3c98:	e7f2      	b.n	3c80 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
    3c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
    3c9e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    3ca2:	e7dd      	b.n	3c60 <memcpy+0x10>

00003ca4 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    3ca4:	4603      	mov	r3, r0
{
    3ca6:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
    3ca8:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    3caa:	079c      	lsls	r4, r3, #30
    3cac:	d110      	bne.n	3cd0 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    3cae:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    3cb2:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    3cb6:	0894      	lsrs	r4, r2, #2
    3cb8:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    3cbc:	42b3      	cmp	r3, r6
    3cbe:	d10d      	bne.n	3cdc <memset+0x38>
    3cc0:	f06f 0503 	mvn.w	r5, #3
    3cc4:	fb05 2404 	mla	r4, r5, r4, r2
    3cc8:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    3cca:	42a3      	cmp	r3, r4
    3ccc:	d109      	bne.n	3ce2 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    3cce:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    3cd0:	2a00      	cmp	r2, #0
    3cd2:	d0fc      	beq.n	3cce <memset+0x2a>
		*(d_byte++) = c_byte;
    3cd4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    3cd8:	3a01      	subs	r2, #1
    3cda:	e7e6      	b.n	3caa <memset+0x6>
		*(d_word++) = c_word;
    3cdc:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    3ce0:	e7ec      	b.n	3cbc <memset+0x18>
		*(d_byte++) = c_byte;
    3ce2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    3ce6:	e7f0      	b.n	3cca <memset+0x26>

00003ce8 <_stdout_hook_default>:
}
    3ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3cec:	4770      	bx	lr

00003cee <uarte_nrfx_config_get>:
{
    3cee:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    3cf0:	6882      	ldr	r2, [r0, #8]
    3cf2:	e892 0003 	ldmia.w	r2, {r0, r1}
    3cf6:	e883 0003 	stmia.w	r3, {r0, r1}
}
    3cfa:	2000      	movs	r0, #0
    3cfc:	4770      	bx	lr

00003cfe <uarte_nrfx_err_check>:
	return dev->config->config_info;
    3cfe:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
    3d00:	689b      	ldr	r3, [r3, #8]
    3d02:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    3d04:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    3d08:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    3d0c:	4770      	bx	lr

00003d0e <uarte_nrfx_poll_in>:
	return dev->config->config_info;
    3d0e:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    3d10:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
    3d12:	689b      	ldr	r3, [r3, #8]
    3d14:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3d16:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    3d1a:	b138      	cbz	r0, 3d2c <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
    3d1c:	7a12      	ldrb	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3d1e:	2000      	movs	r0, #0
    3d20:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3d22:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3d24:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3d28:	601a      	str	r2, [r3, #0]
	return 0;
    3d2a:	4770      	bx	lr
		return -1;
    3d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    3d30:	4770      	bx	lr

00003d32 <uarte_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3d32:	2200      	movs	r2, #0
	return dev->config->config_info;
    3d34:	6803      	ldr	r3, [r0, #0]
{
    3d36:	b082      	sub	sp, #8
	return config->uarte_regs;
    3d38:	689b      	ldr	r3, [r3, #8]
{
    3d3a:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
    3d3e:	681b      	ldr	r3, [r3, #0]
    3d40:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3d44:	f10d 0207 	add.w	r2, sp, #7
    3d48:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3d4c:	2201      	movs	r2, #1
    3d4e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3d52:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3d54:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    3d58:	2900      	cmp	r1, #0
    3d5a:	d0fb      	beq.n	3d54 <uarte_nrfx_poll_out+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3d5c:	60da      	str	r2, [r3, #12]
}
    3d5e:	b002      	add	sp, #8
    3d60:	4770      	bx	lr

00003d62 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    3d62:	b508      	push	{r3, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
    3d64:	2000      	movs	r0, #0
    3d66:	f7fd faef 	bl	1348 <sys_arch_reboot>

00003d6a <hw_cc310_init>:
#if CONFIG_HW_CC310

#include "nrf_cc310_platform.h"

static int hw_cc310_init(struct device *dev)
{
    3d6a:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc310_platform_abort_init();
    3d6c:	f7fd f80e 	bl	d8c <nrf_cc310_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc310_platform_mutex_init();
    3d70:	f7fd f88c 	bl	e8c <nrf_cc310_platform_mutex_init>
	res = nrf_cc310_platform_init();
#else
	res = nrf_cc310_platform_init_no_rng();
#endif
	return res;
}
    3d74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc310_platform_init_no_rng();
    3d78:	f7fe bec0 	b.w	2afc <nrf_cc310_platform_init_no_rng>

00003d7c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3d7c:	b570      	push	{r4, r5, r6, lr}
    3d7e:	4605      	mov	r5, r0
    3d80:	460e      	mov	r6, r1
	return z_impl_k_current_get();
    3d82:	f7fe fb75 	bl	2470 <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    3d86:	4631      	mov	r1, r6
    3d88:	4604      	mov	r4, r0
    3d8a:	4628      	mov	r0, r5
    3d8c:	f7ff ffe9 	bl	3d62 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
    3d90:	4620      	mov	r0, r4
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
    3d92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3d96:	f7fd baf5 	b.w	1384 <z_impl_k_thread_abort>

00003d9a <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    3d9a:	f7ff be6c 	b.w	3a76 <z_clock_idle_exit>

00003d9e <k_mem_slab_init>:
{
    3d9e:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    3da0:	2400      	movs	r4, #0
	slab->block_size = block_size;
    3da2:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
    3da6:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
    3daa:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
    3dac:	42a3      	cmp	r3, r4
    3dae:	d102      	bne.n	3db6 <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
    3db0:	e9c0 0000 	strd	r0, r0, [r0]
}
    3db4:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    3db6:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    3db8:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    3dba:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    3dbc:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    3dbe:	4411      	add	r1, r2
    3dc0:	e7f4      	b.n	3dac <k_mem_slab_init+0xe>

00003dc2 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
    3dc2:	2300      	movs	r3, #0
    3dc4:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
    3dc8:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    3dcc:	4770      	bx	lr

00003dce <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3dce:	7b43      	ldrb	r3, [r0, #13]
    3dd0:	06db      	lsls	r3, r3, #27
    3dd2:	bf03      	ittte	eq
    3dd4:	6980      	ldreq	r0, [r0, #24]
    3dd6:	fab0 f080 	clzeq	r0, r0
    3dda:	0940      	lsreq	r0, r0, #5
    3ddc:	2000      	movne	r0, #0
}
    3dde:	4770      	bx	lr

00003de0 <z_unpend_thread_no_timeout>:
{
    3de0:	b538      	push	{r3, r4, r5, lr}
    3de2:	4604      	mov	r4, r0
	__asm__ volatile(
    3de4:	f04f 0320 	mov.w	r3, #32
    3de8:	f3ef 8511 	mrs	r5, BASEPRI
    3dec:	f383 8811 	msr	BASEPRI, r3
    3df0:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    3df4:	4601      	mov	r1, r0
    3df6:	6880      	ldr	r0, [r0, #8]
    3df8:	f7fe f970 	bl	20dc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    3dfc:	7b63      	ldrb	r3, [r4, #13]
    3dfe:	f023 0302 	bic.w	r3, r3, #2
    3e02:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    3e04:	f385 8811 	msr	BASEPRI, r5
    3e08:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    3e0c:	2300      	movs	r3, #0
    3e0e:	60a3      	str	r3, [r4, #8]
}
    3e10:	bd38      	pop	{r3, r4, r5, pc}

00003e12 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3e12:	b921      	cbnz	r1, 3e1e <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3e14:	f3ef 8005 	mrs	r0, IPSR
    3e18:	b908      	cbnz	r0, 3e1e <z_reschedule+0xc>
    3e1a:	f7fd b85b 	b.w	ed4 <arch_swap>
    3e1e:	f381 8811 	msr	BASEPRI, r1
    3e22:	f3bf 8f6f 	isb	sy
}
    3e26:	4770      	bx	lr

00003e28 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3e28:	4603      	mov	r3, r0
    3e2a:	b920      	cbnz	r0, 3e36 <z_reschedule_irqlock+0xe>
    3e2c:	f3ef 8205 	mrs	r2, IPSR
    3e30:	b90a      	cbnz	r2, 3e36 <z_reschedule_irqlock+0xe>
    3e32:	f7fd b84f 	b.w	ed4 <arch_swap>
    3e36:	f383 8811 	msr	BASEPRI, r3
    3e3a:	f3bf 8f6f 	isb	sy
}
    3e3e:	4770      	bx	lr

00003e40 <z_reschedule_unlocked>:
	__asm__ volatile(
    3e40:	f04f 0320 	mov.w	r3, #32
    3e44:	f3ef 8011 	mrs	r0, BASEPRI
    3e48:	f383 8811 	msr	BASEPRI, r3
    3e4c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    3e50:	f7ff bfea 	b.w	3e28 <z_reschedule_irqlock>

00003e54 <z_priq_dumb_best>:
	return list->head == list;
    3e54:	6803      	ldr	r3, [r0, #0]
}
    3e56:	4298      	cmp	r0, r3
    3e58:	bf14      	ite	ne
    3e5a:	4618      	movne	r0, r3
    3e5c:	2000      	moveq	r0, #0
    3e5e:	4770      	bx	lr

00003e60 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
    3e60:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    3e64:	b570      	push	{r4, r5, r6, lr}
    3e66:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
    3e68:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
    3e6c:	b1cb      	cbz	r3, 3ea2 <z_thread_timeout+0x42>
    3e6e:	f04f 0320 	mov.w	r3, #32
    3e72:	f3ef 8611 	mrs	r6, BASEPRI
    3e76:	f383 8811 	msr	BASEPRI, r3
    3e7a:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    3e7e:	4629      	mov	r1, r5
    3e80:	f850 0c10 	ldr.w	r0, [r0, #-16]
    3e84:	f7fe f92a 	bl	20dc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    3e88:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    3e8c:	f023 0302 	bic.w	r3, r3, #2
    3e90:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
    3e94:	f386 8811 	msr	BASEPRI, r6
    3e98:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    3e9c:	2300      	movs	r3, #0
    3e9e:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    3ea2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    3ea6:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    3ea8:	f023 0314 	bic.w	r3, r3, #20
    3eac:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    3eb0:	f7ff ff8d 	bl	3dce <z_is_thread_ready>
    3eb4:	b120      	cbz	r0, 3ec0 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
    3eb6:	4628      	mov	r0, r5
}
    3eb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3ebc:	f7fe b95e 	b.w	217c <z_add_thread_to_ready_q>
    3ec0:	bd70      	pop	{r4, r5, r6, pc}

00003ec2 <z_unpend_first_thread>:
{
    3ec2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3ec4:	f04f 0320 	mov.w	r3, #32
    3ec8:	f3ef 8211 	mrs	r2, BASEPRI
    3ecc:	f383 8811 	msr	BASEPRI, r3
    3ed0:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    3ed4:	f7ff ffbe 	bl	3e54 <z_priq_dumb_best>
    3ed8:	4604      	mov	r4, r0
	__asm__ volatile(
    3eda:	f382 8811 	msr	BASEPRI, r2
    3ede:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    3ee2:	b1c8      	cbz	r0, 3f18 <z_unpend_first_thread+0x56>
	__asm__ volatile(
    3ee4:	f04f 0320 	mov.w	r3, #32
    3ee8:	f3ef 8511 	mrs	r5, BASEPRI
    3eec:	f383 8811 	msr	BASEPRI, r3
    3ef0:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    3ef4:	4601      	mov	r1, r0
    3ef6:	6880      	ldr	r0, [r0, #8]
    3ef8:	f7fe f8f0 	bl	20dc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    3efc:	7b63      	ldrb	r3, [r4, #13]
    3efe:	f023 0302 	bic.w	r3, r3, #2
    3f02:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    3f04:	f385 8811 	msr	BASEPRI, r5
    3f08:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    3f0c:	2300      	movs	r3, #0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    3f0e:	f104 0018 	add.w	r0, r4, #24
    3f12:	60a3      	str	r3, [r4, #8]
    3f14:	f000 f839 	bl	3f8a <z_abort_timeout>
}
    3f18:	4620      	mov	r0, r4
    3f1a:	bd38      	pop	{r3, r4, r5, pc}

00003f1c <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3f1c:	7b43      	ldrb	r3, [r0, #13]
    3f1e:	06db      	lsls	r3, r3, #27
    3f20:	bf03      	ittte	eq
    3f22:	6980      	ldreq	r0, [r0, #24]
    3f24:	fab0 f080 	clzeq	r0, r0
    3f28:	0940      	lsreq	r0, r0, #5
    3f2a:	2000      	movne	r0, #0
}
    3f2c:	4770      	bx	lr

00003f2e <z_new_thread_init>:
{
    3f2e:	b510      	push	{r4, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    3f30:	9c02      	ldr	r4, [sp, #8]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
    3f32:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
    3f34:	7304      	strb	r4, [r0, #12]

	thread_base->sched_locked = 0U;
    3f36:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
    3f38:	2404      	movs	r4, #4
	thread_base->sched_locked = 0U;
    3f3a:	73c3      	strb	r3, [r0, #15]
	thread_base->thread_state = (u8_t)initial_state;
    3f3c:	7344      	strb	r4, [r0, #13]
	node->prev = NULL;
    3f3e:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
    3f42:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
    3f46:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
    3f4a:	bd10      	pop	{r4, pc}

00003f4c <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    3f4c:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    3f4e:	b510      	push	{r4, lr}
    3f50:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    3f52:	b103      	cbz	r3, 3f56 <z_thread_single_abort+0xa>
		thread->fn_abort();
    3f54:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
    3f56:	4620      	mov	r0, r4
    3f58:	f7ff ffe0 	bl	3f1c <z_is_thread_ready>
    3f5c:	b138      	cbz	r0, 3f6e <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
    3f5e:	4620      	mov	r0, r4
    3f60:	f7fe f9ba 	bl	22d8 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
    3f64:	7b63      	ldrb	r3, [r4, #13]
    3f66:	f043 0308 	orr.w	r3, r3, #8
    3f6a:	7363      	strb	r3, [r4, #13]
}
    3f6c:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
    3f6e:	7b63      	ldrb	r3, [r4, #13]
    3f70:	079b      	lsls	r3, r3, #30
    3f72:	d502      	bpl.n	3f7a <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
    3f74:	4620      	mov	r0, r4
    3f76:	f7ff ff33 	bl	3de0 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
    3f7a:	69a3      	ldr	r3, [r4, #24]
    3f7c:	2b00      	cmp	r3, #0
    3f7e:	d0f1      	beq.n	3f64 <z_thread_single_abort+0x18>
    3f80:	f104 0018 	add.w	r0, r4, #24
    3f84:	f000 f801 	bl	3f8a <z_abort_timeout>
    3f88:	e7ec      	b.n	3f64 <z_thread_single_abort+0x18>

00003f8a <z_abort_timeout>:
{
    3f8a:	b510      	push	{r4, lr}
	__asm__ volatile(
    3f8c:	f04f 0220 	mov.w	r2, #32
    3f90:	f3ef 8411 	mrs	r4, BASEPRI
    3f94:	f382 8811 	msr	BASEPRI, r2
    3f98:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    3f9c:	6803      	ldr	r3, [r0, #0]
    3f9e:	b13b      	cbz	r3, 3fb0 <z_abort_timeout+0x26>
			remove_timeout(to);
    3fa0:	f7fe fb0c 	bl	25bc <remove_timeout>
			ret = 0;
    3fa4:	2000      	movs	r0, #0
	__asm__ volatile(
    3fa6:	f384 8811 	msr	BASEPRI, r4
    3faa:	f3bf 8f6f 	isb	sy
}
    3fae:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    3fb0:	f06f 0015 	mvn.w	r0, #21
    3fb4:	e7f7      	b.n	3fa6 <z_abort_timeout+0x1c>

00003fb6 <z_get_next_timeout_expiry>:
{
    3fb6:	b510      	push	{r4, lr}
	__asm__ volatile(
    3fb8:	f04f 0320 	mov.w	r3, #32
    3fbc:	f3ef 8411 	mrs	r4, BASEPRI
    3fc0:	f383 8811 	msr	BASEPRI, r3
    3fc4:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    3fc8:	f7fe fb0c 	bl	25e4 <next_timeout>
	__asm__ volatile(
    3fcc:	f384 8811 	msr	BASEPRI, r4
    3fd0:	f3bf 8f6f 	isb	sy
}
    3fd4:	bd10      	pop	{r4, pc}

00003fd6 <z_set_timeout_expiry>:
{
    3fd6:	b570      	push	{r4, r5, r6, lr}
    3fd8:	4604      	mov	r4, r0
    3fda:	460e      	mov	r6, r1
	__asm__ volatile(
    3fdc:	f04f 0320 	mov.w	r3, #32
    3fe0:	f3ef 8511 	mrs	r5, BASEPRI
    3fe4:	f383 8811 	msr	BASEPRI, r3
    3fe8:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    3fec:	f7fe fafa 	bl	25e4 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    3ff0:	2801      	cmp	r0, #1
    3ff2:	dd05      	ble.n	4000 <z_set_timeout_expiry+0x2a>
    3ff4:	42a0      	cmp	r0, r4
    3ff6:	dd03      	ble.n	4000 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    3ff8:	4631      	mov	r1, r6
    3ffa:	4620      	mov	r0, r4
    3ffc:	f7fc fbee 	bl	7dc <z_clock_set_timeout>
	__asm__ volatile(
    4000:	f385 8811 	msr	BASEPRI, r5
    4004:	f3bf 8f6f 	isb	sy
}
    4008:	bd70      	pop	{r4, r5, r6, pc}

0000400a <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    400a:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

00004b00 <spm_request_read-0x34e0>:
	...

00007fe0 <spm_request_read>:
    7fe0:	e97f e97f 	sg
    7fe4:	f7f8 be14 	b.w	c10 <__acle_se_spm_request_read>

00007fe8 <spm_firmware_info>:
    7fe8:	e97f e97f 	sg
    7fec:	f7f8 be68 	b.w	cc0 <__acle_se_spm_firmware_info>

00007ff0 <spm_request_random_number>:
    7ff0:	e97f e97f 	sg
    7ff4:	f7fb bd4a 	b.w	3a8c <__acle_se_spm_request_random_number>
	...
