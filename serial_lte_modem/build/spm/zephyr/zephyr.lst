
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20000a90 	.word	0x20000a90
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&mutex, *(uintptr_t *)&timeout, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00001145 	.word	0x00001145
   8:	00003b8b 	.word	0x00003b8b
   c:	00001095 	.word	0x00001095
		if (fdtable[fd].obj == NULL) {
  10:	00001095 	.word	0x00001095
  14:	00001095 	.word	0x00001095
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	00001095 	.word	0x00001095
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
  1c:	00001095 	.word	0x00001095
	errno = ENFILE;
  20:	00001095 	.word	0x00001095
	return -1;
  24:	00001095 	.word	0x00001095
		arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_mutex_unlock(mutex);
  28:	00001095 	.word	0x00001095
  2c:	00000f85 	.word	0x00000f85
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	00001095 	.word	0x00001095
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	00001095 	.word	0x00001095
  38:	00000f31 	.word	0x00000f31
  3c:	00003a89 	.word	0x00003a89

00000040 <_irq_vector_table>:
  40:	00001105 00001105 00001105 00001105     ................
  50:	00001105 00001105 00001105 00001105     ................
  60:	00001105 00001105 00001105 00001105     ................
  70:	00001105 00001105 00001105 00001105     ................
  80:	00001105 00001105 00001105 00001105     ................
  90:	00001105 00001105 00001105 00001105     ................
  a0:	00001105 00001105 00001105 00001105     ................
  b0:	00001105 00001105 00001105 00001105     ................
  c0:	00001105 00001105 00001105 00001105     ................
  d0:	00001105 00001105 00001105 00001105     ................
  e0:	00001105 00001105 00001105 00001105     ................
  f0:	00001105 00001105 00001105 00001105     ................
 100:	00001105 00001105 00001105 00001105     ................
 110:	00001105 00001105 00001105 00001105     ................
 120:	00001105 00001105 00001105 00001105     ................
 130:	00001105 00001105 00001105 00001105     ................
 140:	00001105                                ....

00000144 <_vector_end>:
	...

00000200 <m_firmware_info>:
 200:	281ee6de 8fcebb4c 00005b01 00008000     ...(L....[......
 210:	00000001 00000000 200013d0 000019e5     ........... ....

Disassembly of section _TEXT_SECTION_NAME_2:

00000220 <__aeabi_uldivmod>:
     220:	b953      	cbnz	r3, 238 <__aeabi_uldivmod+0x18>
     222:	b94a      	cbnz	r2, 238 <__aeabi_uldivmod+0x18>
     224:	2900      	cmp	r1, #0
     226:	bf08      	it	eq
     228:	2800      	cmpeq	r0, #0
     22a:	bf1c      	itt	ne
     22c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     234:	f000 b970 	b.w	518 <__aeabi_idiv0>
     238:	f1ad 0c08 	sub.w	ip, sp, #8
     23c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     240:	f000 f806 	bl	250 <__udivmoddi4>
     244:	f8dd e004 	ldr.w	lr, [sp, #4]
     248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     24c:	b004      	add	sp, #16
     24e:	4770      	bx	lr

00000250 <__udivmoddi4>:
     250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     254:	9e09      	ldr	r6, [sp, #36]	; 0x24
     256:	4604      	mov	r4, r0
     258:	4689      	mov	r9, r1
     25a:	2b00      	cmp	r3, #0
     25c:	f040 8083 	bne.w	366 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x66>
     260:	428a      	cmp	r2, r1
     262:	4615      	mov	r5, r2
     264:	d945      	bls.n	2f2 <CONFIG_LTE_NETWORK_TIMEOUT+0x9a>
     266:	fab2 f282 	clz	r2, r2
     26a:	b14a      	cbz	r2, 280 <CONFIG_LTE_NETWORK_TIMEOUT+0x28>
     26c:	f1c2 0720 	rsb	r7, r2, #32
     270:	fa01 f302 	lsl.w	r3, r1, r2
     274:	4095      	lsls	r5, r2
     276:	4094      	lsls	r4, r2
     278:	fa20 f707 	lsr.w	r7, r0, r7
     27c:	ea47 0903 	orr.w	r9, r7, r3
     280:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     284:	0c23      	lsrs	r3, r4, #16
     286:	fa1f f885 	uxth.w	r8, r5
     28a:	fbb9 fcfe 	udiv	ip, r9, lr
     28e:	fb0e 991c 	mls	r9, lr, ip, r9
     292:	fb0c f108 	mul.w	r1, ip, r8
     296:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
     29a:	4299      	cmp	r1, r3
     29c:	d90a      	bls.n	2b4 <CONFIG_LTE_NETWORK_TIMEOUT+0x5c>
     29e:	18eb      	adds	r3, r5, r3
     2a0:	bf2c      	ite	cs
     2a2:	2001      	movcs	r0, #1
     2a4:	2000      	movcc	r0, #0
     2a6:	4299      	cmp	r1, r3
     2a8:	d902      	bls.n	2b0 <CONFIG_LTE_NETWORK_TIMEOUT+0x58>
     2aa:	2800      	cmp	r0, #0
     2ac:	f000 811d 	beq.w	4ea <CONFIG_NET_TX_STACK_SIZE+0x3a>
     2b0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
     2b4:	1a59      	subs	r1, r3, r1
     2b6:	b2a3      	uxth	r3, r4
     2b8:	fbb1 f0fe 	udiv	r0, r1, lr
     2bc:	fb0e 1110 	mls	r1, lr, r0, r1
     2c0:	fb00 f808 	mul.w	r8, r0, r8
     2c4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     2c8:	45a0      	cmp	r8, r4
     2ca:	d905      	bls.n	2d8 <CONFIG_LTE_NETWORK_TIMEOUT+0x80>
     2cc:	192c      	adds	r4, r5, r4
     2ce:	d202      	bcs.n	2d6 <CONFIG_LTE_NETWORK_TIMEOUT+0x7e>
     2d0:	45a0      	cmp	r8, r4
     2d2:	f200 810e 	bhi.w	4f2 <CONFIG_NET_TX_STACK_SIZE+0x42>
     2d6:	3801      	subs	r0, #1
     2d8:	eba4 0408 	sub.w	r4, r4, r8
     2dc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     2e0:	2700      	movs	r7, #0
     2e2:	b11e      	cbz	r6, 2ec <CONFIG_LTE_NETWORK_TIMEOUT+0x94>
     2e4:	40d4      	lsrs	r4, r2
     2e6:	2300      	movs	r3, #0
     2e8:	e9c6 4300 	strd	r4, r3, [r6]
     2ec:	4639      	mov	r1, r7
     2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     2f2:	2a00      	cmp	r2, #0
     2f4:	d051      	beq.n	39a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x9a>
     2f6:	fab2 f282 	clz	r2, r2
     2fa:	2a00      	cmp	r2, #0
     2fc:	f040 80af 	bne.w	45e <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x5e>
     300:	1b49      	subs	r1, r1, r5
     302:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     306:	fa1f f885 	uxth.w	r8, r5
     30a:	2701      	movs	r7, #1
     30c:	0c23      	lsrs	r3, r4, #16
     30e:	fbb1 fcfe 	udiv	ip, r1, lr
     312:	fb0e 111c 	mls	r1, lr, ip, r1
     316:	fb08 f00c 	mul.w	r0, r8, ip
     31a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     31e:	4298      	cmp	r0, r3
     320:	d90a      	bls.n	338 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x38>
     322:	18eb      	adds	r3, r5, r3
     324:	bf2c      	ite	cs
     326:	2101      	movcs	r1, #1
     328:	2100      	movcc	r1, #0
     32a:	4298      	cmp	r0, r3
     32c:	d902      	bls.n	334 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x34>
     32e:	2900      	cmp	r1, #0
     330:	f000 80d7 	beq.w	4e2 <CONFIG_NET_TX_STACK_SIZE+0x32>
     334:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
     338:	1a19      	subs	r1, r3, r0
     33a:	b2a3      	uxth	r3, r4
     33c:	fbb1 f0fe 	udiv	r0, r1, lr
     340:	fb0e 1110 	mls	r1, lr, r0, r1
     344:	fb08 f800 	mul.w	r8, r8, r0
     348:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     34c:	45a0      	cmp	r8, r4
     34e:	d905      	bls.n	35c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5c>
     350:	192c      	adds	r4, r5, r4
     352:	d202      	bcs.n	35a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5a>
     354:	45a0      	cmp	r8, r4
     356:	f200 80c1 	bhi.w	4dc <CONFIG_NET_TX_STACK_SIZE+0x2c>
     35a:	3801      	subs	r0, #1
     35c:	eba4 0408 	sub.w	r4, r4, r8
     360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     364:	e7bd      	b.n	2e2 <CONFIG_LTE_NETWORK_TIMEOUT+0x8a>
     366:	428b      	cmp	r3, r1
     368:	d908      	bls.n	37c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7c>
     36a:	2e00      	cmp	r6, #0
     36c:	d074      	beq.n	458 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x58>
     36e:	2700      	movs	r7, #0
     370:	e9c6 0100 	strd	r0, r1, [r6]
     374:	4638      	mov	r0, r7
     376:	4639      	mov	r1, r7
     378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     37c:	fab3 f783 	clz	r7, r3
     380:	b967      	cbnz	r7, 39c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x9c>
     382:	428b      	cmp	r3, r1
     384:	f0c0 80a4 	bcc.w	4d0 <CONFIG_NET_TX_STACK_SIZE+0x20>
     388:	4282      	cmp	r2, r0
     38a:	f240 80a1 	bls.w	4d0 <CONFIG_NET_TX_STACK_SIZE+0x20>
     38e:	4638      	mov	r0, r7
     390:	2e00      	cmp	r6, #0
     392:	d0ab      	beq.n	2ec <CONFIG_LTE_NETWORK_TIMEOUT+0x94>
     394:	e9c6 4900 	strd	r4, r9, [r6]
     398:	e7a8      	b.n	2ec <CONFIG_LTE_NETWORK_TIMEOUT+0x94>
     39a:	deff      	udf	#255	; 0xff
     39c:	f1c7 0520 	rsb	r5, r7, #32
     3a0:	40bb      	lsls	r3, r7
     3a2:	fa02 fc07 	lsl.w	ip, r2, r7
     3a6:	fa01 f407 	lsl.w	r4, r1, r7
     3aa:	40ea      	lsrs	r2, r5
     3ac:	fa20 f805 	lsr.w	r8, r0, r5
     3b0:	40e9      	lsrs	r1, r5
     3b2:	fa00 fe07 	lsl.w	lr, r0, r7
     3b6:	431a      	orrs	r2, r3
     3b8:	ea48 0404 	orr.w	r4, r8, r4
     3bc:	ea4f 4812 	mov.w	r8, r2, lsr #16
     3c0:	0c20      	lsrs	r0, r4, #16
     3c2:	fa1f f982 	uxth.w	r9, r2
     3c6:	fbb1 faf8 	udiv	sl, r1, r8
     3ca:	fb08 111a 	mls	r1, r8, sl, r1
     3ce:	fb0a fb09 	mul.w	fp, sl, r9
     3d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     3d6:	458b      	cmp	fp, r1
     3d8:	d90a      	bls.n	3f0 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x8>
     3da:	1851      	adds	r1, r2, r1
     3dc:	bf2c      	ite	cs
     3de:	2301      	movcs	r3, #1
     3e0:	2300      	movcc	r3, #0
     3e2:	458b      	cmp	fp, r1
     3e4:	d902      	bls.n	3ec <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x4>
     3e6:	2b00      	cmp	r3, #0
     3e8:	f000 8088 	beq.w	4fc <CONFIG_NET_TX_STACK_SIZE+0x4c>
     3ec:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
     3f0:	eba1 010b 	sub.w	r1, r1, fp
     3f4:	b2a4      	uxth	r4, r4
     3f6:	fbb1 f0f8 	udiv	r0, r1, r8
     3fa:	fb08 1110 	mls	r1, r8, r0, r1
     3fe:	fb00 f909 	mul.w	r9, r0, r9
     402:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
     406:	4589      	cmp	r9, r1
     408:	d904      	bls.n	414 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x14>
     40a:	1851      	adds	r1, r2, r1
     40c:	d201      	bcs.n	412 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x12>
     40e:	4589      	cmp	r9, r1
     410:	d87b      	bhi.n	50a <CONFIG_NET_TX_STACK_SIZE+0x5a>
     412:	3801      	subs	r0, #1
     414:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     418:	eba1 0109 	sub.w	r1, r1, r9
     41c:	fba0 890c 	umull	r8, r9, r0, ip
     420:	4549      	cmp	r1, r9
     422:	4644      	mov	r4, r8
     424:	464b      	mov	r3, r9
     426:	d302      	bcc.n	42e <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x2e>
     428:	d106      	bne.n	438 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x38>
     42a:	45c6      	cmp	lr, r8
     42c:	d204      	bcs.n	438 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x38>
     42e:	3801      	subs	r0, #1
     430:	ebb8 040c 	subs.w	r4, r8, ip
     434:	eb69 0302 	sbc.w	r3, r9, r2
     438:	2e00      	cmp	r6, #0
     43a:	d05d      	beq.n	4f8 <CONFIG_NET_TX_STACK_SIZE+0x48>
     43c:	ebbe 0204 	subs.w	r2, lr, r4
     440:	eb61 0103 	sbc.w	r1, r1, r3
     444:	fa01 f505 	lsl.w	r5, r1, r5
     448:	fa22 f307 	lsr.w	r3, r2, r7
     44c:	40f9      	lsrs	r1, r7
     44e:	2700      	movs	r7, #0
     450:	431d      	orrs	r5, r3
     452:	e9c6 5100 	strd	r5, r1, [r6]
     456:	e749      	b.n	2ec <CONFIG_LTE_NETWORK_TIMEOUT+0x94>
     458:	4637      	mov	r7, r6
     45a:	4630      	mov	r0, r6
     45c:	e746      	b.n	2ec <CONFIG_LTE_NETWORK_TIMEOUT+0x94>
     45e:	f1c2 0020 	rsb	r0, r2, #32
     462:	4095      	lsls	r5, r2
     464:	fa01 f702 	lsl.w	r7, r1, r2
     468:	fa21 f300 	lsr.w	r3, r1, r0
     46c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     470:	fa24 f100 	lsr.w	r1, r4, r0
     474:	fa1f f885 	uxth.w	r8, r5
     478:	4094      	lsls	r4, r2
     47a:	4339      	orrs	r1, r7
     47c:	fbb3 f0fe 	udiv	r0, r3, lr
     480:	0c0f      	lsrs	r7, r1, #16
     482:	fb0e 3310 	mls	r3, lr, r0, r3
     486:	fb00 fc08 	mul.w	ip, r0, r8
     48a:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
     48e:	459c      	cmp	ip, r3
     490:	d907      	bls.n	4a2 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0xa2>
     492:	18eb      	adds	r3, r5, r3
     494:	bf2c      	ite	cs
     496:	2701      	movcs	r7, #1
     498:	2700      	movcc	r7, #0
     49a:	459c      	cmp	ip, r3
     49c:	d900      	bls.n	4a0 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0xa0>
     49e:	b38f      	cbz	r7, 504 <CONFIG_NET_TX_STACK_SIZE+0x54>
     4a0:	3801      	subs	r0, #1
     4a2:	eba3 030c 	sub.w	r3, r3, ip
     4a6:	b289      	uxth	r1, r1
     4a8:	fbb3 f7fe 	udiv	r7, r3, lr
     4ac:	fb0e 3317 	mls	r3, lr, r7, r3
     4b0:	fb07 fc08 	mul.w	ip, r7, r8
     4b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     4b8:	458c      	cmp	ip, r1
     4ba:	d904      	bls.n	4c6 <CONFIG_NET_TX_STACK_SIZE+0x16>
     4bc:	1869      	adds	r1, r5, r1
     4be:	d201      	bcs.n	4c4 <CONFIG_NET_TX_STACK_SIZE+0x14>
     4c0:	458c      	cmp	ip, r1
     4c2:	d825      	bhi.n	510 <CONFIG_NET_TX_STACK_SIZE+0x60>
     4c4:	3f01      	subs	r7, #1
     4c6:	eba1 010c 	sub.w	r1, r1, ip
     4ca:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
     4ce:	e71d      	b.n	30c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc>
     4d0:	1a84      	subs	r4, r0, r2
     4d2:	eb61 0303 	sbc.w	r3, r1, r3
     4d6:	2001      	movs	r0, #1
     4d8:	4699      	mov	r9, r3
     4da:	e759      	b.n	390 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x90>
     4dc:	3802      	subs	r0, #2
     4de:	442c      	add	r4, r5
     4e0:	e73c      	b.n	35c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5c>
     4e2:	f1ac 0c02 	sub.w	ip, ip, #2
     4e6:	442b      	add	r3, r5
     4e8:	e726      	b.n	338 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x38>
     4ea:	f1ac 0c02 	sub.w	ip, ip, #2
     4ee:	442b      	add	r3, r5
     4f0:	e6e0      	b.n	2b4 <CONFIG_LTE_NETWORK_TIMEOUT+0x5c>
     4f2:	3802      	subs	r0, #2
     4f4:	442c      	add	r4, r5
     4f6:	e6ef      	b.n	2d8 <CONFIG_LTE_NETWORK_TIMEOUT+0x80>
     4f8:	4637      	mov	r7, r6
     4fa:	e6f7      	b.n	2ec <CONFIG_LTE_NETWORK_TIMEOUT+0x94>
     4fc:	f1aa 0a02 	sub.w	sl, sl, #2
     500:	4411      	add	r1, r2
     502:	e775      	b.n	3f0 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x8>
     504:	3802      	subs	r0, #2
     506:	442b      	add	r3, r5
     508:	e7cb      	b.n	4a2 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0xa2>
     50a:	3802      	subs	r0, #2
     50c:	4411      	add	r1, r2
     50e:	e781      	b.n	414 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x14>
     510:	3f02      	subs	r7, #2
     512:	4429      	add	r1, r5
     514:	e7d7      	b.n	4c6 <CONFIG_NET_TX_STACK_SIZE+0x16>
     516:	bf00      	nop

00000518 <__aeabi_idiv0>:
     518:	4770      	bx	lr
     51a:	bf00      	nop

0000051c <__gnu_cmse_nonsecure_call>:
     51c:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
     520:	4627      	mov	r7, r4
     522:	46a0      	mov	r8, r4
     524:	46a1      	mov	r9, r4
     526:	46a2      	mov	sl, r4
     528:	46a3      	mov	fp, r4
     52a:	46a4      	mov	ip, r4
     52c:	ed2d 8b10 	vpush	{d8-d15}
     530:	f04f 0500 	mov.w	r5, #0
     534:	ec45 5b18 	vmov	d8, r5, r5
     538:	ec45 5a19 	vmov	s18, s19, r5, r5
     53c:	ec45 5a1a 	vmov	s20, s21, r5, r5
     540:	ec45 5a1b 	vmov	s22, s23, r5, r5
     544:	ec45 5a1c 	vmov	s24, s25, r5, r5
     548:	ec45 5a1d 	vmov	s26, s27, r5, r5
     54c:	ec45 5a1e 	vmov	s28, s29, r5, r5
     550:	ec45 5a1f 	vmov	s30, s31, r5, r5
     554:	eef1 5a10 	vmrs	r5, fpscr
     558:	f64f 7660 	movw	r6, #65376	; 0xff60
     55c:	f6c0 76ff 	movt	r6, #4095	; 0xfff
     560:	4035      	ands	r5, r6
     562:	eee1 5a10 	vmsr	fpscr, r5
     566:	f384 8800 	msr	CPSR_f, r4
     56a:	4625      	mov	r5, r4
     56c:	4626      	mov	r6, r4
     56e:	47a4      	blxns	r4
     570:	ecbd 8b10 	vpop	{d8-d15}
     574:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

00000578 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     578:	680b      	ldr	r3, [r1, #0]
     57a:	3301      	adds	r3, #1
     57c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     57e:	4b01      	ldr	r3, [pc, #4]	; (584 <char_out+0xc>)
     580:	681b      	ldr	r3, [r3, #0]
     582:	4718      	bx	r3
     584:	200013d4 	.word	0x200013d4

00000588 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     58c:	b085      	sub	sp, #20
     58e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     590:	469b      	mov	fp, r3
     592:	2c01      	cmp	r4, #1
     594:	bfb8      	it	lt
     596:	2401      	movlt	r4, #1
     598:	2b01      	cmp	r3, #1
     59a:	bf0c      	ite	eq
     59c:	2330      	moveq	r3, #48	; 0x30
     59e:	2320      	movne	r3, #32
     5a0:	4616      	mov	r6, r2
     5a2:	4682      	mov	sl, r0
     5a4:	4688      	mov	r8, r1
     5a6:	2501      	movs	r5, #1
     5a8:	270a      	movs	r7, #10
     5aa:	2200      	movs	r2, #0
     5ac:	f8df 906c 	ldr.w	r9, [pc, #108]	; 61c <CONFIG_NET_RX_STACK_SIZE+0x40>
     5b0:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
     5b2:	fbb6 f3f9 	udiv	r3, r6, r9
     5b6:	9301      	str	r3, [sp, #4]
     5b8:	b90a      	cbnz	r2, 5be <_printk_dec_ulong+0x36>
     5ba:	45b1      	cmp	r9, r6
     5bc:	d81c      	bhi.n	5f8 <CONFIG_NET_RX_STACK_SIZE+0x1c>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
     5be:	9b01      	ldr	r3, [sp, #4]
     5c0:	4641      	mov	r1, r8
     5c2:	f103 0030 	add.w	r0, r3, #48	; 0x30
     5c6:	47d0      	blx	sl
			found_largest_digit = 1;
     5c8:	2201      	movs	r2, #1
			digits++;
     5ca:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
     5cc:	9b01      	ldr	r3, [sp, #4]
		remaining--;
     5ce:	3f01      	subs	r7, #1
		remainder %= pos;
     5d0:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
     5d4:	230a      	movs	r3, #10
	while (pos >= 10) {
     5d6:	2f01      	cmp	r7, #1
		pos /= 10;
     5d8:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
     5dc:	d1e9      	bne.n	5b2 <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
     5de:	4641      	mov	r1, r8
     5e0:	f106 0030 	add.w	r0, r6, #48	; 0x30
     5e4:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
     5e6:	f1bb 0f03 	cmp.w	fp, #3
     5ea:	d102      	bne.n	5f2 <CONFIG_NET_RX_STACK_SIZE+0x16>
		remaining = min_width - digits;
     5ec:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
     5ee:	2c00      	cmp	r4, #0
     5f0:	dc0e      	bgt.n	610 <CONFIG_NET_RX_STACK_SIZE+0x34>
			out(' ', ctx);
		}
	}
}
     5f2:	b005      	add	sp, #20
     5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     5f8:	42bc      	cmp	r4, r7
     5fa:	dbe7      	blt.n	5cc <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     5fc:	f1bb 0f02 	cmp.w	fp, #2
     600:	d8e4      	bhi.n	5cc <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     602:	4641      	mov	r1, r8
     604:	9802      	ldr	r0, [sp, #8]
     606:	9203      	str	r2, [sp, #12]
			digits++;
     608:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     60a:	47d0      	blx	sl
			digits++;
     60c:	9a03      	ldr	r2, [sp, #12]
     60e:	e7dd      	b.n	5cc <_printk_dec_ulong+0x44>
			out(' ', ctx);
     610:	4641      	mov	r1, r8
     612:	2020      	movs	r0, #32
     614:	47d0      	blx	sl
     616:	3c01      	subs	r4, #1
     618:	e7e9      	b.n	5ee <CONFIG_NET_RX_STACK_SIZE+0x12>
     61a:	bf00      	nop
     61c:	3b9aca00 	.word	0x3b9aca00

00000620 <__printk_hook_install>:
	_char_out = fn;
     620:	4b01      	ldr	r3, [pc, #4]	; (628 <__printk_hook_install+0x8>)
     622:	6018      	str	r0, [r3, #0]
}
     624:	4770      	bx	lr
     626:	bf00      	nop
     628:	200013d4 	.word	0x200013d4

0000062c <vprintk>:
	struct out_context ctx = { 0 };
     62c:	2300      	movs	r3, #0
{
     62e:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
     630:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     632:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
     634:	4803      	ldr	r0, [pc, #12]	; (644 <vprintk+0x18>)
     636:	460b      	mov	r3, r1
     638:	a901      	add	r1, sp, #4
     63a:	f002 ffe4 	bl	3606 <z_vprintk>
}
     63e:	b003      	add	sp, #12
     640:	f85d fb04 	ldr.w	pc, [sp], #4
     644:	00000579 	.word	0x00000579

00000648 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     648:	f04f 0220 	mov.w	r2, #32
     64c:	f3ef 8311 	mrs	r3, BASEPRI
     650:	f382 8811 	msr	BASEPRI, r2
     654:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     658:	2101      	movs	r1, #1
     65a:	4a04      	ldr	r2, [pc, #16]	; (66c <nordicsemi_nrf91_init+0x24>)
     65c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     660:	f383 8811 	msr	BASEPRI, r3
     664:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     668:	2000      	movs	r0, #0
     66a:	4770      	bx	lr
     66c:	50039000 	.word	0x50039000

00000670 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
     670:	280a      	cmp	r0, #10
{
     672:	b538      	push	{r3, r4, r5, lr}
     674:	4604      	mov	r4, r0
     676:	4d07      	ldr	r5, [pc, #28]	; (694 <console_out+0x24>)
	if ('\n' == c) {
     678:	d104      	bne.n	684 <console_out+0x14>
     67a:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
     67c:	6843      	ldr	r3, [r0, #4]
     67e:	210d      	movs	r1, #13
     680:	685b      	ldr	r3, [r3, #4]
     682:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
     684:	6828      	ldr	r0, [r5, #0]
     686:	6843      	ldr	r3, [r0, #4]
     688:	b2e1      	uxtb	r1, r4
     68a:	685b      	ldr	r3, [r3, #4]
     68c:	4798      	blx	r3

	return c;
}
     68e:	4620      	mov	r0, r4
     690:	bd38      	pop	{r3, r4, r5, pc}
     692:	bf00      	nop
     694:	20000008 	.word	0x20000008

00000698 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
     698:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
     69a:	4c04      	ldr	r4, [pc, #16]	; (6ac <uart_console_hook_install+0x14>)
     69c:	4620      	mov	r0, r4
     69e:	f001 f8af 	bl	1800 <__stdout_hook_install>
	__printk_hook_install(console_out);
     6a2:	4620      	mov	r0, r4
}
     6a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
     6a8:	f7ff bfba 	b.w	620 <__printk_hook_install>
     6ac:	00000671 	.word	0x00000671

000006b0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
     6b0:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     6b2:	4804      	ldr	r0, [pc, #16]	; (6c4 <uart_console_init+0x14>)
     6b4:	f001 fa9a 	bl	1bec <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     6b8:	4b03      	ldr	r3, [pc, #12]	; (6c8 <uart_console_init+0x18>)
     6ba:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
     6bc:	f7ff ffec 	bl	698 <uart_console_hook_install>

	return 0;
}
     6c0:	2000      	movs	r0, #0
     6c2:	bd08      	pop	{r3, pc}
     6c4:	00004633 	.word	0x00004633
     6c8:	20000008 	.word	0x20000008

000006cc <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
     6cc:	b508      	push	{r3, lr}
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     6ce:	4b11      	ldr	r3, [pc, #68]	; (714 <nrf_power_clock_isr+0x48>)
     6d0:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
     6d2:	b16a      	cbz	r2, 6f0 <nrf_power_clock_isr+0x24>
    return p_reg->INTENSET & mask;
     6d4:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     6d8:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
     6dc:	07d1      	lsls	r1, r2, #31
     6de:	d507      	bpl.n	6f0 <nrf_power_clock_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     6e0:	2200      	movs	r2, #0
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
     6e2:	480d      	ldr	r0, [pc, #52]	; (718 <nrf_power_clock_isr+0x4c>)
     6e4:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
     6e6:	6883      	ldr	r3, [r0, #8]
     6e8:	7a5b      	ldrb	r3, [r3, #9]
     6ea:	b90b      	cbnz	r3, 6f0 <nrf_power_clock_isr+0x24>
			clkstarted_handle(hfclk_dev);
     6ec:	f003 f9af 	bl	3a4e <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     6f0:	4b0a      	ldr	r3, [pc, #40]	; (71c <nrf_power_clock_isr+0x50>)
     6f2:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
     6f4:	b162      	cbz	r2, 710 <nrf_power_clock_isr+0x44>
    return p_reg->INTENSET & mask;
     6f6:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     6fa:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
     6fe:	0792      	lsls	r2, r2, #30
     700:	d506      	bpl.n	710 <nrf_power_clock_isr+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     702:	2200      	movs	r2, #0

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
     704:	4806      	ldr	r0, [pc, #24]	; (720 <nrf_power_clock_isr+0x54>)
     706:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
     708:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(lfclk_dev);
     70c:	f003 b99f 	b.w	3a4e <clkstarted_handle>
}
     710:	bd08      	pop	{r3, pc}
     712:	bf00      	nop
     714:	50005100 	.word	0x50005100
     718:	20001484 	.word	0x20001484
     71c:	50005104 	.word	0x50005104
     720:	20001490 	.word	0x20001490

00000724 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
     724:	2200      	movs	r2, #0
     726:	4b0d      	ldr	r3, [pc, #52]	; (75c <rtc1_nrf_isr+0x38>)
     728:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
     72c:	f04f 0220 	mov.w	r2, #32
     730:	f3ef 8111 	mrs	r1, BASEPRI
     734:	f382 8811 	msr	BASEPRI, r2
     738:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
     73c:	4a08      	ldr	r2, [pc, #32]	; (760 <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
     73e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
     742:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
     744:	1ac0      	subs	r0, r0, r3
     746:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
     74a:	4403      	add	r3, r0
     74c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
     74e:	f381 8811 	msr	BASEPRI, r1
     752:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
     756:	f001 bfad 	b.w	26b4 <z_clock_announce>
     75a:	bf00      	nop
     75c:	50015000 	.word	0x50015000
     760:	20000024 	.word	0x20000024

00000764 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
     764:	b570      	push	{r4, r5, r6, lr}
     766:	4818      	ldr	r0, [pc, #96]	; (7c8 <z_clock_driver_init+0x64>)
     768:	f001 fa40 	bl	1bec <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
     76c:	b348      	cbz	r0, 7c2 <z_clock_driver_init+0x5e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
     76e:	6843      	ldr	r3, [r0, #4]
     770:	2100      	movs	r1, #0
     772:	681b      	ldr	r3, [r3, #0]
     774:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
     776:	2601      	movs	r6, #1
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
     778:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
     77a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     77e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
     782:	4d12      	ldr	r5, [pc, #72]	; (7cc <z_clock_driver_init+0x68>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
     784:	4631      	mov	r1, r6
     786:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
     78a:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
     78e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     792:	4b0f      	ldr	r3, [pc, #60]	; (7d0 <z_clock_driver_init+0x6c>)
     794:	2015      	movs	r0, #21
     796:	601c      	str	r4, [r3, #0]
     798:	4b0e      	ldr	r3, [pc, #56]	; (7d4 <z_clock_driver_init+0x70>)
     79a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     79e:	4622      	mov	r2, r4
     7a0:	f000 fc10 	bl	fc4 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
     7a4:	2015      	movs	r0, #21
     7a6:	f000 fbfd 	bl	fa4 <arch_irq_enable>

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
     7aa:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
     7ac:	4b0a      	ldr	r3, [pc, #40]	; (7d8 <z_clock_driver_init+0x74>)
     7ae:	601e      	str	r6, [r3, #0]
     7b0:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
     7b2:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
     7b6:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     7b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     7bc:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
     7c0:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
     7c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     7c6:	e7fb      	b.n	7c0 <z_clock_driver_init+0x5c>
     7c8:	0000463a 	.word	0x0000463a
     7cc:	50015000 	.word	0x50015000
     7d0:	50015140 	.word	0x50015140
     7d4:	e000e100 	.word	0xe000e100
     7d8:	50015008 	.word	0x50015008

000007dc <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
     7dc:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
     7de:	4e21      	ldr	r6, [pc, #132]	; (864 <CONFIG_ISR_STACK_SIZE+0x64>)
     7e0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
     7e4:	bf08      	it	eq
     7e6:	4630      	moveq	r0, r6
	__asm__ volatile(
     7e8:	f04f 0320 	mov.w	r3, #32
     7ec:	f3ef 8411 	mrs	r4, BASEPRI
     7f0:	f383 8811 	msr	BASEPRI, r3
     7f4:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     7f8:	491b      	ldr	r1, [pc, #108]	; (868 <CONFIG_ISR_STACK_SIZE+0x68>)
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	bool zli_fixup = IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS);

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
     7fa:	4b1c      	ldr	r3, [pc, #112]	; (86c <CONFIG_ISR_STACK_SIZE+0x6c>)
     7fc:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
     800:	681d      	ldr	r5, [r3, #0]
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
     802:	3801      	subs	r0, #1
	return (a - b) & COUNTER_MAX;
     804:	1b53      	subs	r3, r2, r5
     806:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	cyc += (CYC_PER_TICK - 1);
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
	cyc += last_count;
     80a:	3501      	adds	r5, #1
     80c:	442b      	add	r3, r5
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
     80e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	cyc += last_count;
     812:	42b0      	cmp	r0, r6
     814:	bfd4      	ite	le
     816:	1818      	addle	r0, r3, r0
     818:	1998      	addgt	r0, r3, r6
	return (a - b) & COUNTER_MAX;
     81a:	1a82      	subs	r2, r0, r2
     81c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     820:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
     824:	2a02      	cmp	r2, #2
    p_reg->CC[ch] = cc_val;
     826:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
     82a:	d904      	bls.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
	__asm__ volatile(
     82c:	f384 8811 	msr	BASEPRI, r4
     830:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
     834:	bd70      	pop	{r4, r5, r6, pc}
     return p_reg->COUNTER;
     836:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
     83a:	4a0d      	ldr	r2, [pc, #52]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
	return (a - b) & COUNTER_MAX;
     83c:	1ac3      	subs	r3, r0, r3
     83e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
     842:	1e5d      	subs	r5, r3, #1
     844:	4295      	cmp	r5, r2
     846:	d905      	bls.n	854 <CONFIG_ISR_STACK_SIZE+0x54>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     848:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     84c:	4b09      	ldr	r3, [pc, #36]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     84e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
     852:	e7eb      	b.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
		} else if (dt == 1) {
     854:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
     856:	bf02      	ittt	eq
     858:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     85a:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     85e:	f8c1 0540 	streq.w	r0, [r1, #1344]	; 0x540
     862:	e7e3      	b.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
     864:	00fffffe 	.word	0x00fffffe
     868:	50015000 	.word	0x50015000
     86c:	20000024 	.word	0x20000024
     870:	007ffffe 	.word	0x007ffffe
     874:	e000e100 	.word	0xe000e100

00000878 <z_clock_elapsed>:
	__asm__ volatile(
     878:	f04f 0220 	mov.w	r2, #32
     87c:	f3ef 8311 	mrs	r3, BASEPRI
     880:	f382 8811 	msr	BASEPRI, r2
     884:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     888:	4a06      	ldr	r2, [pc, #24]	; (8a4 <z_clock_elapsed+0x2c>)
     88a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
     88e:	4a06      	ldr	r2, [pc, #24]	; (8a8 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
     890:	6812      	ldr	r2, [r2, #0]
     892:	1a80      	subs	r0, r0, r2
     894:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
     898:	f383 8811 	msr	BASEPRI, r3
     89c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
     8a0:	4770      	bx	lr
     8a2:	bf00      	nop
     8a4:	50015000 	.word	0x50015000
     8a8:	20000024 	.word	0x20000024

000008ac <spm_config_peripheral.constprop.1>:
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int spm_config_peripheral(u8_t id, bool dma_present)
     8ac:	b508      	push	{r3, lr}
	 * Assign DMA capabilities and lock down the attribution.
	 *
	 * Note: the function assumes that the peripheral ID matches
	 * the IRQ line.
	 */
	NVIC_DisableIRQ(id);
     8ae:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     8b0:	2b00      	cmp	r3, #0
     8b2:	db0c      	blt.n	8ce <spm_config_peripheral.constprop.1+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     8b4:	2201      	movs	r2, #1
     8b6:	f000 011f 	and.w	r1, r0, #31
     8ba:	408a      	lsls	r2, r1
     8bc:	095b      	lsrs	r3, r3, #5
     8be:	4910      	ldr	r1, [pc, #64]	; (900 <spm_config_peripheral.constprop.1+0x54>)
     8c0:	3320      	adds	r3, #32
     8c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     8c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     8ca:	f3bf 8f6f 	isb	sy
	const u32_t perm = NRF_SPU->PERIPHID[id].PERM;
     8ce:	0083      	lsls	r3, r0, #2
     8d0:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
     8d4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
     8d8:	2831      	cmp	r0, #49	; 0x31
	const u32_t perm = NRF_SPU->PERIPHID[id].PERM;
     8da:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
     8de:	d006      	beq.n	8ee <spm_config_peripheral.constprop.1+0x42>
	return present && (usel || split);
     8e0:	2a00      	cmp	r2, #0
     8e2:	da07      	bge.n	8f4 <spm_config_peripheral.constprop.1+0x48>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
     8e4:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
     8e8:	3a02      	subs	r2, #2
     8ea:	2a01      	cmp	r2, #1
     8ec:	d802      	bhi.n	8f4 <spm_config_peripheral.constprop.1+0x48>

	if (usel_or_split(id)) {
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
     8ee:	4a05      	ldr	r2, [pc, #20]	; (904 <spm_config_peripheral.constprop.1+0x58>)
     8f0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, 0);
     8f4:	2100      	movs	r1, #0
     8f6:	f003 f917 	bl	3b28 <irq_target_state_set>
	return 0;
}
     8fa:	2000      	movs	r0, #0
     8fc:	bd08      	pop	{r3, pc}
     8fe:	bf00      	nop
     900:	e000e100 	.word	0xe000e100
     904:	80000100 	.word	0x80000100

00000908 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
     908:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	u32_t *vtor_ns = (u32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
     90a:	f44f 4440 	mov.w	r4, #49152	; 0xc000
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
     90e:	f24c 0504 	movw	r5, #49156	; 0xc004
{
     912:	b085      	sub	sp, #20
	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
     914:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     918:	482c      	ldr	r0, [pc, #176]	; (9cc <spm_jump+0xc4>)
     91a:	f002 ffe4 	bl	38e6 <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
     91e:	6821      	ldr	r1, [r4, #0]
     920:	482b      	ldr	r0, [pc, #172]	; (9d0 <spm_jump+0xc8>)
     922:	f002 ffe0 	bl	38e6 <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
     926:	6829      	ldr	r1, [r5, #0]
     928:	482a      	ldr	r0, [pc, #168]	; (9d4 <spm_jump+0xcc>)
     92a:	f002 ffdc 	bl	38e6 <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
     92e:	2210      	movs	r2, #16
     930:	2100      	movs	r1, #0
     932:	4668      	mov	r0, sp
     934:	f003 f9b0 	bl	3c98 <memset>
		.vtor_ns = (u32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
     938:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
     93a:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
     93c:	9300      	str	r3, [sp, #0]
     93e:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
     940:	f000 fee8 	bl	1714 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
     944:	2001      	movs	r0, #1
     946:	f000 ff15 	bl	1774 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
     94a:	2000      	movs	r0, #0
     94c:	f000 fefe 	bl	174c <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
     950:	2000      	movs	r0, #0
     952:	f000 ff23 	bl	179c <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
     956:	2101      	movs	r1, #1
     958:	2000      	movs	r0, #0
     95a:	f000 ff3d 	bl	17d8 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
     95e:	f000 ff31 	bl	17c4 <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
     962:	682c      	ldr	r4, [r5, #0]

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
     964:	481c      	ldr	r0, [pc, #112]	; (9d8 <spm_jump+0xd0>)
     966:	f002 ffbe 	bl	38e6 <printk>
		/* Note: Move UARTE0 before jumping, if it is
		 * to be used on the Non-Secure domain.
		 */

		/* Configure UARTE0 as non-secure */
		spm_config_peripheral(
     96a:	2008      	movs	r0, #8
     96c:	f7ff ff9e 	bl	8ac <spm_config_peripheral.constprop.1>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
     970:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
     974:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     978:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
     97c:	0864      	lsrs	r4, r4, #1
     97e:	0064      	lsls	r4, r4, #1
     980:	4620      	mov	r0, r4
     982:	4621      	mov	r1, r4
     984:	4622      	mov	r2, r4
     986:	4623      	mov	r3, r4
     988:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     98c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
     990:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     994:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
     998:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
     99c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
     9a0:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
     9a4:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
     9a8:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
     9ac:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
     9b0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
     9b4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
     9b8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
     9bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     9c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     9c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     9c8:	f7ff fda8 	bl	51c <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
     9cc:	0000479c 	.word	0x0000479c
     9d0:	000047b3 	.word	0x000047b3
     9d4:	000047c8 	.word	0x000047c8
     9d8:	000047e6 	.word	0x000047e6

000009dc <spm_config>:
		      (u32_t)reset_ns);
	}
}

void spm_config(void)
{
     9dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash region\t\tDomain\t\tPermissions\n");
     9e0:	4871      	ldr	r0, [pc, #452]	; (ba8 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x11c>)
     9e2:	f002 ff80 	bl	38e6 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(flash_perm); i++) {
     9e6:	2100      	movs	r1, #0
     9e8:	4e70      	ldr	r6, [pc, #448]	; (bac <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x120>)
		NRF_SPU->FLASHREGION[i].PERM = flash_perm[i];
     9ea:	f8df 91dc 	ldr.w	r9, [pc, #476]	; bc8 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x10>
		PRINT("%02u 0x%05x 0x%05x \t", i, 32 * KB(i), 32 * KB(i + 1));
     9ee:	f8df 8204 	ldr.w	r8, [pc, #516]	; bf4 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x3c>
		PRINT("%c", flash_perm[i] & FLASH_READ  ? 'r' : '-');
     9f2:	4d6f      	ldr	r5, [pc, #444]	; (bb0 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x124>)
		NRF_SPU->FLASHREGION[i].PERM = flash_perm[i];
     9f4:	f856 4b04 	ldr.w	r4, [r6], #4
     9f8:	03ca      	lsls	r2, r1, #15
     9fa:	f501 73c0 	add.w	r3, r1, #384	; 0x180
     9fe:	f849 4023 	str.w	r4, [r9, r3, lsl #2]
		PRINT("%02u 0x%05x 0x%05x \t", i, 32 * KB(i), 32 * KB(i + 1));
     a02:	4640      	mov	r0, r8
     a04:	f502 4300 	add.w	r3, r2, #32768	; 0x8000
     a08:	1c4f      	adds	r7, r1, #1
     a0a:	f002 ff6c 	bl	38e6 <printk>
		PRINT("%s", flash_perm[i] & FLASH_SECURE ? "Secure\t\t" :
     a0e:	4b69      	ldr	r3, [pc, #420]	; (bb4 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x128>)
     a10:	f014 0f10 	tst.w	r4, #16
     a14:	4968      	ldr	r1, [pc, #416]	; (bb8 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT>)
     a16:	4869      	ldr	r0, [pc, #420]	; (bbc <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x4>)
     a18:	bf08      	it	eq
     a1a:	4619      	moveq	r1, r3
     a1c:	f002 ff63 	bl	38e6 <printk>
		PRINT("%c", flash_perm[i] & FLASH_READ  ? 'r' : '-');
     a20:	f014 0f04 	tst.w	r4, #4
     a24:	bf14      	ite	ne
     a26:	2172      	movne	r1, #114	; 0x72
     a28:	212d      	moveq	r1, #45	; 0x2d
     a2a:	4628      	mov	r0, r5
     a2c:	f002 ff5b 	bl	38e6 <printk>
		PRINT("%c", flash_perm[i] & FLASH_WRITE ? 'w' : '-');
     a30:	f014 0f02 	tst.w	r4, #2
     a34:	bf14      	ite	ne
     a36:	2177      	movne	r1, #119	; 0x77
     a38:	212d      	moveq	r1, #45	; 0x2d
     a3a:	4628      	mov	r0, r5
     a3c:	f002 ff53 	bl	38e6 <printk>
		PRINT("%c", flash_perm[i] & FLASH_EXEC  ? 'x' : '-');
     a40:	f014 0f01 	tst.w	r4, #1
     a44:	bf14      	ite	ne
     a46:	2178      	movne	r1, #120	; 0x78
     a48:	212d      	moveq	r1, #45	; 0x2d
     a4a:	4628      	mov	r0, r5
     a4c:	f002 ff4b 	bl	38e6 <printk>
		PRINT("%c", flash_perm[i] & FLASH_LOCK  ? 'l' : '-');
     a50:	f414 7f80 	tst.w	r4, #256	; 0x100
     a54:	bf14      	ite	ne
     a56:	216c      	movne	r1, #108	; 0x6c
     a58:	212d      	moveq	r1, #45	; 0x2d
     a5a:	4628      	mov	r0, r5
     a5c:	f002 ff43 	bl	38e6 <printk>
		PRINT("\n");
     a60:	4857      	ldr	r0, [pc, #348]	; (bc0 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x8>)
     a62:	f002 ff40 	bl	38e6 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(flash_perm); i++) {
     a66:	2f20      	cmp	r7, #32
     a68:	4639      	mov	r1, r7
     a6a:	d1c3      	bne.n	9f4 <spm_config+0x18>
	u32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
     a6c:	4b55      	ldr	r3, [pc, #340]	; (bc4 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0xc>)
	NRF_SPU->FLASHNSC[0].REGION = FLASH_NSC_REGION_FROM_ADDR(__sg_start);
     a6e:	4a56      	ldr	r2, [pc, #344]	; (bc8 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x10>)
     a70:	f3c3 31c4 	ubfx	r1, r3, #15, #5
	u32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
     a74:	f3c3 030e 	ubfx	r3, r3, #0, #15
     a78:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
	NRF_SPU->FLASHNSC[0].SIZE = FLASH_NSC_SIZE_REG(nsc_size);
     a7c:	f3c3 1343 	ubfx	r3, r3, #5, #4
	NRF_SPU->FLASHNSC[0].REGION = FLASH_NSC_REGION_FROM_ADDR(__sg_start);
     a80:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
	NRF_SPU->FLASHNSC[0].SIZE = FLASH_NSC_SIZE_REG(nsc_size);
     a84:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
     a88:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
     a8c:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
     a90:	484e      	ldr	r0, [pc, #312]	; (bcc <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x14>)
     a92:	0152      	lsls	r2, r2, #5
     a94:	f002 ff27 	bl	38e6 <printk>
	PRINT("\n");
     a98:	4849      	ldr	r0, [pc, #292]	; (bc0 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x8>)
     a9a:	f002 ff24 	bl	38e6 <printk>
	int err = spm_secure_services_init();
     a9e:	f002 fff5 	bl	3a8c <spm_secure_services_init>
	if (err != 0) {
     aa2:	4601      	mov	r1, r0
     aa4:	b110      	cbz	r0, aac <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x20>
		PRINT("Could not initialize secure services (err %d).\n", err);
     aa6:	484a      	ldr	r0, [pc, #296]	; (bd0 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x18>)
     aa8:	f002 ff1d 	bl	38e6 <printk>
	PRINT("\n");
     aac:	4844      	ldr	r0, [pc, #272]	; (bc0 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x8>)
     aae:	f002 ff1a 	bl	38e6 <printk>
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
     ab2:	4848      	ldr	r0, [pc, #288]	; (bd4 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x1c>)
     ab4:	f002 ff17 	bl	38e6 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(sram_perm); i++) {
     ab8:	2100      	movs	r1, #0
     aba:	4e47      	ldr	r6, [pc, #284]	; (bd8 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x20>)
		NRF_SPU->RAMREGION[i].PERM = sram_perm[i];
     abc:	f8df 9108 	ldr.w	r9, [pc, #264]	; bc8 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x10>
		PRINT("%02u 0x%05x 0x%05x\t", i, 8 * KB(i), 8 * KB(i + 1));
     ac0:	f8df 8134 	ldr.w	r8, [pc, #308]	; bf8 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x40>
		PRINT("%c", sram_perm[i] & SRAM_READ  ? 'r' : '-');
     ac4:	4d3a      	ldr	r5, [pc, #232]	; (bb0 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x124>)
		NRF_SPU->RAMREGION[i].PERM = sram_perm[i];
     ac6:	f856 4b04 	ldr.w	r4, [r6], #4
     aca:	034a      	lsls	r2, r1, #13
     acc:	f501 73e0 	add.w	r3, r1, #448	; 0x1c0
     ad0:	f849 4023 	str.w	r4, [r9, r3, lsl #2]
		PRINT("%02u 0x%05x 0x%05x\t", i, 8 * KB(i), 8 * KB(i + 1));
     ad4:	4640      	mov	r0, r8
     ad6:	f502 5300 	add.w	r3, r2, #8192	; 0x2000
     ada:	1c4f      	adds	r7, r1, #1
     adc:	f002 ff03 	bl	38e6 <printk>
		PRINT("%s", sram_perm[i] & SRAM_SECURE ? "Secure\t\t" :
     ae0:	4b34      	ldr	r3, [pc, #208]	; (bb4 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x128>)
     ae2:	f014 0f10 	tst.w	r4, #16
     ae6:	4934      	ldr	r1, [pc, #208]	; (bb8 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT>)
     ae8:	4834      	ldr	r0, [pc, #208]	; (bbc <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x4>)
     aea:	bf08      	it	eq
     aec:	4619      	moveq	r1, r3
     aee:	f002 fefa 	bl	38e6 <printk>
		PRINT("%c", sram_perm[i] & SRAM_READ  ? 'r' : '-');
     af2:	f014 0f04 	tst.w	r4, #4
     af6:	bf14      	ite	ne
     af8:	2172      	movne	r1, #114	; 0x72
     afa:	212d      	moveq	r1, #45	; 0x2d
     afc:	4628      	mov	r0, r5
     afe:	f002 fef2 	bl	38e6 <printk>
		PRINT("%c", sram_perm[i] & SRAM_WRITE ? 'w' : '-');
     b02:	f014 0f02 	tst.w	r4, #2
     b06:	bf14      	ite	ne
     b08:	2177      	movne	r1, #119	; 0x77
     b0a:	212d      	moveq	r1, #45	; 0x2d
     b0c:	4628      	mov	r0, r5
     b0e:	f002 feea 	bl	38e6 <printk>
		PRINT("%c", sram_perm[i] & SRAM_EXEC  ? 'x' : '-');
     b12:	f014 0f01 	tst.w	r4, #1
     b16:	bf14      	ite	ne
     b18:	2178      	movne	r1, #120	; 0x78
     b1a:	212d      	moveq	r1, #45	; 0x2d
     b1c:	4628      	mov	r0, r5
     b1e:	f002 fee2 	bl	38e6 <printk>
		PRINT("%c", sram_perm[i] & SRAM_LOCK  ? 'l' : '-');
     b22:	f414 7f80 	tst.w	r4, #256	; 0x100
     b26:	bf14      	ite	ne
     b28:	216c      	movne	r1, #108	; 0x6c
     b2a:	212d      	moveq	r1, #45	; 0x2d
     b2c:	4628      	mov	r0, r5
     b2e:	f002 feda 	bl	38e6 <printk>
		PRINT("\n");
     b32:	4823      	ldr	r0, [pc, #140]	; (bc0 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x8>)
     b34:	f002 fed7 	bl	38e6 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(sram_perm); i++) {
     b38:	2f20      	cmp	r7, #32
     b3a:	4639      	mov	r1, r7
     b3c:	d1c3      	bne.n	ac6 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x3a>
	PRINT("\n");
     b3e:	4820      	ldr	r0, [pc, #128]	; (bc0 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x8>)
     b40:	f002 fed1 	bl	38e6 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
     b44:	f64f 73ff 	movw	r3, #65535	; 0xffff
		NRF_SPU->GPIOPORT[0].PERM = 0;
     b48:	2400      	movs	r4, #0
	NRF_SPU->DPPI[0].PERM = mask;
     b4a:	4d1f      	ldr	r5, [pc, #124]	; (bc8 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x10>)
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
     b4c:	4823      	ldr	r0, [pc, #140]	; (bdc <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x24>)
	NRF_SPU->DPPI[0].PERM = mask;
     b4e:	f8c5 3480 	str.w	r3, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
     b52:	f002 fec8 	bl	38e6 <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
     b56:	4f22      	ldr	r7, [pc, #136]	; (be0 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x28>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
     b58:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
     b5c:	f8df 809c 	ldr.w	r8, [pc, #156]	; bfc <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x44>
     b60:	4d20      	ldr	r5, [pc, #128]	; (be4 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x2c>)
     b62:	f8df 909c 	ldr.w	r9, [pc, #156]	; c00 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x48>
     b66:	796e      	ldrb	r6, [r5, #5]
     b68:	682a      	ldr	r2, [r5, #0]
     b6a:	2e00      	cmp	r6, #0
     b6c:	bf14      	ite	ne
     b6e:	463b      	movne	r3, r7
     b70:	4643      	moveq	r3, r8
     b72:	4621      	mov	r1, r4
     b74:	4648      	mov	r0, r9
     b76:	f002 feb6 	bl	38e6 <printk>
		if (!periph[i].nonsecure) {
     b7a:	b966      	cbnz	r6, b96 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x10a>
			PRINT("\tSKIP\n");
     b7c:	481a      	ldr	r0, [pc, #104]	; (be8 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x30>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
     b7e:	3401      	adds	r4, #1
			PRINT("\tOK\n");
     b80:	f002 feb1 	bl	38e6 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
     b84:	2c19      	cmp	r4, #25
     b86:	f105 0508 	add.w	r5, r5, #8
     b8a:	d1ec      	bne.n	b66 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xda>
	PRINT("\n");
     b8c:	480c      	ldr	r0, [pc, #48]	; (bc0 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x8>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
     b8e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
     b92:	f002 bea8 	b.w	38e6 <printk>
		err = spm_config_peripheral(periph[i].id, false);
     b96:	7928      	ldrb	r0, [r5, #4]
     b98:	f7ff fe88 	bl	8ac <spm_config_peripheral.constprop.1>
		if (err) {
     b9c:	b108      	cbz	r0, ba2 <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0x116>
			PRINT("\tERROR\n");
     b9e:	4813      	ldr	r0, [pc, #76]	; (bec <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x34>)
     ba0:	e7ed      	b.n	b7e <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xf2>
			PRINT("\tOK\n");
     ba2:	4813      	ldr	r0, [pc, #76]	; (bf0 <CONFIG_NET_SOCKETS_CONNECT_TIMEOUT+0x38>)
     ba4:	e7eb      	b.n	b7e <CONFIG_AT_CMD_RESPONSE_MAX_LEN+0xf2>
     ba6:	bf00      	nop
     ba8:	00004678 	.word	0x00004678
     bac:	00004300 	.word	0x00004300
     bb0:	000046b0 	.word	0x000046b0
     bb4:	00004661 	.word	0x00004661
     bb8:	00004658 	.word	0x00004658
     bbc:	00004785 	.word	0x00004785
     bc0:	000049a8 	.word	0x000049a8
     bc4:	00007fe0 	.word	0x00007fe0
     bc8:	50003000 	.word	0x50003000
     bcc:	000046b3 	.word	0x000046b3
     bd0:	000046f9 	.word	0x000046f9
     bd4:	00004729 	.word	0x00004729
     bd8:	00004448 	.word	0x00004448
     bdc:	0000475f 	.word	0x0000475f
     be0:	0000466d 	.word	0x0000466d
     be4:	00004380 	.word	0x00004380
     be8:	00004788 	.word	0x00004788
     bec:	0000478f 	.word	0x0000478f
     bf0:	00004797 	.word	0x00004797
     bf4:	0000469b 	.word	0x0000469b
     bf8:	0000474b 	.word	0x0000474b
     bfc:	00004665 	.word	0x00004665
     c00:	0000477b 	.word	0x0000477b

00000c04 <__acle_se_spm_request_read>:
	size_t size;
};

__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read(void *destination, u32_t addr, size_t len)
{
     c04:	b510      	push	{r4, lr}
		 .size = FICR_PUBLIC_SIZE},
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
     c06:	2800      	cmp	r0, #0
     c08:	d04b      	beq.n	ca2 <__acle_se_spm_request_read+0x9e>
     c0a:	2a00      	cmp	r2, #0
     c0c:	d049      	beq.n	ca2 <__acle_se_spm_request_read+0x9e>

	for (size_t i = 0; i < ARRAY_SIZE(ranges); i++) {
		u32_t start = ranges[i].start;
		u32_t size = ranges[i].size;

		if (addr >= start && addr + len <= start + size) {
     c0e:	4b26      	ldr	r3, [pc, #152]	; (ca8 <__acle_se_spm_request_read+0xa4>)
     c10:	4299      	cmp	r1, r3
     c12:	d93c      	bls.n	c8e <__acle_se_spm_request_read+0x8a>
     c14:	1854      	adds	r4, r2, r1
     c16:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
     c1a:	429c      	cmp	r4, r3
     c1c:	d83a      	bhi.n	c94 <__acle_se_spm_request_read+0x90>
			memcpy(destination, (const void *)addr, len);
     c1e:	f003 f811 	bl	3c44 <memcpy>
			return 0;
     c22:	2000      	movs	r0, #0
		}
	}

	return -EPERM;
}
     c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     c28:	4671      	mov	r1, lr
     c2a:	4672      	mov	r2, lr
     c2c:	4673      	mov	r3, lr
     c2e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     c32:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
     c36:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     c3a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
     c3e:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
     c42:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
     c46:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
     c4a:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
     c4e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
     c52:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
     c56:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
     c5a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
     c5e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
     c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     c66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     c6a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     c6e:	f38e 8c00 	msr	CPSR_fs, lr
     c72:	b410      	push	{r4}
     c74:	eef1 ca10 	vmrs	ip, fpscr
     c78:	f64f 7460 	movw	r4, #65376	; 0xff60
     c7c:	f6c0 74ff 	movt	r4, #4095	; 0xfff
     c80:	ea0c 0c04 	and.w	ip, ip, r4
     c84:	eee1 ca10 	vmsr	fpscr, ip
     c88:	bc10      	pop	{r4}
     c8a:	46f4      	mov	ip, lr
     c8c:	4774      	bxns	lr
		if (addr >= start && addr + len <= start + size) {
     c8e:	4b07      	ldr	r3, [pc, #28]	; (cac <__acle_se_spm_request_read+0xa8>)
     c90:	4299      	cmp	r1, r3
     c92:	d903      	bls.n	c9c <__acle_se_spm_request_read+0x98>
     c94:	4b06      	ldr	r3, [pc, #24]	; (cb0 <__acle_se_spm_request_read+0xac>)
     c96:	1854      	adds	r4, r2, r1
     c98:	429c      	cmp	r4, r3
     c9a:	d9c0      	bls.n	c1e <__acle_se_spm_request_read+0x1a>
	return -EPERM;
     c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     ca0:	e7c0      	b.n	c24 <__acle_se_spm_request_read+0x20>
		return -EINVAL;
     ca2:	f06f 0015 	mvn.w	r0, #21
     ca6:	e7bd      	b.n	c24 <__acle_se_spm_request_read+0x20>
     ca8:	00ff0203 	.word	0x00ff0203
     cac:	00ff012f 	.word	0x00ff012f
     cb0:	00ff0138 	.word	0x00ff0138

00000cb4 <__acle_se_spm_firmware_info>:
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info(u32_t fw_address, struct fw_info *info)
{
     cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cb8:	4686      	mov	lr, r0
     cba:	b085      	sub	sp, #20
	const struct fw_info *tmp_info;

	if (info == NULL) {
     cbc:	460f      	mov	r7, r1
     cbe:	2900      	cmp	r1, #0
     cc0:	d06d      	beq.n	d9e <__acle_se_spm_firmware_info+0xea>
/* Search for the firmware_info structure inside the firmware. */
static inline const struct fw_info *fw_info_find(u32_t firmware_address)
{
	const struct fw_info *finfo;

	for (u32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
     cc2:	2500      	movs	r5, #0
		if (expected_32[i] != actual_32[i]) {
     cc4:	f645 3a01 	movw	sl, #23297	; 0x5b01
     cc8:	f8df c0dc 	ldr.w	ip, [pc, #220]	; da8 <__acle_se_spm_firmware_info+0xf4>
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
     ccc:	4e35      	ldr	r6, [pc, #212]	; (da4 <__acle_se_spm_firmware_info+0xf0>)
		if (expected_32[i] != actual_32[i]) {
     cce:	f8df 80dc 	ldr.w	r8, [pc, #220]	; dac <__acle_se_spm_firmware_info+0xf8>
     cd2:	f8df 90dc 	ldr.w	r9, [pc, #220]	; db0 <__acle_se_spm_firmware_info+0xfc>
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
     cd6:	ac01      	add	r4, sp, #4
		finfo = fw_info_check(firmware_address +
						allowed_offsets[i]);
     cd8:	f85c bb04 	ldr.w	fp, [ip], #4
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
     cdc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
     ce0:	eb0e 030b 	add.w	r3, lr, fp
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
     ce4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (((u32_t)expected % 4) || ((u32_t)actual % 4) || ((u32_t)len % 4)) {
     ce8:	079a      	lsls	r2, r3, #30
     cea:	d10f      	bne.n	d0c <__acle_se_spm_firmware_info+0x58>
		if (expected_32[i] != actual_32[i]) {
     cec:	f85e 200b 	ldr.w	r2, [lr, fp]
     cf0:	4542      	cmp	r2, r8
     cf2:	d105      	bne.n	d00 <__acle_se_spm_firmware_info+0x4c>
     cf4:	685a      	ldr	r2, [r3, #4]
     cf6:	454a      	cmp	r2, r9
     cf8:	d102      	bne.n	d00 <__acle_se_spm_firmware_info+0x4c>
     cfa:	689a      	ldr	r2, [r3, #8]
     cfc:	4552      	cmp	r2, sl
     cfe:	d012      	beq.n	d26 <__acle_se_spm_firmware_info+0x72>
	for (u32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
     d00:	3501      	adds	r5, #1
     d02:	2d03      	cmp	r5, #3
     d04:	d1e8      	bne.n	cd8 <__acle_se_spm_firmware_info+0x24>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
     d06:	f06f 000d 	mvn.w	r0, #13
     d0a:	e012      	b.n	d32 <__acle_se_spm_firmware_info+0x7e>
     d0c:	4621      	mov	r1, r4
	if (((u32_t)expected % 4) || ((u32_t)actual % 4) || ((u32_t)len % 4)) {
     d0e:	2200      	movs	r2, #0
		if (expected_8[i] != actual_8[i]) {
     d10:	f811 0b01 	ldrb.w	r0, [r1], #1
     d14:	f813 b002 	ldrb.w	fp, [r3, r2]
     d18:	4583      	cmp	fp, r0
     d1a:	d1f1      	bne.n	d00 <__acle_se_spm_firmware_info+0x4c>
	for (u32_t i = 0; i < len; i++) {
     d1c:	3201      	adds	r2, #1
     d1e:	2a0c      	cmp	r2, #12
     d20:	d1f6      	bne.n	d10 <__acle_se_spm_firmware_info+0x5c>
		if (finfo) {
     d22:	2b00      	cmp	r3, #0
     d24:	d0ec      	beq.n	d00 <__acle_se_spm_firmware_info+0x4c>
		memcpy(info, tmp_info, sizeof(*tmp_info));
     d26:	2220      	movs	r2, #32
     d28:	4619      	mov	r1, r3
     d2a:	4638      	mov	r0, r7
     d2c:	f002 ff8a 	bl	3c44 <memcpy>
		return 0;
     d30:	2000      	movs	r0, #0
}
     d32:	b005      	add	sp, #20
     d34:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     d38:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
     d3c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     d40:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
     d44:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
     d48:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
     d4c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
     d50:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
     d54:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
     d58:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
     d5c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
     d60:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
     d64:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
     d68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     d6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     d70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d74:	4671      	mov	r1, lr
     d76:	4672      	mov	r2, lr
     d78:	4673      	mov	r3, lr
     d7a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     d7e:	f38e 8c00 	msr	CPSR_fs, lr
     d82:	b410      	push	{r4}
     d84:	eef1 ca10 	vmrs	ip, fpscr
     d88:	f64f 7460 	movw	r4, #65376	; 0xff60
     d8c:	f6c0 74ff 	movt	r4, #4095	; 0xfff
     d90:	ea0c 0c04 	and.w	ip, ip, r4
     d94:	eee1 ca10 	vmsr	fpscr, ip
     d98:	bc10      	pop	{r4}
     d9a:	46f4      	mov	ip, lr
     d9c:	4774      	bxns	lr
		return -EINVAL;
     d9e:	f06f 0015 	mvn.w	r0, #21
     da2:	e7c6      	b.n	d32 <__acle_se_spm_firmware_info+0x7e>
     da4:	000042a0 	.word	0x000042a0
     da8:	000044c8 	.word	0x000044c8
     dac:	281ee6de 	.word	0x281ee6de
     db0:	8fcebb4c 	.word	0x8fcebb4c

00000db4 <nrf_cc310_platform_abort_init>:

/** @brief Function to initialize the nrf_cc310_platform abort APIs.
 */
void nrf_cc310_platform_abort_init(void)
{
	nrf_cc310_platform_set_abort(&apis);
     db4:	4801      	ldr	r0, [pc, #4]	; (dbc <nrf_cc310_platform_abort_init+0x8>)
     db6:	f001 bedd 	b.w	2b74 <nrf_cc310_platform_set_abort>
     dba:	bf00      	nop
     dbc:	000044d4 	.word	0x000044d4

00000dc0 <mutex_unlock>:
}


/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock(nrf_cc310_platform_mutex_t *mutex) {
     dc0:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
     dc2:	b130      	cbz	r0, dd2 <mutex_unlock+0x12>
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    }

    /* Ensure that the mutex has been initialized */
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
     dc4:	6843      	ldr	r3, [r0, #4]
     dc6:	b13b      	cbz	r3, dd8 <mutex_unlock+0x18>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    }

    p_mutex = (struct k_mutex *)mutex->mutex;
     dc8:	6800      	ldr	r0, [r0, #0]
     dca:	f001 f8fb 	bl	1fc4 <z_impl_k_mutex_unlock>

    k_mutex_unlock(p_mutex);
    return NRF_CC310_PLATFORM_SUCCESS;
     dce:	2000      	movs	r0, #0
}
     dd0:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
     dd2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
     dd6:	e7fb      	b.n	dd0 <mutex_unlock+0x10>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
     dd8:	4800      	ldr	r0, [pc, #0]	; (ddc <mutex_unlock+0x1c>)
     dda:	e7f9      	b.n	dd0 <mutex_unlock+0x10>
     ddc:	ffff8fea 	.word	0xffff8fea

00000de0 <mutex_free>:
static void mutex_free(nrf_cc310_platform_mutex_t *mutex) {
     de0:	b538      	push	{r3, r4, r5, lr}
    if (mutex == NULL) {
     de2:	4604      	mov	r4, r0
     de4:	b918      	cbnz	r0, dee <mutex_free+0xe>
        platform_abort_apis.abort_fn(
     de6:	4b0b      	ldr	r3, [pc, #44]	; (e14 <mutex_free+0x34>)
     de8:	480b      	ldr	r0, [pc, #44]	; (e18 <mutex_free+0x38>)
     dea:	685b      	ldr	r3, [r3, #4]
     dec:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
     dee:	6865      	ldr	r5, [r4, #4]
     df0:	b155      	cbz	r5, e08 <mutex_free+0x28>
    if ((mutex->flags & NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED) == 0) {
     df2:	f015 0502 	ands.w	r5, r5, #2
     df6:	6820      	ldr	r0, [r4, #0]
     df8:	d107      	bne.n	e0a <mutex_free+0x2a>
        k_mem_slab_free(&mutex_slab, mutex->mutex);
     dfa:	4601      	mov	r1, r0
     dfc:	4807      	ldr	r0, [pc, #28]	; (e1c <mutex_free+0x3c>)
     dfe:	f001 f841 	bl	1e84 <k_mem_slab_free>
        mutex->mutex = NULL;
     e02:	6025      	str	r5, [r4, #0]
    mutex->flags = NRF_CC310_PLATFORM_MUTEX_MASK_INVALID;
     e04:	2300      	movs	r3, #0
     e06:	6063      	str	r3, [r4, #4]
}
     e08:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
     e0a:	2214      	movs	r2, #20
     e0c:	2100      	movs	r1, #0
     e0e:	f002 ff43 	bl	3c98 <memset>
     e12:	e7f7      	b.n	e04 <mutex_free+0x24>
     e14:	20001428 	.word	0x20001428
     e18:	00004904 	.word	0x00004904
     e1c:	20000028 	.word	0x20000028

00000e20 <mutex_init>:
static void mutex_init(nrf_cc310_platform_mutex_t *mutex) {
     e20:	b510      	push	{r4, lr}
    if (mutex == NULL) {
     e22:	4604      	mov	r4, r0
     e24:	b918      	cbnz	r0, e2e <mutex_init+0xe>
        platform_abort_apis.abort_fn(
     e26:	4b13      	ldr	r3, [pc, #76]	; (e74 <mutex_init+0x54>)
     e28:	4813      	ldr	r0, [pc, #76]	; (e78 <mutex_init+0x58>)
     e2a:	685b      	ldr	r3, [r3, #4]
     e2c:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID &&
     e2e:	6863      	ldr	r3, [r4, #4]
     e30:	b9bb      	cbnz	r3, e62 <mutex_init+0x42>
     e32:	6823      	ldr	r3, [r4, #0]
     e34:	b9ab      	cbnz	r3, e62 <mutex_init+0x42>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
     e36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     e3a:	4621      	mov	r1, r4
     e3c:	480f      	ldr	r0, [pc, #60]	; (e7c <mutex_init+0x5c>)
     e3e:	f000 fff5 	bl	1e2c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
     e42:	b908      	cbnz	r0, e48 <mutex_init+0x28>
     e44:	6823      	ldr	r3, [r4, #0]
     e46:	b91b      	cbnz	r3, e50 <mutex_init+0x30>
            platform_abort_apis.abort_fn(
     e48:	4b0a      	ldr	r3, [pc, #40]	; (e74 <mutex_init+0x54>)
     e4a:	480d      	ldr	r0, [pc, #52]	; (e80 <mutex_init+0x60>)
     e4c:	685b      	ldr	r3, [r3, #4]
     e4e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
     e50:	2214      	movs	r2, #20
     e52:	2100      	movs	r1, #0
     e54:	6820      	ldr	r0, [r4, #0]
     e56:	f002 ff1f 	bl	3c98 <memset>
        mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
     e5a:	6863      	ldr	r3, [r4, #4]
     e5c:	f043 0302 	orr.w	r3, r3, #2
     e60:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
     e62:	6820      	ldr	r0, [r4, #0]
	z_impl_k_mutex_init(mutex);
     e64:	f002 ffb2 	bl	3dcc <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_VALID;
     e68:	6863      	ldr	r3, [r4, #4]
     e6a:	f043 0301 	orr.w	r3, r3, #1
     e6e:	6063      	str	r3, [r4, #4]
}
     e70:	bd10      	pop	{r4, pc}
     e72:	bf00      	nop
     e74:	20001428 	.word	0x20001428
     e78:	00004904 	.word	0x00004904
     e7c:	20000028 	.word	0x20000028
     e80:	0000492a 	.word	0x0000492a

00000e84 <mutex_lock>:
static int32_t mutex_lock(nrf_cc310_platform_mutex_t *mutex) {
     e84:	b508      	push	{r3, lr}
    if(mutex == NULL) {
     e86:	b158      	cbz	r0, ea0 <mutex_lock+0x1c>
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
     e88:	6843      	ldr	r3, [r0, #4]
     e8a:	b163      	cbz	r3, ea6 <mutex_lock+0x22>
    p_mutex = (struct k_mutex *)mutex->mutex;
     e8c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
     e8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     e92:	f001 f825 	bl	1ee0 <z_impl_k_mutex_lock>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
     e96:	4b05      	ldr	r3, [pc, #20]	; (eac <mutex_lock+0x28>)
    if (ret == 0) {
     e98:	2800      	cmp	r0, #0
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
     e9a:	bf18      	it	ne
     e9c:	4618      	movne	r0, r3
}
     e9e:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
     ea0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
     ea4:	e7fb      	b.n	e9e <mutex_lock+0x1a>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
     ea6:	4802      	ldr	r0, [pc, #8]	; (eb0 <mutex_lock+0x2c>)
     ea8:	e7f9      	b.n	e9e <mutex_lock+0x1a>
     eaa:	bf00      	nop
     eac:	ffff8fe9 	.word	0xffff8fe9
     eb0:	ffff8fea 	.word	0xffff8fea

00000eb4 <nrf_cc310_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc310_platform mutex APIs
 */
void nrf_cc310_platform_mutex_init(void)
{
     eb4:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
     eb6:	4906      	ldr	r1, [pc, #24]	; (ed0 <nrf_cc310_platform_mutex_init+0x1c>)
     eb8:	2340      	movs	r3, #64	; 0x40
     eba:	4806      	ldr	r0, [pc, #24]	; (ed4 <nrf_cc310_platform_mutex_init+0x20>)
     ebc:	2214      	movs	r2, #20
     ebe:	f002 ff73 	bl	3da8 <k_mem_slab_init>
            mutex_slab_buffer,
            sizeof(struct k_mutex),
            NUM_MUTEXES);

    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
}
     ec2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
     ec6:	4904      	ldr	r1, [pc, #16]	; (ed8 <nrf_cc310_platform_mutex_init+0x24>)
     ec8:	4804      	ldr	r0, [pc, #16]	; (edc <nrf_cc310_platform_mutex_init+0x28>)
     eca:	f001 be8b 	b.w	2be4 <nrf_cc310_platform_set_mutexes>
     ece:	bf00      	nop
     ed0:	20000044 	.word	0x20000044
     ed4:	20000028 	.word	0x20000028
     ed8:	000044ec 	.word	0x000044ec
     edc:	000044dc 	.word	0x000044dc

00000ee0 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     ee0:	4804      	ldr	r0, [pc, #16]	; (ef4 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
     ee2:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
     ee4:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
     ee6:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     ee8:	d003      	beq.n	ef2 <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     eea:	4903      	ldr	r1, [pc, #12]	; (ef8 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
     eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
     ef0:	600a      	str	r2, [r1, #0]

00000ef2 <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
     ef2:	4770      	bx	lr
    ldr r0, =_kernel
     ef4:	20000630 	.word	0x20000630
    ldr r1, =_SCS_ICSR
     ef8:	e000ed04 	.word	0xe000ed04

00000efc <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     efc:	4a09      	ldr	r2, [pc, #36]	; (f24 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
     efe:	490a      	ldr	r1, [pc, #40]	; (f28 <arch_swap+0x2c>)
	_current->arch.basepri = key;
     f00:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     f02:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
     f04:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
     f06:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     f08:	4908      	ldr	r1, [pc, #32]	; (f2c <arch_swap+0x30>)
     f0a:	684b      	ldr	r3, [r1, #4]
     f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     f10:	604b      	str	r3, [r1, #4]
     f12:	2300      	movs	r3, #0
     f14:	f383 8811 	msr	BASEPRI, r3
     f18:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
     f1c:	6893      	ldr	r3, [r2, #8]
}
     f1e:	6e98      	ldr	r0, [r3, #104]	; 0x68
     f20:	4770      	bx	lr
     f22:	bf00      	nop
     f24:	20000630 	.word	0x20000630
     f28:	00004530 	.word	0x00004530
     f2c:	e000ed00 	.word	0xe000ed00

00000f30 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     f30:	4912      	ldr	r1, [pc, #72]	; (f7c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
     f32:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     f34:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
     f38:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
     f3a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     f3e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     f42:	2020      	movs	r0, #32
    msr BASEPRI, r0
     f44:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
     f48:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
     f4c:	4f0c      	ldr	r7, [pc, #48]	; (f80 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     f4e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
     f52:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
     f54:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
     f56:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
     f58:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
     f5a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     f5c:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     f5e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
     f62:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
     f64:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
     f66:	f002 fe17 	bl	3b98 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
     f6a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     f6e:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
     f72:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
     f76:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
     f7a:	4770      	bx	lr
    ldr r1, =_kernel
     f7c:	20000630 	.word	0x20000630
    ldr v4, =_SCS_ICSR
     f80:	e000ed04 	.word	0xe000ed04

00000f84 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
     f84:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     f88:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     f8a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     f8e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     f92:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
     f94:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
     f98:	2902      	cmp	r1, #2
    beq _oops
     f9a:	d0ff      	beq.n	f9c <_oops>

00000f9c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
     f9c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
     f9e:	f002 fdf0 	bl	3b82 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
     fa2:	bd01      	pop	{r0, pc}

00000fa4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     fa4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     fa6:	2b00      	cmp	r3, #0
     fa8:	db08      	blt.n	fbc <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     faa:	2201      	movs	r2, #1
     fac:	f000 001f 	and.w	r0, r0, #31
     fb0:	fa02 f000 	lsl.w	r0, r2, r0
     fb4:	4a02      	ldr	r2, [pc, #8]	; (fc0 <arch_irq_enable+0x1c>)
     fb6:	095b      	lsrs	r3, r3, #5
     fb8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
     fbc:	4770      	bx	lr
     fbe:	bf00      	nop
     fc0:	e000e100 	.word	0xe000e100

00000fc4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     fc4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
     fc6:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
     fc8:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     fcc:	bfa8      	it	ge
     fce:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
     fd2:	ea4f 1141 	mov.w	r1, r1, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     fd6:	bfb8      	it	lt
     fd8:	4b05      	ldrlt	r3, [pc, #20]	; (ff0 <z_arm_irq_priority_set+0x2c>)
     fda:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     fdc:	bfab      	itete	ge
     fde:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     fe2:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     fe6:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     fea:	5419      	strblt	r1, [r3, r0]
}
     fec:	4770      	bx	lr
     fee:	bf00      	nop
     ff0:	e000ed14 	.word	0xe000ed14

00000ff4 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
     ff4:	b573      	push	{r0, r1, r4, r5, r6, lr}
     ff6:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
     ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
     ffa:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
     ffc:	9300      	str	r3, [sp, #0]
     ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
	stackEnd = pStackMem + stackSize;
    1000:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    1002:	f002 ff99 	bl	3f38 <z_new_thread_init>
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    1006:	4a0b      	ldr	r2, [pc, #44]	; (1034 <arch_new_thread+0x40>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1008:	f1a4 0320 	sub.w	r3, r4, #32
    100c:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    1010:	f022 0201 	bic.w	r2, r2, #1
    1014:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    1016:	9a06      	ldr	r2, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
    1018:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    101a:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    101c:	9a07      	ldr	r2, [sp, #28]
    101e:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    1020:	9a08      	ldr	r2, [sp, #32]
    1022:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
    1024:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1028:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    102a:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    102c:	2300      	movs	r3, #0
    102e:	666b      	str	r3, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1030:	b002      	add	sp, #8
    1032:	bd70      	pop	{r4, r5, r6, pc}
    1034:	000035d3 	.word	0x000035d3

00001038 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    1038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    103a:	461e      	mov	r6, r3
    103c:	4605      	mov	r5, r0
    103e:	460c      	mov	r4, r1
    1040:	4617      	mov	r7, r2
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    1042:	2300      	movs	r3, #0
    1044:	eee1 3a10 	vmsr	fpscr, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    1048:	f000 f9c4 	bl	13d4 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    104c:	4b0a      	ldr	r3, [pc, #40]	; (1078 <arch_switch_to_main_thread+0x40>)
	start_of_main_stack =
    104e:	443c      	add	r4, r7
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1050:	4628      	mov	r0, r5
	_current = main_thread;
    1052:	609d      	str	r5, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    1054:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1058:	f002 fd9e 	bl	3b98 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    105c:	4630      	mov	r0, r6
    105e:	f384 8809 	msr	PSP, r4
    1062:	2100      	movs	r1, #0
    1064:	b663      	cpsie	if
    1066:	f381 8811 	msr	BASEPRI, r1
    106a:	f3bf 8f6f 	isb	sy
    106e:	2200      	movs	r2, #0
    1070:	2300      	movs	r3, #0
    1072:	f002 faae 	bl	35d2 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1076:	bf00      	nop
    1078:	20000630 	.word	0x20000630

0000107c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    107c:	4901      	ldr	r1, [pc, #4]	; (1084 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    107e:	2210      	movs	r2, #16
	str r2, [r1]
    1080:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    1082:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1084:	e000ed10 	.word	0xe000ed10

00001088 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1088:	4040      	eors	r0, r0
	msr BASEPRI, r0
    108a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    108e:	bf30      	wfi

	bx lr
    1090:	4770      	bx	lr
    1092:	bf00      	nop

00001094 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
    1094:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1098:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    109c:	4672      	mov	r2, lr

	push {r0, lr}
    109e:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
    10a0:	f000 f8d2 	bl	1248 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    10a4:	bd01      	pop	{r0, pc}
    10a6:	bf00      	nop

000010a8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    10a8:	bf30      	wfi
    b z_SysNmiOnReset
    10aa:	f7ff bffd 	b.w	10a8 <z_SysNmiOnReset>
    10ae:	bf00      	nop

000010b0 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    10b0:	4a11      	ldr	r2, [pc, #68]	; (10f8 <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    10b2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    10b4:	4b11      	ldr	r3, [pc, #68]	; (10fc <z_arm_prep_c+0x4c>)
    10b6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    10ba:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    10bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    10c0:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    10c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    10c8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    10cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
    10d0:	4a0b      	ldr	r2, [pc, #44]	; (1100 <z_arm_prep_c+0x50>)
    10d2:	6853      	ldr	r3, [r2, #4]
    10d4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    10d8:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    10da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    10de:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    10e2:	2300      	movs	r3, #0
    10e4:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    10e8:	f000 fdc0 	bl	1c6c <z_bss_zero>
	z_data_copy();
    10ec:	f000 fdc8 	bl	1c80 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    10f0:	f000 f93e 	bl	1370 <z_arm_int_lib_init>
	z_cstart();
    10f4:	f000 fdf6 	bl	1ce4 <z_cstart>
    10f8:	00000000 	.word	0x00000000
    10fc:	e000ed00 	.word	0xe000ed00
    1100:	e000ef30 	.word	0xe000ef30

00001104 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1104:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1106:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1108:	4a0b      	ldr	r2, [pc, #44]	; (1138 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    110a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    110c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    110e:	bf1e      	ittt	ne
	movne	r1, #0
    1110:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1112:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    1114:	f002 fe46 	blne	3da4 <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1118:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    111a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    111e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1122:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1126:	4905      	ldr	r1, [pc, #20]	; (113c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1128:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    112a:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    112c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    112e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1132:	4903      	ldr	r1, [pc, #12]	; (1140 <_isr_wrapper+0x3c>)
	bx r1
    1134:	4708      	bx	r1
    1136:	0000      	.short	0x0000
	ldr r2, =_kernel
    1138:	20000630 	.word	0x20000630
	ldr r1, =_sw_isr_table
    113c:	00004020 	.word	0x00004020
	ldr r1, =z_arm_int_exit
    1140:	00000ee1 	.word	0x00000ee1

00001144 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    1144:	f002 fbdd 	bl	3902 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1148:	2020      	movs	r0, #32
    msr BASEPRI, r0
    114a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    114e:	4808      	ldr	r0, [pc, #32]	; (1170 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1150:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1154:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1156:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    115a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    115e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1160:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1162:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1166:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    116a:	f7ff ffa1 	bl	10b0 <z_arm_prep_c>
    116e:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    1170:	20000bd0 	.word	0x20000bd0

00001174 <mem_manage_fault.isra.2>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1174:	4b0c      	ldr	r3, [pc, #48]	; (11a8 <mem_manage_fault.isra.2+0x34>)
    1176:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    117a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    117c:	0792      	lsls	r2, r2, #30
    117e:	d508      	bpl.n	1192 <mem_manage_fault.isra.2+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    1180:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1182:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1184:	0612      	lsls	r2, r2, #24
    1186:	d504      	bpl.n	1192 <mem_manage_fault.isra.2+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    1188:	b118      	cbz	r0, 1192 <mem_manage_fault.isra.2+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    118a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    118c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1190:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    1192:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1194:	4b04      	ldr	r3, [pc, #16]	; (11a8 <mem_manage_fault.isra.2+0x34>)
    1196:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    119a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    119c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    119e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    11a2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    11a4:	7008      	strb	r0, [r1, #0]

	return reason;
}
    11a6:	4770      	bx	lr
    11a8:	e000ed00 	.word	0xe000ed00

000011ac <bus_fault.isra.3>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    11ac:	4b0d      	ldr	r3, [pc, #52]	; (11e4 <bus_fault.isra.3+0x38>)
    11ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    11b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    11b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    11b4:	0592      	lsls	r2, r2, #22
    11b6:	d508      	bpl.n	11ca <bus_fault.isra.3+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    11b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    11ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    11bc:	0412      	lsls	r2, r2, #16
    11be:	d504      	bpl.n	11ca <bus_fault.isra.3+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    11c0:	b118      	cbz	r0, 11ca <bus_fault.isra.3+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    11c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    11c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    11c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    11ca:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    11cc:	4b05      	ldr	r3, [pc, #20]	; (11e4 <bus_fault.isra.3+0x38>)
    11ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    11d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    11d2:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    11d4:	bf58      	it	pl
    11d6:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    11d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    11da:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    11de:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    11e0:	7008      	strb	r0, [r1, #0]

	return reason;
}
    11e2:	4770      	bx	lr
    11e4:	e000ed00 	.word	0xe000ed00

000011e8 <usage_fault.isra.4>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    11e8:	4b07      	ldr	r3, [pc, #28]	; (1208 <usage_fault.isra.4+0x20>)

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;

	return reason;
}
    11ea:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    11ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    11ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    11f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    11f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    11f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    11f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    11f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    11fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    11fc:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1200:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1204:	629a      	str	r2, [r3, #40]	; 0x28
}
    1206:	4770      	bx	lr
    1208:	e000ed00 	.word	0xe000ed00

0000120c <secure_fault.isra.5>:
 */
static void secure_fault(const z_arch_esf_t *esf)
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
    120c:	4b0d      	ldr	r3, [pc, #52]	; (1244 <secure_fault.isra.5+0x38>)
    120e:	699a      	ldr	r2, [r3, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    1210:	695a      	ldr	r2, [r3, #20]
		PR_EXC("  Address: 0x%x", sfar);
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    1212:	695a      	ldr	r2, [r3, #20]
    1214:	07d0      	lsls	r0, r2, #31
    1216:	d40f      	bmi.n	1238 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid entry point");
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    1218:	695a      	ldr	r2, [r3, #20]
    121a:	0791      	lsls	r1, r2, #30
    121c:	d40c      	bmi.n	1238 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid integrity signature");
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    121e:	695a      	ldr	r2, [r3, #20]
    1220:	0752      	lsls	r2, r2, #29
    1222:	d409      	bmi.n	1238 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid exception return");
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    1224:	695a      	ldr	r2, [r3, #20]
    1226:	0710      	lsls	r0, r2, #28
    1228:	d406      	bmi.n	1238 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Attribution unit violation");
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    122a:	695a      	ldr	r2, [r3, #20]
    122c:	06d1      	lsls	r1, r2, #27
    122e:	d403      	bmi.n	1238 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    1230:	695a      	ldr	r2, [r3, #20]
    1232:	0692      	lsls	r2, r2, #26
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    1234:	bf58      	it	pl
    1236:	695a      	ldrpl	r2, [r3, #20]
		PR_FAULT_INFO("  Lazy state error");
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    1238:	695a      	ldr	r2, [r3, #20]
    123a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    123e:	615a      	str	r2, [r3, #20]
}
    1240:	4770      	bx	lr
    1242:	bf00      	nop
    1244:	e000edd0 	.word	0xe000edd0

00001248 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    1248:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    124a:	4b41      	ldr	r3, [pc, #260]	; (1350 <z_arm_fault+0x108>)
{
    124c:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    124e:	685b      	ldr	r3, [r3, #4]
    1250:	2500      	movs	r5, #0
    1252:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1256:	f385 8811 	msr	BASEPRI, r5
    125a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    125e:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
    1262:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
    1266:	d11e      	bne.n	12a6 <z_arm_fault+0x5e>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    1268:	f012 0401 	ands.w	r4, r2, #1
    126c:	d01a      	beq.n	12a4 <z_arm_fault+0x5c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    126e:	0656      	lsls	r6, r2, #25
    1270:	f002 0408 	and.w	r4, r2, #8
    1274:	d467      	bmi.n	1346 <z_arm_fault+0xfe>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    1276:	f082 0204 	eor.w	r2, r2, #4
    127a:	f3c2 0580 	ubfx	r5, r2, #2, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    127e:	b164      	cbz	r4, 129a <z_arm_fault+0x52>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    1280:	f3ef 8689 	mrs	r6, PSP_NS
	*recoverable = false;
    1284:	2200      	movs	r2, #0
	switch (fault) {
    1286:	3b03      	subs	r3, #3
	*recoverable = false;
    1288:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    128c:	2b04      	cmp	r3, #4
    128e:	d84b      	bhi.n	1328 <z_arm_fault+0xe0>
    1290:	e8df f003 	tbb	[pc, r3]
    1294:	41504c0b 	.word	0x41504c0b
    1298:	48          	.byte	0x48
    1299:	00          	.byte	0x00
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    129a:	f3ef 8688 	mrs	r6, MSP_NS
  return(result);
    129e:	e7f1      	b.n	1284 <z_arm_fault+0x3c>
			ptr_esf =  (z_arch_esf_t *)psp;
    12a0:	460e      	mov	r6, r1
    12a2:	e7ef      	b.n	1284 <z_arm_fault+0x3c>
	*nested_exc = false;
    12a4:	4625      	mov	r5, r4
		return NULL;
    12a6:	462e      	mov	r6, r5
    12a8:	e7ec      	b.n	1284 <z_arm_fault+0x3c>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    12aa:	4b29      	ldr	r3, [pc, #164]	; (1350 <z_arm_fault+0x108>)
    12ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    12ae:	0792      	lsls	r2, r2, #30
    12b0:	d43a      	bmi.n	1328 <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    12b2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    12b4:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    12b8:	d008      	beq.n	12cc <z_arm_fault+0x84>
		if (SCB_MMFSR != 0) {
    12ba:	3328      	adds	r3, #40	; 0x28
    12bc:	781b      	ldrb	r3, [r3, #0]
    12be:	b1eb      	cbz	r3, 12fc <z_arm_fault+0xb4>
			reason = mem_manage_fault(esf, 1, recoverable);
    12c0:	2001      	movs	r0, #1
    12c2:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    12c6:	f7ff ff55 	bl	1174 <mem_manage_fault.isra.2>
    12ca:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    12cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12d0:	b993      	cbnz	r3, 12f8 <z_arm_fault+0xb0>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    12d2:	2220      	movs	r2, #32
    12d4:	4631      	mov	r1, r6
    12d6:	a802      	add	r0, sp, #8
    12d8:	f002 fcb4 	bl	3c44 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    12dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    12de:	b36d      	cbz	r5, 133c <z_arm_fault+0xf4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    12e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
    12e4:	b922      	cbnz	r2, 12f0 <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    12e6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    12ea:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    12ee:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    12f0:	a902      	add	r1, sp, #8
    12f2:	4620      	mov	r0, r4
    12f4:	f002 fc43 	bl	3b7e <z_arm_fatal_error>
}
    12f8:	b00b      	add	sp, #44	; 0x2c
    12fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
    12fc:	4b15      	ldr	r3, [pc, #84]	; (1354 <z_arm_fault+0x10c>)
    12fe:	781b      	ldrb	r3, [r3, #0]
    1300:	b12b      	cbz	r3, 130e <z_arm_fault+0xc6>
			reason = bus_fault(esf, 1, recoverable);
    1302:	2001      	movs	r0, #1
    1304:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    1308:	f7ff ff50 	bl	11ac <bus_fault.isra.3>
    130c:	e7dd      	b.n	12ca <z_arm_fault+0x82>
		} else if (SCB_UFSR != 0) {
    130e:	4b12      	ldr	r3, [pc, #72]	; (1358 <z_arm_fault+0x110>)
    1310:	881f      	ldrh	r7, [r3, #0]
    1312:	b2bf      	uxth	r7, r7
    1314:	b117      	cbz	r7, 131c <z_arm_fault+0xd4>
		reason = usage_fault(esf);
    1316:	f7ff ff67 	bl	11e8 <usage_fault.isra.4>
    131a:	e7d6      	b.n	12ca <z_arm_fault+0x82>
		} else if (SAU->SFSR != 0) {
    131c:	4b0f      	ldr	r3, [pc, #60]	; (135c <z_arm_fault+0x114>)
    131e:	695c      	ldr	r4, [r3, #20]
    1320:	2c00      	cmp	r4, #0
    1322:	d0d3      	beq.n	12cc <z_arm_fault+0x84>
		secure_fault(esf);
    1324:	f7ff ff72 	bl	120c <secure_fault.isra.5>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    1328:	2400      	movs	r4, #0
    132a:	e7cf      	b.n	12cc <z_arm_fault+0x84>
		reason = mem_manage_fault(esf, 0, recoverable);
    132c:	f10d 0107 	add.w	r1, sp, #7
    1330:	2000      	movs	r0, #0
    1332:	e7c8      	b.n	12c6 <z_arm_fault+0x7e>
		reason = bus_fault(esf, 0, recoverable);
    1334:	f10d 0107 	add.w	r1, sp, #7
    1338:	2000      	movs	r0, #0
    133a:	e7e5      	b.n	1308 <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    133c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1340:	f023 0301 	bic.w	r3, r3, #1
    1344:	e7d3      	b.n	12ee <z_arm_fault+0xa6>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1346:	2c00      	cmp	r4, #0
    1348:	d1aa      	bne.n	12a0 <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)msp;
    134a:	4606      	mov	r6, r0
			*nested_exc = true;
    134c:	2501      	movs	r5, #1
    134e:	e799      	b.n	1284 <z_arm_fault+0x3c>
    1350:	e000ed00 	.word	0xe000ed00
    1354:	e000ed29 	.word	0xe000ed29
    1358:	e000ed2a 	.word	0xe000ed2a
    135c:	e000edd0 	.word	0xe000edd0

00001360 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1360:	4a02      	ldr	r2, [pc, #8]	; (136c <z_arm_fault_init+0xc>)
    1362:	6953      	ldr	r3, [r2, #20]
    1364:	f043 0310 	orr.w	r3, r3, #16
    1368:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    136a:	4770      	bx	lr
    136c:	e000ed00 	.word	0xe000ed00

00001370 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    1370:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1372:	2120      	movs	r1, #32
    1374:	4803      	ldr	r0, [pc, #12]	; (1384 <z_arm_int_lib_init+0x14>)
    1376:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1378:	3301      	adds	r3, #1
    137a:	2b41      	cmp	r3, #65	; 0x41
    137c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1380:	d1f9      	bne.n	1376 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1382:	4770      	bx	lr
    1384:	e000e100 	.word	0xe000e100

00001388 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    1388:	b538      	push	{r3, r4, r5, lr}
    138a:	4605      	mov	r5, r0
	__asm__ volatile(
    138c:	f04f 0320 	mov.w	r3, #32
    1390:	f3ef 8411 	mrs	r4, BASEPRI
    1394:	f383 8811 	msr	BASEPRI, r3
    1398:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    139c:	f002 fddb 	bl	3f56 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    13a0:	4b0a      	ldr	r3, [pc, #40]	; (13cc <z_impl_k_thread_abort+0x44>)
    13a2:	689b      	ldr	r3, [r3, #8]
    13a4:	42ab      	cmp	r3, r5
    13a6:	d10b      	bne.n	13c0 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    13a8:	4b09      	ldr	r3, [pc, #36]	; (13d0 <z_impl_k_thread_abort+0x48>)
    13aa:	685a      	ldr	r2, [r3, #4]
    13ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
    13b0:	b912      	cbnz	r2, 13b8 <z_impl_k_thread_abort+0x30>
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    13b2:	4620      	mov	r0, r4
    13b4:	f7ff fda2 	bl	efc <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    13b8:	685a      	ldr	r2, [r3, #4]
    13ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    13be:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    13c0:	4620      	mov	r0, r4
}
    13c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    13c6:	f002 bd34 	b.w	3e32 <z_reschedule_irqlock>
    13ca:	bf00      	nop
    13cc:	20000630 	.word	0x20000630
    13d0:	e000ed00 	.word	0xe000ed00

000013d4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    13d4:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    13d6:	4b0e      	ldr	r3, [pc, #56]	; (1410 <z_arm_configure_static_mpu_regions+0x3c>)
{
    13d8:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    13da:	9302      	str	r3, [sp, #8]
    13dc:	4b0d      	ldr	r3, [pc, #52]	; (1414 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    13de:	4c0e      	ldr	r4, [pc, #56]	; (1418 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    13e0:	9303      	str	r3, [sp, #12]
    13e2:	4b0e      	ldr	r3, [pc, #56]	; (141c <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    13e4:	4a0e      	ldr	r2, [pc, #56]	; (1420 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    13e6:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    13e8:	ab02      	add	r3, sp, #8
    13ea:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    13ec:	a801      	add	r0, sp, #4
    13ee:	4623      	mov	r3, r4
    13f0:	2101      	movs	r1, #1
    13f2:	f000 f869 	bl	14c8 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    13f6:	2300      	movs	r3, #0
    13f8:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    13fa:	4b0a      	ldr	r3, [pc, #40]	; (1424 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    13fc:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    13fe:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1400:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    1402:	9305      	str	r3, [sp, #20]
    1404:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1406:	f000 f901 	bl	160c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    140a:	b008      	add	sp, #32
    140c:	bd10      	pop	{r4, pc}
    140e:	bf00      	nop
    1410:	20000000 	.word	0x20000000
    1414:	00000000 	.word	0x00000000
    1418:	20010000 	.word	0x20010000
    141c:	00010006 	.word	0x00010006
    1420:	20000000 	.word	0x20000000
    1424:	20000000 	.word	0x20000000

00001428 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    1428:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    142a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    142c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    142e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    1432:	f004 031f 	and.w	r3, r4, #31
    1436:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1438:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    143a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    143c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    1440:	4904      	ldr	r1, [pc, #16]	; (1454 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    1442:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    1446:	f043 0301 	orr.w	r3, r3, #1
    144a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    144c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    144e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    1450:	bd10      	pop	{r4, pc}
    1452:	bf00      	nop
    1454:	e000ed90 	.word	0xe000ed90

00001458 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1458:	2205      	movs	r2, #5
    145a:	4b03      	ldr	r3, [pc, #12]	; (1468 <arm_core_mpu_enable+0x10>)
    145c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    145e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1462:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1466:	4770      	bx	lr
    1468:	e000ed90 	.word	0xe000ed90

0000146c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    146c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1470:	2200      	movs	r2, #0
    1472:	4b01      	ldr	r3, [pc, #4]	; (1478 <arm_core_mpu_disable+0xc>)
    1474:	605a      	str	r2, [r3, #4]
}
    1476:	4770      	bx	lr
    1478:	e000ed90 	.word	0xe000ed90

0000147c <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    147c:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    147e:	4d0e      	ldr	r5, [pc, #56]	; (14b8 <arm_mpu_init+0x3c>)
    1480:	682e      	ldr	r6, [r5, #0]
    1482:	2e10      	cmp	r6, #16
    1484:	d815      	bhi.n	14b2 <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1486:	2400      	movs	r4, #0
	arm_core_mpu_disable();
    1488:	f7ff fff0 	bl	146c <arm_core_mpu_disable>
	MPU->MAIR0 =
    148c:	4b0b      	ldr	r3, [pc, #44]	; (14bc <arm_mpu_init+0x40>)
    148e:	4a0c      	ldr	r2, [pc, #48]	; (14c0 <arm_mpu_init+0x44>)
    1490:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1492:	42a6      	cmp	r6, r4
    1494:	d105      	bne.n	14a2 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1496:	4b0b      	ldr	r3, [pc, #44]	; (14c4 <arm_mpu_init+0x48>)
    1498:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
    149a:	f7ff ffdd 	bl	1458 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    149e:	2000      	movs	r0, #0
}
    14a0:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    14a2:	6869      	ldr	r1, [r5, #4]
    14a4:	4620      	mov	r0, r4
    14a6:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    14aa:	f7ff ffbd 	bl	1428 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    14ae:	3401      	adds	r4, #1
    14b0:	e7ef      	b.n	1492 <arm_mpu_init+0x16>
		return -1;
    14b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    14b6:	e7f3      	b.n	14a0 <arm_mpu_init+0x24>
    14b8:	000042ac 	.word	0x000042ac
    14bc:	e000ed90 	.word	0xe000ed90
    14c0:	0044ffaa 	.word	0x0044ffaa
    14c4:	2000068c 	.word	0x2000068c

000014c8 <arm_core_mpu_configure_static_mpu_regions>:
{
    14c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14cc:	468a      	mov	sl, r1
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    14ce:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    14d2:	4f4c      	ldr	r7, [pc, #304]	; (1604 <arm_core_mpu_configure_static_mpu_regions+0x13c>)
    14d4:	b087      	sub	sp, #28
	int reg_index = start_reg_index;
    14d6:	783c      	ldrb	r4, [r7, #0]
	MPU->RNR = index;
    14d8:	4d4b      	ldr	r5, [pc, #300]	; (1608 <arm_core_mpu_configure_static_mpu_regions+0x140>)
    14da:	f1a0 0804 	sub.w	r8, r0, #4
    14de:	9701      	str	r7, [sp, #4]
	for (i = 0; i < regions_num; i++) {
    14e0:	45d1      	cmp	r9, sl
    14e2:	da07      	bge.n	14f4 <arm_core_mpu_configure_static_mpu_regions+0x2c>
		if (regions[i]->size == 0U) {
    14e4:	f858 3f04 	ldr.w	r3, [r8, #4]!
    14e8:	685e      	ldr	r6, [r3, #4]
    14ea:	b3b6      	cbz	r6, 155a <arm_core_mpu_configure_static_mpu_regions+0x92>
		&&
    14ec:	2e1f      	cmp	r6, #31
    14ee:	d806      	bhi.n	14fe <arm_core_mpu_configure_static_mpu_regions+0x36>
				return reg_index;
    14f0:	f06f 0415 	mvn.w	r4, #21
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    14f4:	9b01      	ldr	r3, [sp, #4]
    14f6:	701c      	strb	r4, [r3, #0]
}
    14f8:	b007      	add	sp, #28
    14fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    14fe:	06f2      	lsls	r2, r6, #27
    1500:	d1f6      	bne.n	14f0 <arm_core_mpu_configure_static_mpu_regions+0x28>
		((part->start &
    1502:	f8d3 b000 	ldr.w	fp, [r3]
		&&
    1506:	f01b 0f1f 	tst.w	fp, #31
    150a:	d1f1      	bne.n	14f0 <arm_core_mpu_configure_static_mpu_regions+0x28>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    150c:	4658      	mov	r0, fp
    150e:	f002 fb6d 	bl	3bec <arm_cmse_mpu_region_get>
    1512:	4607      	mov	r7, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1514:	eb06 000b 	add.w	r0, r6, fp
    1518:	3801      	subs	r0, #1
    151a:	f002 fb67 	bl	3bec <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    151e:	4287      	cmp	r7, r0
    1520:	d1e6      	bne.n	14f0 <arm_core_mpu_configure_static_mpu_regions+0x28>
		if ((u_reg_index == -EINVAL) ||
    1522:	f117 0f16 	cmn.w	r7, #22
    1526:	d0e3      	beq.n	14f0 <arm_core_mpu_configure_static_mpu_regions+0x28>
			(u_reg_index > (reg_index - 1))) {
    1528:	1e62      	subs	r2, r4, #1
		if ((u_reg_index == -EINVAL) ||
    152a:	42ba      	cmp	r2, r7
    152c:	dbe0      	blt.n	14f0 <arm_core_mpu_configure_static_mpu_regions+0x28>
	MPU->RNR = index;
    152e:	60af      	str	r7, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    1530:	68eb      	ldr	r3, [r5, #12]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    1532:	f8d8 1000 	ldr.w	r1, [r8]
	MPU->RNR = index;
    1536:	60af      	str	r7, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1538:	692e      	ldr	r6, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    153a:	f023 0c1f 	bic.w	ip, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    153e:	e9d1 2000 	ldrd	r2, r0, [r1]
    1542:	4410      	add	r0, r2
		if ((regions[i]->start == u_reg_base) &&
    1544:	4594      	cmp	ip, r2
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1546:	f046 061f 	orr.w	r6, r6, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    154a:	f100 3bff 	add.w	fp, r0, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
    154e:	d117      	bne.n	1580 <arm_core_mpu_configure_static_mpu_regions+0xb8>
    1550:	455e      	cmp	r6, fp
    1552:	d105      	bne.n	1560 <arm_core_mpu_configure_static_mpu_regions+0x98>
			mpu_configure_region(u_reg_index, regions[i]);
    1554:	b2f8      	uxtb	r0, r7
    1556:	f002 fb27 	bl	3ba8 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    155a:	f109 0901 	add.w	r9, r9, #1
    155e:	e7bf      	b.n	14e0 <arm_core_mpu_configure_static_mpu_regions+0x18>
	MPU->RNR = index;
    1560:	60af      	str	r7, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1562:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    1564:	f020 001f 	bic.w	r0, r0, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1568:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    156c:	4318      	orrs	r0, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    156e:	60e8      	str	r0, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    1570:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    1572:	f002 fb19 	bl	3ba8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    1576:	f110 0f16 	cmn.w	r0, #22
    157a:	d0b9      	beq.n	14f0 <arm_core_mpu_configure_static_mpu_regions+0x28>
			reg_index++;
    157c:	1c44      	adds	r4, r0, #1
    157e:	e7ec      	b.n	155a <arm_core_mpu_configure_static_mpu_regions+0x92>
		} else if (reg_last == u_reg_last) {
    1580:	3a01      	subs	r2, #1
    1582:	455e      	cmp	r6, fp
    1584:	b2e0      	uxtb	r0, r4
    1586:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = index;
    158a:	60af      	str	r7, [r5, #8]
		} else if (reg_last == u_reg_last) {
    158c:	d105      	bne.n	159a <arm_core_mpu_configure_static_mpu_regions+0xd2>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    158e:	692b      	ldr	r3, [r5, #16]
    1590:	f003 031f 	and.w	r3, r3, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    1594:	431a      	orrs	r2, r3
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1596:	612a      	str	r2, [r5, #16]
    1598:	e7eb      	b.n	1572 <arm_core_mpu_configure_static_mpu_regions+0xaa>
    159a:	692c      	ldr	r4, [r5, #16]
    159c:	f004 0c1f 	and.w	ip, r4, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    15a0:	ea4c 0202 	orr.w	r2, ip, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    15a4:	612a      	str	r2, [r5, #16]
				mpu_configure_region(reg_index, regions[i]);
    15a6:	f002 faff 	bl	3ba8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    15aa:	f110 0f16 	cmn.w	r0, #22
    15ae:	d09f      	beq.n	14f0 <arm_core_mpu_configure_static_mpu_regions+0x28>
	MPU->RNR = index;
    15b0:	60af      	str	r7, [r5, #8]
	attr->rbar = MPU->RBAR &
    15b2:	68ea      	ldr	r2, [r5, #12]
    15b4:	f89d 3010 	ldrb.w	r3, [sp, #16]
			REGION_LIMIT_ADDR((regions[i]->start +
    15b8:	3e01      	subs	r6, #1
	attr->rbar = MPU->RBAR &
    15ba:	f362 0304 	bfi	r3, r2, #0, #5
    15be:	f88d 3010 	strb.w	r3, [sp, #16]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    15c2:	692b      	ldr	r3, [r5, #16]
    15c4:	f89d 2010 	ldrb.w	r2, [sp, #16]
    15c8:	085b      	lsrs	r3, r3, #1
    15ca:	f363 1247 	bfi	r2, r3, #5, #3
    15ce:	f88d 2010 	strb.w	r2, [sp, #16]
			fill_region.base = regions[i]->start +
    15d2:	f8d8 2000 	ldr.w	r2, [r8]
			reg_index++;
    15d6:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
    15d8:	e9d2 3200 	ldrd	r3, r2, [r2]
    15dc:	4413      	add	r3, r2
    15de:	9302      	str	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    15e0:	f023 031f 	bic.w	r3, r3, #31
    15e4:	441e      	add	r6, r3
    15e6:	eba6 060b 	sub.w	r6, r6, fp
    15ea:	b2c4      	uxtb	r4, r0
    15ec:	f026 061f 	bic.w	r6, r6, #31
	if (index > (get_num_regions() - 1)) {
    15f0:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
    15f2:	9605      	str	r6, [sp, #20]
    15f4:	f63f af7c 	bhi.w	14f0 <arm_core_mpu_configure_static_mpu_regions+0x28>
	region_init(index, region_conf);
    15f8:	4620      	mov	r0, r4
    15fa:	a902      	add	r1, sp, #8
    15fc:	f7ff ff14 	bl	1428 <region_init>
			reg_index++;
    1600:	3401      	adds	r4, #1
    1602:	e7aa      	b.n	155a <arm_core_mpu_configure_static_mpu_regions+0x92>
    1604:	2000068c 	.word	0x2000068c
    1608:	e000ed90 	.word	0xe000ed90

0000160c <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    160c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1610:	4c25      	ldr	r4, [pc, #148]	; (16a8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>)
    1612:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1614:	4680      	mov	r8, r0
    1616:	2700      	movs	r7, #0
    1618:	46a1      	mov	r9, r4
	attr->rbar = MPU->RBAR &
    161a:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
    161e:	4d23      	ldr	r5, [pc, #140]	; (16ac <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1620:	4557      	cmp	r7, sl
    1622:	da1a      	bge.n	165a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    1624:	f8d8 3004 	ldr.w	r3, [r8, #4]
    1628:	9301      	str	r3, [sp, #4]
    162a:	2b00      	cmp	r3, #0
    162c:	d036      	beq.n	169c <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    162e:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1632:	4608      	mov	r0, r1
    1634:	9100      	str	r1, [sp, #0]
    1636:	f002 fad9 	bl	3bec <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    163a:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    163e:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1640:	1858      	adds	r0, r3, r1
    1642:	3801      	subs	r0, #1
    1644:	f002 fad2 	bl	3bec <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1648:	4286      	cmp	r6, r0
    164a:	4a19      	ldr	r2, [pc, #100]	; (16b0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
    164c:	d008      	beq.n	1660 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    164e:	2314      	movs	r3, #20
    1650:	435f      	muls	r7, r3
    1652:	f06f 0315 	mvn.w	r3, #21
    1656:	f849 3007 	str.w	r3, [r9, r7]
}
    165a:	b003      	add	sp, #12
    165c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    1660:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
    1664:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    1666:	d0f8      	beq.n	165a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1668:	7813      	ldrb	r3, [r2, #0]
    166a:	42b3      	cmp	r3, r6
    166c:	ddf5      	ble.n	165a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    166e:	fb0b 9307 	mla	r3, fp, r7, r9
	MPU->RNR = index;
    1672:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
    1674:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
    1676:	68e8      	ldr	r0, [r5, #12]
    1678:	7b19      	ldrb	r1, [r3, #12]
    167a:	f360 0104 	bfi	r1, r0, #0, #5
    167e:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1680:	6929      	ldr	r1, [r5, #16]
    1682:	7b18      	ldrb	r0, [r3, #12]
    1684:	0849      	lsrs	r1, r1, #1
    1686:	f361 1047 	bfi	r0, r1, #5, #3
    168a:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    168c:	68eb      	ldr	r3, [r5, #12]
    168e:	f023 031f 	bic.w	r3, r3, #31
    1692:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    1694:	692b      	ldr	r3, [r5, #16]
    1696:	f023 031f 	bic.w	r3, r3, #31
    169a:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    169c:	3701      	adds	r7, #1
    169e:	3414      	adds	r4, #20
    16a0:	f108 080c 	add.w	r8, r8, #12
    16a4:	e7bc      	b.n	1620 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
    16a6:	bf00      	nop
    16a8:	20000544 	.word	0x20000544
    16ac:	e000ed90 	.word	0xe000ed90
    16b0:	2000068c 	.word	0x2000068c

000016b4 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    16b4:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
    16b6:	4b14      	ldr	r3, [pc, #80]	; (1708 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    16b8:	4606      	mov	r6, r0
    16ba:	7818      	ldrb	r0, [r3, #0]
    16bc:	460d      	mov	r5, r1

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    16be:	4602      	mov	r2, r0
  mpu->RLAR = 0U;
    16c0:	2100      	movs	r1, #0
    16c2:	4b12      	ldr	r3, [pc, #72]	; (170c <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    16c4:	2a0f      	cmp	r2, #15
    16c6:	dd07      	ble.n	16d8 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>
    16c8:	2400      	movs	r4, #0
	/* We are going to skip the full partition of the background areas.
	 * So we can disable MPU regions inside which dynamic memroy regions
	 * may be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		ARM_MPU_ClrRegion(dyn_reg_info[i].index);
    16ca:	4a11      	ldr	r2, [pc, #68]	; (1710 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    16cc:	6812      	ldr	r2, [r2, #0]
  mpu->RNR = rnr;
    16ce:	609a      	str	r2, [r3, #8]
  mpu->RLAR = 0U;
    16d0:	611c      	str	r4, [r3, #16]
	for (i = 0; i < regions_num; i++) {
    16d2:	42ac      	cmp	r4, r5
    16d4:	db04      	blt.n	16e0 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>
}
    16d6:	bd70      	pop	{r4, r5, r6, pc}
  mpu->RNR = rnr;
    16d8:	609a      	str	r2, [r3, #8]
  mpu->RLAR = 0U;
    16da:	6119      	str	r1, [r3, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    16dc:	3201      	adds	r2, #1
    16de:	e7f1      	b.n	16c4 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		if (regions[i]->size == 0U) {
    16e0:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    16e4:	684b      	ldr	r3, [r1, #4]
    16e6:	b16b      	cbz	r3, 1704 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>
		&&
    16e8:	2b1f      	cmp	r3, #31
    16ea:	d9f4      	bls.n	16d6 <arm_core_mpu_configure_dynamic_mpu_regions+0x22>
		&&
    16ec:	06da      	lsls	r2, r3, #27
    16ee:	d1f2      	bne.n	16d6 <arm_core_mpu_configure_dynamic_mpu_regions+0x22>
		((part->start &
    16f0:	680b      	ldr	r3, [r1, #0]
		&&
    16f2:	06db      	lsls	r3, r3, #27
    16f4:	d1ef      	bne.n	16d6 <arm_core_mpu_configure_dynamic_mpu_regions+0x22>
		reg_index = mpu_configure_region(reg_index, regions[i]);
    16f6:	b2c0      	uxtb	r0, r0
    16f8:	f002 fa56 	bl	3ba8 <mpu_configure_region>
		if (reg_index == -EINVAL) {
    16fc:	f110 0f16 	cmn.w	r0, #22
    1700:	d0e9      	beq.n	16d6 <arm_core_mpu_configure_dynamic_mpu_regions+0x22>
		reg_index++;
    1702:	3001      	adds	r0, #1
	for (i = 0; i < regions_num; i++) {
    1704:	3401      	adds	r4, #1
    1706:	e7e4      	b.n	16d2 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
    1708:	2000068c 	.word	0x2000068c
    170c:	e000ed90 	.word	0xe000ed90
    1710:	20000544 	.word	0x20000544

00001714 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
    1714:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
    1716:	4b0c      	ldr	r3, [pc, #48]	; (1748 <tz_nonsecure_state_setup+0x34>)
    1718:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
    171a:	6803      	ldr	r3, [r0, #0]
    171c:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
    1720:	6843      	ldr	r3, [r0, #4]
    1722:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
    1726:	7b02      	ldrb	r2, [r0, #12]
    1728:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
    172c:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
    1730:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
    1734:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
    1736:	bf48      	it	mi
    1738:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
    173c:	b109      	cbz	r1, 1742 <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
    173e:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
    1742:	f383 8894 	msr	CONTROL_NS, r3
}
    1746:	4770      	bx	lr
    1748:	e002ed00 	.word	0xe002ed00

0000174c <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    174c:	4a08      	ldr	r2, [pc, #32]	; (1770 <tz_nbanked_exception_target_state_set+0x24>)
    174e:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
    1750:	b148      	cbz	r0, 1766 <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
    1752:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1756:	041b      	lsls	r3, r3, #16
    1758:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    175a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    175e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    1762:	60d3      	str	r3, [r2, #12]
}
    1764:	4770      	bx	lr
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1766:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
    1768:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    176c:	e7f5      	b.n	175a <tz_nbanked_exception_target_state_set+0xe>
    176e:	bf00      	nop
    1770:	e000ed00 	.word	0xe000ed00

00001774 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1774:	4a08      	ldr	r2, [pc, #32]	; (1798 <tz_nonsecure_exception_prio_config+0x24>)
    1776:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
    1778:	b140      	cbz	r0, 178c <tz_nonsecure_exception_prio_config+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    177a:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
    177c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    1780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    1788:	60d3      	str	r3, [r2, #12]
}
    178a:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
    178c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1790:	041b      	lsls	r3, r3, #16
    1792:	0c1b      	lsrs	r3, r3, #16
    1794:	e7f4      	b.n	1780 <tz_nonsecure_exception_prio_config+0xc>
    1796:	bf00      	nop
    1798:	e000ed00 	.word	0xe000ed00

0000179c <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    179c:	4a08      	ldr	r2, [pc, #32]	; (17c0 <tz_nonsecure_system_reset_req_block+0x24>)
    179e:	68d3      	ldr	r3, [r2, #12]
	if (block) {
    17a0:	b140      	cbz	r0, 17b4 <tz_nonsecure_system_reset_req_block+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    17a2:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
    17a4:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    17a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    17ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
    17b0:	60d3      	str	r3, [r2, #12]
}
    17b2:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
    17b4:	f023 0308 	bic.w	r3, r3, #8
    17b8:	041b      	lsls	r3, r3, #16
    17ba:	0c1b      	lsrs	r3, r3, #16
    17bc:	e7f4      	b.n	17a8 <tz_nonsecure_system_reset_req_block+0xc>
    17be:	bf00      	nop
    17c0:	e000ed00 	.word	0xe000ed00

000017c4 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
    17c4:	4a03      	ldr	r2, [pc, #12]	; (17d4 <tz_nonsecure_fpu_access_enable+0x10>)
    17c6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    17ca:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    17ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
    17d2:	4770      	bx	lr
    17d4:	e000ed00 	.word	0xe000ed00

000017d8 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
    17d8:	4b08      	ldr	r3, [pc, #32]	; (17fc <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
    17da:	681a      	ldr	r2, [r3, #0]
    17dc:	b118      	cbz	r0, 17e6 <tz_sau_configure+0xe>
    17de:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    17e2:	601a      	str	r2, [r3, #0]
		}
	}
}
    17e4:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
    17e6:	f022 0201 	bic.w	r2, r2, #1
    17ea:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    17ec:	681a      	ldr	r2, [r3, #0]
		if (allns) {
    17ee:	b111      	cbz	r1, 17f6 <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    17f0:	f042 0202 	orr.w	r2, r2, #2
    17f4:	e7f5      	b.n	17e2 <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    17f6:	f022 0202 	bic.w	r2, r2, #2
    17fa:	e7f2      	b.n	17e2 <tz_sau_configure+0xa>
    17fc:	e000edd0 	.word	0xe000edd0

00001800 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1800:	4b01      	ldr	r3, [pc, #4]	; (1808 <__stdout_hook_install+0x8>)
    1802:	6018      	str	r0, [r3, #0]
}
    1804:	4770      	bx	lr
    1806:	bf00      	nop
    1808:	200013f8 	.word	0x200013f8

0000180c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    180c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    180e:	794b      	ldrb	r3, [r1, #5]
    1810:	2b01      	cmp	r3, #1
    1812:	d029      	beq.n	1868 <uarte_nrfx_configure+0x5c>
    1814:	2b03      	cmp	r3, #3
    1816:	d124      	bne.n	1862 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    1818:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    181a:	798b      	ldrb	r3, [r1, #6]
    181c:	2b03      	cmp	r3, #3
    181e:	d120      	bne.n	1862 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    1820:	79cc      	ldrb	r4, [r1, #7]
    1822:	b12c      	cbz	r4, 1830 <uarte_nrfx_configure+0x24>
    1824:	2c01      	cmp	r4, #1
    1826:	d11c      	bne.n	1862 <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
    1828:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    182a:	689b      	ldr	r3, [r3, #8]
    182c:	791b      	ldrb	r3, [r3, #4]
    182e:	b1c3      	cbz	r3, 1862 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    1830:	790a      	ldrb	r2, [r1, #4]
    1832:	b112      	cbz	r2, 183a <uarte_nrfx_configure+0x2e>
    1834:	2a02      	cmp	r2, #2
    1836:	d114      	bne.n	1862 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    1838:	220e      	movs	r2, #14
	switch (baudrate) {
    183a:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
    183e:	6805      	ldr	r5, [r0, #0]
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    1840:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    1842:	68ad      	ldr	r5, [r5, #8]
	switch (baudrate) {
    1844:	42bb      	cmp	r3, r7
	return config->uarte_regs;
    1846:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    1848:	d062      	beq.n	1910 <uarte_nrfx_configure+0x104>
    184a:	d829      	bhi.n	18a0 <uarte_nrfx_configure+0x94>
    184c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    1850:	d061      	beq.n	1916 <uarte_nrfx_configure+0x10a>
    1852:	d814      	bhi.n	187e <uarte_nrfx_configure+0x72>
    1854:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1858:	d05f      	beq.n	191a <uarte_nrfx_configure+0x10e>
    185a:	d807      	bhi.n	186c <uarte_nrfx_configure+0x60>
    185c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    1860:	d05e      	beq.n	1920 <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
    1862:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1866:	e052      	b.n	190e <uarte_nrfx_configure+0x102>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    1868:	2600      	movs	r6, #0
    186a:	e7d6      	b.n	181a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    186c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    1870:	d059      	beq.n	1926 <uarte_nrfx_configure+0x11a>
    1872:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    1876:	d1f4      	bne.n	1862 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    1878:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    187c:	e03c      	b.n	18f8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    187e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    1882:	d053      	beq.n	192c <uarte_nrfx_configure+0x120>
    1884:	d804      	bhi.n	1890 <uarte_nrfx_configure+0x84>
    1886:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    188a:	d1ea      	bne.n	1862 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    188c:	4b32      	ldr	r3, [pc, #200]	; (1958 <uarte_nrfx_configure+0x14c>)
    188e:	e033      	b.n	18f8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    1890:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    1894:	d04c      	beq.n	1930 <uarte_nrfx_configure+0x124>
    1896:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    189a:	d1e2      	bne.n	1862 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    189c:	4b2f      	ldr	r3, [pc, #188]	; (195c <uarte_nrfx_configure+0x150>)
    189e:	e02b      	b.n	18f8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    18a0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    18a4:	d046      	beq.n	1934 <uarte_nrfx_configure+0x128>
    18a6:	d812      	bhi.n	18ce <uarte_nrfx_configure+0xc2>
    18a8:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    18ac:	42bb      	cmp	r3, r7
    18ae:	d044      	beq.n	193a <uarte_nrfx_configure+0x12e>
    18b0:	d805      	bhi.n	18be <uarte_nrfx_configure+0xb2>
    18b2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    18b6:	d1d4      	bne.n	1862 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    18b8:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    18bc:	e01c      	b.n	18f8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    18be:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    18c2:	d03d      	beq.n	1940 <uarte_nrfx_configure+0x134>
    18c4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    18c8:	d1cb      	bne.n	1862 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    18ca:	4b25      	ldr	r3, [pc, #148]	; (1960 <uarte_nrfx_configure+0x154>)
    18cc:	e014      	b.n	18f8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    18ce:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    18d2:	d038      	beq.n	1946 <uarte_nrfx_configure+0x13a>
    18d4:	d808      	bhi.n	18e8 <uarte_nrfx_configure+0xdc>
    18d6:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    18da:	d037      	beq.n	194c <uarte_nrfx_configure+0x140>
    18dc:	4f21      	ldr	r7, [pc, #132]	; (1964 <uarte_nrfx_configure+0x158>)
    18de:	42bb      	cmp	r3, r7
    18e0:	d1bf      	bne.n	1862 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    18e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    18e6:	e007      	b.n	18f8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    18e8:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    18ec:	d031      	beq.n	1952 <uarte_nrfx_configure+0x146>
    18ee:	4f1e      	ldr	r7, [pc, #120]	; (1968 <uarte_nrfx_configure+0x15c>)
    18f0:	42bb      	cmp	r3, r7
    18f2:	d1b6      	bne.n	1862 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    18f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    18f8:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
    18fc:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    18fe:	6883      	ldr	r3, [r0, #8]
    1900:	4322      	orrs	r2, r4
    1902:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    1904:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    1908:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    190c:	2000      	movs	r0, #0
}
    190e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    1910:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    1914:	e7f0      	b.n	18f8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    1916:	4b15      	ldr	r3, [pc, #84]	; (196c <uarte_nrfx_configure+0x160>)
    1918:	e7ee      	b.n	18f8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00027000;
    191a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    191e:	e7eb      	b.n	18f8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
    1920:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    1924:	e7e8      	b.n	18f8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    1926:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    192a:	e7e5      	b.n	18f8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    192c:	4b10      	ldr	r3, [pc, #64]	; (1970 <uarte_nrfx_configure+0x164>)
    192e:	e7e3      	b.n	18f8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    1930:	4b10      	ldr	r3, [pc, #64]	; (1974 <uarte_nrfx_configure+0x168>)
    1932:	e7e1      	b.n	18f8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    1934:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    1938:	e7de      	b.n	18f8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    193a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    193e:	e7db      	b.n	18f8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    1940:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    1944:	e7d8      	b.n	18f8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    1946:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    194a:	e7d5      	b.n	18f8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    194c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    1950:	e7d2      	b.n	18f8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    1952:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    1956:	e7cf      	b.n	18f8 <uarte_nrfx_configure+0xec>
    1958:	00275000 	.word	0x00275000
    195c:	0075c000 	.word	0x0075c000
    1960:	013a9000 	.word	0x013a9000
    1964:	0003d090 	.word	0x0003d090
    1968:	000f4240 	.word	0x000f4240
    196c:	0013b000 	.word	0x0013b000
    1970:	003af000 	.word	0x003af000
    1974:	004ea000 	.word	0x004ea000

00001978 <uarte_0_init>:
	return dev->config->config_info;
    1978:	6802      	ldr	r2, [r0, #0]
	#if defined(DT_NORDIC_NRF_UARTE_UART_0_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_0_CTS_PIN)
		#define UARTE_0_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(0);
    197a:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
    197c:	6892      	ldr	r2, [r2, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    197e:	4b18      	ldr	r3, [pc, #96]	; (19e0 <uarte_0_init+0x68>)
    1980:	6814      	ldr	r4, [r2, #0]
    1982:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	struct uarte_nrfx_data *data = get_dev_data(dev);
    1986:	6885      	ldr	r5, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1988:	2103      	movs	r1, #3
    p_reg->OUTSET = set_mask;
    198a:	609a      	str	r2, [r3, #8]
    p_reg->PSEL.TXD = pseltxd;
    198c:	261d      	movs	r6, #29
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    198e:	2200      	movs	r2, #0
    1990:	f8c3 1274 	str.w	r1, [r3, #628]	; 0x274
    1994:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    1998:	f8c4 650c 	str.w	r6, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    199c:	261c      	movs	r6, #28
    199e:	f8c4 6514 	str.w	r6, [r4, #1300]	; 0x514
    p_reg->OUTSET = set_mask;
    19a2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
    19a6:	609e      	str	r6, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    19a8:	f8c3 126c 	str.w	r1, [r3, #620]	; 0x26c
    19ac:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    p_reg->PSEL.RTS = pselrts;
    19b0:	231b      	movs	r3, #27
    19b2:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    19b6:	231a      	movs	r3, #26
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    19b8:	4629      	mov	r1, r5
    19ba:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    19be:	f7ff ff25 	bl	180c <uarte_nrfx_configure>
	if (err) {
    19c2:	b958      	cbnz	r0, 19dc <uarte_0_init+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    19c4:	2308      	movs	r3, #8
    19c6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    19ca:	441d      	add	r5, r3
NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
    19cc:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    19ce:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    19d2:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    19d6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    19da:	6023      	str	r3, [r4, #0]
	UART_NRF_UARTE_DEVICE(0);
    19dc:	bd70      	pop	{r4, r5, r6, pc}
    19de:	bf00      	nop
    19e0:	50842500 	.word	0x50842500

000019e4 <abi_getter>:
extern const struct fw_info_abi * const _ext_abis_start[];
extern const u32_t _ext_abis_size;
__noinit fw_info_abi_getter abi_getter_in;

int abi_getter(u32_t id, u32_t index, const struct fw_info_abi **abi)
{
    19e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!abi) {
    19e6:	b1da      	cbz	r2, 1a20 <abi_getter+0x3c>
		return -EFAULT;
	}

	bool id_found = false;

	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
    19e8:	2300      	movs	r3, #0
	bool id_found = false;
    19ea:	461c      	mov	r4, r3
    19ec:	4d0e      	ldr	r5, [pc, #56]	; (1a28 <abi_getter+0x44>)
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
    19ee:	4f0f      	ldr	r7, [pc, #60]	; (1a2c <abi_getter+0x48>)
    19f0:	42bb      	cmp	r3, r7
    19f2:	d306      	bcc.n	1a02 <abi_getter+0x1e>
				*abi = ext_abi;
				return 0;
			}
		}
	}
	return id_found ? -EBADF : -ENOENT;
    19f4:	2c00      	cmp	r4, #0
    19f6:	bf14      	ite	ne
    19f8:	f06f 0008 	mvnne.w	r0, #8
    19fc:	f06f 0001 	mvneq.w	r0, #1
    1a00:	e009      	b.n	1a16 <abi_getter+0x32>
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
    1a02:	f855 6b04 	ldr.w	r6, [r5], #4
		if (ext_abi->abi_id == id) {
    1a06:	f8d6 c00c 	ldr.w	ip, [r6, #12]
    1a0a:	4560      	cmp	r0, ip
    1a0c:	d106      	bne.n	1a1c <abi_getter+0x38>
			if (index-- == 0) {
    1a0e:	1e4c      	subs	r4, r1, #1
    1a10:	b911      	cbnz	r1, 1a18 <abi_getter+0x34>
				return 0;
    1a12:	4608      	mov	r0, r1
				*abi = ext_abi;
    1a14:	6016      	str	r6, [r2, #0]
}
    1a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (index-- == 0) {
    1a18:	4621      	mov	r1, r4
			id_found = true;
    1a1a:	2401      	movs	r4, #1
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
    1a1c:	3301      	adds	r3, #1
    1a1e:	e7e7      	b.n	19f0 <abi_getter+0xc>
		return -EFAULT;
    1a20:	f06f 000d 	mvn.w	r0, #13
    1a24:	e7f7      	b.n	1a16 <abi_getter+0x32>
    1a26:	bf00      	nop
    1a28:	000049b4 	.word	0x000049b4
    1a2c:	00000000 	.word	0x00000000

00001a30 <errata_14>:
}

static bool errata_14(void)
{
    uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    1a30:	4b05      	ldr	r3, [pc, #20]	; (1a48 <errata_14+0x18>)
    1a32:	6818      	ldr	r0, [r3, #0]
    uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1a34:	3b04      	subs	r3, #4

    switch(var1)
    1a36:	681b      	ldr	r3, [r3, #0]
    1a38:	2b09      	cmp	r3, #9
    1a3a:	d103      	bne.n	1a44 <errata_14+0x14>
    {
        case 0x09:
            switch(var2)
    1a3c:	1e43      	subs	r3, r0, #1
    1a3e:	4258      	negs	r0, r3
    1a40:	4158      	adcs	r0, r3
    1a42:	4770      	bx	lr
            }
        break;

    }

    return false;
    1a44:	2000      	movs	r0, #0
}
    1a46:	4770      	bx	lr
    1a48:	00ff0134 	.word	0x00ff0134

00001a4c <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    1a4c:	4a4f      	ldr	r2, [pc, #316]	; (1b8c <SystemInit+0x140>)
{
    1a4e:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    1a50:	6813      	ldr	r3, [r2, #0]
    1a52:	f043 0302 	orr.w	r3, r3, #2
    1a56:	6013      	str	r3, [r2, #0]
    uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1a58:	4b4d      	ldr	r3, [pc, #308]	; (1b90 <SystemInit+0x144>)
    switch(var1)
    1a5a:	681b      	ldr	r3, [r3, #0]
    1a5c:	2b09      	cmp	r3, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    1a5e:	bf01      	itttt	eq
    1a60:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    1a64:	2200      	moveq	r2, #0
    1a66:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    1a6a:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (errata_14()){
    1a6e:	f7ff ffdf 	bl	1a30 <errata_14>
    1a72:	b130      	cbz	r0, 1a82 <SystemInit+0x36>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    1a74:	2301      	movs	r3, #1
    1a76:	4a47      	ldr	r2, [pc, #284]	; (1b94 <SystemInit+0x148>)
    1a78:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    1a7a:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    1a7e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578

static bool errata_15(void)
{
    uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1a82:	4b43      	ldr	r3, [pc, #268]	; (1b90 <SystemInit+0x144>)
    uint32_t var2 = *(uint32_t *)0x00FF0134ul;

    switch(var1)
    1a84:	681b      	ldr	r3, [r3, #0]
    1a86:	2b09      	cmp	r3, #9
    1a88:	d107      	bne.n	1a9a <SystemInit+0x4e>
    uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    1a8a:	4b43      	ldr	r3, [pc, #268]	; (1b98 <SystemInit+0x14c>)
    {
        case 0x09:
            switch(var2)
    1a8c:	681b      	ldr	r3, [r3, #0]
    1a8e:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    1a90:	bf1e      	ittt	ne
    1a92:	2201      	movne	r2, #1
    1a94:	4b41      	ldrne	r3, [pc, #260]	; (1b9c <SystemInit+0x150>)
    1a96:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (errata_20()){
    1a9a:	f7ff ffc9 	bl	1a30 <errata_14>
    1a9e:	b110      	cbz	r0, 1aa6 <SystemInit+0x5a>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    1aa0:	220e      	movs	r2, #14
    1aa2:	4b3f      	ldr	r3, [pc, #252]	; (1ba0 <SystemInit+0x154>)
    1aa4:	601a      	str	r2, [r3, #0]
    uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1aa6:	4b3a      	ldr	r3, [pc, #232]	; (1b90 <SystemInit+0x144>)
    switch(var1)
    1aa8:	681b      	ldr	r3, [r3, #0]
    1aaa:	2b09      	cmp	r3, #9
    1aac:	d104      	bne.n	1ab8 <SystemInit+0x6c>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    1aae:	2200      	movs	r2, #0
    1ab0:	4b3c      	ldr	r3, [pc, #240]	; (1ba4 <SystemInit+0x158>)
    1ab2:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    1ab4:	2201      	movs	r2, #1
    1ab6:	605a      	str	r2, [r3, #4]
{
    1ab8:	2200      	movs	r2, #0
    1aba:	00d3      	lsls	r3, r2, #3
    1abc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1ac0:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    1ac4:	3101      	adds	r1, #1
    1ac6:	d008      	beq.n	1ada <SystemInit+0x8e>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1ac8:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1acc:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1ace:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1ad2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1ad6:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1ad8:	d1ef      	bne.n	1aba <SystemInit+0x6e>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    1ada:	4b33      	ldr	r3, [pc, #204]	; (1ba8 <SystemInit+0x15c>)
    1adc:	69da      	ldr	r2, [r3, #28]
    1ade:	07d1      	lsls	r1, r2, #31
    1ae0:	d53b      	bpl.n	1b5a <SystemInit+0x10e>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1ae2:	4b32      	ldr	r3, [pc, #200]	; (1bac <SystemInit+0x160>)
    1ae4:	4619      	mov	r1, r3
    1ae6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1aea:	2a01      	cmp	r2, #1
    1aec:	d1fb      	bne.n	1ae6 <SystemInit+0x9a>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    1aee:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1af2:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    1af6:	2b01      	cmp	r3, #1
    1af8:	d1fb      	bne.n	1af2 <SystemInit+0xa6>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    1afa:	4b2b      	ldr	r3, [pc, #172]	; (1ba8 <SystemInit+0x15c>)
    1afc:	69da      	ldr	r2, [r3, #28]
    1afe:	07d2      	lsls	r2, r2, #31
    1b00:	d508      	bpl.n	1b14 <SystemInit+0xc8>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
    1b02:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1b04:	4929      	ldr	r1, [pc, #164]	; (1bac <SystemInit+0x160>)
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    1b06:	f022 0201 	bic.w	r2, r2, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
    1b0a:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1b0c:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
    1b10:	2a01      	cmp	r2, #1
    1b12:	d1fb      	bne.n	1b0c <SystemInit+0xc0>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    1b14:	6a1a      	ldr	r2, [r3, #32]
    1b16:	3201      	adds	r2, #1
    1b18:	d10a      	bne.n	1b30 <SystemInit+0xe4>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
    1b1a:	6a1a      	ldr	r2, [r3, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    1b1c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    1b20:	f042 0220 	orr.w	r2, r2, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
    1b24:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1b26:	4a21      	ldr	r2, [pc, #132]	; (1bac <SystemInit+0x160>)
    1b28:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    1b2c:	2b01      	cmp	r3, #1
    1b2e:	d1fb      	bne.n	1b28 <SystemInit+0xdc>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    1b30:	2200      	movs	r2, #0
    1b32:	4b1e      	ldr	r3, [pc, #120]	; (1bac <SystemInit+0x160>)
    1b34:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1b38:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1b3c:	2a01      	cmp	r2, #1
    1b3e:	d1fb      	bne.n	1b38 <SystemInit+0xec>
  __ASM volatile ("dsb 0xF":::"memory");
    1b40:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1b44:	491a      	ldr	r1, [pc, #104]	; (1bb0 <SystemInit+0x164>)
    1b46:	4b1b      	ldr	r3, [pc, #108]	; (1bb4 <SystemInit+0x168>)
    1b48:	68ca      	ldr	r2, [r1, #12]
    1b4a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1b4e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1b50:	60cb      	str	r3, [r1, #12]
    1b52:	f3bf 8f4f 	dsb	sy
    __NOP();
    1b56:	bf00      	nop
    1b58:	e7fd      	b.n	1b56 <SystemInit+0x10a>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    1b5a:	6a1b      	ldr	r3, [r3, #32]
    1b5c:	3301      	adds	r3, #1
    1b5e:	d0c0      	beq.n	1ae2 <SystemInit+0x96>
        SCB->NSACR |= (3UL << 10);
    1b60:	4b13      	ldr	r3, [pc, #76]	; (1bb0 <SystemInit+0x164>)
    1b62:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    1b66:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
    1b6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
    1b6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1b72:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    1b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1b7a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b7e:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
    1b82:	4b0d      	ldr	r3, [pc, #52]	; (1bb8 <SystemInit+0x16c>)
    1b84:	4a0d      	ldr	r2, [pc, #52]	; (1bbc <SystemInit+0x170>)
    1b86:	601a      	str	r2, [r3, #0]
}
    1b88:	bd08      	pop	{r3, pc}
    1b8a:	bf00      	nop
    1b8c:	e000edd0 	.word	0xe000edd0
    1b90:	00ff0130 	.word	0x00ff0130
    1b94:	50004a38 	.word	0x50004a38
    1b98:	00ff0134 	.word	0x00ff0134
    1b9c:	50004000 	.word	0x50004000
    1ba0:	5003aee4 	.word	0x5003aee4
    1ba4:	5000470c 	.word	0x5000470c
    1ba8:	00ff8000 	.word	0x00ff8000
    1bac:	50039000 	.word	0x50039000
    1bb0:	e000ed00 	.word	0xe000ed00
    1bb4:	05fa0004 	.word	0x05fa0004
    1bb8:	20001408 	.word	0x20001408
    1bbc:	03d09000 	.word	0x03d09000

00001bc0 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
    1bc0:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    1bc2:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    1bc4:	4b08      	ldr	r3, [pc, #32]	; (1be8 <z_sys_device_do_config_level+0x28>)
    1bc6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    1bca:	3001      	adds	r0, #1
    1bcc:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    1bd0:	42a5      	cmp	r5, r4
    1bd2:	d800      	bhi.n	1bd6 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
    1bd4:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
    1bd6:	6823      	ldr	r3, [r4, #0]
    1bd8:	4620      	mov	r0, r4
    1bda:	685b      	ldr	r3, [r3, #4]
    1bdc:	4798      	blx	r3
		if (retval != 0) {
    1bde:	b100      	cbz	r0, 1be2 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
    1be0:	6066      	str	r6, [r4, #4]
								info++) {
    1be2:	340c      	adds	r4, #12
    1be4:	e7f4      	b.n	1bd0 <z_sys_device_do_config_level+0x10>
    1be6:	bf00      	nop
    1be8:	0000451c 	.word	0x0000451c

00001bec <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    1bec:	4b10      	ldr	r3, [pc, #64]	; (1c30 <z_impl_device_get_binding+0x44>)
{
    1bee:	b570      	push	{r4, r5, r6, lr}
    1bf0:	4605      	mov	r5, r0
    1bf2:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    1bf4:	4c0f      	ldr	r4, [pc, #60]	; (1c34 <z_impl_device_get_binding+0x48>)
    1bf6:	429c      	cmp	r4, r3
    1bf8:	d104      	bne.n	1c04 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    1bfa:	4c0e      	ldr	r4, [pc, #56]	; (1c34 <z_impl_device_get_binding+0x48>)
    1bfc:	42b4      	cmp	r4, r6
    1bfe:	d109      	bne.n	1c14 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    1c00:	2400      	movs	r4, #0
    1c02:	e012      	b.n	1c2a <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    1c04:	6862      	ldr	r2, [r4, #4]
    1c06:	b11a      	cbz	r2, 1c10 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
    1c08:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    1c0a:	6812      	ldr	r2, [r2, #0]
    1c0c:	42aa      	cmp	r2, r5
    1c0e:	d00c      	beq.n	1c2a <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    1c10:	340c      	adds	r4, #12
    1c12:	e7f0      	b.n	1bf6 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
    1c14:	6863      	ldr	r3, [r4, #4]
    1c16:	b90b      	cbnz	r3, 1c1c <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    1c18:	340c      	adds	r4, #12
    1c1a:	e7ef      	b.n	1bfc <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    1c1c:	6823      	ldr	r3, [r4, #0]
    1c1e:	4628      	mov	r0, r5
    1c20:	6819      	ldr	r1, [r3, #0]
    1c22:	f001 ffec 	bl	3bfe <strcmp>
    1c26:	2800      	cmp	r0, #0
    1c28:	d1f6      	bne.n	1c18 <z_impl_device_get_binding+0x2c>
}
    1c2a:	4620      	mov	r0, r4
    1c2c:	bd70      	pop	{r4, r5, r6, pc}
    1c2e:	bf00      	nop
    1c30:	200014cc 	.word	0x200014cc
    1c34:	20001454 	.word	0x20001454

00001c38 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    1c38:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    1c3a:	4d0b      	ldr	r5, [pc, #44]	; (1c68 <idle+0x30>)
    1c3c:	f04f 0220 	mov.w	r2, #32
    1c40:	f3ef 8311 	mrs	r3, BASEPRI
    1c44:	f382 8811 	msr	BASEPRI, r2
    1c48:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    1c4c:	f002 f9b8 	bl	3fc0 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    1c50:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
    1c52:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    1c54:	2802      	cmp	r0, #2
    1c56:	bfd8      	it	le
    1c58:	4608      	movle	r0, r1
    1c5a:	f002 f9c1 	bl	3fe0 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    1c5e:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1c60:	f7ff fa12 	bl	1088 <arch_cpu_idle>
    1c64:	e7ea      	b.n	1c3c <idle+0x4>
    1c66:	bf00      	nop
    1c68:	20000630 	.word	0x20000630

00001c6c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    1c6c:	4802      	ldr	r0, [pc, #8]	; (1c78 <z_bss_zero+0xc>)
    1c6e:	4a03      	ldr	r2, [pc, #12]	; (1c7c <z_bss_zero+0x10>)
    1c70:	2100      	movs	r1, #0
    1c72:	1a12      	subs	r2, r2, r0
    1c74:	f002 b810 	b.w	3c98 <memset>
    1c78:	20000000 	.word	0x20000000
    1c7c:	20000690 	.word	0x20000690

00001c80 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    1c80:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    1c82:	4806      	ldr	r0, [pc, #24]	; (1c9c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    1c84:	4a06      	ldr	r2, [pc, #24]	; (1ca0 <z_data_copy+0x20>)
    1c86:	4907      	ldr	r1, [pc, #28]	; (1ca4 <z_data_copy+0x24>)
    1c88:	1a12      	subs	r2, r2, r0
    1c8a:	f001 ffdb 	bl	3c44 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    1c8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    1c92:	4a05      	ldr	r2, [pc, #20]	; (1ca8 <z_data_copy+0x28>)
    1c94:	4905      	ldr	r1, [pc, #20]	; (1cac <z_data_copy+0x2c>)
    1c96:	4806      	ldr	r0, [pc, #24]	; (1cb0 <z_data_copy+0x30>)
    1c98:	f001 bfd4 	b.w	3c44 <memcpy>
    1c9c:	200013d4 	.word	0x200013d4
    1ca0:	20001530 	.word	0x20001530
    1ca4:	000049b4 	.word	0x000049b4
    1ca8:	00000000 	.word	0x00000000
    1cac:	000049b4 	.word	0x000049b4
    1cb0:	20000000 	.word	0x20000000

00001cb4 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    1cb4:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    1cb6:	2002      	movs	r0, #2
    1cb8:	f7ff ff82 	bl	1bc0 <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    1cbc:	4807      	ldr	r0, [pc, #28]	; (1cdc <bg_thread_main+0x28>)
    1cbe:	f001 fe12 	bl	38e6 <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    1cc2:	2003      	movs	r0, #3
    1cc4:	f7ff ff7c 	bl	1bc0 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
    1cc8:	f000 fc1e 	bl	2508 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    1ccc:	f001 fc34 	bl	3538 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    1cd0:	4a03      	ldr	r2, [pc, #12]	; (1ce0 <bg_thread_main+0x2c>)
    1cd2:	7b13      	ldrb	r3, [r2, #12]
    1cd4:	f023 0301 	bic.w	r3, r3, #1
    1cd8:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    1cda:	bd08      	pop	{r3, pc}
    1cdc:	00004962 	.word	0x00004962
    1ce0:	200005c4 	.word	0x200005c4

00001ce4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    1ce4:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
    1ce6:	4b37      	ldr	r3, [pc, #220]	; (1dc4 <z_cstart+0xe0>)
    1ce8:	b0a2      	sub	sp, #136	; 0x88
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    1cea:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1cee:	2500      	movs	r5, #0
    1cf0:	23e0      	movs	r3, #224	; 0xe0
    1cf2:	4c35      	ldr	r4, [pc, #212]	; (1dc8 <z_cstart+0xe4>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
    1cf4:	2701      	movs	r7, #1
    1cf6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    1cfa:	77e5      	strb	r5, [r4, #31]
    1cfc:	7625      	strb	r5, [r4, #24]
    1cfe:	7665      	strb	r5, [r4, #25]
    1d00:	76a5      	strb	r5, [r4, #26]
    1d02:	76e5      	strb	r5, [r4, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    1d04:	6a63      	ldr	r3, [r4, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    1d06:	4e31      	ldr	r6, [pc, #196]	; (1dcc <z_cstart+0xe8>)
    1d08:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    1d0c:	6263      	str	r3, [r4, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
    1d0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1d10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    1d14:	6263      	str	r3, [r4, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
    1d16:	63a5      	str	r5, [r4, #56]	; 0x38

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    1d18:	f7ff fb22 	bl	1360 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    1d1c:	f7ff f9ae 	bl	107c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    1d20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1d24:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    1d26:	62e3      	str	r3, [r4, #44]	; 0x2c
	struct k_thread dummy_thread = {
    1d28:	ab07      	add	r3, sp, #28
    1d2a:	226c      	movs	r2, #108	; 0x6c
    1d2c:	4629      	mov	r1, r5
    1d2e:	4618      	mov	r0, r3
    1d30:	f001 ffb2 	bl	3c98 <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
    1d34:	4c26      	ldr	r4, [pc, #152]	; (1dd0 <z_cstart+0xec>)
	struct k_thread dummy_thread = {
    1d36:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	_current = &dummy_thread;
    1d3a:	60a0      	str	r0, [r4, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    1d3c:	4628      	mov	r0, r5
    1d3e:	f7ff ff3f 	bl	1bc0 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    1d42:	4638      	mov	r0, r7
    1d44:	f7ff ff3c 	bl	1bc0 <z_sys_device_do_config_level>
	z_sched_init();
    1d48:	f000 fb90 	bl	246c <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    1d4c:	4b21      	ldr	r3, [pc, #132]	; (1dd4 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
    1d4e:	6266      	str	r6, [r4, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    1d50:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1d54:	e9cd 7304 	strd	r7, r3, [sp, #16]
    1d58:	e9cd 5502 	strd	r5, r5, [sp, #8]
    1d5c:	4b1e      	ldr	r3, [pc, #120]	; (1dd8 <z_cstart+0xf4>)
    1d5e:	e9cd 5500 	strd	r5, r5, [sp]
    1d62:	491e      	ldr	r1, [pc, #120]	; (1ddc <z_cstart+0xf8>)
    1d64:	4630      	mov	r0, r6
    1d66:	f000 fbb7 	bl	24d8 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1d6a:	7b73      	ldrb	r3, [r6, #13]
    1d6c:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    1d70:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1d74:	7372      	strb	r2, [r6, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    1d76:	d104      	bne.n	1d82 <z_cstart+0x9e>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
    1d78:	69b3      	ldr	r3, [r6, #24]
    1d7a:	b913      	cbnz	r3, 1d82 <z_cstart+0x9e>
		z_add_thread_to_ready_q(thread);
    1d7c:	4630      	mov	r0, r6
    1d7e:	f000 fa07 	bl	2190 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
    1d82:	4b17      	ldr	r3, [pc, #92]	; (1de0 <z_cstart+0xfc>)
    1d84:	2201      	movs	r2, #1
    1d86:	9305      	str	r3, [sp, #20]
    1d88:	230f      	movs	r3, #15
    1d8a:	e9cd 3203 	strd	r3, r2, [sp, #12]
    1d8e:	2300      	movs	r3, #0
    1d90:	4d14      	ldr	r5, [pc, #80]	; (1de4 <z_cstart+0x100>)
    1d92:	e9cd 3301 	strd	r3, r3, [sp, #4]
    1d96:	9300      	str	r3, [sp, #0]
    1d98:	f44f 72a0 	mov.w	r2, #320	; 0x140
    1d9c:	4b12      	ldr	r3, [pc, #72]	; (1de8 <z_cstart+0x104>)
    1d9e:	4913      	ldr	r1, [pc, #76]	; (1dec <z_cstart+0x108>)
    1da0:	4628      	mov	r0, r5
    1da2:	f000 fb99 	bl	24d8 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1da6:	7b6b      	ldrb	r3, [r5, #13]
	_kernel.cpus[0].idle_thread = &z_idle_thread;
    1da8:	60e5      	str	r5, [r4, #12]
    1daa:	f023 0304 	bic.w	r3, r3, #4
    1dae:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    1db0:	4b0f      	ldr	r3, [pc, #60]	; (1df0 <z_cstart+0x10c>)
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    1db2:	f44f 6280 	mov.w	r2, #1024	; 0x400
	list->tail = (sys_dnode_t *)list;
    1db6:	e9c4 3306 	strd	r3, r3, [r4, #24]
    1dba:	4908      	ldr	r1, [pc, #32]	; (1ddc <z_cstart+0xf8>)
    1dbc:	4b06      	ldr	r3, [pc, #24]	; (1dd8 <z_cstart+0xf4>)
    1dbe:	4803      	ldr	r0, [pc, #12]	; (1dcc <z_cstart+0xe8>)
    1dc0:	f7ff f93a 	bl	1038 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    1dc4:	200013d0 	.word	0x200013d0
    1dc8:	e000ed00 	.word	0xe000ed00
    1dcc:	200005c4 	.word	0x200005c4
    1dd0:	20000630 	.word	0x20000630
    1dd4:	000049aa 	.word	0x000049aa
    1dd8:	00001cb5 	.word	0x00001cb5
    1ddc:	20000690 	.word	0x20000690
    1de0:	000049af 	.word	0x000049af
    1de4:	20000558 	.word	0x20000558
    1de8:	00001c39 	.word	0x00001c39
    1dec:	20000a90 	.word	0x20000a90
    1df0:	20000648 	.word	0x20000648

00001df4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
    1df4:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
    1df6:	2400      	movs	r4, #0
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    1df8:	4b0a      	ldr	r3, [pc, #40]	; (1e24 <init_mem_slab_module+0x30>)
    1dfa:	480b      	ldr	r0, [pc, #44]	; (1e28 <init_mem_slab_module+0x34>)
    1dfc:	4283      	cmp	r3, r0
    1dfe:	d301      	bcc.n	1e04 <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
    1e00:	2000      	movs	r0, #0
    1e02:	bd70      	pop	{r4, r5, r6, pc}
	for (j = 0U; j < slab->num_blocks; j++) {
    1e04:	2100      	movs	r1, #0
	p = slab->buffer;
    1e06:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
    1e08:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    1e0a:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    1e0c:	42a9      	cmp	r1, r5
    1e0e:	d101      	bne.n	1e14 <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    1e10:	331c      	adds	r3, #28
    1e12:	e7f3      	b.n	1dfc <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    1e14:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    1e16:	3101      	adds	r1, #1
		*(char **)p = slab->free_list;
    1e18:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
    1e1a:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
    1e1c:	615a      	str	r2, [r3, #20]
		p += slab->block_size;
    1e1e:	4432      	add	r2, r6
    1e20:	e7f4      	b.n	1e0c <init_mem_slab_module+0x18>
    1e22:	bf00      	nop
    1e24:	200014cc 	.word	0x200014cc
    1e28:	200014cc 	.word	0x200014cc

00001e2c <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
    1e2c:	b510      	push	{r4, lr}
    1e2e:	4613      	mov	r3, r2
    1e30:	460c      	mov	r4, r1
    1e32:	f04f 0220 	mov.w	r2, #32
    1e36:	f3ef 8111 	mrs	r1, BASEPRI
    1e3a:	f382 8811 	msr	BASEPRI, r2
    1e3e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    1e42:	6942      	ldr	r2, [r0, #20]
    1e44:	b15a      	cbz	r2, 1e5e <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
    1e46:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    1e48:	6813      	ldr	r3, [r2, #0]
    1e4a:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    1e4c:	6983      	ldr	r3, [r0, #24]
    1e4e:	3301      	adds	r3, #1
    1e50:	6183      	str	r3, [r0, #24]
		result = 0;
    1e52:	2000      	movs	r0, #0
	__asm__ volatile(
    1e54:	f381 8811 	msr	BASEPRI, r1
    1e58:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    1e5c:	e00d      	b.n	1e7a <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
    1e5e:	b91b      	cbnz	r3, 1e68 <k_mem_slab_alloc+0x3c>
		*mem = NULL;
    1e60:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    1e62:	f06f 000b 	mvn.w	r0, #11
    1e66:	e7f5      	b.n	1e54 <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    1e68:	4602      	mov	r2, r0
    1e6a:	4804      	ldr	r0, [pc, #16]	; (1e7c <k_mem_slab_alloc+0x50>)
    1e6c:	f000 faa8 	bl	23c0 <z_pend_curr>
		if (result == 0) {
    1e70:	b918      	cbnz	r0, 1e7a <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
    1e72:	4b03      	ldr	r3, [pc, #12]	; (1e80 <k_mem_slab_alloc+0x54>)
    1e74:	689b      	ldr	r3, [r3, #8]
    1e76:	695b      	ldr	r3, [r3, #20]
    1e78:	6023      	str	r3, [r4, #0]
}
    1e7a:	bd10      	pop	{r4, pc}
    1e7c:	2000068d 	.word	0x2000068d
    1e80:	20000630 	.word	0x20000630

00001e84 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    1e84:	b570      	push	{r4, r5, r6, lr}
    1e86:	4604      	mov	r4, r0
    1e88:	460d      	mov	r5, r1
	__asm__ volatile(
    1e8a:	f04f 0320 	mov.w	r3, #32
    1e8e:	f3ef 8611 	mrs	r6, BASEPRI
    1e92:	f383 8811 	msr	BASEPRI, r3
    1e96:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    1e9a:	f002 f817 	bl	3ecc <z_unpend_first_thread>

	if (pending_thread != NULL) {
    1e9e:	b180      	cbz	r0, 1ec2 <k_mem_slab_free+0x3e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    1ea0:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    1ea2:	682a      	ldr	r2, [r5, #0]
    1ea4:	6681      	str	r1, [r0, #104]	; 0x68
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    1ea6:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    1ea8:	7b42      	ldrb	r2, [r0, #13]
    1eaa:	06d2      	lsls	r2, r2, #27
    1eac:	d103      	bne.n	1eb6 <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
    1eae:	6983      	ldr	r3, [r0, #24]
    1eb0:	b90b      	cbnz	r3, 1eb6 <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
    1eb2:	f000 f96d 	bl	2190 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
    1eb6:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    1eb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    1ebc:	4807      	ldr	r0, [pc, #28]	; (1edc <k_mem_slab_free+0x58>)
    1ebe:	f001 bfad 	b.w	3e1c <z_reschedule>
		**(char ***)mem = slab->free_list;
    1ec2:	682b      	ldr	r3, [r5, #0]
    1ec4:	6962      	ldr	r2, [r4, #20]
    1ec6:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    1ec8:	682b      	ldr	r3, [r5, #0]
    1eca:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    1ecc:	69a3      	ldr	r3, [r4, #24]
    1ece:	3b01      	subs	r3, #1
    1ed0:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    1ed2:	f386 8811 	msr	BASEPRI, r6
    1ed6:	f3bf 8f6f 	isb	sy
}
    1eda:	bd70      	pop	{r4, r5, r6, pc}
    1edc:	2000068d 	.word	0x2000068d

00001ee0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
    1ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ee2:	4604      	mov	r4, r0
    1ee4:	460f      	mov	r7, r1
	__asm__ volatile(
    1ee6:	f04f 0320 	mov.w	r3, #32
    1eea:	f3ef 8511 	mrs	r5, BASEPRI
    1eee:	f383 8811 	msr	BASEPRI, r3
    1ef2:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    1ef6:	68c2      	ldr	r2, [r0, #12]
    1ef8:	4930      	ldr	r1, [pc, #192]	; (1fbc <z_impl_k_mutex_lock+0xdc>)
    1efa:	b15a      	cbz	r2, 1f14 <z_impl_k_mutex_lock+0x34>
    1efc:	6880      	ldr	r0, [r0, #8]
    1efe:	688e      	ldr	r6, [r1, #8]
    1f00:	42b0      	cmp	r0, r6
    1f02:	d015      	beq.n	1f30 <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
    1f04:	b9b7      	cbnz	r7, 1f34 <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
    1f06:	f385 8811 	msr	BASEPRI, r5
    1f0a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    1f0e:	f06f 000f 	mvn.w	r0, #15
    1f12:	e00c      	b.n	1f2e <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
    1f14:	688b      	ldr	r3, [r1, #8]
    1f16:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    1f1a:	6123      	str	r3, [r4, #16]
		mutex->owner = _current;
    1f1c:	688b      	ldr	r3, [r1, #8]
		mutex->lock_count++;
    1f1e:	3201      	adds	r2, #1
    1f20:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
    1f22:	60a3      	str	r3, [r4, #8]
    1f24:	f385 8811 	msr	BASEPRI, r5
    1f28:	f3bf 8f6f 	isb	sy
		return 0;
    1f2c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    1f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
    1f30:	6923      	ldr	r3, [r4, #16]
    1f32:	e7f2      	b.n	1f1a <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    1f34:	f990 300e 	ldrsb.w	r3, [r0, #14]
    1f38:	f996 100e 	ldrsb.w	r1, [r6, #14]
    1f3c:	4299      	cmp	r1, r3
    1f3e:	bfa8      	it	ge
    1f40:	4619      	movge	r1, r3
    1f42:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    1f46:	4299      	cmp	r1, r3
    1f48:	da2b      	bge.n	1fa2 <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
    1f4a:	f000 fa4d 	bl	23e8 <z_set_prio>
    1f4e:	4606      	mov	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    1f50:	463b      	mov	r3, r7
    1f52:	4622      	mov	r2, r4
    1f54:	4629      	mov	r1, r5
    1f56:	481a      	ldr	r0, [pc, #104]	; (1fc0 <z_impl_k_mutex_lock+0xe0>)
    1f58:	f000 fa32 	bl	23c0 <z_pend_curr>
	if (got_mutex == 0) {
    1f5c:	2800      	cmp	r0, #0
    1f5e:	d0e6      	beq.n	1f2e <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
    1f60:	f04f 0320 	mov.w	r3, #32
    1f64:	f3ef 8511 	mrs	r5, BASEPRI
    1f68:	f383 8811 	msr	BASEPRI, r3
    1f6c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    1f70:	6823      	ldr	r3, [r4, #0]
    1f72:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1f74:	429c      	cmp	r4, r3
    1f76:	d007      	beq.n	1f88 <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
    1f78:	b133      	cbz	r3, 1f88 <z_impl_k_mutex_lock+0xa8>
    1f7a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    1f7e:	4299      	cmp	r1, r3
    1f80:	bfa8      	it	ge
    1f82:	4619      	movge	r1, r3
    1f84:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    1f88:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    1f8a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    1f8e:	4299      	cmp	r1, r3
    1f90:	d109      	bne.n	1fa6 <z_impl_k_mutex_lock+0xc6>
	if (resched) {
    1f92:	b16e      	cbz	r6, 1fb0 <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
    1f94:	4629      	mov	r1, r5
    1f96:	480a      	ldr	r0, [pc, #40]	; (1fc0 <z_impl_k_mutex_lock+0xe0>)
    1f98:	f001 ff40 	bl	3e1c <z_reschedule>
	return -EAGAIN;
    1f9c:	f06f 000a 	mvn.w	r0, #10
    1fa0:	e7c5      	b.n	1f2e <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
    1fa2:	2600      	movs	r6, #0
    1fa4:	e7d4      	b.n	1f50 <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
    1fa6:	f000 fa1f 	bl	23e8 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    1faa:	2800      	cmp	r0, #0
    1fac:	d1f2      	bne.n	1f94 <z_impl_k_mutex_lock+0xb4>
    1fae:	e7f0      	b.n	1f92 <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
    1fb0:	f385 8811 	msr	BASEPRI, r5
    1fb4:	f3bf 8f6f 	isb	sy
    1fb8:	e7f0      	b.n	1f9c <z_impl_k_mutex_lock+0xbc>
    1fba:	bf00      	nop
    1fbc:	20000630 	.word	0x20000630
    1fc0:	2000068d 	.word	0x2000068d

00001fc4 <z_impl_k_mutex_unlock>:
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    1fc4:	4b1e      	ldr	r3, [pc, #120]	; (2040 <z_impl_k_mutex_unlock+0x7c>)
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    1fc6:	b570      	push	{r4, r5, r6, lr}
    1fc8:	689a      	ldr	r2, [r3, #8]
    1fca:	4604      	mov	r4, r0
    1fcc:	7bd3      	ldrb	r3, [r2, #15]
    1fce:	3b01      	subs	r3, #1
    1fd0:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
    1fd2:	68c3      	ldr	r3, [r0, #12]
    1fd4:	2b01      	cmp	r3, #1
    1fd6:	d005      	beq.n	1fe4 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
    1fd8:	3b01      	subs	r3, #1
    1fda:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
    1fdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
    1fe0:	f000 b8ba 	b.w	2158 <k_sched_unlock>
	__asm__ volatile(
    1fe4:	f04f 0320 	mov.w	r3, #32
    1fe8:	f3ef 8611 	mrs	r6, BASEPRI
    1fec:	f383 8811 	msr	BASEPRI, r3
    1ff0:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    1ff4:	6901      	ldr	r1, [r0, #16]
    1ff6:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    1ff8:	f990 300e 	ldrsb.w	r3, [r0, #14]
    1ffc:	4299      	cmp	r1, r3
    1ffe:	d001      	beq.n	2004 <z_impl_k_mutex_unlock+0x40>
		return z_set_prio(mutex->owner, new_prio);
    2000:	f000 f9f2 	bl	23e8 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    2004:	4620      	mov	r0, r4
    2006:	f001 ff61 	bl	3ecc <z_unpend_first_thread>
    200a:	4605      	mov	r5, r0
	mutex->owner = new_owner;
    200c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    200e:	b180      	cbz	r0, 2032 <z_impl_k_mutex_unlock+0x6e>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2010:	7b43      	ldrb	r3, [r0, #13]
    2012:	06db      	lsls	r3, r3, #27
    2014:	d103      	bne.n	201e <z_impl_k_mutex_unlock+0x5a>
	if (z_is_thread_ready(thread)) {
    2016:	6983      	ldr	r3, [r0, #24]
    2018:	b90b      	cbnz	r3, 201e <z_impl_k_mutex_unlock+0x5a>
		z_add_thread_to_ready_q(thread);
    201a:	f000 f8b9 	bl	2190 <z_add_thread_to_ready_q>
	__asm__ volatile(
    201e:	f386 8811 	msr	BASEPRI, r6
    2022:	f3bf 8f6f 	isb	sy
    2026:	2300      	movs	r3, #0
    2028:	66ab      	str	r3, [r5, #104]	; 0x68
		mutex->owner_orig_prio = new_owner->base.prio;
    202a:	f995 300e 	ldrsb.w	r3, [r5, #14]
    202e:	6123      	str	r3, [r4, #16]
    2030:	e7d4      	b.n	1fdc <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0U;
    2032:	60e0      	str	r0, [r4, #12]
    2034:	f386 8811 	msr	BASEPRI, r6
    2038:	f3bf 8f6f 	isb	sy
    203c:	e7ce      	b.n	1fdc <z_impl_k_mutex_unlock+0x18>
    203e:	bf00      	nop
    2040:	20000630 	.word	0x20000630

00002044 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    2044:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    2046:	4c08      	ldr	r4, [pc, #32]	; (2068 <z_reset_time_slice+0x24>)
    2048:	6823      	ldr	r3, [r4, #0]
    204a:	b15b      	cbz	r3, 2064 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    204c:	f7fe fc14 	bl	878 <z_clock_elapsed>
    2050:	6823      	ldr	r3, [r4, #0]
    2052:	4a06      	ldr	r2, [pc, #24]	; (206c <z_reset_time_slice+0x28>)
    2054:	4418      	add	r0, r3
    2056:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    2058:	2100      	movs	r1, #0
	}
}
    205a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    205e:	4618      	mov	r0, r3
    2060:	f001 bfbe 	b.w	3fe0 <z_set_timeout_expiry>
}
    2064:	bd10      	pop	{r4, pc}
    2066:	bf00      	nop
    2068:	20000668 	.word	0x20000668
    206c:	20000630 	.word	0x20000630

00002070 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
    2070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2072:	460d      	mov	r5, r1
	__asm__ volatile(
    2074:	f04f 0320 	mov.w	r3, #32
    2078:	f3ef 8411 	mrs	r4, BASEPRI
    207c:	f383 8811 	msr	BASEPRI, r3
    2080:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
    2084:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2088:	f240 36e7 	movw	r6, #999	; 0x3e7
    208c:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    208e:	2200      	movs	r2, #0
    2090:	fbe1 6700 	umlal	r6, r7, r1, r0
    2094:	4b09      	ldr	r3, [pc, #36]	; (20bc <k_sched_time_slice_set+0x4c>)
    2096:	4630      	mov	r0, r6
    2098:	611a      	str	r2, [r3, #16]
    209a:	4639      	mov	r1, r7
    209c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    20a0:	2300      	movs	r3, #0
    20a2:	f7fe f8bd 	bl	220 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    20a6:	4b06      	ldr	r3, [pc, #24]	; (20c0 <k_sched_time_slice_set+0x50>)
    20a8:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    20aa:	4b06      	ldr	r3, [pc, #24]	; (20c4 <k_sched_time_slice_set+0x54>)
    20ac:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    20ae:	f7ff ffc9 	bl	2044 <z_reset_time_slice>
	__asm__ volatile(
    20b2:	f384 8811 	msr	BASEPRI, r4
    20b6:	f3bf 8f6f 	isb	sy
	}
}
    20ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    20bc:	20000630 	.word	0x20000630
    20c0:	20000668 	.word	0x20000668
    20c4:	20000664 	.word	0x20000664

000020c8 <k_sched_lock>:
	__asm__ volatile(
    20c8:	f04f 0320 	mov.w	r3, #32
    20cc:	f3ef 8111 	mrs	r1, BASEPRI
    20d0:	f383 8811 	msr	BASEPRI, r3
    20d4:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    20d8:	4b04      	ldr	r3, [pc, #16]	; (20ec <k_sched_lock+0x24>)
    20da:	689a      	ldr	r2, [r3, #8]
    20dc:	7bd3      	ldrb	r3, [r2, #15]
    20de:	3b01      	subs	r3, #1
    20e0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    20e2:	f381 8811 	msr	BASEPRI, r1
    20e6:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    20ea:	4770      	bx	lr
    20ec:	20000630 	.word	0x20000630

000020f0 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    20f0:	4b09      	ldr	r3, [pc, #36]	; (2118 <z_priq_dumb_remove+0x28>)
    20f2:	f103 0228 	add.w	r2, r3, #40	; 0x28
    20f6:	4282      	cmp	r2, r0
    20f8:	d105      	bne.n	2106 <z_priq_dumb_remove+0x16>
    20fa:	689b      	ldr	r3, [r3, #8]
    20fc:	428b      	cmp	r3, r1
    20fe:	d102      	bne.n	2106 <z_priq_dumb_remove+0x16>
    2100:	7b4b      	ldrb	r3, [r1, #13]
    2102:	06db      	lsls	r3, r3, #27
    2104:	d106      	bne.n	2114 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    2106:	e9d1 3200 	ldrd	r3, r2, [r1]
    210a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    210c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    210e:	2300      	movs	r3, #0
	node->prev = NULL;
    2110:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    2114:	4770      	bx	lr
    2116:	bf00      	nop
    2118:	20000630 	.word	0x20000630

0000211c <update_cache>:
{
    211c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    211e:	4c0d      	ldr	r4, [pc, #52]	; (2154 <update_cache+0x38>)
{
    2120:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    2122:	f104 0028 	add.w	r0, r4, #40	; 0x28
    2126:	f001 fe9a 	bl	3e5e <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
    212a:	4605      	mov	r5, r0
    212c:	b900      	cbnz	r0, 2130 <update_cache+0x14>
    212e:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    2130:	68a3      	ldr	r3, [r4, #8]
    2132:	b94a      	cbnz	r2, 2148 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    2134:	7b5a      	ldrb	r2, [r3, #13]
    2136:	06d2      	lsls	r2, r2, #27
    2138:	d106      	bne.n	2148 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    213a:	69aa      	ldr	r2, [r5, #24]
    213c:	b922      	cbnz	r2, 2148 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
    213e:	89da      	ldrh	r2, [r3, #14]
    2140:	2a7f      	cmp	r2, #127	; 0x7f
    2142:	d901      	bls.n	2148 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    2144:	6263      	str	r3, [r4, #36]	; 0x24
}
    2146:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
    2148:	429d      	cmp	r5, r3
    214a:	d001      	beq.n	2150 <update_cache+0x34>
			z_reset_time_slice();
    214c:	f7ff ff7a 	bl	2044 <z_reset_time_slice>
		_kernel.ready_q.cache = th;
    2150:	6265      	str	r5, [r4, #36]	; 0x24
}
    2152:	e7f8      	b.n	2146 <update_cache+0x2a>
    2154:	20000630 	.word	0x20000630

00002158 <k_sched_unlock>:
{
    2158:	b510      	push	{r4, lr}
	__asm__ volatile(
    215a:	f04f 0320 	mov.w	r3, #32
    215e:	f3ef 8411 	mrs	r4, BASEPRI
    2162:	f383 8811 	msr	BASEPRI, r3
    2166:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    216a:	4b08      	ldr	r3, [pc, #32]	; (218c <k_sched_unlock+0x34>)
		update_cache(0);
    216c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    216e:	689a      	ldr	r2, [r3, #8]
    2170:	7bd3      	ldrb	r3, [r2, #15]
    2172:	3301      	adds	r3, #1
    2174:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    2176:	f7ff ffd1 	bl	211c <update_cache>
	__asm__ volatile(
    217a:	f384 8811 	msr	BASEPRI, r4
    217e:	f3bf 8f6f 	isb	sy
}
    2182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    2186:	f001 be60 	b.w	3e4a <z_reschedule_unlocked>
    218a:	bf00      	nop
    218c:	20000630 	.word	0x20000630

00002190 <z_add_thread_to_ready_q>:
{
    2190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    2192:	f04f 0320 	mov.w	r3, #32
    2196:	f3ef 8411 	mrs	r4, BASEPRI
    219a:	f383 8811 	msr	BASEPRI, r3
    219e:	f3bf 8f6f 	isb	sy
	return list->head == list;
    21a2:	4a15      	ldr	r2, [pc, #84]	; (21f8 <z_add_thread_to_ready_q+0x68>)
    21a4:	4611      	mov	r1, r2
    21a6:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    21aa:	428b      	cmp	r3, r1
    21ac:	d01d      	beq.n	21ea <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    21ae:	b1e3      	cbz	r3, 21ea <z_add_thread_to_ready_q+0x5a>
    21b0:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    21b2:	f990 500e 	ldrsb.w	r5, [r0, #14]
    21b6:	f993 700e 	ldrsb.w	r7, [r3, #14]
    21ba:	42af      	cmp	r7, r5
    21bc:	dd10      	ble.n	21e0 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
    21be:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    21c0:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    21c4:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    21c6:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    21c8:	7b43      	ldrb	r3, [r0, #13]
    21ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    21ce:	7343      	strb	r3, [r0, #13]
		update_cache(0);
    21d0:	2000      	movs	r0, #0
    21d2:	f7ff ffa3 	bl	211c <update_cache>
	__asm__ volatile(
    21d6:	f384 8811 	msr	BASEPRI, r4
    21da:	f3bf 8f6f 	isb	sy
}
    21de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    21e0:	42b3      	cmp	r3, r6
    21e2:	d002      	beq.n	21ea <z_add_thread_to_ready_q+0x5a>
    21e4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    21e6:	2b00      	cmp	r3, #0
    21e8:	d1e5      	bne.n	21b6 <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
    21ea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    21ec:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    21ee:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    21f0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    21f2:	6018      	str	r0, [r3, #0]
	list->tail = node;
    21f4:	62d0      	str	r0, [r2, #44]	; 0x2c
    21f6:	e7e7      	b.n	21c8 <z_add_thread_to_ready_q+0x38>
    21f8:	20000630 	.word	0x20000630

000021fc <z_move_thread_to_end_of_prio_q>:
{
    21fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21fe:	4604      	mov	r4, r0
	__asm__ volatile(
    2200:	f04f 0320 	mov.w	r3, #32
    2204:	f3ef 8511 	mrs	r5, BASEPRI
    2208:	f383 8811 	msr	BASEPRI, r3
    220c:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    2210:	7b43      	ldrb	r3, [r0, #13]
    2212:	065a      	lsls	r2, r3, #25
    2214:	d503      	bpl.n	221e <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    2216:	4601      	mov	r1, r0
    2218:	4817      	ldr	r0, [pc, #92]	; (2278 <z_move_thread_to_end_of_prio_q+0x7c>)
    221a:	f7ff ff69 	bl	20f0 <z_priq_dumb_remove>
	return list->head == list;
    221e:	4a17      	ldr	r2, [pc, #92]	; (227c <z_move_thread_to_end_of_prio_q+0x80>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2220:	f102 0128 	add.w	r1, r2, #40	; 0x28
    2224:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
    2228:	428b      	cmp	r3, r1
    222a:	d01f      	beq.n	226c <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    222c:	b1f3      	cbz	r3, 226c <z_move_thread_to_end_of_prio_q+0x70>
	if (t1->base.prio < t2->base.prio) {
    222e:	f994 600e 	ldrsb.w	r6, [r4, #14]
    2232:	f993 700e 	ldrsb.w	r7, [r3, #14]
    2236:	42b7      	cmp	r7, r6
    2238:	dd13      	ble.n	2262 <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
    223a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    223c:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    2240:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    2242:	605c      	str	r4, [r3, #4]
    2244:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    2246:	6890      	ldr	r0, [r2, #8]
    2248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    224c:	7363      	strb	r3, [r4, #13]
    224e:	1b03      	subs	r3, r0, r4
    2250:	4258      	negs	r0, r3
    2252:	4158      	adcs	r0, r3
    2254:	f7ff ff62 	bl	211c <update_cache>
	__asm__ volatile(
    2258:	f385 8811 	msr	BASEPRI, r5
    225c:	f3bf 8f6f 	isb	sy
}
    2260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    2262:	4298      	cmp	r0, r3
    2264:	d002      	beq.n	226c <z_move_thread_to_end_of_prio_q+0x70>
    2266:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2268:	2b00      	cmp	r3, #0
    226a:	d1e2      	bne.n	2232 <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
    226c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    2270:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2272:	601c      	str	r4, [r3, #0]
	list->tail = node;
    2274:	62d4      	str	r4, [r2, #44]	; 0x2c
    2276:	e7e5      	b.n	2244 <z_move_thread_to_end_of_prio_q+0x48>
    2278:	20000658 	.word	0x20000658
    227c:	20000630 	.word	0x20000630

00002280 <z_time_slice>:
	if (pending_current == _current) {
    2280:	4a15      	ldr	r2, [pc, #84]	; (22d8 <z_time_slice+0x58>)
    2282:	4916      	ldr	r1, [pc, #88]	; (22dc <z_time_slice+0x5c>)
{
    2284:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    2286:	680c      	ldr	r4, [r1, #0]
    2288:	6893      	ldr	r3, [r2, #8]
    228a:	42a3      	cmp	r3, r4
    228c:	4614      	mov	r4, r2
    228e:	d103      	bne.n	2298 <z_time_slice+0x18>
}
    2290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    2294:	f7ff bed6 	b.w	2044 <z_reset_time_slice>
	pending_current = NULL;
    2298:	2500      	movs	r5, #0
    229a:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
    229c:	4910      	ldr	r1, [pc, #64]	; (22e0 <z_time_slice+0x60>)
    229e:	6809      	ldr	r1, [r1, #0]
    22a0:	b1b9      	cbz	r1, 22d2 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
    22a2:	89d9      	ldrh	r1, [r3, #14]
    22a4:	297f      	cmp	r1, #127	; 0x7f
    22a6:	d814      	bhi.n	22d2 <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
    22a8:	490e      	ldr	r1, [pc, #56]	; (22e4 <z_time_slice+0x64>)
    22aa:	f993 500e 	ldrsb.w	r5, [r3, #14]
    22ae:	6809      	ldr	r1, [r1, #0]
    22b0:	428d      	cmp	r5, r1
    22b2:	db0e      	blt.n	22d2 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
    22b4:	490c      	ldr	r1, [pc, #48]	; (22e8 <z_time_slice+0x68>)
    22b6:	428b      	cmp	r3, r1
    22b8:	d00b      	beq.n	22d2 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
    22ba:	6999      	ldr	r1, [r3, #24]
    22bc:	b949      	cbnz	r1, 22d2 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    22be:	6911      	ldr	r1, [r2, #16]
    22c0:	4281      	cmp	r1, r0
    22c2:	dc03      	bgt.n	22cc <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    22c4:	4618      	mov	r0, r3
    22c6:	f7ff ff99 	bl	21fc <z_move_thread_to_end_of_prio_q>
    22ca:	e7e1      	b.n	2290 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
    22cc:	1a09      	subs	r1, r1, r0
    22ce:	6111      	str	r1, [r2, #16]
}
    22d0:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    22d2:	2300      	movs	r3, #0
    22d4:	6123      	str	r3, [r4, #16]
    22d6:	e7fb      	b.n	22d0 <z_time_slice+0x50>
    22d8:	20000630 	.word	0x20000630
    22dc:	20000660 	.word	0x20000660
    22e0:	20000668 	.word	0x20000668
    22e4:	20000664 	.word	0x20000664
    22e8:	20000558 	.word	0x20000558

000022ec <z_remove_thread_from_ready_q>:
{
    22ec:	b538      	push	{r3, r4, r5, lr}
    22ee:	4604      	mov	r4, r0
	__asm__ volatile(
    22f0:	f04f 0320 	mov.w	r3, #32
    22f4:	f3ef 8511 	mrs	r5, BASEPRI
    22f8:	f383 8811 	msr	BASEPRI, r3
    22fc:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    2300:	7b43      	ldrb	r3, [r0, #13]
    2302:	065a      	lsls	r2, r3, #25
    2304:	d507      	bpl.n	2316 <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    2306:	4601      	mov	r1, r0
    2308:	4809      	ldr	r0, [pc, #36]	; (2330 <z_remove_thread_from_ready_q+0x44>)
    230a:	f7ff fef1 	bl	20f0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    230e:	7b63      	ldrb	r3, [r4, #13]
    2310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    2314:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    2316:	4b07      	ldr	r3, [pc, #28]	; (2334 <z_remove_thread_from_ready_q+0x48>)
    2318:	6898      	ldr	r0, [r3, #8]
    231a:	1b03      	subs	r3, r0, r4
    231c:	4258      	negs	r0, r3
    231e:	4158      	adcs	r0, r3
    2320:	f7ff fefc 	bl	211c <update_cache>
	__asm__ volatile(
    2324:	f385 8811 	msr	BASEPRI, r5
    2328:	f3bf 8f6f 	isb	sy
}
    232c:	bd38      	pop	{r3, r4, r5, pc}
    232e:	bf00      	nop
    2330:	20000658 	.word	0x20000658
    2334:	20000630 	.word	0x20000630

00002338 <pend>:
{
    2338:	b570      	push	{r4, r5, r6, lr}
    233a:	4604      	mov	r4, r0
    233c:	460d      	mov	r5, r1
    233e:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
    2340:	f7ff ffd4 	bl	22ec <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    2344:	7b63      	ldrb	r3, [r4, #13]
    2346:	f043 0302 	orr.w	r3, r3, #2
    234a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    234c:	b17d      	cbz	r5, 236e <pend+0x36>
	return list->head == list;
    234e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    2350:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2352:	429d      	cmp	r5, r3
    2354:	d029      	beq.n	23aa <pend+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2356:	b343      	cbz	r3, 23aa <pend+0x72>
	if (t1->base.prio < t2->base.prio) {
    2358:	f994 200e 	ldrsb.w	r2, [r4, #14]
    235c:	f993 100e 	ldrsb.w	r1, [r3, #14]
    2360:	4291      	cmp	r1, r2
    2362:	dd1c      	ble.n	239e <pend+0x66>
	node->prev = successor->prev;
    2364:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    2366:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    236a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    236c:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
    236e:	1c73      	adds	r3, r6, #1
    2370:	d022      	beq.n	23b8 <pend+0x80>
    2372:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    2376:	f240 30e7 	movw	r0, #999	; 0x3e7
    237a:	2100      	movs	r1, #0
    237c:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    2380:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2384:	fbc5 0106 	smlal	r0, r1, r5, r6
    2388:	2300      	movs	r3, #0
    238a:	f7fd ff49 	bl	220 <__aeabi_uldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    238e:	490b      	ldr	r1, [pc, #44]	; (23bc <pend+0x84>)
    2390:	1c42      	adds	r2, r0, #1
    2392:	f104 0018 	add.w	r0, r4, #24
}
    2396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    239a:	f000 b949 	b.w	2630 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
    239e:	6869      	ldr	r1, [r5, #4]
    23a0:	428b      	cmp	r3, r1
    23a2:	d002      	beq.n	23aa <pend+0x72>
    23a4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    23a6:	2b00      	cmp	r3, #0
    23a8:	d1d8      	bne.n	235c <pend+0x24>
	node->prev = list->tail;
    23aa:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    23ac:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    23ae:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    23b0:	686b      	ldr	r3, [r5, #4]
    23b2:	601c      	str	r4, [r3, #0]
	list->tail = node;
    23b4:	606c      	str	r4, [r5, #4]
    23b6:	e7da      	b.n	236e <pend+0x36>
}
    23b8:	bd70      	pop	{r4, r5, r6, pc}
    23ba:	bf00      	nop
    23bc:	00003e6b 	.word	0x00003e6b

000023c0 <z_pend_curr>:
{
    23c0:	b510      	push	{r4, lr}
    23c2:	460c      	mov	r4, r1
    23c4:	4611      	mov	r1, r2
	pending_current = _current;
    23c6:	4a06      	ldr	r2, [pc, #24]	; (23e0 <z_pend_curr+0x20>)
    23c8:	6890      	ldr	r0, [r2, #8]
    23ca:	4a06      	ldr	r2, [pc, #24]	; (23e4 <z_pend_curr+0x24>)
    23cc:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
    23ce:	461a      	mov	r2, r3
    23d0:	f7ff ffb2 	bl	2338 <pend>
    23d4:	4620      	mov	r0, r4
}
    23d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    23da:	f7fe bd8f 	b.w	efc <arch_swap>
    23de:	bf00      	nop
    23e0:	20000630 	.word	0x20000630
    23e4:	20000660 	.word	0x20000660

000023e8 <z_set_prio>:
{
    23e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    23ec:	4604      	mov	r4, r0
	__asm__ volatile(
    23ee:	f04f 0320 	mov.w	r3, #32
    23f2:	f3ef 8911 	mrs	r9, BASEPRI
    23f6:	f383 8811 	msr	BASEPRI, r3
    23fa:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
    23fe:	f001 fceb 	bl	3dd8 <z_is_thread_ready>
		if (need_sched) {
    2402:	b24e      	sxtb	r6, r1
    2404:	4680      	mov	r8, r0
    2406:	b360      	cbz	r0, 2462 <z_set_prio+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    2408:	4d17      	ldr	r5, [pc, #92]	; (2468 <z_set_prio+0x80>)
    240a:	4621      	mov	r1, r4
    240c:	f105 0728 	add.w	r7, r5, #40	; 0x28
    2410:	4638      	mov	r0, r7
    2412:	f7ff fe6d 	bl	20f0 <z_priq_dumb_remove>
	return list->head == list;
    2416:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
    2418:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    241a:	42bb      	cmp	r3, r7
    241c:	462a      	mov	r2, r5
    241e:	d019      	beq.n	2454 <z_set_prio+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2420:	b1c3      	cbz	r3, 2454 <z_set_prio+0x6c>
    2422:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    2424:	f993 000e 	ldrsb.w	r0, [r3, #14]
    2428:	42b0      	cmp	r0, r6
    242a:	dd0e      	ble.n	244a <z_set_prio+0x62>
	node->prev = successor->prev;
    242c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    242e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    2432:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    2434:	605c      	str	r4, [r3, #4]
			update_cache(1);
    2436:	2001      	movs	r0, #1
    2438:	f7ff fe70 	bl	211c <update_cache>
	__asm__ volatile(
    243c:	f389 8811 	msr	BASEPRI, r9
    2440:	f3bf 8f6f 	isb	sy
}
    2444:	4640      	mov	r0, r8
    2446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (node == list->tail) ? NULL : node->next;
    244a:	4299      	cmp	r1, r3
    244c:	d002      	beq.n	2454 <z_set_prio+0x6c>
    244e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2450:	2b00      	cmp	r3, #0
    2452:	d1e7      	bne.n	2424 <z_set_prio+0x3c>
	node->prev = list->tail;
    2454:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    2456:	6027      	str	r7, [r4, #0]
	node->prev = list->tail;
    2458:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    245a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    245c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    245e:	62d4      	str	r4, [r2, #44]	; 0x2c
    2460:	e7e9      	b.n	2436 <z_set_prio+0x4e>
			thread->base.prio = prio;
    2462:	73a6      	strb	r6, [r4, #14]
    2464:	e7ea      	b.n	243c <z_set_prio+0x54>
    2466:	bf00      	nop
    2468:	20000630 	.word	0x20000630

0000246c <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    246c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    246e:	4b04      	ldr	r3, [pc, #16]	; (2480 <z_sched_init+0x14>)
    2470:	4608      	mov	r0, r1
    2472:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    2476:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    247a:	f7ff bdf9 	b.w	2070 <k_sched_time_slice_set>
    247e:	bf00      	nop
    2480:	20000630 	.word	0x20000630

00002484 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
    2484:	4b01      	ldr	r3, [pc, #4]	; (248c <z_impl_k_current_get+0x8>)
    2486:	6898      	ldr	r0, [r3, #8]
    2488:	4770      	bx	lr
    248a:	bf00      	nop
    248c:	20000630 	.word	0x20000630

00002490 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
    2490:	b510      	push	{r4, lr}
    2492:	4602      	mov	r2, r0
	__asm__ volatile(
    2494:	f04f 0320 	mov.w	r3, #32
    2498:	f3ef 8411 	mrs	r4, BASEPRI
    249c:	f383 8811 	msr	BASEPRI, r3
    24a0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
    24a4:	7b43      	ldrb	r3, [r0, #13]
    24a6:	0759      	lsls	r1, r3, #29
    24a8:	d404      	bmi.n	24b4 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
    24aa:	f384 8811 	msr	BASEPRI, r4
    24ae:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
    24b2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    24b4:	f023 0304 	bic.w	r3, r3, #4
    24b8:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
    24ba:	f001 fd34 	bl	3f26 <z_is_thread_ready>
    24be:	b110      	cbz	r0, 24c6 <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
    24c0:	4610      	mov	r0, r2
    24c2:	f7ff fe65 	bl	2190 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
    24c6:	4621      	mov	r1, r4
}
    24c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
    24cc:	4801      	ldr	r0, [pc, #4]	; (24d4 <z_impl_k_thread_start+0x44>)
    24ce:	f001 bca5 	b.w	3e1c <z_reschedule>
    24d2:	bf00      	nop
    24d4:	2000068d 	.word	0x2000068d

000024d8 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    24d8:	b530      	push	{r4, r5, lr}
    24da:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    24dc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
    24de:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    24e0:	9504      	str	r5, [sp, #16]
    24e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    24e4:	9503      	str	r5, [sp, #12]
    24e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    24e8:	9502      	str	r5, [sp, #8]
    24ea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    24ec:	9501      	str	r5, [sp, #4]
    24ee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    24f0:	9500      	str	r5, [sp, #0]
    24f2:	f7fe fd7f 	bl	ff4 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    24f6:	4b03      	ldr	r3, [pc, #12]	; (2504 <z_setup_new_thread+0x2c>)
    24f8:	689b      	ldr	r3, [r3, #8]
    24fa:	b103      	cbz	r3, 24fe <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    24fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    24fe:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    2500:	b007      	add	sp, #28
    2502:	bd30      	pop	{r4, r5, pc}
    2504:	20000630 	.word	0x20000630

00002508 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    2508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    250c:	4e28      	ldr	r6, [pc, #160]	; (25b0 <z_init_static_threads+0xa8>)
    250e:	4d29      	ldr	r5, [pc, #164]	; (25b4 <z_init_static_threads+0xac>)
    2510:	46b0      	mov	r8, r6
{
    2512:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    2514:	42b5      	cmp	r5, r6
    2516:	f105 0430 	add.w	r4, r5, #48	; 0x30
    251a:	d310      	bcc.n	253e <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    251c:	f7ff fdd4 	bl	20c8 <k_sched_lock>
    2520:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    2524:	f240 36e7 	movw	r6, #999	; 0x3e7
    2528:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    252a:	4c22      	ldr	r4, [pc, #136]	; (25b4 <z_init_static_threads+0xac>)
    252c:	f8df a088 	ldr.w	sl, [pc, #136]	; 25b8 <z_init_static_threads+0xb0>
    2530:	4544      	cmp	r4, r8
    2532:	d321      	bcc.n	2578 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
    2534:	b007      	add	sp, #28
    2536:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    253a:	f7ff be0d 	b.w	2158 <k_sched_unlock>
		z_setup_new_thread(
    253e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    2542:	9305      	str	r3, [sp, #20]
    2544:	f854 3c10 	ldr.w	r3, [r4, #-16]
    2548:	9304      	str	r3, [sp, #16]
    254a:	f854 3c14 	ldr.w	r3, [r4, #-20]
    254e:	9303      	str	r3, [sp, #12]
    2550:	f854 3c18 	ldr.w	r3, [r4, #-24]
    2554:	9302      	str	r3, [sp, #8]
    2556:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    255a:	9301      	str	r3, [sp, #4]
    255c:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2560:	9300      	str	r3, [sp, #0]
    2562:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    2566:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    256a:	f7ff ffb5 	bl	24d8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    256e:	f854 3c30 	ldr.w	r3, [r4, #-48]
    2572:	64dd      	str	r5, [r3, #76]	; 0x4c
    2574:	4625      	mov	r5, r4
    2576:	e7cd      	b.n	2514 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
    2578:	6a61      	ldr	r1, [r4, #36]	; 0x24
    257a:	1c4b      	adds	r3, r1, #1
    257c:	d004      	beq.n	2588 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
    257e:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
    2580:	b921      	cbnz	r1, 258c <z_init_static_threads+0x84>
	z_impl_k_thread_start(thread);
    2582:	4628      	mov	r0, r5
    2584:	f7ff ff84 	bl	2490 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    2588:	3430      	adds	r4, #48	; 0x30
    258a:	e7d1      	b.n	2530 <z_init_static_threads+0x28>
    258c:	46b3      	mov	fp, r6
    258e:	46bc      	mov	ip, r7
    2590:	fbe9 bc01 	umlal	fp, ip, r9, r1
    2594:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2598:	2300      	movs	r3, #0
    259a:	4658      	mov	r0, fp
    259c:	4661      	mov	r1, ip
    259e:	f7fd fe3f 	bl	220 <__aeabi_uldivmod>
    25a2:	4651      	mov	r1, sl
    25a4:	1c42      	adds	r2, r0, #1
    25a6:	f105 0018 	add.w	r0, r5, #24
    25aa:	f000 f841 	bl	2630 <z_add_timeout>
    25ae:	e7eb      	b.n	2588 <z_init_static_threads+0x80>
    25b0:	200014cc 	.word	0x200014cc
    25b4:	200014cc 	.word	0x200014cc
    25b8:	00003e6b 	.word	0x00003e6b

000025bc <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    25bc:	4b03      	ldr	r3, [pc, #12]	; (25cc <elapsed+0x10>)
    25be:	681b      	ldr	r3, [r3, #0]
    25c0:	b90b      	cbnz	r3, 25c6 <elapsed+0xa>
    25c2:	f7fe b959 	b.w	878 <z_clock_elapsed>
}
    25c6:	2000      	movs	r0, #0
    25c8:	4770      	bx	lr
    25ca:	bf00      	nop
    25cc:	2000066c 	.word	0x2000066c

000025d0 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    25d0:	6803      	ldr	r3, [r0, #0]
    25d2:	b140      	cbz	r0, 25e6 <remove_timeout+0x16>
    25d4:	4a07      	ldr	r2, [pc, #28]	; (25f4 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    25d6:	6852      	ldr	r2, [r2, #4]
    25d8:	4290      	cmp	r0, r2
    25da:	d004      	beq.n	25e6 <remove_timeout+0x16>
	if (next(t) != NULL) {
    25dc:	b11b      	cbz	r3, 25e6 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    25de:	689a      	ldr	r2, [r3, #8]
    25e0:	6881      	ldr	r1, [r0, #8]
    25e2:	440a      	add	r2, r1
    25e4:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    25e6:	6842      	ldr	r2, [r0, #4]
    25e8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    25ea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    25ec:	2300      	movs	r3, #0
	node->prev = NULL;
    25ee:	e9c0 3300 	strd	r3, r3, [r0]
}
    25f2:	4770      	bx	lr
    25f4:	2000140c 	.word	0x2000140c

000025f8 <next_timeout>:
	return list->head == list;
    25f8:	4b0b      	ldr	r3, [pc, #44]	; (2628 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    25fa:	b510      	push	{r4, lr}
    25fc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    25fe:	429c      	cmp	r4, r3
    2600:	bf08      	it	eq
    2602:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    2604:	f7ff ffda 	bl	25bc <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2608:	b154      	cbz	r4, 2620 <next_timeout+0x28>
    260a:	68a3      	ldr	r3, [r4, #8]
    260c:	1a18      	subs	r0, r3, r0
    260e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    2612:	4b06      	ldr	r3, [pc, #24]	; (262c <next_timeout+0x34>)
    2614:	691b      	ldr	r3, [r3, #16]
    2616:	b113      	cbz	r3, 261e <next_timeout+0x26>
    2618:	4298      	cmp	r0, r3
    261a:	bfa8      	it	ge
    261c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    261e:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2620:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    2624:	e7f5      	b.n	2612 <next_timeout+0x1a>
    2626:	bf00      	nop
    2628:	2000140c 	.word	0x2000140c
    262c:	20000630 	.word	0x20000630

00002630 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
    2630:	b570      	push	{r4, r5, r6, lr}
    2632:	4604      	mov	r4, r0
    2634:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    2636:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
    2638:	f04f 0320 	mov.w	r3, #32
    263c:	f3ef 8511 	mrs	r5, BASEPRI
    2640:	f383 8811 	msr	BASEPRI, r3
    2644:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    2648:	f7ff ffb8 	bl	25bc <elapsed>
    264c:	2e01      	cmp	r6, #1
    264e:	bfac      	ite	ge
    2650:	1980      	addge	r0, r0, r6
    2652:	3001      	addlt	r0, #1
	return list->head == list;
    2654:	4b16      	ldr	r3, [pc, #88]	; (26b0 <z_add_timeout+0x80>)
    2656:	60a0      	str	r0, [r4, #8]
    2658:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    265a:	429a      	cmp	r2, r3
    265c:	d001      	beq.n	2662 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    265e:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    2660:	b932      	cbnz	r2, 2670 <z_add_timeout+0x40>
	node->prev = list->tail;
    2662:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    2664:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
    2666:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    2668:	685a      	ldr	r2, [r3, #4]
    266a:	6014      	str	r4, [r2, #0]
	list->tail = node;
    266c:	605c      	str	r4, [r3, #4]
    266e:	e00a      	b.n	2686 <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    2670:	6890      	ldr	r0, [r2, #8]
    2672:	68a1      	ldr	r1, [r4, #8]
    2674:	4288      	cmp	r0, r1
    2676:	dd15      	ble.n	26a4 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
    2678:	1a41      	subs	r1, r0, r1
    267a:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    267c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    267e:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
    2682:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    2684:	6054      	str	r4, [r2, #4]
	return list->head == list;
    2686:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2688:	429a      	cmp	r2, r3
    268a:	d006      	beq.n	269a <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    268c:	4294      	cmp	r4, r2
    268e:	d104      	bne.n	269a <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
    2690:	f7ff ffb2 	bl	25f8 <next_timeout>
    2694:	2100      	movs	r1, #0
    2696:	f7fe f8a1 	bl	7dc <z_clock_set_timeout>
	__asm__ volatile(
    269a:	f385 8811 	msr	BASEPRI, r5
    269e:	f3bf 8f6f 	isb	sy
		}
	}
}
    26a2:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
    26a4:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    26a6:	4296      	cmp	r6, r2
    26a8:	60a1      	str	r1, [r4, #8]
    26aa:	d0da      	beq.n	2662 <z_add_timeout+0x32>
    26ac:	6812      	ldr	r2, [r2, #0]
    26ae:	e7d7      	b.n	2660 <z_add_timeout+0x30>
    26b0:	2000140c 	.word	0x2000140c

000026b4 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    26b4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    26b8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    26ba:	f7ff fde1 	bl	2280 <z_time_slice>
	__asm__ volatile(
    26be:	f04f 0320 	mov.w	r3, #32
    26c2:	f3ef 8511 	mrs	r5, BASEPRI
    26c6:	f383 8811 	msr	BASEPRI, r3
    26ca:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    26ce:	4f21      	ldr	r7, [pc, #132]	; (2754 <z_clock_announce+0xa0>)
    26d0:	4e21      	ldr	r6, [pc, #132]	; (2758 <z_clock_announce+0xa4>)
    26d2:	46b8      	mov	r8, r7
	return list->head == list;
    26d4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 275c <z_clock_announce+0xa8>
    26d8:	6034      	str	r4, [r6, #0]
    26da:	f8d9 4000 	ldr.w	r4, [r9]
    26de:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    26e0:	454c      	cmp	r4, r9
    26e2:	e9d7 bc00 	ldrd	fp, ip, [r7]
    26e6:	d005      	beq.n	26f4 <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    26e8:	b124      	cbz	r4, 26f4 <z_clock_announce+0x40>
    26ea:	68a3      	ldr	r3, [r4, #8]
    26ec:	4293      	cmp	r3, r2
    26ee:	dd14      	ble.n	271a <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    26f0:	1a9b      	subs	r3, r3, r2
    26f2:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    26f4:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    26f6:	eb1b 0002 	adds.w	r0, fp, r2
    26fa:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
    26fe:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
    2702:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    2704:	f7ff ff78 	bl	25f8 <next_timeout>
    2708:	4621      	mov	r1, r4
    270a:	f7fe f867 	bl	7dc <z_clock_set_timeout>
	__asm__ volatile(
    270e:	f385 8811 	msr	BASEPRI, r5
    2712:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    2716:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
    271a:	eb1b 0003 	adds.w	r0, fp, r3
    271e:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
    2722:	1ad3      	subs	r3, r2, r3
    2724:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    2726:	2300      	movs	r3, #0
		curr_tick += dt;
    2728:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
    272c:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    272e:	4620      	mov	r0, r4
    2730:	f7ff ff4e 	bl	25d0 <remove_timeout>
    2734:	f385 8811 	msr	BASEPRI, r5
    2738:	f3bf 8f6f 	isb	sy
		t->fn(t);
    273c:	68e3      	ldr	r3, [r4, #12]
    273e:	4798      	blx	r3
	__asm__ volatile(
    2740:	f04f 0320 	mov.w	r3, #32
    2744:	f3ef 8511 	mrs	r5, BASEPRI
    2748:	f383 8811 	msr	BASEPRI, r3
    274c:	f3bf 8f6f 	isb	sy
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    2750:	e7c3      	b.n	26da <z_clock_announce+0x26>
    2752:	bf00      	nop
    2754:	20000000 	.word	0x20000000
    2758:	2000066c 	.word	0x2000066c
    275c:	2000140c 	.word	0x2000140c

00002760 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    2760:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    2762:	4c07      	ldr	r4, [pc, #28]	; (2780 <init_static_pools+0x20>)
    2764:	4d07      	ldr	r5, [pc, #28]	; (2784 <init_static_pools+0x24>)
    2766:	42ac      	cmp	r4, r5
    2768:	d301      	bcc.n	276e <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    276a:	2000      	movs	r0, #0
    276c:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    276e:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
    2772:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
    2774:	e9c4 3305 	strd	r3, r3, [r4, #20]
    2778:	f000 fee5 	bl	3546 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    277c:	341c      	adds	r4, #28
    277e:	e7f2      	b.n	2766 <init_static_pools+0x6>
    2780:	200014cc 	.word	0x200014cc
    2784:	200014cc 	.word	0x200014cc

00002788 <CC_PalMemCopyPlat>:
    2788:	f001 ba45 	b.w	3c16 <memmove>

0000278c <CC_PalMemSetZeroPlat>:
    278c:	460a      	mov	r2, r1
    278e:	2100      	movs	r1, #0
    2790:	f001 ba82 	b.w	3c98 <memset>

00002794 <CC_PalInit>:
    2794:	b510      	push	{r4, lr}
    2796:	4811      	ldr	r0, [pc, #68]	; (27dc <CC_PalInit+0x48>)
    2798:	f000 f848 	bl	282c <CC_PalMutexCreate>
    279c:	b100      	cbz	r0, 27a0 <CC_PalInit+0xc>
    279e:	bd10      	pop	{r4, pc}
    27a0:	480f      	ldr	r0, [pc, #60]	; (27e0 <CC_PalInit+0x4c>)
    27a2:	f000 f843 	bl	282c <CC_PalMutexCreate>
    27a6:	2800      	cmp	r0, #0
    27a8:	d1f9      	bne.n	279e <CC_PalInit+0xa>
    27aa:	4c0e      	ldr	r4, [pc, #56]	; (27e4 <CC_PalInit+0x50>)
    27ac:	4620      	mov	r0, r4
    27ae:	f000 f83d 	bl	282c <CC_PalMutexCreate>
    27b2:	2800      	cmp	r0, #0
    27b4:	d1f3      	bne.n	279e <CC_PalInit+0xa>
    27b6:	4b0c      	ldr	r3, [pc, #48]	; (27e8 <CC_PalInit+0x54>)
    27b8:	480c      	ldr	r0, [pc, #48]	; (27ec <CC_PalInit+0x58>)
    27ba:	601c      	str	r4, [r3, #0]
    27bc:	f000 f836 	bl	282c <CC_PalMutexCreate>
    27c0:	4601      	mov	r1, r0
    27c2:	2800      	cmp	r0, #0
    27c4:	d1eb      	bne.n	279e <CC_PalInit+0xa>
    27c6:	f000 f82d 	bl	2824 <CC_PalDmaInit>
    27ca:	4604      	mov	r4, r0
    27cc:	b108      	cbz	r0, 27d2 <CC_PalInit+0x3e>
    27ce:	4620      	mov	r0, r4
    27d0:	bd10      	pop	{r4, pc}
    27d2:	f000 f851 	bl	2878 <CC_PalPowerSaveModeInit>
    27d6:	4620      	mov	r0, r4
    27d8:	e7fa      	b.n	27d0 <CC_PalInit+0x3c>
    27da:	bf00      	nop
    27dc:	20001420 	.word	0x20001420
    27e0:	20001414 	.word	0x20001414
    27e4:	2000141c 	.word	0x2000141c
    27e8:	20001424 	.word	0x20001424
    27ec:	20001418 	.word	0x20001418

000027f0 <CC_PalTerminate>:
    27f0:	b508      	push	{r3, lr}
    27f2:	4808      	ldr	r0, [pc, #32]	; (2814 <CC_PalTerminate+0x24>)
    27f4:	f000 f824 	bl	2840 <CC_PalMutexDestroy>
    27f8:	4807      	ldr	r0, [pc, #28]	; (2818 <CC_PalTerminate+0x28>)
    27fa:	f000 f821 	bl	2840 <CC_PalMutexDestroy>
    27fe:	4807      	ldr	r0, [pc, #28]	; (281c <CC_PalTerminate+0x2c>)
    2800:	f000 f81e 	bl	2840 <CC_PalMutexDestroy>
    2804:	4806      	ldr	r0, [pc, #24]	; (2820 <CC_PalTerminate+0x30>)
    2806:	f000 f81b 	bl	2840 <CC_PalMutexDestroy>
    280a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    280e:	f000 b80b 	b.w	2828 <CC_PalDmaTerminate>
    2812:	bf00      	nop
    2814:	20001420 	.word	0x20001420
    2818:	20001414 	.word	0x20001414
    281c:	2000141c 	.word	0x2000141c
    2820:	20001418 	.word	0x20001418

00002824 <CC_PalDmaInit>:
    2824:	2000      	movs	r0, #0
    2826:	4770      	bx	lr

00002828 <CC_PalDmaTerminate>:
    2828:	4770      	bx	lr
    282a:	bf00      	nop

0000282c <CC_PalMutexCreate>:
    282c:	b508      	push	{r3, lr}
    282e:	4b03      	ldr	r3, [pc, #12]	; (283c <CC_PalMutexCreate+0x10>)
    2830:	6802      	ldr	r2, [r0, #0]
    2832:	681b      	ldr	r3, [r3, #0]
    2834:	6810      	ldr	r0, [r2, #0]
    2836:	4798      	blx	r3
    2838:	2000      	movs	r0, #0
    283a:	bd08      	pop	{r3, pc}
    283c:	20001430 	.word	0x20001430

00002840 <CC_PalMutexDestroy>:
    2840:	b508      	push	{r3, lr}
    2842:	4b03      	ldr	r3, [pc, #12]	; (2850 <CC_PalMutexDestroy+0x10>)
    2844:	6802      	ldr	r2, [r0, #0]
    2846:	685b      	ldr	r3, [r3, #4]
    2848:	6810      	ldr	r0, [r2, #0]
    284a:	4798      	blx	r3
    284c:	2000      	movs	r0, #0
    284e:	bd08      	pop	{r3, pc}
    2850:	20001430 	.word	0x20001430

00002854 <CC_PalMutexLock>:
    2854:	6802      	ldr	r2, [r0, #0]
    2856:	4b02      	ldr	r3, [pc, #8]	; (2860 <CC_PalMutexLock+0xc>)
    2858:	6810      	ldr	r0, [r2, #0]
    285a:	689b      	ldr	r3, [r3, #8]
    285c:	4718      	bx	r3
    285e:	bf00      	nop
    2860:	20001430 	.word	0x20001430

00002864 <CC_PalMutexUnlock>:
    2864:	b508      	push	{r3, lr}
    2866:	4b03      	ldr	r3, [pc, #12]	; (2874 <CC_PalMutexUnlock+0x10>)
    2868:	6802      	ldr	r2, [r0, #0]
    286a:	68db      	ldr	r3, [r3, #12]
    286c:	6810      	ldr	r0, [r2, #0]
    286e:	4798      	blx	r3
    2870:	2000      	movs	r0, #0
    2872:	bd08      	pop	{r3, pc}
    2874:	20001430 	.word	0x20001430

00002878 <CC_PalPowerSaveModeInit>:
    2878:	b570      	push	{r4, r5, r6, lr}
    287a:	4c09      	ldr	r4, [pc, #36]	; (28a0 <CC_PalPowerSaveModeInit+0x28>)
    287c:	4d09      	ldr	r5, [pc, #36]	; (28a4 <CC_PalPowerSaveModeInit+0x2c>)
    287e:	6920      	ldr	r0, [r4, #16]
    2880:	68ab      	ldr	r3, [r5, #8]
    2882:	4798      	blx	r3
    2884:	b118      	cbz	r0, 288e <CC_PalPowerSaveModeInit+0x16>
    2886:	4b08      	ldr	r3, [pc, #32]	; (28a8 <CC_PalPowerSaveModeInit+0x30>)
    2888:	4808      	ldr	r0, [pc, #32]	; (28ac <CC_PalPowerSaveModeInit+0x34>)
    288a:	685b      	ldr	r3, [r3, #4]
    288c:	4798      	blx	r3
    288e:	2100      	movs	r1, #0
    2890:	4a07      	ldr	r2, [pc, #28]	; (28b0 <CC_PalPowerSaveModeInit+0x38>)
    2892:	68eb      	ldr	r3, [r5, #12]
    2894:	6011      	str	r1, [r2, #0]
    2896:	6920      	ldr	r0, [r4, #16]
    2898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    289c:	4718      	bx	r3
    289e:	bf00      	nop
    28a0:	20001440 	.word	0x20001440
    28a4:	20001430 	.word	0x20001430
    28a8:	20001428 	.word	0x20001428
    28ac:	00004534 	.word	0x00004534
    28b0:	20000670 	.word	0x20000670

000028b4 <CC_PalPowerSaveModeSelect>:
    28b4:	b570      	push	{r4, r5, r6, lr}
    28b6:	4c14      	ldr	r4, [pc, #80]	; (2908 <CC_PalPowerSaveModeSelect+0x54>)
    28b8:	4d14      	ldr	r5, [pc, #80]	; (290c <CC_PalPowerSaveModeSelect+0x58>)
    28ba:	4606      	mov	r6, r0
    28bc:	68ab      	ldr	r3, [r5, #8]
    28be:	6920      	ldr	r0, [r4, #16]
    28c0:	4798      	blx	r3
    28c2:	b9f0      	cbnz	r0, 2902 <CC_PalPowerSaveModeSelect+0x4e>
    28c4:	4a12      	ldr	r2, [pc, #72]	; (2910 <CC_PalPowerSaveModeSelect+0x5c>)
    28c6:	6813      	ldr	r3, [r2, #0]
    28c8:	b95e      	cbnz	r6, 28e2 <CC_PalPowerSaveModeSelect+0x2e>
    28ca:	b91b      	cbnz	r3, 28d4 <CC_PalPowerSaveModeSelect+0x20>
    28cc:	2001      	movs	r0, #1
    28ce:	4911      	ldr	r1, [pc, #68]	; (2914 <CC_PalPowerSaveModeSelect+0x60>)
    28d0:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
    28d4:	3301      	adds	r3, #1
    28d6:	6013      	str	r3, [r2, #0]
    28d8:	68eb      	ldr	r3, [r5, #12]
    28da:	6920      	ldr	r0, [r4, #16]
    28dc:	4798      	blx	r3
    28de:	2000      	movs	r0, #0
    28e0:	bd70      	pop	{r4, r5, r6, pc}
    28e2:	2b00      	cmp	r3, #0
    28e4:	d0f8      	beq.n	28d8 <CC_PalPowerSaveModeSelect+0x24>
    28e6:	2b01      	cmp	r3, #1
    28e8:	bf08      	it	eq
    28ea:	490a      	ldreq	r1, [pc, #40]	; (2914 <CC_PalPowerSaveModeSelect+0x60>)
    28ec:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    28f0:	bf08      	it	eq
    28f2:	f8c1 0500 	streq.w	r0, [r1, #1280]	; 0x500
    28f6:	6920      	ldr	r0, [r4, #16]
    28f8:	6013      	str	r3, [r2, #0]
    28fa:	68eb      	ldr	r3, [r5, #12]
    28fc:	4798      	blx	r3
    28fe:	2000      	movs	r0, #0
    2900:	e7ee      	b.n	28e0 <CC_PalPowerSaveModeSelect+0x2c>
    2902:	4805      	ldr	r0, [pc, #20]	; (2918 <CC_PalPowerSaveModeSelect+0x64>)
    2904:	bd70      	pop	{r4, r5, r6, pc}
    2906:	bf00      	nop
    2908:	20001440 	.word	0x20001440
    290c:	20001430 	.word	0x20001430
    2910:	20000670 	.word	0x20000670
    2914:	50840000 	.word	0x50840000
    2918:	ffff8fe9 	.word	0xffff8fe9

0000291c <CC_HalInit>:
    291c:	2000      	movs	r0, #0
    291e:	4770      	bx	lr

00002920 <CC_HalTerminate>:
    2920:	2000      	movs	r0, #0
    2922:	4770      	bx	lr

00002924 <CC_HalClearInterruptBit>:
    2924:	0543      	lsls	r3, r0, #21
    2926:	d503      	bpl.n	2930 <CC_HalClearInterruptBit+0xc>
    2928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    292c:	4b02      	ldr	r3, [pc, #8]	; (2938 <CC_HalClearInterruptBit+0x14>)
    292e:	601a      	str	r2, [r3, #0]
    2930:	4b02      	ldr	r3, [pc, #8]	; (293c <CC_HalClearInterruptBit+0x18>)
    2932:	6018      	str	r0, [r3, #0]
    2934:	4770      	bx	lr
    2936:	bf00      	nop
    2938:	50841108 	.word	0x50841108
    293c:	50841a08 	.word	0x50841a08

00002940 <CC_HalMaskInterrupt>:
    2940:	4b01      	ldr	r3, [pc, #4]	; (2948 <CC_HalMaskInterrupt+0x8>)
    2942:	6018      	str	r0, [r3, #0]
    2944:	4770      	bx	lr
    2946:	bf00      	nop
    2948:	50841a04 	.word	0x50841a04

0000294c <CC_HalWaitInterruptRND>:
    294c:	b108      	cbz	r0, 2952 <CC_HalWaitInterruptRND+0x6>
    294e:	f000 b803 	b.w	2958 <CC_PalWaitInterruptRND>
    2952:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    2956:	4770      	bx	lr

00002958 <CC_PalWaitInterruptRND>:
    2958:	4602      	mov	r2, r0
    295a:	4807      	ldr	r0, [pc, #28]	; (2978 <CC_PalWaitInterruptRND+0x20>)
    295c:	6803      	ldr	r3, [r0, #0]
    295e:	4213      	tst	r3, r2
    2960:	d0fc      	beq.n	295c <CC_PalWaitInterruptRND+0x4>
    2962:	b121      	cbz	r1, 296e <CC_PalWaitInterruptRND+0x16>
    2964:	4b05      	ldr	r3, [pc, #20]	; (297c <CC_PalWaitInterruptRND+0x24>)
    2966:	4806      	ldr	r0, [pc, #24]	; (2980 <CC_PalWaitInterruptRND+0x28>)
    2968:	681b      	ldr	r3, [r3, #0]
    296a:	600b      	str	r3, [r1, #0]
    296c:	6003      	str	r3, [r0, #0]
    296e:	4b05      	ldr	r3, [pc, #20]	; (2984 <CC_PalWaitInterruptRND+0x2c>)
    2970:	2000      	movs	r0, #0
    2972:	601a      	str	r2, [r3, #0]
    2974:	4770      	bx	lr
    2976:	bf00      	nop
    2978:	50841a00 	.word	0x50841a00
    297c:	50841104 	.word	0x50841104
    2980:	50841108 	.word	0x50841108
    2984:	50841a08 	.word	0x50841a08

00002988 <mbedtls_platform_setup>:
    2988:	f000 b8a0 	b.w	2acc <nrf_cc310_platform_init>

0000298c <mbedtls_platform_zeroize>:
    298c:	b130      	cbz	r0, 299c <mbedtls_platform_zeroize+0x10>
    298e:	b129      	cbz	r1, 299c <mbedtls_platform_zeroize+0x10>
    2990:	2300      	movs	r3, #0
    2992:	4401      	add	r1, r0
    2994:	7003      	strb	r3, [r0, #0]
    2996:	3001      	adds	r0, #1
    2998:	4281      	cmp	r1, r0
    299a:	d1fb      	bne.n	2994 <mbedtls_platform_zeroize+0x8>
    299c:	4770      	bx	lr
    299e:	bf00      	nop

000029a0 <mbedtls_hardware_poll>:
    29a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29a4:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
    29a8:	460f      	mov	r7, r1
    29aa:	9205      	str	r2, [sp, #20]
    29ac:	2100      	movs	r1, #0
    29ae:	4614      	mov	r4, r2
    29b0:	a812      	add	r0, sp, #72	; 0x48
    29b2:	f44f 7208 	mov.w	r2, #544	; 0x220
    29b6:	461e      	mov	r6, r3
    29b8:	f001 f96e 	bl	3c98 <memset>
    29bc:	2300      	movs	r3, #0
    29be:	a808      	add	r0, sp, #32
    29c0:	4619      	mov	r1, r3
    29c2:	2228      	movs	r2, #40	; 0x28
    29c4:	9306      	str	r3, [sp, #24]
    29c6:	f001 f967 	bl	3c98 <memset>
    29ca:	2f00      	cmp	r7, #0
    29cc:	d03c      	beq.n	2a48 <mbedtls_hardware_poll+0xa8>
    29ce:	2e00      	cmp	r6, #0
    29d0:	d03a      	beq.n	2a48 <mbedtls_hardware_poll+0xa8>
    29d2:	2c00      	cmp	r4, #0
    29d4:	d038      	beq.n	2a48 <mbedtls_hardware_poll+0xa8>
    29d6:	2104      	movs	r1, #4
    29d8:	a806      	add	r0, sp, #24
    29da:	f7ff fed7 	bl	278c <CC_PalMemSetZeroPlat>
    29de:	a808      	add	r0, sp, #32
    29e0:	2128      	movs	r1, #40	; 0x28
    29e2:	f7ff fed3 	bl	278c <CC_PalMemSetZeroPlat>
    29e6:	a808      	add	r0, sp, #32
    29e8:	f000 f832 	bl	2a50 <RNG_PLAT_SetUserRngParameters>
    29ec:	b178      	cbz	r0, 2a0e <mbedtls_hardware_poll+0x6e>
    29ee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    29f2:	a812      	add	r0, sp, #72	; 0x48
    29f4:	f44f 7108 	mov.w	r1, #544	; 0x220
    29f8:	f7ff ffc8 	bl	298c <mbedtls_platform_zeroize>
    29fc:	a806      	add	r0, sp, #24
    29fe:	2104      	movs	r1, #4
    2a00:	f7ff ffc4 	bl	298c <mbedtls_platform_zeroize>
    2a04:	4628      	mov	r0, r5
    2a06:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
    2a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a0e:	ab12      	add	r3, sp, #72	; 0x48
    2a10:	f10d 081c 	add.w	r8, sp, #28
    2a14:	9003      	str	r0, [sp, #12]
    2a16:	e9cd 6301 	strd	r6, r3, [sp, #4]
    2a1a:	4602      	mov	r2, r0
    2a1c:	ab05      	add	r3, sp, #20
    2a1e:	a908      	add	r1, sp, #32
    2a20:	f8cd 8000 	str.w	r8, [sp]
    2a24:	a806      	add	r0, sp, #24
    2a26:	f000 fce9 	bl	33fc <LLF_RND_GetTrngSource>
    2a2a:	2800      	cmp	r0, #0
    2a2c:	d1df      	bne.n	29ee <mbedtls_hardware_poll+0x4e>
    2a2e:	6833      	ldr	r3, [r6, #0]
    2a30:	42a3      	cmp	r3, r4
    2a32:	d3dc      	bcc.n	29ee <mbedtls_hardware_poll+0x4e>
    2a34:	f8d8 1000 	ldr.w	r1, [r8]
    2a38:	4605      	mov	r5, r0
    2a3a:	3108      	adds	r1, #8
    2a3c:	4638      	mov	r0, r7
    2a3e:	4622      	mov	r2, r4
    2a40:	f7ff fea2 	bl	2788 <CC_PalMemCopyPlat>
    2a44:	6034      	str	r4, [r6, #0]
    2a46:	e7d4      	b.n	29f2 <mbedtls_hardware_poll+0x52>
    2a48:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    2a4c:	e7da      	b.n	2a04 <mbedtls_hardware_poll+0x64>
    2a4e:	bf00      	nop

00002a50 <RNG_PLAT_SetUserRngParameters>:
    2a50:	231c      	movs	r3, #28
    2a52:	b530      	push	{r4, r5, lr}
    2a54:	b083      	sub	sp, #12
    2a56:	a902      	add	r1, sp, #8
    2a58:	f841 3d04 	str.w	r3, [r1, #-4]!
    2a5c:	4604      	mov	r4, r0
    2a5e:	f000 f9b1 	bl	2dc4 <CC_PalTrngParamGet>
    2a62:	4605      	mov	r5, r0
    2a64:	b9d8      	cbnz	r0, 2a9e <RNG_PLAT_SetUserRngParameters+0x4e>
    2a66:	9b01      	ldr	r3, [sp, #4]
    2a68:	2b1c      	cmp	r3, #28
    2a6a:	d11b      	bne.n	2aa4 <RNG_PLAT_SetUserRngParameters+0x54>
    2a6c:	e9d4 3200 	ldrd	r3, r2, [r4]
    2a70:	2101      	movs	r1, #1
    2a72:	3300      	adds	r3, #0
    2a74:	61e1      	str	r1, [r4, #28]
    2a76:	bf18      	it	ne
    2a78:	2301      	movne	r3, #1
    2a7a:	b10a      	cbz	r2, 2a80 <RNG_PLAT_SetUserRngParameters+0x30>
    2a7c:	f043 0302 	orr.w	r3, r3, #2
    2a80:	68a2      	ldr	r2, [r4, #8]
    2a82:	b932      	cbnz	r2, 2a92 <RNG_PLAT_SetUserRngParameters+0x42>
    2a84:	68e2      	ldr	r2, [r4, #12]
    2a86:	b9aa      	cbnz	r2, 2ab4 <RNG_PLAT_SetUserRngParameters+0x64>
    2a88:	e9c4 3208 	strd	r3, r2, [r4, #32]
    2a8c:	b93b      	cbnz	r3, 2a9e <RNG_PLAT_SetUserRngParameters+0x4e>
    2a8e:	4d0d      	ldr	r5, [pc, #52]	; (2ac4 <RNG_PLAT_SetUserRngParameters+0x74>)
    2a90:	e009      	b.n	2aa6 <RNG_PLAT_SetUserRngParameters+0x56>
    2a92:	68e2      	ldr	r2, [r4, #12]
    2a94:	f043 0304 	orr.w	r3, r3, #4
    2a98:	b962      	cbnz	r2, 2ab4 <RNG_PLAT_SetUserRngParameters+0x64>
    2a9a:	e9c4 3208 	strd	r3, r2, [r4, #32]
    2a9e:	4628      	mov	r0, r5
    2aa0:	b003      	add	sp, #12
    2aa2:	bd30      	pop	{r4, r5, pc}
    2aa4:	4d08      	ldr	r5, [pc, #32]	; (2ac8 <RNG_PLAT_SetUserRngParameters+0x78>)
    2aa6:	4620      	mov	r0, r4
    2aa8:	211c      	movs	r1, #28
    2aaa:	f7ff fe6f 	bl	278c <CC_PalMemSetZeroPlat>
    2aae:	4628      	mov	r0, r5
    2ab0:	b003      	add	sp, #12
    2ab2:	bd30      	pop	{r4, r5, pc}
    2ab4:	2200      	movs	r2, #0
    2ab6:	4628      	mov	r0, r5
    2ab8:	f043 0308 	orr.w	r3, r3, #8
    2abc:	e9c4 3208 	strd	r3, r2, [r4, #32]
    2ac0:	b003      	add	sp, #12
    2ac2:	bd30      	pop	{r4, r5, pc}
    2ac4:	00f00c0e 	.word	0x00f00c0e
    2ac8:	00f00c37 	.word	0x00f00c37

00002acc <nrf_cc310_platform_init>:
    2acc:	b510      	push	{r4, lr}
    2ace:	4c0c      	ldr	r4, [pc, #48]	; (2b00 <nrf_cc310_platform_init+0x34>)
    2ad0:	6823      	ldr	r3, [r4, #0]
    2ad2:	b113      	cbz	r3, 2ada <nrf_cc310_platform_init+0xe>
    2ad4:	4b0b      	ldr	r3, [pc, #44]	; (2b04 <nrf_cc310_platform_init+0x38>)
    2ad6:	681b      	ldr	r3, [r3, #0]
    2ad8:	b96b      	cbnz	r3, 2af6 <nrf_cc310_platform_init+0x2a>
    2ada:	f000 f931 	bl	2d40 <CC_LibInit>
    2ade:	b138      	cbz	r0, 2af0 <nrf_cc310_platform_init+0x24>
    2ae0:	3801      	subs	r0, #1
    2ae2:	2806      	cmp	r0, #6
    2ae4:	bf96      	itet	ls
    2ae6:	4b08      	ldrls	r3, [pc, #32]	; (2b08 <nrf_cc310_platform_init+0x3c>)
    2ae8:	4808      	ldrhi	r0, [pc, #32]	; (2b0c <nrf_cc310_platform_init+0x40>)
    2aea:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    2aee:	bd10      	pop	{r4, pc}
    2af0:	2201      	movs	r2, #1
    2af2:	4b04      	ldr	r3, [pc, #16]	; (2b04 <nrf_cc310_platform_init+0x38>)
    2af4:	601a      	str	r2, [r3, #0]
    2af6:	2301      	movs	r3, #1
    2af8:	2000      	movs	r0, #0
    2afa:	6023      	str	r3, [r4, #0]
    2afc:	bd10      	pop	{r4, pc}
    2afe:	bf00      	nop
    2b00:	20000674 	.word	0x20000674
    2b04:	20000678 	.word	0x20000678
    2b08:	00004554 	.word	0x00004554
    2b0c:	ffff8ffe 	.word	0xffff8ffe

00002b10 <nrf_cc310_platform_init_no_rng>:
    2b10:	b510      	push	{r4, lr}
    2b12:	4c09      	ldr	r4, [pc, #36]	; (2b38 <nrf_cc310_platform_init_no_rng+0x28>)
    2b14:	6823      	ldr	r3, [r4, #0]
    2b16:	b11b      	cbz	r3, 2b20 <nrf_cc310_platform_init_no_rng+0x10>
    2b18:	2301      	movs	r3, #1
    2b1a:	2000      	movs	r0, #0
    2b1c:	6023      	str	r3, [r4, #0]
    2b1e:	bd10      	pop	{r4, pc}
    2b20:	f000 f87c 	bl	2c1c <CC_LibInitNoRng>
    2b24:	2800      	cmp	r0, #0
    2b26:	d0f7      	beq.n	2b18 <nrf_cc310_platform_init_no_rng+0x8>
    2b28:	3801      	subs	r0, #1
    2b2a:	2806      	cmp	r0, #6
    2b2c:	bf96      	itet	ls
    2b2e:	4b03      	ldrls	r3, [pc, #12]	; (2b3c <nrf_cc310_platform_init_no_rng+0x2c>)
    2b30:	4803      	ldrhi	r0, [pc, #12]	; (2b40 <nrf_cc310_platform_init_no_rng+0x30>)
    2b32:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    2b36:	bd10      	pop	{r4, pc}
    2b38:	20000674 	.word	0x20000674
    2b3c:	00004554 	.word	0x00004554
    2b40:	ffff8ffe 	.word	0xffff8ffe

00002b44 <nrf_cc310_platform_abort>:
    2b44:	f3bf 8f4f 	dsb	sy
    2b48:	4905      	ldr	r1, [pc, #20]	; (2b60 <nrf_cc310_platform_abort+0x1c>)
    2b4a:	4b06      	ldr	r3, [pc, #24]	; (2b64 <nrf_cc310_platform_abort+0x20>)
    2b4c:	68ca      	ldr	r2, [r1, #12]
    2b4e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2b52:	4313      	orrs	r3, r2
    2b54:	60cb      	str	r3, [r1, #12]
    2b56:	f3bf 8f4f 	dsb	sy
    2b5a:	bf00      	nop
    2b5c:	e7fd      	b.n	2b5a <nrf_cc310_platform_abort+0x16>
    2b5e:	bf00      	nop
    2b60:	e000ed00 	.word	0xe000ed00
    2b64:	05fa0004 	.word	0x05fa0004

00002b68 <CC_PalAbort>:
    2b68:	4b01      	ldr	r3, [pc, #4]	; (2b70 <CC_PalAbort+0x8>)
    2b6a:	685b      	ldr	r3, [r3, #4]
    2b6c:	4718      	bx	r3
    2b6e:	bf00      	nop
    2b70:	20001428 	.word	0x20001428

00002b74 <nrf_cc310_platform_set_abort>:
    2b74:	4b02      	ldr	r3, [pc, #8]	; (2b80 <nrf_cc310_platform_set_abort+0xc>)
    2b76:	e9d0 1200 	ldrd	r1, r2, [r0]
    2b7a:	e9c3 1200 	strd	r1, r2, [r3]
    2b7e:	4770      	bx	lr
    2b80:	20001428 	.word	0x20001428

00002b84 <mutex_free>:
    2b84:	4770      	bx	lr
    2b86:	bf00      	nop

00002b88 <mutex_unlock>:
    2b88:	b510      	push	{r4, lr}
    2b8a:	4604      	mov	r4, r0
    2b8c:	b120      	cbz	r0, 2b98 <mutex_unlock+0x10>
    2b8e:	f3bf 8f5f 	dmb	sy
    2b92:	2000      	movs	r0, #0
    2b94:	6020      	str	r0, [r4, #0]
    2b96:	bd10      	pop	{r4, pc}
    2b98:	4803      	ldr	r0, [pc, #12]	; (2ba8 <mutex_unlock+0x20>)
    2b9a:	f7ff ffe5 	bl	2b68 <CC_PalAbort>
    2b9e:	f3bf 8f5f 	dmb	sy
    2ba2:	2000      	movs	r0, #0
    2ba4:	6020      	str	r0, [r4, #0]
    2ba6:	bd10      	pop	{r4, pc}
    2ba8:	00004594 	.word	0x00004594

00002bac <mutex_init>:
    2bac:	b510      	push	{r4, lr}
    2bae:	4604      	mov	r4, r0
    2bb0:	b110      	cbz	r0, 2bb8 <mutex_init+0xc>
    2bb2:	2300      	movs	r3, #0
    2bb4:	6023      	str	r3, [r4, #0]
    2bb6:	bd10      	pop	{r4, pc}
    2bb8:	4802      	ldr	r0, [pc, #8]	; (2bc4 <mutex_init+0x18>)
    2bba:	f7ff ffd5 	bl	2b68 <CC_PalAbort>
    2bbe:	2300      	movs	r3, #0
    2bc0:	6023      	str	r3, [r4, #0]
    2bc2:	bd10      	pop	{r4, pc}
    2bc4:	00004570 	.word	0x00004570

00002bc8 <mutex_lock>:
    2bc8:	b150      	cbz	r0, 2be0 <mutex_lock+0x18>
    2bca:	2201      	movs	r2, #1
    2bcc:	e8d0 3fef 	ldaex	r3, [r0]
    2bd0:	e8c0 2fe1 	stlex	r1, r2, [r0]
    2bd4:	2900      	cmp	r1, #0
    2bd6:	d1f9      	bne.n	2bcc <mutex_lock+0x4>
    2bd8:	2b01      	cmp	r3, #1
    2bda:	d0f7      	beq.n	2bcc <mutex_lock+0x4>
    2bdc:	f3bf 8f5f 	dmb	sy
    2be0:	2000      	movs	r0, #0
    2be2:	4770      	bx	lr

00002be4 <nrf_cc310_platform_set_mutexes>:
    2be4:	b470      	push	{r4, r5, r6}
    2be6:	4b0b      	ldr	r3, [pc, #44]	; (2c14 <nrf_cc310_platform_set_mutexes+0x30>)
    2be8:	6806      	ldr	r6, [r0, #0]
    2bea:	68c2      	ldr	r2, [r0, #12]
    2bec:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    2bf0:	e9c3 4202 	strd	r4, r2, [r3, #8]
    2bf4:	e9c3 6500 	strd	r6, r5, [r3]
    2bf8:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
    2bfc:	680e      	ldr	r6, [r1, #0]
    2bfe:	4b06      	ldr	r3, [pc, #24]	; (2c18 <nrf_cc310_platform_set_mutexes+0x34>)
    2c00:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    2c04:	e9c3 6500 	strd	r6, r5, [r3]
    2c08:	e9c3 4002 	strd	r4, r0, [r3, #8]
    2c0c:	611a      	str	r2, [r3, #16]
    2c0e:	bc70      	pop	{r4, r5, r6}
    2c10:	4770      	bx	lr
    2c12:	bf00      	nop
    2c14:	20001430 	.word	0x20001430
    2c18:	20001440 	.word	0x20001440

00002c1c <CC_LibInitNoRng>:
    2c1c:	b510      	push	{r4, lr}
    2c1e:	f7ff fe7d 	bl	291c <CC_HalInit>
    2c22:	b970      	cbnz	r0, 2c42 <CC_LibInitNoRng+0x26>
    2c24:	f7ff fdb6 	bl	2794 <CC_PalInit>
    2c28:	b980      	cbnz	r0, 2c4c <CC_LibInitNoRng+0x30>
    2c2a:	f7ff fe43 	bl	28b4 <CC_PalPowerSaveModeSelect>
    2c2e:	b980      	cbnz	r0, 2c52 <CC_LibInitNoRng+0x36>
    2c30:	4b11      	ldr	r3, [pc, #68]	; (2c78 <CC_LibInitNoRng+0x5c>)
    2c32:	681b      	ldr	r3, [r3, #0]
    2c34:	0e1b      	lsrs	r3, r3, #24
    2c36:	2bf0      	cmp	r3, #240	; 0xf0
    2c38:	d00d      	beq.n	2c56 <CC_LibInitNoRng+0x3a>
    2c3a:	2406      	movs	r4, #6
    2c3c:	f7ff fe70 	bl	2920 <CC_HalTerminate>
    2c40:	e000      	b.n	2c44 <CC_LibInitNoRng+0x28>
    2c42:	2403      	movs	r4, #3
    2c44:	f7ff fdd4 	bl	27f0 <CC_PalTerminate>
    2c48:	4620      	mov	r0, r4
    2c4a:	bd10      	pop	{r4, pc}
    2c4c:	2404      	movs	r4, #4
    2c4e:	4620      	mov	r0, r4
    2c50:	bd10      	pop	{r4, pc}
    2c52:	2400      	movs	r4, #0
    2c54:	e7f2      	b.n	2c3c <CC_LibInitNoRng+0x20>
    2c56:	4a09      	ldr	r2, [pc, #36]	; (2c7c <CC_LibInitNoRng+0x60>)
    2c58:	4b09      	ldr	r3, [pc, #36]	; (2c80 <CC_LibInitNoRng+0x64>)
    2c5a:	6812      	ldr	r2, [r2, #0]
    2c5c:	429a      	cmp	r2, r3
    2c5e:	d001      	beq.n	2c64 <CC_LibInitNoRng+0x48>
    2c60:	2407      	movs	r4, #7
    2c62:	e7eb      	b.n	2c3c <CC_LibInitNoRng+0x20>
    2c64:	2001      	movs	r0, #1
    2c66:	f7ff fe25 	bl	28b4 <CC_PalPowerSaveModeSelect>
    2c6a:	2800      	cmp	r0, #0
    2c6c:	d1f1      	bne.n	2c52 <CC_LibInitNoRng+0x36>
    2c6e:	4b05      	ldr	r3, [pc, #20]	; (2c84 <CC_LibInitNoRng+0x68>)
    2c70:	4604      	mov	r4, r0
    2c72:	6018      	str	r0, [r3, #0]
    2c74:	e7e8      	b.n	2c48 <CC_LibInitNoRng+0x2c>
    2c76:	bf00      	nop
    2c78:	50841928 	.word	0x50841928
    2c7c:	50841a24 	.word	0x50841a24
    2c80:	20e00000 	.word	0x20e00000
    2c84:	50841a0c 	.word	0x50841a0c

00002c88 <CC_LibInitRngModule>:
    2c88:	b530      	push	{r4, r5, lr}
    2c8a:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
    2c8e:	f44f 7208 	mov.w	r2, #544	; 0x220
    2c92:	2100      	movs	r1, #0
    2c94:	a80c      	add	r0, sp, #48	; 0x30
    2c96:	f000 ffff 	bl	3c98 <memset>
    2c9a:	2300      	movs	r3, #0
    2c9c:	a802      	add	r0, sp, #8
    2c9e:	4619      	mov	r1, r3
    2ca0:	2228      	movs	r2, #40	; 0x28
    2ca2:	9301      	str	r3, [sp, #4]
    2ca4:	f000 fff8 	bl	3c98 <memset>
    2ca8:	a802      	add	r0, sp, #8
    2caa:	f7ff fed1 	bl	2a50 <RNG_PLAT_SetUserRngParameters>
    2cae:	b118      	cbz	r0, 2cb8 <CC_LibInitRngModule+0x30>
    2cb0:	2005      	movs	r0, #5
    2cb2:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    2cb6:	bd30      	pop	{r4, r5, pc}
    2cb8:	4d1c      	ldr	r5, [pc, #112]	; (2d2c <CC_LibInitRngModule+0xa4>)
    2cba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2cbe:	6828      	ldr	r0, [r5, #0]
    2cc0:	f7ff fdc8 	bl	2854 <CC_PalMutexLock>
    2cc4:	4604      	mov	r4, r0
    2cc6:	b9f0      	cbnz	r0, 2d06 <CC_LibInitRngModule+0x7e>
    2cc8:	2000      	movs	r0, #0
    2cca:	f7ff fdf3 	bl	28b4 <CC_PalPowerSaveModeSelect>
    2cce:	b9b0      	cbnz	r0, 2cfe <CC_LibInitRngModule+0x76>
    2cd0:	aa0c      	add	r2, sp, #48	; 0x30
    2cd2:	a902      	add	r1, sp, #8
    2cd4:	a801      	add	r0, sp, #4
    2cd6:	f000 fbd5 	bl	3484 <LLF_RND_RunTrngStartupTest>
    2cda:	4604      	mov	r4, r0
    2cdc:	2001      	movs	r0, #1
    2cde:	f7ff fde9 	bl	28b4 <CC_PalPowerSaveModeSelect>
    2ce2:	b9f0      	cbnz	r0, 2d22 <CC_LibInitRngModule+0x9a>
    2ce4:	6828      	ldr	r0, [r5, #0]
    2ce6:	f7ff fdbd 	bl	2864 <CC_PalMutexUnlock>
    2cea:	b110      	cbz	r0, 2cf2 <CC_LibInitRngModule+0x6a>
    2cec:	4810      	ldr	r0, [pc, #64]	; (2d30 <CC_LibInitRngModule+0xa8>)
    2cee:	f7ff ff3b 	bl	2b68 <CC_PalAbort>
    2cf2:	4620      	mov	r0, r4
    2cf4:	2c00      	cmp	r4, #0
    2cf6:	d1db      	bne.n	2cb0 <CC_LibInitRngModule+0x28>
    2cf8:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    2cfc:	bd30      	pop	{r4, r5, pc}
    2cfe:	480d      	ldr	r0, [pc, #52]	; (2d34 <CC_LibInitRngModule+0xac>)
    2d00:	f7ff ff32 	bl	2b68 <CC_PalAbort>
    2d04:	e7e4      	b.n	2cd0 <CC_LibInitRngModule+0x48>
    2d06:	480c      	ldr	r0, [pc, #48]	; (2d38 <CC_LibInitRngModule+0xb0>)
    2d08:	f7ff ff2e 	bl	2b68 <CC_PalAbort>
    2d0c:	2c01      	cmp	r4, #1
    2d0e:	d1db      	bne.n	2cc8 <CC_LibInitRngModule+0x40>
    2d10:	6828      	ldr	r0, [r5, #0]
    2d12:	f7ff fda7 	bl	2864 <CC_PalMutexUnlock>
    2d16:	2800      	cmp	r0, #0
    2d18:	d0ca      	beq.n	2cb0 <CC_LibInitRngModule+0x28>
    2d1a:	4805      	ldr	r0, [pc, #20]	; (2d30 <CC_LibInitRngModule+0xa8>)
    2d1c:	f7ff ff24 	bl	2b68 <CC_PalAbort>
    2d20:	e7c6      	b.n	2cb0 <CC_LibInitRngModule+0x28>
    2d22:	4806      	ldr	r0, [pc, #24]	; (2d3c <CC_LibInitRngModule+0xb4>)
    2d24:	f7ff ff20 	bl	2b68 <CC_PalAbort>
    2d28:	e7dc      	b.n	2ce4 <CC_LibInitRngModule+0x5c>
    2d2a:	bf00      	nop
    2d2c:	20001424 	.word	0x20001424
    2d30:	000045cc 	.word	0x000045cc
    2d34:	000045e4 	.word	0x000045e4
    2d38:	000045b4 	.word	0x000045b4
    2d3c:	00004604 	.word	0x00004604

00002d40 <CC_LibInit>:
    2d40:	b508      	push	{r3, lr}
    2d42:	f7ff fdeb 	bl	291c <CC_HalInit>
    2d46:	b118      	cbz	r0, 2d50 <CC_LibInit+0x10>
    2d48:	f7ff fd52 	bl	27f0 <CC_PalTerminate>
    2d4c:	2003      	movs	r0, #3
    2d4e:	bd08      	pop	{r3, pc}
    2d50:	f7ff fd20 	bl	2794 <CC_PalInit>
    2d54:	b968      	cbnz	r0, 2d72 <CC_LibInit+0x32>
    2d56:	f7ff fdad 	bl	28b4 <CC_PalPowerSaveModeSelect>
    2d5a:	b960      	cbnz	r0, 2d76 <CC_LibInit+0x36>
    2d5c:	4b15      	ldr	r3, [pc, #84]	; (2db4 <CC_LibInit+0x74>)
    2d5e:	681b      	ldr	r3, [r3, #0]
    2d60:	0e1b      	lsrs	r3, r3, #24
    2d62:	2bf0      	cmp	r3, #240	; 0xf0
    2d64:	d012      	beq.n	2d8c <CC_LibInit+0x4c>
    2d66:	f7ff fddb 	bl	2920 <CC_HalTerminate>
    2d6a:	f7ff fd41 	bl	27f0 <CC_PalTerminate>
    2d6e:	2006      	movs	r0, #6
    2d70:	bd08      	pop	{r3, pc}
    2d72:	2004      	movs	r0, #4
    2d74:	bd08      	pop	{r3, pc}
    2d76:	f7ff fdd3 	bl	2920 <CC_HalTerminate>
    2d7a:	f7ff fd39 	bl	27f0 <CC_PalTerminate>
    2d7e:	f7ff ff83 	bl	2c88 <CC_LibInitRngModule>
    2d82:	2800      	cmp	r0, #0
    2d84:	bf0c      	ite	eq
    2d86:	2000      	moveq	r0, #0
    2d88:	2005      	movne	r0, #5
    2d8a:	bd08      	pop	{r3, pc}
    2d8c:	4a0a      	ldr	r2, [pc, #40]	; (2db8 <CC_LibInit+0x78>)
    2d8e:	4b0b      	ldr	r3, [pc, #44]	; (2dbc <CC_LibInit+0x7c>)
    2d90:	6812      	ldr	r2, [r2, #0]
    2d92:	429a      	cmp	r2, r3
    2d94:	d005      	beq.n	2da2 <CC_LibInit+0x62>
    2d96:	f7ff fdc3 	bl	2920 <CC_HalTerminate>
    2d9a:	f7ff fd29 	bl	27f0 <CC_PalTerminate>
    2d9e:	2007      	movs	r0, #7
    2da0:	bd08      	pop	{r3, pc}
    2da2:	2001      	movs	r0, #1
    2da4:	f7ff fd86 	bl	28b4 <CC_PalPowerSaveModeSelect>
    2da8:	2800      	cmp	r0, #0
    2daa:	d1e4      	bne.n	2d76 <CC_LibInit+0x36>
    2dac:	4b04      	ldr	r3, [pc, #16]	; (2dc0 <CC_LibInit+0x80>)
    2dae:	6018      	str	r0, [r3, #0]
    2db0:	e7e5      	b.n	2d7e <CC_LibInit+0x3e>
    2db2:	bf00      	nop
    2db4:	50841928 	.word	0x50841928
    2db8:	50841a24 	.word	0x50841a24
    2dbc:	20e00000 	.word	0x20e00000
    2dc0:	50841a0c 	.word	0x50841a0c

00002dc4 <CC_PalTrngParamGet>:
    2dc4:	b118      	cbz	r0, 2dce <CC_PalTrngParamGet+0xa>
    2dc6:	b111      	cbz	r1, 2dce <CC_PalTrngParamGet+0xa>
    2dc8:	680b      	ldr	r3, [r1, #0]
    2dca:	2b1c      	cmp	r3, #28
    2dcc:	d001      	beq.n	2dd2 <CC_PalTrngParamGet+0xe>
    2dce:	2001      	movs	r0, #1
    2dd0:	4770      	bx	lr
    2dd2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2dd6:	4a3a      	ldr	r2, [pc, #232]	; (2ec0 <CC_PalTrngParamGet+0xfc>)
    2dd8:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
    2ddc:	4291      	cmp	r1, r2
    2dde:	d05a      	beq.n	2e96 <CC_PalTrngParamGet+0xd2>
    2de0:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    2de4:	3201      	adds	r2, #1
    2de6:	d056      	beq.n	2e96 <CC_PalTrngParamGet+0xd2>
    2de8:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    2dec:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2df0:	6002      	str	r2, [r0, #0]
    2df2:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
    2df6:	4a33      	ldr	r2, [pc, #204]	; (2ec4 <CC_PalTrngParamGet+0x100>)
    2df8:	4291      	cmp	r1, r2
    2dfa:	d05e      	beq.n	2eba <CC_PalTrngParamGet+0xf6>
    2dfc:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    2e00:	3201      	adds	r2, #1
    2e02:	d05a      	beq.n	2eba <CC_PalTrngParamGet+0xf6>
    2e04:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    2e08:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2e0c:	6042      	str	r2, [r0, #4]
    2e0e:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    2e12:	f512 7f94 	cmn.w	r2, #296	; 0x128
    2e16:	d04d      	beq.n	2eb4 <CC_PalTrngParamGet+0xf0>
    2e18:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    2e1c:	3201      	adds	r2, #1
    2e1e:	d049      	beq.n	2eb4 <CC_PalTrngParamGet+0xf0>
    2e20:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    2e24:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2e28:	6082      	str	r2, [r0, #8]
    2e2a:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
    2e2e:	4a26      	ldr	r2, [pc, #152]	; (2ec8 <CC_PalTrngParamGet+0x104>)
    2e30:	4291      	cmp	r1, r2
    2e32:	d03c      	beq.n	2eae <CC_PalTrngParamGet+0xea>
    2e34:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    2e38:	3201      	adds	r2, #1
    2e3a:	d038      	beq.n	2eae <CC_PalTrngParamGet+0xea>
    2e3c:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    2e40:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2e44:	60c2      	str	r2, [r0, #12]
    2e46:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    2e4a:	3270      	adds	r2, #112	; 0x70
    2e4c:	d02d      	beq.n	2eaa <CC_PalTrngParamGet+0xe6>
    2e4e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    2e52:	3201      	adds	r2, #1
    2e54:	d029      	beq.n	2eaa <CC_PalTrngParamGet+0xe6>
    2e56:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    2e5a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2e5e:	6102      	str	r2, [r0, #16]
    2e60:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    2e64:	32af      	adds	r2, #175	; 0xaf
    2e66:	d01e      	beq.n	2ea6 <CC_PalTrngParamGet+0xe2>
    2e68:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    2e6c:	3201      	adds	r2, #1
    2e6e:	d01a      	beq.n	2ea6 <CC_PalTrngParamGet+0xe2>
    2e70:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    2e74:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2e78:	6142      	str	r2, [r0, #20]
    2e7a:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
    2e7e:	4a13      	ldr	r2, [pc, #76]	; (2ecc <CC_PalTrngParamGet+0x108>)
    2e80:	4291      	cmp	r1, r2
    2e82:	d00b      	beq.n	2e9c <CC_PalTrngParamGet+0xd8>
    2e84:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
    2e88:	3201      	adds	r2, #1
    2e8a:	d007      	beq.n	2e9c <CC_PalTrngParamGet+0xd8>
    2e8c:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
    2e90:	6183      	str	r3, [r0, #24]
    2e92:	2000      	movs	r0, #0
    2e94:	4770      	bx	lr
    2e96:	f640 02fc 	movw	r2, #2300	; 0x8fc
    2e9a:	e7a7      	b.n	2dec <CC_PalTrngParamGet+0x28>
    2e9c:	f240 3337 	movw	r3, #823	; 0x337
    2ea0:	6183      	str	r3, [r0, #24]
    2ea2:	2000      	movs	r0, #0
    2ea4:	4770      	bx	lr
    2ea6:	2251      	movs	r2, #81	; 0x51
    2ea8:	e7e4      	b.n	2e74 <CC_PalTrngParamGet+0xb0>
    2eaa:	2290      	movs	r2, #144	; 0x90
    2eac:	e7d5      	b.n	2e5a <CC_PalTrngParamGet+0x96>
    2eae:	f642 1204 	movw	r2, #10500	; 0x2904
    2eb2:	e7c5      	b.n	2e40 <CC_PalTrngParamGet+0x7c>
    2eb4:	f640 62d8 	movw	r2, #3800	; 0xed8
    2eb8:	e7b4      	b.n	2e24 <CC_PalTrngParamGet+0x60>
    2eba:	f242 02d0 	movw	r2, #8400	; 0x20d0
    2ebe:	e7a3      	b.n	2e08 <CC_PalTrngParamGet+0x44>
    2ec0:	fffff8fc 	.word	0xfffff8fc
    2ec4:	ffff20d0 	.word	0xffff20d0
    2ec8:	ffff2904 	.word	0xffff2904
    2ecc:	fffff337 	.word	0xfffff337

00002ed0 <LLF_RND_AdaptiveProportionTest>:
    2ed0:	b3a8      	cbz	r0, 2f3e <LLF_RND_AdaptiveProportionTest+0x6e>
    2ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ed6:	1e4c      	subs	r4, r1, #1
    2ed8:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
    2edc:	d22c      	bcs.n	2f38 <LLF_RND_AdaptiveProportionTest+0x68>
    2ede:	b35b      	cbz	r3, 2f38 <LLF_RND_AdaptiveProportionTest+0x68>
    2ee0:	b352      	cbz	r2, 2f38 <LLF_RND_AdaptiveProportionTest+0x68>
    2ee2:	f04f 0c00 	mov.w	ip, #0
    2ee6:	00c9      	lsls	r1, r1, #3
    2ee8:	46e6      	mov	lr, ip
    2eea:	4665      	mov	r5, ip
    2eec:	4664      	mov	r4, ip
    2eee:	1e4f      	subs	r7, r1, #1
    2ef0:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    2ef4:	e00c      	b.n	2f10 <LLF_RND_AdaptiveProportionTest+0x40>
    2ef6:	42ab      	cmp	r3, r5
    2ef8:	d016      	beq.n	2f28 <LLF_RND_AdaptiveProportionTest+0x58>
    2efa:	458e      	cmp	lr, r1
    2efc:	d101      	bne.n	2f02 <LLF_RND_AdaptiveProportionTest+0x32>
    2efe:	f10c 0c01 	add.w	ip, ip, #1
    2f02:	45a8      	cmp	r8, r5
    2f04:	d016      	beq.n	2f34 <LLF_RND_AdaptiveProportionTest+0x64>
    2f06:	3401      	adds	r4, #1
    2f08:	42bc      	cmp	r4, r7
    2f0a:	f105 0501 	add.w	r5, r5, #1
    2f0e:	d818      	bhi.n	2f42 <LLF_RND_AdaptiveProportionTest+0x72>
    2f10:	0961      	lsrs	r1, r4, #5
    2f12:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    2f16:	f004 061f 	and.w	r6, r4, #31
    2f1a:	40f1      	lsrs	r1, r6
    2f1c:	2e1f      	cmp	r6, #31
    2f1e:	bf18      	it	ne
    2f20:	f001 0101 	andne.w	r1, r1, #1
    2f24:	2c00      	cmp	r4, #0
    2f26:	d1e6      	bne.n	2ef6 <LLF_RND_AdaptiveProportionTest+0x26>
    2f28:	2500      	movs	r5, #0
    2f2a:	45a8      	cmp	r8, r5
    2f2c:	468e      	mov	lr, r1
    2f2e:	f04f 0c01 	mov.w	ip, #1
    2f32:	d1e8      	bne.n	2f06 <LLF_RND_AdaptiveProportionTest+0x36>
    2f34:	4562      	cmp	r2, ip
    2f36:	d2e6      	bcs.n	2f06 <LLF_RND_AdaptiveProportionTest+0x36>
    2f38:	4803      	ldr	r0, [pc, #12]	; (2f48 <LLF_RND_AdaptiveProportionTest+0x78>)
    2f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f3e:	4802      	ldr	r0, [pc, #8]	; (2f48 <LLF_RND_AdaptiveProportionTest+0x78>)
    2f40:	4770      	bx	lr
    2f42:	2000      	movs	r0, #0
    2f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f48:	00f10c37 	.word	0x00f10c37

00002f4c <getTrngSource>:
    2f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f50:	b08f      	sub	sp, #60	; 0x3c
    2f52:	460d      	mov	r5, r1
    2f54:	e9dd 4119 	ldrd	r4, r1, [sp, #100]	; 0x64
    2f58:	4683      	mov	fp, r0
    2f5a:	2900      	cmp	r1, #0
    2f5c:	d157      	bne.n	300e <getTrngSource+0xc2>
    2f5e:	6929      	ldr	r1, [r5, #16]
    2f60:	9103      	str	r1, [sp, #12]
    2f62:	2100      	movs	r1, #0
    2f64:	601c      	str	r4, [r3, #0]
    2f66:	9b18      	ldr	r3, [sp, #96]	; 0x60
    2f68:	6019      	str	r1, [r3, #0]
    2f6a:	2a00      	cmp	r2, #0
    2f6c:	f000 8122 	beq.w	31b4 <getTrngSource+0x268>
    2f70:	4a81      	ldr	r2, [pc, #516]	; (3178 <getTrngSource+0x22c>)
    2f72:	4b82      	ldr	r3, [pc, #520]	; (317c <getTrngSource+0x230>)
    2f74:	6811      	ldr	r1, [r2, #0]
    2f76:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2f78:	681b      	ldr	r3, [r3, #0]
    2f7a:	429a      	cmp	r2, r3
    2f7c:	d157      	bne.n	302e <getTrngSource+0xe2>
    2f7e:	290a      	cmp	r1, #10
    2f80:	d155      	bne.n	302e <getTrngSource+0xe2>
    2f82:	f89b 3003 	ldrb.w	r3, [fp, #3]
    2f86:	9306      	str	r3, [sp, #24]
    2f88:	9903      	ldr	r1, [sp, #12]
    2f8a:	2304      	movs	r3, #4
    2f8c:	4608      	mov	r0, r1
    2f8e:	4a7c      	ldr	r2, [pc, #496]	; (3180 <getTrngSource+0x234>)
    2f90:	9302      	str	r3, [sp, #8]
    2f92:	fba2 0200 	umull	r0, r2, r2, r0
    2f96:	0892      	lsrs	r2, r2, #2
    2f98:	00cb      	lsls	r3, r1, #3
    2f9a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2f9e:	f104 0008 	add.w	r0, r4, #8
    2fa2:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
    2fa6:	3b01      	subs	r3, #1
    2fa8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 317c <getTrngSource+0x230>
    2fac:	f8df a200 	ldr.w	sl, [pc, #512]	; 31b0 <getTrngSource+0x264>
    2fb0:	9004      	str	r0, [sp, #16]
    2fb2:	9200      	str	r2, [sp, #0]
    2fb4:	9305      	str	r3, [sp, #20]
    2fb6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    2fb8:	9c03      	ldr	r4, [sp, #12]
    2fba:	601c      	str	r4, [r3, #0]
    2fbc:	2c00      	cmp	r4, #0
    2fbe:	f000 80cc 	beq.w	315a <getTrngSource+0x20e>
    2fc2:	2600      	movs	r6, #0
    2fc4:	9f04      	ldr	r7, [sp, #16]
    2fc6:	f000 faa9 	bl	351c <LLF_RND_TurnOffTrng>
    2fca:	2300      	movs	r3, #0
    2fcc:	9307      	str	r3, [sp, #28]
    2fce:	9b06      	ldr	r3, [sp, #24]
    2fd0:	f1bb 0f00 	cmp.w	fp, #0
    2fd4:	d03a      	beq.n	304c <getTrngSource+0x100>
    2fd6:	2d00      	cmp	r5, #0
    2fd8:	d034      	beq.n	3044 <getTrngSource+0xf8>
    2fda:	bb53      	cbnz	r3, 3032 <getTrngSource+0xe6>
    2fdc:	005b      	lsls	r3, r3, #1
    2fde:	9306      	str	r3, [sp, #24]
    2fe0:	f1bb 0f00 	cmp.w	fp, #0
    2fe4:	d036      	beq.n	3054 <getTrngSource+0x108>
    2fe6:	2d00      	cmp	r5, #0
    2fe8:	d034      	beq.n	3054 <getTrngSource+0x108>
    2fea:	b1e3      	cbz	r3, 3026 <getTrngSource+0xda>
    2fec:	a906      	add	r1, sp, #24
    2fee:	4628      	mov	r0, r5
    2ff0:	f000 fa84 	bl	34fc <LLF_RND_GetFastestRosc>
    2ff4:	2800      	cmp	r0, #0
    2ff6:	f000 817d 	beq.w	32f4 <getTrngSource+0x3a8>
    2ffa:	4b62      	ldr	r3, [pc, #392]	; (3184 <getTrngSource+0x238>)
    2ffc:	4298      	cmp	r0, r3
    2ffe:	d012      	beq.n	3026 <getTrngSource+0xda>
    3000:	9000      	str	r0, [sp, #0]
    3002:	f000 fa8b 	bl	351c <LLF_RND_TurnOffTrng>
    3006:	9800      	ldr	r0, [sp, #0]
    3008:	b00f      	add	sp, #60	; 0x3c
    300a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    300e:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    3012:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
    3016:	3001      	adds	r0, #1
    3018:	bf0c      	ite	eq
    301a:	f44f 7104 	moveq.w	r1, #528	; 0x210
    301e:	f8d1 1c0c 	ldrne.w	r1, [r1, #3084]	; 0xc0c
    3022:	9103      	str	r1, [sp, #12]
    3024:	e79d      	b.n	2f62 <getTrngSource+0x16>
    3026:	6a2b      	ldr	r3, [r5, #32]
    3028:	b973      	cbnz	r3, 3048 <getTrngSource+0xfc>
    302a:	4856      	ldr	r0, [pc, #344]	; (3184 <getTrngSource+0x238>)
    302c:	e7e8      	b.n	3000 <getTrngSource+0xb4>
    302e:	4856      	ldr	r0, [pc, #344]	; (3188 <getTrngSource+0x23c>)
    3030:	e7e6      	b.n	3000 <getTrngSource+0xb4>
    3032:	a906      	add	r1, sp, #24
    3034:	4628      	mov	r0, r5
    3036:	f000 fa61 	bl	34fc <LLF_RND_GetFastestRosc>
    303a:	b168      	cbz	r0, 3058 <getTrngSource+0x10c>
    303c:	4b53      	ldr	r3, [pc, #332]	; (318c <getTrngSource+0x240>)
    303e:	4298      	cmp	r0, r3
    3040:	d0de      	beq.n	3000 <getTrngSource+0xb4>
    3042:	9b06      	ldr	r3, [sp, #24]
    3044:	2b08      	cmp	r3, #8
    3046:	d1c9      	bne.n	2fdc <getTrngSource+0x90>
    3048:	4851      	ldr	r0, [pc, #324]	; (3190 <getTrngSource+0x244>)
    304a:	e7d9      	b.n	3000 <getTrngSource+0xb4>
    304c:	2b08      	cmp	r3, #8
    304e:	d0fb      	beq.n	3048 <getTrngSource+0xfc>
    3050:	005b      	lsls	r3, r3, #1
    3052:	9306      	str	r3, [sp, #24]
    3054:	484f      	ldr	r0, [pc, #316]	; (3194 <getTrngSource+0x248>)
    3056:	e7d3      	b.n	3000 <getTrngSource+0xb4>
    3058:	4629      	mov	r1, r5
    305a:	9806      	ldr	r0, [sp, #24]
    305c:	f000 fa30 	bl	34c0 <LLF_RND_GetRoscSampleCnt>
    3060:	2800      	cmp	r0, #0
    3062:	d1eb      	bne.n	303c <getTrngSource+0xf0>
    3064:	9b06      	ldr	r3, [sp, #24]
    3066:	2b08      	cmp	r3, #8
    3068:	f000 810e 	beq.w	3288 <getTrngSource+0x33c>
    306c:	2b04      	cmp	r3, #4
    306e:	f000 8131 	beq.w	32d4 <getTrngSource+0x388>
    3072:	f1a3 0302 	sub.w	r3, r3, #2
    3076:	fab3 f383 	clz	r3, r3
    307a:	095b      	lsrs	r3, r3, #5
    307c:	9301      	str	r3, [sp, #4]
    307e:	2301      	movs	r3, #1
    3080:	4619      	mov	r1, r3
    3082:	4a45      	ldr	r2, [pc, #276]	; (3198 <getTrngSource+0x24c>)
    3084:	6013      	str	r3, [r2, #0]
    3086:	f842 3c84 	str.w	r3, [r2, #-132]
    308a:	4b43      	ldr	r3, [pc, #268]	; (3198 <getTrngSource+0x24c>)
    308c:	6019      	str	r1, [r3, #0]
    308e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3090:	f8c9 3000 	str.w	r3, [r9]
    3094:	f8d9 2000 	ldr.w	r2, [r9]
    3098:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    309a:	429a      	cmp	r2, r3
    309c:	d1f5      	bne.n	308a <getTrngSource+0x13e>
    309e:	f04f 0800 	mov.w	r8, #0
    30a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    30a6:	f8ca 8000 	str.w	r8, [sl]
    30aa:	f7ff fc3b 	bl	2924 <CC_HalClearInterruptBit>
    30ae:	4a3b      	ldr	r2, [pc, #236]	; (319c <getTrngSource+0x250>)
    30b0:	4b3b      	ldr	r3, [pc, #236]	; (31a0 <getTrngSource+0x254>)
    30b2:	4640      	mov	r0, r8
    30b4:	601a      	str	r2, [r3, #0]
    30b6:	f7ff fc43 	bl	2940 <CC_HalMaskInterrupt>
    30ba:	220a      	movs	r2, #10
    30bc:	9801      	ldr	r0, [sp, #4]
    30be:	4939      	ldr	r1, [pc, #228]	; (31a4 <getTrngSource+0x258>)
    30c0:	4b2d      	ldr	r3, [pc, #180]	; (3178 <getTrngSource+0x22c>)
    30c2:	6008      	str	r0, [r1, #0]
    30c4:	601a      	str	r2, [r3, #0]
    30c6:	692a      	ldr	r2, [r5, #16]
    30c8:	f1a8 3855 	sub.w	r8, r8, #1431655765	; 0x55555555
    30cc:	fba8 1202 	umull	r1, r2, r8, r2
    30d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    30d2:	0912      	lsrs	r2, r2, #4
    30d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    30d8:	03db      	lsls	r3, r3, #15
    30da:	fb03 f302 	mul.w	r3, r3, r2
    30de:	4a32      	ldr	r2, [pc, #200]	; (31a8 <getTrngSource+0x25c>)
    30e0:	099b      	lsrs	r3, r3, #6
    30e2:	6013      	str	r3, [r2, #0]
    30e4:	2301      	movs	r3, #1
    30e6:	f8ca 3000 	str.w	r3, [sl]
    30ea:	9906      	ldr	r1, [sp, #24]
    30ec:	f8db 2000 	ldr.w	r2, [fp]
    30f0:	020b      	lsls	r3, r1, #8
    30f2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    30f6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    30fa:	4313      	orrs	r3, r2
    30fc:	f8cb 3000 	str.w	r3, [fp]
    3100:	a807      	add	r0, sp, #28
    3102:	f000 f9cd 	bl	34a0 <LLF_RND_WaitRngInterrupt>
    3106:	2800      	cmp	r0, #0
    3108:	d198      	bne.n	303c <getTrngSource+0xf0>
    310a:	4b28      	ldr	r3, [pc, #160]	; (31ac <getTrngSource+0x260>)
    310c:	fba8 2804 	umull	r2, r8, r8, r4
    3110:	681a      	ldr	r2, [r3, #0]
    3112:	3314      	adds	r3, #20
    3114:	9208      	str	r2, [sp, #32]
    3116:	f853 2c10 	ldr.w	r2, [r3, #-16]
    311a:	ebb6 0f98 	cmp.w	r6, r8, lsr #2
    311e:	9209      	str	r2, [sp, #36]	; 0x24
    3120:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    3124:	920a      	str	r2, [sp, #40]	; 0x28
    3126:	f853 2c08 	ldr.w	r2, [r3, #-8]
    312a:	920b      	str	r2, [sp, #44]	; 0x2c
    312c:	f853 2c04 	ldr.w	r2, [r3, #-4]
    3130:	920c      	str	r2, [sp, #48]	; 0x30
    3132:	681b      	ldr	r3, [r3, #0]
    3134:	930d      	str	r3, [sp, #52]	; 0x34
    3136:	d101      	bne.n	313c <getTrngSource+0x1f0>
    3138:	9b00      	ldr	r3, [sp, #0]
    313a:	b99b      	cbnz	r3, 3164 <getTrngSource+0x218>
    313c:	4638      	mov	r0, r7
    313e:	2218      	movs	r2, #24
    3140:	a908      	add	r1, sp, #32
    3142:	f7ff fb21 	bl	2788 <CC_PalMemCopyPlat>
    3146:	3c18      	subs	r4, #24
    3148:	3718      	adds	r7, #24
    314a:	3601      	adds	r6, #1
    314c:	2c00      	cmp	r4, #0
    314e:	f47f af3a 	bne.w	2fc6 <getTrngSource+0x7a>
    3152:	9b04      	ldr	r3, [sp, #16]
    3154:	2b00      	cmp	r3, #0
    3156:	f040 809a 	bne.w	328e <getTrngSource+0x342>
    315a:	2300      	movs	r3, #0
    315c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    315e:	6013      	str	r3, [r2, #0]
    3160:	9b06      	ldr	r3, [sp, #24]
    3162:	e76f      	b.n	3044 <getTrngSource+0xf8>
    3164:	461a      	mov	r2, r3
    3166:	4638      	mov	r0, r7
    3168:	a908      	add	r1, sp, #32
    316a:	1ae4      	subs	r4, r4, r3
    316c:	f7ff fb0c 	bl	2788 <CC_PalMemCopyPlat>
    3170:	9b00      	ldr	r3, [sp, #0]
    3172:	441f      	add	r7, r3
    3174:	e7e9      	b.n	314a <getTrngSource+0x1fe>
    3176:	bf00      	nop
    3178:	50841138 	.word	0x50841138
    317c:	50841130 	.word	0x50841130
    3180:	aaaaaaab 	.word	0xaaaaaaab
    3184:	00f10c31 	.word	0x00f10c31
    3188:	00f10c30 	.word	0x00f10c30
    318c:	00f10c02 	.word	0x00f10c02
    3190:	00f10c32 	.word	0x00f10c32
    3194:	00f10c35 	.word	0x00f10c35
    3198:	508411c4 	.word	0x508411c4
    319c:	0ffffffe 	.word	0x0ffffffe
    31a0:	50841100 	.word	0x50841100
    31a4:	5084110c 	.word	0x5084110c
    31a8:	508411d8 	.word	0x508411d8
    31ac:	50841114 	.word	0x50841114
    31b0:	5084112c 	.word	0x5084112c
    31b4:	f1bb 0f00 	cmp.w	fp, #0
    31b8:	f43f af4c 	beq.w	3054 <getTrngSource+0x108>
    31bc:	2d00      	cmp	r5, #0
    31be:	f43f af49 	beq.w	3054 <getTrngSource+0x108>
    31c2:	2301      	movs	r3, #1
    31c4:	a90e      	add	r1, sp, #56	; 0x38
    31c6:	f841 3d20 	str.w	r3, [r1, #-32]!
    31ca:	f8cb 2000 	str.w	r2, [fp]
    31ce:	4628      	mov	r0, r5
    31d0:	f000 f994 	bl	34fc <LLF_RND_GetFastestRosc>
    31d4:	2800      	cmp	r0, #0
    31d6:	f47f af13 	bne.w	3000 <getTrngSource+0xb4>
    31da:	4629      	mov	r1, r5
    31dc:	9806      	ldr	r0, [sp, #24]
    31de:	f000 f96f 	bl	34c0 <LLF_RND_GetRoscSampleCnt>
    31e2:	2800      	cmp	r0, #0
    31e4:	f47f af0c 	bne.w	3000 <getTrngSource+0xb4>
    31e8:	9f06      	ldr	r7, [sp, #24]
    31ea:	2f08      	cmp	r7, #8
    31ec:	f000 80eb 	beq.w	33c6 <getTrngSource+0x47a>
    31f0:	2f04      	cmp	r7, #4
    31f2:	f000 80ea 	beq.w	33ca <getTrngSource+0x47e>
    31f6:	f1a7 0702 	sub.w	r7, r7, #2
    31fa:	fab7 f787 	clz	r7, r7
    31fe:	097f      	lsrs	r7, r7, #5
    3200:	2201      	movs	r2, #1
    3202:	4616      	mov	r6, r2
    3204:	4b73      	ldr	r3, [pc, #460]	; (33d4 <getTrngSource+0x488>)
    3206:	4974      	ldr	r1, [pc, #464]	; (33d8 <getTrngSource+0x48c>)
    3208:	601a      	str	r2, [r3, #0]
    320a:	4618      	mov	r0, r3
    320c:	600a      	str	r2, [r1, #0]
    320e:	3b94      	subs	r3, #148	; 0x94
    3210:	6006      	str	r6, [r0, #0]
    3212:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    3214:	601a      	str	r2, [r3, #0]
    3216:	6819      	ldr	r1, [r3, #0]
    3218:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    321a:	4291      	cmp	r1, r2
    321c:	d1f8      	bne.n	3210 <getTrngSource+0x2c4>
    321e:	f04f 0800 	mov.w	r8, #0
    3222:	4b6e      	ldr	r3, [pc, #440]	; (33dc <getTrngSource+0x490>)
    3224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3228:	f8c3 8000 	str.w	r8, [r3]
    322c:	f7ff fb7a 	bl	2924 <CC_HalClearInterruptBit>
    3230:	4b6b      	ldr	r3, [pc, #428]	; (33e0 <getTrngSource+0x494>)
    3232:	4a6c      	ldr	r2, [pc, #432]	; (33e4 <getTrngSource+0x498>)
    3234:	4640      	mov	r0, r8
    3236:	601a      	str	r2, [r3, #0]
    3238:	f7ff fb82 	bl	2940 <CC_HalMaskInterrupt>
    323c:	220a      	movs	r2, #10
    323e:	496a      	ldr	r1, [pc, #424]	; (33e8 <getTrngSource+0x49c>)
    3240:	4b6a      	ldr	r3, [pc, #424]	; (33ec <getTrngSource+0x4a0>)
    3242:	600f      	str	r7, [r1, #0]
    3244:	601a      	str	r2, [r3, #0]
    3246:	991a      	ldr	r1, [sp, #104]	; 0x68
    3248:	692b      	ldr	r3, [r5, #16]
    324a:	2901      	cmp	r1, #1
    324c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    324e:	f000 80b1 	beq.w	33b4 <getTrngSource+0x468>
    3252:	4967      	ldr	r1, [pc, #412]	; (33f0 <getTrngSource+0x4a4>)
    3254:	fba1 1303 	umull	r1, r3, r1, r3
    3258:	091b      	lsrs	r3, r3, #4
    325a:	2101      	movs	r1, #1
    325c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3260:	03d2      	lsls	r2, r2, #15
    3262:	fb03 f302 	mul.w	r3, r3, r2
    3266:	4a63      	ldr	r2, [pc, #396]	; (33f4 <getTrngSource+0x4a8>)
    3268:	099b      	lsrs	r3, r3, #6
    326a:	6013      	str	r3, [r2, #0]
    326c:	4b5b      	ldr	r3, [pc, #364]	; (33dc <getTrngSource+0x490>)
    326e:	6019      	str	r1, [r3, #0]
    3270:	9906      	ldr	r1, [sp, #24]
    3272:	f8db 2000 	ldr.w	r2, [fp]
    3276:	020b      	lsls	r3, r1, #8
    3278:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    327c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3280:	4313      	orrs	r3, r2
    3282:	f8cb 3000 	str.w	r3, [fp]
    3286:	e67f      	b.n	2f88 <getTrngSource+0x3c>
    3288:	2303      	movs	r3, #3
    328a:	9301      	str	r3, [sp, #4]
    328c:	e6f7      	b.n	307e <getTrngSource+0x132>
    328e:	9b03      	ldr	r3, [sp, #12]
    3290:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
    3294:	f63f af61 	bhi.w	315a <getTrngSource+0x20e>
    3298:	e9dd 7c04 	ldrd	r7, ip, [sp, #16]
    329c:	4620      	mov	r0, r4
    329e:	4623      	mov	r3, r4
    32a0:	696e      	ldr	r6, [r5, #20]
    32a2:	e004      	b.n	32ae <getTrngSource+0x362>
    32a4:	2001      	movs	r0, #1
    32a6:	3301      	adds	r3, #1
    32a8:	4563      	cmp	r3, ip
    32aa:	4614      	mov	r4, r2
    32ac:	d815      	bhi.n	32da <getTrngSource+0x38e>
    32ae:	095a      	lsrs	r2, r3, #5
    32b0:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    32b4:	f003 011f 	and.w	r1, r3, #31
    32b8:	40ca      	lsrs	r2, r1
    32ba:	291f      	cmp	r1, #31
    32bc:	bf18      	it	ne
    32be:	f002 0201 	andne.w	r2, r2, #1
    32c2:	2b00      	cmp	r3, #0
    32c4:	d0ee      	beq.n	32a4 <getTrngSource+0x358>
    32c6:	42a2      	cmp	r2, r4
    32c8:	d1ec      	bne.n	32a4 <getTrngSource+0x358>
    32ca:	3001      	adds	r0, #1
    32cc:	4286      	cmp	r6, r0
    32ce:	d1ea      	bne.n	32a6 <getTrngSource+0x35a>
    32d0:	4849      	ldr	r0, [pc, #292]	; (33f8 <getTrngSource+0x4ac>)
    32d2:	e00b      	b.n	32ec <getTrngSource+0x3a0>
    32d4:	2302      	movs	r3, #2
    32d6:	9301      	str	r3, [sp, #4]
    32d8:	e6d1      	b.n	307e <getTrngSource+0x132>
    32da:	f44f 6380 	mov.w	r3, #1024	; 0x400
    32de:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
    32e2:	69aa      	ldr	r2, [r5, #24]
    32e4:	f7ff fdf4 	bl	2ed0 <LLF_RND_AdaptiveProportionTest>
    32e8:	2800      	cmp	r0, #0
    32ea:	d05d      	beq.n	33a8 <getTrngSource+0x45c>
    32ec:	2300      	movs	r3, #0
    32ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
    32f0:	6013      	str	r3, [r2, #0]
    32f2:	e6a3      	b.n	303c <getTrngSource+0xf0>
    32f4:	4629      	mov	r1, r5
    32f6:	9806      	ldr	r0, [sp, #24]
    32f8:	f000 f8e2 	bl	34c0 <LLF_RND_GetRoscSampleCnt>
    32fc:	2800      	cmp	r0, #0
    32fe:	f47f ae7c 	bne.w	2ffa <getTrngSource+0xae>
    3302:	9c06      	ldr	r4, [sp, #24]
    3304:	2c08      	cmp	r4, #8
    3306:	d051      	beq.n	33ac <getTrngSource+0x460>
    3308:	2c04      	cmp	r4, #4
    330a:	d051      	beq.n	33b0 <getTrngSource+0x464>
    330c:	f1a4 0402 	sub.w	r4, r4, #2
    3310:	fab4 f484 	clz	r4, r4
    3314:	0964      	lsrs	r4, r4, #5
    3316:	2301      	movs	r3, #1
    3318:	461e      	mov	r6, r3
    331a:	4619      	mov	r1, r3
    331c:	4a2d      	ldr	r2, [pc, #180]	; (33d4 <getTrngSource+0x488>)
    331e:	6013      	str	r3, [r2, #0]
    3320:	f842 3c84 	str.w	r3, [r2, #-132]
    3324:	4b2b      	ldr	r3, [pc, #172]	; (33d4 <getTrngSource+0x488>)
    3326:	6019      	str	r1, [r3, #0]
    3328:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    332a:	f8c9 3000 	str.w	r3, [r9]
    332e:	f8d9 2000 	ldr.w	r2, [r9]
    3332:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3334:	429a      	cmp	r2, r3
    3336:	d1f5      	bne.n	3324 <getTrngSource+0x3d8>
    3338:	2700      	movs	r7, #0
    333a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    333e:	f8ca 7000 	str.w	r7, [sl]
    3342:	f7ff faef 	bl	2924 <CC_HalClearInterruptBit>
    3346:	4b26      	ldr	r3, [pc, #152]	; (33e0 <getTrngSource+0x494>)
    3348:	4a26      	ldr	r2, [pc, #152]	; (33e4 <getTrngSource+0x498>)
    334a:	4638      	mov	r0, r7
    334c:	601a      	str	r2, [r3, #0]
    334e:	f7ff faf7 	bl	2940 <CC_HalMaskInterrupt>
    3352:	220a      	movs	r2, #10
    3354:	4924      	ldr	r1, [pc, #144]	; (33e8 <getTrngSource+0x49c>)
    3356:	4b25      	ldr	r3, [pc, #148]	; (33ec <getTrngSource+0x4a0>)
    3358:	600c      	str	r4, [r1, #0]
    335a:	601a      	str	r2, [r3, #0]
    335c:	692a      	ldr	r2, [r5, #16]
    335e:	4924      	ldr	r1, [pc, #144]	; (33f0 <getTrngSource+0x4a4>)
    3360:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3362:	fba1 1202 	umull	r1, r2, r1, r2
    3366:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    336a:	0912      	lsrs	r2, r2, #4
    336c:	03db      	lsls	r3, r3, #15
    336e:	fb03 f302 	mul.w	r3, r3, r2
    3372:	4a20      	ldr	r2, [pc, #128]	; (33f4 <getTrngSource+0x4a8>)
    3374:	099b      	lsrs	r3, r3, #6
    3376:	6013      	str	r3, [r2, #0]
    3378:	f8ca 6000 	str.w	r6, [sl]
    337c:	9b06      	ldr	r3, [sp, #24]
    337e:	f8db 1000 	ldr.w	r1, [fp]
    3382:	021a      	lsls	r2, r3, #8
    3384:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
    3388:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
    338c:	431a      	orrs	r2, r3
    338e:	0a13      	lsrs	r3, r2, #8
    3390:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    3394:	4313      	orrs	r3, r2
    3396:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    339a:	f8cb 3000 	str.w	r3, [fp]
    339e:	9b02      	ldr	r3, [sp, #8]
    33a0:	3b01      	subs	r3, #1
    33a2:	9302      	str	r3, [sp, #8]
    33a4:	f47f ae07 	bne.w	2fb6 <getTrngSource+0x6a>
    33a8:	2000      	movs	r0, #0
    33aa:	e629      	b.n	3000 <getTrngSource+0xb4>
    33ac:	2403      	movs	r4, #3
    33ae:	e7b2      	b.n	3316 <getTrngSource+0x3ca>
    33b0:	2402      	movs	r4, #2
    33b2:	e7b0      	b.n	3316 <getTrngSource+0x3ca>
    33b4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    33b8:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
    33bc:	3101      	adds	r1, #1
    33be:	d006      	beq.n	33ce <getTrngSource+0x482>
    33c0:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
    33c4:	e745      	b.n	3252 <getTrngSource+0x306>
    33c6:	2703      	movs	r7, #3
    33c8:	e71a      	b.n	3200 <getTrngSource+0x2b4>
    33ca:	2702      	movs	r7, #2
    33cc:	e718      	b.n	3200 <getTrngSource+0x2b4>
    33ce:	2316      	movs	r3, #22
    33d0:	e743      	b.n	325a <getTrngSource+0x30e>
    33d2:	bf00      	nop
    33d4:	508411c4 	.word	0x508411c4
    33d8:	50841140 	.word	0x50841140
    33dc:	5084112c 	.word	0x5084112c
    33e0:	50841100 	.word	0x50841100
    33e4:	0ffffffe 	.word	0x0ffffffe
    33e8:	5084110c 	.word	0x5084110c
    33ec:	50841138 	.word	0x50841138
    33f0:	aaaaaaab 	.word	0xaaaaaaab
    33f4:	508411d8 	.word	0x508411d8
    33f8:	00f10c36 	.word	0x00f10c36

000033fc <LLF_RND_GetTrngSource>:
    33fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3400:	4c1b      	ldr	r4, [pc, #108]	; (3470 <LLF_RND_GetTrngSource+0x74>)
    3402:	b085      	sub	sp, #20
    3404:	4607      	mov	r7, r0
    3406:	e9dd 560d 	ldrd	r5, r6, [sp, #52]	; 0x34
    340a:	4688      	mov	r8, r1
    340c:	6820      	ldr	r0, [r4, #0]
    340e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3412:	4691      	mov	r9, r2
    3414:	f7ff fa1e 	bl	2854 <CC_PalMutexLock>
    3418:	bb28      	cbnz	r0, 3466 <LLF_RND_GetTrngSource+0x6a>
    341a:	2000      	movs	r0, #0
    341c:	f7ff fa4a 	bl	28b4 <CC_PalPowerSaveModeSelect>
    3420:	b9e8      	cbnz	r0, 345e <LLF_RND_GetTrngSource+0x62>
    3422:	2300      	movs	r3, #0
    3424:	e9cd 5600 	strd	r5, r6, [sp]
    3428:	9302      	str	r3, [sp, #8]
    342a:	464a      	mov	r2, r9
    342c:	4641      	mov	r1, r8
    342e:	4638      	mov	r0, r7
    3430:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3432:	f7ff fd8b 	bl	2f4c <getTrngSource>
    3436:	4605      	mov	r5, r0
    3438:	2001      	movs	r0, #1
    343a:	f7ff fa3b 	bl	28b4 <CC_PalPowerSaveModeSelect>
    343e:	b950      	cbnz	r0, 3456 <LLF_RND_GetTrngSource+0x5a>
    3440:	6820      	ldr	r0, [r4, #0]
    3442:	f7ff fa0f 	bl	2864 <CC_PalMutexUnlock>
    3446:	b110      	cbz	r0, 344e <LLF_RND_GetTrngSource+0x52>
    3448:	480a      	ldr	r0, [pc, #40]	; (3474 <LLF_RND_GetTrngSource+0x78>)
    344a:	f7ff fb8d 	bl	2b68 <CC_PalAbort>
    344e:	4628      	mov	r0, r5
    3450:	b005      	add	sp, #20
    3452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3456:	4808      	ldr	r0, [pc, #32]	; (3478 <LLF_RND_GetTrngSource+0x7c>)
    3458:	f7ff fb86 	bl	2b68 <CC_PalAbort>
    345c:	e7f0      	b.n	3440 <LLF_RND_GetTrngSource+0x44>
    345e:	4807      	ldr	r0, [pc, #28]	; (347c <LLF_RND_GetTrngSource+0x80>)
    3460:	f7ff fb82 	bl	2b68 <CC_PalAbort>
    3464:	e7dd      	b.n	3422 <LLF_RND_GetTrngSource+0x26>
    3466:	4806      	ldr	r0, [pc, #24]	; (3480 <LLF_RND_GetTrngSource+0x84>)
    3468:	f7ff fb7e 	bl	2b68 <CC_PalAbort>
    346c:	e7d5      	b.n	341a <LLF_RND_GetTrngSource+0x1e>
    346e:	bf00      	nop
    3470:	20001424 	.word	0x20001424
    3474:	000045cc 	.word	0x000045cc
    3478:	00004604 	.word	0x00004604
    347c:	000045e4 	.word	0x000045e4
    3480:	000045b4 	.word	0x000045b4

00003484 <LLF_RND_RunTrngStartupTest>:
    3484:	b510      	push	{r4, lr}
    3486:	2401      	movs	r4, #1
    3488:	b086      	sub	sp, #24
    348a:	ab05      	add	r3, sp, #20
    348c:	e9cd 2401 	strd	r2, r4, [sp, #4]
    3490:	9300      	str	r3, [sp, #0]
    3492:	2200      	movs	r2, #0
    3494:	ab04      	add	r3, sp, #16
    3496:	f7ff fd59 	bl	2f4c <getTrngSource>
    349a:	b006      	add	sp, #24
    349c:	bd10      	pop	{r4, pc}
    349e:	bf00      	nop

000034a0 <LLF_RND_WaitRngInterrupt>:
    34a0:	b508      	push	{r3, lr}
    34a2:	4601      	mov	r1, r0
    34a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
    34a8:	f7ff fa50 	bl	294c <CC_HalWaitInterruptRND>
    34ac:	2300      	movs	r3, #0
    34ae:	4902      	ldr	r1, [pc, #8]	; (34b8 <LLF_RND_WaitRngInterrupt+0x18>)
    34b0:	4a02      	ldr	r2, [pc, #8]	; (34bc <LLF_RND_WaitRngInterrupt+0x1c>)
    34b2:	600b      	str	r3, [r1, #0]
    34b4:	6013      	str	r3, [r2, #0]
    34b6:	bd08      	pop	{r3, pc}
    34b8:	508411c8 	.word	0x508411c8
    34bc:	5084112c 	.word	0x5084112c

000034c0 <LLF_RND_GetRoscSampleCnt>:
    34c0:	3801      	subs	r0, #1
    34c2:	2807      	cmp	r0, #7
    34c4:	d815      	bhi.n	34f2 <LLF_RND_GetRoscSampleCnt+0x32>
    34c6:	e8df f000 	tbb	[pc, r0]
    34ca:	0c10      	.short	0x0c10
    34cc:	14140814 	.word	0x14140814
    34d0:	0414      	.short	0x0414
    34d2:	68cb      	ldr	r3, [r1, #12]
    34d4:	2000      	movs	r0, #0
    34d6:	624b      	str	r3, [r1, #36]	; 0x24
    34d8:	4770      	bx	lr
    34da:	688b      	ldr	r3, [r1, #8]
    34dc:	2000      	movs	r0, #0
    34de:	624b      	str	r3, [r1, #36]	; 0x24
    34e0:	4770      	bx	lr
    34e2:	684b      	ldr	r3, [r1, #4]
    34e4:	2000      	movs	r0, #0
    34e6:	624b      	str	r3, [r1, #36]	; 0x24
    34e8:	4770      	bx	lr
    34ea:	680b      	ldr	r3, [r1, #0]
    34ec:	2000      	movs	r0, #0
    34ee:	624b      	str	r3, [r1, #36]	; 0x24
    34f0:	4770      	bx	lr
    34f2:	4801      	ldr	r0, [pc, #4]	; (34f8 <LLF_RND_GetRoscSampleCnt+0x38>)
    34f4:	4770      	bx	lr
    34f6:	bf00      	nop
    34f8:	00f10c31 	.word	0x00f10c31

000034fc <LLF_RND_GetFastestRosc>:
    34fc:	680b      	ldr	r3, [r1, #0]
    34fe:	e002      	b.n	3506 <LLF_RND_GetFastestRosc+0xa>
    3500:	2b08      	cmp	r3, #8
    3502:	600b      	str	r3, [r1, #0]
    3504:	d806      	bhi.n	3514 <LLF_RND_GetFastestRosc+0x18>
    3506:	6a02      	ldr	r2, [r0, #32]
    3508:	4213      	tst	r3, r2
    350a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    350e:	d0f7      	beq.n	3500 <LLF_RND_GetFastestRosc+0x4>
    3510:	2000      	movs	r0, #0
    3512:	4770      	bx	lr
    3514:	4800      	ldr	r0, [pc, #0]	; (3518 <LLF_RND_GetFastestRosc+0x1c>)
    3516:	4770      	bx	lr
    3518:	00f10c31 	.word	0x00f10c31

0000351c <LLF_RND_TurnOffTrng>:
    351c:	2300      	movs	r3, #0
    351e:	4904      	ldr	r1, [pc, #16]	; (3530 <LLF_RND_TurnOffTrng+0x14>)
    3520:	4a04      	ldr	r2, [pc, #16]	; (3534 <LLF_RND_TurnOffTrng+0x18>)
    3522:	600b      	str	r3, [r1, #0]
    3524:	f44f 6080 	mov.w	r0, #1024	; 0x400
    3528:	6013      	str	r3, [r2, #0]
    352a:	f7ff b9fb 	b.w	2924 <CC_HalClearInterruptBit>
    352e:	bf00      	nop
    3530:	5084112c 	.word	0x5084112c
    3534:	508411c4 	.word	0x508411c4

00003538 <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
    3538:	b508      	push	{r3, lr}
	spm_config();
    353a:	f7fd fa4f 	bl	9dc <spm_config>
	spm_jump();
}
    353e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
    3542:	f7fd b9e1 	b.w	908 <spm_jump>

00003546 <z_sys_mem_pool_base_init>:
{
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);

	p->max_inline_level = -1;
    3546:	23ff      	movs	r3, #255	; 0xff
{
    3548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    354c:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
    354e:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    3550:	4632      	mov	r2, r6

	for (i = 0; i < p->n_levels; i++) {
    3552:	2300      	movs	r3, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
    3554:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    3558:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    355a:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    355c:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
    3560:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    3564:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
    3566:	4598      	cmp	r8, r3
    3568:	dc05      	bgt.n	3576 <z_sys_mem_pool_base_init+0x30>
    356a:	2300      	movs	r3, #0
		}

		sz = WB_DN(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
    356c:	4619      	mov	r1, r3
    356e:	428f      	cmp	r7, r1
    3570:	dc20      	bgt.n	35b4 <z_sys_mem_pool_base_init+0x6e>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
	}
}
    3572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
    3576:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
    357a:	fb09 fe03 	mul.w	lr, r9, r3
    357e:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
    3582:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
    3584:	eb0a 040e 	add.w	r4, sl, lr
    3588:	f104 0b04 	add.w	fp, r4, #4
    358c:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
    3590:	d805      	bhi.n	359e <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
    3592:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
    3594:	0892      	lsrs	r2, r2, #2
    3596:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
    359a:	3301      	adds	r3, #1
    359c:	e7e3      	b.n	3566 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
    359e:	f115 041f 	adds.w	r4, r5, #31
    35a2:	bf48      	it	mi
    35a4:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
    35a8:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
    35aa:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
    35ae:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    35b2:	e7ef      	b.n	3594 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
    35b4:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
    35b6:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
    35b8:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
    35bc:	18ec      	adds	r4, r5, r3
	node->next = list;
    35be:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
    35c2:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
    35c4:	3101      	adds	r1, #1
    35c6:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
    35c8:	6895      	ldr	r5, [r2, #8]
    35ca:	4433      	add	r3, r6
    35cc:	602c      	str	r4, [r5, #0]
	list->tail = node;
    35ce:	6094      	str	r4, [r2, #8]
    35d0:	e7cd      	b.n	356e <z_sys_mem_pool_base_init+0x28>

000035d2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    35d2:	4604      	mov	r4, r0
    35d4:	b508      	push	{r3, lr}
    35d6:	4608      	mov	r0, r1
    35d8:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    35da:	461a      	mov	r2, r3
    35dc:	47a0      	blx	r4
	return z_impl_k_current_get();
    35de:	f7fe ff51 	bl	2484 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    35e2:	f7fd fed1 	bl	1388 <z_impl_k_thread_abort>

000035e6 <arch_printk_char_out>:
}
    35e6:	2000      	movs	r0, #0
    35e8:	4770      	bx	lr

000035ea <print_err>:
{
    35ea:	b570      	push	{r4, r5, r6, lr}
    35ec:	460d      	mov	r5, r1
    35ee:	4604      	mov	r4, r0
	out('E', ctx);
    35f0:	2045      	movs	r0, #69	; 0x45
    35f2:	47a0      	blx	r4
	out('R', ctx);
    35f4:	4629      	mov	r1, r5
    35f6:	2052      	movs	r0, #82	; 0x52
    35f8:	47a0      	blx	r4
	out('R', ctx);
    35fa:	4629      	mov	r1, r5
    35fc:	4623      	mov	r3, r4
}
    35fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    3602:	2052      	movs	r0, #82	; 0x52
    3604:	4718      	bx	r3

00003606 <z_vprintk>:
{
    3606:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    360a:	f04f 0800 	mov.w	r8, #0
{
    360e:	4606      	mov	r6, r0
    3610:	460f      	mov	r7, r1
	int min_width = -1;
    3612:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    3616:	46c1      	mov	r9, r8
{
    3618:	b08b      	sub	sp, #44	; 0x2c
    361a:	461c      	mov	r4, r3
	while (*fmt) {
    361c:	1e53      	subs	r3, r2, #1
    361e:	9302      	str	r3, [sp, #8]
			might_format = 0;
    3620:	2500      	movs	r5, #0
					break;
    3622:	e005      	b.n	3630 <z_vprintk+0x2a>
		if (!might_format) {
    3624:	b96d      	cbnz	r5, 3642 <z_vprintk+0x3c>
			if (*fmt != '%') {
    3626:	2825      	cmp	r0, #37	; 0x25
    3628:	f000 814f 	beq.w	38ca <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
    362c:	4639      	mov	r1, r7
    362e:	47b0      	blx	r6
	while (*fmt) {
    3630:	9b02      	ldr	r3, [sp, #8]
    3632:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    3636:	9302      	str	r3, [sp, #8]
    3638:	2800      	cmp	r0, #0
    363a:	d1f3      	bne.n	3624 <z_vprintk+0x1e>
}
    363c:	b00b      	add	sp, #44	; 0x2c
    363e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    3642:	2864      	cmp	r0, #100	; 0x64
    3644:	d06e      	beq.n	3724 <z_vprintk+0x11e>
    3646:	d81a      	bhi.n	367e <z_vprintk+0x78>
    3648:	2839      	cmp	r0, #57	; 0x39
    364a:	d80a      	bhi.n	3662 <z_vprintk+0x5c>
    364c:	2831      	cmp	r0, #49	; 0x31
    364e:	d260      	bcs.n	3712 <z_vprintk+0x10c>
    3650:	282d      	cmp	r0, #45	; 0x2d
    3652:	f000 8140 	beq.w	38d6 <z_vprintk+0x2d0>
    3656:	2830      	cmp	r0, #48	; 0x30
    3658:	d04c      	beq.n	36f4 <z_vprintk+0xee>
    365a:	2825      	cmp	r0, #37	; 0x25
    365c:	d107      	bne.n	366e <z_vprintk+0x68>
				out((int)'%', ctx);
    365e:	4639      	mov	r1, r7
    3660:	e00b      	b.n	367a <z_vprintk+0x74>
			switch (*fmt) {
    3662:	2858      	cmp	r0, #88	; 0x58
    3664:	f000 80bb 	beq.w	37de <z_vprintk+0x1d8>
    3668:	2863      	cmp	r0, #99	; 0x63
    366a:	f000 812a 	beq.w	38c2 <z_vprintk+0x2bc>
					out((int)'%', ctx);
    366e:	4639      	mov	r1, r7
    3670:	2025      	movs	r0, #37	; 0x25
    3672:	47b0      	blx	r6
					out((int)*fmt, ctx);
    3674:	4639      	mov	r1, r7
    3676:	9b02      	ldr	r3, [sp, #8]
    3678:	7818      	ldrb	r0, [r3, #0]
    367a:	47b0      	blx	r6
    367c:	e7d0      	b.n	3620 <z_vprintk+0x1a>
			switch (*fmt) {
    367e:	2870      	cmp	r0, #112	; 0x70
    3680:	f000 80a3 	beq.w	37ca <z_vprintk+0x1c4>
    3684:	d811      	bhi.n	36aa <z_vprintk+0xa4>
    3686:	2869      	cmp	r0, #105	; 0x69
    3688:	d04c      	beq.n	3724 <z_vprintk+0x11e>
    368a:	286c      	cmp	r0, #108	; 0x6c
    368c:	d105      	bne.n	369a <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
    368e:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    3692:	d12a      	bne.n	36ea <z_vprintk+0xe4>
					length_mod = 'L';
    3694:	f04f 084c 	mov.w	r8, #76	; 0x4c
    3698:	e7ca      	b.n	3630 <z_vprintk+0x2a>
			switch (*fmt) {
    369a:	2868      	cmp	r0, #104	; 0x68
    369c:	d1e7      	bne.n	366e <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
    369e:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
    36a2:	d122      	bne.n	36ea <z_vprintk+0xe4>
					length_mod = 'H';
    36a4:	f04f 0848 	mov.w	r8, #72	; 0x48
    36a8:	e7c2      	b.n	3630 <z_vprintk+0x2a>
			switch (*fmt) {
    36aa:	2875      	cmp	r0, #117	; 0x75
    36ac:	d071      	beq.n	3792 <z_vprintk+0x18c>
    36ae:	d818      	bhi.n	36e2 <z_vprintk+0xdc>
    36b0:	2873      	cmp	r0, #115	; 0x73
    36b2:	d1dc      	bne.n	366e <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
    36b4:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
    36b8:	46ab      	mov	fp, r5
    36ba:	465b      	mov	r3, fp
    36bc:	f81b 0b01 	ldrb.w	r0, [fp], #1
    36c0:	2800      	cmp	r0, #0
    36c2:	f040 80fb 	bne.w	38bc <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
    36c6:	f1b9 0f03 	cmp.w	r9, #3
    36ca:	f040 810a 	bne.w	38e2 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
    36ce:	1b5d      	subs	r5, r3, r5
    36d0:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
    36d4:	2d00      	cmp	r5, #0
    36d6:	dda3      	ble.n	3620 <z_vprintk+0x1a>
						out(' ', ctx);
    36d8:	4639      	mov	r1, r7
    36da:	2020      	movs	r0, #32
    36dc:	47b0      	blx	r6
    36de:	3d01      	subs	r5, #1
    36e0:	e7f8      	b.n	36d4 <z_vprintk+0xce>
			switch (*fmt) {
    36e2:	2878      	cmp	r0, #120	; 0x78
    36e4:	d07b      	beq.n	37de <z_vprintk+0x1d8>
    36e6:	287a      	cmp	r0, #122	; 0x7a
    36e8:	d1c1      	bne.n	366e <z_vprintk+0x68>
				} else if (length_mod == 0) {
    36ea:	f1b8 0f00 	cmp.w	r8, #0
    36ee:	d1be      	bne.n	366e <z_vprintk+0x68>
    36f0:	4680      	mov	r8, r0
    36f2:	e79d      	b.n	3630 <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
    36f4:	f1ba 0f00 	cmp.w	sl, #0
    36f8:	da0e      	bge.n	3718 <z_vprintk+0x112>
    36fa:	f1b9 0f00 	cmp.w	r9, #0
    36fe:	f000 80ed 	beq.w	38dc <z_vprintk+0x2d6>
					min_width = *fmt - '0';
    3702:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    3706:	f1b9 0f00 	cmp.w	r9, #0
    370a:	bf08      	it	eq
    370c:	f04f 0902 	moveq.w	r9, #2
    3710:	e78e      	b.n	3630 <z_vprintk+0x2a>
				if (min_width < 0) {
    3712:	f1ba 0f00 	cmp.w	sl, #0
    3716:	dbf4      	blt.n	3702 <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
    3718:	230a      	movs	r3, #10
    371a:	fb03 0a0a 	mla	sl, r3, sl, r0
    371e:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    3722:	e7f0      	b.n	3706 <z_vprintk+0x100>
				if (length_mod == 'z') {
    3724:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    3728:	d102      	bne.n	3730 <z_vprintk+0x12a>
					d = va_arg(ap, int);
    372a:	f854 5b04 	ldr.w	r5, [r4], #4
    372e:	e01f      	b.n	3770 <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
    3730:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    3734:	d0f9      	beq.n	372a <z_vprintk+0x124>
				} else if (length_mod == 'L') {
    3736:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    373a:	d1f6      	bne.n	372a <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
    373c:	3407      	adds	r4, #7
    373e:	f024 0407 	bic.w	r4, r4, #7
    3742:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
    3746:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
    374a:	9106      	str	r1, [sp, #24]
    374c:	f143 0100 	adc.w	r1, r3, #0
    3750:	9107      	str	r1, [sp, #28]
    3752:	2100      	movs	r1, #0
    3754:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
    3758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    375c:	4561      	cmp	r1, ip
    375e:	bf08      	it	eq
    3760:	4558      	cmpeq	r0, fp
    3762:	d204      	bcs.n	376e <z_vprintk+0x168>
						print_err(out, ctx);
    3764:	4639      	mov	r1, r7
    3766:	4630      	mov	r0, r6
    3768:	f7ff ff3f 	bl	35ea <print_err>
						break;
    376c:	e758      	b.n	3620 <z_vprintk+0x1a>
					d = lld;
    376e:	4615      	mov	r5, r2
				if (d < 0) {
    3770:	2d00      	cmp	r5, #0
    3772:	da05      	bge.n	3780 <z_vprintk+0x17a>
					out((int)'-', ctx);
    3774:	4639      	mov	r1, r7
    3776:	202d      	movs	r0, #45	; 0x2d
    3778:	47b0      	blx	r6
					d = -d;
    377a:	426d      	negs	r5, r5
					min_width--;
    377c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    3780:	464b      	mov	r3, r9
    3782:	462a      	mov	r2, r5
    3784:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
    3788:	4639      	mov	r1, r7
    378a:	4630      	mov	r0, r6
    378c:	f7fc fefc 	bl	588 <_printk_dec_ulong>
				break;
    3790:	e746      	b.n	3620 <z_vprintk+0x1a>
				if (length_mod == 'z') {
    3792:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    3796:	d102      	bne.n	379e <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
    3798:	f854 2b04 	ldr.w	r2, [r4], #4
    379c:	e011      	b.n	37c2 <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
    379e:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    37a2:	d0f9      	beq.n	3798 <z_vprintk+0x192>
				} else if (length_mod == 'L') {
    37a4:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    37a8:	d1f6      	bne.n	3798 <z_vprintk+0x192>
					if (llu > ~0UL) {
    37aa:	2100      	movs	r1, #0
    37ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
    37b0:	3407      	adds	r4, #7
    37b2:	f024 0407 	bic.w	r4, r4, #7
    37b6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
    37ba:	4299      	cmp	r1, r3
    37bc:	bf08      	it	eq
    37be:	4290      	cmpeq	r0, r2
    37c0:	d3d0      	bcc.n	3764 <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
    37c2:	f8cd a000 	str.w	sl, [sp]
    37c6:	464b      	mov	r3, r9
    37c8:	e7de      	b.n	3788 <z_vprintk+0x182>
				out('0', ctx);
    37ca:	4639      	mov	r1, r7
    37cc:	2030      	movs	r0, #48	; 0x30
    37ce:	47b0      	blx	r6
				out('x', ctx);
    37d0:	4639      	mov	r1, r7
    37d2:	2078      	movs	r0, #120	; 0x78
    37d4:	47b0      	blx	r6
					min_width = 8;
    37d6:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
    37da:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
    37de:	9b02      	ldr	r3, [sp, #8]
    37e0:	781b      	ldrb	r3, [r3, #0]
    37e2:	2b70      	cmp	r3, #112	; 0x70
    37e4:	d104      	bne.n	37f0 <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
    37e6:	f854 3b04 	ldr.w	r3, [r4], #4
    37ea:	9304      	str	r3, [sp, #16]
    37ec:	2300      	movs	r3, #0
    37ee:	e00d      	b.n	380c <z_vprintk+0x206>
				} else if (length_mod == 'l') {
    37f0:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    37f4:	d0f7      	beq.n	37e6 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
    37f6:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    37fa:	d1f4      	bne.n	37e6 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
    37fc:	3407      	adds	r4, #7
    37fe:	f024 0307 	bic.w	r3, r4, #7
    3802:	461c      	mov	r4, r3
    3804:	f854 2b08 	ldr.w	r2, [r4], #8
    3808:	685b      	ldr	r3, [r3, #4]
    380a:	9204      	str	r2, [sp, #16]
	int digits = 0;
    380c:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
    380e:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
    3810:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
    3814:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
    3816:	9105      	str	r1, [sp, #20]
		shift -= 4;
    3818:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
    381c:	9804      	ldr	r0, [sp, #16]
    381e:	f1cb 0c20 	rsb	ip, fp, #32
    3822:	f1ab 0120 	sub.w	r1, fp, #32
    3826:	fa20 f00b 	lsr.w	r0, r0, fp
    382a:	fa03 fc0c 	lsl.w	ip, r3, ip
    382e:	ea40 000c 	orr.w	r0, r0, ip
    3832:	fa23 f101 	lsr.w	r1, r3, r1
    3836:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    3838:	f010 000f 	ands.w	r0, r0, #15
    383c:	d106      	bne.n	384c <z_vprintk+0x246>
    383e:	9905      	ldr	r1, [sp, #20]
    3840:	b911      	cbnz	r1, 3848 <z_vprintk+0x242>
    3842:	f1bb 0f00 	cmp.w	fp, #0
    3846:	d122      	bne.n	388e <z_vprintk+0x288>
			nibble += nibble > 9 ? 87 : 48;
    3848:	2130      	movs	r1, #48	; 0x30
    384a:	e003      	b.n	3854 <z_vprintk+0x24e>
    384c:	2809      	cmp	r0, #9
    384e:	bf8c      	ite	hi
    3850:	2157      	movhi	r1, #87	; 0x57
    3852:	2130      	movls	r1, #48	; 0x30
    3854:	4408      	add	r0, r1
			out((int)nibble, ctx);
    3856:	b240      	sxtb	r0, r0
    3858:	4639      	mov	r1, r7
    385a:	9308      	str	r3, [sp, #32]
    385c:	9205      	str	r2, [sp, #20]
    385e:	47b0      	blx	r6
			digits++;
    3860:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
    3862:	9a05      	ldr	r2, [sp, #20]
			digits++;
    3864:	3301      	adds	r3, #1
    3866:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
    3868:	9b08      	ldr	r3, [sp, #32]
    386a:	f1bb 0f00 	cmp.w	fp, #0
    386e:	d123      	bne.n	38b8 <z_vprintk+0x2b2>
	if (padding == PAD_SPACE_AFTER) {
    3870:	f1b9 0f03 	cmp.w	r9, #3
    3874:	f47f aed4 	bne.w	3620 <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
    3878:	9b03      	ldr	r3, [sp, #12]
    387a:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
    387e:	2d00      	cmp	r5, #0
    3880:	f77f aece 	ble.w	3620 <z_vprintk+0x1a>
			out(' ', ctx);
    3884:	4639      	mov	r1, r7
    3886:	2020      	movs	r0, #32
    3888:	47b0      	blx	r6
    388a:	3d01      	subs	r5, #1
    388c:	e7f7      	b.n	387e <z_vprintk+0x278>
		if (remaining-- <= min_width) {
    388e:	1e51      	subs	r1, r2, #1
    3890:	4592      	cmp	sl, r2
    3892:	9108      	str	r1, [sp, #32]
    3894:	db07      	blt.n	38a6 <z_vprintk+0x2a0>
			if (padding == PAD_ZERO_BEFORE) {
    3896:	f1b9 0f01 	cmp.w	r9, #1
    389a:	d106      	bne.n	38aa <z_vprintk+0x2a4>
				out('0', ctx);
    389c:	4639      	mov	r1, r7
    389e:	2030      	movs	r0, #48	; 0x30
    38a0:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
    38a2:	47b0      	blx	r6
    38a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
    38a6:	9a08      	ldr	r2, [sp, #32]
    38a8:	e7b6      	b.n	3818 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
    38aa:	f1b9 0f02 	cmp.w	r9, #2
    38ae:	d1fa      	bne.n	38a6 <z_vprintk+0x2a0>
    38b0:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
    38b2:	4639      	mov	r1, r7
    38b4:	2020      	movs	r0, #32
    38b6:	e7f4      	b.n	38a2 <z_vprintk+0x29c>
			found_largest_digit = 1;
    38b8:	9505      	str	r5, [sp, #20]
    38ba:	e7ad      	b.n	3818 <z_vprintk+0x212>
					out((int)(*s++), ctx);
    38bc:	4639      	mov	r1, r7
    38be:	47b0      	blx	r6
    38c0:	e6fb      	b.n	36ba <z_vprintk+0xb4>
				out(c, ctx);
    38c2:	4639      	mov	r1, r7
    38c4:	f854 0b04 	ldr.w	r0, [r4], #4
    38c8:	e6d7      	b.n	367a <z_vprintk+0x74>
				length_mod = 0;
    38ca:	46a8      	mov	r8, r5
				padding = PAD_NONE;
    38cc:	46a9      	mov	r9, r5
				min_width = -1;
    38ce:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
    38d2:	2501      	movs	r5, #1
    38d4:	e6ac      	b.n	3630 <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
    38d6:	f04f 0903 	mov.w	r9, #3
    38da:	e6a9      	b.n	3630 <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
    38dc:	f04f 0901 	mov.w	r9, #1
    38e0:	e6a6      	b.n	3630 <z_vprintk+0x2a>
			might_format = 0;
    38e2:	4605      	mov	r5, r0
		++fmt;
    38e4:	e6a4      	b.n	3630 <z_vprintk+0x2a>

000038e6 <printk>:
{
    38e6:	b40f      	push	{r0, r1, r2, r3}
    38e8:	b507      	push	{r0, r1, r2, lr}
    38ea:	a904      	add	r1, sp, #16
    38ec:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    38f0:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    38f2:	f7fc fe9b 	bl	62c <vprintk>
}
    38f6:	b003      	add	sp, #12
    38f8:	f85d eb04 	ldr.w	lr, [sp], #4
    38fc:	b004      	add	sp, #16
    38fe:	4770      	bx	lr

00003900 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    3900:	4770      	bx	lr

00003902 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
    3902:	f7fe b8a3 	b.w	1a4c <SystemInit>

00003906 <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
    3906:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
    3908:	7a5a      	ldrb	r2, [r3, #9]
    390a:	b932      	cbnz	r2, 391a <get_status+0x14>
	if (data->ref > 0) {
    390c:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
    3910:	2800      	cmp	r0, #0
    3912:	bfcc      	ite	gt
    3914:	2000      	movgt	r0, #0
    3916:	2001      	movle	r0, #1
    3918:	4770      	bx	lr
    391a:	2002      	movs	r0, #2
}
    391c:	4770      	bx	lr

0000391e <clock_stop>:
	const struct nrf_clock_control_config *config =
    391e:	6802      	ldr	r2, [r0, #0]
{
    3920:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
    3922:	6895      	ldr	r5, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
    3924:	6884      	ldr	r4, [r0, #8]
    3926:	f04f 0320 	mov.w	r3, #32
    392a:	f3ef 8611 	mrs	r6, BASEPRI
    392e:	f383 8811 	msr	BASEPRI, r3
    3932:	f3bf 8f6f 	isb	sy
	data->ref--;
    3936:	7a23      	ldrb	r3, [r4, #8]
    3938:	3b01      	subs	r3, #1
    393a:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
    393c:	2b00      	cmp	r3, #0
	data->ref--;
    393e:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
    3940:	d118      	bne.n	3974 <clock_stop+0x56>
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    3942:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
    3946:	686b      	ldr	r3, [r5, #4]
				config->stop_handler(dev) : true;
    3948:	b983      	cbnz	r3, 396c <clock_stop+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    394a:	2201      	movs	r2, #1
    394c:	7aeb      	ldrb	r3, [r5, #11]
    394e:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    3952:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3954:	2200      	movs	r2, #0
    3956:	892b      	ldrh	r3, [r5, #8]
    3958:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    395c:	601a      	str	r2, [r3, #0]
		data->started = false;
    395e:	2000      	movs	r0, #0
    3960:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
    3962:	f386 8811 	msr	BASEPRI, r6
    3966:	f3bf 8f6f 	isb	sy
}
    396a:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
    396c:	4798      	blx	r3
    396e:	2800      	cmp	r0, #0
    3970:	d1eb      	bne.n	394a <clock_stop+0x2c>
    3972:	e7f4      	b.n	395e <clock_stop+0x40>
	} else if (data->ref < 0) {
    3974:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
    3978:	bfbc      	itt	lt
    397a:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
    397c:	f06f 0044 	mvnlt.w	r0, #68	; 0x44
    3980:	e7ef      	b.n	3962 <clock_stop+0x44>

00003982 <clock_async_start>:
{
    3982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
    3984:	6803      	ldr	r3, [r0, #0]
{
    3986:	4606      	mov	r6, r0
    3988:	4614      	mov	r4, r2
	const struct nrf_clock_control_config *config =
    398a:	689f      	ldr	r7, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
    398c:	6885      	ldr	r5, [r0, #8]
	__asm__ volatile(
    398e:	f04f 0320 	mov.w	r3, #32
    3992:	f3ef 8211 	mrs	r2, BASEPRI
    3996:	f383 8811 	msr	BASEPRI, r3
    399a:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    399e:	7a2b      	ldrb	r3, [r5, #8]
    39a0:	3301      	adds	r3, #1
    39a2:	b25b      	sxtb	r3, r3
    39a4:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
    39a6:	f382 8811 	msr	BASEPRI, r2
    39aa:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
    39ae:	7a6a      	ldrb	r2, [r5, #9]
    39b0:	b132      	cbz	r2, 39c0 <clock_async_start+0x3e>
		if (data) {
    39b2:	b90c      	cbnz	r4, 39b8 <clock_async_start+0x36>
	return 0;
    39b4:	2000      	movs	r0, #0
}
    39b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
    39b8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    39bc:	4798      	blx	r3
    39be:	e7f9      	b.n	39b4 <clock_async_start+0x32>
		if (ref == 1) {
    39c0:	2b01      	cmp	r3, #1
    39c2:	d106      	bne.n	39d2 <clock_async_start+0x50>
			do_start =  (config->start_handler) ?
    39c4:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
    39c6:	b933      	cbnz	r3, 39d6 <clock_async_start+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    39c8:	2201      	movs	r2, #1
    39ca:	7abb      	ldrb	r3, [r7, #10]
    39cc:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    39d0:	601a      	str	r2, [r3, #0]
		if (data) {
    39d2:	b94c      	cbnz	r4, 39e8 <clock_async_start+0x66>
    39d4:	e7ee      	b.n	39b4 <clock_async_start+0x32>
					config->start_handler(dev) : true;
    39d6:	4798      	blx	r3
    39d8:	2800      	cmp	r0, #0
    39da:	d1f5      	bne.n	39c8 <clock_async_start+0x46>
			} else if (data) {
    39dc:	2c00      	cmp	r4, #0
    39de:	d0e9      	beq.n	39b4 <clock_async_start+0x32>
				data->cb(dev, data->user_data);
    39e0:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    39e4:	4630      	mov	r0, r6
    39e6:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
    39e8:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
    39ea:	429c      	cmp	r4, r3
    39ec:	d00d      	beq.n	3a0a <clock_async_start+0x88>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    39ee:	b113      	cbz	r3, 39f6 <clock_async_start+0x74>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    39f0:	681b      	ldr	r3, [r3, #0]
	} while (item);
    39f2:	2b00      	cmp	r3, #0
    39f4:	d1f9      	bne.n	39ea <clock_async_start+0x68>
	parent->next = child;
    39f6:	2000      	movs	r0, #0
    39f8:	6020      	str	r0, [r4, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    39fa:	686b      	ldr	r3, [r5, #4]
    39fc:	b913      	cbnz	r3, 3a04 <clock_async_start+0x82>
	list->head = node;
    39fe:	e9c5 4400 	strd	r4, r4, [r5]
    3a02:	e7d7      	b.n	39b4 <clock_async_start+0x32>
	parent->next = child;
    3a04:	601c      	str	r4, [r3, #0]
	list->tail = node;
    3a06:	606c      	str	r4, [r5, #4]
    3a08:	e7d5      	b.n	39b6 <clock_async_start+0x34>
				return -EALREADY;
    3a0a:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3a0e:	e7d2      	b.n	39b6 <clock_async_start+0x34>

00003a10 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
    3a10:	2200      	movs	r2, #0
    3a12:	f7ff bfb6 	b.w	3982 <clock_async_start>

00003a16 <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    3a16:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
    3a18:	2000      	movs	r0, #0
	list->tail = NULL;
    3a1a:	e9c3 0000 	strd	r0, r0, [r3]
}
    3a1e:	4770      	bx	lr

00003a20 <hfclk_init>:
{
    3a20:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    3a22:	2200      	movs	r2, #0
{
    3a24:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    3a26:	2101      	movs	r1, #1
    3a28:	2005      	movs	r0, #5
    3a2a:	f7fd facb 	bl	fc4 <z_arm_irq_priority_set>
	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    3a2e:	2005      	movs	r0, #5
    3a30:	f7fd fab8 	bl	fa4 <arch_irq_enable>
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    3a34:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3a38:	2202      	movs	r2, #2
    3a3a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    3a3e:	2203      	movs	r2, #3
	list->head = NULL;
    3a40:	2000      	movs	r0, #0
    3a42:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    3a46:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
    3a48:	e9c3 0000 	strd	r0, r0, [r3]
}
    3a4c:	bd10      	pop	{r4, pc}

00003a4e <clkstarted_handle>:
{
    3a4e:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
    3a50:	6884      	ldr	r4, [r0, #8]
{
    3a52:	4605      	mov	r5, r0
Z_GENLIST_IS_EMPTY(slist)
    3a54:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    3a56:	b12b      	cbz	r3, 3a64 <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3a58:	6861      	ldr	r1, [r4, #4]
    3a5a:	681a      	ldr	r2, [r3, #0]
    3a5c:	428b      	cmp	r3, r1
	list->head = node;
    3a5e:	6022      	str	r2, [r4, #0]
	list->tail = node;
    3a60:	bf08      	it	eq
    3a62:	6062      	streq	r2, [r4, #4]
	data->started = true;
    3a64:	2201      	movs	r2, #1
    3a66:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
    3a68:	b903      	cbnz	r3, 3a6c <clkstarted_handle+0x1e>
}
    3a6a:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
    3a6c:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    3a70:	4628      	mov	r0, r5
    3a72:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
    3a74:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
    3a76:	2b00      	cmp	r3, #0
    3a78:	d0f7      	beq.n	3a6a <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3a7a:	6861      	ldr	r1, [r4, #4]
    3a7c:	681a      	ldr	r2, [r3, #0]
    3a7e:	428b      	cmp	r3, r1
	list->head = node;
    3a80:	6022      	str	r2, [r4, #0]
	list->tail = node;
    3a82:	bf08      	it	eq
    3a84:	6062      	streq	r2, [r4, #4]
    3a86:	e7ef      	b.n	3a68 <clkstarted_handle+0x1a>

00003a88 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    3a88:	4770      	bx	lr

00003a8a <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    3a8a:	4770      	bx	lr

00003a8c <spm_secure_services_init>:
	mbedtls_platform_context platform_ctx = {0};
    3a8c:	2300      	movs	r3, #0
{
    3a8e:	b507      	push	{r0, r1, r2, lr}
	err = mbedtls_platform_setup(&platform_ctx);
    3a90:	a801      	add	r0, sp, #4
	mbedtls_platform_context platform_ctx = {0};
    3a92:	f88d 3004 	strb.w	r3, [sp, #4]
	err = mbedtls_platform_setup(&platform_ctx);
    3a96:	f7fe ff77 	bl	2988 <mbedtls_platform_setup>
}
    3a9a:	b003      	add	sp, #12
    3a9c:	f85d fb04 	ldr.w	pc, [sp], #4

00003aa0 <__acle_se_spm_request_random_number>:
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
    3aa0:	2990      	cmp	r1, #144	; 0x90
{
    3aa2:	b508      	push	{r3, lr}
    3aa4:	4613      	mov	r3, r2
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
    3aa6:	d139      	bne.n	3b1c <__acle_se_spm_request_random_number+0x7c>
	err = mbedtls_hardware_poll(NULL, output, len, olen);
    3aa8:	460a      	mov	r2, r1
    3aaa:	4601      	mov	r1, r0
    3aac:	2000      	movs	r0, #0
    3aae:	f7fe ff77 	bl	29a0 <mbedtls_hardware_poll>
}
    3ab2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3ab6:	4671      	mov	r1, lr
    3ab8:	4672      	mov	r2, lr
    3aba:	4673      	mov	r3, lr
    3abc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    3ac0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    3ac4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    3ac8:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    3acc:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
    3ad0:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
    3ad4:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    3ad8:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    3adc:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    3ae0:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    3ae4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    3ae8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    3aec:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    3af0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    3af4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3af8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    3afc:	f38e 8c00 	msr	CPSR_fs, lr
    3b00:	b410      	push	{r4}
    3b02:	eef1 ca10 	vmrs	ip, fpscr
    3b06:	f64f 7460 	movw	r4, #65376	; 0xff60
    3b0a:	f6c0 74ff 	movt	r4, #4095	; 0xfff
    3b0e:	ea0c 0c04 	and.w	ip, ip, r4
    3b12:	eee1 ca10 	vmsr	fpscr, ip
    3b16:	bc10      	pop	{r4}
    3b18:	46f4      	mov	ip, lr
    3b1a:	4774      	bxns	lr
		return -EINVAL;
    3b1c:	f06f 0015 	mvn.w	r0, #21
    3b20:	e7c7      	b.n	3ab2 <__acle_se_spm_request_random_number+0x12>

00003b22 <abort_function>:
	while(1);
    3b22:	e7fe      	b.n	3b22 <abort_function>

00003b24 <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	z_arm_reserved();
    3b24:	f7fd bab6 	b.w	1094 <z_arm_bus_fault>

00003b28 <irq_target_state_set>:
 *
 * @return N/A
 */
void irq_target_state_set(unsigned int irq, int secure_state)
{
	if (secure_state) {
    3b28:	b243      	sxtb	r3, r0
    3b2a:	b1a9      	cbz	r1, 3b58 <irq_target_state_set+0x30>
  if ((int32_t)(IRQn) >= 0)
    3b2c:	2b00      	cmp	r3, #0
    3b2e:	db12      	blt.n	3b56 <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    3b30:	2101      	movs	r1, #1
    3b32:	095b      	lsrs	r3, r3, #5
    3b34:	009b      	lsls	r3, r3, #2
    3b36:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3b3a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3b3e:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
    3b42:	f000 001f 	and.w	r0, r0, #31
    3b46:	fa01 f000 	lsl.w	r0, r1, r0
    3b4a:	ea22 0200 	bic.w	r2, r2, r0
    3b4e:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
    3b52:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
		/* Set target state to Non-Secure */
		if (NVIC_SetTargetState(irq) != 1) {
			__ASSERT(0, "NVIC SetTargetState error");
		}
	}
}
    3b56:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
    3b58:	2b00      	cmp	r3, #0
    3b5a:	dbfc      	blt.n	3b56 <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    3b5c:	2201      	movs	r2, #1
    3b5e:	095b      	lsrs	r3, r3, #5
    3b60:	009b      	lsls	r3, r3, #2
    3b62:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3b66:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3b6a:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
    3b6e:	f000 001f 	and.w	r0, r0, #31
    3b72:	fa02 f000 	lsl.w	r0, r2, r0
    3b76:	4308      	orrs	r0, r1
    3b78:	f8c3 0280 	str.w	r0, [r3, #640]	; 0x280
    3b7c:	e7e9      	b.n	3b52 <irq_target_state_set+0x2a>

00003b7e <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3b7e:	f000 b902 	b.w	3d86 <z_fatal_error>

00003b82 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    3b82:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    3b84:	6800      	ldr	r0, [r0, #0]
    3b86:	f000 b8fe 	b.w	3d86 <z_fatal_error>

00003b8a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    3b8a:	b508      	push	{r3, lr}
	handler();
    3b8c:	f7fd fa8c 	bl	10a8 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
    3b90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
    3b94:	f7fd b9a4 	b.w	ee0 <z_arm_exc_exit>

00003b98 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    3b98:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    3b9a:	2100      	movs	r1, #0
    3b9c:	a801      	add	r0, sp, #4
    3b9e:	f7fd fd89 	bl	16b4 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    3ba2:	b003      	add	sp, #12
    3ba4:	f85d fb04 	ldr.w	pc, [sp], #4

00003ba8 <mpu_configure_region>:
{
    3ba8:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
    3baa:	680b      	ldr	r3, [r1, #0]
{
    3bac:	b085      	sub	sp, #20
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    3bae:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    3bb0:	f89d 2008 	ldrb.w	r2, [sp, #8]
    3bb4:	890d      	ldrh	r5, [r1, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    3bb6:	3c01      	subs	r4, #1
	region_conf.base = new_region->start;
    3bb8:	9300      	str	r3, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
    3bba:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    3bbc:	f023 031f 	bic.w	r3, r3, #31
    3bc0:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    3bc2:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
    3bc6:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    3bca:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    3bce:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
    3bd0:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    3bd4:	9303      	str	r3, [sp, #12]
    3bd6:	4604      	mov	r4, r0
    3bd8:	d805      	bhi.n	3be6 <mpu_configure_region+0x3e>
	region_init(index, region_conf);
    3bda:	4669      	mov	r1, sp
    3bdc:	f7fd fc24 	bl	1428 <region_init>
}
    3be0:	4620      	mov	r0, r4
    3be2:	b005      	add	sp, #20
    3be4:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    3be6:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
    3bea:	e7f9      	b.n	3be0 <mpu_configure_region+0x38>

00003bec <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    3bec:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    3bf0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3bf4:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    3bf6:	bf08      	it	eq
    3bf8:	f06f 0015 	mvneq.w	r0, #21
    3bfc:	4770      	bx	lr

00003bfe <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    3bfe:	3801      	subs	r0, #1
    3c00:	3901      	subs	r1, #1
    3c02:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    3c06:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    3c0a:	4293      	cmp	r3, r2
    3c0c:	d101      	bne.n	3c12 <strcmp+0x14>
    3c0e:	2b00      	cmp	r3, #0
    3c10:	d1f7      	bne.n	3c02 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    3c12:	1a98      	subs	r0, r3, r2
    3c14:	4770      	bx	lr

00003c16 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    3c16:	1a43      	subs	r3, r0, r1
    3c18:	4293      	cmp	r3, r2
{
    3c1a:	b510      	push	{r4, lr}
    3c1c:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    3c20:	d308      	bcc.n	3c34 <memmove+0x1e>
	char *dest = d;
    3c22:	4602      	mov	r2, r0
    3c24:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    3c26:	429a      	cmp	r2, r3
    3c28:	d00b      	beq.n	3c42 <memmove+0x2c>
			*dest = *src;
    3c2a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    3c2e:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    3c32:	e7f8      	b.n	3c26 <memmove+0x10>
    3c34:	440a      	add	r2, r1
			dest[n] = src[n];
    3c36:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    3c3a:	428a      	cmp	r2, r1
			dest[n] = src[n];
    3c3c:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    3c40:	d1f9      	bne.n	3c36 <memmove+0x20>
		}
	}

	return d;
}
    3c42:	bd10      	pop	{r4, pc}

00003c44 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    3c44:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    3c46:	ea81 0400 	eor.w	r4, r1, r0
    3c4a:	07a5      	lsls	r5, r4, #30
    3c4c:	4603      	mov	r3, r0
    3c4e:	d00b      	beq.n	3c68 <memcpy+0x24>
    3c50:	3b01      	subs	r3, #1
    3c52:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    3c54:	4291      	cmp	r1, r2
    3c56:	d11a      	bne.n	3c8e <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    3c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    3c5a:	2a00      	cmp	r2, #0
    3c5c:	d0fc      	beq.n	3c58 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    3c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    3c62:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    3c64:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    3c68:	079c      	lsls	r4, r3, #30
    3c6a:	d1f6      	bne.n	3c5a <memcpy+0x16>
    3c6c:	0895      	lsrs	r5, r2, #2
    3c6e:	00ac      	lsls	r4, r5, #2
    3c70:	1f1e      	subs	r6, r3, #4
    3c72:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    3c74:	42b9      	cmp	r1, r7
    3c76:	d105      	bne.n	3c84 <memcpy+0x40>
    3c78:	f06f 0603 	mvn.w	r6, #3
    3c7c:	4423      	add	r3, r4
    3c7e:	fb06 2205 	mla	r2, r6, r5, r2
    3c82:	e7e5      	b.n	3c50 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    3c84:	f851 cb04 	ldr.w	ip, [r1], #4
    3c88:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
    3c8c:	e7f2      	b.n	3c74 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
    3c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
    3c92:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    3c96:	e7dd      	b.n	3c54 <memcpy+0x10>

00003c98 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    3c98:	4603      	mov	r3, r0
{
    3c9a:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
    3c9c:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    3c9e:	079c      	lsls	r4, r3, #30
    3ca0:	d110      	bne.n	3cc4 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    3ca2:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    3ca6:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    3caa:	0894      	lsrs	r4, r2, #2
    3cac:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    3cb0:	42b3      	cmp	r3, r6
    3cb2:	d10d      	bne.n	3cd0 <memset+0x38>
    3cb4:	f06f 0503 	mvn.w	r5, #3
    3cb8:	fb05 2404 	mla	r4, r5, r4, r2
    3cbc:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    3cbe:	42a3      	cmp	r3, r4
    3cc0:	d109      	bne.n	3cd6 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    3cc2:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    3cc4:	2a00      	cmp	r2, #0
    3cc6:	d0fc      	beq.n	3cc2 <memset+0x2a>
		*(d_byte++) = c_byte;
    3cc8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    3ccc:	3a01      	subs	r2, #1
    3cce:	e7e6      	b.n	3c9e <memset+0x6>
		*(d_word++) = c_word;
    3cd0:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    3cd4:	e7ec      	b.n	3cb0 <memset+0x18>
		*(d_byte++) = c_byte;
    3cd6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    3cda:	e7f0      	b.n	3cbe <memset+0x26>

00003cdc <_stdout_hook_default>:
}
    3cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3ce0:	4770      	bx	lr

00003ce2 <uarte_nrfx_config_get>:
{
    3ce2:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    3ce4:	6882      	ldr	r2, [r0, #8]
    3ce6:	e892 0003 	ldmia.w	r2, {r0, r1}
    3cea:	e883 0003 	stmia.w	r3, {r0, r1}
}
    3cee:	2000      	movs	r0, #0
    3cf0:	4770      	bx	lr

00003cf2 <uarte_nrfx_err_check>:
	return dev->config->config_info;
    3cf2:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
    3cf4:	689b      	ldr	r3, [r3, #8]
    3cf6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3cf8:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    3cfc:	b118      	cbz	r0, 3d06 <uarte_nrfx_err_check+0x14>
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    3cfe:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    3d02:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    3d06:	4770      	bx	lr

00003d08 <uarte_nrfx_poll_in>:
	return dev->config->config_info;
    3d08:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    3d0a:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
    3d0c:	689b      	ldr	r3, [r3, #8]
    3d0e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3d10:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    3d14:	b138      	cbz	r0, 3d26 <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
    3d16:	7a12      	ldrb	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3d18:	2000      	movs	r0, #0
    3d1a:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3d1c:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3d1e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3d22:	601a      	str	r2, [r3, #0]
	return 0;
    3d24:	4770      	bx	lr
		return -1;
    3d26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    3d2a:	4770      	bx	lr

00003d2c <uarte_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3d2c:	2200      	movs	r2, #0
	return dev->config->config_info;
    3d2e:	6803      	ldr	r3, [r0, #0]
{
    3d30:	b082      	sub	sp, #8
	return config->uarte_regs;
    3d32:	689b      	ldr	r3, [r3, #8]
{
    3d34:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
    3d38:	681b      	ldr	r3, [r3, #0]
    3d3a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3d3e:	f10d 0207 	add.w	r2, sp, #7
    3d42:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3d46:	2201      	movs	r2, #1
    3d48:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3d4c:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3d4e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    3d52:	2900      	cmp	r1, #0
    3d54:	d0fb      	beq.n	3d4e <uarte_nrfx_poll_out+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3d56:	60da      	str	r2, [r3, #12]
}
    3d58:	b002      	add	sp, #8
    3d5a:	4770      	bx	lr

00003d5c <hw_cc310_init>:
#if CONFIG_HW_CC310

#include "nrf_cc310_platform.h"

static int hw_cc310_init(struct device *dev)
{
    3d5c:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc310_platform_abort_init();
    3d5e:	f7fd f829 	bl	db4 <nrf_cc310_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc310_platform_mutex_init();
    3d62:	f7fd f8a7 	bl	eb4 <nrf_cc310_platform_mutex_init>
	res = nrf_cc310_platform_init();
#else
	res = nrf_cc310_platform_init_no_rng();
#endif
	return res;
}
    3d66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc310_platform_init_no_rng();
    3d6a:	f7fe bed1 	b.w	2b10 <nrf_cc310_platform_init_no_rng>

00003d6e <arch_system_halt>:
	__asm__ volatile(
    3d6e:	f04f 0220 	mov.w	r2, #32
    3d72:	f3ef 8311 	mrs	r3, BASEPRI
    3d76:	f382 8811 	msr	BASEPRI, r2
    3d7a:	f3bf 8f6f 	isb	sy
	 */

	(void)arch_irq_lock();
	for (;;) {
		/* Spin endlessly */
	}
    3d7e:	e7fe      	b.n	3d7e <arch_system_halt+0x10>

00003d80 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    3d80:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    3d82:	f7ff fff4 	bl	3d6e <arch_system_halt>

00003d86 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3d86:	b570      	push	{r4, r5, r6, lr}
    3d88:	4605      	mov	r5, r0
    3d8a:	460e      	mov	r6, r1
	return z_impl_k_current_get();
    3d8c:	f7fe fb7a 	bl	2484 <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    3d90:	4631      	mov	r1, r6
    3d92:	4604      	mov	r4, r0
    3d94:	4628      	mov	r0, r5
    3d96:	f7ff fff3 	bl	3d80 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
    3d9a:	4620      	mov	r0, r4
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
    3d9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3da0:	f7fd baf2 	b.w	1388 <z_impl_k_thread_abort>

00003da4 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    3da4:	f7ff be71 	b.w	3a8a <z_clock_idle_exit>

00003da8 <k_mem_slab_init>:
{
    3da8:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    3daa:	2400      	movs	r4, #0
	slab->block_size = block_size;
    3dac:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
    3db0:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
    3db4:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
    3db6:	42a3      	cmp	r3, r4
    3db8:	d102      	bne.n	3dc0 <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
    3dba:	e9c0 0000 	strd	r0, r0, [r0]
}
    3dbe:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    3dc0:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    3dc2:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    3dc4:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    3dc6:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    3dc8:	4411      	add	r1, r2
    3dca:	e7f4      	b.n	3db6 <k_mem_slab_init+0xe>

00003dcc <z_impl_k_mutex_init>:
	mutex->owner = NULL;
    3dcc:	2300      	movs	r3, #0
    3dce:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
    3dd2:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    3dd6:	4770      	bx	lr

00003dd8 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3dd8:	7b43      	ldrb	r3, [r0, #13]
    3dda:	06db      	lsls	r3, r3, #27
    3ddc:	bf03      	ittte	eq
    3dde:	6980      	ldreq	r0, [r0, #24]
    3de0:	fab0 f080 	clzeq	r0, r0
    3de4:	0940      	lsreq	r0, r0, #5
    3de6:	2000      	movne	r0, #0
}
    3de8:	4770      	bx	lr

00003dea <z_unpend_thread_no_timeout>:
{
    3dea:	b538      	push	{r3, r4, r5, lr}
    3dec:	4604      	mov	r4, r0
    3dee:	f04f 0320 	mov.w	r3, #32
    3df2:	f3ef 8511 	mrs	r5, BASEPRI
    3df6:	f383 8811 	msr	BASEPRI, r3
    3dfa:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    3dfe:	4601      	mov	r1, r0
    3e00:	6880      	ldr	r0, [r0, #8]
    3e02:	f7fe f975 	bl	20f0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    3e06:	7b63      	ldrb	r3, [r4, #13]
    3e08:	f023 0302 	bic.w	r3, r3, #2
    3e0c:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    3e0e:	f385 8811 	msr	BASEPRI, r5
    3e12:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    3e16:	2300      	movs	r3, #0
    3e18:	60a3      	str	r3, [r4, #8]
}
    3e1a:	bd38      	pop	{r3, r4, r5, pc}

00003e1c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3e1c:	b921      	cbnz	r1, 3e28 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3e1e:	f3ef 8005 	mrs	r0, IPSR
    3e22:	b908      	cbnz	r0, 3e28 <z_reschedule+0xc>
    3e24:	f7fd b86a 	b.w	efc <arch_swap>
    3e28:	f381 8811 	msr	BASEPRI, r1
    3e2c:	f3bf 8f6f 	isb	sy
}
    3e30:	4770      	bx	lr

00003e32 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3e32:	4603      	mov	r3, r0
    3e34:	b920      	cbnz	r0, 3e40 <z_reschedule_irqlock+0xe>
    3e36:	f3ef 8205 	mrs	r2, IPSR
    3e3a:	b90a      	cbnz	r2, 3e40 <z_reschedule_irqlock+0xe>
    3e3c:	f7fd b85e 	b.w	efc <arch_swap>
    3e40:	f383 8811 	msr	BASEPRI, r3
    3e44:	f3bf 8f6f 	isb	sy
}
    3e48:	4770      	bx	lr

00003e4a <z_reschedule_unlocked>:
	__asm__ volatile(
    3e4a:	f04f 0320 	mov.w	r3, #32
    3e4e:	f3ef 8011 	mrs	r0, BASEPRI
    3e52:	f383 8811 	msr	BASEPRI, r3
    3e56:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    3e5a:	f7ff bfea 	b.w	3e32 <z_reschedule_irqlock>

00003e5e <z_priq_dumb_best>:
	return list->head == list;
    3e5e:	6803      	ldr	r3, [r0, #0]
}
    3e60:	4298      	cmp	r0, r3
    3e62:	bf14      	ite	ne
    3e64:	4618      	movne	r0, r3
    3e66:	2000      	moveq	r0, #0
    3e68:	4770      	bx	lr

00003e6a <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
    3e6a:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    3e6e:	b570      	push	{r4, r5, r6, lr}
    3e70:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
    3e72:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
    3e76:	b1cb      	cbz	r3, 3eac <z_thread_timeout+0x42>
    3e78:	f04f 0320 	mov.w	r3, #32
    3e7c:	f3ef 8611 	mrs	r6, BASEPRI
    3e80:	f383 8811 	msr	BASEPRI, r3
    3e84:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    3e88:	4629      	mov	r1, r5
    3e8a:	f850 0c10 	ldr.w	r0, [r0, #-16]
    3e8e:	f7fe f92f 	bl	20f0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    3e92:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    3e96:	f023 0302 	bic.w	r3, r3, #2
    3e9a:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
    3e9e:	f386 8811 	msr	BASEPRI, r6
    3ea2:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    3ea6:	2300      	movs	r3, #0
    3ea8:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    3eac:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    3eb0:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    3eb2:	f023 0314 	bic.w	r3, r3, #20
    3eb6:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    3eba:	f7ff ff8d 	bl	3dd8 <z_is_thread_ready>
    3ebe:	b120      	cbz	r0, 3eca <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
    3ec0:	4628      	mov	r0, r5
}
    3ec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3ec6:	f7fe b963 	b.w	2190 <z_add_thread_to_ready_q>
    3eca:	bd70      	pop	{r4, r5, r6, pc}

00003ecc <z_unpend_first_thread>:
{
    3ecc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3ece:	f04f 0320 	mov.w	r3, #32
    3ed2:	f3ef 8211 	mrs	r2, BASEPRI
    3ed6:	f383 8811 	msr	BASEPRI, r3
    3eda:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    3ede:	f7ff ffbe 	bl	3e5e <z_priq_dumb_best>
    3ee2:	4604      	mov	r4, r0
	__asm__ volatile(
    3ee4:	f382 8811 	msr	BASEPRI, r2
    3ee8:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    3eec:	b1c8      	cbz	r0, 3f22 <z_unpend_first_thread+0x56>
	__asm__ volatile(
    3eee:	f04f 0320 	mov.w	r3, #32
    3ef2:	f3ef 8511 	mrs	r5, BASEPRI
    3ef6:	f383 8811 	msr	BASEPRI, r3
    3efa:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    3efe:	4601      	mov	r1, r0
    3f00:	6880      	ldr	r0, [r0, #8]
    3f02:	f7fe f8f5 	bl	20f0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    3f06:	7b63      	ldrb	r3, [r4, #13]
    3f08:	f023 0302 	bic.w	r3, r3, #2
    3f0c:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    3f0e:	f385 8811 	msr	BASEPRI, r5
    3f12:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    3f16:	2300      	movs	r3, #0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    3f18:	f104 0018 	add.w	r0, r4, #24
    3f1c:	60a3      	str	r3, [r4, #8]
    3f1e:	f000 f839 	bl	3f94 <z_abort_timeout>
}
    3f22:	4620      	mov	r0, r4
    3f24:	bd38      	pop	{r3, r4, r5, pc}

00003f26 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3f26:	7b43      	ldrb	r3, [r0, #13]
    3f28:	06db      	lsls	r3, r3, #27
    3f2a:	bf03      	ittte	eq
    3f2c:	6980      	ldreq	r0, [r0, #24]
    3f2e:	fab0 f080 	clzeq	r0, r0
    3f32:	0940      	lsreq	r0, r0, #5
    3f34:	2000      	movne	r0, #0
}
    3f36:	4770      	bx	lr

00003f38 <z_new_thread_init>:
{
    3f38:	b510      	push	{r4, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    3f3a:	9c02      	ldr	r4, [sp, #8]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
    3f3c:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
    3f3e:	7304      	strb	r4, [r0, #12]

	thread_base->sched_locked = 0U;
    3f40:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
    3f42:	2404      	movs	r4, #4
	thread_base->sched_locked = 0U;
    3f44:	73c3      	strb	r3, [r0, #15]
	thread_base->thread_state = (u8_t)initial_state;
    3f46:	7344      	strb	r4, [r0, #13]
	node->prev = NULL;
    3f48:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
    3f4c:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
    3f50:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
    3f54:	bd10      	pop	{r4, pc}

00003f56 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    3f56:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    3f58:	b510      	push	{r4, lr}
    3f5a:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    3f5c:	b103      	cbz	r3, 3f60 <z_thread_single_abort+0xa>
		thread->fn_abort();
    3f5e:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
    3f60:	4620      	mov	r0, r4
    3f62:	f7ff ffe0 	bl	3f26 <z_is_thread_ready>
    3f66:	b138      	cbz	r0, 3f78 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
    3f68:	4620      	mov	r0, r4
    3f6a:	f7fe f9bf 	bl	22ec <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
    3f6e:	7b63      	ldrb	r3, [r4, #13]
    3f70:	f043 0308 	orr.w	r3, r3, #8
    3f74:	7363      	strb	r3, [r4, #13]
}
    3f76:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
    3f78:	7b63      	ldrb	r3, [r4, #13]
    3f7a:	079b      	lsls	r3, r3, #30
    3f7c:	d502      	bpl.n	3f84 <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
    3f7e:	4620      	mov	r0, r4
    3f80:	f7ff ff33 	bl	3dea <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
    3f84:	69a3      	ldr	r3, [r4, #24]
    3f86:	2b00      	cmp	r3, #0
    3f88:	d0f1      	beq.n	3f6e <z_thread_single_abort+0x18>
    3f8a:	f104 0018 	add.w	r0, r4, #24
    3f8e:	f000 f801 	bl	3f94 <z_abort_timeout>
    3f92:	e7ec      	b.n	3f6e <z_thread_single_abort+0x18>

00003f94 <z_abort_timeout>:
{
    3f94:	b510      	push	{r4, lr}
	__asm__ volatile(
    3f96:	f04f 0220 	mov.w	r2, #32
    3f9a:	f3ef 8411 	mrs	r4, BASEPRI
    3f9e:	f382 8811 	msr	BASEPRI, r2
    3fa2:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    3fa6:	6803      	ldr	r3, [r0, #0]
    3fa8:	b13b      	cbz	r3, 3fba <z_abort_timeout+0x26>
			remove_timeout(to);
    3faa:	f7fe fb11 	bl	25d0 <remove_timeout>
			ret = 0;
    3fae:	2000      	movs	r0, #0
	__asm__ volatile(
    3fb0:	f384 8811 	msr	BASEPRI, r4
    3fb4:	f3bf 8f6f 	isb	sy
}
    3fb8:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    3fba:	f06f 0015 	mvn.w	r0, #21
    3fbe:	e7f7      	b.n	3fb0 <z_abort_timeout+0x1c>

00003fc0 <z_get_next_timeout_expiry>:
{
    3fc0:	b510      	push	{r4, lr}
	__asm__ volatile(
    3fc2:	f04f 0320 	mov.w	r3, #32
    3fc6:	f3ef 8411 	mrs	r4, BASEPRI
    3fca:	f383 8811 	msr	BASEPRI, r3
    3fce:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    3fd2:	f7fe fb11 	bl	25f8 <next_timeout>
	__asm__ volatile(
    3fd6:	f384 8811 	msr	BASEPRI, r4
    3fda:	f3bf 8f6f 	isb	sy
}
    3fde:	bd10      	pop	{r4, pc}

00003fe0 <z_set_timeout_expiry>:
{
    3fe0:	b570      	push	{r4, r5, r6, lr}
    3fe2:	4604      	mov	r4, r0
    3fe4:	460e      	mov	r6, r1
	__asm__ volatile(
    3fe6:	f04f 0320 	mov.w	r3, #32
    3fea:	f3ef 8511 	mrs	r5, BASEPRI
    3fee:	f383 8811 	msr	BASEPRI, r3
    3ff2:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    3ff6:	f7fe faff 	bl	25f8 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    3ffa:	2801      	cmp	r0, #1
    3ffc:	dd05      	ble.n	400a <z_set_timeout_expiry+0x2a>
    3ffe:	42a0      	cmp	r0, r4
    4000:	dd03      	ble.n	400a <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    4002:	4631      	mov	r1, r6
    4004:	4620      	mov	r0, r4
    4006:	f7fc fbe9 	bl	7dc <z_clock_set_timeout>
	__asm__ volatile(
    400a:	f385 8811 	msr	BASEPRI, r5
    400e:	f3bf 8f6f 	isb	sy
}
    4012:	bd70      	pop	{r4, r5, r6, pc}

00004014 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    4014:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

00004b20 <spm_request_read-0x34c0>:
	...

00007fe0 <spm_request_read>:
    7fe0:	e97f e97f 	sg
    7fe4:	f7f8 be0e 	b.w	c04 <__acle_se_spm_request_read>

00007fe8 <spm_firmware_info>:
    7fe8:	e97f e97f 	sg
    7fec:	f7f8 be62 	b.w	cb4 <__acle_se_spm_firmware_info>

00007ff0 <spm_request_random_number>:
    7ff0:	e97f e97f 	sg
    7ff4:	f7fb bd54 	b.w	3aa0 <__acle_se_spm_request_random_number>
	...
