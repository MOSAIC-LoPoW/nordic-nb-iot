
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

0000c000 <_vector_table>:
    c000:	200281b8 	.word	0x200281b8
    c004:	0000fbe5 	.word	0x0000fbe5
    c008:	0001d2b7 	.word	0x0001d2b7
    c00c:	0000fa05 	.word	0x0000fa05
    c010:	0000fa05 	.word	0x0000fa05
    c014:	0000fa05 	.word	0x0000fa05
    c018:	0000fa05 	.word	0x0000fa05
    c01c:	0000fa05 	.word	0x0000fa05
    c020:	0000fa05 	.word	0x0000fa05
    c024:	0000fa05 	.word	0x0000fa05
    c028:	0000fa05 	.word	0x0000fa05
    c02c:	0000f8c5 	.word	0x0000f8c5
    c030:	0000fa05 	.word	0x0000fa05
    c034:	0000fa05 	.word	0x0000fa05
    c038:	0000f815 	.word	0x0000f815
    c03c:	0001d2a7 	.word	0x0001d2a7

0000c040 <_irq_vector_table>:
    c040:	0000fba5 0000fba5 0000fba5 0000fba5     ................
    c050:	0000fba5 0000fba5 0000fba5 0000fba5     ................
    c060:	0000fba5 0000fba5 0000fba5 0000fba5     ................
    c070:	0000fba5 0000fba5 0000fba5 0000fba5     ................
    c080:	0000fba5 0000fba5 0000fba5 0000fba5     ................
    c090:	0000fba5 0000fba5 0000fba5 0000fba5     ................
    c0a0:	0000fba5 0000fba5 0000fba5 0000fba5     ................
    c0b0:	00011875 0001dda1 0000fba5 0000fba5     u...............
    c0c0:	0000fba5 0000fba5 0000fba5 0000fba5     ................
    c0d0:	0000fba5 0000fba5 0000fba5 0000fba5     ................
    c0e0:	0000fba5 0000fba5 0001ddbf 0000fba5     ................
    c0f0:	0000fba5 0000fba5 0000fba5 0000fba5     ................
    c100:	0000fba5 0000fba5 0000fba5 0000fba5     ................
    c110:	0000fba5 0000fba5 0000fba5 0000fba5     ................
    c120:	0000fba5 0000fba5 0000fba5 0000fba5     ................
    c130:	0000fba5 0000fba5 0000fba5 0000fba5     ................
    c140:	0000fba5                                ....

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b01 00015214     ...(L....[...R..
    c210:	00000001 0000c000 2002c508 0001282d     ........... -(..

Disassembly of section _TEXT_SECTION_NAME_2:

0000c220 <__aeabi_drsub>:
    c220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c224:	e002      	b.n	c22c <__adddf3>
    c226:	bf00      	nop

0000c228 <__aeabi_dsub>:
    c228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c22c <__adddf3>:
    c22c:	b530      	push	{r4, r5, lr}
    c22e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c232:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c236:	ea94 0f05 	teq	r4, r5
    c23a:	bf08      	it	eq
    c23c:	ea90 0f02 	teqeq	r0, r2
    c240:	bf1f      	itttt	ne
    c242:	ea54 0c00 	orrsne.w	ip, r4, r0
    c246:	ea55 0c02 	orrsne.w	ip, r5, r2
    c24a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c24e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c252:	f000 80e2 	beq.w	c41a <__adddf3+0x1ee>
    c256:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c25a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c25e:	bfb8      	it	lt
    c260:	426d      	neglt	r5, r5
    c262:	dd0c      	ble.n	c27e <__adddf3+0x52>
    c264:	442c      	add	r4, r5
    c266:	ea80 0202 	eor.w	r2, r0, r2
    c26a:	ea81 0303 	eor.w	r3, r1, r3
    c26e:	ea82 0000 	eor.w	r0, r2, r0
    c272:	ea83 0101 	eor.w	r1, r3, r1
    c276:	ea80 0202 	eor.w	r2, r0, r2
    c27a:	ea81 0303 	eor.w	r3, r1, r3
    c27e:	2d36      	cmp	r5, #54	; 0x36
    c280:	bf88      	it	hi
    c282:	bd30      	pophi	{r4, r5, pc}
    c284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c288:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c28c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c294:	d002      	beq.n	c29c <__adddf3+0x70>
    c296:	4240      	negs	r0, r0
    c298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c29c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c2a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c2a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c2a8:	d002      	beq.n	c2b0 <__adddf3+0x84>
    c2aa:	4252      	negs	r2, r2
    c2ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2b0:	ea94 0f05 	teq	r4, r5
    c2b4:	f000 80a7 	beq.w	c406 <__adddf3+0x1da>
    c2b8:	f1a4 0401 	sub.w	r4, r4, #1
    c2bc:	f1d5 0e20 	rsbs	lr, r5, #32
    c2c0:	db0d      	blt.n	c2de <__adddf3+0xb2>
    c2c2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c2c6:	fa22 f205 	lsr.w	r2, r2, r5
    c2ca:	1880      	adds	r0, r0, r2
    c2cc:	f141 0100 	adc.w	r1, r1, #0
    c2d0:	fa03 f20e 	lsl.w	r2, r3, lr
    c2d4:	1880      	adds	r0, r0, r2
    c2d6:	fa43 f305 	asr.w	r3, r3, r5
    c2da:	4159      	adcs	r1, r3
    c2dc:	e00e      	b.n	c2fc <__adddf3+0xd0>
    c2de:	f1a5 0520 	sub.w	r5, r5, #32
    c2e2:	f10e 0e20 	add.w	lr, lr, #32
    c2e6:	2a01      	cmp	r2, #1
    c2e8:	fa03 fc0e 	lsl.w	ip, r3, lr
    c2ec:	bf28      	it	cs
    c2ee:	f04c 0c02 	orrcs.w	ip, ip, #2
    c2f2:	fa43 f305 	asr.w	r3, r3, r5
    c2f6:	18c0      	adds	r0, r0, r3
    c2f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c2fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c300:	d507      	bpl.n	c312 <__adddf3+0xe6>
    c302:	f04f 0e00 	mov.w	lr, #0
    c306:	f1dc 0c00 	rsbs	ip, ip, #0
    c30a:	eb7e 0000 	sbcs.w	r0, lr, r0
    c30e:	eb6e 0101 	sbc.w	r1, lr, r1
    c312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c316:	d31b      	bcc.n	c350 <__adddf3+0x124>
    c318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c31c:	d30c      	bcc.n	c338 <__adddf3+0x10c>
    c31e:	0849      	lsrs	r1, r1, #1
    c320:	ea5f 0030 	movs.w	r0, r0, rrx
    c324:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c328:	f104 0401 	add.w	r4, r4, #1
    c32c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c334:	f080 809a 	bcs.w	c46c <__adddf3+0x240>
    c338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c33c:	bf08      	it	eq
    c33e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c342:	f150 0000 	adcs.w	r0, r0, #0
    c346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c34a:	ea41 0105 	orr.w	r1, r1, r5
    c34e:	bd30      	pop	{r4, r5, pc}
    c350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c354:	4140      	adcs	r0, r0
    c356:	eb41 0101 	adc.w	r1, r1, r1
    c35a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c35e:	f1a4 0401 	sub.w	r4, r4, #1
    c362:	d1e9      	bne.n	c338 <__adddf3+0x10c>
    c364:	f091 0f00 	teq	r1, #0
    c368:	bf04      	itt	eq
    c36a:	4601      	moveq	r1, r0
    c36c:	2000      	moveq	r0, #0
    c36e:	fab1 f381 	clz	r3, r1
    c372:	bf08      	it	eq
    c374:	3320      	addeq	r3, #32
    c376:	f1a3 030b 	sub.w	r3, r3, #11
    c37a:	f1b3 0220 	subs.w	r2, r3, #32
    c37e:	da0c      	bge.n	c39a <__adddf3+0x16e>
    c380:	320c      	adds	r2, #12
    c382:	dd08      	ble.n	c396 <__adddf3+0x16a>
    c384:	f102 0c14 	add.w	ip, r2, #20
    c388:	f1c2 020c 	rsb	r2, r2, #12
    c38c:	fa01 f00c 	lsl.w	r0, r1, ip
    c390:	fa21 f102 	lsr.w	r1, r1, r2
    c394:	e00c      	b.n	c3b0 <__adddf3+0x184>
    c396:	f102 0214 	add.w	r2, r2, #20
    c39a:	bfd8      	it	le
    c39c:	f1c2 0c20 	rsble	ip, r2, #32
    c3a0:	fa01 f102 	lsl.w	r1, r1, r2
    c3a4:	fa20 fc0c 	lsr.w	ip, r0, ip
    c3a8:	bfdc      	itt	le
    c3aa:	ea41 010c 	orrle.w	r1, r1, ip
    c3ae:	4090      	lslle	r0, r2
    c3b0:	1ae4      	subs	r4, r4, r3
    c3b2:	bfa2      	ittt	ge
    c3b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c3b8:	4329      	orrge	r1, r5
    c3ba:	bd30      	popge	{r4, r5, pc}
    c3bc:	ea6f 0404 	mvn.w	r4, r4
    c3c0:	3c1f      	subs	r4, #31
    c3c2:	da1c      	bge.n	c3fe <__adddf3+0x1d2>
    c3c4:	340c      	adds	r4, #12
    c3c6:	dc0e      	bgt.n	c3e6 <__adddf3+0x1ba>
    c3c8:	f104 0414 	add.w	r4, r4, #20
    c3cc:	f1c4 0220 	rsb	r2, r4, #32
    c3d0:	fa20 f004 	lsr.w	r0, r0, r4
    c3d4:	fa01 f302 	lsl.w	r3, r1, r2
    c3d8:	ea40 0003 	orr.w	r0, r0, r3
    c3dc:	fa21 f304 	lsr.w	r3, r1, r4
    c3e0:	ea45 0103 	orr.w	r1, r5, r3
    c3e4:	bd30      	pop	{r4, r5, pc}
    c3e6:	f1c4 040c 	rsb	r4, r4, #12
    c3ea:	f1c4 0220 	rsb	r2, r4, #32
    c3ee:	fa20 f002 	lsr.w	r0, r0, r2
    c3f2:	fa01 f304 	lsl.w	r3, r1, r4
    c3f6:	ea40 0003 	orr.w	r0, r0, r3
    c3fa:	4629      	mov	r1, r5
    c3fc:	bd30      	pop	{r4, r5, pc}
    c3fe:	fa21 f004 	lsr.w	r0, r1, r4
    c402:	4629      	mov	r1, r5
    c404:	bd30      	pop	{r4, r5, pc}
    c406:	f094 0f00 	teq	r4, #0
    c40a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c40e:	bf06      	itte	eq
    c410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c414:	3401      	addeq	r4, #1
    c416:	3d01      	subne	r5, #1
    c418:	e74e      	b.n	c2b8 <__adddf3+0x8c>
    c41a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c41e:	bf18      	it	ne
    c420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c424:	d029      	beq.n	c47a <__adddf3+0x24e>
    c426:	ea94 0f05 	teq	r4, r5
    c42a:	bf08      	it	eq
    c42c:	ea90 0f02 	teqeq	r0, r2
    c430:	d005      	beq.n	c43e <__adddf3+0x212>
    c432:	ea54 0c00 	orrs.w	ip, r4, r0
    c436:	bf04      	itt	eq
    c438:	4619      	moveq	r1, r3
    c43a:	4610      	moveq	r0, r2
    c43c:	bd30      	pop	{r4, r5, pc}
    c43e:	ea91 0f03 	teq	r1, r3
    c442:	bf1e      	ittt	ne
    c444:	2100      	movne	r1, #0
    c446:	2000      	movne	r0, #0
    c448:	bd30      	popne	{r4, r5, pc}
    c44a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c44e:	d105      	bne.n	c45c <__adddf3+0x230>
    c450:	0040      	lsls	r0, r0, #1
    c452:	4149      	adcs	r1, r1
    c454:	bf28      	it	cs
    c456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c45a:	bd30      	pop	{r4, r5, pc}
    c45c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c460:	bf3c      	itt	cc
    c462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c466:	bd30      	popcc	{r4, r5, pc}
    c468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c46c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c474:	f04f 0000 	mov.w	r0, #0
    c478:	bd30      	pop	{r4, r5, pc}
    c47a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c47e:	bf1a      	itte	ne
    c480:	4619      	movne	r1, r3
    c482:	4610      	movne	r0, r2
    c484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c488:	bf1c      	itt	ne
    c48a:	460b      	movne	r3, r1
    c48c:	4602      	movne	r2, r0
    c48e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c492:	bf06      	itte	eq
    c494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c498:	ea91 0f03 	teqeq	r1, r3
    c49c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c4a0:	bd30      	pop	{r4, r5, pc}
    c4a2:	bf00      	nop

0000c4a4 <__aeabi_ui2d>:
    c4a4:	f090 0f00 	teq	r0, #0
    c4a8:	bf04      	itt	eq
    c4aa:	2100      	moveq	r1, #0
    c4ac:	4770      	bxeq	lr
    c4ae:	b530      	push	{r4, r5, lr}
    c4b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4b8:	f04f 0500 	mov.w	r5, #0
    c4bc:	f04f 0100 	mov.w	r1, #0
    c4c0:	e750      	b.n	c364 <__adddf3+0x138>
    c4c2:	bf00      	nop

0000c4c4 <__aeabi_i2d>:
    c4c4:	f090 0f00 	teq	r0, #0
    c4c8:	bf04      	itt	eq
    c4ca:	2100      	moveq	r1, #0
    c4cc:	4770      	bxeq	lr
    c4ce:	b530      	push	{r4, r5, lr}
    c4d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c4dc:	bf48      	it	mi
    c4de:	4240      	negmi	r0, r0
    c4e0:	f04f 0100 	mov.w	r1, #0
    c4e4:	e73e      	b.n	c364 <__adddf3+0x138>
    c4e6:	bf00      	nop

0000c4e8 <__aeabi_f2d>:
    c4e8:	0042      	lsls	r2, r0, #1
    c4ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c4ee:	ea4f 0131 	mov.w	r1, r1, rrx
    c4f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c4f6:	bf1f      	itttt	ne
    c4f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c4fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c504:	4770      	bxne	lr
    c506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c50a:	bf08      	it	eq
    c50c:	4770      	bxeq	lr
    c50e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c512:	bf04      	itt	eq
    c514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c518:	4770      	bxeq	lr
    c51a:	b530      	push	{r4, r5, lr}
    c51c:	f44f 7460 	mov.w	r4, #896	; 0x380
    c520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c528:	e71c      	b.n	c364 <__adddf3+0x138>
    c52a:	bf00      	nop

0000c52c <__aeabi_ul2d>:
    c52c:	ea50 0201 	orrs.w	r2, r0, r1
    c530:	bf08      	it	eq
    c532:	4770      	bxeq	lr
    c534:	b530      	push	{r4, r5, lr}
    c536:	f04f 0500 	mov.w	r5, #0
    c53a:	e00a      	b.n	c552 <__aeabi_l2d+0x16>

0000c53c <__aeabi_l2d>:
    c53c:	ea50 0201 	orrs.w	r2, r0, r1
    c540:	bf08      	it	eq
    c542:	4770      	bxeq	lr
    c544:	b530      	push	{r4, r5, lr}
    c546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c54a:	d502      	bpl.n	c552 <__aeabi_l2d+0x16>
    c54c:	4240      	negs	r0, r0
    c54e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c552:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c556:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c55a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c55e:	f43f aed8 	beq.w	c312 <__adddf3+0xe6>
    c562:	f04f 0203 	mov.w	r2, #3
    c566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c56a:	bf18      	it	ne
    c56c:	3203      	addne	r2, #3
    c56e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c572:	bf18      	it	ne
    c574:	3203      	addne	r2, #3
    c576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c57a:	f1c2 0320 	rsb	r3, r2, #32
    c57e:	fa00 fc03 	lsl.w	ip, r0, r3
    c582:	fa20 f002 	lsr.w	r0, r0, r2
    c586:	fa01 fe03 	lsl.w	lr, r1, r3
    c58a:	ea40 000e 	orr.w	r0, r0, lr
    c58e:	fa21 f102 	lsr.w	r1, r1, r2
    c592:	4414      	add	r4, r2
    c594:	e6bd      	b.n	c312 <__adddf3+0xe6>
    c596:	bf00      	nop

0000c598 <__aeabi_uldivmod>:
    c598:	b953      	cbnz	r3, c5b0 <__aeabi_uldivmod+0x18>
    c59a:	b94a      	cbnz	r2, c5b0 <__aeabi_uldivmod+0x18>
    c59c:	2900      	cmp	r1, #0
    c59e:	bf08      	it	eq
    c5a0:	2800      	cmpeq	r0, #0
    c5a2:	bf1c      	itt	ne
    c5a4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c5a8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c5ac:	f000 b970 	b.w	c890 <__aeabi_idiv0>
    c5b0:	f1ad 0c08 	sub.w	ip, sp, #8
    c5b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c5b8:	f000 f806 	bl	c5c8 <__udivmoddi4>
    c5bc:	f8dd e004 	ldr.w	lr, [sp, #4]
    c5c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c5c4:	b004      	add	sp, #16
    c5c6:	4770      	bx	lr

0000c5c8 <__udivmoddi4>:
    c5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c5ce:	4604      	mov	r4, r0
    c5d0:	4689      	mov	r9, r1
    c5d2:	2b00      	cmp	r3, #0
    c5d4:	f040 8083 	bne.w	c6de <__udivmoddi4+0x116>
    c5d8:	428a      	cmp	r2, r1
    c5da:	4615      	mov	r5, r2
    c5dc:	d945      	bls.n	c66a <__udivmoddi4+0xa2>
    c5de:	fab2 f282 	clz	r2, r2
    c5e2:	b14a      	cbz	r2, c5f8 <__udivmoddi4+0x30>
    c5e4:	f1c2 0720 	rsb	r7, r2, #32
    c5e8:	fa01 f302 	lsl.w	r3, r1, r2
    c5ec:	4095      	lsls	r5, r2
    c5ee:	4094      	lsls	r4, r2
    c5f0:	fa20 f707 	lsr.w	r7, r0, r7
    c5f4:	ea47 0903 	orr.w	r9, r7, r3
    c5f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c5fc:	0c23      	lsrs	r3, r4, #16
    c5fe:	fa1f f885 	uxth.w	r8, r5
    c602:	fbb9 fcfe 	udiv	ip, r9, lr
    c606:	fb0e 991c 	mls	r9, lr, ip, r9
    c60a:	fb0c f108 	mul.w	r1, ip, r8
    c60e:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
    c612:	4299      	cmp	r1, r3
    c614:	d90a      	bls.n	c62c <__udivmoddi4+0x64>
    c616:	18eb      	adds	r3, r5, r3
    c618:	bf2c      	ite	cs
    c61a:	2001      	movcs	r0, #1
    c61c:	2000      	movcc	r0, #0
    c61e:	4299      	cmp	r1, r3
    c620:	d902      	bls.n	c628 <__udivmoddi4+0x60>
    c622:	2800      	cmp	r0, #0
    c624:	f000 811d 	beq.w	c862 <__udivmoddi4+0x29a>
    c628:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c62c:	1a59      	subs	r1, r3, r1
    c62e:	b2a3      	uxth	r3, r4
    c630:	fbb1 f0fe 	udiv	r0, r1, lr
    c634:	fb0e 1110 	mls	r1, lr, r0, r1
    c638:	fb00 f808 	mul.w	r8, r0, r8
    c63c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c640:	45a0      	cmp	r8, r4
    c642:	d905      	bls.n	c650 <__udivmoddi4+0x88>
    c644:	192c      	adds	r4, r5, r4
    c646:	d202      	bcs.n	c64e <__udivmoddi4+0x86>
    c648:	45a0      	cmp	r8, r4
    c64a:	f200 810e 	bhi.w	c86a <__udivmoddi4+0x2a2>
    c64e:	3801      	subs	r0, #1
    c650:	eba4 0408 	sub.w	r4, r4, r8
    c654:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c658:	2700      	movs	r7, #0
    c65a:	b11e      	cbz	r6, c664 <__udivmoddi4+0x9c>
    c65c:	40d4      	lsrs	r4, r2
    c65e:	2300      	movs	r3, #0
    c660:	e9c6 4300 	strd	r4, r3, [r6]
    c664:	4639      	mov	r1, r7
    c666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c66a:	2a00      	cmp	r2, #0
    c66c:	d051      	beq.n	c712 <__udivmoddi4+0x14a>
    c66e:	fab2 f282 	clz	r2, r2
    c672:	2a00      	cmp	r2, #0
    c674:	f040 80af 	bne.w	c7d6 <__udivmoddi4+0x20e>
    c678:	1b49      	subs	r1, r1, r5
    c67a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c67e:	fa1f f885 	uxth.w	r8, r5
    c682:	2701      	movs	r7, #1
    c684:	0c23      	lsrs	r3, r4, #16
    c686:	fbb1 fcfe 	udiv	ip, r1, lr
    c68a:	fb0e 111c 	mls	r1, lr, ip, r1
    c68e:	fb08 f00c 	mul.w	r0, r8, ip
    c692:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c696:	4298      	cmp	r0, r3
    c698:	d90a      	bls.n	c6b0 <__udivmoddi4+0xe8>
    c69a:	18eb      	adds	r3, r5, r3
    c69c:	bf2c      	ite	cs
    c69e:	2101      	movcs	r1, #1
    c6a0:	2100      	movcc	r1, #0
    c6a2:	4298      	cmp	r0, r3
    c6a4:	d902      	bls.n	c6ac <__udivmoddi4+0xe4>
    c6a6:	2900      	cmp	r1, #0
    c6a8:	f000 80d7 	beq.w	c85a <__udivmoddi4+0x292>
    c6ac:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c6b0:	1a19      	subs	r1, r3, r0
    c6b2:	b2a3      	uxth	r3, r4
    c6b4:	fbb1 f0fe 	udiv	r0, r1, lr
    c6b8:	fb0e 1110 	mls	r1, lr, r0, r1
    c6bc:	fb08 f800 	mul.w	r8, r8, r0
    c6c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c6c4:	45a0      	cmp	r8, r4
    c6c6:	d905      	bls.n	c6d4 <__udivmoddi4+0x10c>
    c6c8:	192c      	adds	r4, r5, r4
    c6ca:	d202      	bcs.n	c6d2 <__udivmoddi4+0x10a>
    c6cc:	45a0      	cmp	r8, r4
    c6ce:	f200 80c1 	bhi.w	c854 <__udivmoddi4+0x28c>
    c6d2:	3801      	subs	r0, #1
    c6d4:	eba4 0408 	sub.w	r4, r4, r8
    c6d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c6dc:	e7bd      	b.n	c65a <__udivmoddi4+0x92>
    c6de:	428b      	cmp	r3, r1
    c6e0:	d908      	bls.n	c6f4 <__udivmoddi4+0x12c>
    c6e2:	2e00      	cmp	r6, #0
    c6e4:	d074      	beq.n	c7d0 <__udivmoddi4+0x208>
    c6e6:	2700      	movs	r7, #0
    c6e8:	e9c6 0100 	strd	r0, r1, [r6]
    c6ec:	4638      	mov	r0, r7
    c6ee:	4639      	mov	r1, r7
    c6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c6f4:	fab3 f783 	clz	r7, r3
    c6f8:	b967      	cbnz	r7, c714 <__udivmoddi4+0x14c>
    c6fa:	428b      	cmp	r3, r1
    c6fc:	f0c0 80a4 	bcc.w	c848 <__udivmoddi4+0x280>
    c700:	4282      	cmp	r2, r0
    c702:	f240 80a1 	bls.w	c848 <__udivmoddi4+0x280>
    c706:	4638      	mov	r0, r7
    c708:	2e00      	cmp	r6, #0
    c70a:	d0ab      	beq.n	c664 <__udivmoddi4+0x9c>
    c70c:	e9c6 4900 	strd	r4, r9, [r6]
    c710:	e7a8      	b.n	c664 <__udivmoddi4+0x9c>
    c712:	deff      	udf	#255	; 0xff
    c714:	f1c7 0520 	rsb	r5, r7, #32
    c718:	40bb      	lsls	r3, r7
    c71a:	fa02 fc07 	lsl.w	ip, r2, r7
    c71e:	fa01 f407 	lsl.w	r4, r1, r7
    c722:	40ea      	lsrs	r2, r5
    c724:	fa20 f805 	lsr.w	r8, r0, r5
    c728:	40e9      	lsrs	r1, r5
    c72a:	fa00 fe07 	lsl.w	lr, r0, r7
    c72e:	431a      	orrs	r2, r3
    c730:	ea48 0404 	orr.w	r4, r8, r4
    c734:	ea4f 4812 	mov.w	r8, r2, lsr #16
    c738:	0c20      	lsrs	r0, r4, #16
    c73a:	fa1f f982 	uxth.w	r9, r2
    c73e:	fbb1 faf8 	udiv	sl, r1, r8
    c742:	fb08 111a 	mls	r1, r8, sl, r1
    c746:	fb0a fb09 	mul.w	fp, sl, r9
    c74a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    c74e:	458b      	cmp	fp, r1
    c750:	d90a      	bls.n	c768 <__udivmoddi4+0x1a0>
    c752:	1851      	adds	r1, r2, r1
    c754:	bf2c      	ite	cs
    c756:	2301      	movcs	r3, #1
    c758:	2300      	movcc	r3, #0
    c75a:	458b      	cmp	fp, r1
    c75c:	d902      	bls.n	c764 <__udivmoddi4+0x19c>
    c75e:	2b00      	cmp	r3, #0
    c760:	f000 8088 	beq.w	c874 <__udivmoddi4+0x2ac>
    c764:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    c768:	eba1 010b 	sub.w	r1, r1, fp
    c76c:	b2a4      	uxth	r4, r4
    c76e:	fbb1 f0f8 	udiv	r0, r1, r8
    c772:	fb08 1110 	mls	r1, r8, r0, r1
    c776:	fb00 f909 	mul.w	r9, r0, r9
    c77a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
    c77e:	4589      	cmp	r9, r1
    c780:	d904      	bls.n	c78c <__udivmoddi4+0x1c4>
    c782:	1851      	adds	r1, r2, r1
    c784:	d201      	bcs.n	c78a <__udivmoddi4+0x1c2>
    c786:	4589      	cmp	r9, r1
    c788:	d87b      	bhi.n	c882 <__udivmoddi4+0x2ba>
    c78a:	3801      	subs	r0, #1
    c78c:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c790:	eba1 0109 	sub.w	r1, r1, r9
    c794:	fba0 890c 	umull	r8, r9, r0, ip
    c798:	4549      	cmp	r1, r9
    c79a:	4644      	mov	r4, r8
    c79c:	464b      	mov	r3, r9
    c79e:	d302      	bcc.n	c7a6 <__udivmoddi4+0x1de>
    c7a0:	d106      	bne.n	c7b0 <__udivmoddi4+0x1e8>
    c7a2:	45c6      	cmp	lr, r8
    c7a4:	d204      	bcs.n	c7b0 <__udivmoddi4+0x1e8>
    c7a6:	3801      	subs	r0, #1
    c7a8:	ebb8 040c 	subs.w	r4, r8, ip
    c7ac:	eb69 0302 	sbc.w	r3, r9, r2
    c7b0:	2e00      	cmp	r6, #0
    c7b2:	d05d      	beq.n	c870 <__udivmoddi4+0x2a8>
    c7b4:	ebbe 0204 	subs.w	r2, lr, r4
    c7b8:	eb61 0103 	sbc.w	r1, r1, r3
    c7bc:	fa01 f505 	lsl.w	r5, r1, r5
    c7c0:	fa22 f307 	lsr.w	r3, r2, r7
    c7c4:	40f9      	lsrs	r1, r7
    c7c6:	2700      	movs	r7, #0
    c7c8:	431d      	orrs	r5, r3
    c7ca:	e9c6 5100 	strd	r5, r1, [r6]
    c7ce:	e749      	b.n	c664 <__udivmoddi4+0x9c>
    c7d0:	4637      	mov	r7, r6
    c7d2:	4630      	mov	r0, r6
    c7d4:	e746      	b.n	c664 <__udivmoddi4+0x9c>
    c7d6:	f1c2 0020 	rsb	r0, r2, #32
    c7da:	4095      	lsls	r5, r2
    c7dc:	fa01 f702 	lsl.w	r7, r1, r2
    c7e0:	fa21 f300 	lsr.w	r3, r1, r0
    c7e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c7e8:	fa24 f100 	lsr.w	r1, r4, r0
    c7ec:	fa1f f885 	uxth.w	r8, r5
    c7f0:	4094      	lsls	r4, r2
    c7f2:	4339      	orrs	r1, r7
    c7f4:	fbb3 f0fe 	udiv	r0, r3, lr
    c7f8:	0c0f      	lsrs	r7, r1, #16
    c7fa:	fb0e 3310 	mls	r3, lr, r0, r3
    c7fe:	fb00 fc08 	mul.w	ip, r0, r8
    c802:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    c806:	459c      	cmp	ip, r3
    c808:	d907      	bls.n	c81a <__udivmoddi4+0x252>
    c80a:	18eb      	adds	r3, r5, r3
    c80c:	bf2c      	ite	cs
    c80e:	2701      	movcs	r7, #1
    c810:	2700      	movcc	r7, #0
    c812:	459c      	cmp	ip, r3
    c814:	d900      	bls.n	c818 <__udivmoddi4+0x250>
    c816:	b38f      	cbz	r7, c87c <__udivmoddi4+0x2b4>
    c818:	3801      	subs	r0, #1
    c81a:	eba3 030c 	sub.w	r3, r3, ip
    c81e:	b289      	uxth	r1, r1
    c820:	fbb3 f7fe 	udiv	r7, r3, lr
    c824:	fb0e 3317 	mls	r3, lr, r7, r3
    c828:	fb07 fc08 	mul.w	ip, r7, r8
    c82c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c830:	458c      	cmp	ip, r1
    c832:	d904      	bls.n	c83e <__udivmoddi4+0x276>
    c834:	1869      	adds	r1, r5, r1
    c836:	d201      	bcs.n	c83c <__udivmoddi4+0x274>
    c838:	458c      	cmp	ip, r1
    c83a:	d825      	bhi.n	c888 <__udivmoddi4+0x2c0>
    c83c:	3f01      	subs	r7, #1
    c83e:	eba1 010c 	sub.w	r1, r1, ip
    c842:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
    c846:	e71d      	b.n	c684 <__udivmoddi4+0xbc>
    c848:	1a84      	subs	r4, r0, r2
    c84a:	eb61 0303 	sbc.w	r3, r1, r3
    c84e:	2001      	movs	r0, #1
    c850:	4699      	mov	r9, r3
    c852:	e759      	b.n	c708 <__udivmoddi4+0x140>
    c854:	3802      	subs	r0, #2
    c856:	442c      	add	r4, r5
    c858:	e73c      	b.n	c6d4 <__udivmoddi4+0x10c>
    c85a:	f1ac 0c02 	sub.w	ip, ip, #2
    c85e:	442b      	add	r3, r5
    c860:	e726      	b.n	c6b0 <__udivmoddi4+0xe8>
    c862:	f1ac 0c02 	sub.w	ip, ip, #2
    c866:	442b      	add	r3, r5
    c868:	e6e0      	b.n	c62c <__udivmoddi4+0x64>
    c86a:	3802      	subs	r0, #2
    c86c:	442c      	add	r4, r5
    c86e:	e6ef      	b.n	c650 <__udivmoddi4+0x88>
    c870:	4637      	mov	r7, r6
    c872:	e6f7      	b.n	c664 <__udivmoddi4+0x9c>
    c874:	f1aa 0a02 	sub.w	sl, sl, #2
    c878:	4411      	add	r1, r2
    c87a:	e775      	b.n	c768 <__udivmoddi4+0x1a0>
    c87c:	3802      	subs	r0, #2
    c87e:	442b      	add	r3, r5
    c880:	e7cb      	b.n	c81a <__udivmoddi4+0x252>
    c882:	3802      	subs	r0, #2
    c884:	4411      	add	r1, r2
    c886:	e781      	b.n	c78c <__udivmoddi4+0x1c4>
    c888:	3f02      	subs	r7, #2
    c88a:	4429      	add	r1, r5
    c88c:	e7d7      	b.n	c83e <__udivmoddi4+0x276>
    c88e:	bf00      	nop

0000c890 <__aeabi_idiv0>:
    c890:	4770      	bx	lr
    c892:	bf00      	nop

0000c894 <bsd_recoverable_error_handler>:
struct at_param_list m_param_list;

/**@brief Recoverable BSD library error. */
void bsd_recoverable_error_handler(uint32_t err)
{
	LOG_ERR("bsdlib recoverable error: %u", err);
    c894:	2301      	movs	r3, #1
    c896:	f04f 0200 	mov.w	r2, #0
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    c89a:	4906      	ldr	r1, [pc, #24]	; (c8b4 <bsd_recoverable_error_handler+0x20>)
    c89c:	f363 0207 	bfi	r2, r3, #0, #8
    c8a0:	4b05      	ldr	r3, [pc, #20]	; (c8b8 <bsd_recoverable_error_handler+0x24>)
    c8a2:	1a5b      	subs	r3, r3, r1
    c8a4:	08db      	lsrs	r3, r3, #3
    c8a6:	4601      	mov	r1, r0
    c8a8:	f363 128f 	bfi	r2, r3, #6, #10
    c8ac:	4803      	ldr	r0, [pc, #12]	; (c8bc <bsd_recoverable_error_handler+0x28>)
    c8ae:	f010 b979 	b.w	1cba4 <log_1>
    c8b2:	bf00      	nop
    c8b4:	0001f390 	.word	0x0001f390
    c8b8:	0001f390 	.word	0x0001f390
    c8bc:	0001f95c 	.word	0x0001f95c

0000c8c0 <start_execute>:

void start_execute(void)
{
	int err;

	LOG_INF("NB-IoT DATA COLLECTION PROGRAM");
    c8c0:	2303      	movs	r3, #3
    c8c2:	f04f 0100 	mov.w	r1, #0
{
    c8c6:	b510      	push	{r4, lr}
	LOG_INF("NB-IoT DATA COLLECTION PROGRAM");
    c8c8:	f363 0107 	bfi	r1, r3, #0, #8
    c8cc:	4c14      	ldr	r4, [pc, #80]	; (c920 <start_execute+0x60>)
    c8ce:	4b15      	ldr	r3, [pc, #84]	; (c924 <start_execute+0x64>)
    c8d0:	4815      	ldr	r0, [pc, #84]	; (c928 <start_execute+0x68>)
    c8d2:	1ae4      	subs	r4, r4, r3
    c8d4:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    c8d8:	f364 118f 	bfi	r1, r4, #6, #10
    c8dc:	f010 f955 	bl	1cb8a <log_0>
	err = slm_at_host_init();
    c8e0:	f000 f902 	bl	cae8 <slm_at_host_init>
	if (err != 0) {
    c8e4:	4601      	mov	r1, r0
    c8e6:	b158      	cbz	r0, c900 <start_execute+0x40>
		LOG_ERR("Failed to init at_host: %d", err);
    c8e8:	f04f 0200 	mov.w	r2, #0
    c8ec:	2301      	movs	r3, #1
    c8ee:	480f      	ldr	r0, [pc, #60]	; (c92c <start_execute+0x6c>)
    c8f0:	f363 0207 	bfi	r2, r3, #0, #8
    c8f4:	f364 128f 	bfi	r2, r4, #6, #10
	err = at_params_list_init(&m_param_list, CONFIG_SLM_AT_MAX_PARAM);
	if (err) {
		LOG_ERR("Failed to init AT Parser: %d", err);
		return;
	}
}
    c8f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Failed to init AT Parser: %d", err);
    c8fc:	f010 b952 	b.w	1cba4 <log_1>
	err = at_params_list_init(&m_param_list, CONFIG_SLM_AT_MAX_PARAM);
    c900:	2108      	movs	r1, #8
    c902:	480b      	ldr	r0, [pc, #44]	; (c930 <start_execute+0x70>)
    c904:	f011 feed 	bl	1e6e2 <at_params_list_init>
	if (err) {
    c908:	4601      	mov	r1, r0
    c90a:	b140      	cbz	r0, c91e <start_execute+0x5e>
		LOG_ERR("Failed to init AT Parser: %d", err);
    c90c:	f04f 0200 	mov.w	r2, #0
    c910:	2301      	movs	r3, #1
    c912:	f363 0207 	bfi	r2, r3, #0, #8
    c916:	f364 128f 	bfi	r2, r4, #6, #10
    c91a:	4806      	ldr	r0, [pc, #24]	; (c934 <start_execute+0x74>)
    c91c:	e7ec      	b.n	c8f8 <start_execute+0x38>
}
    c91e:	bd10      	pop	{r4, pc}
    c920:	0001f390 	.word	0x0001f390
    c924:	0001f390 	.word	0x0001f390
    c928:	0001f979 	.word	0x0001f979
    c92c:	0001f998 	.word	0x0001f998
    c930:	20020110 	.word	0x20020110
    c934:	0001f9b3 	.word	0x0001f9b3

0000c938 <write_uart_string>:

/* forward declaration */
void slm_at_host_uninit(void);

static inline void write_uart_string(char *str, size_t len)
{
    c938:	b570      	push	{r4, r5, r6, lr}
    c93a:	4604      	mov	r4, r0
	LOG_HEXDUMP_DBG(str, len, "TX");

	for (size_t i = 0; i < len; i++) {
		uart_poll_out(uart_dev, str[i]);
    c93c:	4e05      	ldr	r6, [pc, #20]	; (c954 <write_uart_string+0x1c>)
    c93e:	1845      	adds	r5, r0, r1
	for (size_t i = 0; i < len; i++) {
    c940:	42ac      	cmp	r4, r5
    c942:	d100      	bne.n	c946 <write_uart_string+0xe>
	}
}
    c944:	bd70      	pop	{r4, r5, r6, pc}
		uart_poll_out(uart_dev, str[i]);
    c946:	6830      	ldr	r0, [r6, #0]
    c948:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    c94c:	6843      	ldr	r3, [r0, #4]
    c94e:	685b      	ldr	r3, [r3, #4]
    c950:	4798      	blx	r3
    c952:	e7f5      	b.n	c940 <write_uart_string+0x8>
    c954:	2002012c 	.word	0x2002012c

0000c958 <isr>:
	at_buf_len = cmd_len;
	cmd_len = 0;
}

static void isr(struct device *dev)
{
    c958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c95c:	4607      	mov	r7, r0
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
    c95e:	6843      	ldr	r3, [r0, #4]
    c960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c962:	b103      	cbz	r3, c966 <isr+0xe>
		return api->irq_update(dev);
    c964:	4798      	blx	r3
	if (api->irq_rx_ready) {
    c966:	687b      	ldr	r3, [r7, #4]
    c968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c96a:	b19b      	cbz	r3, c994 <isr+0x3c>
		return api->irq_rx_ready(dev);
    c96c:	4638      	mov	r0, r7
    c96e:	4798      	blx	r3
	u8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
    c970:	b180      	cbz	r0, c994 <isr+0x3c>
    c972:	4d4f      	ldr	r5, [pc, #316]	; (cab0 <isr+0x158>)
		LOG_ERR("Invalid termination mode: %d", term_mode);
    c974:	4b4f      	ldr	r3, [pc, #316]	; (cab4 <isr+0x15c>)
	cmd_len += 1;
    c976:	4e50      	ldr	r6, [pc, #320]	; (cab8 <isr+0x160>)
		LOG_ERR("Invalid termination mode: %d", term_mode);
    c978:	1aed      	subs	r5, r5, r3
	if (inside_quotes) {
    c97a:	f8df b168 	ldr.w	fp, [pc, #360]	; cae4 <isr+0x18c>
		LOG_ERR("Invalid termination mode: %d", term_mode);
    c97e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
	if (api->fifo_read) {
    c982:	687b      	ldr	r3, [r7, #4]
    c984:	699b      	ldr	r3, [r3, #24]
    c986:	b12b      	cbz	r3, c994 <isr+0x3c>
		return api->fifo_read(dev, rx_data, size);
    c988:	2201      	movs	r2, #1
    c98a:	f10d 0107 	add.w	r1, sp, #7
    c98e:	4638      	mov	r0, r7
    c990:	4798      	blx	r3
		return;
	}

	while (uart_fifo_read(dev, &character, 1)) {
    c992:	b910      	cbnz	r0, c99a <isr+0x42>
		uart_rx_handler(character);
	}
}
    c994:	b003      	add	sp, #12
    c996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	cmd_len += 1;
    c99a:	6832      	ldr	r2, [r6, #0]
		uart_rx_handler(character);
    c99c:	f89d 1007 	ldrb.w	r1, [sp, #7]
	cmd_len += 1;
    c9a0:	1c54      	adds	r4, r2, #1
	switch (character) {
    c9a2:	2922      	cmp	r1, #34	; 0x22
	cmd_len += 1;
    c9a4:	6034      	str	r4, [r6, #0]
	switch (character) {
    c9a6:	d019      	beq.n	c9dc <isr+0x84>
    c9a8:	297f      	cmp	r1, #127	; 0x7f
    c9aa:	d001      	beq.n	c9b0 <isr+0x58>
    c9ac:	2908      	cmp	r1, #8
    c9ae:	d11b      	bne.n	c9e8 <isr+0x90>
		pos = pos ? pos - 1 : 0;
    c9b0:	b102      	cbz	r2, c9b4 <isr+0x5c>
    c9b2:	3a01      	subs	r2, #1
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    c9b4:	2c02      	cmp	r4, #2
    c9b6:	bf38      	it	cc
    c9b8:	2402      	movcc	r4, #2
		at_buf[pos] = 0;
    c9ba:	2000      	movs	r0, #0
    c9bc:	4b3f      	ldr	r3, [pc, #252]	; (cabc <isr+0x164>)
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    c9be:	3c02      	subs	r4, #2
		at_buf[pos] = 0;
    c9c0:	5498      	strb	r0, [r3, r2]
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    c9c2:	6034      	str	r4, [r6, #0]
	if (inside_quotes) {
    c9c4:	f89b 3000 	ldrb.w	r3, [fp]
    c9c8:	2b00      	cmp	r3, #0
    c9ca:	d1da      	bne.n	c982 <isr+0x2a>
	switch (term_mode) {
    c9cc:	4b3c      	ldr	r3, [pc, #240]	; (cac0 <isr+0x168>)
    c9ce:	781b      	ldrb	r3, [r3, #0]
    c9d0:	2b03      	cmp	r3, #3
    c9d2:	d85e      	bhi.n	ca92 <isr+0x13a>
    c9d4:	e8df f003 	tbb	[pc, r3]
    c9d8:	554d2f2f 	.word	0x554d2f2f
		inside_quotes = !inside_quotes;
    c9dc:	f89b 3000 	ldrb.w	r3, [fp]
    c9e0:	f083 0301 	eor.w	r3, r3, #1
    c9e4:	f88b 3000 	strb.w	r3, [fp]
		if (cmd_len > AT_MAX_CMD_LEN) {
    c9e8:	f640 238c 	movw	r3, #2700	; 0xa8c
    c9ec:	429c      	cmp	r4, r3
    c9ee:	d90f      	bls.n	ca10 <isr+0xb8>
			LOG_ERR("Buffer overflow, dropping '%c'\n", character);
    c9f0:	f028 023f 	bic.w	r2, r8, #63	; 0x3f
    c9f4:	f042 0201 	orr.w	r2, r2, #1
    c9f8:	f362 0807 	bfi	r8, r2, #0, #8
    c9fc:	f365 188f 	bfi	r8, r5, #6, #10
    ca00:	4642      	mov	r2, r8
    ca02:	4830      	ldr	r0, [pc, #192]	; (cac4 <isr+0x16c>)
    ca04:	f010 f8ce 	bl	1cba4 <log_1>
			cmd_len = AT_MAX_CMD_LEN;
    ca08:	f640 238c 	movw	r3, #2700	; 0xa8c
	cmd_len = 0;
    ca0c:	6033      	str	r3, [r6, #0]
    ca0e:	e7b8      	b.n	c982 <isr+0x2a>
		} else if (cmd_len < 1) {
    ca10:	b974      	cbnz	r4, ca30 <isr+0xd8>
			LOG_ERR("Invalid AT command length: %d", cmd_len);
    ca12:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    ca16:	f043 0301 	orr.w	r3, r3, #1
    ca1a:	f363 0907 	bfi	r9, r3, #0, #8
    ca1e:	f365 198f 	bfi	r9, r5, #6, #10
    ca22:	464a      	mov	r2, r9
    ca24:	4621      	mov	r1, r4
    ca26:	4828      	ldr	r0, [pc, #160]	; (cac8 <isr+0x170>)
    ca28:	f010 f8bc 	bl	1cba4 <log_1>
			cmd_len = 0;
    ca2c:	6034      	str	r4, [r6, #0]
			return;
    ca2e:	e7a8      	b.n	c982 <isr+0x2a>
		at_buf[pos] = character;
    ca30:	4b22      	ldr	r3, [pc, #136]	; (cabc <isr+0x164>)
    ca32:	5499      	strb	r1, [r3, r2]
		break;
    ca34:	e7c6      	b.n	c9c4 <isr+0x6c>
		if (character == termination[term_mode]) {
    ca36:	4a25      	ldr	r2, [pc, #148]	; (cacc <isr+0x174>)
    ca38:	5cd3      	ldrb	r3, [r2, r3]
    ca3a:	428b      	cmp	r3, r1
		if ((at_buf[pos - 1]) &&
    ca3c:	d1a1      	bne.n	c982 <isr+0x2a>
	uart_irq_rx_disable(uart_dev);
    ca3e:	4b24      	ldr	r3, [pc, #144]	; (cad0 <isr+0x178>)
    ca40:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
    ca42:	6843      	ldr	r3, [r0, #4]
    ca44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ca46:	b103      	cbz	r3, ca4a <isr+0xf2>
		api->irq_rx_disable(dev);
    ca48:	4798      	blx	r3
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ca4a:	4922      	ldr	r1, [pc, #136]	; (cad4 <isr+0x17c>)
    ca4c:	e8d1 3fef 	ldaex	r3, [r1]
    ca50:	f043 0201 	orr.w	r2, r3, #1
    ca54:	e8c1 2fe0 	stlex	r0, r2, [r1]
    ca58:	2800      	cmp	r0, #0
    ca5a:	d1f7      	bne.n	ca4c <isr+0xf4>
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    ca5c:	07db      	lsls	r3, r3, #31
    ca5e:	d403      	bmi.n	ca68 <isr+0x110>
		k_queue_append(&work_q->queue, work);
    ca60:	3908      	subs	r1, #8
    ca62:	481d      	ldr	r0, [pc, #116]	; (cad8 <isr+0x180>)
    ca64:	f011 ffd5 	bl	1ea12 <k_queue_append>
	at_buf_len = cmd_len;
    ca68:	4b1c      	ldr	r3, [pc, #112]	; (cadc <isr+0x184>)
    ca6a:	6832      	ldr	r2, [r6, #0]
    ca6c:	601a      	str	r2, [r3, #0]
	cmd_len = 0;
    ca6e:	2300      	movs	r3, #0
    ca70:	e7cc      	b.n	ca0c <isr+0xb4>
		if ((at_buf[pos - 1]) &&
    ca72:	4b12      	ldr	r3, [pc, #72]	; (cabc <isr+0x164>)
    ca74:	441a      	add	r2, r3
    ca76:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    ca7a:	2b00      	cmp	r3, #0
    ca7c:	d081      	beq.n	c982 <isr+0x2a>
    ca7e:	290a      	cmp	r1, #10
    ca80:	e7dc      	b.n	ca3c <isr+0xe4>
		if ((at_buf[pos - 1] == '\r') && (character == '\n')) {
    ca82:	4b0e      	ldr	r3, [pc, #56]	; (cabc <isr+0x164>)
    ca84:	441a      	add	r2, r3
    ca86:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    ca8a:	2b0d      	cmp	r3, #13
    ca8c:	f47f af79 	bne.w	c982 <isr+0x2a>
    ca90:	e7f5      	b.n	ca7e <isr+0x126>
		LOG_ERR("Invalid termination mode: %d", term_mode);
    ca92:	f02a 023f 	bic.w	r2, sl, #63	; 0x3f
    ca96:	f042 0201 	orr.w	r2, r2, #1
    ca9a:	f362 0a07 	bfi	sl, r2, #0, #8
    ca9e:	f365 1a8f 	bfi	sl, r5, #6, #10
    caa2:	4652      	mov	r2, sl
    caa4:	4619      	mov	r1, r3
    caa6:	480e      	ldr	r0, [pc, #56]	; (cae0 <isr+0x188>)
    caa8:	f010 f87c 	bl	1cba4 <log_1>
    caac:	e769      	b.n	c982 <isr+0x2a>
    caae:	bf00      	nop
    cab0:	0001f3a0 	.word	0x0001f3a0
    cab4:	0001f390 	.word	0x0001f390
    cab8:	2002011c 	.word	0x2002011c
    cabc:	20024e4e 	.word	0x20024e4e
    cac0:	20026367 	.word	0x20026367
    cac4:	0001fa74 	.word	0x0001fa74
    cac8:	0001fa94 	.word	0x0001fa94
    cacc:	0001fc15 	.word	0x0001fc15
    cad0:	2002012c 	.word	0x2002012c
    cad4:	20020128 	.word	0x20020128
    cad8:	20024d68 	.word	0x20024d68
    cadc:	20020118 	.word	0x20020118
    cae0:	0001fab2 	.word	0x0001fab2
    cae4:	20026366 	.word	0x20026366

0000cae8 <slm_at_host_init>:
{
	write_uart_string(str, strlen(str));
}

int slm_at_host_init(void)
{
    cae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	enum select_uart uart_id = CONFIG_SLM_CONNECT_UART;
	enum term_modes mode = CONFIG_SLM_AT_HOST_TERMINATION;

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
    caea:	2203      	movs	r2, #3
    caec:	4b49      	ldr	r3, [pc, #292]	; (cc14 <slm_at_host_init+0x12c>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
    caee:	494a      	ldr	r1, [pc, #296]	; (cc18 <slm_at_host_init+0x130>)
    caf0:	2000      	movs	r0, #0
		term_mode = mode;
    caf2:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
    caf4:	f005 fc0a 	bl	1230c <at_notif_register_handler>
	if (err != 0) {
    caf8:	4c48      	ldr	r4, [pc, #288]	; (cc1c <slm_at_host_init+0x134>)
    cafa:	4b49      	ldr	r3, [pc, #292]	; (cc20 <slm_at_host_init+0x138>)
    cafc:	4605      	mov	r5, r0
    cafe:	1ae4      	subs	r4, r4, r3
    cb00:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    cb04:	b168      	cbz	r0, cb22 <slm_at_host_init+0x3a>
		LOG_ERR("Can't register handler err=%d", err);
    cb06:	f04f 0200 	mov.w	r2, #0
    cb0a:	2301      	movs	r3, #1
    cb0c:	f363 0207 	bfi	r2, r3, #0, #8
    cb10:	4601      	mov	r1, r0
    cb12:	f364 128f 	bfi	r2, r4, #6, #10
    cb16:	4843      	ldr	r0, [pc, #268]	; (cc24 <slm_at_host_init+0x13c>)
    cb18:	f010 f844 	bl	1cba4 <log_1>
		return -EFAULT;
	}
#endif
	LOG_DBG("at_host init done");
	return err;
}
    cb1c:	4628      	mov	r0, r5
    cb1e:	b003      	add	sp, #12
    cb20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    cb22:	4841      	ldr	r0, [pc, #260]	; (cc28 <slm_at_host_init+0x140>)
    cb24:	f00e fa20 	bl	1af68 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
    cb28:	4d40      	ldr	r5, [pc, #256]	; (cc2c <slm_at_host_init+0x144>)
    cb2a:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
    cb2c:	b1e8      	cbz	r0, cb6a <slm_at_host_init+0x82>
			LOG_ERR("UART check failed: %d. "
    cb2e:	4f40      	ldr	r7, [pc, #256]	; (cc30 <slm_at_host_init+0x148>)
		err = uart_err_check(uart_dev);
    cb30:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
    cb32:	6843      	ldr	r3, [r0, #4]
    cb34:	689b      	ldr	r3, [r3, #8]
    cb36:	2b00      	cmp	r3, #0
    cb38:	d048      	beq.n	cbcc <slm_at_host_init+0xe4>
		return api->err_check(dev);
    cb3a:	4798      	blx	r3
		if (err) {
    cb3c:	4601      	mov	r1, r0
    cb3e:	2800      	cmp	r0, #0
    cb40:	d044      	beq.n	cbcc <slm_at_host_init+0xe4>
			LOG_ERR("UART check failed: %d. "
    cb42:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
    cb46:	f043 0301 	orr.w	r3, r3, #1
    cb4a:	f363 0607 	bfi	r6, r3, #0, #8
    cb4e:	f364 168f 	bfi	r6, r4, #6, #10
    cb52:	4632      	mov	r2, r6
    cb54:	4638      	mov	r0, r7
    cb56:	f010 f825 	bl	1cba4 <log_1>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
    cb5a:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
    cb5c:	6843      	ldr	r3, [r0, #4]
    cb5e:	699b      	ldr	r3, [r3, #24]
    cb60:	b9eb      	cbnz	r3, cb9e <slm_at_host_init+0xb6>
	if (z_syscall_trap()) {
		return (s32_t) arch_syscall_invoke1(*(uintptr_t *)&ms, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(ms);
    cb62:	200a      	movs	r0, #10
    cb64:	f00f f8a4 	bl	1bcb0 <z_impl_k_sleep>
    cb68:	e7e2      	b.n	cb30 <slm_at_host_init+0x48>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
    cb6a:	2301      	movs	r3, #1
    cb6c:	f04f 0200 	mov.w	r2, #0
    cb70:	f363 0207 	bfi	r2, r3, #0, #8
    cb74:	f364 128f 	bfi	r2, r4, #6, #10
    cb78:	492b      	ldr	r1, [pc, #172]	; (cc28 <slm_at_host_init+0x140>)
    cb7a:	482e      	ldr	r0, [pc, #184]	; (cc34 <slm_at_host_init+0x14c>)
    cb7c:	f010 f812 	bl	1cba4 <log_1>
		LOG_ERR("UART can not be initialized: %d", err);
    cb80:	f04f 0200 	mov.w	r2, #0
    cb84:	2301      	movs	r3, #1
    cb86:	f06f 0115 	mvn.w	r1, #21
    cb8a:	f363 0207 	bfi	r2, r3, #0, #8
    cb8e:	482a      	ldr	r0, [pc, #168]	; (cc38 <slm_at_host_init+0x150>)
    cb90:	f364 128f 	bfi	r2, r4, #6, #10
		LOG_ERR("GPS could not be initialized: %d", err);
    cb94:	f010 f806 	bl	1cba4 <log_1>
		return -EFAULT;
    cb98:	f06f 050d 	mvn.w	r5, #13
    cb9c:	e7be      	b.n	cb1c <slm_at_host_init+0x34>
		return api->fifo_read(dev, rx_data, size);
    cb9e:	2201      	movs	r2, #1
    cba0:	f10d 0107 	add.w	r1, sp, #7
    cba4:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
    cba6:	2800      	cmp	r0, #0
    cba8:	d1d7      	bne.n	cb5a <slm_at_host_init+0x72>
    cbaa:	e7da      	b.n	cb62 <slm_at_host_init+0x7a>
	err = slm_at_gps_init(slm_at_callback);
    cbac:	4823      	ldr	r0, [pc, #140]	; (cc3c <slm_at_host_init+0x154>)
    cbae:	f001 fefb 	bl	e9a8 <slm_at_gps_init>
	if (err) {
    cbb2:	4605      	mov	r5, r0
    cbb4:	2800      	cmp	r0, #0
    cbb6:	d0b1      	beq.n	cb1c <slm_at_host_init+0x34>
		LOG_ERR("GPS could not be initialized: %d", err);
    cbb8:	f04f 0200 	mov.w	r2, #0
    cbbc:	2301      	movs	r3, #1
    cbbe:	f363 0207 	bfi	r2, r3, #0, #8
    cbc2:	4601      	mov	r1, r0
    cbc4:	f364 128f 	bfi	r2, r4, #6, #10
    cbc8:	481d      	ldr	r0, [pc, #116]	; (cc40 <slm_at_host_init+0x158>)
    cbca:	e7e3      	b.n	cb94 <slm_at_host_init+0xac>
	uart_irq_callback_set(uart_dev, isr);
    cbcc:	682a      	ldr	r2, [r5, #0]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
    cbce:	6853      	ldr	r3, [r2, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    cbd0:	b123      	cbz	r3, cbdc <slm_at_host_init+0xf4>
    cbd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    cbd4:	b113      	cbz	r3, cbdc <slm_at_host_init+0xf4>
		api->irq_callback_set(dev, cb, user_data);
    cbd6:	491b      	ldr	r1, [pc, #108]	; (cc44 <slm_at_host_init+0x15c>)
    cbd8:	4610      	mov	r0, r2
    cbda:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    cbdc:	2200      	movs	r2, #0
    cbde:	4b1a      	ldr	r3, [pc, #104]	; (cc48 <slm_at_host_init+0x160>)
    cbe0:	491a      	ldr	r1, [pc, #104]	; (cc4c <slm_at_host_init+0x164>)
	uart_irq_rx_enable(uart_dev);
    cbe2:	6828      	ldr	r0, [r5, #0]
    cbe4:	e9c3 1201 	strd	r1, r2, [r3, #4]
    cbe8:	601a      	str	r2, [r3, #0]
    cbea:	f00f fc17 	bl	1c41c <uart_irq_rx_enable>
	write_uart_string(SLM_SYNC_STR, sizeof(SLM_SYNC_STR)-1);
    cbee:	2107      	movs	r1, #7
    cbf0:	4817      	ldr	r0, [pc, #92]	; (cc50 <slm_at_host_init+0x168>)
    cbf2:	f7ff fea1 	bl	c938 <write_uart_string>
	err = slm_at_tcpip_init(slm_at_callback);
    cbf6:	4811      	ldr	r0, [pc, #68]	; (cc3c <slm_at_host_init+0x154>)
    cbf8:	f001 fa1c 	bl	e034 <slm_at_tcpip_init>
	if (err) {
    cbfc:	4601      	mov	r1, r0
    cbfe:	2800      	cmp	r0, #0
    cc00:	d0d4      	beq.n	cbac <slm_at_host_init+0xc4>
		LOG_ERR("TCPIP could not be initialized: %d", err);
    cc02:	f04f 0200 	mov.w	r2, #0
    cc06:	2301      	movs	r3, #1
    cc08:	f363 0207 	bfi	r2, r3, #0, #8
    cc0c:	f364 128f 	bfi	r2, r4, #6, #10
    cc10:	4810      	ldr	r0, [pc, #64]	; (cc54 <slm_at_host_init+0x16c>)
    cc12:	e7bf      	b.n	cb94 <slm_at_host_init+0xac>
    cc14:	20026367 	.word	0x20026367
    cc18:	0001c43b 	.word	0x0001c43b
    cc1c:	0001f3a0 	.word	0x0001f3a0
    cc20:	0001f390 	.word	0x0001f390
    cc24:	0001facf 	.word	0x0001facf
    cc28:	0001faed 	.word	0x0001faed
    cc2c:	2002012c 	.word	0x2002012c
    cc30:	0001fb24 	.word	0x0001fb24
    cc34:	0001faf4 	.word	0x0001faf4
    cc38:	0001fb04 	.word	0x0001fb04
    cc3c:	0001c427 	.word	0x0001c427
    cc40:	0001fb84 	.word	0x0001fb84
    cc44:	0000c959 	.word	0x0000c959
    cc48:	20020120 	.word	0x20020120
    cc4c:	0000cce9 	.word	0x0000cce9
    cc50:	0001fb59 	.word	0x0001fb59
    cc54:	0001fb61 	.word	0x0001fb61

0000cc58 <slm_at_host_uninit>:

void slm_at_host_uninit(void)
{
    cc58:	b508      	push	{r3, lr}
	int err;

#if defined(CONFIG_SLM_TCPIP_AT_MODE)
	/* Uninitialize the TCPIP module */
	err = slm_at_tcpip_uninit();
    cc5a:	f00f fc00 	bl	1c45e <slm_at_tcpip_uninit>
	if (err) {
    cc5e:	4601      	mov	r1, r0
    cc60:	b168      	cbz	r0, cc7e <slm_at_host_uninit+0x26>
		LOG_WRN("TCPIP could not be uninitialized: %d", err);
    cc62:	2302      	movs	r3, #2
    cc64:	f04f 0200 	mov.w	r2, #0
    cc68:	4819      	ldr	r0, [pc, #100]	; (ccd0 <slm_at_host_uninit+0x78>)
    cc6a:	f363 0207 	bfi	r2, r3, #0, #8
    cc6e:	4b19      	ldr	r3, [pc, #100]	; (ccd4 <slm_at_host_uninit+0x7c>)
    cc70:	1a1b      	subs	r3, r3, r0
    cc72:	08db      	lsrs	r3, r3, #3
    cc74:	f363 128f 	bfi	r2, r3, #6, #10
    cc78:	4817      	ldr	r0, [pc, #92]	; (ccd8 <slm_at_host_uninit+0x80>)
    cc7a:	f00f ff93 	bl	1cba4 <log_1>
	}
#endif
#if defined(CONFIG_SLM_GPS_AT_MODE)
	/* Uninitialize the GPS module */
	err = slm_at_gps_uninit();
    cc7e:	f001 ff2d 	bl	eadc <slm_at_gps_uninit>
	if (err) {
    cc82:	4601      	mov	r1, r0
    cc84:	b168      	cbz	r0, cca2 <slm_at_host_uninit+0x4a>
		LOG_WRN("GPS could not be uninitialized: %d", err);
    cc86:	2302      	movs	r3, #2
    cc88:	f04f 0200 	mov.w	r2, #0
    cc8c:	4810      	ldr	r0, [pc, #64]	; (ccd0 <slm_at_host_uninit+0x78>)
    cc8e:	f363 0207 	bfi	r2, r3, #0, #8
    cc92:	4b10      	ldr	r3, [pc, #64]	; (ccd4 <slm_at_host_uninit+0x7c>)
    cc94:	1a1b      	subs	r3, r3, r0
    cc96:	08db      	lsrs	r3, r3, #3
    cc98:	f363 128f 	bfi	r2, r3, #6, #10
    cc9c:	480f      	ldr	r0, [pc, #60]	; (ccdc <slm_at_host_uninit+0x84>)
    cc9e:	f00f ff81 	bl	1cba4 <log_1>
	}
#endif
	err = at_notif_deregister_handler(NULL, response_handler);
    cca2:	490f      	ldr	r1, [pc, #60]	; (cce0 <slm_at_host_uninit+0x88>)
    cca4:	2000      	movs	r0, #0
    cca6:	f005 fb81 	bl	123ac <at_notif_deregister_handler>
	if (err != 0) {
    ccaa:	4601      	mov	r1, r0
    ccac:	b178      	cbz	r0, ccce <slm_at_host_uninit+0x76>
		LOG_WRN("Can't deregister handler err=%d", err);
    ccae:	2302      	movs	r3, #2
    ccb0:	f04f 0200 	mov.w	r2, #0
    ccb4:	4806      	ldr	r0, [pc, #24]	; (ccd0 <slm_at_host_uninit+0x78>)
    ccb6:	f363 0207 	bfi	r2, r3, #0, #8
    ccba:	4b06      	ldr	r3, [pc, #24]	; (ccd4 <slm_at_host_uninit+0x7c>)
    ccbc:	1a1b      	subs	r3, r3, r0
    ccbe:	08db      	lsrs	r3, r3, #3
    ccc0:	f363 128f 	bfi	r2, r3, #6, #10
    ccc4:	4807      	ldr	r0, [pc, #28]	; (cce4 <slm_at_host_uninit+0x8c>)
	if (err != 0) {
		LOG_WRN("Can't power off uart err=%d", err);
	}
#endif
	LOG_DBG("at_host uninit done");
}
    ccc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_WRN("Can't deregister handler err=%d", err);
    ccca:	f00f bf6b 	b.w	1cba4 <log_1>
}
    ccce:	bd08      	pop	{r3, pc}
    ccd0:	0001f390 	.word	0x0001f390
    ccd4:	0001f3a0 	.word	0x0001f3a0
    ccd8:	0001fba5 	.word	0x0001fba5
    ccdc:	0001fbca 	.word	0x0001fbca
    cce0:	0001c43b 	.word	0x0001c43b
    cce4:	0001fbed 	.word	0x0001fbed

0000cce8 <cmd_send>:
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    cce8:	4a68      	ldr	r2, [pc, #416]	; (ce8c <cmd_send+0x1a4>)
    ccea:	4b69      	ldr	r3, [pc, #420]	; (ce90 <cmd_send+0x1a8>)
    ccec:	6811      	ldr	r1, [r2, #0]
    ccee:	f640 228b 	movw	r2, #2699	; 0xa8b
    ccf2:	4291      	cmp	r1, r2
    ccf4:	bf28      	it	cs
    ccf6:	4611      	movcs	r1, r2
    ccf8:	2200      	movs	r2, #0
{
    ccfa:	b530      	push	{r4, r5, lr}
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    ccfc:	461c      	mov	r4, r3
    ccfe:	4865      	ldr	r0, [pc, #404]	; (ce94 <cmd_send+0x1ac>)
{
    cd00:	b087      	sub	sp, #28
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    cd02:	545a      	strb	r2, [r3, r1]
static inline bool slm_at_cmd_cmp(const char *cmd,
				const char *slm_cmd,
				u8_t length)
{
	for (int i = 0; i < length; i++) {
		if (toupper(*(cmd + i)) != *(slm_cmd + i)) {
    cd04:	f814 1b01 	ldrb.w	r1, [r4], #1
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
}

static inline int toupper(int chr)
{
	return (int)((chr >= (int)'a' && chr <=
    cd08:	f1a1 0561 	sub.w	r5, r1, #97	; 0x61
    cd0c:	2d19      	cmp	r5, #25
    cd0e:	f810 5b01 	ldrb.w	r5, [r0], #1
    cd12:	bf98      	it	ls
    cd14:	3920      	subls	r1, #32
    cd16:	428d      	cmp	r5, r1
    cd18:	d105      	bne.n	cd26 <cmd_send+0x3e>
	for (int i = 0; i < length; i++) {
    cd1a:	3201      	adds	r2, #1
    cd1c:	2a0a      	cmp	r2, #10
    cd1e:	d1f1      	bne.n	cd04 <cmd_send+0x1c>
		write_uart_string(SLM_VERSION, sizeof(SLM_VERSION));
    cd20:	2110      	movs	r1, #16
    cd22:	485d      	ldr	r0, [pc, #372]	; (ce98 <cmd_send+0x1b0>)
    cd24:	e079      	b.n	ce1a <cmd_send+0x132>
    cd26:	2100      	movs	r1, #0
    cd28:	485c      	ldr	r0, [pc, #368]	; (ce9c <cmd_send+0x1b4>)
		if (toupper(*(cmd + i)) != *(slm_cmd + i)) {
    cd2a:	f813 2b01 	ldrb.w	r2, [r3], #1
    cd2e:	f1a2 0461 	sub.w	r4, r2, #97	; 0x61
    cd32:	2c19      	cmp	r4, #25
    cd34:	f810 4b01 	ldrb.w	r4, [r0], #1
    cd38:	bf98      	it	ls
    cd3a:	3a20      	subls	r2, #32
    cd3c:	4294      	cmp	r4, r2
    cd3e:	d17a      	bne.n	ce36 <cmd_send+0x14e>
	for (int i = 0; i < length; i++) {
    cd40:	3101      	adds	r1, #1
    cd42:	2909      	cmp	r1, #9
    cd44:	d1f1      	bne.n	cd2a <cmd_send+0x42>
	ret = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    cd46:	4a56      	ldr	r2, [pc, #344]	; (cea0 <cmd_send+0x1b8>)
    cd48:	2100      	movs	r1, #0
    cd4a:	4851      	ldr	r0, [pc, #324]	; (ce90 <cmd_send+0x1a8>)
    cd4c:	f011 fc78 	bl	1e640 <at_parser_params_from_str>
	if (ret < 0) {
    cd50:	1e04      	subs	r4, r0, #0
    cd52:	da18      	bge.n	cd86 <cmd_send+0x9e>
		LOG_ERR("Failed to parse AT command %d", ret);
    cd54:	2301      	movs	r3, #1
    cd56:	f04f 0200 	mov.w	r2, #0
    cd5a:	4952      	ldr	r1, [pc, #328]	; (cea4 <cmd_send+0x1bc>)
    cd5c:	f363 0207 	bfi	r2, r3, #0, #8
    cd60:	4b51      	ldr	r3, [pc, #324]	; (cea8 <cmd_send+0x1c0>)
    cd62:	4852      	ldr	r0, [pc, #328]	; (ceac <cmd_send+0x1c4>)
    cd64:	1a5b      	subs	r3, r3, r1
    cd66:	08db      	lsrs	r3, r3, #3
    cd68:	f363 128f 	bfi	r2, r3, #6, #10
    cd6c:	4621      	mov	r1, r4
    cd6e:	f00f ff19 	bl	1cba4 <log_1>
		write_uart_string(ERROR_STR, sizeof(ERROR_STR));
    cd72:	2108      	movs	r1, #8
    cd74:	484e      	ldr	r0, [pc, #312]	; (ceb0 <cmd_send+0x1c8>)
		write_uart_string(str, ++chars);
    cd76:	f7ff fddf 	bl	c938 <write_uart_string>
	uart_irq_rx_enable(uart_dev);
    cd7a:	4b4e      	ldr	r3, [pc, #312]	; (ceb4 <cmd_send+0x1cc>)
    cd7c:	6818      	ldr	r0, [r3, #0]
    cd7e:	f00f fb4d 	bl	1c41c <uart_irq_rx_enable>
}
    cd82:	b007      	add	sp, #28
    cd84:	bd30      	pop	{r4, r5, pc}
	type = at_parser_cmd_type_get(at_cmd);
    cd86:	4842      	ldr	r0, [pc, #264]	; (ce90 <cmd_send+0x1a8>)
    cd88:	f011 fc5d 	bl	1e646 <at_parser_cmd_type_get>
	if (type == AT_CMD_TYPE_SET_COMMAND) {
    cd8c:	2801      	cmp	r0, #1
	type = at_parser_cmd_type_get(at_cmd);
    cd8e:	4605      	mov	r5, r0
	if (type == AT_CMD_TYPE_SET_COMMAND) {
    cd90:	d12c      	bne.n	cdec <cmd_send+0x104>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    cd92:	4843      	ldr	r0, [pc, #268]	; (cea0 <cmd_send+0x1b8>)
    cd94:	f011 fd83 	bl	1e89e <at_params_valid_count_get>
    cd98:	2801      	cmp	r0, #1
    cd9a:	d80e      	bhi.n	cdba <cmd_send+0xd2>
			LOG_ERR("AT parameter error");
    cd9c:	2301      	movs	r3, #1
    cd9e:	f04f 0100 	mov.w	r1, #0
    cda2:	4a40      	ldr	r2, [pc, #256]	; (cea4 <cmd_send+0x1bc>)
    cda4:	f363 0107 	bfi	r1, r3, #0, #8
    cda8:	4b3f      	ldr	r3, [pc, #252]	; (cea8 <cmd_send+0x1c0>)
    cdaa:	4843      	ldr	r0, [pc, #268]	; (ceb8 <cmd_send+0x1d0>)
    cdac:	1a9b      	subs	r3, r3, r2
    cdae:	08db      	lsrs	r3, r3, #3
    cdb0:	f363 118f 	bfi	r1, r3, #6, #10
    cdb4:	f00f fee9 	bl	1cb8a <log_0>
		if (err == 0) {
    cdb8:	e7db      	b.n	cd72 <cmd_send+0x8a>
		ret = at_params_short_get(&m_param_list, 1, &shutdown_mode);
    cdba:	aa02      	add	r2, sp, #8
    cdbc:	4629      	mov	r1, r5
    cdbe:	4838      	ldr	r0, [pc, #224]	; (cea0 <cmd_send+0x1b8>)
    cdc0:	f011 fd38 	bl	1e834 <at_params_short_get>
		if (ret < 0) {
    cdc4:	2800      	cmp	r0, #0
    cdc6:	dbe9      	blt.n	cd9c <cmd_send+0xb4>
		switch (shutdown_mode) {
    cdc8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    cdcc:	2b00      	cmp	r3, #0
    cdce:	d0e5      	beq.n	cd9c <cmd_send+0xb4>
    cdd0:	2b02      	cmp	r3, #2
    cdd2:	d908      	bls.n	cde6 <cmd_send+0xfe>
    cdd4:	2b03      	cmp	r3, #3
    cdd6:	d1e1      	bne.n	cd9c <cmd_send+0xb4>
			enter_sleep(shutdown_mode);
    cdd8:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    cddc:	f00f fb02 	bl	1c3e4 <enter_sleep>
		write_uart_string(OK_STR, sizeof(OK_STR));
    cde0:	2105      	movs	r1, #5
    cde2:	4836      	ldr	r0, [pc, #216]	; (cebc <cmd_send+0x1d4>)
    cde4:	e7c7      	b.n	cd76 <cmd_send+0x8e>
			slm_at_host_uninit();
    cde6:	f7ff ff37 	bl	cc58 <slm_at_host_uninit>
    cdea:	e7f5      	b.n	cdd8 <cmd_send+0xf0>
		if (err == 0) {
    cdec:	2c00      	cmp	r4, #0
    cdee:	d1c0      	bne.n	cd72 <cmd_send+0x8a>
    cdf0:	e7f6      	b.n	cde0 <cmd_send+0xf8>
	switch (state) {
    cdf2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cdf6:	2b03      	cmp	r3, #3
    cdf8:	d8bf      	bhi.n	cd7a <cmd_send+0x92>
    cdfa:	a201      	add	r2, pc, #4	; (adr r2, ce00 <cmd_send+0x118>)
    cdfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ce00:	0000ce11 	.word	0x0000ce11
    ce04:	0000cd73 	.word	0x0000cd73
    ce08:	0000ce21 	.word	0x0000ce21
    ce0c:	0000ce31 	.word	0x0000ce31
		write_uart_string(buf, strlen(buf));
    ce10:	482b      	ldr	r0, [pc, #172]	; (cec0 <cmd_send+0x1d8>)
    ce12:	f010 fbf5 	bl	1d600 <strlen>
    ce16:	4601      	mov	r1, r0
    ce18:	4829      	ldr	r0, [pc, #164]	; (cec0 <cmd_send+0x1d8>)
		write_uart_string(SLM_VERSION, sizeof(SLM_VERSION));
    ce1a:	f7ff fd8d 	bl	c938 <write_uart_string>
    ce1e:	e7df      	b.n	cde0 <cmd_send+0xf8>
		chars = sprintf(str, "+CMS: %d\r\n", err);
    ce20:	460a      	mov	r2, r1
    ce22:	4928      	ldr	r1, [pc, #160]	; (cec4 <cmd_send+0x1dc>)
		chars = sprintf(str, "+CME: %d\r\n", err);
    ce24:	a802      	add	r0, sp, #8
    ce26:	f004 f8a7 	bl	10f78 <sprintf>
		write_uart_string(str, ++chars);
    ce2a:	1c41      	adds	r1, r0, #1
    ce2c:	a802      	add	r0, sp, #8
    ce2e:	e7a2      	b.n	cd76 <cmd_send+0x8e>
		chars = sprintf(str, "+CME: %d\r\n", err);
    ce30:	460a      	mov	r2, r1
    ce32:	4925      	ldr	r1, [pc, #148]	; (cec8 <cmd_send+0x1e0>)
    ce34:	e7f6      	b.n	ce24 <cmd_send+0x13c>
	err = slm_at_tcpip_parse(at_buf);
    ce36:	4816      	ldr	r0, [pc, #88]	; (ce90 <cmd_send+0x1a8>)
    ce38:	f000 fe52 	bl	dae0 <slm_at_tcpip_parse>
	if (err == 0) {
    ce3c:	2800      	cmp	r0, #0
    ce3e:	d0cf      	beq.n	cde0 <cmd_send+0xf8>
	} else if (err != -ENOTSUP) {
    ce40:	3023      	adds	r0, #35	; 0x23
    ce42:	d196      	bne.n	cd72 <cmd_send+0x8a>
	err = slm_at_gps_parse(at_buf);
    ce44:	4812      	ldr	r0, [pc, #72]	; (ce90 <cmd_send+0x1a8>)
    ce46:	f001 fd6d 	bl	e924 <slm_at_gps_parse>
	if (err == 0) {
    ce4a:	2800      	cmp	r0, #0
    ce4c:	d0c8      	beq.n	cde0 <cmd_send+0xf8>
	} else if (err != -ENOTSUP) {
    ce4e:	3023      	adds	r0, #35	; 0x23
    ce50:	d18f      	bne.n	cd72 <cmd_send+0x8a>
	err = at_cmd_write(at_buf, buf, AT_MAX_CMD_LEN, &state);
    ce52:	491b      	ldr	r1, [pc, #108]	; (cec0 <cmd_send+0x1d8>)
    ce54:	f10d 0307 	add.w	r3, sp, #7
    ce58:	f640 228c 	movw	r2, #2700	; 0xa8c
    ce5c:	480c      	ldr	r0, [pc, #48]	; (ce90 <cmd_send+0x1a8>)
    ce5e:	f005 f9b1 	bl	121c4 <at_cmd_write>
	if (err < 0) {
    ce62:	1e01      	subs	r1, r0, #0
    ce64:	dac5      	bge.n	cdf2 <cmd_send+0x10a>
		LOG_ERR("Could not send AT command to modem: %d", err);
    ce66:	2301      	movs	r3, #1
    ce68:	f04f 0200 	mov.w	r2, #0
    ce6c:	480d      	ldr	r0, [pc, #52]	; (cea4 <cmd_send+0x1bc>)
    ce6e:	f363 0207 	bfi	r2, r3, #0, #8
    ce72:	4b0d      	ldr	r3, [pc, #52]	; (cea8 <cmd_send+0x1c0>)
    ce74:	1a1b      	subs	r3, r3, r0
    ce76:	08db      	lsrs	r3, r3, #3
    ce78:	f363 128f 	bfi	r2, r3, #6, #10
    ce7c:	4813      	ldr	r0, [pc, #76]	; (cecc <cmd_send+0x1e4>)
    ce7e:	f00f fe91 	bl	1cba4 <log_1>
		state = AT_CMD_ERROR;
    ce82:	2301      	movs	r3, #1
    ce84:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (state) {
    ce88:	e773      	b.n	cd72 <cmd_send+0x8a>
    ce8a:	bf00      	nop
    ce8c:	20020118 	.word	0x20020118
    ce90:	20024e4e 	.word	0x20024e4e
    ce94:	0001f9d4 	.word	0x0001f9d4
    ce98:	0001fa64 	.word	0x0001fa64
    ce9c:	0001f9df 	.word	0x0001f9df
    cea0:	20020110 	.word	0x20020110
    cea4:	0001f390 	.word	0x0001f390
    cea8:	0001f3a0 	.word	0x0001f3a0
    ceac:	0001f9e9 	.word	0x0001f9e9
    ceb0:	0001fa1f 	.word	0x0001fa1f
    ceb4:	2002012c 	.word	0x2002012c
    ceb8:	0001fa07 	.word	0x0001fa07
    cebc:	0001fa1a 	.word	0x0001fa1a
    cec0:	200258da 	.word	0x200258da
    cec4:	0001fa4e 	.word	0x0001fa4e
    cec8:	0001fa59 	.word	0x0001fa59
    cecc:	0001fa27 	.word	0x0001fa27

0000ced0 <socket>:
static inline int socket(int family, int type, int proto)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->socket);

	return socket_ops->socket(family, type, proto);
    ced0:	4b01      	ldr	r3, [pc, #4]	; (ced8 <socket+0x8>)
    ced2:	681b      	ldr	r3, [r3, #0]
    ced4:	681b      	ldr	r3, [r3, #0]
    ced6:	4718      	bx	r3
    ced8:	20020344 	.word	0x20020344

0000cedc <close>:
static inline int close(int sock)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->close);

	return socket_ops->close(sock);
    cedc:	4b01      	ldr	r3, [pc, #4]	; (cee4 <close+0x8>)
    cede:	681b      	ldr	r3, [r3, #0]
    cee0:	685b      	ldr	r3, [r3, #4]
    cee2:	4718      	bx	r3
    cee4:	20020344 	.word	0x20020344

0000cee8 <do_socket_close>:
	LOG_DBG("Socket opened");
	return ret;
}

static int do_socket_close(int error)
{
    cee8:	b570      	push	{r4, r5, r6, lr}
	int ret = 0;

	if (client.sock > 0) {
    ceea:	4c18      	ldr	r4, [pc, #96]	; (cf4c <do_socket_close+0x64>)
{
    ceec:	4606      	mov	r6, r0
	if (client.sock > 0) {
    ceee:	6820      	ldr	r0, [r4, #0]
    cef0:	2800      	cmp	r0, #0
    cef2:	dd29      	ble.n	cf48 <do_socket_close+0x60>
		ret = close(client.sock);
    cef4:	f7ff fff2 	bl	cedc <close>
		if (ret < 0) {
    cef8:	1e05      	subs	r5, r0, #0
    cefa:	da16      	bge.n	cf2a <do_socket_close+0x42>
			LOG_WRN("close() failed: %d", -errno);
    cefc:	2302      	movs	r3, #2
    cefe:	f04f 0500 	mov.w	r5, #0
    cf02:	4a13      	ldr	r2, [pc, #76]	; (cf50 <do_socket_close+0x68>)
    cf04:	f363 0507 	bfi	r5, r3, #0, #8
    cf08:	4b12      	ldr	r3, [pc, #72]	; (cf54 <do_socket_close+0x6c>)
    cf0a:	1a9b      	subs	r3, r3, r2
    cf0c:	08db      	lsrs	r3, r3, #3
    cf0e:	f363 158f 	bfi	r5, r3, #6, #10
    cf12:	f00f faa0 	bl	1c456 <z_errno>
    cf16:	6801      	ldr	r1, [r0, #0]
    cf18:	462a      	mov	r2, r5
    cf1a:	4249      	negs	r1, r1
    cf1c:	480e      	ldr	r0, [pc, #56]	; (cf58 <do_socket_close+0x70>)
    cf1e:	f00f fe41 	bl	1cba4 <log_1>
			ret = -errno;
    cf22:	f00f fa98 	bl	1c456 <z_errno>
    cf26:	6805      	ldr	r5, [r0, #0]
    cf28:	426d      	negs	r5, r5
		}
		client.sock = INVALID_SOCKET;
    cf2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cf2e:	6023      	str	r3, [r4, #0]
		client.ip_proto = IPPROTO_IP;
    cf30:	2300      	movs	r3, #0
		client.connected = false;

		sprintf(buf, "#XSOCKET: %d\r\n", error);
    cf32:	4632      	mov	r2, r6
    cf34:	4909      	ldr	r1, [pc, #36]	; (cf5c <do_socket_close+0x74>)
    cf36:	480a      	ldr	r0, [pc, #40]	; (cf60 <do_socket_close+0x78>)
		client.ip_proto = IPPROTO_IP;
    cf38:	80a3      	strh	r3, [r4, #4]
		sprintf(buf, "#XSOCKET: %d\r\n", error);
    cf3a:	f004 f81d 	bl	10f78 <sprintf>
		client.callback(buf);
    cf3e:	68a3      	ldr	r3, [r4, #8]
    cf40:	4807      	ldr	r0, [pc, #28]	; (cf60 <do_socket_close+0x78>)
    cf42:	4798      	blx	r3
		LOG_DBG("Socket closed");
	}

	return ret;
}
    cf44:	4628      	mov	r0, r5
    cf46:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
    cf48:	2500      	movs	r5, #0
	return ret;
    cf4a:	e7fb      	b.n	cf44 <do_socket_close+0x5c>
    cf4c:	20020130 	.word	0x20020130
    cf50:	0001f390 	.word	0x0001f390
    cf54:	0001f408 	.word	0x0001f408
    cf58:	0001fc31 	.word	0x0001fc31
    cf5c:	0001fc44 	.word	0x0001fc44
    cf60:	20026368 	.word	0x20026368

0000cf64 <do_socket_open>:
	if (type == SOCK_STREAM) {
    cf64:	2801      	cmp	r0, #1
{
    cf66:	b538      	push	{r3, r4, r5, lr}
    cf68:	4601      	mov	r1, r0
    cf6a:	4c21      	ldr	r4, [pc, #132]	; (cff0 <do_socket_open+0x8c>)
	if (type == SOCK_STREAM) {
    cf6c:	d12d      	bne.n	cfca <do_socket_open+0x66>
		client.sock = socket(AF_INET, SOCK_STREAM,
    cf6e:	2206      	movs	r2, #6
    cf70:	f7ff ffae 	bl	ced0 <socket>
		client.ip_proto = IPPROTO_TCP;
    cf74:	2306      	movs	r3, #6
		client.sock = socket(AF_INET, SOCK_STREAM,
    cf76:	6020      	str	r0, [r4, #0]
		client.ip_proto = IPPROTO_UDP;
    cf78:	7123      	strb	r3, [r4, #4]
	if (client.sock < 0) {
    cf7a:	6822      	ldr	r2, [r4, #0]
    cf7c:	2a00      	cmp	r2, #0
    cf7e:	da2d      	bge.n	cfdc <do_socket_open+0x78>
		LOG_ERR("socket() failed: %d", -errno);
    cf80:	2301      	movs	r3, #1
    cf82:	f04f 0500 	mov.w	r5, #0
    cf86:	4a1b      	ldr	r2, [pc, #108]	; (cff4 <do_socket_open+0x90>)
    cf88:	f363 0507 	bfi	r5, r3, #0, #8
    cf8c:	4b1a      	ldr	r3, [pc, #104]	; (cff8 <do_socket_open+0x94>)
    cf8e:	1a9b      	subs	r3, r3, r2
    cf90:	08db      	lsrs	r3, r3, #3
    cf92:	f363 158f 	bfi	r5, r3, #6, #10
    cf96:	f00f fa5e 	bl	1c456 <z_errno>
    cf9a:	6801      	ldr	r1, [r0, #0]
    cf9c:	462a      	mov	r2, r5
    cf9e:	4249      	negs	r1, r1
    cfa0:	4816      	ldr	r0, [pc, #88]	; (cffc <do_socket_open+0x98>)
    cfa2:	f00f fdff 	bl	1cba4 <log_1>
		sprintf(buf, "#XSOCKET: %d\r\n", -errno);
    cfa6:	f00f fa56 	bl	1c456 <z_errno>
    cfaa:	6802      	ldr	r2, [r0, #0]
    cfac:	4914      	ldr	r1, [pc, #80]	; (d000 <do_socket_open+0x9c>)
    cfae:	4252      	negs	r2, r2
    cfb0:	4814      	ldr	r0, [pc, #80]	; (d004 <do_socket_open+0xa0>)
    cfb2:	f003 ffe1 	bl	10f78 <sprintf>
		client.callback(buf);
    cfb6:	68a3      	ldr	r3, [r4, #8]
    cfb8:	4812      	ldr	r0, [pc, #72]	; (d004 <do_socket_open+0xa0>)
    cfba:	4798      	blx	r3
		client.ip_proto = IPPROTO_IP;
    cfbc:	2300      	movs	r3, #0
    cfbe:	7123      	strb	r3, [r4, #4]
		ret = -errno;
    cfc0:	f00f fa49 	bl	1c456 <z_errno>
    cfc4:	6800      	ldr	r0, [r0, #0]
    cfc6:	4240      	negs	r0, r0
}
    cfc8:	bd38      	pop	{r3, r4, r5, pc}
	} else if (type == SOCK_DGRAM) {
    cfca:	2802      	cmp	r0, #2
    cfcc:	d1d5      	bne.n	cf7a <do_socket_open+0x16>
		client.sock = socket(AF_INET, SOCK_DGRAM,
    cfce:	2211      	movs	r2, #17
    cfd0:	2001      	movs	r0, #1
    cfd2:	f7ff ff7d 	bl	ced0 <socket>
		client.ip_proto = IPPROTO_UDP;
    cfd6:	2311      	movs	r3, #17
		client.sock = socket(AF_INET, SOCK_DGRAM,
    cfd8:	6020      	str	r0, [r4, #0]
		client.ip_proto = IPPROTO_UDP;
    cfda:	e7cd      	b.n	cf78 <do_socket_open+0x14>
		sprintf(buf, "#XSOCKET: %d, %d\r\n", client.sock,
    cfdc:	7923      	ldrb	r3, [r4, #4]
    cfde:	490a      	ldr	r1, [pc, #40]	; (d008 <do_socket_open+0xa4>)
    cfe0:	4808      	ldr	r0, [pc, #32]	; (d004 <do_socket_open+0xa0>)
    cfe2:	f003 ffc9 	bl	10f78 <sprintf>
		client.callback(buf);
    cfe6:	4807      	ldr	r0, [pc, #28]	; (d004 <do_socket_open+0xa0>)
    cfe8:	68a3      	ldr	r3, [r4, #8]
    cfea:	4798      	blx	r3
	int ret = 0;
    cfec:	2000      	movs	r0, #0
	return ret;
    cfee:	e7eb      	b.n	cfc8 <do_socket_open+0x64>
    cff0:	20020130 	.word	0x20020130
    cff4:	0001f390 	.word	0x0001f390
    cff8:	0001f408 	.word	0x0001f408
    cffc:	0001fc53 	.word	0x0001fc53
    d000:	0001fc44 	.word	0x0001fc44
    d004:	20026368 	.word	0x20026368
    d008:	0001fc67 	.word	0x0001fc67

0000d00c <handle_at_socket>:
static int handle_at_socket(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	u16_t op;

	switch (cmd_type) {
    d00c:	2801      	cmp	r0, #1
{
    d00e:	b513      	push	{r0, r1, r4, lr}
    d010:	4604      	mov	r4, r0
	switch (cmd_type) {
    d012:	d004      	beq.n	d01e <handle_at_socket+0x12>
    d014:	2802      	cmp	r0, #2
    d016:	d050      	beq.n	d0ba <handle_at_socket+0xae>
	case AT_CMD_TYPE_SET_COMMAND:
		if (at_params_valid_count_get(&m_param_list) < 2) {
			return -EINVAL;
    d018:	f06f 0415 	mvn.w	r4, #21
    d01c:	e02e      	b.n	d07c <handle_at_socket+0x70>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    d01e:	4830      	ldr	r0, [pc, #192]	; (d0e0 <handle_at_socket+0xd4>)
    d020:	f011 fc3d 	bl	1e89e <at_params_valid_count_get>
    d024:	2801      	cmp	r0, #1
    d026:	d9f7      	bls.n	d018 <handle_at_socket+0xc>
		}
		err = at_params_short_get(&m_param_list, 1, &op);
    d028:	4621      	mov	r1, r4
    d02a:	aa01      	add	r2, sp, #4
    d02c:	482c      	ldr	r0, [pc, #176]	; (d0e0 <handle_at_socket+0xd4>)
    d02e:	f011 fc01 	bl	1e834 <at_params_short_get>
		if (err < 0) {
    d032:	1e04      	subs	r4, r0, #0
    d034:	db22      	blt.n	d07c <handle_at_socket+0x70>
			return err;
		}
		if (op == 1) {
    d036:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d03a:	2801      	cmp	r0, #1
    d03c:	d127      	bne.n	d08e <handle_at_socket+0x82>
			u16_t type;

			if (at_params_valid_count_get(&m_param_list) < 3) {
    d03e:	4828      	ldr	r0, [pc, #160]	; (d0e0 <handle_at_socket+0xd4>)
    d040:	f011 fc2d 	bl	1e89e <at_params_valid_count_get>
    d044:	2802      	cmp	r0, #2
    d046:	d9e7      	bls.n	d018 <handle_at_socket+0xc>
				return -EINVAL;
			}
			err = at_params_short_get(&m_param_list, 2, &type);
    d048:	f10d 0206 	add.w	r2, sp, #6
    d04c:	2102      	movs	r1, #2
    d04e:	4824      	ldr	r0, [pc, #144]	; (d0e0 <handle_at_socket+0xd4>)
    d050:	f011 fbf0 	bl	1e834 <at_params_short_get>
			if (err < 0) {
    d054:	1e04      	subs	r4, r0, #0
    d056:	db11      	blt.n	d07c <handle_at_socket+0x70>
				return err;
			}
			if (client.sock > 0) {
    d058:	4b22      	ldr	r3, [pc, #136]	; (d0e4 <handle_at_socket+0xd8>)
    d05a:	681b      	ldr	r3, [r3, #0]
    d05c:	2b00      	cmp	r3, #0
    d05e:	dd10      	ble.n	d082 <handle_at_socket+0x76>
				LOG_WRN("Socket is already opened");
    d060:	2302      	movs	r3, #2
    d062:	f04f 0100 	mov.w	r1, #0
    d066:	4a20      	ldr	r2, [pc, #128]	; (d0e8 <handle_at_socket+0xdc>)
    d068:	f363 0107 	bfi	r1, r3, #0, #8
    d06c:	4b1f      	ldr	r3, [pc, #124]	; (d0ec <handle_at_socket+0xe0>)
    d06e:	4820      	ldr	r0, [pc, #128]	; (d0f0 <handle_at_socket+0xe4>)
    d070:	1a9b      	subs	r3, r3, r2
    d072:	08db      	lsrs	r3, r3, #3
    d074:	f363 118f 	bfi	r1, r3, #6, #10
			} else {
				err = do_socket_open(type);
			}
		} else if (op == 0) {
			if (client.sock < 0) {
				LOG_WRN("Socket is not opened yet");
    d078:	f00f fd87 	bl	1cb8a <log_0>
	default:
		break;
	}

	return err;
}
    d07c:	4620      	mov	r0, r4
    d07e:	b002      	add	sp, #8
    d080:	bd10      	pop	{r4, pc}
				err = do_socket_open(type);
    d082:	f89d 0006 	ldrb.w	r0, [sp, #6]
    d086:	f7ff ff6d 	bl	cf64 <do_socket_open>
				err = do_socket_close(0);
    d08a:	4604      	mov	r4, r0
    d08c:	e7f6      	b.n	d07c <handle_at_socket+0x70>
		} else if (op == 0) {
    d08e:	2800      	cmp	r0, #0
    d090:	d1f4      	bne.n	d07c <handle_at_socket+0x70>
			if (client.sock < 0) {
    d092:	4b14      	ldr	r3, [pc, #80]	; (d0e4 <handle_at_socket+0xd8>)
    d094:	681b      	ldr	r3, [r3, #0]
    d096:	2b00      	cmp	r3, #0
    d098:	da0c      	bge.n	d0b4 <handle_at_socket+0xa8>
				LOG_WRN("Socket is not opened yet");
    d09a:	2302      	movs	r3, #2
    d09c:	f04f 0100 	mov.w	r1, #0
    d0a0:	4a11      	ldr	r2, [pc, #68]	; (d0e8 <handle_at_socket+0xdc>)
    d0a2:	f363 0107 	bfi	r1, r3, #0, #8
    d0a6:	4b11      	ldr	r3, [pc, #68]	; (d0ec <handle_at_socket+0xe0>)
    d0a8:	4812      	ldr	r0, [pc, #72]	; (d0f4 <handle_at_socket+0xe8>)
    d0aa:	1a9b      	subs	r3, r3, r2
    d0ac:	08db      	lsrs	r3, r3, #3
    d0ae:	f363 118f 	bfi	r1, r3, #6, #10
    d0b2:	e7e1      	b.n	d078 <handle_at_socket+0x6c>
				err = do_socket_close(0);
    d0b4:	f7ff ff18 	bl	cee8 <do_socket_close>
    d0b8:	e7e7      	b.n	d08a <handle_at_socket+0x7e>
		if (client.sock != INVALID_SOCKET) {
    d0ba:	4c0a      	ldr	r4, [pc, #40]	; (d0e4 <handle_at_socket+0xd8>)
    d0bc:	6822      	ldr	r2, [r4, #0]
    d0be:	1c53      	adds	r3, r2, #1
    d0c0:	d009      	beq.n	d0d6 <handle_at_socket+0xca>
			sprintf(buf, "#XSOCKET: %d, %d\r\n", client.sock,
    d0c2:	7923      	ldrb	r3, [r4, #4]
    d0c4:	490c      	ldr	r1, [pc, #48]	; (d0f8 <handle_at_socket+0xec>)
    d0c6:	480d      	ldr	r0, [pc, #52]	; (d0fc <handle_at_socket+0xf0>)
    d0c8:	f003 ff56 	bl	10f78 <sprintf>
		client.callback(buf);
    d0cc:	68a3      	ldr	r3, [r4, #8]
    d0ce:	480b      	ldr	r0, [pc, #44]	; (d0fc <handle_at_socket+0xf0>)
    d0d0:	4798      	blx	r3
		err = 0;
    d0d2:	2400      	movs	r4, #0
		break;
    d0d4:	e7d2      	b.n	d07c <handle_at_socket+0x70>
			sprintf(buf, "#XSOCKET: 0\r\n");
    d0d6:	490a      	ldr	r1, [pc, #40]	; (d100 <handle_at_socket+0xf4>)
    d0d8:	4808      	ldr	r0, [pc, #32]	; (d0fc <handle_at_socket+0xf0>)
    d0da:	f003 ff4d 	bl	10f78 <sprintf>
    d0de:	e7f5      	b.n	d0cc <handle_at_socket+0xc0>
    d0e0:	20020110 	.word	0x20020110
    d0e4:	20020130 	.word	0x20020130
    d0e8:	0001f390 	.word	0x0001f390
    d0ec:	0001f408 	.word	0x0001f408
    d0f0:	0001fd7d 	.word	0x0001fd7d
    d0f4:	0001fd96 	.word	0x0001fd96
    d0f8:	0001fc67 	.word	0x0001fc67
    d0fc:	20026368 	.word	0x20026368
    d100:	0001fdaf 	.word	0x0001fdaf

0000d104 <send.constprop.11>:
			   int flags)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->send);

	return socket_ops->send(sock, buf, len, flags);
    d104:	4b04      	ldr	r3, [pc, #16]	; (d118 <send.constprop.11+0x14>)
static inline ssize_t send(int sock, const void *buf, size_t len,
    d106:	b410      	push	{r4}
	return socket_ops->send(sock, buf, len, flags);
    d108:	681b      	ldr	r3, [r3, #0]
    d10a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    d10c:	2300      	movs	r3, #0
    d10e:	46a4      	mov	ip, r4
}
    d110:	f85d 4b04 	ldr.w	r4, [sp], #4
	return socket_ops->send(sock, buf, len, flags);
    d114:	4760      	bx	ip
    d116:	bf00      	nop
    d118:	20020344 	.word	0x20020344

0000d11c <handle_at_tcp_send>:
 */
static int handle_at_tcp_send(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	char data[NET_IPV4_MTU];
	int size = NET_IPV4_MTU;
    d11c:	f44f 7310 	mov.w	r3, #576	; 0x240
{
    d120:	b5f0      	push	{r4, r5, r6, r7, lr}

	if (!client.connected) {
    d122:	4d2f      	ldr	r5, [pc, #188]	; (d1e0 <handle_at_tcp_send+0xc4>)
{
    d124:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
	int size = NET_IPV4_MTU;
    d128:	9301      	str	r3, [sp, #4]
	if (!client.connected) {
    d12a:	796b      	ldrb	r3, [r5, #5]
{
    d12c:	4604      	mov	r4, r0
	if (!client.connected) {
    d12e:	b993      	cbnz	r3, d156 <handle_at_tcp_send+0x3a>
		LOG_ERR("TCP not connected yet");
    d130:	2301      	movs	r3, #1
    d132:	f04f 0100 	mov.w	r1, #0
    d136:	4a2b      	ldr	r2, [pc, #172]	; (d1e4 <handle_at_tcp_send+0xc8>)
    d138:	f363 0107 	bfi	r1, r3, #0, #8
    d13c:	4b2a      	ldr	r3, [pc, #168]	; (d1e8 <handle_at_tcp_send+0xcc>)
    d13e:	482b      	ldr	r0, [pc, #172]	; (d1ec <handle_at_tcp_send+0xd0>)
    d140:	1a9b      	subs	r3, r3, r2
    d142:	08db      	lsrs	r3, r3, #3
    d144:	f363 118f 	bfi	r1, r3, #6, #10
    d148:	f00f fd1f 	bl	1cb8a <log_0>
	int err = -EINVAL;
    d14c:	f06f 0015 	mvn.w	r0, #21
	default:
		break;
	}

	return err;
}
    d150:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
    d154:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (cmd_type) {
    d156:	2801      	cmp	r0, #1
    d158:	d1f8      	bne.n	d14c <handle_at_tcp_send+0x30>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    d15a:	4825      	ldr	r0, [pc, #148]	; (d1f0 <handle_at_tcp_send+0xd4>)
    d15c:	f011 fb9f 	bl	1e89e <at_params_valid_count_get>
    d160:	2801      	cmp	r0, #1
    d162:	d9f3      	bls.n	d14c <handle_at_tcp_send+0x30>
		err = at_params_string_get(&m_param_list, 1, data, &size);
    d164:	ae02      	add	r6, sp, #8
    d166:	ab01      	add	r3, sp, #4
    d168:	4632      	mov	r2, r6
    d16a:	4621      	mov	r1, r4
    d16c:	4820      	ldr	r0, [pc, #128]	; (d1f0 <handle_at_tcp_send+0xd4>)
    d16e:	f011 fb73 	bl	1e858 <at_params_string_get>
		if (err < 0) {
    d172:	2800      	cmp	r0, #0
    d174:	dbec      	blt.n	d150 <handle_at_tcp_send+0x34>
		data[size] = '\0';
    d176:	2400      	movs	r4, #0
    d178:	9b01      	ldr	r3, [sp, #4]
	u32_t datalen = strlen(data);
    d17a:	4630      	mov	r0, r6
		data[size] = '\0';
    d17c:	54f4      	strb	r4, [r6, r3]
	u32_t datalen = strlen(data);
    d17e:	f010 fa3f 	bl	1d600 <strlen>
    d182:	4607      	mov	r7, r0
	while (offset < datalen) {
    d184:	42a7      	cmp	r7, r4
    d186:	d91f      	bls.n	d1c8 <handle_at_tcp_send+0xac>
		ret = send(client.sock, data + offset,
    d188:	1b3a      	subs	r2, r7, r4
    d18a:	1931      	adds	r1, r6, r4
    d18c:	6828      	ldr	r0, [r5, #0]
    d18e:	f7ff ffb9 	bl	d104 <send.constprop.11>
		if (ret < 0) {
    d192:	2800      	cmp	r0, #0
    d194:	da22      	bge.n	d1dc <handle_at_tcp_send+0xc0>
			do_socket_close(-errno);
    d196:	f00f f95e 	bl	1c456 <z_errno>
    d19a:	6800      	ldr	r0, [r0, #0]
			LOG_WRN("send() failed: %d", -errno);
    d19c:	f04f 0600 	mov.w	r6, #0
			do_socket_close(-errno);
    d1a0:	4240      	negs	r0, r0
    d1a2:	f7ff fea1 	bl	cee8 <do_socket_close>
			LOG_WRN("send() failed: %d", -errno);
    d1a6:	2302      	movs	r3, #2
    d1a8:	4a0e      	ldr	r2, [pc, #56]	; (d1e4 <handle_at_tcp_send+0xc8>)
    d1aa:	f363 0607 	bfi	r6, r3, #0, #8
    d1ae:	4b0e      	ldr	r3, [pc, #56]	; (d1e8 <handle_at_tcp_send+0xcc>)
    d1b0:	1a9b      	subs	r3, r3, r2
    d1b2:	08db      	lsrs	r3, r3, #3
    d1b4:	f363 168f 	bfi	r6, r3, #6, #10
    d1b8:	f00f f94d 	bl	1c456 <z_errno>
    d1bc:	6801      	ldr	r1, [r0, #0]
    d1be:	4632      	mov	r2, r6
    d1c0:	4249      	negs	r1, r1
    d1c2:	480c      	ldr	r0, [pc, #48]	; (d1f4 <handle_at_tcp_send+0xd8>)
    d1c4:	f00f fcee 	bl	1cba4 <log_1>
	sprintf(buf, "#XTCPSEND: %d\r\n", offset);
    d1c8:	4622      	mov	r2, r4
    d1ca:	490b      	ldr	r1, [pc, #44]	; (d1f8 <handle_at_tcp_send+0xdc>)
    d1cc:	480b      	ldr	r0, [pc, #44]	; (d1fc <handle_at_tcp_send+0xe0>)
    d1ce:	f003 fed3 	bl	10f78 <sprintf>
	client.callback(buf);
    d1d2:	480a      	ldr	r0, [pc, #40]	; (d1fc <handle_at_tcp_send+0xe0>)
    d1d4:	68ab      	ldr	r3, [r5, #8]
    d1d6:	4798      	blx	r3
		err = do_tcp_send(data);
    d1d8:	2000      	movs	r0, #0
		break;
    d1da:	e7b9      	b.n	d150 <handle_at_tcp_send+0x34>
		offset += ret;
    d1dc:	4404      	add	r4, r0
    d1de:	e7d1      	b.n	d184 <handle_at_tcp_send+0x68>
    d1e0:	20020130 	.word	0x20020130
    d1e4:	0001f390 	.word	0x0001f390
    d1e8:	0001f408 	.word	0x0001f408
    d1ec:	0001fe10 	.word	0x0001fe10
    d1f0:	20020110 	.word	0x20020110
    d1f4:	0001fe26 	.word	0x0001fe26
    d1f8:	0001fe38 	.word	0x0001fe38
    d1fc:	20026368 	.word	0x20026368

0000d200 <recv.constprop.13>:
	return socket_ops->recv(sock, buf, max_len, flags);
    d200:	4b04      	ldr	r3, [pc, #16]	; (d214 <recv.constprop.13+0x14>)
static inline ssize_t recv(int sock, void *buf, size_t max_len,
    d202:	b410      	push	{r4}
	return socket_ops->recv(sock, buf, max_len, flags);
    d204:	681b      	ldr	r3, [r3, #0]
    d206:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    d208:	2300      	movs	r3, #0
    d20a:	46a4      	mov	ip, r4
}
    d20c:	f85d 4b04 	ldr.w	r4, [sp], #4
	return socket_ops->recv(sock, buf, max_len, flags);
    d210:	4760      	bx	ip
    d212:	bf00      	nop
    d214:	20020344 	.word	0x20020344

0000d218 <handle_at_bind>:
{
    d218:	b530      	push	{r4, r5, lr}
	if (client.sock < 0) {
    d21a:	4d2d      	ldr	r5, [pc, #180]	; (d2d0 <handle_at_bind+0xb8>)
{
    d21c:	b085      	sub	sp, #20
	if (client.sock < 0) {
    d21e:	682b      	ldr	r3, [r5, #0]
{
    d220:	4604      	mov	r4, r0
	if (client.sock < 0) {
    d222:	2b00      	cmp	r3, #0
    d224:	da11      	bge.n	d24a <handle_at_bind+0x32>
		LOG_ERR("Socket not opened yet");
    d226:	2301      	movs	r3, #1
    d228:	f04f 0100 	mov.w	r1, #0
    d22c:	4a29      	ldr	r2, [pc, #164]	; (d2d4 <handle_at_bind+0xbc>)
    d22e:	f363 0107 	bfi	r1, r3, #0, #8
    d232:	4b29      	ldr	r3, [pc, #164]	; (d2d8 <handle_at_bind+0xc0>)
    d234:	4829      	ldr	r0, [pc, #164]	; (d2dc <handle_at_bind+0xc4>)
    d236:	1a9b      	subs	r3, r3, r2
    d238:	08db      	lsrs	r3, r3, #3
    d23a:	f363 118f 	bfi	r1, r3, #6, #10
    d23e:	f00f fca4 	bl	1cb8a <log_0>
	int err = -EINVAL;
    d242:	f06f 0015 	mvn.w	r0, #21
}
    d246:	b005      	add	sp, #20
    d248:	bd30      	pop	{r4, r5, pc}
	switch (cmd_type) {
    d24a:	2801      	cmp	r0, #1
    d24c:	d1f9      	bne.n	d242 <handle_at_bind+0x2a>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    d24e:	4824      	ldr	r0, [pc, #144]	; (d2e0 <handle_at_bind+0xc8>)
    d250:	f011 fb25 	bl	1e89e <at_params_valid_count_get>
    d254:	2801      	cmp	r0, #1
    d256:	d9f4      	bls.n	d242 <handle_at_bind+0x2a>
		err = at_params_short_get(&m_param_list, 1, &port);
    d258:	f10d 0206 	add.w	r2, sp, #6
    d25c:	4621      	mov	r1, r4
    d25e:	4820      	ldr	r0, [pc, #128]	; (d2e0 <handle_at_bind+0xc8>)
    d260:	f011 fae8 	bl	1e834 <at_params_short_get>
		if (err < 0) {
    d264:	2800      	cmp	r0, #0
    d266:	dbee      	blt.n	d246 <handle_at_bind+0x2e>
		err = do_bind(port);
    d268:	f8bd 2006 	ldrh.w	r2, [sp, #6]
	local.sin_family = AF_INET;
    d26c:	f8ad 4008 	strh.w	r4, [sp, #8]
	local.sin_port = htons(port);
    d270:	0213      	lsls	r3, r2, #8
    d272:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	local.sin_addr.s_addr = htonl(INADDR_ANY);
    d276:	2400      	movs	r4, #0
	return socket_ops->bind(sock, addr, addrlen);
    d278:	2208      	movs	r2, #8
	local.sin_port = htons(port);
    d27a:	f8ad 300a 	strh.w	r3, [sp, #10]
    d27e:	4b19      	ldr	r3, [pc, #100]	; (d2e4 <handle_at_bind+0xcc>)
	local.sin_addr.s_addr = htonl(INADDR_ANY);
    d280:	9403      	str	r4, [sp, #12]
    d282:	681b      	ldr	r3, [r3, #0]
    d284:	eb0d 0102 	add.w	r1, sp, r2
    d288:	68db      	ldr	r3, [r3, #12]
    d28a:	6828      	ldr	r0, [r5, #0]
    d28c:	4798      	blx	r3
	if (ret < 0) {
    d28e:	42a0      	cmp	r0, r4
    d290:	da1b      	bge.n	d2ca <handle_at_bind+0xb2>
		LOG_ERR("bind() failed: %d", -errno);
    d292:	2301      	movs	r3, #1
    d294:	4a0f      	ldr	r2, [pc, #60]	; (d2d4 <handle_at_bind+0xbc>)
    d296:	f363 0407 	bfi	r4, r3, #0, #8
    d29a:	4b0f      	ldr	r3, [pc, #60]	; (d2d8 <handle_at_bind+0xc0>)
    d29c:	1a9b      	subs	r3, r3, r2
    d29e:	08db      	lsrs	r3, r3, #3
    d2a0:	f363 148f 	bfi	r4, r3, #6, #10
    d2a4:	f00f f8d7 	bl	1c456 <z_errno>
    d2a8:	6801      	ldr	r1, [r0, #0]
    d2aa:	4622      	mov	r2, r4
    d2ac:	4249      	negs	r1, r1
    d2ae:	480e      	ldr	r0, [pc, #56]	; (d2e8 <handle_at_bind+0xd0>)
    d2b0:	f00f fc78 	bl	1cba4 <log_1>
		do_socket_close(-errno);
    d2b4:	f00f f8cf 	bl	1c456 <z_errno>
    d2b8:	6800      	ldr	r0, [r0, #0]
    d2ba:	4240      	negs	r0, r0
    d2bc:	f7ff fe14 	bl	cee8 <do_socket_close>
		return -errno;
    d2c0:	f00f f8c9 	bl	1c456 <z_errno>
    d2c4:	6800      	ldr	r0, [r0, #0]
    d2c6:	4240      	negs	r0, r0
    d2c8:	e7bd      	b.n	d246 <handle_at_bind+0x2e>
	return 0;
    d2ca:	4620      	mov	r0, r4
		break;
    d2cc:	e7bb      	b.n	d246 <handle_at_bind+0x2e>
    d2ce:	bf00      	nop
    d2d0:	20020130 	.word	0x20020130
    d2d4:	0001f390 	.word	0x0001f390
    d2d8:	0001f408 	.word	0x0001f408
    d2dc:	0001fd55 	.word	0x0001fd55
    d2e0:	20020110 	.word	0x20020110
    d2e4:	20020344 	.word	0x20020344
    d2e8:	0001fd6b 	.word	0x0001fd6b

0000d2ec <parse_host_by_name>:
{
    d2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2f0:	4614      	mov	r4, r2
    d2f2:	4680      	mov	r8, r0
	struct addrinfo hints = {
    d2f4:	2501      	movs	r5, #1
{
    d2f6:	b08e      	sub	sp, #56	; 0x38
			      struct addrinfo **res)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);

	return socket_ops->getaddrinfo(node, service, hints, res);
    d2f8:	4f24      	ldr	r7, [pc, #144]	; (d38c <parse_host_by_name+0xa0>)
	struct addrinfo hints = {
    d2fa:	2220      	movs	r2, #32
{
    d2fc:	460e      	mov	r6, r1
	struct addrinfo hints = {
    d2fe:	a806      	add	r0, sp, #24
    d300:	2100      	movs	r1, #0
    d302:	f010 f9e2 	bl	1d6ca <memset>
    d306:	683b      	ldr	r3, [r7, #0]
    d308:	e9cd 5407 	strd	r5, r4, [sp, #28]
    d30c:	aa06      	add	r2, sp, #24
    d30e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    d310:	2100      	movs	r1, #0
    d312:	ab01      	add	r3, sp, #4
    d314:	4640      	mov	r0, r8
    d316:	47a0      	blx	r4
	if (err) {
    d318:	4604      	mov	r4, r0
    d31a:	b188      	cbz	r0, d340 <parse_host_by_name+0x54>
		LOG_ERR("ERROR: getaddrinfo failed %d", err);
    d31c:	f04f 0200 	mov.w	r2, #0
    d320:	491b      	ldr	r1, [pc, #108]	; (d390 <parse_host_by_name+0xa4>)
    d322:	4b1c      	ldr	r3, [pc, #112]	; (d394 <parse_host_by_name+0xa8>)
    d324:	f365 0207 	bfi	r2, r5, #0, #8
    d328:	1a5b      	subs	r3, r3, r1
    d32a:	08db      	lsrs	r3, r3, #3
    d32c:	4601      	mov	r1, r0
    d32e:	f363 128f 	bfi	r2, r3, #6, #10
    d332:	4819      	ldr	r0, [pc, #100]	; (d398 <parse_host_by_name+0xac>)
    d334:	f00f fc36 	bl	1cba4 <log_1>
}
    d338:	4620      	mov	r0, r4
    d33a:	b00e      	add	sp, #56	; 0x38
    d33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (result == NULL) {
    d340:	9b01      	ldr	r3, [sp, #4]
    d342:	b983      	cbnz	r3, d366 <parse_host_by_name+0x7a>
		LOG_ERR("ERROR: Address not found\n");
    d344:	2301      	movs	r3, #1
    d346:	f04f 0100 	mov.w	r1, #0
    d34a:	4a11      	ldr	r2, [pc, #68]	; (d390 <parse_host_by_name+0xa4>)
    d34c:	f363 0107 	bfi	r1, r3, #0, #8
    d350:	4b10      	ldr	r3, [pc, #64]	; (d394 <parse_host_by_name+0xa8>)
    d352:	4812      	ldr	r0, [pc, #72]	; (d39c <parse_host_by_name+0xb0>)
    d354:	1a9b      	subs	r3, r3, r2
    d356:	08db      	lsrs	r3, r3, #3
    d358:	f363 118f 	bfi	r1, r3, #6, #10
    d35c:	f00f fc15 	bl	1cb8a <log_0>
		return -ENOENT;
    d360:	f06f 0401 	mvn.w	r4, #1
    d364:	e7e8      	b.n	d338 <parse_host_by_name+0x4c>
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
    d366:	695b      	ldr	r3, [r3, #20]
	server4->sin_addr.s_addr =
    d368:	490d      	ldr	r1, [pc, #52]	; (d3a0 <parse_host_by_name+0xb4>)
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
    d36a:	685b      	ldr	r3, [r3, #4]
	server4->sin_port = htons(port);
    d36c:	ba76      	rev16	r6, r6
	server4->sin_addr.s_addr =
    d36e:	604b      	str	r3, [r1, #4]
	server4->sin_family = AF_INET;
    d370:	800d      	strh	r5, [r1, #0]
	server4->sin_port = htons(port);
    d372:	804e      	strh	r6, [r1, #2]
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
    d374:	2310      	movs	r3, #16
    d376:	aa02      	add	r2, sp, #8
    d378:	3104      	adds	r1, #4
    d37a:	4628      	mov	r0, r5
    d37c:	f003 fe3e 	bl	10ffc <z_impl_net_addr_ntop>
static inline void freeaddrinfo(struct addrinfo *res)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);

	return socket_ops->freeaddrinfo(res);
    d380:	683b      	ldr	r3, [r7, #0]
    d382:	9801      	ldr	r0, [sp, #4]
    d384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    d386:	4798      	blx	r3
    d388:	e7d6      	b.n	d338 <parse_host_by_name+0x4c>
    d38a:	bf00      	nop
    d38c:	20020344 	.word	0x20020344
    d390:	0001f390 	.word	0x0001f390
    d394:	0001f408 	.word	0x0001f408
    d398:	0001ff28 	.word	0x0001ff28
    d39c:	0001ff45 	.word	0x0001ff45
    d3a0:	20024e2c 	.word	0x20024e2c

0000d3a4 <parse_host_by_ipv4>:
{
    d3a4:	b508      	push	{r3, lr}
	address4->sin_family = AF_INET;
    d3a6:	2301      	movs	r3, #1
    d3a8:	4a06      	ldr	r2, [pc, #24]	; (d3c4 <parse_host_by_ipv4+0x20>)
	address4->sin_port = htons(port);
    d3aa:	ba49      	rev16	r1, r1
	address4->sin_family = AF_INET;
    d3ac:	8013      	strh	r3, [r2, #0]
	address4->sin_port = htons(port);
    d3ae:	8051      	strh	r1, [r2, #2]
	return z_impl_net_addr_pton(family, src, dst);
    d3b0:	4601      	mov	r1, r0
    d3b2:	3204      	adds	r2, #4
    d3b4:	4618      	mov	r0, r3
    d3b6:	f010 fa92 	bl	1d8de <z_impl_net_addr_pton>
	if ((family != AF_INET) && (family != AF_INET6)) {
		errno = EAFNOSUPPORT;
		return -1;
	}

	if (net_addr_pton(family, src, dst) == 0) {
    d3ba:	2800      	cmp	r0, #0
}
    d3bc:	bf18      	it	ne
    d3be:	f06f 0015 	mvnne.w	r0, #21
    d3c2:	bd08      	pop	{r3, pc}
    d3c4:	20024e2c 	.word	0x20024e2c

0000d3c8 <handle_at_tcp_conn>:
	int size = TCPIP_MAX_URL;
    d3c8:	2380      	movs	r3, #128	; 0x80
{
    d3ca:	b570      	push	{r4, r5, r6, lr}
    d3cc:	b0a2      	sub	sp, #136	; 0x88
	int size = TCPIP_MAX_URL;
    d3ce:	9301      	str	r3, [sp, #4]
	if (client.sock < 0) {
    d3d0:	4b4f      	ldr	r3, [pc, #316]	; (d510 <handle_at_tcp_conn+0x148>)
{
    d3d2:	4604      	mov	r4, r0
	if (client.sock < 0) {
    d3d4:	681a      	ldr	r2, [r3, #0]
    d3d6:	461e      	mov	r6, r3
    d3d8:	2a00      	cmp	r2, #0
    d3da:	da10      	bge.n	d3fe <handle_at_tcp_conn+0x36>
		LOG_ERR("Socket not opened yet");
    d3dc:	2301      	movs	r3, #1
    d3de:	f04f 0100 	mov.w	r1, #0
    d3e2:	4a4c      	ldr	r2, [pc, #304]	; (d514 <handle_at_tcp_conn+0x14c>)
    d3e4:	f363 0107 	bfi	r1, r3, #0, #8
    d3e8:	4b4b      	ldr	r3, [pc, #300]	; (d518 <handle_at_tcp_conn+0x150>)
    d3ea:	484c      	ldr	r0, [pc, #304]	; (d51c <handle_at_tcp_conn+0x154>)
    d3ec:	1a9b      	subs	r3, r3, r2
    d3ee:	08db      	lsrs	r3, r3, #3
    d3f0:	f363 118f 	bfi	r1, r3, #6, #10
    d3f4:	f00f fbc9 	bl	1cb8a <log_0>
			return -EINVAL;
    d3f8:	f06f 0415 	mvn.w	r4, #21
    d3fc:	e045      	b.n	d48a <handle_at_tcp_conn+0xc2>
	switch (cmd_type) {
    d3fe:	2801      	cmp	r0, #1
    d400:	d009      	beq.n	d416 <handle_at_tcp_conn+0x4e>
    d402:	2802      	cmp	r0, #2
    d404:	d1f8      	bne.n	d3f8 <handle_at_tcp_conn+0x30>
		if (client.connected) {
    d406:	795c      	ldrb	r4, [r3, #5]
    d408:	689a      	ldr	r2, [r3, #8]
    d40a:	2c00      	cmp	r4, #0
    d40c:	d076      	beq.n	d4fc <handle_at_tcp_conn+0x134>
			client.callback("+XTCPCONN: 1\r\n");
    d40e:	4844      	ldr	r0, [pc, #272]	; (d520 <handle_at_tcp_conn+0x158>)
    d410:	4790      	blx	r2
		err = 0;
    d412:	2400      	movs	r4, #0
    d414:	e039      	b.n	d48a <handle_at_tcp_conn+0xc2>
		if (at_params_valid_count_get(&m_param_list) < 3) {
    d416:	4843      	ldr	r0, [pc, #268]	; (d524 <handle_at_tcp_conn+0x15c>)
    d418:	f011 fa41 	bl	1e89e <at_params_valid_count_get>
    d41c:	2802      	cmp	r0, #2
    d41e:	d9eb      	bls.n	d3f8 <handle_at_tcp_conn+0x30>
		err = at_params_string_get(&m_param_list, 1, url, &size);
    d420:	4621      	mov	r1, r4
    d422:	ab01      	add	r3, sp, #4
    d424:	aa02      	add	r2, sp, #8
    d426:	483f      	ldr	r0, [pc, #252]	; (d524 <handle_at_tcp_conn+0x15c>)
    d428:	f011 fa16 	bl	1e858 <at_params_string_get>
		if (err < 0) {
    d42c:	1e04      	subs	r4, r0, #0
    d42e:	db2c      	blt.n	d48a <handle_at_tcp_conn+0xc2>
		url[size] = '\0';
    d430:	2500      	movs	r5, #0
    d432:	9b01      	ldr	r3, [sp, #4]
    d434:	aa22      	add	r2, sp, #136	; 0x88
    d436:	4413      	add	r3, r2
		err = at_params_short_get(&m_param_list, 2, &port);
    d438:	2102      	movs	r1, #2
    d43a:	f10d 0202 	add.w	r2, sp, #2
    d43e:	4839      	ldr	r0, [pc, #228]	; (d524 <handle_at_tcp_conn+0x15c>)
		url[size] = '\0';
    d440:	f803 5c80 	strb.w	r5, [r3, #-128]
		err = at_params_short_get(&m_param_list, 2, &port);
    d444:	f011 f9f6 	bl	1e834 <at_params_short_get>
		if (err < 0) {
    d448:	1e04      	subs	r4, r0, #0
    d44a:	db1e      	blt.n	d48a <handle_at_tcp_conn+0xc2>
	if (check_for_ipv4(url, strlen(url))) {
    d44c:	a802      	add	r0, sp, #8
		err = do_tcp_connect(url, port);
    d44e:	f8bd 4002 	ldrh.w	r4, [sp, #2]
	if (check_for_ipv4(url, strlen(url))) {
    d452:	f010 f8d5 	bl	1d600 <strlen>
	for (index = 0; index < length; index++) {
    d456:	462b      	mov	r3, r5
    d458:	a902      	add	r1, sp, #8
    d45a:	b2c0      	uxtb	r0, r0
    d45c:	4283      	cmp	r3, r0
    d45e:	db17      	blt.n	d490 <handle_at_tcp_conn+0xc8>
		ret = parse_host_by_ipv4(url, port);
    d460:	4621      	mov	r1, r4
    d462:	a802      	add	r0, sp, #8
    d464:	f7ff ff9e 	bl	d3a4 <parse_host_by_ipv4>
		ret = parse_host_by_name(url, port, SOCK_STREAM);
    d468:	4604      	mov	r4, r0
	if (ret) {
    d46a:	b1d4      	cbz	r4, d4a2 <handle_at_tcp_conn+0xda>
		LOG_ERR("Parse failed: %d", ret);
    d46c:	2301      	movs	r3, #1
    d46e:	f04f 0200 	mov.w	r2, #0
    d472:	4928      	ldr	r1, [pc, #160]	; (d514 <handle_at_tcp_conn+0x14c>)
    d474:	f363 0207 	bfi	r2, r3, #0, #8
    d478:	4b27      	ldr	r3, [pc, #156]	; (d518 <handle_at_tcp_conn+0x150>)
    d47a:	482b      	ldr	r0, [pc, #172]	; (d528 <handle_at_tcp_conn+0x160>)
    d47c:	1a5b      	subs	r3, r3, r1
    d47e:	08db      	lsrs	r3, r3, #3
    d480:	f363 128f 	bfi	r2, r3, #6, #10
    d484:	4621      	mov	r1, r4
    d486:	f00f fb8d 	bl	1cba4 <log_1>
}
    d48a:	4620      	mov	r0, r4
    d48c:	b022      	add	sp, #136	; 0x88
    d48e:	bd70      	pop	{r4, r5, r6, pc}
		char ch = *(address + index);
    d490:	f811 2b01 	ldrb.w	r2, [r1], #1
		if ((ch == '.') || (ch >= '0' && ch <= '9')) {
    d494:	2a2e      	cmp	r2, #46	; 0x2e
    d496:	d002      	beq.n	d49e <handle_at_tcp_conn+0xd6>
    d498:	3a30      	subs	r2, #48	; 0x30
    d49a:	2a09      	cmp	r2, #9
    d49c:	d831      	bhi.n	d502 <handle_at_tcp_conn+0x13a>
	for (index = 0; index < length; index++) {
    d49e:	3301      	adds	r3, #1
    d4a0:	e7dc      	b.n	d45c <handle_at_tcp_conn+0x94>
	return socket_ops->connect(sock, addr, addrlen);
    d4a2:	4b22      	ldr	r3, [pc, #136]	; (d52c <handle_at_tcp_conn+0x164>)
    d4a4:	2208      	movs	r2, #8
    d4a6:	681b      	ldr	r3, [r3, #0]
    d4a8:	4921      	ldr	r1, [pc, #132]	; (d530 <handle_at_tcp_conn+0x168>)
    d4aa:	695b      	ldr	r3, [r3, #20]
    d4ac:	6830      	ldr	r0, [r6, #0]
    d4ae:	4798      	blx	r3
	if (ret < 0) {
    d4b0:	2800      	cmp	r0, #0
    d4b2:	da1d      	bge.n	d4f0 <handle_at_tcp_conn+0x128>
		LOG_ERR("connect() failed: %d", -errno);
    d4b4:	2301      	movs	r3, #1
    d4b6:	f04f 0400 	mov.w	r4, #0
    d4ba:	4a16      	ldr	r2, [pc, #88]	; (d514 <handle_at_tcp_conn+0x14c>)
    d4bc:	f363 0407 	bfi	r4, r3, #0, #8
    d4c0:	4b15      	ldr	r3, [pc, #84]	; (d518 <handle_at_tcp_conn+0x150>)
    d4c2:	1a9b      	subs	r3, r3, r2
    d4c4:	08db      	lsrs	r3, r3, #3
    d4c6:	f363 148f 	bfi	r4, r3, #6, #10
    d4ca:	f00e ffc4 	bl	1c456 <z_errno>
    d4ce:	6801      	ldr	r1, [r0, #0]
    d4d0:	4622      	mov	r2, r4
    d4d2:	4249      	negs	r1, r1
    d4d4:	4817      	ldr	r0, [pc, #92]	; (d534 <handle_at_tcp_conn+0x16c>)
    d4d6:	f00f fb65 	bl	1cba4 <log_1>
		do_socket_close(-errno);
    d4da:	f00e ffbc 	bl	1c456 <z_errno>
    d4de:	6800      	ldr	r0, [r0, #0]
    d4e0:	4240      	negs	r0, r0
    d4e2:	f7ff fd01 	bl	cee8 <do_socket_close>
		return -errno;
    d4e6:	f00e ffb6 	bl	1c456 <z_errno>
    d4ea:	6804      	ldr	r4, [r0, #0]
    d4ec:	4264      	negs	r4, r4
    d4ee:	e7cc      	b.n	d48a <handle_at_tcp_conn+0xc2>
	client.connected = true;
    d4f0:	2301      	movs	r3, #1
	client.callback("#XTCPCONN: 1\r\n");
    d4f2:	4811      	ldr	r0, [pc, #68]	; (d538 <handle_at_tcp_conn+0x170>)
	client.connected = true;
    d4f4:	7173      	strb	r3, [r6, #5]
	client.callback("#XTCPCONN: 1\r\n");
    d4f6:	68b3      	ldr	r3, [r6, #8]
    d4f8:	4798      	blx	r3
	return 0;
    d4fa:	e7c6      	b.n	d48a <handle_at_tcp_conn+0xc2>
			client.callback("+XTCPCONN: 0\r\n");
    d4fc:	480f      	ldr	r0, [pc, #60]	; (d53c <handle_at_tcp_conn+0x174>)
    d4fe:	4790      	blx	r2
    d500:	e7c3      	b.n	d48a <handle_at_tcp_conn+0xc2>
		ret = parse_host_by_name(url, port, SOCK_STREAM);
    d502:	2201      	movs	r2, #1
    d504:	4621      	mov	r1, r4
    d506:	a802      	add	r0, sp, #8
    d508:	f7ff fef0 	bl	d2ec <parse_host_by_name>
    d50c:	e7ac      	b.n	d468 <handle_at_tcp_conn+0xa0>
    d50e:	bf00      	nop
    d510:	20020130 	.word	0x20020130
    d514:	0001f390 	.word	0x0001f390
    d518:	0001f408 	.word	0x0001f408
    d51c:	0001fd55 	.word	0x0001fd55
    d520:	0001fdf2 	.word	0x0001fdf2
    d524:	20020110 	.word	0x20020110
    d528:	0001fdbd 	.word	0x0001fdbd
    d52c:	20020344 	.word	0x20020344
    d530:	20024e2c 	.word	0x20024e2c
    d534:	0001fdce 	.word	0x0001fdce
    d538:	0001fde3 	.word	0x0001fde3
    d53c:	0001fe01 	.word	0x0001fe01

0000d540 <do_tcp_receive>:
	struct timeval tmo = {
    d540:	2300      	movs	r3, #0
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
    d542:	2208      	movs	r2, #8
{
    d544:	b5f0      	push	{r4, r5, r6, r7, lr}
    d546:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
	struct timeval tmo = {
    d54a:	e9cd 1302 	strd	r1, r3, [sp, #8]
    d54e:	4b3f      	ldr	r3, [pc, #252]	; (d64c <do_tcp_receive+0x10c>)
	ret = setsockopt(client.sock, SOL_SOCKET, SO_RCVTIMEO,
    d550:	4d3f      	ldr	r5, [pc, #252]	; (d650 <do_tcp_receive+0x110>)
    d552:	681b      	ldr	r3, [r3, #0]
    d554:	9200      	str	r2, [sp, #0]
    d556:	69dc      	ldr	r4, [r3, #28]
{
    d558:	4607      	mov	r7, r0
    d55a:	eb0d 0302 	add.w	r3, sp, r2
    d55e:	2101      	movs	r1, #1
    d560:	2214      	movs	r2, #20
    d562:	6828      	ldr	r0, [r5, #0]
    d564:	47a0      	blx	r4
	if (ret < 0) {
    d566:	1e04      	subs	r4, r0, #0
    d568:	da1c      	bge.n	d5a4 <do_tcp_receive+0x64>
		do_socket_close(-errno);
    d56a:	f00e ff74 	bl	1c456 <z_errno>
    d56e:	6800      	ldr	r0, [r0, #0]
		LOG_ERR("setsockopt() error: %d", -errno);
    d570:	f04f 0500 	mov.w	r5, #0
		do_socket_close(-errno);
    d574:	4240      	negs	r0, r0
    d576:	f7ff fcb7 	bl	cee8 <do_socket_close>
		LOG_ERR("setsockopt() error: %d", -errno);
    d57a:	2301      	movs	r3, #1
    d57c:	4a35      	ldr	r2, [pc, #212]	; (d654 <do_tcp_receive+0x114>)
    d57e:	f363 0507 	bfi	r5, r3, #0, #8
    d582:	4b35      	ldr	r3, [pc, #212]	; (d658 <do_tcp_receive+0x118>)
    d584:	1a9b      	subs	r3, r3, r2
    d586:	08db      	lsrs	r3, r3, #3
    d588:	f363 158f 	bfi	r5, r3, #6, #10
    d58c:	f00e ff63 	bl	1c456 <z_errno>
    d590:	6801      	ldr	r1, [r0, #0]
    d592:	462a      	mov	r2, r5
    d594:	4249      	negs	r1, r1
    d596:	4831      	ldr	r0, [pc, #196]	; (d65c <do_tcp_receive+0x11c>)
    d598:	f00f fb04 	bl	1cba4 <log_1>
}
    d59c:	4620      	mov	r0, r4
    d59e:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    d5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (length > NET_IPV4_MTU) {
    d5a4:	f5b7 7f10 	cmp.w	r7, #576	; 0x240
    d5a8:	ae04      	add	r6, sp, #16
		ret = recv(client.sock, data, NET_IPV4_MTU, 0);
    d5aa:	bf8c      	ite	hi
    d5ac:	f44f 7210 	movhi.w	r2, #576	; 0x240
		ret = recv(client.sock, data, length, 0);
    d5b0:	463a      	movls	r2, r7
    d5b2:	6828      	ldr	r0, [r5, #0]
    d5b4:	4631      	mov	r1, r6
    d5b6:	f7ff fe23 	bl	d200 <recv.constprop.13>
	if (ret < 0) {
    d5ba:	2800      	cmp	r0, #0
		ret = recv(client.sock, data, length, 0);
    d5bc:	4604      	mov	r4, r0
	if (ret < 0) {
    d5be:	da1d      	bge.n	d5fc <do_tcp_receive+0xbc>
		LOG_WRN("recv() error: %d", -errno);
    d5c0:	2302      	movs	r3, #2
    d5c2:	f04f 0400 	mov.w	r4, #0
    d5c6:	4a23      	ldr	r2, [pc, #140]	; (d654 <do_tcp_receive+0x114>)
    d5c8:	f363 0407 	bfi	r4, r3, #0, #8
    d5cc:	4b22      	ldr	r3, [pc, #136]	; (d658 <do_tcp_receive+0x118>)
    d5ce:	1a9b      	subs	r3, r3, r2
    d5d0:	08db      	lsrs	r3, r3, #3
    d5d2:	f363 148f 	bfi	r4, r3, #6, #10
    d5d6:	f00e ff3e 	bl	1c456 <z_errno>
    d5da:	6801      	ldr	r1, [r0, #0]
    d5dc:	4622      	mov	r2, r4
    d5de:	4249      	negs	r1, r1
    d5e0:	481f      	ldr	r0, [pc, #124]	; (d660 <do_tcp_receive+0x120>)
    d5e2:	f00f fadf 	bl	1cba4 <log_1>
		do_socket_close(-errno);
    d5e6:	f00e ff36 	bl	1c456 <z_errno>
    d5ea:	6800      	ldr	r0, [r0, #0]
    d5ec:	4240      	negs	r0, r0
    d5ee:	f7ff fc7b 	bl	cee8 <do_socket_close>
		ret = -errno;
    d5f2:	f00e ff30 	bl	1c456 <z_errno>
    d5f6:	6804      	ldr	r4, [r0, #0]
    d5f8:	4264      	negs	r4, r4
    d5fa:	e7cf      	b.n	d59c <do_tcp_receive+0x5c>
	} else if (ret == 0) {
    d5fc:	d111      	bne.n	d622 <do_tcp_receive+0xe2>
		LOG_WRN("recv() return 0");
    d5fe:	2302      	movs	r3, #2
    d600:	f04f 0100 	mov.w	r1, #0
    d604:	4a13      	ldr	r2, [pc, #76]	; (d654 <do_tcp_receive+0x114>)
    d606:	f363 0107 	bfi	r1, r3, #0, #8
    d60a:	4b13      	ldr	r3, [pc, #76]	; (d658 <do_tcp_receive+0x118>)
    d60c:	4815      	ldr	r0, [pc, #84]	; (d664 <do_tcp_receive+0x124>)
    d60e:	1a9b      	subs	r3, r3, r2
    d610:	08db      	lsrs	r3, r3, #3
    d612:	f363 118f 	bfi	r1, r3, #6, #10
    d616:	f00f fab8 	bl	1cb8a <log_0>
		do_socket_close(0);
    d61a:	4620      	mov	r0, r4
    d61c:	f7ff fc64 	bl	cee8 <do_socket_close>
    d620:	e7bc      	b.n	d59c <do_tcp_receive+0x5c>
		data[ret] = '\0';
    d622:	2700      	movs	r7, #0
		client.callback("#XTCPRECV: ");
    d624:	68ab      	ldr	r3, [r5, #8]
		data[ret] = '\0';
    d626:	5437      	strb	r7, [r6, r0]
		client.callback("#XTCPRECV: ");
    d628:	480f      	ldr	r0, [pc, #60]	; (d668 <do_tcp_receive+0x128>)
    d62a:	4798      	blx	r3
		client.callback(data);
    d62c:	68ab      	ldr	r3, [r5, #8]
    d62e:	4630      	mov	r0, r6
    d630:	4798      	blx	r3
		client.callback("\r\n");
    d632:	68ab      	ldr	r3, [r5, #8]
    d634:	480d      	ldr	r0, [pc, #52]	; (d66c <do_tcp_receive+0x12c>)
    d636:	4798      	blx	r3
		sprintf(buf, "#XTCPRECV: %d\r\n", ret);
    d638:	4622      	mov	r2, r4
    d63a:	490d      	ldr	r1, [pc, #52]	; (d670 <do_tcp_receive+0x130>)
    d63c:	480d      	ldr	r0, [pc, #52]	; (d674 <do_tcp_receive+0x134>)
    d63e:	f003 fc9b 	bl	10f78 <sprintf>
		client.callback(buf);
    d642:	68ab      	ldr	r3, [r5, #8]
    d644:	480b      	ldr	r0, [pc, #44]	; (d674 <do_tcp_receive+0x134>)
    d646:	4798      	blx	r3
		ret = 0;
    d648:	463c      	mov	r4, r7
    d64a:	e7a7      	b.n	d59c <do_tcp_receive+0x5c>
    d64c:	20020344 	.word	0x20020344
    d650:	20020130 	.word	0x20020130
    d654:	0001f390 	.word	0x0001f390
    d658:	0001f408 	.word	0x0001f408
    d65c:	0001fc7a 	.word	0x0001fc7a
    d660:	0001fc91 	.word	0x0001fc91
    d664:	0001fca2 	.word	0x0001fca2
    d668:	0001fcb2 	.word	0x0001fcb2
    d66c:	0001fe0d 	.word	0x0001fe0d
    d670:	0001fcbe 	.word	0x0001fcbe
    d674:	20026368 	.word	0x20026368

0000d678 <handle_at_tcp_recv>:
static int handle_at_tcp_recv(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	u16_t length, time;

	if (!client.connected) {
    d678:	4b19      	ldr	r3, [pc, #100]	; (d6e0 <handle_at_tcp_recv+0x68>)
{
    d67a:	b513      	push	{r0, r1, r4, lr}
	if (!client.connected) {
    d67c:	795b      	ldrb	r3, [r3, #5]
{
    d67e:	4604      	mov	r4, r0
	if (!client.connected) {
    d680:	b98b      	cbnz	r3, d6a6 <handle_at_tcp_recv+0x2e>
		LOG_ERR("TCP not connected yet");
    d682:	2301      	movs	r3, #1
    d684:	f04f 0100 	mov.w	r1, #0
    d688:	4a16      	ldr	r2, [pc, #88]	; (d6e4 <handle_at_tcp_recv+0x6c>)
    d68a:	f363 0107 	bfi	r1, r3, #0, #8
    d68e:	4b16      	ldr	r3, [pc, #88]	; (d6e8 <handle_at_tcp_recv+0x70>)
    d690:	4816      	ldr	r0, [pc, #88]	; (d6ec <handle_at_tcp_recv+0x74>)
    d692:	1a9b      	subs	r3, r3, r2
    d694:	08db      	lsrs	r3, r3, #3
    d696:	f363 118f 	bfi	r1, r3, #6, #10
    d69a:	f00f fa76 	bl	1cb8a <log_0>
	int err = -EINVAL;
    d69e:	f06f 0015 	mvn.w	r0, #21
	default:
		break;
	}

	return err;
}
    d6a2:	b002      	add	sp, #8
    d6a4:	bd10      	pop	{r4, pc}
	switch (cmd_type) {
    d6a6:	2801      	cmp	r0, #1
    d6a8:	d1f9      	bne.n	d69e <handle_at_tcp_recv+0x26>
		if (at_params_valid_count_get(&m_param_list) < 3) {
    d6aa:	4811      	ldr	r0, [pc, #68]	; (d6f0 <handle_at_tcp_recv+0x78>)
    d6ac:	f011 f8f7 	bl	1e89e <at_params_valid_count_get>
    d6b0:	2802      	cmp	r0, #2
    d6b2:	d9f4      	bls.n	d69e <handle_at_tcp_recv+0x26>
		err = at_params_short_get(&m_param_list, 1, &length);
    d6b4:	aa01      	add	r2, sp, #4
    d6b6:	4621      	mov	r1, r4
    d6b8:	480d      	ldr	r0, [pc, #52]	; (d6f0 <handle_at_tcp_recv+0x78>)
    d6ba:	f011 f8bb 	bl	1e834 <at_params_short_get>
		if (err < 0) {
    d6be:	2800      	cmp	r0, #0
    d6c0:	dbef      	blt.n	d6a2 <handle_at_tcp_recv+0x2a>
		err = at_params_short_get(&m_param_list, 2, &time);
    d6c2:	f10d 0206 	add.w	r2, sp, #6
    d6c6:	2102      	movs	r1, #2
    d6c8:	4809      	ldr	r0, [pc, #36]	; (d6f0 <handle_at_tcp_recv+0x78>)
    d6ca:	f011 f8b3 	bl	1e834 <at_params_short_get>
		if (err < 0) {
    d6ce:	2800      	cmp	r0, #0
    d6d0:	dbe7      	blt.n	d6a2 <handle_at_tcp_recv+0x2a>
		err = do_tcp_receive(length, time);
    d6d2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    d6d6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d6da:	f7ff ff31 	bl	d540 <do_tcp_receive>
		break;
    d6de:	e7e0      	b.n	d6a2 <handle_at_tcp_recv+0x2a>
    d6e0:	20020130 	.word	0x20020130
    d6e4:	0001f390 	.word	0x0001f390
    d6e8:	0001f408 	.word	0x0001f408
    d6ec:	0001fe10 	.word	0x0001fe10
    d6f0:	20020110 	.word	0x20020110

0000d6f4 <do_udp_init>:
{
    d6f4:	b538      	push	{r3, r4, r5, lr}
    d6f6:	4604      	mov	r4, r0
    d6f8:	460d      	mov	r5, r1
	if (check_for_ipv4(url, strlen(url))) {
    d6fa:	f00f ff81 	bl	1d600 <strlen>
	for (index = 0; index < length; index++) {
    d6fe:	2300      	movs	r3, #0
    d700:	b2c0      	uxtb	r0, r0
    d702:	4283      	cmp	r3, r0
    d704:	db16      	blt.n	d734 <do_udp_init+0x40>
		ret = parse_host_by_ipv4(url, port);
    d706:	4629      	mov	r1, r5
    d708:	4620      	mov	r0, r4
    d70a:	f7ff fe4b 	bl	d3a4 <parse_host_by_ipv4>
		ret = parse_host_by_name(url, port, SOCK_DGRAM);
    d70e:	4604      	mov	r4, r0
	if (ret) {
    d710:	b174      	cbz	r4, d730 <do_udp_init+0x3c>
		LOG_ERR("Parse failed: %d", ret);
    d712:	2301      	movs	r3, #1
    d714:	f04f 0200 	mov.w	r2, #0
    d718:	490d      	ldr	r1, [pc, #52]	; (d750 <do_udp_init+0x5c>)
    d71a:	f363 0207 	bfi	r2, r3, #0, #8
    d71e:	4b0d      	ldr	r3, [pc, #52]	; (d754 <do_udp_init+0x60>)
    d720:	480d      	ldr	r0, [pc, #52]	; (d758 <do_udp_init+0x64>)
    d722:	1a5b      	subs	r3, r3, r1
    d724:	08db      	lsrs	r3, r3, #3
    d726:	f363 128f 	bfi	r2, r3, #6, #10
    d72a:	4621      	mov	r1, r4
    d72c:	f00f fa3a 	bl	1cba4 <log_1>
}
    d730:	4620      	mov	r0, r4
    d732:	bd38      	pop	{r3, r4, r5, pc}
		char ch = *(address + index);
    d734:	5ce2      	ldrb	r2, [r4, r3]
		if ((ch == '.') || (ch >= '0' && ch <= '9')) {
    d736:	2a2e      	cmp	r2, #46	; 0x2e
    d738:	d002      	beq.n	d740 <do_udp_init+0x4c>
    d73a:	3a30      	subs	r2, #48	; 0x30
    d73c:	2a09      	cmp	r2, #9
    d73e:	d801      	bhi.n	d744 <do_udp_init+0x50>
	for (index = 0; index < length; index++) {
    d740:	3301      	adds	r3, #1
    d742:	e7de      	b.n	d702 <do_udp_init+0xe>
		ret = parse_host_by_name(url, port, SOCK_DGRAM);
    d744:	2202      	movs	r2, #2
    d746:	4629      	mov	r1, r5
    d748:	4620      	mov	r0, r4
    d74a:	f7ff fdcf 	bl	d2ec <parse_host_by_name>
    d74e:	e7de      	b.n	d70e <do_udp_init+0x1a>
    d750:	0001f390 	.word	0x0001f390
    d754:	0001f408 	.word	0x0001f408
    d758:	0001fdbd 	.word	0x0001fdbd

0000d75c <handle_at_udp_recvfrom>:
 */
static int handle_at_udp_recvfrom(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	char url[TCPIP_MAX_URL];
	int size = TCPIP_MAX_URL;
    d75c:	2380      	movs	r3, #128	; 0x80
{
    d75e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d762:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
	int size = TCPIP_MAX_URL;
    d766:	9304      	str	r3, [sp, #16]
	u16_t port, length, time;

	if (client.sock < 0) {
    d768:	4b69      	ldr	r3, [pc, #420]	; (d910 <handle_at_udp_recvfrom+0x1b4>)
{
    d76a:	4680      	mov	r8, r0
	if (client.sock < 0) {
    d76c:	681a      	ldr	r2, [r3, #0]
    d76e:	461d      	mov	r5, r3
    d770:	2a00      	cmp	r2, #0
    d772:	da14      	bge.n	d79e <handle_at_udp_recvfrom+0x42>
		LOG_ERR("Socket not opened yet");
    d774:	2301      	movs	r3, #1
    d776:	f04f 0100 	mov.w	r1, #0
    d77a:	4a66      	ldr	r2, [pc, #408]	; (d914 <handle_at_udp_recvfrom+0x1b8>)
    d77c:	f363 0107 	bfi	r1, r3, #0, #8
    d780:	4b65      	ldr	r3, [pc, #404]	; (d918 <handle_at_udp_recvfrom+0x1bc>)
    d782:	4866      	ldr	r0, [pc, #408]	; (d91c <handle_at_udp_recvfrom+0x1c0>)
    d784:	1a9b      	subs	r3, r3, r2
    d786:	08db      	lsrs	r3, r3, #3
    d788:	f363 118f 	bfi	r1, r3, #6, #10
		return err;
	} else if (client.ip_proto != IPPROTO_UDP) {
		LOG_ERR("Invalid socket");
    d78c:	f00f f9fd 	bl	1cb8a <log_0>
		return err;
    d790:	f06f 0415 	mvn.w	r4, #21
	default:
		break;
	}

	return err;
}
    d794:	4620      	mov	r0, r4
    d796:	f50d 7d38 	add.w	sp, sp, #736	; 0x2e0
    d79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (client.ip_proto != IPPROTO_UDP) {
    d79e:	791b      	ldrb	r3, [r3, #4]
    d7a0:	2b11      	cmp	r3, #17
    d7a2:	d00c      	beq.n	d7be <handle_at_udp_recvfrom+0x62>
		LOG_ERR("Invalid socket");
    d7a4:	2301      	movs	r3, #1
    d7a6:	f04f 0100 	mov.w	r1, #0
    d7aa:	4a5a      	ldr	r2, [pc, #360]	; (d914 <handle_at_udp_recvfrom+0x1b8>)
    d7ac:	f363 0107 	bfi	r1, r3, #0, #8
    d7b0:	4b59      	ldr	r3, [pc, #356]	; (d918 <handle_at_udp_recvfrom+0x1bc>)
    d7b2:	485b      	ldr	r0, [pc, #364]	; (d920 <handle_at_udp_recvfrom+0x1c4>)
    d7b4:	1a9b      	subs	r3, r3, r2
    d7b6:	08db      	lsrs	r3, r3, #3
    d7b8:	f363 118f 	bfi	r1, r3, #6, #10
    d7bc:	e7e6      	b.n	d78c <handle_at_udp_recvfrom+0x30>
	switch (cmd_type) {
    d7be:	2801      	cmp	r0, #1
    d7c0:	d1e6      	bne.n	d790 <handle_at_udp_recvfrom+0x34>
		if (at_params_valid_count_get(&m_param_list) < 5) {
    d7c2:	4858      	ldr	r0, [pc, #352]	; (d924 <handle_at_udp_recvfrom+0x1c8>)
    d7c4:	f011 f86b 	bl	1e89e <at_params_valid_count_get>
    d7c8:	2804      	cmp	r0, #4
    d7ca:	d9e1      	bls.n	d790 <handle_at_udp_recvfrom+0x34>
		err = at_params_string_get(&m_param_list, 1, url, &size);
    d7cc:	af08      	add	r7, sp, #32
    d7ce:	ab04      	add	r3, sp, #16
    d7d0:	463a      	mov	r2, r7
    d7d2:	4641      	mov	r1, r8
    d7d4:	4853      	ldr	r0, [pc, #332]	; (d924 <handle_at_udp_recvfrom+0x1c8>)
    d7d6:	f011 f83f 	bl	1e858 <at_params_string_get>
		if (err < 0) {
    d7da:	1e04      	subs	r4, r0, #0
    d7dc:	dbda      	blt.n	d794 <handle_at_udp_recvfrom+0x38>
		url[size] = '\0';
    d7de:	f04f 0a00 	mov.w	sl, #0
    d7e2:	9b04      	ldr	r3, [sp, #16]
		err = at_params_short_get(&m_param_list, 2, &port);
    d7e4:	f10d 020a 	add.w	r2, sp, #10
    d7e8:	2102      	movs	r1, #2
    d7ea:	484e      	ldr	r0, [pc, #312]	; (d924 <handle_at_udp_recvfrom+0x1c8>)
		url[size] = '\0';
    d7ec:	f807 a003 	strb.w	sl, [r7, r3]
		err = at_params_short_get(&m_param_list, 2, &port);
    d7f0:	f011 f820 	bl	1e834 <at_params_short_get>
		if (err < 0) {
    d7f4:	1e04      	subs	r4, r0, #0
    d7f6:	dbcd      	blt.n	d794 <handle_at_udp_recvfrom+0x38>
		err = at_params_short_get(&m_param_list, 3, &length);
    d7f8:	aa03      	add	r2, sp, #12
    d7fa:	2103      	movs	r1, #3
    d7fc:	4849      	ldr	r0, [pc, #292]	; (d924 <handle_at_udp_recvfrom+0x1c8>)
    d7fe:	f011 f819 	bl	1e834 <at_params_short_get>
		if (err < 0) {
    d802:	1e04      	subs	r4, r0, #0
    d804:	dbc6      	blt.n	d794 <handle_at_udp_recvfrom+0x38>
		err = at_params_short_get(&m_param_list, 4, &time);
    d806:	f10d 020e 	add.w	r2, sp, #14
    d80a:	2104      	movs	r1, #4
    d80c:	4845      	ldr	r0, [pc, #276]	; (d924 <handle_at_udp_recvfrom+0x1c8>)
    d80e:	f011 f811 	bl	1e834 <at_params_short_get>
		if (err < 0) {
    d812:	1e04      	subs	r4, r0, #0
    d814:	dbbe      	blt.n	d794 <handle_at_udp_recvfrom+0x38>
	int sockaddr_len = sizeof(struct sockaddr);
    d816:	2218      	movs	r2, #24
		err = do_udp_recvfrom(url, port, length, time);
    d818:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	int sockaddr_len = sizeof(struct sockaddr);
    d81c:	ae05      	add	r6, sp, #20
	ret = do_udp_init(url, port);
    d81e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    d822:	4638      	mov	r0, r7
		err = do_udp_recvfrom(url, port, length, time);
    d824:	f8bd 900c 	ldrh.w	r9, [sp, #12]
	int sockaddr_len = sizeof(struct sockaddr);
    d828:	6032      	str	r2, [r6, #0]
	struct timeval tmo = {
    d82a:	e9cd 3a06 	strd	r3, sl, [sp, #24]
	ret = do_udp_init(url, port);
    d82e:	f7ff ff61 	bl	d6f4 <do_udp_init>
	if (ret < 0) {
    d832:	1e04      	subs	r4, r0, #0
    d834:	dbae      	blt.n	d794 <handle_at_udp_recvfrom+0x38>
    d836:	2208      	movs	r2, #8
    d838:	4f3b      	ldr	r7, [pc, #236]	; (d928 <handle_at_udp_recvfrom+0x1cc>)
    d83a:	4641      	mov	r1, r8
    d83c:	683b      	ldr	r3, [r7, #0]
    d83e:	9200      	str	r2, [sp, #0]
    d840:	69dc      	ldr	r4, [r3, #28]
    d842:	2214      	movs	r2, #20
    d844:	ab06      	add	r3, sp, #24
    d846:	6828      	ldr	r0, [r5, #0]
    d848:	47a0      	blx	r4
	if (ret < 0) {
    d84a:	1e04      	subs	r4, r0, #0
    d84c:	da19      	bge.n	d882 <handle_at_udp_recvfrom+0x126>
		LOG_ERR("setsockopt() error: %d", -errno);
    d84e:	2301      	movs	r3, #1
    d850:	f04f 0500 	mov.w	r5, #0
    d854:	4a2f      	ldr	r2, [pc, #188]	; (d914 <handle_at_udp_recvfrom+0x1b8>)
    d856:	f363 0507 	bfi	r5, r3, #0, #8
    d85a:	4b2f      	ldr	r3, [pc, #188]	; (d918 <handle_at_udp_recvfrom+0x1bc>)
    d85c:	1a9b      	subs	r3, r3, r2
    d85e:	08db      	lsrs	r3, r3, #3
    d860:	f363 158f 	bfi	r5, r3, #6, #10
    d864:	f00e fdf7 	bl	1c456 <z_errno>
    d868:	6801      	ldr	r1, [r0, #0]
    d86a:	462a      	mov	r2, r5
    d86c:	4249      	negs	r1, r1
    d86e:	482f      	ldr	r0, [pc, #188]	; (d92c <handle_at_udp_recvfrom+0x1d0>)
    d870:	f00f f998 	bl	1cba4 <log_1>
		do_socket_close(-errno);
    d874:	f00e fdef 	bl	1c456 <z_errno>
    d878:	6800      	ldr	r0, [r0, #0]
    d87a:	4240      	negs	r0, r0
    d87c:	f7ff fb34 	bl	cee8 <do_socket_close>
		return ret;
    d880:	e788      	b.n	d794 <handle_at_udp_recvfrom+0x38>
	if (length > NET_IPV4_MTU) {
    d882:	683b      	ldr	r3, [r7, #0]
    d884:	f5b9 7f10 	cmp.w	r9, #576	; 0x240
    d888:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    d88a:	4b29      	ldr	r3, [pc, #164]	; (d930 <handle_at_udp_recvfrom+0x1d4>)
    d88c:	af28      	add	r7, sp, #160	; 0xa0
    d88e:	6828      	ldr	r0, [r5, #0]
	return socket_ops->recvfrom(sock, buf, len, flags, from, fromlen);
    d890:	bf88      	it	hi
    d892:	f44f 7210 	movhi.w	r2, #576	; 0x240
    d896:	9601      	str	r6, [sp, #4]
    d898:	9300      	str	r3, [sp, #0]
    d89a:	bf98      	it	ls
    d89c:	fa0f f289 	sxthls.w	r2, r9
    d8a0:	2300      	movs	r3, #0
    d8a2:	4639      	mov	r1, r7
    d8a4:	47a0      	blx	r4
	if (ret < 0) {
    d8a6:	2800      	cmp	r0, #0
    d8a8:	4606      	mov	r6, r0
    d8aa:	da1d      	bge.n	d8e8 <handle_at_udp_recvfrom+0x18c>
		LOG_WRN("recvfrom() error: %d", -errno);
    d8ac:	2302      	movs	r3, #2
    d8ae:	f04f 0400 	mov.w	r4, #0
    d8b2:	4a18      	ldr	r2, [pc, #96]	; (d914 <handle_at_udp_recvfrom+0x1b8>)
    d8b4:	f363 0407 	bfi	r4, r3, #0, #8
    d8b8:	4b17      	ldr	r3, [pc, #92]	; (d918 <handle_at_udp_recvfrom+0x1bc>)
    d8ba:	1a9b      	subs	r3, r3, r2
    d8bc:	08db      	lsrs	r3, r3, #3
    d8be:	f363 148f 	bfi	r4, r3, #6, #10
    d8c2:	f00e fdc8 	bl	1c456 <z_errno>
    d8c6:	6801      	ldr	r1, [r0, #0]
    d8c8:	4622      	mov	r2, r4
    d8ca:	4249      	negs	r1, r1
    d8cc:	4819      	ldr	r0, [pc, #100]	; (d934 <handle_at_udp_recvfrom+0x1d8>)
    d8ce:	f00f f969 	bl	1cba4 <log_1>
		do_socket_close(-errno);
    d8d2:	f00e fdc0 	bl	1c456 <z_errno>
    d8d6:	6800      	ldr	r0, [r0, #0]
    d8d8:	4240      	negs	r0, r0
    d8da:	f7ff fb05 	bl	cee8 <do_socket_close>
		ret = -errno;
    d8de:	f00e fdba 	bl	1c456 <z_errno>
    d8e2:	6804      	ldr	r4, [r0, #0]
    d8e4:	4264      	negs	r4, r4
    d8e6:	e755      	b.n	d794 <handle_at_udp_recvfrom+0x38>
		data[ret] = '\0';
    d8e8:	2400      	movs	r4, #0
		client.callback("#XUDPRECV: ");
    d8ea:	68ab      	ldr	r3, [r5, #8]
		data[ret] = '\0';
    d8ec:	543c      	strb	r4, [r7, r0]
		client.callback("#XUDPRECV: ");
    d8ee:	4812      	ldr	r0, [pc, #72]	; (d938 <handle_at_udp_recvfrom+0x1dc>)
    d8f0:	4798      	blx	r3
		client.callback(data);
    d8f2:	68ab      	ldr	r3, [r5, #8]
    d8f4:	4638      	mov	r0, r7
    d8f6:	4798      	blx	r3
		client.callback("\r\n");
    d8f8:	68ab      	ldr	r3, [r5, #8]
    d8fa:	4810      	ldr	r0, [pc, #64]	; (d93c <handle_at_udp_recvfrom+0x1e0>)
    d8fc:	4798      	blx	r3
		sprintf(buf, "#XUDPRECV: %d\r\n", ret);
    d8fe:	4632      	mov	r2, r6
    d900:	490f      	ldr	r1, [pc, #60]	; (d940 <handle_at_udp_recvfrom+0x1e4>)
    d902:	4810      	ldr	r0, [pc, #64]	; (d944 <handle_at_udp_recvfrom+0x1e8>)
    d904:	f003 fb38 	bl	10f78 <sprintf>
		client.callback(buf);
    d908:	68ab      	ldr	r3, [r5, #8]
    d90a:	480e      	ldr	r0, [pc, #56]	; (d944 <handle_at_udp_recvfrom+0x1e8>)
    d90c:	4798      	blx	r3
		break;
    d90e:	e741      	b.n	d794 <handle_at_udp_recvfrom+0x38>
    d910:	20020130 	.word	0x20020130
    d914:	0001f390 	.word	0x0001f390
    d918:	0001f408 	.word	0x0001f408
    d91c:	0001fd55 	.word	0x0001fd55
    d920:	0001fe48 	.word	0x0001fe48
    d924:	20020110 	.word	0x20020110
    d928:	20020344 	.word	0x20020344
    d92c:	0001fc7a 	.word	0x0001fc7a
    d930:	20024e2c 	.word	0x20024e2c
    d934:	0001fe57 	.word	0x0001fe57
    d938:	0001fe6c 	.word	0x0001fe6c
    d93c:	0001fe0d 	.word	0x0001fe0d
    d940:	0001fe78 	.word	0x0001fe78
    d944:	20026368 	.word	0x20026368

0000d948 <do_udp_sendto>:
{
    d948:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    d94c:	4604      	mov	r4, r0
	u32_t datalen = strlen(data);
    d94e:	4610      	mov	r0, r2
{
    d950:	460d      	mov	r5, r1
    d952:	4617      	mov	r7, r2
	u32_t datalen = strlen(data);
    d954:	f00f fe54 	bl	1d600 <strlen>
	ret = do_udp_init(url, port);
    d958:	4629      	mov	r1, r5
	u32_t datalen = strlen(data);
    d95a:	4606      	mov	r6, r0
	ret = do_udp_init(url, port);
    d95c:	4620      	mov	r0, r4
    d95e:	f7ff fec9 	bl	d6f4 <do_udp_init>
	if (ret < 0) {
    d962:	2800      	cmp	r0, #0
    d964:	db3c      	blt.n	d9e0 <do_udp_sendto+0x98>
	u32_t offset = 0;
    d966:	2400      	movs	r4, #0
    d968:	4d20      	ldr	r5, [pc, #128]	; (d9ec <do_udp_sendto+0xa4>)
	return socket_ops->sendto(sock, buf, len, flags, to, tolen);
    d96a:	f8df 8098 	ldr.w	r8, [pc, #152]	; da04 <do_udp_sendto+0xbc>
    d96e:	f8df 9098 	ldr.w	r9, [pc, #152]	; da08 <do_udp_sendto+0xc0>
	while (offset < datalen) {
    d972:	42a6      	cmp	r6, r4
    d974:	d809      	bhi.n	d98a <do_udp_sendto+0x42>
	sprintf(buf, "#XUDPSENDTO: %d\r\n", offset);
    d976:	4622      	mov	r2, r4
    d978:	491d      	ldr	r1, [pc, #116]	; (d9f0 <do_udp_sendto+0xa8>)
    d97a:	481e      	ldr	r0, [pc, #120]	; (d9f4 <do_udp_sendto+0xac>)
    d97c:	f003 fafc 	bl	10f78 <sprintf>
	client.callback(buf);
    d980:	481c      	ldr	r0, [pc, #112]	; (d9f4 <do_udp_sendto+0xac>)
    d982:	68ab      	ldr	r3, [r5, #8]
    d984:	4798      	blx	r3
	return 0;
    d986:	2000      	movs	r0, #0
    d988:	e02a      	b.n	d9e0 <do_udp_sendto+0x98>
    d98a:	2208      	movs	r2, #8
    d98c:	e9cd 9200 	strd	r9, r2, [sp]
    d990:	f8d8 3000 	ldr.w	r3, [r8]
    d994:	1b32      	subs	r2, r6, r4
    d996:	f8d3 a030 	ldr.w	sl, [r3, #48]	; 0x30
    d99a:	1939      	adds	r1, r7, r4
    d99c:	2300      	movs	r3, #0
    d99e:	6828      	ldr	r0, [r5, #0]
    d9a0:	47d0      	blx	sl
		if (ret <= 0) {
    d9a2:	2800      	cmp	r0, #0
    d9a4:	dc1f      	bgt.n	d9e6 <do_udp_sendto+0x9e>
			LOG_ERR("sendto() failed: %d", -errno);
    d9a6:	2301      	movs	r3, #1
    d9a8:	f04f 0400 	mov.w	r4, #0
    d9ac:	4a12      	ldr	r2, [pc, #72]	; (d9f8 <do_udp_sendto+0xb0>)
    d9ae:	f363 0407 	bfi	r4, r3, #0, #8
    d9b2:	4b12      	ldr	r3, [pc, #72]	; (d9fc <do_udp_sendto+0xb4>)
    d9b4:	1a9b      	subs	r3, r3, r2
    d9b6:	08db      	lsrs	r3, r3, #3
    d9b8:	f363 148f 	bfi	r4, r3, #6, #10
    d9bc:	f00e fd4b 	bl	1c456 <z_errno>
    d9c0:	6801      	ldr	r1, [r0, #0]
    d9c2:	4622      	mov	r2, r4
    d9c4:	4249      	negs	r1, r1
    d9c6:	480e      	ldr	r0, [pc, #56]	; (da00 <do_udp_sendto+0xb8>)
    d9c8:	f00f f8ec 	bl	1cba4 <log_1>
			do_socket_close(-errno);
    d9cc:	f00e fd43 	bl	1c456 <z_errno>
    d9d0:	6800      	ldr	r0, [r0, #0]
    d9d2:	4240      	negs	r0, r0
    d9d4:	f7ff fa88 	bl	cee8 <do_socket_close>
			return -errno;
    d9d8:	f00e fd3d 	bl	1c456 <z_errno>
    d9dc:	6800      	ldr	r0, [r0, #0]
    d9de:	4240      	negs	r0, r0
}
    d9e0:	b002      	add	sp, #8
    d9e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		offset += ret;
    d9e6:	4404      	add	r4, r0
    d9e8:	e7c3      	b.n	d972 <do_udp_sendto+0x2a>
    d9ea:	bf00      	nop
    d9ec:	20020130 	.word	0x20020130
    d9f0:	0001fce2 	.word	0x0001fce2
    d9f4:	20026368 	.word	0x20026368
    d9f8:	0001f390 	.word	0x0001f390
    d9fc:	0001f408 	.word	0x0001f408
    da00:	0001fcce 	.word	0x0001fcce
    da04:	20020344 	.word	0x20020344
    da08:	20024e2c 	.word	0x20024e2c

0000da0c <handle_at_udp_sendto>:
{
    da0c:	b570      	push	{r4, r5, r6, lr}
	if (client.sock < 0) {
    da0e:	4b2e      	ldr	r3, [pc, #184]	; (dac8 <handle_at_udp_sendto+0xbc>)
{
    da10:	f5ad 7d32 	sub.w	sp, sp, #712	; 0x2c8
	if (client.sock < 0) {
    da14:	681a      	ldr	r2, [r3, #0]
{
    da16:	4605      	mov	r5, r0
	if (client.sock < 0) {
    da18:	2a00      	cmp	r2, #0
    da1a:	da12      	bge.n	da42 <handle_at_udp_sendto+0x36>
		LOG_ERR("Socket not opened yet");
    da1c:	2301      	movs	r3, #1
    da1e:	f04f 0100 	mov.w	r1, #0
    da22:	4a2a      	ldr	r2, [pc, #168]	; (dacc <handle_at_udp_sendto+0xc0>)
    da24:	f363 0107 	bfi	r1, r3, #0, #8
    da28:	4b29      	ldr	r3, [pc, #164]	; (dad0 <handle_at_udp_sendto+0xc4>)
    da2a:	482a      	ldr	r0, [pc, #168]	; (dad4 <handle_at_udp_sendto+0xc8>)
    da2c:	1a9b      	subs	r3, r3, r2
    da2e:	08db      	lsrs	r3, r3, #3
    da30:	f363 118f 	bfi	r1, r3, #6, #10
		LOG_ERR("Invalid socket");
    da34:	f00f f8a9 	bl	1cb8a <log_0>
		return err;
    da38:	f06f 0015 	mvn.w	r0, #21
}
    da3c:	f50d 7d32 	add.w	sp, sp, #712	; 0x2c8
    da40:	bd70      	pop	{r4, r5, r6, pc}
	} else if (client.ip_proto != IPPROTO_UDP) {
    da42:	791b      	ldrb	r3, [r3, #4]
    da44:	2b11      	cmp	r3, #17
    da46:	d00c      	beq.n	da62 <handle_at_udp_sendto+0x56>
		LOG_ERR("Invalid socket");
    da48:	2301      	movs	r3, #1
    da4a:	f04f 0100 	mov.w	r1, #0
    da4e:	4a1f      	ldr	r2, [pc, #124]	; (dacc <handle_at_udp_sendto+0xc0>)
    da50:	f363 0107 	bfi	r1, r3, #0, #8
    da54:	4b1e      	ldr	r3, [pc, #120]	; (dad0 <handle_at_udp_sendto+0xc4>)
    da56:	4820      	ldr	r0, [pc, #128]	; (dad8 <handle_at_udp_sendto+0xcc>)
    da58:	1a9b      	subs	r3, r3, r2
    da5a:	08db      	lsrs	r3, r3, #3
    da5c:	f363 118f 	bfi	r1, r3, #6, #10
    da60:	e7e8      	b.n	da34 <handle_at_udp_sendto+0x28>
	switch (cmd_type) {
    da62:	2801      	cmp	r0, #1
    da64:	d1e8      	bne.n	da38 <handle_at_udp_sendto+0x2c>
		if (at_params_valid_count_get(&m_param_list) < 4) {
    da66:	481d      	ldr	r0, [pc, #116]	; (dadc <handle_at_udp_sendto+0xd0>)
    da68:	f010 ff19 	bl	1e89e <at_params_valid_count_get>
    da6c:	2803      	cmp	r0, #3
    da6e:	d9e3      	bls.n	da38 <handle_at_udp_sendto+0x2c>
		size = TCPIP_MAX_URL;
    da70:	2380      	movs	r3, #128	; 0x80
		err = at_params_string_get(&m_param_list, 1, url, &size);
    da72:	ac02      	add	r4, sp, #8
		size = TCPIP_MAX_URL;
    da74:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&m_param_list, 1, url, &size);
    da76:	4622      	mov	r2, r4
    da78:	ab01      	add	r3, sp, #4
    da7a:	4629      	mov	r1, r5
    da7c:	4817      	ldr	r0, [pc, #92]	; (dadc <handle_at_udp_sendto+0xd0>)
    da7e:	f010 feeb 	bl	1e858 <at_params_string_get>
		if (err < 0) {
    da82:	2800      	cmp	r0, #0
    da84:	dbda      	blt.n	da3c <handle_at_udp_sendto+0x30>
		url[size] = '\0';
    da86:	2600      	movs	r6, #0
    da88:	9b01      	ldr	r3, [sp, #4]
		err = at_params_short_get(&m_param_list, 2, &port);
    da8a:	f10d 0202 	add.w	r2, sp, #2
    da8e:	2102      	movs	r1, #2
    da90:	4812      	ldr	r0, [pc, #72]	; (dadc <handle_at_udp_sendto+0xd0>)
		url[size] = '\0';
    da92:	54e6      	strb	r6, [r4, r3]
		err = at_params_short_get(&m_param_list, 2, &port);
    da94:	f010 fece 	bl	1e834 <at_params_short_get>
		if (err < 0) {
    da98:	2800      	cmp	r0, #0
    da9a:	dbcf      	blt.n	da3c <handle_at_udp_sendto+0x30>
		size = NET_IPV4_MTU;
    da9c:	f44f 7310 	mov.w	r3, #576	; 0x240
		err = at_params_string_get(&m_param_list, 3, data, &size);
    daa0:	ad22      	add	r5, sp, #136	; 0x88
		size = NET_IPV4_MTU;
    daa2:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&m_param_list, 3, data, &size);
    daa4:	462a      	mov	r2, r5
    daa6:	ab01      	add	r3, sp, #4
    daa8:	2103      	movs	r1, #3
    daaa:	480c      	ldr	r0, [pc, #48]	; (dadc <handle_at_udp_sendto+0xd0>)
    daac:	f010 fed4 	bl	1e858 <at_params_string_get>
		if (err < 0) {
    dab0:	2800      	cmp	r0, #0
    dab2:	dbc3      	blt.n	da3c <handle_at_udp_sendto+0x30>
		data[size] = '\0';
    dab4:	9b01      	ldr	r3, [sp, #4]
		err = do_udp_sendto(url, port, data);
    dab6:	462a      	mov	r2, r5
    dab8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    dabc:	4620      	mov	r0, r4
		data[size] = '\0';
    dabe:	54ee      	strb	r6, [r5, r3]
		err = do_udp_sendto(url, port, data);
    dac0:	f7ff ff42 	bl	d948 <do_udp_sendto>
		break;
    dac4:	e7ba      	b.n	da3c <handle_at_udp_sendto+0x30>
    dac6:	bf00      	nop
    dac8:	20020130 	.word	0x20020130
    dacc:	0001f390 	.word	0x0001f390
    dad0:	0001f408 	.word	0x0001f408
    dad4:	0001fd55 	.word	0x0001fd55
    dad8:	0001fe48 	.word	0x0001fe48
    dadc:	20020110 	.word	0x20020110

0000dae0 <slm_at_tcpip_parse>:

/**@brief API to handle TCP/IP AT commands
 */
int slm_at_tcpip_parse(const char *at_cmd)
{
    dae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dae4:	4d20      	ldr	r5, [pc, #128]	; (db68 <slm_at_tcpip_parse+0x88>)
    dae6:	4606      	mov	r6, r0
	int ret = -ENOTSUP;
	enum at_cmd_type type;

	for (int i = 0; i < AT_TCPIP_MAX; i++) {
    dae8:	2400      	movs	r4, #0
    daea:	46a8      	mov	r8, r5
		u8_t cmd_len = strlen(m_tcpip_at_list[i].string);
    daec:	686f      	ldr	r7, [r5, #4]
    daee:	4638      	mov	r0, r7
    daf0:	f00f fd86 	bl	1d600 <strlen>
    daf4:	2300      	movs	r3, #0
    daf6:	b2c0      	uxtb	r0, r0
    daf8:	4283      	cmp	r3, r0
    dafa:	db18      	blt.n	db2e <slm_at_tcpip_parse+0x4e>

		if (slm_at_cmd_cmp(at_cmd, m_tcpip_at_list[i].string,
			cmd_len)) {
			ret = at_parser_params_from_str(at_cmd, NULL,
    dafc:	2100      	movs	r1, #0
    dafe:	4a1b      	ldr	r2, [pc, #108]	; (db6c <slm_at_tcpip_parse+0x8c>)
    db00:	4630      	mov	r0, r6
    db02:	f010 fd9d 	bl	1e640 <at_parser_params_from_str>
						&m_param_list);
			if (ret < 0) {
    db06:	1e01      	subs	r1, r0, #0
    db08:	da1c      	bge.n	db44 <slm_at_tcpip_parse+0x64>
				LOG_ERR("Failed to parse AT command %d", ret);
    db0a:	2301      	movs	r3, #1
    db0c:	f04f 0200 	mov.w	r2, #0
    db10:	4817      	ldr	r0, [pc, #92]	; (db70 <slm_at_tcpip_parse+0x90>)
    db12:	f363 0207 	bfi	r2, r3, #0, #8
    db16:	4b17      	ldr	r3, [pc, #92]	; (db74 <slm_at_tcpip_parse+0x94>)
    db18:	1a1b      	subs	r3, r3, r0
    db1a:	08db      	lsrs	r3, r3, #3
    db1c:	4816      	ldr	r0, [pc, #88]	; (db78 <slm_at_tcpip_parse+0x98>)
    db1e:	f363 128f 	bfi	r2, r3, #6, #10
    db22:	f00f f83f 	bl	1cba4 <log_1>
				return -EINVAL;
    db26:	f06f 0015 	mvn.w	r0, #21
			break;
		}
	}

	return ret;
}
    db2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (toupper(*(cmd + i)) != *(slm_cmd + i)) {
    db2e:	5cf2      	ldrb	r2, [r6, r3]
    db30:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
    db34:	2919      	cmp	r1, #25
    db36:	5cf9      	ldrb	r1, [r7, r3]
    db38:	bf98      	it	ls
    db3a:	3a20      	subls	r2, #32
    db3c:	4291      	cmp	r1, r2
    db3e:	d10b      	bne.n	db58 <slm_at_tcpip_parse+0x78>
	for (int i = 0; i < length; i++) {
    db40:	3301      	adds	r3, #1
    db42:	e7d9      	b.n	daf8 <slm_at_tcpip_parse+0x18>
			type = at_parser_cmd_type_get(at_cmd);
    db44:	4630      	mov	r0, r6
    db46:	f010 fd7e 	bl	1e646 <at_parser_cmd_type_get>
			ret = m_tcpip_at_list[i].handler(type);
    db4a:	230c      	movs	r3, #12
    db4c:	fb03 8404 	mla	r4, r3, r4, r8
    db50:	68a3      	ldr	r3, [r4, #8]
}
    db52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			ret = m_tcpip_at_list[i].handler(type);
    db56:	4718      	bx	r3
	for (int i = 0; i < AT_TCPIP_MAX; i++) {
    db58:	3401      	adds	r4, #1
    db5a:	2c07      	cmp	r4, #7
    db5c:	f105 050c 	add.w	r5, r5, #12
    db60:	d1c4      	bne.n	daec <slm_at_tcpip_parse+0xc>
	int ret = -ENOTSUP;
    db62:	f06f 0022 	mvn.w	r0, #34	; 0x22
    db66:	e7e0      	b.n	db2a <slm_at_tcpip_parse+0x4a>
    db68:	0001f448 	.word	0x0001f448
    db6c:	20020110 	.word	0x20020110
    db70:	0001f390 	.word	0x0001f390
    db74:	0001f408 	.word	0x0001f408
    db78:	0001f9e9 	.word	0x0001f9e9

0000db7c <enable_PSM>:

	return 0;
}

void enable_PSM(void)
{
    db7c:	b510      	push	{r4, lr}
    db7e:	b0a6      	sub	sp, #152	; 0x98
	int  at_sock;
	int  bytes_sent;
	int  bytes_received;
	char buffer[150] = {0};
    db80:	2296      	movs	r2, #150	; 0x96
    db82:	2100      	movs	r1, #0
    db84:	4668      	mov	r0, sp
    db86:	f00f fda0 	bl	1d6ca <memset>

	at_sock = socket(AF_LTE, 0, NPROTO_AT);
    db8a:	f240 2201 	movw	r2, #513	; 0x201
    db8e:	2100      	movs	r1, #0
    db90:	2066      	movs	r0, #102	; 0x66
    db92:	f7ff f99d 	bl	ced0 <socket>
	if (at_sock < 0) {
    db96:	1e04      	subs	r4, r0, #0
    db98:	da0d      	bge.n	dbb6 <enable_PSM+0x3a>
		LOG_ERR("Socket could not be opended.");
    db9a:	2301      	movs	r3, #1
    db9c:	f04f 0100 	mov.w	r1, #0
    dba0:	4a24      	ldr	r2, [pc, #144]	; (dc34 <enable_PSM+0xb8>)
    dba2:	f363 0107 	bfi	r1, r3, #0, #8
    dba6:	4b24      	ldr	r3, [pc, #144]	; (dc38 <enable_PSM+0xbc>)
    dba8:	4824      	ldr	r0, [pc, #144]	; (dc3c <enable_PSM+0xc0>)
    dbaa:	1a9b      	subs	r3, r3, r2
    dbac:	08db      	lsrs	r3, r3, #3
    dbae:	f363 118f 	bfi	r1, r3, #6, #10
    dbb2:	f00e ffea 	bl	1cb8a <log_0>
	}
	bytes_sent = send(at_sock, AT_CPSMS1, strlen(AT_CPSMS1), 0);
    dbb6:	4822      	ldr	r0, [pc, #136]	; (dc40 <enable_PSM+0xc4>)
    dbb8:	f00f fd22 	bl	1d600 <strlen>
    dbbc:	4920      	ldr	r1, [pc, #128]	; (dc40 <enable_PSM+0xc4>)
    dbbe:	4602      	mov	r2, r0
    dbc0:	4620      	mov	r0, r4
    dbc2:	f7ff fa9f 	bl	d104 <send.constprop.11>
	if (bytes_sent < 0) {
    dbc6:	2800      	cmp	r0, #0
    dbc8:	da10      	bge.n	dbec <enable_PSM+0x70>
		LOG_INF("CPSM send error");
    dbca:	2303      	movs	r3, #3
    dbcc:	f04f 0100 	mov.w	r1, #0
    dbd0:	4a18      	ldr	r2, [pc, #96]	; (dc34 <enable_PSM+0xb8>)
    dbd2:	f363 0107 	bfi	r1, r3, #0, #8
    dbd6:	4b18      	ldr	r3, [pc, #96]	; (dc38 <enable_PSM+0xbc>)
    dbd8:	481a      	ldr	r0, [pc, #104]	; (dc44 <enable_PSM+0xc8>)
    dbda:	1a9b      	subs	r3, r3, r2
    dbdc:	08db      	lsrs	r3, r3, #3
    dbde:	f363 118f 	bfi	r1, r3, #6, #10
    dbe2:	f00e ffd2 	bl	1cb8a <log_0>
		close(at_sock);
    dbe6:	4620      	mov	r0, r4
    dbe8:	f7ff f978 	bl	cedc <close>
	}
	do {
		bytes_received = recv(at_sock, buffer, 100, 0);
    dbec:	2264      	movs	r2, #100	; 0x64
    dbee:	4669      	mov	r1, sp
    dbf0:	4620      	mov	r0, r4
    dbf2:	f7ff fb05 	bl	d200 <recv.constprop.13>
	} while (bytes_received == 0);
    dbf6:	2800      	cmp	r0, #0
    dbf8:	d0f8      	beq.n	dbec <enable_PSM+0x70>
	if(strstr(buffer, "OK") != NULL)
    dbfa:	4913      	ldr	r1, [pc, #76]	; (dc48 <enable_PSM+0xcc>)
    dbfc:	4668      	mov	r0, sp
    dbfe:	f00f fcaa 	bl	1d556 <strstr>
    dc02:	b168      	cbz	r0, dc20 <enable_PSM+0xa4>
	{
		LOG_INF("PSM enabled!");
    dc04:	2303      	movs	r3, #3
    dc06:	f04f 0100 	mov.w	r1, #0
    dc0a:	4a0a      	ldr	r2, [pc, #40]	; (dc34 <enable_PSM+0xb8>)
    dc0c:	f363 0107 	bfi	r1, r3, #0, #8
    dc10:	4b09      	ldr	r3, [pc, #36]	; (dc38 <enable_PSM+0xbc>)
    dc12:	480e      	ldr	r0, [pc, #56]	; (dc4c <enable_PSM+0xd0>)
    dc14:	1a9b      	subs	r3, r3, r2
    dc16:	08db      	lsrs	r3, r3, #3
    dc18:	f363 118f 	bfi	r1, r3, #6, #10
    dc1c:	f00e ffb5 	bl	1cb8a <log_0>
	}
	k_sleep(K_SECONDS(3));
    dc20:	f640 30b8 	movw	r0, #3000	; 0xbb8
    dc24:	f00e fc19 	bl	1c45a <k_sleep>
	close(at_sock);
    dc28:	4620      	mov	r0, r4
    dc2a:	f7ff f957 	bl	cedc <close>
}
    dc2e:	b026      	add	sp, #152	; 0x98
    dc30:	bd10      	pop	{r4, pc}
    dc32:	bf00      	nop
    dc34:	0001f390 	.word	0x0001f390
    dc38:	0001f408 	.word	0x0001f408
    dc3c:	0001fcf4 	.word	0x0001fcf4
    dc40:	0001fd11 	.word	0x0001fd11
    dc44:	0001fd38 	.word	0x0001fd38
    dc48:	00020226 	.word	0x00020226
    dc4c:	0001fd48 	.word	0x0001fd48

0000dc50 <disable_PSM>:

void disable_PSM(void)
{
    dc50:	b510      	push	{r4, lr}
    dc52:	b0a6      	sub	sp, #152	; 0x98
	int  at_sock;
	int  bytes_sent;
	int  bytes_received;
	char buffer[150] = {0};
    dc54:	2296      	movs	r2, #150	; 0x96
    dc56:	2100      	movs	r1, #0
    dc58:	4668      	mov	r0, sp
    dc5a:	f00f fd36 	bl	1d6ca <memset>

	at_sock = socket(AF_LTE, 0, NPROTO_AT);
    dc5e:	f240 2201 	movw	r2, #513	; 0x201
    dc62:	2100      	movs	r1, #0
    dc64:	2066      	movs	r0, #102	; 0x66
    dc66:	f7ff f933 	bl	ced0 <socket>
	if (at_sock < 0) {
    dc6a:	1e04      	subs	r4, r0, #0
    dc6c:	da0d      	bge.n	dc8a <disable_PSM+0x3a>
		LOG_ERR("Socket could not be opended.");
    dc6e:	2301      	movs	r3, #1
    dc70:	f04f 0100 	mov.w	r1, #0
    dc74:	4a24      	ldr	r2, [pc, #144]	; (dd08 <disable_PSM+0xb8>)
    dc76:	f363 0107 	bfi	r1, r3, #0, #8
    dc7a:	4b24      	ldr	r3, [pc, #144]	; (dd0c <disable_PSM+0xbc>)
    dc7c:	4824      	ldr	r0, [pc, #144]	; (dd10 <disable_PSM+0xc0>)
    dc7e:	1a9b      	subs	r3, r3, r2
    dc80:	08db      	lsrs	r3, r3, #3
    dc82:	f363 118f 	bfi	r1, r3, #6, #10
    dc86:	f00e ff80 	bl	1cb8a <log_0>
	}
	bytes_sent = send(at_sock, AT_CPSMS0, strlen(AT_CPSMS0), 0);
    dc8a:	4822      	ldr	r0, [pc, #136]	; (dd14 <disable_PSM+0xc4>)
    dc8c:	f00f fcb8 	bl	1d600 <strlen>
    dc90:	4920      	ldr	r1, [pc, #128]	; (dd14 <disable_PSM+0xc4>)
    dc92:	4602      	mov	r2, r0
    dc94:	4620      	mov	r0, r4
    dc96:	f7ff fa35 	bl	d104 <send.constprop.11>
	if (bytes_sent < 0) {
    dc9a:	2800      	cmp	r0, #0
    dc9c:	da10      	bge.n	dcc0 <disable_PSM+0x70>
		LOG_INF("CPSM send error");
    dc9e:	2303      	movs	r3, #3
    dca0:	f04f 0100 	mov.w	r1, #0
    dca4:	4a18      	ldr	r2, [pc, #96]	; (dd08 <disable_PSM+0xb8>)
    dca6:	f363 0107 	bfi	r1, r3, #0, #8
    dcaa:	4b18      	ldr	r3, [pc, #96]	; (dd0c <disable_PSM+0xbc>)
    dcac:	481a      	ldr	r0, [pc, #104]	; (dd18 <disable_PSM+0xc8>)
    dcae:	1a9b      	subs	r3, r3, r2
    dcb0:	08db      	lsrs	r3, r3, #3
    dcb2:	f363 118f 	bfi	r1, r3, #6, #10
    dcb6:	f00e ff68 	bl	1cb8a <log_0>
		close(at_sock);
    dcba:	4620      	mov	r0, r4
    dcbc:	f7ff f90e 	bl	cedc <close>
	}
	do {
		bytes_received = recv(at_sock, buffer, 100, 0);
    dcc0:	2264      	movs	r2, #100	; 0x64
    dcc2:	4669      	mov	r1, sp
    dcc4:	4620      	mov	r0, r4
    dcc6:	f7ff fa9b 	bl	d200 <recv.constprop.13>
	} while (bytes_received == 0);
    dcca:	2800      	cmp	r0, #0
    dccc:	d0f8      	beq.n	dcc0 <disable_PSM+0x70>
	if(strstr(buffer, "OK") != NULL)
    dcce:	4913      	ldr	r1, [pc, #76]	; (dd1c <disable_PSM+0xcc>)
    dcd0:	4668      	mov	r0, sp
    dcd2:	f00f fc40 	bl	1d556 <strstr>
    dcd6:	b168      	cbz	r0, dcf4 <disable_PSM+0xa4>
	{
		LOG_INF("PSM disabled!");
    dcd8:	2303      	movs	r3, #3
    dcda:	f04f 0100 	mov.w	r1, #0
    dcde:	4a0a      	ldr	r2, [pc, #40]	; (dd08 <disable_PSM+0xb8>)
    dce0:	f363 0107 	bfi	r1, r3, #0, #8
    dce4:	4b09      	ldr	r3, [pc, #36]	; (dd0c <disable_PSM+0xbc>)
    dce6:	480e      	ldr	r0, [pc, #56]	; (dd20 <disable_PSM+0xd0>)
    dce8:	1a9b      	subs	r3, r3, r2
    dcea:	08db      	lsrs	r3, r3, #3
    dcec:	f363 118f 	bfi	r1, r3, #6, #10
    dcf0:	f00e ff4b 	bl	1cb8a <log_0>
	}
	k_sleep(K_SECONDS(3));
    dcf4:	f640 30b8 	movw	r0, #3000	; 0xbb8
    dcf8:	f00e fbaf 	bl	1c45a <k_sleep>
	close(at_sock);
    dcfc:	4620      	mov	r0, r4
    dcfe:	f7ff f8ed 	bl	cedc <close>
}
    dd02:	b026      	add	sp, #152	; 0x98
    dd04:	bd10      	pop	{r4, pc}
    dd06:	bf00      	nop
    dd08:	0001f390 	.word	0x0001f390
    dd0c:	0001f408 	.word	0x0001f408
    dd10:	0001fcf4 	.word	0x0001fcf4
    dd14:	0001fc18 	.word	0x0001fc18
    dd18:	0001fd38 	.word	0x0001fd38
    dd1c:	00020226 	.word	0x00020226
    dd20:	0001fc23 	.word	0x0001fc23

0000dd24 <request_nb_iot_network_stats>:


int request_nb_iot_network_stats()
{
	LOG_INF("Requesting NB-IoT network stats...");
    dd24:	2303      	movs	r3, #3
    dd26:	f04f 0100 	mov.w	r1, #0
{
    dd2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_INF("Requesting NB-IoT network stats...");
    dd2e:	f363 0107 	bfi	r1, r3, #0, #8
    dd32:	4ca6      	ldr	r4, [pc, #664]	; (dfcc <request_nb_iot_network_stats+0x2a8>)
    dd34:	4ba6      	ldr	r3, [pc, #664]	; (dfd0 <request_nb_iot_network_stats+0x2ac>)
{
    dd36:	b0a9      	sub	sp, #164	; 0xa4
	LOG_INF("Requesting NB-IoT network stats...");
    dd38:	1ae4      	subs	r4, r4, r3
    dd3a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    dd3e:	f364 118f 	bfi	r1, r4, #6, #10
    dd42:	48a4      	ldr	r0, [pc, #656]	; (dfd4 <request_nb_iot_network_stats+0x2b0>)
    dd44:	f00e ff21 	bl	1cb8a <log_0>

	int  at_sock;
	int  bytes_sent;
	int  bytes_received;
	char buffer[150] = {0};
    dd48:	2296      	movs	r2, #150	; 0x96
    dd4a:	2100      	movs	r1, #0
    dd4c:	a802      	add	r0, sp, #8
    dd4e:	f00f fcbc 	bl	1d6ca <memset>

	at_sock = socket(AF_LTE, 0, NPROTO_AT);
    dd52:	f240 2201 	movw	r2, #513	; 0x201
    dd56:	2100      	movs	r1, #0
    dd58:	2066      	movs	r0, #102	; 0x66
    dd5a:	f7ff f8b9 	bl	ced0 <socket>
	if (at_sock < 0) {
    dd5e:	1e05      	subs	r5, r0, #0
    dd60:	db16      	blt.n	dd90 <request_nb_iot_network_stats+0x6c>
		return -1;
	}

	// Get and parse current cell ID: AT+CEREG?
	bytes_sent = send(at_sock, AT_CEREG, strlen(AT_CEREG), 0);
    dd62:	489d      	ldr	r0, [pc, #628]	; (dfd8 <request_nb_iot_network_stats+0x2b4>)
    dd64:	f00f fc4c 	bl	1d600 <strlen>
    dd68:	499b      	ldr	r1, [pc, #620]	; (dfd8 <request_nb_iot_network_stats+0x2b4>)
    dd6a:	4602      	mov	r2, r0
    dd6c:	4628      	mov	r0, r5
    dd6e:	f7ff f9c9 	bl	d104 <send.constprop.11>
	if (bytes_sent < 0) {
    dd72:	2800      	cmp	r0, #0
    dd74:	da0f      	bge.n	dd96 <request_nb_iot_network_stats+0x72>
		LOG_INF("CEREG send error");
    dd76:	f04f 0100 	mov.w	r1, #0
    dd7a:	2303      	movs	r3, #3
    dd7c:	4897      	ldr	r0, [pc, #604]	; (dfdc <request_nb_iot_network_stats+0x2b8>)
    dd7e:	f363 0107 	bfi	r1, r3, #0, #8
    dd82:	f364 118f 	bfi	r1, r4, #6, #10
			neighbors[0] = '\0';
		}	
	}
	else if (strstr(buffer, "ERROR") != NULL) 
	{
		LOG_ERR("Error while getting neighbor data!");
    dd86:	f00e ff00 	bl	1cb8a <log_0>
		close(at_sock);
    dd8a:	4628      	mov	r0, r5
    dd8c:	f7ff f8a6 	bl	cedc <close>
		return -1;
    dd90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dd94:	e0f5      	b.n	df82 <request_nb_iot_network_stats+0x25e>
		bytes_received = recv(at_sock, buffer, 100, 0);
    dd96:	2264      	movs	r2, #100	; 0x64
    dd98:	a902      	add	r1, sp, #8
    dd9a:	4628      	mov	r0, r5
    dd9c:	f7ff fa30 	bl	d200 <recv.constprop.13>
	} while (bytes_received == 0);
    dda0:	2800      	cmp	r0, #0
    dda2:	d0f8      	beq.n	dd96 <request_nb_iot_network_stats+0x72>
	if(strstr(buffer, "OK") != NULL)
    dda4:	498e      	ldr	r1, [pc, #568]	; (dfe0 <request_nb_iot_network_stats+0x2bc>)
    dda6:	a802      	add	r0, sp, #8
    dda8:	f00f fbd5 	bl	1d556 <strstr>
    ddac:	b370      	cbz	r0, de0c <request_nb_iot_network_stats+0xe8>
		char* pos = strstr(buffer, "\",\"")+3;		
    ddae:	498d      	ldr	r1, [pc, #564]	; (dfe4 <request_nb_iot_network_stats+0x2c0>)
    ddb0:	a802      	add	r0, sp, #8
    ddb2:	f00f fbd0 	bl	1d556 <strstr>
    ddb6:	4a8c      	ldr	r2, [pc, #560]	; (dfe8 <request_nb_iot_network_stats+0x2c4>)
    ddb8:	1c83      	adds	r3, r0, #2
    ddba:	300a      	adds	r0, #10
			current_cell_id[i] = pos[i];
    ddbc:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		for(uint8_t i=0; i<8; i++)
    ddc0:	4298      	cmp	r0, r3
			current_cell_id[i] = pos[i];
    ddc2:	f802 1b01 	strb.w	r1, [r2], #1
		for(uint8_t i=0; i<8; i++)
    ddc6:	d1f9      	bne.n	ddbc <request_nb_iot_network_stats+0x98>
		LOG_INF("Current cell ID = %s", current_cell_id);
    ddc8:	f04f 0200 	mov.w	r2, #0
    ddcc:	2303      	movs	r3, #3
    ddce:	f363 0207 	bfi	r2, r3, #0, #8
    ddd2:	f364 128f 	bfi	r2, r4, #6, #10
    ddd6:	4984      	ldr	r1, [pc, #528]	; (dfe8 <request_nb_iot_network_stats+0x2c4>)
    ddd8:	4884      	ldr	r0, [pc, #528]	; (dfec <request_nb_iot_network_stats+0x2c8>)
    ddda:	f00e fee3 	bl	1cba4 <log_1>
	k_sleep(K_SECONDS(1));
    ddde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    dde2:	f00e fb3a 	bl	1c45a <k_sleep>
	bytes_sent = send(at_sock, AT_CESQ, strlen(AT_CESQ), 0);
    dde6:	4882      	ldr	r0, [pc, #520]	; (dff0 <request_nb_iot_network_stats+0x2cc>)
    dde8:	f00f fc0a 	bl	1d600 <strlen>
    ddec:	4980      	ldr	r1, [pc, #512]	; (dff0 <request_nb_iot_network_stats+0x2cc>)
    ddee:	4602      	mov	r2, r0
    ddf0:	4628      	mov	r0, r5
    ddf2:	f7ff f987 	bl	d104 <send.constprop.11>
	if (bytes_sent < 0) {
    ddf6:	2800      	cmp	r0, #0
    ddf8:	da17      	bge.n	de2a <request_nb_iot_network_stats+0x106>
		LOG_INF("CESQ send error");
    ddfa:	f04f 0100 	mov.w	r1, #0
    ddfe:	2303      	movs	r3, #3
    de00:	f363 0107 	bfi	r1, r3, #0, #8
    de04:	f364 118f 	bfi	r1, r4, #6, #10
    de08:	487a      	ldr	r0, [pc, #488]	; (dff4 <request_nb_iot_network_stats+0x2d0>)
    de0a:	e7bc      	b.n	dd86 <request_nb_iot_network_stats+0x62>
	else if (strstr(buffer, "ERROR") != NULL) 
    de0c:	497a      	ldr	r1, [pc, #488]	; (dff8 <request_nb_iot_network_stats+0x2d4>)
    de0e:	a802      	add	r0, sp, #8
    de10:	f00f fba1 	bl	1d556 <strstr>
    de14:	2800      	cmp	r0, #0
    de16:	d0e2      	beq.n	ddde <request_nb_iot_network_stats+0xba>
		LOG_ERR("Error while getting current cell ID!");
    de18:	f04f 0100 	mov.w	r1, #0
    de1c:	2301      	movs	r3, #1
    de1e:	f363 0107 	bfi	r1, r3, #0, #8
    de22:	f364 118f 	bfi	r1, r4, #6, #10
    de26:	4875      	ldr	r0, [pc, #468]	; (dffc <request_nb_iot_network_stats+0x2d8>)
    de28:	e7ad      	b.n	dd86 <request_nb_iot_network_stats+0x62>
		bytes_received = recv(at_sock, buffer, 100, 0);
    de2a:	2264      	movs	r2, #100	; 0x64
    de2c:	a902      	add	r1, sp, #8
    de2e:	4628      	mov	r0, r5
    de30:	f7ff f9e6 	bl	d200 <recv.constprop.13>
	} while (bytes_received == 0);
    de34:	2800      	cmp	r0, #0
    de36:	d0f8      	beq.n	de2a <request_nb_iot_network_stats+0x106>
	if(strstr(buffer, "OK") != NULL)
    de38:	4969      	ldr	r1, [pc, #420]	; (dfe0 <request_nb_iot_network_stats+0x2bc>)
    de3a:	a802      	add	r0, sp, #8
    de3c:	f00f fb8b 	bl	1d556 <strstr>
    de40:	2800      	cmp	r0, #0
    de42:	d03e      	beq.n	dec2 <request_nb_iot_network_stats+0x19e>
		char *pos1 = strrchr(buffer, ',') + 1;
    de44:	212c      	movs	r1, #44	; 0x2c
    de46:	a802      	add	r0, sp, #8
    de48:	f00f fbcd 	bl	1d5e6 <strrchr>
    de4c:	1c46      	adds	r6, r0, #1
		char *pos2 = strstr(pos1, "\n");
    de4e:	496c      	ldr	r1, [pc, #432]	; (e000 <request_nb_iot_network_stats+0x2dc>)
    de50:	4630      	mov	r0, r6
    de52:	f00f fb80 	bl	1d556 <strstr>
    de56:	4680      	mov	r8, r0
		memcpy(rsrp, pos1, strlen(pos1)-strlen(pos2));
    de58:	4630      	mov	r0, r6
    de5a:	f00f fbd1 	bl	1d600 <strlen>
    de5e:	4607      	mov	r7, r0
    de60:	4640      	mov	r0, r8
    de62:	f00f fbcd 	bl	1d600 <strlen>
    de66:	4631      	mov	r1, r6
    de68:	1a3a      	subs	r2, r7, r0
    de6a:	4668      	mov	r0, sp
    de6c:	f00f fc03 	bl	1d676 <memcpy>
		current_rsrp = (uint8_t) strtol(rsrp, &ptr, 10);
    de70:	220a      	movs	r2, #10
    de72:	a901      	add	r1, sp, #4
    de74:	4668      	mov	r0, sp
    de76:	f00f fa7f 	bl	1d378 <strtol>
    de7a:	4b62      	ldr	r3, [pc, #392]	; (e004 <request_nb_iot_network_stats+0x2e0>)
		LOG_INF("Current RSRP = %d", current_rsrp);
    de7c:	f04f 0200 	mov.w	r2, #0
		current_rsrp = (uint8_t) strtol(rsrp, &ptr, 10);
    de80:	7018      	strb	r0, [r3, #0]
		LOG_INF("Current RSRP = %d", current_rsrp);
    de82:	2303      	movs	r3, #3
    de84:	f363 0207 	bfi	r2, r3, #0, #8
    de88:	b2c1      	uxtb	r1, r0
    de8a:	f364 128f 	bfi	r2, r4, #6, #10
    de8e:	485e      	ldr	r0, [pc, #376]	; (e008 <request_nb_iot_network_stats+0x2e4>)
    de90:	f00e fe88 	bl	1cba4 <log_1>
	k_sleep(K_SECONDS(1));
    de94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    de98:	f00e fadf 	bl	1c45a <k_sleep>
	bytes_sent = send(at_sock, AT_NBRGRSRP, strlen(AT_NBRGRSRP), 0);
    de9c:	485b      	ldr	r0, [pc, #364]	; (e00c <request_nb_iot_network_stats+0x2e8>)
    de9e:	f00f fbaf 	bl	1d600 <strlen>
    dea2:	495a      	ldr	r1, [pc, #360]	; (e00c <request_nb_iot_network_stats+0x2e8>)
    dea4:	4602      	mov	r2, r0
    dea6:	4628      	mov	r0, r5
    dea8:	f7ff f92c 	bl	d104 <send.constprop.11>
	if (bytes_sent < 0) {
    deac:	2800      	cmp	r0, #0
    deae:	da17      	bge.n	dee0 <request_nb_iot_network_stats+0x1bc>
		LOG_INF("NBRGRSRP send error");
    deb0:	f04f 0100 	mov.w	r1, #0
    deb4:	2303      	movs	r3, #3
    deb6:	f363 0107 	bfi	r1, r3, #0, #8
    deba:	f364 118f 	bfi	r1, r4, #6, #10
    debe:	4854      	ldr	r0, [pc, #336]	; (e010 <request_nb_iot_network_stats+0x2ec>)
    dec0:	e761      	b.n	dd86 <request_nb_iot_network_stats+0x62>
	else if (strstr(buffer, "ERROR") != NULL) 
    dec2:	494d      	ldr	r1, [pc, #308]	; (dff8 <request_nb_iot_network_stats+0x2d4>)
    dec4:	a802      	add	r0, sp, #8
    dec6:	f00f fb46 	bl	1d556 <strstr>
    deca:	2800      	cmp	r0, #0
    decc:	d0e2      	beq.n	de94 <request_nb_iot_network_stats+0x170>
		LOG_ERR("Error while getting current RSRP!");
    dece:	f04f 0100 	mov.w	r1, #0
    ded2:	2301      	movs	r3, #1
    ded4:	f363 0107 	bfi	r1, r3, #0, #8
    ded8:	f364 118f 	bfi	r1, r4, #6, #10
    dedc:	484d      	ldr	r0, [pc, #308]	; (e014 <request_nb_iot_network_stats+0x2f0>)
    dede:	e752      	b.n	dd86 <request_nb_iot_network_stats+0x62>
		bytes_received = recv(at_sock, buffer, 150, 0);
    dee0:	2296      	movs	r2, #150	; 0x96
    dee2:	a902      	add	r1, sp, #8
    dee4:	4628      	mov	r0, r5
    dee6:	f7ff f98b 	bl	d200 <recv.constprop.13>
	} while (bytes_received == 0);
    deea:	2800      	cmp	r0, #0
    deec:	d0f8      	beq.n	dee0 <request_nb_iot_network_stats+0x1bc>
	if(strstr(buffer, "OK") != NULL)
    deee:	493c      	ldr	r1, [pc, #240]	; (dfe0 <request_nb_iot_network_stats+0x2bc>)
    def0:	a802      	add	r0, sp, #8
    def2:	f00f fb30 	bl	1d556 <strstr>
    def6:	2800      	cmp	r0, #0
    def8:	d058      	beq.n	dfac <request_nb_iot_network_stats+0x288>
		if(strstr(buffer, "NBRGRSRP") != NULL)
    defa:	4947      	ldr	r1, [pc, #284]	; (e018 <request_nb_iot_network_stats+0x2f4>)
    defc:	a802      	add	r0, sp, #8
    defe:	f00f fb2a 	bl	1d556 <strstr>
    df02:	4606      	mov	r6, r0
    df04:	2800      	cmp	r0, #0
    df06:	d044      	beq.n	df92 <request_nb_iot_network_stats+0x26e>
			char* pos1 = strstr(buffer, "\%NBRGRSRP: ") + strlen("\%NBRGRSRP: ");
    df08:	4944      	ldr	r1, [pc, #272]	; (e01c <request_nb_iot_network_stats+0x2f8>)
    df0a:	a802      	add	r0, sp, #8
    df0c:	f00f fb23 	bl	1d556 <strstr>
    df10:	4607      	mov	r7, r0
    df12:	4842      	ldr	r0, [pc, #264]	; (e01c <request_nb_iot_network_stats+0x2f8>)
    df14:	f00f fb74 	bl	1d600 <strlen>
    df18:	4407      	add	r7, r0
			char* pos2 = strstr(pos1, "\n");
    df1a:	4939      	ldr	r1, [pc, #228]	; (e000 <request_nb_iot_network_stats+0x2dc>)
    df1c:	4638      	mov	r0, r7
    df1e:	f00f fb1a 	bl	1d556 <strstr>
			for(uint8_t i=0; i<strlen(pos1)-strlen(pos2); i++)
    df22:	2600      	movs	r6, #0
			char* pos2 = strstr(pos1, "\n");
    df24:	4681      	mov	r9, r0
				neighbors[i] = pos1[i];
    df26:	f8df b0f8 	ldr.w	fp, [pc, #248]	; e020 <request_nb_iot_network_stats+0x2fc>
			for(uint8_t i=0; i<strlen(pos1)-strlen(pos2); i++)
    df2a:	4638      	mov	r0, r7
    df2c:	f00f fb68 	bl	1d600 <strlen>
    df30:	4680      	mov	r8, r0
    df32:	4648      	mov	r0, r9
    df34:	f00f fb64 	bl	1d600 <strlen>
    df38:	fa5f fa86 	uxtb.w	sl, r6
    df3c:	eba8 0000 	sub.w	r0, r8, r0
    df40:	4582      	cmp	sl, r0
    df42:	f106 0601 	add.w	r6, r6, #1
    df46:	d31f      	bcc.n	df88 <request_nb_iot_network_stats+0x264>
			LOG_INF("Neighbors = %s", neighbors);
    df48:	f04f 0200 	mov.w	r2, #0
    df4c:	2303      	movs	r3, #3
    df4e:	f363 0207 	bfi	r2, r3, #0, #8
    df52:	f364 128f 	bfi	r2, r4, #6, #10
    df56:	4932      	ldr	r1, [pc, #200]	; (e020 <request_nb_iot_network_stats+0x2fc>)
    df58:	4832      	ldr	r0, [pc, #200]	; (e024 <request_nb_iot_network_stats+0x300>)
    df5a:	f00e fe23 	bl	1cba4 <log_1>
		return -1;
	}
	k_sleep(K_SECONDS(1));
    df5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    df62:	f00e fa7a 	bl	1c45a <k_sleep>
	close(at_sock);
    df66:	4628      	mov	r0, r5
    df68:	f7fe ffb8 	bl	cedc <close>
	LOG_INF("NB-IoT network stats requested.");
    df6c:	2303      	movs	r3, #3
    df6e:	f04f 0100 	mov.w	r1, #0
    df72:	f363 0107 	bfi	r1, r3, #0, #8
    df76:	482c      	ldr	r0, [pc, #176]	; (e028 <request_nb_iot_network_stats+0x304>)
    df78:	f364 118f 	bfi	r1, r4, #6, #10
    df7c:	f00e fe05 	bl	1cb8a <log_0>
	
	return 0;
    df80:	2000      	movs	r0, #0
}
    df82:	b029      	add	sp, #164	; 0xa4
    df84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				neighbors[i] = pos1[i];
    df88:	f817 300a 	ldrb.w	r3, [r7, sl]
    df8c:	f80b 300a 	strb.w	r3, [fp, sl]
    df90:	e7cb      	b.n	df2a <request_nb_iot_network_stats+0x206>
			LOG_INF("No neighbors found.");
    df92:	2303      	movs	r3, #3
    df94:	f04f 0100 	mov.w	r1, #0
    df98:	f363 0107 	bfi	r1, r3, #0, #8
    df9c:	f364 118f 	bfi	r1, r4, #6, #10
    dfa0:	4822      	ldr	r0, [pc, #136]	; (e02c <request_nb_iot_network_stats+0x308>)
    dfa2:	f00e fdf2 	bl	1cb8a <log_0>
			neighbors[0] = '\0';
    dfa6:	4b1e      	ldr	r3, [pc, #120]	; (e020 <request_nb_iot_network_stats+0x2fc>)
    dfa8:	701e      	strb	r6, [r3, #0]
    dfaa:	e7d8      	b.n	df5e <request_nb_iot_network_stats+0x23a>
	else if (strstr(buffer, "ERROR") != NULL) 
    dfac:	4912      	ldr	r1, [pc, #72]	; (dff8 <request_nb_iot_network_stats+0x2d4>)
    dfae:	a802      	add	r0, sp, #8
    dfb0:	f00f fad1 	bl	1d556 <strstr>
    dfb4:	2800      	cmp	r0, #0
    dfb6:	d0d2      	beq.n	df5e <request_nb_iot_network_stats+0x23a>
		LOG_ERR("Error while getting neighbor data!");
    dfb8:	f04f 0100 	mov.w	r1, #0
    dfbc:	2301      	movs	r3, #1
    dfbe:	f363 0107 	bfi	r1, r3, #0, #8
    dfc2:	f364 118f 	bfi	r1, r4, #6, #10
    dfc6:	481a      	ldr	r0, [pc, #104]	; (e030 <request_nb_iot_network_stats+0x30c>)
    dfc8:	e6dd      	b.n	dd86 <request_nb_iot_network_stats+0x62>
    dfca:	bf00      	nop
    dfcc:	0001f408 	.word	0x0001f408
    dfd0:	0001f390 	.word	0x0001f390
    dfd4:	0001ff5f 	.word	0x0001ff5f
    dfd8:	0001ff82 	.word	0x0001ff82
    dfdc:	0001ff8c 	.word	0x0001ff8c
    dfe0:	00020226 	.word	0x00020226
    dfe4:	0001ff9d 	.word	0x0001ff9d
    dfe8:	20026494 	.word	0x20026494
    dfec:	0001ffa1 	.word	0x0001ffa1
    dff0:	0001ffe1 	.word	0x0001ffe1
    dff4:	0001ffe9 	.word	0x0001ffe9
    dff8:	0001ffb6 	.word	0x0001ffb6
    dffc:	0001ffbc 	.word	0x0001ffbc
    e000:	0001fe0e 	.word	0x0001fe0e
    e004:	2002649e 	.word	0x2002649e
    e008:	0001fff9 	.word	0x0001fff9
    e00c:	0002002d 	.word	0x0002002d
    e010:	00020039 	.word	0x00020039
    e014:	0002000b 	.word	0x0002000b
    e018:	00020030 	.word	0x00020030
    e01c:	0002004d 	.word	0x0002004d
    e020:	2002649f 	.word	0x2002649f
    e024:	00020059 	.word	0x00020059
    e028:	0002009f 	.word	0x0002009f
    e02c:	00020068 	.word	0x00020068
    e030:	0002007c 	.word	0x0002007c

0000e034 <slm_at_tcpip_init>:


/**@brief API to initialize TCP/IP AT commands handler
 */
int slm_at_tcpip_init(at_cmd_handler_t callback)
{
    e034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e038:	4a52      	ldr	r2, [pc, #328]	; (e184 <slm_at_tcpip_init+0x150>)
    e03a:	4c53      	ldr	r4, [pc, #332]	; (e188 <slm_at_tcpip_init+0x154>)
    e03c:	b0a7      	sub	sp, #156	; 0x9c
    e03e:	1aa4      	subs	r4, r4, r2
    e040:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (callback == NULL) {
    e044:	b978      	cbnz	r0, e066 <slm_at_tcpip_init+0x32>
		LOG_ERR("No callback");
    e046:	2301      	movs	r3, #1
    e048:	f04f 0100 	mov.w	r1, #0
    e04c:	f363 0107 	bfi	r1, r3, #0, #8
    e050:	f364 118f 	bfi	r1, r4, #6, #10
    e054:	484d      	ldr	r0, [pc, #308]	; (e18c <slm_at_tcpip_init+0x158>)
    e056:	f00e fd98 	bl	1cb8a <log_0>
		return -EINVAL;
    e05a:	f06f 0815 	mvn.w	r8, #21
	}
	
	////////////////////////////////////////////////////////////////////

	
}
    e05e:	4640      	mov	r0, r8
    e060:	b027      	add	sp, #156	; 0x9c
    e062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	client.ip_proto = IPPROTO_IP;
    e066:	2500      	movs	r5, #0
	client.sock = INVALID_SOCKET;
    e068:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e06c:	4a48      	ldr	r2, [pc, #288]	; (e190 <slm_at_tcpip_init+0x15c>)
    e06e:	6011      	str	r1, [r2, #0]
	client.callback = callback;
    e070:	6090      	str	r0, [r2, #8]
	client.ip_proto = IPPROTO_IP;
    e072:	8095      	strh	r5, [r2, #4]
	LOG_INF("Initializing NB-IoT Parameters");
    e074:	f04f 0100 	mov.w	r1, #0
    e078:	2203      	movs	r2, #3
    e07a:	f362 0107 	bfi	r1, r2, #0, #8
    e07e:	f364 118f 	bfi	r1, r4, #6, #10
    e082:	4844      	ldr	r0, [pc, #272]	; (e194 <slm_at_tcpip_init+0x160>)
    e084:	f00e fd81 	bl	1cb8a <log_0>
	char buffer[150] = {0};
    e088:	2296      	movs	r2, #150	; 0x96
    e08a:	4629      	mov	r1, r5
    e08c:	4668      	mov	r0, sp
    e08e:	f00f fb1c 	bl	1d6ca <memset>
	at_sock = socket(AF_LTE, 0, NPROTO_AT);
    e092:	f240 2201 	movw	r2, #513	; 0x201
    e096:	4629      	mov	r1, r5
    e098:	2066      	movs	r0, #102	; 0x66
    e09a:	f7fe ff19 	bl	ced0 <socket>
	if (at_sock < 0) {
    e09e:	1e06      	subs	r6, r0, #0
    e0a0:	db26      	blt.n	e0f0 <slm_at_tcpip_init+0xbc>
    e0a2:	4f3d      	ldr	r7, [pc, #244]	; (e198 <slm_at_tcpip_init+0x164>)
		if (memcmp(buffer, "OK", 2) != 0) {
    e0a4:	f8df a108 	ldr.w	sl, [pc, #264]	; e1b0 <slm_at_tcpip_init+0x17c>
		LOG_INF("%s",nb_init_at_commands[i]);
    e0a8:	f02b 023f 	bic.w	r2, fp, #63	; 0x3f
    e0ac:	f042 0203 	orr.w	r2, r2, #3
    e0b0:	f362 0b07 	bfi	fp, r2, #0, #8
    e0b4:	f364 1b8f 	bfi	fp, r4, #6, #10
    e0b8:	465a      	mov	r2, fp
    e0ba:	4639      	mov	r1, r7
    e0bc:	4837      	ldr	r0, [pc, #220]	; (e19c <slm_at_tcpip_init+0x168>)
    e0be:	f00e fd71 	bl	1cba4 <log_1>
		bytes_sent = send(at_sock, nb_init_at_commands[i],
    e0c2:	4638      	mov	r0, r7
    e0c4:	f00f fa9c 	bl	1d600 <strlen>
    e0c8:	4639      	mov	r1, r7
    e0ca:	4602      	mov	r2, r0
    e0cc:	4630      	mov	r0, r6
    e0ce:	f7ff f819 	bl	d104 <send.constprop.11>
		if (bytes_sent < 0) {
    e0d2:	2800      	cmp	r0, #0
    e0d4:	da19      	bge.n	e10a <slm_at_tcpip_init+0xd6>
			LOG_INF("NO BYTES SENT");
    e0d6:	f04f 0100 	mov.w	r1, #0
    e0da:	2303      	movs	r3, #3
    e0dc:	4830      	ldr	r0, [pc, #192]	; (e1a0 <slm_at_tcpip_init+0x16c>)
    e0de:	f363 0107 	bfi	r1, r3, #0, #8
    e0e2:	f364 118f 	bfi	r1, r4, #6, #10
			LOG_INF("NOK");
    e0e6:	f00e fd50 	bl	1cb8a <log_0>
			close(at_sock);
    e0ea:	4630      	mov	r0, r6
    e0ec:	f7fe fef6 	bl	cedc <close>
		LOG_ERR("Could not init nb-iot parameters!");
    e0f0:	2301      	movs	r3, #1
    e0f2:	f04f 0100 	mov.w	r1, #0
    e0f6:	f363 0107 	bfi	r1, r3, #0, #8
    e0fa:	f364 118f 	bfi	r1, r4, #6, #10
    e0fe:	4829      	ldr	r0, [pc, #164]	; (e1a4 <slm_at_tcpip_init+0x170>)
    e100:	f00e fd43 	bl	1cb8a <log_0>
		return -1;
    e104:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    e108:	e7a9      	b.n	e05e <slm_at_tcpip_init+0x2a>
			bytes_received = recv(at_sock, buffer, 2, 0);
    e10a:	2202      	movs	r2, #2
    e10c:	4669      	mov	r1, sp
    e10e:	4630      	mov	r0, r6
    e110:	f7ff f876 	bl	d200 <recv.constprop.13>
		} while (bytes_received == 0);
    e114:	2800      	cmp	r0, #0
    e116:	d0f8      	beq.n	e10a <slm_at_tcpip_init+0xd6>
		if (memcmp(buffer, "OK", 2) != 0) {
    e118:	2202      	movs	r2, #2
    e11a:	4651      	mov	r1, sl
    e11c:	4668      	mov	r0, sp
    e11e:	f00f fa9a 	bl	1d656 <memcmp>
    e122:	4680      	mov	r8, r0
    e124:	b140      	cbz	r0, e138 <slm_at_tcpip_init+0x104>
			LOG_INF("NOK");
    e126:	f04f 0100 	mov.w	r1, #0
    e12a:	2303      	movs	r3, #3
    e12c:	f363 0107 	bfi	r1, r3, #0, #8
    e130:	f364 118f 	bfi	r1, r4, #6, #10
    e134:	481c      	ldr	r0, [pc, #112]	; (e1a8 <slm_at_tcpip_init+0x174>)
    e136:	e7d6      	b.n	e0e6 <slm_at_tcpip_init+0xb2>
			LOG_INF("OK");
    e138:	f029 023f 	bic.w	r2, r9, #63	; 0x3f
    e13c:	f042 0203 	orr.w	r2, r2, #3
    e140:	f362 0907 	bfi	r9, r2, #0, #8
    e144:	f364 198f 	bfi	r9, r4, #6, #10
    e148:	4649      	mov	r1, r9
    e14a:	4650      	mov	r0, sl
    e14c:	f00e fd1d 	bl	1cb8a <log_0>
	for (int i = 0; i < ARRAY_SIZE(nb_init_at_commands); i++) {
    e150:	3501      	adds	r5, #1
		k_sleep(K_SECONDS(3));
    e152:	f640 30b8 	movw	r0, #3000	; 0xbb8
    e156:	f00e f980 	bl	1c45a <k_sleep>
	for (int i = 0; i < ARRAY_SIZE(nb_init_at_commands); i++) {
    e15a:	2d04      	cmp	r5, #4
    e15c:	f107 0728 	add.w	r7, r7, #40	; 0x28
    e160:	d1a2      	bne.n	e0a8 <slm_at_tcpip_init+0x74>
	close(at_sock);
    e162:	4630      	mov	r0, r6
    e164:	f7fe feba 	bl	cedc <close>
	LOG_INF("NB-IoT Parameters Initialized");
    e168:	2303      	movs	r3, #3
    e16a:	f04f 0100 	mov.w	r1, #0
    e16e:	f363 0107 	bfi	r1, r3, #0, #8
    e172:	f364 118f 	bfi	r1, r4, #6, #10
    e176:	480d      	ldr	r0, [pc, #52]	; (e1ac <slm_at_tcpip_init+0x178>)
    e178:	f00e fd07 	bl	1cb8a <log_0>
		do_socket_open(2);
    e17c:	2002      	movs	r0, #2
    e17e:	f7fe fef1 	bl	cf64 <do_socket_open>
		return 0;
    e182:	e76c      	b.n	e05e <slm_at_tcpip_init+0x2a>
    e184:	0001f390 	.word	0x0001f390
    e188:	0001f408 	.word	0x0001f408
    e18c:	000201ec 	.word	0x000201ec
    e190:	20020130 	.word	0x20020130
    e194:	000201f8 	.word	0x000201f8
    e198:	0001fe88 	.word	0x0001fe88
    e19c:	00020de1 	.word	0x00020de1
    e1a0:	00020217 	.word	0x00020217
    e1a4:	00020247 	.word	0x00020247
    e1a8:	00020225 	.word	0x00020225
    e1ac:	00020229 	.word	0x00020229
    e1b0:	00020226 	.word	0x00020226

0000e1b4 <send_message>:
/** If GPS has fix, save GPS data and toggle PSM to request network stats:
 *  Cell ID and RSRP of serving cell and neighbors (if available).
 */
void send_message(void)
{
	LOG_INF("--------BEGIN-----------");
    e1b4:	2303      	movs	r3, #3
    e1b6:	f04f 0100 	mov.w	r1, #0
{
    e1ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_INF("--------BEGIN-----------");
    e1be:	f363 0107 	bfi	r1, r3, #0, #8
    e1c2:	4c6b      	ldr	r4, [pc, #428]	; (e370 <send_message+0x1bc>)
    e1c4:	4b6b      	ldr	r3, [pc, #428]	; (e374 <send_message+0x1c0>)
	// Wait for GPS fix
	while(!notified)
    e1c6:	4e6c      	ldr	r6, [pc, #432]	; (e378 <send_message+0x1c4>)
	LOG_INF("--------BEGIN-----------");
    e1c8:	1ae4      	subs	r4, r4, r3
    e1ca:	f3c4 04c9 	ubfx	r4, r4, #3, #10
{
    e1ce:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
	LOG_INF("--------BEGIN-----------");
    e1d2:	f364 118f 	bfi	r1, r4, #6, #10
    e1d6:	4869      	ldr	r0, [pc, #420]	; (e37c <send_message+0x1c8>)
    e1d8:	f00e fcd7 	bl	1cb8a <log_0>
    e1dc:	4637      	mov	r7, r6
	{
		k_sleep(K_SECONDS(1));
		LOG_INF("waiting for GPS fix");
    e1de:	f8df 81dc 	ldr.w	r8, [pc, #476]	; e3bc <send_message+0x208>
	while(!notified)
    e1e2:	7833      	ldrb	r3, [r6, #0]
    e1e4:	2b00      	cmp	r3, #0
    e1e6:	f000 809c 	beq.w	e322 <send_message+0x16e>
	}
	LOG_INF("GPS client running = %d", gps_client_inst.running);
    e1ea:	2303      	movs	r3, #3
    e1ec:	f04f 0200 	mov.w	r2, #0
    e1f0:	4e63      	ldr	r6, [pc, #396]	; (e380 <send_message+0x1cc>)
    e1f2:	f363 0207 	bfi	r2, r3, #0, #8
    e1f6:	f364 128f 	bfi	r2, r4, #6, #10
    e1fa:	79b1      	ldrb	r1, [r6, #6]
    e1fc:	4861      	ldr	r0, [pc, #388]	; (e384 <send_message+0x1d0>)
    e1fe:	f00e fcd1 	bl	1cba4 <log_1>
	LOG_INF("GPS client has fix = %d", gps_client_inst.has_fix);
    e202:	2303      	movs	r3, #3
    e204:	f04f 0200 	mov.w	r2, #0

	// Get GPS data
	char gps_buf[100];
	sprintf(gps_buf, "%f;%f;%f;%f;%04u-%02u-%02u %02u:%02u:%02u", 
    e208:	4d5f      	ldr	r5, [pc, #380]	; (e388 <send_message+0x1d4>)
	LOG_INF("GPS client has fix = %d", gps_client_inst.has_fix);
    e20a:	f363 0207 	bfi	r2, r3, #0, #8
    e20e:	f364 128f 	bfi	r2, r4, #6, #10
    e212:	79f1      	ldrb	r1, [r6, #7]
    e214:	485d      	ldr	r0, [pc, #372]	; (e38c <send_message+0x1d8>)
    e216:	f00e fcc5 	bl	1cba4 <log_1>
	sprintf(gps_buf, "%f;%f;%f;%f;%04u-%02u-%02u %02u:%02u:%02u", 
    e21a:	7fab      	ldrb	r3, [r5, #30]
    e21c:	930b      	str	r3, [sp, #44]	; 0x2c
    e21e:	7f6b      	ldrb	r3, [r5, #29]
    e220:	930a      	str	r3, [sp, #40]	; 0x28
    e222:	7f2b      	ldrb	r3, [r5, #28]
    e224:	9309      	str	r3, [sp, #36]	; 0x24
    e226:	7eeb      	ldrb	r3, [r5, #27]
    e228:	9308      	str	r3, [sp, #32]
    e22a:	7eab      	ldrb	r3, [r5, #26]
    e22c:	9307      	str	r3, [sp, #28]
    e22e:	8b2b      	ldrh	r3, [r5, #24]
    e230:	9306      	str	r3, [sp, #24]
    e232:	6968      	ldr	r0, [r5, #20]
    e234:	f7fe f958 	bl	c4e8 <__aeabi_f2d>
    e238:	e9cd 0104 	strd	r0, r1, [sp, #16]
    e23c:	6928      	ldr	r0, [r5, #16]
    e23e:	f7fe f953 	bl	c4e8 <__aeabi_f2d>
    e242:	e9cd 0102 	strd	r0, r1, [sp, #8]
    e246:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    e24a:	e9cd 2300 	strd	r2, r3, [sp]
    e24e:	4950      	ldr	r1, [pc, #320]	; (e390 <send_message+0x1dc>)
    e250:	e9d5 2300 	ldrd	r2, r3, [r5]
    e254:	a80c      	add	r0, sp, #48	; 0x30
    e256:	f002 fe8f 	bl	10f78 <sprintf>
		current_location.datetime.day,
		current_location.datetime.hour,
		current_location.datetime.minute,
		current_location.datetime.seconds);

	gps_client_inst.callback(strcat(gps_buf, "\r\n"));
    e25a:	494e      	ldr	r1, [pc, #312]	; (e394 <send_message+0x1e0>)
    e25c:	a80c      	add	r0, sp, #48	; 0x30
    e25e:	68b5      	ldr	r5, [r6, #8]
    e260:	f00f f9f0 	bl	1d644 <strcat>
    e264:	47a8      	blx	r5
	
	disable_PSM();
    e266:	f7ff fcf3 	bl	dc50 <disable_PSM>
	k_sleep(K_SECONDS(3));
    e26a:	f640 30b8 	movw	r0, #3000	; 0xbb8
    e26e:	f00e f8f4 	bl	1c45a <k_sleep>

	// Request ID and RSRSP of current and neighboring cells (if available)
	int error = request_nb_iot_network_stats();
    e272:	f7ff fd57 	bl	dd24 <request_nb_iot_network_stats>
	if(error == 0)
    e276:	4601      	mov	r1, r0
    e278:	2800      	cmp	r0, #0
    e27a:	d16e      	bne.n	e35a <send_message+0x1a6>
	{
		// Put all data in a buffer
		char payloadstring[500] = {0};
    e27c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    e280:	a825      	add	r0, sp, #148	; 0x94
    e282:	f00f fa22 	bl	1d6ca <memset>

		strcat(payloadstring, current_cell_id);
    e286:	4944      	ldr	r1, [pc, #272]	; (e398 <send_message+0x1e4>)
    e288:	a825      	add	r0, sp, #148	; 0x94
    e28a:	f00f f9db 	bl	1d644 <strcat>
		strcat(payloadstring, ";");
    e28e:	4943      	ldr	r1, [pc, #268]	; (e39c <send_message+0x1e8>)
    e290:	a825      	add	r0, sp, #148	; 0x94
    e292:	f00f f9d7 	bl	1d644 <strcat>

		char* rsrp = (char*) &current_rsrp;
		strcat(payloadstring, rsrp);
    e296:	4942      	ldr	r1, [pc, #264]	; (e3a0 <send_message+0x1ec>)
    e298:	a825      	add	r0, sp, #148	; 0x94
    e29a:	f00f f9d3 	bl	1d644 <strcat>
		strcat(payloadstring, ";");
    e29e:	493f      	ldr	r1, [pc, #252]	; (e39c <send_message+0x1e8>)
    e2a0:	a825      	add	r0, sp, #148	; 0x94
    e2a2:	f00f f9cf 	bl	1d644 <strcat>

		if(neighbors[0] != '\0')
    e2a6:	493f      	ldr	r1, [pc, #252]	; (e3a4 <send_message+0x1f0>)
    e2a8:	780b      	ldrb	r3, [r1, #0]
    e2aa:	b113      	cbz	r3, e2b2 <send_message+0xfe>
			strcat(payloadstring, neighbors);
    e2ac:	a825      	add	r0, sp, #148	; 0x94
    e2ae:	f00f f9c9 	bl	1d644 <strcat>
		strcat(payloadstring, ";");
    e2b2:	493a      	ldr	r1, [pc, #232]	; (e39c <send_message+0x1e8>)
    e2b4:	a825      	add	r0, sp, #148	; 0x94
    e2b6:	f00f f9c5 	bl	1d644 <strcat>
		
		strcat(payloadstring, gps_buf);
    e2ba:	a90c      	add	r1, sp, #48	; 0x30
    e2bc:	a825      	add	r0, sp, #148	; 0x94
    e2be:	f00f f9c1 	bl	1d644 <strcat>

		// Send valid messages to UDP server
		if(current_rsrp != 255)
    e2c2:	4b37      	ldr	r3, [pc, #220]	; (e3a0 <send_message+0x1ec>)
    e2c4:	781b      	ldrb	r3, [r3, #0]
    e2c6:	2bff      	cmp	r3, #255	; 0xff
    e2c8:	d03c      	beq.n	e344 <send_message+0x190>
		{
			do_udp_sendto("nbiot.idlab.uantwerpen.be", 1270, payloadstring); // TODO change UDP port
    e2ca:	aa25      	add	r2, sp, #148	; 0x94
    e2cc:	f240 41f6 	movw	r1, #1270	; 0x4f6
    e2d0:	4835      	ldr	r0, [pc, #212]	; (e3a8 <send_message+0x1f4>)
    e2d2:	f7ff fb39 	bl	d948 <do_udp_sendto>
			LOG_INF("MESSAGE SENT: \"%s\" (LENGTH = %d)", payloadstring, strlen(payloadstring));
    e2d6:	f04f 0500 	mov.w	r5, #0
    e2da:	2303      	movs	r3, #3
    e2dc:	a825      	add	r0, sp, #148	; 0x94
    e2de:	f363 0507 	bfi	r5, r3, #0, #8
    e2e2:	f00f f98d 	bl	1d600 <strlen>
    e2e6:	f364 158f 	bfi	r5, r4, #6, #10
    e2ea:	4602      	mov	r2, r0
    e2ec:	462b      	mov	r3, r5
    e2ee:	a925      	add	r1, sp, #148	; 0x94
    e2f0:	482e      	ldr	r0, [pc, #184]	; (e3ac <send_message+0x1f8>)
    e2f2:	f00e fc6b 	bl	1cbcc <log_2>
		{
			LOG_ERR("Not sending the message (RSRP = 255)");
		}
		
			
		enable_PSM();
    e2f6:	f7ff fc41 	bl	db7c <enable_PSM>

	} else 
	{
		LOG_ERR("Unexpected ERROR, try rebooting the device.");
	}
	notified = 0;
    e2fa:	2300      	movs	r3, #0
	LOG_INF("---------END-----------");
    e2fc:	f04f 0100 	mov.w	r1, #0
	notified = 0;
    e300:	703b      	strb	r3, [r7, #0]
	LOG_INF("---------END-----------");
    e302:	2303      	movs	r3, #3
    e304:	f363 0107 	bfi	r1, r3, #0, #8
    e308:	f364 118f 	bfi	r1, r4, #6, #10
    e30c:	4828      	ldr	r0, [pc, #160]	; (e3b0 <send_message+0x1fc>)
    e30e:	f00e fc3c 	bl	1cb8a <log_0>
	k_sleep(K_SECONDS(20));
    e312:	f644 6020 	movw	r0, #20000	; 0x4e20
    e316:	f00e f8a0 	bl	1c45a <k_sleep>
}
    e31a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
    e31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_sleep(K_SECONDS(1));
    e322:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    e326:	f00e f898 	bl	1c45a <k_sleep>
		LOG_INF("waiting for GPS fix");
    e32a:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
    e32e:	f043 0303 	orr.w	r3, r3, #3
    e332:	f363 0507 	bfi	r5, r3, #0, #8
    e336:	f364 158f 	bfi	r5, r4, #6, #10
    e33a:	4629      	mov	r1, r5
    e33c:	4640      	mov	r0, r8
    e33e:	f00e fc24 	bl	1cb8a <log_0>
    e342:	e74e      	b.n	e1e2 <send_message+0x2e>
			LOG_ERR("Not sending the message (RSRP = 255)");
    e344:	2301      	movs	r3, #1
    e346:	f04f 0100 	mov.w	r1, #0
    e34a:	f363 0107 	bfi	r1, r3, #0, #8
    e34e:	f364 118f 	bfi	r1, r4, #6, #10
    e352:	4818      	ldr	r0, [pc, #96]	; (e3b4 <send_message+0x200>)
    e354:	f00e fc19 	bl	1cb8a <log_0>
    e358:	e7cd      	b.n	e2f6 <send_message+0x142>
		LOG_ERR("Unexpected ERROR, try rebooting the device.");
    e35a:	2301      	movs	r3, #1
    e35c:	f04f 0100 	mov.w	r1, #0
    e360:	f363 0107 	bfi	r1, r3, #0, #8
    e364:	f364 118f 	bfi	r1, r4, #6, #10
    e368:	4813      	ldr	r0, [pc, #76]	; (e3b8 <send_message+0x204>)
    e36a:	f00e fc0e 	bl	1cb8a <log_0>
    e36e:	e7c4      	b.n	e2fa <send_message+0x146>
    e370:	0001f408 	.word	0x0001f408
    e374:	0001f390 	.word	0x0001f390
    e378:	20026544 	.word	0x20026544
    e37c:	000200bf 	.word	0x000200bf
    e380:	2002013c 	.word	0x2002013c
    e384:	000200ec 	.word	0x000200ec
    e388:	20020000 	.word	0x20020000
    e38c:	00020104 	.word	0x00020104
    e390:	0002011c 	.word	0x0002011c
    e394:	0001fe0d 	.word	0x0001fe0d
    e398:	20026494 	.word	0x20026494
    e39c:	00020146 	.word	0x00020146
    e3a0:	2002649e 	.word	0x2002649e
    e3a4:	2002649f 	.word	0x2002649f
    e3a8:	00020148 	.word	0x00020148
    e3ac:	00020162 	.word	0x00020162
    e3b0:	000201d4 	.word	0x000201d4
    e3b4:	00020183 	.word	0x00020183
    e3b8:	000201a8 	.word	0x000201a8
    e3bc:	000200d8 	.word	0x000200d8

0000e3c0 <close>:
	return socket_ops->close(sock);
    e3c0:	4b01      	ldr	r3, [pc, #4]	; (e3c8 <close+0x8>)
    e3c2:	681b      	ldr	r3, [r3, #0]
    e3c4:	685b      	ldr	r3, [r3, #4]
    e3c6:	4718      	bx	r3
    e3c8:	20020344 	.word	0x20020344

0000e3cc <do_gps_stop>:

	return -errno;
}

static int do_gps_stop(void)
{
    e3cc:	b530      	push	{r4, r5, lr}
	int ret = 0;
	nrf_gnss_delete_mask_t	delete_mask  = 0;
    e3ce:	2400      	movs	r4, #0

	if (gps_client_inst.sock != INVALID_SOCKET) {
    e3d0:	4d1a      	ldr	r5, [pc, #104]	; (e43c <do_gps_stop+0x70>)
{
    e3d2:	b085      	sub	sp, #20
	if (gps_client_inst.sock != INVALID_SOCKET) {
    e3d4:	6828      	ldr	r0, [r5, #0]
	nrf_gnss_delete_mask_t	delete_mask  = 0;
    e3d6:	9403      	str	r4, [sp, #12]
	if (gps_client_inst.sock != INVALID_SOCKET) {
    e3d8:	1c43      	adds	r3, r0, #1
    e3da:	d020      	beq.n	e41e <do_gps_stop+0x52>
		ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS,
    e3dc:	2304      	movs	r3, #4
    e3de:	2208      	movs	r2, #8
    e3e0:	9300      	str	r3, [sp, #0]
    e3e2:	f44f 7101 	mov.w	r1, #516	; 0x204
    e3e6:	ab03      	add	r3, sp, #12
    e3e8:	f008 ffbe 	bl	17368 <nrf_setsockopt>
			NRF_SO_GNSS_STOP, &delete_mask, sizeof(delete_mask));
		if (ret != 0) {
    e3ec:	4604      	mov	r4, r0
    e3ee:	b1c8      	cbz	r0, e424 <do_gps_stop+0x58>
			LOG_ERR("Failed to stop GPS (err: %d)", -errno);
    e3f0:	2301      	movs	r3, #1
    e3f2:	f04f 0400 	mov.w	r4, #0
    e3f6:	4a12      	ldr	r2, [pc, #72]	; (e440 <do_gps_stop+0x74>)
    e3f8:	f363 0407 	bfi	r4, r3, #0, #8
    e3fc:	4b11      	ldr	r3, [pc, #68]	; (e444 <do_gps_stop+0x78>)
    e3fe:	1a9b      	subs	r3, r3, r2
    e400:	08db      	lsrs	r3, r3, #3
    e402:	f363 148f 	bfi	r4, r3, #6, #10
    e406:	f00e f82d 	bl	1c464 <z_errno>
    e40a:	6801      	ldr	r1, [r0, #0]
    e40c:	4622      	mov	r2, r4
    e40e:	4249      	negs	r1, r1
    e410:	480d      	ldr	r0, [pc, #52]	; (e448 <do_gps_stop+0x7c>)
    e412:	f00e fbc7 	bl	1cba4 <log_1>
			ret = -errno;
    e416:	f00e f825 	bl	1c464 <z_errno>
    e41a:	6804      	ldr	r4, [r0, #0]
    e41c:	4264      	negs	r4, r4
		}

	}

	return ret;
}
    e41e:	4620      	mov	r0, r4
    e420:	b005      	add	sp, #20
    e422:	bd30      	pop	{r4, r5, pc}
			k_thread_suspend(gps_thread_id);
    e424:	4b09      	ldr	r3, [pc, #36]	; (e44c <do_gps_stop+0x80>)
    e426:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
    e428:	f00d fd80 	bl	1bf2c <z_impl_k_thread_suspend>
			nrf_close(gps_client_inst.sock);
    e42c:	6828      	ldr	r0, [r5, #0]
    e42e:	f008 fed7 	bl	171e0 <nrf_close>
			gps_client_inst.running = false;
    e432:	71ac      	strb	r4, [r5, #6]
			gps_client_inst.callback("#XGPSRUN: 0\r\n");
    e434:	68ab      	ldr	r3, [r5, #8]
    e436:	4806      	ldr	r0, [pc, #24]	; (e450 <do_gps_stop+0x84>)
    e438:	4798      	blx	r3
			LOG_DBG("GPS stopped");
    e43a:	e7f0      	b.n	e41e <do_gps_stop+0x52>
    e43c:	2002013c 	.word	0x2002013c
    e440:	0001f390 	.word	0x0001f390
    e444:	0001f3c8 	.word	0x0001f3c8
    e448:	000203ad 	.word	0x000203ad
    e44c:	200201f8 	.word	0x200201f8
    e450:	000203ca 	.word	0x000203ca

0000e454 <do_gps_start>:
	nrf_gnss_fix_retry_t    fix_retry    = 0; /* unlimited retry period */
    e454:	2300      	movs	r3, #0
{
    e456:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_gnss_fix_interval_t fix_interval = 1; /* 1s delay between fixes */
    e458:	2701      	movs	r7, #1
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)gps_client_inst.mask;
    e45a:	4d70      	ldr	r5, [pc, #448]	; (e61c <do_gps_start+0x1c8>)
{
    e45c:	b08b      	sub	sp, #44	; 0x2c
	nrf_gnss_fix_retry_t    fix_retry    = 0; /* unlimited retry period */
    e45e:	f8ad 301e 	strh.w	r3, [sp, #30]
	nrf_gnss_delete_mask_t  delete_mask  = 0;
    e462:	9309      	str	r3, [sp, #36]	; 0x24
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)gps_client_inst.mask;
    e464:	88ab      	ldrh	r3, [r5, #4]
	gps_client_inst.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    e466:	f44f 7201 	mov.w	r2, #516	; 0x204
    e46a:	2102      	movs	r1, #2
    e46c:	4638      	mov	r0, r7
	nrf_gnss_fix_interval_t fix_interval = 1; /* 1s delay between fixes */
    e46e:	f8ad 7020 	strh.w	r7, [sp, #32]
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)gps_client_inst.mask;
    e472:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	gps_client_inst.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    e476:	f008 fea1 	bl	171bc <nrf_socket>
	if (gps_client_inst.sock < 0) {
    e47a:	2800      	cmp	r0, #0
	gps_client_inst.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    e47c:	6028      	str	r0, [r5, #0]
	if (gps_client_inst.sock < 0) {
    e47e:	da31      	bge.n	e4e4 <do_gps_start+0x90>
		LOG_ERR("Could not init socket (err: %d)", -errno);
    e480:	f04f 0400 	mov.w	r4, #0
    e484:	4a66      	ldr	r2, [pc, #408]	; (e620 <do_gps_start+0x1cc>)
    e486:	4b67      	ldr	r3, [pc, #412]	; (e624 <do_gps_start+0x1d0>)
    e488:	f367 0407 	bfi	r4, r7, #0, #8
    e48c:	1a9b      	subs	r3, r3, r2
    e48e:	08db      	lsrs	r3, r3, #3
    e490:	f363 148f 	bfi	r4, r3, #6, #10
    e494:	f00d ffe6 	bl	1c464 <z_errno>
    e498:	6801      	ldr	r1, [r0, #0]
    e49a:	4622      	mov	r2, r4
    e49c:	4249      	negs	r1, r1
    e49e:	4862      	ldr	r0, [pc, #392]	; (e628 <do_gps_start+0x1d4>)
    e4a0:	f00e fb80 	bl	1cba4 <log_1>
	int ret = -EINVAL;
    e4a4:	f06f 0415 	mvn.w	r4, #21
	LOG_ERR("GPS start failed: %d", ret);
    e4a8:	2301      	movs	r3, #1
    e4aa:	f04f 0200 	mov.w	r2, #0
    e4ae:	495c      	ldr	r1, [pc, #368]	; (e620 <do_gps_start+0x1cc>)
    e4b0:	f363 0207 	bfi	r2, r3, #0, #8
    e4b4:	4b5b      	ldr	r3, [pc, #364]	; (e624 <do_gps_start+0x1d0>)
    e4b6:	485d      	ldr	r0, [pc, #372]	; (e62c <do_gps_start+0x1d8>)
    e4b8:	1a5b      	subs	r3, r3, r1
    e4ba:	08db      	lsrs	r3, r3, #3
    e4bc:	f363 128f 	bfi	r2, r3, #6, #10
    e4c0:	4621      	mov	r1, r4
    e4c2:	f00e fb6f 	bl	1cba4 <log_1>
	sprintf(buf, "#XGPSRUN: %d\r\n", ret);
    e4c6:	4622      	mov	r2, r4
    e4c8:	4959      	ldr	r1, [pc, #356]	; (e630 <do_gps_start+0x1dc>)
    e4ca:	485a      	ldr	r0, [pc, #360]	; (e634 <do_gps_start+0x1e0>)
    e4cc:	f002 fd54 	bl	10f78 <sprintf>
	gps_client_inst.callback(buf);
    e4d0:	68ab      	ldr	r3, [r5, #8]
    e4d2:	4858      	ldr	r0, [pc, #352]	; (e634 <do_gps_start+0x1e0>)
    e4d4:	4798      	blx	r3
	gps_client_inst.running = false;
    e4d6:	2300      	movs	r3, #0
    e4d8:	71ab      	strb	r3, [r5, #6]
	return -errno;
    e4da:	f00d ffc3 	bl	1c464 <z_errno>
    e4de:	6804      	ldr	r4, [r0, #0]
    e4e0:	4264      	negs	r4, r4
    e4e2:	e088      	b.n	e5f6 <do_gps_start+0x1a2>
	ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS, NRF_SO_GNSS_FIX_RETRY,
    e4e4:	2602      	movs	r6, #2
    e4e6:	f10d 031e 	add.w	r3, sp, #30
    e4ea:	9600      	str	r6, [sp, #0]
    e4ec:	4632      	mov	r2, r6
    e4ee:	f44f 7101 	mov.w	r1, #516	; 0x204
    e4f2:	f008 ff39 	bl	17368 <nrf_setsockopt>
	if (ret != 0) {
    e4f6:	4604      	mov	r4, r0
    e4f8:	b198      	cbz	r0, e522 <do_gps_start+0xce>
		LOG_ERR("Failed to set fix retry value (err: %d)", -errno);
    e4fa:	2301      	movs	r3, #1
    e4fc:	f04f 0600 	mov.w	r6, #0
    e500:	4a47      	ldr	r2, [pc, #284]	; (e620 <do_gps_start+0x1cc>)
    e502:	f363 0607 	bfi	r6, r3, #0, #8
    e506:	4b47      	ldr	r3, [pc, #284]	; (e624 <do_gps_start+0x1d0>)
    e508:	1a9b      	subs	r3, r3, r2
    e50a:	08db      	lsrs	r3, r3, #3
    e50c:	f363 168f 	bfi	r6, r3, #6, #10
    e510:	f00d ffa8 	bl	1c464 <z_errno>
    e514:	4632      	mov	r2, r6
    e516:	6801      	ldr	r1, [r0, #0]
    e518:	4847      	ldr	r0, [pc, #284]	; (e638 <do_gps_start+0x1e4>)
    e51a:	4249      	negs	r1, r1
		LOG_ERR("Failed to start GPS (err: %d)", -errno);
    e51c:	f00e fb42 	bl	1cba4 <log_1>
		goto error;
    e520:	e7c2      	b.n	e4a8 <do_gps_start+0x54>
	ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS,
    e522:	9600      	str	r6, [sp, #0]
    e524:	ab08      	add	r3, sp, #32
    e526:	463a      	mov	r2, r7
    e528:	f44f 7101 	mov.w	r1, #516	; 0x204
    e52c:	6828      	ldr	r0, [r5, #0]
    e52e:	f008 ff1b 	bl	17368 <nrf_setsockopt>
	if (ret != 0) {
    e532:	4604      	mov	r4, r0
    e534:	b188      	cbz	r0, e55a <do_gps_start+0x106>
		LOG_ERR("Failed to set fix interval value (err: %d)", -errno);
    e536:	2301      	movs	r3, #1
    e538:	f04f 0600 	mov.w	r6, #0
    e53c:	4a38      	ldr	r2, [pc, #224]	; (e620 <do_gps_start+0x1cc>)
    e53e:	f363 0607 	bfi	r6, r3, #0, #8
    e542:	4b38      	ldr	r3, [pc, #224]	; (e624 <do_gps_start+0x1d0>)
    e544:	1a9b      	subs	r3, r3, r2
    e546:	08db      	lsrs	r3, r3, #3
    e548:	f363 168f 	bfi	r6, r3, #6, #10
    e54c:	f00d ff8a 	bl	1c464 <z_errno>
    e550:	6801      	ldr	r1, [r0, #0]
    e552:	4632      	mov	r2, r6
    e554:	4249      	negs	r1, r1
    e556:	4839      	ldr	r0, [pc, #228]	; (e63c <do_gps_start+0x1e8>)
    e558:	e7e0      	b.n	e51c <do_gps_start+0xc8>
	ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS, NRF_SO_GNSS_NMEA_MASK,
    e55a:	9600      	str	r6, [sp, #0]
    e55c:	f10d 0322 	add.w	r3, sp, #34	; 0x22
    e560:	2204      	movs	r2, #4
    e562:	f44f 7101 	mov.w	r1, #516	; 0x204
    e566:	6828      	ldr	r0, [r5, #0]
    e568:	f008 fefe 	bl	17368 <nrf_setsockopt>
	if (ret != 0) {
    e56c:	4604      	mov	r4, r0
    e56e:	b188      	cbz	r0, e594 <do_gps_start+0x140>
		LOG_ERR("Failed to set nmea mask (err: %d)", -errno);
    e570:	2301      	movs	r3, #1
    e572:	f04f 0600 	mov.w	r6, #0
    e576:	4a2a      	ldr	r2, [pc, #168]	; (e620 <do_gps_start+0x1cc>)
    e578:	f363 0607 	bfi	r6, r3, #0, #8
    e57c:	4b29      	ldr	r3, [pc, #164]	; (e624 <do_gps_start+0x1d0>)
    e57e:	1a9b      	subs	r3, r3, r2
    e580:	08db      	lsrs	r3, r3, #3
    e582:	f363 168f 	bfi	r6, r3, #6, #10
    e586:	f00d ff6d 	bl	1c464 <z_errno>
    e58a:	6801      	ldr	r1, [r0, #0]
    e58c:	4632      	mov	r2, r6
    e58e:	4249      	negs	r1, r1
    e590:	482b      	ldr	r0, [pc, #172]	; (e640 <do_gps_start+0x1ec>)
    e592:	e7c3      	b.n	e51c <do_gps_start+0xc8>
	ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS, NRF_SO_GNSS_START,
    e594:	2304      	movs	r3, #4
    e596:	2207      	movs	r2, #7
    e598:	9300      	str	r3, [sp, #0]
    e59a:	f44f 7101 	mov.w	r1, #516	; 0x204
    e59e:	ab09      	add	r3, sp, #36	; 0x24
    e5a0:	6828      	ldr	r0, [r5, #0]
    e5a2:	f008 fee1 	bl	17368 <nrf_setsockopt>
	if (ret != 0) {
    e5a6:	4604      	mov	r4, r0
    e5a8:	b188      	cbz	r0, e5ce <do_gps_start+0x17a>
		LOG_ERR("Failed to start GPS (err: %d)", -errno);
    e5aa:	2301      	movs	r3, #1
    e5ac:	f04f 0600 	mov.w	r6, #0
    e5b0:	4a1b      	ldr	r2, [pc, #108]	; (e620 <do_gps_start+0x1cc>)
    e5b2:	f363 0607 	bfi	r6, r3, #0, #8
    e5b6:	4b1b      	ldr	r3, [pc, #108]	; (e624 <do_gps_start+0x1d0>)
    e5b8:	1a9b      	subs	r3, r3, r2
    e5ba:	08db      	lsrs	r3, r3, #3
    e5bc:	f363 168f 	bfi	r6, r3, #6, #10
    e5c0:	f00d ff50 	bl	1c464 <z_errno>
    e5c4:	6801      	ldr	r1, [r0, #0]
    e5c6:	4632      	mov	r2, r6
    e5c8:	4249      	negs	r1, r1
    e5ca:	481e      	ldr	r0, [pc, #120]	; (e644 <do_gps_start+0x1f0>)
    e5cc:	e7a6      	b.n	e51c <do_gps_start+0xc8>
	if (gps_thread_id != NULL) {
    e5ce:	4e1e      	ldr	r6, [pc, #120]	; (e648 <do_gps_start+0x1f4>)
    e5d0:	6830      	ldr	r0, [r6, #0]
    e5d2:	b198      	cbz	r0, e5fc <do_gps_start+0x1a8>
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_RESUME);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_resume(thread);
    e5d4:	f00d fcca 	bl	1bf6c <z_impl_k_thread_resume>
	gps_client_inst.running = true;
    e5d8:	2301      	movs	r3, #1
	sprintf(buf, "#XGPSRUN: 1,%d\r\n", gps_client_inst.mask);
    e5da:	88aa      	ldrh	r2, [r5, #4]
    e5dc:	491b      	ldr	r1, [pc, #108]	; (e64c <do_gps_start+0x1f8>)
    e5de:	4815      	ldr	r0, [pc, #84]	; (e634 <do_gps_start+0x1e0>)
	gps_client_inst.running = true;
    e5e0:	71ab      	strb	r3, [r5, #6]
	sprintf(buf, "#XGPSRUN: 1,%d\r\n", gps_client_inst.mask);
    e5e2:	f002 fcc9 	bl	10f78 <sprintf>
	gps_client_inst.callback(buf);
    e5e6:	68ab      	ldr	r3, [r5, #8]
    e5e8:	4812      	ldr	r0, [pc, #72]	; (e634 <do_gps_start+0x1e0>)
    e5ea:	4798      	blx	r3
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_GET);
		return (s64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_get();
    e5ec:	f010 fc13 	bl	1ee16 <z_impl_k_uptime_get>
	ttft_start = k_uptime_get();
    e5f0:	4b17      	ldr	r3, [pc, #92]	; (e650 <do_gps_start+0x1fc>)
    e5f2:	e9c3 0100 	strd	r0, r1, [r3]
}
    e5f6:	4620      	mov	r0, r4
    e5f8:	b00b      	add	sp, #44	; 0x2c
    e5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    e5fc:	230e      	movs	r3, #14
    e5fe:	e9cd 4404 	strd	r4, r4, [sp, #16]
    e602:	e9cd 4302 	strd	r4, r3, [sp, #8]
    e606:	e9cd 4400 	strd	r4, r4, [sp]
    e60a:	4b12      	ldr	r3, [pc, #72]	; (e654 <do_gps_start+0x200>)
    e60c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e610:	4911      	ldr	r1, [pc, #68]	; (e658 <do_gps_start+0x204>)
    e612:	4812      	ldr	r0, [pc, #72]	; (e65c <do_gps_start+0x208>)
    e614:	f00d fc36 	bl	1be84 <z_impl_k_thread_create>
		gps_thread_id = k_thread_create(&gps_thread, gps_thread_stack,
    e618:	6030      	str	r0, [r6, #0]
    e61a:	e7dd      	b.n	e5d8 <do_gps_start+0x184>
    e61c:	2002013c 	.word	0x2002013c
    e620:	0001f390 	.word	0x0001f390
    e624:	0001f3c8 	.word	0x0001f3c8
    e628:	000202c5 	.word	0x000202c5
    e62c:	00020389 	.word	0x00020389
    e630:	0002039e 	.word	0x0002039e
    e634:	20026503 	.word	0x20026503
    e638:	000202e5 	.word	0x000202e5
    e63c:	0002030d 	.word	0x0002030d
    e640:	00020338 	.word	0x00020338
    e644:	0002035a 	.word	0x0002035a
    e648:	200201f8 	.word	0x200201f8
    e64c:	00020378 	.word	0x00020378
    e650:	20020100 	.word	0x20020100
    e654:	0000e755 	.word	0x0000e755
    e658:	200266b8 	.word	0x200266b8
    e65c:	20020148 	.word	0x20020148

0000e660 <handle_at_gpsrun>:
static int handle_at_gpsrun(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	u16_t op;

	switch (cmd_type) {
    e660:	2801      	cmp	r0, #1
{
    e662:	b513      	push	{r0, r1, r4, lr}
    e664:	4604      	mov	r4, r0
	switch (cmd_type) {
    e666:	d004      	beq.n	e672 <handle_at_gpsrun+0x12>
    e668:	2802      	cmp	r0, #2
    e66a:	d04c      	beq.n	e706 <handle_at_gpsrun+0xa6>
	case AT_CMD_TYPE_SET_COMMAND:
		if (at_params_valid_count_get(&m_param_list) < 2) {
			return -EINVAL;
    e66c:	f06f 0415 	mvn.w	r4, #21
    e670:	e02d      	b.n	e6ce <handle_at_gpsrun+0x6e>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    e672:	482e      	ldr	r0, [pc, #184]	; (e72c <handle_at_gpsrun+0xcc>)
    e674:	f010 f913 	bl	1e89e <at_params_valid_count_get>
    e678:	2801      	cmp	r0, #1
    e67a:	d9f7      	bls.n	e66c <handle_at_gpsrun+0xc>
		}
		err = at_params_short_get(&m_param_list, 1, &op);
    e67c:	4621      	mov	r1, r4
    e67e:	f10d 0206 	add.w	r2, sp, #6
    e682:	482a      	ldr	r0, [pc, #168]	; (e72c <handle_at_gpsrun+0xcc>)
    e684:	f010 f8d6 	bl	1e834 <at_params_short_get>
		if (err < 0) {
    e688:	1e04      	subs	r4, r0, #0
    e68a:	db20      	blt.n	e6ce <handle_at_gpsrun+0x6e>
			return err;
		}
		if (op == 1) {
    e68c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    e690:	2b01      	cmp	r3, #1
    e692:	d123      	bne.n	e6dc <handle_at_gpsrun+0x7c>
			if (at_params_valid_count_get(&m_param_list) > 2) {
    e694:	4825      	ldr	r0, [pc, #148]	; (e72c <handle_at_gpsrun+0xcc>)
    e696:	f010 f902 	bl	1e89e <at_params_valid_count_get>
    e69a:	2802      	cmp	r0, #2
    e69c:	d906      	bls.n	e6ac <handle_at_gpsrun+0x4c>
				err = at_params_short_get(&m_param_list, 2,
    e69e:	4a24      	ldr	r2, [pc, #144]	; (e730 <handle_at_gpsrun+0xd0>)
    e6a0:	2102      	movs	r1, #2
    e6a2:	4822      	ldr	r0, [pc, #136]	; (e72c <handle_at_gpsrun+0xcc>)
    e6a4:	f010 f8c6 	bl	1e834 <at_params_short_get>
							&gps_client_inst.mask);
				if (err < 0) {
    e6a8:	1e04      	subs	r4, r0, #0
    e6aa:	db10      	blt.n	e6ce <handle_at_gpsrun+0x6e>
					return err;
				}
			}
			if (gps_client_inst.running) {
    e6ac:	4b21      	ldr	r3, [pc, #132]	; (e734 <handle_at_gpsrun+0xd4>)
    e6ae:	799b      	ldrb	r3, [r3, #6]
    e6b0:	b183      	cbz	r3, e6d4 <handle_at_gpsrun+0x74>
				LOG_WRN("GPS is running");
    e6b2:	2302      	movs	r3, #2
    e6b4:	f04f 0100 	mov.w	r1, #0
    e6b8:	4a1f      	ldr	r2, [pc, #124]	; (e738 <handle_at_gpsrun+0xd8>)
    e6ba:	f363 0107 	bfi	r1, r3, #0, #8
    e6be:	4b1f      	ldr	r3, [pc, #124]	; (e73c <handle_at_gpsrun+0xdc>)
    e6c0:	481f      	ldr	r0, [pc, #124]	; (e740 <handle_at_gpsrun+0xe0>)
    e6c2:	1a9b      	subs	r3, r3, r2
    e6c4:	08db      	lsrs	r3, r3, #3
    e6c6:	f363 118f 	bfi	r1, r3, #6, #10
			} else {
				err = do_gps_start();
			}
		} else if (op == 0) {
			if (!gps_client_inst.running) {
				LOG_WRN("GPS is not running");
    e6ca:	f00e fa5e 	bl	1cb8a <log_0>
	default:
		break;
	}

	return err;
}
    e6ce:	4620      	mov	r0, r4
    e6d0:	b002      	add	sp, #8
    e6d2:	bd10      	pop	{r4, pc}
				err = do_gps_start();
    e6d4:	f7ff febe 	bl	e454 <do_gps_start>
				err = do_gps_stop();
    e6d8:	4604      	mov	r4, r0
    e6da:	e7f8      	b.n	e6ce <handle_at_gpsrun+0x6e>
		} else if (op == 0) {
    e6dc:	2b00      	cmp	r3, #0
    e6de:	d1f6      	bne.n	e6ce <handle_at_gpsrun+0x6e>
			if (!gps_client_inst.running) {
    e6e0:	4b14      	ldr	r3, [pc, #80]	; (e734 <handle_at_gpsrun+0xd4>)
    e6e2:	799b      	ldrb	r3, [r3, #6]
    e6e4:	b963      	cbnz	r3, e700 <handle_at_gpsrun+0xa0>
				LOG_WRN("GPS is not running");
    e6e6:	2302      	movs	r3, #2
    e6e8:	f04f 0100 	mov.w	r1, #0
    e6ec:	4a12      	ldr	r2, [pc, #72]	; (e738 <handle_at_gpsrun+0xd8>)
    e6ee:	f363 0107 	bfi	r1, r3, #0, #8
    e6f2:	4b12      	ldr	r3, [pc, #72]	; (e73c <handle_at_gpsrun+0xdc>)
    e6f4:	4813      	ldr	r0, [pc, #76]	; (e744 <handle_at_gpsrun+0xe4>)
    e6f6:	1a9b      	subs	r3, r3, r2
    e6f8:	08db      	lsrs	r3, r3, #3
    e6fa:	f363 118f 	bfi	r1, r3, #6, #10
    e6fe:	e7e4      	b.n	e6ca <handle_at_gpsrun+0x6a>
				err = do_gps_stop();
    e700:	f7ff fe64 	bl	e3cc <do_gps_stop>
    e704:	e7e8      	b.n	e6d8 <handle_at_gpsrun+0x78>
		if (gps_client_inst.running) {
    e706:	4c0b      	ldr	r4, [pc, #44]	; (e734 <handle_at_gpsrun+0xd4>)
    e708:	79a3      	ldrb	r3, [r4, #6]
    e70a:	b14b      	cbz	r3, e720 <handle_at_gpsrun+0xc0>
			sprintf(buf, "#XGPSRUN: 1,%d\r\n", gps_client_inst.mask);
    e70c:	88a2      	ldrh	r2, [r4, #4]
    e70e:	490e      	ldr	r1, [pc, #56]	; (e748 <handle_at_gpsrun+0xe8>)
    e710:	480e      	ldr	r0, [pc, #56]	; (e74c <handle_at_gpsrun+0xec>)
    e712:	f002 fc31 	bl	10f78 <sprintf>
		gps_client_inst.callback(buf);
    e716:	68a3      	ldr	r3, [r4, #8]
    e718:	480c      	ldr	r0, [pc, #48]	; (e74c <handle_at_gpsrun+0xec>)
    e71a:	4798      	blx	r3
		err = 0;
    e71c:	2400      	movs	r4, #0
		break;
    e71e:	e7d6      	b.n	e6ce <handle_at_gpsrun+0x6e>
			sprintf(buf, "#XGPSRUN: 0\r\n");
    e720:	490b      	ldr	r1, [pc, #44]	; (e750 <handle_at_gpsrun+0xf0>)
    e722:	480a      	ldr	r0, [pc, #40]	; (e74c <handle_at_gpsrun+0xec>)
    e724:	f002 fc28 	bl	10f78 <sprintf>
    e728:	e7f5      	b.n	e716 <handle_at_gpsrun+0xb6>
    e72a:	bf00      	nop
    e72c:	20020110 	.word	0x20020110
    e730:	20020140 	.word	0x20020140
    e734:	2002013c 	.word	0x2002013c
    e738:	0001f390 	.word	0x0001f390
    e73c:	0001f3c8 	.word	0x0001f3c8
    e740:	000204f9 	.word	0x000204f9
    e744:	00020508 	.word	0x00020508
    e748:	00020378 	.word	0x00020378
    e74c:	20026503 	.word	0x20026503
    e750:	000203ca 	.word	0x000203ca

0000e754 <gps_thread_fn>:
{
    e754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
		if (nrf_recv(gps_client_inst.sock, &gps_data, sizeof(gps_data), 0)
    e758:	4f62      	ldr	r7, [pc, #392]	; (e8e4 <gps_thread_fn+0x190>)
    e75a:	4e63      	ldr	r6, [pc, #396]	; (e8e8 <gps_thread_fn+0x194>)
    e75c:	463d      	mov	r5, r7
	LOG_INF("NOTIFY!");
    e75e:	4b63      	ldr	r3, [pc, #396]	; (e8ec <gps_thread_fn+0x198>)
		if (nrf_recv(gps_client_inst.sock, &gps_data, sizeof(gps_data), 0)
    e760:	4c63      	ldr	r4, [pc, #396]	; (e8f0 <gps_thread_fn+0x19c>)
	LOG_INF("NOTIFY!");
    e762:	1af6      	subs	r6, r6, r3
    e764:	f3c6 06c9 	ubfx	r6, r6, #3, #10
		if (nrf_recv(gps_client_inst.sock, &gps_data, sizeof(gps_data), 0)
    e768:	2300      	movs	r3, #0
    e76a:	22d8      	movs	r2, #216	; 0xd8
    e76c:	4960      	ldr	r1, [pc, #384]	; (e8f0 <gps_thread_fn+0x19c>)
    e76e:	6838      	ldr	r0, [r7, #0]
    e770:	f008 fd96 	bl	172a0 <nrf_recv>
    e774:	2800      	cmp	r0, #0
    e776:	dc21      	bgt.n	e7bc <gps_thread_fn+0x68>
			LOG_ERR("GPS nrf_recv(): %d", -errno);
    e778:	2301      	movs	r3, #1
    e77a:	f04f 0400 	mov.w	r4, #0
    e77e:	f363 0407 	bfi	r4, r3, #0, #8
    e782:	f00d fe6f 	bl	1c464 <z_errno>
    e786:	6801      	ldr	r1, [r0, #0]
    e788:	f366 148f 	bfi	r4, r6, #6, #10
    e78c:	4622      	mov	r2, r4
    e78e:	4249      	negs	r1, r1
    e790:	4858      	ldr	r0, [pc, #352]	; (e8f4 <gps_thread_fn+0x1a0>)
    e792:	f00e fa07 	bl	1cba4 <log_1>
			sprintf(buf, "#XGPSRUN: %d\r\n", -errno);
    e796:	f00d fe65 	bl	1c464 <z_errno>
    e79a:	6802      	ldr	r2, [r0, #0]
    e79c:	4956      	ldr	r1, [pc, #344]	; (e8f8 <gps_thread_fn+0x1a4>)
    e79e:	4252      	negs	r2, r2
    e7a0:	4856      	ldr	r0, [pc, #344]	; (e8fc <gps_thread_fn+0x1a8>)
    e7a2:	f002 fbe9 	bl	10f78 <sprintf>
			gps_client_inst.callback(buf);
    e7a6:	68bb      	ldr	r3, [r7, #8]
    e7a8:	4854      	ldr	r0, [pc, #336]	; (e8fc <gps_thread_fn+0x1a8>)
    e7aa:	4798      	blx	r3
			nrf_close(gps_client_inst.sock);
    e7ac:	6838      	ldr	r0, [r7, #0]
    e7ae:	f008 fd17 	bl	171e0 <nrf_close>
			gps_client_inst.running = false;
    e7b2:	2300      	movs	r3, #0
    e7b4:	71bb      	strb	r3, [r7, #6]
}
    e7b6:	b004      	add	sp, #16
    e7b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (gps_data.data_id != NRF_GNSS_PVT_DATA_ID || gps_client_inst.has_fix) {
    e7bc:	7823      	ldrb	r3, [r4, #0]
    e7be:	2b01      	cmp	r3, #1
    e7c0:	d1d2      	bne.n	e768 <gps_thread_fn+0x14>
    e7c2:	79f9      	ldrb	r1, [r7, #7]
    e7c4:	2900      	cmp	r1, #0
    e7c6:	d055      	beq.n	e874 <gps_thread_fn+0x120>
			if (IS_FIX(gps_data.pvt.flags)) {
    e7c8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    e7cc:	07db      	lsls	r3, r3, #31
    e7ce:	d5cb      	bpl.n	e768 <gps_thread_fn+0x14>
	notified = 1;
    e7d0:	f04f 0901 	mov.w	r9, #1
	LOG_INF("NOTIFY!");
    e7d4:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    e7d8:	f043 0303 	orr.w	r3, r3, #3
    e7dc:	f363 0807 	bfi	r8, r3, #0, #8
    e7e0:	f366 188f 	bfi	r8, r6, #6, #10
    e7e4:	4641      	mov	r1, r8
    e7e6:	4846      	ldr	r0, [pc, #280]	; (e900 <gps_thread_fn+0x1ac>)
    e7e8:	f00e f9cf 	bl	1cb8a <log_0>
	current_location.lat = gps_data.pvt.latitude;
    e7ec:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
	notified = 1;
    e7f0:	4b44      	ldr	r3, [pc, #272]	; (e904 <gps_thread_fn+0x1b0>)
	current_location.alt = gps_data.pvt.altitude;
    e7f2:	69a2      	ldr	r2, [r4, #24]
	notified = 1;
    e7f4:	f883 9000 	strb.w	r9, [r3]
	current_location.lat = gps_data.pvt.latitude;
    e7f8:	4b43      	ldr	r3, [pc, #268]	; (e908 <gps_thread_fn+0x1b4>)
	current_location.alt = gps_data.pvt.altitude;
    e7fa:	611a      	str	r2, [r3, #16]
	current_location.hdop = gps_data.pvt.hdop;
    e7fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	current_location.lat = gps_data.pvt.latitude;
    e7fe:	e9c3 0100 	strd	r0, r1, [r3]
	current_location.lon = gps_data.pvt.longitude;
    e802:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
	current_location.hdop = gps_data.pvt.hdop;
    e806:	615a      	str	r2, [r3, #20]
	current_location.datetime = gps_data.pvt.datetime;
    e808:	4a40      	ldr	r2, [pc, #256]	; (e90c <gps_thread_fn+0x1b8>)
	current_location.lon = gps_data.pvt.longitude;
    e80a:	e9c3 0102 	strd	r0, r1, [r3, #8]
	current_location.datetime = gps_data.pvt.datetime;
    e80e:	ca07      	ldmia	r2, {r0, r1, r2}
    e810:	3318      	adds	r3, #24
    e812:	c303      	stmia	r3!, {r0, r1}
	gps_client_inst.callback(buf);
    e814:	4839      	ldr	r0, [pc, #228]	; (e8fc <gps_thread_fn+0x1a8>)
	current_location.datetime = gps_data.pvt.datetime;
    e816:	801a      	strh	r2, [r3, #0]
	gps_client_inst.callback(buf);
    e818:	68ab      	ldr	r3, [r5, #8]
    e81a:	4798      	blx	r3
	sprintf(buf, "#XGPSP: %04u-%02u-%02u %02u:%02u:%02u\r\n",
    e81c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    e820:	493b      	ldr	r1, [pc, #236]	; (e910 <gps_thread_fn+0x1bc>)
    e822:	9303      	str	r3, [sp, #12]
    e824:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    e828:	4834      	ldr	r0, [pc, #208]	; (e8fc <gps_thread_fn+0x1a8>)
    e82a:	9302      	str	r3, [sp, #8]
    e82c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    e830:	9301      	str	r3, [sp, #4]
    e832:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    e836:	9300      	str	r3, [sp, #0]
    e838:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    e83c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    e83e:	f002 fb9b 	bl	10f78 <sprintf>
	gps_client_inst.callback(buf);
    e842:	68ab      	ldr	r3, [r5, #8]
    e844:	482d      	ldr	r0, [pc, #180]	; (e8fc <gps_thread_fn+0x1a8>)
    e846:	4798      	blx	r3
				if (!gps_client_inst.has_fix) {
    e848:	79eb      	ldrb	r3, [r5, #7]
    e84a:	2b00      	cmp	r3, #0
    e84c:	d18c      	bne.n	e768 <gps_thread_fn+0x14>
	return z_impl_k_uptime_get();
    e84e:	f010 fae2 	bl	1ee16 <z_impl_k_uptime_get>
						(int)(now - ttft_start)/1000);
    e852:	4b30      	ldr	r3, [pc, #192]	; (e914 <gps_thread_fn+0x1c0>)
					sprintf(buf, "#	: TTFF %d sec\r\n",
    e854:	4930      	ldr	r1, [pc, #192]	; (e918 <gps_thread_fn+0x1c4>)
						(int)(now - ttft_start)/1000);
    e856:	681a      	ldr	r2, [r3, #0]
					sprintf(buf, "#	: TTFF %d sec\r\n",
    e858:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
						(int)(now - ttft_start)/1000);
    e85c:	1a82      	subs	r2, r0, r2
					sprintf(buf, "#	: TTFF %d sec\r\n",
    e85e:	fb92 f2f3 	sdiv	r2, r2, r3
    e862:	4826      	ldr	r0, [pc, #152]	; (e8fc <gps_thread_fn+0x1a8>)
    e864:	f002 fb88 	bl	10f78 <sprintf>
					gps_client_inst.callback(buf);
    e868:	68ab      	ldr	r3, [r5, #8]
    e86a:	4824      	ldr	r0, [pc, #144]	; (e8fc <gps_thread_fn+0x1a8>)
    e86c:	4798      	blx	r3
					gps_client_inst.has_fix = true;
    e86e:	f885 9007 	strb.w	r9, [r5, #7]
    e872:	e779      	b.n	e768 <gps_thread_fn+0x14>
	u8_t in_fix = 0;
    e874:	460b      	mov	r3, r1
	u8_t tracked = 0;
    e876:	4689      	mov	r9, r1
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
    e878:	4608      	mov	r0, r1
    e87a:	4a1d      	ldr	r2, [pc, #116]	; (e8f0 <gps_thread_fn+0x19c>)
		if ((gps_data.pvt.sv[i].sv > 0) &&
    e87c:	f8b2 c046 	ldrh.w	ip, [r2, #70]	; 0x46
    e880:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    e884:	f1bc 0f1f 	cmp.w	ip, #31
    e888:	d810      	bhi.n	e8ac <gps_thread_fn+0x158>
			if (IS_FIX(gps_data.pvt.sv[i].flags)) {
    e88a:	f892 c050 	ldrb.w	ip, [r2, #80]	; 0x50
			tracked++;
    e88e:	f109 0901 	add.w	r9, r9, #1
			if (IS_FIX(gps_data.pvt.sv[i].flags)) {
    e892:	f01c 0f01 	tst.w	ip, #1
				in_fix++;
    e896:	bf1c      	itt	ne
    e898:	3301      	addne	r3, #1
    e89a:	b2db      	uxtbne	r3, r3
			if (IS_UNHEALTHY(gps_data.pvt.sv[i].flags)) {
    e89c:	f01c 0f08 	tst.w	ip, #8
				unhealthy++;
    e8a0:	bf18      	it	ne
    e8a2:	3101      	addne	r1, #1
			tracked++;
    e8a4:	fa5f f989 	uxtb.w	r9, r9
				unhealthy++;
    e8a8:	bf18      	it	ne
    e8aa:	b2c9      	uxtbne	r1, r1
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
    e8ac:	3001      	adds	r0, #1
    e8ae:	280c      	cmp	r0, #12
    e8b0:	f102 020c 	add.w	r2, r2, #12
    e8b4:	d1e2      	bne.n	e87c <gps_thread_fn+0x128>
	if (last_tracked != tracked) {
    e8b6:	f8df a068 	ldr.w	sl, [pc, #104]	; e920 <gps_thread_fn+0x1cc>
    e8ba:	f89a 2000 	ldrb.w	r2, [sl]
    e8be:	454a      	cmp	r2, r9
    e8c0:	d082      	beq.n	e7c8 <gps_thread_fn+0x74>
		sprintf(buf, "#XGPSS: tracking %d using %d unhealthy %d\r\n",
    e8c2:	9100      	str	r1, [sp, #0]
    e8c4:	464a      	mov	r2, r9
    e8c6:	4915      	ldr	r1, [pc, #84]	; (e91c <gps_thread_fn+0x1c8>)
    e8c8:	480c      	ldr	r0, [pc, #48]	; (e8fc <gps_thread_fn+0x1a8>)
    e8ca:	f002 fb55 	bl	10f78 <sprintf>
		gps_client_inst.callback(buf);
    e8ce:	68ab      	ldr	r3, [r5, #8]
    e8d0:	480a      	ldr	r0, [pc, #40]	; (e8fc <gps_thread_fn+0x1a8>)
    e8d2:	4798      	blx	r3
		switch (gps_data.data_id) {
    e8d4:	7823      	ldrb	r3, [r4, #0]
		last_tracked = tracked;
    e8d6:	f88a 9000 	strb.w	r9, [sl]
		switch (gps_data.data_id) {
    e8da:	2b01      	cmp	r3, #1
    e8dc:	f43f af74 	beq.w	e7c8 <gps_thread_fn+0x74>
    e8e0:	e742      	b.n	e768 <gps_thread_fn+0x14>
    e8e2:	bf00      	nop
    e8e4:	2002013c 	.word	0x2002013c
    e8e8:	0001f3c8 	.word	0x0001f3c8
    e8ec:	0001f390 	.word	0x0001f390
    e8f0:	20020028 	.word	0x20020028
    e8f4:	00020478 	.word	0x00020478
    e8f8:	0002039e 	.word	0x0002039e
    e8fc:	20026503 	.word	0x20026503
    e900:	000204b7 	.word	0x000204b7
    e904:	20026544 	.word	0x20026544
    e908:	20020000 	.word	0x20020000
    e90c:	20020050 	.word	0x20020050
    e910:	000204bf 	.word	0x000204bf
    e914:	20020100 	.word	0x20020100
    e918:	000204e7 	.word	0x000204e7
    e91c:	0002048b 	.word	0x0002048b
    e920:	20026543 	.word	0x20026543

0000e924 <slm_at_gps_parse>:

/**@brief API to handle GPS AT commands
 */
int slm_at_gps_parse(const char *at_cmd)
{
    e924:	b538      	push	{r3, r4, r5, lr}
    e926:	4604      	mov	r4, r0
	int ret = -ENOTSUP;
	enum at_cmd_type type;

	for (int i = 0; i < AT_GPS_MAX; i++) {
		u8_t cmd_len = strlen(m_gps_at_list[i].string);
    e928:	481a      	ldr	r0, [pc, #104]	; (e994 <slm_at_gps_parse+0x70>)
    e92a:	f00e fe69 	bl	1d600 <strlen>
    e92e:	2300      	movs	r3, #0
    e930:	4918      	ldr	r1, [pc, #96]	; (e994 <slm_at_gps_parse+0x70>)
    e932:	b2c0      	uxtb	r0, r0
    e934:	4283      	cmp	r3, r0
    e936:	db17      	blt.n	e968 <slm_at_gps_parse+0x44>

		if (slm_at_cmd_cmp(at_cmd, m_gps_at_list[i].string, cmd_len)) {
			ret = at_parser_params_from_str(at_cmd, NULL,
    e938:	2100      	movs	r1, #0
    e93a:	4a17      	ldr	r2, [pc, #92]	; (e998 <slm_at_gps_parse+0x74>)
    e93c:	4620      	mov	r0, r4
    e93e:	f00f fe7f 	bl	1e640 <at_parser_params_from_str>
						&m_param_list);
			if (ret < 0) {
    e942:	1e01      	subs	r1, r0, #0
    e944:	da1c      	bge.n	e980 <slm_at_gps_parse+0x5c>
				LOG_ERR("Failed to parse AT command %d", ret);
    e946:	2301      	movs	r3, #1
    e948:	f04f 0200 	mov.w	r2, #0
    e94c:	4813      	ldr	r0, [pc, #76]	; (e99c <slm_at_gps_parse+0x78>)
    e94e:	f363 0207 	bfi	r2, r3, #0, #8
    e952:	4b13      	ldr	r3, [pc, #76]	; (e9a0 <slm_at_gps_parse+0x7c>)
    e954:	1a1b      	subs	r3, r3, r0
    e956:	08db      	lsrs	r3, r3, #3
    e958:	4812      	ldr	r0, [pc, #72]	; (e9a4 <slm_at_gps_parse+0x80>)
    e95a:	f363 128f 	bfi	r2, r3, #6, #10
    e95e:	f00e f921 	bl	1cba4 <log_1>
				return -EINVAL;
    e962:	f06f 0015 	mvn.w	r0, #21
			break;
		}
	}

	return ret;
}
    e966:	bd38      	pop	{r3, r4, r5, pc}
		if (toupper(*(cmd + i)) != *(slm_cmd + i)) {
    e968:	5ce2      	ldrb	r2, [r4, r3]
    e96a:	f1a2 0561 	sub.w	r5, r2, #97	; 0x61
    e96e:	2d19      	cmp	r5, #25
    e970:	f811 5b01 	ldrb.w	r5, [r1], #1
    e974:	bf98      	it	ls
    e976:	3a20      	subls	r2, #32
    e978:	4295      	cmp	r5, r2
    e97a:	d108      	bne.n	e98e <slm_at_gps_parse+0x6a>
	for (int i = 0; i < length; i++) {
    e97c:	3301      	adds	r3, #1
    e97e:	e7d9      	b.n	e934 <slm_at_gps_parse+0x10>
			type = at_parser_cmd_type_get(at_cmd);
    e980:	4620      	mov	r0, r4
    e982:	f00f fe60 	bl	1e646 <at_parser_cmd_type_get>
}
    e986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			ret = m_gps_at_list[i].handler(type);
    e98a:	f7ff be69 	b.w	e660 <handle_at_gpsrun>
	int ret = -ENOTSUP;
    e98e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    e992:	e7e8      	b.n	e966 <slm_at_gps_parse+0x42>
    e994:	0002053f 	.word	0x0002053f
    e998:	20020110 	.word	0x20020110
    e99c:	0001f390 	.word	0x0001f390
    e9a0:	0001f3c8 	.word	0x0001f3c8
    e9a4:	0001f9e9 	.word	0x0001f9e9

0000e9a8 <slm_at_gps_init>:
///////////////////////////////////////////////////////////////////////////

/**@brief API to initialize GPS AT commands handler
 */
int slm_at_gps_init(at_cmd_handler_t callback)
{
    e9a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e9ac:	4b40      	ldr	r3, [pc, #256]	; (eab0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x50>)
    e9ae:	4c41      	ldr	r4, [pc, #260]	; (eab4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x54>)
    e9b0:	1ae4      	subs	r4, r4, r3
    e9b2:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (callback == NULL) {
    e9b6:	b970      	cbnz	r0, e9d6 <slm_at_gps_init+0x2e>
		LOG_ERR("No callback");
    e9b8:	2301      	movs	r3, #1
    e9ba:	f04f 0100 	mov.w	r1, #0
    e9be:	f363 0107 	bfi	r1, r3, #0, #8
    e9c2:	483d      	ldr	r0, [pc, #244]	; (eab8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x58>)
    e9c4:	f364 118f 	bfi	r1, r4, #6, #10
    e9c8:	f00e f8df 	bl	1cb8a <log_0>
		return -EINVAL;
    e9cc:	f06f 0015 	mvn.w	r0, #21
	enable_gps();
	do_gps_start();
	//////////////////////////////////////////////////////////////////////

	return 0;
}
    e9d0:	b003      	add	sp, #12
    e9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	gps_client_inst.mask = NRF_GNSS_NMEA_GGA_MASK; ///////////////////////
    e9d6:	2201      	movs	r2, #1
    e9d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	gps_thread_id = NULL;
    e9dc:	2500      	movs	r5, #0
	gps_client_inst.sock = INVALID_SOCKET;
    e9de:	4b37      	ldr	r3, [pc, #220]	; (eabc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5c>)
	return socket_ops->socket(family, type, proto);
    e9e0:	4f37      	ldr	r7, [pc, #220]	; (eac0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x60>)
	gps_client_inst.mask = NRF_GNSS_NMEA_GGA_MASK; ///////////////////////
    e9e2:	e9c3 1200 	strd	r1, r2, [r3]
	gps_client_inst.callback = callback;
    e9e6:	6098      	str	r0, [r3, #8]
	gps_thread_id = NULL;
    e9e8:	4b36      	ldr	r3, [pc, #216]	; (eac4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x64>)
	LOG_INF("Initializing GPS Module");
    e9ea:	f04f 0100 	mov.w	r1, #0
	gps_thread_id = NULL;
    e9ee:	601d      	str	r5, [r3, #0]
	LOG_INF("Initializing GPS Module");
    e9f0:	2303      	movs	r3, #3
    e9f2:	f363 0107 	bfi	r1, r3, #0, #8
    e9f6:	f364 118f 	bfi	r1, r4, #6, #10
    e9fa:	4833      	ldr	r0, [pc, #204]	; (eac8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x68>)
    e9fc:	f00e f8c5 	bl	1cb8a <log_0>
    ea00:	683b      	ldr	r3, [r7, #0]
    ea02:	f240 2201 	movw	r2, #513	; 0x201
    ea06:	681b      	ldr	r3, [r3, #0]
    ea08:	4629      	mov	r1, r5
    ea0a:	2066      	movs	r0, #102	; 0x66
    ea0c:	4798      	blx	r3
	if (at_sock < 0) {
    ea0e:	1e06      	subs	r6, r0, #0
    ea10:	46b8      	mov	r8, r7
    ea12:	db20      	blt.n	ea56 <slm_at_gps_init+0xae>
    ea14:	4f2d      	ldr	r7, [pc, #180]	; (eacc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6c>)
		if (memcmp(buf, "OK", 2) != 0) {
    ea16:	f8df a0c0 	ldr.w	sl, [pc, #192]	; ead8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x78>
		LOG_INF("%s",gps_at_commands[i]);
    ea1a:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    ea1e:	f043 0303 	orr.w	r3, r3, #3
    ea22:	f363 0907 	bfi	r9, r3, #0, #8
    ea26:	f364 198f 	bfi	r9, r4, #6, #10
    ea2a:	464a      	mov	r2, r9
    ea2c:	4639      	mov	r1, r7
    ea2e:	4828      	ldr	r0, [pc, #160]	; (ead0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x70>)
    ea30:	f00e f8b8 	bl	1cba4 <log_1>
		bytes_sent = send(at_sock, gps_at_commands[i],
    ea34:	4638      	mov	r0, r7
    ea36:	f00e fde3 	bl	1d600 <strlen>
	return socket_ops->send(sock, buf, len, flags);
    ea3a:	f8d8 3000 	ldr.w	r3, [r8]
    ea3e:	4602      	mov	r2, r0
    ea40:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
    ea44:	4639      	mov	r1, r7
    ea46:	2300      	movs	r3, #0
    ea48:	4630      	mov	r0, r6
    ea4a:	47d8      	blx	fp
		if (bytes_sent < 0) {
    ea4c:	2800      	cmp	r0, #0
    ea4e:	da06      	bge.n	ea5e <slm_at_gps_init+0xb6>
			close(at_sock);
    ea50:	4630      	mov	r0, r6
    ea52:	f7ff fcb5 	bl	e3c0 <close>
	do_gps_start();
    ea56:	f7ff fcfd 	bl	e454 <do_gps_start>
	return 0;
    ea5a:	2000      	movs	r0, #0
    ea5c:	e7b8      	b.n	e9d0 <slm_at_gps_init+0x28>
	return socket_ops->recv(sock, buf, max_len, flags);
    ea5e:	f8d8 3000 	ldr.w	r3, [r8]
    ea62:	2202      	movs	r2, #2
    ea64:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
    ea68:	a901      	add	r1, sp, #4
    ea6a:	2300      	movs	r3, #0
    ea6c:	4630      	mov	r0, r6
    ea6e:	47d8      	blx	fp
		} while (bytes_received == 0);
    ea70:	2800      	cmp	r0, #0
    ea72:	d0f4      	beq.n	ea5e <slm_at_gps_init+0xb6>
		if (memcmp(buf, "OK", 2) != 0) {
    ea74:	2202      	movs	r2, #2
    ea76:	4651      	mov	r1, sl
    ea78:	a801      	add	r0, sp, #4
    ea7a:	f00e fdec 	bl	1d656 <memcmp>
    ea7e:	2800      	cmp	r0, #0
    ea80:	d1e6      	bne.n	ea50 <slm_at_gps_init+0xa8>
	return z_impl_k_sleep(ms);
    ea82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	for (int i = 0; i < ARRAY_SIZE(gps_at_commands); i++) {
    ea86:	3501      	adds	r5, #1
    ea88:	f00d f912 	bl	1bcb0 <z_impl_k_sleep>
    ea8c:	2d04      	cmp	r5, #4
    ea8e:	f107 0728 	add.w	r7, r7, #40	; 0x28
    ea92:	d1c2      	bne.n	ea1a <slm_at_gps_init+0x72>
	close(at_sock);
    ea94:	4630      	mov	r0, r6
    ea96:	f7ff fc93 	bl	e3c0 <close>
	LOG_INF("GPS Enabled");
    ea9a:	2303      	movs	r3, #3
    ea9c:	f04f 0100 	mov.w	r1, #0
    eaa0:	f363 0107 	bfi	r1, r3, #0, #8
    eaa4:	f364 118f 	bfi	r1, r4, #6, #10
    eaa8:	480a      	ldr	r0, [pc, #40]	; (ead4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x74>)
    eaaa:	f00e f86e 	bl	1cb8a <log_0>
	return 0;
    eaae:	e7d2      	b.n	ea56 <slm_at_gps_init+0xae>
    eab0:	0001f390 	.word	0x0001f390
    eab4:	0001f3c8 	.word	0x0001f3c8
    eab8:	000201ec 	.word	0x000201ec
    eabc:	2002013c 	.word	0x2002013c
    eac0:	20020344 	.word	0x20020344
    eac4:	200201f8 	.word	0x200201f8
    eac8:	0002051b 	.word	0x0002051b
    eacc:	000203d8 	.word	0x000203d8
    ead0:	00020de1 	.word	0x00020de1
    ead4:	00020533 	.word	0x00020533
    ead8:	00020226 	.word	0x00020226

0000eadc <slm_at_gps_uninit>:

/**@brief API to uninitialize GPS AT commands handler
 */
int slm_at_gps_uninit(void)
{
    eadc:	b510      	push	{r4, lr}
	if (gps_thread_id != NULL) {
    eade:	4c06      	ldr	r4, [pc, #24]	; (eaf8 <slm_at_gps_uninit+0x1c>)
    eae0:	6823      	ldr	r3, [r4, #0]
    eae2:	b133      	cbz	r3, eaf2 <slm_at_gps_uninit+0x16>
		do_gps_stop();
    eae4:	f7ff fc72 	bl	e3cc <do_gps_stop>
		k_thread_abort(gps_thread_id);
    eae8:	6820      	ldr	r0, [r4, #0]
	z_impl_k_thread_abort(thread);
    eaea:	f001 fb5b 	bl	101a4 <z_impl_k_thread_abort>
		gps_thread_id = NULL;
    eaee:	2300      	movs	r3, #0
    eaf0:	6023      	str	r3, [r4, #0]
	}

	return 0;
}
    eaf2:	2000      	movs	r0, #0
    eaf4:	bd10      	pop	{r4, pc}
    eaf6:	bf00      	nop
    eaf8:	200201f8 	.word	0x200201f8

0000eafc <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    eafc:	680b      	ldr	r3, [r1, #0]
    eafe:	3301      	adds	r3, #1
    eb00:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    eb02:	4b01      	ldr	r3, [pc, #4]	; (eb08 <char_out+0xc>)
    eb04:	681b      	ldr	r3, [r3, #0]
    eb06:	4718      	bx	r3
    eb08:	2002c50c 	.word	0x2002c50c

0000eb0c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    eb0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb10:	b085      	sub	sp, #20
    eb12:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    eb14:	469b      	mov	fp, r3
    eb16:	2c01      	cmp	r4, #1
    eb18:	bfb8      	it	lt
    eb1a:	2401      	movlt	r4, #1
    eb1c:	2b01      	cmp	r3, #1
    eb1e:	bf0c      	ite	eq
    eb20:	2330      	moveq	r3, #48	; 0x30
    eb22:	2320      	movne	r3, #32
    eb24:	4616      	mov	r6, r2
    eb26:	4682      	mov	sl, r0
    eb28:	4688      	mov	r8, r1
    eb2a:	2501      	movs	r5, #1
    eb2c:	270a      	movs	r7, #10
    eb2e:	2200      	movs	r2, #0
    eb30:	f8df 906c 	ldr.w	r9, [pc, #108]	; eba0 <_printk_dec_ulong+0x94>
    eb34:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    eb36:	fbb6 f3f9 	udiv	r3, r6, r9
    eb3a:	9301      	str	r3, [sp, #4]
    eb3c:	b90a      	cbnz	r2, eb42 <_printk_dec_ulong+0x36>
    eb3e:	45b1      	cmp	r9, r6
    eb40:	d81c      	bhi.n	eb7c <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    eb42:	9b01      	ldr	r3, [sp, #4]
    eb44:	4641      	mov	r1, r8
    eb46:	f103 0030 	add.w	r0, r3, #48	; 0x30
    eb4a:	47d0      	blx	sl
			found_largest_digit = 1;
    eb4c:	2201      	movs	r2, #1
			digits++;
    eb4e:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    eb50:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    eb52:	3f01      	subs	r7, #1
		remainder %= pos;
    eb54:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
    eb58:	230a      	movs	r3, #10
	while (pos >= 10) {
    eb5a:	2f01      	cmp	r7, #1
		pos /= 10;
    eb5c:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    eb60:	d1e9      	bne.n	eb36 <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
    eb62:	4641      	mov	r1, r8
    eb64:	f106 0030 	add.w	r0, r6, #48	; 0x30
    eb68:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    eb6a:	f1bb 0f03 	cmp.w	fp, #3
    eb6e:	d102      	bne.n	eb76 <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
    eb70:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
    eb72:	2c00      	cmp	r4, #0
    eb74:	dc0e      	bgt.n	eb94 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
    eb76:	b005      	add	sp, #20
    eb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    eb7c:	42bc      	cmp	r4, r7
    eb7e:	dbe7      	blt.n	eb50 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    eb80:	f1bb 0f02 	cmp.w	fp, #2
    eb84:	d8e4      	bhi.n	eb50 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    eb86:	4641      	mov	r1, r8
    eb88:	9802      	ldr	r0, [sp, #8]
    eb8a:	9203      	str	r2, [sp, #12]
			digits++;
    eb8c:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    eb8e:	47d0      	blx	sl
			digits++;
    eb90:	9a03      	ldr	r2, [sp, #12]
    eb92:	e7dd      	b.n	eb50 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    eb94:	4641      	mov	r1, r8
    eb96:	2020      	movs	r0, #32
    eb98:	47d0      	blx	sl
    eb9a:	3c01      	subs	r4, #1
    eb9c:	e7e9      	b.n	eb72 <_printk_dec_ulong+0x66>
    eb9e:	bf00      	nop
    eba0:	3b9aca00 	.word	0x3b9aca00

0000eba4 <__printk_hook_install>:
	_char_out = fn;
    eba4:	4b01      	ldr	r3, [pc, #4]	; (ebac <__printk_hook_install+0x8>)
    eba6:	6018      	str	r0, [r3, #0]
}
    eba8:	4770      	bx	lr
    ebaa:	bf00      	nop
    ebac:	2002c50c 	.word	0x2002c50c

0000ebb0 <vprintk>:
	struct out_context ctx = { 0 };
    ebb0:	2300      	movs	r3, #0
{
    ebb2:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
    ebb4:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    ebb6:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    ebb8:	4803      	ldr	r0, [pc, #12]	; (ebc8 <vprintk+0x18>)
    ebba:	460b      	mov	r3, r1
    ebbc:	a901      	add	r1, sp, #4
    ebbe:	f00d fe41 	bl	1c844 <z_vprintk>
}
    ebc2:	b003      	add	sp, #12
    ebc4:	f85d fb04 	ldr.w	pc, [sp], #4
    ebc8:	0000eafd 	.word	0x0000eafd

0000ebcc <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    ebcc:	f04f 0220 	mov.w	r2, #32
    ebd0:	f3ef 8311 	mrs	r3, BASEPRI
    ebd4:	f382 8811 	msr	BASEPRI, r2
    ebd8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    ebdc:	2101      	movs	r1, #1
    ebde:	4a04      	ldr	r2, [pc, #16]	; (ebf0 <nordicsemi_nrf91_init+0x24>)
    ebe0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    ebe4:	f383 8811 	msr	BASEPRI, r3
    ebe8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    ebec:	2000      	movs	r0, #0
    ebee:	4770      	bx	lr
    ebf0:	40039000 	.word	0x40039000

0000ebf4 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    ebf4:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    ebf6:	2200      	movs	r2, #0
{
    ebf8:	b087      	sub	sp, #28
		k_timer_init(&log_process_thread_timer,
    ebfa:	490d      	ldr	r1, [pc, #52]	; (ec30 <enable_logger+0x3c>)
    ebfc:	480d      	ldr	r0, [pc, #52]	; (ec34 <enable_logger+0x40>)
    ebfe:	f010 f918 	bl	1ee32 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ec02:	2400      	movs	r4, #0
    ec04:	230e      	movs	r3, #14
    ec06:	4d0c      	ldr	r5, [pc, #48]	; (ec38 <enable_logger+0x44>)
    ec08:	e9cd 4302 	strd	r4, r3, [sp, #8]
    ec0c:	e9cd 4404 	strd	r4, r4, [sp, #16]
    ec10:	e9cd 4400 	strd	r4, r4, [sp]
    ec14:	4b09      	ldr	r3, [pc, #36]	; (ec3c <enable_logger+0x48>)
    ec16:	f44f 7240 	mov.w	r2, #768	; 0x300
    ec1a:	4909      	ldr	r1, [pc, #36]	; (ec40 <enable_logger+0x4c>)
    ec1c:	4628      	mov	r0, r5
    ec1e:	f00d f931 	bl	1be84 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    ec22:	4908      	ldr	r1, [pc, #32]	; (ec44 <enable_logger+0x50>)
    ec24:	4628      	mov	r0, r5
    ec26:	f010 f86d 	bl	1ed04 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    ec2a:	4620      	mov	r0, r4
    ec2c:	b007      	add	sp, #28
    ec2e:	bd30      	pop	{r4, r5, pc}
    ec30:	0000ec49 	.word	0x0000ec49
    ec34:	20020210 	.word	0x20020210
    ec38:	20020258 	.word	0x20020258
    ec3c:	0000ef29 	.word	0x0000ef29
    ec40:	20026ab8 	.word	0x20026ab8
    ec44:	00020561 	.word	0x00020561

0000ec48 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    ec48:	4801      	ldr	r0, [pc, #4]	; (ec50 <log_process_thread_timer_expiry_fn+0x8>)
    ec4a:	f00d b85f 	b.w	1bd0c <z_impl_k_sem_give>
    ec4e:	bf00      	nop
    ec50:	2002c688 	.word	0x2002c688

0000ec54 <log_core_init>:
{
    ec54:	b508      	push	{r3, lr}
		log_msg_pool_init();
    ec56:	f000 f9df 	bl	f018 <log_msg_pool_init>
		log_list_init(&list);
    ec5a:	4809      	ldr	r0, [pc, #36]	; (ec80 <log_core_init+0x2c>)
    ec5c:	f00d ff72 	bl	1cb44 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    ec60:	2304      	movs	r3, #4
    ec62:	2234      	movs	r2, #52	; 0x34
    ec64:	4807      	ldr	r0, [pc, #28]	; (ec84 <log_core_init+0x30>)
    ec66:	4908      	ldr	r1, [pc, #32]	; (ec88 <log_core_init+0x34>)
    ec68:	f00f fe31 	bl	1e8ce <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    ec6c:	4b07      	ldr	r3, [pc, #28]	; (ec8c <log_core_init+0x38>)
    ec6e:	4a08      	ldr	r2, [pc, #32]	; (ec90 <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
    ec70:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    ec74:	601a      	str	r2, [r3, #0]
}
    ec76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    ec7a:	f000 bbfd 	b.w	f478 <log_output_timestamp_freq_set>
    ec7e:	bf00      	nop
    ec80:	20020208 	.word	0x20020208
    ec84:	2002023c 	.word	0x2002023c
    ec88:	2002aaf8 	.word	0x2002aaf8
    ec8c:	2002c510 	.word	0x2002c510
    ec90:	0001cb83 	.word	0x0001cb83

0000ec94 <dropped_notify>:
{
    ec94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ec96:	2500      	movs	r5, #0
    ec98:	4b0c      	ldr	r3, [pc, #48]	; (eccc <dropped_notify+0x38>)
    ec9a:	e8d3 7fef 	ldaex	r7, [r3]
    ec9e:	e8c3 5fe2 	stlex	r2, r5, [r3]
    eca2:	2a00      	cmp	r2, #0
    eca4:	d1f9      	bne.n	ec9a <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    eca6:	4c0a      	ldr	r4, [pc, #40]	; (ecd0 <dropped_notify+0x3c>)
    eca8:	4e0a      	ldr	r6, [pc, #40]	; (ecd4 <dropped_notify+0x40>)
    ecaa:	1b36      	subs	r6, r6, r4
    ecac:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    ecae:	42b5      	cmp	r5, r6
    ecb0:	db00      	blt.n	ecb4 <dropped_notify+0x20>
}
    ecb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    ecb4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    ecb6:	795b      	ldrb	r3, [r3, #5]
    ecb8:	b12b      	cbz	r3, ecc6 <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
    ecba:	6823      	ldr	r3, [r4, #0]
    ecbc:	68db      	ldr	r3, [r3, #12]
    ecbe:	b113      	cbz	r3, ecc6 <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
    ecc0:	4639      	mov	r1, r7
    ecc2:	4620      	mov	r0, r4
    ecc4:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    ecc6:	3501      	adds	r5, #1
    ecc8:	3410      	adds	r4, #16
    ecca:	e7f0      	b.n	ecae <dropped_notify+0x1a>
    eccc:	20020200 	.word	0x20020200
    ecd0:	0001f418 	.word	0x0001f418
    ecd4:	0001f428 	.word	0x0001f428

0000ecd8 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    ecd8:	4b22      	ldr	r3, [pc, #136]	; (ed64 <z_impl_log_process+0x8c>)
{
    ecda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!backend_attached && !bypass) {
    ecde:	781b      	ldrb	r3, [r3, #0]
{
    ece0:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    ece2:	b903      	cbnz	r3, ece6 <z_impl_log_process+0xe>
    ece4:	b340      	cbz	r0, ed38 <z_impl_log_process+0x60>
	__asm__ volatile(
    ece6:	f04f 0320 	mov.w	r3, #32
    ecea:	f3ef 8411 	mrs	r4, BASEPRI
    ecee:	f383 8811 	msr	BASEPRI, r3
    ecf2:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    ecf6:	481c      	ldr	r0, [pc, #112]	; (ed68 <z_impl_log_process+0x90>)
    ecf8:	f00d ff34 	bl	1cb64 <log_list_head_get>
    ecfc:	4607      	mov	r7, r0
	__asm__ volatile(
    ecfe:	f384 8811 	msr	BASEPRI, r4
    ed02:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    ed06:	b158      	cbz	r0, ed20 <z_impl_log_process+0x48>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    ed08:	4b18      	ldr	r3, [pc, #96]	; (ed6c <z_impl_log_process+0x94>)
    ed0a:	e8d3 2fef 	ldaex	r2, [r3]
    ed0e:	3a01      	subs	r2, #1
    ed10:	e8c3 2fe1 	stlex	r1, r2, [r3]
    ed14:	2900      	cmp	r1, #0
    ed16:	d1f8      	bne.n	ed0a <z_impl_log_process+0x32>
	if (!bypass) {
    ed18:	b18d      	cbz	r5, ed3e <z_impl_log_process+0x66>
	log_msg_put(msg);
    ed1a:	4638      	mov	r0, r7
    ed1c:	f00e f80f 	bl	1cd3e <log_msg_put>
	if (!bypass && dropped_cnt) {
    ed20:	b925      	cbnz	r5, ed2c <z_impl_log_process+0x54>
    ed22:	4b13      	ldr	r3, [pc, #76]	; (ed70 <z_impl_log_process+0x98>)
    ed24:	681b      	ldr	r3, [r3, #0]
    ed26:	b10b      	cbz	r3, ed2c <z_impl_log_process+0x54>
		dropped_notify();
    ed28:	f7ff ffb4 	bl	ec94 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    ed2c:	480e      	ldr	r0, [pc, #56]	; (ed68 <z_impl_log_process+0x90>)
    ed2e:	f00d ff17 	bl	1cb60 <log_list_head_peek>
    ed32:	1c05      	adds	r5, r0, #0
    ed34:	bf18      	it	ne
    ed36:	2501      	movne	r5, #1
}
    ed38:	4628      	mov	r0, r5
    ed3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (int i = 0; i < log_backend_count_get(); i++) {
    ed3e:	46a8      	mov	r8, r5
	return __log_backends_end - __log_backends_start;
    ed40:	4c0c      	ldr	r4, [pc, #48]	; (ed74 <z_impl_log_process+0x9c>)
    ed42:	4e0d      	ldr	r6, [pc, #52]	; (ed78 <z_impl_log_process+0xa0>)
    ed44:	1b36      	subs	r6, r6, r4
    ed46:	1136      	asrs	r6, r6, #4
    ed48:	45b0      	cmp	r8, r6
    ed4a:	dae6      	bge.n	ed1a <z_impl_log_process+0x42>
	return backend->cb->active;
    ed4c:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    ed4e:	795b      	ldrb	r3, [r3, #5]
    ed50:	b123      	cbz	r3, ed5c <z_impl_log_process+0x84>
	backend->api->put(backend, msg);
    ed52:	6823      	ldr	r3, [r4, #0]
    ed54:	4639      	mov	r1, r7
    ed56:	681b      	ldr	r3, [r3, #0]
    ed58:	4620      	mov	r0, r4
    ed5a:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    ed5c:	f108 0801 	add.w	r8, r8, #1
    ed60:	3410      	adds	r4, #16
    ed62:	e7f1      	b.n	ed48 <z_impl_log_process+0x70>
    ed64:	20026545 	.word	0x20026545
    ed68:	20020208 	.word	0x20020208
    ed6c:	200201fc 	.word	0x200201fc
    ed70:	20020200 	.word	0x20020200
    ed74:	0001f418 	.word	0x0001f418
    ed78:	0001f428 	.word	0x0001f428

0000ed7c <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    ed7c:	4b24      	ldr	r3, [pc, #144]	; (ee10 <msg_finalize+0x94>)
{
    ed7e:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    ed80:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    ed82:	8141      	strh	r1, [r0, #10]
{
    ed84:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    ed86:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    ed88:	4c22      	ldr	r4, [pc, #136]	; (ee14 <msg_finalize+0x98>)
    ed8a:	60e8      	str	r0, [r5, #12]
    ed8c:	e8d4 3fef 	ldaex	r3, [r4]
    ed90:	3301      	adds	r3, #1
    ed92:	e8c4 3fe2 	stlex	r2, r3, [r4]
    ed96:	2a00      	cmp	r2, #0
    ed98:	d1f8      	bne.n	ed8c <msg_finalize+0x10>
	__asm__ volatile(
    ed9a:	f04f 0320 	mov.w	r3, #32
    ed9e:	f3ef 8611 	mrs	r6, BASEPRI
    eda2:	f383 8811 	msr	BASEPRI, r3
    eda6:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    edaa:	481b      	ldr	r0, [pc, #108]	; (ee18 <msg_finalize+0x9c>)
    edac:	4629      	mov	r1, r5
    edae:	f00d fecd 	bl	1cb4c <log_list_add_tail>
	__asm__ volatile(
    edb2:	f386 8811 	msr	BASEPRI, r6
    edb6:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    edba:	4b18      	ldr	r3, [pc, #96]	; (ee1c <msg_finalize+0xa0>)
    edbc:	781a      	ldrb	r2, [r3, #0]
    edbe:	b17a      	cbz	r2, ede0 <msg_finalize+0x64>
	__asm__ volatile(
    edc0:	f04f 0320 	mov.w	r3, #32
    edc4:	f3ef 8411 	mrs	r4, BASEPRI
    edc8:	f383 8811 	msr	BASEPRI, r3
    edcc:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    edd0:	2000      	movs	r0, #0
    edd2:	f7ff ff81 	bl	ecd8 <z_impl_log_process>
	__asm__ volatile(
    edd6:	f384 8811 	msr	BASEPRI, r4
    edda:	f3bf 8f6f 	isb	sy
}
    edde:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    ede0:	490f      	ldr	r1, [pc, #60]	; (ee20 <msg_finalize+0xa4>)
    ede2:	6823      	ldr	r3, [r4, #0]
    ede4:	6809      	ldr	r1, [r1, #0]
    ede6:	2900      	cmp	r1, #0
    ede8:	d0f9      	beq.n	edde <msg_finalize+0x62>
    edea:	2b01      	cmp	r3, #1
    edec:	d106      	bne.n	edfc <msg_finalize+0x80>
}
    edee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_timer_start(timer, duration, period);
    edf2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    edf6:	480b      	ldr	r0, [pc, #44]	; (ee24 <msg_finalize+0xa8>)
    edf8:	f00d ba5e 	b.w	1c2b8 <z_impl_k_timer_start>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    edfc:	2b0a      	cmp	r3, #10
    edfe:	d1ee      	bne.n	edde <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
    ee00:	4808      	ldr	r0, [pc, #32]	; (ee24 <msg_finalize+0xa8>)
    ee02:	f010 f822 	bl	1ee4a <z_impl_k_timer_stop>
}
    ee06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_sem_give(sem);
    ee0a:	4807      	ldr	r0, [pc, #28]	; (ee28 <msg_finalize+0xac>)
    ee0c:	f00c bf7e 	b.w	1bd0c <z_impl_k_sem_give>
    ee10:	2002c510 	.word	0x2002c510
    ee14:	200201fc 	.word	0x200201fc
    ee18:	20020208 	.word	0x20020208
    ee1c:	20026546 	.word	0x20026546
    ee20:	20020308 	.word	0x20020308
    ee24:	20020210 	.word	0x20020210
    ee28:	2002c688 	.word	0x2002c688

0000ee2c <log_dropped>:
    ee2c:	4b04      	ldr	r3, [pc, #16]	; (ee40 <log_dropped+0x14>)
    ee2e:	e8d3 2fef 	ldaex	r2, [r3]
    ee32:	3201      	adds	r2, #1
    ee34:	e8c3 2fe1 	stlex	r1, r2, [r3]
    ee38:	2900      	cmp	r1, #0
    ee3a:	d1f8      	bne.n	ee2e <log_dropped+0x2>
}
    ee3c:	4770      	bx	lr
    ee3e:	bf00      	nop
    ee40:	20020200 	.word	0x20020200

0000ee44 <log_source_name_get>:
    ee44:	4a04      	ldr	r2, [pc, #16]	; (ee58 <log_source_name_get+0x14>)
    ee46:	4b05      	ldr	r3, [pc, #20]	; (ee5c <log_source_name_get+0x18>)
    ee48:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    ee4a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    ee4e:	bf34      	ite	cc
    ee50:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    ee54:	2000      	movcs	r0, #0
}
    ee56:	4770      	bx	lr
    ee58:	0001f390 	.word	0x0001f390
    ee5c:	0001f418 	.word	0x0001f418

0000ee60 <log_backend_enable>:
	id += backend - log_backend_get(0);
    ee60:	4b09      	ldr	r3, [pc, #36]	; (ee88 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    ee62:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    ee64:	1ac3      	subs	r3, r0, r3
    ee66:	111b      	asrs	r3, r3, #4
    ee68:	3301      	adds	r3, #1
{
    ee6a:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    ee6c:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
    ee6e:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
    ee70:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    ee72:	4c06      	ldr	r4, [pc, #24]	; (ee8c <log_backend_enable+0x2c>)
    ee74:	715a      	strb	r2, [r3, #5]
    ee76:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    ee78:	6019      	str	r1, [r3, #0]
    ee7a:	b912      	cbnz	r2, ee82 <log_backend_enable+0x22>
    ee7c:	4804      	ldr	r0, [pc, #16]	; (ee90 <log_backend_enable+0x30>)
    ee7e:	f00c ff45 	bl	1bd0c <z_impl_k_sem_give>
	backend_attached = true;
    ee82:	2301      	movs	r3, #1
    ee84:	7023      	strb	r3, [r4, #0]
}
    ee86:	bd10      	pop	{r4, pc}
    ee88:	0001f418 	.word	0x0001f418
    ee8c:	20026545 	.word	0x20026545
    ee90:	2002c688 	.word	0x2002c688

0000ee94 <log_init>:
{
    ee94:	b570      	push	{r4, r5, r6, lr}
    ee96:	4b0f      	ldr	r3, [pc, #60]	; (eed4 <log_init+0x40>)
    ee98:	e8d3 5fef 	ldaex	r5, [r3]
    ee9c:	1c6a      	adds	r2, r5, #1
    ee9e:	e8c3 2fe1 	stlex	r1, r2, [r3]
    eea2:	2900      	cmp	r1, #0
    eea4:	d1f8      	bne.n	ee98 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    eea6:	b92d      	cbnz	r5, eeb4 <log_init+0x20>
	return __log_backends_end - __log_backends_start;
    eea8:	4c0b      	ldr	r4, [pc, #44]	; (eed8 <log_init+0x44>)
    eeaa:	4e0c      	ldr	r6, [pc, #48]	; (eedc <log_init+0x48>)
    eeac:	1b36      	subs	r6, r6, r4
    eeae:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    eeb0:	42b5      	cmp	r5, r6
    eeb2:	db00      	blt.n	eeb6 <log_init+0x22>
}
    eeb4:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    eeb6:	7b23      	ldrb	r3, [r4, #12]
    eeb8:	b143      	cbz	r3, eecc <log_init+0x38>
			if (backend->api->init != NULL) {
    eeba:	6823      	ldr	r3, [r4, #0]
    eebc:	695b      	ldr	r3, [r3, #20]
    eebe:	b103      	cbz	r3, eec2 <log_init+0x2e>
				backend->api->init();
    eec0:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    eec2:	2204      	movs	r2, #4
    eec4:	2100      	movs	r1, #0
    eec6:	4620      	mov	r0, r4
    eec8:	f7ff ffca 	bl	ee60 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    eecc:	3501      	adds	r5, #1
    eece:	3410      	adds	r4, #16
    eed0:	e7ee      	b.n	eeb0 <log_init+0x1c>
    eed2:	bf00      	nop
    eed4:	20020204 	.word	0x20020204
    eed8:	0001f418 	.word	0x0001f418
    eedc:	0001f428 	.word	0x0001f428

0000eee0 <z_impl_log_panic>:
{
    eee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    eee2:	4f0e      	ldr	r7, [pc, #56]	; (ef1c <z_impl_log_panic+0x3c>)
    eee4:	783d      	ldrb	r5, [r7, #0]
    eee6:	b975      	cbnz	r5, ef06 <z_impl_log_panic+0x26>
	log_init();
    eee8:	f7ff ffd4 	bl	ee94 <log_init>
    eeec:	4c0c      	ldr	r4, [pc, #48]	; (ef20 <z_impl_log_panic+0x40>)
    eeee:	4e0d      	ldr	r6, [pc, #52]	; (ef24 <z_impl_log_panic+0x44>)
    eef0:	1b36      	subs	r6, r6, r4
    eef2:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    eef4:	42b5      	cmp	r5, r6
    eef6:	db07      	blt.n	ef08 <z_impl_log_panic+0x28>
    eef8:	2000      	movs	r0, #0
    eefa:	f7ff feed 	bl	ecd8 <z_impl_log_process>
		while (log_process(false) == true) {
    eefe:	2800      	cmp	r0, #0
    ef00:	d1fa      	bne.n	eef8 <z_impl_log_panic+0x18>
	panic_mode = true;
    ef02:	2301      	movs	r3, #1
    ef04:	703b      	strb	r3, [r7, #0]
}
    ef06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    ef08:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    ef0a:	795b      	ldrb	r3, [r3, #5]
    ef0c:	b11b      	cbz	r3, ef16 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    ef0e:	6823      	ldr	r3, [r4, #0]
    ef10:	4620      	mov	r0, r4
    ef12:	691b      	ldr	r3, [r3, #16]
    ef14:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    ef16:	3501      	adds	r5, #1
    ef18:	3410      	adds	r4, #16
    ef1a:	e7eb      	b.n	eef4 <z_impl_log_panic+0x14>
    ef1c:	20026546 	.word	0x20026546
    ef20:	0001f418 	.word	0x0001f418
    ef24:	0001f428 	.word	0x0001f428

0000ef28 <log_process_thread_func>:
{
    ef28:	b508      	push	{r3, lr}
	log_init();
    ef2a:	f7ff ffb3 	bl	ee94 <log_init>
	return z_impl_k_current_get();
    ef2e:	f00c fee7 	bl	1bd00 <z_impl_k_current_get>
	proc_tid = process_tid;
    ef32:	4b0b      	ldr	r3, [pc, #44]	; (ef60 <log_process_thread_func+0x38>)
    ef34:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    ef36:	b130      	cbz	r0, ef46 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    ef38:	4b0a      	ldr	r3, [pc, #40]	; (ef64 <log_process_thread_func+0x3c>)
	    process_tid &&
    ef3a:	681b      	ldr	r3, [r3, #0]
    ef3c:	2b09      	cmp	r3, #9
    ef3e:	dd02      	ble.n	ef46 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    ef40:	4809      	ldr	r0, [pc, #36]	; (ef68 <log_process_thread_func+0x40>)
    ef42:	f00c fee3 	bl	1bd0c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    ef46:	4c08      	ldr	r4, [pc, #32]	; (ef68 <log_process_thread_func+0x40>)
    ef48:	2000      	movs	r0, #0
    ef4a:	f7ff fec5 	bl	ecd8 <z_impl_log_process>
		if (log_process(false) == false) {
    ef4e:	2800      	cmp	r0, #0
    ef50:	d1fa      	bne.n	ef48 <log_process_thread_func+0x20>
    ef52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ef56:	4620      	mov	r0, r4
    ef58:	f00c ff04 	bl	1bd64 <z_impl_k_sem_take>
    ef5c:	e7f4      	b.n	ef48 <log_process_thread_func+0x20>
    ef5e:	bf00      	nop
    ef60:	20020308 	.word	0x20020308
    ef64:	200201fc 	.word	0x200201fc
    ef68:	2002c688 	.word	0x2002c688

0000ef6c <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    ef6c:	4b14      	ldr	r3, [pc, #80]	; (efc0 <log_strdup+0x54>)
{
    ef6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
    ef70:	4298      	cmp	r0, r3
{
    ef72:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    ef74:	d302      	bcc.n	ef7c <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    ef76:	4b13      	ldr	r3, [pc, #76]	; (efc4 <log_strdup+0x58>)
    ef78:	4298      	cmp	r0, r3
    ef7a:	d31b      	bcc.n	efb4 <log_strdup+0x48>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    ef7c:	2200      	movs	r2, #0
    ef7e:	a901      	add	r1, sp, #4
    ef80:	4811      	ldr	r0, [pc, #68]	; (efc8 <log_strdup+0x5c>)
    ef82:	f00c f97f 	bl	1b284 <k_mem_slab_alloc>
	if (err != 0) {
    ef86:	4605      	mov	r5, r0
    ef88:	b9b8      	cbnz	r0, efba <log_strdup+0x4e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ef8a:	2201      	movs	r2, #1
    ef8c:	9b01      	ldr	r3, [sp, #4]
    ef8e:	e8d3 1fef 	ldaex	r1, [r3]
    ef92:	e8c3 2fe0 	stlex	r0, r2, [r3]
    ef96:	2800      	cmp	r0, #0
    ef98:	d1f9      	bne.n	ef8e <log_strdup+0x22>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    ef9a:	9801      	ldr	r0, [sp, #4]
    ef9c:	4621      	mov	r1, r4
    ef9e:	222d      	movs	r2, #45	; 0x2d
    efa0:	3004      	adds	r0, #4
    efa2:	f00e faff 	bl	1d5a4 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    efa6:	237e      	movs	r3, #126	; 0x7e
    efa8:	9c01      	ldr	r4, [sp, #4]
    efaa:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    efae:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	return dup->buf;
    efb2:	3404      	adds	r4, #4
}
    efb4:	4620      	mov	r0, r4
    efb6:	b003      	add	sp, #12
    efb8:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    efba:	4c04      	ldr	r4, [pc, #16]	; (efcc <log_strdup+0x60>)
    efbc:	e7fa      	b.n	efb4 <log_strdup+0x48>
    efbe:	bf00      	nop
    efc0:	0001f0a4 	.word	0x0001f0a4
    efc4:	00020fc4 	.word	0x00020fc4
    efc8:	2002023c 	.word	0x2002023c
    efcc:	00020569 	.word	0x00020569

0000efd0 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
    efd0:	b148      	cbz	r0, efe6 <log_is_strdup+0x16>
    efd2:	4b05      	ldr	r3, [pc, #20]	; (efe8 <log_is_strdup+0x18>)
    efd4:	4298      	cmp	r0, r3
    efd6:	d305      	bcc.n	efe4 <log_is_strdup+0x14>
    efd8:	33d0      	adds	r3, #208	; 0xd0
    efda:	4298      	cmp	r0, r3
    efdc:	bf2c      	ite	cs
    efde:	2000      	movcs	r0, #0
    efe0:	2001      	movcc	r0, #1
    efe2:	4770      	bx	lr
    efe4:	2000      	movs	r0, #0
}
    efe6:	4770      	bx	lr
    efe8:	2002aaf8 	.word	0x2002aaf8

0000efec <log_free>:
{
    efec:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    efee:	3804      	subs	r0, #4
    eff0:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    eff2:	e8d0 3fef 	ldaex	r3, [r0]
    eff6:	1e5a      	subs	r2, r3, #1
    eff8:	e8c0 2fe1 	stlex	r1, r2, [r0]
    effc:	2900      	cmp	r1, #0
    effe:	d1f8      	bne.n	eff2 <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
    f000:	2b01      	cmp	r3, #1
    f002:	d103      	bne.n	f00c <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    f004:	a901      	add	r1, sp, #4
    f006:	4803      	ldr	r0, [pc, #12]	; (f014 <log_free+0x28>)
    f008:	f00c f968 	bl	1b2dc <k_mem_slab_free>
}
    f00c:	b003      	add	sp, #12
    f00e:	f85d fb04 	ldr.w	pc, [sp], #4
    f012:	bf00      	nop
    f014:	2002023c 	.word	0x2002023c

0000f018 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    f018:	2320      	movs	r3, #32
    f01a:	4902      	ldr	r1, [pc, #8]	; (f024 <log_msg_pool_init+0xc>)
    f01c:	461a      	mov	r2, r3
    f01e:	4802      	ldr	r0, [pc, #8]	; (f028 <log_msg_pool_init+0x10>)
    f020:	f00f bc55 	b.w	1e8ce <k_mem_slab_init>
    f024:	2002abc8 	.word	0x2002abc8
    f028:	2002030c 	.word	0x2002030c

0000f02c <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
    f02c:	2300      	movs	r3, #0
{
    f02e:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    f030:	4d09      	ldr	r5, [pc, #36]	; (f058 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    f032:	9301      	str	r3, [sp, #4]
    f034:	2001      	movs	r0, #1
    f036:	f7ff fe4f 	bl	ecd8 <z_impl_log_process>
    f03a:	4604      	mov	r4, r0
			log_dropped();
    f03c:	f7ff fef6 	bl	ee2c <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    f040:	2200      	movs	r2, #0
    f042:	a901      	add	r1, sp, #4
    f044:	4628      	mov	r0, r5
    f046:	f00c f91d 	bl	1b284 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    f04a:	b108      	cbz	r0, f050 <log_msg_no_space_handle+0x24>
    f04c:	2c00      	cmp	r4, #0
    f04e:	d1f1      	bne.n	f034 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    f050:	9801      	ldr	r0, [sp, #4]
    f052:	b003      	add	sp, #12
    f054:	bd30      	pop	{r4, r5, pc}
    f056:	bf00      	nop
    f058:	2002030c 	.word	0x2002030c

0000f05c <log_msg_chunk_alloc>:
{
    f05c:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    f05e:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    f060:	a901      	add	r1, sp, #4
    f062:	4806      	ldr	r0, [pc, #24]	; (f07c <log_msg_chunk_alloc+0x20>)
	union log_msg_chunk *msg = NULL;
    f064:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    f066:	f00c f90d 	bl	1b284 <k_mem_slab_alloc>
	if (err != 0) {
    f06a:	b110      	cbz	r0, f072 <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
    f06c:	f7ff ffde 	bl	f02c <log_msg_no_space_handle>
    f070:	9001      	str	r0, [sp, #4]
}
    f072:	9801      	ldr	r0, [sp, #4]
    f074:	b003      	add	sp, #12
    f076:	f85d fb04 	ldr.w	pc, [sp], #4
    f07a:	bf00      	nop
    f07c:	2002030c 	.word	0x2002030c

0000f080 <msg_free>:
{
    f080:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    f082:	7a04      	ldrb	r4, [r0, #8]
	u32_t nargs = msg->hdr.params.std.nargs;
    f084:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
    f086:	f014 0401 	ands.w	r4, r4, #1
{
    f08a:	9001      	str	r0, [sp, #4]
	u32_t nargs = msg->hdr.params.std.nargs;
    f08c:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    f090:	d00e      	beq.n	f0b0 <msg_free+0x30>
	if (msg->hdr.params.generic.ext == 1) {
    f092:	9b01      	ldr	r3, [sp, #4]
    f094:	7a1a      	ldrb	r2, [r3, #8]
    f096:	0792      	lsls	r2, r2, #30
    f098:	d504      	bpl.n	f0a4 <msg_free+0x24>
		cont_free(msg->payload.ext.next);
    f09a:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    f09c:	4c10      	ldr	r4, [pc, #64]	; (f0e0 <msg_free+0x60>)
    f09e:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    f0a0:	9b03      	ldr	r3, [sp, #12]
    f0a2:	b9b3      	cbnz	r3, f0d2 <msg_free+0x52>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    f0a4:	a901      	add	r1, sp, #4
    f0a6:	480e      	ldr	r0, [pc, #56]	; (f0e0 <msg_free+0x60>)
    f0a8:	f00c f918 	bl	1b2dc <k_mem_slab_free>
}
    f0ac:	b004      	add	sp, #16
    f0ae:	bd70      	pop	{r4, r5, r6, pc}
	if (log_msg_is_std(msg) && nargs) {
    f0b0:	2d00      	cmp	r5, #0
    f0b2:	d0ee      	beq.n	f092 <msg_free+0x12>
		for (i = 0; i < nargs; i++) {
    f0b4:	42a5      	cmp	r5, r4
    f0b6:	9801      	ldr	r0, [sp, #4]
    f0b8:	d9eb      	bls.n	f092 <msg_free+0x12>
			void *buf = (void *)log_msg_arg_get(msg, i);
    f0ba:	4621      	mov	r1, r4
    f0bc:	f00d fe22 	bl	1cd04 <log_msg_arg_get>
    f0c0:	4606      	mov	r6, r0
			if (log_is_strdup(buf)) {
    f0c2:	f7ff ff85 	bl	efd0 <log_is_strdup>
    f0c6:	b110      	cbz	r0, f0ce <msg_free+0x4e>
				log_free(buf);
    f0c8:	4630      	mov	r0, r6
    f0ca:	f7ff ff8f 	bl	efec <log_free>
		for (i = 0; i < nargs; i++) {
    f0ce:	3401      	adds	r4, #1
    f0d0:	e7f0      	b.n	f0b4 <msg_free+0x34>
		next = cont->next;
    f0d2:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    f0d4:	a903      	add	r1, sp, #12
    f0d6:	4620      	mov	r0, r4
    f0d8:	f00c f900 	bl	1b2dc <k_mem_slab_free>
		cont = next;
    f0dc:	9503      	str	r5, [sp, #12]
    f0de:	e7df      	b.n	f0a0 <msg_free+0x20>
    f0e0:	2002030c 	.word	0x2002030c

0000f0e4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    f0e4:	b40e      	push	{r1, r2, r3}
    f0e6:	b503      	push	{r0, r1, lr}
    f0e8:	ab03      	add	r3, sp, #12
    f0ea:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    f0ee:	4601      	mov	r1, r0
    f0f0:	4804      	ldr	r0, [pc, #16]	; (f104 <print_formatted+0x20>)
	va_start(args, fmt);
    f0f2:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    f0f4:	f00d fba6 	bl	1c844 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    f0f8:	2000      	movs	r0, #0
    f0fa:	b002      	add	sp, #8
    f0fc:	f85d eb04 	ldr.w	lr, [sp], #4
    f100:	b003      	add	sp, #12
    f102:	4770      	bx	lr
    f104:	0001d105 	.word	0x0001d105

0000f108 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    f108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    f10c:	f011 0402 	ands.w	r4, r1, #2
{
    f110:	b085      	sub	sp, #20
    f112:	4606      	mov	r6, r0
    f114:	4690      	mov	r8, r2
    f116:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    f11a:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    f11e:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    f122:	d007      	beq.n	f134 <prefix_print+0x2c>
	if (!format) {
    f124:	f011 0f44 	tst.w	r1, #68	; 0x44
    f128:	d137      	bne.n	f19a <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    f12a:	461a      	mov	r2, r3
    f12c:	4932      	ldr	r1, [pc, #200]	; (f1f8 <prefix_print+0xf0>)
    f12e:	f7ff ffd9 	bl	f0e4 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    f132:	4604      	mov	r4, r0
	if (color) {
    f134:	f1b9 0f00 	cmp.w	r9, #0
    f138:	d00a      	beq.n	f150 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
    f13a:	4b30      	ldr	r3, [pc, #192]	; (f1fc <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    f13c:	4930      	ldr	r1, [pc, #192]	; (f200 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
    f13e:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    f142:	4b30      	ldr	r3, [pc, #192]	; (f204 <prefix_print+0xfc>)
    f144:	4630      	mov	r0, r6
    f146:	2a00      	cmp	r2, #0
    f148:	bf08      	it	eq
    f14a:	461a      	moveq	r2, r3
    f14c:	f7ff ffca 	bl	f0e4 <print_formatted>
	if (level_on) {
    f150:	b13d      	cbz	r5, f162 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    f152:	4b2d      	ldr	r3, [pc, #180]	; (f208 <prefix_print+0x100>)
    f154:	492d      	ldr	r1, [pc, #180]	; (f20c <prefix_print+0x104>)
    f156:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    f15a:	4630      	mov	r0, r6
    f15c:	f7ff ffc2 	bl	f0e4 <print_formatted>
    f160:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    f162:	f1b8 0f00 	cmp.w	r8, #0
    f166:	d044      	beq.n	f1f2 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    f168:	2301      	movs	r3, #1
    f16a:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    f16e:	4b28      	ldr	r3, [pc, #160]	; (f210 <prefix_print+0x108>)
    f170:	f017 0f10 	tst.w	r7, #16
    f174:	4f27      	ldr	r7, [pc, #156]	; (f214 <prefix_print+0x10c>)
    f176:	bf18      	it	ne
    f178:	461f      	movne	r7, r3
    f17a:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    f17e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    f182:	f7ff fe5f 	bl	ee44 <log_source_name_get>
    f186:	4639      	mov	r1, r7
    f188:	4602      	mov	r2, r0
    f18a:	4630      	mov	r0, r6
    f18c:	f7ff ffaa 	bl	f0e4 <print_formatted>
    f190:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    f192:	4420      	add	r0, r4
    f194:	b005      	add	sp, #20
    f196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    f19a:	4a1f      	ldr	r2, [pc, #124]	; (f218 <prefix_print+0x110>)
    f19c:	6811      	ldr	r1, [r2, #0]
    f19e:	b331      	cbz	r1, f1ee <prefix_print+0xe6>
		timestamp /= timestamp_div;
    f1a0:	4a1e      	ldr	r2, [pc, #120]	; (f21c <prefix_print+0x114>)
    f1a2:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    f1a6:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
    f1a8:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    f1ac:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
    f1b0:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    f1b4:	fbb4 f2fe 	udiv	r2, r4, lr
    f1b8:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    f1bc:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    f1c0:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f1c4:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    f1c8:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f1cc:	fb01 441b 	mls	r4, r1, fp, r4
    f1d0:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    f1d4:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f1d8:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    f1dc:	e9cd b101 	strd	fp, r1, [sp, #4]
    f1e0:	fb0a e113 	mls	r1, sl, r3, lr
    f1e4:	9100      	str	r1, [sp, #0]
    f1e6:	490e      	ldr	r1, [pc, #56]	; (f220 <prefix_print+0x118>)
    f1e8:	f7ff ff7c 	bl	f0e4 <print_formatted>
    f1ec:	e7a1      	b.n	f132 <prefix_print+0x2a>
		length = 0;
    f1ee:	4608      	mov	r0, r1
    f1f0:	e79f      	b.n	f132 <prefix_print+0x2a>
	total += print_formatted(log_output,
    f1f2:	4f08      	ldr	r7, [pc, #32]	; (f214 <prefix_print+0x10c>)
    f1f4:	e7c1      	b.n	f17a <prefix_print+0x72>
    f1f6:	bf00      	nop
    f1f8:	000205ce 	.word	0x000205ce
    f1fc:	0001f4c4 	.word	0x0001f4c4
    f200:	00020de1 	.word	0x00020de1
    f204:	000205c0 	.word	0x000205c0
    f208:	0001f4d8 	.word	0x0001f4d8
    f20c:	000205f3 	.word	0x000205f3
    f210:	000205ca 	.word	0x000205ca
    f214:	000205c5 	.word	0x000205c5
    f218:	20020328 	.word	0x20020328
    f21c:	2002032c 	.word	0x2002032c
    f220:	000205d7 	.word	0x000205d7

0000f224 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    f224:	b538      	push	{r3, r4, r5, lr}
    f226:	460c      	mov	r4, r1
	if (color) {
    f228:	07e1      	lsls	r1, r4, #31
{
    f22a:	4605      	mov	r5, r0
	if (color) {
    f22c:	d503      	bpl.n	f236 <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    f22e:	4a08      	ldr	r2, [pc, #32]	; (f250 <postfix_print+0x2c>)
    f230:	4908      	ldr	r1, [pc, #32]	; (f254 <postfix_print+0x30>)
    f232:	f7ff ff57 	bl	f0e4 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f236:	06e2      	lsls	r2, r4, #27
    f238:	d408      	bmi.n	f24c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    f23a:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    f23c:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    f23e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    f242:	bf4c      	ite	mi
    f244:	4904      	ldrmi	r1, [pc, #16]	; (f258 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    f246:	4905      	ldrpl	r1, [pc, #20]	; (f25c <postfix_print+0x38>)
    f248:	f7ff bf4c 	b.w	f0e4 <print_formatted>
}
    f24c:	bd38      	pop	{r3, r4, r5, pc}
    f24e:	bf00      	nop
    f250:	000205c0 	.word	0x000205c0
    f254:	00020de1 	.word	0x00020de1
    f258:	0001fe0e 	.word	0x0001fe0e
    f25c:	0001fe0d 	.word	0x0001fe0d

0000f260 <hexdump_line_print>:
{
    f260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f264:	4698      	mov	r8, r3
    f266:	9b08      	ldr	r3, [sp, #32]
    f268:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f26a:	06dd      	lsls	r5, r3, #27
{
    f26c:	460e      	mov	r6, r1
    f26e:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f270:	d405      	bmi.n	f27e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    f272:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    f274:	bf4c      	ite	mi
    f276:	4929      	ldrmi	r1, [pc, #164]	; (f31c <hexdump_line_print+0xbc>)
		print_formatted(ctx, "\r\n");
    f278:	4929      	ldrpl	r1, [pc, #164]	; (f320 <hexdump_line_print+0xc0>)
    f27a:	f7ff ff33 	bl	f0e4 <print_formatted>
{
    f27e:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
    f280:	f8df 90a4 	ldr.w	r9, [pc, #164]	; f328 <hexdump_line_print+0xc8>
	for (int i = 0; i < prefix_offset; i++) {
    f284:	4545      	cmp	r5, r8
    f286:	db2a      	blt.n	f2de <hexdump_line_print+0x7e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f288:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    f28a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; f32c <hexdump_line_print+0xcc>
			print_formatted(log_output, "%02x ", data[i]);
    f28e:	f8df 90a0 	ldr.w	r9, [pc, #160]	; f330 <hexdump_line_print+0xd0>
			print_formatted(log_output, " ");
    f292:	f8df a094 	ldr.w	sl, [pc, #148]	; f328 <hexdump_line_print+0xc8>
		if (i < length) {
    f296:	42bd      	cmp	r5, r7
    f298:	d22e      	bcs.n	f2f8 <hexdump_line_print+0x98>
			print_formatted(log_output, "%02x ", data[i]);
    f29a:	5d72      	ldrb	r2, [r6, r5]
    f29c:	4649      	mov	r1, r9
    f29e:	4620      	mov	r0, r4
    f2a0:	f7ff ff20 	bl	f0e4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f2a4:	3501      	adds	r5, #1
    f2a6:	2d10      	cmp	r5, #16
    f2a8:	d11f      	bne.n	f2ea <hexdump_line_print+0x8a>
	print_formatted(log_output, "|");
    f2aa:	491e      	ldr	r1, [pc, #120]	; (f324 <hexdump_line_print+0xc4>)
    f2ac:	4620      	mov	r0, r4
    f2ae:	f7ff ff19 	bl	f0e4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f2b2:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    f2b4:	f8df 8070 	ldr.w	r8, [pc, #112]	; f328 <hexdump_line_print+0xc8>
			print_formatted(log_output, "%c",
    f2b8:	f8df 9078 	ldr.w	r9, [pc, #120]	; f334 <hexdump_line_print+0xd4>
		if (i < length) {
    f2bc:	42af      	cmp	r7, r5
    f2be:	d927      	bls.n	f310 <hexdump_line_print+0xb0>
			      isprint((int)c) ? c : '.');
    f2c0:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    f2c2:	4649      	mov	r1, r9
	return (int)((((unsigned)c) >= ' ') &&
    f2c4:	f1a2 0320 	sub.w	r3, r2, #32
    f2c8:	2b5f      	cmp	r3, #95	; 0x5f
    f2ca:	bf28      	it	cs
    f2cc:	222e      	movcs	r2, #46	; 0x2e
    f2ce:	4620      	mov	r0, r4
    f2d0:	f7ff ff08 	bl	f0e4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f2d4:	3501      	adds	r5, #1
    f2d6:	2d10      	cmp	r5, #16
    f2d8:	d113      	bne.n	f302 <hexdump_line_print+0xa2>
}
    f2da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    f2de:	4649      	mov	r1, r9
    f2e0:	4620      	mov	r0, r4
    f2e2:	f7ff feff 	bl	f0e4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    f2e6:	3501      	adds	r5, #1
    f2e8:	e7cc      	b.n	f284 <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
    f2ea:	076a      	lsls	r2, r5, #29
    f2ec:	d1d3      	bne.n	f296 <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
    f2ee:	4651      	mov	r1, sl
    f2f0:	4620      	mov	r0, r4
    f2f2:	f7ff fef7 	bl	f0e4 <print_formatted>
    f2f6:	e7ce      	b.n	f296 <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
    f2f8:	4641      	mov	r1, r8
    f2fa:	4620      	mov	r0, r4
    f2fc:	f7ff fef2 	bl	f0e4 <print_formatted>
    f300:	e7d0      	b.n	f2a4 <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
    f302:	076b      	lsls	r3, r5, #29
    f304:	d1da      	bne.n	f2bc <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    f306:	4641      	mov	r1, r8
    f308:	4620      	mov	r0, r4
    f30a:	f7ff feeb 	bl	f0e4 <print_formatted>
    f30e:	e7d5      	b.n	f2bc <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    f310:	4641      	mov	r1, r8
    f312:	4620      	mov	r0, r4
    f314:	f7ff fee6 	bl	f0e4 <print_formatted>
    f318:	e7dc      	b.n	f2d4 <hexdump_line_print+0x74>
    f31a:	bf00      	nop
    f31c:	0001fe0e 	.word	0x0001fe0e
    f320:	0001fe0d 	.word	0x0001fe0d
    f324:	00020591 	.word	0x00020591
    f328:	0002058f 	.word	0x0002058f
    f32c:	0002058d 	.word	0x0002058d
    f330:	00020587 	.word	0x00020587
    f334:	00020593 	.word	0x00020593

0000f338 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    f338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    f33c:	7a8b      	ldrb	r3, [r1, #10]
    f33e:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f340:	f013 0407 	ands.w	r4, r3, #7
{
    f344:	b08a      	sub	sp, #40	; 0x28
    f346:	4605      	mov	r5, r0
    f348:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    f34a:	7a0a      	ldrb	r2, [r1, #8]
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f34c:	d01c      	beq.n	f388 <log_output_msg_process+0x50>
    f34e:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
    f350:	8949      	ldrh	r1, [r1, #10]
    f352:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f356:	0989      	lsrs	r1, r1, #6
    f358:	9102      	str	r1, [sp, #8]
    f35a:	e9cd 4300 	strd	r4, r3, [sp]
    f35e:	f002 0201 	and.w	r2, r2, #1
    f362:	68f3      	ldr	r3, [r6, #12]
    f364:	4639      	mov	r1, r7
    f366:	f7ff fecf 	bl	f108 <prefix_print>
    f36a:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    f36c:	7a33      	ldrb	r3, [r6, #8]
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    f36e:	07da      	lsls	r2, r3, #31
    f370:	d40c      	bmi.n	f38c <log_output_msg_process+0x54>
		std_print(msg, log_output);
    f372:	4629      	mov	r1, r5
    f374:	4630      	mov	r0, r6
    f376:	f00d fd5b 	bl	1ce30 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    f37a:	b34c      	cbz	r4, f3d0 <log_output_msg_process+0x98>
		postfix_print(log_output, flags, level);
    f37c:	4622      	mov	r2, r4
    f37e:	4639      	mov	r1, r7
    f380:	4628      	mov	r0, r5
    f382:	f7ff ff4f 	bl	f224 <postfix_print>
    f386:	e023      	b.n	f3d0 <log_output_msg_process+0x98>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f388:	46a1      	mov	r9, r4
    f38a:	e7ef      	b.n	f36c <log_output_msg_process+0x34>
	} else if (raw_string) {
    f38c:	bb34      	cbnz	r4, f3dc <log_output_msg_process+0xa4>
	size_t offset = 0;
    f38e:	4627      	mov	r7, r4
		length = log_output->size;
    f390:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    f392:	aa06      	add	r2, sp, #24
		length = log_output->size;
    f394:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    f396:	68a9      	ldr	r1, [r5, #8]
    f398:	463b      	mov	r3, r7
    f39a:	4630      	mov	r0, r6
    f39c:	f00d fd34 	bl	1ce08 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    f3a0:	9a06      	ldr	r2, [sp, #24]
    f3a2:	686b      	ldr	r3, [r5, #4]
    f3a4:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    f3a6:	b13a      	cbz	r2, f3b8 <log_output_msg_process+0x80>
			eol = (log_output->buf[length - 1] == '\n');
    f3a8:	68ab      	ldr	r3, [r5, #8]
    f3aa:	4413      	add	r3, r2
    f3ac:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    f3b0:	f1a4 030a 	sub.w	r3, r4, #10
    f3b4:	425c      	negs	r4, r3
    f3b6:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    f3b8:	4628      	mov	r0, r5
    f3ba:	f00d fe96 	bl	1d0ea <log_output_flush>
		offset += length;
    f3be:	9b06      	ldr	r3, [sp, #24]
    f3c0:	441f      	add	r7, r3
	} while (length > 0);
    f3c2:	2b00      	cmp	r3, #0
    f3c4:	d1e4      	bne.n	f390 <log_output_msg_process+0x58>
	if (eol) {
    f3c6:	b11c      	cbz	r4, f3d0 <log_output_msg_process+0x98>
		print_formatted(log_output, "\r");
    f3c8:	4914      	ldr	r1, [pc, #80]	; (f41c <log_output_msg_process+0xe4>)
    f3ca:	4628      	mov	r0, r5
    f3cc:	f7ff fe8a 	bl	f0e4 <print_formatted>
	}

	log_output_flush(log_output);
    f3d0:	4628      	mov	r0, r5
    f3d2:	f00d fe8a 	bl	1d0ea <log_output_flush>
}
    f3d6:	b00a      	add	sp, #40	; 0x28
    f3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    f3dc:	4630      	mov	r0, r6
    f3de:	f00d fcbd 	bl	1cd5c <log_msg_str_get>
    f3e2:	490f      	ldr	r1, [pc, #60]	; (f420 <log_output_msg_process+0xe8>)
    f3e4:	4602      	mov	r2, r0
    f3e6:	4628      	mov	r0, r5
    f3e8:	f7ff fe7c 	bl	f0e4 <print_formatted>
	u32_t offset = 0U;
    f3ec:	f04f 0800 	mov.w	r8, #0
		length = sizeof(buf);
    f3f0:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    f3f4:	aa05      	add	r2, sp, #20
    f3f6:	4643      	mov	r3, r8
    f3f8:	a906      	add	r1, sp, #24
    f3fa:	4630      	mov	r0, r6
		length = sizeof(buf);
    f3fc:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    f400:	f00d fd02 	bl	1ce08 <log_msg_hexdump_data_get>
		if (length) {
    f404:	9a05      	ldr	r2, [sp, #20]
    f406:	2a00      	cmp	r2, #0
    f408:	d0b8      	beq.n	f37c <log_output_msg_process+0x44>
			hexdump_line_print(log_output, buf, length,
    f40a:	464b      	mov	r3, r9
    f40c:	9700      	str	r7, [sp, #0]
    f40e:	a906      	add	r1, sp, #24
    f410:	4628      	mov	r0, r5
    f412:	f7ff ff25 	bl	f260 <hexdump_line_print>
			offset += length;
    f416:	9b05      	ldr	r3, [sp, #20]
    f418:	4498      	add	r8, r3
    f41a:	e7eb      	b.n	f3f4 <log_output_msg_process+0xbc>
    f41c:	00020596 	.word	0x00020596
    f420:	00020de1 	.word	0x00020de1

0000f424 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    f424:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    f426:	e9d0 4300 	ldrd	r4, r3, [r0]
    f42a:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    f42c:	f242 730f 	movw	r3, #9999	; 0x270f
    f430:	428b      	cmp	r3, r1
    f432:	bf28      	it	cs
    f434:	460b      	movcs	r3, r1
    f436:	4a0d      	ldr	r2, [pc, #52]	; (f46c <log_output_dropped_process+0x48>)
    f438:	2105      	movs	r1, #5
    f43a:	4668      	mov	r0, sp
    f43c:	f001 fd84 	bl	10f48 <snprintf>
    f440:	4606      	mov	r6, r0

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    f442:	462b      	mov	r3, r5
    f444:	4620      	mov	r0, r4
    f446:	220b      	movs	r2, #11
    f448:	4909      	ldr	r1, [pc, #36]	; (f470 <log_output_dropped_process+0x4c>)
    f44a:	f00d fce4 	bl	1ce16 <buffer_write>
	buffer_write(outf, buf, len, dev);
    f44e:	462b      	mov	r3, r5
    f450:	4632      	mov	r2, r6
    f452:	4669      	mov	r1, sp
    f454:	4620      	mov	r0, r4
    f456:	f00d fcde 	bl	1ce16 <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    f45a:	462b      	mov	r3, r5
    f45c:	221b      	movs	r2, #27
    f45e:	4905      	ldr	r1, [pc, #20]	; (f474 <log_output_dropped_process+0x50>)
    f460:	4620      	mov	r0, r4
    f462:	f00d fcd8 	bl	1ce16 <buffer_write>
}
    f466:	b002      	add	sp, #8
    f468:	bd70      	pop	{r4, r5, r6, pc}
    f46a:	bf00      	nop
    f46c:	00020488 	.word	0x00020488
    f470:	000205b4 	.word	0x000205b4
    f474:	00020598 	.word	0x00020598

0000f478 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    f478:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    f47a:	2100      	movs	r1, #0
	timestamp_div = 1U;
    f47c:	4a07      	ldr	r2, [pc, #28]	; (f49c <log_output_timestamp_freq_set+0x24>)
{
    f47e:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    f480:	4c07      	ldr	r4, [pc, #28]	; (f4a0 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    f482:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    f484:	42a0      	cmp	r0, r4
    f486:	d804      	bhi.n	f492 <log_output_timestamp_freq_set+0x1a>
    f488:	b101      	cbz	r1, f48c <log_output_timestamp_freq_set+0x14>
    f48a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    f48c:	4b05      	ldr	r3, [pc, #20]	; (f4a4 <log_output_timestamp_freq_set+0x2c>)
    f48e:	6018      	str	r0, [r3, #0]
}
    f490:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    f492:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    f494:	005b      	lsls	r3, r3, #1
    f496:	2101      	movs	r1, #1
    f498:	e7f4      	b.n	f484 <log_output_timestamp_freq_set+0xc>
    f49a:	bf00      	nop
    f49c:	2002032c 	.word	0x2002032c
    f4a0:	000f4240 	.word	0x000f4240
    f4a4:	20020328 	.word	0x20020328

0000f4a8 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    f4a8:	4801      	ldr	r0, [pc, #4]	; (f4b0 <panic+0x8>)
    f4aa:	f00d be1e 	b.w	1d0ea <log_output_flush>
    f4ae:	bf00      	nop
    f4b0:	0001f504 	.word	0x0001f504

0000f4b4 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    f4b4:	4801      	ldr	r0, [pc, #4]	; (f4bc <dropped+0x8>)
    f4b6:	f7ff bfb5 	b.w	f424 <log_output_dropped_process>
    f4ba:	bf00      	nop
    f4bc:	0001f504 	.word	0x0001f504

0000f4c0 <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
    f4c0:	b508      	push	{r3, lr}
    f4c2:	4803      	ldr	r0, [pc, #12]	; (f4d0 <log_backend_uart_init+0x10>)
    f4c4:	f00b fd50 	bl	1af68 <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    f4c8:	4b02      	ldr	r3, [pc, #8]	; (f4d4 <log_backend_uart_init+0x14>)
    f4ca:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
    f4cc:	bd08      	pop	{r3, pc}
    f4ce:	bf00      	nop
    f4d0:	0001faed 	.word	0x0001faed
    f4d4:	20020338 	.word	0x20020338

0000f4d8 <put>:
{
    f4d8:	b510      	push	{r4, lr}
    f4da:	460c      	mov	r4, r1
	log_msg_get(msg);
    f4dc:	4608      	mov	r0, r1
    f4de:	f00d fc05 	bl	1ccec <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    f4e2:	4621      	mov	r1, r4
    f4e4:	4804      	ldr	r0, [pc, #16]	; (f4f8 <put+0x20>)
    f4e6:	220f      	movs	r2, #15
    f4e8:	f7ff ff26 	bl	f338 <log_output_msg_process>
	log_msg_put(msg);
    f4ec:	4620      	mov	r0, r4
}
    f4ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f4f2:	f00d bc24 	b.w	1cd3e <log_msg_put>
    f4f6:	bf00      	nop
    f4f8:	0001f504 	.word	0x0001f504

0000f4fc <socket_offload_register>:
void socket_offload_register(const struct socket_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(socket_ops == NULL);

	socket_ops = ops;
    f4fc:	4b01      	ldr	r3, [pc, #4]	; (f504 <socket_offload_register+0x8>)
    f4fe:	6018      	str	r0, [r3, #0]
}
    f500:	4770      	bx	lr
    f502:	bf00      	nop
    f504:	20020344 	.word	0x20020344

0000f508 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    f508:	280a      	cmp	r0, #10
{
    f50a:	b538      	push	{r3, r4, r5, lr}
    f50c:	4604      	mov	r4, r0
    f50e:	4d07      	ldr	r5, [pc, #28]	; (f52c <console_out+0x24>)
	if ('\n' == c) {
    f510:	d104      	bne.n	f51c <console_out+0x14>
    f512:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    f514:	6843      	ldr	r3, [r0, #4]
    f516:	210d      	movs	r1, #13
    f518:	685b      	ldr	r3, [r3, #4]
    f51a:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    f51c:	6828      	ldr	r0, [r5, #0]
    f51e:	6843      	ldr	r3, [r0, #4]
    f520:	b2e1      	uxtb	r1, r4
    f522:	685b      	ldr	r3, [r3, #4]
    f524:	4798      	blx	r3

	return c;
}
    f526:	4620      	mov	r0, r4
    f528:	bd38      	pop	{r3, r4, r5, pc}
    f52a:	bf00      	nop
    f52c:	20020348 	.word	0x20020348

0000f530 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    f530:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    f532:	4c04      	ldr	r4, [pc, #16]	; (f544 <uart_console_hook_install+0x14>)
    f534:	4620      	mov	r0, r4
    f536:	f001 fd01 	bl	10f3c <__stdout_hook_install>
	__printk_hook_install(console_out);
    f53a:	4620      	mov	r0, r4
}
    f53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    f540:	f7ff bb30 	b.w	eba4 <__printk_hook_install>
    f544:	0000f509 	.word	0x0000f509

0000f548 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    f548:	b508      	push	{r3, lr}
    f54a:	4804      	ldr	r0, [pc, #16]	; (f55c <uart_console_init+0x14>)
    f54c:	f00b fd0c 	bl	1af68 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    f550:	4b03      	ldr	r3, [pc, #12]	; (f560 <uart_console_init+0x18>)
    f552:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    f554:	f7ff ffec 	bl	f530 <uart_console_hook_install>

	return 0;
}
    f558:	2000      	movs	r0, #0
    f55a:	bd08      	pop	{r3, pc}
    f55c:	0001faed 	.word	0x0001faed
    f560:	20020348 	.word	0x20020348

0000f564 <hfclk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int hfclk_init(struct device *dev)
{
    f564:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    f566:	2200      	movs	r2, #0
{
    f568:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    f56a:	2101      	movs	r1, #1
    f56c:	2005      	movs	r0, #5
    f56e:	f000 f9c9 	bl	f904 <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    f572:	2005      	movs	r0, #5
    f574:	f000 f9b6 	bl	f8e4 <arch_irq_enable>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    f578:	2202      	movs	r2, #2
    f57a:	4b05      	ldr	r3, [pc, #20]	; (f590 <hfclk_init+0x2c>)
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    f57c:	2000      	movs	r0, #0
    f57e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    f582:	2203      	movs	r2, #3
    f584:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			(NRF_POWER_INT_USBDETECTED_MASK |
			 NRF_POWER_INT_USBREMOVED_MASK |
			 NRF_POWER_INT_USBPWRRDY_MASK),
			(0))));

	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    f588:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
    f58a:	e9c3 0000 	strd	r0, r0, [r3]

	return 0;
}
    f58e:	bd10      	pop	{r4, pc}
    f590:	40005000 	.word	0x40005000

0000f594 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    f594:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f596:	4b10      	ldr	r3, [pc, #64]	; (f5d8 <nrf_power_clock_isr+0x44>)
    f598:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    f59a:	b162      	cbz	r2, f5b6 <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
    f59c:	4a0f      	ldr	r2, [pc, #60]	; (f5dc <nrf_power_clock_isr+0x48>)
    f59e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    f5a2:	07d1      	lsls	r1, r2, #31
    f5a4:	d507      	bpl.n	f5b6 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f5a6:	2200      	movs	r2, #0
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
    f5a8:	480d      	ldr	r0, [pc, #52]	; (f5e0 <nrf_power_clock_isr+0x4c>)
    f5aa:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    f5ac:	6883      	ldr	r3, [r0, #8]
    f5ae:	7a5b      	ldrb	r3, [r3, #9]
    f5b0:	b90b      	cbnz	r3, f5b6 <nrf_power_clock_isr+0x22>
			clkstarted_handle(hfclk_dev);
    f5b2:	f00d fe5b 	bl	1d26c <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f5b6:	4b0b      	ldr	r3, [pc, #44]	; (f5e4 <nrf_power_clock_isr+0x50>)
    f5b8:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    f5ba:	b15a      	cbz	r2, f5d4 <nrf_power_clock_isr+0x40>
    return p_reg->INTENSET & mask;
    f5bc:	4a07      	ldr	r2, [pc, #28]	; (f5dc <nrf_power_clock_isr+0x48>)
    f5be:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    f5c2:	0792      	lsls	r2, r2, #30
    f5c4:	d506      	bpl.n	f5d4 <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f5c6:	2200      	movs	r2, #0

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
    f5c8:	4807      	ldr	r0, [pc, #28]	; (f5e8 <nrf_power_clock_isr+0x54>)
    f5ca:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    f5cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(lfclk_dev);
    f5d0:	f00d be4c 	b.w	1d26c <clkstarted_handle>
}
    f5d4:	bd08      	pop	{r3, pc}
    f5d6:	bf00      	nop
    f5d8:	40005100 	.word	0x40005100
    f5dc:	40005000 	.word	0x40005000
    f5e0:	2002c59c 	.word	0x2002c59c
    f5e4:	40005104 	.word	0x40005104
    f5e8:	2002c5a8 	.word	0x2002c5a8

0000f5ec <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    f5ec:	2200      	movs	r2, #0
    f5ee:	4b0d      	ldr	r3, [pc, #52]	; (f624 <rtc1_nrf_isr+0x38>)
    f5f0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    f5f4:	f04f 0220 	mov.w	r2, #32
    f5f8:	f3ef 8111 	mrs	r1, BASEPRI
    f5fc:	f382 8811 	msr	BASEPRI, r2
    f600:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    f604:	4a08      	ldr	r2, [pc, #32]	; (f628 <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    f606:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    f60a:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    f60c:	1ac0      	subs	r0, r0, r3
    f60e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    f612:	4403      	add	r3, r0
    f614:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    f616:	f381 8811 	msr	BASEPRI, r1
    f61a:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    f61e:	f00c bdb3 	b.w	1c188 <z_clock_announce>
    f622:	bf00      	nop
    f624:	40015000 	.word	0x40015000
    f628:	20020364 	.word	0x20020364

0000f62c <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    f62c:	b570      	push	{r4, r5, r6, lr}
    f62e:	4818      	ldr	r0, [pc, #96]	; (f690 <z_clock_driver_init+0x64>)
    f630:	f00b fc9a 	bl	1af68 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
    f634:	b348      	cbz	r0, f68a <z_clock_driver_init+0x5e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    f636:	6843      	ldr	r3, [r0, #4]
    f638:	2100      	movs	r1, #0
    f63a:	681b      	ldr	r3, [r3, #0]
    f63c:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
    f63e:	2601      	movs	r6, #1
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    f640:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    f642:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f646:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    f64a:	4d12      	ldr	r5, [pc, #72]	; (f694 <z_clock_driver_init+0x68>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    f64c:	4631      	mov	r1, r6
    f64e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    f652:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    f656:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f65a:	4b0f      	ldr	r3, [pc, #60]	; (f698 <z_clock_driver_init+0x6c>)
    f65c:	2015      	movs	r0, #21
    f65e:	601c      	str	r4, [r3, #0]
    f660:	4b0e      	ldr	r3, [pc, #56]	; (f69c <z_clock_driver_init+0x70>)
    f662:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    f666:	4622      	mov	r2, r4
    f668:	f000 f94c 	bl	f904 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    f66c:	2015      	movs	r0, #21
    f66e:	f000 f939 	bl	f8e4 <arch_irq_enable>

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    f672:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    f674:	4b0a      	ldr	r3, [pc, #40]	; (f6a0 <z_clock_driver_init+0x74>)
    f676:	601e      	str	r6, [r3, #0]
    f678:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
    f67a:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
    f67e:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    f680:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    f684:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
    f688:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    f68a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f68e:	e7fb      	b.n	f688 <z_clock_driver_init+0x5c>
    f690:	00020630 	.word	0x00020630
    f694:	40015000 	.word	0x40015000
    f698:	40015140 	.word	0x40015140
    f69c:	e000e100 	.word	0xe000e100
    f6a0:	40015008 	.word	0x40015008

0000f6a4 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    f6a4:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    f6a6:	4c25      	ldr	r4, [pc, #148]	; (f73c <z_clock_set_timeout+0x98>)
    f6a8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    f6ac:	bf08      	it	eq
    f6ae:	4620      	moveq	r0, r4
	__asm__ volatile(
    f6b0:	f04f 0320 	mov.w	r3, #32
    f6b4:	f3ef 8511 	mrs	r5, BASEPRI
    f6b8:	f383 8811 	msr	BASEPRI, r3
    f6bc:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    f6c0:	4b1f      	ldr	r3, [pc, #124]	; (f740 <z_clock_set_timeout+0x9c>)
    f6c2:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
    f6c6:	4b1f      	ldr	r3, [pc, #124]	; (f744 <z_clock_set_timeout+0xa0>)
    f6c8:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
    f6ca:	1aca      	subs	r2, r1, r3
    f6cc:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    f6d0:	0212      	lsls	r2, r2, #8
    f6d2:	d41a      	bmi.n	f70a <z_clock_set_timeout+0x66>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    f6d4:	1e42      	subs	r2, r0, #1
    f6d6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    f6da:	42a2      	cmp	r2, r4
    f6dc:	bfa8      	it	ge
    f6de:	4622      	movge	r2, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    f6e0:	1c70      	adds	r0, r6, #1
    f6e2:	4410      	add	r0, r2
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    f6e4:	42a0      	cmp	r0, r4
    f6e6:	bf94      	ite	ls
    f6e8:	1818      	addls	r0, r3, r0
    f6ea:	1918      	addhi	r0, r3, r4
	return (a - b) & COUNTER_MAX;
    f6ec:	1a41      	subs	r1, r0, r1
    f6ee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    f6f2:	4a13      	ldr	r2, [pc, #76]	; (f740 <z_clock_set_timeout+0x9c>)
    f6f4:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    f6f8:	2902      	cmp	r1, #2
    p_reg->CC[ch] = cc_val;
    f6fa:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    f6fe:	d906      	bls.n	f70e <z_clock_set_timeout+0x6a>
	__asm__ volatile(
    f700:	f385 8811 	msr	BASEPRI, r5
    f704:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    f708:	bd70      	pop	{r4, r5, r6, pc}
		ticks = 0;
    f70a:	2200      	movs	r2, #0
    f70c:	e7e8      	b.n	f6e0 <z_clock_set_timeout+0x3c>
     return p_reg->COUNTER;
    f70e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    f712:	490d      	ldr	r1, [pc, #52]	; (f748 <z_clock_set_timeout+0xa4>)
	return (a - b) & COUNTER_MAX;
    f714:	1ac3      	subs	r3, r0, r3
    f716:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    f71a:	1e5c      	subs	r4, r3, #1
    f71c:	428c      	cmp	r4, r1
    f71e:	d905      	bls.n	f72c <z_clock_set_timeout+0x88>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f720:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    f724:	4b09      	ldr	r3, [pc, #36]	; (f74c <z_clock_set_timeout+0xa8>)
    f726:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    f72a:	e7e9      	b.n	f700 <z_clock_set_timeout+0x5c>
		} else if (dt == 1) {
    f72c:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    f72e:	bf02      	ittt	eq
    f730:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    f732:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    f736:	f8c2 0540 	streq.w	r0, [r2, #1344]	; 0x540
    f73a:	e7e1      	b.n	f700 <z_clock_set_timeout+0x5c>
    f73c:	00fffffe 	.word	0x00fffffe
    f740:	40015000 	.word	0x40015000
    f744:	20020364 	.word	0x20020364
    f748:	007ffffe 	.word	0x007ffffe
    f74c:	e000e100 	.word	0xe000e100

0000f750 <z_clock_elapsed>:
	__asm__ volatile(
    f750:	f04f 0220 	mov.w	r2, #32
    f754:	f3ef 8311 	mrs	r3, BASEPRI
    f758:	f382 8811 	msr	BASEPRI, r2
    f75c:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    f760:	4a06      	ldr	r2, [pc, #24]	; (f77c <z_clock_elapsed+0x2c>)
    f762:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    f766:	4a06      	ldr	r2, [pc, #24]	; (f780 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    f768:	6812      	ldr	r2, [r2, #0]
    f76a:	1a80      	subs	r0, r0, r2
    f76c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    f770:	f383 8811 	msr	BASEPRI, r3
    f774:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    f778:	4770      	bx	lr
    f77a:	bf00      	nop
    f77c:	40015000 	.word	0x40015000
    f780:	20020364 	.word	0x20020364

0000f784 <z_timer_cycle_get_32>:
	__asm__ volatile(
    f784:	f04f 0320 	mov.w	r3, #32
    f788:	f3ef 8211 	mrs	r2, BASEPRI
    f78c:	f383 8811 	msr	BASEPRI, r3
    f790:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    f794:	4906      	ldr	r1, [pc, #24]	; (f7b0 <z_timer_cycle_get_32+0x2c>)
    f796:	4b07      	ldr	r3, [pc, #28]	; (f7b4 <z_timer_cycle_get_32+0x30>)
    f798:	6808      	ldr	r0, [r1, #0]
    f79a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    f79e:	f382 8811 	msr	BASEPRI, r2
    f7a2:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    f7a6:	1a1b      	subs	r3, r3, r0
    f7a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    f7ac:	4418      	add	r0, r3
    f7ae:	4770      	bx	lr
    f7b0:	20020364 	.word	0x20020364
    f7b4:	40015000 	.word	0x40015000

0000f7b8 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    f7b8:	4807      	ldr	r0, [pc, #28]	; (f7d8 <_EXIT_EXC+0xe>)

    ldr r1, [r0, #_kernel_offset_to_current]
    f7ba:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    f7bc:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    f7be:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    f7c0:	d003      	beq.n	f7ca <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    f7c2:	4906      	ldr	r1, [pc, #24]	; (f7dc <_EXIT_EXC+0x12>)
    ldr r2, =_SCS_ICSR_PENDSV
    f7c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    f7c8:	600a      	str	r2, [r1, #0]

0000f7ca <_EXIT_EXC>:
_EXIT_EXC:
#endif /* CONFIG_PREEMPT_ENABLED */

#ifdef CONFIG_STACK_SENTINEL
#if defined(CONFIG_CPU_CORTEX_M)
    push {r0, lr}
    f7ca:	b501      	push	{r0, lr}
    bl z_check_stack_sentinel
    f7cc:	f00c fb08 	bl	1bde0 <z_check_stack_sentinel>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0, r1}
    mov lr, r1
#else
    pop {r0, lr}
    f7d0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    f7d4:	4770      	bx	lr
    f7d6:	0000      	.short	0x0000
    ldr r0, =_kernel
    f7d8:	20024d28 	.word	0x20024d28
    ldr r1, =_SCS_ICSR
    f7dc:	e000ed04 	.word	0xe000ed04

0000f7e0 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    f7e0:	4a09      	ldr	r2, [pc, #36]	; (f808 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    f7e2:	490a      	ldr	r1, [pc, #40]	; (f80c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    f7e4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    f7e6:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    f7e8:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    f7ea:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    f7ec:	4908      	ldr	r1, [pc, #32]	; (f810 <arch_swap+0x30>)
    f7ee:	684b      	ldr	r3, [r1, #4]
    f7f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    f7f4:	604b      	str	r3, [r1, #4]
    f7f6:	2300      	movs	r3, #0
    f7f8:	f383 8811 	msr	BASEPRI, r3
    f7fc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    f800:	6893      	ldr	r3, [r2, #8]
}
    f802:	6e98      	ldr	r0, [r3, #104]	; 0x68
    f804:	4770      	bx	lr
    f806:	bf00      	nop
    f808:	20024d28 	.word	0x20024d28
    f80c:	0001f944 	.word	0x0001f944
    f810:	e000ed00 	.word	0xe000ed00

0000f814 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    f814:	4929      	ldr	r1, [pc, #164]	; (f8bc <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    f816:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    f818:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    f81c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    f81e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    f822:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
    f826:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    f82a:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
    f82e:	d004      	beq.n	f83a <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
    f830:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
    f834:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
    f838:	e007      	b.n	f84a <out_fp_endif>

0000f83a <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
    f83a:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
    f83e:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
    f842:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
    f846:	f050 0004 	orrs.w	r0, r0, #4

0000f84a <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
    f84a:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    f84e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    f850:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    f854:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    f858:	4f19      	ldr	r7, [pc, #100]	; (f8c0 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    f85a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    f85e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    f860:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    f862:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    f864:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    f866:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    f868:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    f86a:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
    f86e:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
    f872:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
    f876:	d105      	bne.n	f884 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    f878:	2300      	movs	r3, #0
    vmsr fpscr, r3
    f87a:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    f87e:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
    f882:	e005      	b.n	f890 <in_fp_endif>

0000f884 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
    f884:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
    f888:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
    f88c:	ec90 8a10 	vldmia	r0, {s16-s31}

0000f890 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    f890:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
    f894:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    f898:	f383 8814 	msr	CONTROL, r3
    isb
    f89c:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    f8a0:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    f8a2:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    f8a4:	f00d fd0e 	bl	1d2c4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    f8a8:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    f8ac:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    f8b0:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    f8b4:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    f8b8:	4770      	bx	lr
    f8ba:	0000      	.short	0x0000
    ldr r1, =_kernel
    f8bc:	20024d28 	.word	0x20024d28
    ldr v4, =_SCS_ICSR
    f8c0:	e000ed04 	.word	0xe000ed04

0000f8c4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    f8c4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    f8c8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    f8ca:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    f8ce:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    f8d2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    f8d4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    f8d8:	2902      	cmp	r1, #2
    beq _oops
    f8da:	d0ff      	beq.n	f8dc <_oops>

0000f8dc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    f8dc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    f8de:	f00d fce6 	bl	1d2ae <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    f8e2:	bd01      	pop	{r0, pc}

0000f8e4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    f8e4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    f8e6:	2b00      	cmp	r3, #0
    f8e8:	db08      	blt.n	f8fc <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f8ea:	2201      	movs	r2, #1
    f8ec:	f000 001f 	and.w	r0, r0, #31
    f8f0:	fa02 f000 	lsl.w	r0, r2, r0
    f8f4:	4a02      	ldr	r2, [pc, #8]	; (f900 <arch_irq_enable+0x1c>)
    f8f6:	095b      	lsrs	r3, r3, #5
    f8f8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    f8fc:	4770      	bx	lr
    f8fe:	bf00      	nop
    f900:	e000e100 	.word	0xe000e100

0000f904 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    f904:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    f906:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    f908:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f90c:	bfa8      	it	ge
    f90e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    f912:	ea4f 1141 	mov.w	r1, r1, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f916:	bfb8      	it	lt
    f918:	4b05      	ldrlt	r3, [pc, #20]	; (f930 <z_arm_irq_priority_set+0x2c>)
    f91a:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f91c:	bfab      	itete	ge
    f91e:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f922:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f926:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f92a:	5419      	strblt	r1, [r3, r0]
}
    f92c:	4770      	bx	lr
    f92e:	bf00      	nop
    f930:	e000ed14 	.word	0xe000ed14

0000f934 <_arch_isr_direct_pm>:
	z_arm_reserved();
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    f934:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    f936:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    f938:	4b04      	ldr	r3, [pc, #16]	; (f94c <_arch_isr_direct_pm+0x18>)
    f93a:	6a18      	ldr	r0, [r3, #32]
    f93c:	b118      	cbz	r0, f946 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    f93e:	2200      	movs	r2, #0
    f940:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    f942:	f00e ffc2 	bl	1e8ca <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    f946:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    f948:	bd08      	pop	{r3, pc}
    f94a:	bf00      	nop
    f94c:	20024d28 	.word	0x20024d28

0000f950 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
    f950:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f952:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
    f954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
    f956:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    f958:	9300      	str	r3, [sp, #0]
    f95a:	9b09      	ldr	r3, [sp, #36]	; 0x24
	stackEnd = pStackMem + stackSize;
    f95c:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    f95e:	f00f f9d6 	bl	1ed0e <z_new_thread_init>
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    f962:	4a0c      	ldr	r2, [pc, #48]	; (f994 <arch_new_thread+0x44>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    f964:	f1a4 0320 	sub.w	r3, r4, #32
    f968:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    f96c:	f022 0201 	bic.w	r2, r2, #1
    f970:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    f972:	9a06      	ldr	r2, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
    f974:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    f976:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    f978:	9a07      	ldr	r2, [sp, #28]
    f97a:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    f97c:	9a08      	ldr	r2, [sp, #32]
    f97e:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
    f980:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    f984:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    f986:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    f988:	2300      	movs	r3, #0
    f98a:	666b      	str	r3, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
    f98c:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    f990:	b002      	add	sp, #8
    f992:	bd70      	pop	{r4, r5, r6, pc}
    f994:	0001c7db 	.word	0x0001c7db

0000f998 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    f998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f99c:	461f      	mov	r7, r3
    f99e:	4606      	mov	r6, r0
    f9a0:	460c      	mov	r4, r1
    f9a2:	4690      	mov	r8, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    f9a4:	2300      	movs	r3, #0
    f9a6:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    f9aa:	f3ef 8514 	mrs	r5, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    f9ae:	f025 0504 	bic.w	r5, r5, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    f9b2:	f385 8814 	msr	CONTROL, r5
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    f9b6:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    f9ba:	f000 fc1b 	bl	101f4 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    f9be:	4b0a      	ldr	r3, [pc, #40]	; (f9e8 <arch_switch_to_main_thread+0x50>)
	start_of_main_stack =
    f9c0:	4444      	add	r4, r8
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    f9c2:	4630      	mov	r0, r6
	_current = main_thread;
    f9c4:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    f9c6:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    f9ca:	f00d fc7b 	bl	1d2c4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    f9ce:	4638      	mov	r0, r7
    f9d0:	f384 8809 	msr	PSP, r4
    f9d4:	2100      	movs	r1, #0
    f9d6:	b663      	cpsie	if
    f9d8:	f381 8811 	msr	BASEPRI, r1
    f9dc:	f3bf 8f6f 	isb	sy
    f9e0:	2200      	movs	r2, #0
    f9e2:	2300      	movs	r3, #0
    f9e4:	f00c fef9 	bl	1c7da <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    f9e8:	20024d28 	.word	0x20024d28

0000f9ec <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    f9ec:	4901      	ldr	r1, [pc, #4]	; (f9f4 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    f9ee:	2210      	movs	r2, #16
	str r2, [r1]
    f9f0:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    f9f2:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    f9f4:	e000ed10 	.word	0xe000ed10

0000f9f8 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    f9f8:	4040      	eors	r0, r0
	msr BASEPRI, r0
    f9fa:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    f9fe:	bf30      	wfi

	bx lr
    fa00:	4770      	bx	lr
    fa02:	bf00      	nop

0000fa04 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
    fa04:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    fa08:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    fa0c:	4672      	mov	r2, lr

	push {r0, lr}
    fa0e:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
    fa10:	f000 fab0 	bl	ff74 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    fa14:	bd01      	pop	{r0, pc}
    fa16:	bf00      	nop

0000fa18 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    fa18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fa1c:	4681      	mov	r9, r0
    fa1e:	b08a      	sub	sp, #40	; 0x28

	if (esf != NULL) {
    fa20:	460c      	mov	r4, r1
    fa22:	2900      	cmp	r1, #0
    fa24:	d07a      	beq.n	fb1c <z_arm_fatal_error+0x104>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    fa26:	2201      	movs	r2, #1
    fa28:	f04f 0300 	mov.w	r3, #0
    fa2c:	4d3f      	ldr	r5, [pc, #252]	; (fb2c <z_arm_fatal_error+0x114>)
    fa2e:	f362 0307 	bfi	r3, r2, #0, #8
    fa32:	4a3f      	ldr	r2, [pc, #252]	; (fb30 <z_arm_fatal_error+0x118>)
    fa34:	483f      	ldr	r0, [pc, #252]	; (fb34 <z_arm_fatal_error+0x11c>)
    fa36:	1aad      	subs	r5, r5, r2
    fa38:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    fa3c:	f365 138f 	bfi	r3, r5, #6, #10
    fa40:	f8ad 3000 	strh.w	r3, [sp]
    fa44:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    fa48:	6809      	ldr	r1, [r1, #0]
    fa4a:	f00d f8d7 	bl	1cbfc <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    fa4e:	2201      	movs	r2, #1
    fa50:	f04f 0300 	mov.w	r3, #0
    fa54:	f362 0307 	bfi	r3, r2, #0, #8
    fa58:	f365 138f 	bfi	r3, r5, #6, #10
    fa5c:	f8ad 3000 	strh.w	r3, [sp]
    fa60:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    fa64:	68e1      	ldr	r1, [r4, #12]
    fa66:	4834      	ldr	r0, [pc, #208]	; (fb38 <z_arm_fatal_error+0x120>)
    fa68:	f00d f8c8 	bl	1cbfc <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    fa6c:	2301      	movs	r3, #1
    fa6e:	f04f 0200 	mov.w	r2, #0
    fa72:	f363 0207 	bfi	r2, r3, #0, #8
    fa76:	f365 128f 	bfi	r2, r5, #6, #10
    fa7a:	69e1      	ldr	r1, [r4, #28]
    fa7c:	482f      	ldr	r0, [pc, #188]	; (fb3c <z_arm_fatal_error+0x124>)
    fa7e:	f00d f891 	bl	1cba4 <log_1>
	for (int i = 0; i < 16; i += 4) {
    fa82:	4627      	mov	r7, r4
    fa84:	2600      	movs	r6, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    fa86:	f8df a0c0 	ldr.w	sl, [pc, #192]	; fb48 <z_arm_fatal_error+0x130>
    fa8a:	edd7 7a08 	vldr	s15, [r7, #32]
    fa8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fa92:	edcd 7a03 	vstr	s15, [sp, #12]
    fa96:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
    fa9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fa9e:	edcd 7a05 	vstr	s15, [sp, #20]
    faa2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    faa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    faaa:	edcd 7a07 	vstr	s15, [sp, #28]
    faae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    fab2:	2208      	movs	r2, #8
    fab4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fab8:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    fabc:	f043 0301 	orr.w	r3, r3, #1
    fac0:	f363 0807 	bfi	r8, r3, #0, #8
    fac4:	1c73      	adds	r3, r6, #1
    fac6:	9304      	str	r3, [sp, #16]
    fac8:	1cb3      	adds	r3, r6, #2
    faca:	9306      	str	r3, [sp, #24]
    facc:	f365 188f 	bfi	r8, r5, #6, #10
    fad0:	1cf3      	adds	r3, r6, #3
    fad2:	9602      	str	r6, [sp, #8]
    fad4:	9308      	str	r3, [sp, #32]
    fad6:	eb0d 0102 	add.w	r1, sp, r2
    fada:	4643      	mov	r3, r8
    fadc:	4650      	mov	r0, sl
	for (int i = 0; i < 16; i += 4) {
    fade:	3604      	adds	r6, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    fae0:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
    fae4:	f00d f8a5 	bl	1cc32 <log_n>
	for (int i = 0; i < 16; i += 4) {
    fae8:	2e10      	cmp	r6, #16
    faea:	f107 0710 	add.w	r7, r7, #16
    faee:	d1cc      	bne.n	fa8a <z_arm_fatal_error+0x72>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
    faf0:	2301      	movs	r3, #1
    faf2:	f04f 0200 	mov.w	r2, #0
    faf6:	f363 0207 	bfi	r2, r3, #0, #8
    fafa:	f365 128f 	bfi	r2, r5, #6, #10
    fafe:	6e21      	ldr	r1, [r4, #96]	; 0x60
    fb00:	480f      	ldr	r0, [pc, #60]	; (fb40 <z_arm_fatal_error+0x128>)
    fb02:	f00d f84f 	bl	1cba4 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    fb06:	f04f 0200 	mov.w	r2, #0
    fb0a:	2301      	movs	r3, #1
    fb0c:	f363 0207 	bfi	r2, r3, #0, #8
    fb10:	f365 128f 	bfi	r2, r5, #6, #10
    fb14:	69a1      	ldr	r1, [r4, #24]
    fb16:	480b      	ldr	r0, [pc, #44]	; (fb44 <z_arm_fatal_error+0x12c>)
    fb18:	f00d f844 	bl	1cba4 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    fb1c:	4621      	mov	r1, r4
    fb1e:	4648      	mov	r0, r9
    fb20:	f00b fa4e 	bl	1afc0 <z_fatal_error>
}
    fb24:	b00a      	add	sp, #40	; 0x28
    fb26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fb2a:	bf00      	nop
    fb2c:	0001f3f0 	.word	0x0001f3f0
    fb30:	0001f390 	.word	0x0001f390
    fb34:	0002065c 	.word	0x0002065c
    fb38:	0002068b 	.word	0x0002068b
    fb3c:	000206ba 	.word	0x000206ba
    fb40:	0002070c 	.word	0x0002070c
    fb44:	0002071b 	.word	0x0002071b
    fb48:	000206c9 	.word	0x000206c9

0000fb4c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    fb4c:	bf30      	wfi
    b z_SysNmiOnReset
    fb4e:	f7ff bffd 	b.w	fb4c <z_SysNmiOnReset>
    fb52:	bf00      	nop

0000fb54 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    fb54:	4a11      	ldr	r2, [pc, #68]	; (fb9c <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    fb56:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    fb58:	4b11      	ldr	r3, [pc, #68]	; (fba0 <z_arm_prep_c+0x4c>)
    fb5a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    fb5e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    fb60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    fb64:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    fb68:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    fb6c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    fb70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    fb74:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    fb78:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    fb7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    fb80:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    fb84:	2300      	movs	r3, #0
    fb86:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    fb8a:	f00b fa99 	bl	1b0c0 <z_bss_zero>
	z_data_copy();
    fb8e:	f00b faa1 	bl	1b0d4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    fb92:	f000 fafb 	bl	1018c <z_arm_int_lib_init>
	z_cstart();
    fb96:	f00b fad5 	bl	1b144 <z_cstart>
    fb9a:	bf00      	nop
    fb9c:	0000c000 	.word	0x0000c000
    fba0:	e000ed00 	.word	0xe000ed00

0000fba4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    fba4:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    fba6:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    fba8:	4a0b      	ldr	r2, [pc, #44]	; (fbd8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    fbaa:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    fbac:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    fbae:	bf1e      	ittt	ne
	movne	r1, #0
    fbb0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    fbb2:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    fbb4:	f00e fe89 	blne	1e8ca <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    fbb8:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    fbba:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    fbbe:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    fbc2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    fbc6:	4905      	ldr	r1, [pc, #20]	; (fbdc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    fbc8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    fbca:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    fbcc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    fbce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    fbd2:	4903      	ldr	r1, [pc, #12]	; (fbe0 <_isr_wrapper+0x3c>)
	bx r1
    fbd4:	4708      	bx	r1
    fbd6:	0000      	.short	0x0000
	ldr r2, =_kernel
    fbd8:	20024d28 	.word	0x20024d28
	ldr r1, =_sw_isr_table
    fbdc:	0001f0a4 	.word	0x0001f0a4
	ldr r1, =z_arm_int_exit
    fbe0:	0000f7b9 	.word	0x0000f7b9

0000fbe4 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    fbe4:	f00c ffac 	bl	1cb40 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    fbe8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    fbea:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    fbee:	4808      	ldr	r0, [pc, #32]	; (fc10 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    fbf0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    fbf4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    fbf6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    fbfa:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    fbfe:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    fc00:	4308      	orrs	r0, r1
    msr CONTROL, r0
    fc02:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    fc06:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    fc0a:	f7ff ffa3 	bl	fb54 <z_arm_prep_c>
    fc0e:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    fc10:	200282f8 	.word	0x200282f8

0000fc14 <usage_fault.isra.2>:
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    fc14:	2301      	movs	r3, #1
    fc16:	f04f 0100 	mov.w	r1, #0
static u32_t usage_fault(const z_arch_esf_t *esf)
    fc1a:	b510      	push	{r4, lr}
	PR_FAULT_INFO("***** USAGE FAULT *****");
    fc1c:	f363 0107 	bfi	r1, r3, #0, #8
    fc20:	4c3a      	ldr	r4, [pc, #232]	; (fd0c <usage_fault.isra.2+0xf8>)
    fc22:	4b3b      	ldr	r3, [pc, #236]	; (fd10 <usage_fault.isra.2+0xfc>)
    fc24:	483b      	ldr	r0, [pc, #236]	; (fd14 <usage_fault.isra.2+0x100>)
    fc26:	1ae4      	subs	r4, r4, r3
    fc28:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    fc2c:	f364 118f 	bfi	r1, r4, #6, #10
    fc30:	f00c ffab 	bl	1cb8a <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    fc34:	4b38      	ldr	r3, [pc, #224]	; (fd18 <usage_fault.isra.2+0x104>)
    fc36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fc38:	0199      	lsls	r1, r3, #6
    fc3a:	d509      	bpl.n	fc50 <usage_fault.isra.2+0x3c>
		PR_FAULT_INFO("  Division by zero");
    fc3c:	f04f 0100 	mov.w	r1, #0
    fc40:	2301      	movs	r3, #1
    fc42:	f363 0107 	bfi	r1, r3, #0, #8
    fc46:	f364 118f 	bfi	r1, r4, #6, #10
    fc4a:	4834      	ldr	r0, [pc, #208]	; (fd1c <usage_fault.isra.2+0x108>)
    fc4c:	f00c ff9d 	bl	1cb8a <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    fc50:	4b31      	ldr	r3, [pc, #196]	; (fd18 <usage_fault.isra.2+0x104>)
    fc52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fc54:	01da      	lsls	r2, r3, #7
    fc56:	d509      	bpl.n	fc6c <usage_fault.isra.2+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
    fc58:	f04f 0100 	mov.w	r1, #0
    fc5c:	2301      	movs	r3, #1
    fc5e:	f363 0107 	bfi	r1, r3, #0, #8
    fc62:	f364 118f 	bfi	r1, r4, #6, #10
    fc66:	482e      	ldr	r0, [pc, #184]	; (fd20 <usage_fault.isra.2+0x10c>)
    fc68:	f00c ff8f 	bl	1cb8a <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    fc6c:	4b2a      	ldr	r3, [pc, #168]	; (fd18 <usage_fault.isra.2+0x104>)
    fc6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fc70:	02db      	lsls	r3, r3, #11
    fc72:	d509      	bpl.n	fc88 <usage_fault.isra.2+0x74>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    fc74:	f04f 0100 	mov.w	r1, #0
    fc78:	2301      	movs	r3, #1
    fc7a:	f363 0107 	bfi	r1, r3, #0, #8
    fc7e:	f364 118f 	bfi	r1, r4, #6, #10
    fc82:	4828      	ldr	r0, [pc, #160]	; (fd24 <usage_fault.isra.2+0x110>)
    fc84:	f00c ff81 	bl	1cb8a <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    fc88:	4b23      	ldr	r3, [pc, #140]	; (fd18 <usage_fault.isra.2+0x104>)
    fc8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fc8c:	0318      	lsls	r0, r3, #12
    fc8e:	d509      	bpl.n	fca4 <usage_fault.isra.2+0x90>
		PR_FAULT_INFO("  No coprocessor instructions");
    fc90:	f04f 0100 	mov.w	r1, #0
    fc94:	2301      	movs	r3, #1
    fc96:	f363 0107 	bfi	r1, r3, #0, #8
    fc9a:	f364 118f 	bfi	r1, r4, #6, #10
    fc9e:	4822      	ldr	r0, [pc, #136]	; (fd28 <usage_fault.isra.2+0x114>)
    fca0:	f00c ff73 	bl	1cb8a <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    fca4:	4b1c      	ldr	r3, [pc, #112]	; (fd18 <usage_fault.isra.2+0x104>)
    fca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fca8:	0359      	lsls	r1, r3, #13
    fcaa:	d509      	bpl.n	fcc0 <usage_fault.isra.2+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    fcac:	f04f 0100 	mov.w	r1, #0
    fcb0:	2301      	movs	r3, #1
    fcb2:	f363 0107 	bfi	r1, r3, #0, #8
    fcb6:	f364 118f 	bfi	r1, r4, #6, #10
    fcba:	481c      	ldr	r0, [pc, #112]	; (fd2c <usage_fault.isra.2+0x118>)
    fcbc:	f00c ff65 	bl	1cb8a <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    fcc0:	4b15      	ldr	r3, [pc, #84]	; (fd18 <usage_fault.isra.2+0x104>)
    fcc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fcc4:	039a      	lsls	r2, r3, #14
    fcc6:	d509      	bpl.n	fcdc <usage_fault.isra.2+0xc8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    fcc8:	f04f 0100 	mov.w	r1, #0
    fccc:	2301      	movs	r3, #1
    fcce:	f363 0107 	bfi	r1, r3, #0, #8
    fcd2:	f364 118f 	bfi	r1, r4, #6, #10
    fcd6:	4816      	ldr	r0, [pc, #88]	; (fd30 <usage_fault.isra.2+0x11c>)
    fcd8:	f00c ff57 	bl	1cb8a <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    fcdc:	4b0e      	ldr	r3, [pc, #56]	; (fd18 <usage_fault.isra.2+0x104>)
    fcde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fce0:	03db      	lsls	r3, r3, #15
    fce2:	d509      	bpl.n	fcf8 <usage_fault.isra.2+0xe4>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    fce4:	f04f 0100 	mov.w	r1, #0
    fce8:	2301      	movs	r3, #1
    fcea:	f363 0107 	bfi	r1, r3, #0, #8
    fcee:	f364 118f 	bfi	r1, r4, #6, #10
    fcf2:	4810      	ldr	r0, [pc, #64]	; (fd34 <usage_fault.isra.2+0x120>)
    fcf4:	f00c ff49 	bl	1cb8a <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    fcf8:	4a07      	ldr	r2, [pc, #28]	; (fd18 <usage_fault.isra.2+0x104>)

	return reason;
}
    fcfa:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    fcfc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    fcfe:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    fd02:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    fd06:	6293      	str	r3, [r2, #40]	; 0x28
}
    fd08:	bd10      	pop	{r4, pc}
    fd0a:	bf00      	nop
    fd0c:	0001f3f0 	.word	0x0001f3f0
    fd10:	0001f390 	.word	0x0001f390
    fd14:	000208a9 	.word	0x000208a9
    fd18:	e000ed00 	.word	0xe000ed00
    fd1c:	000208c1 	.word	0x000208c1
    fd20:	000208d4 	.word	0x000208d4
    fd24:	000208ee 	.word	0x000208ee
    fd28:	00020918 	.word	0x00020918
    fd2c:	00020936 	.word	0x00020936
    fd30:	0002095b 	.word	0x0002095b
    fd34:	00020975 	.word	0x00020975

0000fd38 <mem_manage_fault.isra.4>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    fd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
    fd3a:	2301      	movs	r3, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    fd3c:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    fd3e:	f04f 0100 	mov.w	r1, #0
    fd42:	4c37      	ldr	r4, [pc, #220]	; (fe20 <mem_manage_fault.isra.4+0xe8>)
    fd44:	f363 0107 	bfi	r1, r3, #0, #8
    fd48:	4b36      	ldr	r3, [pc, #216]	; (fe24 <mem_manage_fault.isra.4+0xec>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    fd4a:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    fd4c:	1ae4      	subs	r4, r4, r3
    fd4e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    fd52:	f364 118f 	bfi	r1, r4, #6, #10
    fd56:	4834      	ldr	r0, [pc, #208]	; (fe28 <mem_manage_fault.isra.4+0xf0>)
    fd58:	f00c ff17 	bl	1cb8a <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    fd5c:	4b33      	ldr	r3, [pc, #204]	; (fe2c <mem_manage_fault.isra.4+0xf4>)
    fd5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fd60:	06d9      	lsls	r1, r3, #27
    fd62:	d509      	bpl.n	fd78 <mem_manage_fault.isra.4+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    fd64:	f04f 0100 	mov.w	r1, #0
    fd68:	2301      	movs	r3, #1
    fd6a:	f363 0107 	bfi	r1, r3, #0, #8
    fd6e:	f364 118f 	bfi	r1, r4, #6, #10
    fd72:	482f      	ldr	r0, [pc, #188]	; (fe30 <mem_manage_fault.isra.4+0xf8>)
    fd74:	f00c ff09 	bl	1cb8a <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    fd78:	4b2c      	ldr	r3, [pc, #176]	; (fe2c <mem_manage_fault.isra.4+0xf4>)
    fd7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fd7c:	071a      	lsls	r2, r3, #28
    fd7e:	d509      	bpl.n	fd94 <mem_manage_fault.isra.4+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    fd80:	f04f 0100 	mov.w	r1, #0
    fd84:	2301      	movs	r3, #1
    fd86:	f363 0107 	bfi	r1, r3, #0, #8
    fd8a:	f364 118f 	bfi	r1, r4, #6, #10
    fd8e:	4829      	ldr	r0, [pc, #164]	; (fe34 <mem_manage_fault.isra.4+0xfc>)
    fd90:	f00c fefb 	bl	1cb8a <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    fd94:	4d25      	ldr	r5, [pc, #148]	; (fe2c <mem_manage_fault.isra.4+0xf4>)
    fd96:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fd98:	079b      	lsls	r3, r3, #30
    fd9a:	d51c      	bpl.n	fdd6 <mem_manage_fault.isra.4+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
    fd9c:	2301      	movs	r3, #1
    fd9e:	f04f 0100 	mov.w	r1, #0
    fda2:	f363 0107 	bfi	r1, r3, #0, #8
    fda6:	f364 118f 	bfi	r1, r4, #6, #10
    fdaa:	4823      	ldr	r0, [pc, #140]	; (fe38 <mem_manage_fault.isra.4+0x100>)
    fdac:	f00c feed 	bl	1cb8a <log_0>
		mmfar = SCB->MMFAR;
    fdb0:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    fdb2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fdb4:	0618      	lsls	r0, r3, #24
    fdb6:	d50e      	bpl.n	fdd6 <mem_manage_fault.isra.4+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    fdb8:	f04f 0200 	mov.w	r2, #0
    fdbc:	2301      	movs	r3, #1
    fdbe:	f363 0207 	bfi	r2, r3, #0, #8
    fdc2:	f364 128f 	bfi	r2, r4, #6, #10
    fdc6:	481d      	ldr	r0, [pc, #116]	; (fe3c <mem_manage_fault.isra.4+0x104>)
    fdc8:	f00c feec 	bl	1cba4 <log_1>
			if (from_hard_fault) {
    fdcc:	b11f      	cbz	r7, fdd6 <mem_manage_fault.isra.4+0x9e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    fdce:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fdd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    fdd4:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    fdd6:	4b15      	ldr	r3, [pc, #84]	; (fe2c <mem_manage_fault.isra.4+0xf4>)
    fdd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fdda:	07da      	lsls	r2, r3, #31
    fddc:	d509      	bpl.n	fdf2 <mem_manage_fault.isra.4+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
    fdde:	f04f 0100 	mov.w	r1, #0
    fde2:	2301      	movs	r3, #1
    fde4:	f363 0107 	bfi	r1, r3, #0, #8
    fde8:	f364 118f 	bfi	r1, r4, #6, #10
    fdec:	4814      	ldr	r0, [pc, #80]	; (fe40 <mem_manage_fault.isra.4+0x108>)
    fdee:	f00c fecc 	bl	1cb8a <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    fdf2:	4b0e      	ldr	r3, [pc, #56]	; (fe2c <mem_manage_fault.isra.4+0xf4>)
    fdf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fdf6:	069b      	lsls	r3, r3, #26
    fdf8:	d509      	bpl.n	fe0e <mem_manage_fault.isra.4+0xd6>
		PR_FAULT_INFO(
    fdfa:	f04f 0100 	mov.w	r1, #0
    fdfe:	2301      	movs	r3, #1
    fe00:	f363 0107 	bfi	r1, r3, #0, #8
    fe04:	f364 118f 	bfi	r1, r4, #6, #10
    fe08:	480e      	ldr	r0, [pc, #56]	; (fe44 <mem_manage_fault.isra.4+0x10c>)
    fe0a:	f00c febe 	bl	1cb8a <log_0>
	*recoverable = memory_fault_recoverable(esf);
    fe0e:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    fe10:	4b06      	ldr	r3, [pc, #24]	; (fe2c <mem_manage_fault.isra.4+0xf4>)
    fe12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    fe14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    fe16:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    fe1a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    fe1c:	7030      	strb	r0, [r6, #0]
}
    fe1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe20:	0001f3f0 	.word	0x0001f3f0
    fe24:	0001f390 	.word	0x0001f390
    fe28:	000207d1 	.word	0x000207d1
    fe2c:	e000ed00 	.word	0xe000ed00
    fe30:	000207e7 	.word	0x000207e7
    fe34:	0002081a 	.word	0x0002081a
    fe38:	0002082d 	.word	0x0002082d
    fe3c:	00020845 	.word	0x00020845
    fe40:	0002085b 	.word	0x0002085b
    fe44:	0002087a 	.word	0x0002087a

0000fe48 <bus_fault.isra.5>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    fe48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
    fe4a:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    fe4c:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    fe4e:	f04f 0100 	mov.w	r1, #0
    fe52:	4c3d      	ldr	r4, [pc, #244]	; (ff48 <bus_fault.isra.5+0x100>)
    fe54:	f363 0107 	bfi	r1, r3, #0, #8
    fe58:	4b3c      	ldr	r3, [pc, #240]	; (ff4c <bus_fault.isra.5+0x104>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    fe5a:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    fe5c:	1ae4      	subs	r4, r4, r3
    fe5e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    fe62:	f364 118f 	bfi	r1, r4, #6, #10
    fe66:	483a      	ldr	r0, [pc, #232]	; (ff50 <bus_fault.isra.5+0x108>)
    fe68:	f00c fe8f 	bl	1cb8a <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    fe6c:	4b39      	ldr	r3, [pc, #228]	; (ff54 <bus_fault.isra.5+0x10c>)
    fe6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fe70:	04d9      	lsls	r1, r3, #19
    fe72:	d509      	bpl.n	fe88 <bus_fault.isra.5+0x40>
		PR_FAULT_INFO("  Stacking error");
    fe74:	f04f 0100 	mov.w	r1, #0
    fe78:	2301      	movs	r3, #1
    fe7a:	f363 0107 	bfi	r1, r3, #0, #8
    fe7e:	f364 118f 	bfi	r1, r4, #6, #10
    fe82:	4835      	ldr	r0, [pc, #212]	; (ff58 <bus_fault.isra.5+0x110>)
    fe84:	f00c fe81 	bl	1cb8a <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    fe88:	4b32      	ldr	r3, [pc, #200]	; (ff54 <bus_fault.isra.5+0x10c>)
    fe8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fe8c:	051a      	lsls	r2, r3, #20
    fe8e:	d509      	bpl.n	fea4 <bus_fault.isra.5+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    fe90:	f04f 0100 	mov.w	r1, #0
    fe94:	2301      	movs	r3, #1
    fe96:	f363 0107 	bfi	r1, r3, #0, #8
    fe9a:	f364 118f 	bfi	r1, r4, #6, #10
    fe9e:	482f      	ldr	r0, [pc, #188]	; (ff5c <bus_fault.isra.5+0x114>)
    fea0:	f00c fe73 	bl	1cb8a <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    fea4:	4d2b      	ldr	r5, [pc, #172]	; (ff54 <bus_fault.isra.5+0x10c>)
    fea6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fea8:	059b      	lsls	r3, r3, #22
    feaa:	d51c      	bpl.n	fee6 <bus_fault.isra.5+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
    feac:	2301      	movs	r3, #1
    feae:	f04f 0100 	mov.w	r1, #0
    feb2:	f363 0107 	bfi	r1, r3, #0, #8
    feb6:	f364 118f 	bfi	r1, r4, #6, #10
    feba:	4829      	ldr	r0, [pc, #164]	; (ff60 <bus_fault.isra.5+0x118>)
    febc:	f00c fe65 	bl	1cb8a <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    fec0:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    fec2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fec4:	0418      	lsls	r0, r3, #16
    fec6:	d50e      	bpl.n	fee6 <bus_fault.isra.5+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    fec8:	f04f 0200 	mov.w	r2, #0
    fecc:	2301      	movs	r3, #1
    fece:	f363 0207 	bfi	r2, r3, #0, #8
    fed2:	f364 128f 	bfi	r2, r4, #6, #10
    fed6:	4823      	ldr	r0, [pc, #140]	; (ff64 <bus_fault.isra.5+0x11c>)
    fed8:	f00c fe64 	bl	1cba4 <log_1>
			if (from_hard_fault) {
    fedc:	b11f      	cbz	r7, fee6 <bus_fault.isra.5+0x9e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    fede:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fee0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    fee4:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    fee6:	4b1b      	ldr	r3, [pc, #108]	; (ff54 <bus_fault.isra.5+0x10c>)
    fee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    feea:	0559      	lsls	r1, r3, #21
    feec:	d509      	bpl.n	ff02 <bus_fault.isra.5+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
    feee:	f04f 0100 	mov.w	r1, #0
    fef2:	2301      	movs	r3, #1
    fef4:	f363 0107 	bfi	r1, r3, #0, #8
    fef8:	f364 118f 	bfi	r1, r4, #6, #10
    fefc:	481a      	ldr	r0, [pc, #104]	; (ff68 <bus_fault.isra.5+0x120>)
    fefe:	f00c fe44 	bl	1cb8a <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    ff02:	4b14      	ldr	r3, [pc, #80]	; (ff54 <bus_fault.isra.5+0x10c>)
    ff04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ff06:	05d2      	lsls	r2, r2, #23
    ff08:	d511      	bpl.n	ff2e <bus_fault.isra.5+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
    ff0a:	f04f 0100 	mov.w	r1, #0
    ff0e:	2301      	movs	r3, #1
    ff10:	4816      	ldr	r0, [pc, #88]	; (ff6c <bus_fault.isra.5+0x124>)
    ff12:	f363 0107 	bfi	r1, r3, #0, #8
    ff16:	f364 118f 	bfi	r1, r4, #6, #10
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    ff1a:	f00c fe36 	bl	1cb8a <log_0>
	*recoverable = memory_fault_recoverable(esf);
    ff1e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    ff20:	4a0c      	ldr	r2, [pc, #48]	; (ff54 <bus_fault.isra.5+0x10c>)
    ff22:	6a93      	ldr	r3, [r2, #40]	; 0x28
    ff24:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    ff28:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    ff2a:	7030      	strb	r0, [r6, #0]
}
    ff2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    ff2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ff30:	049b      	lsls	r3, r3, #18
    ff32:	d5f4      	bpl.n	ff1e <bus_fault.isra.5+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    ff34:	f04f 0100 	mov.w	r1, #0
    ff38:	2301      	movs	r3, #1
    ff3a:	f363 0107 	bfi	r1, r3, #0, #8
    ff3e:	f364 118f 	bfi	r1, r4, #6, #10
    ff42:	480b      	ldr	r0, [pc, #44]	; (ff70 <bus_fault.isra.5+0x128>)
    ff44:	e7e9      	b.n	ff1a <bus_fault.isra.5+0xd2>
    ff46:	bf00      	nop
    ff48:	0001f3f0 	.word	0x0001f3f0
    ff4c:	0001f390 	.word	0x0001f390
    ff50:	00020749 	.word	0x00020749
    ff54:	e000ed00 	.word	0xe000ed00
    ff58:	0002075f 	.word	0x0002075f
    ff5c:	0002081a 	.word	0x0002081a
    ff60:	00020770 	.word	0x00020770
    ff64:	00020789 	.word	0x00020789
    ff68:	0002079e 	.word	0x0002079e
    ff6c:	000207b9 	.word	0x000207b9
    ff70:	0002087a 	.word	0x0002087a

0000ff74 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    ff74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    ff78:	4b69      	ldr	r3, [pc, #420]	; (10120 <z_arm_fault+0x1ac>)
{
    ff7a:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    ff7c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    ff80:	4606      	mov	r6, r0
    ff82:	4689      	mov	r9, r1
    ff84:	4614      	mov	r4, r2
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    ff86:	f3c8 0708 	ubfx	r7, r8, #0, #9
    ff8a:	2500      	movs	r5, #0
    ff8c:	f385 8811 	msr	BASEPRI, r5
    ff90:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    ff94:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    ff98:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    ff9c:	d128      	bne.n	fff0 <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    ff9e:	07d0      	lsls	r0, r2, #31
    ffa0:	d426      	bmi.n	fff0 <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    ffa2:	0651      	lsls	r1, r2, #25
    ffa4:	d403      	bmi.n	ffae <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    ffa6:	0722      	lsls	r2, r4, #28
    ffa8:	d412      	bmi.n	ffd0 <z_arm_fault+0x5c>
			*nested_exc = true;
    ffaa:	2501      	movs	r5, #1
    ffac:	e012      	b.n	ffd4 <z_arm_fault+0x60>
		PR_FAULT_INFO("Exception occurred in Secure State");
    ffae:	2301      	movs	r3, #1
    ffb0:	f04f 0100 	mov.w	r1, #0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    ffb4:	4a5b      	ldr	r2, [pc, #364]	; (10124 <z_arm_fault+0x1b0>)
    ffb6:	f363 0107 	bfi	r1, r3, #0, #8
    ffba:	4b5b      	ldr	r3, [pc, #364]	; (10128 <z_arm_fault+0x1b4>)
    ffbc:	485b      	ldr	r0, [pc, #364]	; (1012c <z_arm_fault+0x1b8>)
    ffbe:	1a9b      	subs	r3, r3, r2
    ffc0:	08db      	lsrs	r3, r3, #3
    ffc2:	f363 118f 	bfi	r1, r3, #6, #10
    ffc6:	f00c fde0 	bl	1cb8a <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    ffca:	f014 0504 	ands.w	r5, r4, #4
    ffce:	d001      	beq.n	ffd4 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)psp;
    ffd0:	464e      	mov	r6, r9
	*nested_exc = false;
    ffd2:	2500      	movs	r5, #0
	*recoverable = false;
    ffd4:	2300      	movs	r3, #0
    ffd6:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    ffda:	1efb      	subs	r3, r7, #3
    ffdc:	2b09      	cmp	r3, #9
    ffde:	f200 8082 	bhi.w	100e6 <z_arm_fault+0x172>
    ffe2:	e8df f003 	tbb	[pc, r3]
    ffe6:	6b07      	.short	0x6b07
    ffe8:	80804e6f 	.word	0x80804e6f
    ffec:	73808080 	.word	0x73808080
		return NULL;
    fff0:	462e      	mov	r6, r5
    fff2:	e7ef      	b.n	ffd4 <z_arm_fault+0x60>
	PR_FAULT_INFO("***** HARD FAULT *****");
    fff4:	2301      	movs	r3, #1
    fff6:	f04f 0100 	mov.w	r1, #0
	*recoverable = false;
    fffa:	f04f 0800 	mov.w	r8, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
    fffe:	f363 0107 	bfi	r1, r3, #0, #8
   10002:	4f49      	ldr	r7, [pc, #292]	; (10128 <z_arm_fault+0x1b4>)
   10004:	4b47      	ldr	r3, [pc, #284]	; (10124 <z_arm_fault+0x1b0>)
   10006:	484a      	ldr	r0, [pc, #296]	; (10130 <z_arm_fault+0x1bc>)
   10008:	1aff      	subs	r7, r7, r3
   1000a:	f3c7 07c9 	ubfx	r7, r7, #3, #10
   1000e:	f367 118f 	bfi	r1, r7, #6, #10
   10012:	f00c fdba 	bl	1cb8a <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   10016:	4b42      	ldr	r3, [pc, #264]	; (10120 <z_arm_fault+0x1ac>)
	*recoverable = false;
   10018:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1001c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   1001e:	f014 0402 	ands.w	r4, r4, #2
   10022:	d00b      	beq.n	1003c <z_arm_fault+0xc8>
		PR_EXC("  Bus fault on vector table read");
   10024:	f04f 0100 	mov.w	r1, #0
   10028:	2301      	movs	r3, #1
   1002a:	4842      	ldr	r0, [pc, #264]	; (10134 <z_arm_fault+0x1c0>)
   1002c:	f363 0107 	bfi	r1, r3, #0, #8
   10030:	f367 118f 	bfi	r1, r7, #6, #10
	PR_FAULT_INFO(
   10034:	f00c fda9 	bl	1cb8a <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   10038:	2400      	movs	r4, #0
   1003a:	e025      	b.n	10088 <z_arm_fault+0x114>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1003c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1003e:	005b      	lsls	r3, r3, #1
   10040:	d522      	bpl.n	10088 <z_arm_fault+0x114>
		PR_EXC("  Fault escalation (see below)");
   10042:	2301      	movs	r3, #1
   10044:	f04f 0100 	mov.w	r1, #0
   10048:	f363 0107 	bfi	r1, r3, #0, #8
   1004c:	f367 118f 	bfi	r1, r7, #6, #10
   10050:	4839      	ldr	r0, [pc, #228]	; (10138 <z_arm_fault+0x1c4>)
   10052:	f00c fd9a 	bl	1cb8a <log_0>
		if (SCB_MMFSR != 0) {
   10056:	4b39      	ldr	r3, [pc, #228]	; (1013c <z_arm_fault+0x1c8>)
   10058:	781b      	ldrb	r3, [r3, #0]
   1005a:	b12b      	cbz	r3, 10068 <z_arm_fault+0xf4>
			reason = mem_manage_fault(esf, 1, recoverable);
   1005c:	2001      	movs	r0, #1
   1005e:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   10062:	f7ff fe69 	bl	fd38 <mem_manage_fault.isra.4>
   10066:	e00e      	b.n	10086 <z_arm_fault+0x112>
		} else if (SCB_BFSR != 0) {
   10068:	4b35      	ldr	r3, [pc, #212]	; (10140 <z_arm_fault+0x1cc>)
   1006a:	781b      	ldrb	r3, [r3, #0]
   1006c:	b12b      	cbz	r3, 1007a <z_arm_fault+0x106>
			reason = bus_fault(esf, 1, recoverable);
   1006e:	2001      	movs	r0, #1
   10070:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   10074:	f7ff fee8 	bl	fe48 <bus_fault.isra.5>
   10078:	e005      	b.n	10086 <z_arm_fault+0x112>
		} else if (SCB_UFSR != 0) {
   1007a:	4b32      	ldr	r3, [pc, #200]	; (10144 <z_arm_fault+0x1d0>)
   1007c:	881b      	ldrh	r3, [r3, #0]
   1007e:	b29b      	uxth	r3, r3
   10080:	b113      	cbz	r3, 10088 <z_arm_fault+0x114>
			reason = usage_fault(esf);
   10082:	f7ff fdc7 	bl	fc14 <usage_fault.isra.2>
   10086:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   10088:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1008c:	b99b      	cbnz	r3, 100b6 <z_arm_fault+0x142>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1008e:	2268      	movs	r2, #104	; 0x68
   10090:	4631      	mov	r1, r6
   10092:	a802      	add	r0, sp, #8
   10094:	f00d faef 	bl	1d676 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   10098:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1009a:	2d00      	cmp	r5, #0
   1009c:	d03a      	beq.n	10114 <z_arm_fault+0x1a0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1009e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   100a2:	b922      	cbnz	r2, 100ae <z_arm_fault+0x13a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   100a4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   100a8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   100ac:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   100ae:	a902      	add	r1, sp, #8
   100b0:	4620      	mov	r0, r4
   100b2:	f7ff fcb1 	bl	fa18 <z_arm_fatal_error>
}
   100b6:	b01d      	add	sp, #116	; 0x74
   100b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   100bc:	f10d 0107 	add.w	r1, sp, #7
   100c0:	2000      	movs	r0, #0
   100c2:	e7ce      	b.n	10062 <z_arm_fault+0xee>
		reason = bus_fault(esf, 0, recoverable);
   100c4:	f10d 0107 	add.w	r1, sp, #7
   100c8:	2000      	movs	r0, #0
   100ca:	e7d3      	b.n	10074 <z_arm_fault+0x100>
	PR_FAULT_INFO(
   100cc:	2301      	movs	r3, #1
   100ce:	f04f 0100 	mov.w	r1, #0
   100d2:	4a14      	ldr	r2, [pc, #80]	; (10124 <z_arm_fault+0x1b0>)
   100d4:	f363 0107 	bfi	r1, r3, #0, #8
   100d8:	4b13      	ldr	r3, [pc, #76]	; (10128 <z_arm_fault+0x1b4>)
   100da:	481b      	ldr	r0, [pc, #108]	; (10148 <z_arm_fault+0x1d4>)
   100dc:	1a9b      	subs	r3, r3, r2
   100de:	08db      	lsrs	r3, r3, #3
   100e0:	f363 118f 	bfi	r1, r3, #6, #10
   100e4:	e7a6      	b.n	10034 <z_arm_fault+0xc0>
	PR_FAULT_INFO("***** %s %d) *****",
   100e6:	2201      	movs	r2, #1
   100e8:	f04f 0300 	mov.w	r3, #0
   100ec:	490e      	ldr	r1, [pc, #56]	; (10128 <z_arm_fault+0x1b4>)
   100ee:	f362 0307 	bfi	r3, r2, #0, #8
   100f2:	4a0c      	ldr	r2, [pc, #48]	; (10124 <z_arm_fault+0x1b0>)
   100f4:	4815      	ldr	r0, [pc, #84]	; (1014c <z_arm_fault+0x1d8>)
   100f6:	1a89      	subs	r1, r1, r2
   100f8:	08c9      	lsrs	r1, r1, #3
   100fa:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   100fe:	f361 138f 	bfi	r3, r1, #6, #10
   10102:	f1a7 0210 	sub.w	r2, r7, #16
   10106:	4912      	ldr	r1, [pc, #72]	; (10150 <z_arm_fault+0x1dc>)
   10108:	bf18      	it	ne
   1010a:	4601      	movne	r1, r0
   1010c:	4811      	ldr	r0, [pc, #68]	; (10154 <z_arm_fault+0x1e0>)
   1010e:	f00c fd5d 	bl	1cbcc <log_2>
   10112:	e791      	b.n	10038 <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   10114:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   10118:	f023 0301 	bic.w	r3, r3, #1
   1011c:	e7c6      	b.n	100ac <z_arm_fault+0x138>
   1011e:	bf00      	nop
   10120:	e000ed00 	.word	0xe000ed00
   10124:	0001f390 	.word	0x0001f390
   10128:	0001f3f0 	.word	0x0001f3f0
   1012c:	000209a0 	.word	0x000209a0
   10130:	000209c3 	.word	0x000209c3
   10134:	000209da 	.word	0x000209da
   10138:	000209fb 	.word	0x000209fb
   1013c:	e000ed28 	.word	0xe000ed28
   10140:	e000ed29 	.word	0xe000ed29
   10144:	e000ed2a 	.word	0xe000ed2a
   10148:	00020a1a 	.word	0x00020a1a
   1014c:	00020a65 	.word	0x00020a65
   10150:	00020a50 	.word	0x00020a50
   10154:	00020a7e 	.word	0x00020a7e

00010158 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   10158:	4a02      	ldr	r2, [pc, #8]	; (10164 <z_arm_fault_init+0xc>)
   1015a:	6953      	ldr	r3, [r2, #20]
   1015c:	f043 0310 	orr.w	r3, r3, #16
   10160:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   10162:	4770      	bx	lr
   10164:	e000ed00 	.word	0xe000ed00

00010168 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   10168:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1016c:	4905      	ldr	r1, [pc, #20]	; (10184 <sys_arch_reboot+0x1c>)
   1016e:	4b06      	ldr	r3, [pc, #24]	; (10188 <sys_arch_reboot+0x20>)
   10170:	68ca      	ldr	r2, [r1, #12]
   10172:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   10176:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   10178:	60cb      	str	r3, [r1, #12]
   1017a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1017e:	bf00      	nop
   10180:	e7fd      	b.n	1017e <sys_arch_reboot+0x16>
   10182:	bf00      	nop
   10184:	e000ed00 	.word	0xe000ed00
   10188:	05fa0004 	.word	0x05fa0004

0001018c <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
   1018c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1018e:	2120      	movs	r1, #32
   10190:	4803      	ldr	r0, [pc, #12]	; (101a0 <z_arm_int_lib_init+0x14>)
   10192:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   10194:	3301      	adds	r3, #1
   10196:	2b41      	cmp	r3, #65	; 0x41
   10198:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   1019c:	d1f9      	bne.n	10192 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1019e:	4770      	bx	lr
   101a0:	e000e100 	.word	0xe000e100

000101a4 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   101a4:	b538      	push	{r3, r4, r5, lr}
   101a6:	4605      	mov	r5, r0
	__asm__ volatile(
   101a8:	f04f 0320 	mov.w	r3, #32
   101ac:	f3ef 8411 	mrs	r4, BASEPRI
   101b0:	f383 8811 	msr	BASEPRI, r3
   101b4:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
   101b8:	f00e fdca 	bl	1ed50 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   101bc:	4b0b      	ldr	r3, [pc, #44]	; (101ec <z_impl_k_thread_abort+0x48>)
   101be:	689b      	ldr	r3, [r3, #8]
   101c0:	42ab      	cmp	r3, r5
   101c2:	d10d      	bne.n	101e0 <z_impl_k_thread_abort+0x3c>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   101c4:	4b0a      	ldr	r3, [pc, #40]	; (101f0 <z_impl_k_thread_abort+0x4c>)
   101c6:	685a      	ldr	r2, [r3, #4]
   101c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
   101cc:	b922      	cbnz	r2, 101d8 <z_impl_k_thread_abort+0x34>
extern int arch_swap(unsigned int key);

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
   101ce:	f00b fe07 	bl	1bde0 <z_check_stack_sentinel>

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
   101d2:	4620      	mov	r0, r4
   101d4:	f7ff fb04 	bl	f7e0 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   101d8:	685a      	ldr	r2, [r3, #4]
   101da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   101de:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   101e0:	4620      	mov	r0, r4
}
   101e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   101e6:	f00e bccd 	b.w	1eb84 <z_reschedule_irqlock>
   101ea:	bf00      	nop
   101ec:	20024d28 	.word	0x20024d28
   101f0:	e000ed00 	.word	0xe000ed00

000101f4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   101f4:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   101f6:	4b0e      	ldr	r3, [pc, #56]	; (10230 <z_arm_configure_static_mpu_regions+0x3c>)
{
   101f8:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   101fa:	9302      	str	r3, [sp, #8]
   101fc:	4b0d      	ldr	r3, [pc, #52]	; (10234 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   101fe:	4c0e      	ldr	r4, [pc, #56]	; (10238 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   10200:	9303      	str	r3, [sp, #12]
   10202:	4b0e      	ldr	r3, [pc, #56]	; (1023c <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   10204:	4a0e      	ldr	r2, [pc, #56]	; (10240 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   10206:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   10208:	ab02      	add	r3, sp, #8
   1020a:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1020c:	a801      	add	r0, sp, #4
   1020e:	4623      	mov	r3, r4
   10210:	2101      	movs	r1, #1
   10212:	f000 f951 	bl	104b8 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   10216:	2300      	movs	r3, #0
   10218:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   1021a:	4b0a      	ldr	r3, [pc, #40]	; (10244 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1021c:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   1021e:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   10220:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   10222:	9305      	str	r3, [sp, #20]
   10224:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   10226:	f000 f951 	bl	104cc <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1022a:	b008      	add	sp, #32
   1022c:	bd10      	pop	{r4, pc}
   1022e:	bf00      	nop
   10230:	20020000 	.word	0x20020000
   10234:	00000000 	.word	0x00000000
   10238:	20040000 	.word	0x20040000
   1023c:	00010006 	.word	0x00010006
   10240:	20020000 	.word	0x20020000
   10244:	20020000 	.word	0x20020000

00010248 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   10248:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1024a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   1024c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1024e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   10252:	f004 031f 	and.w	r3, r4, #31
   10256:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   10258:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1025a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1025c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   10260:	4904      	ldr	r1, [pc, #16]	; (10274 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   10262:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   10266:	f043 0301 	orr.w	r3, r3, #1
   1026a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   1026c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   1026e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   10270:	bd10      	pop	{r4, pc}
   10272:	bf00      	nop
   10274:	e000ed90 	.word	0xe000ed90

00010278 <region_allocate_and_init.part.0>:
#include <arm_mpu_v8_internal.h>
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const u8_t index,
   10278:	b508      	push	{r3, lr}
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1027a:	f04f 0200 	mov.w	r2, #0
   1027e:	2301      	movs	r3, #1
   10280:	4907      	ldr	r1, [pc, #28]	; (102a0 <region_allocate_and_init.part.0+0x28>)
   10282:	f363 0207 	bfi	r2, r3, #0, #8
   10286:	4b07      	ldr	r3, [pc, #28]	; (102a4 <region_allocate_and_init.part.0+0x2c>)
   10288:	1a5b      	subs	r3, r3, r1
   1028a:	08db      	lsrs	r3, r3, #3
   1028c:	4601      	mov	r1, r0
   1028e:	f363 128f 	bfi	r2, r3, #6, #10
   10292:	4805      	ldr	r0, [pc, #20]	; (102a8 <region_allocate_and_init.part.0+0x30>)
   10294:	f00c fc86 	bl	1cba4 <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   10298:	f06f 0015 	mvn.w	r0, #21
   1029c:	bd08      	pop	{r3, pc}
   1029e:	bf00      	nop
   102a0:	0001f390 	.word	0x0001f390
   102a4:	0001f3e0 	.word	0x0001f3e0
   102a8:	00020adb 	.word	0x00020adb

000102ac <mpu_configure_regions_and_partition.constprop.2>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   102ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   102b0:	4607      	mov	r7, r0
   102b2:	4688      	mov	r8, r1
   102b4:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   102b6:	2600      	movs	r6, #0
	MPU->RNR = index;
   102b8:	4d5e      	ldr	r5, [pc, #376]	; (10434 <mpu_configure_regions_and_partition.constprop.2+0x188>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   102ba:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   102bc:	4546      	cmp	r6, r8
   102be:	da3d      	bge.n	1033c <mpu_configure_regions_and_partition.constprop.2+0x90>
		if (regions[i]->size == 0U) {
   102c0:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   102c4:	f8d3 9004 	ldr.w	r9, [r3, #4]
   102c8:	f1b9 0f00 	cmp.w	r9, #0
   102cc:	d059      	beq.n	10382 <mpu_configure_regions_and_partition.constprop.2+0xd6>
		&&
   102ce:	f1b9 0f1f 	cmp.w	r9, #31
   102d2:	d922      	bls.n	1031a <mpu_configure_regions_and_partition.constprop.2+0x6e>
		&&
   102d4:	f019 0f1f 	tst.w	r9, #31
   102d8:	d11f      	bne.n	1031a <mpu_configure_regions_and_partition.constprop.2+0x6e>
		((part->start &
   102da:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   102de:	f01a 0f1f 	tst.w	sl, #31
   102e2:	d11a      	bne.n	1031a <mpu_configure_regions_and_partition.constprop.2+0x6e>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   102e4:	4650      	mov	r0, sl
   102e6:	f00d f818 	bl	1d31a <arm_cmse_mpu_region_get>
   102ea:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   102ec:	eb09 000a 	add.w	r0, r9, sl
   102f0:	3801      	subs	r0, #1
   102f2:	f00d f812 	bl	1d31a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   102f6:	4583      	cmp	fp, r0
   102f8:	d024      	beq.n	10344 <mpu_configure_regions_and_partition.constprop.2+0x98>
	return -EINVAL;
   102fa:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   102fe:	2301      	movs	r3, #1
   10300:	f04f 0200 	mov.w	r2, #0
   10304:	494c      	ldr	r1, [pc, #304]	; (10438 <mpu_configure_regions_and_partition.constprop.2+0x18c>)
   10306:	f363 0207 	bfi	r2, r3, #0, #8
   1030a:	4b4c      	ldr	r3, [pc, #304]	; (1043c <mpu_configure_regions_and_partition.constprop.2+0x190>)
   1030c:	484c      	ldr	r0, [pc, #304]	; (10440 <mpu_configure_regions_and_partition.constprop.2+0x194>)
   1030e:	1a5b      	subs	r3, r3, r1
   10310:	08db      	lsrs	r3, r3, #3
   10312:	f363 128f 	bfi	r2, r3, #6, #10
   10316:	4659      	mov	r1, fp
   10318:	e00c      	b.n	10334 <mpu_configure_regions_and_partition.constprop.2+0x88>
			LOG_ERR("Partition %u: sanity check failed.", i);
   1031a:	2301      	movs	r3, #1
   1031c:	f04f 0200 	mov.w	r2, #0
   10320:	4945      	ldr	r1, [pc, #276]	; (10438 <mpu_configure_regions_and_partition.constprop.2+0x18c>)
   10322:	f363 0207 	bfi	r2, r3, #0, #8
   10326:	4b45      	ldr	r3, [pc, #276]	; (1043c <mpu_configure_regions_and_partition.constprop.2+0x190>)
   10328:	4846      	ldr	r0, [pc, #280]	; (10444 <mpu_configure_regions_and_partition.constprop.2+0x198>)
   1032a:	1a5b      	subs	r3, r3, r1
   1032c:	4631      	mov	r1, r6
   1032e:	08db      	lsrs	r3, r3, #3
   10330:	f363 128f 	bfi	r2, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
   10334:	f00c fc36 	bl	1cba4 <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   10338:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   1033c:	4620      	mov	r0, r4
   1033e:	b005      	add	sp, #20
   10340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   10344:	f11b 0f16 	cmn.w	fp, #22
   10348:	d0d9      	beq.n	102fe <mpu_configure_regions_and_partition.constprop.2+0x52>
			(u_reg_index > (reg_index - 1))) {
   1034a:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   1034c:	455b      	cmp	r3, fp
   1034e:	dbd6      	blt.n	102fe <mpu_configure_regions_and_partition.constprop.2+0x52>
	MPU->RNR = index;
   10350:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   10354:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   10356:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1035a:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   1035c:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   10360:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   10364:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   10368:	e9d1 3200 	ldrd	r3, r2, [r1]
   1036c:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   1036e:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   10370:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
   10374:	d118      	bne.n	103a8 <mpu_configure_regions_and_partition.constprop.2+0xfc>
   10376:	45ca      	cmp	sl, r9
   10378:	d105      	bne.n	10386 <mpu_configure_regions_and_partition.constprop.2+0xda>
			mpu_configure_region(u_reg_index, regions[i]);
   1037a:	fa5f f08b 	uxtb.w	r0, fp
   1037e:	f00c ffa9 	bl	1d2d4 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   10382:	3601      	adds	r6, #1
   10384:	e79a      	b.n	102bc <mpu_configure_regions_and_partition.constprop.2+0x10>
	MPU->RNR = index;
   10386:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1038a:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   1038c:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   10390:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   10394:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   10396:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   10398:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   1039a:	f00c ff9b 	bl	1d2d4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1039e:	f110 0f16 	cmn.w	r0, #22
   103a2:	d0c9      	beq.n	10338 <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
   103a4:	1c44      	adds	r4, r0, #1
   103a6:	e7ec      	b.n	10382 <mpu_configure_regions_and_partition.constprop.2+0xd6>
	MPU->RNR = index;
   103a8:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   103ac:	692a      	ldr	r2, [r5, #16]
   103ae:	3b01      	subs	r3, #1
   103b0:	f023 031f 	bic.w	r3, r3, #31
   103b4:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   103b8:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   103ba:	45ca      	cmp	sl, r9
   103bc:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   103be:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   103c0:	d0eb      	beq.n	1039a <mpu_configure_regions_and_partition.constprop.2+0xee>
				mpu_configure_region(reg_index, regions[i]);
   103c2:	f00c ff87 	bl	1d2d4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   103c6:	f110 0f16 	cmn.w	r0, #22
   103ca:	d0b5      	beq.n	10338 <mpu_configure_regions_and_partition.constprop.2+0x8c>
	MPU->RNR = index;
   103cc:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   103d0:	68ea      	ldr	r2, [r5, #12]
   103d2:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   103d6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
   103da:	f362 0304 	bfi	r3, r2, #0, #5
   103de:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   103e2:	692b      	ldr	r3, [r5, #16]
   103e4:	f89d 2008 	ldrb.w	r2, [sp, #8]
   103e8:	085b      	lsrs	r3, r3, #1
   103ea:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   103ee:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   103f2:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   103f6:	e9d3 1300 	ldrd	r1, r3, [r3]
   103fa:	440b      	add	r3, r1
   103fc:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   103fe:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   10402:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   10404:	4453      	add	r3, sl
   10406:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
   1040a:	b2e4      	uxtb	r4, r4
			REGION_LIMIT_ADDR((regions[i]->start +
   1040c:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   10410:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
   10412:	9303      	str	r3, [sp, #12]
   10414:	d908      	bls.n	10428 <mpu_configure_regions_and_partition.constprop.2+0x17c>
   10416:	4620      	mov	r0, r4
   10418:	f7ff ff2e 	bl	10278 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
   1041c:	f110 0f16 	cmn.w	r0, #22
   10420:	4604      	mov	r4, r0
   10422:	d089      	beq.n	10338 <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
   10424:	3401      	adds	r4, #1
   10426:	e7ac      	b.n	10382 <mpu_configure_regions_and_partition.constprop.2+0xd6>
	region_init(index, region_conf);
   10428:	4669      	mov	r1, sp
   1042a:	4620      	mov	r0, r4
   1042c:	f7ff ff0c 	bl	10248 <region_init>
			if (reg_index == -EINVAL) {
   10430:	e7f8      	b.n	10424 <mpu_configure_regions_and_partition.constprop.2+0x178>
   10432:	bf00      	nop
   10434:	e000ed90 	.word	0xe000ed90
   10438:	0001f390 	.word	0x0001f390
   1043c:	0001f3e0 	.word	0x0001f3e0
   10440:	00020ab8 	.word	0x00020ab8
   10444:	00020a95 	.word	0x00020a95

00010448 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   10448:	2205      	movs	r2, #5
   1044a:	4b03      	ldr	r3, [pc, #12]	; (10458 <arm_core_mpu_enable+0x10>)
   1044c:	605a      	str	r2, [r3, #4]
   1044e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10452:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   10456:	4770      	bx	lr
   10458:	e000ed90 	.word	0xe000ed90

0001045c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   1045c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   10460:	2200      	movs	r2, #0
   10462:	4b01      	ldr	r3, [pc, #4]	; (10468 <arm_core_mpu_disable+0xc>)
   10464:	605a      	str	r2, [r3, #4]
}
   10466:	4770      	bx	lr
   10468:	e000ed90 	.word	0xe000ed90

0001046c <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   1046c:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1046e:	4d0e      	ldr	r5, [pc, #56]	; (104a8 <arm_mpu_init+0x3c>)
   10470:	682e      	ldr	r6, [r5, #0]
   10472:	2e10      	cmp	r6, #16
   10474:	d815      	bhi.n	104a2 <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   10476:	2400      	movs	r4, #0
	arm_core_mpu_disable();
   10478:	f7ff fff0 	bl	1045c <arm_core_mpu_disable>
	MPU->MAIR0 =
   1047c:	4b0b      	ldr	r3, [pc, #44]	; (104ac <arm_mpu_init+0x40>)
   1047e:	4a0c      	ldr	r2, [pc, #48]	; (104b0 <arm_mpu_init+0x44>)
   10480:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   10482:	42a6      	cmp	r6, r4
   10484:	d105      	bne.n	10492 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   10486:	4b0b      	ldr	r3, [pc, #44]	; (104b4 <arm_mpu_init+0x48>)
   10488:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
   1048a:	f7ff ffdd 	bl	10448 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   1048e:	2000      	movs	r0, #0
}
   10490:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   10492:	6869      	ldr	r1, [r5, #4]
   10494:	4620      	mov	r0, r4
   10496:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   1049a:	f7ff fed5 	bl	10248 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1049e:	3401      	adds	r4, #1
   104a0:	e7ef      	b.n	10482 <arm_mpu_init+0x16>
		return -1;
   104a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   104a6:	e7f3      	b.n	10490 <arm_mpu_init+0x24>
   104a8:	0001f49c 	.word	0x0001f49c
   104ac:	e000ed90 	.word	0xe000ed90
   104b0:	0044ffaa 	.word	0x0044ffaa
   104b4:	20026548 	.word	0x20026548

000104b8 <arm_core_mpu_configure_static_mpu_regions>:
{
   104b8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   104ba:	4c03      	ldr	r4, [pc, #12]	; (104c8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   104bc:	7822      	ldrb	r2, [r4, #0]
   104be:	f7ff fef5 	bl	102ac <mpu_configure_regions_and_partition.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   104c2:	7020      	strb	r0, [r4, #0]
}
   104c4:	bd10      	pop	{r4, pc}
   104c6:	bf00      	nop
   104c8:	20026548 	.word	0x20026548

000104cc <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   104cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104d0:	4c25      	ldr	r4, [pc, #148]	; (10568 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>)
   104d2:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   104d4:	4680      	mov	r8, r0
   104d6:	2700      	movs	r7, #0
   104d8:	46a1      	mov	r9, r4
	attr->rbar = MPU->RBAR &
   104da:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
   104de:	4d23      	ldr	r5, [pc, #140]	; (1056c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   104e0:	4557      	cmp	r7, sl
   104e2:	da1a      	bge.n	1051a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   104e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   104e8:	9301      	str	r3, [sp, #4]
   104ea:	2b00      	cmp	r3, #0
   104ec:	d036      	beq.n	1055c <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   104ee:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   104f2:	4608      	mov	r0, r1
   104f4:	9100      	str	r1, [sp, #0]
   104f6:	f00c ff10 	bl	1d31a <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   104fa:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   104fe:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10500:	1858      	adds	r0, r3, r1
   10502:	3801      	subs	r0, #1
   10504:	f00c ff09 	bl	1d31a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   10508:	4286      	cmp	r6, r0
   1050a:	4a19      	ldr	r2, [pc, #100]	; (10570 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
   1050c:	d008      	beq.n	10520 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   1050e:	2314      	movs	r3, #20
   10510:	435f      	muls	r7, r3
   10512:	f06f 0315 	mvn.w	r3, #21
   10516:	f849 3007 	str.w	r3, [r9, r7]
}
   1051a:	b003      	add	sp, #12
   1051c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   10520:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
   10524:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   10526:	d0f8      	beq.n	1051a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   10528:	7813      	ldrb	r3, [r2, #0]
   1052a:	42b3      	cmp	r3, r6
   1052c:	ddf5      	ble.n	1051a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   1052e:	fb0b 9307 	mla	r3, fp, r7, r9
	MPU->RNR = index;
   10532:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
   10534:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
   10536:	68e8      	ldr	r0, [r5, #12]
   10538:	7b19      	ldrb	r1, [r3, #12]
   1053a:	f360 0104 	bfi	r1, r0, #0, #5
   1053e:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   10540:	6929      	ldr	r1, [r5, #16]
   10542:	7b18      	ldrb	r0, [r3, #12]
   10544:	0849      	lsrs	r1, r1, #1
   10546:	f361 1047 	bfi	r0, r1, #5, #3
   1054a:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   1054c:	68eb      	ldr	r3, [r5, #12]
   1054e:	f023 031f 	bic.w	r3, r3, #31
   10552:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   10554:	692b      	ldr	r3, [r5, #16]
   10556:	f023 031f 	bic.w	r3, r3, #31
   1055a:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1055c:	3701      	adds	r7, #1
   1055e:	3414      	adds	r4, #20
   10560:	f108 080c 	add.w	r8, r8, #12
   10564:	e7bc      	b.n	104e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   10566:	bf00      	nop
   10568:	20020368 	.word	0x20020368
   1056c:	e000ed90 	.word	0xe000ed90
   10570:	20026548 	.word	0x20026548

00010574 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   10574:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
   10576:	4b0c      	ldr	r3, [pc, #48]	; (105a8 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
   10578:	460e      	mov	r6, r1
   1057a:	781c      	ldrb	r4, [r3, #0]
   1057c:	4605      	mov	r5, r0
   1057e:	4623      	mov	r3, r4
  mpu->RLAR = 0U;
   10580:	2100      	movs	r1, #0
  mpu->RNR = rnr;
   10582:	4a0a      	ldr	r2, [pc, #40]	; (105ac <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   10584:	2b0f      	cmp	r3, #15
   10586:	dd0b      	ble.n	105a0 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>
#if defined(CONFIG_MPU_GAP_FILLING)
	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
   10588:	4909      	ldr	r1, [pc, #36]	; (105b0 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
   1058a:	f851 0b04 	ldr.w	r0, [r1], #4
   1058e:	f7ff fe5b 	bl	10248 <region_init>

	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */
	mpu_reg_index = mpu_configure_regions_and_partition(dynamic_regions,
   10592:	4622      	mov	r2, r4
   10594:	4631      	mov	r1, r6
   10596:	4628      	mov	r0, r5
}
   10598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1059c:	f7ff be86 	b.w	102ac <mpu_configure_regions_and_partition.constprop.2>
   105a0:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   105a2:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   105a4:	3301      	adds	r3, #1
   105a6:	e7ed      	b.n	10584 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
   105a8:	20026548 	.word	0x20026548
   105ac:	e000ed90 	.word	0xe000ed90
   105b0:	20020368 	.word	0x20020368

000105b4 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
   105b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   105b8:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
   105ba:	2300      	movs	r3, #0
{
   105bc:	b0a3      	sub	sp, #140	; 0x8c
   105be:	e9cd 0102 	strd	r0, r1, [sp, #8]
	count = 0;
   105c2:	9301      	str	r3, [sp, #4]

	while ((c = *format++)) {
   105c4:	4613      	mov	r3, r2
   105c6:	f813 0b01 	ldrb.w	r0, [r3], #1
   105ca:	9308      	str	r3, [sp, #32]
   105cc:	b158      	cbz	r0, 105e6 <z_prf+0x32>
		if (c != '%') {
   105ce:	2825      	cmp	r0, #37	; 0x25
   105d0:	f000 8085 	beq.w	106de <z_prf+0x12a>
			PUTC(c);
   105d4:	9903      	ldr	r1, [sp, #12]
   105d6:	9b02      	ldr	r3, [sp, #8]
   105d8:	4798      	blx	r3
   105da:	3001      	adds	r0, #1
   105dc:	f040 841a 	bne.w	10e14 <z_prf+0x860>
   105e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   105e4:	9301      	str	r3, [sp, #4]
		}
	}
	return count;

#undef PUTC
}
   105e6:	9801      	ldr	r0, [sp, #4]
   105e8:	b023      	add	sp, #140	; 0x8c
   105ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
   105ee:	2c23      	cmp	r4, #35	; 0x23
   105f0:	d06c      	beq.n	106cc <z_prf+0x118>
   105f2:	d861      	bhi.n	106b8 <z_prf+0x104>
   105f4:	2c00      	cmp	r4, #0
   105f6:	d0f6      	beq.n	105e6 <z_prf+0x32>
					fspace = true;
   105f8:	2c20      	cmp	r4, #32
   105fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   105fc:	bf08      	it	eq
   105fe:	2301      	moveq	r3, #1
   10600:	930e      	str	r3, [sp, #56]	; 0x38
					fminus = true;
   10602:	f8cd 8020 	str.w	r8, [sp, #32]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
   10606:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1060a:	48b7      	ldr	r0, [pc, #732]	; (108e8 <z_prf+0x334>)
   1060c:	f818 4b01 	ldrb.w	r4, [r8], #1
   10610:	4621      	mov	r1, r4
   10612:	f00c ffda 	bl	1d5ca <strchr>
   10616:	2800      	cmp	r0, #0
   10618:	d1e9      	bne.n	105ee <z_prf+0x3a>
			if (c == '*') {
   1061a:	2c2a      	cmp	r4, #42	; 0x2a
   1061c:	d166      	bne.n	106ec <z_prf+0x138>
				width = va_arg(vargs, int);
   1061e:	f856 3b04 	ldr.w	r3, [r6], #4
				c = *format++;
   10622:	f898 4000 	ldrb.w	r4, [r8]
				if (width < 0) {
   10626:	2b00      	cmp	r3, #0
				width = va_arg(vargs, int);
   10628:	9309      	str	r3, [sp, #36]	; 0x24
					width = -width;
   1062a:	bfbf      	itttt	lt
   1062c:	425b      	neglt	r3, r3
   1062e:	9309      	strlt	r3, [sp, #36]	; 0x24
					fminus = true;
   10630:	2301      	movlt	r3, #1
   10632:	930f      	strlt	r3, [sp, #60]	; 0x3c
				c = *format++;
   10634:	9b08      	ldr	r3, [sp, #32]
   10636:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
   1063a:	2c2e      	cmp	r4, #46	; 0x2e
   1063c:	d17b      	bne.n	10736 <z_prf+0x182>
				if (c == '*') {
   1063e:	f898 3000 	ldrb.w	r3, [r8]
   10642:	2b2a      	cmp	r3, #42	; 0x2a
   10644:	d174      	bne.n	10730 <z_prf+0x17c>
					precision = va_arg(vargs, int);
   10646:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
   1064a:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
   1064e:	f818 4b01 	ldrb.w	r4, [r8], #1
			if (strchr("hlz", c) != NULL) {
   10652:	4621      	mov	r1, r4
   10654:	48a5      	ldr	r0, [pc, #660]	; (108ec <z_prf+0x338>)
   10656:	4627      	mov	r7, r4
   10658:	f00c ffb7 	bl	1d5ca <strchr>
   1065c:	2800      	cmp	r0, #0
   1065e:	d06d      	beq.n	1073c <z_prf+0x188>
				c = *format++;
   10660:	4643      	mov	r3, r8
   10662:	f813 4b01 	ldrb.w	r4, [r3], #1
				} else if (i == 'h' && c == 'h') {
   10666:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
   10668:	9308      	str	r3, [sp, #32]
				} else if (i == 'h' && c == 'h') {
   1066a:	d107      	bne.n	1067c <z_prf+0xc8>
   1066c:	2c68      	cmp	r4, #104	; 0x68
   1066e:	d105      	bne.n	1067c <z_prf+0xc8>
					i = 'H';
   10670:	2748      	movs	r7, #72	; 0x48
					c = *format++;
   10672:	f108 0302 	add.w	r3, r8, #2
   10676:	f898 4001 	ldrb.w	r4, [r8, #1]
   1067a:	9308      	str	r3, [sp, #32]
			switch (c) {
   1067c:	2c67      	cmp	r4, #103	; 0x67
   1067e:	d87b      	bhi.n	10778 <z_prf+0x1c4>
   10680:	2c65      	cmp	r4, #101	; 0x65
   10682:	f080 8135 	bcs.w	108f0 <z_prf+0x33c>
   10686:	2c47      	cmp	r4, #71	; 0x47
   10688:	d85c      	bhi.n	10744 <z_prf+0x190>
   1068a:	2c45      	cmp	r4, #69	; 0x45
   1068c:	f080 8130 	bcs.w	108f0 <z_prf+0x33c>
   10690:	2c00      	cmp	r4, #0
   10692:	d0a8      	beq.n	105e6 <z_prf+0x32>
   10694:	2c25      	cmp	r4, #37	; 0x25
   10696:	f000 83b9 	beq.w	10e0c <z_prf+0x858>
				PUTC('%');
   1069a:	9903      	ldr	r1, [sp, #12]
   1069c:	2025      	movs	r0, #37	; 0x25
   1069e:	9b02      	ldr	r3, [sp, #8]
   106a0:	4798      	blx	r3
   106a2:	3001      	adds	r0, #1
   106a4:	d09c      	beq.n	105e0 <z_prf+0x2c>
				PUTC(c);
   106a6:	9903      	ldr	r1, [sp, #12]
   106a8:	4620      	mov	r0, r4
   106aa:	9b02      	ldr	r3, [sp, #8]
   106ac:	4798      	blx	r3
   106ae:	3001      	adds	r0, #1
   106b0:	d096      	beq.n	105e0 <z_prf+0x2c>
				count += 2;
   106b2:	9b01      	ldr	r3, [sp, #4]
   106b4:	3302      	adds	r3, #2
   106b6:	e3af      	b.n	10e18 <z_prf+0x864>
				switch (c) {
   106b8:	2c2d      	cmp	r4, #45	; 0x2d
   106ba:	d00a      	beq.n	106d2 <z_prf+0x11e>
   106bc:	2c30      	cmp	r4, #48	; 0x30
   106be:	d00b      	beq.n	106d8 <z_prf+0x124>
					fplus = true;
   106c0:	2c2b      	cmp	r4, #43	; 0x2b
   106c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   106c4:	bf08      	it	eq
   106c6:	2301      	moveq	r3, #1
   106c8:	930b      	str	r3, [sp, #44]	; 0x2c
   106ca:	e79a      	b.n	10602 <z_prf+0x4e>
					falt = true;
   106cc:	f04f 0b01 	mov.w	fp, #1
   106d0:	e797      	b.n	10602 <z_prf+0x4e>
					fminus = true;
   106d2:	2301      	movs	r3, #1
   106d4:	930f      	str	r3, [sp, #60]	; 0x3c
   106d6:	e794      	b.n	10602 <z_prf+0x4e>
					fzero = true;
   106d8:	2301      	movs	r3, #1
   106da:	930a      	str	r3, [sp, #40]	; 0x28
   106dc:	e791      	b.n	10602 <z_prf+0x4e>
			fminus = fplus = fspace = falt = fzero = false;
   106de:	2300      	movs	r3, #0
   106e0:	930a      	str	r3, [sp, #40]	; 0x28
   106e2:	930e      	str	r3, [sp, #56]	; 0x38
   106e4:	930b      	str	r3, [sp, #44]	; 0x2c
   106e6:	930f      	str	r3, [sp, #60]	; 0x3c
   106e8:	469b      	mov	fp, r3
   106ea:	e78c      	b.n	10606 <z_prf+0x52>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   106ec:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
   106f0:	2b09      	cmp	r3, #9
				width = 0;
   106f2:	9009      	str	r0, [sp, #36]	; 0x24
			} else if (!isdigit(c)) {
   106f4:	d8a1      	bhi.n	1063a <z_prf+0x86>
		i = 10 * i + *p++ - '0';
   106f6:	220a      	movs	r2, #10
	while (isdigit(*p)) {
   106f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
   106fc:	f818 4b01 	ldrb.w	r4, [r8], #1
   10700:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   10704:	2b09      	cmp	r3, #9
   10706:	d898      	bhi.n	1063a <z_prf+0x86>
		i = 10 * i + *p++ - '0';
   10708:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1070a:	fb02 4403 	mla	r4, r2, r3, r4
   1070e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   10712:	e9cd 8308 	strd	r8, r3, [sp, #32]
   10716:	e7ef      	b.n	106f8 <z_prf+0x144>
   10718:	4690      	mov	r8, r2
   1071a:	fb01 3505 	mla	r5, r1, r5, r3
   1071e:	3d30      	subs	r5, #48	; 0x30
	while (isdigit(*p)) {
   10720:	4642      	mov	r2, r8
   10722:	f812 3b01 	ldrb.w	r3, [r2], #1
   10726:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1072a:	2809      	cmp	r0, #9
   1072c:	d9f4      	bls.n	10718 <z_prf+0x164>
   1072e:	e78e      	b.n	1064e <z_prf+0x9a>
	int i = 0;
   10730:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
   10732:	210a      	movs	r1, #10
   10734:	e7f4      	b.n	10720 <z_prf+0x16c>
			precision = -1;
   10736:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1073a:	e78a      	b.n	10652 <z_prf+0x9e>
   1073c:	f8cd 8020 	str.w	r8, [sp, #32]
			i = 0;
   10740:	4607      	mov	r7, r0
   10742:	e79b      	b.n	1067c <z_prf+0xc8>
			switch (c) {
   10744:	2c63      	cmp	r4, #99	; 0x63
   10746:	d059      	beq.n	107fc <z_prf+0x248>
   10748:	d820      	bhi.n	1078c <z_prf+0x1d8>
   1074a:	2c58      	cmp	r4, #88	; 0x58
   1074c:	d1a5      	bne.n	1069a <z_prf+0xe6>
				if (c == 'o') {
   1074e:	2c6f      	cmp	r4, #111	; 0x6f
   10750:	f106 0904 	add.w	r9, r6, #4
   10754:	6831      	ldr	r1, [r6, #0]
   10756:	f040 8328 	bne.w	10daa <z_prf+0x7f6>
	if (alt_form) {
   1075a:	f1bb 0f00 	cmp.w	fp, #0
   1075e:	f000 8317 	beq.w	10d90 <z_prf+0x7dc>
		*buf++ = '0';
   10762:	2330      	movs	r3, #48	; 0x30
   10764:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		if (!value) {
   10768:	2900      	cmp	r1, #0
   1076a:	f040 831b 	bne.w	10da4 <z_prf+0x7f0>
			*buf++ = 0;
   1076e:	f88d 106d 	strb.w	r1, [sp, #109]	; 0x6d
			prefix = 0;
   10772:	460f      	mov	r7, r1
			return 1;
   10774:	2601      	movs	r6, #1
   10776:	e025      	b.n	107c4 <z_prf+0x210>
			switch (c) {
   10778:	2c70      	cmp	r4, #112	; 0x70
   1077a:	f000 82f5 	beq.w	10d68 <z_prf+0x7b4>
   1077e:	d827      	bhi.n	107d0 <z_prf+0x21c>
   10780:	2c6e      	cmp	r4, #110	; 0x6e
   10782:	f000 82de 	beq.w	10d42 <z_prf+0x78e>
   10786:	d8e2      	bhi.n	1074e <z_prf+0x19a>
   10788:	2c69      	cmp	r4, #105	; 0x69
   1078a:	d186      	bne.n	1069a <z_prf+0xe6>
				switch (i) {
   1078c:	6837      	ldr	r7, [r6, #0]
   1078e:	f106 0904 	add.w	r9, r6, #4
	if (value < 0) {
   10792:	2f00      	cmp	r7, #0
   10794:	f280 809a 	bge.w	108cc <z_prf+0x318>
		*buf++ = '-';
   10798:	232d      	movs	r3, #45	; 0x2d
		value = -value;
   1079a:	4279      	negs	r1, r7
		*buf++ = '-';
   1079c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		*buf++ = ' ';
   107a0:	f10d 066d 	add.w	r6, sp, #109	; 0x6d
	return _to_x(buf, value, 10);
   107a4:	4630      	mov	r0, r6
   107a6:	220a      	movs	r2, #10
   107a8:	f00c ffb1 	bl	1d70e <_to_x>
				if (fplus || fspace || val < 0) {
   107ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	return (buf + _to_udec(buf, value)) - start;
   107ae:	4406      	add	r6, r0
   107b0:	a81b      	add	r0, sp, #108	; 0x6c
   107b2:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
   107b4:	2b00      	cmp	r3, #0
   107b6:	f040 8332 	bne.w	10e1e <z_prf+0x86a>
   107ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   107bc:	2b00      	cmp	r3, #0
   107be:	f040 832e 	bne.w	10e1e <z_prf+0x86a>
   107c2:	0fff      	lsrs	r7, r7, #31
			if (precision >= 0) {
   107c4:	2d00      	cmp	r5, #0
   107c6:	da21      	bge.n	1080c <z_prf+0x258>
			zero.predot = zero.postdot = zero.trail = 0;
   107c8:	2500      	movs	r5, #0
   107ca:	46ab      	mov	fp, r5
   107cc:	46a8      	mov	r8, r5
   107ce:	e0e1      	b.n	10994 <z_prf+0x3e0>
			switch (c) {
   107d0:	2c75      	cmp	r4, #117	; 0x75
   107d2:	d0bc      	beq.n	1074e <z_prf+0x19a>
   107d4:	2c78      	cmp	r4, #120	; 0x78
   107d6:	d0ba      	beq.n	1074e <z_prf+0x19a>
   107d8:	2c73      	cmp	r4, #115	; 0x73
   107da:	f47f af5e 	bne.w	1069a <z_prf+0xe6>
				cptr = va_arg(vargs, char *);
   107de:	46b1      	mov	r9, r6
					precision = INT_MAX;
   107e0:	2d00      	cmp	r5, #0
   107e2:	bfb8      	it	lt
   107e4:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
   107e8:	2600      	movs	r6, #0
				cptr = va_arg(vargs, char *);
   107ea:	f859 3b04 	ldr.w	r3, [r9], #4
				for (clen = 0; clen < precision; clen++) {
   107ee:	42b5      	cmp	r5, r6
   107f0:	f040 82c9 	bne.w	10d86 <z_prf+0x7d2>
   107f4:	462e      	mov	r6, r5
   107f6:	2500      	movs	r5, #0
   107f8:	462f      	mov	r7, r5
   107fa:	e008      	b.n	1080e <z_prf+0x25a>
				break;
   107fc:	2700      	movs	r7, #0
				buf[0] = va_arg(vargs, int);
   107fe:	46b1      	mov	r9, r6
				break;
   10800:	463d      	mov	r5, r7
				clen = 1;
   10802:	2601      	movs	r6, #1
				buf[0] = va_arg(vargs, int);
   10804:	f859 3b04 	ldr.w	r3, [r9], #4
   10808:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
				break;
   1080c:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = precision - clen + prefix;
   1080e:	19ea      	adds	r2, r5, r7
			zero.predot = zero.postdot = zero.trail = 0;
   10810:	2500      	movs	r5, #0
   10812:	46ab      	mov	fp, r5
   10814:	46a8      	mov	r8, r5
				zero_head = precision - clen + prefix;
   10816:	1b92      	subs	r2, r2, r6
			if (zero_head < 0) {
   10818:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			width -= clen + zero_head;
   1081c:	1991      	adds	r1, r2, r6
   1081e:	9106      	str	r1, [sp, #24]
   10820:	9909      	ldr	r1, [sp, #36]	; 0x24
   10822:	1990      	adds	r0, r2, r6
   10824:	1a0c      	subs	r4, r1, r0
			if (!fminus && width > 0) {
   10826:	990f      	ldr	r1, [sp, #60]	; 0x3c
   10828:	b911      	cbnz	r1, 10830 <z_prf+0x27c>
   1082a:	2c00      	cmp	r4, #0
   1082c:	f300 8314 	bgt.w	10e58 <z_prf+0x8a4>
			while (prefix-- > 0) {
   10830:	eb03 0a07 	add.w	sl, r3, r7
   10834:	4553      	cmp	r3, sl
   10836:	f040 8313 	bne.w	10e60 <z_prf+0x8ac>
			while (zero_head-- > 0) {
   1083a:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
   1083e:	f080 831d 	bcs.w	10e7c <z_prf+0x8c8>
			clen -= prefix;
   10842:	1bf6      	subs	r6, r6, r7
			if (zero.predot) {
   10844:	f1b8 0f00 	cmp.w	r8, #0
   10848:	d011      	beq.n	1086e <z_prf+0x2ba>
				c = *cptr;
   1084a:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c)) {
   1084e:	eb0a 0706 	add.w	r7, sl, r6
   10852:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   10856:	2b09      	cmp	r3, #9
   10858:	eba7 060a 	sub.w	r6, r7, sl
   1085c:	f240 8319 	bls.w	10e92 <z_prf+0x8de>
   10860:	4647      	mov	r7, r8
				while (zero.predot-- > 0) {
   10862:	f117 37ff 	adds.w	r7, r7, #4294967295	; 0xffffffff
   10866:	f080 831d 	bcs.w	10ea4 <z_prf+0x8f0>
				clen -= zero.predot;
   1086a:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.postdot) {
   1086e:	f1bb 0f00 	cmp.w	fp, #0
   10872:	d015      	beq.n	108a0 <z_prf+0x2ec>
   10874:	eb0a 0706 	add.w	r7, sl, r6
					c = *cptr++;
   10878:	f81a 8b01 	ldrb.w	r8, [sl], #1
					PUTC(c);
   1087c:	9903      	ldr	r1, [sp, #12]
   1087e:	4640      	mov	r0, r8
   10880:	9b02      	ldr	r3, [sp, #8]
   10882:	4798      	blx	r3
   10884:	3001      	adds	r0, #1
   10886:	f43f aeab 	beq.w	105e0 <z_prf+0x2c>
				} while (c != '.');
   1088a:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
   1088e:	eba7 060a 	sub.w	r6, r7, sl
   10892:	d1f1      	bne.n	10878 <z_prf+0x2c4>
				while (zero.postdot-- > 0) {
   10894:	465f      	mov	r7, fp
   10896:	2f00      	cmp	r7, #0
   10898:	f300 830d 	bgt.w	10eb6 <z_prf+0x902>
				clen -= zero.postdot;
   1089c:	eba6 060b 	sub.w	r6, r6, fp
			if (zero.trail) {
   108a0:	b195      	cbz	r5, 108c8 <z_prf+0x314>
				c = *cptr;
   108a2:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c) || c == '.') {
   108a6:	eb0a 0706 	add.w	r7, sl, r6
   108aa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   108ae:	2b09      	cmp	r3, #9
   108b0:	eba7 060a 	sub.w	r6, r7, sl
   108b4:	f240 830a 	bls.w	10ecc <z_prf+0x918>
   108b8:	282e      	cmp	r0, #46	; 0x2e
   108ba:	f000 8307 	beq.w	10ecc <z_prf+0x918>
				while (zero.trail-- > 0) {
   108be:	462f      	mov	r7, r5
   108c0:	2f00      	cmp	r7, #0
   108c2:	f300 830c 	bgt.w	10ede <z_prf+0x92a>
				clen -= zero.trail;
   108c6:	1b76      	subs	r6, r6, r5
   108c8:	4456      	add	r6, sl
   108ca:	e31b      	b.n	10f04 <z_prf+0x950>
	} else if (fplus) {
   108cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   108ce:	b123      	cbz	r3, 108da <z_prf+0x326>
		*buf++ = '+';
   108d0:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
   108d2:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   108d6:	4639      	mov	r1, r7
   108d8:	e762      	b.n	107a0 <z_prf+0x1ec>
	} else if (fspace) {
   108da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   108dc:	b10b      	cbz	r3, 108e2 <z_prf+0x32e>
		*buf++ = ' ';
   108de:	2320      	movs	r3, #32
   108e0:	e7f7      	b.n	108d2 <z_prf+0x31e>
	} else if (fspace) {
   108e2:	4639      	mov	r1, r7
   108e4:	ae1b      	add	r6, sp, #108	; 0x6c
   108e6:	e75d      	b.n	107a4 <z_prf+0x1f0>
   108e8:	00020b01 	.word	0x00020b01
   108ec:	00020b07 	.word	0x00020b07
				u.d = va_arg(vargs, double);
   108f0:	f106 0907 	add.w	r9, r6, #7
   108f4:	f029 0907 	bic.w	r9, r9, #7
   108f8:	e8f9 2302 	ldrd	r2, r3, [r9], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
   108fc:	02d8      	lsls	r0, r3, #11
   108fe:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
   10902:	02d6      	lsls	r6, r2, #11
   10904:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
	if (sign) {
   10908:	2a00      	cmp	r2, #0
	exp = double_temp >> 52 & 0x7ff;
   1090a:	f3c3 510a 	ubfx	r1, r3, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
   1090e:	9604      	str	r6, [sp, #16]
   10910:	9005      	str	r0, [sp, #20]
	if (sign) {
   10912:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
   10916:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   1091a:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
	if (sign) {
   1091e:	da41      	bge.n	109a4 <z_prf+0x3f0>
		*buf++ = '-';
   10920:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
   10922:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   10926:	f10d 076d 	add.w	r7, sp, #109	; 0x6d
	if (exp == 0x7ff) {
   1092a:	f240 73ff 	movw	r3, #2047	; 0x7ff
   1092e:	4299      	cmp	r1, r3
   10930:	d153      	bne.n	109da <z_prf+0x426>
		if (!fract) {
   10932:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   10936:	430a      	orrs	r2, r1
   10938:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
   1093c:	f107 0303 	add.w	r3, r7, #3
   10940:	d140      	bne.n	109c4 <z_prf+0x410>
			if (isupper(c)) {
   10942:	2c19      	cmp	r4, #25
   10944:	d838      	bhi.n	109b8 <z_prf+0x404>
				*buf++ = 'I';
   10946:	2249      	movs	r2, #73	; 0x49
   10948:	703a      	strb	r2, [r7, #0]
				*buf++ = 'N';
   1094a:	224e      	movs	r2, #78	; 0x4e
   1094c:	707a      	strb	r2, [r7, #1]
				*buf++ = 'F';
   1094e:	2246      	movs	r2, #70	; 0x46
		*buf = 0;
   10950:	2500      	movs	r5, #0
			zero.predot = zero.postdot = zero.trail = 0;
   10952:	46ab      	mov	fp, r5
   10954:	46a8      	mov	r8, r5
		return buf - start;
   10956:	ae1b      	add	r6, sp, #108	; 0x6c
				*buf++ = 'n';
   10958:	70ba      	strb	r2, [r7, #2]
		*buf = 0;
   1095a:	70fd      	strb	r5, [r7, #3]
		return buf - start;
   1095c:	1b9b      	subs	r3, r3, r6
				if (fplus || fspace || (buf[0] == '-')) {
   1095e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10960:	2a00      	cmp	r2, #0
   10962:	f040 81ec 	bne.w	10d3e <z_prf+0x78a>
   10966:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10968:	2a00      	cmp	r2, #0
   1096a:	f040 81e8 	bne.w	10d3e <z_prf+0x78a>
   1096e:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
   10972:	f1a7 022d 	sub.w	r2, r7, #45	; 0x2d
   10976:	4257      	negs	r7, r2
   10978:	4157      	adcs	r7, r2
				clen += zero.predot + zero.postdot + zero.trail;
   1097a:	eb05 0608 	add.w	r6, r5, r8
   1097e:	4433      	add	r3, r6
   10980:	eb03 060b 	add.w	r6, r3, fp
				if (!isdigit(buf[prefix])) {
   10984:	ab22      	add	r3, sp, #136	; 0x88
   10986:	443b      	add	r3, r7
   10988:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
   1098c:	3b30      	subs	r3, #48	; 0x30
   1098e:	2b09      	cmp	r3, #9
   10990:	f200 8249 	bhi.w	10e26 <z_prf+0x872>
			} else if (fzero) {
   10994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10996:	2b00      	cmp	r3, #0
   10998:	f000 8248 	beq.w	10e2c <z_prf+0x878>
   1099c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1099e:	1b9a      	subs	r2, r3, r6
   109a0:	ab1b      	add	r3, sp, #108	; 0x6c
   109a2:	e739      	b.n	10818 <z_prf+0x264>
	} else if (fplus) {
   109a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   109a6:	b10b      	cbz	r3, 109ac <z_prf+0x3f8>
		*buf++ = '+';
   109a8:	232b      	movs	r3, #43	; 0x2b
   109aa:	e7ba      	b.n	10922 <z_prf+0x36e>
	} else if (fspace) {
   109ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   109ae:	b10b      	cbz	r3, 109b4 <z_prf+0x400>
		*buf++ = ' ';
   109b0:	2320      	movs	r3, #32
   109b2:	e7b6      	b.n	10922 <z_prf+0x36e>
	} else if (fspace) {
   109b4:	af1b      	add	r7, sp, #108	; 0x6c
   109b6:	e7b8      	b.n	1092a <z_prf+0x376>
				*buf++ = 'i';
   109b8:	2269      	movs	r2, #105	; 0x69
   109ba:	703a      	strb	r2, [r7, #0]
				*buf++ = 'n';
   109bc:	226e      	movs	r2, #110	; 0x6e
   109be:	707a      	strb	r2, [r7, #1]
				*buf++ = 'f';
   109c0:	2266      	movs	r2, #102	; 0x66
   109c2:	e7c5      	b.n	10950 <z_prf+0x39c>
			if (isupper(c)) {
   109c4:	2c19      	cmp	r4, #25
				*buf++ = 'N';
   109c6:	bf99      	ittee	ls
   109c8:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
   109ca:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
   109cc:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
   109ce:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
   109d0:	bf94      	ite	ls
   109d2:	703a      	strbls	r2, [r7, #0]
				*buf++ = 'n';
   109d4:	703a      	strbhi	r2, [r7, #0]
				*buf++ = 'a';
   109d6:	7079      	strb	r1, [r7, #1]
   109d8:	e7ba      	b.n	10950 <z_prf+0x39c>
	if ((exp | fract) != 0) {
   109da:	9b04      	ldr	r3, [sp, #16]
   109dc:	9805      	ldr	r0, [sp, #20]
   109de:	430b      	orrs	r3, r1
   109e0:	9310      	str	r3, [sp, #64]	; 0x40
   109e2:	17cb      	asrs	r3, r1, #31
   109e4:	4303      	orrs	r3, r0
		c = 'f';
   109e6:	2c46      	cmp	r4, #70	; 0x46
	if ((exp | fract) != 0) {
   109e8:	9311      	str	r3, [sp, #68]	; 0x44
		c = 'f';
   109ea:	bf08      	it	eq
   109ec:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
   109ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   109f2:	4313      	orrs	r3, r2
   109f4:	f000 8111 	beq.w	10c1a <z_prf+0x666>
		if (exp == 0) {
   109f8:	2900      	cmp	r1, #0
   109fa:	f000 809b 	beq.w	10b34 <z_prf+0x580>
		fract |= HIGHBIT64;
   109fe:	2600      	movs	r6, #0
   10a00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
   10a02:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
   10a06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10a0a:	9317      	str	r3, [sp, #92]	; 0x5c
	while (exp <= -3) {
   10a0c:	f118 0f02 	cmn.w	r8, #2
   10a10:	f2c0 80a4 	blt.w	10b5c <z_prf+0x5a8>
	while (exp > 0) {
   10a14:	f1b8 0f00 	cmp.w	r8, #0
   10a18:	f300 80dd 	bgt.w	10bd6 <z_prf+0x622>
		_rlrshift(&fract);
   10a1c:	a816      	add	r0, sp, #88	; 0x58
		exp++;
   10a1e:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
   10a22:	f00c fe96 	bl	1d752 <_rlrshift>
	while (exp < (0 + 4)) {
   10a26:	f1b8 0f04 	cmp.w	r8, #4
   10a2a:	d1f7      	bne.n	10a1c <z_prf+0x468>
		precision = 6;		/* Default precision if none given */
   10a2c:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
   10a2e:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
   10a32:	bfb8      	it	lt
   10a34:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
   10a36:	2b47      	cmp	r3, #71	; 0x47
   10a38:	f040 80f8 	bne.w	10c2c <z_prf+0x678>
		if (decexp < (-4 + 1) || decexp > precision) {
   10a3c:	1cf1      	adds	r1, r6, #3
   10a3e:	db02      	blt.n	10a46 <z_prf+0x492>
   10a40:	42ae      	cmp	r6, r5
   10a42:	f340 80ed 	ble.w	10c20 <z_prf+0x66c>
			c += 'e' - 'g';
   10a46:	3c02      	subs	r4, #2
   10a48:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
   10a4a:	2d00      	cmp	r5, #0
   10a4c:	f000 80f4 	beq.w	10c38 <z_prf+0x684>
				precision--;
   10a50:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
   10a52:	f1bb 0f00 	cmp.w	fp, #0
   10a56:	f040 80ef 	bne.w	10c38 <z_prf+0x684>
   10a5a:	2d00      	cmp	r5, #0
   10a5c:	bfd4      	ite	le
   10a5e:	f04f 0a00 	movle.w	sl, #0
   10a62:	f04f 0a01 	movgt.w	sl, #1
	if (c == 'f') {
   10a66:	2c66      	cmp	r4, #102	; 0x66
   10a68:	f040 80e8 	bne.w	10c3c <z_prf+0x688>
		if (exp < 0) {
   10a6c:	eb16 0805 	adds.w	r8, r6, r5
   10a70:	f140 80ec 	bpl.w	10c4c <z_prf+0x698>
	digit_count = 16;
   10a74:	2310      	movs	r3, #16
   10a76:	2466      	movs	r4, #102	; 0x66
			exp = 0;
   10a78:	f04f 0800 	mov.w	r8, #0
	digit_count = 16;
   10a7c:	9315      	str	r3, [sp, #84]	; 0x54
	ltemp = 0x0800000000000000;
   10a7e:	2200      	movs	r2, #0
   10a80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   10a84:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	while (exp--) {
   10a88:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
   10a8c:	f080 80e0 	bcs.w	10c50 <z_prf+0x69c>
	fract += ltemp;
   10a90:	9b16      	ldr	r3, [sp, #88]	; 0x58
   10a92:	9a18      	ldr	r2, [sp, #96]	; 0x60
   10a94:	9919      	ldr	r1, [sp, #100]	; 0x64
   10a96:	189b      	adds	r3, r3, r2
   10a98:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10a9a:	eb41 0202 	adc.w	r2, r1, r2
   10a9e:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
	if ((fract >> 32) & 0xF0000000) {
   10aa2:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
   10aa6:	9312      	str	r3, [sp, #72]	; 0x48
   10aa8:	2300      	movs	r3, #0
   10aaa:	9313      	str	r3, [sp, #76]	; 0x4c
   10aac:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   10ab0:	4313      	orrs	r3, r2
   10ab2:	d006      	beq.n	10ac2 <z_prf+0x50e>
		_ldiv5(&fract);
   10ab4:	a816      	add	r0, sp, #88	; 0x58
   10ab6:	f00c fe5d 	bl	1d774 <_ldiv5>
		_rlrshift(&fract);
   10aba:	a816      	add	r0, sp, #88	; 0x58
   10abc:	f00c fe49 	bl	1d752 <_rlrshift>
		decexp++;
   10ac0:	3601      	adds	r6, #1
	if (c == 'f') {
   10ac2:	2c66      	cmp	r4, #102	; 0x66
   10ac4:	f040 80e1 	bne.w	10c8a <z_prf+0x6d6>
		if (decexp > 0) {
   10ac8:	2e00      	cmp	r6, #0
   10aca:	f340 80c8 	ble.w	10c5e <z_prf+0x6aa>
			while (decexp > 0 && digit_count > 0) {
   10ace:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10ad0:	2b00      	cmp	r3, #0
   10ad2:	dd07      	ble.n	10ae4 <z_prf+0x530>
				*buf++ = _get_digit(&fract, &digit_count);
   10ad4:	a915      	add	r1, sp, #84	; 0x54
   10ad6:	a816      	add	r0, sp, #88	; 0x58
   10ad8:	f00c fe77 	bl	1d7ca <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   10adc:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
   10ade:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
   10ae2:	d1f4      	bne.n	10ace <z_prf+0x51a>
			zp->predot = decexp;
   10ae4:	46b0      	mov	r8, r6
   10ae6:	463b      	mov	r3, r7
			decexp = 0;
   10ae8:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
   10aea:	f1bb 0f00 	cmp.w	fp, #0
   10aee:	d101      	bne.n	10af4 <z_prf+0x540>
   10af0:	2d00      	cmp	r5, #0
   10af2:	dd15      	ble.n	10b20 <z_prf+0x56c>
			*buf++ = '.';
   10af4:	222e      	movs	r2, #46	; 0x2e
   10af6:	f803 2b01 	strb.w	r2, [r3], #1
		if (decexp < 0 && precision > 0) {
   10afa:	2e00      	cmp	r6, #0
   10afc:	f000 80c0 	beq.w	10c80 <z_prf+0x6cc>
   10b00:	2d00      	cmp	r5, #0
   10b02:	f340 80bf 	ble.w	10c84 <z_prf+0x6d0>
			zp->postdot = -decexp;
   10b06:	f1c6 0b00 	rsb	fp, r6, #0
   10b0a:	45ab      	cmp	fp, r5
   10b0c:	bfa8      	it	ge
   10b0e:	46ab      	movge	fp, r5
			precision -= zp->postdot;
   10b10:	eba5 050b 	sub.w	r5, r5, fp
		while (precision > 0 && digit_count > 0) {
   10b14:	2d00      	cmp	r5, #0
   10b16:	dd03      	ble.n	10b20 <z_prf+0x56c>
   10b18:	9a15      	ldr	r2, [sp, #84]	; 0x54
   10b1a:	2a00      	cmp	r2, #0
   10b1c:	f300 80a6 	bgt.w	10c6c <z_prf+0x6b8>
	if (prune_zero) {
   10b20:	f1ba 0f00 	cmp.w	sl, #0
   10b24:	f040 80c6 	bne.w	10cb4 <z_prf+0x700>
	*buf = 0;
   10b28:	2200      	movs	r2, #0
	return buf - start;
   10b2a:	ae1b      	add	r6, sp, #108	; 0x6c
	*buf = 0;
   10b2c:	701a      	strb	r2, [r3, #0]
	return buf - start;
   10b2e:	1b9b      	subs	r3, r3, r6
   10b30:	e715      	b.n	1095e <z_prf+0x3aa>
				exp--;
   10b32:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
   10b34:	9b04      	ldr	r3, [sp, #16]
   10b36:	18db      	adds	r3, r3, r3
   10b38:	9304      	str	r3, [sp, #16]
   10b3a:	9b05      	ldr	r3, [sp, #20]
   10b3c:	415b      	adcs	r3, r3
   10b3e:	9305      	str	r3, [sp, #20]
   10b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10b44:	2a00      	cmp	r2, #0
   10b46:	f173 0300 	sbcs.w	r3, r3, #0
   10b4a:	daf2      	bge.n	10b32 <z_prf+0x57e>
   10b4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10b50:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   10b54:	e753      	b.n	109fe <z_prf+0x44a>
			_rlrshift(&fract);
   10b56:	a816      	add	r0, sp, #88	; 0x58
   10b58:	f00c fdfb 	bl	1d752 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
   10b5c:	e9dd ec16 	ldrd	lr, ip, [sp, #88]	; 0x58
   10b60:	2300      	movs	r3, #0
   10b62:	2100      	movs	r1, #0
   10b64:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
   10b68:	930d      	str	r3, [sp, #52]	; 0x34
   10b6a:	48bc      	ldr	r0, [pc, #752]	; (10e5c <z_prf+0x8a8>)
   10b6c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   10b70:	4299      	cmp	r1, r3
   10b72:	bf08      	it	eq
   10b74:	4290      	cmpeq	r0, r2
   10b76:	f108 0801 	add.w	r8, r8, #1
   10b7a:	d3ec      	bcc.n	10b56 <z_prf+0x5a2>
		fract *= 5U;
   10b7c:	2005      	movs	r0, #5
   10b7e:	fbae 2300 	umull	r2, r3, lr, r0
   10b82:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10b86:	9b07      	ldr	r3, [sp, #28]
		decexp--;
   10b88:	3e01      	subs	r6, #1
		fract *= 5U;
   10b8a:	fb00 330c 	mla	r3, r0, ip, r3
		decexp--;
   10b8e:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
   10b92:	9307      	str	r3, [sp, #28]
   10b94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   10b98:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		while ((fract >> 32) <= (MAXFP1 / 2)) {
   10b9c:	2100      	movs	r1, #0
   10b9e:	2300      	movs	r3, #0
   10ba0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   10ba4:	9807      	ldr	r0, [sp, #28]
   10ba6:	428b      	cmp	r3, r1
   10ba8:	bf08      	it	eq
   10baa:	4282      	cmpeq	r2, r0
   10bac:	d208      	bcs.n	10bc0 <z_prf+0x60c>
   10bae:	f1bc 0f00 	cmp.w	ip, #0
   10bb2:	f43f af2b 	beq.w	10a0c <z_prf+0x458>
   10bb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   10bba:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   10bbe:	e725      	b.n	10a0c <z_prf+0x458>
			fract <<= 1;
   10bc0:	9b06      	ldr	r3, [sp, #24]
			exp--;
   10bc2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			fract <<= 1;
   10bc6:	18db      	adds	r3, r3, r3
   10bc8:	9306      	str	r3, [sp, #24]
   10bca:	9b07      	ldr	r3, [sp, #28]
   10bcc:	f04f 0c01 	mov.w	ip, #1
   10bd0:	415b      	adcs	r3, r3
   10bd2:	9307      	str	r3, [sp, #28]
			exp--;
   10bd4:	e7e2      	b.n	10b9c <z_prf+0x5e8>
		_ldiv5(&fract);
   10bd6:	a816      	add	r0, sp, #88	; 0x58
   10bd8:	f00c fdcc 	bl	1d774 <_ldiv5>
		exp--;
   10bdc:	e9dd ae16 	ldrd	sl, lr, [sp, #88]	; 0x58
		decexp++;
   10be0:	f04f 0c00 	mov.w	ip, #0
		exp--;
   10be4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
   10be8:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
   10bea:	2300      	movs	r3, #0
   10bec:	2100      	movs	r1, #0
   10bee:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10bf2:	4299      	cmp	r1, r3
   10bf4:	bf08      	it	eq
   10bf6:	4570      	cmpeq	r0, lr
   10bf8:	d206      	bcs.n	10c08 <z_prf+0x654>
   10bfa:	f1bc 0f00 	cmp.w	ip, #0
   10bfe:	f43f af09 	beq.w	10a14 <z_prf+0x460>
   10c02:	e9cd ae16 	strd	sl, lr, [sp, #88]	; 0x58
   10c06:	e705      	b.n	10a14 <z_prf+0x460>
			fract <<= 1;
   10c08:	eb1a 0a0a 	adds.w	sl, sl, sl
   10c0c:	eb4e 0e0e 	adc.w	lr, lr, lr
			exp--;
   10c10:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   10c14:	f04f 0c01 	mov.w	ip, #1
   10c18:	e7e7      	b.n	10bea <z_prf+0x636>
	if ((exp | fract) != 0) {
   10c1a:	2600      	movs	r6, #0
   10c1c:	46b0      	mov	r8, r6
   10c1e:	e6fd      	b.n	10a1c <z_prf+0x468>
			precision -= decexp;
   10c20:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
   10c22:	f1bb 0f00 	cmp.w	fp, #0
   10c26:	d104      	bne.n	10c32 <z_prf+0x67e>
			c = 'f';
   10c28:	2466      	movs	r4, #102	; 0x66
   10c2a:	e716      	b.n	10a5a <z_prf+0x4a6>
	prune_zero = false;		/* Assume trailing 0's allowed     */
   10c2c:	f04f 0a00 	mov.w	sl, #0
   10c30:	e719      	b.n	10a66 <z_prf+0x4b2>
   10c32:	f04f 0a00 	mov.w	sl, #0
   10c36:	e719      	b.n	10a6c <z_prf+0x4b8>
   10c38:	f04f 0a00 	mov.w	sl, #0
		exp = precision + 1;
   10c3c:	f105 0801 	add.w	r8, r5, #1
	digit_count = 16;
   10c40:	2310      	movs	r3, #16
   10c42:	4598      	cmp	r8, r3
   10c44:	9315      	str	r3, [sp, #84]	; 0x54
	if (exp > 16) {
   10c46:	bfa8      	it	ge
   10c48:	4698      	movge	r8, r3
   10c4a:	e718      	b.n	10a7e <z_prf+0x4ca>
		if (exp < 0) {
   10c4c:	2466      	movs	r4, #102	; 0x66
   10c4e:	e7f7      	b.n	10c40 <z_prf+0x68c>
		_ldiv5(&ltemp);
   10c50:	a818      	add	r0, sp, #96	; 0x60
   10c52:	f00c fd8f 	bl	1d774 <_ldiv5>
		_rlrshift(&ltemp);
   10c56:	a818      	add	r0, sp, #96	; 0x60
   10c58:	f00c fd7b 	bl	1d752 <_rlrshift>
   10c5c:	e714      	b.n	10a88 <z_prf+0x4d4>
			*buf++ = '0';
   10c5e:	463b      	mov	r3, r7
   10c60:	2230      	movs	r2, #48	; 0x30
			zero.predot = zero.postdot = zero.trail = 0;
   10c62:	f04f 0800 	mov.w	r8, #0
			*buf++ = '0';
   10c66:	f803 2b01 	strb.w	r2, [r3], #1
   10c6a:	e73e      	b.n	10aea <z_prf+0x536>
			*buf++ = _get_digit(&fract, &digit_count);
   10c6c:	a915      	add	r1, sp, #84	; 0x54
   10c6e:	a816      	add	r0, sp, #88	; 0x58
   10c70:	9306      	str	r3, [sp, #24]
   10c72:	f00c fdaa 	bl	1d7ca <_get_digit>
   10c76:	9b06      	ldr	r3, [sp, #24]
			precision--;
   10c78:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
   10c7a:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
   10c7e:	e749      	b.n	10b14 <z_prf+0x560>
			zero.predot = zero.postdot = zero.trail = 0;
   10c80:	46b3      	mov	fp, r6
   10c82:	e747      	b.n	10b14 <z_prf+0x560>
   10c84:	f04f 0b00 	mov.w	fp, #0
   10c88:	e74a      	b.n	10b20 <z_prf+0x56c>
		*buf = _get_digit(&fract, &digit_count);
   10c8a:	a915      	add	r1, sp, #84	; 0x54
   10c8c:	a816      	add	r0, sp, #88	; 0x58
   10c8e:	f00c fd9c 	bl	1d7ca <_get_digit>
		if (*buf++ != '0') {
   10c92:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
   10c94:	7038      	strb	r0, [r7, #0]
			decexp--;
   10c96:	bf18      	it	ne
   10c98:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
   10c9c:	f1bb 0f00 	cmp.w	fp, #0
   10ca0:	d138      	bne.n	10d14 <z_prf+0x760>
   10ca2:	2d00      	cmp	r5, #0
   10ca4:	dc36      	bgt.n	10d14 <z_prf+0x760>
		if (*buf++ != '0') {
   10ca6:	1c7b      	adds	r3, r7, #1
	if (prune_zero) {
   10ca8:	f1ba 0f00 	cmp.w	sl, #0
   10cac:	d044      	beq.n	10d38 <z_prf+0x784>
			zero.predot = zero.postdot = zero.trail = 0;
   10cae:	f04f 0b00 	mov.w	fp, #0
   10cb2:	46d8      	mov	r8, fp
		while (*--buf == '0')
   10cb4:	461a      	mov	r2, r3
   10cb6:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
   10cba:	2930      	cmp	r1, #48	; 0x30
   10cbc:	d0fa      	beq.n	10cb4 <z_prf+0x700>
		if (*buf != '.') {
   10cbe:	292e      	cmp	r1, #46	; 0x2e
   10cc0:	bf18      	it	ne
   10cc2:	4613      	movne	r3, r2
   10cc4:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
   10cc6:	f004 02df 	and.w	r2, r4, #223	; 0xdf
   10cca:	2a45      	cmp	r2, #69	; 0x45
   10ccc:	f47f af2c 	bne.w	10b28 <z_prf+0x574>
		if (decexp < 0) {
   10cd0:	2e00      	cmp	r6, #0
			*buf++ = '-';
   10cd2:	bfb4      	ite	lt
   10cd4:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
   10cd6:	222b      	movge	r2, #43	; 0x2b
		*buf++ = c;
   10cd8:	4619      	mov	r1, r3
			decexp = -decexp;
   10cda:	bfb8      	it	lt
   10cdc:	4276      	neglt	r6, r6
		if (decexp >= 100) {
   10cde:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
   10ce0:	f801 4b02 	strb.w	r4, [r1], #2
			*buf++ = '-';
   10ce4:	705a      	strb	r2, [r3, #1]
		if (decexp >= 100) {
   10ce6:	dd08      	ble.n	10cfa <z_prf+0x746>
			*buf++ = (decexp / 100) + '0';
   10ce8:	2064      	movs	r0, #100	; 0x64
   10cea:	fb96 f2f0 	sdiv	r2, r6, r0
			decexp %= 100;
   10cee:	fb00 6612 	mls	r6, r0, r2, r6
			*buf++ = (decexp / 100) + '0';
   10cf2:	f102 0430 	add.w	r4, r2, #48	; 0x30
   10cf6:	1cd9      	adds	r1, r3, #3
   10cf8:	709c      	strb	r4, [r3, #2]
		*buf++ = (decexp / 10) + '0';
   10cfa:	200a      	movs	r0, #10
   10cfc:	fb96 f2f0 	sdiv	r2, r6, r0
   10d00:	460b      	mov	r3, r1
		decexp %= 10;
   10d02:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
   10d06:	f102 0430 	add.w	r4, r2, #48	; 0x30
		*buf++ = decexp + '0';
   10d0a:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   10d0c:	f803 4b02 	strb.w	r4, [r3], #2
		*buf++ = decexp + '0';
   10d10:	704e      	strb	r6, [r1, #1]
   10d12:	e709      	b.n	10b28 <z_prf+0x574>
			*buf++ = '.';
   10d14:	222e      	movs	r2, #46	; 0x2e
   10d16:	1cbb      	adds	r3, r7, #2
   10d18:	707a      	strb	r2, [r7, #1]
		while (precision > 0 && digit_count > 0) {
   10d1a:	2d00      	cmp	r5, #0
   10d1c:	ddc4      	ble.n	10ca8 <z_prf+0x6f4>
   10d1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   10d20:	2a00      	cmp	r2, #0
   10d22:	ddc1      	ble.n	10ca8 <z_prf+0x6f4>
			*buf++ = _get_digit(&fract, &digit_count);
   10d24:	a915      	add	r1, sp, #84	; 0x54
   10d26:	a816      	add	r0, sp, #88	; 0x58
   10d28:	9306      	str	r3, [sp, #24]
   10d2a:	f00c fd4e 	bl	1d7ca <_get_digit>
   10d2e:	9b06      	ldr	r3, [sp, #24]
			precision--;
   10d30:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
   10d32:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
   10d36:	e7f0      	b.n	10d1a <z_prf+0x766>
			zero.predot = zero.postdot = zero.trail = 0;
   10d38:	46d3      	mov	fp, sl
   10d3a:	46d0      	mov	r8, sl
   10d3c:	e7c3      	b.n	10cc6 <z_prf+0x712>
					prefix = 1;
   10d3e:	2701      	movs	r7, #1
   10d40:	e61b      	b.n	1097a <z_prf+0x3c6>
				switch (i) {
   10d42:	46b1      	mov	r9, r6
   10d44:	2f68      	cmp	r7, #104	; 0x68
   10d46:	f859 3b04 	ldr.w	r3, [r9], #4
   10d4a:	d005      	beq.n	10d58 <z_prf+0x7a4>
   10d4c:	dc01      	bgt.n	10d52 <z_prf+0x79e>
   10d4e:	2f48      	cmp	r7, #72	; 0x48
   10d50:	d007      	beq.n	10d62 <z_prf+0x7ae>
					*va_arg(vargs, int *) = count;
   10d52:	9a01      	ldr	r2, [sp, #4]
   10d54:	601a      	str	r2, [r3, #0]
					break;
   10d56:	e001      	b.n	10d5c <z_prf+0x7a8>
					*va_arg(vargs, short *) = count;
   10d58:	9a01      	ldr	r2, [sp, #4]
   10d5a:	801a      	strh	r2, [r3, #0]
				continue;
   10d5c:	464e      	mov	r6, r9
   10d5e:	9a08      	ldr	r2, [sp, #32]
   10d60:	e430      	b.n	105c4 <z_prf+0x10>
					*va_arg(vargs, char *) = count;
   10d62:	9a01      	ldr	r2, [sp, #4]
   10d64:	701a      	strb	r2, [r3, #0]
					break;
   10d66:	e7f9      	b.n	10d5c <z_prf+0x7a8>
				val = (uintptr_t) va_arg(vargs, void *);
   10d68:	46b1      	mov	r9, r6
		*buf++ = '0';
   10d6a:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16);
   10d6e:	2210      	movs	r2, #16
   10d70:	f859 1b04 	ldr.w	r1, [r9], #4
   10d74:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
		*buf++ = '0';
   10d78:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
   10d7c:	f00c fcc7 	bl	1d70e <_to_x>
				prefix = 2;
   10d80:	2702      	movs	r7, #2
	return len + (buf - buf0);
   10d82:	1c86      	adds	r6, r0, #2
				break;
   10d84:	e51e      	b.n	107c4 <z_prf+0x210>
					if (cptr[clen] == '\0') {
   10d86:	5d9a      	ldrb	r2, [r3, r6]
   10d88:	2a00      	cmp	r2, #0
   10d8a:	d04a      	beq.n	10e22 <z_prf+0x86e>
				for (clen = 0; clen < precision; clen++) {
   10d8c:	3601      	adds	r6, #1
   10d8e:	e52e      	b.n	107ee <z_prf+0x23a>
	if (alt_form) {
   10d90:	ac1b      	add	r4, sp, #108	; 0x6c
	return (buf - buf0) + _to_x(buf, value, 8);
   10d92:	2208      	movs	r2, #8
   10d94:	4620      	mov	r0, r4
   10d96:	f00c fcba 	bl	1d70e <_to_x>
   10d9a:	ae1b      	add	r6, sp, #108	; 0x6c
   10d9c:	1ba6      	subs	r6, r4, r6
   10d9e:	4406      	add	r6, r0
			prefix = 0;
   10da0:	2700      	movs	r7, #0
   10da2:	e50f      	b.n	107c4 <z_prf+0x210>
		*buf++ = '0';
   10da4:	f10d 046d 	add.w	r4, sp, #109	; 0x6d
   10da8:	e7f3      	b.n	10d92 <z_prf+0x7de>
				} else if (c == 'u') {
   10daa:	2c75      	cmp	r4, #117	; 0x75
   10dac:	d105      	bne.n	10dba <z_prf+0x806>
	return _to_x(buf, value, 10);
   10dae:	220a      	movs	r2, #10
   10db0:	a81b      	add	r0, sp, #108	; 0x6c
   10db2:	f00c fcac 	bl	1d70e <_to_x>
   10db6:	4606      	mov	r6, r0
   10db8:	e7f2      	b.n	10da0 <z_prf+0x7ec>
	if (alt_form) {
   10dba:	f1bb 0f00 	cmp.w	fp, #0
   10dbe:	d012      	beq.n	10de6 <z_prf+0x832>
		*buf++ = '0';
   10dc0:	f647 0330 	movw	r3, #30768	; 0x7830
		*buf++ = 'x';
   10dc4:	f10d 086e 	add.w	r8, sp, #110	; 0x6e
		*buf++ = '0';
   10dc8:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
   10dcc:	2210      	movs	r2, #16
   10dce:	4640      	mov	r0, r8
   10dd0:	f00c fc9d 	bl	1d70e <_to_x>
	if (prefix == 'X') {
   10dd4:	2c58      	cmp	r4, #88	; 0x58
   10dd6:	d009      	beq.n	10dec <z_prf+0x838>
	return len + (buf - buf0);
   10dd8:	ae1b      	add	r6, sp, #108	; 0x6c
   10dda:	eba8 0606 	sub.w	r6, r8, r6
   10dde:	4406      	add	r6, r0
						prefix = 2;
   10de0:	ea4f 074b 	mov.w	r7, fp, lsl #1
   10de4:	e4ee      	b.n	107c4 <z_prf+0x210>
	if (alt_form) {
   10de6:	f10d 086c 	add.w	r8, sp, #108	; 0x6c
   10dea:	e7ef      	b.n	10dcc <z_prf+0x818>
   10dec:	aa1b      	add	r2, sp, #108	; 0x6c
		if (*buf >= 'a' && *buf <= 'z') {
   10dee:	f812 3b01 	ldrb.w	r3, [r2], #1
   10df2:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   10df6:	2919      	cmp	r1, #25
   10df8:	d803      	bhi.n	10e02 <z_prf+0x84e>
			*buf += 'A' - 'a';
   10dfa:	3b20      	subs	r3, #32
   10dfc:	f802 3c01 	strb.w	r3, [r2, #-1]
   10e00:	e7f5      	b.n	10dee <z_prf+0x83a>
	} while (*buf++);
   10e02:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   10e06:	2b00      	cmp	r3, #0
   10e08:	d1f1      	bne.n	10dee <z_prf+0x83a>
   10e0a:	e7e5      	b.n	10dd8 <z_prf+0x824>
				PUTC('%');
   10e0c:	9903      	ldr	r1, [sp, #12]
   10e0e:	4620      	mov	r0, r4
   10e10:	f7ff bbe1 	b.w	105d6 <z_prf+0x22>
				count++;
   10e14:	9b01      	ldr	r3, [sp, #4]
   10e16:	3301      	adds	r3, #1
				count += 2;
   10e18:	9301      	str	r3, [sp, #4]
				continue;
   10e1a:	46b1      	mov	r9, r6
   10e1c:	e79e      	b.n	10d5c <z_prf+0x7a8>
					prefix = 1;
   10e1e:	2701      	movs	r7, #1
   10e20:	e4d0      	b.n	107c4 <z_prf+0x210>
   10e22:	4615      	mov	r5, r2
   10e24:	e4e8      	b.n	107f8 <z_prf+0x244>
			cptr = buf;
   10e26:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = 0;
   10e28:	2200      	movs	r2, #0
   10e2a:	e4f7      	b.n	1081c <z_prf+0x268>
   10e2c:	ab1b      	add	r3, sp, #108	; 0x6c
   10e2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10e30:	e4f4      	b.n	1081c <z_prf+0x268>
   10e32:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
					PUTC(' ');
   10e36:	9903      	ldr	r1, [sp, #12]
   10e38:	9b02      	ldr	r3, [sp, #8]
   10e3a:	2020      	movs	r0, #32
   10e3c:	4798      	blx	r3
   10e3e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   10e42:	3001      	adds	r0, #1
   10e44:	f43f abcc 	beq.w	105e0 <z_prf+0x2c>
				while (width-- > 0) {
   10e48:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
   10e4c:	d2f1      	bcs.n	10e32 <z_prf+0x87e>
				count += width;
   10e4e:	9901      	ldr	r1, [sp, #4]
   10e50:	4421      	add	r1, r4
   10e52:	9101      	str	r1, [sp, #4]
				while (width-- > 0) {
   10e54:	4654      	mov	r4, sl
   10e56:	e4eb      	b.n	10830 <z_prf+0x27c>
   10e58:	46a2      	mov	sl, r4
   10e5a:	e7f5      	b.n	10e48 <z_prf+0x894>
   10e5c:	33333332 	.word	0x33333332
				PUTC(*cptr++);
   10e60:	f813 0b01 	ldrb.w	r0, [r3], #1
   10e64:	9903      	ldr	r1, [sp, #12]
   10e66:	9309      	str	r3, [sp, #36]	; 0x24
   10e68:	9b02      	ldr	r3, [sp, #8]
   10e6a:	920a      	str	r2, [sp, #40]	; 0x28
   10e6c:	4798      	blx	r3
   10e6e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   10e72:	3001      	adds	r0, #1
   10e74:	f47f acde 	bne.w	10834 <z_prf+0x280>
   10e78:	f7ff bbb2 	b.w	105e0 <z_prf+0x2c>
				PUTC('0');
   10e7c:	9903      	ldr	r1, [sp, #12]
   10e7e:	2030      	movs	r0, #48	; 0x30
   10e80:	9b02      	ldr	r3, [sp, #8]
   10e82:	9209      	str	r2, [sp, #36]	; 0x24
   10e84:	4798      	blx	r3
   10e86:	3001      	adds	r0, #1
   10e88:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10e8a:	f47f acd6 	bne.w	1083a <z_prf+0x286>
   10e8e:	f7ff bba7 	b.w	105e0 <z_prf+0x2c>
					PUTC(c);
   10e92:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
   10e96:	4798      	blx	r3
   10e98:	3001      	adds	r0, #1
   10e9a:	f43f aba1 	beq.w	105e0 <z_prf+0x2c>
					c = *++cptr;
   10e9e:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
   10ea2:	e4d6      	b.n	10852 <z_prf+0x29e>
					PUTC('0');
   10ea4:	9903      	ldr	r1, [sp, #12]
   10ea6:	2030      	movs	r0, #48	; 0x30
   10ea8:	9b02      	ldr	r3, [sp, #8]
   10eaa:	4798      	blx	r3
   10eac:	3001      	adds	r0, #1
   10eae:	f47f acd8 	bne.w	10862 <z_prf+0x2ae>
   10eb2:	f7ff bb95 	b.w	105e0 <z_prf+0x2c>
					PUTC('0');
   10eb6:	9903      	ldr	r1, [sp, #12]
   10eb8:	2030      	movs	r0, #48	; 0x30
   10eba:	9b02      	ldr	r3, [sp, #8]
   10ebc:	4798      	blx	r3
   10ebe:	3001      	adds	r0, #1
   10ec0:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   10ec4:	f47f ace7 	bne.w	10896 <z_prf+0x2e2>
   10ec8:	f7ff bb8a 	b.w	105e0 <z_prf+0x2c>
					PUTC(c);
   10ecc:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
   10ed0:	4798      	blx	r3
   10ed2:	3001      	adds	r0, #1
   10ed4:	f43f ab84 	beq.w	105e0 <z_prf+0x2c>
					c = *++cptr;
   10ed8:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
   10edc:	e4e5      	b.n	108aa <z_prf+0x2f6>
					PUTC('0');
   10ede:	9903      	ldr	r1, [sp, #12]
   10ee0:	2030      	movs	r0, #48	; 0x30
   10ee2:	9b02      	ldr	r3, [sp, #8]
   10ee4:	4798      	blx	r3
   10ee6:	3001      	adds	r0, #1
   10ee8:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   10eec:	f47f ace8 	bne.w	108c0 <z_prf+0x30c>
   10ef0:	f7ff bb76 	b.w	105e0 <z_prf+0x2c>
				PUTC(*cptr++);
   10ef4:	9903      	ldr	r1, [sp, #12]
   10ef6:	f81a 0b01 	ldrb.w	r0, [sl], #1
   10efa:	9b02      	ldr	r3, [sp, #8]
   10efc:	4798      	blx	r3
   10efe:	3001      	adds	r0, #1
   10f00:	f43f ab6e 	beq.w	105e0 <z_prf+0x2c>
   10f04:	eba6 030a 	sub.w	r3, r6, sl
			while (clen-- > 0) {
   10f08:	2b00      	cmp	r3, #0
   10f0a:	dcf3      	bgt.n	10ef4 <z_prf+0x940>
			count += clen;
   10f0c:	9b01      	ldr	r3, [sp, #4]
   10f0e:	9a06      	ldr	r2, [sp, #24]
			if (width > 0) {
   10f10:	2c00      	cmp	r4, #0
			count += clen;
   10f12:	4413      	add	r3, r2
   10f14:	9301      	str	r3, [sp, #4]
			if (width > 0) {
   10f16:	f77f af21 	ble.w	10d5c <z_prf+0x7a8>
   10f1a:	4625      	mov	r5, r4
   10f1c:	e006      	b.n	10f2c <z_prf+0x978>
					PUTC(' ');
   10f1e:	9903      	ldr	r1, [sp, #12]
   10f20:	2020      	movs	r0, #32
   10f22:	9b02      	ldr	r3, [sp, #8]
   10f24:	4798      	blx	r3
   10f26:	3001      	adds	r0, #1
   10f28:	f43f ab5a 	beq.w	105e0 <z_prf+0x2c>
				while (width-- > 0) {
   10f2c:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
   10f30:	d2f5      	bcs.n	10f1e <z_prf+0x96a>
				count += width;
   10f32:	9b01      	ldr	r3, [sp, #4]
   10f34:	4423      	add	r3, r4
   10f36:	9301      	str	r3, [sp, #4]
   10f38:	e710      	b.n	10d5c <z_prf+0x7a8>
   10f3a:	bf00      	nop

00010f3c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   10f3c:	4b01      	ldr	r3, [pc, #4]	; (10f44 <__stdout_hook_install+0x8>)
   10f3e:	6018      	str	r0, [r3, #0]
}
   10f40:	4770      	bx	lr
   10f42:	bf00      	nop
   10f44:	2002c514 	.word	0x2002c514

00010f48 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
   10f48:	b40c      	push	{r2, r3}
   10f4a:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   10f4c:	b909      	cbnz	r1, 10f52 <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
   10f4e:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
   10f52:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
   10f56:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   10f58:	9a06      	ldr	r2, [sp, #24]
   10f5a:	a902      	add	r1, sp, #8
   10f5c:	4805      	ldr	r0, [pc, #20]	; (10f74 <snprintf+0x2c>)
	va_start(vargs, format);
   10f5e:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   10f60:	f7ff fb28 	bl	105b4 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
   10f64:	2200      	movs	r2, #0
   10f66:	9b02      	ldr	r3, [sp, #8]
   10f68:	701a      	strb	r2, [r3, #0]
	return r;
}
   10f6a:	b005      	add	sp, #20
   10f6c:	f85d eb04 	ldr.w	lr, [sp], #4
   10f70:	b002      	add	sp, #8
   10f72:	4770      	bx	lr
   10f74:	0001d7ff 	.word	0x0001d7ff

00010f78 <sprintf>:

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
   10f78:	b40e      	push	{r1, r2, r3}
   10f7a:	b50f      	push	{r0, r1, r2, r3, lr}

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   10f7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
   10f80:	ab05      	add	r3, sp, #20
   10f82:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
   10f86:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   10f88:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   10f8a:	4806      	ldr	r0, [pc, #24]	; (10fa4 <sprintf+0x2c>)
   10f8c:	a902      	add	r1, sp, #8
	va_start(vargs, format);
   10f8e:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   10f90:	f7ff fb10 	bl	105b4 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
   10f94:	2200      	movs	r2, #0
   10f96:	9b02      	ldr	r3, [sp, #8]
   10f98:	701a      	strb	r2, [r3, #0]
	return r;
}
   10f9a:	b004      	add	sp, #16
   10f9c:	f85d eb04 	ldr.w	lr, [sp], #4
   10fa0:	b003      	add	sp, #12
   10fa2:	4770      	bx	lr
   10fa4:	0001d7ff 	.word	0x0001d7ff

00010fa8 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   10fa8:	b538      	push	{r3, r4, r5, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   10faa:	4c07      	ldr	r4, [pc, #28]	; (10fc8 <net_if_init+0x20>)
   10fac:	4d07      	ldr	r5, [pc, #28]	; (10fcc <net_if_init+0x24>)
   10fae:	42ac      	cmp	r4, r5
   10fb0:	d100      	bne.n	10fb4 <net_if_init+0xc>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   10fb2:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   10fb4:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   10fb6:	681b      	ldr	r3, [r3, #0]
   10fb8:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
   10fba:	b11b      	cbz	r3, 10fc4 <net_if_init+0x1c>
   10fbc:	681b      	ldr	r3, [r3, #0]
   10fbe:	b10b      	cbz	r3, 10fc4 <net_if_init+0x1c>
	api->init(iface);
   10fc0:	4620      	mov	r0, r4
   10fc2:	4798      	blx	r3
	     iface++, if_count++) {
   10fc4:	3420      	adds	r4, #32
   10fc6:	e7f2      	b.n	10fae <net_if_init+0x6>
   10fc8:	2002c720 	.word	0x2002c720
   10fcc:	2002c740 	.word	0x2002c740

00010fd0 <net_if_post_init>:

void net_if_post_init(void)
{
   10fd0:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   10fd2:	4c08      	ldr	r4, [pc, #32]	; (10ff4 <net_if_post_init+0x24>)
   10fd4:	4d08      	ldr	r5, [pc, #32]	; (10ff8 <net_if_post_init+0x28>)
   10fd6:	42ac      	cmp	r4, r5
   10fd8:	d100      	bne.n	10fdc <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   10fda:	bd38      	pop	{r3, r4, r5, pc}
	return atomic_test_bit(iface->if_dev->flags, value);
   10fdc:	6820      	ldr	r0, [r4, #0]
   10fde:	2103      	movs	r1, #3
   10fe0:	300c      	adds	r0, #12
   10fe2:	f00c fc20 	bl	1d826 <atomic_test_bit>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   10fe6:	b910      	cbnz	r0, 10fee <net_if_post_init+0x1e>
			net_if_up(iface);
   10fe8:	4620      	mov	r0, r4
   10fea:	f00c fc2b 	bl	1d844 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   10fee:	3420      	adds	r4, #32
   10ff0:	e7f1      	b.n	10fd6 <net_if_post_init+0x6>
   10ff2:	bf00      	nop
   10ff4:	2002c720 	.word	0x2002c720
   10ff8:	2002c740 	.word	0x2002c740

00010ffc <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	u16_t *w;
	u8_t i, bl, bh, longest = 1U;
	s8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   10ffc:	2300      	movs	r3, #0
{
   10ffe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	u16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   11002:	2802      	cmp	r0, #2
{
   11004:	b089      	sub	sp, #36	; 0x24
   11006:	4681      	mov	r9, r0
   11008:	468a      	mov	sl, r1
   1100a:	4690      	mov	r8, r2
	unsigned char zeros[8] = { 0 };
   1100c:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (family == AF_INET6) {
   11010:	d13c      	bne.n	1108c <z_impl_net_addr_ntop+0x90>
		addr6 = (struct in6_addr *)src;
		w = (u16_t *)addr6->s6_addr16;
   11012:	aa06      	add	r2, sp, #24
   11014:	4610      	mov	r0, r2
   11016:	9104      	str	r1, [sp, #16]
{
   11018:	4619      	mov	r1, r3
   1101a:	e006      	b.n	1102a <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   1101c:	7804      	ldrb	r4, [r0, #0]
   1101e:	3101      	adds	r1, #1
   11020:	3401      	adds	r4, #1
   11022:	7004      	strb	r4, [r0, #0]
			for (j = i; j < 8; j++) {
   11024:	b2cc      	uxtb	r4, r1
   11026:	2c07      	cmp	r4, #7
   11028:	d803      	bhi.n	11032 <z_impl_net_addr_ntop+0x36>
				if (UNALIGNED_GET(&w[j]) != 0) {
   1102a:	f83a 4011 	ldrh.w	r4, [sl, r1, lsl #1]
   1102e:	2c00      	cmp	r4, #0
   11030:	d0f4      	beq.n	1101c <z_impl_net_addr_ntop+0x20>
   11032:	3301      	adds	r3, #1
		for (i = 0U; i < 8; i++) {
   11034:	2b08      	cmp	r3, #8
   11036:	f100 0001 	add.w	r0, r0, #1
   1103a:	d1ed      	bne.n	11018 <z_impl_net_addr_ntop+0x1c>
	s8_t pos = -1;
   1103c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1U;
   11040:	2701      	movs	r7, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   11042:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   11044:	f812 1b01 	ldrb.w	r1, [r2], #1
   11048:	42b9      	cmp	r1, r7
				longest = zeros[i];
				pos = i;
   1104a:	bf88      	it	hi
   1104c:	b25e      	sxtbhi	r6, r3
		for (i = 0U; i < 8; i++) {
   1104e:	f103 0301 	add.w	r3, r3, #1
   11052:	b2db      	uxtb	r3, r3
				pos = i;
   11054:	bf88      	it	hi
   11056:	460f      	movhi	r7, r1
		for (i = 0U; i < 8; i++) {
   11058:	2b08      	cmp	r3, #8
   1105a:	d1f3      	bne.n	11044 <z_impl_net_addr_ntop+0x48>
		len = 8;
   1105c:	9303      	str	r3, [sp, #12]
   1105e:	2f01      	cmp	r7, #1
   11060:	f04f 033a 	mov.w	r3, #58	; 0x3a
   11064:	bf08      	it	eq
   11066:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
   1106a:	9302      	str	r3, [sp, #8]
	bool needcolon = false;
   1106c:	2200      	movs	r2, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   1106e:	4644      	mov	r4, r8
   11070:	4615      	mov	r5, r2
   11072:	9b03      	ldr	r3, [sp, #12]
   11074:	429d      	cmp	r5, r3
   11076:	db19      	blt.n	110ac <z_impl_net_addr_ntop+0xb0>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   11078:	4544      	cmp	r4, r8
   1107a:	d009      	beq.n	11090 <z_impl_net_addr_ntop+0x94>
		return NULL;
	}

	if (family == AF_INET) {
   1107c:	2300      	movs	r3, #0
   1107e:	f1b9 0f01 	cmp.w	r9, #1
		*(ptr - 1) = '\0';
   11082:	bf0c      	ite	eq
   11084:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   11088:	7023      	strbne	r3, [r4, #0]
   1108a:	e003      	b.n	11094 <z_impl_net_addr_ntop+0x98>
	} else if (family == AF_INET) {
   1108c:	2801      	cmp	r0, #1
   1108e:	d005      	beq.n	1109c <z_impl_net_addr_ntop+0xa0>
		return NULL;
   11090:	f04f 0800 	mov.w	r8, #0
	}

	return dst;
}
   11094:	4640      	mov	r0, r8
   11096:	b009      	add	sp, #36	; 0x24
   11098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   1109c:	232e      	movs	r3, #46	; 0x2e
   1109e:	2204      	movs	r2, #4
	s8_t pos = -1;
   110a0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		delim = '.';
   110a4:	e9cd 3202 	strd	r3, r2, [sp, #8]
	u8_t i, bl, bh, longest = 1U;
   110a8:	4607      	mov	r7, r0
   110aa:	e7df      	b.n	1106c <z_impl_net_addr_ntop+0x70>
		if (len == 4) {
   110ac:	9b03      	ldr	r3, [sp, #12]
   110ae:	2b04      	cmp	r3, #4
   110b0:	d134      	bne.n	1111c <z_impl_net_addr_ntop+0x120>
			value = (u32_t)addr->s4_addr[i];
   110b2:	f81a 1005 	ldrb.w	r1, [sl, r5]
			if (value == 0U) {
   110b6:	b949      	cbnz	r1, 110cc <z_impl_net_addr_ntop+0xd0>
				*ptr++ = '0';
   110b8:	2330      	movs	r3, #48	; 0x30
   110ba:	4620      	mov	r0, r4
   110bc:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   110c0:	9b02      	ldr	r3, [sp, #8]
   110c2:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   110c4:	3501      	adds	r5, #1
   110c6:	b2ed      	uxtb	r5, r5
   110c8:	4604      	mov	r4, r0
   110ca:	e7d2      	b.n	11072 <z_impl_net_addr_ntop+0x76>
			l = net_value_to_udec(ptr, value, 0);
   110cc:	2009      	movs	r0, #9
   110ce:	f04f 0b00 	mov.w	fp, #0
   110d2:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 111ac <z_impl_net_addr_ntop+0x1b0>
   110d6:	9401      	str	r4, [sp, #4]
		temp = value / divisor;
   110d8:	fbb1 fefc 	udiv	lr, r1, ip
		value = value % divisor;
   110dc:	fb0c 131e 	mls	r3, ip, lr, r1
		if ((precision > i) || (temp != 0)) {
   110e0:	4583      	cmp	fp, r0
		value = value % divisor;
   110e2:	9305      	str	r3, [sp, #20]
		if ((precision > i) || (temp != 0)) {
   110e4:	dc01      	bgt.n	110ea <z_impl_net_addr_ntop+0xee>
   110e6:	4561      	cmp	r1, ip
   110e8:	d306      	bcc.n	110f8 <z_impl_net_addr_ntop+0xfc>
			*buf++ = (char) (temp + '0');
   110ea:	4683      	mov	fp, r0
   110ec:	9b01      	ldr	r3, [sp, #4]
   110ee:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
   110f2:	f803 eb01 	strb.w	lr, [r3], #1
   110f6:	9301      	str	r3, [sp, #4]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   110f8:	230a      	movs	r3, #10
   110fa:	3801      	subs	r0, #1
   110fc:	fbbc fcf3 	udiv	ip, ip, r3
   11100:	1c43      	adds	r3, r0, #1
		value = value % divisor;
   11102:	9905      	ldr	r1, [sp, #20]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   11104:	d1e8      	bne.n	110d8 <z_impl_net_addr_ntop+0xdc>
	*buf = 0;
   11106:	f04f 0300 	mov.w	r3, #0
   1110a:	9901      	ldr	r1, [sp, #4]
   1110c:	700b      	strb	r3, [r1, #0]
	return buf - start;
   1110e:	1b0b      	subs	r3, r1, r4
			ptr += l;
   11110:	b2db      	uxtb	r3, r3
			*ptr++ = delim;
   11112:	9902      	ldr	r1, [sp, #8]
			ptr += l;
   11114:	18e0      	adds	r0, r4, r3
			*ptr++ = delim;
   11116:	3001      	adds	r0, #1
   11118:	54e1      	strb	r1, [r4, r3]
			continue;
   1111a:	e7d3      	b.n	110c4 <z_impl_net_addr_ntop+0xc8>
		if (i == pos) {
   1111c:	42ae      	cmp	r6, r5
   1111e:	d10d      	bne.n	1113c <z_impl_net_addr_ntop+0x140>
			if (needcolon || i == 0U) {
   11120:	b902      	cbnz	r2, 11124 <z_impl_net_addr_ntop+0x128>
   11122:	b916      	cbnz	r6, 1112a <z_impl_net_addr_ntop+0x12e>
				*ptr++ = ':';
   11124:	233a      	movs	r3, #58	; 0x3a
   11126:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   1112a:	233a      	movs	r3, #58	; 0x3a
   1112c:	4620      	mov	r0, r4
   1112e:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   11132:	1e7b      	subs	r3, r7, #1
   11134:	441d      	add	r5, r3
   11136:	b2ed      	uxtb	r5, r5
			needcolon = false;
   11138:	2200      	movs	r2, #0
			continue;
   1113a:	e7c3      	b.n	110c4 <z_impl_net_addr_ntop+0xc8>
		if (needcolon) {
   1113c:	b112      	cbz	r2, 11144 <z_impl_net_addr_ntop+0x148>
			*ptr++ = ':';
   1113e:	233a      	movs	r3, #58	; 0x3a
   11140:	f804 3b01 	strb.w	r3, [r4], #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   11144:	9b04      	ldr	r3, [sp, #16]
   11146:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   1114a:	021a      	lsls	r2, r3, #8
   1114c:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
   11150:	b212      	sxth	r2, r2
		bh = value >> 8;
   11152:	f3c2 2307 	ubfx	r3, r2, #8, #8
		bl = value & 0xff;
   11156:	fa5f fb82 	uxtb.w	fp, r2
		if (bh) {
   1115a:	b1b3      	cbz	r3, 1118a <z_impl_net_addr_ntop+0x18e>
			if (bh > 0x0f) {
   1115c:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   1115e:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   11160:	d90b      	bls.n	1117a <z_impl_net_addr_ntop+0x17e>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   11162:	2300      	movs	r3, #0
   11164:	2261      	movs	r2, #97	; 0x61
   11166:	4620      	mov	r0, r4
   11168:	f00c fb9b 	bl	1d8a2 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   1116c:	2301      	movs	r3, #1
   1116e:	2261      	movs	r2, #97	; 0x61
   11170:	4659      	mov	r1, fp
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   11172:	f00c fb96 	bl	1d8a2 <net_byte_to_hex>
		needcolon = true;
   11176:	2201      	movs	r2, #1
   11178:	e7a4      	b.n	110c4 <z_impl_net_addr_ntop+0xc8>
				if (bh < 10) {
   1117a:	b25b      	sxtb	r3, r3
   1117c:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   1117e:	bf94      	ite	ls
   11180:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   11182:	3357      	addhi	r3, #87	; 0x57
   11184:	1c60      	adds	r0, r4, #1
   11186:	7023      	strb	r3, [r4, #0]
   11188:	e7f0      	b.n	1116c <z_impl_net_addr_ntop+0x170>
		} else if (bl > 0x0f) {
   1118a:	f1bb 0f0f 	cmp.w	fp, #15
   1118e:	d903      	bls.n	11198 <z_impl_net_addr_ntop+0x19c>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   11190:	2261      	movs	r2, #97	; 0x61
   11192:	4659      	mov	r1, fp
   11194:	4620      	mov	r0, r4
   11196:	e7ec      	b.n	11172 <z_impl_net_addr_ntop+0x176>
			if (bl < 10) {
   11198:	b252      	sxtb	r2, r2
   1119a:	f1bb 0f09 	cmp.w	fp, #9
				*ptr++ = (char)(bl + '0');
   1119e:	bf94      	ite	ls
   111a0:	3230      	addls	r2, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   111a2:	3257      	addhi	r2, #87	; 0x57
   111a4:	1c60      	adds	r0, r4, #1
   111a6:	7022      	strb	r2, [r4, #0]
   111a8:	e7e5      	b.n	11176 <z_impl_net_addr_ntop+0x17a>
   111aa:	bf00      	nop
   111ac:	3b9aca00 	.word	0x3b9aca00

000111b0 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   111b0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   111b2:	4b09      	ldr	r3, [pc, #36]	; (111d8 <gpio_nrfx_init+0x28>)
   111b4:	781a      	ldrb	r2, [r3, #0]
   111b6:	b96a      	cbnz	r2, 111d4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   111b8:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   111ba:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   111bc:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   111be:	2105      	movs	r1, #5
   111c0:	f7fe fba0 	bl	f904 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
   111c4:	2031      	movs	r0, #49	; 0x31
   111c6:	f7fe fb8d 	bl	f8e4 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   111ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   111ce:	4b03      	ldr	r3, [pc, #12]	; (111dc <gpio_nrfx_init+0x2c>)
   111d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   111d4:	2000      	movs	r0, #0
   111d6:	bd08      	pop	{r3, pc}
   111d8:	20026549 	.word	0x20026549
   111dc:	40031000 	.word	0x40031000

000111e0 <gpiote_pin_int_cfg>:
{
   111e0:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   111e2:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
   111e4:	6882      	ldr	r2, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   111e6:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   111e8:	4c51      	ldr	r4, [pc, #324]	; (11330 <gpiote_pin_int_cfg+0x150>)
   111ea:	7918      	ldrb	r0, [r3, #4]
   111ec:	f001 031f 	and.w	r3, r1, #31
   111f0:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   111f4:	2000      	movs	r0, #0
   111f6:	f8d4 5304 	ldr.w	r5, [r4, #772]	; 0x304
   111fa:	b2ed      	uxtb	r5, r5
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   111fc:	f500 76a2 	add.w	r6, r0, #324	; 0x144
   11200:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   11204:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   11208:	42b3      	cmp	r3, r6
   1120a:	d170      	bne.n	112ee <gpiote_pin_int_cfg+0x10e>
		    && (intenset & BIT(i))) {
   1120c:	fa25 f600 	lsr.w	r6, r5, r0
   11210:	07f6      	lsls	r6, r6, #31
   11212:	d56c      	bpl.n	112ee <gpiote_pin_int_cfg+0x10e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   11214:	0085      	lsls	r5, r0, #2
   11216:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   1121a:	f505 3544 	add.w	r5, r5, #200704	; 0x31000
   1121e:	f8d5 6510 	ldr.w	r6, [r5, #1296]	; 0x510
   11222:	f026 0601 	bic.w	r6, r6, #1
   11226:	f8c5 6510 	str.w	r6, [r5, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1122a:	2501      	movs	r5, #1
   1122c:	fa05 f000 	lsl.w	r0, r5, r0
    p_reg->INTENCLR = mask;
   11230:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   11234:	4d3f      	ldr	r5, [pc, #252]	; (11334 <gpiote_pin_int_cfg+0x154>)
   11236:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1123a:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   1123e:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11242:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   11246:	6890      	ldr	r0, [r2, #8]
   11248:	40c8      	lsrs	r0, r1
   1124a:	f010 0001 	ands.w	r0, r0, #1
   1124e:	d04d      	beq.n	112ec <gpiote_pin_int_cfg+0x10c>
   11250:	68d0      	ldr	r0, [r2, #12]
   11252:	40c8      	lsrs	r0, r1
   11254:	f010 0001 	ands.w	r0, r0, #1
   11258:	d048      	beq.n	112ec <gpiote_pin_int_cfg+0x10c>
		if (data->trig_edge & BIT(pin)) {
   1125a:	6950      	ldr	r0, [r2, #20]
   1125c:	40c8      	lsrs	r0, r1
   1125e:	f010 0001 	ands.w	r0, r0, #1
   11262:	d050      	beq.n	11306 <gpiote_pin_int_cfg+0x126>
			if (data->double_edge & BIT(pin)) {
   11264:	6990      	ldr	r0, [r2, #24]
   11266:	40c8      	lsrs	r0, r1
   11268:	07c0      	lsls	r0, r0, #31
   1126a:	d444      	bmi.n	112f6 <gpiote_pin_int_cfg+0x116>
			} else if (((data->active_level & BIT(pin)) != 0U)
   1126c:	6910      	ldr	r0, [r2, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   1126e:	69d2      	ldr	r2, [r2, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   11270:	40c8      	lsrs	r0, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   11272:	fa22 f101 	lsr.w	r1, r2, r1
			} else if (((data->active_level & BIT(pin)) != 0U)
   11276:	f000 0001 	and.w	r0, r0, #1
   1127a:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   1127e:	4288      	cmp	r0, r1
   11280:	bf14      	ite	ne
   11282:	2101      	movne	r1, #1
   11284:	2102      	moveq	r1, #2
   11286:	2500      	movs	r5, #0
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   11288:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   1128c:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   11290:	f010 0003 	ands.w	r0, r0, #3
   11294:	d131      	bne.n	112fa <gpiote_pin_int_cfg+0x11a>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   11296:	00aa      	lsls	r2, r5, #2
   11298:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1129c:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   112a0:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   112a4:	021b      	lsls	r3, r3, #8
   112a6:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   112aa:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
   112ae:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   112b2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
			nrf_gpiote_event_t evt =
   112b6:	f105 0340 	add.w	r3, r5, #64	; 0x40
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   112ba:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
   112be:	009b      	lsls	r3, r3, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   112c0:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   112c4:	b29b      	uxth	r3, r3
   112c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   112ca:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   112ce:	4331      	orrs	r1, r6
   112d0:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   112d4:	6018      	str	r0, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   112d6:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   112da:	f043 0301 	orr.w	r3, r3, #1
   112de:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   112e2:	2301      	movs	r3, #1
   112e4:	fa03 f505 	lsl.w	r5, r3, r5
    p_reg->INTENSET = mask;
   112e8:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
}
   112ec:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   112ee:	3001      	adds	r0, #1
   112f0:	2808      	cmp	r0, #8
   112f2:	d183      	bne.n	111fc <gpiote_pin_int_cfg+0x1c>
   112f4:	e79e      	b.n	11234 <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   112f6:	2103      	movs	r1, #3
   112f8:	e7c5      	b.n	11286 <gpiote_pin_int_cfg+0xa6>
   112fa:	3501      	adds	r5, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   112fc:	2d08      	cmp	r5, #8
   112fe:	d1c3      	bne.n	11288 <gpiote_pin_int_cfg+0xa8>
	return -ENODEV;
   11300:	f06f 0012 	mvn.w	r0, #18
   11304:	e7f2      	b.n	112ec <gpiote_pin_int_cfg+0x10c>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   11306:	6913      	ldr	r3, [r2, #16]
   11308:	69d2      	ldr	r2, [r2, #28]
   1130a:	4053      	eors	r3, r2
   1130c:	fa23 f101 	lsr.w	r1, r3, r1
		return NRF_GPIO_PIN_SENSE_HIGH;
   11310:	f011 0f01 	tst.w	r1, #1
   11314:	bf14      	ite	ne
   11316:	f44f 3200 	movne.w	r2, #131072	; 0x20000
   1131a:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1131e:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   11322:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11326:	4313      	orrs	r3, r2
   11328:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
   1132c:	e7de      	b.n	112ec <gpiote_pin_int_cfg+0x10c>
   1132e:	bf00      	nop
   11330:	40031000 	.word	0x40031000
   11334:	40842500 	.word	0x40842500

00011338 <gpio_nrfx_config>:
{
   11338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1133c:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   1133e:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   11340:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   11344:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   11348:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   1134a:	d040      	beq.n	113ce <gpio_nrfx_config+0x96>
   1134c:	dc09      	bgt.n	11362 <gpio_nrfx_config+0x2a>
   1134e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   11352:	d03e      	beq.n	113d2 <gpio_nrfx_config+0x9a>
   11354:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   11358:	d03d      	beq.n	113d6 <gpio_nrfx_config+0x9e>
   1135a:	b190      	cbz	r0, 11382 <gpio_nrfx_config+0x4a>
		return -EINVAL;
   1135c:	f06f 0015 	mvn.w	r0, #21
   11360:	e032      	b.n	113c8 <gpio_nrfx_config+0x90>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   11362:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   11366:	d038      	beq.n	113da <gpio_nrfx_config+0xa2>
   11368:	dc04      	bgt.n	11374 <gpio_nrfx_config+0x3c>
   1136a:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   1136e:	d1f5      	bne.n	1135c <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   11370:	2003      	movs	r0, #3
   11372:	e006      	b.n	11382 <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   11374:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   11378:	d031      	beq.n	113de <gpio_nrfx_config+0xa6>
   1137a:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   1137e:	d1ed      	bne.n	1135c <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
   11380:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   11382:	f406 7740 	and.w	r7, r6, #768	; 0x300
   11386:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   1138a:	d02a      	beq.n	113e2 <gpio_nrfx_config+0xaa>
		pull = NRF_GPIO_PIN_NOPULL;
   1138c:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   11390:	4263      	negs	r3, r4
   11392:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   11394:	2901      	cmp	r1, #1
		from_pin = pin;
   11396:	bf19      	ittee	ne
   11398:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
   1139a:	46a1      	movne	r9, r4
		to_pin   = 31U;
   1139c:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   113a0:	2400      	moveq	r4, #0
   113a2:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   113a6:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   113aa:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   113ae:	ea47 070c 	orr.w	r7, r7, ip
   113b2:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   113b6:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 11458 <gpio_nrfx_config+0x120>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   113ba:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   113be:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   113c2:	45a1      	cmp	r9, r4
   113c4:	d20f      	bcs.n	113e6 <gpio_nrfx_config+0xae>
	return 0;
   113c6:	2000      	movs	r0, #0
}
   113c8:	b003      	add	sp, #12
   113ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
   113ce:	2002      	movs	r0, #2
   113d0:	e7d7      	b.n	11382 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
   113d2:	2001      	movs	r0, #1
   113d4:	e7d5      	b.n	11382 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
   113d6:	2004      	movs	r0, #4
   113d8:	e7d3      	b.n	11382 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
   113da:	2005      	movs	r0, #5
   113dc:	e7d1      	b.n	11382 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
   113de:	2006      	movs	r0, #6
   113e0:	e7cf      	b.n	11382 <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
   113e2:	2303      	movs	r3, #3
   113e4:	e7d6      	b.n	11394 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
   113e6:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   113ea:	6892      	ldr	r2, [r2, #8]
   113ec:	7911      	ldrb	r1, [r2, #4]
   113ee:	f004 021f 	and.w	r2, r4, #31
   113f2:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   113f6:	3280      	adds	r2, #128	; 0x80
   113f8:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   113fc:	68a9      	ldr	r1, [r5, #8]
   113fe:	fa0b f204 	lsl.w	r2, fp, r4
   11402:	2b00      	cmp	r3, #0
   11404:	d025      	beq.n	11452 <gpio_nrfx_config+0x11a>
   11406:	4311      	orrs	r1, r2
   11408:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   1140a:	6969      	ldr	r1, [r5, #20]
   1140c:	06b0      	lsls	r0, r6, #26
   1140e:	bf4c      	ite	mi
   11410:	4311      	orrmi	r1, r2
   11412:	4391      	bicpl	r1, r2
   11414:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
   11416:	69a9      	ldr	r1, [r5, #24]
   11418:	0670      	lsls	r0, r6, #25
   1141a:	bf4c      	ite	mi
   1141c:	4311      	orrmi	r1, r2
   1141e:	4391      	bicpl	r1, r2
   11420:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
   11422:	6929      	ldr	r1, [r5, #16]
   11424:	0770      	lsls	r0, r6, #29
   11426:	bf4c      	ite	mi
   11428:	4311      	orrmi	r1, r2
   1142a:	4391      	bicpl	r1, r2
   1142c:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   1142e:	69e9      	ldr	r1, [r5, #28]
   11430:	0630      	lsls	r0, r6, #24
   11432:	bf4c      	ite	mi
   11434:	430a      	orrmi	r2, r1
   11436:	ea21 0202 	bicpl.w	r2, r1, r2
   1143a:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1143c:	4621      	mov	r1, r4
   1143e:	4640      	mov	r0, r8
   11440:	9301      	str	r3, [sp, #4]
   11442:	f7ff fecd 	bl	111e0 <gpiote_pin_int_cfg>
		if (res != 0) {
   11446:	2800      	cmp	r0, #0
   11448:	d1be      	bne.n	113c8 <gpio_nrfx_config+0x90>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1144a:	3401      	adds	r4, #1
   1144c:	b2e4      	uxtb	r4, r4
   1144e:	9b01      	ldr	r3, [sp, #4]
   11450:	e7b7      	b.n	113c2 <gpio_nrfx_config+0x8a>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   11452:	ea21 0102 	bic.w	r1, r1, r2
   11456:	e7d7      	b.n	11408 <gpio_nrfx_config+0xd0>
   11458:	40842500 	.word	0x40842500

0001145c <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1145c:	494f      	ldr	r1, [pc, #316]	; (1159c <gpiote_event_handler+0x140>)
{
   1145e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11462:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
   11464:	2d00      	cmp	r5, #0
   11466:	d060      	beq.n	1152a <gpiote_event_handler+0xce>
	struct gpio_nrfx_data *data = get_port_data(port);
   11468:	4b4d      	ldr	r3, [pc, #308]	; (115a0 <gpiote_event_handler+0x144>)
	u32_t pin = 0U;
   1146a:	2600      	movs	r6, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   1146c:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
   1146e:	681b      	ldr	r3, [r3, #0]
   11470:	f8df e138 	ldr.w	lr, [pc, #312]	; 115ac <gpiote_event_handler+0x150>
   11474:	689f      	ldr	r7, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   11476:	e9d2 0302 	ldrd	r0, r3, [r2, #8]
   1147a:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
   1147c:	e9d2 0405 	ldrd	r0, r4, [r2, #20]
   11480:	4320      	orrs	r0, r4
   11482:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   11486:	6838      	ldr	r0, [r7, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   11488:	69d4      	ldr	r4, [r2, #28]
   1148a:	6912      	ldr	r2, [r2, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   1148c:	6900      	ldr	r0, [r0, #16]
   1148e:	4054      	eors	r4, r2
   11490:	4044      	eors	r4, r0
	u32_t bit = 1U << pin;
   11492:	2001      	movs	r0, #1
	u32_t out = pin_states & level_pins;
   11494:	ea23 0404 	bic.w	r4, r3, r4
	while (level_pins) {
   11498:	bb93      	cbnz	r3, 11500 <gpiote_event_handler+0xa4>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1149a:	600b      	str	r3, [r1, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   1149c:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1149e:	2001      	movs	r0, #1
   114a0:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   114a2:	4940      	ldr	r1, [pc, #256]	; (115a4 <gpiote_event_handler+0x148>)
   114a4:	4e40      	ldr	r6, [pc, #256]	; (115a8 <gpiote_event_handler+0x14c>)
   114a6:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   114aa:	fa00 fc03 	lsl.w	ip, r0, r3
   114ae:	ea1c 0f02 	tst.w	ip, r2
   114b2:	d00d      	beq.n	114d0 <gpiote_event_handler+0x74>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   114b4:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   114b8:	b152      	cbz	r2, 114d0 <gpiote_event_handler+0x74>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   114ba:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   114be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   114c2:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   114c6:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   114ca:	fa00 f202 	lsl.w	r2, r0, r2
   114ce:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   114d0:	3301      	adds	r3, #1
   114d2:	2b08      	cmp	r3, #8
   114d4:	d1e7      	bne.n	114a6 <gpiote_event_handler+0x4a>
	if (fired_triggers[0]) {
   114d6:	bb54      	cbnz	r4, 1152e <gpiote_event_handler+0xd2>
	if (port_event) {
   114d8:	b185      	cbz	r5, 114fc <gpiote_event_handler+0xa0>
	u32_t bit = 1U << pin;
   114da:	2401      	movs	r4, #1
	u32_t pin = 0U;
   114dc:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   114de:	4b30      	ldr	r3, [pc, #192]	; (115a0 <gpiote_event_handler+0x144>)
   114e0:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 115ac <gpiote_event_handler+0x150>
   114e4:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
   114e6:	681b      	ldr	r3, [r3, #0]
   114e8:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   114ea:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
   114ee:	400b      	ands	r3, r1
	out &= ~data->trig_edge & ~data->double_edge;
   114f0:	e9d2 1005 	ldrd	r1, r0, [r2, #20]
   114f4:	4301      	orrs	r1, r0
   114f6:	ea23 0301 	bic.w	r3, r3, r1
	while (level_pins) {
   114fa:	bb7b      	cbnz	r3, 1155c <gpiote_event_handler+0x100>
}
   114fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   11500:	4203      	tst	r3, r0
   11502:	d00f      	beq.n	11524 <gpiote_event_handler+0xc8>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11504:	f897 c004 	ldrb.w	ip, [r7, #4]
   11508:	f006 021f 	and.w	r2, r6, #31
   1150c:	ea42 124c 	orr.w	r2, r2, ip, lsl #5
   11510:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   11514:	f8d2 c200 	ldr.w	ip, [r2, #512]	; 0x200
			level_pins &= ~bit;
   11518:	ea23 0300 	bic.w	r3, r3, r0
   1151c:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11520:	f8c2 c200 	str.w	ip, [r2, #512]	; 0x200
		++pin;
   11524:	3601      	adds	r6, #1
		bit <<= 1;
   11526:	0040      	lsls	r0, r0, #1
   11528:	e7b6      	b.n	11498 <gpiote_event_handler+0x3c>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   1152a:	462c      	mov	r4, r5
   1152c:	e7b6      	b.n	1149c <gpiote_event_handler+0x40>
	struct gpio_nrfx_data *data = get_port_data(port);
   1152e:	4f1c      	ldr	r7, [pc, #112]	; (115a0 <gpiote_event_handler+0x144>)
   11530:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   11534:	f8d8 1000 	ldr.w	r1, [r8]
   11538:	2900      	cmp	r1, #0
   1153a:	d0cd      	beq.n	114d8 <gpiote_event_handler+0x7c>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1153c:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
   1153e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   11542:	688a      	ldr	r2, [r1, #8]
   11544:	4023      	ands	r3, r4
   11546:	4213      	tst	r3, r2
   11548:	d003      	beq.n	11552 <gpiote_event_handler+0xf6>
			cb->handler(port, cb, pins);
   1154a:	684b      	ldr	r3, [r1, #4]
   1154c:	4622      	mov	r2, r4
   1154e:	4638      	mov	r0, r7
   11550:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   11552:	2e00      	cmp	r6, #0
   11554:	d0c0      	beq.n	114d8 <gpiote_event_handler+0x7c>
   11556:	4631      	mov	r1, r6
   11558:	6836      	ldr	r6, [r6, #0]
   1155a:	e7f0      	b.n	1153e <gpiote_event_handler+0xe2>
		if (level_pins & bit) {
   1155c:	421c      	tst	r4, r3
   1155e:	d01a      	beq.n	11596 <gpiote_event_handler+0x13a>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11560:	7930      	ldrb	r0, [r6, #4]
   11562:	f005 011f 	and.w	r1, r5, #31
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   11566:	69d7      	ldr	r7, [r2, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11568:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   1156c:	6910      	ldr	r0, [r2, #16]
   1156e:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
   11572:	4078      	eors	r0, r7
   11574:	40e8      	lsrs	r0, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   11576:	f010 0f01 	tst.w	r0, #1
   1157a:	bf14      	ite	ne
   1157c:	f44f 3700 	movne.w	r7, #131072	; 0x20000
   11580:	f44f 3740 	moveq.w	r7, #196608	; 0x30000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   11584:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
			level_pins &= ~bit;
   11588:	ea23 0304 	bic.w	r3, r3, r4
   1158c:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11590:	4338      	orrs	r0, r7
   11592:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
		++pin;
   11596:	3501      	adds	r5, #1
		bit <<= 1;
   11598:	0064      	lsls	r4, r4, #1
   1159a:	e7ae      	b.n	114fa <gpiote_event_handler+0x9e>
   1159c:	4003117c 	.word	0x4003117c
   115a0:	2002c608 	.word	0x2002c608
   115a4:	40031000 	.word	0x40031000
   115a8:	40031100 	.word	0x40031100
   115ac:	40842500 	.word	0x40842500

000115b0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   115b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   115b2:	794b      	ldrb	r3, [r1, #5]
   115b4:	2b01      	cmp	r3, #1
   115b6:	d029      	beq.n	1160c <uarte_nrfx_configure+0x5c>
   115b8:	2b03      	cmp	r3, #3
   115ba:	d124      	bne.n	11606 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   115bc:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   115be:	798b      	ldrb	r3, [r1, #6]
   115c0:	2b03      	cmp	r3, #3
   115c2:	d120      	bne.n	11606 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   115c4:	79cc      	ldrb	r4, [r1, #7]
   115c6:	b12c      	cbz	r4, 115d4 <uarte_nrfx_configure+0x24>
   115c8:	2c01      	cmp	r4, #1
   115ca:	d11c      	bne.n	11606 <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
   115cc:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   115ce:	689b      	ldr	r3, [r3, #8]
   115d0:	791b      	ldrb	r3, [r3, #4]
   115d2:	b1c3      	cbz	r3, 11606 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   115d4:	790a      	ldrb	r2, [r1, #4]
   115d6:	b112      	cbz	r2, 115de <uarte_nrfx_configure+0x2e>
   115d8:	2a02      	cmp	r2, #2
   115da:	d114      	bne.n	11606 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   115dc:	220e      	movs	r2, #14
	switch (baudrate) {
   115de:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
   115e2:	6805      	ldr	r5, [r0, #0]
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   115e4:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   115e6:	68ad      	ldr	r5, [r5, #8]
	switch (baudrate) {
   115e8:	42bb      	cmp	r3, r7
	return config->uarte_regs;
   115ea:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   115ec:	d062      	beq.n	116b4 <uarte_nrfx_configure+0x104>
   115ee:	d829      	bhi.n	11644 <uarte_nrfx_configure+0x94>
   115f0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   115f4:	d061      	beq.n	116ba <uarte_nrfx_configure+0x10a>
   115f6:	d814      	bhi.n	11622 <uarte_nrfx_configure+0x72>
   115f8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   115fc:	d05f      	beq.n	116be <uarte_nrfx_configure+0x10e>
   115fe:	d807      	bhi.n	11610 <uarte_nrfx_configure+0x60>
   11600:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   11604:	d05e      	beq.n	116c4 <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
   11606:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1160a:	e052      	b.n	116b2 <uarte_nrfx_configure+0x102>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   1160c:	2600      	movs	r6, #0
   1160e:	e7d6      	b.n	115be <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   11610:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   11614:	d059      	beq.n	116ca <uarte_nrfx_configure+0x11a>
   11616:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1161a:	d1f4      	bne.n	11606 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1161c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   11620:	e03c      	b.n	1169c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   11622:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   11626:	d053      	beq.n	116d0 <uarte_nrfx_configure+0x120>
   11628:	d804      	bhi.n	11634 <uarte_nrfx_configure+0x84>
   1162a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1162e:	d1ea      	bne.n	11606 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   11630:	4b32      	ldr	r3, [pc, #200]	; (116fc <uarte_nrfx_configure+0x14c>)
   11632:	e033      	b.n	1169c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   11634:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   11638:	d04c      	beq.n	116d4 <uarte_nrfx_configure+0x124>
   1163a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1163e:	d1e2      	bne.n	11606 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   11640:	4b2f      	ldr	r3, [pc, #188]	; (11700 <uarte_nrfx_configure+0x150>)
   11642:	e02b      	b.n	1169c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   11644:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   11648:	d046      	beq.n	116d8 <uarte_nrfx_configure+0x128>
   1164a:	d812      	bhi.n	11672 <uarte_nrfx_configure+0xc2>
   1164c:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   11650:	42bb      	cmp	r3, r7
   11652:	d044      	beq.n	116de <uarte_nrfx_configure+0x12e>
   11654:	d805      	bhi.n	11662 <uarte_nrfx_configure+0xb2>
   11656:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   1165a:	d1d4      	bne.n	11606 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1165c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   11660:	e01c      	b.n	1169c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   11662:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   11666:	d03d      	beq.n	116e4 <uarte_nrfx_configure+0x134>
   11668:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1166c:	d1cb      	bne.n	11606 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1166e:	4b25      	ldr	r3, [pc, #148]	; (11704 <uarte_nrfx_configure+0x154>)
   11670:	e014      	b.n	1169c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   11672:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   11676:	d038      	beq.n	116ea <uarte_nrfx_configure+0x13a>
   11678:	d808      	bhi.n	1168c <uarte_nrfx_configure+0xdc>
   1167a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1167e:	d037      	beq.n	116f0 <uarte_nrfx_configure+0x140>
   11680:	4f21      	ldr	r7, [pc, #132]	; (11708 <uarte_nrfx_configure+0x158>)
   11682:	42bb      	cmp	r3, r7
   11684:	d1bf      	bne.n	11606 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   11686:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1168a:	e007      	b.n	1169c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1168c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   11690:	d031      	beq.n	116f6 <uarte_nrfx_configure+0x146>
   11692:	4f1e      	ldr	r7, [pc, #120]	; (1170c <uarte_nrfx_configure+0x15c>)
   11694:	42bb      	cmp	r3, r7
   11696:	d1b6      	bne.n	11606 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   11698:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1169c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   116a0:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   116a2:	6883      	ldr	r3, [r0, #8]
   116a4:	4322      	orrs	r2, r4
   116a6:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   116a8:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   116ac:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   116b0:	2000      	movs	r0, #0
}
   116b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   116b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   116b8:	e7f0      	b.n	1169c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   116ba:	4b15      	ldr	r3, [pc, #84]	; (11710 <uarte_nrfx_configure+0x160>)
   116bc:	e7ee      	b.n	1169c <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00027000;
   116be:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   116c2:	e7eb      	b.n	1169c <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
   116c4:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   116c8:	e7e8      	b.n	1169c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   116ca:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   116ce:	e7e5      	b.n	1169c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   116d0:	4b10      	ldr	r3, [pc, #64]	; (11714 <uarte_nrfx_configure+0x164>)
   116d2:	e7e3      	b.n	1169c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   116d4:	4b10      	ldr	r3, [pc, #64]	; (11718 <uarte_nrfx_configure+0x168>)
   116d6:	e7e1      	b.n	1169c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   116d8:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   116dc:	e7de      	b.n	1169c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   116de:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   116e2:	e7db      	b.n	1169c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   116e4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   116e8:	e7d8      	b.n	1169c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   116ea:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   116ee:	e7d5      	b.n	1169c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   116f0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   116f4:	e7d2      	b.n	1169c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   116f6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   116fa:	e7cf      	b.n	1169c <uarte_nrfx_configure+0xec>
   116fc:	00275000 	.word	0x00275000
   11700:	0075c000 	.word	0x0075c000
   11704:	013a9000 	.word	0x013a9000
   11708:	0003d090 	.word	0x0003d090
   1170c:	000f4240 	.word	0x000f4240
   11710:	0013b000 	.word	0x0013b000
   11714:	003af000 	.word	0x003af000
   11718:	004ea000 	.word	0x004ea000

0001171c <uarte_instance_init.constprop.4>:
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(struct device *dev,
   1171c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11720:	2501      	movs	r5, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11722:	f04f 0e03 	mov.w	lr, #3
   11726:	f04f 0c00 	mov.w	ip, #0
	return dev->config->config_info;
   1172a:	6803      	ldr	r3, [r0, #0]
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_gpio_pin_write(config->pseltxd, 1);
   1172c:	680a      	ldr	r2, [r1, #0]
	return config->uarte_regs;
   1172e:	689b      	ldr	r3, [r3, #8]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11730:	fa05 f702 	lsl.w	r7, r5, r2
   11734:	681c      	ldr	r4, [r3, #0]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   11736:	4b1f      	ldr	r3, [pc, #124]	; (117b4 <uarte_instance_init.constprop.4+0x98>)
	struct uarte_nrfx_data *data = get_dev_data(dev);
   11738:	6886      	ldr	r6, [r0, #8]
   1173a:	609f      	str	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1173c:	f102 0780 	add.w	r7, r2, #128	; 0x80
   11740:	f843 e027 	str.w	lr, [r3, r7, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
   11744:	684f      	ldr	r7, [r1, #4]
   11746:	f107 0880 	add.w	r8, r7, #128	; 0x80
   1174a:	f843 c028 	str.w	ip, [r3, r8, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   1174e:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   11752:	f8c4 7514 	str.w	r7, [r4, #1300]	; 0x514

	nrf_uarte_txrx_pins_set(uarte,
				config->pseltxd,
				config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   11756:	688f      	ldr	r7, [r1, #8]
   11758:	1c7a      	adds	r2, r7, #1
   1175a:	d010      	beq.n	1177e <uarte_instance_init.constprop.4+0x62>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1175c:	68ca      	ldr	r2, [r1, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   1175e:	1c51      	adds	r1, r2, #1
   11760:	d00d      	beq.n	1177e <uarte_instance_init.constprop.4+0x62>
   11762:	f102 0180 	add.w	r1, r2, #128	; 0x80
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11766:	4095      	lsls	r5, r2
    p_reg->OUTSET = set_mask;
   11768:	609d      	str	r5, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1176a:	f843 e021 	str.w	lr, [r3, r1, lsl #2]
   1176e:	f107 0180 	add.w	r1, r7, #128	; 0x80
   11772:	f843 c021 	str.w	ip, [r3, r1, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   11776:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1177a:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
		nrf_uarte_hwfc_pins_set(uarte,
					config->pselrts,
					config->pselcts);
	}

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1177e:	4631      	mov	r1, r6
   11780:	f7ff ff16 	bl	115b0 <uarte_nrfx_configure>
	if (err) {
   11784:	b9a0      	cbnz	r0, 117b0 <uarte_instance_init.constprop.4+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   11786:	2308      	movs	r3, #8
   11788:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1178c:	f106 030c 	add.w	r3, r6, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11790:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   11794:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   11798:	2301      	movs	r3, #1
		/* Set ENDTX event by requesting fake (zero-length) transfer.
		 * Pointer to RAM variable (data->tx_buffer) is set because
		 * otherwise such operation may result in HardFault or RAM
		 * corruption.
		 */
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   1179a:	68b2      	ldr	r2, [r6, #8]
   1179c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   117a0:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   117a2:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   117a4:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   117a8:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   117ac:	60a3      	str	r3, [r4, #8]
   117ae:	60e3      	str	r3, [r4, #12]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
   117b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   117b4:	40842500 	.word	0x40842500

000117b8 <uarte_2_init>:
	#if defined(DT_NORDIC_NRF_UARTE_UART_2_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_2_CTS_PIN)
		#define UARTE_2_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(2);
   117b8:	b530      	push	{r4, r5, lr}
   117ba:	b085      	sub	sp, #20
   117bc:	466c      	mov	r4, sp
   117be:	4605      	mov	r5, r0
   117c0:	4b08      	ldr	r3, [pc, #32]	; (117e4 <uarte_2_init+0x2c>)
   117c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   117c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   117c8:	2200      	movs	r2, #0
   117ca:	2101      	movs	r1, #1
   117cc:	200a      	movs	r0, #10
   117ce:	f7fe f899 	bl	f904 <z_arm_irq_priority_set>
   117d2:	200a      	movs	r0, #10
   117d4:	f7fe f886 	bl	f8e4 <arch_irq_enable>
   117d8:	4621      	mov	r1, r4
   117da:	4628      	mov	r0, r5
   117dc:	f7ff ff9e 	bl	1171c <uarte_instance_init.constprop.4>
   117e0:	b005      	add	sp, #20
   117e2:	bd30      	pop	{r4, r5, pc}
   117e4:	0001f428 	.word	0x0001f428

000117e8 <uarte_0_init>:
	UART_NRF_UARTE_DEVICE(0);
   117e8:	b530      	push	{r4, r5, lr}
   117ea:	b085      	sub	sp, #20
   117ec:	466c      	mov	r4, sp
   117ee:	4605      	mov	r5, r0
   117f0:	4b08      	ldr	r3, [pc, #32]	; (11814 <uarte_0_init+0x2c>)
   117f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   117f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   117f8:	2200      	movs	r2, #0
   117fa:	2101      	movs	r1, #1
   117fc:	2008      	movs	r0, #8
   117fe:	f7fe f881 	bl	f904 <z_arm_irq_priority_set>
   11802:	2008      	movs	r0, #8
   11804:	f7fe f86e 	bl	f8e4 <arch_irq_enable>
   11808:	4621      	mov	r1, r4
   1180a:	4628      	mov	r0, r5
   1180c:	f7ff ff86 	bl	1171c <uarte_instance_init.constprop.4>
   11810:	b005      	add	sp, #20
   11812:	bd30      	pop	{r4, r5, pc}
   11814:	0001f438 	.word	0x0001f438

00011818 <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   11818:	2200      	movs	r2, #0
{
   1181a:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   1181c:	4611      	mov	r1, r2
   1181e:	202a      	movs	r0, #42	; 0x2a
   11820:	f7fe f870 	bl	f904 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
   11824:	f003 f90c 	bl	14a40 <bsd_init>
   11828:	4b01      	ldr	r3, [pc, #4]	; (11830 <_bsdlib_init+0x18>)
   1182a:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   1182c:	2000      	movs	r0, #0
   1182e:	bd08      	pop	{r3, pc}
   11830:	2002039c 	.word	0x2002039c

00011834 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   11834:	b570      	push	{r4, r5, r6, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   11836:	4b0d      	ldr	r3, [pc, #52]	; (1186c <thread_monitor_entry_get+0x38>)
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   11838:	4c0d      	ldr	r4, [pc, #52]	; (11870 <thread_monitor_entry_get+0x3c>)
		entry_age = rpc_event_cnt - entry->cnt;
   1183a:	681a      	ldr	r2, [r3, #0]
   1183c:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   1183e:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   11840:	4623      	mov	r3, r4
		if (entry->id == id) {
   11842:	6819      	ldr	r1, [r3, #0]
   11844:	4281      	cmp	r1, r0
   11846:	d00e      	beq.n	11866 <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   11848:	b151      	cbz	r1, 11860 <thread_monitor_entry_get+0x2c>
		entry_age = rpc_event_cnt - entry->cnt;
   1184a:	6859      	ldr	r1, [r3, #4]
   1184c:	1a51      	subs	r1, r2, r1
		if (entry_age > oldest_entry_age) {
   1184e:	42b1      	cmp	r1, r6
   11850:	bfc4      	itt	gt
   11852:	461c      	movgt	r4, r3
   11854:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   11856:	3d01      	subs	r5, #1
   11858:	f103 0308 	add.w	r3, r3, #8
   1185c:	d1f1      	bne.n	11842 <thread_monitor_entry_get+0xe>
   1185e:	4623      	mov	r3, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   11860:	3a01      	subs	r2, #1
	new_entry->id = id;
   11862:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   11864:	605a      	str	r2, [r3, #4]

	return new_entry;
}
   11866:	4618      	mov	r0, r3
   11868:	bd70      	pop	{r4, r5, r6, pc}
   1186a:	bf00      	nop
   1186c:	200203a0 	.word	0x200203a0
   11870:	200203ac 	.word	0x200203ac

00011874 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   11874:	4668      	mov	r0, sp
   11876:	f020 0107 	bic.w	r1, r0, #7
   1187a:	468d      	mov	sp, r1
   1187c:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1187e:	4b0d      	ldr	r3, [pc, #52]	; (118b4 <rpc_proxy_irq_handler+0x40>)
   11880:	e8d3 2fef 	ldaex	r2, [r3]
   11884:	3201      	adds	r2, #1
   11886:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1188a:	2900      	cmp	r1, #0
   1188c:	d1f8      	bne.n	11880 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   1188e:	f007 fb0b 	bl	18ea8 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   11892:	4b09      	ldr	r3, [pc, #36]	; (118b8 <rpc_proxy_irq_handler+0x44>)
   11894:	681c      	ldr	r4, [r3, #0]
   11896:	b93c      	cbnz	r4, 118a8 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   11898:	f7fe f84c 	bl	f934 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   1189c:	f7fd ff8c 	bl	f7b8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   118a0:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   118a4:	4685      	mov	sp, r0
   118a6:	4770      	bx	lr
	z_impl_k_sem_give(sem);
   118a8:	1d20      	adds	r0, r4, #4
   118aa:	f00a fa2f 	bl	1bd0c <z_impl_k_sem_give>
   118ae:	6824      	ldr	r4, [r4, #0]
	return node->next;
   118b0:	e7f1      	b.n	11896 <rpc_proxy_irq_handler+0x22>
   118b2:	bf00      	nop
   118b4:	200203a0 	.word	0x200203a0
   118b8:	200203a4 	.word	0x200203a4

000118bc <bsd_os_timedwait>:
{
   118bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118c0:	4688      	mov	r8, r1
   118c2:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
   118c4:	f00d faa7 	bl	1ee16 <z_impl_k_uptime_get>
	if (*timeout == 0) {
   118c8:	f8d8 3000 	ldr.w	r3, [r8]
   118cc:	4606      	mov	r6, r0
   118ce:	2b00      	cmp	r3, #0
   118d0:	460f      	mov	r7, r1
   118d2:	d103      	bne.n	118dc <bsd_os_timedwait+0x20>
	z_impl_k_yield();
   118d4:	f00a f9a0 	bl	1bc18 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   118d8:	203c      	movs	r0, #60	; 0x3c
   118da:	e06e      	b.n	119ba <bsd_os_timedwait+0xfe>
		*timeout = K_FOREVER;
   118dc:	bfbc      	itt	lt
   118de:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   118e2:	f8c8 3000 	strlt.w	r3, [r8]
	z_impl_k_sem_init(sem, initial_count, limit);
   118e6:	2201      	movs	r2, #1
   118e8:	2100      	movs	r1, #0
   118ea:	a802      	add	r0, sp, #8
   118ec:	f00d f9f8 	bl	1ece0 <z_impl_k_sem_init>
   118f0:	f10d 0a04 	add.w	sl, sp, #4
   118f4:	f04f 0320 	mov.w	r3, #32
   118f8:	f3ef 8b11 	mrs	fp, BASEPRI
   118fc:	f383 8811 	msr	BASEPRI, r3
   11900:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   11904:	f00a f9fc 	bl	1bd00 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   11908:	f7ff ff94 	bl	11834 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   1190c:	4933      	ldr	r1, [pc, #204]	; (119dc <bsd_os_timedwait+0x120>)
   1190e:	6843      	ldr	r3, [r0, #4]
   11910:	680a      	ldr	r2, [r1, #0]
   11912:	4689      	mov	r9, r1
   11914:	4293      	cmp	r3, r2
   11916:	f04f 0300 	mov.w	r3, #0
   1191a:	d108      	bne.n	1192e <bsd_os_timedwait+0x72>
	parent->next = child;
   1191c:	9301      	str	r3, [sp, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1191e:	4b30      	ldr	r3, [pc, #192]	; (119e0 <bsd_os_timedwait+0x124>)
   11920:	685a      	ldr	r2, [r3, #4]
   11922:	2a00      	cmp	r2, #0
   11924:	d14c      	bne.n	119c0 <bsd_os_timedwait+0x104>
	list->head = node;
   11926:	e9c3 aa00 	strd	sl, sl, [r3]
		allow_to_sleep = true;
   1192a:	2301      	movs	r3, #1
   1192c:	e000      	b.n	11930 <bsd_os_timedwait+0x74>
	entry->cnt = rpc_event_cnt;
   1192e:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   11930:	f38b 8811 	msr	BASEPRI, fp
   11934:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   11938:	2b00      	cmp	r3, #0
   1193a:	d03d      	beq.n	119b8 <bsd_os_timedwait+0xfc>
	(void)k_sem_take(&thread.sem, *timeout);
   1193c:	f8d8 1000 	ldr.w	r1, [r8]
	return z_impl_k_sem_take(sem, timeout);
   11940:	a802      	add	r0, sp, #8
   11942:	f00a fa0f 	bl	1bd64 <z_impl_k_sem_take>
	__asm__ volatile(
   11946:	f04f 0320 	mov.w	r3, #32
   1194a:	f3ef 8b11 	mrs	fp, BASEPRI
   1194e:	f383 8811 	msr	BASEPRI, r3
   11952:	f3bf 8f6f 	isb	sy
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11956:	2000      	movs	r0, #0
   11958:	4b21      	ldr	r3, [pc, #132]	; (119e0 <bsd_os_timedwait+0x124>)
   1195a:	681a      	ldr	r2, [r3, #0]
   1195c:	b152      	cbz	r2, 11974 <bsd_os_timedwait+0xb8>
   1195e:	4552      	cmp	r2, sl
   11960:	d139      	bne.n	119d6 <bsd_os_timedwait+0x11a>
Z_GENLIST_REMOVE(slist, snode)
   11962:	9901      	ldr	r1, [sp, #4]
   11964:	bb88      	cbnz	r0, 119ca <bsd_os_timedwait+0x10e>
   11966:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   11968:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1196a:	4290      	cmp	r0, r2
   1196c:	d100      	bne.n	11970 <bsd_os_timedwait+0xb4>
	list->tail = node;
   1196e:	6059      	str	r1, [r3, #4]
	parent->next = child;
   11970:	2300      	movs	r3, #0
   11972:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   11974:	f00a f9c4 	bl	1bd00 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   11978:	f7ff ff5c 	bl	11834 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   1197c:	f8d9 3000 	ldr.w	r3, [r9]
   11980:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   11982:	f38b 8811 	msr	BASEPRI, fp
   11986:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
   1198a:	f8d8 9000 	ldr.w	r9, [r8]
   1198e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   11992:	d011      	beq.n	119b8 <bsd_os_timedwait+0xfc>
	return z_impl_k_uptime_get();
   11994:	f00d fa3f 	bl	1ee16 <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
   11998:	eb16 0209 	adds.w	r2, r6, r9
   1199c:	eb47 73e9 	adc.w	r3, r7, r9, asr #31
   119a0:	1a14      	subs	r4, r2, r0
   119a2:	eb63 0501 	sbc.w	r5, r3, r1
	*timeout = remaining > 0 ? remaining : 0;
   119a6:	2c00      	cmp	r4, #0
   119a8:	f175 0300 	sbcs.w	r3, r5, #0
   119ac:	bfb8      	it	lt
   119ae:	2400      	movlt	r4, #0
   119b0:	f8c8 4000 	str.w	r4, [r8]
	if (*timeout == 0) {
   119b4:	2c00      	cmp	r4, #0
   119b6:	d08f      	beq.n	118d8 <bsd_os_timedwait+0x1c>
	return 0;
   119b8:	2000      	movs	r0, #0
}
   119ba:	b009      	add	sp, #36	; 0x24
   119bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119c0:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   119c4:	f8c3 a004 	str.w	sl, [r3, #4]
   119c8:	e7af      	b.n	1192a <bsd_os_timedwait+0x6e>
	parent->next = child;
   119ca:	6001      	str	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   119cc:	6859      	ldr	r1, [r3, #4]
   119ce:	4291      	cmp	r1, r2
	list->tail = node;
   119d0:	bf08      	it	eq
   119d2:	6058      	streq	r0, [r3, #4]
   119d4:	e7cc      	b.n	11970 <bsd_os_timedwait+0xb4>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   119d6:	4610      	mov	r0, r2
   119d8:	6812      	ldr	r2, [r2, #0]
   119da:	e7bf      	b.n	1195c <bsd_os_timedwait+0xa0>
   119dc:	200203a0 	.word	0x200203a0
   119e0:	200203a4 	.word	0x200203a4

000119e4 <bsd_os_errno_set>:
	switch (err_code) {
   119e4:	282d      	cmp	r0, #45	; 0x2d
{
   119e6:	b510      	push	{r4, lr}
   119e8:	4604      	mov	r4, r0
	switch (err_code) {
   119ea:	d00c      	beq.n	11a06 <bsd_os_errno_set+0x22>
   119ec:	dc38      	bgt.n	11a60 <bsd_os_errno_set+0x7c>
   119ee:	280e      	cmp	r0, #14
   119f0:	d009      	beq.n	11a06 <bsd_os_errno_set+0x22>
   119f2:	dc11      	bgt.n	11a18 <bsd_os_errno_set+0x34>
   119f4:	2808      	cmp	r0, #8
   119f6:	d006      	beq.n	11a06 <bsd_os_errno_set+0x22>
   119f8:	dc09      	bgt.n	11a0e <bsd_os_errno_set+0x2a>
   119fa:	2802      	cmp	r0, #2
   119fc:	d003      	beq.n	11a06 <bsd_os_errno_set+0x22>
   119fe:	2805      	cmp	r0, #5
   11a00:	d001      	beq.n	11a06 <bsd_os_errno_set+0x22>
   11a02:	2801      	cmp	r0, #1
   11a04:	d119      	bne.n	11a3a <bsd_os_errno_set+0x56>
		errno = ETIMEDOUT;
   11a06:	f00c f9c9 	bl	1dd9c <z_errno>
   11a0a:	6004      	str	r4, [r0, #0]
}
   11a0c:	bd10      	pop	{r4, pc}
	switch (err_code) {
   11a0e:	280c      	cmp	r0, #12
   11a10:	d0f9      	beq.n	11a06 <bsd_os_errno_set+0x22>
   11a12:	dc57      	bgt.n	11ac4 <bsd_os_errno_set+0xe0>
   11a14:	2809      	cmp	r0, #9
   11a16:	e7f5      	b.n	11a04 <bsd_os_errno_set+0x20>
   11a18:	2828      	cmp	r0, #40	; 0x28
   11a1a:	f000 8083 	beq.w	11b24 <bsd_os_errno_set+0x140>
   11a1e:	dc05      	bgt.n	11a2c <bsd_os_errno_set+0x48>
   11a20:	2818      	cmp	r0, #24
   11a22:	d0f0      	beq.n	11a06 <bsd_os_errno_set+0x22>
   11a24:	2823      	cmp	r0, #35	; 0x23
   11a26:	d052      	beq.n	11ace <bsd_os_errno_set+0xea>
   11a28:	2816      	cmp	r0, #22
   11a2a:	e7eb      	b.n	11a04 <bsd_os_errno_set+0x20>
   11a2c:	282a      	cmp	r0, #42	; 0x2a
   11a2e:	d0ea      	beq.n	11a06 <bsd_os_errno_set+0x22>
   11a30:	db51      	blt.n	11ad6 <bsd_os_errno_set+0xf2>
   11a32:	282b      	cmp	r0, #43	; 0x2b
   11a34:	d0e7      	beq.n	11a06 <bsd_os_errno_set+0x22>
   11a36:	282c      	cmp	r0, #44	; 0x2c
   11a38:	d051      	beq.n	11ade <bsd_os_errno_set+0xfa>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   11a3a:	2301      	movs	r3, #1
   11a3c:	f04f 0200 	mov.w	r2, #0
   11a40:	493a      	ldr	r1, [pc, #232]	; (11b2c <bsd_os_errno_set+0x148>)
   11a42:	f363 0207 	bfi	r2, r3, #0, #8
   11a46:	4b3a      	ldr	r3, [pc, #232]	; (11b30 <bsd_os_errno_set+0x14c>)
   11a48:	483a      	ldr	r0, [pc, #232]	; (11b34 <bsd_os_errno_set+0x150>)
   11a4a:	1a5b      	subs	r3, r3, r1
   11a4c:	08db      	lsrs	r3, r3, #3
   11a4e:	f363 128f 	bfi	r2, r3, #6, #10
   11a52:	4621      	mov	r1, r4
   11a54:	f00b f8a6 	bl	1cba4 <log_1>
		errno = 0xBAADBAAD;
   11a58:	f00c f9a0 	bl	1dd9c <z_errno>
   11a5c:	4b36      	ldr	r3, [pc, #216]	; (11b38 <bsd_os_errno_set+0x154>)
   11a5e:	e034      	b.n	11aca <bsd_os_errno_set+0xe6>
	switch (err_code) {
   11a60:	283c      	cmp	r0, #60	; 0x3c
   11a62:	d0d0      	beq.n	11a06 <bsd_os_errno_set+0x22>
   11a64:	dc15      	bgt.n	11a92 <bsd_os_errno_set+0xae>
   11a66:	2833      	cmp	r0, #51	; 0x33
   11a68:	d0cd      	beq.n	11a06 <bsd_os_errno_set+0x22>
   11a6a:	dc05      	bgt.n	11a78 <bsd_os_errno_set+0x94>
   11a6c:	2830      	cmp	r0, #48	; 0x30
   11a6e:	d0ca      	beq.n	11a06 <bsd_os_errno_set+0x22>
   11a70:	2832      	cmp	r0, #50	; 0x32
   11a72:	d038      	beq.n	11ae6 <bsd_os_errno_set+0x102>
   11a74:	282f      	cmp	r0, #47	; 0x2f
   11a76:	e7c5      	b.n	11a04 <bsd_os_errno_set+0x20>
   11a78:	2836      	cmp	r0, #54	; 0x36
   11a7a:	d0c4      	beq.n	11a06 <bsd_os_errno_set+0x22>
   11a7c:	dc01      	bgt.n	11a82 <bsd_os_errno_set+0x9e>
   11a7e:	2834      	cmp	r0, #52	; 0x34
   11a80:	e7c0      	b.n	11a04 <bsd_os_errno_set+0x20>
   11a82:	2838      	cmp	r0, #56	; 0x38
   11a84:	d0bf      	beq.n	11a06 <bsd_os_errno_set+0x22>
   11a86:	2839      	cmp	r0, #57	; 0x39
   11a88:	d1d7      	bne.n	11a3a <bsd_os_errno_set+0x56>
		errno = ENOTCONN;
   11a8a:	f00c f987 	bl	1dd9c <z_errno>
   11a8e:	2339      	movs	r3, #57	; 0x39
   11a90:	e01b      	b.n	11aca <bsd_os_errno_set+0xe6>
	switch (err_code) {
   11a92:	287d      	cmp	r0, #125	; 0x7d
   11a94:	d033      	beq.n	11afe <bsd_os_errno_set+0x11a>
   11a96:	dc09      	bgt.n	11aac <bsd_os_errno_set+0xc8>
   11a98:	2870      	cmp	r0, #112	; 0x70
   11a9a:	d028      	beq.n	11aee <bsd_os_errno_set+0x10a>
   11a9c:	2873      	cmp	r0, #115	; 0x73
   11a9e:	d02a      	beq.n	11af6 <bsd_os_errno_set+0x112>
   11aa0:	2869      	cmp	r0, #105	; 0x69
   11aa2:	d1ca      	bne.n	11a3a <bsd_os_errno_set+0x56>
		errno = ENOBUFS;
   11aa4:	f00c f97a 	bl	1dd9c <z_errno>
   11aa8:	2337      	movs	r3, #55	; 0x37
   11aaa:	e00e      	b.n	11aca <bsd_os_errno_set+0xe6>
	switch (err_code) {
   11aac:	287f      	cmp	r0, #127	; 0x7f
   11aae:	d02f      	beq.n	11b10 <bsd_os_errno_set+0x12c>
   11ab0:	db29      	blt.n	11b06 <bsd_os_errno_set+0x122>
   11ab2:	2880      	cmp	r0, #128	; 0x80
   11ab4:	d031      	beq.n	11b1a <bsd_os_errno_set+0x136>
   11ab6:	2881      	cmp	r0, #129	; 0x81
   11ab8:	d1bf      	bne.n	11a3a <bsd_os_errno_set+0x56>
		errno = EKEYREJECTED;
   11aba:	f00c f96f 	bl	1dd9c <z_errno>
   11abe:	f240 73d4 	movw	r3, #2004	; 0x7d4
   11ac2:	e002      	b.n	11aca <bsd_os_errno_set+0xe6>
		errno = EACCES;
   11ac4:	f00c f96a 	bl	1dd9c <z_errno>
   11ac8:	230d      	movs	r3, #13
		errno = 0xBAADBAAD;
   11aca:	6003      	str	r3, [r0, #0]
}
   11acc:	e79e      	b.n	11a0c <bsd_os_errno_set+0x28>
		errno = EAGAIN;
   11ace:	f00c f965 	bl	1dd9c <z_errno>
   11ad2:	230b      	movs	r3, #11
   11ad4:	e7f9      	b.n	11aca <bsd_os_errno_set+0xe6>
		errno = EPROTOTYPE;
   11ad6:	f00c f961 	bl	1dd9c <z_errno>
   11ada:	2329      	movs	r3, #41	; 0x29
   11adc:	e7f5      	b.n	11aca <bsd_os_errno_set+0xe6>
		errno = ESOCKTNOSUPPORT;
   11ade:	f00c f95d 	bl	1dd9c <z_errno>
   11ae2:	232c      	movs	r3, #44	; 0x2c
   11ae4:	e7f1      	b.n	11aca <bsd_os_errno_set+0xe6>
		errno = ENETDOWN;
   11ae6:	f00c f959 	bl	1dd9c <z_errno>
   11aea:	233e      	movs	r3, #62	; 0x3e
   11aec:	e7ed      	b.n	11aca <bsd_os_errno_set+0xe6>
		errno = EHOSTDOWN;
   11aee:	f00c f955 	bl	1dd9c <z_errno>
   11af2:	2343      	movs	r3, #67	; 0x43
   11af4:	e7e9      	b.n	11aca <bsd_os_errno_set+0xe6>
		errno = EINPROGRESS;
   11af6:	f00c f951 	bl	1dd9c <z_errno>
   11afa:	2344      	movs	r3, #68	; 0x44
   11afc:	e7e5      	b.n	11aca <bsd_os_errno_set+0xe6>
		errno = ECANCELED;
   11afe:	f00c f94d 	bl	1dd9c <z_errno>
   11b02:	2348      	movs	r3, #72	; 0x48
   11b04:	e7e1      	b.n	11aca <bsd_os_errno_set+0xe6>
		errno = ENOKEY;
   11b06:	f00c f949 	bl	1dd9c <z_errno>
   11b0a:	f240 73d1 	movw	r3, #2001	; 0x7d1
   11b0e:	e7dc      	b.n	11aca <bsd_os_errno_set+0xe6>
		errno = EKEYEXPIRED;
   11b10:	f00c f944 	bl	1dd9c <z_errno>
   11b14:	f240 73d2 	movw	r3, #2002	; 0x7d2
   11b18:	e7d7      	b.n	11aca <bsd_os_errno_set+0xe6>
		errno = EKEYREVOKED;
   11b1a:	f00c f93f 	bl	1dd9c <z_errno>
   11b1e:	f240 73d3 	movw	r3, #2003	; 0x7d3
   11b22:	e7d2      	b.n	11aca <bsd_os_errno_set+0xe6>
		errno = EMSGSIZE;
   11b24:	f00c f93a 	bl	1dd9c <z_errno>
   11b28:	2324      	movs	r3, #36	; 0x24
   11b2a:	e7ce      	b.n	11aca <bsd_os_errno_set+0xe6>
   11b2c:	0001f390 	.word	0x0001f390
   11b30:	0001f3b0 	.word	0x0001f3b0
   11b34:	00020b3b 	.word	0x00020b3b
   11b38:	baadbaad 	.word	0xbaadbaad

00011b3c <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   11b40:	4b01      	ldr	r3, [pc, #4]	; (11b48 <bsd_os_application_irq_set+0xc>)
   11b42:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   11b46:	4770      	bx	lr
   11b48:	e000e100 	.word	0xe000e100

00011b4c <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11b4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   11b50:	4b01      	ldr	r3, [pc, #4]	; (11b58 <bsd_os_application_irq_clear+0xc>)
   11b52:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   11b56:	4770      	bx	lr
   11b58:	e000e100 	.word	0xe000e100

00011b5c <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11b5c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   11b60:	4b01      	ldr	r3, [pc, #4]	; (11b68 <bsd_os_trace_irq_set+0xc>)
   11b62:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   11b66:	4770      	bx	lr
   11b68:	e000e100 	.word	0xe000e100

00011b6c <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11b6c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   11b70:	4b01      	ldr	r3, [pc, #4]	; (11b78 <bsd_os_trace_irq_clear+0xc>)
   11b72:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   11b76:	4770      	bx	lr
   11b78:	e000e100 	.word	0xe000e100

00011b7c <trace_uart_init>:
			   rpc_proxy_irq_handler, UNUSED_FLAGS);
	irq_enable(BSD_APPLICATION_IRQ);
}

void trace_uart_init(void)
{
   11b7c:	b500      	push	{lr}
   11b7e:	b089      	sub	sp, #36	; 0x24
#ifdef CONFIG_BSD_LIBRARY_TRACE_ENABLED
	/* UART pins are defined in "nrf9160_pca10090.dts". */
	const nrfx_uarte_config_t config = {
   11b80:	2218      	movs	r2, #24
   11b82:	2100      	movs	r1, #0
   11b84:	a802      	add	r0, sp, #8
   11b86:	f00b fda0 	bl	1d6ca <memset>
   11b8a:	2301      	movs	r3, #1
   11b8c:	9301      	str	r3, [sp, #4]
   11b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11b92:	e9cd 3303 	strd	r3, r3, [sp, #12]
   11b96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   11b9a:	9306      	str	r3, [sp, #24]
   11b9c:	2307      	movs	r3, #7
		.p_context = NULL,
	};

	/* Initialize nrfx UARTE driver in blocking mode. */
	/* TODO: use UARTE in non-blocking mode with IRQ handler. */
	nrfx_uarte_init(&uarte_inst, &config, NULL);
   11b9e:	2200      	movs	r2, #0
   11ba0:	a901      	add	r1, sp, #4
   11ba2:	4804      	ldr	r0, [pc, #16]	; (11bb4 <trace_uart_init+0x38>)
	const nrfx_uarte_config_t config = {
   11ba4:	f88d 301c 	strb.w	r3, [sp, #28]
	nrfx_uarte_init(&uarte_inst, &config, NULL);
   11ba8:	f009 f8ee 	bl	1ad88 <nrfx_uarte_init>
#endif
}
   11bac:	b009      	add	sp, #36	; 0x24
   11bae:	f85d fb04 	ldr.w	pc, [sp], #4
   11bb2:	bf00      	nop
   11bb4:	0001f5c8 	.word	0x0001f5c8

00011bb8 <bsd_os_init>:

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   11bb8:	b508      	push	{r3, lr}
	list->head = NULL;
   11bba:	2300      	movs	r3, #0
   11bbc:	4a08      	ldr	r2, [pc, #32]	; (11be0 <bsd_os_init+0x28>)
	list->tail = NULL;
   11bbe:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11bc2:	4a08      	ldr	r2, [pc, #32]	; (11be4 <bsd_os_init+0x2c>)
   11bc4:	e8d2 1fef 	ldaex	r1, [r2]
   11bc8:	e8c2 3fe0 	stlex	r0, r3, [r2]
   11bcc:	2800      	cmp	r0, #0
   11bce:	d1f9      	bne.n	11bc4 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   11bd0:	f00c f90f 	bl	1ddf2 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
   11bd4:	f7ff ffd2 	bl	11b7c <trace_uart_init>
	trace_task_create();
}
   11bd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   11bdc:	f00c b8fe 	b.w	1dddc <trace_task_create>
   11be0:	200203a4 	.word	0x200203a4
   11be4:	200203a0 	.word	0x200203a0

00011be8 <bsd_os_trace_put>:

int32_t bsd_os_trace_put(const uint8_t * const data, uint32_t len)
{
   11be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11bec:	4607      	mov	r7, r0
   11bee:	460d      	mov	r5, r1
#ifdef CONFIG_BSD_LIBRARY_TRACE_ENABLED
	/* Max DMA transfers are 255 bytes.
	 * Split RAM buffer into smaller chunks
	 * to be transferred using DMA.
	 */
	u32_t remaining_bytes = len;
   11bf0:	460c      	mov	r4, r1

	while (remaining_bytes) {
		u8_t transfer_len = MIN(remaining_bytes, UINT8_MAX);
		u32_t idx = len - remaining_bytes;

		nrfx_uarte_tx(&uarte_inst, &data[idx], transfer_len);
   11bf2:	f8df 8024 	ldr.w	r8, [pc, #36]	; 11c18 <bsd_os_trace_put+0x30>
	while (remaining_bytes) {
   11bf6:	b914      	cbnz	r4, 11bfe <bsd_os_trace_put+0x16>
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   11bf8:	4620      	mov	r0, r4
   11bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		u8_t transfer_len = MIN(remaining_bytes, UINT8_MAX);
   11bfe:	2cff      	cmp	r4, #255	; 0xff
   11c00:	4626      	mov	r6, r4
   11c02:	bf28      	it	cs
   11c04:	26ff      	movcs	r6, #255	; 0xff
		u32_t idx = len - remaining_bytes;
   11c06:	1b29      	subs	r1, r5, r4
		nrfx_uarte_tx(&uarte_inst, &data[idx], transfer_len);
   11c08:	4632      	mov	r2, r6
   11c0a:	4439      	add	r1, r7
   11c0c:	4640      	mov	r0, r8
   11c0e:	f009 f94f 	bl	1aeb0 <nrfx_uarte_tx>
		remaining_bytes -= transfer_len;
   11c12:	1ba4      	subs	r4, r4, r6
   11c14:	e7ef      	b.n	11bf6 <bsd_os_trace_put+0xe>
   11c16:	bf00      	nop
   11c18:	0001f5c8 	.word	0x0001f5c8

00011c1c <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   11c1c:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   11c20:	d03c      	beq.n	11c9c <z_to_nrf_optname+0x80>
   11c22:	dc04      	bgt.n	11c2e <z_to_nrf_optname+0x12>
   11c24:	2801      	cmp	r0, #1
   11c26:	d044      	beq.n	11cb2 <z_to_nrf_optname+0x96>
			break;
		}
		break;

	default:
		retval = -1;
   11c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		break;
	}

	return retval;
}
   11c2c:	4770      	bx	lr
	switch (z_in_level) {
   11c2e:	f240 2302 	movw	r3, #514	; 0x202
   11c32:	4298      	cmp	r0, r3
   11c34:	d052      	beq.n	11cdc <z_to_nrf_optname+0xc0>
   11c36:	f240 2303 	movw	r3, #515	; 0x203
   11c3a:	4298      	cmp	r0, r3
   11c3c:	d1f4      	bne.n	11c28 <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
   11c3e:	3901      	subs	r1, #1
   11c40:	2913      	cmp	r1, #19
   11c42:	d8f1      	bhi.n	11c28 <z_to_nrf_optname+0xc>
   11c44:	a301      	add	r3, pc, #4	; (adr r3, 11c4c <z_to_nrf_optname+0x30>)
   11c46:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   11c4a:	bf00      	nop
   11c4c:	00011ce9 	.word	0x00011ce9
   11c50:	00011cad 	.word	0x00011cad
   11c54:	00011ccd 	.word	0x00011ccd
   11c58:	00011cbf 	.word	0x00011cbf
   11c5c:	00011cd1 	.word	0x00011cd1
   11c60:	00011cd5 	.word	0x00011cd5
   11c64:	00011cd9 	.word	0x00011cd9
   11c68:	00011c29 	.word	0x00011c29
   11c6c:	00011c29 	.word	0x00011c29
   11c70:	00011c29 	.word	0x00011c29
   11c74:	00011c29 	.word	0x00011c29
   11c78:	00011c29 	.word	0x00011c29
   11c7c:	00011c29 	.word	0x00011c29
   11c80:	00011c29 	.word	0x00011c29
   11c84:	00011c29 	.word	0x00011c29
   11c88:	00011c29 	.word	0x00011c29
   11c8c:	00011c29 	.word	0x00011c29
   11c90:	00011c29 	.word	0x00011c29
   11c94:	00011c29 	.word	0x00011c29
   11c98:	00011cc3 	.word	0x00011cc3
		switch (z_in_optname) {
   11c9c:	3901      	subs	r1, #1
   11c9e:	2905      	cmp	r1, #5
   11ca0:	d8c2      	bhi.n	11c28 <z_to_nrf_optname+0xc>
   11ca2:	e8df f001 	tbb	[pc, r1]
   11ca6:	1503      	.short	0x1503
   11ca8:	210c1917 	.word	0x210c1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   11cac:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   11cae:	6013      	str	r3, [r2, #0]
   11cb0:	e00a      	b.n	11cc8 <z_to_nrf_optname+0xac>
		switch (z_in_optname) {
   11cb2:	2914      	cmp	r1, #20
   11cb4:	d005      	beq.n	11cc2 <z_to_nrf_optname+0xa6>
   11cb6:	2919      	cmp	r1, #25
   11cb8:	d005      	beq.n	11cc6 <z_to_nrf_optname+0xaa>
   11cba:	2904      	cmp	r1, #4
   11cbc:	d1b4      	bne.n	11c28 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   11cbe:	2304      	movs	r3, #4
   11cc0:	e7f5      	b.n	11cae <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   11cc2:	2314      	movs	r3, #20
   11cc4:	e7f3      	b.n	11cae <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   11cc6:	6011      	str	r1, [r2, #0]
	int retval = 0;
   11cc8:	2000      	movs	r0, #0
			break;
   11cca:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   11ccc:	2303      	movs	r3, #3
   11cce:	e7ee      	b.n	11cae <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   11cd0:	2305      	movs	r3, #5
   11cd2:	e7ec      	b.n	11cae <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   11cd4:	2306      	movs	r3, #6
   11cd6:	e7ea      	b.n	11cae <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   11cd8:	2307      	movs	r3, #7
   11cda:	e7e8      	b.n	11cae <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   11cdc:	2902      	cmp	r1, #2
   11cde:	d0e5      	beq.n	11cac <z_to_nrf_optname+0x90>
   11ce0:	2903      	cmp	r1, #3
   11ce2:	d0f3      	beq.n	11ccc <z_to_nrf_optname+0xb0>
   11ce4:	2901      	cmp	r1, #1
   11ce6:	d19f      	bne.n	11c28 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   11ce8:	2301      	movs	r3, #1
   11cea:	e7e0      	b.n	11cae <z_to_nrf_optname+0x92>

00011cec <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   11cec:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   11cee:	4b03      	ldr	r3, [pc, #12]	; (11cfc <nrf91_socket_iface_init+0x10>)
   11cf0:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   11cf2:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
   11cf4:	4802      	ldr	r0, [pc, #8]	; (11d00 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   11cf6:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
   11cf8:	f7fd bc00 	b.w	f4fc <socket_offload_register>
   11cfc:	200203fc 	.word	0x200203fc
   11d00:	0001f5d0 	.word	0x0001f5d0

00011d04 <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   11d04:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   11d06:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   11d08:	b118      	cbz	r0, 11d12 <callback_worker+0xe>
		data->callback(data->data);
   11d0a:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   11d0e:	300c      	adds	r0, #12
   11d10:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   11d12:	a901      	add	r1, sp, #4
   11d14:	4802      	ldr	r0, [pc, #8]	; (11d20 <callback_worker+0x1c>)
   11d16:	f009 fae1 	bl	1b2dc <k_mem_slab_free>
}
   11d1a:	b003      	add	sp, #12
   11d1c:	f85d fb04 	ldr.w	pc, [sp], #4
   11d20:	2002c650 	.word	0x2002c650

00011d24 <open_socket>:
{
   11d24:	b508      	push	{r3, lr}
	return socket_ops->socket(family, type, proto);
   11d26:	4b09      	ldr	r3, [pc, #36]	; (11d4c <open_socket+0x28>)
   11d28:	f240 2201 	movw	r2, #513	; 0x201
   11d2c:	681b      	ldr	r3, [r3, #0]
   11d2e:	2100      	movs	r1, #0
   11d30:	681b      	ldr	r3, [r3, #0]
   11d32:	2066      	movs	r0, #102	; 0x66
   11d34:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, 0, NPROTO_AT);
   11d36:	4b06      	ldr	r3, [pc, #24]	; (11d50 <open_socket+0x2c>)
   11d38:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   11d3a:	3001      	adds	r0, #1
   11d3c:	d104      	bne.n	11d48 <open_socket+0x24>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   11d3e:	f009 f939 	bl	1afb4 <z_impl_z_errno>
		return -errno;
   11d42:	6800      	ldr	r0, [r0, #0]
   11d44:	4240      	negs	r0, r0
}
   11d46:	bd08      	pop	{r3, pc}
	return 0;
   11d48:	2000      	movs	r0, #0
   11d4a:	e7fc      	b.n	11d46 <open_socket+0x22>
   11d4c:	20020344 	.word	0x20020344
   11d50:	20020400 	.word	0x20020400

00011d54 <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   11d54:	b530      	push	{r4, r5, lr}
   11d56:	b087      	sub	sp, #28
	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   11d58:	f7ff ffe4 	bl	11d24 <open_socket>
	if (err) {
   11d5c:	4d1a      	ldr	r5, [pc, #104]	; (11dc8 <at_cmd_driver_init+0x74>)
   11d5e:	4b1b      	ldr	r3, [pc, #108]	; (11dcc <at_cmd_driver_init+0x78>)
   11d60:	4604      	mov	r4, r0
   11d62:	1aed      	subs	r5, r5, r3
   11d64:	f3c5 05c9 	ubfx	r5, r5, #3, #10
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   11d68:	f04f 0200 	mov.w	r2, #0
	if (err) {
   11d6c:	b158      	cbz	r0, 11d86 <at_cmd_driver_init+0x32>
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   11d6e:	2301      	movs	r3, #1
   11d70:	4601      	mov	r1, r0
   11d72:	f363 0207 	bfi	r2, r3, #0, #8
   11d76:	4816      	ldr	r0, [pc, #88]	; (11dd0 <at_cmd_driver_init+0x7c>)
   11d78:	f365 128f 	bfi	r2, r5, #6, #10
			K_THREAD_STACK_SIZEOF(socket_thread_stack),
			socket_thread_fn,
			NULL, NULL, NULL,
			THREAD_PRIORITY, 0, K_NO_WAIT);

	LOG_DBG("Common AT socket processing thread created");
   11d7c:	f00a ff12 	bl	1cba4 <log_1>

	return 0;
}
   11d80:	4620      	mov	r0, r4
   11d82:	b007      	add	sp, #28
   11d84:	bd30      	pop	{r4, r5, pc}
	LOG_DBG("Common AT socket created");
   11d86:	2304      	movs	r3, #4
   11d88:	f363 0207 	bfi	r2, r3, #0, #8
   11d8c:	f365 128f 	bfi	r2, r5, #6, #10
   11d90:	4910      	ldr	r1, [pc, #64]	; (11dd4 <at_cmd_driver_init+0x80>)
   11d92:	4811      	ldr	r0, [pc, #68]	; (11dd8 <at_cmd_driver_init+0x84>)
   11d94:	f00a ff06 	bl	1cba4 <log_1>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11d98:	230a      	movs	r3, #10
   11d9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11d9e:	e9cd 4302 	strd	r4, r3, [sp, #8]
   11da2:	490e      	ldr	r1, [pc, #56]	; (11ddc <at_cmd_driver_init+0x88>)
   11da4:	4b0e      	ldr	r3, [pc, #56]	; (11de0 <at_cmd_driver_init+0x8c>)
   11da6:	e9cd 4404 	strd	r4, r4, [sp, #16]
   11daa:	e9cd 4400 	strd	r4, r4, [sp]
   11dae:	480d      	ldr	r0, [pc, #52]	; (11de4 <at_cmd_driver_init+0x90>)
   11db0:	f00a f868 	bl	1be84 <z_impl_k_thread_create>
	LOG_DBG("Common AT socket processing thread created");
   11db4:	f04f 0200 	mov.w	r2, #0
   11db8:	2304      	movs	r3, #4
   11dba:	f363 0207 	bfi	r2, r3, #0, #8
   11dbe:	f365 128f 	bfi	r2, r5, #6, #10
   11dc2:	4904      	ldr	r1, [pc, #16]	; (11dd4 <at_cmd_driver_init+0x80>)
   11dc4:	4808      	ldr	r0, [pc, #32]	; (11de8 <at_cmd_driver_init+0x94>)
   11dc6:	e7d9      	b.n	11d7c <at_cmd_driver_init+0x28>
   11dc8:	0001f398 	.word	0x0001f398
   11dcc:	0001f390 	.word	0x0001f390
   11dd0:	00020bc1 	.word	0x00020bc1
   11dd4:	00020bae 	.word	0x00020bae
   11dd8:	00020be3 	.word	0x00020be3
   11ddc:	20026db8 	.word	0x20026db8
   11de0:	00011ded 	.word	0x00011ded
   11de4:	20020414 	.word	0x20020414
   11de8:	00020c00 	.word	0x00020c00

00011dec <socket_thread_fn>:
	LOG_DBG("AT socket thread started");
   11dec:	2304      	movs	r3, #4
   11dee:	f04f 0200 	mov.w	r2, #0
{
   11df2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_DBG("AT socket thread started");
   11df6:	f363 0207 	bfi	r2, r3, #0, #8
   11dfa:	499b      	ldr	r1, [pc, #620]	; (12068 <socket_thread_fn+0x27c>)
   11dfc:	4b9b      	ldr	r3, [pc, #620]	; (1206c <socket_thread_fn+0x280>)
{
   11dfe:	b087      	sub	sp, #28
	LOG_DBG("AT socket thread started");
   11e00:	1a5b      	subs	r3, r3, r1
   11e02:	f3c3 0bc9 	ubfx	fp, r3, #3, #10
   11e06:	f36b 128f 	bfi	r2, fp, #6, #10
   11e0a:	4999      	ldr	r1, [pc, #612]	; (12070 <socket_thread_fn+0x284>)
   11e0c:	4899      	ldr	r0, [pc, #612]	; (12074 <socket_thread_fn+0x288>)
   11e0e:	f00a fec9 	bl	1cba4 <log_1>
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   11e12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11e16:	a903      	add	r1, sp, #12
   11e18:	4897      	ldr	r0, [pc, #604]	; (12078 <socket_thread_fn+0x28c>)
   11e1a:	f009 fa33 	bl	1b284 <k_mem_slab_alloc>
		ret.code  = 0;
   11e1e:	2300      	movs	r3, #0
	return socket_ops->recv(sock, buf, max_len, flags);
   11e20:	4c96      	ldr	r4, [pc, #600]	; (1207c <socket_thread_fn+0x290>)
		item->callback = NULL;
   11e22:	9903      	ldr	r1, [sp, #12]
   11e24:	6822      	ldr	r2, [r4, #0]
   11e26:	4896      	ldr	r0, [pc, #600]	; (12080 <socket_thread_fn+0x294>)
   11e28:	f8c1 3a98 	str.w	r3, [r1, #2712]	; 0xa98
   11e2c:	f8d2 a024 	ldr.w	sl, [r2, #36]	; 0x24
   11e30:	310c      	adds	r1, #12
		ret.code  = 0;
   11e32:	9304      	str	r3, [sp, #16]
		ret.state = AT_CMD_OK;
   11e34:	f88d 3014 	strb.w	r3, [sp, #20]
   11e38:	f640 228c 	movw	r2, #2700	; 0xa8c
   11e3c:	6800      	ldr	r0, [r0, #0]
   11e3e:	47d0      	blx	sl
		if (bytes_read < 0) {
   11e40:	1e01      	subs	r1, r0, #0
   11e42:	da5b      	bge.n	11efc <socket_thread_fn+0x110>
			LOG_ERR("AT socket recv failed with err %d",
   11e44:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
   11e48:	f043 0301 	orr.w	r3, r3, #1
   11e4c:	f363 0507 	bfi	r5, r3, #0, #8
   11e50:	f36b 158f 	bfi	r5, fp, #6, #10
   11e54:	488b      	ldr	r0, [pc, #556]	; (12084 <socket_thread_fn+0x298>)
   11e56:	462a      	mov	r2, r5
   11e58:	f00a fea4 	bl	1cba4 <log_1>
	return socket_ops->close(sock);
   11e5c:	6823      	ldr	r3, [r4, #0]
   11e5e:	4888      	ldr	r0, [pc, #544]	; (12080 <socket_thread_fn+0x294>)
   11e60:	685b      	ldr	r3, [r3, #4]
   11e62:	6800      	ldr	r0, [r0, #0]
   11e64:	4798      	blx	r3
			if ((close(common_socket_fd) == 0) &&
   11e66:	2800      	cmp	r0, #0
   11e68:	d131      	bne.n	11ece <socket_thread_fn+0xe2>
			    (open_socket() == 0)) {
   11e6a:	f7ff ff5b 	bl	11d24 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   11e6e:	bb70      	cbnz	r0, 11ece <socket_thread_fn+0xe2>
				LOG_INF("AT socket recovered");
   11e70:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   11e74:	f043 0303 	orr.w	r3, r3, #3
   11e78:	f363 0607 	bfi	r6, r3, #0, #8
   11e7c:	f36b 168f 	bfi	r6, fp, #6, #10
   11e80:	4631      	mov	r1, r6
   11e82:	4881      	ldr	r0, [pc, #516]	; (12088 <socket_thread_fn+0x29c>)
   11e84:	f00a fe81 	bl	1cb8a <log_0>
				ret.state = AT_CMD_ERROR;
   11e88:	2301      	movs	r3, #1
   11e8a:	f88d 3014 	strb.w	r3, [sp, #20]
   11e8e:	f009 f891 	bl	1afb4 <z_impl_z_errno>
				ret.code  = -errno;
   11e92:	6803      	ldr	r3, [r0, #0]
   11e94:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   11e96:	9304      	str	r3, [sp, #16]
		if (item->callback == NULL) {
   11e98:	9903      	ldr	r1, [sp, #12]
   11e9a:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   11e9e:	2b00      	cmp	r3, #0
   11ea0:	f040 80b8 	bne.w	12014 <socket_thread_fn+0x228>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   11ea4:	a903      	add	r1, sp, #12
   11ea6:	4874      	ldr	r0, [pc, #464]	; (12078 <socket_thread_fn+0x28c>)
   11ea8:	f009 fa18 	bl	1b2dc <k_mem_slab_free>
	if (z_syscall_trap()) {
		return (unsigned int) arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_COUNT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_count_get(sem);
   11eac:	4b77      	ldr	r3, [pc, #476]	; (1208c <socket_thread_fn+0x2a0>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   11eae:	689b      	ldr	r3, [r3, #8]
   11eb0:	2b00      	cmp	r3, #0
   11eb2:	d1ae      	bne.n	11e12 <socket_thread_fn+0x26>
   11eb4:	f89d 2014 	ldrb.w	r2, [sp, #20]
   11eb8:	2a04      	cmp	r2, #4
   11eba:	d0aa      	beq.n	11e12 <socket_thread_fn+0x26>
			current_cmd_handler = NULL;
   11ebc:	4a74      	ldr	r2, [pc, #464]	; (12090 <socket_thread_fn+0x2a4>)
   11ebe:	6013      	str	r3, [r2, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&q, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(q, data, timeout);
   11ec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11ec4:	a904      	add	r1, sp, #16
   11ec6:	4873      	ldr	r0, [pc, #460]	; (12094 <socket_thread_fn+0x2a8>)
   11ec8:	f009 fad2 	bl	1b470 <z_impl_k_msgq_put>
   11ecc:	e7a1      	b.n	11e12 <socket_thread_fn+0x26>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   11ece:	2301      	movs	r3, #1
   11ed0:	f04f 0400 	mov.w	r4, #0
   11ed4:	f363 0407 	bfi	r4, r3, #0, #8
   11ed8:	f36b 148f 	bfi	r4, fp, #6, #10
   11edc:	f009 f86a 	bl	1afb4 <z_impl_z_errno>
   11ee0:	4622      	mov	r2, r4
   11ee2:	6801      	ldr	r1, [r0, #0]
   11ee4:	486c      	ldr	r0, [pc, #432]	; (12098 <socket_thread_fn+0x2ac>)
   11ee6:	f00a fe5d 	bl	1cba4 <log_1>
   11eea:	4b64      	ldr	r3, [pc, #400]	; (1207c <socket_thread_fn+0x290>)
   11eec:	4a64      	ldr	r2, [pc, #400]	; (12080 <socket_thread_fn+0x294>)
   11eee:	681b      	ldr	r3, [r3, #0]
   11ef0:	6810      	ldr	r0, [r2, #0]
   11ef2:	685b      	ldr	r3, [r3, #4]
   11ef4:	4798      	blx	r3
}
   11ef6:	b007      	add	sp, #28
   11ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (bytes_read == sizeof(item->data) ||
   11efc:	f640 238c 	movw	r3, #2700	; 0xa8c
   11f00:	4299      	cmp	r1, r3
   11f02:	d004      	beq.n	11f0e <socket_thread_fn+0x122>
			   item->data[bytes_read - 1] != '\0') {
   11f04:	9803      	ldr	r0, [sp, #12]
   11f06:	4401      	add	r1, r0
		} else if (bytes_read == sizeof(item->data) ||
   11f08:	7acb      	ldrb	r3, [r1, #11]
   11f0a:	9301      	str	r3, [sp, #4]
   11f0c:	b173      	cbz	r3, 11f2c <socket_thread_fn+0x140>
			LOG_ERR("AT message to large for reception buffer or "
   11f0e:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   11f12:	f043 0301 	orr.w	r3, r3, #1
   11f16:	f363 0707 	bfi	r7, r3, #0, #8
   11f1a:	f36b 178f 	bfi	r7, fp, #6, #10
   11f1e:	4639      	mov	r1, r7
   11f20:	485e      	ldr	r0, [pc, #376]	; (1209c <socket_thread_fn+0x2b0>)
   11f22:	f00a fe32 	bl	1cb8a <log_0>
			ret.code  = -ENOBUFS;
   11f26:	f06f 0336 	mvn.w	r3, #54	; 0x36
   11f2a:	e7b4      	b.n	11e96 <socket_thread_fn+0xaa>
		LOG_DBG("at_cmd_rx: %s", log_strdup(item->data));
   11f2c:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   11f30:	f043 0304 	orr.w	r3, r3, #4
   11f34:	300c      	adds	r0, #12
   11f36:	f363 0807 	bfi	r8, r3, #0, #8
   11f3a:	f7fd f817 	bl	ef6c <log_strdup>
   11f3e:	f36b 188f 	bfi	r8, fp, #6, #10
   11f42:	4602      	mov	r2, r0
   11f44:	4643      	mov	r3, r8
   11f46:	494a      	ldr	r1, [pc, #296]	; (12070 <socket_thread_fn+0x284>)
   11f48:	4855      	ldr	r0, [pc, #340]	; (120a0 <socket_thread_fn+0x2b4>)
   11f4a:	f00a fe3f 	bl	1cbcc <log_2>
	ret->state = AT_CMD_NOTIFICATION;
   11f4e:	2304      	movs	r3, #4
		payload_len = get_return_code(item->data, &ret);
   11f50:	f8dd a00c 	ldr.w	sl, [sp, #12]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   11f54:	4953      	ldr	r1, [pc, #332]	; (120a4 <socket_thread_fn+0x2b8>)
		payload_len = get_return_code(item->data, &ret);
   11f56:	f10a 040c 	add.w	r4, sl, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   11f5a:	4620      	mov	r0, r4
	ret->state = AT_CMD_NOTIFICATION;
   11f5c:	f88d 3014 	strb.w	r3, [sp, #20]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   11f60:	f00b faf9 	bl	1d556 <strstr>
		if (tmpstr) {
   11f64:	4603      	mov	r3, r0
   11f66:	b120      	cbz	r0, 11f72 <socket_thread_fn+0x186>
			ret->state = AT_CMD_OK;
   11f68:	9a01      	ldr	r2, [sp, #4]
   11f6a:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code  = -ENOEXEC;
   11f6e:	9204      	str	r2, [sp, #16]
			break;
   11f70:	e00e      	b.n	11f90 <socket_thread_fn+0x1a4>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   11f72:	494d      	ldr	r1, [pc, #308]	; (120a8 <socket_thread_fn+0x2bc>)
   11f74:	4620      	mov	r0, r4
   11f76:	f00b faee 	bl	1d556 <strstr>
		if (tmpstr) {
   11f7a:	9001      	str	r0, [sp, #4]
   11f7c:	b328      	cbz	r0, 11fca <socket_thread_fn+0x1de>
			ret->state = AT_CMD_ERROR_CMS;
   11f7e:	2202      	movs	r2, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   11f80:	f10a 0017 	add.w	r0, sl, #23
			ret->state = AT_CMD_ERROR_CME;
   11f84:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   11f88:	f00b f9d0 	bl	1d32c <atoi>
   11f8c:	9b01      	ldr	r3, [sp, #4]
   11f8e:	9004      	str	r0, [sp, #16]
		buf[new_len++] = '\0';
   11f90:	2100      	movs	r1, #0
		new_len = tmpstr - buf;
   11f92:	1b1a      	subs	r2, r3, r4
		buf[new_len++] = '\0';
   11f94:	3201      	adds	r2, #1
   11f96:	7019      	strb	r1, [r3, #0]
		if (ret.state != AT_CMD_NOTIFICATION) {
   11f98:	f89d 3014 	ldrb.w	r3, [sp, #20]
   11f9c:	2b04      	cmp	r3, #4
   11f9e:	d04f      	beq.n	12040 <socket_thread_fn+0x254>
			if ((response_buf_len > 0) &&
   11fa0:	f8df a124 	ldr.w	sl, [pc, #292]	; 120c8 <socket_thread_fn+0x2dc>
   11fa4:	f8da 3000 	ldr.w	r3, [sl]
   11fa8:	2b00      	cmp	r3, #0
   11faa:	d052      	beq.n	12052 <socket_thread_fn+0x266>
			    (response_buf != NULL)) {
   11fac:	4c3f      	ldr	r4, [pc, #252]	; (120ac <socket_thread_fn+0x2c0>)
   11fae:	6820      	ldr	r0, [r4, #0]
			if ((response_buf_len > 0) &&
   11fb0:	2800      	cmp	r0, #0
   11fb2:	d04e      	beq.n	12052 <socket_thread_fn+0x266>
				if (response_buf_len > payload_len) {
   11fb4:	4293      	cmp	r3, r2
   11fb6:	d91d      	bls.n	11ff4 <socket_thread_fn+0x208>
					memcpy(response_buf, item->data,
   11fb8:	9903      	ldr	r1, [sp, #12]
   11fba:	310c      	adds	r1, #12
   11fbc:	f00b fb5b 	bl	1d676 <memcpy>
				response_buf_len = 0;
   11fc0:	2300      	movs	r3, #0
   11fc2:	f8ca 3000 	str.w	r3, [sl]
				response_buf     = NULL;
   11fc6:	6023      	str	r3, [r4, #0]
				goto next;
   11fc8:	e766      	b.n	11e98 <socket_thread_fn+0xac>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   11fca:	4939      	ldr	r1, [pc, #228]	; (120b0 <socket_thread_fn+0x2c4>)
   11fcc:	4620      	mov	r0, r4
   11fce:	f00b fac2 	bl	1d556 <strstr>
		if (tmpstr) {
   11fd2:	9001      	str	r0, [sp, #4]
   11fd4:	b108      	cbz	r0, 11fda <socket_thread_fn+0x1ee>
			ret->state = AT_CMD_ERROR_CME;
   11fd6:	2203      	movs	r2, #3
   11fd8:	e7d2      	b.n	11f80 <socket_thread_fn+0x194>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   11fda:	4936      	ldr	r1, [pc, #216]	; (120b4 <socket_thread_fn+0x2c8>)
   11fdc:	4620      	mov	r0, r4
   11fde:	f00b faba 	bl	1d556 <strstr>
		if (tmpstr) {
   11fe2:	4603      	mov	r3, r0
   11fe4:	2800      	cmp	r0, #0
   11fe6:	d039      	beq.n	1205c <socket_thread_fn+0x270>
			ret->state = AT_CMD_ERROR;
   11fe8:	2201      	movs	r2, #1
   11fea:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code  = -ENOEXEC;
   11fee:	f06f 0207 	mvn.w	r2, #7
   11ff2:	e7bc      	b.n	11f6e <socket_thread_fn+0x182>
					LOG_ERR("Response buffer not large "
   11ff4:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   11ff8:	f043 0301 	orr.w	r3, r3, #1
   11ffc:	f363 0907 	bfi	r9, r3, #0, #8
   12000:	f36b 198f 	bfi	r9, fp, #6, #10
   12004:	4649      	mov	r1, r9
   12006:	482c      	ldr	r0, [pc, #176]	; (120b8 <socket_thread_fn+0x2cc>)
   12008:	f00a fdbf 	bl	1cb8a <log_0>
					ret.code  = -EMSGSIZE;
   1200c:	f06f 0323 	mvn.w	r3, #35	; 0x23
   12010:	9304      	str	r3, [sp, #16]
   12012:	e7d5      	b.n	11fc0 <socket_thread_fn+0x1d4>
   12014:	4b29      	ldr	r3, [pc, #164]	; (120bc <socket_thread_fn+0x2d0>)
   12016:	2200      	movs	r2, #0
   12018:	604b      	str	r3, [r1, #4]
   1201a:	460b      	mov	r3, r1
   1201c:	600a      	str	r2, [r1, #0]
   1201e:	f843 2f08 	str.w	r2, [r3, #8]!
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12022:	e8d3 2fef 	ldaex	r2, [r3]
   12026:	f042 0001 	orr.w	r0, r2, #1
   1202a:	e8c3 0fe4 	stlex	r4, r0, [r3]
   1202e:	2c00      	cmp	r4, #0
   12030:	d1f7      	bne.n	12022 <socket_thread_fn+0x236>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   12032:	07d3      	lsls	r3, r2, #31
   12034:	f53f af3a 	bmi.w	11eac <socket_thread_fn+0xc0>
		k_queue_append(&work_q->queue, work);
   12038:	4821      	ldr	r0, [pc, #132]	; (120c0 <socket_thread_fn+0x2d4>)
   1203a:	f00c fcea 	bl	1ea12 <k_queue_append>
   1203e:	e735      	b.n	11eac <socket_thread_fn+0xc0>
		if (payload_len == 0) {
   12040:	2a00      	cmp	r2, #0
   12042:	f43f af29 	beq.w	11e98 <socket_thread_fn+0xac>
			item->callback = notification_handler;
   12046:	4b1f      	ldr	r3, [pc, #124]	; (120c4 <socket_thread_fn+0x2d8>)
			item->callback = current_cmd_handler;
   12048:	681a      	ldr	r2, [r3, #0]
   1204a:	9b03      	ldr	r3, [sp, #12]
   1204c:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
   12050:	e722      	b.n	11e98 <socket_thread_fn+0xac>
		if (payload_len == 0) {
   12052:	2a00      	cmp	r2, #0
   12054:	f43f af20 	beq.w	11e98 <socket_thread_fn+0xac>
			item->callback = current_cmd_handler;
   12058:	4b0d      	ldr	r3, [pc, #52]	; (12090 <socket_thread_fn+0x2a4>)
   1205a:	e7f5      	b.n	12048 <socket_thread_fn+0x25c>
		new_len = strlen(buf) + 1;
   1205c:	4620      	mov	r0, r4
   1205e:	f00b facf 	bl	1d600 <strlen>
   12062:	1c42      	adds	r2, r0, #1
   12064:	e798      	b.n	11f98 <socket_thread_fn+0x1ac>
   12066:	bf00      	nop
   12068:	0001f390 	.word	0x0001f390
   1206c:	0001f398 	.word	0x0001f398
   12070:	00020b74 	.word	0x00020b74
   12074:	00020cfe 	.word	0x00020cfe
   12078:	2002c650 	.word	0x2002c650
   1207c:	20020344 	.word	0x20020344
   12080:	20020400 	.word	0x20020400
   12084:	00020d1b 	.word	0x00020d1b
   12088:	00020d3d 	.word	0x00020d3d
   1208c:	2002c6a0 	.word	0x2002c6a0
   12090:	20020404 	.word	0x20020404
   12094:	2002c6e0 	.word	0x2002c6e0
   12098:	00020d51 	.word	0x00020d51
   1209c:	00020d88 	.word	0x00020d88
   120a0:	00020dd2 	.word	0x00020dd2
   120a4:	00020226 	.word	0x00020226
   120a8:	00020de4 	.word	0x00020de4
   120ac:	2002040c 	.word	0x2002040c
   120b0:	00020df0 	.word	0x00020df0
   120b4:	0001ffb6 	.word	0x0001ffb6
   120b8:	00020dfc 	.word	0x00020dfc
   120bc:	00011d05 	.word	0x00011d05
   120c0:	20024d68 	.word	0x20024d68
   120c4:	20020408 	.word	0x20020408
   120c8:	20020410 	.word	0x20020410

000120cc <at_write>:
{
   120cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   120d0:	4680      	mov	r8, r0
   120d2:	460e      	mov	r6, r1
	LOG_DBG("Sending command %s", log_strdup(cmd));
   120d4:	f04f 0500 	mov.w	r5, #0
	int bytes_to_send = strlen(cmd);
   120d8:	f00b fa92 	bl	1d600 <strlen>
	LOG_DBG("Sending command %s", log_strdup(cmd));
   120dc:	2304      	movs	r3, #4
   120de:	4c2f      	ldr	r4, [pc, #188]	; (1219c <at_write+0xd0>)
   120e0:	f363 0507 	bfi	r5, r3, #0, #8
   120e4:	4b2e      	ldr	r3, [pc, #184]	; (121a0 <at_write+0xd4>)
	int bytes_to_send = strlen(cmd);
   120e6:	4607      	mov	r7, r0
	LOG_DBG("Sending command %s", log_strdup(cmd));
   120e8:	4640      	mov	r0, r8
   120ea:	1ae4      	subs	r4, r4, r3
   120ec:	f7fc ff3e 	bl	ef6c <log_strdup>
   120f0:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   120f4:	f364 158f 	bfi	r5, r4, #6, #10
   120f8:	462b      	mov	r3, r5
   120fa:	4602      	mov	r2, r0
   120fc:	4929      	ldr	r1, [pc, #164]	; (121a4 <at_write+0xd8>)
   120fe:	482a      	ldr	r0, [pc, #168]	; (121a8 <at_write+0xdc>)
   12100:	f00a fd64 	bl	1cbcc <log_2>
	return socket_ops->send(sock, buf, len, flags);
   12104:	4b29      	ldr	r3, [pc, #164]	; (121ac <at_write+0xe0>)
   12106:	482a      	ldr	r0, [pc, #168]	; (121b0 <at_write+0xe4>)
   12108:	681b      	ldr	r3, [r3, #0]
   1210a:	463a      	mov	r2, r7
   1210c:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1210e:	4641      	mov	r1, r8
   12110:	2300      	movs	r3, #0
   12112:	6800      	ldr	r0, [r0, #0]
   12114:	47a8      	blx	r5
	if (bytes_sent == -1) {
   12116:	1c43      	adds	r3, r0, #1
   12118:	4605      	mov	r5, r0
   1211a:	d11d      	bne.n	12158 <at_write+0x8c>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   1211c:	2301      	movs	r3, #1
   1211e:	f04f 0500 	mov.w	r5, #0
   12122:	f363 0507 	bfi	r5, r3, #0, #8
   12126:	f364 158f 	bfi	r5, r4, #6, #10
   1212a:	f008 ff43 	bl	1afb4 <z_impl_z_errno>
   1212e:	462a      	mov	r2, r5
   12130:	6801      	ldr	r1, [r0, #0]
   12132:	4820      	ldr	r0, [pc, #128]	; (121b4 <at_write+0xe8>)
   12134:	f00a fd36 	bl	1cba4 <log_1>
   12138:	f008 ff3c 	bl	1afb4 <z_impl_z_errno>
		ret.code  = -errno;
   1213c:	6803      	ldr	r3, [r0, #0]
   1213e:	425b      	negs	r3, r3
   12140:	9300      	str	r3, [sp, #0]
		ret.state = AT_CMD_ERROR;
   12142:	2301      	movs	r3, #1
   12144:	f88d 3004 	strb.w	r3, [sp, #4]
	if (state) {
   12148:	b116      	cbz	r6, 12150 <at_write+0x84>
		*state = ret.state;
   1214a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1214e:	7033      	strb	r3, [r6, #0]
}
   12150:	9800      	ldr	r0, [sp, #0]
   12152:	b002      	add	sp, #8
   12154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&q, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(q, data, timeout);
   12158:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1215c:	4669      	mov	r1, sp
   1215e:	4816      	ldr	r0, [pc, #88]	; (121b8 <at_write+0xec>)
   12160:	f009 f9d8 	bl	1b514 <z_impl_k_msgq_get>
		LOG_DBG("Bytes sent: %d", bytes_sent);
   12164:	2204      	movs	r2, #4
   12166:	f04f 0300 	mov.w	r3, #0
   1216a:	f362 0307 	bfi	r3, r2, #0, #8
   1216e:	f364 138f 	bfi	r3, r4, #6, #10
   12172:	462a      	mov	r2, r5
   12174:	490b      	ldr	r1, [pc, #44]	; (121a4 <at_write+0xd8>)
   12176:	4811      	ldr	r0, [pc, #68]	; (121bc <at_write+0xf0>)
   12178:	f00a fd28 	bl	1cbcc <log_2>
		if (bytes_sent != bytes_to_send) {
   1217c:	42af      	cmp	r7, r5
   1217e:	d0e3      	beq.n	12148 <at_write+0x7c>
			LOG_ERR("Bytes sent (%d) was not the "
   12180:	2201      	movs	r2, #1
   12182:	f04f 0300 	mov.w	r3, #0
   12186:	f362 0307 	bfi	r3, r2, #0, #8
   1218a:	f364 138f 	bfi	r3, r4, #6, #10
   1218e:	463a      	mov	r2, r7
   12190:	4629      	mov	r1, r5
   12192:	480b      	ldr	r0, [pc, #44]	; (121c0 <at_write+0xf4>)
   12194:	f00a fd1a 	bl	1cbcc <log_2>
   12198:	e7d6      	b.n	12148 <at_write+0x7c>
   1219a:	bf00      	nop
   1219c:	0001f398 	.word	0x0001f398
   121a0:	0001f390 	.word	0x0001f390
   121a4:	00020b85 	.word	0x00020b85
   121a8:	00020c7f 	.word	0x00020c7f
   121ac:	20020344 	.word	0x20020344
   121b0:	20020400 	.word	0x20020400
   121b4:	00020c96 	.word	0x00020c96
   121b8:	2002c6e0 	.word	0x2002c6e0
   121bc:	00020cb9 	.word	0x00020cb9
   121c0:	00020ccc 	.word	0x00020ccc

000121c4 <at_cmd_write>:
{
   121c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   121c8:	4605      	mov	r5, r0
   121ca:	4688      	mov	r8, r1
   121cc:	4617      	mov	r7, r2
   121ce:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
   121d0:	4c0a      	ldr	r4, [pc, #40]	; (121fc <at_cmd_write+0x38>)
   121d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   121d6:	4620      	mov	r0, r4
   121d8:	f009 fdc4 	bl	1bd64 <z_impl_k_sem_take>
	response_buf     = buf;
   121dc:	4b08      	ldr	r3, [pc, #32]	; (12200 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   121de:	4631      	mov	r1, r6
	response_buf     = buf;
   121e0:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   121e4:	4b07      	ldr	r3, [pc, #28]	; (12204 <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   121e6:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   121e8:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
   121ea:	f7ff ff6f 	bl	120cc <at_write>
   121ee:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   121f0:	4620      	mov	r0, r4
   121f2:	f009 fd8b 	bl	1bd0c <z_impl_k_sem_give>
}
   121f6:	4628      	mov	r0, r5
   121f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   121fc:	2002c6a0 	.word	0x2002c6a0
   12200:	2002040c 	.word	0x2002040c
   12204:	20020410 	.word	0x20020410

00012208 <at_cmd_set_notification_handler>:
	LOG_DBG("Setting notification handler to %p", handler);
   12208:	2204      	movs	r2, #4
   1220a:	f04f 0300 	mov.w	r3, #0
{
   1220e:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("Setting notification handler to %p", handler);
   12210:	f362 0307 	bfi	r3, r2, #0, #8
   12214:	4c13      	ldr	r4, [pc, #76]	; (12264 <at_cmd_set_notification_handler+0x5c>)
   12216:	4a14      	ldr	r2, [pc, #80]	; (12268 <at_cmd_set_notification_handler+0x60>)
	if (notification_handler != NULL && handler != notification_handler) {
   12218:	4d14      	ldr	r5, [pc, #80]	; (1226c <at_cmd_set_notification_handler+0x64>)
	LOG_DBG("Setting notification handler to %p", handler);
   1221a:	1aa4      	subs	r4, r4, r2
   1221c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   12220:	4602      	mov	r2, r0
   12222:	4913      	ldr	r1, [pc, #76]	; (12270 <at_cmd_set_notification_handler+0x68>)
{
   12224:	4606      	mov	r6, r0
	LOG_DBG("Setting notification handler to %p", handler);
   12226:	f364 138f 	bfi	r3, r4, #6, #10
   1222a:	4812      	ldr	r0, [pc, #72]	; (12274 <at_cmd_set_notification_handler+0x6c>)
   1222c:	f00a fcce 	bl	1cbcc <log_2>
	if (notification_handler != NULL && handler != notification_handler) {
   12230:	6829      	ldr	r1, [r5, #0]
   12232:	b159      	cbz	r1, 1224c <at_cmd_set_notification_handler+0x44>
   12234:	428e      	cmp	r6, r1
   12236:	d009      	beq.n	1224c <at_cmd_set_notification_handler+0x44>
		LOG_WRN("Forgetting prior notification handler %p",
   12238:	f04f 0200 	mov.w	r2, #0
   1223c:	2302      	movs	r3, #2
   1223e:	f363 0207 	bfi	r2, r3, #0, #8
   12242:	f364 128f 	bfi	r2, r4, #6, #10
   12246:	480c      	ldr	r0, [pc, #48]	; (12278 <at_cmd_set_notification_handler+0x70>)
   12248:	f00a fcac 	bl	1cba4 <log_1>
	return z_impl_k_sem_take(sem, timeout);
   1224c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12250:	480a      	ldr	r0, [pc, #40]	; (1227c <at_cmd_set_notification_handler+0x74>)
   12252:	f009 fd87 	bl	1bd64 <z_impl_k_sem_take>
	notification_handler = handler;
   12256:	602e      	str	r6, [r5, #0]
	z_impl_k_sem_give(sem);
   12258:	4808      	ldr	r0, [pc, #32]	; (1227c <at_cmd_set_notification_handler+0x74>)
}
   1225a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1225e:	f009 bd55 	b.w	1bd0c <z_impl_k_sem_give>
   12262:	bf00      	nop
   12264:	0001f398 	.word	0x0001f398
   12268:	0001f390 	.word	0x0001f390
   1226c:	20020408 	.word	0x20020408
   12270:	00020b8e 	.word	0x00020b8e
   12274:	00020c2f 	.word	0x00020c2f
   12278:	00020c56 	.word	0x00020c56
   1227c:	2002c6a0 	.word	0x2002c6a0

00012280 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   12280:	4b0b      	ldr	r3, [pc, #44]	; (122b0 <find_node+0x30>)
{
   12282:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   12284:	681b      	ldr	r3, [r3, #0]
   12286:	b153      	cbz	r3, 1229e <find_node+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12288:	2500      	movs	r5, #0
   1228a:	461c      	mov	r4, r3
   1228c:	681b      	ldr	r3, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   1228e:	6866      	ldr	r6, [r4, #4]
   12290:	428e      	cmp	r6, r1
   12292:	d106      	bne.n	122a2 <find_node+0x22>
   12294:	68a6      	ldr	r6, [r4, #8]
   12296:	4296      	cmp	r6, r2
   12298:	d103      	bne.n	122a2 <find_node+0x22>
			*prev_out = prev;
			return curr;
   1229a:	4623      	mov	r3, r4
			*prev_out = prev;
   1229c:	6005      	str	r5, [r0, #0]
		}
		prev = curr;
	}
	return NULL;
}
   1229e:	4618      	mov	r0, r3
   122a0:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   122a2:	2b00      	cmp	r3, #0
   122a4:	d0fb      	beq.n	1229e <find_node+0x1e>
   122a6:	4625      	mov	r5, r4
   122a8:	461c      	mov	r4, r3
   122aa:	681b      	ldr	r3, [r3, #0]
   122ac:	e7ef      	b.n	1228e <find_node+0xe>
   122ae:	bf00      	nop
   122b0:	200204c4 	.word	0x200204c4

000122b4 <module_init>:

	k_mutex_unlock(&list_mtx);
}

static int module_init(struct device *dev)
{
   122b4:	b510      	push	{r4, lr}
	list->head = NULL;
   122b6:	2400      	movs	r4, #0
   122b8:	4b03      	ldr	r3, [pc, #12]	; (122c8 <module_init+0x14>)
	ARG_UNUSED(dev);

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
   122ba:	4804      	ldr	r0, [pc, #16]	; (122cc <module_init+0x18>)
	list->tail = NULL;
   122bc:	e9c3 4400 	strd	r4, r4, [r3]
   122c0:	f7ff ffa2 	bl	12208 <at_cmd_set_notification_handler>
	return 0;
}
   122c4:	4620      	mov	r0, r4
   122c6:	bd10      	pop	{r4, pc}
   122c8:	200204c4 	.word	0x200204c4
   122cc:	000122d1 	.word	0x000122d1

000122d0 <notif_dispatch>:
{
   122d0:	b538      	push	{r3, r4, r5, lr}
   122d2:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   122d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   122d8:	480a      	ldr	r0, [pc, #40]	; (12304 <notif_dispatch+0x34>)
   122da:	f009 f979 	bl	1b5d0 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   122de:	4b0a      	ldr	r3, [pc, #40]	; (12308 <notif_dispatch+0x38>)
   122e0:	681b      	ldr	r3, [r3, #0]
   122e2:	b923      	cbnz	r3, 122ee <notif_dispatch+0x1e>
}
   122e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_mutex_unlock(mutex);
   122e8:	4806      	ldr	r0, [pc, #24]	; (12304 <notif_dispatch+0x34>)
   122ea:	f009 b9e3 	b.w	1b6b4 <z_impl_k_mutex_unlock>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   122ee:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   122f0:	689a      	ldr	r2, [r3, #8]
   122f2:	4629      	mov	r1, r5
   122f4:	6858      	ldr	r0, [r3, #4]
   122f6:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   122f8:	2c00      	cmp	r4, #0
   122fa:	d0f3      	beq.n	122e4 <notif_dispatch+0x14>
   122fc:	4623      	mov	r3, r4
   122fe:	6824      	ldr	r4, [r4, #0]
   12300:	e7f6      	b.n	122f0 <notif_dispatch+0x20>
   12302:	bf00      	nop
   12304:	2002c6cc 	.word	0x2002c6cc
   12308:	200204c4 	.word	0x200204c4

0001230c <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   1230c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1230e:	4606      	mov	r6, r0
	if (handler == NULL) {
   12310:	460c      	mov	r4, r1
   12312:	b999      	cbnz	r1, 1233c <at_notif_register_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   12314:	2201      	movs	r2, #1
   12316:	f04f 0300 	mov.w	r3, #0
   1231a:	491f      	ldr	r1, [pc, #124]	; (12398 <at_notif_register_handler+0x8c>)
   1231c:	f362 0307 	bfi	r3, r2, #0, #8
   12320:	4a1e      	ldr	r2, [pc, #120]	; (1239c <at_notif_register_handler+0x90>)
   12322:	1a52      	subs	r2, r2, r1
   12324:	08d2      	lsrs	r2, r2, #3
   12326:	f362 138f 	bfi	r3, r2, #6, #10
   1232a:	4601      	mov	r1, r0
   1232c:	4622      	mov	r2, r4
   1232e:	481c      	ldr	r0, [pc, #112]	; (123a0 <at_notif_register_handler+0x94>)
   12330:	f00a fc4c 	bl	1cbcc <log_2>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   12334:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   12338:	b002      	add	sp, #8
   1233a:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   1233c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12340:	4818      	ldr	r0, [pc, #96]	; (123a4 <at_notif_register_handler+0x98>)
   12342:	f009 f945 	bl	1b5d0 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   12346:	4622      	mov	r2, r4
   12348:	4631      	mov	r1, r6
   1234a:	a801      	add	r0, sp, #4
   1234c:	f7ff ff98 	bl	12280 <find_node>
   12350:	4605      	mov	r5, r0
   12352:	b120      	cbz	r0, 1235e <at_notif_register_handler+0x52>
	z_impl_k_mutex_unlock(mutex);
   12354:	4813      	ldr	r0, [pc, #76]	; (123a4 <at_notif_register_handler+0x98>)
   12356:	f009 f9ad 	bl	1b6b4 <z_impl_k_mutex_unlock>
	return 0;
   1235a:	2000      	movs	r0, #0
	return append_notif_handler(context, handler);
   1235c:	e7ec      	b.n	12338 <at_notif_register_handler+0x2c>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   1235e:	200c      	movs	r0, #12
   12360:	f009 f876 	bl	1b450 <k_malloc>
   12364:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   12366:	b928      	cbnz	r0, 12374 <at_notif_register_handler+0x68>
   12368:	480e      	ldr	r0, [pc, #56]	; (123a4 <at_notif_register_handler+0x98>)
   1236a:	f009 f9a3 	bl	1b6b4 <z_impl_k_mutex_unlock>
		return -ENOBUFS;
   1236e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   12372:	e7e1      	b.n	12338 <at_notif_register_handler+0x2c>
	memset(to_ins, 0, sizeof(struct notif_handler));
   12374:	220c      	movs	r2, #12
   12376:	4629      	mov	r1, r5
   12378:	f00b f9a7 	bl	1d6ca <memset>
	to_ins->ctx     = ctx;
   1237c:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   1237e:	4a0a      	ldr	r2, [pc, #40]	; (123a8 <at_notif_register_handler+0x9c>)
	parent->next = child;
   12380:	601d      	str	r5, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   12382:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   12384:	e9c3 6401 	strd	r6, r4, [r3, #4]
   12388:	b911      	cbnz	r1, 12390 <at_notif_register_handler+0x84>
	list->head = node;
   1238a:	e9c2 3300 	strd	r3, r3, [r2]
   1238e:	e7e1      	b.n	12354 <at_notif_register_handler+0x48>
	parent->next = child;
   12390:	600b      	str	r3, [r1, #0]
	list->tail = node;
   12392:	6053      	str	r3, [r2, #4]
   12394:	e7de      	b.n	12354 <at_notif_register_handler+0x48>
   12396:	bf00      	nop
   12398:	0001f390 	.word	0x0001f390
   1239c:	0001f3a8 	.word	0x0001f3a8
   123a0:	00020e4a 	.word	0x00020e4a
   123a4:	2002c6cc 	.word	0x2002c6cc
   123a8:	200204c4 	.word	0x200204c4

000123ac <at_notif_deregister_handler>:

int at_notif_deregister_handler(void *context, at_notif_handler_t handler)
{
   123ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   123ae:	4605      	mov	r5, r0
	if (handler == NULL) {
   123b0:	460c      	mov	r4, r1
   123b2:	b999      	cbnz	r1, 123dc <at_notif_deregister_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   123b4:	2201      	movs	r2, #1
   123b6:	f04f 0300 	mov.w	r3, #0
   123ba:	4922      	ldr	r1, [pc, #136]	; (12444 <at_notif_deregister_handler+0x98>)
   123bc:	f362 0307 	bfi	r3, r2, #0, #8
   123c0:	4a21      	ldr	r2, [pc, #132]	; (12448 <at_notif_deregister_handler+0x9c>)
   123c2:	1a89      	subs	r1, r1, r2
   123c4:	08c9      	lsrs	r1, r1, #3
   123c6:	f361 138f 	bfi	r3, r1, #6, #10
   123ca:	4622      	mov	r2, r4
   123cc:	4601      	mov	r1, r0
   123ce:	481f      	ldr	r0, [pc, #124]	; (1244c <at_notif_deregister_handler+0xa0>)
   123d0:	f00a fbfc 	bl	1cbcc <log_2>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   123d4:	f06f 0015 	mvn.w	r0, #21
	}
	return remove_notif_handler(context, handler);
}
   123d8:	b003      	add	sp, #12
   123da:	bd30      	pop	{r4, r5, pc}
	struct notif_handler *curr, *prev = NULL;
   123dc:	2300      	movs	r3, #0
   123de:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   123e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   123e4:	481a      	ldr	r0, [pc, #104]	; (12450 <at_notif_deregister_handler+0xa4>)
   123e6:	f009 f8f3 	bl	1b5d0 <z_impl_k_mutex_lock>
	curr = find_node(&prev, ctx, handler);
   123ea:	4622      	mov	r2, r4
   123ec:	4629      	mov	r1, r5
   123ee:	a801      	add	r0, sp, #4
   123f0:	f7ff ff46 	bl	12280 <find_node>
	if (curr == NULL) {
   123f4:	b990      	cbnz	r0, 1241c <at_notif_deregister_handler+0x70>
		LOG_WRN("Handler not registered. Nothing to do");
   123f6:	2302      	movs	r3, #2
   123f8:	f04f 0100 	mov.w	r1, #0
   123fc:	4a12      	ldr	r2, [pc, #72]	; (12448 <at_notif_deregister_handler+0x9c>)
   123fe:	f363 0107 	bfi	r1, r3, #0, #8
   12402:	4b10      	ldr	r3, [pc, #64]	; (12444 <at_notif_deregister_handler+0x98>)
   12404:	4813      	ldr	r0, [pc, #76]	; (12454 <at_notif_deregister_handler+0xa8>)
   12406:	1a9b      	subs	r3, r3, r2
   12408:	08db      	lsrs	r3, r3, #3
   1240a:	f363 118f 	bfi	r1, r3, #6, #10
   1240e:	f00a fbbc 	bl	1cb8a <log_0>
	z_impl_k_mutex_unlock(mutex);
   12412:	480f      	ldr	r0, [pc, #60]	; (12450 <at_notif_deregister_handler+0xa4>)
   12414:	f009 f94e 	bl	1b6b4 <z_impl_k_mutex_unlock>
	return remove_notif_handler(context, handler);
   12418:	2000      	movs	r0, #0
   1241a:	e7dd      	b.n	123d8 <at_notif_deregister_handler+0x2c>
	sys_slist_remove(&handler_list, &prev->node, &curr->node);
   1241c:	9a01      	ldr	r2, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   1241e:	6801      	ldr	r1, [r0, #0]
   12420:	4b0d      	ldr	r3, [pc, #52]	; (12458 <at_notif_deregister_handler+0xac>)
   12422:	b94a      	cbnz	r2, 12438 <at_notif_deregister_handler+0x8c>
   12424:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   12426:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   12428:	4290      	cmp	r0, r2
   1242a:	d100      	bne.n	1242e <at_notif_deregister_handler+0x82>
	list->tail = node;
   1242c:	6059      	str	r1, [r3, #4]
	parent->next = child;
   1242e:	2300      	movs	r3, #0
   12430:	6003      	str	r3, [r0, #0]
	k_free(curr);
   12432:	f00c fa72 	bl	1e91a <k_free>
   12436:	e7ec      	b.n	12412 <at_notif_deregister_handler+0x66>
   12438:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1243a:	6859      	ldr	r1, [r3, #4]
   1243c:	4288      	cmp	r0, r1
	list->tail = node;
   1243e:	bf08      	it	eq
   12440:	605a      	streq	r2, [r3, #4]
   12442:	e7f4      	b.n	1242e <at_notif_deregister_handler+0x82>
   12444:	0001f3a8 	.word	0x0001f3a8
   12448:	0001f390 	.word	0x0001f390
   1244c:	00020e4a 	.word	0x00020e4a
   12450:	2002c6cc 	.word	0x2002c6cc
   12454:	00020e24 	.word	0x00020e24
   12458:	200204c4 	.word	0x200204c4

0001245c <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   1245c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   12460:	6805      	ldr	r5, [r0, #0]
{
   12462:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   12464:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12466:	782b      	ldrb	r3, [r5, #0]
{
   12468:	4680      	mov	r8, r0
   1246a:	460f      	mov	r7, r1
   1246c:	4616      	mov	r6, r2
   1246e:	2b00      	cmp	r3, #0
   12470:	f000 80c1 	beq.w	125f6 <at_parse_process_element+0x19a>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   12474:	4b61      	ldr	r3, [pc, #388]	; (125fc <at_parse_process_element+0x1a0>)
   12476:	781c      	ldrb	r4, [r3, #0]
   12478:	2c05      	cmp	r4, #5
   1247a:	d110      	bne.n	1249e <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   1247c:	1c6b      	adds	r3, r5, #1
   1247e:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   12480:	9a00      	ldr	r2, [sp, #0]
   12482:	7810      	ldrb	r0, [r2, #0]
   12484:	f00c f8a7 	bl	1e5d6 <is_valid_notification_char>
   12488:	b930      	cbnz	r0, 12498 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1248a:	1b53      	subs	r3, r2, r5

		while (isxdigit(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1248c:	462a      	mov	r2, r5
   1248e:	4639      	mov	r1, r7
   12490:	4630      	mov	r0, r6
   12492:	f00c f989 	bl	1e7a8 <at_params_string_put>
   12496:	e01b      	b.n	124d0 <at_parse_process_element+0x74>
			tmpstr++;
   12498:	3201      	adds	r2, #1
   1249a:	9200      	str	r2, [sp, #0]
   1249c:	e7f0      	b.n	12480 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   1249e:	2c06      	cmp	r4, #6
   124a0:	d124      	bne.n	124ec <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   124a2:	4668      	mov	r0, sp
   124a4:	f00c f889 	bl	1e5ba <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   124a8:	9a00      	ldr	r2, [sp, #0]
   124aa:	7810      	ldrb	r0, [r2, #0]
   124ac:	f00c f893 	bl	1e5d6 <is_valid_notification_char>
   124b0:	b9a8      	cbnz	r0, 124de <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   124b2:	1b53      	subs	r3, r2, r5
   124b4:	4639      	mov	r1, r7
   124b6:	462a      	mov	r2, r5
   124b8:	4630      	mov	r0, r6
   124ba:	f00c f975 	bl	1e7a8 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   124be:	9b00      	ldr	r3, [sp, #0]
   124c0:	781a      	ldrb	r2, [r3, #0]
   124c2:	2a3d      	cmp	r2, #61	; 0x3d
   124c4:	d10e      	bne.n	124e4 <at_parse_process_element+0x88>
   124c6:	785a      	ldrb	r2, [r3, #1]
   124c8:	2a3f      	cmp	r2, #63	; 0x3f
   124ca:	d101      	bne.n	124d0 <at_parse_process_element+0x74>
			tmpstr += 2;
   124cc:	3302      	adds	r3, #2
			tmpstr++;
   124ce:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   124d0:	2000      	movs	r0, #0
	*str = tmpstr;
   124d2:	9b00      	ldr	r3, [sp, #0]
   124d4:	f8c8 3000 	str.w	r3, [r8]
}
   124d8:	b023      	add	sp, #140	; 0x8c
   124da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   124de:	3201      	adds	r2, #1
   124e0:	9200      	str	r2, [sp, #0]
   124e2:	e7e1      	b.n	124a8 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   124e4:	2a3f      	cmp	r2, #63	; 0x3f
   124e6:	d1f3      	bne.n	124d0 <at_parse_process_element+0x74>
			tmpstr++;
   124e8:	3301      	adds	r3, #1
   124ea:	e7f0      	b.n	124ce <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   124ec:	2c07      	cmp	r4, #7
   124ee:	d103      	bne.n	124f8 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   124f0:	4610      	mov	r0, r2
   124f2:	f00c f934 	bl	1e75e <at_params_empty_put>
   124f6:	e7eb      	b.n	124d0 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   124f8:	2c02      	cmp	r4, #2
   124fa:	d112      	bne.n	12522 <at_parse_process_element+0xc6>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   124fc:	9a00      	ldr	r2, [sp, #0]
   124fe:	7810      	ldrb	r0, [r2, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   12500:	2822      	cmp	r0, #34	; 0x22
   12502:	d003      	beq.n	1250c <at_parse_process_element+0xb0>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12504:	b110      	cbz	r0, 1250c <at_parse_process_element+0xb0>
		       !is_lfcr(*tmpstr)) {
   12506:	f00c f84f 	bl	1e5a8 <is_lfcr>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   1250a:	b138      	cbz	r0, 1251c <at_parse_process_element+0xc0>
		at_params_string_put(list, index, start_ptr,
   1250c:	1b53      	subs	r3, r2, r5
   1250e:	4639      	mov	r1, r7
   12510:	462a      	mov	r2, r5
   12512:	4630      	mov	r0, r6
   12514:	f00c f948 	bl	1e7a8 <at_params_string_put>
		tmpstr++;
   12518:	9b00      	ldr	r3, [sp, #0]
   1251a:	e7e5      	b.n	124e8 <at_parse_process_element+0x8c>
			tmpstr++;
   1251c:	3201      	adds	r2, #1
   1251e:	9200      	str	r2, [sp, #0]
   12520:	e7ec      	b.n	124fc <at_parse_process_element+0xa0>
	} else if (state == ARRAY) {
   12522:	2c01      	cmp	r4, #1
   12524:	d13c      	bne.n	125a0 <at_parse_process_element+0x144>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   12526:	4628      	mov	r0, r5
   12528:	220a      	movs	r2, #10
   1252a:	a901      	add	r1, sp, #4
   1252c:	f00a ff9a 	bl	1d464 <strtoul>
		tmpstr = next;
   12530:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   12532:	4d33      	ldr	r5, [pc, #204]	; (12600 <at_parse_process_element+0x1a4>)
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   12534:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   12536:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   12538:	9800      	ldr	r0, [sp, #0]
   1253a:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   1253c:	2b29      	cmp	r3, #41	; 0x29
   1253e:	d028      	beq.n	12592 <at_parse_process_element+0x136>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12540:	b33b      	cbz	r3, 12592 <at_parse_process_element+0x136>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   12542:	3b2c      	subs	r3, #44	; 0x2c
   12544:	b2db      	uxtb	r3, r3
   12546:	3001      	adds	r0, #1
   12548:	2b11      	cmp	r3, #17
				tmparray[i++] =
   1254a:	9000      	str	r0, [sp, #0]
   1254c:	d803      	bhi.n	12556 <at_parse_process_element+0xfa>
   1254e:	fa25 f303 	lsr.w	r3, r5, r3
   12552:	07db      	lsls	r3, r3, #31
   12554:	d408      	bmi.n	12568 <at_parse_process_element+0x10c>
				tmpstr++;
   12556:	46a1      	mov	r9, r4
   12558:	e004      	b.n	12564 <at_parse_process_element+0x108>
					tmpstr = next;
   1255a:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1255c:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   12560:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   12562:	d015      	beq.n	12590 <at_parse_process_element+0x134>
				tmpstr++;
   12564:	464c      	mov	r4, r9
   12566:	e7e7      	b.n	12538 <at_parse_process_element+0xdc>
					(u32_t)strtoul(++tmpstr, &next, 10);
   12568:	220a      	movs	r2, #10
   1256a:	a901      	add	r1, sp, #4
   1256c:	f00a ff7a 	bl	1d464 <strtoul>
				tmparray[i++] =
   12570:	ab22      	add	r3, sp, #136	; 0x88
   12572:	f104 0901 	add.w	r9, r4, #1
   12576:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1257a:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   1257e:	9800      	ldr	r0, [sp, #0]
   12580:	f00b f83e 	bl	1d600 <strlen>
   12584:	4604      	mov	r4, r0
   12586:	9801      	ldr	r0, [sp, #4]
   12588:	f00b f83a 	bl	1d600 <strlen>
   1258c:	4284      	cmp	r4, r0
   1258e:	d1e4      	bne.n	1255a <at_parse_process_element+0xfe>
   12590:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(u32_t));
   12592:	00a3      	lsls	r3, r4, #2
   12594:	aa02      	add	r2, sp, #8
   12596:	4639      	mov	r1, r7
   12598:	4630      	mov	r0, r6
   1259a:	f00c f928 	bl	1e7ee <at_params_array_put>
   1259e:	e7bb      	b.n	12518 <at_parse_process_element+0xbc>
	} else if (state == NUMBER) {
   125a0:	2c03      	cmp	r4, #3
   125a2:	d115      	bne.n	125d0 <at_parse_process_element+0x174>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   125a4:	220a      	movs	r2, #10
   125a6:	a902      	add	r1, sp, #8
   125a8:	4628      	mov	r0, r5
   125aa:	f00a ff5b 	bl	1d464 <strtoul>
		tmpstr = next;
   125ae:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   125b0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   125b4:	4602      	mov	r2, r0
		tmpstr = next;
   125b6:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   125b8:	d205      	bcs.n	125c6 <at_parse_process_element+0x16a>
			at_params_short_put(list, index, (u16_t)value);
   125ba:	b282      	uxth	r2, r0
   125bc:	4639      	mov	r1, r7
   125be:	4630      	mov	r0, r6
   125c0:	f00c f8ba 	bl	1e738 <at_params_short_put>
   125c4:	e784      	b.n	124d0 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   125c6:	4639      	mov	r1, r7
   125c8:	4630      	mov	r0, r6
   125ca:	f00c f8da 	bl	1e782 <at_params_int_put>
   125ce:	e77f      	b.n	124d0 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   125d0:	2c04      	cmp	r4, #4
   125d2:	f47f af7d 	bne.w	124d0 <at_parse_process_element+0x74>
		while (isxdigit(*tmpstr)) {
   125d6:	9b00      	ldr	r3, [sp, #0]
   125d8:	781a      	ldrb	r2, [r3, #0]
	return (int)(((ua - (unsigned)'0') < 10U) ||
   125da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   125de:	2909      	cmp	r1, #9
   125e0:	d906      	bls.n	125f0 <at_parse_process_element+0x194>
			((ua | 32U) - (unsigned)'a' < 6U));
   125e2:	f042 0220 	orr.w	r2, r2, #32
   125e6:	3a61      	subs	r2, #97	; 0x61
	return (int)(((ua - (unsigned)'0') < 10U) ||
   125e8:	2a05      	cmp	r2, #5
   125ea:	d901      	bls.n	125f0 <at_parse_process_element+0x194>
		at_params_string_put(list, index, start_ptr,
   125ec:	1b5b      	subs	r3, r3, r5
   125ee:	e74d      	b.n	1248c <at_parse_process_element+0x30>
			tmpstr++;
   125f0:	3301      	adds	r3, #1
   125f2:	9300      	str	r3, [sp, #0]
   125f4:	e7ef      	b.n	125d6 <at_parse_process_element+0x17a>
		return -1;
   125f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   125fa:	e76d      	b.n	124d8 <at_parse_process_element+0x7c>
   125fc:	2002658a 	.word	0x2002658a
   12600:	00024001 	.word	0x00024001

00012604 <at_parse_detect_type>:
{
   12604:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   12606:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   12608:	2900      	cmp	r1, #0
{
   1260a:	4605      	mov	r5, r0
   1260c:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   1260e:	d144      	bne.n	1269a <at_parse_detect_type+0x96>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   12610:	2a2b      	cmp	r2, #43	; 0x2b
   12612:	4e2a      	ldr	r6, [pc, #168]	; (126bc <at_parse_detect_type+0xb8>)
   12614:	d001      	beq.n	1261a <at_parse_detect_type+0x16>
   12616:	2a25      	cmp	r2, #37	; 0x25
   12618:	d104      	bne.n	12624 <at_parse_detect_type+0x20>
	state = new_state;
   1261a:	2305      	movs	r3, #5
   1261c:	7033      	strb	r3, [r6, #0]
	return 0;
   1261e:	2000      	movs	r0, #0
	*str = tmpstr;
   12620:	602c      	str	r4, [r5, #0]
}
   12622:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   12624:	4620      	mov	r0, r4
   12626:	f00b ffe2 	bl	1e5ee <is_command>
   1262a:	b3a0      	cbz	r0, 12696 <at_parse_detect_type+0x92>
	state = new_state;
   1262c:	2306      	movs	r3, #6
   1262e:	e7f5      	b.n	1261c <at_parse_detect_type+0x18>
 * @retval true  If character is number character
 * @retval false If character is something else
 */
static inline bool is_number(char chr)
{
	if (isdigit(chr) || (chr == '-') || (chr == '+')) {
   12630:	f647 71e5 	movw	r1, #32741	; 0x7fe5
   12634:	fa21 f303 	lsr.w	r3, r1, r3
   12638:	07d9      	lsls	r1, r3, #31
   1263a:	d50a      	bpl.n	12652 <at_parse_detect_type+0x4e>
   1263c:	2203      	movs	r2, #3
   1263e:	4b1f      	ldr	r3, [pc, #124]	; (126bc <at_parse_detect_type+0xb8>)
   12640:	701a      	strb	r2, [r3, #0]
   12642:	e7ec      	b.n	1261e <at_parse_detect_type+0x1a>
	if (chr == '(') {
   12644:	2a28      	cmp	r2, #40	; 0x28
   12646:	d104      	bne.n	12652 <at_parse_detect_type+0x4e>
   12648:	2201      	movs	r2, #1
   1264a:	4b1c      	ldr	r3, [pc, #112]	; (126bc <at_parse_detect_type+0xb8>)
		tmpstr++;
   1264c:	4414      	add	r4, r2
	state = new_state;
   1264e:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   12650:	e7e5      	b.n	1261e <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   12652:	4610      	mov	r0, r2
   12654:	f00b ffa8 	bl	1e5a8 <is_lfcr>
   12658:	b170      	cbz	r0, 12678 <at_parse_detect_type+0x74>
   1265a:	4918      	ldr	r1, [pc, #96]	; (126bc <at_parse_detect_type+0xb8>)
   1265c:	7808      	ldrb	r0, [r1, #0]
   1265e:	2803      	cmp	r0, #3
   12660:	d108      	bne.n	12674 <at_parse_detect_type+0x70>
		while (is_lfcr(*tmpstr)) {
   12662:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   12666:	f00b ff9f 	bl	1e5a8 <is_lfcr>
   1266a:	2800      	cmp	r0, #0
   1266c:	d1f9      	bne.n	12662 <at_parse_detect_type+0x5e>
	state = new_state;
   1266e:	2304      	movs	r3, #4
   12670:	700b      	strb	r3, [r1, #0]
   12672:	e7d4      	b.n	1261e <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   12674:	2807      	cmp	r0, #7
   12676:	d0d2      	beq.n	1261e <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   12678:	3a2c      	subs	r2, #44	; 0x2c
   1267a:	b2d2      	uxtb	r2, r2
   1267c:	2a11      	cmp	r2, #17
   1267e:	d807      	bhi.n	12690 <at_parse_detect_type+0x8c>
   12680:	4b0f      	ldr	r3, [pc, #60]	; (126c0 <at_parse_detect_type+0xbc>)
   12682:	fa23 f202 	lsr.w	r2, r3, r2
   12686:	07d3      	lsls	r3, r2, #31
   12688:	d502      	bpl.n	12690 <at_parse_detect_type+0x8c>
	state = new_state;
   1268a:	4b0c      	ldr	r3, [pc, #48]	; (126bc <at_parse_detect_type+0xb8>)
   1268c:	2207      	movs	r2, #7
   1268e:	e7d7      	b.n	12640 <at_parse_detect_type+0x3c>
		return -1;
   12690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12694:	e7c5      	b.n	12622 <at_parse_detect_type+0x1e>
	state = new_state;
   12696:	2302      	movs	r3, #2
   12698:	e7c0      	b.n	1261c <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   1269a:	dd03      	ble.n	126a4 <at_parse_detect_type+0xa0>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1269c:	2a2b      	cmp	r2, #43	; 0x2b
   1269e:	d0f7      	beq.n	12690 <at_parse_detect_type+0x8c>
   126a0:	2a25      	cmp	r2, #37	; 0x25
   126a2:	d0f5      	beq.n	12690 <at_parse_detect_type+0x8c>
	if (isdigit(chr) || (chr == '-') || (chr == '+')) {
   126a4:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
   126a8:	b2db      	uxtb	r3, r3
   126aa:	2b0e      	cmp	r3, #14
   126ac:	d9c0      	bls.n	12630 <at_parse_detect_type+0x2c>
	if (chr == '"') {
   126ae:	2a22      	cmp	r2, #34	; 0x22
   126b0:	d1c8      	bne.n	12644 <at_parse_detect_type+0x40>
	state = new_state;
   126b2:	2202      	movs	r2, #2
   126b4:	4b01      	ldr	r3, [pc, #4]	; (126bc <at_parse_detect_type+0xb8>)
		tmpstr++;
   126b6:	3401      	adds	r4, #1
	state = new_state;
   126b8:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   126ba:	e7b0      	b.n	1261e <at_parse_detect_type+0x1a>
   126bc:	2002658a 	.word	0x2002658a
   126c0:	00024001 	.word	0x00024001

000126c4 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   126c4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   126c8:	4688      	mov	r8, r1
   126ca:	4616      	mov	r6, r2
   126cc:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   126ce:	4604      	mov	r4, r0
   126d0:	2800      	cmp	r0, #0
   126d2:	d07c      	beq.n	127ce <at_parser_max_params_from_str+0x10a>
   126d4:	2a00      	cmp	r2, #0
   126d6:	d07a      	beq.n	127ce <at_parser_max_params_from_str+0x10a>
   126d8:	6853      	ldr	r3, [r2, #4]
   126da:	2b00      	cmp	r3, #0
   126dc:	d077      	beq.n	127ce <at_parser_max_params_from_str+0x10a>
	state = IDLE;
   126de:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   126e0:	4610      	mov	r0, r2
   126e2:	f00c f811 	bl	1e708 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   126e6:	6832      	ldr	r2, [r6, #0]
	const char *str = *at_params_str;
   126e8:	9401      	str	r4, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   126ea:	4297      	cmp	r7, r2
   126ec:	bf28      	it	cs
   126ee:	4617      	movcs	r7, r2
	int index = 0;
   126f0:	462c      	mov	r4, r5
	state = IDLE;
   126f2:	4b38      	ldr	r3, [pc, #224]	; (127d4 <at_parser_max_params_from_str+0x110>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   126f4:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 127d8 <at_parser_max_params_from_str+0x114>
   126f8:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   126fa:	9a01      	ldr	r2, [sp, #4]
   126fc:	7813      	ldrb	r3, [r2, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   126fe:	2b00      	cmp	r3, #0
   12700:	d04b      	beq.n	1279a <at_parser_max_params_from_str+0xd6>
   12702:	42a7      	cmp	r7, r4
   12704:	d949      	bls.n	1279a <at_parser_max_params_from_str+0xd6>
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   12706:	2b20      	cmp	r3, #32
   12708:	d002      	beq.n	12710 <at_parser_max_params_from_str+0x4c>
   1270a:	3b09      	subs	r3, #9
   1270c:	2b04      	cmp	r3, #4
   1270e:	d801      	bhi.n	12714 <at_parser_max_params_from_str+0x50>
			str++;
   12710:	3201      	adds	r2, #1
   12712:	9201      	str	r2, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   12714:	4621      	mov	r1, r4
   12716:	a801      	add	r0, sp, #4
   12718:	f7ff ff74 	bl	12604 <at_parse_detect_type>
   1271c:	1c42      	adds	r2, r0, #1
   1271e:	d03c      	beq.n	1279a <at_parser_max_params_from_str+0xd6>
		if (at_parse_process_element(&str, index, list) == -1) {
   12720:	4632      	mov	r2, r6
   12722:	4621      	mov	r1, r4
   12724:	a801      	add	r0, sp, #4
   12726:	f7ff fe99 	bl	1245c <at_parse_process_element>
   1272a:	1c43      	adds	r3, r0, #1
   1272c:	d035      	beq.n	1279a <at_parser_max_params_from_str+0xd6>
		if (is_separator(*str)) {
   1272e:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   12730:	781a      	ldrb	r2, [r3, #0]
   12732:	3a2c      	subs	r2, #44	; 0x2c
   12734:	b2d2      	uxtb	r2, r2
   12736:	2a11      	cmp	r2, #17
   12738:	d81a      	bhi.n	12770 <at_parser_max_params_from_str+0xac>
   1273a:	fa29 f202 	lsr.w	r2, r9, r2
   1273e:	07d1      	lsls	r1, r2, #31
   12740:	d516      	bpl.n	12770 <at_parser_max_params_from_str+0xac>
			if (is_lfcr(*(str + 1))) {
   12742:	7858      	ldrb	r0, [r3, #1]
   12744:	f00b ff30 	bl	1e5a8 <is_lfcr>
   12748:	b178      	cbz	r0, 1276a <at_parser_max_params_from_str+0xa6>
				index++;
   1274a:	3401      	adds	r4, #1
				if (index == max_params) {
   1274c:	42bc      	cmp	r4, r7
   1274e:	d039      	beq.n	127c4 <at_parser_max_params_from_str+0x100>
				if (at_parse_detect_type(&str, index) == -1) {
   12750:	4621      	mov	r1, r4
   12752:	a801      	add	r0, sp, #4
   12754:	f7ff ff56 	bl	12604 <at_parse_detect_type>
   12758:	1c42      	adds	r2, r0, #1
   1275a:	d01e      	beq.n	1279a <at_parser_max_params_from_str+0xd6>
				if (at_parse_process_element(&str, index,
   1275c:	4632      	mov	r2, r6
   1275e:	4621      	mov	r1, r4
   12760:	a801      	add	r0, sp, #4
   12762:	f7ff fe7b 	bl	1245c <at_parse_process_element>
   12766:	1c43      	adds	r3, r0, #1
   12768:	d017      	beq.n	1279a <at_parser_max_params_from_str+0xd6>
			str++;
   1276a:	9b01      	ldr	r3, [sp, #4]
   1276c:	3301      	adds	r3, #1
   1276e:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   12770:	9a01      	ldr	r2, [sp, #4]
   12772:	7810      	ldrb	r0, [r2, #0]
   12774:	f00b ff18 	bl	1e5a8 <is_lfcr>
   12778:	b1f8      	cbz	r0, 127ba <at_parser_max_params_from_str+0xf6>
   1277a:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   1277c:	7811      	ldrb	r1, [r2, #0]
   1277e:	4692      	mov	sl, r2
   12780:	4608      	mov	r0, r1
   12782:	3201      	adds	r2, #1
   12784:	f00b ff10 	bl	1e5a8 <is_lfcr>
   12788:	2800      	cmp	r0, #0
   1278a:	d1f7      	bne.n	1277c <at_parser_max_params_from_str+0xb8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1278c:	b119      	cbz	r1, 12796 <at_parser_max_params_from_str+0xd2>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1278e:	292b      	cmp	r1, #43	; 0x2b
   12790:	d001      	beq.n	12796 <at_parser_max_params_from_str+0xd2>
   12792:	2925      	cmp	r1, #37	; 0x25
   12794:	d111      	bne.n	127ba <at_parser_max_params_from_str+0xf6>
				str += i;
   12796:	f8cd a004 	str.w	sl, [sp, #4]
	*at_params_str = str;
   1279a:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   1279c:	b9a5      	cbnz	r5, 127c8 <at_parser_max_params_from_str+0x104>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1279e:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   127a0:	2a00      	cmp	r2, #0
   127a2:	bf0c      	ite	eq
   127a4:	2000      	moveq	r0, #0
   127a6:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   127aa:	f1b8 0f00 	cmp.w	r8, #0
   127ae:	d001      	beq.n	127b4 <at_parser_max_params_from_str+0xf0>
		*next_param_str = (char *)at_params_str;
   127b0:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   127b4:	b002      	add	sp, #8
   127b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		index++;
   127ba:	3401      	adds	r4, #1
			oversized = true;
   127bc:	42bc      	cmp	r4, r7
   127be:	bf08      	it	eq
   127c0:	2501      	moveq	r5, #1
   127c2:	e79a      	b.n	126fa <at_parser_max_params_from_str+0x36>
					oversized = true;
   127c4:	4605      	mov	r5, r0
   127c6:	e7e8      	b.n	1279a <at_parser_max_params_from_str+0xd6>
		return -E2BIG;
   127c8:	f06f 0006 	mvn.w	r0, #6
   127cc:	e7ed      	b.n	127aa <at_parser_max_params_from_str+0xe6>
		return -EINVAL;
   127ce:	f06f 0015 	mvn.w	r0, #21
   127d2:	e7ef      	b.n	127b4 <at_parser_max_params_from_str+0xf0>
   127d4:	2002658a 	.word	0x2002658a
   127d8:	00024001 	.word	0x00024001

000127dc <lte_lc_power_off>:

	return 0;
}

int lte_lc_power_off(void)
{
   127dc:	b508      	push	{r3, lr}
	if (at_cmd_write(power_off, NULL, 0, NULL) != 0) {
   127de:	2300      	movs	r3, #0
   127e0:	4804      	ldr	r0, [pc, #16]	; (127f4 <lte_lc_power_off+0x18>)
   127e2:	461a      	mov	r2, r3
   127e4:	4619      	mov	r1, r3
   127e6:	f7ff fced 	bl	121c4 <at_cmd_write>
   127ea:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   127ec:	bf18      	it	ne
   127ee:	f06f 0004 	mvnne.w	r0, #4
   127f2:	bd08      	pop	{r3, pc}
   127f4:	00020e84 	.word	0x00020e84

000127f8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   127f8:	b508      	push	{r3, lr}
	z_impl_log_panic();
   127fa:	f7fc fb71 	bl	eee0 <z_impl_log_panic>
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   127fe:	2301      	movs	r3, #1
   12800:	f04f 0100 	mov.w	r1, #0
   12804:	4a06      	ldr	r2, [pc, #24]	; (12820 <k_sys_fatal_error_handler+0x28>)
   12806:	f363 0107 	bfi	r1, r3, #0, #8
   1280a:	4b06      	ldr	r3, [pc, #24]	; (12824 <k_sys_fatal_error_handler+0x2c>)
   1280c:	4806      	ldr	r0, [pc, #24]	; (12828 <k_sys_fatal_error_handler+0x30>)
   1280e:	1a9b      	subs	r3, r3, r2
   12810:	08db      	lsrs	r3, r3, #3
   12812:	f363 118f 	bfi	r1, r3, #6, #10
   12816:	f00a f9b8 	bl	1cb8a <log_0>
	sys_arch_reboot(0);
   1281a:	2000      	movs	r0, #0
   1281c:	f7fd fca4 	bl	10168 <sys_arch_reboot>

	CODE_UNREACHABLE;
   12820:	0001f390 	.word	0x0001f390
   12824:	0001f3c0 	.word	0x0001f3c0
   12828:	00020e95 	.word	0x00020e95

0001282c <ext_api_getter>:
extern const struct fw_info_ext_api * const _ext_apis_start[];
extern const u32_t _ext_apis_size;
__noinit fw_info_ext_api_getter ext_api_getter_in;

int ext_api_getter(u32_t id, u32_t index, const struct fw_info_ext_api **out)
{
   1282c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!out) {
   1282e:	b1da      	cbz	r2, 12868 <ext_api_getter+0x3c>
		return -EFAULT;
	}

	bool id_found = false;

	for (u32_t i = 0; i < (u32_t)&_ext_apis_size; i++) {
   12830:	2300      	movs	r3, #0
	bool id_found = false;
   12832:	461c      	mov	r4, r3
   12834:	4d0e      	ldr	r5, [pc, #56]	; (12870 <ext_api_getter+0x44>)
	for (u32_t i = 0; i < (u32_t)&_ext_apis_size; i++) {
   12836:	4f0f      	ldr	r7, [pc, #60]	; (12874 <ext_api_getter+0x48>)
   12838:	42bb      	cmp	r3, r7
   1283a:	d306      	bcc.n	1284a <ext_api_getter+0x1e>
				*out = ext_api;
				return 0;
			}
		}
	}
	return id_found ? -EBADF : -ENOENT;
   1283c:	2c00      	cmp	r4, #0
   1283e:	bf14      	ite	ne
   12840:	f06f 0008 	mvnne.w	r0, #8
   12844:	f06f 0001 	mvneq.w	r0, #1
   12848:	e009      	b.n	1285e <ext_api_getter+0x32>
		const struct fw_info_ext_api *ext_api = _ext_apis_start[i];
   1284a:	f855 6b04 	ldr.w	r6, [r5], #4
		if (ext_api->ext_api_id == id) {
   1284e:	f8d6 c00c 	ldr.w	ip, [r6, #12]
   12852:	4560      	cmp	r0, ip
   12854:	d106      	bne.n	12864 <ext_api_getter+0x38>
			if (index-- == 0) {
   12856:	1e4c      	subs	r4, r1, #1
   12858:	b911      	cbnz	r1, 12860 <ext_api_getter+0x34>
				return 0;
   1285a:	4608      	mov	r0, r1
				*out = ext_api;
   1285c:	6016      	str	r6, [r2, #0]
}
   1285e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (index-- == 0) {
   12860:	4621      	mov	r1, r4
			id_found = true;
   12862:	2401      	movs	r4, #1
	for (u32_t i = 0; i < (u32_t)&_ext_apis_size; i++) {
   12864:	3301      	adds	r3, #1
   12866:	e7e7      	b.n	12838 <ext_api_getter+0xc>
		return -EFAULT;
   12868:	f06f 000d 	mvn.w	r0, #13
   1286c:	e7f7      	b.n	1285e <ext_api_getter+0x32>
   1286e:	bf00      	nop
   12870:	00020fc4 	.word	0x00020fc4
   12874:	00000000 	.word	0x00000000

00012878 <rpc_logobj_client_evt_handler>:
   12878:	b120      	cbz	r0, 12884 <rpc_logobj_client_evt_handler+0xc>
   1287a:	f850 1b08 	ldr.w	r1, [r0], #8
   1287e:	0c09      	lsrs	r1, r1, #16
   12880:	f000 b852 	b.w	12928 <logobj_event_handler>
   12884:	4770      	bx	lr
   12886:	bf00      	nop

00012888 <rpc_logobj_client_init>:
   12888:	4801      	ldr	r0, [pc, #4]	; (12890 <rpc_logobj_client_init+0x8>)
   1288a:	f006 bb87 	b.w	18f9c <rpc_client_register>
   1288e:	bf00      	nop
   12890:	0001f610 	.word	0x0001f610

00012894 <rpc_logobj_client_request_alloc>:
   12894:	2300      	movs	r3, #0
   12896:	b510      	push	{r4, lr}
   12898:	b082      	sub	sp, #8
   1289a:	9301      	str	r3, [sp, #4]
   1289c:	b961      	cbnz	r1, 128b8 <rpc_logobj_client_request_alloc+0x24>
   1289e:	b170      	cbz	r0, 128be <rpc_logobj_client_request_alloc+0x2a>
   128a0:	4604      	mov	r4, r0
   128a2:	aa01      	add	r2, sp, #4
   128a4:	2009      	movs	r0, #9
   128a6:	f006 fdb1 	bl	1940c <rpc_message_alloc>
   128aa:	b918      	cbnz	r0, 128b4 <rpc_logobj_client_request_alloc+0x20>
   128ac:	9b01      	ldr	r3, [sp, #4]
   128ae:	b10b      	cbz	r3, 128b4 <rpc_logobj_client_request_alloc+0x20>
   128b0:	3308      	adds	r3, #8
   128b2:	6023      	str	r3, [r4, #0]
   128b4:	b002      	add	sp, #8
   128b6:	bd10      	pop	{r4, pc}
   128b8:	200f      	movs	r0, #15
   128ba:	b002      	add	sp, #8
   128bc:	bd10      	pop	{r4, pc}
   128be:	200e      	movs	r0, #14
   128c0:	b002      	add	sp, #8
   128c2:	bd10      	pop	{r4, pc}

000128c4 <rpc_logobj_client_request_send>:
   128c4:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   128c8:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   128cc:	d10b      	bne.n	128e6 <rpc_logobj_client_request_send+0x22>
   128ce:	b160      	cbz	r0, 128ea <rpc_logobj_client_request_send+0x26>
   128d0:	4603      	mov	r3, r0
   128d2:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   128d6:	2009      	movs	r0, #9
   128d8:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   128dc:	f843 1d08 	str.w	r1, [r3, #-8]!
   128e0:	4619      	mov	r1, r3
   128e2:	f006 bd7b 	b.w	193dc <rpc_message_send>
   128e6:	200f      	movs	r0, #15
   128e8:	4770      	bx	lr
   128ea:	200e      	movs	r0, #14
   128ec:	4770      	bx	lr
   128ee:	bf00      	nop

000128f0 <rpc_logobj_client_message_free>:
   128f0:	b120      	cbz	r0, 128fc <rpc_logobj_client_message_free+0xc>
   128f2:	f1a0 0108 	sub.w	r1, r0, #8
   128f6:	2009      	movs	r0, #9
   128f8:	f006 bdba 	b.w	19470 <rpc_message_free>
   128fc:	200e      	movs	r0, #14
   128fe:	4770      	bx	lr

00012900 <rpc_logobj_client_data_free>:
   12900:	b118      	cbz	r0, 1290a <rpc_logobj_client_data_free+0xa>
   12902:	4601      	mov	r1, r0
   12904:	2009      	movs	r0, #9
   12906:	f006 bec5 	b.w	19694 <rpc_message_data_free>
   1290a:	200e      	movs	r0, #14
   1290c:	4770      	bx	lr
   1290e:	bf00      	nop

00012910 <packet_free_cb>:
   12910:	b510      	push	{r4, lr}
   12912:	4604      	mov	r4, r0
   12914:	6800      	ldr	r0, [r0, #0]
   12916:	f7ff fff3 	bl	12900 <rpc_logobj_client_data_free>
   1291a:	68a0      	ldr	r0, [r4, #8]
   1291c:	b118      	cbz	r0, 12926 <packet_free_cb+0x16>
   1291e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12922:	f001 b90f 	b.w	13b44 <nrf_free>
   12926:	bd10      	pop	{r4, pc}

00012928 <logobj_event_handler>:
   12928:	b530      	push	{r4, r5, lr}
   1292a:	4b3b      	ldr	r3, [pc, #236]	; (12a18 <logobj_event_handler+0xf0>)
   1292c:	b085      	sub	sp, #20
   1292e:	681d      	ldr	r5, [r3, #0]
   12930:	2d00      	cmp	r5, #0
   12932:	d04c      	beq.n	129ce <logobj_event_handler+0xa6>
   12934:	f248 0302 	movw	r3, #32770	; 0x8002
   12938:	4299      	cmp	r1, r3
   1293a:	d053      	beq.n	129e4 <logobj_event_handler+0xbc>
   1293c:	d91c      	bls.n	12978 <logobj_event_handler+0x50>
   1293e:	f248 0303 	movw	r3, #32771	; 0x8003
   12942:	4299      	cmp	r1, r3
   12944:	d05a      	beq.n	129fc <logobj_event_handler+0xd4>
   12946:	f249 0301 	movw	r3, #36865	; 0x9001
   1294a:	4299      	cmp	r1, r3
   1294c:	d147      	bne.n	129de <logobj_event_handler+0xb6>
   1294e:	2400      	movs	r4, #0
   12950:	6843      	ldr	r3, [r0, #4]
   12952:	6802      	ldr	r2, [r0, #0]
   12954:	e9cd 4402 	strd	r4, r4, [sp, #8]
   12958:	e9cd 2300 	strd	r2, r3, [sp]
   1295c:	69e8      	ldr	r0, [r5, #28]
   1295e:	4669      	mov	r1, sp
   12960:	6803      	ldr	r3, [r0, #0]
   12962:	685b      	ldr	r3, [r3, #4]
   12964:	4798      	blx	r3
   12966:	3001      	adds	r0, #1
   12968:	d04e      	beq.n	12a08 <logobj_event_handler+0xe0>
   1296a:	4620      	mov	r0, r4
   1296c:	682b      	ldr	r3, [r5, #0]
   1296e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   12972:	602b      	str	r3, [r5, #0]
   12974:	b005      	add	sp, #20
   12976:	bd30      	pop	{r4, r5, pc}
   12978:	f248 0301 	movw	r3, #32769	; 0x8001
   1297c:	4299      	cmp	r1, r3
   1297e:	d12e      	bne.n	129de <logobj_event_handler+0xb6>
   12980:	68c3      	ldr	r3, [r0, #12]
   12982:	2b00      	cmp	r3, #0
   12984:	d135      	bne.n	129f2 <logobj_event_handler+0xca>
   12986:	6828      	ldr	r0, [r5, #0]
   12988:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   1298c:	d03e      	beq.n	12a0c <logobj_event_handler+0xe4>
   1298e:	682b      	ldr	r3, [r5, #0]
   12990:	b29b      	uxth	r3, r3
   12992:	2b01      	cmp	r3, #1
   12994:	d105      	bne.n	129a2 <logobj_event_handler+0x7a>
   12996:	682b      	ldr	r3, [r5, #0]
   12998:	0c1b      	lsrs	r3, r3, #16
   1299a:	041b      	lsls	r3, r3, #16
   1299c:	f043 0302 	orr.w	r3, r3, #2
   129a0:	602b      	str	r3, [r5, #0]
   129a2:	4b1e      	ldr	r3, [pc, #120]	; (12a1c <logobj_event_handler+0xf4>)
   129a4:	781a      	ldrb	r2, [r3, #0]
   129a6:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   129aa:	2a00      	cmp	r2, #0
   129ac:	d031      	beq.n	12a12 <logobj_event_handler+0xea>
   129ae:	4a1c      	ldr	r2, [pc, #112]	; (12a20 <logobj_event_handler+0xf8>)
   129b0:	7811      	ldrb	r1, [r2, #0]
   129b2:	b909      	cbnz	r1, 129b8 <logobj_event_handler+0x90>
   129b4:	2101      	movs	r1, #1
   129b6:	7011      	strb	r1, [r2, #0]
   129b8:	2000      	movs	r0, #0
   129ba:	7018      	strb	r0, [r3, #0]
   129bc:	682b      	ldr	r3, [r5, #0]
   129be:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   129c2:	602b      	str	r3, [r5, #0]
   129c4:	682b      	ldr	r3, [r5, #0]
   129c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   129ca:	602b      	str	r3, [r5, #0]
   129cc:	e7d2      	b.n	12974 <logobj_event_handler+0x4c>
   129ce:	6800      	ldr	r0, [r0, #0]
   129d0:	2800      	cmp	r0, #0
   129d2:	d0cf      	beq.n	12974 <logobj_event_handler+0x4c>
   129d4:	f7ff ff94 	bl	12900 <rpc_logobj_client_data_free>
   129d8:	4628      	mov	r0, r5
   129da:	b005      	add	sp, #20
   129dc:	bd30      	pop	{r4, r5, pc}
   129de:	2000      	movs	r0, #0
   129e0:	b005      	add	sp, #20
   129e2:	bd30      	pop	{r4, r5, pc}
   129e4:	682b      	ldr	r3, [r5, #0]
   129e6:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   129ea:	d00b      	beq.n	12a04 <logobj_event_handler+0xdc>
   129ec:	68c0      	ldr	r0, [r0, #12]
   129ee:	2800      	cmp	r0, #0
   129f0:	d0e4      	beq.n	129bc <logobj_event_handler+0x94>
   129f2:	230e      	movs	r3, #14
   129f4:	2000      	movs	r0, #0
   129f6:	606b      	str	r3, [r5, #4]
   129f8:	b005      	add	sp, #20
   129fa:	bd30      	pop	{r4, r5, pc}
   129fc:	68c3      	ldr	r3, [r0, #12]
   129fe:	2b01      	cmp	r3, #1
   12a00:	d1a5      	bne.n	1294e <logobj_event_handler+0x26>
   12a02:	e7f6      	b.n	129f2 <logobj_event_handler+0xca>
   12a04:	4618      	mov	r0, r3
   12a06:	e7b5      	b.n	12974 <logobj_event_handler+0x4c>
   12a08:	2002      	movs	r0, #2
   12a0a:	e7b3      	b.n	12974 <logobj_event_handler+0x4c>
   12a0c:	230e      	movs	r3, #14
   12a0e:	606b      	str	r3, [r5, #4]
   12a10:	e7b0      	b.n	12974 <logobj_event_handler+0x4c>
   12a12:	4a03      	ldr	r2, [pc, #12]	; (12a20 <logobj_event_handler+0xf8>)
   12a14:	7011      	strb	r1, [r2, #0]
   12a16:	e7cf      	b.n	129b8 <logobj_event_handler+0x90>
   12a18:	200204d0 	.word	0x200204d0
   12a1c:	2002658b 	.word	0x2002658b
   12a20:	2002658c 	.word	0x2002658c

00012a24 <logobj_interface_init>:
   12a24:	2300      	movs	r3, #0
   12a26:	b510      	push	{r4, lr}
   12a28:	4907      	ldr	r1, [pc, #28]	; (12a48 <logobj_interface_init+0x24>)
   12a2a:	4a08      	ldr	r2, [pc, #32]	; (12a4c <logobj_interface_init+0x28>)
   12a2c:	4c08      	ldr	r4, [pc, #32]	; (12a50 <logobj_interface_init+0x2c>)
   12a2e:	4809      	ldr	r0, [pc, #36]	; (12a54 <logobj_interface_init+0x30>)
   12a30:	7023      	strb	r3, [r4, #0]
   12a32:	6003      	str	r3, [r0, #0]
   12a34:	700b      	strb	r3, [r1, #0]
   12a36:	6013      	str	r3, [r2, #0]
   12a38:	f7ff ff26 	bl	12888 <rpc_logobj_client_init>
   12a3c:	3000      	adds	r0, #0
   12a3e:	bf18      	it	ne
   12a40:	2001      	movne	r0, #1
   12a42:	4240      	negs	r0, r0
   12a44:	bd10      	pop	{r4, pc}
   12a46:	bf00      	nop
   12a48:	2002658b 	.word	0x2002658b
   12a4c:	200204cc 	.word	0x200204cc
   12a50:	2002658c 	.word	0x2002658c
   12a54:	200204d0 	.word	0x200204d0

00012a58 <logobj_interface_open>:
   12a58:	2300      	movs	r3, #0
   12a5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12a5e:	2866      	cmp	r0, #102	; 0x66
   12a60:	b082      	sub	sp, #8
   12a62:	9300      	str	r3, [sp, #0]
   12a64:	d172      	bne.n	12b4c <logobj_interface_open+0xf4>
   12a66:	2902      	cmp	r1, #2
   12a68:	4689      	mov	r9, r1
   12a6a:	d16f      	bne.n	12b4c <logobj_interface_open+0xf4>
   12a6c:	f240 2305 	movw	r3, #517	; 0x205
   12a70:	429a      	cmp	r2, r3
   12a72:	4692      	mov	sl, r2
   12a74:	d16a      	bne.n	12b4c <logobj_interface_open+0xf4>
   12a76:	4f48      	ldr	r7, [pc, #288]	; (12b98 <logobj_interface_open+0x140>)
   12a78:	683d      	ldr	r5, [r7, #0]
   12a7a:	2d00      	cmp	r5, #0
   12a7c:	d17c      	bne.n	12b78 <logobj_interface_open+0x120>
   12a7e:	4680      	mov	r8, r0
   12a80:	4a46      	ldr	r2, [pc, #280]	; (12b9c <logobj_interface_open+0x144>)
   12a82:	4668      	mov	r0, sp
   12a84:	f006 f81c 	bl	18ac0 <interface_socket_allocate>
   12a88:	9b00      	ldr	r3, [sp, #0]
   12a8a:	4606      	mov	r6, r0
   12a8c:	2b00      	cmp	r3, #0
   12a8e:	d07d      	beq.n	12b8c <logobj_interface_open+0x134>
   12a90:	4629      	mov	r1, r5
   12a92:	2204      	movs	r2, #4
   12a94:	4842      	ldr	r0, [pc, #264]	; (12ba0 <logobj_interface_open+0x148>)
   12a96:	603b      	str	r3, [r7, #0]
   12a98:	f00a fe17 	bl	1d6ca <memset>
   12a9c:	9c00      	ldr	r4, [sp, #0]
   12a9e:	4629      	mov	r1, r5
   12aa0:	e9c4 8903 	strd	r8, r9, [r4, #12]
   12aa4:	f8c4 a014 	str.w	sl, [r4, #20]
   12aa8:	a801      	add	r0, sp, #4
   12aaa:	f7ff fef3 	bl	12894 <rpc_logobj_client_request_alloc>
   12aae:	2800      	cmp	r0, #0
   12ab0:	d13c      	bne.n	12b2c <logobj_interface_open+0xd4>
   12ab2:	2201      	movs	r2, #1
   12ab4:	2104      	movs	r1, #4
   12ab6:	9b01      	ldr	r3, [sp, #4]
   12ab8:	4d3a      	ldr	r5, [pc, #232]	; (12ba4 <logobj_interface_open+0x14c>)
   12aba:	7358      	strb	r0, [r3, #13]
   12abc:	7398      	strb	r0, [r3, #14]
   12abe:	73d8      	strb	r0, [r3, #15]
   12ac0:	7258      	strb	r0, [r3, #9]
   12ac2:	7298      	strb	r0, [r3, #10]
   12ac4:	72d8      	strb	r0, [r3, #11]
   12ac6:	7219      	strb	r1, [r3, #8]
   12ac8:	702a      	strb	r2, [r5, #0]
   12aca:	731a      	strb	r2, [r3, #12]
   12acc:	6822      	ldr	r2, [r4, #0]
   12ace:	4618      	mov	r0, r3
   12ad0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   12ad4:	6022      	str	r2, [r4, #0]
   12ad6:	f247 0101 	movw	r1, #28673	; 0x7001
   12ada:	f7ff fef3 	bl	128c4 <rpc_logobj_client_request_send>
   12ade:	bb38      	cbnz	r0, 12b30 <logobj_interface_open+0xd8>
   12ae0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   12ae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12ae8:	4611      	mov	r1, r2
   12aea:	4630      	mov	r0, r6
   12aec:	f006 f88c 	bl	18c08 <interface_socket_wait>
   12af0:	4604      	mov	r4, r0
   12af2:	b310      	cbz	r0, 12b3a <logobj_interface_open+0xe2>
   12af4:	9a00      	ldr	r2, [sp, #0]
   12af6:	2e00      	cmp	r6, #0
   12af8:	6813      	ldr	r3, [r2, #0]
   12afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12afe:	6013      	str	r3, [r2, #0]
   12b00:	9a00      	ldr	r2, [sp, #0]
   12b02:	6813      	ldr	r3, [r2, #0]
   12b04:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12b08:	6013      	str	r3, [r2, #0]
   12b0a:	9a00      	ldr	r2, [sp, #0]
   12b0c:	6813      	ldr	r3, [r2, #0]
   12b0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   12b12:	6013      	str	r3, [r2, #0]
   12b14:	da36      	bge.n	12b84 <logobj_interface_open+0x12c>
   12b16:	2300      	movs	r3, #0
   12b18:	4620      	mov	r0, r4
   12b1a:	603b      	str	r3, [r7, #0]
   12b1c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   12b20:	f7fe ff60 	bl	119e4 <bsd_os_errno_set>
   12b24:	4630      	mov	r0, r6
   12b26:	b002      	add	sp, #8
   12b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12b2c:	240c      	movs	r4, #12
   12b2e:	e7e1      	b.n	12af4 <logobj_interface_open+0x9c>
   12b30:	9801      	ldr	r0, [sp, #4]
   12b32:	f7ff fedd 	bl	128f0 <rpc_logobj_client_message_free>
   12b36:	2405      	movs	r4, #5
   12b38:	e7dc      	b.n	12af4 <logobj_interface_open+0x9c>
   12b3a:	4630      	mov	r0, r6
   12b3c:	f006 f8d0 	bl	18ce0 <interface_socket_from_handle_get>
   12b40:	b150      	cbz	r0, 12b58 <logobj_interface_open+0x100>
   12b42:	6844      	ldr	r4, [r0, #4]
   12b44:	b144      	cbz	r4, 12b58 <logobj_interface_open+0x100>
   12b46:	2300      	movs	r3, #0
   12b48:	6043      	str	r3, [r0, #4]
   12b4a:	e7d3      	b.n	12af4 <logobj_interface_open+0x9c>
   12b4c:	2016      	movs	r0, #22
   12b4e:	f7fe ff49 	bl	119e4 <bsd_os_errno_set>
   12b52:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   12b56:	e7e5      	b.n	12b24 <logobj_interface_open+0xcc>
   12b58:	9a00      	ldr	r2, [sp, #0]
   12b5a:	6813      	ldr	r3, [r2, #0]
   12b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12b60:	6013      	str	r3, [r2, #0]
   12b62:	9a00      	ldr	r2, [sp, #0]
   12b64:	6813      	ldr	r3, [r2, #0]
   12b66:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12b6a:	6013      	str	r3, [r2, #0]
   12b6c:	9a00      	ldr	r2, [sp, #0]
   12b6e:	6813      	ldr	r3, [r2, #0]
   12b70:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   12b74:	6013      	str	r3, [r2, #0]
   12b76:	e7d5      	b.n	12b24 <logobj_interface_open+0xcc>
   12b78:	2001      	movs	r0, #1
   12b7a:	f7fe ff33 	bl	119e4 <bsd_os_errno_set>
   12b7e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   12b82:	e7cf      	b.n	12b24 <logobj_interface_open+0xcc>
   12b84:	4630      	mov	r0, r6
   12b86:	f005 fff1 	bl	18b6c <interface_socket_free>
   12b8a:	e7c4      	b.n	12b16 <logobj_interface_open+0xbe>
   12b8c:	2018      	movs	r0, #24
   12b8e:	f7fe ff29 	bl	119e4 <bsd_os_errno_set>
   12b92:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   12b96:	e7c5      	b.n	12b24 <logobj_interface_open+0xcc>
   12b98:	200204d0 	.word	0x200204d0
   12b9c:	00012911 	.word	0x00012911
   12ba0:	200204cc 	.word	0x200204cc
   12ba4:	2002658b 	.word	0x2002658b

00012ba8 <logobj_interface_read>:
   12ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12bac:	b085      	sub	sp, #20
   12bae:	2900      	cmp	r1, #0
   12bb0:	d05e      	beq.n	12c70 <logobj_interface_read+0xc8>
   12bb2:	2a00      	cmp	r2, #0
   12bb4:	4616      	mov	r6, r2
   12bb6:	dd5b      	ble.n	12c70 <logobj_interface_read+0xc8>
   12bb8:	461f      	mov	r7, r3
   12bba:	4680      	mov	r8, r0
   12bbc:	460d      	mov	r5, r1
   12bbe:	f006 f88f 	bl	18ce0 <interface_socket_from_handle_get>
   12bc2:	4604      	mov	r4, r0
   12bc4:	2800      	cmp	r0, #0
   12bc6:	d059      	beq.n	12c7c <logobj_interface_read+0xd4>
   12bc8:	69c0      	ldr	r0, [r0, #28]
   12bca:	07ba      	lsls	r2, r7, #30
   12bcc:	6803      	ldr	r3, [r0, #0]
   12bce:	68db      	ldr	r3, [r3, #12]
   12bd0:	d524      	bpl.n	12c1c <logobj_interface_read+0x74>
   12bd2:	4798      	blx	r3
   12bd4:	3001      	adds	r0, #1
   12bd6:	d03b      	beq.n	12c50 <logobj_interface_read+0xa8>
   12bd8:	6823      	ldr	r3, [r4, #0]
   12bda:	69e0      	ldr	r0, [r4, #28]
   12bdc:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   12be0:	d038      	beq.n	12c54 <logobj_interface_read+0xac>
   12be2:	2100      	movs	r1, #0
   12be4:	6823      	ldr	r3, [r4, #0]
   12be6:	463a      	mov	r2, r7
   12be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   12bec:	6023      	str	r3, [r4, #0]
   12bee:	e9cd 1102 	strd	r1, r1, [sp, #8]
   12bf2:	e9cd 5600 	strd	r5, r6, [sp]
   12bf6:	6803      	ldr	r3, [r0, #0]
   12bf8:	4669      	mov	r1, sp
   12bfa:	689b      	ldr	r3, [r3, #8]
   12bfc:	4798      	blx	r3
   12bfe:	4605      	mov	r5, r0
   12c00:	69e0      	ldr	r0, [r4, #28]
   12c02:	6803      	ldr	r3, [r0, #0]
   12c04:	68db      	ldr	r3, [r3, #12]
   12c06:	4798      	blx	r3
   12c08:	3001      	adds	r0, #1
   12c0a:	d003      	beq.n	12c14 <logobj_interface_read+0x6c>
   12c0c:	6823      	ldr	r3, [r4, #0]
   12c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   12c12:	6023      	str	r3, [r4, #0]
   12c14:	4628      	mov	r0, r5
   12c16:	b005      	add	sp, #20
   12c18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12c1c:	6822      	ldr	r2, [r4, #0]
   12c1e:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   12c22:	d1d6      	bne.n	12bd2 <logobj_interface_read+0x2a>
   12c24:	4798      	blx	r3
   12c26:	1c43      	adds	r3, r0, #1
   12c28:	d1d6      	bne.n	12bd8 <logobj_interface_read+0x30>
   12c2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   12c2e:	6a23      	ldr	r3, [r4, #32]
   12c30:	4611      	mov	r1, r2
   12c32:	2b00      	cmp	r3, #0
   12c34:	bf08      	it	eq
   12c36:	4603      	moveq	r3, r0
   12c38:	4640      	mov	r0, r8
   12c3a:	f005 ffe5 	bl	18c08 <interface_socket_wait>
   12c3e:	b158      	cbz	r0, 12c58 <logobj_interface_read+0xb0>
   12c40:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12c44:	f7fe fece 	bl	119e4 <bsd_os_errno_set>
   12c48:	4628      	mov	r0, r5
   12c4a:	b005      	add	sp, #20
   12c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12c50:	2023      	movs	r0, #35	; 0x23
   12c52:	e7f5      	b.n	12c40 <logobj_interface_read+0x98>
   12c54:	461d      	mov	r5, r3
   12c56:	e7d4      	b.n	12c02 <logobj_interface_read+0x5a>
   12c58:	4640      	mov	r0, r8
   12c5a:	f006 f841 	bl	18ce0 <interface_socket_from_handle_get>
   12c5e:	4603      	mov	r3, r0
   12c60:	2800      	cmp	r0, #0
   12c62:	d0b9      	beq.n	12bd8 <logobj_interface_read+0x30>
   12c64:	6840      	ldr	r0, [r0, #4]
   12c66:	2800      	cmp	r0, #0
   12c68:	d0b6      	beq.n	12bd8 <logobj_interface_read+0x30>
   12c6a:	f8c3 9004 	str.w	r9, [r3, #4]
   12c6e:	e7e7      	b.n	12c40 <logobj_interface_read+0x98>
   12c70:	2016      	movs	r0, #22
   12c72:	f7fe feb7 	bl	119e4 <bsd_os_errno_set>
   12c76:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12c7a:	e7cb      	b.n	12c14 <logobj_interface_read+0x6c>
   12c7c:	2009      	movs	r0, #9
   12c7e:	f7fe feb1 	bl	119e4 <bsd_os_errno_set>
   12c82:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12c86:	e7c5      	b.n	12c14 <logobj_interface_read+0x6c>

00012c88 <logobj_interface_write>:
   12c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12c8c:	b082      	sub	sp, #8
   12c8e:	2900      	cmp	r1, #0
   12c90:	d05b      	beq.n	12d4a <logobj_interface_write+0xc2>
   12c92:	2a04      	cmp	r2, #4
   12c94:	d159      	bne.n	12d4a <logobj_interface_write+0xc2>
   12c96:	461e      	mov	r6, r3
   12c98:	4607      	mov	r7, r0
   12c9a:	460d      	mov	r5, r1
   12c9c:	f006 f820 	bl	18ce0 <interface_socket_from_handle_get>
   12ca0:	4604      	mov	r4, r0
   12ca2:	2800      	cmp	r0, #0
   12ca4:	d067      	beq.n	12d76 <logobj_interface_write+0xee>
   12ca6:	07b0      	lsls	r0, r6, #30
   12ca8:	d526      	bpl.n	12cf8 <logobj_interface_write+0x70>
   12caa:	6823      	ldr	r3, [r4, #0]
   12cac:	039b      	lsls	r3, r3, #14
   12cae:	d55e      	bpl.n	12d6e <logobj_interface_write+0xe6>
   12cb0:	2600      	movs	r6, #0
   12cb2:	6823      	ldr	r3, [r4, #0]
   12cb4:	2100      	movs	r1, #0
   12cb6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   12cba:	6023      	str	r3, [r4, #0]
   12cbc:	a801      	add	r0, sp, #4
   12cbe:	f8d5 8000 	ldr.w	r8, [r5]
   12cc2:	f7ff fde7 	bl	12894 <rpc_logobj_client_request_alloc>
   12cc6:	b9f8      	cbnz	r0, 12d08 <logobj_interface_write+0x80>
   12cc8:	2504      	movs	r5, #4
   12cca:	9b01      	ldr	r3, [sp, #4]
   12ccc:	f247 0103 	movw	r1, #28675	; 0x7003
   12cd0:	f8c3 800c 	str.w	r8, [r3, #12]
   12cd4:	7258      	strb	r0, [r3, #9]
   12cd6:	7298      	strb	r0, [r3, #10]
   12cd8:	72d8      	strb	r0, [r3, #11]
   12cda:	721d      	strb	r5, [r3, #8]
   12cdc:	4618      	mov	r0, r3
   12cde:	f7ff fdf1 	bl	128c4 <rpc_logobj_client_request_send>
   12ce2:	4680      	mov	r8, r0
   12ce4:	bb40      	cbnz	r0, 12d38 <logobj_interface_write+0xb0>
   12ce6:	b9ce      	cbnz	r6, 12d1c <logobj_interface_write+0x94>
   12ce8:	4628      	mov	r0, r5
   12cea:	6823      	ldr	r3, [r4, #0]
   12cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12cf0:	6023      	str	r3, [r4, #0]
   12cf2:	b002      	add	sp, #8
   12cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12cf8:	6823      	ldr	r3, [r4, #0]
   12cfa:	00d9      	lsls	r1, r3, #3
   12cfc:	d4d5      	bmi.n	12caa <logobj_interface_write+0x22>
   12cfe:	6823      	ldr	r3, [r4, #0]
   12d00:	039a      	lsls	r2, r3, #14
   12d02:	d536      	bpl.n	12d72 <logobj_interface_write+0xea>
   12d04:	2601      	movs	r6, #1
   12d06:	e7d4      	b.n	12cb2 <logobj_interface_write+0x2a>
   12d08:	200c      	movs	r0, #12
   12d0a:	6823      	ldr	r3, [r4, #0]
   12d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12d10:	6023      	str	r3, [r4, #0]
   12d12:	f7fe fe67 	bl	119e4 <bsd_os_errno_set>
   12d16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12d1a:	e7ea      	b.n	12cf2 <logobj_interface_write+0x6a>
   12d1c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   12d20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12d24:	4611      	mov	r1, r2
   12d26:	4638      	mov	r0, r7
   12d28:	f005 ff6e 	bl	18c08 <interface_socket_wait>
   12d2c:	b198      	cbz	r0, 12d56 <logobj_interface_write+0xce>
   12d2e:	6823      	ldr	r3, [r4, #0]
   12d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12d34:	6023      	str	r3, [r4, #0]
   12d36:	e7ec      	b.n	12d12 <logobj_interface_write+0x8a>
   12d38:	9801      	ldr	r0, [sp, #4]
   12d3a:	f7ff fdd9 	bl	128f0 <rpc_logobj_client_message_free>
   12d3e:	6823      	ldr	r3, [r4, #0]
   12d40:	2005      	movs	r0, #5
   12d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12d46:	6023      	str	r3, [r4, #0]
   12d48:	e7e3      	b.n	12d12 <logobj_interface_write+0x8a>
   12d4a:	2016      	movs	r0, #22
   12d4c:	f7fe fe4a 	bl	119e4 <bsd_os_errno_set>
   12d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12d54:	e7cd      	b.n	12cf2 <logobj_interface_write+0x6a>
   12d56:	4638      	mov	r0, r7
   12d58:	f005 ffc2 	bl	18ce0 <interface_socket_from_handle_get>
   12d5c:	4603      	mov	r3, r0
   12d5e:	2800      	cmp	r0, #0
   12d60:	d0c2      	beq.n	12ce8 <logobj_interface_write+0x60>
   12d62:	6840      	ldr	r0, [r0, #4]
   12d64:	2800      	cmp	r0, #0
   12d66:	d0bf      	beq.n	12ce8 <logobj_interface_write+0x60>
   12d68:	f8c3 8004 	str.w	r8, [r3, #4]
   12d6c:	e7df      	b.n	12d2e <logobj_interface_write+0xa6>
   12d6e:	2073      	movs	r0, #115	; 0x73
   12d70:	e7cf      	b.n	12d12 <logobj_interface_write+0x8a>
   12d72:	2009      	movs	r0, #9
   12d74:	e7cd      	b.n	12d12 <logobj_interface_write+0x8a>
   12d76:	2009      	movs	r0, #9
   12d78:	f7fe fe34 	bl	119e4 <bsd_os_errno_set>
   12d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12d80:	e7b7      	b.n	12cf2 <logobj_interface_write+0x6a>
   12d82:	bf00      	nop

00012d84 <logobj_interface_setopt>:
   12d84:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d86:	2901      	cmp	r1, #1
   12d88:	b085      	sub	sp, #20
   12d8a:	d068      	beq.n	12e5e <logobj_interface_setopt+0xda>
   12d8c:	461e      	mov	r6, r3
   12d8e:	f240 2305 	movw	r3, #517	; 0x205
   12d92:	4299      	cmp	r1, r3
   12d94:	f040 8095 	bne.w	12ec2 <logobj_interface_setopt+0x13e>
   12d98:	4607      	mov	r7, r0
   12d9a:	4615      	mov	r5, r2
   12d9c:	f005 ffa0 	bl	18ce0 <interface_socket_from_handle_get>
   12da0:	4604      	mov	r4, r0
   12da2:	2800      	cmp	r0, #0
   12da4:	f000 80b2 	beq.w	12f0c <logobj_interface_setopt+0x188>
   12da8:	2d01      	cmp	r5, #1
   12daa:	d019      	beq.n	12de0 <logobj_interface_setopt+0x5c>
   12dac:	2d02      	cmp	r5, #2
   12dae:	d010      	beq.n	12dd2 <logobj_interface_setopt+0x4e>
   12db0:	252a      	movs	r5, #42	; 0x2a
   12db2:	6803      	ldr	r3, [r0, #0]
   12db4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12db8:	6023      	str	r3, [r4, #0]
   12dba:	6823      	ldr	r3, [r4, #0]
   12dbc:	4628      	mov	r0, r5
   12dbe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   12dc2:	6023      	str	r3, [r4, #0]
   12dc4:	f7fe fe0e 	bl	119e4 <bsd_os_errno_set>
   12dc8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12dcc:	4628      	mov	r0, r5
   12dce:	b005      	add	sp, #20
   12dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12dd2:	b116      	cbz	r6, 12dda <logobj_interface_setopt+0x56>
   12dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12dd6:	2b01      	cmp	r3, #1
   12dd8:	d049      	beq.n	12e6e <logobj_interface_setopt+0xea>
   12dda:	6823      	ldr	r3, [r4, #0]
   12ddc:	2516      	movs	r5, #22
   12dde:	e7e9      	b.n	12db4 <logobj_interface_setopt+0x30>
   12de0:	2e00      	cmp	r6, #0
   12de2:	d0fa      	beq.n	12dda <logobj_interface_setopt+0x56>
   12de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12de6:	2b04      	cmp	r3, #4
   12de8:	d1f7      	bne.n	12dda <logobj_interface_setopt+0x56>
   12dea:	2100      	movs	r1, #0
   12dec:	a803      	add	r0, sp, #12
   12dee:	f7ff fd51 	bl	12894 <rpc_logobj_client_request_alloc>
   12df2:	4605      	mov	r5, r0
   12df4:	2800      	cmp	r0, #0
   12df6:	d16a      	bne.n	12ece <logobj_interface_setopt+0x14a>
   12df8:	9803      	ldr	r0, [sp, #12]
   12dfa:	2208      	movs	r2, #8
   12dfc:	4629      	mov	r1, r5
   12dfe:	300c      	adds	r0, #12
   12e00:	f00a fc63 	bl	1d6ca <memset>
   12e04:	9803      	ldr	r0, [sp, #12]
   12e06:	4631      	mov	r1, r6
   12e08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12e0a:	300c      	adds	r0, #12
   12e0c:	f00a fc33 	bl	1d676 <memcpy>
   12e10:	2308      	movs	r3, #8
   12e12:	9803      	ldr	r0, [sp, #12]
   12e14:	f247 0102 	movw	r1, #28674	; 0x7002
   12e18:	7203      	strb	r3, [r0, #8]
   12e1a:	7245      	strb	r5, [r0, #9]
   12e1c:	7285      	strb	r5, [r0, #10]
   12e1e:	72c5      	strb	r5, [r0, #11]
   12e20:	6823      	ldr	r3, [r4, #0]
   12e22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   12e26:	6023      	str	r3, [r4, #0]
   12e28:	f7ff fd4c 	bl	128c4 <rpc_logobj_client_request_send>
   12e2c:	2800      	cmp	r0, #0
   12e2e:	d151      	bne.n	12ed4 <logobj_interface_setopt+0x150>
   12e30:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   12e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12e38:	4611      	mov	r1, r2
   12e3a:	4638      	mov	r0, r7
   12e3c:	f005 fee4 	bl	18c08 <interface_socket_wait>
   12e40:	4605      	mov	r5, r0
   12e42:	2800      	cmp	r0, #0
   12e44:	d13b      	bne.n	12ebe <logobj_interface_setopt+0x13a>
   12e46:	4638      	mov	r0, r7
   12e48:	f005 ff4a 	bl	18ce0 <interface_socket_from_handle_get>
   12e4c:	2800      	cmp	r0, #0
   12e4e:	d04f      	beq.n	12ef0 <logobj_interface_setopt+0x16c>
   12e50:	6843      	ldr	r3, [r0, #4]
   12e52:	2b00      	cmp	r3, #0
   12e54:	d04c      	beq.n	12ef0 <logobj_interface_setopt+0x16c>
   12e56:	2200      	movs	r2, #0
   12e58:	461d      	mov	r5, r3
   12e5a:	6042      	str	r2, [r0, #4]
   12e5c:	e02f      	b.n	12ebe <logobj_interface_setopt+0x13a>
   12e5e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   12e60:	9400      	str	r4, [sp, #0]
   12e62:	f005 ff65 	bl	18d30 <interface_socket_setopt>
   12e66:	4605      	mov	r5, r0
   12e68:	4628      	mov	r0, r5
   12e6a:	b005      	add	sp, #20
   12e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12e6e:	2100      	movs	r1, #0
   12e70:	a803      	add	r0, sp, #12
   12e72:	7835      	ldrb	r5, [r6, #0]
   12e74:	f7ff fd0e 	bl	12894 <rpc_logobj_client_request_alloc>
   12e78:	bb48      	cbnz	r0, 12ece <logobj_interface_setopt+0x14a>
   12e7a:	2d01      	cmp	r5, #1
   12e7c:	bf08      	it	eq
   12e7e:	4b26      	ldreq	r3, [pc, #152]	; (12f18 <logobj_interface_setopt+0x194>)
   12e80:	f04f 0204 	mov.w	r2, #4
   12e84:	bf08      	it	eq
   12e86:	701d      	strbeq	r5, [r3, #0]
   12e88:	2300      	movs	r3, #0
   12e8a:	9803      	ldr	r0, [sp, #12]
   12e8c:	f247 0101 	movw	r1, #28673	; 0x7001
   12e90:	7243      	strb	r3, [r0, #9]
   12e92:	60c5      	str	r5, [r0, #12]
   12e94:	7283      	strb	r3, [r0, #10]
   12e96:	72c3      	strb	r3, [r0, #11]
   12e98:	7202      	strb	r2, [r0, #8]
   12e9a:	6823      	ldr	r3, [r4, #0]
   12e9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   12ea0:	6023      	str	r3, [r4, #0]
   12ea2:	f7ff fd0f 	bl	128c4 <rpc_logobj_client_request_send>
   12ea6:	4606      	mov	r6, r0
   12ea8:	b9a0      	cbnz	r0, 12ed4 <logobj_interface_setopt+0x150>
   12eaa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   12eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12eb2:	4611      	mov	r1, r2
   12eb4:	4638      	mov	r0, r7
   12eb6:	f005 fea7 	bl	18c08 <interface_socket_wait>
   12eba:	4605      	mov	r5, r0
   12ebc:	b180      	cbz	r0, 12ee0 <logobj_interface_setopt+0x15c>
   12ebe:	6823      	ldr	r3, [r4, #0]
   12ec0:	e778      	b.n	12db4 <logobj_interface_setopt+0x30>
   12ec2:	202a      	movs	r0, #42	; 0x2a
   12ec4:	f7fe fd8e 	bl	119e4 <bsd_os_errno_set>
   12ec8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12ecc:	e77e      	b.n	12dcc <logobj_interface_setopt+0x48>
   12ece:	6823      	ldr	r3, [r4, #0]
   12ed0:	250c      	movs	r5, #12
   12ed2:	e76f      	b.n	12db4 <logobj_interface_setopt+0x30>
   12ed4:	9803      	ldr	r0, [sp, #12]
   12ed6:	f7ff fd0b 	bl	128f0 <rpc_logobj_client_message_free>
   12eda:	2505      	movs	r5, #5
   12edc:	6823      	ldr	r3, [r4, #0]
   12ede:	e769      	b.n	12db4 <logobj_interface_setopt+0x30>
   12ee0:	4638      	mov	r0, r7
   12ee2:	f005 fefd 	bl	18ce0 <interface_socket_from_handle_get>
   12ee6:	b140      	cbz	r0, 12efa <logobj_interface_setopt+0x176>
   12ee8:	6845      	ldr	r5, [r0, #4]
   12eea:	b135      	cbz	r5, 12efa <logobj_interface_setopt+0x176>
   12eec:	6046      	str	r6, [r0, #4]
   12eee:	e7e6      	b.n	12ebe <logobj_interface_setopt+0x13a>
   12ef0:	4631      	mov	r1, r6
   12ef2:	2204      	movs	r2, #4
   12ef4:	4809      	ldr	r0, [pc, #36]	; (12f1c <logobj_interface_setopt+0x198>)
   12ef6:	f00a fbbe 	bl	1d676 <memcpy>
   12efa:	6823      	ldr	r3, [r4, #0]
   12efc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12f00:	6023      	str	r3, [r4, #0]
   12f02:	6823      	ldr	r3, [r4, #0]
   12f04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   12f08:	6023      	str	r3, [r4, #0]
   12f0a:	e75f      	b.n	12dcc <logobj_interface_setopt+0x48>
   12f0c:	2009      	movs	r0, #9
   12f0e:	f7fe fd69 	bl	119e4 <bsd_os_errno_set>
   12f12:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12f16:	e759      	b.n	12dcc <logobj_interface_setopt+0x48>
   12f18:	2002658b 	.word	0x2002658b
   12f1c:	200204cc 	.word	0x200204cc

00012f20 <logobj_interface_getopt>:
   12f20:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f22:	2901      	cmp	r1, #1
   12f24:	b083      	sub	sp, #12
   12f26:	9e08      	ldr	r6, [sp, #32]
   12f28:	d030      	beq.n	12f8c <logobj_interface_getopt+0x6c>
   12f2a:	461f      	mov	r7, r3
   12f2c:	f240 2305 	movw	r3, #517	; 0x205
   12f30:	4299      	cmp	r1, r3
   12f32:	d134      	bne.n	12f9e <logobj_interface_getopt+0x7e>
   12f34:	4615      	mov	r5, r2
   12f36:	f005 fed3 	bl	18ce0 <interface_socket_from_handle_get>
   12f3a:	2800      	cmp	r0, #0
   12f3c:	d037      	beq.n	12fae <logobj_interface_getopt+0x8e>
   12f3e:	2d01      	cmp	r5, #1
   12f40:	d015      	beq.n	12f6e <logobj_interface_getopt+0x4e>
   12f42:	2d02      	cmp	r5, #2
   12f44:	d10b      	bne.n	12f5e <logobj_interface_getopt+0x3e>
   12f46:	b387      	cbz	r7, 12faa <logobj_interface_getopt+0x8a>
   12f48:	6833      	ldr	r3, [r6, #0]
   12f4a:	b373      	cbz	r3, 12faa <logobj_interface_getopt+0x8a>
   12f4c:	2300      	movs	r3, #0
   12f4e:	2201      	movs	r2, #1
   12f50:	4618      	mov	r0, r3
   12f52:	491a      	ldr	r1, [pc, #104]	; (12fbc <logobj_interface_getopt+0x9c>)
   12f54:	7809      	ldrb	r1, [r1, #0]
   12f56:	7039      	strb	r1, [r7, #0]
   12f58:	6032      	str	r2, [r6, #0]
   12f5a:	b003      	add	sp, #12
   12f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f5e:	2009      	movs	r0, #9
   12f60:	f7fe fd40 	bl	119e4 <bsd_os_errno_set>
   12f64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12f68:	4618      	mov	r0, r3
   12f6a:	b003      	add	sp, #12
   12f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f6e:	b1e7      	cbz	r7, 12faa <logobj_interface_getopt+0x8a>
   12f70:	6833      	ldr	r3, [r6, #0]
   12f72:	2b03      	cmp	r3, #3
   12f74:	d919      	bls.n	12faa <logobj_interface_getopt+0x8a>
   12f76:	4638      	mov	r0, r7
   12f78:	2204      	movs	r2, #4
   12f7a:	4911      	ldr	r1, [pc, #68]	; (12fc0 <logobj_interface_getopt+0xa0>)
   12f7c:	f00a fb7b 	bl	1d676 <memcpy>
   12f80:	2300      	movs	r3, #0
   12f82:	2204      	movs	r2, #4
   12f84:	4618      	mov	r0, r3
   12f86:	6032      	str	r2, [r6, #0]
   12f88:	b003      	add	sp, #12
   12f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f8c:	9600      	str	r6, [sp, #0]
   12f8e:	f005 ff05 	bl	18d9c <interface_socket_getopt>
   12f92:	4603      	mov	r3, r0
   12f94:	2800      	cmp	r0, #0
   12f96:	d1e3      	bne.n	12f60 <logobj_interface_getopt+0x40>
   12f98:	4618      	mov	r0, r3
   12f9a:	b003      	add	sp, #12
   12f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f9e:	202a      	movs	r0, #42	; 0x2a
   12fa0:	f7fe fd20 	bl	119e4 <bsd_os_errno_set>
   12fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12fa8:	e7de      	b.n	12f68 <logobj_interface_getopt+0x48>
   12faa:	2016      	movs	r0, #22
   12fac:	e7d8      	b.n	12f60 <logobj_interface_getopt+0x40>
   12fae:	2009      	movs	r0, #9
   12fb0:	f7fe fd18 	bl	119e4 <bsd_os_errno_set>
   12fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12fb8:	e7d6      	b.n	12f68 <logobj_interface_getopt+0x48>
   12fba:	bf00      	nop
   12fbc:	2002658c 	.word	0x2002658c
   12fc0:	200204cc 	.word	0x200204cc

00012fc4 <logobj_interface_close>:
   12fc4:	b510      	push	{r4, lr}
   12fc6:	4604      	mov	r4, r0
   12fc8:	f005 fe8a 	bl	18ce0 <interface_socket_from_handle_get>
   12fcc:	b138      	cbz	r0, 12fde <logobj_interface_close+0x1a>
   12fce:	4620      	mov	r0, r4
   12fd0:	f005 fdcc 	bl	18b6c <interface_socket_free>
   12fd4:	2300      	movs	r3, #0
   12fd6:	4a05      	ldr	r2, [pc, #20]	; (12fec <logobj_interface_close+0x28>)
   12fd8:	4618      	mov	r0, r3
   12fda:	6013      	str	r3, [r2, #0]
   12fdc:	bd10      	pop	{r4, pc}
   12fde:	2009      	movs	r0, #9
   12fe0:	f7fe fd00 	bl	119e4 <bsd_os_errno_set>
   12fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12fe8:	bd10      	pop	{r4, pc}
   12fea:	bf00      	nop
   12fec:	200204d0 	.word	0x200204d0

00012ff0 <packet_free_cb>:
   12ff0:	6800      	ldr	r0, [r0, #0]
   12ff2:	f004 ba31 	b.w	17458 <rpc_at_client_data_free>
   12ff6:	bf00      	nop

00012ff8 <at_interface_write>:
   12ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12ffa:	b083      	sub	sp, #12
   12ffc:	460f      	mov	r7, r1
   12ffe:	4615      	mov	r5, r2
   13000:	4606      	mov	r6, r0
   13002:	f005 fe6d 	bl	18ce0 <interface_socket_from_handle_get>
   13006:	2800      	cmp	r0, #0
   13008:	d047      	beq.n	1309a <at_interface_write+0xa2>
   1300a:	6803      	ldr	r3, [r0, #0]
   1300c:	4604      	mov	r4, r0
   1300e:	039b      	lsls	r3, r3, #14
   13010:	d543      	bpl.n	1309a <at_interface_write+0xa2>
   13012:	6803      	ldr	r3, [r0, #0]
   13014:	4629      	mov	r1, r5
   13016:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1301a:	6003      	str	r3, [r0, #0]
   1301c:	6803      	ldr	r3, [r0, #0]
   1301e:	a801      	add	r0, sp, #4
   13020:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   13024:	6023      	str	r3, [r4, #0]
   13026:	f004 f9ed 	bl	17404 <rpc_at_client_request_alloc>
   1302a:	bba0      	cbnz	r0, 13096 <at_interface_write+0x9e>
   1302c:	2204      	movs	r2, #4
   1302e:	9b01      	ldr	r3, [sp, #4]
   13030:	721a      	strb	r2, [r3, #8]
   13032:	7258      	strb	r0, [r3, #9]
   13034:	7298      	strb	r0, [r3, #10]
   13036:	72d8      	strb	r0, [r3, #11]
   13038:	60de      	str	r6, [r3, #12]
   1303a:	b985      	cbnz	r5, 1305e <at_interface_write+0x66>
   1303c:	4618      	mov	r0, r3
   1303e:	2101      	movs	r1, #1
   13040:	f004 f9f4 	bl	1742c <rpc_at_client_request_send>
   13044:	b9d0      	cbnz	r0, 1307c <at_interface_write+0x84>
   13046:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1304a:	4630      	mov	r0, r6
   1304c:	4611      	mov	r1, r2
   1304e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13052:	f005 fdd9 	bl	18c08 <interface_socket_wait>
   13056:	b9a8      	cbnz	r0, 13084 <at_interface_write+0x8c>
   13058:	4628      	mov	r0, r5
   1305a:	b003      	add	sp, #12
   1305c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1305e:	4639      	mov	r1, r7
   13060:	6818      	ldr	r0, [r3, #0]
   13062:	462a      	mov	r2, r5
   13064:	f00a fb07 	bl	1d676 <memcpy>
   13068:	2101      	movs	r1, #1
   1306a:	9801      	ldr	r0, [sp, #4]
   1306c:	f004 f9de 	bl	1742c <rpc_at_client_request_send>
   13070:	2800      	cmp	r0, #0
   13072:	d0e8      	beq.n	13046 <at_interface_write+0x4e>
   13074:	9b01      	ldr	r3, [sp, #4]
   13076:	6818      	ldr	r0, [r3, #0]
   13078:	f004 f9ee 	bl	17458 <rpc_at_client_data_free>
   1307c:	9801      	ldr	r0, [sp, #4]
   1307e:	f004 f9e3 	bl	17448 <rpc_at_client_message_free>
   13082:	2023      	movs	r0, #35	; 0x23
   13084:	6823      	ldr	r3, [r4, #0]
   13086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1308a:	6023      	str	r3, [r4, #0]
   1308c:	f7fe fcaa 	bl	119e4 <bsd_os_errno_set>
   13090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13094:	e7e1      	b.n	1305a <at_interface_write+0x62>
   13096:	200c      	movs	r0, #12
   13098:	e7f4      	b.n	13084 <at_interface_write+0x8c>
   1309a:	2016      	movs	r0, #22
   1309c:	e7f6      	b.n	1308c <at_interface_write+0x94>
   1309e:	bf00      	nop

000130a0 <at_interface_init>:
   130a0:	f004 b9aa 	b.w	173f8 <rpc_at_client_init>

000130a4 <at_interface_open>:
   130a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   130a8:	2500      	movs	r5, #0
   130aa:	b082      	sub	sp, #8
   130ac:	ab02      	add	r3, sp, #8
   130ae:	f843 5d08 	str.w	r5, [r3, #-8]!
   130b2:	4680      	mov	r8, r0
   130b4:	460f      	mov	r7, r1
   130b6:	4618      	mov	r0, r3
   130b8:	4616      	mov	r6, r2
   130ba:	2102      	movs	r1, #2
   130bc:	4a1d      	ldr	r2, [pc, #116]	; (13134 <at_interface_open+0x90>)
   130be:	f005 fcff 	bl	18ac0 <interface_socket_allocate>
   130c2:	9b00      	ldr	r3, [sp, #0]
   130c4:	4604      	mov	r4, r0
   130c6:	b30b      	cbz	r3, 1310c <at_interface_open+0x68>
   130c8:	e9c3 8703 	strd	r8, r7, [r3, #12]
   130cc:	615e      	str	r6, [r3, #20]
   130ce:	4629      	mov	r1, r5
   130d0:	a801      	add	r0, sp, #4
   130d2:	f004 f997 	bl	17404 <rpc_at_client_request_alloc>
   130d6:	b9e8      	cbnz	r0, 13114 <at_interface_open+0x70>
   130d8:	2204      	movs	r2, #4
   130da:	9b01      	ldr	r3, [sp, #4]
   130dc:	2105      	movs	r1, #5
   130de:	7258      	strb	r0, [r3, #9]
   130e0:	7298      	strb	r0, [r3, #10]
   130e2:	72d8      	strb	r0, [r3, #11]
   130e4:	721a      	strb	r2, [r3, #8]
   130e6:	60dc      	str	r4, [r3, #12]
   130e8:	4618      	mov	r0, r3
   130ea:	f004 f99f 	bl	1742c <rpc_at_client_request_send>
   130ee:	b9d8      	cbnz	r0, 13128 <at_interface_open+0x84>
   130f0:	2202      	movs	r2, #2
   130f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   130f6:	4611      	mov	r1, r2
   130f8:	4620      	mov	r0, r4
   130fa:	f005 fd85 	bl	18c08 <interface_socket_wait>
   130fe:	4605      	mov	r5, r0
   13100:	b948      	cbnz	r0, 13116 <at_interface_open+0x72>
   13102:	9a00      	ldr	r2, [sp, #0]
   13104:	6813      	ldr	r3, [r2, #0]
   13106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1310a:	6013      	str	r3, [r2, #0]
   1310c:	4620      	mov	r0, r4
   1310e:	b002      	add	sp, #8
   13110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13114:	250c      	movs	r5, #12
   13116:	4620      	mov	r0, r4
   13118:	f005 fd28 	bl	18b6c <interface_socket_free>
   1311c:	4628      	mov	r0, r5
   1311e:	f7fe fc61 	bl	119e4 <bsd_os_errno_set>
   13122:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   13126:	e7f1      	b.n	1310c <at_interface_open+0x68>
   13128:	9801      	ldr	r0, [sp, #4]
   1312a:	f004 f98d 	bl	17448 <rpc_at_client_message_free>
   1312e:	2523      	movs	r5, #35	; 0x23
   13130:	e7f1      	b.n	13116 <at_interface_open+0x72>
   13132:	bf00      	nop
   13134:	00012ff1 	.word	0x00012ff1

00013138 <at_interface_close>:
   13138:	b5f0      	push	{r4, r5, r6, r7, lr}
   1313a:	b083      	sub	sp, #12
   1313c:	4606      	mov	r6, r0
   1313e:	f005 fdcf 	bl	18ce0 <interface_socket_from_handle_get>
   13142:	2800      	cmp	r0, #0
   13144:	d03d      	beq.n	131c2 <at_interface_close+0x8a>
   13146:	230d      	movs	r3, #13
   13148:	6807      	ldr	r7, [r0, #0]
   1314a:	6003      	str	r3, [r0, #0]
   1314c:	6803      	ldr	r3, [r0, #0]
   1314e:	4604      	mov	r4, r0
   13150:	039b      	lsls	r3, r3, #14
   13152:	d41f      	bmi.n	13194 <at_interface_close+0x5c>
   13154:	2100      	movs	r1, #0
   13156:	a801      	add	r0, sp, #4
   13158:	f004 f954 	bl	17404 <rpc_at_client_request_alloc>
   1315c:	bb20      	cbnz	r0, 131a8 <at_interface_close+0x70>
   1315e:	2204      	movs	r2, #4
   13160:	9b01      	ldr	r3, [sp, #4]
   13162:	2106      	movs	r1, #6
   13164:	7258      	strb	r0, [r3, #9]
   13166:	7298      	strb	r0, [r3, #10]
   13168:	72d8      	strb	r0, [r3, #11]
   1316a:	721a      	strb	r2, [r3, #8]
   1316c:	60de      	str	r6, [r3, #12]
   1316e:	4618      	mov	r0, r3
   13170:	f004 f95c 	bl	1742c <rpc_at_client_request_send>
   13174:	b9d0      	cbnz	r0, 131ac <at_interface_close+0x74>
   13176:	220e      	movs	r2, #14
   13178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1317c:	4611      	mov	r1, r2
   1317e:	4630      	mov	r0, r6
   13180:	f005 fd42 	bl	18c08 <interface_socket_wait>
   13184:	4605      	mov	r5, r0
   13186:	b9a8      	cbnz	r0, 131b4 <at_interface_close+0x7c>
   13188:	4630      	mov	r0, r6
   1318a:	f005 fcef 	bl	18b6c <interface_socket_free>
   1318e:	4628      	mov	r0, r5
   13190:	b003      	add	sp, #12
   13192:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13194:	6803      	ldr	r3, [r0, #0]
   13196:	2100      	movs	r1, #0
   13198:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1319c:	6003      	str	r3, [r0, #0]
   1319e:	a801      	add	r0, sp, #4
   131a0:	f004 f930 	bl	17404 <rpc_at_client_request_alloc>
   131a4:	2800      	cmp	r0, #0
   131a6:	d0da      	beq.n	1315e <at_interface_close+0x26>
   131a8:	250c      	movs	r5, #12
   131aa:	e003      	b.n	131b4 <at_interface_close+0x7c>
   131ac:	9801      	ldr	r0, [sp, #4]
   131ae:	f004 f94b 	bl	17448 <rpc_at_client_message_free>
   131b2:	2523      	movs	r5, #35	; 0x23
   131b4:	6027      	str	r7, [r4, #0]
   131b6:	4628      	mov	r0, r5
   131b8:	f7fe fc14 	bl	119e4 <bsd_os_errno_set>
   131bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   131c0:	e7e5      	b.n	1318e <at_interface_close+0x56>
   131c2:	2516      	movs	r5, #22
   131c4:	e7f7      	b.n	131b6 <at_interface_close+0x7e>
   131c6:	bf00      	nop

000131c8 <at_interface_read>:
   131c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   131cc:	b084      	sub	sp, #16
   131ce:	4688      	mov	r8, r1
   131d0:	4615      	mov	r5, r2
   131d2:	461e      	mov	r6, r3
   131d4:	4607      	mov	r7, r0
   131d6:	f005 fd83 	bl	18ce0 <interface_socket_from_handle_get>
   131da:	2800      	cmp	r0, #0
   131dc:	d049      	beq.n	13272 <at_interface_read+0xaa>
   131de:	2300      	movs	r3, #0
   131e0:	e9cd 8500 	strd	r8, r5, [sp]
   131e4:	f016 0502 	ands.w	r5, r6, #2
   131e8:	4604      	mov	r4, r0
   131ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
   131ee:	d00e      	beq.n	1320e <at_interface_read+0x46>
   131f0:	e01e      	b.n	13230 <at_interface_read+0x68>
   131f2:	2d00      	cmp	r5, #0
   131f4:	d133      	bne.n	1325e <at_interface_read+0x96>
   131f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   131fa:	6a23      	ldr	r3, [r4, #32]
   131fc:	4611      	mov	r1, r2
   131fe:	2b00      	cmp	r3, #0
   13200:	bf08      	it	eq
   13202:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   13206:	4638      	mov	r0, r7
   13208:	f005 fcfe 	bl	18c08 <interface_socket_wait>
   1320c:	4605      	mov	r5, r0
   1320e:	6823      	ldr	r3, [r4, #0]
   13210:	69e0      	ldr	r0, [r4, #28]
   13212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   13216:	6023      	str	r3, [r4, #0]
   13218:	6803      	ldr	r3, [r0, #0]
   1321a:	4632      	mov	r2, r6
   1321c:	689b      	ldr	r3, [r3, #8]
   1321e:	4669      	mov	r1, sp
   13220:	4798      	blx	r3
   13222:	f1b0 0800 	subs.w	r8, r0, #0
   13226:	dbe4      	blt.n	131f2 <at_interface_read+0x2a>
   13228:	4640      	mov	r0, r8
   1322a:	b004      	add	sp, #16
   1322c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13230:	6803      	ldr	r3, [r0, #0]
   13232:	69c0      	ldr	r0, [r0, #28]
   13234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   13238:	6023      	str	r3, [r4, #0]
   1323a:	6803      	ldr	r3, [r0, #0]
   1323c:	4632      	mov	r2, r6
   1323e:	689b      	ldr	r3, [r3, #8]
   13240:	4669      	mov	r1, sp
   13242:	4798      	blx	r3
   13244:	f1b0 0800 	subs.w	r8, r0, #0
   13248:	daee      	bge.n	13228 <at_interface_read+0x60>
   1324a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1324e:	d1eb      	bne.n	13228 <at_interface_read+0x60>
   13250:	2023      	movs	r0, #35	; 0x23
   13252:	f7fe fbc7 	bl	119e4 <bsd_os_errno_set>
   13256:	4640      	mov	r0, r8
   13258:	b004      	add	sp, #16
   1325a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1325e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   13262:	d1e1      	bne.n	13228 <at_interface_read+0x60>
   13264:	4628      	mov	r0, r5
   13266:	f7fe fbbd 	bl	119e4 <bsd_os_errno_set>
   1326a:	4640      	mov	r0, r8
   1326c:	b004      	add	sp, #16
   1326e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13272:	2016      	movs	r0, #22
   13274:	f7fe fbb6 	bl	119e4 <bsd_os_errno_set>
   13278:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1327c:	e7d4      	b.n	13228 <at_interface_read+0x60>
   1327e:	bf00      	nop

00013280 <at_interface_getopt>:
   13280:	f005 bd8c 	b.w	18d9c <interface_socket_getopt>

00013284 <at_interface_setopt>:
   13284:	f005 bd54 	b.w	18d30 <interface_socket_setopt>

00013288 <rpc_at_event_handler>:
   13288:	b570      	push	{r4, r5, r6, lr}
   1328a:	4606      	mov	r6, r0
   1328c:	b084      	sub	sp, #16
   1328e:	68c0      	ldr	r0, [r0, #12]
   13290:	460d      	mov	r5, r1
   13292:	f005 fd25 	bl	18ce0 <interface_socket_from_handle_get>
   13296:	4604      	mov	r4, r0
   13298:	b348      	cbz	r0, 132ee <rpc_at_event_handler+0x66>
   1329a:	6803      	ldr	r3, [r0, #0]
   1329c:	b29b      	uxth	r3, r3
   1329e:	2b01      	cmp	r3, #1
   132a0:	d01f      	beq.n	132e2 <rpc_at_event_handler+0x5a>
   132a2:	6803      	ldr	r3, [r0, #0]
   132a4:	b29b      	uxth	r3, r3
   132a6:	2b0d      	cmp	r3, #13
   132a8:	d029      	beq.n	132fe <rpc_at_event_handler+0x76>
   132aa:	6803      	ldr	r3, [r0, #0]
   132ac:	b29b      	uxth	r3, r3
   132ae:	2b02      	cmp	r3, #2
   132b0:	d02d      	beq.n	1330e <rpc_at_event_handler+0x86>
   132b2:	3d03      	subs	r5, #3
   132b4:	2d01      	cmp	r5, #1
   132b6:	d817      	bhi.n	132e8 <rpc_at_event_handler+0x60>
   132b8:	2500      	movs	r5, #0
   132ba:	6873      	ldr	r3, [r6, #4]
   132bc:	6832      	ldr	r2, [r6, #0]
   132be:	e9cd 5502 	strd	r5, r5, [sp, #8]
   132c2:	e9cd 2300 	strd	r2, r3, [sp]
   132c6:	69e0      	ldr	r0, [r4, #28]
   132c8:	4669      	mov	r1, sp
   132ca:	6803      	ldr	r3, [r0, #0]
   132cc:	685b      	ldr	r3, [r3, #4]
   132ce:	4798      	blx	r3
   132d0:	3001      	adds	r0, #1
   132d2:	d019      	beq.n	13308 <rpc_at_event_handler+0x80>
   132d4:	4628      	mov	r0, r5
   132d6:	6823      	ldr	r3, [r4, #0]
   132d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   132dc:	6023      	str	r3, [r4, #0]
   132de:	b004      	add	sp, #16
   132e0:	bd70      	pop	{r4, r5, r6, pc}
   132e2:	2d02      	cmp	r5, #2
   132e4:	d1e5      	bne.n	132b2 <rpc_at_event_handler+0x2a>
   132e6:	6005      	str	r5, [r0, #0]
   132e8:	2000      	movs	r0, #0
   132ea:	b004      	add	sp, #16
   132ec:	bd70      	pop	{r4, r5, r6, pc}
   132ee:	6830      	ldr	r0, [r6, #0]
   132f0:	2800      	cmp	r0, #0
   132f2:	d0f9      	beq.n	132e8 <rpc_at_event_handler+0x60>
   132f4:	f004 f8b0 	bl	17458 <rpc_at_client_data_free>
   132f8:	4620      	mov	r0, r4
   132fa:	b004      	add	sp, #16
   132fc:	bd70      	pop	{r4, r5, r6, pc}
   132fe:	2d02      	cmp	r5, #2
   13300:	d1d7      	bne.n	132b2 <rpc_at_event_handler+0x2a>
   13302:	230e      	movs	r3, #14
   13304:	6003      	str	r3, [r0, #0]
   13306:	e7ef      	b.n	132e8 <rpc_at_event_handler+0x60>
   13308:	2002      	movs	r0, #2
   1330a:	b004      	add	sp, #16
   1330c:	bd70      	pop	{r4, r5, r6, pc}
   1330e:	6803      	ldr	r3, [r0, #0]
   13310:	029b      	lsls	r3, r3, #10
   13312:	d5ce      	bpl.n	132b2 <rpc_at_event_handler+0x2a>
   13314:	2d02      	cmp	r5, #2
   13316:	d1cc      	bne.n	132b2 <rpc_at_event_handler+0x2a>
   13318:	6803      	ldr	r3, [r0, #0]
   1331a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1331e:	6003      	str	r3, [r0, #0]
   13320:	6803      	ldr	r3, [r0, #0]
   13322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13326:	6003      	str	r3, [r0, #0]
   13328:	e7de      	b.n	132e8 <rpc_at_event_handler+0x60>
   1332a:	bf00      	nop

0001332c <dfu_client_event_handler>:
   1332c:	f850 1b08 	ldr.w	r1, [r0], #8
   13330:	0c09      	lsrs	r1, r1, #16
   13332:	f001 b891 	b.w	14458 <rpc_dfu_event_handler>
   13336:	bf00      	nop

00013338 <rpc_dfu_client_init>:
   13338:	4801      	ldr	r0, [pc, #4]	; (13340 <rpc_dfu_client_init+0x8>)
   1333a:	f005 be2f 	b.w	18f9c <rpc_client_register>
   1333e:	bf00      	nop
   13340:	0001f620 	.word	0x0001f620

00013344 <rpc_dfu_client_request_alloc>:
   13344:	2300      	movs	r3, #0
   13346:	b510      	push	{r4, lr}
   13348:	b082      	sub	sp, #8
   1334a:	9301      	str	r3, [sp, #4]
   1334c:	b158      	cbz	r0, 13366 <rpc_dfu_client_request_alloc+0x22>
   1334e:	4604      	mov	r4, r0
   13350:	aa01      	add	r2, sp, #4
   13352:	2006      	movs	r0, #6
   13354:	f006 f85a 	bl	1940c <rpc_message_alloc>
   13358:	b918      	cbnz	r0, 13362 <rpc_dfu_client_request_alloc+0x1e>
   1335a:	9b01      	ldr	r3, [sp, #4]
   1335c:	b10b      	cbz	r3, 13362 <rpc_dfu_client_request_alloc+0x1e>
   1335e:	3308      	adds	r3, #8
   13360:	6023      	str	r3, [r4, #0]
   13362:	b002      	add	sp, #8
   13364:	bd10      	pop	{r4, pc}
   13366:	2007      	movs	r0, #7
   13368:	b002      	add	sp, #8
   1336a:	bd10      	pop	{r4, pc}

0001336c <rpc_dfu_client_request_send>:
   1336c:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   13370:	d10b      	bne.n	1338a <rpc_dfu_client_request_send+0x1e>
   13372:	b160      	cbz	r0, 1338e <rpc_dfu_client_request_send+0x22>
   13374:	4603      	mov	r3, r0
   13376:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1337a:	2006      	movs	r0, #6
   1337c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   13380:	f843 1d08 	str.w	r1, [r3, #-8]!
   13384:	4619      	mov	r1, r3
   13386:	f006 b829 	b.w	193dc <rpc_message_send>
   1338a:	200f      	movs	r0, #15
   1338c:	4770      	bx	lr
   1338e:	2007      	movs	r0, #7
   13390:	4770      	bx	lr
   13392:	bf00      	nop

00013394 <rpc_dfu_client_message_free>:
   13394:	b120      	cbz	r0, 133a0 <rpc_dfu_client_message_free+0xc>
   13396:	f1a0 0108 	sub.w	r1, r0, #8
   1339a:	2006      	movs	r0, #6
   1339c:	f006 b868 	b.w	19470 <rpc_message_free>
   133a0:	2007      	movs	r0, #7
   133a2:	4770      	bx	lr

000133a4 <rpc_dfu_client_data_free>:
   133a4:	b118      	cbz	r0, 133ae <rpc_dfu_client_data_free+0xa>
   133a6:	4601      	mov	r1, r0
   133a8:	2006      	movs	r0, #6
   133aa:	f006 b973 	b.w	19694 <rpc_message_data_free>
   133ae:	2007      	movs	r0, #7
   133b0:	4770      	bx	lr
   133b2:	bf00      	nop

000133b4 <mem_free>:
   133b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133b8:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 13488 <mem_free+0xd4>
   133bc:	b083      	sub	sp, #12
   133be:	9000      	str	r0, [sp, #0]
   133c0:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   133c4:	f8dc 3008 	ldr.w	r3, [ip, #8]
   133c8:	b12b      	cbz	r3, 133d6 <mem_free+0x22>
   133ca:	f8dc 2000 	ldr.w	r2, [ip]
   133ce:	9c00      	ldr	r4, [sp, #0]
   133d0:	7810      	ldrb	r0, [r2, #0]
   133d2:	42a0      	cmp	r0, r4
   133d4:	d006      	beq.n	133e4 <mem_free+0x30>
   133d6:	f10c 0c0c 	add.w	ip, ip, #12
   133da:	45e3      	cmp	fp, ip
   133dc:	d1f2      	bne.n	133c4 <mem_free+0x10>
   133de:	b003      	add	sp, #12
   133e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133e4:	f8dc a004 	ldr.w	sl, [ip, #4]
   133e8:	eb03 080a 	add.w	r8, r3, sl
   133ec:	45c2      	cmp	sl, r8
   133ee:	d2f2      	bcs.n	133d6 <mem_free+0x22>
   133f0:	6853      	ldr	r3, [r2, #4]
   133f2:	f8cd c004 	str.w	ip, [sp, #4]
   133f6:	46d6      	mov	lr, sl
   133f8:	469c      	mov	ip, r3
   133fa:	f8d2 9010 	ldr.w	r9, [r2, #16]
   133fe:	8997      	ldrh	r7, [r2, #12]
   13400:	ebae 000a 	sub.w	r0, lr, sl
   13404:	b3df      	cbz	r7, 1347e <mem_free+0xca>
   13406:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   1340a:	4290      	cmp	r0, r2
   1340c:	d31c      	bcc.n	13448 <mem_free+0x94>
   1340e:	4665      	mov	r5, ip
   13410:	2400      	movs	r4, #0
   13412:	f109 0304 	add.w	r3, r9, #4
   13416:	e003      	b.n	13420 <mem_free+0x6c>
   13418:	885a      	ldrh	r2, [r3, #2]
   1341a:	3304      	adds	r3, #4
   1341c:	4282      	cmp	r2, r0
   1341e:	d815      	bhi.n	1344c <mem_free+0x98>
   13420:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   13424:	3401      	adds	r4, #1
   13426:	42a7      	cmp	r7, r4
   13428:	fb02 5506 	mla	r5, r2, r6, r5
   1342c:	eba0 0002 	sub.w	r0, r0, r2
   13430:	461e      	mov	r6, r3
   13432:	d1f1      	bne.n	13418 <mem_free+0x64>
   13434:	2000      	movs	r0, #0
   13436:	4281      	cmp	r1, r0
   13438:	d00d      	beq.n	13456 <mem_free+0xa2>
   1343a:	f10e 0e01 	add.w	lr, lr, #1
   1343e:	45f0      	cmp	r8, lr
   13440:	d1de      	bne.n	13400 <mem_free+0x4c>
   13442:	f8dd c004 	ldr.w	ip, [sp, #4]
   13446:	e7c6      	b.n	133d6 <mem_free+0x22>
   13448:	4665      	mov	r5, ip
   1344a:	464e      	mov	r6, r9
   1344c:	8833      	ldrh	r3, [r6, #0]
   1344e:	fb00 5003 	mla	r0, r0, r3, r5
   13452:	4281      	cmp	r1, r0
   13454:	d1f1      	bne.n	1343a <mem_free+0x86>
   13456:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   1345a:	f8dd c004 	ldr.w	ip, [sp, #4]
   1345e:	d0ba      	beq.n	133d6 <mem_free+0x22>
   13460:	2301      	movs	r3, #1
   13462:	4a08      	ldr	r2, [pc, #32]	; (13484 <mem_free+0xd0>)
   13464:	ea4f 115e 	mov.w	r1, lr, lsr #5
   13468:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   1346c:	f00e 0e1f 	and.w	lr, lr, #31
   13470:	fa03 fe0e 	lsl.w	lr, r3, lr
   13474:	ea4e 0000 	orr.w	r0, lr, r0
   13478:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   1347c:	e7af      	b.n	133de <mem_free+0x2a>
   1347e:	4638      	mov	r0, r7
   13480:	e7d9      	b.n	13436 <mem_free+0x82>
   13482:	bf00      	nop
   13484:	200204d4 	.word	0x200204d4
   13488:	20020518 	.word	0x20020518

0001348c <mem_alloc.constprop.5>:
   1348c:	2800      	cmp	r0, #0
   1348e:	d050      	beq.n	13532 <mem_alloc.constprop.5+0xa6>
   13490:	4b6d      	ldr	r3, [pc, #436]	; (13648 <mem_alloc.constprop.5+0x1bc>)
   13492:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13496:	4290      	cmp	r0, r2
   13498:	d84b      	bhi.n	13532 <mem_alloc.constprop.5+0xa6>
   1349a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1349e:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   134a2:	b083      	sub	sp, #12
   134a4:	f1bb 0f00 	cmp.w	fp, #0
   134a8:	d054      	beq.n	13554 <mem_alloc.constprop.5+0xc8>
   134aa:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   134ae:	4691      	mov	r9, r2
   134b0:	2600      	movs	r6, #0
   134b2:	f04f 0812 	mov.w	r8, #18
   134b6:	4f65      	ldr	r7, [pc, #404]	; (1364c <mem_alloc.constprop.5+0x1c0>)
   134b8:	9201      	str	r2, [sp, #4]
   134ba:	f10b 0e11 	add.w	lr, fp, #17
   134be:	eb06 0209 	add.w	r2, r6, r9
   134c2:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   134c6:	3201      	adds	r2, #1
   134c8:	0852      	lsrs	r2, r2, #1
   134ca:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   134ce:	f102 0112 	add.w	r1, r2, #18
   134d2:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   134d6:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   134da:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   134de:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   134e2:	f8dc c004 	ldr.w	ip, [ip, #4]
   134e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   134ea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   134ee:	f8da a010 	ldr.w	sl, [sl, #16]
   134f2:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   134f6:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   134fa:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   134fe:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   13502:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   13506:	6849      	ldr	r1, [r1, #4]
   13508:	692d      	ldr	r5, [r5, #16]
   1350a:	6924      	ldr	r4, [r4, #16]
   1350c:	f8dc c004 	ldr.w	ip, [ip, #4]
   13510:	4550      	cmp	r0, sl
   13512:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   13516:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   1351a:	d915      	bls.n	13548 <mem_alloc.constprop.5+0xbc>
   1351c:	4288      	cmp	r0, r1
   1351e:	d211      	bcs.n	13544 <mem_alloc.constprop.5+0xb8>
   13520:	42a8      	cmp	r0, r5
   13522:	d908      	bls.n	13536 <mem_alloc.constprop.5+0xaa>
   13524:	1c56      	adds	r6, r2, #1
   13526:	45b1      	cmp	r9, r6
   13528:	f0c0 8087 	bcc.w	1363a <mem_alloc.constprop.5+0x1ae>
   1352c:	f102 0813 	add.w	r8, r2, #19
   13530:	e7c5      	b.n	134be <mem_alloc.constprop.5+0x32>
   13532:	2000      	movs	r0, #0
   13534:	4770      	bx	lr
   13536:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   1353a:	454e      	cmp	r6, r9
   1353c:	d87d      	bhi.n	1363a <mem_alloc.constprop.5+0x1ae>
   1353e:	f102 0e11 	add.w	lr, r2, #17
   13542:	e7bc      	b.n	134be <mem_alloc.constprop.5+0x32>
   13544:	f109 0601 	add.w	r6, r9, #1
   13548:	45b3      	cmp	fp, r6
   1354a:	d007      	beq.n	1355c <mem_alloc.constprop.5+0xd0>
   1354c:	2e10      	cmp	r6, #16
   1354e:	d001      	beq.n	13554 <mem_alloc.constprop.5+0xc8>
   13550:	45b3      	cmp	fp, r6
   13552:	d808      	bhi.n	13566 <mem_alloc.constprop.5+0xda>
   13554:	2000      	movs	r0, #0
   13556:	b003      	add	sp, #12
   13558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1355c:	9a01      	ldr	r2, [sp, #4]
   1355e:	2a10      	cmp	r2, #16
   13560:	bf18      	it	ne
   13562:	4616      	movne	r6, r2
   13564:	d0f6      	beq.n	13554 <mem_alloc.constprop.5+0xc8>
   13566:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 13650 <mem_alloc.constprop.5+0x1c4>
   1356a:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   1356e:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   13572:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   13576:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   1357a:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   1357e:	f8d2 e004 	ldr.w	lr, [r2, #4]
   13582:	691d      	ldr	r5, [r3, #16]
   13584:	2c00      	cmp	r4, #0
   13586:	d056      	beq.n	13636 <mem_alloc.constprop.5+0x1aa>
   13588:	462a      	mov	r2, r5
   1358a:	4670      	mov	r0, lr
   1358c:	00a4      	lsls	r4, r4, #2
   1358e:	eb05 0904 	add.w	r9, r5, r4
   13592:	8851      	ldrh	r1, [r2, #2]
   13594:	3204      	adds	r2, #4
   13596:	4591      	cmp	r9, r2
   13598:	4408      	add	r0, r1
   1359a:	d1fa      	bne.n	13592 <mem_alloc.constprop.5+0x106>
   1359c:	1929      	adds	r1, r5, r4
   1359e:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   135a2:	4482      	add	sl, r0
   135a4:	4582      	cmp	sl, r0
   135a6:	d918      	bls.n	135da <mem_alloc.constprop.5+0x14e>
   135a8:	0941      	lsrs	r1, r0, #5
   135aa:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   135ae:	f000 041f 	and.w	r4, r0, #31
   135b2:	fa22 f904 	lsr.w	r9, r2, r4
   135b6:	f019 0f01 	tst.w	r9, #1
   135ba:	d007      	beq.n	135cc <mem_alloc.constprop.5+0x140>
   135bc:	e013      	b.n	135e6 <mem_alloc.constprop.5+0x15a>
   135be:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   135c2:	fa22 f904 	lsr.w	r9, r2, r4
   135c6:	f019 0f01 	tst.w	r9, #1
   135ca:	d10c      	bne.n	135e6 <mem_alloc.constprop.5+0x15a>
   135cc:	3001      	adds	r0, #1
   135ce:	4582      	cmp	sl, r0
   135d0:	ea4f 1150 	mov.w	r1, r0, lsr #5
   135d4:	f000 041f 	and.w	r4, r0, #31
   135d8:	d1f1      	bne.n	135be <mem_alloc.constprop.5+0x132>
   135da:	3601      	adds	r6, #1
   135dc:	455e      	cmp	r6, fp
   135de:	f108 0808 	add.w	r8, r8, #8
   135e2:	d3c4      	bcc.n	1356e <mem_alloc.constprop.5+0xe2>
   135e4:	e7b6      	b.n	13554 <mem_alloc.constprop.5+0xc8>
   135e6:	2601      	movs	r6, #1
   135e8:	fa06 f404 	lsl.w	r4, r6, r4
   135ec:	899e      	ldrh	r6, [r3, #12]
   135ee:	ea22 0204 	bic.w	r2, r2, r4
   135f2:	eba0 000e 	sub.w	r0, r0, lr
   135f6:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   135fa:	685c      	ldr	r4, [r3, #4]
   135fc:	2e00      	cmp	r6, #0
   135fe:	d0a9      	beq.n	13554 <mem_alloc.constprop.5+0xc8>
   13600:	886a      	ldrh	r2, [r5, #2]
   13602:	4282      	cmp	r2, r0
   13604:	d811      	bhi.n	1362a <mem_alloc.constprop.5+0x19e>
   13606:	2100      	movs	r1, #0
   13608:	1d2b      	adds	r3, r5, #4
   1360a:	e003      	b.n	13614 <mem_alloc.constprop.5+0x188>
   1360c:	885a      	ldrh	r2, [r3, #2]
   1360e:	3304      	adds	r3, #4
   13610:	4282      	cmp	r2, r0
   13612:	d80a      	bhi.n	1362a <mem_alloc.constprop.5+0x19e>
   13614:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   13618:	3101      	adds	r1, #1
   1361a:	428e      	cmp	r6, r1
   1361c:	fb02 4405 	mla	r4, r2, r5, r4
   13620:	eba0 0002 	sub.w	r0, r0, r2
   13624:	461d      	mov	r5, r3
   13626:	d1f1      	bne.n	1360c <mem_alloc.constprop.5+0x180>
   13628:	e794      	b.n	13554 <mem_alloc.constprop.5+0xc8>
   1362a:	882b      	ldrh	r3, [r5, #0]
   1362c:	fb00 4003 	mla	r0, r0, r3, r4
   13630:	b003      	add	sp, #12
   13632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13636:	4670      	mov	r0, lr
   13638:	e7b0      	b.n	1359c <mem_alloc.constprop.5+0x110>
   1363a:	f1bb 0f10 	cmp.w	fp, #16
   1363e:	bf08      	it	eq
   13640:	260f      	moveq	r6, #15
   13642:	d090      	beq.n	13566 <mem_alloc.constprop.5+0xda>
   13644:	e786      	b.n	13554 <mem_alloc.constprop.5+0xc8>
   13646:	bf00      	nop
   13648:	20020554 	.word	0x20020554
   1364c:	20020518 	.word	0x20020518
   13650:	200204d4 	.word	0x200204d4

00013654 <mem_alloc.constprop.4>:
   13654:	2800      	cmp	r0, #0
   13656:	d04c      	beq.n	136f2 <mem_alloc.constprop.4+0x9e>
   13658:	4b6b      	ldr	r3, [pc, #428]	; (13808 <mem_alloc.constprop.4+0x1b4>)
   1365a:	681a      	ldr	r2, [r3, #0]
   1365c:	4290      	cmp	r0, r2
   1365e:	d848      	bhi.n	136f2 <mem_alloc.constprop.4+0x9e>
   13660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13664:	685f      	ldr	r7, [r3, #4]
   13666:	b083      	sub	sp, #12
   13668:	9700      	str	r7, [sp, #0]
   1366a:	2f00      	cmp	r7, #0
   1366c:	d051      	beq.n	13712 <mem_alloc.constprop.4+0xbe>
   1366e:	1e7a      	subs	r2, r7, #1
   13670:	4696      	mov	lr, r2
   13672:	2100      	movs	r1, #0
   13674:	f04f 0c01 	mov.w	ip, #1
   13678:	4c64      	ldr	r4, [pc, #400]	; (1380c <mem_alloc.constprop.4+0x1b8>)
   1367a:	9201      	str	r2, [sp, #4]
   1367c:	eb01 020e 	add.w	r2, r1, lr
   13680:	3201      	adds	r2, #1
   13682:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   13686:	0852      	lsrs	r2, r2, #1
   13688:	f102 0801 	add.w	r8, r2, #1
   1368c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   13690:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   13694:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   13698:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   1369c:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   136a0:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   136a4:	f8d9 9004 	ldr.w	r9, [r9, #4]
   136a8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   136ac:	f8da a010 	ldr.w	sl, [sl, #16]
   136b0:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   136b4:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   136b8:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   136bc:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   136c0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   136c4:	6936      	ldr	r6, [r6, #16]
   136c6:	f8db b004 	ldr.w	fp, [fp, #4]
   136ca:	692d      	ldr	r5, [r5, #16]
   136cc:	f8d9 9004 	ldr.w	r9, [r9, #4]
   136d0:	4550      	cmp	r0, sl
   136d2:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   136d6:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   136da:	d913      	bls.n	13704 <mem_alloc.constprop.4+0xb0>
   136dc:	42a8      	cmp	r0, r5
   136de:	d210      	bcs.n	13702 <mem_alloc.constprop.4+0xae>
   136e0:	42b0      	cmp	r0, r6
   136e2:	d908      	bls.n	136f6 <mem_alloc.constprop.4+0xa2>
   136e4:	45c6      	cmp	lr, r8
   136e6:	4641      	mov	r1, r8
   136e8:	f0c0 8087 	bcc.w	137fa <mem_alloc.constprop.4+0x1a6>
   136ec:	f108 0c01 	add.w	ip, r8, #1
   136f0:	e7c4      	b.n	1367c <mem_alloc.constprop.4+0x28>
   136f2:	2000      	movs	r0, #0
   136f4:	4770      	bx	lr
   136f6:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
   136fa:	4571      	cmp	r1, lr
   136fc:	d87d      	bhi.n	137fa <mem_alloc.constprop.4+0x1a6>
   136fe:	4617      	mov	r7, r2
   13700:	e7bc      	b.n	1367c <mem_alloc.constprop.4+0x28>
   13702:	4639      	mov	r1, r7
   13704:	9a00      	ldr	r2, [sp, #0]
   13706:	428a      	cmp	r2, r1
   13708:	d007      	beq.n	1371a <mem_alloc.constprop.4+0xc6>
   1370a:	2910      	cmp	r1, #16
   1370c:	d001      	beq.n	13712 <mem_alloc.constprop.4+0xbe>
   1370e:	428a      	cmp	r2, r1
   13710:	d808      	bhi.n	13724 <mem_alloc.constprop.4+0xd0>
   13712:	2000      	movs	r0, #0
   13714:	b003      	add	sp, #12
   13716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1371a:	9a01      	ldr	r2, [sp, #4]
   1371c:	2a10      	cmp	r2, #16
   1371e:	bf18      	it	ne
   13720:	4611      	movne	r1, r2
   13722:	d0f6      	beq.n	13712 <mem_alloc.constprop.4+0xbe>
   13724:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 13810 <mem_alloc.constprop.4+0x1bc>
   13728:	f8dd 9000 	ldr.w	r9, [sp]
   1372c:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   13730:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   13734:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   13738:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   1373c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   13740:	f8d2 e004 	ldr.w	lr, [r2, #4]
   13744:	691f      	ldr	r7, [r3, #16]
   13746:	2e00      	cmp	r6, #0
   13748:	d055      	beq.n	137f6 <mem_alloc.constprop.4+0x1a2>
   1374a:	463a      	mov	r2, r7
   1374c:	4670      	mov	r0, lr
   1374e:	00b6      	lsls	r6, r6, #2
   13750:	eb07 0a06 	add.w	sl, r7, r6
   13754:	8855      	ldrh	r5, [r2, #2]
   13756:	3204      	adds	r2, #4
   13758:	4592      	cmp	sl, r2
   1375a:	4428      	add	r0, r5
   1375c:	d1fa      	bne.n	13754 <mem_alloc.constprop.4+0x100>
   1375e:	19bd      	adds	r5, r7, r6
   13760:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   13764:	4483      	add	fp, r0
   13766:	4583      	cmp	fp, r0
   13768:	d918      	bls.n	1379c <mem_alloc.constprop.4+0x148>
   1376a:	0945      	lsrs	r5, r0, #5
   1376c:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   13770:	f000 061f 	and.w	r6, r0, #31
   13774:	fa22 fa06 	lsr.w	sl, r2, r6
   13778:	f01a 0f01 	tst.w	sl, #1
   1377c:	d007      	beq.n	1378e <mem_alloc.constprop.4+0x13a>
   1377e:	e013      	b.n	137a8 <mem_alloc.constprop.4+0x154>
   13780:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   13784:	fa22 fa06 	lsr.w	sl, r2, r6
   13788:	f01a 0f01 	tst.w	sl, #1
   1378c:	d10c      	bne.n	137a8 <mem_alloc.constprop.4+0x154>
   1378e:	3001      	adds	r0, #1
   13790:	4583      	cmp	fp, r0
   13792:	ea4f 1550 	mov.w	r5, r0, lsr #5
   13796:	f000 061f 	and.w	r6, r0, #31
   1379a:	d1f1      	bne.n	13780 <mem_alloc.constprop.4+0x12c>
   1379c:	3101      	adds	r1, #1
   1379e:	4549      	cmp	r1, r9
   137a0:	f108 0808 	add.w	r8, r8, #8
   137a4:	d3c4      	bcc.n	13730 <mem_alloc.constprop.4+0xdc>
   137a6:	e7b4      	b.n	13712 <mem_alloc.constprop.4+0xbe>
   137a8:	2101      	movs	r1, #1
   137aa:	40b1      	lsls	r1, r6
   137ac:	899e      	ldrh	r6, [r3, #12]
   137ae:	ea22 0201 	bic.w	r2, r2, r1
   137b2:	eba0 000e 	sub.w	r0, r0, lr
   137b6:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   137ba:	685c      	ldr	r4, [r3, #4]
   137bc:	2e00      	cmp	r6, #0
   137be:	d0a8      	beq.n	13712 <mem_alloc.constprop.4+0xbe>
   137c0:	887a      	ldrh	r2, [r7, #2]
   137c2:	4282      	cmp	r2, r0
   137c4:	d811      	bhi.n	137ea <mem_alloc.constprop.4+0x196>
   137c6:	2100      	movs	r1, #0
   137c8:	1d3b      	adds	r3, r7, #4
   137ca:	e003      	b.n	137d4 <mem_alloc.constprop.4+0x180>
   137cc:	885a      	ldrh	r2, [r3, #2]
   137ce:	3304      	adds	r3, #4
   137d0:	4282      	cmp	r2, r0
   137d2:	d80a      	bhi.n	137ea <mem_alloc.constprop.4+0x196>
   137d4:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   137d8:	3101      	adds	r1, #1
   137da:	428e      	cmp	r6, r1
   137dc:	eba0 0002 	sub.w	r0, r0, r2
   137e0:	fb02 4405 	mla	r4, r2, r5, r4
   137e4:	461f      	mov	r7, r3
   137e6:	d1f1      	bne.n	137cc <mem_alloc.constprop.4+0x178>
   137e8:	e793      	b.n	13712 <mem_alloc.constprop.4+0xbe>
   137ea:	883b      	ldrh	r3, [r7, #0]
   137ec:	fb00 4003 	mla	r0, r0, r3, r4
   137f0:	b003      	add	sp, #12
   137f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137f6:	4670      	mov	r0, lr
   137f8:	e7b1      	b.n	1375e <mem_alloc.constprop.4+0x10a>
   137fa:	9a00      	ldr	r2, [sp, #0]
   137fc:	2a10      	cmp	r2, #16
   137fe:	bf08      	it	eq
   13800:	210f      	moveq	r1, #15
   13802:	d08f      	beq.n	13724 <mem_alloc.constprop.4+0xd0>
   13804:	e785      	b.n	13712 <mem_alloc.constprop.4+0xbe>
   13806:	bf00      	nop
   13808:	20020554 	.word	0x20020554
   1380c:	20020518 	.word	0x20020518
   13810:	200204d4 	.word	0x200204d4

00013814 <nrf_mem_init>:
   13814:	b570      	push	{r4, r5, r6, lr}
   13816:	2200      	movs	r2, #0
   13818:	2501      	movs	r5, #1
   1381a:	4833      	ldr	r0, [pc, #204]	; (138e8 <nrf_mem_init+0xd4>)
   1381c:	0951      	lsrs	r1, r2, #5
   1381e:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   13822:	f002 031f 	and.w	r3, r2, #31
   13826:	fa05 f303 	lsl.w	r3, r5, r3
   1382a:	3201      	adds	r2, #1
   1382c:	4323      	orrs	r3, r4
   1382e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   13832:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   13836:	d1f1      	bne.n	1381c <nrf_mem_init+0x8>
   13838:	2400      	movs	r4, #0
   1383a:	4b2c      	ldr	r3, [pc, #176]	; (138ec <nrf_mem_init+0xd8>)
   1383c:	4621      	mov	r1, r4
   1383e:	223c      	movs	r2, #60	; 0x3c
   13840:	482b      	ldr	r0, [pc, #172]	; (138f0 <nrf_mem_init+0xdc>)
   13842:	601c      	str	r4, [r3, #0]
   13844:	f009 ff41 	bl	1d6ca <memset>
   13848:	2110      	movs	r1, #16
   1384a:	2205      	movs	r2, #5
   1384c:	4b29      	ldr	r3, [pc, #164]	; (138f4 <nrf_mem_init+0xe0>)
   1384e:	4e2a      	ldr	r6, [pc, #168]	; (138f8 <nrf_mem_init+0xe4>)
   13850:	e9c3 4400 	strd	r4, r4, [r3]
   13854:	60d9      	str	r1, [r3, #12]
   13856:	6159      	str	r1, [r3, #20]
   13858:	61d9      	str	r1, [r3, #28]
   1385a:	6259      	str	r1, [r3, #36]	; 0x24
   1385c:	62d9      	str	r1, [r3, #44]	; 0x2c
   1385e:	6359      	str	r1, [r3, #52]	; 0x34
   13860:	63d9      	str	r1, [r3, #60]	; 0x3c
   13862:	6459      	str	r1, [r3, #68]	; 0x44
   13864:	64d9      	str	r1, [r3, #76]	; 0x4c
   13866:	6559      	str	r1, [r3, #84]	; 0x54
   13868:	65d9      	str	r1, [r3, #92]	; 0x5c
   1386a:	6659      	str	r1, [r3, #100]	; 0x64
   1386c:	66d9      	str	r1, [r3, #108]	; 0x6c
   1386e:	6759      	str	r1, [r3, #116]	; 0x74
   13870:	67d9      	str	r1, [r3, #124]	; 0x7c
   13872:	609a      	str	r2, [r3, #8]
   13874:	611a      	str	r2, [r3, #16]
   13876:	619a      	str	r2, [r3, #24]
   13878:	621a      	str	r2, [r3, #32]
   1387a:	629a      	str	r2, [r3, #40]	; 0x28
   1387c:	631a      	str	r2, [r3, #48]	; 0x30
   1387e:	639a      	str	r2, [r3, #56]	; 0x38
   13880:	641a      	str	r2, [r3, #64]	; 0x40
   13882:	649a      	str	r2, [r3, #72]	; 0x48
   13884:	651a      	str	r2, [r3, #80]	; 0x50
   13886:	659a      	str	r2, [r3, #88]	; 0x58
   13888:	661a      	str	r2, [r3, #96]	; 0x60
   1388a:	669a      	str	r2, [r3, #104]	; 0x68
   1388c:	671a      	str	r2, [r3, #112]	; 0x70
   1388e:	679a      	str	r2, [r3, #120]	; 0x78
   13890:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   13894:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   13898:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   1389c:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   138a0:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   138a4:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   138a8:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   138ac:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   138b0:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   138b4:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   138b8:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   138bc:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   138c0:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   138c4:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   138c8:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   138cc:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   138d0:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   138d4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   138d8:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   138dc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   138e0:	4620      	mov	r0, r4
   138e2:	7035      	strb	r5, [r6, #0]
   138e4:	bd70      	pop	{r4, r5, r6, pc}
   138e6:	bf00      	nop
   138e8:	200204d4 	.word	0x200204d4
   138ec:	20020514 	.word	0x20020514
   138f0:	20020518 	.word	0x20020518
   138f4:	20020554 	.word	0x20020554
   138f8:	2002658d 	.word	0x2002658d

000138fc <nrf_mem_register>:
   138fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13900:	4b87      	ldr	r3, [pc, #540]	; (13b20 <nrf_mem_register+0x224>)
   13902:	b087      	sub	sp, #28
   13904:	781b      	ldrb	r3, [r3, #0]
   13906:	2b00      	cmp	r3, #0
   13908:	f000 808c 	beq.w	13a24 <nrf_mem_register+0x128>
   1390c:	b328      	cbz	r0, 1395a <nrf_mem_register+0x5e>
   1390e:	b321      	cbz	r1, 1395a <nrf_mem_register+0x5e>
   13910:	780b      	ldrb	r3, [r1, #0]
   13912:	f8df 8218 	ldr.w	r8, [pc, #536]	; 13b2c <nrf_mem_register+0x230>
   13916:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1391a:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   1391e:	685b      	ldr	r3, [r3, #4]
   13920:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   13924:	4463      	add	r3, ip
   13926:	2b10      	cmp	r3, #16
   13928:	d811      	bhi.n	1394e <nrf_mem_register+0x52>
   1392a:	f04f 0a00 	mov.w	sl, #0
   1392e:	4689      	mov	r9, r1
   13930:	4b7c      	ldr	r3, [pc, #496]	; (13b24 <nrf_mem_register+0x228>)
   13932:	4f7d      	ldr	r7, [pc, #500]	; (13b28 <nrf_mem_register+0x22c>)
   13934:	681b      	ldr	r3, [r3, #0]
   13936:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   1393a:	9300      	str	r3, [sp, #0]
   1393c:	68b9      	ldr	r1, [r7, #8]
   1393e:	b191      	cbz	r1, 13966 <nrf_mem_register+0x6a>
   13940:	f10a 0a01 	add.w	sl, sl, #1
   13944:	f1ba 0f05 	cmp.w	sl, #5
   13948:	f107 070c 	add.w	r7, r7, #12
   1394c:	d1f6      	bne.n	1393c <nrf_mem_register+0x40>
   1394e:	f248 1b07 	movw	fp, #33031	; 0x8107
   13952:	4658      	mov	r0, fp
   13954:	b007      	add	sp, #28
   13956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1395a:	f248 1b0e 	movw	fp, #33038	; 0x810e
   1395e:	4658      	mov	r0, fp
   13960:	b007      	add	sp, #28
   13962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13966:	f1bc 0f00 	cmp.w	ip, #0
   1396a:	d061      	beq.n	13a30 <nrf_mem_register+0x134>
   1396c:	460d      	mov	r5, r1
   1396e:	460c      	mov	r4, r1
   13970:	f8d9 3010 	ldr.w	r3, [r9, #16]
   13974:	eb0e 0b03 	add.w	fp, lr, r3
   13978:	885a      	ldrh	r2, [r3, #2]
   1397a:	f833 6b04 	ldrh.w	r6, [r3], #4
   1397e:	4415      	add	r5, r2
   13980:	459b      	cmp	fp, r3
   13982:	fb02 4406 	mla	r4, r2, r6, r4
   13986:	d1f7      	bne.n	13978 <nrf_mem_register+0x7c>
   13988:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1398c:	42a3      	cmp	r3, r4
   1398e:	d3d7      	bcc.n	13940 <nrf_mem_register+0x44>
   13990:	9b00      	ldr	r3, [sp, #0]
   13992:	442b      	add	r3, r5
   13994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   13998:	d2d2      	bcs.n	13940 <nrf_mem_register+0x44>
   1399a:	4c63      	ldr	r4, [pc, #396]	; (13b28 <nrf_mem_register+0x22c>)
   1399c:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   139a0:	0092      	lsls	r2, r2, #2
   139a2:	f8c0 a000 	str.w	sl, [r0]
   139a6:	18a0      	adds	r0, r4, r2
   139a8:	f844 9002 	str.w	r9, [r4, r2]
   139ac:	9a00      	ldr	r2, [sp, #0]
   139ae:	468b      	mov	fp, r1
   139b0:	e9c0 2501 	strd	r2, r5, [r0, #4]
   139b4:	f899 2001 	ldrb.w	r2, [r9, #1]
   139b8:	485a      	ldr	r0, [pc, #360]	; (13b24 <nrf_mem_register+0x228>)
   139ba:	2a01      	cmp	r2, #1
   139bc:	6003      	str	r3, [r0, #0]
   139be:	d0c8      	beq.n	13952 <nrf_mem_register+0x56>
   139c0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   139c4:	2b00      	cmp	r3, #0
   139c6:	d0c4      	beq.n	13952 <nrf_mem_register+0x56>
   139c8:	2500      	movs	r5, #0
   139ca:	f8cd 9004 	str.w	r9, [sp, #4]
   139ce:	f8cd a00c 	str.w	sl, [sp, #12]
   139d2:	f8cd b014 	str.w	fp, [sp, #20]
   139d6:	9b01      	ldr	r3, [sp, #4]
   139d8:	781f      	ldrb	r7, [r3, #0]
   139da:	691a      	ldr	r2, [r3, #16]
   139dc:	013b      	lsls	r3, r7, #4
   139de:	eb03 0907 	add.w	r9, r3, r7
   139e2:	9300      	str	r3, [sp, #0]
   139e4:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   139e8:	6859      	ldr	r1, [r3, #4]
   139ea:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   139ee:	9102      	str	r1, [sp, #8]
   139f0:	bb39      	cbnz	r1, 13a42 <nrf_mem_register+0x146>
   139f2:	9a03      	ldr	r2, [sp, #12]
   139f4:	60dd      	str	r5, [r3, #12]
   139f6:	609a      	str	r2, [r3, #8]
   139f8:	9b00      	ldr	r3, [sp, #0]
   139fa:	443b      	add	r3, r7
   139fc:	461f      	mov	r7, r3
   139fe:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   13a02:	684b      	ldr	r3, [r1, #4]
   13a04:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   13a08:	3301      	adds	r3, #1
   13a0a:	4294      	cmp	r4, r2
   13a0c:	604b      	str	r3, [r1, #4]
   13a0e:	d912      	bls.n	13a36 <nrf_mem_register+0x13a>
   13a10:	9b01      	ldr	r3, [sp, #4]
   13a12:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   13a16:	899b      	ldrh	r3, [r3, #12]
   13a18:	3501      	adds	r5, #1
   13a1a:	429d      	cmp	r5, r3
   13a1c:	d3db      	bcc.n	139d6 <nrf_mem_register+0xda>
   13a1e:	f8dd b014 	ldr.w	fp, [sp, #20]
   13a22:	e796      	b.n	13952 <nrf_mem_register+0x56>
   13a24:	f248 1b08 	movw	fp, #33032	; 0x8108
   13a28:	4658      	mov	r0, fp
   13a2a:	b007      	add	sp, #28
   13a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a30:	9b00      	ldr	r3, [sp, #0]
   13a32:	4665      	mov	r5, ip
   13a34:	e7ae      	b.n	13994 <nrf_mem_register+0x98>
   13a36:	9b01      	ldr	r3, [sp, #4]
   13a38:	3501      	adds	r5, #1
   13a3a:	899b      	ldrh	r3, [r3, #12]
   13a3c:	42ab      	cmp	r3, r5
   13a3e:	d8ca      	bhi.n	139d6 <nrf_mem_register+0xda>
   13a40:	e7ed      	b.n	13a1e <nrf_mem_register+0x122>
   13a42:	2600      	movs	r6, #0
   13a44:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
   13a48:	9504      	str	r5, [sp, #16]
   13a4a:	eb06 000a 	add.w	r0, r6, sl
   13a4e:	eb09 0206 	add.w	r2, r9, r6
   13a52:	3201      	adds	r2, #1
   13a54:	3001      	adds	r0, #1
   13a56:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   13a5a:	0840      	lsrs	r0, r0, #1
   13a5c:	4d32      	ldr	r5, [pc, #200]	; (13b28 <nrf_mem_register+0x22c>)
   13a5e:	eb09 0100 	add.w	r1, r9, r0
   13a62:	eb09 030a 	add.w	r3, r9, sl
   13a66:	3101      	adds	r1, #1
   13a68:	3301      	adds	r3, #1
   13a6a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   13a6e:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   13a72:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   13a76:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   13a7a:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   13a7e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   13a82:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   13a86:	f8db b010 	ldr.w	fp, [fp, #16]
   13a8a:	6852      	ldr	r2, [r2, #4]
   13a8c:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   13a90:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   13a94:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   13a98:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   13a9c:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   13aa0:	f8de e010 	ldr.w	lr, [lr, #16]
   13aa4:	6849      	ldr	r1, [r1, #4]
   13aa6:	f8dc c010 	ldr.w	ip, [ip, #16]
   13aaa:	685b      	ldr	r3, [r3, #4]
   13aac:	4294      	cmp	r4, r2
   13aae:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   13ab2:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   13ab6:	d92d      	bls.n	13b14 <nrf_mem_register+0x218>
   13ab8:	429c      	cmp	r4, r3
   13aba:	d22d      	bcs.n	13b18 <nrf_mem_register+0x21c>
   13abc:	428c      	cmp	r4, r1
   13abe:	d924      	bls.n	13b0a <nrf_mem_register+0x20e>
   13ac0:	1c46      	adds	r6, r0, #1
   13ac2:	45b2      	cmp	sl, r6
   13ac4:	d2c1      	bcs.n	13a4a <nrf_mem_register+0x14e>
   13ac6:	2610      	movs	r6, #16
   13ac8:	9d04      	ldr	r5, [sp, #16]
   13aca:	9a02      	ldr	r2, [sp, #8]
   13acc:	42b2      	cmp	r2, r6
   13ace:	d911      	bls.n	13af4 <nrf_mem_register+0x1f8>
   13ad0:	9b00      	ldr	r3, [sp, #0]
   13ad2:	443b      	add	r3, r7
   13ad4:	441a      	add	r2, r3
   13ad6:	4433      	add	r3, r6
   13ad8:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   13adc:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   13ae0:	2208      	movs	r2, #8
   13ae2:	4651      	mov	r1, sl
   13ae4:	eb0a 0002 	add.w	r0, sl, r2
   13ae8:	f1aa 0a08 	sub.w	sl, sl, #8
   13aec:	f009 fdc3 	bl	1d676 <memcpy>
   13af0:	45d1      	cmp	r9, sl
   13af2:	d1f5      	bne.n	13ae0 <nrf_mem_register+0x1e4>
   13af4:	9b00      	ldr	r3, [sp, #0]
   13af6:	9903      	ldr	r1, [sp, #12]
   13af8:	443b      	add	r3, r7
   13afa:	4433      	add	r3, r6
   13afc:	3301      	adds	r3, #1
   13afe:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   13b02:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   13b06:	6055      	str	r5, [r2, #4]
   13b08:	e776      	b.n	139f8 <nrf_mem_register+0xfc>
   13b0a:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
   13b0e:	4556      	cmp	r6, sl
   13b10:	d99b      	bls.n	13a4a <nrf_mem_register+0x14e>
   13b12:	e7d8      	b.n	13ac6 <nrf_mem_register+0x1ca>
   13b14:	9d04      	ldr	r5, [sp, #16]
   13b16:	e7d8      	b.n	13aca <nrf_mem_register+0x1ce>
   13b18:	9d04      	ldr	r5, [sp, #16]
   13b1a:	f10a 0601 	add.w	r6, sl, #1
   13b1e:	e7d4      	b.n	13aca <nrf_mem_register+0x1ce>
   13b20:	2002658d 	.word	0x2002658d
   13b24:	20020514 	.word	0x20020514
   13b28:	20020518 	.word	0x20020518
   13b2c:	20020554 	.word	0x20020554

00013b30 <nrf_malloc>:
   13b30:	4b03      	ldr	r3, [pc, #12]	; (13b40 <nrf_malloc+0x10>)
   13b32:	781b      	ldrb	r3, [r3, #0]
   13b34:	b10b      	cbz	r3, 13b3a <nrf_malloc+0xa>
   13b36:	f7ff bd8d 	b.w	13654 <mem_alloc.constprop.4>
   13b3a:	4618      	mov	r0, r3
   13b3c:	4770      	bx	lr
   13b3e:	bf00      	nop
   13b40:	2002658d 	.word	0x2002658d

00013b44 <nrf_free>:
   13b44:	4b04      	ldr	r3, [pc, #16]	; (13b58 <nrf_free+0x14>)
   13b46:	781b      	ldrb	r3, [r3, #0]
   13b48:	b123      	cbz	r3, 13b54 <nrf_free+0x10>
   13b4a:	b118      	cbz	r0, 13b54 <nrf_free+0x10>
   13b4c:	4601      	mov	r1, r0
   13b4e:	2000      	movs	r0, #0
   13b50:	f7ff bc30 	b.w	133b4 <mem_free>
   13b54:	4770      	bx	lr
   13b56:	bf00      	nop
   13b58:	2002658d 	.word	0x2002658d

00013b5c <nrf_shared_malloc>:
   13b5c:	4b03      	ldr	r3, [pc, #12]	; (13b6c <nrf_shared_malloc+0x10>)
   13b5e:	781b      	ldrb	r3, [r3, #0]
   13b60:	b10b      	cbz	r3, 13b66 <nrf_shared_malloc+0xa>
   13b62:	f7ff bc93 	b.w	1348c <mem_alloc.constprop.5>
   13b66:	4618      	mov	r0, r3
   13b68:	4770      	bx	lr
   13b6a:	bf00      	nop
   13b6c:	2002658d 	.word	0x2002658d

00013b70 <nrf_shared_free>:
   13b70:	4b04      	ldr	r3, [pc, #16]	; (13b84 <nrf_shared_free+0x14>)
   13b72:	781b      	ldrb	r3, [r3, #0]
   13b74:	b123      	cbz	r3, 13b80 <nrf_shared_free+0x10>
   13b76:	b118      	cbz	r0, 13b80 <nrf_shared_free+0x10>
   13b78:	4601      	mov	r1, r0
   13b7a:	2001      	movs	r0, #1
   13b7c:	f7ff bc1a 	b.w	133b4 <mem_free>
   13b80:	4770      	bx	lr
   13b82:	bf00      	nop
   13b84:	2002658d 	.word	0x2002658d

00013b88 <ip_client_event_handler>:
   13b88:	f850 1b08 	ldr.w	r1, [r0], #8
   13b8c:	0c09      	lsrs	r1, r1, #16
   13b8e:	f004 bd23 	b.w	185d8 <rpc_ip_event_handler>
   13b92:	bf00      	nop

00013b94 <rpc_ip_client_init>:
   13b94:	4801      	ldr	r0, [pc, #4]	; (13b9c <rpc_ip_client_init+0x8>)
   13b96:	f005 ba01 	b.w	18f9c <rpc_client_register>
   13b9a:	bf00      	nop
   13b9c:	0001f630 	.word	0x0001f630

00013ba0 <rpc_ip_client_request_alloc>:
   13ba0:	2300      	movs	r3, #0
   13ba2:	b510      	push	{r4, lr}
   13ba4:	b082      	sub	sp, #8
   13ba6:	9301      	str	r3, [sp, #4]
   13ba8:	b158      	cbz	r0, 13bc2 <rpc_ip_client_request_alloc+0x22>
   13baa:	4604      	mov	r4, r0
   13bac:	aa01      	add	r2, sp, #4
   13bae:	2004      	movs	r0, #4
   13bb0:	f005 fc2c 	bl	1940c <rpc_message_alloc>
   13bb4:	b918      	cbnz	r0, 13bbe <rpc_ip_client_request_alloc+0x1e>
   13bb6:	9b01      	ldr	r3, [sp, #4]
   13bb8:	b10b      	cbz	r3, 13bbe <rpc_ip_client_request_alloc+0x1e>
   13bba:	3308      	adds	r3, #8
   13bbc:	6023      	str	r3, [r4, #0]
   13bbe:	b002      	add	sp, #8
   13bc0:	bd10      	pop	{r4, pc}
   13bc2:	2007      	movs	r0, #7
   13bc4:	b002      	add	sp, #8
   13bc6:	bd10      	pop	{r4, pc}

00013bc8 <rpc_ip_client_request_send>:
   13bc8:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   13bcc:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   13bd0:	d10b      	bne.n	13bea <rpc_ip_client_request_send+0x22>
   13bd2:	b160      	cbz	r0, 13bee <rpc_ip_client_request_send+0x26>
   13bd4:	4603      	mov	r3, r0
   13bd6:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   13bda:	2004      	movs	r0, #4
   13bdc:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   13be0:	f843 1d08 	str.w	r1, [r3, #-8]!
   13be4:	4619      	mov	r1, r3
   13be6:	f005 bbf9 	b.w	193dc <rpc_message_send>
   13bea:	200f      	movs	r0, #15
   13bec:	4770      	bx	lr
   13bee:	2007      	movs	r0, #7
   13bf0:	4770      	bx	lr
   13bf2:	bf00      	nop

00013bf4 <rpc_ip_client_message_free>:
   13bf4:	b120      	cbz	r0, 13c00 <rpc_ip_client_message_free+0xc>
   13bf6:	f1a0 0108 	sub.w	r1, r0, #8
   13bfa:	2004      	movs	r0, #4
   13bfc:	f005 bc38 	b.w	19470 <rpc_message_free>
   13c00:	2007      	movs	r0, #7
   13c02:	4770      	bx	lr

00013c04 <rpc_ip_client_data_free>:
   13c04:	b118      	cbz	r0, 13c0e <rpc_ip_client_data_free+0xa>
   13c06:	4601      	mov	r1, r0
   13c08:	2004      	movs	r0, #4
   13c0a:	f005 bd43 	b.w	19694 <rpc_message_data_free>
   13c0e:	2007      	movs	r0, #7
   13c10:	4770      	bx	lr
   13c12:	bf00      	nop

00013c14 <secure_client_socket>:
   13c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13c18:	460c      	mov	r4, r1
   13c1a:	680b      	ldr	r3, [r1, #0]
   13c1c:	6989      	ldr	r1, [r1, #24]
   13c1e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   13c22:	6023      	str	r3, [r4, #0]
   13c24:	6822      	ldr	r2, [r4, #0]
   13c26:	2300      	movs	r3, #0
   13c28:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
   13c2c:	6022      	str	r2, [r4, #0]
   13c2e:	f247 0281 	movw	r2, #28801	; 0x7081
   13c32:	6827      	ldr	r7, [r4, #0]
   13c34:	4606      	mov	r6, r0
   13c36:	f003 fc2d 	bl	17494 <ip_interface_request_create>
   13c3a:	2800      	cmp	r0, #0
   13c3c:	d03b      	beq.n	13cb6 <secure_client_socket+0xa2>
   13c3e:	4605      	mov	r5, r0
   13c40:	4b28      	ldr	r3, [pc, #160]	; (13ce4 <secure_client_socket+0xd0>)
   13c42:	eb06 01c6 	add.w	r1, r6, r6, lsl #3
   13c46:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   13c4a:	2224      	movs	r2, #36	; 0x24
   13c4c:	3014      	adds	r0, #20
   13c4e:	f009 fd12 	bl	1d676 <memcpy>
   13c52:	68ab      	ldr	r3, [r5, #8]
   13c54:	f8df 8090 	ldr.w	r8, [pc, #144]	; 13ce8 <secure_client_socket+0xd4>
   13c58:	3324      	adds	r3, #36	; 0x24
   13c5a:	60ab      	str	r3, [r5, #8]
   13c5c:	6823      	ldr	r3, [r4, #0]
   13c5e:	4629      	mov	r1, r5
   13c60:	ea03 0308 	and.w	r3, r3, r8
   13c64:	f043 030a 	orr.w	r3, r3, #10
   13c68:	6023      	str	r3, [r4, #0]
   13c6a:	f247 0281 	movw	r2, #28801	; 0x7081
   13c6e:	463b      	mov	r3, r7
   13c70:	4620      	mov	r0, r4
   13c72:	f003 fc2f 	bl	174d4 <ip_interface_request_send>
   13c76:	b960      	cbnz	r0, 13c92 <secure_client_socket+0x7e>
   13c78:	6823      	ldr	r3, [r4, #0]
   13c7a:	00db      	lsls	r3, r3, #3
   13c7c:	d40b      	bmi.n	13c96 <secure_client_socket+0x82>
   13c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13c86:	210b      	movs	r1, #11
   13c88:	4630      	mov	r0, r6
   13c8a:	f003 fc37 	bl	174fc <ip_interface_wait>
   13c8e:	b128      	cbz	r0, 13c9c <secure_client_socket+0x88>
   13c90:	6027      	str	r7, [r4, #0]
   13c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c96:	2073      	movs	r0, #115	; 0x73
   13c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c9c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   13ca0:	4630      	mov	r0, r6
   13ca2:	4611      	mov	r1, r2
   13ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13ca8:	f003 fc28 	bl	174fc <ip_interface_wait>
   13cac:	b130      	cbz	r0, 13cbc <secure_client_socket+0xa8>
   13cae:	2873      	cmp	r0, #115	; 0x73
   13cb0:	d0ef      	beq.n	13c92 <secure_client_socket+0x7e>
   13cb2:	6027      	str	r7, [r4, #0]
   13cb4:	e7ed      	b.n	13c92 <secure_client_socket+0x7e>
   13cb6:	200c      	movs	r0, #12
   13cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13cbc:	6823      	ldr	r3, [r4, #0]
   13cbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   13cc2:	6023      	str	r3, [r4, #0]
   13cc4:	6823      	ldr	r3, [r4, #0]
   13cc6:	ea03 0808 	and.w	r8, r3, r8
   13cca:	f048 030c 	orr.w	r3, r8, #12
   13cce:	6023      	str	r3, [r4, #0]
   13cd0:	6823      	ldr	r3, [r4, #0]
   13cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13cd6:	6023      	str	r3, [r4, #0]
   13cd8:	6823      	ldr	r3, [r4, #0]
   13cda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   13cde:	6023      	str	r3, [r4, #0]
   13ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13ce4:	20020664 	.word	0x20020664
   13ce8:	ffff0000 	.word	0xffff0000

00013cec <tls_interface_init>:
   13cec:	2000      	movs	r0, #0
   13cee:	4770      	bx	lr

00013cf0 <tls_interface_open>:
   13cf0:	b538      	push	{r3, r4, r5, lr}
   13cf2:	f020 0308 	bic.w	r3, r0, #8
   13cf6:	2b02      	cmp	r3, #2
   13cf8:	d006      	beq.n	13d08 <tls_interface_open+0x18>
   13cfa:	202f      	movs	r0, #47	; 0x2f
   13cfc:	f7fd fe72 	bl	119e4 <bsd_os_errno_set>
   13d00:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13d04:	4628      	mov	r0, r5
   13d06:	bd38      	pop	{r3, r4, r5, pc}
   13d08:	4614      	mov	r4, r2
   13d0a:	1e4a      	subs	r2, r1, #1
   13d0c:	2a01      	cmp	r2, #1
   13d0e:	d828      	bhi.n	13d62 <tls_interface_open+0x72>
   13d10:	bb14      	cbnz	r4, 13d58 <tls_interface_open+0x68>
   13d12:	2901      	cmp	r1, #1
   13d14:	bf06      	itte	eq
   13d16:	2301      	moveq	r3, #1
   13d18:	f44f 7482 	moveq.w	r4, #260	; 0x104
   13d1c:	f44f 7487 	movne.w	r4, #270	; 0x10e
   13d20:	461a      	mov	r2, r3
   13d22:	f003 fc17 	bl	17554 <ip_interface_open>
   13d26:	1e05      	subs	r5, r0, #0
   13d28:	db26      	blt.n	13d78 <tls_interface_open+0x88>
   13d2a:	4b15      	ldr	r3, [pc, #84]	; (13d80 <tls_interface_open+0x90>)
   13d2c:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   13d30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13d34:	2224      	movs	r2, #36	; 0x24
   13d36:	4913      	ldr	r1, [pc, #76]	; (13d84 <tls_interface_open+0x94>)
   13d38:	f009 fc9d 	bl	1d676 <memcpy>
   13d3c:	4628      	mov	r0, r5
   13d3e:	f004 ffcf 	bl	18ce0 <interface_socket_from_handle_get>
   13d42:	6803      	ldr	r3, [r0, #0]
   13d44:	6144      	str	r4, [r0, #20]
   13d46:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   13d4a:	6003      	str	r3, [r0, #0]
   13d4c:	6803      	ldr	r3, [r0, #0]
   13d4e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   13d52:	6003      	str	r3, [r0, #0]
   13d54:	4628      	mov	r0, r5
   13d56:	bd38      	pop	{r3, r4, r5, pc}
   13d58:	2901      	cmp	r1, #1
   13d5a:	d008      	beq.n	13d6e <tls_interface_open+0x7e>
   13d5c:	f5b4 7f87 	cmp.w	r4, #270	; 0x10e
   13d60:	d0de      	beq.n	13d20 <tls_interface_open+0x30>
   13d62:	2016      	movs	r0, #22
   13d64:	f7fd fe3e 	bl	119e4 <bsd_os_errno_set>
   13d68:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13d6c:	e7ca      	b.n	13d04 <tls_interface_open+0x14>
   13d6e:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
   13d72:	d1f6      	bne.n	13d62 <tls_interface_open+0x72>
   13d74:	460b      	mov	r3, r1
   13d76:	e7d3      	b.n	13d20 <tls_interface_open+0x30>
   13d78:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13d7c:	e7c2      	b.n	13d04 <tls_interface_open+0x14>
   13d7e:	bf00      	nop
   13d80:	20020664 	.word	0x20020664
   13d84:	0001f640 	.word	0x0001f640

00013d88 <tls_interface_close>:
   13d88:	b510      	push	{r4, lr}
   13d8a:	4604      	mov	r4, r0
   13d8c:	f004 ffa8 	bl	18ce0 <interface_socket_from_handle_get>
   13d90:	b120      	cbz	r0, 13d9c <tls_interface_close+0x14>
   13d92:	4620      	mov	r0, r4
   13d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13d98:	f003 bc88 	b.w	176ac <ip_interface_close>
   13d9c:	2009      	movs	r0, #9
   13d9e:	f7fd fe21 	bl	119e4 <bsd_os_errno_set>
   13da2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13da6:	bd10      	pop	{r4, pc}

00013da8 <tls_interface_sendto>:
   13da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13dac:	460d      	mov	r5, r1
   13dae:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   13db2:	4616      	mov	r6, r2
   13db4:	461f      	mov	r7, r3
   13db6:	4604      	mov	r4, r0
   13db8:	f004 ff92 	bl	18ce0 <interface_socket_from_handle_get>
   13dbc:	2800      	cmp	r0, #0
   13dbe:	d03b      	beq.n	13e38 <tls_interface_sendto+0x90>
   13dc0:	6803      	ldr	r3, [r0, #0]
   13dc2:	b29b      	uxth	r3, r3
   13dc4:	2b0c      	cmp	r3, #12
   13dc6:	d039      	beq.n	13e3c <tls_interface_sendto+0x94>
   13dc8:	6803      	ldr	r3, [r0, #0]
   13dca:	b29b      	uxth	r3, r3
   13dcc:	2b0b      	cmp	r3, #11
   13dce:	d111      	bne.n	13df4 <tls_interface_sendto+0x4c>
   13dd0:	4b20      	ldr	r3, [pc, #128]	; (13e54 <tls_interface_sendto+0xac>)
   13dd2:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   13dd6:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   13dda:	2b02      	cmp	r3, #2
   13ddc:	d038      	beq.n	13e50 <tls_interface_sendto+0xa8>
   13dde:	6903      	ldr	r3, [r0, #16]
   13de0:	2b01      	cmp	r3, #1
   13de2:	bf14      	ite	ne
   13de4:	2039      	movne	r0, #57	; 0x39
   13de6:	202a      	moveq	r0, #42	; 0x2a
   13de8:	f7fd fdfc 	bl	119e4 <bsd_os_errno_set>
   13dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13df4:	6903      	ldr	r3, [r0, #16]
   13df6:	2b01      	cmp	r3, #1
   13df8:	d00b      	beq.n	13e12 <tls_interface_sendto+0x6a>
   13dfa:	2b02      	cmp	r3, #2
   13dfc:	d001      	beq.n	13e02 <tls_interface_sendto+0x5a>
   13dfe:	2039      	movs	r0, #57	; 0x39
   13e00:	e7f2      	b.n	13de8 <tls_interface_sendto+0x40>
   13e02:	6803      	ldr	r3, [r0, #0]
   13e04:	b29b      	uxth	r3, r3
   13e06:	2b02      	cmp	r3, #2
   13e08:	d007      	beq.n	13e1a <tls_interface_sendto+0x72>
   13e0a:	6803      	ldr	r3, [r0, #0]
   13e0c:	b29b      	uxth	r3, r3
   13e0e:	2b04      	cmp	r3, #4
   13e10:	d003      	beq.n	13e1a <tls_interface_sendto+0x72>
   13e12:	6803      	ldr	r3, [r0, #0]
   13e14:	b29b      	uxth	r3, r3
   13e16:	2b05      	cmp	r3, #5
   13e18:	d1f1      	bne.n	13dfe <tls_interface_sendto+0x56>
   13e1a:	4b0e      	ldr	r3, [pc, #56]	; (13e54 <tls_interface_sendto+0xac>)
   13e1c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   13e20:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   13e24:	2b02      	cmp	r3, #2
   13e26:	d1ea      	bne.n	13dfe <tls_interface_sendto+0x56>
   13e28:	4601      	mov	r1, r0
   13e2a:	4620      	mov	r0, r4
   13e2c:	f7ff fef2 	bl	13c14 <secure_client_socket>
   13e30:	2800      	cmp	r0, #0
   13e32:	d003      	beq.n	13e3c <tls_interface_sendto+0x94>
   13e34:	dcd8      	bgt.n	13de8 <tls_interface_sendto+0x40>
   13e36:	e7d9      	b.n	13dec <tls_interface_sendto+0x44>
   13e38:	2009      	movs	r0, #9
   13e3a:	e7d5      	b.n	13de8 <tls_interface_sendto+0x40>
   13e3c:	e9cd 8908 	strd	r8, r9, [sp, #32]
   13e40:	463b      	mov	r3, r7
   13e42:	4632      	mov	r2, r6
   13e44:	4629      	mov	r1, r5
   13e46:	4620      	mov	r0, r4
   13e48:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13e4c:	f003 bc9e 	b.w	1778c <ip_interface_sendto>
   13e50:	2023      	movs	r0, #35	; 0x23
   13e52:	e7c9      	b.n	13de8 <tls_interface_sendto+0x40>
   13e54:	20020664 	.word	0x20020664

00013e58 <tls_interface_recvfrom>:
   13e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13e5c:	460d      	mov	r5, r1
   13e5e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   13e62:	4616      	mov	r6, r2
   13e64:	461f      	mov	r7, r3
   13e66:	4604      	mov	r4, r0
   13e68:	f004 ff3a 	bl	18ce0 <interface_socket_from_handle_get>
   13e6c:	2800      	cmp	r0, #0
   13e6e:	d038      	beq.n	13ee2 <tls_interface_recvfrom+0x8a>
   13e70:	6803      	ldr	r3, [r0, #0]
   13e72:	b29b      	uxth	r3, r3
   13e74:	2b0c      	cmp	r3, #12
   13e76:	d00f      	beq.n	13e98 <tls_interface_recvfrom+0x40>
   13e78:	6803      	ldr	r3, [r0, #0]
   13e7a:	b29b      	uxth	r3, r3
   13e7c:	2b0d      	cmp	r3, #13
   13e7e:	d00b      	beq.n	13e98 <tls_interface_recvfrom+0x40>
   13e80:	6903      	ldr	r3, [r0, #16]
   13e82:	2b01      	cmp	r3, #1
   13e84:	d01a      	beq.n	13ebc <tls_interface_recvfrom+0x64>
   13e86:	2b02      	cmp	r3, #2
   13e88:	d010      	beq.n	13eac <tls_interface_recvfrom+0x54>
   13e8a:	2023      	movs	r0, #35	; 0x23
   13e8c:	f7fd fdaa 	bl	119e4 <bsd_os_errno_set>
   13e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13e98:	e9cd 8908 	strd	r8, r9, [sp, #32]
   13e9c:	463b      	mov	r3, r7
   13e9e:	4632      	mov	r2, r6
   13ea0:	4629      	mov	r1, r5
   13ea2:	4620      	mov	r0, r4
   13ea4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13ea8:	f003 bdaa 	b.w	17a00 <ip_interface_recvfrom>
   13eac:	6803      	ldr	r3, [r0, #0]
   13eae:	b29b      	uxth	r3, r3
   13eb0:	2b02      	cmp	r3, #2
   13eb2:	d007      	beq.n	13ec4 <tls_interface_recvfrom+0x6c>
   13eb4:	6803      	ldr	r3, [r0, #0]
   13eb6:	b29b      	uxth	r3, r3
   13eb8:	2b04      	cmp	r3, #4
   13eba:	d003      	beq.n	13ec4 <tls_interface_recvfrom+0x6c>
   13ebc:	6803      	ldr	r3, [r0, #0]
   13ebe:	b29b      	uxth	r3, r3
   13ec0:	2b05      	cmp	r3, #5
   13ec2:	d1e2      	bne.n	13e8a <tls_interface_recvfrom+0x32>
   13ec4:	4b08      	ldr	r3, [pc, #32]	; (13ee8 <tls_interface_recvfrom+0x90>)
   13ec6:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   13eca:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   13ece:	2b02      	cmp	r3, #2
   13ed0:	d1db      	bne.n	13e8a <tls_interface_recvfrom+0x32>
   13ed2:	4601      	mov	r1, r0
   13ed4:	4620      	mov	r0, r4
   13ed6:	f7ff fe9d 	bl	13c14 <secure_client_socket>
   13eda:	2800      	cmp	r0, #0
   13edc:	d0dc      	beq.n	13e98 <tls_interface_recvfrom+0x40>
   13ede:	dcd5      	bgt.n	13e8c <tls_interface_recvfrom+0x34>
   13ee0:	e7d6      	b.n	13e90 <tls_interface_recvfrom+0x38>
   13ee2:	2009      	movs	r0, #9
   13ee4:	e7d2      	b.n	13e8c <tls_interface_recvfrom+0x34>
   13ee6:	bf00      	nop
   13ee8:	20020664 	.word	0x20020664

00013eec <tls_interface_bind>:
   13eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13ef0:	460c      	mov	r4, r1
   13ef2:	4617      	mov	r7, r2
   13ef4:	4606      	mov	r6, r0
   13ef6:	f004 fef3 	bl	18ce0 <interface_socket_from_handle_get>
   13efa:	2800      	cmp	r0, #0
   13efc:	d04c      	beq.n	13f98 <tls_interface_bind+0xac>
   13efe:	6803      	ldr	r3, [r0, #0]
   13f00:	4605      	mov	r5, r0
   13f02:	b29b      	uxth	r3, r3
   13f04:	2b02      	cmp	r3, #2
   13f06:	d150      	bne.n	13faa <tls_interface_bind+0xbe>
   13f08:	4621      	mov	r1, r4
   13f0a:	463a      	mov	r2, r7
   13f0c:	4630      	mov	r0, r6
   13f0e:	f003 ff4d 	bl	17dac <ip_interface_bind>
   13f12:	4604      	mov	r4, r0
   13f14:	b120      	cbz	r0, 13f20 <tls_interface_bind+0x34>
   13f16:	2c00      	cmp	r4, #0
   13f18:	dc3f      	bgt.n	13f9a <tls_interface_bind+0xae>
   13f1a:	4620      	mov	r0, r4
   13f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13f20:	eb06 07c6 	add.w	r7, r6, r6, lsl #3
   13f24:	f8df 8094 	ldr.w	r8, [pc, #148]	; 13fbc <tls_interface_bind+0xd0>
   13f28:	00bf      	lsls	r7, r7, #2
   13f2a:	f818 3007 	ldrb.w	r3, [r8, r7]
   13f2e:	2b01      	cmp	r3, #1
   13f30:	d1f3      	bne.n	13f1a <tls_interface_bind+0x2e>
   13f32:	4603      	mov	r3, r0
   13f34:	f247 0281 	movw	r2, #28801	; 0x7081
   13f38:	69a9      	ldr	r1, [r5, #24]
   13f3a:	4630      	mov	r0, r6
   13f3c:	f003 faaa 	bl	17494 <ip_interface_request_create>
   13f40:	4681      	mov	r9, r0
   13f42:	b3b0      	cbz	r0, 13fb2 <tls_interface_bind+0xc6>
   13f44:	eb08 0107 	add.w	r1, r8, r7
   13f48:	2224      	movs	r2, #36	; 0x24
   13f4a:	3014      	adds	r0, #20
   13f4c:	f009 fb93 	bl	1d676 <memcpy>
   13f50:	f8d9 3008 	ldr.w	r3, [r9, #8]
   13f54:	4649      	mov	r1, r9
   13f56:	3324      	adds	r3, #36	; 0x24
   13f58:	f8c9 3008 	str.w	r3, [r9, #8]
   13f5c:	682a      	ldr	r2, [r5, #0]
   13f5e:	2304      	movs	r3, #4
   13f60:	0c12      	lsrs	r2, r2, #16
   13f62:	0412      	lsls	r2, r2, #16
   13f64:	f042 020a 	orr.w	r2, r2, #10
   13f68:	602a      	str	r2, [r5, #0]
   13f6a:	4628      	mov	r0, r5
   13f6c:	f247 0281 	movw	r2, #28801	; 0x7081
   13f70:	f003 fab0 	bl	174d4 <ip_interface_request_send>
   13f74:	b9f8      	cbnz	r0, 13fb6 <tls_interface_bind+0xca>
   13f76:	682b      	ldr	r3, [r5, #0]
   13f78:	00db      	lsls	r3, r3, #3
   13f7a:	d418      	bmi.n	13fae <tls_interface_bind+0xc2>
   13f7c:	4630      	mov	r0, r6
   13f7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13f82:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13f86:	210b      	movs	r1, #11
   13f88:	f003 fab8 	bl	174fc <ip_interface_wait>
   13f8c:	2800      	cmp	r0, #0
   13f8e:	d0c4      	beq.n	13f1a <tls_interface_bind+0x2e>
   13f90:	2304      	movs	r3, #4
   13f92:	4604      	mov	r4, r0
   13f94:	602b      	str	r3, [r5, #0]
   13f96:	e7be      	b.n	13f16 <tls_interface_bind+0x2a>
   13f98:	2409      	movs	r4, #9
   13f9a:	4620      	mov	r0, r4
   13f9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   13fa0:	f7fd fd20 	bl	119e4 <bsd_os_errno_set>
   13fa4:	4620      	mov	r0, r4
   13fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13faa:	242d      	movs	r4, #45	; 0x2d
   13fac:	e7f5      	b.n	13f9a <tls_interface_bind+0xae>
   13fae:	2473      	movs	r4, #115	; 0x73
   13fb0:	e7f3      	b.n	13f9a <tls_interface_bind+0xae>
   13fb2:	240c      	movs	r4, #12
   13fb4:	e7f1      	b.n	13f9a <tls_interface_bind+0xae>
   13fb6:	4604      	mov	r4, r0
   13fb8:	e7ad      	b.n	13f16 <tls_interface_bind+0x2a>
   13fba:	bf00      	nop
   13fbc:	20020664 	.word	0x20020664

00013fc0 <tls_interface_connect>:
   13fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13fc2:	460e      	mov	r6, r1
   13fc4:	4617      	mov	r7, r2
   13fc6:	4604      	mov	r4, r0
   13fc8:	f004 fe8a 	bl	18ce0 <interface_socket_from_handle_get>
   13fcc:	b1e8      	cbz	r0, 1400a <tls_interface_connect+0x4a>
   13fce:	4b13      	ldr	r3, [pc, #76]	; (1401c <tls_interface_connect+0x5c>)
   13fd0:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   13fd4:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   13fd8:	2b02      	cmp	r3, #2
   13fda:	d11c      	bne.n	14016 <tls_interface_connect+0x56>
   13fdc:	6803      	ldr	r3, [r0, #0]
   13fde:	4605      	mov	r5, r0
   13fe0:	b29b      	uxth	r3, r3
   13fe2:	2b02      	cmp	r3, #2
   13fe4:	d003      	beq.n	13fee <tls_interface_connect+0x2e>
   13fe6:	6803      	ldr	r3, [r0, #0]
   13fe8:	b29b      	uxth	r3, r3
   13fea:	2b04      	cmp	r3, #4
   13fec:	d113      	bne.n	14016 <tls_interface_connect+0x56>
   13fee:	463a      	mov	r2, r7
   13ff0:	4631      	mov	r1, r6
   13ff2:	4620      	mov	r0, r4
   13ff4:	f003 fe30 	bl	17c58 <ip_interface_connect>
   13ff8:	b110      	cbz	r0, 14000 <tls_interface_connect+0x40>
   13ffa:	2800      	cmp	r0, #0
   13ffc:	dc06      	bgt.n	1400c <tls_interface_connect+0x4c>
   13ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14000:	4629      	mov	r1, r5
   14002:	4620      	mov	r0, r4
   14004:	f7ff fe06 	bl	13c14 <secure_client_socket>
   14008:	e7f7      	b.n	13ffa <tls_interface_connect+0x3a>
   1400a:	2009      	movs	r0, #9
   1400c:	f7fd fcea 	bl	119e4 <bsd_os_errno_set>
   14010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14016:	202d      	movs	r0, #45	; 0x2d
   14018:	e7f8      	b.n	1400c <tls_interface_connect+0x4c>
   1401a:	bf00      	nop
   1401c:	20020664 	.word	0x20020664

00014020 <tls_interface_listen>:
   14020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14024:	460f      	mov	r7, r1
   14026:	4606      	mov	r6, r0
   14028:	f004 fe5a 	bl	18ce0 <interface_socket_from_handle_get>
   1402c:	2800      	cmp	r0, #0
   1402e:	d06b      	beq.n	14108 <tls_interface_listen+0xe8>
   14030:	6903      	ldr	r3, [r0, #16]
   14032:	4604      	mov	r4, r0
   14034:	2b01      	cmp	r3, #1
   14036:	d165      	bne.n	14104 <tls_interface_listen+0xe4>
   14038:	6803      	ldr	r3, [r0, #0]
   1403a:	b29b      	uxth	r3, r3
   1403c:	2b04      	cmp	r3, #4
   1403e:	d056      	beq.n	140ee <tls_interface_listen+0xce>
   14040:	6823      	ldr	r3, [r4, #0]
   14042:	b29b      	uxth	r3, r3
   14044:	2b0b      	cmp	r3, #11
   14046:	d15d      	bne.n	14104 <tls_interface_listen+0xe4>
   14048:	00f3      	lsls	r3, r6, #3
   1404a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 1410c <tls_interface_listen+0xec>
   1404e:	199a      	adds	r2, r3, r6
   14050:	f819 2022 	ldrb.w	r2, [r9, r2, lsl #2]
   14054:	2a01      	cmp	r2, #1
   14056:	d155      	bne.n	14104 <tls_interface_listen+0xe4>
   14058:	2201      	movs	r2, #1
   1405a:	4433      	add	r3, r6
   1405c:	009d      	lsls	r5, r3, #2
   1405e:	f809 2005 	strb.w	r2, [r9, r5]
   14062:	69a1      	ldr	r1, [r4, #24]
   14064:	2300      	movs	r3, #0
   14066:	f247 0281 	movw	r2, #28801	; 0x7081
   1406a:	4630      	mov	r0, r6
   1406c:	f8d4 8000 	ldr.w	r8, [r4]
   14070:	f003 fa10 	bl	17494 <ip_interface_request_create>
   14074:	4682      	mov	sl, r0
   14076:	2800      	cmp	r0, #0
   14078:	d042      	beq.n	14100 <tls_interface_listen+0xe0>
   1407a:	eb09 0105 	add.w	r1, r9, r5
   1407e:	2224      	movs	r2, #36	; 0x24
   14080:	3014      	adds	r0, #20
   14082:	f009 faf8 	bl	1d676 <memcpy>
   14086:	f8da 3008 	ldr.w	r3, [sl, #8]
   1408a:	4651      	mov	r1, sl
   1408c:	3324      	adds	r3, #36	; 0x24
   1408e:	f8ca 3008 	str.w	r3, [sl, #8]
   14092:	6822      	ldr	r2, [r4, #0]
   14094:	4643      	mov	r3, r8
   14096:	0c12      	lsrs	r2, r2, #16
   14098:	0412      	lsls	r2, r2, #16
   1409a:	f042 020a 	orr.w	r2, r2, #10
   1409e:	6022      	str	r2, [r4, #0]
   140a0:	4620      	mov	r0, r4
   140a2:	f247 0281 	movw	r2, #28801	; 0x7081
   140a6:	f003 fa15 	bl	174d4 <ip_interface_request_send>
   140aa:	b9e0      	cbnz	r0, 140e6 <tls_interface_listen+0xc6>
   140ac:	6823      	ldr	r3, [r4, #0]
   140ae:	00db      	lsls	r3, r3, #3
   140b0:	d40e      	bmi.n	140d0 <tls_interface_listen+0xb0>
   140b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   140b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   140ba:	210b      	movs	r1, #11
   140bc:	4630      	mov	r0, r6
   140be:	f003 fa1d 	bl	174fc <ip_interface_wait>
   140c2:	b160      	cbz	r0, 140de <tls_interface_listen+0xbe>
   140c4:	2800      	cmp	r0, #0
   140c6:	f8c4 8000 	str.w	r8, [r4]
   140ca:	dc02      	bgt.n	140d2 <tls_interface_listen+0xb2>
   140cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   140d0:	2073      	movs	r0, #115	; 0x73
   140d2:	f7fd fc87 	bl	119e4 <bsd_os_errno_set>
   140d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   140da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   140de:	4639      	mov	r1, r7
   140e0:	4630      	mov	r0, r6
   140e2:	f003 fef9 	bl	17ed8 <ip_interface_listen>
   140e6:	2800      	cmp	r0, #0
   140e8:	dcf3      	bgt.n	140d2 <tls_interface_listen+0xb2>
   140ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   140ee:	00f3      	lsls	r3, r6, #3
   140f0:	f8df 9018 	ldr.w	r9, [pc, #24]	; 1410c <tls_interface_listen+0xec>
   140f4:	199a      	adds	r2, r3, r6
   140f6:	f819 2022 	ldrb.w	r2, [r9, r2, lsl #2]
   140fa:	2a02      	cmp	r2, #2
   140fc:	d1a0      	bne.n	14040 <tls_interface_listen+0x20>
   140fe:	e7ab      	b.n	14058 <tls_interface_listen+0x38>
   14100:	200c      	movs	r0, #12
   14102:	e7e6      	b.n	140d2 <tls_interface_listen+0xb2>
   14104:	202d      	movs	r0, #45	; 0x2d
   14106:	e7e4      	b.n	140d2 <tls_interface_listen+0xb2>
   14108:	2009      	movs	r0, #9
   1410a:	e7e2      	b.n	140d2 <tls_interface_listen+0xb2>
   1410c:	20020664 	.word	0x20020664

00014110 <tls_interface_accept>:
   14110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14112:	460c      	mov	r4, r1
   14114:	4616      	mov	r6, r2
   14116:	461f      	mov	r7, r3
   14118:	4605      	mov	r5, r0
   1411a:	f004 fde1 	bl	18ce0 <interface_socket_from_handle_get>
   1411e:	2800      	cmp	r0, #0
   14120:	d03b      	beq.n	1419a <tls_interface_accept+0x8a>
   14122:	6800      	ldr	r0, [r0, #0]
   14124:	b280      	uxth	r0, r0
   14126:	2806      	cmp	r0, #6
   14128:	d137      	bne.n	1419a <tls_interface_accept+0x8a>
   1412a:	4621      	mov	r1, r4
   1412c:	463b      	mov	r3, r7
   1412e:	4632      	mov	r2, r6
   14130:	4628      	mov	r0, r5
   14132:	f003 ff47 	bl	17fc4 <ip_interface_accept>
   14136:	4604      	mov	r4, r0
   14138:	b118      	cbz	r0, 14142 <tls_interface_accept+0x32>
   1413a:	2c00      	cmp	r4, #0
   1413c:	dc2e      	bgt.n	1419c <tls_interface_accept+0x8c>
   1413e:	4620      	mov	r0, r4
   14140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14142:	4628      	mov	r0, r5
   14144:	f004 fdcc 	bl	18ce0 <interface_socket_from_handle_get>
   14148:	6803      	ldr	r3, [r0, #0]
   1414a:	4f18      	ldr	r7, [pc, #96]	; (141ac <tls_interface_accept+0x9c>)
   1414c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   14150:	6003      	str	r3, [r0, #0]
   14152:	6803      	ldr	r3, [r0, #0]
   14154:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   14158:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1415c:	4606      	mov	r6, r0
   1415e:	6003      	str	r3, [r0, #0]
   14160:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   14164:	2224      	movs	r2, #36	; 0x24
   14166:	4638      	mov	r0, r7
   14168:	f009 fa85 	bl	1d676 <memcpy>
   1416c:	2302      	movs	r3, #2
   1416e:	703b      	strb	r3, [r7, #0]
   14170:	6833      	ldr	r3, [r6, #0]
   14172:	4620      	mov	r0, r4
   14174:	0c1b      	lsrs	r3, r3, #16
   14176:	041b      	lsls	r3, r3, #16
   14178:	f043 030b 	orr.w	r3, r3, #11
   1417c:	6033      	str	r3, [r6, #0]
   1417e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14186:	210c      	movs	r1, #12
   14188:	f003 f9b8 	bl	174fc <ip_interface_wait>
   1418c:	4604      	mov	r4, r0
   1418e:	2800      	cmp	r0, #0
   14190:	d0d5      	beq.n	1413e <tls_interface_accept+0x2e>
   14192:	2000      	movs	r0, #0
   14194:	f003 fa8a 	bl	176ac <ip_interface_close>
   14198:	e7cf      	b.n	1413a <tls_interface_accept+0x2a>
   1419a:	2409      	movs	r4, #9
   1419c:	4620      	mov	r0, r4
   1419e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   141a2:	f7fd fc1f 	bl	119e4 <bsd_os_errno_set>
   141a6:	4620      	mov	r0, r4
   141a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   141aa:	bf00      	nop
   141ac:	20020664 	.word	0x20020664

000141b0 <tls_interface_setopt>:
   141b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   141b4:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   141b8:	9f06      	ldr	r7, [sp, #24]
   141ba:	d11d      	bne.n	141f8 <tls_interface_setopt+0x48>
   141bc:	461c      	mov	r4, r3
   141be:	b1c3      	cbz	r3, 141f2 <tls_interface_setopt+0x42>
   141c0:	b1bf      	cbz	r7, 141f2 <tls_interface_setopt+0x42>
   141c2:	4605      	mov	r5, r0
   141c4:	4616      	mov	r6, r2
   141c6:	f004 fd8b 	bl	18ce0 <interface_socket_from_handle_get>
   141ca:	b1c8      	cbz	r0, 14200 <tls_interface_setopt+0x50>
   141cc:	6803      	ldr	r3, [r0, #0]
   141ce:	b29b      	uxth	r3, r3
   141d0:	2b02      	cmp	r3, #2
   141d2:	d007      	beq.n	141e4 <tls_interface_setopt+0x34>
   141d4:	6803      	ldr	r3, [r0, #0]
   141d6:	b29b      	uxth	r3, r3
   141d8:	2b04      	cmp	r3, #4
   141da:	d003      	beq.n	141e4 <tls_interface_setopt+0x34>
   141dc:	6803      	ldr	r3, [r0, #0]
   141de:	b29b      	uxth	r3, r3
   141e0:	2b05      	cmp	r3, #5
   141e2:	d10d      	bne.n	14200 <tls_interface_setopt+0x50>
   141e4:	3e01      	subs	r6, #1
   141e6:	2e03      	cmp	r6, #3
   141e8:	d851      	bhi.n	1428e <tls_interface_setopt+0xde>
   141ea:	e8df f006 	tbb	[pc, r6]
   141ee:	3225      	.short	0x3225
   141f0:	0b18      	.short	0x0b18
   141f2:	200e      	movs	r0, #14
   141f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   141f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   141fc:	f004 b81a 	b.w	18234 <ip_interface_setopt>
   14200:	2009      	movs	r0, #9
   14202:	e7f7      	b.n	141f4 <tls_interface_setopt+0x44>
   14204:	2f04      	cmp	r7, #4
   14206:	d139      	bne.n	1427c <tls_interface_setopt+0xcc>
   14208:	6823      	ldr	r3, [r4, #0]
   1420a:	2b02      	cmp	r3, #2
   1420c:	d836      	bhi.n	1427c <tls_interface_setopt+0xcc>
   1420e:	4a21      	ldr	r2, [pc, #132]	; (14294 <tls_interface_setopt+0xe4>)
   14210:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   14214:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   14218:	70ab      	strb	r3, [r5, #2]
   1421a:	2000      	movs	r0, #0
   1421c:	e7ea      	b.n	141f4 <tls_interface_setopt+0x44>
   1421e:	2f01      	cmp	r7, #1
   14220:	d12c      	bne.n	1427c <tls_interface_setopt+0xcc>
   14222:	7823      	ldrb	r3, [r4, #0]
   14224:	2b01      	cmp	r3, #1
   14226:	d829      	bhi.n	1427c <tls_interface_setopt+0xcc>
   14228:	4a1a      	ldr	r2, [pc, #104]	; (14294 <tls_interface_setopt+0xe4>)
   1422a:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   1422e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   14232:	7053      	strb	r3, [r2, #1]
   14234:	2000      	movs	r0, #0
   14236:	e7dd      	b.n	141f4 <tls_interface_setopt+0x44>
   14238:	2f04      	cmp	r7, #4
   1423a:	d11f      	bne.n	1427c <tls_interface_setopt+0xcc>
   1423c:	6820      	ldr	r0, [r4, #0]
   1423e:	b1f8      	cbz	r0, 14280 <tls_interface_setopt+0xd0>
   14240:	2801      	cmp	r0, #1
   14242:	d11b      	bne.n	1427c <tls_interface_setopt+0xcc>
   14244:	4b13      	ldr	r3, [pc, #76]	; (14294 <tls_interface_setopt+0xe4>)
   14246:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   1424a:	f803 0025 	strb.w	r0, [r3, r5, lsl #2]
   1424e:	2000      	movs	r0, #0
   14250:	e7d0      	b.n	141f4 <tls_interface_setopt+0x44>
   14252:	ea5f 0c97 	movs.w	ip, r7, lsr #2
   14256:	d011      	beq.n	1427c <tls_interface_setopt+0xcc>
   14258:	f017 0603 	ands.w	r6, r7, #3
   1425c:	d10e      	bne.n	1427c <tls_interface_setopt+0xcc>
   1425e:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   14262:	00ad      	lsls	r5, r5, #2
   14264:	4b0b      	ldr	r3, [pc, #44]	; (14294 <tls_interface_setopt+0xe4>)
   14266:	1d28      	adds	r0, r5, #4
   14268:	4418      	add	r0, r3
   1426a:	442b      	add	r3, r5
   1426c:	463a      	mov	r2, r7
   1426e:	4621      	mov	r1, r4
   14270:	f883 c003 	strb.w	ip, [r3, #3]
   14274:	f009 f9ff 	bl	1d676 <memcpy>
   14278:	4630      	mov	r0, r6
   1427a:	e7bb      	b.n	141f4 <tls_interface_setopt+0x44>
   1427c:	2016      	movs	r0, #22
   1427e:	e7b9      	b.n	141f4 <tls_interface_setopt+0x44>
   14280:	2202      	movs	r2, #2
   14282:	4b04      	ldr	r3, [pc, #16]	; (14294 <tls_interface_setopt+0xe4>)
   14284:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   14288:	f803 2025 	strb.w	r2, [r3, r5, lsl #2]
   1428c:	e7b2      	b.n	141f4 <tls_interface_setopt+0x44>
   1428e:	202a      	movs	r0, #42	; 0x2a
   14290:	e7b0      	b.n	141f4 <tls_interface_setopt+0x44>
   14292:	bf00      	nop
   14294:	20020664 	.word	0x20020664

00014298 <tls_interface_getopt>:
   14298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1429c:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   142a0:	9f06      	ldr	r7, [sp, #24]
   142a2:	d112      	bne.n	142ca <tls_interface_getopt+0x32>
   142a4:	461d      	mov	r5, r3
   142a6:	b16b      	cbz	r3, 142c4 <tls_interface_getopt+0x2c>
   142a8:	b167      	cbz	r7, 142c4 <tls_interface_getopt+0x2c>
   142aa:	4606      	mov	r6, r0
   142ac:	4614      	mov	r4, r2
   142ae:	f004 fd17 	bl	18ce0 <interface_socket_from_handle_get>
   142b2:	2800      	cmp	r0, #0
   142b4:	d04f      	beq.n	14356 <tls_interface_getopt+0xbe>
   142b6:	3c01      	subs	r4, #1
   142b8:	2c03      	cmp	r4, #3
   142ba:	d852      	bhi.n	14362 <tls_interface_getopt+0xca>
   142bc:	e8df f004 	tbb	[pc, r4]
   142c0:	09152139 	.word	0x09152139
   142c4:	200e      	movs	r0, #14
   142c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   142ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   142ce:	f004 b86d 	b.w	183ac <ip_interface_getopt>
   142d2:	683b      	ldr	r3, [r7, #0]
   142d4:	2b04      	cmp	r3, #4
   142d6:	d13c      	bne.n	14352 <tls_interface_getopt+0xba>
   142d8:	4b23      	ldr	r3, [pc, #140]	; (14368 <tls_interface_getopt+0xd0>)
   142da:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   142de:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   142e2:	78b3      	ldrb	r3, [r6, #2]
   142e4:	2000      	movs	r0, #0
   142e6:	602b      	str	r3, [r5, #0]
   142e8:	e7ed      	b.n	142c6 <tls_interface_getopt+0x2e>
   142ea:	683b      	ldr	r3, [r7, #0]
   142ec:	2b04      	cmp	r3, #4
   142ee:	d130      	bne.n	14352 <tls_interface_getopt+0xba>
   142f0:	4b1d      	ldr	r3, [pc, #116]	; (14368 <tls_interface_getopt+0xd0>)
   142f2:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   142f6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   142fa:	7873      	ldrb	r3, [r6, #1]
   142fc:	2000      	movs	r0, #0
   142fe:	602b      	str	r3, [r5, #0]
   14300:	e7e1      	b.n	142c6 <tls_interface_getopt+0x2e>
   14302:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   14306:	4918      	ldr	r1, [pc, #96]	; (14368 <tls_interface_getopt+0xd0>)
   14308:	683b      	ldr	r3, [r7, #0]
   1430a:	00b6      	lsls	r6, r6, #2
   1430c:	198a      	adds	r2, r1, r6
   1430e:	f013 0403 	ands.w	r4, r3, #3
   14312:	78d0      	ldrb	r0, [r2, #3]
   14314:	d121      	bne.n	1435a <tls_interface_getopt+0xc2>
   14316:	089b      	lsrs	r3, r3, #2
   14318:	4283      	cmp	r3, r0
   1431a:	bf28      	it	cs
   1431c:	4603      	movcs	r3, r0
   1431e:	009a      	lsls	r2, r3, #2
   14320:	b1db      	cbz	r3, 1435a <tls_interface_getopt+0xc2>
   14322:	3604      	adds	r6, #4
   14324:	4431      	add	r1, r6
   14326:	603a      	str	r2, [r7, #0]
   14328:	4628      	mov	r0, r5
   1432a:	f009 f9a4 	bl	1d676 <memcpy>
   1432e:	4620      	mov	r0, r4
   14330:	e7c9      	b.n	142c6 <tls_interface_getopt+0x2e>
   14332:	683b      	ldr	r3, [r7, #0]
   14334:	2b04      	cmp	r3, #4
   14336:	d10c      	bne.n	14352 <tls_interface_getopt+0xba>
   14338:	4b0b      	ldr	r3, [pc, #44]	; (14368 <tls_interface_getopt+0xd0>)
   1433a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1433e:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   14342:	2000      	movs	r0, #0
   14344:	f1a3 0301 	sub.w	r3, r3, #1
   14348:	fab3 f383 	clz	r3, r3
   1434c:	095b      	lsrs	r3, r3, #5
   1434e:	602b      	str	r3, [r5, #0]
   14350:	e7b9      	b.n	142c6 <tls_interface_getopt+0x2e>
   14352:	2016      	movs	r0, #22
   14354:	e7b7      	b.n	142c6 <tls_interface_getopt+0x2e>
   14356:	2009      	movs	r0, #9
   14358:	e7b5      	b.n	142c6 <tls_interface_getopt+0x2e>
   1435a:	2800      	cmp	r0, #0
   1435c:	d1f9      	bne.n	14352 <tls_interface_getopt+0xba>
   1435e:	6038      	str	r0, [r7, #0]
   14360:	e7b1      	b.n	142c6 <tls_interface_getopt+0x2e>
   14362:	202a      	movs	r0, #42	; 0x2a
   14364:	e7af      	b.n	142c6 <tls_interface_getopt+0x2e>
   14366:	bf00      	nop
   14368:	20020664 	.word	0x20020664

0001436c <tls_rpc_ip_event_handler>:
   1436c:	b538      	push	{r3, r4, r5, lr}
   1436e:	f248 0581 	movw	r5, #32897	; 0x8081
   14372:	42ab      	cmp	r3, r5
   14374:	460c      	mov	r4, r1
   14376:	d053      	beq.n	14420 <tls_rpc_ip_event_handler+0xb4>
   14378:	f249 0182 	movw	r1, #36994	; 0x9082
   1437c:	428b      	cmp	r3, r1
   1437e:	d02d      	beq.n	143dc <tls_rpc_ip_event_handler+0x70>
   14380:	f248 0102 	movw	r1, #32770	; 0x8002
   14384:	428b      	cmp	r3, r1
   14386:	d001      	beq.n	1438c <tls_rpc_ip_event_handler+0x20>
   14388:	2001      	movs	r0, #1
   1438a:	bd38      	pop	{r3, r4, r5, pc}
   1438c:	2c00      	cmp	r4, #0
   1438e:	d0fb      	beq.n	14388 <tls_rpc_ip_event_handler+0x1c>
   14390:	6963      	ldr	r3, [r4, #20]
   14392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   14396:	d002      	beq.n	1439e <tls_rpc_ip_event_handler+0x32>
   14398:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1439c:	d1f4      	bne.n	14388 <tls_rpc_ip_event_handler+0x1c>
   1439e:	6823      	ldr	r3, [r4, #0]
   143a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   143a4:	6023      	str	r3, [r4, #0]
   143a6:	6955      	ldr	r5, [r2, #20]
   143a8:	2d00      	cmp	r5, #0
   143aa:	d148      	bne.n	1443e <tls_rpc_ip_event_handler+0xd2>
   143ac:	6823      	ldr	r3, [r4, #0]
   143ae:	0c1b      	lsrs	r3, r3, #16
   143b0:	041b      	lsls	r3, r3, #16
   143b2:	f043 0305 	orr.w	r3, r3, #5
   143b6:	6023      	str	r3, [r4, #0]
   143b8:	6823      	ldr	r3, [r4, #0]
   143ba:	00da      	lsls	r2, r3, #3
   143bc:	d50c      	bpl.n	143d8 <tls_rpc_ip_event_handler+0x6c>
   143be:	4b25      	ldr	r3, [pc, #148]	; (14454 <tls_rpc_ip_event_handler+0xe8>)
   143c0:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
   143c4:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   143c8:	2b02      	cmp	r3, #2
   143ca:	d105      	bne.n	143d8 <tls_rpc_ip_event_handler+0x6c>
   143cc:	4621      	mov	r1, r4
   143ce:	f7ff fc21 	bl	13c14 <secure_client_socket>
   143d2:	b108      	cbz	r0, 143d8 <tls_rpc_ip_event_handler+0x6c>
   143d4:	2873      	cmp	r0, #115	; 0x73
   143d6:	d135      	bne.n	14444 <tls_rpc_ip_event_handler+0xd8>
   143d8:	2000      	movs	r0, #0
   143da:	bd38      	pop	{r3, r4, r5, pc}
   143dc:	2c00      	cmp	r4, #0
   143de:	d0fb      	beq.n	143d8 <tls_rpc_ip_event_handler+0x6c>
   143e0:	6823      	ldr	r3, [r4, #0]
   143e2:	b29b      	uxth	r3, r3
   143e4:	2b0b      	cmp	r3, #11
   143e6:	d1f7      	bne.n	143d8 <tls_rpc_ip_event_handler+0x6c>
   143e8:	6910      	ldr	r0, [r2, #16]
   143ea:	bb48      	cbnz	r0, 14440 <tls_rpc_ip_event_handler+0xd4>
   143ec:	6823      	ldr	r3, [r4, #0]
   143ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   143f2:	6023      	str	r3, [r4, #0]
   143f4:	6823      	ldr	r3, [r4, #0]
   143f6:	00db      	lsls	r3, r3, #3
   143f8:	d5ee      	bpl.n	143d8 <tls_rpc_ip_event_handler+0x6c>
   143fa:	6823      	ldr	r3, [r4, #0]
   143fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   14400:	6023      	str	r3, [r4, #0]
   14402:	6823      	ldr	r3, [r4, #0]
   14404:	0c1b      	lsrs	r3, r3, #16
   14406:	041b      	lsls	r3, r3, #16
   14408:	f043 030c 	orr.w	r3, r3, #12
   1440c:	6023      	str	r3, [r4, #0]
   1440e:	6823      	ldr	r3, [r4, #0]
   14410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   14414:	6023      	str	r3, [r4, #0]
   14416:	6823      	ldr	r3, [r4, #0]
   14418:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1441c:	6023      	str	r3, [r4, #0]
   1441e:	bd38      	pop	{r3, r4, r5, pc}
   14420:	2900      	cmp	r1, #0
   14422:	d0d9      	beq.n	143d8 <tls_rpc_ip_event_handler+0x6c>
   14424:	680b      	ldr	r3, [r1, #0]
   14426:	b29b      	uxth	r3, r3
   14428:	2b0a      	cmp	r3, #10
   1442a:	d1d5      	bne.n	143d8 <tls_rpc_ip_event_handler+0x6c>
   1442c:	6950      	ldr	r0, [r2, #20]
   1442e:	b938      	cbnz	r0, 14440 <tls_rpc_ip_event_handler+0xd4>
   14430:	680b      	ldr	r3, [r1, #0]
   14432:	0c1b      	lsrs	r3, r3, #16
   14434:	041b      	lsls	r3, r3, #16
   14436:	f043 030b 	orr.w	r3, r3, #11
   1443a:	600b      	str	r3, [r1, #0]
   1443c:	bd38      	pop	{r3, r4, r5, pc}
   1443e:	4628      	mov	r0, r5
   14440:	f003 f81e 	bl	17480 <rpc_error_to_nrf_bsd_error>
   14444:	6060      	str	r0, [r4, #4]
   14446:	6823      	ldr	r3, [r4, #0]
   14448:	2000      	movs	r0, #0
   1444a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1444e:	6023      	str	r3, [r4, #0]
   14450:	bd38      	pop	{r3, r4, r5, pc}
   14452:	bf00      	nop
   14454:	20020664 	.word	0x20020664

00014458 <rpc_dfu_event_handler>:
   14458:	b508      	push	{r3, lr}
   1445a:	4a08      	ldr	r2, [pc, #32]	; (1447c <rpc_dfu_event_handler+0x24>)
   1445c:	68c1      	ldr	r1, [r0, #12]
   1445e:	8812      	ldrh	r2, [r2, #0]
   14460:	4603      	mov	r3, r0
   14462:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   14466:	d005      	beq.n	14474 <rpc_dfu_event_handler+0x1c>
   14468:	6800      	ldr	r0, [r0, #0]
   1446a:	b110      	cbz	r0, 14472 <rpc_dfu_event_handler+0x1a>
   1446c:	f7fe ff9a 	bl	133a4 <rpc_dfu_client_data_free>
   14470:	2000      	movs	r0, #0
   14472:	bd08      	pop	{r3, pc}
   14474:	4a02      	ldr	r2, [pc, #8]	; (14480 <rpc_dfu_event_handler+0x28>)
   14476:	2001      	movs	r0, #1
   14478:	6013      	str	r3, [r2, #0]
   1447a:	bd08      	pop	{r3, pc}
   1447c:	20024e44 	.word	0x20024e44
   14480:	20020790 	.word	0x20020790

00014484 <mfu_interface_init>:
   14484:	2300      	movs	r3, #0
   14486:	b510      	push	{r4, lr}
   14488:	4808      	ldr	r0, [pc, #32]	; (144ac <mfu_interface_init+0x28>)
   1448a:	4909      	ldr	r1, [pc, #36]	; (144b0 <mfu_interface_init+0x2c>)
   1448c:	4a09      	ldr	r2, [pc, #36]	; (144b4 <mfu_interface_init+0x30>)
   1448e:	4c0a      	ldr	r4, [pc, #40]	; (144b8 <mfu_interface_init+0x34>)
   14490:	8003      	strh	r3, [r0, #0]
   14492:	600b      	str	r3, [r1, #0]
   14494:	6013      	str	r3, [r2, #0]
   14496:	6023      	str	r3, [r4, #0]
   14498:	f7fe ff4e 	bl	13338 <rpc_dfu_client_init>
   1449c:	b910      	cbnz	r0, 144a4 <mfu_interface_init+0x20>
   1449e:	2301      	movs	r3, #1
   144a0:	6023      	str	r3, [r4, #0]
   144a2:	bd10      	pop	{r4, pc}
   144a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   144a8:	bd10      	pop	{r4, pc}
   144aa:	bf00      	nop
   144ac:	20024e44 	.word	0x20024e44
   144b0:	20020790 	.word	0x20020790
   144b4:	2002078c 	.word	0x2002078c
   144b8:	20020784 	.word	0x20020784

000144bc <mfu_interface_open>:
   144bc:	2801      	cmp	r0, #1
   144be:	b508      	push	{r3, lr}
   144c0:	d10b      	bne.n	144da <mfu_interface_open+0x1e>
   144c2:	f240 2303 	movw	r3, #515	; 0x203
   144c6:	429a      	cmp	r2, r3
   144c8:	d107      	bne.n	144da <mfu_interface_open+0x1e>
   144ca:	4b09      	ldr	r3, [pc, #36]	; (144f0 <mfu_interface_open+0x34>)
   144cc:	681a      	ldr	r2, [r3, #0]
   144ce:	2a01      	cmp	r2, #1
   144d0:	d109      	bne.n	144e6 <mfu_interface_open+0x2a>
   144d2:	2202      	movs	r2, #2
   144d4:	601a      	str	r2, [r3, #0]
   144d6:	4807      	ldr	r0, [pc, #28]	; (144f4 <mfu_interface_open+0x38>)
   144d8:	bd08      	pop	{r3, pc}
   144da:	2016      	movs	r0, #22
   144dc:	f7fd fa82 	bl	119e4 <bsd_os_errno_set>
   144e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   144e4:	bd08      	pop	{r3, pc}
   144e6:	f7fd fa7d 	bl	119e4 <bsd_os_errno_set>
   144ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   144ee:	bd08      	pop	{r3, pc}
   144f0:	20020784 	.word	0x20020784
   144f4:	49765432 	.word	0x49765432

000144f8 <mfu_interface_close>:
   144f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   144fa:	4c32      	ldr	r4, [pc, #200]	; (145c4 <mfu_interface_close+0xcc>)
   144fc:	b083      	sub	sp, #12
   144fe:	6823      	ldr	r3, [r4, #0]
   14500:	1e9a      	subs	r2, r3, #2
   14502:	2a01      	cmp	r2, #1
   14504:	d857      	bhi.n	145b6 <mfu_interface_close+0xbe>
   14506:	2b03      	cmp	r3, #3
   14508:	d004      	beq.n	14514 <mfu_interface_close+0x1c>
   1450a:	2301      	movs	r3, #1
   1450c:	2000      	movs	r0, #0
   1450e:	6023      	str	r3, [r4, #0]
   14510:	b003      	add	sp, #12
   14512:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14514:	2100      	movs	r1, #0
   14516:	4668      	mov	r0, sp
   14518:	f7fe ff14 	bl	13344 <rpc_dfu_client_request_alloc>
   1451c:	4603      	mov	r3, r0
   1451e:	2800      	cmp	r0, #0
   14520:	d13d      	bne.n	1459e <mfu_interface_close+0xa6>
   14522:	2104      	movs	r1, #4
   14524:	4e28      	ldr	r6, [pc, #160]	; (145c8 <mfu_interface_close+0xd0>)
   14526:	9800      	ldr	r0, [sp, #0]
   14528:	8832      	ldrh	r2, [r6, #0]
   1452a:	7201      	strb	r1, [r0, #8]
   1452c:	3201      	adds	r2, #1
   1452e:	b292      	uxth	r2, r2
   14530:	0411      	lsls	r1, r2, #16
   14532:	f041 0106 	orr.w	r1, r1, #6
   14536:	4d25      	ldr	r5, [pc, #148]	; (145cc <mfu_interface_close+0xd4>)
   14538:	60c1      	str	r1, [r0, #12]
   1453a:	7103      	strb	r3, [r0, #4]
   1453c:	7143      	strb	r3, [r0, #5]
   1453e:	7183      	strb	r3, [r0, #6]
   14540:	71c3      	strb	r3, [r0, #7]
   14542:	7243      	strb	r3, [r0, #9]
   14544:	7283      	strb	r3, [r0, #10]
   14546:	72c3      	strb	r3, [r0, #11]
   14548:	2106      	movs	r1, #6
   1454a:	8032      	strh	r2, [r6, #0]
   1454c:	602b      	str	r3, [r5, #0]
   1454e:	f7fe ff0d 	bl	1336c <rpc_dfu_client_request_send>
   14552:	b9d8      	cbnz	r0, 1458c <mfu_interface_close+0x94>
   14554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14558:	ae02      	add	r6, sp, #8
   1455a:	4627      	mov	r7, r4
   1455c:	f846 3d04 	str.w	r3, [r6, #-4]!
   14560:	e004      	b.n	1456c <mfu_interface_close+0x74>
   14562:	4631      	mov	r1, r6
   14564:	4638      	mov	r0, r7
   14566:	f7fd f9a9 	bl	118bc <bsd_os_timedwait>
   1456a:	b9f0      	cbnz	r0, 145aa <mfu_interface_close+0xb2>
   1456c:	6828      	ldr	r0, [r5, #0]
   1456e:	2800      	cmp	r0, #0
   14570:	d0f7      	beq.n	14562 <mfu_interface_close+0x6a>
   14572:	6905      	ldr	r5, [r0, #16]
   14574:	f7fe ff0e 	bl	13394 <rpc_dfu_client_message_free>
   14578:	2d00      	cmp	r5, #0
   1457a:	d0c6      	beq.n	1450a <mfu_interface_close+0x12>
   1457c:	4b14      	ldr	r3, [pc, #80]	; (145d0 <mfu_interface_close+0xd8>)
   1457e:	2008      	movs	r0, #8
   14580:	601d      	str	r5, [r3, #0]
   14582:	f7fd fa2f 	bl	119e4 <bsd_os_errno_set>
   14586:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1458a:	e7c1      	b.n	14510 <mfu_interface_close+0x18>
   1458c:	9800      	ldr	r0, [sp, #0]
   1458e:	6803      	ldr	r3, [r0, #0]
   14590:	b11b      	cbz	r3, 1459a <mfu_interface_close+0xa2>
   14592:	4618      	mov	r0, r3
   14594:	f7fe ff06 	bl	133a4 <rpc_dfu_client_data_free>
   14598:	9800      	ldr	r0, [sp, #0]
   1459a:	f7fe fefb 	bl	13394 <rpc_dfu_client_message_free>
   1459e:	200c      	movs	r0, #12
   145a0:	f7fd fa20 	bl	119e4 <bsd_os_errno_set>
   145a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   145a8:	e7b2      	b.n	14510 <mfu_interface_close+0x18>
   145aa:	203c      	movs	r0, #60	; 0x3c
   145ac:	f7fd fa1a 	bl	119e4 <bsd_os_errno_set>
   145b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   145b4:	e7ac      	b.n	14510 <mfu_interface_close+0x18>
   145b6:	2001      	movs	r0, #1
   145b8:	f7fd fa14 	bl	119e4 <bsd_os_errno_set>
   145bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   145c0:	e7a6      	b.n	14510 <mfu_interface_close+0x18>
   145c2:	bf00      	nop
   145c4:	20020784 	.word	0x20020784
   145c8:	20024e44 	.word	0x20024e44
   145cc:	20020790 	.word	0x20020790
   145d0:	20020788 	.word	0x20020788

000145d4 <mfu_interface_sendto>:
   145d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   145d8:	4e5a      	ldr	r6, [pc, #360]	; (14744 <mfu_interface_sendto+0x170>)
   145da:	4615      	mov	r5, r2
   145dc:	6833      	ldr	r3, [r6, #0]
   145de:	b082      	sub	sp, #8
   145e0:	1e9a      	subs	r2, r3, #2
   145e2:	2a01      	cmp	r2, #1
   145e4:	f200 80a7 	bhi.w	14736 <mfu_interface_sendto+0x162>
   145e8:	460f      	mov	r7, r1
   145ea:	2900      	cmp	r1, #0
   145ec:	f000 809d 	beq.w	1472a <mfu_interface_sendto+0x156>
   145f0:	2d00      	cmp	r5, #0
   145f2:	f000 809a 	beq.w	1472a <mfu_interface_sendto+0x156>
   145f6:	2b02      	cmp	r3, #2
   145f8:	46e8      	mov	r8, sp
   145fa:	d04e      	beq.n	1469a <mfu_interface_sendto+0xc6>
   145fc:	4640      	mov	r0, r8
   145fe:	4629      	mov	r1, r5
   14600:	f7fe fea0 	bl	13344 <rpc_dfu_client_request_alloc>
   14604:	4606      	mov	r6, r0
   14606:	b140      	cbz	r0, 1461a <mfu_interface_sendto+0x46>
   14608:	200c      	movs	r0, #12
   1460a:	f7fd f9eb 	bl	119e4 <bsd_os_errno_set>
   1460e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   14612:	4628      	mov	r0, r5
   14614:	b002      	add	sp, #8
   14616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1461a:	9b00      	ldr	r3, [sp, #0]
   1461c:	4639      	mov	r1, r7
   1461e:	6818      	ldr	r0, [r3, #0]
   14620:	462a      	mov	r2, r5
   14622:	f009 f828 	bl	1d676 <memcpy>
   14626:	2104      	movs	r1, #4
   14628:	4c47      	ldr	r4, [pc, #284]	; (14748 <mfu_interface_sendto+0x174>)
   1462a:	9800      	ldr	r0, [sp, #0]
   1462c:	8823      	ldrh	r3, [r4, #0]
   1462e:	6045      	str	r5, [r0, #4]
   14630:	3301      	adds	r3, #1
   14632:	b29b      	uxth	r3, r3
   14634:	041a      	lsls	r2, r3, #16
   14636:	8023      	strh	r3, [r4, #0]
   14638:	430a      	orrs	r2, r1
   1463a:	4c44      	ldr	r4, [pc, #272]	; (1474c <mfu_interface_sendto+0x178>)
   1463c:	60c2      	str	r2, [r0, #12]
   1463e:	7246      	strb	r6, [r0, #9]
   14640:	7286      	strb	r6, [r0, #10]
   14642:	72c6      	strb	r6, [r0, #11]
   14644:	7201      	strb	r1, [r0, #8]
   14646:	6026      	str	r6, [r4, #0]
   14648:	f7fe fe90 	bl	1336c <rpc_dfu_client_request_send>
   1464c:	2800      	cmp	r0, #0
   1464e:	d162      	bne.n	14716 <mfu_interface_sendto+0x142>
   14650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14654:	ae02      	add	r6, sp, #8
   14656:	4f3b      	ldr	r7, [pc, #236]	; (14744 <mfu_interface_sendto+0x170>)
   14658:	f846 3d04 	str.w	r3, [r6, #-4]!
   1465c:	e004      	b.n	14668 <mfu_interface_sendto+0x94>
   1465e:	4631      	mov	r1, r6
   14660:	4638      	mov	r0, r7
   14662:	f7fd f92b 	bl	118bc <bsd_os_timedwait>
   14666:	b978      	cbnz	r0, 14688 <mfu_interface_sendto+0xb4>
   14668:	6820      	ldr	r0, [r4, #0]
   1466a:	2800      	cmp	r0, #0
   1466c:	d0f7      	beq.n	1465e <mfu_interface_sendto+0x8a>
   1466e:	6904      	ldr	r4, [r0, #16]
   14670:	f7fe fe90 	bl	13394 <rpc_dfu_client_message_free>
   14674:	2c00      	cmp	r4, #0
   14676:	d0cc      	beq.n	14612 <mfu_interface_sendto+0x3e>
   14678:	4b35      	ldr	r3, [pc, #212]	; (14750 <mfu_interface_sendto+0x17c>)
   1467a:	2008      	movs	r0, #8
   1467c:	601c      	str	r4, [r3, #0]
   1467e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   14682:	f7fd f9af 	bl	119e4 <bsd_os_errno_set>
   14686:	e7c4      	b.n	14612 <mfu_interface_sendto+0x3e>
   14688:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1468c:	203c      	movs	r0, #60	; 0x3c
   1468e:	f7fd f9a9 	bl	119e4 <bsd_os_errno_set>
   14692:	4628      	mov	r0, r5
   14694:	b002      	add	sp, #8
   14696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1469a:	4640      	mov	r0, r8
   1469c:	2100      	movs	r1, #0
   1469e:	f7fe fe51 	bl	13344 <rpc_dfu_client_request_alloc>
   146a2:	4602      	mov	r2, r0
   146a4:	2800      	cmp	r0, #0
   146a6:	d1af      	bne.n	14608 <mfu_interface_sendto+0x34>
   146a8:	f04f 0c08 	mov.w	ip, #8
   146ac:	4926      	ldr	r1, [pc, #152]	; (14748 <mfu_interface_sendto+0x174>)
   146ae:	4829      	ldr	r0, [pc, #164]	; (14754 <mfu_interface_sendto+0x180>)
   146b0:	880b      	ldrh	r3, [r1, #0]
   146b2:	6804      	ldr	r4, [r0, #0]
   146b4:	3301      	adds	r3, #1
   146b6:	9800      	ldr	r0, [sp, #0]
   146b8:	b29b      	uxth	r3, r3
   146ba:	800b      	strh	r3, [r1, #0]
   146bc:	041b      	lsls	r3, r3, #16
   146be:	f043 0303 	orr.w	r3, r3, #3
   146c2:	6104      	str	r4, [r0, #16]
   146c4:	4c21      	ldr	r4, [pc, #132]	; (1474c <mfu_interface_sendto+0x178>)
   146c6:	60c3      	str	r3, [r0, #12]
   146c8:	7102      	strb	r2, [r0, #4]
   146ca:	7142      	strb	r2, [r0, #5]
   146cc:	7182      	strb	r2, [r0, #6]
   146ce:	71c2      	strb	r2, [r0, #7]
   146d0:	7242      	strb	r2, [r0, #9]
   146d2:	7282      	strb	r2, [r0, #10]
   146d4:	72c2      	strb	r2, [r0, #11]
   146d6:	f880 c008 	strb.w	ip, [r0, #8]
   146da:	2103      	movs	r1, #3
   146dc:	6022      	str	r2, [r4, #0]
   146de:	f7fe fe45 	bl	1336c <rpc_dfu_client_request_send>
   146e2:	b9c0      	cbnz	r0, 14716 <mfu_interface_sendto+0x142>
   146e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   146e8:	f10d 0908 	add.w	r9, sp, #8
   146ec:	f849 3d04 	str.w	r3, [r9, #-4]!
   146f0:	46b2      	mov	sl, r6
   146f2:	e005      	b.n	14700 <mfu_interface_sendto+0x12c>
   146f4:	4649      	mov	r1, r9
   146f6:	4650      	mov	r0, sl
   146f8:	f7fd f8e0 	bl	118bc <bsd_os_timedwait>
   146fc:	2800      	cmp	r0, #0
   146fe:	d1c3      	bne.n	14688 <mfu_interface_sendto+0xb4>
   14700:	6820      	ldr	r0, [r4, #0]
   14702:	2800      	cmp	r0, #0
   14704:	d0f6      	beq.n	146f4 <mfu_interface_sendto+0x120>
   14706:	6904      	ldr	r4, [r0, #16]
   14708:	f7fe fe44 	bl	13394 <rpc_dfu_client_message_free>
   1470c:	2c00      	cmp	r4, #0
   1470e:	d1b3      	bne.n	14678 <mfu_interface_sendto+0xa4>
   14710:	2303      	movs	r3, #3
   14712:	6033      	str	r3, [r6, #0]
   14714:	e772      	b.n	145fc <mfu_interface_sendto+0x28>
   14716:	9800      	ldr	r0, [sp, #0]
   14718:	6803      	ldr	r3, [r0, #0]
   1471a:	b11b      	cbz	r3, 14724 <mfu_interface_sendto+0x150>
   1471c:	4618      	mov	r0, r3
   1471e:	f7fe fe41 	bl	133a4 <rpc_dfu_client_data_free>
   14722:	9800      	ldr	r0, [sp, #0]
   14724:	f7fe fe36 	bl	13394 <rpc_dfu_client_message_free>
   14728:	e76e      	b.n	14608 <mfu_interface_sendto+0x34>
   1472a:	2016      	movs	r0, #22
   1472c:	f7fd f95a 	bl	119e4 <bsd_os_errno_set>
   14730:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   14734:	e76d      	b.n	14612 <mfu_interface_sendto+0x3e>
   14736:	2001      	movs	r0, #1
   14738:	f7fd f954 	bl	119e4 <bsd_os_errno_set>
   1473c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   14740:	e767      	b.n	14612 <mfu_interface_sendto+0x3e>
   14742:	bf00      	nop
   14744:	20020784 	.word	0x20020784
   14748:	20024e44 	.word	0x20024e44
   1474c:	20020790 	.word	0x20020790
   14750:	20020788 	.word	0x20020788
   14754:	2002078c 	.word	0x2002078c

00014758 <mfu_interface_setopt>:
   14758:	b5f0      	push	{r4, r5, r6, r7, lr}
   1475a:	4846      	ldr	r0, [pc, #280]	; (14874 <mfu_interface_setopt+0x11c>)
   1475c:	b083      	sub	sp, #12
   1475e:	6800      	ldr	r0, [r0, #0]
   14760:	3802      	subs	r0, #2
   14762:	2801      	cmp	r0, #1
   14764:	d877      	bhi.n	14856 <mfu_interface_setopt+0xfe>
   14766:	f240 2003 	movw	r0, #515	; 0x203
   1476a:	4281      	cmp	r1, r0
   1476c:	d16d      	bne.n	1484a <mfu_interface_setopt+0xf2>
   1476e:	3a04      	subs	r2, #4
   14770:	2a03      	cmp	r2, #3
   14772:	d85c      	bhi.n	1482e <mfu_interface_setopt+0xd6>
   14774:	e8df f002 	tbb	[pc, r2]
   14778:	514e024b 	.word	0x514e024b
   1477c:	2407      	movs	r4, #7
   1477e:	4625      	mov	r5, r4
   14780:	2100      	movs	r1, #0
   14782:	4668      	mov	r0, sp
   14784:	f7fe fdde 	bl	13344 <rpc_dfu_client_request_alloc>
   14788:	4603      	mov	r3, r0
   1478a:	2800      	cmp	r0, #0
   1478c:	d138      	bne.n	14800 <mfu_interface_setopt+0xa8>
   1478e:	2704      	movs	r7, #4
   14790:	4e39      	ldr	r6, [pc, #228]	; (14878 <mfu_interface_setopt+0x120>)
   14792:	9800      	ldr	r0, [sp, #0]
   14794:	8832      	ldrh	r2, [r6, #0]
   14796:	4629      	mov	r1, r5
   14798:	3201      	adds	r2, #1
   1479a:	b292      	uxth	r2, r2
   1479c:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   147a0:	4c36      	ldr	r4, [pc, #216]	; (1487c <mfu_interface_setopt+0x124>)
   147a2:	60c5      	str	r5, [r0, #12]
   147a4:	7103      	strb	r3, [r0, #4]
   147a6:	7143      	strb	r3, [r0, #5]
   147a8:	7183      	strb	r3, [r0, #6]
   147aa:	71c3      	strb	r3, [r0, #7]
   147ac:	7243      	strb	r3, [r0, #9]
   147ae:	7283      	strb	r3, [r0, #10]
   147b0:	72c3      	strb	r3, [r0, #11]
   147b2:	7207      	strb	r7, [r0, #8]
   147b4:	8032      	strh	r2, [r6, #0]
   147b6:	6023      	str	r3, [r4, #0]
   147b8:	f7fe fdd8 	bl	1336c <rpc_dfu_client_request_send>
   147bc:	b9b8      	cbnz	r0, 147ee <mfu_interface_setopt+0x96>
   147be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   147c2:	ad02      	add	r5, sp, #8
   147c4:	4e2b      	ldr	r6, [pc, #172]	; (14874 <mfu_interface_setopt+0x11c>)
   147c6:	f845 3d04 	str.w	r3, [r5, #-4]!
   147ca:	e005      	b.n	147d8 <mfu_interface_setopt+0x80>
   147cc:	4629      	mov	r1, r5
   147ce:	4630      	mov	r0, r6
   147d0:	f7fd f874 	bl	118bc <bsd_os_timedwait>
   147d4:	2800      	cmp	r0, #0
   147d6:	d131      	bne.n	1483c <mfu_interface_setopt+0xe4>
   147d8:	6820      	ldr	r0, [r4, #0]
   147da:	2800      	cmp	r0, #0
   147dc:	d0f6      	beq.n	147cc <mfu_interface_setopt+0x74>
   147de:	6904      	ldr	r4, [r0, #16]
   147e0:	f7fe fdd8 	bl	13394 <rpc_dfu_client_message_free>
   147e4:	2c00      	cmp	r4, #0
   147e6:	d13c      	bne.n	14862 <mfu_interface_setopt+0x10a>
   147e8:	4620      	mov	r0, r4
   147ea:	b003      	add	sp, #12
   147ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   147ee:	9800      	ldr	r0, [sp, #0]
   147f0:	6803      	ldr	r3, [r0, #0]
   147f2:	b11b      	cbz	r3, 147fc <mfu_interface_setopt+0xa4>
   147f4:	4618      	mov	r0, r3
   147f6:	f7fe fdd5 	bl	133a4 <rpc_dfu_client_data_free>
   147fa:	9800      	ldr	r0, [sp, #0]
   147fc:	f7fe fdca 	bl	13394 <rpc_dfu_client_message_free>
   14800:	200c      	movs	r0, #12
   14802:	f7fd f8ef 	bl	119e4 <bsd_os_errno_set>
   14806:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1480a:	b003      	add	sp, #12
   1480c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1480e:	2405      	movs	r4, #5
   14810:	4625      	mov	r5, r4
   14812:	e7b5      	b.n	14780 <mfu_interface_setopt+0x28>
   14814:	2408      	movs	r4, #8
   14816:	4625      	mov	r5, r4
   14818:	e7b2      	b.n	14780 <mfu_interface_setopt+0x28>
   1481a:	b1b3      	cbz	r3, 1484a <mfu_interface_setopt+0xf2>
   1481c:	9a08      	ldr	r2, [sp, #32]
   1481e:	2a04      	cmp	r2, #4
   14820:	d113      	bne.n	1484a <mfu_interface_setopt+0xf2>
   14822:	2000      	movs	r0, #0
   14824:	681a      	ldr	r2, [r3, #0]
   14826:	4b16      	ldr	r3, [pc, #88]	; (14880 <mfu_interface_setopt+0x128>)
   14828:	601a      	str	r2, [r3, #0]
   1482a:	b003      	add	sp, #12
   1482c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1482e:	202a      	movs	r0, #42	; 0x2a
   14830:	f7fd f8d8 	bl	119e4 <bsd_os_errno_set>
   14834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14838:	b003      	add	sp, #12
   1483a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1483c:	203c      	movs	r0, #60	; 0x3c
   1483e:	f7fd f8d1 	bl	119e4 <bsd_os_errno_set>
   14842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14846:	b003      	add	sp, #12
   14848:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1484a:	2016      	movs	r0, #22
   1484c:	f7fd f8ca 	bl	119e4 <bsd_os_errno_set>
   14850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14854:	e7c9      	b.n	147ea <mfu_interface_setopt+0x92>
   14856:	2001      	movs	r0, #1
   14858:	f7fd f8c4 	bl	119e4 <bsd_os_errno_set>
   1485c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14860:	e7c3      	b.n	147ea <mfu_interface_setopt+0x92>
   14862:	4b08      	ldr	r3, [pc, #32]	; (14884 <mfu_interface_setopt+0x12c>)
   14864:	2008      	movs	r0, #8
   14866:	601c      	str	r4, [r3, #0]
   14868:	f7fd f8bc 	bl	119e4 <bsd_os_errno_set>
   1486c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14870:	e7bb      	b.n	147ea <mfu_interface_setopt+0x92>
   14872:	bf00      	nop
   14874:	20020784 	.word	0x20020784
   14878:	20024e44 	.word	0x20024e44
   1487c:	20020790 	.word	0x20020790
   14880:	2002078c 	.word	0x2002078c
   14884:	20020788 	.word	0x20020788

00014888 <mfu_interface_getopt>:
   14888:	f240 2003 	movw	r0, #515	; 0x203
   1488c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14890:	4281      	cmp	r1, r0
   14892:	b082      	sub	sp, #8
   14894:	9e08      	ldr	r6, [sp, #32]
   14896:	f040 80ae 	bne.w	149f6 <mfu_interface_getopt+0x16e>
   1489a:	461d      	mov	r5, r3
   1489c:	2b00      	cmp	r3, #0
   1489e:	f000 80aa 	beq.w	149f6 <mfu_interface_getopt+0x16e>
   148a2:	2e00      	cmp	r6, #0
   148a4:	f000 80a7 	beq.w	149f6 <mfu_interface_getopt+0x16e>
   148a8:	4b5e      	ldr	r3, [pc, #376]	; (14a24 <mfu_interface_getopt+0x19c>)
   148aa:	681b      	ldr	r3, [r3, #0]
   148ac:	3b02      	subs	r3, #2
   148ae:	2b01      	cmp	r3, #1
   148b0:	f200 80a7 	bhi.w	14a02 <mfu_interface_getopt+0x17a>
   148b4:	3a01      	subs	r2, #1
   148b6:	2a13      	cmp	r2, #19
   148b8:	d879      	bhi.n	149ae <mfu_interface_getopt+0x126>
   148ba:	e8df f002 	tbb	[pc, r2]
   148be:	5f17      	.short	0x5f17
   148c0:	78787878 	.word	0x78787878
   148c4:	78787872 	.word	0x78787872
   148c8:	78787878 	.word	0x78787878
   148cc:	78787878 	.word	0x78787878
   148d0:	0a78      	.short	0x0a78
   148d2:	6833      	ldr	r3, [r6, #0]
   148d4:	2b04      	cmp	r3, #4
   148d6:	f040 808e 	bne.w	149f6 <mfu_interface_getopt+0x16e>
   148da:	2200      	movs	r2, #0
   148dc:	4610      	mov	r0, r2
   148de:	4b52      	ldr	r3, [pc, #328]	; (14a28 <mfu_interface_getopt+0x1a0>)
   148e0:	6819      	ldr	r1, [r3, #0]
   148e2:	601a      	str	r2, [r3, #0]
   148e4:	6029      	str	r1, [r5, #0]
   148e6:	b002      	add	sp, #8
   148e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   148ec:	6833      	ldr	r3, [r6, #0]
   148ee:	2b24      	cmp	r3, #36	; 0x24
   148f0:	f040 8081 	bne.w	149f6 <mfu_interface_getopt+0x16e>
   148f4:	2401      	movs	r4, #1
   148f6:	46a0      	mov	r8, r4
   148f8:	2100      	movs	r1, #0
   148fa:	4668      	mov	r0, sp
   148fc:	f7fe fd22 	bl	13344 <rpc_dfu_client_request_alloc>
   14900:	2800      	cmp	r0, #0
   14902:	d146      	bne.n	14992 <mfu_interface_getopt+0x10a>
   14904:	4949      	ldr	r1, [pc, #292]	; (14a2c <mfu_interface_getopt+0x1a4>)
   14906:	9b00      	ldr	r3, [sp, #0]
   14908:	880a      	ldrh	r2, [r1, #0]
   1490a:	f1b8 0f03 	cmp.w	r8, #3
   1490e:	f102 0201 	add.w	r2, r2, #1
   14912:	b292      	uxth	r2, r2
   14914:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   14918:	7118      	strb	r0, [r3, #4]
   1491a:	800a      	strh	r2, [r1, #0]
   1491c:	60dc      	str	r4, [r3, #12]
   1491e:	7158      	strb	r0, [r3, #5]
   14920:	7198      	strb	r0, [r3, #6]
   14922:	71d8      	strb	r0, [r3, #7]
   14924:	d04b      	beq.n	149be <mfu_interface_getopt+0x136>
   14926:	2104      	movs	r1, #4
   14928:	2200      	movs	r2, #0
   1492a:	4f41      	ldr	r7, [pc, #260]	; (14a30 <mfu_interface_getopt+0x1a8>)
   1492c:	6099      	str	r1, [r3, #8]
   1492e:	4618      	mov	r0, r3
   14930:	4641      	mov	r1, r8
   14932:	603a      	str	r2, [r7, #0]
   14934:	f7fe fd1a 	bl	1336c <rpc_dfu_client_request_send>
   14938:	2800      	cmp	r0, #0
   1493a:	d14d      	bne.n	149d8 <mfu_interface_getopt+0x150>
   1493c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14940:	ac02      	add	r4, sp, #8
   14942:	f844 3d04 	str.w	r3, [r4, #-4]!
   14946:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 14a24 <mfu_interface_getopt+0x19c>
   1494a:	e005      	b.n	14958 <mfu_interface_getopt+0xd0>
   1494c:	4621      	mov	r1, r4
   1494e:	4640      	mov	r0, r8
   14950:	f7fc ffb4 	bl	118bc <bsd_os_timedwait>
   14954:	2800      	cmp	r0, #0
   14956:	d137      	bne.n	149c8 <mfu_interface_getopt+0x140>
   14958:	6839      	ldr	r1, [r7, #0]
   1495a:	2900      	cmp	r1, #0
   1495c:	d0f6      	beq.n	1494c <mfu_interface_getopt+0xc4>
   1495e:	690c      	ldr	r4, [r1, #16]
   14960:	2c00      	cmp	r4, #0
   14962:	d154      	bne.n	14a0e <mfu_interface_getopt+0x186>
   14964:	6832      	ldr	r2, [r6, #0]
   14966:	3114      	adds	r1, #20
   14968:	4628      	mov	r0, r5
   1496a:	f008 fe84 	bl	1d676 <memcpy>
   1496e:	6838      	ldr	r0, [r7, #0]
   14970:	f7fe fd10 	bl	13394 <rpc_dfu_client_message_free>
   14974:	4620      	mov	r0, r4
   14976:	b002      	add	sp, #8
   14978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1497c:	6833      	ldr	r3, [r6, #0]
   1497e:	2b04      	cmp	r3, #4
   14980:	d139      	bne.n	149f6 <mfu_interface_getopt+0x16e>
   14982:	2402      	movs	r4, #2
   14984:	2100      	movs	r1, #0
   14986:	4668      	mov	r0, sp
   14988:	46a0      	mov	r8, r4
   1498a:	f7fe fcdb 	bl	13344 <rpc_dfu_client_request_alloc>
   1498e:	2800      	cmp	r0, #0
   14990:	d0b8      	beq.n	14904 <mfu_interface_getopt+0x7c>
   14992:	200c      	movs	r0, #12
   14994:	f7fd f826 	bl	119e4 <bsd_os_errno_set>
   14998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1499c:	b002      	add	sp, #8
   1499e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   149a2:	6833      	ldr	r3, [r6, #0]
   149a4:	2b04      	cmp	r3, #4
   149a6:	d126      	bne.n	149f6 <mfu_interface_getopt+0x16e>
   149a8:	2409      	movs	r4, #9
   149aa:	46a0      	mov	r8, r4
   149ac:	e7a4      	b.n	148f8 <mfu_interface_getopt+0x70>
   149ae:	202a      	movs	r0, #42	; 0x2a
   149b0:	f7fd f818 	bl	119e4 <bsd_os_errno_set>
   149b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   149b8:	b002      	add	sp, #8
   149ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   149be:	4a1d      	ldr	r2, [pc, #116]	; (14a34 <mfu_interface_getopt+0x1ac>)
   149c0:	2108      	movs	r1, #8
   149c2:	6812      	ldr	r2, [r2, #0]
   149c4:	611a      	str	r2, [r3, #16]
   149c6:	e7af      	b.n	14928 <mfu_interface_getopt+0xa0>
   149c8:	203c      	movs	r0, #60	; 0x3c
   149ca:	f7fd f80b 	bl	119e4 <bsd_os_errno_set>
   149ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   149d2:	b002      	add	sp, #8
   149d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   149d8:	9800      	ldr	r0, [sp, #0]
   149da:	6803      	ldr	r3, [r0, #0]
   149dc:	b11b      	cbz	r3, 149e6 <mfu_interface_getopt+0x15e>
   149de:	4618      	mov	r0, r3
   149e0:	f7fe fce0 	bl	133a4 <rpc_dfu_client_data_free>
   149e4:	9800      	ldr	r0, [sp, #0]
   149e6:	f7fe fcd5 	bl	13394 <rpc_dfu_client_message_free>
   149ea:	200c      	movs	r0, #12
   149ec:	f7fc fffa 	bl	119e4 <bsd_os_errno_set>
   149f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   149f4:	e7d2      	b.n	1499c <mfu_interface_getopt+0x114>
   149f6:	2016      	movs	r0, #22
   149f8:	f7fc fff4 	bl	119e4 <bsd_os_errno_set>
   149fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14a00:	e771      	b.n	148e6 <mfu_interface_getopt+0x5e>
   14a02:	2001      	movs	r0, #1
   14a04:	f7fc ffee 	bl	119e4 <bsd_os_errno_set>
   14a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14a0c:	e76b      	b.n	148e6 <mfu_interface_getopt+0x5e>
   14a0e:	4b06      	ldr	r3, [pc, #24]	; (14a28 <mfu_interface_getopt+0x1a0>)
   14a10:	2008      	movs	r0, #8
   14a12:	601c      	str	r4, [r3, #0]
   14a14:	f7fc ffe6 	bl	119e4 <bsd_os_errno_set>
   14a18:	6838      	ldr	r0, [r7, #0]
   14a1a:	f7fe fcbb 	bl	13394 <rpc_dfu_client_message_free>
   14a1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14a22:	e760      	b.n	148e6 <mfu_interface_getopt+0x5e>
   14a24:	20020784 	.word	0x20020784
   14a28:	20020788 	.word	0x20020788
   14a2c:	20024e44 	.word	0x20024e44
   14a30:	20020790 	.word	0x20020790
   14a34:	2002078c 	.word	0x2002078c

00014a38 <bsd_platform_error_handler>:
   14a38:	b508      	push	{r3, lr}
   14a3a:	f7f7 ff2b 	bl	c894 <bsd_recoverable_error_handler>
   14a3e:	bd08      	pop	{r3, pc}

00014a40 <bsd_init>:
   14a40:	b510      	push	{r4, lr}
   14a42:	4c06      	ldr	r4, [pc, #24]	; (14a5c <bsd_init+0x1c>)
   14a44:	7823      	ldrb	r3, [r4, #0]
   14a46:	b92b      	cbnz	r3, 14a54 <bsd_init+0x14>
   14a48:	f000 f826 	bl	14a98 <bsd_platform_init>
   14a4c:	b908      	cbnz	r0, 14a52 <bsd_init+0x12>
   14a4e:	2301      	movs	r3, #1
   14a50:	7023      	strb	r3, [r4, #0]
   14a52:	bd10      	pop	{r4, pc}
   14a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14a58:	bd10      	pop	{r4, pc}
   14a5a:	bf00      	nop
   14a5c:	2002658e 	.word	0x2002658e

00014a60 <bsd_shutdown>:
   14a60:	b510      	push	{r4, lr}
   14a62:	4c05      	ldr	r4, [pc, #20]	; (14a78 <bsd_shutdown+0x18>)
   14a64:	7823      	ldrb	r3, [r4, #0]
   14a66:	b123      	cbz	r3, 14a72 <bsd_shutdown+0x12>
   14a68:	f000 f87c 	bl	14b64 <bsd_platform_shutdown>
   14a6c:	b900      	cbnz	r0, 14a70 <bsd_shutdown+0x10>
   14a6e:	7020      	strb	r0, [r4, #0]
   14a70:	bd10      	pop	{r4, pc}
   14a72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14a76:	bd10      	pop	{r4, pc}
   14a78:	2002658e 	.word	0x2002658e

00014a7c <unimplemented_method>:
   14a7c:	b40f      	push	{r0, r1, r2, r3}
   14a7e:	b508      	push	{r3, lr}
   14a80:	202d      	movs	r0, #45	; 0x2d
   14a82:	f7fc ffaf 	bl	119e4 <bsd_os_errno_set>
   14a86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14a8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14a8e:	b004      	add	sp, #16
   14a90:	4770      	bx	lr
   14a92:	bf00      	nop

00014a94 <rpc_transport_ipc_fault_handler>:
   14a94:	f7ff bfd0 	b.w	14a38 <bsd_platform_error_handler>

00014a98 <bsd_platform_init>:
   14a98:	b5f0      	push	{r4, r5, r6, r7, lr}
   14a9a:	b093      	sub	sp, #76	; 0x4c
   14a9c:	f7fe feba 	bl	13814 <nrf_mem_init>
   14aa0:	2800      	cmp	r0, #0
   14aa2:	d14c      	bne.n	14b3e <bsd_platform_init+0xa6>
   14aa4:	4928      	ldr	r1, [pc, #160]	; (14b48 <bsd_platform_init+0xb0>)
   14aa6:	a801      	add	r0, sp, #4
   14aa8:	f7fe ff28 	bl	138fc <nrf_mem_register>
   14aac:	2800      	cmp	r0, #0
   14aae:	d146      	bne.n	14b3e <bsd_platform_init+0xa6>
   14ab0:	f7fd f882 	bl	11bb8 <bsd_os_init>
   14ab4:	f004 fa68 	bl	18f88 <rpc_framework_init>
   14ab8:	2800      	cmp	r0, #0
   14aba:	d140      	bne.n	14b3e <bsd_platform_init+0xa6>
   14abc:	2320      	movs	r3, #32
   14abe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   14ac2:	2208      	movs	r2, #8
   14ac4:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   14ac8:	4f20      	ldr	r7, [pc, #128]	; (14b4c <bsd_platform_init+0xb4>)
   14aca:	4e21      	ldr	r6, [pc, #132]	; (14b50 <bsd_platform_init+0xb8>)
   14acc:	9303      	str	r3, [sp, #12]
   14ace:	9305      	str	r3, [sp, #20]
   14ad0:	9307      	str	r3, [sp, #28]
   14ad2:	4d20      	ldr	r5, [pc, #128]	; (14b54 <bsd_platform_init+0xbc>)
   14ad4:	9109      	str	r1, [sp, #36]	; 0x24
   14ad6:	910d      	str	r1, [sp, #52]	; 0x34
   14ad8:	4c1f      	ldr	r4, [pc, #124]	; (14b58 <bsd_platform_init+0xc0>)
   14ada:	4920      	ldr	r1, [pc, #128]	; (14b5c <bsd_platform_init+0xc4>)
   14adc:	4b20      	ldr	r3, [pc, #128]	; (14b60 <bsd_platform_init+0xc8>)
   14ade:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
   14ae2:	eb0d 0002 	add.w	r0, sp, r2
   14ae6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   14aea:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
   14aee:	9702      	str	r7, [sp, #8]
   14af0:	9604      	str	r6, [sp, #16]
   14af2:	9506      	str	r5, [sp, #24]
   14af4:	9408      	str	r4, [sp, #32]
   14af6:	910a      	str	r1, [sp, #40]	; 0x28
   14af8:	930c      	str	r3, [sp, #48]	; 0x30
   14afa:	f000 fbe7 	bl	152cc <rpc_transport_ipc_init>
   14afe:	b108      	cbz	r0, 14b04 <bsd_platform_init+0x6c>
   14b00:	b013      	add	sp, #76	; 0x4c
   14b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14b04:	f003 ffd0 	bl	18aa8 <interface_init>
   14b08:	b9c8      	cbnz	r0, 14b3e <bsd_platform_init+0xa6>
   14b0a:	f7fe fac9 	bl	130a0 <at_interface_init>
   14b0e:	b9b0      	cbnz	r0, 14b3e <bsd_platform_init+0xa6>
   14b10:	f002 fd08 	bl	17524 <ip_interface_init>
   14b14:	b998      	cbnz	r0, 14b3e <bsd_platform_init+0xa6>
   14b16:	f7ff f8e9 	bl	13cec <tls_interface_init>
   14b1a:	b980      	cbnz	r0, 14b3e <bsd_platform_init+0xa6>
   14b1c:	f7ff fcb2 	bl	14484 <mfu_interface_init>
   14b20:	b968      	cbnz	r0, 14b3e <bsd_platform_init+0xa6>
   14b22:	f001 fac3 	bl	160ac <pdn_interface_init>
   14b26:	b950      	cbnz	r0, 14b3e <bsd_platform_init+0xa6>
   14b28:	f005 fcf8 	bl	1a51c <gnss_interface_init>
   14b2c:	b938      	cbnz	r0, 14b3e <bsd_platform_init+0xa6>
   14b2e:	f7fd ff79 	bl	12a24 <logobj_interface_init>
   14b32:	3000      	adds	r0, #0
   14b34:	bf18      	it	ne
   14b36:	2001      	movne	r0, #1
   14b38:	4240      	negs	r0, r0
   14b3a:	b013      	add	sp, #76	; 0x4c
   14b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14b3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14b42:	b013      	add	sp, #76	; 0x4c
   14b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14b46:	bf00      	nop
   14b48:	0001f7bc 	.word	0x0001f7bc
   14b4c:	20010000 	.word	0x20010000
   14b50:	20010040 	.word	0x20010040
   14b54:	20010020 	.word	0x20010020
   14b58:	20017060 	.word	0x20017060
   14b5c:	20010060 	.word	0x20010060
   14b60:	20013060 	.word	0x20013060

00014b64 <bsd_platform_shutdown>:
   14b64:	b508      	push	{r3, lr}
   14b66:	f004 f947 	bl	18df8 <interface_shutdown>
   14b6a:	f000 fc13 	bl	15394 <rpc_transport_ipc_shutdown>
   14b6e:	2000      	movs	r0, #0
   14b70:	bd08      	pop	{r3, pc}
   14b72:	bf00      	nop

00014b74 <bsd_platform_af_method_table_get>:
   14b74:	2805      	cmp	r0, #5
   14b76:	d02a      	beq.n	14bce <bsd_platform_af_method_table_get+0x5a>
   14b78:	b508      	push	{r3, lr}
   14b7a:	d914      	bls.n	14ba6 <bsd_platform_af_method_table_get+0x32>
   14b7c:	280a      	cmp	r0, #10
   14b7e:	d016      	beq.n	14bae <bsd_platform_af_method_table_get+0x3a>
   14b80:	2866      	cmp	r0, #102	; 0x66
   14b82:	d10b      	bne.n	14b9c <bsd_platform_af_method_table_get+0x28>
   14b84:	f240 2302 	movw	r3, #514	; 0x202
   14b88:	429a      	cmp	r2, r3
   14b8a:	d032      	beq.n	14bf2 <bsd_platform_af_method_table_get+0x7e>
   14b8c:	f240 2305 	movw	r3, #517	; 0x205
   14b90:	429a      	cmp	r2, r3
   14b92:	d032      	beq.n	14bfa <bsd_platform_af_method_table_get+0x86>
   14b94:	f240 2301 	movw	r3, #513	; 0x201
   14b98:	429a      	cmp	r2, r3
   14b9a:	d02c      	beq.n	14bf6 <bsd_platform_af_method_table_get+0x82>
   14b9c:	2016      	movs	r0, #22
   14b9e:	f7fc ff21 	bl	119e4 <bsd_os_errno_set>
   14ba2:	2000      	movs	r0, #0
   14ba4:	bd08      	pop	{r3, pc}
   14ba6:	2801      	cmp	r0, #1
   14ba8:	d016      	beq.n	14bd8 <bsd_platform_af_method_table_get+0x64>
   14baa:	2802      	cmp	r0, #2
   14bac:	d1f6      	bne.n	14b9c <bsd_platform_af_method_table_get+0x28>
   14bae:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   14bb2:	2a0a      	cmp	r2, #10
   14bb4:	d819      	bhi.n	14bea <bsd_platform_af_method_table_get+0x76>
   14bb6:	2301      	movs	r3, #1
   14bb8:	f240 4103 	movw	r1, #1027	; 0x403
   14bbc:	4810      	ldr	r0, [pc, #64]	; (14c00 <bsd_platform_af_method_table_get+0x8c>)
   14bbe:	fa03 f202 	lsl.w	r2, r3, r2
   14bc2:	420a      	tst	r2, r1
   14bc4:	f100 0328 	add.w	r3, r0, #40	; 0x28
   14bc8:	bf18      	it	ne
   14bca:	4618      	movne	r0, r3
   14bcc:	bd08      	pop	{r3, pc}
   14bce:	2903      	cmp	r1, #3
   14bd0:	480c      	ldr	r0, [pc, #48]	; (14c04 <bsd_platform_af_method_table_get+0x90>)
   14bd2:	bf18      	it	ne
   14bd4:	2000      	movne	r0, #0
   14bd6:	4770      	bx	lr
   14bd8:	f240 2303 	movw	r3, #515	; 0x203
   14bdc:	429a      	cmp	r2, r3
   14bde:	d006      	beq.n	14bee <bsd_platform_af_method_table_get+0x7a>
   14be0:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   14be4:	d1da      	bne.n	14b9c <bsd_platform_af_method_table_get+0x28>
   14be6:	4808      	ldr	r0, [pc, #32]	; (14c08 <bsd_platform_af_method_table_get+0x94>)
   14be8:	bd08      	pop	{r3, pc}
   14bea:	4805      	ldr	r0, [pc, #20]	; (14c00 <bsd_platform_af_method_table_get+0x8c>)
   14bec:	bd08      	pop	{r3, pc}
   14bee:	4807      	ldr	r0, [pc, #28]	; (14c0c <bsd_platform_af_method_table_get+0x98>)
   14bf0:	bd08      	pop	{r3, pc}
   14bf2:	4807      	ldr	r0, [pc, #28]	; (14c10 <bsd_platform_af_method_table_get+0x9c>)
   14bf4:	bd08      	pop	{r3, pc}
   14bf6:	4807      	ldr	r0, [pc, #28]	; (14c14 <bsd_platform_af_method_table_get+0xa0>)
   14bf8:	bd08      	pop	{r3, pc}
   14bfa:	4807      	ldr	r0, [pc, #28]	; (14c18 <bsd_platform_af_method_table_get+0xa4>)
   14bfc:	bd08      	pop	{r3, pc}
   14bfe:	bf00      	nop
   14c00:	0001f68c 	.word	0x0001f68c
   14c04:	0001f77c 	.word	0x0001f77c
   14c08:	0001f72c 	.word	0x0001f72c
   14c0c:	0001f6dc 	.word	0x0001f6dc
   14c10:	0001f704 	.word	0x0001f704
   14c14:	0001f664 	.word	0x0001f664
   14c18:	0001f754 	.word	0x0001f754

00014c1c <bsd_platform_fd_method_table_get>:
   14c1c:	b538      	push	{r3, r4, r5, lr}
   14c1e:	4605      	mov	r5, r0
   14c20:	f004 f85e 	bl	18ce0 <interface_socket_from_handle_get>
   14c24:	4604      	mov	r4, r0
   14c26:	b950      	cbnz	r0, 14c3e <bsd_platform_fd_method_table_get+0x22>
   14c28:	4b2a      	ldr	r3, [pc, #168]	; (14cd4 <bsd_platform_fd_method_table_get+0xb8>)
   14c2a:	43ab      	bics	r3, r5
   14c2c:	d032      	beq.n	14c94 <bsd_platform_fd_method_table_get+0x78>
   14c2e:	4b2a      	ldr	r3, [pc, #168]	; (14cd8 <bsd_platform_fd_method_table_get+0xbc>)
   14c30:	43ab      	bics	r3, r5
   14c32:	d043      	beq.n	14cbc <bsd_platform_fd_method_table_get+0xa0>
   14c34:	4b29      	ldr	r3, [pc, #164]	; (14cdc <bsd_platform_fd_method_table_get+0xc0>)
   14c36:	43ab      	bics	r3, r5
   14c38:	d146      	bne.n	14cc8 <bsd_platform_fd_method_table_get+0xac>
   14c3a:	4829      	ldr	r0, [pc, #164]	; (14ce0 <bsd_platform_fd_method_table_get+0xc4>)
   14c3c:	bd38      	pop	{r3, r4, r5, pc}
   14c3e:	68c3      	ldr	r3, [r0, #12]
   14c40:	6942      	ldr	r2, [r0, #20]
   14c42:	2b05      	cmp	r3, #5
   14c44:	d034      	beq.n	14cb0 <bsd_platform_fd_method_table_get+0x94>
   14c46:	d911      	bls.n	14c6c <bsd_platform_fd_method_table_get+0x50>
   14c48:	2b0a      	cmp	r3, #10
   14c4a:	d013      	beq.n	14c74 <bsd_platform_fd_method_table_get+0x58>
   14c4c:	2b66      	cmp	r3, #102	; 0x66
   14c4e:	d12a      	bne.n	14ca6 <bsd_platform_fd_method_table_get+0x8a>
   14c50:	f240 2302 	movw	r3, #514	; 0x202
   14c54:	429a      	cmp	r2, r3
   14c56:	d031      	beq.n	14cbc <bsd_platform_fd_method_table_get+0xa0>
   14c58:	f240 2305 	movw	r3, #517	; 0x205
   14c5c:	429a      	cmp	r2, r3
   14c5e:	d031      	beq.n	14cc4 <bsd_platform_fd_method_table_get+0xa8>
   14c60:	f240 2301 	movw	r3, #513	; 0x201
   14c64:	429a      	cmp	r2, r3
   14c66:	d11e      	bne.n	14ca6 <bsd_platform_fd_method_table_get+0x8a>
   14c68:	481e      	ldr	r0, [pc, #120]	; (14ce4 <bsd_platform_fd_method_table_get+0xc8>)
   14c6a:	bd38      	pop	{r3, r4, r5, pc}
   14c6c:	2b01      	cmp	r3, #1
   14c6e:	d013      	beq.n	14c98 <bsd_platform_fd_method_table_get+0x7c>
   14c70:	2b02      	cmp	r3, #2
   14c72:	d118      	bne.n	14ca6 <bsd_platform_fd_method_table_get+0x8a>
   14c74:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   14c78:	2a0a      	cmp	r2, #10
   14c7a:	d821      	bhi.n	14cc0 <bsd_platform_fd_method_table_get+0xa4>
   14c7c:	2301      	movs	r3, #1
   14c7e:	f240 4103 	movw	r1, #1027	; 0x403
   14c82:	4819      	ldr	r0, [pc, #100]	; (14ce8 <bsd_platform_fd_method_table_get+0xcc>)
   14c84:	fa03 f202 	lsl.w	r2, r3, r2
   14c88:	420a      	tst	r2, r1
   14c8a:	f100 0428 	add.w	r4, r0, #40	; 0x28
   14c8e:	bf18      	it	ne
   14c90:	4620      	movne	r0, r4
   14c92:	bd38      	pop	{r3, r4, r5, pc}
   14c94:	4815      	ldr	r0, [pc, #84]	; (14cec <bsd_platform_fd_method_table_get+0xd0>)
   14c96:	bd38      	pop	{r3, r4, r5, pc}
   14c98:	f240 2303 	movw	r3, #515	; 0x203
   14c9c:	429a      	cmp	r2, r3
   14c9e:	d0f9      	beq.n	14c94 <bsd_platform_fd_method_table_get+0x78>
   14ca0:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   14ca4:	d0c9      	beq.n	14c3a <bsd_platform_fd_method_table_get+0x1e>
   14ca6:	2016      	movs	r0, #22
   14ca8:	f7fc fe9c 	bl	119e4 <bsd_os_errno_set>
   14cac:	2000      	movs	r0, #0
   14cae:	bd38      	pop	{r3, r4, r5, pc}
   14cb0:	6903      	ldr	r3, [r0, #16]
   14cb2:	480f      	ldr	r0, [pc, #60]	; (14cf0 <bsd_platform_fd_method_table_get+0xd4>)
   14cb4:	2b03      	cmp	r3, #3
   14cb6:	bf18      	it	ne
   14cb8:	2000      	movne	r0, #0
   14cba:	bd38      	pop	{r3, r4, r5, pc}
   14cbc:	480d      	ldr	r0, [pc, #52]	; (14cf4 <bsd_platform_fd_method_table_get+0xd8>)
   14cbe:	bd38      	pop	{r3, r4, r5, pc}
   14cc0:	4809      	ldr	r0, [pc, #36]	; (14ce8 <bsd_platform_fd_method_table_get+0xcc>)
   14cc2:	bd38      	pop	{r3, r4, r5, pc}
   14cc4:	480c      	ldr	r0, [pc, #48]	; (14cf8 <bsd_platform_fd_method_table_get+0xdc>)
   14cc6:	bd38      	pop	{r3, r4, r5, pc}
   14cc8:	2009      	movs	r0, #9
   14cca:	f7fc fe8b 	bl	119e4 <bsd_os_errno_set>
   14cce:	4620      	mov	r0, r4
   14cd0:	bd38      	pop	{r3, r4, r5, pc}
   14cd2:	bf00      	nop
   14cd4:	49765432 	.word	0x49765432
   14cd8:	789a0000 	.word	0x789a0000
   14cdc:	49765443 	.word	0x49765443
   14ce0:	0001f72c 	.word	0x0001f72c
   14ce4:	0001f664 	.word	0x0001f664
   14ce8:	0001f68c 	.word	0x0001f68c
   14cec:	0001f6dc 	.word	0x0001f6dc
   14cf0:	0001f77c 	.word	0x0001f77c
   14cf4:	0001f704 	.word	0x0001f704
   14cf8:	0001f754 	.word	0x0001f754

00014cfc <bsd_platform_getaddrinfo>:
   14cfc:	f003 bb58 	b.w	183b0 <ip_interface_getaddrinfo>

00014d00 <bsd_platform_freeaddrinfo>:
   14d00:	f003 bc4c 	b.w	1859c <ip_interface_freeaddrinfo>

00014d04 <bsd_platform_poll>:
   14d04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14d08:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   14d0c:	b083      	sub	sp, #12
   14d0e:	9200      	str	r2, [sp, #0]
   14d10:	2800      	cmp	r0, #0
   14d12:	d048      	beq.n	14da6 <bsd_platform_poll+0xa2>
   14d14:	1e4b      	subs	r3, r1, #1
   14d16:	2b07      	cmp	r3, #7
   14d18:	d845      	bhi.n	14da6 <bsd_platform_poll+0xa2>
   14d1a:	4680      	mov	r8, r0
   14d1c:	4605      	mov	r5, r0
   14d1e:	2400      	movs	r4, #0
   14d20:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   14d24:	88ab      	ldrh	r3, [r5, #4]
   14d26:	6828      	ldr	r0, [r5, #0]
   14d28:	f003 0303 	and.w	r3, r3, #3
   14d2c:	a901      	add	r1, sp, #4
   14d2e:	f043 061c 	orr.w	r6, r3, #28
   14d32:	f003 ffe3 	bl	18cfc <interface_socket_event_get>
   14d36:	9b01      	ldr	r3, [sp, #4]
   14d38:	3508      	adds	r5, #8
   14d3a:	4033      	ands	r3, r6
   14d3c:	f825 3c02 	strh.w	r3, [r5, #-2]
   14d40:	b103      	cbz	r3, 14d44 <bsd_platform_poll+0x40>
   14d42:	3401      	adds	r4, #1
   14d44:	42af      	cmp	r7, r5
   14d46:	d1ed      	bne.n	14d24 <bsd_platform_poll+0x20>
   14d48:	bb9c      	cbnz	r4, 14db2 <bsd_platform_poll+0xae>
   14d4a:	4669      	mov	r1, sp
   14d4c:	4640      	mov	r0, r8
   14d4e:	f7fc fdb5 	bl	118bc <bsd_os_timedwait>
   14d52:	4607      	mov	r7, r0
   14d54:	b108      	cbz	r0, 14d5a <bsd_platform_poll+0x56>
   14d56:	283c      	cmp	r0, #60	; 0x3c
   14d58:	d11d      	bne.n	14d96 <bsd_platform_poll+0x92>
   14d5a:	46c1      	mov	r9, r8
   14d5c:	2600      	movs	r6, #0
   14d5e:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   14d62:	f8d9 0000 	ldr.w	r0, [r9]
   14d66:	f003 0303 	and.w	r3, r3, #3
   14d6a:	a901      	add	r1, sp, #4
   14d6c:	f043 041c 	orr.w	r4, r3, #28
   14d70:	f003 ffc4 	bl	18cfc <interface_socket_event_get>
   14d74:	9b01      	ldr	r3, [sp, #4]
   14d76:	f109 0908 	add.w	r9, r9, #8
   14d7a:	4023      	ands	r3, r4
   14d7c:	f829 3c02 	strh.w	r3, [r9, #-2]
   14d80:	b103      	cbz	r3, 14d84 <bsd_platform_poll+0x80>
   14d82:	3601      	adds	r6, #1
   14d84:	454d      	cmp	r5, r9
   14d86:	d1ea      	bne.n	14d5e <bsd_platform_poll+0x5a>
   14d88:	b90e      	cbnz	r6, 14d8e <bsd_platform_poll+0x8a>
   14d8a:	2f00      	cmp	r7, #0
   14d8c:	d0dd      	beq.n	14d4a <bsd_platform_poll+0x46>
   14d8e:	4630      	mov	r0, r6
   14d90:	b003      	add	sp, #12
   14d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14d96:	2023      	movs	r0, #35	; 0x23
   14d98:	f7fc fe24 	bl	119e4 <bsd_os_errno_set>
   14d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14da0:	b003      	add	sp, #12
   14da2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14da6:	2016      	movs	r0, #22
   14da8:	f7fc fe1c 	bl	119e4 <bsd_os_errno_set>
   14dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14db0:	e7ee      	b.n	14d90 <bsd_platform_poll+0x8c>
   14db2:	4620      	mov	r0, r4
   14db4:	e7ec      	b.n	14d90 <bsd_platform_poll+0x8c>
   14db6:	bf00      	nop

00014db8 <bsd_platform_fcntl>:
   14db8:	b508      	push	{r3, lr}
   14dba:	4b06      	ldr	r3, [pc, #24]	; (14dd4 <bsd_platform_fcntl+0x1c>)
   14dbc:	4383      	bics	r3, r0
   14dbe:	d003      	beq.n	14dc8 <bsd_platform_fcntl+0x10>
   14dc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14dc4:	f004 b846 	b.w	18e54 <interface_socket_fcntl>
   14dc8:	202d      	movs	r0, #45	; 0x2d
   14dca:	f7fc fe0b 	bl	119e4 <bsd_os_errno_set>
   14dce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14dd2:	bd08      	pop	{r3, pc}
   14dd4:	49765432 	.word	0x49765432

00014dd8 <ipc_trace_init>:
   14dd8:	4b01      	ldr	r3, [pc, #4]	; (14de0 <ipc_trace_init+0x8>)
   14dda:	6018      	str	r0, [r3, #0]
   14ddc:	4770      	bx	lr
   14dde:	bf00      	nop
   14de0:	200207a0 	.word	0x200207a0

00014de4 <bsd_os_trace_irq_handler>:
   14de4:	b5f0      	push	{r4, r5, r6, r7, lr}
   14de6:	4b6c      	ldr	r3, [pc, #432]	; (14f98 <bsd_os_trace_irq_handler+0x1b4>)
   14de8:	b083      	sub	sp, #12
   14dea:	781b      	ldrb	r3, [r3, #0]
   14dec:	2b00      	cmp	r3, #0
   14dee:	f000 80ad 	beq.w	14f4c <bsd_os_trace_irq_handler+0x168>
   14df2:	4b6a      	ldr	r3, [pc, #424]	; (14f9c <bsd_os_trace_irq_handler+0x1b8>)
   14df4:	681c      	ldr	r4, [r3, #0]
   14df6:	68a2      	ldr	r2, [r4, #8]
   14df8:	6863      	ldr	r3, [r4, #4]
   14dfa:	429a      	cmp	r2, r3
   14dfc:	d02d      	beq.n	14e5a <bsd_os_trace_irq_handler+0x76>
   14dfe:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   14e02:	f8ad 3000 	strh.w	r3, [sp]
   14e06:	7823      	ldrb	r3, [r4, #0]
   14e08:	466e      	mov	r6, sp
   14e0a:	f88d 3004 	strb.w	r3, [sp, #4]
   14e0e:	6863      	ldr	r3, [r4, #4]
   14e10:	2105      	movs	r1, #5
   14e12:	429a      	cmp	r2, r3
   14e14:	bf2a      	itet	cs
   14e16:	6927      	ldrcs	r7, [r4, #16]
   14e18:	1a9f      	subcc	r7, r3, r2
   14e1a:	1abf      	subcs	r7, r7, r2
   14e1c:	429a      	cmp	r2, r3
   14e1e:	bf94      	ite	ls
   14e20:	2500      	movls	r5, #0
   14e22:	68e5      	ldrhi	r5, [r4, #12]
   14e24:	b2bf      	uxth	r7, r7
   14e26:	bf88      	it	hi
   14e28:	1b5b      	subhi	r3, r3, r5
   14e2a:	4630      	mov	r0, r6
   14e2c:	bf88      	it	hi
   14e2e:	b29d      	uxthhi	r5, r3
   14e30:	f8ad 7002 	strh.w	r7, [sp, #2]
   14e34:	f7fc fed8 	bl	11be8 <bsd_os_trace_put>
   14e38:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14e3c:	68a0      	ldr	r0, [r4, #8]
   14e3e:	f7fc fed3 	bl	11be8 <bsd_os_trace_put>
   14e42:	68a3      	ldr	r3, [r4, #8]
   14e44:	6922      	ldr	r2, [r4, #16]
   14e46:	441f      	add	r7, r3
   14e48:	4297      	cmp	r7, r2
   14e4a:	bf08      	it	eq
   14e4c:	68e3      	ldreq	r3, [r4, #12]
   14e4e:	60a7      	str	r7, [r4, #8]
   14e50:	bf08      	it	eq
   14e52:	60a3      	streq	r3, [r4, #8]
   14e54:	2d00      	cmp	r5, #0
   14e56:	f040 808d 	bne.w	14f74 <bsd_os_trace_irq_handler+0x190>
   14e5a:	4b51      	ldr	r3, [pc, #324]	; (14fa0 <bsd_os_trace_irq_handler+0x1bc>)
   14e5c:	681c      	ldr	r4, [r3, #0]
   14e5e:	68a2      	ldr	r2, [r4, #8]
   14e60:	6863      	ldr	r3, [r4, #4]
   14e62:	429a      	cmp	r2, r3
   14e64:	d02c      	beq.n	14ec0 <bsd_os_trace_irq_handler+0xdc>
   14e66:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   14e6a:	f8ad 3000 	strh.w	r3, [sp]
   14e6e:	7823      	ldrb	r3, [r4, #0]
   14e70:	466e      	mov	r6, sp
   14e72:	f88d 3004 	strb.w	r3, [sp, #4]
   14e76:	6863      	ldr	r3, [r4, #4]
   14e78:	2105      	movs	r1, #5
   14e7a:	429a      	cmp	r2, r3
   14e7c:	bf2a      	itet	cs
   14e7e:	6927      	ldrcs	r7, [r4, #16]
   14e80:	1a9f      	subcc	r7, r3, r2
   14e82:	1abf      	subcs	r7, r7, r2
   14e84:	429a      	cmp	r2, r3
   14e86:	bf94      	ite	ls
   14e88:	2500      	movls	r5, #0
   14e8a:	68e5      	ldrhi	r5, [r4, #12]
   14e8c:	b2bf      	uxth	r7, r7
   14e8e:	bf88      	it	hi
   14e90:	1b5b      	subhi	r3, r3, r5
   14e92:	4630      	mov	r0, r6
   14e94:	bf88      	it	hi
   14e96:	b29d      	uxthhi	r5, r3
   14e98:	f8ad 7002 	strh.w	r7, [sp, #2]
   14e9c:	f7fc fea4 	bl	11be8 <bsd_os_trace_put>
   14ea0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14ea4:	68a0      	ldr	r0, [r4, #8]
   14ea6:	f7fc fe9f 	bl	11be8 <bsd_os_trace_put>
   14eaa:	68a3      	ldr	r3, [r4, #8]
   14eac:	6922      	ldr	r2, [r4, #16]
   14eae:	441f      	add	r7, r3
   14eb0:	4297      	cmp	r7, r2
   14eb2:	bf08      	it	eq
   14eb4:	68e3      	ldreq	r3, [r4, #12]
   14eb6:	60a7      	str	r7, [r4, #8]
   14eb8:	bf08      	it	eq
   14eba:	60a3      	streq	r3, [r4, #8]
   14ebc:	2d00      	cmp	r5, #0
   14ebe:	d148      	bne.n	14f52 <bsd_os_trace_irq_handler+0x16e>
   14ec0:	4b38      	ldr	r3, [pc, #224]	; (14fa4 <bsd_os_trace_irq_handler+0x1c0>)
   14ec2:	681c      	ldr	r4, [r3, #0]
   14ec4:	68a2      	ldr	r2, [r4, #8]
   14ec6:	6863      	ldr	r3, [r4, #4]
   14ec8:	429a      	cmp	r2, r3
   14eca:	d02b      	beq.n	14f24 <bsd_os_trace_irq_handler+0x140>
   14ecc:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   14ed0:	f8ad 3000 	strh.w	r3, [sp]
   14ed4:	7823      	ldrb	r3, [r4, #0]
   14ed6:	466e      	mov	r6, sp
   14ed8:	f88d 3004 	strb.w	r3, [sp, #4]
   14edc:	6863      	ldr	r3, [r4, #4]
   14ede:	2105      	movs	r1, #5
   14ee0:	429a      	cmp	r2, r3
   14ee2:	bf2a      	itet	cs
   14ee4:	6927      	ldrcs	r7, [r4, #16]
   14ee6:	1a9f      	subcc	r7, r3, r2
   14ee8:	1abf      	subcs	r7, r7, r2
   14eea:	429a      	cmp	r2, r3
   14eec:	bf94      	ite	ls
   14eee:	2500      	movls	r5, #0
   14ef0:	68e5      	ldrhi	r5, [r4, #12]
   14ef2:	b2bf      	uxth	r7, r7
   14ef4:	bf88      	it	hi
   14ef6:	1b5b      	subhi	r3, r3, r5
   14ef8:	4630      	mov	r0, r6
   14efa:	bf88      	it	hi
   14efc:	b29d      	uxthhi	r5, r3
   14efe:	f8ad 7002 	strh.w	r7, [sp, #2]
   14f02:	f7fc fe71 	bl	11be8 <bsd_os_trace_put>
   14f06:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14f0a:	68a0      	ldr	r0, [r4, #8]
   14f0c:	f7fc fe6c 	bl	11be8 <bsd_os_trace_put>
   14f10:	68a3      	ldr	r3, [r4, #8]
   14f12:	6922      	ldr	r2, [r4, #16]
   14f14:	441f      	add	r7, r3
   14f16:	4297      	cmp	r7, r2
   14f18:	bf08      	it	eq
   14f1a:	68e3      	ldreq	r3, [r4, #12]
   14f1c:	60a7      	str	r7, [r4, #8]
   14f1e:	bf08      	it	eq
   14f20:	60a3      	streq	r3, [r4, #8]
   14f22:	b90d      	cbnz	r5, 14f28 <bsd_os_trace_irq_handler+0x144>
   14f24:	b003      	add	sp, #12
   14f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14f28:	4630      	mov	r0, r6
   14f2a:	2105      	movs	r1, #5
   14f2c:	f8ad 5002 	strh.w	r5, [sp, #2]
   14f30:	f7fc fe5a 	bl	11be8 <bsd_os_trace_put>
   14f34:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14f38:	68e0      	ldr	r0, [r4, #12]
   14f3a:	f7fc fe55 	bl	11be8 <bsd_os_trace_put>
   14f3e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14f42:	68e3      	ldr	r3, [r4, #12]
   14f44:	4413      	add	r3, r2
   14f46:	60a3      	str	r3, [r4, #8]
   14f48:	b003      	add	sp, #12
   14f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14f4c:	f7fc fe0e 	bl	11b6c <bsd_os_trace_irq_clear>
   14f50:	e74f      	b.n	14df2 <bsd_os_trace_irq_handler+0xe>
   14f52:	2105      	movs	r1, #5
   14f54:	4630      	mov	r0, r6
   14f56:	f8ad 5002 	strh.w	r5, [sp, #2]
   14f5a:	f7fc fe45 	bl	11be8 <bsd_os_trace_put>
   14f5e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14f62:	68e0      	ldr	r0, [r4, #12]
   14f64:	f7fc fe40 	bl	11be8 <bsd_os_trace_put>
   14f68:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14f6c:	68e3      	ldr	r3, [r4, #12]
   14f6e:	4413      	add	r3, r2
   14f70:	60a3      	str	r3, [r4, #8]
   14f72:	e7a5      	b.n	14ec0 <bsd_os_trace_irq_handler+0xdc>
   14f74:	2105      	movs	r1, #5
   14f76:	4630      	mov	r0, r6
   14f78:	f8ad 5002 	strh.w	r5, [sp, #2]
   14f7c:	f7fc fe34 	bl	11be8 <bsd_os_trace_put>
   14f80:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14f84:	68e0      	ldr	r0, [r4, #12]
   14f86:	f7fc fe2f 	bl	11be8 <bsd_os_trace_put>
   14f8a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14f8e:	68e3      	ldr	r3, [r4, #12]
   14f90:	4413      	add	r3, r2
   14f92:	60a3      	str	r3, [r4, #8]
   14f94:	e761      	b.n	14e5a <bsd_os_trace_irq_handler+0x76>
   14f96:	bf00      	nop
   14f98:	2002658f 	.word	0x2002658f
   14f9c:	2002079c 	.word	0x2002079c
   14fa0:	20020794 	.word	0x20020794
   14fa4:	20020798 	.word	0x20020798

00014fa8 <ipc_trace_handle>:
   14fa8:	2200      	movs	r2, #0
   14faa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fae:	4bb0      	ldr	r3, [pc, #704]	; (15270 <_flash_used+0x5c>)
   14fb0:	b083      	sub	sp, #12
   14fb2:	681b      	ldr	r3, [r3, #0]
   14fb4:	6919      	ldr	r1, [r3, #16]
   14fb6:	695c      	ldr	r4, [r3, #20]
   14fb8:	7c18      	ldrb	r0, [r3, #16]
   14fba:	741a      	strb	r2, [r3, #16]
   14fbc:	7c58      	ldrb	r0, [r3, #17]
   14fbe:	745a      	strb	r2, [r3, #17]
   14fc0:	7c98      	ldrb	r0, [r3, #18]
   14fc2:	749a      	strb	r2, [r3, #18]
   14fc4:	7cd8      	ldrb	r0, [r3, #19]
   14fc6:	74da      	strb	r2, [r3, #19]
   14fc8:	7d18      	ldrb	r0, [r3, #20]
   14fca:	751a      	strb	r2, [r3, #20]
   14fcc:	7d58      	ldrb	r0, [r3, #21]
   14fce:	755a      	strb	r2, [r3, #21]
   14fd0:	7d98      	ldrb	r0, [r3, #22]
   14fd2:	759a      	strb	r2, [r3, #22]
   14fd4:	7dd8      	ldrb	r0, [r3, #23]
   14fd6:	75da      	strb	r2, [r3, #23]
   14fd8:	b1b9      	cbz	r1, 1500a <ipc_trace_handle+0x62>
   14fda:	3901      	subs	r1, #1
   14fdc:	2903      	cmp	r1, #3
   14fde:	d814      	bhi.n	1500a <ipc_trace_handle+0x62>
   14fe0:	e8df f011 	tbh	[pc, r1, lsl #1]
   14fe4:	010300d6 	.word	0x010300d6
   14fe8:	00160004 	.word	0x00160004
   14fec:	2501      	movs	r5, #1
   14fee:	2003      	movs	r0, #3
   14ff0:	2200      	movs	r2, #0
   14ff2:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   14ff6:	4c9f      	ldr	r4, [pc, #636]	; (15274 <_flash_used+0x60>)
   14ff8:	7025      	strb	r5, [r4, #0]
   14ffa:	7a1c      	ldrb	r4, [r3, #8]
   14ffc:	7218      	strb	r0, [r3, #8]
   14ffe:	7a58      	ldrb	r0, [r3, #9]
   15000:	725a      	strb	r2, [r3, #9]
   15002:	7a98      	ldrb	r0, [r3, #10]
   15004:	729a      	strb	r2, [r3, #10]
   15006:	7ada      	ldrb	r2, [r3, #11]
   15008:	72d9      	strb	r1, [r3, #11]
   1500a:	b003      	add	sp, #12
   1500c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15010:	2104      	movs	r1, #4
   15012:	2200      	movs	r2, #0
   15014:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   15018:	7a1c      	ldrb	r4, [r3, #8]
   1501a:	7219      	strb	r1, [r3, #8]
   1501c:	7a59      	ldrb	r1, [r3, #9]
   1501e:	725a      	strb	r2, [r3, #9]
   15020:	4994      	ldr	r1, [pc, #592]	; (15274 <_flash_used+0x60>)
   15022:	7a9c      	ldrb	r4, [r3, #10]
   15024:	729a      	strb	r2, [r3, #10]
   15026:	7adc      	ldrb	r4, [r3, #11]
   15028:	72d8      	strb	r0, [r3, #11]
   1502a:	700a      	strb	r2, [r1, #0]
   1502c:	780b      	ldrb	r3, [r1, #0]
   1502e:	2b00      	cmp	r3, #0
   15030:	f000 8117 	beq.w	15262 <_flash_used+0x4e>
   15034:	4b90      	ldr	r3, [pc, #576]	; (15278 <_flash_used+0x64>)
   15036:	681c      	ldr	r4, [r3, #0]
   15038:	68a2      	ldr	r2, [r4, #8]
   1503a:	6863      	ldr	r3, [r4, #4]
   1503c:	429a      	cmp	r2, r3
   1503e:	d02d      	beq.n	1509c <ipc_trace_handle+0xf4>
   15040:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   15044:	f8ad 3000 	strh.w	r3, [sp]
   15048:	7823      	ldrb	r3, [r4, #0]
   1504a:	466e      	mov	r6, sp
   1504c:	f88d 3004 	strb.w	r3, [sp, #4]
   15050:	6863      	ldr	r3, [r4, #4]
   15052:	2105      	movs	r1, #5
   15054:	429a      	cmp	r2, r3
   15056:	bf2a      	itet	cs
   15058:	6927      	ldrcs	r7, [r4, #16]
   1505a:	1a9f      	subcc	r7, r3, r2
   1505c:	1abf      	subcs	r7, r7, r2
   1505e:	429a      	cmp	r2, r3
   15060:	bf94      	ite	ls
   15062:	2500      	movls	r5, #0
   15064:	68e5      	ldrhi	r5, [r4, #12]
   15066:	b2bf      	uxth	r7, r7
   15068:	bf88      	it	hi
   1506a:	1b5b      	subhi	r3, r3, r5
   1506c:	4630      	mov	r0, r6
   1506e:	bf88      	it	hi
   15070:	b29d      	uxthhi	r5, r3
   15072:	f8ad 7002 	strh.w	r7, [sp, #2]
   15076:	f7fc fdb7 	bl	11be8 <bsd_os_trace_put>
   1507a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1507e:	68a0      	ldr	r0, [r4, #8]
   15080:	f7fc fdb2 	bl	11be8 <bsd_os_trace_put>
   15084:	68a3      	ldr	r3, [r4, #8]
   15086:	6922      	ldr	r2, [r4, #16]
   15088:	441f      	add	r7, r3
   1508a:	4297      	cmp	r7, r2
   1508c:	bf08      	it	eq
   1508e:	68e3      	ldreq	r3, [r4, #12]
   15090:	60a7      	str	r7, [r4, #8]
   15092:	bf08      	it	eq
   15094:	60a3      	streq	r3, [r4, #8]
   15096:	2d00      	cmp	r5, #0
   15098:	f040 80d2 	bne.w	15240 <_flash_used+0x2c>
   1509c:	4b77      	ldr	r3, [pc, #476]	; (1527c <_flash_used+0x68>)
   1509e:	681c      	ldr	r4, [r3, #0]
   150a0:	68a2      	ldr	r2, [r4, #8]
   150a2:	6863      	ldr	r3, [r4, #4]
   150a4:	429a      	cmp	r2, r3
   150a6:	d02d      	beq.n	15104 <ipc_trace_handle+0x15c>
   150a8:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   150ac:	f8ad 3000 	strh.w	r3, [sp]
   150b0:	7823      	ldrb	r3, [r4, #0]
   150b2:	466e      	mov	r6, sp
   150b4:	f88d 3004 	strb.w	r3, [sp, #4]
   150b8:	6863      	ldr	r3, [r4, #4]
   150ba:	2105      	movs	r1, #5
   150bc:	429a      	cmp	r2, r3
   150be:	bf2a      	itet	cs
   150c0:	6927      	ldrcs	r7, [r4, #16]
   150c2:	1a9f      	subcc	r7, r3, r2
   150c4:	1abf      	subcs	r7, r7, r2
   150c6:	429a      	cmp	r2, r3
   150c8:	bf94      	ite	ls
   150ca:	2500      	movls	r5, #0
   150cc:	68e5      	ldrhi	r5, [r4, #12]
   150ce:	b2bf      	uxth	r7, r7
   150d0:	bf88      	it	hi
   150d2:	1b5b      	subhi	r3, r3, r5
   150d4:	4630      	mov	r0, r6
   150d6:	bf88      	it	hi
   150d8:	b29d      	uxthhi	r5, r3
   150da:	f8ad 7002 	strh.w	r7, [sp, #2]
   150de:	f7fc fd83 	bl	11be8 <bsd_os_trace_put>
   150e2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   150e6:	68a0      	ldr	r0, [r4, #8]
   150e8:	f7fc fd7e 	bl	11be8 <bsd_os_trace_put>
   150ec:	68a3      	ldr	r3, [r4, #8]
   150ee:	6922      	ldr	r2, [r4, #16]
   150f0:	441f      	add	r7, r3
   150f2:	4297      	cmp	r7, r2
   150f4:	bf08      	it	eq
   150f6:	68e3      	ldreq	r3, [r4, #12]
   150f8:	60a7      	str	r7, [r4, #8]
   150fa:	bf08      	it	eq
   150fc:	60a3      	streq	r3, [r4, #8]
   150fe:	2d00      	cmp	r5, #0
   15100:	f040 808d 	bne.w	1521e <_flash_used+0xa>
   15104:	4b5e      	ldr	r3, [pc, #376]	; (15280 <_flash_used+0x6c>)
   15106:	681c      	ldr	r4, [r3, #0]
   15108:	68a2      	ldr	r2, [r4, #8]
   1510a:	6863      	ldr	r3, [r4, #4]
   1510c:	429a      	cmp	r2, r3
   1510e:	f43f af7c 	beq.w	1500a <ipc_trace_handle+0x62>
   15112:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   15116:	f8ad 3000 	strh.w	r3, [sp]
   1511a:	7823      	ldrb	r3, [r4, #0]
   1511c:	466e      	mov	r6, sp
   1511e:	f88d 3004 	strb.w	r3, [sp, #4]
   15122:	6863      	ldr	r3, [r4, #4]
   15124:	2105      	movs	r1, #5
   15126:	429a      	cmp	r2, r3
   15128:	bf2a      	itet	cs
   1512a:	6927      	ldrcs	r7, [r4, #16]
   1512c:	1a9f      	subcc	r7, r3, r2
   1512e:	1abf      	subcs	r7, r7, r2
   15130:	429a      	cmp	r2, r3
   15132:	bf94      	ite	ls
   15134:	2500      	movls	r5, #0
   15136:	68e5      	ldrhi	r5, [r4, #12]
   15138:	b2bf      	uxth	r7, r7
   1513a:	bf88      	it	hi
   1513c:	1b5b      	subhi	r3, r3, r5
   1513e:	4630      	mov	r0, r6
   15140:	bf88      	it	hi
   15142:	b29d      	uxthhi	r5, r3
   15144:	f8ad 7002 	strh.w	r7, [sp, #2]
   15148:	f7fc fd4e 	bl	11be8 <bsd_os_trace_put>
   1514c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   15150:	68a0      	ldr	r0, [r4, #8]
   15152:	f7fc fd49 	bl	11be8 <bsd_os_trace_put>
   15156:	68a3      	ldr	r3, [r4, #8]
   15158:	6922      	ldr	r2, [r4, #16]
   1515a:	441f      	add	r7, r3
   1515c:	4297      	cmp	r7, r2
   1515e:	bf08      	it	eq
   15160:	68e3      	ldreq	r3, [r4, #12]
   15162:	60a7      	str	r7, [r4, #8]
   15164:	bf08      	it	eq
   15166:	60a3      	streq	r3, [r4, #8]
   15168:	2d00      	cmp	r5, #0
   1516a:	f43f af4e 	beq.w	1500a <ipc_trace_handle+0x62>
   1516e:	2105      	movs	r1, #5
   15170:	4630      	mov	r0, r6
   15172:	f8ad 5002 	strh.w	r5, [sp, #2]
   15176:	f7fc fd37 	bl	11be8 <bsd_os_trace_put>
   1517a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1517e:	68e0      	ldr	r0, [r4, #12]
   15180:	f7fc fd32 	bl	11be8 <bsd_os_trace_put>
   15184:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   15188:	68e3      	ldr	r3, [r4, #12]
   1518a:	4413      	add	r3, r2
   1518c:	60a3      	str	r3, [r4, #8]
   1518e:	e73c      	b.n	1500a <ipc_trace_handle+0x62>
   15190:	4a38      	ldr	r2, [pc, #224]	; (15274 <_flash_used+0x60>)
   15192:	7811      	ldrb	r1, [r2, #0]
   15194:	b109      	cbz	r1, 1519a <ipc_trace_handle+0x1f2>
   15196:	2100      	movs	r1, #0
   15198:	7011      	strb	r1, [r2, #0]
   1519a:	68a5      	ldr	r5, [r4, #8]
   1519c:	2d00      	cmp	r5, #0
   1519e:	d039      	beq.n	15214 <_flash_used>
   151a0:	f04f 0c00 	mov.w	ip, #0
   151a4:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 1527c <_flash_used+0x68>
   151a8:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 15278 <_flash_used+0x64>
   151ac:	4934      	ldr	r1, [pc, #208]	; (15280 <_flash_used+0x6c>)
   151ae:	46e1      	mov	r9, ip
   151b0:	4666      	mov	r6, ip
   151b2:	4662      	mov	r2, ip
   151b4:	f8d1 e000 	ldr.w	lr, [r1]
   151b8:	f8da 8000 	ldr.w	r8, [sl]
   151bc:	f8db 7000 	ldr.w	r7, [fp]
   151c0:	e008      	b.n	151d4 <ipc_trace_handle+0x22c>
   151c2:	2963      	cmp	r1, #99	; 0x63
   151c4:	d016      	beq.n	151f4 <ipc_trace_handle+0x24c>
   151c6:	2961      	cmp	r1, #97	; 0x61
   151c8:	bf04      	itt	eq
   151ca:	4607      	moveq	r7, r0
   151cc:	2601      	moveq	r6, #1
   151ce:	3201      	adds	r2, #1
   151d0:	42aa      	cmp	r2, r5
   151d2:	d013      	beq.n	151fc <ipc_trace_handle+0x254>
   151d4:	1c91      	adds	r1, r2, #2
   151d6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   151da:	6848      	ldr	r0, [r1, #4]
   151dc:	7801      	ldrb	r1, [r0, #0]
   151de:	2962      	cmp	r1, #98	; 0x62
   151e0:	d1ef      	bne.n	151c2 <ipc_trace_handle+0x21a>
   151e2:	4680      	mov	r8, r0
   151e4:	f04f 0901 	mov.w	r9, #1
   151e8:	e7f1      	b.n	151ce <ipc_trace_handle+0x226>
   151ea:	f7fc fcb7 	bl	11b5c <bsd_os_trace_irq_set>
   151ee:	b003      	add	sp, #12
   151f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151f4:	4686      	mov	lr, r0
   151f6:	f04f 0c01 	mov.w	ip, #1
   151fa:	e7e8      	b.n	151ce <ipc_trace_handle+0x226>
   151fc:	bba6      	cbnz	r6, 15268 <_flash_used+0x54>
   151fe:	f1b9 0f00 	cmp.w	r9, #0
   15202:	d001      	beq.n	15208 <ipc_trace_handle+0x260>
   15204:	f8ca 8000 	str.w	r8, [sl]
   15208:	f1bc 0f00 	cmp.w	ip, #0
   1520c:	d002      	beq.n	15214 <_flash_used>
   1520e:	4a1c      	ldr	r2, [pc, #112]	; (15280 <_flash_used+0x6c>)
   15210:	f8c2 e000 	str.w	lr, [r2]
   15214:	2001      	movs	r0, #1
   15216:	2200      	movs	r2, #0
   15218:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   1521c:	e6ed      	b.n	14ffa <ipc_trace_handle+0x52>
   1521e:	2105      	movs	r1, #5
   15220:	4630      	mov	r0, r6
   15222:	f8ad 5002 	strh.w	r5, [sp, #2]
   15226:	f7fc fcdf 	bl	11be8 <bsd_os_trace_put>
   1522a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1522e:	68e0      	ldr	r0, [r4, #12]
   15230:	f7fc fcda 	bl	11be8 <bsd_os_trace_put>
   15234:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   15238:	68e3      	ldr	r3, [r4, #12]
   1523a:	4413      	add	r3, r2
   1523c:	60a3      	str	r3, [r4, #8]
   1523e:	e761      	b.n	15104 <ipc_trace_handle+0x15c>
   15240:	2105      	movs	r1, #5
   15242:	4630      	mov	r0, r6
   15244:	f8ad 5002 	strh.w	r5, [sp, #2]
   15248:	f7fc fcce 	bl	11be8 <bsd_os_trace_put>
   1524c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   15250:	68e0      	ldr	r0, [r4, #12]
   15252:	f7fc fcc9 	bl	11be8 <bsd_os_trace_put>
   15256:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1525a:	68e3      	ldr	r3, [r4, #12]
   1525c:	4413      	add	r3, r2
   1525e:	60a3      	str	r3, [r4, #8]
   15260:	e71c      	b.n	1509c <ipc_trace_handle+0xf4>
   15262:	f7fc fc83 	bl	11b6c <bsd_os_trace_irq_clear>
   15266:	e6e5      	b.n	15034 <ipc_trace_handle+0x8c>
   15268:	f8cb 7000 	str.w	r7, [fp]
   1526c:	e7c7      	b.n	151fe <ipc_trace_handle+0x256>
   1526e:	bf00      	nop
   15270:	200207a0 	.word	0x200207a0
   15274:	2002658f 	.word	0x2002658f
   15278:	2002079c 	.word	0x2002079c
   1527c:	20020794 	.word	0x20020794
   15280:	20020798 	.word	0x20020798

00015284 <rpc_trace_coredump_in_progress>:
   15284:	4b01      	ldr	r3, [pc, #4]	; (1528c <rpc_trace_coredump_in_progress+0x8>)
   15286:	7818      	ldrb	r0, [r3, #0]
   15288:	4770      	bx	lr
   1528a:	bf00      	nop
   1528c:	2002658f 	.word	0x2002658f

00015290 <transport_reset>:
   15290:	2000      	movs	r0, #0
   15292:	4770      	bx	lr

00015294 <transport_data_free>:
   15294:	4b0b      	ldr	r3, [pc, #44]	; (152c4 <transport_data_free+0x30>)
   15296:	e9d3 2300 	ldrd	r2, r3, [r3]
   1529a:	4413      	add	r3, r2
   1529c:	4298      	cmp	r0, r3
   1529e:	d20d      	bcs.n	152bc <transport_data_free+0x28>
   152a0:	4282      	cmp	r2, r0
   152a2:	d80b      	bhi.n	152bc <transport_data_free+0x28>
   152a4:	b510      	push	{r4, lr}
   152a6:	4604      	mov	r4, r0
   152a8:	f000 fdfc 	bl	15ea4 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   152ac:	b140      	cbz	r0, 152c0 <transport_data_free+0x2c>
   152ae:	4a06      	ldr	r2, [pc, #24]	; (152c8 <transport_data_free+0x34>)
   152b0:	6084      	str	r4, [r0, #8]
   152b2:	6002      	str	r2, [r0, #0]
   152b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   152b8:	f000 bd3c 	b.w	15d34 <rpc_transport_ipc_tx_send>
   152bc:	f7fe bc58 	b.w	13b70 <nrf_shared_free>
   152c0:	bd10      	pop	{r4, pc}
   152c2:	bf00      	nop
   152c4:	200207a4 	.word	0x200207a4
   152c8:	00020001 	.word	0x00020001

000152cc <rpc_transport_ipc_init>:
   152cc:	2800      	cmp	r0, #0
   152ce:	d02b      	beq.n	15328 <rpc_transport_ipc_init+0x5c>
   152d0:	b530      	push	{r4, r5, lr}
   152d2:	b089      	sub	sp, #36	; 0x24
   152d4:	aa01      	add	r2, sp, #4
   152d6:	4669      	mov	r1, sp
   152d8:	4604      	mov	r4, r0
   152da:	f000 fc41 	bl	15b60 <rpc_transport_ipc_tx_init>
   152de:	4603      	mov	r3, r0
   152e0:	b140      	cbz	r0, 152f4 <rpc_transport_ipc_init+0x28>
   152e2:	4a13      	ldr	r2, [pc, #76]	; (15330 <rpc_transport_ipc_init+0x64>)
   152e4:	f104 0028 	add.w	r0, r4, #40	; 0x28
   152e8:	c803      	ldmia	r0, {r0, r1}
   152ea:	e882 0003 	stmia.w	r2, {r0, r1}
   152ee:	4618      	mov	r0, r3
   152f0:	b009      	add	sp, #36	; 0x24
   152f2:	bd30      	pop	{r4, r5, pc}
   152f4:	e9dd 1200 	ldrd	r1, r2, [sp]
   152f8:	4620      	mov	r0, r4
   152fa:	f000 f857 	bl	153ac <rpc_transport_ipc_rx_init>
   152fe:	4603      	mov	r3, r0
   15300:	2800      	cmp	r0, #0
   15302:	d1ee      	bne.n	152e2 <rpc_transport_ipc_init+0x16>
   15304:	4b0b      	ldr	r3, [pc, #44]	; (15334 <rpc_transport_ipc_init+0x68>)
   15306:	490c      	ldr	r1, [pc, #48]	; (15338 <rpc_transport_ipc_init+0x6c>)
   15308:	480c      	ldr	r0, [pc, #48]	; (1533c <rpc_transport_ipc_init+0x70>)
   1530a:	4a0d      	ldr	r2, [pc, #52]	; (15340 <rpc_transport_ipc_init+0x74>)
   1530c:	9303      	str	r3, [sp, #12]
   1530e:	4d0d      	ldr	r5, [pc, #52]	; (15344 <rpc_transport_ipc_init+0x78>)
   15310:	4b0d      	ldr	r3, [pc, #52]	; (15348 <rpc_transport_ipc_init+0x7c>)
   15312:	9104      	str	r1, [sp, #16]
   15314:	9005      	str	r0, [sp, #20]
   15316:	490d      	ldr	r1, [pc, #52]	; (1534c <rpc_transport_ipc_init+0x80>)
   15318:	a802      	add	r0, sp, #8
   1531a:	9307      	str	r3, [sp, #28]
   1531c:	9506      	str	r5, [sp, #24]
   1531e:	9202      	str	r2, [sp, #8]
   15320:	f003 ffb4 	bl	1928c <rpc_transport_register>
   15324:	4603      	mov	r3, r0
   15326:	e7dc      	b.n	152e2 <rpc_transport_ipc_init+0x16>
   15328:	230e      	movs	r3, #14
   1532a:	4618      	mov	r0, r3
   1532c:	4770      	bx	lr
   1532e:	bf00      	nop
   15330:	200207a4 	.word	0x200207a4
   15334:	00015e35 	.word	0x00015e35
   15338:	00015f05 	.word	0x00015f05
   1533c:	000159c9 	.word	0x000159c9
   15340:	00015d35 	.word	0x00015d35
   15344:	00015295 	.word	0x00015295
   15348:	00015291 	.word	0x00015291
   1534c:	200207ac 	.word	0x200207ac

00015350 <rpc_transport_rx_handle>:
   15350:	b160      	cbz	r0, 1536c <rpc_transport_rx_handle+0x1c>
   15352:	b508      	push	{r3, lr}
   15354:	6843      	ldr	r3, [r0, #4]
   15356:	b2db      	uxtb	r3, r3
   15358:	2b02      	cmp	r3, #2
   1535a:	d00e      	beq.n	1537a <rpc_transport_rx_handle+0x2a>
   1535c:	6803      	ldr	r3, [r0, #0]
   1535e:	0c1b      	lsrs	r3, r3, #16
   15360:	2b02      	cmp	r3, #2
   15362:	d005      	beq.n	15370 <rpc_transport_rx_handle+0x20>
   15364:	2b04      	cmp	r3, #4
   15366:	d00e      	beq.n	15386 <rpc_transport_rx_handle+0x36>
   15368:	2000      	movs	r0, #0
   1536a:	bd08      	pop	{r3, pc}
   1536c:	2000      	movs	r0, #0
   1536e:	4770      	bx	lr
   15370:	6880      	ldr	r0, [r0, #8]
   15372:	f7fe fbfd 	bl	13b70 <nrf_shared_free>
   15376:	2000      	movs	r0, #0
   15378:	bd08      	pop	{r3, pc}
   1537a:	4601      	mov	r1, r0
   1537c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   15380:	4803      	ldr	r0, [pc, #12]	; (15390 <rpc_transport_rx_handle+0x40>)
   15382:	f003 be75 	b.w	19070 <rpc_transport_input>
   15386:	4802      	ldr	r0, [pc, #8]	; (15390 <rpc_transport_rx_handle+0x40>)
   15388:	f003 ffe0 	bl	1934c <rpc_transport_unregister>
   1538c:	2000      	movs	r0, #0
   1538e:	bd08      	pop	{r3, pc}
   15390:	200207ac 	.word	0x200207ac

00015394 <rpc_transport_ipc_shutdown>:
   15394:	b508      	push	{r3, lr}
   15396:	f000 fdbf 	bl	15f18 <rpc_transport_ipc_tx_suspend>
   1539a:	f000 fb4b 	bl	15a34 <rpc_transport_ipc_rx_suspend>
   1539e:	f000 fdc1 	bl	15f24 <rpc_transport_ipc_tx_shutdown>
   153a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   153a6:	f000 bb65 	b.w	15a74 <rpc_transport_ipc_rx_shutdown>
   153aa:	bf00      	nop

000153ac <rpc_transport_ipc_rx_init>:
   153ac:	2800      	cmp	r0, #0
   153ae:	f000 80ff 	beq.w	155b0 <rpc_transport_ipc_rx_init+0x204>
   153b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153b6:	6805      	ldr	r5, [r0, #0]
   153b8:	b095      	sub	sp, #84	; 0x54
   153ba:	2d00      	cmp	r5, #0
   153bc:	f000 80ee 	beq.w	1559c <rpc_transport_ipc_rx_init+0x1f0>
   153c0:	6883      	ldr	r3, [r0, #8]
   153c2:	2b00      	cmp	r3, #0
   153c4:	f000 80ea 	beq.w	1559c <rpc_transport_ipc_rx_init+0x1f0>
   153c8:	6907      	ldr	r7, [r0, #16]
   153ca:	2f00      	cmp	r7, #0
   153cc:	f000 80e6 	beq.w	1559c <rpc_transport_ipc_rx_init+0x1f0>
   153d0:	6a84      	ldr	r4, [r0, #40]	; 0x28
   153d2:	2c00      	cmp	r4, #0
   153d4:	f000 80e2 	beq.w	1559c <rpc_transport_ipc_rx_init+0x1f0>
   153d8:	6844      	ldr	r4, [r0, #4]
   153da:	2c1b      	cmp	r4, #27
   153dc:	f240 80e3 	bls.w	155a6 <rpc_transport_ipc_rx_init+0x1fa>
   153e0:	68c4      	ldr	r4, [r0, #12]
   153e2:	2c0b      	cmp	r4, #11
   153e4:	f240 80df 	bls.w	155a6 <rpc_transport_ipc_rx_init+0x1fa>
   153e8:	f8d0 e014 	ldr.w	lr, [r0, #20]
   153ec:	f1be 0f17 	cmp.w	lr, #23
   153f0:	f240 80d9 	bls.w	155a6 <rpc_transport_ipc_rx_init+0x1fa>
   153f4:	2600      	movs	r6, #0
   153f6:	4604      	mov	r4, r0
   153f8:	486f      	ldr	r0, [pc, #444]	; (155b8 <rpc_transport_ipc_rx_init+0x20c>)
   153fa:	e9cd 1200 	strd	r1, r2, [sp]
   153fe:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 155d8 <rpc_transport_ipc_rx_init+0x22c>
   15402:	496e      	ldr	r1, [pc, #440]	; (155bc <rpc_transport_ipc_rx_init+0x210>)
   15404:	8006      	strh	r6, [r0, #0]
   15406:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   15408:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 155dc <rpc_transport_ipc_rx_init+0x230>
   1540c:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 155e0 <rpc_transport_ipc_rx_init+0x234>
   15410:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 155e4 <rpc_transport_ipc_rx_init+0x238>
   15414:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 155e8 <rpc_transport_ipc_rx_init+0x23c>
   15418:	4672      	mov	r2, lr
   1541a:	600e      	str	r6, [r1, #0]
   1541c:	f8ca 0000 	str.w	r0, [sl]
   15420:	4631      	mov	r1, r6
   15422:	4638      	mov	r0, r7
   15424:	f8cc 6000 	str.w	r6, [ip]
   15428:	f8cb 3000 	str.w	r3, [fp]
   1542c:	f8c8 6000 	str.w	r6, [r8]
   15430:	f8c9 6000 	str.w	r6, [r9]
   15434:	f008 f949 	bl	1d6ca <memset>
   15438:	69e3      	ldr	r3, [r4, #28]
   1543a:	4638      	mov	r0, r7
   1543c:	603b      	str	r3, [r7, #0]
   1543e:	69a3      	ldr	r3, [r4, #24]
   15440:	607b      	str	r3, [r7, #4]
   15442:	f7ff fcc9 	bl	14dd8 <ipc_trace_init>
   15446:	2201      	movs	r2, #1
   15448:	f04f 0c04 	mov.w	ip, #4
   1544c:	4b5c      	ldr	r3, [pc, #368]	; (155c0 <rpc_transport_ipc_rx_init+0x214>)
   1544e:	495d      	ldr	r1, [pc, #372]	; (155c4 <rpc_transport_ipc_rx_init+0x218>)
   15450:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   15454:	6809      	ldr	r1, [r1, #0]
   15456:	2080      	movs	r0, #128	; 0x80
   15458:	9104      	str	r1, [sp, #16]
   1545a:	495b      	ldr	r1, [pc, #364]	; (155c8 <rpc_transport_ipc_rx_init+0x21c>)
   1545c:	f8dd e010 	ldr.w	lr, [sp, #16]
   15460:	f8c3 6614 	str.w	r6, [r3, #1556]	; 0x614
   15464:	6809      	ldr	r1, [r1, #0]
   15466:	702e      	strb	r6, [r5, #0]
   15468:	9103      	str	r1, [sp, #12]
   1546a:	706e      	strb	r6, [r5, #1]
   1546c:	70ee      	strb	r6, [r5, #3]
   1546e:	70aa      	strb	r2, [r5, #2]
   15470:	9903      	ldr	r1, [sp, #12]
   15472:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   15474:	f8db e000 	ldr.w	lr, [fp]
   15478:	6069      	str	r1, [r5, #4]
   1547a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1547c:	9c01      	ldr	r4, [sp, #4]
   1547e:	60a9      	str	r1, [r5, #8]
   15480:	60ec      	str	r4, [r5, #12]
   15482:	9c00      	ldr	r4, [sp, #0]
   15484:	4951      	ldr	r1, [pc, #324]	; (155cc <rpc_transport_ipc_rx_init+0x220>)
   15486:	61af      	str	r7, [r5, #24]
   15488:	f8c5 e014 	str.w	lr, [r5, #20]
   1548c:	612c      	str	r4, [r5, #16]
   1548e:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   15492:	680c      	ldr	r4, [r1, #0]
   15494:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   15498:	9405      	str	r4, [sp, #20]
   1549a:	9c05      	ldr	r4, [sp, #20]
   1549c:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   154a0:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   154a4:	f44f 6780 	mov.w	r7, #1024	; 0x400
   154a8:	9406      	str	r4, [sp, #24]
   154aa:	9c06      	ldr	r4, [sp, #24]
   154ac:	2410      	movs	r4, #16
   154ae:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   154b2:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   154b6:	4d46      	ldr	r5, [pc, #280]	; (155d0 <rpc_transport_ipc_rx_init+0x224>)
   154b8:	9407      	str	r4, [sp, #28]
   154ba:	9c07      	ldr	r4, [sp, #28]
   154bc:	2440      	movs	r4, #64	; 0x40
   154be:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   154c2:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   154c6:	9408      	str	r4, [sp, #32]
   154c8:	9c08      	ldr	r4, [sp, #32]
   154ca:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   154ce:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   154d2:	9009      	str	r0, [sp, #36]	; 0x24
   154d4:	9809      	ldr	r0, [sp, #36]	; 0x24
   154d6:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
   154da:	6808      	ldr	r0, [r1, #0]
   154dc:	900a      	str	r0, [sp, #40]	; 0x28
   154de:	980a      	ldr	r0, [sp, #40]	; 0x28
   154e0:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
   154e4:	6888      	ldr	r0, [r1, #8]
   154e6:	900b      	str	r0, [sp, #44]	; 0x2c
   154e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   154ea:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
   154ee:	6908      	ldr	r0, [r1, #16]
   154f0:	900c      	str	r0, [sp, #48]	; 0x30
   154f2:	980c      	ldr	r0, [sp, #48]	; 0x30
   154f4:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
   154f8:	6988      	ldr	r0, [r1, #24]
   154fa:	900d      	str	r0, [sp, #52]	; 0x34
   154fc:	980d      	ldr	r0, [sp, #52]	; 0x34
   154fe:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
   15502:	69c8      	ldr	r0, [r1, #28]
   15504:	f501 7101 	add.w	r1, r1, #516	; 0x204
   15508:	900e      	str	r0, [sp, #56]	; 0x38
   1550a:	980e      	ldr	r0, [sp, #56]	; 0x38
   1550c:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   15510:	4310      	orrs	r0, r2
   15512:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   15516:	680c      	ldr	r4, [r1, #0]
   15518:	482e      	ldr	r0, [pc, #184]	; (155d4 <rpc_transport_ipc_rx_init+0x228>)
   1551a:	940f      	str	r4, [sp, #60]	; 0x3c
   1551c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1551e:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   15522:	ea44 040c 	orr.w	r4, r4, ip
   15526:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1552a:	680c      	ldr	r4, [r1, #0]
   1552c:	9410      	str	r4, [sp, #64]	; 0x40
   1552e:	9c10      	ldr	r4, [sp, #64]	; 0x40
   15530:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   15534:	f044 0410 	orr.w	r4, r4, #16
   15538:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1553c:	680c      	ldr	r4, [r1, #0]
   1553e:	9411      	str	r4, [sp, #68]	; 0x44
   15540:	9c11      	ldr	r4, [sp, #68]	; 0x44
   15542:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   15546:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   1554a:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1554e:	680c      	ldr	r4, [r1, #0]
   15550:	9412      	str	r4, [sp, #72]	; 0x48
   15552:	9c12      	ldr	r4, [sp, #72]	; 0x48
   15554:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   15558:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   1555c:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   15560:	f8da 3000 	ldr.w	r3, [sl]
   15564:	6809      	ldr	r1, [r1, #0]
   15566:	015b      	lsls	r3, r3, #5
   15568:	9113      	str	r1, [sp, #76]	; 0x4c
   1556a:	b2db      	uxtb	r3, r3
   1556c:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1556e:	f8c8 2000 	str.w	r2, [r8]
   15572:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   15576:	f8c0 7184 	str.w	r7, [r0, #388]	; 0x184
   1557a:	6047      	str	r7, [r0, #4]
   1557c:	9602      	str	r6, [sp, #8]
   1557e:	f8c5 6610 	str.w	r6, [r5, #1552]	; 0x610
   15582:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   15586:	9302      	str	r3, [sp, #8]
   15588:	9b02      	ldr	r3, [sp, #8]
   1558a:	f8d8 3000 	ldr.w	r3, [r8]
   1558e:	2b01      	cmp	r3, #1
   15590:	d0fb      	beq.n	1558a <rpc_transport_ipc_rx_init+0x1de>
   15592:	f8d9 0000 	ldr.w	r0, [r9]
   15596:	b015      	add	sp, #84	; 0x54
   15598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1559c:	f24c 000e 	movw	r0, #49166	; 0xc00e
   155a0:	b015      	add	sp, #84	; 0x54
   155a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155a6:	f24c 0009 	movw	r0, #49161	; 0xc009
   155aa:	b015      	add	sp, #84	; 0x54
   155ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155b0:	f24c 000e 	movw	r0, #49166	; 0xc00e
   155b4:	4770      	bx	lr
   155b6:	bf00      	nop
   155b8:	20024e46 	.word	0x20024e46
   155bc:	200207bc 	.word	0x200207bc
   155c0:	4002a000 	.word	0x4002a000
   155c4:	4002a610 	.word	0x4002a610
   155c8:	4002a614 	.word	0x4002a614
   155cc:	4002a590 	.word	0x4002a590
   155d0:	40005000 	.word	0x40005000
   155d4:	e000e100 	.word	0xe000e100
   155d8:	200207b4 	.word	0x200207b4
   155dc:	200207c0 	.word	0x200207c0
   155e0:	200207b8 	.word	0x200207b8
   155e4:	200207c4 	.word	0x200207c4
   155e8:	200207b0 	.word	0x200207b0

000155ec <IPC_IRQHandler>:
   155ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155f0:	f44f 6580 	mov.w	r5, #1024	; 0x400
   155f4:	4ca7      	ldr	r4, [pc, #668]	; (15894 <IPC_IRQHandler+0x2a8>)
   155f6:	b087      	sub	sp, #28
   155f8:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   155fc:	f3bf 8f4f 	dsb	sy
   15600:	f3bf 8f6f 	isb	sy
   15604:	4ea4      	ldr	r6, [pc, #656]	; (15898 <IPC_IRQHandler+0x2ac>)
   15606:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
   1560a:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   1560e:	061f      	lsls	r7, r3, #24
   15610:	f100 80c8 	bmi.w	157a4 <IPC_IRQHandler+0x1b8>
   15614:	4ba0      	ldr	r3, [pc, #640]	; (15898 <IPC_IRQHandler+0x2ac>)
   15616:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1561a:	07d0      	lsls	r0, r2, #31
   1561c:	f100 80d4 	bmi.w	157c8 <IPC_IRQHandler+0x1dc>
   15620:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   15624:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   15628:	f040 80b6 	bne.w	15798 <IPC_IRQHandler+0x1ac>
   1562c:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   15630:	0749      	lsls	r1, r1, #29
   15632:	f100 80e6 	bmi.w	15802 <IPC_IRQHandler+0x216>
   15636:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1563a:	06da      	lsls	r2, r3, #27
   1563c:	f140 809d 	bpl.w	1577a <IPC_IRQHandler+0x18e>
   15640:	2100      	movs	r1, #0
   15642:	4a95      	ldr	r2, [pc, #596]	; (15898 <IPC_IRQHandler+0x2ac>)
   15644:	4b95      	ldr	r3, [pc, #596]	; (1589c <IPC_IRQHandler+0x2b0>)
   15646:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
   1564a:	681b      	ldr	r3, [r3, #0]
   1564c:	9304      	str	r3, [sp, #16]
   1564e:	9b04      	ldr	r3, [sp, #16]
   15650:	f8df 8270 	ldr.w	r8, [pc, #624]	; 158c4 <IPC_IRQHandler+0x2d8>
   15654:	4f92      	ldr	r7, [pc, #584]	; (158a0 <IPC_IRQHandler+0x2b4>)
   15656:	f8df 9270 	ldr.w	r9, [pc, #624]	; 158c8 <IPC_IRQHandler+0x2dc>
   1565a:	f8d8 a000 	ldr.w	sl, [r8]
   1565e:	f8da 1000 	ldr.w	r1, [sl]
   15662:	2900      	cmp	r1, #0
   15664:	d03f      	beq.n	156e6 <IPC_IRQHandler+0xfa>
   15666:	2200      	movs	r2, #0
   15668:	4614      	mov	r4, r2
   1566a:	e002      	b.n	15672 <IPC_IRQHandler+0x86>
   1566c:	3401      	adds	r4, #1
   1566e:	428c      	cmp	r4, r1
   15670:	d227      	bcs.n	156c2 <IPC_IRQHandler+0xd6>
   15672:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   15676:	68ab      	ldr	r3, [r5, #8]
   15678:	2b00      	cmp	r3, #0
   1567a:	d0f7      	beq.n	1566c <IPC_IRQHandler+0x80>
   1567c:	686e      	ldr	r6, [r5, #4]
   1567e:	b2f6      	uxtb	r6, r6
   15680:	2e01      	cmp	r6, #1
   15682:	d1f3      	bne.n	1566c <IPC_IRQHandler+0x80>
   15684:	6868      	ldr	r0, [r5, #4]
   15686:	f8b9 3000 	ldrh.w	r3, [r9]
   1568a:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   1568e:	d1ed      	bne.n	1566c <IPC_IRQHandler+0x80>
   15690:	686a      	ldr	r2, [r5, #4]
   15692:	3301      	adds	r3, #1
   15694:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   15698:	f042 0202 	orr.w	r2, r2, #2
   1569c:	606a      	str	r2, [r5, #4]
   1569e:	68a8      	ldr	r0, [r5, #8]
   156a0:	f8a9 3000 	strh.w	r3, [r9]
   156a4:	f7ff fe54 	bl	15350 <rpc_transport_rx_handle>
   156a8:	4632      	mov	r2, r6
   156aa:	b928      	cbnz	r0, 156b8 <IPC_IRQHandler+0xcc>
   156ac:	686b      	ldr	r3, [r5, #4]
   156ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   156b2:	f043 0303 	orr.w	r3, r3, #3
   156b6:	606b      	str	r3, [r5, #4]
   156b8:	f8da 1000 	ldr.w	r1, [sl]
   156bc:	3401      	adds	r4, #1
   156be:	428c      	cmp	r4, r1
   156c0:	d3d7      	bcc.n	15672 <IPC_IRQHandler+0x86>
   156c2:	2a00      	cmp	r2, #0
   156c4:	d1cd      	bne.n	15662 <IPC_IRQHandler+0x76>
   156c6:	b171      	cbz	r1, 156e6 <IPC_IRQHandler+0xfa>
   156c8:	4613      	mov	r3, r2
   156ca:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
   156ce:	6890      	ldr	r0, [r2, #8]
   156d0:	3301      	adds	r3, #1
   156d2:	b130      	cbz	r0, 156e2 <IPC_IRQHandler+0xf6>
   156d4:	f8d2 b004 	ldr.w	fp, [r2, #4]
   156d8:	fa5f fb8b 	uxtb.w	fp, fp
   156dc:	f1bb 0f01 	cmp.w	fp, #1
   156e0:	d003      	beq.n	156ea <IPC_IRQHandler+0xfe>
   156e2:	428b      	cmp	r3, r1
   156e4:	d1f1      	bne.n	156ca <IPC_IRQHandler+0xde>
   156e6:	f04f 0b00 	mov.w	fp, #0
   156ea:	f8d7 a000 	ldr.w	sl, [r7]
   156ee:	f8da 2000 	ldr.w	r2, [sl]
   156f2:	2a00      	cmp	r2, #0
   156f4:	d03d      	beq.n	15772 <IPC_IRQHandler+0x186>
   156f6:	2100      	movs	r1, #0
   156f8:	460c      	mov	r4, r1
   156fa:	e002      	b.n	15702 <IPC_IRQHandler+0x116>
   156fc:	3401      	adds	r4, #1
   156fe:	4294      	cmp	r4, r2
   15700:	d227      	bcs.n	15752 <IPC_IRQHandler+0x166>
   15702:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   15706:	68ab      	ldr	r3, [r5, #8]
   15708:	2b00      	cmp	r3, #0
   1570a:	d0f7      	beq.n	156fc <IPC_IRQHandler+0x110>
   1570c:	686e      	ldr	r6, [r5, #4]
   1570e:	b2f6      	uxtb	r6, r6
   15710:	2e01      	cmp	r6, #1
   15712:	d1f3      	bne.n	156fc <IPC_IRQHandler+0x110>
   15714:	6868      	ldr	r0, [r5, #4]
   15716:	f8b9 3000 	ldrh.w	r3, [r9]
   1571a:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   1571e:	d1ed      	bne.n	156fc <IPC_IRQHandler+0x110>
   15720:	686a      	ldr	r2, [r5, #4]
   15722:	3301      	adds	r3, #1
   15724:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   15728:	f042 0202 	orr.w	r2, r2, #2
   1572c:	606a      	str	r2, [r5, #4]
   1572e:	68a8      	ldr	r0, [r5, #8]
   15730:	f8a9 3000 	strh.w	r3, [r9]
   15734:	f7ff fe0c 	bl	15350 <rpc_transport_rx_handle>
   15738:	4631      	mov	r1, r6
   1573a:	b928      	cbnz	r0, 15748 <IPC_IRQHandler+0x15c>
   1573c:	686a      	ldr	r2, [r5, #4]
   1573e:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
   15742:	f043 0303 	orr.w	r3, r3, #3
   15746:	606b      	str	r3, [r5, #4]
   15748:	f8da 2000 	ldr.w	r2, [sl]
   1574c:	3401      	adds	r4, #1
   1574e:	4294      	cmp	r4, r2
   15750:	d3d7      	bcc.n	15702 <IPC_IRQHandler+0x116>
   15752:	2900      	cmp	r1, #0
   15754:	d1cd      	bne.n	156f2 <IPC_IRQHandler+0x106>
   15756:	b162      	cbz	r2, 15772 <IPC_IRQHandler+0x186>
   15758:	460b      	mov	r3, r1
   1575a:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   1575e:	6888      	ldr	r0, [r1, #8]
   15760:	3301      	adds	r3, #1
   15762:	b120      	cbz	r0, 1576e <IPC_IRQHandler+0x182>
   15764:	6849      	ldr	r1, [r1, #4]
   15766:	b2c9      	uxtb	r1, r1
   15768:	2901      	cmp	r1, #1
   1576a:	f43f af76 	beq.w	1565a <IPC_IRQHandler+0x6e>
   1576e:	4293      	cmp	r3, r2
   15770:	d1f3      	bne.n	1575a <IPC_IRQHandler+0x16e>
   15772:	f1bb 0f00 	cmp.w	fp, #0
   15776:	f47f af70 	bne.w	1565a <IPC_IRQHandler+0x6e>
   1577a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1577e:	4b49      	ldr	r3, [pc, #292]	; (158a4 <IPC_IRQHandler+0x2b8>)
   15780:	4a44      	ldr	r2, [pc, #272]	; (15894 <IPC_IRQHandler+0x2a8>)
   15782:	681b      	ldr	r3, [r3, #0]
   15784:	015b      	lsls	r3, r3, #5
   15786:	b2db      	uxtb	r3, r3
   15788:	f882 332a 	strb.w	r3, [r2, #810]	; 0x32a
   1578c:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
   15790:	6051      	str	r1, [r2, #4]
   15792:	b007      	add	sp, #28
   15794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15798:	2206      	movs	r2, #6
   1579a:	4b43      	ldr	r3, [pc, #268]	; (158a8 <IPC_IRQHandler+0x2bc>)
   1579c:	601a      	str	r2, [r3, #0]
   1579e:	b007      	add	sp, #28
   157a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157a4:	f7ff fc00 	bl	14fa8 <ipc_trace_handle>
   157a8:	f7ff fd6c 	bl	15284 <rpc_trace_coredump_in_progress>
   157ac:	2800      	cmp	r0, #0
   157ae:	d149      	bne.n	15844 <IPC_IRQHandler+0x258>
   157b0:	4b3e      	ldr	r3, [pc, #248]	; (158ac <IPC_IRQHandler+0x2c0>)
   157b2:	f8c6 011c 	str.w	r0, [r6, #284]	; 0x11c
   157b6:	681b      	ldr	r3, [r3, #0]
   157b8:	9301      	str	r3, [sp, #4]
   157ba:	9b01      	ldr	r3, [sp, #4]
   157bc:	4b36      	ldr	r3, [pc, #216]	; (15898 <IPC_IRQHandler+0x2ac>)
   157be:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   157c2:	07d0      	lsls	r0, r2, #31
   157c4:	f57f af2c 	bpl.w	15620 <IPC_IRQHandler+0x34>
   157c8:	2000      	movs	r0, #0
   157ca:	f248 0202 	movw	r2, #32770	; 0x8002
   157ce:	4938      	ldr	r1, [pc, #224]	; (158b0 <IPC_IRQHandler+0x2c4>)
   157d0:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   157d4:	6809      	ldr	r1, [r1, #0]
   157d6:	9102      	str	r1, [sp, #8]
   157d8:	9902      	ldr	r1, [sp, #8]
   157da:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   157de:	4293      	cmp	r3, r2
   157e0:	d040      	beq.n	15864 <IPC_IRQHandler+0x278>
   157e2:	d81e      	bhi.n	15822 <IPC_IRQHandler+0x236>
   157e4:	2b00      	cmp	r3, #0
   157e6:	d04f      	beq.n	15888 <IPC_IRQHandler+0x29c>
   157e8:	2b02      	cmp	r3, #2
   157ea:	d942      	bls.n	15872 <IPC_IRQHandler+0x286>
   157ec:	f248 0201 	movw	r2, #32769	; 0x8001
   157f0:	4293      	cmp	r3, r2
   157f2:	d149      	bne.n	15888 <IPC_IRQHandler+0x29c>
   157f4:	2003      	movs	r0, #3
   157f6:	2207      	movs	r2, #7
   157f8:	492b      	ldr	r1, [pc, #172]	; (158a8 <IPC_IRQHandler+0x2bc>)
   157fa:	4b2e      	ldr	r3, [pc, #184]	; (158b4 <IPC_IRQHandler+0x2c8>)
   157fc:	6008      	str	r0, [r1, #0]
   157fe:	601a      	str	r2, [r3, #0]
   15800:	e7cd      	b.n	1579e <IPC_IRQHandler+0x1b2>
   15802:	4d29      	ldr	r5, [pc, #164]	; (158a8 <IPC_IRQHandler+0x2bc>)
   15804:	6829      	ldr	r1, [r5, #0]
   15806:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1580a:	2901      	cmp	r1, #1
   1580c:	492a      	ldr	r1, [pc, #168]	; (158b8 <IPC_IRQHandler+0x2cc>)
   1580e:	d05d      	beq.n	158cc <IPC_IRQHandler+0x2e0>
   15810:	680a      	ldr	r2, [r1, #0]
   15812:	9203      	str	r2, [sp, #12]
   15814:	9a03      	ldr	r2, [sp, #12]
   15816:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1581a:	06db      	lsls	r3, r3, #27
   1581c:	f53f af10 	bmi.w	15640 <IPC_IRQHandler+0x54>
   15820:	e716      	b.n	15650 <IPC_IRQHandler+0x64>
   15822:	4a26      	ldr	r2, [pc, #152]	; (158bc <IPC_IRQHandler+0x2d0>)
   15824:	4293      	cmp	r3, r2
   15826:	d814      	bhi.n	15852 <IPC_IRQHandler+0x266>
   15828:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   1582c:	d814      	bhi.n	15858 <IPC_IRQHandler+0x26c>
   1582e:	f248 0203 	movw	r2, #32771	; 0x8003
   15832:	4293      	cmp	r3, r2
   15834:	d128      	bne.n	15888 <IPC_IRQHandler+0x29c>
   15836:	2003      	movs	r0, #3
   15838:	2204      	movs	r2, #4
   1583a:	491b      	ldr	r1, [pc, #108]	; (158a8 <IPC_IRQHandler+0x2bc>)
   1583c:	4b1d      	ldr	r3, [pc, #116]	; (158b4 <IPC_IRQHandler+0x2c8>)
   1583e:	6008      	str	r0, [r1, #0]
   15840:	601a      	str	r2, [r3, #0]
   15842:	e7ac      	b.n	1579e <IPC_IRQHandler+0x1b2>
   15844:	23e0      	movs	r3, #224	; 0xe0
   15846:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
   1584a:	6065      	str	r5, [r4, #4]
   1584c:	b007      	add	sp, #28
   1584e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15852:	4a1b      	ldr	r2, [pc, #108]	; (158c0 <IPC_IRQHandler+0x2d4>)
   15854:	4293      	cmp	r3, r2
   15856:	d117      	bne.n	15888 <IPC_IRQHandler+0x29c>
   15858:	2003      	movs	r0, #3
   1585a:	4913      	ldr	r1, [pc, #76]	; (158a8 <IPC_IRQHandler+0x2bc>)
   1585c:	4a15      	ldr	r2, [pc, #84]	; (158b4 <IPC_IRQHandler+0x2c8>)
   1585e:	6008      	str	r0, [r1, #0]
   15860:	6013      	str	r3, [r2, #0]
   15862:	e79c      	b.n	1579e <IPC_IRQHandler+0x1b2>
   15864:	2003      	movs	r0, #3
   15866:	2206      	movs	r2, #6
   15868:	490f      	ldr	r1, [pc, #60]	; (158a8 <IPC_IRQHandler+0x2bc>)
   1586a:	4b12      	ldr	r3, [pc, #72]	; (158b4 <IPC_IRQHandler+0x2c8>)
   1586c:	6008      	str	r0, [r1, #0]
   1586e:	601a      	str	r2, [r3, #0]
   15870:	e795      	b.n	1579e <IPC_IRQHandler+0x1b2>
   15872:	2303      	movs	r3, #3
   15874:	4618      	mov	r0, r3
   15876:	490c      	ldr	r1, [pc, #48]	; (158a8 <IPC_IRQHandler+0x2bc>)
   15878:	4a0e      	ldr	r2, [pc, #56]	; (158b4 <IPC_IRQHandler+0x2c8>)
   1587a:	600b      	str	r3, [r1, #0]
   1587c:	6013      	str	r3, [r2, #0]
   1587e:	b007      	add	sp, #28
   15880:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15884:	f7ff b906 	b.w	14a94 <rpc_transport_ipc_fault_handler>
   15888:	2303      	movs	r3, #3
   1588a:	4907      	ldr	r1, [pc, #28]	; (158a8 <IPC_IRQHandler+0x2bc>)
   1588c:	4a09      	ldr	r2, [pc, #36]	; (158b4 <IPC_IRQHandler+0x2c8>)
   1588e:	600b      	str	r3, [r1, #0]
   15890:	6013      	str	r3, [r2, #0]
   15892:	e784      	b.n	1579e <IPC_IRQHandler+0x1b2>
   15894:	e000e100 	.word	0xe000e100
   15898:	4002a000 	.word	0x4002a000
   1589c:	4002a110 	.word	0x4002a110
   158a0:	200207bc 	.word	0x200207bc
   158a4:	200207b4 	.word	0x200207b4
   158a8:	200207b8 	.word	0x200207b8
   158ac:	4002a11c 	.word	0x4002a11c
   158b0:	4002a100 	.word	0x4002a100
   158b4:	200207b0 	.word	0x200207b0
   158b8:	4002a108 	.word	0x4002a108
   158bc:	04400004 	.word	0x04400004
   158c0:	05500001 	.word	0x05500001
   158c4:	200207c0 	.word	0x200207c0
   158c8:	20024e46 	.word	0x20024e46
   158cc:	4a37      	ldr	r2, [pc, #220]	; (159ac <IPC_IRQHandler+0x3c0>)
   158ce:	680b      	ldr	r3, [r1, #0]
   158d0:	6812      	ldr	r2, [r2, #0]
   158d2:	9305      	str	r3, [sp, #20]
   158d4:	6893      	ldr	r3, [r2, #8]
   158d6:	4836      	ldr	r0, [pc, #216]	; (159b0 <IPC_IRQHandler+0x3c4>)
   158d8:	4936      	ldr	r1, [pc, #216]	; (159b4 <IPC_IRQHandler+0x3c8>)
   158da:	6003      	str	r3, [r0, #0]
   158dc:	6854      	ldr	r4, [r2, #4]
   158de:	9a05      	ldr	r2, [sp, #20]
   158e0:	600c      	str	r4, [r1, #0]
   158e2:	b16b      	cbz	r3, 15900 <IPC_IRQHandler+0x314>
   158e4:	b164      	cbz	r4, 15900 <IPC_IRQHandler+0x314>
   158e6:	681b      	ldr	r3, [r3, #0]
   158e8:	2b10      	cmp	r3, #16
   158ea:	d802      	bhi.n	158f2 <IPC_IRQHandler+0x306>
   158ec:	6822      	ldr	r2, [r4, #0]
   158ee:	2a10      	cmp	r2, #16
   158f0:	d90c      	bls.n	1590c <IPC_IRQHandler+0x320>
   158f2:	2103      	movs	r1, #3
   158f4:	f24c 0206 	movw	r2, #49158	; 0xc006
   158f8:	4b2f      	ldr	r3, [pc, #188]	; (159b8 <IPC_IRQHandler+0x3cc>)
   158fa:	6029      	str	r1, [r5, #0]
   158fc:	601a      	str	r2, [r3, #0]
   158fe:	e74e      	b.n	1579e <IPC_IRQHandler+0x1b2>
   15900:	2103      	movs	r1, #3
   15902:	2210      	movs	r2, #16
   15904:	4b2c      	ldr	r3, [pc, #176]	; (159b8 <IPC_IRQHandler+0x3cc>)
   15906:	6029      	str	r1, [r5, #0]
   15908:	601a      	str	r2, [r3, #0]
   1590a:	e748      	b.n	1579e <IPC_IRQHandler+0x1b2>
   1590c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 159c4 <IPC_IRQHandler+0x3d8>
   15910:	2a00      	cmp	r2, #0
   15912:	d042      	beq.n	1599a <IPC_IRQHandler+0x3ae>
   15914:	2300      	movs	r3, #0
   15916:	f104 0904 	add.w	r9, r4, #4
   1591a:	461e      	mov	r6, r3
   1591c:	e002      	b.n	15924 <IPC_IRQHandler+0x338>
   1591e:	3601      	adds	r6, #1
   15920:	4296      	cmp	r6, r2
   15922:	d22a      	bcs.n	1597a <IPC_IRQHandler+0x38e>
   15924:	00f7      	lsls	r7, r6, #3
   15926:	19e1      	adds	r1, r4, r7
   15928:	6888      	ldr	r0, [r1, #8]
   1592a:	2800      	cmp	r0, #0
   1592c:	d0f7      	beq.n	1591e <IPC_IRQHandler+0x332>
   1592e:	f8d1 a004 	ldr.w	sl, [r1, #4]
   15932:	fa5f fa8a 	uxtb.w	sl, sl
   15936:	f1ba 0f01 	cmp.w	sl, #1
   1593a:	d1f0      	bne.n	1591e <IPC_IRQHandler+0x332>
   1593c:	f8d1 c004 	ldr.w	ip, [r1, #4]
   15940:	f8b8 0000 	ldrh.w	r0, [r8]
   15944:	ebb0 4f1c 	cmp.w	r0, ip, lsr #16
   15948:	d1e9      	bne.n	1591e <IPC_IRQHandler+0x332>
   1594a:	684b      	ldr	r3, [r1, #4]
   1594c:	1c42      	adds	r2, r0, #1
   1594e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15952:	f043 0302 	orr.w	r3, r3, #2
   15956:	604b      	str	r3, [r1, #4]
   15958:	6888      	ldr	r0, [r1, #8]
   1595a:	f8a8 2000 	strh.w	r2, [r8]
   1595e:	f7ff fcf7 	bl	15350 <rpc_transport_rx_handle>
   15962:	4653      	mov	r3, sl
   15964:	b938      	cbnz	r0, 15976 <IPC_IRQHandler+0x38a>
   15966:	f859 2007 	ldr.w	r2, [r9, r7]
   1596a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1596e:	f042 0203 	orr.w	r2, r2, #3
   15972:	f849 2007 	str.w	r2, [r9, r7]
   15976:	6822      	ldr	r2, [r4, #0]
   15978:	e7d1      	b.n	1591e <IPC_IRQHandler+0x332>
   1597a:	2b00      	cmp	r3, #0
   1597c:	d1c8      	bne.n	15910 <IPC_IRQHandler+0x324>
   1597e:	b912      	cbnz	r2, 15986 <IPC_IRQHandler+0x39a>
   15980:	e00b      	b.n	1599a <IPC_IRQHandler+0x3ae>
   15982:	4293      	cmp	r3, r2
   15984:	d009      	beq.n	1599a <IPC_IRQHandler+0x3ae>
   15986:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
   1598a:	6888      	ldr	r0, [r1, #8]
   1598c:	3301      	adds	r3, #1
   1598e:	2800      	cmp	r0, #0
   15990:	d0f7      	beq.n	15982 <IPC_IRQHandler+0x396>
   15992:	6849      	ldr	r1, [r1, #4]
   15994:	b2c9      	uxtb	r1, r1
   15996:	2901      	cmp	r1, #1
   15998:	d1f3      	bne.n	15982 <IPC_IRQHandler+0x396>
   1599a:	2002      	movs	r0, #2
   1599c:	4b07      	ldr	r3, [pc, #28]	; (159bc <IPC_IRQHandler+0x3d0>)
   1599e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   159a2:	4a07      	ldr	r2, [pc, #28]	; (159c0 <IPC_IRQHandler+0x3d4>)
   159a4:	681b      	ldr	r3, [r3, #0]
   159a6:	6028      	str	r0, [r5, #0]
   159a8:	e6ec      	b.n	15784 <IPC_IRQHandler+0x198>
   159aa:	bf00      	nop
   159ac:	200207c4 	.word	0x200207c4
   159b0:	200207c0 	.word	0x200207c0
   159b4:	200207bc 	.word	0x200207bc
   159b8:	200207b0 	.word	0x200207b0
   159bc:	200207b4 	.word	0x200207b4
   159c0:	e000e100 	.word	0xe000e100
   159c4:	20024e46 	.word	0x20024e46

000159c8 <rpc_transport_msg_free>:
   159c8:	b430      	push	{r4, r5}
   159ca:	4b18      	ldr	r3, [pc, #96]	; (15a2c <rpc_transport_msg_free+0x64>)
   159cc:	681c      	ldr	r4, [r3, #0]
   159ce:	6825      	ldr	r5, [r4, #0]
   159d0:	b16d      	cbz	r5, 159ee <rpc_transport_msg_free+0x26>
   159d2:	68a3      	ldr	r3, [r4, #8]
   159d4:	4283      	cmp	r3, r0
   159d6:	d027      	beq.n	15a28 <rpc_transport_msg_free+0x60>
   159d8:	2300      	movs	r3, #0
   159da:	e002      	b.n	159e2 <rpc_transport_msg_free+0x1a>
   159dc:	6889      	ldr	r1, [r1, #8]
   159de:	4281      	cmp	r1, r0
   159e0:	d019      	beq.n	15a16 <rpc_transport_msg_free+0x4e>
   159e2:	3301      	adds	r3, #1
   159e4:	00da      	lsls	r2, r3, #3
   159e6:	42ab      	cmp	r3, r5
   159e8:	eb04 0102 	add.w	r1, r4, r2
   159ec:	d1f6      	bne.n	159dc <rpc_transport_msg_free+0x14>
   159ee:	4b10      	ldr	r3, [pc, #64]	; (15a30 <rpc_transport_msg_free+0x68>)
   159f0:	681c      	ldr	r4, [r3, #0]
   159f2:	6825      	ldr	r5, [r4, #0]
   159f4:	b16d      	cbz	r5, 15a12 <rpc_transport_msg_free+0x4a>
   159f6:	68a3      	ldr	r3, [r4, #8]
   159f8:	4283      	cmp	r3, r0
   159fa:	d015      	beq.n	15a28 <rpc_transport_msg_free+0x60>
   159fc:	2300      	movs	r3, #0
   159fe:	e002      	b.n	15a06 <rpc_transport_msg_free+0x3e>
   15a00:	6889      	ldr	r1, [r1, #8]
   15a02:	4281      	cmp	r1, r0
   15a04:	d007      	beq.n	15a16 <rpc_transport_msg_free+0x4e>
   15a06:	3301      	adds	r3, #1
   15a08:	00da      	lsls	r2, r3, #3
   15a0a:	429d      	cmp	r5, r3
   15a0c:	eb04 0102 	add.w	r1, r4, r2
   15a10:	d1f6      	bne.n	15a00 <rpc_transport_msg_free+0x38>
   15a12:	bc30      	pop	{r4, r5}
   15a14:	4770      	bx	lr
   15a16:	3204      	adds	r2, #4
   15a18:	58a3      	ldr	r3, [r4, r2]
   15a1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15a1e:	f043 0303 	orr.w	r3, r3, #3
   15a22:	50a3      	str	r3, [r4, r2]
   15a24:	bc30      	pop	{r4, r5}
   15a26:	4770      	bx	lr
   15a28:	2204      	movs	r2, #4
   15a2a:	e7f5      	b.n	15a18 <rpc_transport_msg_free+0x50>
   15a2c:	200207c0 	.word	0x200207c0
   15a30:	200207bc 	.word	0x200207bc

00015a34 <rpc_transport_ipc_rx_suspend>:
   15a34:	b410      	push	{r4}
   15a36:	2400      	movs	r4, #0
   15a38:	2010      	movs	r0, #16
   15a3a:	2204      	movs	r2, #4
   15a3c:	4b0a      	ldr	r3, [pc, #40]	; (15a68 <rpc_transport_ipc_rx_suspend+0x34>)
   15a3e:	490b      	ldr	r1, [pc, #44]	; (15a6c <rpc_transport_ipc_rx_suspend+0x38>)
   15a40:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   15a44:	680c      	ldr	r4, [r1, #0]
   15a46:	b083      	sub	sp, #12
   15a48:	9401      	str	r4, [sp, #4]
   15a4a:	9c01      	ldr	r4, [sp, #4]
   15a4c:	f5a1 7126 	sub.w	r1, r1, #664	; 0x298
   15a50:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   15a54:	6809      	ldr	r1, [r1, #0]
   15a56:	4b06      	ldr	r3, [pc, #24]	; (15a70 <rpc_transport_ipc_rx_suspend+0x3c>)
   15a58:	9100      	str	r1, [sp, #0]
   15a5a:	9900      	ldr	r1, [sp, #0]
   15a5c:	601a      	str	r2, [r3, #0]
   15a5e:	b003      	add	sp, #12
   15a60:	f85d 4b04 	ldr.w	r4, [sp], #4
   15a64:	4770      	bx	lr
   15a66:	bf00      	nop
   15a68:	4002a000 	.word	0x4002a000
   15a6c:	4002a5a0 	.word	0x4002a5a0
   15a70:	200207b8 	.word	0x200207b8

00015a74 <rpc_transport_ipc_rx_shutdown>:
   15a74:	b4f0      	push	{r4, r5, r6, r7}
   15a76:	4a32      	ldr	r2, [pc, #200]	; (15b40 <rpc_transport_ipc_rx_shutdown+0xcc>)
   15a78:	b08c      	sub	sp, #48	; 0x30
   15a7a:	6813      	ldr	r3, [r2, #0]
   15a7c:	2b06      	cmp	r3, #6
   15a7e:	d1fc      	bne.n	15a7a <rpc_transport_ipc_rx_shutdown+0x6>
   15a80:	2000      	movs	r0, #0
   15a82:	2201      	movs	r2, #1
   15a84:	210a      	movs	r1, #10
   15a86:	4b2f      	ldr	r3, [pc, #188]	; (15b44 <rpc_transport_ipc_rx_shutdown+0xd0>)
   15a88:	9000      	str	r0, [sp, #0]
   15a8a:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
   15a8e:	f8d3 0610 	ldr.w	r0, [r3, #1552]	; 0x610
   15a92:	9000      	str	r0, [sp, #0]
   15a94:	9800      	ldr	r0, [sp, #0]
   15a96:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   15a9a:	9101      	str	r1, [sp, #4]
   15a9c:	9b01      	ldr	r3, [sp, #4]
   15a9e:	b12b      	cbz	r3, 15aac <rpc_transport_ipc_rx_shutdown+0x38>
   15aa0:	9b01      	ldr	r3, [sp, #4]
   15aa2:	3b01      	subs	r3, #1
   15aa4:	9301      	str	r3, [sp, #4]
   15aa6:	9b01      	ldr	r3, [sp, #4]
   15aa8:	2b00      	cmp	r3, #0
   15aaa:	d1f9      	bne.n	15aa0 <rpc_transport_ipc_rx_shutdown+0x2c>
   15aac:	2200      	movs	r2, #0
   15aae:	2601      	movs	r6, #1
   15ab0:	2504      	movs	r5, #4
   15ab2:	2410      	movs	r4, #16
   15ab4:	4923      	ldr	r1, [pc, #140]	; (15b44 <rpc_transport_ipc_rx_shutdown+0xd0>)
   15ab6:	4b24      	ldr	r3, [pc, #144]	; (15b48 <rpc_transport_ipc_rx_shutdown+0xd4>)
   15ab8:	f8c1 2614 	str.w	r2, [r1, #1556]	; 0x614
   15abc:	f501 3115 	add.w	r1, r1, #152576	; 0x25400
   15ac0:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   15ac4:	f501 71c8 	add.w	r1, r1, #400	; 0x190
   15ac8:	6809      	ldr	r1, [r1, #0]
   15aca:	2040      	movs	r0, #64	; 0x40
   15acc:	9102      	str	r1, [sp, #8]
   15ace:	491f      	ldr	r1, [pc, #124]	; (15b4c <rpc_transport_ipc_rx_shutdown+0xd8>)
   15ad0:	9f02      	ldr	r7, [sp, #8]
   15ad2:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
   15ad6:	680f      	ldr	r7, [r1, #0]
   15ad8:	2180      	movs	r1, #128	; 0x80
   15ada:	9703      	str	r7, [sp, #12]
   15adc:	4f1c      	ldr	r7, [pc, #112]	; (15b50 <rpc_transport_ipc_rx_shutdown+0xdc>)
   15ade:	f8dd c00c 	ldr.w	ip, [sp, #12]
   15ae2:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   15ae6:	683f      	ldr	r7, [r7, #0]
   15ae8:	9704      	str	r7, [sp, #16]
   15aea:	4f1a      	ldr	r7, [pc, #104]	; (15b54 <rpc_transport_ipc_rx_shutdown+0xe0>)
   15aec:	f8dd c010 	ldr.w	ip, [sp, #16]
   15af0:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
   15af4:	683f      	ldr	r7, [r7, #0]
   15af6:	9705      	str	r7, [sp, #20]
   15af8:	9f05      	ldr	r7, [sp, #20]
   15afa:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
   15afe:	4a16      	ldr	r2, [pc, #88]	; (15b58 <rpc_transport_ipc_rx_shutdown+0xe4>)
   15b00:	6812      	ldr	r2, [r2, #0]
   15b02:	9206      	str	r2, [sp, #24]
   15b04:	4a15      	ldr	r2, [pc, #84]	; (15b5c <rpc_transport_ipc_rx_shutdown+0xe8>)
   15b06:	9f06      	ldr	r7, [sp, #24]
   15b08:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
   15b0c:	6816      	ldr	r6, [r2, #0]
   15b0e:	9607      	str	r6, [sp, #28]
   15b10:	9e07      	ldr	r6, [sp, #28]
   15b12:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
   15b16:	6815      	ldr	r5, [r2, #0]
   15b18:	9508      	str	r5, [sp, #32]
   15b1a:	9d08      	ldr	r5, [sp, #32]
   15b1c:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
   15b20:	6814      	ldr	r4, [r2, #0]
   15b22:	9409      	str	r4, [sp, #36]	; 0x24
   15b24:	9c09      	ldr	r4, [sp, #36]	; 0x24
   15b26:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   15b2a:	6810      	ldr	r0, [r2, #0]
   15b2c:	900a      	str	r0, [sp, #40]	; 0x28
   15b2e:	980a      	ldr	r0, [sp, #40]	; 0x28
   15b30:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
   15b34:	6813      	ldr	r3, [r2, #0]
   15b36:	930b      	str	r3, [sp, #44]	; 0x2c
   15b38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15b3a:	b00c      	add	sp, #48	; 0x30
   15b3c:	bcf0      	pop	{r4, r5, r6, r7}
   15b3e:	4770      	bx	lr
   15b40:	200207b8 	.word	0x200207b8
   15b44:	40005000 	.word	0x40005000
   15b48:	4002a000 	.word	0x4002a000
   15b4c:	4002a598 	.word	0x4002a598
   15b50:	4002a5a0 	.word	0x4002a5a0
   15b54:	4002a5a8 	.word	0x4002a5a8
   15b58:	4002a5ac 	.word	0x4002a5ac
   15b5c:	4002a308 	.word	0x4002a308

00015b60 <rpc_transport_ipc_tx_init>:
   15b60:	2800      	cmp	r0, #0
   15b62:	f000 80b8 	beq.w	15cd6 <rpc_transport_ipc_tx_init+0x176>
   15b66:	2900      	cmp	r1, #0
   15b68:	f000 80b5 	beq.w	15cd6 <rpc_transport_ipc_tx_init+0x176>
   15b6c:	2a00      	cmp	r2, #0
   15b6e:	f000 80b2 	beq.w	15cd6 <rpc_transport_ipc_tx_init+0x176>
   15b72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b76:	6a04      	ldr	r4, [r0, #32]
   15b78:	b085      	sub	sp, #20
   15b7a:	2c00      	cmp	r4, #0
   15b7c:	f000 80a6 	beq.w	15ccc <rpc_transport_ipc_tx_init+0x16c>
   15b80:	6a40      	ldr	r0, [r0, #36]	; 0x24
   15b82:	2800      	cmp	r0, #0
   15b84:	f000 80a2 	beq.w	15ccc <rpc_transport_ipc_tx_init+0x16c>
   15b88:	f642 4587 	movw	r5, #11399	; 0x2c87
   15b8c:	f04f 0a00 	mov.w	sl, #0
   15b90:	4e55      	ldr	r6, [pc, #340]	; (15ce8 <rpc_transport_ipc_tx_init+0x188>)
   15b92:	42a8      	cmp	r0, r5
   15b94:	f886 a000 	strb.w	sl, [r6]
   15b98:	f240 80a0 	bls.w	15cdc <rpc_transport_ipc_tx_init+0x17c>
   15b9c:	2708      	movs	r7, #8
   15b9e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 15d20 <rpc_transport_ipc_tx_init+0x1c0>
   15ba2:	4620      	mov	r0, r4
   15ba4:	4616      	mov	r6, r2
   15ba6:	460d      	mov	r5, r1
   15ba8:	2244      	movs	r2, #68	; 0x44
   15baa:	4651      	mov	r1, sl
   15bac:	f8c9 4000 	str.w	r4, [r9]
   15bb0:	f007 fd8b 	bl	1d6ca <memset>
   15bb4:	f8d9 2000 	ldr.w	r2, [r9]
   15bb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
   15bbc:	f8df 8164 	ldr.w	r8, [pc, #356]	; 15d24 <rpc_transport_ipc_tx_init+0x1c4>
   15bc0:	f882 a001 	strb.w	sl, [r2, #1]
   15bc4:	f882 a002 	strb.w	sl, [r2, #2]
   15bc8:	f882 a003 	strb.w	sl, [r2, #3]
   15bcc:	7017      	strb	r7, [r2, #0]
   15bce:	4618      	mov	r0, r3
   15bd0:	2244      	movs	r2, #68	; 0x44
   15bd2:	4651      	mov	r1, sl
   15bd4:	f8c8 3000 	str.w	r3, [r8]
   15bd8:	f007 fd77 	bl	1d6ca <memset>
   15bdc:	f8d8 2000 	ldr.w	r2, [r8]
   15be0:	f104 0388 	add.w	r3, r4, #136	; 0x88
   15be4:	f8df b140 	ldr.w	fp, [pc, #320]	; 15d28 <rpc_transport_ipc_tx_init+0x1c8>
   15be8:	7017      	strb	r7, [r2, #0]
   15bea:	f882 a001 	strb.w	sl, [r2, #1]
   15bee:	f882 a002 	strb.w	sl, [r2, #2]
   15bf2:	f882 a003 	strb.w	sl, [r2, #3]
   15bf6:	4618      	mov	r0, r3
   15bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
   15bfc:	4651      	mov	r1, sl
   15bfe:	f8cb 3000 	str.w	r3, [fp]
   15c02:	f007 fd62 	bl	1d6ca <memset>
   15c06:	4b39      	ldr	r3, [pc, #228]	; (15cec <rpc_transport_ipc_tx_init+0x18c>)
   15c08:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   15c0c:	f8c3 c000 	str.w	ip, [r3]
   15c10:	4651      	mov	r1, sl
   15c12:	4660      	mov	r0, ip
   15c14:	f44f 7200 	mov.w	r2, #512	; 0x200
   15c18:	f007 fd57 	bl	1d6ca <memset>
   15c1c:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   15c20:	2106      	movs	r1, #6
   15c22:	f04f 0e01 	mov.w	lr, #1
   15c26:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   15c2a:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   15c2e:	4b30      	ldr	r3, [pc, #192]	; (15cf0 <rpc_transport_ipc_tx_init+0x190>)
   15c30:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   15c34:	605c      	str	r4, [r3, #4]
   15c36:	4c2f      	ldr	r4, [pc, #188]	; (15cf4 <rpc_transport_ipc_tx_init+0x194>)
   15c38:	f8c3 c008 	str.w	ip, [r3, #8]
   15c3c:	8199      	strh	r1, [r3, #12]
   15c3e:	f8a3 e000 	strh.w	lr, [r3]
   15c42:	4619      	mov	r1, r3
   15c44:	611c      	str	r4, [r3, #16]
   15c46:	4b2c      	ldr	r3, [pc, #176]	; (15cf8 <rpc_transport_ipc_tx_init+0x198>)
   15c48:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 15d2c <rpc_transport_ipc_tx_init+0x1cc>
   15c4c:	6120      	str	r0, [r4, #16]
   15c4e:	482b      	ldr	r0, [pc, #172]	; (15cfc <rpc_transport_ipc_tx_init+0x19c>)
   15c50:	6063      	str	r3, [r4, #4]
   15c52:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   15c56:	60a0      	str	r0, [r4, #8]
   15c58:	f8c4 c000 	str.w	ip, [r4]
   15c5c:	4828      	ldr	r0, [pc, #160]	; (15d00 <rpc_transport_ipc_tx_init+0x1a0>)
   15c5e:	60e3      	str	r3, [r4, #12]
   15c60:	6162      	str	r2, [r4, #20]
   15c62:	f7fd fe4b 	bl	138fc <nrf_mem_register>
   15c66:	2800      	cmp	r0, #0
   15c68:	d132      	bne.n	15cd0 <rpc_transport_ipc_tx_init+0x170>
   15c6a:	f04f 0c02 	mov.w	ip, #2
   15c6e:	2420      	movs	r4, #32
   15c70:	f8d9 1000 	ldr.w	r1, [r9]
   15c74:	f8db 2000 	ldr.w	r2, [fp]
   15c78:	6029      	str	r1, [r5, #0]
   15c7a:	4b1c      	ldr	r3, [pc, #112]	; (15cec <rpc_transport_ipc_tx_init+0x18c>)
   15c7c:	f8d8 1000 	ldr.w	r1, [r8]
   15c80:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 15d30 <rpc_transport_ipc_tx_init+0x1d0>
   15c84:	4d1f      	ldr	r5, [pc, #124]	; (15d04 <rpc_transport_ipc_tx_init+0x1a4>)
   15c86:	6031      	str	r1, [r6, #0]
   15c88:	f8ce 2000 	str.w	r2, [lr]
   15c8c:	681b      	ldr	r3, [r3, #0]
   15c8e:	491e      	ldr	r1, [pc, #120]	; (15d08 <rpc_transport_ipc_tx_init+0x1a8>)
   15c90:	f502 7200 	add.w	r2, r2, #512	; 0x200
   15c94:	602a      	str	r2, [r5, #0]
   15c96:	4e1d      	ldr	r6, [pc, #116]	; (15d0c <rpc_transport_ipc_tx_init+0x1ac>)
   15c98:	4a1d      	ldr	r2, [pc, #116]	; (15d10 <rpc_transport_ipc_tx_init+0x1b0>)
   15c9a:	4d1e      	ldr	r5, [pc, #120]	; (15d14 <rpc_transport_ipc_tx_init+0x1b4>)
   15c9c:	600b      	str	r3, [r1, #0]
   15c9e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   15ca2:	491d      	ldr	r1, [pc, #116]	; (15d18 <rpc_transport_ipc_tx_init+0x1b8>)
   15ca4:	6033      	str	r3, [r6, #0]
   15ca6:	8028      	strh	r0, [r5, #0]
   15ca8:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   15cac:	6809      	ldr	r1, [r1, #0]
   15cae:	4b1b      	ldr	r3, [pc, #108]	; (15d1c <rpc_transport_ipc_tx_init+0x1bc>)
   15cb0:	9103      	str	r1, [sp, #12]
   15cb2:	9903      	ldr	r1, [sp, #12]
   15cb4:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   15cb8:	6819      	ldr	r1, [r3, #0]
   15cba:	443b      	add	r3, r7
   15cbc:	9102      	str	r1, [sp, #8]
   15cbe:	9902      	ldr	r1, [sp, #8]
   15cc0:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   15cc4:	681b      	ldr	r3, [r3, #0]
   15cc6:	9301      	str	r3, [sp, #4]
   15cc8:	9b01      	ldr	r3, [sp, #4]
   15cca:	e001      	b.n	15cd0 <rpc_transport_ipc_tx_init+0x170>
   15ccc:	f24c 0007 	movw	r0, #49159	; 0xc007
   15cd0:	b005      	add	sp, #20
   15cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cd6:	f24c 000e 	movw	r0, #49166	; 0xc00e
   15cda:	4770      	bx	lr
   15cdc:	f24c 0004 	movw	r0, #49156	; 0xc004
   15ce0:	b005      	add	sp, #20
   15ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ce6:	bf00      	nop
   15ce8:	20026590 	.word	0x20026590
   15cec:	200207f0 	.word	0x200207f0
   15cf0:	200207dc 	.word	0x200207dc
   15cf4:	20020800 	.word	0x20020800
   15cf8:	00040080 	.word	0x00040080
   15cfc:	00040100 	.word	0x00040100
   15d00:	200207c8 	.word	0x200207c8
   15d04:	200207d4 	.word	0x200207d4
   15d08:	200207d0 	.word	0x200207d0
   15d0c:	200207cc 	.word	0x200207cc
   15d10:	4002a000 	.word	0x4002a000
   15d14:	20024e48 	.word	0x20024e48
   15d18:	4002a514 	.word	0x4002a514
   15d1c:	4002a51c 	.word	0x4002a51c
   15d20:	200207fc 	.word	0x200207fc
   15d24:	200207f4 	.word	0x200207f4
   15d28:	200207f8 	.word	0x200207f8
   15d2c:	00080040 	.word	0x00080040
   15d30:	200207d8 	.word	0x200207d8

00015d34 <rpc_transport_ipc_tx_send>:
   15d34:	2800      	cmp	r0, #0
   15d36:	d05f      	beq.n	15df8 <rpc_transport_ipc_tx_send+0xc4>
   15d38:	b470      	push	{r4, r5, r6}
   15d3a:	4b33      	ldr	r3, [pc, #204]	; (15e08 <rpc_transport_ipc_tx_send+0xd4>)
   15d3c:	b083      	sub	sp, #12
   15d3e:	681a      	ldr	r2, [r3, #0]
   15d40:	4b32      	ldr	r3, [pc, #200]	; (15e0c <rpc_transport_ipc_tx_send+0xd8>)
   15d42:	4282      	cmp	r2, r0
   15d44:	d81e      	bhi.n	15d84 <rpc_transport_ipc_tx_send+0x50>
   15d46:	681b      	ldr	r3, [r3, #0]
   15d48:	4931      	ldr	r1, [pc, #196]	; (15e10 <rpc_transport_ipc_tx_send+0xdc>)
   15d4a:	4283      	cmp	r3, r0
   15d4c:	6809      	ldr	r1, [r1, #0]
   15d4e:	d803      	bhi.n	15d58 <rpc_transport_ipc_tx_send+0x24>
   15d50:	4c30      	ldr	r4, [pc, #192]	; (15e14 <rpc_transport_ipc_tx_send+0xe0>)
   15d52:	6824      	ldr	r4, [r4, #0]
   15d54:	4284      	cmp	r4, r0
   15d56:	d847      	bhi.n	15de8 <rpc_transport_ipc_tx_send+0xb4>
   15d58:	4281      	cmp	r1, r0
   15d5a:	d90e      	bls.n	15d7a <rpc_transport_ipc_tx_send+0x46>
   15d5c:	4b2e      	ldr	r3, [pc, #184]	; (15e18 <rpc_transport_ipc_tx_send+0xe4>)
   15d5e:	781b      	ldrb	r3, [r3, #0]
   15d60:	2b00      	cmp	r3, #0
   15d62:	d14c      	bne.n	15dfe <rpc_transport_ipc_tx_send+0xca>
   15d64:	1a83      	subs	r3, r0, r2
   15d66:	492d      	ldr	r1, [pc, #180]	; (15e1c <rpc_transport_ipc_tx_send+0xe8>)
   15d68:	099e      	lsrs	r6, r3, #6
   15d6a:	069b      	lsls	r3, r3, #26
   15d6c:	680a      	ldr	r2, [r1, #0]
   15d6e:	4c2c      	ldr	r4, [pc, #176]	; (15e20 <rpc_transport_ipc_tx_send+0xec>)
   15d70:	f04f 0103 	mov.w	r1, #3
   15d74:	f04f 0502 	mov.w	r5, #2
   15d78:	d014      	beq.n	15da4 <rpc_transport_ipc_tx_send+0x70>
   15d7a:	f24c 0010 	movw	r0, #49168	; 0xc010
   15d7e:	b003      	add	sp, #12
   15d80:	bc70      	pop	{r4, r5, r6}
   15d82:	4770      	bx	lr
   15d84:	681b      	ldr	r3, [r3, #0]
   15d86:	4298      	cmp	r0, r3
   15d88:	d3f7      	bcc.n	15d7a <rpc_transport_ipc_tx_send+0x46>
   15d8a:	4a22      	ldr	r2, [pc, #136]	; (15e14 <rpc_transport_ipc_tx_send+0xe0>)
   15d8c:	6812      	ldr	r2, [r2, #0]
   15d8e:	4290      	cmp	r0, r2
   15d90:	d2f3      	bcs.n	15d7a <rpc_transport_ipc_tx_send+0x46>
   15d92:	2101      	movs	r1, #1
   15d94:	1ac3      	subs	r3, r0, r3
   15d96:	4a23      	ldr	r2, [pc, #140]	; (15e24 <rpc_transport_ipc_tx_send+0xf0>)
   15d98:	099e      	lsrs	r6, r3, #6
   15d9a:	069b      	lsls	r3, r3, #26
   15d9c:	460d      	mov	r5, r1
   15d9e:	6812      	ldr	r2, [r2, #0]
   15da0:	4c21      	ldr	r4, [pc, #132]	; (15e28 <rpc_transport_ipc_tx_send+0xf4>)
   15da2:	d1ea      	bne.n	15d7a <rpc_transport_ipc_tx_send+0x46>
   15da4:	6843      	ldr	r3, [r0, #4]
   15da6:	b2db      	uxtb	r3, r3
   15da8:	429d      	cmp	r5, r3
   15daa:	d120      	bne.n	15dee <rpc_transport_ipc_tx_send+0xba>
   15dac:	2020      	movs	r0, #32
   15dae:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
   15db2:	4d1e      	ldr	r5, [pc, #120]	; (15e2c <rpc_transport_ipc_tx_send+0xf8>)
   15db4:	6853      	ldr	r3, [r2, #4]
   15db6:	882e      	ldrh	r6, [r5, #0]
   15db8:	b29b      	uxth	r3, r3
   15dba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   15dbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15dc2:	f043 0301 	orr.w	r3, r3, #1
   15dc6:	6053      	str	r3, [r2, #4]
   15dc8:	bf00      	nop
   15dca:	3801      	subs	r0, #1
   15dcc:	d1fc      	bne.n	15dc8 <rpc_transport_ipc_tx_send+0x94>
   15dce:	2201      	movs	r2, #1
   15dd0:	4b17      	ldr	r3, [pc, #92]	; (15e30 <rpc_transport_ipc_tx_send+0xfc>)
   15dd2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   15dd6:	6822      	ldr	r2, [r4, #0]
   15dd8:	882b      	ldrh	r3, [r5, #0]
   15dda:	9201      	str	r2, [sp, #4]
   15ddc:	9a01      	ldr	r2, [sp, #4]
   15dde:	3301      	adds	r3, #1
   15de0:	802b      	strh	r3, [r5, #0]
   15de2:	b003      	add	sp, #12
   15de4:	bc70      	pop	{r4, r5, r6}
   15de6:	4770      	bx	lr
   15de8:	4281      	cmp	r1, r0
   15dea:	d9d2      	bls.n	15d92 <rpc_transport_ipc_tx_send+0x5e>
   15dec:	e7b6      	b.n	15d5c <rpc_transport_ipc_tx_send+0x28>
   15dee:	f24c 0007 	movw	r0, #49159	; 0xc007
   15df2:	b003      	add	sp, #12
   15df4:	bc70      	pop	{r4, r5, r6}
   15df6:	4770      	bx	lr
   15df8:	f24c 000e 	movw	r0, #49166	; 0xc00e
   15dfc:	4770      	bx	lr
   15dfe:	f24c 000f 	movw	r0, #49167	; 0xc00f
   15e02:	b003      	add	sp, #12
   15e04:	bc70      	pop	{r4, r5, r6}
   15e06:	4770      	bx	lr
   15e08:	200207d8 	.word	0x200207d8
   15e0c:	200207d0 	.word	0x200207d0
   15e10:	200207d4 	.word	0x200207d4
   15e14:	200207cc 	.word	0x200207cc
   15e18:	20026590 	.word	0x20026590
   15e1c:	200207fc 	.word	0x200207fc
   15e20:	4002a00c 	.word	0x4002a00c
   15e24:	200207f4 	.word	0x200207f4
   15e28:	4002a004 	.word	0x4002a004
   15e2c:	20024e48 	.word	0x20024e48
   15e30:	4002a000 	.word	0x4002a000

00015e34 <rpc_transport_ipc_tx_rpc_data_alloc>:
   15e34:	4b18      	ldr	r3, [pc, #96]	; (15e98 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   15e36:	781b      	ldrb	r3, [r3, #0]
   15e38:	bb63      	cbnz	r3, 15e94 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   15e3a:	b4f0      	push	{r4, r5, r6, r7}
   15e3c:	4a17      	ldr	r2, [pc, #92]	; (15e9c <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   15e3e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   15e42:	6814      	ldr	r4, [r2, #0]
   15e44:	4b16      	ldr	r3, [pc, #88]	; (15ea0 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   15e46:	6825      	ldr	r5, [r4, #0]
   15e48:	681e      	ldr	r6, [r3, #0]
   15e4a:	b1a5      	cbz	r5, 15e76 <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   15e4c:	4607      	mov	r7, r0
   15e4e:	00c1      	lsls	r1, r0, #3
   15e50:	1863      	adds	r3, r4, r1
   15e52:	685a      	ldr	r2, [r3, #4]
   15e54:	b2d2      	uxtb	r2, r2
   15e56:	2a03      	cmp	r2, #3
   15e58:	d104      	bne.n	15e64 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   15e5a:	609f      	str	r7, [r3, #8]
   15e5c:	685a      	ldr	r2, [r3, #4]
   15e5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   15e62:	605a      	str	r2, [r3, #4]
   15e64:	685a      	ldr	r2, [r3, #4]
   15e66:	f012 0fff 	tst.w	r2, #255	; 0xff
   15e6a:	d101      	bne.n	15e70 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   15e6c:	689b      	ldr	r3, [r3, #8]
   15e6e:	b12b      	cbz	r3, 15e7c <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   15e70:	3001      	adds	r0, #1
   15e72:	42a8      	cmp	r0, r5
   15e74:	d1eb      	bne.n	15e4e <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   15e76:	2000      	movs	r0, #0
   15e78:	bcf0      	pop	{r4, r5, r6, r7}
   15e7a:	4770      	bx	lr
   15e7c:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   15e80:	4421      	add	r1, r4
   15e82:	6088      	str	r0, [r1, #8]
   15e84:	6843      	ldr	r3, [r0, #4]
   15e86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15e8a:	f043 0302 	orr.w	r3, r3, #2
   15e8e:	6043      	str	r3, [r0, #4]
   15e90:	bcf0      	pop	{r4, r5, r6, r7}
   15e92:	4770      	bx	lr
   15e94:	2000      	movs	r0, #0
   15e96:	4770      	bx	lr
   15e98:	20026590 	.word	0x20026590
   15e9c:	200207fc 	.word	0x200207fc
   15ea0:	200207f8 	.word	0x200207f8

00015ea4 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   15ea4:	b4f0      	push	{r4, r5, r6, r7}
   15ea6:	4a15      	ldr	r2, [pc, #84]	; (15efc <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   15ea8:	4b15      	ldr	r3, [pc, #84]	; (15f00 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   15eaa:	6814      	ldr	r4, [r2, #0]
   15eac:	681e      	ldr	r6, [r3, #0]
   15eae:	6825      	ldr	r5, [r4, #0]
   15eb0:	b1ad      	cbz	r5, 15ede <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   15eb2:	2000      	movs	r0, #0
   15eb4:	4607      	mov	r7, r0
   15eb6:	00c1      	lsls	r1, r0, #3
   15eb8:	1863      	adds	r3, r4, r1
   15eba:	685a      	ldr	r2, [r3, #4]
   15ebc:	b2d2      	uxtb	r2, r2
   15ebe:	2a03      	cmp	r2, #3
   15ec0:	d104      	bne.n	15ecc <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   15ec2:	609f      	str	r7, [r3, #8]
   15ec4:	685a      	ldr	r2, [r3, #4]
   15ec6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   15eca:	605a      	str	r2, [r3, #4]
   15ecc:	685a      	ldr	r2, [r3, #4]
   15ece:	f012 0fff 	tst.w	r2, #255	; 0xff
   15ed2:	d101      	bne.n	15ed8 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   15ed4:	689b      	ldr	r3, [r3, #8]
   15ed6:	b12b      	cbz	r3, 15ee4 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   15ed8:	3001      	adds	r0, #1
   15eda:	4285      	cmp	r5, r0
   15edc:	d1eb      	bne.n	15eb6 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   15ede:	2000      	movs	r0, #0
   15ee0:	bcf0      	pop	{r4, r5, r6, r7}
   15ee2:	4770      	bx	lr
   15ee4:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   15ee8:	4421      	add	r1, r4
   15eea:	6088      	str	r0, [r1, #8]
   15eec:	6843      	ldr	r3, [r0, #4]
   15eee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15ef2:	f043 0301 	orr.w	r3, r3, #1
   15ef6:	6043      	str	r3, [r0, #4]
   15ef8:	bcf0      	pop	{r4, r5, r6, r7}
   15efa:	4770      	bx	lr
   15efc:	200207f4 	.word	0x200207f4
   15f00:	200207f0 	.word	0x200207f0

00015f04 <rpc_transport_ipc_tx_data_alloc>:
   15f04:	4b03      	ldr	r3, [pc, #12]	; (15f14 <rpc_transport_ipc_tx_data_alloc+0x10>)
   15f06:	781b      	ldrb	r3, [r3, #0]
   15f08:	b90b      	cbnz	r3, 15f0e <rpc_transport_ipc_tx_data_alloc+0xa>
   15f0a:	f7fd be27 	b.w	13b5c <nrf_shared_malloc>
   15f0e:	2000      	movs	r0, #0
   15f10:	4770      	bx	lr
   15f12:	bf00      	nop
   15f14:	20026590 	.word	0x20026590

00015f18 <rpc_transport_ipc_tx_suspend>:
   15f18:	2201      	movs	r2, #1
   15f1a:	4b01      	ldr	r3, [pc, #4]	; (15f20 <rpc_transport_ipc_tx_suspend+0x8>)
   15f1c:	701a      	strb	r2, [r3, #0]
   15f1e:	4770      	bx	lr
   15f20:	20026590 	.word	0x20026590

00015f24 <rpc_transport_ipc_tx_shutdown>:
   15f24:	b4f0      	push	{r4, r5, r6, r7}
   15f26:	4a16      	ldr	r2, [pc, #88]	; (15f80 <rpc_transport_ipc_tx_shutdown+0x5c>)
   15f28:	4b16      	ldr	r3, [pc, #88]	; (15f84 <rpc_transport_ipc_tx_shutdown+0x60>)
   15f2a:	6814      	ldr	r4, [r2, #0]
   15f2c:	681e      	ldr	r6, [r3, #0]
   15f2e:	6825      	ldr	r5, [r4, #0]
   15f30:	b1ad      	cbz	r5, 15f5e <rpc_transport_ipc_tx_shutdown+0x3a>
   15f32:	2200      	movs	r2, #0
   15f34:	4617      	mov	r7, r2
   15f36:	00d0      	lsls	r0, r2, #3
   15f38:	1823      	adds	r3, r4, r0
   15f3a:	6859      	ldr	r1, [r3, #4]
   15f3c:	b2c9      	uxtb	r1, r1
   15f3e:	2903      	cmp	r1, #3
   15f40:	d104      	bne.n	15f4c <rpc_transport_ipc_tx_shutdown+0x28>
   15f42:	609f      	str	r7, [r3, #8]
   15f44:	6859      	ldr	r1, [r3, #4]
   15f46:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   15f4a:	6059      	str	r1, [r3, #4]
   15f4c:	6859      	ldr	r1, [r3, #4]
   15f4e:	f011 0fff 	tst.w	r1, #255	; 0xff
   15f52:	d101      	bne.n	15f58 <rpc_transport_ipc_tx_shutdown+0x34>
   15f54:	689b      	ldr	r3, [r3, #8]
   15f56:	b123      	cbz	r3, 15f62 <rpc_transport_ipc_tx_shutdown+0x3e>
   15f58:	3201      	adds	r2, #1
   15f5a:	42aa      	cmp	r2, r5
   15f5c:	d1eb      	bne.n	15f36 <rpc_transport_ipc_tx_shutdown+0x12>
   15f5e:	bcf0      	pop	{r4, r5, r6, r7}
   15f60:	4770      	bx	lr
   15f62:	0192      	lsls	r2, r2, #6
   15f64:	4404      	add	r4, r0
   15f66:	18b0      	adds	r0, r6, r2
   15f68:	60a0      	str	r0, [r4, #8]
   15f6a:	6843      	ldr	r3, [r0, #4]
   15f6c:	4906      	ldr	r1, [pc, #24]	; (15f88 <rpc_transport_ipc_tx_shutdown+0x64>)
   15f6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15f72:	f043 0301 	orr.w	r3, r3, #1
   15f76:	6043      	str	r3, [r0, #4]
   15f78:	50b1      	str	r1, [r6, r2]
   15f7a:	bcf0      	pop	{r4, r5, r6, r7}
   15f7c:	f7ff beda 	b.w	15d34 <rpc_transport_ipc_tx_send>
   15f80:	200207f4 	.word	0x200207f4
   15f84:	200207f0 	.word	0x200207f0
   15f88:	00030001 	.word	0x00030001

00015f8c <ok_rsp_parser>:
   15f8c:	2000      	movs	r0, #0
   15f8e:	4770      	bx	lr

00015f90 <pdn_state_get_parser>:
   15f90:	2200      	movs	r2, #0
   15f92:	b570      	push	{r4, r5, r6, lr}
   15f94:	780b      	ldrb	r3, [r1, #0]
   15f96:	b084      	sub	sp, #16
   15f98:	460e      	mov	r6, r1
   15f9a:	e9cd 2200 	strd	r2, r2, [sp]
   15f9e:	e9cd 2202 	strd	r2, r2, [sp, #8]
   15fa2:	b323      	cbz	r3, 15fee <pdn_state_get_parser+0x5e>
   15fa4:	460c      	mov	r4, r1
   15fa6:	2b20      	cmp	r3, #32
   15fa8:	460d      	mov	r5, r1
   15faa:	d01b      	beq.n	15fe4 <pdn_state_get_parser+0x54>
   15fac:	700b      	strb	r3, [r1, #0]
   15fae:	3201      	adds	r2, #1
   15fb0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   15fb4:	18b1      	adds	r1, r6, r2
   15fb6:	460d      	mov	r5, r1
   15fb8:	2b00      	cmp	r3, #0
   15fba:	d1f4      	bne.n	15fa6 <pdn_state_get_parser+0x16>
   15fbc:	2200      	movs	r2, #0
   15fbe:	4b0d      	ldr	r3, [pc, #52]	; (15ff4 <pdn_state_get_parser+0x64>)
   15fc0:	702a      	strb	r2, [r5, #0]
   15fc2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   15fc6:	4a0c      	ldr	r2, [pc, #48]	; (15ff8 <pdn_state_get_parser+0x68>)
   15fc8:	681b      	ldr	r3, [r3, #0]
   15fca:	2110      	movs	r1, #16
   15fcc:	4668      	mov	r0, sp
   15fce:	f7fa ffbb 	bl	10f48 <snprintf>
   15fd2:	4669      	mov	r1, sp
   15fd4:	4630      	mov	r0, r6
   15fd6:	f007 fabe 	bl	1d556 <strstr>
   15fda:	3000      	adds	r0, #0
   15fdc:	bf18      	it	ne
   15fde:	2001      	movne	r0, #1
   15fe0:	b004      	add	sp, #16
   15fe2:	bd70      	pop	{r4, r5, r6, pc}
   15fe4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   15fe8:	2b00      	cmp	r3, #0
   15fea:	d1dc      	bne.n	15fa6 <pdn_state_get_parser+0x16>
   15fec:	e7e6      	b.n	15fbc <pdn_state_get_parser+0x2c>
   15fee:	460d      	mov	r5, r1
   15ff0:	e7e4      	b.n	15fbc <pdn_state_get_parser+0x2c>
   15ff2:	bf00      	nop
   15ff4:	2002091c 	.word	0x2002091c
   15ff8:	0001f878 	.word	0x0001f878

00015ffc <pdn_id_get_parser>:
   15ffc:	b570      	push	{r4, r5, r6, lr}
   15ffe:	780b      	ldrb	r3, [r1, #0]
   16000:	4606      	mov	r6, r0
   16002:	b313      	cbz	r3, 1604a <pdn_id_get_parser+0x4e>
   16004:	4608      	mov	r0, r1
   16006:	2400      	movs	r4, #0
   16008:	460a      	mov	r2, r1
   1600a:	2b20      	cmp	r3, #32
   1600c:	4615      	mov	r5, r2
   1600e:	d017      	beq.n	16040 <pdn_id_get_parser+0x44>
   16010:	7013      	strb	r3, [r2, #0]
   16012:	3401      	adds	r4, #1
   16014:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   16018:	190a      	adds	r2, r1, r4
   1601a:	4615      	mov	r5, r2
   1601c:	2b00      	cmp	r3, #0
   1601e:	d1f4      	bne.n	1600a <pdn_id_get_parser+0xe>
   16020:	2300      	movs	r3, #0
   16022:	4608      	mov	r0, r1
   16024:	702b      	strb	r3, [r5, #0]
   16026:	213a      	movs	r1, #58	; 0x3a
   16028:	f007 facf 	bl	1d5ca <strchr>
   1602c:	b130      	cbz	r0, 1603c <pdn_id_get_parser+0x40>
   1602e:	3001      	adds	r0, #1
   16030:	f007 f97c 	bl	1d32c <atoi>
   16034:	4b06      	ldr	r3, [pc, #24]	; (16050 <pdn_id_get_parser+0x54>)
   16036:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   1603a:	6058      	str	r0, [r3, #4]
   1603c:	2000      	movs	r0, #0
   1603e:	bd70      	pop	{r4, r5, r6, pc}
   16040:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   16044:	2b00      	cmp	r3, #0
   16046:	d1e0      	bne.n	1600a <pdn_id_get_parser+0xe>
   16048:	e7ea      	b.n	16020 <pdn_id_get_parser+0x24>
   1604a:	460d      	mov	r5, r1
   1604c:	e7e8      	b.n	16020 <pdn_id_get_parser+0x24>
   1604e:	bf00      	nop
   16050:	2002091c 	.word	0x2002091c

00016054 <context_create_parser>:
   16054:	b570      	push	{r4, r5, r6, lr}
   16056:	780b      	ldrb	r3, [r1, #0]
   16058:	4606      	mov	r6, r0
   1605a:	b313      	cbz	r3, 160a2 <context_create_parser+0x4e>
   1605c:	4608      	mov	r0, r1
   1605e:	2400      	movs	r4, #0
   16060:	460a      	mov	r2, r1
   16062:	2b20      	cmp	r3, #32
   16064:	4615      	mov	r5, r2
   16066:	d017      	beq.n	16098 <context_create_parser+0x44>
   16068:	7013      	strb	r3, [r2, #0]
   1606a:	3401      	adds	r4, #1
   1606c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   16070:	190a      	adds	r2, r1, r4
   16072:	4615      	mov	r5, r2
   16074:	2b00      	cmp	r3, #0
   16076:	d1f4      	bne.n	16062 <context_create_parser+0xe>
   16078:	2300      	movs	r3, #0
   1607a:	4608      	mov	r0, r1
   1607c:	702b      	strb	r3, [r5, #0]
   1607e:	213a      	movs	r1, #58	; 0x3a
   16080:	f007 faa3 	bl	1d5ca <strchr>
   16084:	b130      	cbz	r0, 16094 <context_create_parser+0x40>
   16086:	4b08      	ldr	r3, [pc, #32]	; (160a8 <context_create_parser+0x54>)
   16088:	3001      	adds	r0, #1
   1608a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   1608e:	f007 f94d 	bl	1d32c <atoi>
   16092:	6020      	str	r0, [r4, #0]
   16094:	2000      	movs	r0, #0
   16096:	bd70      	pop	{r4, r5, r6, pc}
   16098:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1609c:	2b00      	cmp	r3, #0
   1609e:	d1e0      	bne.n	16062 <context_create_parser+0xe>
   160a0:	e7ea      	b.n	16078 <context_create_parser+0x24>
   160a2:	460d      	mov	r5, r1
   160a4:	e7e8      	b.n	16078 <context_create_parser+0x24>
   160a6:	bf00      	nop
   160a8:	2002091c 	.word	0x2002091c

000160ac <pdn_interface_init>:
   160ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   160b0:	b510      	push	{r4, lr}
   160b2:	4c09      	ldr	r4, [pc, #36]	; (160d8 <pdn_interface_init+0x2c>)
   160b4:	2228      	movs	r2, #40	; 0x28
   160b6:	2100      	movs	r1, #0
   160b8:	4808      	ldr	r0, [pc, #32]	; (160dc <pdn_interface_init+0x30>)
   160ba:	6023      	str	r3, [r4, #0]
   160bc:	f007 fb05 	bl	1d6ca <memset>
   160c0:	f240 2201 	movw	r2, #513	; 0x201
   160c4:	2100      	movs	r1, #0
   160c6:	2066      	movs	r0, #102	; 0x66
   160c8:	f7fc ffec 	bl	130a4 <at_interface_open>
   160cc:	2800      	cmp	r0, #0
   160ce:	6020      	str	r0, [r4, #0]
   160d0:	bfb4      	ite	lt
   160d2:	2003      	movlt	r0, #3
   160d4:	2000      	movge	r0, #0
   160d6:	bd10      	pop	{r4, pc}
   160d8:	20020818 	.word	0x20020818
   160dc:	2002091c 	.word	0x2002091c

000160e0 <pdn_interface_open>:
   160e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   160e4:	2866      	cmp	r0, #102	; 0x66
   160e6:	b083      	sub	sp, #12
   160e8:	f040 80bc 	bne.w	16264 <pdn_interface_open+0x184>
   160ec:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   160f0:	f040 80aa 	bne.w	16248 <pdn_interface_open+0x168>
   160f4:	f240 2302 	movw	r3, #514	; 0x202
   160f8:	429a      	cmp	r2, r3
   160fa:	f040 80a5 	bne.w	16248 <pdn_interface_open+0x168>
   160fe:	4c62      	ldr	r4, [pc, #392]	; (16288 <pdn_interface_open+0x1a8>)
   16100:	6825      	ldr	r5, [r4, #0]
   16102:	b34d      	cbz	r5, 16158 <pdn_interface_open+0x78>
   16104:	6863      	ldr	r3, [r4, #4]
   16106:	2b00      	cmp	r3, #0
   16108:	f000 8098 	beq.w	1623c <pdn_interface_open+0x15c>
   1610c:	68a3      	ldr	r3, [r4, #8]
   1610e:	2b00      	cmp	r3, #0
   16110:	f000 8096 	beq.w	16240 <pdn_interface_open+0x160>
   16114:	68e3      	ldr	r3, [r4, #12]
   16116:	2b00      	cmp	r3, #0
   16118:	f000 8094 	beq.w	16244 <pdn_interface_open+0x164>
   1611c:	6923      	ldr	r3, [r4, #16]
   1611e:	2b00      	cmp	r3, #0
   16120:	f000 8098 	beq.w	16254 <pdn_interface_open+0x174>
   16124:	6963      	ldr	r3, [r4, #20]
   16126:	2b00      	cmp	r3, #0
   16128:	f000 8098 	beq.w	1625c <pdn_interface_open+0x17c>
   1612c:	69a3      	ldr	r3, [r4, #24]
   1612e:	2b00      	cmp	r3, #0
   16130:	f000 8096 	beq.w	16260 <pdn_interface_open+0x180>
   16134:	69e3      	ldr	r3, [r4, #28]
   16136:	2b00      	cmp	r3, #0
   16138:	f000 808e 	beq.w	16258 <pdn_interface_open+0x178>
   1613c:	6a23      	ldr	r3, [r4, #32]
   1613e:	b153      	cbz	r3, 16156 <pdn_interface_open+0x76>
   16140:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16142:	2509      	movs	r5, #9
   16144:	b143      	cbz	r3, 16158 <pdn_interface_open+0x78>
   16146:	200c      	movs	r0, #12
   16148:	f7fb fc4c 	bl	119e4 <bsd_os_errno_set>
   1614c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16150:	b003      	add	sp, #12
   16152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16156:	2508      	movs	r5, #8
   16158:	2074      	movs	r0, #116	; 0x74
   1615a:	f7fd fce9 	bl	13b30 <nrf_malloc>
   1615e:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   16162:	2800      	cmp	r0, #0
   16164:	d0ef      	beq.n	16146 <pdn_interface_open+0x66>
   16166:	2274      	movs	r2, #116	; 0x74
   16168:	2100      	movs	r1, #0
   1616a:	f007 faae 	bl	1d6ca <memset>
   1616e:	2101      	movs	r1, #1
   16170:	2003      	movs	r0, #3
   16172:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   16176:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1617a:	4a44      	ldr	r2, [pc, #272]	; (1628c <pdn_interface_open+0x1ac>)
   1617c:	6099      	str	r1, [r3, #8]
   1617e:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   16182:	f44f 7180 	mov.w	r1, #256	; 0x100
   16186:	6718      	str	r0, [r3, #112]	; 0x70
   16188:	605f      	str	r7, [r3, #4]
   1618a:	4841      	ldr	r0, [pc, #260]	; (16290 <pdn_interface_open+0x1b0>)
   1618c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 1629c <pdn_interface_open+0x1bc>
   16190:	f7fa feda 	bl	10f48 <snprintf>
   16194:	483e      	ldr	r0, [pc, #248]	; (16290 <pdn_interface_open+0x1b0>)
   16196:	f8d8 9000 	ldr.w	r9, [r8]
   1619a:	2600      	movs	r6, #0
   1619c:	f007 fa30 	bl	1d600 <strlen>
   161a0:	4633      	mov	r3, r6
   161a2:	4602      	mov	r2, r0
   161a4:	493a      	ldr	r1, [pc, #232]	; (16290 <pdn_interface_open+0x1b0>)
   161a6:	4648      	mov	r0, r9
   161a8:	9601      	str	r6, [sp, #4]
   161aa:	9600      	str	r6, [sp, #0]
   161ac:	f7fc ff24 	bl	12ff8 <at_interface_write>
   161b0:	4681      	mov	r9, r0
   161b2:	4837      	ldr	r0, [pc, #220]	; (16290 <pdn_interface_open+0x1b0>)
   161b4:	f007 fa24 	bl	1d600 <strlen>
   161b8:	4548      	cmp	r0, r9
   161ba:	d159      	bne.n	16270 <pdn_interface_open+0x190>
   161bc:	4633      	mov	r3, r6
   161be:	e9cd 6600 	strd	r6, r6, [sp]
   161c2:	f44f 7280 	mov.w	r2, #256	; 0x100
   161c6:	4932      	ldr	r1, [pc, #200]	; (16290 <pdn_interface_open+0x1b0>)
   161c8:	f8d8 0000 	ldr.w	r0, [r8]
   161cc:	f7fc fffc 	bl	131c8 <at_interface_read>
   161d0:	4606      	mov	r6, r0
   161d2:	4830      	ldr	r0, [pc, #192]	; (16294 <pdn_interface_open+0x1b4>)
   161d4:	f007 fa14 	bl	1d600 <strlen>
   161d8:	4286      	cmp	r6, r0
   161da:	db15      	blt.n	16208 <pdn_interface_open+0x128>
   161dc:	4602      	mov	r2, r0
   161de:	492c      	ldr	r1, [pc, #176]	; (16290 <pdn_interface_open+0x1b0>)
   161e0:	482c      	ldr	r0, [pc, #176]	; (16294 <pdn_interface_open+0x1b4>)
   161e2:	f007 fa20 	bl	1d626 <strncmp>
   161e6:	b978      	cbnz	r0, 16208 <pdn_interface_open+0x128>
   161e8:	4929      	ldr	r1, [pc, #164]	; (16290 <pdn_interface_open+0x1b0>)
   161ea:	4628      	mov	r0, r5
   161ec:	f7ff ff32 	bl	16054 <context_create_parser>
   161f0:	b9b0      	cbnz	r0, 16220 <pdn_interface_open+0x140>
   161f2:	2202      	movs	r2, #2
   161f4:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   161f8:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   161fc:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   16200:	609a      	str	r2, [r3, #8]
   16202:	b003      	add	sp, #12
   16204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16208:	4823      	ldr	r0, [pc, #140]	; (16298 <pdn_interface_open+0x1b8>)
   1620a:	f007 f9f9 	bl	1d600 <strlen>
   1620e:	4920      	ldr	r1, [pc, #128]	; (16290 <pdn_interface_open+0x1b0>)
   16210:	4602      	mov	r2, r0
   16212:	4821      	ldr	r0, [pc, #132]	; (16298 <pdn_interface_open+0x1b8>)
   16214:	f007 fa07 	bl	1d626 <strncmp>
   16218:	b960      	cbnz	r0, 16234 <pdn_interface_open+0x154>
   1621a:	2008      	movs	r0, #8
   1621c:	f7fb fbe2 	bl	119e4 <bsd_os_errno_set>
   16220:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   16224:	f7fd fc8e 	bl	13b44 <nrf_free>
   16228:	2300      	movs	r3, #0
   1622a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1622e:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   16232:	e78d      	b.n	16150 <pdn_interface_open+0x70>
   16234:	2005      	movs	r0, #5
   16236:	f7fb fbd5 	bl	119e4 <bsd_os_errno_set>
   1623a:	e7f1      	b.n	16220 <pdn_interface_open+0x140>
   1623c:	2501      	movs	r5, #1
   1623e:	e78b      	b.n	16158 <pdn_interface_open+0x78>
   16240:	2502      	movs	r5, #2
   16242:	e789      	b.n	16158 <pdn_interface_open+0x78>
   16244:	2503      	movs	r5, #3
   16246:	e787      	b.n	16158 <pdn_interface_open+0x78>
   16248:	2016      	movs	r0, #22
   1624a:	f7fb fbcb 	bl	119e4 <bsd_os_errno_set>
   1624e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16252:	e77d      	b.n	16150 <pdn_interface_open+0x70>
   16254:	2504      	movs	r5, #4
   16256:	e77f      	b.n	16158 <pdn_interface_open+0x78>
   16258:	2507      	movs	r5, #7
   1625a:	e77d      	b.n	16158 <pdn_interface_open+0x78>
   1625c:	2505      	movs	r5, #5
   1625e:	e77b      	b.n	16158 <pdn_interface_open+0x78>
   16260:	2506      	movs	r5, #6
   16262:	e779      	b.n	16158 <pdn_interface_open+0x78>
   16264:	202f      	movs	r0, #47	; 0x2f
   16266:	f7fb fbbd 	bl	119e4 <bsd_os_errno_set>
   1626a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1626e:	e76f      	b.n	16150 <pdn_interface_open+0x70>
   16270:	2005      	movs	r0, #5
   16272:	f7fb fbb7 	bl	119e4 <bsd_os_errno_set>
   16276:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1627a:	f7fd fc63 	bl	13b44 <nrf_free>
   1627e:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   16282:	4638      	mov	r0, r7
   16284:	e764      	b.n	16150 <pdn_interface_open+0x70>
   16286:	bf00      	nop
   16288:	2002091c 	.word	0x2002091c
   1628c:	0001f854 	.word	0x0001f854
   16290:	2002081c 	.word	0x2002081c
   16294:	0001f864 	.word	0x0001f864
   16298:	0001f870 	.word	0x0001f870
   1629c:	20020818 	.word	0x20020818

000162a0 <pdn_interface_connect>:
   162a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162a4:	b083      	sub	sp, #12
   162a6:	2900      	cmp	r1, #0
   162a8:	f000 813e 	beq.w	16528 <pdn_interface_connect+0x288>
   162ac:	2a64      	cmp	r2, #100	; 0x64
   162ae:	4691      	mov	r9, r2
   162b0:	f200 813a 	bhi.w	16528 <pdn_interface_connect+0x288>
   162b4:	4605      	mov	r5, r0
   162b6:	4608      	mov	r0, r1
   162b8:	4688      	mov	r8, r1
   162ba:	f007 f9a1 	bl	1d600 <strlen>
   162be:	2864      	cmp	r0, #100	; 0x64
   162c0:	f200 8132 	bhi.w	16528 <pdn_interface_connect+0x288>
   162c4:	4ba5      	ldr	r3, [pc, #660]	; (1655c <pdn_interface_connect+0x2bc>)
   162c6:	43ab      	bics	r3, r5
   162c8:	f040 8125 	bne.w	16516 <pdn_interface_connect+0x276>
   162cc:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   162d0:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   162d4:	2d09      	cmp	r5, #9
   162d6:	f300 811e 	bgt.w	16516 <pdn_interface_connect+0x276>
   162da:	4fa1      	ldr	r7, [pc, #644]	; (16560 <pdn_interface_connect+0x2c0>)
   162dc:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   162e0:	2b00      	cmp	r3, #0
   162e2:	f000 8118 	beq.w	16516 <pdn_interface_connect+0x276>
   162e6:	689a      	ldr	r2, [r3, #8]
   162e8:	2a00      	cmp	r2, #0
   162ea:	f000 8114 	beq.w	16516 <pdn_interface_connect+0x276>
   162ee:	2d00      	cmp	r5, #0
   162f0:	f2c0 8111 	blt.w	16516 <pdn_interface_connect+0x276>
   162f4:	689b      	ldr	r3, [r3, #8]
   162f6:	2b02      	cmp	r3, #2
   162f8:	f040 810d 	bne.w	16516 <pdn_interface_connect+0x276>
   162fc:	4e99      	ldr	r6, [pc, #612]	; (16564 <pdn_interface_connect+0x2c4>)
   162fe:	4a9a      	ldr	r2, [pc, #616]	; (16568 <pdn_interface_connect+0x2c8>)
   16300:	f44f 7180 	mov.w	r1, #256	; 0x100
   16304:	4630      	mov	r0, r6
   16306:	f7fa fe1f 	bl	10f48 <snprintf>
   1630a:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1630e:	4604      	mov	r4, r0
   16310:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   16314:	681b      	ldr	r3, [r3, #0]
   16316:	4a95      	ldr	r2, [pc, #596]	; (1656c <pdn_interface_connect+0x2cc>)
   16318:	1830      	adds	r0, r6, r0
   1631a:	f7fa fe15 	bl	10f48 <snprintf>
   1631e:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   16322:	4404      	add	r4, r0
   16324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   16326:	f003 0203 	and.w	r2, r3, #3
   1632a:	2a03      	cmp	r2, #3
   1632c:	f000 80ea 	beq.w	16504 <pdn_interface_connect+0x264>
   16330:	079b      	lsls	r3, r3, #30
   16332:	eb06 0004 	add.w	r0, r6, r4
   16336:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1633a:	bf4c      	ite	mi
   1633c:	4b8c      	ldrmi	r3, [pc, #560]	; (16570 <pdn_interface_connect+0x2d0>)
   1633e:	4b8d      	ldrpl	r3, [pc, #564]	; (16574 <pdn_interface_connect+0x2d4>)
   16340:	4a8d      	ldr	r2, [pc, #564]	; (16578 <pdn_interface_connect+0x2d8>)
   16342:	f7fa fe01 	bl	10f48 <snprintf>
   16346:	4404      	add	r4, r0
   16348:	4643      	mov	r3, r8
   1634a:	4a8c      	ldr	r2, [pc, #560]	; (1657c <pdn_interface_connect+0x2dc>)
   1634c:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   16350:	1930      	adds	r0, r6, r4
   16352:	f7fa fdf9 	bl	10f48 <snprintf>
   16356:	4420      	add	r0, r4
   16358:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1635c:	f300 80f7 	bgt.w	1654e <pdn_interface_connect+0x2ae>
   16360:	f8df a238 	ldr.w	sl, [pc, #568]	; 1659c <pdn_interface_connect+0x2fc>
   16364:	487f      	ldr	r0, [pc, #508]	; (16564 <pdn_interface_connect+0x2c4>)
   16366:	f8da b000 	ldr.w	fp, [sl]
   1636a:	2400      	movs	r4, #0
   1636c:	f007 f948 	bl	1d600 <strlen>
   16370:	4623      	mov	r3, r4
   16372:	4602      	mov	r2, r0
   16374:	497b      	ldr	r1, [pc, #492]	; (16564 <pdn_interface_connect+0x2c4>)
   16376:	4658      	mov	r0, fp
   16378:	9401      	str	r4, [sp, #4]
   1637a:	9400      	str	r4, [sp, #0]
   1637c:	f7fc fe3c 	bl	12ff8 <at_interface_write>
   16380:	4683      	mov	fp, r0
   16382:	4878      	ldr	r0, [pc, #480]	; (16564 <pdn_interface_connect+0x2c4>)
   16384:	f007 f93c 	bl	1d600 <strlen>
   16388:	4558      	cmp	r0, fp
   1638a:	d008      	beq.n	1639e <pdn_interface_connect+0xfe>
   1638c:	2005      	movs	r0, #5
   1638e:	f7fb fb29 	bl	119e4 <bsd_os_errno_set>
   16392:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16396:	4620      	mov	r0, r4
   16398:	b003      	add	sp, #12
   1639a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1639e:	4623      	mov	r3, r4
   163a0:	e9cd 4400 	strd	r4, r4, [sp]
   163a4:	f44f 7280 	mov.w	r2, #256	; 0x100
   163a8:	496e      	ldr	r1, [pc, #440]	; (16564 <pdn_interface_connect+0x2c4>)
   163aa:	f8da 0000 	ldr.w	r0, [sl]
   163ae:	f7fc ff0b 	bl	131c8 <at_interface_read>
   163b2:	4604      	mov	r4, r0
   163b4:	4872      	ldr	r0, [pc, #456]	; (16580 <pdn_interface_connect+0x2e0>)
   163b6:	f007 f923 	bl	1d600 <strlen>
   163ba:	4284      	cmp	r4, r0
   163bc:	f2c0 8091 	blt.w	164e2 <pdn_interface_connect+0x242>
   163c0:	4602      	mov	r2, r0
   163c2:	4968      	ldr	r1, [pc, #416]	; (16564 <pdn_interface_connect+0x2c4>)
   163c4:	486e      	ldr	r0, [pc, #440]	; (16580 <pdn_interface_connect+0x2e0>)
   163c6:	f007 f92e 	bl	1d626 <strncmp>
   163ca:	2800      	cmp	r0, #0
   163cc:	f040 8089 	bne.w	164e2 <pdn_interface_connect+0x242>
   163d0:	4964      	ldr	r1, [pc, #400]	; (16564 <pdn_interface_connect+0x2c4>)
   163d2:	4628      	mov	r0, r5
   163d4:	f7ff fdda 	bl	15f8c <ok_rsp_parser>
   163d8:	4604      	mov	r4, r0
   163da:	2800      	cmp	r0, #0
   163dc:	d1db      	bne.n	16396 <pdn_interface_connect+0xf6>
   163de:	4a69      	ldr	r2, [pc, #420]	; (16584 <pdn_interface_connect+0x2e4>)
   163e0:	f44f 7180 	mov.w	r1, #256	; 0x100
   163e4:	485f      	ldr	r0, [pc, #380]	; (16564 <pdn_interface_connect+0x2c4>)
   163e6:	f7fa fdaf 	bl	10f48 <snprintf>
   163ea:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   163ee:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   163f2:	681b      	ldr	r3, [r3, #0]
   163f4:	4a64      	ldr	r2, [pc, #400]	; (16588 <pdn_interface_connect+0x2e8>)
   163f6:	4430      	add	r0, r6
   163f8:	f7fa fda6 	bl	10f48 <snprintf>
   163fc:	4859      	ldr	r0, [pc, #356]	; (16564 <pdn_interface_connect+0x2c4>)
   163fe:	f8da b000 	ldr.w	fp, [sl]
   16402:	f007 f8fd 	bl	1d600 <strlen>
   16406:	4623      	mov	r3, r4
   16408:	4602      	mov	r2, r0
   1640a:	4956      	ldr	r1, [pc, #344]	; (16564 <pdn_interface_connect+0x2c4>)
   1640c:	4658      	mov	r0, fp
   1640e:	9401      	str	r4, [sp, #4]
   16410:	9400      	str	r4, [sp, #0]
   16412:	f7fc fdf1 	bl	12ff8 <at_interface_write>
   16416:	4683      	mov	fp, r0
   16418:	4852      	ldr	r0, [pc, #328]	; (16564 <pdn_interface_connect+0x2c4>)
   1641a:	f007 f8f1 	bl	1d600 <strlen>
   1641e:	4558      	cmp	r0, fp
   16420:	d1b4      	bne.n	1638c <pdn_interface_connect+0xec>
   16422:	4623      	mov	r3, r4
   16424:	f44f 7280 	mov.w	r2, #256	; 0x100
   16428:	494e      	ldr	r1, [pc, #312]	; (16564 <pdn_interface_connect+0x2c4>)
   1642a:	f8da 0000 	ldr.w	r0, [sl]
   1642e:	e9cd 4400 	strd	r4, r4, [sp]
   16432:	f7fc fec9 	bl	131c8 <at_interface_read>
   16436:	4683      	mov	fp, r0
   16438:	4851      	ldr	r0, [pc, #324]	; (16580 <pdn_interface_connect+0x2e0>)
   1643a:	f007 f8e1 	bl	1d600 <strlen>
   1643e:	4583      	cmp	fp, r0
   16440:	db4f      	blt.n	164e2 <pdn_interface_connect+0x242>
   16442:	4602      	mov	r2, r0
   16444:	4947      	ldr	r1, [pc, #284]	; (16564 <pdn_interface_connect+0x2c4>)
   16446:	484e      	ldr	r0, [pc, #312]	; (16580 <pdn_interface_connect+0x2e0>)
   16448:	f007 f8ed 	bl	1d626 <strncmp>
   1644c:	2800      	cmp	r0, #0
   1644e:	d148      	bne.n	164e2 <pdn_interface_connect+0x242>
   16450:	2103      	movs	r1, #3
   16452:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   16456:	464a      	mov	r2, r9
   16458:	6099      	str	r1, [r3, #8]
   1645a:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   1645e:	4641      	mov	r1, r8
   16460:	300c      	adds	r0, #12
   16462:	f007 f908 	bl	1d676 <memcpy>
   16466:	4a49      	ldr	r2, [pc, #292]	; (1658c <pdn_interface_connect+0x2ec>)
   16468:	f44f 7180 	mov.w	r1, #256	; 0x100
   1646c:	483d      	ldr	r0, [pc, #244]	; (16564 <pdn_interface_connect+0x2c4>)
   1646e:	f7fa fd6b 	bl	10f48 <snprintf>
   16472:	4601      	mov	r1, r0
   16474:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   16478:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   1647c:	681b      	ldr	r3, [r3, #0]
   1647e:	4a42      	ldr	r2, [pc, #264]	; (16588 <pdn_interface_connect+0x2e8>)
   16480:	1830      	adds	r0, r6, r0
   16482:	f7fa fd61 	bl	10f48 <snprintf>
   16486:	4837      	ldr	r0, [pc, #220]	; (16564 <pdn_interface_connect+0x2c4>)
   16488:	f8da 6000 	ldr.w	r6, [sl]
   1648c:	f007 f8b8 	bl	1d600 <strlen>
   16490:	4623      	mov	r3, r4
   16492:	4602      	mov	r2, r0
   16494:	4933      	ldr	r1, [pc, #204]	; (16564 <pdn_interface_connect+0x2c4>)
   16496:	4630      	mov	r0, r6
   16498:	9401      	str	r4, [sp, #4]
   1649a:	9400      	str	r4, [sp, #0]
   1649c:	f7fc fdac 	bl	12ff8 <at_interface_write>
   164a0:	4606      	mov	r6, r0
   164a2:	4830      	ldr	r0, [pc, #192]	; (16564 <pdn_interface_connect+0x2c4>)
   164a4:	f007 f8ac 	bl	1d600 <strlen>
   164a8:	42b0      	cmp	r0, r6
   164aa:	d153      	bne.n	16554 <pdn_interface_connect+0x2b4>
   164ac:	4623      	mov	r3, r4
   164ae:	f44f 7280 	mov.w	r2, #256	; 0x100
   164b2:	492c      	ldr	r1, [pc, #176]	; (16564 <pdn_interface_connect+0x2c4>)
   164b4:	f8da 0000 	ldr.w	r0, [sl]
   164b8:	e9cd 4400 	strd	r4, r4, [sp]
   164bc:	f7fc fe84 	bl	131c8 <at_interface_read>
   164c0:	4606      	mov	r6, r0
   164c2:	4833      	ldr	r0, [pc, #204]	; (16590 <pdn_interface_connect+0x2f0>)
   164c4:	f007 f89c 	bl	1d600 <strlen>
   164c8:	4286      	cmp	r6, r0
   164ca:	db33      	blt.n	16534 <pdn_interface_connect+0x294>
   164cc:	4602      	mov	r2, r0
   164ce:	4925      	ldr	r1, [pc, #148]	; (16564 <pdn_interface_connect+0x2c4>)
   164d0:	482f      	ldr	r0, [pc, #188]	; (16590 <pdn_interface_connect+0x2f0>)
   164d2:	f007 f8a8 	bl	1d626 <strncmp>
   164d6:	bb68      	cbnz	r0, 16534 <pdn_interface_connect+0x294>
   164d8:	4628      	mov	r0, r5
   164da:	4922      	ldr	r1, [pc, #136]	; (16564 <pdn_interface_connect+0x2c4>)
   164dc:	f7ff fd8e 	bl	15ffc <pdn_id_get_parser>
   164e0:	e759      	b.n	16396 <pdn_interface_connect+0xf6>
   164e2:	482c      	ldr	r0, [pc, #176]	; (16594 <pdn_interface_connect+0x2f4>)
   164e4:	f007 f88c 	bl	1d600 <strlen>
   164e8:	491e      	ldr	r1, [pc, #120]	; (16564 <pdn_interface_connect+0x2c4>)
   164ea:	4602      	mov	r2, r0
   164ec:	4829      	ldr	r0, [pc, #164]	; (16594 <pdn_interface_connect+0x2f4>)
   164ee:	f007 f89a 	bl	1d626 <strncmp>
   164f2:	2800      	cmp	r0, #0
   164f4:	f47f af4a 	bne.w	1638c <pdn_interface_connect+0xec>
   164f8:	2008      	movs	r0, #8
   164fa:	f7fb fa73 	bl	119e4 <bsd_os_errno_set>
   164fe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16502:	e748      	b.n	16396 <pdn_interface_connect+0xf6>
   16504:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   16508:	1930      	adds	r0, r6, r4
   1650a:	4b23      	ldr	r3, [pc, #140]	; (16598 <pdn_interface_connect+0x2f8>)
   1650c:	4a1a      	ldr	r2, [pc, #104]	; (16578 <pdn_interface_connect+0x2d8>)
   1650e:	f7fa fd1b 	bl	10f48 <snprintf>
   16512:	4404      	add	r4, r0
   16514:	e718      	b.n	16348 <pdn_interface_connect+0xa8>
   16516:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1651a:	2009      	movs	r0, #9
   1651c:	f7fb fa62 	bl	119e4 <bsd_os_errno_set>
   16520:	4620      	mov	r0, r4
   16522:	b003      	add	sp, #12
   16524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16528:	2016      	movs	r0, #22
   1652a:	f7fb fa5b 	bl	119e4 <bsd_os_errno_set>
   1652e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16532:	e730      	b.n	16396 <pdn_interface_connect+0xf6>
   16534:	4817      	ldr	r0, [pc, #92]	; (16594 <pdn_interface_connect+0x2f4>)
   16536:	f007 f863 	bl	1d600 <strlen>
   1653a:	490a      	ldr	r1, [pc, #40]	; (16564 <pdn_interface_connect+0x2c4>)
   1653c:	4602      	mov	r2, r0
   1653e:	4815      	ldr	r0, [pc, #84]	; (16594 <pdn_interface_connect+0x2f4>)
   16540:	f007 f871 	bl	1d626 <strncmp>
   16544:	b930      	cbnz	r0, 16554 <pdn_interface_connect+0x2b4>
   16546:	2008      	movs	r0, #8
   16548:	f7fb fa4c 	bl	119e4 <bsd_os_errno_set>
   1654c:	e723      	b.n	16396 <pdn_interface_connect+0xf6>
   1654e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16552:	e720      	b.n	16396 <pdn_interface_connect+0xf6>
   16554:	2005      	movs	r0, #5
   16556:	f7fb fa45 	bl	119e4 <bsd_os_errno_set>
   1655a:	e71c      	b.n	16396 <pdn_interface_connect+0xf6>
   1655c:	789a0000 	.word	0x789a0000
   16560:	2002091c 	.word	0x2002091c
   16564:	2002081c 	.word	0x2002081c
   16568:	0001f7dc 	.word	0x0001f7dc
   1656c:	0001f7e8 	.word	0x0001f7e8
   16570:	0001f7fc 	.word	0x0001f7fc
   16574:	0001f804 	.word	0x0001f804
   16578:	0001f7f4 	.word	0x0001f7f4
   1657c:	0001f838 	.word	0x0001f838
   16580:	0001f808 	.word	0x0001f808
   16584:	0001f80c 	.word	0x0001f80c
   16588:	0001f818 	.word	0x0001f818
   1658c:	0001f81c 	.word	0x0001f81c
   16590:	0001f82c 	.word	0x0001f82c
   16594:	0001f870 	.word	0x0001f870
   16598:	0001f7ec 	.word	0x0001f7ec
   1659c:	20020818 	.word	0x20020818

000165a0 <pdn_interface_close>:
   165a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   165a4:	4b63      	ldr	r3, [pc, #396]	; (16734 <pdn_interface_close+0x194>)
   165a6:	b083      	sub	sp, #12
   165a8:	4383      	bics	r3, r0
   165aa:	f040 809d 	bne.w	166e8 <pdn_interface_close+0x148>
   165ae:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   165b2:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   165b6:	2c09      	cmp	r4, #9
   165b8:	f300 8096 	bgt.w	166e8 <pdn_interface_close+0x148>
   165bc:	4d5e      	ldr	r5, [pc, #376]	; (16738 <pdn_interface_close+0x198>)
   165be:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   165c2:	2800      	cmp	r0, #0
   165c4:	f000 8090 	beq.w	166e8 <pdn_interface_close+0x148>
   165c8:	6883      	ldr	r3, [r0, #8]
   165ca:	2b00      	cmp	r3, #0
   165cc:	f000 808c 	beq.w	166e8 <pdn_interface_close+0x148>
   165d0:	6883      	ldr	r3, [r0, #8]
   165d2:	2b03      	cmp	r3, #3
   165d4:	d008      	beq.n	165e8 <pdn_interface_close+0x48>
   165d6:	f7fd fab5 	bl	13b44 <nrf_free>
   165da:	2300      	movs	r3, #0
   165dc:	4618      	mov	r0, r3
   165de:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   165e2:	b003      	add	sp, #12
   165e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   165e8:	4e54      	ldr	r6, [pc, #336]	; (1673c <pdn_interface_close+0x19c>)
   165ea:	4a55      	ldr	r2, [pc, #340]	; (16740 <pdn_interface_close+0x1a0>)
   165ec:	f44f 7180 	mov.w	r1, #256	; 0x100
   165f0:	4630      	mov	r0, r6
   165f2:	f7fa fca9 	bl	10f48 <snprintf>
   165f6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   165fa:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   165fe:	681b      	ldr	r3, [r3, #0]
   16600:	4a50      	ldr	r2, [pc, #320]	; (16744 <pdn_interface_close+0x1a4>)
   16602:	4430      	add	r0, r6
   16604:	f8df 814c 	ldr.w	r8, [pc, #332]	; 16754 <pdn_interface_close+0x1b4>
   16608:	f7fa fc9e 	bl	10f48 <snprintf>
   1660c:	4630      	mov	r0, r6
   1660e:	f8d8 9000 	ldr.w	r9, [r8]
   16612:	2700      	movs	r7, #0
   16614:	f006 fff4 	bl	1d600 <strlen>
   16618:	4631      	mov	r1, r6
   1661a:	4602      	mov	r2, r0
   1661c:	463b      	mov	r3, r7
   1661e:	4648      	mov	r0, r9
   16620:	9701      	str	r7, [sp, #4]
   16622:	9700      	str	r7, [sp, #0]
   16624:	f7fc fce8 	bl	12ff8 <at_interface_write>
   16628:	4681      	mov	r9, r0
   1662a:	4630      	mov	r0, r6
   1662c:	f006 ffe8 	bl	1d600 <strlen>
   16630:	4548      	cmp	r0, r9
   16632:	d176      	bne.n	16722 <pdn_interface_close+0x182>
   16634:	463b      	mov	r3, r7
   16636:	e9cd 7700 	strd	r7, r7, [sp]
   1663a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1663e:	4631      	mov	r1, r6
   16640:	f8d8 0000 	ldr.w	r0, [r8]
   16644:	f7fc fdc0 	bl	131c8 <at_interface_read>
   16648:	4607      	mov	r7, r0
   1664a:	483f      	ldr	r0, [pc, #252]	; (16748 <pdn_interface_close+0x1a8>)
   1664c:	f006 ffd8 	bl	1d600 <strlen>
   16650:	4287      	cmp	r7, r0
   16652:	da4f      	bge.n	166f4 <pdn_interface_close+0x154>
   16654:	483d      	ldr	r0, [pc, #244]	; (1674c <pdn_interface_close+0x1ac>)
   16656:	f006 ffd3 	bl	1d600 <strlen>
   1665a:	4938      	ldr	r1, [pc, #224]	; (1673c <pdn_interface_close+0x19c>)
   1665c:	4602      	mov	r2, r0
   1665e:	483b      	ldr	r0, [pc, #236]	; (1674c <pdn_interface_close+0x1ac>)
   16660:	f006 ffe1 	bl	1d626 <strncmp>
   16664:	2800      	cmp	r0, #0
   16666:	d15c      	bne.n	16722 <pdn_interface_close+0x182>
   16668:	2008      	movs	r0, #8
   1666a:	f7fb f9bb 	bl	119e4 <bsd_os_errno_set>
   1666e:	4a38      	ldr	r2, [pc, #224]	; (16750 <pdn_interface_close+0x1b0>)
   16670:	f44f 7180 	mov.w	r1, #256	; 0x100
   16674:	4831      	ldr	r0, [pc, #196]	; (1673c <pdn_interface_close+0x19c>)
   16676:	f7fa fc67 	bl	10f48 <snprintf>
   1667a:	4601      	mov	r1, r0
   1667c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   16680:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   16684:	681b      	ldr	r3, [r3, #0]
   16686:	4a2f      	ldr	r2, [pc, #188]	; (16744 <pdn_interface_close+0x1a4>)
   16688:	1830      	adds	r0, r6, r0
   1668a:	f7fa fc5d 	bl	10f48 <snprintf>
   1668e:	482b      	ldr	r0, [pc, #172]	; (1673c <pdn_interface_close+0x19c>)
   16690:	f8d8 7000 	ldr.w	r7, [r8]
   16694:	2600      	movs	r6, #0
   16696:	f006 ffb3 	bl	1d600 <strlen>
   1669a:	4633      	mov	r3, r6
   1669c:	4602      	mov	r2, r0
   1669e:	4927      	ldr	r1, [pc, #156]	; (1673c <pdn_interface_close+0x19c>)
   166a0:	4638      	mov	r0, r7
   166a2:	9601      	str	r6, [sp, #4]
   166a4:	9600      	str	r6, [sp, #0]
   166a6:	f7fc fca7 	bl	12ff8 <at_interface_write>
   166aa:	4607      	mov	r7, r0
   166ac:	4823      	ldr	r0, [pc, #140]	; (1673c <pdn_interface_close+0x19c>)
   166ae:	f006 ffa7 	bl	1d600 <strlen>
   166b2:	42b8      	cmp	r0, r7
   166b4:	d139      	bne.n	1672a <pdn_interface_close+0x18a>
   166b6:	4633      	mov	r3, r6
   166b8:	e9cd 6600 	strd	r6, r6, [sp]
   166bc:	f44f 7280 	mov.w	r2, #256	; 0x100
   166c0:	491e      	ldr	r1, [pc, #120]	; (1673c <pdn_interface_close+0x19c>)
   166c2:	f8d8 0000 	ldr.w	r0, [r8]
   166c6:	f7fc fd7f 	bl	131c8 <at_interface_read>
   166ca:	4606      	mov	r6, r0
   166cc:	481e      	ldr	r0, [pc, #120]	; (16748 <pdn_interface_close+0x1a8>)
   166ce:	f006 ff97 	bl	1d600 <strlen>
   166d2:	4286      	cmp	r6, r0
   166d4:	db16      	blt.n	16704 <pdn_interface_close+0x164>
   166d6:	4602      	mov	r2, r0
   166d8:	4918      	ldr	r1, [pc, #96]	; (1673c <pdn_interface_close+0x19c>)
   166da:	481b      	ldr	r0, [pc, #108]	; (16748 <pdn_interface_close+0x1a8>)
   166dc:	f006 ffa3 	bl	1d626 <strncmp>
   166e0:	b980      	cbnz	r0, 16704 <pdn_interface_close+0x164>
   166e2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   166e6:	e776      	b.n	165d6 <pdn_interface_close+0x36>
   166e8:	2009      	movs	r0, #9
   166ea:	f7fb f97b 	bl	119e4 <bsd_os_errno_set>
   166ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   166f2:	e776      	b.n	165e2 <pdn_interface_close+0x42>
   166f4:	4602      	mov	r2, r0
   166f6:	4631      	mov	r1, r6
   166f8:	4813      	ldr	r0, [pc, #76]	; (16748 <pdn_interface_close+0x1a8>)
   166fa:	f006 ff94 	bl	1d626 <strncmp>
   166fe:	2800      	cmp	r0, #0
   16700:	d0b5      	beq.n	1666e <pdn_interface_close+0xce>
   16702:	e7a7      	b.n	16654 <pdn_interface_close+0xb4>
   16704:	4811      	ldr	r0, [pc, #68]	; (1674c <pdn_interface_close+0x1ac>)
   16706:	f006 ff7b 	bl	1d600 <strlen>
   1670a:	490c      	ldr	r1, [pc, #48]	; (1673c <pdn_interface_close+0x19c>)
   1670c:	4602      	mov	r2, r0
   1670e:	480f      	ldr	r0, [pc, #60]	; (1674c <pdn_interface_close+0x1ac>)
   16710:	f006 ff89 	bl	1d626 <strncmp>
   16714:	b948      	cbnz	r0, 1672a <pdn_interface_close+0x18a>
   16716:	2008      	movs	r0, #8
   16718:	f7fb f964 	bl	119e4 <bsd_os_errno_set>
   1671c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   16720:	e759      	b.n	165d6 <pdn_interface_close+0x36>
   16722:	2005      	movs	r0, #5
   16724:	f7fb f95e 	bl	119e4 <bsd_os_errno_set>
   16728:	e7a1      	b.n	1666e <pdn_interface_close+0xce>
   1672a:	2005      	movs	r0, #5
   1672c:	f7fb f95a 	bl	119e4 <bsd_os_errno_set>
   16730:	e7d7      	b.n	166e2 <pdn_interface_close+0x142>
   16732:	bf00      	nop
   16734:	789a0000 	.word	0x789a0000
   16738:	2002091c 	.word	0x2002091c
   1673c:	2002081c 	.word	0x2002081c
   16740:	0001f7d0 	.word	0x0001f7d0
   16744:	0001f818 	.word	0x0001f818
   16748:	0001f808 	.word	0x0001f808
   1674c:	0001f870 	.word	0x0001f870
   16750:	0001f7dc 	.word	0x0001f7dc
   16754:	20020818 	.word	0x20020818

00016758 <pdn_interface_setopt>:
   16758:	b510      	push	{r4, lr}
   1675a:	f240 2402 	movw	r4, #514	; 0x202
   1675e:	42a1      	cmp	r1, r4
   16760:	d10b      	bne.n	1677a <pdn_interface_setopt+0x22>
   16762:	b153      	cbz	r3, 1677a <pdn_interface_setopt+0x22>
   16764:	9902      	ldr	r1, [sp, #8]
   16766:	b141      	cbz	r1, 1677a <pdn_interface_setopt+0x22>
   16768:	4925      	ldr	r1, [pc, #148]	; (16800 <pdn_interface_setopt+0xa8>)
   1676a:	4381      	bics	r1, r0
   1676c:	d00b      	beq.n	16786 <pdn_interface_setopt+0x2e>
   1676e:	2009      	movs	r0, #9
   16770:	f7fb f938 	bl	119e4 <bsd_os_errno_set>
   16774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16778:	bd10      	pop	{r4, pc}
   1677a:	2016      	movs	r0, #22
   1677c:	f7fb f932 	bl	119e4 <bsd_os_errno_set>
   16780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16784:	bd10      	pop	{r4, pc}
   16786:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   1678a:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   1678e:	2809      	cmp	r0, #9
   16790:	dced      	bgt.n	1676e <pdn_interface_setopt+0x16>
   16792:	491c      	ldr	r1, [pc, #112]	; (16804 <pdn_interface_setopt+0xac>)
   16794:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   16798:	2900      	cmp	r1, #0
   1679a:	d0e8      	beq.n	1676e <pdn_interface_setopt+0x16>
   1679c:	688c      	ldr	r4, [r1, #8]
   1679e:	2c00      	cmp	r4, #0
   167a0:	d0e5      	beq.n	1676e <pdn_interface_setopt+0x16>
   167a2:	2800      	cmp	r0, #0
   167a4:	dbe3      	blt.n	1676e <pdn_interface_setopt+0x16>
   167a6:	2a01      	cmp	r2, #1
   167a8:	d001      	beq.n	167ae <pdn_interface_setopt+0x56>
   167aa:	202d      	movs	r0, #45	; 0x2d
   167ac:	e7e6      	b.n	1677c <pdn_interface_setopt+0x24>
   167ae:	688a      	ldr	r2, [r1, #8]
   167b0:	b1fa      	cbz	r2, 167f2 <pdn_interface_setopt+0x9a>
   167b2:	688a      	ldr	r2, [r1, #8]
   167b4:	2a03      	cmp	r2, #3
   167b6:	d01c      	beq.n	167f2 <pdn_interface_setopt+0x9a>
   167b8:	688a      	ldr	r2, [r1, #8]
   167ba:	2a04      	cmp	r2, #4
   167bc:	d019      	beq.n	167f2 <pdn_interface_setopt+0x9a>
   167be:	9a02      	ldr	r2, [sp, #8]
   167c0:	0890      	lsrs	r0, r2, #2
   167c2:	1e42      	subs	r2, r0, #1
   167c4:	2a01      	cmp	r2, #1
   167c6:	d8d8      	bhi.n	1677a <pdn_interface_setopt+0x22>
   167c8:	9a02      	ldr	r2, [sp, #8]
   167ca:	0792      	lsls	r2, r2, #30
   167cc:	d1d5      	bne.n	1677a <pdn_interface_setopt+0x22>
   167ce:	681a      	ldr	r2, [r3, #0]
   167d0:	2a02      	cmp	r2, #2
   167d2:	d010      	beq.n	167f6 <pdn_interface_setopt+0x9e>
   167d4:	2a0a      	cmp	r2, #10
   167d6:	d1d0      	bne.n	1677a <pdn_interface_setopt+0x22>
   167d8:	2202      	movs	r2, #2
   167da:	2802      	cmp	r0, #2
   167dc:	d106      	bne.n	167ec <pdn_interface_setopt+0x94>
   167de:	685b      	ldr	r3, [r3, #4]
   167e0:	2b02      	cmp	r3, #2
   167e2:	d00a      	beq.n	167fa <pdn_interface_setopt+0xa2>
   167e4:	2b0a      	cmp	r3, #10
   167e6:	d1c8      	bne.n	1677a <pdn_interface_setopt+0x22>
   167e8:	f042 0202 	orr.w	r2, r2, #2
   167ec:	670a      	str	r2, [r1, #112]	; 0x70
   167ee:	2000      	movs	r0, #0
   167f0:	e7c4      	b.n	1677c <pdn_interface_setopt+0x24>
   167f2:	200e      	movs	r0, #14
   167f4:	e7c2      	b.n	1677c <pdn_interface_setopt+0x24>
   167f6:	2201      	movs	r2, #1
   167f8:	e7ef      	b.n	167da <pdn_interface_setopt+0x82>
   167fa:	f042 0201 	orr.w	r2, r2, #1
   167fe:	e7f5      	b.n	167ec <pdn_interface_setopt+0x94>
   16800:	789a0000 	.word	0x789a0000
   16804:	2002091c 	.word	0x2002091c

00016808 <pdn_interface_getopt>:
   16808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1680c:	f240 2402 	movw	r4, #514	; 0x202
   16810:	b083      	sub	sp, #12
   16812:	42a1      	cmp	r1, r4
   16814:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   16816:	f040 80a9 	bne.w	1696c <pdn_interface_getopt+0x164>
   1681a:	461e      	mov	r6, r3
   1681c:	2b00      	cmp	r3, #0
   1681e:	f000 80a5 	beq.w	1696c <pdn_interface_getopt+0x164>
   16822:	2d00      	cmp	r5, #0
   16824:	f000 80a2 	beq.w	1696c <pdn_interface_getopt+0x164>
   16828:	4b56      	ldr	r3, [pc, #344]	; (16984 <pdn_interface_getopt+0x17c>)
   1682a:	4383      	bics	r3, r0
   1682c:	f040 8084 	bne.w	16938 <pdn_interface_getopt+0x130>
   16830:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   16834:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   16838:	2c09      	cmp	r4, #9
   1683a:	dc7d      	bgt.n	16938 <pdn_interface_getopt+0x130>
   1683c:	4b52      	ldr	r3, [pc, #328]	; (16988 <pdn_interface_getopt+0x180>)
   1683e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   16842:	2b00      	cmp	r3, #0
   16844:	d078      	beq.n	16938 <pdn_interface_getopt+0x130>
   16846:	6899      	ldr	r1, [r3, #8]
   16848:	2900      	cmp	r1, #0
   1684a:	d075      	beq.n	16938 <pdn_interface_getopt+0x130>
   1684c:	2c00      	cmp	r4, #0
   1684e:	db73      	blt.n	16938 <pdn_interface_getopt+0x130>
   16850:	2a02      	cmp	r2, #2
   16852:	d00e      	beq.n	16872 <pdn_interface_getopt+0x6a>
   16854:	2a03      	cmp	r2, #3
   16856:	d008      	beq.n	1686a <pdn_interface_getopt+0x62>
   16858:	2a01      	cmp	r2, #1
   1685a:	d015      	beq.n	16888 <pdn_interface_getopt+0x80>
   1685c:	202d      	movs	r0, #45	; 0x2d
   1685e:	f7fb f8c1 	bl	119e4 <bsd_os_errno_set>
   16862:	2000      	movs	r0, #0
   16864:	b003      	add	sp, #12
   16866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1686a:	682b      	ldr	r3, [r5, #0]
   1686c:	bb23      	cbnz	r3, 168b8 <pdn_interface_getopt+0xb0>
   1686e:	2016      	movs	r0, #22
   16870:	e7f5      	b.n	1685e <pdn_interface_getopt+0x56>
   16872:	682a      	ldr	r2, [r5, #0]
   16874:	2a00      	cmp	r2, #0
   16876:	d0fa      	beq.n	1686e <pdn_interface_getopt+0x66>
   16878:	2201      	movs	r2, #1
   1687a:	2000      	movs	r0, #0
   1687c:	681b      	ldr	r3, [r3, #0]
   1687e:	7033      	strb	r3, [r6, #0]
   16880:	602a      	str	r2, [r5, #0]
   16882:	b003      	add	sp, #12
   16884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16888:	689a      	ldr	r2, [r3, #8]
   1688a:	2a00      	cmp	r2, #0
   1688c:	d052      	beq.n	16934 <pdn_interface_getopt+0x12c>
   1688e:	689a      	ldr	r2, [r3, #8]
   16890:	2a04      	cmp	r2, #4
   16892:	d04f      	beq.n	16934 <pdn_interface_getopt+0x12c>
   16894:	682a      	ldr	r2, [r5, #0]
   16896:	2a07      	cmp	r2, #7
   16898:	d9e9      	bls.n	1686e <pdn_interface_getopt+0x66>
   1689a:	f012 0203 	ands.w	r2, r2, #3
   1689e:	d1e6      	bne.n	1686e <pdn_interface_getopt+0x66>
   168a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   168a2:	0799      	lsls	r1, r3, #30
   168a4:	d45d      	bmi.n	16962 <pdn_interface_getopt+0x15a>
   168a6:	2104      	movs	r1, #4
   168a8:	07db      	lsls	r3, r3, #31
   168aa:	d502      	bpl.n	168b2 <pdn_interface_getopt+0xaa>
   168ac:	2302      	movs	r3, #2
   168ae:	50b3      	str	r3, [r6, r2]
   168b0:	460a      	mov	r2, r1
   168b2:	602a      	str	r2, [r5, #0]
   168b4:	2000      	movs	r0, #0
   168b6:	e7d5      	b.n	16864 <pdn_interface_getopt+0x5c>
   168b8:	4a34      	ldr	r2, [pc, #208]	; (1698c <pdn_interface_getopt+0x184>)
   168ba:	f44f 7180 	mov.w	r1, #256	; 0x100
   168be:	4834      	ldr	r0, [pc, #208]	; (16990 <pdn_interface_getopt+0x188>)
   168c0:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 1699c <pdn_interface_getopt+0x194>
   168c4:	f7fa fb40 	bl	10f48 <snprintf>
   168c8:	4831      	ldr	r0, [pc, #196]	; (16990 <pdn_interface_getopt+0x188>)
   168ca:	f8d8 9000 	ldr.w	r9, [r8]
   168ce:	2700      	movs	r7, #0
   168d0:	f006 fe96 	bl	1d600 <strlen>
   168d4:	463b      	mov	r3, r7
   168d6:	4602      	mov	r2, r0
   168d8:	492d      	ldr	r1, [pc, #180]	; (16990 <pdn_interface_getopt+0x188>)
   168da:	4648      	mov	r0, r9
   168dc:	9701      	str	r7, [sp, #4]
   168de:	9700      	str	r7, [sp, #0]
   168e0:	f7fc fb8a 	bl	12ff8 <at_interface_write>
   168e4:	4681      	mov	r9, r0
   168e6:	482a      	ldr	r0, [pc, #168]	; (16990 <pdn_interface_getopt+0x188>)
   168e8:	f006 fe8a 	bl	1d600 <strlen>
   168ec:	4548      	cmp	r0, r9
   168ee:	d143      	bne.n	16978 <pdn_interface_getopt+0x170>
   168f0:	463b      	mov	r3, r7
   168f2:	e9cd 7700 	strd	r7, r7, [sp]
   168f6:	f44f 7280 	mov.w	r2, #256	; 0x100
   168fa:	4925      	ldr	r1, [pc, #148]	; (16990 <pdn_interface_getopt+0x188>)
   168fc:	f8d8 0000 	ldr.w	r0, [r8]
   16900:	f7fc fc62 	bl	131c8 <at_interface_read>
   16904:	4607      	mov	r7, r0
   16906:	4823      	ldr	r0, [pc, #140]	; (16994 <pdn_interface_getopt+0x18c>)
   16908:	f006 fe7a 	bl	1d600 <strlen>
   1690c:	4287      	cmp	r7, r0
   1690e:	db19      	blt.n	16944 <pdn_interface_getopt+0x13c>
   16910:	4602      	mov	r2, r0
   16912:	491f      	ldr	r1, [pc, #124]	; (16990 <pdn_interface_getopt+0x188>)
   16914:	481f      	ldr	r0, [pc, #124]	; (16994 <pdn_interface_getopt+0x18c>)
   16916:	f006 fe86 	bl	1d626 <strncmp>
   1691a:	4607      	mov	r7, r0
   1691c:	b990      	cbnz	r0, 16944 <pdn_interface_getopt+0x13c>
   1691e:	4620      	mov	r0, r4
   16920:	491b      	ldr	r1, [pc, #108]	; (16990 <pdn_interface_getopt+0x188>)
   16922:	f7ff fb35 	bl	15f90 <pdn_state_get_parser>
   16926:	2800      	cmp	r0, #0
   16928:	db99      	blt.n	1685e <pdn_interface_getopt+0x56>
   1692a:	2301      	movs	r3, #1
   1692c:	7030      	strb	r0, [r6, #0]
   1692e:	4638      	mov	r0, r7
   16930:	602b      	str	r3, [r5, #0]
   16932:	e797      	b.n	16864 <pdn_interface_getopt+0x5c>
   16934:	200e      	movs	r0, #14
   16936:	e792      	b.n	1685e <pdn_interface_getopt+0x56>
   16938:	2009      	movs	r0, #9
   1693a:	f7fb f853 	bl	119e4 <bsd_os_errno_set>
   1693e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16942:	e78f      	b.n	16864 <pdn_interface_getopt+0x5c>
   16944:	4814      	ldr	r0, [pc, #80]	; (16998 <pdn_interface_getopt+0x190>)
   16946:	f006 fe5b 	bl	1d600 <strlen>
   1694a:	4911      	ldr	r1, [pc, #68]	; (16990 <pdn_interface_getopt+0x188>)
   1694c:	4602      	mov	r2, r0
   1694e:	4812      	ldr	r0, [pc, #72]	; (16998 <pdn_interface_getopt+0x190>)
   16950:	f006 fe69 	bl	1d626 <strncmp>
   16954:	b980      	cbnz	r0, 16978 <pdn_interface_getopt+0x170>
   16956:	2008      	movs	r0, #8
   16958:	f7fb f844 	bl	119e4 <bsd_os_errno_set>
   1695c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16960:	e77d      	b.n	1685e <pdn_interface_getopt+0x56>
   16962:	220a      	movs	r2, #10
   16964:	2108      	movs	r1, #8
   16966:	6032      	str	r2, [r6, #0]
   16968:	2204      	movs	r2, #4
   1696a:	e79d      	b.n	168a8 <pdn_interface_getopt+0xa0>
   1696c:	2016      	movs	r0, #22
   1696e:	f7fb f839 	bl	119e4 <bsd_os_errno_set>
   16972:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16976:	e775      	b.n	16864 <pdn_interface_getopt+0x5c>
   16978:	2005      	movs	r0, #5
   1697a:	f7fb f833 	bl	119e4 <bsd_os_errno_set>
   1697e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16982:	e76c      	b.n	1685e <pdn_interface_getopt+0x56>
   16984:	789a0000 	.word	0x789a0000
   16988:	2002091c 	.word	0x2002091c
   1698c:	0001f840 	.word	0x0001f840
   16990:	2002081c 	.word	0x2002081c
   16994:	0001f84c 	.word	0x0001f84c
   16998:	0001f870 	.word	0x0001f870
   1699c:	20020818 	.word	0x20020818

000169a0 <pdn_interface_pdn_id_get>:
   169a0:	2900      	cmp	r1, #0
   169a2:	f000 83b9 	beq.w	17118 <pdn_interface_pdn_id_get+0x778>
   169a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   169aa:	4ca3      	ldr	r4, [pc, #652]	; (16c38 <pdn_interface_pdn_id_get+0x298>)
   169ac:	2802      	cmp	r0, #2
   169ae:	b083      	sub	sp, #12
   169b0:	460d      	mov	r5, r1
   169b2:	6823      	ldr	r3, [r4, #0]
   169b4:	f000 8094 	beq.w	16ae0 <pdn_interface_pdn_id_get+0x140>
   169b8:	280a      	cmp	r0, #10
   169ba:	d03f      	beq.n	16a3c <pdn_interface_pdn_id_get+0x9c>
   169bc:	b11b      	cbz	r3, 169c6 <pdn_interface_pdn_id_get+0x26>
   169be:	689b      	ldr	r3, [r3, #8]
   169c0:	2b03      	cmp	r3, #3
   169c2:	f000 8127 	beq.w	16c14 <pdn_interface_pdn_id_get+0x274>
   169c6:	6863      	ldr	r3, [r4, #4]
   169c8:	b11b      	cbz	r3, 169d2 <pdn_interface_pdn_id_get+0x32>
   169ca:	689b      	ldr	r3, [r3, #8]
   169cc:	2b03      	cmp	r3, #3
   169ce:	f000 8110 	beq.w	16bf2 <pdn_interface_pdn_id_get+0x252>
   169d2:	68a3      	ldr	r3, [r4, #8]
   169d4:	b11b      	cbz	r3, 169de <pdn_interface_pdn_id_get+0x3e>
   169d6:	689b      	ldr	r3, [r3, #8]
   169d8:	2b03      	cmp	r3, #3
   169da:	f000 80f9 	beq.w	16bd0 <pdn_interface_pdn_id_get+0x230>
   169de:	68e3      	ldr	r3, [r4, #12]
   169e0:	b11b      	cbz	r3, 169ea <pdn_interface_pdn_id_get+0x4a>
   169e2:	689b      	ldr	r3, [r3, #8]
   169e4:	2b03      	cmp	r3, #3
   169e6:	f000 80e2 	beq.w	16bae <pdn_interface_pdn_id_get+0x20e>
   169ea:	6923      	ldr	r3, [r4, #16]
   169ec:	b11b      	cbz	r3, 169f6 <pdn_interface_pdn_id_get+0x56>
   169ee:	689b      	ldr	r3, [r3, #8]
   169f0:	2b03      	cmp	r3, #3
   169f2:	f000 8123 	beq.w	16c3c <pdn_interface_pdn_id_get+0x29c>
   169f6:	6963      	ldr	r3, [r4, #20]
   169f8:	b11b      	cbz	r3, 16a02 <pdn_interface_pdn_id_get+0x62>
   169fa:	689b      	ldr	r3, [r3, #8]
   169fc:	2b03      	cmp	r3, #3
   169fe:	f000 8161 	beq.w	16cc4 <pdn_interface_pdn_id_get+0x324>
   16a02:	69a3      	ldr	r3, [r4, #24]
   16a04:	b11b      	cbz	r3, 16a0e <pdn_interface_pdn_id_get+0x6e>
   16a06:	689b      	ldr	r3, [r3, #8]
   16a08:	2b03      	cmp	r3, #3
   16a0a:	f000 814a 	beq.w	16ca2 <pdn_interface_pdn_id_get+0x302>
   16a0e:	69e3      	ldr	r3, [r4, #28]
   16a10:	b11b      	cbz	r3, 16a1a <pdn_interface_pdn_id_get+0x7a>
   16a12:	689b      	ldr	r3, [r3, #8]
   16a14:	2b03      	cmp	r3, #3
   16a16:	f000 8133 	beq.w	16c80 <pdn_interface_pdn_id_get+0x2e0>
   16a1a:	6a23      	ldr	r3, [r4, #32]
   16a1c:	b11b      	cbz	r3, 16a26 <pdn_interface_pdn_id_get+0x86>
   16a1e:	689b      	ldr	r3, [r3, #8]
   16a20:	2b03      	cmp	r3, #3
   16a22:	f000 811c 	beq.w	16c5e <pdn_interface_pdn_id_get+0x2be>
   16a26:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16a28:	b11b      	cbz	r3, 16a32 <pdn_interface_pdn_id_get+0x92>
   16a2a:	689b      	ldr	r3, [r3, #8]
   16a2c:	2b03      	cmp	r3, #3
   16a2e:	f000 80ad 	beq.w	16b8c <pdn_interface_pdn_id_get+0x1ec>
   16a32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16a36:	b003      	add	sp, #12
   16a38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16a3c:	b11b      	cbz	r3, 16a46 <pdn_interface_pdn_id_get+0xa6>
   16a3e:	689b      	ldr	r3, [r3, #8]
   16a40:	2b03      	cmp	r3, #3
   16a42:	f000 8335 	beq.w	170b0 <pdn_interface_pdn_id_get+0x710>
   16a46:	6863      	ldr	r3, [r4, #4]
   16a48:	b11b      	cbz	r3, 16a52 <pdn_interface_pdn_id_get+0xb2>
   16a4a:	689b      	ldr	r3, [r3, #8]
   16a4c:	2b03      	cmp	r3, #3
   16a4e:	f000 82fd 	beq.w	1704c <pdn_interface_pdn_id_get+0x6ac>
   16a52:	68a3      	ldr	r3, [r4, #8]
   16a54:	b11b      	cbz	r3, 16a5e <pdn_interface_pdn_id_get+0xbe>
   16a56:	689b      	ldr	r3, [r3, #8]
   16a58:	2b03      	cmp	r3, #3
   16a5a:	f000 82d5 	beq.w	17008 <pdn_interface_pdn_id_get+0x668>
   16a5e:	68e3      	ldr	r3, [r4, #12]
   16a60:	b11b      	cbz	r3, 16a6a <pdn_interface_pdn_id_get+0xca>
   16a62:	689e      	ldr	r6, [r3, #8]
   16a64:	2e03      	cmp	r6, #3
   16a66:	f000 81f0 	beq.w	16e4a <pdn_interface_pdn_id_get+0x4aa>
   16a6a:	6923      	ldr	r3, [r4, #16]
   16a6c:	b11b      	cbz	r3, 16a76 <pdn_interface_pdn_id_get+0xd6>
   16a6e:	689b      	ldr	r3, [r3, #8]
   16a70:	2b03      	cmp	r3, #3
   16a72:	f000 8203 	beq.w	16e7c <pdn_interface_pdn_id_get+0x4dc>
   16a76:	6963      	ldr	r3, [r4, #20]
   16a78:	b11b      	cbz	r3, 16a82 <pdn_interface_pdn_id_get+0xe2>
   16a7a:	689b      	ldr	r3, [r3, #8]
   16a7c:	2b03      	cmp	r3, #3
   16a7e:	f000 8215 	beq.w	16eac <pdn_interface_pdn_id_get+0x50c>
   16a82:	69a3      	ldr	r3, [r4, #24]
   16a84:	b11b      	cbz	r3, 16a8e <pdn_interface_pdn_id_get+0xee>
   16a86:	689b      	ldr	r3, [r3, #8]
   16a88:	2b03      	cmp	r3, #3
   16a8a:	f000 8227 	beq.w	16edc <pdn_interface_pdn_id_get+0x53c>
   16a8e:	69e3      	ldr	r3, [r4, #28]
   16a90:	b11b      	cbz	r3, 16a9a <pdn_interface_pdn_id_get+0xfa>
   16a92:	689b      	ldr	r3, [r3, #8]
   16a94:	2b03      	cmp	r3, #3
   16a96:	f000 8239 	beq.w	16f0c <pdn_interface_pdn_id_get+0x56c>
   16a9a:	6a23      	ldr	r3, [r4, #32]
   16a9c:	b11b      	cbz	r3, 16aa6 <pdn_interface_pdn_id_get+0x106>
   16a9e:	689b      	ldr	r3, [r3, #8]
   16aa0:	2b03      	cmp	r3, #3
   16aa2:	f000 824d 	beq.w	16f40 <pdn_interface_pdn_id_get+0x5a0>
   16aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16aa8:	2b00      	cmp	r3, #0
   16aaa:	d0c2      	beq.n	16a32 <pdn_interface_pdn_id_get+0x92>
   16aac:	689b      	ldr	r3, [r3, #8]
   16aae:	2b03      	cmp	r3, #3
   16ab0:	d1bf      	bne.n	16a32 <pdn_interface_pdn_id_get+0x92>
   16ab2:	4628      	mov	r0, r5
   16ab4:	f006 fda4 	bl	1d600 <strlen>
   16ab8:	4606      	mov	r6, r0
   16aba:	6a60      	ldr	r0, [r4, #36]	; 0x24
   16abc:	300c      	adds	r0, #12
   16abe:	f006 fd9f 	bl	1d600 <strlen>
   16ac2:	42b0      	cmp	r0, r6
   16ac4:	d1b5      	bne.n	16a32 <pdn_interface_pdn_id_get+0x92>
   16ac6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   16ac8:	4628      	mov	r0, r5
   16aca:	310c      	adds	r1, #12
   16acc:	f006 fd9f 	bl	1d60e <strcmp>
   16ad0:	2800      	cmp	r0, #0
   16ad2:	d1ae      	bne.n	16a32 <pdn_interface_pdn_id_get+0x92>
   16ad4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16ad6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16ad8:	0792      	lsls	r2, r2, #30
   16ada:	d5aa      	bpl.n	16a32 <pdn_interface_pdn_id_get+0x92>
   16adc:	2609      	movs	r6, #9
   16ade:	e11a      	b.n	16d16 <pdn_interface_pdn_id_get+0x376>
   16ae0:	b11b      	cbz	r3, 16aea <pdn_interface_pdn_id_get+0x14a>
   16ae2:	689b      	ldr	r3, [r3, #8]
   16ae4:	2b03      	cmp	r3, #3
   16ae6:	f000 82fd 	beq.w	170e4 <pdn_interface_pdn_id_get+0x744>
   16aea:	6863      	ldr	r3, [r4, #4]
   16aec:	b11b      	cbz	r3, 16af6 <pdn_interface_pdn_id_get+0x156>
   16aee:	689b      	ldr	r3, [r3, #8]
   16af0:	2b03      	cmp	r3, #3
   16af2:	f000 82c5 	beq.w	17080 <pdn_interface_pdn_id_get+0x6e0>
   16af6:	68a3      	ldr	r3, [r4, #8]
   16af8:	b11b      	cbz	r3, 16b02 <pdn_interface_pdn_id_get+0x162>
   16afa:	689b      	ldr	r3, [r3, #8]
   16afc:	2b03      	cmp	r3, #3
   16afe:	f000 8269 	beq.w	16fd4 <pdn_interface_pdn_id_get+0x634>
   16b02:	68e3      	ldr	r3, [r4, #12]
   16b04:	b11b      	cbz	r3, 16b0e <pdn_interface_pdn_id_get+0x16e>
   16b06:	689e      	ldr	r6, [r3, #8]
   16b08:	2e03      	cmp	r6, #3
   16b0a:	f000 80ec 	beq.w	16ce6 <pdn_interface_pdn_id_get+0x346>
   16b0e:	6923      	ldr	r3, [r4, #16]
   16b10:	b11b      	cbz	r3, 16b1a <pdn_interface_pdn_id_get+0x17a>
   16b12:	689b      	ldr	r3, [r3, #8]
   16b14:	2b03      	cmp	r3, #3
   16b16:	f000 814a 	beq.w	16dae <pdn_interface_pdn_id_get+0x40e>
   16b1a:	6963      	ldr	r3, [r4, #20]
   16b1c:	b11b      	cbz	r3, 16b26 <pdn_interface_pdn_id_get+0x186>
   16b1e:	689b      	ldr	r3, [r3, #8]
   16b20:	2b03      	cmp	r3, #3
   16b22:	f000 815e 	beq.w	16de2 <pdn_interface_pdn_id_get+0x442>
   16b26:	69a3      	ldr	r3, [r4, #24]
   16b28:	b11b      	cbz	r3, 16b32 <pdn_interface_pdn_id_get+0x192>
   16b2a:	689b      	ldr	r3, [r3, #8]
   16b2c:	2b03      	cmp	r3, #3
   16b2e:	f000 8172 	beq.w	16e16 <pdn_interface_pdn_id_get+0x476>
   16b32:	69e3      	ldr	r3, [r4, #28]
   16b34:	b11b      	cbz	r3, 16b3e <pdn_interface_pdn_id_get+0x19e>
   16b36:	689b      	ldr	r3, [r3, #8]
   16b38:	2b03      	cmp	r3, #3
   16b3a:	f000 821b 	beq.w	16f74 <pdn_interface_pdn_id_get+0x5d4>
   16b3e:	6a23      	ldr	r3, [r4, #32]
   16b40:	b11b      	cbz	r3, 16b4a <pdn_interface_pdn_id_get+0x1aa>
   16b42:	689b      	ldr	r3, [r3, #8]
   16b44:	2b03      	cmp	r3, #3
   16b46:	f000 822d 	beq.w	16fa4 <pdn_interface_pdn_id_get+0x604>
   16b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16b4c:	2b00      	cmp	r3, #0
   16b4e:	f43f af70 	beq.w	16a32 <pdn_interface_pdn_id_get+0x92>
   16b52:	689b      	ldr	r3, [r3, #8]
   16b54:	2b03      	cmp	r3, #3
   16b56:	f47f af6c 	bne.w	16a32 <pdn_interface_pdn_id_get+0x92>
   16b5a:	4628      	mov	r0, r5
   16b5c:	f006 fd50 	bl	1d600 <strlen>
   16b60:	4606      	mov	r6, r0
   16b62:	6a60      	ldr	r0, [r4, #36]	; 0x24
   16b64:	300c      	adds	r0, #12
   16b66:	f006 fd4b 	bl	1d600 <strlen>
   16b6a:	4286      	cmp	r6, r0
   16b6c:	f47f af61 	bne.w	16a32 <pdn_interface_pdn_id_get+0x92>
   16b70:	6a61      	ldr	r1, [r4, #36]	; 0x24
   16b72:	4628      	mov	r0, r5
   16b74:	310c      	adds	r1, #12
   16b76:	f006 fd4a 	bl	1d60e <strcmp>
   16b7a:	2800      	cmp	r0, #0
   16b7c:	f47f af59 	bne.w	16a32 <pdn_interface_pdn_id_get+0x92>
   16b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16b82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16b84:	07d2      	lsls	r2, r2, #31
   16b86:	f57f af54 	bpl.w	16a32 <pdn_interface_pdn_id_get+0x92>
   16b8a:	e7a7      	b.n	16adc <pdn_interface_pdn_id_get+0x13c>
   16b8c:	4628      	mov	r0, r5
   16b8e:	f006 fd37 	bl	1d600 <strlen>
   16b92:	4606      	mov	r6, r0
   16b94:	6a60      	ldr	r0, [r4, #36]	; 0x24
   16b96:	300c      	adds	r0, #12
   16b98:	f006 fd32 	bl	1d600 <strlen>
   16b9c:	42b0      	cmp	r0, r6
   16b9e:	f47f af48 	bne.w	16a32 <pdn_interface_pdn_id_get+0x92>
   16ba2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   16ba4:	4628      	mov	r0, r5
   16ba6:	310c      	adds	r1, #12
   16ba8:	f006 fd31 	bl	1d60e <strcmp>
   16bac:	e741      	b.n	16a32 <pdn_interface_pdn_id_get+0x92>
   16bae:	4628      	mov	r0, r5
   16bb0:	f006 fd26 	bl	1d600 <strlen>
   16bb4:	4606      	mov	r6, r0
   16bb6:	68e0      	ldr	r0, [r4, #12]
   16bb8:	300c      	adds	r0, #12
   16bba:	f006 fd21 	bl	1d600 <strlen>
   16bbe:	4286      	cmp	r6, r0
   16bc0:	f47f af13 	bne.w	169ea <pdn_interface_pdn_id_get+0x4a>
   16bc4:	68e1      	ldr	r1, [r4, #12]
   16bc6:	4628      	mov	r0, r5
   16bc8:	310c      	adds	r1, #12
   16bca:	f006 fd20 	bl	1d60e <strcmp>
   16bce:	e70c      	b.n	169ea <pdn_interface_pdn_id_get+0x4a>
   16bd0:	4628      	mov	r0, r5
   16bd2:	f006 fd15 	bl	1d600 <strlen>
   16bd6:	4606      	mov	r6, r0
   16bd8:	68a0      	ldr	r0, [r4, #8]
   16bda:	300c      	adds	r0, #12
   16bdc:	f006 fd10 	bl	1d600 <strlen>
   16be0:	4286      	cmp	r6, r0
   16be2:	f47f aefc 	bne.w	169de <pdn_interface_pdn_id_get+0x3e>
   16be6:	68a1      	ldr	r1, [r4, #8]
   16be8:	4628      	mov	r0, r5
   16bea:	310c      	adds	r1, #12
   16bec:	f006 fd0f 	bl	1d60e <strcmp>
   16bf0:	e6f5      	b.n	169de <pdn_interface_pdn_id_get+0x3e>
   16bf2:	4628      	mov	r0, r5
   16bf4:	f006 fd04 	bl	1d600 <strlen>
   16bf8:	4606      	mov	r6, r0
   16bfa:	6860      	ldr	r0, [r4, #4]
   16bfc:	300c      	adds	r0, #12
   16bfe:	f006 fcff 	bl	1d600 <strlen>
   16c02:	4286      	cmp	r6, r0
   16c04:	f47f aee5 	bne.w	169d2 <pdn_interface_pdn_id_get+0x32>
   16c08:	6861      	ldr	r1, [r4, #4]
   16c0a:	4628      	mov	r0, r5
   16c0c:	310c      	adds	r1, #12
   16c0e:	f006 fcfe 	bl	1d60e <strcmp>
   16c12:	e6de      	b.n	169d2 <pdn_interface_pdn_id_get+0x32>
   16c14:	4608      	mov	r0, r1
   16c16:	f006 fcf3 	bl	1d600 <strlen>
   16c1a:	4606      	mov	r6, r0
   16c1c:	6820      	ldr	r0, [r4, #0]
   16c1e:	300c      	adds	r0, #12
   16c20:	f006 fcee 	bl	1d600 <strlen>
   16c24:	4286      	cmp	r6, r0
   16c26:	f47f aece 	bne.w	169c6 <pdn_interface_pdn_id_get+0x26>
   16c2a:	6821      	ldr	r1, [r4, #0]
   16c2c:	4628      	mov	r0, r5
   16c2e:	310c      	adds	r1, #12
   16c30:	f006 fced 	bl	1d60e <strcmp>
   16c34:	e6c7      	b.n	169c6 <pdn_interface_pdn_id_get+0x26>
   16c36:	bf00      	nop
   16c38:	2002091c 	.word	0x2002091c
   16c3c:	4628      	mov	r0, r5
   16c3e:	f006 fcdf 	bl	1d600 <strlen>
   16c42:	4606      	mov	r6, r0
   16c44:	6920      	ldr	r0, [r4, #16]
   16c46:	300c      	adds	r0, #12
   16c48:	f006 fcda 	bl	1d600 <strlen>
   16c4c:	4286      	cmp	r6, r0
   16c4e:	f47f aed2 	bne.w	169f6 <pdn_interface_pdn_id_get+0x56>
   16c52:	6921      	ldr	r1, [r4, #16]
   16c54:	4628      	mov	r0, r5
   16c56:	310c      	adds	r1, #12
   16c58:	f006 fcd9 	bl	1d60e <strcmp>
   16c5c:	e6cb      	b.n	169f6 <pdn_interface_pdn_id_get+0x56>
   16c5e:	4628      	mov	r0, r5
   16c60:	f006 fcce 	bl	1d600 <strlen>
   16c64:	4606      	mov	r6, r0
   16c66:	6a20      	ldr	r0, [r4, #32]
   16c68:	300c      	adds	r0, #12
   16c6a:	f006 fcc9 	bl	1d600 <strlen>
   16c6e:	4286      	cmp	r6, r0
   16c70:	f47f aed9 	bne.w	16a26 <pdn_interface_pdn_id_get+0x86>
   16c74:	6a21      	ldr	r1, [r4, #32]
   16c76:	4628      	mov	r0, r5
   16c78:	310c      	adds	r1, #12
   16c7a:	f006 fcc8 	bl	1d60e <strcmp>
   16c7e:	e6d2      	b.n	16a26 <pdn_interface_pdn_id_get+0x86>
   16c80:	4628      	mov	r0, r5
   16c82:	f006 fcbd 	bl	1d600 <strlen>
   16c86:	4606      	mov	r6, r0
   16c88:	69e0      	ldr	r0, [r4, #28]
   16c8a:	300c      	adds	r0, #12
   16c8c:	f006 fcb8 	bl	1d600 <strlen>
   16c90:	4286      	cmp	r6, r0
   16c92:	f47f aec2 	bne.w	16a1a <pdn_interface_pdn_id_get+0x7a>
   16c96:	69e1      	ldr	r1, [r4, #28]
   16c98:	4628      	mov	r0, r5
   16c9a:	310c      	adds	r1, #12
   16c9c:	f006 fcb7 	bl	1d60e <strcmp>
   16ca0:	e6bb      	b.n	16a1a <pdn_interface_pdn_id_get+0x7a>
   16ca2:	4628      	mov	r0, r5
   16ca4:	f006 fcac 	bl	1d600 <strlen>
   16ca8:	4606      	mov	r6, r0
   16caa:	69a0      	ldr	r0, [r4, #24]
   16cac:	300c      	adds	r0, #12
   16cae:	f006 fca7 	bl	1d600 <strlen>
   16cb2:	4286      	cmp	r6, r0
   16cb4:	f47f aeab 	bne.w	16a0e <pdn_interface_pdn_id_get+0x6e>
   16cb8:	69a1      	ldr	r1, [r4, #24]
   16cba:	4628      	mov	r0, r5
   16cbc:	310c      	adds	r1, #12
   16cbe:	f006 fca6 	bl	1d60e <strcmp>
   16cc2:	e6a4      	b.n	16a0e <pdn_interface_pdn_id_get+0x6e>
   16cc4:	4628      	mov	r0, r5
   16cc6:	f006 fc9b 	bl	1d600 <strlen>
   16cca:	4606      	mov	r6, r0
   16ccc:	6960      	ldr	r0, [r4, #20]
   16cce:	300c      	adds	r0, #12
   16cd0:	f006 fc96 	bl	1d600 <strlen>
   16cd4:	4286      	cmp	r6, r0
   16cd6:	f47f ae94 	bne.w	16a02 <pdn_interface_pdn_id_get+0x62>
   16cda:	6961      	ldr	r1, [r4, #20]
   16cdc:	4628      	mov	r0, r5
   16cde:	310c      	adds	r1, #12
   16ce0:	f006 fc95 	bl	1d60e <strcmp>
   16ce4:	e68d      	b.n	16a02 <pdn_interface_pdn_id_get+0x62>
   16ce6:	4628      	mov	r0, r5
   16ce8:	f006 fc8a 	bl	1d600 <strlen>
   16cec:	4607      	mov	r7, r0
   16cee:	68e0      	ldr	r0, [r4, #12]
   16cf0:	300c      	adds	r0, #12
   16cf2:	f006 fc85 	bl	1d600 <strlen>
   16cf6:	4287      	cmp	r7, r0
   16cf8:	f47f af09 	bne.w	16b0e <pdn_interface_pdn_id_get+0x16e>
   16cfc:	68e1      	ldr	r1, [r4, #12]
   16cfe:	4628      	mov	r0, r5
   16d00:	310c      	adds	r1, #12
   16d02:	f006 fc84 	bl	1d60e <strcmp>
   16d06:	2800      	cmp	r0, #0
   16d08:	f47f af01 	bne.w	16b0e <pdn_interface_pdn_id_get+0x16e>
   16d0c:	68e3      	ldr	r3, [r4, #12]
   16d0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16d10:	07d1      	lsls	r1, r2, #31
   16d12:	f57f aefc 	bpl.w	16b0e <pdn_interface_pdn_id_get+0x16e>
   16d16:	6858      	ldr	r0, [r3, #4]
   16d18:	1c43      	adds	r3, r0, #1
   16d1a:	f47f ae8c 	bne.w	16a36 <pdn_interface_pdn_id_get+0x96>
   16d1e:	4dc6      	ldr	r5, [pc, #792]	; (17038 <pdn_interface_pdn_id_get+0x698>)
   16d20:	4ac6      	ldr	r2, [pc, #792]	; (1703c <pdn_interface_pdn_id_get+0x69c>)
   16d22:	f44f 7180 	mov.w	r1, #256	; 0x100
   16d26:	4628      	mov	r0, r5
   16d28:	f7fa f90e 	bl	10f48 <snprintf>
   16d2c:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   16d30:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   16d34:	681b      	ldr	r3, [r3, #0]
   16d36:	4ac2      	ldr	r2, [pc, #776]	; (17040 <pdn_interface_pdn_id_get+0x6a0>)
   16d38:	4428      	add	r0, r5
   16d3a:	f8df 830c 	ldr.w	r8, [pc, #780]	; 17048 <pdn_interface_pdn_id_get+0x6a8>
   16d3e:	f7fa f903 	bl	10f48 <snprintf>
   16d42:	4628      	mov	r0, r5
   16d44:	f8d8 9000 	ldr.w	r9, [r8]
   16d48:	2700      	movs	r7, #0
   16d4a:	f006 fc59 	bl	1d600 <strlen>
   16d4e:	4629      	mov	r1, r5
   16d50:	4602      	mov	r2, r0
   16d52:	463b      	mov	r3, r7
   16d54:	4648      	mov	r0, r9
   16d56:	9701      	str	r7, [sp, #4]
   16d58:	9700      	str	r7, [sp, #0]
   16d5a:	f7fc f94d 	bl	12ff8 <at_interface_write>
   16d5e:	4681      	mov	r9, r0
   16d60:	4628      	mov	r0, r5
   16d62:	f006 fc4d 	bl	1d600 <strlen>
   16d66:	4548      	cmp	r0, r9
   16d68:	f040 81e9 	bne.w	1713e <pdn_interface_pdn_id_get+0x79e>
   16d6c:	463b      	mov	r3, r7
   16d6e:	f44f 7280 	mov.w	r2, #256	; 0x100
   16d72:	e9cd 7700 	strd	r7, r7, [sp]
   16d76:	4629      	mov	r1, r5
   16d78:	f8d8 0000 	ldr.w	r0, [r8]
   16d7c:	f7fc fa24 	bl	131c8 <at_interface_read>
   16d80:	4607      	mov	r7, r0
   16d82:	48b0      	ldr	r0, [pc, #704]	; (17044 <pdn_interface_pdn_id_get+0x6a4>)
   16d84:	f006 fc3c 	bl	1d600 <strlen>
   16d88:	4287      	cmp	r7, r0
   16d8a:	4602      	mov	r2, r0
   16d8c:	f2c0 81c7 	blt.w	1711e <pdn_interface_pdn_id_get+0x77e>
   16d90:	4629      	mov	r1, r5
   16d92:	48ac      	ldr	r0, [pc, #688]	; (17044 <pdn_interface_pdn_id_get+0x6a4>)
   16d94:	f006 fc47 	bl	1d626 <strncmp>
   16d98:	2800      	cmp	r0, #0
   16d9a:	f040 81c0 	bne.w	1711e <pdn_interface_pdn_id_get+0x77e>
   16d9e:	4629      	mov	r1, r5
   16da0:	4630      	mov	r0, r6
   16da2:	f7ff f92b 	bl	15ffc <pdn_id_get_parser>
   16da6:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   16daa:	6858      	ldr	r0, [r3, #4]
   16dac:	e643      	b.n	16a36 <pdn_interface_pdn_id_get+0x96>
   16dae:	4628      	mov	r0, r5
   16db0:	f006 fc26 	bl	1d600 <strlen>
   16db4:	4606      	mov	r6, r0
   16db6:	6920      	ldr	r0, [r4, #16]
   16db8:	300c      	adds	r0, #12
   16dba:	f006 fc21 	bl	1d600 <strlen>
   16dbe:	4286      	cmp	r6, r0
   16dc0:	f47f aeab 	bne.w	16b1a <pdn_interface_pdn_id_get+0x17a>
   16dc4:	6921      	ldr	r1, [r4, #16]
   16dc6:	4628      	mov	r0, r5
   16dc8:	310c      	adds	r1, #12
   16dca:	f006 fc20 	bl	1d60e <strcmp>
   16dce:	2800      	cmp	r0, #0
   16dd0:	f47f aea3 	bne.w	16b1a <pdn_interface_pdn_id_get+0x17a>
   16dd4:	6923      	ldr	r3, [r4, #16]
   16dd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16dd8:	07d2      	lsls	r2, r2, #31
   16dda:	f57f ae9e 	bpl.w	16b1a <pdn_interface_pdn_id_get+0x17a>
   16dde:	2604      	movs	r6, #4
   16de0:	e799      	b.n	16d16 <pdn_interface_pdn_id_get+0x376>
   16de2:	4628      	mov	r0, r5
   16de4:	f006 fc0c 	bl	1d600 <strlen>
   16de8:	4606      	mov	r6, r0
   16dea:	6960      	ldr	r0, [r4, #20]
   16dec:	300c      	adds	r0, #12
   16dee:	f006 fc07 	bl	1d600 <strlen>
   16df2:	4286      	cmp	r6, r0
   16df4:	f47f ae97 	bne.w	16b26 <pdn_interface_pdn_id_get+0x186>
   16df8:	6961      	ldr	r1, [r4, #20]
   16dfa:	4628      	mov	r0, r5
   16dfc:	310c      	adds	r1, #12
   16dfe:	f006 fc06 	bl	1d60e <strcmp>
   16e02:	2800      	cmp	r0, #0
   16e04:	f47f ae8f 	bne.w	16b26 <pdn_interface_pdn_id_get+0x186>
   16e08:	6963      	ldr	r3, [r4, #20]
   16e0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16e0c:	07d7      	lsls	r7, r2, #31
   16e0e:	f57f ae8a 	bpl.w	16b26 <pdn_interface_pdn_id_get+0x186>
   16e12:	2605      	movs	r6, #5
   16e14:	e77f      	b.n	16d16 <pdn_interface_pdn_id_get+0x376>
   16e16:	4628      	mov	r0, r5
   16e18:	f006 fbf2 	bl	1d600 <strlen>
   16e1c:	4606      	mov	r6, r0
   16e1e:	69a0      	ldr	r0, [r4, #24]
   16e20:	300c      	adds	r0, #12
   16e22:	f006 fbed 	bl	1d600 <strlen>
   16e26:	4286      	cmp	r6, r0
   16e28:	f47f ae83 	bne.w	16b32 <pdn_interface_pdn_id_get+0x192>
   16e2c:	69a1      	ldr	r1, [r4, #24]
   16e2e:	4628      	mov	r0, r5
   16e30:	310c      	adds	r1, #12
   16e32:	f006 fbec 	bl	1d60e <strcmp>
   16e36:	2800      	cmp	r0, #0
   16e38:	f47f ae7b 	bne.w	16b32 <pdn_interface_pdn_id_get+0x192>
   16e3c:	69a3      	ldr	r3, [r4, #24]
   16e3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16e40:	07d6      	lsls	r6, r2, #31
   16e42:	f57f ae76 	bpl.w	16b32 <pdn_interface_pdn_id_get+0x192>
   16e46:	2606      	movs	r6, #6
   16e48:	e765      	b.n	16d16 <pdn_interface_pdn_id_get+0x376>
   16e4a:	4628      	mov	r0, r5
   16e4c:	f006 fbd8 	bl	1d600 <strlen>
   16e50:	4607      	mov	r7, r0
   16e52:	68e0      	ldr	r0, [r4, #12]
   16e54:	300c      	adds	r0, #12
   16e56:	f006 fbd3 	bl	1d600 <strlen>
   16e5a:	4287      	cmp	r7, r0
   16e5c:	f47f ae05 	bne.w	16a6a <pdn_interface_pdn_id_get+0xca>
   16e60:	68e1      	ldr	r1, [r4, #12]
   16e62:	4628      	mov	r0, r5
   16e64:	310c      	adds	r1, #12
   16e66:	f006 fbd2 	bl	1d60e <strcmp>
   16e6a:	2800      	cmp	r0, #0
   16e6c:	f47f adfd 	bne.w	16a6a <pdn_interface_pdn_id_get+0xca>
   16e70:	68e3      	ldr	r3, [r4, #12]
   16e72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16e74:	0791      	lsls	r1, r2, #30
   16e76:	f53f af4e 	bmi.w	16d16 <pdn_interface_pdn_id_get+0x376>
   16e7a:	e5f6      	b.n	16a6a <pdn_interface_pdn_id_get+0xca>
   16e7c:	4628      	mov	r0, r5
   16e7e:	f006 fbbf 	bl	1d600 <strlen>
   16e82:	4606      	mov	r6, r0
   16e84:	6920      	ldr	r0, [r4, #16]
   16e86:	300c      	adds	r0, #12
   16e88:	f006 fbba 	bl	1d600 <strlen>
   16e8c:	4286      	cmp	r6, r0
   16e8e:	f47f adf2 	bne.w	16a76 <pdn_interface_pdn_id_get+0xd6>
   16e92:	6921      	ldr	r1, [r4, #16]
   16e94:	4628      	mov	r0, r5
   16e96:	310c      	adds	r1, #12
   16e98:	f006 fbb9 	bl	1d60e <strcmp>
   16e9c:	2800      	cmp	r0, #0
   16e9e:	f47f adea 	bne.w	16a76 <pdn_interface_pdn_id_get+0xd6>
   16ea2:	6923      	ldr	r3, [r4, #16]
   16ea4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16ea6:	0792      	lsls	r2, r2, #30
   16ea8:	d499      	bmi.n	16dde <pdn_interface_pdn_id_get+0x43e>
   16eaa:	e5e4      	b.n	16a76 <pdn_interface_pdn_id_get+0xd6>
   16eac:	4628      	mov	r0, r5
   16eae:	f006 fba7 	bl	1d600 <strlen>
   16eb2:	4606      	mov	r6, r0
   16eb4:	6960      	ldr	r0, [r4, #20]
   16eb6:	300c      	adds	r0, #12
   16eb8:	f006 fba2 	bl	1d600 <strlen>
   16ebc:	4286      	cmp	r6, r0
   16ebe:	f47f ade0 	bne.w	16a82 <pdn_interface_pdn_id_get+0xe2>
   16ec2:	6961      	ldr	r1, [r4, #20]
   16ec4:	4628      	mov	r0, r5
   16ec6:	310c      	adds	r1, #12
   16ec8:	f006 fba1 	bl	1d60e <strcmp>
   16ecc:	2800      	cmp	r0, #0
   16ece:	f47f add8 	bne.w	16a82 <pdn_interface_pdn_id_get+0xe2>
   16ed2:	6963      	ldr	r3, [r4, #20]
   16ed4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16ed6:	0797      	lsls	r7, r2, #30
   16ed8:	d49b      	bmi.n	16e12 <pdn_interface_pdn_id_get+0x472>
   16eda:	e5d2      	b.n	16a82 <pdn_interface_pdn_id_get+0xe2>
   16edc:	4628      	mov	r0, r5
   16ede:	f006 fb8f 	bl	1d600 <strlen>
   16ee2:	4606      	mov	r6, r0
   16ee4:	69a0      	ldr	r0, [r4, #24]
   16ee6:	300c      	adds	r0, #12
   16ee8:	f006 fb8a 	bl	1d600 <strlen>
   16eec:	4286      	cmp	r6, r0
   16eee:	f47f adce 	bne.w	16a8e <pdn_interface_pdn_id_get+0xee>
   16ef2:	69a1      	ldr	r1, [r4, #24]
   16ef4:	4628      	mov	r0, r5
   16ef6:	310c      	adds	r1, #12
   16ef8:	f006 fb89 	bl	1d60e <strcmp>
   16efc:	2800      	cmp	r0, #0
   16efe:	f47f adc6 	bne.w	16a8e <pdn_interface_pdn_id_get+0xee>
   16f02:	69a3      	ldr	r3, [r4, #24]
   16f04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16f06:	0796      	lsls	r6, r2, #30
   16f08:	d49d      	bmi.n	16e46 <pdn_interface_pdn_id_get+0x4a6>
   16f0a:	e5c0      	b.n	16a8e <pdn_interface_pdn_id_get+0xee>
   16f0c:	4628      	mov	r0, r5
   16f0e:	f006 fb77 	bl	1d600 <strlen>
   16f12:	4606      	mov	r6, r0
   16f14:	69e0      	ldr	r0, [r4, #28]
   16f16:	300c      	adds	r0, #12
   16f18:	f006 fb72 	bl	1d600 <strlen>
   16f1c:	4286      	cmp	r6, r0
   16f1e:	f47f adbc 	bne.w	16a9a <pdn_interface_pdn_id_get+0xfa>
   16f22:	69e1      	ldr	r1, [r4, #28]
   16f24:	4628      	mov	r0, r5
   16f26:	310c      	adds	r1, #12
   16f28:	f006 fb71 	bl	1d60e <strcmp>
   16f2c:	2800      	cmp	r0, #0
   16f2e:	f47f adb4 	bne.w	16a9a <pdn_interface_pdn_id_get+0xfa>
   16f32:	69e3      	ldr	r3, [r4, #28]
   16f34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16f36:	0790      	lsls	r0, r2, #30
   16f38:	f57f adaf 	bpl.w	16a9a <pdn_interface_pdn_id_get+0xfa>
   16f3c:	2607      	movs	r6, #7
   16f3e:	e6ea      	b.n	16d16 <pdn_interface_pdn_id_get+0x376>
   16f40:	4628      	mov	r0, r5
   16f42:	f006 fb5d 	bl	1d600 <strlen>
   16f46:	4606      	mov	r6, r0
   16f48:	6a20      	ldr	r0, [r4, #32]
   16f4a:	300c      	adds	r0, #12
   16f4c:	f006 fb58 	bl	1d600 <strlen>
   16f50:	4286      	cmp	r6, r0
   16f52:	f47f ada8 	bne.w	16aa6 <pdn_interface_pdn_id_get+0x106>
   16f56:	6a21      	ldr	r1, [r4, #32]
   16f58:	4628      	mov	r0, r5
   16f5a:	310c      	adds	r1, #12
   16f5c:	f006 fb57 	bl	1d60e <strcmp>
   16f60:	2800      	cmp	r0, #0
   16f62:	f47f ada0 	bne.w	16aa6 <pdn_interface_pdn_id_get+0x106>
   16f66:	6a23      	ldr	r3, [r4, #32]
   16f68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16f6a:	0791      	lsls	r1, r2, #30
   16f6c:	f57f ad9b 	bpl.w	16aa6 <pdn_interface_pdn_id_get+0x106>
   16f70:	2608      	movs	r6, #8
   16f72:	e6d0      	b.n	16d16 <pdn_interface_pdn_id_get+0x376>
   16f74:	4628      	mov	r0, r5
   16f76:	f006 fb43 	bl	1d600 <strlen>
   16f7a:	4606      	mov	r6, r0
   16f7c:	69e0      	ldr	r0, [r4, #28]
   16f7e:	300c      	adds	r0, #12
   16f80:	f006 fb3e 	bl	1d600 <strlen>
   16f84:	4286      	cmp	r6, r0
   16f86:	f47f adda 	bne.w	16b3e <pdn_interface_pdn_id_get+0x19e>
   16f8a:	69e1      	ldr	r1, [r4, #28]
   16f8c:	4628      	mov	r0, r5
   16f8e:	310c      	adds	r1, #12
   16f90:	f006 fb3d 	bl	1d60e <strcmp>
   16f94:	2800      	cmp	r0, #0
   16f96:	f47f add2 	bne.w	16b3e <pdn_interface_pdn_id_get+0x19e>
   16f9a:	69e3      	ldr	r3, [r4, #28]
   16f9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16f9e:	07d0      	lsls	r0, r2, #31
   16fa0:	d4cc      	bmi.n	16f3c <pdn_interface_pdn_id_get+0x59c>
   16fa2:	e5cc      	b.n	16b3e <pdn_interface_pdn_id_get+0x19e>
   16fa4:	4628      	mov	r0, r5
   16fa6:	f006 fb2b 	bl	1d600 <strlen>
   16faa:	4606      	mov	r6, r0
   16fac:	6a20      	ldr	r0, [r4, #32]
   16fae:	300c      	adds	r0, #12
   16fb0:	f006 fb26 	bl	1d600 <strlen>
   16fb4:	4286      	cmp	r6, r0
   16fb6:	f47f adc8 	bne.w	16b4a <pdn_interface_pdn_id_get+0x1aa>
   16fba:	6a21      	ldr	r1, [r4, #32]
   16fbc:	4628      	mov	r0, r5
   16fbe:	310c      	adds	r1, #12
   16fc0:	f006 fb25 	bl	1d60e <strcmp>
   16fc4:	2800      	cmp	r0, #0
   16fc6:	f47f adc0 	bne.w	16b4a <pdn_interface_pdn_id_get+0x1aa>
   16fca:	6a23      	ldr	r3, [r4, #32]
   16fcc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16fce:	07d1      	lsls	r1, r2, #31
   16fd0:	d4ce      	bmi.n	16f70 <pdn_interface_pdn_id_get+0x5d0>
   16fd2:	e5ba      	b.n	16b4a <pdn_interface_pdn_id_get+0x1aa>
   16fd4:	4628      	mov	r0, r5
   16fd6:	f006 fb13 	bl	1d600 <strlen>
   16fda:	4606      	mov	r6, r0
   16fdc:	68a0      	ldr	r0, [r4, #8]
   16fde:	300c      	adds	r0, #12
   16fe0:	f006 fb0e 	bl	1d600 <strlen>
   16fe4:	4286      	cmp	r6, r0
   16fe6:	f47f ad8c 	bne.w	16b02 <pdn_interface_pdn_id_get+0x162>
   16fea:	68a1      	ldr	r1, [r4, #8]
   16fec:	4628      	mov	r0, r5
   16fee:	310c      	adds	r1, #12
   16ff0:	f006 fb0d 	bl	1d60e <strcmp>
   16ff4:	2800      	cmp	r0, #0
   16ff6:	f47f ad84 	bne.w	16b02 <pdn_interface_pdn_id_get+0x162>
   16ffa:	68a3      	ldr	r3, [r4, #8]
   16ffc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16ffe:	07d0      	lsls	r0, r2, #31
   17000:	f57f ad7f 	bpl.w	16b02 <pdn_interface_pdn_id_get+0x162>
   17004:	2602      	movs	r6, #2
   17006:	e686      	b.n	16d16 <pdn_interface_pdn_id_get+0x376>
   17008:	4628      	mov	r0, r5
   1700a:	f006 faf9 	bl	1d600 <strlen>
   1700e:	4606      	mov	r6, r0
   17010:	68a0      	ldr	r0, [r4, #8]
   17012:	300c      	adds	r0, #12
   17014:	f006 faf4 	bl	1d600 <strlen>
   17018:	4286      	cmp	r6, r0
   1701a:	f47f ad20 	bne.w	16a5e <pdn_interface_pdn_id_get+0xbe>
   1701e:	68a1      	ldr	r1, [r4, #8]
   17020:	4628      	mov	r0, r5
   17022:	310c      	adds	r1, #12
   17024:	f006 faf3 	bl	1d60e <strcmp>
   17028:	2800      	cmp	r0, #0
   1702a:	f47f ad18 	bne.w	16a5e <pdn_interface_pdn_id_get+0xbe>
   1702e:	68a3      	ldr	r3, [r4, #8]
   17030:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   17032:	0790      	lsls	r0, r2, #30
   17034:	d4e6      	bmi.n	17004 <pdn_interface_pdn_id_get+0x664>
   17036:	e512      	b.n	16a5e <pdn_interface_pdn_id_get+0xbe>
   17038:	2002081c 	.word	0x2002081c
   1703c:	0001f81c 	.word	0x0001f81c
   17040:	0001f818 	.word	0x0001f818
   17044:	0001f82c 	.word	0x0001f82c
   17048:	20020818 	.word	0x20020818
   1704c:	4628      	mov	r0, r5
   1704e:	f006 fad7 	bl	1d600 <strlen>
   17052:	4606      	mov	r6, r0
   17054:	6860      	ldr	r0, [r4, #4]
   17056:	300c      	adds	r0, #12
   17058:	f006 fad2 	bl	1d600 <strlen>
   1705c:	4286      	cmp	r6, r0
   1705e:	f47f acf8 	bne.w	16a52 <pdn_interface_pdn_id_get+0xb2>
   17062:	6861      	ldr	r1, [r4, #4]
   17064:	4628      	mov	r0, r5
   17066:	310c      	adds	r1, #12
   17068:	f006 fad1 	bl	1d60e <strcmp>
   1706c:	2800      	cmp	r0, #0
   1706e:	f47f acf0 	bne.w	16a52 <pdn_interface_pdn_id_get+0xb2>
   17072:	6863      	ldr	r3, [r4, #4]
   17074:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   17076:	0796      	lsls	r6, r2, #30
   17078:	f57f aceb 	bpl.w	16a52 <pdn_interface_pdn_id_get+0xb2>
   1707c:	2601      	movs	r6, #1
   1707e:	e64a      	b.n	16d16 <pdn_interface_pdn_id_get+0x376>
   17080:	4628      	mov	r0, r5
   17082:	f006 fabd 	bl	1d600 <strlen>
   17086:	4606      	mov	r6, r0
   17088:	6860      	ldr	r0, [r4, #4]
   1708a:	300c      	adds	r0, #12
   1708c:	f006 fab8 	bl	1d600 <strlen>
   17090:	4286      	cmp	r6, r0
   17092:	f47f ad30 	bne.w	16af6 <pdn_interface_pdn_id_get+0x156>
   17096:	6861      	ldr	r1, [r4, #4]
   17098:	4628      	mov	r0, r5
   1709a:	310c      	adds	r1, #12
   1709c:	f006 fab7 	bl	1d60e <strcmp>
   170a0:	2800      	cmp	r0, #0
   170a2:	f47f ad28 	bne.w	16af6 <pdn_interface_pdn_id_get+0x156>
   170a6:	6863      	ldr	r3, [r4, #4]
   170a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   170aa:	07d6      	lsls	r6, r2, #31
   170ac:	d4e6      	bmi.n	1707c <pdn_interface_pdn_id_get+0x6dc>
   170ae:	e522      	b.n	16af6 <pdn_interface_pdn_id_get+0x156>
   170b0:	4608      	mov	r0, r1
   170b2:	f006 faa5 	bl	1d600 <strlen>
   170b6:	4606      	mov	r6, r0
   170b8:	6820      	ldr	r0, [r4, #0]
   170ba:	300c      	adds	r0, #12
   170bc:	f006 faa0 	bl	1d600 <strlen>
   170c0:	4286      	cmp	r6, r0
   170c2:	f47f acc0 	bne.w	16a46 <pdn_interface_pdn_id_get+0xa6>
   170c6:	6821      	ldr	r1, [r4, #0]
   170c8:	4628      	mov	r0, r5
   170ca:	310c      	adds	r1, #12
   170cc:	f006 fa9f 	bl	1d60e <strcmp>
   170d0:	4606      	mov	r6, r0
   170d2:	2800      	cmp	r0, #0
   170d4:	f47f acb7 	bne.w	16a46 <pdn_interface_pdn_id_get+0xa6>
   170d8:	6823      	ldr	r3, [r4, #0]
   170da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   170dc:	0797      	lsls	r7, r2, #30
   170de:	f53f ae1a 	bmi.w	16d16 <pdn_interface_pdn_id_get+0x376>
   170e2:	e4b0      	b.n	16a46 <pdn_interface_pdn_id_get+0xa6>
   170e4:	4608      	mov	r0, r1
   170e6:	f006 fa8b 	bl	1d600 <strlen>
   170ea:	4606      	mov	r6, r0
   170ec:	6820      	ldr	r0, [r4, #0]
   170ee:	300c      	adds	r0, #12
   170f0:	f006 fa86 	bl	1d600 <strlen>
   170f4:	4286      	cmp	r6, r0
   170f6:	f47f acf8 	bne.w	16aea <pdn_interface_pdn_id_get+0x14a>
   170fa:	6821      	ldr	r1, [r4, #0]
   170fc:	4628      	mov	r0, r5
   170fe:	310c      	adds	r1, #12
   17100:	f006 fa85 	bl	1d60e <strcmp>
   17104:	4606      	mov	r6, r0
   17106:	2800      	cmp	r0, #0
   17108:	f47f acef 	bne.w	16aea <pdn_interface_pdn_id_get+0x14a>
   1710c:	6823      	ldr	r3, [r4, #0]
   1710e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   17110:	07d7      	lsls	r7, r2, #31
   17112:	f53f ae00 	bmi.w	16d16 <pdn_interface_pdn_id_get+0x376>
   17116:	e4e8      	b.n	16aea <pdn_interface_pdn_id_get+0x14a>
   17118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1711c:	4770      	bx	lr
   1711e:	480b      	ldr	r0, [pc, #44]	; (1714c <pdn_interface_pdn_id_get+0x7ac>)
   17120:	f006 fa6e 	bl	1d600 <strlen>
   17124:	490a      	ldr	r1, [pc, #40]	; (17150 <pdn_interface_pdn_id_get+0x7b0>)
   17126:	4602      	mov	r2, r0
   17128:	4808      	ldr	r0, [pc, #32]	; (1714c <pdn_interface_pdn_id_get+0x7ac>)
   1712a:	f006 fa7c 	bl	1d626 <strncmp>
   1712e:	b930      	cbnz	r0, 1713e <pdn_interface_pdn_id_get+0x79e>
   17130:	2008      	movs	r0, #8
   17132:	f7fa fc57 	bl	119e4 <bsd_os_errno_set>
   17136:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1713a:	6858      	ldr	r0, [r3, #4]
   1713c:	e47b      	b.n	16a36 <pdn_interface_pdn_id_get+0x96>
   1713e:	2005      	movs	r0, #5
   17140:	f7fa fc50 	bl	119e4 <bsd_os_errno_set>
   17144:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   17148:	6858      	ldr	r0, [r3, #4]
   1714a:	e474      	b.n	16a36 <pdn_interface_pdn_id_get+0x96>
   1714c:	0001f870 	.word	0x0001f870
   17150:	2002081c 	.word	0x2002081c

00017154 <linked_list_init>:
   17154:	b128      	cbz	r0, 17162 <linked_list_init+0xe>
   17156:	2300      	movs	r3, #0
   17158:	6003      	str	r3, [r0, #0]
   1715a:	e9c0 3301 	strd	r3, r3, [r0, #4]
   1715e:	4618      	mov	r0, r3
   17160:	4770      	bx	lr
   17162:	2007      	movs	r0, #7
   17164:	4770      	bx	lr
   17166:	bf00      	nop

00017168 <linked_list_push>:
   17168:	6802      	ldr	r2, [r0, #0]
   1716a:	4603      	mov	r3, r0
   1716c:	3201      	adds	r2, #1
   1716e:	d00e      	beq.n	1718e <linked_list_push+0x26>
   17170:	2200      	movs	r2, #0
   17172:	600a      	str	r2, [r1, #0]
   17174:	6802      	ldr	r2, [r0, #0]
   17176:	b13a      	cbz	r2, 17188 <linked_list_push+0x20>
   17178:	6882      	ldr	r2, [r0, #8]
   1717a:	6011      	str	r1, [r2, #0]
   1717c:	6081      	str	r1, [r0, #8]
   1717e:	681a      	ldr	r2, [r3, #0]
   17180:	2000      	movs	r0, #0
   17182:	3201      	adds	r2, #1
   17184:	601a      	str	r2, [r3, #0]
   17186:	4770      	bx	lr
   17188:	e9c0 1101 	strd	r1, r1, [r0, #4]
   1718c:	e7f7      	b.n	1717e <linked_list_push+0x16>
   1718e:	2004      	movs	r0, #4
   17190:	4770      	bx	lr
   17192:	bf00      	nop

00017194 <linked_list_pop>:
   17194:	4603      	mov	r3, r0
   17196:	6800      	ldr	r0, [r0, #0]
   17198:	b128      	cbz	r0, 171a6 <linked_list_pop+0x12>
   1719a:	6858      	ldr	r0, [r3, #4]
   1719c:	681a      	ldr	r2, [r3, #0]
   1719e:	6801      	ldr	r1, [r0, #0]
   171a0:	3a01      	subs	r2, #1
   171a2:	6059      	str	r1, [r3, #4]
   171a4:	601a      	str	r2, [r3, #0]
   171a6:	4770      	bx	lr

000171a8 <linked_list_peek>:
   171a8:	6803      	ldr	r3, [r0, #0]
   171aa:	b10b      	cbz	r3, 171b0 <linked_list_peek+0x8>
   171ac:	6840      	ldr	r0, [r0, #4]
   171ae:	4770      	bx	lr
   171b0:	4618      	mov	r0, r3
   171b2:	4770      	bx	lr

000171b4 <linked_list_size_get>:
   171b4:	6800      	ldr	r0, [r0, #0]
   171b6:	4770      	bx	lr

000171b8 <linked_list_get_next>:
   171b8:	6800      	ldr	r0, [r0, #0]
   171ba:	4770      	bx	lr

000171bc <nrf_socket>:
   171bc:	b570      	push	{r4, r5, r6, lr}
   171be:	4604      	mov	r4, r0
   171c0:	460d      	mov	r5, r1
   171c2:	4616      	mov	r6, r2
   171c4:	f7fd fcd6 	bl	14b74 <bsd_platform_af_method_table_get>
   171c8:	b130      	cbz	r0, 171d8 <nrf_socket+0x1c>
   171ca:	6803      	ldr	r3, [r0, #0]
   171cc:	4632      	mov	r2, r6
   171ce:	4629      	mov	r1, r5
   171d0:	4620      	mov	r0, r4
   171d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   171d6:	4718      	bx	r3
   171d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   171dc:	bd70      	pop	{r4, r5, r6, pc}
   171de:	bf00      	nop

000171e0 <nrf_close>:
   171e0:	b510      	push	{r4, lr}
   171e2:	4604      	mov	r4, r0
   171e4:	f7fd fd1a 	bl	14c1c <bsd_platform_fd_method_table_get>
   171e8:	b120      	cbz	r0, 171f4 <nrf_close+0x14>
   171ea:	6843      	ldr	r3, [r0, #4]
   171ec:	4620      	mov	r0, r4
   171ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   171f2:	4718      	bx	r3
   171f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   171f8:	bd10      	pop	{r4, pc}
   171fa:	bf00      	nop

000171fc <nrf_sendto>:
   171fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17200:	460d      	mov	r5, r1
   17202:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   17206:	4616      	mov	r6, r2
   17208:	461f      	mov	r7, r3
   1720a:	4604      	mov	r4, r0
   1720c:	f7fd fd06 	bl	14c1c <bsd_platform_fd_method_table_get>
   17210:	b158      	cbz	r0, 1722a <nrf_sendto+0x2e>
   17212:	e9cd 8908 	strd	r8, r9, [sp, #32]
   17216:	f8d0 e008 	ldr.w	lr, [r0, #8]
   1721a:	463b      	mov	r3, r7
   1721c:	4632      	mov	r2, r6
   1721e:	4629      	mov	r1, r5
   17220:	4620      	mov	r0, r4
   17222:	46f4      	mov	ip, lr
   17224:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17228:	4760      	bx	ip
   1722a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1722e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17232:	bf00      	nop

00017234 <nrf_send>:
   17234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17238:	b082      	sub	sp, #8
   1723a:	460e      	mov	r6, r1
   1723c:	4617      	mov	r7, r2
   1723e:	4698      	mov	r8, r3
   17240:	4605      	mov	r5, r0
   17242:	f7fd fceb 	bl	14c1c <bsd_platform_fd_method_table_get>
   17246:	b160      	cbz	r0, 17262 <nrf_send+0x2e>
   17248:	4604      	mov	r4, r0
   1724a:	2000      	movs	r0, #0
   1724c:	e9cd 0000 	strd	r0, r0, [sp]
   17250:	4643      	mov	r3, r8
   17252:	463a      	mov	r2, r7
   17254:	4631      	mov	r1, r6
   17256:	4628      	mov	r0, r5
   17258:	68a4      	ldr	r4, [r4, #8]
   1725a:	47a0      	blx	r4
   1725c:	b002      	add	sp, #8
   1725e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17266:	e7f9      	b.n	1725c <nrf_send+0x28>

00017268 <nrf_recvfrom>:
   17268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1726c:	460d      	mov	r5, r1
   1726e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   17272:	4616      	mov	r6, r2
   17274:	461f      	mov	r7, r3
   17276:	4604      	mov	r4, r0
   17278:	f7fd fcd0 	bl	14c1c <bsd_platform_fd_method_table_get>
   1727c:	b158      	cbz	r0, 17296 <nrf_recvfrom+0x2e>
   1727e:	e9cd 8908 	strd	r8, r9, [sp, #32]
   17282:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   17286:	463b      	mov	r3, r7
   17288:	4632      	mov	r2, r6
   1728a:	4629      	mov	r1, r5
   1728c:	4620      	mov	r0, r4
   1728e:	46f4      	mov	ip, lr
   17290:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17294:	4760      	bx	ip
   17296:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1729a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1729e:	bf00      	nop

000172a0 <nrf_recv>:
   172a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   172a4:	b082      	sub	sp, #8
   172a6:	460e      	mov	r6, r1
   172a8:	4617      	mov	r7, r2
   172aa:	4698      	mov	r8, r3
   172ac:	4605      	mov	r5, r0
   172ae:	f7fd fcb5 	bl	14c1c <bsd_platform_fd_method_table_get>
   172b2:	b160      	cbz	r0, 172ce <nrf_recv+0x2e>
   172b4:	4604      	mov	r4, r0
   172b6:	2000      	movs	r0, #0
   172b8:	e9cd 0000 	strd	r0, r0, [sp]
   172bc:	4643      	mov	r3, r8
   172be:	463a      	mov	r2, r7
   172c0:	4631      	mov	r1, r6
   172c2:	4628      	mov	r0, r5
   172c4:	68e4      	ldr	r4, [r4, #12]
   172c6:	47a0      	blx	r4
   172c8:	b002      	add	sp, #8
   172ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   172ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   172d2:	e7f9      	b.n	172c8 <nrf_recv+0x28>

000172d4 <nrf_connect>:
   172d4:	b570      	push	{r4, r5, r6, lr}
   172d6:	460d      	mov	r5, r1
   172d8:	4616      	mov	r6, r2
   172da:	4604      	mov	r4, r0
   172dc:	f7fd fc9e 	bl	14c1c <bsd_platform_fd_method_table_get>
   172e0:	b130      	cbz	r0, 172f0 <nrf_connect+0x1c>
   172e2:	6943      	ldr	r3, [r0, #20]
   172e4:	4632      	mov	r2, r6
   172e6:	4629      	mov	r1, r5
   172e8:	4620      	mov	r0, r4
   172ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   172ee:	4718      	bx	r3
   172f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   172f4:	bd70      	pop	{r4, r5, r6, pc}
   172f6:	bf00      	nop

000172f8 <nrf_listen>:
   172f8:	b570      	push	{r4, r5, r6, lr}
   172fa:	460d      	mov	r5, r1
   172fc:	4604      	mov	r4, r0
   172fe:	f7fd fc8d 	bl	14c1c <bsd_platform_fd_method_table_get>
   17302:	b128      	cbz	r0, 17310 <nrf_listen+0x18>
   17304:	6983      	ldr	r3, [r0, #24]
   17306:	4629      	mov	r1, r5
   17308:	4620      	mov	r0, r4
   1730a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1730e:	4718      	bx	r3
   17310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17314:	bd70      	pop	{r4, r5, r6, pc}
   17316:	bf00      	nop

00017318 <nrf_accept>:
   17318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1731c:	460d      	mov	r5, r1
   1731e:	4616      	mov	r6, r2
   17320:	4604      	mov	r4, r0
   17322:	f7fd fc7b 	bl	14c1c <bsd_platform_fd_method_table_get>
   17326:	b140      	cbz	r0, 1733a <nrf_accept+0x22>
   17328:	69c7      	ldr	r7, [r0, #28]
   1732a:	4632      	mov	r2, r6
   1732c:	4629      	mov	r1, r5
   1732e:	4620      	mov	r0, r4
   17330:	46bc      	mov	ip, r7
   17332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   17336:	2300      	movs	r3, #0
   17338:	4760      	bx	ip
   1733a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1733e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17342:	bf00      	nop

00017344 <nrf_bind>:
   17344:	b570      	push	{r4, r5, r6, lr}
   17346:	460d      	mov	r5, r1
   17348:	4616      	mov	r6, r2
   1734a:	4604      	mov	r4, r0
   1734c:	f7fd fc66 	bl	14c1c <bsd_platform_fd_method_table_get>
   17350:	b130      	cbz	r0, 17360 <nrf_bind+0x1c>
   17352:	6903      	ldr	r3, [r0, #16]
   17354:	4632      	mov	r2, r6
   17356:	4629      	mov	r1, r5
   17358:	4620      	mov	r0, r4
   1735a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1735e:	4718      	bx	r3
   17360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17364:	bd70      	pop	{r4, r5, r6, pc}
   17366:	bf00      	nop

00017368 <nrf_setsockopt>:
   17368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1736c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   17370:	460d      	mov	r5, r1
   17372:	4616      	mov	r6, r2
   17374:	461f      	mov	r7, r3
   17376:	4604      	mov	r4, r0
   17378:	f7fd fc50 	bl	14c1c <bsd_platform_fd_method_table_get>
   1737c:	b158      	cbz	r0, 17396 <nrf_setsockopt+0x2e>
   1737e:	f8cd 8018 	str.w	r8, [sp, #24]
   17382:	f8d0 e020 	ldr.w	lr, [r0, #32]
   17386:	463b      	mov	r3, r7
   17388:	4632      	mov	r2, r6
   1738a:	4629      	mov	r1, r5
   1738c:	4620      	mov	r0, r4
   1738e:	46f4      	mov	ip, lr
   17390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   17394:	4760      	bx	ip
   17396:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1739a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1739e:	bf00      	nop

000173a0 <nrf_getsockopt>:
   173a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   173a4:	f8dd 8018 	ldr.w	r8, [sp, #24]
   173a8:	460d      	mov	r5, r1
   173aa:	4616      	mov	r6, r2
   173ac:	461f      	mov	r7, r3
   173ae:	4604      	mov	r4, r0
   173b0:	f7fd fc34 	bl	14c1c <bsd_platform_fd_method_table_get>
   173b4:	b158      	cbz	r0, 173ce <nrf_getsockopt+0x2e>
   173b6:	f8cd 8018 	str.w	r8, [sp, #24]
   173ba:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   173be:	463b      	mov	r3, r7
   173c0:	4632      	mov	r2, r6
   173c2:	4629      	mov	r1, r5
   173c4:	4620      	mov	r0, r4
   173c6:	46f4      	mov	ip, lr
   173c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   173cc:	4760      	bx	ip
   173ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   173d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   173d6:	bf00      	nop

000173d8 <nrf_getaddrinfo>:
   173d8:	f7fd bc90 	b.w	14cfc <bsd_platform_getaddrinfo>

000173dc <nrf_freeaddrinfo>:
   173dc:	f7fd bc90 	b.w	14d00 <bsd_platform_freeaddrinfo>

000173e0 <nrf_poll>:
   173e0:	f7fd bc90 	b.w	14d04 <bsd_platform_poll>

000173e4 <nrf_fcntl>:
   173e4:	f7fd bce8 	b.w	14db8 <bsd_platform_fcntl>

000173e8 <at_client_evt_handler>:
   173e8:	b120      	cbz	r0, 173f4 <at_client_evt_handler+0xc>
   173ea:	f850 1b08 	ldr.w	r1, [r0], #8
   173ee:	0c09      	lsrs	r1, r1, #16
   173f0:	f7fb bf4a 	b.w	13288 <rpc_at_event_handler>
   173f4:	4770      	bx	lr
   173f6:	bf00      	nop

000173f8 <rpc_at_client_init>:
   173f8:	4801      	ldr	r0, [pc, #4]	; (17400 <rpc_at_client_init+0x8>)
   173fa:	f001 bdcf 	b.w	18f9c <rpc_client_register>
   173fe:	bf00      	nop
   17400:	0001f884 	.word	0x0001f884

00017404 <rpc_at_client_request_alloc>:
   17404:	b180      	cbz	r0, 17428 <rpc_at_client_request_alloc+0x24>
   17406:	2300      	movs	r3, #0
   17408:	b510      	push	{r4, lr}
   1740a:	b082      	sub	sp, #8
   1740c:	aa02      	add	r2, sp, #8
   1740e:	4604      	mov	r4, r0
   17410:	f842 3d04 	str.w	r3, [r2, #-4]!
   17414:	2003      	movs	r0, #3
   17416:	f001 fff9 	bl	1940c <rpc_message_alloc>
   1741a:	b918      	cbnz	r0, 17424 <rpc_at_client_request_alloc+0x20>
   1741c:	9b01      	ldr	r3, [sp, #4]
   1741e:	b10b      	cbz	r3, 17424 <rpc_at_client_request_alloc+0x20>
   17420:	3308      	adds	r3, #8
   17422:	6023      	str	r3, [r4, #0]
   17424:	b002      	add	sp, #8
   17426:	bd10      	pop	{r4, pc}
   17428:	200e      	movs	r0, #14
   1742a:	4770      	bx	lr

0001742c <rpc_at_client_request_send>:
   1742c:	b150      	cbz	r0, 17444 <rpc_at_client_request_send+0x18>
   1742e:	4603      	mov	r3, r0
   17430:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   17434:	2003      	movs	r0, #3
   17436:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1743a:	f843 1d08 	str.w	r1, [r3, #-8]!
   1743e:	4619      	mov	r1, r3
   17440:	f001 bfcc 	b.w	193dc <rpc_message_send>
   17444:	200e      	movs	r0, #14
   17446:	4770      	bx	lr

00017448 <rpc_at_client_message_free>:
   17448:	b120      	cbz	r0, 17454 <rpc_at_client_message_free+0xc>
   1744a:	f1a0 0108 	sub.w	r1, r0, #8
   1744e:	2003      	movs	r0, #3
   17450:	f002 b80e 	b.w	19470 <rpc_message_free>
   17454:	200e      	movs	r0, #14
   17456:	4770      	bx	lr

00017458 <rpc_at_client_data_free>:
   17458:	b118      	cbz	r0, 17462 <rpc_at_client_data_free+0xa>
   1745a:	4601      	mov	r1, r0
   1745c:	2003      	movs	r0, #3
   1745e:	f002 b919 	b.w	19694 <rpc_message_data_free>
   17462:	200e      	movs	r0, #14
   17464:	4770      	bx	lr
   17466:	bf00      	nop

00017468 <ip_recvd_packet_free_cb>:
   17468:	b510      	push	{r4, lr}
   1746a:	4604      	mov	r4, r0
   1746c:	6800      	ldr	r0, [r0, #0]
   1746e:	f7fc fbc9 	bl	13c04 <rpc_ip_client_data_free>
   17472:	68a0      	ldr	r0, [r4, #8]
   17474:	b118      	cbz	r0, 1747e <ip_recvd_packet_free_cb+0x16>
   17476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1747a:	f7fc bb63 	b.w	13b44 <nrf_free>
   1747e:	bd10      	pop	{r4, pc}

00017480 <rpc_error_to_nrf_bsd_error>:
   17480:	2810      	cmp	r0, #16
   17482:	bf9a      	itte	ls
   17484:	4b02      	ldrls	r3, [pc, #8]	; (17490 <rpc_error_to_nrf_bsd_error+0x10>)
   17486:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   1748a:	202d      	movhi	r0, #45	; 0x2d
   1748c:	4770      	bx	lr
   1748e:	bf00      	nop
   17490:	0001f894 	.word	0x0001f894

00017494 <ip_interface_request_create>:
   17494:	b570      	push	{r4, r5, r6, lr}
   17496:	2500      	movs	r5, #0
   17498:	b082      	sub	sp, #8
   1749a:	ac02      	add	r4, sp, #8
   1749c:	f844 5d04 	str.w	r5, [r4, #-4]!
   174a0:	4606      	mov	r6, r0
   174a2:	460d      	mov	r5, r1
   174a4:	4620      	mov	r0, r4
   174a6:	4619      	mov	r1, r3
   174a8:	4614      	mov	r4, r2
   174aa:	f7fc fb79 	bl	13ba0 <rpc_ip_client_request_alloc>
   174ae:	b960      	cbnz	r0, 174ca <ip_interface_request_create+0x36>
   174b0:	9b01      	ldr	r3, [sp, #4]
   174b2:	2208      	movs	r2, #8
   174b4:	7258      	strb	r0, [r3, #9]
   174b6:	7298      	strb	r0, [r3, #10]
   174b8:	72d8      	strb	r0, [r3, #11]
   174ba:	4618      	mov	r0, r3
   174bc:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   174c0:	60dc      	str	r4, [r3, #12]
   174c2:	611d      	str	r5, [r3, #16]
   174c4:	721a      	strb	r2, [r3, #8]
   174c6:	b002      	add	sp, #8
   174c8:	bd70      	pop	{r4, r5, r6, pc}
   174ca:	9b01      	ldr	r3, [sp, #4]
   174cc:	4618      	mov	r0, r3
   174ce:	b002      	add	sp, #8
   174d0:	bd70      	pop	{r4, r5, r6, pc}
   174d2:	bf00      	nop

000174d4 <ip_interface_request_send>:
   174d4:	b570      	push	{r4, r5, r6, lr}
   174d6:	460c      	mov	r4, r1
   174d8:	4605      	mov	r5, r0
   174da:	4611      	mov	r1, r2
   174dc:	4620      	mov	r0, r4
   174de:	461e      	mov	r6, r3
   174e0:	f7fc fb72 	bl	13bc8 <rpc_ip_client_request_send>
   174e4:	b900      	cbnz	r0, 174e8 <ip_interface_request_send+0x14>
   174e6:	bd70      	pop	{r4, r5, r6, pc}
   174e8:	6820      	ldr	r0, [r4, #0]
   174ea:	b108      	cbz	r0, 174f0 <ip_interface_request_send+0x1c>
   174ec:	f7fc fb8a 	bl	13c04 <rpc_ip_client_data_free>
   174f0:	4620      	mov	r0, r4
   174f2:	f7fc fb7f 	bl	13bf4 <rpc_ip_client_message_free>
   174f6:	602e      	str	r6, [r5, #0]
   174f8:	2023      	movs	r0, #35	; 0x23
   174fa:	bd70      	pop	{r4, r5, r6, pc}

000174fc <ip_interface_wait>:
   174fc:	b538      	push	{r3, r4, r5, lr}
   174fe:	4605      	mov	r5, r0
   17500:	f001 fb82 	bl	18c08 <interface_socket_wait>
   17504:	4604      	mov	r4, r0
   17506:	b108      	cbz	r0, 1750c <ip_interface_wait+0x10>
   17508:	4620      	mov	r0, r4
   1750a:	bd38      	pop	{r3, r4, r5, pc}
   1750c:	4628      	mov	r0, r5
   1750e:	f001 fbe7 	bl	18ce0 <interface_socket_from_handle_get>
   17512:	2800      	cmp	r0, #0
   17514:	d0f8      	beq.n	17508 <ip_interface_wait+0xc>
   17516:	6844      	ldr	r4, [r0, #4]
   17518:	2c00      	cmp	r4, #0
   1751a:	d0f5      	beq.n	17508 <ip_interface_wait+0xc>
   1751c:	2300      	movs	r3, #0
   1751e:	6043      	str	r3, [r0, #4]
   17520:	4620      	mov	r0, r4
   17522:	bd38      	pop	{r3, r4, r5, pc}

00017524 <ip_interface_init>:
   17524:	b538      	push	{r3, r4, r5, lr}
   17526:	2300      	movs	r3, #0
   17528:	4d07      	ldr	r5, [pc, #28]	; (17548 <ip_interface_init+0x24>)
   1752a:	4c08      	ldr	r4, [pc, #32]	; (1754c <ip_interface_init+0x28>)
   1752c:	4619      	mov	r1, r3
   1752e:	2220      	movs	r2, #32
   17530:	4807      	ldr	r0, [pc, #28]	; (17550 <ip_interface_init+0x2c>)
   17532:	602b      	str	r3, [r5, #0]
   17534:	6023      	str	r3, [r4, #0]
   17536:	f006 f8c8 	bl	1d6ca <memset>
   1753a:	f7fc fb2b 	bl	13b94 <rpc_ip_client_init>
   1753e:	3000      	adds	r0, #0
   17540:	bf18      	it	ne
   17542:	2001      	movne	r0, #1
   17544:	4240      	negs	r0, r0
   17546:	bd38      	pop	{r3, r4, r5, pc}
   17548:	20020954 	.word	0x20020954
   1754c:	20020950 	.word	0x20020950
   17550:	2002095c 	.word	0x2002095c

00017554 <ip_interface_open>:
   17554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17558:	4606      	mov	r6, r0
   1755a:	2000      	movs	r0, #0
   1755c:	f026 0308 	bic.w	r3, r6, #8
   17560:	b082      	sub	sp, #8
   17562:	2b02      	cmp	r3, #2
   17564:	460c      	mov	r4, r1
   17566:	4617      	mov	r7, r2
   17568:	9000      	str	r0, [sp, #0]
   1756a:	d002      	beq.n	17572 <ip_interface_open+0x1e>
   1756c:	2e05      	cmp	r6, #5
   1756e:	f040 8084 	bne.w	1767a <ip_interface_open+0x126>
   17572:	1e63      	subs	r3, r4, #1
   17574:	2b02      	cmp	r3, #2
   17576:	d85c      	bhi.n	17632 <ip_interface_open+0xde>
   17578:	2f00      	cmp	r7, #0
   1757a:	d154      	bne.n	17626 <ip_interface_open+0xd2>
   1757c:	2c01      	cmp	r4, #1
   1757e:	d067      	beq.n	17650 <ip_interface_open+0xfc>
   17580:	2c03      	cmp	r4, #3
   17582:	bf18      	it	ne
   17584:	2702      	movne	r7, #2
   17586:	4a48      	ldr	r2, [pc, #288]	; (176a8 <ip_interface_open+0x154>)
   17588:	4621      	mov	r1, r4
   1758a:	4668      	mov	r0, sp
   1758c:	f001 fa98 	bl	18ac0 <interface_socket_allocate>
   17590:	9b00      	ldr	r3, [sp, #0]
   17592:	4680      	mov	r8, r0
   17594:	2b00      	cmp	r3, #0
   17596:	d059      	beq.n	1764c <ip_interface_open+0xf8>
   17598:	2100      	movs	r1, #0
   1759a:	a802      	add	r0, sp, #8
   1759c:	f840 1d04 	str.w	r1, [r0, #-4]!
   175a0:	e9c3 6403 	strd	r6, r4, [r3, #12]
   175a4:	615f      	str	r7, [r3, #20]
   175a6:	f7fc fafb 	bl	13ba0 <rpc_ip_client_request_alloc>
   175aa:	2800      	cmp	r0, #0
   175ac:	d14b      	bne.n	17646 <ip_interface_open+0xf2>
   175ae:	f247 0201 	movw	r2, #28673	; 0x7001
   175b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   175b6:	2108      	movs	r1, #8
   175b8:	9d01      	ldr	r5, [sp, #4]
   175ba:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
   175be:	60ea      	str	r2, [r5, #12]
   175c0:	7268      	strb	r0, [r5, #9]
   175c2:	72a8      	strb	r0, [r5, #10]
   175c4:	72e8      	strb	r0, [r5, #11]
   175c6:	7229      	strb	r1, [r5, #8]
   175c8:	742b      	strb	r3, [r5, #16]
   175ca:	746b      	strb	r3, [r5, #17]
   175cc:	74ab      	strb	r3, [r5, #18]
   175ce:	74eb      	strb	r3, [r5, #19]
   175d0:	68ab      	ldr	r3, [r5, #8]
   175d2:	2e05      	cmp	r6, #5
   175d4:	f103 030c 	add.w	r3, r3, #12
   175d8:	60ab      	str	r3, [r5, #8]
   175da:	d003      	beq.n	175e4 <ip_interface_open+0x90>
   175dc:	2e0a      	cmp	r6, #10
   175de:	bf14      	ite	ne
   175e0:	2601      	movne	r6, #1
   175e2:	2602      	moveq	r6, #2
   175e4:	616e      	str	r6, [r5, #20]
   175e6:	61ef      	str	r7, [r5, #28]
   175e8:	61ac      	str	r4, [r5, #24]
   175ea:	f247 0101 	movw	r1, #28673	; 0x7001
   175ee:	4628      	mov	r0, r5
   175f0:	9f00      	ldr	r7, [sp, #0]
   175f2:	f7fc fae9 	bl	13bc8 <rpc_ip_client_request_send>
   175f6:	4606      	mov	r6, r0
   175f8:	b360      	cbz	r0, 17654 <ip_interface_open+0x100>
   175fa:	6828      	ldr	r0, [r5, #0]
   175fc:	b108      	cbz	r0, 17602 <ip_interface_open+0xae>
   175fe:	f7fc fb01 	bl	13c04 <rpc_ip_client_data_free>
   17602:	4628      	mov	r0, r5
   17604:	f7fc faf6 	bl	13bf4 <rpc_ip_client_message_free>
   17608:	2301      	movs	r3, #1
   1760a:	2523      	movs	r5, #35	; 0x23
   1760c:	603b      	str	r3, [r7, #0]
   1760e:	4640      	mov	r0, r8
   17610:	f001 faac 	bl	18b6c <interface_socket_free>
   17614:	4628      	mov	r0, r5
   17616:	f7fa f9e5 	bl	119e4 <bsd_os_errno_set>
   1761a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1761e:	4640      	mov	r0, r8
   17620:	b002      	add	sp, #8
   17622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17626:	2c01      	cmp	r4, #1
   17628:	d009      	beq.n	1763e <ip_interface_open+0xea>
   1762a:	2c02      	cmp	r4, #2
   1762c:	d109      	bne.n	17642 <ip_interface_open+0xee>
   1762e:	2f02      	cmp	r7, #2
   17630:	d0a9      	beq.n	17586 <ip_interface_open+0x32>
   17632:	2016      	movs	r0, #22
   17634:	f7fa f9d6 	bl	119e4 <bsd_os_errno_set>
   17638:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1763c:	e7ef      	b.n	1761e <ip_interface_open+0xca>
   1763e:	2f01      	cmp	r7, #1
   17640:	d1f7      	bne.n	17632 <ip_interface_open+0xde>
   17642:	2702      	movs	r7, #2
   17644:	e79f      	b.n	17586 <ip_interface_open+0x32>
   17646:	9d01      	ldr	r5, [sp, #4]
   17648:	2d00      	cmp	r5, #0
   1764a:	d1c1      	bne.n	175d0 <ip_interface_open+0x7c>
   1764c:	250c      	movs	r5, #12
   1764e:	e7de      	b.n	1760e <ip_interface_open+0xba>
   17650:	4627      	mov	r7, r4
   17652:	e798      	b.n	17586 <ip_interface_open+0x32>
   17654:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17658:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1765c:	2102      	movs	r1, #2
   1765e:	4640      	mov	r0, r8
   17660:	f001 fad2 	bl	18c08 <interface_socket_wait>
   17664:	4605      	mov	r5, r0
   17666:	2800      	cmp	r0, #0
   17668:	d1d1      	bne.n	1760e <ip_interface_open+0xba>
   1766a:	4640      	mov	r0, r8
   1766c:	f001 fb38 	bl	18ce0 <interface_socket_from_handle_get>
   17670:	b148      	cbz	r0, 17686 <ip_interface_open+0x132>
   17672:	6845      	ldr	r5, [r0, #4]
   17674:	b13d      	cbz	r5, 17686 <ip_interface_open+0x132>
   17676:	6046      	str	r6, [r0, #4]
   17678:	e7c9      	b.n	1760e <ip_interface_open+0xba>
   1767a:	202f      	movs	r0, #47	; 0x2f
   1767c:	f7fa f9b2 	bl	119e4 <bsd_os_errno_set>
   17680:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   17684:	e7cb      	b.n	1761e <ip_interface_open+0xca>
   17686:	3c02      	subs	r4, #2
   17688:	2c01      	cmp	r4, #1
   1768a:	d8c8      	bhi.n	1761e <ip_interface_open+0xca>
   1768c:	4640      	mov	r0, r8
   1768e:	9b00      	ldr	r3, [sp, #0]
   17690:	681a      	ldr	r2, [r3, #0]
   17692:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   17696:	601a      	str	r2, [r3, #0]
   17698:	681a      	ldr	r2, [r3, #0]
   1769a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   1769e:	601a      	str	r2, [r3, #0]
   176a0:	b002      	add	sp, #8
   176a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   176a6:	bf00      	nop
   176a8:	00017469 	.word	0x00017469

000176ac <ip_interface_close>:
   176ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   176b0:	b082      	sub	sp, #8
   176b2:	4606      	mov	r6, r0
   176b4:	f001 fb14 	bl	18ce0 <interface_socket_from_handle_get>
   176b8:	2800      	cmp	r0, #0
   176ba:	d063      	beq.n	17784 <ip_interface_close+0xd8>
   176bc:	4604      	mov	r4, r0
   176be:	2100      	movs	r1, #0
   176c0:	a802      	add	r0, sp, #8
   176c2:	6827      	ldr	r7, [r4, #0]
   176c4:	f840 1d04 	str.w	r1, [r0, #-4]!
   176c8:	f8d4 8018 	ldr.w	r8, [r4, #24]
   176cc:	f7fc fa68 	bl	13ba0 <rpc_ip_client_request_alloc>
   176d0:	2800      	cmp	r0, #0
   176d2:	d13a      	bne.n	1774a <ip_interface_close+0x9e>
   176d4:	f247 0309 	movw	r3, #28681	; 0x7009
   176d8:	2208      	movs	r2, #8
   176da:	9d01      	ldr	r5, [sp, #4]
   176dc:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   176e0:	60eb      	str	r3, [r5, #12]
   176e2:	f8c5 8010 	str.w	r8, [r5, #16]
   176e6:	7268      	strb	r0, [r5, #9]
   176e8:	72a8      	strb	r0, [r5, #10]
   176ea:	72e8      	strb	r0, [r5, #11]
   176ec:	722a      	strb	r2, [r5, #8]
   176ee:	6823      	ldr	r3, [r4, #0]
   176f0:	f247 0109 	movw	r1, #28681	; 0x7009
   176f4:	0c1b      	lsrs	r3, r3, #16
   176f6:	041b      	lsls	r3, r3, #16
   176f8:	f043 030d 	orr.w	r3, r3, #13
   176fc:	6023      	str	r3, [r4, #0]
   176fe:	6823      	ldr	r3, [r4, #0]
   17700:	4628      	mov	r0, r5
   17702:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   17706:	6023      	str	r3, [r4, #0]
   17708:	6823      	ldr	r3, [r4, #0]
   1770a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1770e:	6023      	str	r3, [r4, #0]
   17710:	f7fc fa5a 	bl	13bc8 <rpc_ip_client_request_send>
   17714:	bb40      	cbnz	r0, 17768 <ip_interface_close+0xbc>
   17716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1771a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1771e:	210e      	movs	r1, #14
   17720:	4630      	mov	r0, r6
   17722:	f001 fa71 	bl	18c08 <interface_socket_wait>
   17726:	4604      	mov	r4, r0
   17728:	b1a0      	cbz	r0, 17754 <ip_interface_close+0xa8>
   1772a:	4c17      	ldr	r4, [pc, #92]	; (17788 <ip_interface_close+0xdc>)
   1772c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   17730:	b120      	cbz	r0, 1773c <ip_interface_close+0x90>
   17732:	f7fc fa5f 	bl	13bf4 <rpc_ip_client_message_free>
   17736:	2300      	movs	r3, #0
   17738:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   1773c:	4630      	mov	r0, r6
   1773e:	f001 fa15 	bl	18b6c <interface_socket_free>
   17742:	2000      	movs	r0, #0
   17744:	b002      	add	sp, #8
   17746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1774a:	9d01      	ldr	r5, [sp, #4]
   1774c:	200c      	movs	r0, #12
   1774e:	2d00      	cmp	r5, #0
   17750:	d1cd      	bne.n	176ee <ip_interface_close+0x42>
   17752:	e012      	b.n	1777a <ip_interface_close+0xce>
   17754:	4630      	mov	r0, r6
   17756:	f001 fac3 	bl	18ce0 <interface_socket_from_handle_get>
   1775a:	2800      	cmp	r0, #0
   1775c:	d0e5      	beq.n	1772a <ip_interface_close+0x7e>
   1775e:	6843      	ldr	r3, [r0, #4]
   17760:	2b00      	cmp	r3, #0
   17762:	d0e2      	beq.n	1772a <ip_interface_close+0x7e>
   17764:	6044      	str	r4, [r0, #4]
   17766:	e7e0      	b.n	1772a <ip_interface_close+0x7e>
   17768:	6828      	ldr	r0, [r5, #0]
   1776a:	b108      	cbz	r0, 17770 <ip_interface_close+0xc4>
   1776c:	f7fc fa4a 	bl	13c04 <rpc_ip_client_data_free>
   17770:	4628      	mov	r0, r5
   17772:	f7fc fa3f 	bl	13bf4 <rpc_ip_client_message_free>
   17776:	2023      	movs	r0, #35	; 0x23
   17778:	6027      	str	r7, [r4, #0]
   1777a:	f7fa f933 	bl	119e4 <bsd_os_errno_set>
   1777e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17782:	e7df      	b.n	17744 <ip_interface_close+0x98>
   17784:	2009      	movs	r0, #9
   17786:	e7f8      	b.n	1777a <ip_interface_close+0xce>
   17788:	2002095c 	.word	0x2002095c

0001778c <ip_interface_sendto>:
   1778c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17790:	2500      	movs	r5, #0
   17792:	b089      	sub	sp, #36	; 0x24
   17794:	9103      	str	r1, [sp, #12]
   17796:	4614      	mov	r4, r2
   17798:	9301      	str	r3, [sp, #4]
   1779a:	9507      	str	r5, [sp, #28]
   1779c:	4607      	mov	r7, r0
   1779e:	9e12      	ldr	r6, [sp, #72]	; 0x48
   177a0:	f001 fa9e 	bl	18ce0 <interface_socket_from_handle_get>
   177a4:	2800      	cmp	r0, #0
   177a6:	f000 8124 	beq.w	179f2 <ip_interface_sendto+0x266>
   177aa:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   177ae:	f300 8118 	bgt.w	179e2 <ip_interface_sendto+0x256>
   177b2:	6903      	ldr	r3, [r0, #16]
   177b4:	4605      	mov	r5, r0
   177b6:	2b01      	cmp	r3, #1
   177b8:	f000 80d1 	beq.w	1795e <ip_interface_sendto+0x1d2>
   177bc:	682a      	ldr	r2, [r5, #0]
   177be:	0390      	lsls	r0, r2, #14
   177c0:	d423      	bmi.n	1780a <ip_interface_sendto+0x7e>
   177c2:	682a      	ldr	r2, [r5, #0]
   177c4:	0091      	lsls	r1, r2, #2
   177c6:	d406      	bmi.n	177d6 <ip_interface_sendto+0x4a>
   177c8:	2b01      	cmp	r3, #1
   177ca:	f000 80ed 	beq.w	179a8 <ip_interface_sendto+0x21c>
   177ce:	682b      	ldr	r3, [r5, #0]
   177d0:	031a      	lsls	r2, r3, #12
   177d2:	f140 8102 	bpl.w	179da <ip_interface_sendto+0x24e>
   177d6:	682b      	ldr	r3, [r5, #0]
   177d8:	031b      	lsls	r3, r3, #12
   177da:	f140 8106 	bpl.w	179ea <ip_interface_sendto+0x25e>
   177de:	68a8      	ldr	r0, [r5, #8]
   177e0:	f8df 9218 	ldr.w	r9, [pc, #536]	; 179fc <ip_interface_sendto+0x270>
   177e4:	2800      	cmp	r0, #0
   177e6:	f040 8096 	bne.w	17916 <ip_interface_sendto+0x18a>
   177ea:	682b      	ldr	r3, [r5, #0]
   177ec:	0118      	lsls	r0, r3, #4
   177ee:	f140 8082 	bpl.w	178f6 <ip_interface_sendto+0x16a>
   177f2:	682b      	ldr	r3, [r5, #0]
   177f4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   177f8:	602b      	str	r3, [r5, #0]
   177fa:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   177fe:	2800      	cmp	r0, #0
   17800:	d17c      	bne.n	178fc <ip_interface_sendto+0x170>
   17802:	4620      	mov	r0, r4
   17804:	b009      	add	sp, #36	; 0x24
   17806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1780a:	f247 0806 	movw	r8, #28678	; 0x7006
   1780e:	f04f 0a0c 	mov.w	sl, #12
   17812:	043b      	lsls	r3, r7, #16
   17814:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 179fc <ip_interface_sendto+0x270>
   17818:	9304      	str	r3, [sp, #16]
   1781a:	4621      	mov	r1, r4
   1781c:	a807      	add	r0, sp, #28
   1781e:	f7fc f9bf 	bl	13ba0 <rpc_ip_client_request_alloc>
   17822:	2804      	cmp	r0, #4
   17824:	d0f9      	beq.n	1781a <ip_interface_sendto+0x8e>
   17826:	2800      	cmp	r0, #0
   17828:	d171      	bne.n	1790e <ip_interface_sendto+0x182>
   1782a:	9b07      	ldr	r3, [sp, #28]
   1782c:	f883 a008 	strb.w	sl, [r3, #8]
   17830:	7258      	strb	r0, [r3, #9]
   17832:	7298      	strb	r0, [r3, #10]
   17834:	72d8      	strb	r0, [r3, #11]
   17836:	b33e      	cbz	r6, 17888 <ip_interface_sendto+0xfc>
   17838:	68ea      	ldr	r2, [r5, #12]
   1783a:	6871      	ldr	r1, [r6, #4]
   1783c:	428a      	cmp	r2, r1
   1783e:	d10a      	bne.n	17856 <ip_interface_sendto+0xca>
   17840:	2a02      	cmp	r2, #2
   17842:	f103 001c 	add.w	r0, r3, #28
   17846:	7831      	ldrb	r1, [r6, #0]
   17848:	f000 8090 	beq.w	1796c <ip_interface_sendto+0x1e0>
   1784c:	2a0a      	cmp	r2, #10
   1784e:	d102      	bne.n	17856 <ip_interface_sendto+0xca>
   17850:	2924      	cmp	r1, #36	; 0x24
   17852:	f000 80af 	beq.w	179b4 <ip_interface_sendto+0x228>
   17856:	6818      	ldr	r0, [r3, #0]
   17858:	b110      	cbz	r0, 17860 <ip_interface_sendto+0xd4>
   1785a:	f7fc f9d3 	bl	13c04 <rpc_ip_client_data_free>
   1785e:	9b07      	ldr	r3, [sp, #28]
   17860:	4618      	mov	r0, r3
   17862:	f7fc f9c7 	bl	13bf4 <rpc_ip_client_message_free>
   17866:	2016      	movs	r0, #22
   17868:	682b      	ldr	r3, [r5, #0]
   1786a:	031a      	lsls	r2, r3, #12
   1786c:	d453      	bmi.n	17916 <ip_interface_sendto+0x18a>
   1786e:	682b      	ldr	r3, [r5, #0]
   17870:	b29b      	uxth	r3, r3
   17872:	2b0d      	cmp	r3, #13
   17874:	d0b6      	beq.n	177e4 <ip_interface_sendto+0x58>
   17876:	682b      	ldr	r3, [r5, #0]
   17878:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1787c:	602b      	str	r3, [r5, #0]
   1787e:	682b      	ldr	r3, [r5, #0]
   17880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17884:	602b      	str	r3, [r5, #0]
   17886:	e7ad      	b.n	177e4 <ip_interface_sendto+0x58>
   17888:	4642      	mov	r2, r8
   1788a:	9901      	ldr	r1, [sp, #4]
   1788c:	6159      	str	r1, [r3, #20]
   1788e:	69a9      	ldr	r1, [r5, #24]
   17890:	9804      	ldr	r0, [sp, #16]
   17892:	6119      	str	r1, [r3, #16]
   17894:	9903      	ldr	r1, [sp, #12]
   17896:	4302      	orrs	r2, r0
   17898:	60da      	str	r2, [r3, #12]
   1789a:	605c      	str	r4, [r3, #4]
   1789c:	b119      	cbz	r1, 178a6 <ip_interface_sendto+0x11a>
   1789e:	6818      	ldr	r0, [r3, #0]
   178a0:	4622      	mov	r2, r4
   178a2:	f005 fee8 	bl	1d676 <memcpy>
   178a6:	682b      	ldr	r3, [r5, #0]
   178a8:	4641      	mov	r1, r8
   178aa:	9305      	str	r3, [sp, #20]
   178ac:	682b      	ldr	r3, [r5, #0]
   178ae:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   178b2:	602b      	str	r3, [r5, #0]
   178b4:	682b      	ldr	r3, [r5, #0]
   178b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   178ba:	602b      	str	r3, [r5, #0]
   178bc:	9b07      	ldr	r3, [sp, #28]
   178be:	4618      	mov	r0, r3
   178c0:	9302      	str	r3, [sp, #8]
   178c2:	f7fc f981 	bl	13bc8 <rpc_ip_client_request_send>
   178c6:	9b02      	ldr	r3, [sp, #8]
   178c8:	4683      	mov	fp, r0
   178ca:	bb58      	cbnz	r0, 17924 <ip_interface_sendto+0x198>
   178cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   178d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   178d4:	4611      	mov	r1, r2
   178d6:	4638      	mov	r0, r7
   178d8:	f001 f996 	bl	18c08 <interface_socket_wait>
   178dc:	b370      	cbz	r0, 1793c <ip_interface_sendto+0x1b0>
   178de:	682b      	ldr	r3, [r5, #0]
   178e0:	0319      	lsls	r1, r3, #12
   178e2:	d437      	bmi.n	17954 <ip_interface_sendto+0x1c8>
   178e4:	280c      	cmp	r0, #12
   178e6:	d1bf      	bne.n	17868 <ip_interface_sendto+0xdc>
   178e8:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   178ec:	2800      	cmp	r0, #0
   178ee:	d094      	beq.n	1781a <ip_interface_sendto+0x8e>
   178f0:	f7fc f980 	bl	13bf4 <rpc_ip_client_message_free>
   178f4:	e791      	b.n	1781a <ip_interface_sendto+0x8e>
   178f6:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   178fa:	6984      	ldr	r4, [r0, #24]
   178fc:	f7fc f97a 	bl	13bf4 <rpc_ip_client_message_free>
   17900:	2300      	movs	r3, #0
   17902:	4620      	mov	r0, r4
   17904:	f849 3027 	str.w	r3, [r9, r7, lsl #2]
   17908:	b009      	add	sp, #36	; 0x24
   1790a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1790e:	682b      	ldr	r3, [r5, #0]
   17910:	200c      	movs	r0, #12
   17912:	031a      	lsls	r2, r3, #12
   17914:	d5ab      	bpl.n	1786e <ip_interface_sendto+0xe2>
   17916:	f7fa f865 	bl	119e4 <bsd_os_errno_set>
   1791a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1791e:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   17922:	e76c      	b.n	177fe <ip_interface_sendto+0x72>
   17924:	6818      	ldr	r0, [r3, #0]
   17926:	469b      	mov	fp, r3
   17928:	b108      	cbz	r0, 1792e <ip_interface_sendto+0x1a2>
   1792a:	f7fc f96b 	bl	13c04 <rpc_ip_client_data_free>
   1792e:	4658      	mov	r0, fp
   17930:	f7fc f960 	bl	13bf4 <rpc_ip_client_message_free>
   17934:	9b05      	ldr	r3, [sp, #20]
   17936:	2023      	movs	r0, #35	; 0x23
   17938:	602b      	str	r3, [r5, #0]
   1793a:	e795      	b.n	17868 <ip_interface_sendto+0xdc>
   1793c:	4638      	mov	r0, r7
   1793e:	f001 f9cf 	bl	18ce0 <interface_socket_from_handle_get>
   17942:	4603      	mov	r3, r0
   17944:	b1f0      	cbz	r0, 17984 <ip_interface_sendto+0x1f8>
   17946:	6840      	ldr	r0, [r0, #4]
   17948:	b1e0      	cbz	r0, 17984 <ip_interface_sendto+0x1f8>
   1794a:	f8c3 b004 	str.w	fp, [r3, #4]
   1794e:	682b      	ldr	r3, [r5, #0]
   17950:	0319      	lsls	r1, r3, #12
   17952:	d5c7      	bpl.n	178e4 <ip_interface_sendto+0x158>
   17954:	68a8      	ldr	r0, [r5, #8]
   17956:	682b      	ldr	r3, [r5, #0]
   17958:	031e      	lsls	r6, r3, #12
   1795a:	d588      	bpl.n	1786e <ip_interface_sendto+0xe2>
   1795c:	e742      	b.n	177e4 <ip_interface_sendto+0x58>
   1795e:	2e00      	cmp	r6, #0
   17960:	f43f af2c 	beq.w	177bc <ip_interface_sendto+0x30>
   17964:	2016      	movs	r0, #22
   17966:	f8df 9094 	ldr.w	r9, [pc, #148]	; 179fc <ip_interface_sendto+0x270>
   1796a:	e7d4      	b.n	17916 <ip_interface_sendto+0x18a>
   1796c:	2910      	cmp	r1, #16
   1796e:	f47f af72 	bne.w	17856 <ip_interface_sendto+0xca>
   17972:	2204      	movs	r2, #4
   17974:	8931      	ldrh	r1, [r6, #8]
   17976:	835a      	strh	r2, [r3, #26]
   17978:	8319      	strh	r1, [r3, #24]
   1797a:	f106 010c 	add.w	r1, r6, #12
   1797e:	f005 fe7a 	bl	1d676 <memcpy>
   17982:	e01e      	b.n	179c2 <ip_interface_sendto+0x236>
   17984:	682b      	ldr	r3, [r5, #0]
   17986:	031b      	lsls	r3, r3, #12
   17988:	f53f af2f 	bmi.w	177ea <ip_interface_sendto+0x5e>
   1798c:	682b      	ldr	r3, [r5, #0]
   1798e:	b29b      	uxth	r3, r3
   17990:	2b0d      	cmp	r3, #13
   17992:	f43f af2a 	beq.w	177ea <ip_interface_sendto+0x5e>
   17996:	682b      	ldr	r3, [r5, #0]
   17998:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1799c:	602b      	str	r3, [r5, #0]
   1799e:	682b      	ldr	r3, [r5, #0]
   179a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   179a4:	602b      	str	r3, [r5, #0]
   179a6:	e720      	b.n	177ea <ip_interface_sendto+0x5e>
   179a8:	682b      	ldr	r3, [r5, #0]
   179aa:	b29b      	uxth	r3, r3
   179ac:	2b05      	cmp	r3, #5
   179ae:	f47f af12 	bne.w	177d6 <ip_interface_sendto+0x4a>
   179b2:	e70c      	b.n	177ce <ip_interface_sendto+0x42>
   179b4:	2210      	movs	r2, #16
   179b6:	8931      	ldrh	r1, [r6, #8]
   179b8:	835a      	strh	r2, [r3, #26]
   179ba:	8319      	strh	r1, [r3, #24]
   179bc:	18b1      	adds	r1, r6, r2
   179be:	f005 fe5a 	bl	1d676 <memcpy>
   179c2:	f247 0207 	movw	r2, #28679	; 0x7007
   179c6:	9b07      	ldr	r3, [sp, #28]
   179c8:	4690      	mov	r8, r2
   179ca:	6899      	ldr	r1, [r3, #8]
   179cc:	8b58      	ldrh	r0, [r3, #26]
   179ce:	3104      	adds	r1, #4
   179d0:	4401      	add	r1, r0
   179d2:	9801      	ldr	r0, [sp, #4]
   179d4:	6099      	str	r1, [r3, #8]
   179d6:	6158      	str	r0, [r3, #20]
   179d8:	e759      	b.n	1788e <ip_interface_sendto+0x102>
   179da:	2023      	movs	r0, #35	; 0x23
   179dc:	f8df 901c 	ldr.w	r9, [pc, #28]	; 179fc <ip_interface_sendto+0x270>
   179e0:	e799      	b.n	17916 <ip_interface_sendto+0x18a>
   179e2:	2028      	movs	r0, #40	; 0x28
   179e4:	f8df 9014 	ldr.w	r9, [pc, #20]	; 179fc <ip_interface_sendto+0x270>
   179e8:	e795      	b.n	17916 <ip_interface_sendto+0x18a>
   179ea:	2039      	movs	r0, #57	; 0x39
   179ec:	f8df 900c 	ldr.w	r9, [pc, #12]	; 179fc <ip_interface_sendto+0x270>
   179f0:	e791      	b.n	17916 <ip_interface_sendto+0x18a>
   179f2:	2009      	movs	r0, #9
   179f4:	f8df 9004 	ldr.w	r9, [pc, #4]	; 179fc <ip_interface_sendto+0x270>
   179f8:	e78d      	b.n	17916 <ip_interface_sendto+0x18a>
   179fa:	bf00      	nop
   179fc:	2002095c 	.word	0x2002095c

00017a00 <ip_interface_recvfrom>:
   17a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a04:	b085      	sub	sp, #20
   17a06:	2a00      	cmp	r2, #0
   17a08:	f000 8110 	beq.w	17c2c <ip_interface_recvfrom+0x22c>
   17a0c:	468a      	mov	sl, r1
   17a0e:	4699      	mov	r9, r3
   17a10:	4607      	mov	r7, r0
   17a12:	4616      	mov	r6, r2
   17a14:	f001 f964 	bl	18ce0 <interface_socket_from_handle_get>
   17a18:	4604      	mov	r4, r0
   17a1a:	2800      	cmp	r0, #0
   17a1c:	f000 810d 	beq.w	17c3a <ip_interface_recvfrom+0x23a>
   17a20:	6803      	ldr	r3, [r0, #0]
   17a22:	02d9      	lsls	r1, r3, #11
   17a24:	d565      	bpl.n	17af2 <ip_interface_recvfrom+0xf2>
   17a26:	f019 0f02 	tst.w	r9, #2
   17a2a:	bf18      	it	ne
   17a2c:	f04f 0800 	movne.w	r8, #0
   17a30:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   17a34:	bf08      	it	eq
   17a36:	6803      	ldreq	r3, [r0, #0]
   17a38:	f009 0510 	and.w	r5, r9, #16
   17a3c:	bf04      	itt	eq
   17a3e:	f083 5880 	eoreq.w	r8, r3, #268435456	; 0x10000000
   17a42:	f3c8 7800 	ubfxeq	r8, r8, #28, #1
   17a46:	6823      	ldr	r3, [r4, #0]
   17a48:	03da      	lsls	r2, r3, #15
   17a4a:	d56d      	bpl.n	17b28 <ip_interface_recvfrom+0x128>
   17a4c:	6823      	ldr	r3, [r4, #0]
   17a4e:	69e0      	ldr	r0, [r4, #28]
   17a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   17a54:	6023      	str	r3, [r4, #0]
   17a56:	6803      	ldr	r3, [r0, #0]
   17a58:	68db      	ldr	r3, [r3, #12]
   17a5a:	4798      	blx	r3
   17a5c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   17a60:	4683      	mov	fp, r0
   17a62:	f000 8081 	beq.w	17b68 <ip_interface_recvfrom+0x168>
   17a66:	4286      	cmp	r6, r0
   17a68:	dd03      	ble.n	17a72 <ip_interface_recvfrom+0x72>
   17a6a:	6923      	ldr	r3, [r4, #16]
   17a6c:	2b01      	cmp	r3, #1
   17a6e:	f000 80a7 	beq.w	17bc0 <ip_interface_recvfrom+0x1c0>
   17a72:	2500      	movs	r5, #0
   17a74:	69e0      	ldr	r0, [r4, #28]
   17a76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17a78:	b103      	cbz	r3, 17a7c <ip_interface_recvfrom+0x7c>
   17a7a:	681b      	ldr	r3, [r3, #0]
   17a7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17a7e:	e9cd a600 	strd	sl, r6, [sp]
   17a82:	e9cd 2302 	strd	r2, r3, [sp, #8]
   17a86:	6803      	ldr	r3, [r0, #0]
   17a88:	464a      	mov	r2, r9
   17a8a:	689b      	ldr	r3, [r3, #8]
   17a8c:	4669      	mov	r1, sp
   17a8e:	4798      	blx	r3
   17a90:	4683      	mov	fp, r0
   17a92:	69e0      	ldr	r0, [r4, #28]
   17a94:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   17a98:	6803      	ldr	r3, [r0, #0]
   17a9a:	bf18      	it	ne
   17a9c:	2601      	movne	r6, #1
   17a9e:	68db      	ldr	r3, [r3, #12]
   17aa0:	bf0a      	itet	eq
   17aa2:	2600      	moveq	r6, #0
   17aa4:	f04f 0800 	movne.w	r8, #0
   17aa8:	f04f 0823 	moveq.w	r8, #35	; 0x23
   17aac:	4798      	blx	r3
   17aae:	3001      	adds	r0, #1
   17ab0:	d135      	bne.n	17b1e <ip_interface_recvfrom+0x11e>
   17ab2:	2d00      	cmp	r5, #0
   17ab4:	f000 80b6 	beq.w	17c24 <ip_interface_recvfrom+0x224>
   17ab8:	2e00      	cmp	r6, #0
   17aba:	f000 80a6 	beq.w	17c0a <ip_interface_recvfrom+0x20a>
   17abe:	6823      	ldr	r3, [r4, #0]
   17ac0:	0319      	lsls	r1, r3, #12
   17ac2:	d506      	bpl.n	17ad2 <ip_interface_recvfrom+0xd2>
   17ac4:	6823      	ldr	r3, [r4, #0]
   17ac6:	b29b      	uxth	r3, r3
   17ac8:	2b0d      	cmp	r3, #13
   17aca:	d002      	beq.n	17ad2 <ip_interface_recvfrom+0xd2>
   17acc:	6923      	ldr	r3, [r4, #16]
   17ace:	2b01      	cmp	r3, #1
   17ad0:	d025      	beq.n	17b1e <ip_interface_recvfrom+0x11e>
   17ad2:	6823      	ldr	r3, [r4, #0]
   17ad4:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   17ad8:	6823      	ldr	r3, [r4, #0]
   17ada:	f040 80b1 	bne.w	17c40 <ip_interface_recvfrom+0x240>
   17ade:	031a      	lsls	r2, r3, #12
   17ae0:	d475      	bmi.n	17bce <ip_interface_recvfrom+0x1ce>
   17ae2:	f1b8 0f00 	cmp.w	r8, #0
   17ae6:	f040 808a 	bne.w	17bfe <ip_interface_recvfrom+0x1fe>
   17aea:	4658      	mov	r0, fp
   17aec:	b005      	add	sp, #20
   17aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17af2:	6803      	ldr	r3, [r0, #0]
   17af4:	b29b      	uxth	r3, r3
   17af6:	2b06      	cmp	r3, #6
   17af8:	d073      	beq.n	17be2 <ip_interface_recvfrom+0x1e2>
   17afa:	6803      	ldr	r3, [r0, #0]
   17afc:	b29b      	uxth	r3, r3
   17afe:	2b07      	cmp	r3, #7
   17b00:	bf0c      	ite	eq
   17b02:	f04f 0809 	moveq.w	r8, #9
   17b06:	f04f 0839 	movne.w	r8, #57	; 0x39
   17b0a:	69e0      	ldr	r0, [r4, #28]
   17b0c:	6803      	ldr	r3, [r0, #0]
   17b0e:	68db      	ldr	r3, [r3, #12]
   17b10:	4798      	blx	r3
   17b12:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   17b16:	4683      	mov	fp, r0
   17b18:	d0db      	beq.n	17ad2 <ip_interface_recvfrom+0xd2>
   17b1a:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   17b1e:	6823      	ldr	r3, [r4, #0]
   17b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17b24:	6023      	str	r3, [r4, #0]
   17b26:	e7dc      	b.n	17ae2 <ip_interface_recvfrom+0xe2>
   17b28:	f1b8 0f00 	cmp.w	r8, #0
   17b2c:	f000 8081 	beq.w	17c32 <ip_interface_recvfrom+0x232>
   17b30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   17b34:	6a23      	ldr	r3, [r4, #32]
   17b36:	4611      	mov	r1, r2
   17b38:	2b00      	cmp	r3, #0
   17b3a:	bf08      	it	eq
   17b3c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   17b40:	4638      	mov	r0, r7
   17b42:	f001 f861 	bl	18c08 <interface_socket_wait>
   17b46:	4680      	mov	r8, r0
   17b48:	b358      	cbz	r0, 17ba2 <ip_interface_recvfrom+0x1a2>
   17b4a:	6823      	ldr	r3, [r4, #0]
   17b4c:	69e0      	ldr	r0, [r4, #28]
   17b4e:	031b      	lsls	r3, r3, #12
   17b50:	d521      	bpl.n	17b96 <ip_interface_recvfrom+0x196>
   17b52:	6823      	ldr	r3, [r4, #0]
   17b54:	b29b      	uxth	r3, r3
   17b56:	2b0d      	cmp	r3, #13
   17b58:	d01d      	beq.n	17b96 <ip_interface_recvfrom+0x196>
   17b5a:	6925      	ldr	r5, [r4, #16]
   17b5c:	f1a5 0501 	sub.w	r5, r5, #1
   17b60:	fab5 f585 	clz	r5, r5
   17b64:	096d      	lsrs	r5, r5, #5
   17b66:	e786      	b.n	17a76 <ip_interface_recvfrom+0x76>
   17b68:	6823      	ldr	r3, [r4, #0]
   17b6a:	0318      	lsls	r0, r3, #12
   17b6c:	d5dc      	bpl.n	17b28 <ip_interface_recvfrom+0x128>
   17b6e:	6823      	ldr	r3, [r4, #0]
   17b70:	b29b      	uxth	r3, r3
   17b72:	2b0d      	cmp	r3, #13
   17b74:	d0d8      	beq.n	17b28 <ip_interface_recvfrom+0x128>
   17b76:	6923      	ldr	r3, [r4, #16]
   17b78:	69e0      	ldr	r0, [r4, #28]
   17b7a:	2b01      	cmp	r3, #1
   17b7c:	d034      	beq.n	17be8 <ip_interface_recvfrom+0x1e8>
   17b7e:	f04f 0839 	mov.w	r8, #57	; 0x39
   17b82:	6823      	ldr	r3, [r4, #0]
   17b84:	0c1b      	lsrs	r3, r3, #16
   17b86:	041b      	lsls	r3, r3, #16
   17b88:	f043 030d 	orr.w	r3, r3, #13
   17b8c:	6023      	str	r3, [r4, #0]
   17b8e:	6823      	ldr	r3, [r4, #0]
   17b90:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   17b94:	6023      	str	r3, [r4, #0]
   17b96:	6803      	ldr	r3, [r0, #0]
   17b98:	68db      	ldr	r3, [r3, #12]
   17b9a:	4798      	blx	r3
   17b9c:	3001      	adds	r0, #1
   17b9e:	d1be      	bne.n	17b1e <ip_interface_recvfrom+0x11e>
   17ba0:	e797      	b.n	17ad2 <ip_interface_recvfrom+0xd2>
   17ba2:	4638      	mov	r0, r7
   17ba4:	f001 f89c 	bl	18ce0 <interface_socket_from_handle_get>
   17ba8:	b138      	cbz	r0, 17bba <ip_interface_recvfrom+0x1ba>
   17baa:	f8d0 8004 	ldr.w	r8, [r0, #4]
   17bae:	f1b8 0f00 	cmp.w	r8, #0
   17bb2:	d002      	beq.n	17bba <ip_interface_recvfrom+0x1ba>
   17bb4:	2300      	movs	r3, #0
   17bb6:	6043      	str	r3, [r0, #4]
   17bb8:	e7c7      	b.n	17b4a <ip_interface_recvfrom+0x14a>
   17bba:	f04f 0801 	mov.w	r8, #1
   17bbe:	e742      	b.n	17a46 <ip_interface_recvfrom+0x46>
   17bc0:	b11d      	cbz	r5, 17bca <ip_interface_recvfrom+0x1ca>
   17bc2:	6823      	ldr	r3, [r4, #0]
   17bc4:	00db      	lsls	r3, r3, #3
   17bc6:	d5b3      	bpl.n	17b30 <ip_interface_recvfrom+0x130>
   17bc8:	e753      	b.n	17a72 <ip_interface_recvfrom+0x72>
   17bca:	69e0      	ldr	r0, [r4, #28]
   17bcc:	e753      	b.n	17a76 <ip_interface_recvfrom+0x76>
   17bce:	6823      	ldr	r3, [r4, #0]
   17bd0:	b29b      	uxth	r3, r3
   17bd2:	2b0d      	cmp	r3, #13
   17bd4:	d185      	bne.n	17ae2 <ip_interface_recvfrom+0xe2>
   17bd6:	68a3      	ldr	r3, [r4, #8]
   17bd8:	2b00      	cmp	r3, #0
   17bda:	d082      	beq.n	17ae2 <ip_interface_recvfrom+0xe2>
   17bdc:	f8d4 8008 	ldr.w	r8, [r4, #8]
   17be0:	e77f      	b.n	17ae2 <ip_interface_recvfrom+0xe2>
   17be2:	f04f 0809 	mov.w	r8, #9
   17be6:	e790      	b.n	17b0a <ip_interface_recvfrom+0x10a>
   17be8:	6803      	ldr	r3, [r0, #0]
   17bea:	68db      	ldr	r3, [r3, #12]
   17bec:	4798      	blx	r3
   17bee:	3001      	adds	r0, #1
   17bf0:	d00b      	beq.n	17c0a <ip_interface_recvfrom+0x20a>
   17bf2:	f04f 0823 	mov.w	r8, #35	; 0x23
   17bf6:	6823      	ldr	r3, [r4, #0]
   17bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17bfc:	6023      	str	r3, [r4, #0]
   17bfe:	4640      	mov	r0, r8
   17c00:	f7f9 fef0 	bl	119e4 <bsd_os_errno_set>
   17c04:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   17c08:	e76f      	b.n	17aea <ip_interface_recvfrom+0xea>
   17c0a:	6823      	ldr	r3, [r4, #0]
   17c0c:	f04f 0b00 	mov.w	fp, #0
   17c10:	0c1b      	lsrs	r3, r3, #16
   17c12:	041b      	lsls	r3, r3, #16
   17c14:	f043 030d 	orr.w	r3, r3, #13
   17c18:	6023      	str	r3, [r4, #0]
   17c1a:	6823      	ldr	r3, [r4, #0]
   17c1c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   17c20:	6023      	str	r3, [r4, #0]
   17c22:	e762      	b.n	17aea <ip_interface_recvfrom+0xea>
   17c24:	2e00      	cmp	r6, #0
   17c26:	f47f af4a 	bne.w	17abe <ip_interface_recvfrom+0xbe>
   17c2a:	e752      	b.n	17ad2 <ip_interface_recvfrom+0xd2>
   17c2c:	f04f 0816 	mov.w	r8, #22
   17c30:	e7e5      	b.n	17bfe <ip_interface_recvfrom+0x1fe>
   17c32:	f04f 0823 	mov.w	r8, #35	; 0x23
   17c36:	69e0      	ldr	r0, [r4, #28]
   17c38:	e7ad      	b.n	17b96 <ip_interface_recvfrom+0x196>
   17c3a:	f04f 0809 	mov.w	r8, #9
   17c3e:	e7de      	b.n	17bfe <ip_interface_recvfrom+0x1fe>
   17c40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   17c44:	6023      	str	r3, [r4, #0]
   17c46:	6823      	ldr	r3, [r4, #0]
   17c48:	f04f 0869 	mov.w	r8, #105	; 0x69
   17c4c:	0c1b      	lsrs	r3, r3, #16
   17c4e:	041b      	lsls	r3, r3, #16
   17c50:	f043 030d 	orr.w	r3, r3, #13
   17c54:	6023      	str	r3, [r4, #0]
   17c56:	e7d2      	b.n	17bfe <ip_interface_recvfrom+0x1fe>

00017c58 <ip_interface_connect>:
   17c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17c5c:	b082      	sub	sp, #8
   17c5e:	2900      	cmp	r1, #0
   17c60:	d044      	beq.n	17cec <ip_interface_connect+0x94>
   17c62:	2a00      	cmp	r2, #0
   17c64:	d042      	beq.n	17cec <ip_interface_connect+0x94>
   17c66:	4606      	mov	r6, r0
   17c68:	460f      	mov	r7, r1
   17c6a:	f001 f839 	bl	18ce0 <interface_socket_from_handle_get>
   17c6e:	4605      	mov	r5, r0
   17c70:	2800      	cmp	r0, #0
   17c72:	f000 8096 	beq.w	17da2 <ip_interface_connect+0x14a>
   17c76:	6803      	ldr	r3, [r0, #0]
   17c78:	b29b      	uxth	r3, r3
   17c7a:	2b02      	cmp	r3, #2
   17c7c:	d004      	beq.n	17c88 <ip_interface_connect+0x30>
   17c7e:	6803      	ldr	r3, [r0, #0]
   17c80:	b29b      	uxth	r3, r3
   17c82:	2b04      	cmp	r3, #4
   17c84:	f040 808d 	bne.w	17da2 <ip_interface_connect+0x14a>
   17c88:	6829      	ldr	r1, [r5, #0]
   17c8a:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   17c8e:	f040 8084 	bne.w	17d9a <ip_interface_connect+0x142>
   17c92:	a802      	add	r0, sp, #8
   17c94:	f840 1d04 	str.w	r1, [r0, #-4]!
   17c98:	f8d5 8018 	ldr.w	r8, [r5, #24]
   17c9c:	f7fb ff80 	bl	13ba0 <rpc_ip_client_request_alloc>
   17ca0:	bb70      	cbnz	r0, 17d00 <ip_interface_connect+0xa8>
   17ca2:	2108      	movs	r1, #8
   17ca4:	0433      	lsls	r3, r6, #16
   17ca6:	9c01      	ldr	r4, [sp, #4]
   17ca8:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
   17cac:	f042 0202 	orr.w	r2, r2, #2
   17cb0:	60e2      	str	r2, [r4, #12]
   17cb2:	f8c4 8010 	str.w	r8, [r4, #16]
   17cb6:	7260      	strb	r0, [r4, #9]
   17cb8:	72a0      	strb	r0, [r4, #10]
   17cba:	72e0      	strb	r0, [r4, #11]
   17cbc:	7221      	strb	r1, [r4, #8]
   17cbe:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
   17cc2:	f043 0302 	orr.w	r3, r3, #2
   17cc6:	60e3      	str	r3, [r4, #12]
   17cc8:	68a3      	ldr	r3, [r4, #8]
   17cca:	69aa      	ldr	r2, [r5, #24]
   17ccc:	3304      	adds	r3, #4
   17cce:	6122      	str	r2, [r4, #16]
   17cd0:	60a3      	str	r3, [r4, #8]
   17cd2:	68eb      	ldr	r3, [r5, #12]
   17cd4:	687a      	ldr	r2, [r7, #4]
   17cd6:	4293      	cmp	r3, r2
   17cd8:	d108      	bne.n	17cec <ip_interface_connect+0x94>
   17cda:	2b02      	cmp	r3, #2
   17cdc:	f104 0018 	add.w	r0, r4, #24
   17ce0:	783a      	ldrb	r2, [r7, #0]
   17ce2:	d03a      	beq.n	17d5a <ip_interface_connect+0x102>
   17ce4:	2b0a      	cmp	r3, #10
   17ce6:	d101      	bne.n	17cec <ip_interface_connect+0x94>
   17ce8:	2a24      	cmp	r2, #36	; 0x24
   17cea:	d00e      	beq.n	17d0a <ip_interface_connect+0xb2>
   17cec:	2416      	movs	r4, #22
   17cee:	4620      	mov	r0, r4
   17cf0:	f7f9 fe78 	bl	119e4 <bsd_os_errno_set>
   17cf4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17cf8:	4620      	mov	r0, r4
   17cfa:	b002      	add	sp, #8
   17cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17d00:	9c01      	ldr	r4, [sp, #4]
   17d02:	2c00      	cmp	r4, #0
   17d04:	d04f      	beq.n	17da6 <ip_interface_connect+0x14e>
   17d06:	0433      	lsls	r3, r6, #16
   17d08:	e7d9      	b.n	17cbe <ip_interface_connect+0x66>
   17d0a:	2210      	movs	r2, #16
   17d0c:	893b      	ldrh	r3, [r7, #8]
   17d0e:	18b9      	adds	r1, r7, r2
   17d10:	82e2      	strh	r2, [r4, #22]
   17d12:	82a3      	strh	r3, [r4, #20]
   17d14:	f005 fcaf 	bl	1d676 <memcpy>
   17d18:	68a3      	ldr	r3, [r4, #8]
   17d1a:	8ae2      	ldrh	r2, [r4, #22]
   17d1c:	f247 0102 	movw	r1, #28674	; 0x7002
   17d20:	4413      	add	r3, r2
   17d22:	60a3      	str	r3, [r4, #8]
   17d24:	682f      	ldr	r7, [r5, #0]
   17d26:	682b      	ldr	r3, [r5, #0]
   17d28:	4620      	mov	r0, r4
   17d2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   17d2e:	602b      	str	r3, [r5, #0]
   17d30:	f7fb ff4a 	bl	13bc8 <rpc_ip_client_request_send>
   17d34:	b9e0      	cbnz	r0, 17d70 <ip_interface_connect+0x118>
   17d36:	682b      	ldr	r3, [r5, #0]
   17d38:	f013 5880 	ands.w	r8, r3, #268435456	; 0x10000000
   17d3c:	d12f      	bne.n	17d9e <ip_interface_connect+0x146>
   17d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17d46:	2105      	movs	r1, #5
   17d48:	4630      	mov	r0, r6
   17d4a:	f000 ff5d 	bl	18c08 <interface_socket_wait>
   17d4e:	4604      	mov	r4, r0
   17d50:	b1c0      	cbz	r0, 17d84 <ip_interface_connect+0x12c>
   17d52:	2c73      	cmp	r4, #115	; 0x73
   17d54:	d0cb      	beq.n	17cee <ip_interface_connect+0x96>
   17d56:	602f      	str	r7, [r5, #0]
   17d58:	e7c9      	b.n	17cee <ip_interface_connect+0x96>
   17d5a:	2a10      	cmp	r2, #16
   17d5c:	d1c6      	bne.n	17cec <ip_interface_connect+0x94>
   17d5e:	2204      	movs	r2, #4
   17d60:	893b      	ldrh	r3, [r7, #8]
   17d62:	f107 010c 	add.w	r1, r7, #12
   17d66:	82e2      	strh	r2, [r4, #22]
   17d68:	82a3      	strh	r3, [r4, #20]
   17d6a:	f005 fc84 	bl	1d676 <memcpy>
   17d6e:	e7d3      	b.n	17d18 <ip_interface_connect+0xc0>
   17d70:	6820      	ldr	r0, [r4, #0]
   17d72:	b108      	cbz	r0, 17d78 <ip_interface_connect+0x120>
   17d74:	f7fb ff46 	bl	13c04 <rpc_ip_client_data_free>
   17d78:	4620      	mov	r0, r4
   17d7a:	f7fb ff3b 	bl	13bf4 <rpc_ip_client_message_free>
   17d7e:	2423      	movs	r4, #35	; 0x23
   17d80:	602f      	str	r7, [r5, #0]
   17d82:	e7b4      	b.n	17cee <ip_interface_connect+0x96>
   17d84:	4630      	mov	r0, r6
   17d86:	f000 ffab 	bl	18ce0 <interface_socket_from_handle_get>
   17d8a:	2800      	cmp	r0, #0
   17d8c:	d0b4      	beq.n	17cf8 <ip_interface_connect+0xa0>
   17d8e:	6844      	ldr	r4, [r0, #4]
   17d90:	2c00      	cmp	r4, #0
   17d92:	d0b1      	beq.n	17cf8 <ip_interface_connect+0xa0>
   17d94:	f8c0 8004 	str.w	r8, [r0, #4]
   17d98:	e7db      	b.n	17d52 <ip_interface_connect+0xfa>
   17d9a:	2472      	movs	r4, #114	; 0x72
   17d9c:	e7a7      	b.n	17cee <ip_interface_connect+0x96>
   17d9e:	2473      	movs	r4, #115	; 0x73
   17da0:	e7a5      	b.n	17cee <ip_interface_connect+0x96>
   17da2:	2409      	movs	r4, #9
   17da4:	e7a3      	b.n	17cee <ip_interface_connect+0x96>
   17da6:	240c      	movs	r4, #12
   17da8:	e7a1      	b.n	17cee <ip_interface_connect+0x96>
   17daa:	bf00      	nop

00017dac <ip_interface_bind>:
   17dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17db0:	b082      	sub	sp, #8
   17db2:	b389      	cbz	r1, 17e18 <ip_interface_bind+0x6c>
   17db4:	b382      	cbz	r2, 17e18 <ip_interface_bind+0x6c>
   17db6:	4607      	mov	r7, r0
   17db8:	460e      	mov	r6, r1
   17dba:	f000 ff91 	bl	18ce0 <interface_socket_from_handle_get>
   17dbe:	4605      	mov	r5, r0
   17dc0:	2800      	cmp	r0, #0
   17dc2:	d07b      	beq.n	17ebc <ip_interface_bind+0x110>
   17dc4:	6803      	ldr	r3, [r0, #0]
   17dc6:	b29b      	uxth	r3, r3
   17dc8:	2b02      	cmp	r3, #2
   17dca:	d177      	bne.n	17ebc <ip_interface_bind+0x110>
   17dcc:	2100      	movs	r1, #0
   17dce:	a802      	add	r0, sp, #8
   17dd0:	f840 1d04 	str.w	r1, [r0, #-4]!
   17dd4:	f8d5 8018 	ldr.w	r8, [r5, #24]
   17dd8:	f7fb fee2 	bl	13ba0 <rpc_ip_client_request_alloc>
   17ddc:	bb30      	cbnz	r0, 17e2c <ip_interface_bind+0x80>
   17dde:	f247 0305 	movw	r3, #28677	; 0x7005
   17de2:	2208      	movs	r2, #8
   17de4:	9c01      	ldr	r4, [sp, #4]
   17de6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   17dea:	60e3      	str	r3, [r4, #12]
   17dec:	f8c4 8010 	str.w	r8, [r4, #16]
   17df0:	7260      	strb	r0, [r4, #9]
   17df2:	72a0      	strb	r0, [r4, #10]
   17df4:	72e0      	strb	r0, [r4, #11]
   17df6:	7222      	strb	r2, [r4, #8]
   17df8:	68a3      	ldr	r3, [r4, #8]
   17dfa:	3304      	adds	r3, #4
   17dfc:	60a3      	str	r3, [r4, #8]
   17dfe:	68eb      	ldr	r3, [r5, #12]
   17e00:	6872      	ldr	r2, [r6, #4]
   17e02:	4293      	cmp	r3, r2
   17e04:	d108      	bne.n	17e18 <ip_interface_bind+0x6c>
   17e06:	2b02      	cmp	r3, #2
   17e08:	f104 0018 	add.w	r0, r4, #24
   17e0c:	7832      	ldrb	r2, [r6, #0]
   17e0e:	d03c      	beq.n	17e8a <ip_interface_bind+0xde>
   17e10:	2b0a      	cmp	r3, #10
   17e12:	d101      	bne.n	17e18 <ip_interface_bind+0x6c>
   17e14:	2a24      	cmp	r2, #36	; 0x24
   17e16:	d00e      	beq.n	17e36 <ip_interface_bind+0x8a>
   17e18:	2416      	movs	r4, #22
   17e1a:	4620      	mov	r0, r4
   17e1c:	f7f9 fde2 	bl	119e4 <bsd_os_errno_set>
   17e20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17e24:	4620      	mov	r0, r4
   17e26:	b002      	add	sp, #8
   17e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17e2c:	9c01      	ldr	r4, [sp, #4]
   17e2e:	2c00      	cmp	r4, #0
   17e30:	d1e2      	bne.n	17df8 <ip_interface_bind+0x4c>
   17e32:	240c      	movs	r4, #12
   17e34:	e7f1      	b.n	17e1a <ip_interface_bind+0x6e>
   17e36:	2210      	movs	r2, #16
   17e38:	8933      	ldrh	r3, [r6, #8]
   17e3a:	18b1      	adds	r1, r6, r2
   17e3c:	82e2      	strh	r2, [r4, #22]
   17e3e:	82a3      	strh	r3, [r4, #20]
   17e40:	f005 fc19 	bl	1d676 <memcpy>
   17e44:	68a3      	ldr	r3, [r4, #8]
   17e46:	8ae2      	ldrh	r2, [r4, #22]
   17e48:	f247 0105 	movw	r1, #28677	; 0x7005
   17e4c:	4413      	add	r3, r2
   17e4e:	60a3      	str	r3, [r4, #8]
   17e50:	682b      	ldr	r3, [r5, #0]
   17e52:	4620      	mov	r0, r4
   17e54:	0c1b      	lsrs	r3, r3, #16
   17e56:	041b      	lsls	r3, r3, #16
   17e58:	f043 0303 	orr.w	r3, r3, #3
   17e5c:	602b      	str	r3, [r5, #0]
   17e5e:	682e      	ldr	r6, [r5, #0]
   17e60:	f7fb feb2 	bl	13bc8 <rpc_ip_client_request_send>
   17e64:	4680      	mov	r8, r0
   17e66:	b9d8      	cbnz	r0, 17ea0 <ip_interface_bind+0xf4>
   17e68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17e6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17e70:	2104      	movs	r1, #4
   17e72:	4638      	mov	r0, r7
   17e74:	f000 fec8 	bl	18c08 <interface_socket_wait>
   17e78:	4604      	mov	r4, r0
   17e7a:	b308      	cbz	r0, 17ec0 <ip_interface_bind+0x114>
   17e7c:	682b      	ldr	r3, [r5, #0]
   17e7e:	0c1b      	lsrs	r3, r3, #16
   17e80:	041b      	lsls	r3, r3, #16
   17e82:	f043 0302 	orr.w	r3, r3, #2
   17e86:	602b      	str	r3, [r5, #0]
   17e88:	e7c7      	b.n	17e1a <ip_interface_bind+0x6e>
   17e8a:	2a10      	cmp	r2, #16
   17e8c:	d1c4      	bne.n	17e18 <ip_interface_bind+0x6c>
   17e8e:	2204      	movs	r2, #4
   17e90:	8933      	ldrh	r3, [r6, #8]
   17e92:	f106 010c 	add.w	r1, r6, #12
   17e96:	82e2      	strh	r2, [r4, #22]
   17e98:	82a3      	strh	r3, [r4, #20]
   17e9a:	f005 fbec 	bl	1d676 <memcpy>
   17e9e:	e7d1      	b.n	17e44 <ip_interface_bind+0x98>
   17ea0:	6820      	ldr	r0, [r4, #0]
   17ea2:	b108      	cbz	r0, 17ea8 <ip_interface_bind+0xfc>
   17ea4:	f7fb feae 	bl	13c04 <rpc_ip_client_data_free>
   17ea8:	0c36      	lsrs	r6, r6, #16
   17eaa:	0436      	lsls	r6, r6, #16
   17eac:	4620      	mov	r0, r4
   17eae:	f046 0602 	orr.w	r6, r6, #2
   17eb2:	f7fb fe9f 	bl	13bf4 <rpc_ip_client_message_free>
   17eb6:	2423      	movs	r4, #35	; 0x23
   17eb8:	602e      	str	r6, [r5, #0]
   17eba:	e7ae      	b.n	17e1a <ip_interface_bind+0x6e>
   17ebc:	2409      	movs	r4, #9
   17ebe:	e7ac      	b.n	17e1a <ip_interface_bind+0x6e>
   17ec0:	4638      	mov	r0, r7
   17ec2:	f000 ff0d 	bl	18ce0 <interface_socket_from_handle_get>
   17ec6:	2800      	cmp	r0, #0
   17ec8:	d0ac      	beq.n	17e24 <ip_interface_bind+0x78>
   17eca:	6844      	ldr	r4, [r0, #4]
   17ecc:	2c00      	cmp	r4, #0
   17ece:	d0a9      	beq.n	17e24 <ip_interface_bind+0x78>
   17ed0:	f8c0 8004 	str.w	r8, [r0, #4]
   17ed4:	e7d2      	b.n	17e7c <ip_interface_bind+0xd0>
   17ed6:	bf00      	nop

00017ed8 <ip_interface_listen>:
   17ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17edc:	b082      	sub	sp, #8
   17ede:	4606      	mov	r6, r0
   17ee0:	f000 fefe 	bl	18ce0 <interface_socket_from_handle_get>
   17ee4:	2800      	cmp	r0, #0
   17ee6:	d067      	beq.n	17fb8 <ip_interface_listen+0xe0>
   17ee8:	6803      	ldr	r3, [r0, #0]
   17eea:	4605      	mov	r5, r0
   17eec:	b29b      	uxth	r3, r3
   17eee:	2b04      	cmp	r3, #4
   17ef0:	d162      	bne.n	17fb8 <ip_interface_listen+0xe0>
   17ef2:	2100      	movs	r1, #0
   17ef4:	4a32      	ldr	r2, [pc, #200]	; (17fc0 <ip_interface_listen+0xe8>)
   17ef6:	4630      	mov	r0, r6
   17ef8:	f000 fe4e 	bl	18b98 <interface_socket_packet_handler_update>
   17efc:	4601      	mov	r1, r0
   17efe:	2800      	cmp	r0, #0
   17f00:	d15c      	bne.n	17fbc <ip_interface_listen+0xe4>
   17f02:	a802      	add	r0, sp, #8
   17f04:	f840 1d04 	str.w	r1, [r0, #-4]!
   17f08:	69af      	ldr	r7, [r5, #24]
   17f0a:	f7fb fe49 	bl	13ba0 <rpc_ip_client_request_alloc>
   17f0e:	bba8      	cbnz	r0, 17f7c <ip_interface_listen+0xa4>
   17f10:	f247 0308 	movw	r3, #28680	; 0x7008
   17f14:	2208      	movs	r2, #8
   17f16:	9c01      	ldr	r4, [sp, #4]
   17f18:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   17f1c:	60e3      	str	r3, [r4, #12]
   17f1e:	6127      	str	r7, [r4, #16]
   17f20:	7260      	strb	r0, [r4, #9]
   17f22:	72a0      	strb	r0, [r4, #10]
   17f24:	72e0      	strb	r0, [r4, #11]
   17f26:	7222      	strb	r2, [r4, #8]
   17f28:	68a3      	ldr	r3, [r4, #8]
   17f2a:	f247 0108 	movw	r1, #28680	; 0x7008
   17f2e:	3304      	adds	r3, #4
   17f30:	60a3      	str	r3, [r4, #8]
   17f32:	682b      	ldr	r3, [r5, #0]
   17f34:	4620      	mov	r0, r4
   17f36:	0c1b      	lsrs	r3, r3, #16
   17f38:	041b      	lsls	r3, r3, #16
   17f3a:	f043 0306 	orr.w	r3, r3, #6
   17f3e:	602b      	str	r3, [r5, #0]
   17f40:	682f      	ldr	r7, [r5, #0]
   17f42:	f7fb fe41 	bl	13bc8 <rpc_ip_client_request_send>
   17f46:	4680      	mov	r8, r0
   17f48:	b9e8      	cbnz	r0, 17f86 <ip_interface_listen+0xae>
   17f4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17f52:	2107      	movs	r1, #7
   17f54:	4630      	mov	r0, r6
   17f56:	f000 fe57 	bl	18c08 <interface_socket_wait>
   17f5a:	4604      	mov	r4, r0
   17f5c:	b308      	cbz	r0, 17fa2 <ip_interface_listen+0xca>
   17f5e:	682b      	ldr	r3, [r5, #0]
   17f60:	0c1b      	lsrs	r3, r3, #16
   17f62:	041b      	lsls	r3, r3, #16
   17f64:	f043 0304 	orr.w	r3, r3, #4
   17f68:	602b      	str	r3, [r5, #0]
   17f6a:	4620      	mov	r0, r4
   17f6c:	f7f9 fd3a 	bl	119e4 <bsd_os_errno_set>
   17f70:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17f74:	4620      	mov	r0, r4
   17f76:	b002      	add	sp, #8
   17f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17f7c:	9c01      	ldr	r4, [sp, #4]
   17f7e:	2c00      	cmp	r4, #0
   17f80:	d1d2      	bne.n	17f28 <ip_interface_listen+0x50>
   17f82:	240c      	movs	r4, #12
   17f84:	e7f1      	b.n	17f6a <ip_interface_listen+0x92>
   17f86:	6820      	ldr	r0, [r4, #0]
   17f88:	b108      	cbz	r0, 17f8e <ip_interface_listen+0xb6>
   17f8a:	f7fb fe3b 	bl	13c04 <rpc_ip_client_data_free>
   17f8e:	0c3f      	lsrs	r7, r7, #16
   17f90:	043f      	lsls	r7, r7, #16
   17f92:	4620      	mov	r0, r4
   17f94:	f047 0704 	orr.w	r7, r7, #4
   17f98:	f7fb fe2c 	bl	13bf4 <rpc_ip_client_message_free>
   17f9c:	2423      	movs	r4, #35	; 0x23
   17f9e:	602f      	str	r7, [r5, #0]
   17fa0:	e7e3      	b.n	17f6a <ip_interface_listen+0x92>
   17fa2:	4630      	mov	r0, r6
   17fa4:	f000 fe9c 	bl	18ce0 <interface_socket_from_handle_get>
   17fa8:	2800      	cmp	r0, #0
   17faa:	d0e3      	beq.n	17f74 <ip_interface_listen+0x9c>
   17fac:	6844      	ldr	r4, [r0, #4]
   17fae:	2c00      	cmp	r4, #0
   17fb0:	d0e0      	beq.n	17f74 <ip_interface_listen+0x9c>
   17fb2:	f8c0 8004 	str.w	r8, [r0, #4]
   17fb6:	e7d2      	b.n	17f5e <ip_interface_listen+0x86>
   17fb8:	2409      	movs	r4, #9
   17fba:	e7d6      	b.n	17f6a <ip_interface_listen+0x92>
   17fbc:	2423      	movs	r4, #35	; 0x23
   17fbe:	e7d4      	b.n	17f6a <ip_interface_listen+0x92>
   17fc0:	00017469 	.word	0x00017469

00017fc4 <ip_interface_accept>:
   17fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fc8:	2500      	movs	r5, #0
   17fca:	b085      	sub	sp, #20
   17fcc:	460f      	mov	r7, r1
   17fce:	4690      	mov	r8, r2
   17fd0:	9502      	str	r5, [sp, #8]
   17fd2:	4606      	mov	r6, r0
   17fd4:	f000 fe84 	bl	18ce0 <interface_socket_from_handle_get>
   17fd8:	4604      	mov	r4, r0
   17fda:	2800      	cmp	r0, #0
   17fdc:	f000 811c 	beq.w	18218 <ip_interface_accept+0x254>
   17fe0:	6803      	ldr	r3, [r0, #0]
   17fe2:	b29b      	uxth	r3, r3
   17fe4:	2b07      	cmp	r3, #7
   17fe6:	d10a      	bne.n	17ffe <ip_interface_accept+0x3a>
   17fe8:	6803      	ldr	r3, [r0, #0]
   17fea:	6805      	ldr	r5, [r0, #0]
   17fec:	00db      	lsls	r3, r3, #3
   17fee:	d416      	bmi.n	1801e <ip_interface_accept+0x5a>
   17ff0:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   17ff4:	d019      	beq.n	1802a <ip_interface_accept+0x66>
   17ff6:	6805      	ldr	r5, [r0, #0]
   17ff8:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   17ffc:	d124      	bne.n	18048 <ip_interface_accept+0x84>
   17ffe:	f04f 0909 	mov.w	r9, #9
   18002:	9b02      	ldr	r3, [sp, #8]
   18004:	b113      	cbz	r3, 1800c <ip_interface_accept+0x48>
   18006:	4628      	mov	r0, r5
   18008:	f000 fdb0 	bl	18b6c <interface_socket_free>
   1800c:	4648      	mov	r0, r9
   1800e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   18012:	f7f9 fce7 	bl	119e4 <bsd_os_errno_set>
   18016:	4648      	mov	r0, r9
   18018:	b005      	add	sp, #20
   1801a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1801e:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   18022:	d16d      	bne.n	18100 <ip_interface_accept+0x13c>
   18024:	f04f 0923 	mov.w	r9, #35	; 0x23
   18028:	e7eb      	b.n	18002 <ip_interface_accept+0x3e>
   1802a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1802e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18032:	4611      	mov	r1, r2
   18034:	4630      	mov	r0, r6
   18036:	f000 fde7 	bl	18c08 <interface_socket_wait>
   1803a:	4681      	mov	r9, r0
   1803c:	2800      	cmp	r0, #0
   1803e:	d07e      	beq.n	1813e <ip_interface_accept+0x17a>
   18040:	6825      	ldr	r5, [r4, #0]
   18042:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   18046:	d0dc      	beq.n	18002 <ip_interface_accept+0x3e>
   18048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1804c:	2300      	movs	r3, #0
   1804e:	e9cd 0300 	strd	r0, r3, [sp]
   18052:	4a75      	ldr	r2, [pc, #468]	; (18228 <ip_interface_accept+0x264>)
   18054:	6921      	ldr	r1, [r4, #16]
   18056:	a802      	add	r0, sp, #8
   18058:	f000 fd32 	bl	18ac0 <interface_socket_allocate>
   1805c:	9b02      	ldr	r3, [sp, #8]
   1805e:	4605      	mov	r5, r0
   18060:	2b00      	cmp	r3, #0
   18062:	f000 80dd 	beq.w	18220 <ip_interface_accept+0x25c>
   18066:	2100      	movs	r1, #0
   18068:	6962      	ldr	r2, [r4, #20]
   1806a:	a804      	add	r0, sp, #16
   1806c:	615a      	str	r2, [r3, #20]
   1806e:	68e2      	ldr	r2, [r4, #12]
   18070:	f840 1d04 	str.w	r1, [r0, #-4]!
   18074:	60da      	str	r2, [r3, #12]
   18076:	6922      	ldr	r2, [r4, #16]
   18078:	611a      	str	r2, [r3, #16]
   1807a:	f8d4 9018 	ldr.w	r9, [r4, #24]
   1807e:	f7fb fd8f 	bl	13ba0 <rpc_ip_client_request_alloc>
   18082:	2800      	cmp	r0, #0
   18084:	d143      	bne.n	1810e <ip_interface_accept+0x14a>
   18086:	f247 030c 	movw	r3, #28684	; 0x700c
   1808a:	2108      	movs	r1, #8
   1808c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   18090:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   18094:	f8cb 300c 	str.w	r3, [fp, #12]
   18098:	f8cb 9010 	str.w	r9, [fp, #16]
   1809c:	f88b 0009 	strb.w	r0, [fp, #9]
   180a0:	f88b 000a 	strb.w	r0, [fp, #10]
   180a4:	f88b 000b 	strb.w	r0, [fp, #11]
   180a8:	f88b 1008 	strb.w	r1, [fp, #8]
   180ac:	6823      	ldr	r3, [r4, #0]
   180ae:	f247 010c 	movw	r1, #28684	; 0x700c
   180b2:	0c1b      	lsrs	r3, r3, #16
   180b4:	041b      	lsls	r3, r3, #16
   180b6:	f043 0308 	orr.w	r3, r3, #8
   180ba:	6023      	str	r3, [r4, #0]
   180bc:	4658      	mov	r0, fp
   180be:	f8d4 9000 	ldr.w	r9, [r4]
   180c2:	f7fb fd81 	bl	13bc8 <rpc_ip_client_request_send>
   180c6:	4682      	mov	sl, r0
   180c8:	bb48      	cbnz	r0, 1811e <ip_interface_accept+0x15a>
   180ca:	6822      	ldr	r2, [r4, #0]
   180cc:	9900      	ldr	r1, [sp, #0]
   180ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   180d2:	400a      	ands	r2, r1
   180d4:	6022      	str	r2, [r4, #0]
   180d6:	2109      	movs	r1, #9
   180d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   180dc:	4630      	mov	r0, r6
   180de:	f000 fd93 	bl	18c08 <interface_socket_wait>
   180e2:	4681      	mov	r9, r0
   180e4:	2800      	cmp	r0, #0
   180e6:	f000 8085 	beq.w	181f4 <ip_interface_accept+0x230>
   180ea:	6823      	ldr	r3, [r4, #0]
   180ec:	9a01      	ldr	r2, [sp, #4]
   180ee:	431a      	orrs	r2, r3
   180f0:	6022      	str	r2, [r4, #0]
   180f2:	6823      	ldr	r3, [r4, #0]
   180f4:	0c1b      	lsrs	r3, r3, #16
   180f6:	041b      	lsls	r3, r3, #16
   180f8:	f043 0307 	orr.w	r3, r3, #7
   180fc:	6023      	str	r3, [r4, #0]
   180fe:	e780      	b.n	18002 <ip_interface_accept+0x3e>
   18100:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   18104:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18108:	e9cd 2300 	strd	r2, r3, [sp]
   1810c:	e7a1      	b.n	18052 <ip_interface_accept+0x8e>
   1810e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   18112:	f04f 090c 	mov.w	r9, #12
   18116:	f1bb 0f00 	cmp.w	fp, #0
   1811a:	d1c7      	bne.n	180ac <ip_interface_accept+0xe8>
   1811c:	e771      	b.n	18002 <ip_interface_accept+0x3e>
   1811e:	f8db 0000 	ldr.w	r0, [fp]
   18122:	b108      	cbz	r0, 18128 <ip_interface_accept+0x164>
   18124:	f7fb fd6e 	bl	13c04 <rpc_ip_client_data_free>
   18128:	ea4f 4919 	mov.w	r9, r9, lsr #16
   1812c:	4658      	mov	r0, fp
   1812e:	ea4f 4909 	mov.w	r9, r9, lsl #16
   18132:	f7fb fd5f 	bl	13bf4 <rpc_ip_client_message_free>
   18136:	f049 0307 	orr.w	r3, r9, #7
   1813a:	6023      	str	r3, [r4, #0]
   1813c:	e772      	b.n	18024 <ip_interface_accept+0x60>
   1813e:	4630      	mov	r0, r6
   18140:	f000 fdce 	bl	18ce0 <interface_socket_from_handle_get>
   18144:	b130      	cbz	r0, 18154 <ip_interface_accept+0x190>
   18146:	f8d0 9004 	ldr.w	r9, [r0, #4]
   1814a:	f1b9 0f00 	cmp.w	r9, #0
   1814e:	d001      	beq.n	18154 <ip_interface_accept+0x190>
   18150:	6045      	str	r5, [r0, #4]
   18152:	e775      	b.n	18040 <ip_interface_accept+0x7c>
   18154:	6823      	ldr	r3, [r4, #0]
   18156:	03d9      	lsls	r1, r3, #15
   18158:	f53f af76 	bmi.w	18048 <ip_interface_accept+0x84>
   1815c:	4d33      	ldr	r5, [pc, #204]	; (1822c <ip_interface_accept+0x268>)
   1815e:	9902      	ldr	r1, [sp, #8]
   18160:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   18164:	699b      	ldr	r3, [r3, #24]
   18166:	618b      	str	r3, [r1, #24]
   18168:	b147      	cbz	r7, 1817c <ip_interface_accept+0x1b8>
   1816a:	68cb      	ldr	r3, [r1, #12]
   1816c:	2b0a      	cmp	r3, #10
   1816e:	d024      	beq.n	181ba <ip_interface_accept+0x1f6>
   18170:	2b02      	cmp	r3, #2
   18172:	d103      	bne.n	1817c <ip_interface_accept+0x1b8>
   18174:	f8d8 2000 	ldr.w	r2, [r8]
   18178:	2a10      	cmp	r2, #16
   1817a:	d032      	beq.n	181e2 <ip_interface_accept+0x21e>
   1817c:	680a      	ldr	r2, [r1, #0]
   1817e:	482c      	ldr	r0, [pc, #176]	; (18230 <ip_interface_accept+0x26c>)
   18180:	4002      	ands	r2, r0
   18182:	f042 0205 	orr.w	r2, r2, #5
   18186:	600a      	str	r2, [r1, #0]
   18188:	9a02      	ldr	r2, [sp, #8]
   1818a:	6811      	ldr	r1, [r2, #0]
   1818c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   18190:	6011      	str	r1, [r2, #0]
   18192:	6811      	ldr	r1, [r2, #0]
   18194:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18198:	6011      	str	r1, [r2, #0]
   1819a:	6823      	ldr	r3, [r4, #0]
   1819c:	4003      	ands	r3, r0
   1819e:	f043 0307 	orr.w	r3, r3, #7
   181a2:	6023      	str	r3, [r4, #0]
   181a4:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   181a8:	f7fb fd24 	bl	13bf4 <rpc_ip_client_message_free>
   181ac:	2300      	movs	r3, #0
   181ae:	4648      	mov	r0, r9
   181b0:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   181b4:	b005      	add	sp, #20
   181b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181ba:	f8d8 2000 	ldr.w	r2, [r8]
   181be:	2a24      	cmp	r2, #36	; 0x24
   181c0:	d1dc      	bne.n	1817c <ip_interface_accept+0x1b8>
   181c2:	703a      	strb	r2, [r7, #0]
   181c4:	2210      	movs	r2, #16
   181c6:	607b      	str	r3, [r7, #4]
   181c8:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   181cc:	f107 0010 	add.w	r0, r7, #16
   181d0:	8b9b      	ldrh	r3, [r3, #28]
   181d2:	813b      	strh	r3, [r7, #8]
   181d4:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   181d8:	3120      	adds	r1, #32
   181da:	f005 fa4c 	bl	1d676 <memcpy>
   181de:	9902      	ldr	r1, [sp, #8]
   181e0:	e7cc      	b.n	1817c <ip_interface_accept+0x1b8>
   181e2:	703a      	strb	r2, [r7, #0]
   181e4:	607b      	str	r3, [r7, #4]
   181e6:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   181ea:	f107 000c 	add.w	r0, r7, #12
   181ee:	8b9b      	ldrh	r3, [r3, #28]
   181f0:	2204      	movs	r2, #4
   181f2:	e7ee      	b.n	181d2 <ip_interface_accept+0x20e>
   181f4:	4630      	mov	r0, r6
   181f6:	f000 fd73 	bl	18ce0 <interface_socket_from_handle_get>
   181fa:	b138      	cbz	r0, 1820c <ip_interface_accept+0x248>
   181fc:	f8d0 9004 	ldr.w	r9, [r0, #4]
   18200:	f1b9 0f00 	cmp.w	r9, #0
   18204:	d002      	beq.n	1820c <ip_interface_accept+0x248>
   18206:	f8c0 a004 	str.w	sl, [r0, #4]
   1820a:	e76e      	b.n	180ea <ip_interface_accept+0x126>
   1820c:	6823      	ldr	r3, [r4, #0]
   1820e:	9a01      	ldr	r2, [sp, #4]
   18210:	46a9      	mov	r9, r5
   18212:	4313      	orrs	r3, r2
   18214:	6023      	str	r3, [r4, #0]
   18216:	e7a1      	b.n	1815c <ip_interface_accept+0x198>
   18218:	4605      	mov	r5, r0
   1821a:	f04f 0909 	mov.w	r9, #9
   1821e:	e6f0      	b.n	18002 <ip_interface_accept+0x3e>
   18220:	f04f 090c 	mov.w	r9, #12
   18224:	e6f2      	b.n	1800c <ip_interface_accept+0x48>
   18226:	bf00      	nop
   18228:	00017469 	.word	0x00017469
   1822c:	2002095c 	.word	0x2002095c
   18230:	ffff0000 	.word	0xffff0000

00018234 <ip_interface_setopt>:
   18234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18238:	2901      	cmp	r1, #1
   1823a:	b084      	sub	sp, #16
   1823c:	f040 809c 	bne.w	18378 <ip_interface_setopt+0x144>
   18240:	460e      	mov	r6, r1
   18242:	4690      	mov	r8, r2
   18244:	461d      	mov	r5, r3
   18246:	4607      	mov	r7, r0
   18248:	f000 fd4a 	bl	18ce0 <interface_socket_from_handle_get>
   1824c:	4604      	mov	r4, r0
   1824e:	2800      	cmp	r0, #0
   18250:	f000 80a5 	beq.w	1839e <ip_interface_setopt+0x16a>
   18254:	f1b8 0f19 	cmp.w	r8, #25
   18258:	d16e      	bne.n	18338 <ip_interface_setopt+0x104>
   1825a:	2d00      	cmp	r5, #0
   1825c:	f000 8092 	beq.w	18384 <ip_interface_setopt+0x150>
   18260:	4628      	mov	r0, r5
   18262:	f005 f9cd 	bl	1d600 <strlen>
   18266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18268:	4298      	cmp	r0, r3
   1826a:	f040 808b 	bne.w	18384 <ip_interface_setopt+0x150>
   1826e:	6823      	ldr	r3, [r4, #0]
   18270:	b29b      	uxth	r3, r3
   18272:	2b02      	cmp	r3, #2
   18274:	d173      	bne.n	1835e <ip_interface_setopt+0x12a>
   18276:	4629      	mov	r1, r5
   18278:	68e0      	ldr	r0, [r4, #12]
   1827a:	f7fe fb91 	bl	169a0 <pdn_interface_pdn_id_get>
   1827e:	9002      	str	r0, [sp, #8]
   18280:	3001      	adds	r0, #1
   18282:	bf08      	it	eq
   18284:	2516      	moveq	r5, #22
   18286:	d04e      	beq.n	18326 <ip_interface_setopt+0xf2>
   18288:	6823      	ldr	r3, [r4, #0]
   1828a:	025b      	lsls	r3, r3, #9
   1828c:	d44a      	bmi.n	18324 <ip_interface_setopt+0xf0>
   1828e:	6823      	ldr	r3, [r4, #0]
   18290:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
   18294:	d146      	bne.n	18324 <ip_interface_setopt+0xf0>
   18296:	6826      	ldr	r6, [r4, #0]
   18298:	6822      	ldr	r2, [r4, #0]
   1829a:	a804      	add	r0, sp, #16
   1829c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   182a0:	6022      	str	r2, [r4, #0]
   182a2:	2104      	movs	r1, #4
   182a4:	f840 3d04 	str.w	r3, [r0, #-4]!
   182a8:	f8d4 8018 	ldr.w	r8, [r4, #24]
   182ac:	f7fb fc78 	bl	13ba0 <rpc_ip_client_request_alloc>
   182b0:	2800      	cmp	r0, #0
   182b2:	d14e      	bne.n	18352 <ip_interface_setopt+0x11e>
   182b4:	f247 0203 	movw	r2, #28675	; 0x7003
   182b8:	2300      	movs	r3, #0
   182ba:	2108      	movs	r1, #8
   182bc:	9d03      	ldr	r5, [sp, #12]
   182be:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   182c2:	60ea      	str	r2, [r5, #12]
   182c4:	f8c5 8010 	str.w	r8, [r5, #16]
   182c8:	7229      	strb	r1, [r5, #8]
   182ca:	726b      	strb	r3, [r5, #9]
   182cc:	72ab      	strb	r3, [r5, #10]
   182ce:	72eb      	strb	r3, [r5, #11]
   182d0:	f04f 0c08 	mov.w	ip, #8
   182d4:	2300      	movs	r3, #0
   182d6:	2010      	movs	r0, #16
   182d8:	2130      	movs	r1, #48	; 0x30
   182da:	68aa      	ldr	r2, [r5, #8]
   182dc:	756b      	strb	r3, [r5, #21]
   182de:	4462      	add	r2, ip
   182e0:	60aa      	str	r2, [r5, #8]
   182e2:	75ab      	strb	r3, [r5, #22]
   182e4:	75eb      	strb	r3, [r5, #23]
   182e6:	76ab      	strb	r3, [r5, #26]
   182e8:	76eb      	strb	r3, [r5, #27]
   182ea:	f885 c014 	strb.w	ip, [r5, #20]
   182ee:	7628      	strb	r0, [r5, #24]
   182f0:	7669      	strb	r1, [r5, #25]
   182f2:	2204      	movs	r2, #4
   182f4:	eb0d 010c 	add.w	r1, sp, ip
   182f8:	6828      	ldr	r0, [r5, #0]
   182fa:	f005 f9bc 	bl	1d676 <memcpy>
   182fe:	f247 0103 	movw	r1, #28675	; 0x7003
   18302:	4628      	mov	r0, r5
   18304:	f7fb fc60 	bl	13bc8 <rpc_ip_client_request_send>
   18308:	4680      	mov	r8, r0
   1830a:	bb50      	cbnz	r0, 18362 <ip_interface_setopt+0x12e>
   1830c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   18310:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18314:	4611      	mov	r1, r2
   18316:	4638      	mov	r0, r7
   18318:	f000 fc76 	bl	18c08 <interface_socket_wait>
   1831c:	4605      	mov	r5, r0
   1831e:	b398      	cbz	r0, 18388 <ip_interface_setopt+0x154>
   18320:	6026      	str	r6, [r4, #0]
   18322:	e000      	b.n	18326 <ip_interface_setopt+0xf2>
   18324:	2523      	movs	r5, #35	; 0x23
   18326:	4628      	mov	r0, r5
   18328:	f7f9 fb5c 	bl	119e4 <bsd_os_errno_set>
   1832c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18330:	4628      	mov	r0, r5
   18332:	b004      	add	sp, #16
   18334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1833a:	4642      	mov	r2, r8
   1833c:	9300      	str	r3, [sp, #0]
   1833e:	4631      	mov	r1, r6
   18340:	462b      	mov	r3, r5
   18342:	4638      	mov	r0, r7
   18344:	f000 fcf4 	bl	18d30 <interface_socket_setopt>
   18348:	4605      	mov	r5, r0
   1834a:	4628      	mov	r0, r5
   1834c:	b004      	add	sp, #16
   1834e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18352:	9d03      	ldr	r5, [sp, #12]
   18354:	2d00      	cmp	r5, #0
   18356:	d1bb      	bne.n	182d0 <ip_interface_setopt+0x9c>
   18358:	6026      	str	r6, [r4, #0]
   1835a:	250c      	movs	r5, #12
   1835c:	e7e3      	b.n	18326 <ip_interface_setopt+0xf2>
   1835e:	2509      	movs	r5, #9
   18360:	e7e1      	b.n	18326 <ip_interface_setopt+0xf2>
   18362:	6828      	ldr	r0, [r5, #0]
   18364:	b108      	cbz	r0, 1836a <ip_interface_setopt+0x136>
   18366:	f7fb fc4d 	bl	13c04 <rpc_ip_client_data_free>
   1836a:	4628      	mov	r0, r5
   1836c:	f7fb fc42 	bl	13bf4 <rpc_ip_client_message_free>
   18370:	2523      	movs	r5, #35	; 0x23
   18372:	6026      	str	r6, [r4, #0]
   18374:	6026      	str	r6, [r4, #0]
   18376:	e7d6      	b.n	18326 <ip_interface_setopt+0xf2>
   18378:	202a      	movs	r0, #42	; 0x2a
   1837a:	f7f9 fb33 	bl	119e4 <bsd_os_errno_set>
   1837e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18382:	e7d5      	b.n	18330 <ip_interface_setopt+0xfc>
   18384:	250e      	movs	r5, #14
   18386:	e7ce      	b.n	18326 <ip_interface_setopt+0xf2>
   18388:	4638      	mov	r0, r7
   1838a:	f000 fca9 	bl	18ce0 <interface_socket_from_handle_get>
   1838e:	b120      	cbz	r0, 1839a <ip_interface_setopt+0x166>
   18390:	6845      	ldr	r5, [r0, #4]
   18392:	b115      	cbz	r5, 1839a <ip_interface_setopt+0x166>
   18394:	f8c0 8004 	str.w	r8, [r0, #4]
   18398:	e7c2      	b.n	18320 <ip_interface_setopt+0xec>
   1839a:	6026      	str	r6, [r4, #0]
   1839c:	e7c8      	b.n	18330 <ip_interface_setopt+0xfc>
   1839e:	2009      	movs	r0, #9
   183a0:	f7f9 fb20 	bl	119e4 <bsd_os_errno_set>
   183a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   183a8:	e7c2      	b.n	18330 <ip_interface_setopt+0xfc>
   183aa:	bf00      	nop

000183ac <ip_interface_getopt>:
   183ac:	f000 bcf6 	b.w	18d9c <interface_socket_getopt>

000183b0 <ip_interface_getaddrinfo>:
   183b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183b4:	f04f 0c00 	mov.w	ip, #0
   183b8:	2401      	movs	r4, #1
   183ba:	4e72      	ldr	r6, [pc, #456]	; (18584 <ip_interface_getaddrinfo+0x1d4>)
   183bc:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 18590 <ip_interface_getaddrinfo+0x1e0>
   183c0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 18594 <ip_interface_getaddrinfo+0x1e4>
   183c4:	b085      	sub	sp, #20
   183c6:	4607      	mov	r7, r0
   183c8:	4615      	mov	r5, r2
   183ca:	9301      	str	r3, [sp, #4]
   183cc:	f8a6 c000 	strh.w	ip, [r6]
   183d0:	f8ca 4000 	str.w	r4, [sl]
   183d4:	f8c9 4000 	str.w	r4, [r9]
   183d8:	b171      	cbz	r1, 183f8 <ip_interface_getaddrinfo+0x48>
   183da:	4608      	mov	r0, r1
   183dc:	220a      	movs	r2, #10
   183de:	4661      	mov	r1, ip
   183e0:	f004 ffca 	bl	1d378 <strtol>
   183e4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   183e8:	1e42      	subs	r2, r0, #1
   183ea:	429a      	cmp	r2, r3
   183ec:	f200 8083 	bhi.w	184f6 <ip_interface_getaddrinfo+0x146>
   183f0:	0203      	lsls	r3, r0, #8
   183f2:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   183f6:	8030      	strh	r0, [r6, #0]
   183f8:	f8df 819c 	ldr.w	r8, [pc, #412]	; 18598 <ip_interface_getaddrinfo+0x1e8>
   183fc:	f8d8 3000 	ldr.w	r3, [r8]
   18400:	2b00      	cmp	r3, #0
   18402:	d174      	bne.n	184ee <ip_interface_getaddrinfo+0x13e>
   18404:	4a60      	ldr	r2, [pc, #384]	; (18588 <ip_interface_getaddrinfo+0x1d8>)
   18406:	6013      	str	r3, [r2, #0]
   18408:	4a60      	ldr	r2, [pc, #384]	; (1858c <ip_interface_getaddrinfo+0x1dc>)
   1840a:	6013      	str	r3, [r2, #0]
   1840c:	2f00      	cmp	r7, #0
   1840e:	d062      	beq.n	184d6 <ip_interface_getaddrinfo+0x126>
   18410:	4638      	mov	r0, r7
   18412:	f005 f8f5 	bl	1d600 <strlen>
   18416:	4683      	mov	fp, r0
   18418:	b125      	cbz	r5, 18424 <ip_interface_getaddrinfo+0x74>
   1841a:	69ea      	ldr	r2, [r5, #28]
   1841c:	b112      	cbz	r2, 18424 <ip_interface_getaddrinfo+0x74>
   1841e:	6851      	ldr	r1, [r2, #4]
   18420:	2966      	cmp	r1, #102	; 0x66
   18422:	d06c      	beq.n	184fe <ip_interface_getaddrinfo+0x14e>
   18424:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18428:	2100      	movs	r1, #0
   1842a:	ae04      	add	r6, sp, #16
   1842c:	f846 1d04 	str.w	r1, [r6, #-4]!
   18430:	4630      	mov	r0, r6
   18432:	4659      	mov	r1, fp
   18434:	9200      	str	r2, [sp, #0]
   18436:	f7fb fbb3 	bl	13ba0 <rpc_ip_client_request_alloc>
   1843a:	9a00      	ldr	r2, [sp, #0]
   1843c:	2800      	cmp	r0, #0
   1843e:	d14c      	bne.n	184da <ip_interface_getaddrinfo+0x12a>
   18440:	f247 010d 	movw	r1, #28685	; 0x700d
   18444:	f04f 0c08 	mov.w	ip, #8
   18448:	9c03      	ldr	r4, [sp, #12]
   1844a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   1844e:	60e1      	str	r1, [r4, #12]
   18450:	6122      	str	r2, [r4, #16]
   18452:	7260      	strb	r0, [r4, #9]
   18454:	72a0      	strb	r0, [r4, #10]
   18456:	72e0      	strb	r0, [r4, #11]
   18458:	f884 c008 	strb.w	ip, [r4, #8]
   1845c:	2d00      	cmp	r5, #0
   1845e:	d076      	beq.n	1854e <ip_interface_getaddrinfo+0x19e>
   18460:	686a      	ldr	r2, [r5, #4]
   18462:	f022 0108 	bic.w	r1, r2, #8
   18466:	2902      	cmp	r1, #2
   18468:	d05c      	beq.n	18524 <ip_interface_getaddrinfo+0x174>
   1846a:	2a05      	cmp	r2, #5
   1846c:	d178      	bne.n	18560 <ip_interface_getaddrinfo+0x1b0>
   1846e:	68a9      	ldr	r1, [r5, #8]
   18470:	2902      	cmp	r1, #2
   18472:	f8c9 1000 	str.w	r1, [r9]
   18476:	d061      	beq.n	1853c <ip_interface_getaddrinfo+0x18c>
   18478:	61a2      	str	r2, [r4, #24]
   1847a:	68ea      	ldr	r2, [r5, #12]
   1847c:	6222      	str	r2, [r4, #32]
   1847e:	68aa      	ldr	r2, [r5, #8]
   18480:	61e2      	str	r2, [r4, #28]
   18482:	682a      	ldr	r2, [r5, #0]
   18484:	6162      	str	r2, [r4, #20]
   18486:	68a2      	ldr	r2, [r4, #8]
   18488:	3210      	adds	r2, #16
   1848a:	60a2      	str	r2, [r4, #8]
   1848c:	b12f      	cbz	r7, 1849a <ip_interface_getaddrinfo+0xea>
   1848e:	6820      	ldr	r0, [r4, #0]
   18490:	b118      	cbz	r0, 1849a <ip_interface_getaddrinfo+0xea>
   18492:	465a      	mov	r2, fp
   18494:	4639      	mov	r1, r7
   18496:	f005 f8ee 	bl	1d676 <memcpy>
   1849a:	2301      	movs	r3, #1
   1849c:	f247 010d 	movw	r1, #28685	; 0x700d
   184a0:	4620      	mov	r0, r4
   184a2:	f8c8 3000 	str.w	r3, [r8]
   184a6:	f7fb fb8f 	bl	13bc8 <rpc_ip_client_request_send>
   184aa:	2800      	cmp	r0, #0
   184ac:	d156      	bne.n	1855c <ip_interface_getaddrinfo+0x1ac>
   184ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   184b2:	9303      	str	r3, [sp, #12]
   184b4:	4631      	mov	r1, r6
   184b6:	4620      	mov	r0, r4
   184b8:	f7f9 fa00 	bl	118bc <bsd_os_timedwait>
   184bc:	f8d8 3000 	ldr.w	r3, [r8]
   184c0:	2b01      	cmp	r3, #1
   184c2:	d0f7      	beq.n	184b4 <ip_interface_getaddrinfo+0x104>
   184c4:	4b31      	ldr	r3, [pc, #196]	; (1858c <ip_interface_getaddrinfo+0x1dc>)
   184c6:	6818      	ldr	r0, [r3, #0]
   184c8:	2800      	cmp	r0, #0
   184ca:	d13b      	bne.n	18544 <ip_interface_getaddrinfo+0x194>
   184cc:	4b2e      	ldr	r3, [pc, #184]	; (18588 <ip_interface_getaddrinfo+0x1d8>)
   184ce:	9a01      	ldr	r2, [sp, #4]
   184d0:	681b      	ldr	r3, [r3, #0]
   184d2:	6013      	str	r3, [r2, #0]
   184d4:	e00c      	b.n	184f0 <ip_interface_getaddrinfo+0x140>
   184d6:	46bb      	mov	fp, r7
   184d8:	e79e      	b.n	18418 <ip_interface_getaddrinfo+0x68>
   184da:	9c03      	ldr	r4, [sp, #12]
   184dc:	2c00      	cmp	r4, #0
   184de:	d1bd      	bne.n	1845c <ip_interface_getaddrinfo+0xac>
   184e0:	200c      	movs	r0, #12
   184e2:	2300      	movs	r3, #0
   184e4:	f8c8 3000 	str.w	r3, [r8]
   184e8:	b005      	add	sp, #20
   184ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184ee:	2073      	movs	r0, #115	; 0x73
   184f0:	b005      	add	sp, #20
   184f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184f6:	2016      	movs	r0, #22
   184f8:	b005      	add	sp, #20
   184fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184fe:	6891      	ldr	r1, [r2, #8]
   18500:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   18504:	d18e      	bne.n	18424 <ip_interface_getaddrinfo+0x74>
   18506:	f240 2102 	movw	r1, #514	; 0x202
   1850a:	68d0      	ldr	r0, [r2, #12]
   1850c:	4288      	cmp	r0, r1
   1850e:	d189      	bne.n	18424 <ip_interface_getaddrinfo+0x74>
   18510:	6991      	ldr	r1, [r2, #24]
   18512:	2900      	cmp	r1, #0
   18514:	d086      	beq.n	18424 <ip_interface_getaddrinfo+0x74>
   18516:	6868      	ldr	r0, [r5, #4]
   18518:	f7fe fa42 	bl	169a0 <pdn_interface_pdn_id_get>
   1851c:	1c43      	adds	r3, r0, #1
   1851e:	d081      	beq.n	18424 <ip_interface_getaddrinfo+0x74>
   18520:	4602      	mov	r2, r0
   18522:	e781      	b.n	18428 <ip_interface_getaddrinfo+0x78>
   18524:	68a9      	ldr	r1, [r5, #8]
   18526:	2902      	cmp	r1, #2
   18528:	f8c9 1000 	str.w	r1, [r9]
   1852c:	d006      	beq.n	1853c <ip_interface_getaddrinfo+0x18c>
   1852e:	2a05      	cmp	r2, #5
   18530:	d0a2      	beq.n	18478 <ip_interface_getaddrinfo+0xc8>
   18532:	2a0a      	cmp	r2, #10
   18534:	bf14      	ite	ne
   18536:	2201      	movne	r2, #1
   18538:	2202      	moveq	r2, #2
   1853a:	e79d      	b.n	18478 <ip_interface_getaddrinfo+0xc8>
   1853c:	2102      	movs	r1, #2
   1853e:	f8ca 1000 	str.w	r1, [sl]
   18542:	e7f4      	b.n	1852e <ip_interface_getaddrinfo+0x17e>
   18544:	4b11      	ldr	r3, [pc, #68]	; (1858c <ip_interface_getaddrinfo+0x1dc>)
   18546:	6818      	ldr	r0, [r3, #0]
   18548:	2800      	cmp	r0, #0
   1854a:	d0d1      	beq.n	184f0 <ip_interface_getaddrinfo+0x140>
   1854c:	e7c9      	b.n	184e2 <ip_interface_getaddrinfo+0x132>
   1854e:	4629      	mov	r1, r5
   18550:	2210      	movs	r2, #16
   18552:	f104 0014 	add.w	r0, r4, #20
   18556:	f005 f8b8 	bl	1d6ca <memset>
   1855a:	e794      	b.n	18486 <ip_interface_getaddrinfo+0xd6>
   1855c:	2023      	movs	r0, #35	; 0x23
   1855e:	e7c0      	b.n	184e2 <ip_interface_getaddrinfo+0x132>
   18560:	202f      	movs	r0, #47	; 0x2f
   18562:	f7f9 fa3f 	bl	119e4 <bsd_os_errno_set>
   18566:	68a2      	ldr	r2, [r4, #8]
   18568:	3210      	adds	r2, #16
   1856a:	60a2      	str	r2, [r4, #8]
   1856c:	b917      	cbnz	r7, 18574 <ip_interface_getaddrinfo+0x1c4>
   1856e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18572:	e7b6      	b.n	184e2 <ip_interface_getaddrinfo+0x132>
   18574:	6820      	ldr	r0, [r4, #0]
   18576:	2800      	cmp	r0, #0
   18578:	d0f9      	beq.n	1856e <ip_interface_getaddrinfo+0x1be>
   1857a:	465a      	mov	r2, fp
   1857c:	4639      	mov	r1, r7
   1857e:	f005 f87a 	bl	1d676 <memcpy>
   18582:	e7f4      	b.n	1856e <ip_interface_getaddrinfo+0x1be>
   18584:	20024e4a 	.word	0x20024e4a
   18588:	20020954 	.word	0x20020954
   1858c:	2002094c 	.word	0x2002094c
   18590:	20020944 	.word	0x20020944
   18594:	20020948 	.word	0x20020948
   18598:	20020950 	.word	0x20020950

0001859c <ip_interface_freeaddrinfo>:
   1859c:	b538      	push	{r3, r4, r5, lr}
   1859e:	4c0b      	ldr	r4, [pc, #44]	; (185cc <ip_interface_freeaddrinfo+0x30>)
   185a0:	6823      	ldr	r3, [r4, #0]
   185a2:	2b02      	cmp	r3, #2
   185a4:	d000      	beq.n	185a8 <ip_interface_freeaddrinfo+0xc>
   185a6:	bd38      	pop	{r3, r4, r5, pc}
   185a8:	b130      	cbz	r0, 185b8 <ip_interface_freeaddrinfo+0x1c>
   185aa:	4605      	mov	r5, r0
   185ac:	6940      	ldr	r0, [r0, #20]
   185ae:	f7fb fac9 	bl	13b44 <nrf_free>
   185b2:	4628      	mov	r0, r5
   185b4:	f7fb fac6 	bl	13b44 <nrf_free>
   185b8:	2300      	movs	r3, #0
   185ba:	4a05      	ldr	r2, [pc, #20]	; (185d0 <ip_interface_freeaddrinfo+0x34>)
   185bc:	4905      	ldr	r1, [pc, #20]	; (185d4 <ip_interface_freeaddrinfo+0x38>)
   185be:	6023      	str	r3, [r4, #0]
   185c0:	6013      	str	r3, [r2, #0]
   185c2:	6808      	ldr	r0, [r1, #0]
   185c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   185c8:	f7fb bb1c 	b.w	13c04 <rpc_ip_client_data_free>
   185cc:	20020950 	.word	0x20020950
   185d0:	2002094c 	.word	0x2002094c
   185d4:	20020958 	.word	0x20020958

000185d8 <rpc_ip_event_handler>:
   185d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185dc:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   185e0:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   185e4:	4605      	mov	r5, r0
   185e6:	b089      	sub	sp, #36	; 0x24
   185e8:	460e      	mov	r6, r1
   185ea:	68c0      	ldr	r0, [r0, #12]
   185ec:	d05e      	beq.n	186ac <rpc_ip_event_handler+0xd4>
   185ee:	0c04      	lsrs	r4, r0, #16
   185f0:	4620      	mov	r0, r4
   185f2:	f000 fb75 	bl	18ce0 <interface_socket_from_handle_get>
   185f6:	f248 030d 	movw	r3, #32781	; 0x800d
   185fa:	429e      	cmp	r6, r3
   185fc:	4607      	mov	r7, r0
   185fe:	46a0      	mov	r8, r4
   18600:	d041      	beq.n	18686 <rpc_ip_event_handler+0xae>
   18602:	2f00      	cmp	r7, #0
   18604:	d04e      	beq.n	186a4 <rpc_ip_event_handler+0xcc>
   18606:	4640      	mov	r0, r8
   18608:	4633      	mov	r3, r6
   1860a:	462a      	mov	r2, r5
   1860c:	4639      	mov	r1, r7
   1860e:	f7fb fead 	bl	1436c <tls_rpc_ip_event_handler>
   18612:	2800      	cmp	r0, #0
   18614:	d042      	beq.n	1869c <rpc_ip_event_handler+0xc4>
   18616:	f248 0307 	movw	r3, #32775	; 0x8007
   1861a:	429e      	cmp	r6, r3
   1861c:	d961      	bls.n	186e2 <rpc_ip_event_handler+0x10a>
   1861e:	f248 030c 	movw	r3, #32780	; 0x800c
   18622:	429e      	cmp	r6, r3
   18624:	f000 816b 	beq.w	188fe <rpc_ip_event_handler+0x326>
   18628:	f240 8106 	bls.w	18838 <rpc_ip_event_handler+0x260>
   1862c:	f249 0302 	movw	r3, #36866	; 0x9002
   18630:	429e      	cmp	r6, r3
   18632:	f000 808c 	beq.w	1874e <rpc_ip_event_handler+0x176>
   18636:	f249 0303 	movw	r3, #36867	; 0x9003
   1863a:	429e      	cmp	r6, r3
   1863c:	f000 8180 	beq.w	18940 <rpc_ip_event_handler+0x368>
   18640:	f249 0301 	movw	r3, #36865	; 0x9001
   18644:	429e      	cmp	r6, r3
   18646:	d12d      	bne.n	186a4 <rpc_ip_event_handler+0xcc>
   18648:	683c      	ldr	r4, [r7, #0]
   1864a:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   1864e:	f000 81c3 	beq.w	189d8 <rpc_ip_event_handler+0x400>
   18652:	68ab      	ldr	r3, [r5, #8]
   18654:	2b04      	cmp	r3, #4
   18656:	f200 81eb 	bhi.w	18a30 <rpc_ip_event_handler+0x458>
   1865a:	2400      	movs	r4, #0
   1865c:	4626      	mov	r6, r4
   1865e:	6829      	ldr	r1, [r5, #0]
   18660:	686a      	ldr	r2, [r5, #4]
   18662:	e9cd 6406 	strd	r6, r4, [sp, #24]
   18666:	e9cd 1204 	strd	r1, r2, [sp, #16]
   1866a:	69f8      	ldr	r0, [r7, #28]
   1866c:	a904      	add	r1, sp, #16
   1866e:	6803      	ldr	r3, [r0, #0]
   18670:	685b      	ldr	r3, [r3, #4]
   18672:	4798      	blx	r3
   18674:	3001      	adds	r0, #1
   18676:	f000 81cc 	beq.w	18a12 <rpc_ip_event_handler+0x43a>
   1867a:	683b      	ldr	r3, [r7, #0]
   1867c:	2000      	movs	r0, #0
   1867e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   18682:	603b      	str	r3, [r7, #0]
   18684:	e00b      	b.n	1869e <rpc_ip_event_handler+0xc6>
   18686:	f8df 9344 	ldr.w	r9, [pc, #836]	; 189cc <rpc_ip_event_handler+0x3f4>
   1868a:	682f      	ldr	r7, [r5, #0]
   1868c:	f8d9 3000 	ldr.w	r3, [r9]
   18690:	2b01      	cmp	r3, #1
   18692:	d015      	beq.n	186c0 <rpc_ip_event_handler+0xe8>
   18694:	b117      	cbz	r7, 1869c <rpc_ip_event_handler+0xc4>
   18696:	4638      	mov	r0, r7
   18698:	f7fb fab4 	bl	13c04 <rpc_ip_client_data_free>
   1869c:	2000      	movs	r0, #0
   1869e:	b009      	add	sp, #36	; 0x24
   186a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186a4:	6828      	ldr	r0, [r5, #0]
   186a6:	2800      	cmp	r0, #0
   186a8:	d1f6      	bne.n	18698 <rpc_ip_event_handler+0xc0>
   186aa:	e7f7      	b.n	1869c <rpc_ip_event_handler+0xc4>
   186ac:	f000 face 	bl	18c4c <interface_from_internal_id_search>
   186b0:	4680      	mov	r8, r0
   186b2:	f000 fb15 	bl	18ce0 <interface_socket_from_handle_get>
   186b6:	4607      	mov	r7, r0
   186b8:	4644      	mov	r4, r8
   186ba:	2f00      	cmp	r7, #0
   186bc:	d1a3      	bne.n	18606 <rpc_ip_event_handler+0x2e>
   186be:	e7f1      	b.n	186a4 <rpc_ip_event_handler+0xcc>
   186c0:	696b      	ldr	r3, [r5, #20]
   186c2:	2b00      	cmp	r3, #0
   186c4:	d048      	beq.n	18758 <rpc_ip_event_handler+0x180>
   186c6:	2b10      	cmp	r3, #16
   186c8:	bf96      	itet	ls
   186ca:	4aba      	ldrls	r2, [pc, #744]	; (189b4 <rpc_ip_event_handler+0x3dc>)
   186cc:	212d      	movhi	r1, #45	; 0x2d
   186ce:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
   186d2:	2302      	movs	r3, #2
   186d4:	4ab8      	ldr	r2, [pc, #736]	; (189b8 <rpc_ip_event_handler+0x3e0>)
   186d6:	6011      	str	r1, [r2, #0]
   186d8:	f8c9 3000 	str.w	r3, [r9]
   186dc:	2f00      	cmp	r7, #0
   186de:	d1da      	bne.n	18696 <rpc_ip_event_handler+0xbe>
   186e0:	e7dc      	b.n	1869c <rpc_ip_event_handler+0xc4>
   186e2:	f248 0306 	movw	r3, #32774	; 0x8006
   186e6:	429e      	cmp	r6, r3
   186e8:	f080 80e6 	bcs.w	188b8 <rpc_ip_event_handler+0x2e0>
   186ec:	f248 0302 	movw	r3, #32770	; 0x8002
   186f0:	429e      	cmp	r6, r3
   186f2:	f000 80c8 	beq.w	18886 <rpc_ip_event_handler+0x2ae>
   186f6:	d918      	bls.n	1872a <rpc_ip_event_handler+0x152>
   186f8:	f248 0303 	movw	r3, #32771	; 0x8003
   186fc:	429e      	cmp	r6, r3
   186fe:	f000 8112 	beq.w	18926 <rpc_ip_event_handler+0x34e>
   18702:	f248 0305 	movw	r3, #32773	; 0x8005
   18706:	429e      	cmp	r6, r3
   18708:	d1cc      	bne.n	186a4 <rpc_ip_event_handler+0xcc>
   1870a:	683b      	ldr	r3, [r7, #0]
   1870c:	b29b      	uxth	r3, r3
   1870e:	2b03      	cmp	r3, #3
   18710:	d1c4      	bne.n	1869c <rpc_ip_event_handler+0xc4>
   18712:	696b      	ldr	r3, [r5, #20]
   18714:	2b00      	cmp	r3, #0
   18716:	f000 817e 	beq.w	18a16 <rpc_ip_event_handler+0x43e>
   1871a:	2b10      	cmp	r3, #16
   1871c:	f200 813b 	bhi.w	18996 <rpc_ip_event_handler+0x3be>
   18720:	4aa4      	ldr	r2, [pc, #656]	; (189b4 <rpc_ip_event_handler+0x3dc>)
   18722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18726:	607b      	str	r3, [r7, #4]
   18728:	e7b8      	b.n	1869c <rpc_ip_event_handler+0xc4>
   1872a:	f248 0301 	movw	r3, #32769	; 0x8001
   1872e:	429e      	cmp	r6, r3
   18730:	d1b8      	bne.n	186a4 <rpc_ip_event_handler+0xcc>
   18732:	683b      	ldr	r3, [r7, #0]
   18734:	2b01      	cmp	r3, #1
   18736:	d1b1      	bne.n	1869c <rpc_ip_event_handler+0xc4>
   18738:	6968      	ldr	r0, [r5, #20]
   1873a:	2800      	cmp	r0, #0
   1873c:	f000 8173 	beq.w	18a26 <rpc_ip_event_handler+0x44e>
   18740:	2810      	cmp	r0, #16
   18742:	f200 8128 	bhi.w	18996 <rpc_ip_event_handler+0x3be>
   18746:	4b9b      	ldr	r3, [pc, #620]	; (189b4 <rpc_ip_event_handler+0x3dc>)
   18748:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1874c:	e7eb      	b.n	18726 <rpc_ip_event_handler+0x14e>
   1874e:	683b      	ldr	r3, [r7, #0]
   18750:	b29b      	uxth	r3, r3
   18752:	2b07      	cmp	r3, #7
   18754:	d1a2      	bne.n	1869c <rpc_ip_event_handler+0xc4>
   18756:	e790      	b.n	1867a <rpc_ip_event_handler+0xa2>
   18758:	4b98      	ldr	r3, [pc, #608]	; (189bc <rpc_ip_event_handler+0x3e4>)
   1875a:	601f      	str	r7, [r3, #0]
   1875c:	69ac      	ldr	r4, [r5, #24]
   1875e:	0163      	lsls	r3, r4, #5
   18760:	4618      	mov	r0, r3
   18762:	9303      	str	r3, [sp, #12]
   18764:	f7fb f9e4 	bl	13b30 <nrf_malloc>
   18768:	9002      	str	r0, [sp, #8]
   1876a:	2800      	cmp	r0, #0
   1876c:	f000 8103 	beq.w	18976 <rpc_ip_event_handler+0x39e>
   18770:	00e5      	lsls	r5, r4, #3
   18772:	1928      	adds	r0, r5, r4
   18774:	0080      	lsls	r0, r0, #2
   18776:	f7fb f9db 	bl	13b30 <nrf_malloc>
   1877a:	2800      	cmp	r0, #0
   1877c:	f000 810d 	beq.w	1899a <rpc_ip_event_handler+0x3c2>
   18780:	2c00      	cmp	r4, #0
   18782:	d078      	beq.n	18876 <rpc_ip_event_handler+0x29e>
   18784:	f105 0210 	add.w	r2, r5, #16
   18788:	1883      	adds	r3, r0, r2
   1878a:	9301      	str	r3, [sp, #4]
   1878c:	9b02      	ldr	r3, [sp, #8]
   1878e:	2404      	movs	r4, #4
   18790:	f8df a23c 	ldr.w	sl, [pc, #572]	; 189d0 <rpc_ip_event_handler+0x3f8>
   18794:	f8df b23c 	ldr.w	fp, [pc, #572]	; 189d4 <rpc_ip_event_handler+0x3fc>
   18798:	f100 0810 	add.w	r8, r0, #16
   1879c:	f103 0620 	add.w	r6, r3, #32
   187a0:	e01d      	b.n	187de <rpc_ip_event_handler+0x206>
   187a2:	220a      	movs	r2, #10
   187a4:	f848 2c0c 	str.w	r2, [r8, #-12]
   187a8:	f04f 0224 	mov.w	r2, #36	; 0x24
   187ac:	4640      	mov	r0, r8
   187ae:	f808 2c10 	strb.w	r2, [r8, #-16]
   187b2:	f828 3c08 	strh.w	r3, [r8, #-8]
   187b6:	f856 2c10 	ldr.w	r2, [r6, #-16]
   187ba:	f004 ff5c 	bl	1d676 <memcpy>
   187be:	f856 3c10 	ldr.w	r3, [r6, #-16]
   187c2:	f108 0808 	add.w	r8, r8, #8
   187c6:	441c      	add	r4, r3
   187c8:	193b      	adds	r3, r7, r4
   187ca:	f846 3c08 	str.w	r3, [r6, #-8]
   187ce:	9b01      	ldr	r3, [sp, #4]
   187d0:	f846 6c04 	str.w	r6, [r6, #-4]
   187d4:	4598      	cmp	r8, r3
   187d6:	442c      	add	r4, r5
   187d8:	f106 0620 	add.w	r6, r6, #32
   187dc:	d045      	beq.n	1886a <rpc_ip_event_handler+0x292>
   187de:	593b      	ldr	r3, [r7, r4]
   187e0:	193a      	adds	r2, r7, r4
   187e2:	f846 3c20 	str.w	r3, [r6, #-32]
   187e6:	6853      	ldr	r3, [r2, #4]
   187e8:	f8da 1000 	ldr.w	r1, [sl]
   187ec:	2b02      	cmp	r3, #2
   187ee:	bf14      	ite	ne
   187f0:	2002      	movne	r0, #2
   187f2:	200a      	moveq	r0, #10
   187f4:	f8db 3000 	ldr.w	r3, [fp]
   187f8:	e946 0107 	strd	r0, r1, [r6, #-28]
   187fc:	f846 3c14 	str.w	r3, [r6, #-20]
   18800:	8a10      	ldrh	r0, [r2, #16]
   18802:	f1a8 0310 	sub.w	r3, r8, #16
   18806:	f846 0c10 	str.w	r0, [r6, #-16]
   1880a:	8a55      	ldrh	r5, [r2, #18]
   1880c:	f846 3c0c 	str.w	r3, [r6, #-12]
   18810:	4b6b      	ldr	r3, [pc, #428]	; (189c0 <rpc_ip_event_handler+0x3e8>)
   18812:	3414      	adds	r4, #20
   18814:	2804      	cmp	r0, #4
   18816:	eb07 0104 	add.w	r1, r7, r4
   1881a:	881b      	ldrh	r3, [r3, #0]
   1881c:	d1c1      	bne.n	187a2 <rpc_ip_event_handler+0x1ca>
   1881e:	2210      	movs	r2, #16
   18820:	2002      	movs	r0, #2
   18822:	f828 3c08 	strh.w	r3, [r8, #-8]
   18826:	f848 0c0c 	str.w	r0, [r8, #-12]
   1882a:	f808 2c10 	strb.w	r2, [r8, #-16]
   1882e:	f856 2c10 	ldr.w	r2, [r6, #-16]
   18832:	f1a8 0004 	sub.w	r0, r8, #4
   18836:	e7c0      	b.n	187ba <rpc_ip_event_handler+0x1e2>
   18838:	f248 0308 	movw	r3, #32776	; 0x8008
   1883c:	429e      	cmp	r6, r3
   1883e:	d04e      	beq.n	188de <rpc_ip_event_handler+0x306>
   18840:	f248 0309 	movw	r3, #32777	; 0x8009
   18844:	429e      	cmp	r6, r3
   18846:	f47f af2d 	bne.w	186a4 <rpc_ip_event_handler+0xcc>
   1884a:	683b      	ldr	r3, [r7, #0]
   1884c:	b29b      	uxth	r3, r3
   1884e:	2b0d      	cmp	r3, #13
   18850:	f47f af24 	bne.w	1869c <rpc_ip_event_handler+0xc4>
   18854:	6968      	ldr	r0, [r5, #20]
   18856:	2800      	cmp	r0, #0
   18858:	f47f af72 	bne.w	18740 <rpc_ip_event_handler+0x168>
   1885c:	683b      	ldr	r3, [r7, #0]
   1885e:	0c1b      	lsrs	r3, r3, #16
   18860:	041b      	lsls	r3, r3, #16
   18862:	f043 030e 	orr.w	r3, r3, #14
   18866:	603b      	str	r3, [r7, #0]
   18868:	e719      	b.n	1869e <rpc_ip_event_handler+0xc6>
   1886a:	2200      	movs	r2, #0
   1886c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   18870:	440b      	add	r3, r1
   18872:	f843 2c04 	str.w	r2, [r3, #-4]
   18876:	2202      	movs	r2, #2
   18878:	4b52      	ldr	r3, [pc, #328]	; (189c4 <rpc_ip_event_handler+0x3ec>)
   1887a:	f8c9 2000 	str.w	r2, [r9]
   1887e:	9a02      	ldr	r2, [sp, #8]
   18880:	2000      	movs	r0, #0
   18882:	601a      	str	r2, [r3, #0]
   18884:	e70b      	b.n	1869e <rpc_ip_event_handler+0xc6>
   18886:	683b      	ldr	r3, [r7, #0]
   18888:	0099      	lsls	r1, r3, #2
   1888a:	f57f af07 	bpl.w	1869c <rpc_ip_event_handler+0xc4>
   1888e:	683b      	ldr	r3, [r7, #0]
   18890:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   18894:	603b      	str	r3, [r7, #0]
   18896:	6968      	ldr	r0, [r5, #20]
   18898:	2800      	cmp	r0, #0
   1889a:	f000 80a2 	beq.w	189e2 <rpc_ip_event_handler+0x40a>
   1889e:	2810      	cmp	r0, #16
   188a0:	bf8e      	itee	hi
   188a2:	232d      	movhi	r3, #45	; 0x2d
   188a4:	4b43      	ldrls	r3, [pc, #268]	; (189b4 <rpc_ip_event_handler+0x3dc>)
   188a6:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   188aa:	2000      	movs	r0, #0
   188ac:	607b      	str	r3, [r7, #4]
   188ae:	683b      	ldr	r3, [r7, #0]
   188b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   188b4:	603b      	str	r3, [r7, #0]
   188b6:	e6f2      	b.n	1869e <rpc_ip_event_handler+0xc6>
   188b8:	683b      	ldr	r3, [r7, #0]
   188ba:	029a      	lsls	r2, r3, #10
   188bc:	f57f aeee 	bpl.w	1869c <rpc_ip_event_handler+0xc4>
   188c0:	696b      	ldr	r3, [r5, #20]
   188c2:	2b00      	cmp	r3, #0
   188c4:	f000 809c 	beq.w	18a00 <rpc_ip_event_handler+0x428>
   188c8:	2b6b      	cmp	r3, #107	; 0x6b
   188ca:	f47f af26 	bne.w	1871a <rpc_ip_event_handler+0x142>
   188ce:	693b      	ldr	r3, [r7, #16]
   188d0:	2b01      	cmp	r3, #1
   188d2:	f000 80b1 	beq.w	18a38 <rpc_ip_event_handler+0x460>
   188d6:	230c      	movs	r3, #12
   188d8:	2000      	movs	r0, #0
   188da:	607b      	str	r3, [r7, #4]
   188dc:	e6df      	b.n	1869e <rpc_ip_event_handler+0xc6>
   188de:	683b      	ldr	r3, [r7, #0]
   188e0:	b29b      	uxth	r3, r3
   188e2:	2b06      	cmp	r3, #6
   188e4:	f47f aeda 	bne.w	1869c <rpc_ip_event_handler+0xc4>
   188e8:	6968      	ldr	r0, [r5, #20]
   188ea:	2800      	cmp	r0, #0
   188ec:	f47f af28 	bne.w	18740 <rpc_ip_event_handler+0x168>
   188f0:	683b      	ldr	r3, [r7, #0]
   188f2:	0c1b      	lsrs	r3, r3, #16
   188f4:	041b      	lsls	r3, r3, #16
   188f6:	f043 0307 	orr.w	r3, r3, #7
   188fa:	603b      	str	r3, [r7, #0]
   188fc:	e6cf      	b.n	1869e <rpc_ip_event_handler+0xc6>
   188fe:	683b      	ldr	r3, [r7, #0]
   18900:	b29b      	uxth	r3, r3
   18902:	2b08      	cmp	r3, #8
   18904:	f47f aeca 	bne.w	1869c <rpc_ip_event_handler+0xc4>
   18908:	696b      	ldr	r3, [r5, #20]
   1890a:	2b00      	cmp	r3, #0
   1890c:	f47f af05 	bne.w	1871a <rpc_ip_event_handler+0x142>
   18910:	4b2d      	ldr	r3, [pc, #180]	; (189c8 <rpc_ip_event_handler+0x3f0>)
   18912:	2001      	movs	r0, #1
   18914:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
   18918:	683b      	ldr	r3, [r7, #0]
   1891a:	0c1b      	lsrs	r3, r3, #16
   1891c:	041b      	lsls	r3, r3, #16
   1891e:	f043 0309 	orr.w	r3, r3, #9
   18922:	603b      	str	r3, [r7, #0]
   18924:	e6bb      	b.n	1869e <rpc_ip_event_handler+0xc6>
   18926:	683b      	ldr	r3, [r7, #0]
   18928:	025b      	lsls	r3, r3, #9
   1892a:	f57f aeb7 	bpl.w	1869c <rpc_ip_event_handler+0xc4>
   1892e:	6968      	ldr	r0, [r5, #20]
   18930:	2800      	cmp	r0, #0
   18932:	f47f af05 	bne.w	18740 <rpc_ip_event_handler+0x168>
   18936:	683b      	ldr	r3, [r7, #0]
   18938:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1893c:	603b      	str	r3, [r7, #0]
   1893e:	e6ae      	b.n	1869e <rpc_ip_event_handler+0xc6>
   18940:	683b      	ldr	r3, [r7, #0]
   18942:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   18946:	603b      	str	r3, [r7, #0]
   18948:	683b      	ldr	r3, [r7, #0]
   1894a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1894e:	603b      	str	r3, [r7, #0]
   18950:	683b      	ldr	r3, [r7, #0]
   18952:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   18956:	603b      	str	r3, [r7, #0]
   18958:	692b      	ldr	r3, [r5, #16]
   1895a:	2b6c      	cmp	r3, #108	; 0x6c
   1895c:	d021      	beq.n	189a2 <rpc_ip_event_handler+0x3ca>
   1895e:	2b10      	cmp	r3, #16
   18960:	bf8c      	ite	hi
   18962:	232d      	movhi	r3, #45	; 0x2d
   18964:	4a13      	ldrls	r2, [pc, #76]	; (189b4 <rpc_ip_event_handler+0x3dc>)
   18966:	f04f 0000 	mov.w	r0, #0
   1896a:	bf98      	it	ls
   1896c:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   18970:	607b      	str	r3, [r7, #4]
   18972:	60bb      	str	r3, [r7, #8]
   18974:	e693      	b.n	1869e <rpc_ip_event_handler+0xc6>
   18976:	f7fb f8e5 	bl	13b44 <nrf_free>
   1897a:	200c      	movs	r0, #12
   1897c:	2302      	movs	r3, #2
   1897e:	490e      	ldr	r1, [pc, #56]	; (189b8 <rpc_ip_event_handler+0x3e0>)
   18980:	4a10      	ldr	r2, [pc, #64]	; (189c4 <rpc_ip_event_handler+0x3ec>)
   18982:	6008      	str	r0, [r1, #0]
   18984:	682f      	ldr	r7, [r5, #0]
   18986:	9902      	ldr	r1, [sp, #8]
   18988:	6011      	str	r1, [r2, #0]
   1898a:	f8c9 3000 	str.w	r3, [r9]
   1898e:	2f00      	cmp	r7, #0
   18990:	f47f ae81 	bne.w	18696 <rpc_ip_event_handler+0xbe>
   18994:	e682      	b.n	1869c <rpc_ip_event_handler+0xc4>
   18996:	232d      	movs	r3, #45	; 0x2d
   18998:	e6c5      	b.n	18726 <rpc_ip_event_handler+0x14e>
   1899a:	220c      	movs	r2, #12
   1899c:	4b06      	ldr	r3, [pc, #24]	; (189b8 <rpc_ip_event_handler+0x3e0>)
   1899e:	601a      	str	r2, [r3, #0]
   189a0:	e769      	b.n	18876 <rpc_ip_event_handler+0x29e>
   189a2:	2239      	movs	r2, #57	; 0x39
   189a4:	683b      	ldr	r3, [r7, #0]
   189a6:	2000      	movs	r0, #0
   189a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   189ac:	603b      	str	r3, [r7, #0]
   189ae:	607a      	str	r2, [r7, #4]
   189b0:	60ba      	str	r2, [r7, #8]
   189b2:	e674      	b.n	1869e <rpc_ip_event_handler+0xc6>
   189b4:	0001f894 	.word	0x0001f894
   189b8:	2002094c 	.word	0x2002094c
   189bc:	20020958 	.word	0x20020958
   189c0:	20024e4a 	.word	0x20024e4a
   189c4:	20020954 	.word	0x20020954
   189c8:	2002095c 	.word	0x2002095c
   189cc:	20020950 	.word	0x20020950
   189d0:	20020948 	.word	0x20020948
   189d4:	20020944 	.word	0x20020944
   189d8:	6828      	ldr	r0, [r5, #0]
   189da:	f7fb f913 	bl	13c04 <rpc_ip_client_data_free>
   189de:	4620      	mov	r0, r4
   189e0:	e65d      	b.n	1869e <rpc_ip_event_handler+0xc6>
   189e2:	683b      	ldr	r3, [r7, #0]
   189e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   189e8:	603b      	str	r3, [r7, #0]
   189ea:	683b      	ldr	r3, [r7, #0]
   189ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   189f0:	603b      	str	r3, [r7, #0]
   189f2:	683b      	ldr	r3, [r7, #0]
   189f4:	0c1b      	lsrs	r3, r3, #16
   189f6:	041b      	lsls	r3, r3, #16
   189f8:	f043 0305 	orr.w	r3, r3, #5
   189fc:	603b      	str	r3, [r7, #0]
   189fe:	e64e      	b.n	1869e <rpc_ip_event_handler+0xc6>
   18a00:	683b      	ldr	r3, [r7, #0]
   18a02:	4a28      	ldr	r2, [pc, #160]	; (18aa4 <rpc_ip_event_handler+0x4cc>)
   18a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   18a08:	603b      	str	r3, [r7, #0]
   18a0a:	2001      	movs	r0, #1
   18a0c:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   18a10:	e645      	b.n	1869e <rpc_ip_event_handler+0xc6>
   18a12:	2002      	movs	r0, #2
   18a14:	e643      	b.n	1869e <rpc_ip_event_handler+0xc6>
   18a16:	683b      	ldr	r3, [r7, #0]
   18a18:	2000      	movs	r0, #0
   18a1a:	0c1b      	lsrs	r3, r3, #16
   18a1c:	041b      	lsls	r3, r3, #16
   18a1e:	f043 0304 	orr.w	r3, r3, #4
   18a22:	603b      	str	r3, [r7, #0]
   18a24:	e63b      	b.n	1869e <rpc_ip_event_handler+0xc6>
   18a26:	2302      	movs	r3, #2
   18a28:	603b      	str	r3, [r7, #0]
   18a2a:	69ab      	ldr	r3, [r5, #24]
   18a2c:	61bb      	str	r3, [r7, #24]
   18a2e:	e636      	b.n	1869e <rpc_ip_event_handler+0xc6>
   18a30:	8a6c      	ldrh	r4, [r5, #18]
   18a32:	b94c      	cbnz	r4, 18a48 <rpc_ip_event_handler+0x470>
   18a34:	4626      	mov	r6, r4
   18a36:	e612      	b.n	1865e <rpc_ip_event_handler+0x86>
   18a38:	220c      	movs	r2, #12
   18a3a:	683b      	ldr	r3, [r7, #0]
   18a3c:	2000      	movs	r0, #0
   18a3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   18a42:	603b      	str	r3, [r7, #0]
   18a44:	607a      	str	r2, [r7, #4]
   18a46:	e62a      	b.n	1869e <rpc_ip_event_handler+0xc6>
   18a48:	2024      	movs	r0, #36	; 0x24
   18a4a:	f7fb f871 	bl	13b30 <nrf_malloc>
   18a4e:	4606      	mov	r6, r0
   18a50:	b158      	cbz	r0, 18a6a <rpc_ip_event_handler+0x492>
   18a52:	8a6a      	ldrh	r2, [r5, #18]
   18a54:	2a10      	cmp	r2, #16
   18a56:	d018      	beq.n	18a8a <rpc_ip_event_handler+0x4b2>
   18a58:	2a04      	cmp	r2, #4
   18a5a:	d00a      	beq.n	18a72 <rpc_ip_event_handler+0x49a>
   18a5c:	6828      	ldr	r0, [r5, #0]
   18a5e:	f7fb f8d1 	bl	13c04 <rpc_ip_client_data_free>
   18a62:	4630      	mov	r0, r6
   18a64:	f7fb f86e 	bl	13b44 <nrf_free>
   18a68:	e618      	b.n	1869c <rpc_ip_event_handler+0xc4>
   18a6a:	6828      	ldr	r0, [r5, #0]
   18a6c:	f7fb f8ca 	bl	13c04 <rpc_ip_client_data_free>
   18a70:	e614      	b.n	1869c <rpc_ip_event_handler+0xc4>
   18a72:	2302      	movs	r3, #2
   18a74:	2410      	movs	r4, #16
   18a76:	6043      	str	r3, [r0, #4]
   18a78:	7004      	strb	r4, [r0, #0]
   18a7a:	8a2b      	ldrh	r3, [r5, #16]
   18a7c:	f105 0114 	add.w	r1, r5, #20
   18a80:	8103      	strh	r3, [r0, #8]
   18a82:	300c      	adds	r0, #12
   18a84:	f004 fdf7 	bl	1d676 <memcpy>
   18a88:	e5e9      	b.n	1865e <rpc_ip_event_handler+0x86>
   18a8a:	230a      	movs	r3, #10
   18a8c:	2424      	movs	r4, #36	; 0x24
   18a8e:	6043      	str	r3, [r0, #4]
   18a90:	7004      	strb	r4, [r0, #0]
   18a92:	8a2b      	ldrh	r3, [r5, #16]
   18a94:	f105 0114 	add.w	r1, r5, #20
   18a98:	8103      	strh	r3, [r0, #8]
   18a9a:	3010      	adds	r0, #16
   18a9c:	f004 fdeb 	bl	1d676 <memcpy>
   18aa0:	e5dd      	b.n	1865e <rpc_ip_event_handler+0x86>
   18aa2:	bf00      	nop
   18aa4:	2002095c 	.word	0x2002095c

00018aa8 <interface_init>:
   18aa8:	b508      	push	{r3, lr}
   18aaa:	f44f 7290 	mov.w	r2, #288	; 0x120
   18aae:	2100      	movs	r1, #0
   18ab0:	4802      	ldr	r0, [pc, #8]	; (18abc <interface_init+0x14>)
   18ab2:	f004 fe0a 	bl	1d6ca <memset>
   18ab6:	2000      	movs	r0, #0
   18ab8:	bd08      	pop	{r3, pc}
   18aba:	bf00      	nop
   18abc:	20026594 	.word	0x20026594

00018ac0 <interface_socket_allocate>:
   18ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18ac2:	4b29      	ldr	r3, [pc, #164]	; (18b68 <interface_socket_allocate+0xa8>)
   18ac4:	4606      	mov	r6, r0
   18ac6:	681d      	ldr	r5, [r3, #0]
   18ac8:	4608      	mov	r0, r1
   18aca:	b1e5      	cbz	r5, 18b06 <interface_socket_allocate+0x46>
   18acc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   18ace:	2c00      	cmp	r4, #0
   18ad0:	d03d      	beq.n	18b4e <interface_socket_allocate+0x8e>
   18ad2:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   18ad4:	2c00      	cmp	r4, #0
   18ad6:	d03c      	beq.n	18b52 <interface_socket_allocate+0x92>
   18ad8:	6edc      	ldr	r4, [r3, #108]	; 0x6c
   18ada:	2c00      	cmp	r4, #0
   18adc:	d03b      	beq.n	18b56 <interface_socket_allocate+0x96>
   18ade:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   18ae2:	b179      	cbz	r1, 18b04 <interface_socket_allocate+0x44>
   18ae4:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
   18ae8:	b3b9      	cbz	r1, 18b5a <interface_socket_allocate+0x9a>
   18aea:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
   18aee:	b3b1      	cbz	r1, 18b5e <interface_socket_allocate+0x9e>
   18af0:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
   18af4:	b3a9      	cbz	r1, 18b62 <interface_socket_allocate+0xa2>
   18af6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18afa:	200c      	movs	r0, #12
   18afc:	f7f8 ff72 	bl	119e4 <bsd_os_errno_set>
   18b00:	4628      	mov	r0, r5
   18b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18b04:	2504      	movs	r5, #4
   18b06:	f04f 0c01 	mov.w	ip, #1
   18b0a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   18b0e:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   18b12:	00a4      	lsls	r4, r4, #2
   18b14:	f843 c004 	str.w	ip, [r3, r4]
   18b18:	441c      	add	r4, r3
   18b1a:	4611      	mov	r1, r2
   18b1c:	61a7      	str	r7, [r4, #24]
   18b1e:	4622      	mov	r2, r4
   18b20:	f001 ffde 	bl	1aae0 <packet_handler_create>
   18b24:	4603      	mov	r3, r0
   18b26:	61e0      	str	r0, [r4, #28]
   18b28:	b158      	cbz	r0, 18b42 <interface_socket_allocate+0x82>
   18b2a:	681b      	ldr	r3, [r3, #0]
   18b2c:	681b      	ldr	r3, [r3, #0]
   18b2e:	4798      	blx	r3
   18b30:	b910      	cbnz	r0, 18b38 <interface_socket_allocate+0x78>
   18b32:	6034      	str	r4, [r6, #0]
   18b34:	4628      	mov	r0, r5
   18b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18b38:	69e0      	ldr	r0, [r4, #28]
   18b3a:	f001 fff1 	bl	1ab20 <packet_handler_delete>
   18b3e:	2300      	movs	r3, #0
   18b40:	61e3      	str	r3, [r4, #28]
   18b42:	4620      	mov	r0, r4
   18b44:	2224      	movs	r2, #36	; 0x24
   18b46:	2100      	movs	r1, #0
   18b48:	f004 fdbf 	bl	1d6ca <memset>
   18b4c:	e7d3      	b.n	18af6 <interface_socket_allocate+0x36>
   18b4e:	2501      	movs	r5, #1
   18b50:	e7d9      	b.n	18b06 <interface_socket_allocate+0x46>
   18b52:	2502      	movs	r5, #2
   18b54:	e7d7      	b.n	18b06 <interface_socket_allocate+0x46>
   18b56:	2503      	movs	r5, #3
   18b58:	e7d5      	b.n	18b06 <interface_socket_allocate+0x46>
   18b5a:	2505      	movs	r5, #5
   18b5c:	e7d3      	b.n	18b06 <interface_socket_allocate+0x46>
   18b5e:	2506      	movs	r5, #6
   18b60:	e7d1      	b.n	18b06 <interface_socket_allocate+0x46>
   18b62:	2507      	movs	r5, #7
   18b64:	e7cf      	b.n	18b06 <interface_socket_allocate+0x46>
   18b66:	bf00      	nop
   18b68:	20026594 	.word	0x20026594

00018b6c <interface_socket_free>:
   18b6c:	2807      	cmp	r0, #7
   18b6e:	d900      	bls.n	18b72 <interface_socket_free+0x6>
   18b70:	4770      	bx	lr
   18b72:	b510      	push	{r4, lr}
   18b74:	4c07      	ldr	r4, [pc, #28]	; (18b94 <interface_socket_free+0x28>)
   18b76:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18b7a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   18b7e:	69e0      	ldr	r0, [r4, #28]
   18b80:	b108      	cbz	r0, 18b86 <interface_socket_free+0x1a>
   18b82:	f001 ffcd 	bl	1ab20 <packet_handler_delete>
   18b86:	4620      	mov	r0, r4
   18b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18b8c:	2224      	movs	r2, #36	; 0x24
   18b8e:	2100      	movs	r1, #0
   18b90:	f004 bd9b 	b.w	1d6ca <memset>
   18b94:	20026594 	.word	0x20026594

00018b98 <interface_socket_packet_handler_update>:
   18b98:	2807      	cmp	r0, #7
   18b9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18b9e:	d81e      	bhi.n	18bde <interface_socket_packet_handler_update+0x46>
   18ba0:	ea4f 08c0 	mov.w	r8, r0, lsl #3
   18ba4:	4e17      	ldr	r6, [pc, #92]	; (18c04 <interface_socket_packet_handler_update+0x6c>)
   18ba6:	eb08 0300 	add.w	r3, r8, r0
   18baa:	009b      	lsls	r3, r3, #2
   18bac:	58f4      	ldr	r4, [r6, r3]
   18bae:	18f5      	adds	r5, r6, r3
   18bb0:	b1ac      	cbz	r4, 18bde <interface_socket_packet_handler_update+0x46>
   18bb2:	460b      	mov	r3, r1
   18bb4:	4604      	mov	r4, r0
   18bb6:	4611      	mov	r1, r2
   18bb8:	4618      	mov	r0, r3
   18bba:	462a      	mov	r2, r5
   18bbc:	f8d5 901c 	ldr.w	r9, [r5, #28]
   18bc0:	f001 ff8e 	bl	1aae0 <packet_handler_create>
   18bc4:	61e8      	str	r0, [r5, #28]
   18bc6:	b1d0      	cbz	r0, 18bfe <interface_socket_packet_handler_update+0x66>
   18bc8:	6803      	ldr	r3, [r0, #0]
   18bca:	681b      	ldr	r3, [r3, #0]
   18bcc:	4798      	blx	r3
   18bce:	4607      	mov	r7, r0
   18bd0:	b948      	cbnz	r0, 18be6 <interface_socket_packet_handler_update+0x4e>
   18bd2:	4648      	mov	r0, r9
   18bd4:	f001 ffa4 	bl	1ab20 <packet_handler_delete>
   18bd8:	4638      	mov	r0, r7
   18bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18bde:	2705      	movs	r7, #5
   18be0:	4638      	mov	r0, r7
   18be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18be6:	69e8      	ldr	r0, [r5, #28]
   18be8:	f001 ff9a 	bl	1ab20 <packet_handler_delete>
   18bec:	eb08 0004 	add.w	r0, r8, r4
   18bf0:	eb06 0680 	add.w	r6, r6, r0, lsl #2
   18bf4:	f8c6 901c 	str.w	r9, [r6, #28]
   18bf8:	4638      	mov	r0, r7
   18bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18bfe:	2704      	movs	r7, #4
   18c00:	e7f4      	b.n	18bec <interface_socket_packet_handler_update+0x54>
   18c02:	bf00      	nop
   18c04:	20026594 	.word	0x20026594

00018c08 <interface_socket_wait>:
   18c08:	b5f0      	push	{r4, r5, r6, r7, lr}
   18c0a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18c0e:	4c0e      	ldr	r4, [pc, #56]	; (18c48 <interface_socket_wait+0x40>)
   18c10:	0080      	lsls	r0, r0, #2
   18c12:	5825      	ldr	r5, [r4, r0]
   18c14:	b083      	sub	sp, #12
   18c16:	4015      	ands	r5, r2
   18c18:	428d      	cmp	r5, r1
   18c1a:	9301      	str	r3, [sp, #4]
   18c1c:	4404      	add	r4, r0
   18c1e:	d010      	beq.n	18c42 <interface_socket_wait+0x3a>
   18c20:	6863      	ldr	r3, [r4, #4]
   18c22:	b973      	cbnz	r3, 18c42 <interface_socket_wait+0x3a>
   18c24:	460f      	mov	r7, r1
   18c26:	4616      	mov	r6, r2
   18c28:	4625      	mov	r5, r4
   18c2a:	e006      	b.n	18c3a <interface_socket_wait+0x32>
   18c2c:	686b      	ldr	r3, [r5, #4]
   18c2e:	b943      	cbnz	r3, 18c42 <interface_socket_wait+0x3a>
   18c30:	a901      	add	r1, sp, #4
   18c32:	4620      	mov	r0, r4
   18c34:	f7f8 fe42 	bl	118bc <bsd_os_timedwait>
   18c38:	b920      	cbnz	r0, 18c44 <interface_socket_wait+0x3c>
   18c3a:	682b      	ldr	r3, [r5, #0]
   18c3c:	4033      	ands	r3, r6
   18c3e:	42bb      	cmp	r3, r7
   18c40:	d1f4      	bne.n	18c2c <interface_socket_wait+0x24>
   18c42:	2000      	movs	r0, #0
   18c44:	b003      	add	sp, #12
   18c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18c48:	20026594 	.word	0x20026594

00018c4c <interface_from_internal_id_search>:
   18c4c:	4b23      	ldr	r3, [pc, #140]	; (18cdc <interface_from_internal_id_search+0x90>)
   18c4e:	681a      	ldr	r2, [r3, #0]
   18c50:	b112      	cbz	r2, 18c58 <interface_from_internal_id_search+0xc>
   18c52:	699a      	ldr	r2, [r3, #24]
   18c54:	4282      	cmp	r2, r0
   18c56:	d032      	beq.n	18cbe <interface_from_internal_id_search+0x72>
   18c58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   18c5a:	b112      	cbz	r2, 18c62 <interface_from_internal_id_search+0x16>
   18c5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   18c5e:	4282      	cmp	r2, r0
   18c60:	d02f      	beq.n	18cc2 <interface_from_internal_id_search+0x76>
   18c62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   18c64:	b112      	cbz	r2, 18c6c <interface_from_internal_id_search+0x20>
   18c66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   18c68:	4282      	cmp	r2, r0
   18c6a:	d02c      	beq.n	18cc6 <interface_from_internal_id_search+0x7a>
   18c6c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   18c6e:	b11a      	cbz	r2, 18c78 <interface_from_internal_id_search+0x2c>
   18c70:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   18c74:	4282      	cmp	r2, r0
   18c76:	d028      	beq.n	18cca <interface_from_internal_id_search+0x7e>
   18c78:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   18c7c:	b11a      	cbz	r2, 18c86 <interface_from_internal_id_search+0x3a>
   18c7e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
   18c82:	4282      	cmp	r2, r0
   18c84:	d023      	beq.n	18cce <interface_from_internal_id_search+0x82>
   18c86:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   18c8a:	b11a      	cbz	r2, 18c94 <interface_from_internal_id_search+0x48>
   18c8c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   18c90:	4282      	cmp	r2, r0
   18c92:	d01e      	beq.n	18cd2 <interface_from_internal_id_search+0x86>
   18c94:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
   18c98:	b11a      	cbz	r2, 18ca2 <interface_from_internal_id_search+0x56>
   18c9a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   18c9e:	4282      	cmp	r2, r0
   18ca0:	d019      	beq.n	18cd6 <interface_from_internal_id_search+0x8a>
   18ca2:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
   18ca6:	b13a      	cbz	r2, 18cb8 <interface_from_internal_id_search+0x6c>
   18ca8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   18cac:	4283      	cmp	r3, r0
   18cae:	bf14      	ite	ne
   18cb0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   18cb4:	2007      	moveq	r0, #7
   18cb6:	4770      	bx	lr
   18cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18cbc:	4770      	bx	lr
   18cbe:	2000      	movs	r0, #0
   18cc0:	4770      	bx	lr
   18cc2:	2001      	movs	r0, #1
   18cc4:	4770      	bx	lr
   18cc6:	2002      	movs	r0, #2
   18cc8:	4770      	bx	lr
   18cca:	2003      	movs	r0, #3
   18ccc:	4770      	bx	lr
   18cce:	2004      	movs	r0, #4
   18cd0:	4770      	bx	lr
   18cd2:	2005      	movs	r0, #5
   18cd4:	4770      	bx	lr
   18cd6:	2006      	movs	r0, #6
   18cd8:	4770      	bx	lr
   18cda:	bf00      	nop
   18cdc:	20026594 	.word	0x20026594

00018ce0 <interface_socket_from_handle_get>:
   18ce0:	2807      	cmp	r0, #7
   18ce2:	d807      	bhi.n	18cf4 <interface_socket_from_handle_get+0x14>
   18ce4:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18ce8:	4b03      	ldr	r3, [pc, #12]	; (18cf8 <interface_socket_from_handle_get+0x18>)
   18cea:	0080      	lsls	r0, r0, #2
   18cec:	581a      	ldr	r2, [r3, r0]
   18cee:	b10a      	cbz	r2, 18cf4 <interface_socket_from_handle_get+0x14>
   18cf0:	4418      	add	r0, r3
   18cf2:	4770      	bx	lr
   18cf4:	2000      	movs	r0, #0
   18cf6:	4770      	bx	lr
   18cf8:	20026594 	.word	0x20026594

00018cfc <interface_socket_event_get>:
   18cfc:	b119      	cbz	r1, 18d06 <interface_socket_event_get+0xa>
   18cfe:	2807      	cmp	r0, #7
   18d00:	d902      	bls.n	18d08 <interface_socket_event_get+0xc>
   18d02:	2310      	movs	r3, #16
   18d04:	600b      	str	r3, [r1, #0]
   18d06:	4770      	bx	lr
   18d08:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18d0c:	4b07      	ldr	r3, [pc, #28]	; (18d2c <interface_socket_event_get+0x30>)
   18d0e:	0080      	lsls	r0, r0, #2
   18d10:	581a      	ldr	r2, [r3, r0]
   18d12:	2a00      	cmp	r2, #0
   18d14:	d0f5      	beq.n	18d02 <interface_socket_event_get+0x6>
   18d16:	581b      	ldr	r3, [r3, r0]
   18d18:	0c1b      	lsrs	r3, r3, #16
   18d1a:	f003 020a 	and.w	r2, r3, #10
   18d1e:	2a0a      	cmp	r2, #10
   18d20:	bf14      	ite	ne
   18d22:	f003 030f 	andne.w	r3, r3, #15
   18d26:	f003 030d 	andeq.w	r3, r3, #13
   18d2a:	e7eb      	b.n	18d04 <interface_socket_event_get+0x8>
   18d2c:	20026594 	.word	0x20026594

00018d30 <interface_socket_setopt>:
   18d30:	2807      	cmp	r0, #7
   18d32:	b570      	push	{r4, r5, r6, lr}
   18d34:	d827      	bhi.n	18d86 <interface_socket_setopt+0x56>
   18d36:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18d3a:	4c16      	ldr	r4, [pc, #88]	; (18d94 <interface_socket_setopt+0x64>)
   18d3c:	0080      	lsls	r0, r0, #2
   18d3e:	5825      	ldr	r5, [r4, r0]
   18d40:	b30d      	cbz	r5, 18d86 <interface_socket_setopt+0x56>
   18d42:	2901      	cmp	r1, #1
   18d44:	d119      	bne.n	18d7a <interface_socket_setopt+0x4a>
   18d46:	2a14      	cmp	r2, #20
   18d48:	d117      	bne.n	18d7a <interface_socket_setopt+0x4a>
   18d4a:	b183      	cbz	r3, 18d6e <interface_socket_setopt+0x3e>
   18d4c:	9a04      	ldr	r2, [sp, #16]
   18d4e:	2a08      	cmp	r2, #8
   18d50:	d10d      	bne.n	18d6e <interface_socket_setopt+0x3e>
   18d52:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   18d56:	685a      	ldr	r2, [r3, #4]
   18d58:	4e0f      	ldr	r6, [pc, #60]	; (18d98 <interface_socket_setopt+0x68>)
   18d5a:	6819      	ldr	r1, [r3, #0]
   18d5c:	fba6 2302 	umull	r2, r3, r6, r2
   18d60:	099b      	lsrs	r3, r3, #6
   18d62:	fb05 3301 	mla	r3, r5, r1, r3
   18d66:	4420      	add	r0, r4
   18d68:	6203      	str	r3, [r0, #32]
   18d6a:	2000      	movs	r0, #0
   18d6c:	bd70      	pop	{r4, r5, r6, pc}
   18d6e:	2016      	movs	r0, #22
   18d70:	f7f8 fe38 	bl	119e4 <bsd_os_errno_set>
   18d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18d78:	bd70      	pop	{r4, r5, r6, pc}
   18d7a:	202a      	movs	r0, #42	; 0x2a
   18d7c:	f7f8 fe32 	bl	119e4 <bsd_os_errno_set>
   18d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18d84:	bd70      	pop	{r4, r5, r6, pc}
   18d86:	2009      	movs	r0, #9
   18d88:	f7f8 fe2c 	bl	119e4 <bsd_os_errno_set>
   18d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18d90:	bd70      	pop	{r4, r5, r6, pc}
   18d92:	bf00      	nop
   18d94:	20026594 	.word	0x20026594
   18d98:	10624dd3 	.word	0x10624dd3

00018d9c <interface_socket_getopt>:
   18d9c:	b570      	push	{r4, r5, r6, lr}
   18d9e:	2807      	cmp	r0, #7
   18da0:	9d04      	ldr	r5, [sp, #16]
   18da2:	d821      	bhi.n	18de8 <interface_socket_getopt+0x4c>
   18da4:	4c13      	ldr	r4, [pc, #76]	; (18df4 <interface_socket_getopt+0x58>)
   18da6:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18daa:	0080      	lsls	r0, r0, #2
   18dac:	5826      	ldr	r6, [r4, r0]
   18dae:	4404      	add	r4, r0
   18db0:	b1d6      	cbz	r6, 18de8 <interface_socket_getopt+0x4c>
   18db2:	2901      	cmp	r1, #1
   18db4:	d112      	bne.n	18ddc <interface_socket_getopt+0x40>
   18db6:	2a04      	cmp	r2, #4
   18db8:	d110      	bne.n	18ddc <interface_socket_getopt+0x40>
   18dba:	b14b      	cbz	r3, 18dd0 <interface_socket_getopt+0x34>
   18dbc:	b145      	cbz	r5, 18dd0 <interface_socket_getopt+0x34>
   18dbe:	682a      	ldr	r2, [r5, #0]
   18dc0:	2a04      	cmp	r2, #4
   18dc2:	d105      	bne.n	18dd0 <interface_socket_getopt+0x34>
   18dc4:	2200      	movs	r2, #0
   18dc6:	6861      	ldr	r1, [r4, #4]
   18dc8:	4610      	mov	r0, r2
   18dca:	6019      	str	r1, [r3, #0]
   18dcc:	6062      	str	r2, [r4, #4]
   18dce:	bd70      	pop	{r4, r5, r6, pc}
   18dd0:	2016      	movs	r0, #22
   18dd2:	f7f8 fe07 	bl	119e4 <bsd_os_errno_set>
   18dd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18dda:	bd70      	pop	{r4, r5, r6, pc}
   18ddc:	202a      	movs	r0, #42	; 0x2a
   18dde:	f7f8 fe01 	bl	119e4 <bsd_os_errno_set>
   18de2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18de6:	bd70      	pop	{r4, r5, r6, pc}
   18de8:	2009      	movs	r0, #9
   18dea:	f7f8 fdfb 	bl	119e4 <bsd_os_errno_set>
   18dee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18df2:	bd70      	pop	{r4, r5, r6, pc}
   18df4:	20026594 	.word	0x20026594

00018df8 <interface_shutdown>:
   18df8:	4b15      	ldr	r3, [pc, #84]	; (18e50 <interface_shutdown+0x58>)
   18dfa:	681a      	ldr	r2, [r3, #0]
   18dfc:	b10a      	cbz	r2, 18e02 <interface_shutdown+0xa>
   18dfe:	2270      	movs	r2, #112	; 0x70
   18e00:	605a      	str	r2, [r3, #4]
   18e02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   18e04:	b10a      	cbz	r2, 18e0a <interface_shutdown+0x12>
   18e06:	2270      	movs	r2, #112	; 0x70
   18e08:	629a      	str	r2, [r3, #40]	; 0x28
   18e0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   18e0c:	b10a      	cbz	r2, 18e12 <interface_shutdown+0x1a>
   18e0e:	2270      	movs	r2, #112	; 0x70
   18e10:	64da      	str	r2, [r3, #76]	; 0x4c
   18e12:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   18e14:	b10a      	cbz	r2, 18e1a <interface_shutdown+0x22>
   18e16:	2270      	movs	r2, #112	; 0x70
   18e18:	671a      	str	r2, [r3, #112]	; 0x70
   18e1a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   18e1e:	b112      	cbz	r2, 18e26 <interface_shutdown+0x2e>
   18e20:	2270      	movs	r2, #112	; 0x70
   18e22:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   18e26:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   18e2a:	b112      	cbz	r2, 18e32 <interface_shutdown+0x3a>
   18e2c:	2270      	movs	r2, #112	; 0x70
   18e2e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
   18e32:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
   18e36:	b112      	cbz	r2, 18e3e <interface_shutdown+0x46>
   18e38:	2270      	movs	r2, #112	; 0x70
   18e3a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
   18e3e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
   18e42:	b112      	cbz	r2, 18e4a <interface_shutdown+0x52>
   18e44:	2270      	movs	r2, #112	; 0x70
   18e46:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   18e4a:	2000      	movs	r0, #0
   18e4c:	4770      	bx	lr
   18e4e:	bf00      	nop
   18e50:	20026594 	.word	0x20026594

00018e54 <interface_socket_fcntl>:
   18e54:	2807      	cmp	r0, #7
   18e56:	b510      	push	{r4, lr}
   18e58:	d818      	bhi.n	18e8c <interface_socket_fcntl+0x38>
   18e5a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18e5e:	4c11      	ldr	r4, [pc, #68]	; (18ea4 <interface_socket_fcntl+0x50>)
   18e60:	0083      	lsls	r3, r0, #2
   18e62:	58e0      	ldr	r0, [r4, r3]
   18e64:	b190      	cbz	r0, 18e8c <interface_socket_fcntl+0x38>
   18e66:	2901      	cmp	r1, #1
   18e68:	d005      	beq.n	18e76 <interface_socket_fcntl+0x22>
   18e6a:	2902      	cmp	r1, #2
   18e6c:	d114      	bne.n	18e98 <interface_socket_fcntl+0x44>
   18e6e:	58e0      	ldr	r0, [r4, r3]
   18e70:	f3c0 7000 	ubfx	r0, r0, #28, #1
   18e74:	bd10      	pop	{r4, pc}
   18e76:	f012 0001 	ands.w	r0, r2, #1
   18e7a:	58e2      	ldr	r2, [r4, r3]
   18e7c:	bf1a      	itte	ne
   18e7e:	2000      	movne	r0, #0
   18e80:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
   18e84:	f022 5280 	biceq.w	r2, r2, #268435456	; 0x10000000
   18e88:	50e2      	str	r2, [r4, r3]
   18e8a:	bd10      	pop	{r4, pc}
   18e8c:	2009      	movs	r0, #9
   18e8e:	f7f8 fda9 	bl	119e4 <bsd_os_errno_set>
   18e92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18e96:	bd10      	pop	{r4, pc}
   18e98:	2016      	movs	r0, #22
   18e9a:	f7f8 fda3 	bl	119e4 <bsd_os_errno_set>
   18e9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18ea2:	bd10      	pop	{r4, pc}
   18ea4:	20026594 	.word	0x20026594

00018ea8 <bsd_os_application_irq_handler>:
   18ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18eac:	4c33      	ldr	r4, [pc, #204]	; (18f7c <bsd_os_application_irq_handler+0xd4>)
   18eae:	f7f8 fe4d 	bl	11b4c <bsd_os_application_irq_clear>
   18eb2:	f04f 0803 	mov.w	r8, #3
   18eb6:	4d32      	ldr	r5, [pc, #200]	; (18f80 <bsd_os_application_irq_handler+0xd8>)
   18eb8:	4f32      	ldr	r7, [pc, #200]	; (18f84 <bsd_os_application_irq_handler+0xdc>)
   18eba:	f104 0680 	add.w	r6, r4, #128	; 0x80
   18ebe:	e004      	b.n	18eca <bsd_os_application_irq_handler+0x22>
   18ec0:	2b04      	cmp	r3, #4
   18ec2:	d006      	beq.n	18ed2 <bsd_os_application_irq_handler+0x2a>
   18ec4:	3408      	adds	r4, #8
   18ec6:	42b4      	cmp	r4, r6
   18ec8:	d03b      	beq.n	18f42 <bsd_os_application_irq_handler+0x9a>
   18eca:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   18ece:	2b02      	cmp	r3, #2
   18ed0:	d1f6      	bne.n	18ec0 <bsd_os_application_irq_handler+0x18>
   18ed2:	6820      	ldr	r0, [r4, #0]
   18ed4:	882a      	ldrh	r2, [r5, #0]
   18ed6:	6803      	ldr	r3, [r0, #0]
   18ed8:	b29b      	uxth	r3, r3
   18eda:	429a      	cmp	r2, r3
   18edc:	d033      	beq.n	18f46 <bsd_os_application_irq_handler+0x9e>
   18ede:	8a2a      	ldrh	r2, [r5, #16]
   18ee0:	429a      	cmp	r2, r3
   18ee2:	d032      	beq.n	18f4a <bsd_os_application_irq_handler+0xa2>
   18ee4:	8c2a      	ldrh	r2, [r5, #32]
   18ee6:	429a      	cmp	r2, r3
   18ee8:	d031      	beq.n	18f4e <bsd_os_application_irq_handler+0xa6>
   18eea:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   18eec:	429a      	cmp	r2, r3
   18eee:	d030      	beq.n	18f52 <bsd_os_application_irq_handler+0xaa>
   18ef0:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
   18ef4:	429a      	cmp	r2, r3
   18ef6:	d036      	beq.n	18f66 <bsd_os_application_irq_handler+0xbe>
   18ef8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
   18efc:	429a      	cmp	r2, r3
   18efe:	d034      	beq.n	18f6a <bsd_os_application_irq_handler+0xc2>
   18f00:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
   18f04:	429a      	cmp	r2, r3
   18f06:	d032      	beq.n	18f6e <bsd_os_application_irq_handler+0xc6>
   18f08:	f8b5 2070 	ldrh.w	r2, [r5, #112]	; 0x70
   18f0c:	429a      	cmp	r2, r3
   18f0e:	d030      	beq.n	18f72 <bsd_os_application_irq_handler+0xca>
   18f10:	f8b5 2080 	ldrh.w	r2, [r5, #128]	; 0x80
   18f14:	429a      	cmp	r2, r3
   18f16:	d02e      	beq.n	18f76 <bsd_os_application_irq_handler+0xce>
   18f18:	f8b5 2090 	ldrh.w	r2, [r5, #144]	; 0x90
   18f1c:	429a      	cmp	r2, r3
   18f1e:	bf08      	it	eq
   18f20:	2309      	moveq	r3, #9
   18f22:	d1cf      	bne.n	18ec4 <bsd_os_application_irq_handler+0x1c>
   18f24:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   18f28:	685a      	ldr	r2, [r3, #4]
   18f2a:	68d9      	ldr	r1, [r3, #12]
   18f2c:	4790      	blx	r2
   18f2e:	b990      	cbnz	r0, 18f56 <bsd_os_application_irq_handler+0xae>
   18f30:	2201      	movs	r2, #1
   18f32:	6820      	ldr	r0, [r4, #0]
   18f34:	f804 2c04 	strb.w	r2, [r4, #-4]
   18f38:	68fb      	ldr	r3, [r7, #12]
   18f3a:	3408      	adds	r4, #8
   18f3c:	4798      	blx	r3
   18f3e:	42b4      	cmp	r4, r6
   18f40:	d1c3      	bne.n	18eca <bsd_os_application_irq_handler+0x22>
   18f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18f46:	2300      	movs	r3, #0
   18f48:	e7ec      	b.n	18f24 <bsd_os_application_irq_handler+0x7c>
   18f4a:	2301      	movs	r3, #1
   18f4c:	e7ea      	b.n	18f24 <bsd_os_application_irq_handler+0x7c>
   18f4e:	2302      	movs	r3, #2
   18f50:	e7e8      	b.n	18f24 <bsd_os_application_irq_handler+0x7c>
   18f52:	2303      	movs	r3, #3
   18f54:	e7e6      	b.n	18f24 <bsd_os_application_irq_handler+0x7c>
   18f56:	2802      	cmp	r0, #2
   18f58:	bf0a      	itet	eq
   18f5a:	2304      	moveq	r3, #4
   18f5c:	f804 8c04 	strbne.w	r8, [r4, #-4]
   18f60:	f804 3c04 	strbeq.w	r3, [r4, #-4]
   18f64:	e7ae      	b.n	18ec4 <bsd_os_application_irq_handler+0x1c>
   18f66:	2304      	movs	r3, #4
   18f68:	e7dc      	b.n	18f24 <bsd_os_application_irq_handler+0x7c>
   18f6a:	2305      	movs	r3, #5
   18f6c:	e7da      	b.n	18f24 <bsd_os_application_irq_handler+0x7c>
   18f6e:	2306      	movs	r3, #6
   18f70:	e7d8      	b.n	18f24 <bsd_os_application_irq_handler+0x7c>
   18f72:	2307      	movs	r3, #7
   18f74:	e7d6      	b.n	18f24 <bsd_os_application_irq_handler+0x7c>
   18f76:	2308      	movs	r3, #8
   18f78:	e7d4      	b.n	18f24 <bsd_os_application_irq_handler+0x7c>
   18f7a:	bf00      	nop
   18f7c:	20020ab8 	.word	0x20020ab8
   18f80:	2002097c 	.word	0x2002097c
   18f84:	20020a1c 	.word	0x20020a1c

00018f88 <rpc_framework_init>:
   18f88:	b508      	push	{r3, lr}
   18f8a:	22a0      	movs	r2, #160	; 0xa0
   18f8c:	2100      	movs	r1, #0
   18f8e:	4802      	ldr	r0, [pc, #8]	; (18f98 <rpc_framework_init+0x10>)
   18f90:	f004 fb9b 	bl	1d6ca <memset>
   18f94:	2000      	movs	r0, #0
   18f96:	bd08      	pop	{r3, pc}
   18f98:	2002097c 	.word	0x2002097c

00018f9c <rpc_client_register>:
   18f9c:	8803      	ldrh	r3, [r0, #0]
   18f9e:	2b00      	cmp	r3, #0
   18fa0:	d045      	beq.n	1902e <rpc_client_register+0x92>
   18fa2:	6842      	ldr	r2, [r0, #4]
   18fa4:	4601      	mov	r1, r0
   18fa6:	2a00      	cmp	r2, #0
   18fa8:	d050      	beq.n	1904c <rpc_client_register+0xb0>
   18faa:	4a30      	ldr	r2, [pc, #192]	; (1906c <rpc_client_register+0xd0>)
   18fac:	8810      	ldrh	r0, [r2, #0]
   18fae:	4283      	cmp	r3, r0
   18fb0:	d03d      	beq.n	1902e <rpc_client_register+0x92>
   18fb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18fb6:	8a14      	ldrh	r4, [r2, #16]
   18fb8:	42a3      	cmp	r3, r4
   18fba:	d035      	beq.n	19028 <rpc_client_register+0x8c>
   18fbc:	8c15      	ldrh	r5, [r2, #32]
   18fbe:	42ab      	cmp	r3, r5
   18fc0:	d032      	beq.n	19028 <rpc_client_register+0x8c>
   18fc2:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   18fc4:	42b3      	cmp	r3, r6
   18fc6:	d02f      	beq.n	19028 <rpc_client_register+0x8c>
   18fc8:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   18fcc:	42bb      	cmp	r3, r7
   18fce:	d02b      	beq.n	19028 <rpc_client_register+0x8c>
   18fd0:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   18fd4:	4563      	cmp	r3, ip
   18fd6:	d027      	beq.n	19028 <rpc_client_register+0x8c>
   18fd8:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   18fdc:	4573      	cmp	r3, lr
   18fde:	d023      	beq.n	19028 <rpc_client_register+0x8c>
   18fe0:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   18fe4:	4543      	cmp	r3, r8
   18fe6:	d01f      	beq.n	19028 <rpc_client_register+0x8c>
   18fe8:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   18fec:	454b      	cmp	r3, r9
   18fee:	d01b      	beq.n	19028 <rpc_client_register+0x8c>
   18ff0:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   18ff4:	4553      	cmp	r3, sl
   18ff6:	d017      	beq.n	19028 <rpc_client_register+0x8c>
   18ff8:	b1e0      	cbz	r0, 19034 <rpc_client_register+0x98>
   18ffa:	b35c      	cbz	r4, 19054 <rpc_client_register+0xb8>
   18ffc:	b365      	cbz	r5, 19058 <rpc_client_register+0xbc>
   18ffe:	b36e      	cbz	r6, 1905c <rpc_client_register+0xc0>
   19000:	b377      	cbz	r7, 19060 <rpc_client_register+0xc4>
   19002:	f1bc 0f00 	cmp.w	ip, #0
   19006:	d02d      	beq.n	19064 <rpc_client_register+0xc8>
   19008:	f1be 0f00 	cmp.w	lr, #0
   1900c:	d020      	beq.n	19050 <rpc_client_register+0xb4>
   1900e:	f1b8 0f00 	cmp.w	r8, #0
   19012:	d029      	beq.n	19068 <rpc_client_register+0xcc>
   19014:	f1b9 0f00 	cmp.w	r9, #0
   19018:	d00b      	beq.n	19032 <rpc_client_register+0x96>
   1901a:	2009      	movs	r0, #9
   1901c:	f1ba 0f00 	cmp.w	sl, #0
   19020:	d008      	beq.n	19034 <rpc_client_register+0x98>
   19022:	2004      	movs	r0, #4
   19024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19028:	2007      	movs	r0, #7
   1902a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1902e:	2007      	movs	r0, #7
   19030:	4770      	bx	lr
   19032:	2008      	movs	r0, #8
   19034:	0100      	lsls	r0, r0, #4
   19036:	5213      	strh	r3, [r2, r0]
   19038:	684b      	ldr	r3, [r1, #4]
   1903a:	4402      	add	r2, r0
   1903c:	6053      	str	r3, [r2, #4]
   1903e:	688b      	ldr	r3, [r1, #8]
   19040:	2000      	movs	r0, #0
   19042:	6093      	str	r3, [r2, #8]
   19044:	68cb      	ldr	r3, [r1, #12]
   19046:	60d3      	str	r3, [r2, #12]
   19048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1904c:	200e      	movs	r0, #14
   1904e:	4770      	bx	lr
   19050:	2006      	movs	r0, #6
   19052:	e7ef      	b.n	19034 <rpc_client_register+0x98>
   19054:	2001      	movs	r0, #1
   19056:	e7ed      	b.n	19034 <rpc_client_register+0x98>
   19058:	2002      	movs	r0, #2
   1905a:	e7eb      	b.n	19034 <rpc_client_register+0x98>
   1905c:	2003      	movs	r0, #3
   1905e:	e7e9      	b.n	19034 <rpc_client_register+0x98>
   19060:	2004      	movs	r0, #4
   19062:	e7e7      	b.n	19034 <rpc_client_register+0x98>
   19064:	2005      	movs	r0, #5
   19066:	e7e5      	b.n	19034 <rpc_client_register+0x98>
   19068:	2007      	movs	r0, #7
   1906a:	e7e3      	b.n	19034 <rpc_client_register+0x98>
   1906c:	2002097c 	.word	0x2002097c

00019070 <rpc_transport_input>:
   19070:	b538      	push	{r3, r4, r5, lr}
   19072:	4a82      	ldr	r2, [pc, #520]	; (1927c <rpc_transport_input+0x20c>)
   19074:	680b      	ldr	r3, [r1, #0]
   19076:	8810      	ldrh	r0, [r2, #0]
   19078:	b29b      	uxth	r3, r3
   1907a:	4298      	cmp	r0, r3
   1907c:	d027      	beq.n	190ce <rpc_transport_input+0x5e>
   1907e:	8a10      	ldrh	r0, [r2, #16]
   19080:	4298      	cmp	r0, r3
   19082:	d024      	beq.n	190ce <rpc_transport_input+0x5e>
   19084:	8c10      	ldrh	r0, [r2, #32]
   19086:	4298      	cmp	r0, r3
   19088:	d021      	beq.n	190ce <rpc_transport_input+0x5e>
   1908a:	8e10      	ldrh	r0, [r2, #48]	; 0x30
   1908c:	4298      	cmp	r0, r3
   1908e:	d01e      	beq.n	190ce <rpc_transport_input+0x5e>
   19090:	f8b2 0040 	ldrh.w	r0, [r2, #64]	; 0x40
   19094:	4298      	cmp	r0, r3
   19096:	d01a      	beq.n	190ce <rpc_transport_input+0x5e>
   19098:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
   1909c:	4298      	cmp	r0, r3
   1909e:	d016      	beq.n	190ce <rpc_transport_input+0x5e>
   190a0:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
   190a4:	4298      	cmp	r0, r3
   190a6:	d012      	beq.n	190ce <rpc_transport_input+0x5e>
   190a8:	f8b2 0070 	ldrh.w	r0, [r2, #112]	; 0x70
   190ac:	4298      	cmp	r0, r3
   190ae:	d00e      	beq.n	190ce <rpc_transport_input+0x5e>
   190b0:	f8b2 0080 	ldrh.w	r0, [r2, #128]	; 0x80
   190b4:	4298      	cmp	r0, r3
   190b6:	d00a      	beq.n	190ce <rpc_transport_input+0x5e>
   190b8:	f8b2 2090 	ldrh.w	r2, [r2, #144]	; 0x90
   190bc:	429a      	cmp	r2, r3
   190be:	d006      	beq.n	190ce <rpc_transport_input+0x5e>
   190c0:	6888      	ldr	r0, [r1, #8]
   190c2:	b118      	cbz	r0, 190cc <rpc_transport_input+0x5c>
   190c4:	4b6e      	ldr	r3, [pc, #440]	; (19280 <rpc_transport_input+0x210>)
   190c6:	691b      	ldr	r3, [r3, #16]
   190c8:	4798      	blx	r3
   190ca:	2000      	movs	r0, #0
   190cc:	bd38      	pop	{r3, r4, r5, pc}
   190ce:	6888      	ldr	r0, [r1, #8]
   190d0:	2800      	cmp	r0, #0
   190d2:	f000 8098 	beq.w	19206 <rpc_transport_input+0x196>
   190d6:	4a6b      	ldr	r2, [pc, #428]	; (19284 <rpc_transport_input+0x214>)
   190d8:	6814      	ldr	r4, [r2, #0]
   190da:	2c00      	cmp	r4, #0
   190dc:	d03c      	beq.n	19158 <rpc_transport_input+0xe8>
   190de:	6894      	ldr	r4, [r2, #8]
   190e0:	2c00      	cmp	r4, #0
   190e2:	f000 809a 	beq.w	1921a <rpc_transport_input+0x1aa>
   190e6:	6914      	ldr	r4, [r2, #16]
   190e8:	2c00      	cmp	r4, #0
   190ea:	f000 809a 	beq.w	19222 <rpc_transport_input+0x1b2>
   190ee:	6994      	ldr	r4, [r2, #24]
   190f0:	2c00      	cmp	r4, #0
   190f2:	f000 809a 	beq.w	1922a <rpc_transport_input+0x1ba>
   190f6:	6a14      	ldr	r4, [r2, #32]
   190f8:	2c00      	cmp	r4, #0
   190fa:	f000 809a 	beq.w	19232 <rpc_transport_input+0x1c2>
   190fe:	6a94      	ldr	r4, [r2, #40]	; 0x28
   19100:	2c00      	cmp	r4, #0
   19102:	f000 8084 	beq.w	1920e <rpc_transport_input+0x19e>
   19106:	6b14      	ldr	r4, [r2, #48]	; 0x30
   19108:	2c00      	cmp	r4, #0
   1910a:	f000 8098 	beq.w	1923e <rpc_transport_input+0x1ce>
   1910e:	6b94      	ldr	r4, [r2, #56]	; 0x38
   19110:	2c00      	cmp	r4, #0
   19112:	f000 8096 	beq.w	19242 <rpc_transport_input+0x1d2>
   19116:	6c14      	ldr	r4, [r2, #64]	; 0x40
   19118:	2c00      	cmp	r4, #0
   1911a:	f000 8096 	beq.w	1924a <rpc_transport_input+0x1da>
   1911e:	6c94      	ldr	r4, [r2, #72]	; 0x48
   19120:	2c00      	cmp	r4, #0
   19122:	f000 8096 	beq.w	19252 <rpc_transport_input+0x1e2>
   19126:	6d14      	ldr	r4, [r2, #80]	; 0x50
   19128:	2c00      	cmp	r4, #0
   1912a:	f000 8096 	beq.w	1925a <rpc_transport_input+0x1ea>
   1912e:	6d94      	ldr	r4, [r2, #88]	; 0x58
   19130:	2c00      	cmp	r4, #0
   19132:	f000 8098 	beq.w	19266 <rpc_transport_input+0x1f6>
   19136:	6e14      	ldr	r4, [r2, #96]	; 0x60
   19138:	2c00      	cmp	r4, #0
   1913a:	f000 8098 	beq.w	1926e <rpc_transport_input+0x1fe>
   1913e:	6e94      	ldr	r4, [r2, #104]	; 0x68
   19140:	2c00      	cmp	r4, #0
   19142:	f000 8096 	beq.w	19272 <rpc_transport_input+0x202>
   19146:	6f14      	ldr	r4, [r2, #112]	; 0x70
   19148:	2c00      	cmp	r4, #0
   1914a:	f000 8094 	beq.w	19276 <rpc_transport_input+0x206>
   1914e:	6f94      	ldr	r4, [r2, #120]	; 0x78
   19150:	b10c      	cbz	r4, 19156 <rpc_transport_input+0xe6>
   19152:	2001      	movs	r0, #1
   19154:	bd38      	pop	{r3, r4, r5, pc}
   19156:	240f      	movs	r4, #15
   19158:	eb02 05c4 	add.w	r5, r2, r4, lsl #3
   1915c:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
   19160:	80ab      	strh	r3, [r5, #4]
   19162:	4b49      	ldr	r3, [pc, #292]	; (19288 <rpc_transport_input+0x218>)
   19164:	781a      	ldrb	r2, [r3, #0]
   19166:	2a01      	cmp	r2, #1
   19168:	d053      	beq.n	19212 <rpc_transport_input+0x1a2>
   1916a:	7a1a      	ldrb	r2, [r3, #8]
   1916c:	2a01      	cmp	r2, #1
   1916e:	d041      	beq.n	191f4 <rpc_transport_input+0x184>
   19170:	7c1a      	ldrb	r2, [r3, #16]
   19172:	2a01      	cmp	r2, #1
   19174:	d04f      	beq.n	19216 <rpc_transport_input+0x1a6>
   19176:	7e1a      	ldrb	r2, [r3, #24]
   19178:	2a01      	cmp	r2, #1
   1917a:	d050      	beq.n	1921e <rpc_transport_input+0x1ae>
   1917c:	f893 2020 	ldrb.w	r2, [r3, #32]
   19180:	2a01      	cmp	r2, #1
   19182:	d050      	beq.n	19226 <rpc_transport_input+0x1b6>
   19184:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   19188:	2a01      	cmp	r2, #1
   1918a:	d050      	beq.n	1922e <rpc_transport_input+0x1be>
   1918c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   19190:	2a01      	cmp	r2, #1
   19192:	d03a      	beq.n	1920a <rpc_transport_input+0x19a>
   19194:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   19198:	2a01      	cmp	r2, #1
   1919a:	d04c      	beq.n	19236 <rpc_transport_input+0x1c6>
   1919c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   191a0:	2a01      	cmp	r2, #1
   191a2:	d04a      	beq.n	1923a <rpc_transport_input+0x1ca>
   191a4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   191a8:	2a01      	cmp	r2, #1
   191aa:	d04c      	beq.n	19246 <rpc_transport_input+0x1d6>
   191ac:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   191b0:	2a01      	cmp	r2, #1
   191b2:	d04c      	beq.n	1924e <rpc_transport_input+0x1de>
   191b4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   191b8:	2a01      	cmp	r2, #1
   191ba:	d04c      	beq.n	19256 <rpc_transport_input+0x1e6>
   191bc:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   191c0:	2a01      	cmp	r2, #1
   191c2:	d04c      	beq.n	1925e <rpc_transport_input+0x1ee>
   191c4:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   191c8:	2a01      	cmp	r2, #1
   191ca:	d04a      	beq.n	19262 <rpc_transport_input+0x1f2>
   191cc:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   191d0:	2a01      	cmp	r2, #1
   191d2:	d04a      	beq.n	1926a <rpc_transport_input+0x1fa>
   191d4:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   191d8:	2a01      	cmp	r2, #1
   191da:	d00a      	beq.n	191f2 <rpc_transport_input+0x182>
   191dc:	2c10      	cmp	r4, #16
   191de:	d0b8      	beq.n	19152 <rpc_transport_input+0xe2>
   191e0:	2200      	movs	r2, #0
   191e2:	4b28      	ldr	r3, [pc, #160]	; (19284 <rpc_transport_input+0x214>)
   191e4:	2001      	movs	r0, #1
   191e6:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   191ea:	808a      	strh	r2, [r1, #4]
   191ec:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
   191f0:	bd38      	pop	{r3, r4, r5, pc}
   191f2:	220f      	movs	r2, #15
   191f4:	2402      	movs	r4, #2
   191f6:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
   191fa:	f803 4032 	strb.w	r4, [r3, r2, lsl #3]
   191fe:	6041      	str	r1, [r0, #4]
   19200:	f7f8 fc9c 	bl	11b3c <bsd_os_application_irq_set>
   19204:	e7a5      	b.n	19152 <rpc_transport_input+0xe2>
   19206:	2410      	movs	r4, #16
   19208:	e7ab      	b.n	19162 <rpc_transport_input+0xf2>
   1920a:	2206      	movs	r2, #6
   1920c:	e7f2      	b.n	191f4 <rpc_transport_input+0x184>
   1920e:	2405      	movs	r4, #5
   19210:	e7a2      	b.n	19158 <rpc_transport_input+0xe8>
   19212:	2200      	movs	r2, #0
   19214:	e7ee      	b.n	191f4 <rpc_transport_input+0x184>
   19216:	2202      	movs	r2, #2
   19218:	e7ec      	b.n	191f4 <rpc_transport_input+0x184>
   1921a:	2401      	movs	r4, #1
   1921c:	e79c      	b.n	19158 <rpc_transport_input+0xe8>
   1921e:	2203      	movs	r2, #3
   19220:	e7e8      	b.n	191f4 <rpc_transport_input+0x184>
   19222:	2402      	movs	r4, #2
   19224:	e798      	b.n	19158 <rpc_transport_input+0xe8>
   19226:	2204      	movs	r2, #4
   19228:	e7e4      	b.n	191f4 <rpc_transport_input+0x184>
   1922a:	2403      	movs	r4, #3
   1922c:	e794      	b.n	19158 <rpc_transport_input+0xe8>
   1922e:	2205      	movs	r2, #5
   19230:	e7e0      	b.n	191f4 <rpc_transport_input+0x184>
   19232:	2404      	movs	r4, #4
   19234:	e790      	b.n	19158 <rpc_transport_input+0xe8>
   19236:	2207      	movs	r2, #7
   19238:	e7dc      	b.n	191f4 <rpc_transport_input+0x184>
   1923a:	2208      	movs	r2, #8
   1923c:	e7da      	b.n	191f4 <rpc_transport_input+0x184>
   1923e:	2406      	movs	r4, #6
   19240:	e78a      	b.n	19158 <rpc_transport_input+0xe8>
   19242:	2407      	movs	r4, #7
   19244:	e788      	b.n	19158 <rpc_transport_input+0xe8>
   19246:	2209      	movs	r2, #9
   19248:	e7d4      	b.n	191f4 <rpc_transport_input+0x184>
   1924a:	2408      	movs	r4, #8
   1924c:	e784      	b.n	19158 <rpc_transport_input+0xe8>
   1924e:	220a      	movs	r2, #10
   19250:	e7d0      	b.n	191f4 <rpc_transport_input+0x184>
   19252:	2409      	movs	r4, #9
   19254:	e780      	b.n	19158 <rpc_transport_input+0xe8>
   19256:	220b      	movs	r2, #11
   19258:	e7cc      	b.n	191f4 <rpc_transport_input+0x184>
   1925a:	240a      	movs	r4, #10
   1925c:	e77c      	b.n	19158 <rpc_transport_input+0xe8>
   1925e:	220c      	movs	r2, #12
   19260:	e7c8      	b.n	191f4 <rpc_transport_input+0x184>
   19262:	220d      	movs	r2, #13
   19264:	e7c6      	b.n	191f4 <rpc_transport_input+0x184>
   19266:	240b      	movs	r4, #11
   19268:	e776      	b.n	19158 <rpc_transport_input+0xe8>
   1926a:	220e      	movs	r2, #14
   1926c:	e7c2      	b.n	191f4 <rpc_transport_input+0x184>
   1926e:	240c      	movs	r4, #12
   19270:	e772      	b.n	19158 <rpc_transport_input+0xe8>
   19272:	240d      	movs	r4, #13
   19274:	e770      	b.n	19158 <rpc_transport_input+0xe8>
   19276:	240e      	movs	r4, #14
   19278:	e76e      	b.n	19158 <rpc_transport_input+0xe8>
   1927a:	bf00      	nop
   1927c:	2002097c 	.word	0x2002097c
   19280:	20020a1c 	.word	0x20020a1c
   19284:	20020a34 	.word	0x20020a34
   19288:	20020ab4 	.word	0x20020ab4

0001928c <rpc_transport_register>:
   1928c:	b4f0      	push	{r4, r5, r6, r7}
   1928e:	2900      	cmp	r1, #0
   19290:	d052      	beq.n	19338 <rpc_transport_register+0xac>
   19292:	2800      	cmp	r0, #0
   19294:	d050      	beq.n	19338 <rpc_transport_register+0xac>
   19296:	6883      	ldr	r3, [r0, #8]
   19298:	2b00      	cmp	r3, #0
   1929a:	d04d      	beq.n	19338 <rpc_transport_register+0xac>
   1929c:	6903      	ldr	r3, [r0, #16]
   1929e:	2b00      	cmp	r3, #0
   192a0:	d04a      	beq.n	19338 <rpc_transport_register+0xac>
   192a2:	6843      	ldr	r3, [r0, #4]
   192a4:	2b00      	cmp	r3, #0
   192a6:	d047      	beq.n	19338 <rpc_transport_register+0xac>
   192a8:	68c3      	ldr	r3, [r0, #12]
   192aa:	2b00      	cmp	r3, #0
   192ac:	d044      	beq.n	19338 <rpc_transport_register+0xac>
   192ae:	6803      	ldr	r3, [r0, #0]
   192b0:	2b00      	cmp	r3, #0
   192b2:	d041      	beq.n	19338 <rpc_transport_register+0xac>
   192b4:	6943      	ldr	r3, [r0, #20]
   192b6:	2b00      	cmp	r3, #0
   192b8:	d03e      	beq.n	19338 <rpc_transport_register+0xac>
   192ba:	2601      	movs	r6, #1
   192bc:	2500      	movs	r5, #0
   192be:	4604      	mov	r4, r0
   192c0:	460f      	mov	r7, r1
   192c2:	4a1f      	ldr	r2, [pc, #124]	; (19340 <rpc_transport_register+0xb4>)
   192c4:	4b1f      	ldr	r3, [pc, #124]	; (19344 <rpc_transport_register+0xb8>)
   192c6:	f8df c080 	ldr.w	ip, [pc, #128]	; 19348 <rpc_transport_register+0xbc>
   192ca:	7416      	strb	r6, [r2, #16]
   192cc:	7616      	strb	r6, [r2, #24]
   192ce:	f882 6020 	strb.w	r6, [r2, #32]
   192d2:	f882 6028 	strb.w	r6, [r2, #40]	; 0x28
   192d6:	f882 6030 	strb.w	r6, [r2, #48]	; 0x30
   192da:	f882 6038 	strb.w	r6, [r2, #56]	; 0x38
   192de:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
   192e2:	f882 6048 	strb.w	r6, [r2, #72]	; 0x48
   192e6:	f882 6050 	strb.w	r6, [r2, #80]	; 0x50
   192ea:	f882 6058 	strb.w	r6, [r2, #88]	; 0x58
   192ee:	f882 6060 	strb.w	r6, [r2, #96]	; 0x60
   192f2:	f882 6068 	strb.w	r6, [r2, #104]	; 0x68
   192f6:	f882 6070 	strb.w	r6, [r2, #112]	; 0x70
   192fa:	f882 6078 	strb.w	r6, [r2, #120]	; 0x78
   192fe:	611d      	str	r5, [r3, #16]
   19300:	619d      	str	r5, [r3, #24]
   19302:	621d      	str	r5, [r3, #32]
   19304:	629d      	str	r5, [r3, #40]	; 0x28
   19306:	631d      	str	r5, [r3, #48]	; 0x30
   19308:	639d      	str	r5, [r3, #56]	; 0x38
   1930a:	641d      	str	r5, [r3, #64]	; 0x40
   1930c:	649d      	str	r5, [r3, #72]	; 0x48
   1930e:	651d      	str	r5, [r3, #80]	; 0x50
   19310:	659d      	str	r5, [r3, #88]	; 0x58
   19312:	661d      	str	r5, [r3, #96]	; 0x60
   19314:	669d      	str	r5, [r3, #104]	; 0x68
   19316:	671d      	str	r5, [r3, #112]	; 0x70
   19318:	679d      	str	r5, [r3, #120]	; 0x78
   1931a:	7016      	strb	r6, [r2, #0]
   1931c:	7216      	strb	r6, [r2, #8]
   1931e:	601d      	str	r5, [r3, #0]
   19320:	609d      	str	r5, [r3, #8]
   19322:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   19324:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   19328:	e894 0003 	ldmia.w	r4, {r0, r1}
   1932c:	e88c 0003 	stmia.w	ip, {r0, r1}
   19330:	603e      	str	r6, [r7, #0]
   19332:	4628      	mov	r0, r5
   19334:	bcf0      	pop	{r4, r5, r6, r7}
   19336:	4770      	bx	lr
   19338:	250e      	movs	r5, #14
   1933a:	4628      	mov	r0, r5
   1933c:	bcf0      	pop	{r4, r5, r6, r7}
   1933e:	4770      	bx	lr
   19340:	20020ab4 	.word	0x20020ab4
   19344:	20020a34 	.word	0x20020a34
   19348:	20020a1c 	.word	0x20020a1c

0001934c <rpc_transport_unregister>:
   1934c:	2800      	cmp	r0, #0
   1934e:	d03a      	beq.n	193c6 <rpc_transport_unregister+0x7a>
   19350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19354:	4680      	mov	r8, r0
   19356:	4c1d      	ldr	r4, [pc, #116]	; (193cc <rpc_transport_unregister+0x80>)
   19358:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
   1935c:	68a3      	ldr	r3, [r4, #8]
   1935e:	3410      	adds	r4, #16
   19360:	b103      	cbz	r3, 19364 <rpc_transport_unregister+0x18>
   19362:	4798      	blx	r3
   19364:	42ac      	cmp	r4, r5
   19366:	d1f9      	bne.n	1935c <rpc_transport_unregister+0x10>
   19368:	f04f 0901 	mov.w	r9, #1
   1936c:	2600      	movs	r6, #0
   1936e:	4c18      	ldr	r4, [pc, #96]	; (193d0 <rpc_transport_unregister+0x84>)
   19370:	4d18      	ldr	r5, [pc, #96]	; (193d4 <rpc_transport_unregister+0x88>)
   19372:	f8df a064 	ldr.w	sl, [pc, #100]	; 193d8 <rpc_transport_unregister+0x8c>
   19376:	f104 0780 	add.w	r7, r4, #128	; 0x80
   1937a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1937e:	2b01      	cmp	r3, #1
   19380:	d005      	beq.n	1938e <rpc_transport_unregister+0x42>
   19382:	f8da 300c 	ldr.w	r3, [sl, #12]
   19386:	6820      	ldr	r0, [r4, #0]
   19388:	4798      	blx	r3
   1938a:	f804 9c04 	strb.w	r9, [r4, #-4]
   1938e:	f855 0c04 	ldr.w	r0, [r5, #-4]
   19392:	3408      	adds	r4, #8
   19394:	b128      	cbz	r0, 193a2 <rpc_transport_unregister+0x56>
   19396:	f8da 3010 	ldr.w	r3, [sl, #16]
   1939a:	4798      	blx	r3
   1939c:	802e      	strh	r6, [r5, #0]
   1939e:	f845 6c04 	str.w	r6, [r5, #-4]
   193a2:	42bc      	cmp	r4, r7
   193a4:	f105 0508 	add.w	r5, r5, #8
   193a8:	d1e7      	bne.n	1937a <rpc_transport_unregister+0x2e>
   193aa:	f8d8 0000 	ldr.w	r0, [r8]
   193ae:	2218      	movs	r2, #24
   193b0:	3801      	subs	r0, #1
   193b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   193b6:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
   193ba:	2100      	movs	r1, #0
   193bc:	f004 f985 	bl	1d6ca <memset>
   193c0:	2000      	movs	r0, #0
   193c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   193c6:	200e      	movs	r0, #14
   193c8:	4770      	bx	lr
   193ca:	bf00      	nop
   193cc:	2002097c 	.word	0x2002097c
   193d0:	20020ab8 	.word	0x20020ab8
   193d4:	20020a38 	.word	0x20020a38
   193d8:	20020a1c 	.word	0x20020a1c

000193dc <rpc_message_send>:
   193dc:	b168      	cbz	r0, 193fa <rpc_message_send+0x1e>
   193de:	b171      	cbz	r1, 193fe <rpc_message_send+0x22>
   193e0:	4a09      	ldr	r2, [pc, #36]	; (19408 <rpc_message_send+0x2c>)
   193e2:	6853      	ldr	r3, [r2, #4]
   193e4:	b16b      	cbz	r3, 19402 <rpc_message_send+0x26>
   193e6:	684b      	ldr	r3, [r1, #4]
   193e8:	8008      	strh	r0, [r1, #0]
   193ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   193ee:	f043 0302 	orr.w	r3, r3, #2
   193f2:	6812      	ldr	r2, [r2, #0]
   193f4:	604b      	str	r3, [r1, #4]
   193f6:	4608      	mov	r0, r1
   193f8:	4710      	bx	r2
   193fa:	2007      	movs	r0, #7
   193fc:	4770      	bx	lr
   193fe:	200e      	movs	r0, #14
   19400:	4770      	bx	lr
   19402:	2008      	movs	r0, #8
   19404:	4770      	bx	lr
   19406:	bf00      	nop
   19408:	20020a1c 	.word	0x20020a1c

0001940c <rpc_message_alloc>:
   1940c:	b35a      	cbz	r2, 19466 <rpc_message_alloc+0x5a>
   1940e:	b330      	cbz	r0, 1945e <rpc_message_alloc+0x52>
   19410:	2300      	movs	r3, #0
   19412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19416:	4f15      	ldr	r7, [pc, #84]	; (1946c <rpc_message_alloc+0x60>)
   19418:	6013      	str	r3, [r2, #0]
   1941a:	687b      	ldr	r3, [r7, #4]
   1941c:	b30b      	cbz	r3, 19462 <rpc_message_alloc+0x56>
   1941e:	4615      	mov	r5, r2
   19420:	460c      	mov	r4, r1
   19422:	4606      	mov	r6, r0
   19424:	b959      	cbnz	r1, 1943e <rpc_message_alloc+0x32>
   19426:	4798      	blx	r3
   19428:	4603      	mov	r3, r0
   1942a:	b1a8      	cbz	r0, 19458 <rpc_message_alloc+0x4c>
   1942c:	46a0      	mov	r8, r4
   1942e:	60dc      	str	r4, [r3, #12]
   19430:	f8c3 8008 	str.w	r8, [r3, #8]
   19434:	801e      	strh	r6, [r3, #0]
   19436:	602b      	str	r3, [r5, #0]
   19438:	2000      	movs	r0, #0
   1943a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1943e:	68bb      	ldr	r3, [r7, #8]
   19440:	4608      	mov	r0, r1
   19442:	4798      	blx	r3
   19444:	4680      	mov	r8, r0
   19446:	b138      	cbz	r0, 19458 <rpc_message_alloc+0x4c>
   19448:	687b      	ldr	r3, [r7, #4]
   1944a:	4798      	blx	r3
   1944c:	4603      	mov	r3, r0
   1944e:	2800      	cmp	r0, #0
   19450:	d1ed      	bne.n	1942e <rpc_message_alloc+0x22>
   19452:	693b      	ldr	r3, [r7, #16]
   19454:	4640      	mov	r0, r8
   19456:	4798      	blx	r3
   19458:	2004      	movs	r0, #4
   1945a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1945e:	2007      	movs	r0, #7
   19460:	4770      	bx	lr
   19462:	2008      	movs	r0, #8
   19464:	e7f9      	b.n	1945a <rpc_message_alloc+0x4e>
   19466:	200e      	movs	r0, #14
   19468:	4770      	bx	lr
   1946a:	bf00      	nop
   1946c:	20020a1c 	.word	0x20020a1c

00019470 <rpc_message_free>:
   19470:	2800      	cmp	r0, #0
   19472:	f000 808c 	beq.w	1958e <rpc_message_free+0x11e>
   19476:	2900      	cmp	r1, #0
   19478:	f000 80e9 	beq.w	1964e <rpc_message_free+0x1de>
   1947c:	b538      	push	{r3, r4, r5, lr}
   1947e:	4a83      	ldr	r2, [pc, #524]	; (1968c <rpc_message_free+0x21c>)
   19480:	6853      	ldr	r3, [r2, #4]
   19482:	2b00      	cmp	r3, #0
   19484:	f000 8085 	beq.w	19592 <rpc_message_free+0x122>
   19488:	4c81      	ldr	r4, [pc, #516]	; (19690 <rpc_message_free+0x220>)
   1948a:	4608      	mov	r0, r1
   1948c:	6863      	ldr	r3, [r4, #4]
   1948e:	4299      	cmp	r1, r3
   19490:	f000 8085 	beq.w	1959e <rpc_message_free+0x12e>
   19494:	68e3      	ldr	r3, [r4, #12]
   19496:	4298      	cmp	r0, r3
   19498:	f000 808e 	beq.w	195b8 <rpc_message_free+0x148>
   1949c:	6963      	ldr	r3, [r4, #20]
   1949e:	4298      	cmp	r0, r3
   194a0:	f000 8090 	beq.w	195c4 <rpc_message_free+0x154>
   194a4:	69e3      	ldr	r3, [r4, #28]
   194a6:	4298      	cmp	r0, r3
   194a8:	f000 8092 	beq.w	195d0 <rpc_message_free+0x160>
   194ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   194ae:	4298      	cmp	r0, r3
   194b0:	f000 8095 	beq.w	195de <rpc_message_free+0x16e>
   194b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   194b6:	4298      	cmp	r0, r3
   194b8:	f000 8098 	beq.w	195ec <rpc_message_free+0x17c>
   194bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   194be:	4298      	cmp	r0, r3
   194c0:	f000 809b 	beq.w	195fa <rpc_message_free+0x18a>
   194c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   194c6:	4298      	cmp	r0, r3
   194c8:	f000 809e 	beq.w	19608 <rpc_message_free+0x198>
   194cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   194ce:	4298      	cmp	r0, r3
   194d0:	f000 80a1 	beq.w	19616 <rpc_message_free+0x1a6>
   194d4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   194d6:	4298      	cmp	r0, r3
   194d8:	f000 80a4 	beq.w	19624 <rpc_message_free+0x1b4>
   194dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   194de:	4298      	cmp	r0, r3
   194e0:	f000 80a7 	beq.w	19632 <rpc_message_free+0x1c2>
   194e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   194e6:	4298      	cmp	r0, r3
   194e8:	f000 80aa 	beq.w	19640 <rpc_message_free+0x1d0>
   194ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
   194ee:	4298      	cmp	r0, r3
   194f0:	f000 80af 	beq.w	19652 <rpc_message_free+0x1e2>
   194f4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   194f6:	4298      	cmp	r0, r3
   194f8:	f000 80b2 	beq.w	19660 <rpc_message_free+0x1f0>
   194fc:	6f63      	ldr	r3, [r4, #116]	; 0x74
   194fe:	4298      	cmp	r0, r3
   19500:	f000 80b5 	beq.w	1966e <rpc_message_free+0x1fe>
   19504:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   19506:	4283      	cmp	r3, r0
   19508:	f000 80b8 	beq.w	1967c <rpc_message_free+0x20c>
   1950c:	68d3      	ldr	r3, [r2, #12]
   1950e:	4798      	blx	r3
   19510:	7823      	ldrb	r3, [r4, #0]
   19512:	2b04      	cmp	r3, #4
   19514:	d03f      	beq.n	19596 <rpc_message_free+0x126>
   19516:	7a23      	ldrb	r3, [r4, #8]
   19518:	2b04      	cmp	r3, #4
   1951a:	d03c      	beq.n	19596 <rpc_message_free+0x126>
   1951c:	7c23      	ldrb	r3, [r4, #16]
   1951e:	2b04      	cmp	r3, #4
   19520:	d039      	beq.n	19596 <rpc_message_free+0x126>
   19522:	7e23      	ldrb	r3, [r4, #24]
   19524:	2b04      	cmp	r3, #4
   19526:	d036      	beq.n	19596 <rpc_message_free+0x126>
   19528:	f894 3020 	ldrb.w	r3, [r4, #32]
   1952c:	2b04      	cmp	r3, #4
   1952e:	d032      	beq.n	19596 <rpc_message_free+0x126>
   19530:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   19534:	2b04      	cmp	r3, #4
   19536:	d02e      	beq.n	19596 <rpc_message_free+0x126>
   19538:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1953c:	2b04      	cmp	r3, #4
   1953e:	d02a      	beq.n	19596 <rpc_message_free+0x126>
   19540:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   19544:	2b04      	cmp	r3, #4
   19546:	d026      	beq.n	19596 <rpc_message_free+0x126>
   19548:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1954c:	2b04      	cmp	r3, #4
   1954e:	d022      	beq.n	19596 <rpc_message_free+0x126>
   19550:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   19554:	2b04      	cmp	r3, #4
   19556:	d01e      	beq.n	19596 <rpc_message_free+0x126>
   19558:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   1955c:	2b04      	cmp	r3, #4
   1955e:	d01a      	beq.n	19596 <rpc_message_free+0x126>
   19560:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   19564:	2b04      	cmp	r3, #4
   19566:	d016      	beq.n	19596 <rpc_message_free+0x126>
   19568:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   1956c:	2b04      	cmp	r3, #4
   1956e:	d012      	beq.n	19596 <rpc_message_free+0x126>
   19570:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   19574:	2b04      	cmp	r3, #4
   19576:	d00e      	beq.n	19596 <rpc_message_free+0x126>
   19578:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1957c:	2b04      	cmp	r3, #4
   1957e:	d00a      	beq.n	19596 <rpc_message_free+0x126>
   19580:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   19584:	2b04      	cmp	r3, #4
   19586:	bf18      	it	ne
   19588:	2000      	movne	r0, #0
   1958a:	d004      	beq.n	19596 <rpc_message_free+0x126>
   1958c:	bd38      	pop	{r3, r4, r5, pc}
   1958e:	2007      	movs	r0, #7
   19590:	4770      	bx	lr
   19592:	2008      	movs	r0, #8
   19594:	bd38      	pop	{r3, r4, r5, pc}
   19596:	f7f8 fad1 	bl	11b3c <bsd_os_application_irq_set>
   1959a:	2000      	movs	r0, #0
   1959c:	bd38      	pop	{r3, r4, r5, pc}
   1959e:	7821      	ldrb	r1, [r4, #0]
   195a0:	2903      	cmp	r1, #3
   195a2:	f47f af77 	bne.w	19494 <rpc_message_free+0x24>
   195a6:	2100      	movs	r1, #0
   195a8:	2501      	movs	r5, #1
   195aa:	4618      	mov	r0, r3
   195ac:	68d2      	ldr	r2, [r2, #12]
   195ae:	f804 5031 	strb.w	r5, [r4, r1, lsl #3]
   195b2:	4790      	blx	r2
   195b4:	2000      	movs	r0, #0
   195b6:	bd38      	pop	{r3, r4, r5, pc}
   195b8:	7a21      	ldrb	r1, [r4, #8]
   195ba:	2903      	cmp	r1, #3
   195bc:	f47f af6e 	bne.w	1949c <rpc_message_free+0x2c>
   195c0:	2101      	movs	r1, #1
   195c2:	e7f1      	b.n	195a8 <rpc_message_free+0x138>
   195c4:	7c21      	ldrb	r1, [r4, #16]
   195c6:	2903      	cmp	r1, #3
   195c8:	f47f af6c 	bne.w	194a4 <rpc_message_free+0x34>
   195cc:	2102      	movs	r1, #2
   195ce:	e7eb      	b.n	195a8 <rpc_message_free+0x138>
   195d0:	7e21      	ldrb	r1, [r4, #24]
   195d2:	2903      	cmp	r1, #3
   195d4:	d0e8      	beq.n	195a8 <rpc_message_free+0x138>
   195d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   195d8:	4298      	cmp	r0, r3
   195da:	f47f af6b 	bne.w	194b4 <rpc_message_free+0x44>
   195de:	f894 1020 	ldrb.w	r1, [r4, #32]
   195e2:	2903      	cmp	r1, #3
   195e4:	f47f af66 	bne.w	194b4 <rpc_message_free+0x44>
   195e8:	2104      	movs	r1, #4
   195ea:	e7dd      	b.n	195a8 <rpc_message_free+0x138>
   195ec:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   195f0:	2903      	cmp	r1, #3
   195f2:	f47f af63 	bne.w	194bc <rpc_message_free+0x4c>
   195f6:	2105      	movs	r1, #5
   195f8:	e7d6      	b.n	195a8 <rpc_message_free+0x138>
   195fa:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   195fe:	2903      	cmp	r1, #3
   19600:	f47f af60 	bne.w	194c4 <rpc_message_free+0x54>
   19604:	2106      	movs	r1, #6
   19606:	e7cf      	b.n	195a8 <rpc_message_free+0x138>
   19608:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   1960c:	2903      	cmp	r1, #3
   1960e:	f47f af5d 	bne.w	194cc <rpc_message_free+0x5c>
   19612:	2107      	movs	r1, #7
   19614:	e7c8      	b.n	195a8 <rpc_message_free+0x138>
   19616:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   1961a:	2903      	cmp	r1, #3
   1961c:	f47f af5a 	bne.w	194d4 <rpc_message_free+0x64>
   19620:	2108      	movs	r1, #8
   19622:	e7c1      	b.n	195a8 <rpc_message_free+0x138>
   19624:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
   19628:	2903      	cmp	r1, #3
   1962a:	f47f af57 	bne.w	194dc <rpc_message_free+0x6c>
   1962e:	2109      	movs	r1, #9
   19630:	e7ba      	b.n	195a8 <rpc_message_free+0x138>
   19632:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   19636:	2903      	cmp	r1, #3
   19638:	f47f af54 	bne.w	194e4 <rpc_message_free+0x74>
   1963c:	210a      	movs	r1, #10
   1963e:	e7b3      	b.n	195a8 <rpc_message_free+0x138>
   19640:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
   19644:	2903      	cmp	r1, #3
   19646:	f47f af51 	bne.w	194ec <rpc_message_free+0x7c>
   1964a:	210b      	movs	r1, #11
   1964c:	e7ac      	b.n	195a8 <rpc_message_free+0x138>
   1964e:	200e      	movs	r0, #14
   19650:	4770      	bx	lr
   19652:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   19656:	2903      	cmp	r1, #3
   19658:	f47f af4c 	bne.w	194f4 <rpc_message_free+0x84>
   1965c:	210c      	movs	r1, #12
   1965e:	e7a3      	b.n	195a8 <rpc_message_free+0x138>
   19660:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   19664:	2903      	cmp	r1, #3
   19666:	f47f af49 	bne.w	194fc <rpc_message_free+0x8c>
   1966a:	210d      	movs	r1, #13
   1966c:	e79c      	b.n	195a8 <rpc_message_free+0x138>
   1966e:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
   19672:	2903      	cmp	r1, #3
   19674:	f47f af46 	bne.w	19504 <rpc_message_free+0x94>
   19678:	210e      	movs	r1, #14
   1967a:	e795      	b.n	195a8 <rpc_message_free+0x138>
   1967c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   19680:	2b03      	cmp	r3, #3
   19682:	f47f af43 	bne.w	1950c <rpc_message_free+0x9c>
   19686:	4603      	mov	r3, r0
   19688:	210f      	movs	r1, #15
   1968a:	e78d      	b.n	195a8 <rpc_message_free+0x138>
   1968c:	20020a1c 	.word	0x20020a1c
   19690:	20020ab4 	.word	0x20020ab4

00019694 <rpc_message_data_free>:
   19694:	2800      	cmp	r0, #0
   19696:	f000 8091 	beq.w	197bc <rpc_message_data_free+0x128>
   1969a:	2900      	cmp	r1, #0
   1969c:	f000 80e4 	beq.w	19868 <rpc_message_data_free+0x1d4>
   196a0:	b538      	push	{r3, r4, r5, lr}
   196a2:	4a81      	ldr	r2, [pc, #516]	; (198a8 <rpc_message_data_free+0x214>)
   196a4:	6853      	ldr	r3, [r2, #4]
   196a6:	2b00      	cmp	r3, #0
   196a8:	f000 808a 	beq.w	197c0 <rpc_message_data_free+0x12c>
   196ac:	4b7f      	ldr	r3, [pc, #508]	; (198ac <rpc_message_data_free+0x218>)
   196ae:	681c      	ldr	r4, [r3, #0]
   196b0:	42a1      	cmp	r1, r4
   196b2:	f000 8087 	beq.w	197c4 <rpc_message_data_free+0x130>
   196b6:	689c      	ldr	r4, [r3, #8]
   196b8:	42a1      	cmp	r1, r4
   196ba:	f000 808f 	beq.w	197dc <rpc_message_data_free+0x148>
   196be:	691c      	ldr	r4, [r3, #16]
   196c0:	42a1      	cmp	r1, r4
   196c2:	f000 8091 	beq.w	197e8 <rpc_message_data_free+0x154>
   196c6:	699c      	ldr	r4, [r3, #24]
   196c8:	42a1      	cmp	r1, r4
   196ca:	f000 8093 	beq.w	197f4 <rpc_message_data_free+0x160>
   196ce:	6a1c      	ldr	r4, [r3, #32]
   196d0:	42a1      	cmp	r1, r4
   196d2:	f000 8095 	beq.w	19800 <rpc_message_data_free+0x16c>
   196d6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   196d8:	42a1      	cmp	r1, r4
   196da:	f000 8097 	beq.w	1980c <rpc_message_data_free+0x178>
   196de:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   196e0:	42a1      	cmp	r1, r4
   196e2:	f000 8099 	beq.w	19818 <rpc_message_data_free+0x184>
   196e6:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   196e8:	42a1      	cmp	r1, r4
   196ea:	f000 809b 	beq.w	19824 <rpc_message_data_free+0x190>
   196ee:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   196f0:	42a1      	cmp	r1, r4
   196f2:	f000 809d 	beq.w	19830 <rpc_message_data_free+0x19c>
   196f6:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   196f8:	42a1      	cmp	r1, r4
   196fa:	f000 80a0 	beq.w	1983e <rpc_message_data_free+0x1aa>
   196fe:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   19700:	42a1      	cmp	r1, r4
   19702:	f000 80a3 	beq.w	1984c <rpc_message_data_free+0x1b8>
   19706:	6d9c      	ldr	r4, [r3, #88]	; 0x58
   19708:	42a1      	cmp	r1, r4
   1970a:	f000 80a6 	beq.w	1985a <rpc_message_data_free+0x1c6>
   1970e:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   19710:	42a1      	cmp	r1, r4
   19712:	f000 80ab 	beq.w	1986c <rpc_message_data_free+0x1d8>
   19716:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   19718:	42a1      	cmp	r1, r4
   1971a:	f000 80ae 	beq.w	1987a <rpc_message_data_free+0x1e6>
   1971e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   19720:	42a1      	cmp	r1, r4
   19722:	f000 80b1 	beq.w	19888 <rpc_message_data_free+0x1f4>
   19726:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   19728:	428c      	cmp	r4, r1
   1972a:	f000 80b4 	beq.w	19896 <rpc_message_data_free+0x202>
   1972e:	6913      	ldr	r3, [r2, #16]
   19730:	4608      	mov	r0, r1
   19732:	4798      	blx	r3
   19734:	4b5e      	ldr	r3, [pc, #376]	; (198b0 <rpc_message_data_free+0x21c>)
   19736:	781a      	ldrb	r2, [r3, #0]
   19738:	2a04      	cmp	r2, #4
   1973a:	d03b      	beq.n	197b4 <rpc_message_data_free+0x120>
   1973c:	7a1a      	ldrb	r2, [r3, #8]
   1973e:	2a04      	cmp	r2, #4
   19740:	d038      	beq.n	197b4 <rpc_message_data_free+0x120>
   19742:	7c1a      	ldrb	r2, [r3, #16]
   19744:	2a04      	cmp	r2, #4
   19746:	d035      	beq.n	197b4 <rpc_message_data_free+0x120>
   19748:	7e1a      	ldrb	r2, [r3, #24]
   1974a:	2a04      	cmp	r2, #4
   1974c:	d032      	beq.n	197b4 <rpc_message_data_free+0x120>
   1974e:	f893 2020 	ldrb.w	r2, [r3, #32]
   19752:	2a04      	cmp	r2, #4
   19754:	d02e      	beq.n	197b4 <rpc_message_data_free+0x120>
   19756:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   1975a:	2a04      	cmp	r2, #4
   1975c:	d02a      	beq.n	197b4 <rpc_message_data_free+0x120>
   1975e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   19762:	2a04      	cmp	r2, #4
   19764:	d026      	beq.n	197b4 <rpc_message_data_free+0x120>
   19766:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1976a:	2a04      	cmp	r2, #4
   1976c:	d022      	beq.n	197b4 <rpc_message_data_free+0x120>
   1976e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   19772:	2a04      	cmp	r2, #4
   19774:	d01e      	beq.n	197b4 <rpc_message_data_free+0x120>
   19776:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   1977a:	2a04      	cmp	r2, #4
   1977c:	d01a      	beq.n	197b4 <rpc_message_data_free+0x120>
   1977e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   19782:	2a04      	cmp	r2, #4
   19784:	d016      	beq.n	197b4 <rpc_message_data_free+0x120>
   19786:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   1978a:	2a04      	cmp	r2, #4
   1978c:	d012      	beq.n	197b4 <rpc_message_data_free+0x120>
   1978e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   19792:	2a04      	cmp	r2, #4
   19794:	d00e      	beq.n	197b4 <rpc_message_data_free+0x120>
   19796:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   1979a:	2a04      	cmp	r2, #4
   1979c:	d00a      	beq.n	197b4 <rpc_message_data_free+0x120>
   1979e:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   197a2:	2a04      	cmp	r2, #4
   197a4:	d006      	beq.n	197b4 <rpc_message_data_free+0x120>
   197a6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   197aa:	2b04      	cmp	r3, #4
   197ac:	bf18      	it	ne
   197ae:	2000      	movne	r0, #0
   197b0:	d000      	beq.n	197b4 <rpc_message_data_free+0x120>
   197b2:	bd38      	pop	{r3, r4, r5, pc}
   197b4:	f7f8 f9c2 	bl	11b3c <bsd_os_application_irq_set>
   197b8:	2000      	movs	r0, #0
   197ba:	bd38      	pop	{r3, r4, r5, pc}
   197bc:	2007      	movs	r0, #7
   197be:	4770      	bx	lr
   197c0:	2008      	movs	r0, #8
   197c2:	bd38      	pop	{r3, r4, r5, pc}
   197c4:	889c      	ldrh	r4, [r3, #4]
   197c6:	4284      	cmp	r4, r0
   197c8:	f47f af75 	bne.w	196b6 <rpc_message_data_free+0x22>
   197cc:	2400      	movs	r4, #0
   197ce:	2000      	movs	r0, #0
   197d0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   197d4:	f843 0034 	str.w	r0, [r3, r4, lsl #3]
   197d8:	80a8      	strh	r0, [r5, #4]
   197da:	e7a8      	b.n	1972e <rpc_message_data_free+0x9a>
   197dc:	899c      	ldrh	r4, [r3, #12]
   197de:	4284      	cmp	r4, r0
   197e0:	f47f af6d 	bne.w	196be <rpc_message_data_free+0x2a>
   197e4:	2401      	movs	r4, #1
   197e6:	e7f2      	b.n	197ce <rpc_message_data_free+0x13a>
   197e8:	8a9c      	ldrh	r4, [r3, #20]
   197ea:	4284      	cmp	r4, r0
   197ec:	f47f af6b 	bne.w	196c6 <rpc_message_data_free+0x32>
   197f0:	2402      	movs	r4, #2
   197f2:	e7ec      	b.n	197ce <rpc_message_data_free+0x13a>
   197f4:	8b9c      	ldrh	r4, [r3, #28]
   197f6:	4284      	cmp	r4, r0
   197f8:	f47f af69 	bne.w	196ce <rpc_message_data_free+0x3a>
   197fc:	2403      	movs	r4, #3
   197fe:	e7e6      	b.n	197ce <rpc_message_data_free+0x13a>
   19800:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
   19802:	4284      	cmp	r4, r0
   19804:	f47f af67 	bne.w	196d6 <rpc_message_data_free+0x42>
   19808:	2404      	movs	r4, #4
   1980a:	e7e0      	b.n	197ce <rpc_message_data_free+0x13a>
   1980c:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
   1980e:	4284      	cmp	r4, r0
   19810:	f47f af65 	bne.w	196de <rpc_message_data_free+0x4a>
   19814:	2405      	movs	r4, #5
   19816:	e7da      	b.n	197ce <rpc_message_data_free+0x13a>
   19818:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
   1981a:	4284      	cmp	r4, r0
   1981c:	f47f af63 	bne.w	196e6 <rpc_message_data_free+0x52>
   19820:	2406      	movs	r4, #6
   19822:	e7d4      	b.n	197ce <rpc_message_data_free+0x13a>
   19824:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   19826:	4284      	cmp	r4, r0
   19828:	f47f af61 	bne.w	196ee <rpc_message_data_free+0x5a>
   1982c:	2407      	movs	r4, #7
   1982e:	e7ce      	b.n	197ce <rpc_message_data_free+0x13a>
   19830:	f8b3 4044 	ldrh.w	r4, [r3, #68]	; 0x44
   19834:	4284      	cmp	r4, r0
   19836:	f47f af5e 	bne.w	196f6 <rpc_message_data_free+0x62>
   1983a:	2408      	movs	r4, #8
   1983c:	e7c7      	b.n	197ce <rpc_message_data_free+0x13a>
   1983e:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
   19842:	4284      	cmp	r4, r0
   19844:	f47f af5b 	bne.w	196fe <rpc_message_data_free+0x6a>
   19848:	2409      	movs	r4, #9
   1984a:	e7c0      	b.n	197ce <rpc_message_data_free+0x13a>
   1984c:	f8b3 4054 	ldrh.w	r4, [r3, #84]	; 0x54
   19850:	4284      	cmp	r4, r0
   19852:	f47f af58 	bne.w	19706 <rpc_message_data_free+0x72>
   19856:	240a      	movs	r4, #10
   19858:	e7b9      	b.n	197ce <rpc_message_data_free+0x13a>
   1985a:	f8b3 405c 	ldrh.w	r4, [r3, #92]	; 0x5c
   1985e:	4284      	cmp	r4, r0
   19860:	f47f af55 	bne.w	1970e <rpc_message_data_free+0x7a>
   19864:	240b      	movs	r4, #11
   19866:	e7b2      	b.n	197ce <rpc_message_data_free+0x13a>
   19868:	200e      	movs	r0, #14
   1986a:	4770      	bx	lr
   1986c:	f8b3 4064 	ldrh.w	r4, [r3, #100]	; 0x64
   19870:	4284      	cmp	r4, r0
   19872:	f47f af50 	bne.w	19716 <rpc_message_data_free+0x82>
   19876:	240c      	movs	r4, #12
   19878:	e7a9      	b.n	197ce <rpc_message_data_free+0x13a>
   1987a:	f8b3 406c 	ldrh.w	r4, [r3, #108]	; 0x6c
   1987e:	4284      	cmp	r4, r0
   19880:	f47f af4d 	bne.w	1971e <rpc_message_data_free+0x8a>
   19884:	240d      	movs	r4, #13
   19886:	e7a2      	b.n	197ce <rpc_message_data_free+0x13a>
   19888:	f8b3 4074 	ldrh.w	r4, [r3, #116]	; 0x74
   1988c:	4284      	cmp	r4, r0
   1988e:	f47f af4a 	bne.w	19726 <rpc_message_data_free+0x92>
   19892:	240e      	movs	r4, #14
   19894:	e79b      	b.n	197ce <rpc_message_data_free+0x13a>
   19896:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
   1989a:	4284      	cmp	r4, r0
   1989c:	bf08      	it	eq
   1989e:	240f      	moveq	r4, #15
   198a0:	f47f af45 	bne.w	1972e <rpc_message_data_free+0x9a>
   198a4:	e793      	b.n	197ce <rpc_message_data_free+0x13a>
   198a6:	bf00      	nop
   198a8:	20020a1c 	.word	0x20020a1c
   198ac:	20020a34 	.word	0x20020a34
   198b0:	20020ab4 	.word	0x20020ab4

000198b4 <packet_free_cb>:
   198b4:	b510      	push	{r4, lr}
   198b6:	4604      	mov	r4, r0
   198b8:	b118      	cbz	r0, 198c2 <packet_free_cb+0xe>
   198ba:	6800      	ldr	r0, [r0, #0]
   198bc:	b108      	cbz	r0, 198c2 <packet_free_cb+0xe>
   198be:	f001 f829 	bl	1a914 <rpc_gnss_client_data_free>
   198c2:	68a0      	ldr	r0, [r4, #8]
   198c4:	b118      	cbz	r0, 198ce <packet_free_cb+0x1a>
   198c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   198ca:	f7fa b93b 	b.w	13b44 <nrf_free>
   198ce:	bd10      	pop	{r4, pc}

000198d0 <rpc_gnss_event_handler>:
   198d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   198d4:	4b64      	ldr	r3, [pc, #400]	; (19a68 <rpc_gnss_event_handler+0x198>)
   198d6:	4606      	mov	r6, r0
   198d8:	6800      	ldr	r0, [r0, #0]
   198da:	881b      	ldrh	r3, [r3, #0]
   198dc:	6802      	ldr	r2, [r0, #0]
   198de:	4f63      	ldr	r7, [pc, #396]	; (19a6c <rpc_gnss_event_handler+0x19c>)
   198e0:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   198e4:	b084      	sub	sp, #16
   198e6:	460d      	mov	r5, r1
   198e8:	6038      	str	r0, [r7, #0]
   198ea:	d038      	beq.n	1995e <rpc_gnss_event_handler+0x8e>
   198ec:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   198f0:	33ff      	adds	r3, #255	; 0xff
   198f2:	b29b      	uxth	r3, r3
   198f4:	2b02      	cmp	r3, #2
   198f6:	d810      	bhi.n	1991a <rpc_gnss_event_handler+0x4a>
   198f8:	4c5d      	ldr	r4, [pc, #372]	; (19a70 <rpc_gnss_event_handler+0x1a0>)
   198fa:	6823      	ldr	r3, [r4, #0]
   198fc:	075a      	lsls	r2, r3, #29
   198fe:	d410      	bmi.n	19922 <rpc_gnss_event_handler+0x52>
   19900:	6823      	ldr	r3, [r4, #0]
   19902:	079b      	lsls	r3, r3, #30
   19904:	d503      	bpl.n	1990e <rpc_gnss_event_handler+0x3e>
   19906:	f244 0303 	movw	r3, #16387	; 0x4003
   1990a:	429d      	cmp	r5, r3
   1990c:	d009      	beq.n	19922 <rpc_gnss_event_handler+0x52>
   1990e:	6830      	ldr	r0, [r6, #0]
   19910:	b118      	cbz	r0, 1991a <rpc_gnss_event_handler+0x4a>
   19912:	f000 ffff 	bl	1a914 <rpc_gnss_client_data_free>
   19916:	2300      	movs	r3, #0
   19918:	603b      	str	r3, [r7, #0]
   1991a:	2000      	movs	r0, #0
   1991c:	b004      	add	sp, #16
   1991e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19922:	2002      	movs	r0, #2
   19924:	f7fa f904 	bl	13b30 <nrf_malloc>
   19928:	4680      	mov	r8, r0
   1992a:	2800      	cmp	r0, #0
   1992c:	f000 8093 	beq.w	19a56 <rpc_gnss_event_handler+0x186>
   19930:	2302      	movs	r3, #2
   19932:	8005      	strh	r5, [r0, #0]
   19934:	6831      	ldr	r1, [r6, #0]
   19936:	6872      	ldr	r2, [r6, #4]
   19938:	484e      	ldr	r0, [pc, #312]	; (19a74 <rpc_gnss_event_handler+0x1a4>)
   1993a:	e88d 0106 	stmia.w	sp, {r1, r2, r8}
   1993e:	6800      	ldr	r0, [r0, #0]
   19940:	9303      	str	r3, [sp, #12]
   19942:	6803      	ldr	r3, [r0, #0]
   19944:	4669      	mov	r1, sp
   19946:	685b      	ldr	r3, [r3, #4]
   19948:	4798      	blx	r3
   1994a:	3001      	adds	r0, #1
   1994c:	d070      	beq.n	19a30 <rpc_gnss_event_handler+0x160>
   1994e:	2000      	movs	r0, #0
   19950:	6823      	ldr	r3, [r4, #0]
   19952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   19956:	6023      	str	r3, [r4, #0]
   19958:	b004      	add	sp, #16
   1995a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1995e:	4c44      	ldr	r4, [pc, #272]	; (19a70 <rpc_gnss_event_handler+0x1a0>)
   19960:	6823      	ldr	r3, [r4, #0]
   19962:	01d9      	lsls	r1, r3, #7
   19964:	d523      	bpl.n	199ae <rpc_gnss_event_handler+0xde>
   19966:	f242 1302 	movw	r3, #8450	; 0x2102
   1996a:	429d      	cmp	r5, r3
   1996c:	d11f      	bne.n	199ae <rpc_gnss_event_handler+0xde>
   1996e:	6843      	ldr	r3, [r0, #4]
   19970:	b91b      	cbnz	r3, 1997a <rpc_gnss_event_handler+0xaa>
   19972:	6823      	ldr	r3, [r4, #0]
   19974:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   19978:	6023      	str	r3, [r4, #0]
   1997a:	6823      	ldr	r3, [r4, #0]
   1997c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   19980:	6023      	str	r3, [r4, #0]
   19982:	6823      	ldr	r3, [r4, #0]
   19984:	025a      	lsls	r2, r3, #9
   19986:	d430      	bmi.n	199ea <rpc_gnss_event_handler+0x11a>
   19988:	f242 0305 	movw	r3, #8197	; 0x2005
   1998c:	429d      	cmp	r5, r3
   1998e:	d12c      	bne.n	199ea <rpc_gnss_event_handler+0x11a>
   19990:	6823      	ldr	r3, [r4, #0]
   19992:	0299      	lsls	r1, r3, #10
   19994:	d529      	bpl.n	199ea <rpc_gnss_event_handler+0x11a>
   19996:	6843      	ldr	r3, [r0, #4]
   19998:	2b00      	cmp	r3, #0
   1999a:	d157      	bne.n	19a4c <rpc_gnss_event_handler+0x17c>
   1999c:	6823      	ldr	r3, [r4, #0]
   1999e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   199a2:	6023      	str	r3, [r4, #0]
   199a4:	6823      	ldr	r3, [r4, #0]
   199a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   199aa:	6023      	str	r3, [r4, #0]
   199ac:	e01d      	b.n	199ea <rpc_gnss_event_handler+0x11a>
   199ae:	6823      	ldr	r3, [r4, #0]
   199b0:	025b      	lsls	r3, r3, #9
   199b2:	d50e      	bpl.n	199d2 <rpc_gnss_event_handler+0x102>
   199b4:	f242 1303 	movw	r3, #8451	; 0x2103
   199b8:	429d      	cmp	r5, r3
   199ba:	d10a      	bne.n	199d2 <rpc_gnss_event_handler+0x102>
   199bc:	6843      	ldr	r3, [r0, #4]
   199be:	b91b      	cbnz	r3, 199c8 <rpc_gnss_event_handler+0xf8>
   199c0:	6823      	ldr	r3, [r4, #0]
   199c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   199c6:	6023      	str	r3, [r4, #0]
   199c8:	6823      	ldr	r3, [r4, #0]
   199ca:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   199ce:	6023      	str	r3, [r4, #0]
   199d0:	e00b      	b.n	199ea <rpc_gnss_event_handler+0x11a>
   199d2:	f242 0301 	movw	r3, #8193	; 0x2001
   199d6:	429d      	cmp	r5, r3
   199d8:	d10c      	bne.n	199f4 <rpc_gnss_event_handler+0x124>
   199da:	6843      	ldr	r3, [r0, #4]
   199dc:	b92b      	cbnz	r3, 199ea <rpc_gnss_event_handler+0x11a>
   199de:	6823      	ldr	r3, [r4, #0]
   199e0:	0c1b      	lsrs	r3, r3, #16
   199e2:	041b      	lsls	r3, r3, #16
   199e4:	f043 0302 	orr.w	r3, r3, #2
   199e8:	6023      	str	r3, [r4, #0]
   199ea:	f000 ff93 	bl	1a914 <rpc_gnss_client_data_free>
   199ee:	2300      	movs	r3, #0
   199f0:	603b      	str	r3, [r7, #0]
   199f2:	e77b      	b.n	198ec <rpc_gnss_event_handler+0x1c>
   199f4:	f242 0304 	movw	r3, #8196	; 0x2004
   199f8:	429d      	cmp	r5, r3
   199fa:	d1c5      	bne.n	19988 <rpc_gnss_event_handler+0xb8>
   199fc:	6843      	ldr	r3, [r0, #4]
   199fe:	b993      	cbnz	r3, 19a26 <rpc_gnss_event_handler+0x156>
   19a00:	6823      	ldr	r3, [r4, #0]
   19a02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   19a06:	6023      	str	r3, [r4, #0]
   19a08:	6823      	ldr	r3, [r4, #0]
   19a0a:	b29b      	uxth	r3, r3
   19a0c:	2b03      	cmp	r3, #3
   19a0e:	6823      	ldr	r3, [r4, #0]
   19a10:	d016      	beq.n	19a40 <rpc_gnss_event_handler+0x170>
   19a12:	b29b      	uxth	r3, r3
   19a14:	2b04      	cmp	r3, #4
   19a16:	d1d7      	bne.n	199c8 <rpc_gnss_event_handler+0xf8>
   19a18:	6823      	ldr	r3, [r4, #0]
   19a1a:	0c1b      	lsrs	r3, r3, #16
   19a1c:	041b      	lsls	r3, r3, #16
   19a1e:	f043 0302 	orr.w	r3, r3, #2
   19a22:	6023      	str	r3, [r4, #0]
   19a24:	e7d0      	b.n	199c8 <rpc_gnss_event_handler+0xf8>
   19a26:	6823      	ldr	r3, [r4, #0]
   19a28:	b29b      	uxth	r3, r3
   19a2a:	2b03      	cmp	r3, #3
   19a2c:	d1cc      	bne.n	199c8 <rpc_gnss_event_handler+0xf8>
   19a2e:	e7f3      	b.n	19a18 <rpc_gnss_event_handler+0x148>
   19a30:	4640      	mov	r0, r8
   19a32:	f7fa f887 	bl	13b44 <nrf_free>
   19a36:	6830      	ldr	r0, [r6, #0]
   19a38:	2800      	cmp	r0, #0
   19a3a:	f47f af6a 	bne.w	19912 <rpc_gnss_event_handler+0x42>
   19a3e:	e76c      	b.n	1991a <rpc_gnss_event_handler+0x4a>
   19a40:	0c1b      	lsrs	r3, r3, #16
   19a42:	041b      	lsls	r3, r3, #16
   19a44:	f043 0304 	orr.w	r3, r3, #4
   19a48:	6023      	str	r3, [r4, #0]
   19a4a:	e7bd      	b.n	199c8 <rpc_gnss_event_handler+0xf8>
   19a4c:	6823      	ldr	r3, [r4, #0]
   19a4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   19a52:	6023      	str	r3, [r4, #0]
   19a54:	e7c9      	b.n	199ea <rpc_gnss_event_handler+0x11a>
   19a56:	6830      	ldr	r0, [r6, #0]
   19a58:	2800      	cmp	r0, #0
   19a5a:	f43f af5e 	beq.w	1991a <rpc_gnss_event_handler+0x4a>
   19a5e:	f000 ff59 	bl	1a914 <rpc_gnss_client_data_free>
   19a62:	f8c7 8000 	str.w	r8, [r7]
   19a66:	e758      	b.n	1991a <rpc_gnss_event_handler+0x4a>
   19a68:	20024e4c 	.word	0x20024e4c
   19a6c:	20020b38 	.word	0x20020b38
   19a70:	20020b34 	.word	0x20020b34
   19a74:	20020b3c 	.word	0x20020b3c

00019a78 <gnss_interface_write>:
   19a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19a7c:	4a75      	ldr	r2, [pc, #468]	; (19c54 <gnss_interface_write+0x1dc>)
   19a7e:	b09f      	sub	sp, #124	; 0x7c
   19a80:	4290      	cmp	r0, r2
   19a82:	9d26      	ldr	r5, [sp, #152]	; 0x98
   19a84:	f040 80d4 	bne.w	19c30 <gnss_interface_write+0x1b8>
   19a88:	2900      	cmp	r1, #0
   19a8a:	f000 80c9 	beq.w	19c20 <gnss_interface_write+0x1a8>
   19a8e:	2d00      	cmp	r5, #0
   19a90:	f000 80c6 	beq.w	19c20 <gnss_interface_write+0x1a8>
   19a94:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   19a96:	2a02      	cmp	r2, #2
   19a98:	f040 80c2 	bne.w	19c20 <gnss_interface_write+0x1a8>
   19a9c:	4c6e      	ldr	r4, [pc, #440]	; (19c58 <gnss_interface_write+0x1e0>)
   19a9e:	6822      	ldr	r2, [r4, #0]
   19aa0:	b292      	uxth	r2, r2
   19aa2:	2a02      	cmp	r2, #2
   19aa4:	d004      	beq.n	19ab0 <gnss_interface_write+0x38>
   19aa6:	6822      	ldr	r2, [r4, #0]
   19aa8:	b292      	uxth	r2, r2
   19aaa:	2a04      	cmp	r2, #4
   19aac:	f040 80c6 	bne.w	19c3c <gnss_interface_write+0x1c4>
   19ab0:	0798      	lsls	r0, r3, #30
   19ab2:	f100 80c9 	bmi.w	19c48 <gnss_interface_write+0x1d0>
   19ab6:	6820      	ldr	r0, [r4, #0]
   19ab8:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
   19abc:	d065      	beq.n	19b8a <gnss_interface_write+0x112>
   19abe:	6822      	ldr	r2, [r4, #0]
   19ac0:	882b      	ldrh	r3, [r5, #0]
   19ac2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   19ac6:	6022      	str	r2, [r4, #0]
   19ac8:	6822      	ldr	r2, [r4, #0]
   19aca:	3b01      	subs	r3, #1
   19acc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   19ad0:	6022      	str	r2, [r4, #0]
   19ad2:	2b07      	cmp	r3, #7
   19ad4:	f200 80a4 	bhi.w	19c20 <gnss_interface_write+0x1a8>
   19ad8:	e8df f003 	tbb	[pc, r3]
   19adc:	696e7378 	.word	0x696e7378
   19ae0:	045f5a64 	.word	0x045f5a64
   19ae4:	4608      	mov	r0, r1
   19ae6:	a902      	add	r1, sp, #8
   19ae8:	f000 fec8 	bl	1a87c <rpc_gnss_serialize_integrity>
   19aec:	2172      	movs	r1, #114	; 0x72
   19aee:	4668      	mov	r0, sp
   19af0:	f000 fede 	bl	1a8b0 <rpc_gnss_client_request_alloc>
   19af4:	4605      	mov	r5, r0
   19af6:	9800      	ldr	r0, [sp, #0]
   19af8:	2d00      	cmp	r5, #0
   19afa:	d16c      	bne.n	19bd6 <gnss_interface_write+0x15e>
   19afc:	2800      	cmp	r0, #0
   19afe:	d071      	beq.n	19be4 <gnss_interface_write+0x16c>
   19b00:	f241 0605 	movw	r6, #4101	; 0x1005
   19b04:	f04f 0c49 	mov.w	ip, #73	; 0x49
   19b08:	2272      	movs	r2, #114	; 0x72
   19b0a:	f04f 0e76 	mov.w	lr, #118	; 0x76
   19b0e:	f04f 0943 	mov.w	r9, #67	; 0x43
   19b12:	f04f 0854 	mov.w	r8, #84	; 0x54
   19b16:	4f51      	ldr	r7, [pc, #324]	; (19c5c <gnss_interface_write+0x1e4>)
   19b18:	a91e      	add	r1, sp, #120	; 0x78
   19b1a:	883b      	ldrh	r3, [r7, #0]
   19b1c:	f880 c00f 	strb.w	ip, [r0, #15]
   19b20:	3301      	adds	r3, #1
   19b22:	b29b      	uxth	r3, r3
   19b24:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   19b28:	f841 cd74 	str.w	ip, [r1, #-116]!
   19b2c:	7145      	strb	r5, [r0, #5]
   19b2e:	7185      	strb	r5, [r0, #6]
   19b30:	71c5      	strb	r5, [r0, #7]
   19b32:	7205      	strb	r5, [r0, #8]
   19b34:	7245      	strb	r5, [r0, #9]
   19b36:	7285      	strb	r5, [r0, #10]
   19b38:	72c5      	strb	r5, [r0, #11]
   19b3a:	7102      	strb	r2, [r0, #4]
   19b3c:	f880 900c 	strb.w	r9, [r0, #12]
   19b40:	f880 800d 	strb.w	r8, [r0, #13]
   19b44:	f880 e00e 	strb.w	lr, [r0, #14]
   19b48:	6800      	ldr	r0, [r0, #0]
   19b4a:	803b      	strh	r3, [r7, #0]
   19b4c:	f003 fd93 	bl	1d676 <memcpy>
   19b50:	4b43      	ldr	r3, [pc, #268]	; (19c60 <gnss_interface_write+0x1e8>)
   19b52:	4631      	mov	r1, r6
   19b54:	9800      	ldr	r0, [sp, #0]
   19b56:	601d      	str	r5, [r3, #0]
   19b58:	f000 febe 	bl	1a8d8 <rpc_gnss_client_request_send>
   19b5c:	2800      	cmp	r0, #0
   19b5e:	d148      	bne.n	19bf2 <gnss_interface_write+0x17a>
   19b60:	6823      	ldr	r3, [r4, #0]
   19b62:	0299      	lsls	r1, r3, #10
   19b64:	d50d      	bpl.n	19b82 <gnss_interface_write+0x10a>
   19b66:	4e3f      	ldr	r6, [pc, #252]	; (19c64 <gnss_interface_write+0x1ec>)
   19b68:	4d3a      	ldr	r5, [pc, #232]	; (19c54 <gnss_interface_write+0x1dc>)
   19b6a:	e001      	b.n	19b70 <gnss_interface_write+0xf8>
   19b6c:	2800      	cmp	r0, #0
   19b6e:	d150      	bne.n	19c12 <gnss_interface_write+0x19a>
   19b70:	4631      	mov	r1, r6
   19b72:	4628      	mov	r0, r5
   19b74:	f7f7 fea2 	bl	118bc <bsd_os_timedwait>
   19b78:	6823      	ldr	r3, [r4, #0]
   19b7a:	029a      	lsls	r2, r3, #10
   19b7c:	d4f6      	bmi.n	19b6c <gnss_interface_write+0xf4>
   19b7e:	2800      	cmp	r0, #0
   19b80:	d147      	bne.n	19c12 <gnss_interface_write+0x19a>
   19b82:	6823      	ldr	r3, [r4, #0]
   19b84:	039b      	lsls	r3, r3, #14
   19b86:	d53f      	bpl.n	19c08 <gnss_interface_write+0x190>
   19b88:	2000      	movs	r0, #0
   19b8a:	b01f      	add	sp, #124	; 0x7c
   19b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19b90:	4608      	mov	r0, r1
   19b92:	a902      	add	r1, sp, #8
   19b94:	f000 fe2a 	bl	1a7ec <rpc_gnss_serialize_time_and_sv_tow>
   19b98:	e7a8      	b.n	19aec <gnss_interface_write+0x74>
   19b9a:	4608      	mov	r0, r1
   19b9c:	a902      	add	r1, sp, #8
   19b9e:	f000 fe4d 	bl	1a83c <rpc_gnss_serialize_location>
   19ba2:	e7a3      	b.n	19aec <gnss_interface_write+0x74>
   19ba4:	4608      	mov	r0, r1
   19ba6:	a902      	add	r1, sp, #8
   19ba8:	f000 fe06 	bl	1a7b8 <rpc_gnss_serialize_nequick>
   19bac:	e79e      	b.n	19aec <gnss_interface_write+0x74>
   19bae:	4608      	mov	r0, r1
   19bb0:	a902      	add	r1, sp, #8
   19bb2:	f000 fddd 	bl	1a770 <rpc_gnss_serialize_klob>
   19bb6:	e799      	b.n	19aec <gnss_interface_write+0x74>
   19bb8:	4608      	mov	r0, r1
   19bba:	a902      	add	r1, sp, #8
   19bbc:	f000 fda6 	bl	1a70c <rpc_gnss_serialize_alm>
   19bc0:	e794      	b.n	19aec <gnss_interface_write+0x74>
   19bc2:	4608      	mov	r0, r1
   19bc4:	a902      	add	r1, sp, #8
   19bc6:	f000 fd4f 	bl	1a668 <rpc_gnss_serialize_ephe>
   19bca:	e78f      	b.n	19aec <gnss_interface_write+0x74>
   19bcc:	4608      	mov	r0, r1
   19bce:	a902      	add	r1, sp, #8
   19bd0:	f000 fd28 	bl	1a624 <rpc_gnss_serialize_utc>
   19bd4:	e78a      	b.n	19aec <gnss_interface_write+0x74>
   19bd6:	b128      	cbz	r0, 19be4 <gnss_interface_write+0x16c>
   19bd8:	6803      	ldr	r3, [r0, #0]
   19bda:	b11b      	cbz	r3, 19be4 <gnss_interface_write+0x16c>
   19bdc:	4618      	mov	r0, r3
   19bde:	f000 fe99 	bl	1a914 <rpc_gnss_client_data_free>
   19be2:	9800      	ldr	r0, [sp, #0]
   19be4:	f000 fe8e 	bl	1a904 <rpc_gnss_client_message_free>
   19be8:	2023      	movs	r0, #35	; 0x23
   19bea:	f7f7 fefb 	bl	119e4 <bsd_os_errno_set>
   19bee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19bf2:	6823      	ldr	r3, [r4, #0]
   19bf4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   19bf8:	6023      	str	r3, [r4, #0]
   19bfa:	6823      	ldr	r3, [r4, #0]
   19bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19c00:	6023      	str	r3, [r4, #0]
   19c02:	b01f      	add	sp, #124	; 0x7c
   19c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19c08:	2005      	movs	r0, #5
   19c0a:	6823      	ldr	r3, [r4, #0]
   19c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19c10:	6023      	str	r3, [r4, #0]
   19c12:	f7f7 fee7 	bl	119e4 <bsd_os_errno_set>
   19c16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19c1a:	b01f      	add	sp, #124	; 0x7c
   19c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19c20:	2016      	movs	r0, #22
   19c22:	f7f7 fedf 	bl	119e4 <bsd_os_errno_set>
   19c26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19c2a:	b01f      	add	sp, #124	; 0x7c
   19c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19c30:	2009      	movs	r0, #9
   19c32:	f7f7 fed7 	bl	119e4 <bsd_os_errno_set>
   19c36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19c3a:	e7a6      	b.n	19b8a <gnss_interface_write+0x112>
   19c3c:	2039      	movs	r0, #57	; 0x39
   19c3e:	f7f7 fed1 	bl	119e4 <bsd_os_errno_set>
   19c42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19c46:	e7a0      	b.n	19b8a <gnss_interface_write+0x112>
   19c48:	202d      	movs	r0, #45	; 0x2d
   19c4a:	f7f7 fecb 	bl	119e4 <bsd_os_errno_set>
   19c4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19c52:	e79a      	b.n	19b8a <gnss_interface_write+0x112>
   19c54:	49765443 	.word	0x49765443
   19c58:	20020b34 	.word	0x20020b34
   19c5c:	20024e4c 	.word	0x20024e4c
   19c60:	20020b38 	.word	0x20020b38
   19c64:	2002c55c 	.word	0x2002c55c

00019c68 <gnss_interface_read>:
   19c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c6c:	4c4a      	ldr	r4, [pc, #296]	; (19d98 <gnss_interface_read+0x130>)
   19c6e:	b0b7      	sub	sp, #220	; 0xdc
   19c70:	42a0      	cmp	r0, r4
   19c72:	f040 81ec 	bne.w	1a04e <gnss_interface_read+0x3e6>
   19c76:	4688      	mov	r8, r1
   19c78:	2900      	cmp	r1, #0
   19c7a:	f000 81e2 	beq.w	1a042 <gnss_interface_read+0x3da>
   19c7e:	2ad7      	cmp	r2, #215	; 0xd7
   19c80:	f240 81df 	bls.w	1a042 <gnss_interface_read+0x3da>
   19c84:	4d45      	ldr	r5, [pc, #276]	; (19d9c <gnss_interface_read+0x134>)
   19c86:	4699      	mov	r9, r3
   19c88:	682b      	ldr	r3, [r5, #0]
   19c8a:	b29b      	uxth	r3, r3
   19c8c:	2b04      	cmp	r3, #4
   19c8e:	d004      	beq.n	19c9a <gnss_interface_read+0x32>
   19c90:	682b      	ldr	r3, [r5, #0]
   19c92:	b29b      	uxth	r3, r3
   19c94:	2b02      	cmp	r3, #2
   19c96:	f040 81e0 	bne.w	1a05a <gnss_interface_read+0x3f2>
   19c9a:	2102      	movs	r1, #2
   19c9c:	20b6      	movs	r0, #182	; 0xb6
   19c9e:	2400      	movs	r4, #0
   19ca0:	682b      	ldr	r3, [r5, #0]
   19ca2:	f10d 020e 	add.w	r2, sp, #14
   19ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   19caa:	602b      	str	r3, [r5, #0]
   19cac:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 19da4 <gnss_interface_read+0x13c>
   19cb0:	ab08      	add	r3, sp, #32
   19cb2:	4f3b      	ldr	r7, [pc, #236]	; (19da0 <gnss_interface_read+0x138>)
   19cb4:	4e38      	ldr	r6, [pc, #224]	; (19d98 <gnss_interface_read+0x130>)
   19cb6:	9005      	str	r0, [sp, #20]
   19cb8:	9107      	str	r1, [sp, #28]
   19cba:	9304      	str	r3, [sp, #16]
   19cbc:	9206      	str	r2, [sp, #24]
   19cbe:	ea09 0b01 	and.w	fp, r9, r1
   19cc2:	f8da 0000 	ldr.w	r0, [sl]
   19cc6:	464a      	mov	r2, r9
   19cc8:	6803      	ldr	r3, [r0, #0]
   19cca:	a904      	add	r1, sp, #16
   19ccc:	689b      	ldr	r3, [r3, #8]
   19cce:	4798      	blx	r3
   19cd0:	2800      	cmp	r0, #0
   19cd2:	da11      	bge.n	19cf8 <gnss_interface_read+0x90>
   19cd4:	f1bb 0f00 	cmp.w	fp, #0
   19cd8:	d138      	bne.n	19d4c <gnss_interface_read+0xe4>
   19cda:	682b      	ldr	r3, [r5, #0]
   19cdc:	03d8      	lsls	r0, r3, #15
   19cde:	d4f0      	bmi.n	19cc2 <gnss_interface_read+0x5a>
   19ce0:	b10c      	cbz	r4, 19ce6 <gnss_interface_read+0x7e>
   19ce2:	e7ee      	b.n	19cc2 <gnss_interface_read+0x5a>
   19ce4:	b930      	cbnz	r0, 19cf4 <gnss_interface_read+0x8c>
   19ce6:	4639      	mov	r1, r7
   19ce8:	4630      	mov	r0, r6
   19cea:	f7f7 fde7 	bl	118bc <bsd_os_timedwait>
   19cee:	682b      	ldr	r3, [r5, #0]
   19cf0:	03d9      	lsls	r1, r3, #15
   19cf2:	d5f7      	bpl.n	19ce4 <gnss_interface_read+0x7c>
   19cf4:	4604      	mov	r4, r0
   19cf6:	e7e4      	b.n	19cc2 <gnss_interface_read+0x5a>
   19cf8:	f244 0202 	movw	r2, #16386	; 0x4002
   19cfc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   19d00:	4293      	cmp	r3, r2
   19d02:	d039      	beq.n	19d78 <gnss_interface_read+0x110>
   19d04:	f244 0201 	movw	r2, #16385	; 0x4001
   19d08:	4293      	cmp	r3, r2
   19d0a:	d04d      	beq.n	19da8 <gnss_interface_read+0x140>
   19d0c:	f244 0203 	movw	r2, #16387	; 0x4003
   19d10:	4293      	cmp	r3, r2
   19d12:	f040 8196 	bne.w	1a042 <gnss_interface_read+0x3da>
   19d16:	2201      	movs	r2, #1
   19d18:	2414      	movs	r4, #20
   19d1a:	9b08      	ldr	r3, [sp, #32]
   19d1c:	f888 2000 	strb.w	r2, [r8]
   19d20:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19d22:	f8c8 3008 	str.w	r3, [r8, #8]
   19d26:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   19d2a:	e9c8 2303 	strd	r2, r3, [r8, #12]
   19d2e:	f8da 0000 	ldr.w	r0, [sl]
   19d32:	6803      	ldr	r3, [r0, #0]
   19d34:	68db      	ldr	r3, [r3, #12]
   19d36:	4798      	blx	r3
   19d38:	2800      	cmp	r0, #0
   19d3a:	dd03      	ble.n	19d44 <gnss_interface_read+0xdc>
   19d3c:	682b      	ldr	r3, [r5, #0]
   19d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   19d42:	602b      	str	r3, [r5, #0]
   19d44:	4620      	mov	r0, r4
   19d46:	b037      	add	sp, #220	; 0xdc
   19d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d4c:	1c42      	adds	r2, r0, #1
   19d4e:	4603      	mov	r3, r0
   19d50:	d1d2      	bne.n	19cf8 <gnss_interface_read+0x90>
   19d52:	b93c      	cbnz	r4, 19d64 <gnss_interface_read+0xfc>
   19d54:	461c      	mov	r4, r3
   19d56:	2023      	movs	r0, #35	; 0x23
   19d58:	f7f7 fe44 	bl	119e4 <bsd_os_errno_set>
   19d5c:	4620      	mov	r0, r4
   19d5e:	b037      	add	sp, #220	; 0xdc
   19d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d64:	9001      	str	r0, [sp, #4]
   19d66:	4620      	mov	r0, r4
   19d68:	f7f7 fe3c 	bl	119e4 <bsd_os_errno_set>
   19d6c:	9b01      	ldr	r3, [sp, #4]
   19d6e:	461c      	mov	r4, r3
   19d70:	4620      	mov	r0, r4
   19d72:	b037      	add	sp, #220	; 0xdc
   19d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d78:	a808      	add	r0, sp, #32
   19d7a:	f003 fc41 	bl	1d600 <strlen>
   19d7e:	2302      	movs	r3, #2
   19d80:	1c44      	adds	r4, r0, #1
   19d82:	b2a4      	uxth	r4, r4
   19d84:	f808 3b08 	strb.w	r3, [r8], #8
   19d88:	4622      	mov	r2, r4
   19d8a:	a908      	add	r1, sp, #32
   19d8c:	4640      	mov	r0, r8
   19d8e:	f003 fc72 	bl	1d676 <memcpy>
   19d92:	3408      	adds	r4, #8
   19d94:	e7cb      	b.n	19d2e <gnss_interface_read+0xc6>
   19d96:	bf00      	nop
   19d98:	49765443 	.word	0x49765443
   19d9c:	20020b34 	.word	0x20020b34
   19da0:	2002c55c 	.word	0x2002c55c
   19da4:	20020b3c 	.word	0x20020b3c
   19da8:	2401      	movs	r4, #1
   19daa:	a809      	add	r0, sp, #36	; 0x24
   19dac:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   19dae:	e9c8 0102 	strd	r0, r1, [r8, #8]
   19db2:	e9c8 2304 	strd	r2, r3, [r8, #16]
   19db6:	990d      	ldr	r1, [sp, #52]	; 0x34
   19db8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19dba:	f888 4000 	strb.w	r4, [r8]
   19dbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19dc0:	f8c8 1018 	str.w	r1, [r8, #24]
   19dc4:	9910      	ldr	r1, [sp, #64]	; 0x40
   19dc6:	f8c8 201c 	str.w	r2, [r8, #28]
   19dca:	f8c8 3020 	str.w	r3, [r8, #32]
   19dce:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   19dd2:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   19dd6:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
   19dda:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   19dde:	f888 2044 	strb.w	r2, [r8, #68]	; 0x44
   19de2:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   19de6:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
   19dea:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   19dee:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
   19df2:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   19df6:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
   19dfa:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
   19dfe:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   19e02:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   19e06:	f8a8 1028 	strh.w	r1, [r8, #40]	; 0x28
   19e0a:	f888 302e 	strb.w	r3, [r8, #46]	; 0x2e
   19e0e:	f8c8 202a 	str.w	r2, [r8, #42]	; 0x2a
   19e12:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   19e16:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   19e1a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   19e1c:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   19e20:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   19e24:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   19e28:	f3c3 210f 	ubfx	r1, r3, #8, #16
   19e2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   19e2e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   19e32:	f8a8 0030 	strh.w	r0, [r8, #48]	; 0x30
   19e36:	f8a8 104a 	strh.w	r1, [r8, #74]	; 0x4a
   19e3a:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   19e3e:	f3c3 230f 	ubfx	r3, r3, #8, #16
   19e42:	f8a8 2056 	strh.w	r2, [r8, #86]	; 0x56
   19e46:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   19e4a:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
   19e4e:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   19e52:	f8a8 1046 	strh.w	r1, [r8, #70]	; 0x46
   19e56:	f888 2048 	strb.w	r2, [r8, #72]	; 0x48
   19e5a:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   19e5e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   19e62:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
   19e66:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   19e6a:	f888 1050 	strb.w	r1, [r8, #80]	; 0x50
   19e6e:	f8a8 2052 	strh.w	r2, [r8, #82]	; 0x52
   19e72:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
   19e76:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   19e7a:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   19e7e:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   19e82:	f8c8 1058 	str.w	r1, [r8, #88]	; 0x58
   19e86:	f888 205c 	strb.w	r2, [r8, #92]	; 0x5c
   19e8a:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   19e8e:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   19e92:	f8a8 305e 	strh.w	r3, [r8, #94]	; 0x5e
   19e96:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   19e9a:	f888 1060 	strb.w	r1, [r8, #96]	; 0x60
   19e9e:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
   19ea2:	f888 3068 	strb.w	r3, [r8, #104]	; 0x68
   19ea6:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   19eaa:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   19eae:	9a22      	ldr	r2, [sp, #136]	; 0x88
   19eb0:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   19eb4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   19eb8:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   19ebc:	f3c2 220f 	ubfx	r2, r2, #8, #16
   19ec0:	f8a8 106e 	strh.w	r1, [r8, #110]	; 0x6e
   19ec4:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   19ec8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   19ecc:	f8a8 207a 	strh.w	r2, [r8, #122]	; 0x7a
   19ed0:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   19ed4:	f8a8 3086 	strh.w	r3, [r8, #134]	; 0x86
   19ed8:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   19edc:	f8a8 106a 	strh.w	r1, [r8, #106]	; 0x6a
   19ee0:	f888 206c 	strb.w	r2, [r8, #108]	; 0x6c
   19ee4:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   19ee8:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   19eec:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
   19ef0:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   19ef4:	f888 1074 	strb.w	r1, [r8, #116]	; 0x74
   19ef8:	f8a8 2076 	strh.w	r2, [r8, #118]	; 0x76
   19efc:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
   19f00:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   19f04:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   19f08:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   19f0c:	f8c8 107c 	str.w	r1, [r8, #124]	; 0x7c
   19f10:	f888 2080 	strb.w	r2, [r8, #128]	; 0x80
   19f14:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   19f18:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   19f1c:	f8a8 3082 	strh.w	r3, [r8, #130]	; 0x82
   19f20:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   19f24:	f888 1084 	strb.w	r1, [r8, #132]	; 0x84
   19f28:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
   19f2c:	f888 308c 	strb.w	r3, [r8, #140]	; 0x8c
   19f30:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   19f34:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   19f36:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   19f3a:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   19f3e:	f3c3 210f 	ubfx	r1, r3, #8, #16
   19f42:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   19f44:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   19f48:	f8a8 1092 	strh.w	r1, [r8, #146]	; 0x92
   19f4c:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   19f50:	f8a8 209e 	strh.w	r2, [r8, #158]	; 0x9e
   19f54:	f3c3 230f 	ubfx	r3, r3, #8, #16
   19f58:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   19f5c:	f8a8 008e 	strh.w	r0, [r8, #142]	; 0x8e
   19f60:	f8a8 30aa 	strh.w	r3, [r8, #170]	; 0xaa
   19f64:	f888 1090 	strb.w	r1, [r8, #144]	; 0x90
   19f68:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   19f6c:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   19f70:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
   19f74:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   19f78:	f888 3098 	strb.w	r3, [r8, #152]	; 0x98
   19f7c:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   19f80:	f8a8 109a 	strh.w	r1, [r8, #154]	; 0x9a
   19f84:	f888 209c 	strb.w	r2, [r8, #156]	; 0x9c
   19f88:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   19f8c:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   19f90:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
   19f94:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   19f98:	f888 10a4 	strb.w	r1, [r8, #164]	; 0xa4
   19f9c:	f8a8 20a6 	strh.w	r2, [r8, #166]	; 0xa6
   19fa0:	f888 30a8 	strb.w	r3, [r8, #168]	; 0xa8
   19fa4:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   19fa8:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   19fac:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   19fb0:	f8c8 10ac 	str.w	r1, [r8, #172]	; 0xac
   19fb4:	f888 20b0 	strb.w	r2, [r8, #176]	; 0xb0
   19fb8:	f8a8 30b2 	strh.w	r3, [r8, #178]	; 0xb2
   19fbc:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   19fc0:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   19fc4:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   19fc8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   19fca:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   19fce:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   19fd2:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   19fd6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   19fda:	f3c2 220f 	ubfx	r2, r2, #8, #16
   19fde:	f8a8 10b6 	strh.w	r1, [r8, #182]	; 0xb6
   19fe2:	f8a8 30ce 	strh.w	r3, [r8, #206]	; 0xce
   19fe6:	f888 40b4 	strb.w	r4, [r8, #180]	; 0xb4
   19fea:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
   19fee:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   19ff2:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   19ff6:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   19ffa:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   19ffe:	f888 10bc 	strb.w	r1, [r8, #188]	; 0xbc
   1a002:	f8a8 20be 	strh.w	r2, [r8, #190]	; 0xbe
   1a006:	f8c8 00b8 	str.w	r0, [r8, #184]	; 0xb8
   1a00a:	f888 30c0 	strb.w	r3, [r8, #192]	; 0xc0
   1a00e:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   1a012:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   1a016:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   1a01a:	f8c8 10c4 	str.w	r1, [r8, #196]	; 0xc4
   1a01e:	f888 20c8 	strb.w	r2, [r8, #200]	; 0xc8
   1a022:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   1a026:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   1a02a:	f8a8 30ca 	strh.w	r3, [r8, #202]	; 0xca
   1a02e:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   1a032:	f888 10cc 	strb.w	r1, [r8, #204]	; 0xcc
   1a036:	f8c8 20d0 	str.w	r2, [r8, #208]	; 0xd0
   1a03a:	f888 30d4 	strb.w	r3, [r8, #212]	; 0xd4
   1a03e:	24d8      	movs	r4, #216	; 0xd8
   1a040:	e675      	b.n	19d2e <gnss_interface_read+0xc6>
   1a042:	2016      	movs	r0, #22
   1a044:	f7f7 fcce 	bl	119e4 <bsd_os_errno_set>
   1a048:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1a04c:	e67a      	b.n	19d44 <gnss_interface_read+0xdc>
   1a04e:	2009      	movs	r0, #9
   1a050:	f7f7 fcc8 	bl	119e4 <bsd_os_errno_set>
   1a054:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1a058:	e674      	b.n	19d44 <gnss_interface_read+0xdc>
   1a05a:	2039      	movs	r0, #57	; 0x39
   1a05c:	f7f7 fcc2 	bl	119e4 <bsd_os_errno_set>
   1a060:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1a064:	e66e      	b.n	19d44 <gnss_interface_read+0xdc>
   1a066:	bf00      	nop

0001a068 <gnss_interface_setopt>:
   1a068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a06c:	f241 1402 	movw	r4, #4354	; 0x1102
   1a070:	4222      	tst	r2, r4
   1a072:	b086      	sub	sp, #24
   1a074:	4d9c      	ldr	r5, [pc, #624]	; (1a2e8 <gnss_interface_setopt+0x280>)
   1a076:	d004      	beq.n	1a082 <gnss_interface_setopt+0x1a>
   1a078:	682c      	ldr	r4, [r5, #0]
   1a07a:	b2a4      	uxth	r4, r4
   1a07c:	2c02      	cmp	r4, #2
   1a07e:	f040 8104 	bne.w	1a28a <gnss_interface_setopt+0x222>
   1a082:	682c      	ldr	r4, [r5, #0]
   1a084:	0264      	lsls	r4, r4, #9
   1a086:	f100 8128 	bmi.w	1a2da <gnss_interface_setopt+0x272>
   1a08a:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1a08e:	f040 811e 	bne.w	1a2ce <gnss_interface_setopt+0x266>
   1a092:	4996      	ldr	r1, [pc, #600]	; (1a2ec <gnss_interface_setopt+0x284>)
   1a094:	4288      	cmp	r0, r1
   1a096:	f040 8114 	bne.w	1a2c2 <gnss_interface_setopt+0x25a>
   1a09a:	3a01      	subs	r2, #1
   1a09c:	2a08      	cmp	r2, #8
   1a09e:	f200 80ec 	bhi.w	1a27a <gnss_interface_setopt+0x212>
   1a0a2:	e8df f012 	tbh	[pc, r2, lsl #1]
   1a0a6:	0075      	.short	0x0075
   1a0a8:	00c200d8 	.word	0x00c200d8
   1a0ac:	008100cc 	.word	0x008100cc
   1a0b0:	0098008c 	.word	0x0098008c
   1a0b4:	000900af 	.word	0x000900af
   1a0b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a0ba:	2a01      	cmp	r2, #1
   1a0bc:	f040 80dd 	bne.w	1a27a <gnss_interface_setopt+0x212>
   1a0c0:	f241 1603 	movw	r6, #4355	; 0x1103
   1a0c4:	2240      	movs	r2, #64	; 0x40
   1a0c6:	4637      	mov	r7, r6
   1a0c8:	781b      	ldrb	r3, [r3, #0]
   1a0ca:	9202      	str	r2, [sp, #8]
   1a0cc:	f88d 3015 	strb.w	r3, [sp, #21]
   1a0d0:	682b      	ldr	r3, [r5, #0]
   1a0d2:	2112      	movs	r1, #18
   1a0d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1a0d8:	4668      	mov	r0, sp
   1a0da:	602b      	str	r3, [r5, #0]
   1a0dc:	f000 fbe8 	bl	1a8b0 <rpc_gnss_client_request_alloc>
   1a0e0:	4604      	mov	r4, r0
   1a0e2:	9800      	ldr	r0, [sp, #0]
   1a0e4:	2c00      	cmp	r4, #0
   1a0e6:	f040 80d6 	bne.w	1a296 <gnss_interface_setopt+0x22e>
   1a0ea:	2800      	cmp	r0, #0
   1a0ec:	f000 80da 	beq.w	1a2a4 <gnss_interface_setopt+0x23c>
   1a0f0:	2212      	movs	r2, #18
   1a0f2:	f04f 0876 	mov.w	r8, #118	; 0x76
   1a0f6:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1a0fa:	f04f 0a43 	mov.w	sl, #67	; 0x43
   1a0fe:	f04f 0954 	mov.w	r9, #84	; 0x54
   1a102:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 1a2f4 <gnss_interface_setopt+0x28c>
   1a106:	a906      	add	r1, sp, #24
   1a108:	f8bc 3000 	ldrh.w	r3, [ip]
   1a10c:	f880 800e 	strb.w	r8, [r0, #14]
   1a110:	3301      	adds	r3, #1
   1a112:	b29b      	uxth	r3, r3
   1a114:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   1a118:	f841 6d14 	str.w	r6, [r1, #-20]!
   1a11c:	7144      	strb	r4, [r0, #5]
   1a11e:	7184      	strb	r4, [r0, #6]
   1a120:	71c4      	strb	r4, [r0, #7]
   1a122:	7204      	strb	r4, [r0, #8]
   1a124:	7244      	strb	r4, [r0, #9]
   1a126:	7284      	strb	r4, [r0, #10]
   1a128:	72c4      	strb	r4, [r0, #11]
   1a12a:	7102      	strb	r2, [r0, #4]
   1a12c:	f880 a00c 	strb.w	sl, [r0, #12]
   1a130:	f880 900d 	strb.w	r9, [r0, #13]
   1a134:	f880 e00f 	strb.w	lr, [r0, #15]
   1a138:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 1a2f8 <gnss_interface_setopt+0x290>
   1a13c:	6800      	ldr	r0, [r0, #0]
   1a13e:	f8ac 3000 	strh.w	r3, [ip]
   1a142:	f003 fa98 	bl	1d676 <memcpy>
   1a146:	4639      	mov	r1, r7
   1a148:	9800      	ldr	r0, [sp, #0]
   1a14a:	f8c8 4000 	str.w	r4, [r8]
   1a14e:	f000 fbc3 	bl	1a8d8 <rpc_gnss_client_request_send>
   1a152:	2800      	cmp	r0, #0
   1a154:	f040 80ab 	bne.w	1a2ae <gnss_interface_setopt+0x246>
   1a158:	4f65      	ldr	r7, [pc, #404]	; (1a2f0 <gnss_interface_setopt+0x288>)
   1a15a:	4e64      	ldr	r6, [pc, #400]	; (1a2ec <gnss_interface_setopt+0x284>)
   1a15c:	4639      	mov	r1, r7
   1a15e:	4630      	mov	r0, r6
   1a160:	f7f7 fbac 	bl	118bc <bsd_os_timedwait>
   1a164:	682c      	ldr	r4, [r5, #0]
   1a166:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   1a16a:	d1f7      	bne.n	1a15c <gnss_interface_setopt+0xf4>
   1a16c:	f8d8 0000 	ldr.w	r0, [r8]
   1a170:	b118      	cbz	r0, 1a17a <gnss_interface_setopt+0x112>
   1a172:	f000 fbcf 	bl	1a914 <rpc_gnss_client_data_free>
   1a176:	f8c8 4000 	str.w	r4, [r8]
   1a17a:	682b      	ldr	r3, [r5, #0]
   1a17c:	021b      	lsls	r3, r3, #8
   1a17e:	d576      	bpl.n	1a26e <gnss_interface_setopt+0x206>
   1a180:	2000      	movs	r0, #0
   1a182:	682b      	ldr	r3, [r5, #0]
   1a184:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1a188:	602b      	str	r3, [r5, #0]
   1a18a:	b006      	add	sp, #24
   1a18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a190:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a192:	2a02      	cmp	r2, #2
   1a194:	d171      	bne.n	1a27a <gnss_interface_setopt+0x212>
   1a196:	2208      	movs	r2, #8
   1a198:	f241 1603 	movw	r6, #4355	; 0x1103
   1a19c:	881b      	ldrh	r3, [r3, #0]
   1a19e:	9202      	str	r2, [sp, #8]
   1a1a0:	f8ad 300f 	strh.w	r3, [sp, #15]
   1a1a4:	4637      	mov	r7, r6
   1a1a6:	e793      	b.n	1a0d0 <gnss_interface_setopt+0x68>
   1a1a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a1aa:	2a01      	cmp	r2, #1
   1a1ac:	d165      	bne.n	1a27a <gnss_interface_setopt+0x212>
   1a1ae:	f241 1603 	movw	r6, #4355	; 0x1103
   1a1b2:	781b      	ldrb	r3, [r3, #0]
   1a1b4:	9202      	str	r2, [sp, #8]
   1a1b6:	f88d 300c 	strb.w	r3, [sp, #12]
   1a1ba:	4637      	mov	r7, r6
   1a1bc:	e788      	b.n	1a0d0 <gnss_interface_setopt+0x68>
   1a1be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a1c0:	2a01      	cmp	r2, #1
   1a1c2:	d15a      	bne.n	1a27a <gnss_interface_setopt+0x212>
   1a1c4:	2202      	movs	r2, #2
   1a1c6:	f241 1603 	movw	r6, #4355	; 0x1103
   1a1ca:	781b      	ldrb	r3, [r3, #0]
   1a1cc:	9202      	str	r2, [sp, #8]
   1a1ce:	f88d 300d 	strb.w	r3, [sp, #13]
   1a1d2:	4637      	mov	r7, r6
   1a1d4:	e77c      	b.n	1a0d0 <gnss_interface_setopt+0x68>
   1a1d6:	682a      	ldr	r2, [r5, #0]
   1a1d8:	b292      	uxth	r2, r2
   1a1da:	2a02      	cmp	r2, #2
   1a1dc:	d155      	bne.n	1a28a <gnss_interface_setopt+0x222>
   1a1de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a1e0:	2a04      	cmp	r2, #4
   1a1e2:	d14a      	bne.n	1a27a <gnss_interface_setopt+0x212>
   1a1e4:	2101      	movs	r1, #1
   1a1e6:	f241 0604 	movw	r6, #4100	; 0x1004
   1a1ea:	682a      	ldr	r2, [r5, #0]
   1a1ec:	6818      	ldr	r0, [r3, #0]
   1a1ee:	0c13      	lsrs	r3, r2, #16
   1a1f0:	041b      	lsls	r3, r3, #16
   1a1f2:	f043 0303 	orr.w	r3, r3, #3
   1a1f6:	f8cd 0009 	str.w	r0, [sp, #9]
   1a1fa:	602b      	str	r3, [r5, #0]
   1a1fc:	f88d 1008 	strb.w	r1, [sp, #8]
   1a200:	4637      	mov	r7, r6
   1a202:	e765      	b.n	1a0d0 <gnss_interface_setopt+0x68>
   1a204:	682b      	ldr	r3, [r5, #0]
   1a206:	b29b      	uxth	r3, r3
   1a208:	2b04      	cmp	r3, #4
   1a20a:	d13e      	bne.n	1a28a <gnss_interface_setopt+0x222>
   1a20c:	2300      	movs	r3, #0
   1a20e:	f241 0604 	movw	r6, #4100	; 0x1004
   1a212:	f88d 3008 	strb.w	r3, [sp, #8]
   1a216:	f88d 3009 	strb.w	r3, [sp, #9]
   1a21a:	f88d 300a 	strb.w	r3, [sp, #10]
   1a21e:	f88d 300b 	strb.w	r3, [sp, #11]
   1a222:	f88d 300c 	strb.w	r3, [sp, #12]
   1a226:	4637      	mov	r7, r6
   1a228:	e752      	b.n	1a0d0 <gnss_interface_setopt+0x68>
   1a22a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a22c:	2a01      	cmp	r2, #1
   1a22e:	d124      	bne.n	1a27a <gnss_interface_setopt+0x212>
   1a230:	781b      	ldrb	r3, [r3, #0]
   1a232:	2b01      	cmp	r3, #1
   1a234:	d121      	bne.n	1a27a <gnss_interface_setopt+0x212>
   1a236:	f241 1603 	movw	r6, #4355	; 0x1103
   1a23a:	4637      	mov	r7, r6
   1a23c:	e748      	b.n	1a0d0 <gnss_interface_setopt+0x68>
   1a23e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a240:	2a02      	cmp	r2, #2
   1a242:	d11a      	bne.n	1a27a <gnss_interface_setopt+0x212>
   1a244:	2220      	movs	r2, #32
   1a246:	f241 1603 	movw	r6, #4355	; 0x1103
   1a24a:	881b      	ldrh	r3, [r3, #0]
   1a24c:	9202      	str	r2, [sp, #8]
   1a24e:	f8ad 3013 	strh.w	r3, [sp, #19]
   1a252:	4637      	mov	r7, r6
   1a254:	e73c      	b.n	1a0d0 <gnss_interface_setopt+0x68>
   1a256:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a258:	2a02      	cmp	r2, #2
   1a25a:	d10e      	bne.n	1a27a <gnss_interface_setopt+0x212>
   1a25c:	2210      	movs	r2, #16
   1a25e:	f241 1603 	movw	r6, #4355	; 0x1103
   1a262:	881b      	ldrh	r3, [r3, #0]
   1a264:	9202      	str	r2, [sp, #8]
   1a266:	f8ad 3011 	strh.w	r3, [sp, #17]
   1a26a:	4637      	mov	r7, r6
   1a26c:	e730      	b.n	1a0d0 <gnss_interface_setopt+0x68>
   1a26e:	200e      	movs	r0, #14
   1a270:	f7f7 fbb8 	bl	119e4 <bsd_os_errno_set>
   1a274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a278:	e783      	b.n	1a182 <gnss_interface_setopt+0x11a>
   1a27a:	2016      	movs	r0, #22
   1a27c:	f7f7 fbb2 	bl	119e4 <bsd_os_errno_set>
   1a280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a284:	b006      	add	sp, #24
   1a286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a28a:	200e      	movs	r0, #14
   1a28c:	f7f7 fbaa 	bl	119e4 <bsd_os_errno_set>
   1a290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a294:	e779      	b.n	1a18a <gnss_interface_setopt+0x122>
   1a296:	b128      	cbz	r0, 1a2a4 <gnss_interface_setopt+0x23c>
   1a298:	6803      	ldr	r3, [r0, #0]
   1a29a:	b11b      	cbz	r3, 1a2a4 <gnss_interface_setopt+0x23c>
   1a29c:	4618      	mov	r0, r3
   1a29e:	f000 fb39 	bl	1a914 <rpc_gnss_client_data_free>
   1a2a2:	9800      	ldr	r0, [sp, #0]
   1a2a4:	f000 fb2e 	bl	1a904 <rpc_gnss_client_message_free>
   1a2a8:	2023      	movs	r0, #35	; 0x23
   1a2aa:	f7f7 fb9b 	bl	119e4 <bsd_os_errno_set>
   1a2ae:	682b      	ldr	r3, [r5, #0]
   1a2b0:	200e      	movs	r0, #14
   1a2b2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1a2b6:	602b      	str	r3, [r5, #0]
   1a2b8:	f7f7 fb94 	bl	119e4 <bsd_os_errno_set>
   1a2bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a2c0:	e763      	b.n	1a18a <gnss_interface_setopt+0x122>
   1a2c2:	2009      	movs	r0, #9
   1a2c4:	f7f7 fb8e 	bl	119e4 <bsd_os_errno_set>
   1a2c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a2cc:	e75d      	b.n	1a18a <gnss_interface_setopt+0x122>
   1a2ce:	202a      	movs	r0, #42	; 0x2a
   1a2d0:	f7f7 fb88 	bl	119e4 <bsd_os_errno_set>
   1a2d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a2d8:	e757      	b.n	1a18a <gnss_interface_setopt+0x122>
   1a2da:	2073      	movs	r0, #115	; 0x73
   1a2dc:	f7f7 fb82 	bl	119e4 <bsd_os_errno_set>
   1a2e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a2e4:	e751      	b.n	1a18a <gnss_interface_setopt+0x122>
   1a2e6:	bf00      	nop
   1a2e8:	20020b34 	.word	0x20020b34
   1a2ec:	49765443 	.word	0x49765443
   1a2f0:	2002c55c 	.word	0x2002c55c
   1a2f4:	20024e4c 	.word	0x20024e4c
   1a2f8:	20020b38 	.word	0x20020b38

0001a2fc <gnss_interface_getopt>:
   1a2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a300:	4c81      	ldr	r4, [pc, #516]	; (1a508 <gnss_interface_getopt+0x20c>)
   1a302:	b087      	sub	sp, #28
   1a304:	6825      	ldr	r5, [r4, #0]
   1a306:	4698      	mov	r8, r3
   1a308:	b2ad      	uxth	r5, r5
   1a30a:	2d02      	cmp	r5, #2
   1a30c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1a30e:	f040 80dd 	bne.w	1a4cc <gnss_interface_getopt+0x1d0>
   1a312:	6825      	ldr	r5, [r4, #0]
   1a314:	03ee      	lsls	r6, r5, #15
   1a316:	f100 80eb 	bmi.w	1a4f0 <gnss_interface_getopt+0x1f4>
   1a31a:	6825      	ldr	r5, [r4, #0]
   1a31c:	01ed      	lsls	r5, r5, #7
   1a31e:	f100 80ed 	bmi.w	1a4fc <gnss_interface_getopt+0x200>
   1a322:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1a326:	f040 80d7 	bne.w	1a4d8 <gnss_interface_getopt+0x1dc>
   1a32a:	4978      	ldr	r1, [pc, #480]	; (1a50c <gnss_interface_getopt+0x210>)
   1a32c:	4288      	cmp	r0, r1
   1a32e:	f040 80d9 	bne.w	1a4e4 <gnss_interface_getopt+0x1e8>
   1a332:	f1b8 0f00 	cmp.w	r8, #0
   1a336:	d00b      	beq.n	1a350 <gnss_interface_getopt+0x54>
   1a338:	b153      	cbz	r3, 1a350 <gnss_interface_getopt+0x54>
   1a33a:	1e57      	subs	r7, r2, #1
   1a33c:	2f05      	cmp	r7, #5
   1a33e:	d807      	bhi.n	1a350 <gnss_interface_getopt+0x54>
   1a340:	e8df f007 	tbb	[pc, r7]
   1a344:	0f030f0f 	.word	0x0f030f0f
   1a348:	0303      	.short	0x0303
   1a34a:	681b      	ldr	r3, [r3, #0]
   1a34c:	2b01      	cmp	r3, #1
   1a34e:	d00b      	beq.n	1a368 <gnss_interface_getopt+0x6c>
   1a350:	2016      	movs	r0, #22
   1a352:	f7f7 fb47 	bl	119e4 <bsd_os_errno_set>
   1a356:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a35a:	4628      	mov	r0, r5
   1a35c:	b007      	add	sp, #28
   1a35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a362:	681b      	ldr	r3, [r3, #0]
   1a364:	2b02      	cmp	r3, #2
   1a366:	d1f3      	bne.n	1a350 <gnss_interface_getopt+0x54>
   1a368:	6823      	ldr	r3, [r4, #0]
   1a36a:	2212      	movs	r2, #18
   1a36c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1a370:	2100      	movs	r1, #0
   1a372:	a801      	add	r0, sp, #4
   1a374:	6023      	str	r3, [r4, #0]
   1a376:	f003 f9a8 	bl	1d6ca <memset>
   1a37a:	2112      	movs	r1, #18
   1a37c:	4668      	mov	r0, sp
   1a37e:	f000 fa97 	bl	1a8b0 <rpc_gnss_client_request_alloc>
   1a382:	4605      	mov	r5, r0
   1a384:	9800      	ldr	r0, [sp, #0]
   1a386:	2d00      	cmp	r5, #0
   1a388:	f040 808a 	bne.w	1a4a0 <gnss_interface_getopt+0x1a4>
   1a38c:	2800      	cmp	r0, #0
   1a38e:	f000 808e 	beq.w	1a4ae <gnss_interface_getopt+0x1b2>
   1a392:	f241 1602 	movw	r6, #4354	; 0x1102
   1a396:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1a39a:	2212      	movs	r2, #18
   1a39c:	f04f 0976 	mov.w	r9, #118	; 0x76
   1a3a0:	f04f 0b43 	mov.w	fp, #67	; 0x43
   1a3a4:	f04f 0a54 	mov.w	sl, #84	; 0x54
   1a3a8:	f8df c168 	ldr.w	ip, [pc, #360]	; 1a514 <gnss_interface_getopt+0x218>
   1a3ac:	f880 e00f 	strb.w	lr, [r0, #15]
   1a3b0:	f8bc 3000 	ldrh.w	r3, [ip]
   1a3b4:	f880 900e 	strb.w	r9, [r0, #14]
   1a3b8:	3301      	adds	r3, #1
   1a3ba:	b29b      	uxth	r3, r3
   1a3bc:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   1a3c0:	f8cd e004 	str.w	lr, [sp, #4]
   1a3c4:	7145      	strb	r5, [r0, #5]
   1a3c6:	7185      	strb	r5, [r0, #6]
   1a3c8:	71c5      	strb	r5, [r0, #7]
   1a3ca:	7205      	strb	r5, [r0, #8]
   1a3cc:	7245      	strb	r5, [r0, #9]
   1a3ce:	7285      	strb	r5, [r0, #10]
   1a3d0:	72c5      	strb	r5, [r0, #11]
   1a3d2:	a901      	add	r1, sp, #4
   1a3d4:	7102      	strb	r2, [r0, #4]
   1a3d6:	f880 b00c 	strb.w	fp, [r0, #12]
   1a3da:	f880 a00d 	strb.w	sl, [r0, #13]
   1a3de:	f8df 9138 	ldr.w	r9, [pc, #312]	; 1a518 <gnss_interface_getopt+0x21c>
   1a3e2:	6800      	ldr	r0, [r0, #0]
   1a3e4:	f8ac 3000 	strh.w	r3, [ip]
   1a3e8:	f003 f945 	bl	1d676 <memcpy>
   1a3ec:	4631      	mov	r1, r6
   1a3ee:	9800      	ldr	r0, [sp, #0]
   1a3f0:	f8c9 5000 	str.w	r5, [r9]
   1a3f4:	f000 fa70 	bl	1a8d8 <rpc_gnss_client_request_send>
   1a3f8:	2800      	cmp	r0, #0
   1a3fa:	d15d      	bne.n	1a4b8 <gnss_interface_getopt+0x1bc>
   1a3fc:	4e44      	ldr	r6, [pc, #272]	; (1a510 <gnss_interface_getopt+0x214>)
   1a3fe:	4d43      	ldr	r5, [pc, #268]	; (1a50c <gnss_interface_getopt+0x210>)
   1a400:	4631      	mov	r1, r6
   1a402:	4628      	mov	r0, r5
   1a404:	f7f7 fa5a 	bl	118bc <bsd_os_timedwait>
   1a408:	6823      	ldr	r3, [r4, #0]
   1a40a:	01db      	lsls	r3, r3, #7
   1a40c:	d4f8      	bmi.n	1a400 <gnss_interface_getopt+0x104>
   1a40e:	f8d9 0000 	ldr.w	r0, [r9]
   1a412:	b1d8      	cbz	r0, 1a44c <gnss_interface_getopt+0x150>
   1a414:	6825      	ldr	r5, [r4, #0]
   1a416:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   1a41a:	d00f      	beq.n	1a43c <gnss_interface_getopt+0x140>
   1a41c:	2f05      	cmp	r7, #5
   1a41e:	d837      	bhi.n	1a490 <gnss_interface_getopt+0x194>
   1a420:	e8df f007 	tbb	[pc, r7]
   1a424:	2b26201a 	.word	0x2b26201a
   1a428:	0331      	.short	0x0331
   1a42a:	2500      	movs	r5, #0
   1a42c:	7b43      	ldrb	r3, [r0, #13]
   1a42e:	f888 3000 	strb.w	r3, [r8]
   1a432:	f000 fa6f 	bl	1a914 <rpc_gnss_client_data_free>
   1a436:	2300      	movs	r3, #0
   1a438:	f8c9 3000 	str.w	r3, [r9]
   1a43c:	6823      	ldr	r3, [r4, #0]
   1a43e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1a442:	6023      	str	r3, [r4, #0]
   1a444:	4628      	mov	r0, r5
   1a446:	b007      	add	sp, #28
   1a448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a44c:	6823      	ldr	r3, [r4, #0]
   1a44e:	4605      	mov	r5, r0
   1a450:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1a454:	6023      	str	r3, [r4, #0]
   1a456:	e7f5      	b.n	1a444 <gnss_interface_getopt+0x148>
   1a458:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   1a45c:	2500      	movs	r5, #0
   1a45e:	f8a8 3000 	strh.w	r3, [r8]
   1a462:	e7e6      	b.n	1a432 <gnss_interface_getopt+0x136>
   1a464:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   1a468:	2500      	movs	r5, #0
   1a46a:	f8a8 3000 	strh.w	r3, [r8]
   1a46e:	e7e0      	b.n	1a432 <gnss_interface_getopt+0x136>
   1a470:	7b83      	ldrb	r3, [r0, #14]
   1a472:	2500      	movs	r5, #0
   1a474:	f888 3000 	strb.w	r3, [r8]
   1a478:	e7db      	b.n	1a432 <gnss_interface_getopt+0x136>
   1a47a:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   1a47e:	2500      	movs	r5, #0
   1a480:	f8a8 3000 	strh.w	r3, [r8]
   1a484:	e7d5      	b.n	1a432 <gnss_interface_getopt+0x136>
   1a486:	7b03      	ldrb	r3, [r0, #12]
   1a488:	2500      	movs	r5, #0
   1a48a:	f888 3000 	strb.w	r3, [r8]
   1a48e:	e7d0      	b.n	1a432 <gnss_interface_getopt+0x136>
   1a490:	2016      	movs	r0, #22
   1a492:	f7f7 faa7 	bl	119e4 <bsd_os_errno_set>
   1a496:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a49a:	f8d9 0000 	ldr.w	r0, [r9]
   1a49e:	e7c8      	b.n	1a432 <gnss_interface_getopt+0x136>
   1a4a0:	b128      	cbz	r0, 1a4ae <gnss_interface_getopt+0x1b2>
   1a4a2:	6803      	ldr	r3, [r0, #0]
   1a4a4:	b11b      	cbz	r3, 1a4ae <gnss_interface_getopt+0x1b2>
   1a4a6:	4618      	mov	r0, r3
   1a4a8:	f000 fa34 	bl	1a914 <rpc_gnss_client_data_free>
   1a4ac:	9800      	ldr	r0, [sp, #0]
   1a4ae:	f000 fa29 	bl	1a904 <rpc_gnss_client_message_free>
   1a4b2:	2023      	movs	r0, #35	; 0x23
   1a4b4:	f7f7 fa96 	bl	119e4 <bsd_os_errno_set>
   1a4b8:	6823      	ldr	r3, [r4, #0]
   1a4ba:	200e      	movs	r0, #14
   1a4bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1a4c0:	6023      	str	r3, [r4, #0]
   1a4c2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a4c6:	f7f7 fa8d 	bl	119e4 <bsd_os_errno_set>
   1a4ca:	e746      	b.n	1a35a <gnss_interface_getopt+0x5e>
   1a4cc:	200e      	movs	r0, #14
   1a4ce:	f7f7 fa89 	bl	119e4 <bsd_os_errno_set>
   1a4d2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a4d6:	e740      	b.n	1a35a <gnss_interface_getopt+0x5e>
   1a4d8:	202a      	movs	r0, #42	; 0x2a
   1a4da:	f7f7 fa83 	bl	119e4 <bsd_os_errno_set>
   1a4de:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a4e2:	e73a      	b.n	1a35a <gnss_interface_getopt+0x5e>
   1a4e4:	2009      	movs	r0, #9
   1a4e6:	f7f7 fa7d 	bl	119e4 <bsd_os_errno_set>
   1a4ea:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a4ee:	e734      	b.n	1a35a <gnss_interface_getopt+0x5e>
   1a4f0:	2005      	movs	r0, #5
   1a4f2:	f7f7 fa77 	bl	119e4 <bsd_os_errno_set>
   1a4f6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a4fa:	e72e      	b.n	1a35a <gnss_interface_getopt+0x5e>
   1a4fc:	2073      	movs	r0, #115	; 0x73
   1a4fe:	f7f7 fa71 	bl	119e4 <bsd_os_errno_set>
   1a502:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a506:	e728      	b.n	1a35a <gnss_interface_getopt+0x5e>
   1a508:	20020b34 	.word	0x20020b34
   1a50c:	49765443 	.word	0x49765443
   1a510:	2002c55c 	.word	0x2002c55c
   1a514:	20024e4c 	.word	0x20024e4c
   1a518:	20020b38 	.word	0x20020b38

0001a51c <gnss_interface_init>:
   1a51c:	2100      	movs	r1, #0
   1a51e:	b538      	push	{r3, r4, r5, lr}
   1a520:	4c09      	ldr	r4, [pc, #36]	; (1a548 <gnss_interface_init+0x2c>)
   1a522:	4d0a      	ldr	r5, [pc, #40]	; (1a54c <gnss_interface_init+0x30>)
   1a524:	6822      	ldr	r2, [r4, #0]
   1a526:	480a      	ldr	r0, [pc, #40]	; (1a550 <gnss_interface_init+0x34>)
   1a528:	4b0a      	ldr	r3, [pc, #40]	; (1a554 <gnss_interface_init+0x38>)
   1a52a:	402a      	ands	r2, r5
   1a52c:	6022      	str	r2, [r4, #0]
   1a52e:	8001      	strh	r1, [r0, #0]
   1a530:	6019      	str	r1, [r3, #0]
   1a532:	f000 f9b7 	bl	1a8a4 <rpc_gnss_client_init>
   1a536:	b928      	cbnz	r0, 1a544 <gnss_interface_init+0x28>
   1a538:	6823      	ldr	r3, [r4, #0]
   1a53a:	402b      	ands	r3, r5
   1a53c:	f043 0301 	orr.w	r3, r3, #1
   1a540:	6023      	str	r3, [r4, #0]
   1a542:	bd38      	pop	{r3, r4, r5, pc}
   1a544:	2003      	movs	r0, #3
   1a546:	bd38      	pop	{r3, r4, r5, pc}
   1a548:	20020b34 	.word	0x20020b34
   1a54c:	ffff0000 	.word	0xffff0000
   1a550:	20024e4c 	.word	0x20024e4c
   1a554:	20020b38 	.word	0x20020b38

0001a558 <gnss_interface_open>:
   1a558:	2801      	cmp	r0, #1
   1a55a:	b510      	push	{r4, lr}
   1a55c:	d120      	bne.n	1a5a0 <gnss_interface_open+0x48>
   1a55e:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1a562:	d11d      	bne.n	1a5a0 <gnss_interface_open+0x48>
   1a564:	2902      	cmp	r1, #2
   1a566:	d11b      	bne.n	1a5a0 <gnss_interface_open+0x48>
   1a568:	4c13      	ldr	r4, [pc, #76]	; (1a5b8 <gnss_interface_open+0x60>)
   1a56a:	6823      	ldr	r3, [r4, #0]
   1a56c:	b29b      	uxth	r3, r3
   1a56e:	2b01      	cmp	r3, #1
   1a570:	d11c      	bne.n	1a5ac <gnss_interface_open+0x54>
   1a572:	6823      	ldr	r3, [r4, #0]
   1a574:	4608      	mov	r0, r1
   1a576:	0c1b      	lsrs	r3, r3, #16
   1a578:	041b      	lsls	r3, r3, #16
   1a57a:	f043 0302 	orr.w	r3, r3, #2
   1a57e:	2200      	movs	r2, #0
   1a580:	490e      	ldr	r1, [pc, #56]	; (1a5bc <gnss_interface_open+0x64>)
   1a582:	6023      	str	r3, [r4, #0]
   1a584:	f000 faac 	bl	1aae0 <packet_handler_create>
   1a588:	4a0d      	ldr	r2, [pc, #52]	; (1a5c0 <gnss_interface_open+0x68>)
   1a58a:	6010      	str	r0, [r2, #0]
   1a58c:	b170      	cbz	r0, 1a5ac <gnss_interface_open+0x54>
   1a58e:	6823      	ldr	r3, [r4, #0]
   1a590:	6802      	ldr	r2, [r0, #0]
   1a592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1a596:	6812      	ldr	r2, [r2, #0]
   1a598:	6023      	str	r3, [r4, #0]
   1a59a:	4790      	blx	r2
   1a59c:	4809      	ldr	r0, [pc, #36]	; (1a5c4 <gnss_interface_open+0x6c>)
   1a59e:	bd10      	pop	{r4, pc}
   1a5a0:	2016      	movs	r0, #22
   1a5a2:	f7f7 fa1f 	bl	119e4 <bsd_os_errno_set>
   1a5a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a5aa:	bd10      	pop	{r4, pc}
   1a5ac:	200e      	movs	r0, #14
   1a5ae:	f7f7 fa19 	bl	119e4 <bsd_os_errno_set>
   1a5b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a5b6:	bd10      	pop	{r4, pc}
   1a5b8:	20020b34 	.word	0x20020b34
   1a5bc:	000198b5 	.word	0x000198b5
   1a5c0:	20020b3c 	.word	0x20020b3c
   1a5c4:	49765443 	.word	0x49765443

0001a5c8 <gnss_interface_close>:
   1a5c8:	b530      	push	{r4, r5, lr}
   1a5ca:	4b13      	ldr	r3, [pc, #76]	; (1a618 <gnss_interface_close+0x50>)
   1a5cc:	b083      	sub	sp, #12
   1a5ce:	4298      	cmp	r0, r3
   1a5d0:	d11c      	bne.n	1a60c <gnss_interface_close+0x44>
   1a5d2:	4c12      	ldr	r4, [pc, #72]	; (1a61c <gnss_interface_close+0x54>)
   1a5d4:	6823      	ldr	r3, [r4, #0]
   1a5d6:	b29b      	uxth	r3, r3
   1a5d8:	2b04      	cmp	r3, #4
   1a5da:	d00f      	beq.n	1a5fc <gnss_interface_close+0x34>
   1a5dc:	4d10      	ldr	r5, [pc, #64]	; (1a620 <gnss_interface_close+0x58>)
   1a5de:	6828      	ldr	r0, [r5, #0]
   1a5e0:	b118      	cbz	r0, 1a5ea <gnss_interface_close+0x22>
   1a5e2:	f000 fa9d 	bl	1ab20 <packet_handler_delete>
   1a5e6:	2300      	movs	r3, #0
   1a5e8:	602b      	str	r3, [r5, #0]
   1a5ea:	2000      	movs	r0, #0
   1a5ec:	6823      	ldr	r3, [r4, #0]
   1a5ee:	0c1b      	lsrs	r3, r3, #16
   1a5f0:	041b      	lsls	r3, r3, #16
   1a5f2:	f043 0301 	orr.w	r3, r3, #1
   1a5f6:	6023      	str	r3, [r4, #0]
   1a5f8:	b003      	add	sp, #12
   1a5fa:	bd30      	pop	{r4, r5, pc}
   1a5fc:	2300      	movs	r3, #0
   1a5fe:	2208      	movs	r2, #8
   1a600:	9300      	str	r3, [sp, #0]
   1a602:	f44f 7101 	mov.w	r1, #516	; 0x204
   1a606:	f7fc feaf 	bl	17368 <nrf_setsockopt>
   1a60a:	e7e7      	b.n	1a5dc <gnss_interface_close+0x14>
   1a60c:	2009      	movs	r0, #9
   1a60e:	f7f7 f9e9 	bl	119e4 <bsd_os_errno_set>
   1a612:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a616:	e7ef      	b.n	1a5f8 <gnss_interface_close+0x30>
   1a618:	49765443 	.word	0x49765443
   1a61c:	20020b34 	.word	0x20020b34
   1a620:	20020b3c 	.word	0x20020b3c

0001a624 <rpc_gnss_serialize_utc>:
   1a624:	4603      	mov	r3, r0
   1a626:	b1d8      	cbz	r0, 1a660 <rpc_gnss_serialize_utc+0x3c>
   1a628:	b1d1      	cbz	r1, 1a660 <rpc_gnss_serialize_utc+0x3c>
   1a62a:	2000      	movs	r0, #0
   1a62c:	2201      	movs	r2, #1
   1a62e:	7048      	strb	r0, [r1, #1]
   1a630:	700a      	strb	r2, [r1, #0]
   1a632:	685a      	ldr	r2, [r3, #4]
   1a634:	2010      	movs	r0, #16
   1a636:	f8c1 2006 	str.w	r2, [r1, #6]
   1a63a:	681a      	ldr	r2, [r3, #0]
   1a63c:	f8c1 2002 	str.w	r2, [r1, #2]
   1a640:	f993 200a 	ldrsb.w	r2, [r3, #10]
   1a644:	730a      	strb	r2, [r1, #12]
   1a646:	f993 200d 	ldrsb.w	r2, [r3, #13]
   1a64a:	73ca      	strb	r2, [r1, #15]
   1a64c:	f993 200c 	ldrsb.w	r2, [r3, #12]
   1a650:	738a      	strb	r2, [r1, #14]
   1a652:	7a1a      	ldrb	r2, [r3, #8]
   1a654:	728a      	strb	r2, [r1, #10]
   1a656:	7ada      	ldrb	r2, [r3, #11]
   1a658:	734a      	strb	r2, [r1, #13]
   1a65a:	7a5b      	ldrb	r3, [r3, #9]
   1a65c:	72cb      	strb	r3, [r1, #11]
   1a65e:	4770      	bx	lr
   1a660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a664:	4770      	bx	lr
   1a666:	bf00      	nop

0001a668 <rpc_gnss_serialize_ephe>:
   1a668:	4603      	mov	r3, r0
   1a66a:	2800      	cmp	r0, #0
   1a66c:	d04b      	beq.n	1a706 <rpc_gnss_serialize_ephe+0x9e>
   1a66e:	2900      	cmp	r1, #0
   1a670:	d049      	beq.n	1a706 <rpc_gnss_serialize_ephe+0x9e>
   1a672:	2000      	movs	r0, #0
   1a674:	2202      	movs	r2, #2
   1a676:	7048      	strb	r0, [r1, #1]
   1a678:	700a      	strb	r2, [r1, #0]
   1a67a:	68da      	ldr	r2, [r3, #12]
   1a67c:	2040      	movs	r0, #64	; 0x40
   1a67e:	f8c1 200b 	str.w	r2, [r1, #11]
   1a682:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a686:	f8a1 2009 	strh.w	r2, [r1, #9]
   1a68a:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1a68e:	720a      	strb	r2, [r1, #8]
   1a690:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   1a694:	878a      	strh	r2, [r1, #60]	; 0x3c
   1a696:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   1a69a:	86ca      	strh	r2, [r1, #54]	; 0x36
   1a69c:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   1a6a0:	874a      	strh	r2, [r1, #58]	; 0x3a
   1a6a2:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   1a6a6:	868a      	strh	r2, [r1, #52]	; 0x34
   1a6a8:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   1a6ac:	87ca      	strh	r2, [r1, #62]	; 0x3e
   1a6ae:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   1a6b2:	870a      	strh	r2, [r1, #56]	; 0x38
   1a6b4:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1a6b8:	830a      	strh	r2, [r1, #24]
   1a6ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a6bc:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   1a6c0:	7c9a      	ldrb	r2, [r3, #18]
   1a6c2:	744a      	strb	r2, [r1, #17]
   1a6c4:	785a      	ldrb	r2, [r3, #1]
   1a6c6:	70ca      	strb	r2, [r1, #3]
   1a6c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1a6ca:	62ca      	str	r2, [r1, #44]	; 0x2c
   1a6cc:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   1a6d0:	84ca      	strh	r2, [r1, #38]	; 0x26
   1a6d2:	885a      	ldrh	r2, [r3, #2]
   1a6d4:	808a      	strh	r2, [r1, #4]
   1a6d6:	6a1a      	ldr	r2, [r3, #32]
   1a6d8:	f8c1 201a 	str.w	r2, [r1, #26]
   1a6dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a6de:	630a      	str	r2, [r1, #48]	; 0x30
   1a6e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a6e2:	f8c1 201e 	str.w	r2, [r1, #30]
   1a6e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1a6e8:	628a      	str	r2, [r1, #40]	; 0x28
   1a6ea:	781a      	ldrb	r2, [r3, #0]
   1a6ec:	708a      	strb	r2, [r1, #2]
   1a6ee:	f993 2010 	ldrsb.w	r2, [r3, #16]
   1a6f2:	73ca      	strb	r2, [r1, #15]
   1a6f4:	889a      	ldrh	r2, [r3, #4]
   1a6f6:	80ca      	strh	r2, [r1, #6]
   1a6f8:	8a9a      	ldrh	r2, [r3, #20]
   1a6fa:	824a      	strh	r2, [r1, #18]
   1a6fc:	7c5a      	ldrb	r2, [r3, #17]
   1a6fe:	740a      	strb	r2, [r1, #16]
   1a700:	699b      	ldr	r3, [r3, #24]
   1a702:	614b      	str	r3, [r1, #20]
   1a704:	4770      	bx	lr
   1a706:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a70a:	4770      	bx	lr

0001a70c <rpc_gnss_serialize_alm>:
   1a70c:	4603      	mov	r3, r0
   1a70e:	b360      	cbz	r0, 1a76a <rpc_gnss_serialize_alm+0x5e>
   1a710:	b359      	cbz	r1, 1a76a <rpc_gnss_serialize_alm+0x5e>
   1a712:	2000      	movs	r0, #0
   1a714:	2203      	movs	r2, #3
   1a716:	7048      	strb	r0, [r1, #1]
   1a718:	700a      	strb	r2, [r1, #0]
   1a71a:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1a71e:	2021      	movs	r0, #33	; 0x21
   1a720:	f8a1 201d 	strh.w	r2, [r1, #29]
   1a724:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   1a728:	f8a1 201f 	strh.w	r2, [r1, #31]
   1a72c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   1a730:	810a      	strh	r2, [r1, #8]
   1a732:	889a      	ldrh	r2, [r3, #4]
   1a734:	80ca      	strh	r2, [r1, #6]
   1a736:	78da      	ldrb	r2, [r3, #3]
   1a738:	714a      	strb	r2, [r1, #5]
   1a73a:	699a      	ldr	r2, [r3, #24]
   1a73c:	f8c1 2019 	str.w	r2, [r1, #25]
   1a740:	691a      	ldr	r2, [r3, #16]
   1a742:	f8c1 2011 	str.w	r2, [r1, #17]
   1a746:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a74a:	814a      	strh	r2, [r1, #10]
   1a74c:	68da      	ldr	r2, [r3, #12]
   1a74e:	f8c1 200d 	str.w	r2, [r1, #13]
   1a752:	7a9a      	ldrb	r2, [r3, #10]
   1a754:	730a      	strb	r2, [r1, #12]
   1a756:	781a      	ldrb	r2, [r3, #0]
   1a758:	708a      	strb	r2, [r1, #2]
   1a75a:	789a      	ldrb	r2, [r3, #2]
   1a75c:	710a      	strb	r2, [r1, #4]
   1a75e:	695a      	ldr	r2, [r3, #20]
   1a760:	f8c1 2015 	str.w	r2, [r1, #21]
   1a764:	785b      	ldrb	r3, [r3, #1]
   1a766:	70cb      	strb	r3, [r1, #3]
   1a768:	4770      	bx	lr
   1a76a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a76e:	4770      	bx	lr

0001a770 <rpc_gnss_serialize_klob>:
   1a770:	4603      	mov	r3, r0
   1a772:	b1f0      	cbz	r0, 1a7b2 <rpc_gnss_serialize_klob+0x42>
   1a774:	b1e9      	cbz	r1, 1a7b2 <rpc_gnss_serialize_klob+0x42>
   1a776:	2000      	movs	r0, #0
   1a778:	2204      	movs	r2, #4
   1a77a:	7048      	strb	r0, [r1, #1]
   1a77c:	700a      	strb	r2, [r1, #0]
   1a77e:	f993 2000 	ldrsb.w	r2, [r3]
   1a782:	200a      	movs	r0, #10
   1a784:	708a      	strb	r2, [r1, #2]
   1a786:	f993 2001 	ldrsb.w	r2, [r3, #1]
   1a78a:	70ca      	strb	r2, [r1, #3]
   1a78c:	f993 2002 	ldrsb.w	r2, [r3, #2]
   1a790:	710a      	strb	r2, [r1, #4]
   1a792:	f993 2003 	ldrsb.w	r2, [r3, #3]
   1a796:	714a      	strb	r2, [r1, #5]
   1a798:	f993 2004 	ldrsb.w	r2, [r3, #4]
   1a79c:	718a      	strb	r2, [r1, #6]
   1a79e:	f993 2005 	ldrsb.w	r2, [r3, #5]
   1a7a2:	71ca      	strb	r2, [r1, #7]
   1a7a4:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1a7a8:	720a      	strb	r2, [r1, #8]
   1a7aa:	f993 3007 	ldrsb.w	r3, [r3, #7]
   1a7ae:	724b      	strb	r3, [r1, #9]
   1a7b0:	4770      	bx	lr
   1a7b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a7b6:	4770      	bx	lr

0001a7b8 <rpc_gnss_serialize_nequick>:
   1a7b8:	4603      	mov	r3, r0
   1a7ba:	b198      	cbz	r0, 1a7e4 <rpc_gnss_serialize_nequick+0x2c>
   1a7bc:	b191      	cbz	r1, 1a7e4 <rpc_gnss_serialize_nequick+0x2c>
   1a7be:	2000      	movs	r0, #0
   1a7c0:	2205      	movs	r2, #5
   1a7c2:	7048      	strb	r0, [r1, #1]
   1a7c4:	700a      	strb	r2, [r1, #0]
   1a7c6:	f9b3 2000 	ldrsh.w	r2, [r3]
   1a7ca:	200a      	movs	r0, #10
   1a7cc:	804a      	strh	r2, [r1, #2]
   1a7ce:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   1a7d2:	808a      	strh	r2, [r1, #4]
   1a7d4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   1a7d8:	80ca      	strh	r2, [r1, #6]
   1a7da:	799a      	ldrb	r2, [r3, #6]
   1a7dc:	720a      	strb	r2, [r1, #8]
   1a7de:	79db      	ldrb	r3, [r3, #7]
   1a7e0:	724b      	strb	r3, [r1, #9]
   1a7e2:	4770      	bx	lr
   1a7e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a7e8:	4770      	bx	lr
   1a7ea:	bf00      	nop

0001a7ec <rpc_gnss_serialize_time_and_sv_tow>:
   1a7ec:	b310      	cbz	r0, 1a834 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   1a7ee:	b309      	cbz	r1, 1a834 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   1a7f0:	b470      	push	{r4, r5, r6}
   1a7f2:	2500      	movs	r5, #0
   1a7f4:	2606      	movs	r6, #6
   1a7f6:	460c      	mov	r4, r1
   1a7f8:	704d      	strb	r5, [r1, #1]
   1a7fa:	700e      	strb	r6, [r1, #0]
   1a7fc:	462b      	mov	r3, r5
   1a7fe:	8805      	ldrh	r5, [r0, #0]
   1a800:	4602      	mov	r2, r0
   1a802:	804d      	strh	r5, [r1, #2]
   1a804:	68c5      	ldr	r5, [r0, #12]
   1a806:	f8c1 500a 	str.w	r5, [r1, #10]
   1a80a:	8905      	ldrh	r5, [r0, #8]
   1a80c:	810d      	strh	r5, [r1, #8]
   1a80e:	6840      	ldr	r0, [r0, #4]
   1a810:	6048      	str	r0, [r1, #4]
   1a812:	8a15      	ldrh	r5, [r2, #16]
   1a814:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   1a818:	4408      	add	r0, r1
   1a81a:	81c5      	strh	r5, [r0, #14]
   1a81c:	7c90      	ldrb	r0, [r2, #18]
   1a81e:	3301      	adds	r3, #1
   1a820:	2b20      	cmp	r3, #32
   1a822:	7420      	strb	r0, [r4, #16]
   1a824:	f102 0204 	add.w	r2, r2, #4
   1a828:	f104 0403 	add.w	r4, r4, #3
   1a82c:	d1f1      	bne.n	1a812 <rpc_gnss_serialize_time_and_sv_tow+0x26>
   1a82e:	206e      	movs	r0, #110	; 0x6e
   1a830:	bc70      	pop	{r4, r5, r6}
   1a832:	4770      	bx	lr
   1a834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a838:	4770      	bx	lr
   1a83a:	bf00      	nop

0001a83c <rpc_gnss_serialize_location>:
   1a83c:	4603      	mov	r3, r0
   1a83e:	b1c8      	cbz	r0, 1a874 <rpc_gnss_serialize_location+0x38>
   1a840:	b1c1      	cbz	r1, 1a874 <rpc_gnss_serialize_location+0x38>
   1a842:	2000      	movs	r0, #0
   1a844:	2207      	movs	r2, #7
   1a846:	7048      	strb	r0, [r1, #1]
   1a848:	700a      	strb	r2, [r1, #0]
   1a84a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a84e:	2011      	movs	r0, #17
   1a850:	814a      	strh	r2, [r1, #10]
   1a852:	7b9a      	ldrb	r2, [r3, #14]
   1a854:	740a      	strb	r2, [r1, #16]
   1a856:	681a      	ldr	r2, [r3, #0]
   1a858:	f8c1 2002 	str.w	r2, [r1, #2]
   1a85c:	685a      	ldr	r2, [r3, #4]
   1a85e:	f8c1 2006 	str.w	r2, [r1, #6]
   1a862:	7b1a      	ldrb	r2, [r3, #12]
   1a864:	738a      	strb	r2, [r1, #14]
   1a866:	7b5a      	ldrb	r2, [r3, #13]
   1a868:	73ca      	strb	r2, [r1, #15]
   1a86a:	7a9a      	ldrb	r2, [r3, #10]
   1a86c:	730a      	strb	r2, [r1, #12]
   1a86e:	7adb      	ldrb	r3, [r3, #11]
   1a870:	734b      	strb	r3, [r1, #13]
   1a872:	4770      	bx	lr
   1a874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a878:	4770      	bx	lr
   1a87a:	bf00      	nop

0001a87c <rpc_gnss_serialize_integrity>:
   1a87c:	b148      	cbz	r0, 1a892 <rpc_gnss_serialize_integrity+0x16>
   1a87e:	b141      	cbz	r1, 1a892 <rpc_gnss_serialize_integrity+0x16>
   1a880:	2200      	movs	r2, #0
   1a882:	2308      	movs	r3, #8
   1a884:	704a      	strb	r2, [r1, #1]
   1a886:	700b      	strb	r3, [r1, #0]
   1a888:	6803      	ldr	r3, [r0, #0]
   1a88a:	2006      	movs	r0, #6
   1a88c:	f8c1 3002 	str.w	r3, [r1, #2]
   1a890:	4770      	bx	lr
   1a892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a896:	4770      	bx	lr

0001a898 <gnss_client_event_handler>:
   1a898:	f850 1b08 	ldr.w	r1, [r0], #8
   1a89c:	0c09      	lsrs	r1, r1, #16
   1a89e:	f7ff b817 	b.w	198d0 <rpc_gnss_event_handler>
   1a8a2:	bf00      	nop

0001a8a4 <rpc_gnss_client_init>:
   1a8a4:	4801      	ldr	r0, [pc, #4]	; (1a8ac <rpc_gnss_client_init+0x8>)
   1a8a6:	f7fe bb79 	b.w	18f9c <rpc_client_register>
   1a8aa:	bf00      	nop
   1a8ac:	0001f8d8 	.word	0x0001f8d8

0001a8b0 <rpc_gnss_client_request_alloc>:
   1a8b0:	2300      	movs	r3, #0
   1a8b2:	b510      	push	{r4, lr}
   1a8b4:	b082      	sub	sp, #8
   1a8b6:	9301      	str	r3, [sp, #4]
   1a8b8:	b158      	cbz	r0, 1a8d2 <rpc_gnss_client_request_alloc+0x22>
   1a8ba:	4604      	mov	r4, r0
   1a8bc:	aa01      	add	r2, sp, #4
   1a8be:	2007      	movs	r0, #7
   1a8c0:	f7fe fda4 	bl	1940c <rpc_message_alloc>
   1a8c4:	b918      	cbnz	r0, 1a8ce <rpc_gnss_client_request_alloc+0x1e>
   1a8c6:	9b01      	ldr	r3, [sp, #4]
   1a8c8:	b10b      	cbz	r3, 1a8ce <rpc_gnss_client_request_alloc+0x1e>
   1a8ca:	3308      	adds	r3, #8
   1a8cc:	6023      	str	r3, [r4, #0]
   1a8ce:	b002      	add	sp, #8
   1a8d0:	bd10      	pop	{r4, pc}
   1a8d2:	2007      	movs	r0, #7
   1a8d4:	b002      	add	sp, #8
   1a8d6:	bd10      	pop	{r4, pc}

0001a8d8 <rpc_gnss_client_request_send>:
   1a8d8:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1a8dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1a8e0:	d10b      	bne.n	1a8fa <rpc_gnss_client_request_send+0x22>
   1a8e2:	b160      	cbz	r0, 1a8fe <rpc_gnss_client_request_send+0x26>
   1a8e4:	4603      	mov	r3, r0
   1a8e6:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1a8ea:	2007      	movs	r0, #7
   1a8ec:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1a8f0:	f843 1d08 	str.w	r1, [r3, #-8]!
   1a8f4:	4619      	mov	r1, r3
   1a8f6:	f7fe bd71 	b.w	193dc <rpc_message_send>
   1a8fa:	200f      	movs	r0, #15
   1a8fc:	4770      	bx	lr
   1a8fe:	2007      	movs	r0, #7
   1a900:	4770      	bx	lr
   1a902:	bf00      	nop

0001a904 <rpc_gnss_client_message_free>:
   1a904:	b120      	cbz	r0, 1a910 <rpc_gnss_client_message_free+0xc>
   1a906:	f1a0 0108 	sub.w	r1, r0, #8
   1a90a:	2007      	movs	r0, #7
   1a90c:	f7fe bdb0 	b.w	19470 <rpc_message_free>
   1a910:	2007      	movs	r0, #7
   1a912:	4770      	bx	lr

0001a914 <rpc_gnss_client_data_free>:
   1a914:	b118      	cbz	r0, 1a91e <rpc_gnss_client_data_free+0xa>
   1a916:	4601      	mov	r1, r0
   1a918:	2007      	movs	r0, #7
   1a91a:	f7fe bebb 	b.w	19694 <rpc_message_data_free>
   1a91e:	2007      	movs	r0, #7
   1a920:	4770      	bx	lr
   1a922:	bf00      	nop

0001a924 <datagram_handler_init>:
   1a924:	b510      	push	{r4, lr}
   1a926:	4604      	mov	r4, r0
   1a928:	200c      	movs	r0, #12
   1a92a:	f7f9 f901 	bl	13b30 <nrf_malloc>
   1a92e:	60e0      	str	r0, [r4, #12]
   1a930:	b118      	cbz	r0, 1a93a <datagram_handler_init+0x16>
   1a932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a936:	f7fc bc0d 	b.w	17154 <linked_list_init>
   1a93a:	2004      	movs	r0, #4
   1a93c:	bd10      	pop	{r4, pc}
   1a93e:	bf00      	nop

0001a940 <datagram_handler_put>:
   1a940:	b570      	push	{r4, r5, r6, lr}
   1a942:	4606      	mov	r6, r0
   1a944:	2014      	movs	r0, #20
   1a946:	460d      	mov	r5, r1
   1a948:	f7f9 f8f2 	bl	13b30 <nrf_malloc>
   1a94c:	b178      	cbz	r0, 1a96e <datagram_handler_put+0x2e>
   1a94e:	682b      	ldr	r3, [r5, #0]
   1a950:	4604      	mov	r4, r0
   1a952:	6043      	str	r3, [r0, #4]
   1a954:	686b      	ldr	r3, [r5, #4]
   1a956:	4601      	mov	r1, r0
   1a958:	6083      	str	r3, [r0, #8]
   1a95a:	68eb      	ldr	r3, [r5, #12]
   1a95c:	60c3      	str	r3, [r0, #12]
   1a95e:	68ab      	ldr	r3, [r5, #8]
   1a960:	6103      	str	r3, [r0, #16]
   1a962:	68f0      	ldr	r0, [r6, #12]
   1a964:	f7fc fc00 	bl	17168 <linked_list_push>
   1a968:	b920      	cbnz	r0, 1a974 <datagram_handler_put+0x34>
   1a96a:	6868      	ldr	r0, [r5, #4]
   1a96c:	bd70      	pop	{r4, r5, r6, pc}
   1a96e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a972:	bd70      	pop	{r4, r5, r6, pc}
   1a974:	4620      	mov	r0, r4
   1a976:	f7f9 f8e5 	bl	13b44 <nrf_free>
   1a97a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a97e:	bd70      	pop	{r4, r5, r6, pc}

0001a980 <datagram_handler_get>:
   1a980:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a982:	4606      	mov	r6, r0
   1a984:	b085      	sub	sp, #20
   1a986:	68c0      	ldr	r0, [r0, #12]
   1a988:	460c      	mov	r4, r1
   1a98a:	4617      	mov	r7, r2
   1a98c:	f7fc fc0c 	bl	171a8 <linked_list_peek>
   1a990:	2800      	cmp	r0, #0
   1a992:	d037      	beq.n	1aa04 <datagram_handler_get+0x84>
   1a994:	6882      	ldr	r2, [r0, #8]
   1a996:	4605      	mov	r5, r0
   1a998:	e9d4 0300 	ldrd	r0, r3, [r4]
   1a99c:	429a      	cmp	r2, r3
   1a99e:	bf28      	it	cs
   1a9a0:	461a      	movcs	r2, r3
   1a9a2:	6062      	str	r2, [r4, #4]
   1a9a4:	b110      	cbz	r0, 1a9ac <datagram_handler_get+0x2c>
   1a9a6:	6869      	ldr	r1, [r5, #4]
   1a9a8:	f002 fe65 	bl	1d676 <memcpy>
   1a9ac:	68a0      	ldr	r0, [r4, #8]
   1a9ae:	b118      	cbz	r0, 1a9b8 <datagram_handler_get+0x38>
   1a9b0:	692b      	ldr	r3, [r5, #16]
   1a9b2:	b10b      	cbz	r3, 1a9b8 <datagram_handler_get+0x38>
   1a9b4:	68ea      	ldr	r2, [r5, #12]
   1a9b6:	b9e2      	cbnz	r2, 1a9f2 <datagram_handler_get+0x72>
   1a9b8:	2300      	movs	r3, #0
   1a9ba:	60e3      	str	r3, [r4, #12]
   1a9bc:	073b      	lsls	r3, r7, #28
   1a9be:	d502      	bpl.n	1a9c6 <datagram_handler_get+0x46>
   1a9c0:	6860      	ldr	r0, [r4, #4]
   1a9c2:	b005      	add	sp, #20
   1a9c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a9c6:	68f0      	ldr	r0, [r6, #12]
   1a9c8:	f7fc fbe4 	bl	17194 <linked_list_pop>
   1a9cc:	4605      	mov	r5, r0
   1a9ce:	2800      	cmp	r0, #0
   1a9d0:	d0f6      	beq.n	1a9c0 <datagram_handler_get+0x40>
   1a9d2:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1a9d6:	6902      	ldr	r2, [r0, #16]
   1a9d8:	9300      	str	r3, [sp, #0]
   1a9da:	68c3      	ldr	r3, [r0, #12]
   1a9dc:	e9cd 1201 	strd	r1, r2, [sp, #4]
   1a9e0:	9303      	str	r3, [sp, #12]
   1a9e2:	4668      	mov	r0, sp
   1a9e4:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
   1a9e8:	4798      	blx	r3
   1a9ea:	4628      	mov	r0, r5
   1a9ec:	f7f9 f8aa 	bl	13b44 <nrf_free>
   1a9f0:	e7e6      	b.n	1a9c0 <datagram_handler_get+0x40>
   1a9f2:	68e3      	ldr	r3, [r4, #12]
   1a9f4:	429a      	cmp	r2, r3
   1a9f6:	bf28      	it	cs
   1a9f8:	461a      	movcs	r2, r3
   1a9fa:	60e2      	str	r2, [r4, #12]
   1a9fc:	6929      	ldr	r1, [r5, #16]
   1a9fe:	f002 fe3a 	bl	1d676 <memcpy>
   1aa02:	e7db      	b.n	1a9bc <datagram_handler_get+0x3c>
   1aa04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aa08:	e7db      	b.n	1a9c2 <datagram_handler_get+0x42>
   1aa0a:	bf00      	nop

0001aa0c <datagram_handler_available>:
   1aa0c:	b508      	push	{r3, lr}
   1aa0e:	68c0      	ldr	r0, [r0, #12]
   1aa10:	f7fc fbca 	bl	171a8 <linked_list_peek>
   1aa14:	b108      	cbz	r0, 1aa1a <datagram_handler_available+0xe>
   1aa16:	6880      	ldr	r0, [r0, #8]
   1aa18:	bd08      	pop	{r3, pc}
   1aa1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aa1e:	bd08      	pop	{r3, pc}

0001aa20 <datagram_handler_flush>:
   1aa20:	b530      	push	{r4, r5, lr}
   1aa22:	4605      	mov	r5, r0
   1aa24:	68c0      	ldr	r0, [r0, #12]
   1aa26:	b085      	sub	sp, #20
   1aa28:	b9a8      	cbnz	r0, 1aa56 <datagram_handler_flush+0x36>
   1aa2a:	e01a      	b.n	1aa62 <datagram_handler_flush+0x42>
   1aa2c:	68e8      	ldr	r0, [r5, #12]
   1aa2e:	f7fc fbb1 	bl	17194 <linked_list_pop>
   1aa32:	4604      	mov	r4, r0
   1aa34:	b170      	cbz	r0, 1aa54 <datagram_handler_flush+0x34>
   1aa36:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1aa3a:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1aa3e:	e9cd 0100 	strd	r0, r1, [sp]
   1aa42:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1aa46:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1aa4a:	4668      	mov	r0, sp
   1aa4c:	4798      	blx	r3
   1aa4e:	4620      	mov	r0, r4
   1aa50:	f7f9 f878 	bl	13b44 <nrf_free>
   1aa54:	68e8      	ldr	r0, [r5, #12]
   1aa56:	f7fc fbad 	bl	171b4 <linked_list_size_get>
   1aa5a:	2800      	cmp	r0, #0
   1aa5c:	d1e6      	bne.n	1aa2c <datagram_handler_flush+0xc>
   1aa5e:	b005      	add	sp, #20
   1aa60:	bd30      	pop	{r4, r5, pc}
   1aa62:	2008      	movs	r0, #8
   1aa64:	b005      	add	sp, #20
   1aa66:	bd30      	pop	{r4, r5, pc}

0001aa68 <datagram_handler_free>:
   1aa68:	b530      	push	{r4, r5, lr}
   1aa6a:	4605      	mov	r5, r0
   1aa6c:	68c0      	ldr	r0, [r0, #12]
   1aa6e:	b085      	sub	sp, #20
   1aa70:	b9a0      	cbnz	r0, 1aa9c <datagram_handler_free+0x34>
   1aa72:	e01c      	b.n	1aaae <datagram_handler_free+0x46>
   1aa74:	f7fc fb8e 	bl	17194 <linked_list_pop>
   1aa78:	4604      	mov	r4, r0
   1aa7a:	b170      	cbz	r0, 1aa9a <datagram_handler_free+0x32>
   1aa7c:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1aa80:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1aa84:	e9cd 0100 	strd	r0, r1, [sp]
   1aa88:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1aa8c:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1aa90:	4668      	mov	r0, sp
   1aa92:	4798      	blx	r3
   1aa94:	4620      	mov	r0, r4
   1aa96:	f7f9 f855 	bl	13b44 <nrf_free>
   1aa9a:	68e8      	ldr	r0, [r5, #12]
   1aa9c:	f7fc fb8a 	bl	171b4 <linked_list_size_get>
   1aaa0:	4604      	mov	r4, r0
   1aaa2:	68e8      	ldr	r0, [r5, #12]
   1aaa4:	2c00      	cmp	r4, #0
   1aaa6:	d1e5      	bne.n	1aa74 <datagram_handler_free+0xc>
   1aaa8:	f7f9 f84c 	bl	13b44 <nrf_free>
   1aaac:	60ec      	str	r4, [r5, #12]
   1aaae:	b005      	add	sp, #20
   1aab0:	bd30      	pop	{r4, r5, pc}
   1aab2:	bf00      	nop

0001aab4 <null_handler_init>:
   1aab4:	2000      	movs	r0, #0
   1aab6:	4770      	bx	lr

0001aab8 <null_handler_put>:
   1aab8:	b510      	push	{r4, lr}
   1aaba:	460c      	mov	r4, r1
   1aabc:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1aac0:	4620      	mov	r0, r4
   1aac2:	4798      	blx	r3
   1aac4:	6860      	ldr	r0, [r4, #4]
   1aac6:	bd10      	pop	{r4, pc}

0001aac8 <null_handler_get>:
   1aac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aacc:	4770      	bx	lr
   1aace:	bf00      	nop

0001aad0 <null_handler_available>:
   1aad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aad4:	4770      	bx	lr
   1aad6:	bf00      	nop

0001aad8 <null_handler_flush>:
   1aad8:	2000      	movs	r0, #0
   1aada:	4770      	bx	lr

0001aadc <null_handler_free>:
   1aadc:	4770      	bx	lr
   1aade:	bf00      	nop

0001aae0 <packet_handler_create>:
   1aae0:	2801      	cmp	r0, #1
   1aae2:	b538      	push	{r3, r4, r5, lr}
   1aae4:	460d      	mov	r5, r1
   1aae6:	4614      	mov	r4, r2
   1aae8:	d00d      	beq.n	1ab06 <packet_handler_create+0x26>
   1aaea:	db11      	blt.n	1ab10 <packet_handler_create+0x30>
   1aaec:	2803      	cmp	r0, #3
   1aaee:	dc0f      	bgt.n	1ab10 <packet_handler_create+0x30>
   1aaf0:	2010      	movs	r0, #16
   1aaf2:	f7f9 f81d 	bl	13b30 <nrf_malloc>
   1aaf6:	2218      	movs	r2, #24
   1aaf8:	b120      	cbz	r0, 1ab04 <packet_handler_create+0x24>
   1aafa:	4b08      	ldr	r3, [pc, #32]	; (1ab1c <packet_handler_create+0x3c>)
   1aafc:	6045      	str	r5, [r0, #4]
   1aafe:	4413      	add	r3, r2
   1ab00:	6084      	str	r4, [r0, #8]
   1ab02:	6003      	str	r3, [r0, #0]
   1ab04:	bd38      	pop	{r3, r4, r5, pc}
   1ab06:	2014      	movs	r0, #20
   1ab08:	f7f9 f812 	bl	13b30 <nrf_malloc>
   1ab0c:	2230      	movs	r2, #48	; 0x30
   1ab0e:	e7f3      	b.n	1aaf8 <packet_handler_create+0x18>
   1ab10:	200c      	movs	r0, #12
   1ab12:	f7f9 f80d 	bl	13b30 <nrf_malloc>
   1ab16:	2200      	movs	r2, #0
   1ab18:	e7ee      	b.n	1aaf8 <packet_handler_create+0x18>
   1ab1a:	bf00      	nop
   1ab1c:	0001f8e8 	.word	0x0001f8e8

0001ab20 <packet_handler_delete>:
   1ab20:	b510      	push	{r4, lr}
   1ab22:	4604      	mov	r4, r0
   1ab24:	6803      	ldr	r3, [r0, #0]
   1ab26:	691b      	ldr	r3, [r3, #16]
   1ab28:	4798      	blx	r3
   1ab2a:	6823      	ldr	r3, [r4, #0]
   1ab2c:	4620      	mov	r0, r4
   1ab2e:	695b      	ldr	r3, [r3, #20]
   1ab30:	4798      	blx	r3
   1ab32:	4620      	mov	r0, r4
   1ab34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ab38:	f7f9 b804 	b.w	13b44 <nrf_free>

0001ab3c <stream_handler_init>:
   1ab3c:	b510      	push	{r4, lr}
   1ab3e:	4604      	mov	r4, r0
   1ab40:	200c      	movs	r0, #12
   1ab42:	f7f8 fff5 	bl	13b30 <nrf_malloc>
   1ab46:	60e0      	str	r0, [r4, #12]
   1ab48:	b128      	cbz	r0, 1ab56 <stream_handler_init+0x1a>
   1ab4a:	2300      	movs	r3, #0
   1ab4c:	6123      	str	r3, [r4, #16]
   1ab4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ab52:	f7fc baff 	b.w	17154 <linked_list_init>
   1ab56:	2004      	movs	r0, #4
   1ab58:	bd10      	pop	{r4, pc}
   1ab5a:	bf00      	nop

0001ab5c <stream_handler_put>:
   1ab5c:	b570      	push	{r4, r5, r6, lr}
   1ab5e:	4606      	mov	r6, r0
   1ab60:	2014      	movs	r0, #20
   1ab62:	460d      	mov	r5, r1
   1ab64:	f7f8 ffe4 	bl	13b30 <nrf_malloc>
   1ab68:	b178      	cbz	r0, 1ab8a <stream_handler_put+0x2e>
   1ab6a:	682b      	ldr	r3, [r5, #0]
   1ab6c:	4604      	mov	r4, r0
   1ab6e:	6043      	str	r3, [r0, #4]
   1ab70:	686b      	ldr	r3, [r5, #4]
   1ab72:	4601      	mov	r1, r0
   1ab74:	6083      	str	r3, [r0, #8]
   1ab76:	68eb      	ldr	r3, [r5, #12]
   1ab78:	60c3      	str	r3, [r0, #12]
   1ab7a:	68ab      	ldr	r3, [r5, #8]
   1ab7c:	6103      	str	r3, [r0, #16]
   1ab7e:	68f0      	ldr	r0, [r6, #12]
   1ab80:	f7fc faf2 	bl	17168 <linked_list_push>
   1ab84:	b920      	cbnz	r0, 1ab90 <stream_handler_put+0x34>
   1ab86:	6868      	ldr	r0, [r5, #4]
   1ab88:	bd70      	pop	{r4, r5, r6, pc}
   1ab8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ab8e:	bd70      	pop	{r4, r5, r6, pc}
   1ab90:	4620      	mov	r0, r4
   1ab92:	f7f8 ffd7 	bl	13b44 <nrf_free>
   1ab96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ab9a:	bd70      	pop	{r4, r5, r6, pc}

0001ab9c <stream_handler_get>:
   1ab9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aba0:	4682      	mov	sl, r0
   1aba2:	b087      	sub	sp, #28
   1aba4:	68c0      	ldr	r0, [r0, #12]
   1aba6:	4689      	mov	r9, r1
   1aba8:	4693      	mov	fp, r2
   1abaa:	f7fc fafd 	bl	171a8 <linked_list_peek>
   1abae:	2800      	cmp	r0, #0
   1abb0:	d072      	beq.n	1ac98 <stream_handler_get+0xfc>
   1abb2:	4605      	mov	r5, r0
   1abb4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1abb8:	b120      	cbz	r0, 1abc4 <stream_handler_get+0x28>
   1abba:	692b      	ldr	r3, [r5, #16]
   1abbc:	b113      	cbz	r3, 1abc4 <stream_handler_get+0x28>
   1abbe:	68ea      	ldr	r2, [r5, #12]
   1abc0:	2a00      	cmp	r2, #0
   1abc2:	d15c      	bne.n	1ac7e <stream_handler_get+0xe2>
   1abc4:	2300      	movs	r3, #0
   1abc6:	f8c9 300c 	str.w	r3, [r9, #12]
   1abca:	f8d9 2000 	ldr.w	r2, [r9]
   1abce:	f8d9 8004 	ldr.w	r8, [r9, #4]
   1abd2:	f8da 1010 	ldr.w	r1, [sl, #16]
   1abd6:	9201      	str	r2, [sp, #4]
   1abd8:	f1b8 0f00 	cmp.w	r8, #0
   1abdc:	d05a      	beq.n	1ac94 <stream_handler_get+0xf8>
   1abde:	f00b 0308 	and.w	r3, fp, #8
   1abe2:	2400      	movs	r4, #0
   1abe4:	9300      	str	r3, [sp, #0]
   1abe6:	e010      	b.n	1ac0a <stream_handler_get+0x6e>
   1abe8:	f8da 3010 	ldr.w	r3, [sl, #16]
   1abec:	443b      	add	r3, r7
   1abee:	f8ca 3010 	str.w	r3, [sl, #16]
   1abf2:	4628      	mov	r0, r5
   1abf4:	f7fc fae0 	bl	171b8 <linked_list_get_next>
   1abf8:	443c      	add	r4, r7
   1abfa:	4605      	mov	r5, r0
   1abfc:	2800      	cmp	r0, #0
   1abfe:	d038      	beq.n	1ac72 <stream_handler_get+0xd6>
   1ac00:	45a0      	cmp	r8, r4
   1ac02:	d936      	bls.n	1ac72 <stream_handler_get+0xd6>
   1ac04:	2100      	movs	r1, #0
   1ac06:	f8d9 2000 	ldr.w	r2, [r9]
   1ac0a:	68ae      	ldr	r6, [r5, #8]
   1ac0c:	eba8 0b04 	sub.w	fp, r8, r4
   1ac10:	1a76      	subs	r6, r6, r1
   1ac12:	455e      	cmp	r6, fp
   1ac14:	4637      	mov	r7, r6
   1ac16:	bf28      	it	cs
   1ac18:	465f      	movcs	r7, fp
   1ac1a:	b132      	cbz	r2, 1ac2a <stream_handler_get+0x8e>
   1ac1c:	6868      	ldr	r0, [r5, #4]
   1ac1e:	9b01      	ldr	r3, [sp, #4]
   1ac20:	4401      	add	r1, r0
   1ac22:	463a      	mov	r2, r7
   1ac24:	1918      	adds	r0, r3, r4
   1ac26:	f002 fd26 	bl	1d676 <memcpy>
   1ac2a:	9b00      	ldr	r3, [sp, #0]
   1ac2c:	2b00      	cmp	r3, #0
   1ac2e:	d1e0      	bne.n	1abf2 <stream_handler_get+0x56>
   1ac30:	455e      	cmp	r6, fp
   1ac32:	d8d9      	bhi.n	1abe8 <stream_handler_get+0x4c>
   1ac34:	f8da 000c 	ldr.w	r0, [sl, #12]
   1ac38:	f7fc faac 	bl	17194 <linked_list_pop>
   1ac3c:	4606      	mov	r6, r0
   1ac3e:	b170      	cbz	r0, 1ac5e <stream_handler_get+0xc2>
   1ac40:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   1ac44:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   1ac48:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1ac4c:	e9cd 1004 	strd	r1, r0, [sp, #16]
   1ac50:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   1ac54:	a802      	add	r0, sp, #8
   1ac56:	4798      	blx	r3
   1ac58:	4630      	mov	r0, r6
   1ac5a:	f7f8 ff73 	bl	13b44 <nrf_free>
   1ac5e:	2300      	movs	r3, #0
   1ac60:	4628      	mov	r0, r5
   1ac62:	f8ca 3010 	str.w	r3, [sl, #16]
   1ac66:	f7fc faa7 	bl	171b8 <linked_list_get_next>
   1ac6a:	443c      	add	r4, r7
   1ac6c:	4605      	mov	r5, r0
   1ac6e:	2800      	cmp	r0, #0
   1ac70:	d1c6      	bne.n	1ac00 <stream_handler_get+0x64>
   1ac72:	4620      	mov	r0, r4
   1ac74:	f8c9 4004 	str.w	r4, [r9, #4]
   1ac78:	b007      	add	sp, #28
   1ac7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac7e:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1ac82:	429a      	cmp	r2, r3
   1ac84:	bf28      	it	cs
   1ac86:	461a      	movcs	r2, r3
   1ac88:	f8c9 200c 	str.w	r2, [r9, #12]
   1ac8c:	6929      	ldr	r1, [r5, #16]
   1ac8e:	f002 fcf2 	bl	1d676 <memcpy>
   1ac92:	e79a      	b.n	1abca <stream_handler_get+0x2e>
   1ac94:	4644      	mov	r4, r8
   1ac96:	e7ec      	b.n	1ac72 <stream_handler_get+0xd6>
   1ac98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ac9c:	e7ec      	b.n	1ac78 <stream_handler_get+0xdc>
   1ac9e:	bf00      	nop

0001aca0 <stream_handler_available>:
   1aca0:	b510      	push	{r4, lr}
   1aca2:	4604      	mov	r4, r0
   1aca4:	68c0      	ldr	r0, [r0, #12]
   1aca6:	f7fc fa7f 	bl	171a8 <linked_list_peek>
   1acaa:	b150      	cbz	r0, 1acc2 <stream_handler_available+0x22>
   1acac:	6924      	ldr	r4, [r4, #16]
   1acae:	4264      	negs	r4, r4
   1acb0:	6883      	ldr	r3, [r0, #8]
   1acb2:	441c      	add	r4, r3
   1acb4:	f7fc fa80 	bl	171b8 <linked_list_get_next>
   1acb8:	2800      	cmp	r0, #0
   1acba:	d1f9      	bne.n	1acb0 <stream_handler_available+0x10>
   1acbc:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   1acc0:	bd10      	pop	{r4, pc}
   1acc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1acc6:	bd10      	pop	{r4, pc}

0001acc8 <stream_handler_flush>:
   1acc8:	b530      	push	{r4, r5, lr}
   1acca:	4605      	mov	r5, r0
   1accc:	68c0      	ldr	r0, [r0, #12]
   1acce:	b085      	sub	sp, #20
   1acd0:	b9a8      	cbnz	r0, 1acfe <stream_handler_flush+0x36>
   1acd2:	e01a      	b.n	1ad0a <stream_handler_flush+0x42>
   1acd4:	68e8      	ldr	r0, [r5, #12]
   1acd6:	f7fc fa5d 	bl	17194 <linked_list_pop>
   1acda:	4604      	mov	r4, r0
   1acdc:	b170      	cbz	r0, 1acfc <stream_handler_flush+0x34>
   1acde:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1ace2:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1ace6:	e9cd 0100 	strd	r0, r1, [sp]
   1acea:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1acee:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1acf2:	4668      	mov	r0, sp
   1acf4:	4798      	blx	r3
   1acf6:	4620      	mov	r0, r4
   1acf8:	f7f8 ff24 	bl	13b44 <nrf_free>
   1acfc:	68e8      	ldr	r0, [r5, #12]
   1acfe:	f7fc fa59 	bl	171b4 <linked_list_size_get>
   1ad02:	2800      	cmp	r0, #0
   1ad04:	d1e6      	bne.n	1acd4 <stream_handler_flush+0xc>
   1ad06:	b005      	add	sp, #20
   1ad08:	bd30      	pop	{r4, r5, pc}
   1ad0a:	2008      	movs	r0, #8
   1ad0c:	b005      	add	sp, #20
   1ad0e:	bd30      	pop	{r4, r5, pc}

0001ad10 <stream_handler_free>:
   1ad10:	b530      	push	{r4, r5, lr}
   1ad12:	4605      	mov	r5, r0
   1ad14:	68c0      	ldr	r0, [r0, #12]
   1ad16:	b085      	sub	sp, #20
   1ad18:	b9a0      	cbnz	r0, 1ad44 <stream_handler_free+0x34>
   1ad1a:	e01c      	b.n	1ad56 <stream_handler_free+0x46>
   1ad1c:	f7fc fa3a 	bl	17194 <linked_list_pop>
   1ad20:	4604      	mov	r4, r0
   1ad22:	b170      	cbz	r0, 1ad42 <stream_handler_free+0x32>
   1ad24:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1ad28:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1ad2c:	e9cd 0100 	strd	r0, r1, [sp]
   1ad30:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1ad34:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1ad38:	4668      	mov	r0, sp
   1ad3a:	4798      	blx	r3
   1ad3c:	4620      	mov	r0, r4
   1ad3e:	f7f8 ff01 	bl	13b44 <nrf_free>
   1ad42:	68e8      	ldr	r0, [r5, #12]
   1ad44:	f7fc fa36 	bl	171b4 <linked_list_size_get>
   1ad48:	4604      	mov	r4, r0
   1ad4a:	68e8      	ldr	r0, [r5, #12]
   1ad4c:	2c00      	cmp	r4, #0
   1ad4e:	d1e5      	bne.n	1ad1c <stream_handler_free+0xc>
   1ad50:	f7f8 fef8 	bl	13b44 <nrf_free>
   1ad54:	60ec      	str	r4, [r5, #12]
   1ad56:	b005      	add	sp, #20
   1ad58:	bd30      	pop	{r4, r5, pc}
   1ad5a:	bf00      	nop

0001ad5c <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   1ad5c:	4a07      	ldr	r2, [pc, #28]	; (1ad7c <SystemInit+0x20>)
   1ad5e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1ad62:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1ad66:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   1ad6a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1ad6e:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   1ad72:	4b03      	ldr	r3, [pc, #12]	; (1ad80 <SystemInit+0x24>)
   1ad74:	4a03      	ldr	r2, [pc, #12]	; (1ad84 <SystemInit+0x28>)
   1ad76:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   1ad78:	4770      	bx	lr
   1ad7a:	bf00      	nop
   1ad7c:	e000ed00 	.word	0xe000ed00
   1ad80:	2002c560 	.word	0x2002c560
   1ad84:	03d09000 	.word	0x03d09000

0001ad88 <nrfx_uarte_init>:
}

nrfx_err_t nrfx_uarte_init(nrfx_uarte_t const *        p_instance,
                           nrfx_uarte_config_t const * p_config,
                           nrfx_uarte_event_handler_t  event_handler)
{
   1ad88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad8c:	4606      	mov	r6, r0
    NRFX_ASSERT(p_config);
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ad8e:	7904      	ldrb	r4, [r0, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1ad90:	2024      	movs	r0, #36	; 0x24
   1ad92:	4d42      	ldr	r5, [pc, #264]	; (1ae9c <nrfx_uarte_init+0x114>)
   1ad94:	fb00 5004 	mla	r0, r0, r4, r5
   1ad98:	f890 0020 	ldrb.w	r0, [r0, #32]
   1ad9c:	2800      	cmp	r0, #0
   1ad9e:	d17a      	bne.n	1ae96 <nrfx_uarte_init+0x10e>
    if (p_config->pseltxd != NRF_UARTE_PSEL_DISCONNECTED)
   1ada0:	680f      	ldr	r7, [r1, #0]
   1ada2:	1c7b      	adds	r3, r7, #1
   1ada4:	d009      	beq.n	1adba <nrfx_uarte_init+0x32>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ada6:	2301      	movs	r3, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1ada8:	f04f 0c03 	mov.w	ip, #3
    p_reg->OUTSET = set_mask;
   1adac:	483c      	ldr	r0, [pc, #240]	; (1aea0 <nrfx_uarte_init+0x118>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1adae:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1adb0:	6083      	str	r3, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1adb2:	f107 0380 	add.w	r3, r7, #128	; 0x80
   1adb6:	f840 c023 	str.w	ip, [r0, r3, lsl #2]
    if (p_config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED)
   1adba:	f8d1 c004 	ldr.w	ip, [r1, #4]
                    | (uint32_t)p_cfg->hwfc;
   1adbe:	f891 801b 	ldrb.w	r8, [r1, #27]
   1adc2:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
   1adc6:	bf1f      	itttt	ne
   1adc8:	f04f 0e00 	movne.w	lr, #0
   1adcc:	4834      	ldrne	r0, [pc, #208]	; (1aea0 <nrfx_uarte_init+0x118>)
   1adce:	f10c 0380 	addne.w	r3, ip, #128	; 0x80
   1add2:	f840 e023 	strne.w	lr, [r0, r3, lsl #2]
    nrf_uarte_baudrate_set(p_instance->p_reg, p_config->baudrate);
   1add6:	6948      	ldr	r0, [r1, #20]
   1add8:	6833      	ldr	r3, [r6, #0]
   1adda:	f891 e019 	ldrb.w	lr, [r1, #25]
    p_reg->BAUDRATE = baudrate;
   1adde:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   1ade2:	7e88      	ldrb	r0, [r1, #26]
    if (p_config->hal_cfg.hwfc == NRF_UARTE_HWFC_ENABLED)
   1ade4:	f1be 0f01 	cmp.w	lr, #1
   1ade8:	ea40 0008 	orr.w	r0, r0, r8
   1adec:	ea4e 0000 	orr.w	r0, lr, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1adf0:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->PSEL.TXD = pseltxd;
   1adf4:	f8c3 750c 	str.w	r7, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1adf8:	f8c3 c514 	str.w	ip, [r3, #1300]	; 0x514
   1adfc:	d120      	bne.n	1ae40 <nrfx_uarte_init+0xb8>
        if (p_config->pselcts != NRF_UARTE_PSEL_DISCONNECTED)
   1adfe:	688f      	ldr	r7, [r1, #8]
   1ae00:	1c78      	adds	r0, r7, #1
   1ae02:	bf1f      	itttt	ne
   1ae04:	f04f 0e00 	movne.w	lr, #0
   1ae08:	f8df c094 	ldrne.w	ip, [pc, #148]	; 1aea0 <nrfx_uarte_init+0x118>
   1ae0c:	f107 0080 	addne.w	r0, r7, #128	; 0x80
   1ae10:	f84c e020 	strne.w	lr, [ip, r0, lsl #2]
        if (p_config->pselrts != NRF_UARTE_PSEL_DISCONNECTED)
   1ae14:	68c8      	ldr	r0, [r1, #12]
   1ae16:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1ae1a:	d00d      	beq.n	1ae38 <nrfx_uarte_init+0xb0>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ae1c:	f04f 0c01 	mov.w	ip, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1ae20:	f04f 0803 	mov.w	r8, #3
    p_reg->OUTSET = set_mask;
   1ae24:	f8df e078 	ldr.w	lr, [pc, #120]	; 1aea0 <nrfx_uarte_init+0x118>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ae28:	fa0c fc00 	lsl.w	ip, ip, r0
    p_reg->OUTSET = set_mask;
   1ae2c:	f8ce c008 	str.w	ip, [lr, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1ae30:	f100 0c80 	add.w	ip, r0, #128	; 0x80
   1ae34:	f84e 802c 	str.w	r8, [lr, ip, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   1ae38:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1ae3c:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    apply_config(p_instance, p_config);

    p_cb->handler   = event_handler;
   1ae40:	2324      	movs	r3, #36	; 0x24
   1ae42:	4363      	muls	r3, r4
    p_cb->p_context = p_config->p_context;
   1ae44:	6909      	ldr	r1, [r1, #16]
    p_cb->handler   = event_handler;
   1ae46:	18e8      	adds	r0, r5, r3
   1ae48:	6042      	str	r2, [r0, #4]
    p_cb->p_context = p_config->p_context;
   1ae4a:	50e9      	str	r1, [r5, r3]

    if (p_cb->handler)
   1ae4c:	b192      	cbz	r2, 1ae74 <nrfx_uarte_init+0xec>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ae4e:	2300      	movs	r3, #0
    {
        interrupts_enable(p_instance, p_config->interrupt_priority);
   1ae50:	6830      	ldr	r0, [r6, #0]
   1ae52:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
   1ae56:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   1ae5a:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1ae5e:	f8c0 3144 	str.w	r3, [r0, #324]	; 0x144
   1ae62:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
    p_reg->INTENSET = mask;
   1ae66:	4b0f      	ldr	r3, [pc, #60]	; (1aea4 <nrfx_uarte_init+0x11c>)
   1ae68:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    NRFX_IRQ_ENABLE(nrfx_get_irq_number((void *)p_instance->p_reg));
   1ae6c:	f340 3007 	sbfx	r0, r0, #12, #8
   1ae70:	f7f4 fd38 	bl	f8e4 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1ae74:	2208      	movs	r2, #8
    }

    nrf_uarte_enable(p_instance->p_reg);
   1ae76:	6833      	ldr	r3, [r6, #0]
    p_cb->tx_buffer_length           = 0;
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1ae78:	480b      	ldr	r0, [pc, #44]	; (1aea8 <nrfx_uarte_init+0x120>)
   1ae7a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->rx_buffer_length           = 0;
   1ae7e:	2324      	movs	r3, #36	; 0x24
   1ae80:	2200      	movs	r2, #0
   1ae82:	fb03 5304 	mla	r3, r3, r4, r5
    p_cb->rx_secondary_buffer_length = 0;
   1ae86:	e9c3 2206 	strd	r2, r2, [r3, #24]
    p_cb->tx_buffer_length           = 0;
   1ae8a:	615a      	str	r2, [r3, #20]
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
   1ae8c:	2201      	movs	r2, #1
   1ae8e:	f883 2020 	strb.w	r2, [r3, #32]
}
   1ae92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
   1ae96:	4805      	ldr	r0, [pc, #20]	; (1aeac <nrfx_uarte_init+0x124>)
   1ae98:	e7fb      	b.n	1ae92 <nrfx_uarte_init+0x10a>
   1ae9a:	bf00      	nop
   1ae9c:	20020b40 	.word	0x20020b40
   1aea0:	40842500 	.word	0x40842500
   1aea4:	00420310 	.word	0x00420310
   1aea8:	0bad0000 	.word	0x0bad0000
   1aeac:	0bad0005 	.word	0x0bad0005

0001aeb0 <nrfx_uarte_tx>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1aeb0:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000

    nrfx_err_t err_code;

    // EasyDMA requires that transfer buffers are placed in DataRAM,
    // signal error if the are not.
    if (!nrfx_is_in_ram(p_data))
   1aeb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
   1aeb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!nrfx_is_in_ram(p_data))
   1aeba:	d12e      	bne.n	1af1a <nrfx_uarte_tx+0x6a>
    return err_code;
}

bool nrfx_uarte_tx_in_progress(nrfx_uarte_t const * p_instance)
{
    return (m_cb[p_instance->drv_inst_idx].tx_buffer_length != 0);
   1aebc:	2424      	movs	r4, #36	; 0x24
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1aebe:	7905      	ldrb	r5, [r0, #4]
    return (m_cb[p_instance->drv_inst_idx].tx_buffer_length != 0);
   1aec0:	4f19      	ldr	r7, [pc, #100]	; (1af28 <nrfx_uarte_tx+0x78>)
   1aec2:	fb04 7405 	mla	r4, r4, r5, r7
   1aec6:	6966      	ldr	r6, [r4, #20]
    if (nrfx_uarte_tx_in_progress(p_instance))
   1aec8:	bb4e      	cbnz	r6, 1af1e <nrfx_uarte_tx+0x6e>
    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_ENDTX);
   1aeca:	6803      	ldr	r3, [r0, #0]
    p_cb->tx_buffer_length = length;
   1aecc:	6162      	str	r2, [r4, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1aece:	f8c3 6120 	str.w	r6, [r3, #288]	; 0x120
   1aed2:	f8c3 6158 	str.w	r6, [r3, #344]	; 0x158
    nrf_uarte_tx_buffer_set(p_instance->p_reg, p_cb->p_tx_buffer, p_cb->tx_buffer_length);
   1aed6:	6962      	ldr	r2, [r4, #20]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1aed8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1aedc:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1aee0:	2201      	movs	r2, #1
    p_cb->p_tx_buffer      = p_data;
   1aee2:	60a1      	str	r1, [r4, #8]
   1aee4:	609a      	str	r2, [r3, #8]
    if (p_cb->handler == NULL)
   1aee6:	6862      	ldr	r2, [r4, #4]
   1aee8:	b9da      	cbnz	r2, 1af22 <nrfx_uarte_tx+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1aeea:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1aeee:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
        while ((!endtx) && (!txstopped));
   1aef2:	b919      	cbnz	r1, 1aefc <nrfx_uarte_tx+0x4c>
   1aef4:	2a00      	cmp	r2, #0
   1aef6:	d0f8      	beq.n	1aeea <nrfx_uarte_tx+0x3a>
            err_code = NRFX_ERROR_FORBIDDEN;
   1aef8:	480c      	ldr	r0, [pc, #48]	; (1af2c <nrfx_uarte_tx+0x7c>)
   1aefa:	e008      	b.n	1af0e <nrfx_uarte_tx+0x5e>
        if (txstopped)
   1aefc:	2a00      	cmp	r2, #0
   1aefe:	d1fb      	bne.n	1aef8 <nrfx_uarte_tx+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1af00:	2201      	movs	r2, #1
   1af02:	60da      	str	r2, [r3, #12]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1af04:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
            while (!nrf_uarte_event_check(p_instance->p_reg, NRF_UARTE_EVENT_TXSTOPPED))
   1af08:	2a00      	cmp	r2, #0
   1af0a:	d0fb      	beq.n	1af04 <nrfx_uarte_tx+0x54>
    err_code = NRFX_SUCCESS;
   1af0c:	4808      	ldr	r0, [pc, #32]	; (1af30 <nrfx_uarte_tx+0x80>)
        p_cb->tx_buffer_length = 0;
   1af0e:	2324      	movs	r3, #36	; 0x24
   1af10:	fb03 7505 	mla	r5, r3, r5, r7
   1af14:	2300      	movs	r3, #0
   1af16:	616b      	str	r3, [r5, #20]
}
   1af18:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return err_code;
   1af1a:	4806      	ldr	r0, [pc, #24]	; (1af34 <nrfx_uarte_tx+0x84>)
   1af1c:	e7fc      	b.n	1af18 <nrfx_uarte_tx+0x68>
        return err_code;
   1af1e:	4806      	ldr	r0, [pc, #24]	; (1af38 <nrfx_uarte_tx+0x88>)
   1af20:	e7fa      	b.n	1af18 <nrfx_uarte_tx+0x68>
    err_code = NRFX_SUCCESS;
   1af22:	4803      	ldr	r0, [pc, #12]	; (1af30 <nrfx_uarte_tx+0x80>)
   1af24:	e7f8      	b.n	1af18 <nrfx_uarte_tx+0x68>
   1af26:	bf00      	nop
   1af28:	20020b40 	.word	0x20020b40
   1af2c:	0bad0008 	.word	0x0bad0008
   1af30:	0bad0000 	.word	0x0bad0000
   1af34:	0bad000a 	.word	0x0bad000a
   1af38:	0bad000b 	.word	0x0bad000b

0001af3c <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   1af3c:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   1af3e:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   1af40:	4b08      	ldr	r3, [pc, #32]	; (1af64 <z_sys_device_do_config_level+0x28>)
   1af42:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1af46:	3001      	adds	r0, #1
   1af48:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1af4c:	42a5      	cmp	r5, r4
   1af4e:	d800      	bhi.n	1af52 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   1af50:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   1af52:	6823      	ldr	r3, [r4, #0]
   1af54:	4620      	mov	r0, r4
   1af56:	685b      	ldr	r3, [r3, #4]
   1af58:	4798      	blx	r3
		if (retval != 0) {
   1af5a:	b100      	cbz	r0, 1af5e <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   1af5c:	6066      	str	r6, [r4, #4]
								info++) {
   1af5e:	340c      	adds	r4, #12
   1af60:	e7f4      	b.n	1af4c <z_sys_device_do_config_level+0x10>
   1af62:	bf00      	nop
   1af64:	0001f930 	.word	0x0001f930

0001af68 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   1af68:	4b10      	ldr	r3, [pc, #64]	; (1afac <z_impl_device_get_binding+0x44>)
{
   1af6a:	b570      	push	{r4, r5, r6, lr}
   1af6c:	4605      	mov	r5, r0
   1af6e:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   1af70:	4c0f      	ldr	r4, [pc, #60]	; (1afb0 <z_impl_device_get_binding+0x48>)
   1af72:	429c      	cmp	r4, r3
   1af74:	d104      	bne.n	1af80 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   1af76:	4c0e      	ldr	r4, [pc, #56]	; (1afb0 <z_impl_device_get_binding+0x48>)
   1af78:	42b4      	cmp	r4, r6
   1af7a:	d109      	bne.n	1af90 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   1af7c:	2400      	movs	r4, #0
   1af7e:	e012      	b.n	1afa6 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   1af80:	6862      	ldr	r2, [r4, #4]
   1af82:	b11a      	cbz	r2, 1af8c <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   1af84:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   1af86:	6812      	ldr	r2, [r2, #0]
   1af88:	42aa      	cmp	r2, r5
   1af8a:	d00c      	beq.n	1afa6 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1af8c:	340c      	adds	r4, #12
   1af8e:	e7f0      	b.n	1af72 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   1af90:	6863      	ldr	r3, [r4, #4]
   1af92:	b90b      	cbnz	r3, 1af98 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1af94:	340c      	adds	r4, #12
   1af96:	e7ef      	b.n	1af78 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   1af98:	6823      	ldr	r3, [r4, #0]
   1af9a:	4628      	mov	r0, r5
   1af9c:	6819      	ldr	r1, [r3, #0]
   1af9e:	f002 fb36 	bl	1d60e <strcmp>
   1afa2:	2800      	cmp	r0, #0
   1afa4:	d1f6      	bne.n	1af94 <z_impl_device_get_binding+0x2c>
}
   1afa6:	4620      	mov	r0, r4
   1afa8:	bd70      	pop	{r4, r5, r6, pc}
   1afaa:	bf00      	nop
   1afac:	2002c650 	.word	0x2002c650
   1afb0:	2002c56c 	.word	0x2002c56c

0001afb4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1afb4:	4b01      	ldr	r3, [pc, #4]	; (1afbc <z_impl_z_errno+0x8>)
   1afb6:	6898      	ldr	r0, [r3, #8]
}
   1afb8:	3054      	adds	r0, #84	; 0x54
   1afba:	4770      	bx	lr
   1afbc:	20024d28 	.word	0x20024d28

0001afc0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1afc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1afc4:	4605      	mov	r5, r0
   1afc6:	4688      	mov	r8, r1
	return z_impl_k_current_get();
   1afc8:	f000 fe9a 	bl	1bd00 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1afcc:	2201      	movs	r2, #1
   1afce:	f04f 0300 	mov.w	r3, #0
   1afd2:	4c26      	ldr	r4, [pc, #152]	; (1b06c <z_fatal_error+0xac>)
   1afd4:	f362 0307 	bfi	r3, r2, #0, #8
   1afd8:	4a25      	ldr	r2, [pc, #148]	; (1b070 <z_fatal_error+0xb0>)
   1afda:	2d04      	cmp	r5, #4
   1afdc:	eba4 0402 	sub.w	r4, r4, r2
   1afe0:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   1afe4:	bf98      	it	ls
   1afe6:	4a23      	ldrls	r2, [pc, #140]	; (1b074 <z_fatal_error+0xb4>)
   1afe8:	f364 138f 	bfi	r3, r4, #6, #10
   1afec:	f8ad 3000 	strh.w	r3, [sp]
   1aff0:	4606      	mov	r6, r0
   1aff2:	f04f 0300 	mov.w	r3, #0
   1aff6:	bf94      	ite	ls
   1aff8:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
   1affc:	4a1e      	ldrhi	r2, [pc, #120]	; (1b078 <z_fatal_error+0xb8>)
   1affe:	4629      	mov	r1, r5
   1b000:	481e      	ldr	r0, [pc, #120]	; (1b07c <z_fatal_error+0xbc>)
   1b002:	f001 fdfb 	bl	1cbfc <log_3>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1b006:	f8d8 301c 	ldr.w	r3, [r8, #28]
   1b00a:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
   1b00e:	b14b      	cbz	r3, 1b024 <z_fatal_error+0x64>
		LOG_ERR("Fault during interrupt handling\n");
   1b010:	f04f 0100 	mov.w	r1, #0
   1b014:	2301      	movs	r3, #1
   1b016:	f363 0107 	bfi	r1, r3, #0, #8
   1b01a:	f364 118f 	bfi	r1, r4, #6, #10
   1b01e:	4818      	ldr	r0, [pc, #96]	; (1b080 <z_fatal_error+0xc0>)
   1b020:	f001 fdb3 	bl	1cb8a <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1b024:	f04f 0700 	mov.w	r7, #0
   1b028:	2301      	movs	r3, #1
	const char *thread_name = k_thread_name_get(thread);
   1b02a:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
   1b02c:	f363 0707 	bfi	r7, r3, #0, #8
   1b030:	f364 178f 	bfi	r7, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   1b034:	f003 fe69 	bl	1ed0a <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1b038:	b1b0      	cbz	r0, 1b068 <z_fatal_error+0xa8>
   1b03a:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   1b03c:	4b11      	ldr	r3, [pc, #68]	; (1b084 <z_fatal_error+0xc4>)
   1b03e:	2a00      	cmp	r2, #0
   1b040:	bf08      	it	eq
   1b042:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   1b044:	f7f3 ff92 	bl	ef6c <log_strdup>
   1b048:	463b      	mov	r3, r7
   1b04a:	4602      	mov	r2, r0
   1b04c:	4631      	mov	r1, r6
   1b04e:	480e      	ldr	r0, [pc, #56]	; (1b088 <z_fatal_error+0xc8>)
   1b050:	f001 fdbc 	bl	1cbcc <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   1b054:	4641      	mov	r1, r8
   1b056:	4628      	mov	r0, r5
   1b058:	f7f7 fbce 	bl	127f8 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
   1b05c:	4630      	mov	r0, r6
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
   1b05e:	b002      	add	sp, #8
   1b060:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b064:	f7f5 b89e 	b.w	101a4 <z_impl_k_thread_abort>
		thread_name = "unknown";
   1b068:	4806      	ldr	r0, [pc, #24]	; (1b084 <z_fatal_error+0xc4>)
   1b06a:	e7eb      	b.n	1b044 <z_fatal_error+0x84>
   1b06c:	0001f3f0 	.word	0x0001f3f0
   1b070:	0001f390 	.word	0x0001f390
   1b074:	0001f948 	.word	0x0001f948
   1b078:	00020efc 	.word	0x00020efc
   1b07c:	00020f12 	.word	0x00020f12
   1b080:	00020f3a 	.word	0x00020f3a
   1b084:	00020f0a 	.word	0x00020f0a
   1b088:	00020f5b 	.word	0x00020f5b

0001b08c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1b08c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1b08e:	4d0b      	ldr	r5, [pc, #44]	; (1b0bc <idle+0x30>)
	__asm__ volatile(
   1b090:	f04f 0220 	mov.w	r2, #32
   1b094:	f3ef 8311 	mrs	r3, BASEPRI
   1b098:	f382 8811 	msr	BASEPRI, r2
   1b09c:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   1b0a0:	f003 fe8b 	bl	1edba <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1b0a4:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   1b0a6:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1b0a8:	2802      	cmp	r0, #2
   1b0aa:	bfd8      	it	le
   1b0ac:	4608      	movle	r0, r1
   1b0ae:	f003 fe94 	bl	1edda <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1b0b2:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1b0b4:	f7f4 fca0 	bl	f9f8 <arch_cpu_idle>
   1b0b8:	e7ea      	b.n	1b090 <idle+0x4>
   1b0ba:	bf00      	nop
   1b0bc:	20024d28 	.word	0x20024d28

0001b0c0 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1b0c0:	4802      	ldr	r0, [pc, #8]	; (1b0cc <z_bss_zero+0xc>)
   1b0c2:	4a03      	ldr	r2, [pc, #12]	; (1b0d0 <z_bss_zero+0x10>)
   1b0c4:	2100      	movs	r1, #0
   1b0c6:	1a12      	subs	r2, r2, r0
   1b0c8:	f002 baff 	b.w	1d6ca <memset>
   1b0cc:	20020000 	.word	0x20020000
   1b0d0:	200266b4 	.word	0x200266b4

0001b0d4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1b0d4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1b0d6:	4806      	ldr	r0, [pc, #24]	; (1b0f0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1b0d8:	4a06      	ldr	r2, [pc, #24]	; (1b0f4 <z_data_copy+0x20>)
   1b0da:	4907      	ldr	r1, [pc, #28]	; (1b0f8 <z_data_copy+0x24>)
   1b0dc:	1a12      	subs	r2, r2, r0
   1b0de:	f002 faca 	bl	1d676 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1b0e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1b0e6:	4a05      	ldr	r2, [pc, #20]	; (1b0fc <z_data_copy+0x28>)
   1b0e8:	4905      	ldr	r1, [pc, #20]	; (1b100 <z_data_copy+0x2c>)
   1b0ea:	4806      	ldr	r0, [pc, #24]	; (1b104 <z_data_copy+0x30>)
   1b0ec:	f002 bac3 	b.w	1d676 <memcpy>
   1b0f0:	2002c50c 	.word	0x2002c50c
   1b0f4:	2002c75c 	.word	0x2002c75c
   1b0f8:	00020fc4 	.word	0x00020fc4
   1b0fc:	00000000 	.word	0x00000000
   1b100:	00020fc4 	.word	0x00020fc4
   1b104:	20020000 	.word	0x20020000

0001b108 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1b108:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1b10a:	2002      	movs	r0, #2
   1b10c:	f7ff ff16 	bl	1af3c <z_sys_device_do_config_level>
#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
			STRINGIFY(BUILD_VERSION), BOOT_DELAY_BANNER);
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
   1b110:	4a08      	ldr	r2, [pc, #32]	; (1b134 <bg_thread_main+0x2c>)
   1b112:	4909      	ldr	r1, [pc, #36]	; (1b138 <bg_thread_main+0x30>)
   1b114:	4809      	ldr	r0, [pc, #36]	; (1b13c <bg_thread_main+0x34>)
   1b116:	f001 fd05 	bl	1cb24 <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   1b11a:	2003      	movs	r0, #3
   1b11c:	f7ff ff0e 	bl	1af3c <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   1b120:	f000 ff38 	bl	1bf94 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1b124:	f001 f974 	bl	1c410 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1b128:	4a05      	ldr	r2, [pc, #20]	; (1b140 <bg_thread_main+0x38>)
   1b12a:	7b13      	ldrb	r3, [r2, #12]
   1b12c:	f023 0301 	bic.w	r3, r3, #1
   1b130:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1b132:	bd08      	pop	{r3, pc}
   1b134:	0001fe0f 	.word	0x0001fe0f
   1b138:	00020f73 	.word	0x00020f73
   1b13c:	00020f79 	.word	0x00020f79
   1b140:	20020c14 	.word	0x20020c14

0001b144 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1b144:	b580      	push	{r7, lr}
   1b146:	b0b2      	sub	sp, #200	; 0xc8
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1b148:	f7f3 fd84 	bl	ec54 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   1b14c:	4b33      	ldr	r3, [pc, #204]	; (1b21c <z_cstart+0xd8>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1b14e:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b152:	2400      	movs	r4, #0
   1b154:	23e0      	movs	r3, #224	; 0xe0
   1b156:	4d32      	ldr	r5, [pc, #200]	; (1b220 <z_cstart+0xdc>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   1b158:	2701      	movs	r7, #1
   1b15a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1b15e:	77ec      	strb	r4, [r5, #31]
   1b160:	762c      	strb	r4, [r5, #24]
   1b162:	766c      	strb	r4, [r5, #25]
   1b164:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1b166:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   1b168:	4e2e      	ldr	r6, [pc, #184]	; (1b224 <z_cstart+0xe0>)
   1b16a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1b16e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1b170:	f7f4 fff2 	bl	10158 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1b174:	f7f4 fc3a 	bl	f9ec <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1b178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b17c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1b17e:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   1b180:	ab06      	add	r3, sp, #24
   1b182:	22b0      	movs	r2, #176	; 0xb0
   1b184:	4621      	mov	r1, r4
   1b186:	4618      	mov	r0, r3
   1b188:	f002 fa9f 	bl	1d6ca <memset>
	_current = &dummy_thread;
   1b18c:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1b18e:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   1b190:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1b194:	f7ff fed2 	bl	1af3c <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1b198:	4638      	mov	r0, r7
   1b19a:	f7ff fecf 	bl	1af3c <z_sys_device_do_config_level>
	_kernel.ready_q.cache = &z_main_thread;
   1b19e:	4d22      	ldr	r5, [pc, #136]	; (1b228 <z_cstart+0xe4>)
	z_sched_init();
   1b1a0:	f000 fd2e 	bl	1bc00 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1b1a4:	4b21      	ldr	r3, [pc, #132]	; (1b22c <z_cstart+0xe8>)
   1b1a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1b1aa:	e9cd 7304 	strd	r7, r3, [sp, #16]
   1b1ae:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1b1b2:	4b1f      	ldr	r3, [pc, #124]	; (1b230 <z_cstart+0xec>)
   1b1b4:	e9cd 4400 	strd	r4, r4, [sp]
   1b1b8:	491e      	ldr	r1, [pc, #120]	; (1b234 <z_cstart+0xf0>)
   1b1ba:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   1b1bc:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1b1be:	f000 fe49 	bl	1be54 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b1c2:	7b6b      	ldrb	r3, [r5, #13]
   1b1c4:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b1c8:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b1cc:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b1ce:	d104      	bne.n	1b1da <z_cstart+0x96>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   1b1d0:	69ab      	ldr	r3, [r5, #24]
   1b1d2:	b913      	cbnz	r3, 1b1da <z_cstart+0x96>
		z_add_thread_to_ready_q(thread);
   1b1d4:	4628      	mov	r0, r5
   1b1d6:	f000 fb53 	bl	1b880 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
   1b1da:	4b17      	ldr	r3, [pc, #92]	; (1b238 <z_cstart+0xf4>)
   1b1dc:	2201      	movs	r2, #1
   1b1de:	9305      	str	r3, [sp, #20]
   1b1e0:	230f      	movs	r3, #15
   1b1e2:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1b1e6:	2300      	movs	r3, #0
   1b1e8:	4d14      	ldr	r5, [pc, #80]	; (1b23c <z_cstart+0xf8>)
   1b1ea:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1b1ee:	9300      	str	r3, [sp, #0]
   1b1f0:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1b1f4:	4b12      	ldr	r3, [pc, #72]	; (1b240 <z_cstart+0xfc>)
   1b1f6:	4913      	ldr	r1, [pc, #76]	; (1b244 <z_cstart+0x100>)
   1b1f8:	4628      	mov	r0, r5
   1b1fa:	f000 fe2b 	bl	1be54 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b1fe:	7b6b      	ldrb	r3, [r5, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1b200:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1b204:	f023 0304 	bic.w	r3, r3, #4
   1b208:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1b20a:	4b0f      	ldr	r3, [pc, #60]	; (1b248 <z_cstart+0x104>)
   1b20c:	4909      	ldr	r1, [pc, #36]	; (1b234 <z_cstart+0xf0>)
	list->tail = (sys_dnode_t *)list;
   1b20e:	e9c6 3306 	strd	r3, r3, [r6, #24]
   1b212:	4805      	ldr	r0, [pc, #20]	; (1b228 <z_cstart+0xe4>)
   1b214:	4b06      	ldr	r3, [pc, #24]	; (1b230 <z_cstart+0xec>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   1b216:	60f5      	str	r5, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1b218:	f7f4 fbbe 	bl	f998 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1b21c:	20028af8 	.word	0x20028af8
   1b220:	e000ed00 	.word	0xe000ed00
   1b224:	20024d28 	.word	0x20024d28
   1b228:	20020c14 	.word	0x20020c14
   1b22c:	00020fa5 	.word	0x00020fa5
   1b230:	0001b109 	.word	0x0001b109
   1b234:	200271b8 	.word	0x200271b8
   1b238:	00020faa 	.word	0x00020faa
   1b23c:	20020b64 	.word	0x20020b64
   1b240:	0001b08d 	.word	0x0001b08d
   1b244:	200281b8 	.word	0x200281b8
   1b248:	20024d40 	.word	0x20024d40

0001b24c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   1b24c:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
   1b24e:	2400      	movs	r4, #0
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1b250:	4b0a      	ldr	r3, [pc, #40]	; (1b27c <init_mem_slab_module+0x30>)
   1b252:	480b      	ldr	r0, [pc, #44]	; (1b280 <init_mem_slab_module+0x34>)
   1b254:	4283      	cmp	r3, r0
   1b256:	d301      	bcc.n	1b25c <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
   1b258:	2000      	movs	r0, #0
   1b25a:	bd70      	pop	{r4, r5, r6, pc}
	for (j = 0U; j < slab->num_blocks; j++) {
   1b25c:	2100      	movs	r1, #0
	p = slab->buffer;
   1b25e:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b260:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1b262:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b264:	42a9      	cmp	r1, r5
   1b266:	d101      	bne.n	1b26c <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1b268:	331c      	adds	r3, #28
   1b26a:	e7f3      	b.n	1b254 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   1b26c:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b26e:	3101      	adds	r1, #1
		*(char **)p = slab->free_list;
   1b270:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
   1b272:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
   1b274:	615a      	str	r2, [r3, #20]
		p += slab->block_size;
   1b276:	4432      	add	r2, r6
   1b278:	e7f4      	b.n	1b264 <init_mem_slab_module+0x18>
   1b27a:	bf00      	nop
   1b27c:	2002c650 	.word	0x2002c650
   1b280:	2002c66c 	.word	0x2002c66c

0001b284 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   1b284:	b510      	push	{r4, lr}
   1b286:	4613      	mov	r3, r2
   1b288:	460c      	mov	r4, r1
   1b28a:	f04f 0220 	mov.w	r2, #32
   1b28e:	f3ef 8111 	mrs	r1, BASEPRI
   1b292:	f382 8811 	msr	BASEPRI, r2
   1b296:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1b29a:	6942      	ldr	r2, [r0, #20]
   1b29c:	b15a      	cbz	r2, 1b2b6 <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
   1b29e:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1b2a0:	6813      	ldr	r3, [r2, #0]
   1b2a2:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1b2a4:	6983      	ldr	r3, [r0, #24]
   1b2a6:	3301      	adds	r3, #1
   1b2a8:	6183      	str	r3, [r0, #24]
		result = 0;
   1b2aa:	2000      	movs	r0, #0
	__asm__ volatile(
   1b2ac:	f381 8811 	msr	BASEPRI, r1
   1b2b0:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1b2b4:	e00d      	b.n	1b2d2 <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
   1b2b6:	b91b      	cbnz	r3, 1b2c0 <k_mem_slab_alloc+0x3c>
		*mem = NULL;
   1b2b8:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1b2ba:	f06f 000b 	mvn.w	r0, #11
   1b2be:	e7f5      	b.n	1b2ac <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1b2c0:	4602      	mov	r2, r0
   1b2c2:	4804      	ldr	r0, [pc, #16]	; (1b2d4 <k_mem_slab_alloc+0x50>)
   1b2c4:	f000 fc18 	bl	1baf8 <z_pend_curr>
		if (result == 0) {
   1b2c8:	b918      	cbnz	r0, 1b2d2 <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
   1b2ca:	4b03      	ldr	r3, [pc, #12]	; (1b2d8 <k_mem_slab_alloc+0x54>)
   1b2cc:	689b      	ldr	r3, [r3, #8]
   1b2ce:	695b      	ldr	r3, [r3, #20]
   1b2d0:	6023      	str	r3, [r4, #0]
}
   1b2d2:	bd10      	pop	{r4, pc}
   1b2d4:	20026591 	.word	0x20026591
   1b2d8:	20024d28 	.word	0x20024d28

0001b2dc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1b2dc:	b570      	push	{r4, r5, r6, lr}
   1b2de:	4604      	mov	r4, r0
   1b2e0:	460d      	mov	r5, r1
	__asm__ volatile(
   1b2e2:	f04f 0320 	mov.w	r3, #32
   1b2e6:	f3ef 8611 	mrs	r6, BASEPRI
   1b2ea:	f383 8811 	msr	BASEPRI, r3
   1b2ee:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1b2f2:	f003 fcb2 	bl	1ec5a <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1b2f6:	b180      	cbz	r0, 1b31a <k_mem_slab_free+0x3e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1b2f8:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1b2fa:	682a      	ldr	r2, [r5, #0]
   1b2fc:	6681      	str	r1, [r0, #104]	; 0x68
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1b2fe:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b300:	7b42      	ldrb	r2, [r0, #13]
   1b302:	06d2      	lsls	r2, r2, #27
   1b304:	d103      	bne.n	1b30e <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
   1b306:	6983      	ldr	r3, [r0, #24]
   1b308:	b90b      	cbnz	r3, 1b30e <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
   1b30a:	f000 fab9 	bl	1b880 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   1b30e:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1b310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1b314:	4807      	ldr	r0, [pc, #28]	; (1b334 <k_mem_slab_free+0x58>)
   1b316:	f003 bc2a 	b.w	1eb6e <z_reschedule>
		**(char ***)mem = slab->free_list;
   1b31a:	682b      	ldr	r3, [r5, #0]
   1b31c:	6962      	ldr	r2, [r4, #20]
   1b31e:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1b320:	682b      	ldr	r3, [r5, #0]
   1b322:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1b324:	69a3      	ldr	r3, [r4, #24]
   1b326:	3b01      	subs	r3, #1
   1b328:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1b32a:	f386 8811 	msr	BASEPRI, r6
   1b32e:	f3bf 8f6f 	isb	sy
}
   1b332:	bd70      	pop	{r4, r5, r6, pc}
   1b334:	20026591 	.word	0x20026591

0001b338 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   1b338:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   1b33a:	4c07      	ldr	r4, [pc, #28]	; (1b358 <init_static_pools+0x20>)
   1b33c:	4d07      	ldr	r5, [pc, #28]	; (1b35c <init_static_pools+0x24>)
   1b33e:	42ac      	cmp	r4, r5
   1b340:	d301      	bcc.n	1b346 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   1b342:	2000      	movs	r0, #0
   1b344:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1b346:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   1b34a:	4620      	mov	r0, r4
   1b34c:	e9c4 3305 	strd	r3, r3, [r4, #20]
   1b350:	f001 f8b1 	bl	1c4b6 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   1b354:	341c      	adds	r4, #28
   1b356:	e7f2      	b.n	1b33e <init_static_pools+0x6>
   1b358:	2002c66c 	.word	0x2002c66c
   1b35c:	2002c688 	.word	0x2002c688

0001b360 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   1b360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   1b364:	1e1c      	subs	r4, r3, #0
{
   1b366:	b085      	sub	sp, #20
   1b368:	4607      	mov	r7, r0
   1b36a:	460d      	mov	r5, r1
   1b36c:	4692      	mov	sl, r2
	if (timeout > 0) {
   1b36e:	dd3b      	ble.n	1b3e8 <k_mem_pool_alloc+0x88>
	return z_impl_k_uptime_get();
   1b370:	f003 fd51 	bl	1ee16 <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   1b374:	eb10 0804 	adds.w	r8, r0, r4
	return pool - &_k_mem_pool_list_start[0];
   1b378:	4b1d      	ldr	r3, [pc, #116]	; (1b3f0 <k_mem_pool_alloc+0x90>)
   1b37a:	4e1e      	ldr	r6, [pc, #120]	; (1b3f4 <k_mem_pool_alloc+0x94>)
   1b37c:	1afb      	subs	r3, r7, r3
   1b37e:	109b      	asrs	r3, r3, #2
   1b380:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   1b382:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   1b386:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   1b388:	ab03      	add	r3, sp, #12
   1b38a:	aa02      	add	r2, sp, #8
   1b38c:	9500      	str	r5, [sp, #0]
   1b38e:	4651      	mov	r1, sl
   1b390:	4638      	mov	r0, r7
   1b392:	f001 f8d6 	bl	1c542 <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   1b396:	796b      	ldrb	r3, [r5, #5]
   1b398:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   1b39a:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   1b39c:	f362 0303 	bfi	r3, r2, #0, #4
   1b3a0:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   1b3a2:	686b      	ldr	r3, [r5, #4]
   1b3a4:	9a03      	ldr	r2, [sp, #12]
   1b3a6:	f362 331f 	bfi	r3, r2, #12, #20
   1b3aa:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   1b3ac:	b1c8      	cbz	r0, 1b3e2 <k_mem_pool_alloc+0x82>
   1b3ae:	b1c4      	cbz	r4, 1b3e2 <k_mem_pool_alloc+0x82>
   1b3b0:	f110 0f0c 	cmn.w	r0, #12
   1b3b4:	d115      	bne.n	1b3e2 <k_mem_pool_alloc+0x82>
	__asm__ volatile(
   1b3b6:	f04f 0320 	mov.w	r3, #32
   1b3ba:	f3ef 8011 	mrs	r0, BASEPRI
   1b3be:	f383 8811 	msr	BASEPRI, r3
   1b3c2:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
   1b3c6:	4622      	mov	r2, r4
   1b3c8:	4659      	mov	r1, fp
   1b3ca:	f000 fb71 	bl	1bab0 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   1b3ce:	1c63      	adds	r3, r4, #1
   1b3d0:	d0da      	beq.n	1b388 <k_mem_pool_alloc+0x28>
   1b3d2:	f003 fd20 	bl	1ee16 <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   1b3d6:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   1b3da:	2c00      	cmp	r4, #0
   1b3dc:	dcd4      	bgt.n	1b388 <k_mem_pool_alloc+0x28>
				break;
			}
		}
	}

	return -EAGAIN;
   1b3de:	f06f 000a 	mvn.w	r0, #10
}
   1b3e2:	b005      	add	sp, #20
   1b3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   1b3e8:	f04f 0800 	mov.w	r8, #0
   1b3ec:	e7c4      	b.n	1b378 <k_mem_pool_alloc+0x18>
   1b3ee:	bf00      	nop
   1b3f0:	2002c66c 	.word	0x2002c66c
   1b3f4:	b6db6db7 	.word	0xb6db6db7

0001b3f8 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   1b3f8:	b570      	push	{r4, r5, r6, lr}
   1b3fa:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   1b3fc:	6802      	ldr	r2, [r0, #0]
   1b3fe:	7841      	ldrb	r1, [r0, #1]
   1b400:	4e11      	ldr	r6, [pc, #68]	; (1b448 <k_mem_pool_free_id+0x50>)
   1b402:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1b406:	00a4      	lsls	r4, r4, #2
   1b408:	0b12      	lsrs	r2, r2, #12
   1b40a:	f001 010f 	and.w	r1, r1, #15
   1b40e:	1930      	adds	r0, r6, r4
   1b410:	f001 f949 	bl	1c6a6 <z_sys_mem_pool_block_free>
   1b414:	f04f 0320 	mov.w	r3, #32
   1b418:	f3ef 8511 	mrs	r5, BASEPRI
   1b41c:	f383 8811 	msr	BASEPRI, r3
   1b420:	f3bf 8f6f 	isb	sy
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   1b424:	f104 0014 	add.w	r0, r4, #20
   1b428:	4430      	add	r0, r6
   1b42a:	f003 fc43 	bl	1ecb4 <z_unpend_all>

	if (need_sched != 0) {
   1b42e:	b128      	cbz	r0, 1b43c <k_mem_pool_free_id+0x44>
		z_reschedule(&lock, key);
   1b430:	4629      	mov	r1, r5
	} else {
		k_spin_unlock(&lock, key);
	}
}
   1b432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1b436:	4805      	ldr	r0, [pc, #20]	; (1b44c <k_mem_pool_free_id+0x54>)
   1b438:	f003 bb99 	b.w	1eb6e <z_reschedule>
	__asm__ volatile(
   1b43c:	f385 8811 	msr	BASEPRI, r5
   1b440:	f3bf 8f6f 	isb	sy
}
   1b444:	bd70      	pop	{r4, r5, r6, pc}
   1b446:	bf00      	nop
   1b448:	2002c66c 	.word	0x2002c66c
   1b44c:	20026591 	.word	0x20026591

0001b450 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   1b450:	4601      	mov	r1, r0
   1b452:	4801      	ldr	r0, [pc, #4]	; (1b458 <k_malloc+0x8>)
   1b454:	f003 ba4d 	b.w	1e8f2 <k_mem_pool_malloc>
   1b458:	2002c66c 	.word	0x2002c66c

0001b45c <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   1b45c:	4b03      	ldr	r3, [pc, #12]	; (1b46c <z_thread_malloc+0x10>)
{
   1b45e:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   1b460:	689b      	ldr	r3, [r3, #8]
   1b462:	6e18      	ldr	r0, [r3, #96]	; 0x60
   1b464:	b108      	cbz	r0, 1b46a <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   1b466:	f003 ba44 	b.w	1e8f2 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   1b46a:	4770      	bx	lr
   1b46c:	20024d28 	.word	0x20024d28

0001b470 <z_impl_k_msgq_put>:
	}
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
   1b470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b474:	4613      	mov	r3, r2
   1b476:	4604      	mov	r4, r0
   1b478:	460f      	mov	r7, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   1b47a:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   1b47e:	f04f 0220 	mov.w	r2, #32
   1b482:	f3ef 8611 	mrs	r6, BASEPRI
   1b486:	f382 8811 	msr	BASEPRI, r2
   1b48a:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   1b48e:	6a01      	ldr	r1, [r0, #32]
   1b490:	68c2      	ldr	r2, [r0, #12]
   1b492:	4291      	cmp	r1, r2
   1b494:	d22e      	bcs.n	1b4f4 <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1b496:	f003 fbe0 	bl	1ec5a <z_unpend_first_thread>
		if (pending_thread != NULL) {
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   1b49a:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   1b49c:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   1b49e:	4639      	mov	r1, r7
		if (pending_thread != NULL) {
   1b4a0:	b198      	cbz	r0, 1b4ca <z_impl_k_msgq_put+0x5a>
			(void)memcpy(pending_thread->base.swap_data, data,
   1b4a2:	6940      	ldr	r0, [r0, #20]
   1b4a4:	f002 f8e7 	bl	1d676 <memcpy>
   1b4a8:	2300      	movs	r3, #0
   1b4aa:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b4ac:	7b6b      	ldrb	r3, [r5, #13]
   1b4ae:	06db      	lsls	r3, r3, #27
   1b4b0:	d104      	bne.n	1b4bc <z_impl_k_msgq_put+0x4c>
	if (z_is_thread_ready(thread)) {
   1b4b2:	69ab      	ldr	r3, [r5, #24]
   1b4b4:	b913      	cbnz	r3, 1b4bc <z_impl_k_msgq_put+0x4c>
		z_add_thread_to_ready_q(thread);
   1b4b6:	4628      	mov	r0, r5
   1b4b8:	f000 f9e2 	bl	1b880 <z_add_thread_to_ready_q>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   1b4bc:	4640      	mov	r0, r8
   1b4be:	4631      	mov	r1, r6
   1b4c0:	f003 fb55 	bl	1eb6e <z_reschedule>
			return 0;
   1b4c4:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1b4c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   1b4ca:	69e0      	ldr	r0, [r4, #28]
   1b4cc:	f002 f8d3 	bl	1d676 <memcpy>
		result = 0;
   1b4d0:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
   1b4d2:	69e3      	ldr	r3, [r4, #28]
   1b4d4:	68a2      	ldr	r2, [r4, #8]
   1b4d6:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1b4d8:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1b4da:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1b4dc:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1b4de:	bf04      	itt	eq
   1b4e0:	6923      	ldreq	r3, [r4, #16]
   1b4e2:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   1b4e4:	6a23      	ldr	r3, [r4, #32]
   1b4e6:	3301      	adds	r3, #1
   1b4e8:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
   1b4ea:	f386 8811 	msr	BASEPRI, r6
   1b4ee:	f3bf 8f6f 	isb	sy
	return result;
   1b4f2:	e7e8      	b.n	1b4c6 <z_impl_k_msgq_put+0x56>
	} else if (timeout == K_NO_WAIT) {
   1b4f4:	b14b      	cbz	r3, 1b50a <z_impl_k_msgq_put+0x9a>
		_current->base.swap_data = data;
   1b4f6:	4a06      	ldr	r2, [pc, #24]	; (1b510 <z_impl_k_msgq_put+0xa0>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b4f8:	4631      	mov	r1, r6
		_current->base.swap_data = data;
   1b4fa:	6892      	ldr	r2, [r2, #8]
   1b4fc:	6157      	str	r7, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b4fe:	4602      	mov	r2, r0
   1b500:	4640      	mov	r0, r8
}
   1b502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b506:	f000 baf7 	b.w	1baf8 <z_pend_curr>
		result = -ENOMSG;
   1b50a:	f06f 004f 	mvn.w	r0, #79	; 0x4f
   1b50e:	e7ec      	b.n	1b4ea <z_impl_k_msgq_put+0x7a>
   1b510:	20024d28 	.word	0x20024d28

0001b514 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
   1b514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b518:	4604      	mov	r4, r0
   1b51a:	4613      	mov	r3, r2
   1b51c:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   1b51e:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
   1b522:	f04f 0220 	mov.w	r2, #32
   1b526:	f3ef 8611 	mrs	r6, BASEPRI
   1b52a:	f382 8811 	msr	BASEPRI, r2
   1b52e:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   1b532:	6a22      	ldr	r2, [r4, #32]
   1b534:	2a00      	cmp	r2, #0
   1b536:	d037      	beq.n	1b5a8 <z_impl_k_msgq_get+0x94>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   1b538:	68a2      	ldr	r2, [r4, #8]
   1b53a:	69a1      	ldr	r1, [r4, #24]
   1b53c:	f002 f89b 	bl	1d676 <memcpy>
		msgq->read_ptr += msgq->msg_size;
   1b540:	69a3      	ldr	r3, [r4, #24]
   1b542:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1b544:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   1b546:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   1b548:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   1b54a:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   1b54c:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   1b54e:	bf04      	itt	eq
   1b550:	6923      	ldreq	r3, [r4, #16]
   1b552:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   1b554:	6a23      	ldr	r3, [r4, #32]
   1b556:	3b01      	subs	r3, #1
   1b558:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1b55a:	f003 fb7e 	bl	1ec5a <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1b55e:	4605      	mov	r5, r0
   1b560:	2800      	cmp	r0, #0
   1b562:	d02e      	beq.n	1b5c2 <z_impl_k_msgq_get+0xae>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   1b564:	68a2      	ldr	r2, [r4, #8]
   1b566:	6941      	ldr	r1, [r0, #20]
   1b568:	69e0      	ldr	r0, [r4, #28]
   1b56a:	f002 f884 	bl	1d676 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   1b56e:	69e3      	ldr	r3, [r4, #28]
   1b570:	68a2      	ldr	r2, [r4, #8]
   1b572:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1b574:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1b576:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1b578:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1b57a:	bf04      	itt	eq
   1b57c:	6923      	ldreq	r3, [r4, #16]
   1b57e:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   1b580:	6a23      	ldr	r3, [r4, #32]
   1b582:	3301      	adds	r3, #1
   1b584:	6223      	str	r3, [r4, #32]
   1b586:	2300      	movs	r3, #0
   1b588:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b58a:	7b6b      	ldrb	r3, [r5, #13]
   1b58c:	06db      	lsls	r3, r3, #27
   1b58e:	d104      	bne.n	1b59a <z_impl_k_msgq_get+0x86>
	if (z_is_thread_ready(thread)) {
   1b590:	69ab      	ldr	r3, [r5, #24]
   1b592:	b913      	cbnz	r3, 1b59a <z_impl_k_msgq_get+0x86>
		z_add_thread_to_ready_q(thread);
   1b594:	4628      	mov	r0, r5
   1b596:	f000 f973 	bl	1b880 <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   1b59a:	4638      	mov	r0, r7
   1b59c:	4631      	mov	r1, r6
   1b59e:	f003 fae6 	bl	1eb6e <z_reschedule>
			return 0;
   1b5a2:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1b5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   1b5a8:	b14b      	cbz	r3, 1b5be <z_impl_k_msgq_get+0xaa>
		_current->base.swap_data = data;
   1b5aa:	4a08      	ldr	r2, [pc, #32]	; (1b5cc <z_impl_k_msgq_get+0xb8>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b5ac:	4638      	mov	r0, r7
		_current->base.swap_data = data;
   1b5ae:	6892      	ldr	r2, [r2, #8]
   1b5b0:	6151      	str	r1, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b5b2:	4622      	mov	r2, r4
   1b5b4:	4631      	mov	r1, r6
}
   1b5b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b5ba:	f000 ba9d 	b.w	1baf8 <z_pend_curr>
		result = -ENOMSG;
   1b5be:	f06f 004f 	mvn.w	r0, #79	; 0x4f
	__asm__ volatile(
   1b5c2:	f386 8811 	msr	BASEPRI, r6
   1b5c6:	f3bf 8f6f 	isb	sy
	return result;
   1b5ca:	e7eb      	b.n	1b5a4 <z_impl_k_msgq_get+0x90>
   1b5cc:	20024d28 	.word	0x20024d28

0001b5d0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   1b5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b5d2:	4604      	mov	r4, r0
   1b5d4:	460f      	mov	r7, r1
	__asm__ volatile(
   1b5d6:	f04f 0320 	mov.w	r3, #32
   1b5da:	f3ef 8511 	mrs	r5, BASEPRI
   1b5de:	f383 8811 	msr	BASEPRI, r3
   1b5e2:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1b5e6:	68c2      	ldr	r2, [r0, #12]
   1b5e8:	4930      	ldr	r1, [pc, #192]	; (1b6ac <z_impl_k_mutex_lock+0xdc>)
   1b5ea:	b15a      	cbz	r2, 1b604 <z_impl_k_mutex_lock+0x34>
   1b5ec:	6880      	ldr	r0, [r0, #8]
   1b5ee:	688e      	ldr	r6, [r1, #8]
   1b5f0:	42b0      	cmp	r0, r6
   1b5f2:	d015      	beq.n	1b620 <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   1b5f4:	b9b7      	cbnz	r7, 1b624 <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
   1b5f6:	f385 8811 	msr	BASEPRI, r5
   1b5fa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1b5fe:	f06f 000f 	mvn.w	r0, #15
   1b602:	e00c      	b.n	1b61e <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
   1b604:	688b      	ldr	r3, [r1, #8]
   1b606:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1b60a:	6123      	str	r3, [r4, #16]
		mutex->owner = _current;
   1b60c:	688b      	ldr	r3, [r1, #8]
		mutex->lock_count++;
   1b60e:	3201      	adds	r2, #1
   1b610:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
   1b612:	60a3      	str	r3, [r4, #8]
   1b614:	f385 8811 	msr	BASEPRI, r5
   1b618:	f3bf 8f6f 	isb	sy
		return 0;
   1b61c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1b61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   1b620:	6923      	ldr	r3, [r4, #16]
   1b622:	e7f2      	b.n	1b60a <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1b624:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b628:	f996 100e 	ldrsb.w	r1, [r6, #14]
   1b62c:	4299      	cmp	r1, r3
   1b62e:	bfa8      	it	ge
   1b630:	4619      	movge	r1, r3
   1b632:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1b636:	4299      	cmp	r1, r3
   1b638:	da2b      	bge.n	1b692 <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
   1b63a:	f000 fa9f 	bl	1bb7c <z_set_prio>
   1b63e:	4606      	mov	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1b640:	463b      	mov	r3, r7
   1b642:	4622      	mov	r2, r4
   1b644:	4629      	mov	r1, r5
   1b646:	481a      	ldr	r0, [pc, #104]	; (1b6b0 <z_impl_k_mutex_lock+0xe0>)
   1b648:	f000 fa56 	bl	1baf8 <z_pend_curr>
	if (got_mutex == 0) {
   1b64c:	2800      	cmp	r0, #0
   1b64e:	d0e6      	beq.n	1b61e <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
   1b650:	f04f 0320 	mov.w	r3, #32
   1b654:	f3ef 8511 	mrs	r5, BASEPRI
   1b658:	f383 8811 	msr	BASEPRI, r3
   1b65c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1b660:	6823      	ldr	r3, [r4, #0]
   1b662:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b664:	429c      	cmp	r4, r3
   1b666:	d007      	beq.n	1b678 <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
   1b668:	b133      	cbz	r3, 1b678 <z_impl_k_mutex_lock+0xa8>
   1b66a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1b66e:	4299      	cmp	r1, r3
   1b670:	bfa8      	it	ge
   1b672:	4619      	movge	r1, r3
   1b674:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1b678:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1b67a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b67e:	4299      	cmp	r1, r3
   1b680:	d109      	bne.n	1b696 <z_impl_k_mutex_lock+0xc6>
	if (resched) {
   1b682:	b16e      	cbz	r6, 1b6a0 <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
   1b684:	4629      	mov	r1, r5
   1b686:	480a      	ldr	r0, [pc, #40]	; (1b6b0 <z_impl_k_mutex_lock+0xe0>)
   1b688:	f003 fa71 	bl	1eb6e <z_reschedule>
	return -EAGAIN;
   1b68c:	f06f 000a 	mvn.w	r0, #10
   1b690:	e7c5      	b.n	1b61e <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
   1b692:	2600      	movs	r6, #0
   1b694:	e7d4      	b.n	1b640 <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
   1b696:	f000 fa71 	bl	1bb7c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1b69a:	2800      	cmp	r0, #0
   1b69c:	d1f2      	bne.n	1b684 <z_impl_k_mutex_lock+0xb4>
   1b69e:	e7f0      	b.n	1b682 <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
   1b6a0:	f385 8811 	msr	BASEPRI, r5
   1b6a4:	f3bf 8f6f 	isb	sy
   1b6a8:	e7f0      	b.n	1b68c <z_impl_k_mutex_lock+0xbc>
   1b6aa:	bf00      	nop
   1b6ac:	20024d28 	.word	0x20024d28
   1b6b0:	20026591 	.word	0x20026591

0001b6b4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1b6b4:	b538      	push	{r3, r4, r5, lr}
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1b6b6:	4b1d      	ldr	r3, [pc, #116]	; (1b72c <z_impl_k_mutex_unlock+0x78>)
   1b6b8:	4604      	mov	r4, r0
   1b6ba:	689a      	ldr	r2, [r3, #8]
   1b6bc:	7bd3      	ldrb	r3, [r2, #15]
   1b6be:	3b01      	subs	r3, #1
   1b6c0:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
   1b6c2:	68c3      	ldr	r3, [r0, #12]
   1b6c4:	2b01      	cmp	r3, #1
   1b6c6:	d005      	beq.n	1b6d4 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
   1b6c8:	3b01      	subs	r3, #1
   1b6ca:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
   1b6cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sched_unlock();
   1b6d0:	f000 b8ba 	b.w	1b848 <k_sched_unlock>
	__asm__ volatile(
   1b6d4:	f04f 0320 	mov.w	r3, #32
   1b6d8:	f3ef 8511 	mrs	r5, BASEPRI
   1b6dc:	f383 8811 	msr	BASEPRI, r3
   1b6e0:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1b6e4:	6901      	ldr	r1, [r0, #16]
   1b6e6:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1b6e8:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b6ec:	4299      	cmp	r1, r3
   1b6ee:	d001      	beq.n	1b6f4 <z_impl_k_mutex_unlock+0x40>
		return z_set_prio(mutex->owner, new_prio);
   1b6f0:	f000 fa44 	bl	1bb7c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1b6f4:	4620      	mov	r0, r4
   1b6f6:	f003 fab0 	bl	1ec5a <z_unpend_first_thread>
	mutex->owner = new_owner;
   1b6fa:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1b6fc:	b180      	cbz	r0, 1b720 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1b6fe:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1b702:	6122      	str	r2, [r4, #16]
   1b704:	2200      	movs	r2, #0
   1b706:	6682      	str	r2, [r0, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b708:	7b42      	ldrb	r2, [r0, #13]
   1b70a:	06d2      	lsls	r2, r2, #27
   1b70c:	d103      	bne.n	1b716 <z_impl_k_mutex_unlock+0x62>
	if (z_is_thread_ready(thread)) {
   1b70e:	6983      	ldr	r3, [r0, #24]
   1b710:	b90b      	cbnz	r3, 1b716 <z_impl_k_mutex_unlock+0x62>
		z_add_thread_to_ready_q(thread);
   1b712:	f000 f8b5 	bl	1b880 <z_add_thread_to_ready_q>
		z_reschedule(&lock, key);
   1b716:	4629      	mov	r1, r5
   1b718:	4805      	ldr	r0, [pc, #20]	; (1b730 <z_impl_k_mutex_unlock+0x7c>)
   1b71a:	f003 fa28 	bl	1eb6e <z_reschedule>
   1b71e:	e7d5      	b.n	1b6cc <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0U;
   1b720:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1b722:	f385 8811 	msr	BASEPRI, r5
   1b726:	f3bf 8f6f 	isb	sy
   1b72a:	e7cf      	b.n	1b6cc <z_impl_k_mutex_unlock+0x18>
   1b72c:	20024d28 	.word	0x20024d28
   1b730:	20026591 	.word	0x20026591

0001b734 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1b734:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1b736:	4c08      	ldr	r4, [pc, #32]	; (1b758 <z_reset_time_slice+0x24>)
   1b738:	6823      	ldr	r3, [r4, #0]
   1b73a:	b15b      	cbz	r3, 1b754 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1b73c:	f7f4 f808 	bl	f750 <z_clock_elapsed>
   1b740:	6823      	ldr	r3, [r4, #0]
   1b742:	4a06      	ldr	r2, [pc, #24]	; (1b75c <z_reset_time_slice+0x28>)
   1b744:	4418      	add	r0, r3
   1b746:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1b748:	2100      	movs	r1, #0
	}
}
   1b74a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   1b74e:	4618      	mov	r0, r3
   1b750:	f003 bb43 	b.w	1edda <z_set_timeout_expiry>
}
   1b754:	bd10      	pop	{r4, pc}
   1b756:	bf00      	nop
   1b758:	20024d64 	.word	0x20024d64
   1b75c:	20024d28 	.word	0x20024d28

0001b760 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
   1b760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b762:	460d      	mov	r5, r1
	__asm__ volatile(
   1b764:	f04f 0320 	mov.w	r3, #32
   1b768:	f3ef 8411 	mrs	r4, BASEPRI
   1b76c:	f383 8811 	msr	BASEPRI, r3
   1b770:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
   1b774:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1b778:	f240 36e7 	movw	r6, #999	; 0x3e7
   1b77c:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1b77e:	2200      	movs	r2, #0
   1b780:	fbe1 6700 	umlal	r6, r7, r1, r0
   1b784:	4b09      	ldr	r3, [pc, #36]	; (1b7ac <k_sched_time_slice_set+0x4c>)
   1b786:	4630      	mov	r0, r6
   1b788:	611a      	str	r2, [r3, #16]
   1b78a:	4639      	mov	r1, r7
   1b78c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b790:	2300      	movs	r3, #0
   1b792:	f7f0 ff01 	bl	c598 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1b796:	4b06      	ldr	r3, [pc, #24]	; (1b7b0 <k_sched_time_slice_set+0x50>)
   1b798:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1b79a:	4b06      	ldr	r3, [pc, #24]	; (1b7b4 <k_sched_time_slice_set+0x54>)
   1b79c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1b79e:	f7ff ffc9 	bl	1b734 <z_reset_time_slice>
	__asm__ volatile(
   1b7a2:	f384 8811 	msr	BASEPRI, r4
   1b7a6:	f3bf 8f6f 	isb	sy
	}
}
   1b7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b7ac:	20024d28 	.word	0x20024d28
   1b7b0:	20024d64 	.word	0x20024d64
   1b7b4:	20024d60 	.word	0x20024d60

0001b7b8 <k_sched_lock>:
	__asm__ volatile(
   1b7b8:	f04f 0320 	mov.w	r3, #32
   1b7bc:	f3ef 8111 	mrs	r1, BASEPRI
   1b7c0:	f383 8811 	msr	BASEPRI, r3
   1b7c4:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1b7c8:	4b04      	ldr	r3, [pc, #16]	; (1b7dc <k_sched_lock+0x24>)
   1b7ca:	689a      	ldr	r2, [r3, #8]
   1b7cc:	7bd3      	ldrb	r3, [r2, #15]
   1b7ce:	3b01      	subs	r3, #1
   1b7d0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1b7d2:	f381 8811 	msr	BASEPRI, r1
   1b7d6:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1b7da:	4770      	bx	lr
   1b7dc:	20024d28 	.word	0x20024d28

0001b7e0 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1b7e0:	4b09      	ldr	r3, [pc, #36]	; (1b808 <z_priq_dumb_remove+0x28>)
   1b7e2:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1b7e6:	4282      	cmp	r2, r0
   1b7e8:	d105      	bne.n	1b7f6 <z_priq_dumb_remove+0x16>
   1b7ea:	689b      	ldr	r3, [r3, #8]
   1b7ec:	428b      	cmp	r3, r1
   1b7ee:	d102      	bne.n	1b7f6 <z_priq_dumb_remove+0x16>
   1b7f0:	7b4b      	ldrb	r3, [r1, #13]
   1b7f2:	06db      	lsls	r3, r3, #27
   1b7f4:	d106      	bne.n	1b804 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1b7f6:	e9d1 3200 	ldrd	r3, r2, [r1]
   1b7fa:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1b7fc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b7fe:	2300      	movs	r3, #0
	node->prev = NULL;
   1b800:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1b804:	4770      	bx	lr
   1b806:	bf00      	nop
   1b808:	20024d28 	.word	0x20024d28

0001b80c <update_cache>:
{
   1b80c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   1b80e:	4c0d      	ldr	r4, [pc, #52]	; (1b844 <update_cache+0x38>)
{
   1b810:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   1b812:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1b816:	f003 f9e9 	bl	1ebec <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
   1b81a:	4605      	mov	r5, r0
   1b81c:	b900      	cbnz	r0, 1b820 <update_cache+0x14>
   1b81e:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1b820:	68a3      	ldr	r3, [r4, #8]
   1b822:	b94a      	cbnz	r2, 1b838 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   1b824:	7b5a      	ldrb	r2, [r3, #13]
   1b826:	06d2      	lsls	r2, r2, #27
   1b828:	d106      	bne.n	1b838 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1b82a:	69aa      	ldr	r2, [r5, #24]
   1b82c:	b922      	cbnz	r2, 1b838 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
   1b82e:	89da      	ldrh	r2, [r3, #14]
   1b830:	2a7f      	cmp	r2, #127	; 0x7f
   1b832:	d901      	bls.n	1b838 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   1b834:	6263      	str	r3, [r4, #36]	; 0x24
}
   1b836:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   1b838:	429d      	cmp	r5, r3
   1b83a:	d001      	beq.n	1b840 <update_cache+0x34>
			z_reset_time_slice();
   1b83c:	f7ff ff7a 	bl	1b734 <z_reset_time_slice>
		_kernel.ready_q.cache = th;
   1b840:	6265      	str	r5, [r4, #36]	; 0x24
}
   1b842:	e7f8      	b.n	1b836 <update_cache+0x2a>
   1b844:	20024d28 	.word	0x20024d28

0001b848 <k_sched_unlock>:
{
   1b848:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b84a:	f04f 0320 	mov.w	r3, #32
   1b84e:	f3ef 8411 	mrs	r4, BASEPRI
   1b852:	f383 8811 	msr	BASEPRI, r3
   1b856:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1b85a:	4b08      	ldr	r3, [pc, #32]	; (1b87c <k_sched_unlock+0x34>)
		update_cache(0);
   1b85c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1b85e:	689a      	ldr	r2, [r3, #8]
   1b860:	7bd3      	ldrb	r3, [r2, #15]
   1b862:	3301      	adds	r3, #1
   1b864:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1b866:	f7ff ffd1 	bl	1b80c <update_cache>
	__asm__ volatile(
   1b86a:	f384 8811 	msr	BASEPRI, r4
   1b86e:	f3bf 8f6f 	isb	sy
}
   1b872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1b876:	f003 b991 	b.w	1eb9c <z_reschedule_unlocked>
   1b87a:	bf00      	nop
   1b87c:	20024d28 	.word	0x20024d28

0001b880 <z_add_thread_to_ready_q>:
{
   1b880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1b882:	f04f 0320 	mov.w	r3, #32
   1b886:	f3ef 8411 	mrs	r4, BASEPRI
   1b88a:	f383 8811 	msr	BASEPRI, r3
   1b88e:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1b892:	4a15      	ldr	r2, [pc, #84]	; (1b8e8 <z_add_thread_to_ready_q+0x68>)
   1b894:	4611      	mov	r1, r2
   1b896:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b89a:	428b      	cmp	r3, r1
   1b89c:	d01d      	beq.n	1b8da <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b89e:	b1e3      	cbz	r3, 1b8da <z_add_thread_to_ready_q+0x5a>
   1b8a0:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1b8a2:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1b8a6:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1b8aa:	42af      	cmp	r7, r5
   1b8ac:	dd10      	ble.n	1b8d0 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
   1b8ae:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b8b0:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1b8b4:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1b8b6:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1b8b8:	7b43      	ldrb	r3, [r0, #13]
   1b8ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b8be:	7343      	strb	r3, [r0, #13]
		update_cache(0);
   1b8c0:	2000      	movs	r0, #0
   1b8c2:	f7ff ffa3 	bl	1b80c <update_cache>
	__asm__ volatile(
   1b8c6:	f384 8811 	msr	BASEPRI, r4
   1b8ca:	f3bf 8f6f 	isb	sy
}
   1b8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1b8d0:	42b3      	cmp	r3, r6
   1b8d2:	d002      	beq.n	1b8da <z_add_thread_to_ready_q+0x5a>
   1b8d4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b8d6:	2b00      	cmp	r3, #0
   1b8d8:	d1e5      	bne.n	1b8a6 <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
   1b8da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   1b8dc:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   1b8de:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   1b8e0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1b8e2:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1b8e4:	62d0      	str	r0, [r2, #44]	; 0x2c
   1b8e6:	e7e7      	b.n	1b8b8 <z_add_thread_to_ready_q+0x38>
   1b8e8:	20024d28 	.word	0x20024d28

0001b8ec <z_move_thread_to_end_of_prio_q>:
{
   1b8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b8ee:	4604      	mov	r4, r0
	__asm__ volatile(
   1b8f0:	f04f 0320 	mov.w	r3, #32
   1b8f4:	f3ef 8511 	mrs	r5, BASEPRI
   1b8f8:	f383 8811 	msr	BASEPRI, r3
   1b8fc:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1b900:	7b43      	ldrb	r3, [r0, #13]
   1b902:	065a      	lsls	r2, r3, #25
   1b904:	d503      	bpl.n	1b90e <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b906:	4601      	mov	r1, r0
   1b908:	4817      	ldr	r0, [pc, #92]	; (1b968 <z_move_thread_to_end_of_prio_q+0x7c>)
   1b90a:	f7ff ff69 	bl	1b7e0 <z_priq_dumb_remove>
	return list->head == list;
   1b90e:	4a17      	ldr	r2, [pc, #92]	; (1b96c <z_move_thread_to_end_of_prio_q+0x80>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b910:	f102 0128 	add.w	r1, r2, #40	; 0x28
   1b914:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   1b918:	428b      	cmp	r3, r1
   1b91a:	d01f      	beq.n	1b95c <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b91c:	b1f3      	cbz	r3, 1b95c <z_move_thread_to_end_of_prio_q+0x70>
	if (t1->base.prio < t2->base.prio) {
   1b91e:	f994 600e 	ldrsb.w	r6, [r4, #14]
   1b922:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1b926:	42b7      	cmp	r7, r6
   1b928:	dd13      	ble.n	1b952 <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
   1b92a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1b92c:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   1b930:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1b932:	605c      	str	r4, [r3, #4]
   1b934:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   1b936:	6890      	ldr	r0, [r2, #8]
   1b938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b93c:	7363      	strb	r3, [r4, #13]
   1b93e:	1b03      	subs	r3, r0, r4
   1b940:	4258      	negs	r0, r3
   1b942:	4158      	adcs	r0, r3
   1b944:	f7ff ff62 	bl	1b80c <update_cache>
	__asm__ volatile(
   1b948:	f385 8811 	msr	BASEPRI, r5
   1b94c:	f3bf 8f6f 	isb	sy
}
   1b950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1b952:	4298      	cmp	r0, r3
   1b954:	d002      	beq.n	1b95c <z_move_thread_to_end_of_prio_q+0x70>
   1b956:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b958:	2b00      	cmp	r3, #0
   1b95a:	d1e2      	bne.n	1b922 <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
   1b95c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   1b960:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1b962:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b964:	62d4      	str	r4, [r2, #44]	; 0x2c
   1b966:	e7e5      	b.n	1b934 <z_move_thread_to_end_of_prio_q+0x48>
   1b968:	20024d50 	.word	0x20024d50
   1b96c:	20024d28 	.word	0x20024d28

0001b970 <z_time_slice>:
	if (pending_current == _current) {
   1b970:	4a15      	ldr	r2, [pc, #84]	; (1b9c8 <z_time_slice+0x58>)
   1b972:	4916      	ldr	r1, [pc, #88]	; (1b9cc <z_time_slice+0x5c>)
{
   1b974:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   1b976:	680c      	ldr	r4, [r1, #0]
   1b978:	6893      	ldr	r3, [r2, #8]
   1b97a:	42a3      	cmp	r3, r4
   1b97c:	4614      	mov	r4, r2
   1b97e:	d103      	bne.n	1b988 <z_time_slice+0x18>
}
   1b980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   1b984:	f7ff bed6 	b.w	1b734 <z_reset_time_slice>
	pending_current = NULL;
   1b988:	2500      	movs	r5, #0
   1b98a:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   1b98c:	4910      	ldr	r1, [pc, #64]	; (1b9d0 <z_time_slice+0x60>)
   1b98e:	6809      	ldr	r1, [r1, #0]
   1b990:	b1b9      	cbz	r1, 1b9c2 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   1b992:	89d9      	ldrh	r1, [r3, #14]
   1b994:	297f      	cmp	r1, #127	; 0x7f
   1b996:	d814      	bhi.n	1b9c2 <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
   1b998:	490e      	ldr	r1, [pc, #56]	; (1b9d4 <z_time_slice+0x64>)
   1b99a:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1b99e:	6809      	ldr	r1, [r1, #0]
   1b9a0:	428d      	cmp	r5, r1
   1b9a2:	db0e      	blt.n	1b9c2 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
   1b9a4:	490c      	ldr	r1, [pc, #48]	; (1b9d8 <z_time_slice+0x68>)
   1b9a6:	428b      	cmp	r3, r1
   1b9a8:	d00b      	beq.n	1b9c2 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   1b9aa:	6999      	ldr	r1, [r3, #24]
   1b9ac:	b949      	cbnz	r1, 1b9c2 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   1b9ae:	6911      	ldr	r1, [r2, #16]
   1b9b0:	4281      	cmp	r1, r0
   1b9b2:	dc03      	bgt.n	1b9bc <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   1b9b4:	4618      	mov	r0, r3
   1b9b6:	f7ff ff99 	bl	1b8ec <z_move_thread_to_end_of_prio_q>
   1b9ba:	e7e1      	b.n	1b980 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   1b9bc:	1a09      	subs	r1, r1, r0
   1b9be:	6111      	str	r1, [r2, #16]
}
   1b9c0:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   1b9c2:	2300      	movs	r3, #0
   1b9c4:	6123      	str	r3, [r4, #16]
   1b9c6:	e7fb      	b.n	1b9c0 <z_time_slice+0x50>
   1b9c8:	20024d28 	.word	0x20024d28
   1b9cc:	20024d5c 	.word	0x20024d5c
   1b9d0:	20024d64 	.word	0x20024d64
   1b9d4:	20024d60 	.word	0x20024d60
   1b9d8:	20020b64 	.word	0x20020b64

0001b9dc <z_remove_thread_from_ready_q>:
{
   1b9dc:	b538      	push	{r3, r4, r5, lr}
   1b9de:	4604      	mov	r4, r0
	__asm__ volatile(
   1b9e0:	f04f 0320 	mov.w	r3, #32
   1b9e4:	f3ef 8511 	mrs	r5, BASEPRI
   1b9e8:	f383 8811 	msr	BASEPRI, r3
   1b9ec:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1b9f0:	7b43      	ldrb	r3, [r0, #13]
   1b9f2:	065a      	lsls	r2, r3, #25
   1b9f4:	d507      	bpl.n	1ba06 <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b9f6:	4601      	mov	r1, r0
   1b9f8:	4809      	ldr	r0, [pc, #36]	; (1ba20 <z_remove_thread_from_ready_q+0x44>)
   1b9fa:	f7ff fef1 	bl	1b7e0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1b9fe:	7b63      	ldrb	r3, [r4, #13]
   1ba00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1ba04:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1ba06:	4b07      	ldr	r3, [pc, #28]	; (1ba24 <z_remove_thread_from_ready_q+0x48>)
   1ba08:	6898      	ldr	r0, [r3, #8]
   1ba0a:	1b03      	subs	r3, r0, r4
   1ba0c:	4258      	negs	r0, r3
   1ba0e:	4158      	adcs	r0, r3
   1ba10:	f7ff fefc 	bl	1b80c <update_cache>
	__asm__ volatile(
   1ba14:	f385 8811 	msr	BASEPRI, r5
   1ba18:	f3bf 8f6f 	isb	sy
}
   1ba1c:	bd38      	pop	{r3, r4, r5, pc}
   1ba1e:	bf00      	nop
   1ba20:	20024d50 	.word	0x20024d50
   1ba24:	20024d28 	.word	0x20024d28

0001ba28 <pend>:
{
   1ba28:	b570      	push	{r4, r5, r6, lr}
   1ba2a:	4604      	mov	r4, r0
   1ba2c:	460d      	mov	r5, r1
   1ba2e:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   1ba30:	f7ff ffd4 	bl	1b9dc <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   1ba34:	7b63      	ldrb	r3, [r4, #13]
   1ba36:	f043 0302 	orr.w	r3, r3, #2
   1ba3a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1ba3c:	b17d      	cbz	r5, 1ba5e <pend+0x36>
	return list->head == list;
   1ba3e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1ba40:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ba42:	429d      	cmp	r5, r3
   1ba44:	d029      	beq.n	1ba9a <pend+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ba46:	b343      	cbz	r3, 1ba9a <pend+0x72>
	if (t1->base.prio < t2->base.prio) {
   1ba48:	f994 200e 	ldrsb.w	r2, [r4, #14]
   1ba4c:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1ba50:	4291      	cmp	r1, r2
   1ba52:	dd1c      	ble.n	1ba8e <pend+0x66>
	node->prev = successor->prev;
   1ba54:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1ba56:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1ba5a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1ba5c:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   1ba5e:	1c73      	adds	r3, r6, #1
   1ba60:	d022      	beq.n	1baa8 <pend+0x80>
   1ba62:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1ba66:	f240 30e7 	movw	r0, #999	; 0x3e7
   1ba6a:	2100      	movs	r1, #0
   1ba6c:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   1ba70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ba74:	fbc5 0106 	smlal	r0, r1, r5, r6
   1ba78:	2300      	movs	r3, #0
   1ba7a:	f7f0 fd8d 	bl	c598 <__aeabi_uldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1ba7e:	490b      	ldr	r1, [pc, #44]	; (1baac <pend+0x84>)
   1ba80:	1c42      	adds	r2, r0, #1
   1ba82:	f104 0018 	add.w	r0, r4, #24
}
   1ba86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ba8a:	f000 bb3b 	b.w	1c104 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   1ba8e:	6869      	ldr	r1, [r5, #4]
   1ba90:	428b      	cmp	r3, r1
   1ba92:	d002      	beq.n	1ba9a <pend+0x72>
   1ba94:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ba96:	2b00      	cmp	r3, #0
   1ba98:	d1d8      	bne.n	1ba4c <pend+0x24>
	node->prev = list->tail;
   1ba9a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1ba9c:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   1ba9e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1baa0:	686b      	ldr	r3, [r5, #4]
   1baa2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1baa4:	606c      	str	r4, [r5, #4]
   1baa6:	e7da      	b.n	1ba5e <pend+0x36>
}
   1baa8:	bd70      	pop	{r4, r5, r6, pc}
   1baaa:	bf00      	nop
   1baac:	0001ebf9 	.word	0x0001ebf9

0001bab0 <z_pend_curr_irqlock>:
{
   1bab0:	b570      	push	{r4, r5, r6, lr}
   1bab2:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   1bab4:	4d0e      	ldr	r5, [pc, #56]	; (1baf0 <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
   1bab6:	4c0f      	ldr	r4, [pc, #60]	; (1baf4 <z_pend_curr_irqlock+0x44>)
	pend(_current, wait_q, timeout);
   1bab8:	68a8      	ldr	r0, [r5, #8]
   1baba:	f7ff ffb5 	bl	1ba28 <pend>
	pending_current = _current;
   1babe:	68ab      	ldr	r3, [r5, #8]
	int ret = z_swap_irqlock(key);
   1bac0:	4630      	mov	r0, r6
	pending_current = _current;
   1bac2:	6023      	str	r3, [r4, #0]
	int ret = z_swap_irqlock(key);
   1bac4:	f003 f818 	bl	1eaf8 <z_swap_irqlock>
	__asm__ volatile(
   1bac8:	f04f 0220 	mov.w	r2, #32
   1bacc:	f3ef 8311 	mrs	r3, BASEPRI
   1bad0:	f382 8811 	msr	BASEPRI, r2
   1bad4:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
   1bad8:	6822      	ldr	r2, [r4, #0]
   1bada:	68a9      	ldr	r1, [r5, #8]
   1badc:	4291      	cmp	r1, r2
			pending_current = NULL;
   1bade:	bf04      	itt	eq
   1bae0:	2200      	moveq	r2, #0
   1bae2:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
   1bae4:	f383 8811 	msr	BASEPRI, r3
   1bae8:	f3bf 8f6f 	isb	sy
}
   1baec:	bd70      	pop	{r4, r5, r6, pc}
   1baee:	bf00      	nop
   1baf0:	20024d28 	.word	0x20024d28
   1baf4:	20024d5c 	.word	0x20024d5c

0001baf8 <z_pend_curr>:
{
   1baf8:	b510      	push	{r4, lr}
   1bafa:	460c      	mov	r4, r1
   1bafc:	4611      	mov	r1, r2
	pending_current = _current;
   1bafe:	4a06      	ldr	r2, [pc, #24]	; (1bb18 <z_pend_curr+0x20>)
   1bb00:	6890      	ldr	r0, [r2, #8]
   1bb02:	4a06      	ldr	r2, [pc, #24]	; (1bb1c <z_pend_curr+0x24>)
   1bb04:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   1bb06:	461a      	mov	r2, r3
   1bb08:	f7ff ff8e 	bl	1ba28 <pend>
 * handling.
 */
static ALWAYS_INLINE int z_swap(struct k_spinlock *lock, k_spinlock_key_t key)
{
	k_spin_release(lock);
	return z_swap_irqlock(key.key);
   1bb0c:	4620      	mov	r0, r4
}
   1bb0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1bb12:	f002 bff1 	b.w	1eaf8 <z_swap_irqlock>
   1bb16:	bf00      	nop
   1bb18:	20024d28 	.word	0x20024d28
   1bb1c:	20024d5c 	.word	0x20024d5c

0001bb20 <z_tick_sleep.part.19>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
   1bb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
   1bb22:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   1bb24:	f003 f973 	bl	1ee0e <z_tick_get_32>
   1bb28:	1834      	adds	r4, r6, r0
	__asm__ volatile(
   1bb2a:	f04f 0320 	mov.w	r3, #32
   1bb2e:	f3ef 8711 	mrs	r7, BASEPRI
   1bb32:	f383 8811 	msr	BASEPRI, r3
   1bb36:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1bb3a:	4d0d      	ldr	r5, [pc, #52]	; (1bb70 <z_tick_sleep.part.19+0x50>)
   1bb3c:	4b0d      	ldr	r3, [pc, #52]	; (1bb74 <z_tick_sleep.part.19+0x54>)
   1bb3e:	68a8      	ldr	r0, [r5, #8]
   1bb40:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   1bb42:	f7ff ff4b 	bl	1b9dc <z_remove_thread_from_ready_q>
   1bb46:	68a8      	ldr	r0, [r5, #8]
   1bb48:	490b      	ldr	r1, [pc, #44]	; (1bb78 <z_tick_sleep.part.19+0x58>)
   1bb4a:	4632      	mov	r2, r6
   1bb4c:	3018      	adds	r0, #24
   1bb4e:	f000 fad9 	bl	1c104 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
   1bb52:	68aa      	ldr	r2, [r5, #8]
   1bb54:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1bb56:	7b53      	ldrb	r3, [r2, #13]
   1bb58:	f043 0310 	orr.w	r3, r3, #16
   1bb5c:	7353      	strb	r3, [r2, #13]
   1bb5e:	f002 ffcb 	bl	1eaf8 <z_swap_irqlock>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   1bb62:	f003 f954 	bl	1ee0e <z_tick_get_32>
   1bb66:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1bb68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1bb6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bb6e:	bf00      	nop
   1bb70:	20024d28 	.word	0x20024d28
   1bb74:	20024d5c 	.word	0x20024d5c
   1bb78:	0001ebf9 	.word	0x0001ebf9

0001bb7c <z_set_prio>:
{
   1bb7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bb80:	4604      	mov	r4, r0
   1bb82:	f04f 0320 	mov.w	r3, #32
   1bb86:	f3ef 8911 	mrs	r9, BASEPRI
   1bb8a:	f383 8811 	msr	BASEPRI, r3
   1bb8e:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
   1bb92:	f002 ffa8 	bl	1eae6 <z_is_thread_ready>
		if (need_sched) {
   1bb96:	b24e      	sxtb	r6, r1
   1bb98:	4680      	mov	r8, r0
   1bb9a:	b360      	cbz	r0, 1bbf6 <z_set_prio+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1bb9c:	4d17      	ldr	r5, [pc, #92]	; (1bbfc <z_set_prio+0x80>)
   1bb9e:	4621      	mov	r1, r4
   1bba0:	f105 0728 	add.w	r7, r5, #40	; 0x28
   1bba4:	4638      	mov	r0, r7
   1bba6:	f7ff fe1b 	bl	1b7e0 <z_priq_dumb_remove>
	return list->head == list;
   1bbaa:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
   1bbac:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bbae:	42bb      	cmp	r3, r7
   1bbb0:	462a      	mov	r2, r5
   1bbb2:	d019      	beq.n	1bbe8 <z_set_prio+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bbb4:	b1c3      	cbz	r3, 1bbe8 <z_set_prio+0x6c>
   1bbb6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1bbb8:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1bbbc:	42b0      	cmp	r0, r6
   1bbbe:	dd0e      	ble.n	1bbde <z_set_prio+0x62>
	node->prev = successor->prev;
   1bbc0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1bbc2:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1bbc6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1bbc8:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1bbca:	2001      	movs	r0, #1
   1bbcc:	f7ff fe1e 	bl	1b80c <update_cache>
	__asm__ volatile(
   1bbd0:	f389 8811 	msr	BASEPRI, r9
   1bbd4:	f3bf 8f6f 	isb	sy
}
   1bbd8:	4640      	mov	r0, r8
   1bbda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (node == list->tail) ? NULL : node->next;
   1bbde:	4299      	cmp	r1, r3
   1bbe0:	d002      	beq.n	1bbe8 <z_set_prio+0x6c>
   1bbe2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bbe4:	2b00      	cmp	r3, #0
   1bbe6:	d1e7      	bne.n	1bbb8 <z_set_prio+0x3c>
	node->prev = list->tail;
   1bbe8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   1bbea:	6027      	str	r7, [r4, #0]
	node->prev = list->tail;
   1bbec:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1bbee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1bbf0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1bbf2:	62d4      	str	r4, [r2, #44]	; 0x2c
   1bbf4:	e7e9      	b.n	1bbca <z_set_prio+0x4e>
			thread->base.prio = prio;
   1bbf6:	73a6      	strb	r6, [r4, #14]
   1bbf8:	e7ea      	b.n	1bbd0 <z_set_prio+0x54>
   1bbfa:	bf00      	nop
   1bbfc:	20024d28 	.word	0x20024d28

0001bc00 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1bc00:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1bc02:	4b04      	ldr	r3, [pc, #16]	; (1bc14 <z_sched_init+0x14>)
   1bc04:	4608      	mov	r0, r1
   1bc06:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1bc0a:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1bc0e:	f7ff bda7 	b.w	1b760 <k_sched_time_slice_set>
   1bc12:	bf00      	nop
   1bc14:	20024d28 	.word	0x20024d28

0001bc18 <z_impl_k_yield>:
{
   1bc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1bc1a:	4c23      	ldr	r4, [pc, #140]	; (1bca8 <z_impl_k_yield+0x90>)
   1bc1c:	4b23      	ldr	r3, [pc, #140]	; (1bcac <z_impl_k_yield+0x94>)
   1bc1e:	68a2      	ldr	r2, [r4, #8]
   1bc20:	429a      	cmp	r2, r3
   1bc22:	d029      	beq.n	1bc78 <z_impl_k_yield+0x60>
	__asm__ volatile(
   1bc24:	f04f 0320 	mov.w	r3, #32
   1bc28:	f3ef 8611 	mrs	r6, BASEPRI
   1bc2c:	f383 8811 	msr	BASEPRI, r3
   1bc30:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1bc34:	f104 0528 	add.w	r5, r4, #40	; 0x28
   1bc38:	68a1      	ldr	r1, [r4, #8]
   1bc3a:	4628      	mov	r0, r5
   1bc3c:	f7ff fdd0 	bl	1b7e0 <z_priq_dumb_remove>
	return list->head == list;
   1bc40:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1bc42:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bc44:	42aa      	cmp	r2, r5
   1bc46:	d028      	beq.n	1bc9a <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bc48:	b33a      	cbz	r2, 1bc9a <z_impl_k_yield+0x82>
   1bc4a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1bc4c:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1bc50:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1bc54:	428f      	cmp	r7, r1
   1bc56:	dd1b      	ble.n	1bc90 <z_impl_k_yield+0x78>
	node->prev = successor->prev;
   1bc58:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1bc5a:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   1bc5e:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1bc60:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   1bc62:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
   1bc64:	2001      	movs	r0, #1
   1bc66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1bc6a:	735a      	strb	r2, [r3, #13]
   1bc6c:	f7ff fdce 	bl	1b80c <update_cache>
	__asm__ volatile(
   1bc70:	f386 8811 	msr	BASEPRI, r6
   1bc74:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1bc78:	f04f 0320 	mov.w	r3, #32
   1bc7c:	f3ef 8011 	mrs	r0, BASEPRI
   1bc80:	f383 8811 	msr	BASEPRI, r3
   1bc84:	f3bf 8f6f 	isb	sy
}
   1bc88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
}

static inline void z_swap_unlocked(void)
{
	(void) z_swap_irqlock(arch_irq_lock());
   1bc8c:	f002 bf34 	b.w	1eaf8 <z_swap_irqlock>
	return (node == list->tail) ? NULL : node->next;
   1bc90:	4282      	cmp	r2, r0
   1bc92:	d002      	beq.n	1bc9a <z_impl_k_yield+0x82>
   1bc94:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bc96:	2a00      	cmp	r2, #0
   1bc98:	d1da      	bne.n	1bc50 <z_impl_k_yield+0x38>
	node->prev = list->tail;
   1bc9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
   1bc9c:	601d      	str	r5, [r3, #0]
	node->prev = list->tail;
   1bc9e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1bca0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1bca2:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1bca4:	62e3      	str	r3, [r4, #44]	; 0x2c
   1bca6:	e7dc      	b.n	1bc62 <z_impl_k_yield+0x4a>
   1bca8:	20024d28 	.word	0x20024d28
   1bcac:	20020b64 	.word	0x20020b64

0001bcb0 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
   1bcb0:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	if (ms == K_FOREVER) {
   1bcb2:	1c43      	adds	r3, r0, #1
{
   1bcb4:	4604      	mov	r4, r0
	if (ms == K_FOREVER) {
   1bcb6:	d105      	bne.n	1bcc4 <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
   1bcb8:	4b10      	ldr	r3, [pc, #64]	; (1bcfc <z_impl_k_sleep+0x4c>)
   1bcba:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1bcbc:	f000 f936 	bl	1bf2c <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   1bcc0:	4620      	mov	r0, r4
   1bcc2:	bd38      	pop	{r3, r4, r5, pc}
   1bcc4:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1bcc8:	f240 30e7 	movw	r0, #999	; 0x3e7
   1bccc:	2100      	movs	r1, #0
   1bcce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bcd2:	fbe5 0104 	umlal	r0, r1, r5, r4
   1bcd6:	2300      	movs	r3, #0
   1bcd8:	f7f0 fc5e 	bl	c598 <__aeabi_uldivmod>
	if (ticks == 0) {
   1bcdc:	4604      	mov	r4, r0
   1bcde:	b948      	cbnz	r0, 1bcf4 <z_impl_k_sleep+0x44>
	z_impl_k_yield();
   1bce0:	f7ff ff9a 	bl	1bc18 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
   1bce4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1bce8:	fb84 0100 	smull	r0, r1, r4, r0
   1bcec:	0bc4      	lsrs	r4, r0, #15
   1bcee:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1bcf2:	e7e5      	b.n	1bcc0 <z_impl_k_sleep+0x10>
   1bcf4:	f7ff ff14 	bl	1bb20 <z_tick_sleep.part.19>
   1bcf8:	4604      	mov	r4, r0
   1bcfa:	e7f3      	b.n	1bce4 <z_impl_k_sleep+0x34>
   1bcfc:	20024d28 	.word	0x20024d28

0001bd00 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   1bd00:	4b01      	ldr	r3, [pc, #4]	; (1bd08 <z_impl_k_current_get+0x8>)
   1bd02:	6898      	ldr	r0, [r3, #8]
   1bd04:	4770      	bx	lr
   1bd06:	bf00      	nop
   1bd08:	20024d28 	.word	0x20024d28

0001bd0c <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1bd0c:	b570      	push	{r4, r5, r6, lr}
   1bd0e:	4604      	mov	r4, r0
   1bd10:	f04f 0320 	mov.w	r3, #32
   1bd14:	f3ef 8611 	mrs	r6, BASEPRI
   1bd18:	f383 8811 	msr	BASEPRI, r3
   1bd1c:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   1bd20:	f002 ff9b 	bl	1ec5a <z_unpend_first_thread>
	if (thread != NULL) {
   1bd24:	4605      	mov	r5, r0
   1bd26:	b170      	cbz	r0, 1bd46 <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1bd28:	7b43      	ldrb	r3, [r0, #13]
   1bd2a:	06db      	lsls	r3, r3, #27
   1bd2c:	d103      	bne.n	1bd36 <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
   1bd2e:	6983      	ldr	r3, [r0, #24]
   1bd30:	b90b      	cbnz	r3, 1bd36 <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
   1bd32:	f7ff fda5 	bl	1b880 <z_add_thread_to_ready_q>
   1bd36:	2300      	movs	r3, #0
   1bd38:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   1bd3a:	4631      	mov	r1, r6
}
   1bd3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   1bd40:	4807      	ldr	r0, [pc, #28]	; (1bd60 <z_impl_k_sem_give+0x54>)
   1bd42:	f002 bf14 	b.w	1eb6e <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1bd46:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1bd4a:	429a      	cmp	r2, r3
   1bd4c:	bf18      	it	ne
   1bd4e:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1bd50:	2102      	movs	r1, #2
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1bd52:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1bd54:	f104 0010 	add.w	r0, r4, #16
   1bd58:	f003 f990 	bl	1f07c <z_handle_obj_poll_events>
   1bd5c:	e7ed      	b.n	1bd3a <z_impl_k_sem_give+0x2e>
   1bd5e:	bf00      	nop
   1bd60:	20026591 	.word	0x20026591

0001bd64 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   1bd64:	b410      	push	{r4}
   1bd66:	4602      	mov	r2, r0
   1bd68:	460b      	mov	r3, r1
   1bd6a:	f04f 0020 	mov.w	r0, #32
   1bd6e:	f3ef 8111 	mrs	r1, BASEPRI
   1bd72:	f380 8811 	msr	BASEPRI, r0
   1bd76:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   1bd7a:	6894      	ldr	r4, [r2, #8]
   1bd7c:	b14c      	cbz	r4, 1bd92 <z_impl_k_sem_take+0x2e>
		sem->count--;
   1bd7e:	3c01      	subs	r4, #1
   1bd80:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
   1bd82:	f381 8811 	msr	BASEPRI, r1
   1bd86:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   1bd8a:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   1bd8c:	f85d 4b04 	ldr.w	r4, [sp], #4
   1bd90:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   1bd92:	b933      	cbnz	r3, 1bda2 <z_impl_k_sem_take+0x3e>
   1bd94:	f381 8811 	msr	BASEPRI, r1
   1bd98:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1bd9c:	f06f 000f 	mvn.w	r0, #15
   1bda0:	e7f4      	b.n	1bd8c <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1bda2:	4802      	ldr	r0, [pc, #8]	; (1bdac <z_impl_k_sem_take+0x48>)
}
   1bda4:	f85d 4b04 	ldr.w	r4, [sp], #4
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1bda8:	f7ff bea6 	b.w	1baf8 <z_pend_curr>
   1bdac:	20026591 	.word	0x20026591

0001bdb0 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   1bdb0:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1bdb2:	4c08      	ldr	r4, [pc, #32]	; (1bdd4 <k_sys_work_q_init+0x24>)
   1bdb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bdb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1bdbc:	4906      	ldr	r1, [pc, #24]	; (1bdd8 <k_sys_work_q_init+0x28>)
   1bdbe:	4620      	mov	r0, r4
   1bdc0:	f000 f942 	bl	1c048 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1bdc4:	4905      	ldr	r1, [pc, #20]	; (1bddc <k_sys_work_q_init+0x2c>)
   1bdc6:	f104 0010 	add.w	r0, r4, #16
   1bdca:	f002 ff9b 	bl	1ed04 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1bdce:	2000      	movs	r0, #0
   1bdd0:	bd10      	pop	{r4, pc}
   1bdd2:	bf00      	nop
   1bdd4:	20024d68 	.word	0x20024d68
   1bdd8:	20028af8 	.word	0x20028af8
   1bddc:	00020faf 	.word	0x00020faf

0001bde0 <z_check_stack_sentinel>:
 */
void z_check_stack_sentinel(void)
{
	u32_t *stack;

	if ((_current->base.thread_state & _THREAD_DUMMY) != 0) {
   1bde0:	4b09      	ldr	r3, [pc, #36]	; (1be08 <z_check_stack_sentinel+0x28>)
   1bde2:	689b      	ldr	r3, [r3, #8]
   1bde4:	7b5a      	ldrb	r2, [r3, #13]
   1bde6:	07d2      	lsls	r2, r2, #31
   1bde8:	d40d      	bmi.n	1be06 <z_check_stack_sentinel+0x26>
		return;
	}

	stack = (u32_t *)_current->stack_info.start;
   1bdea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
	if (*stack != STACK_SENTINEL) {
   1bdec:	681a      	ldr	r2, [r3, #0]
   1bdee:	f1b2 3ff0 	cmp.w	r2, #4042322160	; 0xf0f0f0f0
   1bdf2:	d008      	beq.n	1be06 <z_check_stack_sentinel+0x26>
		/* Restore it so further checks don't trigger this same error */
		*stack = STACK_SENTINEL;
   1bdf4:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
   1bdf8:	601a      	str	r2, [r3, #0]
		z_except_reason(K_ERR_STACK_CHK_FAIL);
   1bdfa:	4040      	eors	r0, r0
   1bdfc:	f380 8811 	msr	BASEPRI, r0
   1be00:	f04f 0002 	mov.w	r0, #2
   1be04:	df02      	svc	2
	}
}
   1be06:	4770      	bx	lr
   1be08:	20024d28 	.word	0x20024d28

0001be0c <z_impl_k_thread_start>:
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
   1be0c:	b510      	push	{r4, lr}
   1be0e:	4602      	mov	r2, r0
	__asm__ volatile(
   1be10:	f04f 0320 	mov.w	r3, #32
   1be14:	f3ef 8411 	mrs	r4, BASEPRI
   1be18:	f383 8811 	msr	BASEPRI, r3
   1be1c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
   1be20:	7b43      	ldrb	r3, [r0, #13]
   1be22:	0759      	lsls	r1, r3, #29
   1be24:	d404      	bmi.n	1be30 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
   1be26:	f384 8811 	msr	BASEPRI, r4
   1be2a:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
   1be2e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1be30:	f023 0304 	bic.w	r3, r3, #4
   1be34:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   1be36:	f002 ff5c 	bl	1ecf2 <z_is_thread_ready>
   1be3a:	b110      	cbz	r0, 1be42 <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
   1be3c:	4610      	mov	r0, r2
   1be3e:	f7ff fd1f 	bl	1b880 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   1be42:	4621      	mov	r1, r4
}
   1be44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   1be48:	4801      	ldr	r0, [pc, #4]	; (1be50 <z_impl_k_thread_start+0x44>)
   1be4a:	f002 be90 	b.w	1eb6e <z_reschedule>
   1be4e:	bf00      	nop
   1be50:	20026591 	.word	0x20026591

0001be54 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   1be54:	b530      	push	{r4, r5, lr}
   1be56:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1be58:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   1be5a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1be5c:	9504      	str	r5, [sp, #16]
   1be5e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1be60:	9503      	str	r5, [sp, #12]
   1be62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1be64:	9502      	str	r5, [sp, #8]
   1be66:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1be68:	9501      	str	r5, [sp, #4]
   1be6a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1be6c:	9500      	str	r5, [sp, #0]
   1be6e:	f7f3 fd6f 	bl	f950 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1be72:	4b03      	ldr	r3, [pc, #12]	; (1be80 <z_setup_new_thread+0x2c>)
   1be74:	689b      	ldr	r3, [r3, #8]
   1be76:	b103      	cbz	r3, 1be7a <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1be78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1be7a:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   1be7c:	b007      	add	sp, #28
   1be7e:	bd30      	pop	{r4, r5, pc}
   1be80:	20024d28 	.word	0x20024d28

0001be84 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   1be84:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1be86:	2600      	movs	r6, #0
{
   1be88:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1be8a:	9605      	str	r6, [sp, #20]
   1be8c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
{
   1be8e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1be90:	9604      	str	r6, [sp, #16]
   1be92:	9e0d      	ldr	r6, [sp, #52]	; 0x34
{
   1be94:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1be96:	9603      	str	r6, [sp, #12]
   1be98:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1be9a:	9602      	str	r6, [sp, #8]
   1be9c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1be9e:	9601      	str	r6, [sp, #4]
   1bea0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1bea2:	9600      	str	r6, [sp, #0]
   1bea4:	f7ff ffd6 	bl	1be54 <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
   1bea8:	1c6b      	adds	r3, r5, #1
   1beaa:	d003      	beq.n	1beb4 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
   1beac:	b92d      	cbnz	r5, 1beba <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
   1beae:	4620      	mov	r0, r4
   1beb0:	f7ff ffac 	bl	1be0c <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   1beb4:	4620      	mov	r0, r4
   1beb6:	b006      	add	sp, #24
   1beb8:	bd70      	pop	{r4, r5, r6, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   1beba:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1bebe:	f240 30e7 	movw	r0, #999	; 0x3e7
   1bec2:	2100      	movs	r1, #0
   1bec4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bec8:	2300      	movs	r3, #0
   1beca:	fbe6 0105 	umlal	r0, r1, r6, r5
   1bece:	f7f0 fb63 	bl	c598 <__aeabi_uldivmod>
   1bed2:	4903      	ldr	r1, [pc, #12]	; (1bee0 <z_impl_k_thread_create+0x5c>)
   1bed4:	1c42      	adds	r2, r0, #1
   1bed6:	f104 0018 	add.w	r0, r4, #24
   1beda:	f000 f913 	bl	1c104 <z_add_timeout>
   1bede:	e7e9      	b.n	1beb4 <z_impl_k_thread_create+0x30>
   1bee0:	0001ebf9 	.word	0x0001ebf9

0001bee4 <z_thread_single_suspend>:
#include <syscalls/k_thread_create_mrsh.c>
#endif /* CONFIG_USERSPACE */
#endif /* CONFIG_MULTITHREADING */

void z_thread_single_suspend(struct k_thread *thread)
{
   1bee4:	b510      	push	{r4, lr}
   1bee6:	4604      	mov	r4, r0
	if (z_is_thread_ready(thread)) {
   1bee8:	f002 ff03 	bl	1ecf2 <z_is_thread_ready>
   1beec:	b110      	cbz	r0, 1bef4 <z_thread_single_suspend+0x10>
		z_remove_thread_from_ready_q(thread);
   1beee:	4620      	mov	r0, r4
   1bef0:	f7ff fd74 	bl	1b9dc <z_remove_thread_from_ready_q>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1bef4:	f104 0018 	add.w	r0, r4, #24
   1bef8:	f002 ff49 	bl	1ed8e <z_abort_timeout>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1befc:	7b63      	ldrb	r3, [r4, #13]
   1befe:	f043 0310 	orr.w	r3, r3, #16
   1bf02:	7363      	strb	r3, [r4, #13]

	(void)z_abort_thread_timeout(thread);

	z_mark_thread_as_suspended(thread);

	if (thread == _current) {
   1bf04:	4b08      	ldr	r3, [pc, #32]	; (1bf28 <z_thread_single_suspend+0x44>)
   1bf06:	689b      	ldr	r3, [r3, #8]
   1bf08:	42a3      	cmp	r3, r4
   1bf0a:	d10b      	bne.n	1bf24 <z_thread_single_suspend+0x40>
	__asm__ volatile(
   1bf0c:	f04f 0320 	mov.w	r3, #32
   1bf10:	f3ef 8011 	mrs	r0, BASEPRI
   1bf14:	f383 8811 	msr	BASEPRI, r3
   1bf18:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   1bf1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1bf20:	f002 be30 	b.w	1eb84 <z_reschedule_irqlock>
   1bf24:	bd10      	pop	{r4, pc}
   1bf26:	bf00      	nop
   1bf28:	20024d28 	.word	0x20024d28

0001bf2c <z_impl_k_thread_suspend>:

void z_impl_k_thread_suspend(struct k_thread *thread)
{
   1bf2c:	b538      	push	{r3, r4, r5, lr}
   1bf2e:	4605      	mov	r5, r0
   1bf30:	f04f 0320 	mov.w	r3, #32
   1bf34:	f3ef 8411 	mrs	r4, BASEPRI
   1bf38:	f383 8811 	msr	BASEPRI, r3
   1bf3c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
   1bf40:	f7ff ffd0 	bl	1bee4 <z_thread_single_suspend>

	sys_trace_thread_suspend(thread);

	if (thread == _current) {
   1bf44:	4b07      	ldr	r3, [pc, #28]	; (1bf64 <z_impl_k_thread_suspend+0x38>)
   1bf46:	689b      	ldr	r3, [r3, #8]
   1bf48:	42ab      	cmp	r3, r5
   1bf4a:	d105      	bne.n	1bf58 <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
   1bf4c:	4621      	mov	r1, r4
	} else {
		k_spin_unlock(&lock, key);
	}
}
   1bf4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   1bf52:	4805      	ldr	r0, [pc, #20]	; (1bf68 <z_impl_k_thread_suspend+0x3c>)
   1bf54:	f002 be0b 	b.w	1eb6e <z_reschedule>
	__asm__ volatile(
   1bf58:	f384 8811 	msr	BASEPRI, r4
   1bf5c:	f3bf 8f6f 	isb	sy
}
   1bf60:	bd38      	pop	{r3, r4, r5, pc}
   1bf62:	bf00      	nop
   1bf64:	20024d28 	.word	0x20024d28
   1bf68:	20026591 	.word	0x20026591

0001bf6c <z_impl_k_thread_resume>:
	z_mark_thread_as_not_suspended(thread);
	z_ready_thread(thread);
}

void z_impl_k_thread_resume(struct k_thread *thread)
{
   1bf6c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1bf6e:	f04f 0320 	mov.w	r3, #32
   1bf72:	f3ef 8411 	mrs	r4, BASEPRI
   1bf76:	f383 8811 	msr	BASEPRI, r3
   1bf7a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_resume(thread);
   1bf7e:	f002 fed8 	bl	1ed32 <z_thread_single_resume>

	sys_trace_thread_resume(thread);
	z_reschedule(&lock, key);
   1bf82:	4621      	mov	r1, r4
}
   1bf84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   1bf88:	4801      	ldr	r0, [pc, #4]	; (1bf90 <z_impl_k_thread_resume+0x24>)
   1bf8a:	f002 bdf0 	b.w	1eb6e <z_reschedule>
   1bf8e:	bf00      	nop
   1bf90:	20026591 	.word	0x20026591

0001bf94 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1bf94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1bf98:	4e28      	ldr	r6, [pc, #160]	; (1c03c <z_init_static_threads+0xa8>)
   1bf9a:	4d29      	ldr	r5, [pc, #164]	; (1c040 <z_init_static_threads+0xac>)
   1bf9c:	46b0      	mov	r8, r6
{
   1bf9e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1bfa0:	42b5      	cmp	r5, r6
   1bfa2:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1bfa6:	d310      	bcc.n	1bfca <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1bfa8:	f7ff fc06 	bl	1b7b8 <k_sched_lock>
   1bfac:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1bfb0:	f240 36e7 	movw	r6, #999	; 0x3e7
   1bfb4:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   1bfb6:	4c22      	ldr	r4, [pc, #136]	; (1c040 <z_init_static_threads+0xac>)
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1bfb8:	f8df a088 	ldr.w	sl, [pc, #136]	; 1c044 <z_init_static_threads+0xb0>
   1bfbc:	4544      	cmp	r4, r8
   1bfbe:	d321      	bcc.n	1c004 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
   1bfc0:	b007      	add	sp, #28
   1bfc2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   1bfc6:	f7ff bc3f 	b.w	1b848 <k_sched_unlock>
		z_setup_new_thread(
   1bfca:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1bfce:	9305      	str	r3, [sp, #20]
   1bfd0:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1bfd4:	9304      	str	r3, [sp, #16]
   1bfd6:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1bfda:	9303      	str	r3, [sp, #12]
   1bfdc:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1bfe0:	9302      	str	r3, [sp, #8]
   1bfe2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1bfe6:	9301      	str	r3, [sp, #4]
   1bfe8:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1bfec:	9300      	str	r3, [sp, #0]
   1bfee:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1bff2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1bff6:	f7ff ff2d 	bl	1be54 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1bffa:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1bffe:	64dd      	str	r5, [r3, #76]	; 0x4c
   1c000:	4625      	mov	r5, r4
   1c002:	e7cd      	b.n	1bfa0 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   1c004:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1c006:	1c4b      	adds	r3, r1, #1
   1c008:	d004      	beq.n	1c014 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
   1c00a:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   1c00c:	b921      	cbnz	r1, 1c018 <z_init_static_threads+0x84>
   1c00e:	4628      	mov	r0, r5
   1c010:	f7ff fefc 	bl	1be0c <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1c014:	3430      	adds	r4, #48	; 0x30
   1c016:	e7d1      	b.n	1bfbc <z_init_static_threads+0x28>
   1c018:	46b3      	mov	fp, r6
   1c01a:	46bc      	mov	ip, r7
   1c01c:	fbe9 bc01 	umlal	fp, ip, r9, r1
   1c020:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c024:	2300      	movs	r3, #0
   1c026:	4658      	mov	r0, fp
   1c028:	4661      	mov	r1, ip
   1c02a:	f7f0 fab5 	bl	c598 <__aeabi_uldivmod>
   1c02e:	4651      	mov	r1, sl
   1c030:	1c42      	adds	r2, r0, #1
   1c032:	f105 0018 	add.w	r0, r5, #24
   1c036:	f000 f865 	bl	1c104 <z_add_timeout>
   1c03a:	e7eb      	b.n	1c014 <z_init_static_threads+0x80>
   1c03c:	2002c650 	.word	0x2002c650
   1c040:	2002c650 	.word	0x2002c650
   1c044:	0001ebf9 	.word	0x0001ebf9

0001c048 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1c048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c04c:	4605      	mov	r5, r0
   1c04e:	b086      	sub	sp, #24
   1c050:	460e      	mov	r6, r1
   1c052:	4617      	mov	r7, r2
   1c054:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   1c056:	f002 fcd4 	bl	1ea02 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1c05a:	f105 0410 	add.w	r4, r5, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1c05e:	2000      	movs	r0, #0
   1c060:	4b09      	ldr	r3, [pc, #36]	; (1c088 <k_work_q_start+0x40>)
   1c062:	e9cd 0004 	strd	r0, r0, [sp, #16]
   1c066:	e9cd 0802 	strd	r0, r8, [sp, #8]
   1c06a:	e9cd 5000 	strd	r5, r0, [sp]
   1c06e:	463a      	mov	r2, r7
   1c070:	4631      	mov	r1, r6
   1c072:	4620      	mov	r0, r4
   1c074:	f7ff ff06 	bl	1be84 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1c078:	4620      	mov	r0, r4
   1c07a:	4904      	ldr	r1, [pc, #16]	; (1c08c <k_work_q_start+0x44>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1c07c:	b006      	add	sp, #24
   1c07e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c082:	f002 be3f 	b.w	1ed04 <z_impl_k_thread_name_set>
   1c086:	bf00      	nop
   1c088:	0001c7ef 	.word	0x0001c7ef
   1c08c:	00020fb8 	.word	0x00020fb8

0001c090 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   1c090:	4b03      	ldr	r3, [pc, #12]	; (1c0a0 <elapsed+0x10>)
   1c092:	681b      	ldr	r3, [r3, #0]
   1c094:	b90b      	cbnz	r3, 1c09a <elapsed+0xa>
   1c096:	f7f3 bb5b 	b.w	f750 <z_clock_elapsed>
}
   1c09a:	2000      	movs	r0, #0
   1c09c:	4770      	bx	lr
   1c09e:	bf00      	nop
   1c0a0:	20024e28 	.word	0x20024e28

0001c0a4 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c0a4:	6803      	ldr	r3, [r0, #0]
   1c0a6:	b140      	cbz	r0, 1c0ba <remove_timeout+0x16>
   1c0a8:	4a07      	ldr	r2, [pc, #28]	; (1c0c8 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   1c0aa:	6852      	ldr	r2, [r2, #4]
   1c0ac:	4290      	cmp	r0, r2
   1c0ae:	d004      	beq.n	1c0ba <remove_timeout+0x16>
	if (next(t) != NULL) {
   1c0b0:	b11b      	cbz	r3, 1c0ba <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   1c0b2:	689a      	ldr	r2, [r3, #8]
   1c0b4:	6881      	ldr	r1, [r0, #8]
   1c0b6:	440a      	add	r2, r1
   1c0b8:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   1c0ba:	6842      	ldr	r2, [r0, #4]
   1c0bc:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1c0be:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c0c0:	2300      	movs	r3, #0
	node->prev = NULL;
   1c0c2:	e9c0 3300 	strd	r3, r3, [r0]
}
   1c0c6:	4770      	bx	lr
   1c0c8:	2002c564 	.word	0x2002c564

0001c0cc <next_timeout>:
	return list->head == list;
   1c0cc:	4b0b      	ldr	r3, [pc, #44]	; (1c0fc <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   1c0ce:	b510      	push	{r4, lr}
   1c0d0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c0d2:	429c      	cmp	r4, r3
   1c0d4:	bf08      	it	eq
   1c0d6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   1c0d8:	f7ff ffda 	bl	1c090 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1c0dc:	b154      	cbz	r4, 1c0f4 <next_timeout+0x28>
   1c0de:	68a3      	ldr	r3, [r4, #8]
   1c0e0:	1a18      	subs	r0, r3, r0
   1c0e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1c0e6:	4b06      	ldr	r3, [pc, #24]	; (1c100 <next_timeout+0x34>)
   1c0e8:	691b      	ldr	r3, [r3, #16]
   1c0ea:	b113      	cbz	r3, 1c0f2 <next_timeout+0x26>
   1c0ec:	4298      	cmp	r0, r3
   1c0ee:	bfa8      	it	ge
   1c0f0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1c0f2:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1c0f4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1c0f8:	e7f5      	b.n	1c0e6 <next_timeout+0x1a>
   1c0fa:	bf00      	nop
   1c0fc:	2002c564 	.word	0x2002c564
   1c100:	20024d28 	.word	0x20024d28

0001c104 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   1c104:	b570      	push	{r4, r5, r6, lr}
   1c106:	4604      	mov	r4, r0
   1c108:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1c10a:	60c1      	str	r1, [r0, #12]
   1c10c:	f04f 0320 	mov.w	r3, #32
   1c110:	f3ef 8511 	mrs	r5, BASEPRI
   1c114:	f383 8811 	msr	BASEPRI, r3
   1c118:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1c11c:	f7ff ffb8 	bl	1c090 <elapsed>
   1c120:	2e01      	cmp	r6, #1
   1c122:	bfac      	ite	ge
   1c124:	1980      	addge	r0, r0, r6
   1c126:	3001      	addlt	r0, #1
	return list->head == list;
   1c128:	4b16      	ldr	r3, [pc, #88]	; (1c184 <z_add_timeout+0x80>)
   1c12a:	60a0      	str	r0, [r4, #8]
   1c12c:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c12e:	429a      	cmp	r2, r3
   1c130:	d001      	beq.n	1c136 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c132:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1c134:	b932      	cbnz	r2, 1c144 <z_add_timeout+0x40>
	node->prev = list->tail;
   1c136:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1c138:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   1c13a:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   1c13c:	685a      	ldr	r2, [r3, #4]
   1c13e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1c140:	605c      	str	r4, [r3, #4]
   1c142:	e00a      	b.n	1c15a <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   1c144:	6890      	ldr	r0, [r2, #8]
   1c146:	68a1      	ldr	r1, [r4, #8]
   1c148:	4288      	cmp	r0, r1
   1c14a:	dd15      	ble.n	1c178 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
   1c14c:	1a41      	subs	r1, r0, r1
   1c14e:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   1c150:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1c152:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
   1c156:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1c158:	6054      	str	r4, [r2, #4]
	return list->head == list;
   1c15a:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c15c:	429a      	cmp	r2, r3
   1c15e:	d006      	beq.n	1c16e <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1c160:	4294      	cmp	r4, r2
   1c162:	d104      	bne.n	1c16e <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
   1c164:	f7ff ffb2 	bl	1c0cc <next_timeout>
   1c168:	2100      	movs	r1, #0
   1c16a:	f7f3 fa9b 	bl	f6a4 <z_clock_set_timeout>
	__asm__ volatile(
   1c16e:	f385 8811 	msr	BASEPRI, r5
   1c172:	f3bf 8f6f 	isb	sy
		}
	}
}
   1c176:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
   1c178:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1c17a:	4296      	cmp	r6, r2
   1c17c:	60a1      	str	r1, [r4, #8]
   1c17e:	d0da      	beq.n	1c136 <z_add_timeout+0x32>
   1c180:	6812      	ldr	r2, [r2, #0]
   1c182:	e7d7      	b.n	1c134 <z_add_timeout+0x30>
   1c184:	2002c564 	.word	0x2002c564

0001c188 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   1c188:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   1c18c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1c18e:	f7ff fbef 	bl	1b970 <z_time_slice>
	__asm__ volatile(
   1c192:	f04f 0320 	mov.w	r3, #32
   1c196:	f3ef 8511 	mrs	r5, BASEPRI
   1c19a:	f383 8811 	msr	BASEPRI, r3
   1c19e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1c1a2:	4f21      	ldr	r7, [pc, #132]	; (1c228 <z_clock_announce+0xa0>)
   1c1a4:	4e21      	ldr	r6, [pc, #132]	; (1c22c <z_clock_announce+0xa4>)
   1c1a6:	46b8      	mov	r8, r7
	return list->head == list;
   1c1a8:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1c230 <z_clock_announce+0xa8>
   1c1ac:	6034      	str	r4, [r6, #0]
   1c1ae:	f8d9 4000 	ldr.w	r4, [r9]
   1c1b2:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c1b4:	454c      	cmp	r4, r9
   1c1b6:	e9d7 bc00 	ldrd	fp, ip, [r7]
   1c1ba:	d005      	beq.n	1c1c8 <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1c1bc:	b124      	cbz	r4, 1c1c8 <z_clock_announce+0x40>
   1c1be:	68a3      	ldr	r3, [r4, #8]
   1c1c0:	4293      	cmp	r3, r2
   1c1c2:	dd14      	ble.n	1c1ee <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1c1c4:	1a9b      	subs	r3, r3, r2
   1c1c6:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1c1c8:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1c1ca:	eb1b 0002 	adds.w	r0, fp, r2
   1c1ce:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   1c1d2:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
   1c1d6:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   1c1d8:	f7ff ff78 	bl	1c0cc <next_timeout>
   1c1dc:	4621      	mov	r1, r4
   1c1de:	f7f3 fa61 	bl	f6a4 <z_clock_set_timeout>
	__asm__ volatile(
   1c1e2:	f385 8811 	msr	BASEPRI, r5
   1c1e6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1c1ea:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   1c1ee:	eb1b 0003 	adds.w	r0, fp, r3
   1c1f2:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   1c1f6:	1ad3      	subs	r3, r2, r3
   1c1f8:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1c1fa:	2300      	movs	r3, #0
		curr_tick += dt;
   1c1fc:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   1c200:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   1c202:	4620      	mov	r0, r4
   1c204:	f7ff ff4e 	bl	1c0a4 <remove_timeout>
   1c208:	f385 8811 	msr	BASEPRI, r5
   1c20c:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1c210:	68e3      	ldr	r3, [r4, #12]
   1c212:	4798      	blx	r3
	__asm__ volatile(
   1c214:	f04f 0320 	mov.w	r3, #32
   1c218:	f3ef 8511 	mrs	r5, BASEPRI
   1c21c:	f383 8811 	msr	BASEPRI, r3
   1c220:	f3bf 8f6f 	isb	sy
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1c224:	e7c3      	b.n	1c1ae <z_clock_announce+0x26>
   1c226:	bf00      	nop
   1c228:	20020108 	.word	0x20020108
   1c22c:	20024e28 	.word	0x20024e28
   1c230:	2002c564 	.word	0x2002c564

0001c234 <z_tick_get>:

s64_t z_tick_get(void)
{
   1c234:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   1c238:	f04f 0320 	mov.w	r3, #32
   1c23c:	f3ef 8411 	mrs	r4, BASEPRI
   1c240:	f383 8811 	msr	BASEPRI, r3
   1c244:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1c248:	f7f3 fa82 	bl	f750 <z_clock_elapsed>
   1c24c:	4b07      	ldr	r3, [pc, #28]	; (1c26c <z_tick_get+0x38>)
   1c24e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c252:	eb12 0b00 	adds.w	fp, r2, r0
   1c256:	f143 0c00 	adc.w	ip, r3, #0
   1c25a:	4658      	mov	r0, fp
   1c25c:	4661      	mov	r1, ip
	__asm__ volatile(
   1c25e:	f384 8811 	msr	BASEPRI, r4
   1c262:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1c266:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   1c26a:	bf00      	nop
   1c26c:	20020108 	.word	0x20020108

0001c270 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   1c270:	6a02      	ldr	r2, [r0, #32]
{
   1c272:	b538      	push	{r3, r4, r5, lr}
	if (timer->period > 0) {
   1c274:	2a00      	cmp	r2, #0
{
   1c276:	4604      	mov	r4, r0
	if (timer->period > 0) {
   1c278:	dd02      	ble.n	1c280 <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c27a:	490e      	ldr	r1, [pc, #56]	; (1c2b4 <z_timer_expiration_handler+0x44>)
   1c27c:	f7ff ff42 	bl	1c104 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1c280:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c282:	3301      	adds	r3, #1
   1c284:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1c286:	69a3      	ldr	r3, [r4, #24]
   1c288:	b10b      	cbz	r3, 1c28e <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
   1c28a:	4620      	mov	r0, r4
   1c28c:	4798      	blx	r3
	return list->head == list;
   1c28e:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c292:	42a5      	cmp	r5, r4
   1c294:	d00d      	beq.n	1c2b2 <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1c296:	b165      	cbz	r5, 1c2b2 <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1c298:	4628      	mov	r0, r5
   1c29a:	f002 fc4f 	bl	1eb3c <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1c29e:	7b6b      	ldrb	r3, [r5, #13]
   1c2a0:	06db      	lsls	r3, r3, #27
   1c2a2:	d104      	bne.n	1c2ae <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
   1c2a4:	69ab      	ldr	r3, [r5, #24]
   1c2a6:	b913      	cbnz	r3, 1c2ae <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
   1c2a8:	4628      	mov	r0, r5
   1c2aa:	f7ff fae9 	bl	1b880 <z_add_thread_to_ready_q>
   1c2ae:	2300      	movs	r3, #0
   1c2b0:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	arch_thread_return_value_set(thread, 0);
}
   1c2b2:	bd38      	pop	{r3, r4, r5, pc}
   1c2b4:	0001c271 	.word	0x0001c271

0001c2b8 <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   1c2b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c2bc:	f240 36e7 	movw	r6, #999	; 0x3e7
   1c2c0:	2700      	movs	r7, #0
   1c2c2:	4604      	mov	r4, r0
   1c2c4:	4688      	mov	r8, r1
   1c2c6:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1c2ca:	4630      	mov	r0, r6
   1c2cc:	4639      	mov	r1, r7
   1c2ce:	2300      	movs	r3, #0
   1c2d0:	fbe5 0102 	umlal	r0, r1, r5, r2
   1c2d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c2d8:	f7f0 f95e 	bl	c598 <__aeabi_uldivmod>
   1c2dc:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = k_ms_to_ticks_ceil32(period);
   1c2de:	9000      	str	r0, [sp, #0]
   1c2e0:	4630      	mov	r0, r6
   1c2e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c2e6:	2300      	movs	r3, #0
   1c2e8:	fbe5 0108 	umlal	r0, r1, r5, r8
   1c2ec:	f7f0 f954 	bl	c598 <__aeabi_uldivmod>
	duration_in_ticks = k_ms_to_ticks_ceil32(duration);
   1c2f0:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
   1c2f2:	4620      	mov	r0, r4
   1c2f4:	f002 fd4b 	bl	1ed8e <z_abort_timeout>
	timer->period = period_in_ticks;
   1c2f8:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c2fa:	4620      	mov	r0, r4
	timer->period = period_in_ticks;
   1c2fc:	6223      	str	r3, [r4, #32]
	timer->status = 0U;
   1c2fe:	2300      	movs	r3, #0
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c300:	9a01      	ldr	r2, [sp, #4]
   1c302:	4903      	ldr	r1, [pc, #12]	; (1c310 <z_impl_k_timer_start+0x58>)
	timer->status = 0U;
   1c304:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
   1c306:	b002      	add	sp, #8
   1c308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c30c:	f7ff befa 	b.w	1c104 <z_add_timeout>
   1c310:	0001c271 	.word	0x0001c271

0001c314 <k_poll_event_init>:
 */
static struct k_spinlock lock;

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
   1c314:	b510      	push	{r4, lr}
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
	__ASSERT(obj != NULL, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   1c316:	7b44      	ldrb	r4, [r0, #13]
   1c318:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
   1c31c:	7b81      	ldrb	r1, [r0, #14]
	event->type = type;
   1c31e:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   1c320:	f362 0141 	bfi	r1, r2, #1, #1
	event->poller = NULL;
   1c324:	2200      	movs	r2, #0
	event->mode = mode;
   1c326:	7381      	strb	r1, [r0, #14]
	event->state = K_POLL_STATE_NOT_READY;
   1c328:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
   1c32a:	6082      	str	r2, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   1c32c:	4a02      	ldr	r2, [pc, #8]	; (1c338 <k_poll_event_init+0x24>)
   1c32e:	400a      	ands	r2, r1
	event->unused = 0U;
	event->obj = obj;
   1c330:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   1c334:	bd10      	pop	{r4, pc}
   1c336:	bf00      	nop
   1c338:	00020fff 	.word	0x00020fff

0001c33c <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   1c33c:	2301      	movs	r3, #1
{
   1c33e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c342:	b086      	sub	sp, #24
	struct _poller poller = { .is_polling = true,
   1c344:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   1c348:	4b23      	ldr	r3, [pc, #140]	; (1c3d8 <z_impl_k_poll+0x9c>)

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events > 0, "zero events\n");

	events_registered = register_events(events, num_events, &poller,
   1c34a:	4690      	mov	r8, r2
	struct _poller poller = { .is_polling = true,
   1c34c:	689b      	ldr	r3, [r3, #8]
{
   1c34e:	4606      	mov	r6, r0
	struct _poller poller = { .is_polling = true,
   1c350:	9304      	str	r3, [sp, #16]
   1c352:	4b22      	ldr	r3, [pc, #136]	; (1c3dc <z_impl_k_poll+0xa0>)
   1c354:	9305      	str	r3, [sp, #20]
	events_registered = register_events(events, num_events, &poller,
   1c356:	fab2 f382 	clz	r3, r2
   1c35a:	aa03      	add	r2, sp, #12
   1c35c:	095b      	lsrs	r3, r3, #5
   1c35e:	f002 fe33 	bl	1efc8 <register_events>
   1c362:	4607      	mov	r7, r0
	__asm__ volatile(
   1c364:	f04f 0320 	mov.w	r3, #32
   1c368:	f3ef 8511 	mrs	r5, BASEPRI
   1c36c:	f383 8811 	msr	BASEPRI, r3
   1c370:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   1c374:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1c378:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1c37c:	b94b      	cbnz	r3, 1c392 <z_impl_k_poll+0x56>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   1c37e:	462a      	mov	r2, r5
   1c380:	4639      	mov	r1, r7
   1c382:	4630      	mov	r0, r6
   1c384:	f002 fd88 	bl	1ee98 <clear_event_registrations>
	__asm__ volatile(
   1c388:	f385 8811 	msr	BASEPRI, r5
   1c38c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
   1c390:	e00b      	b.n	1c3aa <z_impl_k_poll+0x6e>
	poller.is_polling = false;
   1c392:	2300      	movs	r3, #0
   1c394:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   1c398:	f1b8 0f00 	cmp.w	r8, #0
   1c39c:	d109      	bne.n	1c3b2 <z_impl_k_poll+0x76>
   1c39e:	f385 8811 	msr	BASEPRI, r5
   1c3a2:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1c3a6:	f06f 040a 	mvn.w	r4, #10
}
   1c3aa:	4620      	mov	r0, r4
   1c3ac:	b006      	add	sp, #24
   1c3ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1c3b2:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c3b4:	4643      	mov	r3, r8
   1c3b6:	4629      	mov	r1, r5
   1c3b8:	4809      	ldr	r0, [pc, #36]	; (1c3e0 <z_impl_k_poll+0xa4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1c3ba:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c3be:	f7ff fb9b 	bl	1baf8 <z_pend_curr>
   1c3c2:	4604      	mov	r4, r0
	__asm__ volatile(
   1c3c4:	f04f 0320 	mov.w	r3, #32
   1c3c8:	f3ef 8511 	mrs	r5, BASEPRI
   1c3cc:	f383 8811 	msr	BASEPRI, r3
   1c3d0:	f3bf 8f6f 	isb	sy
   1c3d4:	e7d3      	b.n	1c37e <z_impl_k_poll+0x42>
   1c3d6:	bf00      	nop
   1c3d8:	20024d28 	.word	0x20024d28
   1c3dc:	0001ef29 	.word	0x0001ef29
   1c3e0:	20026591 	.word	0x20026591

0001c3e4 <enter_sleep>:

void enter_sleep(u16_t mode)
{
	if (mode == SHUTDOWN_MODEM_ONLY) {
   1c3e4:	2803      	cmp	r0, #3
{
   1c3e6:	b508      	push	{r3, lr}
	if (mode == SHUTDOWN_MODEM_ONLY) {
   1c3e8:	d103      	bne.n	1c3f2 <enter_sleep+0xe>
	if (mode == SHUTDOWN_APP_MODEM) {
		lte_lc_power_off();
	}
	bsd_shutdown();
	nrf_regulators_system_off(NRF_REGULATORS_NS);
}
   1c3ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		lte_lc_power_off();
   1c3ee:	f7f6 b9f5 	b.w	127dc <lte_lc_power_off>
	if (mode == SHUTDOWN_APP_MODEM) {
   1c3f2:	2801      	cmp	r0, #1
   1c3f4:	d101      	bne.n	1c3fa <enter_sleep+0x16>
		lte_lc_power_off();
   1c3f6:	f7f6 f9f1 	bl	127dc <lte_lc_power_off>
	bsd_shutdown();
   1c3fa:	f7f8 fb31 	bl	14a60 <bsd_shutdown>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   1c3fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1c402:	2201      	movs	r2, #1
   1c404:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1c408:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   1c40c:	bf20      	wfe
   1c40e:	e7fd      	b.n	1c40c <enter_sleep+0x28>

0001c410 <main>:
		enter_sleep(SHUTDOWN_APP_MODEM);
	}
}
#else
void main(void)
{
   1c410:	b508      	push	{r3, lr}
	start_execute();
   1c412:	f7f0 fa55 	bl	c8c0 <start_execute>
	
	while(1)
	{
		send_message();
   1c416:	f7f1 fecd 	bl	e1b4 <send_message>
   1c41a:	e7fc      	b.n	1c416 <main+0x6>

0001c41c <uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   1c41c:	6843      	ldr	r3, [r0, #4]
   1c41e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c420:	b103      	cbz	r3, 1c424 <uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   1c422:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
}
   1c424:	4770      	bx	lr

0001c426 <slm_at_callback>:
{
   1c426:	b510      	push	{r4, lr}
   1c428:	4604      	mov	r4, r0
	write_uart_string(str, strlen(str));
   1c42a:	f001 f8e9 	bl	1d600 <strlen>
   1c42e:	4601      	mov	r1, r0
   1c430:	4620      	mov	r0, r4
}
   1c432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	write_uart_string(str, strlen(str));
   1c436:	f7f0 ba7f 	b.w	c938 <write_uart_string>

0001c43a <response_handler>:
{
   1c43a:	b510      	push	{r4, lr}
	int len = strlen(response) + 1;
   1c43c:	4608      	mov	r0, r1
{
   1c43e:	460c      	mov	r4, r1
	int len = strlen(response) + 1;
   1c440:	f001 f8de 	bl	1d600 <strlen>
   1c444:	1c41      	adds	r1, r0, #1
	if (len > 1) {
   1c446:	2901      	cmp	r1, #1
   1c448:	dd04      	ble.n	1c454 <response_handler+0x1a>
		write_uart_string(response, len);
   1c44a:	4620      	mov	r0, r4
}
   1c44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		write_uart_string(response, len);
   1c450:	f7f0 ba72 	b.w	c938 <write_uart_string>
}
   1c454:	bd10      	pop	{r4, pc}

0001c456 <z_errno>:
   1c456:	f7fe bdad 	b.w	1afb4 <z_impl_z_errno>

0001c45a <k_sleep>:
	return z_impl_k_sleep(ms);
   1c45a:	f7ff bc29 	b.w	1bcb0 <z_impl_k_sleep>

0001c45e <slm_at_tcpip_uninit>:
	return do_socket_close(0);
   1c45e:	2000      	movs	r0, #0
   1c460:	f7f0 bd42 	b.w	cee8 <do_socket_close>

0001c464 <z_errno>:
   1c464:	f7fe bda6 	b.w	1afb4 <z_impl_z_errno>

0001c468 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
   1c468:	b570      	push	{r4, r5, r6, lr}
   1c46a:	250c      	movs	r5, #12
   1c46c:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   1c46e:	f990 000b 	ldrsb.w	r0, [r0, #11]
   1c472:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
   1c474:	4288      	cmp	r0, r1

	*word = &bitarray[bn / 32];
   1c476:	4610      	mov	r0, r2
   1c478:	eb06 0405 	add.w	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   1c47c:	bfb8      	it	lt
   1c47e:	5974      	ldrlt	r4, [r6, r5]
	*word = &bitarray[bn / 32];
   1c480:	2a00      	cmp	r2, #0
   1c482:	bfb8      	it	lt
   1c484:	f102 001f 	addlt.w	r0, r2, #31
   1c488:	1140      	asrs	r0, r0, #5
   1c48a:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   1c48e:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
   1c490:	f002 001f 	and.w	r0, r2, #31
   1c494:	bd70      	pop	{r4, r5, r6, pc}

0001c496 <pool_irq_lock.isra.2.part.3>:
   1c496:	f04f 0320 	mov.w	r3, #32
   1c49a:	f3ef 8011 	mrs	r0, BASEPRI
   1c49e:	f383 8811 	msr	BASEPRI, r3
   1c4a2:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
   1c4a6:	4770      	bx	lr

0001c4a8 <pool_irq_unlock.isra.4>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c4a8:	07c3      	lsls	r3, r0, #31
   1c4aa:	d503      	bpl.n	1c4b4 <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   1c4ac:	f381 8811 	msr	BASEPRI, r1
   1c4b0:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
   1c4b4:	4770      	bx	lr

0001c4b6 <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   1c4b6:	23ff      	movs	r3, #255	; 0xff
{
   1c4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1c4bc:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
   1c4be:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1c4c0:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
   1c4c2:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
   1c4c4:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1c4c8:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1c4ca:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1c4cc:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
   1c4d0:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1c4d4:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
   1c4d6:	4598      	cmp	r8, r3
   1c4d8:	dc05      	bgt.n	1c4e6 <z_sys_mem_pool_base_init+0x30>
   1c4da:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   1c4dc:	4619      	mov	r1, r3
   1c4de:	428f      	cmp	r7, r1
   1c4e0:	dc20      	bgt.n	1c524 <z_sys_mem_pool_base_init+0x6e>
}
   1c4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   1c4e6:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   1c4ea:	fb09 fe03 	mul.w	lr, r9, r3
   1c4ee:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   1c4f2:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
   1c4f4:	eb0a 040e 	add.w	r4, sl, lr
   1c4f8:	f104 0b04 	add.w	fp, r4, #4
	list->tail = (sys_dnode_t *)list;
   1c4fc:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   1c500:	d805      	bhi.n	1c50e <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   1c502:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   1c504:	0892      	lsrs	r2, r2, #2
   1c506:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   1c50a:	3301      	adds	r3, #1
   1c50c:	e7e3      	b.n	1c4d6 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   1c50e:	f115 041f 	adds.w	r4, r5, #31
   1c512:	bf48      	it	mi
   1c514:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   1c518:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   1c51a:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   1c51e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1c522:	e7ef      	b.n	1c504 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   1c524:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   1c526:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   1c528:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   1c52c:	18ec      	adds	r4, r5, r3
	node->next = list;
   1c52e:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   1c532:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   1c534:	3101      	adds	r1, #1
   1c536:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   1c538:	6895      	ldr	r5, [r2, #8]
   1c53a:	4433      	add	r3, r6
   1c53c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1c53e:	6094      	str	r4, [r2, #8]
   1c540:	e7cd      	b.n	1c4de <z_sys_mem_pool_base_init+0x28>

0001c542 <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
   1c542:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c546:	b087      	sub	sp, #28
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c548:	7a84      	ldrb	r4, [r0, #10]
{
   1c54a:	af00      	add	r7, sp, #0
   1c54c:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c550:	00a3      	lsls	r3, r4, #2
   1c552:	3307      	adds	r3, #7
   1c554:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1c558:	ebad 0d03 	sub.w	sp, sp, r3
   1c55c:	46ea      	mov	sl, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
   1c55e:	4653      	mov	r3, sl
   1c560:	6842      	ldr	r2, [r0, #4]
{
   1c562:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   1c564:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   1c568:	2200      	movs	r2, #0
   1c56a:	4294      	cmp	r4, r2
   1c56c:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   1c570:	dd09      	ble.n	1c586 <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   1c572:	b122      	cbz	r2, 1c57e <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1c574:	6818      	ldr	r0, [r3, #0]
   1c576:	0880      	lsrs	r0, r0, #2
   1c578:	f020 0003 	bic.w	r0, r0, #3
   1c57c:	6058      	str	r0, [r3, #4]
		}

		if (lsizes[i] < size) {
   1c57e:	f853 0f04 	ldr.w	r0, [r3, #4]!
   1c582:	4288      	cmp	r0, r1
   1c584:	d208      	bcs.n	1c598 <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
   1c586:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   1c58a:	d107      	bne.n	1c59c <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   1c58c:	2300      	movs	r3, #0
   1c58e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1c590:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
   1c592:	f06f 000b 	mvn.w	r0, #11
   1c596:	e02c      	b.n	1c5f2 <z_sys_mem_pool_block_alloc+0xb0>
	for (i = 0; i < p->n_levels; i++) {
   1c598:	3201      	adds	r2, #1
   1c59a:	e7e6      	b.n	1c56a <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c59c:	7c28      	ldrb	r0, [r5, #16]
   1c59e:	f010 0001 	ands.w	r0, r0, #1
   1c5a2:	d001      	beq.n	1c5a8 <z_sys_mem_pool_block_alloc+0x66>
   1c5a4:	f7ff ff77 	bl	1c496 <pool_irq_lock.isra.2.part.3>
   1c5a8:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
   1c5aa:	4680      	mov	r8, r0
	block = sys_dlist_get(&p->levels[l].free_list);
   1c5ac:	464e      	mov	r6, r9
   1c5ae:	68ea      	ldr	r2, [r5, #12]
   1c5b0:	fb03 2309 	mla	r3, r3, r9, r2
	return list->head == list;
   1c5b4:	461a      	mov	r2, r3
   1c5b6:	f852 4f04 	ldr.w	r4, [r2, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1c5ba:	4294      	cmp	r4, r2
   1c5bc:	d11d      	bne.n	1c5fa <z_sys_mem_pool_block_alloc+0xb8>
	for (i = alloc_l; i >= 0; i--) {
   1c5be:	3e01      	subs	r6, #1
   1c5c0:	1c72      	adds	r2, r6, #1
   1c5c2:	f1a3 030c 	sub.w	r3, r3, #12
   1c5c6:	d1f5      	bne.n	1c5b4 <z_sys_mem_pool_block_alloc+0x72>
   1c5c8:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
   1c5ca:	4641      	mov	r1, r8
   1c5cc:	7c28      	ldrb	r0, [r5, #16]
   1c5ce:	f7ff ff6b 	bl	1c4a8 <pool_irq_unlock.isra.4>
	*data_p = data;
   1c5d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1c5d4:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   1c5d6:	2c00      	cmp	r4, #0
   1c5d8:	d0db      	beq.n	1c592 <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
   1c5da:	68bb      	ldr	r3, [r7, #8]
	*block_p = block_num(p, data, lsizes[alloc_l]);

	return 0;
   1c5dc:	2000      	movs	r0, #0
	*level_p = alloc_l;
   1c5de:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c5e2:	682b      	ldr	r3, [r5, #0]
   1c5e4:	1ae4      	subs	r4, r4, r3
   1c5e6:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   1c5ea:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   1c5ee:	687b      	ldr	r3, [r7, #4]
   1c5f0:	601c      	str	r4, [r3, #0]
}
   1c5f2:	371c      	adds	r7, #28
   1c5f4:	46bd      	mov	sp, r7
   1c5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	node->prev->next = node->next;
   1c5fa:	e9d4 3200 	ldrd	r3, r2, [r4]
   1c5fe:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1c600:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c602:	2300      	movs	r3, #0
	node->prev = NULL;
   1c604:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c608:	682b      	ldr	r3, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   1c60a:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c60e:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   1c610:	f107 0b14 	add.w	fp, r7, #20
   1c614:	fb92 f2f1 	sdiv	r2, r2, r1
   1c618:	465b      	mov	r3, fp
   1c61a:	4631      	mov	r1, r6
   1c61c:	4628      	mov	r0, r5
   1c61e:	f7ff ff23 	bl	1c468 <get_bit_ptr>
	*word |= (1<<bit);
   1c622:	2201      	movs	r2, #1
   1c624:	6979      	ldr	r1, [r7, #20]
   1c626:	fa02 f000 	lsl.w	r0, r2, r0
   1c62a:	680b      	ldr	r3, [r1, #0]
   1c62c:	603a      	str	r2, [r7, #0]
   1c62e:	4303      	orrs	r3, r0
   1c630:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
   1c632:	454e      	cmp	r6, r9
   1c634:	dac9      	bge.n	1c5ca <z_sys_mem_pool_block_alloc+0x88>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c636:	682a      	ldr	r2, [r5, #0]
   1c638:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
   1c63c:	1aa2      	subs	r2, r4, r2
   1c63e:	fb92 f2f3 	sdiv	r2, r2, r3
	set_alloc_bit(p, l + 1, 4*bn);
   1c642:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   1c644:	465b      	mov	r3, fp
   1c646:	0092      	lsls	r2, r2, #2
   1c648:	4631      	mov	r1, r6
   1c64a:	4628      	mov	r0, r5
   1c64c:	f7ff ff0c 	bl	1c468 <get_bit_ptr>
	*word |= (1<<bit);
   1c650:	697a      	ldr	r2, [r7, #20]
   1c652:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1c654:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   1c656:	fa03 f000 	lsl.w	r0, r3, r0
   1c65a:	6813      	ldr	r3, [r2, #0]
   1c65c:	4303      	orrs	r3, r0
   1c65e:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1c660:	230c      	movs	r3, #12
   1c662:	2203      	movs	r2, #3
   1c664:	fb03 1106 	mla	r1, r3, r6, r1
		int lsz = lsizes[l + 1];
   1c668:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1c66c:	f101 0e04 	add.w	lr, r1, #4
   1c670:	1823      	adds	r3, r4, r0
   1c672:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
   1c674:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   1c676:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   1c67a:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1c67c:	688a      	ldr	r2, [r1, #8]
   1c67e:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   1c680:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
   1c682:	608b      	str	r3, [r1, #8]
   1c684:	3a01      	subs	r2, #1
   1c686:	4403      	add	r3, r0
   1c688:	60fa      	str	r2, [r7, #12]
   1c68a:	d1f3      	bne.n	1c674 <z_sys_mem_pool_block_alloc+0x132>
				pool_irq_unlock(p, key);
   1c68c:	4641      	mov	r1, r8
   1c68e:	7c28      	ldrb	r0, [r5, #16]
   1c690:	f7ff ff0a 	bl	1c4a8 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c694:	7c2b      	ldrb	r3, [r5, #16]
   1c696:	07db      	lsls	r3, r3, #31
   1c698:	d503      	bpl.n	1c6a2 <z_sys_mem_pool_block_alloc+0x160>
   1c69a:	f7ff fefc 	bl	1c496 <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   1c69e:	4680      	mov	r8, r0
   1c6a0:	e7c7      	b.n	1c632 <z_sys_mem_pool_block_alloc+0xf0>
		return 0;
   1c6a2:	68f8      	ldr	r0, [r7, #12]
   1c6a4:	e7fb      	b.n	1c69e <z_sys_mem_pool_block_alloc+0x15c>

0001c6a6 <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   1c6a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c6aa:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c6ac:	7a83      	ldrb	r3, [r0, #10]
{
   1c6ae:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c6b0:	009b      	lsls	r3, r3, #2
   1c6b2:	3307      	adds	r3, #7
   1c6b4:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1c6b8:	ebad 0d03 	sub.w	sp, sp, r3
   1c6bc:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   1c6be:	6843      	ldr	r3, [r0, #4]
{
   1c6c0:	4606      	mov	r6, r0
	lsizes[0] = p->max_sz;
   1c6c2:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
   1c6c4:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
   1c6c6:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
   1c6ca:	4281      	cmp	r1, r0
   1c6cc:	d215      	bcs.n	1c6fa <z_sys_mem_pool_block_free+0x54>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c6ce:	7c30      	ldrb	r0, [r6, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   1c6d0:	4688      	mov	r8, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c6d2:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
   1c6d6:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c6d8:	d001      	beq.n	1c6de <z_sys_mem_pool_block_free+0x38>
   1c6da:	f7ff fedc 	bl	1c496 <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   1c6de:	4604      	mov	r4, r0
	while (level >= 0) {
   1c6e0:	f1b8 0f00 	cmp.w	r8, #0
   1c6e4:	da11      	bge.n	1c70a <z_sys_mem_pool_block_free+0x64>
	return -1;
   1c6e6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
   1c6ea:	4621      	mov	r1, r4
   1c6ec:	7c30      	ldrb	r0, [r6, #16]
   1c6ee:	f7ff fedb 	bl	1c4a8 <pool_irq_unlock.isra.4>
}
   1c6f2:	3714      	adds	r7, #20
   1c6f4:	46bd      	mov	sp, r7
   1c6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1c6fa:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
   1c6fc:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1c6fe:	089b      	lsrs	r3, r3, #2
   1c700:	f023 0303 	bic.w	r3, r3, #3
   1c704:	f844 3f04 	str.w	r3, [r4, #4]!
   1c708:	e7df      	b.n	1c6ca <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   1c70a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   1c70e:	462a      	mov	r2, r5
	return (u8_t *)p->buf + lsz * block;
   1c710:	fb03 fa05 	mul.w	sl, r3, r5
		int i, lsz = lsizes[level];
   1c714:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   1c716:	6833      	ldr	r3, [r6, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1c718:	4641      	mov	r1, r8
	return (u8_t *)p->buf + lsz * block;
   1c71a:	eb03 090a 	add.w	r9, r3, sl
   1c71e:	603b      	str	r3, [r7, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1c720:	4630      	mov	r0, r6
   1c722:	f107 030c 	add.w	r3, r7, #12
   1c726:	f7ff fe9f 	bl	1c468 <get_bit_ptr>
	*word &= ~(1<<bit);
   1c72a:	2301      	movs	r3, #1
   1c72c:	68fa      	ldr	r2, [r7, #12]
   1c72e:	fa03 f000 	lsl.w	r0, r3, r0
   1c732:	6813      	ldr	r3, [r2, #0]
	node->next = list;
   1c734:	6839      	ldr	r1, [r7, #0]
   1c736:	ea23 0300 	bic.w	r3, r3, r0
   1c73a:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   1c73c:	220c      	movs	r2, #12
   1c73e:	68f3      	ldr	r3, [r6, #12]
   1c740:	fb02 3308 	mla	r3, r2, r8, r3
   1c744:	1d1a      	adds	r2, r3, #4
   1c746:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
   1c74a:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
   1c74c:	4621      	mov	r1, r4
   1c74e:	f8c9 2004 	str.w	r2, [r9, #4]
	list->tail->next = node;
   1c752:	689a      	ldr	r2, [r3, #8]
   1c754:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
   1c758:	f8c3 9008 	str.w	r9, [r3, #8]
   1c75c:	7c30      	ldrb	r0, [r6, #16]
   1c75e:	f7ff fea3 	bl	1c4a8 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c762:	7c30      	ldrb	r0, [r6, #16]
   1c764:	f010 0001 	ands.w	r0, r0, #1
   1c768:	d001      	beq.n	1c76e <z_sys_mem_pool_block_free+0xc8>
   1c76a:	f7ff fe94 	bl	1c496 <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   1c76e:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1c770:	f1b8 0f00 	cmp.w	r8, #0
   1c774:	d0b9      	beq.n	1c6ea <z_sys_mem_pool_block_free+0x44>
	int bit = get_bit_ptr(p, level, bn, &word);
   1c776:	f107 030c 	add.w	r3, r7, #12
   1c77a:	462a      	mov	r2, r5
   1c77c:	4641      	mov	r1, r8
   1c77e:	4630      	mov	r0, r6
   1c780:	f7ff fe72 	bl	1c468 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   1c784:	68fb      	ldr	r3, [r7, #12]
   1c786:	2800      	cmp	r0, #0
   1c788:	bfb8      	it	lt
   1c78a:	3003      	addlt	r0, #3
   1c78c:	681b      	ldr	r3, [r3, #0]
   1c78e:	f020 0003 	bic.w	r0, r0, #3
   1c792:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1c796:	f010 000f 	ands.w	r0, r0, #15
   1c79a:	d1a6      	bne.n	1c6ea <z_sys_mem_pool_block_free+0x44>
	node->next = NULL;
   1c79c:	4684      	mov	ip, r0
			int b = (bn & ~3) + i;
   1c79e:	f025 0a03 	bic.w	sl, r5, #3
	return (u8_t *)p->buf + lsz * block;
   1c7a2:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
   1c7a4:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
   1c7a8:	4353      	muls	r3, r2
   1c7aa:	6832      	ldr	r2, [r6, #0]
		for (i = 0; i < 4; i++) {
   1c7ac:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
   1c7ae:	18d1      	adds	r1, r2, r3
	node->prev->next = node->next;
   1c7b0:	f8d1 9004 	ldr.w	r9, [r1, #4]
   1c7b4:	f852 e003 	ldr.w	lr, [r2, r3]
		for (i = 0; i < 4; i++) {
   1c7b8:	2804      	cmp	r0, #4
   1c7ba:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
   1c7be:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
   1c7c2:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
   1c7c6:	f8c1 c004 	str.w	ip, [r1, #4]
   1c7ca:	d1ea      	bne.n	1c7a2 <z_sys_mem_pool_block_free+0xfc>
		bn = bn / 4;
   1c7cc:	2d00      	cmp	r5, #0
   1c7ce:	bfb8      	it	lt
   1c7d0:	3503      	addlt	r5, #3
		level = level - 1;
   1c7d2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		bn = bn / 4;
   1c7d6:	10ad      	asrs	r5, r5, #2
   1c7d8:	e782      	b.n	1c6e0 <z_sys_mem_pool_block_free+0x3a>

0001c7da <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1c7da:	4604      	mov	r4, r0
   1c7dc:	b508      	push	{r3, lr}
   1c7de:	4608      	mov	r0, r1
   1c7e0:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1c7e2:	461a      	mov	r2, r3
   1c7e4:	47a0      	blx	r4
	return z_impl_k_current_get();
   1c7e6:	f7ff fa8b 	bl	1bd00 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1c7ea:	f7f3 fcdb 	bl	101a4 <z_impl_k_thread_abort>

0001c7ee <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1c7ee:	b510      	push	{r4, lr}
   1c7f0:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1c7f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c7f6:	4620      	mov	r0, r4
   1c7f8:	f002 f910 	bl	1ea1c <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1c7fc:	4603      	mov	r3, r0
   1c7fe:	2800      	cmp	r0, #0
   1c800:	d0f7      	beq.n	1c7f2 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   1c802:	6842      	ldr	r2, [r0, #4]
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c804:	3308      	adds	r3, #8
   1c806:	e8d3 1fef 	ldaex	r1, [r3]
   1c80a:	f021 0c01 	bic.w	ip, r1, #1
   1c80e:	e8c3 cfee 	stlex	lr, ip, [r3]
   1c812:	f1be 0f00 	cmp.w	lr, #0
   1c816:	d1f6      	bne.n	1c806 <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1c818:	07cb      	lsls	r3, r1, #31
   1c81a:	d500      	bpl.n	1c81e <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1c81c:	4790      	blx	r2
	z_impl_k_yield();
   1c81e:	f7ff f9fb 	bl	1bc18 <z_impl_k_yield>
   1c822:	e7e6      	b.n	1c7f2 <z_work_q_main+0x4>

0001c824 <arch_printk_char_out>:
}
   1c824:	2000      	movs	r0, #0
   1c826:	4770      	bx	lr

0001c828 <print_err>:
{
   1c828:	b570      	push	{r4, r5, r6, lr}
   1c82a:	460d      	mov	r5, r1
   1c82c:	4604      	mov	r4, r0
	out('E', ctx);
   1c82e:	2045      	movs	r0, #69	; 0x45
   1c830:	47a0      	blx	r4
	out('R', ctx);
   1c832:	4629      	mov	r1, r5
   1c834:	2052      	movs	r0, #82	; 0x52
   1c836:	47a0      	blx	r4
	out('R', ctx);
   1c838:	4629      	mov	r1, r5
   1c83a:	4623      	mov	r3, r4
}
   1c83c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   1c840:	2052      	movs	r0, #82	; 0x52
   1c842:	4718      	bx	r3

0001c844 <z_vprintk>:
{
   1c844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   1c848:	f04f 0800 	mov.w	r8, #0
{
   1c84c:	4606      	mov	r6, r0
   1c84e:	460f      	mov	r7, r1
	int min_width = -1;
   1c850:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   1c854:	46c1      	mov	r9, r8
{
   1c856:	b08b      	sub	sp, #44	; 0x2c
   1c858:	461c      	mov	r4, r3
	while (*fmt) {
   1c85a:	1e53      	subs	r3, r2, #1
   1c85c:	9302      	str	r3, [sp, #8]
			might_format = 0;
   1c85e:	2500      	movs	r5, #0
					break;
   1c860:	e005      	b.n	1c86e <z_vprintk+0x2a>
		if (!might_format) {
   1c862:	b96d      	cbnz	r5, 1c880 <z_vprintk+0x3c>
			if (*fmt != '%') {
   1c864:	2825      	cmp	r0, #37	; 0x25
   1c866:	f000 814f 	beq.w	1cb08 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   1c86a:	4639      	mov	r1, r7
   1c86c:	47b0      	blx	r6
	while (*fmt) {
   1c86e:	9b02      	ldr	r3, [sp, #8]
   1c870:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1c874:	9302      	str	r3, [sp, #8]
   1c876:	2800      	cmp	r0, #0
   1c878:	d1f3      	bne.n	1c862 <z_vprintk+0x1e>
}
   1c87a:	b00b      	add	sp, #44	; 0x2c
   1c87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   1c880:	2864      	cmp	r0, #100	; 0x64
   1c882:	d06e      	beq.n	1c962 <z_vprintk+0x11e>
   1c884:	d81a      	bhi.n	1c8bc <z_vprintk+0x78>
   1c886:	2839      	cmp	r0, #57	; 0x39
   1c888:	d80a      	bhi.n	1c8a0 <z_vprintk+0x5c>
   1c88a:	2831      	cmp	r0, #49	; 0x31
   1c88c:	d260      	bcs.n	1c950 <z_vprintk+0x10c>
   1c88e:	282d      	cmp	r0, #45	; 0x2d
   1c890:	f000 8140 	beq.w	1cb14 <z_vprintk+0x2d0>
   1c894:	2830      	cmp	r0, #48	; 0x30
   1c896:	d04c      	beq.n	1c932 <z_vprintk+0xee>
   1c898:	2825      	cmp	r0, #37	; 0x25
   1c89a:	d107      	bne.n	1c8ac <z_vprintk+0x68>
				out((int)'%', ctx);
   1c89c:	4639      	mov	r1, r7
   1c89e:	e00b      	b.n	1c8b8 <z_vprintk+0x74>
			switch (*fmt) {
   1c8a0:	2858      	cmp	r0, #88	; 0x58
   1c8a2:	f000 80bb 	beq.w	1ca1c <z_vprintk+0x1d8>
   1c8a6:	2863      	cmp	r0, #99	; 0x63
   1c8a8:	f000 812a 	beq.w	1cb00 <z_vprintk+0x2bc>
					out((int)'%', ctx);
   1c8ac:	4639      	mov	r1, r7
   1c8ae:	2025      	movs	r0, #37	; 0x25
   1c8b0:	47b0      	blx	r6
					out((int)*fmt, ctx);
   1c8b2:	4639      	mov	r1, r7
   1c8b4:	9b02      	ldr	r3, [sp, #8]
   1c8b6:	7818      	ldrb	r0, [r3, #0]
   1c8b8:	47b0      	blx	r6
   1c8ba:	e7d0      	b.n	1c85e <z_vprintk+0x1a>
			switch (*fmt) {
   1c8bc:	2870      	cmp	r0, #112	; 0x70
   1c8be:	f000 80a3 	beq.w	1ca08 <z_vprintk+0x1c4>
   1c8c2:	d811      	bhi.n	1c8e8 <z_vprintk+0xa4>
   1c8c4:	2869      	cmp	r0, #105	; 0x69
   1c8c6:	d04c      	beq.n	1c962 <z_vprintk+0x11e>
   1c8c8:	286c      	cmp	r0, #108	; 0x6c
   1c8ca:	d105      	bne.n	1c8d8 <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
   1c8cc:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1c8d0:	d12a      	bne.n	1c928 <z_vprintk+0xe4>
					length_mod = 'L';
   1c8d2:	f04f 084c 	mov.w	r8, #76	; 0x4c
   1c8d6:	e7ca      	b.n	1c86e <z_vprintk+0x2a>
			switch (*fmt) {
   1c8d8:	2868      	cmp	r0, #104	; 0x68
   1c8da:	d1e7      	bne.n	1c8ac <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   1c8dc:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   1c8e0:	d122      	bne.n	1c928 <z_vprintk+0xe4>
					length_mod = 'H';
   1c8e2:	f04f 0848 	mov.w	r8, #72	; 0x48
   1c8e6:	e7c2      	b.n	1c86e <z_vprintk+0x2a>
			switch (*fmt) {
   1c8e8:	2875      	cmp	r0, #117	; 0x75
   1c8ea:	d071      	beq.n	1c9d0 <z_vprintk+0x18c>
   1c8ec:	d818      	bhi.n	1c920 <z_vprintk+0xdc>
   1c8ee:	2873      	cmp	r0, #115	; 0x73
   1c8f0:	d1dc      	bne.n	1c8ac <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   1c8f2:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   1c8f6:	46ab      	mov	fp, r5
   1c8f8:	465b      	mov	r3, fp
   1c8fa:	f81b 0b01 	ldrb.w	r0, [fp], #1
   1c8fe:	2800      	cmp	r0, #0
   1c900:	f040 80fb 	bne.w	1cafa <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
   1c904:	f1b9 0f03 	cmp.w	r9, #3
   1c908:	f040 810a 	bne.w	1cb20 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   1c90c:	1b5d      	subs	r5, r3, r5
   1c90e:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   1c912:	2d00      	cmp	r5, #0
   1c914:	dda3      	ble.n	1c85e <z_vprintk+0x1a>
						out(' ', ctx);
   1c916:	4639      	mov	r1, r7
   1c918:	2020      	movs	r0, #32
   1c91a:	47b0      	blx	r6
   1c91c:	3d01      	subs	r5, #1
   1c91e:	e7f8      	b.n	1c912 <z_vprintk+0xce>
			switch (*fmt) {
   1c920:	2878      	cmp	r0, #120	; 0x78
   1c922:	d07b      	beq.n	1ca1c <z_vprintk+0x1d8>
   1c924:	287a      	cmp	r0, #122	; 0x7a
   1c926:	d1c1      	bne.n	1c8ac <z_vprintk+0x68>
				} else if (length_mod == 0) {
   1c928:	f1b8 0f00 	cmp.w	r8, #0
   1c92c:	d1be      	bne.n	1c8ac <z_vprintk+0x68>
   1c92e:	4680      	mov	r8, r0
   1c930:	e79d      	b.n	1c86e <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
   1c932:	f1ba 0f00 	cmp.w	sl, #0
   1c936:	da0e      	bge.n	1c956 <z_vprintk+0x112>
   1c938:	f1b9 0f00 	cmp.w	r9, #0
   1c93c:	f000 80ed 	beq.w	1cb1a <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   1c940:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   1c944:	f1b9 0f00 	cmp.w	r9, #0
   1c948:	bf08      	it	eq
   1c94a:	f04f 0902 	moveq.w	r9, #2
   1c94e:	e78e      	b.n	1c86e <z_vprintk+0x2a>
				if (min_width < 0) {
   1c950:	f1ba 0f00 	cmp.w	sl, #0
   1c954:	dbf4      	blt.n	1c940 <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
   1c956:	230a      	movs	r3, #10
   1c958:	fb03 0a0a 	mla	sl, r3, sl, r0
   1c95c:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   1c960:	e7f0      	b.n	1c944 <z_vprintk+0x100>
				if (length_mod == 'z') {
   1c962:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   1c966:	d102      	bne.n	1c96e <z_vprintk+0x12a>
					d = va_arg(ap, int);
   1c968:	f854 5b04 	ldr.w	r5, [r4], #4
   1c96c:	e01f      	b.n	1c9ae <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
   1c96e:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1c972:	d0f9      	beq.n	1c968 <z_vprintk+0x124>
				} else if (length_mod == 'L') {
   1c974:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1c978:	d1f6      	bne.n	1c968 <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
   1c97a:	3407      	adds	r4, #7
   1c97c:	f024 0407 	bic.w	r4, r4, #7
   1c980:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   1c984:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   1c988:	9106      	str	r1, [sp, #24]
   1c98a:	f143 0100 	adc.w	r1, r3, #0
   1c98e:	9107      	str	r1, [sp, #28]
   1c990:	2100      	movs	r1, #0
   1c992:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   1c996:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c99a:	4561      	cmp	r1, ip
   1c99c:	bf08      	it	eq
   1c99e:	4558      	cmpeq	r0, fp
   1c9a0:	d204      	bcs.n	1c9ac <z_vprintk+0x168>
						print_err(out, ctx);
   1c9a2:	4639      	mov	r1, r7
   1c9a4:	4630      	mov	r0, r6
   1c9a6:	f7ff ff3f 	bl	1c828 <print_err>
						break;
   1c9aa:	e758      	b.n	1c85e <z_vprintk+0x1a>
					d = lld;
   1c9ac:	4615      	mov	r5, r2
				if (d < 0) {
   1c9ae:	2d00      	cmp	r5, #0
   1c9b0:	da05      	bge.n	1c9be <z_vprintk+0x17a>
					out((int)'-', ctx);
   1c9b2:	4639      	mov	r1, r7
   1c9b4:	202d      	movs	r0, #45	; 0x2d
   1c9b6:	47b0      	blx	r6
					d = -d;
   1c9b8:	426d      	negs	r5, r5
					min_width--;
   1c9ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   1c9be:	464b      	mov	r3, r9
   1c9c0:	462a      	mov	r2, r5
   1c9c2:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   1c9c6:	4639      	mov	r1, r7
   1c9c8:	4630      	mov	r0, r6
   1c9ca:	f7f2 f89f 	bl	eb0c <_printk_dec_ulong>
				break;
   1c9ce:	e746      	b.n	1c85e <z_vprintk+0x1a>
				if (length_mod == 'z') {
   1c9d0:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   1c9d4:	d102      	bne.n	1c9dc <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
   1c9d6:	f854 2b04 	ldr.w	r2, [r4], #4
   1c9da:	e011      	b.n	1ca00 <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
   1c9dc:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1c9e0:	d0f9      	beq.n	1c9d6 <z_vprintk+0x192>
				} else if (length_mod == 'L') {
   1c9e2:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1c9e6:	d1f6      	bne.n	1c9d6 <z_vprintk+0x192>
					if (llu > ~0UL) {
   1c9e8:	2100      	movs	r1, #0
   1c9ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
   1c9ee:	3407      	adds	r4, #7
   1c9f0:	f024 0407 	bic.w	r4, r4, #7
   1c9f4:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   1c9f8:	4299      	cmp	r1, r3
   1c9fa:	bf08      	it	eq
   1c9fc:	4290      	cmpeq	r0, r2
   1c9fe:	d3d0      	bcc.n	1c9a2 <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
   1ca00:	f8cd a000 	str.w	sl, [sp]
   1ca04:	464b      	mov	r3, r9
   1ca06:	e7de      	b.n	1c9c6 <z_vprintk+0x182>
				out('0', ctx);
   1ca08:	4639      	mov	r1, r7
   1ca0a:	2030      	movs	r0, #48	; 0x30
   1ca0c:	47b0      	blx	r6
				out('x', ctx);
   1ca0e:	4639      	mov	r1, r7
   1ca10:	2078      	movs	r0, #120	; 0x78
   1ca12:	47b0      	blx	r6
					min_width = 8;
   1ca14:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   1ca18:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   1ca1c:	9b02      	ldr	r3, [sp, #8]
   1ca1e:	781b      	ldrb	r3, [r3, #0]
   1ca20:	2b70      	cmp	r3, #112	; 0x70
   1ca22:	d104      	bne.n	1ca2e <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
   1ca24:	f854 3b04 	ldr.w	r3, [r4], #4
   1ca28:	9304      	str	r3, [sp, #16]
   1ca2a:	2300      	movs	r3, #0
   1ca2c:	e00d      	b.n	1ca4a <z_vprintk+0x206>
				} else if (length_mod == 'l') {
   1ca2e:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1ca32:	d0f7      	beq.n	1ca24 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
   1ca34:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1ca38:	d1f4      	bne.n	1ca24 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
   1ca3a:	3407      	adds	r4, #7
   1ca3c:	f024 0307 	bic.w	r3, r4, #7
   1ca40:	461c      	mov	r4, r3
   1ca42:	f854 2b08 	ldr.w	r2, [r4], #8
   1ca46:	685b      	ldr	r3, [r3, #4]
   1ca48:	9204      	str	r2, [sp, #16]
	int digits = 0;
   1ca4a:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   1ca4c:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
   1ca4e:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
   1ca52:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   1ca54:	9105      	str	r1, [sp, #20]
		shift -= 4;
   1ca56:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   1ca5a:	9804      	ldr	r0, [sp, #16]
   1ca5c:	f1cb 0c20 	rsb	ip, fp, #32
   1ca60:	f1ab 0120 	sub.w	r1, fp, #32
   1ca64:	fa20 f00b 	lsr.w	r0, r0, fp
   1ca68:	fa03 fc0c 	lsl.w	ip, r3, ip
   1ca6c:	ea40 000c 	orr.w	r0, r0, ip
   1ca70:	fa23 f101 	lsr.w	r1, r3, r1
   1ca74:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   1ca76:	f010 000f 	ands.w	r0, r0, #15
   1ca7a:	d106      	bne.n	1ca8a <z_vprintk+0x246>
   1ca7c:	9905      	ldr	r1, [sp, #20]
   1ca7e:	b911      	cbnz	r1, 1ca86 <z_vprintk+0x242>
   1ca80:	f1bb 0f00 	cmp.w	fp, #0
   1ca84:	d122      	bne.n	1cacc <z_vprintk+0x288>
			nibble += nibble > 9 ? 87 : 48;
   1ca86:	2130      	movs	r1, #48	; 0x30
   1ca88:	e003      	b.n	1ca92 <z_vprintk+0x24e>
   1ca8a:	2809      	cmp	r0, #9
   1ca8c:	bf8c      	ite	hi
   1ca8e:	2157      	movhi	r1, #87	; 0x57
   1ca90:	2130      	movls	r1, #48	; 0x30
   1ca92:	4408      	add	r0, r1
			out((int)nibble, ctx);
   1ca94:	b240      	sxtb	r0, r0
   1ca96:	4639      	mov	r1, r7
   1ca98:	9308      	str	r3, [sp, #32]
   1ca9a:	9205      	str	r2, [sp, #20]
   1ca9c:	47b0      	blx	r6
			digits++;
   1ca9e:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   1caa0:	9a05      	ldr	r2, [sp, #20]
			digits++;
   1caa2:	3301      	adds	r3, #1
   1caa4:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   1caa6:	9b08      	ldr	r3, [sp, #32]
   1caa8:	f1bb 0f00 	cmp.w	fp, #0
   1caac:	d123      	bne.n	1caf6 <z_vprintk+0x2b2>
	if (padding == PAD_SPACE_AFTER) {
   1caae:	f1b9 0f03 	cmp.w	r9, #3
   1cab2:	f47f aed4 	bne.w	1c85e <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
   1cab6:	9b03      	ldr	r3, [sp, #12]
   1cab8:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   1cabc:	2d00      	cmp	r5, #0
   1cabe:	f77f aece 	ble.w	1c85e <z_vprintk+0x1a>
			out(' ', ctx);
   1cac2:	4639      	mov	r1, r7
   1cac4:	2020      	movs	r0, #32
   1cac6:	47b0      	blx	r6
   1cac8:	3d01      	subs	r5, #1
   1caca:	e7f7      	b.n	1cabc <z_vprintk+0x278>
		if (remaining-- <= min_width) {
   1cacc:	1e51      	subs	r1, r2, #1
   1cace:	4592      	cmp	sl, r2
   1cad0:	9108      	str	r1, [sp, #32]
   1cad2:	db07      	blt.n	1cae4 <z_vprintk+0x2a0>
			if (padding == PAD_ZERO_BEFORE) {
   1cad4:	f1b9 0f01 	cmp.w	r9, #1
   1cad8:	d106      	bne.n	1cae8 <z_vprintk+0x2a4>
				out('0', ctx);
   1cada:	4639      	mov	r1, r7
   1cadc:	2030      	movs	r0, #48	; 0x30
   1cade:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   1cae0:	47b0      	blx	r6
   1cae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
   1cae4:	9a08      	ldr	r2, [sp, #32]
   1cae6:	e7b6      	b.n	1ca56 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
   1cae8:	f1b9 0f02 	cmp.w	r9, #2
   1caec:	d1fa      	bne.n	1cae4 <z_vprintk+0x2a0>
   1caee:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   1caf0:	4639      	mov	r1, r7
   1caf2:	2020      	movs	r0, #32
   1caf4:	e7f4      	b.n	1cae0 <z_vprintk+0x29c>
			found_largest_digit = 1;
   1caf6:	9505      	str	r5, [sp, #20]
   1caf8:	e7ad      	b.n	1ca56 <z_vprintk+0x212>
					out((int)(*s++), ctx);
   1cafa:	4639      	mov	r1, r7
   1cafc:	47b0      	blx	r6
   1cafe:	e6fb      	b.n	1c8f8 <z_vprintk+0xb4>
				out(c, ctx);
   1cb00:	4639      	mov	r1, r7
   1cb02:	f854 0b04 	ldr.w	r0, [r4], #4
   1cb06:	e6d7      	b.n	1c8b8 <z_vprintk+0x74>
				length_mod = 0;
   1cb08:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   1cb0a:	46a9      	mov	r9, r5
				min_width = -1;
   1cb0c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
   1cb10:	2501      	movs	r5, #1
   1cb12:	e6ac      	b.n	1c86e <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
   1cb14:	f04f 0903 	mov.w	r9, #3
   1cb18:	e6a9      	b.n	1c86e <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
   1cb1a:	f04f 0901 	mov.w	r9, #1
   1cb1e:	e6a6      	b.n	1c86e <z_vprintk+0x2a>
			might_format = 0;
   1cb20:	4605      	mov	r5, r0
		++fmt;
   1cb22:	e6a4      	b.n	1c86e <z_vprintk+0x2a>

0001cb24 <printk>:
{
   1cb24:	b40f      	push	{r0, r1, r2, r3}
   1cb26:	b507      	push	{r0, r1, r2, lr}
   1cb28:	a904      	add	r1, sp, #16
   1cb2a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1cb2e:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1cb30:	f7f2 f83e 	bl	ebb0 <vprintk>
}
   1cb34:	b003      	add	sp, #12
   1cb36:	f85d eb04 	ldr.w	lr, [sp], #4
   1cb3a:	b004      	add	sp, #16
   1cb3c:	4770      	bx	lr

0001cb3e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_SLM_CR_LF_TERMINATION, 1);
GEN_ABSOLUTE_SYM(CONFIG_SLM_AT_HOST_TERMINATION, 3);
GEN_ABSOLUTE_SYM(CONFIG_SLM_LOG_LEVEL_INF, 1);
GEN_ABSOLUTE_SYM(CONFIG_SLM_LOG_LEVEL, 3);

GEN_ABS_SYM_END
   1cb3e:	4770      	bx	lr

0001cb40 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   1cb40:	f7fe b90c 	b.w	1ad5c <SystemInit>

0001cb44 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1cb44:	2300      	movs	r3, #0
	list->head = NULL;
   1cb46:	e9c0 3300 	strd	r3, r3, [r0]
}
   1cb4a:	4770      	bx	lr

0001cb4c <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1cb4c:	6803      	ldr	r3, [r0, #0]
   1cb4e:	b923      	cbnz	r3, 1cb5a <log_list_add_tail+0xe>
		list->head = msg;
   1cb50:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1cb52:	2300      	movs	r3, #0
	list->tail = msg;
   1cb54:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1cb56:	600b      	str	r3, [r1, #0]
}
   1cb58:	4770      	bx	lr
		list->tail->next = msg;
   1cb5a:	6843      	ldr	r3, [r0, #4]
   1cb5c:	6019      	str	r1, [r3, #0]
   1cb5e:	e7f8      	b.n	1cb52 <log_list_add_tail+0x6>

0001cb60 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1cb60:	6800      	ldr	r0, [r0, #0]
   1cb62:	4770      	bx	lr

0001cb64 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   1cb64:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   1cb66:	b10b      	cbz	r3, 1cb6c <log_list_head_get+0x8>
		list->head = list->head->next;
   1cb68:	681a      	ldr	r2, [r3, #0]
   1cb6a:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   1cb6c:	4618      	mov	r0, r3
   1cb6e:	4770      	bx	lr

0001cb70 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1cb70:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1cb72:	f7f2 fa73 	bl	f05c <log_msg_chunk_alloc>

	if (msg != NULL) {
   1cb76:	b118      	cbz	r0, 1cb80 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1cb78:	2301      	movs	r3, #1
   1cb7a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1cb7c:	2300      	movs	r3, #0
   1cb7e:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   1cb80:	bd08      	pop	{r3, pc}

0001cb82 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   1cb82:	f7f2 bdff 	b.w	f784 <z_timer_cycle_get_32>

0001cb86 <dummy_timestamp>:
   1cb86:	2000      	movs	r0, #0
   1cb88:	4770      	bx	lr

0001cb8a <log_0>:
{
   1cb8a:	b538      	push	{r3, r4, r5, lr}
   1cb8c:	4605      	mov	r5, r0
   1cb8e:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1cb90:	f7ff ffee 	bl	1cb70 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1cb94:	b128      	cbz	r0, 1cba2 <log_0+0x18>
		msg->str = str;
   1cb96:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1cb98:	4621      	mov	r1, r4
}
   1cb9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1cb9e:	f7f2 b8ed 	b.w	ed7c <msg_finalize>
}
   1cba2:	bd38      	pop	{r3, r4, r5, pc}

0001cba4 <log_1>:
{
   1cba4:	b570      	push	{r4, r5, r6, lr}
   1cba6:	4604      	mov	r4, r0
   1cba8:	460e      	mov	r6, r1
   1cbaa:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1cbac:	f7ff ffe0 	bl	1cb70 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1cbb0:	b158      	cbz	r0, 1cbca <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1cbb2:	2201      	movs	r2, #1
		msg->str = str;
   1cbb4:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1cbb6:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1cbb8:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   1cbba:	f362 1407 	bfi	r4, r2, #4, #4
   1cbbe:	7244      	strb	r4, [r0, #9]
		msg_finalize(msg, src_level);
   1cbc0:	4629      	mov	r1, r5
}
   1cbc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1cbc6:	f7f2 b8d9 	b.w	ed7c <msg_finalize>
}
   1cbca:	bd70      	pop	{r4, r5, r6, pc}

0001cbcc <log_2>:
{
   1cbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cbd0:	4605      	mov	r5, r0
   1cbd2:	4688      	mov	r8, r1
   1cbd4:	4617      	mov	r7, r2
   1cbd6:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1cbd8:	f7ff ffca 	bl	1cb70 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1cbdc:	b160      	cbz	r0, 1cbf8 <log_2+0x2c>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1cbde:	2302      	movs	r3, #2
		msg->str = str;
   1cbe0:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1cbe2:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1cbe4:	e9c0 8705 	strd	r8, r7, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   1cbe8:	f363 1507 	bfi	r5, r3, #4, #4
   1cbec:	7245      	strb	r5, [r0, #9]
		msg_finalize(msg, src_level);
   1cbee:	4631      	mov	r1, r6
}
   1cbf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1cbf4:	f7f2 b8c2 	b.w	ed7c <msg_finalize>
}
   1cbf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cbfc <log_3>:
{
   1cbfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cc00:	4605      	mov	r5, r0
   1cc02:	4689      	mov	r9, r1
   1cc04:	4690      	mov	r8, r2
   1cc06:	461f      	mov	r7, r3
   1cc08:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1cc0c:	f7ff ffb0 	bl	1cb70 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1cc10:	b168      	cbz	r0, 1cc2e <log_3+0x32>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1cc12:	2303      	movs	r3, #3
		msg->str = str;
   1cc14:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1cc16:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1cc18:	e9c0 9805 	strd	r9, r8, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   1cc1c:	f363 1507 	bfi	r5, r3, #4, #4
   1cc20:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[2] = arg3;
   1cc22:	61c7      	str	r7, [r0, #28]
		msg_finalize(msg, src_level);
   1cc24:	4631      	mov	r1, r6
}
   1cc26:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1cc2a:	f7f2 b8a7 	b.w	ed7c <msg_finalize>
}
   1cc2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001cc32 <log_n>:
{
   1cc32:	b510      	push	{r4, lr}
   1cc34:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1cc36:	f000 f893 	bl	1cd60 <log_msg_create_n>
		if (msg == NULL) {
   1cc3a:	b120      	cbz	r0, 1cc46 <log_n+0x14>
		msg_finalize(msg, src_level);
   1cc3c:	4621      	mov	r1, r4
}
   1cc3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1cc42:	f7f2 b89b 	b.w	ed7c <msg_finalize>
}
   1cc46:	bd10      	pop	{r4, pc}

0001cc48 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1cc48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cc4c:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
   1cc4e:	8903      	ldrh	r3, [r0, #8]
{
   1cc50:	460e      	mov	r6, r1
	u32_t available_len = msg->hdr.params.hexdump.length;
   1cc52:	089b      	lsrs	r3, r3, #2
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
   1cc54:	42a3      	cmp	r3, r4
{
   1cc56:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   1cc5a:	d803      	bhi.n	1cc64 <log_msg_hexdump_data_op+0x1c>
		*length = 0;
   1cc5c:	2300      	movs	r3, #0
   1cc5e:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1cc60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1cc64:	6811      	ldr	r1, [r2, #0]
   1cc66:	4421      	add	r1, r4
   1cc68:	4299      	cmp	r1, r3
		*length = available_len - offset;
   1cc6a:	bf84      	itt	hi
   1cc6c:	1b19      	subhi	r1, r3, r4
   1cc6e:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1cc70:	2b0c      	cmp	r3, #12
	req_len = *length;
   1cc72:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1cc76:	d928      	bls.n	1ccca <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
   1cc78:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1cc7a:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   1cc7e:	d82b      	bhi.n	1ccd8 <log_msg_hexdump_data_op+0x90>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1cc80:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   1cc82:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1cc84:	454b      	cmp	r3, r9
   1cc86:	bf28      	it	cs
   1cc88:	464b      	movcs	r3, r9
   1cc8a:	4420      	add	r0, r4
   1cc8c:	461d      	mov	r5, r3
			(void)memcpy(&head_data[offset], data, cpy_len);
   1cc8e:	461a      	mov	r2, r3
		if (put_op) {
   1cc90:	b1ff      	cbz	r7, 1ccd2 <log_msg_hexdump_data_op+0x8a>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1cc92:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   1cc94:	f000 fcef 	bl	1d676 <memcpy>
		req_len -= cpy_len;
   1cc98:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1cc9c:	442e      	add	r6, r5
	while (req_len > 0) {
   1cc9e:	f1b9 0f00 	cmp.w	r9, #0
   1cca2:	d0dd      	beq.n	1cc60 <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1cca4:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1cca8:	454d      	cmp	r5, r9
   1ccaa:	bf28      	it	cs
   1ccac:	464d      	movcs	r5, r9
		if (put_op) {
   1ccae:	1d20      	adds	r0, r4, #4
   1ccb0:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
   1ccb2:	462a      	mov	r2, r5
		if (put_op) {
   1ccb4:	b1bf      	cbz	r7, 1cce6 <log_msg_hexdump_data_op+0x9e>
			(void)memcpy(&cont->payload.bytes[offset],
   1ccb6:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   1ccb8:	f000 fcdd 	bl	1d676 <memcpy>
		req_len -= cpy_len;
   1ccbc:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1ccc0:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   1ccc4:	442e      	add	r6, r5
		offset = 0;
   1ccc6:	2400      	movs	r4, #0
   1ccc8:	e7e9      	b.n	1cc9e <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
   1ccca:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1cccc:	f04f 0800 	mov.w	r8, #0
   1ccd0:	e7d8      	b.n	1cc84 <log_msg_hexdump_data_op+0x3c>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1ccd2:	4601      	mov	r1, r0
   1ccd4:	4630      	mov	r0, r6
   1ccd6:	e7dd      	b.n	1cc94 <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
   1ccd8:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1ccda:	2c1b      	cmp	r4, #27
   1ccdc:	d9df      	bls.n	1cc9e <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
   1ccde:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   1cce2:	3c1c      	subs	r4, #28
   1cce4:	e7f9      	b.n	1ccda <log_msg_hexdump_data_op+0x92>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1cce6:	4601      	mov	r1, r0
   1cce8:	4630      	mov	r0, r6
   1ccea:	e7e5      	b.n	1ccb8 <log_msg_hexdump_data_op+0x70>

0001ccec <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1ccec:	3004      	adds	r0, #4
   1ccee:	e8d0 3fef 	ldaex	r3, [r0]
   1ccf2:	3301      	adds	r3, #1
   1ccf4:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1ccf8:	2a00      	cmp	r2, #0
   1ccfa:	d1f8      	bne.n	1ccee <log_msg_get+0x2>
}
   1ccfc:	4770      	bx	lr

0001ccfe <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1ccfe:	7a40      	ldrb	r0, [r0, #9]
}
   1cd00:	0900      	lsrs	r0, r0, #4
   1cd02:	4770      	bx	lr

0001cd04 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1cd04:	7a43      	ldrb	r3, [r0, #9]
   1cd06:	091b      	lsrs	r3, r3, #4
   1cd08:	428b      	cmp	r3, r1
   1cd0a:	d916      	bls.n	1cd3a <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1cd0c:	2b03      	cmp	r3, #3
   1cd0e:	d803      	bhi.n	1cd18 <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
   1cd10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1cd14:	6948      	ldr	r0, [r1, #20]
   1cd16:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1cd18:	2901      	cmp	r1, #1
   1cd1a:	d803      	bhi.n	1cd24 <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
   1cd1c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1cd20:	6988      	ldr	r0, [r1, #24]
   1cd22:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1cd24:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1cd26:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1cd28:	2906      	cmp	r1, #6
   1cd2a:	d803      	bhi.n	1cd34 <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
   1cd2c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1cd30:	6848      	ldr	r0, [r1, #4]
   1cd32:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
   1cd34:	3907      	subs	r1, #7
		cont = cont->next;
   1cd36:	681b      	ldr	r3, [r3, #0]
   1cd38:	e7f6      	b.n	1cd28 <log_msg_arg_get+0x24>
		return 0;
   1cd3a:	2000      	movs	r0, #0
}
   1cd3c:	4770      	bx	lr

0001cd3e <log_msg_put>:
{
   1cd3e:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1cd40:	1d02      	adds	r2, r0, #4
   1cd42:	e8d2 1fef 	ldaex	r1, [r2]
   1cd46:	3901      	subs	r1, #1
   1cd48:	e8c2 1fec 	stlex	ip, r1, [r2]
   1cd4c:	f1bc 0f00 	cmp.w	ip, #0
   1cd50:	d1f7      	bne.n	1cd42 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   1cd52:	685b      	ldr	r3, [r3, #4]
   1cd54:	b90b      	cbnz	r3, 1cd5a <log_msg_put+0x1c>
		msg_free(msg);
   1cd56:	f7f2 b993 	b.w	f080 <msg_free>
}
   1cd5a:	4770      	bx	lr

0001cd5c <log_msg_str_get>:
}
   1cd5c:	6900      	ldr	r0, [r0, #16]
   1cd5e:	4770      	bx	lr

0001cd60 <log_msg_create_n>:
{
   1cd60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd64:	4682      	mov	sl, r0
   1cd66:	4688      	mov	r8, r1
   1cd68:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1cd6a:	f7f2 f977 	bl	f05c <log_msg_chunk_alloc>
	if (msg != NULL) {
   1cd6e:	4604      	mov	r4, r0
   1cd70:	b330      	cbz	r0, 1cdc0 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1cd72:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1cd74:	2600      	movs	r6, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1cd76:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1cd78:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1cd7a:	8106      	strh	r6, [r0, #8]
   1cd7c:	d909      	bls.n	1cd92 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1cd7e:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1cd80:	f1a5 0902 	sub.w	r9, r5, #2
	msg->hdr.params.generic.ext = 1;
   1cd84:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   1cd86:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1cd8a:	6146      	str	r6, [r0, #20]
	while (n > 0) {
   1cd8c:	f1b9 0f00 	cmp.w	r9, #0
   1cd90:	dc0e      	bgt.n	1cdb0 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   1cd92:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1cd94:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1cd96:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   1cd9a:	f8c4 a010 	str.w	sl, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1cd9e:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1cda0:	d818      	bhi.n	1cdd4 <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1cda2:	00aa      	lsls	r2, r5, #2
   1cda4:	4641      	mov	r1, r8
   1cda6:	f104 0014 	add.w	r0, r4, #20
   1cdaa:	f000 fc64 	bl	1d676 <memcpy>
		nargs  = 0U;
   1cdae:	e007      	b.n	1cdc0 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1cdb0:	f7f2 f954 	bl	f05c <log_msg_chunk_alloc>
		if (cont == NULL) {
   1cdb4:	4607      	mov	r7, r0
   1cdb6:	b930      	cbnz	r0, 1cdc6 <log_msg_create_n+0x66>
			msg_free(msg);
   1cdb8:	4620      	mov	r0, r4
   1cdba:	f7f2 f961 	bl	f080 <msg_free>
			return NULL;
   1cdbe:	463c      	mov	r4, r7
}
   1cdc0:	4620      	mov	r0, r4
   1cdc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1cdc6:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1cdca:	f1a9 0907 	sub.w	r9, r9, #7
   1cdce:	6006      	str	r6, [r0, #0]
		next = &cont->next;
   1cdd0:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1cdd2:	e7db      	b.n	1cd8c <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1cdd4:	4641      	mov	r1, r8
   1cdd6:	2208      	movs	r2, #8
   1cdd8:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1cddc:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1cdde:	f000 fc4a 	bl	1d676 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1cde2:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1cde4:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1cde8:	2d07      	cmp	r5, #7
   1cdea:	462e      	mov	r6, r5
   1cdec:	bf28      	it	cs
   1cdee:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1cdf0:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1cdf4:	4641      	mov	r1, r8
   1cdf6:	1d38      	adds	r0, r7, #4
   1cdf8:	464a      	mov	r2, r9
   1cdfa:	f000 fc3c 	bl	1d676 <memcpy>
	while (nargs != 0U) {
   1cdfe:	1bad      	subs	r5, r5, r6
		args += cpy_args;
   1ce00:	44c8      	add	r8, r9
		cont = cont->next;
   1ce02:	683f      	ldr	r7, [r7, #0]
	while (nargs != 0U) {
   1ce04:	d1f0      	bne.n	1cde8 <log_msg_create_n+0x88>
   1ce06:	e7db      	b.n	1cdc0 <log_msg_create_n+0x60>

0001ce08 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
   1ce08:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1ce0a:	2400      	movs	r4, #0
   1ce0c:	9400      	str	r4, [sp, #0]
   1ce0e:	f7ff ff1b 	bl	1cc48 <log_msg_hexdump_data_op>
}
   1ce12:	b002      	add	sp, #8
   1ce14:	bd10      	pop	{r4, pc}

0001ce16 <buffer_write>:
{
   1ce16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ce18:	4606      	mov	r6, r0
   1ce1a:	460d      	mov	r5, r1
   1ce1c:	4614      	mov	r4, r2
   1ce1e:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1ce20:	4621      	mov	r1, r4
   1ce22:	4628      	mov	r0, r5
   1ce24:	463a      	mov	r2, r7
   1ce26:	47b0      	blx	r6
	} while (len != 0);
   1ce28:	1a24      	subs	r4, r4, r0
		buf += processed;
   1ce2a:	4405      	add	r5, r0
	} while (len != 0);
   1ce2c:	d1f8      	bne.n	1ce20 <buffer_write+0xa>
}
   1ce2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ce30 <std_print>:
{
   1ce30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ce34:	b08e      	sub	sp, #56	; 0x38
   1ce36:	af0e      	add	r7, sp, #56	; 0x38
   1ce38:	4681      	mov	r9, r0
   1ce3a:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1ce3c:	f7ff ff8e 	bl	1cd5c <log_msg_str_get>
   1ce40:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
   1ce42:	4648      	mov	r0, r9
   1ce44:	f7ff ff5b 	bl	1ccfe <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   1ce48:	f04f 0800 	mov.w	r8, #0
	u32_t nargs = log_msg_nargs_get(msg);
   1ce4c:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   1ce4e:	0083      	lsls	r3, r0, #2
   1ce50:	3307      	adds	r3, #7
   1ce52:	f023 0307 	bic.w	r3, r3, #7
   1ce56:	ebad 0d03 	sub.w	sp, sp, r3
   1ce5a:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1ce5c:	45d0      	cmp	r8, sl
   1ce5e:	d116      	bne.n	1ce8e <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1ce60:	4648      	mov	r0, r9
   1ce62:	f7ff ff4c 	bl	1ccfe <log_msg_nargs_get>
   1ce66:	280f      	cmp	r0, #15
   1ce68:	d81e      	bhi.n	1cea8 <std_print+0x78>
   1ce6a:	e8df f010 	tbh	[pc, r0, lsl #1]
   1ce6e:	0019      	.short	0x0019
   1ce70:	00260020 	.word	0x00260020
   1ce74:	0036002d 	.word	0x0036002d
   1ce78:	004e0041 	.word	0x004e0041
   1ce7c:	006e005d 	.word	0x006e005d
   1ce80:	00960081 	.word	0x00960081
   1ce84:	00c600ad 	.word	0x00c600ad
   1ce88:	00fe00e1 	.word	0x00fe00e1
   1ce8c:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   1ce8e:	4641      	mov	r1, r8
   1ce90:	4648      	mov	r0, r9
   1ce92:	f7ff ff37 	bl	1cd04 <log_msg_arg_get>
   1ce96:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	for (i = 0; i < nargs; i++) {
   1ce9a:	f108 0801 	add.w	r8, r8, #1
   1ce9e:	e7dd      	b.n	1ce5c <std_print+0x2c>
		print_formatted(log_output, str);
   1cea0:	4631      	mov	r1, r6
   1cea2:	4628      	mov	r0, r5
   1cea4:	f7f2 f91e 	bl	f0e4 <print_formatted>
}
   1cea8:	46bd      	mov	sp, r7
   1ceaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   1ceae:	6822      	ldr	r2, [r4, #0]
   1ceb0:	4631      	mov	r1, r6
   1ceb2:	4628      	mov	r0, r5
   1ceb4:	f7f2 f916 	bl	f0e4 <print_formatted>
		break;
   1ceb8:	e7f6      	b.n	1cea8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   1ceba:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cebe:	4631      	mov	r1, r6
   1cec0:	4628      	mov	r0, r5
   1cec2:	f7f2 f90f 	bl	f0e4 <print_formatted>
		break;
   1cec6:	e7ef      	b.n	1cea8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   1cec8:	68a3      	ldr	r3, [r4, #8]
   1ceca:	4631      	mov	r1, r6
   1cecc:	9300      	str	r3, [sp, #0]
   1cece:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ced2:	4628      	mov	r0, r5
   1ced4:	f7f2 f906 	bl	f0e4 <print_formatted>
		break;
   1ced8:	e7e6      	b.n	1cea8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1ceda:	68e3      	ldr	r3, [r4, #12]
   1cedc:	4631      	mov	r1, r6
   1cede:	9301      	str	r3, [sp, #4]
   1cee0:	68a3      	ldr	r3, [r4, #8]
   1cee2:	4628      	mov	r0, r5
   1cee4:	9300      	str	r3, [sp, #0]
   1cee6:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ceea:	f7f2 f8fb 	bl	f0e4 <print_formatted>
		break;
   1ceee:	e7db      	b.n	1cea8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cef0:	6923      	ldr	r3, [r4, #16]
   1cef2:	4631      	mov	r1, r6
   1cef4:	9302      	str	r3, [sp, #8]
   1cef6:	68e3      	ldr	r3, [r4, #12]
   1cef8:	4628      	mov	r0, r5
   1cefa:	9301      	str	r3, [sp, #4]
   1cefc:	68a3      	ldr	r3, [r4, #8]
   1cefe:	9300      	str	r3, [sp, #0]
   1cf00:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cf04:	f7f2 f8ee 	bl	f0e4 <print_formatted>
		break;
   1cf08:	e7ce      	b.n	1cea8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cf0a:	6963      	ldr	r3, [r4, #20]
   1cf0c:	4631      	mov	r1, r6
   1cf0e:	9303      	str	r3, [sp, #12]
   1cf10:	6923      	ldr	r3, [r4, #16]
   1cf12:	4628      	mov	r0, r5
   1cf14:	9302      	str	r3, [sp, #8]
   1cf16:	68e3      	ldr	r3, [r4, #12]
   1cf18:	9301      	str	r3, [sp, #4]
   1cf1a:	68a3      	ldr	r3, [r4, #8]
   1cf1c:	9300      	str	r3, [sp, #0]
   1cf1e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cf22:	f7f2 f8df 	bl	f0e4 <print_formatted>
		break;
   1cf26:	e7bf      	b.n	1cea8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cf28:	69a3      	ldr	r3, [r4, #24]
   1cf2a:	4631      	mov	r1, r6
   1cf2c:	9304      	str	r3, [sp, #16]
   1cf2e:	6963      	ldr	r3, [r4, #20]
   1cf30:	4628      	mov	r0, r5
   1cf32:	9303      	str	r3, [sp, #12]
   1cf34:	6923      	ldr	r3, [r4, #16]
   1cf36:	9302      	str	r3, [sp, #8]
   1cf38:	68e3      	ldr	r3, [r4, #12]
   1cf3a:	9301      	str	r3, [sp, #4]
   1cf3c:	68a3      	ldr	r3, [r4, #8]
   1cf3e:	9300      	str	r3, [sp, #0]
   1cf40:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cf44:	f7f2 f8ce 	bl	f0e4 <print_formatted>
		break;
   1cf48:	e7ae      	b.n	1cea8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cf4a:	69e3      	ldr	r3, [r4, #28]
   1cf4c:	4631      	mov	r1, r6
   1cf4e:	9305      	str	r3, [sp, #20]
   1cf50:	69a3      	ldr	r3, [r4, #24]
   1cf52:	4628      	mov	r0, r5
   1cf54:	9304      	str	r3, [sp, #16]
   1cf56:	6963      	ldr	r3, [r4, #20]
   1cf58:	9303      	str	r3, [sp, #12]
   1cf5a:	6923      	ldr	r3, [r4, #16]
   1cf5c:	9302      	str	r3, [sp, #8]
   1cf5e:	68e3      	ldr	r3, [r4, #12]
   1cf60:	9301      	str	r3, [sp, #4]
   1cf62:	68a3      	ldr	r3, [r4, #8]
   1cf64:	9300      	str	r3, [sp, #0]
   1cf66:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cf6a:	f7f2 f8bb 	bl	f0e4 <print_formatted>
		break;
   1cf6e:	e79b      	b.n	1cea8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cf70:	6a23      	ldr	r3, [r4, #32]
   1cf72:	4631      	mov	r1, r6
   1cf74:	9306      	str	r3, [sp, #24]
   1cf76:	69e3      	ldr	r3, [r4, #28]
   1cf78:	4628      	mov	r0, r5
   1cf7a:	9305      	str	r3, [sp, #20]
   1cf7c:	69a3      	ldr	r3, [r4, #24]
   1cf7e:	9304      	str	r3, [sp, #16]
   1cf80:	6963      	ldr	r3, [r4, #20]
   1cf82:	9303      	str	r3, [sp, #12]
   1cf84:	6923      	ldr	r3, [r4, #16]
   1cf86:	9302      	str	r3, [sp, #8]
   1cf88:	68e3      	ldr	r3, [r4, #12]
   1cf8a:	9301      	str	r3, [sp, #4]
   1cf8c:	68a3      	ldr	r3, [r4, #8]
   1cf8e:	9300      	str	r3, [sp, #0]
   1cf90:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cf94:	f7f2 f8a6 	bl	f0e4 <print_formatted>
		break;
   1cf98:	e786      	b.n	1cea8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cf9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cf9c:	4631      	mov	r1, r6
   1cf9e:	9307      	str	r3, [sp, #28]
   1cfa0:	6a23      	ldr	r3, [r4, #32]
   1cfa2:	4628      	mov	r0, r5
   1cfa4:	9306      	str	r3, [sp, #24]
   1cfa6:	69e3      	ldr	r3, [r4, #28]
   1cfa8:	9305      	str	r3, [sp, #20]
   1cfaa:	69a3      	ldr	r3, [r4, #24]
   1cfac:	9304      	str	r3, [sp, #16]
   1cfae:	6963      	ldr	r3, [r4, #20]
   1cfb0:	9303      	str	r3, [sp, #12]
   1cfb2:	6923      	ldr	r3, [r4, #16]
   1cfb4:	9302      	str	r3, [sp, #8]
   1cfb6:	68e3      	ldr	r3, [r4, #12]
   1cfb8:	9301      	str	r3, [sp, #4]
   1cfba:	68a3      	ldr	r3, [r4, #8]
   1cfbc:	9300      	str	r3, [sp, #0]
   1cfbe:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cfc2:	f7f2 f88f 	bl	f0e4 <print_formatted>
		break;
   1cfc6:	e76f      	b.n	1cea8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cfc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cfca:	4631      	mov	r1, r6
   1cfcc:	9308      	str	r3, [sp, #32]
   1cfce:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cfd0:	4628      	mov	r0, r5
   1cfd2:	9307      	str	r3, [sp, #28]
   1cfd4:	6a23      	ldr	r3, [r4, #32]
   1cfd6:	9306      	str	r3, [sp, #24]
   1cfd8:	69e3      	ldr	r3, [r4, #28]
   1cfda:	9305      	str	r3, [sp, #20]
   1cfdc:	69a3      	ldr	r3, [r4, #24]
   1cfde:	9304      	str	r3, [sp, #16]
   1cfe0:	6963      	ldr	r3, [r4, #20]
   1cfe2:	9303      	str	r3, [sp, #12]
   1cfe4:	6923      	ldr	r3, [r4, #16]
   1cfe6:	9302      	str	r3, [sp, #8]
   1cfe8:	68e3      	ldr	r3, [r4, #12]
   1cfea:	9301      	str	r3, [sp, #4]
   1cfec:	68a3      	ldr	r3, [r4, #8]
   1cfee:	9300      	str	r3, [sp, #0]
   1cff0:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cff4:	f7f2 f876 	bl	f0e4 <print_formatted>
		break;
   1cff8:	e756      	b.n	1cea8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cffa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1cffc:	4631      	mov	r1, r6
   1cffe:	9309      	str	r3, [sp, #36]	; 0x24
   1d000:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d002:	4628      	mov	r0, r5
   1d004:	9308      	str	r3, [sp, #32]
   1d006:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d008:	9307      	str	r3, [sp, #28]
   1d00a:	6a23      	ldr	r3, [r4, #32]
   1d00c:	9306      	str	r3, [sp, #24]
   1d00e:	69e3      	ldr	r3, [r4, #28]
   1d010:	9305      	str	r3, [sp, #20]
   1d012:	69a3      	ldr	r3, [r4, #24]
   1d014:	9304      	str	r3, [sp, #16]
   1d016:	6963      	ldr	r3, [r4, #20]
   1d018:	9303      	str	r3, [sp, #12]
   1d01a:	6923      	ldr	r3, [r4, #16]
   1d01c:	9302      	str	r3, [sp, #8]
   1d01e:	68e3      	ldr	r3, [r4, #12]
   1d020:	9301      	str	r3, [sp, #4]
   1d022:	68a3      	ldr	r3, [r4, #8]
   1d024:	9300      	str	r3, [sp, #0]
   1d026:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d02a:	f7f2 f85b 	bl	f0e4 <print_formatted>
		break;
   1d02e:	e73b      	b.n	1cea8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d030:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d032:	4631      	mov	r1, r6
   1d034:	930a      	str	r3, [sp, #40]	; 0x28
   1d036:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1d038:	4628      	mov	r0, r5
   1d03a:	9309      	str	r3, [sp, #36]	; 0x24
   1d03c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d03e:	9308      	str	r3, [sp, #32]
   1d040:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d042:	9307      	str	r3, [sp, #28]
   1d044:	6a23      	ldr	r3, [r4, #32]
   1d046:	9306      	str	r3, [sp, #24]
   1d048:	69e3      	ldr	r3, [r4, #28]
   1d04a:	9305      	str	r3, [sp, #20]
   1d04c:	69a3      	ldr	r3, [r4, #24]
   1d04e:	9304      	str	r3, [sp, #16]
   1d050:	6963      	ldr	r3, [r4, #20]
   1d052:	9303      	str	r3, [sp, #12]
   1d054:	6923      	ldr	r3, [r4, #16]
   1d056:	9302      	str	r3, [sp, #8]
   1d058:	68e3      	ldr	r3, [r4, #12]
   1d05a:	9301      	str	r3, [sp, #4]
   1d05c:	68a3      	ldr	r3, [r4, #8]
   1d05e:	9300      	str	r3, [sp, #0]
   1d060:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d064:	f7f2 f83e 	bl	f0e4 <print_formatted>
		break;
   1d068:	e71e      	b.n	1cea8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d06a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1d06c:	4631      	mov	r1, r6
   1d06e:	930b      	str	r3, [sp, #44]	; 0x2c
   1d070:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d072:	4628      	mov	r0, r5
   1d074:	930a      	str	r3, [sp, #40]	; 0x28
   1d076:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1d078:	9309      	str	r3, [sp, #36]	; 0x24
   1d07a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d07c:	9308      	str	r3, [sp, #32]
   1d07e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d080:	9307      	str	r3, [sp, #28]
   1d082:	6a23      	ldr	r3, [r4, #32]
   1d084:	9306      	str	r3, [sp, #24]
   1d086:	69e3      	ldr	r3, [r4, #28]
   1d088:	9305      	str	r3, [sp, #20]
   1d08a:	69a3      	ldr	r3, [r4, #24]
   1d08c:	9304      	str	r3, [sp, #16]
   1d08e:	6963      	ldr	r3, [r4, #20]
   1d090:	9303      	str	r3, [sp, #12]
   1d092:	6923      	ldr	r3, [r4, #16]
   1d094:	9302      	str	r3, [sp, #8]
   1d096:	68e3      	ldr	r3, [r4, #12]
   1d098:	9301      	str	r3, [sp, #4]
   1d09a:	68a3      	ldr	r3, [r4, #8]
   1d09c:	9300      	str	r3, [sp, #0]
   1d09e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d0a2:	f7f2 f81f 	bl	f0e4 <print_formatted>
		break;
   1d0a6:	e6ff      	b.n	1cea8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d0a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1d0aa:	4631      	mov	r1, r6
   1d0ac:	930c      	str	r3, [sp, #48]	; 0x30
   1d0ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1d0b0:	4628      	mov	r0, r5
   1d0b2:	930b      	str	r3, [sp, #44]	; 0x2c
   1d0b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d0b6:	930a      	str	r3, [sp, #40]	; 0x28
   1d0b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1d0ba:	9309      	str	r3, [sp, #36]	; 0x24
   1d0bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d0be:	9308      	str	r3, [sp, #32]
   1d0c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d0c2:	9307      	str	r3, [sp, #28]
   1d0c4:	6a23      	ldr	r3, [r4, #32]
   1d0c6:	9306      	str	r3, [sp, #24]
   1d0c8:	69e3      	ldr	r3, [r4, #28]
   1d0ca:	9305      	str	r3, [sp, #20]
   1d0cc:	69a3      	ldr	r3, [r4, #24]
   1d0ce:	9304      	str	r3, [sp, #16]
   1d0d0:	6963      	ldr	r3, [r4, #20]
   1d0d2:	9303      	str	r3, [sp, #12]
   1d0d4:	6923      	ldr	r3, [r4, #16]
   1d0d6:	9302      	str	r3, [sp, #8]
   1d0d8:	68e3      	ldr	r3, [r4, #12]
   1d0da:	9301      	str	r3, [sp, #4]
   1d0dc:	68a3      	ldr	r3, [r4, #8]
   1d0de:	9300      	str	r3, [sp, #0]
   1d0e0:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d0e4:	f7f1 fffe 	bl	f0e4 <print_formatted>
}
   1d0e8:	e6de      	b.n	1cea8 <std_print+0x78>

0001d0ea <log_output_flush>:
		     log_output->control_block->offset,
   1d0ea:	6842      	ldr	r2, [r0, #4]
{
   1d0ec:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   1d0ee:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   1d0f2:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   1d0f4:	6881      	ldr	r1, [r0, #8]
   1d0f6:	6800      	ldr	r0, [r0, #0]
   1d0f8:	f7ff fe8d 	bl	1ce16 <buffer_write>
	log_output->control_block->offset = 0;
   1d0fc:	2200      	movs	r2, #0
   1d0fe:	6863      	ldr	r3, [r4, #4]
   1d100:	601a      	str	r2, [r3, #0]
}
   1d102:	bd10      	pop	{r4, pc}

0001d104 <out_func>:
{
   1d104:	b508      	push	{r3, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
   1d106:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   1d10a:	681b      	ldr	r3, [r3, #0]
   1d10c:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
   1d10e:	684a      	ldr	r2, [r1, #4]
   1d110:	6813      	ldr	r3, [r2, #0]
   1d112:	3301      	adds	r3, #1
   1d114:	6013      	str	r3, [r2, #0]
	if (out_ctx->control_block->offset == out_ctx->size) {
   1d116:	68ca      	ldr	r2, [r1, #12]
   1d118:	4293      	cmp	r3, r2
   1d11a:	d102      	bne.n	1d122 <out_func+0x1e>
		log_output_flush(out_ctx);
   1d11c:	4608      	mov	r0, r1
   1d11e:	f7ff ffe4 	bl	1d0ea <log_output_flush>
}
   1d122:	2000      	movs	r0, #0
   1d124:	bd08      	pop	{r3, pc}

0001d126 <char_out>:
{
   1d126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d128:	460d      	mov	r5, r1
   1d12a:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
   1d12c:	4604      	mov	r4, r0
   1d12e:	1847      	adds	r7, r0, r1
   1d130:	42bc      	cmp	r4, r7
   1d132:	d101      	bne.n	1d138 <char_out+0x12>
}
   1d134:	4628      	mov	r0, r5
   1d136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   1d138:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   1d13c:	6873      	ldr	r3, [r6, #4]
   1d13e:	4630      	mov	r0, r6
   1d140:	685b      	ldr	r3, [r3, #4]
   1d142:	4798      	blx	r3
   1d144:	e7f4      	b.n	1d130 <char_out+0xa>

0001d146 <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
   1d146:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
   1d148:	7a5a      	ldrb	r2, [r3, #9]
   1d14a:	b932      	cbnz	r2, 1d15a <get_status+0x14>
	if (data->ref > 0) {
   1d14c:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
   1d150:	2800      	cmp	r0, #0
   1d152:	bfcc      	ite	gt
   1d154:	2000      	movgt	r0, #0
   1d156:	2001      	movle	r0, #1
   1d158:	4770      	bx	lr
   1d15a:	2002      	movs	r0, #2
}
   1d15c:	4770      	bx	lr

0001d15e <clock_stop>:
	const struct nrf_clock_control_config *config =
   1d15e:	6802      	ldr	r2, [r0, #0]
{
   1d160:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
   1d162:	6896      	ldr	r6, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
   1d164:	6884      	ldr	r4, [r0, #8]
	__asm__ volatile(
   1d166:	f04f 0320 	mov.w	r3, #32
   1d16a:	f3ef 8511 	mrs	r5, BASEPRI
   1d16e:	f383 8811 	msr	BASEPRI, r3
   1d172:	f3bf 8f6f 	isb	sy
	data->ref--;
   1d176:	7a23      	ldrb	r3, [r4, #8]
   1d178:	3b01      	subs	r3, #1
   1d17a:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
   1d17c:	2b00      	cmp	r3, #0
	data->ref--;
   1d17e:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
   1d180:	d11c      	bne.n	1d1bc <clock_stop+0x5e>
	list->tail = NULL;
   1d182:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
   1d186:	6873      	ldr	r3, [r6, #4]
				config->stop_handler(dev) : true;
   1d188:	b9a3      	cbnz	r3, 1d1b4 <clock_stop+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d18a:	2201      	movs	r2, #1
   1d18c:	7af3      	ldrb	r3, [r6, #11]
   1d18e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d192:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1d196:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d198:	2200      	movs	r2, #0
   1d19a:	8933      	ldrh	r3, [r6, #8]
   1d19c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d1a0:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1d1a4:	601a      	str	r2, [r3, #0]
		data->started = false;
   1d1a6:	2000      	movs	r0, #0
   1d1a8:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   1d1aa:	f385 8811 	msr	BASEPRI, r5
   1d1ae:	f3bf 8f6f 	isb	sy
}
   1d1b2:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
   1d1b4:	4798      	blx	r3
   1d1b6:	2800      	cmp	r0, #0
   1d1b8:	d1e7      	bne.n	1d18a <clock_stop+0x2c>
   1d1ba:	e7f4      	b.n	1d1a6 <clock_stop+0x48>
	} else if (data->ref < 0) {
   1d1bc:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
   1d1c0:	bfbc      	itt	lt
   1d1c2:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
   1d1c4:	f06f 0044 	mvnlt.w	r0, #68	; 0x44
   1d1c8:	e7ef      	b.n	1d1aa <clock_stop+0x4c>

0001d1ca <clock_async_start>:
{
   1d1ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
   1d1cc:	6803      	ldr	r3, [r0, #0]
{
   1d1ce:	4606      	mov	r6, r0
   1d1d0:	4614      	mov	r4, r2
	const struct nrf_clock_control_config *config =
   1d1d2:	689f      	ldr	r7, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
   1d1d4:	6885      	ldr	r5, [r0, #8]
	__asm__ volatile(
   1d1d6:	f04f 0320 	mov.w	r3, #32
   1d1da:	f3ef 8211 	mrs	r2, BASEPRI
   1d1de:	f383 8811 	msr	BASEPRI, r3
   1d1e2:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   1d1e6:	7a2b      	ldrb	r3, [r5, #8]
   1d1e8:	3301      	adds	r3, #1
   1d1ea:	b25b      	sxtb	r3, r3
   1d1ec:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
   1d1ee:	f382 8811 	msr	BASEPRI, r2
   1d1f2:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
   1d1f6:	7a6a      	ldrb	r2, [r5, #9]
   1d1f8:	b132      	cbz	r2, 1d208 <clock_async_start+0x3e>
		if (data) {
   1d1fa:	b90c      	cbnz	r4, 1d200 <clock_async_start+0x36>
	return 0;
   1d1fc:	2000      	movs	r0, #0
}
   1d1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
   1d200:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1d204:	4798      	blx	r3
   1d206:	e7f9      	b.n	1d1fc <clock_async_start+0x32>
		if (ref == 1) {
   1d208:	2b01      	cmp	r3, #1
   1d20a:	d108      	bne.n	1d21e <clock_async_start+0x54>
			do_start =  (config->start_handler) ?
   1d20c:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
   1d20e:	b943      	cbnz	r3, 1d222 <clock_async_start+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d210:	2201      	movs	r2, #1
   1d212:	7abb      	ldrb	r3, [r7, #10]
   1d214:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d218:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1d21c:	601a      	str	r2, [r3, #0]
		if (data) {
   1d21e:	b94c      	cbnz	r4, 1d234 <clock_async_start+0x6a>
   1d220:	e7ec      	b.n	1d1fc <clock_async_start+0x32>
					config->start_handler(dev) : true;
   1d222:	4798      	blx	r3
   1d224:	2800      	cmp	r0, #0
   1d226:	d1f3      	bne.n	1d210 <clock_async_start+0x46>
			} else if (data) {
   1d228:	2c00      	cmp	r4, #0
   1d22a:	d0e7      	beq.n	1d1fc <clock_async_start+0x32>
				data->cb(dev, data->user_data);
   1d22c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1d230:	4630      	mov	r0, r6
   1d232:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
   1d234:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
   1d236:	429c      	cmp	r4, r3
   1d238:	d00d      	beq.n	1d256 <clock_async_start+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d23a:	b113      	cbz	r3, 1d242 <clock_async_start+0x78>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d23c:	681b      	ldr	r3, [r3, #0]
	} while (item);
   1d23e:	2b00      	cmp	r3, #0
   1d240:	d1f9      	bne.n	1d236 <clock_async_start+0x6c>
	parent->next = child;
   1d242:	2000      	movs	r0, #0
   1d244:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1d246:	686b      	ldr	r3, [r5, #4]
   1d248:	b913      	cbnz	r3, 1d250 <clock_async_start+0x86>
	list->head = node;
   1d24a:	e9c5 4400 	strd	r4, r4, [r5]
   1d24e:	e7d5      	b.n	1d1fc <clock_async_start+0x32>
	parent->next = child;
   1d250:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1d252:	606c      	str	r4, [r5, #4]
   1d254:	e7d3      	b.n	1d1fe <clock_async_start+0x34>
				return -EALREADY;
   1d256:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1d25a:	e7d0      	b.n	1d1fe <clock_async_start+0x34>

0001d25c <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   1d25c:	2200      	movs	r2, #0
   1d25e:	f7ff bfb4 	b.w	1d1ca <clock_async_start>

0001d262 <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
   1d262:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
   1d264:	2000      	movs	r0, #0
	list->tail = NULL;
   1d266:	e9c3 0000 	strd	r0, r0, [r3]
}
   1d26a:	4770      	bx	lr

0001d26c <clkstarted_handle>:
{
   1d26c:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
   1d26e:	6884      	ldr	r4, [r0, #8]
{
   1d270:	4605      	mov	r5, r0
Z_GENLIST_IS_EMPTY(slist)
   1d272:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1d274:	b12b      	cbz	r3, 1d282 <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d276:	6861      	ldr	r1, [r4, #4]
   1d278:	681a      	ldr	r2, [r3, #0]
   1d27a:	428b      	cmp	r3, r1
	list->head = node;
   1d27c:	6022      	str	r2, [r4, #0]
	list->tail = node;
   1d27e:	bf08      	it	eq
   1d280:	6062      	streq	r2, [r4, #4]
	data->started = true;
   1d282:	2201      	movs	r2, #1
   1d284:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
   1d286:	b903      	cbnz	r3, 1d28a <clkstarted_handle+0x1e>
}
   1d288:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   1d28a:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   1d28e:	4628      	mov	r0, r5
   1d290:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
   1d292:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1d294:	2b00      	cmp	r3, #0
   1d296:	d0f7      	beq.n	1d288 <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d298:	6861      	ldr	r1, [r4, #4]
   1d29a:	681a      	ldr	r2, [r3, #0]
   1d29c:	428b      	cmp	r3, r1
	list->head = node;
   1d29e:	6022      	str	r2, [r4, #0]
	list->tail = node;
   1d2a0:	bf08      	it	eq
   1d2a2:	6062      	streq	r2, [r4, #4]
   1d2a4:	e7ef      	b.n	1d286 <clkstarted_handle+0x1a>

0001d2a6 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1d2a6:	4770      	bx	lr

0001d2a8 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1d2a8:	4770      	bx	lr

0001d2aa <z_irq_spurious>:
	z_arm_reserved();
   1d2aa:	f7f2 bbab 	b.w	fa04 <z_arm_bus_fault>

0001d2ae <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1d2ae:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   1d2b0:	6800      	ldr	r0, [r0, #0]
   1d2b2:	f7f2 bbb1 	b.w	fa18 <z_arm_fatal_error>

0001d2b6 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1d2b6:	b508      	push	{r3, lr}
	handler();
   1d2b8:	f7f2 fc48 	bl	fb4c <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   1d2bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   1d2c0:	f7f2 ba7a 	b.w	f7b8 <z_arm_exc_exit>

0001d2c4 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   1d2c4:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   1d2c6:	2100      	movs	r1, #0
   1d2c8:	a801      	add	r0, sp, #4
   1d2ca:	f7f3 f953 	bl	10574 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   1d2ce:	b003      	add	sp, #12
   1d2d0:	f85d fb04 	ldr.w	pc, [sp], #4

0001d2d4 <mpu_configure_region>:
{
   1d2d4:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   1d2d6:	684b      	ldr	r3, [r1, #4]
{
   1d2d8:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   1d2da:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   1d2dc:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1d2e0:	890d      	ldrh	r5, [r1, #8]
   1d2e2:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   1d2e4:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1d2e6:	f024 041f 	bic.w	r4, r4, #31
   1d2ea:	3b01      	subs	r3, #1
   1d2ec:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   1d2ee:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   1d2f2:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1d2f6:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   1d2fa:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
   1d2fc:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1d300:	9303      	str	r3, [sp, #12]
   1d302:	4604      	mov	r4, r0
   1d304:	d905      	bls.n	1d312 <mpu_configure_region+0x3e>
   1d306:	f7f2 ffb7 	bl	10278 <region_allocate_and_init.part.0>
   1d30a:	4604      	mov	r4, r0
}
   1d30c:	4620      	mov	r0, r4
   1d30e:	b005      	add	sp, #20
   1d310:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   1d312:	4669      	mov	r1, sp
   1d314:	f7f2 ff98 	bl	10248 <region_init>
	return region_allocate_and_init(index,
   1d318:	e7f8      	b.n	1d30c <mpu_configure_region+0x38>

0001d31a <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1d31a:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   1d31e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1d322:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   1d324:	bf08      	it	eq
   1d326:	f06f 0015 	mvneq.w	r0, #21
   1d32a:	4770      	bx	lr

0001d32c <atoi>:

#include <stdlib.h>
#include <ctype.h>

int atoi(const char *s)
{
   1d32c:	b530      	push	{r4, r5, lr}
	int n = 0;
	int neg = 0;

	while (isspace(*s)) {
   1d32e:	7802      	ldrb	r2, [r0, #0]
   1d330:	4603      	mov	r3, r0
   1d332:	2a20      	cmp	r2, #32
   1d334:	f100 0001 	add.w	r0, r0, #1
   1d338:	d0f9      	beq.n	1d32e <atoi+0x2>
   1d33a:	f1a2 0109 	sub.w	r1, r2, #9
   1d33e:	2904      	cmp	r1, #4
   1d340:	d9f5      	bls.n	1d32e <atoi+0x2>
		s++;
	}
	switch (*s) {
   1d342:	2a2b      	cmp	r2, #43	; 0x2b
   1d344:	d008      	beq.n	1d358 <atoi+0x2c>
	case '-':
		neg = 1;
		s++;
   1d346:	2a2d      	cmp	r2, #45	; 0x2d
   1d348:	bf0a      	itet	eq
   1d34a:	4603      	moveq	r3, r0
   1d34c:	2100      	movne	r1, #0
   1d34e:	2101      	moveq	r1, #1
   1d350:	3b01      	subs	r3, #1
	int neg = 0;
   1d352:	2000      	movs	r0, #0
	case '+':
		s++;
	}
	/* Compute n as a negative number to avoid overflow on INT_MIN */
	while (isdigit(*s)) {
		n = 10*n - (*s++ - '0');
   1d354:	250a      	movs	r5, #10
   1d356:	e006      	b.n	1d366 <atoi+0x3a>
		s++;
   1d358:	4603      	mov	r3, r0
	int neg = 0;
   1d35a:	2100      	movs	r1, #0
   1d35c:	e7f8      	b.n	1d350 <atoi+0x24>
		n = 10*n - (*s++ - '0');
   1d35e:	f1c2 0230 	rsb	r2, r2, #48	; 0x30
   1d362:	fb05 2000 	mla	r0, r5, r0, r2
	while (isdigit(*s)) {
   1d366:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1d36a:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   1d36e:	2c09      	cmp	r4, #9
   1d370:	d9f5      	bls.n	1d35e <atoi+0x32>
	}
	return neg ? n : -n;
   1d372:	b901      	cbnz	r1, 1d376 <atoi+0x4a>
   1d374:	4240      	negs	r0, r0
}
   1d376:	bd30      	pop	{r4, r5, pc}

0001d378 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1d378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d37c:	4684      	mov	ip, r0
   1d37e:	460f      	mov	r7, r1
	register const char *s = nptr;
   1d380:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1d382:	462c      	mov	r4, r5
   1d384:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1d388:	2b20      	cmp	r3, #32
   1d38a:	d036      	beq.n	1d3fa <strtol+0x82>
   1d38c:	f1a3 0109 	sub.w	r1, r3, #9
   1d390:	2904      	cmp	r1, #4
   1d392:	d932      	bls.n	1d3fa <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
   1d394:	2b2d      	cmp	r3, #45	; 0x2d
   1d396:	d132      	bne.n	1d3fe <strtol+0x86>
		neg = 1;
   1d398:	2101      	movs	r1, #1
		c = *s++;
   1d39a:	786b      	ldrb	r3, [r5, #1]
   1d39c:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1d39e:	2a00      	cmp	r2, #0
   1d3a0:	d05c      	beq.n	1d45c <strtol+0xe4>
   1d3a2:	2a10      	cmp	r2, #16
   1d3a4:	d109      	bne.n	1d3ba <strtol+0x42>
   1d3a6:	2b30      	cmp	r3, #48	; 0x30
   1d3a8:	d107      	bne.n	1d3ba <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1d3aa:	7823      	ldrb	r3, [r4, #0]
   1d3ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1d3b0:	2b58      	cmp	r3, #88	; 0x58
   1d3b2:	d14e      	bne.n	1d452 <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   1d3b4:	2210      	movs	r2, #16
		c = s[1];
   1d3b6:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1d3b8:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1d3ba:	2900      	cmp	r1, #0
   1d3bc:	bf14      	ite	ne
   1d3be:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
   1d3c2:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1d3c6:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   1d3c8:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
   1d3cc:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1d3ce:	fb02 891e 	mls	r9, r2, lr, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1d3d2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1d3d6:	2d09      	cmp	r5, #9
   1d3d8:	d817      	bhi.n	1d40a <strtol+0x92>
			c -= '0';
   1d3da:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1d3dc:	429a      	cmp	r2, r3
   1d3de:	dd24      	ble.n	1d42a <strtol+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1d3e0:	1c75      	adds	r5, r6, #1
   1d3e2:	d007      	beq.n	1d3f4 <strtol+0x7c>
   1d3e4:	4570      	cmp	r0, lr
   1d3e6:	d81d      	bhi.n	1d424 <strtol+0xac>
   1d3e8:	d101      	bne.n	1d3ee <strtol+0x76>
   1d3ea:	454b      	cmp	r3, r9
   1d3ec:	dc1a      	bgt.n	1d424 <strtol+0xac>
			any = -1;
		} else {
			any = 1;
   1d3ee:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1d3f0:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1d3f4:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1d3f8:	e7eb      	b.n	1d3d2 <strtol+0x5a>
{
   1d3fa:	4625      	mov	r5, r4
   1d3fc:	e7c1      	b.n	1d382 <strtol+0xa>
	} else if (c == '+') {
   1d3fe:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1d400:	bf04      	itt	eq
   1d402:	1cac      	addeq	r4, r5, #2
   1d404:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   1d406:	2100      	movs	r1, #0
   1d408:	e7c9      	b.n	1d39e <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1d40a:	f043 0520 	orr.w	r5, r3, #32
   1d40e:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1d410:	2d19      	cmp	r5, #25
   1d412:	d80a      	bhi.n	1d42a <strtol+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1d414:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1d418:	2d1a      	cmp	r5, #26
   1d41a:	bf34      	ite	cc
   1d41c:	2537      	movcc	r5, #55	; 0x37
   1d41e:	2557      	movcs	r5, #87	; 0x57
   1d420:	1b5b      	subs	r3, r3, r5
   1d422:	e7db      	b.n	1d3dc <strtol+0x64>
			any = -1;
   1d424:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1d428:	e7e4      	b.n	1d3f4 <strtol+0x7c>
		}
	}

	if (any < 0) {
   1d42a:	1c73      	adds	r3, r6, #1
   1d42c:	d107      	bne.n	1d43e <strtol+0xc6>
   1d42e:	f7fd fdc1 	bl	1afb4 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1d432:	2326      	movs	r3, #38	; 0x26
   1d434:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1d436:	4640      	mov	r0, r8
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1d438:	b937      	cbnz	r7, 1d448 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1d43a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1d43e:	b101      	cbz	r1, 1d442 <strtol+0xca>
		acc = -acc;
   1d440:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1d442:	2f00      	cmp	r7, #0
   1d444:	d0f9      	beq.n	1d43a <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
   1d446:	b10e      	cbz	r6, 1d44c <strtol+0xd4>
   1d448:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   1d44c:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   1d450:	e7f3      	b.n	1d43a <strtol+0xc2>
	if (base == 0) {
   1d452:	2330      	movs	r3, #48	; 0x30
   1d454:	2a00      	cmp	r2, #0
   1d456:	d1b0      	bne.n	1d3ba <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1d458:	2208      	movs	r2, #8
   1d45a:	e7ae      	b.n	1d3ba <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1d45c:	2b30      	cmp	r3, #48	; 0x30
   1d45e:	d0a4      	beq.n	1d3aa <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1d460:	220a      	movs	r2, #10
   1d462:	e7aa      	b.n	1d3ba <strtol+0x42>

0001d464 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   1d464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d468:	4684      	mov	ip, r0
   1d46a:	460f      	mov	r7, r1
	register const char *s = nptr;
   1d46c:	4605      	mov	r5, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   1d46e:	462c      	mov	r4, r5
   1d470:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1d474:	2b20      	cmp	r3, #32
   1d476:	d035      	beq.n	1d4e4 <strtoul+0x80>
   1d478:	f1a3 0109 	sub.w	r1, r3, #9
   1d47c:	2904      	cmp	r1, #4
   1d47e:	d931      	bls.n	1d4e4 <strtoul+0x80>
	} while (isspace(c));
	if (c == '-') {
   1d480:	2b2d      	cmp	r3, #45	; 0x2d
   1d482:	d131      	bne.n	1d4e8 <strtoul+0x84>
		neg = 1;
   1d484:	f04f 0e01 	mov.w	lr, #1
		c = *s++;
   1d488:	786b      	ldrb	r3, [r5, #1]
   1d48a:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1d48c:	2a00      	cmp	r2, #0
   1d48e:	d05e      	beq.n	1d54e <strtoul+0xea>
   1d490:	2a10      	cmp	r2, #16
   1d492:	d109      	bne.n	1d4a8 <strtoul+0x44>
   1d494:	2b30      	cmp	r3, #48	; 0x30
   1d496:	d107      	bne.n	1d4a8 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1d498:	7823      	ldrb	r3, [r4, #0]
   1d49a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1d49e:	2b58      	cmp	r3, #88	; 0x58
   1d4a0:	d150      	bne.n	1d544 <strtoul+0xe0>
		c = s[1];
		s += 2;
		base = 16;
   1d4a2:	2210      	movs	r2, #16
		c = s[1];
   1d4a4:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1d4a6:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   1d4a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d4ac:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1d4b0:	2600      	movs	r6, #0
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   1d4b2:	fb02 f801 	mul.w	r8, r2, r1
	for (acc = 0, any = 0;; c = *s++) {
   1d4b6:	4630      	mov	r0, r6
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   1d4b8:	ea6f 0808 	mvn.w	r8, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1d4bc:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1d4c0:	2d09      	cmp	r5, #9
   1d4c2:	d818      	bhi.n	1d4f6 <strtoul+0x92>
			c -= '0';
   1d4c4:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1d4c6:	429a      	cmp	r2, r3
   1d4c8:	dd25      	ble.n	1d516 <strtoul+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1d4ca:	2e00      	cmp	r6, #0
   1d4cc:	db20      	blt.n	1d510 <strtoul+0xac>
   1d4ce:	4288      	cmp	r0, r1
   1d4d0:	d81e      	bhi.n	1d510 <strtoul+0xac>
   1d4d2:	d101      	bne.n	1d4d8 <strtoul+0x74>
   1d4d4:	4543      	cmp	r3, r8
   1d4d6:	dc1b      	bgt.n	1d510 <strtoul+0xac>
			any = -1;
		} else {
			any = 1;
   1d4d8:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1d4da:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1d4de:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1d4e2:	e7eb      	b.n	1d4bc <strtoul+0x58>
{
   1d4e4:	4625      	mov	r5, r4
   1d4e6:	e7c2      	b.n	1d46e <strtoul+0xa>
	} else if (c == '+') {
   1d4e8:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1d4ea:	bf04      	itt	eq
   1d4ec:	1cac      	addeq	r4, r5, #2
   1d4ee:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   1d4f0:	f04f 0e00 	mov.w	lr, #0
   1d4f4:	e7ca      	b.n	1d48c <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1d4f6:	f043 0520 	orr.w	r5, r3, #32
   1d4fa:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1d4fc:	2d19      	cmp	r5, #25
   1d4fe:	d80a      	bhi.n	1d516 <strtoul+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1d500:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1d504:	2d1a      	cmp	r5, #26
   1d506:	bf34      	ite	cc
   1d508:	2537      	movcc	r5, #55	; 0x37
   1d50a:	2557      	movcs	r5, #87	; 0x57
   1d50c:	1b5b      	subs	r3, r3, r5
   1d50e:	e7da      	b.n	1d4c6 <strtoul+0x62>
			any = -1;
   1d510:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1d514:	e7e3      	b.n	1d4de <strtoul+0x7a>
		}
	}
	if (any < 0) {
   1d516:	2e00      	cmp	r6, #0
   1d518:	da08      	bge.n	1d52c <strtoul+0xc8>
   1d51a:	f7fd fd4b 	bl	1afb4 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   1d51e:	2326      	movs	r3, #38	; 0x26
   1d520:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   1d522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   1d526:	b947      	cbnz	r7, 1d53a <strtoul+0xd6>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1d528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   1d52c:	f1be 0f00 	cmp.w	lr, #0
   1d530:	d000      	beq.n	1d534 <strtoul+0xd0>
		acc = -acc;
   1d532:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1d534:	2f00      	cmp	r7, #0
   1d536:	d0f7      	beq.n	1d528 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   1d538:	b10e      	cbz	r6, 1d53e <strtoul+0xda>
   1d53a:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   1d53e:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   1d542:	e7f1      	b.n	1d528 <strtoul+0xc4>
	if (base == 0) {
   1d544:	2330      	movs	r3, #48	; 0x30
   1d546:	2a00      	cmp	r2, #0
   1d548:	d1ae      	bne.n	1d4a8 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   1d54a:	2208      	movs	r2, #8
   1d54c:	e7ac      	b.n	1d4a8 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   1d54e:	2b30      	cmp	r3, #48	; 0x30
   1d550:	d0a2      	beq.n	1d498 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   1d552:	220a      	movs	r2, #10
   1d554:	e7a8      	b.n	1d4a8 <strtoul+0x44>

0001d556 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   1d556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   1d55a:	780f      	ldrb	r7, [r1, #0]
{
   1d55c:	4605      	mov	r5, r0
	if (c != 0) {
   1d55e:	b187      	cbz	r7, 1d582 <strstr+0x2c>
	c = *find++;
   1d560:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   1d562:	4620      	mov	r0, r4
   1d564:	f000 f84c 	bl	1d600 <strlen>
   1d568:	4680      	mov	r8, r0
		do {
			do {
				sc = *s++;
   1d56a:	462e      	mov	r6, r5
   1d56c:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   1d570:	b163      	cbz	r3, 1d58c <strstr+0x36>
					return NULL;
				}
			} while (sc != c);
   1d572:	429f      	cmp	r7, r3
   1d574:	d108      	bne.n	1d588 <strstr+0x32>
		} while (strncmp(s, find, len) != 0);
   1d576:	4642      	mov	r2, r8
   1d578:	4621      	mov	r1, r4
   1d57a:	4630      	mov	r0, r6
   1d57c:	f000 f853 	bl	1d626 <strncmp>
   1d580:	b910      	cbnz	r0, 1d588 <strstr+0x32>
	s--;
	}
	return (char *)s;
}
   1d582:	4628      	mov	r0, r5
   1d584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1d588:	4635      	mov	r5, r6
   1d58a:	e7ee      	b.n	1d56a <strstr+0x14>
					return NULL;
   1d58c:	461d      	mov	r5, r3
   1d58e:	e7f8      	b.n	1d582 <strstr+0x2c>

0001d590 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1d590:	4603      	mov	r3, r0
   1d592:	3901      	subs	r1, #1
   1d594:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1d598:	b90a      	cbnz	r2, 1d59e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1d59a:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1d59c:	4770      	bx	lr
		*d = *s;
   1d59e:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1d5a2:	e7f7      	b.n	1d594 <strcpy+0x4>

0001d5a4 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1d5a4:	b570      	push	{r4, r5, r6, lr}
   1d5a6:	4605      	mov	r5, r0
   1d5a8:	3901      	subs	r1, #1
   1d5aa:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1d5ac:	b142      	cbz	r2, 1d5c0 <strncpy+0x1c>
   1d5ae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1d5b2:	1e56      	subs	r6, r2, #1
   1d5b4:	b92b      	cbnz	r3, 1d5c2 <strncpy+0x1e>
   1d5b6:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1d5b8:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   1d5bc:	42a2      	cmp	r2, r4
   1d5be:	d1fb      	bne.n	1d5b8 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   1d5c0:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   1d5c2:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   1d5c6:	4632      	mov	r2, r6
   1d5c8:	e7ef      	b.n	1d5aa <strncpy+0x6>

0001d5ca <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   1d5ca:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   1d5cc:	7802      	ldrb	r2, [r0, #0]
   1d5ce:	4603      	mov	r3, r0
   1d5d0:	428a      	cmp	r2, r1
   1d5d2:	f100 0001 	add.w	r0, r0, #1
   1d5d6:	d004      	beq.n	1d5e2 <strchr+0x18>
   1d5d8:	2a00      	cmp	r2, #0
   1d5da:	d1f7      	bne.n	1d5cc <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   1d5dc:	2900      	cmp	r1, #0
   1d5de:	bf18      	it	ne
   1d5e0:	2300      	movne	r3, #0
}
   1d5e2:	4618      	mov	r0, r3
   1d5e4:	4770      	bx	lr

0001d5e6 <strrchr>:
 * @return pointer to last instance of found byte, or NULL if not found
 */

char *strrchr(const char *s, int c)
{
	char *match = NULL;
   1d5e6:	2300      	movs	r3, #0
{
   1d5e8:	b510      	push	{r4, lr}

	do {
		if (*s == (char)c) {
   1d5ea:	b2c9      	uxtb	r1, r1
   1d5ec:	4604      	mov	r4, r0
   1d5ee:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d5f2:	428a      	cmp	r2, r1
   1d5f4:	bf08      	it	eq
   1d5f6:	4623      	moveq	r3, r4
			match = (char *)s;
		}
	} while (*s++);
   1d5f8:	2a00      	cmp	r2, #0
   1d5fa:	d1f7      	bne.n	1d5ec <strrchr+0x6>

	return match;
}
   1d5fc:	4618      	mov	r0, r3
   1d5fe:	bd10      	pop	{r4, pc}

0001d600 <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
   1d600:	2300      	movs	r3, #0

	while (*s != '\0') {
   1d602:	5cc2      	ldrb	r2, [r0, r3]
   1d604:	b90a      	cbnz	r2, 1d60a <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1d606:	4618      	mov	r0, r3
   1d608:	4770      	bx	lr
		n++;
   1d60a:	3301      	adds	r3, #1
   1d60c:	e7f9      	b.n	1d602 <strlen+0x2>

0001d60e <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1d60e:	3801      	subs	r0, #1
   1d610:	3901      	subs	r1, #1
   1d612:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1d616:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1d61a:	4293      	cmp	r3, r2
   1d61c:	d101      	bne.n	1d622 <strcmp+0x14>
   1d61e:	2b00      	cmp	r3, #0
   1d620:	d1f7      	bne.n	1d612 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1d622:	1a98      	subs	r0, r3, r2
   1d624:	4770      	bx	lr

0001d626 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1d626:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1d628:	2400      	movs	r4, #0
   1d62a:	42a2      	cmp	r2, r4
   1d62c:	d008      	beq.n	1d640 <strncmp+0x1a>
   1d62e:	5d03      	ldrb	r3, [r0, r4]
   1d630:	5d0d      	ldrb	r5, [r1, r4]
   1d632:	42ab      	cmp	r3, r5
   1d634:	d102      	bne.n	1d63c <strncmp+0x16>
   1d636:	3401      	adds	r4, #1
   1d638:	2b00      	cmp	r3, #0
   1d63a:	d1f6      	bne.n	1d62a <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1d63c:	1b58      	subs	r0, r3, r5
   1d63e:	e000      	b.n	1d642 <strncmp+0x1c>
   1d640:	2000      	movs	r0, #0
}
   1d642:	bd30      	pop	{r4, r5, pc}

0001d644 <strcat>:

char *strcat(char *_MLIBC_RESTRICT dest, const char *_MLIBC_RESTRICT src)
{
   1d644:	b510      	push	{r4, lr}
   1d646:	4604      	mov	r4, r0
	strcpy(dest + strlen(dest), src);
   1d648:	f7ff ffda 	bl	1d600 <strlen>
   1d64c:	4420      	add	r0, r4
   1d64e:	f7ff ff9f 	bl	1d590 <strcpy>
	return dest;
}
   1d652:	4620      	mov	r0, r4
   1d654:	bd10      	pop	{r4, pc}

0001d656 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1d656:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1d658:	b15a      	cbz	r2, 1d672 <memcmp+0x1c>
   1d65a:	3901      	subs	r1, #1
   1d65c:	1884      	adds	r4, r0, r2
   1d65e:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d662:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1d666:	42a0      	cmp	r0, r4
   1d668:	d001      	beq.n	1d66e <memcmp+0x18>
   1d66a:	429a      	cmp	r2, r3
   1d66c:	d0f7      	beq.n	1d65e <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1d66e:	1ad0      	subs	r0, r2, r3
}
   1d670:	bd10      	pop	{r4, pc}
		return 0;
   1d672:	4610      	mov	r0, r2
   1d674:	e7fc      	b.n	1d670 <memcmp+0x1a>

0001d676 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1d676:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1d678:	ea81 0400 	eor.w	r4, r1, r0
   1d67c:	07a5      	lsls	r5, r4, #30
   1d67e:	4603      	mov	r3, r0
   1d680:	d00b      	beq.n	1d69a <memcpy+0x24>
   1d682:	3b01      	subs	r3, #1
   1d684:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1d686:	4291      	cmp	r1, r2
   1d688:	d11a      	bne.n	1d6c0 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1d68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1d68c:	2a00      	cmp	r2, #0
   1d68e:	d0fc      	beq.n	1d68a <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1d690:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1d694:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1d696:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1d69a:	079c      	lsls	r4, r3, #30
   1d69c:	d1f6      	bne.n	1d68c <memcpy+0x16>
   1d69e:	0895      	lsrs	r5, r2, #2
   1d6a0:	00ac      	lsls	r4, r5, #2
   1d6a2:	1f1e      	subs	r6, r3, #4
   1d6a4:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1d6a6:	42b9      	cmp	r1, r7
   1d6a8:	d105      	bne.n	1d6b6 <memcpy+0x40>
   1d6aa:	f06f 0603 	mvn.w	r6, #3
   1d6ae:	4423      	add	r3, r4
   1d6b0:	fb06 2205 	mla	r2, r6, r5, r2
   1d6b4:	e7e5      	b.n	1d682 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1d6b6:	f851 cb04 	ldr.w	ip, [r1], #4
   1d6ba:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
   1d6be:	e7f2      	b.n	1d6a6 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
   1d6c0:	f811 4b01 	ldrb.w	r4, [r1], #1
   1d6c4:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1d6c8:	e7dd      	b.n	1d686 <memcpy+0x10>

0001d6ca <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1d6ca:	4603      	mov	r3, r0
{
   1d6cc:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   1d6ce:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1d6d0:	079c      	lsls	r4, r3, #30
   1d6d2:	d110      	bne.n	1d6f6 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1d6d4:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1d6d8:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1d6dc:	0894      	lsrs	r4, r2, #2
   1d6de:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   1d6e2:	42b3      	cmp	r3, r6
   1d6e4:	d10d      	bne.n	1d702 <memset+0x38>
   1d6e6:	f06f 0503 	mvn.w	r5, #3
   1d6ea:	fb05 2404 	mla	r4, r5, r4, r2
   1d6ee:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1d6f0:	42a3      	cmp	r3, r4
   1d6f2:	d109      	bne.n	1d708 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1d6f4:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1d6f6:	2a00      	cmp	r2, #0
   1d6f8:	d0fc      	beq.n	1d6f4 <memset+0x2a>
		*(d_byte++) = c_byte;
   1d6fa:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1d6fe:	3a01      	subs	r2, #1
   1d700:	e7e6      	b.n	1d6d0 <memset+0x6>
		*(d_word++) = c_word;
   1d702:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1d706:	e7ec      	b.n	1d6e2 <memset+0x18>
		*(d_byte++) = c_byte;
   1d708:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1d70c:	e7f0      	b.n	1d6f0 <memset+0x26>

0001d70e <_to_x>:
{
   1d70e:	4603      	mov	r3, r0
   1d710:	b5f0      	push	{r4, r5, r6, r7, lr}
		unsigned int d = n % base;
   1d712:	fbb1 f7f2 	udiv	r7, r1, r2
   1d716:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1d71a:	2d09      	cmp	r5, #9
   1d71c:	bf8c      	ite	hi
   1d71e:	2627      	movhi	r6, #39	; 0x27
   1d720:	2600      	movls	r6, #0
   1d722:	461c      	mov	r4, r3
   1d724:	3530      	adds	r5, #48	; 0x30
   1d726:	4435      	add	r5, r6
	} while (n);
   1d728:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1d72a:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
   1d72e:	d206      	bcs.n	1d73e <_to_x+0x30>
	*buf = 0;
   1d730:	2200      	movs	r2, #0
   1d732:	7022      	strb	r2, [r4, #0]
	len = buf - start;
   1d734:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
   1d736:	4283      	cmp	r3, r0
   1d738:	d804      	bhi.n	1d744 <_to_x+0x36>
}
   1d73a:	4620      	mov	r0, r4
   1d73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
   1d73e:	4639      	mov	r1, r7
   1d740:	4623      	mov	r3, r4
   1d742:	e7e6      	b.n	1d712 <_to_x+0x4>
		char tmp = *buf;
   1d744:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
   1d746:	7801      	ldrb	r1, [r0, #0]
   1d748:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
   1d74c:	f800 2b01 	strb.w	r2, [r0], #1
   1d750:	e7f1      	b.n	1d736 <_to_x+0x28>

0001d752 <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
   1d752:	2100      	movs	r1, #0
{
   1d754:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   1d756:	e9d0 6500 	ldrd	r6, r5, [r0]
   1d75a:	0872      	lsrs	r2, r6, #1
   1d75c:	f006 0301 	and.w	r3, r6, #1
   1d760:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   1d764:	189b      	adds	r3, r3, r2
   1d766:	ea4f 0455 	mov.w	r4, r5, lsr #1
   1d76a:	eb44 0101 	adc.w	r1, r4, r1
   1d76e:	e9c0 3100 	strd	r3, r1, [r0]
}
   1d772:	bd70      	pop	{r4, r5, r6, pc}

0001d774 <_ldiv5>:
{
   1d774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint64_t rem = *v, quot = 0U, q;
   1d778:	e9d0 3200 	ldrd	r3, r2, [r0]
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d77c:	2705      	movs	r7, #5
	rem += 2U;
   1d77e:	3302      	adds	r3, #2
   1d780:	f142 0200 	adc.w	r2, r2, #0
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d784:	fbb2 fef7 	udiv	lr, r2, r7
   1d788:	f04f 0c00 	mov.w	ip, #0
		rem -= q * 5U;
   1d78c:	fb07 f10e 	mul.w	r1, r7, lr
   1d790:	ebb3 060c 	subs.w	r6, r3, ip
   1d794:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
   1d798:	08f2      	lsrs	r2, r6, #3
   1d79a:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d79e:	fbb2 f1f7 	udiv	r1, r2, r7
   1d7a2:	00ca      	lsls	r2, r1, #3
		quot += q;
   1d7a4:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d7a8:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
   1d7ac:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
   1d7b0:	fba2 2307 	umull	r2, r3, r2, r7
   1d7b4:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d7b6:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
   1d7ba:	eb18 0403 	adds.w	r4, r8, r3
   1d7be:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
   1d7c2:	e9c0 4500 	strd	r4, r5, [r0]
}
   1d7c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001d7ca <_get_digit>:
	if (*digit_count > 0) {
   1d7ca:	680b      	ldr	r3, [r1, #0]
{
   1d7cc:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   1d7ce:	2b00      	cmp	r3, #0
   1d7d0:	dd10      	ble.n	1d7f4 <_get_digit+0x2a>
		*digit_count -= 1;
   1d7d2:	3b01      	subs	r3, #1
   1d7d4:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   1d7d6:	210a      	movs	r1, #10
   1d7d8:	6802      	ldr	r2, [r0, #0]
   1d7da:	6844      	ldr	r4, [r0, #4]
   1d7dc:	fba2 5601 	umull	r5, r6, r2, r1
   1d7e0:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   1d7e4:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   1d7e8:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   1d7ec:	0f31      	lsrs	r1, r6, #28
   1d7ee:	3130      	adds	r1, #48	; 0x30
}
   1d7f0:	4608      	mov	r0, r1
   1d7f2:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   1d7f4:	2130      	movs	r1, #48	; 0x30
   1d7f6:	e7fb      	b.n	1d7f0 <_get_digit+0x26>

0001d7f8 <_stdout_hook_default>:
}
   1d7f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d7fc:	4770      	bx	lr

0001d7fe <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   1d7fe:	684b      	ldr	r3, [r1, #4]
   1d800:	2b01      	cmp	r3, #1
   1d802:	dd07      	ble.n	1d814 <sprintf_out+0x16>
		*(p->ptr) = c;
   1d804:	680b      	ldr	r3, [r1, #0]
   1d806:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   1d808:	680b      	ldr	r3, [r1, #0]
   1d80a:	3301      	adds	r3, #1
   1d80c:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   1d80e:	684b      	ldr	r3, [r1, #4]
   1d810:	3b01      	subs	r3, #1
   1d812:	604b      	str	r3, [r1, #4]
}
   1d814:	2000      	movs	r0, #0
   1d816:	4770      	bx	lr

0001d818 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   1d818:	b508      	push	{r3, lr}
	net_if_init();
   1d81a:	f7f3 fbc5 	bl	10fa8 <net_if_init>
	net_if_post_init();
   1d81e:	f7f3 fbd7 	bl	10fd0 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   1d822:	2000      	movs	r0, #0
   1d824:	bd08      	pop	{r3, pc}

0001d826 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d826:	e8d0 0faf 	lda	r0, [r0]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1d82a:	4108      	asrs	r0, r1
}
   1d82c:	f000 0001 	and.w	r0, r0, #1
   1d830:	4770      	bx	lr

0001d832 <l2_flags_get>:
	if (!iface) {
   1d832:	b128      	cbz	r0, 1d840 <l2_flags_get+0xe>
	return iface->if_dev->l2;
   1d834:	6803      	ldr	r3, [r0, #0]
   1d836:	685b      	ldr	r3, [r3, #4]
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   1d838:	b113      	cbz	r3, 1d840 <l2_flags_get+0xe>
   1d83a:	68db      	ldr	r3, [r3, #12]
   1d83c:	b103      	cbz	r3, 1d840 <l2_flags_get+0xe>
		flags = net_if_l2(iface)->get_flags(iface);
   1d83e:	4718      	bx	r3
}
   1d840:	2000      	movs	r0, #0
   1d842:	4770      	bx	lr

0001d844 <net_if_up>:
{
   1d844:	b510      	push	{r4, lr}
   1d846:	4604      	mov	r4, r0
	return atomic_test_bit(iface->if_dev->flags, value);
   1d848:	6800      	ldr	r0, [r0, #0]
   1d84a:	2100      	movs	r1, #0
   1d84c:	300c      	adds	r0, #12
   1d84e:	f7ff ffea 	bl	1d826 <atomic_test_bit>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1d852:	b9d8      	cbnz	r0, 1d88c <net_if_up+0x48>
	     net_if_is_socket_offloaded(iface))) {
   1d854:	6823      	ldr	r3, [r4, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1d856:	7e9a      	ldrb	r2, [r3, #26]
   1d858:	b14a      	cbz	r2, 1d86e <net_if_up+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d85a:	330c      	adds	r3, #12
   1d85c:	e8d3 2fef 	ldaex	r2, [r3]
   1d860:	f042 0201 	orr.w	r2, r2, #1
   1d864:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1d868:	2900      	cmp	r1, #0
   1d86a:	d1f7      	bne.n	1d85c <net_if_up+0x18>
}
   1d86c:	bd10      	pop	{r4, pc}
	return iface->if_dev->l2;
   1d86e:	685b      	ldr	r3, [r3, #4]
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1d870:	b973      	cbnz	r3, 1d890 <net_if_up+0x4c>
   1d872:	6823      	ldr	r3, [r4, #0]
   1d874:	330c      	adds	r3, #12
   1d876:	e8d3 2fef 	ldaex	r2, [r3]
   1d87a:	f042 0201 	orr.w	r2, r2, #1
   1d87e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1d882:	2900      	cmp	r1, #0
   1d884:	d1f7      	bne.n	1d876 <net_if_up+0x32>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1d886:	4620      	mov	r0, r4
   1d888:	f7ff ffd3 	bl	1d832 <l2_flags_get>
		return 0;
   1d88c:	2000      	movs	r0, #0
   1d88e:	e7ed      	b.n	1d86c <net_if_up+0x28>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1d890:	689b      	ldr	r3, [r3, #8]
   1d892:	2b00      	cmp	r3, #0
   1d894:	d0ed      	beq.n	1d872 <net_if_up+0x2e>
	status = net_if_l2(iface)->enable(iface, true);
   1d896:	2101      	movs	r1, #1
   1d898:	4620      	mov	r0, r4
   1d89a:	4798      	blx	r3
	if (status < 0) {
   1d89c:	2800      	cmp	r0, #0
   1d89e:	dae8      	bge.n	1d872 <net_if_up+0x2e>
   1d8a0:	e7e4      	b.n	1d86c <net_if_up+0x28>

0001d8a2 <net_byte_to_hex>:
{
   1d8a2:	b570      	push	{r4, r5, r6, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1d8a4:	090e      	lsrs	r6, r1, #4
		if (i == 0 && !pad && !val) {
   1d8a6:	b1b3      	cbz	r3, 1d8d6 <net_byte_to_hex+0x34>
		if (val < 10) {
   1d8a8:	2e09      	cmp	r6, #9
			*ptr++ = (char) (val - 10 + base);
   1d8aa:	b274      	sxtb	r4, r6
   1d8ac:	bf86      	itte	hi
   1d8ae:	f1a2 030a 	subhi.w	r3, r2, #10
   1d8b2:	18e4      	addhi	r4, r4, r3
			*ptr++ = (char) (val + '0');
   1d8b4:	3430      	addls	r4, #48	; 0x30
   1d8b6:	1c45      	adds	r5, r0, #1
   1d8b8:	7004      	strb	r4, [r0, #0]
   1d8ba:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   1d8be:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   1d8c0:	b24b      	sxtb	r3, r1
   1d8c2:	bf83      	ittte	hi
   1d8c4:	3a0a      	subhi	r2, #10
   1d8c6:	189b      	addhi	r3, r3, r2
   1d8c8:	b2db      	uxtbhi	r3, r3
			*ptr++ = (char) (val + '0');
   1d8ca:	3330      	addls	r3, #48	; 0x30
   1d8cc:	702b      	strb	r3, [r5, #0]
	*ptr = '\0';
   1d8ce:	2300      	movs	r3, #0
   1d8d0:	706b      	strb	r3, [r5, #1]
   1d8d2:	1c68      	adds	r0, r5, #1
}
   1d8d4:	bd70      	pop	{r4, r5, r6, pc}
		if (i == 0 && !pad && !val) {
   1d8d6:	2e00      	cmp	r6, #0
   1d8d8:	d1e6      	bne.n	1d8a8 <net_byte_to_hex+0x6>
   1d8da:	4605      	mov	r5, r0
   1d8dc:	e7ed      	b.n	1d8ba <net_byte_to_hex+0x18>

0001d8de <z_impl_net_addr_pton>:
#endif /* CONFIG_USERSPACE */

int z_impl_net_addr_pton(sa_family_t family, const char *src,
			 void *dst)
{
	if (family == AF_INET) {
   1d8de:	2801      	cmp	r0, #1
{
   1d8e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d8e4:	460c      	mov	r4, r1
   1d8e6:	4616      	mov	r6, r2
	if (family == AF_INET) {
   1d8e8:	d128      	bne.n	1d93c <z_impl_net_addr_pton+0x5e>
		struct in_addr *addr = (struct in_addr *)dst;
		size_t i, len;

		len = strlen(src);
   1d8ea:	4608      	mov	r0, r1
   1d8ec:	f7ff fe88 	bl	1d600 <strlen>
		for (i = 0; i < len; i++) {
   1d8f0:	4623      	mov	r3, r4
   1d8f2:	4420      	add	r0, r4
   1d8f4:	4298      	cmp	r0, r3
   1d8f6:	d114      	bne.n	1d922 <z_impl_net_addr_pton+0x44>
			    src[i] != '.') {
				return -EINVAL;
			}
		}

		(void)memset(addr, 0, sizeof(struct in_addr));
   1d8f8:	4630      	mov	r0, r6
   1d8fa:	2204      	movs	r2, #4
   1d8fc:	2100      	movs	r1, #0
   1d8fe:	f7ff fee4 	bl	1d6ca <memset>

		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d902:	1e75      	subs	r5, r6, #1
   1d904:	3603      	adds	r6, #3
			char *endptr;

			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1d906:	4620      	mov	r0, r4
   1d908:	220a      	movs	r2, #10
   1d90a:	a901      	add	r1, sp, #4
   1d90c:	f7ff fd34 	bl	1d378 <strtol>

			src = ++endptr;
   1d910:	9c01      	ldr	r4, [sp, #4]
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1d912:	f805 0f01 	strb.w	r0, [r5, #1]!
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d916:	42b5      	cmp	r5, r6
			src = ++endptr;
   1d918:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d91c:	d1f3      	bne.n	1d906 <z_impl_net_addr_pton+0x28>
		}
	} else {
		return -EINVAL;
	}

	return 0;
   1d91e:	2000      	movs	r0, #0
   1d920:	e009      	b.n	1d936 <z_impl_net_addr_pton+0x58>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1d922:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d926:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1d92a:	2909      	cmp	r1, #9
   1d92c:	d9e2      	bls.n	1d8f4 <z_impl_net_addr_pton+0x16>
   1d92e:	2a2e      	cmp	r2, #46	; 0x2e
   1d930:	d0e0      	beq.n	1d8f4 <z_impl_net_addr_pton+0x16>
				return -EINVAL;
   1d932:	f06f 0015 	mvn.w	r0, #21
}
   1d936:	b003      	add	sp, #12
   1d938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (family == AF_INET6) {
   1d93c:	2802      	cmp	r0, #2
   1d93e:	d1f8      	bne.n	1d932 <z_impl_net_addr_pton+0x54>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1d940:	212e      	movs	r1, #46	; 0x2e
   1d942:	4620      	mov	r0, r4
   1d944:	f7ff fe41 	bl	1d5ca <strchr>
		if (*src == ':') {
   1d948:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1d94a:	2800      	cmp	r0, #0
   1d94c:	bf14      	ite	ne
   1d94e:	2706      	movne	r7, #6
   1d950:	2708      	moveq	r7, #8
		if (*src == ':') {
   1d952:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   1d954:	bf08      	it	eq
   1d956:	3401      	addeq	r4, #1
		len = strlen(src);
   1d958:	4620      	mov	r0, r4
   1d95a:	f7ff fe51 	bl	1d600 <strlen>
		for (i = 0; i < len; i++) {
   1d95e:	2300      	movs	r3, #0
   1d960:	4283      	cmp	r3, r0
   1d962:	db21      	blt.n	1d9a8 <z_impl_net_addr_pton+0xca>
		for (i = 0; i < expected_groups; i++) {
   1d964:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1d966:	46a9      	mov	r9, r5
			if (!src || *src == '\0') {
   1d968:	2c00      	cmp	r4, #0
   1d96a:	d0e2      	beq.n	1d932 <z_impl_net_addr_pton+0x54>
   1d96c:	7823      	ldrb	r3, [r4, #0]
   1d96e:	2b00      	cmp	r3, #0
   1d970:	d0df      	beq.n	1d932 <z_impl_net_addr_pton+0x54>
			if (*src != ':') {
   1d972:	2b3a      	cmp	r3, #58	; 0x3a
   1d974:	d02d      	beq.n	1d9d2 <z_impl_net_addr_pton+0xf4>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1d976:	2210      	movs	r2, #16
   1d978:	2100      	movs	r1, #0
   1d97a:	4620      	mov	r0, r4
   1d97c:	f7ff fcfc 	bl	1d378 <strtol>
   1d980:	2210      	movs	r2, #16
   1d982:	4680      	mov	r8, r0
   1d984:	2100      	movs	r1, #0
   1d986:	4620      	mov	r0, r4
   1d988:	f7ff fcf6 	bl	1d378 <strtol>
   1d98c:	f3c8 2807 	ubfx	r8, r8, #8, #8
   1d990:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
   1d994:	f826 8015 	strh.w	r8, [r6, r5, lsl #1]
				src = strchr(src, ':');
   1d998:	213a      	movs	r1, #58	; 0x3a
   1d99a:	4620      	mov	r0, r4
   1d99c:	f7ff fe15 	bl	1d5ca <strchr>
				if (src) {
   1d9a0:	4604      	mov	r4, r0
   1d9a2:	b178      	cbz	r0, 1d9c4 <z_impl_net_addr_pton+0xe6>
			src++;
   1d9a4:	3401      	adds	r4, #1
   1d9a6:	e010      	b.n	1d9ca <z_impl_net_addr_pton+0xec>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1d9a8:	5ce2      	ldrb	r2, [r4, r3]
   1d9aa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1d9ae:	290a      	cmp	r1, #10
   1d9b0:	d906      	bls.n	1d9c0 <z_impl_net_addr_pton+0xe2>
   1d9b2:	f022 0120 	bic.w	r1, r2, #32
   1d9b6:	3941      	subs	r1, #65	; 0x41
   1d9b8:	2905      	cmp	r1, #5
   1d9ba:	d901      	bls.n	1d9c0 <z_impl_net_addr_pton+0xe2>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1d9bc:	2a2e      	cmp	r2, #46	; 0x2e
   1d9be:	d1b8      	bne.n	1d932 <z_impl_net_addr_pton+0x54>
		for (i = 0; i < len; i++) {
   1d9c0:	3301      	adds	r3, #1
   1d9c2:	e7cd      	b.n	1d960 <z_impl_net_addr_pton+0x82>
					if (i < expected_groups - 1) {
   1d9c4:	1e7b      	subs	r3, r7, #1
   1d9c6:	42ab      	cmp	r3, r5
   1d9c8:	dcb3      	bgt.n	1d932 <z_impl_net_addr_pton+0x54>
		for (i = 0; i < expected_groups; i++) {
   1d9ca:	3501      	adds	r5, #1
   1d9cc:	42af      	cmp	r7, r5
   1d9ce:	dccb      	bgt.n	1d968 <z_impl_net_addr_pton+0x8a>
   1d9d0:	e013      	b.n	1d9fa <z_impl_net_addr_pton+0x11c>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   1d9d2:	eb06 0345 	add.w	r3, r6, r5, lsl #1
   1d9d6:	f806 9015 	strb.w	r9, [r6, r5, lsl #1]
   1d9da:	f883 9001 	strb.w	r9, [r3, #1]
			for (; i < expected_groups; i++) {
   1d9de:	3501      	adds	r5, #1
   1d9e0:	42af      	cmp	r7, r5
   1d9e2:	dcf6      	bgt.n	1d9d2 <z_impl_net_addr_pton+0xf4>
			tmp = strrchr(src, ':');
   1d9e4:	213a      	movs	r1, #58	; 0x3a
   1d9e6:	4620      	mov	r0, r4
   1d9e8:	f7ff fdfd 	bl	1d5e6 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1d9ec:	42a0      	cmp	r0, r4
   1d9ee:	d11f      	bne.n	1da30 <z_impl_net_addr_pton+0x152>
   1d9f0:	2f06      	cmp	r7, #6
   1d9f2:	d001      	beq.n	1d9f8 <z_impl_net_addr_pton+0x11a>
   1d9f4:	7863      	ldrb	r3, [r4, #1]
   1d9f6:	bb63      	cbnz	r3, 1da52 <z_impl_net_addr_pton+0x174>
				src++;
   1d9f8:	3401      	adds	r4, #1
		if (expected_groups == 6) {
   1d9fa:	2f06      	cmp	r7, #6
   1d9fc:	d18f      	bne.n	1d91e <z_impl_net_addr_pton+0x40>
			for (i = 0; i < 4; i++) {
   1d9fe:	2500      	movs	r5, #0
   1da00:	360c      	adds	r6, #12
				if (!src || !*src) {
   1da02:	2c00      	cmp	r4, #0
   1da04:	d095      	beq.n	1d932 <z_impl_net_addr_pton+0x54>
   1da06:	7823      	ldrb	r3, [r4, #0]
   1da08:	2b00      	cmp	r3, #0
   1da0a:	d092      	beq.n	1d932 <z_impl_net_addr_pton+0x54>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1da0c:	220a      	movs	r2, #10
   1da0e:	2100      	movs	r1, #0
   1da10:	4620      	mov	r0, r4
   1da12:	f7ff fcb1 	bl	1d378 <strtol>
				src = strchr(src, '.');
   1da16:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1da18:	f806 0b01 	strb.w	r0, [r6], #1
				src = strchr(src, '.');
   1da1c:	4620      	mov	r0, r4
   1da1e:	f7ff fdd4 	bl	1d5ca <strchr>
				if (src) {
   1da22:	4604      	mov	r4, r0
   1da24:	b1b8      	cbz	r0, 1da56 <z_impl_net_addr_pton+0x178>
					src++;
   1da26:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
   1da28:	3501      	adds	r5, #1
   1da2a:	2d04      	cmp	r5, #4
   1da2c:	d1e9      	bne.n	1da02 <z_impl_net_addr_pton+0x124>
   1da2e:	e776      	b.n	1d91e <z_impl_net_addr_pton+0x40>
			if (expected_groups == 6) {
   1da30:	2f06      	cmp	r7, #6
   1da32:	d100      	bne.n	1da36 <z_impl_net_addr_pton+0x158>
				tmp--;
   1da34:	3801      	subs	r0, #1
			i = expected_groups - 1;
   1da36:	1e7d      	subs	r5, r7, #1
   1da38:	3001      	adds	r0, #1
				if (*tmp == ':') {
   1da3a:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   1da3e:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   1da40:	bf08      	it	eq
   1da42:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
				if (i < 0) {
   1da46:	2d00      	cmp	r5, #0
   1da48:	f6ff af73 	blt.w	1d932 <z_impl_net_addr_pton+0x54>
			} while (tmp-- != src);
   1da4c:	42a0      	cmp	r0, r4
   1da4e:	d1f4      	bne.n	1da3a <z_impl_net_addr_pton+0x15c>
   1da50:	e7a8      	b.n	1d9a4 <z_impl_net_addr_pton+0xc6>
   1da52:	4620      	mov	r0, r4
   1da54:	e7ef      	b.n	1da36 <z_impl_net_addr_pton+0x158>
					if (i < 3) {
   1da56:	2d03      	cmp	r5, #3
   1da58:	f47f af6b 	bne.w	1d932 <z_impl_net_addr_pton+0x54>
   1da5c:	e7e4      	b.n	1da28 <z_impl_net_addr_pton+0x14a>

0001da5e <gpio_nrfx_write>:
{
   1da5e:	b510      	push	{r4, lr}
	return port->config->config_info;
   1da60:	6804      	ldr	r4, [r0, #0]
   1da62:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1da64:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1da66:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1da68:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1da6a:	69c0      	ldr	r0, [r0, #28]
   1da6c:	d103      	bne.n	1da76 <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   1da6e:	4058      	eors	r0, r3
    p_reg->OUT = value;
   1da70:	6060      	str	r0, [r4, #4]
}
   1da72:	2000      	movs	r0, #0
   1da74:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   1da76:	3300      	adds	r3, #0
   1da78:	f04f 0101 	mov.w	r1, #1
   1da7c:	bf18      	it	ne
   1da7e:	2301      	movne	r3, #1
   1da80:	40d0      	lsrs	r0, r2
   1da82:	f000 0001 	and.w	r0, r0, #1
   1da86:	4091      	lsls	r1, r2
   1da88:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   1da8a:	bf14      	ite	ne
   1da8c:	60a1      	strne	r1, [r4, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   1da8e:	60e1      	streq	r1, [r4, #12]
   1da90:	e7ef      	b.n	1da72 <gpio_nrfx_write+0x14>

0001da92 <gpio_nrfx_read>:
{
   1da92:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   1da94:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1da96:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1da98:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1da9a:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1da9c:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1da9e:	2901      	cmp	r1, #1
    return p_reg->DIR;
   1daa0:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   1daa2:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   1daa4:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1daa6:	ea80 0004 	eor.w	r0, r0, r4
   1daaa:	ea84 0405 	eor.w	r4, r4, r5
   1daae:	ea04 0406 	and.w	r4, r4, r6
   1dab2:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   1dab6:	bf1c      	itt	ne
   1dab8:	40d0      	lsrne	r0, r2
   1daba:	f000 0001 	andne.w	r0, r0, #1
   1dabe:	6018      	str	r0, [r3, #0]
}
   1dac0:	2000      	movs	r0, #0
   1dac2:	bd70      	pop	{r4, r5, r6, pc}

0001dac4 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1dac4:	6883      	ldr	r3, [r0, #8]
{
   1dac6:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   1dac8:	6818      	ldr	r0, [r3, #0]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   1daca:	b158      	cbz	r0, 1dae4 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1dacc:	2400      	movs	r4, #0
   1dace:	4281      	cmp	r1, r0
   1dad0:	d113      	bne.n	1dafa <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1dad2:	6808      	ldr	r0, [r1, #0]
   1dad4:	b95c      	cbnz	r4, 1daee <gpio_nrfx_manage_callback+0x2a>
   1dad6:	685c      	ldr	r4, [r3, #4]
	list->head = node;
   1dad8:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1dada:	42a1      	cmp	r1, r4
   1dadc:	d100      	bne.n	1dae0 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1dade:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1dae0:	2000      	movs	r0, #0
   1dae2:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1dae4:	b972      	cbnz	r2, 1db04 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1dae6:	2000      	movs	r0, #0
}
   1dae8:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1daea:	4628      	mov	r0, r5
   1daec:	e7ef      	b.n	1dace <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
   1daee:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1daf0:	6858      	ldr	r0, [r3, #4]
   1daf2:	4281      	cmp	r1, r0
	list->tail = node;
   1daf4:	bf08      	it	eq
   1daf6:	605c      	streq	r4, [r3, #4]
   1daf8:	e7f2      	b.n	1dae0 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1dafa:	6805      	ldr	r5, [r0, #0]
	return node->next;
   1dafc:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1dafe:	2d00      	cmp	r5, #0
   1db00:	d1f3      	bne.n	1daea <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1db02:	b13a      	cbz	r2, 1db14 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1db04:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   1db06:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1db08:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   1db0a:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   1db0c:	2800      	cmp	r0, #0
   1db0e:	d1ea      	bne.n	1dae6 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1db10:	6059      	str	r1, [r3, #4]
   1db12:	e7e9      	b.n	1dae8 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1db14:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1db18:	e7e6      	b.n	1dae8 <gpio_nrfx_manage_callback+0x24>

0001db1a <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1db1a:	2901      	cmp	r1, #1
{
   1db1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1db20:	bf18      	it	ne
   1db22:	b2d4      	uxtbne	r4, r2
{
   1db24:	4606      	mov	r6, r0
		to_pin   = pin;
   1db26:	bf12      	itee	ne
   1db28:	4625      	movne	r5, r4
		to_pin   = 31U;
   1db2a:	251f      	moveq	r5, #31
		from_pin = 0U;
   1db2c:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1db2e:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   1db32:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1db34:	42ac      	cmp	r4, r5
   1db36:	d902      	bls.n	1db3e <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   1db38:	2000      	movs	r0, #0
}
   1db3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1db3e:	68fb      	ldr	r3, [r7, #12]
   1db40:	fa08 f204 	lsl.w	r2, r8, r4
   1db44:	ea23 0302 	bic.w	r3, r3, r2
   1db48:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1db4a:	4621      	mov	r1, r4
   1db4c:	4630      	mov	r0, r6
   1db4e:	f7f3 fb47 	bl	111e0 <gpiote_pin_int_cfg>
		if (res != 0) {
   1db52:	2800      	cmp	r0, #0
   1db54:	d1f1      	bne.n	1db3a <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1db56:	3401      	adds	r4, #1
   1db58:	b2e4      	uxtb	r4, r4
   1db5a:	e7eb      	b.n	1db34 <gpio_nrfx_pin_disable_callback+0x1a>

0001db5c <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1db5c:	2901      	cmp	r1, #1
{
   1db5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1db62:	bf18      	it	ne
   1db64:	b2d4      	uxtbne	r4, r2
{
   1db66:	4606      	mov	r6, r0
		to_pin   = pin;
   1db68:	bf12      	itee	ne
   1db6a:	4625      	movne	r5, r4
		to_pin   = 31U;
   1db6c:	251f      	moveq	r5, #31
		from_pin = 0U;
   1db6e:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1db70:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   1db74:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1db76:	42ac      	cmp	r4, r5
   1db78:	d902      	bls.n	1db80 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   1db7a:	2000      	movs	r0, #0
}
   1db7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1db80:	68fb      	ldr	r3, [r7, #12]
   1db82:	fa08 f204 	lsl.w	r2, r8, r4
   1db86:	4313      	orrs	r3, r2
   1db88:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1db8a:	4621      	mov	r1, r4
   1db8c:	4630      	mov	r0, r6
   1db8e:	f7f3 fb27 	bl	111e0 <gpiote_pin_int_cfg>
		if (res != 0) {
   1db92:	2800      	cmp	r0, #0
   1db94:	d1f2      	bne.n	1db7c <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1db96:	3401      	adds	r4, #1
   1db98:	b2e4      	uxtb	r4, r4
   1db9a:	e7ec      	b.n	1db76 <gpio_nrfx_pin_enable_callback+0x1a>

0001db9c <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   1db9c:	6882      	ldr	r2, [r0, #8]
	return dev->config->config_info;
   1db9e:	6803      	ldr	r3, [r0, #0]
	if (data->int_driven->disable_tx_irq &&
   1dba0:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   1dba2:	689b      	ldr	r3, [r3, #8]
	if (data->int_driven->disable_tx_irq &&
   1dba4:	7b91      	ldrb	r1, [r2, #14]
	return config->uarte_regs;
   1dba6:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   1dba8:	b159      	cbz	r1, 1dbc2 <uarte_nrfx_isr_int+0x26>
   1dbaa:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1dbae:	b141      	cbz	r1, 1dbc2 <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   1dbb0:	f44f 7180 	mov.w	r1, #256	; 0x100
   1dbb4:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dbb8:	2101      	movs	r1, #1
   1dbba:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   1dbbc:	2300      	movs	r3, #0
   1dbbe:	7393      	strb	r3, [r2, #14]
		return;
   1dbc0:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dbc2:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1dbc6:	b111      	cbz	r1, 1dbce <uarte_nrfx_isr_int+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dbc8:	2100      	movs	r1, #0
   1dbca:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1dbce:	6813      	ldr	r3, [r2, #0]
   1dbd0:	b10b      	cbz	r3, 1dbd6 <uarte_nrfx_isr_int+0x3a>
		data->int_driven->cb(data->int_driven->cb_data);
   1dbd2:	6850      	ldr	r0, [r2, #4]
   1dbd4:	4718      	bx	r3
}
   1dbd6:	4770      	bx	lr

0001dbd8 <uarte_nrfx_config_get>:
{
   1dbd8:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1dbda:	6882      	ldr	r2, [r0, #8]
   1dbdc:	e892 0003 	ldmia.w	r2, {r0, r1}
   1dbe0:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1dbe4:	2000      	movs	r0, #0
   1dbe6:	4770      	bx	lr

0001dbe8 <uarte_nrfx_err_check>:
	return dev->config->config_info;
   1dbe8:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1dbea:	689b      	ldr	r3, [r3, #8]
   1dbec:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1dbee:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1dbf2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1dbf6:	4770      	bx	lr

0001dbf8 <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   1dbf8:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1dbfa:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   1dbfc:	689b      	ldr	r3, [r3, #8]
   1dbfe:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dc00:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1dc04:	b138      	cbz	r0, 1dc16 <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   1dc06:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dc08:	2000      	movs	r0, #0
   1dc0a:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dc0c:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dc0e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dc12:	601a      	str	r2, [r3, #0]
	return 0;
   1dc14:	4770      	bx	lr
		return -1;
   1dc16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1dc1a:	4770      	bx	lr

0001dc1c <uarte_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dc1c:	2200      	movs	r2, #0
	return dev->config->config_info;
   1dc1e:	6803      	ldr	r3, [r0, #0]
{
   1dc20:	b082      	sub	sp, #8
	return config->uarte_regs;
   1dc22:	689b      	ldr	r3, [r3, #8]
{
   1dc24:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   1dc28:	681b      	ldr	r3, [r3, #0]
   1dc2a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1dc2e:	f10d 0207 	add.w	r2, sp, #7
   1dc32:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1dc36:	2201      	movs	r2, #1
   1dc38:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dc3c:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dc3e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1dc42:	2900      	cmp	r1, #0
   1dc44:	d0fb      	beq.n	1dc3e <uarte_nrfx_poll_out+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dc46:	60da      	str	r2, [r3, #12]
}
   1dc48:	b002      	add	sp, #8
   1dc4a:	4770      	bx	lr

0001dc4c <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   1dc4c:	6803      	ldr	r3, [r0, #0]
{
   1dc4e:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   1dc50:	689b      	ldr	r3, [r3, #8]
   1dc52:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dc54:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1dc58:	b1bb      	cbz	r3, 1dc8a <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1dc5a:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   1dc5c:	68ab      	ldr	r3, [r5, #8]
   1dc5e:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dc60:	2300      	movs	r3, #0
   1dc62:	4290      	cmp	r0, r2
   1dc64:	bfa8      	it	ge
   1dc66:	4610      	movge	r0, r2
   1dc68:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   1dc6c:	68aa      	ldr	r2, [r5, #8]
   1dc6e:	4283      	cmp	r3, r0
   1dc70:	6892      	ldr	r2, [r2, #8]
   1dc72:	db06      	blt.n	1dc82 <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dc74:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1dc76:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1dc7a:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dc7e:	60a3      	str	r3, [r4, #8]
}
   1dc80:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1dc82:	5cce      	ldrb	r6, [r1, r3]
   1dc84:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   1dc86:	3301      	adds	r3, #1
   1dc88:	e7f0      	b.n	1dc6c <uarte_nrfx_fifo_fill+0x20>
		return 0;
   1dc8a:	4618      	mov	r0, r3
   1dc8c:	e7f8      	b.n	1dc80 <uarte_nrfx_fifo_fill+0x34>

0001dc8e <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   1dc8e:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1dc90:	689b      	ldr	r3, [r3, #8]
   1dc92:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dc94:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1dc98:	b143      	cbz	r3, 1dcac <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1dc9a:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dc9c:	2000      	movs	r0, #0
   1dc9e:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dca2:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   1dca4:	7b1b      	ldrb	r3, [r3, #12]
   1dca6:	700b      	strb	r3, [r1, #0]
   1dca8:	6010      	str	r0, [r2, #0]
   1dcaa:	4770      	bx	lr
	int num_rx = 0;
   1dcac:	4618      	mov	r0, r3
}
   1dcae:	4770      	bx	lr

0001dcb0 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   1dcb0:	2100      	movs	r1, #0
	return dev->config->config_info;
   1dcb2:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   1dcb4:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   1dcb6:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   1dcb8:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   1dcba:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   1dcbc:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   1dcbe:	f44f 7280 	mov.w	r2, #256	; 0x100
   1dcc2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1dcc6:	4770      	bx	lr

0001dcc8 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1dcc8:	2201      	movs	r2, #1
   1dcca:	6883      	ldr	r3, [r0, #8]
   1dccc:	689b      	ldr	r3, [r3, #8]
   1dcce:	739a      	strb	r2, [r3, #14]
}
   1dcd0:	4770      	bx	lr

0001dcd2 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   1dcd2:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1dcd4:	689b      	ldr	r3, [r3, #8]
   1dcd6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dcd8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   1dcdc:	b118      	cbz	r0, 1dce6 <uarte_nrfx_irq_tx_ready_complete+0x14>
    return p_reg->INTENSET & mask;
   1dcde:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   1dce2:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   1dce6:	4770      	bx	lr

0001dce8 <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   1dce8:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1dcea:	689b      	ldr	r3, [r3, #8]
   1dcec:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dcee:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1dcf2:	3000      	adds	r0, #0
   1dcf4:	bf18      	it	ne
   1dcf6:	2001      	movne	r0, #1
   1dcf8:	4770      	bx	lr

0001dcfa <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   1dcfa:	2210      	movs	r2, #16
	return dev->config->config_info;
   1dcfc:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1dcfe:	689b      	ldr	r3, [r3, #8]
   1dd00:	681b      	ldr	r3, [r3, #0]
   1dd02:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1dd06:	4770      	bx	lr

0001dd08 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   1dd08:	2210      	movs	r2, #16
	return dev->config->config_info;
   1dd0a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1dd0c:	689b      	ldr	r3, [r3, #8]
   1dd0e:	681b      	ldr	r3, [r3, #0]
   1dd10:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1dd14:	4770      	bx	lr

0001dd16 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1dd16:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   1dd1a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1dd1c:	689b      	ldr	r3, [r3, #8]
   1dd1e:	681b      	ldr	r3, [r3, #0]
   1dd20:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1dd24:	4770      	bx	lr

0001dd26 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1dd26:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   1dd2a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1dd2c:	689b      	ldr	r3, [r3, #8]
   1dd2e:	681b      	ldr	r3, [r3, #0]
   1dd30:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1dd34:	4770      	bx	lr

0001dd36 <uarte_nrfx_irq_update>:
}
   1dd36:	2001      	movs	r0, #1
   1dd38:	4770      	bx	lr

0001dd3a <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1dd3a:	6883      	ldr	r3, [r0, #8]
   1dd3c:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   1dd3e:	e9c3 1200 	strd	r1, r2, [r3]
}
   1dd42:	4770      	bx	lr

0001dd44 <uarte_nrfx_irq_is_pending>:
{
   1dd44:	b508      	push	{r3, lr}
	return dev->config->config_info;
   1dd46:	6803      	ldr	r3, [r0, #0]
{
   1dd48:	4602      	mov	r2, r0
	return config->uarte_regs;
   1dd4a:	689b      	ldr	r3, [r3, #8]
   1dd4c:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   1dd4e:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   1dd52:	05db      	lsls	r3, r3, #23
   1dd54:	d405      	bmi.n	1dd62 <uarte_nrfx_irq_is_pending+0x1e>
   1dd56:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   1dd5a:	f010 0010 	ands.w	r0, r0, #16
   1dd5e:	d106      	bne.n	1dd6e <uarte_nrfx_irq_is_pending+0x2a>
}
   1dd60:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1dd62:	f7ff ffb6 	bl	1dcd2 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   1dd66:	2800      	cmp	r0, #0
   1dd68:	d0f5      	beq.n	1dd56 <uarte_nrfx_irq_is_pending+0x12>
		||
   1dd6a:	2001      	movs	r0, #1
   1dd6c:	e7f8      	b.n	1dd60 <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   1dd6e:	4610      	mov	r0, r2
   1dd70:	f7ff ffba 	bl	1dce8 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1dd74:	3000      	adds	r0, #0
   1dd76:	bf18      	it	ne
   1dd78:	2001      	movne	r0, #1
   1dd7a:	e7f1      	b.n	1dd60 <uarte_nrfx_irq_is_pending+0x1c>

0001dd7c <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   1dd7c:	2000      	movs	r0, #0
   1dd7e:	4770      	bx	lr

0001dd80 <entropy_cc310_rng_get_entropy>:
{
   1dd80:	b513      	push	{r0, r1, r4, lr}
   1dd82:	4614      	mov	r4, r2
   1dd84:	4608      	mov	r0, r1
	res = spm_request_random_number(buffer, length, &olen);
   1dd86:	aa01      	add	r2, sp, #4
   1dd88:	4621      	mov	r1, r4
   1dd8a:	f7ea f931 	bl	7ff0 <spm_request_random_number>
	if (olen != length) {
   1dd8e:	9b01      	ldr	r3, [sp, #4]
   1dd90:	429c      	cmp	r4, r3
}
   1dd92:	bf18      	it	ne
   1dd94:	f06f 0015 	mvnne.w	r0, #21
   1dd98:	b002      	add	sp, #8
   1dd9a:	bd10      	pop	{r4, pc}

0001dd9c <z_errno>:
   1dd9c:	f7fd b90a 	b.w	1afb4 <z_impl_z_errno>

0001dda0 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1dda0:	4668      	mov	r0, sp
   1dda2:	f020 0107 	bic.w	r1, r0, #7
   1dda6:	468d      	mov	sp, r1
   1dda8:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   1ddaa:	f7f7 f81b 	bl	14de4 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1ddae:	f7f1 fdc1 	bl	f934 <_arch_isr_direct_pm>
   1ddb2:	f7f1 fd01 	bl	f7b8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1ddb6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1ddba:	4685      	mov	sp, r0
   1ddbc:	4770      	bx	lr

0001ddbe <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1ddbe:	4668      	mov	r0, sp
   1ddc0:	f020 0107 	bic.w	r1, r0, #7
   1ddc4:	468d      	mov	sp, r1
   1ddc6:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   1ddc8:	f7f7 fc10 	bl	155ec <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1ddcc:	f7f1 fdb2 	bl	f934 <_arch_isr_direct_pm>
   1ddd0:	f7f1 fcf2 	bl	f7b8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1ddd4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1ddd8:	4685      	mov	sp, r0
   1ddda:	4770      	bx	lr

0001dddc <trace_task_create>:
{
   1dddc:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   1ddde:	201d      	movs	r0, #29
   1dde0:	2200      	movs	r2, #0
   1dde2:	2106      	movs	r1, #6
   1dde4:	f7f1 fd8e 	bl	f904 <z_arm_irq_priority_set>
}
   1dde8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   1ddec:	201d      	movs	r0, #29
   1ddee:	f7f1 bd79 	b.w	f8e4 <arch_irq_enable>

0001ddf2 <read_task_create>:
{
   1ddf2:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   1ddf4:	201c      	movs	r0, #28
   1ddf6:	2200      	movs	r2, #0
   1ddf8:	2106      	movs	r1, #6
   1ddfa:	f7f1 fd83 	bl	f904 <z_arm_irq_priority_set>
}
   1ddfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   1de02:	201c      	movs	r0, #28
   1de04:	f7f1 bd6e 	b.w	f8e4 <arch_irq_enable>

0001de08 <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   1de08:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   1de0c:	bf18      	it	ne
   1de0e:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   1de10:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   1de12:	bf48      	it	mi
   1de14:	f043 0308 	orrmi.w	r3, r3, #8
}
   1de18:	4618      	mov	r0, r3
   1de1a:	4770      	bx	lr

0001de1c <z_to_nrf_family>:
	switch (z_family) {
   1de1c:	2803      	cmp	r0, #3
   1de1e:	d00f      	beq.n	1de40 <z_to_nrf_family+0x24>
   1de20:	d808      	bhi.n	1de34 <z_to_nrf_family+0x18>
   1de22:	2801      	cmp	r0, #1
   1de24:	d00e      	beq.n	1de44 <z_to_nrf_family+0x28>
   1de26:	2802      	cmp	r0, #2
		return -EAFNOSUPPORT;
   1de28:	bf08      	it	eq
   1de2a:	200a      	moveq	r0, #10
   1de2c:	bf18      	it	ne
   1de2e:	f06f 002e 	mvnne.w	r0, #46	; 0x2e
   1de32:	4770      	bx	lr
	switch (z_family) {
   1de34:	2866      	cmp	r0, #102	; 0x66
   1de36:	d006      	beq.n	1de46 <z_to_nrf_family+0x2a>
   1de38:	2867      	cmp	r0, #103	; 0x67
		return -EAFNOSUPPORT;
   1de3a:	bf08      	it	eq
   1de3c:	2001      	moveq	r0, #1
   1de3e:	e7f5      	b.n	1de2c <z_to_nrf_family+0x10>
		return NRF_AF_PACKET;
   1de40:	2005      	movs	r0, #5
   1de42:	4770      	bx	lr
		return NRF_AF_INET;
   1de44:	2002      	movs	r0, #2
}
   1de46:	4770      	bx	lr

0001de48 <z_to_nrf_protocol>:
	switch (proto) {
   1de48:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   1de4c:	d01d      	beq.n	1de8a <z_to_nrf_protocol+0x42>
   1de4e:	dc08      	bgt.n	1de62 <z_to_nrf_protocol+0x1a>
   1de50:	2806      	cmp	r0, #6
   1de52:	d01d      	beq.n	1de90 <z_to_nrf_protocol+0x48>
   1de54:	2811      	cmp	r0, #17
   1de56:	d01d      	beq.n	1de94 <z_to_nrf_protocol+0x4c>
   1de58:	2800      	cmp	r0, #0
		return -EPROTONOSUPPORT;
   1de5a:	bf18      	it	ne
   1de5c:	f06f 002a 	mvnne.w	r0, #42	; 0x2a
   1de60:	4770      	bx	lr
	switch (proto) {
   1de62:	f240 2301 	movw	r3, #513	; 0x201
   1de66:	4298      	cmp	r0, r3
   1de68:	d015      	beq.n	1de96 <z_to_nrf_protocol+0x4e>
   1de6a:	dc06      	bgt.n	1de7a <z_to_nrf_protocol+0x32>
   1de6c:	f240 1311 	movw	r3, #273	; 0x111
   1de70:	4298      	cmp	r0, r3
		return -EPROTONOSUPPORT;
   1de72:	bf08      	it	eq
   1de74:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   1de78:	e7ef      	b.n	1de5a <z_to_nrf_protocol+0x12>
	switch (proto) {
   1de7a:	f240 2302 	movw	r3, #514	; 0x202
   1de7e:	4298      	cmp	r0, r3
   1de80:	d009      	beq.n	1de96 <z_to_nrf_protocol+0x4e>
   1de82:	f240 2303 	movw	r3, #515	; 0x203
   1de86:	4298      	cmp	r0, r3
   1de88:	e7e7      	b.n	1de5a <z_to_nrf_protocol+0x12>
		return NRF_SPROTO_TLS1v2;
   1de8a:	f44f 7082 	mov.w	r0, #260	; 0x104
   1de8e:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   1de90:	2001      	movs	r0, #1
   1de92:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   1de94:	2002      	movs	r0, #2
}
   1de96:	4770      	bx	lr

0001de98 <nrf91_bsdlib_socket_offload_init>:
}
   1de98:	2000      	movs	r0, #0
   1de9a:	4770      	bx	lr

0001de9c <z_errno>:
   1de9c:	f7fd b88a 	b.w	1afb4 <z_impl_z_errno>

0001dea0 <nrf91_socket_offload_freeaddrinfo>:
{
   1dea0:	b538      	push	{r3, r4, r5, lr}
   1dea2:	4604      	mov	r4, r0
	while (next != NULL) {
   1dea4:	b904      	cbnz	r4, 1dea8 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   1dea6:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   1dea8:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   1deaa:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   1deac:	f000 fd35 	bl	1e91a <k_free>
		k_free(this);
   1deb0:	4620      	mov	r0, r4
   1deb2:	f000 fd32 	bl	1e91a <k_free>
		next = next->ai_next;
   1deb6:	462c      	mov	r4, r5
   1deb8:	e7f4      	b.n	1dea4 <nrf91_socket_offload_freeaddrinfo+0x4>

0001deba <z_to_nrf_addrinfo_hints>:
{
   1deba:	b538      	push	{r3, r4, r5, lr}
   1debc:	460c      	mov	r4, r1
   1debe:	4605      	mov	r5, r0
	memset(nrf_out, 0, sizeof(struct nrf_addrinfo));
   1dec0:	2220      	movs	r2, #32
   1dec2:	2100      	movs	r1, #0
   1dec4:	4620      	mov	r0, r4
   1dec6:	f7ff fc00 	bl	1d6ca <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   1deca:	2300      	movs	r3, #0
   1decc:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1dece:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   1ded0:	2b03      	cmp	r3, #3
   1ded2:	d003      	beq.n	1dedc <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   1ded4:	2b04      	cmp	r3, #4
   1ded6:	bf08      	it	eq
   1ded8:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1dedc:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   1dede:	88a8      	ldrh	r0, [r5, #4]
   1dee0:	f7ff ff9c 	bl	1de1c <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1dee4:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
   1dee8:	d00b      	beq.n	1df02 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   1deea:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1deec:	68e8      	ldr	r0, [r5, #12]
   1deee:	f7ff ffab 	bl	1de48 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1def2:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1def6:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1def8:	d003      	beq.n	1df02 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   1defa:	69a8      	ldr	r0, [r5, #24]
   1defc:	b108      	cbz	r0, 1df02 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   1defe:	61a0      	str	r0, [r4, #24]
	return 0;
   1df00:	2000      	movs	r0, #0
}
   1df02:	bd38      	pop	{r3, r4, r5, pc}

0001df04 <nrf91_socket_offload_send>:
{
   1df04:	b570      	push	{r4, r5, r6, lr}
   1df06:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1df08:	4618      	mov	r0, r3
{
   1df0a:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1df0c:	f7ff ff7c 	bl	1de08 <z_to_nrf_flags>
   1df10:	462a      	mov	r2, r5
   1df12:	4603      	mov	r3, r0
   1df14:	4620      	mov	r0, r4
}
   1df16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1df1a:	f7f9 b98b 	b.w	17234 <nrf_send>

0001df1e <nrf91_socket_offload_recv>:
{
   1df1e:	b570      	push	{r4, r5, r6, lr}
   1df20:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1df22:	4618      	mov	r0, r3
{
   1df24:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1df26:	f7ff ff6f 	bl	1de08 <z_to_nrf_flags>
   1df2a:	462a      	mov	r2, r5
   1df2c:	4603      	mov	r3, r0
   1df2e:	4620      	mov	r0, r4
}
   1df30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1df34:	f7f9 b9b4 	b.w	172a0 <nrf_recv>

0001df38 <nrf91_socket_offload_getsockopt>:
{
   1df38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1df3c:	461d      	mov	r5, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   1df3e:	2300      	movs	r3, #0
{
   1df40:	b086      	sub	sp, #24
   1df42:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   1df46:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1df4a:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   1df4e:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   1df52:	4607      	mov	r7, r0
   1df54:	460c      	mov	r4, r1
   1df56:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1df58:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   1df5a:	d002      	beq.n	1df62 <nrf91_socket_offload_getsockopt+0x2a>
   1df5c:	dc2b      	bgt.n	1dfb6 <nrf91_socket_offload_getsockopt+0x7e>
   1df5e:	2901      	cmp	r1, #1
   1df60:	d13d      	bne.n	1dfde <nrf91_socket_offload_getsockopt+0xa6>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1df62:	aa02      	add	r2, sp, #8
   1df64:	4631      	mov	r1, r6
   1df66:	4620      	mov	r0, r4
   1df68:	f7f3 fe58 	bl	11c1c <z_to_nrf_optname>
   1df6c:	2800      	cmp	r0, #0
   1df6e:	db36      	blt.n	1dfde <nrf91_socket_offload_getsockopt+0xa6>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   1df70:	2c01      	cmp	r4, #1
   1df72:	d128      	bne.n	1dfc6 <nrf91_socket_offload_getsockopt+0x8e>
   1df74:	2e14      	cmp	r6, #20
   1df76:	d126      	bne.n	1dfc6 <nrf91_socket_offload_getsockopt+0x8e>
		nrf_optlen = sizeof(struct nrf_timeval);
   1df78:	2308      	movs	r3, #8
   1df7a:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   1df7c:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1df7e:	aa03      	add	r2, sp, #12
   1df80:	9200      	str	r2, [sp, #0]
   1df82:	4638      	mov	r0, r7
   1df84:	9a02      	ldr	r2, [sp, #8]
   1df86:	4621      	mov	r1, r4
   1df88:	f7f9 fa0a 	bl	173a0 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   1df8c:	4607      	mov	r7, r0
   1df8e:	b970      	cbnz	r0, 1dfae <nrf91_socket_offload_getsockopt+0x76>
   1df90:	b16d      	cbz	r5, 1dfae <nrf91_socket_offload_getsockopt+0x76>
		*optlen = nrf_optlen;
   1df92:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   1df94:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   1df96:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   1df9a:	d108      	bne.n	1dfae <nrf91_socket_offload_getsockopt+0x76>
			if (optname == SO_ERROR) {
   1df9c:	2e04      	cmp	r6, #4
   1df9e:	d114      	bne.n	1dfca <nrf91_socket_offload_getsockopt+0x92>
				bsd_os_errno_set(*(int *)optval);
   1dfa0:	6828      	ldr	r0, [r5, #0]
   1dfa2:	f7f3 fd1f 	bl	119e4 <bsd_os_errno_set>
				*(int *)optval = errno;
   1dfa6:	f7ff ff79 	bl	1de9c <z_errno>
   1dfaa:	6803      	ldr	r3, [r0, #0]
   1dfac:	602b      	str	r3, [r5, #0]
}
   1dfae:	4638      	mov	r0, r7
   1dfb0:	b006      	add	sp, #24
   1dfb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1dfb6:	f240 2302 	movw	r3, #514	; 0x202
   1dfba:	4299      	cmp	r1, r3
   1dfbc:	d0d1      	beq.n	1df62 <nrf91_socket_offload_getsockopt+0x2a>
   1dfbe:	f240 2303 	movw	r3, #515	; 0x203
   1dfc2:	4299      	cmp	r1, r3
   1dfc4:	e7cc      	b.n	1df60 <nrf91_socket_offload_getsockopt+0x28>
   1dfc6:	462b      	mov	r3, r5
   1dfc8:	e7d9      	b.n	1df7e <nrf91_socket_offload_getsockopt+0x46>
			} else if (optname == SO_RCVTIMEO) {
   1dfca:	2e14      	cmp	r6, #20
   1dfcc:	d1ef      	bne.n	1dfae <nrf91_socket_offload_getsockopt+0x76>
				((struct timeval *)optval)->tv_sec =
   1dfce:	9b04      	ldr	r3, [sp, #16]
   1dfd0:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   1dfd2:	9b05      	ldr	r3, [sp, #20]
   1dfd4:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   1dfd6:	2308      	movs	r3, #8
   1dfd8:	f8c8 3000 	str.w	r3, [r8]
   1dfdc:	e7e7      	b.n	1dfae <nrf91_socket_offload_getsockopt+0x76>
	errno = ENOPROTOOPT;
   1dfde:	f7ff ff5d 	bl	1de9c <z_errno>
   1dfe2:	232a      	movs	r3, #42	; 0x2a
	return retval;
   1dfe4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	errno = ENOPROTOOPT;
   1dfe8:	6003      	str	r3, [r0, #0]
	return retval;
   1dfea:	e7e0      	b.n	1dfae <nrf91_socket_offload_getsockopt+0x76>

0001dfec <nrf91_socket_offload_poll>:
{
   1dfec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dfee:	b091      	sub	sp, #68	; 0x44
   1dff0:	4605      	mov	r5, r0
   1dff2:	460c      	mov	r4, r1
   1dff4:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   1dff6:	2100      	movs	r1, #0
   1dff8:	2240      	movs	r2, #64	; 0x40
   1dffa:	4668      	mov	r0, sp
   1dffc:	f7ff fb65 	bl	1d6ca <memset>
	for (int i = 0; i < nfds; i++) {
   1e000:	466a      	mov	r2, sp
   1e002:	2100      	movs	r1, #0
		if (fds[i].events & POLLIN) {
   1e004:	1d2f      	adds	r7, r5, #4
	for (int i = 0; i < nfds; i++) {
   1e006:	42a1      	cmp	r1, r4
   1e008:	db0c      	blt.n	1e024 <nrf91_socket_offload_poll+0x38>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   1e00a:	4632      	mov	r2, r6
   1e00c:	4621      	mov	r1, r4
   1e00e:	4668      	mov	r0, sp
   1e010:	f7f9 f9e6 	bl	173e0 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   1e014:	2200      	movs	r2, #0
   1e016:	462b      	mov	r3, r5
		fds[i].revents = 0;
   1e018:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   1e01a:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   1e01c:	42a2      	cmp	r2, r4
   1e01e:	db1a      	blt.n	1e056 <nrf91_socket_offload_poll+0x6a>
}
   1e020:	b011      	add	sp, #68	; 0x44
   1e022:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   1e024:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   1e028:	f837 0031 	ldrh.w	r0, [r7, r1, lsl #3]
		tmp[i].handle = fds[i].fd;
   1e02c:	6013      	str	r3, [r2, #0]
		if (fds[i].events & POLLIN) {
   1e02e:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   1e030:	bf48      	it	mi
   1e032:	8893      	ldrhmi	r3, [r2, #4]
	for (int i = 0; i < nfds; i++) {
   1e034:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   1e038:	bf44      	itt	mi
   1e03a:	f043 0301 	orrmi.w	r3, r3, #1
   1e03e:	8093      	strhmi	r3, [r2, #4]
		if (fds[i].events & POLLOUT) {
   1e040:	0743      	lsls	r3, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   1e042:	bf48      	it	mi
   1e044:	8893      	ldrhmi	r3, [r2, #4]
   1e046:	f102 0208 	add.w	r2, r2, #8
   1e04a:	bf44      	itt	mi
   1e04c:	f043 0302 	orrmi.w	r3, r3, #2
   1e050:	f822 3c04 	strhmi.w	r3, [r2, #-4]
   1e054:	e7d7      	b.n	1e006 <nrf91_socket_offload_poll+0x1a>
		if (tmp[i].returned & NRF_POLLIN) {
   1e056:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   1e05a:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   1e05c:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   1e05e:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   1e060:	bf48      	it	mi
   1e062:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   1e064:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   1e066:	bf48      	it	mi
   1e068:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   1e06a:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   1e06e:	bf44      	itt	mi
   1e070:	f045 0504 	orrmi.w	r5, r5, #4
   1e074:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   1e076:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   1e078:	bf48      	it	mi
   1e07a:	88dd      	ldrhmi	r5, [r3, #6]
   1e07c:	f103 0308 	add.w	r3, r3, #8
   1e080:	bf44      	itt	mi
   1e082:	f045 0508 	orrmi.w	r5, r5, #8
   1e086:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   1e08a:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   1e08c:	bf42      	ittt	mi
   1e08e:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   1e092:	f045 0520 	orrmi.w	r5, r5, #32
   1e096:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   1e09a:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   1e09c:	bf42      	ittt	mi
   1e09e:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   1e0a2:	f041 0110 	orrmi.w	r1, r1, #16
   1e0a6:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   1e0aa:	e7b7      	b.n	1e01c <nrf91_socket_offload_poll+0x30>

0001e0ac <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   1e0ac:	f7f9 b924 	b.w	172f8 <nrf_listen>

0001e0b0 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   1e0b0:	f7f9 b896 	b.w	171e0 <nrf_close>

0001e0b4 <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   1e0b4:	2903      	cmp	r1, #3
{
   1e0b6:	b508      	push	{r3, lr}
	switch (cmd) {
   1e0b8:	d00b      	beq.n	1e0d2 <nrf91_socket_offload_fcntl+0x1e>
   1e0ba:	2904      	cmp	r1, #4
   1e0bc:	d111      	bne.n	1e0e2 <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   1e0be:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   1e0c0:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   1e0c4:	d10d      	bne.n	1e0e2 <nrf91_socket_offload_fcntl+0x2e>
}
   1e0c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1e0ca:	1392      	asrs	r2, r2, #14
   1e0cc:	2101      	movs	r1, #1
   1e0ce:	f7f9 b989 	b.w	173e4 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   1e0d2:	2200      	movs	r2, #0
   1e0d4:	2102      	movs	r1, #2
   1e0d6:	f7f9 f985 	bl	173e4 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1e0da:	0380      	lsls	r0, r0, #14
   1e0dc:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   1e0e0:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   1e0e2:	f7ff fedb 	bl	1de9c <z_errno>
   1e0e6:	2316      	movs	r3, #22
   1e0e8:	6003      	str	r3, [r0, #0]
	return retval;
   1e0ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e0ee:	e7f7      	b.n	1e0e0 <nrf91_socket_offload_fcntl+0x2c>

0001e0f0 <nrf91_socket_offload_recvfrom>:
{
   1e0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e0f2:	4605      	mov	r5, r0
   1e0f4:	b08d      	sub	sp, #52	; 0x34
   1e0f6:	4618      	mov	r0, r3
   1e0f8:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   1e0fc:	4617      	mov	r7, r2
	if (from == NULL) {
   1e0fe:	f7ff fe83 	bl	1de08 <z_to_nrf_flags>
   1e102:	4603      	mov	r3, r0
   1e104:	b94c      	cbnz	r4, 1e11a <nrf91_socket_offload_recvfrom+0x2a>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1e106:	4628      	mov	r0, r5
   1e108:	e9cd 4400 	strd	r4, r4, [sp]
   1e10c:	463a      	mov	r2, r7
   1e10e:	f7f9 f8ab 	bl	17268 <nrf_recvfrom>
   1e112:	4605      	mov	r5, r0
}
   1e114:	4628      	mov	r0, r5
   1e116:	b00d      	add	sp, #52	; 0x34
   1e118:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   1e11a:	2224      	movs	r2, #36	; 0x24
   1e11c:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1e11e:	aa02      	add	r2, sp, #8
   1e120:	9201      	str	r2, [sp, #4]
   1e122:	aa03      	add	r2, sp, #12
   1e124:	9200      	str	r2, [sp, #0]
   1e126:	4628      	mov	r0, r5
   1e128:	463a      	mov	r2, r7
   1e12a:	f7f9 f89d 	bl	17268 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   1e12e:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1e130:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   1e132:	2b02      	cmp	r3, #2
   1e134:	d109      	bne.n	1e14a <nrf91_socket_offload_recvfrom+0x5a>
	ptr->sin_port = nrf_in->sin_port;
   1e136:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1e13a:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1e13c:	2301      	movs	r3, #1
   1e13e:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e140:	9b06      	ldr	r3, [sp, #24]
   1e142:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   1e144:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   1e146:	6033      	str	r3, [r6, #0]
	return retval;
   1e148:	e7e4      	b.n	1e114 <nrf91_socket_offload_recvfrom+0x24>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   1e14a:	2b0a      	cmp	r3, #10
   1e14c:	d1e2      	bne.n	1e114 <nrf91_socket_offload_recvfrom+0x24>
	ptr->sin6_port = nrf_in->sin6_port;
   1e14e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	ptr->sin6_family = AF_INET6;
   1e152:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   1e154:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   1e156:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e158:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   1e15a:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e15e:	a907      	add	r1, sp, #28
   1e160:	f7ff fa89 	bl	1d676 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1e164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e166:	7523      	strb	r3, [r4, #20]
			*fromlen = sizeof(struct sockaddr_in6);
   1e168:	2318      	movs	r3, #24
   1e16a:	e7ec      	b.n	1e146 <nrf91_socket_offload_recvfrom+0x56>

0001e16c <nrf91_socket_offload_connect>:
{
   1e16c:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1e16e:	880b      	ldrh	r3, [r1, #0]
{
   1e170:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   1e172:	2b01      	cmp	r3, #1
{
   1e174:	4606      	mov	r6, r0
   1e176:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   1e178:	d10e      	bne.n	1e198 <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   1e17a:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e17c:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1e17e:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1e182:	2302      	movs	r3, #2
   1e184:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e186:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e188:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e18c:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   1e18e:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1e190:	f7f9 f8a0 	bl	172d4 <nrf_connect>
}
   1e194:	b00a      	add	sp, #40	; 0x28
   1e196:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1e198:	2b02      	cmp	r3, #2
   1e19a:	d112      	bne.n	1e1c2 <nrf91_socket_offload_connect+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   1e19c:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e19e:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1e1a0:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1e1a4:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e1a6:	2210      	movs	r2, #16
   1e1a8:	3104      	adds	r1, #4
   1e1aa:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   1e1ac:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e1ae:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e1b2:	f7ff fa60 	bl	1d676 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e1b6:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1e1b8:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e1ba:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1e1bc:	a901      	add	r1, sp, #4
   1e1be:	4630      	mov	r0, r6
   1e1c0:	e7e6      	b.n	1e190 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   1e1c2:	f7f9 f887 	bl	172d4 <nrf_connect>
		if (retval < 0) {
   1e1c6:	2800      	cmp	r0, #0
   1e1c8:	dae4      	bge.n	1e194 <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   1e1ca:	f7ff fe67 	bl	1de9c <z_errno>
   1e1ce:	2323      	movs	r3, #35	; 0x23
   1e1d0:	6003      	str	r3, [r0, #0]
   1e1d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e1d6:	e7dd      	b.n	1e194 <nrf91_socket_offload_connect+0x28>

0001e1d8 <nrf91_socket_offload_socket>:
{
   1e1d8:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   1e1da:	b280      	uxth	r0, r0
   1e1dc:	f7ff fe1e 	bl	1de1c <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1e1e0:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
	family = z_to_nrf_family(family);
   1e1e4:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   1e1e6:	d106      	bne.n	1e1f6 <nrf91_socket_offload_socket+0x1e>
		errno = EAFNOSUPPORT;
   1e1e8:	f7ff fe58 	bl	1de9c <z_errno>
   1e1ec:	232f      	movs	r3, #47	; 0x2f
		errno = EPROTONOSUPPORT;
   1e1ee:	6003      	str	r3, [r0, #0]
}
   1e1f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e1f4:	bd10      	pop	{r4, pc}
	switch (socktype) {
   1e1f6:	2903      	cmp	r1, #3
   1e1f8:	d003      	beq.n	1e202 <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   1e1fa:	2904      	cmp	r1, #4
   1e1fc:	bf08      	it	eq
   1e1fe:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   1e202:	4610      	mov	r0, r2
   1e204:	f7ff fe20 	bl	1de48 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   1e208:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	proto = z_to_nrf_protocol(proto);
   1e20c:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   1e20e:	d103      	bne.n	1e218 <nrf91_socket_offload_socket+0x40>
		errno = EPROTONOSUPPORT;
   1e210:	f7ff fe44 	bl	1de9c <z_errno>
   1e214:	232b      	movs	r3, #43	; 0x2b
   1e216:	e7ea      	b.n	1e1ee <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   1e218:	4620      	mov	r0, r4
}
   1e21a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   1e21e:	f7f8 bfcd 	b.w	171bc <nrf_socket>

0001e222 <nrf91_socket_offload_accept>:
{
   1e222:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   1e224:	2708      	movs	r7, #8
{
   1e226:	b085      	sub	sp, #20
   1e228:	460c      	mov	r4, r1
   1e22a:	4616      	mov	r6, r2
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   1e22c:	eb0d 0107 	add.w	r1, sp, r7
   1e230:	aa01      	add	r2, sp, #4
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   1e232:	9701      	str	r7, [sp, #4]
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   1e234:	f7f9 f870 	bl	17318 <nrf_accept>
	if (retval < 0) {
   1e238:	1e05      	subs	r5, r0, #0
   1e23a:	db23      	blt.n	1e284 <nrf91_socket_offload_accept+0x62>
	if (nrf_addr.sa_family == NRF_AF_INET) {
   1e23c:	9b03      	ldr	r3, [sp, #12]
   1e23e:	2b02      	cmp	r3, #2
   1e240:	d10a      	bne.n	1e258 <nrf91_socket_offload_accept+0x36>
	ptr->sin_port = nrf_in->sin_port;
   1e242:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		*addrlen = sizeof(struct sockaddr_in);
   1e246:	6037      	str	r7, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   1e248:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1e24a:	2301      	movs	r3, #1
   1e24c:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e24e:	9b05      	ldr	r3, [sp, #20]
   1e250:	6063      	str	r3, [r4, #4]
}
   1e252:	4628      	mov	r0, r5
   1e254:	b005      	add	sp, #20
   1e256:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (nrf_addr.sa_family == NRF_AF_INET6) {
   1e258:	2b0a      	cmp	r3, #10
   1e25a:	d10f      	bne.n	1e27c <nrf91_socket_offload_accept+0x5a>
		*addrlen = sizeof(struct sockaddr_in6);
   1e25c:	2318      	movs	r3, #24
   1e25e:	6033      	str	r3, [r6, #0]
	ptr->sin6_port = nrf_in->sin6_port;
   1e260:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	ptr->sin6_family = AF_INET6;
   1e264:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   1e266:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   1e268:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e26a:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   1e26c:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e270:	a906      	add	r1, sp, #24
   1e272:	f7ff fa00 	bl	1d676 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1e276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e278:	7523      	strb	r3, [r4, #20]
   1e27a:	e7ea      	b.n	1e252 <nrf91_socket_offload_accept+0x30>
	errno = ENOTSUP;
   1e27c:	f7ff fe0e 	bl	1de9c <z_errno>
   1e280:	2323      	movs	r3, #35	; 0x23
   1e282:	6003      	str	r3, [r0, #0]
		return -1;
   1e284:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1e288:	e7e3      	b.n	1e252 <nrf91_socket_offload_accept+0x30>

0001e28a <nrf91_socket_offload_getaddrinfo>:
{
   1e28a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e28e:	4614      	mov	r4, r2
   1e290:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   1e292:	2100      	movs	r1, #0
{
   1e294:	b093      	sub	sp, #76	; 0x4c
   1e296:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1e298:	2220      	movs	r2, #32
   1e29a:	a802      	add	r0, sp, #8
{
   1e29c:	4698      	mov	r8, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1e29e:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1e2a0:	f7ff fa13 	bl	1d6ca <memset>
	if (hints != NULL) {
   1e2a4:	b194      	cbz	r4, 1e2cc <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   1e2a6:	a902      	add	r1, sp, #8
   1e2a8:	4620      	mov	r0, r4
   1e2aa:	f7ff fe06 	bl	1deba <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   1e2ae:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
   1e2b2:	f000 80bf 	beq.w	1e434 <nrf91_socket_offload_getaddrinfo+0x1aa>
		} else if (error == -EAFNOSUPPORT) {
   1e2b6:	302f      	adds	r0, #47	; 0x2f
   1e2b8:	f000 80bf 	beq.w	1e43a <nrf91_socket_offload_getaddrinfo+0x1b0>
		if (hints->ai_next != NULL) {
   1e2bc:	69e0      	ldr	r0, [r4, #28]
   1e2be:	b120      	cbz	r0, 1e2ca <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   1e2c0:	ac0a      	add	r4, sp, #40	; 0x28
   1e2c2:	4621      	mov	r1, r4
   1e2c4:	f7ff fdf9 	bl	1deba <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   1e2c8:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   1e2ca:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   1e2cc:	4631      	mov	r1, r6
   1e2ce:	4628      	mov	r0, r5
   1e2d0:	ab01      	add	r3, sp, #4
   1e2d2:	4622      	mov	r2, r4
   1e2d4:	f7f9 f880 	bl	173d8 <nrf_getaddrinfo>
	*res = NULL;
   1e2d8:	2700      	movs	r7, #0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   1e2da:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   1e2dc:	f8c8 7000 	str.w	r7, [r8]
		return AF_INET6;
   1e2e0:	f04f 0902 	mov.w	r9, #2
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1e2e4:	4605      	mov	r5, r0
   1e2e6:	2800      	cmp	r0, #0
   1e2e8:	d04a      	beq.n	1e380 <nrf91_socket_offload_getaddrinfo+0xf6>
		nrf91_socket_offload_freeaddrinfo(*res);
   1e2ea:	f8d8 0000 	ldr.w	r0, [r8]
   1e2ee:	f7ff fdd7 	bl	1dea0 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   1e2f2:	2300      	movs	r3, #0
   1e2f4:	f8c8 3000 	str.w	r3, [r8]
   1e2f8:	e044      	b.n	1e384 <nrf91_socket_offload_getaddrinfo+0xfa>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   1e2fa:	2020      	movs	r0, #32
   1e2fc:	f7fd f8a8 	bl	1b450 <k_malloc>
		if (next_z_res == NULL) {
   1e300:	4604      	mov	r4, r0
   1e302:	2800      	cmp	r0, #0
   1e304:	f000 8091 	beq.w	1e42a <nrf91_socket_offload_getaddrinfo+0x1a0>
	family = nrf_to_z_family(nrf_in->ai_family);
   1e308:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1e30a:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   1e30c:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   1e30e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   1e312:	6005      	str	r5, [r0, #0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1e314:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   1e316:	d03c      	beq.n	1e392 <nrf91_socket_offload_getaddrinfo+0x108>
   1e318:	dc09      	bgt.n	1e32e <nrf91_socket_offload_getaddrinfo+0xa4>
   1e31a:	2a01      	cmp	r2, #1
   1e31c:	d03b      	beq.n	1e396 <nrf91_socket_offload_getaddrinfo+0x10c>
   1e31e:	2a02      	cmp	r2, #2
   1e320:	d03b      	beq.n	1e39a <nrf91_socket_offload_getaddrinfo+0x110>
			k_free(next_z_res);
   1e322:	4620      	mov	r0, r4
   1e324:	f000 faf9 	bl	1e91a <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   1e328:	f06f 0508 	mvn.w	r5, #8
   1e32c:	e7dd      	b.n	1e2ea <nrf91_socket_offload_getaddrinfo+0x60>
	switch (nrf_family) {
   1e32e:	2a0a      	cmp	r2, #10
   1e330:	d035      	beq.n	1e39e <nrf91_socket_offload_getaddrinfo+0x114>
   1e332:	2a66      	cmp	r2, #102	; 0x66
   1e334:	d1f5      	bne.n	1e322 <nrf91_socket_offload_getaddrinfo+0x98>
		return AF_LTE;
   1e336:	4613      	mov	r3, r2
	z_out->ai_family = family;
   1e338:	6063      	str	r3, [r4, #4]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1e33a:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   1e33c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1e340:	d04e      	beq.n	1e3e0 <nrf91_socket_offload_getaddrinfo+0x156>
   1e342:	dc2e      	bgt.n	1e3a2 <nrf91_socket_offload_getaddrinfo+0x118>
   1e344:	2b01      	cmp	r3, #1
   1e346:	d050      	beq.n	1e3ea <nrf91_socket_offload_getaddrinfo+0x160>
   1e348:	2b02      	cmp	r3, #2
   1e34a:	d04c      	beq.n	1e3e6 <nrf91_socket_offload_getaddrinfo+0x15c>
   1e34c:	2b00      	cmp	r3, #0
   1e34e:	d130      	bne.n	1e3b2 <nrf91_socket_offload_getaddrinfo+0x128>
	if (nrf_in->ai_family == NRF_AF_INET) {
   1e350:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1e352:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   1e354:	d14b      	bne.n	1e3ee <nrf91_socket_offload_getaddrinfo+0x164>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   1e356:	2008      	movs	r0, #8
   1e358:	f7fd f87a 	bl	1b450 <k_malloc>
   1e35c:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   1e35e:	2800      	cmp	r0, #0
   1e360:	d060      	beq.n	1e424 <nrf91_socket_offload_getaddrinfo+0x19a>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   1e362:	2308      	movs	r3, #8
   1e364:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   1e366:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   1e368:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e36a:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   1e36c:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   1e36e:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e370:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   1e372:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   1e374:	2f00      	cmp	r7, #0
   1e376:	d15b      	bne.n	1e430 <nrf91_socket_offload_getaddrinfo+0x1a6>
			*res = next_z_res;
   1e378:	f8c8 4000 	str.w	r4, [r8]
		next_nrf_res = next_nrf_res->ai_next;
   1e37c:	4627      	mov	r7, r4
   1e37e:	69f6      	ldr	r6, [r6, #28]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1e380:	2e00      	cmp	r6, #0
   1e382:	d1ba      	bne.n	1e2fa <nrf91_socket_offload_getaddrinfo+0x70>
	nrf_freeaddrinfo(nrf_res);
   1e384:	9801      	ldr	r0, [sp, #4]
   1e386:	f7f9 f829 	bl	173dc <nrf_freeaddrinfo>
}
   1e38a:	4628      	mov	r0, r5
   1e38c:	b013      	add	sp, #76	; 0x4c
   1e38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return AF_PACKET;
   1e392:	2303      	movs	r3, #3
   1e394:	e7d0      	b.n	1e338 <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_LOCAL;
   1e396:	2367      	movs	r3, #103	; 0x67
   1e398:	e7ce      	b.n	1e338 <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_INET;
   1e39a:	2301      	movs	r3, #1
   1e39c:	e7cc      	b.n	1e338 <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_INET6;
   1e39e:	2302      	movs	r3, #2
   1e3a0:	e7ca      	b.n	1e338 <nrf91_socket_offload_getaddrinfo+0xae>
	switch (proto) {
   1e3a2:	f240 2101 	movw	r1, #513	; 0x201
   1e3a6:	428b      	cmp	r3, r1
   1e3a8:	d0d2      	beq.n	1e350 <nrf91_socket_offload_getaddrinfo+0xc6>
   1e3aa:	dc0d      	bgt.n	1e3c8 <nrf91_socket_offload_getaddrinfo+0x13e>
   1e3ac:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1e3b0:	d013      	beq.n	1e3da <nrf91_socket_offload_getaddrinfo+0x150>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1e3b2:	f06f 032a 	mvn.w	r3, #42	; 0x2a
   1e3b6:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   1e3b8:	2300      	movs	r3, #0
   1e3ba:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   1e3bc:	4620      	mov	r0, r4
   1e3be:	f000 faac 	bl	1e91a <k_free>
			retval = DNS_EAI_SOCKTYPE;
   1e3c2:	f06f 0506 	mvn.w	r5, #6
   1e3c6:	e790      	b.n	1e2ea <nrf91_socket_offload_getaddrinfo+0x60>
	switch (proto) {
   1e3c8:	f240 2102 	movw	r1, #514	; 0x202
   1e3cc:	428b      	cmp	r3, r1
   1e3ce:	d0bf      	beq.n	1e350 <nrf91_socket_offload_getaddrinfo+0xc6>
   1e3d0:	f240 2103 	movw	r1, #515	; 0x203
   1e3d4:	428b      	cmp	r3, r1
   1e3d6:	d0bb      	beq.n	1e350 <nrf91_socket_offload_getaddrinfo+0xc6>
   1e3d8:	e7eb      	b.n	1e3b2 <nrf91_socket_offload_getaddrinfo+0x128>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1e3da:	f240 1311 	movw	r3, #273	; 0x111
   1e3de:	e7b7      	b.n	1e350 <nrf91_socket_offload_getaddrinfo+0xc6>
   1e3e0:	f44f 7381 	mov.w	r3, #258	; 0x102
   1e3e4:	e7b4      	b.n	1e350 <nrf91_socket_offload_getaddrinfo+0xc6>
   1e3e6:	2311      	movs	r3, #17
   1e3e8:	e7b2      	b.n	1e350 <nrf91_socket_offload_getaddrinfo+0xc6>
   1e3ea:	2306      	movs	r3, #6
   1e3ec:	e7b0      	b.n	1e350 <nrf91_socket_offload_getaddrinfo+0xc6>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   1e3ee:	2a0a      	cmp	r2, #10
   1e3f0:	d1e4      	bne.n	1e3bc <nrf91_socket_offload_getaddrinfo+0x132>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1e3f2:	2018      	movs	r0, #24
   1e3f4:	f7fd f82c 	bl	1b450 <k_malloc>
   1e3f8:	4682      	mov	sl, r0
   1e3fa:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   1e3fc:	b190      	cbz	r0, 1e424 <nrf91_socket_offload_getaddrinfo+0x19a>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1e3fe:	2318      	movs	r3, #24
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e400:	2210      	movs	r2, #16
			(const struct nrf_sockaddr_in6 *)nrf_in->ai_addr);
   1e402:	f8d6 b014 	ldr.w	fp, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1e406:	6123      	str	r3, [r4, #16]
	ptr->sin6_port = nrf_in->sin6_port;
   1e408:	f8bb 3008 	ldrh.w	r3, [fp, #8]
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e40c:	eb0b 0102 	add.w	r1, fp, r2
	ptr->sin6_port = nrf_in->sin6_port;
   1e410:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   1e412:	f820 9b04 	strh.w	r9, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e416:	f7ff f92e 	bl	1d676 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1e41a:	f8db 3020 	ldr.w	r3, [fp, #32]
   1e41e:	f88a 3014 	strb.w	r3, [sl, #20]
		} else if (error == -EAFNOSUPPORT) {
   1e422:	e7a7      	b.n	1e374 <nrf91_socket_offload_getaddrinfo+0xea>
			k_free(next_z_res);
   1e424:	4620      	mov	r0, r4
   1e426:	f000 fa78 	bl	1e91a <k_free>
			retval = DNS_EAI_MEMORY;
   1e42a:	f06f 0509 	mvn.w	r5, #9
   1e42e:	e75c      	b.n	1e2ea <nrf91_socket_offload_getaddrinfo+0x60>
			latest_z_res->ai_next = next_z_res;
   1e430:	61fc      	str	r4, [r7, #28]
   1e432:	e7a3      	b.n	1e37c <nrf91_socket_offload_getaddrinfo+0xf2>
			return DNS_EAI_SOCKTYPE;
   1e434:	f06f 0506 	mvn.w	r5, #6
   1e438:	e7a7      	b.n	1e38a <nrf91_socket_offload_getaddrinfo+0x100>
			return DNS_EAI_ADDRFAMILY;
   1e43a:	f06f 0508 	mvn.w	r5, #8
   1e43e:	e7a4      	b.n	1e38a <nrf91_socket_offload_getaddrinfo+0x100>

0001e440 <nrf91_socket_offload_setsockopt>:
{
   1e440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   1e444:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   1e448:	b086      	sub	sp, #24
   1e44a:	4680      	mov	r8, r0
   1e44c:	460c      	mov	r4, r1
   1e44e:	4617      	mov	r7, r2
   1e450:	461d      	mov	r5, r3
   1e452:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   1e454:	d002      	beq.n	1e45c <nrf91_socket_offload_setsockopt+0x1c>
   1e456:	dc1c      	bgt.n	1e492 <nrf91_socket_offload_setsockopt+0x52>
   1e458:	2901      	cmp	r1, #1
   1e45a:	d122      	bne.n	1e4a2 <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1e45c:	aa03      	add	r2, sp, #12
   1e45e:	4639      	mov	r1, r7
   1e460:	4620      	mov	r0, r4
   1e462:	f7f3 fbdb 	bl	11c1c <z_to_nrf_optname>
   1e466:	2800      	cmp	r0, #0
   1e468:	db1b      	blt.n	1e4a2 <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   1e46a:	2c01      	cmp	r4, #1
   1e46c:	d107      	bne.n	1e47e <nrf91_socket_offload_setsockopt+0x3e>
   1e46e:	2f14      	cmp	r7, #20
   1e470:	d105      	bne.n	1e47e <nrf91_socket_offload_setsockopt+0x3e>
		nrf_optlen = sizeof(struct nrf_timeval);
   1e472:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   1e474:	682b      	ldr	r3, [r5, #0]
   1e476:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1e478:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   1e47a:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1e47c:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1e47e:	9600      	str	r6, [sp, #0]
   1e480:	462b      	mov	r3, r5
   1e482:	9a03      	ldr	r2, [sp, #12]
   1e484:	4621      	mov	r1, r4
   1e486:	4640      	mov	r0, r8
   1e488:	f7f8 ff6e 	bl	17368 <nrf_setsockopt>
}
   1e48c:	b006      	add	sp, #24
   1e48e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1e492:	f240 2302 	movw	r3, #514	; 0x202
   1e496:	4299      	cmp	r1, r3
   1e498:	d0e0      	beq.n	1e45c <nrf91_socket_offload_setsockopt+0x1c>
   1e49a:	f240 2303 	movw	r3, #515	; 0x203
   1e49e:	4299      	cmp	r1, r3
   1e4a0:	e7db      	b.n	1e45a <nrf91_socket_offload_setsockopt+0x1a>
	errno = ENOPROTOOPT;
   1e4a2:	f7ff fcfb 	bl	1de9c <z_errno>
   1e4a6:	232a      	movs	r3, #42	; 0x2a
   1e4a8:	6003      	str	r3, [r0, #0]
   1e4aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e4ae:	e7ed      	b.n	1e48c <nrf91_socket_offload_setsockopt+0x4c>

0001e4b0 <nrf91_socket_offload_sendto>:
{
   1e4b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e4b4:	b08d      	sub	sp, #52	; 0x34
   1e4b6:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1e4b8:	4605      	mov	r5, r0
   1e4ba:	460e      	mov	r6, r1
   1e4bc:	4617      	mov	r7, r2
   1e4be:	4698      	mov	r8, r3
	if (to == NULL) {
   1e4c0:	b96c      	cbnz	r4, 1e4de <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1e4c2:	4618      	mov	r0, r3
   1e4c4:	f7ff fca0 	bl	1de08 <z_to_nrf_flags>
   1e4c8:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1e4cc:	4603      	mov	r3, r0
   1e4ce:	463a      	mov	r2, r7
   1e4d0:	4631      	mov	r1, r6
   1e4d2:	4628      	mov	r0, r5
   1e4d4:	f7f8 fe92 	bl	171fc <nrf_sendto>
}
   1e4d8:	b00d      	add	sp, #52	; 0x34
   1e4da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   1e4de:	8823      	ldrh	r3, [r4, #0]
   1e4e0:	2b01      	cmp	r3, #1
   1e4e2:	d110      	bne.n	1e506 <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   1e4e4:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e4e6:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   1e4e8:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   1e4ec:	2302      	movs	r3, #2
   1e4ee:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e4f0:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1e4f2:	4640      	mov	r0, r8
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e4f4:	f88d 100c 	strb.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e4f8:	9306      	str	r3, [sp, #24]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1e4fa:	f7ff fc85 	bl	1de08 <z_to_nrf_flags>
   1e4fe:	9101      	str	r1, [sp, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1e500:	ab03      	add	r3, sp, #12
   1e502:	9300      	str	r3, [sp, #0]
   1e504:	e7e2      	b.n	1e4cc <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   1e506:	2b02      	cmp	r3, #2
   1e508:	d115      	bne.n	1e536 <nrf91_socket_offload_sendto+0x86>
	nrf_out->sin6_port = ptr->sin6_port;
   1e50a:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e50c:	f04f 0924 	mov.w	r9, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1e510:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin6_family = NRF_AF_INET6;
   1e514:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e516:	2210      	movs	r2, #16
   1e518:	1d21      	adds	r1, r4, #4
   1e51a:	a807      	add	r0, sp, #28
	nrf_out->sin6_family = NRF_AF_INET6;
   1e51c:	9304      	str	r3, [sp, #16]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e51e:	f88d 900c 	strb.w	r9, [sp, #12]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e522:	f7ff f8a8 	bl	1d676 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e526:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1e528:	4640      	mov	r0, r8
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e52a:	930b      	str	r3, [sp, #44]	; 0x2c
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1e52c:	f7ff fc6c 	bl	1de08 <z_to_nrf_flags>
   1e530:	f8cd 9004 	str.w	r9, [sp, #4]
   1e534:	e7e4      	b.n	1e500 <nrf91_socket_offload_sendto+0x50>
	errno = ENOTSUP;
   1e536:	f7ff fcb1 	bl	1de9c <z_errno>
   1e53a:	2323      	movs	r3, #35	; 0x23
   1e53c:	6003      	str	r3, [r0, #0]
	return retval;
   1e53e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e542:	e7c9      	b.n	1e4d8 <nrf91_socket_offload_sendto+0x28>

0001e544 <nrf91_socket_offload_bind>:
{
   1e544:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1e546:	880b      	ldrh	r3, [r1, #0]
{
   1e548:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   1e54a:	2b01      	cmp	r3, #1
{
   1e54c:	4606      	mov	r6, r0
   1e54e:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   1e550:	d10e      	bne.n	1e570 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   1e552:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e554:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1e556:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1e55a:	2302      	movs	r3, #2
   1e55c:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e55e:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e560:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e564:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   1e566:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1e568:	f7f8 feec 	bl	17344 <nrf_bind>
}
   1e56c:	b00a      	add	sp, #40	; 0x28
   1e56e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1e570:	2b02      	cmp	r3, #2
   1e572:	d112      	bne.n	1e59a <nrf91_socket_offload_bind+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   1e574:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e576:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1e578:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1e57c:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e57e:	2210      	movs	r2, #16
   1e580:	3104      	adds	r1, #4
   1e582:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   1e584:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e586:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e58a:	f7ff f874 	bl	1d676 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e58e:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1e590:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e592:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1e594:	a901      	add	r1, sp, #4
   1e596:	4630      	mov	r0, r6
   1e598:	e7e6      	b.n	1e568 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   1e59a:	f7ff fc7f 	bl	1de9c <z_errno>
   1e59e:	2323      	movs	r3, #35	; 0x23
   1e5a0:	6003      	str	r3, [r0, #0]
   1e5a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5a6:	e7e1      	b.n	1e56c <nrf91_socket_offload_bind+0x28>

0001e5a8 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   1e5a8:	280d      	cmp	r0, #13
   1e5aa:	d004      	beq.n	1e5b6 <is_lfcr+0xe>
   1e5ac:	f1a0 030a 	sub.w	r3, r0, #10
   1e5b0:	4258      	negs	r0, r3
   1e5b2:	4158      	adcs	r0, r3
   1e5b4:	4770      	bx	lr
		return true;
   1e5b6:	2001      	movs	r0, #1
}
   1e5b8:	4770      	bx	lr

0001e5ba <skip_command_prefix>:
{
   1e5ba:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   1e5bc:	6802      	ldr	r2, [r0, #0]
{
   1e5be:	4601      	mov	r1, r0
	*cmd += sizeof("AT") - 1;
   1e5c0:	1c93      	adds	r3, r2, #2
   1e5c2:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   1e5c4:	7894      	ldrb	r4, [r2, #2]
   1e5c6:	4620      	mov	r0, r4
   1e5c8:	f7ff ffee 	bl	1e5a8 <is_lfcr>
   1e5cc:	b910      	cbnz	r0, 1e5d4 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e5ce:	b10c      	cbz	r4, 1e5d4 <skip_command_prefix+0x1a>
	(*cmd)++;
   1e5d0:	3203      	adds	r2, #3
   1e5d2:	600a      	str	r2, [r1, #0]
}
   1e5d4:	bd10      	pop	{r4, pc}

0001e5d6 <is_valid_notification_char>:
	return (int)((chr >= (int)'a' && chr <=
   1e5d6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1e5da:	2b19      	cmp	r3, #25
   1e5dc:	bf98      	it	ls
   1e5de:	3820      	subls	r0, #32
	if ((chr >= 'A') && (chr <= 'Z')) {
   1e5e0:	3841      	subs	r0, #65	; 0x41
   1e5e2:	b2c0      	uxtb	r0, r0
}
   1e5e4:	2819      	cmp	r0, #25
   1e5e6:	bf8c      	ite	hi
   1e5e8:	2000      	movhi	r0, #0
   1e5ea:	2001      	movls	r0, #1
   1e5ec:	4770      	bx	lr

0001e5ee <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   1e5ee:	b510      	push	{r4, lr}
   1e5f0:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   1e5f2:	f7ff f805 	bl	1d600 <strlen>
   1e5f6:	2801      	cmp	r0, #1
   1e5f8:	d91e      	bls.n	1e638 <is_command+0x4a>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   1e5fa:	7823      	ldrb	r3, [r4, #0]
   1e5fc:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1e600:	2a19      	cmp	r2, #25
   1e602:	bf98      	it	ls
   1e604:	3b20      	subls	r3, #32
   1e606:	2b41      	cmp	r3, #65	; 0x41
   1e608:	d116      	bne.n	1e638 <is_command+0x4a>
   1e60a:	7863      	ldrb	r3, [r4, #1]
   1e60c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1e610:	2a19      	cmp	r2, #25
   1e612:	bf98      	it	ls
   1e614:	3b20      	subls	r3, #32
   1e616:	2b54      	cmp	r3, #84	; 0x54
   1e618:	d10e      	bne.n	1e638 <is_command+0x4a>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1e61a:	78a2      	ldrb	r2, [r4, #2]
   1e61c:	2a25      	cmp	r2, #37	; 0x25
   1e61e:	d00d      	beq.n	1e63c <is_command+0x4e>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   1e620:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   1e624:	2b23      	cmp	r3, #35	; 0x23
   1e626:	d009      	beq.n	1e63c <is_command+0x4e>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1e628:	4610      	mov	r0, r2
   1e62a:	f7ff ffbd 	bl	1e5a8 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   1e62e:	b910      	cbnz	r0, 1e636 <is_command+0x48>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e630:	fab2 f082 	clz	r0, r2
   1e634:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   1e636:	bd10      	pop	{r4, pc}
		return false;
   1e638:	2000      	movs	r0, #0
   1e63a:	e7fc      	b.n	1e636 <is_command+0x48>
		return true;
   1e63c:	2001      	movs	r0, #1
   1e63e:	e7fa      	b.n	1e636 <is_command+0x48>

0001e640 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   1e640:	6813      	ldr	r3, [r2, #0]
   1e642:	f7f4 b83f 	b.w	126c4 <at_parser_max_params_from_str>

0001e646 <at_parser_cmd_type_get>:

enum at_cmd_type at_parser_cmd_type_get(const char *at_cmd)
{
   1e646:	b507      	push	{r0, r1, r2, lr}
   1e648:	9001      	str	r0, [sp, #4]
	enum at_cmd_type type;

	if (!is_command(at_cmd)) {
   1e64a:	f7ff ffd0 	bl	1e5ee <is_command>
   1e64e:	b178      	cbz	r0, 1e670 <at_parser_cmd_type_get+0x2a>
		return AT_CMD_TYPE_UNKNOWN;
	}

	skip_command_prefix(&at_cmd);
   1e650:	a801      	add	r0, sp, #4
   1e652:	f7ff ffb2 	bl	1e5ba <skip_command_prefix>

	while (is_valid_notification_char(*at_cmd)) {
   1e656:	9901      	ldr	r1, [sp, #4]
   1e658:	780a      	ldrb	r2, [r1, #0]
   1e65a:	4610      	mov	r0, r2
   1e65c:	f7ff ffbb 	bl	1e5d6 <is_valid_notification_char>
   1e660:	b948      	cbnz	r0, 1e676 <at_parser_cmd_type_get+0x30>
		at_cmd++;
	}

	if ((*at_cmd == AT_CMD_SEPARATOR) &&
   1e662:	2a3d      	cmp	r2, #61	; 0x3d
   1e664:	d114      	bne.n	1e690 <at_parser_cmd_type_get+0x4a>
   1e666:	784b      	ldrb	r3, [r1, #1]
	    (*(at_cmd + 1) == AT_CMD_READ_TEST_IDENTIFIER)) {
		type = AT_CMD_TYPE_TEST_COMMAND;
   1e668:	2b3f      	cmp	r3, #63	; 0x3f
   1e66a:	bf14      	ite	ne
   1e66c:	2001      	movne	r0, #1
   1e66e:	2003      	moveq	r0, #3
	} else {
		type = AT_CMD_TYPE_UNKNOWN;
	}

	return type;
}
   1e670:	b003      	add	sp, #12
   1e672:	f85d fb04 	ldr.w	pc, [sp], #4
		at_cmd++;
   1e676:	3101      	adds	r1, #1
   1e678:	9101      	str	r1, [sp, #4]
   1e67a:	e7ec      	b.n	1e656 <at_parser_cmd_type_get+0x10>
	} else if ((*at_cmd == AT_CMD_SEPARATOR) || is_lfcr(*at_cmd) ||
   1e67c:	4610      	mov	r0, r2
   1e67e:	f7ff ff93 	bl	1e5a8 <is_lfcr>
   1e682:	b918      	cbnz	r0, 1e68c <at_parser_cmd_type_get+0x46>
		return AT_CMD_TYPE_UNKNOWN;
   1e684:	fab2 f082 	clz	r0, r2
   1e688:	0940      	lsrs	r0, r0, #5
   1e68a:	e7f1      	b.n	1e670 <at_parser_cmd_type_get+0x2a>
		type = AT_CMD_TYPE_SET_COMMAND;
   1e68c:	2001      	movs	r0, #1
   1e68e:	e7ef      	b.n	1e670 <at_parser_cmd_type_get+0x2a>
	} else if (*at_cmd == AT_CMD_READ_TEST_IDENTIFIER) {
   1e690:	2a3f      	cmp	r2, #63	; 0x3f
   1e692:	d1f3      	bne.n	1e67c <at_parser_cmd_type_get+0x36>
		type = AT_CMD_TYPE_READ_COMMAND;
   1e694:	2002      	movs	r0, #2
   1e696:	e7eb      	b.n	1e670 <at_parser_cmd_type_get+0x2a>

0001e698 <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   1e698:	6803      	ldr	r3, [r0, #0]
   1e69a:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   1e69c:	bf83      	ittte	hi
   1e69e:	230c      	movhi	r3, #12
   1e6a0:	6840      	ldrhi	r0, [r0, #4]
   1e6a2:	fb03 0001 	mlahi	r0, r3, r1, r0
		return NULL;
   1e6a6:	2000      	movls	r0, #0
}
   1e6a8:	4770      	bx	lr

0001e6aa <at_param_size>:
/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
	__ASSERT(param != NULL, "Parameter cannot be NULL.");

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   1e6aa:	7803      	ldrb	r3, [r0, #0]
   1e6ac:	2b01      	cmp	r3, #1
   1e6ae:	d006      	beq.n	1e6be <at_param_size+0x14>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   1e6b0:	2b02      	cmp	r3, #2
   1e6b2:	d006      	beq.n	1e6c2 <at_param_size+0x18>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e6b4:	3b03      	subs	r3, #3
   1e6b6:	2b01      	cmp	r3, #1
   1e6b8:	d805      	bhi.n	1e6c6 <at_param_size+0x1c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   1e6ba:	6840      	ldr	r0, [r0, #4]
   1e6bc:	4770      	bx	lr
		return sizeof(u16_t);
   1e6be:	2002      	movs	r0, #2
   1e6c0:	4770      	bx	lr
		return sizeof(u32_t);
   1e6c2:	2004      	movs	r0, #4
   1e6c4:	4770      	bx	lr
	}

	return 0;
   1e6c6:	2000      	movs	r0, #0
}
   1e6c8:	4770      	bx	lr

0001e6ca <at_param_clear>:
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e6ca:	7803      	ldrb	r3, [r0, #0]
{
   1e6cc:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e6ce:	3b03      	subs	r3, #3
   1e6d0:	2b01      	cmp	r3, #1
{
   1e6d2:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e6d4:	d802      	bhi.n	1e6dc <at_param_clear+0x12>
		k_free(param->value.str_val);
   1e6d6:	6880      	ldr	r0, [r0, #8]
   1e6d8:	f000 f91f 	bl	1e91a <k_free>
	param->value.int_val = 0;
   1e6dc:	2300      	movs	r3, #0
   1e6de:	60a3      	str	r3, [r4, #8]
}
   1e6e0:	bd10      	pop	{r4, pc}

0001e6e2 <at_params_list_init>:

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   1e6e2:	b538      	push	{r3, r4, r5, lr}
   1e6e4:	460d      	mov	r5, r1
	if (list == NULL) {
   1e6e6:	4604      	mov	r4, r0
   1e6e8:	b140      	cbz	r0, 1e6fc <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   1e6ea:	210c      	movs	r1, #12
   1e6ec:	4628      	mov	r0, r5
   1e6ee:	f000 f919 	bl	1e924 <k_calloc>
   1e6f2:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   1e6f4:	b128      	cbz	r0, 1e702 <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   1e6f6:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   1e6f8:	6025      	str	r5, [r4, #0]
}
   1e6fa:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1e6fc:	f06f 0015 	mvn.w	r0, #21
   1e700:	e7fb      	b.n	1e6fa <at_params_list_init+0x18>
		return -ENOMEM;
   1e702:	f06f 000b 	mvn.w	r0, #11
   1e706:	e7f8      	b.n	1e6fa <at_params_list_init+0x18>

0001e708 <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   1e708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (list == NULL || list->params == NULL) {
   1e70a:	4605      	mov	r5, r0
   1e70c:	b130      	cbz	r0, 1e71c <at_params_list_clear+0x14>
   1e70e:	6843      	ldr	r3, [r0, #4]
   1e710:	b123      	cbz	r3, 1e71c <at_params_list_clear+0x14>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   1e712:	2400      	movs	r4, #0
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
   1e714:	270c      	movs	r7, #12
	for (size_t i = 0; i < list->param_count; ++i) {
   1e716:	682b      	ldr	r3, [r5, #0]
   1e718:	429c      	cmp	r4, r3
   1e71a:	d300      	bcc.n	1e71e <at_params_list_clear+0x16>
		at_param_init(&params[i]);
	}
}
   1e71c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		at_param_clear(&params[i]);
   1e71e:	686e      	ldr	r6, [r5, #4]
   1e720:	fb07 6604 	mla	r6, r7, r4, r6
   1e724:	4630      	mov	r0, r6
   1e726:	f7ff ffd0 	bl	1e6ca <at_param_clear>
	memset(param, 0, sizeof(struct at_param));
   1e72a:	220c      	movs	r2, #12
   1e72c:	2100      	movs	r1, #0
   1e72e:	4630      	mov	r0, r6
   1e730:	f7fe ffcb 	bl	1d6ca <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   1e734:	3401      	adds	r4, #1
   1e736:	e7ee      	b.n	1e716 <at_params_list_clear+0xe>

0001e738 <at_params_short_put>:
	list->params = NULL;
}

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   1e738:	b538      	push	{r3, r4, r5, lr}
   1e73a:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   1e73c:	b160      	cbz	r0, 1e758 <at_params_short_put+0x20>
   1e73e:	6843      	ldr	r3, [r0, #4]
   1e740:	b153      	cbz	r3, 1e758 <at_params_short_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e742:	f7ff ffa9 	bl	1e698 <at_params_get>

	if (param == NULL) {
   1e746:	4604      	mov	r4, r0
   1e748:	b130      	cbz	r0, 1e758 <at_params_short_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   1e74a:	f7ff ffbe 	bl	1e6ca <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_SHORT;
   1e74e:	2301      	movs	r3, #1
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
   1e750:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   1e752:	7023      	strb	r3, [r4, #0]
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   1e754:	60a5      	str	r5, [r4, #8]
}
   1e756:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1e758:	f06f 0015 	mvn.w	r0, #21
   1e75c:	e7fb      	b.n	1e756 <at_params_short_put+0x1e>

0001e75e <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   1e75e:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   1e760:	b160      	cbz	r0, 1e77c <at_params_empty_put+0x1e>
   1e762:	6843      	ldr	r3, [r0, #4]
   1e764:	b153      	cbz	r3, 1e77c <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e766:	f7ff ff97 	bl	1e698 <at_params_get>

	if (param == NULL) {
   1e76a:	4604      	mov	r4, r0
   1e76c:	b130      	cbz	r0, 1e77c <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	at_param_clear(param);
   1e76e:	f7ff ffac 	bl	1e6ca <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   1e772:	2305      	movs	r3, #5
	param->value.int_val = 0;
   1e774:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   1e776:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   1e778:	60a0      	str	r0, [r4, #8]

	return 0;
}
   1e77a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1e77c:	f06f 0015 	mvn.w	r0, #21
   1e780:	e7fb      	b.n	1e77a <at_params_empty_put+0x1c>

0001e782 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   1e782:	b538      	push	{r3, r4, r5, lr}
   1e784:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   1e786:	b160      	cbz	r0, 1e7a2 <at_params_int_put+0x20>
   1e788:	6843      	ldr	r3, [r0, #4]
   1e78a:	b153      	cbz	r3, 1e7a2 <at_params_int_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e78c:	f7ff ff84 	bl	1e698 <at_params_get>

	if (param == NULL) {
   1e790:	4604      	mov	r4, r0
   1e792:	b130      	cbz	r0, 1e7a2 <at_params_int_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   1e794:	f7ff ff99 	bl	1e6ca <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   1e798:	2302      	movs	r3, #2
	param->value.int_val = value;
	return 0;
   1e79a:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   1e79c:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   1e79e:	60a5      	str	r5, [r4, #8]
}
   1e7a0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1e7a2:	f06f 0015 	mvn.w	r0, #21
   1e7a6:	e7fb      	b.n	1e7a0 <at_params_int_put+0x1e>

0001e7a8 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   1e7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e7aa:	4616      	mov	r6, r2
   1e7ac:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   1e7ae:	b1c0      	cbz	r0, 1e7e2 <at_params_string_put+0x3a>
   1e7b0:	6843      	ldr	r3, [r0, #4]
   1e7b2:	b1b3      	cbz	r3, 1e7e2 <at_params_string_put+0x3a>
   1e7b4:	b1aa      	cbz	r2, 1e7e2 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e7b6:	f7ff ff6f 	bl	1e698 <at_params_get>

	if (param == NULL) {
   1e7ba:	4604      	mov	r4, r0
   1e7bc:	b188      	cbz	r0, 1e7e2 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   1e7be:	1c68      	adds	r0, r5, #1
   1e7c0:	f7fc fe46 	bl	1b450 <k_malloc>

	if (param_value == NULL) {
   1e7c4:	4607      	mov	r7, r0
   1e7c6:	b178      	cbz	r0, 1e7e8 <at_params_string_put+0x40>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);
   1e7c8:	462a      	mov	r2, r5
   1e7ca:	4631      	mov	r1, r6
   1e7cc:	f7fe ff53 	bl	1d676 <memcpy>

	at_param_clear(param);
   1e7d0:	4620      	mov	r0, r4
   1e7d2:	f7ff ff7a 	bl	1e6ca <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   1e7d6:	2303      	movs	r3, #3
	param->value.str_val = param_value;

	return 0;
   1e7d8:	2000      	movs	r0, #0
	param->size = str_len;
   1e7da:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   1e7dc:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   1e7de:	60a7      	str	r7, [r4, #8]
}
   1e7e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1e7e2:	f06f 0015 	mvn.w	r0, #21
   1e7e6:	e7fb      	b.n	1e7e0 <at_params_string_put+0x38>
		return -ENOMEM;
   1e7e8:	f06f 000b 	mvn.w	r0, #11
   1e7ec:	e7f8      	b.n	1e7e0 <at_params_string_put+0x38>

0001e7ee <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const u32_t *array, size_t array_len)
{
   1e7ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e7f0:	4616      	mov	r6, r2
   1e7f2:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   1e7f4:	b1c0      	cbz	r0, 1e828 <at_params_array_put+0x3a>
   1e7f6:	6843      	ldr	r3, [r0, #4]
   1e7f8:	b1b3      	cbz	r3, 1e828 <at_params_array_put+0x3a>
   1e7fa:	b1aa      	cbz	r2, 1e828 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e7fc:	f7ff ff4c 	bl	1e698 <at_params_get>

	if (param == NULL) {
   1e800:	4604      	mov	r4, r0
   1e802:	b188      	cbz	r0, 1e828 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	u32_t *param_value = (u32_t *)k_malloc(array_len);
   1e804:	4628      	mov	r0, r5
   1e806:	f7fc fe23 	bl	1b450 <k_malloc>

	if (param_value == NULL) {
   1e80a:	4607      	mov	r7, r0
   1e80c:	b178      	cbz	r0, 1e82e <at_params_array_put+0x40>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);
   1e80e:	462a      	mov	r2, r5
   1e810:	4631      	mov	r1, r6
   1e812:	f7fe ff30 	bl	1d676 <memcpy>

	at_param_clear(param);
   1e816:	4620      	mov	r0, r4
   1e818:	f7ff ff57 	bl	1e6ca <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   1e81c:	2304      	movs	r3, #4
	param->value.array_val = param_value;

	return 0;
   1e81e:	2000      	movs	r0, #0
	param->size = array_len;
   1e820:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   1e822:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   1e824:	60a7      	str	r7, [r4, #8]
}
   1e826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1e828:	f06f 0015 	mvn.w	r0, #21
   1e82c:	e7fb      	b.n	1e826 <at_params_array_put+0x38>
		return -ENOMEM;
   1e82e:	f06f 000b 	mvn.w	r0, #11
   1e832:	e7f8      	b.n	1e826 <at_params_array_put+0x38>

0001e834 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			u16_t *value)
{
   1e834:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   1e836:	b160      	cbz	r0, 1e852 <at_params_short_get+0x1e>
   1e838:	6843      	ldr	r3, [r0, #4]
   1e83a:	b153      	cbz	r3, 1e852 <at_params_short_get+0x1e>
   1e83c:	b14a      	cbz	r2, 1e852 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e83e:	f7ff ff2b 	bl	1e698 <at_params_get>

	if (param == NULL) {
   1e842:	b130      	cbz	r0, 1e852 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   1e844:	7803      	ldrb	r3, [r0, #0]
   1e846:	2b01      	cmp	r3, #1
   1e848:	d103      	bne.n	1e852 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	*value = (u16_t)param->value.int_val;
   1e84a:	6883      	ldr	r3, [r0, #8]
	return 0;
   1e84c:	2000      	movs	r0, #0
	*value = (u16_t)param->value.int_val;
   1e84e:	8013      	strh	r3, [r2, #0]
}
   1e850:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1e852:	f06f 0015 	mvn.w	r0, #21
   1e856:	e7fb      	b.n	1e850 <at_params_short_get+0x1c>

0001e858 <at_params_string_get>:
	return 0;
}

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   1e858:	b570      	push	{r4, r5, r6, lr}
   1e85a:	4616      	mov	r6, r2
   1e85c:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   1e85e:	b1c0      	cbz	r0, 1e892 <at_params_string_get+0x3a>
   1e860:	6843      	ldr	r3, [r0, #4]
   1e862:	b1b3      	cbz	r3, 1e892 <at_params_string_get+0x3a>
   1e864:	b1aa      	cbz	r2, 1e892 <at_params_string_get+0x3a>
	    value == NULL || len == NULL) {
   1e866:	b1a4      	cbz	r4, 1e892 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e868:	f7ff ff16 	bl	1e698 <at_params_get>

	if (param == NULL) {
   1e86c:	4601      	mov	r1, r0
   1e86e:	b180      	cbz	r0, 1e892 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   1e870:	7803      	ldrb	r3, [r0, #0]
   1e872:	2b03      	cmp	r3, #3
   1e874:	d10d      	bne.n	1e892 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   1e876:	f7ff ff18 	bl	1e6aa <at_param_size>

	if (*len < param_len) {
   1e87a:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   1e87c:	4605      	mov	r5, r0
	if (*len < param_len) {
   1e87e:	4283      	cmp	r3, r0
   1e880:	d30a      	bcc.n	1e898 <at_params_string_get+0x40>
		return -ENOMEM;
	}

	memcpy(value, param->value.str_val, param_len);
   1e882:	4602      	mov	r2, r0
   1e884:	6889      	ldr	r1, [r1, #8]
   1e886:	4630      	mov	r0, r6
   1e888:	f7fe fef5 	bl	1d676 <memcpy>
	*len = param_len;

	return 0;
   1e88c:	2000      	movs	r0, #0
	*len = param_len;
   1e88e:	6025      	str	r5, [r4, #0]
}
   1e890:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1e892:	f06f 0015 	mvn.w	r0, #21
   1e896:	e7fb      	b.n	1e890 <at_params_string_get+0x38>
		return -ENOMEM;
   1e898:	f06f 000b 	mvn.w	r0, #11
   1e89c:	e7f8      	b.n	1e890 <at_params_string_get+0x38>

0001e89e <at_params_valid_count_get>:

	return 0;
}

u32_t at_params_valid_count_get(const struct at_param_list *list)
{
   1e89e:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   1e8a0:	4604      	mov	r4, r0
   1e8a2:	b178      	cbz	r0, 1e8c4 <at_params_valid_count_get+0x26>
   1e8a4:	6840      	ldr	r0, [r0, #4]
   1e8a6:	b168      	cbz	r0, 1e8c4 <at_params_valid_count_get+0x26>
	if (index >= list->param_count) {
   1e8a8:	6822      	ldr	r2, [r4, #0]
   1e8aa:	b14a      	cbz	r2, 1e8c0 <at_params_valid_count_get+0x22>
   1e8ac:	2200      	movs	r2, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   1e8ae:	7803      	ldrb	r3, [r0, #0]
   1e8b0:	b133      	cbz	r3, 1e8c0 <at_params_valid_count_get+0x22>
		valid_i += 1;
   1e8b2:	3201      	adds	r2, #1
		param = at_params_get(list, valid_i);
   1e8b4:	4611      	mov	r1, r2
   1e8b6:	4620      	mov	r0, r4
   1e8b8:	f7ff feee 	bl	1e698 <at_params_get>
	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   1e8bc:	2800      	cmp	r0, #0
   1e8be:	d1f6      	bne.n	1e8ae <at_params_valid_count_get+0x10>
	}

	return valid_i;
}
   1e8c0:	4610      	mov	r0, r2
   1e8c2:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1e8c4:	f06f 0215 	mvn.w	r2, #21
   1e8c8:	e7fa      	b.n	1e8c0 <at_params_valid_count_get+0x22>

0001e8ca <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   1e8ca:	f7fe bced 	b.w	1d2a8 <z_clock_idle_exit>

0001e8ce <k_mem_slab_init>:
{
   1e8ce:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1e8d0:	2400      	movs	r4, #0
	slab->block_size = block_size;
   1e8d2:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
   1e8d6:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
   1e8da:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e8dc:	42a3      	cmp	r3, r4
   1e8de:	d102      	bne.n	1e8e6 <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
   1e8e0:	e9c0 0000 	strd	r0, r0, [r0]
}
   1e8e4:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1e8e6:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e8e8:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   1e8ea:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   1e8ec:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   1e8ee:	4411      	add	r1, r2
   1e8f0:	e7f4      	b.n	1e8dc <k_mem_slab_init+0xe>

0001e8f2 <k_mem_pool_malloc>:
{
   1e8f2:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1e8f4:	2404      	movs	r4, #4
   1e8f6:	190a      	adds	r2, r1, r4
   1e8f8:	d204      	bcs.n	1e904 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   1e8fa:	2300      	movs	r3, #0
   1e8fc:	4669      	mov	r1, sp
   1e8fe:	f7fc fd2f 	bl	1b360 <k_mem_pool_alloc>
   1e902:	b110      	cbz	r0, 1e90a <k_mem_pool_malloc+0x18>
		return NULL;
   1e904:	2000      	movs	r0, #0
}
   1e906:	b002      	add	sp, #8
   1e908:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   1e90a:	4622      	mov	r2, r4
   1e90c:	a901      	add	r1, sp, #4
   1e90e:	9800      	ldr	r0, [sp, #0]
   1e910:	f7fe feb1 	bl	1d676 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   1e914:	9800      	ldr	r0, [sp, #0]
   1e916:	3004      	adds	r0, #4
   1e918:	e7f5      	b.n	1e906 <k_mem_pool_malloc+0x14>

0001e91a <k_free>:
	if (ptr != NULL) {
   1e91a:	b110      	cbz	r0, 1e922 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   1e91c:	3804      	subs	r0, #4
   1e91e:	f7fc bd6b 	b.w	1b3f8 <k_mem_pool_free_id>
}
   1e922:	4770      	bx	lr

0001e924 <k_calloc>:
{
   1e924:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   1e926:	fba0 4501 	umull	r4, r5, r0, r1
   1e92a:	b935      	cbnz	r5, 1e93a <k_calloc+0x16>
	ret = k_malloc(bounds);
   1e92c:	4620      	mov	r0, r4
   1e92e:	f7fc fd8f 	bl	1b450 <k_malloc>
	if (ret != NULL) {
   1e932:	4606      	mov	r6, r0
   1e934:	b918      	cbnz	r0, 1e93e <k_calloc+0x1a>
}
   1e936:	4630      	mov	r0, r6
   1e938:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1e93a:	2600      	movs	r6, #0
   1e93c:	e7fb      	b.n	1e936 <k_calloc+0x12>
		(void)memset(ret, 0, bounds);
   1e93e:	4622      	mov	r2, r4
   1e940:	4629      	mov	r1, r5
   1e942:	f7fe fec2 	bl	1d6ca <memset>
   1e946:	e7f6      	b.n	1e936 <k_calloc+0x12>

0001e948 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   1e948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e94c:	4604      	mov	r4, r0
   1e94e:	460f      	mov	r7, r1
   1e950:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1e952:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1e956:	f04f 0220 	mov.w	r2, #32
   1e95a:	f3ef 8611 	mrs	r6, BASEPRI
   1e95e:	f382 8811 	msr	BASEPRI, r2
   1e962:	f3bf 8f6f 	isb	sy
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   1e966:	b1db      	cbz	r3, 1e9a0 <queue_insert+0x58>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   1e968:	2008      	movs	r0, #8
   1e96a:	f7fc fd77 	bl	1b45c <z_thread_malloc>
		if (anode == NULL) {
   1e96e:	b938      	cbnz	r0, 1e980 <queue_insert+0x38>
	__asm__ volatile(
   1e970:	f386 8811 	msr	BASEPRI, r6
   1e974:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   1e978:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   1e97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   1e980:	2301      	movs	r3, #1
		anode->data = data;
   1e982:	f8c0 8004 	str.w	r8, [r0, #4]
   1e986:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1e988:	6803      	ldr	r3, [r0, #0]
   1e98a:	f003 0203 	and.w	r2, r3, #3
   1e98e:	b95f      	cbnz	r7, 1e9a8 <queue_insert+0x60>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e990:	6823      	ldr	r3, [r4, #0]
   1e992:	4313      	orrs	r3, r2
   1e994:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1e996:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1e998:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1e99a:	b973      	cbnz	r3, 1e9ba <queue_insert+0x72>
	list->tail = node;
   1e99c:	6060      	str	r0, [r4, #4]
   1e99e:	e00c      	b.n	1e9ba <queue_insert+0x72>
	node->next_and_flags = flags;
   1e9a0:	f8c8 3000 	str.w	r3, [r8]
   1e9a4:	4640      	mov	r0, r8
   1e9a6:	e7ef      	b.n	1e988 <queue_insert+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e9a8:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1e9aa:	f033 0303 	bics.w	r3, r3, #3
   1e9ae:	d114      	bne.n	1e9da <queue_insert+0x92>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e9b0:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1e9b2:	6862      	ldr	r2, [r4, #4]
   1e9b4:	b95a      	cbnz	r2, 1e9ce <queue_insert+0x86>
	list->head = node;
   1e9b6:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1e9ba:	2104      	movs	r1, #4
   1e9bc:	4628      	mov	r0, r5
   1e9be:	f000 fb5d 	bl	1f07c <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1e9c2:	4628      	mov	r0, r5
   1e9c4:	4631      	mov	r1, r6
   1e9c6:	f000 f8d2 	bl	1eb6e <z_reschedule>
	return 0;
   1e9ca:	2000      	movs	r0, #0
   1e9cc:	e7d6      	b.n	1e97c <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e9ce:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e9d0:	f003 0303 	and.w	r3, r3, #3
   1e9d4:	4303      	orrs	r3, r0
   1e9d6:	6013      	str	r3, [r2, #0]
   1e9d8:	e7e0      	b.n	1e99c <queue_insert+0x54>
   1e9da:	4313      	orrs	r3, r2
   1e9dc:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e9de:	683b      	ldr	r3, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e9e0:	f003 0303 	and.w	r3, r3, #3
   1e9e4:	4318      	orrs	r0, r3
   1e9e6:	6038      	str	r0, [r7, #0]
   1e9e8:	e7e7      	b.n	1e9ba <queue_insert+0x72>

0001e9ea <z_queue_node_peek>:
{
   1e9ea:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   1e9ec:	4604      	mov	r4, r0
   1e9ee:	b130      	cbz	r0, 1e9fe <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e9f0:	6802      	ldr	r2, [r0, #0]
   1e9f2:	0793      	lsls	r3, r2, #30
   1e9f4:	d003      	beq.n	1e9fe <z_queue_node_peek+0x14>
		ret = anode->data;
   1e9f6:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1e9f8:	b109      	cbz	r1, 1e9fe <z_queue_node_peek+0x14>
			k_free(anode);
   1e9fa:	f7ff ff8e 	bl	1e91a <k_free>
}
   1e9fe:	4620      	mov	r0, r4
   1ea00:	bd10      	pop	{r4, pc}

0001ea02 <z_impl_k_queue_init>:
	list->head = NULL;
   1ea02:	2300      	movs	r3, #0
	list->tail = NULL;
   1ea04:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
   1ea08:	f100 0308 	add.w	r3, r0, #8
   1ea0c:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   1ea10:	4770      	bx	lr

0001ea12 <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   1ea12:	460a      	mov	r2, r1
   1ea14:	2300      	movs	r3, #0
   1ea16:	6841      	ldr	r1, [r0, #4]
   1ea18:	f7ff bf96 	b.w	1e948 <queue_insert>

0001ea1c <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   1ea1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ea20:	4604      	mov	r4, r0
   1ea22:	b086      	sub	sp, #24
   1ea24:	460d      	mov	r5, r1
	__asm__ volatile(
   1ea26:	f04f 0320 	mov.w	r3, #32
   1ea2a:	f3ef 8711 	mrs	r7, BASEPRI
   1ea2e:	f383 8811 	msr	BASEPRI, r3
   1ea32:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   1ea36:	6800      	ldr	r0, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1ea38:	b188      	cbz	r0, 1ea5e <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ea3a:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1ea3c:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ea3e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1ea42:	4290      	cmp	r0, r2
	list->head = node;
   1ea44:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1ea46:	bf08      	it	eq
   1ea48:	6063      	streq	r3, [r4, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1ea4a:	2101      	movs	r1, #1
   1ea4c:	f7ff ffcd 	bl	1e9ea <z_queue_node_peek>
	__asm__ volatile(
   1ea50:	f387 8811 	msr	BASEPRI, r7
   1ea54:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   1ea58:	b006      	add	sp, #24
   1ea5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   1ea5e:	2900      	cmp	r1, #0
   1ea60:	d0f6      	beq.n	1ea50 <z_impl_k_queue_get+0x34>
   1ea62:	f387 8811 	msr	BASEPRI, r7
   1ea66:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   1ea6a:	2104      	movs	r1, #4
   1ea6c:	4602      	mov	r2, r0
   1ea6e:	4623      	mov	r3, r4
   1ea70:	eb0d 0001 	add.w	r0, sp, r1
   1ea74:	f7fd fc4e 	bl	1c314 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   1ea78:	1c6a      	adds	r2, r5, #1
   1ea7a:	d002      	beq.n	1ea82 <z_impl_k_queue_get+0x66>
	return z_impl_k_uptime_get();
   1ea7c:	f000 f9cb 	bl	1ee16 <z_impl_k_uptime_get>
   1ea80:	4606      	mov	r6, r0
{
   1ea82:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   1ea84:	9b04      	ldr	r3, [sp, #16]
   1ea86:	f36f 3310 	bfc	r3, #12, #5
   1ea8a:	9304      	str	r3, [sp, #16]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1ea8c:	2101      	movs	r1, #1
   1ea8e:	1bea      	subs	r2, r5, r7
   1ea90:	a801      	add	r0, sp, #4
   1ea92:	f7fd fc53 	bl	1c33c <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   1ea96:	b118      	cbz	r0, 1eaa0 <z_impl_k_queue_get+0x84>
   1ea98:	300b      	adds	r0, #11
   1ea9a:	d001      	beq.n	1eaa0 <z_impl_k_queue_get+0x84>
			return NULL;
   1ea9c:	2000      	movs	r0, #0
   1ea9e:	e7db      	b.n	1ea58 <z_impl_k_queue_get+0x3c>
	__asm__ volatile(
   1eaa0:	f04f 0320 	mov.w	r3, #32
   1eaa4:	f3ef 8811 	mrs	r8, BASEPRI
   1eaa8:	f383 8811 	msr	BASEPRI, r3
   1eaac:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   1eab0:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   1eab2:	b138      	cbz	r0, 1eac4 <z_impl_k_queue_get+0xa8>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1eab4:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1eab6:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1eab8:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1eabc:	4290      	cmp	r0, r2
	list->head = node;
   1eabe:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1eac0:	bf08      	it	eq
   1eac2:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   1eac4:	2101      	movs	r1, #1
   1eac6:	f7ff ff90 	bl	1e9ea <z_queue_node_peek>
	__asm__ volatile(
   1eaca:	f388 8811 	msr	BASEPRI, r8
   1eace:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   1ead2:	2800      	cmp	r0, #0
   1ead4:	d1c0      	bne.n	1ea58 <z_impl_k_queue_get+0x3c>
   1ead6:	1c6b      	adds	r3, r5, #1
   1ead8:	d0d4      	beq.n	1ea84 <z_impl_k_queue_get+0x68>
	return z_impl_k_uptime_get();
   1eada:	f000 f99c 	bl	1ee16 <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   1eade:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   1eae0:	42bd      	cmp	r5, r7
   1eae2:	dacf      	bge.n	1ea84 <z_impl_k_queue_get+0x68>
   1eae4:	e7da      	b.n	1ea9c <z_impl_k_queue_get+0x80>

0001eae6 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1eae6:	7b43      	ldrb	r3, [r0, #13]
   1eae8:	06db      	lsls	r3, r3, #27
   1eaea:	bf03      	ittte	eq
   1eaec:	6980      	ldreq	r0, [r0, #24]
   1eaee:	fab0 f080 	clzeq	r0, r0
   1eaf2:	0940      	lsreq	r0, r0, #5
   1eaf4:	2000      	movne	r0, #0
}
   1eaf6:	4770      	bx	lr

0001eaf8 <z_swap_irqlock>:
{
   1eaf8:	b510      	push	{r4, lr}
   1eafa:	4604      	mov	r4, r0
	z_check_stack_sentinel();
   1eafc:	f7fd f970 	bl	1bde0 <z_check_stack_sentinel>
	ret = arch_swap(key);
   1eb00:	4620      	mov	r0, r4
}
   1eb02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   1eb06:	f7f0 be6b 	b.w	f7e0 <arch_swap>

0001eb0a <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   1eb0a:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1eb0e:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1eb12:	4298      	cmp	r0, r3
   1eb14:	bfac      	ite	ge
   1eb16:	2000      	movge	r0, #0
   1eb18:	2001      	movlt	r0, #1
   1eb1a:	4770      	bx	lr

0001eb1c <z_find_first_thread_to_unpend>:
{
   1eb1c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1eb1e:	f04f 0320 	mov.w	r3, #32
   1eb22:	f3ef 8411 	mrs	r4, BASEPRI
   1eb26:	f383 8811 	msr	BASEPRI, r3
   1eb2a:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1eb2e:	f000 f85d 	bl	1ebec <z_priq_dumb_best>
	__asm__ volatile(
   1eb32:	f384 8811 	msr	BASEPRI, r4
   1eb36:	f3bf 8f6f 	isb	sy
}
   1eb3a:	bd10      	pop	{r4, pc}

0001eb3c <z_unpend_thread_no_timeout>:
{
   1eb3c:	b538      	push	{r3, r4, r5, lr}
   1eb3e:	4604      	mov	r4, r0
	__asm__ volatile(
   1eb40:	f04f 0320 	mov.w	r3, #32
   1eb44:	f3ef 8511 	mrs	r5, BASEPRI
   1eb48:	f383 8811 	msr	BASEPRI, r3
   1eb4c:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1eb50:	4601      	mov	r1, r0
   1eb52:	6880      	ldr	r0, [r0, #8]
   1eb54:	f7fc fe44 	bl	1b7e0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1eb58:	7b63      	ldrb	r3, [r4, #13]
   1eb5a:	f023 0302 	bic.w	r3, r3, #2
   1eb5e:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1eb60:	f385 8811 	msr	BASEPRI, r5
   1eb64:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1eb68:	2300      	movs	r3, #0
   1eb6a:	60a3      	str	r3, [r4, #8]
}
   1eb6c:	bd38      	pop	{r3, r4, r5, pc}

0001eb6e <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1eb6e:	b921      	cbnz	r1, 1eb7a <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1eb70:	f3ef 8005 	mrs	r0, IPSR
   1eb74:	b908      	cbnz	r0, 1eb7a <z_reschedule+0xc>
	return z_swap_irqlock(key.key);
   1eb76:	f7ff bfbf 	b.w	1eaf8 <z_swap_irqlock>
   1eb7a:	f381 8811 	msr	BASEPRI, r1
   1eb7e:	f3bf 8f6f 	isb	sy
}
   1eb82:	4770      	bx	lr

0001eb84 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1eb84:	4603      	mov	r3, r0
   1eb86:	b920      	cbnz	r0, 1eb92 <z_reschedule_irqlock+0xe>
   1eb88:	f3ef 8205 	mrs	r2, IPSR
   1eb8c:	b90a      	cbnz	r2, 1eb92 <z_reschedule_irqlock+0xe>
		z_swap_irqlock(key);
   1eb8e:	f7ff bfb3 	b.w	1eaf8 <z_swap_irqlock>
   1eb92:	f383 8811 	msr	BASEPRI, r3
   1eb96:	f3bf 8f6f 	isb	sy
}
   1eb9a:	4770      	bx	lr

0001eb9c <z_reschedule_unlocked>:
	__asm__ volatile(
   1eb9c:	f04f 0320 	mov.w	r3, #32
   1eba0:	f3ef 8011 	mrs	r0, BASEPRI
   1eba4:	f383 8811 	msr	BASEPRI, r3
   1eba8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1ebac:	f7ff bfea 	b.w	1eb84 <z_reschedule_irqlock>

0001ebb0 <z_unpend_thread>:
{
   1ebb0:	b538      	push	{r3, r4, r5, lr}
   1ebb2:	4604      	mov	r4, r0
   1ebb4:	f04f 0320 	mov.w	r3, #32
   1ebb8:	f3ef 8511 	mrs	r5, BASEPRI
   1ebbc:	f383 8811 	msr	BASEPRI, r3
   1ebc0:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1ebc4:	4601      	mov	r1, r0
   1ebc6:	6880      	ldr	r0, [r0, #8]
   1ebc8:	f7fc fe0a 	bl	1b7e0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1ebcc:	7b63      	ldrb	r3, [r4, #13]
   1ebce:	f023 0302 	bic.w	r3, r3, #2
   1ebd2:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1ebd4:	f385 8811 	msr	BASEPRI, r5
   1ebd8:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1ebdc:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   1ebde:	f104 0018 	add.w	r0, r4, #24
   1ebe2:	60a3      	str	r3, [r4, #8]
}
   1ebe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1ebe8:	f000 b8d1 	b.w	1ed8e <z_abort_timeout>

0001ebec <z_priq_dumb_best>:
	return list->head == list;
   1ebec:	6803      	ldr	r3, [r0, #0]
}
   1ebee:	4298      	cmp	r0, r3
   1ebf0:	bf14      	ite	ne
   1ebf2:	4618      	movne	r0, r3
   1ebf4:	2000      	moveq	r0, #0
   1ebf6:	4770      	bx	lr

0001ebf8 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   1ebf8:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   1ebfc:	b570      	push	{r4, r5, r6, lr}
   1ebfe:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   1ec00:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   1ec04:	b1cb      	cbz	r3, 1ec3a <z_thread_timeout+0x42>
	__asm__ volatile(
   1ec06:	f04f 0320 	mov.w	r3, #32
   1ec0a:	f3ef 8611 	mrs	r6, BASEPRI
   1ec0e:	f383 8811 	msr	BASEPRI, r3
   1ec12:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1ec16:	4629      	mov	r1, r5
   1ec18:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1ec1c:	f7fc fde0 	bl	1b7e0 <z_priq_dumb_remove>
   1ec20:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1ec24:	f023 0302 	bic.w	r3, r3, #2
   1ec28:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
   1ec2c:	f386 8811 	msr	BASEPRI, r6
   1ec30:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1ec34:	2300      	movs	r3, #0
   1ec36:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1ec3a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1ec3e:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1ec40:	f023 0314 	bic.w	r3, r3, #20
   1ec44:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1ec48:	f7ff ff4d 	bl	1eae6 <z_is_thread_ready>
   1ec4c:	b120      	cbz	r0, 1ec58 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
   1ec4e:	4628      	mov	r0, r5
}
   1ec50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ec54:	f7fc be14 	b.w	1b880 <z_add_thread_to_ready_q>
   1ec58:	bd70      	pop	{r4, r5, r6, pc}

0001ec5a <z_unpend_first_thread>:
{
   1ec5a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1ec5c:	f04f 0320 	mov.w	r3, #32
   1ec60:	f3ef 8211 	mrs	r2, BASEPRI
   1ec64:	f383 8811 	msr	BASEPRI, r3
   1ec68:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1ec6c:	f7ff ffbe 	bl	1ebec <z_priq_dumb_best>
   1ec70:	4604      	mov	r4, r0
	__asm__ volatile(
   1ec72:	f382 8811 	msr	BASEPRI, r2
   1ec76:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1ec7a:	b1c8      	cbz	r0, 1ecb0 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   1ec7c:	f04f 0320 	mov.w	r3, #32
   1ec80:	f3ef 8511 	mrs	r5, BASEPRI
   1ec84:	f383 8811 	msr	BASEPRI, r3
   1ec88:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1ec8c:	4601      	mov	r1, r0
   1ec8e:	6880      	ldr	r0, [r0, #8]
   1ec90:	f7fc fda6 	bl	1b7e0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1ec94:	7b63      	ldrb	r3, [r4, #13]
   1ec96:	f023 0302 	bic.w	r3, r3, #2
   1ec9a:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1ec9c:	f385 8811 	msr	BASEPRI, r5
   1eca0:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1eca4:	2300      	movs	r3, #0
   1eca6:	f104 0018 	add.w	r0, r4, #24
   1ecaa:	60a3      	str	r3, [r4, #8]
   1ecac:	f000 f86f 	bl	1ed8e <z_abort_timeout>
}
   1ecb0:	4620      	mov	r0, r4
   1ecb2:	bd38      	pop	{r3, r4, r5, pc}

0001ecb4 <z_unpend_all>:
{
   1ecb4:	b570      	push	{r4, r5, r6, lr}
   1ecb6:	4606      	mov	r6, r0
	int need_sched = 0;
   1ecb8:	2500      	movs	r5, #0
   1ecba:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ecbc:	42a6      	cmp	r6, r4
   1ecbe:	d000      	beq.n	1ecc2 <z_unpend_all+0xe>
	while ((th = z_waitq_head(wait_q)) != NULL) {
   1ecc0:	b90c      	cbnz	r4, 1ecc6 <z_unpend_all+0x12>
}
   1ecc2:	4628      	mov	r0, r5
   1ecc4:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(th);
   1ecc6:	4620      	mov	r0, r4
   1ecc8:	f7ff ff72 	bl	1ebb0 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   1eccc:	4620      	mov	r0, r4
   1ecce:	f7ff ff0a 	bl	1eae6 <z_is_thread_ready>
		need_sched = 1;
   1ecd2:	2501      	movs	r5, #1
   1ecd4:	2800      	cmp	r0, #0
   1ecd6:	d0f0      	beq.n	1ecba <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   1ecd8:	4620      	mov	r0, r4
   1ecda:	f7fc fdd1 	bl	1b880 <z_add_thread_to_ready_q>
   1ecde:	e7ec      	b.n	1ecba <z_unpend_all+0x6>

0001ece0 <z_impl_k_sem_init>:
	sys_dlist_init(&sem->poll_events);
   1ece0:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1ece4:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1ece8:	e9c0 0000 	strd	r0, r0, [r0]
   1ecec:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1ecf0:	4770      	bx	lr

0001ecf2 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1ecf2:	7b43      	ldrb	r3, [r0, #13]
   1ecf4:	06db      	lsls	r3, r3, #27
   1ecf6:	bf03      	ittte	eq
   1ecf8:	6980      	ldreq	r0, [r0, #24]
   1ecfa:	fab0 f080 	clzeq	r0, r0
   1ecfe:	0940      	lsreq	r0, r0, #5
   1ed00:	2000      	movne	r0, #0
}
   1ed02:	4770      	bx	lr

0001ed04 <z_impl_k_thread_name_set>:
}
   1ed04:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1ed08:	4770      	bx	lr

0001ed0a <k_thread_name_get>:
}
   1ed0a:	2000      	movs	r0, #0
   1ed0c:	4770      	bx	lr

0001ed0e <z_new_thread_init>:
{
   1ed0e:	b510      	push	{r4, lr}
	*((u32_t *)pStack) = STACK_SENTINEL;
   1ed10:	f04f 34f0 	mov.w	r4, #4042322160	; 0xf0f0f0f0
   1ed14:	600c      	str	r4, [r1, #0]
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   1ed16:	9c02      	ldr	r4, [sp, #8]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
   1ed18:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
   1ed1a:	7304      	strb	r4, [r0, #12]

	thread_base->sched_locked = 0U;
   1ed1c:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   1ed1e:	2404      	movs	r4, #4
	thread_base->sched_locked = 0U;
   1ed20:	73c3      	strb	r3, [r0, #15]
	thread_base->thread_state = (u8_t)initial_state;
   1ed22:	7344      	strb	r4, [r0, #13]
	node->prev = NULL;
   1ed24:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   1ed28:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   1ed2c:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
   1ed30:	bd10      	pop	{r4, pc}

0001ed32 <z_thread_single_resume>:
{
   1ed32:	b508      	push	{r3, lr}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1ed34:	7b43      	ldrb	r3, [r0, #13]
   1ed36:	4602      	mov	r2, r0
   1ed38:	f023 0310 	bic.w	r3, r3, #16
   1ed3c:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   1ed3e:	f7ff ffd8 	bl	1ecf2 <z_is_thread_ready>
   1ed42:	b120      	cbz	r0, 1ed4e <z_thread_single_resume+0x1c>
}
   1ed44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_add_thread_to_ready_q(thread);
   1ed48:	4610      	mov	r0, r2
   1ed4a:	f7fc bd99 	b.w	1b880 <z_add_thread_to_ready_q>
   1ed4e:	bd08      	pop	{r3, pc}

0001ed50 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   1ed50:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1ed52:	b510      	push	{r4, lr}
   1ed54:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1ed56:	b103      	cbz	r3, 1ed5a <z_thread_single_abort+0xa>
		thread->fn_abort();
   1ed58:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   1ed5a:	4620      	mov	r0, r4
   1ed5c:	f7ff ffc9 	bl	1ecf2 <z_is_thread_ready>
   1ed60:	b138      	cbz	r0, 1ed72 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
   1ed62:	4620      	mov	r0, r4
   1ed64:	f7fc fe3a 	bl	1b9dc <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   1ed68:	7b63      	ldrb	r3, [r4, #13]
   1ed6a:	f043 0308 	orr.w	r3, r3, #8
   1ed6e:	7363      	strb	r3, [r4, #13]
}
   1ed70:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
   1ed72:	7b63      	ldrb	r3, [r4, #13]
   1ed74:	079b      	lsls	r3, r3, #30
   1ed76:	d502      	bpl.n	1ed7e <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
   1ed78:	4620      	mov	r0, r4
   1ed7a:	f7ff fedf 	bl	1eb3c <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   1ed7e:	69a3      	ldr	r3, [r4, #24]
   1ed80:	2b00      	cmp	r3, #0
   1ed82:	d0f1      	beq.n	1ed68 <z_thread_single_abort+0x18>
   1ed84:	f104 0018 	add.w	r0, r4, #24
   1ed88:	f000 f801 	bl	1ed8e <z_abort_timeout>
   1ed8c:	e7ec      	b.n	1ed68 <z_thread_single_abort+0x18>

0001ed8e <z_abort_timeout>:
{
   1ed8e:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ed90:	f04f 0220 	mov.w	r2, #32
   1ed94:	f3ef 8411 	mrs	r4, BASEPRI
   1ed98:	f382 8811 	msr	BASEPRI, r2
   1ed9c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1eda0:	6803      	ldr	r3, [r0, #0]
   1eda2:	b13b      	cbz	r3, 1edb4 <z_abort_timeout+0x26>
			remove_timeout(to);
   1eda4:	f7fd f97e 	bl	1c0a4 <remove_timeout>
			ret = 0;
   1eda8:	2000      	movs	r0, #0
	__asm__ volatile(
   1edaa:	f384 8811 	msr	BASEPRI, r4
   1edae:	f3bf 8f6f 	isb	sy
}
   1edb2:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1edb4:	f06f 0015 	mvn.w	r0, #21
   1edb8:	e7f7      	b.n	1edaa <z_abort_timeout+0x1c>

0001edba <z_get_next_timeout_expiry>:
{
   1edba:	b510      	push	{r4, lr}
	__asm__ volatile(
   1edbc:	f04f 0320 	mov.w	r3, #32
   1edc0:	f3ef 8411 	mrs	r4, BASEPRI
   1edc4:	f383 8811 	msr	BASEPRI, r3
   1edc8:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1edcc:	f7fd f97e 	bl	1c0cc <next_timeout>
	__asm__ volatile(
   1edd0:	f384 8811 	msr	BASEPRI, r4
   1edd4:	f3bf 8f6f 	isb	sy
}
   1edd8:	bd10      	pop	{r4, pc}

0001edda <z_set_timeout_expiry>:
{
   1edda:	b570      	push	{r4, r5, r6, lr}
   1eddc:	4604      	mov	r4, r0
   1edde:	460e      	mov	r6, r1
	__asm__ volatile(
   1ede0:	f04f 0320 	mov.w	r3, #32
   1ede4:	f3ef 8511 	mrs	r5, BASEPRI
   1ede8:	f383 8811 	msr	BASEPRI, r3
   1edec:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   1edf0:	f7fd f96c 	bl	1c0cc <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1edf4:	2801      	cmp	r0, #1
   1edf6:	dd05      	ble.n	1ee04 <z_set_timeout_expiry+0x2a>
   1edf8:	42a0      	cmp	r0, r4
   1edfa:	dd03      	ble.n	1ee04 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   1edfc:	4631      	mov	r1, r6
   1edfe:	4620      	mov	r0, r4
   1ee00:	f7f0 fc50 	bl	f6a4 <z_clock_set_timeout>
	__asm__ volatile(
   1ee04:	f385 8811 	msr	BASEPRI, r5
   1ee08:	f3bf 8f6f 	isb	sy
}
   1ee0c:	bd70      	pop	{r4, r5, r6, pc}

0001ee0e <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   1ee0e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   1ee10:	f7fd fa10 	bl	1c234 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   1ee14:	bd08      	pop	{r3, pc}

0001ee16 <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   1ee16:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
   1ee18:	f7fd fa0c 	bl	1c234 <z_tick_get>
			return (t * to_hz + off) / from_hz;
   1ee1c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1ee20:	fba0 2304 	umull	r2, r3, r0, r4
   1ee24:	fb04 3301 	mla	r3, r4, r1, r3
   1ee28:	0bd0      	lsrs	r0, r2, #15
}
   1ee2a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1ee2e:	0bd9      	lsrs	r1, r3, #15
   1ee30:	bd10      	pop	{r4, pc}

0001ee32 <k_timer_init>:
	timer->status = 0U;
   1ee32:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1ee34:	e9c0 1206 	strd	r1, r2, [r0, #24]
   1ee38:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
   1ee3c:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   1ee3e:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   1ee42:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
   1ee46:	6283      	str	r3, [r0, #40]	; 0x28
}
   1ee48:	4770      	bx	lr

0001ee4a <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1ee4a:	b510      	push	{r4, lr}
   1ee4c:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1ee4e:	f7ff ff9e 	bl	1ed8e <z_abort_timeout>

	if (inactive) {
   1ee52:	bb00      	cbnz	r0, 1ee96 <z_impl_k_timer_stop+0x4c>
		return;
	}

	if (timer->stop_fn != NULL) {
   1ee54:	69e3      	ldr	r3, [r4, #28]
   1ee56:	b10b      	cbz	r3, 1ee5c <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1ee58:	4620      	mov	r0, r4
   1ee5a:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   1ee5c:	f104 0010 	add.w	r0, r4, #16
   1ee60:	2100      	movs	r1, #0
   1ee62:	f7ff fe5b 	bl	1eb1c <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   1ee66:	4604      	mov	r4, r0
   1ee68:	b1a8      	cbz	r0, 1ee96 <z_impl_k_timer_stop+0x4c>
		z_unpend_thread_no_timeout(thread);
   1ee6a:	f7ff fe67 	bl	1eb3c <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1ee6e:	7b63      	ldrb	r3, [r4, #13]
   1ee70:	06db      	lsls	r3, r3, #27
   1ee72:	d104      	bne.n	1ee7e <z_impl_k_timer_stop+0x34>
	if (z_is_thread_ready(thread)) {
   1ee74:	69a3      	ldr	r3, [r4, #24]
   1ee76:	b913      	cbnz	r3, 1ee7e <z_impl_k_timer_stop+0x34>
		z_add_thread_to_ready_q(thread);
   1ee78:	4620      	mov	r0, r4
   1ee7a:	f7fc fd01 	bl	1b880 <z_add_thread_to_ready_q>
	__asm__ volatile(
   1ee7e:	f04f 0320 	mov.w	r3, #32
   1ee82:	f3ef 8011 	mrs	r0, BASEPRI
   1ee86:	f383 8811 	msr	BASEPRI, r3
   1ee8a:	f3bf 8f6f 	isb	sy

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
		z_reschedule_unlocked();
	}
}
   1ee8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1ee92:	f7ff be77 	b.w	1eb84 <z_reschedule_irqlock>
   1ee96:	bd10      	pop	{r4, pc}

0001ee98 <clear_event_registrations>:
	while (num_events--) {
   1ee98:	2314      	movs	r3, #20
{
   1ee9a:	b570      	push	{r4, r5, r6, lr}
	event->poller = NULL;
   1ee9c:	2400      	movs	r4, #0
   1ee9e:	2601      	movs	r6, #1
   1eea0:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   1eea4:	4281      	cmp	r1, r0
   1eea6:	d100      	bne.n	1eeaa <clear_event_registrations+0x12>
}
   1eea8:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   1eeaa:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   1eeae:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   1eeb2:	f003 030f 	and.w	r3, r3, #15
   1eeb6:	2b04      	cmp	r3, #4
   1eeb8:	d80d      	bhi.n	1eed6 <clear_event_registrations+0x3e>
   1eeba:	fa06 f303 	lsl.w	r3, r6, r3
   1eebe:	f013 0f16 	tst.w	r3, #22
   1eec2:	d008      	beq.n	1eed6 <clear_event_registrations+0x3e>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1eec4:	f851 3c14 	ldr.w	r3, [r1, #-20]
   1eec8:	b12b      	cbz	r3, 1eed6 <clear_event_registrations+0x3e>
	node->prev->next = node->next;
   1eeca:	f851 5c10 	ldr.w	r5, [r1, #-16]
   1eece:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   1eed0:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1eed2:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   1eed6:	f382 8811 	msr	BASEPRI, r2
   1eeda:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1eede:	f04f 0320 	mov.w	r3, #32
   1eee2:	f3ef 8211 	mrs	r2, BASEPRI
   1eee6:	f383 8811 	msr	BASEPRI, r3
   1eeea:	f3bf 8f6f 	isb	sy
   1eeee:	3914      	subs	r1, #20
   1eef0:	e7d8      	b.n	1eea4 <clear_event_registrations+0xc>

0001eef2 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   1eef2:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   1eef4:	6884      	ldr	r4, [r0, #8]
{
   1eef6:	4605      	mov	r5, r0
   1eef8:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   1eefa:	b19c      	cbz	r4, 1ef24 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   1eefc:	68a3      	ldr	r3, [r4, #8]
   1eefe:	b95b      	cbnz	r3, 1ef18 <signal_poll_event+0x26>
	int retcode = 0;
   1ef00:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   1ef02:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1ef04:	2300      	movs	r3, #0
   1ef06:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   1ef08:	68eb      	ldr	r3, [r5, #12]
   1ef0a:	f3c3 3204 	ubfx	r2, r3, #12, #5
   1ef0e:	4316      	orrs	r6, r2
   1ef10:	f366 3310 	bfi	r3, r6, #12, #5
   1ef14:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   1ef16:	e004      	b.n	1ef22 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   1ef18:	4798      	blx	r3
		poller->is_polling = false;
   1ef1a:	2300      	movs	r3, #0
		if (retcode < 0) {
   1ef1c:	2800      	cmp	r0, #0
		poller->is_polling = false;
   1ef1e:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   1ef20:	daf0      	bge.n	1ef04 <signal_poll_event+0x12>
}
   1ef22:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   1ef24:	4620      	mov	r0, r4
   1ef26:	e7ed      	b.n	1ef04 <signal_poll_event+0x12>

0001ef28 <k_poll_poller_cb>:
{
   1ef28:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   1ef2a:	6883      	ldr	r3, [r0, #8]
{
   1ef2c:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   1ef2e:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   1ef30:	7b63      	ldrb	r3, [r4, #13]
   1ef32:	079a      	lsls	r2, r3, #30
   1ef34:	d401      	bmi.n	1ef3a <k_poll_poller_cb+0x12>
		return 0;
   1ef36:	2000      	movs	r0, #0
}
   1ef38:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   1ef3a:	6a23      	ldr	r3, [r4, #32]
   1ef3c:	3302      	adds	r3, #2
   1ef3e:	d012      	beq.n	1ef66 <k_poll_poller_cb+0x3e>
	z_unpend_thread(thread);
   1ef40:	4620      	mov	r0, r4
   1ef42:	f7ff fe35 	bl	1ebb0 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1ef46:	2d08      	cmp	r5, #8
   1ef48:	bf0c      	ite	eq
   1ef4a:	f06f 0303 	mvneq.w	r3, #3
   1ef4e:	2300      	movne	r3, #0
   1ef50:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1ef52:	7b63      	ldrb	r3, [r4, #13]
   1ef54:	06db      	lsls	r3, r3, #27
   1ef56:	d1ee      	bne.n	1ef36 <k_poll_poller_cb+0xe>
	if (!z_is_thread_ready(thread)) {
   1ef58:	69a5      	ldr	r5, [r4, #24]
   1ef5a:	2d00      	cmp	r5, #0
   1ef5c:	d1eb      	bne.n	1ef36 <k_poll_poller_cb+0xe>
		z_add_thread_to_ready_q(thread);
   1ef5e:	4620      	mov	r0, r4
   1ef60:	f7fc fc8e 	bl	1b880 <z_add_thread_to_ready_q>
	return 0;
   1ef64:	e7e7      	b.n	1ef36 <k_poll_poller_cb+0xe>
		return -EAGAIN;
   1ef66:	f06f 000a 	mvn.w	r0, #10
   1ef6a:	e7e5      	b.n	1ef38 <k_poll_poller_cb+0x10>

0001ef6c <add_event>:
{
   1ef6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ef6e:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1ef70:	e9d0 2300 	ldrd	r2, r3, [r0]
   1ef74:	4290      	cmp	r0, r2
   1ef76:	4604      	mov	r4, r0
   1ef78:	460d      	mov	r5, r1
   1ef7a:	d106      	bne.n	1ef8a <add_event+0x1e>
	node->prev = list->tail;
   1ef7c:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1ef7e:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   1ef80:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1ef82:	6863      	ldr	r3, [r4, #4]
   1ef84:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1ef86:	6065      	str	r5, [r4, #4]
}
   1ef88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1ef8a:	2b00      	cmp	r3, #0
   1ef8c:	d0f6      	beq.n	1ef7c <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   1ef8e:	689b      	ldr	r3, [r3, #8]
   1ef90:	6879      	ldr	r1, [r7, #4]
   1ef92:	6858      	ldr	r0, [r3, #4]
   1ef94:	f7ff fdb9 	bl	1eb0a <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1ef98:	2800      	cmp	r0, #0
   1ef9a:	d1ef      	bne.n	1ef7c <add_event+0x10>
	return list->head == list;
   1ef9c:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ef9e:	42b4      	cmp	r4, r6
   1efa0:	d0ec      	beq.n	1ef7c <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1efa2:	2e00      	cmp	r6, #0
   1efa4:	d0ea      	beq.n	1ef7c <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   1efa6:	68b3      	ldr	r3, [r6, #8]
   1efa8:	6878      	ldr	r0, [r7, #4]
   1efaa:	6859      	ldr	r1, [r3, #4]
   1efac:	f7ff fdad 	bl	1eb0a <z_is_t1_higher_prio_than_t2>
   1efb0:	b128      	cbz	r0, 1efbe <add_event+0x52>
	node->prev = successor->prev;
   1efb2:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1efb4:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1efb8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1efba:	6075      	str	r5, [r6, #4]
			return;
   1efbc:	e7e4      	b.n	1ef88 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1efbe:	6863      	ldr	r3, [r4, #4]
   1efc0:	429e      	cmp	r6, r3
   1efc2:	d0db      	beq.n	1ef7c <add_event+0x10>
   1efc4:	6836      	ldr	r6, [r6, #0]
   1efc6:	e7ec      	b.n	1efa2 <add_event+0x36>

0001efc8 <register_events>:
{
   1efc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1efcc:	f04f 0b00 	mov.w	fp, #0
{
   1efd0:	4688      	mov	r8, r1
   1efd2:	4615      	mov	r5, r2
   1efd4:	4699      	mov	r9, r3
   1efd6:	4604      	mov	r4, r0
	int events_registered = 0;
   1efd8:	465e      	mov	r6, fp
	event->poller = NULL;
   1efda:	465f      	mov	r7, fp
	for (int ii = 0; ii < num_events; ii++) {
   1efdc:	45c3      	cmp	fp, r8
   1efde:	db02      	blt.n	1efe6 <register_events+0x1e>
}
   1efe0:	4630      	mov	r0, r6
   1efe2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1efe6:	f04f 0320 	mov.w	r3, #32
   1efea:	f3ef 8a11 	mrs	sl, BASEPRI
   1efee:	f383 8811 	msr	BASEPRI, r3
   1eff2:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1eff6:	7b63      	ldrb	r3, [r4, #13]
   1eff8:	f003 030f 	and.w	r3, r3, #15
   1effc:	2b02      	cmp	r3, #2
   1effe:	d005      	beq.n	1f00c <register_events+0x44>
   1f000:	2b04      	cmp	r3, #4
   1f002:	d006      	beq.n	1f012 <register_events+0x4a>
   1f004:	2b01      	cmp	r3, #1
   1f006:	d118      	bne.n	1f03a <register_events+0x72>
		if (event->signal->signaled != 0U) {
   1f008:	6922      	ldr	r2, [r4, #16]
   1f00a:	e000      	b.n	1f00e <register_events+0x46>
		if (k_sem_count_get(event->sem) > 0) {
   1f00c:	6922      	ldr	r2, [r4, #16]
		if (event->signal->signaled != 0U) {
   1f00e:	6892      	ldr	r2, [r2, #8]
   1f010:	e001      	b.n	1f016 <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
   1f012:	6922      	ldr	r2, [r4, #16]
   1f014:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0U) {
   1f016:	b182      	cbz	r2, 1f03a <register_events+0x72>
	event->state |= state;
   1f018:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   1f01a:	60a7      	str	r7, [r4, #8]
	event->state |= state;
   1f01c:	f3c2 3104 	ubfx	r1, r2, #12, #5
   1f020:	430b      	orrs	r3, r1
   1f022:	f363 3210 	bfi	r2, r3, #12, #5
   1f026:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   1f028:	702f      	strb	r7, [r5, #0]
	__asm__ volatile(
   1f02a:	f38a 8811 	msr	BASEPRI, sl
   1f02e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1f032:	f10b 0b01 	add.w	fp, fp, #1
   1f036:	3414      	adds	r4, #20
   1f038:	e7d0      	b.n	1efdc <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   1f03a:	f1b9 0f00 	cmp.w	r9, #0
   1f03e:	d1f4      	bne.n	1f02a <register_events+0x62>
   1f040:	782b      	ldrb	r3, [r5, #0]
   1f042:	2b00      	cmp	r3, #0
   1f044:	d0f1      	beq.n	1f02a <register_events+0x62>
	switch (event->type) {
   1f046:	7b63      	ldrb	r3, [r4, #13]
   1f048:	f003 030f 	and.w	r3, r3, #15
   1f04c:	2b02      	cmp	r3, #2
   1f04e:	d007      	beq.n	1f060 <register_events+0x98>
   1f050:	2b04      	cmp	r3, #4
   1f052:	d00e      	beq.n	1f072 <register_events+0xaa>
   1f054:	2b01      	cmp	r3, #1
   1f056:	d109      	bne.n	1f06c <register_events+0xa4>
		add_event(&event->signal->poll_events, event, poller);
   1f058:	462a      	mov	r2, r5
   1f05a:	4621      	mov	r1, r4
   1f05c:	6920      	ldr	r0, [r4, #16]
   1f05e:	e003      	b.n	1f068 <register_events+0xa0>
		add_event(&event->sem->poll_events, event, poller);
   1f060:	462a      	mov	r2, r5
   1f062:	4621      	mov	r1, r4
   1f064:	6920      	ldr	r0, [r4, #16]
   1f066:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   1f068:	f7ff ff80 	bl	1ef6c <add_event>
	event->poller = poller;
   1f06c:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   1f06e:	3601      	adds	r6, #1
   1f070:	e7db      	b.n	1f02a <register_events+0x62>
		add_event(&event->queue->poll_events, event, poller);
   1f072:	6920      	ldr	r0, [r4, #16]
   1f074:	462a      	mov	r2, r5
   1f076:	4621      	mov	r1, r4
   1f078:	3008      	adds	r0, #8
   1f07a:	e7f5      	b.n	1f068 <register_events+0xa0>

0001f07c <z_handle_obj_poll_events>:
	return list->head == list;
   1f07c:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1f07e:	4298      	cmp	r0, r3
   1f080:	d009      	beq.n	1f096 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1f082:	e9d3 2000 	ldrd	r2, r0, [r3]
   1f086:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   1f088:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   1f08a:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   1f08c:	4618      	mov	r0, r3
	node->prev = NULL;
   1f08e:	e9c3 2200 	strd	r2, r2, [r3]
   1f092:	f7ff bf2e 	b.w	1eef2 <signal_poll_event>
	}
}
   1f096:	4770      	bx	lr

0001f098 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   1f098:	4770      	bx	lr
