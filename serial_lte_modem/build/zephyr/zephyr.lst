
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

0000c000 <_vector_table>:
    c000:	200280a0 	.word	0x200280a0
    c004:	0000f611 	.word	0x0000f611
    c008:	0001cceb 	.word	0x0001cceb
    c00c:	0000f431 	.word	0x0000f431
    c010:	0000f431 	.word	0x0000f431
    c014:	0000f431 	.word	0x0000f431
    c018:	0000f431 	.word	0x0000f431
    c01c:	0000f431 	.word	0x0000f431
    c020:	0000f431 	.word	0x0000f431
    c024:	0000f431 	.word	0x0000f431
    c028:	0000f431 	.word	0x0000f431
    c02c:	0000f2f1 	.word	0x0000f2f1
    c030:	0000f431 	.word	0x0000f431
    c034:	0000f431 	.word	0x0000f431
    c038:	0000f241 	.word	0x0000f241
    c03c:	0001ccdb 	.word	0x0001ccdb

0000c040 <_irq_vector_table>:
    c040:	0000f5d1 0000f5d1 0000f5d1 0000f5d1     ................
    c050:	0000f5d1 0000f5d1 0000f5d1 0000f5d1     ................
    c060:	0000f5d1 0000f5d1 0000f5d1 0000f5d1     ................
    c070:	0000f5d1 0000f5d1 0000f5d1 0000f5d1     ................
    c080:	0000f5d1 0000f5d1 0000f5d1 0000f5d1     ................
    c090:	0000f5d1 0000f5d1 0000f5d1 0000f5d1     ................
    c0a0:	0000f5d1 0000f5d1 0000f5d1 0000f5d1     ................
    c0b0:	000112a1 0001d7d5 0000f5d1 0000f5d1     ................
    c0c0:	0000f5d1 0000f5d1 0000f5d1 0000f5d1     ................
    c0d0:	0000f5d1 0000f5d1 0000f5d1 0000f5d1     ................
    c0e0:	0000f5d1 0000f5d1 0001d7f3 0000f5d1     ................
    c0f0:	0000f5d1 0000f5d1 0000f5d1 0000f5d1     ................
    c100:	0000f5d1 0000f5d1 0000f5d1 0000f5d1     ................
    c110:	0000f5d1 0000f5d1 0000f5d1 0000f5d1     ................
    c120:	0000f5d1 0000f5d1 0000f5d1 0000f5d1     ................
    c130:	0000f5d1 0000f5d1 0000f5d1 0000f5d1     ................
    c140:	0000f5d1                                ....

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b01 00014acc     ...(L....[...J..
    c210:	00000001 0000c000 2002c3f0 00012259     ........... Y"..

Disassembly of section _TEXT_SECTION_NAME_2:

0000c220 <__aeabi_uldivmod>:
    c220:	b953      	cbnz	r3, c238 <__aeabi_uldivmod+0x18>
    c222:	b94a      	cbnz	r2, c238 <__aeabi_uldivmod+0x18>
    c224:	2900      	cmp	r1, #0
    c226:	bf08      	it	eq
    c228:	2800      	cmpeq	r0, #0
    c22a:	bf1c      	itt	ne
    c22c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c234:	f000 b970 	b.w	c518 <__aeabi_idiv0>
    c238:	f1ad 0c08 	sub.w	ip, sp, #8
    c23c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c240:	f000 f806 	bl	c250 <__udivmoddi4>
    c244:	f8dd e004 	ldr.w	lr, [sp, #4]
    c248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c24c:	b004      	add	sp, #16
    c24e:	4770      	bx	lr

0000c250 <__udivmoddi4>:
    c250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c254:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c256:	4604      	mov	r4, r0
    c258:	4689      	mov	r9, r1
    c25a:	2b00      	cmp	r3, #0
    c25c:	f040 8083 	bne.w	c366 <__udivmoddi4+0x116>
    c260:	428a      	cmp	r2, r1
    c262:	4615      	mov	r5, r2
    c264:	d945      	bls.n	c2f2 <__udivmoddi4+0xa2>
    c266:	fab2 f282 	clz	r2, r2
    c26a:	b14a      	cbz	r2, c280 <__udivmoddi4+0x30>
    c26c:	f1c2 0720 	rsb	r7, r2, #32
    c270:	fa01 f302 	lsl.w	r3, r1, r2
    c274:	4095      	lsls	r5, r2
    c276:	4094      	lsls	r4, r2
    c278:	fa20 f707 	lsr.w	r7, r0, r7
    c27c:	ea47 0903 	orr.w	r9, r7, r3
    c280:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c284:	0c23      	lsrs	r3, r4, #16
    c286:	fa1f f885 	uxth.w	r8, r5
    c28a:	fbb9 fcfe 	udiv	ip, r9, lr
    c28e:	fb0e 991c 	mls	r9, lr, ip, r9
    c292:	fb0c f108 	mul.w	r1, ip, r8
    c296:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
    c29a:	4299      	cmp	r1, r3
    c29c:	d90a      	bls.n	c2b4 <__udivmoddi4+0x64>
    c29e:	18eb      	adds	r3, r5, r3
    c2a0:	bf2c      	ite	cs
    c2a2:	2001      	movcs	r0, #1
    c2a4:	2000      	movcc	r0, #0
    c2a6:	4299      	cmp	r1, r3
    c2a8:	d902      	bls.n	c2b0 <__udivmoddi4+0x60>
    c2aa:	2800      	cmp	r0, #0
    c2ac:	f000 811d 	beq.w	c4ea <__udivmoddi4+0x29a>
    c2b0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c2b4:	1a59      	subs	r1, r3, r1
    c2b6:	b2a3      	uxth	r3, r4
    c2b8:	fbb1 f0fe 	udiv	r0, r1, lr
    c2bc:	fb0e 1110 	mls	r1, lr, r0, r1
    c2c0:	fb00 f808 	mul.w	r8, r0, r8
    c2c4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c2c8:	45a0      	cmp	r8, r4
    c2ca:	d905      	bls.n	c2d8 <__udivmoddi4+0x88>
    c2cc:	192c      	adds	r4, r5, r4
    c2ce:	d202      	bcs.n	c2d6 <__udivmoddi4+0x86>
    c2d0:	45a0      	cmp	r8, r4
    c2d2:	f200 810e 	bhi.w	c4f2 <__udivmoddi4+0x2a2>
    c2d6:	3801      	subs	r0, #1
    c2d8:	eba4 0408 	sub.w	r4, r4, r8
    c2dc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c2e0:	2700      	movs	r7, #0
    c2e2:	b11e      	cbz	r6, c2ec <__udivmoddi4+0x9c>
    c2e4:	40d4      	lsrs	r4, r2
    c2e6:	2300      	movs	r3, #0
    c2e8:	e9c6 4300 	strd	r4, r3, [r6]
    c2ec:	4639      	mov	r1, r7
    c2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c2f2:	2a00      	cmp	r2, #0
    c2f4:	d051      	beq.n	c39a <__udivmoddi4+0x14a>
    c2f6:	fab2 f282 	clz	r2, r2
    c2fa:	2a00      	cmp	r2, #0
    c2fc:	f040 80af 	bne.w	c45e <__udivmoddi4+0x20e>
    c300:	1b49      	subs	r1, r1, r5
    c302:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c306:	fa1f f885 	uxth.w	r8, r5
    c30a:	2701      	movs	r7, #1
    c30c:	0c23      	lsrs	r3, r4, #16
    c30e:	fbb1 fcfe 	udiv	ip, r1, lr
    c312:	fb0e 111c 	mls	r1, lr, ip, r1
    c316:	fb08 f00c 	mul.w	r0, r8, ip
    c31a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c31e:	4298      	cmp	r0, r3
    c320:	d90a      	bls.n	c338 <__udivmoddi4+0xe8>
    c322:	18eb      	adds	r3, r5, r3
    c324:	bf2c      	ite	cs
    c326:	2101      	movcs	r1, #1
    c328:	2100      	movcc	r1, #0
    c32a:	4298      	cmp	r0, r3
    c32c:	d902      	bls.n	c334 <__udivmoddi4+0xe4>
    c32e:	2900      	cmp	r1, #0
    c330:	f000 80d7 	beq.w	c4e2 <__udivmoddi4+0x292>
    c334:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c338:	1a19      	subs	r1, r3, r0
    c33a:	b2a3      	uxth	r3, r4
    c33c:	fbb1 f0fe 	udiv	r0, r1, lr
    c340:	fb0e 1110 	mls	r1, lr, r0, r1
    c344:	fb08 f800 	mul.w	r8, r8, r0
    c348:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c34c:	45a0      	cmp	r8, r4
    c34e:	d905      	bls.n	c35c <__udivmoddi4+0x10c>
    c350:	192c      	adds	r4, r5, r4
    c352:	d202      	bcs.n	c35a <__udivmoddi4+0x10a>
    c354:	45a0      	cmp	r8, r4
    c356:	f200 80c1 	bhi.w	c4dc <__udivmoddi4+0x28c>
    c35a:	3801      	subs	r0, #1
    c35c:	eba4 0408 	sub.w	r4, r4, r8
    c360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c364:	e7bd      	b.n	c2e2 <__udivmoddi4+0x92>
    c366:	428b      	cmp	r3, r1
    c368:	d908      	bls.n	c37c <__udivmoddi4+0x12c>
    c36a:	2e00      	cmp	r6, #0
    c36c:	d074      	beq.n	c458 <__udivmoddi4+0x208>
    c36e:	2700      	movs	r7, #0
    c370:	e9c6 0100 	strd	r0, r1, [r6]
    c374:	4638      	mov	r0, r7
    c376:	4639      	mov	r1, r7
    c378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c37c:	fab3 f783 	clz	r7, r3
    c380:	b967      	cbnz	r7, c39c <__udivmoddi4+0x14c>
    c382:	428b      	cmp	r3, r1
    c384:	f0c0 80a4 	bcc.w	c4d0 <__udivmoddi4+0x280>
    c388:	4282      	cmp	r2, r0
    c38a:	f240 80a1 	bls.w	c4d0 <__udivmoddi4+0x280>
    c38e:	4638      	mov	r0, r7
    c390:	2e00      	cmp	r6, #0
    c392:	d0ab      	beq.n	c2ec <__udivmoddi4+0x9c>
    c394:	e9c6 4900 	strd	r4, r9, [r6]
    c398:	e7a8      	b.n	c2ec <__udivmoddi4+0x9c>
    c39a:	deff      	udf	#255	; 0xff
    c39c:	f1c7 0520 	rsb	r5, r7, #32
    c3a0:	40bb      	lsls	r3, r7
    c3a2:	fa02 fc07 	lsl.w	ip, r2, r7
    c3a6:	fa01 f407 	lsl.w	r4, r1, r7
    c3aa:	40ea      	lsrs	r2, r5
    c3ac:	fa20 f805 	lsr.w	r8, r0, r5
    c3b0:	40e9      	lsrs	r1, r5
    c3b2:	fa00 fe07 	lsl.w	lr, r0, r7
    c3b6:	431a      	orrs	r2, r3
    c3b8:	ea48 0404 	orr.w	r4, r8, r4
    c3bc:	ea4f 4812 	mov.w	r8, r2, lsr #16
    c3c0:	0c20      	lsrs	r0, r4, #16
    c3c2:	fa1f f982 	uxth.w	r9, r2
    c3c6:	fbb1 faf8 	udiv	sl, r1, r8
    c3ca:	fb08 111a 	mls	r1, r8, sl, r1
    c3ce:	fb0a fb09 	mul.w	fp, sl, r9
    c3d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    c3d6:	458b      	cmp	fp, r1
    c3d8:	d90a      	bls.n	c3f0 <__udivmoddi4+0x1a0>
    c3da:	1851      	adds	r1, r2, r1
    c3dc:	bf2c      	ite	cs
    c3de:	2301      	movcs	r3, #1
    c3e0:	2300      	movcc	r3, #0
    c3e2:	458b      	cmp	fp, r1
    c3e4:	d902      	bls.n	c3ec <__udivmoddi4+0x19c>
    c3e6:	2b00      	cmp	r3, #0
    c3e8:	f000 8088 	beq.w	c4fc <__udivmoddi4+0x2ac>
    c3ec:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    c3f0:	eba1 010b 	sub.w	r1, r1, fp
    c3f4:	b2a4      	uxth	r4, r4
    c3f6:	fbb1 f0f8 	udiv	r0, r1, r8
    c3fa:	fb08 1110 	mls	r1, r8, r0, r1
    c3fe:	fb00 f909 	mul.w	r9, r0, r9
    c402:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
    c406:	4589      	cmp	r9, r1
    c408:	d904      	bls.n	c414 <__udivmoddi4+0x1c4>
    c40a:	1851      	adds	r1, r2, r1
    c40c:	d201      	bcs.n	c412 <__udivmoddi4+0x1c2>
    c40e:	4589      	cmp	r9, r1
    c410:	d87b      	bhi.n	c50a <__udivmoddi4+0x2ba>
    c412:	3801      	subs	r0, #1
    c414:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c418:	eba1 0109 	sub.w	r1, r1, r9
    c41c:	fba0 890c 	umull	r8, r9, r0, ip
    c420:	4549      	cmp	r1, r9
    c422:	4644      	mov	r4, r8
    c424:	464b      	mov	r3, r9
    c426:	d302      	bcc.n	c42e <__udivmoddi4+0x1de>
    c428:	d106      	bne.n	c438 <__udivmoddi4+0x1e8>
    c42a:	45c6      	cmp	lr, r8
    c42c:	d204      	bcs.n	c438 <__udivmoddi4+0x1e8>
    c42e:	3801      	subs	r0, #1
    c430:	ebb8 040c 	subs.w	r4, r8, ip
    c434:	eb69 0302 	sbc.w	r3, r9, r2
    c438:	2e00      	cmp	r6, #0
    c43a:	d05d      	beq.n	c4f8 <__udivmoddi4+0x2a8>
    c43c:	ebbe 0204 	subs.w	r2, lr, r4
    c440:	eb61 0103 	sbc.w	r1, r1, r3
    c444:	fa01 f505 	lsl.w	r5, r1, r5
    c448:	fa22 f307 	lsr.w	r3, r2, r7
    c44c:	40f9      	lsrs	r1, r7
    c44e:	2700      	movs	r7, #0
    c450:	431d      	orrs	r5, r3
    c452:	e9c6 5100 	strd	r5, r1, [r6]
    c456:	e749      	b.n	c2ec <__udivmoddi4+0x9c>
    c458:	4637      	mov	r7, r6
    c45a:	4630      	mov	r0, r6
    c45c:	e746      	b.n	c2ec <__udivmoddi4+0x9c>
    c45e:	f1c2 0020 	rsb	r0, r2, #32
    c462:	4095      	lsls	r5, r2
    c464:	fa01 f702 	lsl.w	r7, r1, r2
    c468:	fa21 f300 	lsr.w	r3, r1, r0
    c46c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c470:	fa24 f100 	lsr.w	r1, r4, r0
    c474:	fa1f f885 	uxth.w	r8, r5
    c478:	4094      	lsls	r4, r2
    c47a:	4339      	orrs	r1, r7
    c47c:	fbb3 f0fe 	udiv	r0, r3, lr
    c480:	0c0f      	lsrs	r7, r1, #16
    c482:	fb0e 3310 	mls	r3, lr, r0, r3
    c486:	fb00 fc08 	mul.w	ip, r0, r8
    c48a:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    c48e:	459c      	cmp	ip, r3
    c490:	d907      	bls.n	c4a2 <__udivmoddi4+0x252>
    c492:	18eb      	adds	r3, r5, r3
    c494:	bf2c      	ite	cs
    c496:	2701      	movcs	r7, #1
    c498:	2700      	movcc	r7, #0
    c49a:	459c      	cmp	ip, r3
    c49c:	d900      	bls.n	c4a0 <__udivmoddi4+0x250>
    c49e:	b38f      	cbz	r7, c504 <__udivmoddi4+0x2b4>
    c4a0:	3801      	subs	r0, #1
    c4a2:	eba3 030c 	sub.w	r3, r3, ip
    c4a6:	b289      	uxth	r1, r1
    c4a8:	fbb3 f7fe 	udiv	r7, r3, lr
    c4ac:	fb0e 3317 	mls	r3, lr, r7, r3
    c4b0:	fb07 fc08 	mul.w	ip, r7, r8
    c4b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c4b8:	458c      	cmp	ip, r1
    c4ba:	d904      	bls.n	c4c6 <__udivmoddi4+0x276>
    c4bc:	1869      	adds	r1, r5, r1
    c4be:	d201      	bcs.n	c4c4 <__udivmoddi4+0x274>
    c4c0:	458c      	cmp	ip, r1
    c4c2:	d825      	bhi.n	c510 <__udivmoddi4+0x2c0>
    c4c4:	3f01      	subs	r7, #1
    c4c6:	eba1 010c 	sub.w	r1, r1, ip
    c4ca:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
    c4ce:	e71d      	b.n	c30c <__udivmoddi4+0xbc>
    c4d0:	1a84      	subs	r4, r0, r2
    c4d2:	eb61 0303 	sbc.w	r3, r1, r3
    c4d6:	2001      	movs	r0, #1
    c4d8:	4699      	mov	r9, r3
    c4da:	e759      	b.n	c390 <__udivmoddi4+0x140>
    c4dc:	3802      	subs	r0, #2
    c4de:	442c      	add	r4, r5
    c4e0:	e73c      	b.n	c35c <__udivmoddi4+0x10c>
    c4e2:	f1ac 0c02 	sub.w	ip, ip, #2
    c4e6:	442b      	add	r3, r5
    c4e8:	e726      	b.n	c338 <__udivmoddi4+0xe8>
    c4ea:	f1ac 0c02 	sub.w	ip, ip, #2
    c4ee:	442b      	add	r3, r5
    c4f0:	e6e0      	b.n	c2b4 <__udivmoddi4+0x64>
    c4f2:	3802      	subs	r0, #2
    c4f4:	442c      	add	r4, r5
    c4f6:	e6ef      	b.n	c2d8 <__udivmoddi4+0x88>
    c4f8:	4637      	mov	r7, r6
    c4fa:	e6f7      	b.n	c2ec <__udivmoddi4+0x9c>
    c4fc:	f1aa 0a02 	sub.w	sl, sl, #2
    c500:	4411      	add	r1, r2
    c502:	e775      	b.n	c3f0 <__udivmoddi4+0x1a0>
    c504:	3802      	subs	r0, #2
    c506:	442b      	add	r3, r5
    c508:	e7cb      	b.n	c4a2 <__udivmoddi4+0x252>
    c50a:	3802      	subs	r0, #2
    c50c:	4411      	add	r1, r2
    c50e:	e781      	b.n	c414 <__udivmoddi4+0x1c4>
    c510:	3f02      	subs	r7, #2
    c512:	4429      	add	r1, r5
    c514:	e7d7      	b.n	c4c6 <__udivmoddi4+0x276>
    c516:	bf00      	nop

0000c518 <__aeabi_idiv0>:
    c518:	4770      	bx	lr
    c51a:	bf00      	nop

0000c51c <bsd_recoverable_error_handler>:
struct at_param_list m_param_list;

/**@brief Recoverable BSD library error. */
void bsd_recoverable_error_handler(uint32_t err)
{
	LOG_ERR("bsdlib recoverable error: %u", err);
    c51c:	2301      	movs	r3, #1
    c51e:	f04f 0200 	mov.w	r2, #0
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    c522:	4906      	ldr	r1, [pc, #24]	; (c53c <bsd_recoverable_error_handler+0x20>)
    c524:	f363 0207 	bfi	r2, r3, #0, #8
    c528:	4b05      	ldr	r3, [pc, #20]	; (c540 <bsd_recoverable_error_handler+0x24>)
    c52a:	1a5b      	subs	r3, r3, r1
    c52c:	08db      	lsrs	r3, r3, #3
    c52e:	4601      	mov	r1, r0
    c530:	f363 128f 	bfi	r2, r3, #6, #10
    c534:	4803      	ldr	r0, [pc, #12]	; (c544 <bsd_recoverable_error_handler+0x28>)
    c536:	f010 b84f 	b.w	1c5d8 <log_1>
    c53a:	bf00      	nop
    c53c:	0001edc4 	.word	0x0001edc4
    c540:	0001edc4 	.word	0x0001edc4
    c544:	0001f390 	.word	0x0001f390

0000c548 <start_execute>:

void start_execute(void)
{
	int err;

	LOG_INF("Serial LTE Modem");
    c548:	2303      	movs	r3, #3
    c54a:	f04f 0100 	mov.w	r1, #0
{
    c54e:	b510      	push	{r4, lr}
	LOG_INF("Serial LTE Modem");
    c550:	f363 0107 	bfi	r1, r3, #0, #8
    c554:	4c14      	ldr	r4, [pc, #80]	; (c5a8 <start_execute+0x60>)
    c556:	4b15      	ldr	r3, [pc, #84]	; (c5ac <start_execute+0x64>)
    c558:	4815      	ldr	r0, [pc, #84]	; (c5b0 <start_execute+0x68>)
    c55a:	1ae4      	subs	r4, r4, r3
    c55c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    c560:	f364 118f 	bfi	r1, r4, #6, #10
    c564:	f010 f82b 	bl	1c5be <log_0>
	err = slm_at_host_init();
    c568:	f000 f902 	bl	c770 <slm_at_host_init>
	if (err != 0) {
    c56c:	4601      	mov	r1, r0
    c56e:	b158      	cbz	r0, c588 <start_execute+0x40>
		LOG_ERR("Failed to init at_host: %d", err);
    c570:	f04f 0200 	mov.w	r2, #0
    c574:	2301      	movs	r3, #1
    c576:	480f      	ldr	r0, [pc, #60]	; (c5b4 <start_execute+0x6c>)
    c578:	f363 0207 	bfi	r2, r3, #0, #8
    c57c:	f364 128f 	bfi	r2, r4, #6, #10
	err = at_params_list_init(&m_param_list, CONFIG_SLM_AT_MAX_PARAM);
	if (err) {
		LOG_ERR("Failed to init AT Parser: %d", err);
		return;
	}
}
    c580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Failed to init AT Parser: %d", err);
    c584:	f010 b828 	b.w	1c5d8 <log_1>
	err = at_params_list_init(&m_param_list, CONFIG_SLM_AT_MAX_PARAM);
    c588:	2108      	movs	r1, #8
    c58a:	480b      	ldr	r0, [pc, #44]	; (c5b8 <start_execute+0x70>)
    c58c:	f011 fdc3 	bl	1e116 <at_params_list_init>
	if (err) {
    c590:	4601      	mov	r1, r0
    c592:	b140      	cbz	r0, c5a6 <start_execute+0x5e>
		LOG_ERR("Failed to init AT Parser: %d", err);
    c594:	f04f 0200 	mov.w	r2, #0
    c598:	2301      	movs	r3, #1
    c59a:	f363 0207 	bfi	r2, r3, #0, #8
    c59e:	f364 128f 	bfi	r2, r4, #6, #10
    c5a2:	4806      	ldr	r0, [pc, #24]	; (c5bc <start_execute+0x74>)
    c5a4:	e7ec      	b.n	c580 <start_execute+0x38>
}
    c5a6:	bd10      	pop	{r4, pc}
    c5a8:	0001edc4 	.word	0x0001edc4
    c5ac:	0001edc4 	.word	0x0001edc4
    c5b0:	0001f3ad 	.word	0x0001f3ad
    c5b4:	0001f3be 	.word	0x0001f3be
    c5b8:	200200e8 	.word	0x200200e8
    c5bc:	0001f3d9 	.word	0x0001f3d9

0000c5c0 <write_uart_string>:

/* forward declaration */
void slm_at_host_uninit(void);

static inline void write_uart_string(char *str, size_t len)
{
    c5c0:	b570      	push	{r4, r5, r6, lr}
    c5c2:	4604      	mov	r4, r0
	LOG_HEXDUMP_DBG(str, len, "TX");

	for (size_t i = 0; i < len; i++) {
		uart_poll_out(uart_dev, str[i]);
    c5c4:	4e05      	ldr	r6, [pc, #20]	; (c5dc <write_uart_string+0x1c>)
    c5c6:	1845      	adds	r5, r0, r1
	for (size_t i = 0; i < len; i++) {
    c5c8:	42ac      	cmp	r4, r5
    c5ca:	d100      	bne.n	c5ce <write_uart_string+0xe>
	}
}
    c5cc:	bd70      	pop	{r4, r5, r6, pc}
		uart_poll_out(uart_dev, str[i]);
    c5ce:	6830      	ldr	r0, [r6, #0]
    c5d0:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    c5d4:	6843      	ldr	r3, [r0, #4]
    c5d6:	685b      	ldr	r3, [r3, #4]
    c5d8:	4798      	blx	r3
    c5da:	e7f5      	b.n	c5c8 <write_uart_string+0x8>
    c5dc:	20020104 	.word	0x20020104

0000c5e0 <isr>:
	at_buf_len = cmd_len;
	cmd_len = 0;
}

static void isr(struct device *dev)
{
    c5e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5e4:	4607      	mov	r7, r0
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
    c5e6:	6843      	ldr	r3, [r0, #4]
    c5e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c5ea:	b103      	cbz	r3, c5ee <isr+0xe>
		return api->irq_update(dev);
    c5ec:	4798      	blx	r3
	if (api->irq_rx_ready) {
    c5ee:	687b      	ldr	r3, [r7, #4]
    c5f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c5f2:	b19b      	cbz	r3, c61c <isr+0x3c>
		return api->irq_rx_ready(dev);
    c5f4:	4638      	mov	r0, r7
    c5f6:	4798      	blx	r3
	u8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
    c5f8:	b180      	cbz	r0, c61c <isr+0x3c>
    c5fa:	4d4f      	ldr	r5, [pc, #316]	; (c738 <isr+0x158>)
		LOG_ERR("Invalid termination mode: %d", term_mode);
    c5fc:	4b4f      	ldr	r3, [pc, #316]	; (c73c <isr+0x15c>)
	cmd_len += 1;
    c5fe:	4e50      	ldr	r6, [pc, #320]	; (c740 <isr+0x160>)
		LOG_ERR("Invalid termination mode: %d", term_mode);
    c600:	1aed      	subs	r5, r5, r3
	if (inside_quotes) {
    c602:	f8df b168 	ldr.w	fp, [pc, #360]	; c76c <isr+0x18c>
		LOG_ERR("Invalid termination mode: %d", term_mode);
    c606:	f3c5 05c9 	ubfx	r5, r5, #3, #10
	if (api->fifo_read) {
    c60a:	687b      	ldr	r3, [r7, #4]
    c60c:	699b      	ldr	r3, [r3, #24]
    c60e:	b12b      	cbz	r3, c61c <isr+0x3c>
		return api->fifo_read(dev, rx_data, size);
    c610:	2201      	movs	r2, #1
    c612:	f10d 0107 	add.w	r1, sp, #7
    c616:	4638      	mov	r0, r7
    c618:	4798      	blx	r3
		return;
	}

	while (uart_fifo_read(dev, &character, 1)) {
    c61a:	b910      	cbnz	r0, c622 <isr+0x42>
		uart_rx_handler(character);
	}
}
    c61c:	b003      	add	sp, #12
    c61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	cmd_len += 1;
    c622:	6832      	ldr	r2, [r6, #0]
		uart_rx_handler(character);
    c624:	f89d 1007 	ldrb.w	r1, [sp, #7]
	cmd_len += 1;
    c628:	1c54      	adds	r4, r2, #1
	switch (character) {
    c62a:	2922      	cmp	r1, #34	; 0x22
	cmd_len += 1;
    c62c:	6034      	str	r4, [r6, #0]
	switch (character) {
    c62e:	d019      	beq.n	c664 <isr+0x84>
    c630:	297f      	cmp	r1, #127	; 0x7f
    c632:	d001      	beq.n	c638 <isr+0x58>
    c634:	2908      	cmp	r1, #8
    c636:	d11b      	bne.n	c670 <isr+0x90>
		pos = pos ? pos - 1 : 0;
    c638:	b102      	cbz	r2, c63c <isr+0x5c>
    c63a:	3a01      	subs	r2, #1
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    c63c:	2c02      	cmp	r4, #2
    c63e:	bf38      	it	cc
    c640:	2402      	movcc	r4, #2
		at_buf[pos] = 0;
    c642:	2000      	movs	r0, #0
    c644:	4b3f      	ldr	r3, [pc, #252]	; (c744 <isr+0x164>)
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    c646:	3c02      	subs	r4, #2
		at_buf[pos] = 0;
    c648:	5498      	strb	r0, [r3, r2]
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    c64a:	6034      	str	r4, [r6, #0]
	if (inside_quotes) {
    c64c:	f89b 3000 	ldrb.w	r3, [fp]
    c650:	2b00      	cmp	r3, #0
    c652:	d1da      	bne.n	c60a <isr+0x2a>
	switch (term_mode) {
    c654:	4b3c      	ldr	r3, [pc, #240]	; (c748 <isr+0x168>)
    c656:	781b      	ldrb	r3, [r3, #0]
    c658:	2b03      	cmp	r3, #3
    c65a:	d85e      	bhi.n	c71a <isr+0x13a>
    c65c:	e8df f003 	tbb	[pc, r3]
    c660:	554d2f2f 	.word	0x554d2f2f
		inside_quotes = !inside_quotes;
    c664:	f89b 3000 	ldrb.w	r3, [fp]
    c668:	f083 0301 	eor.w	r3, r3, #1
    c66c:	f88b 3000 	strb.w	r3, [fp]
		if (cmd_len > AT_MAX_CMD_LEN) {
    c670:	f640 238c 	movw	r3, #2700	; 0xa8c
    c674:	429c      	cmp	r4, r3
    c676:	d90f      	bls.n	c698 <isr+0xb8>
			LOG_ERR("Buffer overflow, dropping '%c'\n", character);
    c678:	f028 023f 	bic.w	r2, r8, #63	; 0x3f
    c67c:	f042 0201 	orr.w	r2, r2, #1
    c680:	f362 0807 	bfi	r8, r2, #0, #8
    c684:	f365 188f 	bfi	r8, r5, #6, #10
    c688:	4642      	mov	r2, r8
    c68a:	4830      	ldr	r0, [pc, #192]	; (c74c <isr+0x16c>)
    c68c:	f00f ffa4 	bl	1c5d8 <log_1>
			cmd_len = AT_MAX_CMD_LEN;
    c690:	f640 238c 	movw	r3, #2700	; 0xa8c
	cmd_len = 0;
    c694:	6033      	str	r3, [r6, #0]
    c696:	e7b8      	b.n	c60a <isr+0x2a>
		} else if (cmd_len < 1) {
    c698:	b974      	cbnz	r4, c6b8 <isr+0xd8>
			LOG_ERR("Invalid AT command length: %d", cmd_len);
    c69a:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    c69e:	f043 0301 	orr.w	r3, r3, #1
    c6a2:	f363 0907 	bfi	r9, r3, #0, #8
    c6a6:	f365 198f 	bfi	r9, r5, #6, #10
    c6aa:	464a      	mov	r2, r9
    c6ac:	4621      	mov	r1, r4
    c6ae:	4828      	ldr	r0, [pc, #160]	; (c750 <isr+0x170>)
    c6b0:	f00f ff92 	bl	1c5d8 <log_1>
			cmd_len = 0;
    c6b4:	6034      	str	r4, [r6, #0]
			return;
    c6b6:	e7a8      	b.n	c60a <isr+0x2a>
		at_buf[pos] = character;
    c6b8:	4b22      	ldr	r3, [pc, #136]	; (c744 <isr+0x164>)
    c6ba:	5499      	strb	r1, [r3, r2]
		break;
    c6bc:	e7c6      	b.n	c64c <isr+0x6c>
		if (character == termination[term_mode]) {
    c6be:	4a25      	ldr	r2, [pc, #148]	; (c754 <isr+0x174>)
    c6c0:	5cd3      	ldrb	r3, [r2, r3]
    c6c2:	428b      	cmp	r3, r1
		if ((at_buf[pos - 1]) &&
    c6c4:	d1a1      	bne.n	c60a <isr+0x2a>
	uart_irq_rx_disable(uart_dev);
    c6c6:	4b24      	ldr	r3, [pc, #144]	; (c758 <isr+0x178>)
    c6c8:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
    c6ca:	6843      	ldr	r3, [r0, #4]
    c6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c6ce:	b103      	cbz	r3, c6d2 <isr+0xf2>
		api->irq_rx_disable(dev);
    c6d0:	4798      	blx	r3
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c6d2:	4922      	ldr	r1, [pc, #136]	; (c75c <isr+0x17c>)
    c6d4:	e8d1 3fef 	ldaex	r3, [r1]
    c6d8:	f043 0201 	orr.w	r2, r3, #1
    c6dc:	e8c1 2fe0 	stlex	r0, r2, [r1]
    c6e0:	2800      	cmp	r0, #0
    c6e2:	d1f7      	bne.n	c6d4 <isr+0xf4>
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    c6e4:	07db      	lsls	r3, r3, #31
    c6e6:	d403      	bmi.n	c6f0 <isr+0x110>
		k_queue_append(&work_q->queue, work);
    c6e8:	3908      	subs	r1, #8
    c6ea:	481d      	ldr	r0, [pc, #116]	; (c760 <isr+0x180>)
    c6ec:	f011 feab 	bl	1e446 <k_queue_append>
	at_buf_len = cmd_len;
    c6f0:	4b1c      	ldr	r3, [pc, #112]	; (c764 <isr+0x184>)
    c6f2:	6832      	ldr	r2, [r6, #0]
    c6f4:	601a      	str	r2, [r3, #0]
	cmd_len = 0;
    c6f6:	2300      	movs	r3, #0
    c6f8:	e7cc      	b.n	c694 <isr+0xb4>
		if ((at_buf[pos - 1]) &&
    c6fa:	4b12      	ldr	r3, [pc, #72]	; (c744 <isr+0x164>)
    c6fc:	441a      	add	r2, r3
    c6fe:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    c702:	2b00      	cmp	r3, #0
    c704:	d081      	beq.n	c60a <isr+0x2a>
    c706:	290a      	cmp	r1, #10
    c708:	e7dc      	b.n	c6c4 <isr+0xe4>
		if ((at_buf[pos - 1] == '\r') && (character == '\n')) {
    c70a:	4b0e      	ldr	r3, [pc, #56]	; (c744 <isr+0x164>)
    c70c:	441a      	add	r2, r3
    c70e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    c712:	2b0d      	cmp	r3, #13
    c714:	f47f af79 	bne.w	c60a <isr+0x2a>
    c718:	e7f5      	b.n	c706 <isr+0x126>
		LOG_ERR("Invalid termination mode: %d", term_mode);
    c71a:	f02a 023f 	bic.w	r2, sl, #63	; 0x3f
    c71e:	f042 0201 	orr.w	r2, r2, #1
    c722:	f362 0a07 	bfi	sl, r2, #0, #8
    c726:	f365 1a8f 	bfi	sl, r5, #6, #10
    c72a:	4652      	mov	r2, sl
    c72c:	4619      	mov	r1, r3
    c72e:	480e      	ldr	r0, [pc, #56]	; (c768 <isr+0x188>)
    c730:	f00f ff52 	bl	1c5d8 <log_1>
    c734:	e769      	b.n	c60a <isr+0x2a>
    c736:	bf00      	nop
    c738:	0001edd4 	.word	0x0001edd4
    c73c:	0001edc4 	.word	0x0001edc4
    c740:	200200f4 	.word	0x200200f4
    c744:	20024e26 	.word	0x20024e26
    c748:	2002633f 	.word	0x2002633f
    c74c:	0001f49a 	.word	0x0001f49a
    c750:	0001f4ba 	.word	0x0001f4ba
    c754:	0001f63b 	.word	0x0001f63b
    c758:	20020104 	.word	0x20020104
    c75c:	20020100 	.word	0x20020100
    c760:	20024d40 	.word	0x20024d40
    c764:	200200f0 	.word	0x200200f0
    c768:	0001f4d8 	.word	0x0001f4d8
    c76c:	2002633e 	.word	0x2002633e

0000c770 <slm_at_host_init>:
{
	write_uart_string(str, strlen(str));
}

int slm_at_host_init(void)
{
    c770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	enum select_uart uart_id = CONFIG_SLM_CONNECT_UART;
	enum term_modes mode = CONFIG_SLM_AT_HOST_TERMINATION;

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
    c772:	2203      	movs	r2, #3
    c774:	4b49      	ldr	r3, [pc, #292]	; (c89c <slm_at_host_init+0x12c>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
    c776:	494a      	ldr	r1, [pc, #296]	; (c8a0 <slm_at_host_init+0x130>)
    c778:	2000      	movs	r0, #0
		term_mode = mode;
    c77a:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
    c77c:	f005 fadc 	bl	11d38 <at_notif_register_handler>
	if (err != 0) {
    c780:	4c48      	ldr	r4, [pc, #288]	; (c8a4 <slm_at_host_init+0x134>)
    c782:	4b49      	ldr	r3, [pc, #292]	; (c8a8 <slm_at_host_init+0x138>)
    c784:	4605      	mov	r5, r0
    c786:	1ae4      	subs	r4, r4, r3
    c788:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    c78c:	b168      	cbz	r0, c7aa <slm_at_host_init+0x3a>
		LOG_ERR("Can't register handler err=%d", err);
    c78e:	f04f 0200 	mov.w	r2, #0
    c792:	2301      	movs	r3, #1
    c794:	f363 0207 	bfi	r2, r3, #0, #8
    c798:	4601      	mov	r1, r0
    c79a:	f364 128f 	bfi	r2, r4, #6, #10
    c79e:	4843      	ldr	r0, [pc, #268]	; (c8ac <slm_at_host_init+0x13c>)
    c7a0:	f00f ff1a 	bl	1c5d8 <log_1>
		return -EFAULT;
	}
#endif
	LOG_DBG("at_host init done");
	return err;
}
    c7a4:	4628      	mov	r0, r5
    c7a6:	b003      	add	sp, #12
    c7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    c7aa:	4841      	ldr	r0, [pc, #260]	; (c8b0 <slm_at_host_init+0x140>)
    c7ac:	f00e f8f2 	bl	1a994 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
    c7b0:	4d40      	ldr	r5, [pc, #256]	; (c8b4 <slm_at_host_init+0x144>)
    c7b2:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
    c7b4:	b1e8      	cbz	r0, c7f2 <slm_at_host_init+0x82>
			LOG_ERR("UART check failed: %d. "
    c7b6:	4f40      	ldr	r7, [pc, #256]	; (c8b8 <slm_at_host_init+0x148>)
		err = uart_err_check(uart_dev);
    c7b8:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
    c7ba:	6843      	ldr	r3, [r0, #4]
    c7bc:	689b      	ldr	r3, [r3, #8]
    c7be:	2b00      	cmp	r3, #0
    c7c0:	d048      	beq.n	c854 <slm_at_host_init+0xe4>
		return api->err_check(dev);
    c7c2:	4798      	blx	r3
		if (err) {
    c7c4:	4601      	mov	r1, r0
    c7c6:	2800      	cmp	r0, #0
    c7c8:	d044      	beq.n	c854 <slm_at_host_init+0xe4>
			LOG_ERR("UART check failed: %d. "
    c7ca:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
    c7ce:	f043 0301 	orr.w	r3, r3, #1
    c7d2:	f363 0607 	bfi	r6, r3, #0, #8
    c7d6:	f364 168f 	bfi	r6, r4, #6, #10
    c7da:	4632      	mov	r2, r6
    c7dc:	4638      	mov	r0, r7
    c7de:	f00f fefb 	bl	1c5d8 <log_1>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
    c7e2:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
    c7e4:	6843      	ldr	r3, [r0, #4]
    c7e6:	699b      	ldr	r3, [r3, #24]
    c7e8:	b9eb      	cbnz	r3, c826 <slm_at_host_init+0xb6>
	if (z_syscall_trap()) {
		return (s32_t) arch_syscall_invoke1(*(uintptr_t *)&ms, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(ms);
    c7ea:	200a      	movs	r0, #10
    c7ec:	f00e ff76 	bl	1b6dc <z_impl_k_sleep>
    c7f0:	e7e2      	b.n	c7b8 <slm_at_host_init+0x48>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
    c7f2:	2301      	movs	r3, #1
    c7f4:	f04f 0200 	mov.w	r2, #0
    c7f8:	f363 0207 	bfi	r2, r3, #0, #8
    c7fc:	f364 128f 	bfi	r2, r4, #6, #10
    c800:	492b      	ldr	r1, [pc, #172]	; (c8b0 <slm_at_host_init+0x140>)
    c802:	482e      	ldr	r0, [pc, #184]	; (c8bc <slm_at_host_init+0x14c>)
    c804:	f00f fee8 	bl	1c5d8 <log_1>
		LOG_ERR("UART can not be initialized: %d", err);
    c808:	f04f 0200 	mov.w	r2, #0
    c80c:	2301      	movs	r3, #1
    c80e:	f06f 0115 	mvn.w	r1, #21
    c812:	f363 0207 	bfi	r2, r3, #0, #8
    c816:	482a      	ldr	r0, [pc, #168]	; (c8c0 <slm_at_host_init+0x150>)
    c818:	f364 128f 	bfi	r2, r4, #6, #10
		LOG_ERR("GPS could not be initialized: %d", err);
    c81c:	f00f fedc 	bl	1c5d8 <log_1>
		return -EFAULT;
    c820:	f06f 050d 	mvn.w	r5, #13
    c824:	e7be      	b.n	c7a4 <slm_at_host_init+0x34>
		return api->fifo_read(dev, rx_data, size);
    c826:	2201      	movs	r2, #1
    c828:	f10d 0107 	add.w	r1, sp, #7
    c82c:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
    c82e:	2800      	cmp	r0, #0
    c830:	d1d7      	bne.n	c7e2 <slm_at_host_init+0x72>
    c832:	e7da      	b.n	c7ea <slm_at_host_init+0x7a>
	err = slm_at_gps_init(slm_at_callback);
    c834:	4823      	ldr	r0, [pc, #140]	; (c8c4 <slm_at_host_init+0x154>)
    c836:	f001 fdcd 	bl	e3d4 <slm_at_gps_init>
	if (err) {
    c83a:	4605      	mov	r5, r0
    c83c:	2800      	cmp	r0, #0
    c83e:	d0b1      	beq.n	c7a4 <slm_at_host_init+0x34>
		LOG_ERR("GPS could not be initialized: %d", err);
    c840:	f04f 0200 	mov.w	r2, #0
    c844:	2301      	movs	r3, #1
    c846:	f363 0207 	bfi	r2, r3, #0, #8
    c84a:	4601      	mov	r1, r0
    c84c:	f364 128f 	bfi	r2, r4, #6, #10
    c850:	481d      	ldr	r0, [pc, #116]	; (c8c8 <slm_at_host_init+0x158>)
    c852:	e7e3      	b.n	c81c <slm_at_host_init+0xac>
	uart_irq_callback_set(uart_dev, isr);
    c854:	682a      	ldr	r2, [r5, #0]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
    c856:	6853      	ldr	r3, [r2, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    c858:	b123      	cbz	r3, c864 <slm_at_host_init+0xf4>
    c85a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    c85c:	b113      	cbz	r3, c864 <slm_at_host_init+0xf4>
		api->irq_callback_set(dev, cb, user_data);
    c85e:	491b      	ldr	r1, [pc, #108]	; (c8cc <slm_at_host_init+0x15c>)
    c860:	4610      	mov	r0, r2
    c862:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    c864:	2200      	movs	r2, #0
    c866:	4b1a      	ldr	r3, [pc, #104]	; (c8d0 <slm_at_host_init+0x160>)
    c868:	491a      	ldr	r1, [pc, #104]	; (c8d4 <slm_at_host_init+0x164>)
	uart_irq_rx_enable(uart_dev);
    c86a:	6828      	ldr	r0, [r5, #0]
    c86c:	e9c3 1201 	strd	r1, r2, [r3, #4]
    c870:	601a      	str	r2, [r3, #0]
    c872:	f00f faed 	bl	1be50 <uart_irq_rx_enable>
	write_uart_string(SLM_SYNC_STR, sizeof(SLM_SYNC_STR)-1);
    c876:	2107      	movs	r1, #7
    c878:	4817      	ldr	r0, [pc, #92]	; (c8d8 <slm_at_host_init+0x168>)
    c87a:	f7ff fea1 	bl	c5c0 <write_uart_string>
	err = slm_at_tcpip_init(slm_at_callback);
    c87e:	4811      	ldr	r0, [pc, #68]	; (c8c4 <slm_at_host_init+0x154>)
    c880:	f001 f94a 	bl	db18 <slm_at_tcpip_init>
	if (err) {
    c884:	4601      	mov	r1, r0
    c886:	2800      	cmp	r0, #0
    c888:	d0d4      	beq.n	c834 <slm_at_host_init+0xc4>
		LOG_ERR("TCPIP could not be initialized: %d", err);
    c88a:	f04f 0200 	mov.w	r2, #0
    c88e:	2301      	movs	r3, #1
    c890:	f363 0207 	bfi	r2, r3, #0, #8
    c894:	f364 128f 	bfi	r2, r4, #6, #10
    c898:	4810      	ldr	r0, [pc, #64]	; (c8dc <slm_at_host_init+0x16c>)
    c89a:	e7bf      	b.n	c81c <slm_at_host_init+0xac>
    c89c:	2002633f 	.word	0x2002633f
    c8a0:	0001be6f 	.word	0x0001be6f
    c8a4:	0001edd4 	.word	0x0001edd4
    c8a8:	0001edc4 	.word	0x0001edc4
    c8ac:	0001f4f5 	.word	0x0001f4f5
    c8b0:	0001f513 	.word	0x0001f513
    c8b4:	20020104 	.word	0x20020104
    c8b8:	0001f54a 	.word	0x0001f54a
    c8bc:	0001f51a 	.word	0x0001f51a
    c8c0:	0001f52a 	.word	0x0001f52a
    c8c4:	0001be5b 	.word	0x0001be5b
    c8c8:	0001f5aa 	.word	0x0001f5aa
    c8cc:	0000c5e1 	.word	0x0000c5e1
    c8d0:	200200f8 	.word	0x200200f8
    c8d4:	0000c971 	.word	0x0000c971
    c8d8:	0001f57f 	.word	0x0001f57f
    c8dc:	0001f587 	.word	0x0001f587

0000c8e0 <slm_at_host_uninit>:

void slm_at_host_uninit(void)
{
    c8e0:	b508      	push	{r3, lr}
	int err;

#if defined(CONFIG_SLM_TCPIP_AT_MODE)
	/* Uninitialize the TCPIP module */
	err = slm_at_tcpip_uninit();
    c8e2:	f00f fad6 	bl	1be92 <slm_at_tcpip_uninit>
	if (err) {
    c8e6:	4601      	mov	r1, r0
    c8e8:	b168      	cbz	r0, c906 <slm_at_host_uninit+0x26>
		LOG_WRN("TCPIP could not be uninitialized: %d", err);
    c8ea:	2302      	movs	r3, #2
    c8ec:	f04f 0200 	mov.w	r2, #0
    c8f0:	4819      	ldr	r0, [pc, #100]	; (c958 <slm_at_host_uninit+0x78>)
    c8f2:	f363 0207 	bfi	r2, r3, #0, #8
    c8f6:	4b19      	ldr	r3, [pc, #100]	; (c95c <slm_at_host_uninit+0x7c>)
    c8f8:	1a1b      	subs	r3, r3, r0
    c8fa:	08db      	lsrs	r3, r3, #3
    c8fc:	f363 128f 	bfi	r2, r3, #6, #10
    c900:	4817      	ldr	r0, [pc, #92]	; (c960 <slm_at_host_uninit+0x80>)
    c902:	f00f fe69 	bl	1c5d8 <log_1>
	}
#endif
#if defined(CONFIG_SLM_GPS_AT_MODE)
	/* Uninitialize the GPS module */
	err = slm_at_gps_uninit();
    c906:	f001 fdff 	bl	e508 <slm_at_gps_uninit>
	if (err) {
    c90a:	4601      	mov	r1, r0
    c90c:	b168      	cbz	r0, c92a <slm_at_host_uninit+0x4a>
		LOG_WRN("GPS could not be uninitialized: %d", err);
    c90e:	2302      	movs	r3, #2
    c910:	f04f 0200 	mov.w	r2, #0
    c914:	4810      	ldr	r0, [pc, #64]	; (c958 <slm_at_host_uninit+0x78>)
    c916:	f363 0207 	bfi	r2, r3, #0, #8
    c91a:	4b10      	ldr	r3, [pc, #64]	; (c95c <slm_at_host_uninit+0x7c>)
    c91c:	1a1b      	subs	r3, r3, r0
    c91e:	08db      	lsrs	r3, r3, #3
    c920:	f363 128f 	bfi	r2, r3, #6, #10
    c924:	480f      	ldr	r0, [pc, #60]	; (c964 <slm_at_host_uninit+0x84>)
    c926:	f00f fe57 	bl	1c5d8 <log_1>
	}
#endif
	err = at_notif_deregister_handler(NULL, response_handler);
    c92a:	490f      	ldr	r1, [pc, #60]	; (c968 <slm_at_host_uninit+0x88>)
    c92c:	2000      	movs	r0, #0
    c92e:	f005 fa53 	bl	11dd8 <at_notif_deregister_handler>
	if (err != 0) {
    c932:	4601      	mov	r1, r0
    c934:	b178      	cbz	r0, c956 <slm_at_host_uninit+0x76>
		LOG_WRN("Can't deregister handler err=%d", err);
    c936:	2302      	movs	r3, #2
    c938:	f04f 0200 	mov.w	r2, #0
    c93c:	4806      	ldr	r0, [pc, #24]	; (c958 <slm_at_host_uninit+0x78>)
    c93e:	f363 0207 	bfi	r2, r3, #0, #8
    c942:	4b06      	ldr	r3, [pc, #24]	; (c95c <slm_at_host_uninit+0x7c>)
    c944:	1a1b      	subs	r3, r3, r0
    c946:	08db      	lsrs	r3, r3, #3
    c948:	f363 128f 	bfi	r2, r3, #6, #10
    c94c:	4807      	ldr	r0, [pc, #28]	; (c96c <slm_at_host_uninit+0x8c>)
	if (err != 0) {
		LOG_WRN("Can't power off uart err=%d", err);
	}
#endif
	LOG_DBG("at_host uninit done");
}
    c94e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_WRN("Can't deregister handler err=%d", err);
    c952:	f00f be41 	b.w	1c5d8 <log_1>
}
    c956:	bd08      	pop	{r3, pc}
    c958:	0001edc4 	.word	0x0001edc4
    c95c:	0001edd4 	.word	0x0001edd4
    c960:	0001f5cb 	.word	0x0001f5cb
    c964:	0001f5f0 	.word	0x0001f5f0
    c968:	0001be6f 	.word	0x0001be6f
    c96c:	0001f613 	.word	0x0001f613

0000c970 <cmd_send>:
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    c970:	4a68      	ldr	r2, [pc, #416]	; (cb14 <cmd_send+0x1a4>)
    c972:	4b69      	ldr	r3, [pc, #420]	; (cb18 <cmd_send+0x1a8>)
    c974:	6811      	ldr	r1, [r2, #0]
    c976:	f640 228b 	movw	r2, #2699	; 0xa8b
    c97a:	4291      	cmp	r1, r2
    c97c:	bf28      	it	cs
    c97e:	4611      	movcs	r1, r2
    c980:	2200      	movs	r2, #0
{
    c982:	b530      	push	{r4, r5, lr}
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    c984:	461c      	mov	r4, r3
    c986:	4865      	ldr	r0, [pc, #404]	; (cb1c <cmd_send+0x1ac>)
{
    c988:	b087      	sub	sp, #28
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    c98a:	545a      	strb	r2, [r3, r1]
static inline bool slm_at_cmd_cmp(const char *cmd,
				const char *slm_cmd,
				u8_t length)
{
	for (int i = 0; i < length; i++) {
		if (toupper(*(cmd + i)) != *(slm_cmd + i)) {
    c98c:	f814 1b01 	ldrb.w	r1, [r4], #1
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
}

static inline int toupper(int chr)
{
	return (int)((chr >= (int)'a' && chr <=
    c990:	f1a1 0561 	sub.w	r5, r1, #97	; 0x61
    c994:	2d19      	cmp	r5, #25
    c996:	f810 5b01 	ldrb.w	r5, [r0], #1
    c99a:	bf98      	it	ls
    c99c:	3920      	subls	r1, #32
    c99e:	428d      	cmp	r5, r1
    c9a0:	d105      	bne.n	c9ae <cmd_send+0x3e>
	for (int i = 0; i < length; i++) {
    c9a2:	3201      	adds	r2, #1
    c9a4:	2a0a      	cmp	r2, #10
    c9a6:	d1f1      	bne.n	c98c <cmd_send+0x1c>
		write_uart_string(SLM_VERSION, sizeof(SLM_VERSION));
    c9a8:	2110      	movs	r1, #16
    c9aa:	485d      	ldr	r0, [pc, #372]	; (cb20 <cmd_send+0x1b0>)
    c9ac:	e079      	b.n	caa2 <cmd_send+0x132>
    c9ae:	2100      	movs	r1, #0
    c9b0:	485c      	ldr	r0, [pc, #368]	; (cb24 <cmd_send+0x1b4>)
		if (toupper(*(cmd + i)) != *(slm_cmd + i)) {
    c9b2:	f813 2b01 	ldrb.w	r2, [r3], #1
    c9b6:	f1a2 0461 	sub.w	r4, r2, #97	; 0x61
    c9ba:	2c19      	cmp	r4, #25
    c9bc:	f810 4b01 	ldrb.w	r4, [r0], #1
    c9c0:	bf98      	it	ls
    c9c2:	3a20      	subls	r2, #32
    c9c4:	4294      	cmp	r4, r2
    c9c6:	d17a      	bne.n	cabe <cmd_send+0x14e>
	for (int i = 0; i < length; i++) {
    c9c8:	3101      	adds	r1, #1
    c9ca:	2909      	cmp	r1, #9
    c9cc:	d1f1      	bne.n	c9b2 <cmd_send+0x42>
	ret = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    c9ce:	4a56      	ldr	r2, [pc, #344]	; (cb28 <cmd_send+0x1b8>)
    c9d0:	2100      	movs	r1, #0
    c9d2:	4851      	ldr	r0, [pc, #324]	; (cb18 <cmd_send+0x1a8>)
    c9d4:	f011 fb4e 	bl	1e074 <at_parser_params_from_str>
	if (ret < 0) {
    c9d8:	1e04      	subs	r4, r0, #0
    c9da:	da18      	bge.n	ca0e <cmd_send+0x9e>
		LOG_ERR("Failed to parse AT command %d", ret);
    c9dc:	2301      	movs	r3, #1
    c9de:	f04f 0200 	mov.w	r2, #0
    c9e2:	4952      	ldr	r1, [pc, #328]	; (cb2c <cmd_send+0x1bc>)
    c9e4:	f363 0207 	bfi	r2, r3, #0, #8
    c9e8:	4b51      	ldr	r3, [pc, #324]	; (cb30 <cmd_send+0x1c0>)
    c9ea:	4852      	ldr	r0, [pc, #328]	; (cb34 <cmd_send+0x1c4>)
    c9ec:	1a5b      	subs	r3, r3, r1
    c9ee:	08db      	lsrs	r3, r3, #3
    c9f0:	f363 128f 	bfi	r2, r3, #6, #10
    c9f4:	4621      	mov	r1, r4
    c9f6:	f00f fdef 	bl	1c5d8 <log_1>
		write_uart_string(ERROR_STR, sizeof(ERROR_STR));
    c9fa:	2108      	movs	r1, #8
    c9fc:	484e      	ldr	r0, [pc, #312]	; (cb38 <cmd_send+0x1c8>)
		write_uart_string(str, ++chars);
    c9fe:	f7ff fddf 	bl	c5c0 <write_uart_string>
	uart_irq_rx_enable(uart_dev);
    ca02:	4b4e      	ldr	r3, [pc, #312]	; (cb3c <cmd_send+0x1cc>)
    ca04:	6818      	ldr	r0, [r3, #0]
    ca06:	f00f fa23 	bl	1be50 <uart_irq_rx_enable>
}
    ca0a:	b007      	add	sp, #28
    ca0c:	bd30      	pop	{r4, r5, pc}
	type = at_parser_cmd_type_get(at_cmd);
    ca0e:	4842      	ldr	r0, [pc, #264]	; (cb18 <cmd_send+0x1a8>)
    ca10:	f011 fb33 	bl	1e07a <at_parser_cmd_type_get>
	if (type == AT_CMD_TYPE_SET_COMMAND) {
    ca14:	2801      	cmp	r0, #1
	type = at_parser_cmd_type_get(at_cmd);
    ca16:	4605      	mov	r5, r0
	if (type == AT_CMD_TYPE_SET_COMMAND) {
    ca18:	d12c      	bne.n	ca74 <cmd_send+0x104>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    ca1a:	4843      	ldr	r0, [pc, #268]	; (cb28 <cmd_send+0x1b8>)
    ca1c:	f011 fc59 	bl	1e2d2 <at_params_valid_count_get>
    ca20:	2801      	cmp	r0, #1
    ca22:	d80e      	bhi.n	ca42 <cmd_send+0xd2>
			LOG_ERR("AT parameter error");
    ca24:	2301      	movs	r3, #1
    ca26:	f04f 0100 	mov.w	r1, #0
    ca2a:	4a40      	ldr	r2, [pc, #256]	; (cb2c <cmd_send+0x1bc>)
    ca2c:	f363 0107 	bfi	r1, r3, #0, #8
    ca30:	4b3f      	ldr	r3, [pc, #252]	; (cb30 <cmd_send+0x1c0>)
    ca32:	4843      	ldr	r0, [pc, #268]	; (cb40 <cmd_send+0x1d0>)
    ca34:	1a9b      	subs	r3, r3, r2
    ca36:	08db      	lsrs	r3, r3, #3
    ca38:	f363 118f 	bfi	r1, r3, #6, #10
    ca3c:	f00f fdbf 	bl	1c5be <log_0>
		if (err == 0) {
    ca40:	e7db      	b.n	c9fa <cmd_send+0x8a>
		ret = at_params_short_get(&m_param_list, 1, &shutdown_mode);
    ca42:	aa02      	add	r2, sp, #8
    ca44:	4629      	mov	r1, r5
    ca46:	4838      	ldr	r0, [pc, #224]	; (cb28 <cmd_send+0x1b8>)
    ca48:	f011 fc0e 	bl	1e268 <at_params_short_get>
		if (ret < 0) {
    ca4c:	2800      	cmp	r0, #0
    ca4e:	dbe9      	blt.n	ca24 <cmd_send+0xb4>
		switch (shutdown_mode) {
    ca50:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    ca54:	2b00      	cmp	r3, #0
    ca56:	d0e5      	beq.n	ca24 <cmd_send+0xb4>
    ca58:	2b02      	cmp	r3, #2
    ca5a:	d908      	bls.n	ca6e <cmd_send+0xfe>
    ca5c:	2b03      	cmp	r3, #3
    ca5e:	d1e1      	bne.n	ca24 <cmd_send+0xb4>
			enter_sleep(shutdown_mode);
    ca60:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    ca64:	f00f f9d4 	bl	1be10 <enter_sleep>
		write_uart_string(OK_STR, sizeof(OK_STR));
    ca68:	2105      	movs	r1, #5
    ca6a:	4836      	ldr	r0, [pc, #216]	; (cb44 <cmd_send+0x1d4>)
    ca6c:	e7c7      	b.n	c9fe <cmd_send+0x8e>
			slm_at_host_uninit();
    ca6e:	f7ff ff37 	bl	c8e0 <slm_at_host_uninit>
    ca72:	e7f5      	b.n	ca60 <cmd_send+0xf0>
		if (err == 0) {
    ca74:	2c00      	cmp	r4, #0
    ca76:	d1c0      	bne.n	c9fa <cmd_send+0x8a>
    ca78:	e7f6      	b.n	ca68 <cmd_send+0xf8>
	switch (state) {
    ca7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ca7e:	2b03      	cmp	r3, #3
    ca80:	d8bf      	bhi.n	ca02 <cmd_send+0x92>
    ca82:	a201      	add	r2, pc, #4	; (adr r2, ca88 <cmd_send+0x118>)
    ca84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ca88:	0000ca99 	.word	0x0000ca99
    ca8c:	0000c9fb 	.word	0x0000c9fb
    ca90:	0000caa9 	.word	0x0000caa9
    ca94:	0000cab9 	.word	0x0000cab9
		write_uart_string(buf, strlen(buf));
    ca98:	482b      	ldr	r0, [pc, #172]	; (cb48 <cmd_send+0x1d8>)
    ca9a:	f010 facb 	bl	1d034 <strlen>
    ca9e:	4601      	mov	r1, r0
    caa0:	4829      	ldr	r0, [pc, #164]	; (cb48 <cmd_send+0x1d8>)
		write_uart_string(SLM_VERSION, sizeof(SLM_VERSION));
    caa2:	f7ff fd8d 	bl	c5c0 <write_uart_string>
    caa6:	e7df      	b.n	ca68 <cmd_send+0xf8>
		chars = sprintf(str, "+CMS: %d\r\n", err);
    caa8:	460a      	mov	r2, r1
    caaa:	4928      	ldr	r1, [pc, #160]	; (cb4c <cmd_send+0x1dc>)
		chars = sprintf(str, "+CME: %d\r\n", err);
    caac:	a802      	add	r0, sp, #8
    caae:	f003 ff79 	bl	109a4 <sprintf>
		write_uart_string(str, ++chars);
    cab2:	1c41      	adds	r1, r0, #1
    cab4:	a802      	add	r0, sp, #8
    cab6:	e7a2      	b.n	c9fe <cmd_send+0x8e>
		chars = sprintf(str, "+CME: %d\r\n", err);
    cab8:	460a      	mov	r2, r1
    caba:	4925      	ldr	r1, [pc, #148]	; (cb50 <cmd_send+0x1e0>)
    cabc:	e7f6      	b.n	caac <cmd_send+0x13c>
	err = slm_at_tcpip_parse(at_buf);
    cabe:	4816      	ldr	r0, [pc, #88]	; (cb18 <cmd_send+0x1a8>)
    cac0:	f000 fe40 	bl	d744 <slm_at_tcpip_parse>
	if (err == 0) {
    cac4:	2800      	cmp	r0, #0
    cac6:	d0cf      	beq.n	ca68 <cmd_send+0xf8>
	} else if (err != -ENOTSUP) {
    cac8:	3023      	adds	r0, #35	; 0x23
    caca:	d196      	bne.n	c9fa <cmd_send+0x8a>
	err = slm_at_gps_parse(at_buf);
    cacc:	4812      	ldr	r0, [pc, #72]	; (cb18 <cmd_send+0x1a8>)
    cace:	f001 fc3f 	bl	e350 <slm_at_gps_parse>
	if (err == 0) {
    cad2:	2800      	cmp	r0, #0
    cad4:	d0c8      	beq.n	ca68 <cmd_send+0xf8>
	} else if (err != -ENOTSUP) {
    cad6:	3023      	adds	r0, #35	; 0x23
    cad8:	d18f      	bne.n	c9fa <cmd_send+0x8a>
	err = at_cmd_write(at_buf, buf, AT_MAX_CMD_LEN, &state);
    cada:	491b      	ldr	r1, [pc, #108]	; (cb48 <cmd_send+0x1d8>)
    cadc:	f10d 0307 	add.w	r3, sp, #7
    cae0:	f640 228c 	movw	r2, #2700	; 0xa8c
    cae4:	480c      	ldr	r0, [pc, #48]	; (cb18 <cmd_send+0x1a8>)
    cae6:	f005 f883 	bl	11bf0 <at_cmd_write>
	if (err < 0) {
    caea:	1e01      	subs	r1, r0, #0
    caec:	dac5      	bge.n	ca7a <cmd_send+0x10a>
		LOG_ERR("Could not send AT command to modem: %d", err);
    caee:	2301      	movs	r3, #1
    caf0:	f04f 0200 	mov.w	r2, #0
    caf4:	480d      	ldr	r0, [pc, #52]	; (cb2c <cmd_send+0x1bc>)
    caf6:	f363 0207 	bfi	r2, r3, #0, #8
    cafa:	4b0d      	ldr	r3, [pc, #52]	; (cb30 <cmd_send+0x1c0>)
    cafc:	1a1b      	subs	r3, r3, r0
    cafe:	08db      	lsrs	r3, r3, #3
    cb00:	f363 128f 	bfi	r2, r3, #6, #10
    cb04:	4813      	ldr	r0, [pc, #76]	; (cb54 <cmd_send+0x1e4>)
    cb06:	f00f fd67 	bl	1c5d8 <log_1>
		state = AT_CMD_ERROR;
    cb0a:	2301      	movs	r3, #1
    cb0c:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (state) {
    cb10:	e773      	b.n	c9fa <cmd_send+0x8a>
    cb12:	bf00      	nop
    cb14:	200200f0 	.word	0x200200f0
    cb18:	20024e26 	.word	0x20024e26
    cb1c:	0001f3fa 	.word	0x0001f3fa
    cb20:	0001f48a 	.word	0x0001f48a
    cb24:	0001f405 	.word	0x0001f405
    cb28:	200200e8 	.word	0x200200e8
    cb2c:	0001edc4 	.word	0x0001edc4
    cb30:	0001edd4 	.word	0x0001edd4
    cb34:	0001f40f 	.word	0x0001f40f
    cb38:	0001f445 	.word	0x0001f445
    cb3c:	20020104 	.word	0x20020104
    cb40:	0001f42d 	.word	0x0001f42d
    cb44:	0001f440 	.word	0x0001f440
    cb48:	200258b2 	.word	0x200258b2
    cb4c:	0001f474 	.word	0x0001f474
    cb50:	0001f47f 	.word	0x0001f47f
    cb54:	0001f44d 	.word	0x0001f44d

0000cb58 <socket>:
static inline int socket(int family, int type, int proto)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->socket);

	return socket_ops->socket(family, type, proto);
    cb58:	4b01      	ldr	r3, [pc, #4]	; (cb60 <socket+0x8>)
    cb5a:	681b      	ldr	r3, [r3, #0]
    cb5c:	681b      	ldr	r3, [r3, #0]
    cb5e:	4718      	bx	r3
    cb60:	2002031c 	.word	0x2002031c

0000cb64 <close>:
static inline int close(int sock)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->close);

	return socket_ops->close(sock);
    cb64:	4b01      	ldr	r3, [pc, #4]	; (cb6c <close+0x8>)
    cb66:	681b      	ldr	r3, [r3, #0]
    cb68:	685b      	ldr	r3, [r3, #4]
    cb6a:	4718      	bx	r3
    cb6c:	2002031c 	.word	0x2002031c

0000cb70 <do_socket_close>:
	LOG_DBG("Socket opened");
	return ret;
}

static int do_socket_close(int error)
{
    cb70:	b570      	push	{r4, r5, r6, lr}
	int ret = 0;

	if (client.sock > 0) {
    cb72:	4c18      	ldr	r4, [pc, #96]	; (cbd4 <do_socket_close+0x64>)
{
    cb74:	4606      	mov	r6, r0
	if (client.sock > 0) {
    cb76:	6820      	ldr	r0, [r4, #0]
    cb78:	2800      	cmp	r0, #0
    cb7a:	dd29      	ble.n	cbd0 <do_socket_close+0x60>
		ret = close(client.sock);
    cb7c:	f7ff fff2 	bl	cb64 <close>
		if (ret < 0) {
    cb80:	1e05      	subs	r5, r0, #0
    cb82:	da16      	bge.n	cbb2 <do_socket_close+0x42>
			LOG_WRN("close() failed: %d", -errno);
    cb84:	2302      	movs	r3, #2
    cb86:	f04f 0500 	mov.w	r5, #0
    cb8a:	4a13      	ldr	r2, [pc, #76]	; (cbd8 <do_socket_close+0x68>)
    cb8c:	f363 0507 	bfi	r5, r3, #0, #8
    cb90:	4b12      	ldr	r3, [pc, #72]	; (cbdc <do_socket_close+0x6c>)
    cb92:	1a9b      	subs	r3, r3, r2
    cb94:	08db      	lsrs	r3, r3, #3
    cb96:	f363 158f 	bfi	r5, r3, #6, #10
    cb9a:	f00f f976 	bl	1be8a <z_errno>
    cb9e:	6801      	ldr	r1, [r0, #0]
    cba0:	462a      	mov	r2, r5
    cba2:	4249      	negs	r1, r1
    cba4:	480e      	ldr	r0, [pc, #56]	; (cbe0 <do_socket_close+0x70>)
    cba6:	f00f fd17 	bl	1c5d8 <log_1>
			ret = -errno;
    cbaa:	f00f f96e 	bl	1be8a <z_errno>
    cbae:	6805      	ldr	r5, [r0, #0]
    cbb0:	426d      	negs	r5, r5
		}
		client.sock = INVALID_SOCKET;
    cbb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cbb6:	6023      	str	r3, [r4, #0]
		client.ip_proto = IPPROTO_IP;
    cbb8:	2300      	movs	r3, #0
		client.connected = false;

		sprintf(buf, "#XSOCKET: %d\r\n", error);
    cbba:	4632      	mov	r2, r6
    cbbc:	4909      	ldr	r1, [pc, #36]	; (cbe4 <do_socket_close+0x74>)
    cbbe:	480a      	ldr	r0, [pc, #40]	; (cbe8 <do_socket_close+0x78>)
		client.ip_proto = IPPROTO_IP;
    cbc0:	80a3      	strh	r3, [r4, #4]
		sprintf(buf, "#XSOCKET: %d\r\n", error);
    cbc2:	f003 feef 	bl	109a4 <sprintf>
		client.callback(buf);
    cbc6:	68a3      	ldr	r3, [r4, #8]
    cbc8:	4807      	ldr	r0, [pc, #28]	; (cbe8 <do_socket_close+0x78>)
    cbca:	4798      	blx	r3
		LOG_DBG("Socket closed");
	}

	return ret;
}
    cbcc:	4628      	mov	r0, r5
    cbce:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
    cbd0:	2500      	movs	r5, #0
	return ret;
    cbd2:	e7fb      	b.n	cbcc <do_socket_close+0x5c>
    cbd4:	20020108 	.word	0x20020108
    cbd8:	0001edc4 	.word	0x0001edc4
    cbdc:	0001ee3c 	.word	0x0001ee3c
    cbe0:	0001f63e 	.word	0x0001f63e
    cbe4:	0001f651 	.word	0x0001f651
    cbe8:	20026340 	.word	0x20026340

0000cbec <do_socket_open>:
	if (type == SOCK_STREAM) {
    cbec:	2801      	cmp	r0, #1
{
    cbee:	b538      	push	{r3, r4, r5, lr}
    cbf0:	4601      	mov	r1, r0
    cbf2:	4c21      	ldr	r4, [pc, #132]	; (cc78 <do_socket_open+0x8c>)
	if (type == SOCK_STREAM) {
    cbf4:	d12d      	bne.n	cc52 <do_socket_open+0x66>
		client.sock = socket(AF_INET, SOCK_STREAM,
    cbf6:	2206      	movs	r2, #6
    cbf8:	f7ff ffae 	bl	cb58 <socket>
		client.ip_proto = IPPROTO_TCP;
    cbfc:	2306      	movs	r3, #6
		client.sock = socket(AF_INET, SOCK_STREAM,
    cbfe:	6020      	str	r0, [r4, #0]
		client.ip_proto = IPPROTO_UDP;
    cc00:	7123      	strb	r3, [r4, #4]
	if (client.sock < 0) {
    cc02:	6822      	ldr	r2, [r4, #0]
    cc04:	2a00      	cmp	r2, #0
    cc06:	da2d      	bge.n	cc64 <do_socket_open+0x78>
		LOG_ERR("socket() failed: %d", -errno);
    cc08:	2301      	movs	r3, #1
    cc0a:	f04f 0500 	mov.w	r5, #0
    cc0e:	4a1b      	ldr	r2, [pc, #108]	; (cc7c <do_socket_open+0x90>)
    cc10:	f363 0507 	bfi	r5, r3, #0, #8
    cc14:	4b1a      	ldr	r3, [pc, #104]	; (cc80 <do_socket_open+0x94>)
    cc16:	1a9b      	subs	r3, r3, r2
    cc18:	08db      	lsrs	r3, r3, #3
    cc1a:	f363 158f 	bfi	r5, r3, #6, #10
    cc1e:	f00f f934 	bl	1be8a <z_errno>
    cc22:	6801      	ldr	r1, [r0, #0]
    cc24:	462a      	mov	r2, r5
    cc26:	4249      	negs	r1, r1
    cc28:	4816      	ldr	r0, [pc, #88]	; (cc84 <do_socket_open+0x98>)
    cc2a:	f00f fcd5 	bl	1c5d8 <log_1>
		sprintf(buf, "#XSOCKET: %d\r\n", -errno);
    cc2e:	f00f f92c 	bl	1be8a <z_errno>
    cc32:	6802      	ldr	r2, [r0, #0]
    cc34:	4914      	ldr	r1, [pc, #80]	; (cc88 <do_socket_open+0x9c>)
    cc36:	4252      	negs	r2, r2
    cc38:	4814      	ldr	r0, [pc, #80]	; (cc8c <do_socket_open+0xa0>)
    cc3a:	f003 feb3 	bl	109a4 <sprintf>
		client.callback(buf);
    cc3e:	68a3      	ldr	r3, [r4, #8]
    cc40:	4812      	ldr	r0, [pc, #72]	; (cc8c <do_socket_open+0xa0>)
    cc42:	4798      	blx	r3
		client.ip_proto = IPPROTO_IP;
    cc44:	2300      	movs	r3, #0
    cc46:	7123      	strb	r3, [r4, #4]
		ret = -errno;
    cc48:	f00f f91f 	bl	1be8a <z_errno>
    cc4c:	6800      	ldr	r0, [r0, #0]
    cc4e:	4240      	negs	r0, r0
}
    cc50:	bd38      	pop	{r3, r4, r5, pc}
	} else if (type == SOCK_DGRAM) {
    cc52:	2802      	cmp	r0, #2
    cc54:	d1d5      	bne.n	cc02 <do_socket_open+0x16>
		client.sock = socket(AF_INET, SOCK_DGRAM,
    cc56:	2211      	movs	r2, #17
    cc58:	2001      	movs	r0, #1
    cc5a:	f7ff ff7d 	bl	cb58 <socket>
		client.ip_proto = IPPROTO_UDP;
    cc5e:	2311      	movs	r3, #17
		client.sock = socket(AF_INET, SOCK_DGRAM,
    cc60:	6020      	str	r0, [r4, #0]
		client.ip_proto = IPPROTO_UDP;
    cc62:	e7cd      	b.n	cc00 <do_socket_open+0x14>
		sprintf(buf, "#XSOCKET: %d, %d\r\n", client.sock,
    cc64:	7923      	ldrb	r3, [r4, #4]
    cc66:	490a      	ldr	r1, [pc, #40]	; (cc90 <do_socket_open+0xa4>)
    cc68:	4808      	ldr	r0, [pc, #32]	; (cc8c <do_socket_open+0xa0>)
    cc6a:	f003 fe9b 	bl	109a4 <sprintf>
		client.callback(buf);
    cc6e:	4807      	ldr	r0, [pc, #28]	; (cc8c <do_socket_open+0xa0>)
    cc70:	68a3      	ldr	r3, [r4, #8]
    cc72:	4798      	blx	r3
	int ret = 0;
    cc74:	2000      	movs	r0, #0
	return ret;
    cc76:	e7eb      	b.n	cc50 <do_socket_open+0x64>
    cc78:	20020108 	.word	0x20020108
    cc7c:	0001edc4 	.word	0x0001edc4
    cc80:	0001ee3c 	.word	0x0001ee3c
    cc84:	0001f660 	.word	0x0001f660
    cc88:	0001f651 	.word	0x0001f651
    cc8c:	20026340 	.word	0x20026340
    cc90:	0001f674 	.word	0x0001f674

0000cc94 <handle_at_socket>:
static int handle_at_socket(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	u16_t op;

	switch (cmd_type) {
    cc94:	2801      	cmp	r0, #1
{
    cc96:	b513      	push	{r0, r1, r4, lr}
    cc98:	4604      	mov	r4, r0
	switch (cmd_type) {
    cc9a:	d004      	beq.n	cca6 <handle_at_socket+0x12>
    cc9c:	2802      	cmp	r0, #2
    cc9e:	d050      	beq.n	cd42 <handle_at_socket+0xae>
	case AT_CMD_TYPE_SET_COMMAND:
		if (at_params_valid_count_get(&m_param_list) < 2) {
			return -EINVAL;
    cca0:	f06f 0415 	mvn.w	r4, #21
    cca4:	e02e      	b.n	cd04 <handle_at_socket+0x70>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    cca6:	4830      	ldr	r0, [pc, #192]	; (cd68 <handle_at_socket+0xd4>)
    cca8:	f011 fb13 	bl	1e2d2 <at_params_valid_count_get>
    ccac:	2801      	cmp	r0, #1
    ccae:	d9f7      	bls.n	cca0 <handle_at_socket+0xc>
		}
		err = at_params_short_get(&m_param_list, 1, &op);
    ccb0:	4621      	mov	r1, r4
    ccb2:	aa01      	add	r2, sp, #4
    ccb4:	482c      	ldr	r0, [pc, #176]	; (cd68 <handle_at_socket+0xd4>)
    ccb6:	f011 fad7 	bl	1e268 <at_params_short_get>
		if (err < 0) {
    ccba:	1e04      	subs	r4, r0, #0
    ccbc:	db22      	blt.n	cd04 <handle_at_socket+0x70>
			return err;
		}
		if (op == 1) {
    ccbe:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    ccc2:	2801      	cmp	r0, #1
    ccc4:	d127      	bne.n	cd16 <handle_at_socket+0x82>
			u16_t type;

			if (at_params_valid_count_get(&m_param_list) < 3) {
    ccc6:	4828      	ldr	r0, [pc, #160]	; (cd68 <handle_at_socket+0xd4>)
    ccc8:	f011 fb03 	bl	1e2d2 <at_params_valid_count_get>
    cccc:	2802      	cmp	r0, #2
    ccce:	d9e7      	bls.n	cca0 <handle_at_socket+0xc>
				return -EINVAL;
			}
			err = at_params_short_get(&m_param_list, 2, &type);
    ccd0:	f10d 0206 	add.w	r2, sp, #6
    ccd4:	2102      	movs	r1, #2
    ccd6:	4824      	ldr	r0, [pc, #144]	; (cd68 <handle_at_socket+0xd4>)
    ccd8:	f011 fac6 	bl	1e268 <at_params_short_get>
			if (err < 0) {
    ccdc:	1e04      	subs	r4, r0, #0
    ccde:	db11      	blt.n	cd04 <handle_at_socket+0x70>
				return err;
			}
			if (client.sock > 0) {
    cce0:	4b22      	ldr	r3, [pc, #136]	; (cd6c <handle_at_socket+0xd8>)
    cce2:	681b      	ldr	r3, [r3, #0]
    cce4:	2b00      	cmp	r3, #0
    cce6:	dd10      	ble.n	cd0a <handle_at_socket+0x76>
				LOG_WRN("Socket is already opened");
    cce8:	2302      	movs	r3, #2
    ccea:	f04f 0100 	mov.w	r1, #0
    ccee:	4a20      	ldr	r2, [pc, #128]	; (cd70 <handle_at_socket+0xdc>)
    ccf0:	f363 0107 	bfi	r1, r3, #0, #8
    ccf4:	4b1f      	ldr	r3, [pc, #124]	; (cd74 <handle_at_socket+0xe0>)
    ccf6:	4820      	ldr	r0, [pc, #128]	; (cd78 <handle_at_socket+0xe4>)
    ccf8:	1a9b      	subs	r3, r3, r2
    ccfa:	08db      	lsrs	r3, r3, #3
    ccfc:	f363 118f 	bfi	r1, r3, #6, #10
			} else {
				err = do_socket_open(type);
			}
		} else if (op == 0) {
			if (client.sock < 0) {
				LOG_WRN("Socket is not opened yet");
    cd00:	f00f fc5d 	bl	1c5be <log_0>
	default:
		break;
	}

	return err;
}
    cd04:	4620      	mov	r0, r4
    cd06:	b002      	add	sp, #8
    cd08:	bd10      	pop	{r4, pc}
				err = do_socket_open(type);
    cd0a:	f89d 0006 	ldrb.w	r0, [sp, #6]
    cd0e:	f7ff ff6d 	bl	cbec <do_socket_open>
				err = do_socket_close(0);
    cd12:	4604      	mov	r4, r0
    cd14:	e7f6      	b.n	cd04 <handle_at_socket+0x70>
		} else if (op == 0) {
    cd16:	2800      	cmp	r0, #0
    cd18:	d1f4      	bne.n	cd04 <handle_at_socket+0x70>
			if (client.sock < 0) {
    cd1a:	4b14      	ldr	r3, [pc, #80]	; (cd6c <handle_at_socket+0xd8>)
    cd1c:	681b      	ldr	r3, [r3, #0]
    cd1e:	2b00      	cmp	r3, #0
    cd20:	da0c      	bge.n	cd3c <handle_at_socket+0xa8>
				LOG_WRN("Socket is not opened yet");
    cd22:	2302      	movs	r3, #2
    cd24:	f04f 0100 	mov.w	r1, #0
    cd28:	4a11      	ldr	r2, [pc, #68]	; (cd70 <handle_at_socket+0xdc>)
    cd2a:	f363 0107 	bfi	r1, r3, #0, #8
    cd2e:	4b11      	ldr	r3, [pc, #68]	; (cd74 <handle_at_socket+0xe0>)
    cd30:	4812      	ldr	r0, [pc, #72]	; (cd7c <handle_at_socket+0xe8>)
    cd32:	1a9b      	subs	r3, r3, r2
    cd34:	08db      	lsrs	r3, r3, #3
    cd36:	f363 118f 	bfi	r1, r3, #6, #10
    cd3a:	e7e1      	b.n	cd00 <handle_at_socket+0x6c>
				err = do_socket_close(0);
    cd3c:	f7ff ff18 	bl	cb70 <do_socket_close>
    cd40:	e7e7      	b.n	cd12 <handle_at_socket+0x7e>
		if (client.sock != INVALID_SOCKET) {
    cd42:	4c0a      	ldr	r4, [pc, #40]	; (cd6c <handle_at_socket+0xd8>)
    cd44:	6822      	ldr	r2, [r4, #0]
    cd46:	1c53      	adds	r3, r2, #1
    cd48:	d009      	beq.n	cd5e <handle_at_socket+0xca>
			sprintf(buf, "#XSOCKET: %d, %d\r\n", client.sock,
    cd4a:	7923      	ldrb	r3, [r4, #4]
    cd4c:	490c      	ldr	r1, [pc, #48]	; (cd80 <handle_at_socket+0xec>)
    cd4e:	480d      	ldr	r0, [pc, #52]	; (cd84 <handle_at_socket+0xf0>)
    cd50:	f003 fe28 	bl	109a4 <sprintf>
		client.callback(buf);
    cd54:	68a3      	ldr	r3, [r4, #8]
    cd56:	480b      	ldr	r0, [pc, #44]	; (cd84 <handle_at_socket+0xf0>)
    cd58:	4798      	blx	r3
		err = 0;
    cd5a:	2400      	movs	r4, #0
		break;
    cd5c:	e7d2      	b.n	cd04 <handle_at_socket+0x70>
			sprintf(buf, "#XSOCKET: 0\r\n");
    cd5e:	490a      	ldr	r1, [pc, #40]	; (cd88 <handle_at_socket+0xf4>)
    cd60:	4808      	ldr	r0, [pc, #32]	; (cd84 <handle_at_socket+0xf0>)
    cd62:	f003 fe1f 	bl	109a4 <sprintf>
    cd66:	e7f5      	b.n	cd54 <handle_at_socket+0xc0>
    cd68:	200200e8 	.word	0x200200e8
    cd6c:	20020108 	.word	0x20020108
    cd70:	0001edc4 	.word	0x0001edc4
    cd74:	0001ee3c 	.word	0x0001ee3c
    cd78:	0001f703 	.word	0x0001f703
    cd7c:	0001f71c 	.word	0x0001f71c
    cd80:	0001f674 	.word	0x0001f674
    cd84:	20026340 	.word	0x20026340
    cd88:	0001f735 	.word	0x0001f735

0000cd8c <send.constprop.10>:
			   int flags)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->send);

	return socket_ops->send(sock, buf, len, flags);
    cd8c:	4b04      	ldr	r3, [pc, #16]	; (cda0 <send.constprop.10+0x14>)
static inline ssize_t send(int sock, const void *buf, size_t len,
    cd8e:	b410      	push	{r4}
	return socket_ops->send(sock, buf, len, flags);
    cd90:	681b      	ldr	r3, [r3, #0]
    cd92:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    cd94:	2300      	movs	r3, #0
    cd96:	46a4      	mov	ip, r4
}
    cd98:	f85d 4b04 	ldr.w	r4, [sp], #4
	return socket_ops->send(sock, buf, len, flags);
    cd9c:	4760      	bx	ip
    cd9e:	bf00      	nop
    cda0:	2002031c 	.word	0x2002031c

0000cda4 <handle_at_tcp_send>:
 */
static int handle_at_tcp_send(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	char data[NET_IPV4_MTU];
	int size = NET_IPV4_MTU;
    cda4:	f44f 7310 	mov.w	r3, #576	; 0x240
{
    cda8:	b5f0      	push	{r4, r5, r6, r7, lr}

	if (!client.connected) {
    cdaa:	4d2f      	ldr	r5, [pc, #188]	; (ce68 <handle_at_tcp_send+0xc4>)
{
    cdac:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
	int size = NET_IPV4_MTU;
    cdb0:	9301      	str	r3, [sp, #4]
	if (!client.connected) {
    cdb2:	796b      	ldrb	r3, [r5, #5]
{
    cdb4:	4604      	mov	r4, r0
	if (!client.connected) {
    cdb6:	b993      	cbnz	r3, cdde <handle_at_tcp_send+0x3a>
		LOG_ERR("TCP not connected yet");
    cdb8:	2301      	movs	r3, #1
    cdba:	f04f 0100 	mov.w	r1, #0
    cdbe:	4a2b      	ldr	r2, [pc, #172]	; (ce6c <handle_at_tcp_send+0xc8>)
    cdc0:	f363 0107 	bfi	r1, r3, #0, #8
    cdc4:	4b2a      	ldr	r3, [pc, #168]	; (ce70 <handle_at_tcp_send+0xcc>)
    cdc6:	482b      	ldr	r0, [pc, #172]	; (ce74 <handle_at_tcp_send+0xd0>)
    cdc8:	1a9b      	subs	r3, r3, r2
    cdca:	08db      	lsrs	r3, r3, #3
    cdcc:	f363 118f 	bfi	r1, r3, #6, #10
    cdd0:	f00f fbf5 	bl	1c5be <log_0>
	int err = -EINVAL;
    cdd4:	f06f 0015 	mvn.w	r0, #21
	default:
		break;
	}

	return err;
}
    cdd8:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
    cddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (cmd_type) {
    cdde:	2801      	cmp	r0, #1
    cde0:	d1f8      	bne.n	cdd4 <handle_at_tcp_send+0x30>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    cde2:	4825      	ldr	r0, [pc, #148]	; (ce78 <handle_at_tcp_send+0xd4>)
    cde4:	f011 fa75 	bl	1e2d2 <at_params_valid_count_get>
    cde8:	2801      	cmp	r0, #1
    cdea:	d9f3      	bls.n	cdd4 <handle_at_tcp_send+0x30>
		err = at_params_string_get(&m_param_list, 1, data, &size);
    cdec:	ae02      	add	r6, sp, #8
    cdee:	ab01      	add	r3, sp, #4
    cdf0:	4632      	mov	r2, r6
    cdf2:	4621      	mov	r1, r4
    cdf4:	4820      	ldr	r0, [pc, #128]	; (ce78 <handle_at_tcp_send+0xd4>)
    cdf6:	f011 fa49 	bl	1e28c <at_params_string_get>
		if (err < 0) {
    cdfa:	2800      	cmp	r0, #0
    cdfc:	dbec      	blt.n	cdd8 <handle_at_tcp_send+0x34>
		data[size] = '\0';
    cdfe:	2400      	movs	r4, #0
    ce00:	9b01      	ldr	r3, [sp, #4]
	u32_t datalen = strlen(data);
    ce02:	4630      	mov	r0, r6
		data[size] = '\0';
    ce04:	54f4      	strb	r4, [r6, r3]
	u32_t datalen = strlen(data);
    ce06:	f010 f915 	bl	1d034 <strlen>
    ce0a:	4607      	mov	r7, r0
	while (offset < datalen) {
    ce0c:	42a7      	cmp	r7, r4
    ce0e:	d91f      	bls.n	ce50 <handle_at_tcp_send+0xac>
		ret = send(client.sock, data + offset,
    ce10:	1b3a      	subs	r2, r7, r4
    ce12:	1931      	adds	r1, r6, r4
    ce14:	6828      	ldr	r0, [r5, #0]
    ce16:	f7ff ffb9 	bl	cd8c <send.constprop.10>
		if (ret < 0) {
    ce1a:	2800      	cmp	r0, #0
    ce1c:	da22      	bge.n	ce64 <handle_at_tcp_send+0xc0>
			do_socket_close(-errno);
    ce1e:	f00f f834 	bl	1be8a <z_errno>
    ce22:	6800      	ldr	r0, [r0, #0]
			LOG_WRN("send() failed: %d", -errno);
    ce24:	f04f 0600 	mov.w	r6, #0
			do_socket_close(-errno);
    ce28:	4240      	negs	r0, r0
    ce2a:	f7ff fea1 	bl	cb70 <do_socket_close>
			LOG_WRN("send() failed: %d", -errno);
    ce2e:	2302      	movs	r3, #2
    ce30:	4a0e      	ldr	r2, [pc, #56]	; (ce6c <handle_at_tcp_send+0xc8>)
    ce32:	f363 0607 	bfi	r6, r3, #0, #8
    ce36:	4b0e      	ldr	r3, [pc, #56]	; (ce70 <handle_at_tcp_send+0xcc>)
    ce38:	1a9b      	subs	r3, r3, r2
    ce3a:	08db      	lsrs	r3, r3, #3
    ce3c:	f363 168f 	bfi	r6, r3, #6, #10
    ce40:	f00f f823 	bl	1be8a <z_errno>
    ce44:	6801      	ldr	r1, [r0, #0]
    ce46:	4632      	mov	r2, r6
    ce48:	4249      	negs	r1, r1
    ce4a:	480c      	ldr	r0, [pc, #48]	; (ce7c <handle_at_tcp_send+0xd8>)
    ce4c:	f00f fbc4 	bl	1c5d8 <log_1>
	sprintf(buf, "#XTCPSEND: %d\r\n", offset);
    ce50:	4622      	mov	r2, r4
    ce52:	490b      	ldr	r1, [pc, #44]	; (ce80 <handle_at_tcp_send+0xdc>)
    ce54:	480b      	ldr	r0, [pc, #44]	; (ce84 <handle_at_tcp_send+0xe0>)
    ce56:	f003 fda5 	bl	109a4 <sprintf>
	client.callback(buf);
    ce5a:	480a      	ldr	r0, [pc, #40]	; (ce84 <handle_at_tcp_send+0xe0>)
    ce5c:	68ab      	ldr	r3, [r5, #8]
    ce5e:	4798      	blx	r3
		err = do_tcp_send(data);
    ce60:	2000      	movs	r0, #0
		break;
    ce62:	e7b9      	b.n	cdd8 <handle_at_tcp_send+0x34>
		offset += ret;
    ce64:	4404      	add	r4, r0
    ce66:	e7d1      	b.n	ce0c <handle_at_tcp_send+0x68>
    ce68:	20020108 	.word	0x20020108
    ce6c:	0001edc4 	.word	0x0001edc4
    ce70:	0001ee3c 	.word	0x0001ee3c
    ce74:	0001f796 	.word	0x0001f796
    ce78:	200200e8 	.word	0x200200e8
    ce7c:	0001f7ac 	.word	0x0001f7ac
    ce80:	0001f7be 	.word	0x0001f7be
    ce84:	20026340 	.word	0x20026340

0000ce88 <recv.constprop.12>:
	return socket_ops->recv(sock, buf, max_len, flags);
    ce88:	4b04      	ldr	r3, [pc, #16]	; (ce9c <recv.constprop.12+0x14>)
static inline ssize_t recv(int sock, void *buf, size_t max_len,
    ce8a:	b410      	push	{r4}
	return socket_ops->recv(sock, buf, max_len, flags);
    ce8c:	681b      	ldr	r3, [r3, #0]
    ce8e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    ce90:	2300      	movs	r3, #0
    ce92:	46a4      	mov	ip, r4
}
    ce94:	f85d 4b04 	ldr.w	r4, [sp], #4
	return socket_ops->recv(sock, buf, max_len, flags);
    ce98:	4760      	bx	ip
    ce9a:	bf00      	nop
    ce9c:	2002031c 	.word	0x2002031c

0000cea0 <handle_at_bind>:
{
    cea0:	b530      	push	{r4, r5, lr}
	if (client.sock < 0) {
    cea2:	4d2d      	ldr	r5, [pc, #180]	; (cf58 <handle_at_bind+0xb8>)
{
    cea4:	b085      	sub	sp, #20
	if (client.sock < 0) {
    cea6:	682b      	ldr	r3, [r5, #0]
{
    cea8:	4604      	mov	r4, r0
	if (client.sock < 0) {
    ceaa:	2b00      	cmp	r3, #0
    ceac:	da11      	bge.n	ced2 <handle_at_bind+0x32>
		LOG_ERR("Socket not opened yet");
    ceae:	2301      	movs	r3, #1
    ceb0:	f04f 0100 	mov.w	r1, #0
    ceb4:	4a29      	ldr	r2, [pc, #164]	; (cf5c <handle_at_bind+0xbc>)
    ceb6:	f363 0107 	bfi	r1, r3, #0, #8
    ceba:	4b29      	ldr	r3, [pc, #164]	; (cf60 <handle_at_bind+0xc0>)
    cebc:	4829      	ldr	r0, [pc, #164]	; (cf64 <handle_at_bind+0xc4>)
    cebe:	1a9b      	subs	r3, r3, r2
    cec0:	08db      	lsrs	r3, r3, #3
    cec2:	f363 118f 	bfi	r1, r3, #6, #10
    cec6:	f00f fb7a 	bl	1c5be <log_0>
	int err = -EINVAL;
    ceca:	f06f 0015 	mvn.w	r0, #21
}
    cece:	b005      	add	sp, #20
    ced0:	bd30      	pop	{r4, r5, pc}
	switch (cmd_type) {
    ced2:	2801      	cmp	r0, #1
    ced4:	d1f9      	bne.n	ceca <handle_at_bind+0x2a>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    ced6:	4824      	ldr	r0, [pc, #144]	; (cf68 <handle_at_bind+0xc8>)
    ced8:	f011 f9fb 	bl	1e2d2 <at_params_valid_count_get>
    cedc:	2801      	cmp	r0, #1
    cede:	d9f4      	bls.n	ceca <handle_at_bind+0x2a>
		err = at_params_short_get(&m_param_list, 1, &port);
    cee0:	f10d 0206 	add.w	r2, sp, #6
    cee4:	4621      	mov	r1, r4
    cee6:	4820      	ldr	r0, [pc, #128]	; (cf68 <handle_at_bind+0xc8>)
    cee8:	f011 f9be 	bl	1e268 <at_params_short_get>
		if (err < 0) {
    ceec:	2800      	cmp	r0, #0
    ceee:	dbee      	blt.n	cece <handle_at_bind+0x2e>
		err = do_bind(port);
    cef0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
	local.sin_family = AF_INET;
    cef4:	f8ad 4008 	strh.w	r4, [sp, #8]
	local.sin_port = htons(port);
    cef8:	0213      	lsls	r3, r2, #8
    cefa:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	local.sin_addr.s_addr = htonl(INADDR_ANY);
    cefe:	2400      	movs	r4, #0
	return socket_ops->bind(sock, addr, addrlen);
    cf00:	2208      	movs	r2, #8
	local.sin_port = htons(port);
    cf02:	f8ad 300a 	strh.w	r3, [sp, #10]
    cf06:	4b19      	ldr	r3, [pc, #100]	; (cf6c <handle_at_bind+0xcc>)
	local.sin_addr.s_addr = htonl(INADDR_ANY);
    cf08:	9403      	str	r4, [sp, #12]
    cf0a:	681b      	ldr	r3, [r3, #0]
    cf0c:	eb0d 0102 	add.w	r1, sp, r2
    cf10:	68db      	ldr	r3, [r3, #12]
    cf12:	6828      	ldr	r0, [r5, #0]
    cf14:	4798      	blx	r3
	if (ret < 0) {
    cf16:	42a0      	cmp	r0, r4
    cf18:	da1b      	bge.n	cf52 <handle_at_bind+0xb2>
		LOG_ERR("bind() failed: %d", -errno);
    cf1a:	2301      	movs	r3, #1
    cf1c:	4a0f      	ldr	r2, [pc, #60]	; (cf5c <handle_at_bind+0xbc>)
    cf1e:	f363 0407 	bfi	r4, r3, #0, #8
    cf22:	4b0f      	ldr	r3, [pc, #60]	; (cf60 <handle_at_bind+0xc0>)
    cf24:	1a9b      	subs	r3, r3, r2
    cf26:	08db      	lsrs	r3, r3, #3
    cf28:	f363 148f 	bfi	r4, r3, #6, #10
    cf2c:	f00e ffad 	bl	1be8a <z_errno>
    cf30:	6801      	ldr	r1, [r0, #0]
    cf32:	4622      	mov	r2, r4
    cf34:	4249      	negs	r1, r1
    cf36:	480e      	ldr	r0, [pc, #56]	; (cf70 <handle_at_bind+0xd0>)
    cf38:	f00f fb4e 	bl	1c5d8 <log_1>
		do_socket_close(-errno);
    cf3c:	f00e ffa5 	bl	1be8a <z_errno>
    cf40:	6800      	ldr	r0, [r0, #0]
    cf42:	4240      	negs	r0, r0
    cf44:	f7ff fe14 	bl	cb70 <do_socket_close>
		return -errno;
    cf48:	f00e ff9f 	bl	1be8a <z_errno>
    cf4c:	6800      	ldr	r0, [r0, #0]
    cf4e:	4240      	negs	r0, r0
    cf50:	e7bd      	b.n	cece <handle_at_bind+0x2e>
	return 0;
    cf52:	4620      	mov	r0, r4
		break;
    cf54:	e7bb      	b.n	cece <handle_at_bind+0x2e>
    cf56:	bf00      	nop
    cf58:	20020108 	.word	0x20020108
    cf5c:	0001edc4 	.word	0x0001edc4
    cf60:	0001ee3c 	.word	0x0001ee3c
    cf64:	0001f6db 	.word	0x0001f6db
    cf68:	200200e8 	.word	0x200200e8
    cf6c:	2002031c 	.word	0x2002031c
    cf70:	0001f6f1 	.word	0x0001f6f1

0000cf74 <parse_host_by_name>:
{
    cf74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf78:	4614      	mov	r4, r2
    cf7a:	4680      	mov	r8, r0
	struct addrinfo hints = {
    cf7c:	2501      	movs	r5, #1
{
    cf7e:	b08e      	sub	sp, #56	; 0x38
			      struct addrinfo **res)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);

	return socket_ops->getaddrinfo(node, service, hints, res);
    cf80:	4f24      	ldr	r7, [pc, #144]	; (d014 <parse_host_by_name+0xa0>)
	struct addrinfo hints = {
    cf82:	2220      	movs	r2, #32
{
    cf84:	460e      	mov	r6, r1
	struct addrinfo hints = {
    cf86:	a806      	add	r0, sp, #24
    cf88:	2100      	movs	r1, #0
    cf8a:	f010 f8b8 	bl	1d0fe <memset>
    cf8e:	683b      	ldr	r3, [r7, #0]
    cf90:	e9cd 5407 	strd	r5, r4, [sp, #28]
    cf94:	aa06      	add	r2, sp, #24
    cf96:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    cf98:	2100      	movs	r1, #0
    cf9a:	ab01      	add	r3, sp, #4
    cf9c:	4640      	mov	r0, r8
    cf9e:	47a0      	blx	r4
	if (err) {
    cfa0:	4604      	mov	r4, r0
    cfa2:	b188      	cbz	r0, cfc8 <parse_host_by_name+0x54>
		LOG_ERR("ERROR: getaddrinfo failed %d", err);
    cfa4:	f04f 0200 	mov.w	r2, #0
    cfa8:	491b      	ldr	r1, [pc, #108]	; (d018 <parse_host_by_name+0xa4>)
    cfaa:	4b1c      	ldr	r3, [pc, #112]	; (d01c <parse_host_by_name+0xa8>)
    cfac:	f365 0207 	bfi	r2, r5, #0, #8
    cfb0:	1a5b      	subs	r3, r3, r1
    cfb2:	08db      	lsrs	r3, r3, #3
    cfb4:	4601      	mov	r1, r0
    cfb6:	f363 128f 	bfi	r2, r3, #6, #10
    cfba:	4819      	ldr	r0, [pc, #100]	; (d020 <parse_host_by_name+0xac>)
    cfbc:	f00f fb0c 	bl	1c5d8 <log_1>
}
    cfc0:	4620      	mov	r0, r4
    cfc2:	b00e      	add	sp, #56	; 0x38
    cfc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (result == NULL) {
    cfc8:	9b01      	ldr	r3, [sp, #4]
    cfca:	b983      	cbnz	r3, cfee <parse_host_by_name+0x7a>
		LOG_ERR("ERROR: Address not found\n");
    cfcc:	2301      	movs	r3, #1
    cfce:	f04f 0100 	mov.w	r1, #0
    cfd2:	4a11      	ldr	r2, [pc, #68]	; (d018 <parse_host_by_name+0xa4>)
    cfd4:	f363 0107 	bfi	r1, r3, #0, #8
    cfd8:	4b10      	ldr	r3, [pc, #64]	; (d01c <parse_host_by_name+0xa8>)
    cfda:	4812      	ldr	r0, [pc, #72]	; (d024 <parse_host_by_name+0xb0>)
    cfdc:	1a9b      	subs	r3, r3, r2
    cfde:	08db      	lsrs	r3, r3, #3
    cfe0:	f363 118f 	bfi	r1, r3, #6, #10
    cfe4:	f00f faeb 	bl	1c5be <log_0>
		return -ENOENT;
    cfe8:	f06f 0401 	mvn.w	r4, #1
    cfec:	e7e8      	b.n	cfc0 <parse_host_by_name+0x4c>
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
    cfee:	695b      	ldr	r3, [r3, #20]
	server4->sin_addr.s_addr =
    cff0:	490d      	ldr	r1, [pc, #52]	; (d028 <parse_host_by_name+0xb4>)
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
    cff2:	685b      	ldr	r3, [r3, #4]
	server4->sin_port = htons(port);
    cff4:	ba76      	rev16	r6, r6
	server4->sin_addr.s_addr =
    cff6:	604b      	str	r3, [r1, #4]
	server4->sin_family = AF_INET;
    cff8:	800d      	strh	r5, [r1, #0]
	server4->sin_port = htons(port);
    cffa:	804e      	strh	r6, [r1, #2]
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
    cffc:	2310      	movs	r3, #16
    cffe:	aa02      	add	r2, sp, #8
    d000:	3104      	adds	r1, #4
    d002:	4628      	mov	r0, r5
    d004:	f003 fd10 	bl	10a28 <z_impl_net_addr_ntop>
static inline void freeaddrinfo(struct addrinfo *res)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);

	return socket_ops->freeaddrinfo(res);
    d008:	683b      	ldr	r3, [r7, #0]
    d00a:	9801      	ldr	r0, [sp, #4]
    d00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    d00e:	4798      	blx	r3
    d010:	e7d6      	b.n	cfc0 <parse_host_by_name+0x4c>
    d012:	bf00      	nop
    d014:	2002031c 	.word	0x2002031c
    d018:	0001edc4 	.word	0x0001edc4
    d01c:	0001ee3c 	.word	0x0001ee3c
    d020:	0001f8bc 	.word	0x0001f8bc
    d024:	0001f8d9 	.word	0x0001f8d9
    d028:	20024e04 	.word	0x20024e04

0000d02c <parse_host_by_ipv4>:
{
    d02c:	b508      	push	{r3, lr}
	address4->sin_family = AF_INET;
    d02e:	2301      	movs	r3, #1
    d030:	4a06      	ldr	r2, [pc, #24]	; (d04c <parse_host_by_ipv4+0x20>)
	address4->sin_port = htons(port);
    d032:	ba49      	rev16	r1, r1
	address4->sin_family = AF_INET;
    d034:	8013      	strh	r3, [r2, #0]
	address4->sin_port = htons(port);
    d036:	8051      	strh	r1, [r2, #2]
	return z_impl_net_addr_pton(family, src, dst);
    d038:	4601      	mov	r1, r0
    d03a:	3204      	adds	r2, #4
    d03c:	4618      	mov	r0, r3
    d03e:	f010 f968 	bl	1d312 <z_impl_net_addr_pton>
	if ((family != AF_INET) && (family != AF_INET6)) {
		errno = EAFNOSUPPORT;
		return -1;
	}

	if (net_addr_pton(family, src, dst) == 0) {
    d042:	2800      	cmp	r0, #0
}
    d044:	bf18      	it	ne
    d046:	f06f 0015 	mvnne.w	r0, #21
    d04a:	bd08      	pop	{r3, pc}
    d04c:	20024e04 	.word	0x20024e04

0000d050 <handle_at_tcp_conn>:
	int size = TCPIP_MAX_URL;
    d050:	2380      	movs	r3, #128	; 0x80
{
    d052:	b570      	push	{r4, r5, r6, lr}
    d054:	b0a2      	sub	sp, #136	; 0x88
	int size = TCPIP_MAX_URL;
    d056:	9301      	str	r3, [sp, #4]
	if (client.sock < 0) {
    d058:	4b4f      	ldr	r3, [pc, #316]	; (d198 <handle_at_tcp_conn+0x148>)
{
    d05a:	4604      	mov	r4, r0
	if (client.sock < 0) {
    d05c:	681a      	ldr	r2, [r3, #0]
    d05e:	461e      	mov	r6, r3
    d060:	2a00      	cmp	r2, #0
    d062:	da10      	bge.n	d086 <handle_at_tcp_conn+0x36>
		LOG_ERR("Socket not opened yet");
    d064:	2301      	movs	r3, #1
    d066:	f04f 0100 	mov.w	r1, #0
    d06a:	4a4c      	ldr	r2, [pc, #304]	; (d19c <handle_at_tcp_conn+0x14c>)
    d06c:	f363 0107 	bfi	r1, r3, #0, #8
    d070:	4b4b      	ldr	r3, [pc, #300]	; (d1a0 <handle_at_tcp_conn+0x150>)
    d072:	484c      	ldr	r0, [pc, #304]	; (d1a4 <handle_at_tcp_conn+0x154>)
    d074:	1a9b      	subs	r3, r3, r2
    d076:	08db      	lsrs	r3, r3, #3
    d078:	f363 118f 	bfi	r1, r3, #6, #10
    d07c:	f00f fa9f 	bl	1c5be <log_0>
			return -EINVAL;
    d080:	f06f 0415 	mvn.w	r4, #21
    d084:	e045      	b.n	d112 <handle_at_tcp_conn+0xc2>
	switch (cmd_type) {
    d086:	2801      	cmp	r0, #1
    d088:	d009      	beq.n	d09e <handle_at_tcp_conn+0x4e>
    d08a:	2802      	cmp	r0, #2
    d08c:	d1f8      	bne.n	d080 <handle_at_tcp_conn+0x30>
		if (client.connected) {
    d08e:	795c      	ldrb	r4, [r3, #5]
    d090:	689a      	ldr	r2, [r3, #8]
    d092:	2c00      	cmp	r4, #0
    d094:	d076      	beq.n	d184 <handle_at_tcp_conn+0x134>
			client.callback("+XTCPCONN: 1\r\n");
    d096:	4844      	ldr	r0, [pc, #272]	; (d1a8 <handle_at_tcp_conn+0x158>)
    d098:	4790      	blx	r2
		err = 0;
    d09a:	2400      	movs	r4, #0
    d09c:	e039      	b.n	d112 <handle_at_tcp_conn+0xc2>
		if (at_params_valid_count_get(&m_param_list) < 3) {
    d09e:	4843      	ldr	r0, [pc, #268]	; (d1ac <handle_at_tcp_conn+0x15c>)
    d0a0:	f011 f917 	bl	1e2d2 <at_params_valid_count_get>
    d0a4:	2802      	cmp	r0, #2
    d0a6:	d9eb      	bls.n	d080 <handle_at_tcp_conn+0x30>
		err = at_params_string_get(&m_param_list, 1, url, &size);
    d0a8:	4621      	mov	r1, r4
    d0aa:	ab01      	add	r3, sp, #4
    d0ac:	aa02      	add	r2, sp, #8
    d0ae:	483f      	ldr	r0, [pc, #252]	; (d1ac <handle_at_tcp_conn+0x15c>)
    d0b0:	f011 f8ec 	bl	1e28c <at_params_string_get>
		if (err < 0) {
    d0b4:	1e04      	subs	r4, r0, #0
    d0b6:	db2c      	blt.n	d112 <handle_at_tcp_conn+0xc2>
		url[size] = '\0';
    d0b8:	2500      	movs	r5, #0
    d0ba:	9b01      	ldr	r3, [sp, #4]
    d0bc:	aa22      	add	r2, sp, #136	; 0x88
    d0be:	4413      	add	r3, r2
		err = at_params_short_get(&m_param_list, 2, &port);
    d0c0:	2102      	movs	r1, #2
    d0c2:	f10d 0202 	add.w	r2, sp, #2
    d0c6:	4839      	ldr	r0, [pc, #228]	; (d1ac <handle_at_tcp_conn+0x15c>)
		url[size] = '\0';
    d0c8:	f803 5c80 	strb.w	r5, [r3, #-128]
		err = at_params_short_get(&m_param_list, 2, &port);
    d0cc:	f011 f8cc 	bl	1e268 <at_params_short_get>
		if (err < 0) {
    d0d0:	1e04      	subs	r4, r0, #0
    d0d2:	db1e      	blt.n	d112 <handle_at_tcp_conn+0xc2>
	if (check_for_ipv4(url, strlen(url))) {
    d0d4:	a802      	add	r0, sp, #8
		err = do_tcp_connect(url, port);
    d0d6:	f8bd 4002 	ldrh.w	r4, [sp, #2]
	if (check_for_ipv4(url, strlen(url))) {
    d0da:	f00f ffab 	bl	1d034 <strlen>
	for (index = 0; index < length; index++) {
    d0de:	462b      	mov	r3, r5
    d0e0:	a902      	add	r1, sp, #8
    d0e2:	b2c0      	uxtb	r0, r0
    d0e4:	4283      	cmp	r3, r0
    d0e6:	db17      	blt.n	d118 <handle_at_tcp_conn+0xc8>
		ret = parse_host_by_ipv4(url, port);
    d0e8:	4621      	mov	r1, r4
    d0ea:	a802      	add	r0, sp, #8
    d0ec:	f7ff ff9e 	bl	d02c <parse_host_by_ipv4>
		ret = parse_host_by_name(url, port, SOCK_STREAM);
    d0f0:	4604      	mov	r4, r0
	if (ret) {
    d0f2:	b1d4      	cbz	r4, d12a <handle_at_tcp_conn+0xda>
		LOG_ERR("Parse failed: %d", ret);
    d0f4:	2301      	movs	r3, #1
    d0f6:	f04f 0200 	mov.w	r2, #0
    d0fa:	4928      	ldr	r1, [pc, #160]	; (d19c <handle_at_tcp_conn+0x14c>)
    d0fc:	f363 0207 	bfi	r2, r3, #0, #8
    d100:	4b27      	ldr	r3, [pc, #156]	; (d1a0 <handle_at_tcp_conn+0x150>)
    d102:	482b      	ldr	r0, [pc, #172]	; (d1b0 <handle_at_tcp_conn+0x160>)
    d104:	1a5b      	subs	r3, r3, r1
    d106:	08db      	lsrs	r3, r3, #3
    d108:	f363 128f 	bfi	r2, r3, #6, #10
    d10c:	4621      	mov	r1, r4
    d10e:	f00f fa63 	bl	1c5d8 <log_1>
}
    d112:	4620      	mov	r0, r4
    d114:	b022      	add	sp, #136	; 0x88
    d116:	bd70      	pop	{r4, r5, r6, pc}
		char ch = *(address + index);
    d118:	f811 2b01 	ldrb.w	r2, [r1], #1
		if ((ch == '.') || (ch >= '0' && ch <= '9')) {
    d11c:	2a2e      	cmp	r2, #46	; 0x2e
    d11e:	d002      	beq.n	d126 <handle_at_tcp_conn+0xd6>
    d120:	3a30      	subs	r2, #48	; 0x30
    d122:	2a09      	cmp	r2, #9
    d124:	d831      	bhi.n	d18a <handle_at_tcp_conn+0x13a>
	for (index = 0; index < length; index++) {
    d126:	3301      	adds	r3, #1
    d128:	e7dc      	b.n	d0e4 <handle_at_tcp_conn+0x94>
	return socket_ops->connect(sock, addr, addrlen);
    d12a:	4b22      	ldr	r3, [pc, #136]	; (d1b4 <handle_at_tcp_conn+0x164>)
    d12c:	2208      	movs	r2, #8
    d12e:	681b      	ldr	r3, [r3, #0]
    d130:	4921      	ldr	r1, [pc, #132]	; (d1b8 <handle_at_tcp_conn+0x168>)
    d132:	695b      	ldr	r3, [r3, #20]
    d134:	6830      	ldr	r0, [r6, #0]
    d136:	4798      	blx	r3
	if (ret < 0) {
    d138:	2800      	cmp	r0, #0
    d13a:	da1d      	bge.n	d178 <handle_at_tcp_conn+0x128>
		LOG_ERR("connect() failed: %d", -errno);
    d13c:	2301      	movs	r3, #1
    d13e:	f04f 0400 	mov.w	r4, #0
    d142:	4a16      	ldr	r2, [pc, #88]	; (d19c <handle_at_tcp_conn+0x14c>)
    d144:	f363 0407 	bfi	r4, r3, #0, #8
    d148:	4b15      	ldr	r3, [pc, #84]	; (d1a0 <handle_at_tcp_conn+0x150>)
    d14a:	1a9b      	subs	r3, r3, r2
    d14c:	08db      	lsrs	r3, r3, #3
    d14e:	f363 148f 	bfi	r4, r3, #6, #10
    d152:	f00e fe9a 	bl	1be8a <z_errno>
    d156:	6801      	ldr	r1, [r0, #0]
    d158:	4622      	mov	r2, r4
    d15a:	4249      	negs	r1, r1
    d15c:	4817      	ldr	r0, [pc, #92]	; (d1bc <handle_at_tcp_conn+0x16c>)
    d15e:	f00f fa3b 	bl	1c5d8 <log_1>
		do_socket_close(-errno);
    d162:	f00e fe92 	bl	1be8a <z_errno>
    d166:	6800      	ldr	r0, [r0, #0]
    d168:	4240      	negs	r0, r0
    d16a:	f7ff fd01 	bl	cb70 <do_socket_close>
		return -errno;
    d16e:	f00e fe8c 	bl	1be8a <z_errno>
    d172:	6804      	ldr	r4, [r0, #0]
    d174:	4264      	negs	r4, r4
    d176:	e7cc      	b.n	d112 <handle_at_tcp_conn+0xc2>
	client.connected = true;
    d178:	2301      	movs	r3, #1
	client.callback("#XTCPCONN: 1\r\n");
    d17a:	4811      	ldr	r0, [pc, #68]	; (d1c0 <handle_at_tcp_conn+0x170>)
	client.connected = true;
    d17c:	7173      	strb	r3, [r6, #5]
	client.callback("#XTCPCONN: 1\r\n");
    d17e:	68b3      	ldr	r3, [r6, #8]
    d180:	4798      	blx	r3
	return 0;
    d182:	e7c6      	b.n	d112 <handle_at_tcp_conn+0xc2>
			client.callback("+XTCPCONN: 0\r\n");
    d184:	480f      	ldr	r0, [pc, #60]	; (d1c4 <handle_at_tcp_conn+0x174>)
    d186:	4790      	blx	r2
    d188:	e7c3      	b.n	d112 <handle_at_tcp_conn+0xc2>
		ret = parse_host_by_name(url, port, SOCK_STREAM);
    d18a:	2201      	movs	r2, #1
    d18c:	4621      	mov	r1, r4
    d18e:	a802      	add	r0, sp, #8
    d190:	f7ff fef0 	bl	cf74 <parse_host_by_name>
    d194:	e7ac      	b.n	d0f0 <handle_at_tcp_conn+0xa0>
    d196:	bf00      	nop
    d198:	20020108 	.word	0x20020108
    d19c:	0001edc4 	.word	0x0001edc4
    d1a0:	0001ee3c 	.word	0x0001ee3c
    d1a4:	0001f6db 	.word	0x0001f6db
    d1a8:	0001f778 	.word	0x0001f778
    d1ac:	200200e8 	.word	0x200200e8
    d1b0:	0001f743 	.word	0x0001f743
    d1b4:	2002031c 	.word	0x2002031c
    d1b8:	20024e04 	.word	0x20024e04
    d1bc:	0001f754 	.word	0x0001f754
    d1c0:	0001f769 	.word	0x0001f769
    d1c4:	0001f787 	.word	0x0001f787

0000d1c8 <do_tcp_receive>:
	struct timeval tmo = {
    d1c8:	2300      	movs	r3, #0
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
    d1ca:	2208      	movs	r2, #8
{
    d1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1ce:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
	struct timeval tmo = {
    d1d2:	e9cd 1302 	strd	r1, r3, [sp, #8]
    d1d6:	4b3f      	ldr	r3, [pc, #252]	; (d2d4 <do_tcp_receive+0x10c>)
	ret = setsockopt(client.sock, SOL_SOCKET, SO_RCVTIMEO,
    d1d8:	4d3f      	ldr	r5, [pc, #252]	; (d2d8 <do_tcp_receive+0x110>)
    d1da:	681b      	ldr	r3, [r3, #0]
    d1dc:	9200      	str	r2, [sp, #0]
    d1de:	69dc      	ldr	r4, [r3, #28]
{
    d1e0:	4607      	mov	r7, r0
    d1e2:	eb0d 0302 	add.w	r3, sp, r2
    d1e6:	2101      	movs	r1, #1
    d1e8:	2214      	movs	r2, #20
    d1ea:	6828      	ldr	r0, [r5, #0]
    d1ec:	47a0      	blx	r4
	if (ret < 0) {
    d1ee:	1e04      	subs	r4, r0, #0
    d1f0:	da1c      	bge.n	d22c <do_tcp_receive+0x64>
		do_socket_close(-errno);
    d1f2:	f00e fe4a 	bl	1be8a <z_errno>
    d1f6:	6800      	ldr	r0, [r0, #0]
		LOG_ERR("setsockopt() error: %d", -errno);
    d1f8:	f04f 0500 	mov.w	r5, #0
		do_socket_close(-errno);
    d1fc:	4240      	negs	r0, r0
    d1fe:	f7ff fcb7 	bl	cb70 <do_socket_close>
		LOG_ERR("setsockopt() error: %d", -errno);
    d202:	2301      	movs	r3, #1
    d204:	4a35      	ldr	r2, [pc, #212]	; (d2dc <do_tcp_receive+0x114>)
    d206:	f363 0507 	bfi	r5, r3, #0, #8
    d20a:	4b35      	ldr	r3, [pc, #212]	; (d2e0 <do_tcp_receive+0x118>)
    d20c:	1a9b      	subs	r3, r3, r2
    d20e:	08db      	lsrs	r3, r3, #3
    d210:	f363 158f 	bfi	r5, r3, #6, #10
    d214:	f00e fe39 	bl	1be8a <z_errno>
    d218:	6801      	ldr	r1, [r0, #0]
    d21a:	462a      	mov	r2, r5
    d21c:	4249      	negs	r1, r1
    d21e:	4831      	ldr	r0, [pc, #196]	; (d2e4 <do_tcp_receive+0x11c>)
    d220:	f00f f9da 	bl	1c5d8 <log_1>
}
    d224:	4620      	mov	r0, r4
    d226:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    d22a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (length > NET_IPV4_MTU) {
    d22c:	f5b7 7f10 	cmp.w	r7, #576	; 0x240
    d230:	ae04      	add	r6, sp, #16
		ret = recv(client.sock, data, NET_IPV4_MTU, 0);
    d232:	bf8c      	ite	hi
    d234:	f44f 7210 	movhi.w	r2, #576	; 0x240
		ret = recv(client.sock, data, length, 0);
    d238:	463a      	movls	r2, r7
    d23a:	6828      	ldr	r0, [r5, #0]
    d23c:	4631      	mov	r1, r6
    d23e:	f7ff fe23 	bl	ce88 <recv.constprop.12>
	if (ret < 0) {
    d242:	2800      	cmp	r0, #0
		ret = recv(client.sock, data, length, 0);
    d244:	4604      	mov	r4, r0
	if (ret < 0) {
    d246:	da1d      	bge.n	d284 <do_tcp_receive+0xbc>
		LOG_WRN("recv() error: %d", -errno);
    d248:	2302      	movs	r3, #2
    d24a:	f04f 0400 	mov.w	r4, #0
    d24e:	4a23      	ldr	r2, [pc, #140]	; (d2dc <do_tcp_receive+0x114>)
    d250:	f363 0407 	bfi	r4, r3, #0, #8
    d254:	4b22      	ldr	r3, [pc, #136]	; (d2e0 <do_tcp_receive+0x118>)
    d256:	1a9b      	subs	r3, r3, r2
    d258:	08db      	lsrs	r3, r3, #3
    d25a:	f363 148f 	bfi	r4, r3, #6, #10
    d25e:	f00e fe14 	bl	1be8a <z_errno>
    d262:	6801      	ldr	r1, [r0, #0]
    d264:	4622      	mov	r2, r4
    d266:	4249      	negs	r1, r1
    d268:	481f      	ldr	r0, [pc, #124]	; (d2e8 <do_tcp_receive+0x120>)
    d26a:	f00f f9b5 	bl	1c5d8 <log_1>
		do_socket_close(-errno);
    d26e:	f00e fe0c 	bl	1be8a <z_errno>
    d272:	6800      	ldr	r0, [r0, #0]
    d274:	4240      	negs	r0, r0
    d276:	f7ff fc7b 	bl	cb70 <do_socket_close>
		ret = -errno;
    d27a:	f00e fe06 	bl	1be8a <z_errno>
    d27e:	6804      	ldr	r4, [r0, #0]
    d280:	4264      	negs	r4, r4
    d282:	e7cf      	b.n	d224 <do_tcp_receive+0x5c>
	} else if (ret == 0) {
    d284:	d111      	bne.n	d2aa <do_tcp_receive+0xe2>
		LOG_WRN("recv() return 0");
    d286:	2302      	movs	r3, #2
    d288:	f04f 0100 	mov.w	r1, #0
    d28c:	4a13      	ldr	r2, [pc, #76]	; (d2dc <do_tcp_receive+0x114>)
    d28e:	f363 0107 	bfi	r1, r3, #0, #8
    d292:	4b13      	ldr	r3, [pc, #76]	; (d2e0 <do_tcp_receive+0x118>)
    d294:	4815      	ldr	r0, [pc, #84]	; (d2ec <do_tcp_receive+0x124>)
    d296:	1a9b      	subs	r3, r3, r2
    d298:	08db      	lsrs	r3, r3, #3
    d29a:	f363 118f 	bfi	r1, r3, #6, #10
    d29e:	f00f f98e 	bl	1c5be <log_0>
		do_socket_close(0);
    d2a2:	4620      	mov	r0, r4
    d2a4:	f7ff fc64 	bl	cb70 <do_socket_close>
    d2a8:	e7bc      	b.n	d224 <do_tcp_receive+0x5c>
		data[ret] = '\0';
    d2aa:	2700      	movs	r7, #0
		client.callback("#XTCPRECV: ");
    d2ac:	68ab      	ldr	r3, [r5, #8]
		data[ret] = '\0';
    d2ae:	5437      	strb	r7, [r6, r0]
		client.callback("#XTCPRECV: ");
    d2b0:	480f      	ldr	r0, [pc, #60]	; (d2f0 <do_tcp_receive+0x128>)
    d2b2:	4798      	blx	r3
		client.callback(data);
    d2b4:	68ab      	ldr	r3, [r5, #8]
    d2b6:	4630      	mov	r0, r6
    d2b8:	4798      	blx	r3
		client.callback("\r\n");
    d2ba:	68ab      	ldr	r3, [r5, #8]
    d2bc:	480d      	ldr	r0, [pc, #52]	; (d2f4 <do_tcp_receive+0x12c>)
    d2be:	4798      	blx	r3
		sprintf(buf, "#XTCPRECV: %d\r\n", ret);
    d2c0:	4622      	mov	r2, r4
    d2c2:	490d      	ldr	r1, [pc, #52]	; (d2f8 <do_tcp_receive+0x130>)
    d2c4:	480d      	ldr	r0, [pc, #52]	; (d2fc <do_tcp_receive+0x134>)
    d2c6:	f003 fb6d 	bl	109a4 <sprintf>
		client.callback(buf);
    d2ca:	68ab      	ldr	r3, [r5, #8]
    d2cc:	480b      	ldr	r0, [pc, #44]	; (d2fc <do_tcp_receive+0x134>)
    d2ce:	4798      	blx	r3
		ret = 0;
    d2d0:	463c      	mov	r4, r7
    d2d2:	e7a7      	b.n	d224 <do_tcp_receive+0x5c>
    d2d4:	2002031c 	.word	0x2002031c
    d2d8:	20020108 	.word	0x20020108
    d2dc:	0001edc4 	.word	0x0001edc4
    d2e0:	0001ee3c 	.word	0x0001ee3c
    d2e4:	0001f687 	.word	0x0001f687
    d2e8:	0001f69e 	.word	0x0001f69e
    d2ec:	0001f6af 	.word	0x0001f6af
    d2f0:	0001f6bf 	.word	0x0001f6bf
    d2f4:	0001f793 	.word	0x0001f793
    d2f8:	0001f6cb 	.word	0x0001f6cb
    d2fc:	20026340 	.word	0x20026340

0000d300 <handle_at_tcp_recv>:
static int handle_at_tcp_recv(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	u16_t length, time;

	if (!client.connected) {
    d300:	4b19      	ldr	r3, [pc, #100]	; (d368 <handle_at_tcp_recv+0x68>)
{
    d302:	b513      	push	{r0, r1, r4, lr}
	if (!client.connected) {
    d304:	795b      	ldrb	r3, [r3, #5]
{
    d306:	4604      	mov	r4, r0
	if (!client.connected) {
    d308:	b98b      	cbnz	r3, d32e <handle_at_tcp_recv+0x2e>
		LOG_ERR("TCP not connected yet");
    d30a:	2301      	movs	r3, #1
    d30c:	f04f 0100 	mov.w	r1, #0
    d310:	4a16      	ldr	r2, [pc, #88]	; (d36c <handle_at_tcp_recv+0x6c>)
    d312:	f363 0107 	bfi	r1, r3, #0, #8
    d316:	4b16      	ldr	r3, [pc, #88]	; (d370 <handle_at_tcp_recv+0x70>)
    d318:	4816      	ldr	r0, [pc, #88]	; (d374 <handle_at_tcp_recv+0x74>)
    d31a:	1a9b      	subs	r3, r3, r2
    d31c:	08db      	lsrs	r3, r3, #3
    d31e:	f363 118f 	bfi	r1, r3, #6, #10
    d322:	f00f f94c 	bl	1c5be <log_0>
	int err = -EINVAL;
    d326:	f06f 0015 	mvn.w	r0, #21
	default:
		break;
	}

	return err;
}
    d32a:	b002      	add	sp, #8
    d32c:	bd10      	pop	{r4, pc}
	switch (cmd_type) {
    d32e:	2801      	cmp	r0, #1
    d330:	d1f9      	bne.n	d326 <handle_at_tcp_recv+0x26>
		if (at_params_valid_count_get(&m_param_list) < 3) {
    d332:	4811      	ldr	r0, [pc, #68]	; (d378 <handle_at_tcp_recv+0x78>)
    d334:	f010 ffcd 	bl	1e2d2 <at_params_valid_count_get>
    d338:	2802      	cmp	r0, #2
    d33a:	d9f4      	bls.n	d326 <handle_at_tcp_recv+0x26>
		err = at_params_short_get(&m_param_list, 1, &length);
    d33c:	aa01      	add	r2, sp, #4
    d33e:	4621      	mov	r1, r4
    d340:	480d      	ldr	r0, [pc, #52]	; (d378 <handle_at_tcp_recv+0x78>)
    d342:	f010 ff91 	bl	1e268 <at_params_short_get>
		if (err < 0) {
    d346:	2800      	cmp	r0, #0
    d348:	dbef      	blt.n	d32a <handle_at_tcp_recv+0x2a>
		err = at_params_short_get(&m_param_list, 2, &time);
    d34a:	f10d 0206 	add.w	r2, sp, #6
    d34e:	2102      	movs	r1, #2
    d350:	4809      	ldr	r0, [pc, #36]	; (d378 <handle_at_tcp_recv+0x78>)
    d352:	f010 ff89 	bl	1e268 <at_params_short_get>
		if (err < 0) {
    d356:	2800      	cmp	r0, #0
    d358:	dbe7      	blt.n	d32a <handle_at_tcp_recv+0x2a>
		err = do_tcp_receive(length, time);
    d35a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    d35e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d362:	f7ff ff31 	bl	d1c8 <do_tcp_receive>
		break;
    d366:	e7e0      	b.n	d32a <handle_at_tcp_recv+0x2a>
    d368:	20020108 	.word	0x20020108
    d36c:	0001edc4 	.word	0x0001edc4
    d370:	0001ee3c 	.word	0x0001ee3c
    d374:	0001f796 	.word	0x0001f796
    d378:	200200e8 	.word	0x200200e8

0000d37c <do_udp_init>:
{
    d37c:	b538      	push	{r3, r4, r5, lr}
    d37e:	4604      	mov	r4, r0
    d380:	460d      	mov	r5, r1
	if (check_for_ipv4(url, strlen(url))) {
    d382:	f00f fe57 	bl	1d034 <strlen>
	for (index = 0; index < length; index++) {
    d386:	2300      	movs	r3, #0
    d388:	b2c0      	uxtb	r0, r0
    d38a:	4283      	cmp	r3, r0
    d38c:	db16      	blt.n	d3bc <do_udp_init+0x40>
		ret = parse_host_by_ipv4(url, port);
    d38e:	4629      	mov	r1, r5
    d390:	4620      	mov	r0, r4
    d392:	f7ff fe4b 	bl	d02c <parse_host_by_ipv4>
		ret = parse_host_by_name(url, port, SOCK_DGRAM);
    d396:	4604      	mov	r4, r0
	if (ret) {
    d398:	b174      	cbz	r4, d3b8 <do_udp_init+0x3c>
		LOG_ERR("Parse failed: %d", ret);
    d39a:	2301      	movs	r3, #1
    d39c:	f04f 0200 	mov.w	r2, #0
    d3a0:	490d      	ldr	r1, [pc, #52]	; (d3d8 <do_udp_init+0x5c>)
    d3a2:	f363 0207 	bfi	r2, r3, #0, #8
    d3a6:	4b0d      	ldr	r3, [pc, #52]	; (d3dc <do_udp_init+0x60>)
    d3a8:	480d      	ldr	r0, [pc, #52]	; (d3e0 <do_udp_init+0x64>)
    d3aa:	1a5b      	subs	r3, r3, r1
    d3ac:	08db      	lsrs	r3, r3, #3
    d3ae:	f363 128f 	bfi	r2, r3, #6, #10
    d3b2:	4621      	mov	r1, r4
    d3b4:	f00f f910 	bl	1c5d8 <log_1>
}
    d3b8:	4620      	mov	r0, r4
    d3ba:	bd38      	pop	{r3, r4, r5, pc}
		char ch = *(address + index);
    d3bc:	5ce2      	ldrb	r2, [r4, r3]
		if ((ch == '.') || (ch >= '0' && ch <= '9')) {
    d3be:	2a2e      	cmp	r2, #46	; 0x2e
    d3c0:	d002      	beq.n	d3c8 <do_udp_init+0x4c>
    d3c2:	3a30      	subs	r2, #48	; 0x30
    d3c4:	2a09      	cmp	r2, #9
    d3c6:	d801      	bhi.n	d3cc <do_udp_init+0x50>
	for (index = 0; index < length; index++) {
    d3c8:	3301      	adds	r3, #1
    d3ca:	e7de      	b.n	d38a <do_udp_init+0xe>
		ret = parse_host_by_name(url, port, SOCK_DGRAM);
    d3cc:	2202      	movs	r2, #2
    d3ce:	4629      	mov	r1, r5
    d3d0:	4620      	mov	r0, r4
    d3d2:	f7ff fdcf 	bl	cf74 <parse_host_by_name>
    d3d6:	e7de      	b.n	d396 <do_udp_init+0x1a>
    d3d8:	0001edc4 	.word	0x0001edc4
    d3dc:	0001ee3c 	.word	0x0001ee3c
    d3e0:	0001f743 	.word	0x0001f743

0000d3e4 <handle_at_udp_recvfrom>:
 */
static int handle_at_udp_recvfrom(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	char url[TCPIP_MAX_URL];
	int size = TCPIP_MAX_URL;
    d3e4:	2380      	movs	r3, #128	; 0x80
{
    d3e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d3ea:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
	int size = TCPIP_MAX_URL;
    d3ee:	9304      	str	r3, [sp, #16]
	u16_t port, length, time;

	if (client.sock < 0) {
    d3f0:	4b69      	ldr	r3, [pc, #420]	; (d598 <handle_at_udp_recvfrom+0x1b4>)
{
    d3f2:	4680      	mov	r8, r0
	if (client.sock < 0) {
    d3f4:	681a      	ldr	r2, [r3, #0]
    d3f6:	461d      	mov	r5, r3
    d3f8:	2a00      	cmp	r2, #0
    d3fa:	da14      	bge.n	d426 <handle_at_udp_recvfrom+0x42>
		LOG_ERR("Socket not opened yet");
    d3fc:	2301      	movs	r3, #1
    d3fe:	f04f 0100 	mov.w	r1, #0
    d402:	4a66      	ldr	r2, [pc, #408]	; (d59c <handle_at_udp_recvfrom+0x1b8>)
    d404:	f363 0107 	bfi	r1, r3, #0, #8
    d408:	4b65      	ldr	r3, [pc, #404]	; (d5a0 <handle_at_udp_recvfrom+0x1bc>)
    d40a:	4866      	ldr	r0, [pc, #408]	; (d5a4 <handle_at_udp_recvfrom+0x1c0>)
    d40c:	1a9b      	subs	r3, r3, r2
    d40e:	08db      	lsrs	r3, r3, #3
    d410:	f363 118f 	bfi	r1, r3, #6, #10
		return err;
	} else if (client.ip_proto != IPPROTO_UDP) {
		LOG_ERR("Invalid socket");
    d414:	f00f f8d3 	bl	1c5be <log_0>
		return err;
    d418:	f06f 0415 	mvn.w	r4, #21
	default:
		break;
	}

	return err;
}
    d41c:	4620      	mov	r0, r4
    d41e:	f50d 7d38 	add.w	sp, sp, #736	; 0x2e0
    d422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (client.ip_proto != IPPROTO_UDP) {
    d426:	791b      	ldrb	r3, [r3, #4]
    d428:	2b11      	cmp	r3, #17
    d42a:	d00c      	beq.n	d446 <handle_at_udp_recvfrom+0x62>
		LOG_ERR("Invalid socket");
    d42c:	2301      	movs	r3, #1
    d42e:	f04f 0100 	mov.w	r1, #0
    d432:	4a5a      	ldr	r2, [pc, #360]	; (d59c <handle_at_udp_recvfrom+0x1b8>)
    d434:	f363 0107 	bfi	r1, r3, #0, #8
    d438:	4b59      	ldr	r3, [pc, #356]	; (d5a0 <handle_at_udp_recvfrom+0x1bc>)
    d43a:	485b      	ldr	r0, [pc, #364]	; (d5a8 <handle_at_udp_recvfrom+0x1c4>)
    d43c:	1a9b      	subs	r3, r3, r2
    d43e:	08db      	lsrs	r3, r3, #3
    d440:	f363 118f 	bfi	r1, r3, #6, #10
    d444:	e7e6      	b.n	d414 <handle_at_udp_recvfrom+0x30>
	switch (cmd_type) {
    d446:	2801      	cmp	r0, #1
    d448:	d1e6      	bne.n	d418 <handle_at_udp_recvfrom+0x34>
		if (at_params_valid_count_get(&m_param_list) < 5) {
    d44a:	4858      	ldr	r0, [pc, #352]	; (d5ac <handle_at_udp_recvfrom+0x1c8>)
    d44c:	f010 ff41 	bl	1e2d2 <at_params_valid_count_get>
    d450:	2804      	cmp	r0, #4
    d452:	d9e1      	bls.n	d418 <handle_at_udp_recvfrom+0x34>
		err = at_params_string_get(&m_param_list, 1, url, &size);
    d454:	af08      	add	r7, sp, #32
    d456:	ab04      	add	r3, sp, #16
    d458:	463a      	mov	r2, r7
    d45a:	4641      	mov	r1, r8
    d45c:	4853      	ldr	r0, [pc, #332]	; (d5ac <handle_at_udp_recvfrom+0x1c8>)
    d45e:	f010 ff15 	bl	1e28c <at_params_string_get>
		if (err < 0) {
    d462:	1e04      	subs	r4, r0, #0
    d464:	dbda      	blt.n	d41c <handle_at_udp_recvfrom+0x38>
		url[size] = '\0';
    d466:	f04f 0a00 	mov.w	sl, #0
    d46a:	9b04      	ldr	r3, [sp, #16]
		err = at_params_short_get(&m_param_list, 2, &port);
    d46c:	f10d 020a 	add.w	r2, sp, #10
    d470:	2102      	movs	r1, #2
    d472:	484e      	ldr	r0, [pc, #312]	; (d5ac <handle_at_udp_recvfrom+0x1c8>)
		url[size] = '\0';
    d474:	f807 a003 	strb.w	sl, [r7, r3]
		err = at_params_short_get(&m_param_list, 2, &port);
    d478:	f010 fef6 	bl	1e268 <at_params_short_get>
		if (err < 0) {
    d47c:	1e04      	subs	r4, r0, #0
    d47e:	dbcd      	blt.n	d41c <handle_at_udp_recvfrom+0x38>
		err = at_params_short_get(&m_param_list, 3, &length);
    d480:	aa03      	add	r2, sp, #12
    d482:	2103      	movs	r1, #3
    d484:	4849      	ldr	r0, [pc, #292]	; (d5ac <handle_at_udp_recvfrom+0x1c8>)
    d486:	f010 feef 	bl	1e268 <at_params_short_get>
		if (err < 0) {
    d48a:	1e04      	subs	r4, r0, #0
    d48c:	dbc6      	blt.n	d41c <handle_at_udp_recvfrom+0x38>
		err = at_params_short_get(&m_param_list, 4, &time);
    d48e:	f10d 020e 	add.w	r2, sp, #14
    d492:	2104      	movs	r1, #4
    d494:	4845      	ldr	r0, [pc, #276]	; (d5ac <handle_at_udp_recvfrom+0x1c8>)
    d496:	f010 fee7 	bl	1e268 <at_params_short_get>
		if (err < 0) {
    d49a:	1e04      	subs	r4, r0, #0
    d49c:	dbbe      	blt.n	d41c <handle_at_udp_recvfrom+0x38>
	int sockaddr_len = sizeof(struct sockaddr);
    d49e:	2218      	movs	r2, #24
		err = do_udp_recvfrom(url, port, length, time);
    d4a0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	int sockaddr_len = sizeof(struct sockaddr);
    d4a4:	ae05      	add	r6, sp, #20
	ret = do_udp_init(url, port);
    d4a6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    d4aa:	4638      	mov	r0, r7
		err = do_udp_recvfrom(url, port, length, time);
    d4ac:	f8bd 900c 	ldrh.w	r9, [sp, #12]
	int sockaddr_len = sizeof(struct sockaddr);
    d4b0:	6032      	str	r2, [r6, #0]
	struct timeval tmo = {
    d4b2:	e9cd 3a06 	strd	r3, sl, [sp, #24]
	ret = do_udp_init(url, port);
    d4b6:	f7ff ff61 	bl	d37c <do_udp_init>
	if (ret < 0) {
    d4ba:	1e04      	subs	r4, r0, #0
    d4bc:	dbae      	blt.n	d41c <handle_at_udp_recvfrom+0x38>
    d4be:	2208      	movs	r2, #8
    d4c0:	4f3b      	ldr	r7, [pc, #236]	; (d5b0 <handle_at_udp_recvfrom+0x1cc>)
    d4c2:	4641      	mov	r1, r8
    d4c4:	683b      	ldr	r3, [r7, #0]
    d4c6:	9200      	str	r2, [sp, #0]
    d4c8:	69dc      	ldr	r4, [r3, #28]
    d4ca:	2214      	movs	r2, #20
    d4cc:	ab06      	add	r3, sp, #24
    d4ce:	6828      	ldr	r0, [r5, #0]
    d4d0:	47a0      	blx	r4
	if (ret < 0) {
    d4d2:	1e04      	subs	r4, r0, #0
    d4d4:	da19      	bge.n	d50a <handle_at_udp_recvfrom+0x126>
		LOG_ERR("setsockopt() error: %d", -errno);
    d4d6:	2301      	movs	r3, #1
    d4d8:	f04f 0500 	mov.w	r5, #0
    d4dc:	4a2f      	ldr	r2, [pc, #188]	; (d59c <handle_at_udp_recvfrom+0x1b8>)
    d4de:	f363 0507 	bfi	r5, r3, #0, #8
    d4e2:	4b2f      	ldr	r3, [pc, #188]	; (d5a0 <handle_at_udp_recvfrom+0x1bc>)
    d4e4:	1a9b      	subs	r3, r3, r2
    d4e6:	08db      	lsrs	r3, r3, #3
    d4e8:	f363 158f 	bfi	r5, r3, #6, #10
    d4ec:	f00e fccd 	bl	1be8a <z_errno>
    d4f0:	6801      	ldr	r1, [r0, #0]
    d4f2:	462a      	mov	r2, r5
    d4f4:	4249      	negs	r1, r1
    d4f6:	482f      	ldr	r0, [pc, #188]	; (d5b4 <handle_at_udp_recvfrom+0x1d0>)
    d4f8:	f00f f86e 	bl	1c5d8 <log_1>
		do_socket_close(-errno);
    d4fc:	f00e fcc5 	bl	1be8a <z_errno>
    d500:	6800      	ldr	r0, [r0, #0]
    d502:	4240      	negs	r0, r0
    d504:	f7ff fb34 	bl	cb70 <do_socket_close>
		return ret;
    d508:	e788      	b.n	d41c <handle_at_udp_recvfrom+0x38>
	if (length > NET_IPV4_MTU) {
    d50a:	683b      	ldr	r3, [r7, #0]
    d50c:	f5b9 7f10 	cmp.w	r9, #576	; 0x240
    d510:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    d512:	4b29      	ldr	r3, [pc, #164]	; (d5b8 <handle_at_udp_recvfrom+0x1d4>)
    d514:	af28      	add	r7, sp, #160	; 0xa0
    d516:	6828      	ldr	r0, [r5, #0]
	return socket_ops->recvfrom(sock, buf, len, flags, from, fromlen);
    d518:	bf88      	it	hi
    d51a:	f44f 7210 	movhi.w	r2, #576	; 0x240
    d51e:	9601      	str	r6, [sp, #4]
    d520:	9300      	str	r3, [sp, #0]
    d522:	bf98      	it	ls
    d524:	fa0f f289 	sxthls.w	r2, r9
    d528:	2300      	movs	r3, #0
    d52a:	4639      	mov	r1, r7
    d52c:	47a0      	blx	r4
	if (ret < 0) {
    d52e:	2800      	cmp	r0, #0
    d530:	4606      	mov	r6, r0
    d532:	da1d      	bge.n	d570 <handle_at_udp_recvfrom+0x18c>
		LOG_WRN("recvfrom() error: %d", -errno);
    d534:	2302      	movs	r3, #2
    d536:	f04f 0400 	mov.w	r4, #0
    d53a:	4a18      	ldr	r2, [pc, #96]	; (d59c <handle_at_udp_recvfrom+0x1b8>)
    d53c:	f363 0407 	bfi	r4, r3, #0, #8
    d540:	4b17      	ldr	r3, [pc, #92]	; (d5a0 <handle_at_udp_recvfrom+0x1bc>)
    d542:	1a9b      	subs	r3, r3, r2
    d544:	08db      	lsrs	r3, r3, #3
    d546:	f363 148f 	bfi	r4, r3, #6, #10
    d54a:	f00e fc9e 	bl	1be8a <z_errno>
    d54e:	6801      	ldr	r1, [r0, #0]
    d550:	4622      	mov	r2, r4
    d552:	4249      	negs	r1, r1
    d554:	4819      	ldr	r0, [pc, #100]	; (d5bc <handle_at_udp_recvfrom+0x1d8>)
    d556:	f00f f83f 	bl	1c5d8 <log_1>
		do_socket_close(-errno);
    d55a:	f00e fc96 	bl	1be8a <z_errno>
    d55e:	6800      	ldr	r0, [r0, #0]
    d560:	4240      	negs	r0, r0
    d562:	f7ff fb05 	bl	cb70 <do_socket_close>
		ret = -errno;
    d566:	f00e fc90 	bl	1be8a <z_errno>
    d56a:	6804      	ldr	r4, [r0, #0]
    d56c:	4264      	negs	r4, r4
    d56e:	e755      	b.n	d41c <handle_at_udp_recvfrom+0x38>
		data[ret] = '\0';
    d570:	2400      	movs	r4, #0
		client.callback("#XUDPRECV: ");
    d572:	68ab      	ldr	r3, [r5, #8]
		data[ret] = '\0';
    d574:	543c      	strb	r4, [r7, r0]
		client.callback("#XUDPRECV: ");
    d576:	4812      	ldr	r0, [pc, #72]	; (d5c0 <handle_at_udp_recvfrom+0x1dc>)
    d578:	4798      	blx	r3
		client.callback(data);
    d57a:	68ab      	ldr	r3, [r5, #8]
    d57c:	4638      	mov	r0, r7
    d57e:	4798      	blx	r3
		client.callback("\r\n");
    d580:	68ab      	ldr	r3, [r5, #8]
    d582:	4810      	ldr	r0, [pc, #64]	; (d5c4 <handle_at_udp_recvfrom+0x1e0>)
    d584:	4798      	blx	r3
		sprintf(buf, "#XUDPRECV: %d\r\n", ret);
    d586:	4632      	mov	r2, r6
    d588:	490f      	ldr	r1, [pc, #60]	; (d5c8 <handle_at_udp_recvfrom+0x1e4>)
    d58a:	4810      	ldr	r0, [pc, #64]	; (d5cc <handle_at_udp_recvfrom+0x1e8>)
    d58c:	f003 fa0a 	bl	109a4 <sprintf>
		client.callback(buf);
    d590:	68ab      	ldr	r3, [r5, #8]
    d592:	480e      	ldr	r0, [pc, #56]	; (d5cc <handle_at_udp_recvfrom+0x1e8>)
    d594:	4798      	blx	r3
		break;
    d596:	e741      	b.n	d41c <handle_at_udp_recvfrom+0x38>
    d598:	20020108 	.word	0x20020108
    d59c:	0001edc4 	.word	0x0001edc4
    d5a0:	0001ee3c 	.word	0x0001ee3c
    d5a4:	0001f6db 	.word	0x0001f6db
    d5a8:	0001f7ce 	.word	0x0001f7ce
    d5ac:	200200e8 	.word	0x200200e8
    d5b0:	2002031c 	.word	0x2002031c
    d5b4:	0001f687 	.word	0x0001f687
    d5b8:	20024e04 	.word	0x20024e04
    d5bc:	0001f7dd 	.word	0x0001f7dd
    d5c0:	0001f7f2 	.word	0x0001f7f2
    d5c4:	0001f793 	.word	0x0001f793
    d5c8:	0001f7fe 	.word	0x0001f7fe
    d5cc:	20026340 	.word	0x20026340

0000d5d0 <handle_at_udp_sendto>:
{
    d5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (client.sock < 0) {
    d5d4:	4b50      	ldr	r3, [pc, #320]	; (d718 <handle_at_udp_sendto+0x148>)
{
    d5d6:	f5ad 7d35 	sub.w	sp, sp, #724	; 0x2d4
	if (client.sock < 0) {
    d5da:	681a      	ldr	r2, [r3, #0]
{
    d5dc:	4604      	mov	r4, r0
	if (client.sock < 0) {
    d5de:	2a00      	cmp	r2, #0
    d5e0:	461f      	mov	r7, r3
    d5e2:	da13      	bge.n	d60c <handle_at_udp_sendto+0x3c>
		LOG_ERR("Socket not opened yet");
    d5e4:	2301      	movs	r3, #1
    d5e6:	f04f 0100 	mov.w	r1, #0
    d5ea:	4a4c      	ldr	r2, [pc, #304]	; (d71c <handle_at_udp_sendto+0x14c>)
    d5ec:	f363 0107 	bfi	r1, r3, #0, #8
    d5f0:	4b4b      	ldr	r3, [pc, #300]	; (d720 <handle_at_udp_sendto+0x150>)
    d5f2:	484c      	ldr	r0, [pc, #304]	; (d724 <handle_at_udp_sendto+0x154>)
    d5f4:	1a9b      	subs	r3, r3, r2
    d5f6:	08db      	lsrs	r3, r3, #3
    d5f8:	f363 118f 	bfi	r1, r3, #6, #10
		LOG_ERR("Invalid socket");
    d5fc:	f00e ffdf 	bl	1c5be <log_0>
	int err = -EINVAL;
    d600:	f06f 0015 	mvn.w	r0, #21
}
    d604:	f50d 7d35 	add.w	sp, sp, #724	; 0x2d4
    d608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (client.ip_proto != IPPROTO_UDP) {
    d60c:	791b      	ldrb	r3, [r3, #4]
    d60e:	2b11      	cmp	r3, #17
    d610:	d00c      	beq.n	d62c <handle_at_udp_sendto+0x5c>
		LOG_ERR("Invalid socket");
    d612:	2301      	movs	r3, #1
    d614:	f04f 0100 	mov.w	r1, #0
    d618:	4a40      	ldr	r2, [pc, #256]	; (d71c <handle_at_udp_sendto+0x14c>)
    d61a:	f363 0107 	bfi	r1, r3, #0, #8
    d61e:	4b40      	ldr	r3, [pc, #256]	; (d720 <handle_at_udp_sendto+0x150>)
    d620:	4841      	ldr	r0, [pc, #260]	; (d728 <handle_at_udp_sendto+0x158>)
    d622:	1a9b      	subs	r3, r3, r2
    d624:	08db      	lsrs	r3, r3, #3
    d626:	f363 118f 	bfi	r1, r3, #6, #10
    d62a:	e7e7      	b.n	d5fc <handle_at_udp_sendto+0x2c>
	switch (cmd_type) {
    d62c:	2801      	cmp	r0, #1
    d62e:	d1e7      	bne.n	d600 <handle_at_udp_sendto+0x30>
		if (at_params_valid_count_get(&m_param_list) < 4) {
    d630:	483e      	ldr	r0, [pc, #248]	; (d72c <handle_at_udp_sendto+0x15c>)
    d632:	f010 fe4e 	bl	1e2d2 <at_params_valid_count_get>
    d636:	2803      	cmp	r0, #3
    d638:	d9e2      	bls.n	d600 <handle_at_udp_sendto+0x30>
		size = TCPIP_MAX_URL;
    d63a:	2380      	movs	r3, #128	; 0x80
		err = at_params_string_get(&m_param_list, 1, url, &size);
    d63c:	ae04      	add	r6, sp, #16
		size = TCPIP_MAX_URL;
    d63e:	9303      	str	r3, [sp, #12]
		err = at_params_string_get(&m_param_list, 1, url, &size);
    d640:	4632      	mov	r2, r6
    d642:	ab03      	add	r3, sp, #12
    d644:	4621      	mov	r1, r4
    d646:	4839      	ldr	r0, [pc, #228]	; (d72c <handle_at_udp_sendto+0x15c>)
    d648:	f010 fe20 	bl	1e28c <at_params_string_get>
		if (err < 0) {
    d64c:	2800      	cmp	r0, #0
    d64e:	dbd9      	blt.n	d604 <handle_at_udp_sendto+0x34>
		url[size] = '\0';
    d650:	2400      	movs	r4, #0
    d652:	9b03      	ldr	r3, [sp, #12]
		err = at_params_short_get(&m_param_list, 2, &port);
    d654:	f10d 020a 	add.w	r2, sp, #10
    d658:	2102      	movs	r1, #2
    d65a:	4834      	ldr	r0, [pc, #208]	; (d72c <handle_at_udp_sendto+0x15c>)
		url[size] = '\0';
    d65c:	54f4      	strb	r4, [r6, r3]
		err = at_params_short_get(&m_param_list, 2, &port);
    d65e:	f010 fe03 	bl	1e268 <at_params_short_get>
		if (err < 0) {
    d662:	2800      	cmp	r0, #0
    d664:	dbce      	blt.n	d604 <handle_at_udp_sendto+0x34>
		size = NET_IPV4_MTU;
    d666:	f44f 7310 	mov.w	r3, #576	; 0x240
		err = at_params_string_get(&m_param_list, 3, data, &size);
    d66a:	ad24      	add	r5, sp, #144	; 0x90
		size = NET_IPV4_MTU;
    d66c:	9303      	str	r3, [sp, #12]
		err = at_params_string_get(&m_param_list, 3, data, &size);
    d66e:	462a      	mov	r2, r5
    d670:	ab03      	add	r3, sp, #12
    d672:	2103      	movs	r1, #3
    d674:	482d      	ldr	r0, [pc, #180]	; (d72c <handle_at_udp_sendto+0x15c>)
    d676:	f010 fe09 	bl	1e28c <at_params_string_get>
		if (err < 0) {
    d67a:	2800      	cmp	r0, #0
    d67c:	dbc2      	blt.n	d604 <handle_at_udp_sendto+0x34>
		data[size] = '\0';
    d67e:	9b03      	ldr	r3, [sp, #12]
	u32_t datalen = strlen(data);
    d680:	4628      	mov	r0, r5
		data[size] = '\0';
    d682:	54ec      	strb	r4, [r5, r3]
		err = do_udp_sendto(url, port, data);
    d684:	f8bd 900a 	ldrh.w	r9, [sp, #10]
	u32_t datalen = strlen(data);
    d688:	f00f fcd4 	bl	1d034 <strlen>
	ret = do_udp_init(url, port);
    d68c:	4649      	mov	r1, r9
	u32_t datalen = strlen(data);
    d68e:	4680      	mov	r8, r0
	ret = do_udp_init(url, port);
    d690:	4630      	mov	r0, r6
    d692:	f7ff fe73 	bl	d37c <do_udp_init>
	if (ret < 0) {
    d696:	2800      	cmp	r0, #0
    d698:	dbb4      	blt.n	d604 <handle_at_udp_sendto+0x34>
	return socket_ops->sendto(sock, buf, len, flags, to, tolen);
    d69a:	f04f 0908 	mov.w	r9, #8
    d69e:	4e24      	ldr	r6, [pc, #144]	; (d730 <handle_at_udp_sendto+0x160>)
    d6a0:	f8df a09c 	ldr.w	sl, [pc, #156]	; d740 <handle_at_udp_sendto+0x170>
	while (offset < datalen) {
    d6a4:	45a0      	cmp	r8, r4
    d6a6:	d809      	bhi.n	d6bc <handle_at_udp_sendto+0xec>
	sprintf(buf, "#XUDPSENDTO: %d\r\n", offset);
    d6a8:	4622      	mov	r2, r4
    d6aa:	4922      	ldr	r1, [pc, #136]	; (d734 <handle_at_udp_sendto+0x164>)
    d6ac:	4822      	ldr	r0, [pc, #136]	; (d738 <handle_at_udp_sendto+0x168>)
    d6ae:	f003 f979 	bl	109a4 <sprintf>
	client.callback(buf);
    d6b2:	4821      	ldr	r0, [pc, #132]	; (d738 <handle_at_udp_sendto+0x168>)
    d6b4:	68bb      	ldr	r3, [r7, #8]
    d6b6:	4798      	blx	r3
	return 0;
    d6b8:	2000      	movs	r0, #0
    d6ba:	e7a3      	b.n	d604 <handle_at_udp_sendto+0x34>
    d6bc:	6833      	ldr	r3, [r6, #0]
    d6be:	e9cd a900 	strd	sl, r9, [sp]
    d6c2:	eba8 0204 	sub.w	r2, r8, r4
    d6c6:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
    d6ca:	1929      	adds	r1, r5, r4
    d6cc:	2300      	movs	r3, #0
    d6ce:	6838      	ldr	r0, [r7, #0]
    d6d0:	47d8      	blx	fp
		if (ret <= 0) {
    d6d2:	2800      	cmp	r0, #0
    d6d4:	dc1d      	bgt.n	d712 <handle_at_udp_sendto+0x142>
			LOG_ERR("sendto() failed: %d", -errno);
    d6d6:	2301      	movs	r3, #1
    d6d8:	f04f 0400 	mov.w	r4, #0
    d6dc:	4a0f      	ldr	r2, [pc, #60]	; (d71c <handle_at_udp_sendto+0x14c>)
    d6de:	f363 0407 	bfi	r4, r3, #0, #8
    d6e2:	4b0f      	ldr	r3, [pc, #60]	; (d720 <handle_at_udp_sendto+0x150>)
    d6e4:	1a9b      	subs	r3, r3, r2
    d6e6:	08db      	lsrs	r3, r3, #3
    d6e8:	f363 148f 	bfi	r4, r3, #6, #10
    d6ec:	f00e fbcd 	bl	1be8a <z_errno>
    d6f0:	6801      	ldr	r1, [r0, #0]
    d6f2:	4622      	mov	r2, r4
    d6f4:	4249      	negs	r1, r1
    d6f6:	4811      	ldr	r0, [pc, #68]	; (d73c <handle_at_udp_sendto+0x16c>)
    d6f8:	f00e ff6e 	bl	1c5d8 <log_1>
			do_socket_close(-errno);
    d6fc:	f00e fbc5 	bl	1be8a <z_errno>
    d700:	6800      	ldr	r0, [r0, #0]
    d702:	4240      	negs	r0, r0
    d704:	f7ff fa34 	bl	cb70 <do_socket_close>
			return -errno;
    d708:	f00e fbbf 	bl	1be8a <z_errno>
    d70c:	6800      	ldr	r0, [r0, #0]
    d70e:	4240      	negs	r0, r0
    d710:	e778      	b.n	d604 <handle_at_udp_sendto+0x34>
		offset += ret;
    d712:	4404      	add	r4, r0
    d714:	e7c6      	b.n	d6a4 <handle_at_udp_sendto+0xd4>
    d716:	bf00      	nop
    d718:	20020108 	.word	0x20020108
    d71c:	0001edc4 	.word	0x0001edc4
    d720:	0001ee3c 	.word	0x0001ee3c
    d724:	0001f6db 	.word	0x0001f6db
    d728:	0001f7ce 	.word	0x0001f7ce
    d72c:	200200e8 	.word	0x200200e8
    d730:	2002031c 	.word	0x2002031c
    d734:	0001f822 	.word	0x0001f822
    d738:	20026340 	.word	0x20026340
    d73c:	0001f80e 	.word	0x0001f80e
    d740:	20024e04 	.word	0x20024e04

0000d744 <slm_at_tcpip_parse>:

/**@brief API to handle TCP/IP AT commands
 */
int slm_at_tcpip_parse(const char *at_cmd)
{
    d744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d748:	4d20      	ldr	r5, [pc, #128]	; (d7cc <slm_at_tcpip_parse+0x88>)
    d74a:	4606      	mov	r6, r0
	int ret = -ENOTSUP;
	enum at_cmd_type type;

	for (int i = 0; i < AT_TCPIP_MAX; i++) {
    d74c:	2400      	movs	r4, #0
    d74e:	46a8      	mov	r8, r5
		u8_t cmd_len = strlen(m_tcpip_at_list[i].string);
    d750:	686f      	ldr	r7, [r5, #4]
    d752:	4638      	mov	r0, r7
    d754:	f00f fc6e 	bl	1d034 <strlen>
    d758:	2300      	movs	r3, #0
    d75a:	b2c0      	uxtb	r0, r0
    d75c:	4283      	cmp	r3, r0
    d75e:	db18      	blt.n	d792 <slm_at_tcpip_parse+0x4e>

		if (slm_at_cmd_cmp(at_cmd, m_tcpip_at_list[i].string,
			cmd_len)) {
			ret = at_parser_params_from_str(at_cmd, NULL,
    d760:	2100      	movs	r1, #0
    d762:	4a1b      	ldr	r2, [pc, #108]	; (d7d0 <slm_at_tcpip_parse+0x8c>)
    d764:	4630      	mov	r0, r6
    d766:	f010 fc85 	bl	1e074 <at_parser_params_from_str>
						&m_param_list);
			if (ret < 0) {
    d76a:	1e01      	subs	r1, r0, #0
    d76c:	da1c      	bge.n	d7a8 <slm_at_tcpip_parse+0x64>
				LOG_ERR("Failed to parse AT command %d", ret);
    d76e:	2301      	movs	r3, #1
    d770:	f04f 0200 	mov.w	r2, #0
    d774:	4817      	ldr	r0, [pc, #92]	; (d7d4 <slm_at_tcpip_parse+0x90>)
    d776:	f363 0207 	bfi	r2, r3, #0, #8
    d77a:	4b17      	ldr	r3, [pc, #92]	; (d7d8 <slm_at_tcpip_parse+0x94>)
    d77c:	1a1b      	subs	r3, r3, r0
    d77e:	08db      	lsrs	r3, r3, #3
    d780:	4816      	ldr	r0, [pc, #88]	; (d7dc <slm_at_tcpip_parse+0x98>)
    d782:	f363 128f 	bfi	r2, r3, #6, #10
    d786:	f00e ff27 	bl	1c5d8 <log_1>
				return -EINVAL;
    d78a:	f06f 0015 	mvn.w	r0, #21
			break;
		}
	}

	return ret;
}
    d78e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (toupper(*(cmd + i)) != *(slm_cmd + i)) {
    d792:	5cf2      	ldrb	r2, [r6, r3]
    d794:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
    d798:	2919      	cmp	r1, #25
    d79a:	5cf9      	ldrb	r1, [r7, r3]
    d79c:	bf98      	it	ls
    d79e:	3a20      	subls	r2, #32
    d7a0:	4291      	cmp	r1, r2
    d7a2:	d10b      	bne.n	d7bc <slm_at_tcpip_parse+0x78>
	for (int i = 0; i < length; i++) {
    d7a4:	3301      	adds	r3, #1
    d7a6:	e7d9      	b.n	d75c <slm_at_tcpip_parse+0x18>
			type = at_parser_cmd_type_get(at_cmd);
    d7a8:	4630      	mov	r0, r6
    d7aa:	f010 fc66 	bl	1e07a <at_parser_cmd_type_get>
			ret = m_tcpip_at_list[i].handler(type);
    d7ae:	230c      	movs	r3, #12
    d7b0:	fb03 8404 	mla	r4, r3, r4, r8
    d7b4:	68a3      	ldr	r3, [r4, #8]
}
    d7b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			ret = m_tcpip_at_list[i].handler(type);
    d7ba:	4718      	bx	r3
	for (int i = 0; i < AT_TCPIP_MAX; i++) {
    d7bc:	3401      	adds	r4, #1
    d7be:	2c07      	cmp	r4, #7
    d7c0:	f105 050c 	add.w	r5, r5, #12
    d7c4:	d1c4      	bne.n	d750 <slm_at_tcpip_parse+0xc>
	int ret = -ENOTSUP;
    d7c6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d7ca:	e7e0      	b.n	d78e <slm_at_tcpip_parse+0x4a>
    d7cc:	0001ee7c 	.word	0x0001ee7c
    d7d0:	200200e8 	.word	0x200200e8
    d7d4:	0001edc4 	.word	0x0001edc4
    d7d8:	0001ee3c 	.word	0x0001ee3c
    d7dc:	0001f40f 	.word	0x0001f40f

0000d7e0 <request_nb_iot_network_stats>:
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
int request_nb_iot_network_stats()
{
	LOG_INF("Requesting NB-IoT network stats...");
    d7e0:	2303      	movs	r3, #3
    d7e2:	f04f 0100 	mov.w	r1, #0
{
    d7e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_INF("Requesting NB-IoT network stats...");
    d7ea:	f363 0107 	bfi	r1, r3, #0, #8
    d7ee:	4cae      	ldr	r4, [pc, #696]	; (daa8 <request_nb_iot_network_stats+0x2c8>)
    d7f0:	4bae      	ldr	r3, [pc, #696]	; (daac <request_nb_iot_network_stats+0x2cc>)
{
    d7f2:	b0a9      	sub	sp, #164	; 0xa4
	LOG_INF("Requesting NB-IoT network stats...");
    d7f4:	1ae4      	subs	r4, r4, r3
    d7f6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    d7fa:	f364 118f 	bfi	r1, r4, #6, #10
    d7fe:	48ac      	ldr	r0, [pc, #688]	; (dab0 <request_nb_iot_network_stats+0x2d0>)
    d800:	f00e fedd 	bl	1c5be <log_0>
	int  at_sock;
	int  bytes_sent;
	int  bytes_received;
	char buf[150];

	at_sock = socket(AF_LTE, 0, NPROTO_AT);
    d804:	f240 2201 	movw	r2, #513	; 0x201
    d808:	2100      	movs	r1, #0
    d80a:	2066      	movs	r0, #102	; 0x66
    d80c:	f7ff f9a4 	bl	cb58 <socket>
	if (at_sock < 0) {
    d810:	1e05      	subs	r5, r0, #0
    d812:	db16      	blt.n	d842 <request_nb_iot_network_stats+0x62>
		return -1;
	}

	// Get and parse current cell ID: AT+CEREG?
	// LOG_INF("CEREG");
	bytes_sent = send(at_sock, AT_CEREG, strlen(AT_CEREG), 0);
    d814:	48a7      	ldr	r0, [pc, #668]	; (dab4 <request_nb_iot_network_stats+0x2d4>)
    d816:	f00f fc0d 	bl	1d034 <strlen>
    d81a:	49a6      	ldr	r1, [pc, #664]	; (dab4 <request_nb_iot_network_stats+0x2d4>)
    d81c:	4602      	mov	r2, r0
    d81e:	4628      	mov	r0, r5
    d820:	f7ff fab4 	bl	cd8c <send.constprop.10>
	if (bytes_sent < 0) {
    d824:	2800      	cmp	r0, #0
    d826:	da0f      	bge.n	d848 <request_nb_iot_network_stats+0x68>
		LOG_INF("CEREG send error");
    d828:	f04f 0100 	mov.w	r1, #0
    d82c:	2303      	movs	r3, #3
    d82e:	48a2      	ldr	r0, [pc, #648]	; (dab8 <request_nb_iot_network_stats+0x2d8>)
    d830:	f363 0107 	bfi	r1, r3, #0, #8
    d834:	f364 118f 	bfi	r1, r4, #6, #10
			neighbors[0] = '\0';
		}	
	}
	else if (strstr(buf, "ERROR") != NULL) 
	{
		LOG_ERR("Error while getting neighbor data!");
    d838:	f00e fec1 	bl	1c5be <log_0>
		close(at_sock);
    d83c:	4628      	mov	r0, r5
    d83e:	f7ff f991 	bl	cb64 <close>
		return -1;
    d842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d846:	e10b      	b.n	da60 <request_nb_iot_network_stats+0x280>
		bytes_received = recv(at_sock, buf, 100, 0);
    d848:	2264      	movs	r2, #100	; 0x64
    d84a:	a902      	add	r1, sp, #8
    d84c:	4628      	mov	r0, r5
    d84e:	f7ff fb1b 	bl	ce88 <recv.constprop.12>
	} while (bytes_received == 0);
    d852:	2800      	cmp	r0, #0
    d854:	d0f8      	beq.n	d848 <request_nb_iot_network_stats+0x68>
	if(strstr(buf, "OK") != NULL)
    d856:	4999      	ldr	r1, [pc, #612]	; (dabc <request_nb_iot_network_stats+0x2dc>)
    d858:	a802      	add	r0, sp, #8
    d85a:	f00f fb96 	bl	1cf8a <strstr>
    d85e:	b370      	cbz	r0, d8be <request_nb_iot_network_stats+0xde>
		char* pos = strstr(buf, "\",\"")+3;		
    d860:	4997      	ldr	r1, [pc, #604]	; (dac0 <request_nb_iot_network_stats+0x2e0>)
    d862:	a802      	add	r0, sp, #8
    d864:	f00f fb91 	bl	1cf8a <strstr>
    d868:	4a96      	ldr	r2, [pc, #600]	; (dac4 <request_nb_iot_network_stats+0x2e4>)
    d86a:	1c83      	adds	r3, r0, #2
    d86c:	300a      	adds	r0, #10
			current_cell_id[i] = pos[i];
    d86e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		for(uint8_t i=0; i<8; i++)
    d872:	4298      	cmp	r0, r3
			current_cell_id[i] = pos[i];
    d874:	f802 1b01 	strb.w	r1, [r2], #1
		for(uint8_t i=0; i<8; i++)
    d878:	d1f9      	bne.n	d86e <request_nb_iot_network_stats+0x8e>
		LOG_INF("Current cell ID = %s", current_cell_id);
    d87a:	f04f 0200 	mov.w	r2, #0
    d87e:	2303      	movs	r3, #3
    d880:	f363 0207 	bfi	r2, r3, #0, #8
    d884:	f364 128f 	bfi	r2, r4, #6, #10
    d888:	498e      	ldr	r1, [pc, #568]	; (dac4 <request_nb_iot_network_stats+0x2e4>)
    d88a:	488f      	ldr	r0, [pc, #572]	; (dac8 <request_nb_iot_network_stats+0x2e8>)
    d88c:	f00e fea4 	bl	1c5d8 <log_1>
	k_sleep(K_SECONDS(2));
    d890:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    d894:	f00e fafb 	bl	1be8e <k_sleep>
	bytes_sent = send(at_sock, AT_CESQ, strlen(AT_CESQ), 0);
    d898:	488c      	ldr	r0, [pc, #560]	; (dacc <request_nb_iot_network_stats+0x2ec>)
    d89a:	f00f fbcb 	bl	1d034 <strlen>
    d89e:	498b      	ldr	r1, [pc, #556]	; (dacc <request_nb_iot_network_stats+0x2ec>)
    d8a0:	4602      	mov	r2, r0
    d8a2:	4628      	mov	r0, r5
    d8a4:	f7ff fa72 	bl	cd8c <send.constprop.10>
	if (bytes_sent < 0) {
    d8a8:	2800      	cmp	r0, #0
    d8aa:	da17      	bge.n	d8dc <request_nb_iot_network_stats+0xfc>
		LOG_INF("CESQ send error");
    d8ac:	f04f 0100 	mov.w	r1, #0
    d8b0:	2303      	movs	r3, #3
    d8b2:	f363 0107 	bfi	r1, r3, #0, #8
    d8b6:	f364 118f 	bfi	r1, r4, #6, #10
    d8ba:	4885      	ldr	r0, [pc, #532]	; (dad0 <request_nb_iot_network_stats+0x2f0>)
    d8bc:	e7bc      	b.n	d838 <request_nb_iot_network_stats+0x58>
	else if (strstr(buf, "ERROR") != NULL) 
    d8be:	4985      	ldr	r1, [pc, #532]	; (dad4 <request_nb_iot_network_stats+0x2f4>)
    d8c0:	a802      	add	r0, sp, #8
    d8c2:	f00f fb62 	bl	1cf8a <strstr>
    d8c6:	2800      	cmp	r0, #0
    d8c8:	d0e2      	beq.n	d890 <request_nb_iot_network_stats+0xb0>
		LOG_ERR("Error while getting current cell ID!");
    d8ca:	f04f 0100 	mov.w	r1, #0
    d8ce:	2301      	movs	r3, #1
    d8d0:	f363 0107 	bfi	r1, r3, #0, #8
    d8d4:	f364 118f 	bfi	r1, r4, #6, #10
    d8d8:	487f      	ldr	r0, [pc, #508]	; (dad8 <request_nb_iot_network_stats+0x2f8>)
    d8da:	e7ad      	b.n	d838 <request_nb_iot_network_stats+0x58>
		bytes_received = recv(at_sock, buf, 100, 0);
    d8dc:	2264      	movs	r2, #100	; 0x64
    d8de:	a902      	add	r1, sp, #8
    d8e0:	4628      	mov	r0, r5
    d8e2:	f7ff fad1 	bl	ce88 <recv.constprop.12>
	} while (bytes_received == 0);
    d8e6:	2800      	cmp	r0, #0
    d8e8:	d0f8      	beq.n	d8dc <request_nb_iot_network_stats+0xfc>
	LOG_INF("CESQ RESPONSE: %s", buf); // +CESQ: 99,99,255,255,17,54 \n OK		
    d8ea:	2303      	movs	r3, #3
    d8ec:	f04f 0200 	mov.w	r2, #0
    d8f0:	f363 0207 	bfi	r2, r3, #0, #8
    d8f4:	a902      	add	r1, sp, #8
    d8f6:	4879      	ldr	r0, [pc, #484]	; (dadc <request_nb_iot_network_stats+0x2fc>)
    d8f8:	f364 128f 	bfi	r2, r4, #6, #10
    d8fc:	f00e fe6c 	bl	1c5d8 <log_1>
	if(strstr(buf, "OK") != NULL)
    d900:	496e      	ldr	r1, [pc, #440]	; (dabc <request_nb_iot_network_stats+0x2dc>)
    d902:	a802      	add	r0, sp, #8
    d904:	f00f fb41 	bl	1cf8a <strstr>
    d908:	2800      	cmp	r0, #0
    d90a:	d03e      	beq.n	d98a <request_nb_iot_network_stats+0x1aa>
		char *pos1 = strrchr(buf, ',') + 1;
    d90c:	212c      	movs	r1, #44	; 0x2c
    d90e:	a802      	add	r0, sp, #8
    d910:	f00f fb83 	bl	1d01a <strrchr>
    d914:	1c46      	adds	r6, r0, #1
		char *pos2 = strstr(pos1, "\n");
    d916:	4972      	ldr	r1, [pc, #456]	; (dae0 <request_nb_iot_network_stats+0x300>)
    d918:	4630      	mov	r0, r6
    d91a:	f00f fb36 	bl	1cf8a <strstr>
    d91e:	4680      	mov	r8, r0
		memcpy(rsrp, pos1, strlen(pos1)-strlen(pos2));
    d920:	4630      	mov	r0, r6
    d922:	f00f fb87 	bl	1d034 <strlen>
    d926:	4607      	mov	r7, r0
    d928:	4640      	mov	r0, r8
    d92a:	f00f fb83 	bl	1d034 <strlen>
    d92e:	4631      	mov	r1, r6
    d930:	1a3a      	subs	r2, r7, r0
    d932:	4668      	mov	r0, sp
    d934:	f00f fbb9 	bl	1d0aa <memcpy>
		current_rsrp = (uint8_t) strtol(rsrp, &ptr, 10);
    d938:	220a      	movs	r2, #10
    d93a:	a901      	add	r1, sp, #4
    d93c:	4668      	mov	r0, sp
    d93e:	f00f fa35 	bl	1cdac <strtol>
    d942:	4b68      	ldr	r3, [pc, #416]	; (dae4 <request_nb_iot_network_stats+0x304>)
		LOG_INF("Current RSRP = %d", current_rsrp);
    d944:	f04f 0200 	mov.w	r2, #0
		current_rsrp = (uint8_t) strtol(rsrp, &ptr, 10);
    d948:	7018      	strb	r0, [r3, #0]
		LOG_INF("Current RSRP = %d", current_rsrp);
    d94a:	2303      	movs	r3, #3
    d94c:	f363 0207 	bfi	r2, r3, #0, #8
    d950:	b2c1      	uxtb	r1, r0
    d952:	f364 128f 	bfi	r2, r4, #6, #10
    d956:	4864      	ldr	r0, [pc, #400]	; (dae8 <request_nb_iot_network_stats+0x308>)
    d958:	f00e fe3e 	bl	1c5d8 <log_1>
	k_sleep(K_SECONDS(2));
    d95c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    d960:	f00e fa95 	bl	1be8e <k_sleep>
	bytes_sent = send(at_sock, AT_NBRGRSRP, strlen(AT_NBRGRSRP), 0);
    d964:	4861      	ldr	r0, [pc, #388]	; (daec <request_nb_iot_network_stats+0x30c>)
    d966:	f00f fb65 	bl	1d034 <strlen>
    d96a:	4960      	ldr	r1, [pc, #384]	; (daec <request_nb_iot_network_stats+0x30c>)
    d96c:	4602      	mov	r2, r0
    d96e:	4628      	mov	r0, r5
    d970:	f7ff fa0c 	bl	cd8c <send.constprop.10>
	if (bytes_sent < 0) {
    d974:	2800      	cmp	r0, #0
    d976:	da17      	bge.n	d9a8 <request_nb_iot_network_stats+0x1c8>
		LOG_INF("NBRGRSRP send error");
    d978:	f04f 0100 	mov.w	r1, #0
    d97c:	2303      	movs	r3, #3
    d97e:	f363 0107 	bfi	r1, r3, #0, #8
    d982:	f364 118f 	bfi	r1, r4, #6, #10
    d986:	485a      	ldr	r0, [pc, #360]	; (daf0 <request_nb_iot_network_stats+0x310>)
    d988:	e756      	b.n	d838 <request_nb_iot_network_stats+0x58>
	else if (strstr(buf, "ERROR") != NULL) 
    d98a:	4952      	ldr	r1, [pc, #328]	; (dad4 <request_nb_iot_network_stats+0x2f4>)
    d98c:	a802      	add	r0, sp, #8
    d98e:	f00f fafc 	bl	1cf8a <strstr>
    d992:	2800      	cmp	r0, #0
    d994:	d0e2      	beq.n	d95c <request_nb_iot_network_stats+0x17c>
		LOG_ERR("Error while getting current RSRP!");
    d996:	f04f 0100 	mov.w	r1, #0
    d99a:	2301      	movs	r3, #1
    d99c:	f363 0107 	bfi	r1, r3, #0, #8
    d9a0:	f364 118f 	bfi	r1, r4, #6, #10
    d9a4:	4853      	ldr	r0, [pc, #332]	; (daf4 <request_nb_iot_network_stats+0x314>)
    d9a6:	e747      	b.n	d838 <request_nb_iot_network_stats+0x58>
		bytes_received = recv(at_sock, buf, 150, 0);
    d9a8:	2296      	movs	r2, #150	; 0x96
    d9aa:	a902      	add	r1, sp, #8
    d9ac:	4628      	mov	r0, r5
    d9ae:	f7ff fa6b 	bl	ce88 <recv.constprop.12>
	} while (bytes_received == 0);
    d9b2:	2800      	cmp	r0, #0
    d9b4:	d0f8      	beq.n	d9a8 <request_nb_iot_network_stats+0x1c8>
	LOG_INF("NBRGRSRP RESPONSE: %s", buf); // %NBRGRSRP: 179,6447,57,11,6447,54
    d9b6:	2303      	movs	r3, #3
    d9b8:	f04f 0200 	mov.w	r2, #0
    d9bc:	f363 0207 	bfi	r2, r3, #0, #8
    d9c0:	a902      	add	r1, sp, #8
    d9c2:	484d      	ldr	r0, [pc, #308]	; (daf8 <request_nb_iot_network_stats+0x318>)
    d9c4:	f364 128f 	bfi	r2, r4, #6, #10
    d9c8:	f00e fe06 	bl	1c5d8 <log_1>
	if(strstr(buf, "OK") != NULL)
    d9cc:	493b      	ldr	r1, [pc, #236]	; (dabc <request_nb_iot_network_stats+0x2dc>)
    d9ce:	a802      	add	r0, sp, #8
    d9d0:	f00f fadb 	bl	1cf8a <strstr>
    d9d4:	2800      	cmp	r0, #0
    d9d6:	d058      	beq.n	da8a <request_nb_iot_network_stats+0x2aa>
		if(strstr(buf, "NBRGRSRP") != NULL)
    d9d8:	4948      	ldr	r1, [pc, #288]	; (dafc <request_nb_iot_network_stats+0x31c>)
    d9da:	a802      	add	r0, sp, #8
    d9dc:	f00f fad5 	bl	1cf8a <strstr>
    d9e0:	4606      	mov	r6, r0
    d9e2:	2800      	cmp	r0, #0
    d9e4:	d044      	beq.n	da70 <request_nb_iot_network_stats+0x290>
			char* pos1 = strstr(buf, "\%NBRGRSRP: ") + strlen("\%NBRGRSRP: ");
    d9e6:	4946      	ldr	r1, [pc, #280]	; (db00 <request_nb_iot_network_stats+0x320>)
    d9e8:	a802      	add	r0, sp, #8
    d9ea:	f00f face 	bl	1cf8a <strstr>
    d9ee:	4607      	mov	r7, r0
    d9f0:	4843      	ldr	r0, [pc, #268]	; (db00 <request_nb_iot_network_stats+0x320>)
    d9f2:	f00f fb1f 	bl	1d034 <strlen>
    d9f6:	4407      	add	r7, r0
			char* pos2 = strstr(pos1, "\n");
    d9f8:	4939      	ldr	r1, [pc, #228]	; (dae0 <request_nb_iot_network_stats+0x300>)
    d9fa:	4638      	mov	r0, r7
    d9fc:	f00f fac5 	bl	1cf8a <strstr>
			for(uint8_t i=0; i<strlen(pos1)-strlen(pos2); i++)
    da00:	2600      	movs	r6, #0
			char* pos2 = strstr(pos1, "\n");
    da02:	4681      	mov	r9, r0
				neighbors[i] = pos1[i];
    da04:	f8df b0fc 	ldr.w	fp, [pc, #252]	; db04 <request_nb_iot_network_stats+0x324>
			for(uint8_t i=0; i<strlen(pos1)-strlen(pos2); i++)
    da08:	4638      	mov	r0, r7
    da0a:	f00f fb13 	bl	1d034 <strlen>
    da0e:	4680      	mov	r8, r0
    da10:	4648      	mov	r0, r9
    da12:	f00f fb0f 	bl	1d034 <strlen>
    da16:	fa5f fa86 	uxtb.w	sl, r6
    da1a:	eba8 0000 	sub.w	r0, r8, r0
    da1e:	4582      	cmp	sl, r0
    da20:	f106 0601 	add.w	r6, r6, #1
    da24:	d31f      	bcc.n	da66 <request_nb_iot_network_stats+0x286>
			LOG_INF("Neighbors = %s", neighbors);
    da26:	f04f 0200 	mov.w	r2, #0
    da2a:	2303      	movs	r3, #3
    da2c:	f363 0207 	bfi	r2, r3, #0, #8
    da30:	f364 128f 	bfi	r2, r4, #6, #10
    da34:	4933      	ldr	r1, [pc, #204]	; (db04 <request_nb_iot_network_stats+0x324>)
    da36:	4834      	ldr	r0, [pc, #208]	; (db08 <request_nb_iot_network_stats+0x328>)
    da38:	f00e fdce 	bl	1c5d8 <log_1>
		return -1;
	}
	
	k_sleep(K_SECONDS(2));
    da3c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    da40:	f00e fa25 	bl	1be8e <k_sleep>

	close(at_sock);
    da44:	4628      	mov	r0, r5
    da46:	f7ff f88d 	bl	cb64 <close>
	LOG_INF("NB-IoT network stats requested.");
    da4a:	2303      	movs	r3, #3
    da4c:	f04f 0100 	mov.w	r1, #0
    da50:	f363 0107 	bfi	r1, r3, #0, #8
    da54:	482d      	ldr	r0, [pc, #180]	; (db0c <request_nb_iot_network_stats+0x32c>)
    da56:	f364 118f 	bfi	r1, r4, #6, #10
    da5a:	f00e fdb0 	bl	1c5be <log_0>
	
	return 0;
    da5e:	2000      	movs	r0, #0
}
    da60:	b029      	add	sp, #164	; 0xa4
    da62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				neighbors[i] = pos1[i];
    da66:	f817 300a 	ldrb.w	r3, [r7, sl]
    da6a:	f80b 300a 	strb.w	r3, [fp, sl]
    da6e:	e7cb      	b.n	da08 <request_nb_iot_network_stats+0x228>
			LOG_INF("No neighbors found.");
    da70:	2303      	movs	r3, #3
    da72:	f04f 0100 	mov.w	r1, #0
    da76:	f363 0107 	bfi	r1, r3, #0, #8
    da7a:	f364 118f 	bfi	r1, r4, #6, #10
    da7e:	4824      	ldr	r0, [pc, #144]	; (db10 <request_nb_iot_network_stats+0x330>)
    da80:	f00e fd9d 	bl	1c5be <log_0>
			neighbors[0] = '\0';
    da84:	4b1f      	ldr	r3, [pc, #124]	; (db04 <request_nb_iot_network_stats+0x324>)
    da86:	701e      	strb	r6, [r3, #0]
    da88:	e7d8      	b.n	da3c <request_nb_iot_network_stats+0x25c>
	else if (strstr(buf, "ERROR") != NULL) 
    da8a:	4912      	ldr	r1, [pc, #72]	; (dad4 <request_nb_iot_network_stats+0x2f4>)
    da8c:	a802      	add	r0, sp, #8
    da8e:	f00f fa7c 	bl	1cf8a <strstr>
    da92:	2800      	cmp	r0, #0
    da94:	d0d2      	beq.n	da3c <request_nb_iot_network_stats+0x25c>
		LOG_ERR("Error while getting neighbor data!");
    da96:	f04f 0100 	mov.w	r1, #0
    da9a:	2301      	movs	r3, #1
    da9c:	f363 0107 	bfi	r1, r3, #0, #8
    daa0:	f364 118f 	bfi	r1, r4, #6, #10
    daa4:	481b      	ldr	r0, [pc, #108]	; (db14 <request_nb_iot_network_stats+0x334>)
    daa6:	e6c7      	b.n	d838 <request_nb_iot_network_stats+0x58>
    daa8:	0001ee3c 	.word	0x0001ee3c
    daac:	0001edc4 	.word	0x0001edc4
    dab0:	0001f8f3 	.word	0x0001f8f3
    dab4:	0001f916 	.word	0x0001f916
    dab8:	0001f920 	.word	0x0001f920
    dabc:	0001fb25 	.word	0x0001fb25
    dac0:	0001f931 	.word	0x0001f931
    dac4:	20026380 	.word	0x20026380
    dac8:	0001f935 	.word	0x0001f935
    dacc:	0001f975 	.word	0x0001f975
    dad0:	0001f97d 	.word	0x0001f97d
    dad4:	0001f94a 	.word	0x0001f94a
    dad8:	0001f950 	.word	0x0001f950
    dadc:	0001f98d 	.word	0x0001f98d
    dae0:	0001f794 	.word	0x0001f794
    dae4:	2002638a 	.word	0x2002638a
    dae8:	0001f99f 	.word	0x0001f99f
    daec:	0001f9d3 	.word	0x0001f9d3
    daf0:	0001f9df 	.word	0x0001f9df
    daf4:	0001f9b1 	.word	0x0001f9b1
    daf8:	0001f9f3 	.word	0x0001f9f3
    dafc:	0001f9d6 	.word	0x0001f9d6
    db00:	0001fa09 	.word	0x0001fa09
    db04:	2002638b 	.word	0x2002638b
    db08:	0001fa15 	.word	0x0001fa15
    db0c:	0001fa5b 	.word	0x0001fa5b
    db10:	0001fa24 	.word	0x0001fa24
    db14:	0001fa38 	.word	0x0001fa38

0000db18 <slm_at_tcpip_init>:


/**@brief API to initialize TCP/IP AT commands handler
 */
int slm_at_tcpip_init(at_cmd_handler_t callback)
{
    db18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db1c:	4a65      	ldr	r2, [pc, #404]	; (dcb4 <slm_at_tcpip_init+0x19c>)
    db1e:	4c66      	ldr	r4, [pc, #408]	; (dcb8 <slm_at_tcpip_init+0x1a0>)
    db20:	b0a7      	sub	sp, #156	; 0x9c
    db22:	1aa4      	subs	r4, r4, r2
    db24:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (callback == NULL) {
    db28:	b970      	cbnz	r0, db48 <slm_at_tcpip_init+0x30>
		LOG_ERR("No callback");
    db2a:	2301      	movs	r3, #1
    db2c:	f04f 0100 	mov.w	r1, #0
    db30:	f363 0107 	bfi	r1, r3, #0, #8
    db34:	4861      	ldr	r0, [pc, #388]	; (dcbc <slm_at_tcpip_init+0x1a4>)
    db36:	f364 118f 	bfi	r1, r4, #6, #10
    db3a:	f00e fd40 	bl	1c5be <log_0>
		return -EINVAL;
    db3e:	f06f 0015 	mvn.w	r0, #21
	init_nb_iot_parameters();
	do_socket_open(2);
	////////////////////////////////////////////////////////////////////

	return 0;
}
    db42:	b027      	add	sp, #156	; 0x9c
    db44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	client.sock = INVALID_SOCKET;
    db48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	client.ip_proto = IPPROTO_IP;
    db4c:	2600      	movs	r6, #0
	client.sock = INVALID_SOCKET;
    db4e:	4a5c      	ldr	r2, [pc, #368]	; (dcc0 <slm_at_tcpip_init+0x1a8>)
    db50:	6011      	str	r1, [r2, #0]
	client.callback = callback;
    db52:	6090      	str	r0, [r2, #8]
	client.ip_proto = IPPROTO_IP;
    db54:	8096      	strh	r6, [r2, #4]
	LOG_INF("Initializing NB-IoT Parameters");
    db56:	f04f 0100 	mov.w	r1, #0
    db5a:	2203      	movs	r2, #3
    db5c:	f362 0107 	bfi	r1, r2, #0, #8
    db60:	f364 118f 	bfi	r1, r4, #6, #10
    db64:	4857      	ldr	r0, [pc, #348]	; (dcc4 <slm_at_tcpip_init+0x1ac>)
    db66:	f00e fd2a 	bl	1c5be <log_0>
	at_sock = socket(AF_LTE, 0, NPROTO_AT);
    db6a:	f240 2201 	movw	r2, #513	; 0x201
    db6e:	4631      	mov	r1, r6
    db70:	2066      	movs	r0, #102	; 0x66
    db72:	f7fe fff1 	bl	cb58 <socket>
	if (at_sock < 0) {
    db76:	1e05      	subs	r5, r0, #0
    db78:	db26      	blt.n	dbc8 <slm_at_tcpip_init+0xb0>
    db7a:	4f53      	ldr	r7, [pc, #332]	; (dcc8 <slm_at_tcpip_init+0x1b0>)
		if (memcmp(buf, "OK", 2) != 0) {
    db7c:	f8df a168 	ldr.w	sl, [pc, #360]	; dce8 <slm_at_tcpip_init+0x1d0>
		LOG_INF("%s",nb_init_at_commands[i]);
    db80:	f02b 023f 	bic.w	r2, fp, #63	; 0x3f
    db84:	f042 0203 	orr.w	r2, r2, #3
    db88:	f362 0b07 	bfi	fp, r2, #0, #8
    db8c:	f364 1b8f 	bfi	fp, r4, #6, #10
    db90:	465a      	mov	r2, fp
    db92:	4639      	mov	r1, r7
    db94:	484d      	ldr	r0, [pc, #308]	; (dccc <slm_at_tcpip_init+0x1b4>)
    db96:	f00e fd1f 	bl	1c5d8 <log_1>
		bytes_sent = send(at_sock, nb_init_at_commands[i],
    db9a:	4638      	mov	r0, r7
    db9c:	f00f fa4a 	bl	1d034 <strlen>
    dba0:	4639      	mov	r1, r7
    dba2:	4602      	mov	r2, r0
    dba4:	4628      	mov	r0, r5
    dba6:	f7ff f8f1 	bl	cd8c <send.constprop.10>
		if (bytes_sent < 0) {
    dbaa:	2800      	cmp	r0, #0
    dbac:	da11      	bge.n	dbd2 <slm_at_tcpip_init+0xba>
			LOG_INF("NO BYTES SENT");
    dbae:	f04f 0100 	mov.w	r1, #0
    dbb2:	2303      	movs	r3, #3
    dbb4:	4846      	ldr	r0, [pc, #280]	; (dcd0 <slm_at_tcpip_init+0x1b8>)
    dbb6:	f363 0107 	bfi	r1, r3, #0, #8
    dbba:	f364 118f 	bfi	r1, r4, #6, #10
			LOG_INF("NOK");
    dbbe:	f00e fcfe 	bl	1c5be <log_0>
			close(at_sock);
    dbc2:	4628      	mov	r0, r5
    dbc4:	f7fe ffce 	bl	cb64 <close>
	do_socket_open(2);
    dbc8:	2002      	movs	r0, #2
    dbca:	f7ff f80f 	bl	cbec <do_socket_open>
	return 0;
    dbce:	2000      	movs	r0, #0
    dbd0:	e7b7      	b.n	db42 <slm_at_tcpip_init+0x2a>
			bytes_received = recv(at_sock, buf, 2, 0);
    dbd2:	2202      	movs	r2, #2
    dbd4:	4669      	mov	r1, sp
    dbd6:	4628      	mov	r0, r5
    dbd8:	f7ff f956 	bl	ce88 <recv.constprop.12>
		} while (bytes_received == 0);
    dbdc:	2800      	cmp	r0, #0
    dbde:	d0f8      	beq.n	dbd2 <slm_at_tcpip_init+0xba>
		if (memcmp(buf, "OK", 2) != 0) {
    dbe0:	2202      	movs	r2, #2
    dbe2:	4651      	mov	r1, sl
    dbe4:	4668      	mov	r0, sp
    dbe6:	f00f fa50 	bl	1d08a <memcmp>
    dbea:	b140      	cbz	r0, dbfe <slm_at_tcpip_init+0xe6>
			LOG_INF("NOK");
    dbec:	f04f 0100 	mov.w	r1, #0
    dbf0:	2303      	movs	r3, #3
    dbf2:	f363 0107 	bfi	r1, r3, #0, #8
    dbf6:	f364 118f 	bfi	r1, r4, #6, #10
    dbfa:	4836      	ldr	r0, [pc, #216]	; (dcd4 <slm_at_tcpip_init+0x1bc>)
    dbfc:	e7df      	b.n	dbbe <slm_at_tcpip_init+0xa6>
			LOG_INF("OK");
    dbfe:	f029 023f 	bic.w	r2, r9, #63	; 0x3f
    dc02:	f042 0203 	orr.w	r2, r2, #3
    dc06:	f362 0907 	bfi	r9, r2, #0, #8
    dc0a:	f364 198f 	bfi	r9, r4, #6, #10
    dc0e:	4649      	mov	r1, r9
    dc10:	4650      	mov	r0, sl
    dc12:	f00e fcd4 	bl	1c5be <log_0>
	for (int i = 0; i < ARRAY_SIZE(nb_init_at_commands); i++) {
    dc16:	3601      	adds	r6, #1
		k_sleep(K_SECONDS(3));
    dc18:	f640 30b8 	movw	r0, #3000	; 0xbb8
    dc1c:	f00e f937 	bl	1be8e <k_sleep>
	for (int i = 0; i < ARRAY_SIZE(nb_init_at_commands); i++) {
    dc20:	2e04      	cmp	r6, #4
    dc22:	f107 0722 	add.w	r7, r7, #34	; 0x22
    dc26:	d1ab      	bne.n	db80 <slm_at_tcpip_init+0x68>
		bytes_sent = send(at_sock, AT_NBRGRSRP, strlen(AT_NBRGRSRP), 0);
    dc28:	4e2b      	ldr	r6, [pc, #172]	; (dcd8 <slm_at_tcpip_init+0x1c0>)
		LOG_INF("NBRGRSRP RESPONSE: %s", buf);
    dc2a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; dcec <slm_at_tcpip_init+0x1d4>
		if(strstr(buf, "NBRGRSRP:") != NULL)
    dc2e:	4f2b      	ldr	r7, [pc, #172]	; (dcdc <slm_at_tcpip_init+0x1c4>)
		bytes_sent = send(at_sock, AT_NBRGRSRP, strlen(AT_NBRGRSRP), 0);
    dc30:	4630      	mov	r0, r6
    dc32:	f00f f9ff 	bl	1d034 <strlen>
    dc36:	4631      	mov	r1, r6
    dc38:	4602      	mov	r2, r0
    dc3a:	4628      	mov	r0, r5
    dc3c:	f7ff f8a6 	bl	cd8c <send.constprop.10>
		if (bytes_sent < 0) {
    dc40:	2800      	cmp	r0, #0
    dc42:	da08      	bge.n	dc56 <slm_at_tcpip_init+0x13e>
			LOG_INF("NBRGRSRP send error");
    dc44:	f04f 0100 	mov.w	r1, #0
    dc48:	2303      	movs	r3, #3
    dc4a:	f363 0107 	bfi	r1, r3, #0, #8
    dc4e:	f364 118f 	bfi	r1, r4, #6, #10
    dc52:	4823      	ldr	r0, [pc, #140]	; (dce0 <slm_at_tcpip_init+0x1c8>)
    dc54:	e7b3      	b.n	dbbe <slm_at_tcpip_init+0xa6>
			bytes_received = recv(at_sock, buf, 150, 0);
    dc56:	2296      	movs	r2, #150	; 0x96
    dc58:	4669      	mov	r1, sp
    dc5a:	4628      	mov	r0, r5
    dc5c:	f7ff f914 	bl	ce88 <recv.constprop.12>
		} while (bytes_received == 0);
    dc60:	2800      	cmp	r0, #0
    dc62:	d0f8      	beq.n	dc56 <slm_at_tcpip_init+0x13e>
		LOG_INF("NBRGRSRP RESPONSE: %s", buf);
    dc64:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    dc68:	f043 0303 	orr.w	r3, r3, #3
    dc6c:	f363 0807 	bfi	r8, r3, #0, #8
    dc70:	f364 188f 	bfi	r8, r4, #6, #10
    dc74:	4642      	mov	r2, r8
    dc76:	4669      	mov	r1, sp
    dc78:	4648      	mov	r0, r9
    dc7a:	f00e fcad 	bl	1c5d8 <log_1>
		if(strstr(buf, "NBRGRSRP:") != NULL)
    dc7e:	4639      	mov	r1, r7
    dc80:	4668      	mov	r0, sp
    dc82:	f00f f982 	bl	1cf8a <strstr>
    dc86:	4682      	mov	sl, r0
		k_sleep(K_SECONDS(5));
    dc88:	f241 3088 	movw	r0, #5000	; 0x1388
    dc8c:	f00e f8ff 	bl	1be8e <k_sleep>
	while(neighbors_found == 0)
    dc90:	f1ba 0f00 	cmp.w	sl, #0
    dc94:	d0cc      	beq.n	dc30 <slm_at_tcpip_init+0x118>
	close(at_sock);
    dc96:	4628      	mov	r0, r5
    dc98:	f7fe ff64 	bl	cb64 <close>
	LOG_INF("NB-IoT Parameters Initialized");
    dc9c:	2303      	movs	r3, #3
    dc9e:	f04f 0100 	mov.w	r1, #0
    dca2:	f363 0107 	bfi	r1, r3, #0, #8
    dca6:	f364 118f 	bfi	r1, r4, #6, #10
    dcaa:	480e      	ldr	r0, [pc, #56]	; (dce4 <slm_at_tcpip_init+0x1cc>)
    dcac:	f00e fc87 	bl	1c5be <log_0>
	return 0;
    dcb0:	e78a      	b.n	dbc8 <slm_at_tcpip_init+0xb0>
    dcb2:	bf00      	nop
    dcb4:	0001edc4 	.word	0x0001edc4
    dcb8:	0001ee3c 	.word	0x0001ee3c
    dcbc:	0001faeb 	.word	0x0001faeb
    dcc0:	20020108 	.word	0x20020108
    dcc4:	0001faf7 	.word	0x0001faf7
    dcc8:	0001f834 	.word	0x0001f834
    dccc:	0001fa06 	.word	0x0001fa06
    dcd0:	0001fb16 	.word	0x0001fb16
    dcd4:	0001fb24 	.word	0x0001fb24
    dcd8:	0001f9d3 	.word	0x0001f9d3
    dcdc:	0001fb28 	.word	0x0001fb28
    dce0:	0001f9df 	.word	0x0001f9df
    dce4:	0001fb32 	.word	0x0001fb32
    dce8:	0001fb25 	.word	0x0001fb25
    dcec:	0001f9f3 	.word	0x0001f9f3

0000dcf0 <send_message>:
	return do_socket_close(0);
}

////////////////////////////////////////////////////////////////////////
void send_message(void)
{
    dcf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    dcf2:	4b3b      	ldr	r3, [pc, #236]	; (dde0 <send_message+0xf0>)
    dcf4:	4c3b      	ldr	r4, [pc, #236]	; (dde4 <send_message+0xf4>)
    dcf6:	b0e5      	sub	sp, #404	; 0x194
    dcf8:	1ae4      	subs	r4, r4, r3
	// If GPS has fix, request network stats: Current and neighbor's Cell ID + RSRP.
	if(gps_client_inst.has_fix == 1)
    dcfa:	4b3b      	ldr	r3, [pc, #236]	; (dde8 <send_message+0xf8>)
    dcfc:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    dd00:	79db      	ldrb	r3, [r3, #7]
	{
		LOG_INF("GPS fix found!");
    dd02:	f04f 0100 	mov.w	r1, #0
	if(gps_client_inst.has_fix == 1)
    dd06:	2b00      	cmp	r3, #0
    dd08:	d062      	beq.n	ddd0 <send_message+0xe0>
		LOG_INF("GPS fix found!");
    dd0a:	2303      	movs	r3, #3
    dd0c:	f363 0107 	bfi	r1, r3, #0, #8
    dd10:	f364 118f 	bfi	r1, r4, #6, #10
    dd14:	4835      	ldr	r0, [pc, #212]	; (ddec <send_message+0xfc>)
    dd16:	f00e fc52 	bl	1c5be <log_0>

		int error = request_nb_iot_network_stats();
    dd1a:	f7ff fd61 	bl	d7e0 <request_nb_iot_network_stats>
		if(error == 0)
    dd1e:	4601      	mov	r1, r0
    dd20:	2800      	cmp	r0, #0
    dd22:	d14a      	bne.n	ddba <send_message+0xca>
		{
			// Put all data in a buffer
			char payloadstring[300] = "";
    dd24:	f44f 7294 	mov.w	r2, #296	; 0x128
    dd28:	9019      	str	r0, [sp, #100]	; 0x64
    dd2a:	a81a      	add	r0, sp, #104	; 0x68
    dd2c:	f00f f9e7 	bl	1d0fe <memset>

			strcat(payloadstring, current_cell_id);
    dd30:	492f      	ldr	r1, [pc, #188]	; (ddf0 <send_message+0x100>)
    dd32:	a819      	add	r0, sp, #100	; 0x64
    dd34:	f00f f9a0 	bl	1d078 <strcat>
			strcat(payloadstring, ";");
    dd38:	492e      	ldr	r1, [pc, #184]	; (ddf4 <send_message+0x104>)
    dd3a:	a819      	add	r0, sp, #100	; 0x64
    dd3c:	f00f f99c 	bl	1d078 <strcat>

			char* rsrp = (char*) &current_rsrp;
			strcat(payloadstring, rsrp);
    dd40:	492d      	ldr	r1, [pc, #180]	; (ddf8 <send_message+0x108>)
    dd42:	a819      	add	r0, sp, #100	; 0x64
    dd44:	f00f f998 	bl	1d078 <strcat>
			strcat(payloadstring, ";");
    dd48:	492a      	ldr	r1, [pc, #168]	; (ddf4 <send_message+0x104>)
    dd4a:	a819      	add	r0, sp, #100	; 0x64
    dd4c:	f00f f994 	bl	1d078 <strcat>

			if(neighbors[0] != '\0')
    dd50:	492a      	ldr	r1, [pc, #168]	; (ddfc <send_message+0x10c>)
    dd52:	780b      	ldrb	r3, [r1, #0]
    dd54:	b113      	cbz	r3, dd5c <send_message+0x6c>
			{
				strcat(payloadstring, neighbors);
    dd56:	a819      	add	r0, sp, #100	; 0x64
    dd58:	f00f f98e 	bl	1d078 <strcat>
			}
			strcat(payloadstring, ";");
    dd5c:	4925      	ldr	r1, [pc, #148]	; (ddf4 <send_message+0x104>)
    dd5e:	a819      	add	r0, sp, #100	; 0x64
    dd60:	f00f f98a 	bl	1d078 <strcat>

			char nmea_sentence[100];
			char *pos1 = strstr(gps_data.nmea, "$GPGGA,") + 7;
    dd64:	4926      	ldr	r1, [pc, #152]	; (de00 <send_message+0x110>)
    dd66:	4827      	ldr	r0, [pc, #156]	; (de04 <send_message+0x114>)
    dd68:	f00f f90f 	bl	1cf8a <strstr>
    dd6c:	1dc5      	adds	r5, r0, #7
			char *pos2 = strstr(pos1, "\n");
    dd6e:	4926      	ldr	r1, [pc, #152]	; (de08 <send_message+0x118>)
    dd70:	4628      	mov	r0, r5
    dd72:	f00f f90a 	bl	1cf8a <strstr>
    dd76:	4607      	mov	r7, r0
			memcpy(nmea_sentence, pos1, strlen(pos1)-strlen(pos2));
    dd78:	4628      	mov	r0, r5
    dd7a:	f00f f95b 	bl	1d034 <strlen>
    dd7e:	4606      	mov	r6, r0
    dd80:	4638      	mov	r0, r7
    dd82:	f00f f957 	bl	1d034 <strlen>
    dd86:	4629      	mov	r1, r5
    dd88:	1a32      	subs	r2, r6, r0
    dd8a:	4668      	mov	r0, sp
    dd8c:	f00f f98d 	bl	1d0aa <memcpy>
			strcat(payloadstring, nmea_sentence);
    dd90:	4669      	mov	r1, sp
    dd92:	a819      	add	r0, sp, #100	; 0x64
    dd94:	f00f f970 	bl	1d078 <strcat>
			strcat(payloadstring, ";");
    dd98:	4916      	ldr	r1, [pc, #88]	; (ddf4 <send_message+0x104>)
    dd9a:	a819      	add	r0, sp, #100	; 0x64
    dd9c:	f00f f96c 	bl	1d078 <strcat>

			// Send message to UDP server
			//do_udp_sendto("nbiot.idlab.uantwerpen.be", 1270, payloadstring);
			LOG_INF("MESSAGE SENT: \"%s\"", payloadstring);
    dda0:	f04f 0200 	mov.w	r2, #0
    dda4:	2303      	movs	r3, #3
    dda6:	f363 0207 	bfi	r2, r3, #0, #8
    ddaa:	f364 128f 	bfi	r2, r4, #6, #10
    ddae:	a919      	add	r1, sp, #100	; 0x64
    ddb0:	4816      	ldr	r0, [pc, #88]	; (de0c <send_message+0x11c>)
    ddb2:	f00e fc11 	bl	1c5d8 <log_1>
			
	} else 
	{
		LOG_INF("Waiting for GPS fix ...");
	}
}
    ddb6:	b065      	add	sp, #404	; 0x194
    ddb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_ERR("Unexpected ERROR, try rebooting the device.");
    ddba:	f04f 0100 	mov.w	r1, #0
    ddbe:	2301      	movs	r3, #1
    ddc0:	4813      	ldr	r0, [pc, #76]	; (de10 <send_message+0x120>)
    ddc2:	f363 0107 	bfi	r1, r3, #0, #8
    ddc6:	f364 118f 	bfi	r1, r4, #6, #10
		LOG_INF("Waiting for GPS fix ...");
    ddca:	f00e fbf8 	bl	1c5be <log_0>
}
    ddce:	e7f2      	b.n	ddb6 <send_message+0xc6>
		LOG_INF("Waiting for GPS fix ...");
    ddd0:	2303      	movs	r3, #3
    ddd2:	f363 0107 	bfi	r1, r3, #0, #8
    ddd6:	f364 118f 	bfi	r1, r4, #6, #10
    ddda:	480e      	ldr	r0, [pc, #56]	; (de14 <send_message+0x124>)
    dddc:	e7f5      	b.n	ddca <send_message+0xda>
    ddde:	bf00      	nop
    dde0:	0001edc4 	.word	0x0001edc4
    dde4:	0001ee3c 	.word	0x0001ee3c
    dde8:	20020114 	.word	0x20020114
    ddec:	0001fa7b 	.word	0x0001fa7b
    ddf0:	20026380 	.word	0x20026380
    ddf4:	0001fa8a 	.word	0x0001fa8a
    ddf8:	2002638a 	.word	0x2002638a
    ddfc:	2002638b 	.word	0x2002638b
    de00:	0001fa8c 	.word	0x0001fa8c
    de04:	20020008 	.word	0x20020008
    de08:	0001f794 	.word	0x0001f794
    de0c:	0001fa94 	.word	0x0001fa94
    de10:	0001faa7 	.word	0x0001faa7
    de14:	0001fad3 	.word	0x0001fad3

0000de18 <close>:
	return socket_ops->close(sock);
    de18:	4b01      	ldr	r3, [pc, #4]	; (de20 <close+0x8>)
    de1a:	681b      	ldr	r3, [r3, #0]
    de1c:	685b      	ldr	r3, [r3, #4]
    de1e:	4718      	bx	r3
    de20:	2002031c 	.word	0x2002031c

0000de24 <do_gps_stop>:

	return -errno;
}

static int do_gps_stop(void)
{
    de24:	b530      	push	{r4, r5, lr}
	int ret = 0;
	nrf_gnss_delete_mask_t	delete_mask  = 0;
    de26:	2400      	movs	r4, #0

	if (gps_client_inst.sock != INVALID_SOCKET) {
    de28:	4d1a      	ldr	r5, [pc, #104]	; (de94 <do_gps_stop+0x70>)
{
    de2a:	b085      	sub	sp, #20
	if (gps_client_inst.sock != INVALID_SOCKET) {
    de2c:	6828      	ldr	r0, [r5, #0]
	nrf_gnss_delete_mask_t	delete_mask  = 0;
    de2e:	9403      	str	r4, [sp, #12]
	if (gps_client_inst.sock != INVALID_SOCKET) {
    de30:	1c43      	adds	r3, r0, #1
    de32:	d020      	beq.n	de76 <do_gps_stop+0x52>
		ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS,
    de34:	2304      	movs	r3, #4
    de36:	2208      	movs	r2, #8
    de38:	9300      	str	r3, [sp, #0]
    de3a:	f44f 7101 	mov.w	r1, #516	; 0x204
    de3e:	ab03      	add	r3, sp, #12
    de40:	f008 ffa8 	bl	16d94 <nrf_setsockopt>
			NRF_SO_GNSS_STOP, &delete_mask, sizeof(delete_mask));
		if (ret != 0) {
    de44:	4604      	mov	r4, r0
    de46:	b1c8      	cbz	r0, de7c <do_gps_stop+0x58>
			LOG_ERR("Failed to stop GPS (err: %d)", -errno);
    de48:	2301      	movs	r3, #1
    de4a:	f04f 0400 	mov.w	r4, #0
    de4e:	4a12      	ldr	r2, [pc, #72]	; (de98 <do_gps_stop+0x74>)
    de50:	f363 0407 	bfi	r4, r3, #0, #8
    de54:	4b11      	ldr	r3, [pc, #68]	; (de9c <do_gps_stop+0x78>)
    de56:	1a9b      	subs	r3, r3, r2
    de58:	08db      	lsrs	r3, r3, #3
    de5a:	f363 148f 	bfi	r4, r3, #6, #10
    de5e:	f00e f81b 	bl	1be98 <z_errno>
    de62:	6801      	ldr	r1, [r0, #0]
    de64:	4622      	mov	r2, r4
    de66:	4249      	negs	r1, r1
    de68:	480d      	ldr	r0, [pc, #52]	; (dea0 <do_gps_stop+0x7c>)
    de6a:	f00e fbb5 	bl	1c5d8 <log_1>
			ret = -errno;
    de6e:	f00e f813 	bl	1be98 <z_errno>
    de72:	6804      	ldr	r4, [r0, #0]
    de74:	4264      	negs	r4, r4
		}

	}

	return ret;
}
    de76:	4620      	mov	r0, r4
    de78:	b005      	add	sp, #20
    de7a:	bd30      	pop	{r4, r5, pc}
			k_thread_suspend(gps_thread_id);
    de7c:	4b09      	ldr	r3, [pc, #36]	; (dea4 <do_gps_stop+0x80>)
    de7e:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
    de80:	f00d fd6a 	bl	1b958 <z_impl_k_thread_suspend>
			nrf_close(gps_client_inst.sock);
    de84:	6828      	ldr	r0, [r5, #0]
    de86:	f008 fec1 	bl	16c0c <nrf_close>
			gps_client_inst.running = false;
    de8a:	71ac      	strb	r4, [r5, #6]
			gps_client_inst.callback("#XGPSRUN: 0\r\n");
    de8c:	68ab      	ldr	r3, [r5, #8]
    de8e:	4806      	ldr	r0, [pc, #24]	; (dea8 <do_gps_stop+0x84>)
    de90:	4798      	blx	r3
			LOG_DBG("GPS stopped");
    de92:	e7f0      	b.n	de76 <do_gps_stop+0x52>
    de94:	20020114 	.word	0x20020114
    de98:	0001edc4 	.word	0x0001edc4
    de9c:	0001edfc 	.word	0x0001edfc
    dea0:	0001fc94 	.word	0x0001fc94
    dea4:	200201d0 	.word	0x200201d0
    dea8:	0001fcb1 	.word	0x0001fcb1

0000deac <do_gps_start>:
	nrf_gnss_fix_retry_t    fix_retry    = 0; /* unlimited retry period */
    deac:	2300      	movs	r3, #0
{
    deae:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_gnss_fix_interval_t fix_interval = 1; /* 1s delay between fixes */
    deb0:	2701      	movs	r7, #1
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)gps_client_inst.mask;
    deb2:	4d70      	ldr	r5, [pc, #448]	; (e074 <do_gps_start+0x1c8>)
{
    deb4:	b08b      	sub	sp, #44	; 0x2c
	nrf_gnss_fix_retry_t    fix_retry    = 0; /* unlimited retry period */
    deb6:	f8ad 301e 	strh.w	r3, [sp, #30]
	nrf_gnss_delete_mask_t  delete_mask  = 0;
    deba:	9309      	str	r3, [sp, #36]	; 0x24
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)gps_client_inst.mask;
    debc:	88ab      	ldrh	r3, [r5, #4]
	gps_client_inst.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    debe:	f44f 7201 	mov.w	r2, #516	; 0x204
    dec2:	2102      	movs	r1, #2
    dec4:	4638      	mov	r0, r7
	nrf_gnss_fix_interval_t fix_interval = 1; /* 1s delay between fixes */
    dec6:	f8ad 7020 	strh.w	r7, [sp, #32]
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)gps_client_inst.mask;
    deca:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	gps_client_inst.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    dece:	f008 fe8b 	bl	16be8 <nrf_socket>
	if (gps_client_inst.sock < 0) {
    ded2:	2800      	cmp	r0, #0
	gps_client_inst.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    ded4:	6028      	str	r0, [r5, #0]
	if (gps_client_inst.sock < 0) {
    ded6:	da31      	bge.n	df3c <do_gps_start+0x90>
		LOG_ERR("Could not init socket (err: %d)", -errno);
    ded8:	f04f 0400 	mov.w	r4, #0
    dedc:	4a66      	ldr	r2, [pc, #408]	; (e078 <do_gps_start+0x1cc>)
    dede:	4b67      	ldr	r3, [pc, #412]	; (e07c <do_gps_start+0x1d0>)
    dee0:	f367 0407 	bfi	r4, r7, #0, #8
    dee4:	1a9b      	subs	r3, r3, r2
    dee6:	08db      	lsrs	r3, r3, #3
    dee8:	f363 148f 	bfi	r4, r3, #6, #10
    deec:	f00d ffd4 	bl	1be98 <z_errno>
    def0:	6801      	ldr	r1, [r0, #0]
    def2:	4622      	mov	r2, r4
    def4:	4249      	negs	r1, r1
    def6:	4862      	ldr	r0, [pc, #392]	; (e080 <do_gps_start+0x1d4>)
    def8:	f00e fb6e 	bl	1c5d8 <log_1>
	int ret = -EINVAL;
    defc:	f06f 0415 	mvn.w	r4, #21
	LOG_ERR("GPS start failed: %d", ret);
    df00:	2301      	movs	r3, #1
    df02:	f04f 0200 	mov.w	r2, #0
    df06:	495c      	ldr	r1, [pc, #368]	; (e078 <do_gps_start+0x1cc>)
    df08:	f363 0207 	bfi	r2, r3, #0, #8
    df0c:	4b5b      	ldr	r3, [pc, #364]	; (e07c <do_gps_start+0x1d0>)
    df0e:	485d      	ldr	r0, [pc, #372]	; (e084 <do_gps_start+0x1d8>)
    df10:	1a5b      	subs	r3, r3, r1
    df12:	08db      	lsrs	r3, r3, #3
    df14:	f363 128f 	bfi	r2, r3, #6, #10
    df18:	4621      	mov	r1, r4
    df1a:	f00e fb5d 	bl	1c5d8 <log_1>
	sprintf(buf, "#XGPSRUN: %d\r\n", ret);
    df1e:	4622      	mov	r2, r4
    df20:	4959      	ldr	r1, [pc, #356]	; (e088 <do_gps_start+0x1dc>)
    df22:	485a      	ldr	r0, [pc, #360]	; (e08c <do_gps_start+0x1e0>)
    df24:	f002 fd3e 	bl	109a4 <sprintf>
	gps_client_inst.callback(buf);
    df28:	68ab      	ldr	r3, [r5, #8]
    df2a:	4858      	ldr	r0, [pc, #352]	; (e08c <do_gps_start+0x1e0>)
    df2c:	4798      	blx	r3
	gps_client_inst.running = false;
    df2e:	2300      	movs	r3, #0
    df30:	71ab      	strb	r3, [r5, #6]
	return -errno;
    df32:	f00d ffb1 	bl	1be98 <z_errno>
    df36:	6804      	ldr	r4, [r0, #0]
    df38:	4264      	negs	r4, r4
    df3a:	e088      	b.n	e04e <do_gps_start+0x1a2>
	ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS, NRF_SO_GNSS_FIX_RETRY,
    df3c:	2602      	movs	r6, #2
    df3e:	f10d 031e 	add.w	r3, sp, #30
    df42:	9600      	str	r6, [sp, #0]
    df44:	4632      	mov	r2, r6
    df46:	f44f 7101 	mov.w	r1, #516	; 0x204
    df4a:	f008 ff23 	bl	16d94 <nrf_setsockopt>
	if (ret != 0) {
    df4e:	4604      	mov	r4, r0
    df50:	b198      	cbz	r0, df7a <do_gps_start+0xce>
		LOG_ERR("Failed to set fix retry value (err: %d)", -errno);
    df52:	2301      	movs	r3, #1
    df54:	f04f 0600 	mov.w	r6, #0
    df58:	4a47      	ldr	r2, [pc, #284]	; (e078 <do_gps_start+0x1cc>)
    df5a:	f363 0607 	bfi	r6, r3, #0, #8
    df5e:	4b47      	ldr	r3, [pc, #284]	; (e07c <do_gps_start+0x1d0>)
    df60:	1a9b      	subs	r3, r3, r2
    df62:	08db      	lsrs	r3, r3, #3
    df64:	f363 168f 	bfi	r6, r3, #6, #10
    df68:	f00d ff96 	bl	1be98 <z_errno>
    df6c:	4632      	mov	r2, r6
    df6e:	6801      	ldr	r1, [r0, #0]
    df70:	4847      	ldr	r0, [pc, #284]	; (e090 <do_gps_start+0x1e4>)
    df72:	4249      	negs	r1, r1
		LOG_ERR("Failed to start GPS (err: %d)", -errno);
    df74:	f00e fb30 	bl	1c5d8 <log_1>
		goto error;
    df78:	e7c2      	b.n	df00 <do_gps_start+0x54>
	ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS,
    df7a:	9600      	str	r6, [sp, #0]
    df7c:	ab08      	add	r3, sp, #32
    df7e:	463a      	mov	r2, r7
    df80:	f44f 7101 	mov.w	r1, #516	; 0x204
    df84:	6828      	ldr	r0, [r5, #0]
    df86:	f008 ff05 	bl	16d94 <nrf_setsockopt>
	if (ret != 0) {
    df8a:	4604      	mov	r4, r0
    df8c:	b188      	cbz	r0, dfb2 <do_gps_start+0x106>
		LOG_ERR("Failed to set fix interval value (err: %d)", -errno);
    df8e:	2301      	movs	r3, #1
    df90:	f04f 0600 	mov.w	r6, #0
    df94:	4a38      	ldr	r2, [pc, #224]	; (e078 <do_gps_start+0x1cc>)
    df96:	f363 0607 	bfi	r6, r3, #0, #8
    df9a:	4b38      	ldr	r3, [pc, #224]	; (e07c <do_gps_start+0x1d0>)
    df9c:	1a9b      	subs	r3, r3, r2
    df9e:	08db      	lsrs	r3, r3, #3
    dfa0:	f363 168f 	bfi	r6, r3, #6, #10
    dfa4:	f00d ff78 	bl	1be98 <z_errno>
    dfa8:	6801      	ldr	r1, [r0, #0]
    dfaa:	4632      	mov	r2, r6
    dfac:	4249      	negs	r1, r1
    dfae:	4839      	ldr	r0, [pc, #228]	; (e094 <do_gps_start+0x1e8>)
    dfb0:	e7e0      	b.n	df74 <do_gps_start+0xc8>
	ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS, NRF_SO_GNSS_NMEA_MASK,
    dfb2:	9600      	str	r6, [sp, #0]
    dfb4:	f10d 0322 	add.w	r3, sp, #34	; 0x22
    dfb8:	2204      	movs	r2, #4
    dfba:	f44f 7101 	mov.w	r1, #516	; 0x204
    dfbe:	6828      	ldr	r0, [r5, #0]
    dfc0:	f008 fee8 	bl	16d94 <nrf_setsockopt>
	if (ret != 0) {
    dfc4:	4604      	mov	r4, r0
    dfc6:	b188      	cbz	r0, dfec <do_gps_start+0x140>
		LOG_ERR("Failed to set nmea mask (err: %d)", -errno);
    dfc8:	2301      	movs	r3, #1
    dfca:	f04f 0600 	mov.w	r6, #0
    dfce:	4a2a      	ldr	r2, [pc, #168]	; (e078 <do_gps_start+0x1cc>)
    dfd0:	f363 0607 	bfi	r6, r3, #0, #8
    dfd4:	4b29      	ldr	r3, [pc, #164]	; (e07c <do_gps_start+0x1d0>)
    dfd6:	1a9b      	subs	r3, r3, r2
    dfd8:	08db      	lsrs	r3, r3, #3
    dfda:	f363 168f 	bfi	r6, r3, #6, #10
    dfde:	f00d ff5b 	bl	1be98 <z_errno>
    dfe2:	6801      	ldr	r1, [r0, #0]
    dfe4:	4632      	mov	r2, r6
    dfe6:	4249      	negs	r1, r1
    dfe8:	482b      	ldr	r0, [pc, #172]	; (e098 <do_gps_start+0x1ec>)
    dfea:	e7c3      	b.n	df74 <do_gps_start+0xc8>
	ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS, NRF_SO_GNSS_START,
    dfec:	2304      	movs	r3, #4
    dfee:	2207      	movs	r2, #7
    dff0:	9300      	str	r3, [sp, #0]
    dff2:	f44f 7101 	mov.w	r1, #516	; 0x204
    dff6:	ab09      	add	r3, sp, #36	; 0x24
    dff8:	6828      	ldr	r0, [r5, #0]
    dffa:	f008 fecb 	bl	16d94 <nrf_setsockopt>
	if (ret != 0) {
    dffe:	4604      	mov	r4, r0
    e000:	b188      	cbz	r0, e026 <do_gps_start+0x17a>
		LOG_ERR("Failed to start GPS (err: %d)", -errno);
    e002:	2301      	movs	r3, #1
    e004:	f04f 0600 	mov.w	r6, #0
    e008:	4a1b      	ldr	r2, [pc, #108]	; (e078 <do_gps_start+0x1cc>)
    e00a:	f363 0607 	bfi	r6, r3, #0, #8
    e00e:	4b1b      	ldr	r3, [pc, #108]	; (e07c <do_gps_start+0x1d0>)
    e010:	1a9b      	subs	r3, r3, r2
    e012:	08db      	lsrs	r3, r3, #3
    e014:	f363 168f 	bfi	r6, r3, #6, #10
    e018:	f00d ff3e 	bl	1be98 <z_errno>
    e01c:	6801      	ldr	r1, [r0, #0]
    e01e:	4632      	mov	r2, r6
    e020:	4249      	negs	r1, r1
    e022:	481e      	ldr	r0, [pc, #120]	; (e09c <do_gps_start+0x1f0>)
    e024:	e7a6      	b.n	df74 <do_gps_start+0xc8>
	if (gps_thread_id != NULL) {
    e026:	4e1e      	ldr	r6, [pc, #120]	; (e0a0 <do_gps_start+0x1f4>)
    e028:	6830      	ldr	r0, [r6, #0]
    e02a:	b198      	cbz	r0, e054 <do_gps_start+0x1a8>
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_RESUME);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_resume(thread);
    e02c:	f00d fcb4 	bl	1b998 <z_impl_k_thread_resume>
	gps_client_inst.running = true;
    e030:	2301      	movs	r3, #1
	sprintf(buf, "#XGPSRUN: 1,%d\r\n", gps_client_inst.mask);
    e032:	88aa      	ldrh	r2, [r5, #4]
    e034:	491b      	ldr	r1, [pc, #108]	; (e0a4 <do_gps_start+0x1f8>)
    e036:	4815      	ldr	r0, [pc, #84]	; (e08c <do_gps_start+0x1e0>)
	gps_client_inst.running = true;
    e038:	71ab      	strb	r3, [r5, #6]
	sprintf(buf, "#XGPSRUN: 1,%d\r\n", gps_client_inst.mask);
    e03a:	f002 fcb3 	bl	109a4 <sprintf>
	gps_client_inst.callback(buf);
    e03e:	68ab      	ldr	r3, [r5, #8]
    e040:	4812      	ldr	r0, [pc, #72]	; (e08c <do_gps_start+0x1e0>)
    e042:	4798      	blx	r3
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_GET);
		return (s64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_get();
    e044:	f010 fc01 	bl	1e84a <z_impl_k_uptime_get>
	ttft_start = k_uptime_get();
    e048:	4b17      	ldr	r3, [pc, #92]	; (e0a8 <do_gps_start+0x1fc>)
    e04a:	e9c3 0100 	strd	r0, r1, [r3]
}
    e04e:	4620      	mov	r0, r4
    e050:	b00b      	add	sp, #44	; 0x2c
    e052:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    e054:	230e      	movs	r3, #14
    e056:	e9cd 4404 	strd	r4, r4, [sp, #16]
    e05a:	e9cd 4302 	strd	r4, r3, [sp, #8]
    e05e:	e9cd 4400 	strd	r4, r4, [sp]
    e062:	4b12      	ldr	r3, [pc, #72]	; (e0ac <do_gps_start+0x200>)
    e064:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e068:	4911      	ldr	r1, [pc, #68]	; (e0b0 <do_gps_start+0x204>)
    e06a:	4812      	ldr	r0, [pc, #72]	; (e0b4 <do_gps_start+0x208>)
    e06c:	f00d fc20 	bl	1b8b0 <z_impl_k_thread_create>
		gps_thread_id = k_thread_create(&gps_thread, gps_thread_stack,
    e070:	6030      	str	r0, [r6, #0]
    e072:	e7dd      	b.n	e030 <do_gps_start+0x184>
    e074:	20020114 	.word	0x20020114
    e078:	0001edc4 	.word	0x0001edc4
    e07c:	0001edfc 	.word	0x0001edfc
    e080:	0001fbac 	.word	0x0001fbac
    e084:	0001fc70 	.word	0x0001fc70
    e088:	0001fc85 	.word	0x0001fc85
    e08c:	200263ef 	.word	0x200263ef
    e090:	0001fbcc 	.word	0x0001fbcc
    e094:	0001fbf4 	.word	0x0001fbf4
    e098:	0001fc1f 	.word	0x0001fc1f
    e09c:	0001fc41 	.word	0x0001fc41
    e0a0:	200201d0 	.word	0x200201d0
    e0a4:	0001fc5f 	.word	0x0001fc5f
    e0a8:	200200d8 	.word	0x200200d8
    e0ac:	0000e1ad 	.word	0x0000e1ad
    e0b0:	200265a0 	.word	0x200265a0
    e0b4:	20020120 	.word	0x20020120

0000e0b8 <handle_at_gpsrun>:
static int handle_at_gpsrun(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	u16_t op;

	switch (cmd_type) {
    e0b8:	2801      	cmp	r0, #1
{
    e0ba:	b513      	push	{r0, r1, r4, lr}
    e0bc:	4604      	mov	r4, r0
	switch (cmd_type) {
    e0be:	d004      	beq.n	e0ca <handle_at_gpsrun+0x12>
    e0c0:	2802      	cmp	r0, #2
    e0c2:	d04c      	beq.n	e15e <handle_at_gpsrun+0xa6>
	case AT_CMD_TYPE_SET_COMMAND:
		if (at_params_valid_count_get(&m_param_list) < 2) {
			return -EINVAL;
    e0c4:	f06f 0415 	mvn.w	r4, #21
    e0c8:	e02d      	b.n	e126 <handle_at_gpsrun+0x6e>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    e0ca:	482e      	ldr	r0, [pc, #184]	; (e184 <handle_at_gpsrun+0xcc>)
    e0cc:	f010 f901 	bl	1e2d2 <at_params_valid_count_get>
    e0d0:	2801      	cmp	r0, #1
    e0d2:	d9f7      	bls.n	e0c4 <handle_at_gpsrun+0xc>
		}
		err = at_params_short_get(&m_param_list, 1, &op);
    e0d4:	4621      	mov	r1, r4
    e0d6:	f10d 0206 	add.w	r2, sp, #6
    e0da:	482a      	ldr	r0, [pc, #168]	; (e184 <handle_at_gpsrun+0xcc>)
    e0dc:	f010 f8c4 	bl	1e268 <at_params_short_get>
		if (err < 0) {
    e0e0:	1e04      	subs	r4, r0, #0
    e0e2:	db20      	blt.n	e126 <handle_at_gpsrun+0x6e>
			return err;
		}
		if (op == 1) {
    e0e4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    e0e8:	2b01      	cmp	r3, #1
    e0ea:	d123      	bne.n	e134 <handle_at_gpsrun+0x7c>
			if (at_params_valid_count_get(&m_param_list) > 2) {
    e0ec:	4825      	ldr	r0, [pc, #148]	; (e184 <handle_at_gpsrun+0xcc>)
    e0ee:	f010 f8f0 	bl	1e2d2 <at_params_valid_count_get>
    e0f2:	2802      	cmp	r0, #2
    e0f4:	d906      	bls.n	e104 <handle_at_gpsrun+0x4c>
				err = at_params_short_get(&m_param_list, 2,
    e0f6:	4a24      	ldr	r2, [pc, #144]	; (e188 <handle_at_gpsrun+0xd0>)
    e0f8:	2102      	movs	r1, #2
    e0fa:	4822      	ldr	r0, [pc, #136]	; (e184 <handle_at_gpsrun+0xcc>)
    e0fc:	f010 f8b4 	bl	1e268 <at_params_short_get>
							&gps_client_inst.mask);
				if (err < 0) {
    e100:	1e04      	subs	r4, r0, #0
    e102:	db10      	blt.n	e126 <handle_at_gpsrun+0x6e>
					return err;
				}
			}
			if (gps_client_inst.running) {
    e104:	4b21      	ldr	r3, [pc, #132]	; (e18c <handle_at_gpsrun+0xd4>)
    e106:	799b      	ldrb	r3, [r3, #6]
    e108:	b183      	cbz	r3, e12c <handle_at_gpsrun+0x74>
				LOG_WRN("GPS is running");
    e10a:	2302      	movs	r3, #2
    e10c:	f04f 0100 	mov.w	r1, #0
    e110:	4a1f      	ldr	r2, [pc, #124]	; (e190 <handle_at_gpsrun+0xd8>)
    e112:	f363 0107 	bfi	r1, r3, #0, #8
    e116:	4b1f      	ldr	r3, [pc, #124]	; (e194 <handle_at_gpsrun+0xdc>)
    e118:	481f      	ldr	r0, [pc, #124]	; (e198 <handle_at_gpsrun+0xe0>)
    e11a:	1a9b      	subs	r3, r3, r2
    e11c:	08db      	lsrs	r3, r3, #3
    e11e:	f363 118f 	bfi	r1, r3, #6, #10
			} else {
				err = do_gps_start();
			}
		} else if (op == 0) {
			if (!gps_client_inst.running) {
				LOG_WRN("GPS is not running");
    e122:	f00e fa4c 	bl	1c5be <log_0>
	default:
		break;
	}

	return err;
}
    e126:	4620      	mov	r0, r4
    e128:	b002      	add	sp, #8
    e12a:	bd10      	pop	{r4, pc}
				err = do_gps_start();
    e12c:	f7ff febe 	bl	deac <do_gps_start>
				err = do_gps_stop();
    e130:	4604      	mov	r4, r0
    e132:	e7f8      	b.n	e126 <handle_at_gpsrun+0x6e>
		} else if (op == 0) {
    e134:	2b00      	cmp	r3, #0
    e136:	d1f6      	bne.n	e126 <handle_at_gpsrun+0x6e>
			if (!gps_client_inst.running) {
    e138:	4b14      	ldr	r3, [pc, #80]	; (e18c <handle_at_gpsrun+0xd4>)
    e13a:	799b      	ldrb	r3, [r3, #6]
    e13c:	b963      	cbnz	r3, e158 <handle_at_gpsrun+0xa0>
				LOG_WRN("GPS is not running");
    e13e:	2302      	movs	r3, #2
    e140:	f04f 0100 	mov.w	r1, #0
    e144:	4a12      	ldr	r2, [pc, #72]	; (e190 <handle_at_gpsrun+0xd8>)
    e146:	f363 0107 	bfi	r1, r3, #0, #8
    e14a:	4b12      	ldr	r3, [pc, #72]	; (e194 <handle_at_gpsrun+0xdc>)
    e14c:	4813      	ldr	r0, [pc, #76]	; (e19c <handle_at_gpsrun+0xe4>)
    e14e:	1a9b      	subs	r3, r3, r2
    e150:	08db      	lsrs	r3, r3, #3
    e152:	f363 118f 	bfi	r1, r3, #6, #10
    e156:	e7e4      	b.n	e122 <handle_at_gpsrun+0x6a>
				err = do_gps_stop();
    e158:	f7ff fe64 	bl	de24 <do_gps_stop>
    e15c:	e7e8      	b.n	e130 <handle_at_gpsrun+0x78>
		if (gps_client_inst.running) {
    e15e:	4c0b      	ldr	r4, [pc, #44]	; (e18c <handle_at_gpsrun+0xd4>)
    e160:	79a3      	ldrb	r3, [r4, #6]
    e162:	b14b      	cbz	r3, e178 <handle_at_gpsrun+0xc0>
			sprintf(buf, "#XGPSRUN: 1,%d\r\n", gps_client_inst.mask);
    e164:	88a2      	ldrh	r2, [r4, #4]
    e166:	490e      	ldr	r1, [pc, #56]	; (e1a0 <handle_at_gpsrun+0xe8>)
    e168:	480e      	ldr	r0, [pc, #56]	; (e1a4 <handle_at_gpsrun+0xec>)
    e16a:	f002 fc1b 	bl	109a4 <sprintf>
		gps_client_inst.callback(buf);
    e16e:	68a3      	ldr	r3, [r4, #8]
    e170:	480c      	ldr	r0, [pc, #48]	; (e1a4 <handle_at_gpsrun+0xec>)
    e172:	4798      	blx	r3
		err = 0;
    e174:	2400      	movs	r4, #0
		break;
    e176:	e7d6      	b.n	e126 <handle_at_gpsrun+0x6e>
			sprintf(buf, "#XGPSRUN: 0\r\n");
    e178:	490b      	ldr	r1, [pc, #44]	; (e1a8 <handle_at_gpsrun+0xf0>)
    e17a:	480a      	ldr	r0, [pc, #40]	; (e1a4 <handle_at_gpsrun+0xec>)
    e17c:	f002 fc12 	bl	109a4 <sprintf>
    e180:	e7f5      	b.n	e16e <handle_at_gpsrun+0xb6>
    e182:	bf00      	nop
    e184:	200200e8 	.word	0x200200e8
    e188:	20020118 	.word	0x20020118
    e18c:	20020114 	.word	0x20020114
    e190:	0001edc4 	.word	0x0001edc4
    e194:	0001edfc 	.word	0x0001edfc
    e198:	0001fdbb 	.word	0x0001fdbb
    e19c:	0001fdca 	.word	0x0001fdca
    e1a0:	0001fc5f 	.word	0x0001fc5f
    e1a4:	200263ef 	.word	0x200263ef
    e1a8:	0001fcb1 	.word	0x0001fcb1

0000e1ac <gps_thread_fn>:
{
    e1ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		if (nrf_recv(gps_client_inst.sock, &gps_data, sizeof(gps_data), 0)
    e1b0:	4f58      	ldr	r7, [pc, #352]	; (e314 <gps_thread_fn+0x168>)
    e1b2:	4c59      	ldr	r4, [pc, #356]	; (e318 <gps_thread_fn+0x16c>)
    e1b4:	463d      	mov	r5, r7
    e1b6:	2300      	movs	r3, #0
    e1b8:	22d8      	movs	r2, #216	; 0xd8
    e1ba:	4957      	ldr	r1, [pc, #348]	; (e318 <gps_thread_fn+0x16c>)
    e1bc:	6838      	ldr	r0, [r7, #0]
    e1be:	f008 fd85 	bl	16ccc <nrf_recv>
    e1c2:	2800      	cmp	r0, #0
    e1c4:	dc25      	bgt.n	e212 <gps_thread_fn+0x66>
			LOG_ERR("GPS nrf_recv(): %d", -errno);
    e1c6:	2301      	movs	r3, #1
    e1c8:	f04f 0400 	mov.w	r4, #0
    e1cc:	4a53      	ldr	r2, [pc, #332]	; (e31c <gps_thread_fn+0x170>)
    e1ce:	f363 0407 	bfi	r4, r3, #0, #8
    e1d2:	4b53      	ldr	r3, [pc, #332]	; (e320 <gps_thread_fn+0x174>)
    e1d4:	1a9b      	subs	r3, r3, r2
    e1d6:	08db      	lsrs	r3, r3, #3
    e1d8:	f363 148f 	bfi	r4, r3, #6, #10
    e1dc:	f00d fe5c 	bl	1be98 <z_errno>
    e1e0:	6801      	ldr	r1, [r0, #0]
    e1e2:	4622      	mov	r2, r4
    e1e4:	4249      	negs	r1, r1
    e1e6:	484f      	ldr	r0, [pc, #316]	; (e324 <gps_thread_fn+0x178>)
    e1e8:	f00e f9f6 	bl	1c5d8 <log_1>
			sprintf(buf, "#XGPSRUN: %d\r\n", -errno);
    e1ec:	f00d fe54 	bl	1be98 <z_errno>
    e1f0:	6802      	ldr	r2, [r0, #0]
    e1f2:	494d      	ldr	r1, [pc, #308]	; (e328 <gps_thread_fn+0x17c>)
    e1f4:	4252      	negs	r2, r2
    e1f6:	484d      	ldr	r0, [pc, #308]	; (e32c <gps_thread_fn+0x180>)
    e1f8:	f002 fbd4 	bl	109a4 <sprintf>
			gps_client_inst.callback(buf);
    e1fc:	68bb      	ldr	r3, [r7, #8]
    e1fe:	484b      	ldr	r0, [pc, #300]	; (e32c <gps_thread_fn+0x180>)
    e200:	4798      	blx	r3
			nrf_close(gps_client_inst.sock);
    e202:	6838      	ldr	r0, [r7, #0]
    e204:	f008 fd02 	bl	16c0c <nrf_close>
			gps_client_inst.running = false;
    e208:	2300      	movs	r3, #0
    e20a:	71bb      	strb	r3, [r7, #6]
}
    e20c:	b004      	add	sp, #16
    e20e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (gps_data.data_id != NRF_GNSS_PVT_DATA_ID || gps_client_inst.has_fix) {
    e212:	7823      	ldrb	r3, [r4, #0]
    e214:	2b01      	cmp	r3, #1
    e216:	d130      	bne.n	e27a <gps_thread_fn+0xce>
    e218:	79f9      	ldrb	r1, [r7, #7]
    e21a:	2900      	cmp	r1, #0
    e21c:	d13c      	bne.n	e298 <gps_thread_fn+0xec>
	u8_t in_fix = 0;
    e21e:	460b      	mov	r3, r1
	u8_t tracked = 0;
    e220:	460e      	mov	r6, r1
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
    e222:	460a      	mov	r2, r1
    e224:	f8df c0f0 	ldr.w	ip, [pc, #240]	; e318 <gps_thread_fn+0x16c>
		if ((gps_data.pvt.sv[i].sv > 0) &&
    e228:	f8bc 0046 	ldrh.w	r0, [ip, #70]	; 0x46
    e22c:	3801      	subs	r0, #1
    e22e:	281f      	cmp	r0, #31
    e230:	d80d      	bhi.n	e24e <gps_thread_fn+0xa2>
			if (IS_FIX(gps_data.pvt.sv[i].flags)) {
    e232:	f89c 0050 	ldrb.w	r0, [ip, #80]	; 0x50
			tracked++;
    e236:	3601      	adds	r6, #1
			if (IS_FIX(gps_data.pvt.sv[i].flags)) {
    e238:	f010 0f01 	tst.w	r0, #1
				in_fix++;
    e23c:	bf1c      	itt	ne
    e23e:	3301      	addne	r3, #1
    e240:	b2db      	uxtbne	r3, r3
			if (IS_UNHEALTHY(gps_data.pvt.sv[i].flags)) {
    e242:	0700      	lsls	r0, r0, #28
				unhealthy++;
    e244:	bf48      	it	mi
    e246:	3101      	addmi	r1, #1
			tracked++;
    e248:	b2f6      	uxtb	r6, r6
				unhealthy++;
    e24a:	bf48      	it	mi
    e24c:	b2c9      	uxtbmi	r1, r1
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
    e24e:	3201      	adds	r2, #1
    e250:	2a0c      	cmp	r2, #12
    e252:	f10c 0c0c 	add.w	ip, ip, #12
    e256:	d1e7      	bne.n	e228 <gps_thread_fn+0x7c>
	if (last_tracked != tracked) {
    e258:	f8df 80f0 	ldr.w	r8, [pc, #240]	; e34c <gps_thread_fn+0x1a0>
    e25c:	f898 2000 	ldrb.w	r2, [r8]
    e260:	42b2      	cmp	r2, r6
    e262:	d019      	beq.n	e298 <gps_thread_fn+0xec>
		sprintf(buf, "#XGPSS: tracking %d using %d unhealthy %d\r\n",
    e264:	9100      	str	r1, [sp, #0]
    e266:	4632      	mov	r2, r6
    e268:	4931      	ldr	r1, [pc, #196]	; (e330 <gps_thread_fn+0x184>)
    e26a:	4830      	ldr	r0, [pc, #192]	; (e32c <gps_thread_fn+0x180>)
    e26c:	f002 fb9a 	bl	109a4 <sprintf>
		gps_client_inst.callback(buf);
    e270:	68ab      	ldr	r3, [r5, #8]
    e272:	482e      	ldr	r0, [pc, #184]	; (e32c <gps_thread_fn+0x180>)
    e274:	4798      	blx	r3
		last_tracked = tracked;
    e276:	f888 6000 	strb.w	r6, [r8]
		switch (gps_data.data_id) {
    e27a:	7823      	ldrb	r3, [r4, #0]
    e27c:	2b01      	cmp	r3, #1
    e27e:	d00b      	beq.n	e298 <gps_thread_fn+0xec>
    e280:	2b02      	cmp	r3, #2
    e282:	d198      	bne.n	e1b6 <gps_thread_fn+0xa>
			if (gps_client_inst.has_fix) {
    e284:	79eb      	ldrb	r3, [r5, #7]
    e286:	2b00      	cmp	r3, #0
    e288:	d095      	beq.n	e1b6 <gps_thread_fn+0xa>
				gps_client_inst.callback("#XGPSN: ");
    e28a:	68ab      	ldr	r3, [r5, #8]
    e28c:	4829      	ldr	r0, [pc, #164]	; (e334 <gps_thread_fn+0x188>)
    e28e:	4798      	blx	r3
				gps_client_inst.callback(gps_data.nmea);
    e290:	68ab      	ldr	r3, [r5, #8]
    e292:	4829      	ldr	r0, [pc, #164]	; (e338 <gps_thread_fn+0x18c>)
    e294:	4798      	blx	r3
    e296:	e78e      	b.n	e1b6 <gps_thread_fn+0xa>
			if (IS_FIX(gps_data.pvt.flags)) {
    e298:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    e29c:	07db      	lsls	r3, r3, #31
    e29e:	d58a      	bpl.n	e1b6 <gps_thread_fn+0xa>
	sprintf(buf, "#XGPSP: long %f lat %f\r\n",
    e2a0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    e2a4:	e9cd 2300 	strd	r2, r3, [sp]
    e2a8:	4924      	ldr	r1, [pc, #144]	; (e33c <gps_thread_fn+0x190>)
    e2aa:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    e2ae:	481f      	ldr	r0, [pc, #124]	; (e32c <gps_thread_fn+0x180>)
    e2b0:	f002 fb78 	bl	109a4 <sprintf>
	gps_client_inst.callback(buf);
    e2b4:	68ab      	ldr	r3, [r5, #8]
    e2b6:	481d      	ldr	r0, [pc, #116]	; (e32c <gps_thread_fn+0x180>)
    e2b8:	4798      	blx	r3
	sprintf(buf, "#XGPSP: %04u-%02u-%02u %02u:%02u:%02u\r\n",
    e2ba:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    e2be:	4920      	ldr	r1, [pc, #128]	; (e340 <gps_thread_fn+0x194>)
    e2c0:	9303      	str	r3, [sp, #12]
    e2c2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    e2c6:	4819      	ldr	r0, [pc, #100]	; (e32c <gps_thread_fn+0x180>)
    e2c8:	9302      	str	r3, [sp, #8]
    e2ca:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    e2ce:	9301      	str	r3, [sp, #4]
    e2d0:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    e2d4:	9300      	str	r3, [sp, #0]
    e2d6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    e2da:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    e2dc:	f002 fb62 	bl	109a4 <sprintf>
	gps_client_inst.callback(buf);
    e2e0:	68ab      	ldr	r3, [r5, #8]
    e2e2:	4812      	ldr	r0, [pc, #72]	; (e32c <gps_thread_fn+0x180>)
    e2e4:	4798      	blx	r3
				if (!gps_client_inst.has_fix) {
    e2e6:	79eb      	ldrb	r3, [r5, #7]
    e2e8:	2b00      	cmp	r3, #0
    e2ea:	f47f af64 	bne.w	e1b6 <gps_thread_fn+0xa>
	return z_impl_k_uptime_get();
    e2ee:	f010 faac 	bl	1e84a <z_impl_k_uptime_get>
						(int)(now - ttft_start)/1000);
    e2f2:	4b14      	ldr	r3, [pc, #80]	; (e344 <gps_thread_fn+0x198>)
					sprintf(buf, "#XGPSP: TTFF %d sec\r\n",
    e2f4:	4914      	ldr	r1, [pc, #80]	; (e348 <gps_thread_fn+0x19c>)
						(int)(now - ttft_start)/1000);
    e2f6:	681a      	ldr	r2, [r3, #0]
					sprintf(buf, "#XGPSP: TTFF %d sec\r\n",
    e2f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
						(int)(now - ttft_start)/1000);
    e2fc:	1a82      	subs	r2, r0, r2
					sprintf(buf, "#XGPSP: TTFF %d sec\r\n",
    e2fe:	fb92 f2f3 	sdiv	r2, r2, r3
    e302:	480a      	ldr	r0, [pc, #40]	; (e32c <gps_thread_fn+0x180>)
    e304:	f002 fb4e 	bl	109a4 <sprintf>
					gps_client_inst.callback(buf);
    e308:	68ab      	ldr	r3, [r5, #8]
    e30a:	4808      	ldr	r0, [pc, #32]	; (e32c <gps_thread_fn+0x180>)
    e30c:	4798      	blx	r3
					gps_client_inst.has_fix = true;
    e30e:	2301      	movs	r3, #1
    e310:	71eb      	strb	r3, [r5, #7]
    e312:	e750      	b.n	e1b6 <gps_thread_fn+0xa>
    e314:	20020114 	.word	0x20020114
    e318:	20020000 	.word	0x20020000
    e31c:	0001edc4 	.word	0x0001edc4
    e320:	0001edfc 	.word	0x0001edfc
    e324:	0001fd1c 	.word	0x0001fd1c
    e328:	0001fc85 	.word	0x0001fc85
    e32c:	200263ef 	.word	0x200263ef
    e330:	0001fd2f 	.word	0x0001fd2f
    e334:	0001fdb2 	.word	0x0001fdb2
    e338:	20020008 	.word	0x20020008
    e33c:	0001fd5b 	.word	0x0001fd5b
    e340:	0001fd74 	.word	0x0001fd74
    e344:	200200d8 	.word	0x200200d8
    e348:	0001fd9c 	.word	0x0001fd9c
    e34c:	2002642f 	.word	0x2002642f

0000e350 <slm_at_gps_parse>:

/**@brief API to handle GPS AT commands
 */
int slm_at_gps_parse(const char *at_cmd)
{
    e350:	b538      	push	{r3, r4, r5, lr}
    e352:	4604      	mov	r4, r0
	int ret = -ENOTSUP;
	enum at_cmd_type type;

	for (int i = 0; i < AT_GPS_MAX; i++) {
		u8_t cmd_len = strlen(m_gps_at_list[i].string);
    e354:	481a      	ldr	r0, [pc, #104]	; (e3c0 <slm_at_gps_parse+0x70>)
    e356:	f00e fe6d 	bl	1d034 <strlen>
    e35a:	2300      	movs	r3, #0
    e35c:	4918      	ldr	r1, [pc, #96]	; (e3c0 <slm_at_gps_parse+0x70>)
    e35e:	b2c0      	uxtb	r0, r0
    e360:	4283      	cmp	r3, r0
    e362:	db17      	blt.n	e394 <slm_at_gps_parse+0x44>

		if (slm_at_cmd_cmp(at_cmd, m_gps_at_list[i].string, cmd_len)) {
			ret = at_parser_params_from_str(at_cmd, NULL,
    e364:	2100      	movs	r1, #0
    e366:	4a17      	ldr	r2, [pc, #92]	; (e3c4 <slm_at_gps_parse+0x74>)
    e368:	4620      	mov	r0, r4
    e36a:	f00f fe83 	bl	1e074 <at_parser_params_from_str>
						&m_param_list);
			if (ret < 0) {
    e36e:	1e01      	subs	r1, r0, #0
    e370:	da1c      	bge.n	e3ac <slm_at_gps_parse+0x5c>
				LOG_ERR("Failed to parse AT command %d", ret);
    e372:	2301      	movs	r3, #1
    e374:	f04f 0200 	mov.w	r2, #0
    e378:	4813      	ldr	r0, [pc, #76]	; (e3c8 <slm_at_gps_parse+0x78>)
    e37a:	f363 0207 	bfi	r2, r3, #0, #8
    e37e:	4b13      	ldr	r3, [pc, #76]	; (e3cc <slm_at_gps_parse+0x7c>)
    e380:	1a1b      	subs	r3, r3, r0
    e382:	08db      	lsrs	r3, r3, #3
    e384:	4812      	ldr	r0, [pc, #72]	; (e3d0 <slm_at_gps_parse+0x80>)
    e386:	f363 128f 	bfi	r2, r3, #6, #10
    e38a:	f00e f925 	bl	1c5d8 <log_1>
				return -EINVAL;
    e38e:	f06f 0015 	mvn.w	r0, #21
			break;
		}
	}

	return ret;
}
    e392:	bd38      	pop	{r3, r4, r5, pc}
		if (toupper(*(cmd + i)) != *(slm_cmd + i)) {
    e394:	5ce2      	ldrb	r2, [r4, r3]
    e396:	f1a2 0561 	sub.w	r5, r2, #97	; 0x61
    e39a:	2d19      	cmp	r5, #25
    e39c:	f811 5b01 	ldrb.w	r5, [r1], #1
    e3a0:	bf98      	it	ls
    e3a2:	3a20      	subls	r2, #32
    e3a4:	4295      	cmp	r5, r2
    e3a6:	d108      	bne.n	e3ba <slm_at_gps_parse+0x6a>
	for (int i = 0; i < length; i++) {
    e3a8:	3301      	adds	r3, #1
    e3aa:	e7d9      	b.n	e360 <slm_at_gps_parse+0x10>
			type = at_parser_cmd_type_get(at_cmd);
    e3ac:	4620      	mov	r0, r4
    e3ae:	f00f fe64 	bl	1e07a <at_parser_cmd_type_get>
}
    e3b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			ret = m_gps_at_list[i].handler(type);
    e3b6:	f7ff be7f 	b.w	e0b8 <handle_at_gpsrun>
	int ret = -ENOTSUP;
    e3ba:	f06f 0022 	mvn.w	r0, #34	; 0x22
    e3be:	e7e8      	b.n	e392 <slm_at_gps_parse+0x42>
    e3c0:	0001fe01 	.word	0x0001fe01
    e3c4:	200200e8 	.word	0x200200e8
    e3c8:	0001edc4 	.word	0x0001edc4
    e3cc:	0001edfc 	.word	0x0001edfc
    e3d0:	0001f40f 	.word	0x0001f40f

0000e3d4 <slm_at_gps_init>:
///////////////////////////////////////////////////////////////////////////

/**@brief API to initialize GPS AT commands handler
 */
int slm_at_gps_init(at_cmd_handler_t callback)
{
    e3d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e3d8:	4b40      	ldr	r3, [pc, #256]	; (e4dc <slm_at_gps_init+0x108>)
    e3da:	4c41      	ldr	r4, [pc, #260]	; (e4e0 <slm_at_gps_init+0x10c>)
    e3dc:	1ae4      	subs	r4, r4, r3
    e3de:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (callback == NULL) {
    e3e2:	b970      	cbnz	r0, e402 <slm_at_gps_init+0x2e>
		LOG_ERR("No callback");
    e3e4:	2301      	movs	r3, #1
    e3e6:	f04f 0100 	mov.w	r1, #0
    e3ea:	f363 0107 	bfi	r1, r3, #0, #8
    e3ee:	483d      	ldr	r0, [pc, #244]	; (e4e4 <slm_at_gps_init+0x110>)
    e3f0:	f364 118f 	bfi	r1, r4, #6, #10
    e3f4:	f00e f8e3 	bl	1c5be <log_0>
		return -EINVAL;
    e3f8:	f06f 0015 	mvn.w	r0, #21
	enable_gps();
	do_gps_start();
	//////////////////////////////////////////////////////////////////////

	return 0;
}
    e3fc:	b003      	add	sp, #12
    e3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	gps_client_inst.mask = NRF_GNSS_NMEA_GGA_MASK; ///////////////////////
    e402:	2201      	movs	r2, #1
    e404:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	gps_thread_id = NULL;
    e408:	2500      	movs	r5, #0
	gps_client_inst.sock = INVALID_SOCKET;
    e40a:	4b37      	ldr	r3, [pc, #220]	; (e4e8 <slm_at_gps_init+0x114>)
	return socket_ops->socket(family, type, proto);
    e40c:	4f37      	ldr	r7, [pc, #220]	; (e4ec <slm_at_gps_init+0x118>)
	gps_client_inst.mask = NRF_GNSS_NMEA_GGA_MASK; ///////////////////////
    e40e:	e9c3 1200 	strd	r1, r2, [r3]
	gps_client_inst.callback = callback;
    e412:	6098      	str	r0, [r3, #8]
	gps_thread_id = NULL;
    e414:	4b36      	ldr	r3, [pc, #216]	; (e4f0 <slm_at_gps_init+0x11c>)
	LOG_INF("Initializing GPS Module");
    e416:	f04f 0100 	mov.w	r1, #0
	gps_thread_id = NULL;
    e41a:	601d      	str	r5, [r3, #0]
	LOG_INF("Initializing GPS Module");
    e41c:	2303      	movs	r3, #3
    e41e:	f363 0107 	bfi	r1, r3, #0, #8
    e422:	f364 118f 	bfi	r1, r4, #6, #10
    e426:	4833      	ldr	r0, [pc, #204]	; (e4f4 <slm_at_gps_init+0x120>)
    e428:	f00e f8c9 	bl	1c5be <log_0>
    e42c:	683b      	ldr	r3, [r7, #0]
    e42e:	f240 2201 	movw	r2, #513	; 0x201
    e432:	681b      	ldr	r3, [r3, #0]
    e434:	4629      	mov	r1, r5
    e436:	2066      	movs	r0, #102	; 0x66
    e438:	4798      	blx	r3
	if (at_sock < 0) {
    e43a:	1e06      	subs	r6, r0, #0
    e43c:	46b8      	mov	r8, r7
    e43e:	db20      	blt.n	e482 <slm_at_gps_init+0xae>
    e440:	4f2d      	ldr	r7, [pc, #180]	; (e4f8 <slm_at_gps_init+0x124>)
		if (memcmp(buf, "OK", 2) != 0) {
    e442:	f8df a0c0 	ldr.w	sl, [pc, #192]	; e504 <slm_at_gps_init+0x130>
		LOG_INF("%s",gps_at_commands[i]);
    e446:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    e44a:	f043 0303 	orr.w	r3, r3, #3
    e44e:	f363 0907 	bfi	r9, r3, #0, #8
    e452:	f364 198f 	bfi	r9, r4, #6, #10
    e456:	464a      	mov	r2, r9
    e458:	4639      	mov	r1, r7
    e45a:	4828      	ldr	r0, [pc, #160]	; (e4fc <slm_at_gps_init+0x128>)
    e45c:	f00e f8bc 	bl	1c5d8 <log_1>
		bytes_sent = send(at_sock, gps_at_commands[i],
    e460:	4638      	mov	r0, r7
    e462:	f00e fde7 	bl	1d034 <strlen>
	return socket_ops->send(sock, buf, len, flags);
    e466:	f8d8 3000 	ldr.w	r3, [r8]
    e46a:	4602      	mov	r2, r0
    e46c:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
    e470:	4639      	mov	r1, r7
    e472:	2300      	movs	r3, #0
    e474:	4630      	mov	r0, r6
    e476:	47d8      	blx	fp
		if (bytes_sent < 0) {
    e478:	2800      	cmp	r0, #0
    e47a:	da06      	bge.n	e48a <slm_at_gps_init+0xb6>
			close(at_sock);
    e47c:	4630      	mov	r0, r6
    e47e:	f7ff fccb 	bl	de18 <close>
	do_gps_start();
    e482:	f7ff fd13 	bl	deac <do_gps_start>
	return 0;
    e486:	2000      	movs	r0, #0
    e488:	e7b8      	b.n	e3fc <slm_at_gps_init+0x28>
	return socket_ops->recv(sock, buf, max_len, flags);
    e48a:	f8d8 3000 	ldr.w	r3, [r8]
    e48e:	2202      	movs	r2, #2
    e490:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
    e494:	a901      	add	r1, sp, #4
    e496:	2300      	movs	r3, #0
    e498:	4630      	mov	r0, r6
    e49a:	47d8      	blx	fp
		} while (bytes_received == 0);
    e49c:	2800      	cmp	r0, #0
    e49e:	d0f4      	beq.n	e48a <slm_at_gps_init+0xb6>
		if (memcmp(buf, "OK", 2) != 0) {
    e4a0:	2202      	movs	r2, #2
    e4a2:	4651      	mov	r1, sl
    e4a4:	a801      	add	r0, sp, #4
    e4a6:	f00e fdf0 	bl	1d08a <memcmp>
    e4aa:	2800      	cmp	r0, #0
    e4ac:	d1e6      	bne.n	e47c <slm_at_gps_init+0xa8>
	return z_impl_k_sleep(ms);
    e4ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	for (int i = 0; i < ARRAY_SIZE(gps_at_commands); i++) {
    e4b2:	3501      	adds	r5, #1
    e4b4:	f00d f912 	bl	1b6dc <z_impl_k_sleep>
    e4b8:	2d03      	cmp	r5, #3
    e4ba:	f107 071f 	add.w	r7, r7, #31
    e4be:	d1c2      	bne.n	e446 <slm_at_gps_init+0x72>
	close(at_sock);
    e4c0:	4630      	mov	r0, r6
    e4c2:	f7ff fca9 	bl	de18 <close>
	LOG_INF("GPS Enabled");
    e4c6:	2303      	movs	r3, #3
    e4c8:	f04f 0100 	mov.w	r1, #0
    e4cc:	f363 0107 	bfi	r1, r3, #0, #8
    e4d0:	f364 118f 	bfi	r1, r4, #6, #10
    e4d4:	480a      	ldr	r0, [pc, #40]	; (e500 <slm_at_gps_init+0x12c>)
    e4d6:	f00e f872 	bl	1c5be <log_0>
	return 0;
    e4da:	e7d2      	b.n	e482 <slm_at_gps_init+0xae>
    e4dc:	0001edc4 	.word	0x0001edc4
    e4e0:	0001edfc 	.word	0x0001edfc
    e4e4:	0001faeb 	.word	0x0001faeb
    e4e8:	20020114 	.word	0x20020114
    e4ec:	2002031c 	.word	0x2002031c
    e4f0:	200201d0 	.word	0x200201d0
    e4f4:	0001fddd 	.word	0x0001fddd
    e4f8:	0001fcbf 	.word	0x0001fcbf
    e4fc:	0001fa06 	.word	0x0001fa06
    e500:	0001fdf5 	.word	0x0001fdf5
    e504:	0001fb25 	.word	0x0001fb25

0000e508 <slm_at_gps_uninit>:

/**@brief API to uninitialize GPS AT commands handler
 */
int slm_at_gps_uninit(void)
{
    e508:	b510      	push	{r4, lr}
	if (gps_thread_id != NULL) {
    e50a:	4c06      	ldr	r4, [pc, #24]	; (e524 <slm_at_gps_uninit+0x1c>)
    e50c:	6823      	ldr	r3, [r4, #0]
    e50e:	b133      	cbz	r3, e51e <slm_at_gps_uninit+0x16>
		do_gps_stop();
    e510:	f7ff fc88 	bl	de24 <do_gps_stop>
		k_thread_abort(gps_thread_id);
    e514:	6820      	ldr	r0, [r4, #0]
	z_impl_k_thread_abort(thread);
    e516:	f001 fb5b 	bl	fbd0 <z_impl_k_thread_abort>
		gps_thread_id = NULL;
    e51a:	2300      	movs	r3, #0
    e51c:	6023      	str	r3, [r4, #0]
	}

	return 0;
}
    e51e:	2000      	movs	r0, #0
    e520:	bd10      	pop	{r4, pc}
    e522:	bf00      	nop
    e524:	200201d0 	.word	0x200201d0

0000e528 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    e528:	680b      	ldr	r3, [r1, #0]
    e52a:	3301      	adds	r3, #1
    e52c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    e52e:	4b01      	ldr	r3, [pc, #4]	; (e534 <char_out+0xc>)
    e530:	681b      	ldr	r3, [r3, #0]
    e532:	4718      	bx	r3
    e534:	2002c3f4 	.word	0x2002c3f4

0000e538 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    e538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e53c:	b085      	sub	sp, #20
    e53e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    e540:	469b      	mov	fp, r3
    e542:	2c01      	cmp	r4, #1
    e544:	bfb8      	it	lt
    e546:	2401      	movlt	r4, #1
    e548:	2b01      	cmp	r3, #1
    e54a:	bf0c      	ite	eq
    e54c:	2330      	moveq	r3, #48	; 0x30
    e54e:	2320      	movne	r3, #32
    e550:	4616      	mov	r6, r2
    e552:	4682      	mov	sl, r0
    e554:	4688      	mov	r8, r1
    e556:	2501      	movs	r5, #1
    e558:	270a      	movs	r7, #10
    e55a:	2200      	movs	r2, #0
    e55c:	f8df 906c 	ldr.w	r9, [pc, #108]	; e5cc <_printk_dec_ulong+0x94>
    e560:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    e562:	fbb6 f3f9 	udiv	r3, r6, r9
    e566:	9301      	str	r3, [sp, #4]
    e568:	b90a      	cbnz	r2, e56e <_printk_dec_ulong+0x36>
    e56a:	45b1      	cmp	r9, r6
    e56c:	d81c      	bhi.n	e5a8 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    e56e:	9b01      	ldr	r3, [sp, #4]
    e570:	4641      	mov	r1, r8
    e572:	f103 0030 	add.w	r0, r3, #48	; 0x30
    e576:	47d0      	blx	sl
			found_largest_digit = 1;
    e578:	2201      	movs	r2, #1
			digits++;
    e57a:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    e57c:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    e57e:	3f01      	subs	r7, #1
		remainder %= pos;
    e580:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
    e584:	230a      	movs	r3, #10
	while (pos >= 10) {
    e586:	2f01      	cmp	r7, #1
		pos /= 10;
    e588:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    e58c:	d1e9      	bne.n	e562 <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
    e58e:	4641      	mov	r1, r8
    e590:	f106 0030 	add.w	r0, r6, #48	; 0x30
    e594:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    e596:	f1bb 0f03 	cmp.w	fp, #3
    e59a:	d102      	bne.n	e5a2 <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
    e59c:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
    e59e:	2c00      	cmp	r4, #0
    e5a0:	dc0e      	bgt.n	e5c0 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
    e5a2:	b005      	add	sp, #20
    e5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    e5a8:	42bc      	cmp	r4, r7
    e5aa:	dbe7      	blt.n	e57c <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    e5ac:	f1bb 0f02 	cmp.w	fp, #2
    e5b0:	d8e4      	bhi.n	e57c <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    e5b2:	4641      	mov	r1, r8
    e5b4:	9802      	ldr	r0, [sp, #8]
    e5b6:	9203      	str	r2, [sp, #12]
			digits++;
    e5b8:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    e5ba:	47d0      	blx	sl
			digits++;
    e5bc:	9a03      	ldr	r2, [sp, #12]
    e5be:	e7dd      	b.n	e57c <_printk_dec_ulong+0x44>
			out(' ', ctx);
    e5c0:	4641      	mov	r1, r8
    e5c2:	2020      	movs	r0, #32
    e5c4:	47d0      	blx	sl
    e5c6:	3c01      	subs	r4, #1
    e5c8:	e7e9      	b.n	e59e <_printk_dec_ulong+0x66>
    e5ca:	bf00      	nop
    e5cc:	3b9aca00 	.word	0x3b9aca00

0000e5d0 <__printk_hook_install>:
	_char_out = fn;
    e5d0:	4b01      	ldr	r3, [pc, #4]	; (e5d8 <__printk_hook_install+0x8>)
    e5d2:	6018      	str	r0, [r3, #0]
}
    e5d4:	4770      	bx	lr
    e5d6:	bf00      	nop
    e5d8:	2002c3f4 	.word	0x2002c3f4

0000e5dc <vprintk>:
	struct out_context ctx = { 0 };
    e5dc:	2300      	movs	r3, #0
{
    e5de:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
    e5e0:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    e5e2:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    e5e4:	4803      	ldr	r0, [pc, #12]	; (e5f4 <vprintk+0x18>)
    e5e6:	460b      	mov	r3, r1
    e5e8:	a901      	add	r1, sp, #4
    e5ea:	f00d fe45 	bl	1c278 <z_vprintk>
}
    e5ee:	b003      	add	sp, #12
    e5f0:	f85d fb04 	ldr.w	pc, [sp], #4
    e5f4:	0000e529 	.word	0x0000e529

0000e5f8 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    e5f8:	f04f 0220 	mov.w	r2, #32
    e5fc:	f3ef 8311 	mrs	r3, BASEPRI
    e600:	f382 8811 	msr	BASEPRI, r2
    e604:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    e608:	2101      	movs	r1, #1
    e60a:	4a04      	ldr	r2, [pc, #16]	; (e61c <nordicsemi_nrf91_init+0x24>)
    e60c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    e610:	f383 8811 	msr	BASEPRI, r3
    e614:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    e618:	2000      	movs	r0, #0
    e61a:	4770      	bx	lr
    e61c:	40039000 	.word	0x40039000

0000e620 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    e620:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    e622:	2200      	movs	r2, #0
{
    e624:	b087      	sub	sp, #28
		k_timer_init(&log_process_thread_timer,
    e626:	490d      	ldr	r1, [pc, #52]	; (e65c <enable_logger+0x3c>)
    e628:	480d      	ldr	r0, [pc, #52]	; (e660 <enable_logger+0x40>)
    e62a:	f010 f91c 	bl	1e866 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    e62e:	2400      	movs	r4, #0
    e630:	230e      	movs	r3, #14
    e632:	4d0c      	ldr	r5, [pc, #48]	; (e664 <enable_logger+0x44>)
    e634:	e9cd 4302 	strd	r4, r3, [sp, #8]
    e638:	e9cd 4404 	strd	r4, r4, [sp, #16]
    e63c:	e9cd 4400 	strd	r4, r4, [sp]
    e640:	4b09      	ldr	r3, [pc, #36]	; (e668 <enable_logger+0x48>)
    e642:	f44f 7240 	mov.w	r2, #768	; 0x300
    e646:	4909      	ldr	r1, [pc, #36]	; (e66c <enable_logger+0x4c>)
    e648:	4628      	mov	r0, r5
    e64a:	f00d f931 	bl	1b8b0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    e64e:	4908      	ldr	r1, [pc, #32]	; (e670 <enable_logger+0x50>)
    e650:	4628      	mov	r0, r5
    e652:	f010 f871 	bl	1e738 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    e656:	4620      	mov	r0, r4
    e658:	b007      	add	sp, #28
    e65a:	bd30      	pop	{r4, r5, pc}
    e65c:	0000e675 	.word	0x0000e675
    e660:	200201e8 	.word	0x200201e8
    e664:	20020230 	.word	0x20020230
    e668:	0000e955 	.word	0x0000e955
    e66c:	200269a0 	.word	0x200269a0
    e670:	0001fe23 	.word	0x0001fe23

0000e674 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    e674:	4801      	ldr	r0, [pc, #4]	; (e67c <log_process_thread_timer_expiry_fn+0x8>)
    e676:	f00d b85f 	b.w	1b738 <z_impl_k_sem_give>
    e67a:	bf00      	nop
    e67c:	2002c570 	.word	0x2002c570

0000e680 <log_core_init>:
{
    e680:	b508      	push	{r3, lr}
		log_msg_pool_init();
    e682:	f000 f9df 	bl	ea44 <log_msg_pool_init>
		log_list_init(&list);
    e686:	4809      	ldr	r0, [pc, #36]	; (e6ac <log_core_init+0x2c>)
    e688:	f00d ff76 	bl	1c578 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    e68c:	2304      	movs	r3, #4
    e68e:	2234      	movs	r2, #52	; 0x34
    e690:	4807      	ldr	r0, [pc, #28]	; (e6b0 <log_core_init+0x30>)
    e692:	4908      	ldr	r1, [pc, #32]	; (e6b4 <log_core_init+0x34>)
    e694:	f00f fe35 	bl	1e302 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    e698:	4b07      	ldr	r3, [pc, #28]	; (e6b8 <log_core_init+0x38>)
    e69a:	4a08      	ldr	r2, [pc, #32]	; (e6bc <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
    e69c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    e6a0:	601a      	str	r2, [r3, #0]
}
    e6a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    e6a6:	f000 bbfd 	b.w	eea4 <log_output_timestamp_freq_set>
    e6aa:	bf00      	nop
    e6ac:	200201e0 	.word	0x200201e0
    e6b0:	20020214 	.word	0x20020214
    e6b4:	2002a9e0 	.word	0x2002a9e0
    e6b8:	2002c3f8 	.word	0x2002c3f8
    e6bc:	0001c5b7 	.word	0x0001c5b7

0000e6c0 <dropped_notify>:
{
    e6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e6c2:	2500      	movs	r5, #0
    e6c4:	4b0c      	ldr	r3, [pc, #48]	; (e6f8 <dropped_notify+0x38>)
    e6c6:	e8d3 7fef 	ldaex	r7, [r3]
    e6ca:	e8c3 5fe2 	stlex	r2, r5, [r3]
    e6ce:	2a00      	cmp	r2, #0
    e6d0:	d1f9      	bne.n	e6c6 <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    e6d2:	4c0a      	ldr	r4, [pc, #40]	; (e6fc <dropped_notify+0x3c>)
    e6d4:	4e0a      	ldr	r6, [pc, #40]	; (e700 <dropped_notify+0x40>)
    e6d6:	1b36      	subs	r6, r6, r4
    e6d8:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    e6da:	42b5      	cmp	r5, r6
    e6dc:	db00      	blt.n	e6e0 <dropped_notify+0x20>
}
    e6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    e6e0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    e6e2:	795b      	ldrb	r3, [r3, #5]
    e6e4:	b12b      	cbz	r3, e6f2 <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
    e6e6:	6823      	ldr	r3, [r4, #0]
    e6e8:	68db      	ldr	r3, [r3, #12]
    e6ea:	b113      	cbz	r3, e6f2 <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
    e6ec:	4639      	mov	r1, r7
    e6ee:	4620      	mov	r0, r4
    e6f0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    e6f2:	3501      	adds	r5, #1
    e6f4:	3410      	adds	r4, #16
    e6f6:	e7f0      	b.n	e6da <dropped_notify+0x1a>
    e6f8:	200201d8 	.word	0x200201d8
    e6fc:	0001ee4c 	.word	0x0001ee4c
    e700:	0001ee5c 	.word	0x0001ee5c

0000e704 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    e704:	4b22      	ldr	r3, [pc, #136]	; (e790 <z_impl_log_process+0x8c>)
{
    e706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!backend_attached && !bypass) {
    e70a:	781b      	ldrb	r3, [r3, #0]
{
    e70c:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    e70e:	b903      	cbnz	r3, e712 <z_impl_log_process+0xe>
    e710:	b340      	cbz	r0, e764 <z_impl_log_process+0x60>
	__asm__ volatile(
    e712:	f04f 0320 	mov.w	r3, #32
    e716:	f3ef 8411 	mrs	r4, BASEPRI
    e71a:	f383 8811 	msr	BASEPRI, r3
    e71e:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    e722:	481c      	ldr	r0, [pc, #112]	; (e794 <z_impl_log_process+0x90>)
    e724:	f00d ff38 	bl	1c598 <log_list_head_get>
    e728:	4607      	mov	r7, r0
	__asm__ volatile(
    e72a:	f384 8811 	msr	BASEPRI, r4
    e72e:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    e732:	b158      	cbz	r0, e74c <z_impl_log_process+0x48>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    e734:	4b18      	ldr	r3, [pc, #96]	; (e798 <z_impl_log_process+0x94>)
    e736:	e8d3 2fef 	ldaex	r2, [r3]
    e73a:	3a01      	subs	r2, #1
    e73c:	e8c3 2fe1 	stlex	r1, r2, [r3]
    e740:	2900      	cmp	r1, #0
    e742:	d1f8      	bne.n	e736 <z_impl_log_process+0x32>
	if (!bypass) {
    e744:	b18d      	cbz	r5, e76a <z_impl_log_process+0x66>
	log_msg_put(msg);
    e746:	4638      	mov	r0, r7
    e748:	f00e f813 	bl	1c772 <log_msg_put>
	if (!bypass && dropped_cnt) {
    e74c:	b925      	cbnz	r5, e758 <z_impl_log_process+0x54>
    e74e:	4b13      	ldr	r3, [pc, #76]	; (e79c <z_impl_log_process+0x98>)
    e750:	681b      	ldr	r3, [r3, #0]
    e752:	b10b      	cbz	r3, e758 <z_impl_log_process+0x54>
		dropped_notify();
    e754:	f7ff ffb4 	bl	e6c0 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    e758:	480e      	ldr	r0, [pc, #56]	; (e794 <z_impl_log_process+0x90>)
    e75a:	f00d ff1b 	bl	1c594 <log_list_head_peek>
    e75e:	1c05      	adds	r5, r0, #0
    e760:	bf18      	it	ne
    e762:	2501      	movne	r5, #1
}
    e764:	4628      	mov	r0, r5
    e766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (int i = 0; i < log_backend_count_get(); i++) {
    e76a:	46a8      	mov	r8, r5
	return __log_backends_end - __log_backends_start;
    e76c:	4c0c      	ldr	r4, [pc, #48]	; (e7a0 <z_impl_log_process+0x9c>)
    e76e:	4e0d      	ldr	r6, [pc, #52]	; (e7a4 <z_impl_log_process+0xa0>)
    e770:	1b36      	subs	r6, r6, r4
    e772:	1136      	asrs	r6, r6, #4
    e774:	45b0      	cmp	r8, r6
    e776:	dae6      	bge.n	e746 <z_impl_log_process+0x42>
	return backend->cb->active;
    e778:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    e77a:	795b      	ldrb	r3, [r3, #5]
    e77c:	b123      	cbz	r3, e788 <z_impl_log_process+0x84>
	backend->api->put(backend, msg);
    e77e:	6823      	ldr	r3, [r4, #0]
    e780:	4639      	mov	r1, r7
    e782:	681b      	ldr	r3, [r3, #0]
    e784:	4620      	mov	r0, r4
    e786:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    e788:	f108 0801 	add.w	r8, r8, #1
    e78c:	3410      	adds	r4, #16
    e78e:	e7f1      	b.n	e774 <z_impl_log_process+0x70>
    e790:	20026430 	.word	0x20026430
    e794:	200201e0 	.word	0x200201e0
    e798:	200201d4 	.word	0x200201d4
    e79c:	200201d8 	.word	0x200201d8
    e7a0:	0001ee4c 	.word	0x0001ee4c
    e7a4:	0001ee5c 	.word	0x0001ee5c

0000e7a8 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    e7a8:	4b24      	ldr	r3, [pc, #144]	; (e83c <msg_finalize+0x94>)
{
    e7aa:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    e7ac:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    e7ae:	8141      	strh	r1, [r0, #10]
{
    e7b0:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    e7b2:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    e7b4:	4c22      	ldr	r4, [pc, #136]	; (e840 <msg_finalize+0x98>)
    e7b6:	60e8      	str	r0, [r5, #12]
    e7b8:	e8d4 3fef 	ldaex	r3, [r4]
    e7bc:	3301      	adds	r3, #1
    e7be:	e8c4 3fe2 	stlex	r2, r3, [r4]
    e7c2:	2a00      	cmp	r2, #0
    e7c4:	d1f8      	bne.n	e7b8 <msg_finalize+0x10>
	__asm__ volatile(
    e7c6:	f04f 0320 	mov.w	r3, #32
    e7ca:	f3ef 8611 	mrs	r6, BASEPRI
    e7ce:	f383 8811 	msr	BASEPRI, r3
    e7d2:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    e7d6:	481b      	ldr	r0, [pc, #108]	; (e844 <msg_finalize+0x9c>)
    e7d8:	4629      	mov	r1, r5
    e7da:	f00d fed1 	bl	1c580 <log_list_add_tail>
	__asm__ volatile(
    e7de:	f386 8811 	msr	BASEPRI, r6
    e7e2:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    e7e6:	4b18      	ldr	r3, [pc, #96]	; (e848 <msg_finalize+0xa0>)
    e7e8:	781a      	ldrb	r2, [r3, #0]
    e7ea:	b17a      	cbz	r2, e80c <msg_finalize+0x64>
	__asm__ volatile(
    e7ec:	f04f 0320 	mov.w	r3, #32
    e7f0:	f3ef 8411 	mrs	r4, BASEPRI
    e7f4:	f383 8811 	msr	BASEPRI, r3
    e7f8:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    e7fc:	2000      	movs	r0, #0
    e7fe:	f7ff ff81 	bl	e704 <z_impl_log_process>
	__asm__ volatile(
    e802:	f384 8811 	msr	BASEPRI, r4
    e806:	f3bf 8f6f 	isb	sy
}
    e80a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    e80c:	490f      	ldr	r1, [pc, #60]	; (e84c <msg_finalize+0xa4>)
    e80e:	6823      	ldr	r3, [r4, #0]
    e810:	6809      	ldr	r1, [r1, #0]
    e812:	2900      	cmp	r1, #0
    e814:	d0f9      	beq.n	e80a <msg_finalize+0x62>
    e816:	2b01      	cmp	r3, #1
    e818:	d106      	bne.n	e828 <msg_finalize+0x80>
}
    e81a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_timer_start(timer, duration, period);
    e81e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e822:	480b      	ldr	r0, [pc, #44]	; (e850 <msg_finalize+0xa8>)
    e824:	f00d ba5e 	b.w	1bce4 <z_impl_k_timer_start>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    e828:	2b0a      	cmp	r3, #10
    e82a:	d1ee      	bne.n	e80a <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
    e82c:	4808      	ldr	r0, [pc, #32]	; (e850 <msg_finalize+0xa8>)
    e82e:	f010 f826 	bl	1e87e <z_impl_k_timer_stop>
}
    e832:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_sem_give(sem);
    e836:	4807      	ldr	r0, [pc, #28]	; (e854 <msg_finalize+0xac>)
    e838:	f00c bf7e 	b.w	1b738 <z_impl_k_sem_give>
    e83c:	2002c3f8 	.word	0x2002c3f8
    e840:	200201d4 	.word	0x200201d4
    e844:	200201e0 	.word	0x200201e0
    e848:	20026431 	.word	0x20026431
    e84c:	200202e0 	.word	0x200202e0
    e850:	200201e8 	.word	0x200201e8
    e854:	2002c570 	.word	0x2002c570

0000e858 <log_dropped>:
    e858:	4b04      	ldr	r3, [pc, #16]	; (e86c <log_dropped+0x14>)
    e85a:	e8d3 2fef 	ldaex	r2, [r3]
    e85e:	3201      	adds	r2, #1
    e860:	e8c3 2fe1 	stlex	r1, r2, [r3]
    e864:	2900      	cmp	r1, #0
    e866:	d1f8      	bne.n	e85a <log_dropped+0x2>
}
    e868:	4770      	bx	lr
    e86a:	bf00      	nop
    e86c:	200201d8 	.word	0x200201d8

0000e870 <log_source_name_get>:
    e870:	4a04      	ldr	r2, [pc, #16]	; (e884 <log_source_name_get+0x14>)
    e872:	4b05      	ldr	r3, [pc, #20]	; (e888 <log_source_name_get+0x18>)
    e874:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    e876:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    e87a:	bf34      	ite	cc
    e87c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    e880:	2000      	movcs	r0, #0
}
    e882:	4770      	bx	lr
    e884:	0001edc4 	.word	0x0001edc4
    e888:	0001ee4c 	.word	0x0001ee4c

0000e88c <log_backend_enable>:
	id += backend - log_backend_get(0);
    e88c:	4b09      	ldr	r3, [pc, #36]	; (e8b4 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    e88e:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    e890:	1ac3      	subs	r3, r0, r3
    e892:	111b      	asrs	r3, r3, #4
    e894:	3301      	adds	r3, #1
{
    e896:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    e898:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
    e89a:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
    e89c:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    e89e:	4c06      	ldr	r4, [pc, #24]	; (e8b8 <log_backend_enable+0x2c>)
    e8a0:	715a      	strb	r2, [r3, #5]
    e8a2:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    e8a4:	6019      	str	r1, [r3, #0]
    e8a6:	b912      	cbnz	r2, e8ae <log_backend_enable+0x22>
    e8a8:	4804      	ldr	r0, [pc, #16]	; (e8bc <log_backend_enable+0x30>)
    e8aa:	f00c ff45 	bl	1b738 <z_impl_k_sem_give>
	backend_attached = true;
    e8ae:	2301      	movs	r3, #1
    e8b0:	7023      	strb	r3, [r4, #0]
}
    e8b2:	bd10      	pop	{r4, pc}
    e8b4:	0001ee4c 	.word	0x0001ee4c
    e8b8:	20026430 	.word	0x20026430
    e8bc:	2002c570 	.word	0x2002c570

0000e8c0 <log_init>:
{
    e8c0:	b570      	push	{r4, r5, r6, lr}
    e8c2:	4b0f      	ldr	r3, [pc, #60]	; (e900 <log_init+0x40>)
    e8c4:	e8d3 5fef 	ldaex	r5, [r3]
    e8c8:	1c6a      	adds	r2, r5, #1
    e8ca:	e8c3 2fe1 	stlex	r1, r2, [r3]
    e8ce:	2900      	cmp	r1, #0
    e8d0:	d1f8      	bne.n	e8c4 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    e8d2:	b92d      	cbnz	r5, e8e0 <log_init+0x20>
	return __log_backends_end - __log_backends_start;
    e8d4:	4c0b      	ldr	r4, [pc, #44]	; (e904 <log_init+0x44>)
    e8d6:	4e0c      	ldr	r6, [pc, #48]	; (e908 <log_init+0x48>)
    e8d8:	1b36      	subs	r6, r6, r4
    e8da:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    e8dc:	42b5      	cmp	r5, r6
    e8de:	db00      	blt.n	e8e2 <log_init+0x22>
}
    e8e0:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    e8e2:	7b23      	ldrb	r3, [r4, #12]
    e8e4:	b143      	cbz	r3, e8f8 <log_init+0x38>
			if (backend->api->init != NULL) {
    e8e6:	6823      	ldr	r3, [r4, #0]
    e8e8:	695b      	ldr	r3, [r3, #20]
    e8ea:	b103      	cbz	r3, e8ee <log_init+0x2e>
				backend->api->init();
    e8ec:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    e8ee:	2204      	movs	r2, #4
    e8f0:	2100      	movs	r1, #0
    e8f2:	4620      	mov	r0, r4
    e8f4:	f7ff ffca 	bl	e88c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    e8f8:	3501      	adds	r5, #1
    e8fa:	3410      	adds	r4, #16
    e8fc:	e7ee      	b.n	e8dc <log_init+0x1c>
    e8fe:	bf00      	nop
    e900:	200201dc 	.word	0x200201dc
    e904:	0001ee4c 	.word	0x0001ee4c
    e908:	0001ee5c 	.word	0x0001ee5c

0000e90c <z_impl_log_panic>:
{
    e90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    e90e:	4f0e      	ldr	r7, [pc, #56]	; (e948 <z_impl_log_panic+0x3c>)
    e910:	783d      	ldrb	r5, [r7, #0]
    e912:	b975      	cbnz	r5, e932 <z_impl_log_panic+0x26>
	log_init();
    e914:	f7ff ffd4 	bl	e8c0 <log_init>
    e918:	4c0c      	ldr	r4, [pc, #48]	; (e94c <z_impl_log_panic+0x40>)
    e91a:	4e0d      	ldr	r6, [pc, #52]	; (e950 <z_impl_log_panic+0x44>)
    e91c:	1b36      	subs	r6, r6, r4
    e91e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    e920:	42b5      	cmp	r5, r6
    e922:	db07      	blt.n	e934 <z_impl_log_panic+0x28>
    e924:	2000      	movs	r0, #0
    e926:	f7ff feed 	bl	e704 <z_impl_log_process>
		while (log_process(false) == true) {
    e92a:	2800      	cmp	r0, #0
    e92c:	d1fa      	bne.n	e924 <z_impl_log_panic+0x18>
	panic_mode = true;
    e92e:	2301      	movs	r3, #1
    e930:	703b      	strb	r3, [r7, #0]
}
    e932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    e934:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    e936:	795b      	ldrb	r3, [r3, #5]
    e938:	b11b      	cbz	r3, e942 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    e93a:	6823      	ldr	r3, [r4, #0]
    e93c:	4620      	mov	r0, r4
    e93e:	691b      	ldr	r3, [r3, #16]
    e940:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    e942:	3501      	adds	r5, #1
    e944:	3410      	adds	r4, #16
    e946:	e7eb      	b.n	e920 <z_impl_log_panic+0x14>
    e948:	20026431 	.word	0x20026431
    e94c:	0001ee4c 	.word	0x0001ee4c
    e950:	0001ee5c 	.word	0x0001ee5c

0000e954 <log_process_thread_func>:
{
    e954:	b508      	push	{r3, lr}
	log_init();
    e956:	f7ff ffb3 	bl	e8c0 <log_init>
	return z_impl_k_current_get();
    e95a:	f00c fee7 	bl	1b72c <z_impl_k_current_get>
	proc_tid = process_tid;
    e95e:	4b0b      	ldr	r3, [pc, #44]	; (e98c <log_process_thread_func+0x38>)
    e960:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    e962:	b130      	cbz	r0, e972 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    e964:	4b0a      	ldr	r3, [pc, #40]	; (e990 <log_process_thread_func+0x3c>)
	    process_tid &&
    e966:	681b      	ldr	r3, [r3, #0]
    e968:	2b09      	cmp	r3, #9
    e96a:	dd02      	ble.n	e972 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    e96c:	4809      	ldr	r0, [pc, #36]	; (e994 <log_process_thread_func+0x40>)
    e96e:	f00c fee3 	bl	1b738 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    e972:	4c08      	ldr	r4, [pc, #32]	; (e994 <log_process_thread_func+0x40>)
    e974:	2000      	movs	r0, #0
    e976:	f7ff fec5 	bl	e704 <z_impl_log_process>
		if (log_process(false) == false) {
    e97a:	2800      	cmp	r0, #0
    e97c:	d1fa      	bne.n	e974 <log_process_thread_func+0x20>
    e97e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e982:	4620      	mov	r0, r4
    e984:	f00c ff04 	bl	1b790 <z_impl_k_sem_take>
    e988:	e7f4      	b.n	e974 <log_process_thread_func+0x20>
    e98a:	bf00      	nop
    e98c:	200202e0 	.word	0x200202e0
    e990:	200201d4 	.word	0x200201d4
    e994:	2002c570 	.word	0x2002c570

0000e998 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    e998:	4b14      	ldr	r3, [pc, #80]	; (e9ec <log_strdup+0x54>)
{
    e99a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
    e99c:	4298      	cmp	r0, r3
{
    e99e:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    e9a0:	d302      	bcc.n	e9a8 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    e9a2:	4b13      	ldr	r3, [pc, #76]	; (e9f0 <log_strdup+0x58>)
    e9a4:	4298      	cmp	r0, r3
    e9a6:	d31b      	bcc.n	e9e0 <log_strdup+0x48>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    e9a8:	2200      	movs	r2, #0
    e9aa:	a901      	add	r1, sp, #4
    e9ac:	4811      	ldr	r0, [pc, #68]	; (e9f4 <log_strdup+0x5c>)
    e9ae:	f00c f97f 	bl	1acb0 <k_mem_slab_alloc>
	if (err != 0) {
    e9b2:	4605      	mov	r5, r0
    e9b4:	b9b8      	cbnz	r0, e9e6 <log_strdup+0x4e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e9b6:	2201      	movs	r2, #1
    e9b8:	9b01      	ldr	r3, [sp, #4]
    e9ba:	e8d3 1fef 	ldaex	r1, [r3]
    e9be:	e8c3 2fe0 	stlex	r0, r2, [r3]
    e9c2:	2800      	cmp	r0, #0
    e9c4:	d1f9      	bne.n	e9ba <log_strdup+0x22>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    e9c6:	9801      	ldr	r0, [sp, #4]
    e9c8:	4621      	mov	r1, r4
    e9ca:	222d      	movs	r2, #45	; 0x2d
    e9cc:	3004      	adds	r0, #4
    e9ce:	f00e fb03 	bl	1cfd8 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    e9d2:	237e      	movs	r3, #126	; 0x7e
    e9d4:	9c01      	ldr	r4, [sp, #4]
    e9d6:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    e9da:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	return dup->buf;
    e9de:	3404      	adds	r4, #4
}
    e9e0:	4620      	mov	r0, r4
    e9e2:	b003      	add	sp, #12
    e9e4:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    e9e6:	4c04      	ldr	r4, [pc, #16]	; (e9f8 <log_strdup+0x60>)
    e9e8:	e7fa      	b.n	e9e0 <log_strdup+0x48>
    e9ea:	bf00      	nop
    e9ec:	0001ead8 	.word	0x0001ead8
    e9f0:	00020884 	.word	0x00020884
    e9f4:	20020214 	.word	0x20020214
    e9f8:	0001fe2b 	.word	0x0001fe2b

0000e9fc <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
    e9fc:	b148      	cbz	r0, ea12 <log_is_strdup+0x16>
    e9fe:	4b05      	ldr	r3, [pc, #20]	; (ea14 <log_is_strdup+0x18>)
    ea00:	4298      	cmp	r0, r3
    ea02:	d305      	bcc.n	ea10 <log_is_strdup+0x14>
    ea04:	33d0      	adds	r3, #208	; 0xd0
    ea06:	4298      	cmp	r0, r3
    ea08:	bf2c      	ite	cs
    ea0a:	2000      	movcs	r0, #0
    ea0c:	2001      	movcc	r0, #1
    ea0e:	4770      	bx	lr
    ea10:	2000      	movs	r0, #0
}
    ea12:	4770      	bx	lr
    ea14:	2002a9e0 	.word	0x2002a9e0

0000ea18 <log_free>:
{
    ea18:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    ea1a:	3804      	subs	r0, #4
    ea1c:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    ea1e:	e8d0 3fef 	ldaex	r3, [r0]
    ea22:	1e5a      	subs	r2, r3, #1
    ea24:	e8c0 2fe1 	stlex	r1, r2, [r0]
    ea28:	2900      	cmp	r1, #0
    ea2a:	d1f8      	bne.n	ea1e <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
    ea2c:	2b01      	cmp	r3, #1
    ea2e:	d103      	bne.n	ea38 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    ea30:	a901      	add	r1, sp, #4
    ea32:	4803      	ldr	r0, [pc, #12]	; (ea40 <log_free+0x28>)
    ea34:	f00c f968 	bl	1ad08 <k_mem_slab_free>
}
    ea38:	b003      	add	sp, #12
    ea3a:	f85d fb04 	ldr.w	pc, [sp], #4
    ea3e:	bf00      	nop
    ea40:	20020214 	.word	0x20020214

0000ea44 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    ea44:	2320      	movs	r3, #32
    ea46:	4902      	ldr	r1, [pc, #8]	; (ea50 <log_msg_pool_init+0xc>)
    ea48:	461a      	mov	r2, r3
    ea4a:	4802      	ldr	r0, [pc, #8]	; (ea54 <log_msg_pool_init+0x10>)
    ea4c:	f00f bc59 	b.w	1e302 <k_mem_slab_init>
    ea50:	2002aab0 	.word	0x2002aab0
    ea54:	200202e4 	.word	0x200202e4

0000ea58 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
    ea58:	2300      	movs	r3, #0
{
    ea5a:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    ea5c:	4d09      	ldr	r5, [pc, #36]	; (ea84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x24>)
	union log_msg_chunk *msg = NULL;
    ea5e:	9301      	str	r3, [sp, #4]
    ea60:	2001      	movs	r0, #1
    ea62:	f7ff fe4f 	bl	e704 <z_impl_log_process>
    ea66:	4604      	mov	r4, r0
			log_dropped();
    ea68:	f7ff fef6 	bl	e858 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    ea6c:	2200      	movs	r2, #0
    ea6e:	a901      	add	r1, sp, #4
    ea70:	4628      	mov	r0, r5
    ea72:	f00c f91d 	bl	1acb0 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    ea76:	b108      	cbz	r0, ea7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c>
    ea78:	2c00      	cmp	r4, #0
    ea7a:	d1f1      	bne.n	ea60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1>
	} else {
		log_dropped();
	}
	return msg;

}
    ea7c:	9801      	ldr	r0, [sp, #4]
    ea7e:	b003      	add	sp, #12
    ea80:	bd30      	pop	{r4, r5, pc}
    ea82:	bf00      	nop
    ea84:	200202e4 	.word	0x200202e4

0000ea88 <log_msg_chunk_alloc>:
{
    ea88:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    ea8a:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    ea8c:	a901      	add	r1, sp, #4
    ea8e:	4806      	ldr	r0, [pc, #24]	; (eaa8 <log_msg_chunk_alloc+0x20>)
	union log_msg_chunk *msg = NULL;
    ea90:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    ea92:	f00c f90d 	bl	1acb0 <k_mem_slab_alloc>
	if (err != 0) {
    ea96:	b110      	cbz	r0, ea9e <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
    ea98:	f7ff ffde 	bl	ea58 <log_msg_no_space_handle>
    ea9c:	9001      	str	r0, [sp, #4]
}
    ea9e:	9801      	ldr	r0, [sp, #4]
    eaa0:	b003      	add	sp, #12
    eaa2:	f85d fb04 	ldr.w	pc, [sp], #4
    eaa6:	bf00      	nop
    eaa8:	200202e4 	.word	0x200202e4

0000eaac <msg_free>:
{
    eaac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    eaae:	7a04      	ldrb	r4, [r0, #8]
	u32_t nargs = msg->hdr.params.std.nargs;
    eab0:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
    eab2:	f014 0401 	ands.w	r4, r4, #1
{
    eab6:	9001      	str	r0, [sp, #4]
	u32_t nargs = msg->hdr.params.std.nargs;
    eab8:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    eabc:	d00e      	beq.n	eadc <msg_free+0x30>
	if (msg->hdr.params.generic.ext == 1) {
    eabe:	9b01      	ldr	r3, [sp, #4]
    eac0:	7a1a      	ldrb	r2, [r3, #8]
    eac2:	0792      	lsls	r2, r2, #30
    eac4:	d504      	bpl.n	ead0 <msg_free+0x24>
		cont_free(msg->payload.ext.next);
    eac6:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    eac8:	4c10      	ldr	r4, [pc, #64]	; (eb0c <msg_free+0x60>)
    eaca:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    eacc:	9b03      	ldr	r3, [sp, #12]
    eace:	b9b3      	cbnz	r3, eafe <msg_free+0x52>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    ead0:	a901      	add	r1, sp, #4
    ead2:	480e      	ldr	r0, [pc, #56]	; (eb0c <msg_free+0x60>)
    ead4:	f00c f918 	bl	1ad08 <k_mem_slab_free>
}
    ead8:	b004      	add	sp, #16
    eada:	bd70      	pop	{r4, r5, r6, pc}
	if (log_msg_is_std(msg) && nargs) {
    eadc:	2d00      	cmp	r5, #0
    eade:	d0ee      	beq.n	eabe <msg_free+0x12>
		for (i = 0; i < nargs; i++) {
    eae0:	42a5      	cmp	r5, r4
    eae2:	9801      	ldr	r0, [sp, #4]
    eae4:	d9eb      	bls.n	eabe <msg_free+0x12>
			void *buf = (void *)log_msg_arg_get(msg, i);
    eae6:	4621      	mov	r1, r4
    eae8:	f00d fe26 	bl	1c738 <log_msg_arg_get>
    eaec:	4606      	mov	r6, r0
			if (log_is_strdup(buf)) {
    eaee:	f7ff ff85 	bl	e9fc <log_is_strdup>
    eaf2:	b110      	cbz	r0, eafa <msg_free+0x4e>
				log_free(buf);
    eaf4:	4630      	mov	r0, r6
    eaf6:	f7ff ff8f 	bl	ea18 <log_free>
		for (i = 0; i < nargs; i++) {
    eafa:	3401      	adds	r4, #1
    eafc:	e7f0      	b.n	eae0 <msg_free+0x34>
		next = cont->next;
    eafe:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    eb00:	a903      	add	r1, sp, #12
    eb02:	4620      	mov	r0, r4
    eb04:	f00c f900 	bl	1ad08 <k_mem_slab_free>
		cont = next;
    eb08:	9503      	str	r5, [sp, #12]
    eb0a:	e7df      	b.n	eacc <msg_free+0x20>
    eb0c:	200202e4 	.word	0x200202e4

0000eb10 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    eb10:	b40e      	push	{r1, r2, r3}
    eb12:	b503      	push	{r0, r1, lr}
    eb14:	ab03      	add	r3, sp, #12
    eb16:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    eb1a:	4601      	mov	r1, r0
    eb1c:	4804      	ldr	r0, [pc, #16]	; (eb30 <print_formatted+0x20>)
	va_start(args, fmt);
    eb1e:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    eb20:	f00d fbaa 	bl	1c278 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    eb24:	2000      	movs	r0, #0
    eb26:	b002      	add	sp, #8
    eb28:	f85d eb04 	ldr.w	lr, [sp], #4
    eb2c:	b003      	add	sp, #12
    eb2e:	4770      	bx	lr
    eb30:	0001cb39 	.word	0x0001cb39

0000eb34 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    eb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    eb38:	f011 0402 	ands.w	r4, r1, #2
{
    eb3c:	b085      	sub	sp, #20
    eb3e:	4606      	mov	r6, r0
    eb40:	4690      	mov	r8, r2
    eb42:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    eb46:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    eb4a:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    eb4e:	d007      	beq.n	eb60 <prefix_print+0x2c>
	if (!format) {
    eb50:	f011 0f44 	tst.w	r1, #68	; 0x44
    eb54:	d137      	bne.n	ebc6 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    eb56:	461a      	mov	r2, r3
    eb58:	4932      	ldr	r1, [pc, #200]	; (ec24 <prefix_print+0xf0>)
    eb5a:	f7ff ffd9 	bl	eb10 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    eb5e:	4604      	mov	r4, r0
	if (color) {
    eb60:	f1b9 0f00 	cmp.w	r9, #0
    eb64:	d00a      	beq.n	eb7c <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
    eb66:	4b30      	ldr	r3, [pc, #192]	; (ec28 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    eb68:	4930      	ldr	r1, [pc, #192]	; (ec2c <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
    eb6a:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    eb6e:	4b30      	ldr	r3, [pc, #192]	; (ec30 <prefix_print+0xfc>)
    eb70:	4630      	mov	r0, r6
    eb72:	2a00      	cmp	r2, #0
    eb74:	bf08      	it	eq
    eb76:	461a      	moveq	r2, r3
    eb78:	f7ff ffca 	bl	eb10 <print_formatted>
	if (level_on) {
    eb7c:	b13d      	cbz	r5, eb8e <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    eb7e:	4b2d      	ldr	r3, [pc, #180]	; (ec34 <prefix_print+0x100>)
    eb80:	492d      	ldr	r1, [pc, #180]	; (ec38 <prefix_print+0x104>)
    eb82:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    eb86:	4630      	mov	r0, r6
    eb88:	f7ff ffc2 	bl	eb10 <print_formatted>
    eb8c:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    eb8e:	f1b8 0f00 	cmp.w	r8, #0
    eb92:	d044      	beq.n	ec1e <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    eb94:	2301      	movs	r3, #1
    eb96:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    eb9a:	4b28      	ldr	r3, [pc, #160]	; (ec3c <prefix_print+0x108>)
    eb9c:	f017 0f10 	tst.w	r7, #16
    eba0:	4f27      	ldr	r7, [pc, #156]	; (ec40 <prefix_print+0x10c>)
    eba2:	bf18      	it	ne
    eba4:	461f      	movne	r7, r3
    eba6:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    ebaa:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    ebae:	f7ff fe5f 	bl	e870 <log_source_name_get>
    ebb2:	4639      	mov	r1, r7
    ebb4:	4602      	mov	r2, r0
    ebb6:	4630      	mov	r0, r6
    ebb8:	f7ff ffaa 	bl	eb10 <print_formatted>
    ebbc:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    ebbe:	4420      	add	r0, r4
    ebc0:	b005      	add	sp, #20
    ebc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    ebc6:	4a1f      	ldr	r2, [pc, #124]	; (ec44 <prefix_print+0x110>)
    ebc8:	6811      	ldr	r1, [r2, #0]
    ebca:	b331      	cbz	r1, ec1a <prefix_print+0xe6>
		timestamp /= timestamp_div;
    ebcc:	4a1e      	ldr	r2, [pc, #120]	; (ec48 <prefix_print+0x114>)
    ebce:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    ebd2:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
    ebd4:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    ebd8:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
    ebdc:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    ebe0:	fbb4 f2fe 	udiv	r2, r4, lr
    ebe4:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    ebe8:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    ebec:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ebf0:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    ebf4:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ebf8:	fb01 441b 	mls	r4, r1, fp, r4
    ebfc:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    ec00:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ec04:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    ec08:	e9cd b101 	strd	fp, r1, [sp, #4]
    ec0c:	fb0a e113 	mls	r1, sl, r3, lr
    ec10:	9100      	str	r1, [sp, #0]
    ec12:	490e      	ldr	r1, [pc, #56]	; (ec4c <prefix_print+0x118>)
    ec14:	f7ff ff7c 	bl	eb10 <print_formatted>
    ec18:	e7a1      	b.n	eb5e <prefix_print+0x2a>
		length = 0;
    ec1a:	4608      	mov	r0, r1
    ec1c:	e79f      	b.n	eb5e <prefix_print+0x2a>
	total += print_formatted(log_output,
    ec1e:	4f08      	ldr	r7, [pc, #32]	; (ec40 <prefix_print+0x10c>)
    ec20:	e7c1      	b.n	eba6 <prefix_print+0x72>
    ec22:	bf00      	nop
    ec24:	0001fe90 	.word	0x0001fe90
    ec28:	0001eef8 	.word	0x0001eef8
    ec2c:	0001fa06 	.word	0x0001fa06
    ec30:	0001fe82 	.word	0x0001fe82
    ec34:	0001ef0c 	.word	0x0001ef0c
    ec38:	0001feb5 	.word	0x0001feb5
    ec3c:	0001fe8c 	.word	0x0001fe8c
    ec40:	0001fe87 	.word	0x0001fe87
    ec44:	20020300 	.word	0x20020300
    ec48:	20020304 	.word	0x20020304
    ec4c:	0001fe99 	.word	0x0001fe99

0000ec50 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    ec50:	b538      	push	{r3, r4, r5, lr}
    ec52:	460c      	mov	r4, r1
	if (color) {
    ec54:	07e1      	lsls	r1, r4, #31
{
    ec56:	4605      	mov	r5, r0
	if (color) {
    ec58:	d503      	bpl.n	ec62 <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    ec5a:	4a08      	ldr	r2, [pc, #32]	; (ec7c <postfix_print+0x2c>)
    ec5c:	4908      	ldr	r1, [pc, #32]	; (ec80 <postfix_print+0x30>)
    ec5e:	f7ff ff57 	bl	eb10 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    ec62:	06e2      	lsls	r2, r4, #27
    ec64:	d408      	bmi.n	ec78 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    ec66:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    ec68:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    ec6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    ec6e:	bf4c      	ite	mi
    ec70:	4904      	ldrmi	r1, [pc, #16]	; (ec84 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    ec72:	4905      	ldrpl	r1, [pc, #20]	; (ec88 <postfix_print+0x38>)
    ec74:	f7ff bf4c 	b.w	eb10 <print_formatted>
}
    ec78:	bd38      	pop	{r3, r4, r5, pc}
    ec7a:	bf00      	nop
    ec7c:	0001fe82 	.word	0x0001fe82
    ec80:	0001fa06 	.word	0x0001fa06
    ec84:	0001f794 	.word	0x0001f794
    ec88:	0001f793 	.word	0x0001f793

0000ec8c <hexdump_line_print>:
{
    ec8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ec90:	4698      	mov	r8, r3
    ec92:	9b08      	ldr	r3, [sp, #32]
    ec94:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    ec96:	06dd      	lsls	r5, r3, #27
{
    ec98:	460e      	mov	r6, r1
    ec9a:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    ec9c:	d405      	bmi.n	ecaa <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    ec9e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    eca0:	bf4c      	ite	mi
    eca2:	4929      	ldrmi	r1, [pc, #164]	; (ed48 <hexdump_line_print+0xbc>)
		print_formatted(ctx, "\r\n");
    eca4:	4929      	ldrpl	r1, [pc, #164]	; (ed4c <hexdump_line_print+0xc0>)
    eca6:	f7ff ff33 	bl	eb10 <print_formatted>
{
    ecaa:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
    ecac:	f8df 90a4 	ldr.w	r9, [pc, #164]	; ed54 <hexdump_line_print+0xc8>
	for (int i = 0; i < prefix_offset; i++) {
    ecb0:	4545      	cmp	r5, r8
    ecb2:	db2a      	blt.n	ed0a <hexdump_line_print+0x7e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ecb4:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    ecb6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; ed58 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%02x ", data[i]);
    ecba:	f8df 90a0 	ldr.w	r9, [pc, #160]	; ed5c <hexdump_line_print+0xd0>
			print_formatted(log_output, " ");
    ecbe:	f8df a094 	ldr.w	sl, [pc, #148]	; ed54 <hexdump_line_print+0xc8>
		if (i < length) {
    ecc2:	42bd      	cmp	r5, r7
    ecc4:	d22e      	bcs.n	ed24 <hexdump_line_print+0x98>
			print_formatted(log_output, "%02x ", data[i]);
    ecc6:	5d72      	ldrb	r2, [r6, r5]
    ecc8:	4649      	mov	r1, r9
    ecca:	4620      	mov	r0, r4
    eccc:	f7ff ff20 	bl	eb10 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ecd0:	3501      	adds	r5, #1
    ecd2:	2d10      	cmp	r5, #16
    ecd4:	d11f      	bne.n	ed16 <hexdump_line_print+0x8a>
	print_formatted(log_output, "|");
    ecd6:	491e      	ldr	r1, [pc, #120]	; (ed50 <hexdump_line_print+0xc4>)
    ecd8:	4620      	mov	r0, r4
    ecda:	f7ff ff19 	bl	eb10 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ecde:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    ece0:	f8df 8070 	ldr.w	r8, [pc, #112]	; ed54 <hexdump_line_print+0xc8>
			print_formatted(log_output, "%c",
    ece4:	f8df 9078 	ldr.w	r9, [pc, #120]	; ed60 <hexdump_line_print+0xd4>
		if (i < length) {
    ece8:	42af      	cmp	r7, r5
    ecea:	d927      	bls.n	ed3c <hexdump_line_print+0xb0>
			      isprint((int)c) ? c : '.');
    ecec:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    ecee:	4649      	mov	r1, r9
	return (int)((((unsigned)c) >= ' ') &&
    ecf0:	f1a2 0320 	sub.w	r3, r2, #32
    ecf4:	2b5f      	cmp	r3, #95	; 0x5f
    ecf6:	bf28      	it	cs
    ecf8:	222e      	movcs	r2, #46	; 0x2e
    ecfa:	4620      	mov	r0, r4
    ecfc:	f7ff ff08 	bl	eb10 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ed00:	3501      	adds	r5, #1
    ed02:	2d10      	cmp	r5, #16
    ed04:	d113      	bne.n	ed2e <hexdump_line_print+0xa2>
}
    ed06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    ed0a:	4649      	mov	r1, r9
    ed0c:	4620      	mov	r0, r4
    ed0e:	f7ff feff 	bl	eb10 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    ed12:	3501      	adds	r5, #1
    ed14:	e7cc      	b.n	ecb0 <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
    ed16:	076a      	lsls	r2, r5, #29
    ed18:	d1d3      	bne.n	ecc2 <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
    ed1a:	4651      	mov	r1, sl
    ed1c:	4620      	mov	r0, r4
    ed1e:	f7ff fef7 	bl	eb10 <print_formatted>
    ed22:	e7ce      	b.n	ecc2 <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
    ed24:	4641      	mov	r1, r8
    ed26:	4620      	mov	r0, r4
    ed28:	f7ff fef2 	bl	eb10 <print_formatted>
    ed2c:	e7d0      	b.n	ecd0 <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
    ed2e:	076b      	lsls	r3, r5, #29
    ed30:	d1da      	bne.n	ece8 <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    ed32:	4641      	mov	r1, r8
    ed34:	4620      	mov	r0, r4
    ed36:	f7ff feeb 	bl	eb10 <print_formatted>
    ed3a:	e7d5      	b.n	ece8 <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    ed3c:	4641      	mov	r1, r8
    ed3e:	4620      	mov	r0, r4
    ed40:	f7ff fee6 	bl	eb10 <print_formatted>
    ed44:	e7dc      	b.n	ed00 <hexdump_line_print+0x74>
    ed46:	bf00      	nop
    ed48:	0001f794 	.word	0x0001f794
    ed4c:	0001f793 	.word	0x0001f793
    ed50:	0001fe53 	.word	0x0001fe53
    ed54:	0001fe51 	.word	0x0001fe51
    ed58:	0001fe4f 	.word	0x0001fe4f
    ed5c:	0001fe49 	.word	0x0001fe49
    ed60:	0001fe55 	.word	0x0001fe55

0000ed64 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    ed64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    ed68:	7a8b      	ldrb	r3, [r1, #10]
    ed6a:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    ed6c:	f013 0407 	ands.w	r4, r3, #7
{
    ed70:	b08a      	sub	sp, #40	; 0x28
    ed72:	4605      	mov	r5, r0
    ed74:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    ed76:	7a0a      	ldrb	r2, [r1, #8]
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    ed78:	d01c      	beq.n	edb4 <log_output_msg_process+0x50>
    ed7a:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
    ed7c:	8949      	ldrh	r1, [r1, #10]
    ed7e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    ed82:	0989      	lsrs	r1, r1, #6
    ed84:	9102      	str	r1, [sp, #8]
    ed86:	e9cd 4300 	strd	r4, r3, [sp]
    ed8a:	f002 0201 	and.w	r2, r2, #1
    ed8e:	68f3      	ldr	r3, [r6, #12]
    ed90:	4639      	mov	r1, r7
    ed92:	f7ff fecf 	bl	eb34 <prefix_print>
    ed96:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    ed98:	7a33      	ldrb	r3, [r6, #8]
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    ed9a:	07da      	lsls	r2, r3, #31
    ed9c:	d40c      	bmi.n	edb8 <log_output_msg_process+0x54>
		std_print(msg, log_output);
    ed9e:	4629      	mov	r1, r5
    eda0:	4630      	mov	r0, r6
    eda2:	f00d fd5f 	bl	1c864 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    eda6:	b34c      	cbz	r4, edfc <log_output_msg_process+0x98>
		postfix_print(log_output, flags, level);
    eda8:	4622      	mov	r2, r4
    edaa:	4639      	mov	r1, r7
    edac:	4628      	mov	r0, r5
    edae:	f7ff ff4f 	bl	ec50 <postfix_print>
    edb2:	e023      	b.n	edfc <log_output_msg_process+0x98>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    edb4:	46a1      	mov	r9, r4
    edb6:	e7ef      	b.n	ed98 <log_output_msg_process+0x34>
	} else if (raw_string) {
    edb8:	bb34      	cbnz	r4, ee08 <log_output_msg_process+0xa4>
	size_t offset = 0;
    edba:	4627      	mov	r7, r4
		length = log_output->size;
    edbc:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    edbe:	aa06      	add	r2, sp, #24
		length = log_output->size;
    edc0:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    edc2:	68a9      	ldr	r1, [r5, #8]
    edc4:	463b      	mov	r3, r7
    edc6:	4630      	mov	r0, r6
    edc8:	f00d fd38 	bl	1c83c <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    edcc:	9a06      	ldr	r2, [sp, #24]
    edce:	686b      	ldr	r3, [r5, #4]
    edd0:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    edd2:	b13a      	cbz	r2, ede4 <log_output_msg_process+0x80>
			eol = (log_output->buf[length - 1] == '\n');
    edd4:	68ab      	ldr	r3, [r5, #8]
    edd6:	4413      	add	r3, r2
    edd8:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    eddc:	f1a4 030a 	sub.w	r3, r4, #10
    ede0:	425c      	negs	r4, r3
    ede2:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    ede4:	4628      	mov	r0, r5
    ede6:	f00d fe9a 	bl	1cb1e <log_output_flush>
		offset += length;
    edea:	9b06      	ldr	r3, [sp, #24]
    edec:	441f      	add	r7, r3
	} while (length > 0);
    edee:	2b00      	cmp	r3, #0
    edf0:	d1e4      	bne.n	edbc <log_output_msg_process+0x58>
	if (eol) {
    edf2:	b11c      	cbz	r4, edfc <log_output_msg_process+0x98>
		print_formatted(log_output, "\r");
    edf4:	4914      	ldr	r1, [pc, #80]	; (ee48 <log_output_msg_process+0xe4>)
    edf6:	4628      	mov	r0, r5
    edf8:	f7ff fe8a 	bl	eb10 <print_formatted>
	}

	log_output_flush(log_output);
    edfc:	4628      	mov	r0, r5
    edfe:	f00d fe8e 	bl	1cb1e <log_output_flush>
}
    ee02:	b00a      	add	sp, #40	; 0x28
    ee04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    ee08:	4630      	mov	r0, r6
    ee0a:	f00d fcc1 	bl	1c790 <log_msg_str_get>
    ee0e:	490f      	ldr	r1, [pc, #60]	; (ee4c <log_output_msg_process+0xe8>)
    ee10:	4602      	mov	r2, r0
    ee12:	4628      	mov	r0, r5
    ee14:	f7ff fe7c 	bl	eb10 <print_formatted>
	u32_t offset = 0U;
    ee18:	f04f 0800 	mov.w	r8, #0
		length = sizeof(buf);
    ee1c:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    ee20:	aa05      	add	r2, sp, #20
    ee22:	4643      	mov	r3, r8
    ee24:	a906      	add	r1, sp, #24
    ee26:	4630      	mov	r0, r6
		length = sizeof(buf);
    ee28:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    ee2c:	f00d fd06 	bl	1c83c <log_msg_hexdump_data_get>
		if (length) {
    ee30:	9a05      	ldr	r2, [sp, #20]
    ee32:	2a00      	cmp	r2, #0
    ee34:	d0b8      	beq.n	eda8 <log_output_msg_process+0x44>
			hexdump_line_print(log_output, buf, length,
    ee36:	464b      	mov	r3, r9
    ee38:	9700      	str	r7, [sp, #0]
    ee3a:	a906      	add	r1, sp, #24
    ee3c:	4628      	mov	r0, r5
    ee3e:	f7ff ff25 	bl	ec8c <hexdump_line_print>
			offset += length;
    ee42:	9b05      	ldr	r3, [sp, #20]
    ee44:	4498      	add	r8, r3
    ee46:	e7eb      	b.n	ee20 <log_output_msg_process+0xbc>
    ee48:	0001fe58 	.word	0x0001fe58
    ee4c:	0001fa06 	.word	0x0001fa06

0000ee50 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    ee50:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    ee52:	e9d0 4300 	ldrd	r4, r3, [r0]
    ee56:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    ee58:	f242 730f 	movw	r3, #9999	; 0x270f
    ee5c:	428b      	cmp	r3, r1
    ee5e:	bf28      	it	cs
    ee60:	460b      	movcs	r3, r1
    ee62:	4a0d      	ldr	r2, [pc, #52]	; (ee98 <log_output_dropped_process+0x48>)
    ee64:	2105      	movs	r1, #5
    ee66:	4668      	mov	r0, sp
    ee68:	f001 fd84 	bl	10974 <snprintf>
    ee6c:	4606      	mov	r6, r0

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    ee6e:	462b      	mov	r3, r5
    ee70:	4620      	mov	r0, r4
    ee72:	220b      	movs	r2, #11
    ee74:	4909      	ldr	r1, [pc, #36]	; (ee9c <log_output_dropped_process+0x4c>)
    ee76:	f00d fce8 	bl	1c84a <buffer_write>
	buffer_write(outf, buf, len, dev);
    ee7a:	462b      	mov	r3, r5
    ee7c:	4632      	mov	r2, r6
    ee7e:	4669      	mov	r1, sp
    ee80:	4620      	mov	r0, r4
    ee82:	f00d fce2 	bl	1c84a <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    ee86:	462b      	mov	r3, r5
    ee88:	221b      	movs	r2, #27
    ee8a:	4905      	ldr	r1, [pc, #20]	; (eea0 <log_output_dropped_process+0x50>)
    ee8c:	4620      	mov	r0, r4
    ee8e:	f00d fcdc 	bl	1c84a <buffer_write>
}
    ee92:	b002      	add	sp, #8
    ee94:	bd70      	pop	{r4, r5, r6, pc}
    ee96:	bf00      	nop
    ee98:	0001fd2c 	.word	0x0001fd2c
    ee9c:	0001fe76 	.word	0x0001fe76
    eea0:	0001fe5a 	.word	0x0001fe5a

0000eea4 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    eea4:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    eea6:	2100      	movs	r1, #0
	timestamp_div = 1U;
    eea8:	4a07      	ldr	r2, [pc, #28]	; (eec8 <log_output_timestamp_freq_set+0x24>)
{
    eeaa:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    eeac:	4c07      	ldr	r4, [pc, #28]	; (eecc <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    eeae:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    eeb0:	42a0      	cmp	r0, r4
    eeb2:	d804      	bhi.n	eebe <log_output_timestamp_freq_set+0x1a>
    eeb4:	b101      	cbz	r1, eeb8 <log_output_timestamp_freq_set+0x14>
    eeb6:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    eeb8:	4b05      	ldr	r3, [pc, #20]	; (eed0 <log_output_timestamp_freq_set+0x2c>)
    eeba:	6018      	str	r0, [r3, #0]
}
    eebc:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    eebe:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    eec0:	005b      	lsls	r3, r3, #1
    eec2:	2101      	movs	r1, #1
    eec4:	e7f4      	b.n	eeb0 <log_output_timestamp_freq_set+0xc>
    eec6:	bf00      	nop
    eec8:	20020304 	.word	0x20020304
    eecc:	000f4240 	.word	0x000f4240
    eed0:	20020300 	.word	0x20020300

0000eed4 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    eed4:	4801      	ldr	r0, [pc, #4]	; (eedc <panic+0x8>)
    eed6:	f00d be22 	b.w	1cb1e <log_output_flush>
    eeda:	bf00      	nop
    eedc:	0001ef38 	.word	0x0001ef38

0000eee0 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    eee0:	4801      	ldr	r0, [pc, #4]	; (eee8 <dropped+0x8>)
    eee2:	f7ff bfb5 	b.w	ee50 <log_output_dropped_process>
    eee6:	bf00      	nop
    eee8:	0001ef38 	.word	0x0001ef38

0000eeec <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
    eeec:	b508      	push	{r3, lr}
    eeee:	4803      	ldr	r0, [pc, #12]	; (eefc <log_backend_uart_init+0x10>)
    eef0:	f00b fd50 	bl	1a994 <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    eef4:	4b02      	ldr	r3, [pc, #8]	; (ef00 <log_backend_uart_init+0x14>)
    eef6:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
    eef8:	bd08      	pop	{r3, pc}
    eefa:	bf00      	nop
    eefc:	0001f513 	.word	0x0001f513
    ef00:	20020310 	.word	0x20020310

0000ef04 <put>:
{
    ef04:	b510      	push	{r4, lr}
    ef06:	460c      	mov	r4, r1
	log_msg_get(msg);
    ef08:	4608      	mov	r0, r1
    ef0a:	f00d fc09 	bl	1c720 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    ef0e:	4621      	mov	r1, r4
    ef10:	4804      	ldr	r0, [pc, #16]	; (ef24 <put+0x20>)
    ef12:	220f      	movs	r2, #15
    ef14:	f7ff ff26 	bl	ed64 <log_output_msg_process>
	log_msg_put(msg);
    ef18:	4620      	mov	r0, r4
}
    ef1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef1e:	f00d bc28 	b.w	1c772 <log_msg_put>
    ef22:	bf00      	nop
    ef24:	0001ef38 	.word	0x0001ef38

0000ef28 <socket_offload_register>:
void socket_offload_register(const struct socket_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(socket_ops == NULL);

	socket_ops = ops;
    ef28:	4b01      	ldr	r3, [pc, #4]	; (ef30 <socket_offload_register+0x8>)
    ef2a:	6018      	str	r0, [r3, #0]
}
    ef2c:	4770      	bx	lr
    ef2e:	bf00      	nop
    ef30:	2002031c 	.word	0x2002031c

0000ef34 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    ef34:	280a      	cmp	r0, #10
{
    ef36:	b538      	push	{r3, r4, r5, lr}
    ef38:	4604      	mov	r4, r0
    ef3a:	4d07      	ldr	r5, [pc, #28]	; (ef58 <console_out+0x24>)
	if ('\n' == c) {
    ef3c:	d104      	bne.n	ef48 <console_out+0x14>
    ef3e:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    ef40:	6843      	ldr	r3, [r0, #4]
    ef42:	210d      	movs	r1, #13
    ef44:	685b      	ldr	r3, [r3, #4]
    ef46:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    ef48:	6828      	ldr	r0, [r5, #0]
    ef4a:	6843      	ldr	r3, [r0, #4]
    ef4c:	b2e1      	uxtb	r1, r4
    ef4e:	685b      	ldr	r3, [r3, #4]
    ef50:	4798      	blx	r3

	return c;
}
    ef52:	4620      	mov	r0, r4
    ef54:	bd38      	pop	{r3, r4, r5, pc}
    ef56:	bf00      	nop
    ef58:	20020320 	.word	0x20020320

0000ef5c <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    ef5c:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    ef5e:	4c04      	ldr	r4, [pc, #16]	; (ef70 <uart_console_hook_install+0x14>)
    ef60:	4620      	mov	r0, r4
    ef62:	f001 fd01 	bl	10968 <__stdout_hook_install>
	__printk_hook_install(console_out);
    ef66:	4620      	mov	r0, r4
}
    ef68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    ef6c:	f7ff bb30 	b.w	e5d0 <__printk_hook_install>
    ef70:	0000ef35 	.word	0x0000ef35

0000ef74 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    ef74:	b508      	push	{r3, lr}
    ef76:	4804      	ldr	r0, [pc, #16]	; (ef88 <uart_console_init+0x14>)
    ef78:	f00b fd0c 	bl	1a994 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    ef7c:	4b03      	ldr	r3, [pc, #12]	; (ef8c <uart_console_init+0x18>)
    ef7e:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    ef80:	f7ff ffec 	bl	ef5c <uart_console_hook_install>

	return 0;
}
    ef84:	2000      	movs	r0, #0
    ef86:	bd08      	pop	{r3, pc}
    ef88:	0001f513 	.word	0x0001f513
    ef8c:	20020320 	.word	0x20020320

0000ef90 <hfclk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int hfclk_init(struct device *dev)
{
    ef90:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    ef92:	2200      	movs	r2, #0
{
    ef94:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    ef96:	2101      	movs	r1, #1
    ef98:	2005      	movs	r0, #5
    ef9a:	f000 f9c9 	bl	f330 <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    ef9e:	2005      	movs	r0, #5
    efa0:	f000 f9b6 	bl	f310 <arch_irq_enable>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    efa4:	2202      	movs	r2, #2
    efa6:	4b05      	ldr	r3, [pc, #20]	; (efbc <hfclk_init+0x2c>)
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    efa8:	2000      	movs	r0, #0
    efaa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    efae:	2203      	movs	r2, #3
    efb0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			(NRF_POWER_INT_USBDETECTED_MASK |
			 NRF_POWER_INT_USBREMOVED_MASK |
			 NRF_POWER_INT_USBPWRRDY_MASK),
			(0))));

	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    efb4:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
    efb6:	e9c3 0000 	strd	r0, r0, [r3]

	return 0;
}
    efba:	bd10      	pop	{r4, pc}
    efbc:	40005000 	.word	0x40005000

0000efc0 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    efc0:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    efc2:	4b10      	ldr	r3, [pc, #64]	; (f004 <nrf_power_clock_isr+0x44>)
    efc4:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    efc6:	b162      	cbz	r2, efe2 <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
    efc8:	4a0f      	ldr	r2, [pc, #60]	; (f008 <nrf_power_clock_isr+0x48>)
    efca:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    efce:	07d1      	lsls	r1, r2, #31
    efd0:	d507      	bpl.n	efe2 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    efd2:	2200      	movs	r2, #0
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
    efd4:	480d      	ldr	r0, [pc, #52]	; (f00c <nrf_power_clock_isr+0x4c>)
    efd6:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    efd8:	6883      	ldr	r3, [r0, #8]
    efda:	7a5b      	ldrb	r3, [r3, #9]
    efdc:	b90b      	cbnz	r3, efe2 <nrf_power_clock_isr+0x22>
			clkstarted_handle(hfclk_dev);
    efde:	f00d fe5f 	bl	1cca0 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    efe2:	4b0b      	ldr	r3, [pc, #44]	; (f010 <nrf_power_clock_isr+0x50>)
    efe4:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    efe6:	b15a      	cbz	r2, f000 <nrf_power_clock_isr+0x40>
    return p_reg->INTENSET & mask;
    efe8:	4a07      	ldr	r2, [pc, #28]	; (f008 <nrf_power_clock_isr+0x48>)
    efea:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    efee:	0792      	lsls	r2, r2, #30
    eff0:	d506      	bpl.n	f000 <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    eff2:	2200      	movs	r2, #0

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
    eff4:	4807      	ldr	r0, [pc, #28]	; (f014 <nrf_power_clock_isr+0x54>)
    eff6:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    eff8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(lfclk_dev);
    effc:	f00d be50 	b.w	1cca0 <clkstarted_handle>
}
    f000:	bd08      	pop	{r3, pc}
    f002:	bf00      	nop
    f004:	40005100 	.word	0x40005100
    f008:	40005000 	.word	0x40005000
    f00c:	2002c484 	.word	0x2002c484
    f010:	40005104 	.word	0x40005104
    f014:	2002c490 	.word	0x2002c490

0000f018 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    f018:	2200      	movs	r2, #0
    f01a:	4b0d      	ldr	r3, [pc, #52]	; (f050 <rtc1_nrf_isr+0x38>)
    f01c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    f020:	f04f 0220 	mov.w	r2, #32
    f024:	f3ef 8111 	mrs	r1, BASEPRI
    f028:	f382 8811 	msr	BASEPRI, r2
    f02c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    f030:	4a08      	ldr	r2, [pc, #32]	; (f054 <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    f032:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    f036:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    f038:	1ac0      	subs	r0, r0, r3
    f03a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    f03e:	4403      	add	r3, r0
    f040:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    f042:	f381 8811 	msr	BASEPRI, r1
    f046:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    f04a:	f00c bdb3 	b.w	1bbb4 <z_clock_announce>
    f04e:	bf00      	nop
    f050:	40015000 	.word	0x40015000
    f054:	2002033c 	.word	0x2002033c

0000f058 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    f058:	b570      	push	{r4, r5, r6, lr}
    f05a:	4818      	ldr	r0, [pc, #96]	; (f0bc <z_clock_driver_init+0x64>)
    f05c:	f00b fc9a 	bl	1a994 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
    f060:	b348      	cbz	r0, f0b6 <z_clock_driver_init+0x5e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    f062:	6843      	ldr	r3, [r0, #4]
    f064:	2100      	movs	r1, #0
    f066:	681b      	ldr	r3, [r3, #0]
    f068:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
    f06a:	2601      	movs	r6, #1
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    f06c:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    f06e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f072:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    f076:	4d12      	ldr	r5, [pc, #72]	; (f0c0 <z_clock_driver_init+0x68>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    f078:	4631      	mov	r1, r6
    f07a:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    f07e:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    f082:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f086:	4b0f      	ldr	r3, [pc, #60]	; (f0c4 <z_clock_driver_init+0x6c>)
    f088:	2015      	movs	r0, #21
    f08a:	601c      	str	r4, [r3, #0]
    f08c:	4b0e      	ldr	r3, [pc, #56]	; (f0c8 <z_clock_driver_init+0x70>)
    f08e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    f092:	4622      	mov	r2, r4
    f094:	f000 f94c 	bl	f330 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    f098:	2015      	movs	r0, #21
    f09a:	f000 f939 	bl	f310 <arch_irq_enable>

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    f09e:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    f0a0:	4b0a      	ldr	r3, [pc, #40]	; (f0cc <z_clock_driver_init+0x74>)
    f0a2:	601e      	str	r6, [r3, #0]
    f0a4:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
    f0a6:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
    f0aa:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    f0ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    f0b0:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
    f0b4:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    f0b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f0ba:	e7fb      	b.n	f0b4 <z_clock_driver_init+0x5c>
    f0bc:	0001fef2 	.word	0x0001fef2
    f0c0:	40015000 	.word	0x40015000
    f0c4:	40015140 	.word	0x40015140
    f0c8:	e000e100 	.word	0xe000e100
    f0cc:	40015008 	.word	0x40015008

0000f0d0 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    f0d0:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    f0d2:	4c25      	ldr	r4, [pc, #148]	; (f168 <z_clock_set_timeout+0x98>)
    f0d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    f0d8:	bf08      	it	eq
    f0da:	4620      	moveq	r0, r4
	__asm__ volatile(
    f0dc:	f04f 0320 	mov.w	r3, #32
    f0e0:	f3ef 8511 	mrs	r5, BASEPRI
    f0e4:	f383 8811 	msr	BASEPRI, r3
    f0e8:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    f0ec:	4b1f      	ldr	r3, [pc, #124]	; (f16c <z_clock_set_timeout+0x9c>)
    f0ee:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
    f0f2:	4b1f      	ldr	r3, [pc, #124]	; (f170 <z_clock_set_timeout+0xa0>)
    f0f4:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
    f0f6:	1aca      	subs	r2, r1, r3
    f0f8:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    f0fc:	0212      	lsls	r2, r2, #8
    f0fe:	d41a      	bmi.n	f136 <z_clock_set_timeout+0x66>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    f100:	1e42      	subs	r2, r0, #1
    f102:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    f106:	42a2      	cmp	r2, r4
    f108:	bfa8      	it	ge
    f10a:	4622      	movge	r2, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    f10c:	1c70      	adds	r0, r6, #1
    f10e:	4410      	add	r0, r2
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    f110:	42a0      	cmp	r0, r4
    f112:	bf94      	ite	ls
    f114:	1818      	addls	r0, r3, r0
    f116:	1918      	addhi	r0, r3, r4
	return (a - b) & COUNTER_MAX;
    f118:	1a41      	subs	r1, r0, r1
    f11a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    f11e:	4a13      	ldr	r2, [pc, #76]	; (f16c <z_clock_set_timeout+0x9c>)
    f120:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    f124:	2902      	cmp	r1, #2
    p_reg->CC[ch] = cc_val;
    f126:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    f12a:	d906      	bls.n	f13a <z_clock_set_timeout+0x6a>
	__asm__ volatile(
    f12c:	f385 8811 	msr	BASEPRI, r5
    f130:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    f134:	bd70      	pop	{r4, r5, r6, pc}
		ticks = 0;
    f136:	2200      	movs	r2, #0
    f138:	e7e8      	b.n	f10c <z_clock_set_timeout+0x3c>
     return p_reg->COUNTER;
    f13a:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    f13e:	490d      	ldr	r1, [pc, #52]	; (f174 <z_clock_set_timeout+0xa4>)
	return (a - b) & COUNTER_MAX;
    f140:	1ac3      	subs	r3, r0, r3
    f142:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    f146:	1e5c      	subs	r4, r3, #1
    f148:	428c      	cmp	r4, r1
    f14a:	d905      	bls.n	f158 <z_clock_set_timeout+0x88>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f14c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    f150:	4b09      	ldr	r3, [pc, #36]	; (f178 <z_clock_set_timeout+0xa8>)
    f152:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    f156:	e7e9      	b.n	f12c <z_clock_set_timeout+0x5c>
		} else if (dt == 1) {
    f158:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    f15a:	bf02      	ittt	eq
    f15c:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    f15e:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    f162:	f8c2 0540 	streq.w	r0, [r2, #1344]	; 0x540
    f166:	e7e1      	b.n	f12c <z_clock_set_timeout+0x5c>
    f168:	00fffffe 	.word	0x00fffffe
    f16c:	40015000 	.word	0x40015000
    f170:	2002033c 	.word	0x2002033c
    f174:	007ffffe 	.word	0x007ffffe
    f178:	e000e100 	.word	0xe000e100

0000f17c <z_clock_elapsed>:
	__asm__ volatile(
    f17c:	f04f 0220 	mov.w	r2, #32
    f180:	f3ef 8311 	mrs	r3, BASEPRI
    f184:	f382 8811 	msr	BASEPRI, r2
    f188:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    f18c:	4a06      	ldr	r2, [pc, #24]	; (f1a8 <z_clock_elapsed+0x2c>)
    f18e:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    f192:	4a06      	ldr	r2, [pc, #24]	; (f1ac <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    f194:	6812      	ldr	r2, [r2, #0]
    f196:	1a80      	subs	r0, r0, r2
    f198:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    f19c:	f383 8811 	msr	BASEPRI, r3
    f1a0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    f1a4:	4770      	bx	lr
    f1a6:	bf00      	nop
    f1a8:	40015000 	.word	0x40015000
    f1ac:	2002033c 	.word	0x2002033c

0000f1b0 <z_timer_cycle_get_32>:
	__asm__ volatile(
    f1b0:	f04f 0320 	mov.w	r3, #32
    f1b4:	f3ef 8211 	mrs	r2, BASEPRI
    f1b8:	f383 8811 	msr	BASEPRI, r3
    f1bc:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    f1c0:	4906      	ldr	r1, [pc, #24]	; (f1dc <z_timer_cycle_get_32+0x2c>)
    f1c2:	4b07      	ldr	r3, [pc, #28]	; (f1e0 <z_timer_cycle_get_32+0x30>)
    f1c4:	6808      	ldr	r0, [r1, #0]
    f1c6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    f1ca:	f382 8811 	msr	BASEPRI, r2
    f1ce:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    f1d2:	1a1b      	subs	r3, r3, r0
    f1d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    f1d8:	4418      	add	r0, r3
    f1da:	4770      	bx	lr
    f1dc:	2002033c 	.word	0x2002033c
    f1e0:	40015000 	.word	0x40015000

0000f1e4 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    f1e4:	4807      	ldr	r0, [pc, #28]	; (f204 <_EXIT_EXC+0xe>)

    ldr r1, [r0, #_kernel_offset_to_current]
    f1e6:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    f1e8:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    f1ea:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    f1ec:	d003      	beq.n	f1f6 <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    f1ee:	4906      	ldr	r1, [pc, #24]	; (f208 <_EXIT_EXC+0x12>)
    ldr r2, =_SCS_ICSR_PENDSV
    f1f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    f1f4:	600a      	str	r2, [r1, #0]

0000f1f6 <_EXIT_EXC>:
_EXIT_EXC:
#endif /* CONFIG_PREEMPT_ENABLED */

#ifdef CONFIG_STACK_SENTINEL
#if defined(CONFIG_CPU_CORTEX_M)
    push {r0, lr}
    f1f6:	b501      	push	{r0, lr}
    bl z_check_stack_sentinel
    f1f8:	f00c fb08 	bl	1b80c <z_check_stack_sentinel>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0, r1}
    mov lr, r1
#else
    pop {r0, lr}
    f1fc:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    f200:	4770      	bx	lr
    f202:	0000      	.short	0x0000
    ldr r0, =_kernel
    f204:	20024d00 	.word	0x20024d00
    ldr r1, =_SCS_ICSR
    f208:	e000ed04 	.word	0xe000ed04

0000f20c <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    f20c:	4a09      	ldr	r2, [pc, #36]	; (f234 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    f20e:	490a      	ldr	r1, [pc, #40]	; (f238 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    f210:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    f212:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    f214:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    f216:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    f218:	4908      	ldr	r1, [pc, #32]	; (f23c <arch_swap+0x30>)
    f21a:	684b      	ldr	r3, [r1, #4]
    f21c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    f220:	604b      	str	r3, [r1, #4]
    f222:	2300      	movs	r3, #0
    f224:	f383 8811 	msr	BASEPRI, r3
    f228:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    f22c:	6893      	ldr	r3, [r2, #8]
}
    f22e:	6e98      	ldr	r0, [r3, #104]	; 0x68
    f230:	4770      	bx	lr
    f232:	bf00      	nop
    f234:	20024d00 	.word	0x20024d00
    f238:	0001f378 	.word	0x0001f378
    f23c:	e000ed00 	.word	0xe000ed00

0000f240 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    f240:	4929      	ldr	r1, [pc, #164]	; (f2e8 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    f242:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    f244:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    f248:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    f24a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    f24e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
    f252:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    f256:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
    f25a:	d004      	beq.n	f266 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
    f25c:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
    f260:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
    f264:	e007      	b.n	f276 <out_fp_endif>

0000f266 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
    f266:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
    f26a:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
    f26e:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
    f272:	f050 0004 	orrs.w	r0, r0, #4

0000f276 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
    f276:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    f27a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    f27c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    f280:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    f284:	4f19      	ldr	r7, [pc, #100]	; (f2ec <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    f286:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    f28a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    f28c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    f28e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    f290:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    f292:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    f294:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    f296:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
    f29a:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
    f29e:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
    f2a2:	d105      	bne.n	f2b0 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    f2a4:	2300      	movs	r3, #0
    vmsr fpscr, r3
    f2a6:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    f2aa:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
    f2ae:	e005      	b.n	f2bc <in_fp_endif>

0000f2b0 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
    f2b0:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
    f2b4:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
    f2b8:	ec90 8a10 	vldmia	r0, {s16-s31}

0000f2bc <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    f2bc:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
    f2c0:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    f2c4:	f383 8814 	msr	CONTROL, r3
    isb
    f2c8:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    f2cc:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    f2ce:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    f2d0:	f00d fd12 	bl	1ccf8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    f2d4:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    f2d8:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    f2dc:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    f2e0:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    f2e4:	4770      	bx	lr
    f2e6:	0000      	.short	0x0000
    ldr r1, =_kernel
    f2e8:	20024d00 	.word	0x20024d00
    ldr v4, =_SCS_ICSR
    f2ec:	e000ed04 	.word	0xe000ed04

0000f2f0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    f2f0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    f2f4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    f2f6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    f2fa:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    f2fe:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    f300:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    f304:	2902      	cmp	r1, #2
    beq _oops
    f306:	d0ff      	beq.n	f308 <_oops>

0000f308 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    f308:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    f30a:	f00d fcea 	bl	1cce2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    f30e:	bd01      	pop	{r0, pc}

0000f310 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    f310:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    f312:	2b00      	cmp	r3, #0
    f314:	db08      	blt.n	f328 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f316:	2201      	movs	r2, #1
    f318:	f000 001f 	and.w	r0, r0, #31
    f31c:	fa02 f000 	lsl.w	r0, r2, r0
    f320:	4a02      	ldr	r2, [pc, #8]	; (f32c <arch_irq_enable+0x1c>)
    f322:	095b      	lsrs	r3, r3, #5
    f324:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    f328:	4770      	bx	lr
    f32a:	bf00      	nop
    f32c:	e000e100 	.word	0xe000e100

0000f330 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    f330:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    f332:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    f334:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f338:	bfa8      	it	ge
    f33a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    f33e:	ea4f 1141 	mov.w	r1, r1, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f342:	bfb8      	it	lt
    f344:	4b05      	ldrlt	r3, [pc, #20]	; (f35c <z_arm_irq_priority_set+0x2c>)
    f346:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f348:	bfab      	itete	ge
    f34a:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f34e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f352:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f356:	5419      	strblt	r1, [r3, r0]
}
    f358:	4770      	bx	lr
    f35a:	bf00      	nop
    f35c:	e000ed14 	.word	0xe000ed14

0000f360 <_arch_isr_direct_pm>:
	z_arm_reserved();
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    f360:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    f362:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    f364:	4b04      	ldr	r3, [pc, #16]	; (f378 <_arch_isr_direct_pm+0x18>)
    f366:	6a18      	ldr	r0, [r3, #32]
    f368:	b118      	cbz	r0, f372 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    f36a:	2200      	movs	r2, #0
    f36c:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    f36e:	f00e ffc6 	bl	1e2fe <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    f372:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    f374:	bd08      	pop	{r3, pc}
    f376:	bf00      	nop
    f378:	20024d00 	.word	0x20024d00

0000f37c <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
    f37c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f37e:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
    f380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
    f382:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    f384:	9300      	str	r3, [sp, #0]
    f386:	9b09      	ldr	r3, [sp, #36]	; 0x24
	stackEnd = pStackMem + stackSize;
    f388:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    f38a:	f00f f9da 	bl	1e742 <z_new_thread_init>
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    f38e:	4a0c      	ldr	r2, [pc, #48]	; (f3c0 <arch_new_thread+0x44>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    f390:	f1a4 0320 	sub.w	r3, r4, #32
    f394:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    f398:	f022 0201 	bic.w	r2, r2, #1
    f39c:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    f39e:	9a06      	ldr	r2, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
    f3a0:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    f3a2:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    f3a4:	9a07      	ldr	r2, [sp, #28]
    f3a6:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    f3a8:	9a08      	ldr	r2, [sp, #32]
    f3aa:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
    f3ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    f3b0:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    f3b2:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    f3b4:	2300      	movs	r3, #0
    f3b6:	666b      	str	r3, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
    f3b8:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    f3bc:	b002      	add	sp, #8
    f3be:	bd70      	pop	{r4, r5, r6, pc}
    f3c0:	0001c20f 	.word	0x0001c20f

0000f3c4 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    f3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f3c8:	461f      	mov	r7, r3
    f3ca:	4606      	mov	r6, r0
    f3cc:	460c      	mov	r4, r1
    f3ce:	4690      	mov	r8, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    f3d0:	2300      	movs	r3, #0
    f3d2:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    f3d6:	f3ef 8514 	mrs	r5, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    f3da:	f025 0504 	bic.w	r5, r5, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    f3de:	f385 8814 	msr	CONTROL, r5
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    f3e2:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    f3e6:	f000 fc1b 	bl	fc20 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    f3ea:	4b0a      	ldr	r3, [pc, #40]	; (f414 <arch_switch_to_main_thread+0x50>)
	start_of_main_stack =
    f3ec:	4444      	add	r4, r8
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    f3ee:	4630      	mov	r0, r6
	_current = main_thread;
    f3f0:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    f3f2:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    f3f6:	f00d fc7f 	bl	1ccf8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    f3fa:	4638      	mov	r0, r7
    f3fc:	f384 8809 	msr	PSP, r4
    f400:	2100      	movs	r1, #0
    f402:	b663      	cpsie	if
    f404:	f381 8811 	msr	BASEPRI, r1
    f408:	f3bf 8f6f 	isb	sy
    f40c:	2200      	movs	r2, #0
    f40e:	2300      	movs	r3, #0
    f410:	f00c fefd 	bl	1c20e <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    f414:	20024d00 	.word	0x20024d00

0000f418 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    f418:	4901      	ldr	r1, [pc, #4]	; (f420 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    f41a:	2210      	movs	r2, #16
	str r2, [r1]
    f41c:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    f41e:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    f420:	e000ed10 	.word	0xe000ed10

0000f424 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    f424:	4040      	eors	r0, r0
	msr BASEPRI, r0
    f426:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    f42a:	bf30      	wfi

	bx lr
    f42c:	4770      	bx	lr
    f42e:	bf00      	nop

0000f430 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
    f430:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    f434:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    f438:	4672      	mov	r2, lr

	push {r0, lr}
    f43a:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
    f43c:	f000 fab0 	bl	f9a0 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    f440:	bd01      	pop	{r0, pc}
    f442:	bf00      	nop

0000f444 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    f444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f448:	4681      	mov	r9, r0
    f44a:	b08a      	sub	sp, #40	; 0x28

	if (esf != NULL) {
    f44c:	460c      	mov	r4, r1
    f44e:	2900      	cmp	r1, #0
    f450:	d07a      	beq.n	f548 <z_arm_fatal_error+0x104>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    f452:	2201      	movs	r2, #1
    f454:	f04f 0300 	mov.w	r3, #0
    f458:	4d3f      	ldr	r5, [pc, #252]	; (f558 <z_arm_fatal_error+0x114>)
    f45a:	f362 0307 	bfi	r3, r2, #0, #8
    f45e:	4a3f      	ldr	r2, [pc, #252]	; (f55c <z_arm_fatal_error+0x118>)
    f460:	483f      	ldr	r0, [pc, #252]	; (f560 <z_arm_fatal_error+0x11c>)
    f462:	1aad      	subs	r5, r5, r2
    f464:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    f468:	f365 138f 	bfi	r3, r5, #6, #10
    f46c:	f8ad 3000 	strh.w	r3, [sp]
    f470:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    f474:	6809      	ldr	r1, [r1, #0]
    f476:	f00d f8db 	bl	1c630 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    f47a:	2201      	movs	r2, #1
    f47c:	f04f 0300 	mov.w	r3, #0
    f480:	f362 0307 	bfi	r3, r2, #0, #8
    f484:	f365 138f 	bfi	r3, r5, #6, #10
    f488:	f8ad 3000 	strh.w	r3, [sp]
    f48c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    f490:	68e1      	ldr	r1, [r4, #12]
    f492:	4834      	ldr	r0, [pc, #208]	; (f564 <z_arm_fatal_error+0x120>)
    f494:	f00d f8cc 	bl	1c630 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    f498:	2301      	movs	r3, #1
    f49a:	f04f 0200 	mov.w	r2, #0
    f49e:	f363 0207 	bfi	r2, r3, #0, #8
    f4a2:	f365 128f 	bfi	r2, r5, #6, #10
    f4a6:	69e1      	ldr	r1, [r4, #28]
    f4a8:	482f      	ldr	r0, [pc, #188]	; (f568 <z_arm_fatal_error+0x124>)
    f4aa:	f00d f895 	bl	1c5d8 <log_1>
	for (int i = 0; i < 16; i += 4) {
    f4ae:	4627      	mov	r7, r4
    f4b0:	2600      	movs	r6, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    f4b2:	f8df a0c0 	ldr.w	sl, [pc, #192]	; f574 <z_arm_fatal_error+0x130>
    f4b6:	edd7 7a08 	vldr	s15, [r7, #32]
    f4ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    f4be:	edcd 7a03 	vstr	s15, [sp, #12]
    f4c2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
    f4c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    f4ca:	edcd 7a05 	vstr	s15, [sp, #20]
    f4ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    f4d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    f4d6:	edcd 7a07 	vstr	s15, [sp, #28]
    f4da:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    f4de:	2208      	movs	r2, #8
    f4e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    f4e4:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    f4e8:	f043 0301 	orr.w	r3, r3, #1
    f4ec:	f363 0807 	bfi	r8, r3, #0, #8
    f4f0:	1c73      	adds	r3, r6, #1
    f4f2:	9304      	str	r3, [sp, #16]
    f4f4:	1cb3      	adds	r3, r6, #2
    f4f6:	9306      	str	r3, [sp, #24]
    f4f8:	f365 188f 	bfi	r8, r5, #6, #10
    f4fc:	1cf3      	adds	r3, r6, #3
    f4fe:	9602      	str	r6, [sp, #8]
    f500:	9308      	str	r3, [sp, #32]
    f502:	eb0d 0102 	add.w	r1, sp, r2
    f506:	4643      	mov	r3, r8
    f508:	4650      	mov	r0, sl
	for (int i = 0; i < 16; i += 4) {
    f50a:	3604      	adds	r6, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    f50c:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
    f510:	f00d f8a9 	bl	1c666 <log_n>
	for (int i = 0; i < 16; i += 4) {
    f514:	2e10      	cmp	r6, #16
    f516:	f107 0710 	add.w	r7, r7, #16
    f51a:	d1cc      	bne.n	f4b6 <z_arm_fatal_error+0x72>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
    f51c:	2301      	movs	r3, #1
    f51e:	f04f 0200 	mov.w	r2, #0
    f522:	f363 0207 	bfi	r2, r3, #0, #8
    f526:	f365 128f 	bfi	r2, r5, #6, #10
    f52a:	6e21      	ldr	r1, [r4, #96]	; 0x60
    f52c:	480f      	ldr	r0, [pc, #60]	; (f56c <z_arm_fatal_error+0x128>)
    f52e:	f00d f853 	bl	1c5d8 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    f532:	f04f 0200 	mov.w	r2, #0
    f536:	2301      	movs	r3, #1
    f538:	f363 0207 	bfi	r2, r3, #0, #8
    f53c:	f365 128f 	bfi	r2, r5, #6, #10
    f540:	69a1      	ldr	r1, [r4, #24]
    f542:	480b      	ldr	r0, [pc, #44]	; (f570 <z_arm_fatal_error+0x12c>)
    f544:	f00d f848 	bl	1c5d8 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    f548:	4621      	mov	r1, r4
    f54a:	4648      	mov	r0, r9
    f54c:	f00b fa4e 	bl	1a9ec <z_fatal_error>
}
    f550:	b00a      	add	sp, #40	; 0x28
    f552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f556:	bf00      	nop
    f558:	0001ee24 	.word	0x0001ee24
    f55c:	0001edc4 	.word	0x0001edc4
    f560:	0001ff1e 	.word	0x0001ff1e
    f564:	0001ff4d 	.word	0x0001ff4d
    f568:	0001ff7c 	.word	0x0001ff7c
    f56c:	0001ffce 	.word	0x0001ffce
    f570:	0001ffdd 	.word	0x0001ffdd
    f574:	0001ff8b 	.word	0x0001ff8b

0000f578 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    f578:	bf30      	wfi
    b z_SysNmiOnReset
    f57a:	f7ff bffd 	b.w	f578 <z_SysNmiOnReset>
    f57e:	bf00      	nop

0000f580 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    f580:	4a11      	ldr	r2, [pc, #68]	; (f5c8 <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    f582:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    f584:	4b11      	ldr	r3, [pc, #68]	; (f5cc <z_arm_prep_c+0x4c>)
    f586:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    f58a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    f58c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    f590:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    f594:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    f598:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    f59c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    f5a0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    f5a4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    f5a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    f5ac:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    f5b0:	2300      	movs	r3, #0
    f5b2:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    f5b6:	f00b fa99 	bl	1aaec <z_bss_zero>
	z_data_copy();
    f5ba:	f00b faa1 	bl	1ab00 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    f5be:	f000 fafb 	bl	fbb8 <z_arm_int_lib_init>
	z_cstart();
    f5c2:	f00b fad5 	bl	1ab70 <z_cstart>
    f5c6:	bf00      	nop
    f5c8:	0000c000 	.word	0x0000c000
    f5cc:	e000ed00 	.word	0xe000ed00

0000f5d0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    f5d0:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    f5d2:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    f5d4:	4a0b      	ldr	r2, [pc, #44]	; (f604 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    f5d6:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    f5d8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    f5da:	bf1e      	ittt	ne
	movne	r1, #0
    f5dc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    f5de:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    f5e0:	f00e fe8d 	blne	1e2fe <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    f5e4:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    f5e6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    f5ea:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    f5ee:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    f5f2:	4905      	ldr	r1, [pc, #20]	; (f608 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    f5f4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    f5f6:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    f5f8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    f5fa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    f5fe:	4903      	ldr	r1, [pc, #12]	; (f60c <_isr_wrapper+0x3c>)
	bx r1
    f600:	4708      	bx	r1
    f602:	0000      	.short	0x0000
	ldr r2, =_kernel
    f604:	20024d00 	.word	0x20024d00
	ldr r1, =_sw_isr_table
    f608:	0001ead8 	.word	0x0001ead8
	ldr r1, =z_arm_int_exit
    f60c:	0000f1e5 	.word	0x0000f1e5

0000f610 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    f610:	f00c ffb0 	bl	1c574 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    f614:	2020      	movs	r0, #32
    msr BASEPRI, r0
    f616:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    f61a:	4808      	ldr	r0, [pc, #32]	; (f63c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    f61c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    f620:	1840      	adds	r0, r0, r1
    msr PSP, r0
    f622:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    f626:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    f62a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    f62c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    f62e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    f632:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    f636:	f7ff ffa3 	bl	f580 <z_arm_prep_c>
    f63a:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    f63c:	200281e0 	.word	0x200281e0

0000f640 <usage_fault.isra.2>:
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    f640:	2301      	movs	r3, #1
    f642:	f04f 0100 	mov.w	r1, #0
static u32_t usage_fault(const z_arch_esf_t *esf)
    f646:	b510      	push	{r4, lr}
	PR_FAULT_INFO("***** USAGE FAULT *****");
    f648:	f363 0107 	bfi	r1, r3, #0, #8
    f64c:	4c3a      	ldr	r4, [pc, #232]	; (f738 <usage_fault.isra.2+0xf8>)
    f64e:	4b3b      	ldr	r3, [pc, #236]	; (f73c <usage_fault.isra.2+0xfc>)
    f650:	483b      	ldr	r0, [pc, #236]	; (f740 <usage_fault.isra.2+0x100>)
    f652:	1ae4      	subs	r4, r4, r3
    f654:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    f658:	f364 118f 	bfi	r1, r4, #6, #10
    f65c:	f00c ffaf 	bl	1c5be <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    f660:	4b38      	ldr	r3, [pc, #224]	; (f744 <usage_fault.isra.2+0x104>)
    f662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f664:	0199      	lsls	r1, r3, #6
    f666:	d509      	bpl.n	f67c <usage_fault.isra.2+0x3c>
		PR_FAULT_INFO("  Division by zero");
    f668:	f04f 0100 	mov.w	r1, #0
    f66c:	2301      	movs	r3, #1
    f66e:	f363 0107 	bfi	r1, r3, #0, #8
    f672:	f364 118f 	bfi	r1, r4, #6, #10
    f676:	4834      	ldr	r0, [pc, #208]	; (f748 <usage_fault.isra.2+0x108>)
    f678:	f00c ffa1 	bl	1c5be <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    f67c:	4b31      	ldr	r3, [pc, #196]	; (f744 <usage_fault.isra.2+0x104>)
    f67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f680:	01da      	lsls	r2, r3, #7
    f682:	d509      	bpl.n	f698 <usage_fault.isra.2+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
    f684:	f04f 0100 	mov.w	r1, #0
    f688:	2301      	movs	r3, #1
    f68a:	f363 0107 	bfi	r1, r3, #0, #8
    f68e:	f364 118f 	bfi	r1, r4, #6, #10
    f692:	482e      	ldr	r0, [pc, #184]	; (f74c <usage_fault.isra.2+0x10c>)
    f694:	f00c ff93 	bl	1c5be <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    f698:	4b2a      	ldr	r3, [pc, #168]	; (f744 <usage_fault.isra.2+0x104>)
    f69a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f69c:	02db      	lsls	r3, r3, #11
    f69e:	d509      	bpl.n	f6b4 <usage_fault.isra.2+0x74>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    f6a0:	f04f 0100 	mov.w	r1, #0
    f6a4:	2301      	movs	r3, #1
    f6a6:	f363 0107 	bfi	r1, r3, #0, #8
    f6aa:	f364 118f 	bfi	r1, r4, #6, #10
    f6ae:	4828      	ldr	r0, [pc, #160]	; (f750 <usage_fault.isra.2+0x110>)
    f6b0:	f00c ff85 	bl	1c5be <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    f6b4:	4b23      	ldr	r3, [pc, #140]	; (f744 <usage_fault.isra.2+0x104>)
    f6b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f6b8:	0318      	lsls	r0, r3, #12
    f6ba:	d509      	bpl.n	f6d0 <usage_fault.isra.2+0x90>
		PR_FAULT_INFO("  No coprocessor instructions");
    f6bc:	f04f 0100 	mov.w	r1, #0
    f6c0:	2301      	movs	r3, #1
    f6c2:	f363 0107 	bfi	r1, r3, #0, #8
    f6c6:	f364 118f 	bfi	r1, r4, #6, #10
    f6ca:	4822      	ldr	r0, [pc, #136]	; (f754 <usage_fault.isra.2+0x114>)
    f6cc:	f00c ff77 	bl	1c5be <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    f6d0:	4b1c      	ldr	r3, [pc, #112]	; (f744 <usage_fault.isra.2+0x104>)
    f6d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f6d4:	0359      	lsls	r1, r3, #13
    f6d6:	d509      	bpl.n	f6ec <usage_fault.isra.2+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    f6d8:	f04f 0100 	mov.w	r1, #0
    f6dc:	2301      	movs	r3, #1
    f6de:	f363 0107 	bfi	r1, r3, #0, #8
    f6e2:	f364 118f 	bfi	r1, r4, #6, #10
    f6e6:	481c      	ldr	r0, [pc, #112]	; (f758 <usage_fault.isra.2+0x118>)
    f6e8:	f00c ff69 	bl	1c5be <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    f6ec:	4b15      	ldr	r3, [pc, #84]	; (f744 <usage_fault.isra.2+0x104>)
    f6ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f6f0:	039a      	lsls	r2, r3, #14
    f6f2:	d509      	bpl.n	f708 <usage_fault.isra.2+0xc8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    f6f4:	f04f 0100 	mov.w	r1, #0
    f6f8:	2301      	movs	r3, #1
    f6fa:	f363 0107 	bfi	r1, r3, #0, #8
    f6fe:	f364 118f 	bfi	r1, r4, #6, #10
    f702:	4816      	ldr	r0, [pc, #88]	; (f75c <usage_fault.isra.2+0x11c>)
    f704:	f00c ff5b 	bl	1c5be <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    f708:	4b0e      	ldr	r3, [pc, #56]	; (f744 <usage_fault.isra.2+0x104>)
    f70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f70c:	03db      	lsls	r3, r3, #15
    f70e:	d509      	bpl.n	f724 <usage_fault.isra.2+0xe4>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    f710:	f04f 0100 	mov.w	r1, #0
    f714:	2301      	movs	r3, #1
    f716:	f363 0107 	bfi	r1, r3, #0, #8
    f71a:	f364 118f 	bfi	r1, r4, #6, #10
    f71e:	4810      	ldr	r0, [pc, #64]	; (f760 <usage_fault.isra.2+0x120>)
    f720:	f00c ff4d 	bl	1c5be <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    f724:	4a07      	ldr	r2, [pc, #28]	; (f744 <usage_fault.isra.2+0x104>)

	return reason;
}
    f726:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    f728:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f72a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    f72e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    f732:	6293      	str	r3, [r2, #40]	; 0x28
}
    f734:	bd10      	pop	{r4, pc}
    f736:	bf00      	nop
    f738:	0001ee24 	.word	0x0001ee24
    f73c:	0001edc4 	.word	0x0001edc4
    f740:	0002016b 	.word	0x0002016b
    f744:	e000ed00 	.word	0xe000ed00
    f748:	00020183 	.word	0x00020183
    f74c:	00020196 	.word	0x00020196
    f750:	000201b0 	.word	0x000201b0
    f754:	000201da 	.word	0x000201da
    f758:	000201f8 	.word	0x000201f8
    f75c:	0002021d 	.word	0x0002021d
    f760:	00020237 	.word	0x00020237

0000f764 <mem_manage_fault.isra.4>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    f764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
    f766:	2301      	movs	r3, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    f768:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    f76a:	f04f 0100 	mov.w	r1, #0
    f76e:	4c37      	ldr	r4, [pc, #220]	; (f84c <mem_manage_fault.isra.4+0xe8>)
    f770:	f363 0107 	bfi	r1, r3, #0, #8
    f774:	4b36      	ldr	r3, [pc, #216]	; (f850 <mem_manage_fault.isra.4+0xec>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    f776:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    f778:	1ae4      	subs	r4, r4, r3
    f77a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    f77e:	f364 118f 	bfi	r1, r4, #6, #10
    f782:	4834      	ldr	r0, [pc, #208]	; (f854 <mem_manage_fault.isra.4+0xf0>)
    f784:	f00c ff1b 	bl	1c5be <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    f788:	4b33      	ldr	r3, [pc, #204]	; (f858 <mem_manage_fault.isra.4+0xf4>)
    f78a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f78c:	06d9      	lsls	r1, r3, #27
    f78e:	d509      	bpl.n	f7a4 <mem_manage_fault.isra.4+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    f790:	f04f 0100 	mov.w	r1, #0
    f794:	2301      	movs	r3, #1
    f796:	f363 0107 	bfi	r1, r3, #0, #8
    f79a:	f364 118f 	bfi	r1, r4, #6, #10
    f79e:	482f      	ldr	r0, [pc, #188]	; (f85c <mem_manage_fault.isra.4+0xf8>)
    f7a0:	f00c ff0d 	bl	1c5be <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    f7a4:	4b2c      	ldr	r3, [pc, #176]	; (f858 <mem_manage_fault.isra.4+0xf4>)
    f7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f7a8:	071a      	lsls	r2, r3, #28
    f7aa:	d509      	bpl.n	f7c0 <mem_manage_fault.isra.4+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    f7ac:	f04f 0100 	mov.w	r1, #0
    f7b0:	2301      	movs	r3, #1
    f7b2:	f363 0107 	bfi	r1, r3, #0, #8
    f7b6:	f364 118f 	bfi	r1, r4, #6, #10
    f7ba:	4829      	ldr	r0, [pc, #164]	; (f860 <mem_manage_fault.isra.4+0xfc>)
    f7bc:	f00c feff 	bl	1c5be <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    f7c0:	4d25      	ldr	r5, [pc, #148]	; (f858 <mem_manage_fault.isra.4+0xf4>)
    f7c2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f7c4:	079b      	lsls	r3, r3, #30
    f7c6:	d51c      	bpl.n	f802 <mem_manage_fault.isra.4+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
    f7c8:	2301      	movs	r3, #1
    f7ca:	f04f 0100 	mov.w	r1, #0
    f7ce:	f363 0107 	bfi	r1, r3, #0, #8
    f7d2:	f364 118f 	bfi	r1, r4, #6, #10
    f7d6:	4823      	ldr	r0, [pc, #140]	; (f864 <mem_manage_fault.isra.4+0x100>)
    f7d8:	f00c fef1 	bl	1c5be <log_0>
		mmfar = SCB->MMFAR;
    f7dc:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    f7de:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f7e0:	0618      	lsls	r0, r3, #24
    f7e2:	d50e      	bpl.n	f802 <mem_manage_fault.isra.4+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    f7e4:	f04f 0200 	mov.w	r2, #0
    f7e8:	2301      	movs	r3, #1
    f7ea:	f363 0207 	bfi	r2, r3, #0, #8
    f7ee:	f364 128f 	bfi	r2, r4, #6, #10
    f7f2:	481d      	ldr	r0, [pc, #116]	; (f868 <mem_manage_fault.isra.4+0x104>)
    f7f4:	f00c fef0 	bl	1c5d8 <log_1>
			if (from_hard_fault) {
    f7f8:	b11f      	cbz	r7, f802 <mem_manage_fault.isra.4+0x9e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    f7fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f7fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    f800:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    f802:	4b15      	ldr	r3, [pc, #84]	; (f858 <mem_manage_fault.isra.4+0xf4>)
    f804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f806:	07da      	lsls	r2, r3, #31
    f808:	d509      	bpl.n	f81e <mem_manage_fault.isra.4+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
    f80a:	f04f 0100 	mov.w	r1, #0
    f80e:	2301      	movs	r3, #1
    f810:	f363 0107 	bfi	r1, r3, #0, #8
    f814:	f364 118f 	bfi	r1, r4, #6, #10
    f818:	4814      	ldr	r0, [pc, #80]	; (f86c <mem_manage_fault.isra.4+0x108>)
    f81a:	f00c fed0 	bl	1c5be <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    f81e:	4b0e      	ldr	r3, [pc, #56]	; (f858 <mem_manage_fault.isra.4+0xf4>)
    f820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f822:	069b      	lsls	r3, r3, #26
    f824:	d509      	bpl.n	f83a <mem_manage_fault.isra.4+0xd6>
		PR_FAULT_INFO(
    f826:	f04f 0100 	mov.w	r1, #0
    f82a:	2301      	movs	r3, #1
    f82c:	f363 0107 	bfi	r1, r3, #0, #8
    f830:	f364 118f 	bfi	r1, r4, #6, #10
    f834:	480e      	ldr	r0, [pc, #56]	; (f870 <mem_manage_fault.isra.4+0x10c>)
    f836:	f00c fec2 	bl	1c5be <log_0>
	*recoverable = memory_fault_recoverable(esf);
    f83a:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    f83c:	4b06      	ldr	r3, [pc, #24]	; (f858 <mem_manage_fault.isra.4+0xf4>)
    f83e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    f840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f842:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    f846:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    f848:	7030      	strb	r0, [r6, #0]
}
    f84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f84c:	0001ee24 	.word	0x0001ee24
    f850:	0001edc4 	.word	0x0001edc4
    f854:	00020093 	.word	0x00020093
    f858:	e000ed00 	.word	0xe000ed00
    f85c:	000200a9 	.word	0x000200a9
    f860:	000200dc 	.word	0x000200dc
    f864:	000200ef 	.word	0x000200ef
    f868:	00020107 	.word	0x00020107
    f86c:	0002011d 	.word	0x0002011d
    f870:	0002013c 	.word	0x0002013c

0000f874 <bus_fault.isra.5>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    f874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
    f876:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    f878:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    f87a:	f04f 0100 	mov.w	r1, #0
    f87e:	4c3d      	ldr	r4, [pc, #244]	; (f974 <bus_fault.isra.5+0x100>)
    f880:	f363 0107 	bfi	r1, r3, #0, #8
    f884:	4b3c      	ldr	r3, [pc, #240]	; (f978 <bus_fault.isra.5+0x104>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    f886:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    f888:	1ae4      	subs	r4, r4, r3
    f88a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    f88e:	f364 118f 	bfi	r1, r4, #6, #10
    f892:	483a      	ldr	r0, [pc, #232]	; (f97c <bus_fault.isra.5+0x108>)
    f894:	f00c fe93 	bl	1c5be <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    f898:	4b39      	ldr	r3, [pc, #228]	; (f980 <bus_fault.isra.5+0x10c>)
    f89a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f89c:	04d9      	lsls	r1, r3, #19
    f89e:	d509      	bpl.n	f8b4 <bus_fault.isra.5+0x40>
		PR_FAULT_INFO("  Stacking error");
    f8a0:	f04f 0100 	mov.w	r1, #0
    f8a4:	2301      	movs	r3, #1
    f8a6:	f363 0107 	bfi	r1, r3, #0, #8
    f8aa:	f364 118f 	bfi	r1, r4, #6, #10
    f8ae:	4835      	ldr	r0, [pc, #212]	; (f984 <bus_fault.isra.5+0x110>)
    f8b0:	f00c fe85 	bl	1c5be <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    f8b4:	4b32      	ldr	r3, [pc, #200]	; (f980 <bus_fault.isra.5+0x10c>)
    f8b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f8b8:	051a      	lsls	r2, r3, #20
    f8ba:	d509      	bpl.n	f8d0 <bus_fault.isra.5+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    f8bc:	f04f 0100 	mov.w	r1, #0
    f8c0:	2301      	movs	r3, #1
    f8c2:	f363 0107 	bfi	r1, r3, #0, #8
    f8c6:	f364 118f 	bfi	r1, r4, #6, #10
    f8ca:	482f      	ldr	r0, [pc, #188]	; (f988 <bus_fault.isra.5+0x114>)
    f8cc:	f00c fe77 	bl	1c5be <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    f8d0:	4d2b      	ldr	r5, [pc, #172]	; (f980 <bus_fault.isra.5+0x10c>)
    f8d2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f8d4:	059b      	lsls	r3, r3, #22
    f8d6:	d51c      	bpl.n	f912 <bus_fault.isra.5+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
    f8d8:	2301      	movs	r3, #1
    f8da:	f04f 0100 	mov.w	r1, #0
    f8de:	f363 0107 	bfi	r1, r3, #0, #8
    f8e2:	f364 118f 	bfi	r1, r4, #6, #10
    f8e6:	4829      	ldr	r0, [pc, #164]	; (f98c <bus_fault.isra.5+0x118>)
    f8e8:	f00c fe69 	bl	1c5be <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    f8ec:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    f8ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f8f0:	0418      	lsls	r0, r3, #16
    f8f2:	d50e      	bpl.n	f912 <bus_fault.isra.5+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    f8f4:	f04f 0200 	mov.w	r2, #0
    f8f8:	2301      	movs	r3, #1
    f8fa:	f363 0207 	bfi	r2, r3, #0, #8
    f8fe:	f364 128f 	bfi	r2, r4, #6, #10
    f902:	4823      	ldr	r0, [pc, #140]	; (f990 <bus_fault.isra.5+0x11c>)
    f904:	f00c fe68 	bl	1c5d8 <log_1>
			if (from_hard_fault) {
    f908:	b11f      	cbz	r7, f912 <bus_fault.isra.5+0x9e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    f90a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f90c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    f910:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    f912:	4b1b      	ldr	r3, [pc, #108]	; (f980 <bus_fault.isra.5+0x10c>)
    f914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f916:	0559      	lsls	r1, r3, #21
    f918:	d509      	bpl.n	f92e <bus_fault.isra.5+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
    f91a:	f04f 0100 	mov.w	r1, #0
    f91e:	2301      	movs	r3, #1
    f920:	f363 0107 	bfi	r1, r3, #0, #8
    f924:	f364 118f 	bfi	r1, r4, #6, #10
    f928:	481a      	ldr	r0, [pc, #104]	; (f994 <bus_fault.isra.5+0x120>)
    f92a:	f00c fe48 	bl	1c5be <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    f92e:	4b14      	ldr	r3, [pc, #80]	; (f980 <bus_fault.isra.5+0x10c>)
    f930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f932:	05d2      	lsls	r2, r2, #23
    f934:	d511      	bpl.n	f95a <bus_fault.isra.5+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
    f936:	f04f 0100 	mov.w	r1, #0
    f93a:	2301      	movs	r3, #1
    f93c:	4816      	ldr	r0, [pc, #88]	; (f998 <bus_fault.isra.5+0x124>)
    f93e:	f363 0107 	bfi	r1, r3, #0, #8
    f942:	f364 118f 	bfi	r1, r4, #6, #10
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    f946:	f00c fe3a 	bl	1c5be <log_0>
	*recoverable = memory_fault_recoverable(esf);
    f94a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    f94c:	4a0c      	ldr	r2, [pc, #48]	; (f980 <bus_fault.isra.5+0x10c>)
    f94e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f950:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    f954:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    f956:	7030      	strb	r0, [r6, #0]
}
    f958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    f95a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f95c:	049b      	lsls	r3, r3, #18
    f95e:	d5f4      	bpl.n	f94a <bus_fault.isra.5+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    f960:	f04f 0100 	mov.w	r1, #0
    f964:	2301      	movs	r3, #1
    f966:	f363 0107 	bfi	r1, r3, #0, #8
    f96a:	f364 118f 	bfi	r1, r4, #6, #10
    f96e:	480b      	ldr	r0, [pc, #44]	; (f99c <bus_fault.isra.5+0x128>)
    f970:	e7e9      	b.n	f946 <bus_fault.isra.5+0xd2>
    f972:	bf00      	nop
    f974:	0001ee24 	.word	0x0001ee24
    f978:	0001edc4 	.word	0x0001edc4
    f97c:	0002000b 	.word	0x0002000b
    f980:	e000ed00 	.word	0xe000ed00
    f984:	00020021 	.word	0x00020021
    f988:	000200dc 	.word	0x000200dc
    f98c:	00020032 	.word	0x00020032
    f990:	0002004b 	.word	0x0002004b
    f994:	00020060 	.word	0x00020060
    f998:	0002007b 	.word	0x0002007b
    f99c:	0002013c 	.word	0x0002013c

0000f9a0 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    f9a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    f9a4:	4b69      	ldr	r3, [pc, #420]	; (fb4c <z_arm_fault+0x1ac>)
{
    f9a6:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    f9a8:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    f9ac:	4606      	mov	r6, r0
    f9ae:	4689      	mov	r9, r1
    f9b0:	4614      	mov	r4, r2
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    f9b2:	f3c8 0708 	ubfx	r7, r8, #0, #9
    f9b6:	2500      	movs	r5, #0
    f9b8:	f385 8811 	msr	BASEPRI, r5
    f9bc:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    f9c0:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    f9c4:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    f9c8:	d128      	bne.n	fa1c <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    f9ca:	07d0      	lsls	r0, r2, #31
    f9cc:	d426      	bmi.n	fa1c <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    f9ce:	0651      	lsls	r1, r2, #25
    f9d0:	d403      	bmi.n	f9da <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    f9d2:	0722      	lsls	r2, r4, #28
    f9d4:	d412      	bmi.n	f9fc <z_arm_fault+0x5c>
			*nested_exc = true;
    f9d6:	2501      	movs	r5, #1
    f9d8:	e012      	b.n	fa00 <z_arm_fault+0x60>
		PR_FAULT_INFO("Exception occurred in Secure State");
    f9da:	2301      	movs	r3, #1
    f9dc:	f04f 0100 	mov.w	r1, #0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    f9e0:	4a5b      	ldr	r2, [pc, #364]	; (fb50 <z_arm_fault+0x1b0>)
    f9e2:	f363 0107 	bfi	r1, r3, #0, #8
    f9e6:	4b5b      	ldr	r3, [pc, #364]	; (fb54 <z_arm_fault+0x1b4>)
    f9e8:	485b      	ldr	r0, [pc, #364]	; (fb58 <z_arm_fault+0x1b8>)
    f9ea:	1a9b      	subs	r3, r3, r2
    f9ec:	08db      	lsrs	r3, r3, #3
    f9ee:	f363 118f 	bfi	r1, r3, #6, #10
    f9f2:	f00c fde4 	bl	1c5be <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    f9f6:	f014 0504 	ands.w	r5, r4, #4
    f9fa:	d001      	beq.n	fa00 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)psp;
    f9fc:	464e      	mov	r6, r9
	*nested_exc = false;
    f9fe:	2500      	movs	r5, #0
	*recoverable = false;
    fa00:	2300      	movs	r3, #0
    fa02:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    fa06:	1efb      	subs	r3, r7, #3
    fa08:	2b09      	cmp	r3, #9
    fa0a:	f200 8082 	bhi.w	fb12 <z_arm_fault+0x172>
    fa0e:	e8df f003 	tbb	[pc, r3]
    fa12:	6b07      	.short	0x6b07
    fa14:	80804e6f 	.word	0x80804e6f
    fa18:	73808080 	.word	0x73808080
		return NULL;
    fa1c:	462e      	mov	r6, r5
    fa1e:	e7ef      	b.n	fa00 <z_arm_fault+0x60>
	PR_FAULT_INFO("***** HARD FAULT *****");
    fa20:	2301      	movs	r3, #1
    fa22:	f04f 0100 	mov.w	r1, #0
	*recoverable = false;
    fa26:	f04f 0800 	mov.w	r8, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
    fa2a:	f363 0107 	bfi	r1, r3, #0, #8
    fa2e:	4f49      	ldr	r7, [pc, #292]	; (fb54 <z_arm_fault+0x1b4>)
    fa30:	4b47      	ldr	r3, [pc, #284]	; (fb50 <z_arm_fault+0x1b0>)
    fa32:	484a      	ldr	r0, [pc, #296]	; (fb5c <z_arm_fault+0x1bc>)
    fa34:	1aff      	subs	r7, r7, r3
    fa36:	f3c7 07c9 	ubfx	r7, r7, #3, #10
    fa3a:	f367 118f 	bfi	r1, r7, #6, #10
    fa3e:	f00c fdbe 	bl	1c5be <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    fa42:	4b42      	ldr	r3, [pc, #264]	; (fb4c <z_arm_fault+0x1ac>)
	*recoverable = false;
    fa44:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    fa48:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    fa4a:	f014 0402 	ands.w	r4, r4, #2
    fa4e:	d00b      	beq.n	fa68 <z_arm_fault+0xc8>
		PR_EXC("  Bus fault on vector table read");
    fa50:	f04f 0100 	mov.w	r1, #0
    fa54:	2301      	movs	r3, #1
    fa56:	4842      	ldr	r0, [pc, #264]	; (fb60 <z_arm_fault+0x1c0>)
    fa58:	f363 0107 	bfi	r1, r3, #0, #8
    fa5c:	f367 118f 	bfi	r1, r7, #6, #10
	PR_FAULT_INFO(
    fa60:	f00c fdad 	bl	1c5be <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    fa64:	2400      	movs	r4, #0
    fa66:	e025      	b.n	fab4 <z_arm_fault+0x114>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    fa68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    fa6a:	005b      	lsls	r3, r3, #1
    fa6c:	d522      	bpl.n	fab4 <z_arm_fault+0x114>
		PR_EXC("  Fault escalation (see below)");
    fa6e:	2301      	movs	r3, #1
    fa70:	f04f 0100 	mov.w	r1, #0
    fa74:	f363 0107 	bfi	r1, r3, #0, #8
    fa78:	f367 118f 	bfi	r1, r7, #6, #10
    fa7c:	4839      	ldr	r0, [pc, #228]	; (fb64 <z_arm_fault+0x1c4>)
    fa7e:	f00c fd9e 	bl	1c5be <log_0>
		if (SCB_MMFSR != 0) {
    fa82:	4b39      	ldr	r3, [pc, #228]	; (fb68 <z_arm_fault+0x1c8>)
    fa84:	781b      	ldrb	r3, [r3, #0]
    fa86:	b12b      	cbz	r3, fa94 <z_arm_fault+0xf4>
			reason = mem_manage_fault(esf, 1, recoverable);
    fa88:	2001      	movs	r0, #1
    fa8a:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    fa8e:	f7ff fe69 	bl	f764 <mem_manage_fault.isra.4>
    fa92:	e00e      	b.n	fab2 <z_arm_fault+0x112>
		} else if (SCB_BFSR != 0) {
    fa94:	4b35      	ldr	r3, [pc, #212]	; (fb6c <z_arm_fault+0x1cc>)
    fa96:	781b      	ldrb	r3, [r3, #0]
    fa98:	b12b      	cbz	r3, faa6 <z_arm_fault+0x106>
			reason = bus_fault(esf, 1, recoverable);
    fa9a:	2001      	movs	r0, #1
    fa9c:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    faa0:	f7ff fee8 	bl	f874 <bus_fault.isra.5>
    faa4:	e005      	b.n	fab2 <z_arm_fault+0x112>
		} else if (SCB_UFSR != 0) {
    faa6:	4b32      	ldr	r3, [pc, #200]	; (fb70 <z_arm_fault+0x1d0>)
    faa8:	881b      	ldrh	r3, [r3, #0]
    faaa:	b29b      	uxth	r3, r3
    faac:	b113      	cbz	r3, fab4 <z_arm_fault+0x114>
			reason = usage_fault(esf);
    faae:	f7ff fdc7 	bl	f640 <usage_fault.isra.2>
    fab2:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    fab4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fab8:	b99b      	cbnz	r3, fae2 <z_arm_fault+0x142>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    faba:	2268      	movs	r2, #104	; 0x68
    fabc:	4631      	mov	r1, r6
    fabe:	a802      	add	r0, sp, #8
    fac0:	f00d faf3 	bl	1d0aa <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    fac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fac6:	2d00      	cmp	r5, #0
    fac8:	d03a      	beq.n	fb40 <z_arm_fault+0x1a0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    faca:	f3c3 0208 	ubfx	r2, r3, #0, #9
    face:	b922      	cbnz	r2, fada <z_arm_fault+0x13a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    fad0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    fad4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    fad8:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    fada:	a902      	add	r1, sp, #8
    fadc:	4620      	mov	r0, r4
    fade:	f7ff fcb1 	bl	f444 <z_arm_fatal_error>
}
    fae2:	b01d      	add	sp, #116	; 0x74
    fae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    fae8:	f10d 0107 	add.w	r1, sp, #7
    faec:	2000      	movs	r0, #0
    faee:	e7ce      	b.n	fa8e <z_arm_fault+0xee>
		reason = bus_fault(esf, 0, recoverable);
    faf0:	f10d 0107 	add.w	r1, sp, #7
    faf4:	2000      	movs	r0, #0
    faf6:	e7d3      	b.n	faa0 <z_arm_fault+0x100>
	PR_FAULT_INFO(
    faf8:	2301      	movs	r3, #1
    fafa:	f04f 0100 	mov.w	r1, #0
    fafe:	4a14      	ldr	r2, [pc, #80]	; (fb50 <z_arm_fault+0x1b0>)
    fb00:	f363 0107 	bfi	r1, r3, #0, #8
    fb04:	4b13      	ldr	r3, [pc, #76]	; (fb54 <z_arm_fault+0x1b4>)
    fb06:	481b      	ldr	r0, [pc, #108]	; (fb74 <z_arm_fault+0x1d4>)
    fb08:	1a9b      	subs	r3, r3, r2
    fb0a:	08db      	lsrs	r3, r3, #3
    fb0c:	f363 118f 	bfi	r1, r3, #6, #10
    fb10:	e7a6      	b.n	fa60 <z_arm_fault+0xc0>
	PR_FAULT_INFO("***** %s %d) *****",
    fb12:	2201      	movs	r2, #1
    fb14:	f04f 0300 	mov.w	r3, #0
    fb18:	490e      	ldr	r1, [pc, #56]	; (fb54 <z_arm_fault+0x1b4>)
    fb1a:	f362 0307 	bfi	r3, r2, #0, #8
    fb1e:	4a0c      	ldr	r2, [pc, #48]	; (fb50 <z_arm_fault+0x1b0>)
    fb20:	4815      	ldr	r0, [pc, #84]	; (fb78 <z_arm_fault+0x1d8>)
    fb22:	1a89      	subs	r1, r1, r2
    fb24:	08c9      	lsrs	r1, r1, #3
    fb26:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    fb2a:	f361 138f 	bfi	r3, r1, #6, #10
    fb2e:	f1a7 0210 	sub.w	r2, r7, #16
    fb32:	4912      	ldr	r1, [pc, #72]	; (fb7c <z_arm_fault+0x1dc>)
    fb34:	bf18      	it	ne
    fb36:	4601      	movne	r1, r0
    fb38:	4811      	ldr	r0, [pc, #68]	; (fb80 <z_arm_fault+0x1e0>)
    fb3a:	f00c fd61 	bl	1c600 <log_2>
    fb3e:	e791      	b.n	fa64 <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    fb40:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    fb44:	f023 0301 	bic.w	r3, r3, #1
    fb48:	e7c6      	b.n	fad8 <z_arm_fault+0x138>
    fb4a:	bf00      	nop
    fb4c:	e000ed00 	.word	0xe000ed00
    fb50:	0001edc4 	.word	0x0001edc4
    fb54:	0001ee24 	.word	0x0001ee24
    fb58:	00020262 	.word	0x00020262
    fb5c:	00020285 	.word	0x00020285
    fb60:	0002029c 	.word	0x0002029c
    fb64:	000202bd 	.word	0x000202bd
    fb68:	e000ed28 	.word	0xe000ed28
    fb6c:	e000ed29 	.word	0xe000ed29
    fb70:	e000ed2a 	.word	0xe000ed2a
    fb74:	000202dc 	.word	0x000202dc
    fb78:	00020327 	.word	0x00020327
    fb7c:	00020312 	.word	0x00020312
    fb80:	00020340 	.word	0x00020340

0000fb84 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    fb84:	4a02      	ldr	r2, [pc, #8]	; (fb90 <z_arm_fault_init+0xc>)
    fb86:	6953      	ldr	r3, [r2, #20]
    fb88:	f043 0310 	orr.w	r3, r3, #16
    fb8c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    fb8e:	4770      	bx	lr
    fb90:	e000ed00 	.word	0xe000ed00

0000fb94 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    fb94:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    fb98:	4905      	ldr	r1, [pc, #20]	; (fbb0 <sys_arch_reboot+0x1c>)
    fb9a:	4b06      	ldr	r3, [pc, #24]	; (fbb4 <sys_arch_reboot+0x20>)
    fb9c:	68ca      	ldr	r2, [r1, #12]
    fb9e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    fba2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    fba4:	60cb      	str	r3, [r1, #12]
    fba6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    fbaa:	bf00      	nop
    fbac:	e7fd      	b.n	fbaa <sys_arch_reboot+0x16>
    fbae:	bf00      	nop
    fbb0:	e000ed00 	.word	0xe000ed00
    fbb4:	05fa0004 	.word	0x05fa0004

0000fbb8 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    fbb8:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fbba:	2120      	movs	r1, #32
    fbbc:	4803      	ldr	r0, [pc, #12]	; (fbcc <z_arm_int_lib_init+0x14>)
    fbbe:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    fbc0:	3301      	adds	r3, #1
    fbc2:	2b41      	cmp	r3, #65	; 0x41
    fbc4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    fbc8:	d1f9      	bne.n	fbbe <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    fbca:	4770      	bx	lr
    fbcc:	e000e100 	.word	0xe000e100

0000fbd0 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    fbd0:	b538      	push	{r3, r4, r5, lr}
    fbd2:	4605      	mov	r5, r0
	__asm__ volatile(
    fbd4:	f04f 0320 	mov.w	r3, #32
    fbd8:	f3ef 8411 	mrs	r4, BASEPRI
    fbdc:	f383 8811 	msr	BASEPRI, r3
    fbe0:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    fbe4:	f00e fdce 	bl	1e784 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    fbe8:	4b0b      	ldr	r3, [pc, #44]	; (fc18 <z_impl_k_thread_abort+0x48>)
    fbea:	689b      	ldr	r3, [r3, #8]
    fbec:	42ab      	cmp	r3, r5
    fbee:	d10d      	bne.n	fc0c <z_impl_k_thread_abort+0x3c>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    fbf0:	4b0a      	ldr	r3, [pc, #40]	; (fc1c <z_impl_k_thread_abort+0x4c>)
    fbf2:	685a      	ldr	r2, [r3, #4]
    fbf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
    fbf8:	b922      	cbnz	r2, fc04 <z_impl_k_thread_abort+0x34>
extern int arch_swap(unsigned int key);

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
    fbfa:	f00b fe07 	bl	1b80c <z_check_stack_sentinel>

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    fbfe:	4620      	mov	r0, r4
    fc00:	f7ff fb04 	bl	f20c <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    fc04:	685a      	ldr	r2, [r3, #4]
    fc06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    fc0a:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    fc0c:	4620      	mov	r0, r4
}
    fc0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    fc12:	f00e bcd1 	b.w	1e5b8 <z_reschedule_irqlock>
    fc16:	bf00      	nop
    fc18:	20024d00 	.word	0x20024d00
    fc1c:	e000ed00 	.word	0xe000ed00

0000fc20 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    fc20:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    fc22:	4b0e      	ldr	r3, [pc, #56]	; (fc5c <z_arm_configure_static_mpu_regions+0x3c>)
{
    fc24:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    fc26:	9302      	str	r3, [sp, #8]
    fc28:	4b0d      	ldr	r3, [pc, #52]	; (fc60 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    fc2a:	4c0e      	ldr	r4, [pc, #56]	; (fc64 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    fc2c:	9303      	str	r3, [sp, #12]
    fc2e:	4b0e      	ldr	r3, [pc, #56]	; (fc68 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    fc30:	4a0e      	ldr	r2, [pc, #56]	; (fc6c <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    fc32:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    fc34:	ab02      	add	r3, sp, #8
    fc36:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    fc38:	a801      	add	r0, sp, #4
    fc3a:	4623      	mov	r3, r4
    fc3c:	2101      	movs	r1, #1
    fc3e:	f000 f951 	bl	fee4 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    fc42:	2300      	movs	r3, #0
    fc44:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    fc46:	4b0a      	ldr	r3, [pc, #40]	; (fc70 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    fc48:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    fc4a:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    fc4c:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    fc4e:	9305      	str	r3, [sp, #20]
    fc50:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    fc52:	f000 f951 	bl	fef8 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    fc56:	b008      	add	sp, #32
    fc58:	bd10      	pop	{r4, pc}
    fc5a:	bf00      	nop
    fc5c:	20020000 	.word	0x20020000
    fc60:	00000000 	.word	0x00000000
    fc64:	20040000 	.word	0x20040000
    fc68:	00010006 	.word	0x00010006
    fc6c:	20020000 	.word	0x20020000
    fc70:	20020000 	.word	0x20020000

0000fc74 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    fc74:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    fc76:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    fc78:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    fc7a:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    fc7e:	f004 031f 	and.w	r3, r4, #31
    fc82:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    fc84:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    fc86:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    fc88:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    fc8c:	4904      	ldr	r1, [pc, #16]	; (fca0 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    fc8e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    fc92:	f043 0301 	orr.w	r3, r3, #1
    fc96:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    fc98:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    fc9a:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    fc9c:	bd10      	pop	{r4, pc}
    fc9e:	bf00      	nop
    fca0:	e000ed90 	.word	0xe000ed90

0000fca4 <region_allocate_and_init.part.0>:
#include <arm_mpu_v8_internal.h>
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const u8_t index,
    fca4:	b508      	push	{r3, lr}
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    fca6:	f04f 0200 	mov.w	r2, #0
    fcaa:	2301      	movs	r3, #1
    fcac:	4907      	ldr	r1, [pc, #28]	; (fccc <region_allocate_and_init.part.0+0x28>)
    fcae:	f363 0207 	bfi	r2, r3, #0, #8
    fcb2:	4b07      	ldr	r3, [pc, #28]	; (fcd0 <region_allocate_and_init.part.0+0x2c>)
    fcb4:	1a5b      	subs	r3, r3, r1
    fcb6:	08db      	lsrs	r3, r3, #3
    fcb8:	4601      	mov	r1, r0
    fcba:	f363 128f 	bfi	r2, r3, #6, #10
    fcbe:	4805      	ldr	r0, [pc, #20]	; (fcd4 <region_allocate_and_init.part.0+0x30>)
    fcc0:	f00c fc8a 	bl	1c5d8 <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    fcc4:	f06f 0015 	mvn.w	r0, #21
    fcc8:	bd08      	pop	{r3, pc}
    fcca:	bf00      	nop
    fccc:	0001edc4 	.word	0x0001edc4
    fcd0:	0001ee14 	.word	0x0001ee14
    fcd4:	0002039d 	.word	0x0002039d

0000fcd8 <mpu_configure_regions_and_partition.constprop.2>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    fcd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fcdc:	4607      	mov	r7, r0
    fcde:	4688      	mov	r8, r1
    fce0:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    fce2:	2600      	movs	r6, #0
	MPU->RNR = index;
    fce4:	4d5e      	ldr	r5, [pc, #376]	; (fe60 <mpu_configure_regions_and_partition.constprop.2+0x188>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    fce6:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    fce8:	4546      	cmp	r6, r8
    fcea:	da3d      	bge.n	fd68 <mpu_configure_regions_and_partition.constprop.2+0x90>
		if (regions[i]->size == 0U) {
    fcec:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
    fcf0:	f8d3 9004 	ldr.w	r9, [r3, #4]
    fcf4:	f1b9 0f00 	cmp.w	r9, #0
    fcf8:	d059      	beq.n	fdae <mpu_configure_regions_and_partition.constprop.2+0xd6>
		&&
    fcfa:	f1b9 0f1f 	cmp.w	r9, #31
    fcfe:	d922      	bls.n	fd46 <mpu_configure_regions_and_partition.constprop.2+0x6e>
		&&
    fd00:	f019 0f1f 	tst.w	r9, #31
    fd04:	d11f      	bne.n	fd46 <mpu_configure_regions_and_partition.constprop.2+0x6e>
		((part->start &
    fd06:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    fd0a:	f01a 0f1f 	tst.w	sl, #31
    fd0e:	d11a      	bne.n	fd46 <mpu_configure_regions_and_partition.constprop.2+0x6e>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    fd10:	4650      	mov	r0, sl
    fd12:	f00d f81c 	bl	1cd4e <arm_cmse_mpu_region_get>
    fd16:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    fd18:	eb09 000a 	add.w	r0, r9, sl
    fd1c:	3801      	subs	r0, #1
    fd1e:	f00d f816 	bl	1cd4e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    fd22:	4583      	cmp	fp, r0
    fd24:	d024      	beq.n	fd70 <mpu_configure_regions_and_partition.constprop.2+0x98>
	return -EINVAL;
    fd26:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    fd2a:	2301      	movs	r3, #1
    fd2c:	f04f 0200 	mov.w	r2, #0
    fd30:	494c      	ldr	r1, [pc, #304]	; (fe64 <mpu_configure_regions_and_partition.constprop.2+0x18c>)
    fd32:	f363 0207 	bfi	r2, r3, #0, #8
    fd36:	4b4c      	ldr	r3, [pc, #304]	; (fe68 <mpu_configure_regions_and_partition.constprop.2+0x190>)
    fd38:	484c      	ldr	r0, [pc, #304]	; (fe6c <mpu_configure_regions_and_partition.constprop.2+0x194>)
    fd3a:	1a5b      	subs	r3, r3, r1
    fd3c:	08db      	lsrs	r3, r3, #3
    fd3e:	f363 128f 	bfi	r2, r3, #6, #10
    fd42:	4659      	mov	r1, fp
    fd44:	e00c      	b.n	fd60 <mpu_configure_regions_and_partition.constprop.2+0x88>
			LOG_ERR("Partition %u: sanity check failed.", i);
    fd46:	2301      	movs	r3, #1
    fd48:	f04f 0200 	mov.w	r2, #0
    fd4c:	4945      	ldr	r1, [pc, #276]	; (fe64 <mpu_configure_regions_and_partition.constprop.2+0x18c>)
    fd4e:	f363 0207 	bfi	r2, r3, #0, #8
    fd52:	4b45      	ldr	r3, [pc, #276]	; (fe68 <mpu_configure_regions_and_partition.constprop.2+0x190>)
    fd54:	4846      	ldr	r0, [pc, #280]	; (fe70 <mpu_configure_regions_and_partition.constprop.2+0x198>)
    fd56:	1a5b      	subs	r3, r3, r1
    fd58:	4631      	mov	r1, r6
    fd5a:	08db      	lsrs	r3, r3, #3
    fd5c:	f363 128f 	bfi	r2, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
    fd60:	f00c fc3a 	bl	1c5d8 <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    fd64:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    fd68:	4620      	mov	r0, r4
    fd6a:	b005      	add	sp, #20
    fd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    fd70:	f11b 0f16 	cmn.w	fp, #22
    fd74:	d0d9      	beq.n	fd2a <mpu_configure_regions_and_partition.constprop.2+0x52>
			(u_reg_index > (reg_index - 1))) {
    fd76:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    fd78:	455b      	cmp	r3, fp
    fd7a:	dbd6      	blt.n	fd2a <mpu_configure_regions_and_partition.constprop.2+0x52>
	MPU->RNR = index;
    fd7c:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    fd80:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
    fd82:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    fd86:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    fd88:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    fd8c:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    fd90:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    fd94:	e9d1 3200 	ldrd	r3, r2, [r1]
    fd98:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    fd9a:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    fd9c:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
    fda0:	d118      	bne.n	fdd4 <mpu_configure_regions_and_partition.constprop.2+0xfc>
    fda2:	45ca      	cmp	sl, r9
    fda4:	d105      	bne.n	fdb2 <mpu_configure_regions_and_partition.constprop.2+0xda>
			mpu_configure_region(u_reg_index, regions[i]);
    fda6:	fa5f f08b 	uxtb.w	r0, fp
    fdaa:	f00c ffad 	bl	1cd08 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    fdae:	3601      	adds	r6, #1
    fdb0:	e79a      	b.n	fce8 <mpu_configure_regions_and_partition.constprop.2+0x10>
	MPU->RNR = index;
    fdb2:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    fdb6:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    fdb8:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    fdbc:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    fdc0:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    fdc2:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    fdc4:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    fdc6:	f00c ff9f 	bl	1cd08 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    fdca:	f110 0f16 	cmn.w	r0, #22
    fdce:	d0c9      	beq.n	fd64 <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
    fdd0:	1c44      	adds	r4, r0, #1
    fdd2:	e7ec      	b.n	fdae <mpu_configure_regions_and_partition.constprop.2+0xd6>
	MPU->RNR = index;
    fdd4:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    fdd8:	692a      	ldr	r2, [r5, #16]
    fdda:	3b01      	subs	r3, #1
    fddc:	f023 031f 	bic.w	r3, r3, #31
    fde0:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    fde4:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    fde6:	45ca      	cmp	sl, r9
    fde8:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    fdea:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    fdec:	d0eb      	beq.n	fdc6 <mpu_configure_regions_and_partition.constprop.2+0xee>
				mpu_configure_region(reg_index, regions[i]);
    fdee:	f00c ff8b 	bl	1cd08 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    fdf2:	f110 0f16 	cmn.w	r0, #22
    fdf6:	d0b5      	beq.n	fd64 <mpu_configure_regions_and_partition.constprop.2+0x8c>
	MPU->RNR = index;
    fdf8:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    fdfc:	68ea      	ldr	r2, [r5, #12]
    fdfe:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    fe02:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
    fe06:	f362 0304 	bfi	r3, r2, #0, #5
    fe0a:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    fe0e:	692b      	ldr	r3, [r5, #16]
    fe10:	f89d 2008 	ldrb.w	r2, [sp, #8]
    fe14:	085b      	lsrs	r3, r3, #1
    fe16:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
    fe1a:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    fe1e:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    fe22:	e9d3 1300 	ldrd	r1, r3, [r3]
    fe26:	440b      	add	r3, r1
    fe28:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    fe2a:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    fe2e:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
    fe30:	4453      	add	r3, sl
    fe32:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
    fe36:	b2e4      	uxtb	r4, r4
			REGION_LIMIT_ADDR((regions[i]->start +
    fe38:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    fe3c:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
    fe3e:	9303      	str	r3, [sp, #12]
    fe40:	d908      	bls.n	fe54 <mpu_configure_regions_and_partition.constprop.2+0x17c>
    fe42:	4620      	mov	r0, r4
    fe44:	f7ff ff2e 	bl	fca4 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
    fe48:	f110 0f16 	cmn.w	r0, #22
    fe4c:	4604      	mov	r4, r0
    fe4e:	d089      	beq.n	fd64 <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
    fe50:	3401      	adds	r4, #1
    fe52:	e7ac      	b.n	fdae <mpu_configure_regions_and_partition.constprop.2+0xd6>
	region_init(index, region_conf);
    fe54:	4669      	mov	r1, sp
    fe56:	4620      	mov	r0, r4
    fe58:	f7ff ff0c 	bl	fc74 <region_init>
			if (reg_index == -EINVAL) {
    fe5c:	e7f8      	b.n	fe50 <mpu_configure_regions_and_partition.constprop.2+0x178>
    fe5e:	bf00      	nop
    fe60:	e000ed90 	.word	0xe000ed90
    fe64:	0001edc4 	.word	0x0001edc4
    fe68:	0001ee14 	.word	0x0001ee14
    fe6c:	0002037a 	.word	0x0002037a
    fe70:	00020357 	.word	0x00020357

0000fe74 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    fe74:	2205      	movs	r2, #5
    fe76:	4b03      	ldr	r3, [pc, #12]	; (fe84 <arm_core_mpu_enable+0x10>)
    fe78:	605a      	str	r2, [r3, #4]
    fe7a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    fe7e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    fe82:	4770      	bx	lr
    fe84:	e000ed90 	.word	0xe000ed90

0000fe88 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    fe88:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    fe8c:	2200      	movs	r2, #0
    fe8e:	4b01      	ldr	r3, [pc, #4]	; (fe94 <arm_core_mpu_disable+0xc>)
    fe90:	605a      	str	r2, [r3, #4]
}
    fe92:	4770      	bx	lr
    fe94:	e000ed90 	.word	0xe000ed90

0000fe98 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    fe98:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    fe9a:	4d0e      	ldr	r5, [pc, #56]	; (fed4 <arm_mpu_init+0x3c>)
    fe9c:	682e      	ldr	r6, [r5, #0]
    fe9e:	2e10      	cmp	r6, #16
    fea0:	d815      	bhi.n	fece <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    fea2:	2400      	movs	r4, #0
	arm_core_mpu_disable();
    fea4:	f7ff fff0 	bl	fe88 <arm_core_mpu_disable>
	MPU->MAIR0 =
    fea8:	4b0b      	ldr	r3, [pc, #44]	; (fed8 <arm_mpu_init+0x40>)
    feaa:	4a0c      	ldr	r2, [pc, #48]	; (fedc <arm_mpu_init+0x44>)
    feac:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    feae:	42a6      	cmp	r6, r4
    feb0:	d105      	bne.n	febe <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    feb2:	4b0b      	ldr	r3, [pc, #44]	; (fee0 <arm_mpu_init+0x48>)
    feb4:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
    feb6:	f7ff ffdd 	bl	fe74 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    feba:	2000      	movs	r0, #0
}
    febc:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    febe:	6869      	ldr	r1, [r5, #4]
    fec0:	4620      	mov	r0, r4
    fec2:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    fec6:	f7ff fed5 	bl	fc74 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    feca:	3401      	adds	r4, #1
    fecc:	e7ef      	b.n	feae <arm_mpu_init+0x16>
		return -1;
    fece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fed2:	e7f3      	b.n	febc <arm_mpu_init+0x24>
    fed4:	0001eed0 	.word	0x0001eed0
    fed8:	e000ed90 	.word	0xe000ed90
    fedc:	0044ffaa 	.word	0x0044ffaa
    fee0:	20026433 	.word	0x20026433

0000fee4 <arm_core_mpu_configure_static_mpu_regions>:
{
    fee4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    fee6:	4c03      	ldr	r4, [pc, #12]	; (fef4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    fee8:	7822      	ldrb	r2, [r4, #0]
    feea:	f7ff fef5 	bl	fcd8 <mpu_configure_regions_and_partition.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    feee:	7020      	strb	r0, [r4, #0]
}
    fef0:	bd10      	pop	{r4, pc}
    fef2:	bf00      	nop
    fef4:	20026433 	.word	0x20026433

0000fef8 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    fef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fefc:	4c25      	ldr	r4, [pc, #148]	; (ff94 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>)
    fefe:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    ff00:	4680      	mov	r8, r0
    ff02:	2700      	movs	r7, #0
    ff04:	46a1      	mov	r9, r4
	attr->rbar = MPU->RBAR &
    ff06:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
    ff0a:	4d23      	ldr	r5, [pc, #140]	; (ff98 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    ff0c:	4557      	cmp	r7, sl
    ff0e:	da1a      	bge.n	ff46 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    ff10:	f8d8 3004 	ldr.w	r3, [r8, #4]
    ff14:	9301      	str	r3, [sp, #4]
    ff16:	2b00      	cmp	r3, #0
    ff18:	d036      	beq.n	ff88 <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    ff1a:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    ff1e:	4608      	mov	r0, r1
    ff20:	9100      	str	r1, [sp, #0]
    ff22:	f00c ff14 	bl	1cd4e <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    ff26:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    ff2a:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    ff2c:	1858      	adds	r0, r3, r1
    ff2e:	3801      	subs	r0, #1
    ff30:	f00c ff0d 	bl	1cd4e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    ff34:	4286      	cmp	r6, r0
    ff36:	4a19      	ldr	r2, [pc, #100]	; (ff9c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
    ff38:	d008      	beq.n	ff4c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    ff3a:	2314      	movs	r3, #20
    ff3c:	435f      	muls	r7, r3
    ff3e:	f06f 0315 	mvn.w	r3, #21
    ff42:	f849 3007 	str.w	r3, [r9, r7]
}
    ff46:	b003      	add	sp, #12
    ff48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    ff4c:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
    ff50:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    ff52:	d0f8      	beq.n	ff46 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    ff54:	7813      	ldrb	r3, [r2, #0]
    ff56:	42b3      	cmp	r3, r6
    ff58:	ddf5      	ble.n	ff46 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    ff5a:	fb0b 9307 	mla	r3, fp, r7, r9
	MPU->RNR = index;
    ff5e:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
    ff60:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
    ff62:	68e8      	ldr	r0, [r5, #12]
    ff64:	7b19      	ldrb	r1, [r3, #12]
    ff66:	f360 0104 	bfi	r1, r0, #0, #5
    ff6a:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    ff6c:	6929      	ldr	r1, [r5, #16]
    ff6e:	7b18      	ldrb	r0, [r3, #12]
    ff70:	0849      	lsrs	r1, r1, #1
    ff72:	f361 1047 	bfi	r0, r1, #5, #3
    ff76:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    ff78:	68eb      	ldr	r3, [r5, #12]
    ff7a:	f023 031f 	bic.w	r3, r3, #31
    ff7e:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    ff80:	692b      	ldr	r3, [r5, #16]
    ff82:	f023 031f 	bic.w	r3, r3, #31
    ff86:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    ff88:	3701      	adds	r7, #1
    ff8a:	3414      	adds	r4, #20
    ff8c:	f108 080c 	add.w	r8, r8, #12
    ff90:	e7bc      	b.n	ff0c <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
    ff92:	bf00      	nop
    ff94:	20020340 	.word	0x20020340
    ff98:	e000ed90 	.word	0xe000ed90
    ff9c:	20026433 	.word	0x20026433

0000ffa0 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    ffa0:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
    ffa2:	4b0c      	ldr	r3, [pc, #48]	; (ffd4 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    ffa4:	460e      	mov	r6, r1
    ffa6:	781c      	ldrb	r4, [r3, #0]
    ffa8:	4605      	mov	r5, r0
    ffaa:	4623      	mov	r3, r4
  mpu->RLAR = 0U;
    ffac:	2100      	movs	r1, #0
  mpu->RNR = rnr;
    ffae:	4a0a      	ldr	r2, [pc, #40]	; (ffd8 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    ffb0:	2b0f      	cmp	r3, #15
    ffb2:	dd0b      	ble.n	ffcc <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>
#if defined(CONFIG_MPU_GAP_FILLING)
	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
    ffb4:	4909      	ldr	r1, [pc, #36]	; (ffdc <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    ffb6:	f851 0b04 	ldr.w	r0, [r1], #4
    ffba:	f7ff fe5b 	bl	fc74 <region_init>

	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */
	mpu_reg_index = mpu_configure_regions_and_partition(dynamic_regions,
    ffbe:	4622      	mov	r2, r4
    ffc0:	4631      	mov	r1, r6
    ffc2:	4628      	mov	r0, r5
}
    ffc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ffc8:	f7ff be86 	b.w	fcd8 <mpu_configure_regions_and_partition.constprop.2>
    ffcc:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    ffce:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    ffd0:	3301      	adds	r3, #1
    ffd2:	e7ed      	b.n	ffb0 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
    ffd4:	20026433 	.word	0x20026433
    ffd8:	e000ed90 	.word	0xe000ed90
    ffdc:	20020340 	.word	0x20020340

0000ffe0 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    ffe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ffe4:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    ffe6:	2300      	movs	r3, #0
{
    ffe8:	b0a3      	sub	sp, #140	; 0x8c
    ffea:	e9cd 0102 	strd	r0, r1, [sp, #8]
	count = 0;
    ffee:	9301      	str	r3, [sp, #4]

	while ((c = *format++)) {
    fff0:	4613      	mov	r3, r2
    fff2:	f813 0b01 	ldrb.w	r0, [r3], #1
    fff6:	9308      	str	r3, [sp, #32]
    fff8:	b158      	cbz	r0, 10012 <z_prf+0x32>
		if (c != '%') {
    fffa:	2825      	cmp	r0, #37	; 0x25
    fffc:	f000 8085 	beq.w	1010a <z_prf+0x12a>
			PUTC(c);
   10000:	9903      	ldr	r1, [sp, #12]
   10002:	9b02      	ldr	r3, [sp, #8]
   10004:	4798      	blx	r3
   10006:	3001      	adds	r0, #1
   10008:	f040 841a 	bne.w	10840 <z_prf+0x860>
   1000c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10010:	9301      	str	r3, [sp, #4]
		}
	}
	return count;

#undef PUTC
}
   10012:	9801      	ldr	r0, [sp, #4]
   10014:	b023      	add	sp, #140	; 0x8c
   10016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
   1001a:	2c23      	cmp	r4, #35	; 0x23
   1001c:	d06c      	beq.n	100f8 <z_prf+0x118>
   1001e:	d861      	bhi.n	100e4 <z_prf+0x104>
   10020:	2c00      	cmp	r4, #0
   10022:	d0f6      	beq.n	10012 <z_prf+0x32>
					fspace = true;
   10024:	2c20      	cmp	r4, #32
   10026:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10028:	bf08      	it	eq
   1002a:	2301      	moveq	r3, #1
   1002c:	930e      	str	r3, [sp, #56]	; 0x38
					fminus = true;
   1002e:	f8cd 8020 	str.w	r8, [sp, #32]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
   10032:	f8dd 8020 	ldr.w	r8, [sp, #32]
   10036:	48b7      	ldr	r0, [pc, #732]	; (10314 <z_prf+0x334>)
   10038:	f818 4b01 	ldrb.w	r4, [r8], #1
   1003c:	4621      	mov	r1, r4
   1003e:	f00c ffde 	bl	1cffe <strchr>
   10042:	2800      	cmp	r0, #0
   10044:	d1e9      	bne.n	1001a <z_prf+0x3a>
			if (c == '*') {
   10046:	2c2a      	cmp	r4, #42	; 0x2a
   10048:	d166      	bne.n	10118 <z_prf+0x138>
				width = va_arg(vargs, int);
   1004a:	f856 3b04 	ldr.w	r3, [r6], #4
				c = *format++;
   1004e:	f898 4000 	ldrb.w	r4, [r8]
				if (width < 0) {
   10052:	2b00      	cmp	r3, #0
				width = va_arg(vargs, int);
   10054:	9309      	str	r3, [sp, #36]	; 0x24
					width = -width;
   10056:	bfbf      	itttt	lt
   10058:	425b      	neglt	r3, r3
   1005a:	9309      	strlt	r3, [sp, #36]	; 0x24
					fminus = true;
   1005c:	2301      	movlt	r3, #1
   1005e:	930f      	strlt	r3, [sp, #60]	; 0x3c
				c = *format++;
   10060:	9b08      	ldr	r3, [sp, #32]
   10062:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
   10066:	2c2e      	cmp	r4, #46	; 0x2e
   10068:	d17b      	bne.n	10162 <z_prf+0x182>
				if (c == '*') {
   1006a:	f898 3000 	ldrb.w	r3, [r8]
   1006e:	2b2a      	cmp	r3, #42	; 0x2a
   10070:	d174      	bne.n	1015c <z_prf+0x17c>
					precision = va_arg(vargs, int);
   10072:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
   10076:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
   1007a:	f818 4b01 	ldrb.w	r4, [r8], #1
			if (strchr("hlz", c) != NULL) {
   1007e:	4621      	mov	r1, r4
   10080:	48a5      	ldr	r0, [pc, #660]	; (10318 <z_prf+0x338>)
   10082:	4627      	mov	r7, r4
   10084:	f00c ffbb 	bl	1cffe <strchr>
   10088:	2800      	cmp	r0, #0
   1008a:	d06d      	beq.n	10168 <z_prf+0x188>
				c = *format++;
   1008c:	4643      	mov	r3, r8
   1008e:	f813 4b01 	ldrb.w	r4, [r3], #1
				} else if (i == 'h' && c == 'h') {
   10092:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
   10094:	9308      	str	r3, [sp, #32]
				} else if (i == 'h' && c == 'h') {
   10096:	d107      	bne.n	100a8 <z_prf+0xc8>
   10098:	2c68      	cmp	r4, #104	; 0x68
   1009a:	d105      	bne.n	100a8 <z_prf+0xc8>
					i = 'H';
   1009c:	2748      	movs	r7, #72	; 0x48
					c = *format++;
   1009e:	f108 0302 	add.w	r3, r8, #2
   100a2:	f898 4001 	ldrb.w	r4, [r8, #1]
   100a6:	9308      	str	r3, [sp, #32]
			switch (c) {
   100a8:	2c67      	cmp	r4, #103	; 0x67
   100aa:	d87b      	bhi.n	101a4 <z_prf+0x1c4>
   100ac:	2c65      	cmp	r4, #101	; 0x65
   100ae:	f080 8135 	bcs.w	1031c <z_prf+0x33c>
   100b2:	2c47      	cmp	r4, #71	; 0x47
   100b4:	d85c      	bhi.n	10170 <z_prf+0x190>
   100b6:	2c45      	cmp	r4, #69	; 0x45
   100b8:	f080 8130 	bcs.w	1031c <z_prf+0x33c>
   100bc:	2c00      	cmp	r4, #0
   100be:	d0a8      	beq.n	10012 <z_prf+0x32>
   100c0:	2c25      	cmp	r4, #37	; 0x25
   100c2:	f000 83b9 	beq.w	10838 <z_prf+0x858>
				PUTC('%');
   100c6:	9903      	ldr	r1, [sp, #12]
   100c8:	2025      	movs	r0, #37	; 0x25
   100ca:	9b02      	ldr	r3, [sp, #8]
   100cc:	4798      	blx	r3
   100ce:	3001      	adds	r0, #1
   100d0:	d09c      	beq.n	1000c <z_prf+0x2c>
				PUTC(c);
   100d2:	9903      	ldr	r1, [sp, #12]
   100d4:	4620      	mov	r0, r4
   100d6:	9b02      	ldr	r3, [sp, #8]
   100d8:	4798      	blx	r3
   100da:	3001      	adds	r0, #1
   100dc:	d096      	beq.n	1000c <z_prf+0x2c>
				count += 2;
   100de:	9b01      	ldr	r3, [sp, #4]
   100e0:	3302      	adds	r3, #2
   100e2:	e3af      	b.n	10844 <z_prf+0x864>
				switch (c) {
   100e4:	2c2d      	cmp	r4, #45	; 0x2d
   100e6:	d00a      	beq.n	100fe <z_prf+0x11e>
   100e8:	2c30      	cmp	r4, #48	; 0x30
   100ea:	d00b      	beq.n	10104 <z_prf+0x124>
					fplus = true;
   100ec:	2c2b      	cmp	r4, #43	; 0x2b
   100ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   100f0:	bf08      	it	eq
   100f2:	2301      	moveq	r3, #1
   100f4:	930b      	str	r3, [sp, #44]	; 0x2c
   100f6:	e79a      	b.n	1002e <z_prf+0x4e>
					falt = true;
   100f8:	f04f 0b01 	mov.w	fp, #1
   100fc:	e797      	b.n	1002e <z_prf+0x4e>
					fminus = true;
   100fe:	2301      	movs	r3, #1
   10100:	930f      	str	r3, [sp, #60]	; 0x3c
   10102:	e794      	b.n	1002e <z_prf+0x4e>
					fzero = true;
   10104:	2301      	movs	r3, #1
   10106:	930a      	str	r3, [sp, #40]	; 0x28
   10108:	e791      	b.n	1002e <z_prf+0x4e>
			fminus = fplus = fspace = falt = fzero = false;
   1010a:	2300      	movs	r3, #0
   1010c:	930a      	str	r3, [sp, #40]	; 0x28
   1010e:	930e      	str	r3, [sp, #56]	; 0x38
   10110:	930b      	str	r3, [sp, #44]	; 0x2c
   10112:	930f      	str	r3, [sp, #60]	; 0x3c
   10114:	469b      	mov	fp, r3
   10116:	e78c      	b.n	10032 <z_prf+0x52>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   10118:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
   1011c:	2b09      	cmp	r3, #9
				width = 0;
   1011e:	9009      	str	r0, [sp, #36]	; 0x24
			} else if (!isdigit(c)) {
   10120:	d8a1      	bhi.n	10066 <z_prf+0x86>
		i = 10 * i + *p++ - '0';
   10122:	220a      	movs	r2, #10
	while (isdigit(*p)) {
   10124:	f8dd 8020 	ldr.w	r8, [sp, #32]
   10128:	f818 4b01 	ldrb.w	r4, [r8], #1
   1012c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   10130:	2b09      	cmp	r3, #9
   10132:	d898      	bhi.n	10066 <z_prf+0x86>
		i = 10 * i + *p++ - '0';
   10134:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10136:	fb02 4403 	mla	r4, r2, r3, r4
   1013a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1013e:	e9cd 8308 	strd	r8, r3, [sp, #32]
   10142:	e7ef      	b.n	10124 <z_prf+0x144>
   10144:	4690      	mov	r8, r2
   10146:	fb01 3505 	mla	r5, r1, r5, r3
   1014a:	3d30      	subs	r5, #48	; 0x30
	while (isdigit(*p)) {
   1014c:	4642      	mov	r2, r8
   1014e:	f812 3b01 	ldrb.w	r3, [r2], #1
   10152:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   10156:	2809      	cmp	r0, #9
   10158:	d9f4      	bls.n	10144 <z_prf+0x164>
   1015a:	e78e      	b.n	1007a <z_prf+0x9a>
	int i = 0;
   1015c:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
   1015e:	210a      	movs	r1, #10
   10160:	e7f4      	b.n	1014c <z_prf+0x16c>
			precision = -1;
   10162:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   10166:	e78a      	b.n	1007e <z_prf+0x9e>
   10168:	f8cd 8020 	str.w	r8, [sp, #32]
			i = 0;
   1016c:	4607      	mov	r7, r0
   1016e:	e79b      	b.n	100a8 <z_prf+0xc8>
			switch (c) {
   10170:	2c63      	cmp	r4, #99	; 0x63
   10172:	d059      	beq.n	10228 <z_prf+0x248>
   10174:	d820      	bhi.n	101b8 <z_prf+0x1d8>
   10176:	2c58      	cmp	r4, #88	; 0x58
   10178:	d1a5      	bne.n	100c6 <z_prf+0xe6>
				if (c == 'o') {
   1017a:	2c6f      	cmp	r4, #111	; 0x6f
   1017c:	f106 0904 	add.w	r9, r6, #4
   10180:	6831      	ldr	r1, [r6, #0]
   10182:	f040 8328 	bne.w	107d6 <z_prf+0x7f6>
	if (alt_form) {
   10186:	f1bb 0f00 	cmp.w	fp, #0
   1018a:	f000 8317 	beq.w	107bc <z_prf+0x7dc>
		*buf++ = '0';
   1018e:	2330      	movs	r3, #48	; 0x30
   10190:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		if (!value) {
   10194:	2900      	cmp	r1, #0
   10196:	f040 831b 	bne.w	107d0 <z_prf+0x7f0>
			*buf++ = 0;
   1019a:	f88d 106d 	strb.w	r1, [sp, #109]	; 0x6d
			prefix = 0;
   1019e:	460f      	mov	r7, r1
			return 1;
   101a0:	2601      	movs	r6, #1
   101a2:	e025      	b.n	101f0 <z_prf+0x210>
			switch (c) {
   101a4:	2c70      	cmp	r4, #112	; 0x70
   101a6:	f000 82f5 	beq.w	10794 <z_prf+0x7b4>
   101aa:	d827      	bhi.n	101fc <z_prf+0x21c>
   101ac:	2c6e      	cmp	r4, #110	; 0x6e
   101ae:	f000 82de 	beq.w	1076e <z_prf+0x78e>
   101b2:	d8e2      	bhi.n	1017a <z_prf+0x19a>
   101b4:	2c69      	cmp	r4, #105	; 0x69
   101b6:	d186      	bne.n	100c6 <z_prf+0xe6>
				switch (i) {
   101b8:	6837      	ldr	r7, [r6, #0]
   101ba:	f106 0904 	add.w	r9, r6, #4
	if (value < 0) {
   101be:	2f00      	cmp	r7, #0
   101c0:	f280 809a 	bge.w	102f8 <z_prf+0x318>
		*buf++ = '-';
   101c4:	232d      	movs	r3, #45	; 0x2d
		value = -value;
   101c6:	4279      	negs	r1, r7
		*buf++ = '-';
   101c8:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		*buf++ = ' ';
   101cc:	f10d 066d 	add.w	r6, sp, #109	; 0x6d
	return _to_x(buf, value, 10);
   101d0:	4630      	mov	r0, r6
   101d2:	220a      	movs	r2, #10
   101d4:	f00c ffb5 	bl	1d142 <_to_x>
				if (fplus || fspace || val < 0) {
   101d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	return (buf + _to_udec(buf, value)) - start;
   101da:	4406      	add	r6, r0
   101dc:	a81b      	add	r0, sp, #108	; 0x6c
   101de:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
   101e0:	2b00      	cmp	r3, #0
   101e2:	f040 8332 	bne.w	1084a <z_prf+0x86a>
   101e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   101e8:	2b00      	cmp	r3, #0
   101ea:	f040 832e 	bne.w	1084a <z_prf+0x86a>
   101ee:	0fff      	lsrs	r7, r7, #31
			if (precision >= 0) {
   101f0:	2d00      	cmp	r5, #0
   101f2:	da21      	bge.n	10238 <z_prf+0x258>
			zero.predot = zero.postdot = zero.trail = 0;
   101f4:	2500      	movs	r5, #0
   101f6:	46ab      	mov	fp, r5
   101f8:	46a8      	mov	r8, r5
   101fa:	e0e1      	b.n	103c0 <z_prf+0x3e0>
			switch (c) {
   101fc:	2c75      	cmp	r4, #117	; 0x75
   101fe:	d0bc      	beq.n	1017a <z_prf+0x19a>
   10200:	2c78      	cmp	r4, #120	; 0x78
   10202:	d0ba      	beq.n	1017a <z_prf+0x19a>
   10204:	2c73      	cmp	r4, #115	; 0x73
   10206:	f47f af5e 	bne.w	100c6 <z_prf+0xe6>
				cptr = va_arg(vargs, char *);
   1020a:	46b1      	mov	r9, r6
					precision = INT_MAX;
   1020c:	2d00      	cmp	r5, #0
   1020e:	bfb8      	it	lt
   10210:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
   10214:	2600      	movs	r6, #0
				cptr = va_arg(vargs, char *);
   10216:	f859 3b04 	ldr.w	r3, [r9], #4
				for (clen = 0; clen < precision; clen++) {
   1021a:	42b5      	cmp	r5, r6
   1021c:	f040 82c9 	bne.w	107b2 <z_prf+0x7d2>
   10220:	462e      	mov	r6, r5
   10222:	2500      	movs	r5, #0
   10224:	462f      	mov	r7, r5
   10226:	e008      	b.n	1023a <z_prf+0x25a>
				break;
   10228:	2700      	movs	r7, #0
				buf[0] = va_arg(vargs, int);
   1022a:	46b1      	mov	r9, r6
				break;
   1022c:	463d      	mov	r5, r7
				clen = 1;
   1022e:	2601      	movs	r6, #1
				buf[0] = va_arg(vargs, int);
   10230:	f859 3b04 	ldr.w	r3, [r9], #4
   10234:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
				break;
   10238:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = precision - clen + prefix;
   1023a:	19ea      	adds	r2, r5, r7
			zero.predot = zero.postdot = zero.trail = 0;
   1023c:	2500      	movs	r5, #0
   1023e:	46ab      	mov	fp, r5
   10240:	46a8      	mov	r8, r5
				zero_head = precision - clen + prefix;
   10242:	1b92      	subs	r2, r2, r6
			if (zero_head < 0) {
   10244:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			width -= clen + zero_head;
   10248:	1991      	adds	r1, r2, r6
   1024a:	9106      	str	r1, [sp, #24]
   1024c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1024e:	1990      	adds	r0, r2, r6
   10250:	1a0c      	subs	r4, r1, r0
			if (!fminus && width > 0) {
   10252:	990f      	ldr	r1, [sp, #60]	; 0x3c
   10254:	b911      	cbnz	r1, 1025c <z_prf+0x27c>
   10256:	2c00      	cmp	r4, #0
   10258:	f300 8314 	bgt.w	10884 <z_prf+0x8a4>
			while (prefix-- > 0) {
   1025c:	eb03 0a07 	add.w	sl, r3, r7
   10260:	4553      	cmp	r3, sl
   10262:	f040 8313 	bne.w	1088c <z_prf+0x8ac>
			while (zero_head-- > 0) {
   10266:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
   1026a:	f080 831d 	bcs.w	108a8 <z_prf+0x8c8>
			clen -= prefix;
   1026e:	1bf6      	subs	r6, r6, r7
			if (zero.predot) {
   10270:	f1b8 0f00 	cmp.w	r8, #0
   10274:	d011      	beq.n	1029a <z_prf+0x2ba>
				c = *cptr;
   10276:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c)) {
   1027a:	eb0a 0706 	add.w	r7, sl, r6
   1027e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   10282:	2b09      	cmp	r3, #9
   10284:	eba7 060a 	sub.w	r6, r7, sl
   10288:	f240 8319 	bls.w	108be <z_prf+0x8de>
   1028c:	4647      	mov	r7, r8
				while (zero.predot-- > 0) {
   1028e:	f117 37ff 	adds.w	r7, r7, #4294967295	; 0xffffffff
   10292:	f080 831d 	bcs.w	108d0 <z_prf+0x8f0>
				clen -= zero.predot;
   10296:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.postdot) {
   1029a:	f1bb 0f00 	cmp.w	fp, #0
   1029e:	d015      	beq.n	102cc <z_prf+0x2ec>
   102a0:	eb0a 0706 	add.w	r7, sl, r6
					c = *cptr++;
   102a4:	f81a 8b01 	ldrb.w	r8, [sl], #1
					PUTC(c);
   102a8:	9903      	ldr	r1, [sp, #12]
   102aa:	4640      	mov	r0, r8
   102ac:	9b02      	ldr	r3, [sp, #8]
   102ae:	4798      	blx	r3
   102b0:	3001      	adds	r0, #1
   102b2:	f43f aeab 	beq.w	1000c <z_prf+0x2c>
				} while (c != '.');
   102b6:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
   102ba:	eba7 060a 	sub.w	r6, r7, sl
   102be:	d1f1      	bne.n	102a4 <z_prf+0x2c4>
				while (zero.postdot-- > 0) {
   102c0:	465f      	mov	r7, fp
   102c2:	2f00      	cmp	r7, #0
   102c4:	f300 830d 	bgt.w	108e2 <z_prf+0x902>
				clen -= zero.postdot;
   102c8:	eba6 060b 	sub.w	r6, r6, fp
			if (zero.trail) {
   102cc:	b195      	cbz	r5, 102f4 <z_prf+0x314>
				c = *cptr;
   102ce:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c) || c == '.') {
   102d2:	eb0a 0706 	add.w	r7, sl, r6
   102d6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   102da:	2b09      	cmp	r3, #9
   102dc:	eba7 060a 	sub.w	r6, r7, sl
   102e0:	f240 830a 	bls.w	108f8 <z_prf+0x918>
   102e4:	282e      	cmp	r0, #46	; 0x2e
   102e6:	f000 8307 	beq.w	108f8 <z_prf+0x918>
				while (zero.trail-- > 0) {
   102ea:	462f      	mov	r7, r5
   102ec:	2f00      	cmp	r7, #0
   102ee:	f300 830c 	bgt.w	1090a <z_prf+0x92a>
				clen -= zero.trail;
   102f2:	1b76      	subs	r6, r6, r5
   102f4:	4456      	add	r6, sl
   102f6:	e31b      	b.n	10930 <z_prf+0x950>
	} else if (fplus) {
   102f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   102fa:	b123      	cbz	r3, 10306 <z_prf+0x326>
		*buf++ = '+';
   102fc:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
   102fe:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   10302:	4639      	mov	r1, r7
   10304:	e762      	b.n	101cc <z_prf+0x1ec>
	} else if (fspace) {
   10306:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10308:	b10b      	cbz	r3, 1030e <z_prf+0x32e>
		*buf++ = ' ';
   1030a:	2320      	movs	r3, #32
   1030c:	e7f7      	b.n	102fe <z_prf+0x31e>
	} else if (fspace) {
   1030e:	4639      	mov	r1, r7
   10310:	ae1b      	add	r6, sp, #108	; 0x6c
   10312:	e75d      	b.n	101d0 <z_prf+0x1f0>
   10314:	000203c3 	.word	0x000203c3
   10318:	000203c9 	.word	0x000203c9
				u.d = va_arg(vargs, double);
   1031c:	f106 0907 	add.w	r9, r6, #7
   10320:	f029 0907 	bic.w	r9, r9, #7
   10324:	e8f9 2302 	ldrd	r2, r3, [r9], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
   10328:	02d8      	lsls	r0, r3, #11
   1032a:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
   1032e:	02d6      	lsls	r6, r2, #11
   10330:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
	if (sign) {
   10334:	2a00      	cmp	r2, #0
	exp = double_temp >> 52 & 0x7ff;
   10336:	f3c3 510a 	ubfx	r1, r3, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
   1033a:	9604      	str	r6, [sp, #16]
   1033c:	9005      	str	r0, [sp, #20]
	if (sign) {
   1033e:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
   10342:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   10346:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
	if (sign) {
   1034a:	da41      	bge.n	103d0 <z_prf+0x3f0>
		*buf++ = '-';
   1034c:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
   1034e:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   10352:	f10d 076d 	add.w	r7, sp, #109	; 0x6d
	if (exp == 0x7ff) {
   10356:	f240 73ff 	movw	r3, #2047	; 0x7ff
   1035a:	4299      	cmp	r1, r3
   1035c:	d153      	bne.n	10406 <z_prf+0x426>
		if (!fract) {
   1035e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   10362:	430a      	orrs	r2, r1
   10364:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
   10368:	f107 0303 	add.w	r3, r7, #3
   1036c:	d140      	bne.n	103f0 <z_prf+0x410>
			if (isupper(c)) {
   1036e:	2c19      	cmp	r4, #25
   10370:	d838      	bhi.n	103e4 <z_prf+0x404>
				*buf++ = 'I';
   10372:	2249      	movs	r2, #73	; 0x49
   10374:	703a      	strb	r2, [r7, #0]
				*buf++ = 'N';
   10376:	224e      	movs	r2, #78	; 0x4e
   10378:	707a      	strb	r2, [r7, #1]
				*buf++ = 'F';
   1037a:	2246      	movs	r2, #70	; 0x46
		*buf = 0;
   1037c:	2500      	movs	r5, #0
			zero.predot = zero.postdot = zero.trail = 0;
   1037e:	46ab      	mov	fp, r5
   10380:	46a8      	mov	r8, r5
		return buf - start;
   10382:	ae1b      	add	r6, sp, #108	; 0x6c
				*buf++ = 'n';
   10384:	70ba      	strb	r2, [r7, #2]
		*buf = 0;
   10386:	70fd      	strb	r5, [r7, #3]
		return buf - start;
   10388:	1b9b      	subs	r3, r3, r6
				if (fplus || fspace || (buf[0] == '-')) {
   1038a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1038c:	2a00      	cmp	r2, #0
   1038e:	f040 81ec 	bne.w	1076a <z_prf+0x78a>
   10392:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10394:	2a00      	cmp	r2, #0
   10396:	f040 81e8 	bne.w	1076a <z_prf+0x78a>
   1039a:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
   1039e:	f1a7 022d 	sub.w	r2, r7, #45	; 0x2d
   103a2:	4257      	negs	r7, r2
   103a4:	4157      	adcs	r7, r2
				clen += zero.predot + zero.postdot + zero.trail;
   103a6:	eb05 0608 	add.w	r6, r5, r8
   103aa:	4433      	add	r3, r6
   103ac:	eb03 060b 	add.w	r6, r3, fp
				if (!isdigit(buf[prefix])) {
   103b0:	ab22      	add	r3, sp, #136	; 0x88
   103b2:	443b      	add	r3, r7
   103b4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
   103b8:	3b30      	subs	r3, #48	; 0x30
   103ba:	2b09      	cmp	r3, #9
   103bc:	f200 8249 	bhi.w	10852 <z_prf+0x872>
			} else if (fzero) {
   103c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   103c2:	2b00      	cmp	r3, #0
   103c4:	f000 8248 	beq.w	10858 <z_prf+0x878>
   103c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   103ca:	1b9a      	subs	r2, r3, r6
   103cc:	ab1b      	add	r3, sp, #108	; 0x6c
   103ce:	e739      	b.n	10244 <z_prf+0x264>
	} else if (fplus) {
   103d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   103d2:	b10b      	cbz	r3, 103d8 <z_prf+0x3f8>
		*buf++ = '+';
   103d4:	232b      	movs	r3, #43	; 0x2b
   103d6:	e7ba      	b.n	1034e <z_prf+0x36e>
	} else if (fspace) {
   103d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   103da:	b10b      	cbz	r3, 103e0 <z_prf+0x400>
		*buf++ = ' ';
   103dc:	2320      	movs	r3, #32
   103de:	e7b6      	b.n	1034e <z_prf+0x36e>
	} else if (fspace) {
   103e0:	af1b      	add	r7, sp, #108	; 0x6c
   103e2:	e7b8      	b.n	10356 <z_prf+0x376>
				*buf++ = 'i';
   103e4:	2269      	movs	r2, #105	; 0x69
   103e6:	703a      	strb	r2, [r7, #0]
				*buf++ = 'n';
   103e8:	226e      	movs	r2, #110	; 0x6e
   103ea:	707a      	strb	r2, [r7, #1]
				*buf++ = 'f';
   103ec:	2266      	movs	r2, #102	; 0x66
   103ee:	e7c5      	b.n	1037c <z_prf+0x39c>
			if (isupper(c)) {
   103f0:	2c19      	cmp	r4, #25
				*buf++ = 'N';
   103f2:	bf99      	ittee	ls
   103f4:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
   103f6:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
   103f8:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
   103fa:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
   103fc:	bf94      	ite	ls
   103fe:	703a      	strbls	r2, [r7, #0]
				*buf++ = 'n';
   10400:	703a      	strbhi	r2, [r7, #0]
				*buf++ = 'a';
   10402:	7079      	strb	r1, [r7, #1]
   10404:	e7ba      	b.n	1037c <z_prf+0x39c>
	if ((exp | fract) != 0) {
   10406:	9b04      	ldr	r3, [sp, #16]
   10408:	9805      	ldr	r0, [sp, #20]
   1040a:	430b      	orrs	r3, r1
   1040c:	9310      	str	r3, [sp, #64]	; 0x40
   1040e:	17cb      	asrs	r3, r1, #31
   10410:	4303      	orrs	r3, r0
		c = 'f';
   10412:	2c46      	cmp	r4, #70	; 0x46
	if ((exp | fract) != 0) {
   10414:	9311      	str	r3, [sp, #68]	; 0x44
		c = 'f';
   10416:	bf08      	it	eq
   10418:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
   1041a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   1041e:	4313      	orrs	r3, r2
   10420:	f000 8111 	beq.w	10646 <z_prf+0x666>
		if (exp == 0) {
   10424:	2900      	cmp	r1, #0
   10426:	f000 809b 	beq.w	10560 <z_prf+0x580>
		fract |= HIGHBIT64;
   1042a:	2600      	movs	r6, #0
   1042c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
   1042e:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
   10432:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10436:	9317      	str	r3, [sp, #92]	; 0x5c
	while (exp <= -3) {
   10438:	f118 0f02 	cmn.w	r8, #2
   1043c:	f2c0 80a4 	blt.w	10588 <z_prf+0x5a8>
	while (exp > 0) {
   10440:	f1b8 0f00 	cmp.w	r8, #0
   10444:	f300 80dd 	bgt.w	10602 <z_prf+0x622>
		_rlrshift(&fract);
   10448:	a816      	add	r0, sp, #88	; 0x58
		exp++;
   1044a:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
   1044e:	f00c fe9a 	bl	1d186 <_rlrshift>
	while (exp < (0 + 4)) {
   10452:	f1b8 0f04 	cmp.w	r8, #4
   10456:	d1f7      	bne.n	10448 <z_prf+0x468>
		precision = 6;		/* Default precision if none given */
   10458:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
   1045a:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
   1045e:	bfb8      	it	lt
   10460:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
   10462:	2b47      	cmp	r3, #71	; 0x47
   10464:	f040 80f8 	bne.w	10658 <z_prf+0x678>
		if (decexp < (-4 + 1) || decexp > precision) {
   10468:	1cf1      	adds	r1, r6, #3
   1046a:	db02      	blt.n	10472 <z_prf+0x492>
   1046c:	42ae      	cmp	r6, r5
   1046e:	f340 80ed 	ble.w	1064c <z_prf+0x66c>
			c += 'e' - 'g';
   10472:	3c02      	subs	r4, #2
   10474:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
   10476:	2d00      	cmp	r5, #0
   10478:	f000 80f4 	beq.w	10664 <z_prf+0x684>
				precision--;
   1047c:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
   1047e:	f1bb 0f00 	cmp.w	fp, #0
   10482:	f040 80ef 	bne.w	10664 <z_prf+0x684>
   10486:	2d00      	cmp	r5, #0
   10488:	bfd4      	ite	le
   1048a:	f04f 0a00 	movle.w	sl, #0
   1048e:	f04f 0a01 	movgt.w	sl, #1
	if (c == 'f') {
   10492:	2c66      	cmp	r4, #102	; 0x66
   10494:	f040 80e8 	bne.w	10668 <z_prf+0x688>
		if (exp < 0) {
   10498:	eb16 0805 	adds.w	r8, r6, r5
   1049c:	f140 80ec 	bpl.w	10678 <z_prf+0x698>
	digit_count = 16;
   104a0:	2310      	movs	r3, #16
   104a2:	2466      	movs	r4, #102	; 0x66
			exp = 0;
   104a4:	f04f 0800 	mov.w	r8, #0
	digit_count = 16;
   104a8:	9315      	str	r3, [sp, #84]	; 0x54
	ltemp = 0x0800000000000000;
   104aa:	2200      	movs	r2, #0
   104ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   104b0:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	while (exp--) {
   104b4:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
   104b8:	f080 80e0 	bcs.w	1067c <z_prf+0x69c>
	fract += ltemp;
   104bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   104be:	9a18      	ldr	r2, [sp, #96]	; 0x60
   104c0:	9919      	ldr	r1, [sp, #100]	; 0x64
   104c2:	189b      	adds	r3, r3, r2
   104c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   104c6:	eb41 0202 	adc.w	r2, r1, r2
   104ca:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
	if ((fract >> 32) & 0xF0000000) {
   104ce:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
   104d2:	9312      	str	r3, [sp, #72]	; 0x48
   104d4:	2300      	movs	r3, #0
   104d6:	9313      	str	r3, [sp, #76]	; 0x4c
   104d8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   104dc:	4313      	orrs	r3, r2
   104de:	d006      	beq.n	104ee <z_prf+0x50e>
		_ldiv5(&fract);
   104e0:	a816      	add	r0, sp, #88	; 0x58
   104e2:	f00c fe61 	bl	1d1a8 <_ldiv5>
		_rlrshift(&fract);
   104e6:	a816      	add	r0, sp, #88	; 0x58
   104e8:	f00c fe4d 	bl	1d186 <_rlrshift>
		decexp++;
   104ec:	3601      	adds	r6, #1
	if (c == 'f') {
   104ee:	2c66      	cmp	r4, #102	; 0x66
   104f0:	f040 80e1 	bne.w	106b6 <z_prf+0x6d6>
		if (decexp > 0) {
   104f4:	2e00      	cmp	r6, #0
   104f6:	f340 80c8 	ble.w	1068a <z_prf+0x6aa>
			while (decexp > 0 && digit_count > 0) {
   104fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
   104fc:	2b00      	cmp	r3, #0
   104fe:	dd07      	ble.n	10510 <z_prf+0x530>
				*buf++ = _get_digit(&fract, &digit_count);
   10500:	a915      	add	r1, sp, #84	; 0x54
   10502:	a816      	add	r0, sp, #88	; 0x58
   10504:	f00c fe7b 	bl	1d1fe <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   10508:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
   1050a:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
   1050e:	d1f4      	bne.n	104fa <z_prf+0x51a>
			zp->predot = decexp;
   10510:	46b0      	mov	r8, r6
   10512:	463b      	mov	r3, r7
			decexp = 0;
   10514:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
   10516:	f1bb 0f00 	cmp.w	fp, #0
   1051a:	d101      	bne.n	10520 <z_prf+0x540>
   1051c:	2d00      	cmp	r5, #0
   1051e:	dd15      	ble.n	1054c <z_prf+0x56c>
			*buf++ = '.';
   10520:	222e      	movs	r2, #46	; 0x2e
   10522:	f803 2b01 	strb.w	r2, [r3], #1
		if (decexp < 0 && precision > 0) {
   10526:	2e00      	cmp	r6, #0
   10528:	f000 80c0 	beq.w	106ac <z_prf+0x6cc>
   1052c:	2d00      	cmp	r5, #0
   1052e:	f340 80bf 	ble.w	106b0 <z_prf+0x6d0>
			zp->postdot = -decexp;
   10532:	f1c6 0b00 	rsb	fp, r6, #0
   10536:	45ab      	cmp	fp, r5
   10538:	bfa8      	it	ge
   1053a:	46ab      	movge	fp, r5
			precision -= zp->postdot;
   1053c:	eba5 050b 	sub.w	r5, r5, fp
		while (precision > 0 && digit_count > 0) {
   10540:	2d00      	cmp	r5, #0
   10542:	dd03      	ble.n	1054c <z_prf+0x56c>
   10544:	9a15      	ldr	r2, [sp, #84]	; 0x54
   10546:	2a00      	cmp	r2, #0
   10548:	f300 80a6 	bgt.w	10698 <z_prf+0x6b8>
	if (prune_zero) {
   1054c:	f1ba 0f00 	cmp.w	sl, #0
   10550:	f040 80c6 	bne.w	106e0 <z_prf+0x700>
	*buf = 0;
   10554:	2200      	movs	r2, #0
	return buf - start;
   10556:	ae1b      	add	r6, sp, #108	; 0x6c
	*buf = 0;
   10558:	701a      	strb	r2, [r3, #0]
	return buf - start;
   1055a:	1b9b      	subs	r3, r3, r6
   1055c:	e715      	b.n	1038a <z_prf+0x3aa>
				exp--;
   1055e:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
   10560:	9b04      	ldr	r3, [sp, #16]
   10562:	18db      	adds	r3, r3, r3
   10564:	9304      	str	r3, [sp, #16]
   10566:	9b05      	ldr	r3, [sp, #20]
   10568:	415b      	adcs	r3, r3
   1056a:	9305      	str	r3, [sp, #20]
   1056c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10570:	2a00      	cmp	r2, #0
   10572:	f173 0300 	sbcs.w	r3, r3, #0
   10576:	daf2      	bge.n	1055e <z_prf+0x57e>
   10578:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1057c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   10580:	e753      	b.n	1042a <z_prf+0x44a>
			_rlrshift(&fract);
   10582:	a816      	add	r0, sp, #88	; 0x58
   10584:	f00c fdff 	bl	1d186 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
   10588:	e9dd ec16 	ldrd	lr, ip, [sp, #88]	; 0x58
   1058c:	2300      	movs	r3, #0
   1058e:	2100      	movs	r1, #0
   10590:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
   10594:	930d      	str	r3, [sp, #52]	; 0x34
   10596:	48bc      	ldr	r0, [pc, #752]	; (10888 <z_prf+0x8a8>)
   10598:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   1059c:	4299      	cmp	r1, r3
   1059e:	bf08      	it	eq
   105a0:	4290      	cmpeq	r0, r2
   105a2:	f108 0801 	add.w	r8, r8, #1
   105a6:	d3ec      	bcc.n	10582 <z_prf+0x5a2>
		fract *= 5U;
   105a8:	2005      	movs	r0, #5
   105aa:	fbae 2300 	umull	r2, r3, lr, r0
   105ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
   105b2:	9b07      	ldr	r3, [sp, #28]
		decexp--;
   105b4:	3e01      	subs	r6, #1
		fract *= 5U;
   105b6:	fb00 330c 	mla	r3, r0, ip, r3
		decexp--;
   105ba:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
   105be:	9307      	str	r3, [sp, #28]
   105c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   105c4:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		while ((fract >> 32) <= (MAXFP1 / 2)) {
   105c8:	2100      	movs	r1, #0
   105ca:	2300      	movs	r3, #0
   105cc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   105d0:	9807      	ldr	r0, [sp, #28]
   105d2:	428b      	cmp	r3, r1
   105d4:	bf08      	it	eq
   105d6:	4282      	cmpeq	r2, r0
   105d8:	d208      	bcs.n	105ec <z_prf+0x60c>
   105da:	f1bc 0f00 	cmp.w	ip, #0
   105de:	f43f af2b 	beq.w	10438 <z_prf+0x458>
   105e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   105e6:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   105ea:	e725      	b.n	10438 <z_prf+0x458>
			fract <<= 1;
   105ec:	9b06      	ldr	r3, [sp, #24]
			exp--;
   105ee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			fract <<= 1;
   105f2:	18db      	adds	r3, r3, r3
   105f4:	9306      	str	r3, [sp, #24]
   105f6:	9b07      	ldr	r3, [sp, #28]
   105f8:	f04f 0c01 	mov.w	ip, #1
   105fc:	415b      	adcs	r3, r3
   105fe:	9307      	str	r3, [sp, #28]
			exp--;
   10600:	e7e2      	b.n	105c8 <z_prf+0x5e8>
		_ldiv5(&fract);
   10602:	a816      	add	r0, sp, #88	; 0x58
   10604:	f00c fdd0 	bl	1d1a8 <_ldiv5>
		exp--;
   10608:	e9dd ae16 	ldrd	sl, lr, [sp, #88]	; 0x58
		decexp++;
   1060c:	f04f 0c00 	mov.w	ip, #0
		exp--;
   10610:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
   10614:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
   10616:	2300      	movs	r3, #0
   10618:	2100      	movs	r1, #0
   1061a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1061e:	4299      	cmp	r1, r3
   10620:	bf08      	it	eq
   10622:	4570      	cmpeq	r0, lr
   10624:	d206      	bcs.n	10634 <z_prf+0x654>
   10626:	f1bc 0f00 	cmp.w	ip, #0
   1062a:	f43f af09 	beq.w	10440 <z_prf+0x460>
   1062e:	e9cd ae16 	strd	sl, lr, [sp, #88]	; 0x58
   10632:	e705      	b.n	10440 <z_prf+0x460>
			fract <<= 1;
   10634:	eb1a 0a0a 	adds.w	sl, sl, sl
   10638:	eb4e 0e0e 	adc.w	lr, lr, lr
			exp--;
   1063c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   10640:	f04f 0c01 	mov.w	ip, #1
   10644:	e7e7      	b.n	10616 <z_prf+0x636>
	if ((exp | fract) != 0) {
   10646:	2600      	movs	r6, #0
   10648:	46b0      	mov	r8, r6
   1064a:	e6fd      	b.n	10448 <z_prf+0x468>
			precision -= decexp;
   1064c:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
   1064e:	f1bb 0f00 	cmp.w	fp, #0
   10652:	d104      	bne.n	1065e <z_prf+0x67e>
			c = 'f';
   10654:	2466      	movs	r4, #102	; 0x66
   10656:	e716      	b.n	10486 <z_prf+0x4a6>
	prune_zero = false;		/* Assume trailing 0's allowed     */
   10658:	f04f 0a00 	mov.w	sl, #0
   1065c:	e719      	b.n	10492 <z_prf+0x4b2>
   1065e:	f04f 0a00 	mov.w	sl, #0
   10662:	e719      	b.n	10498 <z_prf+0x4b8>
   10664:	f04f 0a00 	mov.w	sl, #0
		exp = precision + 1;
   10668:	f105 0801 	add.w	r8, r5, #1
	digit_count = 16;
   1066c:	2310      	movs	r3, #16
   1066e:	4598      	cmp	r8, r3
   10670:	9315      	str	r3, [sp, #84]	; 0x54
	if (exp > 16) {
   10672:	bfa8      	it	ge
   10674:	4698      	movge	r8, r3
   10676:	e718      	b.n	104aa <z_prf+0x4ca>
		if (exp < 0) {
   10678:	2466      	movs	r4, #102	; 0x66
   1067a:	e7f7      	b.n	1066c <z_prf+0x68c>
		_ldiv5(&ltemp);
   1067c:	a818      	add	r0, sp, #96	; 0x60
   1067e:	f00c fd93 	bl	1d1a8 <_ldiv5>
		_rlrshift(&ltemp);
   10682:	a818      	add	r0, sp, #96	; 0x60
   10684:	f00c fd7f 	bl	1d186 <_rlrshift>
   10688:	e714      	b.n	104b4 <z_prf+0x4d4>
			*buf++ = '0';
   1068a:	463b      	mov	r3, r7
   1068c:	2230      	movs	r2, #48	; 0x30
			zero.predot = zero.postdot = zero.trail = 0;
   1068e:	f04f 0800 	mov.w	r8, #0
			*buf++ = '0';
   10692:	f803 2b01 	strb.w	r2, [r3], #1
   10696:	e73e      	b.n	10516 <z_prf+0x536>
			*buf++ = _get_digit(&fract, &digit_count);
   10698:	a915      	add	r1, sp, #84	; 0x54
   1069a:	a816      	add	r0, sp, #88	; 0x58
   1069c:	9306      	str	r3, [sp, #24]
   1069e:	f00c fdae 	bl	1d1fe <_get_digit>
   106a2:	9b06      	ldr	r3, [sp, #24]
			precision--;
   106a4:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
   106a6:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
   106aa:	e749      	b.n	10540 <z_prf+0x560>
			zero.predot = zero.postdot = zero.trail = 0;
   106ac:	46b3      	mov	fp, r6
   106ae:	e747      	b.n	10540 <z_prf+0x560>
   106b0:	f04f 0b00 	mov.w	fp, #0
   106b4:	e74a      	b.n	1054c <z_prf+0x56c>
		*buf = _get_digit(&fract, &digit_count);
   106b6:	a915      	add	r1, sp, #84	; 0x54
   106b8:	a816      	add	r0, sp, #88	; 0x58
   106ba:	f00c fda0 	bl	1d1fe <_get_digit>
		if (*buf++ != '0') {
   106be:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
   106c0:	7038      	strb	r0, [r7, #0]
			decexp--;
   106c2:	bf18      	it	ne
   106c4:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
   106c8:	f1bb 0f00 	cmp.w	fp, #0
   106cc:	d138      	bne.n	10740 <z_prf+0x760>
   106ce:	2d00      	cmp	r5, #0
   106d0:	dc36      	bgt.n	10740 <z_prf+0x760>
		if (*buf++ != '0') {
   106d2:	1c7b      	adds	r3, r7, #1
	if (prune_zero) {
   106d4:	f1ba 0f00 	cmp.w	sl, #0
   106d8:	d044      	beq.n	10764 <z_prf+0x784>
			zero.predot = zero.postdot = zero.trail = 0;
   106da:	f04f 0b00 	mov.w	fp, #0
   106de:	46d8      	mov	r8, fp
		while (*--buf == '0')
   106e0:	461a      	mov	r2, r3
   106e2:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
   106e6:	2930      	cmp	r1, #48	; 0x30
   106e8:	d0fa      	beq.n	106e0 <z_prf+0x700>
		if (*buf != '.') {
   106ea:	292e      	cmp	r1, #46	; 0x2e
   106ec:	bf18      	it	ne
   106ee:	4613      	movne	r3, r2
   106f0:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
   106f2:	f004 02df 	and.w	r2, r4, #223	; 0xdf
   106f6:	2a45      	cmp	r2, #69	; 0x45
   106f8:	f47f af2c 	bne.w	10554 <z_prf+0x574>
		if (decexp < 0) {
   106fc:	2e00      	cmp	r6, #0
			*buf++ = '-';
   106fe:	bfb4      	ite	lt
   10700:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
   10702:	222b      	movge	r2, #43	; 0x2b
		*buf++ = c;
   10704:	4619      	mov	r1, r3
			decexp = -decexp;
   10706:	bfb8      	it	lt
   10708:	4276      	neglt	r6, r6
		if (decexp >= 100) {
   1070a:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
   1070c:	f801 4b02 	strb.w	r4, [r1], #2
			*buf++ = '-';
   10710:	705a      	strb	r2, [r3, #1]
		if (decexp >= 100) {
   10712:	dd08      	ble.n	10726 <z_prf+0x746>
			*buf++ = (decexp / 100) + '0';
   10714:	2064      	movs	r0, #100	; 0x64
   10716:	fb96 f2f0 	sdiv	r2, r6, r0
			decexp %= 100;
   1071a:	fb00 6612 	mls	r6, r0, r2, r6
			*buf++ = (decexp / 100) + '0';
   1071e:	f102 0430 	add.w	r4, r2, #48	; 0x30
   10722:	1cd9      	adds	r1, r3, #3
   10724:	709c      	strb	r4, [r3, #2]
		*buf++ = (decexp / 10) + '0';
   10726:	200a      	movs	r0, #10
   10728:	fb96 f2f0 	sdiv	r2, r6, r0
   1072c:	460b      	mov	r3, r1
		decexp %= 10;
   1072e:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
   10732:	f102 0430 	add.w	r4, r2, #48	; 0x30
		*buf++ = decexp + '0';
   10736:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   10738:	f803 4b02 	strb.w	r4, [r3], #2
		*buf++ = decexp + '0';
   1073c:	704e      	strb	r6, [r1, #1]
   1073e:	e709      	b.n	10554 <z_prf+0x574>
			*buf++ = '.';
   10740:	222e      	movs	r2, #46	; 0x2e
   10742:	1cbb      	adds	r3, r7, #2
   10744:	707a      	strb	r2, [r7, #1]
		while (precision > 0 && digit_count > 0) {
   10746:	2d00      	cmp	r5, #0
   10748:	ddc4      	ble.n	106d4 <z_prf+0x6f4>
   1074a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1074c:	2a00      	cmp	r2, #0
   1074e:	ddc1      	ble.n	106d4 <z_prf+0x6f4>
			*buf++ = _get_digit(&fract, &digit_count);
   10750:	a915      	add	r1, sp, #84	; 0x54
   10752:	a816      	add	r0, sp, #88	; 0x58
   10754:	9306      	str	r3, [sp, #24]
   10756:	f00c fd52 	bl	1d1fe <_get_digit>
   1075a:	9b06      	ldr	r3, [sp, #24]
			precision--;
   1075c:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
   1075e:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
   10762:	e7f0      	b.n	10746 <z_prf+0x766>
			zero.predot = zero.postdot = zero.trail = 0;
   10764:	46d3      	mov	fp, sl
   10766:	46d0      	mov	r8, sl
   10768:	e7c3      	b.n	106f2 <z_prf+0x712>
					prefix = 1;
   1076a:	2701      	movs	r7, #1
   1076c:	e61b      	b.n	103a6 <z_prf+0x3c6>
				switch (i) {
   1076e:	46b1      	mov	r9, r6
   10770:	2f68      	cmp	r7, #104	; 0x68
   10772:	f859 3b04 	ldr.w	r3, [r9], #4
   10776:	d005      	beq.n	10784 <z_prf+0x7a4>
   10778:	dc01      	bgt.n	1077e <z_prf+0x79e>
   1077a:	2f48      	cmp	r7, #72	; 0x48
   1077c:	d007      	beq.n	1078e <z_prf+0x7ae>
					*va_arg(vargs, int *) = count;
   1077e:	9a01      	ldr	r2, [sp, #4]
   10780:	601a      	str	r2, [r3, #0]
					break;
   10782:	e001      	b.n	10788 <z_prf+0x7a8>
					*va_arg(vargs, short *) = count;
   10784:	9a01      	ldr	r2, [sp, #4]
   10786:	801a      	strh	r2, [r3, #0]
				continue;
   10788:	464e      	mov	r6, r9
   1078a:	9a08      	ldr	r2, [sp, #32]
   1078c:	e430      	b.n	fff0 <z_prf+0x10>
					*va_arg(vargs, char *) = count;
   1078e:	9a01      	ldr	r2, [sp, #4]
   10790:	701a      	strb	r2, [r3, #0]
					break;
   10792:	e7f9      	b.n	10788 <z_prf+0x7a8>
				val = (uintptr_t) va_arg(vargs, void *);
   10794:	46b1      	mov	r9, r6
		*buf++ = '0';
   10796:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16);
   1079a:	2210      	movs	r2, #16
   1079c:	f859 1b04 	ldr.w	r1, [r9], #4
   107a0:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
		*buf++ = '0';
   107a4:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
   107a8:	f00c fccb 	bl	1d142 <_to_x>
				prefix = 2;
   107ac:	2702      	movs	r7, #2
	return len + (buf - buf0);
   107ae:	1c86      	adds	r6, r0, #2
				break;
   107b0:	e51e      	b.n	101f0 <z_prf+0x210>
					if (cptr[clen] == '\0') {
   107b2:	5d9a      	ldrb	r2, [r3, r6]
   107b4:	2a00      	cmp	r2, #0
   107b6:	d04a      	beq.n	1084e <z_prf+0x86e>
				for (clen = 0; clen < precision; clen++) {
   107b8:	3601      	adds	r6, #1
   107ba:	e52e      	b.n	1021a <z_prf+0x23a>
	if (alt_form) {
   107bc:	ac1b      	add	r4, sp, #108	; 0x6c
	return (buf - buf0) + _to_x(buf, value, 8);
   107be:	2208      	movs	r2, #8
   107c0:	4620      	mov	r0, r4
   107c2:	f00c fcbe 	bl	1d142 <_to_x>
   107c6:	ae1b      	add	r6, sp, #108	; 0x6c
   107c8:	1ba6      	subs	r6, r4, r6
   107ca:	4406      	add	r6, r0
			prefix = 0;
   107cc:	2700      	movs	r7, #0
   107ce:	e50f      	b.n	101f0 <z_prf+0x210>
		*buf++ = '0';
   107d0:	f10d 046d 	add.w	r4, sp, #109	; 0x6d
   107d4:	e7f3      	b.n	107be <z_prf+0x7de>
				} else if (c == 'u') {
   107d6:	2c75      	cmp	r4, #117	; 0x75
   107d8:	d105      	bne.n	107e6 <z_prf+0x806>
	return _to_x(buf, value, 10);
   107da:	220a      	movs	r2, #10
   107dc:	a81b      	add	r0, sp, #108	; 0x6c
   107de:	f00c fcb0 	bl	1d142 <_to_x>
   107e2:	4606      	mov	r6, r0
   107e4:	e7f2      	b.n	107cc <z_prf+0x7ec>
	if (alt_form) {
   107e6:	f1bb 0f00 	cmp.w	fp, #0
   107ea:	d012      	beq.n	10812 <z_prf+0x832>
		*buf++ = '0';
   107ec:	f647 0330 	movw	r3, #30768	; 0x7830
		*buf++ = 'x';
   107f0:	f10d 086e 	add.w	r8, sp, #110	; 0x6e
		*buf++ = '0';
   107f4:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
   107f8:	2210      	movs	r2, #16
   107fa:	4640      	mov	r0, r8
   107fc:	f00c fca1 	bl	1d142 <_to_x>
	if (prefix == 'X') {
   10800:	2c58      	cmp	r4, #88	; 0x58
   10802:	d009      	beq.n	10818 <z_prf+0x838>
	return len + (buf - buf0);
   10804:	ae1b      	add	r6, sp, #108	; 0x6c
   10806:	eba8 0606 	sub.w	r6, r8, r6
   1080a:	4406      	add	r6, r0
						prefix = 2;
   1080c:	ea4f 074b 	mov.w	r7, fp, lsl #1
   10810:	e4ee      	b.n	101f0 <z_prf+0x210>
	if (alt_form) {
   10812:	f10d 086c 	add.w	r8, sp, #108	; 0x6c
   10816:	e7ef      	b.n	107f8 <z_prf+0x818>
   10818:	aa1b      	add	r2, sp, #108	; 0x6c
		if (*buf >= 'a' && *buf <= 'z') {
   1081a:	f812 3b01 	ldrb.w	r3, [r2], #1
   1081e:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   10822:	2919      	cmp	r1, #25
   10824:	d803      	bhi.n	1082e <z_prf+0x84e>
			*buf += 'A' - 'a';
   10826:	3b20      	subs	r3, #32
   10828:	f802 3c01 	strb.w	r3, [r2, #-1]
   1082c:	e7f5      	b.n	1081a <z_prf+0x83a>
	} while (*buf++);
   1082e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   10832:	2b00      	cmp	r3, #0
   10834:	d1f1      	bne.n	1081a <z_prf+0x83a>
   10836:	e7e5      	b.n	10804 <z_prf+0x824>
				PUTC('%');
   10838:	9903      	ldr	r1, [sp, #12]
   1083a:	4620      	mov	r0, r4
   1083c:	f7ff bbe1 	b.w	10002 <z_prf+0x22>
				count++;
   10840:	9b01      	ldr	r3, [sp, #4]
   10842:	3301      	adds	r3, #1
				count += 2;
   10844:	9301      	str	r3, [sp, #4]
				continue;
   10846:	46b1      	mov	r9, r6
   10848:	e79e      	b.n	10788 <z_prf+0x7a8>
					prefix = 1;
   1084a:	2701      	movs	r7, #1
   1084c:	e4d0      	b.n	101f0 <z_prf+0x210>
   1084e:	4615      	mov	r5, r2
   10850:	e4e8      	b.n	10224 <z_prf+0x244>
			cptr = buf;
   10852:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = 0;
   10854:	2200      	movs	r2, #0
   10856:	e4f7      	b.n	10248 <z_prf+0x268>
   10858:	ab1b      	add	r3, sp, #108	; 0x6c
   1085a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1085c:	e4f4      	b.n	10248 <z_prf+0x268>
   1085e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
					PUTC(' ');
   10862:	9903      	ldr	r1, [sp, #12]
   10864:	9b02      	ldr	r3, [sp, #8]
   10866:	2020      	movs	r0, #32
   10868:	4798      	blx	r3
   1086a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   1086e:	3001      	adds	r0, #1
   10870:	f43f abcc 	beq.w	1000c <z_prf+0x2c>
				while (width-- > 0) {
   10874:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
   10878:	d2f1      	bcs.n	1085e <z_prf+0x87e>
				count += width;
   1087a:	9901      	ldr	r1, [sp, #4]
   1087c:	4421      	add	r1, r4
   1087e:	9101      	str	r1, [sp, #4]
				while (width-- > 0) {
   10880:	4654      	mov	r4, sl
   10882:	e4eb      	b.n	1025c <z_prf+0x27c>
   10884:	46a2      	mov	sl, r4
   10886:	e7f5      	b.n	10874 <z_prf+0x894>
   10888:	33333332 	.word	0x33333332
				PUTC(*cptr++);
   1088c:	f813 0b01 	ldrb.w	r0, [r3], #1
   10890:	9903      	ldr	r1, [sp, #12]
   10892:	9309      	str	r3, [sp, #36]	; 0x24
   10894:	9b02      	ldr	r3, [sp, #8]
   10896:	920a      	str	r2, [sp, #40]	; 0x28
   10898:	4798      	blx	r3
   1089a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   1089e:	3001      	adds	r0, #1
   108a0:	f47f acde 	bne.w	10260 <z_prf+0x280>
   108a4:	f7ff bbb2 	b.w	1000c <z_prf+0x2c>
				PUTC('0');
   108a8:	9903      	ldr	r1, [sp, #12]
   108aa:	2030      	movs	r0, #48	; 0x30
   108ac:	9b02      	ldr	r3, [sp, #8]
   108ae:	9209      	str	r2, [sp, #36]	; 0x24
   108b0:	4798      	blx	r3
   108b2:	3001      	adds	r0, #1
   108b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   108b6:	f47f acd6 	bne.w	10266 <z_prf+0x286>
   108ba:	f7ff bba7 	b.w	1000c <z_prf+0x2c>
					PUTC(c);
   108be:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
   108c2:	4798      	blx	r3
   108c4:	3001      	adds	r0, #1
   108c6:	f43f aba1 	beq.w	1000c <z_prf+0x2c>
					c = *++cptr;
   108ca:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
   108ce:	e4d6      	b.n	1027e <z_prf+0x29e>
					PUTC('0');
   108d0:	9903      	ldr	r1, [sp, #12]
   108d2:	2030      	movs	r0, #48	; 0x30
   108d4:	9b02      	ldr	r3, [sp, #8]
   108d6:	4798      	blx	r3
   108d8:	3001      	adds	r0, #1
   108da:	f47f acd8 	bne.w	1028e <z_prf+0x2ae>
   108de:	f7ff bb95 	b.w	1000c <z_prf+0x2c>
					PUTC('0');
   108e2:	9903      	ldr	r1, [sp, #12]
   108e4:	2030      	movs	r0, #48	; 0x30
   108e6:	9b02      	ldr	r3, [sp, #8]
   108e8:	4798      	blx	r3
   108ea:	3001      	adds	r0, #1
   108ec:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   108f0:	f47f ace7 	bne.w	102c2 <z_prf+0x2e2>
   108f4:	f7ff bb8a 	b.w	1000c <z_prf+0x2c>
					PUTC(c);
   108f8:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
   108fc:	4798      	blx	r3
   108fe:	3001      	adds	r0, #1
   10900:	f43f ab84 	beq.w	1000c <z_prf+0x2c>
					c = *++cptr;
   10904:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
   10908:	e4e5      	b.n	102d6 <z_prf+0x2f6>
					PUTC('0');
   1090a:	9903      	ldr	r1, [sp, #12]
   1090c:	2030      	movs	r0, #48	; 0x30
   1090e:	9b02      	ldr	r3, [sp, #8]
   10910:	4798      	blx	r3
   10912:	3001      	adds	r0, #1
   10914:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   10918:	f47f ace8 	bne.w	102ec <z_prf+0x30c>
   1091c:	f7ff bb76 	b.w	1000c <z_prf+0x2c>
				PUTC(*cptr++);
   10920:	9903      	ldr	r1, [sp, #12]
   10922:	f81a 0b01 	ldrb.w	r0, [sl], #1
   10926:	9b02      	ldr	r3, [sp, #8]
   10928:	4798      	blx	r3
   1092a:	3001      	adds	r0, #1
   1092c:	f43f ab6e 	beq.w	1000c <z_prf+0x2c>
   10930:	eba6 030a 	sub.w	r3, r6, sl
			while (clen-- > 0) {
   10934:	2b00      	cmp	r3, #0
   10936:	dcf3      	bgt.n	10920 <z_prf+0x940>
			count += clen;
   10938:	9b01      	ldr	r3, [sp, #4]
   1093a:	9a06      	ldr	r2, [sp, #24]
			if (width > 0) {
   1093c:	2c00      	cmp	r4, #0
			count += clen;
   1093e:	4413      	add	r3, r2
   10940:	9301      	str	r3, [sp, #4]
			if (width > 0) {
   10942:	f77f af21 	ble.w	10788 <z_prf+0x7a8>
   10946:	4625      	mov	r5, r4
   10948:	e006      	b.n	10958 <z_prf+0x978>
					PUTC(' ');
   1094a:	9903      	ldr	r1, [sp, #12]
   1094c:	2020      	movs	r0, #32
   1094e:	9b02      	ldr	r3, [sp, #8]
   10950:	4798      	blx	r3
   10952:	3001      	adds	r0, #1
   10954:	f43f ab5a 	beq.w	1000c <z_prf+0x2c>
				while (width-- > 0) {
   10958:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
   1095c:	d2f5      	bcs.n	1094a <z_prf+0x96a>
				count += width;
   1095e:	9b01      	ldr	r3, [sp, #4]
   10960:	4423      	add	r3, r4
   10962:	9301      	str	r3, [sp, #4]
   10964:	e710      	b.n	10788 <z_prf+0x7a8>
   10966:	bf00      	nop

00010968 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   10968:	4b01      	ldr	r3, [pc, #4]	; (10970 <__stdout_hook_install+0x8>)
   1096a:	6018      	str	r0, [r3, #0]
}
   1096c:	4770      	bx	lr
   1096e:	bf00      	nop
   10970:	2002c3fc 	.word	0x2002c3fc

00010974 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
   10974:	b40c      	push	{r2, r3}
   10976:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   10978:	b909      	cbnz	r1, 1097e <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
   1097a:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
   1097e:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
   10982:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   10984:	9a06      	ldr	r2, [sp, #24]
   10986:	a902      	add	r1, sp, #8
   10988:	4805      	ldr	r0, [pc, #20]	; (109a0 <snprintf+0x2c>)
	va_start(vargs, format);
   1098a:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   1098c:	f7ff fb28 	bl	ffe0 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
   10990:	2200      	movs	r2, #0
   10992:	9b02      	ldr	r3, [sp, #8]
   10994:	701a      	strb	r2, [r3, #0]
	return r;
}
   10996:	b005      	add	sp, #20
   10998:	f85d eb04 	ldr.w	lr, [sp], #4
   1099c:	b002      	add	sp, #8
   1099e:	4770      	bx	lr
   109a0:	0001d233 	.word	0x0001d233

000109a4 <sprintf>:

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
   109a4:	b40e      	push	{r1, r2, r3}
   109a6:	b50f      	push	{r0, r1, r2, r3, lr}

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   109a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
   109ac:	ab05      	add	r3, sp, #20
   109ae:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
   109b2:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   109b4:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   109b6:	4806      	ldr	r0, [pc, #24]	; (109d0 <sprintf+0x2c>)
   109b8:	a902      	add	r1, sp, #8
	va_start(vargs, format);
   109ba:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   109bc:	f7ff fb10 	bl	ffe0 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
   109c0:	2200      	movs	r2, #0
   109c2:	9b02      	ldr	r3, [sp, #8]
   109c4:	701a      	strb	r2, [r3, #0]
	return r;
}
   109c6:	b004      	add	sp, #16
   109c8:	f85d eb04 	ldr.w	lr, [sp], #4
   109cc:	b003      	add	sp, #12
   109ce:	4770      	bx	lr
   109d0:	0001d233 	.word	0x0001d233

000109d4 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   109d4:	b538      	push	{r3, r4, r5, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   109d6:	4c07      	ldr	r4, [pc, #28]	; (109f4 <net_if_init+0x20>)
   109d8:	4d07      	ldr	r5, [pc, #28]	; (109f8 <net_if_init+0x24>)
   109da:	42ac      	cmp	r4, r5
   109dc:	d100      	bne.n	109e0 <net_if_init+0xc>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   109de:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   109e0:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   109e2:	681b      	ldr	r3, [r3, #0]
   109e4:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
   109e6:	b11b      	cbz	r3, 109f0 <net_if_init+0x1c>
   109e8:	681b      	ldr	r3, [r3, #0]
   109ea:	b10b      	cbz	r3, 109f0 <net_if_init+0x1c>
	api->init(iface);
   109ec:	4620      	mov	r0, r4
   109ee:	4798      	blx	r3
	     iface++, if_count++) {
   109f0:	3420      	adds	r4, #32
   109f2:	e7f2      	b.n	109da <net_if_init+0x6>
   109f4:	2002c600 	.word	0x2002c600
   109f8:	2002c620 	.word	0x2002c620

000109fc <net_if_post_init>:

void net_if_post_init(void)
{
   109fc:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   109fe:	4c08      	ldr	r4, [pc, #32]	; (10a20 <net_if_post_init+0x24>)
   10a00:	4d08      	ldr	r5, [pc, #32]	; (10a24 <net_if_post_init+0x28>)
   10a02:	42ac      	cmp	r4, r5
   10a04:	d100      	bne.n	10a08 <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   10a06:	bd38      	pop	{r3, r4, r5, pc}
	return atomic_test_bit(iface->if_dev->flags, value);
   10a08:	6820      	ldr	r0, [r4, #0]
   10a0a:	2103      	movs	r1, #3
   10a0c:	300c      	adds	r0, #12
   10a0e:	f00c fc24 	bl	1d25a <atomic_test_bit>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   10a12:	b910      	cbnz	r0, 10a1a <net_if_post_init+0x1e>
			net_if_up(iface);
   10a14:	4620      	mov	r0, r4
   10a16:	f00c fc2f 	bl	1d278 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   10a1a:	3420      	adds	r4, #32
   10a1c:	e7f1      	b.n	10a02 <net_if_post_init+0x6>
   10a1e:	bf00      	nop
   10a20:	2002c600 	.word	0x2002c600
   10a24:	2002c620 	.word	0x2002c620

00010a28 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	u16_t *w;
	u8_t i, bl, bh, longest = 1U;
	s8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   10a28:	2300      	movs	r3, #0
{
   10a2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	u16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   10a2e:	2802      	cmp	r0, #2
{
   10a30:	b089      	sub	sp, #36	; 0x24
   10a32:	4681      	mov	r9, r0
   10a34:	468a      	mov	sl, r1
   10a36:	4690      	mov	r8, r2
	unsigned char zeros[8] = { 0 };
   10a38:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (family == AF_INET6) {
   10a3c:	d13c      	bne.n	10ab8 <z_impl_net_addr_ntop+0x90>
		addr6 = (struct in6_addr *)src;
		w = (u16_t *)addr6->s6_addr16;
   10a3e:	aa06      	add	r2, sp, #24
   10a40:	4610      	mov	r0, r2
   10a42:	9104      	str	r1, [sp, #16]
{
   10a44:	4619      	mov	r1, r3
   10a46:	e006      	b.n	10a56 <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   10a48:	7804      	ldrb	r4, [r0, #0]
   10a4a:	3101      	adds	r1, #1
   10a4c:	3401      	adds	r4, #1
   10a4e:	7004      	strb	r4, [r0, #0]
			for (j = i; j < 8; j++) {
   10a50:	b2cc      	uxtb	r4, r1
   10a52:	2c07      	cmp	r4, #7
   10a54:	d803      	bhi.n	10a5e <z_impl_net_addr_ntop+0x36>
				if (UNALIGNED_GET(&w[j]) != 0) {
   10a56:	f83a 4011 	ldrh.w	r4, [sl, r1, lsl #1]
   10a5a:	2c00      	cmp	r4, #0
   10a5c:	d0f4      	beq.n	10a48 <z_impl_net_addr_ntop+0x20>
   10a5e:	3301      	adds	r3, #1
		for (i = 0U; i < 8; i++) {
   10a60:	2b08      	cmp	r3, #8
   10a62:	f100 0001 	add.w	r0, r0, #1
   10a66:	d1ed      	bne.n	10a44 <z_impl_net_addr_ntop+0x1c>
	s8_t pos = -1;
   10a68:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1U;
   10a6c:	2701      	movs	r7, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   10a6e:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   10a70:	f812 1b01 	ldrb.w	r1, [r2], #1
   10a74:	42b9      	cmp	r1, r7
				longest = zeros[i];
				pos = i;
   10a76:	bf88      	it	hi
   10a78:	b25e      	sxtbhi	r6, r3
		for (i = 0U; i < 8; i++) {
   10a7a:	f103 0301 	add.w	r3, r3, #1
   10a7e:	b2db      	uxtb	r3, r3
				pos = i;
   10a80:	bf88      	it	hi
   10a82:	460f      	movhi	r7, r1
		for (i = 0U; i < 8; i++) {
   10a84:	2b08      	cmp	r3, #8
   10a86:	d1f3      	bne.n	10a70 <z_impl_net_addr_ntop+0x48>
		len = 8;
   10a88:	9303      	str	r3, [sp, #12]
   10a8a:	2f01      	cmp	r7, #1
   10a8c:	f04f 033a 	mov.w	r3, #58	; 0x3a
   10a90:	bf08      	it	eq
   10a92:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
   10a96:	9302      	str	r3, [sp, #8]
	bool needcolon = false;
   10a98:	2200      	movs	r2, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   10a9a:	4644      	mov	r4, r8
   10a9c:	4615      	mov	r5, r2
   10a9e:	9b03      	ldr	r3, [sp, #12]
   10aa0:	429d      	cmp	r5, r3
   10aa2:	db19      	blt.n	10ad8 <z_impl_net_addr_ntop+0xb0>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   10aa4:	4544      	cmp	r4, r8
   10aa6:	d009      	beq.n	10abc <z_impl_net_addr_ntop+0x94>
		return NULL;
	}

	if (family == AF_INET) {
   10aa8:	2300      	movs	r3, #0
   10aaa:	f1b9 0f01 	cmp.w	r9, #1
		*(ptr - 1) = '\0';
   10aae:	bf0c      	ite	eq
   10ab0:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   10ab4:	7023      	strbne	r3, [r4, #0]
   10ab6:	e003      	b.n	10ac0 <z_impl_net_addr_ntop+0x98>
	} else if (family == AF_INET) {
   10ab8:	2801      	cmp	r0, #1
   10aba:	d005      	beq.n	10ac8 <z_impl_net_addr_ntop+0xa0>
		return NULL;
   10abc:	f04f 0800 	mov.w	r8, #0
	}

	return dst;
}
   10ac0:	4640      	mov	r0, r8
   10ac2:	b009      	add	sp, #36	; 0x24
   10ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   10ac8:	232e      	movs	r3, #46	; 0x2e
   10aca:	2204      	movs	r2, #4
	s8_t pos = -1;
   10acc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		delim = '.';
   10ad0:	e9cd 3202 	strd	r3, r2, [sp, #8]
	u8_t i, bl, bh, longest = 1U;
   10ad4:	4607      	mov	r7, r0
   10ad6:	e7df      	b.n	10a98 <z_impl_net_addr_ntop+0x70>
		if (len == 4) {
   10ad8:	9b03      	ldr	r3, [sp, #12]
   10ada:	2b04      	cmp	r3, #4
   10adc:	d134      	bne.n	10b48 <z_impl_net_addr_ntop+0x120>
			value = (u32_t)addr->s4_addr[i];
   10ade:	f81a 1005 	ldrb.w	r1, [sl, r5]
			if (value == 0U) {
   10ae2:	b949      	cbnz	r1, 10af8 <z_impl_net_addr_ntop+0xd0>
				*ptr++ = '0';
   10ae4:	2330      	movs	r3, #48	; 0x30
   10ae6:	4620      	mov	r0, r4
   10ae8:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   10aec:	9b02      	ldr	r3, [sp, #8]
   10aee:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   10af0:	3501      	adds	r5, #1
   10af2:	b2ed      	uxtb	r5, r5
   10af4:	4604      	mov	r4, r0
   10af6:	e7d2      	b.n	10a9e <z_impl_net_addr_ntop+0x76>
			l = net_value_to_udec(ptr, value, 0);
   10af8:	2009      	movs	r0, #9
   10afa:	f04f 0b00 	mov.w	fp, #0
   10afe:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 10bd8 <z_impl_net_addr_ntop+0x1b0>
   10b02:	9401      	str	r4, [sp, #4]
		temp = value / divisor;
   10b04:	fbb1 fefc 	udiv	lr, r1, ip
		value = value % divisor;
   10b08:	fb0c 131e 	mls	r3, ip, lr, r1
		if ((precision > i) || (temp != 0)) {
   10b0c:	4583      	cmp	fp, r0
		value = value % divisor;
   10b0e:	9305      	str	r3, [sp, #20]
		if ((precision > i) || (temp != 0)) {
   10b10:	dc01      	bgt.n	10b16 <z_impl_net_addr_ntop+0xee>
   10b12:	4561      	cmp	r1, ip
   10b14:	d306      	bcc.n	10b24 <z_impl_net_addr_ntop+0xfc>
			*buf++ = (char) (temp + '0');
   10b16:	4683      	mov	fp, r0
   10b18:	9b01      	ldr	r3, [sp, #4]
   10b1a:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
   10b1e:	f803 eb01 	strb.w	lr, [r3], #1
   10b22:	9301      	str	r3, [sp, #4]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   10b24:	230a      	movs	r3, #10
   10b26:	3801      	subs	r0, #1
   10b28:	fbbc fcf3 	udiv	ip, ip, r3
   10b2c:	1c43      	adds	r3, r0, #1
		value = value % divisor;
   10b2e:	9905      	ldr	r1, [sp, #20]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   10b30:	d1e8      	bne.n	10b04 <z_impl_net_addr_ntop+0xdc>
	*buf = 0;
   10b32:	f04f 0300 	mov.w	r3, #0
   10b36:	9901      	ldr	r1, [sp, #4]
   10b38:	700b      	strb	r3, [r1, #0]
	return buf - start;
   10b3a:	1b0b      	subs	r3, r1, r4
			ptr += l;
   10b3c:	b2db      	uxtb	r3, r3
			*ptr++ = delim;
   10b3e:	9902      	ldr	r1, [sp, #8]
			ptr += l;
   10b40:	18e0      	adds	r0, r4, r3
			*ptr++ = delim;
   10b42:	3001      	adds	r0, #1
   10b44:	54e1      	strb	r1, [r4, r3]
			continue;
   10b46:	e7d3      	b.n	10af0 <z_impl_net_addr_ntop+0xc8>
		if (i == pos) {
   10b48:	42ae      	cmp	r6, r5
   10b4a:	d10d      	bne.n	10b68 <z_impl_net_addr_ntop+0x140>
			if (needcolon || i == 0U) {
   10b4c:	b902      	cbnz	r2, 10b50 <z_impl_net_addr_ntop+0x128>
   10b4e:	b916      	cbnz	r6, 10b56 <z_impl_net_addr_ntop+0x12e>
				*ptr++ = ':';
   10b50:	233a      	movs	r3, #58	; 0x3a
   10b52:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   10b56:	233a      	movs	r3, #58	; 0x3a
   10b58:	4620      	mov	r0, r4
   10b5a:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   10b5e:	1e7b      	subs	r3, r7, #1
   10b60:	441d      	add	r5, r3
   10b62:	b2ed      	uxtb	r5, r5
			needcolon = false;
   10b64:	2200      	movs	r2, #0
			continue;
   10b66:	e7c3      	b.n	10af0 <z_impl_net_addr_ntop+0xc8>
		if (needcolon) {
   10b68:	b112      	cbz	r2, 10b70 <z_impl_net_addr_ntop+0x148>
			*ptr++ = ':';
   10b6a:	233a      	movs	r3, #58	; 0x3a
   10b6c:	f804 3b01 	strb.w	r3, [r4], #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   10b70:	9b04      	ldr	r3, [sp, #16]
   10b72:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   10b76:	021a      	lsls	r2, r3, #8
   10b78:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
   10b7c:	b212      	sxth	r2, r2
		bh = value >> 8;
   10b7e:	f3c2 2307 	ubfx	r3, r2, #8, #8
		bl = value & 0xff;
   10b82:	fa5f fb82 	uxtb.w	fp, r2
		if (bh) {
   10b86:	b1b3      	cbz	r3, 10bb6 <z_impl_net_addr_ntop+0x18e>
			if (bh > 0x0f) {
   10b88:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   10b8a:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   10b8c:	d90b      	bls.n	10ba6 <z_impl_net_addr_ntop+0x17e>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   10b8e:	2300      	movs	r3, #0
   10b90:	2261      	movs	r2, #97	; 0x61
   10b92:	4620      	mov	r0, r4
   10b94:	f00c fb9f 	bl	1d2d6 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   10b98:	2301      	movs	r3, #1
   10b9a:	2261      	movs	r2, #97	; 0x61
   10b9c:	4659      	mov	r1, fp
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   10b9e:	f00c fb9a 	bl	1d2d6 <net_byte_to_hex>
		needcolon = true;
   10ba2:	2201      	movs	r2, #1
   10ba4:	e7a4      	b.n	10af0 <z_impl_net_addr_ntop+0xc8>
				if (bh < 10) {
   10ba6:	b25b      	sxtb	r3, r3
   10ba8:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   10baa:	bf94      	ite	ls
   10bac:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   10bae:	3357      	addhi	r3, #87	; 0x57
   10bb0:	1c60      	adds	r0, r4, #1
   10bb2:	7023      	strb	r3, [r4, #0]
   10bb4:	e7f0      	b.n	10b98 <z_impl_net_addr_ntop+0x170>
		} else if (bl > 0x0f) {
   10bb6:	f1bb 0f0f 	cmp.w	fp, #15
   10bba:	d903      	bls.n	10bc4 <z_impl_net_addr_ntop+0x19c>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   10bbc:	2261      	movs	r2, #97	; 0x61
   10bbe:	4659      	mov	r1, fp
   10bc0:	4620      	mov	r0, r4
   10bc2:	e7ec      	b.n	10b9e <z_impl_net_addr_ntop+0x176>
			if (bl < 10) {
   10bc4:	b252      	sxtb	r2, r2
   10bc6:	f1bb 0f09 	cmp.w	fp, #9
				*ptr++ = (char)(bl + '0');
   10bca:	bf94      	ite	ls
   10bcc:	3230      	addls	r2, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   10bce:	3257      	addhi	r2, #87	; 0x57
   10bd0:	1c60      	adds	r0, r4, #1
   10bd2:	7022      	strb	r2, [r4, #0]
   10bd4:	e7e5      	b.n	10ba2 <z_impl_net_addr_ntop+0x17a>
   10bd6:	bf00      	nop
   10bd8:	3b9aca00 	.word	0x3b9aca00

00010bdc <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   10bdc:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   10bde:	4b09      	ldr	r3, [pc, #36]	; (10c04 <gpio_nrfx_init+0x28>)
   10be0:	781a      	ldrb	r2, [r3, #0]
   10be2:	b96a      	cbnz	r2, 10c00 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   10be4:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   10be6:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   10be8:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   10bea:	2105      	movs	r1, #5
   10bec:	f7fe fba0 	bl	f330 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
   10bf0:	2031      	movs	r0, #49	; 0x31
   10bf2:	f7fe fb8d 	bl	f310 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   10bf6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   10bfa:	4b03      	ldr	r3, [pc, #12]	; (10c08 <gpio_nrfx_init+0x2c>)
   10bfc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   10c00:	2000      	movs	r0, #0
   10c02:	bd08      	pop	{r3, pc}
   10c04:	20026434 	.word	0x20026434
   10c08:	40031000 	.word	0x40031000

00010c0c <gpiote_pin_int_cfg>:
{
   10c0c:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   10c0e:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
   10c10:	6882      	ldr	r2, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   10c12:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   10c14:	4c51      	ldr	r4, [pc, #324]	; (10d5c <gpiote_pin_int_cfg+0x150>)
   10c16:	7918      	ldrb	r0, [r3, #4]
   10c18:	f001 031f 	and.w	r3, r1, #31
   10c1c:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   10c20:	2000      	movs	r0, #0
   10c22:	f8d4 5304 	ldr.w	r5, [r4, #772]	; 0x304
   10c26:	b2ed      	uxtb	r5, r5
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   10c28:	f500 76a2 	add.w	r6, r0, #324	; 0x144
   10c2c:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   10c30:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   10c34:	42b3      	cmp	r3, r6
   10c36:	d170      	bne.n	10d1a <gpiote_pin_int_cfg+0x10e>
		    && (intenset & BIT(i))) {
   10c38:	fa25 f600 	lsr.w	r6, r5, r0
   10c3c:	07f6      	lsls	r6, r6, #31
   10c3e:	d56c      	bpl.n	10d1a <gpiote_pin_int_cfg+0x10e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   10c40:	0085      	lsls	r5, r0, #2
   10c42:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   10c46:	f505 3544 	add.w	r5, r5, #200704	; 0x31000
   10c4a:	f8d5 6510 	ldr.w	r6, [r5, #1296]	; 0x510
   10c4e:	f026 0601 	bic.w	r6, r6, #1
   10c52:	f8c5 6510 	str.w	r6, [r5, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   10c56:	2501      	movs	r5, #1
   10c58:	fa05 f000 	lsl.w	r0, r5, r0
    p_reg->INTENCLR = mask;
   10c5c:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   10c60:	4d3f      	ldr	r5, [pc, #252]	; (10d60 <gpiote_pin_int_cfg+0x154>)
   10c62:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   10c66:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   10c6a:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   10c6e:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   10c72:	6890      	ldr	r0, [r2, #8]
   10c74:	40c8      	lsrs	r0, r1
   10c76:	f010 0001 	ands.w	r0, r0, #1
   10c7a:	d04d      	beq.n	10d18 <gpiote_pin_int_cfg+0x10c>
   10c7c:	68d0      	ldr	r0, [r2, #12]
   10c7e:	40c8      	lsrs	r0, r1
   10c80:	f010 0001 	ands.w	r0, r0, #1
   10c84:	d048      	beq.n	10d18 <gpiote_pin_int_cfg+0x10c>
		if (data->trig_edge & BIT(pin)) {
   10c86:	6950      	ldr	r0, [r2, #20]
   10c88:	40c8      	lsrs	r0, r1
   10c8a:	f010 0001 	ands.w	r0, r0, #1
   10c8e:	d050      	beq.n	10d32 <gpiote_pin_int_cfg+0x126>
			if (data->double_edge & BIT(pin)) {
   10c90:	6990      	ldr	r0, [r2, #24]
   10c92:	40c8      	lsrs	r0, r1
   10c94:	07c0      	lsls	r0, r0, #31
   10c96:	d444      	bmi.n	10d22 <gpiote_pin_int_cfg+0x116>
			} else if (((data->active_level & BIT(pin)) != 0U)
   10c98:	6910      	ldr	r0, [r2, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   10c9a:	69d2      	ldr	r2, [r2, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   10c9c:	40c8      	lsrs	r0, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   10c9e:	fa22 f101 	lsr.w	r1, r2, r1
			} else if (((data->active_level & BIT(pin)) != 0U)
   10ca2:	f000 0001 	and.w	r0, r0, #1
   10ca6:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   10caa:	4288      	cmp	r0, r1
   10cac:	bf14      	ite	ne
   10cae:	2101      	movne	r1, #1
   10cb0:	2102      	moveq	r1, #2
   10cb2:	2500      	movs	r5, #0
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   10cb4:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   10cb8:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   10cbc:	f010 0003 	ands.w	r0, r0, #3
   10cc0:	d131      	bne.n	10d26 <gpiote_pin_int_cfg+0x11a>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   10cc2:	00aa      	lsls	r2, r5, #2
   10cc4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   10cc8:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   10ccc:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   10cd0:	021b      	lsls	r3, r3, #8
   10cd2:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   10cd6:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
   10cda:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   10cde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
			nrf_gpiote_event_t evt =
   10ce2:	f105 0340 	add.w	r3, r5, #64	; 0x40
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   10ce6:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
   10cea:	009b      	lsls	r3, r3, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   10cec:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   10cf0:	b29b      	uxth	r3, r3
   10cf2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   10cf6:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   10cfa:	4331      	orrs	r1, r6
   10cfc:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   10d00:	6018      	str	r0, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   10d02:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   10d06:	f043 0301 	orr.w	r3, r3, #1
   10d0a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   10d0e:	2301      	movs	r3, #1
   10d10:	fa03 f505 	lsl.w	r5, r3, r5
    p_reg->INTENSET = mask;
   10d14:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
}
   10d18:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   10d1a:	3001      	adds	r0, #1
   10d1c:	2808      	cmp	r0, #8
   10d1e:	d183      	bne.n	10c28 <gpiote_pin_int_cfg+0x1c>
   10d20:	e79e      	b.n	10c60 <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   10d22:	2103      	movs	r1, #3
   10d24:	e7c5      	b.n	10cb2 <gpiote_pin_int_cfg+0xa6>
   10d26:	3501      	adds	r5, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   10d28:	2d08      	cmp	r5, #8
   10d2a:	d1c3      	bne.n	10cb4 <gpiote_pin_int_cfg+0xa8>
	return -ENODEV;
   10d2c:	f06f 0012 	mvn.w	r0, #18
   10d30:	e7f2      	b.n	10d18 <gpiote_pin_int_cfg+0x10c>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   10d32:	6913      	ldr	r3, [r2, #16]
   10d34:	69d2      	ldr	r2, [r2, #28]
   10d36:	4053      	eors	r3, r2
   10d38:	fa23 f101 	lsr.w	r1, r3, r1
		return NRF_GPIO_PIN_SENSE_HIGH;
   10d3c:	f011 0f01 	tst.w	r1, #1
   10d40:	bf14      	ite	ne
   10d42:	f44f 3200 	movne.w	r2, #131072	; 0x20000
   10d46:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   10d4a:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   10d4e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   10d52:	4313      	orrs	r3, r2
   10d54:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
   10d58:	e7de      	b.n	10d18 <gpiote_pin_int_cfg+0x10c>
   10d5a:	bf00      	nop
   10d5c:	40031000 	.word	0x40031000
   10d60:	40842500 	.word	0x40842500

00010d64 <gpio_nrfx_config>:
{
   10d64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d68:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   10d6a:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   10d6c:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   10d70:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   10d74:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   10d76:	d040      	beq.n	10dfa <gpio_nrfx_config+0x96>
   10d78:	dc09      	bgt.n	10d8e <gpio_nrfx_config+0x2a>
   10d7a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   10d7e:	d03e      	beq.n	10dfe <gpio_nrfx_config+0x9a>
   10d80:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   10d84:	d03d      	beq.n	10e02 <gpio_nrfx_config+0x9e>
   10d86:	b190      	cbz	r0, 10dae <gpio_nrfx_config+0x4a>
		return -EINVAL;
   10d88:	f06f 0015 	mvn.w	r0, #21
   10d8c:	e032      	b.n	10df4 <gpio_nrfx_config+0x90>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   10d8e:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   10d92:	d038      	beq.n	10e06 <gpio_nrfx_config+0xa2>
   10d94:	dc04      	bgt.n	10da0 <gpio_nrfx_config+0x3c>
   10d96:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   10d9a:	d1f5      	bne.n	10d88 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   10d9c:	2003      	movs	r0, #3
   10d9e:	e006      	b.n	10dae <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   10da0:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   10da4:	d031      	beq.n	10e0a <gpio_nrfx_config+0xa6>
   10da6:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   10daa:	d1ed      	bne.n	10d88 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
   10dac:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   10dae:	f406 7740 	and.w	r7, r6, #768	; 0x300
   10db2:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   10db6:	d02a      	beq.n	10e0e <gpio_nrfx_config+0xaa>
		pull = NRF_GPIO_PIN_NOPULL;
   10db8:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   10dbc:	4263      	negs	r3, r4
   10dbe:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   10dc0:	2901      	cmp	r1, #1
		from_pin = pin;
   10dc2:	bf19      	ittee	ne
   10dc4:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
   10dc6:	46a1      	movne	r9, r4
		to_pin   = 31U;
   10dc8:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   10dcc:	2400      	moveq	r4, #0
   10dce:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   10dd2:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   10dd6:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   10dda:	ea47 070c 	orr.w	r7, r7, ip
   10dde:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10de2:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 10e84 <gpio_nrfx_config+0x120>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   10de6:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   10dea:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   10dee:	45a1      	cmp	r9, r4
   10df0:	d20f      	bcs.n	10e12 <gpio_nrfx_config+0xae>
	return 0;
   10df2:	2000      	movs	r0, #0
}
   10df4:	b003      	add	sp, #12
   10df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
   10dfa:	2002      	movs	r0, #2
   10dfc:	e7d7      	b.n	10dae <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
   10dfe:	2001      	movs	r0, #1
   10e00:	e7d5      	b.n	10dae <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
   10e02:	2004      	movs	r0, #4
   10e04:	e7d3      	b.n	10dae <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
   10e06:	2005      	movs	r0, #5
   10e08:	e7d1      	b.n	10dae <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
   10e0a:	2006      	movs	r0, #6
   10e0c:	e7cf      	b.n	10dae <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
   10e0e:	2303      	movs	r3, #3
   10e10:	e7d6      	b.n	10dc0 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
   10e12:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   10e16:	6892      	ldr	r2, [r2, #8]
   10e18:	7911      	ldrb	r1, [r2, #4]
   10e1a:	f004 021f 	and.w	r2, r4, #31
   10e1e:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10e22:	3280      	adds	r2, #128	; 0x80
   10e24:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   10e28:	68a9      	ldr	r1, [r5, #8]
   10e2a:	fa0b f204 	lsl.w	r2, fp, r4
   10e2e:	2b00      	cmp	r3, #0
   10e30:	d025      	beq.n	10e7e <gpio_nrfx_config+0x11a>
   10e32:	4311      	orrs	r1, r2
   10e34:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   10e36:	6969      	ldr	r1, [r5, #20]
   10e38:	06b0      	lsls	r0, r6, #26
   10e3a:	bf4c      	ite	mi
   10e3c:	4311      	orrmi	r1, r2
   10e3e:	4391      	bicpl	r1, r2
   10e40:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
   10e42:	69a9      	ldr	r1, [r5, #24]
   10e44:	0670      	lsls	r0, r6, #25
   10e46:	bf4c      	ite	mi
   10e48:	4311      	orrmi	r1, r2
   10e4a:	4391      	bicpl	r1, r2
   10e4c:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
   10e4e:	6929      	ldr	r1, [r5, #16]
   10e50:	0770      	lsls	r0, r6, #29
   10e52:	bf4c      	ite	mi
   10e54:	4311      	orrmi	r1, r2
   10e56:	4391      	bicpl	r1, r2
   10e58:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   10e5a:	69e9      	ldr	r1, [r5, #28]
   10e5c:	0630      	lsls	r0, r6, #24
   10e5e:	bf4c      	ite	mi
   10e60:	430a      	orrmi	r2, r1
   10e62:	ea21 0202 	bicpl.w	r2, r1, r2
   10e66:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   10e68:	4621      	mov	r1, r4
   10e6a:	4640      	mov	r0, r8
   10e6c:	9301      	str	r3, [sp, #4]
   10e6e:	f7ff fecd 	bl	10c0c <gpiote_pin_int_cfg>
		if (res != 0) {
   10e72:	2800      	cmp	r0, #0
   10e74:	d1be      	bne.n	10df4 <gpio_nrfx_config+0x90>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   10e76:	3401      	adds	r4, #1
   10e78:	b2e4      	uxtb	r4, r4
   10e7a:	9b01      	ldr	r3, [sp, #4]
   10e7c:	e7b7      	b.n	10dee <gpio_nrfx_config+0x8a>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   10e7e:	ea21 0102 	bic.w	r1, r1, r2
   10e82:	e7d7      	b.n	10e34 <gpio_nrfx_config+0xd0>
   10e84:	40842500 	.word	0x40842500

00010e88 <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10e88:	494f      	ldr	r1, [pc, #316]	; (10fc8 <gpiote_event_handler+0x140>)
{
   10e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e8e:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
   10e90:	2d00      	cmp	r5, #0
   10e92:	d060      	beq.n	10f56 <gpiote_event_handler+0xce>
	struct gpio_nrfx_data *data = get_port_data(port);
   10e94:	4b4d      	ldr	r3, [pc, #308]	; (10fcc <gpiote_event_handler+0x144>)
	u32_t pin = 0U;
   10e96:	2600      	movs	r6, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   10e98:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
   10e9a:	681b      	ldr	r3, [r3, #0]
   10e9c:	f8df e138 	ldr.w	lr, [pc, #312]	; 10fd8 <gpiote_event_handler+0x150>
   10ea0:	689f      	ldr	r7, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   10ea2:	e9d2 0302 	ldrd	r0, r3, [r2, #8]
   10ea6:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
   10ea8:	e9d2 0405 	ldrd	r0, r4, [r2, #20]
   10eac:	4320      	orrs	r0, r4
   10eae:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   10eb2:	6838      	ldr	r0, [r7, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   10eb4:	69d4      	ldr	r4, [r2, #28]
   10eb6:	6912      	ldr	r2, [r2, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   10eb8:	6900      	ldr	r0, [r0, #16]
   10eba:	4054      	eors	r4, r2
   10ebc:	4044      	eors	r4, r0
	u32_t bit = 1U << pin;
   10ebe:	2001      	movs	r0, #1
	u32_t out = pin_states & level_pins;
   10ec0:	ea23 0404 	bic.w	r4, r3, r4
	while (level_pins) {
   10ec4:	bb93      	cbnz	r3, 10f2c <gpiote_event_handler+0xa4>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   10ec6:	600b      	str	r3, [r1, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   10ec8:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   10eca:	2001      	movs	r0, #1
   10ecc:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   10ece:	4940      	ldr	r1, [pc, #256]	; (10fd0 <gpiote_event_handler+0x148>)
   10ed0:	4e40      	ldr	r6, [pc, #256]	; (10fd4 <gpiote_event_handler+0x14c>)
   10ed2:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   10ed6:	fa00 fc03 	lsl.w	ip, r0, r3
   10eda:	ea1c 0f02 	tst.w	ip, r2
   10ede:	d00d      	beq.n	10efc <gpiote_event_handler+0x74>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10ee0:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   10ee4:	b152      	cbz	r2, 10efc <gpiote_event_handler+0x74>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   10ee6:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   10eea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   10eee:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   10ef2:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   10ef6:	fa00 f202 	lsl.w	r2, r0, r2
   10efa:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   10efc:	3301      	adds	r3, #1
   10efe:	2b08      	cmp	r3, #8
   10f00:	d1e7      	bne.n	10ed2 <gpiote_event_handler+0x4a>
	if (fired_triggers[0]) {
   10f02:	bb54      	cbnz	r4, 10f5a <gpiote_event_handler+0xd2>
	if (port_event) {
   10f04:	b185      	cbz	r5, 10f28 <gpiote_event_handler+0xa0>
	u32_t bit = 1U << pin;
   10f06:	2401      	movs	r4, #1
	u32_t pin = 0U;
   10f08:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   10f0a:	4b30      	ldr	r3, [pc, #192]	; (10fcc <gpiote_event_handler+0x144>)
   10f0c:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 10fd8 <gpiote_event_handler+0x150>
   10f10:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
   10f12:	681b      	ldr	r3, [r3, #0]
   10f14:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   10f16:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
   10f1a:	400b      	ands	r3, r1
	out &= ~data->trig_edge & ~data->double_edge;
   10f1c:	e9d2 1005 	ldrd	r1, r0, [r2, #20]
   10f20:	4301      	orrs	r1, r0
   10f22:	ea23 0301 	bic.w	r3, r3, r1
	while (level_pins) {
   10f26:	bb7b      	cbnz	r3, 10f88 <gpiote_event_handler+0x100>
}
   10f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   10f2c:	4203      	tst	r3, r0
   10f2e:	d00f      	beq.n	10f50 <gpiote_event_handler+0xc8>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   10f30:	f897 c004 	ldrb.w	ip, [r7, #4]
   10f34:	f006 021f 	and.w	r2, r6, #31
   10f38:	ea42 124c 	orr.w	r2, r2, ip, lsl #5
   10f3c:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   10f40:	f8d2 c200 	ldr.w	ip, [r2, #512]	; 0x200
			level_pins &= ~bit;
   10f44:	ea23 0300 	bic.w	r3, r3, r0
   10f48:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   10f4c:	f8c2 c200 	str.w	ip, [r2, #512]	; 0x200
		++pin;
   10f50:	3601      	adds	r6, #1
		bit <<= 1;
   10f52:	0040      	lsls	r0, r0, #1
   10f54:	e7b6      	b.n	10ec4 <gpiote_event_handler+0x3c>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   10f56:	462c      	mov	r4, r5
   10f58:	e7b6      	b.n	10ec8 <gpiote_event_handler+0x40>
	struct gpio_nrfx_data *data = get_port_data(port);
   10f5a:	4f1c      	ldr	r7, [pc, #112]	; (10fcc <gpiote_event_handler+0x144>)
   10f5c:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   10f60:	f8d8 1000 	ldr.w	r1, [r8]
   10f64:	2900      	cmp	r1, #0
   10f66:	d0cd      	beq.n	10f04 <gpiote_event_handler+0x7c>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10f68:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
   10f6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   10f6e:	688a      	ldr	r2, [r1, #8]
   10f70:	4023      	ands	r3, r4
   10f72:	4213      	tst	r3, r2
   10f74:	d003      	beq.n	10f7e <gpiote_event_handler+0xf6>
			cb->handler(port, cb, pins);
   10f76:	684b      	ldr	r3, [r1, #4]
   10f78:	4622      	mov	r2, r4
   10f7a:	4638      	mov	r0, r7
   10f7c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   10f7e:	2e00      	cmp	r6, #0
   10f80:	d0c0      	beq.n	10f04 <gpiote_event_handler+0x7c>
   10f82:	4631      	mov	r1, r6
   10f84:	6836      	ldr	r6, [r6, #0]
   10f86:	e7f0      	b.n	10f6a <gpiote_event_handler+0xe2>
		if (level_pins & bit) {
   10f88:	421c      	tst	r4, r3
   10f8a:	d01a      	beq.n	10fc2 <gpiote_event_handler+0x13a>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   10f8c:	7930      	ldrb	r0, [r6, #4]
   10f8e:	f005 011f 	and.w	r1, r5, #31
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   10f92:	69d7      	ldr	r7, [r2, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   10f94:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   10f98:	6910      	ldr	r0, [r2, #16]
   10f9a:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
   10f9e:	4078      	eors	r0, r7
   10fa0:	40e8      	lsrs	r0, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   10fa2:	f010 0f01 	tst.w	r0, #1
   10fa6:	bf14      	ite	ne
   10fa8:	f44f 3700 	movne.w	r7, #131072	; 0x20000
   10fac:	f44f 3740 	moveq.w	r7, #196608	; 0x30000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   10fb0:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
			level_pins &= ~bit;
   10fb4:	ea23 0304 	bic.w	r3, r3, r4
   10fb8:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   10fbc:	4338      	orrs	r0, r7
   10fbe:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
		++pin;
   10fc2:	3501      	adds	r5, #1
		bit <<= 1;
   10fc4:	0064      	lsls	r4, r4, #1
   10fc6:	e7ae      	b.n	10f26 <gpiote_event_handler+0x9e>
   10fc8:	4003117c 	.word	0x4003117c
   10fcc:	2002c4f0 	.word	0x2002c4f0
   10fd0:	40031000 	.word	0x40031000
   10fd4:	40031100 	.word	0x40031100
   10fd8:	40842500 	.word	0x40842500

00010fdc <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   10fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   10fde:	794b      	ldrb	r3, [r1, #5]
   10fe0:	2b01      	cmp	r3, #1
   10fe2:	d029      	beq.n	11038 <uarte_nrfx_configure+0x5c>
   10fe4:	2b03      	cmp	r3, #3
   10fe6:	d124      	bne.n	11032 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   10fe8:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   10fea:	798b      	ldrb	r3, [r1, #6]
   10fec:	2b03      	cmp	r3, #3
   10fee:	d120      	bne.n	11032 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   10ff0:	79cc      	ldrb	r4, [r1, #7]
   10ff2:	b12c      	cbz	r4, 11000 <uarte_nrfx_configure+0x24>
   10ff4:	2c01      	cmp	r4, #1
   10ff6:	d11c      	bne.n	11032 <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
   10ff8:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   10ffa:	689b      	ldr	r3, [r3, #8]
   10ffc:	791b      	ldrb	r3, [r3, #4]
   10ffe:	b1c3      	cbz	r3, 11032 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   11000:	790a      	ldrb	r2, [r1, #4]
   11002:	b112      	cbz	r2, 1100a <uarte_nrfx_configure+0x2e>
   11004:	2a02      	cmp	r2, #2
   11006:	d114      	bne.n	11032 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   11008:	220e      	movs	r2, #14
	switch (baudrate) {
   1100a:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
   1100e:	6805      	ldr	r5, [r0, #0]
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   11010:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   11012:	68ad      	ldr	r5, [r5, #8]
	switch (baudrate) {
   11014:	42bb      	cmp	r3, r7
	return config->uarte_regs;
   11016:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   11018:	d062      	beq.n	110e0 <uarte_nrfx_configure+0x104>
   1101a:	d829      	bhi.n	11070 <uarte_nrfx_configure+0x94>
   1101c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   11020:	d061      	beq.n	110e6 <uarte_nrfx_configure+0x10a>
   11022:	d814      	bhi.n	1104e <uarte_nrfx_configure+0x72>
   11024:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   11028:	d05f      	beq.n	110ea <uarte_nrfx_configure+0x10e>
   1102a:	d807      	bhi.n	1103c <uarte_nrfx_configure+0x60>
   1102c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   11030:	d05e      	beq.n	110f0 <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
   11032:	f06f 0022 	mvn.w	r0, #34	; 0x22
   11036:	e052      	b.n	110de <uarte_nrfx_configure+0x102>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   11038:	2600      	movs	r6, #0
   1103a:	e7d6      	b.n	10fea <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1103c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   11040:	d059      	beq.n	110f6 <uarte_nrfx_configure+0x11a>
   11042:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   11046:	d1f4      	bne.n	11032 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   11048:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1104c:	e03c      	b.n	110c8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1104e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   11052:	d053      	beq.n	110fc <uarte_nrfx_configure+0x120>
   11054:	d804      	bhi.n	11060 <uarte_nrfx_configure+0x84>
   11056:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1105a:	d1ea      	bne.n	11032 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1105c:	4b32      	ldr	r3, [pc, #200]	; (11128 <uarte_nrfx_configure+0x14c>)
   1105e:	e033      	b.n	110c8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   11060:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   11064:	d04c      	beq.n	11100 <uarte_nrfx_configure+0x124>
   11066:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1106a:	d1e2      	bne.n	11032 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1106c:	4b2f      	ldr	r3, [pc, #188]	; (1112c <uarte_nrfx_configure+0x150>)
   1106e:	e02b      	b.n	110c8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   11070:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   11074:	d046      	beq.n	11104 <uarte_nrfx_configure+0x128>
   11076:	d812      	bhi.n	1109e <uarte_nrfx_configure+0xc2>
   11078:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   1107c:	42bb      	cmp	r3, r7
   1107e:	d044      	beq.n	1110a <uarte_nrfx_configure+0x12e>
   11080:	d805      	bhi.n	1108e <uarte_nrfx_configure+0xb2>
   11082:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   11086:	d1d4      	bne.n	11032 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   11088:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1108c:	e01c      	b.n	110c8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1108e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   11092:	d03d      	beq.n	11110 <uarte_nrfx_configure+0x134>
   11094:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   11098:	d1cb      	bne.n	11032 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1109a:	4b25      	ldr	r3, [pc, #148]	; (11130 <uarte_nrfx_configure+0x154>)
   1109c:	e014      	b.n	110c8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1109e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   110a2:	d038      	beq.n	11116 <uarte_nrfx_configure+0x13a>
   110a4:	d808      	bhi.n	110b8 <uarte_nrfx_configure+0xdc>
   110a6:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   110aa:	d037      	beq.n	1111c <uarte_nrfx_configure+0x140>
   110ac:	4f21      	ldr	r7, [pc, #132]	; (11134 <uarte_nrfx_configure+0x158>)
   110ae:	42bb      	cmp	r3, r7
   110b0:	d1bf      	bne.n	11032 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   110b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   110b6:	e007      	b.n	110c8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   110b8:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   110bc:	d031      	beq.n	11122 <uarte_nrfx_configure+0x146>
   110be:	4f1e      	ldr	r7, [pc, #120]	; (11138 <uarte_nrfx_configure+0x15c>)
   110c0:	42bb      	cmp	r3, r7
   110c2:	d1b6      	bne.n	11032 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   110c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   110c8:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   110cc:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   110ce:	6883      	ldr	r3, [r0, #8]
   110d0:	4322      	orrs	r2, r4
   110d2:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   110d4:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   110d8:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   110dc:	2000      	movs	r0, #0
}
   110de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   110e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   110e4:	e7f0      	b.n	110c8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   110e6:	4b15      	ldr	r3, [pc, #84]	; (1113c <uarte_nrfx_configure+0x160>)
   110e8:	e7ee      	b.n	110c8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00027000;
   110ea:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   110ee:	e7eb      	b.n	110c8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
   110f0:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   110f4:	e7e8      	b.n	110c8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   110f6:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   110fa:	e7e5      	b.n	110c8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   110fc:	4b10      	ldr	r3, [pc, #64]	; (11140 <uarte_nrfx_configure+0x164>)
   110fe:	e7e3      	b.n	110c8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   11100:	4b10      	ldr	r3, [pc, #64]	; (11144 <uarte_nrfx_configure+0x168>)
   11102:	e7e1      	b.n	110c8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   11104:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   11108:	e7de      	b.n	110c8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1110a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1110e:	e7db      	b.n	110c8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   11110:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   11114:	e7d8      	b.n	110c8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   11116:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1111a:	e7d5      	b.n	110c8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1111c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   11120:	e7d2      	b.n	110c8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   11122:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   11126:	e7cf      	b.n	110c8 <uarte_nrfx_configure+0xec>
   11128:	00275000 	.word	0x00275000
   1112c:	0075c000 	.word	0x0075c000
   11130:	013a9000 	.word	0x013a9000
   11134:	0003d090 	.word	0x0003d090
   11138:	000f4240 	.word	0x000f4240
   1113c:	0013b000 	.word	0x0013b000
   11140:	003af000 	.word	0x003af000
   11144:	004ea000 	.word	0x004ea000

00011148 <uarte_instance_init.constprop.4>:
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(struct device *dev,
   11148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1114c:	2501      	movs	r5, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1114e:	f04f 0e03 	mov.w	lr, #3
   11152:	f04f 0c00 	mov.w	ip, #0
	return dev->config->config_info;
   11156:	6803      	ldr	r3, [r0, #0]
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_gpio_pin_write(config->pseltxd, 1);
   11158:	680a      	ldr	r2, [r1, #0]
	return config->uarte_regs;
   1115a:	689b      	ldr	r3, [r3, #8]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1115c:	fa05 f702 	lsl.w	r7, r5, r2
   11160:	681c      	ldr	r4, [r3, #0]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   11162:	4b1f      	ldr	r3, [pc, #124]	; (111e0 <uarte_instance_init.constprop.4+0x98>)
	struct uarte_nrfx_data *data = get_dev_data(dev);
   11164:	6886      	ldr	r6, [r0, #8]
   11166:	609f      	str	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11168:	f102 0780 	add.w	r7, r2, #128	; 0x80
   1116c:	f843 e027 	str.w	lr, [r3, r7, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
   11170:	684f      	ldr	r7, [r1, #4]
   11172:	f107 0880 	add.w	r8, r7, #128	; 0x80
   11176:	f843 c028 	str.w	ip, [r3, r8, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   1117a:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1117e:	f8c4 7514 	str.w	r7, [r4, #1300]	; 0x514

	nrf_uarte_txrx_pins_set(uarte,
				config->pseltxd,
				config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   11182:	688f      	ldr	r7, [r1, #8]
   11184:	1c7a      	adds	r2, r7, #1
   11186:	d010      	beq.n	111aa <uarte_instance_init.constprop.4+0x62>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   11188:	68ca      	ldr	r2, [r1, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   1118a:	1c51      	adds	r1, r2, #1
   1118c:	d00d      	beq.n	111aa <uarte_instance_init.constprop.4+0x62>
   1118e:	f102 0180 	add.w	r1, r2, #128	; 0x80
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11192:	4095      	lsls	r5, r2
    p_reg->OUTSET = set_mask;
   11194:	609d      	str	r5, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11196:	f843 e021 	str.w	lr, [r3, r1, lsl #2]
   1119a:	f107 0180 	add.w	r1, r7, #128	; 0x80
   1119e:	f843 c021 	str.w	ip, [r3, r1, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   111a2:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   111a6:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
		nrf_uarte_hwfc_pins_set(uarte,
					config->pselrts,
					config->pselcts);
	}

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   111aa:	4631      	mov	r1, r6
   111ac:	f7ff ff16 	bl	10fdc <uarte_nrfx_configure>
	if (err) {
   111b0:	b9a0      	cbnz	r0, 111dc <uarte_instance_init.constprop.4+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   111b2:	2308      	movs	r3, #8
   111b4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   111b8:	f106 030c 	add.w	r3, r6, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   111bc:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   111c0:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   111c4:	2301      	movs	r3, #1
		/* Set ENDTX event by requesting fake (zero-length) transfer.
		 * Pointer to RAM variable (data->tx_buffer) is set because
		 * otherwise such operation may result in HardFault or RAM
		 * corruption.
		 */
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   111c6:	68b2      	ldr	r2, [r6, #8]
   111c8:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   111cc:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   111ce:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   111d0:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   111d4:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   111d8:	60a3      	str	r3, [r4, #8]
   111da:	60e3      	str	r3, [r4, #12]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
   111dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   111e0:	40842500 	.word	0x40842500

000111e4 <uarte_2_init>:
	#if defined(DT_NORDIC_NRF_UARTE_UART_2_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_2_CTS_PIN)
		#define UARTE_2_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(2);
   111e4:	b530      	push	{r4, r5, lr}
   111e6:	b085      	sub	sp, #20
   111e8:	466c      	mov	r4, sp
   111ea:	4605      	mov	r5, r0
   111ec:	4b08      	ldr	r3, [pc, #32]	; (11210 <uarte_2_init+0x2c>)
   111ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   111f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   111f4:	2200      	movs	r2, #0
   111f6:	2101      	movs	r1, #1
   111f8:	200a      	movs	r0, #10
   111fa:	f7fe f899 	bl	f330 <z_arm_irq_priority_set>
   111fe:	200a      	movs	r0, #10
   11200:	f7fe f886 	bl	f310 <arch_irq_enable>
   11204:	4621      	mov	r1, r4
   11206:	4628      	mov	r0, r5
   11208:	f7ff ff9e 	bl	11148 <uarte_instance_init.constprop.4>
   1120c:	b005      	add	sp, #20
   1120e:	bd30      	pop	{r4, r5, pc}
   11210:	0001ee5c 	.word	0x0001ee5c

00011214 <uarte_0_init>:
	UART_NRF_UARTE_DEVICE(0);
   11214:	b530      	push	{r4, r5, lr}
   11216:	b085      	sub	sp, #20
   11218:	466c      	mov	r4, sp
   1121a:	4605      	mov	r5, r0
   1121c:	4b08      	ldr	r3, [pc, #32]	; (11240 <uarte_0_init+0x2c>)
   1121e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   11220:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   11224:	2200      	movs	r2, #0
   11226:	2101      	movs	r1, #1
   11228:	2008      	movs	r0, #8
   1122a:	f7fe f881 	bl	f330 <z_arm_irq_priority_set>
   1122e:	2008      	movs	r0, #8
   11230:	f7fe f86e 	bl	f310 <arch_irq_enable>
   11234:	4621      	mov	r1, r4
   11236:	4628      	mov	r0, r5
   11238:	f7ff ff86 	bl	11148 <uarte_instance_init.constprop.4>
   1123c:	b005      	add	sp, #20
   1123e:	bd30      	pop	{r4, r5, pc}
   11240:	0001ee6c 	.word	0x0001ee6c

00011244 <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   11244:	2200      	movs	r2, #0
{
   11246:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   11248:	4611      	mov	r1, r2
   1124a:	202a      	movs	r0, #42	; 0x2a
   1124c:	f7fe f870 	bl	f330 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
   11250:	f003 f90c 	bl	1446c <bsd_init>
   11254:	4b01      	ldr	r3, [pc, #4]	; (1125c <_bsdlib_init+0x18>)
   11256:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   11258:	2000      	movs	r0, #0
   1125a:	bd08      	pop	{r3, pc}
   1125c:	20020374 	.word	0x20020374

00011260 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   11260:	b570      	push	{r4, r5, r6, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   11262:	4b0d      	ldr	r3, [pc, #52]	; (11298 <thread_monitor_entry_get+0x38>)
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   11264:	4c0d      	ldr	r4, [pc, #52]	; (1129c <thread_monitor_entry_get+0x3c>)
		entry_age = rpc_event_cnt - entry->cnt;
   11266:	681a      	ldr	r2, [r3, #0]
   11268:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   1126a:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   1126c:	4623      	mov	r3, r4
		if (entry->id == id) {
   1126e:	6819      	ldr	r1, [r3, #0]
   11270:	4281      	cmp	r1, r0
   11272:	d00e      	beq.n	11292 <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   11274:	b151      	cbz	r1, 1128c <thread_monitor_entry_get+0x2c>
		entry_age = rpc_event_cnt - entry->cnt;
   11276:	6859      	ldr	r1, [r3, #4]
   11278:	1a51      	subs	r1, r2, r1
		if (entry_age > oldest_entry_age) {
   1127a:	42b1      	cmp	r1, r6
   1127c:	bfc4      	itt	gt
   1127e:	461c      	movgt	r4, r3
   11280:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   11282:	3d01      	subs	r5, #1
   11284:	f103 0308 	add.w	r3, r3, #8
   11288:	d1f1      	bne.n	1126e <thread_monitor_entry_get+0xe>
   1128a:	4623      	mov	r3, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   1128c:	3a01      	subs	r2, #1
	new_entry->id = id;
   1128e:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   11290:	605a      	str	r2, [r3, #4]

	return new_entry;
}
   11292:	4618      	mov	r0, r3
   11294:	bd70      	pop	{r4, r5, r6, pc}
   11296:	bf00      	nop
   11298:	20020378 	.word	0x20020378
   1129c:	20020384 	.word	0x20020384

000112a0 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   112a0:	4668      	mov	r0, sp
   112a2:	f020 0107 	bic.w	r1, r0, #7
   112a6:	468d      	mov	sp, r1
   112a8:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   112aa:	4b0d      	ldr	r3, [pc, #52]	; (112e0 <rpc_proxy_irq_handler+0x40>)
   112ac:	e8d3 2fef 	ldaex	r2, [r3]
   112b0:	3201      	adds	r2, #1
   112b2:	e8c3 2fe1 	stlex	r1, r2, [r3]
   112b6:	2900      	cmp	r1, #0
   112b8:	d1f8      	bne.n	112ac <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   112ba:	f007 fb0b 	bl	188d4 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   112be:	4b09      	ldr	r3, [pc, #36]	; (112e4 <rpc_proxy_irq_handler+0x44>)
   112c0:	681c      	ldr	r4, [r3, #0]
   112c2:	b93c      	cbnz	r4, 112d4 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   112c4:	f7fe f84c 	bl	f360 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   112c8:	f7fd ff8c 	bl	f1e4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   112cc:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   112d0:	4685      	mov	sp, r0
   112d2:	4770      	bx	lr
	z_impl_k_sem_give(sem);
   112d4:	1d20      	adds	r0, r4, #4
   112d6:	f00a fa2f 	bl	1b738 <z_impl_k_sem_give>
   112da:	6824      	ldr	r4, [r4, #0]
	return node->next;
   112dc:	e7f1      	b.n	112c2 <rpc_proxy_irq_handler+0x22>
   112de:	bf00      	nop
   112e0:	20020378 	.word	0x20020378
   112e4:	2002037c 	.word	0x2002037c

000112e8 <bsd_os_timedwait>:
{
   112e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112ec:	4688      	mov	r8, r1
   112ee:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
   112f0:	f00d faab 	bl	1e84a <z_impl_k_uptime_get>
	if (*timeout == 0) {
   112f4:	f8d8 3000 	ldr.w	r3, [r8]
   112f8:	4606      	mov	r6, r0
   112fa:	2b00      	cmp	r3, #0
   112fc:	460f      	mov	r7, r1
   112fe:	d103      	bne.n	11308 <bsd_os_timedwait+0x20>
	z_impl_k_yield();
   11300:	f00a f9a0 	bl	1b644 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   11304:	203c      	movs	r0, #60	; 0x3c
   11306:	e06e      	b.n	113e6 <bsd_os_timedwait+0xfe>
		*timeout = K_FOREVER;
   11308:	bfbc      	itt	lt
   1130a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   1130e:	f8c8 3000 	strlt.w	r3, [r8]
	z_impl_k_sem_init(sem, initial_count, limit);
   11312:	2201      	movs	r2, #1
   11314:	2100      	movs	r1, #0
   11316:	a802      	add	r0, sp, #8
   11318:	f00d f9fc 	bl	1e714 <z_impl_k_sem_init>
   1131c:	f10d 0a04 	add.w	sl, sp, #4
   11320:	f04f 0320 	mov.w	r3, #32
   11324:	f3ef 8b11 	mrs	fp, BASEPRI
   11328:	f383 8811 	msr	BASEPRI, r3
   1132c:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   11330:	f00a f9fc 	bl	1b72c <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   11334:	f7ff ff94 	bl	11260 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   11338:	4933      	ldr	r1, [pc, #204]	; (11408 <bsd_os_timedwait+0x120>)
   1133a:	6843      	ldr	r3, [r0, #4]
   1133c:	680a      	ldr	r2, [r1, #0]
   1133e:	4689      	mov	r9, r1
   11340:	4293      	cmp	r3, r2
   11342:	f04f 0300 	mov.w	r3, #0
   11346:	d108      	bne.n	1135a <bsd_os_timedwait+0x72>
	parent->next = child;
   11348:	9301      	str	r3, [sp, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1134a:	4b30      	ldr	r3, [pc, #192]	; (1140c <bsd_os_timedwait+0x124>)
   1134c:	685a      	ldr	r2, [r3, #4]
   1134e:	2a00      	cmp	r2, #0
   11350:	d14c      	bne.n	113ec <bsd_os_timedwait+0x104>
	list->head = node;
   11352:	e9c3 aa00 	strd	sl, sl, [r3]
		allow_to_sleep = true;
   11356:	2301      	movs	r3, #1
   11358:	e000      	b.n	1135c <bsd_os_timedwait+0x74>
	entry->cnt = rpc_event_cnt;
   1135a:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   1135c:	f38b 8811 	msr	BASEPRI, fp
   11360:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   11364:	2b00      	cmp	r3, #0
   11366:	d03d      	beq.n	113e4 <bsd_os_timedwait+0xfc>
	(void)k_sem_take(&thread.sem, *timeout);
   11368:	f8d8 1000 	ldr.w	r1, [r8]
	return z_impl_k_sem_take(sem, timeout);
   1136c:	a802      	add	r0, sp, #8
   1136e:	f00a fa0f 	bl	1b790 <z_impl_k_sem_take>
	__asm__ volatile(
   11372:	f04f 0320 	mov.w	r3, #32
   11376:	f3ef 8b11 	mrs	fp, BASEPRI
   1137a:	f383 8811 	msr	BASEPRI, r3
   1137e:	f3bf 8f6f 	isb	sy
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11382:	2000      	movs	r0, #0
   11384:	4b21      	ldr	r3, [pc, #132]	; (1140c <bsd_os_timedwait+0x124>)
   11386:	681a      	ldr	r2, [r3, #0]
   11388:	b152      	cbz	r2, 113a0 <bsd_os_timedwait+0xb8>
   1138a:	4552      	cmp	r2, sl
   1138c:	d139      	bne.n	11402 <bsd_os_timedwait+0x11a>
Z_GENLIST_REMOVE(slist, snode)
   1138e:	9901      	ldr	r1, [sp, #4]
   11390:	bb88      	cbnz	r0, 113f6 <bsd_os_timedwait+0x10e>
   11392:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   11394:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   11396:	4290      	cmp	r0, r2
   11398:	d100      	bne.n	1139c <bsd_os_timedwait+0xb4>
	list->tail = node;
   1139a:	6059      	str	r1, [r3, #4]
	parent->next = child;
   1139c:	2300      	movs	r3, #0
   1139e:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   113a0:	f00a f9c4 	bl	1b72c <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   113a4:	f7ff ff5c 	bl	11260 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   113a8:	f8d9 3000 	ldr.w	r3, [r9]
   113ac:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   113ae:	f38b 8811 	msr	BASEPRI, fp
   113b2:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
   113b6:	f8d8 9000 	ldr.w	r9, [r8]
   113ba:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   113be:	d011      	beq.n	113e4 <bsd_os_timedwait+0xfc>
	return z_impl_k_uptime_get();
   113c0:	f00d fa43 	bl	1e84a <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
   113c4:	eb16 0209 	adds.w	r2, r6, r9
   113c8:	eb47 73e9 	adc.w	r3, r7, r9, asr #31
   113cc:	1a14      	subs	r4, r2, r0
   113ce:	eb63 0501 	sbc.w	r5, r3, r1
	*timeout = remaining > 0 ? remaining : 0;
   113d2:	2c00      	cmp	r4, #0
   113d4:	f175 0300 	sbcs.w	r3, r5, #0
   113d8:	bfb8      	it	lt
   113da:	2400      	movlt	r4, #0
   113dc:	f8c8 4000 	str.w	r4, [r8]
	if (*timeout == 0) {
   113e0:	2c00      	cmp	r4, #0
   113e2:	d08f      	beq.n	11304 <bsd_os_timedwait+0x1c>
	return 0;
   113e4:	2000      	movs	r0, #0
}
   113e6:	b009      	add	sp, #36	; 0x24
   113e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113ec:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   113f0:	f8c3 a004 	str.w	sl, [r3, #4]
   113f4:	e7af      	b.n	11356 <bsd_os_timedwait+0x6e>
	parent->next = child;
   113f6:	6001      	str	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   113f8:	6859      	ldr	r1, [r3, #4]
   113fa:	4291      	cmp	r1, r2
	list->tail = node;
   113fc:	bf08      	it	eq
   113fe:	6058      	streq	r0, [r3, #4]
   11400:	e7cc      	b.n	1139c <bsd_os_timedwait+0xb4>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11402:	4610      	mov	r0, r2
   11404:	6812      	ldr	r2, [r2, #0]
   11406:	e7bf      	b.n	11388 <bsd_os_timedwait+0xa0>
   11408:	20020378 	.word	0x20020378
   1140c:	2002037c 	.word	0x2002037c

00011410 <bsd_os_errno_set>:
	switch (err_code) {
   11410:	282d      	cmp	r0, #45	; 0x2d
{
   11412:	b510      	push	{r4, lr}
   11414:	4604      	mov	r4, r0
	switch (err_code) {
   11416:	d00c      	beq.n	11432 <bsd_os_errno_set+0x22>
   11418:	dc38      	bgt.n	1148c <bsd_os_errno_set+0x7c>
   1141a:	280e      	cmp	r0, #14
   1141c:	d009      	beq.n	11432 <bsd_os_errno_set+0x22>
   1141e:	dc11      	bgt.n	11444 <bsd_os_errno_set+0x34>
   11420:	2808      	cmp	r0, #8
   11422:	d006      	beq.n	11432 <bsd_os_errno_set+0x22>
   11424:	dc09      	bgt.n	1143a <bsd_os_errno_set+0x2a>
   11426:	2802      	cmp	r0, #2
   11428:	d003      	beq.n	11432 <bsd_os_errno_set+0x22>
   1142a:	2805      	cmp	r0, #5
   1142c:	d001      	beq.n	11432 <bsd_os_errno_set+0x22>
   1142e:	2801      	cmp	r0, #1
   11430:	d119      	bne.n	11466 <bsd_os_errno_set+0x56>
		errno = ETIMEDOUT;
   11432:	f00c f9cd 	bl	1d7d0 <z_errno>
   11436:	6004      	str	r4, [r0, #0]
}
   11438:	bd10      	pop	{r4, pc}
	switch (err_code) {
   1143a:	280c      	cmp	r0, #12
   1143c:	d0f9      	beq.n	11432 <bsd_os_errno_set+0x22>
   1143e:	dc57      	bgt.n	114f0 <bsd_os_errno_set+0xe0>
   11440:	2809      	cmp	r0, #9
   11442:	e7f5      	b.n	11430 <bsd_os_errno_set+0x20>
   11444:	2828      	cmp	r0, #40	; 0x28
   11446:	f000 8083 	beq.w	11550 <bsd_os_errno_set+0x140>
   1144a:	dc05      	bgt.n	11458 <bsd_os_errno_set+0x48>
   1144c:	2818      	cmp	r0, #24
   1144e:	d0f0      	beq.n	11432 <bsd_os_errno_set+0x22>
   11450:	2823      	cmp	r0, #35	; 0x23
   11452:	d052      	beq.n	114fa <bsd_os_errno_set+0xea>
   11454:	2816      	cmp	r0, #22
   11456:	e7eb      	b.n	11430 <bsd_os_errno_set+0x20>
   11458:	282a      	cmp	r0, #42	; 0x2a
   1145a:	d0ea      	beq.n	11432 <bsd_os_errno_set+0x22>
   1145c:	db51      	blt.n	11502 <bsd_os_errno_set+0xf2>
   1145e:	282b      	cmp	r0, #43	; 0x2b
   11460:	d0e7      	beq.n	11432 <bsd_os_errno_set+0x22>
   11462:	282c      	cmp	r0, #44	; 0x2c
   11464:	d051      	beq.n	1150a <bsd_os_errno_set+0xfa>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   11466:	2301      	movs	r3, #1
   11468:	f04f 0200 	mov.w	r2, #0
   1146c:	493a      	ldr	r1, [pc, #232]	; (11558 <bsd_os_errno_set+0x148>)
   1146e:	f363 0207 	bfi	r2, r3, #0, #8
   11472:	4b3a      	ldr	r3, [pc, #232]	; (1155c <bsd_os_errno_set+0x14c>)
   11474:	483a      	ldr	r0, [pc, #232]	; (11560 <bsd_os_errno_set+0x150>)
   11476:	1a5b      	subs	r3, r3, r1
   11478:	08db      	lsrs	r3, r3, #3
   1147a:	f363 128f 	bfi	r2, r3, #6, #10
   1147e:	4621      	mov	r1, r4
   11480:	f00b f8aa 	bl	1c5d8 <log_1>
		errno = 0xBAADBAAD;
   11484:	f00c f9a4 	bl	1d7d0 <z_errno>
   11488:	4b36      	ldr	r3, [pc, #216]	; (11564 <bsd_os_errno_set+0x154>)
   1148a:	e034      	b.n	114f6 <bsd_os_errno_set+0xe6>
	switch (err_code) {
   1148c:	283c      	cmp	r0, #60	; 0x3c
   1148e:	d0d0      	beq.n	11432 <bsd_os_errno_set+0x22>
   11490:	dc15      	bgt.n	114be <bsd_os_errno_set+0xae>
   11492:	2833      	cmp	r0, #51	; 0x33
   11494:	d0cd      	beq.n	11432 <bsd_os_errno_set+0x22>
   11496:	dc05      	bgt.n	114a4 <bsd_os_errno_set+0x94>
   11498:	2830      	cmp	r0, #48	; 0x30
   1149a:	d0ca      	beq.n	11432 <bsd_os_errno_set+0x22>
   1149c:	2832      	cmp	r0, #50	; 0x32
   1149e:	d038      	beq.n	11512 <bsd_os_errno_set+0x102>
   114a0:	282f      	cmp	r0, #47	; 0x2f
   114a2:	e7c5      	b.n	11430 <bsd_os_errno_set+0x20>
   114a4:	2836      	cmp	r0, #54	; 0x36
   114a6:	d0c4      	beq.n	11432 <bsd_os_errno_set+0x22>
   114a8:	dc01      	bgt.n	114ae <bsd_os_errno_set+0x9e>
   114aa:	2834      	cmp	r0, #52	; 0x34
   114ac:	e7c0      	b.n	11430 <bsd_os_errno_set+0x20>
   114ae:	2838      	cmp	r0, #56	; 0x38
   114b0:	d0bf      	beq.n	11432 <bsd_os_errno_set+0x22>
   114b2:	2839      	cmp	r0, #57	; 0x39
   114b4:	d1d7      	bne.n	11466 <bsd_os_errno_set+0x56>
		errno = ENOTCONN;
   114b6:	f00c f98b 	bl	1d7d0 <z_errno>
   114ba:	2339      	movs	r3, #57	; 0x39
   114bc:	e01b      	b.n	114f6 <bsd_os_errno_set+0xe6>
	switch (err_code) {
   114be:	287d      	cmp	r0, #125	; 0x7d
   114c0:	d033      	beq.n	1152a <bsd_os_errno_set+0x11a>
   114c2:	dc09      	bgt.n	114d8 <bsd_os_errno_set+0xc8>
   114c4:	2870      	cmp	r0, #112	; 0x70
   114c6:	d028      	beq.n	1151a <bsd_os_errno_set+0x10a>
   114c8:	2873      	cmp	r0, #115	; 0x73
   114ca:	d02a      	beq.n	11522 <bsd_os_errno_set+0x112>
   114cc:	2869      	cmp	r0, #105	; 0x69
   114ce:	d1ca      	bne.n	11466 <bsd_os_errno_set+0x56>
		errno = ENOBUFS;
   114d0:	f00c f97e 	bl	1d7d0 <z_errno>
   114d4:	2337      	movs	r3, #55	; 0x37
   114d6:	e00e      	b.n	114f6 <bsd_os_errno_set+0xe6>
	switch (err_code) {
   114d8:	287f      	cmp	r0, #127	; 0x7f
   114da:	d02f      	beq.n	1153c <bsd_os_errno_set+0x12c>
   114dc:	db29      	blt.n	11532 <bsd_os_errno_set+0x122>
   114de:	2880      	cmp	r0, #128	; 0x80
   114e0:	d031      	beq.n	11546 <bsd_os_errno_set+0x136>
   114e2:	2881      	cmp	r0, #129	; 0x81
   114e4:	d1bf      	bne.n	11466 <bsd_os_errno_set+0x56>
		errno = EKEYREJECTED;
   114e6:	f00c f973 	bl	1d7d0 <z_errno>
   114ea:	f240 73d4 	movw	r3, #2004	; 0x7d4
   114ee:	e002      	b.n	114f6 <bsd_os_errno_set+0xe6>
		errno = EACCES;
   114f0:	f00c f96e 	bl	1d7d0 <z_errno>
   114f4:	230d      	movs	r3, #13
		errno = 0xBAADBAAD;
   114f6:	6003      	str	r3, [r0, #0]
}
   114f8:	e79e      	b.n	11438 <bsd_os_errno_set+0x28>
		errno = EAGAIN;
   114fa:	f00c f969 	bl	1d7d0 <z_errno>
   114fe:	230b      	movs	r3, #11
   11500:	e7f9      	b.n	114f6 <bsd_os_errno_set+0xe6>
		errno = EPROTOTYPE;
   11502:	f00c f965 	bl	1d7d0 <z_errno>
   11506:	2329      	movs	r3, #41	; 0x29
   11508:	e7f5      	b.n	114f6 <bsd_os_errno_set+0xe6>
		errno = ESOCKTNOSUPPORT;
   1150a:	f00c f961 	bl	1d7d0 <z_errno>
   1150e:	232c      	movs	r3, #44	; 0x2c
   11510:	e7f1      	b.n	114f6 <bsd_os_errno_set+0xe6>
		errno = ENETDOWN;
   11512:	f00c f95d 	bl	1d7d0 <z_errno>
   11516:	233e      	movs	r3, #62	; 0x3e
   11518:	e7ed      	b.n	114f6 <bsd_os_errno_set+0xe6>
		errno = EHOSTDOWN;
   1151a:	f00c f959 	bl	1d7d0 <z_errno>
   1151e:	2343      	movs	r3, #67	; 0x43
   11520:	e7e9      	b.n	114f6 <bsd_os_errno_set+0xe6>
		errno = EINPROGRESS;
   11522:	f00c f955 	bl	1d7d0 <z_errno>
   11526:	2344      	movs	r3, #68	; 0x44
   11528:	e7e5      	b.n	114f6 <bsd_os_errno_set+0xe6>
		errno = ECANCELED;
   1152a:	f00c f951 	bl	1d7d0 <z_errno>
   1152e:	2348      	movs	r3, #72	; 0x48
   11530:	e7e1      	b.n	114f6 <bsd_os_errno_set+0xe6>
		errno = ENOKEY;
   11532:	f00c f94d 	bl	1d7d0 <z_errno>
   11536:	f240 73d1 	movw	r3, #2001	; 0x7d1
   1153a:	e7dc      	b.n	114f6 <bsd_os_errno_set+0xe6>
		errno = EKEYEXPIRED;
   1153c:	f00c f948 	bl	1d7d0 <z_errno>
   11540:	f240 73d2 	movw	r3, #2002	; 0x7d2
   11544:	e7d7      	b.n	114f6 <bsd_os_errno_set+0xe6>
		errno = EKEYREVOKED;
   11546:	f00c f943 	bl	1d7d0 <z_errno>
   1154a:	f240 73d3 	movw	r3, #2003	; 0x7d3
   1154e:	e7d2      	b.n	114f6 <bsd_os_errno_set+0xe6>
		errno = EMSGSIZE;
   11550:	f00c f93e 	bl	1d7d0 <z_errno>
   11554:	2324      	movs	r3, #36	; 0x24
   11556:	e7ce      	b.n	114f6 <bsd_os_errno_set+0xe6>
   11558:	0001edc4 	.word	0x0001edc4
   1155c:	0001ede4 	.word	0x0001ede4
   11560:	000203fd 	.word	0x000203fd
   11564:	baadbaad 	.word	0xbaadbaad

00011568 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1156c:	4b01      	ldr	r3, [pc, #4]	; (11574 <bsd_os_application_irq_set+0xc>)
   1156e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   11572:	4770      	bx	lr
   11574:	e000e100 	.word	0xe000e100

00011578 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1157c:	4b01      	ldr	r3, [pc, #4]	; (11584 <bsd_os_application_irq_clear+0xc>)
   1157e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   11582:	4770      	bx	lr
   11584:	e000e100 	.word	0xe000e100

00011588 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11588:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   1158c:	4b01      	ldr	r3, [pc, #4]	; (11594 <bsd_os_trace_irq_set+0xc>)
   1158e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   11592:	4770      	bx	lr
   11594:	e000e100 	.word	0xe000e100

00011598 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11598:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   1159c:	4b01      	ldr	r3, [pc, #4]	; (115a4 <bsd_os_trace_irq_clear+0xc>)
   1159e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   115a2:	4770      	bx	lr
   115a4:	e000e100 	.word	0xe000e100

000115a8 <trace_uart_init>:
			   rpc_proxy_irq_handler, UNUSED_FLAGS);
	irq_enable(BSD_APPLICATION_IRQ);
}

void trace_uart_init(void)
{
   115a8:	b500      	push	{lr}
   115aa:	b089      	sub	sp, #36	; 0x24
#ifdef CONFIG_BSD_LIBRARY_TRACE_ENABLED
	/* UART pins are defined in "nrf9160_pca10090.dts". */
	const nrfx_uarte_config_t config = {
   115ac:	2218      	movs	r2, #24
   115ae:	2100      	movs	r1, #0
   115b0:	a802      	add	r0, sp, #8
   115b2:	f00b fda4 	bl	1d0fe <memset>
   115b6:	2301      	movs	r3, #1
   115b8:	9301      	str	r3, [sp, #4]
   115ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   115be:	e9cd 3303 	strd	r3, r3, [sp, #12]
   115c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   115c6:	9306      	str	r3, [sp, #24]
   115c8:	2307      	movs	r3, #7
		.p_context = NULL,
	};

	/* Initialize nrfx UARTE driver in blocking mode. */
	/* TODO: use UARTE in non-blocking mode with IRQ handler. */
	nrfx_uarte_init(&uarte_inst, &config, NULL);
   115ca:	2200      	movs	r2, #0
   115cc:	a901      	add	r1, sp, #4
   115ce:	4804      	ldr	r0, [pc, #16]	; (115e0 <trace_uart_init+0x38>)
	const nrfx_uarte_config_t config = {
   115d0:	f88d 301c 	strb.w	r3, [sp, #28]
	nrfx_uarte_init(&uarte_inst, &config, NULL);
   115d4:	f009 f8ee 	bl	1a7b4 <nrfx_uarte_init>
#endif
}
   115d8:	b009      	add	sp, #36	; 0x24
   115da:	f85d fb04 	ldr.w	pc, [sp], #4
   115de:	bf00      	nop
   115e0:	0001effc 	.word	0x0001effc

000115e4 <bsd_os_init>:

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   115e4:	b508      	push	{r3, lr}
	list->head = NULL;
   115e6:	2300      	movs	r3, #0
   115e8:	4a08      	ldr	r2, [pc, #32]	; (1160c <bsd_os_init+0x28>)
	list->tail = NULL;
   115ea:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   115ee:	4a08      	ldr	r2, [pc, #32]	; (11610 <bsd_os_init+0x2c>)
   115f0:	e8d2 1fef 	ldaex	r1, [r2]
   115f4:	e8c2 3fe0 	stlex	r0, r3, [r2]
   115f8:	2800      	cmp	r0, #0
   115fa:	d1f9      	bne.n	115f0 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   115fc:	f00c f913 	bl	1d826 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
   11600:	f7ff ffd2 	bl	115a8 <trace_uart_init>
	trace_task_create();
}
   11604:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   11608:	f00c b902 	b.w	1d810 <trace_task_create>
   1160c:	2002037c 	.word	0x2002037c
   11610:	20020378 	.word	0x20020378

00011614 <bsd_os_trace_put>:

int32_t bsd_os_trace_put(const uint8_t * const data, uint32_t len)
{
   11614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11618:	4607      	mov	r7, r0
   1161a:	460d      	mov	r5, r1
#ifdef CONFIG_BSD_LIBRARY_TRACE_ENABLED
	/* Max DMA transfers are 255 bytes.
	 * Split RAM buffer into smaller chunks
	 * to be transferred using DMA.
	 */
	u32_t remaining_bytes = len;
   1161c:	460c      	mov	r4, r1

	while (remaining_bytes) {
		u8_t transfer_len = MIN(remaining_bytes, UINT8_MAX);
		u32_t idx = len - remaining_bytes;

		nrfx_uarte_tx(&uarte_inst, &data[idx], transfer_len);
   1161e:	f8df 8024 	ldr.w	r8, [pc, #36]	; 11644 <bsd_os_trace_put+0x30>
	while (remaining_bytes) {
   11622:	b914      	cbnz	r4, 1162a <bsd_os_trace_put+0x16>
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   11624:	4620      	mov	r0, r4
   11626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		u8_t transfer_len = MIN(remaining_bytes, UINT8_MAX);
   1162a:	2cff      	cmp	r4, #255	; 0xff
   1162c:	4626      	mov	r6, r4
   1162e:	bf28      	it	cs
   11630:	26ff      	movcs	r6, #255	; 0xff
		u32_t idx = len - remaining_bytes;
   11632:	1b29      	subs	r1, r5, r4
		nrfx_uarte_tx(&uarte_inst, &data[idx], transfer_len);
   11634:	4632      	mov	r2, r6
   11636:	4439      	add	r1, r7
   11638:	4640      	mov	r0, r8
   1163a:	f009 f94f 	bl	1a8dc <nrfx_uarte_tx>
		remaining_bytes -= transfer_len;
   1163e:	1ba4      	subs	r4, r4, r6
   11640:	e7ef      	b.n	11622 <bsd_os_trace_put+0xe>
   11642:	bf00      	nop
   11644:	0001effc 	.word	0x0001effc

00011648 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   11648:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   1164c:	d03c      	beq.n	116c8 <z_to_nrf_optname+0x80>
   1164e:	dc04      	bgt.n	1165a <z_to_nrf_optname+0x12>
   11650:	2801      	cmp	r0, #1
   11652:	d044      	beq.n	116de <z_to_nrf_optname+0x96>
			break;
		}
		break;

	default:
		retval = -1;
   11654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		break;
	}

	return retval;
}
   11658:	4770      	bx	lr
	switch (z_in_level) {
   1165a:	f240 2302 	movw	r3, #514	; 0x202
   1165e:	4298      	cmp	r0, r3
   11660:	d052      	beq.n	11708 <z_to_nrf_optname+0xc0>
   11662:	f240 2303 	movw	r3, #515	; 0x203
   11666:	4298      	cmp	r0, r3
   11668:	d1f4      	bne.n	11654 <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
   1166a:	3901      	subs	r1, #1
   1166c:	2913      	cmp	r1, #19
   1166e:	d8f1      	bhi.n	11654 <z_to_nrf_optname+0xc>
   11670:	a301      	add	r3, pc, #4	; (adr r3, 11678 <z_to_nrf_optname+0x30>)
   11672:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   11676:	bf00      	nop
   11678:	00011715 	.word	0x00011715
   1167c:	000116d9 	.word	0x000116d9
   11680:	000116f9 	.word	0x000116f9
   11684:	000116eb 	.word	0x000116eb
   11688:	000116fd 	.word	0x000116fd
   1168c:	00011701 	.word	0x00011701
   11690:	00011705 	.word	0x00011705
   11694:	00011655 	.word	0x00011655
   11698:	00011655 	.word	0x00011655
   1169c:	00011655 	.word	0x00011655
   116a0:	00011655 	.word	0x00011655
   116a4:	00011655 	.word	0x00011655
   116a8:	00011655 	.word	0x00011655
   116ac:	00011655 	.word	0x00011655
   116b0:	00011655 	.word	0x00011655
   116b4:	00011655 	.word	0x00011655
   116b8:	00011655 	.word	0x00011655
   116bc:	00011655 	.word	0x00011655
   116c0:	00011655 	.word	0x00011655
   116c4:	000116ef 	.word	0x000116ef
		switch (z_in_optname) {
   116c8:	3901      	subs	r1, #1
   116ca:	2905      	cmp	r1, #5
   116cc:	d8c2      	bhi.n	11654 <z_to_nrf_optname+0xc>
   116ce:	e8df f001 	tbb	[pc, r1]
   116d2:	1503      	.short	0x1503
   116d4:	210c1917 	.word	0x210c1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   116d8:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   116da:	6013      	str	r3, [r2, #0]
   116dc:	e00a      	b.n	116f4 <z_to_nrf_optname+0xac>
		switch (z_in_optname) {
   116de:	2914      	cmp	r1, #20
   116e0:	d005      	beq.n	116ee <z_to_nrf_optname+0xa6>
   116e2:	2919      	cmp	r1, #25
   116e4:	d005      	beq.n	116f2 <z_to_nrf_optname+0xaa>
   116e6:	2904      	cmp	r1, #4
   116e8:	d1b4      	bne.n	11654 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   116ea:	2304      	movs	r3, #4
   116ec:	e7f5      	b.n	116da <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   116ee:	2314      	movs	r3, #20
   116f0:	e7f3      	b.n	116da <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   116f2:	6011      	str	r1, [r2, #0]
	int retval = 0;
   116f4:	2000      	movs	r0, #0
			break;
   116f6:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   116f8:	2303      	movs	r3, #3
   116fa:	e7ee      	b.n	116da <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   116fc:	2305      	movs	r3, #5
   116fe:	e7ec      	b.n	116da <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   11700:	2306      	movs	r3, #6
   11702:	e7ea      	b.n	116da <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   11704:	2307      	movs	r3, #7
   11706:	e7e8      	b.n	116da <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   11708:	2902      	cmp	r1, #2
   1170a:	d0e5      	beq.n	116d8 <z_to_nrf_optname+0x90>
   1170c:	2903      	cmp	r1, #3
   1170e:	d0f3      	beq.n	116f8 <z_to_nrf_optname+0xb0>
   11710:	2901      	cmp	r1, #1
   11712:	d19f      	bne.n	11654 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   11714:	2301      	movs	r3, #1
   11716:	e7e0      	b.n	116da <z_to_nrf_optname+0x92>

00011718 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   11718:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   1171a:	4b03      	ldr	r3, [pc, #12]	; (11728 <nrf91_socket_iface_init+0x10>)
   1171c:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   1171e:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
   11720:	4802      	ldr	r0, [pc, #8]	; (1172c <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   11722:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
   11724:	f7fd bc00 	b.w	ef28 <socket_offload_register>
   11728:	200203d4 	.word	0x200203d4
   1172c:	0001f004 	.word	0x0001f004

00011730 <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   11730:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   11732:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   11734:	b118      	cbz	r0, 1173e <callback_worker+0xe>
		data->callback(data->data);
   11736:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   1173a:	300c      	adds	r0, #12
   1173c:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   1173e:	a901      	add	r1, sp, #4
   11740:	4802      	ldr	r0, [pc, #8]	; (1174c <callback_worker+0x1c>)
   11742:	f009 fae1 	bl	1ad08 <k_mem_slab_free>
}
   11746:	b003      	add	sp, #12
   11748:	f85d fb04 	ldr.w	pc, [sp], #4
   1174c:	2002c538 	.word	0x2002c538

00011750 <open_socket>:
{
   11750:	b508      	push	{r3, lr}
	return socket_ops->socket(family, type, proto);
   11752:	4b09      	ldr	r3, [pc, #36]	; (11778 <open_socket+0x28>)
   11754:	f240 2201 	movw	r2, #513	; 0x201
   11758:	681b      	ldr	r3, [r3, #0]
   1175a:	2100      	movs	r1, #0
   1175c:	681b      	ldr	r3, [r3, #0]
   1175e:	2066      	movs	r0, #102	; 0x66
   11760:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, 0, NPROTO_AT);
   11762:	4b06      	ldr	r3, [pc, #24]	; (1177c <open_socket+0x2c>)
   11764:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   11766:	3001      	adds	r0, #1
   11768:	d104      	bne.n	11774 <open_socket+0x24>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1176a:	f009 f939 	bl	1a9e0 <z_impl_z_errno>
		return -errno;
   1176e:	6800      	ldr	r0, [r0, #0]
   11770:	4240      	negs	r0, r0
}
   11772:	bd08      	pop	{r3, pc}
	return 0;
   11774:	2000      	movs	r0, #0
   11776:	e7fc      	b.n	11772 <open_socket+0x22>
   11778:	2002031c 	.word	0x2002031c
   1177c:	200203d8 	.word	0x200203d8

00011780 <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   11780:	b530      	push	{r4, r5, lr}
   11782:	b087      	sub	sp, #28
	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   11784:	f7ff ffe4 	bl	11750 <open_socket>
	if (err) {
   11788:	4d1a      	ldr	r5, [pc, #104]	; (117f4 <at_cmd_driver_init+0x74>)
   1178a:	4b1b      	ldr	r3, [pc, #108]	; (117f8 <at_cmd_driver_init+0x78>)
   1178c:	4604      	mov	r4, r0
   1178e:	1aed      	subs	r5, r5, r3
   11790:	f3c5 05c9 	ubfx	r5, r5, #3, #10
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   11794:	f04f 0200 	mov.w	r2, #0
	if (err) {
   11798:	b158      	cbz	r0, 117b2 <at_cmd_driver_init+0x32>
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   1179a:	2301      	movs	r3, #1
   1179c:	4601      	mov	r1, r0
   1179e:	f363 0207 	bfi	r2, r3, #0, #8
   117a2:	4816      	ldr	r0, [pc, #88]	; (117fc <at_cmd_driver_init+0x7c>)
   117a4:	f365 128f 	bfi	r2, r5, #6, #10
			K_THREAD_STACK_SIZEOF(socket_thread_stack),
			socket_thread_fn,
			NULL, NULL, NULL,
			THREAD_PRIORITY, 0, K_NO_WAIT);

	LOG_DBG("Common AT socket processing thread created");
   117a8:	f00a ff16 	bl	1c5d8 <log_1>

	return 0;
}
   117ac:	4620      	mov	r0, r4
   117ae:	b007      	add	sp, #28
   117b0:	bd30      	pop	{r4, r5, pc}
	LOG_DBG("Common AT socket created");
   117b2:	2304      	movs	r3, #4
   117b4:	f363 0207 	bfi	r2, r3, #0, #8
   117b8:	f365 128f 	bfi	r2, r5, #6, #10
   117bc:	4910      	ldr	r1, [pc, #64]	; (11800 <at_cmd_driver_init+0x80>)
   117be:	4811      	ldr	r0, [pc, #68]	; (11804 <at_cmd_driver_init+0x84>)
   117c0:	f00a ff0a 	bl	1c5d8 <log_1>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   117c4:	230a      	movs	r3, #10
   117c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   117ca:	e9cd 4302 	strd	r4, r3, [sp, #8]
   117ce:	490e      	ldr	r1, [pc, #56]	; (11808 <at_cmd_driver_init+0x88>)
   117d0:	4b0e      	ldr	r3, [pc, #56]	; (1180c <at_cmd_driver_init+0x8c>)
   117d2:	e9cd 4404 	strd	r4, r4, [sp, #16]
   117d6:	e9cd 4400 	strd	r4, r4, [sp]
   117da:	480d      	ldr	r0, [pc, #52]	; (11810 <at_cmd_driver_init+0x90>)
   117dc:	f00a f868 	bl	1b8b0 <z_impl_k_thread_create>
	LOG_DBG("Common AT socket processing thread created");
   117e0:	f04f 0200 	mov.w	r2, #0
   117e4:	2304      	movs	r3, #4
   117e6:	f363 0207 	bfi	r2, r3, #0, #8
   117ea:	f365 128f 	bfi	r2, r5, #6, #10
   117ee:	4904      	ldr	r1, [pc, #16]	; (11800 <at_cmd_driver_init+0x80>)
   117f0:	4808      	ldr	r0, [pc, #32]	; (11814 <at_cmd_driver_init+0x94>)
   117f2:	e7d9      	b.n	117a8 <at_cmd_driver_init+0x28>
   117f4:	0001edcc 	.word	0x0001edcc
   117f8:	0001edc4 	.word	0x0001edc4
   117fc:	00020483 	.word	0x00020483
   11800:	00020470 	.word	0x00020470
   11804:	000204a5 	.word	0x000204a5
   11808:	20026ca0 	.word	0x20026ca0
   1180c:	00011819 	.word	0x00011819
   11810:	200203ec 	.word	0x200203ec
   11814:	000204c2 	.word	0x000204c2

00011818 <socket_thread_fn>:
	LOG_DBG("AT socket thread started");
   11818:	2304      	movs	r3, #4
   1181a:	f04f 0200 	mov.w	r2, #0
{
   1181e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_DBG("AT socket thread started");
   11822:	f363 0207 	bfi	r2, r3, #0, #8
   11826:	499b      	ldr	r1, [pc, #620]	; (11a94 <socket_thread_fn+0x27c>)
   11828:	4b9b      	ldr	r3, [pc, #620]	; (11a98 <socket_thread_fn+0x280>)
{
   1182a:	b087      	sub	sp, #28
	LOG_DBG("AT socket thread started");
   1182c:	1a5b      	subs	r3, r3, r1
   1182e:	f3c3 0bc9 	ubfx	fp, r3, #3, #10
   11832:	f36b 128f 	bfi	r2, fp, #6, #10
   11836:	4999      	ldr	r1, [pc, #612]	; (11a9c <socket_thread_fn+0x284>)
   11838:	4899      	ldr	r0, [pc, #612]	; (11aa0 <socket_thread_fn+0x288>)
   1183a:	f00a fecd 	bl	1c5d8 <log_1>
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   1183e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11842:	a903      	add	r1, sp, #12
   11844:	4897      	ldr	r0, [pc, #604]	; (11aa4 <socket_thread_fn+0x28c>)
   11846:	f009 fa33 	bl	1acb0 <k_mem_slab_alloc>
		ret.code  = 0;
   1184a:	2300      	movs	r3, #0
	return socket_ops->recv(sock, buf, max_len, flags);
   1184c:	4c96      	ldr	r4, [pc, #600]	; (11aa8 <socket_thread_fn+0x290>)
		item->callback = NULL;
   1184e:	9903      	ldr	r1, [sp, #12]
   11850:	6822      	ldr	r2, [r4, #0]
   11852:	4896      	ldr	r0, [pc, #600]	; (11aac <socket_thread_fn+0x294>)
   11854:	f8c1 3a98 	str.w	r3, [r1, #2712]	; 0xa98
   11858:	f8d2 a024 	ldr.w	sl, [r2, #36]	; 0x24
   1185c:	310c      	adds	r1, #12
		ret.code  = 0;
   1185e:	9304      	str	r3, [sp, #16]
		ret.state = AT_CMD_OK;
   11860:	f88d 3014 	strb.w	r3, [sp, #20]
   11864:	f640 228c 	movw	r2, #2700	; 0xa8c
   11868:	6800      	ldr	r0, [r0, #0]
   1186a:	47d0      	blx	sl
		if (bytes_read < 0) {
   1186c:	1e01      	subs	r1, r0, #0
   1186e:	da5b      	bge.n	11928 <socket_thread_fn+0x110>
			LOG_ERR("AT socket recv failed with err %d",
   11870:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
   11874:	f043 0301 	orr.w	r3, r3, #1
   11878:	f363 0507 	bfi	r5, r3, #0, #8
   1187c:	f36b 158f 	bfi	r5, fp, #6, #10
   11880:	488b      	ldr	r0, [pc, #556]	; (11ab0 <socket_thread_fn+0x298>)
   11882:	462a      	mov	r2, r5
   11884:	f00a fea8 	bl	1c5d8 <log_1>
	return socket_ops->close(sock);
   11888:	6823      	ldr	r3, [r4, #0]
   1188a:	4888      	ldr	r0, [pc, #544]	; (11aac <socket_thread_fn+0x294>)
   1188c:	685b      	ldr	r3, [r3, #4]
   1188e:	6800      	ldr	r0, [r0, #0]
   11890:	4798      	blx	r3
			if ((close(common_socket_fd) == 0) &&
   11892:	2800      	cmp	r0, #0
   11894:	d131      	bne.n	118fa <socket_thread_fn+0xe2>
			    (open_socket() == 0)) {
   11896:	f7ff ff5b 	bl	11750 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   1189a:	bb70      	cbnz	r0, 118fa <socket_thread_fn+0xe2>
				LOG_INF("AT socket recovered");
   1189c:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   118a0:	f043 0303 	orr.w	r3, r3, #3
   118a4:	f363 0607 	bfi	r6, r3, #0, #8
   118a8:	f36b 168f 	bfi	r6, fp, #6, #10
   118ac:	4631      	mov	r1, r6
   118ae:	4881      	ldr	r0, [pc, #516]	; (11ab4 <socket_thread_fn+0x29c>)
   118b0:	f00a fe85 	bl	1c5be <log_0>
				ret.state = AT_CMD_ERROR;
   118b4:	2301      	movs	r3, #1
   118b6:	f88d 3014 	strb.w	r3, [sp, #20]
   118ba:	f009 f891 	bl	1a9e0 <z_impl_z_errno>
				ret.code  = -errno;
   118be:	6803      	ldr	r3, [r0, #0]
   118c0:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   118c2:	9304      	str	r3, [sp, #16]
		if (item->callback == NULL) {
   118c4:	9903      	ldr	r1, [sp, #12]
   118c6:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   118ca:	2b00      	cmp	r3, #0
   118cc:	f040 80b8 	bne.w	11a40 <socket_thread_fn+0x228>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   118d0:	a903      	add	r1, sp, #12
   118d2:	4874      	ldr	r0, [pc, #464]	; (11aa4 <socket_thread_fn+0x28c>)
   118d4:	f009 fa18 	bl	1ad08 <k_mem_slab_free>
	if (z_syscall_trap()) {
		return (unsigned int) arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_COUNT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_count_get(sem);
   118d8:	4b77      	ldr	r3, [pc, #476]	; (11ab8 <socket_thread_fn+0x2a0>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   118da:	689b      	ldr	r3, [r3, #8]
   118dc:	2b00      	cmp	r3, #0
   118de:	d1ae      	bne.n	1183e <socket_thread_fn+0x26>
   118e0:	f89d 2014 	ldrb.w	r2, [sp, #20]
   118e4:	2a04      	cmp	r2, #4
   118e6:	d0aa      	beq.n	1183e <socket_thread_fn+0x26>
			current_cmd_handler = NULL;
   118e8:	4a74      	ldr	r2, [pc, #464]	; (11abc <socket_thread_fn+0x2a4>)
   118ea:	6013      	str	r3, [r2, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&q, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(q, data, timeout);
   118ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   118f0:	a904      	add	r1, sp, #16
   118f2:	4873      	ldr	r0, [pc, #460]	; (11ac0 <socket_thread_fn+0x2a8>)
   118f4:	f009 fad2 	bl	1ae9c <z_impl_k_msgq_put>
   118f8:	e7a1      	b.n	1183e <socket_thread_fn+0x26>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   118fa:	2301      	movs	r3, #1
   118fc:	f04f 0400 	mov.w	r4, #0
   11900:	f363 0407 	bfi	r4, r3, #0, #8
   11904:	f36b 148f 	bfi	r4, fp, #6, #10
   11908:	f009 f86a 	bl	1a9e0 <z_impl_z_errno>
   1190c:	4622      	mov	r2, r4
   1190e:	6801      	ldr	r1, [r0, #0]
   11910:	486c      	ldr	r0, [pc, #432]	; (11ac4 <socket_thread_fn+0x2ac>)
   11912:	f00a fe61 	bl	1c5d8 <log_1>
   11916:	4b64      	ldr	r3, [pc, #400]	; (11aa8 <socket_thread_fn+0x290>)
   11918:	4a64      	ldr	r2, [pc, #400]	; (11aac <socket_thread_fn+0x294>)
   1191a:	681b      	ldr	r3, [r3, #0]
   1191c:	6810      	ldr	r0, [r2, #0]
   1191e:	685b      	ldr	r3, [r3, #4]
   11920:	4798      	blx	r3
}
   11922:	b007      	add	sp, #28
   11924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (bytes_read == sizeof(item->data) ||
   11928:	f640 238c 	movw	r3, #2700	; 0xa8c
   1192c:	4299      	cmp	r1, r3
   1192e:	d004      	beq.n	1193a <socket_thread_fn+0x122>
			   item->data[bytes_read - 1] != '\0') {
   11930:	9803      	ldr	r0, [sp, #12]
   11932:	4401      	add	r1, r0
		} else if (bytes_read == sizeof(item->data) ||
   11934:	7acb      	ldrb	r3, [r1, #11]
   11936:	9301      	str	r3, [sp, #4]
   11938:	b173      	cbz	r3, 11958 <socket_thread_fn+0x140>
			LOG_ERR("AT message to large for reception buffer or "
   1193a:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   1193e:	f043 0301 	orr.w	r3, r3, #1
   11942:	f363 0707 	bfi	r7, r3, #0, #8
   11946:	f36b 178f 	bfi	r7, fp, #6, #10
   1194a:	4639      	mov	r1, r7
   1194c:	485e      	ldr	r0, [pc, #376]	; (11ac8 <socket_thread_fn+0x2b0>)
   1194e:	f00a fe36 	bl	1c5be <log_0>
			ret.code  = -ENOBUFS;
   11952:	f06f 0336 	mvn.w	r3, #54	; 0x36
   11956:	e7b4      	b.n	118c2 <socket_thread_fn+0xaa>
		LOG_DBG("at_cmd_rx: %s", log_strdup(item->data));
   11958:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   1195c:	f043 0304 	orr.w	r3, r3, #4
   11960:	300c      	adds	r0, #12
   11962:	f363 0807 	bfi	r8, r3, #0, #8
   11966:	f7fd f817 	bl	e998 <log_strdup>
   1196a:	f36b 188f 	bfi	r8, fp, #6, #10
   1196e:	4602      	mov	r2, r0
   11970:	4643      	mov	r3, r8
   11972:	494a      	ldr	r1, [pc, #296]	; (11a9c <socket_thread_fn+0x284>)
   11974:	4855      	ldr	r0, [pc, #340]	; (11acc <socket_thread_fn+0x2b4>)
   11976:	f00a fe43 	bl	1c600 <log_2>
	ret->state = AT_CMD_NOTIFICATION;
   1197a:	2304      	movs	r3, #4
		payload_len = get_return_code(item->data, &ret);
   1197c:	f8dd a00c 	ldr.w	sl, [sp, #12]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   11980:	4953      	ldr	r1, [pc, #332]	; (11ad0 <socket_thread_fn+0x2b8>)
		payload_len = get_return_code(item->data, &ret);
   11982:	f10a 040c 	add.w	r4, sl, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   11986:	4620      	mov	r0, r4
	ret->state = AT_CMD_NOTIFICATION;
   11988:	f88d 3014 	strb.w	r3, [sp, #20]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   1198c:	f00b fafd 	bl	1cf8a <strstr>
		if (tmpstr) {
   11990:	4603      	mov	r3, r0
   11992:	b120      	cbz	r0, 1199e <socket_thread_fn+0x186>
			ret->state = AT_CMD_OK;
   11994:	9a01      	ldr	r2, [sp, #4]
   11996:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code  = -ENOEXEC;
   1199a:	9204      	str	r2, [sp, #16]
			break;
   1199c:	e00e      	b.n	119bc <socket_thread_fn+0x1a4>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   1199e:	494d      	ldr	r1, [pc, #308]	; (11ad4 <socket_thread_fn+0x2bc>)
   119a0:	4620      	mov	r0, r4
   119a2:	f00b faf2 	bl	1cf8a <strstr>
		if (tmpstr) {
   119a6:	9001      	str	r0, [sp, #4]
   119a8:	b328      	cbz	r0, 119f6 <socket_thread_fn+0x1de>
			ret->state = AT_CMD_ERROR_CMS;
   119aa:	2202      	movs	r2, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   119ac:	f10a 0017 	add.w	r0, sl, #23
			ret->state = AT_CMD_ERROR_CME;
   119b0:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   119b4:	f00b f9d4 	bl	1cd60 <atoi>
   119b8:	9b01      	ldr	r3, [sp, #4]
   119ba:	9004      	str	r0, [sp, #16]
		buf[new_len++] = '\0';
   119bc:	2100      	movs	r1, #0
		new_len = tmpstr - buf;
   119be:	1b1a      	subs	r2, r3, r4
		buf[new_len++] = '\0';
   119c0:	3201      	adds	r2, #1
   119c2:	7019      	strb	r1, [r3, #0]
		if (ret.state != AT_CMD_NOTIFICATION) {
   119c4:	f89d 3014 	ldrb.w	r3, [sp, #20]
   119c8:	2b04      	cmp	r3, #4
   119ca:	d04f      	beq.n	11a6c <socket_thread_fn+0x254>
			if ((response_buf_len > 0) &&
   119cc:	f8df a124 	ldr.w	sl, [pc, #292]	; 11af4 <socket_thread_fn+0x2dc>
   119d0:	f8da 3000 	ldr.w	r3, [sl]
   119d4:	2b00      	cmp	r3, #0
   119d6:	d052      	beq.n	11a7e <socket_thread_fn+0x266>
			    (response_buf != NULL)) {
   119d8:	4c3f      	ldr	r4, [pc, #252]	; (11ad8 <socket_thread_fn+0x2c0>)
   119da:	6820      	ldr	r0, [r4, #0]
			if ((response_buf_len > 0) &&
   119dc:	2800      	cmp	r0, #0
   119de:	d04e      	beq.n	11a7e <socket_thread_fn+0x266>
				if (response_buf_len > payload_len) {
   119e0:	4293      	cmp	r3, r2
   119e2:	d91d      	bls.n	11a20 <socket_thread_fn+0x208>
					memcpy(response_buf, item->data,
   119e4:	9903      	ldr	r1, [sp, #12]
   119e6:	310c      	adds	r1, #12
   119e8:	f00b fb5f 	bl	1d0aa <memcpy>
				response_buf_len = 0;
   119ec:	2300      	movs	r3, #0
   119ee:	f8ca 3000 	str.w	r3, [sl]
				response_buf     = NULL;
   119f2:	6023      	str	r3, [r4, #0]
				goto next;
   119f4:	e766      	b.n	118c4 <socket_thread_fn+0xac>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   119f6:	4939      	ldr	r1, [pc, #228]	; (11adc <socket_thread_fn+0x2c4>)
   119f8:	4620      	mov	r0, r4
   119fa:	f00b fac6 	bl	1cf8a <strstr>
		if (tmpstr) {
   119fe:	9001      	str	r0, [sp, #4]
   11a00:	b108      	cbz	r0, 11a06 <socket_thread_fn+0x1ee>
			ret->state = AT_CMD_ERROR_CME;
   11a02:	2203      	movs	r2, #3
   11a04:	e7d2      	b.n	119ac <socket_thread_fn+0x194>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   11a06:	4936      	ldr	r1, [pc, #216]	; (11ae0 <socket_thread_fn+0x2c8>)
   11a08:	4620      	mov	r0, r4
   11a0a:	f00b fabe 	bl	1cf8a <strstr>
		if (tmpstr) {
   11a0e:	4603      	mov	r3, r0
   11a10:	2800      	cmp	r0, #0
   11a12:	d039      	beq.n	11a88 <socket_thread_fn+0x270>
			ret->state = AT_CMD_ERROR;
   11a14:	2201      	movs	r2, #1
   11a16:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code  = -ENOEXEC;
   11a1a:	f06f 0207 	mvn.w	r2, #7
   11a1e:	e7bc      	b.n	1199a <socket_thread_fn+0x182>
					LOG_ERR("Response buffer not large "
   11a20:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   11a24:	f043 0301 	orr.w	r3, r3, #1
   11a28:	f363 0907 	bfi	r9, r3, #0, #8
   11a2c:	f36b 198f 	bfi	r9, fp, #6, #10
   11a30:	4649      	mov	r1, r9
   11a32:	482c      	ldr	r0, [pc, #176]	; (11ae4 <socket_thread_fn+0x2cc>)
   11a34:	f00a fdc3 	bl	1c5be <log_0>
					ret.code  = -EMSGSIZE;
   11a38:	f06f 0323 	mvn.w	r3, #35	; 0x23
   11a3c:	9304      	str	r3, [sp, #16]
   11a3e:	e7d5      	b.n	119ec <socket_thread_fn+0x1d4>
   11a40:	4b29      	ldr	r3, [pc, #164]	; (11ae8 <socket_thread_fn+0x2d0>)
   11a42:	2200      	movs	r2, #0
   11a44:	604b      	str	r3, [r1, #4]
   11a46:	460b      	mov	r3, r1
   11a48:	600a      	str	r2, [r1, #0]
   11a4a:	f843 2f08 	str.w	r2, [r3, #8]!
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11a4e:	e8d3 2fef 	ldaex	r2, [r3]
   11a52:	f042 0001 	orr.w	r0, r2, #1
   11a56:	e8c3 0fe4 	stlex	r4, r0, [r3]
   11a5a:	2c00      	cmp	r4, #0
   11a5c:	d1f7      	bne.n	11a4e <socket_thread_fn+0x236>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   11a5e:	07d3      	lsls	r3, r2, #31
   11a60:	f53f af3a 	bmi.w	118d8 <socket_thread_fn+0xc0>
		k_queue_append(&work_q->queue, work);
   11a64:	4821      	ldr	r0, [pc, #132]	; (11aec <socket_thread_fn+0x2d4>)
   11a66:	f00c fcee 	bl	1e446 <k_queue_append>
   11a6a:	e735      	b.n	118d8 <socket_thread_fn+0xc0>
		if (payload_len == 0) {
   11a6c:	2a00      	cmp	r2, #0
   11a6e:	f43f af29 	beq.w	118c4 <socket_thread_fn+0xac>
			item->callback = notification_handler;
   11a72:	4b1f      	ldr	r3, [pc, #124]	; (11af0 <socket_thread_fn+0x2d8>)
			item->callback = current_cmd_handler;
   11a74:	681a      	ldr	r2, [r3, #0]
   11a76:	9b03      	ldr	r3, [sp, #12]
   11a78:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
   11a7c:	e722      	b.n	118c4 <socket_thread_fn+0xac>
		if (payload_len == 0) {
   11a7e:	2a00      	cmp	r2, #0
   11a80:	f43f af20 	beq.w	118c4 <socket_thread_fn+0xac>
			item->callback = current_cmd_handler;
   11a84:	4b0d      	ldr	r3, [pc, #52]	; (11abc <socket_thread_fn+0x2a4>)
   11a86:	e7f5      	b.n	11a74 <socket_thread_fn+0x25c>
		new_len = strlen(buf) + 1;
   11a88:	4620      	mov	r0, r4
   11a8a:	f00b fad3 	bl	1d034 <strlen>
   11a8e:	1c42      	adds	r2, r0, #1
   11a90:	e798      	b.n	119c4 <socket_thread_fn+0x1ac>
   11a92:	bf00      	nop
   11a94:	0001edc4 	.word	0x0001edc4
   11a98:	0001edcc 	.word	0x0001edcc
   11a9c:	00020436 	.word	0x00020436
   11aa0:	000205c0 	.word	0x000205c0
   11aa4:	2002c538 	.word	0x2002c538
   11aa8:	2002031c 	.word	0x2002031c
   11aac:	200203d8 	.word	0x200203d8
   11ab0:	000205dd 	.word	0x000205dd
   11ab4:	000205ff 	.word	0x000205ff
   11ab8:	2002c588 	.word	0x2002c588
   11abc:	200203dc 	.word	0x200203dc
   11ac0:	2002c5c8 	.word	0x2002c5c8
   11ac4:	00020613 	.word	0x00020613
   11ac8:	0002064a 	.word	0x0002064a
   11acc:	00020694 	.word	0x00020694
   11ad0:	0001fb25 	.word	0x0001fb25
   11ad4:	000206a6 	.word	0x000206a6
   11ad8:	200203e4 	.word	0x200203e4
   11adc:	000206b2 	.word	0x000206b2
   11ae0:	0001f94a 	.word	0x0001f94a
   11ae4:	000206be 	.word	0x000206be
   11ae8:	00011731 	.word	0x00011731
   11aec:	20024d40 	.word	0x20024d40
   11af0:	200203e0 	.word	0x200203e0
   11af4:	200203e8 	.word	0x200203e8

00011af8 <at_write>:
{
   11af8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11afc:	4680      	mov	r8, r0
   11afe:	460e      	mov	r6, r1
	LOG_DBG("Sending command %s", log_strdup(cmd));
   11b00:	f04f 0500 	mov.w	r5, #0
	int bytes_to_send = strlen(cmd);
   11b04:	f00b fa96 	bl	1d034 <strlen>
	LOG_DBG("Sending command %s", log_strdup(cmd));
   11b08:	2304      	movs	r3, #4
   11b0a:	4c2f      	ldr	r4, [pc, #188]	; (11bc8 <at_write+0xd0>)
   11b0c:	f363 0507 	bfi	r5, r3, #0, #8
   11b10:	4b2e      	ldr	r3, [pc, #184]	; (11bcc <at_write+0xd4>)
	int bytes_to_send = strlen(cmd);
   11b12:	4607      	mov	r7, r0
	LOG_DBG("Sending command %s", log_strdup(cmd));
   11b14:	4640      	mov	r0, r8
   11b16:	1ae4      	subs	r4, r4, r3
   11b18:	f7fc ff3e 	bl	e998 <log_strdup>
   11b1c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   11b20:	f364 158f 	bfi	r5, r4, #6, #10
   11b24:	462b      	mov	r3, r5
   11b26:	4602      	mov	r2, r0
   11b28:	4929      	ldr	r1, [pc, #164]	; (11bd0 <at_write+0xd8>)
   11b2a:	482a      	ldr	r0, [pc, #168]	; (11bd4 <at_write+0xdc>)
   11b2c:	f00a fd68 	bl	1c600 <log_2>
	return socket_ops->send(sock, buf, len, flags);
   11b30:	4b29      	ldr	r3, [pc, #164]	; (11bd8 <at_write+0xe0>)
   11b32:	482a      	ldr	r0, [pc, #168]	; (11bdc <at_write+0xe4>)
   11b34:	681b      	ldr	r3, [r3, #0]
   11b36:	463a      	mov	r2, r7
   11b38:	6add      	ldr	r5, [r3, #44]	; 0x2c
   11b3a:	4641      	mov	r1, r8
   11b3c:	2300      	movs	r3, #0
   11b3e:	6800      	ldr	r0, [r0, #0]
   11b40:	47a8      	blx	r5
	if (bytes_sent == -1) {
   11b42:	1c43      	adds	r3, r0, #1
   11b44:	4605      	mov	r5, r0
   11b46:	d11d      	bne.n	11b84 <at_write+0x8c>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   11b48:	2301      	movs	r3, #1
   11b4a:	f04f 0500 	mov.w	r5, #0
   11b4e:	f363 0507 	bfi	r5, r3, #0, #8
   11b52:	f364 158f 	bfi	r5, r4, #6, #10
   11b56:	f008 ff43 	bl	1a9e0 <z_impl_z_errno>
   11b5a:	462a      	mov	r2, r5
   11b5c:	6801      	ldr	r1, [r0, #0]
   11b5e:	4820      	ldr	r0, [pc, #128]	; (11be0 <at_write+0xe8>)
   11b60:	f00a fd3a 	bl	1c5d8 <log_1>
   11b64:	f008 ff3c 	bl	1a9e0 <z_impl_z_errno>
		ret.code  = -errno;
   11b68:	6803      	ldr	r3, [r0, #0]
   11b6a:	425b      	negs	r3, r3
   11b6c:	9300      	str	r3, [sp, #0]
		ret.state = AT_CMD_ERROR;
   11b6e:	2301      	movs	r3, #1
   11b70:	f88d 3004 	strb.w	r3, [sp, #4]
	if (state) {
   11b74:	b116      	cbz	r6, 11b7c <at_write+0x84>
		*state = ret.state;
   11b76:	f89d 3004 	ldrb.w	r3, [sp, #4]
   11b7a:	7033      	strb	r3, [r6, #0]
}
   11b7c:	9800      	ldr	r0, [sp, #0]
   11b7e:	b002      	add	sp, #8
   11b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&q, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(q, data, timeout);
   11b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11b88:	4669      	mov	r1, sp
   11b8a:	4816      	ldr	r0, [pc, #88]	; (11be4 <at_write+0xec>)
   11b8c:	f009 f9d8 	bl	1af40 <z_impl_k_msgq_get>
		LOG_DBG("Bytes sent: %d", bytes_sent);
   11b90:	2204      	movs	r2, #4
   11b92:	f04f 0300 	mov.w	r3, #0
   11b96:	f362 0307 	bfi	r3, r2, #0, #8
   11b9a:	f364 138f 	bfi	r3, r4, #6, #10
   11b9e:	462a      	mov	r2, r5
   11ba0:	490b      	ldr	r1, [pc, #44]	; (11bd0 <at_write+0xd8>)
   11ba2:	4811      	ldr	r0, [pc, #68]	; (11be8 <at_write+0xf0>)
   11ba4:	f00a fd2c 	bl	1c600 <log_2>
		if (bytes_sent != bytes_to_send) {
   11ba8:	42af      	cmp	r7, r5
   11baa:	d0e3      	beq.n	11b74 <at_write+0x7c>
			LOG_ERR("Bytes sent (%d) was not the "
   11bac:	2201      	movs	r2, #1
   11bae:	f04f 0300 	mov.w	r3, #0
   11bb2:	f362 0307 	bfi	r3, r2, #0, #8
   11bb6:	f364 138f 	bfi	r3, r4, #6, #10
   11bba:	463a      	mov	r2, r7
   11bbc:	4629      	mov	r1, r5
   11bbe:	480b      	ldr	r0, [pc, #44]	; (11bec <at_write+0xf4>)
   11bc0:	f00a fd1e 	bl	1c600 <log_2>
   11bc4:	e7d6      	b.n	11b74 <at_write+0x7c>
   11bc6:	bf00      	nop
   11bc8:	0001edcc 	.word	0x0001edcc
   11bcc:	0001edc4 	.word	0x0001edc4
   11bd0:	00020447 	.word	0x00020447
   11bd4:	00020541 	.word	0x00020541
   11bd8:	2002031c 	.word	0x2002031c
   11bdc:	200203d8 	.word	0x200203d8
   11be0:	00020558 	.word	0x00020558
   11be4:	2002c5c8 	.word	0x2002c5c8
   11be8:	0002057b 	.word	0x0002057b
   11bec:	0002058e 	.word	0x0002058e

00011bf0 <at_cmd_write>:
{
   11bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11bf4:	4605      	mov	r5, r0
   11bf6:	4688      	mov	r8, r1
   11bf8:	4617      	mov	r7, r2
   11bfa:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
   11bfc:	4c0a      	ldr	r4, [pc, #40]	; (11c28 <at_cmd_write+0x38>)
   11bfe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11c02:	4620      	mov	r0, r4
   11c04:	f009 fdc4 	bl	1b790 <z_impl_k_sem_take>
	response_buf     = buf;
   11c08:	4b08      	ldr	r3, [pc, #32]	; (11c2c <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   11c0a:	4631      	mov	r1, r6
	response_buf     = buf;
   11c0c:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   11c10:	4b07      	ldr	r3, [pc, #28]	; (11c30 <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   11c12:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   11c14:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
   11c16:	f7ff ff6f 	bl	11af8 <at_write>
   11c1a:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   11c1c:	4620      	mov	r0, r4
   11c1e:	f009 fd8b 	bl	1b738 <z_impl_k_sem_give>
}
   11c22:	4628      	mov	r0, r5
   11c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11c28:	2002c588 	.word	0x2002c588
   11c2c:	200203e4 	.word	0x200203e4
   11c30:	200203e8 	.word	0x200203e8

00011c34 <at_cmd_set_notification_handler>:
	LOG_DBG("Setting notification handler to %p", handler);
   11c34:	2204      	movs	r2, #4
   11c36:	f04f 0300 	mov.w	r3, #0
{
   11c3a:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("Setting notification handler to %p", handler);
   11c3c:	f362 0307 	bfi	r3, r2, #0, #8
   11c40:	4c13      	ldr	r4, [pc, #76]	; (11c90 <at_cmd_set_notification_handler+0x5c>)
   11c42:	4a14      	ldr	r2, [pc, #80]	; (11c94 <at_cmd_set_notification_handler+0x60>)
	if (notification_handler != NULL && handler != notification_handler) {
   11c44:	4d14      	ldr	r5, [pc, #80]	; (11c98 <at_cmd_set_notification_handler+0x64>)
	LOG_DBG("Setting notification handler to %p", handler);
   11c46:	1aa4      	subs	r4, r4, r2
   11c48:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   11c4c:	4602      	mov	r2, r0
   11c4e:	4913      	ldr	r1, [pc, #76]	; (11c9c <at_cmd_set_notification_handler+0x68>)
{
   11c50:	4606      	mov	r6, r0
	LOG_DBG("Setting notification handler to %p", handler);
   11c52:	f364 138f 	bfi	r3, r4, #6, #10
   11c56:	4812      	ldr	r0, [pc, #72]	; (11ca0 <at_cmd_set_notification_handler+0x6c>)
   11c58:	f00a fcd2 	bl	1c600 <log_2>
	if (notification_handler != NULL && handler != notification_handler) {
   11c5c:	6829      	ldr	r1, [r5, #0]
   11c5e:	b159      	cbz	r1, 11c78 <at_cmd_set_notification_handler+0x44>
   11c60:	428e      	cmp	r6, r1
   11c62:	d009      	beq.n	11c78 <at_cmd_set_notification_handler+0x44>
		LOG_WRN("Forgetting prior notification handler %p",
   11c64:	f04f 0200 	mov.w	r2, #0
   11c68:	2302      	movs	r3, #2
   11c6a:	f363 0207 	bfi	r2, r3, #0, #8
   11c6e:	f364 128f 	bfi	r2, r4, #6, #10
   11c72:	480c      	ldr	r0, [pc, #48]	; (11ca4 <at_cmd_set_notification_handler+0x70>)
   11c74:	f00a fcb0 	bl	1c5d8 <log_1>
	return z_impl_k_sem_take(sem, timeout);
   11c78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11c7c:	480a      	ldr	r0, [pc, #40]	; (11ca8 <at_cmd_set_notification_handler+0x74>)
   11c7e:	f009 fd87 	bl	1b790 <z_impl_k_sem_take>
	notification_handler = handler;
   11c82:	602e      	str	r6, [r5, #0]
	z_impl_k_sem_give(sem);
   11c84:	4808      	ldr	r0, [pc, #32]	; (11ca8 <at_cmd_set_notification_handler+0x74>)
}
   11c86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11c8a:	f009 bd55 	b.w	1b738 <z_impl_k_sem_give>
   11c8e:	bf00      	nop
   11c90:	0001edcc 	.word	0x0001edcc
   11c94:	0001edc4 	.word	0x0001edc4
   11c98:	200203e0 	.word	0x200203e0
   11c9c:	00020450 	.word	0x00020450
   11ca0:	000204f1 	.word	0x000204f1
   11ca4:	00020518 	.word	0x00020518
   11ca8:	2002c588 	.word	0x2002c588

00011cac <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   11cac:	4b0b      	ldr	r3, [pc, #44]	; (11cdc <find_node+0x30>)
{
   11cae:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   11cb0:	681b      	ldr	r3, [r3, #0]
   11cb2:	b153      	cbz	r3, 11cca <find_node+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11cb4:	2500      	movs	r5, #0
   11cb6:	461c      	mov	r4, r3
   11cb8:	681b      	ldr	r3, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   11cba:	6866      	ldr	r6, [r4, #4]
   11cbc:	428e      	cmp	r6, r1
   11cbe:	d106      	bne.n	11cce <find_node+0x22>
   11cc0:	68a6      	ldr	r6, [r4, #8]
   11cc2:	4296      	cmp	r6, r2
   11cc4:	d103      	bne.n	11cce <find_node+0x22>
			*prev_out = prev;
			return curr;
   11cc6:	4623      	mov	r3, r4
			*prev_out = prev;
   11cc8:	6005      	str	r5, [r0, #0]
		}
		prev = curr;
	}
	return NULL;
}
   11cca:	4618      	mov	r0, r3
   11ccc:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   11cce:	2b00      	cmp	r3, #0
   11cd0:	d0fb      	beq.n	11cca <find_node+0x1e>
   11cd2:	4625      	mov	r5, r4
   11cd4:	461c      	mov	r4, r3
   11cd6:	681b      	ldr	r3, [r3, #0]
   11cd8:	e7ef      	b.n	11cba <find_node+0xe>
   11cda:	bf00      	nop
   11cdc:	2002049c 	.word	0x2002049c

00011ce0 <module_init>:

	k_mutex_unlock(&list_mtx);
}

static int module_init(struct device *dev)
{
   11ce0:	b510      	push	{r4, lr}
	list->head = NULL;
   11ce2:	2400      	movs	r4, #0
   11ce4:	4b03      	ldr	r3, [pc, #12]	; (11cf4 <module_init+0x14>)
	ARG_UNUSED(dev);

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
   11ce6:	4804      	ldr	r0, [pc, #16]	; (11cf8 <module_init+0x18>)
	list->tail = NULL;
   11ce8:	e9c3 4400 	strd	r4, r4, [r3]
   11cec:	f7ff ffa2 	bl	11c34 <at_cmd_set_notification_handler>
	return 0;
}
   11cf0:	4620      	mov	r0, r4
   11cf2:	bd10      	pop	{r4, pc}
   11cf4:	2002049c 	.word	0x2002049c
   11cf8:	00011cfd 	.word	0x00011cfd

00011cfc <notif_dispatch>:
{
   11cfc:	b538      	push	{r3, r4, r5, lr}
   11cfe:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   11d00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11d04:	480a      	ldr	r0, [pc, #40]	; (11d30 <notif_dispatch+0x34>)
   11d06:	f009 f979 	bl	1affc <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   11d0a:	4b0a      	ldr	r3, [pc, #40]	; (11d34 <notif_dispatch+0x38>)
   11d0c:	681b      	ldr	r3, [r3, #0]
   11d0e:	b923      	cbnz	r3, 11d1a <notif_dispatch+0x1e>
}
   11d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_mutex_unlock(mutex);
   11d14:	4806      	ldr	r0, [pc, #24]	; (11d30 <notif_dispatch+0x34>)
   11d16:	f009 b9e3 	b.w	1b0e0 <z_impl_k_mutex_unlock>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11d1a:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   11d1c:	689a      	ldr	r2, [r3, #8]
   11d1e:	4629      	mov	r1, r5
   11d20:	6858      	ldr	r0, [r3, #4]
   11d22:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   11d24:	2c00      	cmp	r4, #0
   11d26:	d0f3      	beq.n	11d10 <notif_dispatch+0x14>
   11d28:	4623      	mov	r3, r4
   11d2a:	6824      	ldr	r4, [r4, #0]
   11d2c:	e7f6      	b.n	11d1c <notif_dispatch+0x20>
   11d2e:	bf00      	nop
   11d30:	2002c5b4 	.word	0x2002c5b4
   11d34:	2002049c 	.word	0x2002049c

00011d38 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   11d38:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11d3a:	4606      	mov	r6, r0
	if (handler == NULL) {
   11d3c:	460c      	mov	r4, r1
   11d3e:	b999      	cbnz	r1, 11d68 <at_notif_register_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   11d40:	2201      	movs	r2, #1
   11d42:	f04f 0300 	mov.w	r3, #0
   11d46:	491f      	ldr	r1, [pc, #124]	; (11dc4 <at_notif_register_handler+0x8c>)
   11d48:	f362 0307 	bfi	r3, r2, #0, #8
   11d4c:	4a1e      	ldr	r2, [pc, #120]	; (11dc8 <at_notif_register_handler+0x90>)
   11d4e:	1a52      	subs	r2, r2, r1
   11d50:	08d2      	lsrs	r2, r2, #3
   11d52:	f362 138f 	bfi	r3, r2, #6, #10
   11d56:	4601      	mov	r1, r0
   11d58:	4622      	mov	r2, r4
   11d5a:	481c      	ldr	r0, [pc, #112]	; (11dcc <at_notif_register_handler+0x94>)
   11d5c:	f00a fc50 	bl	1c600 <log_2>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   11d60:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   11d64:	b002      	add	sp, #8
   11d66:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   11d68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11d6c:	4818      	ldr	r0, [pc, #96]	; (11dd0 <at_notif_register_handler+0x98>)
   11d6e:	f009 f945 	bl	1affc <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   11d72:	4622      	mov	r2, r4
   11d74:	4631      	mov	r1, r6
   11d76:	a801      	add	r0, sp, #4
   11d78:	f7ff ff98 	bl	11cac <find_node>
   11d7c:	4605      	mov	r5, r0
   11d7e:	b120      	cbz	r0, 11d8a <at_notif_register_handler+0x52>
	z_impl_k_mutex_unlock(mutex);
   11d80:	4813      	ldr	r0, [pc, #76]	; (11dd0 <at_notif_register_handler+0x98>)
   11d82:	f009 f9ad 	bl	1b0e0 <z_impl_k_mutex_unlock>
	return 0;
   11d86:	2000      	movs	r0, #0
	return append_notif_handler(context, handler);
   11d88:	e7ec      	b.n	11d64 <at_notif_register_handler+0x2c>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   11d8a:	200c      	movs	r0, #12
   11d8c:	f009 f876 	bl	1ae7c <k_malloc>
   11d90:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   11d92:	b928      	cbnz	r0, 11da0 <at_notif_register_handler+0x68>
   11d94:	480e      	ldr	r0, [pc, #56]	; (11dd0 <at_notif_register_handler+0x98>)
   11d96:	f009 f9a3 	bl	1b0e0 <z_impl_k_mutex_unlock>
		return -ENOBUFS;
   11d9a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   11d9e:	e7e1      	b.n	11d64 <at_notif_register_handler+0x2c>
	memset(to_ins, 0, sizeof(struct notif_handler));
   11da0:	220c      	movs	r2, #12
   11da2:	4629      	mov	r1, r5
   11da4:	f00b f9ab 	bl	1d0fe <memset>
	to_ins->ctx     = ctx;
   11da8:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   11daa:	4a0a      	ldr	r2, [pc, #40]	; (11dd4 <at_notif_register_handler+0x9c>)
	parent->next = child;
   11dac:	601d      	str	r5, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   11dae:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   11db0:	e9c3 6401 	strd	r6, r4, [r3, #4]
   11db4:	b911      	cbnz	r1, 11dbc <at_notif_register_handler+0x84>
	list->head = node;
   11db6:	e9c2 3300 	strd	r3, r3, [r2]
   11dba:	e7e1      	b.n	11d80 <at_notif_register_handler+0x48>
	parent->next = child;
   11dbc:	600b      	str	r3, [r1, #0]
	list->tail = node;
   11dbe:	6053      	str	r3, [r2, #4]
   11dc0:	e7de      	b.n	11d80 <at_notif_register_handler+0x48>
   11dc2:	bf00      	nop
   11dc4:	0001edc4 	.word	0x0001edc4
   11dc8:	0001eddc 	.word	0x0001eddc
   11dcc:	0002070c 	.word	0x0002070c
   11dd0:	2002c5b4 	.word	0x2002c5b4
   11dd4:	2002049c 	.word	0x2002049c

00011dd8 <at_notif_deregister_handler>:

int at_notif_deregister_handler(void *context, at_notif_handler_t handler)
{
   11dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11dda:	4605      	mov	r5, r0
	if (handler == NULL) {
   11ddc:	460c      	mov	r4, r1
   11dde:	b999      	cbnz	r1, 11e08 <at_notif_deregister_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   11de0:	2201      	movs	r2, #1
   11de2:	f04f 0300 	mov.w	r3, #0
   11de6:	4922      	ldr	r1, [pc, #136]	; (11e70 <at_notif_deregister_handler+0x98>)
   11de8:	f362 0307 	bfi	r3, r2, #0, #8
   11dec:	4a21      	ldr	r2, [pc, #132]	; (11e74 <at_notif_deregister_handler+0x9c>)
   11dee:	1a89      	subs	r1, r1, r2
   11df0:	08c9      	lsrs	r1, r1, #3
   11df2:	f361 138f 	bfi	r3, r1, #6, #10
   11df6:	4622      	mov	r2, r4
   11df8:	4601      	mov	r1, r0
   11dfa:	481f      	ldr	r0, [pc, #124]	; (11e78 <at_notif_deregister_handler+0xa0>)
   11dfc:	f00a fc00 	bl	1c600 <log_2>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   11e00:	f06f 0015 	mvn.w	r0, #21
	}
	return remove_notif_handler(context, handler);
}
   11e04:	b003      	add	sp, #12
   11e06:	bd30      	pop	{r4, r5, pc}
	struct notif_handler *curr, *prev = NULL;
   11e08:	2300      	movs	r3, #0
   11e0a:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   11e0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11e10:	481a      	ldr	r0, [pc, #104]	; (11e7c <at_notif_deregister_handler+0xa4>)
   11e12:	f009 f8f3 	bl	1affc <z_impl_k_mutex_lock>
	curr = find_node(&prev, ctx, handler);
   11e16:	4622      	mov	r2, r4
   11e18:	4629      	mov	r1, r5
   11e1a:	a801      	add	r0, sp, #4
   11e1c:	f7ff ff46 	bl	11cac <find_node>
	if (curr == NULL) {
   11e20:	b990      	cbnz	r0, 11e48 <at_notif_deregister_handler+0x70>
		LOG_WRN("Handler not registered. Nothing to do");
   11e22:	2302      	movs	r3, #2
   11e24:	f04f 0100 	mov.w	r1, #0
   11e28:	4a12      	ldr	r2, [pc, #72]	; (11e74 <at_notif_deregister_handler+0x9c>)
   11e2a:	f363 0107 	bfi	r1, r3, #0, #8
   11e2e:	4b10      	ldr	r3, [pc, #64]	; (11e70 <at_notif_deregister_handler+0x98>)
   11e30:	4813      	ldr	r0, [pc, #76]	; (11e80 <at_notif_deregister_handler+0xa8>)
   11e32:	1a9b      	subs	r3, r3, r2
   11e34:	08db      	lsrs	r3, r3, #3
   11e36:	f363 118f 	bfi	r1, r3, #6, #10
   11e3a:	f00a fbc0 	bl	1c5be <log_0>
	z_impl_k_mutex_unlock(mutex);
   11e3e:	480f      	ldr	r0, [pc, #60]	; (11e7c <at_notif_deregister_handler+0xa4>)
   11e40:	f009 f94e 	bl	1b0e0 <z_impl_k_mutex_unlock>
	return remove_notif_handler(context, handler);
   11e44:	2000      	movs	r0, #0
   11e46:	e7dd      	b.n	11e04 <at_notif_deregister_handler+0x2c>
	sys_slist_remove(&handler_list, &prev->node, &curr->node);
   11e48:	9a01      	ldr	r2, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   11e4a:	6801      	ldr	r1, [r0, #0]
   11e4c:	4b0d      	ldr	r3, [pc, #52]	; (11e84 <at_notif_deregister_handler+0xac>)
   11e4e:	b94a      	cbnz	r2, 11e64 <at_notif_deregister_handler+0x8c>
   11e50:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   11e52:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   11e54:	4290      	cmp	r0, r2
   11e56:	d100      	bne.n	11e5a <at_notif_deregister_handler+0x82>
	list->tail = node;
   11e58:	6059      	str	r1, [r3, #4]
	parent->next = child;
   11e5a:	2300      	movs	r3, #0
   11e5c:	6003      	str	r3, [r0, #0]
	k_free(curr);
   11e5e:	f00c fa76 	bl	1e34e <k_free>
   11e62:	e7ec      	b.n	11e3e <at_notif_deregister_handler+0x66>
   11e64:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   11e66:	6859      	ldr	r1, [r3, #4]
   11e68:	4288      	cmp	r0, r1
	list->tail = node;
   11e6a:	bf08      	it	eq
   11e6c:	605a      	streq	r2, [r3, #4]
   11e6e:	e7f4      	b.n	11e5a <at_notif_deregister_handler+0x82>
   11e70:	0001eddc 	.word	0x0001eddc
   11e74:	0001edc4 	.word	0x0001edc4
   11e78:	0002070c 	.word	0x0002070c
   11e7c:	2002c5b4 	.word	0x2002c5b4
   11e80:	000206e6 	.word	0x000206e6
   11e84:	2002049c 	.word	0x2002049c

00011e88 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   11e88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   11e8c:	6805      	ldr	r5, [r0, #0]
{
   11e8e:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   11e90:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   11e92:	782b      	ldrb	r3, [r5, #0]
{
   11e94:	4680      	mov	r8, r0
   11e96:	460f      	mov	r7, r1
   11e98:	4616      	mov	r6, r2
   11e9a:	2b00      	cmp	r3, #0
   11e9c:	f000 80c1 	beq.w	12022 <at_parse_process_element+0x19a>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   11ea0:	4b61      	ldr	r3, [pc, #388]	; (12028 <at_parse_process_element+0x1a0>)
   11ea2:	781c      	ldrb	r4, [r3, #0]
   11ea4:	2c05      	cmp	r4, #5
   11ea6:	d110      	bne.n	11eca <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   11ea8:	1c6b      	adds	r3, r5, #1
   11eaa:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   11eac:	9a00      	ldr	r2, [sp, #0]
   11eae:	7810      	ldrb	r0, [r2, #0]
   11eb0:	f00c f8ab 	bl	1e00a <is_valid_notification_char>
   11eb4:	b930      	cbnz	r0, 11ec4 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   11eb6:	1b53      	subs	r3, r2, r5

		while (isxdigit(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   11eb8:	462a      	mov	r2, r5
   11eba:	4639      	mov	r1, r7
   11ebc:	4630      	mov	r0, r6
   11ebe:	f00c f98d 	bl	1e1dc <at_params_string_put>
   11ec2:	e01b      	b.n	11efc <at_parse_process_element+0x74>
			tmpstr++;
   11ec4:	3201      	adds	r2, #1
   11ec6:	9200      	str	r2, [sp, #0]
   11ec8:	e7f0      	b.n	11eac <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   11eca:	2c06      	cmp	r4, #6
   11ecc:	d124      	bne.n	11f18 <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   11ece:	4668      	mov	r0, sp
   11ed0:	f00c f88d 	bl	1dfee <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   11ed4:	9a00      	ldr	r2, [sp, #0]
   11ed6:	7810      	ldrb	r0, [r2, #0]
   11ed8:	f00c f897 	bl	1e00a <is_valid_notification_char>
   11edc:	b9a8      	cbnz	r0, 11f0a <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   11ede:	1b53      	subs	r3, r2, r5
   11ee0:	4639      	mov	r1, r7
   11ee2:	462a      	mov	r2, r5
   11ee4:	4630      	mov	r0, r6
   11ee6:	f00c f979 	bl	1e1dc <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   11eea:	9b00      	ldr	r3, [sp, #0]
   11eec:	781a      	ldrb	r2, [r3, #0]
   11eee:	2a3d      	cmp	r2, #61	; 0x3d
   11ef0:	d10e      	bne.n	11f10 <at_parse_process_element+0x88>
   11ef2:	785a      	ldrb	r2, [r3, #1]
   11ef4:	2a3f      	cmp	r2, #63	; 0x3f
   11ef6:	d101      	bne.n	11efc <at_parse_process_element+0x74>
			tmpstr += 2;
   11ef8:	3302      	adds	r3, #2
			tmpstr++;
   11efa:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   11efc:	2000      	movs	r0, #0
	*str = tmpstr;
   11efe:	9b00      	ldr	r3, [sp, #0]
   11f00:	f8c8 3000 	str.w	r3, [r8]
}
   11f04:	b023      	add	sp, #140	; 0x8c
   11f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   11f0a:	3201      	adds	r2, #1
   11f0c:	9200      	str	r2, [sp, #0]
   11f0e:	e7e1      	b.n	11ed4 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   11f10:	2a3f      	cmp	r2, #63	; 0x3f
   11f12:	d1f3      	bne.n	11efc <at_parse_process_element+0x74>
			tmpstr++;
   11f14:	3301      	adds	r3, #1
   11f16:	e7f0      	b.n	11efa <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   11f18:	2c07      	cmp	r4, #7
   11f1a:	d103      	bne.n	11f24 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   11f1c:	4610      	mov	r0, r2
   11f1e:	f00c f938 	bl	1e192 <at_params_empty_put>
   11f22:	e7eb      	b.n	11efc <at_parse_process_element+0x74>
	} else if (state == STRING) {
   11f24:	2c02      	cmp	r4, #2
   11f26:	d112      	bne.n	11f4e <at_parse_process_element+0xc6>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   11f28:	9a00      	ldr	r2, [sp, #0]
   11f2a:	7810      	ldrb	r0, [r2, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   11f2c:	2822      	cmp	r0, #34	; 0x22
   11f2e:	d003      	beq.n	11f38 <at_parse_process_element+0xb0>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   11f30:	b110      	cbz	r0, 11f38 <at_parse_process_element+0xb0>
		       !is_lfcr(*tmpstr)) {
   11f32:	f00c f853 	bl	1dfdc <is_lfcr>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   11f36:	b138      	cbz	r0, 11f48 <at_parse_process_element+0xc0>
		at_params_string_put(list, index, start_ptr,
   11f38:	1b53      	subs	r3, r2, r5
   11f3a:	4639      	mov	r1, r7
   11f3c:	462a      	mov	r2, r5
   11f3e:	4630      	mov	r0, r6
   11f40:	f00c f94c 	bl	1e1dc <at_params_string_put>
		tmpstr++;
   11f44:	9b00      	ldr	r3, [sp, #0]
   11f46:	e7e5      	b.n	11f14 <at_parse_process_element+0x8c>
			tmpstr++;
   11f48:	3201      	adds	r2, #1
   11f4a:	9200      	str	r2, [sp, #0]
   11f4c:	e7ec      	b.n	11f28 <at_parse_process_element+0xa0>
	} else if (state == ARRAY) {
   11f4e:	2c01      	cmp	r4, #1
   11f50:	d13c      	bne.n	11fcc <at_parse_process_element+0x144>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   11f52:	4628      	mov	r0, r5
   11f54:	220a      	movs	r2, #10
   11f56:	a901      	add	r1, sp, #4
   11f58:	f00a ff9e 	bl	1ce98 <strtoul>
		tmpstr = next;
   11f5c:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   11f5e:	4d33      	ldr	r5, [pc, #204]	; (1202c <at_parse_process_element+0x1a4>)
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   11f60:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   11f62:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   11f64:	9800      	ldr	r0, [sp, #0]
   11f66:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   11f68:	2b29      	cmp	r3, #41	; 0x29
   11f6a:	d028      	beq.n	11fbe <at_parse_process_element+0x136>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   11f6c:	b33b      	cbz	r3, 11fbe <at_parse_process_element+0x136>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   11f6e:	3b2c      	subs	r3, #44	; 0x2c
   11f70:	b2db      	uxtb	r3, r3
   11f72:	3001      	adds	r0, #1
   11f74:	2b11      	cmp	r3, #17
				tmparray[i++] =
   11f76:	9000      	str	r0, [sp, #0]
   11f78:	d803      	bhi.n	11f82 <at_parse_process_element+0xfa>
   11f7a:	fa25 f303 	lsr.w	r3, r5, r3
   11f7e:	07db      	lsls	r3, r3, #31
   11f80:	d408      	bmi.n	11f94 <at_parse_process_element+0x10c>
				tmpstr++;
   11f82:	46a1      	mov	r9, r4
   11f84:	e004      	b.n	11f90 <at_parse_process_element+0x108>
					tmpstr = next;
   11f86:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   11f88:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   11f8c:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   11f8e:	d015      	beq.n	11fbc <at_parse_process_element+0x134>
				tmpstr++;
   11f90:	464c      	mov	r4, r9
   11f92:	e7e7      	b.n	11f64 <at_parse_process_element+0xdc>
					(u32_t)strtoul(++tmpstr, &next, 10);
   11f94:	220a      	movs	r2, #10
   11f96:	a901      	add	r1, sp, #4
   11f98:	f00a ff7e 	bl	1ce98 <strtoul>
				tmparray[i++] =
   11f9c:	ab22      	add	r3, sp, #136	; 0x88
   11f9e:	f104 0901 	add.w	r9, r4, #1
   11fa2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   11fa6:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   11faa:	9800      	ldr	r0, [sp, #0]
   11fac:	f00b f842 	bl	1d034 <strlen>
   11fb0:	4604      	mov	r4, r0
   11fb2:	9801      	ldr	r0, [sp, #4]
   11fb4:	f00b f83e 	bl	1d034 <strlen>
   11fb8:	4284      	cmp	r4, r0
   11fba:	d1e4      	bne.n	11f86 <at_parse_process_element+0xfe>
   11fbc:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(u32_t));
   11fbe:	00a3      	lsls	r3, r4, #2
   11fc0:	aa02      	add	r2, sp, #8
   11fc2:	4639      	mov	r1, r7
   11fc4:	4630      	mov	r0, r6
   11fc6:	f00c f92c 	bl	1e222 <at_params_array_put>
   11fca:	e7bb      	b.n	11f44 <at_parse_process_element+0xbc>
	} else if (state == NUMBER) {
   11fcc:	2c03      	cmp	r4, #3
   11fce:	d115      	bne.n	11ffc <at_parse_process_element+0x174>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   11fd0:	220a      	movs	r2, #10
   11fd2:	a902      	add	r1, sp, #8
   11fd4:	4628      	mov	r0, r5
   11fd6:	f00a ff5f 	bl	1ce98 <strtoul>
		tmpstr = next;
   11fda:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   11fdc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   11fe0:	4602      	mov	r2, r0
		tmpstr = next;
   11fe2:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   11fe4:	d205      	bcs.n	11ff2 <at_parse_process_element+0x16a>
			at_params_short_put(list, index, (u16_t)value);
   11fe6:	b282      	uxth	r2, r0
   11fe8:	4639      	mov	r1, r7
   11fea:	4630      	mov	r0, r6
   11fec:	f00c f8be 	bl	1e16c <at_params_short_put>
   11ff0:	e784      	b.n	11efc <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   11ff2:	4639      	mov	r1, r7
   11ff4:	4630      	mov	r0, r6
   11ff6:	f00c f8de 	bl	1e1b6 <at_params_int_put>
   11ffa:	e77f      	b.n	11efc <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   11ffc:	2c04      	cmp	r4, #4
   11ffe:	f47f af7d 	bne.w	11efc <at_parse_process_element+0x74>
		while (isxdigit(*tmpstr)) {
   12002:	9b00      	ldr	r3, [sp, #0]
   12004:	781a      	ldrb	r2, [r3, #0]
	return (int)(((ua - (unsigned)'0') < 10U) ||
   12006:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1200a:	2909      	cmp	r1, #9
   1200c:	d906      	bls.n	1201c <at_parse_process_element+0x194>
			((ua | 32U) - (unsigned)'a' < 6U));
   1200e:	f042 0220 	orr.w	r2, r2, #32
   12012:	3a61      	subs	r2, #97	; 0x61
	return (int)(((ua - (unsigned)'0') < 10U) ||
   12014:	2a05      	cmp	r2, #5
   12016:	d901      	bls.n	1201c <at_parse_process_element+0x194>
		at_params_string_put(list, index, start_ptr,
   12018:	1b5b      	subs	r3, r3, r5
   1201a:	e74d      	b.n	11eb8 <at_parse_process_element+0x30>
			tmpstr++;
   1201c:	3301      	adds	r3, #1
   1201e:	9300      	str	r3, [sp, #0]
   12020:	e7ef      	b.n	12002 <at_parse_process_element+0x17a>
		return -1;
   12022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12026:	e76d      	b.n	11f04 <at_parse_process_element+0x7c>
   12028:	20026475 	.word	0x20026475
   1202c:	00024001 	.word	0x00024001

00012030 <at_parse_detect_type>:
{
   12030:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   12032:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   12034:	2900      	cmp	r1, #0
{
   12036:	4605      	mov	r5, r0
   12038:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   1203a:	d144      	bne.n	120c6 <at_parse_detect_type+0x96>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1203c:	2a2b      	cmp	r2, #43	; 0x2b
   1203e:	4e2a      	ldr	r6, [pc, #168]	; (120e8 <at_parse_detect_type+0xb8>)
   12040:	d001      	beq.n	12046 <at_parse_detect_type+0x16>
   12042:	2a25      	cmp	r2, #37	; 0x25
   12044:	d104      	bne.n	12050 <at_parse_detect_type+0x20>
	state = new_state;
   12046:	2305      	movs	r3, #5
   12048:	7033      	strb	r3, [r6, #0]
	return 0;
   1204a:	2000      	movs	r0, #0
	*str = tmpstr;
   1204c:	602c      	str	r4, [r5, #0]
}
   1204e:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   12050:	4620      	mov	r0, r4
   12052:	f00b ffe6 	bl	1e022 <is_command>
   12056:	b3a0      	cbz	r0, 120c2 <at_parse_detect_type+0x92>
	state = new_state;
   12058:	2306      	movs	r3, #6
   1205a:	e7f5      	b.n	12048 <at_parse_detect_type+0x18>
 * @retval true  If character is number character
 * @retval false If character is something else
 */
static inline bool is_number(char chr)
{
	if (isdigit(chr) || (chr == '-') || (chr == '+')) {
   1205c:	f647 71e5 	movw	r1, #32741	; 0x7fe5
   12060:	fa21 f303 	lsr.w	r3, r1, r3
   12064:	07d9      	lsls	r1, r3, #31
   12066:	d50a      	bpl.n	1207e <at_parse_detect_type+0x4e>
   12068:	2203      	movs	r2, #3
   1206a:	4b1f      	ldr	r3, [pc, #124]	; (120e8 <at_parse_detect_type+0xb8>)
   1206c:	701a      	strb	r2, [r3, #0]
   1206e:	e7ec      	b.n	1204a <at_parse_detect_type+0x1a>
	if (chr == '(') {
   12070:	2a28      	cmp	r2, #40	; 0x28
   12072:	d104      	bne.n	1207e <at_parse_detect_type+0x4e>
   12074:	2201      	movs	r2, #1
   12076:	4b1c      	ldr	r3, [pc, #112]	; (120e8 <at_parse_detect_type+0xb8>)
		tmpstr++;
   12078:	4414      	add	r4, r2
	state = new_state;
   1207a:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1207c:	e7e5      	b.n	1204a <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   1207e:	4610      	mov	r0, r2
   12080:	f00b ffac 	bl	1dfdc <is_lfcr>
   12084:	b170      	cbz	r0, 120a4 <at_parse_detect_type+0x74>
   12086:	4918      	ldr	r1, [pc, #96]	; (120e8 <at_parse_detect_type+0xb8>)
   12088:	7808      	ldrb	r0, [r1, #0]
   1208a:	2803      	cmp	r0, #3
   1208c:	d108      	bne.n	120a0 <at_parse_detect_type+0x70>
		while (is_lfcr(*tmpstr)) {
   1208e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   12092:	f00b ffa3 	bl	1dfdc <is_lfcr>
   12096:	2800      	cmp	r0, #0
   12098:	d1f9      	bne.n	1208e <at_parse_detect_type+0x5e>
	state = new_state;
   1209a:	2304      	movs	r3, #4
   1209c:	700b      	strb	r3, [r1, #0]
   1209e:	e7d4      	b.n	1204a <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   120a0:	2807      	cmp	r0, #7
   120a2:	d0d2      	beq.n	1204a <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   120a4:	3a2c      	subs	r2, #44	; 0x2c
   120a6:	b2d2      	uxtb	r2, r2
   120a8:	2a11      	cmp	r2, #17
   120aa:	d807      	bhi.n	120bc <at_parse_detect_type+0x8c>
   120ac:	4b0f      	ldr	r3, [pc, #60]	; (120ec <at_parse_detect_type+0xbc>)
   120ae:	fa23 f202 	lsr.w	r2, r3, r2
   120b2:	07d3      	lsls	r3, r2, #31
   120b4:	d502      	bpl.n	120bc <at_parse_detect_type+0x8c>
	state = new_state;
   120b6:	4b0c      	ldr	r3, [pc, #48]	; (120e8 <at_parse_detect_type+0xb8>)
   120b8:	2207      	movs	r2, #7
   120ba:	e7d7      	b.n	1206c <at_parse_detect_type+0x3c>
		return -1;
   120bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   120c0:	e7c5      	b.n	1204e <at_parse_detect_type+0x1e>
	state = new_state;
   120c2:	2302      	movs	r3, #2
   120c4:	e7c0      	b.n	12048 <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   120c6:	dd03      	ble.n	120d0 <at_parse_detect_type+0xa0>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   120c8:	2a2b      	cmp	r2, #43	; 0x2b
   120ca:	d0f7      	beq.n	120bc <at_parse_detect_type+0x8c>
   120cc:	2a25      	cmp	r2, #37	; 0x25
   120ce:	d0f5      	beq.n	120bc <at_parse_detect_type+0x8c>
	if (isdigit(chr) || (chr == '-') || (chr == '+')) {
   120d0:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
   120d4:	b2db      	uxtb	r3, r3
   120d6:	2b0e      	cmp	r3, #14
   120d8:	d9c0      	bls.n	1205c <at_parse_detect_type+0x2c>
	if (chr == '"') {
   120da:	2a22      	cmp	r2, #34	; 0x22
   120dc:	d1c8      	bne.n	12070 <at_parse_detect_type+0x40>
	state = new_state;
   120de:	2202      	movs	r2, #2
   120e0:	4b01      	ldr	r3, [pc, #4]	; (120e8 <at_parse_detect_type+0xb8>)
		tmpstr++;
   120e2:	3401      	adds	r4, #1
	state = new_state;
   120e4:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   120e6:	e7b0      	b.n	1204a <at_parse_detect_type+0x1a>
   120e8:	20026475 	.word	0x20026475
   120ec:	00024001 	.word	0x00024001

000120f0 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   120f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   120f4:	4688      	mov	r8, r1
   120f6:	4616      	mov	r6, r2
   120f8:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   120fa:	4604      	mov	r4, r0
   120fc:	2800      	cmp	r0, #0
   120fe:	d07c      	beq.n	121fa <at_parser_max_params_from_str+0x10a>
   12100:	2a00      	cmp	r2, #0
   12102:	d07a      	beq.n	121fa <at_parser_max_params_from_str+0x10a>
   12104:	6853      	ldr	r3, [r2, #4]
   12106:	2b00      	cmp	r3, #0
   12108:	d077      	beq.n	121fa <at_parser_max_params_from_str+0x10a>
	state = IDLE;
   1210a:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   1210c:	4610      	mov	r0, r2
   1210e:	f00c f815 	bl	1e13c <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   12112:	6832      	ldr	r2, [r6, #0]
	const char *str = *at_params_str;
   12114:	9401      	str	r4, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   12116:	4297      	cmp	r7, r2
   12118:	bf28      	it	cs
   1211a:	4617      	movcs	r7, r2
	int index = 0;
   1211c:	462c      	mov	r4, r5
	state = IDLE;
   1211e:	4b38      	ldr	r3, [pc, #224]	; (12200 <at_parser_max_params_from_str+0x110>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   12120:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 12204 <at_parser_max_params_from_str+0x114>
   12124:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   12126:	9a01      	ldr	r2, [sp, #4]
   12128:	7813      	ldrb	r3, [r2, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1212a:	2b00      	cmp	r3, #0
   1212c:	d04b      	beq.n	121c6 <at_parser_max_params_from_str+0xd6>
   1212e:	42a7      	cmp	r7, r4
   12130:	d949      	bls.n	121c6 <at_parser_max_params_from_str+0xd6>
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   12132:	2b20      	cmp	r3, #32
   12134:	d002      	beq.n	1213c <at_parser_max_params_from_str+0x4c>
   12136:	3b09      	subs	r3, #9
   12138:	2b04      	cmp	r3, #4
   1213a:	d801      	bhi.n	12140 <at_parser_max_params_from_str+0x50>
			str++;
   1213c:	3201      	adds	r2, #1
   1213e:	9201      	str	r2, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   12140:	4621      	mov	r1, r4
   12142:	a801      	add	r0, sp, #4
   12144:	f7ff ff74 	bl	12030 <at_parse_detect_type>
   12148:	1c42      	adds	r2, r0, #1
   1214a:	d03c      	beq.n	121c6 <at_parser_max_params_from_str+0xd6>
		if (at_parse_process_element(&str, index, list) == -1) {
   1214c:	4632      	mov	r2, r6
   1214e:	4621      	mov	r1, r4
   12150:	a801      	add	r0, sp, #4
   12152:	f7ff fe99 	bl	11e88 <at_parse_process_element>
   12156:	1c43      	adds	r3, r0, #1
   12158:	d035      	beq.n	121c6 <at_parser_max_params_from_str+0xd6>
		if (is_separator(*str)) {
   1215a:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1215c:	781a      	ldrb	r2, [r3, #0]
   1215e:	3a2c      	subs	r2, #44	; 0x2c
   12160:	b2d2      	uxtb	r2, r2
   12162:	2a11      	cmp	r2, #17
   12164:	d81a      	bhi.n	1219c <at_parser_max_params_from_str+0xac>
   12166:	fa29 f202 	lsr.w	r2, r9, r2
   1216a:	07d1      	lsls	r1, r2, #31
   1216c:	d516      	bpl.n	1219c <at_parser_max_params_from_str+0xac>
			if (is_lfcr(*(str + 1))) {
   1216e:	7858      	ldrb	r0, [r3, #1]
   12170:	f00b ff34 	bl	1dfdc <is_lfcr>
   12174:	b178      	cbz	r0, 12196 <at_parser_max_params_from_str+0xa6>
				index++;
   12176:	3401      	adds	r4, #1
				if (index == max_params) {
   12178:	42bc      	cmp	r4, r7
   1217a:	d039      	beq.n	121f0 <at_parser_max_params_from_str+0x100>
				if (at_parse_detect_type(&str, index) == -1) {
   1217c:	4621      	mov	r1, r4
   1217e:	a801      	add	r0, sp, #4
   12180:	f7ff ff56 	bl	12030 <at_parse_detect_type>
   12184:	1c42      	adds	r2, r0, #1
   12186:	d01e      	beq.n	121c6 <at_parser_max_params_from_str+0xd6>
				if (at_parse_process_element(&str, index,
   12188:	4632      	mov	r2, r6
   1218a:	4621      	mov	r1, r4
   1218c:	a801      	add	r0, sp, #4
   1218e:	f7ff fe7b 	bl	11e88 <at_parse_process_element>
   12192:	1c43      	adds	r3, r0, #1
   12194:	d017      	beq.n	121c6 <at_parser_max_params_from_str+0xd6>
			str++;
   12196:	9b01      	ldr	r3, [sp, #4]
   12198:	3301      	adds	r3, #1
   1219a:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   1219c:	9a01      	ldr	r2, [sp, #4]
   1219e:	7810      	ldrb	r0, [r2, #0]
   121a0:	f00b ff1c 	bl	1dfdc <is_lfcr>
   121a4:	b1f8      	cbz	r0, 121e6 <at_parser_max_params_from_str+0xf6>
   121a6:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   121a8:	7811      	ldrb	r1, [r2, #0]
   121aa:	4692      	mov	sl, r2
   121ac:	4608      	mov	r0, r1
   121ae:	3201      	adds	r2, #1
   121b0:	f00b ff14 	bl	1dfdc <is_lfcr>
   121b4:	2800      	cmp	r0, #0
   121b6:	d1f7      	bne.n	121a8 <at_parser_max_params_from_str+0xb8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   121b8:	b119      	cbz	r1, 121c2 <at_parser_max_params_from_str+0xd2>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   121ba:	292b      	cmp	r1, #43	; 0x2b
   121bc:	d001      	beq.n	121c2 <at_parser_max_params_from_str+0xd2>
   121be:	2925      	cmp	r1, #37	; 0x25
   121c0:	d111      	bne.n	121e6 <at_parser_max_params_from_str+0xf6>
				str += i;
   121c2:	f8cd a004 	str.w	sl, [sp, #4]
	*at_params_str = str;
   121c6:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   121c8:	b9a5      	cbnz	r5, 121f4 <at_parser_max_params_from_str+0x104>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   121ca:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   121cc:	2a00      	cmp	r2, #0
   121ce:	bf0c      	ite	eq
   121d0:	2000      	moveq	r0, #0
   121d2:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   121d6:	f1b8 0f00 	cmp.w	r8, #0
   121da:	d001      	beq.n	121e0 <at_parser_max_params_from_str+0xf0>
		*next_param_str = (char *)at_params_str;
   121dc:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   121e0:	b002      	add	sp, #8
   121e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		index++;
   121e6:	3401      	adds	r4, #1
			oversized = true;
   121e8:	42bc      	cmp	r4, r7
   121ea:	bf08      	it	eq
   121ec:	2501      	moveq	r5, #1
   121ee:	e79a      	b.n	12126 <at_parser_max_params_from_str+0x36>
					oversized = true;
   121f0:	4605      	mov	r5, r0
   121f2:	e7e8      	b.n	121c6 <at_parser_max_params_from_str+0xd6>
		return -E2BIG;
   121f4:	f06f 0006 	mvn.w	r0, #6
   121f8:	e7ed      	b.n	121d6 <at_parser_max_params_from_str+0xe6>
		return -EINVAL;
   121fa:	f06f 0015 	mvn.w	r0, #21
   121fe:	e7ef      	b.n	121e0 <at_parser_max_params_from_str+0xf0>
   12200:	20026475 	.word	0x20026475
   12204:	00024001 	.word	0x00024001

00012208 <lte_lc_power_off>:

	return 0;
}

int lte_lc_power_off(void)
{
   12208:	b508      	push	{r3, lr}
	if (at_cmd_write(power_off, NULL, 0, NULL) != 0) {
   1220a:	2300      	movs	r3, #0
   1220c:	4804      	ldr	r0, [pc, #16]	; (12220 <lte_lc_power_off+0x18>)
   1220e:	461a      	mov	r2, r3
   12210:	4619      	mov	r1, r3
   12212:	f7ff fced 	bl	11bf0 <at_cmd_write>
   12216:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   12218:	bf18      	it	ne
   1221a:	f06f 0004 	mvnne.w	r0, #4
   1221e:	bd08      	pop	{r3, pc}
   12220:	00020746 	.word	0x00020746

00012224 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   12224:	b508      	push	{r3, lr}
	z_impl_log_panic();
   12226:	f7fc fb71 	bl	e90c <z_impl_log_panic>
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   1222a:	2301      	movs	r3, #1
   1222c:	f04f 0100 	mov.w	r1, #0
   12230:	4a06      	ldr	r2, [pc, #24]	; (1224c <k_sys_fatal_error_handler+0x28>)
   12232:	f363 0107 	bfi	r1, r3, #0, #8
   12236:	4b06      	ldr	r3, [pc, #24]	; (12250 <k_sys_fatal_error_handler+0x2c>)
   12238:	4806      	ldr	r0, [pc, #24]	; (12254 <k_sys_fatal_error_handler+0x30>)
   1223a:	1a9b      	subs	r3, r3, r2
   1223c:	08db      	lsrs	r3, r3, #3
   1223e:	f363 118f 	bfi	r1, r3, #6, #10
   12242:	f00a f9bc 	bl	1c5be <log_0>
	sys_arch_reboot(0);
   12246:	2000      	movs	r0, #0
   12248:	f7fd fca4 	bl	fb94 <sys_arch_reboot>

	CODE_UNREACHABLE;
   1224c:	0001edc4 	.word	0x0001edc4
   12250:	0001edf4 	.word	0x0001edf4
   12254:	00020757 	.word	0x00020757

00012258 <ext_api_getter>:
extern const struct fw_info_ext_api * const _ext_apis_start[];
extern const u32_t _ext_apis_size;
__noinit fw_info_ext_api_getter ext_api_getter_in;

int ext_api_getter(u32_t id, u32_t index, const struct fw_info_ext_api **out)
{
   12258:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!out) {
   1225a:	b1da      	cbz	r2, 12294 <ext_api_getter+0x3c>
		return -EFAULT;
	}

	bool id_found = false;

	for (u32_t i = 0; i < (u32_t)&_ext_apis_size; i++) {
   1225c:	2300      	movs	r3, #0
	bool id_found = false;
   1225e:	461c      	mov	r4, r3
   12260:	4d0e      	ldr	r5, [pc, #56]	; (1229c <ext_api_getter+0x44>)
	for (u32_t i = 0; i < (u32_t)&_ext_apis_size; i++) {
   12262:	4f0f      	ldr	r7, [pc, #60]	; (122a0 <ext_api_getter+0x48>)
   12264:	42bb      	cmp	r3, r7
   12266:	d306      	bcc.n	12276 <ext_api_getter+0x1e>
				*out = ext_api;
				return 0;
			}
		}
	}
	return id_found ? -EBADF : -ENOENT;
   12268:	2c00      	cmp	r4, #0
   1226a:	bf14      	ite	ne
   1226c:	f06f 0008 	mvnne.w	r0, #8
   12270:	f06f 0001 	mvneq.w	r0, #1
   12274:	e009      	b.n	1228a <ext_api_getter+0x32>
		const struct fw_info_ext_api *ext_api = _ext_apis_start[i];
   12276:	f855 6b04 	ldr.w	r6, [r5], #4
		if (ext_api->ext_api_id == id) {
   1227a:	f8d6 c00c 	ldr.w	ip, [r6, #12]
   1227e:	4560      	cmp	r0, ip
   12280:	d106      	bne.n	12290 <ext_api_getter+0x38>
			if (index-- == 0) {
   12282:	1e4c      	subs	r4, r1, #1
   12284:	b911      	cbnz	r1, 1228c <ext_api_getter+0x34>
				return 0;
   12286:	4608      	mov	r0, r1
				*out = ext_api;
   12288:	6016      	str	r6, [r2, #0]
}
   1228a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (index-- == 0) {
   1228c:	4621      	mov	r1, r4
			id_found = true;
   1228e:	2401      	movs	r4, #1
	for (u32_t i = 0; i < (u32_t)&_ext_apis_size; i++) {
   12290:	3301      	adds	r3, #1
   12292:	e7e7      	b.n	12264 <ext_api_getter+0xc>
		return -EFAULT;
   12294:	f06f 000d 	mvn.w	r0, #13
   12298:	e7f7      	b.n	1228a <ext_api_getter+0x32>
   1229a:	bf00      	nop
   1229c:	00020884 	.word	0x00020884
   122a0:	00000000 	.word	0x00000000

000122a4 <rpc_logobj_client_evt_handler>:
   122a4:	b120      	cbz	r0, 122b0 <rpc_logobj_client_evt_handler+0xc>
   122a6:	f850 1b08 	ldr.w	r1, [r0], #8
   122aa:	0c09      	lsrs	r1, r1, #16
   122ac:	f000 b852 	b.w	12354 <logobj_event_handler>
   122b0:	4770      	bx	lr
   122b2:	bf00      	nop

000122b4 <rpc_logobj_client_init>:
   122b4:	4801      	ldr	r0, [pc, #4]	; (122bc <rpc_logobj_client_init+0x8>)
   122b6:	f006 bb87 	b.w	189c8 <rpc_client_register>
   122ba:	bf00      	nop
   122bc:	0001f044 	.word	0x0001f044

000122c0 <rpc_logobj_client_request_alloc>:
   122c0:	2300      	movs	r3, #0
   122c2:	b510      	push	{r4, lr}
   122c4:	b082      	sub	sp, #8
   122c6:	9301      	str	r3, [sp, #4]
   122c8:	b961      	cbnz	r1, 122e4 <rpc_logobj_client_request_alloc+0x24>
   122ca:	b170      	cbz	r0, 122ea <rpc_logobj_client_request_alloc+0x2a>
   122cc:	4604      	mov	r4, r0
   122ce:	aa01      	add	r2, sp, #4
   122d0:	2009      	movs	r0, #9
   122d2:	f006 fdb1 	bl	18e38 <rpc_message_alloc>
   122d6:	b918      	cbnz	r0, 122e0 <rpc_logobj_client_request_alloc+0x20>
   122d8:	9b01      	ldr	r3, [sp, #4]
   122da:	b10b      	cbz	r3, 122e0 <rpc_logobj_client_request_alloc+0x20>
   122dc:	3308      	adds	r3, #8
   122de:	6023      	str	r3, [r4, #0]
   122e0:	b002      	add	sp, #8
   122e2:	bd10      	pop	{r4, pc}
   122e4:	200f      	movs	r0, #15
   122e6:	b002      	add	sp, #8
   122e8:	bd10      	pop	{r4, pc}
   122ea:	200e      	movs	r0, #14
   122ec:	b002      	add	sp, #8
   122ee:	bd10      	pop	{r4, pc}

000122f0 <rpc_logobj_client_request_send>:
   122f0:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   122f4:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   122f8:	d10b      	bne.n	12312 <rpc_logobj_client_request_send+0x22>
   122fa:	b160      	cbz	r0, 12316 <rpc_logobj_client_request_send+0x26>
   122fc:	4603      	mov	r3, r0
   122fe:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   12302:	2009      	movs	r0, #9
   12304:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   12308:	f843 1d08 	str.w	r1, [r3, #-8]!
   1230c:	4619      	mov	r1, r3
   1230e:	f006 bd7b 	b.w	18e08 <rpc_message_send>
   12312:	200f      	movs	r0, #15
   12314:	4770      	bx	lr
   12316:	200e      	movs	r0, #14
   12318:	4770      	bx	lr
   1231a:	bf00      	nop

0001231c <rpc_logobj_client_message_free>:
   1231c:	b120      	cbz	r0, 12328 <rpc_logobj_client_message_free+0xc>
   1231e:	f1a0 0108 	sub.w	r1, r0, #8
   12322:	2009      	movs	r0, #9
   12324:	f006 bdba 	b.w	18e9c <rpc_message_free>
   12328:	200e      	movs	r0, #14
   1232a:	4770      	bx	lr

0001232c <rpc_logobj_client_data_free>:
   1232c:	b118      	cbz	r0, 12336 <rpc_logobj_client_data_free+0xa>
   1232e:	4601      	mov	r1, r0
   12330:	2009      	movs	r0, #9
   12332:	f006 bec5 	b.w	190c0 <rpc_message_data_free>
   12336:	200e      	movs	r0, #14
   12338:	4770      	bx	lr
   1233a:	bf00      	nop

0001233c <packet_free_cb>:
   1233c:	b510      	push	{r4, lr}
   1233e:	4604      	mov	r4, r0
   12340:	6800      	ldr	r0, [r0, #0]
   12342:	f7ff fff3 	bl	1232c <rpc_logobj_client_data_free>
   12346:	68a0      	ldr	r0, [r4, #8]
   12348:	b118      	cbz	r0, 12352 <packet_free_cb+0x16>
   1234a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1234e:	f001 b90f 	b.w	13570 <nrf_free>
   12352:	bd10      	pop	{r4, pc}

00012354 <logobj_event_handler>:
   12354:	b530      	push	{r4, r5, lr}
   12356:	4b3b      	ldr	r3, [pc, #236]	; (12444 <logobj_event_handler+0xf0>)
   12358:	b085      	sub	sp, #20
   1235a:	681d      	ldr	r5, [r3, #0]
   1235c:	2d00      	cmp	r5, #0
   1235e:	d04c      	beq.n	123fa <logobj_event_handler+0xa6>
   12360:	f248 0302 	movw	r3, #32770	; 0x8002
   12364:	4299      	cmp	r1, r3
   12366:	d053      	beq.n	12410 <logobj_event_handler+0xbc>
   12368:	d91c      	bls.n	123a4 <logobj_event_handler+0x50>
   1236a:	f248 0303 	movw	r3, #32771	; 0x8003
   1236e:	4299      	cmp	r1, r3
   12370:	d05a      	beq.n	12428 <logobj_event_handler+0xd4>
   12372:	f249 0301 	movw	r3, #36865	; 0x9001
   12376:	4299      	cmp	r1, r3
   12378:	d147      	bne.n	1240a <logobj_event_handler+0xb6>
   1237a:	2400      	movs	r4, #0
   1237c:	6843      	ldr	r3, [r0, #4]
   1237e:	6802      	ldr	r2, [r0, #0]
   12380:	e9cd 4402 	strd	r4, r4, [sp, #8]
   12384:	e9cd 2300 	strd	r2, r3, [sp]
   12388:	69e8      	ldr	r0, [r5, #28]
   1238a:	4669      	mov	r1, sp
   1238c:	6803      	ldr	r3, [r0, #0]
   1238e:	685b      	ldr	r3, [r3, #4]
   12390:	4798      	blx	r3
   12392:	3001      	adds	r0, #1
   12394:	d04e      	beq.n	12434 <logobj_event_handler+0xe0>
   12396:	4620      	mov	r0, r4
   12398:	682b      	ldr	r3, [r5, #0]
   1239a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1239e:	602b      	str	r3, [r5, #0]
   123a0:	b005      	add	sp, #20
   123a2:	bd30      	pop	{r4, r5, pc}
   123a4:	f248 0301 	movw	r3, #32769	; 0x8001
   123a8:	4299      	cmp	r1, r3
   123aa:	d12e      	bne.n	1240a <logobj_event_handler+0xb6>
   123ac:	68c3      	ldr	r3, [r0, #12]
   123ae:	2b00      	cmp	r3, #0
   123b0:	d135      	bne.n	1241e <logobj_event_handler+0xca>
   123b2:	6828      	ldr	r0, [r5, #0]
   123b4:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   123b8:	d03e      	beq.n	12438 <logobj_event_handler+0xe4>
   123ba:	682b      	ldr	r3, [r5, #0]
   123bc:	b29b      	uxth	r3, r3
   123be:	2b01      	cmp	r3, #1
   123c0:	d105      	bne.n	123ce <logobj_event_handler+0x7a>
   123c2:	682b      	ldr	r3, [r5, #0]
   123c4:	0c1b      	lsrs	r3, r3, #16
   123c6:	041b      	lsls	r3, r3, #16
   123c8:	f043 0302 	orr.w	r3, r3, #2
   123cc:	602b      	str	r3, [r5, #0]
   123ce:	4b1e      	ldr	r3, [pc, #120]	; (12448 <logobj_event_handler+0xf4>)
   123d0:	781a      	ldrb	r2, [r3, #0]
   123d2:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   123d6:	2a00      	cmp	r2, #0
   123d8:	d031      	beq.n	1243e <logobj_event_handler+0xea>
   123da:	4a1c      	ldr	r2, [pc, #112]	; (1244c <logobj_event_handler+0xf8>)
   123dc:	7811      	ldrb	r1, [r2, #0]
   123de:	b909      	cbnz	r1, 123e4 <logobj_event_handler+0x90>
   123e0:	2101      	movs	r1, #1
   123e2:	7011      	strb	r1, [r2, #0]
   123e4:	2000      	movs	r0, #0
   123e6:	7018      	strb	r0, [r3, #0]
   123e8:	682b      	ldr	r3, [r5, #0]
   123ea:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   123ee:	602b      	str	r3, [r5, #0]
   123f0:	682b      	ldr	r3, [r5, #0]
   123f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   123f6:	602b      	str	r3, [r5, #0]
   123f8:	e7d2      	b.n	123a0 <logobj_event_handler+0x4c>
   123fa:	6800      	ldr	r0, [r0, #0]
   123fc:	2800      	cmp	r0, #0
   123fe:	d0cf      	beq.n	123a0 <logobj_event_handler+0x4c>
   12400:	f7ff ff94 	bl	1232c <rpc_logobj_client_data_free>
   12404:	4628      	mov	r0, r5
   12406:	b005      	add	sp, #20
   12408:	bd30      	pop	{r4, r5, pc}
   1240a:	2000      	movs	r0, #0
   1240c:	b005      	add	sp, #20
   1240e:	bd30      	pop	{r4, r5, pc}
   12410:	682b      	ldr	r3, [r5, #0]
   12412:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   12416:	d00b      	beq.n	12430 <logobj_event_handler+0xdc>
   12418:	68c0      	ldr	r0, [r0, #12]
   1241a:	2800      	cmp	r0, #0
   1241c:	d0e4      	beq.n	123e8 <logobj_event_handler+0x94>
   1241e:	230e      	movs	r3, #14
   12420:	2000      	movs	r0, #0
   12422:	606b      	str	r3, [r5, #4]
   12424:	b005      	add	sp, #20
   12426:	bd30      	pop	{r4, r5, pc}
   12428:	68c3      	ldr	r3, [r0, #12]
   1242a:	2b01      	cmp	r3, #1
   1242c:	d1a5      	bne.n	1237a <logobj_event_handler+0x26>
   1242e:	e7f6      	b.n	1241e <logobj_event_handler+0xca>
   12430:	4618      	mov	r0, r3
   12432:	e7b5      	b.n	123a0 <logobj_event_handler+0x4c>
   12434:	2002      	movs	r0, #2
   12436:	e7b3      	b.n	123a0 <logobj_event_handler+0x4c>
   12438:	230e      	movs	r3, #14
   1243a:	606b      	str	r3, [r5, #4]
   1243c:	e7b0      	b.n	123a0 <logobj_event_handler+0x4c>
   1243e:	4a03      	ldr	r2, [pc, #12]	; (1244c <logobj_event_handler+0xf8>)
   12440:	7011      	strb	r1, [r2, #0]
   12442:	e7cf      	b.n	123e4 <logobj_event_handler+0x90>
   12444:	200204a8 	.word	0x200204a8
   12448:	20026476 	.word	0x20026476
   1244c:	20026477 	.word	0x20026477

00012450 <logobj_interface_init>:
   12450:	2300      	movs	r3, #0
   12452:	b510      	push	{r4, lr}
   12454:	4907      	ldr	r1, [pc, #28]	; (12474 <logobj_interface_init+0x24>)
   12456:	4a08      	ldr	r2, [pc, #32]	; (12478 <logobj_interface_init+0x28>)
   12458:	4c08      	ldr	r4, [pc, #32]	; (1247c <logobj_interface_init+0x2c>)
   1245a:	4809      	ldr	r0, [pc, #36]	; (12480 <logobj_interface_init+0x30>)
   1245c:	7023      	strb	r3, [r4, #0]
   1245e:	6003      	str	r3, [r0, #0]
   12460:	700b      	strb	r3, [r1, #0]
   12462:	6013      	str	r3, [r2, #0]
   12464:	f7ff ff26 	bl	122b4 <rpc_logobj_client_init>
   12468:	3000      	adds	r0, #0
   1246a:	bf18      	it	ne
   1246c:	2001      	movne	r0, #1
   1246e:	4240      	negs	r0, r0
   12470:	bd10      	pop	{r4, pc}
   12472:	bf00      	nop
   12474:	20026476 	.word	0x20026476
   12478:	200204a4 	.word	0x200204a4
   1247c:	20026477 	.word	0x20026477
   12480:	200204a8 	.word	0x200204a8

00012484 <logobj_interface_open>:
   12484:	2300      	movs	r3, #0
   12486:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1248a:	2866      	cmp	r0, #102	; 0x66
   1248c:	b082      	sub	sp, #8
   1248e:	9300      	str	r3, [sp, #0]
   12490:	d172      	bne.n	12578 <logobj_interface_open+0xf4>
   12492:	2902      	cmp	r1, #2
   12494:	4689      	mov	r9, r1
   12496:	d16f      	bne.n	12578 <logobj_interface_open+0xf4>
   12498:	f240 2305 	movw	r3, #517	; 0x205
   1249c:	429a      	cmp	r2, r3
   1249e:	4692      	mov	sl, r2
   124a0:	d16a      	bne.n	12578 <logobj_interface_open+0xf4>
   124a2:	4f48      	ldr	r7, [pc, #288]	; (125c4 <logobj_interface_open+0x140>)
   124a4:	683d      	ldr	r5, [r7, #0]
   124a6:	2d00      	cmp	r5, #0
   124a8:	d17c      	bne.n	125a4 <logobj_interface_open+0x120>
   124aa:	4680      	mov	r8, r0
   124ac:	4a46      	ldr	r2, [pc, #280]	; (125c8 <logobj_interface_open+0x144>)
   124ae:	4668      	mov	r0, sp
   124b0:	f006 f81c 	bl	184ec <interface_socket_allocate>
   124b4:	9b00      	ldr	r3, [sp, #0]
   124b6:	4606      	mov	r6, r0
   124b8:	2b00      	cmp	r3, #0
   124ba:	d07d      	beq.n	125b8 <logobj_interface_open+0x134>
   124bc:	4629      	mov	r1, r5
   124be:	2204      	movs	r2, #4
   124c0:	4842      	ldr	r0, [pc, #264]	; (125cc <logobj_interface_open+0x148>)
   124c2:	603b      	str	r3, [r7, #0]
   124c4:	f00a fe1b 	bl	1d0fe <memset>
   124c8:	9c00      	ldr	r4, [sp, #0]
   124ca:	4629      	mov	r1, r5
   124cc:	e9c4 8903 	strd	r8, r9, [r4, #12]
   124d0:	f8c4 a014 	str.w	sl, [r4, #20]
   124d4:	a801      	add	r0, sp, #4
   124d6:	f7ff fef3 	bl	122c0 <rpc_logobj_client_request_alloc>
   124da:	2800      	cmp	r0, #0
   124dc:	d13c      	bne.n	12558 <logobj_interface_open+0xd4>
   124de:	2201      	movs	r2, #1
   124e0:	2104      	movs	r1, #4
   124e2:	9b01      	ldr	r3, [sp, #4]
   124e4:	4d3a      	ldr	r5, [pc, #232]	; (125d0 <logobj_interface_open+0x14c>)
   124e6:	7358      	strb	r0, [r3, #13]
   124e8:	7398      	strb	r0, [r3, #14]
   124ea:	73d8      	strb	r0, [r3, #15]
   124ec:	7258      	strb	r0, [r3, #9]
   124ee:	7298      	strb	r0, [r3, #10]
   124f0:	72d8      	strb	r0, [r3, #11]
   124f2:	7219      	strb	r1, [r3, #8]
   124f4:	702a      	strb	r2, [r5, #0]
   124f6:	731a      	strb	r2, [r3, #12]
   124f8:	6822      	ldr	r2, [r4, #0]
   124fa:	4618      	mov	r0, r3
   124fc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   12500:	6022      	str	r2, [r4, #0]
   12502:	f247 0101 	movw	r1, #28673	; 0x7001
   12506:	f7ff fef3 	bl	122f0 <rpc_logobj_client_request_send>
   1250a:	bb38      	cbnz	r0, 1255c <logobj_interface_open+0xd8>
   1250c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   12510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12514:	4611      	mov	r1, r2
   12516:	4630      	mov	r0, r6
   12518:	f006 f88c 	bl	18634 <interface_socket_wait>
   1251c:	4604      	mov	r4, r0
   1251e:	b310      	cbz	r0, 12566 <logobj_interface_open+0xe2>
   12520:	9a00      	ldr	r2, [sp, #0]
   12522:	2e00      	cmp	r6, #0
   12524:	6813      	ldr	r3, [r2, #0]
   12526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1252a:	6013      	str	r3, [r2, #0]
   1252c:	9a00      	ldr	r2, [sp, #0]
   1252e:	6813      	ldr	r3, [r2, #0]
   12530:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12534:	6013      	str	r3, [r2, #0]
   12536:	9a00      	ldr	r2, [sp, #0]
   12538:	6813      	ldr	r3, [r2, #0]
   1253a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1253e:	6013      	str	r3, [r2, #0]
   12540:	da36      	bge.n	125b0 <logobj_interface_open+0x12c>
   12542:	2300      	movs	r3, #0
   12544:	4620      	mov	r0, r4
   12546:	603b      	str	r3, [r7, #0]
   12548:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1254c:	f7fe ff60 	bl	11410 <bsd_os_errno_set>
   12550:	4630      	mov	r0, r6
   12552:	b002      	add	sp, #8
   12554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12558:	240c      	movs	r4, #12
   1255a:	e7e1      	b.n	12520 <logobj_interface_open+0x9c>
   1255c:	9801      	ldr	r0, [sp, #4]
   1255e:	f7ff fedd 	bl	1231c <rpc_logobj_client_message_free>
   12562:	2405      	movs	r4, #5
   12564:	e7dc      	b.n	12520 <logobj_interface_open+0x9c>
   12566:	4630      	mov	r0, r6
   12568:	f006 f8d0 	bl	1870c <interface_socket_from_handle_get>
   1256c:	b150      	cbz	r0, 12584 <logobj_interface_open+0x100>
   1256e:	6844      	ldr	r4, [r0, #4]
   12570:	b144      	cbz	r4, 12584 <logobj_interface_open+0x100>
   12572:	2300      	movs	r3, #0
   12574:	6043      	str	r3, [r0, #4]
   12576:	e7d3      	b.n	12520 <logobj_interface_open+0x9c>
   12578:	2016      	movs	r0, #22
   1257a:	f7fe ff49 	bl	11410 <bsd_os_errno_set>
   1257e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   12582:	e7e5      	b.n	12550 <logobj_interface_open+0xcc>
   12584:	9a00      	ldr	r2, [sp, #0]
   12586:	6813      	ldr	r3, [r2, #0]
   12588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1258c:	6013      	str	r3, [r2, #0]
   1258e:	9a00      	ldr	r2, [sp, #0]
   12590:	6813      	ldr	r3, [r2, #0]
   12592:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12596:	6013      	str	r3, [r2, #0]
   12598:	9a00      	ldr	r2, [sp, #0]
   1259a:	6813      	ldr	r3, [r2, #0]
   1259c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   125a0:	6013      	str	r3, [r2, #0]
   125a2:	e7d5      	b.n	12550 <logobj_interface_open+0xcc>
   125a4:	2001      	movs	r0, #1
   125a6:	f7fe ff33 	bl	11410 <bsd_os_errno_set>
   125aa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   125ae:	e7cf      	b.n	12550 <logobj_interface_open+0xcc>
   125b0:	4630      	mov	r0, r6
   125b2:	f005 fff1 	bl	18598 <interface_socket_free>
   125b6:	e7c4      	b.n	12542 <logobj_interface_open+0xbe>
   125b8:	2018      	movs	r0, #24
   125ba:	f7fe ff29 	bl	11410 <bsd_os_errno_set>
   125be:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   125c2:	e7c5      	b.n	12550 <logobj_interface_open+0xcc>
   125c4:	200204a8 	.word	0x200204a8
   125c8:	0001233d 	.word	0x0001233d
   125cc:	200204a4 	.word	0x200204a4
   125d0:	20026476 	.word	0x20026476

000125d4 <logobj_interface_read>:
   125d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   125d8:	b085      	sub	sp, #20
   125da:	2900      	cmp	r1, #0
   125dc:	d05e      	beq.n	1269c <logobj_interface_read+0xc8>
   125de:	2a00      	cmp	r2, #0
   125e0:	4616      	mov	r6, r2
   125e2:	dd5b      	ble.n	1269c <logobj_interface_read+0xc8>
   125e4:	461f      	mov	r7, r3
   125e6:	4680      	mov	r8, r0
   125e8:	460d      	mov	r5, r1
   125ea:	f006 f88f 	bl	1870c <interface_socket_from_handle_get>
   125ee:	4604      	mov	r4, r0
   125f0:	2800      	cmp	r0, #0
   125f2:	d059      	beq.n	126a8 <logobj_interface_read+0xd4>
   125f4:	69c0      	ldr	r0, [r0, #28]
   125f6:	07ba      	lsls	r2, r7, #30
   125f8:	6803      	ldr	r3, [r0, #0]
   125fa:	68db      	ldr	r3, [r3, #12]
   125fc:	d524      	bpl.n	12648 <logobj_interface_read+0x74>
   125fe:	4798      	blx	r3
   12600:	3001      	adds	r0, #1
   12602:	d03b      	beq.n	1267c <logobj_interface_read+0xa8>
   12604:	6823      	ldr	r3, [r4, #0]
   12606:	69e0      	ldr	r0, [r4, #28]
   12608:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   1260c:	d038      	beq.n	12680 <logobj_interface_read+0xac>
   1260e:	2100      	movs	r1, #0
   12610:	6823      	ldr	r3, [r4, #0]
   12612:	463a      	mov	r2, r7
   12614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   12618:	6023      	str	r3, [r4, #0]
   1261a:	e9cd 1102 	strd	r1, r1, [sp, #8]
   1261e:	e9cd 5600 	strd	r5, r6, [sp]
   12622:	6803      	ldr	r3, [r0, #0]
   12624:	4669      	mov	r1, sp
   12626:	689b      	ldr	r3, [r3, #8]
   12628:	4798      	blx	r3
   1262a:	4605      	mov	r5, r0
   1262c:	69e0      	ldr	r0, [r4, #28]
   1262e:	6803      	ldr	r3, [r0, #0]
   12630:	68db      	ldr	r3, [r3, #12]
   12632:	4798      	blx	r3
   12634:	3001      	adds	r0, #1
   12636:	d003      	beq.n	12640 <logobj_interface_read+0x6c>
   12638:	6823      	ldr	r3, [r4, #0]
   1263a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1263e:	6023      	str	r3, [r4, #0]
   12640:	4628      	mov	r0, r5
   12642:	b005      	add	sp, #20
   12644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12648:	6822      	ldr	r2, [r4, #0]
   1264a:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   1264e:	d1d6      	bne.n	125fe <logobj_interface_read+0x2a>
   12650:	4798      	blx	r3
   12652:	1c43      	adds	r3, r0, #1
   12654:	d1d6      	bne.n	12604 <logobj_interface_read+0x30>
   12656:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1265a:	6a23      	ldr	r3, [r4, #32]
   1265c:	4611      	mov	r1, r2
   1265e:	2b00      	cmp	r3, #0
   12660:	bf08      	it	eq
   12662:	4603      	moveq	r3, r0
   12664:	4640      	mov	r0, r8
   12666:	f005 ffe5 	bl	18634 <interface_socket_wait>
   1266a:	b158      	cbz	r0, 12684 <logobj_interface_read+0xb0>
   1266c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12670:	f7fe fece 	bl	11410 <bsd_os_errno_set>
   12674:	4628      	mov	r0, r5
   12676:	b005      	add	sp, #20
   12678:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1267c:	2023      	movs	r0, #35	; 0x23
   1267e:	e7f5      	b.n	1266c <logobj_interface_read+0x98>
   12680:	461d      	mov	r5, r3
   12682:	e7d4      	b.n	1262e <logobj_interface_read+0x5a>
   12684:	4640      	mov	r0, r8
   12686:	f006 f841 	bl	1870c <interface_socket_from_handle_get>
   1268a:	4603      	mov	r3, r0
   1268c:	2800      	cmp	r0, #0
   1268e:	d0b9      	beq.n	12604 <logobj_interface_read+0x30>
   12690:	6840      	ldr	r0, [r0, #4]
   12692:	2800      	cmp	r0, #0
   12694:	d0b6      	beq.n	12604 <logobj_interface_read+0x30>
   12696:	f8c3 9004 	str.w	r9, [r3, #4]
   1269a:	e7e7      	b.n	1266c <logobj_interface_read+0x98>
   1269c:	2016      	movs	r0, #22
   1269e:	f7fe feb7 	bl	11410 <bsd_os_errno_set>
   126a2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   126a6:	e7cb      	b.n	12640 <logobj_interface_read+0x6c>
   126a8:	2009      	movs	r0, #9
   126aa:	f7fe feb1 	bl	11410 <bsd_os_errno_set>
   126ae:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   126b2:	e7c5      	b.n	12640 <logobj_interface_read+0x6c>

000126b4 <logobj_interface_write>:
   126b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   126b8:	b082      	sub	sp, #8
   126ba:	2900      	cmp	r1, #0
   126bc:	d05b      	beq.n	12776 <logobj_interface_write+0xc2>
   126be:	2a04      	cmp	r2, #4
   126c0:	d159      	bne.n	12776 <logobj_interface_write+0xc2>
   126c2:	461e      	mov	r6, r3
   126c4:	4607      	mov	r7, r0
   126c6:	460d      	mov	r5, r1
   126c8:	f006 f820 	bl	1870c <interface_socket_from_handle_get>
   126cc:	4604      	mov	r4, r0
   126ce:	2800      	cmp	r0, #0
   126d0:	d067      	beq.n	127a2 <logobj_interface_write+0xee>
   126d2:	07b0      	lsls	r0, r6, #30
   126d4:	d526      	bpl.n	12724 <logobj_interface_write+0x70>
   126d6:	6823      	ldr	r3, [r4, #0]
   126d8:	039b      	lsls	r3, r3, #14
   126da:	d55e      	bpl.n	1279a <logobj_interface_write+0xe6>
   126dc:	2600      	movs	r6, #0
   126de:	6823      	ldr	r3, [r4, #0]
   126e0:	2100      	movs	r1, #0
   126e2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   126e6:	6023      	str	r3, [r4, #0]
   126e8:	a801      	add	r0, sp, #4
   126ea:	f8d5 8000 	ldr.w	r8, [r5]
   126ee:	f7ff fde7 	bl	122c0 <rpc_logobj_client_request_alloc>
   126f2:	b9f8      	cbnz	r0, 12734 <logobj_interface_write+0x80>
   126f4:	2504      	movs	r5, #4
   126f6:	9b01      	ldr	r3, [sp, #4]
   126f8:	f247 0103 	movw	r1, #28675	; 0x7003
   126fc:	f8c3 800c 	str.w	r8, [r3, #12]
   12700:	7258      	strb	r0, [r3, #9]
   12702:	7298      	strb	r0, [r3, #10]
   12704:	72d8      	strb	r0, [r3, #11]
   12706:	721d      	strb	r5, [r3, #8]
   12708:	4618      	mov	r0, r3
   1270a:	f7ff fdf1 	bl	122f0 <rpc_logobj_client_request_send>
   1270e:	4680      	mov	r8, r0
   12710:	bb40      	cbnz	r0, 12764 <logobj_interface_write+0xb0>
   12712:	b9ce      	cbnz	r6, 12748 <logobj_interface_write+0x94>
   12714:	4628      	mov	r0, r5
   12716:	6823      	ldr	r3, [r4, #0]
   12718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1271c:	6023      	str	r3, [r4, #0]
   1271e:	b002      	add	sp, #8
   12720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12724:	6823      	ldr	r3, [r4, #0]
   12726:	00d9      	lsls	r1, r3, #3
   12728:	d4d5      	bmi.n	126d6 <logobj_interface_write+0x22>
   1272a:	6823      	ldr	r3, [r4, #0]
   1272c:	039a      	lsls	r2, r3, #14
   1272e:	d536      	bpl.n	1279e <logobj_interface_write+0xea>
   12730:	2601      	movs	r6, #1
   12732:	e7d4      	b.n	126de <logobj_interface_write+0x2a>
   12734:	200c      	movs	r0, #12
   12736:	6823      	ldr	r3, [r4, #0]
   12738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1273c:	6023      	str	r3, [r4, #0]
   1273e:	f7fe fe67 	bl	11410 <bsd_os_errno_set>
   12742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12746:	e7ea      	b.n	1271e <logobj_interface_write+0x6a>
   12748:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1274c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12750:	4611      	mov	r1, r2
   12752:	4638      	mov	r0, r7
   12754:	f005 ff6e 	bl	18634 <interface_socket_wait>
   12758:	b198      	cbz	r0, 12782 <logobj_interface_write+0xce>
   1275a:	6823      	ldr	r3, [r4, #0]
   1275c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12760:	6023      	str	r3, [r4, #0]
   12762:	e7ec      	b.n	1273e <logobj_interface_write+0x8a>
   12764:	9801      	ldr	r0, [sp, #4]
   12766:	f7ff fdd9 	bl	1231c <rpc_logobj_client_message_free>
   1276a:	6823      	ldr	r3, [r4, #0]
   1276c:	2005      	movs	r0, #5
   1276e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12772:	6023      	str	r3, [r4, #0]
   12774:	e7e3      	b.n	1273e <logobj_interface_write+0x8a>
   12776:	2016      	movs	r0, #22
   12778:	f7fe fe4a 	bl	11410 <bsd_os_errno_set>
   1277c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12780:	e7cd      	b.n	1271e <logobj_interface_write+0x6a>
   12782:	4638      	mov	r0, r7
   12784:	f005 ffc2 	bl	1870c <interface_socket_from_handle_get>
   12788:	4603      	mov	r3, r0
   1278a:	2800      	cmp	r0, #0
   1278c:	d0c2      	beq.n	12714 <logobj_interface_write+0x60>
   1278e:	6840      	ldr	r0, [r0, #4]
   12790:	2800      	cmp	r0, #0
   12792:	d0bf      	beq.n	12714 <logobj_interface_write+0x60>
   12794:	f8c3 8004 	str.w	r8, [r3, #4]
   12798:	e7df      	b.n	1275a <logobj_interface_write+0xa6>
   1279a:	2073      	movs	r0, #115	; 0x73
   1279c:	e7cf      	b.n	1273e <logobj_interface_write+0x8a>
   1279e:	2009      	movs	r0, #9
   127a0:	e7cd      	b.n	1273e <logobj_interface_write+0x8a>
   127a2:	2009      	movs	r0, #9
   127a4:	f7fe fe34 	bl	11410 <bsd_os_errno_set>
   127a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   127ac:	e7b7      	b.n	1271e <logobj_interface_write+0x6a>
   127ae:	bf00      	nop

000127b0 <logobj_interface_setopt>:
   127b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   127b2:	2901      	cmp	r1, #1
   127b4:	b085      	sub	sp, #20
   127b6:	d068      	beq.n	1288a <logobj_interface_setopt+0xda>
   127b8:	461e      	mov	r6, r3
   127ba:	f240 2305 	movw	r3, #517	; 0x205
   127be:	4299      	cmp	r1, r3
   127c0:	f040 8095 	bne.w	128ee <logobj_interface_setopt+0x13e>
   127c4:	4607      	mov	r7, r0
   127c6:	4615      	mov	r5, r2
   127c8:	f005 ffa0 	bl	1870c <interface_socket_from_handle_get>
   127cc:	4604      	mov	r4, r0
   127ce:	2800      	cmp	r0, #0
   127d0:	f000 80b2 	beq.w	12938 <logobj_interface_setopt+0x188>
   127d4:	2d01      	cmp	r5, #1
   127d6:	d019      	beq.n	1280c <logobj_interface_setopt+0x5c>
   127d8:	2d02      	cmp	r5, #2
   127da:	d010      	beq.n	127fe <logobj_interface_setopt+0x4e>
   127dc:	252a      	movs	r5, #42	; 0x2a
   127de:	6803      	ldr	r3, [r0, #0]
   127e0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   127e4:	6023      	str	r3, [r4, #0]
   127e6:	6823      	ldr	r3, [r4, #0]
   127e8:	4628      	mov	r0, r5
   127ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   127ee:	6023      	str	r3, [r4, #0]
   127f0:	f7fe fe0e 	bl	11410 <bsd_os_errno_set>
   127f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   127f8:	4628      	mov	r0, r5
   127fa:	b005      	add	sp, #20
   127fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   127fe:	b116      	cbz	r6, 12806 <logobj_interface_setopt+0x56>
   12800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12802:	2b01      	cmp	r3, #1
   12804:	d049      	beq.n	1289a <logobj_interface_setopt+0xea>
   12806:	6823      	ldr	r3, [r4, #0]
   12808:	2516      	movs	r5, #22
   1280a:	e7e9      	b.n	127e0 <logobj_interface_setopt+0x30>
   1280c:	2e00      	cmp	r6, #0
   1280e:	d0fa      	beq.n	12806 <logobj_interface_setopt+0x56>
   12810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12812:	2b04      	cmp	r3, #4
   12814:	d1f7      	bne.n	12806 <logobj_interface_setopt+0x56>
   12816:	2100      	movs	r1, #0
   12818:	a803      	add	r0, sp, #12
   1281a:	f7ff fd51 	bl	122c0 <rpc_logobj_client_request_alloc>
   1281e:	4605      	mov	r5, r0
   12820:	2800      	cmp	r0, #0
   12822:	d16a      	bne.n	128fa <logobj_interface_setopt+0x14a>
   12824:	9803      	ldr	r0, [sp, #12]
   12826:	2208      	movs	r2, #8
   12828:	4629      	mov	r1, r5
   1282a:	300c      	adds	r0, #12
   1282c:	f00a fc67 	bl	1d0fe <memset>
   12830:	9803      	ldr	r0, [sp, #12]
   12832:	4631      	mov	r1, r6
   12834:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12836:	300c      	adds	r0, #12
   12838:	f00a fc37 	bl	1d0aa <memcpy>
   1283c:	2308      	movs	r3, #8
   1283e:	9803      	ldr	r0, [sp, #12]
   12840:	f247 0102 	movw	r1, #28674	; 0x7002
   12844:	7203      	strb	r3, [r0, #8]
   12846:	7245      	strb	r5, [r0, #9]
   12848:	7285      	strb	r5, [r0, #10]
   1284a:	72c5      	strb	r5, [r0, #11]
   1284c:	6823      	ldr	r3, [r4, #0]
   1284e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   12852:	6023      	str	r3, [r4, #0]
   12854:	f7ff fd4c 	bl	122f0 <rpc_logobj_client_request_send>
   12858:	2800      	cmp	r0, #0
   1285a:	d151      	bne.n	12900 <logobj_interface_setopt+0x150>
   1285c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   12860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12864:	4611      	mov	r1, r2
   12866:	4638      	mov	r0, r7
   12868:	f005 fee4 	bl	18634 <interface_socket_wait>
   1286c:	4605      	mov	r5, r0
   1286e:	2800      	cmp	r0, #0
   12870:	d13b      	bne.n	128ea <logobj_interface_setopt+0x13a>
   12872:	4638      	mov	r0, r7
   12874:	f005 ff4a 	bl	1870c <interface_socket_from_handle_get>
   12878:	2800      	cmp	r0, #0
   1287a:	d04f      	beq.n	1291c <logobj_interface_setopt+0x16c>
   1287c:	6843      	ldr	r3, [r0, #4]
   1287e:	2b00      	cmp	r3, #0
   12880:	d04c      	beq.n	1291c <logobj_interface_setopt+0x16c>
   12882:	2200      	movs	r2, #0
   12884:	461d      	mov	r5, r3
   12886:	6042      	str	r2, [r0, #4]
   12888:	e02f      	b.n	128ea <logobj_interface_setopt+0x13a>
   1288a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1288c:	9400      	str	r4, [sp, #0]
   1288e:	f005 ff65 	bl	1875c <interface_socket_setopt>
   12892:	4605      	mov	r5, r0
   12894:	4628      	mov	r0, r5
   12896:	b005      	add	sp, #20
   12898:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1289a:	2100      	movs	r1, #0
   1289c:	a803      	add	r0, sp, #12
   1289e:	7835      	ldrb	r5, [r6, #0]
   128a0:	f7ff fd0e 	bl	122c0 <rpc_logobj_client_request_alloc>
   128a4:	bb48      	cbnz	r0, 128fa <logobj_interface_setopt+0x14a>
   128a6:	2d01      	cmp	r5, #1
   128a8:	bf08      	it	eq
   128aa:	4b26      	ldreq	r3, [pc, #152]	; (12944 <logobj_interface_setopt+0x194>)
   128ac:	f04f 0204 	mov.w	r2, #4
   128b0:	bf08      	it	eq
   128b2:	701d      	strbeq	r5, [r3, #0]
   128b4:	2300      	movs	r3, #0
   128b6:	9803      	ldr	r0, [sp, #12]
   128b8:	f247 0101 	movw	r1, #28673	; 0x7001
   128bc:	7243      	strb	r3, [r0, #9]
   128be:	60c5      	str	r5, [r0, #12]
   128c0:	7283      	strb	r3, [r0, #10]
   128c2:	72c3      	strb	r3, [r0, #11]
   128c4:	7202      	strb	r2, [r0, #8]
   128c6:	6823      	ldr	r3, [r4, #0]
   128c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   128cc:	6023      	str	r3, [r4, #0]
   128ce:	f7ff fd0f 	bl	122f0 <rpc_logobj_client_request_send>
   128d2:	4606      	mov	r6, r0
   128d4:	b9a0      	cbnz	r0, 12900 <logobj_interface_setopt+0x150>
   128d6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   128da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   128de:	4611      	mov	r1, r2
   128e0:	4638      	mov	r0, r7
   128e2:	f005 fea7 	bl	18634 <interface_socket_wait>
   128e6:	4605      	mov	r5, r0
   128e8:	b180      	cbz	r0, 1290c <logobj_interface_setopt+0x15c>
   128ea:	6823      	ldr	r3, [r4, #0]
   128ec:	e778      	b.n	127e0 <logobj_interface_setopt+0x30>
   128ee:	202a      	movs	r0, #42	; 0x2a
   128f0:	f7fe fd8e 	bl	11410 <bsd_os_errno_set>
   128f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   128f8:	e77e      	b.n	127f8 <logobj_interface_setopt+0x48>
   128fa:	6823      	ldr	r3, [r4, #0]
   128fc:	250c      	movs	r5, #12
   128fe:	e76f      	b.n	127e0 <logobj_interface_setopt+0x30>
   12900:	9803      	ldr	r0, [sp, #12]
   12902:	f7ff fd0b 	bl	1231c <rpc_logobj_client_message_free>
   12906:	2505      	movs	r5, #5
   12908:	6823      	ldr	r3, [r4, #0]
   1290a:	e769      	b.n	127e0 <logobj_interface_setopt+0x30>
   1290c:	4638      	mov	r0, r7
   1290e:	f005 fefd 	bl	1870c <interface_socket_from_handle_get>
   12912:	b140      	cbz	r0, 12926 <logobj_interface_setopt+0x176>
   12914:	6845      	ldr	r5, [r0, #4]
   12916:	b135      	cbz	r5, 12926 <logobj_interface_setopt+0x176>
   12918:	6046      	str	r6, [r0, #4]
   1291a:	e7e6      	b.n	128ea <logobj_interface_setopt+0x13a>
   1291c:	4631      	mov	r1, r6
   1291e:	2204      	movs	r2, #4
   12920:	4809      	ldr	r0, [pc, #36]	; (12948 <logobj_interface_setopt+0x198>)
   12922:	f00a fbc2 	bl	1d0aa <memcpy>
   12926:	6823      	ldr	r3, [r4, #0]
   12928:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1292c:	6023      	str	r3, [r4, #0]
   1292e:	6823      	ldr	r3, [r4, #0]
   12930:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   12934:	6023      	str	r3, [r4, #0]
   12936:	e75f      	b.n	127f8 <logobj_interface_setopt+0x48>
   12938:	2009      	movs	r0, #9
   1293a:	f7fe fd69 	bl	11410 <bsd_os_errno_set>
   1293e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12942:	e759      	b.n	127f8 <logobj_interface_setopt+0x48>
   12944:	20026476 	.word	0x20026476
   12948:	200204a4 	.word	0x200204a4

0001294c <logobj_interface_getopt>:
   1294c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1294e:	2901      	cmp	r1, #1
   12950:	b083      	sub	sp, #12
   12952:	9e08      	ldr	r6, [sp, #32]
   12954:	d030      	beq.n	129b8 <logobj_interface_getopt+0x6c>
   12956:	461f      	mov	r7, r3
   12958:	f240 2305 	movw	r3, #517	; 0x205
   1295c:	4299      	cmp	r1, r3
   1295e:	d134      	bne.n	129ca <logobj_interface_getopt+0x7e>
   12960:	4615      	mov	r5, r2
   12962:	f005 fed3 	bl	1870c <interface_socket_from_handle_get>
   12966:	2800      	cmp	r0, #0
   12968:	d037      	beq.n	129da <logobj_interface_getopt+0x8e>
   1296a:	2d01      	cmp	r5, #1
   1296c:	d015      	beq.n	1299a <logobj_interface_getopt+0x4e>
   1296e:	2d02      	cmp	r5, #2
   12970:	d10b      	bne.n	1298a <logobj_interface_getopt+0x3e>
   12972:	b387      	cbz	r7, 129d6 <logobj_interface_getopt+0x8a>
   12974:	6833      	ldr	r3, [r6, #0]
   12976:	b373      	cbz	r3, 129d6 <logobj_interface_getopt+0x8a>
   12978:	2300      	movs	r3, #0
   1297a:	2201      	movs	r2, #1
   1297c:	4618      	mov	r0, r3
   1297e:	491a      	ldr	r1, [pc, #104]	; (129e8 <logobj_interface_getopt+0x9c>)
   12980:	7809      	ldrb	r1, [r1, #0]
   12982:	7039      	strb	r1, [r7, #0]
   12984:	6032      	str	r2, [r6, #0]
   12986:	b003      	add	sp, #12
   12988:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1298a:	2009      	movs	r0, #9
   1298c:	f7fe fd40 	bl	11410 <bsd_os_errno_set>
   12990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12994:	4618      	mov	r0, r3
   12996:	b003      	add	sp, #12
   12998:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1299a:	b1e7      	cbz	r7, 129d6 <logobj_interface_getopt+0x8a>
   1299c:	6833      	ldr	r3, [r6, #0]
   1299e:	2b03      	cmp	r3, #3
   129a0:	d919      	bls.n	129d6 <logobj_interface_getopt+0x8a>
   129a2:	4638      	mov	r0, r7
   129a4:	2204      	movs	r2, #4
   129a6:	4911      	ldr	r1, [pc, #68]	; (129ec <logobj_interface_getopt+0xa0>)
   129a8:	f00a fb7f 	bl	1d0aa <memcpy>
   129ac:	2300      	movs	r3, #0
   129ae:	2204      	movs	r2, #4
   129b0:	4618      	mov	r0, r3
   129b2:	6032      	str	r2, [r6, #0]
   129b4:	b003      	add	sp, #12
   129b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   129b8:	9600      	str	r6, [sp, #0]
   129ba:	f005 ff05 	bl	187c8 <interface_socket_getopt>
   129be:	4603      	mov	r3, r0
   129c0:	2800      	cmp	r0, #0
   129c2:	d1e3      	bne.n	1298c <logobj_interface_getopt+0x40>
   129c4:	4618      	mov	r0, r3
   129c6:	b003      	add	sp, #12
   129c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   129ca:	202a      	movs	r0, #42	; 0x2a
   129cc:	f7fe fd20 	bl	11410 <bsd_os_errno_set>
   129d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   129d4:	e7de      	b.n	12994 <logobj_interface_getopt+0x48>
   129d6:	2016      	movs	r0, #22
   129d8:	e7d8      	b.n	1298c <logobj_interface_getopt+0x40>
   129da:	2009      	movs	r0, #9
   129dc:	f7fe fd18 	bl	11410 <bsd_os_errno_set>
   129e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   129e4:	e7d6      	b.n	12994 <logobj_interface_getopt+0x48>
   129e6:	bf00      	nop
   129e8:	20026477 	.word	0x20026477
   129ec:	200204a4 	.word	0x200204a4

000129f0 <logobj_interface_close>:
   129f0:	b510      	push	{r4, lr}
   129f2:	4604      	mov	r4, r0
   129f4:	f005 fe8a 	bl	1870c <interface_socket_from_handle_get>
   129f8:	b138      	cbz	r0, 12a0a <logobj_interface_close+0x1a>
   129fa:	4620      	mov	r0, r4
   129fc:	f005 fdcc 	bl	18598 <interface_socket_free>
   12a00:	2300      	movs	r3, #0
   12a02:	4a05      	ldr	r2, [pc, #20]	; (12a18 <logobj_interface_close+0x28>)
   12a04:	4618      	mov	r0, r3
   12a06:	6013      	str	r3, [r2, #0]
   12a08:	bd10      	pop	{r4, pc}
   12a0a:	2009      	movs	r0, #9
   12a0c:	f7fe fd00 	bl	11410 <bsd_os_errno_set>
   12a10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12a14:	bd10      	pop	{r4, pc}
   12a16:	bf00      	nop
   12a18:	200204a8 	.word	0x200204a8

00012a1c <packet_free_cb>:
   12a1c:	6800      	ldr	r0, [r0, #0]
   12a1e:	f004 ba31 	b.w	16e84 <rpc_at_client_data_free>
   12a22:	bf00      	nop

00012a24 <at_interface_write>:
   12a24:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a26:	b083      	sub	sp, #12
   12a28:	460f      	mov	r7, r1
   12a2a:	4615      	mov	r5, r2
   12a2c:	4606      	mov	r6, r0
   12a2e:	f005 fe6d 	bl	1870c <interface_socket_from_handle_get>
   12a32:	2800      	cmp	r0, #0
   12a34:	d047      	beq.n	12ac6 <at_interface_write+0xa2>
   12a36:	6803      	ldr	r3, [r0, #0]
   12a38:	4604      	mov	r4, r0
   12a3a:	039b      	lsls	r3, r3, #14
   12a3c:	d543      	bpl.n	12ac6 <at_interface_write+0xa2>
   12a3e:	6803      	ldr	r3, [r0, #0]
   12a40:	4629      	mov	r1, r5
   12a42:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   12a46:	6003      	str	r3, [r0, #0]
   12a48:	6803      	ldr	r3, [r0, #0]
   12a4a:	a801      	add	r0, sp, #4
   12a4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   12a50:	6023      	str	r3, [r4, #0]
   12a52:	f004 f9ed 	bl	16e30 <rpc_at_client_request_alloc>
   12a56:	bba0      	cbnz	r0, 12ac2 <at_interface_write+0x9e>
   12a58:	2204      	movs	r2, #4
   12a5a:	9b01      	ldr	r3, [sp, #4]
   12a5c:	721a      	strb	r2, [r3, #8]
   12a5e:	7258      	strb	r0, [r3, #9]
   12a60:	7298      	strb	r0, [r3, #10]
   12a62:	72d8      	strb	r0, [r3, #11]
   12a64:	60de      	str	r6, [r3, #12]
   12a66:	b985      	cbnz	r5, 12a8a <at_interface_write+0x66>
   12a68:	4618      	mov	r0, r3
   12a6a:	2101      	movs	r1, #1
   12a6c:	f004 f9f4 	bl	16e58 <rpc_at_client_request_send>
   12a70:	b9d0      	cbnz	r0, 12aa8 <at_interface_write+0x84>
   12a72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   12a76:	4630      	mov	r0, r6
   12a78:	4611      	mov	r1, r2
   12a7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12a7e:	f005 fdd9 	bl	18634 <interface_socket_wait>
   12a82:	b9a8      	cbnz	r0, 12ab0 <at_interface_write+0x8c>
   12a84:	4628      	mov	r0, r5
   12a86:	b003      	add	sp, #12
   12a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12a8a:	4639      	mov	r1, r7
   12a8c:	6818      	ldr	r0, [r3, #0]
   12a8e:	462a      	mov	r2, r5
   12a90:	f00a fb0b 	bl	1d0aa <memcpy>
   12a94:	2101      	movs	r1, #1
   12a96:	9801      	ldr	r0, [sp, #4]
   12a98:	f004 f9de 	bl	16e58 <rpc_at_client_request_send>
   12a9c:	2800      	cmp	r0, #0
   12a9e:	d0e8      	beq.n	12a72 <at_interface_write+0x4e>
   12aa0:	9b01      	ldr	r3, [sp, #4]
   12aa2:	6818      	ldr	r0, [r3, #0]
   12aa4:	f004 f9ee 	bl	16e84 <rpc_at_client_data_free>
   12aa8:	9801      	ldr	r0, [sp, #4]
   12aaa:	f004 f9e3 	bl	16e74 <rpc_at_client_message_free>
   12aae:	2023      	movs	r0, #35	; 0x23
   12ab0:	6823      	ldr	r3, [r4, #0]
   12ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12ab6:	6023      	str	r3, [r4, #0]
   12ab8:	f7fe fcaa 	bl	11410 <bsd_os_errno_set>
   12abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12ac0:	e7e1      	b.n	12a86 <at_interface_write+0x62>
   12ac2:	200c      	movs	r0, #12
   12ac4:	e7f4      	b.n	12ab0 <at_interface_write+0x8c>
   12ac6:	2016      	movs	r0, #22
   12ac8:	e7f6      	b.n	12ab8 <at_interface_write+0x94>
   12aca:	bf00      	nop

00012acc <at_interface_init>:
   12acc:	f004 b9aa 	b.w	16e24 <rpc_at_client_init>

00012ad0 <at_interface_open>:
   12ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12ad4:	2500      	movs	r5, #0
   12ad6:	b082      	sub	sp, #8
   12ad8:	ab02      	add	r3, sp, #8
   12ada:	f843 5d08 	str.w	r5, [r3, #-8]!
   12ade:	4680      	mov	r8, r0
   12ae0:	460f      	mov	r7, r1
   12ae2:	4618      	mov	r0, r3
   12ae4:	4616      	mov	r6, r2
   12ae6:	2102      	movs	r1, #2
   12ae8:	4a1d      	ldr	r2, [pc, #116]	; (12b60 <at_interface_open+0x90>)
   12aea:	f005 fcff 	bl	184ec <interface_socket_allocate>
   12aee:	9b00      	ldr	r3, [sp, #0]
   12af0:	4604      	mov	r4, r0
   12af2:	b30b      	cbz	r3, 12b38 <at_interface_open+0x68>
   12af4:	e9c3 8703 	strd	r8, r7, [r3, #12]
   12af8:	615e      	str	r6, [r3, #20]
   12afa:	4629      	mov	r1, r5
   12afc:	a801      	add	r0, sp, #4
   12afe:	f004 f997 	bl	16e30 <rpc_at_client_request_alloc>
   12b02:	b9e8      	cbnz	r0, 12b40 <at_interface_open+0x70>
   12b04:	2204      	movs	r2, #4
   12b06:	9b01      	ldr	r3, [sp, #4]
   12b08:	2105      	movs	r1, #5
   12b0a:	7258      	strb	r0, [r3, #9]
   12b0c:	7298      	strb	r0, [r3, #10]
   12b0e:	72d8      	strb	r0, [r3, #11]
   12b10:	721a      	strb	r2, [r3, #8]
   12b12:	60dc      	str	r4, [r3, #12]
   12b14:	4618      	mov	r0, r3
   12b16:	f004 f99f 	bl	16e58 <rpc_at_client_request_send>
   12b1a:	b9d8      	cbnz	r0, 12b54 <at_interface_open+0x84>
   12b1c:	2202      	movs	r2, #2
   12b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12b22:	4611      	mov	r1, r2
   12b24:	4620      	mov	r0, r4
   12b26:	f005 fd85 	bl	18634 <interface_socket_wait>
   12b2a:	4605      	mov	r5, r0
   12b2c:	b948      	cbnz	r0, 12b42 <at_interface_open+0x72>
   12b2e:	9a00      	ldr	r2, [sp, #0]
   12b30:	6813      	ldr	r3, [r2, #0]
   12b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12b36:	6013      	str	r3, [r2, #0]
   12b38:	4620      	mov	r0, r4
   12b3a:	b002      	add	sp, #8
   12b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12b40:	250c      	movs	r5, #12
   12b42:	4620      	mov	r0, r4
   12b44:	f005 fd28 	bl	18598 <interface_socket_free>
   12b48:	4628      	mov	r0, r5
   12b4a:	f7fe fc61 	bl	11410 <bsd_os_errno_set>
   12b4e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12b52:	e7f1      	b.n	12b38 <at_interface_open+0x68>
   12b54:	9801      	ldr	r0, [sp, #4]
   12b56:	f004 f98d 	bl	16e74 <rpc_at_client_message_free>
   12b5a:	2523      	movs	r5, #35	; 0x23
   12b5c:	e7f1      	b.n	12b42 <at_interface_open+0x72>
   12b5e:	bf00      	nop
   12b60:	00012a1d 	.word	0x00012a1d

00012b64 <at_interface_close>:
   12b64:	b5f0      	push	{r4, r5, r6, r7, lr}
   12b66:	b083      	sub	sp, #12
   12b68:	4606      	mov	r6, r0
   12b6a:	f005 fdcf 	bl	1870c <interface_socket_from_handle_get>
   12b6e:	2800      	cmp	r0, #0
   12b70:	d03d      	beq.n	12bee <at_interface_close+0x8a>
   12b72:	230d      	movs	r3, #13
   12b74:	6807      	ldr	r7, [r0, #0]
   12b76:	6003      	str	r3, [r0, #0]
   12b78:	6803      	ldr	r3, [r0, #0]
   12b7a:	4604      	mov	r4, r0
   12b7c:	039b      	lsls	r3, r3, #14
   12b7e:	d41f      	bmi.n	12bc0 <at_interface_close+0x5c>
   12b80:	2100      	movs	r1, #0
   12b82:	a801      	add	r0, sp, #4
   12b84:	f004 f954 	bl	16e30 <rpc_at_client_request_alloc>
   12b88:	bb20      	cbnz	r0, 12bd4 <at_interface_close+0x70>
   12b8a:	2204      	movs	r2, #4
   12b8c:	9b01      	ldr	r3, [sp, #4]
   12b8e:	2106      	movs	r1, #6
   12b90:	7258      	strb	r0, [r3, #9]
   12b92:	7298      	strb	r0, [r3, #10]
   12b94:	72d8      	strb	r0, [r3, #11]
   12b96:	721a      	strb	r2, [r3, #8]
   12b98:	60de      	str	r6, [r3, #12]
   12b9a:	4618      	mov	r0, r3
   12b9c:	f004 f95c 	bl	16e58 <rpc_at_client_request_send>
   12ba0:	b9d0      	cbnz	r0, 12bd8 <at_interface_close+0x74>
   12ba2:	220e      	movs	r2, #14
   12ba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12ba8:	4611      	mov	r1, r2
   12baa:	4630      	mov	r0, r6
   12bac:	f005 fd42 	bl	18634 <interface_socket_wait>
   12bb0:	4605      	mov	r5, r0
   12bb2:	b9a8      	cbnz	r0, 12be0 <at_interface_close+0x7c>
   12bb4:	4630      	mov	r0, r6
   12bb6:	f005 fcef 	bl	18598 <interface_socket_free>
   12bba:	4628      	mov	r0, r5
   12bbc:	b003      	add	sp, #12
   12bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12bc0:	6803      	ldr	r3, [r0, #0]
   12bc2:	2100      	movs	r1, #0
   12bc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   12bc8:	6003      	str	r3, [r0, #0]
   12bca:	a801      	add	r0, sp, #4
   12bcc:	f004 f930 	bl	16e30 <rpc_at_client_request_alloc>
   12bd0:	2800      	cmp	r0, #0
   12bd2:	d0da      	beq.n	12b8a <at_interface_close+0x26>
   12bd4:	250c      	movs	r5, #12
   12bd6:	e003      	b.n	12be0 <at_interface_close+0x7c>
   12bd8:	9801      	ldr	r0, [sp, #4]
   12bda:	f004 f94b 	bl	16e74 <rpc_at_client_message_free>
   12bde:	2523      	movs	r5, #35	; 0x23
   12be0:	6027      	str	r7, [r4, #0]
   12be2:	4628      	mov	r0, r5
   12be4:	f7fe fc14 	bl	11410 <bsd_os_errno_set>
   12be8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12bec:	e7e5      	b.n	12bba <at_interface_close+0x56>
   12bee:	2516      	movs	r5, #22
   12bf0:	e7f7      	b.n	12be2 <at_interface_close+0x7e>
   12bf2:	bf00      	nop

00012bf4 <at_interface_read>:
   12bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12bf8:	b084      	sub	sp, #16
   12bfa:	4688      	mov	r8, r1
   12bfc:	4615      	mov	r5, r2
   12bfe:	461e      	mov	r6, r3
   12c00:	4607      	mov	r7, r0
   12c02:	f005 fd83 	bl	1870c <interface_socket_from_handle_get>
   12c06:	2800      	cmp	r0, #0
   12c08:	d049      	beq.n	12c9e <at_interface_read+0xaa>
   12c0a:	2300      	movs	r3, #0
   12c0c:	e9cd 8500 	strd	r8, r5, [sp]
   12c10:	f016 0502 	ands.w	r5, r6, #2
   12c14:	4604      	mov	r4, r0
   12c16:	e9cd 3302 	strd	r3, r3, [sp, #8]
   12c1a:	d00e      	beq.n	12c3a <at_interface_read+0x46>
   12c1c:	e01e      	b.n	12c5c <at_interface_read+0x68>
   12c1e:	2d00      	cmp	r5, #0
   12c20:	d133      	bne.n	12c8a <at_interface_read+0x96>
   12c22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   12c26:	6a23      	ldr	r3, [r4, #32]
   12c28:	4611      	mov	r1, r2
   12c2a:	2b00      	cmp	r3, #0
   12c2c:	bf08      	it	eq
   12c2e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   12c32:	4638      	mov	r0, r7
   12c34:	f005 fcfe 	bl	18634 <interface_socket_wait>
   12c38:	4605      	mov	r5, r0
   12c3a:	6823      	ldr	r3, [r4, #0]
   12c3c:	69e0      	ldr	r0, [r4, #28]
   12c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   12c42:	6023      	str	r3, [r4, #0]
   12c44:	6803      	ldr	r3, [r0, #0]
   12c46:	4632      	mov	r2, r6
   12c48:	689b      	ldr	r3, [r3, #8]
   12c4a:	4669      	mov	r1, sp
   12c4c:	4798      	blx	r3
   12c4e:	f1b0 0800 	subs.w	r8, r0, #0
   12c52:	dbe4      	blt.n	12c1e <at_interface_read+0x2a>
   12c54:	4640      	mov	r0, r8
   12c56:	b004      	add	sp, #16
   12c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12c5c:	6803      	ldr	r3, [r0, #0]
   12c5e:	69c0      	ldr	r0, [r0, #28]
   12c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   12c64:	6023      	str	r3, [r4, #0]
   12c66:	6803      	ldr	r3, [r0, #0]
   12c68:	4632      	mov	r2, r6
   12c6a:	689b      	ldr	r3, [r3, #8]
   12c6c:	4669      	mov	r1, sp
   12c6e:	4798      	blx	r3
   12c70:	f1b0 0800 	subs.w	r8, r0, #0
   12c74:	daee      	bge.n	12c54 <at_interface_read+0x60>
   12c76:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   12c7a:	d1eb      	bne.n	12c54 <at_interface_read+0x60>
   12c7c:	2023      	movs	r0, #35	; 0x23
   12c7e:	f7fe fbc7 	bl	11410 <bsd_os_errno_set>
   12c82:	4640      	mov	r0, r8
   12c84:	b004      	add	sp, #16
   12c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12c8a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   12c8e:	d1e1      	bne.n	12c54 <at_interface_read+0x60>
   12c90:	4628      	mov	r0, r5
   12c92:	f7fe fbbd 	bl	11410 <bsd_os_errno_set>
   12c96:	4640      	mov	r0, r8
   12c98:	b004      	add	sp, #16
   12c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12c9e:	2016      	movs	r0, #22
   12ca0:	f7fe fbb6 	bl	11410 <bsd_os_errno_set>
   12ca4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   12ca8:	e7d4      	b.n	12c54 <at_interface_read+0x60>
   12caa:	bf00      	nop

00012cac <at_interface_getopt>:
   12cac:	f005 bd8c 	b.w	187c8 <interface_socket_getopt>

00012cb0 <at_interface_setopt>:
   12cb0:	f005 bd54 	b.w	1875c <interface_socket_setopt>

00012cb4 <rpc_at_event_handler>:
   12cb4:	b570      	push	{r4, r5, r6, lr}
   12cb6:	4606      	mov	r6, r0
   12cb8:	b084      	sub	sp, #16
   12cba:	68c0      	ldr	r0, [r0, #12]
   12cbc:	460d      	mov	r5, r1
   12cbe:	f005 fd25 	bl	1870c <interface_socket_from_handle_get>
   12cc2:	4604      	mov	r4, r0
   12cc4:	b348      	cbz	r0, 12d1a <rpc_at_event_handler+0x66>
   12cc6:	6803      	ldr	r3, [r0, #0]
   12cc8:	b29b      	uxth	r3, r3
   12cca:	2b01      	cmp	r3, #1
   12ccc:	d01f      	beq.n	12d0e <rpc_at_event_handler+0x5a>
   12cce:	6803      	ldr	r3, [r0, #0]
   12cd0:	b29b      	uxth	r3, r3
   12cd2:	2b0d      	cmp	r3, #13
   12cd4:	d029      	beq.n	12d2a <rpc_at_event_handler+0x76>
   12cd6:	6803      	ldr	r3, [r0, #0]
   12cd8:	b29b      	uxth	r3, r3
   12cda:	2b02      	cmp	r3, #2
   12cdc:	d02d      	beq.n	12d3a <rpc_at_event_handler+0x86>
   12cde:	3d03      	subs	r5, #3
   12ce0:	2d01      	cmp	r5, #1
   12ce2:	d817      	bhi.n	12d14 <rpc_at_event_handler+0x60>
   12ce4:	2500      	movs	r5, #0
   12ce6:	6873      	ldr	r3, [r6, #4]
   12ce8:	6832      	ldr	r2, [r6, #0]
   12cea:	e9cd 5502 	strd	r5, r5, [sp, #8]
   12cee:	e9cd 2300 	strd	r2, r3, [sp]
   12cf2:	69e0      	ldr	r0, [r4, #28]
   12cf4:	4669      	mov	r1, sp
   12cf6:	6803      	ldr	r3, [r0, #0]
   12cf8:	685b      	ldr	r3, [r3, #4]
   12cfa:	4798      	blx	r3
   12cfc:	3001      	adds	r0, #1
   12cfe:	d019      	beq.n	12d34 <rpc_at_event_handler+0x80>
   12d00:	4628      	mov	r0, r5
   12d02:	6823      	ldr	r3, [r4, #0]
   12d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   12d08:	6023      	str	r3, [r4, #0]
   12d0a:	b004      	add	sp, #16
   12d0c:	bd70      	pop	{r4, r5, r6, pc}
   12d0e:	2d02      	cmp	r5, #2
   12d10:	d1e5      	bne.n	12cde <rpc_at_event_handler+0x2a>
   12d12:	6005      	str	r5, [r0, #0]
   12d14:	2000      	movs	r0, #0
   12d16:	b004      	add	sp, #16
   12d18:	bd70      	pop	{r4, r5, r6, pc}
   12d1a:	6830      	ldr	r0, [r6, #0]
   12d1c:	2800      	cmp	r0, #0
   12d1e:	d0f9      	beq.n	12d14 <rpc_at_event_handler+0x60>
   12d20:	f004 f8b0 	bl	16e84 <rpc_at_client_data_free>
   12d24:	4620      	mov	r0, r4
   12d26:	b004      	add	sp, #16
   12d28:	bd70      	pop	{r4, r5, r6, pc}
   12d2a:	2d02      	cmp	r5, #2
   12d2c:	d1d7      	bne.n	12cde <rpc_at_event_handler+0x2a>
   12d2e:	230e      	movs	r3, #14
   12d30:	6003      	str	r3, [r0, #0]
   12d32:	e7ef      	b.n	12d14 <rpc_at_event_handler+0x60>
   12d34:	2002      	movs	r0, #2
   12d36:	b004      	add	sp, #16
   12d38:	bd70      	pop	{r4, r5, r6, pc}
   12d3a:	6803      	ldr	r3, [r0, #0]
   12d3c:	029b      	lsls	r3, r3, #10
   12d3e:	d5ce      	bpl.n	12cde <rpc_at_event_handler+0x2a>
   12d40:	2d02      	cmp	r5, #2
   12d42:	d1cc      	bne.n	12cde <rpc_at_event_handler+0x2a>
   12d44:	6803      	ldr	r3, [r0, #0]
   12d46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   12d4a:	6003      	str	r3, [r0, #0]
   12d4c:	6803      	ldr	r3, [r0, #0]
   12d4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12d52:	6003      	str	r3, [r0, #0]
   12d54:	e7de      	b.n	12d14 <rpc_at_event_handler+0x60>
   12d56:	bf00      	nop

00012d58 <dfu_client_event_handler>:
   12d58:	f850 1b08 	ldr.w	r1, [r0], #8
   12d5c:	0c09      	lsrs	r1, r1, #16
   12d5e:	f001 b891 	b.w	13e84 <rpc_dfu_event_handler>
   12d62:	bf00      	nop

00012d64 <rpc_dfu_client_init>:
   12d64:	4801      	ldr	r0, [pc, #4]	; (12d6c <rpc_dfu_client_init+0x8>)
   12d66:	f005 be2f 	b.w	189c8 <rpc_client_register>
   12d6a:	bf00      	nop
   12d6c:	0001f054 	.word	0x0001f054

00012d70 <rpc_dfu_client_request_alloc>:
   12d70:	2300      	movs	r3, #0
   12d72:	b510      	push	{r4, lr}
   12d74:	b082      	sub	sp, #8
   12d76:	9301      	str	r3, [sp, #4]
   12d78:	b158      	cbz	r0, 12d92 <rpc_dfu_client_request_alloc+0x22>
   12d7a:	4604      	mov	r4, r0
   12d7c:	aa01      	add	r2, sp, #4
   12d7e:	2006      	movs	r0, #6
   12d80:	f006 f85a 	bl	18e38 <rpc_message_alloc>
   12d84:	b918      	cbnz	r0, 12d8e <rpc_dfu_client_request_alloc+0x1e>
   12d86:	9b01      	ldr	r3, [sp, #4]
   12d88:	b10b      	cbz	r3, 12d8e <rpc_dfu_client_request_alloc+0x1e>
   12d8a:	3308      	adds	r3, #8
   12d8c:	6023      	str	r3, [r4, #0]
   12d8e:	b002      	add	sp, #8
   12d90:	bd10      	pop	{r4, pc}
   12d92:	2007      	movs	r0, #7
   12d94:	b002      	add	sp, #8
   12d96:	bd10      	pop	{r4, pc}

00012d98 <rpc_dfu_client_request_send>:
   12d98:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   12d9c:	d10b      	bne.n	12db6 <rpc_dfu_client_request_send+0x1e>
   12d9e:	b160      	cbz	r0, 12dba <rpc_dfu_client_request_send+0x22>
   12da0:	4603      	mov	r3, r0
   12da2:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   12da6:	2006      	movs	r0, #6
   12da8:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   12dac:	f843 1d08 	str.w	r1, [r3, #-8]!
   12db0:	4619      	mov	r1, r3
   12db2:	f006 b829 	b.w	18e08 <rpc_message_send>
   12db6:	200f      	movs	r0, #15
   12db8:	4770      	bx	lr
   12dba:	2007      	movs	r0, #7
   12dbc:	4770      	bx	lr
   12dbe:	bf00      	nop

00012dc0 <rpc_dfu_client_message_free>:
   12dc0:	b120      	cbz	r0, 12dcc <rpc_dfu_client_message_free+0xc>
   12dc2:	f1a0 0108 	sub.w	r1, r0, #8
   12dc6:	2006      	movs	r0, #6
   12dc8:	f006 b868 	b.w	18e9c <rpc_message_free>
   12dcc:	2007      	movs	r0, #7
   12dce:	4770      	bx	lr

00012dd0 <rpc_dfu_client_data_free>:
   12dd0:	b118      	cbz	r0, 12dda <rpc_dfu_client_data_free+0xa>
   12dd2:	4601      	mov	r1, r0
   12dd4:	2006      	movs	r0, #6
   12dd6:	f006 b973 	b.w	190c0 <rpc_message_data_free>
   12dda:	2007      	movs	r0, #7
   12ddc:	4770      	bx	lr
   12dde:	bf00      	nop

00012de0 <mem_free>:
   12de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12de4:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 12eb4 <mem_free+0xd4>
   12de8:	b083      	sub	sp, #12
   12dea:	9000      	str	r0, [sp, #0]
   12dec:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   12df0:	f8dc 3008 	ldr.w	r3, [ip, #8]
   12df4:	b12b      	cbz	r3, 12e02 <mem_free+0x22>
   12df6:	f8dc 2000 	ldr.w	r2, [ip]
   12dfa:	9c00      	ldr	r4, [sp, #0]
   12dfc:	7810      	ldrb	r0, [r2, #0]
   12dfe:	42a0      	cmp	r0, r4
   12e00:	d006      	beq.n	12e10 <mem_free+0x30>
   12e02:	f10c 0c0c 	add.w	ip, ip, #12
   12e06:	45e3      	cmp	fp, ip
   12e08:	d1f2      	bne.n	12df0 <mem_free+0x10>
   12e0a:	b003      	add	sp, #12
   12e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e10:	f8dc a004 	ldr.w	sl, [ip, #4]
   12e14:	eb03 080a 	add.w	r8, r3, sl
   12e18:	45c2      	cmp	sl, r8
   12e1a:	d2f2      	bcs.n	12e02 <mem_free+0x22>
   12e1c:	6853      	ldr	r3, [r2, #4]
   12e1e:	f8cd c004 	str.w	ip, [sp, #4]
   12e22:	46d6      	mov	lr, sl
   12e24:	469c      	mov	ip, r3
   12e26:	f8d2 9010 	ldr.w	r9, [r2, #16]
   12e2a:	8997      	ldrh	r7, [r2, #12]
   12e2c:	ebae 000a 	sub.w	r0, lr, sl
   12e30:	b3df      	cbz	r7, 12eaa <mem_free+0xca>
   12e32:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   12e36:	4290      	cmp	r0, r2
   12e38:	d31c      	bcc.n	12e74 <mem_free+0x94>
   12e3a:	4665      	mov	r5, ip
   12e3c:	2400      	movs	r4, #0
   12e3e:	f109 0304 	add.w	r3, r9, #4
   12e42:	e003      	b.n	12e4c <mem_free+0x6c>
   12e44:	885a      	ldrh	r2, [r3, #2]
   12e46:	3304      	adds	r3, #4
   12e48:	4282      	cmp	r2, r0
   12e4a:	d815      	bhi.n	12e78 <mem_free+0x98>
   12e4c:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   12e50:	3401      	adds	r4, #1
   12e52:	42a7      	cmp	r7, r4
   12e54:	fb02 5506 	mla	r5, r2, r6, r5
   12e58:	eba0 0002 	sub.w	r0, r0, r2
   12e5c:	461e      	mov	r6, r3
   12e5e:	d1f1      	bne.n	12e44 <mem_free+0x64>
   12e60:	2000      	movs	r0, #0
   12e62:	4281      	cmp	r1, r0
   12e64:	d00d      	beq.n	12e82 <mem_free+0xa2>
   12e66:	f10e 0e01 	add.w	lr, lr, #1
   12e6a:	45f0      	cmp	r8, lr
   12e6c:	d1de      	bne.n	12e2c <mem_free+0x4c>
   12e6e:	f8dd c004 	ldr.w	ip, [sp, #4]
   12e72:	e7c6      	b.n	12e02 <mem_free+0x22>
   12e74:	4665      	mov	r5, ip
   12e76:	464e      	mov	r6, r9
   12e78:	8833      	ldrh	r3, [r6, #0]
   12e7a:	fb00 5003 	mla	r0, r0, r3, r5
   12e7e:	4281      	cmp	r1, r0
   12e80:	d1f1      	bne.n	12e66 <mem_free+0x86>
   12e82:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   12e86:	f8dd c004 	ldr.w	ip, [sp, #4]
   12e8a:	d0ba      	beq.n	12e02 <mem_free+0x22>
   12e8c:	2301      	movs	r3, #1
   12e8e:	4a08      	ldr	r2, [pc, #32]	; (12eb0 <mem_free+0xd0>)
   12e90:	ea4f 115e 	mov.w	r1, lr, lsr #5
   12e94:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   12e98:	f00e 0e1f 	and.w	lr, lr, #31
   12e9c:	fa03 fe0e 	lsl.w	lr, r3, lr
   12ea0:	ea4e 0000 	orr.w	r0, lr, r0
   12ea4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   12ea8:	e7af      	b.n	12e0a <mem_free+0x2a>
   12eaa:	4638      	mov	r0, r7
   12eac:	e7d9      	b.n	12e62 <mem_free+0x82>
   12eae:	bf00      	nop
   12eb0:	200204ac 	.word	0x200204ac
   12eb4:	200204f0 	.word	0x200204f0

00012eb8 <mem_alloc.constprop.5>:
   12eb8:	2800      	cmp	r0, #0
   12eba:	d050      	beq.n	12f5e <mem_alloc.constprop.5+0xa6>
   12ebc:	4b6d      	ldr	r3, [pc, #436]	; (13074 <mem_alloc.constprop.5+0x1bc>)
   12ebe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   12ec2:	4290      	cmp	r0, r2
   12ec4:	d84b      	bhi.n	12f5e <mem_alloc.constprop.5+0xa6>
   12ec6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12eca:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   12ece:	b083      	sub	sp, #12
   12ed0:	f1bb 0f00 	cmp.w	fp, #0
   12ed4:	d054      	beq.n	12f80 <mem_alloc.constprop.5+0xc8>
   12ed6:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   12eda:	4691      	mov	r9, r2
   12edc:	2600      	movs	r6, #0
   12ede:	f04f 0812 	mov.w	r8, #18
   12ee2:	4f65      	ldr	r7, [pc, #404]	; (13078 <mem_alloc.constprop.5+0x1c0>)
   12ee4:	9201      	str	r2, [sp, #4]
   12ee6:	f10b 0e11 	add.w	lr, fp, #17
   12eea:	eb06 0209 	add.w	r2, r6, r9
   12eee:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   12ef2:	3201      	adds	r2, #1
   12ef4:	0852      	lsrs	r2, r2, #1
   12ef6:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   12efa:	f102 0112 	add.w	r1, r2, #18
   12efe:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   12f02:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   12f06:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   12f0a:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   12f0e:	f8dc c004 	ldr.w	ip, [ip, #4]
   12f12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   12f16:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   12f1a:	f8da a010 	ldr.w	sl, [sl, #16]
   12f1e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   12f22:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   12f26:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   12f2a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   12f2e:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   12f32:	6849      	ldr	r1, [r1, #4]
   12f34:	692d      	ldr	r5, [r5, #16]
   12f36:	6924      	ldr	r4, [r4, #16]
   12f38:	f8dc c004 	ldr.w	ip, [ip, #4]
   12f3c:	4550      	cmp	r0, sl
   12f3e:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   12f42:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   12f46:	d915      	bls.n	12f74 <mem_alloc.constprop.5+0xbc>
   12f48:	4288      	cmp	r0, r1
   12f4a:	d211      	bcs.n	12f70 <mem_alloc.constprop.5+0xb8>
   12f4c:	42a8      	cmp	r0, r5
   12f4e:	d908      	bls.n	12f62 <mem_alloc.constprop.5+0xaa>
   12f50:	1c56      	adds	r6, r2, #1
   12f52:	45b1      	cmp	r9, r6
   12f54:	f0c0 8087 	bcc.w	13066 <mem_alloc.constprop.5+0x1ae>
   12f58:	f102 0813 	add.w	r8, r2, #19
   12f5c:	e7c5      	b.n	12eea <mem_alloc.constprop.5+0x32>
   12f5e:	2000      	movs	r0, #0
   12f60:	4770      	bx	lr
   12f62:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   12f66:	454e      	cmp	r6, r9
   12f68:	d87d      	bhi.n	13066 <mem_alloc.constprop.5+0x1ae>
   12f6a:	f102 0e11 	add.w	lr, r2, #17
   12f6e:	e7bc      	b.n	12eea <mem_alloc.constprop.5+0x32>
   12f70:	f109 0601 	add.w	r6, r9, #1
   12f74:	45b3      	cmp	fp, r6
   12f76:	d007      	beq.n	12f88 <mem_alloc.constprop.5+0xd0>
   12f78:	2e10      	cmp	r6, #16
   12f7a:	d001      	beq.n	12f80 <mem_alloc.constprop.5+0xc8>
   12f7c:	45b3      	cmp	fp, r6
   12f7e:	d808      	bhi.n	12f92 <mem_alloc.constprop.5+0xda>
   12f80:	2000      	movs	r0, #0
   12f82:	b003      	add	sp, #12
   12f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f88:	9a01      	ldr	r2, [sp, #4]
   12f8a:	2a10      	cmp	r2, #16
   12f8c:	bf18      	it	ne
   12f8e:	4616      	movne	r6, r2
   12f90:	d0f6      	beq.n	12f80 <mem_alloc.constprop.5+0xc8>
   12f92:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 1307c <mem_alloc.constprop.5+0x1c4>
   12f96:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   12f9a:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   12f9e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   12fa2:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   12fa6:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   12faa:	f8d2 e004 	ldr.w	lr, [r2, #4]
   12fae:	691d      	ldr	r5, [r3, #16]
   12fb0:	2c00      	cmp	r4, #0
   12fb2:	d056      	beq.n	13062 <mem_alloc.constprop.5+0x1aa>
   12fb4:	462a      	mov	r2, r5
   12fb6:	4670      	mov	r0, lr
   12fb8:	00a4      	lsls	r4, r4, #2
   12fba:	eb05 0904 	add.w	r9, r5, r4
   12fbe:	8851      	ldrh	r1, [r2, #2]
   12fc0:	3204      	adds	r2, #4
   12fc2:	4591      	cmp	r9, r2
   12fc4:	4408      	add	r0, r1
   12fc6:	d1fa      	bne.n	12fbe <mem_alloc.constprop.5+0x106>
   12fc8:	1929      	adds	r1, r5, r4
   12fca:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   12fce:	4482      	add	sl, r0
   12fd0:	4582      	cmp	sl, r0
   12fd2:	d918      	bls.n	13006 <mem_alloc.constprop.5+0x14e>
   12fd4:	0941      	lsrs	r1, r0, #5
   12fd6:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   12fda:	f000 041f 	and.w	r4, r0, #31
   12fde:	fa22 f904 	lsr.w	r9, r2, r4
   12fe2:	f019 0f01 	tst.w	r9, #1
   12fe6:	d007      	beq.n	12ff8 <mem_alloc.constprop.5+0x140>
   12fe8:	e013      	b.n	13012 <mem_alloc.constprop.5+0x15a>
   12fea:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   12fee:	fa22 f904 	lsr.w	r9, r2, r4
   12ff2:	f019 0f01 	tst.w	r9, #1
   12ff6:	d10c      	bne.n	13012 <mem_alloc.constprop.5+0x15a>
   12ff8:	3001      	adds	r0, #1
   12ffa:	4582      	cmp	sl, r0
   12ffc:	ea4f 1150 	mov.w	r1, r0, lsr #5
   13000:	f000 041f 	and.w	r4, r0, #31
   13004:	d1f1      	bne.n	12fea <mem_alloc.constprop.5+0x132>
   13006:	3601      	adds	r6, #1
   13008:	455e      	cmp	r6, fp
   1300a:	f108 0808 	add.w	r8, r8, #8
   1300e:	d3c4      	bcc.n	12f9a <mem_alloc.constprop.5+0xe2>
   13010:	e7b6      	b.n	12f80 <mem_alloc.constprop.5+0xc8>
   13012:	2601      	movs	r6, #1
   13014:	fa06 f404 	lsl.w	r4, r6, r4
   13018:	899e      	ldrh	r6, [r3, #12]
   1301a:	ea22 0204 	bic.w	r2, r2, r4
   1301e:	eba0 000e 	sub.w	r0, r0, lr
   13022:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   13026:	685c      	ldr	r4, [r3, #4]
   13028:	2e00      	cmp	r6, #0
   1302a:	d0a9      	beq.n	12f80 <mem_alloc.constprop.5+0xc8>
   1302c:	886a      	ldrh	r2, [r5, #2]
   1302e:	4282      	cmp	r2, r0
   13030:	d811      	bhi.n	13056 <mem_alloc.constprop.5+0x19e>
   13032:	2100      	movs	r1, #0
   13034:	1d2b      	adds	r3, r5, #4
   13036:	e003      	b.n	13040 <mem_alloc.constprop.5+0x188>
   13038:	885a      	ldrh	r2, [r3, #2]
   1303a:	3304      	adds	r3, #4
   1303c:	4282      	cmp	r2, r0
   1303e:	d80a      	bhi.n	13056 <mem_alloc.constprop.5+0x19e>
   13040:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   13044:	3101      	adds	r1, #1
   13046:	428e      	cmp	r6, r1
   13048:	fb02 4405 	mla	r4, r2, r5, r4
   1304c:	eba0 0002 	sub.w	r0, r0, r2
   13050:	461d      	mov	r5, r3
   13052:	d1f1      	bne.n	13038 <mem_alloc.constprop.5+0x180>
   13054:	e794      	b.n	12f80 <mem_alloc.constprop.5+0xc8>
   13056:	882b      	ldrh	r3, [r5, #0]
   13058:	fb00 4003 	mla	r0, r0, r3, r4
   1305c:	b003      	add	sp, #12
   1305e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13062:	4670      	mov	r0, lr
   13064:	e7b0      	b.n	12fc8 <mem_alloc.constprop.5+0x110>
   13066:	f1bb 0f10 	cmp.w	fp, #16
   1306a:	bf08      	it	eq
   1306c:	260f      	moveq	r6, #15
   1306e:	d090      	beq.n	12f92 <mem_alloc.constprop.5+0xda>
   13070:	e786      	b.n	12f80 <mem_alloc.constprop.5+0xc8>
   13072:	bf00      	nop
   13074:	2002052c 	.word	0x2002052c
   13078:	200204f0 	.word	0x200204f0
   1307c:	200204ac 	.word	0x200204ac

00013080 <mem_alloc.constprop.4>:
   13080:	2800      	cmp	r0, #0
   13082:	d04c      	beq.n	1311e <mem_alloc.constprop.4+0x9e>
   13084:	4b6b      	ldr	r3, [pc, #428]	; (13234 <mem_alloc.constprop.4+0x1b4>)
   13086:	681a      	ldr	r2, [r3, #0]
   13088:	4290      	cmp	r0, r2
   1308a:	d848      	bhi.n	1311e <mem_alloc.constprop.4+0x9e>
   1308c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13090:	685f      	ldr	r7, [r3, #4]
   13092:	b083      	sub	sp, #12
   13094:	9700      	str	r7, [sp, #0]
   13096:	2f00      	cmp	r7, #0
   13098:	d051      	beq.n	1313e <mem_alloc.constprop.4+0xbe>
   1309a:	1e7a      	subs	r2, r7, #1
   1309c:	4696      	mov	lr, r2
   1309e:	2100      	movs	r1, #0
   130a0:	f04f 0c01 	mov.w	ip, #1
   130a4:	4c64      	ldr	r4, [pc, #400]	; (13238 <mem_alloc.constprop.4+0x1b8>)
   130a6:	9201      	str	r2, [sp, #4]
   130a8:	eb01 020e 	add.w	r2, r1, lr
   130ac:	3201      	adds	r2, #1
   130ae:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   130b2:	0852      	lsrs	r2, r2, #1
   130b4:	f102 0801 	add.w	r8, r2, #1
   130b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   130bc:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   130c0:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   130c4:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   130c8:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   130cc:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   130d0:	f8d9 9004 	ldr.w	r9, [r9, #4]
   130d4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   130d8:	f8da a010 	ldr.w	sl, [sl, #16]
   130dc:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   130e0:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   130e4:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   130e8:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   130ec:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   130f0:	6936      	ldr	r6, [r6, #16]
   130f2:	f8db b004 	ldr.w	fp, [fp, #4]
   130f6:	692d      	ldr	r5, [r5, #16]
   130f8:	f8d9 9004 	ldr.w	r9, [r9, #4]
   130fc:	4550      	cmp	r0, sl
   130fe:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   13102:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   13106:	d913      	bls.n	13130 <mem_alloc.constprop.4+0xb0>
   13108:	42a8      	cmp	r0, r5
   1310a:	d210      	bcs.n	1312e <mem_alloc.constprop.4+0xae>
   1310c:	42b0      	cmp	r0, r6
   1310e:	d908      	bls.n	13122 <mem_alloc.constprop.4+0xa2>
   13110:	45c6      	cmp	lr, r8
   13112:	4641      	mov	r1, r8
   13114:	f0c0 8087 	bcc.w	13226 <mem_alloc.constprop.4+0x1a6>
   13118:	f108 0c01 	add.w	ip, r8, #1
   1311c:	e7c4      	b.n	130a8 <mem_alloc.constprop.4+0x28>
   1311e:	2000      	movs	r0, #0
   13120:	4770      	bx	lr
   13122:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
   13126:	4571      	cmp	r1, lr
   13128:	d87d      	bhi.n	13226 <mem_alloc.constprop.4+0x1a6>
   1312a:	4617      	mov	r7, r2
   1312c:	e7bc      	b.n	130a8 <mem_alloc.constprop.4+0x28>
   1312e:	4639      	mov	r1, r7
   13130:	9a00      	ldr	r2, [sp, #0]
   13132:	428a      	cmp	r2, r1
   13134:	d007      	beq.n	13146 <mem_alloc.constprop.4+0xc6>
   13136:	2910      	cmp	r1, #16
   13138:	d001      	beq.n	1313e <mem_alloc.constprop.4+0xbe>
   1313a:	428a      	cmp	r2, r1
   1313c:	d808      	bhi.n	13150 <mem_alloc.constprop.4+0xd0>
   1313e:	2000      	movs	r0, #0
   13140:	b003      	add	sp, #12
   13142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13146:	9a01      	ldr	r2, [sp, #4]
   13148:	2a10      	cmp	r2, #16
   1314a:	bf18      	it	ne
   1314c:	4611      	movne	r1, r2
   1314e:	d0f6      	beq.n	1313e <mem_alloc.constprop.4+0xbe>
   13150:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 1323c <mem_alloc.constprop.4+0x1bc>
   13154:	f8dd 9000 	ldr.w	r9, [sp]
   13158:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   1315c:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   13160:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   13164:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   13168:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1316c:	f8d2 e004 	ldr.w	lr, [r2, #4]
   13170:	691f      	ldr	r7, [r3, #16]
   13172:	2e00      	cmp	r6, #0
   13174:	d055      	beq.n	13222 <mem_alloc.constprop.4+0x1a2>
   13176:	463a      	mov	r2, r7
   13178:	4670      	mov	r0, lr
   1317a:	00b6      	lsls	r6, r6, #2
   1317c:	eb07 0a06 	add.w	sl, r7, r6
   13180:	8855      	ldrh	r5, [r2, #2]
   13182:	3204      	adds	r2, #4
   13184:	4592      	cmp	sl, r2
   13186:	4428      	add	r0, r5
   13188:	d1fa      	bne.n	13180 <mem_alloc.constprop.4+0x100>
   1318a:	19bd      	adds	r5, r7, r6
   1318c:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   13190:	4483      	add	fp, r0
   13192:	4583      	cmp	fp, r0
   13194:	d918      	bls.n	131c8 <mem_alloc.constprop.4+0x148>
   13196:	0945      	lsrs	r5, r0, #5
   13198:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   1319c:	f000 061f 	and.w	r6, r0, #31
   131a0:	fa22 fa06 	lsr.w	sl, r2, r6
   131a4:	f01a 0f01 	tst.w	sl, #1
   131a8:	d007      	beq.n	131ba <mem_alloc.constprop.4+0x13a>
   131aa:	e013      	b.n	131d4 <mem_alloc.constprop.4+0x154>
   131ac:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   131b0:	fa22 fa06 	lsr.w	sl, r2, r6
   131b4:	f01a 0f01 	tst.w	sl, #1
   131b8:	d10c      	bne.n	131d4 <mem_alloc.constprop.4+0x154>
   131ba:	3001      	adds	r0, #1
   131bc:	4583      	cmp	fp, r0
   131be:	ea4f 1550 	mov.w	r5, r0, lsr #5
   131c2:	f000 061f 	and.w	r6, r0, #31
   131c6:	d1f1      	bne.n	131ac <mem_alloc.constprop.4+0x12c>
   131c8:	3101      	adds	r1, #1
   131ca:	4549      	cmp	r1, r9
   131cc:	f108 0808 	add.w	r8, r8, #8
   131d0:	d3c4      	bcc.n	1315c <mem_alloc.constprop.4+0xdc>
   131d2:	e7b4      	b.n	1313e <mem_alloc.constprop.4+0xbe>
   131d4:	2101      	movs	r1, #1
   131d6:	40b1      	lsls	r1, r6
   131d8:	899e      	ldrh	r6, [r3, #12]
   131da:	ea22 0201 	bic.w	r2, r2, r1
   131de:	eba0 000e 	sub.w	r0, r0, lr
   131e2:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   131e6:	685c      	ldr	r4, [r3, #4]
   131e8:	2e00      	cmp	r6, #0
   131ea:	d0a8      	beq.n	1313e <mem_alloc.constprop.4+0xbe>
   131ec:	887a      	ldrh	r2, [r7, #2]
   131ee:	4282      	cmp	r2, r0
   131f0:	d811      	bhi.n	13216 <mem_alloc.constprop.4+0x196>
   131f2:	2100      	movs	r1, #0
   131f4:	1d3b      	adds	r3, r7, #4
   131f6:	e003      	b.n	13200 <mem_alloc.constprop.4+0x180>
   131f8:	885a      	ldrh	r2, [r3, #2]
   131fa:	3304      	adds	r3, #4
   131fc:	4282      	cmp	r2, r0
   131fe:	d80a      	bhi.n	13216 <mem_alloc.constprop.4+0x196>
   13200:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   13204:	3101      	adds	r1, #1
   13206:	428e      	cmp	r6, r1
   13208:	eba0 0002 	sub.w	r0, r0, r2
   1320c:	fb02 4405 	mla	r4, r2, r5, r4
   13210:	461f      	mov	r7, r3
   13212:	d1f1      	bne.n	131f8 <mem_alloc.constprop.4+0x178>
   13214:	e793      	b.n	1313e <mem_alloc.constprop.4+0xbe>
   13216:	883b      	ldrh	r3, [r7, #0]
   13218:	fb00 4003 	mla	r0, r0, r3, r4
   1321c:	b003      	add	sp, #12
   1321e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13222:	4670      	mov	r0, lr
   13224:	e7b1      	b.n	1318a <mem_alloc.constprop.4+0x10a>
   13226:	9a00      	ldr	r2, [sp, #0]
   13228:	2a10      	cmp	r2, #16
   1322a:	bf08      	it	eq
   1322c:	210f      	moveq	r1, #15
   1322e:	d08f      	beq.n	13150 <mem_alloc.constprop.4+0xd0>
   13230:	e785      	b.n	1313e <mem_alloc.constprop.4+0xbe>
   13232:	bf00      	nop
   13234:	2002052c 	.word	0x2002052c
   13238:	200204f0 	.word	0x200204f0
   1323c:	200204ac 	.word	0x200204ac

00013240 <nrf_mem_init>:
   13240:	b570      	push	{r4, r5, r6, lr}
   13242:	2200      	movs	r2, #0
   13244:	2501      	movs	r5, #1
   13246:	4833      	ldr	r0, [pc, #204]	; (13314 <nrf_mem_init+0xd4>)
   13248:	0951      	lsrs	r1, r2, #5
   1324a:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   1324e:	f002 031f 	and.w	r3, r2, #31
   13252:	fa05 f303 	lsl.w	r3, r5, r3
   13256:	3201      	adds	r2, #1
   13258:	4323      	orrs	r3, r4
   1325a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   1325e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   13262:	d1f1      	bne.n	13248 <nrf_mem_init+0x8>
   13264:	2400      	movs	r4, #0
   13266:	4b2c      	ldr	r3, [pc, #176]	; (13318 <nrf_mem_init+0xd8>)
   13268:	4621      	mov	r1, r4
   1326a:	223c      	movs	r2, #60	; 0x3c
   1326c:	482b      	ldr	r0, [pc, #172]	; (1331c <nrf_mem_init+0xdc>)
   1326e:	601c      	str	r4, [r3, #0]
   13270:	f009 ff45 	bl	1d0fe <memset>
   13274:	2110      	movs	r1, #16
   13276:	2205      	movs	r2, #5
   13278:	4b29      	ldr	r3, [pc, #164]	; (13320 <nrf_mem_init+0xe0>)
   1327a:	4e2a      	ldr	r6, [pc, #168]	; (13324 <nrf_mem_init+0xe4>)
   1327c:	e9c3 4400 	strd	r4, r4, [r3]
   13280:	60d9      	str	r1, [r3, #12]
   13282:	6159      	str	r1, [r3, #20]
   13284:	61d9      	str	r1, [r3, #28]
   13286:	6259      	str	r1, [r3, #36]	; 0x24
   13288:	62d9      	str	r1, [r3, #44]	; 0x2c
   1328a:	6359      	str	r1, [r3, #52]	; 0x34
   1328c:	63d9      	str	r1, [r3, #60]	; 0x3c
   1328e:	6459      	str	r1, [r3, #68]	; 0x44
   13290:	64d9      	str	r1, [r3, #76]	; 0x4c
   13292:	6559      	str	r1, [r3, #84]	; 0x54
   13294:	65d9      	str	r1, [r3, #92]	; 0x5c
   13296:	6659      	str	r1, [r3, #100]	; 0x64
   13298:	66d9      	str	r1, [r3, #108]	; 0x6c
   1329a:	6759      	str	r1, [r3, #116]	; 0x74
   1329c:	67d9      	str	r1, [r3, #124]	; 0x7c
   1329e:	609a      	str	r2, [r3, #8]
   132a0:	611a      	str	r2, [r3, #16]
   132a2:	619a      	str	r2, [r3, #24]
   132a4:	621a      	str	r2, [r3, #32]
   132a6:	629a      	str	r2, [r3, #40]	; 0x28
   132a8:	631a      	str	r2, [r3, #48]	; 0x30
   132aa:	639a      	str	r2, [r3, #56]	; 0x38
   132ac:	641a      	str	r2, [r3, #64]	; 0x40
   132ae:	649a      	str	r2, [r3, #72]	; 0x48
   132b0:	651a      	str	r2, [r3, #80]	; 0x50
   132b2:	659a      	str	r2, [r3, #88]	; 0x58
   132b4:	661a      	str	r2, [r3, #96]	; 0x60
   132b6:	669a      	str	r2, [r3, #104]	; 0x68
   132b8:	671a      	str	r2, [r3, #112]	; 0x70
   132ba:	679a      	str	r2, [r3, #120]	; 0x78
   132bc:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   132c0:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   132c4:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   132c8:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   132cc:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   132d0:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   132d4:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   132d8:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   132dc:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   132e0:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   132e4:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   132e8:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   132ec:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   132f0:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   132f4:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   132f8:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   132fc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   13300:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   13304:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   13308:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1330c:	4620      	mov	r0, r4
   1330e:	7035      	strb	r5, [r6, #0]
   13310:	bd70      	pop	{r4, r5, r6, pc}
   13312:	bf00      	nop
   13314:	200204ac 	.word	0x200204ac
   13318:	200204ec 	.word	0x200204ec
   1331c:	200204f0 	.word	0x200204f0
   13320:	2002052c 	.word	0x2002052c
   13324:	20026478 	.word	0x20026478

00013328 <nrf_mem_register>:
   13328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1332c:	4b87      	ldr	r3, [pc, #540]	; (1354c <nrf_mem_register+0x224>)
   1332e:	b087      	sub	sp, #28
   13330:	781b      	ldrb	r3, [r3, #0]
   13332:	2b00      	cmp	r3, #0
   13334:	f000 808c 	beq.w	13450 <nrf_mem_register+0x128>
   13338:	b328      	cbz	r0, 13386 <nrf_mem_register+0x5e>
   1333a:	b321      	cbz	r1, 13386 <nrf_mem_register+0x5e>
   1333c:	780b      	ldrb	r3, [r1, #0]
   1333e:	f8df 8218 	ldr.w	r8, [pc, #536]	; 13558 <nrf_mem_register+0x230>
   13342:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   13346:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   1334a:	685b      	ldr	r3, [r3, #4]
   1334c:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   13350:	4463      	add	r3, ip
   13352:	2b10      	cmp	r3, #16
   13354:	d811      	bhi.n	1337a <nrf_mem_register+0x52>
   13356:	f04f 0a00 	mov.w	sl, #0
   1335a:	4689      	mov	r9, r1
   1335c:	4b7c      	ldr	r3, [pc, #496]	; (13550 <nrf_mem_register+0x228>)
   1335e:	4f7d      	ldr	r7, [pc, #500]	; (13554 <nrf_mem_register+0x22c>)
   13360:	681b      	ldr	r3, [r3, #0]
   13362:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   13366:	9300      	str	r3, [sp, #0]
   13368:	68b9      	ldr	r1, [r7, #8]
   1336a:	b191      	cbz	r1, 13392 <nrf_mem_register+0x6a>
   1336c:	f10a 0a01 	add.w	sl, sl, #1
   13370:	f1ba 0f05 	cmp.w	sl, #5
   13374:	f107 070c 	add.w	r7, r7, #12
   13378:	d1f6      	bne.n	13368 <nrf_mem_register+0x40>
   1337a:	f248 1b07 	movw	fp, #33031	; 0x8107
   1337e:	4658      	mov	r0, fp
   13380:	b007      	add	sp, #28
   13382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13386:	f248 1b0e 	movw	fp, #33038	; 0x810e
   1338a:	4658      	mov	r0, fp
   1338c:	b007      	add	sp, #28
   1338e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13392:	f1bc 0f00 	cmp.w	ip, #0
   13396:	d061      	beq.n	1345c <nrf_mem_register+0x134>
   13398:	460d      	mov	r5, r1
   1339a:	460c      	mov	r4, r1
   1339c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   133a0:	eb0e 0b03 	add.w	fp, lr, r3
   133a4:	885a      	ldrh	r2, [r3, #2]
   133a6:	f833 6b04 	ldrh.w	r6, [r3], #4
   133aa:	4415      	add	r5, r2
   133ac:	459b      	cmp	fp, r3
   133ae:	fb02 4406 	mla	r4, r2, r6, r4
   133b2:	d1f7      	bne.n	133a4 <nrf_mem_register+0x7c>
   133b4:	f8d9 3008 	ldr.w	r3, [r9, #8]
   133b8:	42a3      	cmp	r3, r4
   133ba:	d3d7      	bcc.n	1336c <nrf_mem_register+0x44>
   133bc:	9b00      	ldr	r3, [sp, #0]
   133be:	442b      	add	r3, r5
   133c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   133c4:	d2d2      	bcs.n	1336c <nrf_mem_register+0x44>
   133c6:	4c63      	ldr	r4, [pc, #396]	; (13554 <nrf_mem_register+0x22c>)
   133c8:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   133cc:	0092      	lsls	r2, r2, #2
   133ce:	f8c0 a000 	str.w	sl, [r0]
   133d2:	18a0      	adds	r0, r4, r2
   133d4:	f844 9002 	str.w	r9, [r4, r2]
   133d8:	9a00      	ldr	r2, [sp, #0]
   133da:	468b      	mov	fp, r1
   133dc:	e9c0 2501 	strd	r2, r5, [r0, #4]
   133e0:	f899 2001 	ldrb.w	r2, [r9, #1]
   133e4:	485a      	ldr	r0, [pc, #360]	; (13550 <nrf_mem_register+0x228>)
   133e6:	2a01      	cmp	r2, #1
   133e8:	6003      	str	r3, [r0, #0]
   133ea:	d0c8      	beq.n	1337e <nrf_mem_register+0x56>
   133ec:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   133f0:	2b00      	cmp	r3, #0
   133f2:	d0c4      	beq.n	1337e <nrf_mem_register+0x56>
   133f4:	2500      	movs	r5, #0
   133f6:	f8cd 9004 	str.w	r9, [sp, #4]
   133fa:	f8cd a00c 	str.w	sl, [sp, #12]
   133fe:	f8cd b014 	str.w	fp, [sp, #20]
   13402:	9b01      	ldr	r3, [sp, #4]
   13404:	781f      	ldrb	r7, [r3, #0]
   13406:	691a      	ldr	r2, [r3, #16]
   13408:	013b      	lsls	r3, r7, #4
   1340a:	eb03 0907 	add.w	r9, r3, r7
   1340e:	9300      	str	r3, [sp, #0]
   13410:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   13414:	6859      	ldr	r1, [r3, #4]
   13416:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   1341a:	9102      	str	r1, [sp, #8]
   1341c:	bb39      	cbnz	r1, 1346e <nrf_mem_register+0x146>
   1341e:	9a03      	ldr	r2, [sp, #12]
   13420:	60dd      	str	r5, [r3, #12]
   13422:	609a      	str	r2, [r3, #8]
   13424:	9b00      	ldr	r3, [sp, #0]
   13426:	443b      	add	r3, r7
   13428:	461f      	mov	r7, r3
   1342a:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   1342e:	684b      	ldr	r3, [r1, #4]
   13430:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   13434:	3301      	adds	r3, #1
   13436:	4294      	cmp	r4, r2
   13438:	604b      	str	r3, [r1, #4]
   1343a:	d912      	bls.n	13462 <nrf_mem_register+0x13a>
   1343c:	9b01      	ldr	r3, [sp, #4]
   1343e:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   13442:	899b      	ldrh	r3, [r3, #12]
   13444:	3501      	adds	r5, #1
   13446:	429d      	cmp	r5, r3
   13448:	d3db      	bcc.n	13402 <nrf_mem_register+0xda>
   1344a:	f8dd b014 	ldr.w	fp, [sp, #20]
   1344e:	e796      	b.n	1337e <nrf_mem_register+0x56>
   13450:	f248 1b08 	movw	fp, #33032	; 0x8108
   13454:	4658      	mov	r0, fp
   13456:	b007      	add	sp, #28
   13458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1345c:	9b00      	ldr	r3, [sp, #0]
   1345e:	4665      	mov	r5, ip
   13460:	e7ae      	b.n	133c0 <nrf_mem_register+0x98>
   13462:	9b01      	ldr	r3, [sp, #4]
   13464:	3501      	adds	r5, #1
   13466:	899b      	ldrh	r3, [r3, #12]
   13468:	42ab      	cmp	r3, r5
   1346a:	d8ca      	bhi.n	13402 <nrf_mem_register+0xda>
   1346c:	e7ed      	b.n	1344a <nrf_mem_register+0x122>
   1346e:	2600      	movs	r6, #0
   13470:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
   13474:	9504      	str	r5, [sp, #16]
   13476:	eb06 000a 	add.w	r0, r6, sl
   1347a:	eb09 0206 	add.w	r2, r9, r6
   1347e:	3201      	adds	r2, #1
   13480:	3001      	adds	r0, #1
   13482:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   13486:	0840      	lsrs	r0, r0, #1
   13488:	4d32      	ldr	r5, [pc, #200]	; (13554 <nrf_mem_register+0x22c>)
   1348a:	eb09 0100 	add.w	r1, r9, r0
   1348e:	eb09 030a 	add.w	r3, r9, sl
   13492:	3101      	adds	r1, #1
   13494:	3301      	adds	r3, #1
   13496:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   1349a:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   1349e:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   134a2:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   134a6:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   134aa:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   134ae:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   134b2:	f8db b010 	ldr.w	fp, [fp, #16]
   134b6:	6852      	ldr	r2, [r2, #4]
   134b8:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   134bc:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   134c0:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   134c4:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   134c8:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   134cc:	f8de e010 	ldr.w	lr, [lr, #16]
   134d0:	6849      	ldr	r1, [r1, #4]
   134d2:	f8dc c010 	ldr.w	ip, [ip, #16]
   134d6:	685b      	ldr	r3, [r3, #4]
   134d8:	4294      	cmp	r4, r2
   134da:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   134de:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   134e2:	d92d      	bls.n	13540 <nrf_mem_register+0x218>
   134e4:	429c      	cmp	r4, r3
   134e6:	d22d      	bcs.n	13544 <nrf_mem_register+0x21c>
   134e8:	428c      	cmp	r4, r1
   134ea:	d924      	bls.n	13536 <nrf_mem_register+0x20e>
   134ec:	1c46      	adds	r6, r0, #1
   134ee:	45b2      	cmp	sl, r6
   134f0:	d2c1      	bcs.n	13476 <nrf_mem_register+0x14e>
   134f2:	2610      	movs	r6, #16
   134f4:	9d04      	ldr	r5, [sp, #16]
   134f6:	9a02      	ldr	r2, [sp, #8]
   134f8:	42b2      	cmp	r2, r6
   134fa:	d911      	bls.n	13520 <nrf_mem_register+0x1f8>
   134fc:	9b00      	ldr	r3, [sp, #0]
   134fe:	443b      	add	r3, r7
   13500:	441a      	add	r2, r3
   13502:	4433      	add	r3, r6
   13504:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   13508:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   1350c:	2208      	movs	r2, #8
   1350e:	4651      	mov	r1, sl
   13510:	eb0a 0002 	add.w	r0, sl, r2
   13514:	f1aa 0a08 	sub.w	sl, sl, #8
   13518:	f009 fdc7 	bl	1d0aa <memcpy>
   1351c:	45d1      	cmp	r9, sl
   1351e:	d1f5      	bne.n	1350c <nrf_mem_register+0x1e4>
   13520:	9b00      	ldr	r3, [sp, #0]
   13522:	9903      	ldr	r1, [sp, #12]
   13524:	443b      	add	r3, r7
   13526:	4433      	add	r3, r6
   13528:	3301      	adds	r3, #1
   1352a:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1352e:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   13532:	6055      	str	r5, [r2, #4]
   13534:	e776      	b.n	13424 <nrf_mem_register+0xfc>
   13536:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
   1353a:	4556      	cmp	r6, sl
   1353c:	d99b      	bls.n	13476 <nrf_mem_register+0x14e>
   1353e:	e7d8      	b.n	134f2 <nrf_mem_register+0x1ca>
   13540:	9d04      	ldr	r5, [sp, #16]
   13542:	e7d8      	b.n	134f6 <nrf_mem_register+0x1ce>
   13544:	9d04      	ldr	r5, [sp, #16]
   13546:	f10a 0601 	add.w	r6, sl, #1
   1354a:	e7d4      	b.n	134f6 <nrf_mem_register+0x1ce>
   1354c:	20026478 	.word	0x20026478
   13550:	200204ec 	.word	0x200204ec
   13554:	200204f0 	.word	0x200204f0
   13558:	2002052c 	.word	0x2002052c

0001355c <nrf_malloc>:
   1355c:	4b03      	ldr	r3, [pc, #12]	; (1356c <nrf_malloc+0x10>)
   1355e:	781b      	ldrb	r3, [r3, #0]
   13560:	b10b      	cbz	r3, 13566 <nrf_malloc+0xa>
   13562:	f7ff bd8d 	b.w	13080 <mem_alloc.constprop.4>
   13566:	4618      	mov	r0, r3
   13568:	4770      	bx	lr
   1356a:	bf00      	nop
   1356c:	20026478 	.word	0x20026478

00013570 <nrf_free>:
   13570:	4b04      	ldr	r3, [pc, #16]	; (13584 <nrf_free+0x14>)
   13572:	781b      	ldrb	r3, [r3, #0]
   13574:	b123      	cbz	r3, 13580 <nrf_free+0x10>
   13576:	b118      	cbz	r0, 13580 <nrf_free+0x10>
   13578:	4601      	mov	r1, r0
   1357a:	2000      	movs	r0, #0
   1357c:	f7ff bc30 	b.w	12de0 <mem_free>
   13580:	4770      	bx	lr
   13582:	bf00      	nop
   13584:	20026478 	.word	0x20026478

00013588 <nrf_shared_malloc>:
   13588:	4b03      	ldr	r3, [pc, #12]	; (13598 <nrf_shared_malloc+0x10>)
   1358a:	781b      	ldrb	r3, [r3, #0]
   1358c:	b10b      	cbz	r3, 13592 <nrf_shared_malloc+0xa>
   1358e:	f7ff bc93 	b.w	12eb8 <mem_alloc.constprop.5>
   13592:	4618      	mov	r0, r3
   13594:	4770      	bx	lr
   13596:	bf00      	nop
   13598:	20026478 	.word	0x20026478

0001359c <nrf_shared_free>:
   1359c:	4b04      	ldr	r3, [pc, #16]	; (135b0 <nrf_shared_free+0x14>)
   1359e:	781b      	ldrb	r3, [r3, #0]
   135a0:	b123      	cbz	r3, 135ac <nrf_shared_free+0x10>
   135a2:	b118      	cbz	r0, 135ac <nrf_shared_free+0x10>
   135a4:	4601      	mov	r1, r0
   135a6:	2001      	movs	r0, #1
   135a8:	f7ff bc1a 	b.w	12de0 <mem_free>
   135ac:	4770      	bx	lr
   135ae:	bf00      	nop
   135b0:	20026478 	.word	0x20026478

000135b4 <ip_client_event_handler>:
   135b4:	f850 1b08 	ldr.w	r1, [r0], #8
   135b8:	0c09      	lsrs	r1, r1, #16
   135ba:	f004 bd23 	b.w	18004 <rpc_ip_event_handler>
   135be:	bf00      	nop

000135c0 <rpc_ip_client_init>:
   135c0:	4801      	ldr	r0, [pc, #4]	; (135c8 <rpc_ip_client_init+0x8>)
   135c2:	f005 ba01 	b.w	189c8 <rpc_client_register>
   135c6:	bf00      	nop
   135c8:	0001f064 	.word	0x0001f064

000135cc <rpc_ip_client_request_alloc>:
   135cc:	2300      	movs	r3, #0
   135ce:	b510      	push	{r4, lr}
   135d0:	b082      	sub	sp, #8
   135d2:	9301      	str	r3, [sp, #4]
   135d4:	b158      	cbz	r0, 135ee <rpc_ip_client_request_alloc+0x22>
   135d6:	4604      	mov	r4, r0
   135d8:	aa01      	add	r2, sp, #4
   135da:	2004      	movs	r0, #4
   135dc:	f005 fc2c 	bl	18e38 <rpc_message_alloc>
   135e0:	b918      	cbnz	r0, 135ea <rpc_ip_client_request_alloc+0x1e>
   135e2:	9b01      	ldr	r3, [sp, #4]
   135e4:	b10b      	cbz	r3, 135ea <rpc_ip_client_request_alloc+0x1e>
   135e6:	3308      	adds	r3, #8
   135e8:	6023      	str	r3, [r4, #0]
   135ea:	b002      	add	sp, #8
   135ec:	bd10      	pop	{r4, pc}
   135ee:	2007      	movs	r0, #7
   135f0:	b002      	add	sp, #8
   135f2:	bd10      	pop	{r4, pc}

000135f4 <rpc_ip_client_request_send>:
   135f4:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   135f8:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   135fc:	d10b      	bne.n	13616 <rpc_ip_client_request_send+0x22>
   135fe:	b160      	cbz	r0, 1361a <rpc_ip_client_request_send+0x26>
   13600:	4603      	mov	r3, r0
   13602:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   13606:	2004      	movs	r0, #4
   13608:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1360c:	f843 1d08 	str.w	r1, [r3, #-8]!
   13610:	4619      	mov	r1, r3
   13612:	f005 bbf9 	b.w	18e08 <rpc_message_send>
   13616:	200f      	movs	r0, #15
   13618:	4770      	bx	lr
   1361a:	2007      	movs	r0, #7
   1361c:	4770      	bx	lr
   1361e:	bf00      	nop

00013620 <rpc_ip_client_message_free>:
   13620:	b120      	cbz	r0, 1362c <rpc_ip_client_message_free+0xc>
   13622:	f1a0 0108 	sub.w	r1, r0, #8
   13626:	2004      	movs	r0, #4
   13628:	f005 bc38 	b.w	18e9c <rpc_message_free>
   1362c:	2007      	movs	r0, #7
   1362e:	4770      	bx	lr

00013630 <rpc_ip_client_data_free>:
   13630:	b118      	cbz	r0, 1363a <rpc_ip_client_data_free+0xa>
   13632:	4601      	mov	r1, r0
   13634:	2004      	movs	r0, #4
   13636:	f005 bd43 	b.w	190c0 <rpc_message_data_free>
   1363a:	2007      	movs	r0, #7
   1363c:	4770      	bx	lr
   1363e:	bf00      	nop

00013640 <secure_client_socket>:
   13640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13644:	460c      	mov	r4, r1
   13646:	680b      	ldr	r3, [r1, #0]
   13648:	6989      	ldr	r1, [r1, #24]
   1364a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1364e:	6023      	str	r3, [r4, #0]
   13650:	6822      	ldr	r2, [r4, #0]
   13652:	2300      	movs	r3, #0
   13654:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
   13658:	6022      	str	r2, [r4, #0]
   1365a:	f247 0281 	movw	r2, #28801	; 0x7081
   1365e:	6827      	ldr	r7, [r4, #0]
   13660:	4606      	mov	r6, r0
   13662:	f003 fc2d 	bl	16ec0 <ip_interface_request_create>
   13666:	2800      	cmp	r0, #0
   13668:	d03b      	beq.n	136e2 <secure_client_socket+0xa2>
   1366a:	4605      	mov	r5, r0
   1366c:	4b28      	ldr	r3, [pc, #160]	; (13710 <secure_client_socket+0xd0>)
   1366e:	eb06 01c6 	add.w	r1, r6, r6, lsl #3
   13672:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   13676:	2224      	movs	r2, #36	; 0x24
   13678:	3014      	adds	r0, #20
   1367a:	f009 fd16 	bl	1d0aa <memcpy>
   1367e:	68ab      	ldr	r3, [r5, #8]
   13680:	f8df 8090 	ldr.w	r8, [pc, #144]	; 13714 <secure_client_socket+0xd4>
   13684:	3324      	adds	r3, #36	; 0x24
   13686:	60ab      	str	r3, [r5, #8]
   13688:	6823      	ldr	r3, [r4, #0]
   1368a:	4629      	mov	r1, r5
   1368c:	ea03 0308 	and.w	r3, r3, r8
   13690:	f043 030a 	orr.w	r3, r3, #10
   13694:	6023      	str	r3, [r4, #0]
   13696:	f247 0281 	movw	r2, #28801	; 0x7081
   1369a:	463b      	mov	r3, r7
   1369c:	4620      	mov	r0, r4
   1369e:	f003 fc2f 	bl	16f00 <ip_interface_request_send>
   136a2:	b960      	cbnz	r0, 136be <secure_client_socket+0x7e>
   136a4:	6823      	ldr	r3, [r4, #0]
   136a6:	00db      	lsls	r3, r3, #3
   136a8:	d40b      	bmi.n	136c2 <secure_client_socket+0x82>
   136aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   136ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
   136b2:	210b      	movs	r1, #11
   136b4:	4630      	mov	r0, r6
   136b6:	f003 fc37 	bl	16f28 <ip_interface_wait>
   136ba:	b128      	cbz	r0, 136c8 <secure_client_socket+0x88>
   136bc:	6027      	str	r7, [r4, #0]
   136be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   136c2:	2073      	movs	r0, #115	; 0x73
   136c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   136c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   136cc:	4630      	mov	r0, r6
   136ce:	4611      	mov	r1, r2
   136d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   136d4:	f003 fc28 	bl	16f28 <ip_interface_wait>
   136d8:	b130      	cbz	r0, 136e8 <secure_client_socket+0xa8>
   136da:	2873      	cmp	r0, #115	; 0x73
   136dc:	d0ef      	beq.n	136be <secure_client_socket+0x7e>
   136de:	6027      	str	r7, [r4, #0]
   136e0:	e7ed      	b.n	136be <secure_client_socket+0x7e>
   136e2:	200c      	movs	r0, #12
   136e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   136e8:	6823      	ldr	r3, [r4, #0]
   136ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   136ee:	6023      	str	r3, [r4, #0]
   136f0:	6823      	ldr	r3, [r4, #0]
   136f2:	ea03 0808 	and.w	r8, r3, r8
   136f6:	f048 030c 	orr.w	r3, r8, #12
   136fa:	6023      	str	r3, [r4, #0]
   136fc:	6823      	ldr	r3, [r4, #0]
   136fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13702:	6023      	str	r3, [r4, #0]
   13704:	6823      	ldr	r3, [r4, #0]
   13706:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1370a:	6023      	str	r3, [r4, #0]
   1370c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13710:	2002063c 	.word	0x2002063c
   13714:	ffff0000 	.word	0xffff0000

00013718 <tls_interface_init>:
   13718:	2000      	movs	r0, #0
   1371a:	4770      	bx	lr

0001371c <tls_interface_open>:
   1371c:	b538      	push	{r3, r4, r5, lr}
   1371e:	f020 0308 	bic.w	r3, r0, #8
   13722:	2b02      	cmp	r3, #2
   13724:	d006      	beq.n	13734 <tls_interface_open+0x18>
   13726:	202f      	movs	r0, #47	; 0x2f
   13728:	f7fd fe72 	bl	11410 <bsd_os_errno_set>
   1372c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13730:	4628      	mov	r0, r5
   13732:	bd38      	pop	{r3, r4, r5, pc}
   13734:	4614      	mov	r4, r2
   13736:	1e4a      	subs	r2, r1, #1
   13738:	2a01      	cmp	r2, #1
   1373a:	d828      	bhi.n	1378e <tls_interface_open+0x72>
   1373c:	bb14      	cbnz	r4, 13784 <tls_interface_open+0x68>
   1373e:	2901      	cmp	r1, #1
   13740:	bf06      	itte	eq
   13742:	2301      	moveq	r3, #1
   13744:	f44f 7482 	moveq.w	r4, #260	; 0x104
   13748:	f44f 7487 	movne.w	r4, #270	; 0x10e
   1374c:	461a      	mov	r2, r3
   1374e:	f003 fc17 	bl	16f80 <ip_interface_open>
   13752:	1e05      	subs	r5, r0, #0
   13754:	db26      	blt.n	137a4 <tls_interface_open+0x88>
   13756:	4b15      	ldr	r3, [pc, #84]	; (137ac <tls_interface_open+0x90>)
   13758:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   1375c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13760:	2224      	movs	r2, #36	; 0x24
   13762:	4913      	ldr	r1, [pc, #76]	; (137b0 <tls_interface_open+0x94>)
   13764:	f009 fca1 	bl	1d0aa <memcpy>
   13768:	4628      	mov	r0, r5
   1376a:	f004 ffcf 	bl	1870c <interface_socket_from_handle_get>
   1376e:	6803      	ldr	r3, [r0, #0]
   13770:	6144      	str	r4, [r0, #20]
   13772:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   13776:	6003      	str	r3, [r0, #0]
   13778:	6803      	ldr	r3, [r0, #0]
   1377a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1377e:	6003      	str	r3, [r0, #0]
   13780:	4628      	mov	r0, r5
   13782:	bd38      	pop	{r3, r4, r5, pc}
   13784:	2901      	cmp	r1, #1
   13786:	d008      	beq.n	1379a <tls_interface_open+0x7e>
   13788:	f5b4 7f87 	cmp.w	r4, #270	; 0x10e
   1378c:	d0de      	beq.n	1374c <tls_interface_open+0x30>
   1378e:	2016      	movs	r0, #22
   13790:	f7fd fe3e 	bl	11410 <bsd_os_errno_set>
   13794:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13798:	e7ca      	b.n	13730 <tls_interface_open+0x14>
   1379a:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
   1379e:	d1f6      	bne.n	1378e <tls_interface_open+0x72>
   137a0:	460b      	mov	r3, r1
   137a2:	e7d3      	b.n	1374c <tls_interface_open+0x30>
   137a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   137a8:	e7c2      	b.n	13730 <tls_interface_open+0x14>
   137aa:	bf00      	nop
   137ac:	2002063c 	.word	0x2002063c
   137b0:	0001f074 	.word	0x0001f074

000137b4 <tls_interface_close>:
   137b4:	b510      	push	{r4, lr}
   137b6:	4604      	mov	r4, r0
   137b8:	f004 ffa8 	bl	1870c <interface_socket_from_handle_get>
   137bc:	b120      	cbz	r0, 137c8 <tls_interface_close+0x14>
   137be:	4620      	mov	r0, r4
   137c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   137c4:	f003 bc88 	b.w	170d8 <ip_interface_close>
   137c8:	2009      	movs	r0, #9
   137ca:	f7fd fe21 	bl	11410 <bsd_os_errno_set>
   137ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   137d2:	bd10      	pop	{r4, pc}

000137d4 <tls_interface_sendto>:
   137d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   137d8:	460d      	mov	r5, r1
   137da:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   137de:	4616      	mov	r6, r2
   137e0:	461f      	mov	r7, r3
   137e2:	4604      	mov	r4, r0
   137e4:	f004 ff92 	bl	1870c <interface_socket_from_handle_get>
   137e8:	2800      	cmp	r0, #0
   137ea:	d03b      	beq.n	13864 <tls_interface_sendto+0x90>
   137ec:	6803      	ldr	r3, [r0, #0]
   137ee:	b29b      	uxth	r3, r3
   137f0:	2b0c      	cmp	r3, #12
   137f2:	d039      	beq.n	13868 <tls_interface_sendto+0x94>
   137f4:	6803      	ldr	r3, [r0, #0]
   137f6:	b29b      	uxth	r3, r3
   137f8:	2b0b      	cmp	r3, #11
   137fa:	d111      	bne.n	13820 <tls_interface_sendto+0x4c>
   137fc:	4b20      	ldr	r3, [pc, #128]	; (13880 <tls_interface_sendto+0xac>)
   137fe:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   13802:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   13806:	2b02      	cmp	r3, #2
   13808:	d038      	beq.n	1387c <tls_interface_sendto+0xa8>
   1380a:	6903      	ldr	r3, [r0, #16]
   1380c:	2b01      	cmp	r3, #1
   1380e:	bf14      	ite	ne
   13810:	2039      	movne	r0, #57	; 0x39
   13812:	202a      	moveq	r0, #42	; 0x2a
   13814:	f7fd fdfc 	bl	11410 <bsd_os_errno_set>
   13818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1381c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13820:	6903      	ldr	r3, [r0, #16]
   13822:	2b01      	cmp	r3, #1
   13824:	d00b      	beq.n	1383e <tls_interface_sendto+0x6a>
   13826:	2b02      	cmp	r3, #2
   13828:	d001      	beq.n	1382e <tls_interface_sendto+0x5a>
   1382a:	2039      	movs	r0, #57	; 0x39
   1382c:	e7f2      	b.n	13814 <tls_interface_sendto+0x40>
   1382e:	6803      	ldr	r3, [r0, #0]
   13830:	b29b      	uxth	r3, r3
   13832:	2b02      	cmp	r3, #2
   13834:	d007      	beq.n	13846 <tls_interface_sendto+0x72>
   13836:	6803      	ldr	r3, [r0, #0]
   13838:	b29b      	uxth	r3, r3
   1383a:	2b04      	cmp	r3, #4
   1383c:	d003      	beq.n	13846 <tls_interface_sendto+0x72>
   1383e:	6803      	ldr	r3, [r0, #0]
   13840:	b29b      	uxth	r3, r3
   13842:	2b05      	cmp	r3, #5
   13844:	d1f1      	bne.n	1382a <tls_interface_sendto+0x56>
   13846:	4b0e      	ldr	r3, [pc, #56]	; (13880 <tls_interface_sendto+0xac>)
   13848:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1384c:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   13850:	2b02      	cmp	r3, #2
   13852:	d1ea      	bne.n	1382a <tls_interface_sendto+0x56>
   13854:	4601      	mov	r1, r0
   13856:	4620      	mov	r0, r4
   13858:	f7ff fef2 	bl	13640 <secure_client_socket>
   1385c:	2800      	cmp	r0, #0
   1385e:	d003      	beq.n	13868 <tls_interface_sendto+0x94>
   13860:	dcd8      	bgt.n	13814 <tls_interface_sendto+0x40>
   13862:	e7d9      	b.n	13818 <tls_interface_sendto+0x44>
   13864:	2009      	movs	r0, #9
   13866:	e7d5      	b.n	13814 <tls_interface_sendto+0x40>
   13868:	e9cd 8908 	strd	r8, r9, [sp, #32]
   1386c:	463b      	mov	r3, r7
   1386e:	4632      	mov	r2, r6
   13870:	4629      	mov	r1, r5
   13872:	4620      	mov	r0, r4
   13874:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13878:	f003 bc9e 	b.w	171b8 <ip_interface_sendto>
   1387c:	2023      	movs	r0, #35	; 0x23
   1387e:	e7c9      	b.n	13814 <tls_interface_sendto+0x40>
   13880:	2002063c 	.word	0x2002063c

00013884 <tls_interface_recvfrom>:
   13884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13888:	460d      	mov	r5, r1
   1388a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1388e:	4616      	mov	r6, r2
   13890:	461f      	mov	r7, r3
   13892:	4604      	mov	r4, r0
   13894:	f004 ff3a 	bl	1870c <interface_socket_from_handle_get>
   13898:	2800      	cmp	r0, #0
   1389a:	d038      	beq.n	1390e <tls_interface_recvfrom+0x8a>
   1389c:	6803      	ldr	r3, [r0, #0]
   1389e:	b29b      	uxth	r3, r3
   138a0:	2b0c      	cmp	r3, #12
   138a2:	d00f      	beq.n	138c4 <tls_interface_recvfrom+0x40>
   138a4:	6803      	ldr	r3, [r0, #0]
   138a6:	b29b      	uxth	r3, r3
   138a8:	2b0d      	cmp	r3, #13
   138aa:	d00b      	beq.n	138c4 <tls_interface_recvfrom+0x40>
   138ac:	6903      	ldr	r3, [r0, #16]
   138ae:	2b01      	cmp	r3, #1
   138b0:	d01a      	beq.n	138e8 <tls_interface_recvfrom+0x64>
   138b2:	2b02      	cmp	r3, #2
   138b4:	d010      	beq.n	138d8 <tls_interface_recvfrom+0x54>
   138b6:	2023      	movs	r0, #35	; 0x23
   138b8:	f7fd fdaa 	bl	11410 <bsd_os_errno_set>
   138bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   138c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   138c4:	e9cd 8908 	strd	r8, r9, [sp, #32]
   138c8:	463b      	mov	r3, r7
   138ca:	4632      	mov	r2, r6
   138cc:	4629      	mov	r1, r5
   138ce:	4620      	mov	r0, r4
   138d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   138d4:	f003 bdaa 	b.w	1742c <ip_interface_recvfrom>
   138d8:	6803      	ldr	r3, [r0, #0]
   138da:	b29b      	uxth	r3, r3
   138dc:	2b02      	cmp	r3, #2
   138de:	d007      	beq.n	138f0 <tls_interface_recvfrom+0x6c>
   138e0:	6803      	ldr	r3, [r0, #0]
   138e2:	b29b      	uxth	r3, r3
   138e4:	2b04      	cmp	r3, #4
   138e6:	d003      	beq.n	138f0 <tls_interface_recvfrom+0x6c>
   138e8:	6803      	ldr	r3, [r0, #0]
   138ea:	b29b      	uxth	r3, r3
   138ec:	2b05      	cmp	r3, #5
   138ee:	d1e2      	bne.n	138b6 <tls_interface_recvfrom+0x32>
   138f0:	4b08      	ldr	r3, [pc, #32]	; (13914 <tls_interface_recvfrom+0x90>)
   138f2:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   138f6:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   138fa:	2b02      	cmp	r3, #2
   138fc:	d1db      	bne.n	138b6 <tls_interface_recvfrom+0x32>
   138fe:	4601      	mov	r1, r0
   13900:	4620      	mov	r0, r4
   13902:	f7ff fe9d 	bl	13640 <secure_client_socket>
   13906:	2800      	cmp	r0, #0
   13908:	d0dc      	beq.n	138c4 <tls_interface_recvfrom+0x40>
   1390a:	dcd5      	bgt.n	138b8 <tls_interface_recvfrom+0x34>
   1390c:	e7d6      	b.n	138bc <tls_interface_recvfrom+0x38>
   1390e:	2009      	movs	r0, #9
   13910:	e7d2      	b.n	138b8 <tls_interface_recvfrom+0x34>
   13912:	bf00      	nop
   13914:	2002063c 	.word	0x2002063c

00013918 <tls_interface_bind>:
   13918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1391c:	460c      	mov	r4, r1
   1391e:	4617      	mov	r7, r2
   13920:	4606      	mov	r6, r0
   13922:	f004 fef3 	bl	1870c <interface_socket_from_handle_get>
   13926:	2800      	cmp	r0, #0
   13928:	d04c      	beq.n	139c4 <tls_interface_bind+0xac>
   1392a:	6803      	ldr	r3, [r0, #0]
   1392c:	4605      	mov	r5, r0
   1392e:	b29b      	uxth	r3, r3
   13930:	2b02      	cmp	r3, #2
   13932:	d150      	bne.n	139d6 <tls_interface_bind+0xbe>
   13934:	4621      	mov	r1, r4
   13936:	463a      	mov	r2, r7
   13938:	4630      	mov	r0, r6
   1393a:	f003 ff4d 	bl	177d8 <ip_interface_bind>
   1393e:	4604      	mov	r4, r0
   13940:	b120      	cbz	r0, 1394c <tls_interface_bind+0x34>
   13942:	2c00      	cmp	r4, #0
   13944:	dc3f      	bgt.n	139c6 <tls_interface_bind+0xae>
   13946:	4620      	mov	r0, r4
   13948:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1394c:	eb06 07c6 	add.w	r7, r6, r6, lsl #3
   13950:	f8df 8094 	ldr.w	r8, [pc, #148]	; 139e8 <tls_interface_bind+0xd0>
   13954:	00bf      	lsls	r7, r7, #2
   13956:	f818 3007 	ldrb.w	r3, [r8, r7]
   1395a:	2b01      	cmp	r3, #1
   1395c:	d1f3      	bne.n	13946 <tls_interface_bind+0x2e>
   1395e:	4603      	mov	r3, r0
   13960:	f247 0281 	movw	r2, #28801	; 0x7081
   13964:	69a9      	ldr	r1, [r5, #24]
   13966:	4630      	mov	r0, r6
   13968:	f003 faaa 	bl	16ec0 <ip_interface_request_create>
   1396c:	4681      	mov	r9, r0
   1396e:	b3b0      	cbz	r0, 139de <tls_interface_bind+0xc6>
   13970:	eb08 0107 	add.w	r1, r8, r7
   13974:	2224      	movs	r2, #36	; 0x24
   13976:	3014      	adds	r0, #20
   13978:	f009 fb97 	bl	1d0aa <memcpy>
   1397c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   13980:	4649      	mov	r1, r9
   13982:	3324      	adds	r3, #36	; 0x24
   13984:	f8c9 3008 	str.w	r3, [r9, #8]
   13988:	682a      	ldr	r2, [r5, #0]
   1398a:	2304      	movs	r3, #4
   1398c:	0c12      	lsrs	r2, r2, #16
   1398e:	0412      	lsls	r2, r2, #16
   13990:	f042 020a 	orr.w	r2, r2, #10
   13994:	602a      	str	r2, [r5, #0]
   13996:	4628      	mov	r0, r5
   13998:	f247 0281 	movw	r2, #28801	; 0x7081
   1399c:	f003 fab0 	bl	16f00 <ip_interface_request_send>
   139a0:	b9f8      	cbnz	r0, 139e2 <tls_interface_bind+0xca>
   139a2:	682b      	ldr	r3, [r5, #0]
   139a4:	00db      	lsls	r3, r3, #3
   139a6:	d418      	bmi.n	139da <tls_interface_bind+0xc2>
   139a8:	4630      	mov	r0, r6
   139aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   139ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
   139b2:	210b      	movs	r1, #11
   139b4:	f003 fab8 	bl	16f28 <ip_interface_wait>
   139b8:	2800      	cmp	r0, #0
   139ba:	d0c4      	beq.n	13946 <tls_interface_bind+0x2e>
   139bc:	2304      	movs	r3, #4
   139be:	4604      	mov	r4, r0
   139c0:	602b      	str	r3, [r5, #0]
   139c2:	e7be      	b.n	13942 <tls_interface_bind+0x2a>
   139c4:	2409      	movs	r4, #9
   139c6:	4620      	mov	r0, r4
   139c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   139cc:	f7fd fd20 	bl	11410 <bsd_os_errno_set>
   139d0:	4620      	mov	r0, r4
   139d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   139d6:	242d      	movs	r4, #45	; 0x2d
   139d8:	e7f5      	b.n	139c6 <tls_interface_bind+0xae>
   139da:	2473      	movs	r4, #115	; 0x73
   139dc:	e7f3      	b.n	139c6 <tls_interface_bind+0xae>
   139de:	240c      	movs	r4, #12
   139e0:	e7f1      	b.n	139c6 <tls_interface_bind+0xae>
   139e2:	4604      	mov	r4, r0
   139e4:	e7ad      	b.n	13942 <tls_interface_bind+0x2a>
   139e6:	bf00      	nop
   139e8:	2002063c 	.word	0x2002063c

000139ec <tls_interface_connect>:
   139ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   139ee:	460e      	mov	r6, r1
   139f0:	4617      	mov	r7, r2
   139f2:	4604      	mov	r4, r0
   139f4:	f004 fe8a 	bl	1870c <interface_socket_from_handle_get>
   139f8:	b1e8      	cbz	r0, 13a36 <tls_interface_connect+0x4a>
   139fa:	4b13      	ldr	r3, [pc, #76]	; (13a48 <tls_interface_connect+0x5c>)
   139fc:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   13a00:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   13a04:	2b02      	cmp	r3, #2
   13a06:	d11c      	bne.n	13a42 <tls_interface_connect+0x56>
   13a08:	6803      	ldr	r3, [r0, #0]
   13a0a:	4605      	mov	r5, r0
   13a0c:	b29b      	uxth	r3, r3
   13a0e:	2b02      	cmp	r3, #2
   13a10:	d003      	beq.n	13a1a <tls_interface_connect+0x2e>
   13a12:	6803      	ldr	r3, [r0, #0]
   13a14:	b29b      	uxth	r3, r3
   13a16:	2b04      	cmp	r3, #4
   13a18:	d113      	bne.n	13a42 <tls_interface_connect+0x56>
   13a1a:	463a      	mov	r2, r7
   13a1c:	4631      	mov	r1, r6
   13a1e:	4620      	mov	r0, r4
   13a20:	f003 fe30 	bl	17684 <ip_interface_connect>
   13a24:	b110      	cbz	r0, 13a2c <tls_interface_connect+0x40>
   13a26:	2800      	cmp	r0, #0
   13a28:	dc06      	bgt.n	13a38 <tls_interface_connect+0x4c>
   13a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13a2c:	4629      	mov	r1, r5
   13a2e:	4620      	mov	r0, r4
   13a30:	f7ff fe06 	bl	13640 <secure_client_socket>
   13a34:	e7f7      	b.n	13a26 <tls_interface_connect+0x3a>
   13a36:	2009      	movs	r0, #9
   13a38:	f7fd fcea 	bl	11410 <bsd_os_errno_set>
   13a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13a42:	202d      	movs	r0, #45	; 0x2d
   13a44:	e7f8      	b.n	13a38 <tls_interface_connect+0x4c>
   13a46:	bf00      	nop
   13a48:	2002063c 	.word	0x2002063c

00013a4c <tls_interface_listen>:
   13a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13a50:	460f      	mov	r7, r1
   13a52:	4606      	mov	r6, r0
   13a54:	f004 fe5a 	bl	1870c <interface_socket_from_handle_get>
   13a58:	2800      	cmp	r0, #0
   13a5a:	d06b      	beq.n	13b34 <tls_interface_listen+0xe8>
   13a5c:	6903      	ldr	r3, [r0, #16]
   13a5e:	4604      	mov	r4, r0
   13a60:	2b01      	cmp	r3, #1
   13a62:	d165      	bne.n	13b30 <tls_interface_listen+0xe4>
   13a64:	6803      	ldr	r3, [r0, #0]
   13a66:	b29b      	uxth	r3, r3
   13a68:	2b04      	cmp	r3, #4
   13a6a:	d056      	beq.n	13b1a <tls_interface_listen+0xce>
   13a6c:	6823      	ldr	r3, [r4, #0]
   13a6e:	b29b      	uxth	r3, r3
   13a70:	2b0b      	cmp	r3, #11
   13a72:	d15d      	bne.n	13b30 <tls_interface_listen+0xe4>
   13a74:	00f3      	lsls	r3, r6, #3
   13a76:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 13b38 <tls_interface_listen+0xec>
   13a7a:	199a      	adds	r2, r3, r6
   13a7c:	f819 2022 	ldrb.w	r2, [r9, r2, lsl #2]
   13a80:	2a01      	cmp	r2, #1
   13a82:	d155      	bne.n	13b30 <tls_interface_listen+0xe4>
   13a84:	2201      	movs	r2, #1
   13a86:	4433      	add	r3, r6
   13a88:	009d      	lsls	r5, r3, #2
   13a8a:	f809 2005 	strb.w	r2, [r9, r5]
   13a8e:	69a1      	ldr	r1, [r4, #24]
   13a90:	2300      	movs	r3, #0
   13a92:	f247 0281 	movw	r2, #28801	; 0x7081
   13a96:	4630      	mov	r0, r6
   13a98:	f8d4 8000 	ldr.w	r8, [r4]
   13a9c:	f003 fa10 	bl	16ec0 <ip_interface_request_create>
   13aa0:	4682      	mov	sl, r0
   13aa2:	2800      	cmp	r0, #0
   13aa4:	d042      	beq.n	13b2c <tls_interface_listen+0xe0>
   13aa6:	eb09 0105 	add.w	r1, r9, r5
   13aaa:	2224      	movs	r2, #36	; 0x24
   13aac:	3014      	adds	r0, #20
   13aae:	f009 fafc 	bl	1d0aa <memcpy>
   13ab2:	f8da 3008 	ldr.w	r3, [sl, #8]
   13ab6:	4651      	mov	r1, sl
   13ab8:	3324      	adds	r3, #36	; 0x24
   13aba:	f8ca 3008 	str.w	r3, [sl, #8]
   13abe:	6822      	ldr	r2, [r4, #0]
   13ac0:	4643      	mov	r3, r8
   13ac2:	0c12      	lsrs	r2, r2, #16
   13ac4:	0412      	lsls	r2, r2, #16
   13ac6:	f042 020a 	orr.w	r2, r2, #10
   13aca:	6022      	str	r2, [r4, #0]
   13acc:	4620      	mov	r0, r4
   13ace:	f247 0281 	movw	r2, #28801	; 0x7081
   13ad2:	f003 fa15 	bl	16f00 <ip_interface_request_send>
   13ad6:	b9e0      	cbnz	r0, 13b12 <tls_interface_listen+0xc6>
   13ad8:	6823      	ldr	r3, [r4, #0]
   13ada:	00db      	lsls	r3, r3, #3
   13adc:	d40e      	bmi.n	13afc <tls_interface_listen+0xb0>
   13ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13ae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13ae6:	210b      	movs	r1, #11
   13ae8:	4630      	mov	r0, r6
   13aea:	f003 fa1d 	bl	16f28 <ip_interface_wait>
   13aee:	b160      	cbz	r0, 13b0a <tls_interface_listen+0xbe>
   13af0:	2800      	cmp	r0, #0
   13af2:	f8c4 8000 	str.w	r8, [r4]
   13af6:	dc02      	bgt.n	13afe <tls_interface_listen+0xb2>
   13af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13afc:	2073      	movs	r0, #115	; 0x73
   13afe:	f7fd fc87 	bl	11410 <bsd_os_errno_set>
   13b02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13b0a:	4639      	mov	r1, r7
   13b0c:	4630      	mov	r0, r6
   13b0e:	f003 fef9 	bl	17904 <ip_interface_listen>
   13b12:	2800      	cmp	r0, #0
   13b14:	dcf3      	bgt.n	13afe <tls_interface_listen+0xb2>
   13b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13b1a:	00f3      	lsls	r3, r6, #3
   13b1c:	f8df 9018 	ldr.w	r9, [pc, #24]	; 13b38 <tls_interface_listen+0xec>
   13b20:	199a      	adds	r2, r3, r6
   13b22:	f819 2022 	ldrb.w	r2, [r9, r2, lsl #2]
   13b26:	2a02      	cmp	r2, #2
   13b28:	d1a0      	bne.n	13a6c <tls_interface_listen+0x20>
   13b2a:	e7ab      	b.n	13a84 <tls_interface_listen+0x38>
   13b2c:	200c      	movs	r0, #12
   13b2e:	e7e6      	b.n	13afe <tls_interface_listen+0xb2>
   13b30:	202d      	movs	r0, #45	; 0x2d
   13b32:	e7e4      	b.n	13afe <tls_interface_listen+0xb2>
   13b34:	2009      	movs	r0, #9
   13b36:	e7e2      	b.n	13afe <tls_interface_listen+0xb2>
   13b38:	2002063c 	.word	0x2002063c

00013b3c <tls_interface_accept>:
   13b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13b3e:	460c      	mov	r4, r1
   13b40:	4616      	mov	r6, r2
   13b42:	461f      	mov	r7, r3
   13b44:	4605      	mov	r5, r0
   13b46:	f004 fde1 	bl	1870c <interface_socket_from_handle_get>
   13b4a:	2800      	cmp	r0, #0
   13b4c:	d03b      	beq.n	13bc6 <tls_interface_accept+0x8a>
   13b4e:	6800      	ldr	r0, [r0, #0]
   13b50:	b280      	uxth	r0, r0
   13b52:	2806      	cmp	r0, #6
   13b54:	d137      	bne.n	13bc6 <tls_interface_accept+0x8a>
   13b56:	4621      	mov	r1, r4
   13b58:	463b      	mov	r3, r7
   13b5a:	4632      	mov	r2, r6
   13b5c:	4628      	mov	r0, r5
   13b5e:	f003 ff47 	bl	179f0 <ip_interface_accept>
   13b62:	4604      	mov	r4, r0
   13b64:	b118      	cbz	r0, 13b6e <tls_interface_accept+0x32>
   13b66:	2c00      	cmp	r4, #0
   13b68:	dc2e      	bgt.n	13bc8 <tls_interface_accept+0x8c>
   13b6a:	4620      	mov	r0, r4
   13b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13b6e:	4628      	mov	r0, r5
   13b70:	f004 fdcc 	bl	1870c <interface_socket_from_handle_get>
   13b74:	6803      	ldr	r3, [r0, #0]
   13b76:	4f18      	ldr	r7, [pc, #96]	; (13bd8 <tls_interface_accept+0x9c>)
   13b78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   13b7c:	6003      	str	r3, [r0, #0]
   13b7e:	6803      	ldr	r3, [r0, #0]
   13b80:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   13b84:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   13b88:	4606      	mov	r6, r0
   13b8a:	6003      	str	r3, [r0, #0]
   13b8c:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   13b90:	2224      	movs	r2, #36	; 0x24
   13b92:	4638      	mov	r0, r7
   13b94:	f009 fa89 	bl	1d0aa <memcpy>
   13b98:	2302      	movs	r3, #2
   13b9a:	703b      	strb	r3, [r7, #0]
   13b9c:	6833      	ldr	r3, [r6, #0]
   13b9e:	4620      	mov	r0, r4
   13ba0:	0c1b      	lsrs	r3, r3, #16
   13ba2:	041b      	lsls	r3, r3, #16
   13ba4:	f043 030b 	orr.w	r3, r3, #11
   13ba8:	6033      	str	r3, [r6, #0]
   13baa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13bb2:	210c      	movs	r1, #12
   13bb4:	f003 f9b8 	bl	16f28 <ip_interface_wait>
   13bb8:	4604      	mov	r4, r0
   13bba:	2800      	cmp	r0, #0
   13bbc:	d0d5      	beq.n	13b6a <tls_interface_accept+0x2e>
   13bbe:	2000      	movs	r0, #0
   13bc0:	f003 fa8a 	bl	170d8 <ip_interface_close>
   13bc4:	e7cf      	b.n	13b66 <tls_interface_accept+0x2a>
   13bc6:	2409      	movs	r4, #9
   13bc8:	4620      	mov	r0, r4
   13bca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   13bce:	f7fd fc1f 	bl	11410 <bsd_os_errno_set>
   13bd2:	4620      	mov	r0, r4
   13bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13bd6:	bf00      	nop
   13bd8:	2002063c 	.word	0x2002063c

00013bdc <tls_interface_setopt>:
   13bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13be0:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   13be4:	9f06      	ldr	r7, [sp, #24]
   13be6:	d11d      	bne.n	13c24 <tls_interface_setopt+0x48>
   13be8:	461c      	mov	r4, r3
   13bea:	b1c3      	cbz	r3, 13c1e <tls_interface_setopt+0x42>
   13bec:	b1bf      	cbz	r7, 13c1e <tls_interface_setopt+0x42>
   13bee:	4605      	mov	r5, r0
   13bf0:	4616      	mov	r6, r2
   13bf2:	f004 fd8b 	bl	1870c <interface_socket_from_handle_get>
   13bf6:	b1c8      	cbz	r0, 13c2c <tls_interface_setopt+0x50>
   13bf8:	6803      	ldr	r3, [r0, #0]
   13bfa:	b29b      	uxth	r3, r3
   13bfc:	2b02      	cmp	r3, #2
   13bfe:	d007      	beq.n	13c10 <tls_interface_setopt+0x34>
   13c00:	6803      	ldr	r3, [r0, #0]
   13c02:	b29b      	uxth	r3, r3
   13c04:	2b04      	cmp	r3, #4
   13c06:	d003      	beq.n	13c10 <tls_interface_setopt+0x34>
   13c08:	6803      	ldr	r3, [r0, #0]
   13c0a:	b29b      	uxth	r3, r3
   13c0c:	2b05      	cmp	r3, #5
   13c0e:	d10d      	bne.n	13c2c <tls_interface_setopt+0x50>
   13c10:	3e01      	subs	r6, #1
   13c12:	2e03      	cmp	r6, #3
   13c14:	d851      	bhi.n	13cba <tls_interface_setopt+0xde>
   13c16:	e8df f006 	tbb	[pc, r6]
   13c1a:	3225      	.short	0x3225
   13c1c:	0b18      	.short	0x0b18
   13c1e:	200e      	movs	r0, #14
   13c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13c28:	f004 b81a 	b.w	17c60 <ip_interface_setopt>
   13c2c:	2009      	movs	r0, #9
   13c2e:	e7f7      	b.n	13c20 <tls_interface_setopt+0x44>
   13c30:	2f04      	cmp	r7, #4
   13c32:	d139      	bne.n	13ca8 <tls_interface_setopt+0xcc>
   13c34:	6823      	ldr	r3, [r4, #0]
   13c36:	2b02      	cmp	r3, #2
   13c38:	d836      	bhi.n	13ca8 <tls_interface_setopt+0xcc>
   13c3a:	4a21      	ldr	r2, [pc, #132]	; (13cc0 <tls_interface_setopt+0xe4>)
   13c3c:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   13c40:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   13c44:	70ab      	strb	r3, [r5, #2]
   13c46:	2000      	movs	r0, #0
   13c48:	e7ea      	b.n	13c20 <tls_interface_setopt+0x44>
   13c4a:	2f01      	cmp	r7, #1
   13c4c:	d12c      	bne.n	13ca8 <tls_interface_setopt+0xcc>
   13c4e:	7823      	ldrb	r3, [r4, #0]
   13c50:	2b01      	cmp	r3, #1
   13c52:	d829      	bhi.n	13ca8 <tls_interface_setopt+0xcc>
   13c54:	4a1a      	ldr	r2, [pc, #104]	; (13cc0 <tls_interface_setopt+0xe4>)
   13c56:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   13c5a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   13c5e:	7053      	strb	r3, [r2, #1]
   13c60:	2000      	movs	r0, #0
   13c62:	e7dd      	b.n	13c20 <tls_interface_setopt+0x44>
   13c64:	2f04      	cmp	r7, #4
   13c66:	d11f      	bne.n	13ca8 <tls_interface_setopt+0xcc>
   13c68:	6820      	ldr	r0, [r4, #0]
   13c6a:	b1f8      	cbz	r0, 13cac <tls_interface_setopt+0xd0>
   13c6c:	2801      	cmp	r0, #1
   13c6e:	d11b      	bne.n	13ca8 <tls_interface_setopt+0xcc>
   13c70:	4b13      	ldr	r3, [pc, #76]	; (13cc0 <tls_interface_setopt+0xe4>)
   13c72:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   13c76:	f803 0025 	strb.w	r0, [r3, r5, lsl #2]
   13c7a:	2000      	movs	r0, #0
   13c7c:	e7d0      	b.n	13c20 <tls_interface_setopt+0x44>
   13c7e:	ea5f 0c97 	movs.w	ip, r7, lsr #2
   13c82:	d011      	beq.n	13ca8 <tls_interface_setopt+0xcc>
   13c84:	f017 0603 	ands.w	r6, r7, #3
   13c88:	d10e      	bne.n	13ca8 <tls_interface_setopt+0xcc>
   13c8a:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   13c8e:	00ad      	lsls	r5, r5, #2
   13c90:	4b0b      	ldr	r3, [pc, #44]	; (13cc0 <tls_interface_setopt+0xe4>)
   13c92:	1d28      	adds	r0, r5, #4
   13c94:	4418      	add	r0, r3
   13c96:	442b      	add	r3, r5
   13c98:	463a      	mov	r2, r7
   13c9a:	4621      	mov	r1, r4
   13c9c:	f883 c003 	strb.w	ip, [r3, #3]
   13ca0:	f009 fa03 	bl	1d0aa <memcpy>
   13ca4:	4630      	mov	r0, r6
   13ca6:	e7bb      	b.n	13c20 <tls_interface_setopt+0x44>
   13ca8:	2016      	movs	r0, #22
   13caa:	e7b9      	b.n	13c20 <tls_interface_setopt+0x44>
   13cac:	2202      	movs	r2, #2
   13cae:	4b04      	ldr	r3, [pc, #16]	; (13cc0 <tls_interface_setopt+0xe4>)
   13cb0:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   13cb4:	f803 2025 	strb.w	r2, [r3, r5, lsl #2]
   13cb8:	e7b2      	b.n	13c20 <tls_interface_setopt+0x44>
   13cba:	202a      	movs	r0, #42	; 0x2a
   13cbc:	e7b0      	b.n	13c20 <tls_interface_setopt+0x44>
   13cbe:	bf00      	nop
   13cc0:	2002063c 	.word	0x2002063c

00013cc4 <tls_interface_getopt>:
   13cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13cc8:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   13ccc:	9f06      	ldr	r7, [sp, #24]
   13cce:	d112      	bne.n	13cf6 <tls_interface_getopt+0x32>
   13cd0:	461d      	mov	r5, r3
   13cd2:	b16b      	cbz	r3, 13cf0 <tls_interface_getopt+0x2c>
   13cd4:	b167      	cbz	r7, 13cf0 <tls_interface_getopt+0x2c>
   13cd6:	4606      	mov	r6, r0
   13cd8:	4614      	mov	r4, r2
   13cda:	f004 fd17 	bl	1870c <interface_socket_from_handle_get>
   13cde:	2800      	cmp	r0, #0
   13ce0:	d04f      	beq.n	13d82 <tls_interface_getopt+0xbe>
   13ce2:	3c01      	subs	r4, #1
   13ce4:	2c03      	cmp	r4, #3
   13ce6:	d852      	bhi.n	13d8e <tls_interface_getopt+0xca>
   13ce8:	e8df f004 	tbb	[pc, r4]
   13cec:	09152139 	.word	0x09152139
   13cf0:	200e      	movs	r0, #14
   13cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13cf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13cfa:	f004 b86d 	b.w	17dd8 <ip_interface_getopt>
   13cfe:	683b      	ldr	r3, [r7, #0]
   13d00:	2b04      	cmp	r3, #4
   13d02:	d13c      	bne.n	13d7e <tls_interface_getopt+0xba>
   13d04:	4b23      	ldr	r3, [pc, #140]	; (13d94 <tls_interface_getopt+0xd0>)
   13d06:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   13d0a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   13d0e:	78b3      	ldrb	r3, [r6, #2]
   13d10:	2000      	movs	r0, #0
   13d12:	602b      	str	r3, [r5, #0]
   13d14:	e7ed      	b.n	13cf2 <tls_interface_getopt+0x2e>
   13d16:	683b      	ldr	r3, [r7, #0]
   13d18:	2b04      	cmp	r3, #4
   13d1a:	d130      	bne.n	13d7e <tls_interface_getopt+0xba>
   13d1c:	4b1d      	ldr	r3, [pc, #116]	; (13d94 <tls_interface_getopt+0xd0>)
   13d1e:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   13d22:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   13d26:	7873      	ldrb	r3, [r6, #1]
   13d28:	2000      	movs	r0, #0
   13d2a:	602b      	str	r3, [r5, #0]
   13d2c:	e7e1      	b.n	13cf2 <tls_interface_getopt+0x2e>
   13d2e:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   13d32:	4918      	ldr	r1, [pc, #96]	; (13d94 <tls_interface_getopt+0xd0>)
   13d34:	683b      	ldr	r3, [r7, #0]
   13d36:	00b6      	lsls	r6, r6, #2
   13d38:	198a      	adds	r2, r1, r6
   13d3a:	f013 0403 	ands.w	r4, r3, #3
   13d3e:	78d0      	ldrb	r0, [r2, #3]
   13d40:	d121      	bne.n	13d86 <tls_interface_getopt+0xc2>
   13d42:	089b      	lsrs	r3, r3, #2
   13d44:	4283      	cmp	r3, r0
   13d46:	bf28      	it	cs
   13d48:	4603      	movcs	r3, r0
   13d4a:	009a      	lsls	r2, r3, #2
   13d4c:	b1db      	cbz	r3, 13d86 <tls_interface_getopt+0xc2>
   13d4e:	3604      	adds	r6, #4
   13d50:	4431      	add	r1, r6
   13d52:	603a      	str	r2, [r7, #0]
   13d54:	4628      	mov	r0, r5
   13d56:	f009 f9a8 	bl	1d0aa <memcpy>
   13d5a:	4620      	mov	r0, r4
   13d5c:	e7c9      	b.n	13cf2 <tls_interface_getopt+0x2e>
   13d5e:	683b      	ldr	r3, [r7, #0]
   13d60:	2b04      	cmp	r3, #4
   13d62:	d10c      	bne.n	13d7e <tls_interface_getopt+0xba>
   13d64:	4b0b      	ldr	r3, [pc, #44]	; (13d94 <tls_interface_getopt+0xd0>)
   13d66:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   13d6a:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   13d6e:	2000      	movs	r0, #0
   13d70:	f1a3 0301 	sub.w	r3, r3, #1
   13d74:	fab3 f383 	clz	r3, r3
   13d78:	095b      	lsrs	r3, r3, #5
   13d7a:	602b      	str	r3, [r5, #0]
   13d7c:	e7b9      	b.n	13cf2 <tls_interface_getopt+0x2e>
   13d7e:	2016      	movs	r0, #22
   13d80:	e7b7      	b.n	13cf2 <tls_interface_getopt+0x2e>
   13d82:	2009      	movs	r0, #9
   13d84:	e7b5      	b.n	13cf2 <tls_interface_getopt+0x2e>
   13d86:	2800      	cmp	r0, #0
   13d88:	d1f9      	bne.n	13d7e <tls_interface_getopt+0xba>
   13d8a:	6038      	str	r0, [r7, #0]
   13d8c:	e7b1      	b.n	13cf2 <tls_interface_getopt+0x2e>
   13d8e:	202a      	movs	r0, #42	; 0x2a
   13d90:	e7af      	b.n	13cf2 <tls_interface_getopt+0x2e>
   13d92:	bf00      	nop
   13d94:	2002063c 	.word	0x2002063c

00013d98 <tls_rpc_ip_event_handler>:
   13d98:	b538      	push	{r3, r4, r5, lr}
   13d9a:	f248 0581 	movw	r5, #32897	; 0x8081
   13d9e:	42ab      	cmp	r3, r5
   13da0:	460c      	mov	r4, r1
   13da2:	d053      	beq.n	13e4c <tls_rpc_ip_event_handler+0xb4>
   13da4:	f249 0182 	movw	r1, #36994	; 0x9082
   13da8:	428b      	cmp	r3, r1
   13daa:	d02d      	beq.n	13e08 <tls_rpc_ip_event_handler+0x70>
   13dac:	f248 0102 	movw	r1, #32770	; 0x8002
   13db0:	428b      	cmp	r3, r1
   13db2:	d001      	beq.n	13db8 <tls_rpc_ip_event_handler+0x20>
   13db4:	2001      	movs	r0, #1
   13db6:	bd38      	pop	{r3, r4, r5, pc}
   13db8:	2c00      	cmp	r4, #0
   13dba:	d0fb      	beq.n	13db4 <tls_rpc_ip_event_handler+0x1c>
   13dbc:	6963      	ldr	r3, [r4, #20]
   13dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   13dc2:	d002      	beq.n	13dca <tls_rpc_ip_event_handler+0x32>
   13dc4:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   13dc8:	d1f4      	bne.n	13db4 <tls_rpc_ip_event_handler+0x1c>
   13dca:	6823      	ldr	r3, [r4, #0]
   13dcc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   13dd0:	6023      	str	r3, [r4, #0]
   13dd2:	6955      	ldr	r5, [r2, #20]
   13dd4:	2d00      	cmp	r5, #0
   13dd6:	d148      	bne.n	13e6a <tls_rpc_ip_event_handler+0xd2>
   13dd8:	6823      	ldr	r3, [r4, #0]
   13dda:	0c1b      	lsrs	r3, r3, #16
   13ddc:	041b      	lsls	r3, r3, #16
   13dde:	f043 0305 	orr.w	r3, r3, #5
   13de2:	6023      	str	r3, [r4, #0]
   13de4:	6823      	ldr	r3, [r4, #0]
   13de6:	00da      	lsls	r2, r3, #3
   13de8:	d50c      	bpl.n	13e04 <tls_rpc_ip_event_handler+0x6c>
   13dea:	4b25      	ldr	r3, [pc, #148]	; (13e80 <tls_rpc_ip_event_handler+0xe8>)
   13dec:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
   13df0:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   13df4:	2b02      	cmp	r3, #2
   13df6:	d105      	bne.n	13e04 <tls_rpc_ip_event_handler+0x6c>
   13df8:	4621      	mov	r1, r4
   13dfa:	f7ff fc21 	bl	13640 <secure_client_socket>
   13dfe:	b108      	cbz	r0, 13e04 <tls_rpc_ip_event_handler+0x6c>
   13e00:	2873      	cmp	r0, #115	; 0x73
   13e02:	d135      	bne.n	13e70 <tls_rpc_ip_event_handler+0xd8>
   13e04:	2000      	movs	r0, #0
   13e06:	bd38      	pop	{r3, r4, r5, pc}
   13e08:	2c00      	cmp	r4, #0
   13e0a:	d0fb      	beq.n	13e04 <tls_rpc_ip_event_handler+0x6c>
   13e0c:	6823      	ldr	r3, [r4, #0]
   13e0e:	b29b      	uxth	r3, r3
   13e10:	2b0b      	cmp	r3, #11
   13e12:	d1f7      	bne.n	13e04 <tls_rpc_ip_event_handler+0x6c>
   13e14:	6910      	ldr	r0, [r2, #16]
   13e16:	bb48      	cbnz	r0, 13e6c <tls_rpc_ip_event_handler+0xd4>
   13e18:	6823      	ldr	r3, [r4, #0]
   13e1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   13e1e:	6023      	str	r3, [r4, #0]
   13e20:	6823      	ldr	r3, [r4, #0]
   13e22:	00db      	lsls	r3, r3, #3
   13e24:	d5ee      	bpl.n	13e04 <tls_rpc_ip_event_handler+0x6c>
   13e26:	6823      	ldr	r3, [r4, #0]
   13e28:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   13e2c:	6023      	str	r3, [r4, #0]
   13e2e:	6823      	ldr	r3, [r4, #0]
   13e30:	0c1b      	lsrs	r3, r3, #16
   13e32:	041b      	lsls	r3, r3, #16
   13e34:	f043 030c 	orr.w	r3, r3, #12
   13e38:	6023      	str	r3, [r4, #0]
   13e3a:	6823      	ldr	r3, [r4, #0]
   13e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13e40:	6023      	str	r3, [r4, #0]
   13e42:	6823      	ldr	r3, [r4, #0]
   13e44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   13e48:	6023      	str	r3, [r4, #0]
   13e4a:	bd38      	pop	{r3, r4, r5, pc}
   13e4c:	2900      	cmp	r1, #0
   13e4e:	d0d9      	beq.n	13e04 <tls_rpc_ip_event_handler+0x6c>
   13e50:	680b      	ldr	r3, [r1, #0]
   13e52:	b29b      	uxth	r3, r3
   13e54:	2b0a      	cmp	r3, #10
   13e56:	d1d5      	bne.n	13e04 <tls_rpc_ip_event_handler+0x6c>
   13e58:	6950      	ldr	r0, [r2, #20]
   13e5a:	b938      	cbnz	r0, 13e6c <tls_rpc_ip_event_handler+0xd4>
   13e5c:	680b      	ldr	r3, [r1, #0]
   13e5e:	0c1b      	lsrs	r3, r3, #16
   13e60:	041b      	lsls	r3, r3, #16
   13e62:	f043 030b 	orr.w	r3, r3, #11
   13e66:	600b      	str	r3, [r1, #0]
   13e68:	bd38      	pop	{r3, r4, r5, pc}
   13e6a:	4628      	mov	r0, r5
   13e6c:	f003 f81e 	bl	16eac <rpc_error_to_nrf_bsd_error>
   13e70:	6060      	str	r0, [r4, #4]
   13e72:	6823      	ldr	r3, [r4, #0]
   13e74:	2000      	movs	r0, #0
   13e76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   13e7a:	6023      	str	r3, [r4, #0]
   13e7c:	bd38      	pop	{r3, r4, r5, pc}
   13e7e:	bf00      	nop
   13e80:	2002063c 	.word	0x2002063c

00013e84 <rpc_dfu_event_handler>:
   13e84:	b508      	push	{r3, lr}
   13e86:	4a08      	ldr	r2, [pc, #32]	; (13ea8 <rpc_dfu_event_handler+0x24>)
   13e88:	68c1      	ldr	r1, [r0, #12]
   13e8a:	8812      	ldrh	r2, [r2, #0]
   13e8c:	4603      	mov	r3, r0
   13e8e:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   13e92:	d005      	beq.n	13ea0 <rpc_dfu_event_handler+0x1c>
   13e94:	6800      	ldr	r0, [r0, #0]
   13e96:	b110      	cbz	r0, 13e9e <rpc_dfu_event_handler+0x1a>
   13e98:	f7fe ff9a 	bl	12dd0 <rpc_dfu_client_data_free>
   13e9c:	2000      	movs	r0, #0
   13e9e:	bd08      	pop	{r3, pc}
   13ea0:	4a02      	ldr	r2, [pc, #8]	; (13eac <rpc_dfu_event_handler+0x28>)
   13ea2:	2001      	movs	r0, #1
   13ea4:	6013      	str	r3, [r2, #0]
   13ea6:	bd08      	pop	{r3, pc}
   13ea8:	20024e1c 	.word	0x20024e1c
   13eac:	20020768 	.word	0x20020768

00013eb0 <mfu_interface_init>:
   13eb0:	2300      	movs	r3, #0
   13eb2:	b510      	push	{r4, lr}
   13eb4:	4808      	ldr	r0, [pc, #32]	; (13ed8 <mfu_interface_init+0x28>)
   13eb6:	4909      	ldr	r1, [pc, #36]	; (13edc <mfu_interface_init+0x2c>)
   13eb8:	4a09      	ldr	r2, [pc, #36]	; (13ee0 <mfu_interface_init+0x30>)
   13eba:	4c0a      	ldr	r4, [pc, #40]	; (13ee4 <mfu_interface_init+0x34>)
   13ebc:	8003      	strh	r3, [r0, #0]
   13ebe:	600b      	str	r3, [r1, #0]
   13ec0:	6013      	str	r3, [r2, #0]
   13ec2:	6023      	str	r3, [r4, #0]
   13ec4:	f7fe ff4e 	bl	12d64 <rpc_dfu_client_init>
   13ec8:	b910      	cbnz	r0, 13ed0 <mfu_interface_init+0x20>
   13eca:	2301      	movs	r3, #1
   13ecc:	6023      	str	r3, [r4, #0]
   13ece:	bd10      	pop	{r4, pc}
   13ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13ed4:	bd10      	pop	{r4, pc}
   13ed6:	bf00      	nop
   13ed8:	20024e1c 	.word	0x20024e1c
   13edc:	20020768 	.word	0x20020768
   13ee0:	20020764 	.word	0x20020764
   13ee4:	2002075c 	.word	0x2002075c

00013ee8 <mfu_interface_open>:
   13ee8:	2801      	cmp	r0, #1
   13eea:	b508      	push	{r3, lr}
   13eec:	d10b      	bne.n	13f06 <mfu_interface_open+0x1e>
   13eee:	f240 2303 	movw	r3, #515	; 0x203
   13ef2:	429a      	cmp	r2, r3
   13ef4:	d107      	bne.n	13f06 <mfu_interface_open+0x1e>
   13ef6:	4b09      	ldr	r3, [pc, #36]	; (13f1c <mfu_interface_open+0x34>)
   13ef8:	681a      	ldr	r2, [r3, #0]
   13efa:	2a01      	cmp	r2, #1
   13efc:	d109      	bne.n	13f12 <mfu_interface_open+0x2a>
   13efe:	2202      	movs	r2, #2
   13f00:	601a      	str	r2, [r3, #0]
   13f02:	4807      	ldr	r0, [pc, #28]	; (13f20 <mfu_interface_open+0x38>)
   13f04:	bd08      	pop	{r3, pc}
   13f06:	2016      	movs	r0, #22
   13f08:	f7fd fa82 	bl	11410 <bsd_os_errno_set>
   13f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13f10:	bd08      	pop	{r3, pc}
   13f12:	f7fd fa7d 	bl	11410 <bsd_os_errno_set>
   13f16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13f1a:	bd08      	pop	{r3, pc}
   13f1c:	2002075c 	.word	0x2002075c
   13f20:	49765432 	.word	0x49765432

00013f24 <mfu_interface_close>:
   13f24:	b5f0      	push	{r4, r5, r6, r7, lr}
   13f26:	4c32      	ldr	r4, [pc, #200]	; (13ff0 <mfu_interface_close+0xcc>)
   13f28:	b083      	sub	sp, #12
   13f2a:	6823      	ldr	r3, [r4, #0]
   13f2c:	1e9a      	subs	r2, r3, #2
   13f2e:	2a01      	cmp	r2, #1
   13f30:	d857      	bhi.n	13fe2 <mfu_interface_close+0xbe>
   13f32:	2b03      	cmp	r3, #3
   13f34:	d004      	beq.n	13f40 <mfu_interface_close+0x1c>
   13f36:	2301      	movs	r3, #1
   13f38:	2000      	movs	r0, #0
   13f3a:	6023      	str	r3, [r4, #0]
   13f3c:	b003      	add	sp, #12
   13f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13f40:	2100      	movs	r1, #0
   13f42:	4668      	mov	r0, sp
   13f44:	f7fe ff14 	bl	12d70 <rpc_dfu_client_request_alloc>
   13f48:	4603      	mov	r3, r0
   13f4a:	2800      	cmp	r0, #0
   13f4c:	d13d      	bne.n	13fca <mfu_interface_close+0xa6>
   13f4e:	2104      	movs	r1, #4
   13f50:	4e28      	ldr	r6, [pc, #160]	; (13ff4 <mfu_interface_close+0xd0>)
   13f52:	9800      	ldr	r0, [sp, #0]
   13f54:	8832      	ldrh	r2, [r6, #0]
   13f56:	7201      	strb	r1, [r0, #8]
   13f58:	3201      	adds	r2, #1
   13f5a:	b292      	uxth	r2, r2
   13f5c:	0411      	lsls	r1, r2, #16
   13f5e:	f041 0106 	orr.w	r1, r1, #6
   13f62:	4d25      	ldr	r5, [pc, #148]	; (13ff8 <mfu_interface_close+0xd4>)
   13f64:	60c1      	str	r1, [r0, #12]
   13f66:	7103      	strb	r3, [r0, #4]
   13f68:	7143      	strb	r3, [r0, #5]
   13f6a:	7183      	strb	r3, [r0, #6]
   13f6c:	71c3      	strb	r3, [r0, #7]
   13f6e:	7243      	strb	r3, [r0, #9]
   13f70:	7283      	strb	r3, [r0, #10]
   13f72:	72c3      	strb	r3, [r0, #11]
   13f74:	2106      	movs	r1, #6
   13f76:	8032      	strh	r2, [r6, #0]
   13f78:	602b      	str	r3, [r5, #0]
   13f7a:	f7fe ff0d 	bl	12d98 <rpc_dfu_client_request_send>
   13f7e:	b9d8      	cbnz	r0, 13fb8 <mfu_interface_close+0x94>
   13f80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13f84:	ae02      	add	r6, sp, #8
   13f86:	4627      	mov	r7, r4
   13f88:	f846 3d04 	str.w	r3, [r6, #-4]!
   13f8c:	e004      	b.n	13f98 <mfu_interface_close+0x74>
   13f8e:	4631      	mov	r1, r6
   13f90:	4638      	mov	r0, r7
   13f92:	f7fd f9a9 	bl	112e8 <bsd_os_timedwait>
   13f96:	b9f0      	cbnz	r0, 13fd6 <mfu_interface_close+0xb2>
   13f98:	6828      	ldr	r0, [r5, #0]
   13f9a:	2800      	cmp	r0, #0
   13f9c:	d0f7      	beq.n	13f8e <mfu_interface_close+0x6a>
   13f9e:	6905      	ldr	r5, [r0, #16]
   13fa0:	f7fe ff0e 	bl	12dc0 <rpc_dfu_client_message_free>
   13fa4:	2d00      	cmp	r5, #0
   13fa6:	d0c6      	beq.n	13f36 <mfu_interface_close+0x12>
   13fa8:	4b14      	ldr	r3, [pc, #80]	; (13ffc <mfu_interface_close+0xd8>)
   13faa:	2008      	movs	r0, #8
   13fac:	601d      	str	r5, [r3, #0]
   13fae:	f7fd fa2f 	bl	11410 <bsd_os_errno_set>
   13fb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13fb6:	e7c1      	b.n	13f3c <mfu_interface_close+0x18>
   13fb8:	9800      	ldr	r0, [sp, #0]
   13fba:	6803      	ldr	r3, [r0, #0]
   13fbc:	b11b      	cbz	r3, 13fc6 <mfu_interface_close+0xa2>
   13fbe:	4618      	mov	r0, r3
   13fc0:	f7fe ff06 	bl	12dd0 <rpc_dfu_client_data_free>
   13fc4:	9800      	ldr	r0, [sp, #0]
   13fc6:	f7fe fefb 	bl	12dc0 <rpc_dfu_client_message_free>
   13fca:	200c      	movs	r0, #12
   13fcc:	f7fd fa20 	bl	11410 <bsd_os_errno_set>
   13fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13fd4:	e7b2      	b.n	13f3c <mfu_interface_close+0x18>
   13fd6:	203c      	movs	r0, #60	; 0x3c
   13fd8:	f7fd fa1a 	bl	11410 <bsd_os_errno_set>
   13fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13fe0:	e7ac      	b.n	13f3c <mfu_interface_close+0x18>
   13fe2:	2001      	movs	r0, #1
   13fe4:	f7fd fa14 	bl	11410 <bsd_os_errno_set>
   13fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13fec:	e7a6      	b.n	13f3c <mfu_interface_close+0x18>
   13fee:	bf00      	nop
   13ff0:	2002075c 	.word	0x2002075c
   13ff4:	20024e1c 	.word	0x20024e1c
   13ff8:	20020768 	.word	0x20020768
   13ffc:	20020760 	.word	0x20020760

00014000 <mfu_interface_sendto>:
   14000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14004:	4e5a      	ldr	r6, [pc, #360]	; (14170 <mfu_interface_sendto+0x170>)
   14006:	4615      	mov	r5, r2
   14008:	6833      	ldr	r3, [r6, #0]
   1400a:	b082      	sub	sp, #8
   1400c:	1e9a      	subs	r2, r3, #2
   1400e:	2a01      	cmp	r2, #1
   14010:	f200 80a7 	bhi.w	14162 <mfu_interface_sendto+0x162>
   14014:	460f      	mov	r7, r1
   14016:	2900      	cmp	r1, #0
   14018:	f000 809d 	beq.w	14156 <mfu_interface_sendto+0x156>
   1401c:	2d00      	cmp	r5, #0
   1401e:	f000 809a 	beq.w	14156 <mfu_interface_sendto+0x156>
   14022:	2b02      	cmp	r3, #2
   14024:	46e8      	mov	r8, sp
   14026:	d04e      	beq.n	140c6 <mfu_interface_sendto+0xc6>
   14028:	4640      	mov	r0, r8
   1402a:	4629      	mov	r1, r5
   1402c:	f7fe fea0 	bl	12d70 <rpc_dfu_client_request_alloc>
   14030:	4606      	mov	r6, r0
   14032:	b140      	cbz	r0, 14046 <mfu_interface_sendto+0x46>
   14034:	200c      	movs	r0, #12
   14036:	f7fd f9eb 	bl	11410 <bsd_os_errno_set>
   1403a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1403e:	4628      	mov	r0, r5
   14040:	b002      	add	sp, #8
   14042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14046:	9b00      	ldr	r3, [sp, #0]
   14048:	4639      	mov	r1, r7
   1404a:	6818      	ldr	r0, [r3, #0]
   1404c:	462a      	mov	r2, r5
   1404e:	f009 f82c 	bl	1d0aa <memcpy>
   14052:	2104      	movs	r1, #4
   14054:	4c47      	ldr	r4, [pc, #284]	; (14174 <mfu_interface_sendto+0x174>)
   14056:	9800      	ldr	r0, [sp, #0]
   14058:	8823      	ldrh	r3, [r4, #0]
   1405a:	6045      	str	r5, [r0, #4]
   1405c:	3301      	adds	r3, #1
   1405e:	b29b      	uxth	r3, r3
   14060:	041a      	lsls	r2, r3, #16
   14062:	8023      	strh	r3, [r4, #0]
   14064:	430a      	orrs	r2, r1
   14066:	4c44      	ldr	r4, [pc, #272]	; (14178 <mfu_interface_sendto+0x178>)
   14068:	60c2      	str	r2, [r0, #12]
   1406a:	7246      	strb	r6, [r0, #9]
   1406c:	7286      	strb	r6, [r0, #10]
   1406e:	72c6      	strb	r6, [r0, #11]
   14070:	7201      	strb	r1, [r0, #8]
   14072:	6026      	str	r6, [r4, #0]
   14074:	f7fe fe90 	bl	12d98 <rpc_dfu_client_request_send>
   14078:	2800      	cmp	r0, #0
   1407a:	d162      	bne.n	14142 <mfu_interface_sendto+0x142>
   1407c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14080:	ae02      	add	r6, sp, #8
   14082:	4f3b      	ldr	r7, [pc, #236]	; (14170 <mfu_interface_sendto+0x170>)
   14084:	f846 3d04 	str.w	r3, [r6, #-4]!
   14088:	e004      	b.n	14094 <mfu_interface_sendto+0x94>
   1408a:	4631      	mov	r1, r6
   1408c:	4638      	mov	r0, r7
   1408e:	f7fd f92b 	bl	112e8 <bsd_os_timedwait>
   14092:	b978      	cbnz	r0, 140b4 <mfu_interface_sendto+0xb4>
   14094:	6820      	ldr	r0, [r4, #0]
   14096:	2800      	cmp	r0, #0
   14098:	d0f7      	beq.n	1408a <mfu_interface_sendto+0x8a>
   1409a:	6904      	ldr	r4, [r0, #16]
   1409c:	f7fe fe90 	bl	12dc0 <rpc_dfu_client_message_free>
   140a0:	2c00      	cmp	r4, #0
   140a2:	d0cc      	beq.n	1403e <mfu_interface_sendto+0x3e>
   140a4:	4b35      	ldr	r3, [pc, #212]	; (1417c <mfu_interface_sendto+0x17c>)
   140a6:	2008      	movs	r0, #8
   140a8:	601c      	str	r4, [r3, #0]
   140aa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   140ae:	f7fd f9af 	bl	11410 <bsd_os_errno_set>
   140b2:	e7c4      	b.n	1403e <mfu_interface_sendto+0x3e>
   140b4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   140b8:	203c      	movs	r0, #60	; 0x3c
   140ba:	f7fd f9a9 	bl	11410 <bsd_os_errno_set>
   140be:	4628      	mov	r0, r5
   140c0:	b002      	add	sp, #8
   140c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   140c6:	4640      	mov	r0, r8
   140c8:	2100      	movs	r1, #0
   140ca:	f7fe fe51 	bl	12d70 <rpc_dfu_client_request_alloc>
   140ce:	4602      	mov	r2, r0
   140d0:	2800      	cmp	r0, #0
   140d2:	d1af      	bne.n	14034 <mfu_interface_sendto+0x34>
   140d4:	f04f 0c08 	mov.w	ip, #8
   140d8:	4926      	ldr	r1, [pc, #152]	; (14174 <mfu_interface_sendto+0x174>)
   140da:	4829      	ldr	r0, [pc, #164]	; (14180 <mfu_interface_sendto+0x180>)
   140dc:	880b      	ldrh	r3, [r1, #0]
   140de:	6804      	ldr	r4, [r0, #0]
   140e0:	3301      	adds	r3, #1
   140e2:	9800      	ldr	r0, [sp, #0]
   140e4:	b29b      	uxth	r3, r3
   140e6:	800b      	strh	r3, [r1, #0]
   140e8:	041b      	lsls	r3, r3, #16
   140ea:	f043 0303 	orr.w	r3, r3, #3
   140ee:	6104      	str	r4, [r0, #16]
   140f0:	4c21      	ldr	r4, [pc, #132]	; (14178 <mfu_interface_sendto+0x178>)
   140f2:	60c3      	str	r3, [r0, #12]
   140f4:	7102      	strb	r2, [r0, #4]
   140f6:	7142      	strb	r2, [r0, #5]
   140f8:	7182      	strb	r2, [r0, #6]
   140fa:	71c2      	strb	r2, [r0, #7]
   140fc:	7242      	strb	r2, [r0, #9]
   140fe:	7282      	strb	r2, [r0, #10]
   14100:	72c2      	strb	r2, [r0, #11]
   14102:	f880 c008 	strb.w	ip, [r0, #8]
   14106:	2103      	movs	r1, #3
   14108:	6022      	str	r2, [r4, #0]
   1410a:	f7fe fe45 	bl	12d98 <rpc_dfu_client_request_send>
   1410e:	b9c0      	cbnz	r0, 14142 <mfu_interface_sendto+0x142>
   14110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14114:	f10d 0908 	add.w	r9, sp, #8
   14118:	f849 3d04 	str.w	r3, [r9, #-4]!
   1411c:	46b2      	mov	sl, r6
   1411e:	e005      	b.n	1412c <mfu_interface_sendto+0x12c>
   14120:	4649      	mov	r1, r9
   14122:	4650      	mov	r0, sl
   14124:	f7fd f8e0 	bl	112e8 <bsd_os_timedwait>
   14128:	2800      	cmp	r0, #0
   1412a:	d1c3      	bne.n	140b4 <mfu_interface_sendto+0xb4>
   1412c:	6820      	ldr	r0, [r4, #0]
   1412e:	2800      	cmp	r0, #0
   14130:	d0f6      	beq.n	14120 <mfu_interface_sendto+0x120>
   14132:	6904      	ldr	r4, [r0, #16]
   14134:	f7fe fe44 	bl	12dc0 <rpc_dfu_client_message_free>
   14138:	2c00      	cmp	r4, #0
   1413a:	d1b3      	bne.n	140a4 <mfu_interface_sendto+0xa4>
   1413c:	2303      	movs	r3, #3
   1413e:	6033      	str	r3, [r6, #0]
   14140:	e772      	b.n	14028 <mfu_interface_sendto+0x28>
   14142:	9800      	ldr	r0, [sp, #0]
   14144:	6803      	ldr	r3, [r0, #0]
   14146:	b11b      	cbz	r3, 14150 <mfu_interface_sendto+0x150>
   14148:	4618      	mov	r0, r3
   1414a:	f7fe fe41 	bl	12dd0 <rpc_dfu_client_data_free>
   1414e:	9800      	ldr	r0, [sp, #0]
   14150:	f7fe fe36 	bl	12dc0 <rpc_dfu_client_message_free>
   14154:	e76e      	b.n	14034 <mfu_interface_sendto+0x34>
   14156:	2016      	movs	r0, #22
   14158:	f7fd f95a 	bl	11410 <bsd_os_errno_set>
   1415c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   14160:	e76d      	b.n	1403e <mfu_interface_sendto+0x3e>
   14162:	2001      	movs	r0, #1
   14164:	f7fd f954 	bl	11410 <bsd_os_errno_set>
   14168:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1416c:	e767      	b.n	1403e <mfu_interface_sendto+0x3e>
   1416e:	bf00      	nop
   14170:	2002075c 	.word	0x2002075c
   14174:	20024e1c 	.word	0x20024e1c
   14178:	20020768 	.word	0x20020768
   1417c:	20020760 	.word	0x20020760
   14180:	20020764 	.word	0x20020764

00014184 <mfu_interface_setopt>:
   14184:	b5f0      	push	{r4, r5, r6, r7, lr}
   14186:	4846      	ldr	r0, [pc, #280]	; (142a0 <mfu_interface_setopt+0x11c>)
   14188:	b083      	sub	sp, #12
   1418a:	6800      	ldr	r0, [r0, #0]
   1418c:	3802      	subs	r0, #2
   1418e:	2801      	cmp	r0, #1
   14190:	d877      	bhi.n	14282 <mfu_interface_setopt+0xfe>
   14192:	f240 2003 	movw	r0, #515	; 0x203
   14196:	4281      	cmp	r1, r0
   14198:	d16d      	bne.n	14276 <mfu_interface_setopt+0xf2>
   1419a:	3a04      	subs	r2, #4
   1419c:	2a03      	cmp	r2, #3
   1419e:	d85c      	bhi.n	1425a <mfu_interface_setopt+0xd6>
   141a0:	e8df f002 	tbb	[pc, r2]
   141a4:	514e024b 	.word	0x514e024b
   141a8:	2407      	movs	r4, #7
   141aa:	4625      	mov	r5, r4
   141ac:	2100      	movs	r1, #0
   141ae:	4668      	mov	r0, sp
   141b0:	f7fe fdde 	bl	12d70 <rpc_dfu_client_request_alloc>
   141b4:	4603      	mov	r3, r0
   141b6:	2800      	cmp	r0, #0
   141b8:	d138      	bne.n	1422c <mfu_interface_setopt+0xa8>
   141ba:	2704      	movs	r7, #4
   141bc:	4e39      	ldr	r6, [pc, #228]	; (142a4 <mfu_interface_setopt+0x120>)
   141be:	9800      	ldr	r0, [sp, #0]
   141c0:	8832      	ldrh	r2, [r6, #0]
   141c2:	4629      	mov	r1, r5
   141c4:	3201      	adds	r2, #1
   141c6:	b292      	uxth	r2, r2
   141c8:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   141cc:	4c36      	ldr	r4, [pc, #216]	; (142a8 <mfu_interface_setopt+0x124>)
   141ce:	60c5      	str	r5, [r0, #12]
   141d0:	7103      	strb	r3, [r0, #4]
   141d2:	7143      	strb	r3, [r0, #5]
   141d4:	7183      	strb	r3, [r0, #6]
   141d6:	71c3      	strb	r3, [r0, #7]
   141d8:	7243      	strb	r3, [r0, #9]
   141da:	7283      	strb	r3, [r0, #10]
   141dc:	72c3      	strb	r3, [r0, #11]
   141de:	7207      	strb	r7, [r0, #8]
   141e0:	8032      	strh	r2, [r6, #0]
   141e2:	6023      	str	r3, [r4, #0]
   141e4:	f7fe fdd8 	bl	12d98 <rpc_dfu_client_request_send>
   141e8:	b9b8      	cbnz	r0, 1421a <mfu_interface_setopt+0x96>
   141ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   141ee:	ad02      	add	r5, sp, #8
   141f0:	4e2b      	ldr	r6, [pc, #172]	; (142a0 <mfu_interface_setopt+0x11c>)
   141f2:	f845 3d04 	str.w	r3, [r5, #-4]!
   141f6:	e005      	b.n	14204 <mfu_interface_setopt+0x80>
   141f8:	4629      	mov	r1, r5
   141fa:	4630      	mov	r0, r6
   141fc:	f7fd f874 	bl	112e8 <bsd_os_timedwait>
   14200:	2800      	cmp	r0, #0
   14202:	d131      	bne.n	14268 <mfu_interface_setopt+0xe4>
   14204:	6820      	ldr	r0, [r4, #0]
   14206:	2800      	cmp	r0, #0
   14208:	d0f6      	beq.n	141f8 <mfu_interface_setopt+0x74>
   1420a:	6904      	ldr	r4, [r0, #16]
   1420c:	f7fe fdd8 	bl	12dc0 <rpc_dfu_client_message_free>
   14210:	2c00      	cmp	r4, #0
   14212:	d13c      	bne.n	1428e <mfu_interface_setopt+0x10a>
   14214:	4620      	mov	r0, r4
   14216:	b003      	add	sp, #12
   14218:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1421a:	9800      	ldr	r0, [sp, #0]
   1421c:	6803      	ldr	r3, [r0, #0]
   1421e:	b11b      	cbz	r3, 14228 <mfu_interface_setopt+0xa4>
   14220:	4618      	mov	r0, r3
   14222:	f7fe fdd5 	bl	12dd0 <rpc_dfu_client_data_free>
   14226:	9800      	ldr	r0, [sp, #0]
   14228:	f7fe fdca 	bl	12dc0 <rpc_dfu_client_message_free>
   1422c:	200c      	movs	r0, #12
   1422e:	f7fd f8ef 	bl	11410 <bsd_os_errno_set>
   14232:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14236:	b003      	add	sp, #12
   14238:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1423a:	2405      	movs	r4, #5
   1423c:	4625      	mov	r5, r4
   1423e:	e7b5      	b.n	141ac <mfu_interface_setopt+0x28>
   14240:	2408      	movs	r4, #8
   14242:	4625      	mov	r5, r4
   14244:	e7b2      	b.n	141ac <mfu_interface_setopt+0x28>
   14246:	b1b3      	cbz	r3, 14276 <mfu_interface_setopt+0xf2>
   14248:	9a08      	ldr	r2, [sp, #32]
   1424a:	2a04      	cmp	r2, #4
   1424c:	d113      	bne.n	14276 <mfu_interface_setopt+0xf2>
   1424e:	2000      	movs	r0, #0
   14250:	681a      	ldr	r2, [r3, #0]
   14252:	4b16      	ldr	r3, [pc, #88]	; (142ac <mfu_interface_setopt+0x128>)
   14254:	601a      	str	r2, [r3, #0]
   14256:	b003      	add	sp, #12
   14258:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1425a:	202a      	movs	r0, #42	; 0x2a
   1425c:	f7fd f8d8 	bl	11410 <bsd_os_errno_set>
   14260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14264:	b003      	add	sp, #12
   14266:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14268:	203c      	movs	r0, #60	; 0x3c
   1426a:	f7fd f8d1 	bl	11410 <bsd_os_errno_set>
   1426e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14272:	b003      	add	sp, #12
   14274:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14276:	2016      	movs	r0, #22
   14278:	f7fd f8ca 	bl	11410 <bsd_os_errno_set>
   1427c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14280:	e7c9      	b.n	14216 <mfu_interface_setopt+0x92>
   14282:	2001      	movs	r0, #1
   14284:	f7fd f8c4 	bl	11410 <bsd_os_errno_set>
   14288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1428c:	e7c3      	b.n	14216 <mfu_interface_setopt+0x92>
   1428e:	4b08      	ldr	r3, [pc, #32]	; (142b0 <mfu_interface_setopt+0x12c>)
   14290:	2008      	movs	r0, #8
   14292:	601c      	str	r4, [r3, #0]
   14294:	f7fd f8bc 	bl	11410 <bsd_os_errno_set>
   14298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1429c:	e7bb      	b.n	14216 <mfu_interface_setopt+0x92>
   1429e:	bf00      	nop
   142a0:	2002075c 	.word	0x2002075c
   142a4:	20024e1c 	.word	0x20024e1c
   142a8:	20020768 	.word	0x20020768
   142ac:	20020764 	.word	0x20020764
   142b0:	20020760 	.word	0x20020760

000142b4 <mfu_interface_getopt>:
   142b4:	f240 2003 	movw	r0, #515	; 0x203
   142b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   142bc:	4281      	cmp	r1, r0
   142be:	b082      	sub	sp, #8
   142c0:	9e08      	ldr	r6, [sp, #32]
   142c2:	f040 80ae 	bne.w	14422 <mfu_interface_getopt+0x16e>
   142c6:	461d      	mov	r5, r3
   142c8:	2b00      	cmp	r3, #0
   142ca:	f000 80aa 	beq.w	14422 <mfu_interface_getopt+0x16e>
   142ce:	2e00      	cmp	r6, #0
   142d0:	f000 80a7 	beq.w	14422 <mfu_interface_getopt+0x16e>
   142d4:	4b5e      	ldr	r3, [pc, #376]	; (14450 <mfu_interface_getopt+0x19c>)
   142d6:	681b      	ldr	r3, [r3, #0]
   142d8:	3b02      	subs	r3, #2
   142da:	2b01      	cmp	r3, #1
   142dc:	f200 80a7 	bhi.w	1442e <mfu_interface_getopt+0x17a>
   142e0:	3a01      	subs	r2, #1
   142e2:	2a13      	cmp	r2, #19
   142e4:	d879      	bhi.n	143da <mfu_interface_getopt+0x126>
   142e6:	e8df f002 	tbb	[pc, r2]
   142ea:	5f17      	.short	0x5f17
   142ec:	78787878 	.word	0x78787878
   142f0:	78787872 	.word	0x78787872
   142f4:	78787878 	.word	0x78787878
   142f8:	78787878 	.word	0x78787878
   142fc:	0a78      	.short	0x0a78
   142fe:	6833      	ldr	r3, [r6, #0]
   14300:	2b04      	cmp	r3, #4
   14302:	f040 808e 	bne.w	14422 <mfu_interface_getopt+0x16e>
   14306:	2200      	movs	r2, #0
   14308:	4610      	mov	r0, r2
   1430a:	4b52      	ldr	r3, [pc, #328]	; (14454 <mfu_interface_getopt+0x1a0>)
   1430c:	6819      	ldr	r1, [r3, #0]
   1430e:	601a      	str	r2, [r3, #0]
   14310:	6029      	str	r1, [r5, #0]
   14312:	b002      	add	sp, #8
   14314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14318:	6833      	ldr	r3, [r6, #0]
   1431a:	2b24      	cmp	r3, #36	; 0x24
   1431c:	f040 8081 	bne.w	14422 <mfu_interface_getopt+0x16e>
   14320:	2401      	movs	r4, #1
   14322:	46a0      	mov	r8, r4
   14324:	2100      	movs	r1, #0
   14326:	4668      	mov	r0, sp
   14328:	f7fe fd22 	bl	12d70 <rpc_dfu_client_request_alloc>
   1432c:	2800      	cmp	r0, #0
   1432e:	d146      	bne.n	143be <mfu_interface_getopt+0x10a>
   14330:	4949      	ldr	r1, [pc, #292]	; (14458 <mfu_interface_getopt+0x1a4>)
   14332:	9b00      	ldr	r3, [sp, #0]
   14334:	880a      	ldrh	r2, [r1, #0]
   14336:	f1b8 0f03 	cmp.w	r8, #3
   1433a:	f102 0201 	add.w	r2, r2, #1
   1433e:	b292      	uxth	r2, r2
   14340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   14344:	7118      	strb	r0, [r3, #4]
   14346:	800a      	strh	r2, [r1, #0]
   14348:	60dc      	str	r4, [r3, #12]
   1434a:	7158      	strb	r0, [r3, #5]
   1434c:	7198      	strb	r0, [r3, #6]
   1434e:	71d8      	strb	r0, [r3, #7]
   14350:	d04b      	beq.n	143ea <mfu_interface_getopt+0x136>
   14352:	2104      	movs	r1, #4
   14354:	2200      	movs	r2, #0
   14356:	4f41      	ldr	r7, [pc, #260]	; (1445c <mfu_interface_getopt+0x1a8>)
   14358:	6099      	str	r1, [r3, #8]
   1435a:	4618      	mov	r0, r3
   1435c:	4641      	mov	r1, r8
   1435e:	603a      	str	r2, [r7, #0]
   14360:	f7fe fd1a 	bl	12d98 <rpc_dfu_client_request_send>
   14364:	2800      	cmp	r0, #0
   14366:	d14d      	bne.n	14404 <mfu_interface_getopt+0x150>
   14368:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1436c:	ac02      	add	r4, sp, #8
   1436e:	f844 3d04 	str.w	r3, [r4, #-4]!
   14372:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 14450 <mfu_interface_getopt+0x19c>
   14376:	e005      	b.n	14384 <mfu_interface_getopt+0xd0>
   14378:	4621      	mov	r1, r4
   1437a:	4640      	mov	r0, r8
   1437c:	f7fc ffb4 	bl	112e8 <bsd_os_timedwait>
   14380:	2800      	cmp	r0, #0
   14382:	d137      	bne.n	143f4 <mfu_interface_getopt+0x140>
   14384:	6839      	ldr	r1, [r7, #0]
   14386:	2900      	cmp	r1, #0
   14388:	d0f6      	beq.n	14378 <mfu_interface_getopt+0xc4>
   1438a:	690c      	ldr	r4, [r1, #16]
   1438c:	2c00      	cmp	r4, #0
   1438e:	d154      	bne.n	1443a <mfu_interface_getopt+0x186>
   14390:	6832      	ldr	r2, [r6, #0]
   14392:	3114      	adds	r1, #20
   14394:	4628      	mov	r0, r5
   14396:	f008 fe88 	bl	1d0aa <memcpy>
   1439a:	6838      	ldr	r0, [r7, #0]
   1439c:	f7fe fd10 	bl	12dc0 <rpc_dfu_client_message_free>
   143a0:	4620      	mov	r0, r4
   143a2:	b002      	add	sp, #8
   143a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   143a8:	6833      	ldr	r3, [r6, #0]
   143aa:	2b04      	cmp	r3, #4
   143ac:	d139      	bne.n	14422 <mfu_interface_getopt+0x16e>
   143ae:	2402      	movs	r4, #2
   143b0:	2100      	movs	r1, #0
   143b2:	4668      	mov	r0, sp
   143b4:	46a0      	mov	r8, r4
   143b6:	f7fe fcdb 	bl	12d70 <rpc_dfu_client_request_alloc>
   143ba:	2800      	cmp	r0, #0
   143bc:	d0b8      	beq.n	14330 <mfu_interface_getopt+0x7c>
   143be:	200c      	movs	r0, #12
   143c0:	f7fd f826 	bl	11410 <bsd_os_errno_set>
   143c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   143c8:	b002      	add	sp, #8
   143ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   143ce:	6833      	ldr	r3, [r6, #0]
   143d0:	2b04      	cmp	r3, #4
   143d2:	d126      	bne.n	14422 <mfu_interface_getopt+0x16e>
   143d4:	2409      	movs	r4, #9
   143d6:	46a0      	mov	r8, r4
   143d8:	e7a4      	b.n	14324 <mfu_interface_getopt+0x70>
   143da:	202a      	movs	r0, #42	; 0x2a
   143dc:	f7fd f818 	bl	11410 <bsd_os_errno_set>
   143e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   143e4:	b002      	add	sp, #8
   143e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   143ea:	4a1d      	ldr	r2, [pc, #116]	; (14460 <mfu_interface_getopt+0x1ac>)
   143ec:	2108      	movs	r1, #8
   143ee:	6812      	ldr	r2, [r2, #0]
   143f0:	611a      	str	r2, [r3, #16]
   143f2:	e7af      	b.n	14354 <mfu_interface_getopt+0xa0>
   143f4:	203c      	movs	r0, #60	; 0x3c
   143f6:	f7fd f80b 	bl	11410 <bsd_os_errno_set>
   143fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   143fe:	b002      	add	sp, #8
   14400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14404:	9800      	ldr	r0, [sp, #0]
   14406:	6803      	ldr	r3, [r0, #0]
   14408:	b11b      	cbz	r3, 14412 <mfu_interface_getopt+0x15e>
   1440a:	4618      	mov	r0, r3
   1440c:	f7fe fce0 	bl	12dd0 <rpc_dfu_client_data_free>
   14410:	9800      	ldr	r0, [sp, #0]
   14412:	f7fe fcd5 	bl	12dc0 <rpc_dfu_client_message_free>
   14416:	200c      	movs	r0, #12
   14418:	f7fc fffa 	bl	11410 <bsd_os_errno_set>
   1441c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14420:	e7d2      	b.n	143c8 <mfu_interface_getopt+0x114>
   14422:	2016      	movs	r0, #22
   14424:	f7fc fff4 	bl	11410 <bsd_os_errno_set>
   14428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1442c:	e771      	b.n	14312 <mfu_interface_getopt+0x5e>
   1442e:	2001      	movs	r0, #1
   14430:	f7fc ffee 	bl	11410 <bsd_os_errno_set>
   14434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14438:	e76b      	b.n	14312 <mfu_interface_getopt+0x5e>
   1443a:	4b06      	ldr	r3, [pc, #24]	; (14454 <mfu_interface_getopt+0x1a0>)
   1443c:	2008      	movs	r0, #8
   1443e:	601c      	str	r4, [r3, #0]
   14440:	f7fc ffe6 	bl	11410 <bsd_os_errno_set>
   14444:	6838      	ldr	r0, [r7, #0]
   14446:	f7fe fcbb 	bl	12dc0 <rpc_dfu_client_message_free>
   1444a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1444e:	e760      	b.n	14312 <mfu_interface_getopt+0x5e>
   14450:	2002075c 	.word	0x2002075c
   14454:	20020760 	.word	0x20020760
   14458:	20024e1c 	.word	0x20024e1c
   1445c:	20020768 	.word	0x20020768
   14460:	20020764 	.word	0x20020764

00014464 <bsd_platform_error_handler>:
   14464:	b508      	push	{r3, lr}
   14466:	f7f8 f859 	bl	c51c <bsd_recoverable_error_handler>
   1446a:	bd08      	pop	{r3, pc}

0001446c <bsd_init>:
   1446c:	b510      	push	{r4, lr}
   1446e:	4c06      	ldr	r4, [pc, #24]	; (14488 <bsd_init+0x1c>)
   14470:	7823      	ldrb	r3, [r4, #0]
   14472:	b92b      	cbnz	r3, 14480 <bsd_init+0x14>
   14474:	f000 f826 	bl	144c4 <bsd_platform_init>
   14478:	b908      	cbnz	r0, 1447e <bsd_init+0x12>
   1447a:	2301      	movs	r3, #1
   1447c:	7023      	strb	r3, [r4, #0]
   1447e:	bd10      	pop	{r4, pc}
   14480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14484:	bd10      	pop	{r4, pc}
   14486:	bf00      	nop
   14488:	20026479 	.word	0x20026479

0001448c <bsd_shutdown>:
   1448c:	b510      	push	{r4, lr}
   1448e:	4c05      	ldr	r4, [pc, #20]	; (144a4 <bsd_shutdown+0x18>)
   14490:	7823      	ldrb	r3, [r4, #0]
   14492:	b123      	cbz	r3, 1449e <bsd_shutdown+0x12>
   14494:	f000 f87c 	bl	14590 <bsd_platform_shutdown>
   14498:	b900      	cbnz	r0, 1449c <bsd_shutdown+0x10>
   1449a:	7020      	strb	r0, [r4, #0]
   1449c:	bd10      	pop	{r4, pc}
   1449e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   144a2:	bd10      	pop	{r4, pc}
   144a4:	20026479 	.word	0x20026479

000144a8 <unimplemented_method>:
   144a8:	b40f      	push	{r0, r1, r2, r3}
   144aa:	b508      	push	{r3, lr}
   144ac:	202d      	movs	r0, #45	; 0x2d
   144ae:	f7fc ffaf 	bl	11410 <bsd_os_errno_set>
   144b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   144b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   144ba:	b004      	add	sp, #16
   144bc:	4770      	bx	lr
   144be:	bf00      	nop

000144c0 <rpc_transport_ipc_fault_handler>:
   144c0:	f7ff bfd0 	b.w	14464 <bsd_platform_error_handler>

000144c4 <bsd_platform_init>:
   144c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   144c6:	b093      	sub	sp, #76	; 0x4c
   144c8:	f7fe feba 	bl	13240 <nrf_mem_init>
   144cc:	2800      	cmp	r0, #0
   144ce:	d14c      	bne.n	1456a <bsd_platform_init+0xa6>
   144d0:	4928      	ldr	r1, [pc, #160]	; (14574 <bsd_platform_init+0xb0>)
   144d2:	a801      	add	r0, sp, #4
   144d4:	f7fe ff28 	bl	13328 <nrf_mem_register>
   144d8:	2800      	cmp	r0, #0
   144da:	d146      	bne.n	1456a <bsd_platform_init+0xa6>
   144dc:	f7fd f882 	bl	115e4 <bsd_os_init>
   144e0:	f004 fa68 	bl	189b4 <rpc_framework_init>
   144e4:	2800      	cmp	r0, #0
   144e6:	d140      	bne.n	1456a <bsd_platform_init+0xa6>
   144e8:	2320      	movs	r3, #32
   144ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   144ee:	2208      	movs	r2, #8
   144f0:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   144f4:	4f20      	ldr	r7, [pc, #128]	; (14578 <bsd_platform_init+0xb4>)
   144f6:	4e21      	ldr	r6, [pc, #132]	; (1457c <bsd_platform_init+0xb8>)
   144f8:	9303      	str	r3, [sp, #12]
   144fa:	9305      	str	r3, [sp, #20]
   144fc:	9307      	str	r3, [sp, #28]
   144fe:	4d20      	ldr	r5, [pc, #128]	; (14580 <bsd_platform_init+0xbc>)
   14500:	9109      	str	r1, [sp, #36]	; 0x24
   14502:	910d      	str	r1, [sp, #52]	; 0x34
   14504:	4c1f      	ldr	r4, [pc, #124]	; (14584 <bsd_platform_init+0xc0>)
   14506:	4920      	ldr	r1, [pc, #128]	; (14588 <bsd_platform_init+0xc4>)
   14508:	4b20      	ldr	r3, [pc, #128]	; (1458c <bsd_platform_init+0xc8>)
   1450a:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
   1450e:	eb0d 0002 	add.w	r0, sp, r2
   14512:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   14516:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
   1451a:	9702      	str	r7, [sp, #8]
   1451c:	9604      	str	r6, [sp, #16]
   1451e:	9506      	str	r5, [sp, #24]
   14520:	9408      	str	r4, [sp, #32]
   14522:	910a      	str	r1, [sp, #40]	; 0x28
   14524:	930c      	str	r3, [sp, #48]	; 0x30
   14526:	f000 fbe7 	bl	14cf8 <rpc_transport_ipc_init>
   1452a:	b108      	cbz	r0, 14530 <bsd_platform_init+0x6c>
   1452c:	b013      	add	sp, #76	; 0x4c
   1452e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14530:	f003 ffd0 	bl	184d4 <interface_init>
   14534:	b9c8      	cbnz	r0, 1456a <bsd_platform_init+0xa6>
   14536:	f7fe fac9 	bl	12acc <at_interface_init>
   1453a:	b9b0      	cbnz	r0, 1456a <bsd_platform_init+0xa6>
   1453c:	f002 fd08 	bl	16f50 <ip_interface_init>
   14540:	b998      	cbnz	r0, 1456a <bsd_platform_init+0xa6>
   14542:	f7ff f8e9 	bl	13718 <tls_interface_init>
   14546:	b980      	cbnz	r0, 1456a <bsd_platform_init+0xa6>
   14548:	f7ff fcb2 	bl	13eb0 <mfu_interface_init>
   1454c:	b968      	cbnz	r0, 1456a <bsd_platform_init+0xa6>
   1454e:	f001 fac3 	bl	15ad8 <pdn_interface_init>
   14552:	b950      	cbnz	r0, 1456a <bsd_platform_init+0xa6>
   14554:	f005 fcf8 	bl	19f48 <gnss_interface_init>
   14558:	b938      	cbnz	r0, 1456a <bsd_platform_init+0xa6>
   1455a:	f7fd ff79 	bl	12450 <logobj_interface_init>
   1455e:	3000      	adds	r0, #0
   14560:	bf18      	it	ne
   14562:	2001      	movne	r0, #1
   14564:	4240      	negs	r0, r0
   14566:	b013      	add	sp, #76	; 0x4c
   14568:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1456a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1456e:	b013      	add	sp, #76	; 0x4c
   14570:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14572:	bf00      	nop
   14574:	0001f1f0 	.word	0x0001f1f0
   14578:	20010000 	.word	0x20010000
   1457c:	20010040 	.word	0x20010040
   14580:	20010020 	.word	0x20010020
   14584:	20017060 	.word	0x20017060
   14588:	20010060 	.word	0x20010060
   1458c:	20013060 	.word	0x20013060

00014590 <bsd_platform_shutdown>:
   14590:	b508      	push	{r3, lr}
   14592:	f004 f947 	bl	18824 <interface_shutdown>
   14596:	f000 fc13 	bl	14dc0 <rpc_transport_ipc_shutdown>
   1459a:	2000      	movs	r0, #0
   1459c:	bd08      	pop	{r3, pc}
   1459e:	bf00      	nop

000145a0 <bsd_platform_af_method_table_get>:
   145a0:	2805      	cmp	r0, #5
   145a2:	d02a      	beq.n	145fa <bsd_platform_af_method_table_get+0x5a>
   145a4:	b508      	push	{r3, lr}
   145a6:	d914      	bls.n	145d2 <bsd_platform_af_method_table_get+0x32>
   145a8:	280a      	cmp	r0, #10
   145aa:	d016      	beq.n	145da <bsd_platform_af_method_table_get+0x3a>
   145ac:	2866      	cmp	r0, #102	; 0x66
   145ae:	d10b      	bne.n	145c8 <bsd_platform_af_method_table_get+0x28>
   145b0:	f240 2302 	movw	r3, #514	; 0x202
   145b4:	429a      	cmp	r2, r3
   145b6:	d032      	beq.n	1461e <bsd_platform_af_method_table_get+0x7e>
   145b8:	f240 2305 	movw	r3, #517	; 0x205
   145bc:	429a      	cmp	r2, r3
   145be:	d032      	beq.n	14626 <bsd_platform_af_method_table_get+0x86>
   145c0:	f240 2301 	movw	r3, #513	; 0x201
   145c4:	429a      	cmp	r2, r3
   145c6:	d02c      	beq.n	14622 <bsd_platform_af_method_table_get+0x82>
   145c8:	2016      	movs	r0, #22
   145ca:	f7fc ff21 	bl	11410 <bsd_os_errno_set>
   145ce:	2000      	movs	r0, #0
   145d0:	bd08      	pop	{r3, pc}
   145d2:	2801      	cmp	r0, #1
   145d4:	d016      	beq.n	14604 <bsd_platform_af_method_table_get+0x64>
   145d6:	2802      	cmp	r0, #2
   145d8:	d1f6      	bne.n	145c8 <bsd_platform_af_method_table_get+0x28>
   145da:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   145de:	2a0a      	cmp	r2, #10
   145e0:	d819      	bhi.n	14616 <bsd_platform_af_method_table_get+0x76>
   145e2:	2301      	movs	r3, #1
   145e4:	f240 4103 	movw	r1, #1027	; 0x403
   145e8:	4810      	ldr	r0, [pc, #64]	; (1462c <bsd_platform_af_method_table_get+0x8c>)
   145ea:	fa03 f202 	lsl.w	r2, r3, r2
   145ee:	420a      	tst	r2, r1
   145f0:	f100 0328 	add.w	r3, r0, #40	; 0x28
   145f4:	bf18      	it	ne
   145f6:	4618      	movne	r0, r3
   145f8:	bd08      	pop	{r3, pc}
   145fa:	2903      	cmp	r1, #3
   145fc:	480c      	ldr	r0, [pc, #48]	; (14630 <bsd_platform_af_method_table_get+0x90>)
   145fe:	bf18      	it	ne
   14600:	2000      	movne	r0, #0
   14602:	4770      	bx	lr
   14604:	f240 2303 	movw	r3, #515	; 0x203
   14608:	429a      	cmp	r2, r3
   1460a:	d006      	beq.n	1461a <bsd_platform_af_method_table_get+0x7a>
   1460c:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   14610:	d1da      	bne.n	145c8 <bsd_platform_af_method_table_get+0x28>
   14612:	4808      	ldr	r0, [pc, #32]	; (14634 <bsd_platform_af_method_table_get+0x94>)
   14614:	bd08      	pop	{r3, pc}
   14616:	4805      	ldr	r0, [pc, #20]	; (1462c <bsd_platform_af_method_table_get+0x8c>)
   14618:	bd08      	pop	{r3, pc}
   1461a:	4807      	ldr	r0, [pc, #28]	; (14638 <bsd_platform_af_method_table_get+0x98>)
   1461c:	bd08      	pop	{r3, pc}
   1461e:	4807      	ldr	r0, [pc, #28]	; (1463c <bsd_platform_af_method_table_get+0x9c>)
   14620:	bd08      	pop	{r3, pc}
   14622:	4807      	ldr	r0, [pc, #28]	; (14640 <bsd_platform_af_method_table_get+0xa0>)
   14624:	bd08      	pop	{r3, pc}
   14626:	4807      	ldr	r0, [pc, #28]	; (14644 <bsd_platform_af_method_table_get+0xa4>)
   14628:	bd08      	pop	{r3, pc}
   1462a:	bf00      	nop
   1462c:	0001f0c0 	.word	0x0001f0c0
   14630:	0001f1b0 	.word	0x0001f1b0
   14634:	0001f160 	.word	0x0001f160
   14638:	0001f110 	.word	0x0001f110
   1463c:	0001f138 	.word	0x0001f138
   14640:	0001f098 	.word	0x0001f098
   14644:	0001f188 	.word	0x0001f188

00014648 <bsd_platform_fd_method_table_get>:
   14648:	b538      	push	{r3, r4, r5, lr}
   1464a:	4605      	mov	r5, r0
   1464c:	f004 f85e 	bl	1870c <interface_socket_from_handle_get>
   14650:	4604      	mov	r4, r0
   14652:	b950      	cbnz	r0, 1466a <bsd_platform_fd_method_table_get+0x22>
   14654:	4b2a      	ldr	r3, [pc, #168]	; (14700 <bsd_platform_fd_method_table_get+0xb8>)
   14656:	43ab      	bics	r3, r5
   14658:	d032      	beq.n	146c0 <bsd_platform_fd_method_table_get+0x78>
   1465a:	4b2a      	ldr	r3, [pc, #168]	; (14704 <bsd_platform_fd_method_table_get+0xbc>)
   1465c:	43ab      	bics	r3, r5
   1465e:	d043      	beq.n	146e8 <bsd_platform_fd_method_table_get+0xa0>
   14660:	4b29      	ldr	r3, [pc, #164]	; (14708 <bsd_platform_fd_method_table_get+0xc0>)
   14662:	43ab      	bics	r3, r5
   14664:	d146      	bne.n	146f4 <bsd_platform_fd_method_table_get+0xac>
   14666:	4829      	ldr	r0, [pc, #164]	; (1470c <bsd_platform_fd_method_table_get+0xc4>)
   14668:	bd38      	pop	{r3, r4, r5, pc}
   1466a:	68c3      	ldr	r3, [r0, #12]
   1466c:	6942      	ldr	r2, [r0, #20]
   1466e:	2b05      	cmp	r3, #5
   14670:	d034      	beq.n	146dc <bsd_platform_fd_method_table_get+0x94>
   14672:	d911      	bls.n	14698 <bsd_platform_fd_method_table_get+0x50>
   14674:	2b0a      	cmp	r3, #10
   14676:	d013      	beq.n	146a0 <bsd_platform_fd_method_table_get+0x58>
   14678:	2b66      	cmp	r3, #102	; 0x66
   1467a:	d12a      	bne.n	146d2 <bsd_platform_fd_method_table_get+0x8a>
   1467c:	f240 2302 	movw	r3, #514	; 0x202
   14680:	429a      	cmp	r2, r3
   14682:	d031      	beq.n	146e8 <bsd_platform_fd_method_table_get+0xa0>
   14684:	f240 2305 	movw	r3, #517	; 0x205
   14688:	429a      	cmp	r2, r3
   1468a:	d031      	beq.n	146f0 <bsd_platform_fd_method_table_get+0xa8>
   1468c:	f240 2301 	movw	r3, #513	; 0x201
   14690:	429a      	cmp	r2, r3
   14692:	d11e      	bne.n	146d2 <bsd_platform_fd_method_table_get+0x8a>
   14694:	481e      	ldr	r0, [pc, #120]	; (14710 <bsd_platform_fd_method_table_get+0xc8>)
   14696:	bd38      	pop	{r3, r4, r5, pc}
   14698:	2b01      	cmp	r3, #1
   1469a:	d013      	beq.n	146c4 <bsd_platform_fd_method_table_get+0x7c>
   1469c:	2b02      	cmp	r3, #2
   1469e:	d118      	bne.n	146d2 <bsd_platform_fd_method_table_get+0x8a>
   146a0:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   146a4:	2a0a      	cmp	r2, #10
   146a6:	d821      	bhi.n	146ec <bsd_platform_fd_method_table_get+0xa4>
   146a8:	2301      	movs	r3, #1
   146aa:	f240 4103 	movw	r1, #1027	; 0x403
   146ae:	4819      	ldr	r0, [pc, #100]	; (14714 <bsd_platform_fd_method_table_get+0xcc>)
   146b0:	fa03 f202 	lsl.w	r2, r3, r2
   146b4:	420a      	tst	r2, r1
   146b6:	f100 0428 	add.w	r4, r0, #40	; 0x28
   146ba:	bf18      	it	ne
   146bc:	4620      	movne	r0, r4
   146be:	bd38      	pop	{r3, r4, r5, pc}
   146c0:	4815      	ldr	r0, [pc, #84]	; (14718 <bsd_platform_fd_method_table_get+0xd0>)
   146c2:	bd38      	pop	{r3, r4, r5, pc}
   146c4:	f240 2303 	movw	r3, #515	; 0x203
   146c8:	429a      	cmp	r2, r3
   146ca:	d0f9      	beq.n	146c0 <bsd_platform_fd_method_table_get+0x78>
   146cc:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   146d0:	d0c9      	beq.n	14666 <bsd_platform_fd_method_table_get+0x1e>
   146d2:	2016      	movs	r0, #22
   146d4:	f7fc fe9c 	bl	11410 <bsd_os_errno_set>
   146d8:	2000      	movs	r0, #0
   146da:	bd38      	pop	{r3, r4, r5, pc}
   146dc:	6903      	ldr	r3, [r0, #16]
   146de:	480f      	ldr	r0, [pc, #60]	; (1471c <bsd_platform_fd_method_table_get+0xd4>)
   146e0:	2b03      	cmp	r3, #3
   146e2:	bf18      	it	ne
   146e4:	2000      	movne	r0, #0
   146e6:	bd38      	pop	{r3, r4, r5, pc}
   146e8:	480d      	ldr	r0, [pc, #52]	; (14720 <bsd_platform_fd_method_table_get+0xd8>)
   146ea:	bd38      	pop	{r3, r4, r5, pc}
   146ec:	4809      	ldr	r0, [pc, #36]	; (14714 <bsd_platform_fd_method_table_get+0xcc>)
   146ee:	bd38      	pop	{r3, r4, r5, pc}
   146f0:	480c      	ldr	r0, [pc, #48]	; (14724 <bsd_platform_fd_method_table_get+0xdc>)
   146f2:	bd38      	pop	{r3, r4, r5, pc}
   146f4:	2009      	movs	r0, #9
   146f6:	f7fc fe8b 	bl	11410 <bsd_os_errno_set>
   146fa:	4620      	mov	r0, r4
   146fc:	bd38      	pop	{r3, r4, r5, pc}
   146fe:	bf00      	nop
   14700:	49765432 	.word	0x49765432
   14704:	789a0000 	.word	0x789a0000
   14708:	49765443 	.word	0x49765443
   1470c:	0001f160 	.word	0x0001f160
   14710:	0001f098 	.word	0x0001f098
   14714:	0001f0c0 	.word	0x0001f0c0
   14718:	0001f110 	.word	0x0001f110
   1471c:	0001f1b0 	.word	0x0001f1b0
   14720:	0001f138 	.word	0x0001f138
   14724:	0001f188 	.word	0x0001f188

00014728 <bsd_platform_getaddrinfo>:
   14728:	f003 bb58 	b.w	17ddc <ip_interface_getaddrinfo>

0001472c <bsd_platform_freeaddrinfo>:
   1472c:	f003 bc4c 	b.w	17fc8 <ip_interface_freeaddrinfo>

00014730 <bsd_platform_poll>:
   14730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14734:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   14738:	b083      	sub	sp, #12
   1473a:	9200      	str	r2, [sp, #0]
   1473c:	2800      	cmp	r0, #0
   1473e:	d048      	beq.n	147d2 <bsd_platform_poll+0xa2>
   14740:	1e4b      	subs	r3, r1, #1
   14742:	2b07      	cmp	r3, #7
   14744:	d845      	bhi.n	147d2 <bsd_platform_poll+0xa2>
   14746:	4680      	mov	r8, r0
   14748:	4605      	mov	r5, r0
   1474a:	2400      	movs	r4, #0
   1474c:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   14750:	88ab      	ldrh	r3, [r5, #4]
   14752:	6828      	ldr	r0, [r5, #0]
   14754:	f003 0303 	and.w	r3, r3, #3
   14758:	a901      	add	r1, sp, #4
   1475a:	f043 061c 	orr.w	r6, r3, #28
   1475e:	f003 ffe3 	bl	18728 <interface_socket_event_get>
   14762:	9b01      	ldr	r3, [sp, #4]
   14764:	3508      	adds	r5, #8
   14766:	4033      	ands	r3, r6
   14768:	f825 3c02 	strh.w	r3, [r5, #-2]
   1476c:	b103      	cbz	r3, 14770 <bsd_platform_poll+0x40>
   1476e:	3401      	adds	r4, #1
   14770:	42af      	cmp	r7, r5
   14772:	d1ed      	bne.n	14750 <bsd_platform_poll+0x20>
   14774:	bb9c      	cbnz	r4, 147de <bsd_platform_poll+0xae>
   14776:	4669      	mov	r1, sp
   14778:	4640      	mov	r0, r8
   1477a:	f7fc fdb5 	bl	112e8 <bsd_os_timedwait>
   1477e:	4607      	mov	r7, r0
   14780:	b108      	cbz	r0, 14786 <bsd_platform_poll+0x56>
   14782:	283c      	cmp	r0, #60	; 0x3c
   14784:	d11d      	bne.n	147c2 <bsd_platform_poll+0x92>
   14786:	46c1      	mov	r9, r8
   14788:	2600      	movs	r6, #0
   1478a:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   1478e:	f8d9 0000 	ldr.w	r0, [r9]
   14792:	f003 0303 	and.w	r3, r3, #3
   14796:	a901      	add	r1, sp, #4
   14798:	f043 041c 	orr.w	r4, r3, #28
   1479c:	f003 ffc4 	bl	18728 <interface_socket_event_get>
   147a0:	9b01      	ldr	r3, [sp, #4]
   147a2:	f109 0908 	add.w	r9, r9, #8
   147a6:	4023      	ands	r3, r4
   147a8:	f829 3c02 	strh.w	r3, [r9, #-2]
   147ac:	b103      	cbz	r3, 147b0 <bsd_platform_poll+0x80>
   147ae:	3601      	adds	r6, #1
   147b0:	454d      	cmp	r5, r9
   147b2:	d1ea      	bne.n	1478a <bsd_platform_poll+0x5a>
   147b4:	b90e      	cbnz	r6, 147ba <bsd_platform_poll+0x8a>
   147b6:	2f00      	cmp	r7, #0
   147b8:	d0dd      	beq.n	14776 <bsd_platform_poll+0x46>
   147ba:	4630      	mov	r0, r6
   147bc:	b003      	add	sp, #12
   147be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   147c2:	2023      	movs	r0, #35	; 0x23
   147c4:	f7fc fe24 	bl	11410 <bsd_os_errno_set>
   147c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   147cc:	b003      	add	sp, #12
   147ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   147d2:	2016      	movs	r0, #22
   147d4:	f7fc fe1c 	bl	11410 <bsd_os_errno_set>
   147d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   147dc:	e7ee      	b.n	147bc <bsd_platform_poll+0x8c>
   147de:	4620      	mov	r0, r4
   147e0:	e7ec      	b.n	147bc <bsd_platform_poll+0x8c>
   147e2:	bf00      	nop

000147e4 <bsd_platform_fcntl>:
   147e4:	b508      	push	{r3, lr}
   147e6:	4b06      	ldr	r3, [pc, #24]	; (14800 <bsd_platform_fcntl+0x1c>)
   147e8:	4383      	bics	r3, r0
   147ea:	d003      	beq.n	147f4 <bsd_platform_fcntl+0x10>
   147ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   147f0:	f004 b846 	b.w	18880 <interface_socket_fcntl>
   147f4:	202d      	movs	r0, #45	; 0x2d
   147f6:	f7fc fe0b 	bl	11410 <bsd_os_errno_set>
   147fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   147fe:	bd08      	pop	{r3, pc}
   14800:	49765432 	.word	0x49765432

00014804 <ipc_trace_init>:
   14804:	4b01      	ldr	r3, [pc, #4]	; (1480c <ipc_trace_init+0x8>)
   14806:	6018      	str	r0, [r3, #0]
   14808:	4770      	bx	lr
   1480a:	bf00      	nop
   1480c:	20020778 	.word	0x20020778

00014810 <bsd_os_trace_irq_handler>:
   14810:	b5f0      	push	{r4, r5, r6, r7, lr}
   14812:	4b6c      	ldr	r3, [pc, #432]	; (149c4 <bsd_os_trace_irq_handler+0x1b4>)
   14814:	b083      	sub	sp, #12
   14816:	781b      	ldrb	r3, [r3, #0]
   14818:	2b00      	cmp	r3, #0
   1481a:	f000 80ad 	beq.w	14978 <bsd_os_trace_irq_handler+0x168>
   1481e:	4b6a      	ldr	r3, [pc, #424]	; (149c8 <bsd_os_trace_irq_handler+0x1b8>)
   14820:	681c      	ldr	r4, [r3, #0]
   14822:	68a2      	ldr	r2, [r4, #8]
   14824:	6863      	ldr	r3, [r4, #4]
   14826:	429a      	cmp	r2, r3
   14828:	d02d      	beq.n	14886 <bsd_os_trace_irq_handler+0x76>
   1482a:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   1482e:	f8ad 3000 	strh.w	r3, [sp]
   14832:	7823      	ldrb	r3, [r4, #0]
   14834:	466e      	mov	r6, sp
   14836:	f88d 3004 	strb.w	r3, [sp, #4]
   1483a:	6863      	ldr	r3, [r4, #4]
   1483c:	2105      	movs	r1, #5
   1483e:	429a      	cmp	r2, r3
   14840:	bf2a      	itet	cs
   14842:	6927      	ldrcs	r7, [r4, #16]
   14844:	1a9f      	subcc	r7, r3, r2
   14846:	1abf      	subcs	r7, r7, r2
   14848:	429a      	cmp	r2, r3
   1484a:	bf94      	ite	ls
   1484c:	2500      	movls	r5, #0
   1484e:	68e5      	ldrhi	r5, [r4, #12]
   14850:	b2bf      	uxth	r7, r7
   14852:	bf88      	it	hi
   14854:	1b5b      	subhi	r3, r3, r5
   14856:	4630      	mov	r0, r6
   14858:	bf88      	it	hi
   1485a:	b29d      	uxthhi	r5, r3
   1485c:	f8ad 7002 	strh.w	r7, [sp, #2]
   14860:	f7fc fed8 	bl	11614 <bsd_os_trace_put>
   14864:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14868:	68a0      	ldr	r0, [r4, #8]
   1486a:	f7fc fed3 	bl	11614 <bsd_os_trace_put>
   1486e:	68a3      	ldr	r3, [r4, #8]
   14870:	6922      	ldr	r2, [r4, #16]
   14872:	441f      	add	r7, r3
   14874:	4297      	cmp	r7, r2
   14876:	bf08      	it	eq
   14878:	68e3      	ldreq	r3, [r4, #12]
   1487a:	60a7      	str	r7, [r4, #8]
   1487c:	bf08      	it	eq
   1487e:	60a3      	streq	r3, [r4, #8]
   14880:	2d00      	cmp	r5, #0
   14882:	f040 808d 	bne.w	149a0 <bsd_os_trace_irq_handler+0x190>
   14886:	4b51      	ldr	r3, [pc, #324]	; (149cc <bsd_os_trace_irq_handler+0x1bc>)
   14888:	681c      	ldr	r4, [r3, #0]
   1488a:	68a2      	ldr	r2, [r4, #8]
   1488c:	6863      	ldr	r3, [r4, #4]
   1488e:	429a      	cmp	r2, r3
   14890:	d02c      	beq.n	148ec <bsd_os_trace_irq_handler+0xdc>
   14892:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   14896:	f8ad 3000 	strh.w	r3, [sp]
   1489a:	7823      	ldrb	r3, [r4, #0]
   1489c:	466e      	mov	r6, sp
   1489e:	f88d 3004 	strb.w	r3, [sp, #4]
   148a2:	6863      	ldr	r3, [r4, #4]
   148a4:	2105      	movs	r1, #5
   148a6:	429a      	cmp	r2, r3
   148a8:	bf2a      	itet	cs
   148aa:	6927      	ldrcs	r7, [r4, #16]
   148ac:	1a9f      	subcc	r7, r3, r2
   148ae:	1abf      	subcs	r7, r7, r2
   148b0:	429a      	cmp	r2, r3
   148b2:	bf94      	ite	ls
   148b4:	2500      	movls	r5, #0
   148b6:	68e5      	ldrhi	r5, [r4, #12]
   148b8:	b2bf      	uxth	r7, r7
   148ba:	bf88      	it	hi
   148bc:	1b5b      	subhi	r3, r3, r5
   148be:	4630      	mov	r0, r6
   148c0:	bf88      	it	hi
   148c2:	b29d      	uxthhi	r5, r3
   148c4:	f8ad 7002 	strh.w	r7, [sp, #2]
   148c8:	f7fc fea4 	bl	11614 <bsd_os_trace_put>
   148cc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   148d0:	68a0      	ldr	r0, [r4, #8]
   148d2:	f7fc fe9f 	bl	11614 <bsd_os_trace_put>
   148d6:	68a3      	ldr	r3, [r4, #8]
   148d8:	6922      	ldr	r2, [r4, #16]
   148da:	441f      	add	r7, r3
   148dc:	4297      	cmp	r7, r2
   148de:	bf08      	it	eq
   148e0:	68e3      	ldreq	r3, [r4, #12]
   148e2:	60a7      	str	r7, [r4, #8]
   148e4:	bf08      	it	eq
   148e6:	60a3      	streq	r3, [r4, #8]
   148e8:	2d00      	cmp	r5, #0
   148ea:	d148      	bne.n	1497e <bsd_os_trace_irq_handler+0x16e>
   148ec:	4b38      	ldr	r3, [pc, #224]	; (149d0 <bsd_os_trace_irq_handler+0x1c0>)
   148ee:	681c      	ldr	r4, [r3, #0]
   148f0:	68a2      	ldr	r2, [r4, #8]
   148f2:	6863      	ldr	r3, [r4, #4]
   148f4:	429a      	cmp	r2, r3
   148f6:	d02b      	beq.n	14950 <bsd_os_trace_irq_handler+0x140>
   148f8:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   148fc:	f8ad 3000 	strh.w	r3, [sp]
   14900:	7823      	ldrb	r3, [r4, #0]
   14902:	466e      	mov	r6, sp
   14904:	f88d 3004 	strb.w	r3, [sp, #4]
   14908:	6863      	ldr	r3, [r4, #4]
   1490a:	2105      	movs	r1, #5
   1490c:	429a      	cmp	r2, r3
   1490e:	bf2a      	itet	cs
   14910:	6927      	ldrcs	r7, [r4, #16]
   14912:	1a9f      	subcc	r7, r3, r2
   14914:	1abf      	subcs	r7, r7, r2
   14916:	429a      	cmp	r2, r3
   14918:	bf94      	ite	ls
   1491a:	2500      	movls	r5, #0
   1491c:	68e5      	ldrhi	r5, [r4, #12]
   1491e:	b2bf      	uxth	r7, r7
   14920:	bf88      	it	hi
   14922:	1b5b      	subhi	r3, r3, r5
   14924:	4630      	mov	r0, r6
   14926:	bf88      	it	hi
   14928:	b29d      	uxthhi	r5, r3
   1492a:	f8ad 7002 	strh.w	r7, [sp, #2]
   1492e:	f7fc fe71 	bl	11614 <bsd_os_trace_put>
   14932:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14936:	68a0      	ldr	r0, [r4, #8]
   14938:	f7fc fe6c 	bl	11614 <bsd_os_trace_put>
   1493c:	68a3      	ldr	r3, [r4, #8]
   1493e:	6922      	ldr	r2, [r4, #16]
   14940:	441f      	add	r7, r3
   14942:	4297      	cmp	r7, r2
   14944:	bf08      	it	eq
   14946:	68e3      	ldreq	r3, [r4, #12]
   14948:	60a7      	str	r7, [r4, #8]
   1494a:	bf08      	it	eq
   1494c:	60a3      	streq	r3, [r4, #8]
   1494e:	b90d      	cbnz	r5, 14954 <bsd_os_trace_irq_handler+0x144>
   14950:	b003      	add	sp, #12
   14952:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14954:	4630      	mov	r0, r6
   14956:	2105      	movs	r1, #5
   14958:	f8ad 5002 	strh.w	r5, [sp, #2]
   1495c:	f7fc fe5a 	bl	11614 <bsd_os_trace_put>
   14960:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14964:	68e0      	ldr	r0, [r4, #12]
   14966:	f7fc fe55 	bl	11614 <bsd_os_trace_put>
   1496a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1496e:	68e3      	ldr	r3, [r4, #12]
   14970:	4413      	add	r3, r2
   14972:	60a3      	str	r3, [r4, #8]
   14974:	b003      	add	sp, #12
   14976:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14978:	f7fc fe0e 	bl	11598 <bsd_os_trace_irq_clear>
   1497c:	e74f      	b.n	1481e <bsd_os_trace_irq_handler+0xe>
   1497e:	2105      	movs	r1, #5
   14980:	4630      	mov	r0, r6
   14982:	f8ad 5002 	strh.w	r5, [sp, #2]
   14986:	f7fc fe45 	bl	11614 <bsd_os_trace_put>
   1498a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1498e:	68e0      	ldr	r0, [r4, #12]
   14990:	f7fc fe40 	bl	11614 <bsd_os_trace_put>
   14994:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14998:	68e3      	ldr	r3, [r4, #12]
   1499a:	4413      	add	r3, r2
   1499c:	60a3      	str	r3, [r4, #8]
   1499e:	e7a5      	b.n	148ec <bsd_os_trace_irq_handler+0xdc>
   149a0:	2105      	movs	r1, #5
   149a2:	4630      	mov	r0, r6
   149a4:	f8ad 5002 	strh.w	r5, [sp, #2]
   149a8:	f7fc fe34 	bl	11614 <bsd_os_trace_put>
   149ac:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   149b0:	68e0      	ldr	r0, [r4, #12]
   149b2:	f7fc fe2f 	bl	11614 <bsd_os_trace_put>
   149b6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   149ba:	68e3      	ldr	r3, [r4, #12]
   149bc:	4413      	add	r3, r2
   149be:	60a3      	str	r3, [r4, #8]
   149c0:	e761      	b.n	14886 <bsd_os_trace_irq_handler+0x76>
   149c2:	bf00      	nop
   149c4:	2002647a 	.word	0x2002647a
   149c8:	20020774 	.word	0x20020774
   149cc:	2002076c 	.word	0x2002076c
   149d0:	20020770 	.word	0x20020770

000149d4 <ipc_trace_handle>:
   149d4:	2200      	movs	r2, #0
   149d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149da:	4bb0      	ldr	r3, [pc, #704]	; (14c9c <_flash_used+0x1d0>)
   149dc:	b083      	sub	sp, #12
   149de:	681b      	ldr	r3, [r3, #0]
   149e0:	6919      	ldr	r1, [r3, #16]
   149e2:	695c      	ldr	r4, [r3, #20]
   149e4:	7c18      	ldrb	r0, [r3, #16]
   149e6:	741a      	strb	r2, [r3, #16]
   149e8:	7c58      	ldrb	r0, [r3, #17]
   149ea:	745a      	strb	r2, [r3, #17]
   149ec:	7c98      	ldrb	r0, [r3, #18]
   149ee:	749a      	strb	r2, [r3, #18]
   149f0:	7cd8      	ldrb	r0, [r3, #19]
   149f2:	74da      	strb	r2, [r3, #19]
   149f4:	7d18      	ldrb	r0, [r3, #20]
   149f6:	751a      	strb	r2, [r3, #20]
   149f8:	7d58      	ldrb	r0, [r3, #21]
   149fa:	755a      	strb	r2, [r3, #21]
   149fc:	7d98      	ldrb	r0, [r3, #22]
   149fe:	759a      	strb	r2, [r3, #22]
   14a00:	7dd8      	ldrb	r0, [r3, #23]
   14a02:	75da      	strb	r2, [r3, #23]
   14a04:	b1b9      	cbz	r1, 14a36 <ipc_trace_handle+0x62>
   14a06:	3901      	subs	r1, #1
   14a08:	2903      	cmp	r1, #3
   14a0a:	d814      	bhi.n	14a36 <ipc_trace_handle+0x62>
   14a0c:	e8df f011 	tbh	[pc, r1, lsl #1]
   14a10:	010300d6 	.word	0x010300d6
   14a14:	00160004 	.word	0x00160004
   14a18:	2501      	movs	r5, #1
   14a1a:	2003      	movs	r0, #3
   14a1c:	2200      	movs	r2, #0
   14a1e:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   14a22:	4c9f      	ldr	r4, [pc, #636]	; (14ca0 <_flash_used+0x1d4>)
   14a24:	7025      	strb	r5, [r4, #0]
   14a26:	7a1c      	ldrb	r4, [r3, #8]
   14a28:	7218      	strb	r0, [r3, #8]
   14a2a:	7a58      	ldrb	r0, [r3, #9]
   14a2c:	725a      	strb	r2, [r3, #9]
   14a2e:	7a98      	ldrb	r0, [r3, #10]
   14a30:	729a      	strb	r2, [r3, #10]
   14a32:	7ada      	ldrb	r2, [r3, #11]
   14a34:	72d9      	strb	r1, [r3, #11]
   14a36:	b003      	add	sp, #12
   14a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a3c:	2104      	movs	r1, #4
   14a3e:	2200      	movs	r2, #0
   14a40:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   14a44:	7a1c      	ldrb	r4, [r3, #8]
   14a46:	7219      	strb	r1, [r3, #8]
   14a48:	7a59      	ldrb	r1, [r3, #9]
   14a4a:	725a      	strb	r2, [r3, #9]
   14a4c:	4994      	ldr	r1, [pc, #592]	; (14ca0 <_flash_used+0x1d4>)
   14a4e:	7a9c      	ldrb	r4, [r3, #10]
   14a50:	729a      	strb	r2, [r3, #10]
   14a52:	7adc      	ldrb	r4, [r3, #11]
   14a54:	72d8      	strb	r0, [r3, #11]
   14a56:	700a      	strb	r2, [r1, #0]
   14a58:	780b      	ldrb	r3, [r1, #0]
   14a5a:	2b00      	cmp	r3, #0
   14a5c:	f000 8117 	beq.w	14c8e <_flash_used+0x1c2>
   14a60:	4b90      	ldr	r3, [pc, #576]	; (14ca4 <_flash_used+0x1d8>)
   14a62:	681c      	ldr	r4, [r3, #0]
   14a64:	68a2      	ldr	r2, [r4, #8]
   14a66:	6863      	ldr	r3, [r4, #4]
   14a68:	429a      	cmp	r2, r3
   14a6a:	d02d      	beq.n	14ac8 <ipc_trace_handle+0xf4>
   14a6c:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   14a70:	f8ad 3000 	strh.w	r3, [sp]
   14a74:	7823      	ldrb	r3, [r4, #0]
   14a76:	466e      	mov	r6, sp
   14a78:	f88d 3004 	strb.w	r3, [sp, #4]
   14a7c:	6863      	ldr	r3, [r4, #4]
   14a7e:	2105      	movs	r1, #5
   14a80:	429a      	cmp	r2, r3
   14a82:	bf2a      	itet	cs
   14a84:	6927      	ldrcs	r7, [r4, #16]
   14a86:	1a9f      	subcc	r7, r3, r2
   14a88:	1abf      	subcs	r7, r7, r2
   14a8a:	429a      	cmp	r2, r3
   14a8c:	bf94      	ite	ls
   14a8e:	2500      	movls	r5, #0
   14a90:	68e5      	ldrhi	r5, [r4, #12]
   14a92:	b2bf      	uxth	r7, r7
   14a94:	bf88      	it	hi
   14a96:	1b5b      	subhi	r3, r3, r5
   14a98:	4630      	mov	r0, r6
   14a9a:	bf88      	it	hi
   14a9c:	b29d      	uxthhi	r5, r3
   14a9e:	f8ad 7002 	strh.w	r7, [sp, #2]
   14aa2:	f7fc fdb7 	bl	11614 <bsd_os_trace_put>
   14aa6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14aaa:	68a0      	ldr	r0, [r4, #8]
   14aac:	f7fc fdb2 	bl	11614 <bsd_os_trace_put>
   14ab0:	68a3      	ldr	r3, [r4, #8]
   14ab2:	6922      	ldr	r2, [r4, #16]
   14ab4:	441f      	add	r7, r3
   14ab6:	4297      	cmp	r7, r2
   14ab8:	bf08      	it	eq
   14aba:	68e3      	ldreq	r3, [r4, #12]
   14abc:	60a7      	str	r7, [r4, #8]
   14abe:	bf08      	it	eq
   14ac0:	60a3      	streq	r3, [r4, #8]
   14ac2:	2d00      	cmp	r5, #0
   14ac4:	f040 80d2 	bne.w	14c6c <_flash_used+0x1a0>
   14ac8:	4b77      	ldr	r3, [pc, #476]	; (14ca8 <_flash_used+0x1dc>)
   14aca:	681c      	ldr	r4, [r3, #0]
   14acc:	68a2      	ldr	r2, [r4, #8]
   14ace:	6863      	ldr	r3, [r4, #4]
   14ad0:	429a      	cmp	r2, r3
   14ad2:	d02d      	beq.n	14b30 <_flash_used+0x64>
   14ad4:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   14ad8:	f8ad 3000 	strh.w	r3, [sp]
   14adc:	7823      	ldrb	r3, [r4, #0]
   14ade:	466e      	mov	r6, sp
   14ae0:	f88d 3004 	strb.w	r3, [sp, #4]
   14ae4:	6863      	ldr	r3, [r4, #4]
   14ae6:	2105      	movs	r1, #5
   14ae8:	429a      	cmp	r2, r3
   14aea:	bf2a      	itet	cs
   14aec:	6927      	ldrcs	r7, [r4, #16]
   14aee:	1a9f      	subcc	r7, r3, r2
   14af0:	1abf      	subcs	r7, r7, r2
   14af2:	429a      	cmp	r2, r3
   14af4:	bf94      	ite	ls
   14af6:	2500      	movls	r5, #0
   14af8:	68e5      	ldrhi	r5, [r4, #12]
   14afa:	b2bf      	uxth	r7, r7
   14afc:	bf88      	it	hi
   14afe:	1b5b      	subhi	r3, r3, r5
   14b00:	4630      	mov	r0, r6
   14b02:	bf88      	it	hi
   14b04:	b29d      	uxthhi	r5, r3
   14b06:	f8ad 7002 	strh.w	r7, [sp, #2]
   14b0a:	f7fc fd83 	bl	11614 <bsd_os_trace_put>
   14b0e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14b12:	68a0      	ldr	r0, [r4, #8]
   14b14:	f7fc fd7e 	bl	11614 <bsd_os_trace_put>
   14b18:	68a3      	ldr	r3, [r4, #8]
   14b1a:	6922      	ldr	r2, [r4, #16]
   14b1c:	441f      	add	r7, r3
   14b1e:	4297      	cmp	r7, r2
   14b20:	bf08      	it	eq
   14b22:	68e3      	ldreq	r3, [r4, #12]
   14b24:	60a7      	str	r7, [r4, #8]
   14b26:	bf08      	it	eq
   14b28:	60a3      	streq	r3, [r4, #8]
   14b2a:	2d00      	cmp	r5, #0
   14b2c:	f040 808d 	bne.w	14c4a <_flash_used+0x17e>
   14b30:	4b5e      	ldr	r3, [pc, #376]	; (14cac <_flash_used+0x1e0>)
   14b32:	681c      	ldr	r4, [r3, #0]
   14b34:	68a2      	ldr	r2, [r4, #8]
   14b36:	6863      	ldr	r3, [r4, #4]
   14b38:	429a      	cmp	r2, r3
   14b3a:	f43f af7c 	beq.w	14a36 <ipc_trace_handle+0x62>
   14b3e:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   14b42:	f8ad 3000 	strh.w	r3, [sp]
   14b46:	7823      	ldrb	r3, [r4, #0]
   14b48:	466e      	mov	r6, sp
   14b4a:	f88d 3004 	strb.w	r3, [sp, #4]
   14b4e:	6863      	ldr	r3, [r4, #4]
   14b50:	2105      	movs	r1, #5
   14b52:	429a      	cmp	r2, r3
   14b54:	bf2a      	itet	cs
   14b56:	6927      	ldrcs	r7, [r4, #16]
   14b58:	1a9f      	subcc	r7, r3, r2
   14b5a:	1abf      	subcs	r7, r7, r2
   14b5c:	429a      	cmp	r2, r3
   14b5e:	bf94      	ite	ls
   14b60:	2500      	movls	r5, #0
   14b62:	68e5      	ldrhi	r5, [r4, #12]
   14b64:	b2bf      	uxth	r7, r7
   14b66:	bf88      	it	hi
   14b68:	1b5b      	subhi	r3, r3, r5
   14b6a:	4630      	mov	r0, r6
   14b6c:	bf88      	it	hi
   14b6e:	b29d      	uxthhi	r5, r3
   14b70:	f8ad 7002 	strh.w	r7, [sp, #2]
   14b74:	f7fc fd4e 	bl	11614 <bsd_os_trace_put>
   14b78:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14b7c:	68a0      	ldr	r0, [r4, #8]
   14b7e:	f7fc fd49 	bl	11614 <bsd_os_trace_put>
   14b82:	68a3      	ldr	r3, [r4, #8]
   14b84:	6922      	ldr	r2, [r4, #16]
   14b86:	441f      	add	r7, r3
   14b88:	4297      	cmp	r7, r2
   14b8a:	bf08      	it	eq
   14b8c:	68e3      	ldreq	r3, [r4, #12]
   14b8e:	60a7      	str	r7, [r4, #8]
   14b90:	bf08      	it	eq
   14b92:	60a3      	streq	r3, [r4, #8]
   14b94:	2d00      	cmp	r5, #0
   14b96:	f43f af4e 	beq.w	14a36 <ipc_trace_handle+0x62>
   14b9a:	2105      	movs	r1, #5
   14b9c:	4630      	mov	r0, r6
   14b9e:	f8ad 5002 	strh.w	r5, [sp, #2]
   14ba2:	f7fc fd37 	bl	11614 <bsd_os_trace_put>
   14ba6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14baa:	68e0      	ldr	r0, [r4, #12]
   14bac:	f7fc fd32 	bl	11614 <bsd_os_trace_put>
   14bb0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14bb4:	68e3      	ldr	r3, [r4, #12]
   14bb6:	4413      	add	r3, r2
   14bb8:	60a3      	str	r3, [r4, #8]
   14bba:	e73c      	b.n	14a36 <ipc_trace_handle+0x62>
   14bbc:	4a38      	ldr	r2, [pc, #224]	; (14ca0 <_flash_used+0x1d4>)
   14bbe:	7811      	ldrb	r1, [r2, #0]
   14bc0:	b109      	cbz	r1, 14bc6 <_flash_used+0xfa>
   14bc2:	2100      	movs	r1, #0
   14bc4:	7011      	strb	r1, [r2, #0]
   14bc6:	68a5      	ldr	r5, [r4, #8]
   14bc8:	2d00      	cmp	r5, #0
   14bca:	d039      	beq.n	14c40 <_flash_used+0x174>
   14bcc:	f04f 0c00 	mov.w	ip, #0
   14bd0:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 14ca8 <_flash_used+0x1dc>
   14bd4:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 14ca4 <_flash_used+0x1d8>
   14bd8:	4934      	ldr	r1, [pc, #208]	; (14cac <_flash_used+0x1e0>)
   14bda:	46e1      	mov	r9, ip
   14bdc:	4666      	mov	r6, ip
   14bde:	4662      	mov	r2, ip
   14be0:	f8d1 e000 	ldr.w	lr, [r1]
   14be4:	f8da 8000 	ldr.w	r8, [sl]
   14be8:	f8db 7000 	ldr.w	r7, [fp]
   14bec:	e008      	b.n	14c00 <_flash_used+0x134>
   14bee:	2963      	cmp	r1, #99	; 0x63
   14bf0:	d016      	beq.n	14c20 <_flash_used+0x154>
   14bf2:	2961      	cmp	r1, #97	; 0x61
   14bf4:	bf04      	itt	eq
   14bf6:	4607      	moveq	r7, r0
   14bf8:	2601      	moveq	r6, #1
   14bfa:	3201      	adds	r2, #1
   14bfc:	42aa      	cmp	r2, r5
   14bfe:	d013      	beq.n	14c28 <_flash_used+0x15c>
   14c00:	1c91      	adds	r1, r2, #2
   14c02:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   14c06:	6848      	ldr	r0, [r1, #4]
   14c08:	7801      	ldrb	r1, [r0, #0]
   14c0a:	2962      	cmp	r1, #98	; 0x62
   14c0c:	d1ef      	bne.n	14bee <_flash_used+0x122>
   14c0e:	4680      	mov	r8, r0
   14c10:	f04f 0901 	mov.w	r9, #1
   14c14:	e7f1      	b.n	14bfa <_flash_used+0x12e>
   14c16:	f7fc fcb7 	bl	11588 <bsd_os_trace_irq_set>
   14c1a:	b003      	add	sp, #12
   14c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c20:	4686      	mov	lr, r0
   14c22:	f04f 0c01 	mov.w	ip, #1
   14c26:	e7e8      	b.n	14bfa <_flash_used+0x12e>
   14c28:	bba6      	cbnz	r6, 14c94 <_flash_used+0x1c8>
   14c2a:	f1b9 0f00 	cmp.w	r9, #0
   14c2e:	d001      	beq.n	14c34 <_flash_used+0x168>
   14c30:	f8ca 8000 	str.w	r8, [sl]
   14c34:	f1bc 0f00 	cmp.w	ip, #0
   14c38:	d002      	beq.n	14c40 <_flash_used+0x174>
   14c3a:	4a1c      	ldr	r2, [pc, #112]	; (14cac <_flash_used+0x1e0>)
   14c3c:	f8c2 e000 	str.w	lr, [r2]
   14c40:	2001      	movs	r0, #1
   14c42:	2200      	movs	r2, #0
   14c44:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   14c48:	e6ed      	b.n	14a26 <ipc_trace_handle+0x52>
   14c4a:	2105      	movs	r1, #5
   14c4c:	4630      	mov	r0, r6
   14c4e:	f8ad 5002 	strh.w	r5, [sp, #2]
   14c52:	f7fc fcdf 	bl	11614 <bsd_os_trace_put>
   14c56:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14c5a:	68e0      	ldr	r0, [r4, #12]
   14c5c:	f7fc fcda 	bl	11614 <bsd_os_trace_put>
   14c60:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14c64:	68e3      	ldr	r3, [r4, #12]
   14c66:	4413      	add	r3, r2
   14c68:	60a3      	str	r3, [r4, #8]
   14c6a:	e761      	b.n	14b30 <_flash_used+0x64>
   14c6c:	2105      	movs	r1, #5
   14c6e:	4630      	mov	r0, r6
   14c70:	f8ad 5002 	strh.w	r5, [sp, #2]
   14c74:	f7fc fcce 	bl	11614 <bsd_os_trace_put>
   14c78:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14c7c:	68e0      	ldr	r0, [r4, #12]
   14c7e:	f7fc fcc9 	bl	11614 <bsd_os_trace_put>
   14c82:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14c86:	68e3      	ldr	r3, [r4, #12]
   14c88:	4413      	add	r3, r2
   14c8a:	60a3      	str	r3, [r4, #8]
   14c8c:	e71c      	b.n	14ac8 <ipc_trace_handle+0xf4>
   14c8e:	f7fc fc83 	bl	11598 <bsd_os_trace_irq_clear>
   14c92:	e6e5      	b.n	14a60 <ipc_trace_handle+0x8c>
   14c94:	f8cb 7000 	str.w	r7, [fp]
   14c98:	e7c7      	b.n	14c2a <_flash_used+0x15e>
   14c9a:	bf00      	nop
   14c9c:	20020778 	.word	0x20020778
   14ca0:	2002647a 	.word	0x2002647a
   14ca4:	20020774 	.word	0x20020774
   14ca8:	2002076c 	.word	0x2002076c
   14cac:	20020770 	.word	0x20020770

00014cb0 <rpc_trace_coredump_in_progress>:
   14cb0:	4b01      	ldr	r3, [pc, #4]	; (14cb8 <rpc_trace_coredump_in_progress+0x8>)
   14cb2:	7818      	ldrb	r0, [r3, #0]
   14cb4:	4770      	bx	lr
   14cb6:	bf00      	nop
   14cb8:	2002647a 	.word	0x2002647a

00014cbc <transport_reset>:
   14cbc:	2000      	movs	r0, #0
   14cbe:	4770      	bx	lr

00014cc0 <transport_data_free>:
   14cc0:	4b0b      	ldr	r3, [pc, #44]	; (14cf0 <transport_data_free+0x30>)
   14cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   14cc6:	4413      	add	r3, r2
   14cc8:	4298      	cmp	r0, r3
   14cca:	d20d      	bcs.n	14ce8 <transport_data_free+0x28>
   14ccc:	4282      	cmp	r2, r0
   14cce:	d80b      	bhi.n	14ce8 <transport_data_free+0x28>
   14cd0:	b510      	push	{r4, lr}
   14cd2:	4604      	mov	r4, r0
   14cd4:	f000 fdfc 	bl	158d0 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   14cd8:	b140      	cbz	r0, 14cec <transport_data_free+0x2c>
   14cda:	4a06      	ldr	r2, [pc, #24]	; (14cf4 <transport_data_free+0x34>)
   14cdc:	6084      	str	r4, [r0, #8]
   14cde:	6002      	str	r2, [r0, #0]
   14ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14ce4:	f000 bd3c 	b.w	15760 <rpc_transport_ipc_tx_send>
   14ce8:	f7fe bc58 	b.w	1359c <nrf_shared_free>
   14cec:	bd10      	pop	{r4, pc}
   14cee:	bf00      	nop
   14cf0:	2002077c 	.word	0x2002077c
   14cf4:	00020001 	.word	0x00020001

00014cf8 <rpc_transport_ipc_init>:
   14cf8:	2800      	cmp	r0, #0
   14cfa:	d02b      	beq.n	14d54 <rpc_transport_ipc_init+0x5c>
   14cfc:	b530      	push	{r4, r5, lr}
   14cfe:	b089      	sub	sp, #36	; 0x24
   14d00:	aa01      	add	r2, sp, #4
   14d02:	4669      	mov	r1, sp
   14d04:	4604      	mov	r4, r0
   14d06:	f000 fc41 	bl	1558c <rpc_transport_ipc_tx_init>
   14d0a:	4603      	mov	r3, r0
   14d0c:	b140      	cbz	r0, 14d20 <rpc_transport_ipc_init+0x28>
   14d0e:	4a13      	ldr	r2, [pc, #76]	; (14d5c <rpc_transport_ipc_init+0x64>)
   14d10:	f104 0028 	add.w	r0, r4, #40	; 0x28
   14d14:	c803      	ldmia	r0, {r0, r1}
   14d16:	e882 0003 	stmia.w	r2, {r0, r1}
   14d1a:	4618      	mov	r0, r3
   14d1c:	b009      	add	sp, #36	; 0x24
   14d1e:	bd30      	pop	{r4, r5, pc}
   14d20:	e9dd 1200 	ldrd	r1, r2, [sp]
   14d24:	4620      	mov	r0, r4
   14d26:	f000 f857 	bl	14dd8 <rpc_transport_ipc_rx_init>
   14d2a:	4603      	mov	r3, r0
   14d2c:	2800      	cmp	r0, #0
   14d2e:	d1ee      	bne.n	14d0e <rpc_transport_ipc_init+0x16>
   14d30:	4b0b      	ldr	r3, [pc, #44]	; (14d60 <rpc_transport_ipc_init+0x68>)
   14d32:	490c      	ldr	r1, [pc, #48]	; (14d64 <rpc_transport_ipc_init+0x6c>)
   14d34:	480c      	ldr	r0, [pc, #48]	; (14d68 <rpc_transport_ipc_init+0x70>)
   14d36:	4a0d      	ldr	r2, [pc, #52]	; (14d6c <rpc_transport_ipc_init+0x74>)
   14d38:	9303      	str	r3, [sp, #12]
   14d3a:	4d0d      	ldr	r5, [pc, #52]	; (14d70 <rpc_transport_ipc_init+0x78>)
   14d3c:	4b0d      	ldr	r3, [pc, #52]	; (14d74 <rpc_transport_ipc_init+0x7c>)
   14d3e:	9104      	str	r1, [sp, #16]
   14d40:	9005      	str	r0, [sp, #20]
   14d42:	490d      	ldr	r1, [pc, #52]	; (14d78 <rpc_transport_ipc_init+0x80>)
   14d44:	a802      	add	r0, sp, #8
   14d46:	9307      	str	r3, [sp, #28]
   14d48:	9506      	str	r5, [sp, #24]
   14d4a:	9202      	str	r2, [sp, #8]
   14d4c:	f003 ffb4 	bl	18cb8 <rpc_transport_register>
   14d50:	4603      	mov	r3, r0
   14d52:	e7dc      	b.n	14d0e <rpc_transport_ipc_init+0x16>
   14d54:	230e      	movs	r3, #14
   14d56:	4618      	mov	r0, r3
   14d58:	4770      	bx	lr
   14d5a:	bf00      	nop
   14d5c:	2002077c 	.word	0x2002077c
   14d60:	00015861 	.word	0x00015861
   14d64:	00015931 	.word	0x00015931
   14d68:	000153f5 	.word	0x000153f5
   14d6c:	00015761 	.word	0x00015761
   14d70:	00014cc1 	.word	0x00014cc1
   14d74:	00014cbd 	.word	0x00014cbd
   14d78:	20020784 	.word	0x20020784

00014d7c <rpc_transport_rx_handle>:
   14d7c:	b160      	cbz	r0, 14d98 <rpc_transport_rx_handle+0x1c>
   14d7e:	b508      	push	{r3, lr}
   14d80:	6843      	ldr	r3, [r0, #4]
   14d82:	b2db      	uxtb	r3, r3
   14d84:	2b02      	cmp	r3, #2
   14d86:	d00e      	beq.n	14da6 <rpc_transport_rx_handle+0x2a>
   14d88:	6803      	ldr	r3, [r0, #0]
   14d8a:	0c1b      	lsrs	r3, r3, #16
   14d8c:	2b02      	cmp	r3, #2
   14d8e:	d005      	beq.n	14d9c <rpc_transport_rx_handle+0x20>
   14d90:	2b04      	cmp	r3, #4
   14d92:	d00e      	beq.n	14db2 <rpc_transport_rx_handle+0x36>
   14d94:	2000      	movs	r0, #0
   14d96:	bd08      	pop	{r3, pc}
   14d98:	2000      	movs	r0, #0
   14d9a:	4770      	bx	lr
   14d9c:	6880      	ldr	r0, [r0, #8]
   14d9e:	f7fe fbfd 	bl	1359c <nrf_shared_free>
   14da2:	2000      	movs	r0, #0
   14da4:	bd08      	pop	{r3, pc}
   14da6:	4601      	mov	r1, r0
   14da8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14dac:	4803      	ldr	r0, [pc, #12]	; (14dbc <rpc_transport_rx_handle+0x40>)
   14dae:	f003 be75 	b.w	18a9c <rpc_transport_input>
   14db2:	4802      	ldr	r0, [pc, #8]	; (14dbc <rpc_transport_rx_handle+0x40>)
   14db4:	f003 ffe0 	bl	18d78 <rpc_transport_unregister>
   14db8:	2000      	movs	r0, #0
   14dba:	bd08      	pop	{r3, pc}
   14dbc:	20020784 	.word	0x20020784

00014dc0 <rpc_transport_ipc_shutdown>:
   14dc0:	b508      	push	{r3, lr}
   14dc2:	f000 fdbf 	bl	15944 <rpc_transport_ipc_tx_suspend>
   14dc6:	f000 fb4b 	bl	15460 <rpc_transport_ipc_rx_suspend>
   14dca:	f000 fdc1 	bl	15950 <rpc_transport_ipc_tx_shutdown>
   14dce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14dd2:	f000 bb65 	b.w	154a0 <rpc_transport_ipc_rx_shutdown>
   14dd6:	bf00      	nop

00014dd8 <rpc_transport_ipc_rx_init>:
   14dd8:	2800      	cmp	r0, #0
   14dda:	f000 80ff 	beq.w	14fdc <rpc_transport_ipc_rx_init+0x204>
   14dde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14de2:	6805      	ldr	r5, [r0, #0]
   14de4:	b095      	sub	sp, #84	; 0x54
   14de6:	2d00      	cmp	r5, #0
   14de8:	f000 80ee 	beq.w	14fc8 <rpc_transport_ipc_rx_init+0x1f0>
   14dec:	6883      	ldr	r3, [r0, #8]
   14dee:	2b00      	cmp	r3, #0
   14df0:	f000 80ea 	beq.w	14fc8 <rpc_transport_ipc_rx_init+0x1f0>
   14df4:	6907      	ldr	r7, [r0, #16]
   14df6:	2f00      	cmp	r7, #0
   14df8:	f000 80e6 	beq.w	14fc8 <rpc_transport_ipc_rx_init+0x1f0>
   14dfc:	6a84      	ldr	r4, [r0, #40]	; 0x28
   14dfe:	2c00      	cmp	r4, #0
   14e00:	f000 80e2 	beq.w	14fc8 <rpc_transport_ipc_rx_init+0x1f0>
   14e04:	6844      	ldr	r4, [r0, #4]
   14e06:	2c1b      	cmp	r4, #27
   14e08:	f240 80e3 	bls.w	14fd2 <rpc_transport_ipc_rx_init+0x1fa>
   14e0c:	68c4      	ldr	r4, [r0, #12]
   14e0e:	2c0b      	cmp	r4, #11
   14e10:	f240 80df 	bls.w	14fd2 <rpc_transport_ipc_rx_init+0x1fa>
   14e14:	f8d0 e014 	ldr.w	lr, [r0, #20]
   14e18:	f1be 0f17 	cmp.w	lr, #23
   14e1c:	f240 80d9 	bls.w	14fd2 <rpc_transport_ipc_rx_init+0x1fa>
   14e20:	2600      	movs	r6, #0
   14e22:	4604      	mov	r4, r0
   14e24:	486f      	ldr	r0, [pc, #444]	; (14fe4 <rpc_transport_ipc_rx_init+0x20c>)
   14e26:	e9cd 1200 	strd	r1, r2, [sp]
   14e2a:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 15004 <rpc_transport_ipc_rx_init+0x22c>
   14e2e:	496e      	ldr	r1, [pc, #440]	; (14fe8 <rpc_transport_ipc_rx_init+0x210>)
   14e30:	8006      	strh	r6, [r0, #0]
   14e32:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   14e34:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 15008 <rpc_transport_ipc_rx_init+0x230>
   14e38:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 1500c <rpc_transport_ipc_rx_init+0x234>
   14e3c:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 15010 <rpc_transport_ipc_rx_init+0x238>
   14e40:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 15014 <rpc_transport_ipc_rx_init+0x23c>
   14e44:	4672      	mov	r2, lr
   14e46:	600e      	str	r6, [r1, #0]
   14e48:	f8ca 0000 	str.w	r0, [sl]
   14e4c:	4631      	mov	r1, r6
   14e4e:	4638      	mov	r0, r7
   14e50:	f8cc 6000 	str.w	r6, [ip]
   14e54:	f8cb 3000 	str.w	r3, [fp]
   14e58:	f8c8 6000 	str.w	r6, [r8]
   14e5c:	f8c9 6000 	str.w	r6, [r9]
   14e60:	f008 f94d 	bl	1d0fe <memset>
   14e64:	69e3      	ldr	r3, [r4, #28]
   14e66:	4638      	mov	r0, r7
   14e68:	603b      	str	r3, [r7, #0]
   14e6a:	69a3      	ldr	r3, [r4, #24]
   14e6c:	607b      	str	r3, [r7, #4]
   14e6e:	f7ff fcc9 	bl	14804 <ipc_trace_init>
   14e72:	2201      	movs	r2, #1
   14e74:	f04f 0c04 	mov.w	ip, #4
   14e78:	4b5c      	ldr	r3, [pc, #368]	; (14fec <rpc_transport_ipc_rx_init+0x214>)
   14e7a:	495d      	ldr	r1, [pc, #372]	; (14ff0 <rpc_transport_ipc_rx_init+0x218>)
   14e7c:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   14e80:	6809      	ldr	r1, [r1, #0]
   14e82:	2080      	movs	r0, #128	; 0x80
   14e84:	9104      	str	r1, [sp, #16]
   14e86:	495b      	ldr	r1, [pc, #364]	; (14ff4 <rpc_transport_ipc_rx_init+0x21c>)
   14e88:	f8dd e010 	ldr.w	lr, [sp, #16]
   14e8c:	f8c3 6614 	str.w	r6, [r3, #1556]	; 0x614
   14e90:	6809      	ldr	r1, [r1, #0]
   14e92:	702e      	strb	r6, [r5, #0]
   14e94:	9103      	str	r1, [sp, #12]
   14e96:	706e      	strb	r6, [r5, #1]
   14e98:	70ee      	strb	r6, [r5, #3]
   14e9a:	70aa      	strb	r2, [r5, #2]
   14e9c:	9903      	ldr	r1, [sp, #12]
   14e9e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   14ea0:	f8db e000 	ldr.w	lr, [fp]
   14ea4:	6069      	str	r1, [r5, #4]
   14ea6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   14ea8:	9c01      	ldr	r4, [sp, #4]
   14eaa:	60a9      	str	r1, [r5, #8]
   14eac:	60ec      	str	r4, [r5, #12]
   14eae:	9c00      	ldr	r4, [sp, #0]
   14eb0:	4951      	ldr	r1, [pc, #324]	; (14ff8 <rpc_transport_ipc_rx_init+0x220>)
   14eb2:	61af      	str	r7, [r5, #24]
   14eb4:	f8c5 e014 	str.w	lr, [r5, #20]
   14eb8:	612c      	str	r4, [r5, #16]
   14eba:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   14ebe:	680c      	ldr	r4, [r1, #0]
   14ec0:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   14ec4:	9405      	str	r4, [sp, #20]
   14ec6:	9c05      	ldr	r4, [sp, #20]
   14ec8:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   14ecc:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   14ed0:	f44f 6780 	mov.w	r7, #1024	; 0x400
   14ed4:	9406      	str	r4, [sp, #24]
   14ed6:	9c06      	ldr	r4, [sp, #24]
   14ed8:	2410      	movs	r4, #16
   14eda:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   14ede:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   14ee2:	4d46      	ldr	r5, [pc, #280]	; (14ffc <rpc_transport_ipc_rx_init+0x224>)
   14ee4:	9407      	str	r4, [sp, #28]
   14ee6:	9c07      	ldr	r4, [sp, #28]
   14ee8:	2440      	movs	r4, #64	; 0x40
   14eea:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   14eee:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   14ef2:	9408      	str	r4, [sp, #32]
   14ef4:	9c08      	ldr	r4, [sp, #32]
   14ef6:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   14efa:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   14efe:	9009      	str	r0, [sp, #36]	; 0x24
   14f00:	9809      	ldr	r0, [sp, #36]	; 0x24
   14f02:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
   14f06:	6808      	ldr	r0, [r1, #0]
   14f08:	900a      	str	r0, [sp, #40]	; 0x28
   14f0a:	980a      	ldr	r0, [sp, #40]	; 0x28
   14f0c:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
   14f10:	6888      	ldr	r0, [r1, #8]
   14f12:	900b      	str	r0, [sp, #44]	; 0x2c
   14f14:	980b      	ldr	r0, [sp, #44]	; 0x2c
   14f16:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
   14f1a:	6908      	ldr	r0, [r1, #16]
   14f1c:	900c      	str	r0, [sp, #48]	; 0x30
   14f1e:	980c      	ldr	r0, [sp, #48]	; 0x30
   14f20:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
   14f24:	6988      	ldr	r0, [r1, #24]
   14f26:	900d      	str	r0, [sp, #52]	; 0x34
   14f28:	980d      	ldr	r0, [sp, #52]	; 0x34
   14f2a:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
   14f2e:	69c8      	ldr	r0, [r1, #28]
   14f30:	f501 7101 	add.w	r1, r1, #516	; 0x204
   14f34:	900e      	str	r0, [sp, #56]	; 0x38
   14f36:	980e      	ldr	r0, [sp, #56]	; 0x38
   14f38:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   14f3c:	4310      	orrs	r0, r2
   14f3e:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   14f42:	680c      	ldr	r4, [r1, #0]
   14f44:	482e      	ldr	r0, [pc, #184]	; (15000 <rpc_transport_ipc_rx_init+0x228>)
   14f46:	940f      	str	r4, [sp, #60]	; 0x3c
   14f48:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   14f4a:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   14f4e:	ea44 040c 	orr.w	r4, r4, ip
   14f52:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   14f56:	680c      	ldr	r4, [r1, #0]
   14f58:	9410      	str	r4, [sp, #64]	; 0x40
   14f5a:	9c10      	ldr	r4, [sp, #64]	; 0x40
   14f5c:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   14f60:	f044 0410 	orr.w	r4, r4, #16
   14f64:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   14f68:	680c      	ldr	r4, [r1, #0]
   14f6a:	9411      	str	r4, [sp, #68]	; 0x44
   14f6c:	9c11      	ldr	r4, [sp, #68]	; 0x44
   14f6e:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   14f72:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   14f76:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   14f7a:	680c      	ldr	r4, [r1, #0]
   14f7c:	9412      	str	r4, [sp, #72]	; 0x48
   14f7e:	9c12      	ldr	r4, [sp, #72]	; 0x48
   14f80:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   14f84:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   14f88:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   14f8c:	f8da 3000 	ldr.w	r3, [sl]
   14f90:	6809      	ldr	r1, [r1, #0]
   14f92:	015b      	lsls	r3, r3, #5
   14f94:	9113      	str	r1, [sp, #76]	; 0x4c
   14f96:	b2db      	uxtb	r3, r3
   14f98:	9913      	ldr	r1, [sp, #76]	; 0x4c
   14f9a:	f8c8 2000 	str.w	r2, [r8]
   14f9e:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   14fa2:	f8c0 7184 	str.w	r7, [r0, #388]	; 0x184
   14fa6:	6047      	str	r7, [r0, #4]
   14fa8:	9602      	str	r6, [sp, #8]
   14faa:	f8c5 6610 	str.w	r6, [r5, #1552]	; 0x610
   14fae:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   14fb2:	9302      	str	r3, [sp, #8]
   14fb4:	9b02      	ldr	r3, [sp, #8]
   14fb6:	f8d8 3000 	ldr.w	r3, [r8]
   14fba:	2b01      	cmp	r3, #1
   14fbc:	d0fb      	beq.n	14fb6 <rpc_transport_ipc_rx_init+0x1de>
   14fbe:	f8d9 0000 	ldr.w	r0, [r9]
   14fc2:	b015      	add	sp, #84	; 0x54
   14fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fc8:	f24c 000e 	movw	r0, #49166	; 0xc00e
   14fcc:	b015      	add	sp, #84	; 0x54
   14fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fd2:	f24c 0009 	movw	r0, #49161	; 0xc009
   14fd6:	b015      	add	sp, #84	; 0x54
   14fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fdc:	f24c 000e 	movw	r0, #49166	; 0xc00e
   14fe0:	4770      	bx	lr
   14fe2:	bf00      	nop
   14fe4:	20024e1e 	.word	0x20024e1e
   14fe8:	20020794 	.word	0x20020794
   14fec:	4002a000 	.word	0x4002a000
   14ff0:	4002a610 	.word	0x4002a610
   14ff4:	4002a614 	.word	0x4002a614
   14ff8:	4002a590 	.word	0x4002a590
   14ffc:	40005000 	.word	0x40005000
   15000:	e000e100 	.word	0xe000e100
   15004:	2002078c 	.word	0x2002078c
   15008:	20020798 	.word	0x20020798
   1500c:	20020790 	.word	0x20020790
   15010:	2002079c 	.word	0x2002079c
   15014:	20020788 	.word	0x20020788

00015018 <IPC_IRQHandler>:
   15018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1501c:	f44f 6580 	mov.w	r5, #1024	; 0x400
   15020:	4ca7      	ldr	r4, [pc, #668]	; (152c0 <IPC_IRQHandler+0x2a8>)
   15022:	b087      	sub	sp, #28
   15024:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   15028:	f3bf 8f4f 	dsb	sy
   1502c:	f3bf 8f6f 	isb	sy
   15030:	4ea4      	ldr	r6, [pc, #656]	; (152c4 <IPC_IRQHandler+0x2ac>)
   15032:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
   15036:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   1503a:	061f      	lsls	r7, r3, #24
   1503c:	f100 80c8 	bmi.w	151d0 <IPC_IRQHandler+0x1b8>
   15040:	4ba0      	ldr	r3, [pc, #640]	; (152c4 <IPC_IRQHandler+0x2ac>)
   15042:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   15046:	07d0      	lsls	r0, r2, #31
   15048:	f100 80d4 	bmi.w	151f4 <IPC_IRQHandler+0x1dc>
   1504c:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   15050:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   15054:	f040 80b6 	bne.w	151c4 <IPC_IRQHandler+0x1ac>
   15058:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   1505c:	0749      	lsls	r1, r1, #29
   1505e:	f100 80e6 	bmi.w	1522e <IPC_IRQHandler+0x216>
   15062:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   15066:	06da      	lsls	r2, r3, #27
   15068:	f140 809d 	bpl.w	151a6 <IPC_IRQHandler+0x18e>
   1506c:	2100      	movs	r1, #0
   1506e:	4a95      	ldr	r2, [pc, #596]	; (152c4 <IPC_IRQHandler+0x2ac>)
   15070:	4b95      	ldr	r3, [pc, #596]	; (152c8 <IPC_IRQHandler+0x2b0>)
   15072:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
   15076:	681b      	ldr	r3, [r3, #0]
   15078:	9304      	str	r3, [sp, #16]
   1507a:	9b04      	ldr	r3, [sp, #16]
   1507c:	f8df 8270 	ldr.w	r8, [pc, #624]	; 152f0 <IPC_IRQHandler+0x2d8>
   15080:	4f92      	ldr	r7, [pc, #584]	; (152cc <IPC_IRQHandler+0x2b4>)
   15082:	f8df 9270 	ldr.w	r9, [pc, #624]	; 152f4 <IPC_IRQHandler+0x2dc>
   15086:	f8d8 a000 	ldr.w	sl, [r8]
   1508a:	f8da 1000 	ldr.w	r1, [sl]
   1508e:	2900      	cmp	r1, #0
   15090:	d03f      	beq.n	15112 <IPC_IRQHandler+0xfa>
   15092:	2200      	movs	r2, #0
   15094:	4614      	mov	r4, r2
   15096:	e002      	b.n	1509e <IPC_IRQHandler+0x86>
   15098:	3401      	adds	r4, #1
   1509a:	428c      	cmp	r4, r1
   1509c:	d227      	bcs.n	150ee <IPC_IRQHandler+0xd6>
   1509e:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   150a2:	68ab      	ldr	r3, [r5, #8]
   150a4:	2b00      	cmp	r3, #0
   150a6:	d0f7      	beq.n	15098 <IPC_IRQHandler+0x80>
   150a8:	686e      	ldr	r6, [r5, #4]
   150aa:	b2f6      	uxtb	r6, r6
   150ac:	2e01      	cmp	r6, #1
   150ae:	d1f3      	bne.n	15098 <IPC_IRQHandler+0x80>
   150b0:	6868      	ldr	r0, [r5, #4]
   150b2:	f8b9 3000 	ldrh.w	r3, [r9]
   150b6:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   150ba:	d1ed      	bne.n	15098 <IPC_IRQHandler+0x80>
   150bc:	686a      	ldr	r2, [r5, #4]
   150be:	3301      	adds	r3, #1
   150c0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   150c4:	f042 0202 	orr.w	r2, r2, #2
   150c8:	606a      	str	r2, [r5, #4]
   150ca:	68a8      	ldr	r0, [r5, #8]
   150cc:	f8a9 3000 	strh.w	r3, [r9]
   150d0:	f7ff fe54 	bl	14d7c <rpc_transport_rx_handle>
   150d4:	4632      	mov	r2, r6
   150d6:	b928      	cbnz	r0, 150e4 <IPC_IRQHandler+0xcc>
   150d8:	686b      	ldr	r3, [r5, #4]
   150da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   150de:	f043 0303 	orr.w	r3, r3, #3
   150e2:	606b      	str	r3, [r5, #4]
   150e4:	f8da 1000 	ldr.w	r1, [sl]
   150e8:	3401      	adds	r4, #1
   150ea:	428c      	cmp	r4, r1
   150ec:	d3d7      	bcc.n	1509e <IPC_IRQHandler+0x86>
   150ee:	2a00      	cmp	r2, #0
   150f0:	d1cd      	bne.n	1508e <IPC_IRQHandler+0x76>
   150f2:	b171      	cbz	r1, 15112 <IPC_IRQHandler+0xfa>
   150f4:	4613      	mov	r3, r2
   150f6:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
   150fa:	6890      	ldr	r0, [r2, #8]
   150fc:	3301      	adds	r3, #1
   150fe:	b130      	cbz	r0, 1510e <IPC_IRQHandler+0xf6>
   15100:	f8d2 b004 	ldr.w	fp, [r2, #4]
   15104:	fa5f fb8b 	uxtb.w	fp, fp
   15108:	f1bb 0f01 	cmp.w	fp, #1
   1510c:	d003      	beq.n	15116 <IPC_IRQHandler+0xfe>
   1510e:	428b      	cmp	r3, r1
   15110:	d1f1      	bne.n	150f6 <IPC_IRQHandler+0xde>
   15112:	f04f 0b00 	mov.w	fp, #0
   15116:	f8d7 a000 	ldr.w	sl, [r7]
   1511a:	f8da 2000 	ldr.w	r2, [sl]
   1511e:	2a00      	cmp	r2, #0
   15120:	d03d      	beq.n	1519e <IPC_IRQHandler+0x186>
   15122:	2100      	movs	r1, #0
   15124:	460c      	mov	r4, r1
   15126:	e002      	b.n	1512e <IPC_IRQHandler+0x116>
   15128:	3401      	adds	r4, #1
   1512a:	4294      	cmp	r4, r2
   1512c:	d227      	bcs.n	1517e <IPC_IRQHandler+0x166>
   1512e:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   15132:	68ab      	ldr	r3, [r5, #8]
   15134:	2b00      	cmp	r3, #0
   15136:	d0f7      	beq.n	15128 <IPC_IRQHandler+0x110>
   15138:	686e      	ldr	r6, [r5, #4]
   1513a:	b2f6      	uxtb	r6, r6
   1513c:	2e01      	cmp	r6, #1
   1513e:	d1f3      	bne.n	15128 <IPC_IRQHandler+0x110>
   15140:	6868      	ldr	r0, [r5, #4]
   15142:	f8b9 3000 	ldrh.w	r3, [r9]
   15146:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   1514a:	d1ed      	bne.n	15128 <IPC_IRQHandler+0x110>
   1514c:	686a      	ldr	r2, [r5, #4]
   1514e:	3301      	adds	r3, #1
   15150:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   15154:	f042 0202 	orr.w	r2, r2, #2
   15158:	606a      	str	r2, [r5, #4]
   1515a:	68a8      	ldr	r0, [r5, #8]
   1515c:	f8a9 3000 	strh.w	r3, [r9]
   15160:	f7ff fe0c 	bl	14d7c <rpc_transport_rx_handle>
   15164:	4631      	mov	r1, r6
   15166:	b928      	cbnz	r0, 15174 <IPC_IRQHandler+0x15c>
   15168:	686a      	ldr	r2, [r5, #4]
   1516a:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
   1516e:	f043 0303 	orr.w	r3, r3, #3
   15172:	606b      	str	r3, [r5, #4]
   15174:	f8da 2000 	ldr.w	r2, [sl]
   15178:	3401      	adds	r4, #1
   1517a:	4294      	cmp	r4, r2
   1517c:	d3d7      	bcc.n	1512e <IPC_IRQHandler+0x116>
   1517e:	2900      	cmp	r1, #0
   15180:	d1cd      	bne.n	1511e <IPC_IRQHandler+0x106>
   15182:	b162      	cbz	r2, 1519e <IPC_IRQHandler+0x186>
   15184:	460b      	mov	r3, r1
   15186:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   1518a:	6888      	ldr	r0, [r1, #8]
   1518c:	3301      	adds	r3, #1
   1518e:	b120      	cbz	r0, 1519a <IPC_IRQHandler+0x182>
   15190:	6849      	ldr	r1, [r1, #4]
   15192:	b2c9      	uxtb	r1, r1
   15194:	2901      	cmp	r1, #1
   15196:	f43f af76 	beq.w	15086 <IPC_IRQHandler+0x6e>
   1519a:	4293      	cmp	r3, r2
   1519c:	d1f3      	bne.n	15186 <IPC_IRQHandler+0x16e>
   1519e:	f1bb 0f00 	cmp.w	fp, #0
   151a2:	f47f af70 	bne.w	15086 <IPC_IRQHandler+0x6e>
   151a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   151aa:	4b49      	ldr	r3, [pc, #292]	; (152d0 <IPC_IRQHandler+0x2b8>)
   151ac:	4a44      	ldr	r2, [pc, #272]	; (152c0 <IPC_IRQHandler+0x2a8>)
   151ae:	681b      	ldr	r3, [r3, #0]
   151b0:	015b      	lsls	r3, r3, #5
   151b2:	b2db      	uxtb	r3, r3
   151b4:	f882 332a 	strb.w	r3, [r2, #810]	; 0x32a
   151b8:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
   151bc:	6051      	str	r1, [r2, #4]
   151be:	b007      	add	sp, #28
   151c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151c4:	2206      	movs	r2, #6
   151c6:	4b43      	ldr	r3, [pc, #268]	; (152d4 <IPC_IRQHandler+0x2bc>)
   151c8:	601a      	str	r2, [r3, #0]
   151ca:	b007      	add	sp, #28
   151cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151d0:	f7ff fc00 	bl	149d4 <ipc_trace_handle>
   151d4:	f7ff fd6c 	bl	14cb0 <rpc_trace_coredump_in_progress>
   151d8:	2800      	cmp	r0, #0
   151da:	d149      	bne.n	15270 <IPC_IRQHandler+0x258>
   151dc:	4b3e      	ldr	r3, [pc, #248]	; (152d8 <IPC_IRQHandler+0x2c0>)
   151de:	f8c6 011c 	str.w	r0, [r6, #284]	; 0x11c
   151e2:	681b      	ldr	r3, [r3, #0]
   151e4:	9301      	str	r3, [sp, #4]
   151e6:	9b01      	ldr	r3, [sp, #4]
   151e8:	4b36      	ldr	r3, [pc, #216]	; (152c4 <IPC_IRQHandler+0x2ac>)
   151ea:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   151ee:	07d0      	lsls	r0, r2, #31
   151f0:	f57f af2c 	bpl.w	1504c <IPC_IRQHandler+0x34>
   151f4:	2000      	movs	r0, #0
   151f6:	f248 0202 	movw	r2, #32770	; 0x8002
   151fa:	4938      	ldr	r1, [pc, #224]	; (152dc <IPC_IRQHandler+0x2c4>)
   151fc:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   15200:	6809      	ldr	r1, [r1, #0]
   15202:	9102      	str	r1, [sp, #8]
   15204:	9902      	ldr	r1, [sp, #8]
   15206:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   1520a:	4293      	cmp	r3, r2
   1520c:	d040      	beq.n	15290 <IPC_IRQHandler+0x278>
   1520e:	d81e      	bhi.n	1524e <IPC_IRQHandler+0x236>
   15210:	2b00      	cmp	r3, #0
   15212:	d04f      	beq.n	152b4 <IPC_IRQHandler+0x29c>
   15214:	2b02      	cmp	r3, #2
   15216:	d942      	bls.n	1529e <IPC_IRQHandler+0x286>
   15218:	f248 0201 	movw	r2, #32769	; 0x8001
   1521c:	4293      	cmp	r3, r2
   1521e:	d149      	bne.n	152b4 <IPC_IRQHandler+0x29c>
   15220:	2003      	movs	r0, #3
   15222:	2207      	movs	r2, #7
   15224:	492b      	ldr	r1, [pc, #172]	; (152d4 <IPC_IRQHandler+0x2bc>)
   15226:	4b2e      	ldr	r3, [pc, #184]	; (152e0 <IPC_IRQHandler+0x2c8>)
   15228:	6008      	str	r0, [r1, #0]
   1522a:	601a      	str	r2, [r3, #0]
   1522c:	e7cd      	b.n	151ca <IPC_IRQHandler+0x1b2>
   1522e:	4d29      	ldr	r5, [pc, #164]	; (152d4 <IPC_IRQHandler+0x2bc>)
   15230:	6829      	ldr	r1, [r5, #0]
   15232:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   15236:	2901      	cmp	r1, #1
   15238:	492a      	ldr	r1, [pc, #168]	; (152e4 <IPC_IRQHandler+0x2cc>)
   1523a:	d05d      	beq.n	152f8 <IPC_IRQHandler+0x2e0>
   1523c:	680a      	ldr	r2, [r1, #0]
   1523e:	9203      	str	r2, [sp, #12]
   15240:	9a03      	ldr	r2, [sp, #12]
   15242:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   15246:	06db      	lsls	r3, r3, #27
   15248:	f53f af10 	bmi.w	1506c <IPC_IRQHandler+0x54>
   1524c:	e716      	b.n	1507c <IPC_IRQHandler+0x64>
   1524e:	4a26      	ldr	r2, [pc, #152]	; (152e8 <IPC_IRQHandler+0x2d0>)
   15250:	4293      	cmp	r3, r2
   15252:	d814      	bhi.n	1527e <IPC_IRQHandler+0x266>
   15254:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   15258:	d814      	bhi.n	15284 <IPC_IRQHandler+0x26c>
   1525a:	f248 0203 	movw	r2, #32771	; 0x8003
   1525e:	4293      	cmp	r3, r2
   15260:	d128      	bne.n	152b4 <IPC_IRQHandler+0x29c>
   15262:	2003      	movs	r0, #3
   15264:	2204      	movs	r2, #4
   15266:	491b      	ldr	r1, [pc, #108]	; (152d4 <IPC_IRQHandler+0x2bc>)
   15268:	4b1d      	ldr	r3, [pc, #116]	; (152e0 <IPC_IRQHandler+0x2c8>)
   1526a:	6008      	str	r0, [r1, #0]
   1526c:	601a      	str	r2, [r3, #0]
   1526e:	e7ac      	b.n	151ca <IPC_IRQHandler+0x1b2>
   15270:	23e0      	movs	r3, #224	; 0xe0
   15272:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
   15276:	6065      	str	r5, [r4, #4]
   15278:	b007      	add	sp, #28
   1527a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1527e:	4a1b      	ldr	r2, [pc, #108]	; (152ec <IPC_IRQHandler+0x2d4>)
   15280:	4293      	cmp	r3, r2
   15282:	d117      	bne.n	152b4 <IPC_IRQHandler+0x29c>
   15284:	2003      	movs	r0, #3
   15286:	4913      	ldr	r1, [pc, #76]	; (152d4 <IPC_IRQHandler+0x2bc>)
   15288:	4a15      	ldr	r2, [pc, #84]	; (152e0 <IPC_IRQHandler+0x2c8>)
   1528a:	6008      	str	r0, [r1, #0]
   1528c:	6013      	str	r3, [r2, #0]
   1528e:	e79c      	b.n	151ca <IPC_IRQHandler+0x1b2>
   15290:	2003      	movs	r0, #3
   15292:	2206      	movs	r2, #6
   15294:	490f      	ldr	r1, [pc, #60]	; (152d4 <IPC_IRQHandler+0x2bc>)
   15296:	4b12      	ldr	r3, [pc, #72]	; (152e0 <IPC_IRQHandler+0x2c8>)
   15298:	6008      	str	r0, [r1, #0]
   1529a:	601a      	str	r2, [r3, #0]
   1529c:	e795      	b.n	151ca <IPC_IRQHandler+0x1b2>
   1529e:	2303      	movs	r3, #3
   152a0:	4618      	mov	r0, r3
   152a2:	490c      	ldr	r1, [pc, #48]	; (152d4 <IPC_IRQHandler+0x2bc>)
   152a4:	4a0e      	ldr	r2, [pc, #56]	; (152e0 <IPC_IRQHandler+0x2c8>)
   152a6:	600b      	str	r3, [r1, #0]
   152a8:	6013      	str	r3, [r2, #0]
   152aa:	b007      	add	sp, #28
   152ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152b0:	f7ff b906 	b.w	144c0 <rpc_transport_ipc_fault_handler>
   152b4:	2303      	movs	r3, #3
   152b6:	4907      	ldr	r1, [pc, #28]	; (152d4 <IPC_IRQHandler+0x2bc>)
   152b8:	4a09      	ldr	r2, [pc, #36]	; (152e0 <IPC_IRQHandler+0x2c8>)
   152ba:	600b      	str	r3, [r1, #0]
   152bc:	6013      	str	r3, [r2, #0]
   152be:	e784      	b.n	151ca <IPC_IRQHandler+0x1b2>
   152c0:	e000e100 	.word	0xe000e100
   152c4:	4002a000 	.word	0x4002a000
   152c8:	4002a110 	.word	0x4002a110
   152cc:	20020794 	.word	0x20020794
   152d0:	2002078c 	.word	0x2002078c
   152d4:	20020790 	.word	0x20020790
   152d8:	4002a11c 	.word	0x4002a11c
   152dc:	4002a100 	.word	0x4002a100
   152e0:	20020788 	.word	0x20020788
   152e4:	4002a108 	.word	0x4002a108
   152e8:	04400004 	.word	0x04400004
   152ec:	05500001 	.word	0x05500001
   152f0:	20020798 	.word	0x20020798
   152f4:	20024e1e 	.word	0x20024e1e
   152f8:	4a37      	ldr	r2, [pc, #220]	; (153d8 <IPC_IRQHandler+0x3c0>)
   152fa:	680b      	ldr	r3, [r1, #0]
   152fc:	6812      	ldr	r2, [r2, #0]
   152fe:	9305      	str	r3, [sp, #20]
   15300:	6893      	ldr	r3, [r2, #8]
   15302:	4836      	ldr	r0, [pc, #216]	; (153dc <IPC_IRQHandler+0x3c4>)
   15304:	4936      	ldr	r1, [pc, #216]	; (153e0 <IPC_IRQHandler+0x3c8>)
   15306:	6003      	str	r3, [r0, #0]
   15308:	6854      	ldr	r4, [r2, #4]
   1530a:	9a05      	ldr	r2, [sp, #20]
   1530c:	600c      	str	r4, [r1, #0]
   1530e:	b16b      	cbz	r3, 1532c <IPC_IRQHandler+0x314>
   15310:	b164      	cbz	r4, 1532c <IPC_IRQHandler+0x314>
   15312:	681b      	ldr	r3, [r3, #0]
   15314:	2b10      	cmp	r3, #16
   15316:	d802      	bhi.n	1531e <IPC_IRQHandler+0x306>
   15318:	6822      	ldr	r2, [r4, #0]
   1531a:	2a10      	cmp	r2, #16
   1531c:	d90c      	bls.n	15338 <IPC_IRQHandler+0x320>
   1531e:	2103      	movs	r1, #3
   15320:	f24c 0206 	movw	r2, #49158	; 0xc006
   15324:	4b2f      	ldr	r3, [pc, #188]	; (153e4 <IPC_IRQHandler+0x3cc>)
   15326:	6029      	str	r1, [r5, #0]
   15328:	601a      	str	r2, [r3, #0]
   1532a:	e74e      	b.n	151ca <IPC_IRQHandler+0x1b2>
   1532c:	2103      	movs	r1, #3
   1532e:	2210      	movs	r2, #16
   15330:	4b2c      	ldr	r3, [pc, #176]	; (153e4 <IPC_IRQHandler+0x3cc>)
   15332:	6029      	str	r1, [r5, #0]
   15334:	601a      	str	r2, [r3, #0]
   15336:	e748      	b.n	151ca <IPC_IRQHandler+0x1b2>
   15338:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 153f0 <IPC_IRQHandler+0x3d8>
   1533c:	2a00      	cmp	r2, #0
   1533e:	d042      	beq.n	153c6 <IPC_IRQHandler+0x3ae>
   15340:	2300      	movs	r3, #0
   15342:	f104 0904 	add.w	r9, r4, #4
   15346:	461e      	mov	r6, r3
   15348:	e002      	b.n	15350 <IPC_IRQHandler+0x338>
   1534a:	3601      	adds	r6, #1
   1534c:	4296      	cmp	r6, r2
   1534e:	d22a      	bcs.n	153a6 <IPC_IRQHandler+0x38e>
   15350:	00f7      	lsls	r7, r6, #3
   15352:	19e1      	adds	r1, r4, r7
   15354:	6888      	ldr	r0, [r1, #8]
   15356:	2800      	cmp	r0, #0
   15358:	d0f7      	beq.n	1534a <IPC_IRQHandler+0x332>
   1535a:	f8d1 a004 	ldr.w	sl, [r1, #4]
   1535e:	fa5f fa8a 	uxtb.w	sl, sl
   15362:	f1ba 0f01 	cmp.w	sl, #1
   15366:	d1f0      	bne.n	1534a <IPC_IRQHandler+0x332>
   15368:	f8d1 c004 	ldr.w	ip, [r1, #4]
   1536c:	f8b8 0000 	ldrh.w	r0, [r8]
   15370:	ebb0 4f1c 	cmp.w	r0, ip, lsr #16
   15374:	d1e9      	bne.n	1534a <IPC_IRQHandler+0x332>
   15376:	684b      	ldr	r3, [r1, #4]
   15378:	1c42      	adds	r2, r0, #1
   1537a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1537e:	f043 0302 	orr.w	r3, r3, #2
   15382:	604b      	str	r3, [r1, #4]
   15384:	6888      	ldr	r0, [r1, #8]
   15386:	f8a8 2000 	strh.w	r2, [r8]
   1538a:	f7ff fcf7 	bl	14d7c <rpc_transport_rx_handle>
   1538e:	4653      	mov	r3, sl
   15390:	b938      	cbnz	r0, 153a2 <IPC_IRQHandler+0x38a>
   15392:	f859 2007 	ldr.w	r2, [r9, r7]
   15396:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1539a:	f042 0203 	orr.w	r2, r2, #3
   1539e:	f849 2007 	str.w	r2, [r9, r7]
   153a2:	6822      	ldr	r2, [r4, #0]
   153a4:	e7d1      	b.n	1534a <IPC_IRQHandler+0x332>
   153a6:	2b00      	cmp	r3, #0
   153a8:	d1c8      	bne.n	1533c <IPC_IRQHandler+0x324>
   153aa:	b912      	cbnz	r2, 153b2 <IPC_IRQHandler+0x39a>
   153ac:	e00b      	b.n	153c6 <IPC_IRQHandler+0x3ae>
   153ae:	4293      	cmp	r3, r2
   153b0:	d009      	beq.n	153c6 <IPC_IRQHandler+0x3ae>
   153b2:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
   153b6:	6888      	ldr	r0, [r1, #8]
   153b8:	3301      	adds	r3, #1
   153ba:	2800      	cmp	r0, #0
   153bc:	d0f7      	beq.n	153ae <IPC_IRQHandler+0x396>
   153be:	6849      	ldr	r1, [r1, #4]
   153c0:	b2c9      	uxtb	r1, r1
   153c2:	2901      	cmp	r1, #1
   153c4:	d1f3      	bne.n	153ae <IPC_IRQHandler+0x396>
   153c6:	2002      	movs	r0, #2
   153c8:	4b07      	ldr	r3, [pc, #28]	; (153e8 <IPC_IRQHandler+0x3d0>)
   153ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
   153ce:	4a07      	ldr	r2, [pc, #28]	; (153ec <IPC_IRQHandler+0x3d4>)
   153d0:	681b      	ldr	r3, [r3, #0]
   153d2:	6028      	str	r0, [r5, #0]
   153d4:	e6ec      	b.n	151b0 <IPC_IRQHandler+0x198>
   153d6:	bf00      	nop
   153d8:	2002079c 	.word	0x2002079c
   153dc:	20020798 	.word	0x20020798
   153e0:	20020794 	.word	0x20020794
   153e4:	20020788 	.word	0x20020788
   153e8:	2002078c 	.word	0x2002078c
   153ec:	e000e100 	.word	0xe000e100
   153f0:	20024e1e 	.word	0x20024e1e

000153f4 <rpc_transport_msg_free>:
   153f4:	b430      	push	{r4, r5}
   153f6:	4b18      	ldr	r3, [pc, #96]	; (15458 <rpc_transport_msg_free+0x64>)
   153f8:	681c      	ldr	r4, [r3, #0]
   153fa:	6825      	ldr	r5, [r4, #0]
   153fc:	b16d      	cbz	r5, 1541a <rpc_transport_msg_free+0x26>
   153fe:	68a3      	ldr	r3, [r4, #8]
   15400:	4283      	cmp	r3, r0
   15402:	d027      	beq.n	15454 <rpc_transport_msg_free+0x60>
   15404:	2300      	movs	r3, #0
   15406:	e002      	b.n	1540e <rpc_transport_msg_free+0x1a>
   15408:	6889      	ldr	r1, [r1, #8]
   1540a:	4281      	cmp	r1, r0
   1540c:	d019      	beq.n	15442 <rpc_transport_msg_free+0x4e>
   1540e:	3301      	adds	r3, #1
   15410:	00da      	lsls	r2, r3, #3
   15412:	42ab      	cmp	r3, r5
   15414:	eb04 0102 	add.w	r1, r4, r2
   15418:	d1f6      	bne.n	15408 <rpc_transport_msg_free+0x14>
   1541a:	4b10      	ldr	r3, [pc, #64]	; (1545c <rpc_transport_msg_free+0x68>)
   1541c:	681c      	ldr	r4, [r3, #0]
   1541e:	6825      	ldr	r5, [r4, #0]
   15420:	b16d      	cbz	r5, 1543e <rpc_transport_msg_free+0x4a>
   15422:	68a3      	ldr	r3, [r4, #8]
   15424:	4283      	cmp	r3, r0
   15426:	d015      	beq.n	15454 <rpc_transport_msg_free+0x60>
   15428:	2300      	movs	r3, #0
   1542a:	e002      	b.n	15432 <rpc_transport_msg_free+0x3e>
   1542c:	6889      	ldr	r1, [r1, #8]
   1542e:	4281      	cmp	r1, r0
   15430:	d007      	beq.n	15442 <rpc_transport_msg_free+0x4e>
   15432:	3301      	adds	r3, #1
   15434:	00da      	lsls	r2, r3, #3
   15436:	429d      	cmp	r5, r3
   15438:	eb04 0102 	add.w	r1, r4, r2
   1543c:	d1f6      	bne.n	1542c <rpc_transport_msg_free+0x38>
   1543e:	bc30      	pop	{r4, r5}
   15440:	4770      	bx	lr
   15442:	3204      	adds	r2, #4
   15444:	58a3      	ldr	r3, [r4, r2]
   15446:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1544a:	f043 0303 	orr.w	r3, r3, #3
   1544e:	50a3      	str	r3, [r4, r2]
   15450:	bc30      	pop	{r4, r5}
   15452:	4770      	bx	lr
   15454:	2204      	movs	r2, #4
   15456:	e7f5      	b.n	15444 <rpc_transport_msg_free+0x50>
   15458:	20020798 	.word	0x20020798
   1545c:	20020794 	.word	0x20020794

00015460 <rpc_transport_ipc_rx_suspend>:
   15460:	b410      	push	{r4}
   15462:	2400      	movs	r4, #0
   15464:	2010      	movs	r0, #16
   15466:	2204      	movs	r2, #4
   15468:	4b0a      	ldr	r3, [pc, #40]	; (15494 <rpc_transport_ipc_rx_suspend+0x34>)
   1546a:	490b      	ldr	r1, [pc, #44]	; (15498 <rpc_transport_ipc_rx_suspend+0x38>)
   1546c:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   15470:	680c      	ldr	r4, [r1, #0]
   15472:	b083      	sub	sp, #12
   15474:	9401      	str	r4, [sp, #4]
   15476:	9c01      	ldr	r4, [sp, #4]
   15478:	f5a1 7126 	sub.w	r1, r1, #664	; 0x298
   1547c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   15480:	6809      	ldr	r1, [r1, #0]
   15482:	4b06      	ldr	r3, [pc, #24]	; (1549c <rpc_transport_ipc_rx_suspend+0x3c>)
   15484:	9100      	str	r1, [sp, #0]
   15486:	9900      	ldr	r1, [sp, #0]
   15488:	601a      	str	r2, [r3, #0]
   1548a:	b003      	add	sp, #12
   1548c:	f85d 4b04 	ldr.w	r4, [sp], #4
   15490:	4770      	bx	lr
   15492:	bf00      	nop
   15494:	4002a000 	.word	0x4002a000
   15498:	4002a5a0 	.word	0x4002a5a0
   1549c:	20020790 	.word	0x20020790

000154a0 <rpc_transport_ipc_rx_shutdown>:
   154a0:	b4f0      	push	{r4, r5, r6, r7}
   154a2:	4a32      	ldr	r2, [pc, #200]	; (1556c <rpc_transport_ipc_rx_shutdown+0xcc>)
   154a4:	b08c      	sub	sp, #48	; 0x30
   154a6:	6813      	ldr	r3, [r2, #0]
   154a8:	2b06      	cmp	r3, #6
   154aa:	d1fc      	bne.n	154a6 <rpc_transport_ipc_rx_shutdown+0x6>
   154ac:	2000      	movs	r0, #0
   154ae:	2201      	movs	r2, #1
   154b0:	210a      	movs	r1, #10
   154b2:	4b2f      	ldr	r3, [pc, #188]	; (15570 <rpc_transport_ipc_rx_shutdown+0xd0>)
   154b4:	9000      	str	r0, [sp, #0]
   154b6:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
   154ba:	f8d3 0610 	ldr.w	r0, [r3, #1552]	; 0x610
   154be:	9000      	str	r0, [sp, #0]
   154c0:	9800      	ldr	r0, [sp, #0]
   154c2:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   154c6:	9101      	str	r1, [sp, #4]
   154c8:	9b01      	ldr	r3, [sp, #4]
   154ca:	b12b      	cbz	r3, 154d8 <rpc_transport_ipc_rx_shutdown+0x38>
   154cc:	9b01      	ldr	r3, [sp, #4]
   154ce:	3b01      	subs	r3, #1
   154d0:	9301      	str	r3, [sp, #4]
   154d2:	9b01      	ldr	r3, [sp, #4]
   154d4:	2b00      	cmp	r3, #0
   154d6:	d1f9      	bne.n	154cc <rpc_transport_ipc_rx_shutdown+0x2c>
   154d8:	2200      	movs	r2, #0
   154da:	2601      	movs	r6, #1
   154dc:	2504      	movs	r5, #4
   154de:	2410      	movs	r4, #16
   154e0:	4923      	ldr	r1, [pc, #140]	; (15570 <rpc_transport_ipc_rx_shutdown+0xd0>)
   154e2:	4b24      	ldr	r3, [pc, #144]	; (15574 <rpc_transport_ipc_rx_shutdown+0xd4>)
   154e4:	f8c1 2614 	str.w	r2, [r1, #1556]	; 0x614
   154e8:	f501 3115 	add.w	r1, r1, #152576	; 0x25400
   154ec:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   154f0:	f501 71c8 	add.w	r1, r1, #400	; 0x190
   154f4:	6809      	ldr	r1, [r1, #0]
   154f6:	2040      	movs	r0, #64	; 0x40
   154f8:	9102      	str	r1, [sp, #8]
   154fa:	491f      	ldr	r1, [pc, #124]	; (15578 <rpc_transport_ipc_rx_shutdown+0xd8>)
   154fc:	9f02      	ldr	r7, [sp, #8]
   154fe:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
   15502:	680f      	ldr	r7, [r1, #0]
   15504:	2180      	movs	r1, #128	; 0x80
   15506:	9703      	str	r7, [sp, #12]
   15508:	4f1c      	ldr	r7, [pc, #112]	; (1557c <rpc_transport_ipc_rx_shutdown+0xdc>)
   1550a:	f8dd c00c 	ldr.w	ip, [sp, #12]
   1550e:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   15512:	683f      	ldr	r7, [r7, #0]
   15514:	9704      	str	r7, [sp, #16]
   15516:	4f1a      	ldr	r7, [pc, #104]	; (15580 <rpc_transport_ipc_rx_shutdown+0xe0>)
   15518:	f8dd c010 	ldr.w	ip, [sp, #16]
   1551c:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
   15520:	683f      	ldr	r7, [r7, #0]
   15522:	9705      	str	r7, [sp, #20]
   15524:	9f05      	ldr	r7, [sp, #20]
   15526:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
   1552a:	4a16      	ldr	r2, [pc, #88]	; (15584 <rpc_transport_ipc_rx_shutdown+0xe4>)
   1552c:	6812      	ldr	r2, [r2, #0]
   1552e:	9206      	str	r2, [sp, #24]
   15530:	4a15      	ldr	r2, [pc, #84]	; (15588 <rpc_transport_ipc_rx_shutdown+0xe8>)
   15532:	9f06      	ldr	r7, [sp, #24]
   15534:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
   15538:	6816      	ldr	r6, [r2, #0]
   1553a:	9607      	str	r6, [sp, #28]
   1553c:	9e07      	ldr	r6, [sp, #28]
   1553e:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
   15542:	6815      	ldr	r5, [r2, #0]
   15544:	9508      	str	r5, [sp, #32]
   15546:	9d08      	ldr	r5, [sp, #32]
   15548:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
   1554c:	6814      	ldr	r4, [r2, #0]
   1554e:	9409      	str	r4, [sp, #36]	; 0x24
   15550:	9c09      	ldr	r4, [sp, #36]	; 0x24
   15552:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   15556:	6810      	ldr	r0, [r2, #0]
   15558:	900a      	str	r0, [sp, #40]	; 0x28
   1555a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1555c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
   15560:	6813      	ldr	r3, [r2, #0]
   15562:	930b      	str	r3, [sp, #44]	; 0x2c
   15564:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15566:	b00c      	add	sp, #48	; 0x30
   15568:	bcf0      	pop	{r4, r5, r6, r7}
   1556a:	4770      	bx	lr
   1556c:	20020790 	.word	0x20020790
   15570:	40005000 	.word	0x40005000
   15574:	4002a000 	.word	0x4002a000
   15578:	4002a598 	.word	0x4002a598
   1557c:	4002a5a0 	.word	0x4002a5a0
   15580:	4002a5a8 	.word	0x4002a5a8
   15584:	4002a5ac 	.word	0x4002a5ac
   15588:	4002a308 	.word	0x4002a308

0001558c <rpc_transport_ipc_tx_init>:
   1558c:	2800      	cmp	r0, #0
   1558e:	f000 80b8 	beq.w	15702 <rpc_transport_ipc_tx_init+0x176>
   15592:	2900      	cmp	r1, #0
   15594:	f000 80b5 	beq.w	15702 <rpc_transport_ipc_tx_init+0x176>
   15598:	2a00      	cmp	r2, #0
   1559a:	f000 80b2 	beq.w	15702 <rpc_transport_ipc_tx_init+0x176>
   1559e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155a2:	6a04      	ldr	r4, [r0, #32]
   155a4:	b085      	sub	sp, #20
   155a6:	2c00      	cmp	r4, #0
   155a8:	f000 80a6 	beq.w	156f8 <rpc_transport_ipc_tx_init+0x16c>
   155ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
   155ae:	2800      	cmp	r0, #0
   155b0:	f000 80a2 	beq.w	156f8 <rpc_transport_ipc_tx_init+0x16c>
   155b4:	f642 4587 	movw	r5, #11399	; 0x2c87
   155b8:	f04f 0a00 	mov.w	sl, #0
   155bc:	4e55      	ldr	r6, [pc, #340]	; (15714 <rpc_transport_ipc_tx_init+0x188>)
   155be:	42a8      	cmp	r0, r5
   155c0:	f886 a000 	strb.w	sl, [r6]
   155c4:	f240 80a0 	bls.w	15708 <rpc_transport_ipc_tx_init+0x17c>
   155c8:	2708      	movs	r7, #8
   155ca:	f8df 9180 	ldr.w	r9, [pc, #384]	; 1574c <rpc_transport_ipc_tx_init+0x1c0>
   155ce:	4620      	mov	r0, r4
   155d0:	4616      	mov	r6, r2
   155d2:	460d      	mov	r5, r1
   155d4:	2244      	movs	r2, #68	; 0x44
   155d6:	4651      	mov	r1, sl
   155d8:	f8c9 4000 	str.w	r4, [r9]
   155dc:	f007 fd8f 	bl	1d0fe <memset>
   155e0:	f8d9 2000 	ldr.w	r2, [r9]
   155e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
   155e8:	f8df 8164 	ldr.w	r8, [pc, #356]	; 15750 <rpc_transport_ipc_tx_init+0x1c4>
   155ec:	f882 a001 	strb.w	sl, [r2, #1]
   155f0:	f882 a002 	strb.w	sl, [r2, #2]
   155f4:	f882 a003 	strb.w	sl, [r2, #3]
   155f8:	7017      	strb	r7, [r2, #0]
   155fa:	4618      	mov	r0, r3
   155fc:	2244      	movs	r2, #68	; 0x44
   155fe:	4651      	mov	r1, sl
   15600:	f8c8 3000 	str.w	r3, [r8]
   15604:	f007 fd7b 	bl	1d0fe <memset>
   15608:	f8d8 2000 	ldr.w	r2, [r8]
   1560c:	f104 0388 	add.w	r3, r4, #136	; 0x88
   15610:	f8df b140 	ldr.w	fp, [pc, #320]	; 15754 <rpc_transport_ipc_tx_init+0x1c8>
   15614:	7017      	strb	r7, [r2, #0]
   15616:	f882 a001 	strb.w	sl, [r2, #1]
   1561a:	f882 a002 	strb.w	sl, [r2, #2]
   1561e:	f882 a003 	strb.w	sl, [r2, #3]
   15622:	4618      	mov	r0, r3
   15624:	f44f 7200 	mov.w	r2, #512	; 0x200
   15628:	4651      	mov	r1, sl
   1562a:	f8cb 3000 	str.w	r3, [fp]
   1562e:	f007 fd66 	bl	1d0fe <memset>
   15632:	4b39      	ldr	r3, [pc, #228]	; (15718 <rpc_transport_ipc_tx_init+0x18c>)
   15634:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   15638:	f8c3 c000 	str.w	ip, [r3]
   1563c:	4651      	mov	r1, sl
   1563e:	4660      	mov	r0, ip
   15640:	f44f 7200 	mov.w	r2, #512	; 0x200
   15644:	f007 fd5b 	bl	1d0fe <memset>
   15648:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   1564c:	2106      	movs	r1, #6
   1564e:	f04f 0e01 	mov.w	lr, #1
   15652:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   15656:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   1565a:	4b30      	ldr	r3, [pc, #192]	; (1571c <rpc_transport_ipc_tx_init+0x190>)
   1565c:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   15660:	605c      	str	r4, [r3, #4]
   15662:	4c2f      	ldr	r4, [pc, #188]	; (15720 <rpc_transport_ipc_tx_init+0x194>)
   15664:	f8c3 c008 	str.w	ip, [r3, #8]
   15668:	8199      	strh	r1, [r3, #12]
   1566a:	f8a3 e000 	strh.w	lr, [r3]
   1566e:	4619      	mov	r1, r3
   15670:	611c      	str	r4, [r3, #16]
   15672:	4b2c      	ldr	r3, [pc, #176]	; (15724 <rpc_transport_ipc_tx_init+0x198>)
   15674:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 15758 <rpc_transport_ipc_tx_init+0x1cc>
   15678:	6120      	str	r0, [r4, #16]
   1567a:	482b      	ldr	r0, [pc, #172]	; (15728 <rpc_transport_ipc_tx_init+0x19c>)
   1567c:	6063      	str	r3, [r4, #4]
   1567e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   15682:	60a0      	str	r0, [r4, #8]
   15684:	f8c4 c000 	str.w	ip, [r4]
   15688:	4828      	ldr	r0, [pc, #160]	; (1572c <rpc_transport_ipc_tx_init+0x1a0>)
   1568a:	60e3      	str	r3, [r4, #12]
   1568c:	6162      	str	r2, [r4, #20]
   1568e:	f7fd fe4b 	bl	13328 <nrf_mem_register>
   15692:	2800      	cmp	r0, #0
   15694:	d132      	bne.n	156fc <rpc_transport_ipc_tx_init+0x170>
   15696:	f04f 0c02 	mov.w	ip, #2
   1569a:	2420      	movs	r4, #32
   1569c:	f8d9 1000 	ldr.w	r1, [r9]
   156a0:	f8db 2000 	ldr.w	r2, [fp]
   156a4:	6029      	str	r1, [r5, #0]
   156a6:	4b1c      	ldr	r3, [pc, #112]	; (15718 <rpc_transport_ipc_tx_init+0x18c>)
   156a8:	f8d8 1000 	ldr.w	r1, [r8]
   156ac:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 1575c <rpc_transport_ipc_tx_init+0x1d0>
   156b0:	4d1f      	ldr	r5, [pc, #124]	; (15730 <rpc_transport_ipc_tx_init+0x1a4>)
   156b2:	6031      	str	r1, [r6, #0]
   156b4:	f8ce 2000 	str.w	r2, [lr]
   156b8:	681b      	ldr	r3, [r3, #0]
   156ba:	491e      	ldr	r1, [pc, #120]	; (15734 <rpc_transport_ipc_tx_init+0x1a8>)
   156bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
   156c0:	602a      	str	r2, [r5, #0]
   156c2:	4e1d      	ldr	r6, [pc, #116]	; (15738 <rpc_transport_ipc_tx_init+0x1ac>)
   156c4:	4a1d      	ldr	r2, [pc, #116]	; (1573c <rpc_transport_ipc_tx_init+0x1b0>)
   156c6:	4d1e      	ldr	r5, [pc, #120]	; (15740 <rpc_transport_ipc_tx_init+0x1b4>)
   156c8:	600b      	str	r3, [r1, #0]
   156ca:	f503 7300 	add.w	r3, r3, #512	; 0x200
   156ce:	491d      	ldr	r1, [pc, #116]	; (15744 <rpc_transport_ipc_tx_init+0x1b8>)
   156d0:	6033      	str	r3, [r6, #0]
   156d2:	8028      	strh	r0, [r5, #0]
   156d4:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   156d8:	6809      	ldr	r1, [r1, #0]
   156da:	4b1b      	ldr	r3, [pc, #108]	; (15748 <rpc_transport_ipc_tx_init+0x1bc>)
   156dc:	9103      	str	r1, [sp, #12]
   156de:	9903      	ldr	r1, [sp, #12]
   156e0:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   156e4:	6819      	ldr	r1, [r3, #0]
   156e6:	443b      	add	r3, r7
   156e8:	9102      	str	r1, [sp, #8]
   156ea:	9902      	ldr	r1, [sp, #8]
   156ec:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   156f0:	681b      	ldr	r3, [r3, #0]
   156f2:	9301      	str	r3, [sp, #4]
   156f4:	9b01      	ldr	r3, [sp, #4]
   156f6:	e001      	b.n	156fc <rpc_transport_ipc_tx_init+0x170>
   156f8:	f24c 0007 	movw	r0, #49159	; 0xc007
   156fc:	b005      	add	sp, #20
   156fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15702:	f24c 000e 	movw	r0, #49166	; 0xc00e
   15706:	4770      	bx	lr
   15708:	f24c 0004 	movw	r0, #49156	; 0xc004
   1570c:	b005      	add	sp, #20
   1570e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15712:	bf00      	nop
   15714:	2002647b 	.word	0x2002647b
   15718:	200207c8 	.word	0x200207c8
   1571c:	200207b4 	.word	0x200207b4
   15720:	200207d8 	.word	0x200207d8
   15724:	00040080 	.word	0x00040080
   15728:	00040100 	.word	0x00040100
   1572c:	200207a0 	.word	0x200207a0
   15730:	200207ac 	.word	0x200207ac
   15734:	200207a8 	.word	0x200207a8
   15738:	200207a4 	.word	0x200207a4
   1573c:	4002a000 	.word	0x4002a000
   15740:	20024e20 	.word	0x20024e20
   15744:	4002a514 	.word	0x4002a514
   15748:	4002a51c 	.word	0x4002a51c
   1574c:	200207d4 	.word	0x200207d4
   15750:	200207cc 	.word	0x200207cc
   15754:	200207d0 	.word	0x200207d0
   15758:	00080040 	.word	0x00080040
   1575c:	200207b0 	.word	0x200207b0

00015760 <rpc_transport_ipc_tx_send>:
   15760:	2800      	cmp	r0, #0
   15762:	d05f      	beq.n	15824 <rpc_transport_ipc_tx_send+0xc4>
   15764:	b470      	push	{r4, r5, r6}
   15766:	4b33      	ldr	r3, [pc, #204]	; (15834 <rpc_transport_ipc_tx_send+0xd4>)
   15768:	b083      	sub	sp, #12
   1576a:	681a      	ldr	r2, [r3, #0]
   1576c:	4b32      	ldr	r3, [pc, #200]	; (15838 <rpc_transport_ipc_tx_send+0xd8>)
   1576e:	4282      	cmp	r2, r0
   15770:	d81e      	bhi.n	157b0 <rpc_transport_ipc_tx_send+0x50>
   15772:	681b      	ldr	r3, [r3, #0]
   15774:	4931      	ldr	r1, [pc, #196]	; (1583c <rpc_transport_ipc_tx_send+0xdc>)
   15776:	4283      	cmp	r3, r0
   15778:	6809      	ldr	r1, [r1, #0]
   1577a:	d803      	bhi.n	15784 <rpc_transport_ipc_tx_send+0x24>
   1577c:	4c30      	ldr	r4, [pc, #192]	; (15840 <rpc_transport_ipc_tx_send+0xe0>)
   1577e:	6824      	ldr	r4, [r4, #0]
   15780:	4284      	cmp	r4, r0
   15782:	d847      	bhi.n	15814 <rpc_transport_ipc_tx_send+0xb4>
   15784:	4281      	cmp	r1, r0
   15786:	d90e      	bls.n	157a6 <rpc_transport_ipc_tx_send+0x46>
   15788:	4b2e      	ldr	r3, [pc, #184]	; (15844 <rpc_transport_ipc_tx_send+0xe4>)
   1578a:	781b      	ldrb	r3, [r3, #0]
   1578c:	2b00      	cmp	r3, #0
   1578e:	d14c      	bne.n	1582a <rpc_transport_ipc_tx_send+0xca>
   15790:	1a83      	subs	r3, r0, r2
   15792:	492d      	ldr	r1, [pc, #180]	; (15848 <rpc_transport_ipc_tx_send+0xe8>)
   15794:	099e      	lsrs	r6, r3, #6
   15796:	069b      	lsls	r3, r3, #26
   15798:	680a      	ldr	r2, [r1, #0]
   1579a:	4c2c      	ldr	r4, [pc, #176]	; (1584c <rpc_transport_ipc_tx_send+0xec>)
   1579c:	f04f 0103 	mov.w	r1, #3
   157a0:	f04f 0502 	mov.w	r5, #2
   157a4:	d014      	beq.n	157d0 <rpc_transport_ipc_tx_send+0x70>
   157a6:	f24c 0010 	movw	r0, #49168	; 0xc010
   157aa:	b003      	add	sp, #12
   157ac:	bc70      	pop	{r4, r5, r6}
   157ae:	4770      	bx	lr
   157b0:	681b      	ldr	r3, [r3, #0]
   157b2:	4298      	cmp	r0, r3
   157b4:	d3f7      	bcc.n	157a6 <rpc_transport_ipc_tx_send+0x46>
   157b6:	4a22      	ldr	r2, [pc, #136]	; (15840 <rpc_transport_ipc_tx_send+0xe0>)
   157b8:	6812      	ldr	r2, [r2, #0]
   157ba:	4290      	cmp	r0, r2
   157bc:	d2f3      	bcs.n	157a6 <rpc_transport_ipc_tx_send+0x46>
   157be:	2101      	movs	r1, #1
   157c0:	1ac3      	subs	r3, r0, r3
   157c2:	4a23      	ldr	r2, [pc, #140]	; (15850 <rpc_transport_ipc_tx_send+0xf0>)
   157c4:	099e      	lsrs	r6, r3, #6
   157c6:	069b      	lsls	r3, r3, #26
   157c8:	460d      	mov	r5, r1
   157ca:	6812      	ldr	r2, [r2, #0]
   157cc:	4c21      	ldr	r4, [pc, #132]	; (15854 <rpc_transport_ipc_tx_send+0xf4>)
   157ce:	d1ea      	bne.n	157a6 <rpc_transport_ipc_tx_send+0x46>
   157d0:	6843      	ldr	r3, [r0, #4]
   157d2:	b2db      	uxtb	r3, r3
   157d4:	429d      	cmp	r5, r3
   157d6:	d120      	bne.n	1581a <rpc_transport_ipc_tx_send+0xba>
   157d8:	2020      	movs	r0, #32
   157da:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
   157de:	4d1e      	ldr	r5, [pc, #120]	; (15858 <rpc_transport_ipc_tx_send+0xf8>)
   157e0:	6853      	ldr	r3, [r2, #4]
   157e2:	882e      	ldrh	r6, [r5, #0]
   157e4:	b29b      	uxth	r3, r3
   157e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   157ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   157ee:	f043 0301 	orr.w	r3, r3, #1
   157f2:	6053      	str	r3, [r2, #4]
   157f4:	bf00      	nop
   157f6:	3801      	subs	r0, #1
   157f8:	d1fc      	bne.n	157f4 <rpc_transport_ipc_tx_send+0x94>
   157fa:	2201      	movs	r2, #1
   157fc:	4b17      	ldr	r3, [pc, #92]	; (1585c <rpc_transport_ipc_tx_send+0xfc>)
   157fe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   15802:	6822      	ldr	r2, [r4, #0]
   15804:	882b      	ldrh	r3, [r5, #0]
   15806:	9201      	str	r2, [sp, #4]
   15808:	9a01      	ldr	r2, [sp, #4]
   1580a:	3301      	adds	r3, #1
   1580c:	802b      	strh	r3, [r5, #0]
   1580e:	b003      	add	sp, #12
   15810:	bc70      	pop	{r4, r5, r6}
   15812:	4770      	bx	lr
   15814:	4281      	cmp	r1, r0
   15816:	d9d2      	bls.n	157be <rpc_transport_ipc_tx_send+0x5e>
   15818:	e7b6      	b.n	15788 <rpc_transport_ipc_tx_send+0x28>
   1581a:	f24c 0007 	movw	r0, #49159	; 0xc007
   1581e:	b003      	add	sp, #12
   15820:	bc70      	pop	{r4, r5, r6}
   15822:	4770      	bx	lr
   15824:	f24c 000e 	movw	r0, #49166	; 0xc00e
   15828:	4770      	bx	lr
   1582a:	f24c 000f 	movw	r0, #49167	; 0xc00f
   1582e:	b003      	add	sp, #12
   15830:	bc70      	pop	{r4, r5, r6}
   15832:	4770      	bx	lr
   15834:	200207b0 	.word	0x200207b0
   15838:	200207a8 	.word	0x200207a8
   1583c:	200207ac 	.word	0x200207ac
   15840:	200207a4 	.word	0x200207a4
   15844:	2002647b 	.word	0x2002647b
   15848:	200207d4 	.word	0x200207d4
   1584c:	4002a00c 	.word	0x4002a00c
   15850:	200207cc 	.word	0x200207cc
   15854:	4002a004 	.word	0x4002a004
   15858:	20024e20 	.word	0x20024e20
   1585c:	4002a000 	.word	0x4002a000

00015860 <rpc_transport_ipc_tx_rpc_data_alloc>:
   15860:	4b18      	ldr	r3, [pc, #96]	; (158c4 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   15862:	781b      	ldrb	r3, [r3, #0]
   15864:	bb63      	cbnz	r3, 158c0 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   15866:	b4f0      	push	{r4, r5, r6, r7}
   15868:	4a17      	ldr	r2, [pc, #92]	; (158c8 <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   1586a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1586e:	6814      	ldr	r4, [r2, #0]
   15870:	4b16      	ldr	r3, [pc, #88]	; (158cc <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   15872:	6825      	ldr	r5, [r4, #0]
   15874:	681e      	ldr	r6, [r3, #0]
   15876:	b1a5      	cbz	r5, 158a2 <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   15878:	4607      	mov	r7, r0
   1587a:	00c1      	lsls	r1, r0, #3
   1587c:	1863      	adds	r3, r4, r1
   1587e:	685a      	ldr	r2, [r3, #4]
   15880:	b2d2      	uxtb	r2, r2
   15882:	2a03      	cmp	r2, #3
   15884:	d104      	bne.n	15890 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   15886:	609f      	str	r7, [r3, #8]
   15888:	685a      	ldr	r2, [r3, #4]
   1588a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1588e:	605a      	str	r2, [r3, #4]
   15890:	685a      	ldr	r2, [r3, #4]
   15892:	f012 0fff 	tst.w	r2, #255	; 0xff
   15896:	d101      	bne.n	1589c <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   15898:	689b      	ldr	r3, [r3, #8]
   1589a:	b12b      	cbz	r3, 158a8 <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   1589c:	3001      	adds	r0, #1
   1589e:	42a8      	cmp	r0, r5
   158a0:	d1eb      	bne.n	1587a <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   158a2:	2000      	movs	r0, #0
   158a4:	bcf0      	pop	{r4, r5, r6, r7}
   158a6:	4770      	bx	lr
   158a8:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   158ac:	4421      	add	r1, r4
   158ae:	6088      	str	r0, [r1, #8]
   158b0:	6843      	ldr	r3, [r0, #4]
   158b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   158b6:	f043 0302 	orr.w	r3, r3, #2
   158ba:	6043      	str	r3, [r0, #4]
   158bc:	bcf0      	pop	{r4, r5, r6, r7}
   158be:	4770      	bx	lr
   158c0:	2000      	movs	r0, #0
   158c2:	4770      	bx	lr
   158c4:	2002647b 	.word	0x2002647b
   158c8:	200207d4 	.word	0x200207d4
   158cc:	200207d0 	.word	0x200207d0

000158d0 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   158d0:	b4f0      	push	{r4, r5, r6, r7}
   158d2:	4a15      	ldr	r2, [pc, #84]	; (15928 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   158d4:	4b15      	ldr	r3, [pc, #84]	; (1592c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   158d6:	6814      	ldr	r4, [r2, #0]
   158d8:	681e      	ldr	r6, [r3, #0]
   158da:	6825      	ldr	r5, [r4, #0]
   158dc:	b1ad      	cbz	r5, 1590a <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   158de:	2000      	movs	r0, #0
   158e0:	4607      	mov	r7, r0
   158e2:	00c1      	lsls	r1, r0, #3
   158e4:	1863      	adds	r3, r4, r1
   158e6:	685a      	ldr	r2, [r3, #4]
   158e8:	b2d2      	uxtb	r2, r2
   158ea:	2a03      	cmp	r2, #3
   158ec:	d104      	bne.n	158f8 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   158ee:	609f      	str	r7, [r3, #8]
   158f0:	685a      	ldr	r2, [r3, #4]
   158f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   158f6:	605a      	str	r2, [r3, #4]
   158f8:	685a      	ldr	r2, [r3, #4]
   158fa:	f012 0fff 	tst.w	r2, #255	; 0xff
   158fe:	d101      	bne.n	15904 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   15900:	689b      	ldr	r3, [r3, #8]
   15902:	b12b      	cbz	r3, 15910 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   15904:	3001      	adds	r0, #1
   15906:	4285      	cmp	r5, r0
   15908:	d1eb      	bne.n	158e2 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   1590a:	2000      	movs	r0, #0
   1590c:	bcf0      	pop	{r4, r5, r6, r7}
   1590e:	4770      	bx	lr
   15910:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   15914:	4421      	add	r1, r4
   15916:	6088      	str	r0, [r1, #8]
   15918:	6843      	ldr	r3, [r0, #4]
   1591a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1591e:	f043 0301 	orr.w	r3, r3, #1
   15922:	6043      	str	r3, [r0, #4]
   15924:	bcf0      	pop	{r4, r5, r6, r7}
   15926:	4770      	bx	lr
   15928:	200207cc 	.word	0x200207cc
   1592c:	200207c8 	.word	0x200207c8

00015930 <rpc_transport_ipc_tx_data_alloc>:
   15930:	4b03      	ldr	r3, [pc, #12]	; (15940 <rpc_transport_ipc_tx_data_alloc+0x10>)
   15932:	781b      	ldrb	r3, [r3, #0]
   15934:	b90b      	cbnz	r3, 1593a <rpc_transport_ipc_tx_data_alloc+0xa>
   15936:	f7fd be27 	b.w	13588 <nrf_shared_malloc>
   1593a:	2000      	movs	r0, #0
   1593c:	4770      	bx	lr
   1593e:	bf00      	nop
   15940:	2002647b 	.word	0x2002647b

00015944 <rpc_transport_ipc_tx_suspend>:
   15944:	2201      	movs	r2, #1
   15946:	4b01      	ldr	r3, [pc, #4]	; (1594c <rpc_transport_ipc_tx_suspend+0x8>)
   15948:	701a      	strb	r2, [r3, #0]
   1594a:	4770      	bx	lr
   1594c:	2002647b 	.word	0x2002647b

00015950 <rpc_transport_ipc_tx_shutdown>:
   15950:	b4f0      	push	{r4, r5, r6, r7}
   15952:	4a16      	ldr	r2, [pc, #88]	; (159ac <rpc_transport_ipc_tx_shutdown+0x5c>)
   15954:	4b16      	ldr	r3, [pc, #88]	; (159b0 <rpc_transport_ipc_tx_shutdown+0x60>)
   15956:	6814      	ldr	r4, [r2, #0]
   15958:	681e      	ldr	r6, [r3, #0]
   1595a:	6825      	ldr	r5, [r4, #0]
   1595c:	b1ad      	cbz	r5, 1598a <rpc_transport_ipc_tx_shutdown+0x3a>
   1595e:	2200      	movs	r2, #0
   15960:	4617      	mov	r7, r2
   15962:	00d0      	lsls	r0, r2, #3
   15964:	1823      	adds	r3, r4, r0
   15966:	6859      	ldr	r1, [r3, #4]
   15968:	b2c9      	uxtb	r1, r1
   1596a:	2903      	cmp	r1, #3
   1596c:	d104      	bne.n	15978 <rpc_transport_ipc_tx_shutdown+0x28>
   1596e:	609f      	str	r7, [r3, #8]
   15970:	6859      	ldr	r1, [r3, #4]
   15972:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   15976:	6059      	str	r1, [r3, #4]
   15978:	6859      	ldr	r1, [r3, #4]
   1597a:	f011 0fff 	tst.w	r1, #255	; 0xff
   1597e:	d101      	bne.n	15984 <rpc_transport_ipc_tx_shutdown+0x34>
   15980:	689b      	ldr	r3, [r3, #8]
   15982:	b123      	cbz	r3, 1598e <rpc_transport_ipc_tx_shutdown+0x3e>
   15984:	3201      	adds	r2, #1
   15986:	42aa      	cmp	r2, r5
   15988:	d1eb      	bne.n	15962 <rpc_transport_ipc_tx_shutdown+0x12>
   1598a:	bcf0      	pop	{r4, r5, r6, r7}
   1598c:	4770      	bx	lr
   1598e:	0192      	lsls	r2, r2, #6
   15990:	4404      	add	r4, r0
   15992:	18b0      	adds	r0, r6, r2
   15994:	60a0      	str	r0, [r4, #8]
   15996:	6843      	ldr	r3, [r0, #4]
   15998:	4906      	ldr	r1, [pc, #24]	; (159b4 <rpc_transport_ipc_tx_shutdown+0x64>)
   1599a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1599e:	f043 0301 	orr.w	r3, r3, #1
   159a2:	6043      	str	r3, [r0, #4]
   159a4:	50b1      	str	r1, [r6, r2]
   159a6:	bcf0      	pop	{r4, r5, r6, r7}
   159a8:	f7ff beda 	b.w	15760 <rpc_transport_ipc_tx_send>
   159ac:	200207cc 	.word	0x200207cc
   159b0:	200207c8 	.word	0x200207c8
   159b4:	00030001 	.word	0x00030001

000159b8 <ok_rsp_parser>:
   159b8:	2000      	movs	r0, #0
   159ba:	4770      	bx	lr

000159bc <pdn_state_get_parser>:
   159bc:	2200      	movs	r2, #0
   159be:	b570      	push	{r4, r5, r6, lr}
   159c0:	780b      	ldrb	r3, [r1, #0]
   159c2:	b084      	sub	sp, #16
   159c4:	460e      	mov	r6, r1
   159c6:	e9cd 2200 	strd	r2, r2, [sp]
   159ca:	e9cd 2202 	strd	r2, r2, [sp, #8]
   159ce:	b323      	cbz	r3, 15a1a <pdn_state_get_parser+0x5e>
   159d0:	460c      	mov	r4, r1
   159d2:	2b20      	cmp	r3, #32
   159d4:	460d      	mov	r5, r1
   159d6:	d01b      	beq.n	15a10 <pdn_state_get_parser+0x54>
   159d8:	700b      	strb	r3, [r1, #0]
   159da:	3201      	adds	r2, #1
   159dc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   159e0:	18b1      	adds	r1, r6, r2
   159e2:	460d      	mov	r5, r1
   159e4:	2b00      	cmp	r3, #0
   159e6:	d1f4      	bne.n	159d2 <pdn_state_get_parser+0x16>
   159e8:	2200      	movs	r2, #0
   159ea:	4b0d      	ldr	r3, [pc, #52]	; (15a20 <pdn_state_get_parser+0x64>)
   159ec:	702a      	strb	r2, [r5, #0]
   159ee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   159f2:	4a0c      	ldr	r2, [pc, #48]	; (15a24 <pdn_state_get_parser+0x68>)
   159f4:	681b      	ldr	r3, [r3, #0]
   159f6:	2110      	movs	r1, #16
   159f8:	4668      	mov	r0, sp
   159fa:	f7fa ffbb 	bl	10974 <snprintf>
   159fe:	4669      	mov	r1, sp
   15a00:	4630      	mov	r0, r6
   15a02:	f007 fac2 	bl	1cf8a <strstr>
   15a06:	3000      	adds	r0, #0
   15a08:	bf18      	it	ne
   15a0a:	2001      	movne	r0, #1
   15a0c:	b004      	add	sp, #16
   15a0e:	bd70      	pop	{r4, r5, r6, pc}
   15a10:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   15a14:	2b00      	cmp	r3, #0
   15a16:	d1dc      	bne.n	159d2 <pdn_state_get_parser+0x16>
   15a18:	e7e6      	b.n	159e8 <pdn_state_get_parser+0x2c>
   15a1a:	460d      	mov	r5, r1
   15a1c:	e7e4      	b.n	159e8 <pdn_state_get_parser+0x2c>
   15a1e:	bf00      	nop
   15a20:	200208f4 	.word	0x200208f4
   15a24:	0001f2ac 	.word	0x0001f2ac

00015a28 <pdn_id_get_parser>:
   15a28:	b570      	push	{r4, r5, r6, lr}
   15a2a:	780b      	ldrb	r3, [r1, #0]
   15a2c:	4606      	mov	r6, r0
   15a2e:	b313      	cbz	r3, 15a76 <pdn_id_get_parser+0x4e>
   15a30:	4608      	mov	r0, r1
   15a32:	2400      	movs	r4, #0
   15a34:	460a      	mov	r2, r1
   15a36:	2b20      	cmp	r3, #32
   15a38:	4615      	mov	r5, r2
   15a3a:	d017      	beq.n	15a6c <pdn_id_get_parser+0x44>
   15a3c:	7013      	strb	r3, [r2, #0]
   15a3e:	3401      	adds	r4, #1
   15a40:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   15a44:	190a      	adds	r2, r1, r4
   15a46:	4615      	mov	r5, r2
   15a48:	2b00      	cmp	r3, #0
   15a4a:	d1f4      	bne.n	15a36 <pdn_id_get_parser+0xe>
   15a4c:	2300      	movs	r3, #0
   15a4e:	4608      	mov	r0, r1
   15a50:	702b      	strb	r3, [r5, #0]
   15a52:	213a      	movs	r1, #58	; 0x3a
   15a54:	f007 fad3 	bl	1cffe <strchr>
   15a58:	b130      	cbz	r0, 15a68 <pdn_id_get_parser+0x40>
   15a5a:	3001      	adds	r0, #1
   15a5c:	f007 f980 	bl	1cd60 <atoi>
   15a60:	4b06      	ldr	r3, [pc, #24]	; (15a7c <pdn_id_get_parser+0x54>)
   15a62:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   15a66:	6058      	str	r0, [r3, #4]
   15a68:	2000      	movs	r0, #0
   15a6a:	bd70      	pop	{r4, r5, r6, pc}
   15a6c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   15a70:	2b00      	cmp	r3, #0
   15a72:	d1e0      	bne.n	15a36 <pdn_id_get_parser+0xe>
   15a74:	e7ea      	b.n	15a4c <pdn_id_get_parser+0x24>
   15a76:	460d      	mov	r5, r1
   15a78:	e7e8      	b.n	15a4c <pdn_id_get_parser+0x24>
   15a7a:	bf00      	nop
   15a7c:	200208f4 	.word	0x200208f4

00015a80 <context_create_parser>:
   15a80:	b570      	push	{r4, r5, r6, lr}
   15a82:	780b      	ldrb	r3, [r1, #0]
   15a84:	4606      	mov	r6, r0
   15a86:	b313      	cbz	r3, 15ace <context_create_parser+0x4e>
   15a88:	4608      	mov	r0, r1
   15a8a:	2400      	movs	r4, #0
   15a8c:	460a      	mov	r2, r1
   15a8e:	2b20      	cmp	r3, #32
   15a90:	4615      	mov	r5, r2
   15a92:	d017      	beq.n	15ac4 <context_create_parser+0x44>
   15a94:	7013      	strb	r3, [r2, #0]
   15a96:	3401      	adds	r4, #1
   15a98:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   15a9c:	190a      	adds	r2, r1, r4
   15a9e:	4615      	mov	r5, r2
   15aa0:	2b00      	cmp	r3, #0
   15aa2:	d1f4      	bne.n	15a8e <context_create_parser+0xe>
   15aa4:	2300      	movs	r3, #0
   15aa6:	4608      	mov	r0, r1
   15aa8:	702b      	strb	r3, [r5, #0]
   15aaa:	213a      	movs	r1, #58	; 0x3a
   15aac:	f007 faa7 	bl	1cffe <strchr>
   15ab0:	b130      	cbz	r0, 15ac0 <context_create_parser+0x40>
   15ab2:	4b08      	ldr	r3, [pc, #32]	; (15ad4 <context_create_parser+0x54>)
   15ab4:	3001      	adds	r0, #1
   15ab6:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   15aba:	f007 f951 	bl	1cd60 <atoi>
   15abe:	6020      	str	r0, [r4, #0]
   15ac0:	2000      	movs	r0, #0
   15ac2:	bd70      	pop	{r4, r5, r6, pc}
   15ac4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   15ac8:	2b00      	cmp	r3, #0
   15aca:	d1e0      	bne.n	15a8e <context_create_parser+0xe>
   15acc:	e7ea      	b.n	15aa4 <context_create_parser+0x24>
   15ace:	460d      	mov	r5, r1
   15ad0:	e7e8      	b.n	15aa4 <context_create_parser+0x24>
   15ad2:	bf00      	nop
   15ad4:	200208f4 	.word	0x200208f4

00015ad8 <pdn_interface_init>:
   15ad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15adc:	b510      	push	{r4, lr}
   15ade:	4c09      	ldr	r4, [pc, #36]	; (15b04 <pdn_interface_init+0x2c>)
   15ae0:	2228      	movs	r2, #40	; 0x28
   15ae2:	2100      	movs	r1, #0
   15ae4:	4808      	ldr	r0, [pc, #32]	; (15b08 <pdn_interface_init+0x30>)
   15ae6:	6023      	str	r3, [r4, #0]
   15ae8:	f007 fb09 	bl	1d0fe <memset>
   15aec:	f240 2201 	movw	r2, #513	; 0x201
   15af0:	2100      	movs	r1, #0
   15af2:	2066      	movs	r0, #102	; 0x66
   15af4:	f7fc ffec 	bl	12ad0 <at_interface_open>
   15af8:	2800      	cmp	r0, #0
   15afa:	6020      	str	r0, [r4, #0]
   15afc:	bfb4      	ite	lt
   15afe:	2003      	movlt	r0, #3
   15b00:	2000      	movge	r0, #0
   15b02:	bd10      	pop	{r4, pc}
   15b04:	200207f0 	.word	0x200207f0
   15b08:	200208f4 	.word	0x200208f4

00015b0c <pdn_interface_open>:
   15b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15b10:	2866      	cmp	r0, #102	; 0x66
   15b12:	b083      	sub	sp, #12
   15b14:	f040 80bc 	bne.w	15c90 <pdn_interface_open+0x184>
   15b18:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   15b1c:	f040 80aa 	bne.w	15c74 <pdn_interface_open+0x168>
   15b20:	f240 2302 	movw	r3, #514	; 0x202
   15b24:	429a      	cmp	r2, r3
   15b26:	f040 80a5 	bne.w	15c74 <pdn_interface_open+0x168>
   15b2a:	4c62      	ldr	r4, [pc, #392]	; (15cb4 <pdn_interface_open+0x1a8>)
   15b2c:	6825      	ldr	r5, [r4, #0]
   15b2e:	b34d      	cbz	r5, 15b84 <pdn_interface_open+0x78>
   15b30:	6863      	ldr	r3, [r4, #4]
   15b32:	2b00      	cmp	r3, #0
   15b34:	f000 8098 	beq.w	15c68 <pdn_interface_open+0x15c>
   15b38:	68a3      	ldr	r3, [r4, #8]
   15b3a:	2b00      	cmp	r3, #0
   15b3c:	f000 8096 	beq.w	15c6c <pdn_interface_open+0x160>
   15b40:	68e3      	ldr	r3, [r4, #12]
   15b42:	2b00      	cmp	r3, #0
   15b44:	f000 8094 	beq.w	15c70 <pdn_interface_open+0x164>
   15b48:	6923      	ldr	r3, [r4, #16]
   15b4a:	2b00      	cmp	r3, #0
   15b4c:	f000 8098 	beq.w	15c80 <pdn_interface_open+0x174>
   15b50:	6963      	ldr	r3, [r4, #20]
   15b52:	2b00      	cmp	r3, #0
   15b54:	f000 8098 	beq.w	15c88 <pdn_interface_open+0x17c>
   15b58:	69a3      	ldr	r3, [r4, #24]
   15b5a:	2b00      	cmp	r3, #0
   15b5c:	f000 8096 	beq.w	15c8c <pdn_interface_open+0x180>
   15b60:	69e3      	ldr	r3, [r4, #28]
   15b62:	2b00      	cmp	r3, #0
   15b64:	f000 808e 	beq.w	15c84 <pdn_interface_open+0x178>
   15b68:	6a23      	ldr	r3, [r4, #32]
   15b6a:	b153      	cbz	r3, 15b82 <pdn_interface_open+0x76>
   15b6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15b6e:	2509      	movs	r5, #9
   15b70:	b143      	cbz	r3, 15b84 <pdn_interface_open+0x78>
   15b72:	200c      	movs	r0, #12
   15b74:	f7fb fc4c 	bl	11410 <bsd_os_errno_set>
   15b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15b7c:	b003      	add	sp, #12
   15b7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15b82:	2508      	movs	r5, #8
   15b84:	2074      	movs	r0, #116	; 0x74
   15b86:	f7fd fce9 	bl	1355c <nrf_malloc>
   15b8a:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   15b8e:	2800      	cmp	r0, #0
   15b90:	d0ef      	beq.n	15b72 <pdn_interface_open+0x66>
   15b92:	2274      	movs	r2, #116	; 0x74
   15b94:	2100      	movs	r1, #0
   15b96:	f007 fab2 	bl	1d0fe <memset>
   15b9a:	2101      	movs	r1, #1
   15b9c:	2003      	movs	r0, #3
   15b9e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   15ba2:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   15ba6:	4a44      	ldr	r2, [pc, #272]	; (15cb8 <pdn_interface_open+0x1ac>)
   15ba8:	6099      	str	r1, [r3, #8]
   15baa:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   15bae:	f44f 7180 	mov.w	r1, #256	; 0x100
   15bb2:	6718      	str	r0, [r3, #112]	; 0x70
   15bb4:	605f      	str	r7, [r3, #4]
   15bb6:	4841      	ldr	r0, [pc, #260]	; (15cbc <pdn_interface_open+0x1b0>)
   15bb8:	f8df 810c 	ldr.w	r8, [pc, #268]	; 15cc8 <pdn_interface_open+0x1bc>
   15bbc:	f7fa feda 	bl	10974 <snprintf>
   15bc0:	483e      	ldr	r0, [pc, #248]	; (15cbc <pdn_interface_open+0x1b0>)
   15bc2:	f8d8 9000 	ldr.w	r9, [r8]
   15bc6:	2600      	movs	r6, #0
   15bc8:	f007 fa34 	bl	1d034 <strlen>
   15bcc:	4633      	mov	r3, r6
   15bce:	4602      	mov	r2, r0
   15bd0:	493a      	ldr	r1, [pc, #232]	; (15cbc <pdn_interface_open+0x1b0>)
   15bd2:	4648      	mov	r0, r9
   15bd4:	9601      	str	r6, [sp, #4]
   15bd6:	9600      	str	r6, [sp, #0]
   15bd8:	f7fc ff24 	bl	12a24 <at_interface_write>
   15bdc:	4681      	mov	r9, r0
   15bde:	4837      	ldr	r0, [pc, #220]	; (15cbc <pdn_interface_open+0x1b0>)
   15be0:	f007 fa28 	bl	1d034 <strlen>
   15be4:	4548      	cmp	r0, r9
   15be6:	d159      	bne.n	15c9c <pdn_interface_open+0x190>
   15be8:	4633      	mov	r3, r6
   15bea:	e9cd 6600 	strd	r6, r6, [sp]
   15bee:	f44f 7280 	mov.w	r2, #256	; 0x100
   15bf2:	4932      	ldr	r1, [pc, #200]	; (15cbc <pdn_interface_open+0x1b0>)
   15bf4:	f8d8 0000 	ldr.w	r0, [r8]
   15bf8:	f7fc fffc 	bl	12bf4 <at_interface_read>
   15bfc:	4606      	mov	r6, r0
   15bfe:	4830      	ldr	r0, [pc, #192]	; (15cc0 <pdn_interface_open+0x1b4>)
   15c00:	f007 fa18 	bl	1d034 <strlen>
   15c04:	4286      	cmp	r6, r0
   15c06:	db15      	blt.n	15c34 <pdn_interface_open+0x128>
   15c08:	4602      	mov	r2, r0
   15c0a:	492c      	ldr	r1, [pc, #176]	; (15cbc <pdn_interface_open+0x1b0>)
   15c0c:	482c      	ldr	r0, [pc, #176]	; (15cc0 <pdn_interface_open+0x1b4>)
   15c0e:	f007 fa24 	bl	1d05a <strncmp>
   15c12:	b978      	cbnz	r0, 15c34 <pdn_interface_open+0x128>
   15c14:	4929      	ldr	r1, [pc, #164]	; (15cbc <pdn_interface_open+0x1b0>)
   15c16:	4628      	mov	r0, r5
   15c18:	f7ff ff32 	bl	15a80 <context_create_parser>
   15c1c:	b9b0      	cbnz	r0, 15c4c <pdn_interface_open+0x140>
   15c1e:	2202      	movs	r2, #2
   15c20:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   15c24:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   15c28:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   15c2c:	609a      	str	r2, [r3, #8]
   15c2e:	b003      	add	sp, #12
   15c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15c34:	4823      	ldr	r0, [pc, #140]	; (15cc4 <pdn_interface_open+0x1b8>)
   15c36:	f007 f9fd 	bl	1d034 <strlen>
   15c3a:	4920      	ldr	r1, [pc, #128]	; (15cbc <pdn_interface_open+0x1b0>)
   15c3c:	4602      	mov	r2, r0
   15c3e:	4821      	ldr	r0, [pc, #132]	; (15cc4 <pdn_interface_open+0x1b8>)
   15c40:	f007 fa0b 	bl	1d05a <strncmp>
   15c44:	b960      	cbnz	r0, 15c60 <pdn_interface_open+0x154>
   15c46:	2008      	movs	r0, #8
   15c48:	f7fb fbe2 	bl	11410 <bsd_os_errno_set>
   15c4c:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   15c50:	f7fd fc8e 	bl	13570 <nrf_free>
   15c54:	2300      	movs	r3, #0
   15c56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15c5a:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   15c5e:	e78d      	b.n	15b7c <pdn_interface_open+0x70>
   15c60:	2005      	movs	r0, #5
   15c62:	f7fb fbd5 	bl	11410 <bsd_os_errno_set>
   15c66:	e7f1      	b.n	15c4c <pdn_interface_open+0x140>
   15c68:	2501      	movs	r5, #1
   15c6a:	e78b      	b.n	15b84 <pdn_interface_open+0x78>
   15c6c:	2502      	movs	r5, #2
   15c6e:	e789      	b.n	15b84 <pdn_interface_open+0x78>
   15c70:	2503      	movs	r5, #3
   15c72:	e787      	b.n	15b84 <pdn_interface_open+0x78>
   15c74:	2016      	movs	r0, #22
   15c76:	f7fb fbcb 	bl	11410 <bsd_os_errno_set>
   15c7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15c7e:	e77d      	b.n	15b7c <pdn_interface_open+0x70>
   15c80:	2504      	movs	r5, #4
   15c82:	e77f      	b.n	15b84 <pdn_interface_open+0x78>
   15c84:	2507      	movs	r5, #7
   15c86:	e77d      	b.n	15b84 <pdn_interface_open+0x78>
   15c88:	2505      	movs	r5, #5
   15c8a:	e77b      	b.n	15b84 <pdn_interface_open+0x78>
   15c8c:	2506      	movs	r5, #6
   15c8e:	e779      	b.n	15b84 <pdn_interface_open+0x78>
   15c90:	202f      	movs	r0, #47	; 0x2f
   15c92:	f7fb fbbd 	bl	11410 <bsd_os_errno_set>
   15c96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15c9a:	e76f      	b.n	15b7c <pdn_interface_open+0x70>
   15c9c:	2005      	movs	r0, #5
   15c9e:	f7fb fbb7 	bl	11410 <bsd_os_errno_set>
   15ca2:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   15ca6:	f7fd fc63 	bl	13570 <nrf_free>
   15caa:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   15cae:	4638      	mov	r0, r7
   15cb0:	e764      	b.n	15b7c <pdn_interface_open+0x70>
   15cb2:	bf00      	nop
   15cb4:	200208f4 	.word	0x200208f4
   15cb8:	0001f288 	.word	0x0001f288
   15cbc:	200207f4 	.word	0x200207f4
   15cc0:	0001f298 	.word	0x0001f298
   15cc4:	0001f2a4 	.word	0x0001f2a4
   15cc8:	200207f0 	.word	0x200207f0

00015ccc <pdn_interface_connect>:
   15ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cd0:	b083      	sub	sp, #12
   15cd2:	2900      	cmp	r1, #0
   15cd4:	f000 813e 	beq.w	15f54 <pdn_interface_connect+0x288>
   15cd8:	2a64      	cmp	r2, #100	; 0x64
   15cda:	4691      	mov	r9, r2
   15cdc:	f200 813a 	bhi.w	15f54 <pdn_interface_connect+0x288>
   15ce0:	4605      	mov	r5, r0
   15ce2:	4608      	mov	r0, r1
   15ce4:	4688      	mov	r8, r1
   15ce6:	f007 f9a5 	bl	1d034 <strlen>
   15cea:	2864      	cmp	r0, #100	; 0x64
   15cec:	f200 8132 	bhi.w	15f54 <pdn_interface_connect+0x288>
   15cf0:	4ba5      	ldr	r3, [pc, #660]	; (15f88 <pdn_interface_connect+0x2bc>)
   15cf2:	43ab      	bics	r3, r5
   15cf4:	f040 8125 	bne.w	15f42 <pdn_interface_connect+0x276>
   15cf8:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   15cfc:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   15d00:	2d09      	cmp	r5, #9
   15d02:	f300 811e 	bgt.w	15f42 <pdn_interface_connect+0x276>
   15d06:	4fa1      	ldr	r7, [pc, #644]	; (15f8c <pdn_interface_connect+0x2c0>)
   15d08:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   15d0c:	2b00      	cmp	r3, #0
   15d0e:	f000 8118 	beq.w	15f42 <pdn_interface_connect+0x276>
   15d12:	689a      	ldr	r2, [r3, #8]
   15d14:	2a00      	cmp	r2, #0
   15d16:	f000 8114 	beq.w	15f42 <pdn_interface_connect+0x276>
   15d1a:	2d00      	cmp	r5, #0
   15d1c:	f2c0 8111 	blt.w	15f42 <pdn_interface_connect+0x276>
   15d20:	689b      	ldr	r3, [r3, #8]
   15d22:	2b02      	cmp	r3, #2
   15d24:	f040 810d 	bne.w	15f42 <pdn_interface_connect+0x276>
   15d28:	4e99      	ldr	r6, [pc, #612]	; (15f90 <pdn_interface_connect+0x2c4>)
   15d2a:	4a9a      	ldr	r2, [pc, #616]	; (15f94 <pdn_interface_connect+0x2c8>)
   15d2c:	f44f 7180 	mov.w	r1, #256	; 0x100
   15d30:	4630      	mov	r0, r6
   15d32:	f7fa fe1f 	bl	10974 <snprintf>
   15d36:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   15d3a:	4604      	mov	r4, r0
   15d3c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   15d40:	681b      	ldr	r3, [r3, #0]
   15d42:	4a95      	ldr	r2, [pc, #596]	; (15f98 <pdn_interface_connect+0x2cc>)
   15d44:	1830      	adds	r0, r6, r0
   15d46:	f7fa fe15 	bl	10974 <snprintf>
   15d4a:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   15d4e:	4404      	add	r4, r0
   15d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   15d52:	f003 0203 	and.w	r2, r3, #3
   15d56:	2a03      	cmp	r2, #3
   15d58:	f000 80ea 	beq.w	15f30 <pdn_interface_connect+0x264>
   15d5c:	079b      	lsls	r3, r3, #30
   15d5e:	eb06 0004 	add.w	r0, r6, r4
   15d62:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   15d66:	bf4c      	ite	mi
   15d68:	4b8c      	ldrmi	r3, [pc, #560]	; (15f9c <pdn_interface_connect+0x2d0>)
   15d6a:	4b8d      	ldrpl	r3, [pc, #564]	; (15fa0 <pdn_interface_connect+0x2d4>)
   15d6c:	4a8d      	ldr	r2, [pc, #564]	; (15fa4 <pdn_interface_connect+0x2d8>)
   15d6e:	f7fa fe01 	bl	10974 <snprintf>
   15d72:	4404      	add	r4, r0
   15d74:	4643      	mov	r3, r8
   15d76:	4a8c      	ldr	r2, [pc, #560]	; (15fa8 <pdn_interface_connect+0x2dc>)
   15d78:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   15d7c:	1930      	adds	r0, r6, r4
   15d7e:	f7fa fdf9 	bl	10974 <snprintf>
   15d82:	4420      	add	r0, r4
   15d84:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   15d88:	f300 80f7 	bgt.w	15f7a <pdn_interface_connect+0x2ae>
   15d8c:	f8df a238 	ldr.w	sl, [pc, #568]	; 15fc8 <pdn_interface_connect+0x2fc>
   15d90:	487f      	ldr	r0, [pc, #508]	; (15f90 <pdn_interface_connect+0x2c4>)
   15d92:	f8da b000 	ldr.w	fp, [sl]
   15d96:	2400      	movs	r4, #0
   15d98:	f007 f94c 	bl	1d034 <strlen>
   15d9c:	4623      	mov	r3, r4
   15d9e:	4602      	mov	r2, r0
   15da0:	497b      	ldr	r1, [pc, #492]	; (15f90 <pdn_interface_connect+0x2c4>)
   15da2:	4658      	mov	r0, fp
   15da4:	9401      	str	r4, [sp, #4]
   15da6:	9400      	str	r4, [sp, #0]
   15da8:	f7fc fe3c 	bl	12a24 <at_interface_write>
   15dac:	4683      	mov	fp, r0
   15dae:	4878      	ldr	r0, [pc, #480]	; (15f90 <pdn_interface_connect+0x2c4>)
   15db0:	f007 f940 	bl	1d034 <strlen>
   15db4:	4558      	cmp	r0, fp
   15db6:	d008      	beq.n	15dca <pdn_interface_connect+0xfe>
   15db8:	2005      	movs	r0, #5
   15dba:	f7fb fb29 	bl	11410 <bsd_os_errno_set>
   15dbe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15dc2:	4620      	mov	r0, r4
   15dc4:	b003      	add	sp, #12
   15dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15dca:	4623      	mov	r3, r4
   15dcc:	e9cd 4400 	strd	r4, r4, [sp]
   15dd0:	f44f 7280 	mov.w	r2, #256	; 0x100
   15dd4:	496e      	ldr	r1, [pc, #440]	; (15f90 <pdn_interface_connect+0x2c4>)
   15dd6:	f8da 0000 	ldr.w	r0, [sl]
   15dda:	f7fc ff0b 	bl	12bf4 <at_interface_read>
   15dde:	4604      	mov	r4, r0
   15de0:	4872      	ldr	r0, [pc, #456]	; (15fac <pdn_interface_connect+0x2e0>)
   15de2:	f007 f927 	bl	1d034 <strlen>
   15de6:	4284      	cmp	r4, r0
   15de8:	f2c0 8091 	blt.w	15f0e <pdn_interface_connect+0x242>
   15dec:	4602      	mov	r2, r0
   15dee:	4968      	ldr	r1, [pc, #416]	; (15f90 <pdn_interface_connect+0x2c4>)
   15df0:	486e      	ldr	r0, [pc, #440]	; (15fac <pdn_interface_connect+0x2e0>)
   15df2:	f007 f932 	bl	1d05a <strncmp>
   15df6:	2800      	cmp	r0, #0
   15df8:	f040 8089 	bne.w	15f0e <pdn_interface_connect+0x242>
   15dfc:	4964      	ldr	r1, [pc, #400]	; (15f90 <pdn_interface_connect+0x2c4>)
   15dfe:	4628      	mov	r0, r5
   15e00:	f7ff fdda 	bl	159b8 <ok_rsp_parser>
   15e04:	4604      	mov	r4, r0
   15e06:	2800      	cmp	r0, #0
   15e08:	d1db      	bne.n	15dc2 <pdn_interface_connect+0xf6>
   15e0a:	4a69      	ldr	r2, [pc, #420]	; (15fb0 <pdn_interface_connect+0x2e4>)
   15e0c:	f44f 7180 	mov.w	r1, #256	; 0x100
   15e10:	485f      	ldr	r0, [pc, #380]	; (15f90 <pdn_interface_connect+0x2c4>)
   15e12:	f7fa fdaf 	bl	10974 <snprintf>
   15e16:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   15e1a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   15e1e:	681b      	ldr	r3, [r3, #0]
   15e20:	4a64      	ldr	r2, [pc, #400]	; (15fb4 <pdn_interface_connect+0x2e8>)
   15e22:	4430      	add	r0, r6
   15e24:	f7fa fda6 	bl	10974 <snprintf>
   15e28:	4859      	ldr	r0, [pc, #356]	; (15f90 <pdn_interface_connect+0x2c4>)
   15e2a:	f8da b000 	ldr.w	fp, [sl]
   15e2e:	f007 f901 	bl	1d034 <strlen>
   15e32:	4623      	mov	r3, r4
   15e34:	4602      	mov	r2, r0
   15e36:	4956      	ldr	r1, [pc, #344]	; (15f90 <pdn_interface_connect+0x2c4>)
   15e38:	4658      	mov	r0, fp
   15e3a:	9401      	str	r4, [sp, #4]
   15e3c:	9400      	str	r4, [sp, #0]
   15e3e:	f7fc fdf1 	bl	12a24 <at_interface_write>
   15e42:	4683      	mov	fp, r0
   15e44:	4852      	ldr	r0, [pc, #328]	; (15f90 <pdn_interface_connect+0x2c4>)
   15e46:	f007 f8f5 	bl	1d034 <strlen>
   15e4a:	4558      	cmp	r0, fp
   15e4c:	d1b4      	bne.n	15db8 <pdn_interface_connect+0xec>
   15e4e:	4623      	mov	r3, r4
   15e50:	f44f 7280 	mov.w	r2, #256	; 0x100
   15e54:	494e      	ldr	r1, [pc, #312]	; (15f90 <pdn_interface_connect+0x2c4>)
   15e56:	f8da 0000 	ldr.w	r0, [sl]
   15e5a:	e9cd 4400 	strd	r4, r4, [sp]
   15e5e:	f7fc fec9 	bl	12bf4 <at_interface_read>
   15e62:	4683      	mov	fp, r0
   15e64:	4851      	ldr	r0, [pc, #324]	; (15fac <pdn_interface_connect+0x2e0>)
   15e66:	f007 f8e5 	bl	1d034 <strlen>
   15e6a:	4583      	cmp	fp, r0
   15e6c:	db4f      	blt.n	15f0e <pdn_interface_connect+0x242>
   15e6e:	4602      	mov	r2, r0
   15e70:	4947      	ldr	r1, [pc, #284]	; (15f90 <pdn_interface_connect+0x2c4>)
   15e72:	484e      	ldr	r0, [pc, #312]	; (15fac <pdn_interface_connect+0x2e0>)
   15e74:	f007 f8f1 	bl	1d05a <strncmp>
   15e78:	2800      	cmp	r0, #0
   15e7a:	d148      	bne.n	15f0e <pdn_interface_connect+0x242>
   15e7c:	2103      	movs	r1, #3
   15e7e:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   15e82:	464a      	mov	r2, r9
   15e84:	6099      	str	r1, [r3, #8]
   15e86:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   15e8a:	4641      	mov	r1, r8
   15e8c:	300c      	adds	r0, #12
   15e8e:	f007 f90c 	bl	1d0aa <memcpy>
   15e92:	4a49      	ldr	r2, [pc, #292]	; (15fb8 <pdn_interface_connect+0x2ec>)
   15e94:	f44f 7180 	mov.w	r1, #256	; 0x100
   15e98:	483d      	ldr	r0, [pc, #244]	; (15f90 <pdn_interface_connect+0x2c4>)
   15e9a:	f7fa fd6b 	bl	10974 <snprintf>
   15e9e:	4601      	mov	r1, r0
   15ea0:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   15ea4:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   15ea8:	681b      	ldr	r3, [r3, #0]
   15eaa:	4a42      	ldr	r2, [pc, #264]	; (15fb4 <pdn_interface_connect+0x2e8>)
   15eac:	1830      	adds	r0, r6, r0
   15eae:	f7fa fd61 	bl	10974 <snprintf>
   15eb2:	4837      	ldr	r0, [pc, #220]	; (15f90 <pdn_interface_connect+0x2c4>)
   15eb4:	f8da 6000 	ldr.w	r6, [sl]
   15eb8:	f007 f8bc 	bl	1d034 <strlen>
   15ebc:	4623      	mov	r3, r4
   15ebe:	4602      	mov	r2, r0
   15ec0:	4933      	ldr	r1, [pc, #204]	; (15f90 <pdn_interface_connect+0x2c4>)
   15ec2:	4630      	mov	r0, r6
   15ec4:	9401      	str	r4, [sp, #4]
   15ec6:	9400      	str	r4, [sp, #0]
   15ec8:	f7fc fdac 	bl	12a24 <at_interface_write>
   15ecc:	4606      	mov	r6, r0
   15ece:	4830      	ldr	r0, [pc, #192]	; (15f90 <pdn_interface_connect+0x2c4>)
   15ed0:	f007 f8b0 	bl	1d034 <strlen>
   15ed4:	42b0      	cmp	r0, r6
   15ed6:	d153      	bne.n	15f80 <pdn_interface_connect+0x2b4>
   15ed8:	4623      	mov	r3, r4
   15eda:	f44f 7280 	mov.w	r2, #256	; 0x100
   15ede:	492c      	ldr	r1, [pc, #176]	; (15f90 <pdn_interface_connect+0x2c4>)
   15ee0:	f8da 0000 	ldr.w	r0, [sl]
   15ee4:	e9cd 4400 	strd	r4, r4, [sp]
   15ee8:	f7fc fe84 	bl	12bf4 <at_interface_read>
   15eec:	4606      	mov	r6, r0
   15eee:	4833      	ldr	r0, [pc, #204]	; (15fbc <pdn_interface_connect+0x2f0>)
   15ef0:	f007 f8a0 	bl	1d034 <strlen>
   15ef4:	4286      	cmp	r6, r0
   15ef6:	db33      	blt.n	15f60 <pdn_interface_connect+0x294>
   15ef8:	4602      	mov	r2, r0
   15efa:	4925      	ldr	r1, [pc, #148]	; (15f90 <pdn_interface_connect+0x2c4>)
   15efc:	482f      	ldr	r0, [pc, #188]	; (15fbc <pdn_interface_connect+0x2f0>)
   15efe:	f007 f8ac 	bl	1d05a <strncmp>
   15f02:	bb68      	cbnz	r0, 15f60 <pdn_interface_connect+0x294>
   15f04:	4628      	mov	r0, r5
   15f06:	4922      	ldr	r1, [pc, #136]	; (15f90 <pdn_interface_connect+0x2c4>)
   15f08:	f7ff fd8e 	bl	15a28 <pdn_id_get_parser>
   15f0c:	e759      	b.n	15dc2 <pdn_interface_connect+0xf6>
   15f0e:	482c      	ldr	r0, [pc, #176]	; (15fc0 <pdn_interface_connect+0x2f4>)
   15f10:	f007 f890 	bl	1d034 <strlen>
   15f14:	491e      	ldr	r1, [pc, #120]	; (15f90 <pdn_interface_connect+0x2c4>)
   15f16:	4602      	mov	r2, r0
   15f18:	4829      	ldr	r0, [pc, #164]	; (15fc0 <pdn_interface_connect+0x2f4>)
   15f1a:	f007 f89e 	bl	1d05a <strncmp>
   15f1e:	2800      	cmp	r0, #0
   15f20:	f47f af4a 	bne.w	15db8 <pdn_interface_connect+0xec>
   15f24:	2008      	movs	r0, #8
   15f26:	f7fb fa73 	bl	11410 <bsd_os_errno_set>
   15f2a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15f2e:	e748      	b.n	15dc2 <pdn_interface_connect+0xf6>
   15f30:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   15f34:	1930      	adds	r0, r6, r4
   15f36:	4b23      	ldr	r3, [pc, #140]	; (15fc4 <pdn_interface_connect+0x2f8>)
   15f38:	4a1a      	ldr	r2, [pc, #104]	; (15fa4 <pdn_interface_connect+0x2d8>)
   15f3a:	f7fa fd1b 	bl	10974 <snprintf>
   15f3e:	4404      	add	r4, r0
   15f40:	e718      	b.n	15d74 <pdn_interface_connect+0xa8>
   15f42:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15f46:	2009      	movs	r0, #9
   15f48:	f7fb fa62 	bl	11410 <bsd_os_errno_set>
   15f4c:	4620      	mov	r0, r4
   15f4e:	b003      	add	sp, #12
   15f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f54:	2016      	movs	r0, #22
   15f56:	f7fb fa5b 	bl	11410 <bsd_os_errno_set>
   15f5a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15f5e:	e730      	b.n	15dc2 <pdn_interface_connect+0xf6>
   15f60:	4817      	ldr	r0, [pc, #92]	; (15fc0 <pdn_interface_connect+0x2f4>)
   15f62:	f007 f867 	bl	1d034 <strlen>
   15f66:	490a      	ldr	r1, [pc, #40]	; (15f90 <pdn_interface_connect+0x2c4>)
   15f68:	4602      	mov	r2, r0
   15f6a:	4815      	ldr	r0, [pc, #84]	; (15fc0 <pdn_interface_connect+0x2f4>)
   15f6c:	f007 f875 	bl	1d05a <strncmp>
   15f70:	b930      	cbnz	r0, 15f80 <pdn_interface_connect+0x2b4>
   15f72:	2008      	movs	r0, #8
   15f74:	f7fb fa4c 	bl	11410 <bsd_os_errno_set>
   15f78:	e723      	b.n	15dc2 <pdn_interface_connect+0xf6>
   15f7a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15f7e:	e720      	b.n	15dc2 <pdn_interface_connect+0xf6>
   15f80:	2005      	movs	r0, #5
   15f82:	f7fb fa45 	bl	11410 <bsd_os_errno_set>
   15f86:	e71c      	b.n	15dc2 <pdn_interface_connect+0xf6>
   15f88:	789a0000 	.word	0x789a0000
   15f8c:	200208f4 	.word	0x200208f4
   15f90:	200207f4 	.word	0x200207f4
   15f94:	0001f210 	.word	0x0001f210
   15f98:	0001f21c 	.word	0x0001f21c
   15f9c:	0001f230 	.word	0x0001f230
   15fa0:	0001f238 	.word	0x0001f238
   15fa4:	0001f228 	.word	0x0001f228
   15fa8:	0001f26c 	.word	0x0001f26c
   15fac:	0001f23c 	.word	0x0001f23c
   15fb0:	0001f240 	.word	0x0001f240
   15fb4:	0001f24c 	.word	0x0001f24c
   15fb8:	0001f250 	.word	0x0001f250
   15fbc:	0001f260 	.word	0x0001f260
   15fc0:	0001f2a4 	.word	0x0001f2a4
   15fc4:	0001f220 	.word	0x0001f220
   15fc8:	200207f0 	.word	0x200207f0

00015fcc <pdn_interface_close>:
   15fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15fd0:	4b63      	ldr	r3, [pc, #396]	; (16160 <pdn_interface_close+0x194>)
   15fd2:	b083      	sub	sp, #12
   15fd4:	4383      	bics	r3, r0
   15fd6:	f040 809d 	bne.w	16114 <pdn_interface_close+0x148>
   15fda:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   15fde:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   15fe2:	2c09      	cmp	r4, #9
   15fe4:	f300 8096 	bgt.w	16114 <pdn_interface_close+0x148>
   15fe8:	4d5e      	ldr	r5, [pc, #376]	; (16164 <pdn_interface_close+0x198>)
   15fea:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   15fee:	2800      	cmp	r0, #0
   15ff0:	f000 8090 	beq.w	16114 <pdn_interface_close+0x148>
   15ff4:	6883      	ldr	r3, [r0, #8]
   15ff6:	2b00      	cmp	r3, #0
   15ff8:	f000 808c 	beq.w	16114 <pdn_interface_close+0x148>
   15ffc:	6883      	ldr	r3, [r0, #8]
   15ffe:	2b03      	cmp	r3, #3
   16000:	d008      	beq.n	16014 <pdn_interface_close+0x48>
   16002:	f7fd fab5 	bl	13570 <nrf_free>
   16006:	2300      	movs	r3, #0
   16008:	4618      	mov	r0, r3
   1600a:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   1600e:	b003      	add	sp, #12
   16010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16014:	4e54      	ldr	r6, [pc, #336]	; (16168 <pdn_interface_close+0x19c>)
   16016:	4a55      	ldr	r2, [pc, #340]	; (1616c <pdn_interface_close+0x1a0>)
   16018:	f44f 7180 	mov.w	r1, #256	; 0x100
   1601c:	4630      	mov	r0, r6
   1601e:	f7fa fca9 	bl	10974 <snprintf>
   16022:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   16026:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1602a:	681b      	ldr	r3, [r3, #0]
   1602c:	4a50      	ldr	r2, [pc, #320]	; (16170 <pdn_interface_close+0x1a4>)
   1602e:	4430      	add	r0, r6
   16030:	f8df 814c 	ldr.w	r8, [pc, #332]	; 16180 <pdn_interface_close+0x1b4>
   16034:	f7fa fc9e 	bl	10974 <snprintf>
   16038:	4630      	mov	r0, r6
   1603a:	f8d8 9000 	ldr.w	r9, [r8]
   1603e:	2700      	movs	r7, #0
   16040:	f006 fff8 	bl	1d034 <strlen>
   16044:	4631      	mov	r1, r6
   16046:	4602      	mov	r2, r0
   16048:	463b      	mov	r3, r7
   1604a:	4648      	mov	r0, r9
   1604c:	9701      	str	r7, [sp, #4]
   1604e:	9700      	str	r7, [sp, #0]
   16050:	f7fc fce8 	bl	12a24 <at_interface_write>
   16054:	4681      	mov	r9, r0
   16056:	4630      	mov	r0, r6
   16058:	f006 ffec 	bl	1d034 <strlen>
   1605c:	4548      	cmp	r0, r9
   1605e:	d176      	bne.n	1614e <pdn_interface_close+0x182>
   16060:	463b      	mov	r3, r7
   16062:	e9cd 7700 	strd	r7, r7, [sp]
   16066:	f44f 7280 	mov.w	r2, #256	; 0x100
   1606a:	4631      	mov	r1, r6
   1606c:	f8d8 0000 	ldr.w	r0, [r8]
   16070:	f7fc fdc0 	bl	12bf4 <at_interface_read>
   16074:	4607      	mov	r7, r0
   16076:	483f      	ldr	r0, [pc, #252]	; (16174 <pdn_interface_close+0x1a8>)
   16078:	f006 ffdc 	bl	1d034 <strlen>
   1607c:	4287      	cmp	r7, r0
   1607e:	da4f      	bge.n	16120 <pdn_interface_close+0x154>
   16080:	483d      	ldr	r0, [pc, #244]	; (16178 <pdn_interface_close+0x1ac>)
   16082:	f006 ffd7 	bl	1d034 <strlen>
   16086:	4938      	ldr	r1, [pc, #224]	; (16168 <pdn_interface_close+0x19c>)
   16088:	4602      	mov	r2, r0
   1608a:	483b      	ldr	r0, [pc, #236]	; (16178 <pdn_interface_close+0x1ac>)
   1608c:	f006 ffe5 	bl	1d05a <strncmp>
   16090:	2800      	cmp	r0, #0
   16092:	d15c      	bne.n	1614e <pdn_interface_close+0x182>
   16094:	2008      	movs	r0, #8
   16096:	f7fb f9bb 	bl	11410 <bsd_os_errno_set>
   1609a:	4a38      	ldr	r2, [pc, #224]	; (1617c <pdn_interface_close+0x1b0>)
   1609c:	f44f 7180 	mov.w	r1, #256	; 0x100
   160a0:	4831      	ldr	r0, [pc, #196]	; (16168 <pdn_interface_close+0x19c>)
   160a2:	f7fa fc67 	bl	10974 <snprintf>
   160a6:	4601      	mov	r1, r0
   160a8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   160ac:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   160b0:	681b      	ldr	r3, [r3, #0]
   160b2:	4a2f      	ldr	r2, [pc, #188]	; (16170 <pdn_interface_close+0x1a4>)
   160b4:	1830      	adds	r0, r6, r0
   160b6:	f7fa fc5d 	bl	10974 <snprintf>
   160ba:	482b      	ldr	r0, [pc, #172]	; (16168 <pdn_interface_close+0x19c>)
   160bc:	f8d8 7000 	ldr.w	r7, [r8]
   160c0:	2600      	movs	r6, #0
   160c2:	f006 ffb7 	bl	1d034 <strlen>
   160c6:	4633      	mov	r3, r6
   160c8:	4602      	mov	r2, r0
   160ca:	4927      	ldr	r1, [pc, #156]	; (16168 <pdn_interface_close+0x19c>)
   160cc:	4638      	mov	r0, r7
   160ce:	9601      	str	r6, [sp, #4]
   160d0:	9600      	str	r6, [sp, #0]
   160d2:	f7fc fca7 	bl	12a24 <at_interface_write>
   160d6:	4607      	mov	r7, r0
   160d8:	4823      	ldr	r0, [pc, #140]	; (16168 <pdn_interface_close+0x19c>)
   160da:	f006 ffab 	bl	1d034 <strlen>
   160de:	42b8      	cmp	r0, r7
   160e0:	d139      	bne.n	16156 <pdn_interface_close+0x18a>
   160e2:	4633      	mov	r3, r6
   160e4:	e9cd 6600 	strd	r6, r6, [sp]
   160e8:	f44f 7280 	mov.w	r2, #256	; 0x100
   160ec:	491e      	ldr	r1, [pc, #120]	; (16168 <pdn_interface_close+0x19c>)
   160ee:	f8d8 0000 	ldr.w	r0, [r8]
   160f2:	f7fc fd7f 	bl	12bf4 <at_interface_read>
   160f6:	4606      	mov	r6, r0
   160f8:	481e      	ldr	r0, [pc, #120]	; (16174 <pdn_interface_close+0x1a8>)
   160fa:	f006 ff9b 	bl	1d034 <strlen>
   160fe:	4286      	cmp	r6, r0
   16100:	db16      	blt.n	16130 <pdn_interface_close+0x164>
   16102:	4602      	mov	r2, r0
   16104:	4918      	ldr	r1, [pc, #96]	; (16168 <pdn_interface_close+0x19c>)
   16106:	481b      	ldr	r0, [pc, #108]	; (16174 <pdn_interface_close+0x1a8>)
   16108:	f006 ffa7 	bl	1d05a <strncmp>
   1610c:	b980      	cbnz	r0, 16130 <pdn_interface_close+0x164>
   1610e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   16112:	e776      	b.n	16002 <pdn_interface_close+0x36>
   16114:	2009      	movs	r0, #9
   16116:	f7fb f97b 	bl	11410 <bsd_os_errno_set>
   1611a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1611e:	e776      	b.n	1600e <pdn_interface_close+0x42>
   16120:	4602      	mov	r2, r0
   16122:	4631      	mov	r1, r6
   16124:	4813      	ldr	r0, [pc, #76]	; (16174 <pdn_interface_close+0x1a8>)
   16126:	f006 ff98 	bl	1d05a <strncmp>
   1612a:	2800      	cmp	r0, #0
   1612c:	d0b5      	beq.n	1609a <pdn_interface_close+0xce>
   1612e:	e7a7      	b.n	16080 <pdn_interface_close+0xb4>
   16130:	4811      	ldr	r0, [pc, #68]	; (16178 <pdn_interface_close+0x1ac>)
   16132:	f006 ff7f 	bl	1d034 <strlen>
   16136:	490c      	ldr	r1, [pc, #48]	; (16168 <pdn_interface_close+0x19c>)
   16138:	4602      	mov	r2, r0
   1613a:	480f      	ldr	r0, [pc, #60]	; (16178 <pdn_interface_close+0x1ac>)
   1613c:	f006 ff8d 	bl	1d05a <strncmp>
   16140:	b948      	cbnz	r0, 16156 <pdn_interface_close+0x18a>
   16142:	2008      	movs	r0, #8
   16144:	f7fb f964 	bl	11410 <bsd_os_errno_set>
   16148:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1614c:	e759      	b.n	16002 <pdn_interface_close+0x36>
   1614e:	2005      	movs	r0, #5
   16150:	f7fb f95e 	bl	11410 <bsd_os_errno_set>
   16154:	e7a1      	b.n	1609a <pdn_interface_close+0xce>
   16156:	2005      	movs	r0, #5
   16158:	f7fb f95a 	bl	11410 <bsd_os_errno_set>
   1615c:	e7d7      	b.n	1610e <pdn_interface_close+0x142>
   1615e:	bf00      	nop
   16160:	789a0000 	.word	0x789a0000
   16164:	200208f4 	.word	0x200208f4
   16168:	200207f4 	.word	0x200207f4
   1616c:	0001f204 	.word	0x0001f204
   16170:	0001f24c 	.word	0x0001f24c
   16174:	0001f23c 	.word	0x0001f23c
   16178:	0001f2a4 	.word	0x0001f2a4
   1617c:	0001f210 	.word	0x0001f210
   16180:	200207f0 	.word	0x200207f0

00016184 <pdn_interface_setopt>:
   16184:	b510      	push	{r4, lr}
   16186:	f240 2402 	movw	r4, #514	; 0x202
   1618a:	42a1      	cmp	r1, r4
   1618c:	d10b      	bne.n	161a6 <pdn_interface_setopt+0x22>
   1618e:	b153      	cbz	r3, 161a6 <pdn_interface_setopt+0x22>
   16190:	9902      	ldr	r1, [sp, #8]
   16192:	b141      	cbz	r1, 161a6 <pdn_interface_setopt+0x22>
   16194:	4925      	ldr	r1, [pc, #148]	; (1622c <pdn_interface_setopt+0xa8>)
   16196:	4381      	bics	r1, r0
   16198:	d00b      	beq.n	161b2 <pdn_interface_setopt+0x2e>
   1619a:	2009      	movs	r0, #9
   1619c:	f7fb f938 	bl	11410 <bsd_os_errno_set>
   161a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   161a4:	bd10      	pop	{r4, pc}
   161a6:	2016      	movs	r0, #22
   161a8:	f7fb f932 	bl	11410 <bsd_os_errno_set>
   161ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   161b0:	bd10      	pop	{r4, pc}
   161b2:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   161b6:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   161ba:	2809      	cmp	r0, #9
   161bc:	dced      	bgt.n	1619a <pdn_interface_setopt+0x16>
   161be:	491c      	ldr	r1, [pc, #112]	; (16230 <pdn_interface_setopt+0xac>)
   161c0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   161c4:	2900      	cmp	r1, #0
   161c6:	d0e8      	beq.n	1619a <pdn_interface_setopt+0x16>
   161c8:	688c      	ldr	r4, [r1, #8]
   161ca:	2c00      	cmp	r4, #0
   161cc:	d0e5      	beq.n	1619a <pdn_interface_setopt+0x16>
   161ce:	2800      	cmp	r0, #0
   161d0:	dbe3      	blt.n	1619a <pdn_interface_setopt+0x16>
   161d2:	2a01      	cmp	r2, #1
   161d4:	d001      	beq.n	161da <pdn_interface_setopt+0x56>
   161d6:	202d      	movs	r0, #45	; 0x2d
   161d8:	e7e6      	b.n	161a8 <pdn_interface_setopt+0x24>
   161da:	688a      	ldr	r2, [r1, #8]
   161dc:	b1fa      	cbz	r2, 1621e <pdn_interface_setopt+0x9a>
   161de:	688a      	ldr	r2, [r1, #8]
   161e0:	2a03      	cmp	r2, #3
   161e2:	d01c      	beq.n	1621e <pdn_interface_setopt+0x9a>
   161e4:	688a      	ldr	r2, [r1, #8]
   161e6:	2a04      	cmp	r2, #4
   161e8:	d019      	beq.n	1621e <pdn_interface_setopt+0x9a>
   161ea:	9a02      	ldr	r2, [sp, #8]
   161ec:	0890      	lsrs	r0, r2, #2
   161ee:	1e42      	subs	r2, r0, #1
   161f0:	2a01      	cmp	r2, #1
   161f2:	d8d8      	bhi.n	161a6 <pdn_interface_setopt+0x22>
   161f4:	9a02      	ldr	r2, [sp, #8]
   161f6:	0792      	lsls	r2, r2, #30
   161f8:	d1d5      	bne.n	161a6 <pdn_interface_setopt+0x22>
   161fa:	681a      	ldr	r2, [r3, #0]
   161fc:	2a02      	cmp	r2, #2
   161fe:	d010      	beq.n	16222 <pdn_interface_setopt+0x9e>
   16200:	2a0a      	cmp	r2, #10
   16202:	d1d0      	bne.n	161a6 <pdn_interface_setopt+0x22>
   16204:	2202      	movs	r2, #2
   16206:	2802      	cmp	r0, #2
   16208:	d106      	bne.n	16218 <pdn_interface_setopt+0x94>
   1620a:	685b      	ldr	r3, [r3, #4]
   1620c:	2b02      	cmp	r3, #2
   1620e:	d00a      	beq.n	16226 <pdn_interface_setopt+0xa2>
   16210:	2b0a      	cmp	r3, #10
   16212:	d1c8      	bne.n	161a6 <pdn_interface_setopt+0x22>
   16214:	f042 0202 	orr.w	r2, r2, #2
   16218:	670a      	str	r2, [r1, #112]	; 0x70
   1621a:	2000      	movs	r0, #0
   1621c:	e7c4      	b.n	161a8 <pdn_interface_setopt+0x24>
   1621e:	200e      	movs	r0, #14
   16220:	e7c2      	b.n	161a8 <pdn_interface_setopt+0x24>
   16222:	2201      	movs	r2, #1
   16224:	e7ef      	b.n	16206 <pdn_interface_setopt+0x82>
   16226:	f042 0201 	orr.w	r2, r2, #1
   1622a:	e7f5      	b.n	16218 <pdn_interface_setopt+0x94>
   1622c:	789a0000 	.word	0x789a0000
   16230:	200208f4 	.word	0x200208f4

00016234 <pdn_interface_getopt>:
   16234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16238:	f240 2402 	movw	r4, #514	; 0x202
   1623c:	b083      	sub	sp, #12
   1623e:	42a1      	cmp	r1, r4
   16240:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   16242:	f040 80a9 	bne.w	16398 <pdn_interface_getopt+0x164>
   16246:	461e      	mov	r6, r3
   16248:	2b00      	cmp	r3, #0
   1624a:	f000 80a5 	beq.w	16398 <pdn_interface_getopt+0x164>
   1624e:	2d00      	cmp	r5, #0
   16250:	f000 80a2 	beq.w	16398 <pdn_interface_getopt+0x164>
   16254:	4b56      	ldr	r3, [pc, #344]	; (163b0 <pdn_interface_getopt+0x17c>)
   16256:	4383      	bics	r3, r0
   16258:	f040 8084 	bne.w	16364 <pdn_interface_getopt+0x130>
   1625c:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   16260:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   16264:	2c09      	cmp	r4, #9
   16266:	dc7d      	bgt.n	16364 <pdn_interface_getopt+0x130>
   16268:	4b52      	ldr	r3, [pc, #328]	; (163b4 <pdn_interface_getopt+0x180>)
   1626a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1626e:	2b00      	cmp	r3, #0
   16270:	d078      	beq.n	16364 <pdn_interface_getopt+0x130>
   16272:	6899      	ldr	r1, [r3, #8]
   16274:	2900      	cmp	r1, #0
   16276:	d075      	beq.n	16364 <pdn_interface_getopt+0x130>
   16278:	2c00      	cmp	r4, #0
   1627a:	db73      	blt.n	16364 <pdn_interface_getopt+0x130>
   1627c:	2a02      	cmp	r2, #2
   1627e:	d00e      	beq.n	1629e <pdn_interface_getopt+0x6a>
   16280:	2a03      	cmp	r2, #3
   16282:	d008      	beq.n	16296 <pdn_interface_getopt+0x62>
   16284:	2a01      	cmp	r2, #1
   16286:	d015      	beq.n	162b4 <pdn_interface_getopt+0x80>
   16288:	202d      	movs	r0, #45	; 0x2d
   1628a:	f7fb f8c1 	bl	11410 <bsd_os_errno_set>
   1628e:	2000      	movs	r0, #0
   16290:	b003      	add	sp, #12
   16292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16296:	682b      	ldr	r3, [r5, #0]
   16298:	bb23      	cbnz	r3, 162e4 <pdn_interface_getopt+0xb0>
   1629a:	2016      	movs	r0, #22
   1629c:	e7f5      	b.n	1628a <pdn_interface_getopt+0x56>
   1629e:	682a      	ldr	r2, [r5, #0]
   162a0:	2a00      	cmp	r2, #0
   162a2:	d0fa      	beq.n	1629a <pdn_interface_getopt+0x66>
   162a4:	2201      	movs	r2, #1
   162a6:	2000      	movs	r0, #0
   162a8:	681b      	ldr	r3, [r3, #0]
   162aa:	7033      	strb	r3, [r6, #0]
   162ac:	602a      	str	r2, [r5, #0]
   162ae:	b003      	add	sp, #12
   162b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   162b4:	689a      	ldr	r2, [r3, #8]
   162b6:	2a00      	cmp	r2, #0
   162b8:	d052      	beq.n	16360 <pdn_interface_getopt+0x12c>
   162ba:	689a      	ldr	r2, [r3, #8]
   162bc:	2a04      	cmp	r2, #4
   162be:	d04f      	beq.n	16360 <pdn_interface_getopt+0x12c>
   162c0:	682a      	ldr	r2, [r5, #0]
   162c2:	2a07      	cmp	r2, #7
   162c4:	d9e9      	bls.n	1629a <pdn_interface_getopt+0x66>
   162c6:	f012 0203 	ands.w	r2, r2, #3
   162ca:	d1e6      	bne.n	1629a <pdn_interface_getopt+0x66>
   162cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   162ce:	0799      	lsls	r1, r3, #30
   162d0:	d45d      	bmi.n	1638e <pdn_interface_getopt+0x15a>
   162d2:	2104      	movs	r1, #4
   162d4:	07db      	lsls	r3, r3, #31
   162d6:	d502      	bpl.n	162de <pdn_interface_getopt+0xaa>
   162d8:	2302      	movs	r3, #2
   162da:	50b3      	str	r3, [r6, r2]
   162dc:	460a      	mov	r2, r1
   162de:	602a      	str	r2, [r5, #0]
   162e0:	2000      	movs	r0, #0
   162e2:	e7d5      	b.n	16290 <pdn_interface_getopt+0x5c>
   162e4:	4a34      	ldr	r2, [pc, #208]	; (163b8 <pdn_interface_getopt+0x184>)
   162e6:	f44f 7180 	mov.w	r1, #256	; 0x100
   162ea:	4834      	ldr	r0, [pc, #208]	; (163bc <pdn_interface_getopt+0x188>)
   162ec:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 163c8 <pdn_interface_getopt+0x194>
   162f0:	f7fa fb40 	bl	10974 <snprintf>
   162f4:	4831      	ldr	r0, [pc, #196]	; (163bc <pdn_interface_getopt+0x188>)
   162f6:	f8d8 9000 	ldr.w	r9, [r8]
   162fa:	2700      	movs	r7, #0
   162fc:	f006 fe9a 	bl	1d034 <strlen>
   16300:	463b      	mov	r3, r7
   16302:	4602      	mov	r2, r0
   16304:	492d      	ldr	r1, [pc, #180]	; (163bc <pdn_interface_getopt+0x188>)
   16306:	4648      	mov	r0, r9
   16308:	9701      	str	r7, [sp, #4]
   1630a:	9700      	str	r7, [sp, #0]
   1630c:	f7fc fb8a 	bl	12a24 <at_interface_write>
   16310:	4681      	mov	r9, r0
   16312:	482a      	ldr	r0, [pc, #168]	; (163bc <pdn_interface_getopt+0x188>)
   16314:	f006 fe8e 	bl	1d034 <strlen>
   16318:	4548      	cmp	r0, r9
   1631a:	d143      	bne.n	163a4 <pdn_interface_getopt+0x170>
   1631c:	463b      	mov	r3, r7
   1631e:	e9cd 7700 	strd	r7, r7, [sp]
   16322:	f44f 7280 	mov.w	r2, #256	; 0x100
   16326:	4925      	ldr	r1, [pc, #148]	; (163bc <pdn_interface_getopt+0x188>)
   16328:	f8d8 0000 	ldr.w	r0, [r8]
   1632c:	f7fc fc62 	bl	12bf4 <at_interface_read>
   16330:	4607      	mov	r7, r0
   16332:	4823      	ldr	r0, [pc, #140]	; (163c0 <pdn_interface_getopt+0x18c>)
   16334:	f006 fe7e 	bl	1d034 <strlen>
   16338:	4287      	cmp	r7, r0
   1633a:	db19      	blt.n	16370 <pdn_interface_getopt+0x13c>
   1633c:	4602      	mov	r2, r0
   1633e:	491f      	ldr	r1, [pc, #124]	; (163bc <pdn_interface_getopt+0x188>)
   16340:	481f      	ldr	r0, [pc, #124]	; (163c0 <pdn_interface_getopt+0x18c>)
   16342:	f006 fe8a 	bl	1d05a <strncmp>
   16346:	4607      	mov	r7, r0
   16348:	b990      	cbnz	r0, 16370 <pdn_interface_getopt+0x13c>
   1634a:	4620      	mov	r0, r4
   1634c:	491b      	ldr	r1, [pc, #108]	; (163bc <pdn_interface_getopt+0x188>)
   1634e:	f7ff fb35 	bl	159bc <pdn_state_get_parser>
   16352:	2800      	cmp	r0, #0
   16354:	db99      	blt.n	1628a <pdn_interface_getopt+0x56>
   16356:	2301      	movs	r3, #1
   16358:	7030      	strb	r0, [r6, #0]
   1635a:	4638      	mov	r0, r7
   1635c:	602b      	str	r3, [r5, #0]
   1635e:	e797      	b.n	16290 <pdn_interface_getopt+0x5c>
   16360:	200e      	movs	r0, #14
   16362:	e792      	b.n	1628a <pdn_interface_getopt+0x56>
   16364:	2009      	movs	r0, #9
   16366:	f7fb f853 	bl	11410 <bsd_os_errno_set>
   1636a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1636e:	e78f      	b.n	16290 <pdn_interface_getopt+0x5c>
   16370:	4814      	ldr	r0, [pc, #80]	; (163c4 <pdn_interface_getopt+0x190>)
   16372:	f006 fe5f 	bl	1d034 <strlen>
   16376:	4911      	ldr	r1, [pc, #68]	; (163bc <pdn_interface_getopt+0x188>)
   16378:	4602      	mov	r2, r0
   1637a:	4812      	ldr	r0, [pc, #72]	; (163c4 <pdn_interface_getopt+0x190>)
   1637c:	f006 fe6d 	bl	1d05a <strncmp>
   16380:	b980      	cbnz	r0, 163a4 <pdn_interface_getopt+0x170>
   16382:	2008      	movs	r0, #8
   16384:	f7fb f844 	bl	11410 <bsd_os_errno_set>
   16388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1638c:	e77d      	b.n	1628a <pdn_interface_getopt+0x56>
   1638e:	220a      	movs	r2, #10
   16390:	2108      	movs	r1, #8
   16392:	6032      	str	r2, [r6, #0]
   16394:	2204      	movs	r2, #4
   16396:	e79d      	b.n	162d4 <pdn_interface_getopt+0xa0>
   16398:	2016      	movs	r0, #22
   1639a:	f7fb f839 	bl	11410 <bsd_os_errno_set>
   1639e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   163a2:	e775      	b.n	16290 <pdn_interface_getopt+0x5c>
   163a4:	2005      	movs	r0, #5
   163a6:	f7fb f833 	bl	11410 <bsd_os_errno_set>
   163aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   163ae:	e76c      	b.n	1628a <pdn_interface_getopt+0x56>
   163b0:	789a0000 	.word	0x789a0000
   163b4:	200208f4 	.word	0x200208f4
   163b8:	0001f274 	.word	0x0001f274
   163bc:	200207f4 	.word	0x200207f4
   163c0:	0001f280 	.word	0x0001f280
   163c4:	0001f2a4 	.word	0x0001f2a4
   163c8:	200207f0 	.word	0x200207f0

000163cc <pdn_interface_pdn_id_get>:
   163cc:	2900      	cmp	r1, #0
   163ce:	f000 83b9 	beq.w	16b44 <pdn_interface_pdn_id_get+0x778>
   163d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   163d6:	4ca3      	ldr	r4, [pc, #652]	; (16664 <pdn_interface_pdn_id_get+0x298>)
   163d8:	2802      	cmp	r0, #2
   163da:	b083      	sub	sp, #12
   163dc:	460d      	mov	r5, r1
   163de:	6823      	ldr	r3, [r4, #0]
   163e0:	f000 8094 	beq.w	1650c <pdn_interface_pdn_id_get+0x140>
   163e4:	280a      	cmp	r0, #10
   163e6:	d03f      	beq.n	16468 <pdn_interface_pdn_id_get+0x9c>
   163e8:	b11b      	cbz	r3, 163f2 <pdn_interface_pdn_id_get+0x26>
   163ea:	689b      	ldr	r3, [r3, #8]
   163ec:	2b03      	cmp	r3, #3
   163ee:	f000 8127 	beq.w	16640 <pdn_interface_pdn_id_get+0x274>
   163f2:	6863      	ldr	r3, [r4, #4]
   163f4:	b11b      	cbz	r3, 163fe <pdn_interface_pdn_id_get+0x32>
   163f6:	689b      	ldr	r3, [r3, #8]
   163f8:	2b03      	cmp	r3, #3
   163fa:	f000 8110 	beq.w	1661e <pdn_interface_pdn_id_get+0x252>
   163fe:	68a3      	ldr	r3, [r4, #8]
   16400:	b11b      	cbz	r3, 1640a <pdn_interface_pdn_id_get+0x3e>
   16402:	689b      	ldr	r3, [r3, #8]
   16404:	2b03      	cmp	r3, #3
   16406:	f000 80f9 	beq.w	165fc <pdn_interface_pdn_id_get+0x230>
   1640a:	68e3      	ldr	r3, [r4, #12]
   1640c:	b11b      	cbz	r3, 16416 <pdn_interface_pdn_id_get+0x4a>
   1640e:	689b      	ldr	r3, [r3, #8]
   16410:	2b03      	cmp	r3, #3
   16412:	f000 80e2 	beq.w	165da <pdn_interface_pdn_id_get+0x20e>
   16416:	6923      	ldr	r3, [r4, #16]
   16418:	b11b      	cbz	r3, 16422 <pdn_interface_pdn_id_get+0x56>
   1641a:	689b      	ldr	r3, [r3, #8]
   1641c:	2b03      	cmp	r3, #3
   1641e:	f000 8123 	beq.w	16668 <pdn_interface_pdn_id_get+0x29c>
   16422:	6963      	ldr	r3, [r4, #20]
   16424:	b11b      	cbz	r3, 1642e <pdn_interface_pdn_id_get+0x62>
   16426:	689b      	ldr	r3, [r3, #8]
   16428:	2b03      	cmp	r3, #3
   1642a:	f000 8161 	beq.w	166f0 <pdn_interface_pdn_id_get+0x324>
   1642e:	69a3      	ldr	r3, [r4, #24]
   16430:	b11b      	cbz	r3, 1643a <pdn_interface_pdn_id_get+0x6e>
   16432:	689b      	ldr	r3, [r3, #8]
   16434:	2b03      	cmp	r3, #3
   16436:	f000 814a 	beq.w	166ce <pdn_interface_pdn_id_get+0x302>
   1643a:	69e3      	ldr	r3, [r4, #28]
   1643c:	b11b      	cbz	r3, 16446 <pdn_interface_pdn_id_get+0x7a>
   1643e:	689b      	ldr	r3, [r3, #8]
   16440:	2b03      	cmp	r3, #3
   16442:	f000 8133 	beq.w	166ac <pdn_interface_pdn_id_get+0x2e0>
   16446:	6a23      	ldr	r3, [r4, #32]
   16448:	b11b      	cbz	r3, 16452 <pdn_interface_pdn_id_get+0x86>
   1644a:	689b      	ldr	r3, [r3, #8]
   1644c:	2b03      	cmp	r3, #3
   1644e:	f000 811c 	beq.w	1668a <pdn_interface_pdn_id_get+0x2be>
   16452:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16454:	b11b      	cbz	r3, 1645e <pdn_interface_pdn_id_get+0x92>
   16456:	689b      	ldr	r3, [r3, #8]
   16458:	2b03      	cmp	r3, #3
   1645a:	f000 80ad 	beq.w	165b8 <pdn_interface_pdn_id_get+0x1ec>
   1645e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16462:	b003      	add	sp, #12
   16464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16468:	b11b      	cbz	r3, 16472 <pdn_interface_pdn_id_get+0xa6>
   1646a:	689b      	ldr	r3, [r3, #8]
   1646c:	2b03      	cmp	r3, #3
   1646e:	f000 8335 	beq.w	16adc <pdn_interface_pdn_id_get+0x710>
   16472:	6863      	ldr	r3, [r4, #4]
   16474:	b11b      	cbz	r3, 1647e <pdn_interface_pdn_id_get+0xb2>
   16476:	689b      	ldr	r3, [r3, #8]
   16478:	2b03      	cmp	r3, #3
   1647a:	f000 82fd 	beq.w	16a78 <pdn_interface_pdn_id_get+0x6ac>
   1647e:	68a3      	ldr	r3, [r4, #8]
   16480:	b11b      	cbz	r3, 1648a <pdn_interface_pdn_id_get+0xbe>
   16482:	689b      	ldr	r3, [r3, #8]
   16484:	2b03      	cmp	r3, #3
   16486:	f000 82d5 	beq.w	16a34 <pdn_interface_pdn_id_get+0x668>
   1648a:	68e3      	ldr	r3, [r4, #12]
   1648c:	b11b      	cbz	r3, 16496 <pdn_interface_pdn_id_get+0xca>
   1648e:	689e      	ldr	r6, [r3, #8]
   16490:	2e03      	cmp	r6, #3
   16492:	f000 81f0 	beq.w	16876 <pdn_interface_pdn_id_get+0x4aa>
   16496:	6923      	ldr	r3, [r4, #16]
   16498:	b11b      	cbz	r3, 164a2 <pdn_interface_pdn_id_get+0xd6>
   1649a:	689b      	ldr	r3, [r3, #8]
   1649c:	2b03      	cmp	r3, #3
   1649e:	f000 8203 	beq.w	168a8 <pdn_interface_pdn_id_get+0x4dc>
   164a2:	6963      	ldr	r3, [r4, #20]
   164a4:	b11b      	cbz	r3, 164ae <pdn_interface_pdn_id_get+0xe2>
   164a6:	689b      	ldr	r3, [r3, #8]
   164a8:	2b03      	cmp	r3, #3
   164aa:	f000 8215 	beq.w	168d8 <pdn_interface_pdn_id_get+0x50c>
   164ae:	69a3      	ldr	r3, [r4, #24]
   164b0:	b11b      	cbz	r3, 164ba <pdn_interface_pdn_id_get+0xee>
   164b2:	689b      	ldr	r3, [r3, #8]
   164b4:	2b03      	cmp	r3, #3
   164b6:	f000 8227 	beq.w	16908 <pdn_interface_pdn_id_get+0x53c>
   164ba:	69e3      	ldr	r3, [r4, #28]
   164bc:	b11b      	cbz	r3, 164c6 <pdn_interface_pdn_id_get+0xfa>
   164be:	689b      	ldr	r3, [r3, #8]
   164c0:	2b03      	cmp	r3, #3
   164c2:	f000 8239 	beq.w	16938 <pdn_interface_pdn_id_get+0x56c>
   164c6:	6a23      	ldr	r3, [r4, #32]
   164c8:	b11b      	cbz	r3, 164d2 <pdn_interface_pdn_id_get+0x106>
   164ca:	689b      	ldr	r3, [r3, #8]
   164cc:	2b03      	cmp	r3, #3
   164ce:	f000 824d 	beq.w	1696c <pdn_interface_pdn_id_get+0x5a0>
   164d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   164d4:	2b00      	cmp	r3, #0
   164d6:	d0c2      	beq.n	1645e <pdn_interface_pdn_id_get+0x92>
   164d8:	689b      	ldr	r3, [r3, #8]
   164da:	2b03      	cmp	r3, #3
   164dc:	d1bf      	bne.n	1645e <pdn_interface_pdn_id_get+0x92>
   164de:	4628      	mov	r0, r5
   164e0:	f006 fda8 	bl	1d034 <strlen>
   164e4:	4606      	mov	r6, r0
   164e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   164e8:	300c      	adds	r0, #12
   164ea:	f006 fda3 	bl	1d034 <strlen>
   164ee:	42b0      	cmp	r0, r6
   164f0:	d1b5      	bne.n	1645e <pdn_interface_pdn_id_get+0x92>
   164f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   164f4:	4628      	mov	r0, r5
   164f6:	310c      	adds	r1, #12
   164f8:	f006 fda3 	bl	1d042 <strcmp>
   164fc:	2800      	cmp	r0, #0
   164fe:	d1ae      	bne.n	1645e <pdn_interface_pdn_id_get+0x92>
   16500:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16502:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16504:	0792      	lsls	r2, r2, #30
   16506:	d5aa      	bpl.n	1645e <pdn_interface_pdn_id_get+0x92>
   16508:	2609      	movs	r6, #9
   1650a:	e11a      	b.n	16742 <pdn_interface_pdn_id_get+0x376>
   1650c:	b11b      	cbz	r3, 16516 <pdn_interface_pdn_id_get+0x14a>
   1650e:	689b      	ldr	r3, [r3, #8]
   16510:	2b03      	cmp	r3, #3
   16512:	f000 82fd 	beq.w	16b10 <pdn_interface_pdn_id_get+0x744>
   16516:	6863      	ldr	r3, [r4, #4]
   16518:	b11b      	cbz	r3, 16522 <pdn_interface_pdn_id_get+0x156>
   1651a:	689b      	ldr	r3, [r3, #8]
   1651c:	2b03      	cmp	r3, #3
   1651e:	f000 82c5 	beq.w	16aac <pdn_interface_pdn_id_get+0x6e0>
   16522:	68a3      	ldr	r3, [r4, #8]
   16524:	b11b      	cbz	r3, 1652e <pdn_interface_pdn_id_get+0x162>
   16526:	689b      	ldr	r3, [r3, #8]
   16528:	2b03      	cmp	r3, #3
   1652a:	f000 8269 	beq.w	16a00 <pdn_interface_pdn_id_get+0x634>
   1652e:	68e3      	ldr	r3, [r4, #12]
   16530:	b11b      	cbz	r3, 1653a <pdn_interface_pdn_id_get+0x16e>
   16532:	689e      	ldr	r6, [r3, #8]
   16534:	2e03      	cmp	r6, #3
   16536:	f000 80ec 	beq.w	16712 <pdn_interface_pdn_id_get+0x346>
   1653a:	6923      	ldr	r3, [r4, #16]
   1653c:	b11b      	cbz	r3, 16546 <pdn_interface_pdn_id_get+0x17a>
   1653e:	689b      	ldr	r3, [r3, #8]
   16540:	2b03      	cmp	r3, #3
   16542:	f000 814a 	beq.w	167da <pdn_interface_pdn_id_get+0x40e>
   16546:	6963      	ldr	r3, [r4, #20]
   16548:	b11b      	cbz	r3, 16552 <pdn_interface_pdn_id_get+0x186>
   1654a:	689b      	ldr	r3, [r3, #8]
   1654c:	2b03      	cmp	r3, #3
   1654e:	f000 815e 	beq.w	1680e <pdn_interface_pdn_id_get+0x442>
   16552:	69a3      	ldr	r3, [r4, #24]
   16554:	b11b      	cbz	r3, 1655e <pdn_interface_pdn_id_get+0x192>
   16556:	689b      	ldr	r3, [r3, #8]
   16558:	2b03      	cmp	r3, #3
   1655a:	f000 8172 	beq.w	16842 <pdn_interface_pdn_id_get+0x476>
   1655e:	69e3      	ldr	r3, [r4, #28]
   16560:	b11b      	cbz	r3, 1656a <pdn_interface_pdn_id_get+0x19e>
   16562:	689b      	ldr	r3, [r3, #8]
   16564:	2b03      	cmp	r3, #3
   16566:	f000 821b 	beq.w	169a0 <pdn_interface_pdn_id_get+0x5d4>
   1656a:	6a23      	ldr	r3, [r4, #32]
   1656c:	b11b      	cbz	r3, 16576 <pdn_interface_pdn_id_get+0x1aa>
   1656e:	689b      	ldr	r3, [r3, #8]
   16570:	2b03      	cmp	r3, #3
   16572:	f000 822d 	beq.w	169d0 <pdn_interface_pdn_id_get+0x604>
   16576:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16578:	2b00      	cmp	r3, #0
   1657a:	f43f af70 	beq.w	1645e <pdn_interface_pdn_id_get+0x92>
   1657e:	689b      	ldr	r3, [r3, #8]
   16580:	2b03      	cmp	r3, #3
   16582:	f47f af6c 	bne.w	1645e <pdn_interface_pdn_id_get+0x92>
   16586:	4628      	mov	r0, r5
   16588:	f006 fd54 	bl	1d034 <strlen>
   1658c:	4606      	mov	r6, r0
   1658e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   16590:	300c      	adds	r0, #12
   16592:	f006 fd4f 	bl	1d034 <strlen>
   16596:	4286      	cmp	r6, r0
   16598:	f47f af61 	bne.w	1645e <pdn_interface_pdn_id_get+0x92>
   1659c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1659e:	4628      	mov	r0, r5
   165a0:	310c      	adds	r1, #12
   165a2:	f006 fd4e 	bl	1d042 <strcmp>
   165a6:	2800      	cmp	r0, #0
   165a8:	f47f af59 	bne.w	1645e <pdn_interface_pdn_id_get+0x92>
   165ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   165ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   165b0:	07d2      	lsls	r2, r2, #31
   165b2:	f57f af54 	bpl.w	1645e <pdn_interface_pdn_id_get+0x92>
   165b6:	e7a7      	b.n	16508 <pdn_interface_pdn_id_get+0x13c>
   165b8:	4628      	mov	r0, r5
   165ba:	f006 fd3b 	bl	1d034 <strlen>
   165be:	4606      	mov	r6, r0
   165c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   165c2:	300c      	adds	r0, #12
   165c4:	f006 fd36 	bl	1d034 <strlen>
   165c8:	42b0      	cmp	r0, r6
   165ca:	f47f af48 	bne.w	1645e <pdn_interface_pdn_id_get+0x92>
   165ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
   165d0:	4628      	mov	r0, r5
   165d2:	310c      	adds	r1, #12
   165d4:	f006 fd35 	bl	1d042 <strcmp>
   165d8:	e741      	b.n	1645e <pdn_interface_pdn_id_get+0x92>
   165da:	4628      	mov	r0, r5
   165dc:	f006 fd2a 	bl	1d034 <strlen>
   165e0:	4606      	mov	r6, r0
   165e2:	68e0      	ldr	r0, [r4, #12]
   165e4:	300c      	adds	r0, #12
   165e6:	f006 fd25 	bl	1d034 <strlen>
   165ea:	4286      	cmp	r6, r0
   165ec:	f47f af13 	bne.w	16416 <pdn_interface_pdn_id_get+0x4a>
   165f0:	68e1      	ldr	r1, [r4, #12]
   165f2:	4628      	mov	r0, r5
   165f4:	310c      	adds	r1, #12
   165f6:	f006 fd24 	bl	1d042 <strcmp>
   165fa:	e70c      	b.n	16416 <pdn_interface_pdn_id_get+0x4a>
   165fc:	4628      	mov	r0, r5
   165fe:	f006 fd19 	bl	1d034 <strlen>
   16602:	4606      	mov	r6, r0
   16604:	68a0      	ldr	r0, [r4, #8]
   16606:	300c      	adds	r0, #12
   16608:	f006 fd14 	bl	1d034 <strlen>
   1660c:	4286      	cmp	r6, r0
   1660e:	f47f aefc 	bne.w	1640a <pdn_interface_pdn_id_get+0x3e>
   16612:	68a1      	ldr	r1, [r4, #8]
   16614:	4628      	mov	r0, r5
   16616:	310c      	adds	r1, #12
   16618:	f006 fd13 	bl	1d042 <strcmp>
   1661c:	e6f5      	b.n	1640a <pdn_interface_pdn_id_get+0x3e>
   1661e:	4628      	mov	r0, r5
   16620:	f006 fd08 	bl	1d034 <strlen>
   16624:	4606      	mov	r6, r0
   16626:	6860      	ldr	r0, [r4, #4]
   16628:	300c      	adds	r0, #12
   1662a:	f006 fd03 	bl	1d034 <strlen>
   1662e:	4286      	cmp	r6, r0
   16630:	f47f aee5 	bne.w	163fe <pdn_interface_pdn_id_get+0x32>
   16634:	6861      	ldr	r1, [r4, #4]
   16636:	4628      	mov	r0, r5
   16638:	310c      	adds	r1, #12
   1663a:	f006 fd02 	bl	1d042 <strcmp>
   1663e:	e6de      	b.n	163fe <pdn_interface_pdn_id_get+0x32>
   16640:	4608      	mov	r0, r1
   16642:	f006 fcf7 	bl	1d034 <strlen>
   16646:	4606      	mov	r6, r0
   16648:	6820      	ldr	r0, [r4, #0]
   1664a:	300c      	adds	r0, #12
   1664c:	f006 fcf2 	bl	1d034 <strlen>
   16650:	4286      	cmp	r6, r0
   16652:	f47f aece 	bne.w	163f2 <pdn_interface_pdn_id_get+0x26>
   16656:	6821      	ldr	r1, [r4, #0]
   16658:	4628      	mov	r0, r5
   1665a:	310c      	adds	r1, #12
   1665c:	f006 fcf1 	bl	1d042 <strcmp>
   16660:	e6c7      	b.n	163f2 <pdn_interface_pdn_id_get+0x26>
   16662:	bf00      	nop
   16664:	200208f4 	.word	0x200208f4
   16668:	4628      	mov	r0, r5
   1666a:	f006 fce3 	bl	1d034 <strlen>
   1666e:	4606      	mov	r6, r0
   16670:	6920      	ldr	r0, [r4, #16]
   16672:	300c      	adds	r0, #12
   16674:	f006 fcde 	bl	1d034 <strlen>
   16678:	4286      	cmp	r6, r0
   1667a:	f47f aed2 	bne.w	16422 <pdn_interface_pdn_id_get+0x56>
   1667e:	6921      	ldr	r1, [r4, #16]
   16680:	4628      	mov	r0, r5
   16682:	310c      	adds	r1, #12
   16684:	f006 fcdd 	bl	1d042 <strcmp>
   16688:	e6cb      	b.n	16422 <pdn_interface_pdn_id_get+0x56>
   1668a:	4628      	mov	r0, r5
   1668c:	f006 fcd2 	bl	1d034 <strlen>
   16690:	4606      	mov	r6, r0
   16692:	6a20      	ldr	r0, [r4, #32]
   16694:	300c      	adds	r0, #12
   16696:	f006 fccd 	bl	1d034 <strlen>
   1669a:	4286      	cmp	r6, r0
   1669c:	f47f aed9 	bne.w	16452 <pdn_interface_pdn_id_get+0x86>
   166a0:	6a21      	ldr	r1, [r4, #32]
   166a2:	4628      	mov	r0, r5
   166a4:	310c      	adds	r1, #12
   166a6:	f006 fccc 	bl	1d042 <strcmp>
   166aa:	e6d2      	b.n	16452 <pdn_interface_pdn_id_get+0x86>
   166ac:	4628      	mov	r0, r5
   166ae:	f006 fcc1 	bl	1d034 <strlen>
   166b2:	4606      	mov	r6, r0
   166b4:	69e0      	ldr	r0, [r4, #28]
   166b6:	300c      	adds	r0, #12
   166b8:	f006 fcbc 	bl	1d034 <strlen>
   166bc:	4286      	cmp	r6, r0
   166be:	f47f aec2 	bne.w	16446 <pdn_interface_pdn_id_get+0x7a>
   166c2:	69e1      	ldr	r1, [r4, #28]
   166c4:	4628      	mov	r0, r5
   166c6:	310c      	adds	r1, #12
   166c8:	f006 fcbb 	bl	1d042 <strcmp>
   166cc:	e6bb      	b.n	16446 <pdn_interface_pdn_id_get+0x7a>
   166ce:	4628      	mov	r0, r5
   166d0:	f006 fcb0 	bl	1d034 <strlen>
   166d4:	4606      	mov	r6, r0
   166d6:	69a0      	ldr	r0, [r4, #24]
   166d8:	300c      	adds	r0, #12
   166da:	f006 fcab 	bl	1d034 <strlen>
   166de:	4286      	cmp	r6, r0
   166e0:	f47f aeab 	bne.w	1643a <pdn_interface_pdn_id_get+0x6e>
   166e4:	69a1      	ldr	r1, [r4, #24]
   166e6:	4628      	mov	r0, r5
   166e8:	310c      	adds	r1, #12
   166ea:	f006 fcaa 	bl	1d042 <strcmp>
   166ee:	e6a4      	b.n	1643a <pdn_interface_pdn_id_get+0x6e>
   166f0:	4628      	mov	r0, r5
   166f2:	f006 fc9f 	bl	1d034 <strlen>
   166f6:	4606      	mov	r6, r0
   166f8:	6960      	ldr	r0, [r4, #20]
   166fa:	300c      	adds	r0, #12
   166fc:	f006 fc9a 	bl	1d034 <strlen>
   16700:	4286      	cmp	r6, r0
   16702:	f47f ae94 	bne.w	1642e <pdn_interface_pdn_id_get+0x62>
   16706:	6961      	ldr	r1, [r4, #20]
   16708:	4628      	mov	r0, r5
   1670a:	310c      	adds	r1, #12
   1670c:	f006 fc99 	bl	1d042 <strcmp>
   16710:	e68d      	b.n	1642e <pdn_interface_pdn_id_get+0x62>
   16712:	4628      	mov	r0, r5
   16714:	f006 fc8e 	bl	1d034 <strlen>
   16718:	4607      	mov	r7, r0
   1671a:	68e0      	ldr	r0, [r4, #12]
   1671c:	300c      	adds	r0, #12
   1671e:	f006 fc89 	bl	1d034 <strlen>
   16722:	4287      	cmp	r7, r0
   16724:	f47f af09 	bne.w	1653a <pdn_interface_pdn_id_get+0x16e>
   16728:	68e1      	ldr	r1, [r4, #12]
   1672a:	4628      	mov	r0, r5
   1672c:	310c      	adds	r1, #12
   1672e:	f006 fc88 	bl	1d042 <strcmp>
   16732:	2800      	cmp	r0, #0
   16734:	f47f af01 	bne.w	1653a <pdn_interface_pdn_id_get+0x16e>
   16738:	68e3      	ldr	r3, [r4, #12]
   1673a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1673c:	07d1      	lsls	r1, r2, #31
   1673e:	f57f aefc 	bpl.w	1653a <pdn_interface_pdn_id_get+0x16e>
   16742:	6858      	ldr	r0, [r3, #4]
   16744:	1c43      	adds	r3, r0, #1
   16746:	f47f ae8c 	bne.w	16462 <pdn_interface_pdn_id_get+0x96>
   1674a:	4dc6      	ldr	r5, [pc, #792]	; (16a64 <pdn_interface_pdn_id_get+0x698>)
   1674c:	4ac6      	ldr	r2, [pc, #792]	; (16a68 <pdn_interface_pdn_id_get+0x69c>)
   1674e:	f44f 7180 	mov.w	r1, #256	; 0x100
   16752:	4628      	mov	r0, r5
   16754:	f7fa f90e 	bl	10974 <snprintf>
   16758:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1675c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   16760:	681b      	ldr	r3, [r3, #0]
   16762:	4ac2      	ldr	r2, [pc, #776]	; (16a6c <pdn_interface_pdn_id_get+0x6a0>)
   16764:	4428      	add	r0, r5
   16766:	f8df 830c 	ldr.w	r8, [pc, #780]	; 16a74 <pdn_interface_pdn_id_get+0x6a8>
   1676a:	f7fa f903 	bl	10974 <snprintf>
   1676e:	4628      	mov	r0, r5
   16770:	f8d8 9000 	ldr.w	r9, [r8]
   16774:	2700      	movs	r7, #0
   16776:	f006 fc5d 	bl	1d034 <strlen>
   1677a:	4629      	mov	r1, r5
   1677c:	4602      	mov	r2, r0
   1677e:	463b      	mov	r3, r7
   16780:	4648      	mov	r0, r9
   16782:	9701      	str	r7, [sp, #4]
   16784:	9700      	str	r7, [sp, #0]
   16786:	f7fc f94d 	bl	12a24 <at_interface_write>
   1678a:	4681      	mov	r9, r0
   1678c:	4628      	mov	r0, r5
   1678e:	f006 fc51 	bl	1d034 <strlen>
   16792:	4548      	cmp	r0, r9
   16794:	f040 81e9 	bne.w	16b6a <pdn_interface_pdn_id_get+0x79e>
   16798:	463b      	mov	r3, r7
   1679a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1679e:	e9cd 7700 	strd	r7, r7, [sp]
   167a2:	4629      	mov	r1, r5
   167a4:	f8d8 0000 	ldr.w	r0, [r8]
   167a8:	f7fc fa24 	bl	12bf4 <at_interface_read>
   167ac:	4607      	mov	r7, r0
   167ae:	48b0      	ldr	r0, [pc, #704]	; (16a70 <pdn_interface_pdn_id_get+0x6a4>)
   167b0:	f006 fc40 	bl	1d034 <strlen>
   167b4:	4287      	cmp	r7, r0
   167b6:	4602      	mov	r2, r0
   167b8:	f2c0 81c7 	blt.w	16b4a <pdn_interface_pdn_id_get+0x77e>
   167bc:	4629      	mov	r1, r5
   167be:	48ac      	ldr	r0, [pc, #688]	; (16a70 <pdn_interface_pdn_id_get+0x6a4>)
   167c0:	f006 fc4b 	bl	1d05a <strncmp>
   167c4:	2800      	cmp	r0, #0
   167c6:	f040 81c0 	bne.w	16b4a <pdn_interface_pdn_id_get+0x77e>
   167ca:	4629      	mov	r1, r5
   167cc:	4630      	mov	r0, r6
   167ce:	f7ff f92b 	bl	15a28 <pdn_id_get_parser>
   167d2:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   167d6:	6858      	ldr	r0, [r3, #4]
   167d8:	e643      	b.n	16462 <pdn_interface_pdn_id_get+0x96>
   167da:	4628      	mov	r0, r5
   167dc:	f006 fc2a 	bl	1d034 <strlen>
   167e0:	4606      	mov	r6, r0
   167e2:	6920      	ldr	r0, [r4, #16]
   167e4:	300c      	adds	r0, #12
   167e6:	f006 fc25 	bl	1d034 <strlen>
   167ea:	4286      	cmp	r6, r0
   167ec:	f47f aeab 	bne.w	16546 <pdn_interface_pdn_id_get+0x17a>
   167f0:	6921      	ldr	r1, [r4, #16]
   167f2:	4628      	mov	r0, r5
   167f4:	310c      	adds	r1, #12
   167f6:	f006 fc24 	bl	1d042 <strcmp>
   167fa:	2800      	cmp	r0, #0
   167fc:	f47f aea3 	bne.w	16546 <pdn_interface_pdn_id_get+0x17a>
   16800:	6923      	ldr	r3, [r4, #16]
   16802:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16804:	07d2      	lsls	r2, r2, #31
   16806:	f57f ae9e 	bpl.w	16546 <pdn_interface_pdn_id_get+0x17a>
   1680a:	2604      	movs	r6, #4
   1680c:	e799      	b.n	16742 <pdn_interface_pdn_id_get+0x376>
   1680e:	4628      	mov	r0, r5
   16810:	f006 fc10 	bl	1d034 <strlen>
   16814:	4606      	mov	r6, r0
   16816:	6960      	ldr	r0, [r4, #20]
   16818:	300c      	adds	r0, #12
   1681a:	f006 fc0b 	bl	1d034 <strlen>
   1681e:	4286      	cmp	r6, r0
   16820:	f47f ae97 	bne.w	16552 <pdn_interface_pdn_id_get+0x186>
   16824:	6961      	ldr	r1, [r4, #20]
   16826:	4628      	mov	r0, r5
   16828:	310c      	adds	r1, #12
   1682a:	f006 fc0a 	bl	1d042 <strcmp>
   1682e:	2800      	cmp	r0, #0
   16830:	f47f ae8f 	bne.w	16552 <pdn_interface_pdn_id_get+0x186>
   16834:	6963      	ldr	r3, [r4, #20]
   16836:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16838:	07d7      	lsls	r7, r2, #31
   1683a:	f57f ae8a 	bpl.w	16552 <pdn_interface_pdn_id_get+0x186>
   1683e:	2605      	movs	r6, #5
   16840:	e77f      	b.n	16742 <pdn_interface_pdn_id_get+0x376>
   16842:	4628      	mov	r0, r5
   16844:	f006 fbf6 	bl	1d034 <strlen>
   16848:	4606      	mov	r6, r0
   1684a:	69a0      	ldr	r0, [r4, #24]
   1684c:	300c      	adds	r0, #12
   1684e:	f006 fbf1 	bl	1d034 <strlen>
   16852:	4286      	cmp	r6, r0
   16854:	f47f ae83 	bne.w	1655e <pdn_interface_pdn_id_get+0x192>
   16858:	69a1      	ldr	r1, [r4, #24]
   1685a:	4628      	mov	r0, r5
   1685c:	310c      	adds	r1, #12
   1685e:	f006 fbf0 	bl	1d042 <strcmp>
   16862:	2800      	cmp	r0, #0
   16864:	f47f ae7b 	bne.w	1655e <pdn_interface_pdn_id_get+0x192>
   16868:	69a3      	ldr	r3, [r4, #24]
   1686a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1686c:	07d6      	lsls	r6, r2, #31
   1686e:	f57f ae76 	bpl.w	1655e <pdn_interface_pdn_id_get+0x192>
   16872:	2606      	movs	r6, #6
   16874:	e765      	b.n	16742 <pdn_interface_pdn_id_get+0x376>
   16876:	4628      	mov	r0, r5
   16878:	f006 fbdc 	bl	1d034 <strlen>
   1687c:	4607      	mov	r7, r0
   1687e:	68e0      	ldr	r0, [r4, #12]
   16880:	300c      	adds	r0, #12
   16882:	f006 fbd7 	bl	1d034 <strlen>
   16886:	4287      	cmp	r7, r0
   16888:	f47f ae05 	bne.w	16496 <pdn_interface_pdn_id_get+0xca>
   1688c:	68e1      	ldr	r1, [r4, #12]
   1688e:	4628      	mov	r0, r5
   16890:	310c      	adds	r1, #12
   16892:	f006 fbd6 	bl	1d042 <strcmp>
   16896:	2800      	cmp	r0, #0
   16898:	f47f adfd 	bne.w	16496 <pdn_interface_pdn_id_get+0xca>
   1689c:	68e3      	ldr	r3, [r4, #12]
   1689e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   168a0:	0791      	lsls	r1, r2, #30
   168a2:	f53f af4e 	bmi.w	16742 <pdn_interface_pdn_id_get+0x376>
   168a6:	e5f6      	b.n	16496 <pdn_interface_pdn_id_get+0xca>
   168a8:	4628      	mov	r0, r5
   168aa:	f006 fbc3 	bl	1d034 <strlen>
   168ae:	4606      	mov	r6, r0
   168b0:	6920      	ldr	r0, [r4, #16]
   168b2:	300c      	adds	r0, #12
   168b4:	f006 fbbe 	bl	1d034 <strlen>
   168b8:	4286      	cmp	r6, r0
   168ba:	f47f adf2 	bne.w	164a2 <pdn_interface_pdn_id_get+0xd6>
   168be:	6921      	ldr	r1, [r4, #16]
   168c0:	4628      	mov	r0, r5
   168c2:	310c      	adds	r1, #12
   168c4:	f006 fbbd 	bl	1d042 <strcmp>
   168c8:	2800      	cmp	r0, #0
   168ca:	f47f adea 	bne.w	164a2 <pdn_interface_pdn_id_get+0xd6>
   168ce:	6923      	ldr	r3, [r4, #16]
   168d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   168d2:	0792      	lsls	r2, r2, #30
   168d4:	d499      	bmi.n	1680a <pdn_interface_pdn_id_get+0x43e>
   168d6:	e5e4      	b.n	164a2 <pdn_interface_pdn_id_get+0xd6>
   168d8:	4628      	mov	r0, r5
   168da:	f006 fbab 	bl	1d034 <strlen>
   168de:	4606      	mov	r6, r0
   168e0:	6960      	ldr	r0, [r4, #20]
   168e2:	300c      	adds	r0, #12
   168e4:	f006 fba6 	bl	1d034 <strlen>
   168e8:	4286      	cmp	r6, r0
   168ea:	f47f ade0 	bne.w	164ae <pdn_interface_pdn_id_get+0xe2>
   168ee:	6961      	ldr	r1, [r4, #20]
   168f0:	4628      	mov	r0, r5
   168f2:	310c      	adds	r1, #12
   168f4:	f006 fba5 	bl	1d042 <strcmp>
   168f8:	2800      	cmp	r0, #0
   168fa:	f47f add8 	bne.w	164ae <pdn_interface_pdn_id_get+0xe2>
   168fe:	6963      	ldr	r3, [r4, #20]
   16900:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16902:	0797      	lsls	r7, r2, #30
   16904:	d49b      	bmi.n	1683e <pdn_interface_pdn_id_get+0x472>
   16906:	e5d2      	b.n	164ae <pdn_interface_pdn_id_get+0xe2>
   16908:	4628      	mov	r0, r5
   1690a:	f006 fb93 	bl	1d034 <strlen>
   1690e:	4606      	mov	r6, r0
   16910:	69a0      	ldr	r0, [r4, #24]
   16912:	300c      	adds	r0, #12
   16914:	f006 fb8e 	bl	1d034 <strlen>
   16918:	4286      	cmp	r6, r0
   1691a:	f47f adce 	bne.w	164ba <pdn_interface_pdn_id_get+0xee>
   1691e:	69a1      	ldr	r1, [r4, #24]
   16920:	4628      	mov	r0, r5
   16922:	310c      	adds	r1, #12
   16924:	f006 fb8d 	bl	1d042 <strcmp>
   16928:	2800      	cmp	r0, #0
   1692a:	f47f adc6 	bne.w	164ba <pdn_interface_pdn_id_get+0xee>
   1692e:	69a3      	ldr	r3, [r4, #24]
   16930:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16932:	0796      	lsls	r6, r2, #30
   16934:	d49d      	bmi.n	16872 <pdn_interface_pdn_id_get+0x4a6>
   16936:	e5c0      	b.n	164ba <pdn_interface_pdn_id_get+0xee>
   16938:	4628      	mov	r0, r5
   1693a:	f006 fb7b 	bl	1d034 <strlen>
   1693e:	4606      	mov	r6, r0
   16940:	69e0      	ldr	r0, [r4, #28]
   16942:	300c      	adds	r0, #12
   16944:	f006 fb76 	bl	1d034 <strlen>
   16948:	4286      	cmp	r6, r0
   1694a:	f47f adbc 	bne.w	164c6 <pdn_interface_pdn_id_get+0xfa>
   1694e:	69e1      	ldr	r1, [r4, #28]
   16950:	4628      	mov	r0, r5
   16952:	310c      	adds	r1, #12
   16954:	f006 fb75 	bl	1d042 <strcmp>
   16958:	2800      	cmp	r0, #0
   1695a:	f47f adb4 	bne.w	164c6 <pdn_interface_pdn_id_get+0xfa>
   1695e:	69e3      	ldr	r3, [r4, #28]
   16960:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16962:	0790      	lsls	r0, r2, #30
   16964:	f57f adaf 	bpl.w	164c6 <pdn_interface_pdn_id_get+0xfa>
   16968:	2607      	movs	r6, #7
   1696a:	e6ea      	b.n	16742 <pdn_interface_pdn_id_get+0x376>
   1696c:	4628      	mov	r0, r5
   1696e:	f006 fb61 	bl	1d034 <strlen>
   16972:	4606      	mov	r6, r0
   16974:	6a20      	ldr	r0, [r4, #32]
   16976:	300c      	adds	r0, #12
   16978:	f006 fb5c 	bl	1d034 <strlen>
   1697c:	4286      	cmp	r6, r0
   1697e:	f47f ada8 	bne.w	164d2 <pdn_interface_pdn_id_get+0x106>
   16982:	6a21      	ldr	r1, [r4, #32]
   16984:	4628      	mov	r0, r5
   16986:	310c      	adds	r1, #12
   16988:	f006 fb5b 	bl	1d042 <strcmp>
   1698c:	2800      	cmp	r0, #0
   1698e:	f47f ada0 	bne.w	164d2 <pdn_interface_pdn_id_get+0x106>
   16992:	6a23      	ldr	r3, [r4, #32]
   16994:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16996:	0791      	lsls	r1, r2, #30
   16998:	f57f ad9b 	bpl.w	164d2 <pdn_interface_pdn_id_get+0x106>
   1699c:	2608      	movs	r6, #8
   1699e:	e6d0      	b.n	16742 <pdn_interface_pdn_id_get+0x376>
   169a0:	4628      	mov	r0, r5
   169a2:	f006 fb47 	bl	1d034 <strlen>
   169a6:	4606      	mov	r6, r0
   169a8:	69e0      	ldr	r0, [r4, #28]
   169aa:	300c      	adds	r0, #12
   169ac:	f006 fb42 	bl	1d034 <strlen>
   169b0:	4286      	cmp	r6, r0
   169b2:	f47f adda 	bne.w	1656a <pdn_interface_pdn_id_get+0x19e>
   169b6:	69e1      	ldr	r1, [r4, #28]
   169b8:	4628      	mov	r0, r5
   169ba:	310c      	adds	r1, #12
   169bc:	f006 fb41 	bl	1d042 <strcmp>
   169c0:	2800      	cmp	r0, #0
   169c2:	f47f add2 	bne.w	1656a <pdn_interface_pdn_id_get+0x19e>
   169c6:	69e3      	ldr	r3, [r4, #28]
   169c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   169ca:	07d0      	lsls	r0, r2, #31
   169cc:	d4cc      	bmi.n	16968 <pdn_interface_pdn_id_get+0x59c>
   169ce:	e5cc      	b.n	1656a <pdn_interface_pdn_id_get+0x19e>
   169d0:	4628      	mov	r0, r5
   169d2:	f006 fb2f 	bl	1d034 <strlen>
   169d6:	4606      	mov	r6, r0
   169d8:	6a20      	ldr	r0, [r4, #32]
   169da:	300c      	adds	r0, #12
   169dc:	f006 fb2a 	bl	1d034 <strlen>
   169e0:	4286      	cmp	r6, r0
   169e2:	f47f adc8 	bne.w	16576 <pdn_interface_pdn_id_get+0x1aa>
   169e6:	6a21      	ldr	r1, [r4, #32]
   169e8:	4628      	mov	r0, r5
   169ea:	310c      	adds	r1, #12
   169ec:	f006 fb29 	bl	1d042 <strcmp>
   169f0:	2800      	cmp	r0, #0
   169f2:	f47f adc0 	bne.w	16576 <pdn_interface_pdn_id_get+0x1aa>
   169f6:	6a23      	ldr	r3, [r4, #32]
   169f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   169fa:	07d1      	lsls	r1, r2, #31
   169fc:	d4ce      	bmi.n	1699c <pdn_interface_pdn_id_get+0x5d0>
   169fe:	e5ba      	b.n	16576 <pdn_interface_pdn_id_get+0x1aa>
   16a00:	4628      	mov	r0, r5
   16a02:	f006 fb17 	bl	1d034 <strlen>
   16a06:	4606      	mov	r6, r0
   16a08:	68a0      	ldr	r0, [r4, #8]
   16a0a:	300c      	adds	r0, #12
   16a0c:	f006 fb12 	bl	1d034 <strlen>
   16a10:	4286      	cmp	r6, r0
   16a12:	f47f ad8c 	bne.w	1652e <pdn_interface_pdn_id_get+0x162>
   16a16:	68a1      	ldr	r1, [r4, #8]
   16a18:	4628      	mov	r0, r5
   16a1a:	310c      	adds	r1, #12
   16a1c:	f006 fb11 	bl	1d042 <strcmp>
   16a20:	2800      	cmp	r0, #0
   16a22:	f47f ad84 	bne.w	1652e <pdn_interface_pdn_id_get+0x162>
   16a26:	68a3      	ldr	r3, [r4, #8]
   16a28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16a2a:	07d0      	lsls	r0, r2, #31
   16a2c:	f57f ad7f 	bpl.w	1652e <pdn_interface_pdn_id_get+0x162>
   16a30:	2602      	movs	r6, #2
   16a32:	e686      	b.n	16742 <pdn_interface_pdn_id_get+0x376>
   16a34:	4628      	mov	r0, r5
   16a36:	f006 fafd 	bl	1d034 <strlen>
   16a3a:	4606      	mov	r6, r0
   16a3c:	68a0      	ldr	r0, [r4, #8]
   16a3e:	300c      	adds	r0, #12
   16a40:	f006 faf8 	bl	1d034 <strlen>
   16a44:	4286      	cmp	r6, r0
   16a46:	f47f ad20 	bne.w	1648a <pdn_interface_pdn_id_get+0xbe>
   16a4a:	68a1      	ldr	r1, [r4, #8]
   16a4c:	4628      	mov	r0, r5
   16a4e:	310c      	adds	r1, #12
   16a50:	f006 faf7 	bl	1d042 <strcmp>
   16a54:	2800      	cmp	r0, #0
   16a56:	f47f ad18 	bne.w	1648a <pdn_interface_pdn_id_get+0xbe>
   16a5a:	68a3      	ldr	r3, [r4, #8]
   16a5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16a5e:	0790      	lsls	r0, r2, #30
   16a60:	d4e6      	bmi.n	16a30 <pdn_interface_pdn_id_get+0x664>
   16a62:	e512      	b.n	1648a <pdn_interface_pdn_id_get+0xbe>
   16a64:	200207f4 	.word	0x200207f4
   16a68:	0001f250 	.word	0x0001f250
   16a6c:	0001f24c 	.word	0x0001f24c
   16a70:	0001f260 	.word	0x0001f260
   16a74:	200207f0 	.word	0x200207f0
   16a78:	4628      	mov	r0, r5
   16a7a:	f006 fadb 	bl	1d034 <strlen>
   16a7e:	4606      	mov	r6, r0
   16a80:	6860      	ldr	r0, [r4, #4]
   16a82:	300c      	adds	r0, #12
   16a84:	f006 fad6 	bl	1d034 <strlen>
   16a88:	4286      	cmp	r6, r0
   16a8a:	f47f acf8 	bne.w	1647e <pdn_interface_pdn_id_get+0xb2>
   16a8e:	6861      	ldr	r1, [r4, #4]
   16a90:	4628      	mov	r0, r5
   16a92:	310c      	adds	r1, #12
   16a94:	f006 fad5 	bl	1d042 <strcmp>
   16a98:	2800      	cmp	r0, #0
   16a9a:	f47f acf0 	bne.w	1647e <pdn_interface_pdn_id_get+0xb2>
   16a9e:	6863      	ldr	r3, [r4, #4]
   16aa0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16aa2:	0796      	lsls	r6, r2, #30
   16aa4:	f57f aceb 	bpl.w	1647e <pdn_interface_pdn_id_get+0xb2>
   16aa8:	2601      	movs	r6, #1
   16aaa:	e64a      	b.n	16742 <pdn_interface_pdn_id_get+0x376>
   16aac:	4628      	mov	r0, r5
   16aae:	f006 fac1 	bl	1d034 <strlen>
   16ab2:	4606      	mov	r6, r0
   16ab4:	6860      	ldr	r0, [r4, #4]
   16ab6:	300c      	adds	r0, #12
   16ab8:	f006 fabc 	bl	1d034 <strlen>
   16abc:	4286      	cmp	r6, r0
   16abe:	f47f ad30 	bne.w	16522 <pdn_interface_pdn_id_get+0x156>
   16ac2:	6861      	ldr	r1, [r4, #4]
   16ac4:	4628      	mov	r0, r5
   16ac6:	310c      	adds	r1, #12
   16ac8:	f006 fabb 	bl	1d042 <strcmp>
   16acc:	2800      	cmp	r0, #0
   16ace:	f47f ad28 	bne.w	16522 <pdn_interface_pdn_id_get+0x156>
   16ad2:	6863      	ldr	r3, [r4, #4]
   16ad4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16ad6:	07d6      	lsls	r6, r2, #31
   16ad8:	d4e6      	bmi.n	16aa8 <pdn_interface_pdn_id_get+0x6dc>
   16ada:	e522      	b.n	16522 <pdn_interface_pdn_id_get+0x156>
   16adc:	4608      	mov	r0, r1
   16ade:	f006 faa9 	bl	1d034 <strlen>
   16ae2:	4606      	mov	r6, r0
   16ae4:	6820      	ldr	r0, [r4, #0]
   16ae6:	300c      	adds	r0, #12
   16ae8:	f006 faa4 	bl	1d034 <strlen>
   16aec:	4286      	cmp	r6, r0
   16aee:	f47f acc0 	bne.w	16472 <pdn_interface_pdn_id_get+0xa6>
   16af2:	6821      	ldr	r1, [r4, #0]
   16af4:	4628      	mov	r0, r5
   16af6:	310c      	adds	r1, #12
   16af8:	f006 faa3 	bl	1d042 <strcmp>
   16afc:	4606      	mov	r6, r0
   16afe:	2800      	cmp	r0, #0
   16b00:	f47f acb7 	bne.w	16472 <pdn_interface_pdn_id_get+0xa6>
   16b04:	6823      	ldr	r3, [r4, #0]
   16b06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16b08:	0797      	lsls	r7, r2, #30
   16b0a:	f53f ae1a 	bmi.w	16742 <pdn_interface_pdn_id_get+0x376>
   16b0e:	e4b0      	b.n	16472 <pdn_interface_pdn_id_get+0xa6>
   16b10:	4608      	mov	r0, r1
   16b12:	f006 fa8f 	bl	1d034 <strlen>
   16b16:	4606      	mov	r6, r0
   16b18:	6820      	ldr	r0, [r4, #0]
   16b1a:	300c      	adds	r0, #12
   16b1c:	f006 fa8a 	bl	1d034 <strlen>
   16b20:	4286      	cmp	r6, r0
   16b22:	f47f acf8 	bne.w	16516 <pdn_interface_pdn_id_get+0x14a>
   16b26:	6821      	ldr	r1, [r4, #0]
   16b28:	4628      	mov	r0, r5
   16b2a:	310c      	adds	r1, #12
   16b2c:	f006 fa89 	bl	1d042 <strcmp>
   16b30:	4606      	mov	r6, r0
   16b32:	2800      	cmp	r0, #0
   16b34:	f47f acef 	bne.w	16516 <pdn_interface_pdn_id_get+0x14a>
   16b38:	6823      	ldr	r3, [r4, #0]
   16b3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16b3c:	07d7      	lsls	r7, r2, #31
   16b3e:	f53f ae00 	bmi.w	16742 <pdn_interface_pdn_id_get+0x376>
   16b42:	e4e8      	b.n	16516 <pdn_interface_pdn_id_get+0x14a>
   16b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16b48:	4770      	bx	lr
   16b4a:	480b      	ldr	r0, [pc, #44]	; (16b78 <pdn_interface_pdn_id_get+0x7ac>)
   16b4c:	f006 fa72 	bl	1d034 <strlen>
   16b50:	490a      	ldr	r1, [pc, #40]	; (16b7c <pdn_interface_pdn_id_get+0x7b0>)
   16b52:	4602      	mov	r2, r0
   16b54:	4808      	ldr	r0, [pc, #32]	; (16b78 <pdn_interface_pdn_id_get+0x7ac>)
   16b56:	f006 fa80 	bl	1d05a <strncmp>
   16b5a:	b930      	cbnz	r0, 16b6a <pdn_interface_pdn_id_get+0x79e>
   16b5c:	2008      	movs	r0, #8
   16b5e:	f7fa fc57 	bl	11410 <bsd_os_errno_set>
   16b62:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   16b66:	6858      	ldr	r0, [r3, #4]
   16b68:	e47b      	b.n	16462 <pdn_interface_pdn_id_get+0x96>
   16b6a:	2005      	movs	r0, #5
   16b6c:	f7fa fc50 	bl	11410 <bsd_os_errno_set>
   16b70:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   16b74:	6858      	ldr	r0, [r3, #4]
   16b76:	e474      	b.n	16462 <pdn_interface_pdn_id_get+0x96>
   16b78:	0001f2a4 	.word	0x0001f2a4
   16b7c:	200207f4 	.word	0x200207f4

00016b80 <linked_list_init>:
   16b80:	b128      	cbz	r0, 16b8e <linked_list_init+0xe>
   16b82:	2300      	movs	r3, #0
   16b84:	6003      	str	r3, [r0, #0]
   16b86:	e9c0 3301 	strd	r3, r3, [r0, #4]
   16b8a:	4618      	mov	r0, r3
   16b8c:	4770      	bx	lr
   16b8e:	2007      	movs	r0, #7
   16b90:	4770      	bx	lr
   16b92:	bf00      	nop

00016b94 <linked_list_push>:
   16b94:	6802      	ldr	r2, [r0, #0]
   16b96:	4603      	mov	r3, r0
   16b98:	3201      	adds	r2, #1
   16b9a:	d00e      	beq.n	16bba <linked_list_push+0x26>
   16b9c:	2200      	movs	r2, #0
   16b9e:	600a      	str	r2, [r1, #0]
   16ba0:	6802      	ldr	r2, [r0, #0]
   16ba2:	b13a      	cbz	r2, 16bb4 <linked_list_push+0x20>
   16ba4:	6882      	ldr	r2, [r0, #8]
   16ba6:	6011      	str	r1, [r2, #0]
   16ba8:	6081      	str	r1, [r0, #8]
   16baa:	681a      	ldr	r2, [r3, #0]
   16bac:	2000      	movs	r0, #0
   16bae:	3201      	adds	r2, #1
   16bb0:	601a      	str	r2, [r3, #0]
   16bb2:	4770      	bx	lr
   16bb4:	e9c0 1101 	strd	r1, r1, [r0, #4]
   16bb8:	e7f7      	b.n	16baa <linked_list_push+0x16>
   16bba:	2004      	movs	r0, #4
   16bbc:	4770      	bx	lr
   16bbe:	bf00      	nop

00016bc0 <linked_list_pop>:
   16bc0:	4603      	mov	r3, r0
   16bc2:	6800      	ldr	r0, [r0, #0]
   16bc4:	b128      	cbz	r0, 16bd2 <linked_list_pop+0x12>
   16bc6:	6858      	ldr	r0, [r3, #4]
   16bc8:	681a      	ldr	r2, [r3, #0]
   16bca:	6801      	ldr	r1, [r0, #0]
   16bcc:	3a01      	subs	r2, #1
   16bce:	6059      	str	r1, [r3, #4]
   16bd0:	601a      	str	r2, [r3, #0]
   16bd2:	4770      	bx	lr

00016bd4 <linked_list_peek>:
   16bd4:	6803      	ldr	r3, [r0, #0]
   16bd6:	b10b      	cbz	r3, 16bdc <linked_list_peek+0x8>
   16bd8:	6840      	ldr	r0, [r0, #4]
   16bda:	4770      	bx	lr
   16bdc:	4618      	mov	r0, r3
   16bde:	4770      	bx	lr

00016be0 <linked_list_size_get>:
   16be0:	6800      	ldr	r0, [r0, #0]
   16be2:	4770      	bx	lr

00016be4 <linked_list_get_next>:
   16be4:	6800      	ldr	r0, [r0, #0]
   16be6:	4770      	bx	lr

00016be8 <nrf_socket>:
   16be8:	b570      	push	{r4, r5, r6, lr}
   16bea:	4604      	mov	r4, r0
   16bec:	460d      	mov	r5, r1
   16bee:	4616      	mov	r6, r2
   16bf0:	f7fd fcd6 	bl	145a0 <bsd_platform_af_method_table_get>
   16bf4:	b130      	cbz	r0, 16c04 <nrf_socket+0x1c>
   16bf6:	6803      	ldr	r3, [r0, #0]
   16bf8:	4632      	mov	r2, r6
   16bfa:	4629      	mov	r1, r5
   16bfc:	4620      	mov	r0, r4
   16bfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16c02:	4718      	bx	r3
   16c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16c08:	bd70      	pop	{r4, r5, r6, pc}
   16c0a:	bf00      	nop

00016c0c <nrf_close>:
   16c0c:	b510      	push	{r4, lr}
   16c0e:	4604      	mov	r4, r0
   16c10:	f7fd fd1a 	bl	14648 <bsd_platform_fd_method_table_get>
   16c14:	b120      	cbz	r0, 16c20 <nrf_close+0x14>
   16c16:	6843      	ldr	r3, [r0, #4]
   16c18:	4620      	mov	r0, r4
   16c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16c1e:	4718      	bx	r3
   16c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16c24:	bd10      	pop	{r4, pc}
   16c26:	bf00      	nop

00016c28 <nrf_sendto>:
   16c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16c2c:	460d      	mov	r5, r1
   16c2e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   16c32:	4616      	mov	r6, r2
   16c34:	461f      	mov	r7, r3
   16c36:	4604      	mov	r4, r0
   16c38:	f7fd fd06 	bl	14648 <bsd_platform_fd_method_table_get>
   16c3c:	b158      	cbz	r0, 16c56 <nrf_sendto+0x2e>
   16c3e:	e9cd 8908 	strd	r8, r9, [sp, #32]
   16c42:	f8d0 e008 	ldr.w	lr, [r0, #8]
   16c46:	463b      	mov	r3, r7
   16c48:	4632      	mov	r2, r6
   16c4a:	4629      	mov	r1, r5
   16c4c:	4620      	mov	r0, r4
   16c4e:	46f4      	mov	ip, lr
   16c50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16c54:	4760      	bx	ip
   16c56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16c5e:	bf00      	nop

00016c60 <nrf_send>:
   16c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16c64:	b082      	sub	sp, #8
   16c66:	460e      	mov	r6, r1
   16c68:	4617      	mov	r7, r2
   16c6a:	4698      	mov	r8, r3
   16c6c:	4605      	mov	r5, r0
   16c6e:	f7fd fceb 	bl	14648 <bsd_platform_fd_method_table_get>
   16c72:	b160      	cbz	r0, 16c8e <nrf_send+0x2e>
   16c74:	4604      	mov	r4, r0
   16c76:	2000      	movs	r0, #0
   16c78:	e9cd 0000 	strd	r0, r0, [sp]
   16c7c:	4643      	mov	r3, r8
   16c7e:	463a      	mov	r2, r7
   16c80:	4631      	mov	r1, r6
   16c82:	4628      	mov	r0, r5
   16c84:	68a4      	ldr	r4, [r4, #8]
   16c86:	47a0      	blx	r4
   16c88:	b002      	add	sp, #8
   16c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16c8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16c92:	e7f9      	b.n	16c88 <nrf_send+0x28>

00016c94 <nrf_recvfrom>:
   16c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16c98:	460d      	mov	r5, r1
   16c9a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   16c9e:	4616      	mov	r6, r2
   16ca0:	461f      	mov	r7, r3
   16ca2:	4604      	mov	r4, r0
   16ca4:	f7fd fcd0 	bl	14648 <bsd_platform_fd_method_table_get>
   16ca8:	b158      	cbz	r0, 16cc2 <nrf_recvfrom+0x2e>
   16caa:	e9cd 8908 	strd	r8, r9, [sp, #32]
   16cae:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   16cb2:	463b      	mov	r3, r7
   16cb4:	4632      	mov	r2, r6
   16cb6:	4629      	mov	r1, r5
   16cb8:	4620      	mov	r0, r4
   16cba:	46f4      	mov	ip, lr
   16cbc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16cc0:	4760      	bx	ip
   16cc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16cca:	bf00      	nop

00016ccc <nrf_recv>:
   16ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16cd0:	b082      	sub	sp, #8
   16cd2:	460e      	mov	r6, r1
   16cd4:	4617      	mov	r7, r2
   16cd6:	4698      	mov	r8, r3
   16cd8:	4605      	mov	r5, r0
   16cda:	f7fd fcb5 	bl	14648 <bsd_platform_fd_method_table_get>
   16cde:	b160      	cbz	r0, 16cfa <nrf_recv+0x2e>
   16ce0:	4604      	mov	r4, r0
   16ce2:	2000      	movs	r0, #0
   16ce4:	e9cd 0000 	strd	r0, r0, [sp]
   16ce8:	4643      	mov	r3, r8
   16cea:	463a      	mov	r2, r7
   16cec:	4631      	mov	r1, r6
   16cee:	4628      	mov	r0, r5
   16cf0:	68e4      	ldr	r4, [r4, #12]
   16cf2:	47a0      	blx	r4
   16cf4:	b002      	add	sp, #8
   16cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16cfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16cfe:	e7f9      	b.n	16cf4 <nrf_recv+0x28>

00016d00 <nrf_connect>:
   16d00:	b570      	push	{r4, r5, r6, lr}
   16d02:	460d      	mov	r5, r1
   16d04:	4616      	mov	r6, r2
   16d06:	4604      	mov	r4, r0
   16d08:	f7fd fc9e 	bl	14648 <bsd_platform_fd_method_table_get>
   16d0c:	b130      	cbz	r0, 16d1c <nrf_connect+0x1c>
   16d0e:	6943      	ldr	r3, [r0, #20]
   16d10:	4632      	mov	r2, r6
   16d12:	4629      	mov	r1, r5
   16d14:	4620      	mov	r0, r4
   16d16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16d1a:	4718      	bx	r3
   16d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16d20:	bd70      	pop	{r4, r5, r6, pc}
   16d22:	bf00      	nop

00016d24 <nrf_listen>:
   16d24:	b570      	push	{r4, r5, r6, lr}
   16d26:	460d      	mov	r5, r1
   16d28:	4604      	mov	r4, r0
   16d2a:	f7fd fc8d 	bl	14648 <bsd_platform_fd_method_table_get>
   16d2e:	b128      	cbz	r0, 16d3c <nrf_listen+0x18>
   16d30:	6983      	ldr	r3, [r0, #24]
   16d32:	4629      	mov	r1, r5
   16d34:	4620      	mov	r0, r4
   16d36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16d3a:	4718      	bx	r3
   16d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16d40:	bd70      	pop	{r4, r5, r6, pc}
   16d42:	bf00      	nop

00016d44 <nrf_accept>:
   16d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16d48:	460d      	mov	r5, r1
   16d4a:	4616      	mov	r6, r2
   16d4c:	4604      	mov	r4, r0
   16d4e:	f7fd fc7b 	bl	14648 <bsd_platform_fd_method_table_get>
   16d52:	b140      	cbz	r0, 16d66 <nrf_accept+0x22>
   16d54:	69c7      	ldr	r7, [r0, #28]
   16d56:	4632      	mov	r2, r6
   16d58:	4629      	mov	r1, r5
   16d5a:	4620      	mov	r0, r4
   16d5c:	46bc      	mov	ip, r7
   16d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16d62:	2300      	movs	r3, #0
   16d64:	4760      	bx	ip
   16d66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16d6e:	bf00      	nop

00016d70 <nrf_bind>:
   16d70:	b570      	push	{r4, r5, r6, lr}
   16d72:	460d      	mov	r5, r1
   16d74:	4616      	mov	r6, r2
   16d76:	4604      	mov	r4, r0
   16d78:	f7fd fc66 	bl	14648 <bsd_platform_fd_method_table_get>
   16d7c:	b130      	cbz	r0, 16d8c <nrf_bind+0x1c>
   16d7e:	6903      	ldr	r3, [r0, #16]
   16d80:	4632      	mov	r2, r6
   16d82:	4629      	mov	r1, r5
   16d84:	4620      	mov	r0, r4
   16d86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16d8a:	4718      	bx	r3
   16d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16d90:	bd70      	pop	{r4, r5, r6, pc}
   16d92:	bf00      	nop

00016d94 <nrf_setsockopt>:
   16d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16d98:	f8dd 8018 	ldr.w	r8, [sp, #24]
   16d9c:	460d      	mov	r5, r1
   16d9e:	4616      	mov	r6, r2
   16da0:	461f      	mov	r7, r3
   16da2:	4604      	mov	r4, r0
   16da4:	f7fd fc50 	bl	14648 <bsd_platform_fd_method_table_get>
   16da8:	b158      	cbz	r0, 16dc2 <nrf_setsockopt+0x2e>
   16daa:	f8cd 8018 	str.w	r8, [sp, #24]
   16dae:	f8d0 e020 	ldr.w	lr, [r0, #32]
   16db2:	463b      	mov	r3, r7
   16db4:	4632      	mov	r2, r6
   16db6:	4629      	mov	r1, r5
   16db8:	4620      	mov	r0, r4
   16dba:	46f4      	mov	ip, lr
   16dbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16dc0:	4760      	bx	ip
   16dc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16dca:	bf00      	nop

00016dcc <nrf_getsockopt>:
   16dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16dd0:	f8dd 8018 	ldr.w	r8, [sp, #24]
   16dd4:	460d      	mov	r5, r1
   16dd6:	4616      	mov	r6, r2
   16dd8:	461f      	mov	r7, r3
   16dda:	4604      	mov	r4, r0
   16ddc:	f7fd fc34 	bl	14648 <bsd_platform_fd_method_table_get>
   16de0:	b158      	cbz	r0, 16dfa <nrf_getsockopt+0x2e>
   16de2:	f8cd 8018 	str.w	r8, [sp, #24]
   16de6:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   16dea:	463b      	mov	r3, r7
   16dec:	4632      	mov	r2, r6
   16dee:	4629      	mov	r1, r5
   16df0:	4620      	mov	r0, r4
   16df2:	46f4      	mov	ip, lr
   16df4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16df8:	4760      	bx	ip
   16dfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16e02:	bf00      	nop

00016e04 <nrf_getaddrinfo>:
   16e04:	f7fd bc90 	b.w	14728 <bsd_platform_getaddrinfo>

00016e08 <nrf_freeaddrinfo>:
   16e08:	f7fd bc90 	b.w	1472c <bsd_platform_freeaddrinfo>

00016e0c <nrf_poll>:
   16e0c:	f7fd bc90 	b.w	14730 <bsd_platform_poll>

00016e10 <nrf_fcntl>:
   16e10:	f7fd bce8 	b.w	147e4 <bsd_platform_fcntl>

00016e14 <at_client_evt_handler>:
   16e14:	b120      	cbz	r0, 16e20 <at_client_evt_handler+0xc>
   16e16:	f850 1b08 	ldr.w	r1, [r0], #8
   16e1a:	0c09      	lsrs	r1, r1, #16
   16e1c:	f7fb bf4a 	b.w	12cb4 <rpc_at_event_handler>
   16e20:	4770      	bx	lr
   16e22:	bf00      	nop

00016e24 <rpc_at_client_init>:
   16e24:	4801      	ldr	r0, [pc, #4]	; (16e2c <rpc_at_client_init+0x8>)
   16e26:	f001 bdcf 	b.w	189c8 <rpc_client_register>
   16e2a:	bf00      	nop
   16e2c:	0001f2b8 	.word	0x0001f2b8

00016e30 <rpc_at_client_request_alloc>:
   16e30:	b180      	cbz	r0, 16e54 <rpc_at_client_request_alloc+0x24>
   16e32:	2300      	movs	r3, #0
   16e34:	b510      	push	{r4, lr}
   16e36:	b082      	sub	sp, #8
   16e38:	aa02      	add	r2, sp, #8
   16e3a:	4604      	mov	r4, r0
   16e3c:	f842 3d04 	str.w	r3, [r2, #-4]!
   16e40:	2003      	movs	r0, #3
   16e42:	f001 fff9 	bl	18e38 <rpc_message_alloc>
   16e46:	b918      	cbnz	r0, 16e50 <rpc_at_client_request_alloc+0x20>
   16e48:	9b01      	ldr	r3, [sp, #4]
   16e4a:	b10b      	cbz	r3, 16e50 <rpc_at_client_request_alloc+0x20>
   16e4c:	3308      	adds	r3, #8
   16e4e:	6023      	str	r3, [r4, #0]
   16e50:	b002      	add	sp, #8
   16e52:	bd10      	pop	{r4, pc}
   16e54:	200e      	movs	r0, #14
   16e56:	4770      	bx	lr

00016e58 <rpc_at_client_request_send>:
   16e58:	b150      	cbz	r0, 16e70 <rpc_at_client_request_send+0x18>
   16e5a:	4603      	mov	r3, r0
   16e5c:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   16e60:	2003      	movs	r0, #3
   16e62:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   16e66:	f843 1d08 	str.w	r1, [r3, #-8]!
   16e6a:	4619      	mov	r1, r3
   16e6c:	f001 bfcc 	b.w	18e08 <rpc_message_send>
   16e70:	200e      	movs	r0, #14
   16e72:	4770      	bx	lr

00016e74 <rpc_at_client_message_free>:
   16e74:	b120      	cbz	r0, 16e80 <rpc_at_client_message_free+0xc>
   16e76:	f1a0 0108 	sub.w	r1, r0, #8
   16e7a:	2003      	movs	r0, #3
   16e7c:	f002 b80e 	b.w	18e9c <rpc_message_free>
   16e80:	200e      	movs	r0, #14
   16e82:	4770      	bx	lr

00016e84 <rpc_at_client_data_free>:
   16e84:	b118      	cbz	r0, 16e8e <rpc_at_client_data_free+0xa>
   16e86:	4601      	mov	r1, r0
   16e88:	2003      	movs	r0, #3
   16e8a:	f002 b919 	b.w	190c0 <rpc_message_data_free>
   16e8e:	200e      	movs	r0, #14
   16e90:	4770      	bx	lr
   16e92:	bf00      	nop

00016e94 <ip_recvd_packet_free_cb>:
   16e94:	b510      	push	{r4, lr}
   16e96:	4604      	mov	r4, r0
   16e98:	6800      	ldr	r0, [r0, #0]
   16e9a:	f7fc fbc9 	bl	13630 <rpc_ip_client_data_free>
   16e9e:	68a0      	ldr	r0, [r4, #8]
   16ea0:	b118      	cbz	r0, 16eaa <ip_recvd_packet_free_cb+0x16>
   16ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16ea6:	f7fc bb63 	b.w	13570 <nrf_free>
   16eaa:	bd10      	pop	{r4, pc}

00016eac <rpc_error_to_nrf_bsd_error>:
   16eac:	2810      	cmp	r0, #16
   16eae:	bf9a      	itte	ls
   16eb0:	4b02      	ldrls	r3, [pc, #8]	; (16ebc <rpc_error_to_nrf_bsd_error+0x10>)
   16eb2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   16eb6:	202d      	movhi	r0, #45	; 0x2d
   16eb8:	4770      	bx	lr
   16eba:	bf00      	nop
   16ebc:	0001f2c8 	.word	0x0001f2c8

00016ec0 <ip_interface_request_create>:
   16ec0:	b570      	push	{r4, r5, r6, lr}
   16ec2:	2500      	movs	r5, #0
   16ec4:	b082      	sub	sp, #8
   16ec6:	ac02      	add	r4, sp, #8
   16ec8:	f844 5d04 	str.w	r5, [r4, #-4]!
   16ecc:	4606      	mov	r6, r0
   16ece:	460d      	mov	r5, r1
   16ed0:	4620      	mov	r0, r4
   16ed2:	4619      	mov	r1, r3
   16ed4:	4614      	mov	r4, r2
   16ed6:	f7fc fb79 	bl	135cc <rpc_ip_client_request_alloc>
   16eda:	b960      	cbnz	r0, 16ef6 <ip_interface_request_create+0x36>
   16edc:	9b01      	ldr	r3, [sp, #4]
   16ede:	2208      	movs	r2, #8
   16ee0:	7258      	strb	r0, [r3, #9]
   16ee2:	7298      	strb	r0, [r3, #10]
   16ee4:	72d8      	strb	r0, [r3, #11]
   16ee6:	4618      	mov	r0, r3
   16ee8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   16eec:	60dc      	str	r4, [r3, #12]
   16eee:	611d      	str	r5, [r3, #16]
   16ef0:	721a      	strb	r2, [r3, #8]
   16ef2:	b002      	add	sp, #8
   16ef4:	bd70      	pop	{r4, r5, r6, pc}
   16ef6:	9b01      	ldr	r3, [sp, #4]
   16ef8:	4618      	mov	r0, r3
   16efa:	b002      	add	sp, #8
   16efc:	bd70      	pop	{r4, r5, r6, pc}
   16efe:	bf00      	nop

00016f00 <ip_interface_request_send>:
   16f00:	b570      	push	{r4, r5, r6, lr}
   16f02:	460c      	mov	r4, r1
   16f04:	4605      	mov	r5, r0
   16f06:	4611      	mov	r1, r2
   16f08:	4620      	mov	r0, r4
   16f0a:	461e      	mov	r6, r3
   16f0c:	f7fc fb72 	bl	135f4 <rpc_ip_client_request_send>
   16f10:	b900      	cbnz	r0, 16f14 <ip_interface_request_send+0x14>
   16f12:	bd70      	pop	{r4, r5, r6, pc}
   16f14:	6820      	ldr	r0, [r4, #0]
   16f16:	b108      	cbz	r0, 16f1c <ip_interface_request_send+0x1c>
   16f18:	f7fc fb8a 	bl	13630 <rpc_ip_client_data_free>
   16f1c:	4620      	mov	r0, r4
   16f1e:	f7fc fb7f 	bl	13620 <rpc_ip_client_message_free>
   16f22:	602e      	str	r6, [r5, #0]
   16f24:	2023      	movs	r0, #35	; 0x23
   16f26:	bd70      	pop	{r4, r5, r6, pc}

00016f28 <ip_interface_wait>:
   16f28:	b538      	push	{r3, r4, r5, lr}
   16f2a:	4605      	mov	r5, r0
   16f2c:	f001 fb82 	bl	18634 <interface_socket_wait>
   16f30:	4604      	mov	r4, r0
   16f32:	b108      	cbz	r0, 16f38 <ip_interface_wait+0x10>
   16f34:	4620      	mov	r0, r4
   16f36:	bd38      	pop	{r3, r4, r5, pc}
   16f38:	4628      	mov	r0, r5
   16f3a:	f001 fbe7 	bl	1870c <interface_socket_from_handle_get>
   16f3e:	2800      	cmp	r0, #0
   16f40:	d0f8      	beq.n	16f34 <ip_interface_wait+0xc>
   16f42:	6844      	ldr	r4, [r0, #4]
   16f44:	2c00      	cmp	r4, #0
   16f46:	d0f5      	beq.n	16f34 <ip_interface_wait+0xc>
   16f48:	2300      	movs	r3, #0
   16f4a:	6043      	str	r3, [r0, #4]
   16f4c:	4620      	mov	r0, r4
   16f4e:	bd38      	pop	{r3, r4, r5, pc}

00016f50 <ip_interface_init>:
   16f50:	b538      	push	{r3, r4, r5, lr}
   16f52:	2300      	movs	r3, #0
   16f54:	4d07      	ldr	r5, [pc, #28]	; (16f74 <ip_interface_init+0x24>)
   16f56:	4c08      	ldr	r4, [pc, #32]	; (16f78 <ip_interface_init+0x28>)
   16f58:	4619      	mov	r1, r3
   16f5a:	2220      	movs	r2, #32
   16f5c:	4807      	ldr	r0, [pc, #28]	; (16f7c <ip_interface_init+0x2c>)
   16f5e:	602b      	str	r3, [r5, #0]
   16f60:	6023      	str	r3, [r4, #0]
   16f62:	f006 f8cc 	bl	1d0fe <memset>
   16f66:	f7fc fb2b 	bl	135c0 <rpc_ip_client_init>
   16f6a:	3000      	adds	r0, #0
   16f6c:	bf18      	it	ne
   16f6e:	2001      	movne	r0, #1
   16f70:	4240      	negs	r0, r0
   16f72:	bd38      	pop	{r3, r4, r5, pc}
   16f74:	2002092c 	.word	0x2002092c
   16f78:	20020928 	.word	0x20020928
   16f7c:	20020934 	.word	0x20020934

00016f80 <ip_interface_open>:
   16f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16f84:	4606      	mov	r6, r0
   16f86:	2000      	movs	r0, #0
   16f88:	f026 0308 	bic.w	r3, r6, #8
   16f8c:	b082      	sub	sp, #8
   16f8e:	2b02      	cmp	r3, #2
   16f90:	460c      	mov	r4, r1
   16f92:	4617      	mov	r7, r2
   16f94:	9000      	str	r0, [sp, #0]
   16f96:	d002      	beq.n	16f9e <ip_interface_open+0x1e>
   16f98:	2e05      	cmp	r6, #5
   16f9a:	f040 8084 	bne.w	170a6 <ip_interface_open+0x126>
   16f9e:	1e63      	subs	r3, r4, #1
   16fa0:	2b02      	cmp	r3, #2
   16fa2:	d85c      	bhi.n	1705e <ip_interface_open+0xde>
   16fa4:	2f00      	cmp	r7, #0
   16fa6:	d154      	bne.n	17052 <ip_interface_open+0xd2>
   16fa8:	2c01      	cmp	r4, #1
   16faa:	d067      	beq.n	1707c <ip_interface_open+0xfc>
   16fac:	2c03      	cmp	r4, #3
   16fae:	bf18      	it	ne
   16fb0:	2702      	movne	r7, #2
   16fb2:	4a48      	ldr	r2, [pc, #288]	; (170d4 <ip_interface_open+0x154>)
   16fb4:	4621      	mov	r1, r4
   16fb6:	4668      	mov	r0, sp
   16fb8:	f001 fa98 	bl	184ec <interface_socket_allocate>
   16fbc:	9b00      	ldr	r3, [sp, #0]
   16fbe:	4680      	mov	r8, r0
   16fc0:	2b00      	cmp	r3, #0
   16fc2:	d059      	beq.n	17078 <ip_interface_open+0xf8>
   16fc4:	2100      	movs	r1, #0
   16fc6:	a802      	add	r0, sp, #8
   16fc8:	f840 1d04 	str.w	r1, [r0, #-4]!
   16fcc:	e9c3 6403 	strd	r6, r4, [r3, #12]
   16fd0:	615f      	str	r7, [r3, #20]
   16fd2:	f7fc fafb 	bl	135cc <rpc_ip_client_request_alloc>
   16fd6:	2800      	cmp	r0, #0
   16fd8:	d14b      	bne.n	17072 <ip_interface_open+0xf2>
   16fda:	f247 0201 	movw	r2, #28673	; 0x7001
   16fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16fe2:	2108      	movs	r1, #8
   16fe4:	9d01      	ldr	r5, [sp, #4]
   16fe6:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
   16fea:	60ea      	str	r2, [r5, #12]
   16fec:	7268      	strb	r0, [r5, #9]
   16fee:	72a8      	strb	r0, [r5, #10]
   16ff0:	72e8      	strb	r0, [r5, #11]
   16ff2:	7229      	strb	r1, [r5, #8]
   16ff4:	742b      	strb	r3, [r5, #16]
   16ff6:	746b      	strb	r3, [r5, #17]
   16ff8:	74ab      	strb	r3, [r5, #18]
   16ffa:	74eb      	strb	r3, [r5, #19]
   16ffc:	68ab      	ldr	r3, [r5, #8]
   16ffe:	2e05      	cmp	r6, #5
   17000:	f103 030c 	add.w	r3, r3, #12
   17004:	60ab      	str	r3, [r5, #8]
   17006:	d003      	beq.n	17010 <ip_interface_open+0x90>
   17008:	2e0a      	cmp	r6, #10
   1700a:	bf14      	ite	ne
   1700c:	2601      	movne	r6, #1
   1700e:	2602      	moveq	r6, #2
   17010:	616e      	str	r6, [r5, #20]
   17012:	61ef      	str	r7, [r5, #28]
   17014:	61ac      	str	r4, [r5, #24]
   17016:	f247 0101 	movw	r1, #28673	; 0x7001
   1701a:	4628      	mov	r0, r5
   1701c:	9f00      	ldr	r7, [sp, #0]
   1701e:	f7fc fae9 	bl	135f4 <rpc_ip_client_request_send>
   17022:	4606      	mov	r6, r0
   17024:	b360      	cbz	r0, 17080 <ip_interface_open+0x100>
   17026:	6828      	ldr	r0, [r5, #0]
   17028:	b108      	cbz	r0, 1702e <ip_interface_open+0xae>
   1702a:	f7fc fb01 	bl	13630 <rpc_ip_client_data_free>
   1702e:	4628      	mov	r0, r5
   17030:	f7fc faf6 	bl	13620 <rpc_ip_client_message_free>
   17034:	2301      	movs	r3, #1
   17036:	2523      	movs	r5, #35	; 0x23
   17038:	603b      	str	r3, [r7, #0]
   1703a:	4640      	mov	r0, r8
   1703c:	f001 faac 	bl	18598 <interface_socket_free>
   17040:	4628      	mov	r0, r5
   17042:	f7fa f9e5 	bl	11410 <bsd_os_errno_set>
   17046:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1704a:	4640      	mov	r0, r8
   1704c:	b002      	add	sp, #8
   1704e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17052:	2c01      	cmp	r4, #1
   17054:	d009      	beq.n	1706a <ip_interface_open+0xea>
   17056:	2c02      	cmp	r4, #2
   17058:	d109      	bne.n	1706e <ip_interface_open+0xee>
   1705a:	2f02      	cmp	r7, #2
   1705c:	d0a9      	beq.n	16fb2 <ip_interface_open+0x32>
   1705e:	2016      	movs	r0, #22
   17060:	f7fa f9d6 	bl	11410 <bsd_os_errno_set>
   17064:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   17068:	e7ef      	b.n	1704a <ip_interface_open+0xca>
   1706a:	2f01      	cmp	r7, #1
   1706c:	d1f7      	bne.n	1705e <ip_interface_open+0xde>
   1706e:	2702      	movs	r7, #2
   17070:	e79f      	b.n	16fb2 <ip_interface_open+0x32>
   17072:	9d01      	ldr	r5, [sp, #4]
   17074:	2d00      	cmp	r5, #0
   17076:	d1c1      	bne.n	16ffc <ip_interface_open+0x7c>
   17078:	250c      	movs	r5, #12
   1707a:	e7de      	b.n	1703a <ip_interface_open+0xba>
   1707c:	4627      	mov	r7, r4
   1707e:	e798      	b.n	16fb2 <ip_interface_open+0x32>
   17080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17084:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17088:	2102      	movs	r1, #2
   1708a:	4640      	mov	r0, r8
   1708c:	f001 fad2 	bl	18634 <interface_socket_wait>
   17090:	4605      	mov	r5, r0
   17092:	2800      	cmp	r0, #0
   17094:	d1d1      	bne.n	1703a <ip_interface_open+0xba>
   17096:	4640      	mov	r0, r8
   17098:	f001 fb38 	bl	1870c <interface_socket_from_handle_get>
   1709c:	b148      	cbz	r0, 170b2 <ip_interface_open+0x132>
   1709e:	6845      	ldr	r5, [r0, #4]
   170a0:	b13d      	cbz	r5, 170b2 <ip_interface_open+0x132>
   170a2:	6046      	str	r6, [r0, #4]
   170a4:	e7c9      	b.n	1703a <ip_interface_open+0xba>
   170a6:	202f      	movs	r0, #47	; 0x2f
   170a8:	f7fa f9b2 	bl	11410 <bsd_os_errno_set>
   170ac:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   170b0:	e7cb      	b.n	1704a <ip_interface_open+0xca>
   170b2:	3c02      	subs	r4, #2
   170b4:	2c01      	cmp	r4, #1
   170b6:	d8c8      	bhi.n	1704a <ip_interface_open+0xca>
   170b8:	4640      	mov	r0, r8
   170ba:	9b00      	ldr	r3, [sp, #0]
   170bc:	681a      	ldr	r2, [r3, #0]
   170be:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   170c2:	601a      	str	r2, [r3, #0]
   170c4:	681a      	ldr	r2, [r3, #0]
   170c6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   170ca:	601a      	str	r2, [r3, #0]
   170cc:	b002      	add	sp, #8
   170ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   170d2:	bf00      	nop
   170d4:	00016e95 	.word	0x00016e95

000170d8 <ip_interface_close>:
   170d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   170dc:	b082      	sub	sp, #8
   170de:	4606      	mov	r6, r0
   170e0:	f001 fb14 	bl	1870c <interface_socket_from_handle_get>
   170e4:	2800      	cmp	r0, #0
   170e6:	d063      	beq.n	171b0 <ip_interface_close+0xd8>
   170e8:	4604      	mov	r4, r0
   170ea:	2100      	movs	r1, #0
   170ec:	a802      	add	r0, sp, #8
   170ee:	6827      	ldr	r7, [r4, #0]
   170f0:	f840 1d04 	str.w	r1, [r0, #-4]!
   170f4:	f8d4 8018 	ldr.w	r8, [r4, #24]
   170f8:	f7fc fa68 	bl	135cc <rpc_ip_client_request_alloc>
   170fc:	2800      	cmp	r0, #0
   170fe:	d13a      	bne.n	17176 <ip_interface_close+0x9e>
   17100:	f247 0309 	movw	r3, #28681	; 0x7009
   17104:	2208      	movs	r2, #8
   17106:	9d01      	ldr	r5, [sp, #4]
   17108:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1710c:	60eb      	str	r3, [r5, #12]
   1710e:	f8c5 8010 	str.w	r8, [r5, #16]
   17112:	7268      	strb	r0, [r5, #9]
   17114:	72a8      	strb	r0, [r5, #10]
   17116:	72e8      	strb	r0, [r5, #11]
   17118:	722a      	strb	r2, [r5, #8]
   1711a:	6823      	ldr	r3, [r4, #0]
   1711c:	f247 0109 	movw	r1, #28681	; 0x7009
   17120:	0c1b      	lsrs	r3, r3, #16
   17122:	041b      	lsls	r3, r3, #16
   17124:	f043 030d 	orr.w	r3, r3, #13
   17128:	6023      	str	r3, [r4, #0]
   1712a:	6823      	ldr	r3, [r4, #0]
   1712c:	4628      	mov	r0, r5
   1712e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   17132:	6023      	str	r3, [r4, #0]
   17134:	6823      	ldr	r3, [r4, #0]
   17136:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1713a:	6023      	str	r3, [r4, #0]
   1713c:	f7fc fa5a 	bl	135f4 <rpc_ip_client_request_send>
   17140:	bb40      	cbnz	r0, 17194 <ip_interface_close+0xbc>
   17142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17146:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1714a:	210e      	movs	r1, #14
   1714c:	4630      	mov	r0, r6
   1714e:	f001 fa71 	bl	18634 <interface_socket_wait>
   17152:	4604      	mov	r4, r0
   17154:	b1a0      	cbz	r0, 17180 <ip_interface_close+0xa8>
   17156:	4c17      	ldr	r4, [pc, #92]	; (171b4 <ip_interface_close+0xdc>)
   17158:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   1715c:	b120      	cbz	r0, 17168 <ip_interface_close+0x90>
   1715e:	f7fc fa5f 	bl	13620 <rpc_ip_client_message_free>
   17162:	2300      	movs	r3, #0
   17164:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   17168:	4630      	mov	r0, r6
   1716a:	f001 fa15 	bl	18598 <interface_socket_free>
   1716e:	2000      	movs	r0, #0
   17170:	b002      	add	sp, #8
   17172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17176:	9d01      	ldr	r5, [sp, #4]
   17178:	200c      	movs	r0, #12
   1717a:	2d00      	cmp	r5, #0
   1717c:	d1cd      	bne.n	1711a <ip_interface_close+0x42>
   1717e:	e012      	b.n	171a6 <ip_interface_close+0xce>
   17180:	4630      	mov	r0, r6
   17182:	f001 fac3 	bl	1870c <interface_socket_from_handle_get>
   17186:	2800      	cmp	r0, #0
   17188:	d0e5      	beq.n	17156 <ip_interface_close+0x7e>
   1718a:	6843      	ldr	r3, [r0, #4]
   1718c:	2b00      	cmp	r3, #0
   1718e:	d0e2      	beq.n	17156 <ip_interface_close+0x7e>
   17190:	6044      	str	r4, [r0, #4]
   17192:	e7e0      	b.n	17156 <ip_interface_close+0x7e>
   17194:	6828      	ldr	r0, [r5, #0]
   17196:	b108      	cbz	r0, 1719c <ip_interface_close+0xc4>
   17198:	f7fc fa4a 	bl	13630 <rpc_ip_client_data_free>
   1719c:	4628      	mov	r0, r5
   1719e:	f7fc fa3f 	bl	13620 <rpc_ip_client_message_free>
   171a2:	2023      	movs	r0, #35	; 0x23
   171a4:	6027      	str	r7, [r4, #0]
   171a6:	f7fa f933 	bl	11410 <bsd_os_errno_set>
   171aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   171ae:	e7df      	b.n	17170 <ip_interface_close+0x98>
   171b0:	2009      	movs	r0, #9
   171b2:	e7f8      	b.n	171a6 <ip_interface_close+0xce>
   171b4:	20020934 	.word	0x20020934

000171b8 <ip_interface_sendto>:
   171b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171bc:	2500      	movs	r5, #0
   171be:	b089      	sub	sp, #36	; 0x24
   171c0:	9103      	str	r1, [sp, #12]
   171c2:	4614      	mov	r4, r2
   171c4:	9301      	str	r3, [sp, #4]
   171c6:	9507      	str	r5, [sp, #28]
   171c8:	4607      	mov	r7, r0
   171ca:	9e12      	ldr	r6, [sp, #72]	; 0x48
   171cc:	f001 fa9e 	bl	1870c <interface_socket_from_handle_get>
   171d0:	2800      	cmp	r0, #0
   171d2:	f000 8124 	beq.w	1741e <ip_interface_sendto+0x266>
   171d6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   171da:	f300 8118 	bgt.w	1740e <ip_interface_sendto+0x256>
   171de:	6903      	ldr	r3, [r0, #16]
   171e0:	4605      	mov	r5, r0
   171e2:	2b01      	cmp	r3, #1
   171e4:	f000 80d1 	beq.w	1738a <ip_interface_sendto+0x1d2>
   171e8:	682a      	ldr	r2, [r5, #0]
   171ea:	0390      	lsls	r0, r2, #14
   171ec:	d423      	bmi.n	17236 <ip_interface_sendto+0x7e>
   171ee:	682a      	ldr	r2, [r5, #0]
   171f0:	0091      	lsls	r1, r2, #2
   171f2:	d406      	bmi.n	17202 <ip_interface_sendto+0x4a>
   171f4:	2b01      	cmp	r3, #1
   171f6:	f000 80ed 	beq.w	173d4 <ip_interface_sendto+0x21c>
   171fa:	682b      	ldr	r3, [r5, #0]
   171fc:	031a      	lsls	r2, r3, #12
   171fe:	f140 8102 	bpl.w	17406 <ip_interface_sendto+0x24e>
   17202:	682b      	ldr	r3, [r5, #0]
   17204:	031b      	lsls	r3, r3, #12
   17206:	f140 8106 	bpl.w	17416 <ip_interface_sendto+0x25e>
   1720a:	68a8      	ldr	r0, [r5, #8]
   1720c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 17428 <ip_interface_sendto+0x270>
   17210:	2800      	cmp	r0, #0
   17212:	f040 8096 	bne.w	17342 <ip_interface_sendto+0x18a>
   17216:	682b      	ldr	r3, [r5, #0]
   17218:	0118      	lsls	r0, r3, #4
   1721a:	f140 8082 	bpl.w	17322 <ip_interface_sendto+0x16a>
   1721e:	682b      	ldr	r3, [r5, #0]
   17220:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   17224:	602b      	str	r3, [r5, #0]
   17226:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   1722a:	2800      	cmp	r0, #0
   1722c:	d17c      	bne.n	17328 <ip_interface_sendto+0x170>
   1722e:	4620      	mov	r0, r4
   17230:	b009      	add	sp, #36	; 0x24
   17232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17236:	f247 0806 	movw	r8, #28678	; 0x7006
   1723a:	f04f 0a0c 	mov.w	sl, #12
   1723e:	043b      	lsls	r3, r7, #16
   17240:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 17428 <ip_interface_sendto+0x270>
   17244:	9304      	str	r3, [sp, #16]
   17246:	4621      	mov	r1, r4
   17248:	a807      	add	r0, sp, #28
   1724a:	f7fc f9bf 	bl	135cc <rpc_ip_client_request_alloc>
   1724e:	2804      	cmp	r0, #4
   17250:	d0f9      	beq.n	17246 <ip_interface_sendto+0x8e>
   17252:	2800      	cmp	r0, #0
   17254:	d171      	bne.n	1733a <ip_interface_sendto+0x182>
   17256:	9b07      	ldr	r3, [sp, #28]
   17258:	f883 a008 	strb.w	sl, [r3, #8]
   1725c:	7258      	strb	r0, [r3, #9]
   1725e:	7298      	strb	r0, [r3, #10]
   17260:	72d8      	strb	r0, [r3, #11]
   17262:	b33e      	cbz	r6, 172b4 <ip_interface_sendto+0xfc>
   17264:	68ea      	ldr	r2, [r5, #12]
   17266:	6871      	ldr	r1, [r6, #4]
   17268:	428a      	cmp	r2, r1
   1726a:	d10a      	bne.n	17282 <ip_interface_sendto+0xca>
   1726c:	2a02      	cmp	r2, #2
   1726e:	f103 001c 	add.w	r0, r3, #28
   17272:	7831      	ldrb	r1, [r6, #0]
   17274:	f000 8090 	beq.w	17398 <ip_interface_sendto+0x1e0>
   17278:	2a0a      	cmp	r2, #10
   1727a:	d102      	bne.n	17282 <ip_interface_sendto+0xca>
   1727c:	2924      	cmp	r1, #36	; 0x24
   1727e:	f000 80af 	beq.w	173e0 <ip_interface_sendto+0x228>
   17282:	6818      	ldr	r0, [r3, #0]
   17284:	b110      	cbz	r0, 1728c <ip_interface_sendto+0xd4>
   17286:	f7fc f9d3 	bl	13630 <rpc_ip_client_data_free>
   1728a:	9b07      	ldr	r3, [sp, #28]
   1728c:	4618      	mov	r0, r3
   1728e:	f7fc f9c7 	bl	13620 <rpc_ip_client_message_free>
   17292:	2016      	movs	r0, #22
   17294:	682b      	ldr	r3, [r5, #0]
   17296:	031a      	lsls	r2, r3, #12
   17298:	d453      	bmi.n	17342 <ip_interface_sendto+0x18a>
   1729a:	682b      	ldr	r3, [r5, #0]
   1729c:	b29b      	uxth	r3, r3
   1729e:	2b0d      	cmp	r3, #13
   172a0:	d0b6      	beq.n	17210 <ip_interface_sendto+0x58>
   172a2:	682b      	ldr	r3, [r5, #0]
   172a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   172a8:	602b      	str	r3, [r5, #0]
   172aa:	682b      	ldr	r3, [r5, #0]
   172ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   172b0:	602b      	str	r3, [r5, #0]
   172b2:	e7ad      	b.n	17210 <ip_interface_sendto+0x58>
   172b4:	4642      	mov	r2, r8
   172b6:	9901      	ldr	r1, [sp, #4]
   172b8:	6159      	str	r1, [r3, #20]
   172ba:	69a9      	ldr	r1, [r5, #24]
   172bc:	9804      	ldr	r0, [sp, #16]
   172be:	6119      	str	r1, [r3, #16]
   172c0:	9903      	ldr	r1, [sp, #12]
   172c2:	4302      	orrs	r2, r0
   172c4:	60da      	str	r2, [r3, #12]
   172c6:	605c      	str	r4, [r3, #4]
   172c8:	b119      	cbz	r1, 172d2 <ip_interface_sendto+0x11a>
   172ca:	6818      	ldr	r0, [r3, #0]
   172cc:	4622      	mov	r2, r4
   172ce:	f005 feec 	bl	1d0aa <memcpy>
   172d2:	682b      	ldr	r3, [r5, #0]
   172d4:	4641      	mov	r1, r8
   172d6:	9305      	str	r3, [sp, #20]
   172d8:	682b      	ldr	r3, [r5, #0]
   172da:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   172de:	602b      	str	r3, [r5, #0]
   172e0:	682b      	ldr	r3, [r5, #0]
   172e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   172e6:	602b      	str	r3, [r5, #0]
   172e8:	9b07      	ldr	r3, [sp, #28]
   172ea:	4618      	mov	r0, r3
   172ec:	9302      	str	r3, [sp, #8]
   172ee:	f7fc f981 	bl	135f4 <rpc_ip_client_request_send>
   172f2:	9b02      	ldr	r3, [sp, #8]
   172f4:	4683      	mov	fp, r0
   172f6:	bb58      	cbnz	r0, 17350 <ip_interface_sendto+0x198>
   172f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   172fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17300:	4611      	mov	r1, r2
   17302:	4638      	mov	r0, r7
   17304:	f001 f996 	bl	18634 <interface_socket_wait>
   17308:	b370      	cbz	r0, 17368 <ip_interface_sendto+0x1b0>
   1730a:	682b      	ldr	r3, [r5, #0]
   1730c:	0319      	lsls	r1, r3, #12
   1730e:	d437      	bmi.n	17380 <ip_interface_sendto+0x1c8>
   17310:	280c      	cmp	r0, #12
   17312:	d1bf      	bne.n	17294 <ip_interface_sendto+0xdc>
   17314:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   17318:	2800      	cmp	r0, #0
   1731a:	d094      	beq.n	17246 <ip_interface_sendto+0x8e>
   1731c:	f7fc f980 	bl	13620 <rpc_ip_client_message_free>
   17320:	e791      	b.n	17246 <ip_interface_sendto+0x8e>
   17322:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   17326:	6984      	ldr	r4, [r0, #24]
   17328:	f7fc f97a 	bl	13620 <rpc_ip_client_message_free>
   1732c:	2300      	movs	r3, #0
   1732e:	4620      	mov	r0, r4
   17330:	f849 3027 	str.w	r3, [r9, r7, lsl #2]
   17334:	b009      	add	sp, #36	; 0x24
   17336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1733a:	682b      	ldr	r3, [r5, #0]
   1733c:	200c      	movs	r0, #12
   1733e:	031a      	lsls	r2, r3, #12
   17340:	d5ab      	bpl.n	1729a <ip_interface_sendto+0xe2>
   17342:	f7fa f865 	bl	11410 <bsd_os_errno_set>
   17346:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1734a:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   1734e:	e76c      	b.n	1722a <ip_interface_sendto+0x72>
   17350:	6818      	ldr	r0, [r3, #0]
   17352:	469b      	mov	fp, r3
   17354:	b108      	cbz	r0, 1735a <ip_interface_sendto+0x1a2>
   17356:	f7fc f96b 	bl	13630 <rpc_ip_client_data_free>
   1735a:	4658      	mov	r0, fp
   1735c:	f7fc f960 	bl	13620 <rpc_ip_client_message_free>
   17360:	9b05      	ldr	r3, [sp, #20]
   17362:	2023      	movs	r0, #35	; 0x23
   17364:	602b      	str	r3, [r5, #0]
   17366:	e795      	b.n	17294 <ip_interface_sendto+0xdc>
   17368:	4638      	mov	r0, r7
   1736a:	f001 f9cf 	bl	1870c <interface_socket_from_handle_get>
   1736e:	4603      	mov	r3, r0
   17370:	b1f0      	cbz	r0, 173b0 <ip_interface_sendto+0x1f8>
   17372:	6840      	ldr	r0, [r0, #4]
   17374:	b1e0      	cbz	r0, 173b0 <ip_interface_sendto+0x1f8>
   17376:	f8c3 b004 	str.w	fp, [r3, #4]
   1737a:	682b      	ldr	r3, [r5, #0]
   1737c:	0319      	lsls	r1, r3, #12
   1737e:	d5c7      	bpl.n	17310 <ip_interface_sendto+0x158>
   17380:	68a8      	ldr	r0, [r5, #8]
   17382:	682b      	ldr	r3, [r5, #0]
   17384:	031e      	lsls	r6, r3, #12
   17386:	d588      	bpl.n	1729a <ip_interface_sendto+0xe2>
   17388:	e742      	b.n	17210 <ip_interface_sendto+0x58>
   1738a:	2e00      	cmp	r6, #0
   1738c:	f43f af2c 	beq.w	171e8 <ip_interface_sendto+0x30>
   17390:	2016      	movs	r0, #22
   17392:	f8df 9094 	ldr.w	r9, [pc, #148]	; 17428 <ip_interface_sendto+0x270>
   17396:	e7d4      	b.n	17342 <ip_interface_sendto+0x18a>
   17398:	2910      	cmp	r1, #16
   1739a:	f47f af72 	bne.w	17282 <ip_interface_sendto+0xca>
   1739e:	2204      	movs	r2, #4
   173a0:	8931      	ldrh	r1, [r6, #8]
   173a2:	835a      	strh	r2, [r3, #26]
   173a4:	8319      	strh	r1, [r3, #24]
   173a6:	f106 010c 	add.w	r1, r6, #12
   173aa:	f005 fe7e 	bl	1d0aa <memcpy>
   173ae:	e01e      	b.n	173ee <ip_interface_sendto+0x236>
   173b0:	682b      	ldr	r3, [r5, #0]
   173b2:	031b      	lsls	r3, r3, #12
   173b4:	f53f af2f 	bmi.w	17216 <ip_interface_sendto+0x5e>
   173b8:	682b      	ldr	r3, [r5, #0]
   173ba:	b29b      	uxth	r3, r3
   173bc:	2b0d      	cmp	r3, #13
   173be:	f43f af2a 	beq.w	17216 <ip_interface_sendto+0x5e>
   173c2:	682b      	ldr	r3, [r5, #0]
   173c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   173c8:	602b      	str	r3, [r5, #0]
   173ca:	682b      	ldr	r3, [r5, #0]
   173cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   173d0:	602b      	str	r3, [r5, #0]
   173d2:	e720      	b.n	17216 <ip_interface_sendto+0x5e>
   173d4:	682b      	ldr	r3, [r5, #0]
   173d6:	b29b      	uxth	r3, r3
   173d8:	2b05      	cmp	r3, #5
   173da:	f47f af12 	bne.w	17202 <ip_interface_sendto+0x4a>
   173de:	e70c      	b.n	171fa <ip_interface_sendto+0x42>
   173e0:	2210      	movs	r2, #16
   173e2:	8931      	ldrh	r1, [r6, #8]
   173e4:	835a      	strh	r2, [r3, #26]
   173e6:	8319      	strh	r1, [r3, #24]
   173e8:	18b1      	adds	r1, r6, r2
   173ea:	f005 fe5e 	bl	1d0aa <memcpy>
   173ee:	f247 0207 	movw	r2, #28679	; 0x7007
   173f2:	9b07      	ldr	r3, [sp, #28]
   173f4:	4690      	mov	r8, r2
   173f6:	6899      	ldr	r1, [r3, #8]
   173f8:	8b58      	ldrh	r0, [r3, #26]
   173fa:	3104      	adds	r1, #4
   173fc:	4401      	add	r1, r0
   173fe:	9801      	ldr	r0, [sp, #4]
   17400:	6099      	str	r1, [r3, #8]
   17402:	6158      	str	r0, [r3, #20]
   17404:	e759      	b.n	172ba <ip_interface_sendto+0x102>
   17406:	2023      	movs	r0, #35	; 0x23
   17408:	f8df 901c 	ldr.w	r9, [pc, #28]	; 17428 <ip_interface_sendto+0x270>
   1740c:	e799      	b.n	17342 <ip_interface_sendto+0x18a>
   1740e:	2028      	movs	r0, #40	; 0x28
   17410:	f8df 9014 	ldr.w	r9, [pc, #20]	; 17428 <ip_interface_sendto+0x270>
   17414:	e795      	b.n	17342 <ip_interface_sendto+0x18a>
   17416:	2039      	movs	r0, #57	; 0x39
   17418:	f8df 900c 	ldr.w	r9, [pc, #12]	; 17428 <ip_interface_sendto+0x270>
   1741c:	e791      	b.n	17342 <ip_interface_sendto+0x18a>
   1741e:	2009      	movs	r0, #9
   17420:	f8df 9004 	ldr.w	r9, [pc, #4]	; 17428 <ip_interface_sendto+0x270>
   17424:	e78d      	b.n	17342 <ip_interface_sendto+0x18a>
   17426:	bf00      	nop
   17428:	20020934 	.word	0x20020934

0001742c <ip_interface_recvfrom>:
   1742c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17430:	b085      	sub	sp, #20
   17432:	2a00      	cmp	r2, #0
   17434:	f000 8110 	beq.w	17658 <ip_interface_recvfrom+0x22c>
   17438:	468a      	mov	sl, r1
   1743a:	4699      	mov	r9, r3
   1743c:	4607      	mov	r7, r0
   1743e:	4616      	mov	r6, r2
   17440:	f001 f964 	bl	1870c <interface_socket_from_handle_get>
   17444:	4604      	mov	r4, r0
   17446:	2800      	cmp	r0, #0
   17448:	f000 810d 	beq.w	17666 <ip_interface_recvfrom+0x23a>
   1744c:	6803      	ldr	r3, [r0, #0]
   1744e:	02d9      	lsls	r1, r3, #11
   17450:	d565      	bpl.n	1751e <ip_interface_recvfrom+0xf2>
   17452:	f019 0f02 	tst.w	r9, #2
   17456:	bf18      	it	ne
   17458:	f04f 0800 	movne.w	r8, #0
   1745c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   17460:	bf08      	it	eq
   17462:	6803      	ldreq	r3, [r0, #0]
   17464:	f009 0510 	and.w	r5, r9, #16
   17468:	bf04      	itt	eq
   1746a:	f083 5880 	eoreq.w	r8, r3, #268435456	; 0x10000000
   1746e:	f3c8 7800 	ubfxeq	r8, r8, #28, #1
   17472:	6823      	ldr	r3, [r4, #0]
   17474:	03da      	lsls	r2, r3, #15
   17476:	d56d      	bpl.n	17554 <ip_interface_recvfrom+0x128>
   17478:	6823      	ldr	r3, [r4, #0]
   1747a:	69e0      	ldr	r0, [r4, #28]
   1747c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   17480:	6023      	str	r3, [r4, #0]
   17482:	6803      	ldr	r3, [r0, #0]
   17484:	68db      	ldr	r3, [r3, #12]
   17486:	4798      	blx	r3
   17488:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1748c:	4683      	mov	fp, r0
   1748e:	f000 8081 	beq.w	17594 <ip_interface_recvfrom+0x168>
   17492:	4286      	cmp	r6, r0
   17494:	dd03      	ble.n	1749e <ip_interface_recvfrom+0x72>
   17496:	6923      	ldr	r3, [r4, #16]
   17498:	2b01      	cmp	r3, #1
   1749a:	f000 80a7 	beq.w	175ec <ip_interface_recvfrom+0x1c0>
   1749e:	2500      	movs	r5, #0
   174a0:	69e0      	ldr	r0, [r4, #28]
   174a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   174a4:	b103      	cbz	r3, 174a8 <ip_interface_recvfrom+0x7c>
   174a6:	681b      	ldr	r3, [r3, #0]
   174a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   174aa:	e9cd a600 	strd	sl, r6, [sp]
   174ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
   174b2:	6803      	ldr	r3, [r0, #0]
   174b4:	464a      	mov	r2, r9
   174b6:	689b      	ldr	r3, [r3, #8]
   174b8:	4669      	mov	r1, sp
   174ba:	4798      	blx	r3
   174bc:	4683      	mov	fp, r0
   174be:	69e0      	ldr	r0, [r4, #28]
   174c0:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   174c4:	6803      	ldr	r3, [r0, #0]
   174c6:	bf18      	it	ne
   174c8:	2601      	movne	r6, #1
   174ca:	68db      	ldr	r3, [r3, #12]
   174cc:	bf0a      	itet	eq
   174ce:	2600      	moveq	r6, #0
   174d0:	f04f 0800 	movne.w	r8, #0
   174d4:	f04f 0823 	moveq.w	r8, #35	; 0x23
   174d8:	4798      	blx	r3
   174da:	3001      	adds	r0, #1
   174dc:	d135      	bne.n	1754a <ip_interface_recvfrom+0x11e>
   174de:	2d00      	cmp	r5, #0
   174e0:	f000 80b6 	beq.w	17650 <ip_interface_recvfrom+0x224>
   174e4:	2e00      	cmp	r6, #0
   174e6:	f000 80a6 	beq.w	17636 <ip_interface_recvfrom+0x20a>
   174ea:	6823      	ldr	r3, [r4, #0]
   174ec:	0319      	lsls	r1, r3, #12
   174ee:	d506      	bpl.n	174fe <ip_interface_recvfrom+0xd2>
   174f0:	6823      	ldr	r3, [r4, #0]
   174f2:	b29b      	uxth	r3, r3
   174f4:	2b0d      	cmp	r3, #13
   174f6:	d002      	beq.n	174fe <ip_interface_recvfrom+0xd2>
   174f8:	6923      	ldr	r3, [r4, #16]
   174fa:	2b01      	cmp	r3, #1
   174fc:	d025      	beq.n	1754a <ip_interface_recvfrom+0x11e>
   174fe:	6823      	ldr	r3, [r4, #0]
   17500:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   17504:	6823      	ldr	r3, [r4, #0]
   17506:	f040 80b1 	bne.w	1766c <ip_interface_recvfrom+0x240>
   1750a:	031a      	lsls	r2, r3, #12
   1750c:	d475      	bmi.n	175fa <ip_interface_recvfrom+0x1ce>
   1750e:	f1b8 0f00 	cmp.w	r8, #0
   17512:	f040 808a 	bne.w	1762a <ip_interface_recvfrom+0x1fe>
   17516:	4658      	mov	r0, fp
   17518:	b005      	add	sp, #20
   1751a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1751e:	6803      	ldr	r3, [r0, #0]
   17520:	b29b      	uxth	r3, r3
   17522:	2b06      	cmp	r3, #6
   17524:	d073      	beq.n	1760e <ip_interface_recvfrom+0x1e2>
   17526:	6803      	ldr	r3, [r0, #0]
   17528:	b29b      	uxth	r3, r3
   1752a:	2b07      	cmp	r3, #7
   1752c:	bf0c      	ite	eq
   1752e:	f04f 0809 	moveq.w	r8, #9
   17532:	f04f 0839 	movne.w	r8, #57	; 0x39
   17536:	69e0      	ldr	r0, [r4, #28]
   17538:	6803      	ldr	r3, [r0, #0]
   1753a:	68db      	ldr	r3, [r3, #12]
   1753c:	4798      	blx	r3
   1753e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   17542:	4683      	mov	fp, r0
   17544:	d0db      	beq.n	174fe <ip_interface_recvfrom+0xd2>
   17546:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   1754a:	6823      	ldr	r3, [r4, #0]
   1754c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17550:	6023      	str	r3, [r4, #0]
   17552:	e7dc      	b.n	1750e <ip_interface_recvfrom+0xe2>
   17554:	f1b8 0f00 	cmp.w	r8, #0
   17558:	f000 8081 	beq.w	1765e <ip_interface_recvfrom+0x232>
   1755c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   17560:	6a23      	ldr	r3, [r4, #32]
   17562:	4611      	mov	r1, r2
   17564:	2b00      	cmp	r3, #0
   17566:	bf08      	it	eq
   17568:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1756c:	4638      	mov	r0, r7
   1756e:	f001 f861 	bl	18634 <interface_socket_wait>
   17572:	4680      	mov	r8, r0
   17574:	b358      	cbz	r0, 175ce <ip_interface_recvfrom+0x1a2>
   17576:	6823      	ldr	r3, [r4, #0]
   17578:	69e0      	ldr	r0, [r4, #28]
   1757a:	031b      	lsls	r3, r3, #12
   1757c:	d521      	bpl.n	175c2 <ip_interface_recvfrom+0x196>
   1757e:	6823      	ldr	r3, [r4, #0]
   17580:	b29b      	uxth	r3, r3
   17582:	2b0d      	cmp	r3, #13
   17584:	d01d      	beq.n	175c2 <ip_interface_recvfrom+0x196>
   17586:	6925      	ldr	r5, [r4, #16]
   17588:	f1a5 0501 	sub.w	r5, r5, #1
   1758c:	fab5 f585 	clz	r5, r5
   17590:	096d      	lsrs	r5, r5, #5
   17592:	e786      	b.n	174a2 <ip_interface_recvfrom+0x76>
   17594:	6823      	ldr	r3, [r4, #0]
   17596:	0318      	lsls	r0, r3, #12
   17598:	d5dc      	bpl.n	17554 <ip_interface_recvfrom+0x128>
   1759a:	6823      	ldr	r3, [r4, #0]
   1759c:	b29b      	uxth	r3, r3
   1759e:	2b0d      	cmp	r3, #13
   175a0:	d0d8      	beq.n	17554 <ip_interface_recvfrom+0x128>
   175a2:	6923      	ldr	r3, [r4, #16]
   175a4:	69e0      	ldr	r0, [r4, #28]
   175a6:	2b01      	cmp	r3, #1
   175a8:	d034      	beq.n	17614 <ip_interface_recvfrom+0x1e8>
   175aa:	f04f 0839 	mov.w	r8, #57	; 0x39
   175ae:	6823      	ldr	r3, [r4, #0]
   175b0:	0c1b      	lsrs	r3, r3, #16
   175b2:	041b      	lsls	r3, r3, #16
   175b4:	f043 030d 	orr.w	r3, r3, #13
   175b8:	6023      	str	r3, [r4, #0]
   175ba:	6823      	ldr	r3, [r4, #0]
   175bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   175c0:	6023      	str	r3, [r4, #0]
   175c2:	6803      	ldr	r3, [r0, #0]
   175c4:	68db      	ldr	r3, [r3, #12]
   175c6:	4798      	blx	r3
   175c8:	3001      	adds	r0, #1
   175ca:	d1be      	bne.n	1754a <ip_interface_recvfrom+0x11e>
   175cc:	e797      	b.n	174fe <ip_interface_recvfrom+0xd2>
   175ce:	4638      	mov	r0, r7
   175d0:	f001 f89c 	bl	1870c <interface_socket_from_handle_get>
   175d4:	b138      	cbz	r0, 175e6 <ip_interface_recvfrom+0x1ba>
   175d6:	f8d0 8004 	ldr.w	r8, [r0, #4]
   175da:	f1b8 0f00 	cmp.w	r8, #0
   175de:	d002      	beq.n	175e6 <ip_interface_recvfrom+0x1ba>
   175e0:	2300      	movs	r3, #0
   175e2:	6043      	str	r3, [r0, #4]
   175e4:	e7c7      	b.n	17576 <ip_interface_recvfrom+0x14a>
   175e6:	f04f 0801 	mov.w	r8, #1
   175ea:	e742      	b.n	17472 <ip_interface_recvfrom+0x46>
   175ec:	b11d      	cbz	r5, 175f6 <ip_interface_recvfrom+0x1ca>
   175ee:	6823      	ldr	r3, [r4, #0]
   175f0:	00db      	lsls	r3, r3, #3
   175f2:	d5b3      	bpl.n	1755c <ip_interface_recvfrom+0x130>
   175f4:	e753      	b.n	1749e <ip_interface_recvfrom+0x72>
   175f6:	69e0      	ldr	r0, [r4, #28]
   175f8:	e753      	b.n	174a2 <ip_interface_recvfrom+0x76>
   175fa:	6823      	ldr	r3, [r4, #0]
   175fc:	b29b      	uxth	r3, r3
   175fe:	2b0d      	cmp	r3, #13
   17600:	d185      	bne.n	1750e <ip_interface_recvfrom+0xe2>
   17602:	68a3      	ldr	r3, [r4, #8]
   17604:	2b00      	cmp	r3, #0
   17606:	d082      	beq.n	1750e <ip_interface_recvfrom+0xe2>
   17608:	f8d4 8008 	ldr.w	r8, [r4, #8]
   1760c:	e77f      	b.n	1750e <ip_interface_recvfrom+0xe2>
   1760e:	f04f 0809 	mov.w	r8, #9
   17612:	e790      	b.n	17536 <ip_interface_recvfrom+0x10a>
   17614:	6803      	ldr	r3, [r0, #0]
   17616:	68db      	ldr	r3, [r3, #12]
   17618:	4798      	blx	r3
   1761a:	3001      	adds	r0, #1
   1761c:	d00b      	beq.n	17636 <ip_interface_recvfrom+0x20a>
   1761e:	f04f 0823 	mov.w	r8, #35	; 0x23
   17622:	6823      	ldr	r3, [r4, #0]
   17624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17628:	6023      	str	r3, [r4, #0]
   1762a:	4640      	mov	r0, r8
   1762c:	f7f9 fef0 	bl	11410 <bsd_os_errno_set>
   17630:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   17634:	e76f      	b.n	17516 <ip_interface_recvfrom+0xea>
   17636:	6823      	ldr	r3, [r4, #0]
   17638:	f04f 0b00 	mov.w	fp, #0
   1763c:	0c1b      	lsrs	r3, r3, #16
   1763e:	041b      	lsls	r3, r3, #16
   17640:	f043 030d 	orr.w	r3, r3, #13
   17644:	6023      	str	r3, [r4, #0]
   17646:	6823      	ldr	r3, [r4, #0]
   17648:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1764c:	6023      	str	r3, [r4, #0]
   1764e:	e762      	b.n	17516 <ip_interface_recvfrom+0xea>
   17650:	2e00      	cmp	r6, #0
   17652:	f47f af4a 	bne.w	174ea <ip_interface_recvfrom+0xbe>
   17656:	e752      	b.n	174fe <ip_interface_recvfrom+0xd2>
   17658:	f04f 0816 	mov.w	r8, #22
   1765c:	e7e5      	b.n	1762a <ip_interface_recvfrom+0x1fe>
   1765e:	f04f 0823 	mov.w	r8, #35	; 0x23
   17662:	69e0      	ldr	r0, [r4, #28]
   17664:	e7ad      	b.n	175c2 <ip_interface_recvfrom+0x196>
   17666:	f04f 0809 	mov.w	r8, #9
   1766a:	e7de      	b.n	1762a <ip_interface_recvfrom+0x1fe>
   1766c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   17670:	6023      	str	r3, [r4, #0]
   17672:	6823      	ldr	r3, [r4, #0]
   17674:	f04f 0869 	mov.w	r8, #105	; 0x69
   17678:	0c1b      	lsrs	r3, r3, #16
   1767a:	041b      	lsls	r3, r3, #16
   1767c:	f043 030d 	orr.w	r3, r3, #13
   17680:	6023      	str	r3, [r4, #0]
   17682:	e7d2      	b.n	1762a <ip_interface_recvfrom+0x1fe>

00017684 <ip_interface_connect>:
   17684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17688:	b082      	sub	sp, #8
   1768a:	2900      	cmp	r1, #0
   1768c:	d044      	beq.n	17718 <ip_interface_connect+0x94>
   1768e:	2a00      	cmp	r2, #0
   17690:	d042      	beq.n	17718 <ip_interface_connect+0x94>
   17692:	4606      	mov	r6, r0
   17694:	460f      	mov	r7, r1
   17696:	f001 f839 	bl	1870c <interface_socket_from_handle_get>
   1769a:	4605      	mov	r5, r0
   1769c:	2800      	cmp	r0, #0
   1769e:	f000 8096 	beq.w	177ce <ip_interface_connect+0x14a>
   176a2:	6803      	ldr	r3, [r0, #0]
   176a4:	b29b      	uxth	r3, r3
   176a6:	2b02      	cmp	r3, #2
   176a8:	d004      	beq.n	176b4 <ip_interface_connect+0x30>
   176aa:	6803      	ldr	r3, [r0, #0]
   176ac:	b29b      	uxth	r3, r3
   176ae:	2b04      	cmp	r3, #4
   176b0:	f040 808d 	bne.w	177ce <ip_interface_connect+0x14a>
   176b4:	6829      	ldr	r1, [r5, #0]
   176b6:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   176ba:	f040 8084 	bne.w	177c6 <ip_interface_connect+0x142>
   176be:	a802      	add	r0, sp, #8
   176c0:	f840 1d04 	str.w	r1, [r0, #-4]!
   176c4:	f8d5 8018 	ldr.w	r8, [r5, #24]
   176c8:	f7fb ff80 	bl	135cc <rpc_ip_client_request_alloc>
   176cc:	bb70      	cbnz	r0, 1772c <ip_interface_connect+0xa8>
   176ce:	2108      	movs	r1, #8
   176d0:	0433      	lsls	r3, r6, #16
   176d2:	9c01      	ldr	r4, [sp, #4]
   176d4:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
   176d8:	f042 0202 	orr.w	r2, r2, #2
   176dc:	60e2      	str	r2, [r4, #12]
   176de:	f8c4 8010 	str.w	r8, [r4, #16]
   176e2:	7260      	strb	r0, [r4, #9]
   176e4:	72a0      	strb	r0, [r4, #10]
   176e6:	72e0      	strb	r0, [r4, #11]
   176e8:	7221      	strb	r1, [r4, #8]
   176ea:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
   176ee:	f043 0302 	orr.w	r3, r3, #2
   176f2:	60e3      	str	r3, [r4, #12]
   176f4:	68a3      	ldr	r3, [r4, #8]
   176f6:	69aa      	ldr	r2, [r5, #24]
   176f8:	3304      	adds	r3, #4
   176fa:	6122      	str	r2, [r4, #16]
   176fc:	60a3      	str	r3, [r4, #8]
   176fe:	68eb      	ldr	r3, [r5, #12]
   17700:	687a      	ldr	r2, [r7, #4]
   17702:	4293      	cmp	r3, r2
   17704:	d108      	bne.n	17718 <ip_interface_connect+0x94>
   17706:	2b02      	cmp	r3, #2
   17708:	f104 0018 	add.w	r0, r4, #24
   1770c:	783a      	ldrb	r2, [r7, #0]
   1770e:	d03a      	beq.n	17786 <ip_interface_connect+0x102>
   17710:	2b0a      	cmp	r3, #10
   17712:	d101      	bne.n	17718 <ip_interface_connect+0x94>
   17714:	2a24      	cmp	r2, #36	; 0x24
   17716:	d00e      	beq.n	17736 <ip_interface_connect+0xb2>
   17718:	2416      	movs	r4, #22
   1771a:	4620      	mov	r0, r4
   1771c:	f7f9 fe78 	bl	11410 <bsd_os_errno_set>
   17720:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17724:	4620      	mov	r0, r4
   17726:	b002      	add	sp, #8
   17728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1772c:	9c01      	ldr	r4, [sp, #4]
   1772e:	2c00      	cmp	r4, #0
   17730:	d04f      	beq.n	177d2 <ip_interface_connect+0x14e>
   17732:	0433      	lsls	r3, r6, #16
   17734:	e7d9      	b.n	176ea <ip_interface_connect+0x66>
   17736:	2210      	movs	r2, #16
   17738:	893b      	ldrh	r3, [r7, #8]
   1773a:	18b9      	adds	r1, r7, r2
   1773c:	82e2      	strh	r2, [r4, #22]
   1773e:	82a3      	strh	r3, [r4, #20]
   17740:	f005 fcb3 	bl	1d0aa <memcpy>
   17744:	68a3      	ldr	r3, [r4, #8]
   17746:	8ae2      	ldrh	r2, [r4, #22]
   17748:	f247 0102 	movw	r1, #28674	; 0x7002
   1774c:	4413      	add	r3, r2
   1774e:	60a3      	str	r3, [r4, #8]
   17750:	682f      	ldr	r7, [r5, #0]
   17752:	682b      	ldr	r3, [r5, #0]
   17754:	4620      	mov	r0, r4
   17756:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   1775a:	602b      	str	r3, [r5, #0]
   1775c:	f7fb ff4a 	bl	135f4 <rpc_ip_client_request_send>
   17760:	b9e0      	cbnz	r0, 1779c <ip_interface_connect+0x118>
   17762:	682b      	ldr	r3, [r5, #0]
   17764:	f013 5880 	ands.w	r8, r3, #268435456	; 0x10000000
   17768:	d12f      	bne.n	177ca <ip_interface_connect+0x146>
   1776a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1776e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17772:	2105      	movs	r1, #5
   17774:	4630      	mov	r0, r6
   17776:	f000 ff5d 	bl	18634 <interface_socket_wait>
   1777a:	4604      	mov	r4, r0
   1777c:	b1c0      	cbz	r0, 177b0 <ip_interface_connect+0x12c>
   1777e:	2c73      	cmp	r4, #115	; 0x73
   17780:	d0cb      	beq.n	1771a <ip_interface_connect+0x96>
   17782:	602f      	str	r7, [r5, #0]
   17784:	e7c9      	b.n	1771a <ip_interface_connect+0x96>
   17786:	2a10      	cmp	r2, #16
   17788:	d1c6      	bne.n	17718 <ip_interface_connect+0x94>
   1778a:	2204      	movs	r2, #4
   1778c:	893b      	ldrh	r3, [r7, #8]
   1778e:	f107 010c 	add.w	r1, r7, #12
   17792:	82e2      	strh	r2, [r4, #22]
   17794:	82a3      	strh	r3, [r4, #20]
   17796:	f005 fc88 	bl	1d0aa <memcpy>
   1779a:	e7d3      	b.n	17744 <ip_interface_connect+0xc0>
   1779c:	6820      	ldr	r0, [r4, #0]
   1779e:	b108      	cbz	r0, 177a4 <ip_interface_connect+0x120>
   177a0:	f7fb ff46 	bl	13630 <rpc_ip_client_data_free>
   177a4:	4620      	mov	r0, r4
   177a6:	f7fb ff3b 	bl	13620 <rpc_ip_client_message_free>
   177aa:	2423      	movs	r4, #35	; 0x23
   177ac:	602f      	str	r7, [r5, #0]
   177ae:	e7b4      	b.n	1771a <ip_interface_connect+0x96>
   177b0:	4630      	mov	r0, r6
   177b2:	f000 ffab 	bl	1870c <interface_socket_from_handle_get>
   177b6:	2800      	cmp	r0, #0
   177b8:	d0b4      	beq.n	17724 <ip_interface_connect+0xa0>
   177ba:	6844      	ldr	r4, [r0, #4]
   177bc:	2c00      	cmp	r4, #0
   177be:	d0b1      	beq.n	17724 <ip_interface_connect+0xa0>
   177c0:	f8c0 8004 	str.w	r8, [r0, #4]
   177c4:	e7db      	b.n	1777e <ip_interface_connect+0xfa>
   177c6:	2472      	movs	r4, #114	; 0x72
   177c8:	e7a7      	b.n	1771a <ip_interface_connect+0x96>
   177ca:	2473      	movs	r4, #115	; 0x73
   177cc:	e7a5      	b.n	1771a <ip_interface_connect+0x96>
   177ce:	2409      	movs	r4, #9
   177d0:	e7a3      	b.n	1771a <ip_interface_connect+0x96>
   177d2:	240c      	movs	r4, #12
   177d4:	e7a1      	b.n	1771a <ip_interface_connect+0x96>
   177d6:	bf00      	nop

000177d8 <ip_interface_bind>:
   177d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   177dc:	b082      	sub	sp, #8
   177de:	b389      	cbz	r1, 17844 <ip_interface_bind+0x6c>
   177e0:	b382      	cbz	r2, 17844 <ip_interface_bind+0x6c>
   177e2:	4607      	mov	r7, r0
   177e4:	460e      	mov	r6, r1
   177e6:	f000 ff91 	bl	1870c <interface_socket_from_handle_get>
   177ea:	4605      	mov	r5, r0
   177ec:	2800      	cmp	r0, #0
   177ee:	d07b      	beq.n	178e8 <ip_interface_bind+0x110>
   177f0:	6803      	ldr	r3, [r0, #0]
   177f2:	b29b      	uxth	r3, r3
   177f4:	2b02      	cmp	r3, #2
   177f6:	d177      	bne.n	178e8 <ip_interface_bind+0x110>
   177f8:	2100      	movs	r1, #0
   177fa:	a802      	add	r0, sp, #8
   177fc:	f840 1d04 	str.w	r1, [r0, #-4]!
   17800:	f8d5 8018 	ldr.w	r8, [r5, #24]
   17804:	f7fb fee2 	bl	135cc <rpc_ip_client_request_alloc>
   17808:	bb30      	cbnz	r0, 17858 <ip_interface_bind+0x80>
   1780a:	f247 0305 	movw	r3, #28677	; 0x7005
   1780e:	2208      	movs	r2, #8
   17810:	9c01      	ldr	r4, [sp, #4]
   17812:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   17816:	60e3      	str	r3, [r4, #12]
   17818:	f8c4 8010 	str.w	r8, [r4, #16]
   1781c:	7260      	strb	r0, [r4, #9]
   1781e:	72a0      	strb	r0, [r4, #10]
   17820:	72e0      	strb	r0, [r4, #11]
   17822:	7222      	strb	r2, [r4, #8]
   17824:	68a3      	ldr	r3, [r4, #8]
   17826:	3304      	adds	r3, #4
   17828:	60a3      	str	r3, [r4, #8]
   1782a:	68eb      	ldr	r3, [r5, #12]
   1782c:	6872      	ldr	r2, [r6, #4]
   1782e:	4293      	cmp	r3, r2
   17830:	d108      	bne.n	17844 <ip_interface_bind+0x6c>
   17832:	2b02      	cmp	r3, #2
   17834:	f104 0018 	add.w	r0, r4, #24
   17838:	7832      	ldrb	r2, [r6, #0]
   1783a:	d03c      	beq.n	178b6 <ip_interface_bind+0xde>
   1783c:	2b0a      	cmp	r3, #10
   1783e:	d101      	bne.n	17844 <ip_interface_bind+0x6c>
   17840:	2a24      	cmp	r2, #36	; 0x24
   17842:	d00e      	beq.n	17862 <ip_interface_bind+0x8a>
   17844:	2416      	movs	r4, #22
   17846:	4620      	mov	r0, r4
   17848:	f7f9 fde2 	bl	11410 <bsd_os_errno_set>
   1784c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17850:	4620      	mov	r0, r4
   17852:	b002      	add	sp, #8
   17854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17858:	9c01      	ldr	r4, [sp, #4]
   1785a:	2c00      	cmp	r4, #0
   1785c:	d1e2      	bne.n	17824 <ip_interface_bind+0x4c>
   1785e:	240c      	movs	r4, #12
   17860:	e7f1      	b.n	17846 <ip_interface_bind+0x6e>
   17862:	2210      	movs	r2, #16
   17864:	8933      	ldrh	r3, [r6, #8]
   17866:	18b1      	adds	r1, r6, r2
   17868:	82e2      	strh	r2, [r4, #22]
   1786a:	82a3      	strh	r3, [r4, #20]
   1786c:	f005 fc1d 	bl	1d0aa <memcpy>
   17870:	68a3      	ldr	r3, [r4, #8]
   17872:	8ae2      	ldrh	r2, [r4, #22]
   17874:	f247 0105 	movw	r1, #28677	; 0x7005
   17878:	4413      	add	r3, r2
   1787a:	60a3      	str	r3, [r4, #8]
   1787c:	682b      	ldr	r3, [r5, #0]
   1787e:	4620      	mov	r0, r4
   17880:	0c1b      	lsrs	r3, r3, #16
   17882:	041b      	lsls	r3, r3, #16
   17884:	f043 0303 	orr.w	r3, r3, #3
   17888:	602b      	str	r3, [r5, #0]
   1788a:	682e      	ldr	r6, [r5, #0]
   1788c:	f7fb feb2 	bl	135f4 <rpc_ip_client_request_send>
   17890:	4680      	mov	r8, r0
   17892:	b9d8      	cbnz	r0, 178cc <ip_interface_bind+0xf4>
   17894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17898:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1789c:	2104      	movs	r1, #4
   1789e:	4638      	mov	r0, r7
   178a0:	f000 fec8 	bl	18634 <interface_socket_wait>
   178a4:	4604      	mov	r4, r0
   178a6:	b308      	cbz	r0, 178ec <ip_interface_bind+0x114>
   178a8:	682b      	ldr	r3, [r5, #0]
   178aa:	0c1b      	lsrs	r3, r3, #16
   178ac:	041b      	lsls	r3, r3, #16
   178ae:	f043 0302 	orr.w	r3, r3, #2
   178b2:	602b      	str	r3, [r5, #0]
   178b4:	e7c7      	b.n	17846 <ip_interface_bind+0x6e>
   178b6:	2a10      	cmp	r2, #16
   178b8:	d1c4      	bne.n	17844 <ip_interface_bind+0x6c>
   178ba:	2204      	movs	r2, #4
   178bc:	8933      	ldrh	r3, [r6, #8]
   178be:	f106 010c 	add.w	r1, r6, #12
   178c2:	82e2      	strh	r2, [r4, #22]
   178c4:	82a3      	strh	r3, [r4, #20]
   178c6:	f005 fbf0 	bl	1d0aa <memcpy>
   178ca:	e7d1      	b.n	17870 <ip_interface_bind+0x98>
   178cc:	6820      	ldr	r0, [r4, #0]
   178ce:	b108      	cbz	r0, 178d4 <ip_interface_bind+0xfc>
   178d0:	f7fb feae 	bl	13630 <rpc_ip_client_data_free>
   178d4:	0c36      	lsrs	r6, r6, #16
   178d6:	0436      	lsls	r6, r6, #16
   178d8:	4620      	mov	r0, r4
   178da:	f046 0602 	orr.w	r6, r6, #2
   178de:	f7fb fe9f 	bl	13620 <rpc_ip_client_message_free>
   178e2:	2423      	movs	r4, #35	; 0x23
   178e4:	602e      	str	r6, [r5, #0]
   178e6:	e7ae      	b.n	17846 <ip_interface_bind+0x6e>
   178e8:	2409      	movs	r4, #9
   178ea:	e7ac      	b.n	17846 <ip_interface_bind+0x6e>
   178ec:	4638      	mov	r0, r7
   178ee:	f000 ff0d 	bl	1870c <interface_socket_from_handle_get>
   178f2:	2800      	cmp	r0, #0
   178f4:	d0ac      	beq.n	17850 <ip_interface_bind+0x78>
   178f6:	6844      	ldr	r4, [r0, #4]
   178f8:	2c00      	cmp	r4, #0
   178fa:	d0a9      	beq.n	17850 <ip_interface_bind+0x78>
   178fc:	f8c0 8004 	str.w	r8, [r0, #4]
   17900:	e7d2      	b.n	178a8 <ip_interface_bind+0xd0>
   17902:	bf00      	nop

00017904 <ip_interface_listen>:
   17904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17908:	b082      	sub	sp, #8
   1790a:	4606      	mov	r6, r0
   1790c:	f000 fefe 	bl	1870c <interface_socket_from_handle_get>
   17910:	2800      	cmp	r0, #0
   17912:	d067      	beq.n	179e4 <ip_interface_listen+0xe0>
   17914:	6803      	ldr	r3, [r0, #0]
   17916:	4605      	mov	r5, r0
   17918:	b29b      	uxth	r3, r3
   1791a:	2b04      	cmp	r3, #4
   1791c:	d162      	bne.n	179e4 <ip_interface_listen+0xe0>
   1791e:	2100      	movs	r1, #0
   17920:	4a32      	ldr	r2, [pc, #200]	; (179ec <ip_interface_listen+0xe8>)
   17922:	4630      	mov	r0, r6
   17924:	f000 fe4e 	bl	185c4 <interface_socket_packet_handler_update>
   17928:	4601      	mov	r1, r0
   1792a:	2800      	cmp	r0, #0
   1792c:	d15c      	bne.n	179e8 <ip_interface_listen+0xe4>
   1792e:	a802      	add	r0, sp, #8
   17930:	f840 1d04 	str.w	r1, [r0, #-4]!
   17934:	69af      	ldr	r7, [r5, #24]
   17936:	f7fb fe49 	bl	135cc <rpc_ip_client_request_alloc>
   1793a:	bba8      	cbnz	r0, 179a8 <ip_interface_listen+0xa4>
   1793c:	f247 0308 	movw	r3, #28680	; 0x7008
   17940:	2208      	movs	r2, #8
   17942:	9c01      	ldr	r4, [sp, #4]
   17944:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   17948:	60e3      	str	r3, [r4, #12]
   1794a:	6127      	str	r7, [r4, #16]
   1794c:	7260      	strb	r0, [r4, #9]
   1794e:	72a0      	strb	r0, [r4, #10]
   17950:	72e0      	strb	r0, [r4, #11]
   17952:	7222      	strb	r2, [r4, #8]
   17954:	68a3      	ldr	r3, [r4, #8]
   17956:	f247 0108 	movw	r1, #28680	; 0x7008
   1795a:	3304      	adds	r3, #4
   1795c:	60a3      	str	r3, [r4, #8]
   1795e:	682b      	ldr	r3, [r5, #0]
   17960:	4620      	mov	r0, r4
   17962:	0c1b      	lsrs	r3, r3, #16
   17964:	041b      	lsls	r3, r3, #16
   17966:	f043 0306 	orr.w	r3, r3, #6
   1796a:	602b      	str	r3, [r5, #0]
   1796c:	682f      	ldr	r7, [r5, #0]
   1796e:	f7fb fe41 	bl	135f4 <rpc_ip_client_request_send>
   17972:	4680      	mov	r8, r0
   17974:	b9e8      	cbnz	r0, 179b2 <ip_interface_listen+0xae>
   17976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1797a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1797e:	2107      	movs	r1, #7
   17980:	4630      	mov	r0, r6
   17982:	f000 fe57 	bl	18634 <interface_socket_wait>
   17986:	4604      	mov	r4, r0
   17988:	b308      	cbz	r0, 179ce <ip_interface_listen+0xca>
   1798a:	682b      	ldr	r3, [r5, #0]
   1798c:	0c1b      	lsrs	r3, r3, #16
   1798e:	041b      	lsls	r3, r3, #16
   17990:	f043 0304 	orr.w	r3, r3, #4
   17994:	602b      	str	r3, [r5, #0]
   17996:	4620      	mov	r0, r4
   17998:	f7f9 fd3a 	bl	11410 <bsd_os_errno_set>
   1799c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   179a0:	4620      	mov	r0, r4
   179a2:	b002      	add	sp, #8
   179a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   179a8:	9c01      	ldr	r4, [sp, #4]
   179aa:	2c00      	cmp	r4, #0
   179ac:	d1d2      	bne.n	17954 <ip_interface_listen+0x50>
   179ae:	240c      	movs	r4, #12
   179b0:	e7f1      	b.n	17996 <ip_interface_listen+0x92>
   179b2:	6820      	ldr	r0, [r4, #0]
   179b4:	b108      	cbz	r0, 179ba <ip_interface_listen+0xb6>
   179b6:	f7fb fe3b 	bl	13630 <rpc_ip_client_data_free>
   179ba:	0c3f      	lsrs	r7, r7, #16
   179bc:	043f      	lsls	r7, r7, #16
   179be:	4620      	mov	r0, r4
   179c0:	f047 0704 	orr.w	r7, r7, #4
   179c4:	f7fb fe2c 	bl	13620 <rpc_ip_client_message_free>
   179c8:	2423      	movs	r4, #35	; 0x23
   179ca:	602f      	str	r7, [r5, #0]
   179cc:	e7e3      	b.n	17996 <ip_interface_listen+0x92>
   179ce:	4630      	mov	r0, r6
   179d0:	f000 fe9c 	bl	1870c <interface_socket_from_handle_get>
   179d4:	2800      	cmp	r0, #0
   179d6:	d0e3      	beq.n	179a0 <ip_interface_listen+0x9c>
   179d8:	6844      	ldr	r4, [r0, #4]
   179da:	2c00      	cmp	r4, #0
   179dc:	d0e0      	beq.n	179a0 <ip_interface_listen+0x9c>
   179de:	f8c0 8004 	str.w	r8, [r0, #4]
   179e2:	e7d2      	b.n	1798a <ip_interface_listen+0x86>
   179e4:	2409      	movs	r4, #9
   179e6:	e7d6      	b.n	17996 <ip_interface_listen+0x92>
   179e8:	2423      	movs	r4, #35	; 0x23
   179ea:	e7d4      	b.n	17996 <ip_interface_listen+0x92>
   179ec:	00016e95 	.word	0x00016e95

000179f0 <ip_interface_accept>:
   179f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179f4:	2500      	movs	r5, #0
   179f6:	b085      	sub	sp, #20
   179f8:	460f      	mov	r7, r1
   179fa:	4690      	mov	r8, r2
   179fc:	9502      	str	r5, [sp, #8]
   179fe:	4606      	mov	r6, r0
   17a00:	f000 fe84 	bl	1870c <interface_socket_from_handle_get>
   17a04:	4604      	mov	r4, r0
   17a06:	2800      	cmp	r0, #0
   17a08:	f000 811c 	beq.w	17c44 <ip_interface_accept+0x254>
   17a0c:	6803      	ldr	r3, [r0, #0]
   17a0e:	b29b      	uxth	r3, r3
   17a10:	2b07      	cmp	r3, #7
   17a12:	d10a      	bne.n	17a2a <ip_interface_accept+0x3a>
   17a14:	6803      	ldr	r3, [r0, #0]
   17a16:	6805      	ldr	r5, [r0, #0]
   17a18:	00db      	lsls	r3, r3, #3
   17a1a:	d416      	bmi.n	17a4a <ip_interface_accept+0x5a>
   17a1c:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   17a20:	d019      	beq.n	17a56 <ip_interface_accept+0x66>
   17a22:	6805      	ldr	r5, [r0, #0]
   17a24:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   17a28:	d124      	bne.n	17a74 <ip_interface_accept+0x84>
   17a2a:	f04f 0909 	mov.w	r9, #9
   17a2e:	9b02      	ldr	r3, [sp, #8]
   17a30:	b113      	cbz	r3, 17a38 <ip_interface_accept+0x48>
   17a32:	4628      	mov	r0, r5
   17a34:	f000 fdb0 	bl	18598 <interface_socket_free>
   17a38:	4648      	mov	r0, r9
   17a3a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   17a3e:	f7f9 fce7 	bl	11410 <bsd_os_errno_set>
   17a42:	4648      	mov	r0, r9
   17a44:	b005      	add	sp, #20
   17a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a4a:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   17a4e:	d16d      	bne.n	17b2c <ip_interface_accept+0x13c>
   17a50:	f04f 0923 	mov.w	r9, #35	; 0x23
   17a54:	e7eb      	b.n	17a2e <ip_interface_accept+0x3e>
   17a56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   17a5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17a5e:	4611      	mov	r1, r2
   17a60:	4630      	mov	r0, r6
   17a62:	f000 fde7 	bl	18634 <interface_socket_wait>
   17a66:	4681      	mov	r9, r0
   17a68:	2800      	cmp	r0, #0
   17a6a:	d07e      	beq.n	17b6a <ip_interface_accept+0x17a>
   17a6c:	6825      	ldr	r5, [r4, #0]
   17a6e:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   17a72:	d0dc      	beq.n	17a2e <ip_interface_accept+0x3e>
   17a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17a78:	2300      	movs	r3, #0
   17a7a:	e9cd 0300 	strd	r0, r3, [sp]
   17a7e:	4a75      	ldr	r2, [pc, #468]	; (17c54 <ip_interface_accept+0x264>)
   17a80:	6921      	ldr	r1, [r4, #16]
   17a82:	a802      	add	r0, sp, #8
   17a84:	f000 fd32 	bl	184ec <interface_socket_allocate>
   17a88:	9b02      	ldr	r3, [sp, #8]
   17a8a:	4605      	mov	r5, r0
   17a8c:	2b00      	cmp	r3, #0
   17a8e:	f000 80dd 	beq.w	17c4c <ip_interface_accept+0x25c>
   17a92:	2100      	movs	r1, #0
   17a94:	6962      	ldr	r2, [r4, #20]
   17a96:	a804      	add	r0, sp, #16
   17a98:	615a      	str	r2, [r3, #20]
   17a9a:	68e2      	ldr	r2, [r4, #12]
   17a9c:	f840 1d04 	str.w	r1, [r0, #-4]!
   17aa0:	60da      	str	r2, [r3, #12]
   17aa2:	6922      	ldr	r2, [r4, #16]
   17aa4:	611a      	str	r2, [r3, #16]
   17aa6:	f8d4 9018 	ldr.w	r9, [r4, #24]
   17aaa:	f7fb fd8f 	bl	135cc <rpc_ip_client_request_alloc>
   17aae:	2800      	cmp	r0, #0
   17ab0:	d143      	bne.n	17b3a <ip_interface_accept+0x14a>
   17ab2:	f247 030c 	movw	r3, #28684	; 0x700c
   17ab6:	2108      	movs	r1, #8
   17ab8:	f8dd b00c 	ldr.w	fp, [sp, #12]
   17abc:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   17ac0:	f8cb 300c 	str.w	r3, [fp, #12]
   17ac4:	f8cb 9010 	str.w	r9, [fp, #16]
   17ac8:	f88b 0009 	strb.w	r0, [fp, #9]
   17acc:	f88b 000a 	strb.w	r0, [fp, #10]
   17ad0:	f88b 000b 	strb.w	r0, [fp, #11]
   17ad4:	f88b 1008 	strb.w	r1, [fp, #8]
   17ad8:	6823      	ldr	r3, [r4, #0]
   17ada:	f247 010c 	movw	r1, #28684	; 0x700c
   17ade:	0c1b      	lsrs	r3, r3, #16
   17ae0:	041b      	lsls	r3, r3, #16
   17ae2:	f043 0308 	orr.w	r3, r3, #8
   17ae6:	6023      	str	r3, [r4, #0]
   17ae8:	4658      	mov	r0, fp
   17aea:	f8d4 9000 	ldr.w	r9, [r4]
   17aee:	f7fb fd81 	bl	135f4 <rpc_ip_client_request_send>
   17af2:	4682      	mov	sl, r0
   17af4:	bb48      	cbnz	r0, 17b4a <ip_interface_accept+0x15a>
   17af6:	6822      	ldr	r2, [r4, #0]
   17af8:	9900      	ldr	r1, [sp, #0]
   17afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17afe:	400a      	ands	r2, r1
   17b00:	6022      	str	r2, [r4, #0]
   17b02:	2109      	movs	r1, #9
   17b04:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17b08:	4630      	mov	r0, r6
   17b0a:	f000 fd93 	bl	18634 <interface_socket_wait>
   17b0e:	4681      	mov	r9, r0
   17b10:	2800      	cmp	r0, #0
   17b12:	f000 8085 	beq.w	17c20 <ip_interface_accept+0x230>
   17b16:	6823      	ldr	r3, [r4, #0]
   17b18:	9a01      	ldr	r2, [sp, #4]
   17b1a:	431a      	orrs	r2, r3
   17b1c:	6022      	str	r2, [r4, #0]
   17b1e:	6823      	ldr	r3, [r4, #0]
   17b20:	0c1b      	lsrs	r3, r3, #16
   17b22:	041b      	lsls	r3, r3, #16
   17b24:	f043 0307 	orr.w	r3, r3, #7
   17b28:	6023      	str	r3, [r4, #0]
   17b2a:	e780      	b.n	17a2e <ip_interface_accept+0x3e>
   17b2c:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   17b30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   17b34:	e9cd 2300 	strd	r2, r3, [sp]
   17b38:	e7a1      	b.n	17a7e <ip_interface_accept+0x8e>
   17b3a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   17b3e:	f04f 090c 	mov.w	r9, #12
   17b42:	f1bb 0f00 	cmp.w	fp, #0
   17b46:	d1c7      	bne.n	17ad8 <ip_interface_accept+0xe8>
   17b48:	e771      	b.n	17a2e <ip_interface_accept+0x3e>
   17b4a:	f8db 0000 	ldr.w	r0, [fp]
   17b4e:	b108      	cbz	r0, 17b54 <ip_interface_accept+0x164>
   17b50:	f7fb fd6e 	bl	13630 <rpc_ip_client_data_free>
   17b54:	ea4f 4919 	mov.w	r9, r9, lsr #16
   17b58:	4658      	mov	r0, fp
   17b5a:	ea4f 4909 	mov.w	r9, r9, lsl #16
   17b5e:	f7fb fd5f 	bl	13620 <rpc_ip_client_message_free>
   17b62:	f049 0307 	orr.w	r3, r9, #7
   17b66:	6023      	str	r3, [r4, #0]
   17b68:	e772      	b.n	17a50 <ip_interface_accept+0x60>
   17b6a:	4630      	mov	r0, r6
   17b6c:	f000 fdce 	bl	1870c <interface_socket_from_handle_get>
   17b70:	b130      	cbz	r0, 17b80 <ip_interface_accept+0x190>
   17b72:	f8d0 9004 	ldr.w	r9, [r0, #4]
   17b76:	f1b9 0f00 	cmp.w	r9, #0
   17b7a:	d001      	beq.n	17b80 <ip_interface_accept+0x190>
   17b7c:	6045      	str	r5, [r0, #4]
   17b7e:	e775      	b.n	17a6c <ip_interface_accept+0x7c>
   17b80:	6823      	ldr	r3, [r4, #0]
   17b82:	03d9      	lsls	r1, r3, #15
   17b84:	f53f af76 	bmi.w	17a74 <ip_interface_accept+0x84>
   17b88:	4d33      	ldr	r5, [pc, #204]	; (17c58 <ip_interface_accept+0x268>)
   17b8a:	9902      	ldr	r1, [sp, #8]
   17b8c:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   17b90:	699b      	ldr	r3, [r3, #24]
   17b92:	618b      	str	r3, [r1, #24]
   17b94:	b147      	cbz	r7, 17ba8 <ip_interface_accept+0x1b8>
   17b96:	68cb      	ldr	r3, [r1, #12]
   17b98:	2b0a      	cmp	r3, #10
   17b9a:	d024      	beq.n	17be6 <ip_interface_accept+0x1f6>
   17b9c:	2b02      	cmp	r3, #2
   17b9e:	d103      	bne.n	17ba8 <ip_interface_accept+0x1b8>
   17ba0:	f8d8 2000 	ldr.w	r2, [r8]
   17ba4:	2a10      	cmp	r2, #16
   17ba6:	d032      	beq.n	17c0e <ip_interface_accept+0x21e>
   17ba8:	680a      	ldr	r2, [r1, #0]
   17baa:	482c      	ldr	r0, [pc, #176]	; (17c5c <ip_interface_accept+0x26c>)
   17bac:	4002      	ands	r2, r0
   17bae:	f042 0205 	orr.w	r2, r2, #5
   17bb2:	600a      	str	r2, [r1, #0]
   17bb4:	9a02      	ldr	r2, [sp, #8]
   17bb6:	6811      	ldr	r1, [r2, #0]
   17bb8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   17bbc:	6011      	str	r1, [r2, #0]
   17bbe:	6811      	ldr	r1, [r2, #0]
   17bc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17bc4:	6011      	str	r1, [r2, #0]
   17bc6:	6823      	ldr	r3, [r4, #0]
   17bc8:	4003      	ands	r3, r0
   17bca:	f043 0307 	orr.w	r3, r3, #7
   17bce:	6023      	str	r3, [r4, #0]
   17bd0:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   17bd4:	f7fb fd24 	bl	13620 <rpc_ip_client_message_free>
   17bd8:	2300      	movs	r3, #0
   17bda:	4648      	mov	r0, r9
   17bdc:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   17be0:	b005      	add	sp, #20
   17be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17be6:	f8d8 2000 	ldr.w	r2, [r8]
   17bea:	2a24      	cmp	r2, #36	; 0x24
   17bec:	d1dc      	bne.n	17ba8 <ip_interface_accept+0x1b8>
   17bee:	703a      	strb	r2, [r7, #0]
   17bf0:	2210      	movs	r2, #16
   17bf2:	607b      	str	r3, [r7, #4]
   17bf4:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   17bf8:	f107 0010 	add.w	r0, r7, #16
   17bfc:	8b9b      	ldrh	r3, [r3, #28]
   17bfe:	813b      	strh	r3, [r7, #8]
   17c00:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   17c04:	3120      	adds	r1, #32
   17c06:	f005 fa50 	bl	1d0aa <memcpy>
   17c0a:	9902      	ldr	r1, [sp, #8]
   17c0c:	e7cc      	b.n	17ba8 <ip_interface_accept+0x1b8>
   17c0e:	703a      	strb	r2, [r7, #0]
   17c10:	607b      	str	r3, [r7, #4]
   17c12:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   17c16:	f107 000c 	add.w	r0, r7, #12
   17c1a:	8b9b      	ldrh	r3, [r3, #28]
   17c1c:	2204      	movs	r2, #4
   17c1e:	e7ee      	b.n	17bfe <ip_interface_accept+0x20e>
   17c20:	4630      	mov	r0, r6
   17c22:	f000 fd73 	bl	1870c <interface_socket_from_handle_get>
   17c26:	b138      	cbz	r0, 17c38 <ip_interface_accept+0x248>
   17c28:	f8d0 9004 	ldr.w	r9, [r0, #4]
   17c2c:	f1b9 0f00 	cmp.w	r9, #0
   17c30:	d002      	beq.n	17c38 <ip_interface_accept+0x248>
   17c32:	f8c0 a004 	str.w	sl, [r0, #4]
   17c36:	e76e      	b.n	17b16 <ip_interface_accept+0x126>
   17c38:	6823      	ldr	r3, [r4, #0]
   17c3a:	9a01      	ldr	r2, [sp, #4]
   17c3c:	46a9      	mov	r9, r5
   17c3e:	4313      	orrs	r3, r2
   17c40:	6023      	str	r3, [r4, #0]
   17c42:	e7a1      	b.n	17b88 <ip_interface_accept+0x198>
   17c44:	4605      	mov	r5, r0
   17c46:	f04f 0909 	mov.w	r9, #9
   17c4a:	e6f0      	b.n	17a2e <ip_interface_accept+0x3e>
   17c4c:	f04f 090c 	mov.w	r9, #12
   17c50:	e6f2      	b.n	17a38 <ip_interface_accept+0x48>
   17c52:	bf00      	nop
   17c54:	00016e95 	.word	0x00016e95
   17c58:	20020934 	.word	0x20020934
   17c5c:	ffff0000 	.word	0xffff0000

00017c60 <ip_interface_setopt>:
   17c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17c64:	2901      	cmp	r1, #1
   17c66:	b084      	sub	sp, #16
   17c68:	f040 809c 	bne.w	17da4 <ip_interface_setopt+0x144>
   17c6c:	460e      	mov	r6, r1
   17c6e:	4690      	mov	r8, r2
   17c70:	461d      	mov	r5, r3
   17c72:	4607      	mov	r7, r0
   17c74:	f000 fd4a 	bl	1870c <interface_socket_from_handle_get>
   17c78:	4604      	mov	r4, r0
   17c7a:	2800      	cmp	r0, #0
   17c7c:	f000 80a5 	beq.w	17dca <ip_interface_setopt+0x16a>
   17c80:	f1b8 0f19 	cmp.w	r8, #25
   17c84:	d16e      	bne.n	17d64 <ip_interface_setopt+0x104>
   17c86:	2d00      	cmp	r5, #0
   17c88:	f000 8092 	beq.w	17db0 <ip_interface_setopt+0x150>
   17c8c:	4628      	mov	r0, r5
   17c8e:	f005 f9d1 	bl	1d034 <strlen>
   17c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17c94:	4298      	cmp	r0, r3
   17c96:	f040 808b 	bne.w	17db0 <ip_interface_setopt+0x150>
   17c9a:	6823      	ldr	r3, [r4, #0]
   17c9c:	b29b      	uxth	r3, r3
   17c9e:	2b02      	cmp	r3, #2
   17ca0:	d173      	bne.n	17d8a <ip_interface_setopt+0x12a>
   17ca2:	4629      	mov	r1, r5
   17ca4:	68e0      	ldr	r0, [r4, #12]
   17ca6:	f7fe fb91 	bl	163cc <pdn_interface_pdn_id_get>
   17caa:	9002      	str	r0, [sp, #8]
   17cac:	3001      	adds	r0, #1
   17cae:	bf08      	it	eq
   17cb0:	2516      	moveq	r5, #22
   17cb2:	d04e      	beq.n	17d52 <ip_interface_setopt+0xf2>
   17cb4:	6823      	ldr	r3, [r4, #0]
   17cb6:	025b      	lsls	r3, r3, #9
   17cb8:	d44a      	bmi.n	17d50 <ip_interface_setopt+0xf0>
   17cba:	6823      	ldr	r3, [r4, #0]
   17cbc:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
   17cc0:	d146      	bne.n	17d50 <ip_interface_setopt+0xf0>
   17cc2:	6826      	ldr	r6, [r4, #0]
   17cc4:	6822      	ldr	r2, [r4, #0]
   17cc6:	a804      	add	r0, sp, #16
   17cc8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   17ccc:	6022      	str	r2, [r4, #0]
   17cce:	2104      	movs	r1, #4
   17cd0:	f840 3d04 	str.w	r3, [r0, #-4]!
   17cd4:	f8d4 8018 	ldr.w	r8, [r4, #24]
   17cd8:	f7fb fc78 	bl	135cc <rpc_ip_client_request_alloc>
   17cdc:	2800      	cmp	r0, #0
   17cde:	d14e      	bne.n	17d7e <ip_interface_setopt+0x11e>
   17ce0:	f247 0203 	movw	r2, #28675	; 0x7003
   17ce4:	2300      	movs	r3, #0
   17ce6:	2108      	movs	r1, #8
   17ce8:	9d03      	ldr	r5, [sp, #12]
   17cea:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   17cee:	60ea      	str	r2, [r5, #12]
   17cf0:	f8c5 8010 	str.w	r8, [r5, #16]
   17cf4:	7229      	strb	r1, [r5, #8]
   17cf6:	726b      	strb	r3, [r5, #9]
   17cf8:	72ab      	strb	r3, [r5, #10]
   17cfa:	72eb      	strb	r3, [r5, #11]
   17cfc:	f04f 0c08 	mov.w	ip, #8
   17d00:	2300      	movs	r3, #0
   17d02:	2010      	movs	r0, #16
   17d04:	2130      	movs	r1, #48	; 0x30
   17d06:	68aa      	ldr	r2, [r5, #8]
   17d08:	756b      	strb	r3, [r5, #21]
   17d0a:	4462      	add	r2, ip
   17d0c:	60aa      	str	r2, [r5, #8]
   17d0e:	75ab      	strb	r3, [r5, #22]
   17d10:	75eb      	strb	r3, [r5, #23]
   17d12:	76ab      	strb	r3, [r5, #26]
   17d14:	76eb      	strb	r3, [r5, #27]
   17d16:	f885 c014 	strb.w	ip, [r5, #20]
   17d1a:	7628      	strb	r0, [r5, #24]
   17d1c:	7669      	strb	r1, [r5, #25]
   17d1e:	2204      	movs	r2, #4
   17d20:	eb0d 010c 	add.w	r1, sp, ip
   17d24:	6828      	ldr	r0, [r5, #0]
   17d26:	f005 f9c0 	bl	1d0aa <memcpy>
   17d2a:	f247 0103 	movw	r1, #28675	; 0x7003
   17d2e:	4628      	mov	r0, r5
   17d30:	f7fb fc60 	bl	135f4 <rpc_ip_client_request_send>
   17d34:	4680      	mov	r8, r0
   17d36:	bb50      	cbnz	r0, 17d8e <ip_interface_setopt+0x12e>
   17d38:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   17d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17d40:	4611      	mov	r1, r2
   17d42:	4638      	mov	r0, r7
   17d44:	f000 fc76 	bl	18634 <interface_socket_wait>
   17d48:	4605      	mov	r5, r0
   17d4a:	b398      	cbz	r0, 17db4 <ip_interface_setopt+0x154>
   17d4c:	6026      	str	r6, [r4, #0]
   17d4e:	e000      	b.n	17d52 <ip_interface_setopt+0xf2>
   17d50:	2523      	movs	r5, #35	; 0x23
   17d52:	4628      	mov	r0, r5
   17d54:	f7f9 fb5c 	bl	11410 <bsd_os_errno_set>
   17d58:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   17d5c:	4628      	mov	r0, r5
   17d5e:	b004      	add	sp, #16
   17d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17d66:	4642      	mov	r2, r8
   17d68:	9300      	str	r3, [sp, #0]
   17d6a:	4631      	mov	r1, r6
   17d6c:	462b      	mov	r3, r5
   17d6e:	4638      	mov	r0, r7
   17d70:	f000 fcf4 	bl	1875c <interface_socket_setopt>
   17d74:	4605      	mov	r5, r0
   17d76:	4628      	mov	r0, r5
   17d78:	b004      	add	sp, #16
   17d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17d7e:	9d03      	ldr	r5, [sp, #12]
   17d80:	2d00      	cmp	r5, #0
   17d82:	d1bb      	bne.n	17cfc <ip_interface_setopt+0x9c>
   17d84:	6026      	str	r6, [r4, #0]
   17d86:	250c      	movs	r5, #12
   17d88:	e7e3      	b.n	17d52 <ip_interface_setopt+0xf2>
   17d8a:	2509      	movs	r5, #9
   17d8c:	e7e1      	b.n	17d52 <ip_interface_setopt+0xf2>
   17d8e:	6828      	ldr	r0, [r5, #0]
   17d90:	b108      	cbz	r0, 17d96 <ip_interface_setopt+0x136>
   17d92:	f7fb fc4d 	bl	13630 <rpc_ip_client_data_free>
   17d96:	4628      	mov	r0, r5
   17d98:	f7fb fc42 	bl	13620 <rpc_ip_client_message_free>
   17d9c:	2523      	movs	r5, #35	; 0x23
   17d9e:	6026      	str	r6, [r4, #0]
   17da0:	6026      	str	r6, [r4, #0]
   17da2:	e7d6      	b.n	17d52 <ip_interface_setopt+0xf2>
   17da4:	202a      	movs	r0, #42	; 0x2a
   17da6:	f7f9 fb33 	bl	11410 <bsd_os_errno_set>
   17daa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   17dae:	e7d5      	b.n	17d5c <ip_interface_setopt+0xfc>
   17db0:	250e      	movs	r5, #14
   17db2:	e7ce      	b.n	17d52 <ip_interface_setopt+0xf2>
   17db4:	4638      	mov	r0, r7
   17db6:	f000 fca9 	bl	1870c <interface_socket_from_handle_get>
   17dba:	b120      	cbz	r0, 17dc6 <ip_interface_setopt+0x166>
   17dbc:	6845      	ldr	r5, [r0, #4]
   17dbe:	b115      	cbz	r5, 17dc6 <ip_interface_setopt+0x166>
   17dc0:	f8c0 8004 	str.w	r8, [r0, #4]
   17dc4:	e7c2      	b.n	17d4c <ip_interface_setopt+0xec>
   17dc6:	6026      	str	r6, [r4, #0]
   17dc8:	e7c8      	b.n	17d5c <ip_interface_setopt+0xfc>
   17dca:	2009      	movs	r0, #9
   17dcc:	f7f9 fb20 	bl	11410 <bsd_os_errno_set>
   17dd0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   17dd4:	e7c2      	b.n	17d5c <ip_interface_setopt+0xfc>
   17dd6:	bf00      	nop

00017dd8 <ip_interface_getopt>:
   17dd8:	f000 bcf6 	b.w	187c8 <interface_socket_getopt>

00017ddc <ip_interface_getaddrinfo>:
   17ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17de0:	f04f 0c00 	mov.w	ip, #0
   17de4:	2401      	movs	r4, #1
   17de6:	4e72      	ldr	r6, [pc, #456]	; (17fb0 <ip_interface_getaddrinfo+0x1d4>)
   17de8:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 17fbc <ip_interface_getaddrinfo+0x1e0>
   17dec:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 17fc0 <ip_interface_getaddrinfo+0x1e4>
   17df0:	b085      	sub	sp, #20
   17df2:	4607      	mov	r7, r0
   17df4:	4615      	mov	r5, r2
   17df6:	9301      	str	r3, [sp, #4]
   17df8:	f8a6 c000 	strh.w	ip, [r6]
   17dfc:	f8ca 4000 	str.w	r4, [sl]
   17e00:	f8c9 4000 	str.w	r4, [r9]
   17e04:	b171      	cbz	r1, 17e24 <ip_interface_getaddrinfo+0x48>
   17e06:	4608      	mov	r0, r1
   17e08:	220a      	movs	r2, #10
   17e0a:	4661      	mov	r1, ip
   17e0c:	f004 ffce 	bl	1cdac <strtol>
   17e10:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   17e14:	1e42      	subs	r2, r0, #1
   17e16:	429a      	cmp	r2, r3
   17e18:	f200 8083 	bhi.w	17f22 <ip_interface_getaddrinfo+0x146>
   17e1c:	0203      	lsls	r3, r0, #8
   17e1e:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   17e22:	8030      	strh	r0, [r6, #0]
   17e24:	f8df 819c 	ldr.w	r8, [pc, #412]	; 17fc4 <ip_interface_getaddrinfo+0x1e8>
   17e28:	f8d8 3000 	ldr.w	r3, [r8]
   17e2c:	2b00      	cmp	r3, #0
   17e2e:	d174      	bne.n	17f1a <ip_interface_getaddrinfo+0x13e>
   17e30:	4a60      	ldr	r2, [pc, #384]	; (17fb4 <ip_interface_getaddrinfo+0x1d8>)
   17e32:	6013      	str	r3, [r2, #0]
   17e34:	4a60      	ldr	r2, [pc, #384]	; (17fb8 <ip_interface_getaddrinfo+0x1dc>)
   17e36:	6013      	str	r3, [r2, #0]
   17e38:	2f00      	cmp	r7, #0
   17e3a:	d062      	beq.n	17f02 <ip_interface_getaddrinfo+0x126>
   17e3c:	4638      	mov	r0, r7
   17e3e:	f005 f8f9 	bl	1d034 <strlen>
   17e42:	4683      	mov	fp, r0
   17e44:	b125      	cbz	r5, 17e50 <ip_interface_getaddrinfo+0x74>
   17e46:	69ea      	ldr	r2, [r5, #28]
   17e48:	b112      	cbz	r2, 17e50 <ip_interface_getaddrinfo+0x74>
   17e4a:	6851      	ldr	r1, [r2, #4]
   17e4c:	2966      	cmp	r1, #102	; 0x66
   17e4e:	d06c      	beq.n	17f2a <ip_interface_getaddrinfo+0x14e>
   17e50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17e54:	2100      	movs	r1, #0
   17e56:	ae04      	add	r6, sp, #16
   17e58:	f846 1d04 	str.w	r1, [r6, #-4]!
   17e5c:	4630      	mov	r0, r6
   17e5e:	4659      	mov	r1, fp
   17e60:	9200      	str	r2, [sp, #0]
   17e62:	f7fb fbb3 	bl	135cc <rpc_ip_client_request_alloc>
   17e66:	9a00      	ldr	r2, [sp, #0]
   17e68:	2800      	cmp	r0, #0
   17e6a:	d14c      	bne.n	17f06 <ip_interface_getaddrinfo+0x12a>
   17e6c:	f247 010d 	movw	r1, #28685	; 0x700d
   17e70:	f04f 0c08 	mov.w	ip, #8
   17e74:	9c03      	ldr	r4, [sp, #12]
   17e76:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   17e7a:	60e1      	str	r1, [r4, #12]
   17e7c:	6122      	str	r2, [r4, #16]
   17e7e:	7260      	strb	r0, [r4, #9]
   17e80:	72a0      	strb	r0, [r4, #10]
   17e82:	72e0      	strb	r0, [r4, #11]
   17e84:	f884 c008 	strb.w	ip, [r4, #8]
   17e88:	2d00      	cmp	r5, #0
   17e8a:	d076      	beq.n	17f7a <ip_interface_getaddrinfo+0x19e>
   17e8c:	686a      	ldr	r2, [r5, #4]
   17e8e:	f022 0108 	bic.w	r1, r2, #8
   17e92:	2902      	cmp	r1, #2
   17e94:	d05c      	beq.n	17f50 <ip_interface_getaddrinfo+0x174>
   17e96:	2a05      	cmp	r2, #5
   17e98:	d178      	bne.n	17f8c <ip_interface_getaddrinfo+0x1b0>
   17e9a:	68a9      	ldr	r1, [r5, #8]
   17e9c:	2902      	cmp	r1, #2
   17e9e:	f8c9 1000 	str.w	r1, [r9]
   17ea2:	d061      	beq.n	17f68 <ip_interface_getaddrinfo+0x18c>
   17ea4:	61a2      	str	r2, [r4, #24]
   17ea6:	68ea      	ldr	r2, [r5, #12]
   17ea8:	6222      	str	r2, [r4, #32]
   17eaa:	68aa      	ldr	r2, [r5, #8]
   17eac:	61e2      	str	r2, [r4, #28]
   17eae:	682a      	ldr	r2, [r5, #0]
   17eb0:	6162      	str	r2, [r4, #20]
   17eb2:	68a2      	ldr	r2, [r4, #8]
   17eb4:	3210      	adds	r2, #16
   17eb6:	60a2      	str	r2, [r4, #8]
   17eb8:	b12f      	cbz	r7, 17ec6 <ip_interface_getaddrinfo+0xea>
   17eba:	6820      	ldr	r0, [r4, #0]
   17ebc:	b118      	cbz	r0, 17ec6 <ip_interface_getaddrinfo+0xea>
   17ebe:	465a      	mov	r2, fp
   17ec0:	4639      	mov	r1, r7
   17ec2:	f005 f8f2 	bl	1d0aa <memcpy>
   17ec6:	2301      	movs	r3, #1
   17ec8:	f247 010d 	movw	r1, #28685	; 0x700d
   17ecc:	4620      	mov	r0, r4
   17ece:	f8c8 3000 	str.w	r3, [r8]
   17ed2:	f7fb fb8f 	bl	135f4 <rpc_ip_client_request_send>
   17ed6:	2800      	cmp	r0, #0
   17ed8:	d156      	bne.n	17f88 <ip_interface_getaddrinfo+0x1ac>
   17eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17ede:	9303      	str	r3, [sp, #12]
   17ee0:	4631      	mov	r1, r6
   17ee2:	4620      	mov	r0, r4
   17ee4:	f7f9 fa00 	bl	112e8 <bsd_os_timedwait>
   17ee8:	f8d8 3000 	ldr.w	r3, [r8]
   17eec:	2b01      	cmp	r3, #1
   17eee:	d0f7      	beq.n	17ee0 <ip_interface_getaddrinfo+0x104>
   17ef0:	4b31      	ldr	r3, [pc, #196]	; (17fb8 <ip_interface_getaddrinfo+0x1dc>)
   17ef2:	6818      	ldr	r0, [r3, #0]
   17ef4:	2800      	cmp	r0, #0
   17ef6:	d13b      	bne.n	17f70 <ip_interface_getaddrinfo+0x194>
   17ef8:	4b2e      	ldr	r3, [pc, #184]	; (17fb4 <ip_interface_getaddrinfo+0x1d8>)
   17efa:	9a01      	ldr	r2, [sp, #4]
   17efc:	681b      	ldr	r3, [r3, #0]
   17efe:	6013      	str	r3, [r2, #0]
   17f00:	e00c      	b.n	17f1c <ip_interface_getaddrinfo+0x140>
   17f02:	46bb      	mov	fp, r7
   17f04:	e79e      	b.n	17e44 <ip_interface_getaddrinfo+0x68>
   17f06:	9c03      	ldr	r4, [sp, #12]
   17f08:	2c00      	cmp	r4, #0
   17f0a:	d1bd      	bne.n	17e88 <ip_interface_getaddrinfo+0xac>
   17f0c:	200c      	movs	r0, #12
   17f0e:	2300      	movs	r3, #0
   17f10:	f8c8 3000 	str.w	r3, [r8]
   17f14:	b005      	add	sp, #20
   17f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f1a:	2073      	movs	r0, #115	; 0x73
   17f1c:	b005      	add	sp, #20
   17f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f22:	2016      	movs	r0, #22
   17f24:	b005      	add	sp, #20
   17f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f2a:	6891      	ldr	r1, [r2, #8]
   17f2c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   17f30:	d18e      	bne.n	17e50 <ip_interface_getaddrinfo+0x74>
   17f32:	f240 2102 	movw	r1, #514	; 0x202
   17f36:	68d0      	ldr	r0, [r2, #12]
   17f38:	4288      	cmp	r0, r1
   17f3a:	d189      	bne.n	17e50 <ip_interface_getaddrinfo+0x74>
   17f3c:	6991      	ldr	r1, [r2, #24]
   17f3e:	2900      	cmp	r1, #0
   17f40:	d086      	beq.n	17e50 <ip_interface_getaddrinfo+0x74>
   17f42:	6868      	ldr	r0, [r5, #4]
   17f44:	f7fe fa42 	bl	163cc <pdn_interface_pdn_id_get>
   17f48:	1c43      	adds	r3, r0, #1
   17f4a:	d081      	beq.n	17e50 <ip_interface_getaddrinfo+0x74>
   17f4c:	4602      	mov	r2, r0
   17f4e:	e781      	b.n	17e54 <ip_interface_getaddrinfo+0x78>
   17f50:	68a9      	ldr	r1, [r5, #8]
   17f52:	2902      	cmp	r1, #2
   17f54:	f8c9 1000 	str.w	r1, [r9]
   17f58:	d006      	beq.n	17f68 <ip_interface_getaddrinfo+0x18c>
   17f5a:	2a05      	cmp	r2, #5
   17f5c:	d0a2      	beq.n	17ea4 <ip_interface_getaddrinfo+0xc8>
   17f5e:	2a0a      	cmp	r2, #10
   17f60:	bf14      	ite	ne
   17f62:	2201      	movne	r2, #1
   17f64:	2202      	moveq	r2, #2
   17f66:	e79d      	b.n	17ea4 <ip_interface_getaddrinfo+0xc8>
   17f68:	2102      	movs	r1, #2
   17f6a:	f8ca 1000 	str.w	r1, [sl]
   17f6e:	e7f4      	b.n	17f5a <ip_interface_getaddrinfo+0x17e>
   17f70:	4b11      	ldr	r3, [pc, #68]	; (17fb8 <ip_interface_getaddrinfo+0x1dc>)
   17f72:	6818      	ldr	r0, [r3, #0]
   17f74:	2800      	cmp	r0, #0
   17f76:	d0d1      	beq.n	17f1c <ip_interface_getaddrinfo+0x140>
   17f78:	e7c9      	b.n	17f0e <ip_interface_getaddrinfo+0x132>
   17f7a:	4629      	mov	r1, r5
   17f7c:	2210      	movs	r2, #16
   17f7e:	f104 0014 	add.w	r0, r4, #20
   17f82:	f005 f8bc 	bl	1d0fe <memset>
   17f86:	e794      	b.n	17eb2 <ip_interface_getaddrinfo+0xd6>
   17f88:	2023      	movs	r0, #35	; 0x23
   17f8a:	e7c0      	b.n	17f0e <ip_interface_getaddrinfo+0x132>
   17f8c:	202f      	movs	r0, #47	; 0x2f
   17f8e:	f7f9 fa3f 	bl	11410 <bsd_os_errno_set>
   17f92:	68a2      	ldr	r2, [r4, #8]
   17f94:	3210      	adds	r2, #16
   17f96:	60a2      	str	r2, [r4, #8]
   17f98:	b917      	cbnz	r7, 17fa0 <ip_interface_getaddrinfo+0x1c4>
   17f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17f9e:	e7b6      	b.n	17f0e <ip_interface_getaddrinfo+0x132>
   17fa0:	6820      	ldr	r0, [r4, #0]
   17fa2:	2800      	cmp	r0, #0
   17fa4:	d0f9      	beq.n	17f9a <ip_interface_getaddrinfo+0x1be>
   17fa6:	465a      	mov	r2, fp
   17fa8:	4639      	mov	r1, r7
   17faa:	f005 f87e 	bl	1d0aa <memcpy>
   17fae:	e7f4      	b.n	17f9a <ip_interface_getaddrinfo+0x1be>
   17fb0:	20024e22 	.word	0x20024e22
   17fb4:	2002092c 	.word	0x2002092c
   17fb8:	20020924 	.word	0x20020924
   17fbc:	2002091c 	.word	0x2002091c
   17fc0:	20020920 	.word	0x20020920
   17fc4:	20020928 	.word	0x20020928

00017fc8 <ip_interface_freeaddrinfo>:
   17fc8:	b538      	push	{r3, r4, r5, lr}
   17fca:	4c0b      	ldr	r4, [pc, #44]	; (17ff8 <ip_interface_freeaddrinfo+0x30>)
   17fcc:	6823      	ldr	r3, [r4, #0]
   17fce:	2b02      	cmp	r3, #2
   17fd0:	d000      	beq.n	17fd4 <ip_interface_freeaddrinfo+0xc>
   17fd2:	bd38      	pop	{r3, r4, r5, pc}
   17fd4:	b130      	cbz	r0, 17fe4 <ip_interface_freeaddrinfo+0x1c>
   17fd6:	4605      	mov	r5, r0
   17fd8:	6940      	ldr	r0, [r0, #20]
   17fda:	f7fb fac9 	bl	13570 <nrf_free>
   17fde:	4628      	mov	r0, r5
   17fe0:	f7fb fac6 	bl	13570 <nrf_free>
   17fe4:	2300      	movs	r3, #0
   17fe6:	4a05      	ldr	r2, [pc, #20]	; (17ffc <ip_interface_freeaddrinfo+0x34>)
   17fe8:	4905      	ldr	r1, [pc, #20]	; (18000 <ip_interface_freeaddrinfo+0x38>)
   17fea:	6023      	str	r3, [r4, #0]
   17fec:	6013      	str	r3, [r2, #0]
   17fee:	6808      	ldr	r0, [r1, #0]
   17ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17ff4:	f7fb bb1c 	b.w	13630 <rpc_ip_client_data_free>
   17ff8:	20020928 	.word	0x20020928
   17ffc:	20020924 	.word	0x20020924
   18000:	20020930 	.word	0x20020930

00018004 <rpc_ip_event_handler>:
   18004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18008:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   1800c:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   18010:	4605      	mov	r5, r0
   18012:	b089      	sub	sp, #36	; 0x24
   18014:	460e      	mov	r6, r1
   18016:	68c0      	ldr	r0, [r0, #12]
   18018:	d05e      	beq.n	180d8 <rpc_ip_event_handler+0xd4>
   1801a:	0c04      	lsrs	r4, r0, #16
   1801c:	4620      	mov	r0, r4
   1801e:	f000 fb75 	bl	1870c <interface_socket_from_handle_get>
   18022:	f248 030d 	movw	r3, #32781	; 0x800d
   18026:	429e      	cmp	r6, r3
   18028:	4607      	mov	r7, r0
   1802a:	46a0      	mov	r8, r4
   1802c:	d041      	beq.n	180b2 <rpc_ip_event_handler+0xae>
   1802e:	2f00      	cmp	r7, #0
   18030:	d04e      	beq.n	180d0 <rpc_ip_event_handler+0xcc>
   18032:	4640      	mov	r0, r8
   18034:	4633      	mov	r3, r6
   18036:	462a      	mov	r2, r5
   18038:	4639      	mov	r1, r7
   1803a:	f7fb fead 	bl	13d98 <tls_rpc_ip_event_handler>
   1803e:	2800      	cmp	r0, #0
   18040:	d042      	beq.n	180c8 <rpc_ip_event_handler+0xc4>
   18042:	f248 0307 	movw	r3, #32775	; 0x8007
   18046:	429e      	cmp	r6, r3
   18048:	d961      	bls.n	1810e <rpc_ip_event_handler+0x10a>
   1804a:	f248 030c 	movw	r3, #32780	; 0x800c
   1804e:	429e      	cmp	r6, r3
   18050:	f000 816b 	beq.w	1832a <rpc_ip_event_handler+0x326>
   18054:	f240 8106 	bls.w	18264 <rpc_ip_event_handler+0x260>
   18058:	f249 0302 	movw	r3, #36866	; 0x9002
   1805c:	429e      	cmp	r6, r3
   1805e:	f000 808c 	beq.w	1817a <rpc_ip_event_handler+0x176>
   18062:	f249 0303 	movw	r3, #36867	; 0x9003
   18066:	429e      	cmp	r6, r3
   18068:	f000 8180 	beq.w	1836c <rpc_ip_event_handler+0x368>
   1806c:	f249 0301 	movw	r3, #36865	; 0x9001
   18070:	429e      	cmp	r6, r3
   18072:	d12d      	bne.n	180d0 <rpc_ip_event_handler+0xcc>
   18074:	683c      	ldr	r4, [r7, #0]
   18076:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   1807a:	f000 81c3 	beq.w	18404 <rpc_ip_event_handler+0x400>
   1807e:	68ab      	ldr	r3, [r5, #8]
   18080:	2b04      	cmp	r3, #4
   18082:	f200 81eb 	bhi.w	1845c <rpc_ip_event_handler+0x458>
   18086:	2400      	movs	r4, #0
   18088:	4626      	mov	r6, r4
   1808a:	6829      	ldr	r1, [r5, #0]
   1808c:	686a      	ldr	r2, [r5, #4]
   1808e:	e9cd 6406 	strd	r6, r4, [sp, #24]
   18092:	e9cd 1204 	strd	r1, r2, [sp, #16]
   18096:	69f8      	ldr	r0, [r7, #28]
   18098:	a904      	add	r1, sp, #16
   1809a:	6803      	ldr	r3, [r0, #0]
   1809c:	685b      	ldr	r3, [r3, #4]
   1809e:	4798      	blx	r3
   180a0:	3001      	adds	r0, #1
   180a2:	f000 81cc 	beq.w	1843e <rpc_ip_event_handler+0x43a>
   180a6:	683b      	ldr	r3, [r7, #0]
   180a8:	2000      	movs	r0, #0
   180aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   180ae:	603b      	str	r3, [r7, #0]
   180b0:	e00b      	b.n	180ca <rpc_ip_event_handler+0xc6>
   180b2:	f8df 9344 	ldr.w	r9, [pc, #836]	; 183f8 <rpc_ip_event_handler+0x3f4>
   180b6:	682f      	ldr	r7, [r5, #0]
   180b8:	f8d9 3000 	ldr.w	r3, [r9]
   180bc:	2b01      	cmp	r3, #1
   180be:	d015      	beq.n	180ec <rpc_ip_event_handler+0xe8>
   180c0:	b117      	cbz	r7, 180c8 <rpc_ip_event_handler+0xc4>
   180c2:	4638      	mov	r0, r7
   180c4:	f7fb fab4 	bl	13630 <rpc_ip_client_data_free>
   180c8:	2000      	movs	r0, #0
   180ca:	b009      	add	sp, #36	; 0x24
   180cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180d0:	6828      	ldr	r0, [r5, #0]
   180d2:	2800      	cmp	r0, #0
   180d4:	d1f6      	bne.n	180c4 <rpc_ip_event_handler+0xc0>
   180d6:	e7f7      	b.n	180c8 <rpc_ip_event_handler+0xc4>
   180d8:	f000 face 	bl	18678 <interface_from_internal_id_search>
   180dc:	4680      	mov	r8, r0
   180de:	f000 fb15 	bl	1870c <interface_socket_from_handle_get>
   180e2:	4607      	mov	r7, r0
   180e4:	4644      	mov	r4, r8
   180e6:	2f00      	cmp	r7, #0
   180e8:	d1a3      	bne.n	18032 <rpc_ip_event_handler+0x2e>
   180ea:	e7f1      	b.n	180d0 <rpc_ip_event_handler+0xcc>
   180ec:	696b      	ldr	r3, [r5, #20]
   180ee:	2b00      	cmp	r3, #0
   180f0:	d048      	beq.n	18184 <rpc_ip_event_handler+0x180>
   180f2:	2b10      	cmp	r3, #16
   180f4:	bf96      	itet	ls
   180f6:	4aba      	ldrls	r2, [pc, #744]	; (183e0 <rpc_ip_event_handler+0x3dc>)
   180f8:	212d      	movhi	r1, #45	; 0x2d
   180fa:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
   180fe:	2302      	movs	r3, #2
   18100:	4ab8      	ldr	r2, [pc, #736]	; (183e4 <rpc_ip_event_handler+0x3e0>)
   18102:	6011      	str	r1, [r2, #0]
   18104:	f8c9 3000 	str.w	r3, [r9]
   18108:	2f00      	cmp	r7, #0
   1810a:	d1da      	bne.n	180c2 <rpc_ip_event_handler+0xbe>
   1810c:	e7dc      	b.n	180c8 <rpc_ip_event_handler+0xc4>
   1810e:	f248 0306 	movw	r3, #32774	; 0x8006
   18112:	429e      	cmp	r6, r3
   18114:	f080 80e6 	bcs.w	182e4 <rpc_ip_event_handler+0x2e0>
   18118:	f248 0302 	movw	r3, #32770	; 0x8002
   1811c:	429e      	cmp	r6, r3
   1811e:	f000 80c8 	beq.w	182b2 <rpc_ip_event_handler+0x2ae>
   18122:	d918      	bls.n	18156 <rpc_ip_event_handler+0x152>
   18124:	f248 0303 	movw	r3, #32771	; 0x8003
   18128:	429e      	cmp	r6, r3
   1812a:	f000 8112 	beq.w	18352 <rpc_ip_event_handler+0x34e>
   1812e:	f248 0305 	movw	r3, #32773	; 0x8005
   18132:	429e      	cmp	r6, r3
   18134:	d1cc      	bne.n	180d0 <rpc_ip_event_handler+0xcc>
   18136:	683b      	ldr	r3, [r7, #0]
   18138:	b29b      	uxth	r3, r3
   1813a:	2b03      	cmp	r3, #3
   1813c:	d1c4      	bne.n	180c8 <rpc_ip_event_handler+0xc4>
   1813e:	696b      	ldr	r3, [r5, #20]
   18140:	2b00      	cmp	r3, #0
   18142:	f000 817e 	beq.w	18442 <rpc_ip_event_handler+0x43e>
   18146:	2b10      	cmp	r3, #16
   18148:	f200 813b 	bhi.w	183c2 <rpc_ip_event_handler+0x3be>
   1814c:	4aa4      	ldr	r2, [pc, #656]	; (183e0 <rpc_ip_event_handler+0x3dc>)
   1814e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18152:	607b      	str	r3, [r7, #4]
   18154:	e7b8      	b.n	180c8 <rpc_ip_event_handler+0xc4>
   18156:	f248 0301 	movw	r3, #32769	; 0x8001
   1815a:	429e      	cmp	r6, r3
   1815c:	d1b8      	bne.n	180d0 <rpc_ip_event_handler+0xcc>
   1815e:	683b      	ldr	r3, [r7, #0]
   18160:	2b01      	cmp	r3, #1
   18162:	d1b1      	bne.n	180c8 <rpc_ip_event_handler+0xc4>
   18164:	6968      	ldr	r0, [r5, #20]
   18166:	2800      	cmp	r0, #0
   18168:	f000 8173 	beq.w	18452 <rpc_ip_event_handler+0x44e>
   1816c:	2810      	cmp	r0, #16
   1816e:	f200 8128 	bhi.w	183c2 <rpc_ip_event_handler+0x3be>
   18172:	4b9b      	ldr	r3, [pc, #620]	; (183e0 <rpc_ip_event_handler+0x3dc>)
   18174:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   18178:	e7eb      	b.n	18152 <rpc_ip_event_handler+0x14e>
   1817a:	683b      	ldr	r3, [r7, #0]
   1817c:	b29b      	uxth	r3, r3
   1817e:	2b07      	cmp	r3, #7
   18180:	d1a2      	bne.n	180c8 <rpc_ip_event_handler+0xc4>
   18182:	e790      	b.n	180a6 <rpc_ip_event_handler+0xa2>
   18184:	4b98      	ldr	r3, [pc, #608]	; (183e8 <rpc_ip_event_handler+0x3e4>)
   18186:	601f      	str	r7, [r3, #0]
   18188:	69ac      	ldr	r4, [r5, #24]
   1818a:	0163      	lsls	r3, r4, #5
   1818c:	4618      	mov	r0, r3
   1818e:	9303      	str	r3, [sp, #12]
   18190:	f7fb f9e4 	bl	1355c <nrf_malloc>
   18194:	9002      	str	r0, [sp, #8]
   18196:	2800      	cmp	r0, #0
   18198:	f000 8103 	beq.w	183a2 <rpc_ip_event_handler+0x39e>
   1819c:	00e5      	lsls	r5, r4, #3
   1819e:	1928      	adds	r0, r5, r4
   181a0:	0080      	lsls	r0, r0, #2
   181a2:	f7fb f9db 	bl	1355c <nrf_malloc>
   181a6:	2800      	cmp	r0, #0
   181a8:	f000 810d 	beq.w	183c6 <rpc_ip_event_handler+0x3c2>
   181ac:	2c00      	cmp	r4, #0
   181ae:	d078      	beq.n	182a2 <rpc_ip_event_handler+0x29e>
   181b0:	f105 0210 	add.w	r2, r5, #16
   181b4:	1883      	adds	r3, r0, r2
   181b6:	9301      	str	r3, [sp, #4]
   181b8:	9b02      	ldr	r3, [sp, #8]
   181ba:	2404      	movs	r4, #4
   181bc:	f8df a23c 	ldr.w	sl, [pc, #572]	; 183fc <rpc_ip_event_handler+0x3f8>
   181c0:	f8df b23c 	ldr.w	fp, [pc, #572]	; 18400 <rpc_ip_event_handler+0x3fc>
   181c4:	f100 0810 	add.w	r8, r0, #16
   181c8:	f103 0620 	add.w	r6, r3, #32
   181cc:	e01d      	b.n	1820a <rpc_ip_event_handler+0x206>
   181ce:	220a      	movs	r2, #10
   181d0:	f848 2c0c 	str.w	r2, [r8, #-12]
   181d4:	f04f 0224 	mov.w	r2, #36	; 0x24
   181d8:	4640      	mov	r0, r8
   181da:	f808 2c10 	strb.w	r2, [r8, #-16]
   181de:	f828 3c08 	strh.w	r3, [r8, #-8]
   181e2:	f856 2c10 	ldr.w	r2, [r6, #-16]
   181e6:	f004 ff60 	bl	1d0aa <memcpy>
   181ea:	f856 3c10 	ldr.w	r3, [r6, #-16]
   181ee:	f108 0808 	add.w	r8, r8, #8
   181f2:	441c      	add	r4, r3
   181f4:	193b      	adds	r3, r7, r4
   181f6:	f846 3c08 	str.w	r3, [r6, #-8]
   181fa:	9b01      	ldr	r3, [sp, #4]
   181fc:	f846 6c04 	str.w	r6, [r6, #-4]
   18200:	4598      	cmp	r8, r3
   18202:	442c      	add	r4, r5
   18204:	f106 0620 	add.w	r6, r6, #32
   18208:	d045      	beq.n	18296 <rpc_ip_event_handler+0x292>
   1820a:	593b      	ldr	r3, [r7, r4]
   1820c:	193a      	adds	r2, r7, r4
   1820e:	f846 3c20 	str.w	r3, [r6, #-32]
   18212:	6853      	ldr	r3, [r2, #4]
   18214:	f8da 1000 	ldr.w	r1, [sl]
   18218:	2b02      	cmp	r3, #2
   1821a:	bf14      	ite	ne
   1821c:	2002      	movne	r0, #2
   1821e:	200a      	moveq	r0, #10
   18220:	f8db 3000 	ldr.w	r3, [fp]
   18224:	e946 0107 	strd	r0, r1, [r6, #-28]
   18228:	f846 3c14 	str.w	r3, [r6, #-20]
   1822c:	8a10      	ldrh	r0, [r2, #16]
   1822e:	f1a8 0310 	sub.w	r3, r8, #16
   18232:	f846 0c10 	str.w	r0, [r6, #-16]
   18236:	8a55      	ldrh	r5, [r2, #18]
   18238:	f846 3c0c 	str.w	r3, [r6, #-12]
   1823c:	4b6b      	ldr	r3, [pc, #428]	; (183ec <rpc_ip_event_handler+0x3e8>)
   1823e:	3414      	adds	r4, #20
   18240:	2804      	cmp	r0, #4
   18242:	eb07 0104 	add.w	r1, r7, r4
   18246:	881b      	ldrh	r3, [r3, #0]
   18248:	d1c1      	bne.n	181ce <rpc_ip_event_handler+0x1ca>
   1824a:	2210      	movs	r2, #16
   1824c:	2002      	movs	r0, #2
   1824e:	f828 3c08 	strh.w	r3, [r8, #-8]
   18252:	f848 0c0c 	str.w	r0, [r8, #-12]
   18256:	f808 2c10 	strb.w	r2, [r8, #-16]
   1825a:	f856 2c10 	ldr.w	r2, [r6, #-16]
   1825e:	f1a8 0004 	sub.w	r0, r8, #4
   18262:	e7c0      	b.n	181e6 <rpc_ip_event_handler+0x1e2>
   18264:	f248 0308 	movw	r3, #32776	; 0x8008
   18268:	429e      	cmp	r6, r3
   1826a:	d04e      	beq.n	1830a <rpc_ip_event_handler+0x306>
   1826c:	f248 0309 	movw	r3, #32777	; 0x8009
   18270:	429e      	cmp	r6, r3
   18272:	f47f af2d 	bne.w	180d0 <rpc_ip_event_handler+0xcc>
   18276:	683b      	ldr	r3, [r7, #0]
   18278:	b29b      	uxth	r3, r3
   1827a:	2b0d      	cmp	r3, #13
   1827c:	f47f af24 	bne.w	180c8 <rpc_ip_event_handler+0xc4>
   18280:	6968      	ldr	r0, [r5, #20]
   18282:	2800      	cmp	r0, #0
   18284:	f47f af72 	bne.w	1816c <rpc_ip_event_handler+0x168>
   18288:	683b      	ldr	r3, [r7, #0]
   1828a:	0c1b      	lsrs	r3, r3, #16
   1828c:	041b      	lsls	r3, r3, #16
   1828e:	f043 030e 	orr.w	r3, r3, #14
   18292:	603b      	str	r3, [r7, #0]
   18294:	e719      	b.n	180ca <rpc_ip_event_handler+0xc6>
   18296:	2200      	movs	r2, #0
   18298:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   1829c:	440b      	add	r3, r1
   1829e:	f843 2c04 	str.w	r2, [r3, #-4]
   182a2:	2202      	movs	r2, #2
   182a4:	4b52      	ldr	r3, [pc, #328]	; (183f0 <rpc_ip_event_handler+0x3ec>)
   182a6:	f8c9 2000 	str.w	r2, [r9]
   182aa:	9a02      	ldr	r2, [sp, #8]
   182ac:	2000      	movs	r0, #0
   182ae:	601a      	str	r2, [r3, #0]
   182b0:	e70b      	b.n	180ca <rpc_ip_event_handler+0xc6>
   182b2:	683b      	ldr	r3, [r7, #0]
   182b4:	0099      	lsls	r1, r3, #2
   182b6:	f57f af07 	bpl.w	180c8 <rpc_ip_event_handler+0xc4>
   182ba:	683b      	ldr	r3, [r7, #0]
   182bc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   182c0:	603b      	str	r3, [r7, #0]
   182c2:	6968      	ldr	r0, [r5, #20]
   182c4:	2800      	cmp	r0, #0
   182c6:	f000 80a2 	beq.w	1840e <rpc_ip_event_handler+0x40a>
   182ca:	2810      	cmp	r0, #16
   182cc:	bf8e      	itee	hi
   182ce:	232d      	movhi	r3, #45	; 0x2d
   182d0:	4b43      	ldrls	r3, [pc, #268]	; (183e0 <rpc_ip_event_handler+0x3dc>)
   182d2:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   182d6:	2000      	movs	r0, #0
   182d8:	607b      	str	r3, [r7, #4]
   182da:	683b      	ldr	r3, [r7, #0]
   182dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   182e0:	603b      	str	r3, [r7, #0]
   182e2:	e6f2      	b.n	180ca <rpc_ip_event_handler+0xc6>
   182e4:	683b      	ldr	r3, [r7, #0]
   182e6:	029a      	lsls	r2, r3, #10
   182e8:	f57f aeee 	bpl.w	180c8 <rpc_ip_event_handler+0xc4>
   182ec:	696b      	ldr	r3, [r5, #20]
   182ee:	2b00      	cmp	r3, #0
   182f0:	f000 809c 	beq.w	1842c <rpc_ip_event_handler+0x428>
   182f4:	2b6b      	cmp	r3, #107	; 0x6b
   182f6:	f47f af26 	bne.w	18146 <rpc_ip_event_handler+0x142>
   182fa:	693b      	ldr	r3, [r7, #16]
   182fc:	2b01      	cmp	r3, #1
   182fe:	f000 80b1 	beq.w	18464 <rpc_ip_event_handler+0x460>
   18302:	230c      	movs	r3, #12
   18304:	2000      	movs	r0, #0
   18306:	607b      	str	r3, [r7, #4]
   18308:	e6df      	b.n	180ca <rpc_ip_event_handler+0xc6>
   1830a:	683b      	ldr	r3, [r7, #0]
   1830c:	b29b      	uxth	r3, r3
   1830e:	2b06      	cmp	r3, #6
   18310:	f47f aeda 	bne.w	180c8 <rpc_ip_event_handler+0xc4>
   18314:	6968      	ldr	r0, [r5, #20]
   18316:	2800      	cmp	r0, #0
   18318:	f47f af28 	bne.w	1816c <rpc_ip_event_handler+0x168>
   1831c:	683b      	ldr	r3, [r7, #0]
   1831e:	0c1b      	lsrs	r3, r3, #16
   18320:	041b      	lsls	r3, r3, #16
   18322:	f043 0307 	orr.w	r3, r3, #7
   18326:	603b      	str	r3, [r7, #0]
   18328:	e6cf      	b.n	180ca <rpc_ip_event_handler+0xc6>
   1832a:	683b      	ldr	r3, [r7, #0]
   1832c:	b29b      	uxth	r3, r3
   1832e:	2b08      	cmp	r3, #8
   18330:	f47f aeca 	bne.w	180c8 <rpc_ip_event_handler+0xc4>
   18334:	696b      	ldr	r3, [r5, #20]
   18336:	2b00      	cmp	r3, #0
   18338:	f47f af05 	bne.w	18146 <rpc_ip_event_handler+0x142>
   1833c:	4b2d      	ldr	r3, [pc, #180]	; (183f4 <rpc_ip_event_handler+0x3f0>)
   1833e:	2001      	movs	r0, #1
   18340:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
   18344:	683b      	ldr	r3, [r7, #0]
   18346:	0c1b      	lsrs	r3, r3, #16
   18348:	041b      	lsls	r3, r3, #16
   1834a:	f043 0309 	orr.w	r3, r3, #9
   1834e:	603b      	str	r3, [r7, #0]
   18350:	e6bb      	b.n	180ca <rpc_ip_event_handler+0xc6>
   18352:	683b      	ldr	r3, [r7, #0]
   18354:	025b      	lsls	r3, r3, #9
   18356:	f57f aeb7 	bpl.w	180c8 <rpc_ip_event_handler+0xc4>
   1835a:	6968      	ldr	r0, [r5, #20]
   1835c:	2800      	cmp	r0, #0
   1835e:	f47f af05 	bne.w	1816c <rpc_ip_event_handler+0x168>
   18362:	683b      	ldr	r3, [r7, #0]
   18364:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   18368:	603b      	str	r3, [r7, #0]
   1836a:	e6ae      	b.n	180ca <rpc_ip_event_handler+0xc6>
   1836c:	683b      	ldr	r3, [r7, #0]
   1836e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   18372:	603b      	str	r3, [r7, #0]
   18374:	683b      	ldr	r3, [r7, #0]
   18376:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1837a:	603b      	str	r3, [r7, #0]
   1837c:	683b      	ldr	r3, [r7, #0]
   1837e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   18382:	603b      	str	r3, [r7, #0]
   18384:	692b      	ldr	r3, [r5, #16]
   18386:	2b6c      	cmp	r3, #108	; 0x6c
   18388:	d021      	beq.n	183ce <rpc_ip_event_handler+0x3ca>
   1838a:	2b10      	cmp	r3, #16
   1838c:	bf8c      	ite	hi
   1838e:	232d      	movhi	r3, #45	; 0x2d
   18390:	4a13      	ldrls	r2, [pc, #76]	; (183e0 <rpc_ip_event_handler+0x3dc>)
   18392:	f04f 0000 	mov.w	r0, #0
   18396:	bf98      	it	ls
   18398:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1839c:	607b      	str	r3, [r7, #4]
   1839e:	60bb      	str	r3, [r7, #8]
   183a0:	e693      	b.n	180ca <rpc_ip_event_handler+0xc6>
   183a2:	f7fb f8e5 	bl	13570 <nrf_free>
   183a6:	200c      	movs	r0, #12
   183a8:	2302      	movs	r3, #2
   183aa:	490e      	ldr	r1, [pc, #56]	; (183e4 <rpc_ip_event_handler+0x3e0>)
   183ac:	4a10      	ldr	r2, [pc, #64]	; (183f0 <rpc_ip_event_handler+0x3ec>)
   183ae:	6008      	str	r0, [r1, #0]
   183b0:	682f      	ldr	r7, [r5, #0]
   183b2:	9902      	ldr	r1, [sp, #8]
   183b4:	6011      	str	r1, [r2, #0]
   183b6:	f8c9 3000 	str.w	r3, [r9]
   183ba:	2f00      	cmp	r7, #0
   183bc:	f47f ae81 	bne.w	180c2 <rpc_ip_event_handler+0xbe>
   183c0:	e682      	b.n	180c8 <rpc_ip_event_handler+0xc4>
   183c2:	232d      	movs	r3, #45	; 0x2d
   183c4:	e6c5      	b.n	18152 <rpc_ip_event_handler+0x14e>
   183c6:	220c      	movs	r2, #12
   183c8:	4b06      	ldr	r3, [pc, #24]	; (183e4 <rpc_ip_event_handler+0x3e0>)
   183ca:	601a      	str	r2, [r3, #0]
   183cc:	e769      	b.n	182a2 <rpc_ip_event_handler+0x29e>
   183ce:	2239      	movs	r2, #57	; 0x39
   183d0:	683b      	ldr	r3, [r7, #0]
   183d2:	2000      	movs	r0, #0
   183d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   183d8:	603b      	str	r3, [r7, #0]
   183da:	607a      	str	r2, [r7, #4]
   183dc:	60ba      	str	r2, [r7, #8]
   183de:	e674      	b.n	180ca <rpc_ip_event_handler+0xc6>
   183e0:	0001f2c8 	.word	0x0001f2c8
   183e4:	20020924 	.word	0x20020924
   183e8:	20020930 	.word	0x20020930
   183ec:	20024e22 	.word	0x20024e22
   183f0:	2002092c 	.word	0x2002092c
   183f4:	20020934 	.word	0x20020934
   183f8:	20020928 	.word	0x20020928
   183fc:	20020920 	.word	0x20020920
   18400:	2002091c 	.word	0x2002091c
   18404:	6828      	ldr	r0, [r5, #0]
   18406:	f7fb f913 	bl	13630 <rpc_ip_client_data_free>
   1840a:	4620      	mov	r0, r4
   1840c:	e65d      	b.n	180ca <rpc_ip_event_handler+0xc6>
   1840e:	683b      	ldr	r3, [r7, #0]
   18410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   18414:	603b      	str	r3, [r7, #0]
   18416:	683b      	ldr	r3, [r7, #0]
   18418:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1841c:	603b      	str	r3, [r7, #0]
   1841e:	683b      	ldr	r3, [r7, #0]
   18420:	0c1b      	lsrs	r3, r3, #16
   18422:	041b      	lsls	r3, r3, #16
   18424:	f043 0305 	orr.w	r3, r3, #5
   18428:	603b      	str	r3, [r7, #0]
   1842a:	e64e      	b.n	180ca <rpc_ip_event_handler+0xc6>
   1842c:	683b      	ldr	r3, [r7, #0]
   1842e:	4a28      	ldr	r2, [pc, #160]	; (184d0 <rpc_ip_event_handler+0x4cc>)
   18430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   18434:	603b      	str	r3, [r7, #0]
   18436:	2001      	movs	r0, #1
   18438:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   1843c:	e645      	b.n	180ca <rpc_ip_event_handler+0xc6>
   1843e:	2002      	movs	r0, #2
   18440:	e643      	b.n	180ca <rpc_ip_event_handler+0xc6>
   18442:	683b      	ldr	r3, [r7, #0]
   18444:	2000      	movs	r0, #0
   18446:	0c1b      	lsrs	r3, r3, #16
   18448:	041b      	lsls	r3, r3, #16
   1844a:	f043 0304 	orr.w	r3, r3, #4
   1844e:	603b      	str	r3, [r7, #0]
   18450:	e63b      	b.n	180ca <rpc_ip_event_handler+0xc6>
   18452:	2302      	movs	r3, #2
   18454:	603b      	str	r3, [r7, #0]
   18456:	69ab      	ldr	r3, [r5, #24]
   18458:	61bb      	str	r3, [r7, #24]
   1845a:	e636      	b.n	180ca <rpc_ip_event_handler+0xc6>
   1845c:	8a6c      	ldrh	r4, [r5, #18]
   1845e:	b94c      	cbnz	r4, 18474 <rpc_ip_event_handler+0x470>
   18460:	4626      	mov	r6, r4
   18462:	e612      	b.n	1808a <rpc_ip_event_handler+0x86>
   18464:	220c      	movs	r2, #12
   18466:	683b      	ldr	r3, [r7, #0]
   18468:	2000      	movs	r0, #0
   1846a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   1846e:	603b      	str	r3, [r7, #0]
   18470:	607a      	str	r2, [r7, #4]
   18472:	e62a      	b.n	180ca <rpc_ip_event_handler+0xc6>
   18474:	2024      	movs	r0, #36	; 0x24
   18476:	f7fb f871 	bl	1355c <nrf_malloc>
   1847a:	4606      	mov	r6, r0
   1847c:	b158      	cbz	r0, 18496 <rpc_ip_event_handler+0x492>
   1847e:	8a6a      	ldrh	r2, [r5, #18]
   18480:	2a10      	cmp	r2, #16
   18482:	d018      	beq.n	184b6 <rpc_ip_event_handler+0x4b2>
   18484:	2a04      	cmp	r2, #4
   18486:	d00a      	beq.n	1849e <rpc_ip_event_handler+0x49a>
   18488:	6828      	ldr	r0, [r5, #0]
   1848a:	f7fb f8d1 	bl	13630 <rpc_ip_client_data_free>
   1848e:	4630      	mov	r0, r6
   18490:	f7fb f86e 	bl	13570 <nrf_free>
   18494:	e618      	b.n	180c8 <rpc_ip_event_handler+0xc4>
   18496:	6828      	ldr	r0, [r5, #0]
   18498:	f7fb f8ca 	bl	13630 <rpc_ip_client_data_free>
   1849c:	e614      	b.n	180c8 <rpc_ip_event_handler+0xc4>
   1849e:	2302      	movs	r3, #2
   184a0:	2410      	movs	r4, #16
   184a2:	6043      	str	r3, [r0, #4]
   184a4:	7004      	strb	r4, [r0, #0]
   184a6:	8a2b      	ldrh	r3, [r5, #16]
   184a8:	f105 0114 	add.w	r1, r5, #20
   184ac:	8103      	strh	r3, [r0, #8]
   184ae:	300c      	adds	r0, #12
   184b0:	f004 fdfb 	bl	1d0aa <memcpy>
   184b4:	e5e9      	b.n	1808a <rpc_ip_event_handler+0x86>
   184b6:	230a      	movs	r3, #10
   184b8:	2424      	movs	r4, #36	; 0x24
   184ba:	6043      	str	r3, [r0, #4]
   184bc:	7004      	strb	r4, [r0, #0]
   184be:	8a2b      	ldrh	r3, [r5, #16]
   184c0:	f105 0114 	add.w	r1, r5, #20
   184c4:	8103      	strh	r3, [r0, #8]
   184c6:	3010      	adds	r0, #16
   184c8:	f004 fdef 	bl	1d0aa <memcpy>
   184cc:	e5dd      	b.n	1808a <rpc_ip_event_handler+0x86>
   184ce:	bf00      	nop
   184d0:	20020934 	.word	0x20020934

000184d4 <interface_init>:
   184d4:	b508      	push	{r3, lr}
   184d6:	f44f 7290 	mov.w	r2, #288	; 0x120
   184da:	2100      	movs	r1, #0
   184dc:	4802      	ldr	r0, [pc, #8]	; (184e8 <interface_init+0x14>)
   184de:	f004 fe0e 	bl	1d0fe <memset>
   184e2:	2000      	movs	r0, #0
   184e4:	bd08      	pop	{r3, pc}
   184e6:	bf00      	nop
   184e8:	2002647c 	.word	0x2002647c

000184ec <interface_socket_allocate>:
   184ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   184ee:	4b29      	ldr	r3, [pc, #164]	; (18594 <interface_socket_allocate+0xa8>)
   184f0:	4606      	mov	r6, r0
   184f2:	681d      	ldr	r5, [r3, #0]
   184f4:	4608      	mov	r0, r1
   184f6:	b1e5      	cbz	r5, 18532 <interface_socket_allocate+0x46>
   184f8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   184fa:	2c00      	cmp	r4, #0
   184fc:	d03d      	beq.n	1857a <interface_socket_allocate+0x8e>
   184fe:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   18500:	2c00      	cmp	r4, #0
   18502:	d03c      	beq.n	1857e <interface_socket_allocate+0x92>
   18504:	6edc      	ldr	r4, [r3, #108]	; 0x6c
   18506:	2c00      	cmp	r4, #0
   18508:	d03b      	beq.n	18582 <interface_socket_allocate+0x96>
   1850a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   1850e:	b179      	cbz	r1, 18530 <interface_socket_allocate+0x44>
   18510:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
   18514:	b3b9      	cbz	r1, 18586 <interface_socket_allocate+0x9a>
   18516:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
   1851a:	b3b1      	cbz	r1, 1858a <interface_socket_allocate+0x9e>
   1851c:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
   18520:	b3a9      	cbz	r1, 1858e <interface_socket_allocate+0xa2>
   18522:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18526:	200c      	movs	r0, #12
   18528:	f7f8 ff72 	bl	11410 <bsd_os_errno_set>
   1852c:	4628      	mov	r0, r5
   1852e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18530:	2504      	movs	r5, #4
   18532:	f04f 0c01 	mov.w	ip, #1
   18536:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1853a:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1853e:	00a4      	lsls	r4, r4, #2
   18540:	f843 c004 	str.w	ip, [r3, r4]
   18544:	441c      	add	r4, r3
   18546:	4611      	mov	r1, r2
   18548:	61a7      	str	r7, [r4, #24]
   1854a:	4622      	mov	r2, r4
   1854c:	f001 ffde 	bl	1a50c <packet_handler_create>
   18550:	4603      	mov	r3, r0
   18552:	61e0      	str	r0, [r4, #28]
   18554:	b158      	cbz	r0, 1856e <interface_socket_allocate+0x82>
   18556:	681b      	ldr	r3, [r3, #0]
   18558:	681b      	ldr	r3, [r3, #0]
   1855a:	4798      	blx	r3
   1855c:	b910      	cbnz	r0, 18564 <interface_socket_allocate+0x78>
   1855e:	6034      	str	r4, [r6, #0]
   18560:	4628      	mov	r0, r5
   18562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18564:	69e0      	ldr	r0, [r4, #28]
   18566:	f001 fff1 	bl	1a54c <packet_handler_delete>
   1856a:	2300      	movs	r3, #0
   1856c:	61e3      	str	r3, [r4, #28]
   1856e:	4620      	mov	r0, r4
   18570:	2224      	movs	r2, #36	; 0x24
   18572:	2100      	movs	r1, #0
   18574:	f004 fdc3 	bl	1d0fe <memset>
   18578:	e7d3      	b.n	18522 <interface_socket_allocate+0x36>
   1857a:	2501      	movs	r5, #1
   1857c:	e7d9      	b.n	18532 <interface_socket_allocate+0x46>
   1857e:	2502      	movs	r5, #2
   18580:	e7d7      	b.n	18532 <interface_socket_allocate+0x46>
   18582:	2503      	movs	r5, #3
   18584:	e7d5      	b.n	18532 <interface_socket_allocate+0x46>
   18586:	2505      	movs	r5, #5
   18588:	e7d3      	b.n	18532 <interface_socket_allocate+0x46>
   1858a:	2506      	movs	r5, #6
   1858c:	e7d1      	b.n	18532 <interface_socket_allocate+0x46>
   1858e:	2507      	movs	r5, #7
   18590:	e7cf      	b.n	18532 <interface_socket_allocate+0x46>
   18592:	bf00      	nop
   18594:	2002647c 	.word	0x2002647c

00018598 <interface_socket_free>:
   18598:	2807      	cmp	r0, #7
   1859a:	d900      	bls.n	1859e <interface_socket_free+0x6>
   1859c:	4770      	bx	lr
   1859e:	b510      	push	{r4, lr}
   185a0:	4c07      	ldr	r4, [pc, #28]	; (185c0 <interface_socket_free+0x28>)
   185a2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   185a6:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   185aa:	69e0      	ldr	r0, [r4, #28]
   185ac:	b108      	cbz	r0, 185b2 <interface_socket_free+0x1a>
   185ae:	f001 ffcd 	bl	1a54c <packet_handler_delete>
   185b2:	4620      	mov	r0, r4
   185b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   185b8:	2224      	movs	r2, #36	; 0x24
   185ba:	2100      	movs	r1, #0
   185bc:	f004 bd9f 	b.w	1d0fe <memset>
   185c0:	2002647c 	.word	0x2002647c

000185c4 <interface_socket_packet_handler_update>:
   185c4:	2807      	cmp	r0, #7
   185c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   185ca:	d81e      	bhi.n	1860a <interface_socket_packet_handler_update+0x46>
   185cc:	ea4f 08c0 	mov.w	r8, r0, lsl #3
   185d0:	4e17      	ldr	r6, [pc, #92]	; (18630 <interface_socket_packet_handler_update+0x6c>)
   185d2:	eb08 0300 	add.w	r3, r8, r0
   185d6:	009b      	lsls	r3, r3, #2
   185d8:	58f4      	ldr	r4, [r6, r3]
   185da:	18f5      	adds	r5, r6, r3
   185dc:	b1ac      	cbz	r4, 1860a <interface_socket_packet_handler_update+0x46>
   185de:	460b      	mov	r3, r1
   185e0:	4604      	mov	r4, r0
   185e2:	4611      	mov	r1, r2
   185e4:	4618      	mov	r0, r3
   185e6:	462a      	mov	r2, r5
   185e8:	f8d5 901c 	ldr.w	r9, [r5, #28]
   185ec:	f001 ff8e 	bl	1a50c <packet_handler_create>
   185f0:	61e8      	str	r0, [r5, #28]
   185f2:	b1d0      	cbz	r0, 1862a <interface_socket_packet_handler_update+0x66>
   185f4:	6803      	ldr	r3, [r0, #0]
   185f6:	681b      	ldr	r3, [r3, #0]
   185f8:	4798      	blx	r3
   185fa:	4607      	mov	r7, r0
   185fc:	b948      	cbnz	r0, 18612 <interface_socket_packet_handler_update+0x4e>
   185fe:	4648      	mov	r0, r9
   18600:	f001 ffa4 	bl	1a54c <packet_handler_delete>
   18604:	4638      	mov	r0, r7
   18606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1860a:	2705      	movs	r7, #5
   1860c:	4638      	mov	r0, r7
   1860e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18612:	69e8      	ldr	r0, [r5, #28]
   18614:	f001 ff9a 	bl	1a54c <packet_handler_delete>
   18618:	eb08 0004 	add.w	r0, r8, r4
   1861c:	eb06 0680 	add.w	r6, r6, r0, lsl #2
   18620:	f8c6 901c 	str.w	r9, [r6, #28]
   18624:	4638      	mov	r0, r7
   18626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1862a:	2704      	movs	r7, #4
   1862c:	e7f4      	b.n	18618 <interface_socket_packet_handler_update+0x54>
   1862e:	bf00      	nop
   18630:	2002647c 	.word	0x2002647c

00018634 <interface_socket_wait>:
   18634:	b5f0      	push	{r4, r5, r6, r7, lr}
   18636:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   1863a:	4c0e      	ldr	r4, [pc, #56]	; (18674 <interface_socket_wait+0x40>)
   1863c:	0080      	lsls	r0, r0, #2
   1863e:	5825      	ldr	r5, [r4, r0]
   18640:	b083      	sub	sp, #12
   18642:	4015      	ands	r5, r2
   18644:	428d      	cmp	r5, r1
   18646:	9301      	str	r3, [sp, #4]
   18648:	4404      	add	r4, r0
   1864a:	d010      	beq.n	1866e <interface_socket_wait+0x3a>
   1864c:	6863      	ldr	r3, [r4, #4]
   1864e:	b973      	cbnz	r3, 1866e <interface_socket_wait+0x3a>
   18650:	460f      	mov	r7, r1
   18652:	4616      	mov	r6, r2
   18654:	4625      	mov	r5, r4
   18656:	e006      	b.n	18666 <interface_socket_wait+0x32>
   18658:	686b      	ldr	r3, [r5, #4]
   1865a:	b943      	cbnz	r3, 1866e <interface_socket_wait+0x3a>
   1865c:	a901      	add	r1, sp, #4
   1865e:	4620      	mov	r0, r4
   18660:	f7f8 fe42 	bl	112e8 <bsd_os_timedwait>
   18664:	b920      	cbnz	r0, 18670 <interface_socket_wait+0x3c>
   18666:	682b      	ldr	r3, [r5, #0]
   18668:	4033      	ands	r3, r6
   1866a:	42bb      	cmp	r3, r7
   1866c:	d1f4      	bne.n	18658 <interface_socket_wait+0x24>
   1866e:	2000      	movs	r0, #0
   18670:	b003      	add	sp, #12
   18672:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18674:	2002647c 	.word	0x2002647c

00018678 <interface_from_internal_id_search>:
   18678:	4b23      	ldr	r3, [pc, #140]	; (18708 <interface_from_internal_id_search+0x90>)
   1867a:	681a      	ldr	r2, [r3, #0]
   1867c:	b112      	cbz	r2, 18684 <interface_from_internal_id_search+0xc>
   1867e:	699a      	ldr	r2, [r3, #24]
   18680:	4282      	cmp	r2, r0
   18682:	d032      	beq.n	186ea <interface_from_internal_id_search+0x72>
   18684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   18686:	b112      	cbz	r2, 1868e <interface_from_internal_id_search+0x16>
   18688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1868a:	4282      	cmp	r2, r0
   1868c:	d02f      	beq.n	186ee <interface_from_internal_id_search+0x76>
   1868e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   18690:	b112      	cbz	r2, 18698 <interface_from_internal_id_search+0x20>
   18692:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   18694:	4282      	cmp	r2, r0
   18696:	d02c      	beq.n	186f2 <interface_from_internal_id_search+0x7a>
   18698:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   1869a:	b11a      	cbz	r2, 186a4 <interface_from_internal_id_search+0x2c>
   1869c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   186a0:	4282      	cmp	r2, r0
   186a2:	d028      	beq.n	186f6 <interface_from_internal_id_search+0x7e>
   186a4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   186a8:	b11a      	cbz	r2, 186b2 <interface_from_internal_id_search+0x3a>
   186aa:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
   186ae:	4282      	cmp	r2, r0
   186b0:	d023      	beq.n	186fa <interface_from_internal_id_search+0x82>
   186b2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   186b6:	b11a      	cbz	r2, 186c0 <interface_from_internal_id_search+0x48>
   186b8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   186bc:	4282      	cmp	r2, r0
   186be:	d01e      	beq.n	186fe <interface_from_internal_id_search+0x86>
   186c0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
   186c4:	b11a      	cbz	r2, 186ce <interface_from_internal_id_search+0x56>
   186c6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   186ca:	4282      	cmp	r2, r0
   186cc:	d019      	beq.n	18702 <interface_from_internal_id_search+0x8a>
   186ce:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
   186d2:	b13a      	cbz	r2, 186e4 <interface_from_internal_id_search+0x6c>
   186d4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   186d8:	4283      	cmp	r3, r0
   186da:	bf14      	ite	ne
   186dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   186e0:	2007      	moveq	r0, #7
   186e2:	4770      	bx	lr
   186e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   186e8:	4770      	bx	lr
   186ea:	2000      	movs	r0, #0
   186ec:	4770      	bx	lr
   186ee:	2001      	movs	r0, #1
   186f0:	4770      	bx	lr
   186f2:	2002      	movs	r0, #2
   186f4:	4770      	bx	lr
   186f6:	2003      	movs	r0, #3
   186f8:	4770      	bx	lr
   186fa:	2004      	movs	r0, #4
   186fc:	4770      	bx	lr
   186fe:	2005      	movs	r0, #5
   18700:	4770      	bx	lr
   18702:	2006      	movs	r0, #6
   18704:	4770      	bx	lr
   18706:	bf00      	nop
   18708:	2002647c 	.word	0x2002647c

0001870c <interface_socket_from_handle_get>:
   1870c:	2807      	cmp	r0, #7
   1870e:	d807      	bhi.n	18720 <interface_socket_from_handle_get+0x14>
   18710:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18714:	4b03      	ldr	r3, [pc, #12]	; (18724 <interface_socket_from_handle_get+0x18>)
   18716:	0080      	lsls	r0, r0, #2
   18718:	581a      	ldr	r2, [r3, r0]
   1871a:	b10a      	cbz	r2, 18720 <interface_socket_from_handle_get+0x14>
   1871c:	4418      	add	r0, r3
   1871e:	4770      	bx	lr
   18720:	2000      	movs	r0, #0
   18722:	4770      	bx	lr
   18724:	2002647c 	.word	0x2002647c

00018728 <interface_socket_event_get>:
   18728:	b119      	cbz	r1, 18732 <interface_socket_event_get+0xa>
   1872a:	2807      	cmp	r0, #7
   1872c:	d902      	bls.n	18734 <interface_socket_event_get+0xc>
   1872e:	2310      	movs	r3, #16
   18730:	600b      	str	r3, [r1, #0]
   18732:	4770      	bx	lr
   18734:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18738:	4b07      	ldr	r3, [pc, #28]	; (18758 <interface_socket_event_get+0x30>)
   1873a:	0080      	lsls	r0, r0, #2
   1873c:	581a      	ldr	r2, [r3, r0]
   1873e:	2a00      	cmp	r2, #0
   18740:	d0f5      	beq.n	1872e <interface_socket_event_get+0x6>
   18742:	581b      	ldr	r3, [r3, r0]
   18744:	0c1b      	lsrs	r3, r3, #16
   18746:	f003 020a 	and.w	r2, r3, #10
   1874a:	2a0a      	cmp	r2, #10
   1874c:	bf14      	ite	ne
   1874e:	f003 030f 	andne.w	r3, r3, #15
   18752:	f003 030d 	andeq.w	r3, r3, #13
   18756:	e7eb      	b.n	18730 <interface_socket_event_get+0x8>
   18758:	2002647c 	.word	0x2002647c

0001875c <interface_socket_setopt>:
   1875c:	2807      	cmp	r0, #7
   1875e:	b570      	push	{r4, r5, r6, lr}
   18760:	d827      	bhi.n	187b2 <interface_socket_setopt+0x56>
   18762:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18766:	4c16      	ldr	r4, [pc, #88]	; (187c0 <interface_socket_setopt+0x64>)
   18768:	0080      	lsls	r0, r0, #2
   1876a:	5825      	ldr	r5, [r4, r0]
   1876c:	b30d      	cbz	r5, 187b2 <interface_socket_setopt+0x56>
   1876e:	2901      	cmp	r1, #1
   18770:	d119      	bne.n	187a6 <interface_socket_setopt+0x4a>
   18772:	2a14      	cmp	r2, #20
   18774:	d117      	bne.n	187a6 <interface_socket_setopt+0x4a>
   18776:	b183      	cbz	r3, 1879a <interface_socket_setopt+0x3e>
   18778:	9a04      	ldr	r2, [sp, #16]
   1877a:	2a08      	cmp	r2, #8
   1877c:	d10d      	bne.n	1879a <interface_socket_setopt+0x3e>
   1877e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   18782:	685a      	ldr	r2, [r3, #4]
   18784:	4e0f      	ldr	r6, [pc, #60]	; (187c4 <interface_socket_setopt+0x68>)
   18786:	6819      	ldr	r1, [r3, #0]
   18788:	fba6 2302 	umull	r2, r3, r6, r2
   1878c:	099b      	lsrs	r3, r3, #6
   1878e:	fb05 3301 	mla	r3, r5, r1, r3
   18792:	4420      	add	r0, r4
   18794:	6203      	str	r3, [r0, #32]
   18796:	2000      	movs	r0, #0
   18798:	bd70      	pop	{r4, r5, r6, pc}
   1879a:	2016      	movs	r0, #22
   1879c:	f7f8 fe38 	bl	11410 <bsd_os_errno_set>
   187a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   187a4:	bd70      	pop	{r4, r5, r6, pc}
   187a6:	202a      	movs	r0, #42	; 0x2a
   187a8:	f7f8 fe32 	bl	11410 <bsd_os_errno_set>
   187ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   187b0:	bd70      	pop	{r4, r5, r6, pc}
   187b2:	2009      	movs	r0, #9
   187b4:	f7f8 fe2c 	bl	11410 <bsd_os_errno_set>
   187b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   187bc:	bd70      	pop	{r4, r5, r6, pc}
   187be:	bf00      	nop
   187c0:	2002647c 	.word	0x2002647c
   187c4:	10624dd3 	.word	0x10624dd3

000187c8 <interface_socket_getopt>:
   187c8:	b570      	push	{r4, r5, r6, lr}
   187ca:	2807      	cmp	r0, #7
   187cc:	9d04      	ldr	r5, [sp, #16]
   187ce:	d821      	bhi.n	18814 <interface_socket_getopt+0x4c>
   187d0:	4c13      	ldr	r4, [pc, #76]	; (18820 <interface_socket_getopt+0x58>)
   187d2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   187d6:	0080      	lsls	r0, r0, #2
   187d8:	5826      	ldr	r6, [r4, r0]
   187da:	4404      	add	r4, r0
   187dc:	b1d6      	cbz	r6, 18814 <interface_socket_getopt+0x4c>
   187de:	2901      	cmp	r1, #1
   187e0:	d112      	bne.n	18808 <interface_socket_getopt+0x40>
   187e2:	2a04      	cmp	r2, #4
   187e4:	d110      	bne.n	18808 <interface_socket_getopt+0x40>
   187e6:	b14b      	cbz	r3, 187fc <interface_socket_getopt+0x34>
   187e8:	b145      	cbz	r5, 187fc <interface_socket_getopt+0x34>
   187ea:	682a      	ldr	r2, [r5, #0]
   187ec:	2a04      	cmp	r2, #4
   187ee:	d105      	bne.n	187fc <interface_socket_getopt+0x34>
   187f0:	2200      	movs	r2, #0
   187f2:	6861      	ldr	r1, [r4, #4]
   187f4:	4610      	mov	r0, r2
   187f6:	6019      	str	r1, [r3, #0]
   187f8:	6062      	str	r2, [r4, #4]
   187fa:	bd70      	pop	{r4, r5, r6, pc}
   187fc:	2016      	movs	r0, #22
   187fe:	f7f8 fe07 	bl	11410 <bsd_os_errno_set>
   18802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18806:	bd70      	pop	{r4, r5, r6, pc}
   18808:	202a      	movs	r0, #42	; 0x2a
   1880a:	f7f8 fe01 	bl	11410 <bsd_os_errno_set>
   1880e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18812:	bd70      	pop	{r4, r5, r6, pc}
   18814:	2009      	movs	r0, #9
   18816:	f7f8 fdfb 	bl	11410 <bsd_os_errno_set>
   1881a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1881e:	bd70      	pop	{r4, r5, r6, pc}
   18820:	2002647c 	.word	0x2002647c

00018824 <interface_shutdown>:
   18824:	4b15      	ldr	r3, [pc, #84]	; (1887c <interface_shutdown+0x58>)
   18826:	681a      	ldr	r2, [r3, #0]
   18828:	b10a      	cbz	r2, 1882e <interface_shutdown+0xa>
   1882a:	2270      	movs	r2, #112	; 0x70
   1882c:	605a      	str	r2, [r3, #4]
   1882e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   18830:	b10a      	cbz	r2, 18836 <interface_shutdown+0x12>
   18832:	2270      	movs	r2, #112	; 0x70
   18834:	629a      	str	r2, [r3, #40]	; 0x28
   18836:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   18838:	b10a      	cbz	r2, 1883e <interface_shutdown+0x1a>
   1883a:	2270      	movs	r2, #112	; 0x70
   1883c:	64da      	str	r2, [r3, #76]	; 0x4c
   1883e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   18840:	b10a      	cbz	r2, 18846 <interface_shutdown+0x22>
   18842:	2270      	movs	r2, #112	; 0x70
   18844:	671a      	str	r2, [r3, #112]	; 0x70
   18846:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   1884a:	b112      	cbz	r2, 18852 <interface_shutdown+0x2e>
   1884c:	2270      	movs	r2, #112	; 0x70
   1884e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   18852:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   18856:	b112      	cbz	r2, 1885e <interface_shutdown+0x3a>
   18858:	2270      	movs	r2, #112	; 0x70
   1885a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
   1885e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
   18862:	b112      	cbz	r2, 1886a <interface_shutdown+0x46>
   18864:	2270      	movs	r2, #112	; 0x70
   18866:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
   1886a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
   1886e:	b112      	cbz	r2, 18876 <interface_shutdown+0x52>
   18870:	2270      	movs	r2, #112	; 0x70
   18872:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   18876:	2000      	movs	r0, #0
   18878:	4770      	bx	lr
   1887a:	bf00      	nop
   1887c:	2002647c 	.word	0x2002647c

00018880 <interface_socket_fcntl>:
   18880:	2807      	cmp	r0, #7
   18882:	b510      	push	{r4, lr}
   18884:	d818      	bhi.n	188b8 <interface_socket_fcntl+0x38>
   18886:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   1888a:	4c11      	ldr	r4, [pc, #68]	; (188d0 <interface_socket_fcntl+0x50>)
   1888c:	0083      	lsls	r3, r0, #2
   1888e:	58e0      	ldr	r0, [r4, r3]
   18890:	b190      	cbz	r0, 188b8 <interface_socket_fcntl+0x38>
   18892:	2901      	cmp	r1, #1
   18894:	d005      	beq.n	188a2 <interface_socket_fcntl+0x22>
   18896:	2902      	cmp	r1, #2
   18898:	d114      	bne.n	188c4 <interface_socket_fcntl+0x44>
   1889a:	58e0      	ldr	r0, [r4, r3]
   1889c:	f3c0 7000 	ubfx	r0, r0, #28, #1
   188a0:	bd10      	pop	{r4, pc}
   188a2:	f012 0001 	ands.w	r0, r2, #1
   188a6:	58e2      	ldr	r2, [r4, r3]
   188a8:	bf1a      	itte	ne
   188aa:	2000      	movne	r0, #0
   188ac:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
   188b0:	f022 5280 	biceq.w	r2, r2, #268435456	; 0x10000000
   188b4:	50e2      	str	r2, [r4, r3]
   188b6:	bd10      	pop	{r4, pc}
   188b8:	2009      	movs	r0, #9
   188ba:	f7f8 fda9 	bl	11410 <bsd_os_errno_set>
   188be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   188c2:	bd10      	pop	{r4, pc}
   188c4:	2016      	movs	r0, #22
   188c6:	f7f8 fda3 	bl	11410 <bsd_os_errno_set>
   188ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   188ce:	bd10      	pop	{r4, pc}
   188d0:	2002647c 	.word	0x2002647c

000188d4 <bsd_os_application_irq_handler>:
   188d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   188d8:	4c33      	ldr	r4, [pc, #204]	; (189a8 <bsd_os_application_irq_handler+0xd4>)
   188da:	f7f8 fe4d 	bl	11578 <bsd_os_application_irq_clear>
   188de:	f04f 0803 	mov.w	r8, #3
   188e2:	4d32      	ldr	r5, [pc, #200]	; (189ac <bsd_os_application_irq_handler+0xd8>)
   188e4:	4f32      	ldr	r7, [pc, #200]	; (189b0 <bsd_os_application_irq_handler+0xdc>)
   188e6:	f104 0680 	add.w	r6, r4, #128	; 0x80
   188ea:	e004      	b.n	188f6 <bsd_os_application_irq_handler+0x22>
   188ec:	2b04      	cmp	r3, #4
   188ee:	d006      	beq.n	188fe <bsd_os_application_irq_handler+0x2a>
   188f0:	3408      	adds	r4, #8
   188f2:	42b4      	cmp	r4, r6
   188f4:	d03b      	beq.n	1896e <bsd_os_application_irq_handler+0x9a>
   188f6:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   188fa:	2b02      	cmp	r3, #2
   188fc:	d1f6      	bne.n	188ec <bsd_os_application_irq_handler+0x18>
   188fe:	6820      	ldr	r0, [r4, #0]
   18900:	882a      	ldrh	r2, [r5, #0]
   18902:	6803      	ldr	r3, [r0, #0]
   18904:	b29b      	uxth	r3, r3
   18906:	429a      	cmp	r2, r3
   18908:	d033      	beq.n	18972 <bsd_os_application_irq_handler+0x9e>
   1890a:	8a2a      	ldrh	r2, [r5, #16]
   1890c:	429a      	cmp	r2, r3
   1890e:	d032      	beq.n	18976 <bsd_os_application_irq_handler+0xa2>
   18910:	8c2a      	ldrh	r2, [r5, #32]
   18912:	429a      	cmp	r2, r3
   18914:	d031      	beq.n	1897a <bsd_os_application_irq_handler+0xa6>
   18916:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   18918:	429a      	cmp	r2, r3
   1891a:	d030      	beq.n	1897e <bsd_os_application_irq_handler+0xaa>
   1891c:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
   18920:	429a      	cmp	r2, r3
   18922:	d036      	beq.n	18992 <bsd_os_application_irq_handler+0xbe>
   18924:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
   18928:	429a      	cmp	r2, r3
   1892a:	d034      	beq.n	18996 <bsd_os_application_irq_handler+0xc2>
   1892c:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
   18930:	429a      	cmp	r2, r3
   18932:	d032      	beq.n	1899a <bsd_os_application_irq_handler+0xc6>
   18934:	f8b5 2070 	ldrh.w	r2, [r5, #112]	; 0x70
   18938:	429a      	cmp	r2, r3
   1893a:	d030      	beq.n	1899e <bsd_os_application_irq_handler+0xca>
   1893c:	f8b5 2080 	ldrh.w	r2, [r5, #128]	; 0x80
   18940:	429a      	cmp	r2, r3
   18942:	d02e      	beq.n	189a2 <bsd_os_application_irq_handler+0xce>
   18944:	f8b5 2090 	ldrh.w	r2, [r5, #144]	; 0x90
   18948:	429a      	cmp	r2, r3
   1894a:	bf08      	it	eq
   1894c:	2309      	moveq	r3, #9
   1894e:	d1cf      	bne.n	188f0 <bsd_os_application_irq_handler+0x1c>
   18950:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   18954:	685a      	ldr	r2, [r3, #4]
   18956:	68d9      	ldr	r1, [r3, #12]
   18958:	4790      	blx	r2
   1895a:	b990      	cbnz	r0, 18982 <bsd_os_application_irq_handler+0xae>
   1895c:	2201      	movs	r2, #1
   1895e:	6820      	ldr	r0, [r4, #0]
   18960:	f804 2c04 	strb.w	r2, [r4, #-4]
   18964:	68fb      	ldr	r3, [r7, #12]
   18966:	3408      	adds	r4, #8
   18968:	4798      	blx	r3
   1896a:	42b4      	cmp	r4, r6
   1896c:	d1c3      	bne.n	188f6 <bsd_os_application_irq_handler+0x22>
   1896e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18972:	2300      	movs	r3, #0
   18974:	e7ec      	b.n	18950 <bsd_os_application_irq_handler+0x7c>
   18976:	2301      	movs	r3, #1
   18978:	e7ea      	b.n	18950 <bsd_os_application_irq_handler+0x7c>
   1897a:	2302      	movs	r3, #2
   1897c:	e7e8      	b.n	18950 <bsd_os_application_irq_handler+0x7c>
   1897e:	2303      	movs	r3, #3
   18980:	e7e6      	b.n	18950 <bsd_os_application_irq_handler+0x7c>
   18982:	2802      	cmp	r0, #2
   18984:	bf0a      	itet	eq
   18986:	2304      	moveq	r3, #4
   18988:	f804 8c04 	strbne.w	r8, [r4, #-4]
   1898c:	f804 3c04 	strbeq.w	r3, [r4, #-4]
   18990:	e7ae      	b.n	188f0 <bsd_os_application_irq_handler+0x1c>
   18992:	2304      	movs	r3, #4
   18994:	e7dc      	b.n	18950 <bsd_os_application_irq_handler+0x7c>
   18996:	2305      	movs	r3, #5
   18998:	e7da      	b.n	18950 <bsd_os_application_irq_handler+0x7c>
   1899a:	2306      	movs	r3, #6
   1899c:	e7d8      	b.n	18950 <bsd_os_application_irq_handler+0x7c>
   1899e:	2307      	movs	r3, #7
   189a0:	e7d6      	b.n	18950 <bsd_os_application_irq_handler+0x7c>
   189a2:	2308      	movs	r3, #8
   189a4:	e7d4      	b.n	18950 <bsd_os_application_irq_handler+0x7c>
   189a6:	bf00      	nop
   189a8:	20020a90 	.word	0x20020a90
   189ac:	20020954 	.word	0x20020954
   189b0:	200209f4 	.word	0x200209f4

000189b4 <rpc_framework_init>:
   189b4:	b508      	push	{r3, lr}
   189b6:	22a0      	movs	r2, #160	; 0xa0
   189b8:	2100      	movs	r1, #0
   189ba:	4802      	ldr	r0, [pc, #8]	; (189c4 <rpc_framework_init+0x10>)
   189bc:	f004 fb9f 	bl	1d0fe <memset>
   189c0:	2000      	movs	r0, #0
   189c2:	bd08      	pop	{r3, pc}
   189c4:	20020954 	.word	0x20020954

000189c8 <rpc_client_register>:
   189c8:	8803      	ldrh	r3, [r0, #0]
   189ca:	2b00      	cmp	r3, #0
   189cc:	d045      	beq.n	18a5a <rpc_client_register+0x92>
   189ce:	6842      	ldr	r2, [r0, #4]
   189d0:	4601      	mov	r1, r0
   189d2:	2a00      	cmp	r2, #0
   189d4:	d050      	beq.n	18a78 <rpc_client_register+0xb0>
   189d6:	4a30      	ldr	r2, [pc, #192]	; (18a98 <rpc_client_register+0xd0>)
   189d8:	8810      	ldrh	r0, [r2, #0]
   189da:	4283      	cmp	r3, r0
   189dc:	d03d      	beq.n	18a5a <rpc_client_register+0x92>
   189de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   189e2:	8a14      	ldrh	r4, [r2, #16]
   189e4:	42a3      	cmp	r3, r4
   189e6:	d035      	beq.n	18a54 <rpc_client_register+0x8c>
   189e8:	8c15      	ldrh	r5, [r2, #32]
   189ea:	42ab      	cmp	r3, r5
   189ec:	d032      	beq.n	18a54 <rpc_client_register+0x8c>
   189ee:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   189f0:	42b3      	cmp	r3, r6
   189f2:	d02f      	beq.n	18a54 <rpc_client_register+0x8c>
   189f4:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   189f8:	42bb      	cmp	r3, r7
   189fa:	d02b      	beq.n	18a54 <rpc_client_register+0x8c>
   189fc:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   18a00:	4563      	cmp	r3, ip
   18a02:	d027      	beq.n	18a54 <rpc_client_register+0x8c>
   18a04:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   18a08:	4573      	cmp	r3, lr
   18a0a:	d023      	beq.n	18a54 <rpc_client_register+0x8c>
   18a0c:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   18a10:	4543      	cmp	r3, r8
   18a12:	d01f      	beq.n	18a54 <rpc_client_register+0x8c>
   18a14:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   18a18:	454b      	cmp	r3, r9
   18a1a:	d01b      	beq.n	18a54 <rpc_client_register+0x8c>
   18a1c:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   18a20:	4553      	cmp	r3, sl
   18a22:	d017      	beq.n	18a54 <rpc_client_register+0x8c>
   18a24:	b1e0      	cbz	r0, 18a60 <rpc_client_register+0x98>
   18a26:	b35c      	cbz	r4, 18a80 <rpc_client_register+0xb8>
   18a28:	b365      	cbz	r5, 18a84 <rpc_client_register+0xbc>
   18a2a:	b36e      	cbz	r6, 18a88 <rpc_client_register+0xc0>
   18a2c:	b377      	cbz	r7, 18a8c <rpc_client_register+0xc4>
   18a2e:	f1bc 0f00 	cmp.w	ip, #0
   18a32:	d02d      	beq.n	18a90 <rpc_client_register+0xc8>
   18a34:	f1be 0f00 	cmp.w	lr, #0
   18a38:	d020      	beq.n	18a7c <rpc_client_register+0xb4>
   18a3a:	f1b8 0f00 	cmp.w	r8, #0
   18a3e:	d029      	beq.n	18a94 <rpc_client_register+0xcc>
   18a40:	f1b9 0f00 	cmp.w	r9, #0
   18a44:	d00b      	beq.n	18a5e <rpc_client_register+0x96>
   18a46:	2009      	movs	r0, #9
   18a48:	f1ba 0f00 	cmp.w	sl, #0
   18a4c:	d008      	beq.n	18a60 <rpc_client_register+0x98>
   18a4e:	2004      	movs	r0, #4
   18a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18a54:	2007      	movs	r0, #7
   18a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18a5a:	2007      	movs	r0, #7
   18a5c:	4770      	bx	lr
   18a5e:	2008      	movs	r0, #8
   18a60:	0100      	lsls	r0, r0, #4
   18a62:	5213      	strh	r3, [r2, r0]
   18a64:	684b      	ldr	r3, [r1, #4]
   18a66:	4402      	add	r2, r0
   18a68:	6053      	str	r3, [r2, #4]
   18a6a:	688b      	ldr	r3, [r1, #8]
   18a6c:	2000      	movs	r0, #0
   18a6e:	6093      	str	r3, [r2, #8]
   18a70:	68cb      	ldr	r3, [r1, #12]
   18a72:	60d3      	str	r3, [r2, #12]
   18a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18a78:	200e      	movs	r0, #14
   18a7a:	4770      	bx	lr
   18a7c:	2006      	movs	r0, #6
   18a7e:	e7ef      	b.n	18a60 <rpc_client_register+0x98>
   18a80:	2001      	movs	r0, #1
   18a82:	e7ed      	b.n	18a60 <rpc_client_register+0x98>
   18a84:	2002      	movs	r0, #2
   18a86:	e7eb      	b.n	18a60 <rpc_client_register+0x98>
   18a88:	2003      	movs	r0, #3
   18a8a:	e7e9      	b.n	18a60 <rpc_client_register+0x98>
   18a8c:	2004      	movs	r0, #4
   18a8e:	e7e7      	b.n	18a60 <rpc_client_register+0x98>
   18a90:	2005      	movs	r0, #5
   18a92:	e7e5      	b.n	18a60 <rpc_client_register+0x98>
   18a94:	2007      	movs	r0, #7
   18a96:	e7e3      	b.n	18a60 <rpc_client_register+0x98>
   18a98:	20020954 	.word	0x20020954

00018a9c <rpc_transport_input>:
   18a9c:	b538      	push	{r3, r4, r5, lr}
   18a9e:	4a82      	ldr	r2, [pc, #520]	; (18ca8 <rpc_transport_input+0x20c>)
   18aa0:	680b      	ldr	r3, [r1, #0]
   18aa2:	8810      	ldrh	r0, [r2, #0]
   18aa4:	b29b      	uxth	r3, r3
   18aa6:	4298      	cmp	r0, r3
   18aa8:	d027      	beq.n	18afa <rpc_transport_input+0x5e>
   18aaa:	8a10      	ldrh	r0, [r2, #16]
   18aac:	4298      	cmp	r0, r3
   18aae:	d024      	beq.n	18afa <rpc_transport_input+0x5e>
   18ab0:	8c10      	ldrh	r0, [r2, #32]
   18ab2:	4298      	cmp	r0, r3
   18ab4:	d021      	beq.n	18afa <rpc_transport_input+0x5e>
   18ab6:	8e10      	ldrh	r0, [r2, #48]	; 0x30
   18ab8:	4298      	cmp	r0, r3
   18aba:	d01e      	beq.n	18afa <rpc_transport_input+0x5e>
   18abc:	f8b2 0040 	ldrh.w	r0, [r2, #64]	; 0x40
   18ac0:	4298      	cmp	r0, r3
   18ac2:	d01a      	beq.n	18afa <rpc_transport_input+0x5e>
   18ac4:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
   18ac8:	4298      	cmp	r0, r3
   18aca:	d016      	beq.n	18afa <rpc_transport_input+0x5e>
   18acc:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
   18ad0:	4298      	cmp	r0, r3
   18ad2:	d012      	beq.n	18afa <rpc_transport_input+0x5e>
   18ad4:	f8b2 0070 	ldrh.w	r0, [r2, #112]	; 0x70
   18ad8:	4298      	cmp	r0, r3
   18ada:	d00e      	beq.n	18afa <rpc_transport_input+0x5e>
   18adc:	f8b2 0080 	ldrh.w	r0, [r2, #128]	; 0x80
   18ae0:	4298      	cmp	r0, r3
   18ae2:	d00a      	beq.n	18afa <rpc_transport_input+0x5e>
   18ae4:	f8b2 2090 	ldrh.w	r2, [r2, #144]	; 0x90
   18ae8:	429a      	cmp	r2, r3
   18aea:	d006      	beq.n	18afa <rpc_transport_input+0x5e>
   18aec:	6888      	ldr	r0, [r1, #8]
   18aee:	b118      	cbz	r0, 18af8 <rpc_transport_input+0x5c>
   18af0:	4b6e      	ldr	r3, [pc, #440]	; (18cac <rpc_transport_input+0x210>)
   18af2:	691b      	ldr	r3, [r3, #16]
   18af4:	4798      	blx	r3
   18af6:	2000      	movs	r0, #0
   18af8:	bd38      	pop	{r3, r4, r5, pc}
   18afa:	6888      	ldr	r0, [r1, #8]
   18afc:	2800      	cmp	r0, #0
   18afe:	f000 8098 	beq.w	18c32 <rpc_transport_input+0x196>
   18b02:	4a6b      	ldr	r2, [pc, #428]	; (18cb0 <rpc_transport_input+0x214>)
   18b04:	6814      	ldr	r4, [r2, #0]
   18b06:	2c00      	cmp	r4, #0
   18b08:	d03c      	beq.n	18b84 <rpc_transport_input+0xe8>
   18b0a:	6894      	ldr	r4, [r2, #8]
   18b0c:	2c00      	cmp	r4, #0
   18b0e:	f000 809a 	beq.w	18c46 <rpc_transport_input+0x1aa>
   18b12:	6914      	ldr	r4, [r2, #16]
   18b14:	2c00      	cmp	r4, #0
   18b16:	f000 809a 	beq.w	18c4e <rpc_transport_input+0x1b2>
   18b1a:	6994      	ldr	r4, [r2, #24]
   18b1c:	2c00      	cmp	r4, #0
   18b1e:	f000 809a 	beq.w	18c56 <rpc_transport_input+0x1ba>
   18b22:	6a14      	ldr	r4, [r2, #32]
   18b24:	2c00      	cmp	r4, #0
   18b26:	f000 809a 	beq.w	18c5e <rpc_transport_input+0x1c2>
   18b2a:	6a94      	ldr	r4, [r2, #40]	; 0x28
   18b2c:	2c00      	cmp	r4, #0
   18b2e:	f000 8084 	beq.w	18c3a <rpc_transport_input+0x19e>
   18b32:	6b14      	ldr	r4, [r2, #48]	; 0x30
   18b34:	2c00      	cmp	r4, #0
   18b36:	f000 8098 	beq.w	18c6a <rpc_transport_input+0x1ce>
   18b3a:	6b94      	ldr	r4, [r2, #56]	; 0x38
   18b3c:	2c00      	cmp	r4, #0
   18b3e:	f000 8096 	beq.w	18c6e <rpc_transport_input+0x1d2>
   18b42:	6c14      	ldr	r4, [r2, #64]	; 0x40
   18b44:	2c00      	cmp	r4, #0
   18b46:	f000 8096 	beq.w	18c76 <rpc_transport_input+0x1da>
   18b4a:	6c94      	ldr	r4, [r2, #72]	; 0x48
   18b4c:	2c00      	cmp	r4, #0
   18b4e:	f000 8096 	beq.w	18c7e <rpc_transport_input+0x1e2>
   18b52:	6d14      	ldr	r4, [r2, #80]	; 0x50
   18b54:	2c00      	cmp	r4, #0
   18b56:	f000 8096 	beq.w	18c86 <rpc_transport_input+0x1ea>
   18b5a:	6d94      	ldr	r4, [r2, #88]	; 0x58
   18b5c:	2c00      	cmp	r4, #0
   18b5e:	f000 8098 	beq.w	18c92 <rpc_transport_input+0x1f6>
   18b62:	6e14      	ldr	r4, [r2, #96]	; 0x60
   18b64:	2c00      	cmp	r4, #0
   18b66:	f000 8098 	beq.w	18c9a <rpc_transport_input+0x1fe>
   18b6a:	6e94      	ldr	r4, [r2, #104]	; 0x68
   18b6c:	2c00      	cmp	r4, #0
   18b6e:	f000 8096 	beq.w	18c9e <rpc_transport_input+0x202>
   18b72:	6f14      	ldr	r4, [r2, #112]	; 0x70
   18b74:	2c00      	cmp	r4, #0
   18b76:	f000 8094 	beq.w	18ca2 <rpc_transport_input+0x206>
   18b7a:	6f94      	ldr	r4, [r2, #120]	; 0x78
   18b7c:	b10c      	cbz	r4, 18b82 <rpc_transport_input+0xe6>
   18b7e:	2001      	movs	r0, #1
   18b80:	bd38      	pop	{r3, r4, r5, pc}
   18b82:	240f      	movs	r4, #15
   18b84:	eb02 05c4 	add.w	r5, r2, r4, lsl #3
   18b88:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
   18b8c:	80ab      	strh	r3, [r5, #4]
   18b8e:	4b49      	ldr	r3, [pc, #292]	; (18cb4 <rpc_transport_input+0x218>)
   18b90:	781a      	ldrb	r2, [r3, #0]
   18b92:	2a01      	cmp	r2, #1
   18b94:	d053      	beq.n	18c3e <rpc_transport_input+0x1a2>
   18b96:	7a1a      	ldrb	r2, [r3, #8]
   18b98:	2a01      	cmp	r2, #1
   18b9a:	d041      	beq.n	18c20 <rpc_transport_input+0x184>
   18b9c:	7c1a      	ldrb	r2, [r3, #16]
   18b9e:	2a01      	cmp	r2, #1
   18ba0:	d04f      	beq.n	18c42 <rpc_transport_input+0x1a6>
   18ba2:	7e1a      	ldrb	r2, [r3, #24]
   18ba4:	2a01      	cmp	r2, #1
   18ba6:	d050      	beq.n	18c4a <rpc_transport_input+0x1ae>
   18ba8:	f893 2020 	ldrb.w	r2, [r3, #32]
   18bac:	2a01      	cmp	r2, #1
   18bae:	d050      	beq.n	18c52 <rpc_transport_input+0x1b6>
   18bb0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   18bb4:	2a01      	cmp	r2, #1
   18bb6:	d050      	beq.n	18c5a <rpc_transport_input+0x1be>
   18bb8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   18bbc:	2a01      	cmp	r2, #1
   18bbe:	d03a      	beq.n	18c36 <rpc_transport_input+0x19a>
   18bc0:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   18bc4:	2a01      	cmp	r2, #1
   18bc6:	d04c      	beq.n	18c62 <rpc_transport_input+0x1c6>
   18bc8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   18bcc:	2a01      	cmp	r2, #1
   18bce:	d04a      	beq.n	18c66 <rpc_transport_input+0x1ca>
   18bd0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   18bd4:	2a01      	cmp	r2, #1
   18bd6:	d04c      	beq.n	18c72 <rpc_transport_input+0x1d6>
   18bd8:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   18bdc:	2a01      	cmp	r2, #1
   18bde:	d04c      	beq.n	18c7a <rpc_transport_input+0x1de>
   18be0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   18be4:	2a01      	cmp	r2, #1
   18be6:	d04c      	beq.n	18c82 <rpc_transport_input+0x1e6>
   18be8:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   18bec:	2a01      	cmp	r2, #1
   18bee:	d04c      	beq.n	18c8a <rpc_transport_input+0x1ee>
   18bf0:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   18bf4:	2a01      	cmp	r2, #1
   18bf6:	d04a      	beq.n	18c8e <rpc_transport_input+0x1f2>
   18bf8:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   18bfc:	2a01      	cmp	r2, #1
   18bfe:	d04a      	beq.n	18c96 <rpc_transport_input+0x1fa>
   18c00:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   18c04:	2a01      	cmp	r2, #1
   18c06:	d00a      	beq.n	18c1e <rpc_transport_input+0x182>
   18c08:	2c10      	cmp	r4, #16
   18c0a:	d0b8      	beq.n	18b7e <rpc_transport_input+0xe2>
   18c0c:	2200      	movs	r2, #0
   18c0e:	4b28      	ldr	r3, [pc, #160]	; (18cb0 <rpc_transport_input+0x214>)
   18c10:	2001      	movs	r0, #1
   18c12:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   18c16:	808a      	strh	r2, [r1, #4]
   18c18:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
   18c1c:	bd38      	pop	{r3, r4, r5, pc}
   18c1e:	220f      	movs	r2, #15
   18c20:	2402      	movs	r4, #2
   18c22:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
   18c26:	f803 4032 	strb.w	r4, [r3, r2, lsl #3]
   18c2a:	6041      	str	r1, [r0, #4]
   18c2c:	f7f8 fc9c 	bl	11568 <bsd_os_application_irq_set>
   18c30:	e7a5      	b.n	18b7e <rpc_transport_input+0xe2>
   18c32:	2410      	movs	r4, #16
   18c34:	e7ab      	b.n	18b8e <rpc_transport_input+0xf2>
   18c36:	2206      	movs	r2, #6
   18c38:	e7f2      	b.n	18c20 <rpc_transport_input+0x184>
   18c3a:	2405      	movs	r4, #5
   18c3c:	e7a2      	b.n	18b84 <rpc_transport_input+0xe8>
   18c3e:	2200      	movs	r2, #0
   18c40:	e7ee      	b.n	18c20 <rpc_transport_input+0x184>
   18c42:	2202      	movs	r2, #2
   18c44:	e7ec      	b.n	18c20 <rpc_transport_input+0x184>
   18c46:	2401      	movs	r4, #1
   18c48:	e79c      	b.n	18b84 <rpc_transport_input+0xe8>
   18c4a:	2203      	movs	r2, #3
   18c4c:	e7e8      	b.n	18c20 <rpc_transport_input+0x184>
   18c4e:	2402      	movs	r4, #2
   18c50:	e798      	b.n	18b84 <rpc_transport_input+0xe8>
   18c52:	2204      	movs	r2, #4
   18c54:	e7e4      	b.n	18c20 <rpc_transport_input+0x184>
   18c56:	2403      	movs	r4, #3
   18c58:	e794      	b.n	18b84 <rpc_transport_input+0xe8>
   18c5a:	2205      	movs	r2, #5
   18c5c:	e7e0      	b.n	18c20 <rpc_transport_input+0x184>
   18c5e:	2404      	movs	r4, #4
   18c60:	e790      	b.n	18b84 <rpc_transport_input+0xe8>
   18c62:	2207      	movs	r2, #7
   18c64:	e7dc      	b.n	18c20 <rpc_transport_input+0x184>
   18c66:	2208      	movs	r2, #8
   18c68:	e7da      	b.n	18c20 <rpc_transport_input+0x184>
   18c6a:	2406      	movs	r4, #6
   18c6c:	e78a      	b.n	18b84 <rpc_transport_input+0xe8>
   18c6e:	2407      	movs	r4, #7
   18c70:	e788      	b.n	18b84 <rpc_transport_input+0xe8>
   18c72:	2209      	movs	r2, #9
   18c74:	e7d4      	b.n	18c20 <rpc_transport_input+0x184>
   18c76:	2408      	movs	r4, #8
   18c78:	e784      	b.n	18b84 <rpc_transport_input+0xe8>
   18c7a:	220a      	movs	r2, #10
   18c7c:	e7d0      	b.n	18c20 <rpc_transport_input+0x184>
   18c7e:	2409      	movs	r4, #9
   18c80:	e780      	b.n	18b84 <rpc_transport_input+0xe8>
   18c82:	220b      	movs	r2, #11
   18c84:	e7cc      	b.n	18c20 <rpc_transport_input+0x184>
   18c86:	240a      	movs	r4, #10
   18c88:	e77c      	b.n	18b84 <rpc_transport_input+0xe8>
   18c8a:	220c      	movs	r2, #12
   18c8c:	e7c8      	b.n	18c20 <rpc_transport_input+0x184>
   18c8e:	220d      	movs	r2, #13
   18c90:	e7c6      	b.n	18c20 <rpc_transport_input+0x184>
   18c92:	240b      	movs	r4, #11
   18c94:	e776      	b.n	18b84 <rpc_transport_input+0xe8>
   18c96:	220e      	movs	r2, #14
   18c98:	e7c2      	b.n	18c20 <rpc_transport_input+0x184>
   18c9a:	240c      	movs	r4, #12
   18c9c:	e772      	b.n	18b84 <rpc_transport_input+0xe8>
   18c9e:	240d      	movs	r4, #13
   18ca0:	e770      	b.n	18b84 <rpc_transport_input+0xe8>
   18ca2:	240e      	movs	r4, #14
   18ca4:	e76e      	b.n	18b84 <rpc_transport_input+0xe8>
   18ca6:	bf00      	nop
   18ca8:	20020954 	.word	0x20020954
   18cac:	200209f4 	.word	0x200209f4
   18cb0:	20020a0c 	.word	0x20020a0c
   18cb4:	20020a8c 	.word	0x20020a8c

00018cb8 <rpc_transport_register>:
   18cb8:	b4f0      	push	{r4, r5, r6, r7}
   18cba:	2900      	cmp	r1, #0
   18cbc:	d052      	beq.n	18d64 <rpc_transport_register+0xac>
   18cbe:	2800      	cmp	r0, #0
   18cc0:	d050      	beq.n	18d64 <rpc_transport_register+0xac>
   18cc2:	6883      	ldr	r3, [r0, #8]
   18cc4:	2b00      	cmp	r3, #0
   18cc6:	d04d      	beq.n	18d64 <rpc_transport_register+0xac>
   18cc8:	6903      	ldr	r3, [r0, #16]
   18cca:	2b00      	cmp	r3, #0
   18ccc:	d04a      	beq.n	18d64 <rpc_transport_register+0xac>
   18cce:	6843      	ldr	r3, [r0, #4]
   18cd0:	2b00      	cmp	r3, #0
   18cd2:	d047      	beq.n	18d64 <rpc_transport_register+0xac>
   18cd4:	68c3      	ldr	r3, [r0, #12]
   18cd6:	2b00      	cmp	r3, #0
   18cd8:	d044      	beq.n	18d64 <rpc_transport_register+0xac>
   18cda:	6803      	ldr	r3, [r0, #0]
   18cdc:	2b00      	cmp	r3, #0
   18cde:	d041      	beq.n	18d64 <rpc_transport_register+0xac>
   18ce0:	6943      	ldr	r3, [r0, #20]
   18ce2:	2b00      	cmp	r3, #0
   18ce4:	d03e      	beq.n	18d64 <rpc_transport_register+0xac>
   18ce6:	2601      	movs	r6, #1
   18ce8:	2500      	movs	r5, #0
   18cea:	4604      	mov	r4, r0
   18cec:	460f      	mov	r7, r1
   18cee:	4a1f      	ldr	r2, [pc, #124]	; (18d6c <rpc_transport_register+0xb4>)
   18cf0:	4b1f      	ldr	r3, [pc, #124]	; (18d70 <rpc_transport_register+0xb8>)
   18cf2:	f8df c080 	ldr.w	ip, [pc, #128]	; 18d74 <rpc_transport_register+0xbc>
   18cf6:	7416      	strb	r6, [r2, #16]
   18cf8:	7616      	strb	r6, [r2, #24]
   18cfa:	f882 6020 	strb.w	r6, [r2, #32]
   18cfe:	f882 6028 	strb.w	r6, [r2, #40]	; 0x28
   18d02:	f882 6030 	strb.w	r6, [r2, #48]	; 0x30
   18d06:	f882 6038 	strb.w	r6, [r2, #56]	; 0x38
   18d0a:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
   18d0e:	f882 6048 	strb.w	r6, [r2, #72]	; 0x48
   18d12:	f882 6050 	strb.w	r6, [r2, #80]	; 0x50
   18d16:	f882 6058 	strb.w	r6, [r2, #88]	; 0x58
   18d1a:	f882 6060 	strb.w	r6, [r2, #96]	; 0x60
   18d1e:	f882 6068 	strb.w	r6, [r2, #104]	; 0x68
   18d22:	f882 6070 	strb.w	r6, [r2, #112]	; 0x70
   18d26:	f882 6078 	strb.w	r6, [r2, #120]	; 0x78
   18d2a:	611d      	str	r5, [r3, #16]
   18d2c:	619d      	str	r5, [r3, #24]
   18d2e:	621d      	str	r5, [r3, #32]
   18d30:	629d      	str	r5, [r3, #40]	; 0x28
   18d32:	631d      	str	r5, [r3, #48]	; 0x30
   18d34:	639d      	str	r5, [r3, #56]	; 0x38
   18d36:	641d      	str	r5, [r3, #64]	; 0x40
   18d38:	649d      	str	r5, [r3, #72]	; 0x48
   18d3a:	651d      	str	r5, [r3, #80]	; 0x50
   18d3c:	659d      	str	r5, [r3, #88]	; 0x58
   18d3e:	661d      	str	r5, [r3, #96]	; 0x60
   18d40:	669d      	str	r5, [r3, #104]	; 0x68
   18d42:	671d      	str	r5, [r3, #112]	; 0x70
   18d44:	679d      	str	r5, [r3, #120]	; 0x78
   18d46:	7016      	strb	r6, [r2, #0]
   18d48:	7216      	strb	r6, [r2, #8]
   18d4a:	601d      	str	r5, [r3, #0]
   18d4c:	609d      	str	r5, [r3, #8]
   18d4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   18d50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   18d54:	e894 0003 	ldmia.w	r4, {r0, r1}
   18d58:	e88c 0003 	stmia.w	ip, {r0, r1}
   18d5c:	603e      	str	r6, [r7, #0]
   18d5e:	4628      	mov	r0, r5
   18d60:	bcf0      	pop	{r4, r5, r6, r7}
   18d62:	4770      	bx	lr
   18d64:	250e      	movs	r5, #14
   18d66:	4628      	mov	r0, r5
   18d68:	bcf0      	pop	{r4, r5, r6, r7}
   18d6a:	4770      	bx	lr
   18d6c:	20020a8c 	.word	0x20020a8c
   18d70:	20020a0c 	.word	0x20020a0c
   18d74:	200209f4 	.word	0x200209f4

00018d78 <rpc_transport_unregister>:
   18d78:	2800      	cmp	r0, #0
   18d7a:	d03a      	beq.n	18df2 <rpc_transport_unregister+0x7a>
   18d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18d80:	4680      	mov	r8, r0
   18d82:	4c1d      	ldr	r4, [pc, #116]	; (18df8 <rpc_transport_unregister+0x80>)
   18d84:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
   18d88:	68a3      	ldr	r3, [r4, #8]
   18d8a:	3410      	adds	r4, #16
   18d8c:	b103      	cbz	r3, 18d90 <rpc_transport_unregister+0x18>
   18d8e:	4798      	blx	r3
   18d90:	42ac      	cmp	r4, r5
   18d92:	d1f9      	bne.n	18d88 <rpc_transport_unregister+0x10>
   18d94:	f04f 0901 	mov.w	r9, #1
   18d98:	2600      	movs	r6, #0
   18d9a:	4c18      	ldr	r4, [pc, #96]	; (18dfc <rpc_transport_unregister+0x84>)
   18d9c:	4d18      	ldr	r5, [pc, #96]	; (18e00 <rpc_transport_unregister+0x88>)
   18d9e:	f8df a064 	ldr.w	sl, [pc, #100]	; 18e04 <rpc_transport_unregister+0x8c>
   18da2:	f104 0780 	add.w	r7, r4, #128	; 0x80
   18da6:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   18daa:	2b01      	cmp	r3, #1
   18dac:	d005      	beq.n	18dba <rpc_transport_unregister+0x42>
   18dae:	f8da 300c 	ldr.w	r3, [sl, #12]
   18db2:	6820      	ldr	r0, [r4, #0]
   18db4:	4798      	blx	r3
   18db6:	f804 9c04 	strb.w	r9, [r4, #-4]
   18dba:	f855 0c04 	ldr.w	r0, [r5, #-4]
   18dbe:	3408      	adds	r4, #8
   18dc0:	b128      	cbz	r0, 18dce <rpc_transport_unregister+0x56>
   18dc2:	f8da 3010 	ldr.w	r3, [sl, #16]
   18dc6:	4798      	blx	r3
   18dc8:	802e      	strh	r6, [r5, #0]
   18dca:	f845 6c04 	str.w	r6, [r5, #-4]
   18dce:	42bc      	cmp	r4, r7
   18dd0:	f105 0508 	add.w	r5, r5, #8
   18dd4:	d1e7      	bne.n	18da6 <rpc_transport_unregister+0x2e>
   18dd6:	f8d8 0000 	ldr.w	r0, [r8]
   18dda:	2218      	movs	r2, #24
   18ddc:	3801      	subs	r0, #1
   18dde:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18de2:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
   18de6:	2100      	movs	r1, #0
   18de8:	f004 f989 	bl	1d0fe <memset>
   18dec:	2000      	movs	r0, #0
   18dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18df2:	200e      	movs	r0, #14
   18df4:	4770      	bx	lr
   18df6:	bf00      	nop
   18df8:	20020954 	.word	0x20020954
   18dfc:	20020a90 	.word	0x20020a90
   18e00:	20020a10 	.word	0x20020a10
   18e04:	200209f4 	.word	0x200209f4

00018e08 <rpc_message_send>:
   18e08:	b168      	cbz	r0, 18e26 <rpc_message_send+0x1e>
   18e0a:	b171      	cbz	r1, 18e2a <rpc_message_send+0x22>
   18e0c:	4a09      	ldr	r2, [pc, #36]	; (18e34 <rpc_message_send+0x2c>)
   18e0e:	6853      	ldr	r3, [r2, #4]
   18e10:	b16b      	cbz	r3, 18e2e <rpc_message_send+0x26>
   18e12:	684b      	ldr	r3, [r1, #4]
   18e14:	8008      	strh	r0, [r1, #0]
   18e16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   18e1a:	f043 0302 	orr.w	r3, r3, #2
   18e1e:	6812      	ldr	r2, [r2, #0]
   18e20:	604b      	str	r3, [r1, #4]
   18e22:	4608      	mov	r0, r1
   18e24:	4710      	bx	r2
   18e26:	2007      	movs	r0, #7
   18e28:	4770      	bx	lr
   18e2a:	200e      	movs	r0, #14
   18e2c:	4770      	bx	lr
   18e2e:	2008      	movs	r0, #8
   18e30:	4770      	bx	lr
   18e32:	bf00      	nop
   18e34:	200209f4 	.word	0x200209f4

00018e38 <rpc_message_alloc>:
   18e38:	b35a      	cbz	r2, 18e92 <rpc_message_alloc+0x5a>
   18e3a:	b330      	cbz	r0, 18e8a <rpc_message_alloc+0x52>
   18e3c:	2300      	movs	r3, #0
   18e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18e42:	4f15      	ldr	r7, [pc, #84]	; (18e98 <rpc_message_alloc+0x60>)
   18e44:	6013      	str	r3, [r2, #0]
   18e46:	687b      	ldr	r3, [r7, #4]
   18e48:	b30b      	cbz	r3, 18e8e <rpc_message_alloc+0x56>
   18e4a:	4615      	mov	r5, r2
   18e4c:	460c      	mov	r4, r1
   18e4e:	4606      	mov	r6, r0
   18e50:	b959      	cbnz	r1, 18e6a <rpc_message_alloc+0x32>
   18e52:	4798      	blx	r3
   18e54:	4603      	mov	r3, r0
   18e56:	b1a8      	cbz	r0, 18e84 <rpc_message_alloc+0x4c>
   18e58:	46a0      	mov	r8, r4
   18e5a:	60dc      	str	r4, [r3, #12]
   18e5c:	f8c3 8008 	str.w	r8, [r3, #8]
   18e60:	801e      	strh	r6, [r3, #0]
   18e62:	602b      	str	r3, [r5, #0]
   18e64:	2000      	movs	r0, #0
   18e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18e6a:	68bb      	ldr	r3, [r7, #8]
   18e6c:	4608      	mov	r0, r1
   18e6e:	4798      	blx	r3
   18e70:	4680      	mov	r8, r0
   18e72:	b138      	cbz	r0, 18e84 <rpc_message_alloc+0x4c>
   18e74:	687b      	ldr	r3, [r7, #4]
   18e76:	4798      	blx	r3
   18e78:	4603      	mov	r3, r0
   18e7a:	2800      	cmp	r0, #0
   18e7c:	d1ed      	bne.n	18e5a <rpc_message_alloc+0x22>
   18e7e:	693b      	ldr	r3, [r7, #16]
   18e80:	4640      	mov	r0, r8
   18e82:	4798      	blx	r3
   18e84:	2004      	movs	r0, #4
   18e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18e8a:	2007      	movs	r0, #7
   18e8c:	4770      	bx	lr
   18e8e:	2008      	movs	r0, #8
   18e90:	e7f9      	b.n	18e86 <rpc_message_alloc+0x4e>
   18e92:	200e      	movs	r0, #14
   18e94:	4770      	bx	lr
   18e96:	bf00      	nop
   18e98:	200209f4 	.word	0x200209f4

00018e9c <rpc_message_free>:
   18e9c:	2800      	cmp	r0, #0
   18e9e:	f000 808c 	beq.w	18fba <rpc_message_free+0x11e>
   18ea2:	2900      	cmp	r1, #0
   18ea4:	f000 80e9 	beq.w	1907a <rpc_message_free+0x1de>
   18ea8:	b538      	push	{r3, r4, r5, lr}
   18eaa:	4a83      	ldr	r2, [pc, #524]	; (190b8 <rpc_message_free+0x21c>)
   18eac:	6853      	ldr	r3, [r2, #4]
   18eae:	2b00      	cmp	r3, #0
   18eb0:	f000 8085 	beq.w	18fbe <rpc_message_free+0x122>
   18eb4:	4c81      	ldr	r4, [pc, #516]	; (190bc <rpc_message_free+0x220>)
   18eb6:	4608      	mov	r0, r1
   18eb8:	6863      	ldr	r3, [r4, #4]
   18eba:	4299      	cmp	r1, r3
   18ebc:	f000 8085 	beq.w	18fca <rpc_message_free+0x12e>
   18ec0:	68e3      	ldr	r3, [r4, #12]
   18ec2:	4298      	cmp	r0, r3
   18ec4:	f000 808e 	beq.w	18fe4 <rpc_message_free+0x148>
   18ec8:	6963      	ldr	r3, [r4, #20]
   18eca:	4298      	cmp	r0, r3
   18ecc:	f000 8090 	beq.w	18ff0 <rpc_message_free+0x154>
   18ed0:	69e3      	ldr	r3, [r4, #28]
   18ed2:	4298      	cmp	r0, r3
   18ed4:	f000 8092 	beq.w	18ffc <rpc_message_free+0x160>
   18ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18eda:	4298      	cmp	r0, r3
   18edc:	f000 8095 	beq.w	1900a <rpc_message_free+0x16e>
   18ee0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   18ee2:	4298      	cmp	r0, r3
   18ee4:	f000 8098 	beq.w	19018 <rpc_message_free+0x17c>
   18ee8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   18eea:	4298      	cmp	r0, r3
   18eec:	f000 809b 	beq.w	19026 <rpc_message_free+0x18a>
   18ef0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   18ef2:	4298      	cmp	r0, r3
   18ef4:	f000 809e 	beq.w	19034 <rpc_message_free+0x198>
   18ef8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   18efa:	4298      	cmp	r0, r3
   18efc:	f000 80a1 	beq.w	19042 <rpc_message_free+0x1a6>
   18f00:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   18f02:	4298      	cmp	r0, r3
   18f04:	f000 80a4 	beq.w	19050 <rpc_message_free+0x1b4>
   18f08:	6d63      	ldr	r3, [r4, #84]	; 0x54
   18f0a:	4298      	cmp	r0, r3
   18f0c:	f000 80a7 	beq.w	1905e <rpc_message_free+0x1c2>
   18f10:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   18f12:	4298      	cmp	r0, r3
   18f14:	f000 80aa 	beq.w	1906c <rpc_message_free+0x1d0>
   18f18:	6e63      	ldr	r3, [r4, #100]	; 0x64
   18f1a:	4298      	cmp	r0, r3
   18f1c:	f000 80af 	beq.w	1907e <rpc_message_free+0x1e2>
   18f20:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   18f22:	4298      	cmp	r0, r3
   18f24:	f000 80b2 	beq.w	1908c <rpc_message_free+0x1f0>
   18f28:	6f63      	ldr	r3, [r4, #116]	; 0x74
   18f2a:	4298      	cmp	r0, r3
   18f2c:	f000 80b5 	beq.w	1909a <rpc_message_free+0x1fe>
   18f30:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   18f32:	4283      	cmp	r3, r0
   18f34:	f000 80b8 	beq.w	190a8 <rpc_message_free+0x20c>
   18f38:	68d3      	ldr	r3, [r2, #12]
   18f3a:	4798      	blx	r3
   18f3c:	7823      	ldrb	r3, [r4, #0]
   18f3e:	2b04      	cmp	r3, #4
   18f40:	d03f      	beq.n	18fc2 <rpc_message_free+0x126>
   18f42:	7a23      	ldrb	r3, [r4, #8]
   18f44:	2b04      	cmp	r3, #4
   18f46:	d03c      	beq.n	18fc2 <rpc_message_free+0x126>
   18f48:	7c23      	ldrb	r3, [r4, #16]
   18f4a:	2b04      	cmp	r3, #4
   18f4c:	d039      	beq.n	18fc2 <rpc_message_free+0x126>
   18f4e:	7e23      	ldrb	r3, [r4, #24]
   18f50:	2b04      	cmp	r3, #4
   18f52:	d036      	beq.n	18fc2 <rpc_message_free+0x126>
   18f54:	f894 3020 	ldrb.w	r3, [r4, #32]
   18f58:	2b04      	cmp	r3, #4
   18f5a:	d032      	beq.n	18fc2 <rpc_message_free+0x126>
   18f5c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   18f60:	2b04      	cmp	r3, #4
   18f62:	d02e      	beq.n	18fc2 <rpc_message_free+0x126>
   18f64:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   18f68:	2b04      	cmp	r3, #4
   18f6a:	d02a      	beq.n	18fc2 <rpc_message_free+0x126>
   18f6c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   18f70:	2b04      	cmp	r3, #4
   18f72:	d026      	beq.n	18fc2 <rpc_message_free+0x126>
   18f74:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   18f78:	2b04      	cmp	r3, #4
   18f7a:	d022      	beq.n	18fc2 <rpc_message_free+0x126>
   18f7c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   18f80:	2b04      	cmp	r3, #4
   18f82:	d01e      	beq.n	18fc2 <rpc_message_free+0x126>
   18f84:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   18f88:	2b04      	cmp	r3, #4
   18f8a:	d01a      	beq.n	18fc2 <rpc_message_free+0x126>
   18f8c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   18f90:	2b04      	cmp	r3, #4
   18f92:	d016      	beq.n	18fc2 <rpc_message_free+0x126>
   18f94:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   18f98:	2b04      	cmp	r3, #4
   18f9a:	d012      	beq.n	18fc2 <rpc_message_free+0x126>
   18f9c:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   18fa0:	2b04      	cmp	r3, #4
   18fa2:	d00e      	beq.n	18fc2 <rpc_message_free+0x126>
   18fa4:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   18fa8:	2b04      	cmp	r3, #4
   18faa:	d00a      	beq.n	18fc2 <rpc_message_free+0x126>
   18fac:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   18fb0:	2b04      	cmp	r3, #4
   18fb2:	bf18      	it	ne
   18fb4:	2000      	movne	r0, #0
   18fb6:	d004      	beq.n	18fc2 <rpc_message_free+0x126>
   18fb8:	bd38      	pop	{r3, r4, r5, pc}
   18fba:	2007      	movs	r0, #7
   18fbc:	4770      	bx	lr
   18fbe:	2008      	movs	r0, #8
   18fc0:	bd38      	pop	{r3, r4, r5, pc}
   18fc2:	f7f8 fad1 	bl	11568 <bsd_os_application_irq_set>
   18fc6:	2000      	movs	r0, #0
   18fc8:	bd38      	pop	{r3, r4, r5, pc}
   18fca:	7821      	ldrb	r1, [r4, #0]
   18fcc:	2903      	cmp	r1, #3
   18fce:	f47f af77 	bne.w	18ec0 <rpc_message_free+0x24>
   18fd2:	2100      	movs	r1, #0
   18fd4:	2501      	movs	r5, #1
   18fd6:	4618      	mov	r0, r3
   18fd8:	68d2      	ldr	r2, [r2, #12]
   18fda:	f804 5031 	strb.w	r5, [r4, r1, lsl #3]
   18fde:	4790      	blx	r2
   18fe0:	2000      	movs	r0, #0
   18fe2:	bd38      	pop	{r3, r4, r5, pc}
   18fe4:	7a21      	ldrb	r1, [r4, #8]
   18fe6:	2903      	cmp	r1, #3
   18fe8:	f47f af6e 	bne.w	18ec8 <rpc_message_free+0x2c>
   18fec:	2101      	movs	r1, #1
   18fee:	e7f1      	b.n	18fd4 <rpc_message_free+0x138>
   18ff0:	7c21      	ldrb	r1, [r4, #16]
   18ff2:	2903      	cmp	r1, #3
   18ff4:	f47f af6c 	bne.w	18ed0 <rpc_message_free+0x34>
   18ff8:	2102      	movs	r1, #2
   18ffa:	e7eb      	b.n	18fd4 <rpc_message_free+0x138>
   18ffc:	7e21      	ldrb	r1, [r4, #24]
   18ffe:	2903      	cmp	r1, #3
   19000:	d0e8      	beq.n	18fd4 <rpc_message_free+0x138>
   19002:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19004:	4298      	cmp	r0, r3
   19006:	f47f af6b 	bne.w	18ee0 <rpc_message_free+0x44>
   1900a:	f894 1020 	ldrb.w	r1, [r4, #32]
   1900e:	2903      	cmp	r1, #3
   19010:	f47f af66 	bne.w	18ee0 <rpc_message_free+0x44>
   19014:	2104      	movs	r1, #4
   19016:	e7dd      	b.n	18fd4 <rpc_message_free+0x138>
   19018:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   1901c:	2903      	cmp	r1, #3
   1901e:	f47f af63 	bne.w	18ee8 <rpc_message_free+0x4c>
   19022:	2105      	movs	r1, #5
   19024:	e7d6      	b.n	18fd4 <rpc_message_free+0x138>
   19026:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   1902a:	2903      	cmp	r1, #3
   1902c:	f47f af60 	bne.w	18ef0 <rpc_message_free+0x54>
   19030:	2106      	movs	r1, #6
   19032:	e7cf      	b.n	18fd4 <rpc_message_free+0x138>
   19034:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   19038:	2903      	cmp	r1, #3
   1903a:	f47f af5d 	bne.w	18ef8 <rpc_message_free+0x5c>
   1903e:	2107      	movs	r1, #7
   19040:	e7c8      	b.n	18fd4 <rpc_message_free+0x138>
   19042:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   19046:	2903      	cmp	r1, #3
   19048:	f47f af5a 	bne.w	18f00 <rpc_message_free+0x64>
   1904c:	2108      	movs	r1, #8
   1904e:	e7c1      	b.n	18fd4 <rpc_message_free+0x138>
   19050:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
   19054:	2903      	cmp	r1, #3
   19056:	f47f af57 	bne.w	18f08 <rpc_message_free+0x6c>
   1905a:	2109      	movs	r1, #9
   1905c:	e7ba      	b.n	18fd4 <rpc_message_free+0x138>
   1905e:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   19062:	2903      	cmp	r1, #3
   19064:	f47f af54 	bne.w	18f10 <rpc_message_free+0x74>
   19068:	210a      	movs	r1, #10
   1906a:	e7b3      	b.n	18fd4 <rpc_message_free+0x138>
   1906c:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
   19070:	2903      	cmp	r1, #3
   19072:	f47f af51 	bne.w	18f18 <rpc_message_free+0x7c>
   19076:	210b      	movs	r1, #11
   19078:	e7ac      	b.n	18fd4 <rpc_message_free+0x138>
   1907a:	200e      	movs	r0, #14
   1907c:	4770      	bx	lr
   1907e:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   19082:	2903      	cmp	r1, #3
   19084:	f47f af4c 	bne.w	18f20 <rpc_message_free+0x84>
   19088:	210c      	movs	r1, #12
   1908a:	e7a3      	b.n	18fd4 <rpc_message_free+0x138>
   1908c:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   19090:	2903      	cmp	r1, #3
   19092:	f47f af49 	bne.w	18f28 <rpc_message_free+0x8c>
   19096:	210d      	movs	r1, #13
   19098:	e79c      	b.n	18fd4 <rpc_message_free+0x138>
   1909a:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
   1909e:	2903      	cmp	r1, #3
   190a0:	f47f af46 	bne.w	18f30 <rpc_message_free+0x94>
   190a4:	210e      	movs	r1, #14
   190a6:	e795      	b.n	18fd4 <rpc_message_free+0x138>
   190a8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   190ac:	2b03      	cmp	r3, #3
   190ae:	f47f af43 	bne.w	18f38 <rpc_message_free+0x9c>
   190b2:	4603      	mov	r3, r0
   190b4:	210f      	movs	r1, #15
   190b6:	e78d      	b.n	18fd4 <rpc_message_free+0x138>
   190b8:	200209f4 	.word	0x200209f4
   190bc:	20020a8c 	.word	0x20020a8c

000190c0 <rpc_message_data_free>:
   190c0:	2800      	cmp	r0, #0
   190c2:	f000 8091 	beq.w	191e8 <rpc_message_data_free+0x128>
   190c6:	2900      	cmp	r1, #0
   190c8:	f000 80e4 	beq.w	19294 <rpc_message_data_free+0x1d4>
   190cc:	b538      	push	{r3, r4, r5, lr}
   190ce:	4a81      	ldr	r2, [pc, #516]	; (192d4 <rpc_message_data_free+0x214>)
   190d0:	6853      	ldr	r3, [r2, #4]
   190d2:	2b00      	cmp	r3, #0
   190d4:	f000 808a 	beq.w	191ec <rpc_message_data_free+0x12c>
   190d8:	4b7f      	ldr	r3, [pc, #508]	; (192d8 <rpc_message_data_free+0x218>)
   190da:	681c      	ldr	r4, [r3, #0]
   190dc:	42a1      	cmp	r1, r4
   190de:	f000 8087 	beq.w	191f0 <rpc_message_data_free+0x130>
   190e2:	689c      	ldr	r4, [r3, #8]
   190e4:	42a1      	cmp	r1, r4
   190e6:	f000 808f 	beq.w	19208 <rpc_message_data_free+0x148>
   190ea:	691c      	ldr	r4, [r3, #16]
   190ec:	42a1      	cmp	r1, r4
   190ee:	f000 8091 	beq.w	19214 <rpc_message_data_free+0x154>
   190f2:	699c      	ldr	r4, [r3, #24]
   190f4:	42a1      	cmp	r1, r4
   190f6:	f000 8093 	beq.w	19220 <rpc_message_data_free+0x160>
   190fa:	6a1c      	ldr	r4, [r3, #32]
   190fc:	42a1      	cmp	r1, r4
   190fe:	f000 8095 	beq.w	1922c <rpc_message_data_free+0x16c>
   19102:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   19104:	42a1      	cmp	r1, r4
   19106:	f000 8097 	beq.w	19238 <rpc_message_data_free+0x178>
   1910a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   1910c:	42a1      	cmp	r1, r4
   1910e:	f000 8099 	beq.w	19244 <rpc_message_data_free+0x184>
   19112:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   19114:	42a1      	cmp	r1, r4
   19116:	f000 809b 	beq.w	19250 <rpc_message_data_free+0x190>
   1911a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   1911c:	42a1      	cmp	r1, r4
   1911e:	f000 809d 	beq.w	1925c <rpc_message_data_free+0x19c>
   19122:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   19124:	42a1      	cmp	r1, r4
   19126:	f000 80a0 	beq.w	1926a <rpc_message_data_free+0x1aa>
   1912a:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   1912c:	42a1      	cmp	r1, r4
   1912e:	f000 80a3 	beq.w	19278 <rpc_message_data_free+0x1b8>
   19132:	6d9c      	ldr	r4, [r3, #88]	; 0x58
   19134:	42a1      	cmp	r1, r4
   19136:	f000 80a6 	beq.w	19286 <rpc_message_data_free+0x1c6>
   1913a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   1913c:	42a1      	cmp	r1, r4
   1913e:	f000 80ab 	beq.w	19298 <rpc_message_data_free+0x1d8>
   19142:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   19144:	42a1      	cmp	r1, r4
   19146:	f000 80ae 	beq.w	192a6 <rpc_message_data_free+0x1e6>
   1914a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   1914c:	42a1      	cmp	r1, r4
   1914e:	f000 80b1 	beq.w	192b4 <rpc_message_data_free+0x1f4>
   19152:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   19154:	428c      	cmp	r4, r1
   19156:	f000 80b4 	beq.w	192c2 <rpc_message_data_free+0x202>
   1915a:	6913      	ldr	r3, [r2, #16]
   1915c:	4608      	mov	r0, r1
   1915e:	4798      	blx	r3
   19160:	4b5e      	ldr	r3, [pc, #376]	; (192dc <rpc_message_data_free+0x21c>)
   19162:	781a      	ldrb	r2, [r3, #0]
   19164:	2a04      	cmp	r2, #4
   19166:	d03b      	beq.n	191e0 <rpc_message_data_free+0x120>
   19168:	7a1a      	ldrb	r2, [r3, #8]
   1916a:	2a04      	cmp	r2, #4
   1916c:	d038      	beq.n	191e0 <rpc_message_data_free+0x120>
   1916e:	7c1a      	ldrb	r2, [r3, #16]
   19170:	2a04      	cmp	r2, #4
   19172:	d035      	beq.n	191e0 <rpc_message_data_free+0x120>
   19174:	7e1a      	ldrb	r2, [r3, #24]
   19176:	2a04      	cmp	r2, #4
   19178:	d032      	beq.n	191e0 <rpc_message_data_free+0x120>
   1917a:	f893 2020 	ldrb.w	r2, [r3, #32]
   1917e:	2a04      	cmp	r2, #4
   19180:	d02e      	beq.n	191e0 <rpc_message_data_free+0x120>
   19182:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   19186:	2a04      	cmp	r2, #4
   19188:	d02a      	beq.n	191e0 <rpc_message_data_free+0x120>
   1918a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   1918e:	2a04      	cmp	r2, #4
   19190:	d026      	beq.n	191e0 <rpc_message_data_free+0x120>
   19192:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   19196:	2a04      	cmp	r2, #4
   19198:	d022      	beq.n	191e0 <rpc_message_data_free+0x120>
   1919a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   1919e:	2a04      	cmp	r2, #4
   191a0:	d01e      	beq.n	191e0 <rpc_message_data_free+0x120>
   191a2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   191a6:	2a04      	cmp	r2, #4
   191a8:	d01a      	beq.n	191e0 <rpc_message_data_free+0x120>
   191aa:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   191ae:	2a04      	cmp	r2, #4
   191b0:	d016      	beq.n	191e0 <rpc_message_data_free+0x120>
   191b2:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   191b6:	2a04      	cmp	r2, #4
   191b8:	d012      	beq.n	191e0 <rpc_message_data_free+0x120>
   191ba:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   191be:	2a04      	cmp	r2, #4
   191c0:	d00e      	beq.n	191e0 <rpc_message_data_free+0x120>
   191c2:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   191c6:	2a04      	cmp	r2, #4
   191c8:	d00a      	beq.n	191e0 <rpc_message_data_free+0x120>
   191ca:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   191ce:	2a04      	cmp	r2, #4
   191d0:	d006      	beq.n	191e0 <rpc_message_data_free+0x120>
   191d2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   191d6:	2b04      	cmp	r3, #4
   191d8:	bf18      	it	ne
   191da:	2000      	movne	r0, #0
   191dc:	d000      	beq.n	191e0 <rpc_message_data_free+0x120>
   191de:	bd38      	pop	{r3, r4, r5, pc}
   191e0:	f7f8 f9c2 	bl	11568 <bsd_os_application_irq_set>
   191e4:	2000      	movs	r0, #0
   191e6:	bd38      	pop	{r3, r4, r5, pc}
   191e8:	2007      	movs	r0, #7
   191ea:	4770      	bx	lr
   191ec:	2008      	movs	r0, #8
   191ee:	bd38      	pop	{r3, r4, r5, pc}
   191f0:	889c      	ldrh	r4, [r3, #4]
   191f2:	4284      	cmp	r4, r0
   191f4:	f47f af75 	bne.w	190e2 <rpc_message_data_free+0x22>
   191f8:	2400      	movs	r4, #0
   191fa:	2000      	movs	r0, #0
   191fc:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   19200:	f843 0034 	str.w	r0, [r3, r4, lsl #3]
   19204:	80a8      	strh	r0, [r5, #4]
   19206:	e7a8      	b.n	1915a <rpc_message_data_free+0x9a>
   19208:	899c      	ldrh	r4, [r3, #12]
   1920a:	4284      	cmp	r4, r0
   1920c:	f47f af6d 	bne.w	190ea <rpc_message_data_free+0x2a>
   19210:	2401      	movs	r4, #1
   19212:	e7f2      	b.n	191fa <rpc_message_data_free+0x13a>
   19214:	8a9c      	ldrh	r4, [r3, #20]
   19216:	4284      	cmp	r4, r0
   19218:	f47f af6b 	bne.w	190f2 <rpc_message_data_free+0x32>
   1921c:	2402      	movs	r4, #2
   1921e:	e7ec      	b.n	191fa <rpc_message_data_free+0x13a>
   19220:	8b9c      	ldrh	r4, [r3, #28]
   19222:	4284      	cmp	r4, r0
   19224:	f47f af69 	bne.w	190fa <rpc_message_data_free+0x3a>
   19228:	2403      	movs	r4, #3
   1922a:	e7e6      	b.n	191fa <rpc_message_data_free+0x13a>
   1922c:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
   1922e:	4284      	cmp	r4, r0
   19230:	f47f af67 	bne.w	19102 <rpc_message_data_free+0x42>
   19234:	2404      	movs	r4, #4
   19236:	e7e0      	b.n	191fa <rpc_message_data_free+0x13a>
   19238:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
   1923a:	4284      	cmp	r4, r0
   1923c:	f47f af65 	bne.w	1910a <rpc_message_data_free+0x4a>
   19240:	2405      	movs	r4, #5
   19242:	e7da      	b.n	191fa <rpc_message_data_free+0x13a>
   19244:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
   19246:	4284      	cmp	r4, r0
   19248:	f47f af63 	bne.w	19112 <rpc_message_data_free+0x52>
   1924c:	2406      	movs	r4, #6
   1924e:	e7d4      	b.n	191fa <rpc_message_data_free+0x13a>
   19250:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   19252:	4284      	cmp	r4, r0
   19254:	f47f af61 	bne.w	1911a <rpc_message_data_free+0x5a>
   19258:	2407      	movs	r4, #7
   1925a:	e7ce      	b.n	191fa <rpc_message_data_free+0x13a>
   1925c:	f8b3 4044 	ldrh.w	r4, [r3, #68]	; 0x44
   19260:	4284      	cmp	r4, r0
   19262:	f47f af5e 	bne.w	19122 <rpc_message_data_free+0x62>
   19266:	2408      	movs	r4, #8
   19268:	e7c7      	b.n	191fa <rpc_message_data_free+0x13a>
   1926a:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
   1926e:	4284      	cmp	r4, r0
   19270:	f47f af5b 	bne.w	1912a <rpc_message_data_free+0x6a>
   19274:	2409      	movs	r4, #9
   19276:	e7c0      	b.n	191fa <rpc_message_data_free+0x13a>
   19278:	f8b3 4054 	ldrh.w	r4, [r3, #84]	; 0x54
   1927c:	4284      	cmp	r4, r0
   1927e:	f47f af58 	bne.w	19132 <rpc_message_data_free+0x72>
   19282:	240a      	movs	r4, #10
   19284:	e7b9      	b.n	191fa <rpc_message_data_free+0x13a>
   19286:	f8b3 405c 	ldrh.w	r4, [r3, #92]	; 0x5c
   1928a:	4284      	cmp	r4, r0
   1928c:	f47f af55 	bne.w	1913a <rpc_message_data_free+0x7a>
   19290:	240b      	movs	r4, #11
   19292:	e7b2      	b.n	191fa <rpc_message_data_free+0x13a>
   19294:	200e      	movs	r0, #14
   19296:	4770      	bx	lr
   19298:	f8b3 4064 	ldrh.w	r4, [r3, #100]	; 0x64
   1929c:	4284      	cmp	r4, r0
   1929e:	f47f af50 	bne.w	19142 <rpc_message_data_free+0x82>
   192a2:	240c      	movs	r4, #12
   192a4:	e7a9      	b.n	191fa <rpc_message_data_free+0x13a>
   192a6:	f8b3 406c 	ldrh.w	r4, [r3, #108]	; 0x6c
   192aa:	4284      	cmp	r4, r0
   192ac:	f47f af4d 	bne.w	1914a <rpc_message_data_free+0x8a>
   192b0:	240d      	movs	r4, #13
   192b2:	e7a2      	b.n	191fa <rpc_message_data_free+0x13a>
   192b4:	f8b3 4074 	ldrh.w	r4, [r3, #116]	; 0x74
   192b8:	4284      	cmp	r4, r0
   192ba:	f47f af4a 	bne.w	19152 <rpc_message_data_free+0x92>
   192be:	240e      	movs	r4, #14
   192c0:	e79b      	b.n	191fa <rpc_message_data_free+0x13a>
   192c2:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
   192c6:	4284      	cmp	r4, r0
   192c8:	bf08      	it	eq
   192ca:	240f      	moveq	r4, #15
   192cc:	f47f af45 	bne.w	1915a <rpc_message_data_free+0x9a>
   192d0:	e793      	b.n	191fa <rpc_message_data_free+0x13a>
   192d2:	bf00      	nop
   192d4:	200209f4 	.word	0x200209f4
   192d8:	20020a0c 	.word	0x20020a0c
   192dc:	20020a8c 	.word	0x20020a8c

000192e0 <packet_free_cb>:
   192e0:	b510      	push	{r4, lr}
   192e2:	4604      	mov	r4, r0
   192e4:	b118      	cbz	r0, 192ee <packet_free_cb+0xe>
   192e6:	6800      	ldr	r0, [r0, #0]
   192e8:	b108      	cbz	r0, 192ee <packet_free_cb+0xe>
   192ea:	f001 f829 	bl	1a340 <rpc_gnss_client_data_free>
   192ee:	68a0      	ldr	r0, [r4, #8]
   192f0:	b118      	cbz	r0, 192fa <packet_free_cb+0x1a>
   192f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   192f6:	f7fa b93b 	b.w	13570 <nrf_free>
   192fa:	bd10      	pop	{r4, pc}

000192fc <rpc_gnss_event_handler>:
   192fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19300:	4b64      	ldr	r3, [pc, #400]	; (19494 <rpc_gnss_event_handler+0x198>)
   19302:	4606      	mov	r6, r0
   19304:	6800      	ldr	r0, [r0, #0]
   19306:	881b      	ldrh	r3, [r3, #0]
   19308:	6802      	ldr	r2, [r0, #0]
   1930a:	4f63      	ldr	r7, [pc, #396]	; (19498 <rpc_gnss_event_handler+0x19c>)
   1930c:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   19310:	b084      	sub	sp, #16
   19312:	460d      	mov	r5, r1
   19314:	6038      	str	r0, [r7, #0]
   19316:	d038      	beq.n	1938a <rpc_gnss_event_handler+0x8e>
   19318:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   1931c:	33ff      	adds	r3, #255	; 0xff
   1931e:	b29b      	uxth	r3, r3
   19320:	2b02      	cmp	r3, #2
   19322:	d810      	bhi.n	19346 <rpc_gnss_event_handler+0x4a>
   19324:	4c5d      	ldr	r4, [pc, #372]	; (1949c <rpc_gnss_event_handler+0x1a0>)
   19326:	6823      	ldr	r3, [r4, #0]
   19328:	075a      	lsls	r2, r3, #29
   1932a:	d410      	bmi.n	1934e <rpc_gnss_event_handler+0x52>
   1932c:	6823      	ldr	r3, [r4, #0]
   1932e:	079b      	lsls	r3, r3, #30
   19330:	d503      	bpl.n	1933a <rpc_gnss_event_handler+0x3e>
   19332:	f244 0303 	movw	r3, #16387	; 0x4003
   19336:	429d      	cmp	r5, r3
   19338:	d009      	beq.n	1934e <rpc_gnss_event_handler+0x52>
   1933a:	6830      	ldr	r0, [r6, #0]
   1933c:	b118      	cbz	r0, 19346 <rpc_gnss_event_handler+0x4a>
   1933e:	f000 ffff 	bl	1a340 <rpc_gnss_client_data_free>
   19342:	2300      	movs	r3, #0
   19344:	603b      	str	r3, [r7, #0]
   19346:	2000      	movs	r0, #0
   19348:	b004      	add	sp, #16
   1934a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1934e:	2002      	movs	r0, #2
   19350:	f7fa f904 	bl	1355c <nrf_malloc>
   19354:	4680      	mov	r8, r0
   19356:	2800      	cmp	r0, #0
   19358:	f000 8093 	beq.w	19482 <rpc_gnss_event_handler+0x186>
   1935c:	2302      	movs	r3, #2
   1935e:	8005      	strh	r5, [r0, #0]
   19360:	6831      	ldr	r1, [r6, #0]
   19362:	6872      	ldr	r2, [r6, #4]
   19364:	484e      	ldr	r0, [pc, #312]	; (194a0 <rpc_gnss_event_handler+0x1a4>)
   19366:	e88d 0106 	stmia.w	sp, {r1, r2, r8}
   1936a:	6800      	ldr	r0, [r0, #0]
   1936c:	9303      	str	r3, [sp, #12]
   1936e:	6803      	ldr	r3, [r0, #0]
   19370:	4669      	mov	r1, sp
   19372:	685b      	ldr	r3, [r3, #4]
   19374:	4798      	blx	r3
   19376:	3001      	adds	r0, #1
   19378:	d070      	beq.n	1945c <rpc_gnss_event_handler+0x160>
   1937a:	2000      	movs	r0, #0
   1937c:	6823      	ldr	r3, [r4, #0]
   1937e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   19382:	6023      	str	r3, [r4, #0]
   19384:	b004      	add	sp, #16
   19386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1938a:	4c44      	ldr	r4, [pc, #272]	; (1949c <rpc_gnss_event_handler+0x1a0>)
   1938c:	6823      	ldr	r3, [r4, #0]
   1938e:	01d9      	lsls	r1, r3, #7
   19390:	d523      	bpl.n	193da <rpc_gnss_event_handler+0xde>
   19392:	f242 1302 	movw	r3, #8450	; 0x2102
   19396:	429d      	cmp	r5, r3
   19398:	d11f      	bne.n	193da <rpc_gnss_event_handler+0xde>
   1939a:	6843      	ldr	r3, [r0, #4]
   1939c:	b91b      	cbnz	r3, 193a6 <rpc_gnss_event_handler+0xaa>
   1939e:	6823      	ldr	r3, [r4, #0]
   193a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   193a4:	6023      	str	r3, [r4, #0]
   193a6:	6823      	ldr	r3, [r4, #0]
   193a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   193ac:	6023      	str	r3, [r4, #0]
   193ae:	6823      	ldr	r3, [r4, #0]
   193b0:	025a      	lsls	r2, r3, #9
   193b2:	d430      	bmi.n	19416 <rpc_gnss_event_handler+0x11a>
   193b4:	f242 0305 	movw	r3, #8197	; 0x2005
   193b8:	429d      	cmp	r5, r3
   193ba:	d12c      	bne.n	19416 <rpc_gnss_event_handler+0x11a>
   193bc:	6823      	ldr	r3, [r4, #0]
   193be:	0299      	lsls	r1, r3, #10
   193c0:	d529      	bpl.n	19416 <rpc_gnss_event_handler+0x11a>
   193c2:	6843      	ldr	r3, [r0, #4]
   193c4:	2b00      	cmp	r3, #0
   193c6:	d157      	bne.n	19478 <rpc_gnss_event_handler+0x17c>
   193c8:	6823      	ldr	r3, [r4, #0]
   193ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   193ce:	6023      	str	r3, [r4, #0]
   193d0:	6823      	ldr	r3, [r4, #0]
   193d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   193d6:	6023      	str	r3, [r4, #0]
   193d8:	e01d      	b.n	19416 <rpc_gnss_event_handler+0x11a>
   193da:	6823      	ldr	r3, [r4, #0]
   193dc:	025b      	lsls	r3, r3, #9
   193de:	d50e      	bpl.n	193fe <rpc_gnss_event_handler+0x102>
   193e0:	f242 1303 	movw	r3, #8451	; 0x2103
   193e4:	429d      	cmp	r5, r3
   193e6:	d10a      	bne.n	193fe <rpc_gnss_event_handler+0x102>
   193e8:	6843      	ldr	r3, [r0, #4]
   193ea:	b91b      	cbnz	r3, 193f4 <rpc_gnss_event_handler+0xf8>
   193ec:	6823      	ldr	r3, [r4, #0]
   193ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   193f2:	6023      	str	r3, [r4, #0]
   193f4:	6823      	ldr	r3, [r4, #0]
   193f6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   193fa:	6023      	str	r3, [r4, #0]
   193fc:	e00b      	b.n	19416 <rpc_gnss_event_handler+0x11a>
   193fe:	f242 0301 	movw	r3, #8193	; 0x2001
   19402:	429d      	cmp	r5, r3
   19404:	d10c      	bne.n	19420 <rpc_gnss_event_handler+0x124>
   19406:	6843      	ldr	r3, [r0, #4]
   19408:	b92b      	cbnz	r3, 19416 <rpc_gnss_event_handler+0x11a>
   1940a:	6823      	ldr	r3, [r4, #0]
   1940c:	0c1b      	lsrs	r3, r3, #16
   1940e:	041b      	lsls	r3, r3, #16
   19410:	f043 0302 	orr.w	r3, r3, #2
   19414:	6023      	str	r3, [r4, #0]
   19416:	f000 ff93 	bl	1a340 <rpc_gnss_client_data_free>
   1941a:	2300      	movs	r3, #0
   1941c:	603b      	str	r3, [r7, #0]
   1941e:	e77b      	b.n	19318 <rpc_gnss_event_handler+0x1c>
   19420:	f242 0304 	movw	r3, #8196	; 0x2004
   19424:	429d      	cmp	r5, r3
   19426:	d1c5      	bne.n	193b4 <rpc_gnss_event_handler+0xb8>
   19428:	6843      	ldr	r3, [r0, #4]
   1942a:	b993      	cbnz	r3, 19452 <rpc_gnss_event_handler+0x156>
   1942c:	6823      	ldr	r3, [r4, #0]
   1942e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   19432:	6023      	str	r3, [r4, #0]
   19434:	6823      	ldr	r3, [r4, #0]
   19436:	b29b      	uxth	r3, r3
   19438:	2b03      	cmp	r3, #3
   1943a:	6823      	ldr	r3, [r4, #0]
   1943c:	d016      	beq.n	1946c <rpc_gnss_event_handler+0x170>
   1943e:	b29b      	uxth	r3, r3
   19440:	2b04      	cmp	r3, #4
   19442:	d1d7      	bne.n	193f4 <rpc_gnss_event_handler+0xf8>
   19444:	6823      	ldr	r3, [r4, #0]
   19446:	0c1b      	lsrs	r3, r3, #16
   19448:	041b      	lsls	r3, r3, #16
   1944a:	f043 0302 	orr.w	r3, r3, #2
   1944e:	6023      	str	r3, [r4, #0]
   19450:	e7d0      	b.n	193f4 <rpc_gnss_event_handler+0xf8>
   19452:	6823      	ldr	r3, [r4, #0]
   19454:	b29b      	uxth	r3, r3
   19456:	2b03      	cmp	r3, #3
   19458:	d1cc      	bne.n	193f4 <rpc_gnss_event_handler+0xf8>
   1945a:	e7f3      	b.n	19444 <rpc_gnss_event_handler+0x148>
   1945c:	4640      	mov	r0, r8
   1945e:	f7fa f887 	bl	13570 <nrf_free>
   19462:	6830      	ldr	r0, [r6, #0]
   19464:	2800      	cmp	r0, #0
   19466:	f47f af6a 	bne.w	1933e <rpc_gnss_event_handler+0x42>
   1946a:	e76c      	b.n	19346 <rpc_gnss_event_handler+0x4a>
   1946c:	0c1b      	lsrs	r3, r3, #16
   1946e:	041b      	lsls	r3, r3, #16
   19470:	f043 0304 	orr.w	r3, r3, #4
   19474:	6023      	str	r3, [r4, #0]
   19476:	e7bd      	b.n	193f4 <rpc_gnss_event_handler+0xf8>
   19478:	6823      	ldr	r3, [r4, #0]
   1947a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1947e:	6023      	str	r3, [r4, #0]
   19480:	e7c9      	b.n	19416 <rpc_gnss_event_handler+0x11a>
   19482:	6830      	ldr	r0, [r6, #0]
   19484:	2800      	cmp	r0, #0
   19486:	f43f af5e 	beq.w	19346 <rpc_gnss_event_handler+0x4a>
   1948a:	f000 ff59 	bl	1a340 <rpc_gnss_client_data_free>
   1948e:	f8c7 8000 	str.w	r8, [r7]
   19492:	e758      	b.n	19346 <rpc_gnss_event_handler+0x4a>
   19494:	20024e24 	.word	0x20024e24
   19498:	20020b10 	.word	0x20020b10
   1949c:	20020b0c 	.word	0x20020b0c
   194a0:	20020b14 	.word	0x20020b14

000194a4 <gnss_interface_write>:
   194a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   194a8:	4a75      	ldr	r2, [pc, #468]	; (19680 <gnss_interface_write+0x1dc>)
   194aa:	b09f      	sub	sp, #124	; 0x7c
   194ac:	4290      	cmp	r0, r2
   194ae:	9d26      	ldr	r5, [sp, #152]	; 0x98
   194b0:	f040 80d4 	bne.w	1965c <gnss_interface_write+0x1b8>
   194b4:	2900      	cmp	r1, #0
   194b6:	f000 80c9 	beq.w	1964c <gnss_interface_write+0x1a8>
   194ba:	2d00      	cmp	r5, #0
   194bc:	f000 80c6 	beq.w	1964c <gnss_interface_write+0x1a8>
   194c0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   194c2:	2a02      	cmp	r2, #2
   194c4:	f040 80c2 	bne.w	1964c <gnss_interface_write+0x1a8>
   194c8:	4c6e      	ldr	r4, [pc, #440]	; (19684 <gnss_interface_write+0x1e0>)
   194ca:	6822      	ldr	r2, [r4, #0]
   194cc:	b292      	uxth	r2, r2
   194ce:	2a02      	cmp	r2, #2
   194d0:	d004      	beq.n	194dc <gnss_interface_write+0x38>
   194d2:	6822      	ldr	r2, [r4, #0]
   194d4:	b292      	uxth	r2, r2
   194d6:	2a04      	cmp	r2, #4
   194d8:	f040 80c6 	bne.w	19668 <gnss_interface_write+0x1c4>
   194dc:	0798      	lsls	r0, r3, #30
   194de:	f100 80c9 	bmi.w	19674 <gnss_interface_write+0x1d0>
   194e2:	6820      	ldr	r0, [r4, #0]
   194e4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
   194e8:	d065      	beq.n	195b6 <gnss_interface_write+0x112>
   194ea:	6822      	ldr	r2, [r4, #0]
   194ec:	882b      	ldrh	r3, [r5, #0]
   194ee:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   194f2:	6022      	str	r2, [r4, #0]
   194f4:	6822      	ldr	r2, [r4, #0]
   194f6:	3b01      	subs	r3, #1
   194f8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   194fc:	6022      	str	r2, [r4, #0]
   194fe:	2b07      	cmp	r3, #7
   19500:	f200 80a4 	bhi.w	1964c <gnss_interface_write+0x1a8>
   19504:	e8df f003 	tbb	[pc, r3]
   19508:	696e7378 	.word	0x696e7378
   1950c:	045f5a64 	.word	0x045f5a64
   19510:	4608      	mov	r0, r1
   19512:	a902      	add	r1, sp, #8
   19514:	f000 fec8 	bl	1a2a8 <rpc_gnss_serialize_integrity>
   19518:	2172      	movs	r1, #114	; 0x72
   1951a:	4668      	mov	r0, sp
   1951c:	f000 fede 	bl	1a2dc <rpc_gnss_client_request_alloc>
   19520:	4605      	mov	r5, r0
   19522:	9800      	ldr	r0, [sp, #0]
   19524:	2d00      	cmp	r5, #0
   19526:	d16c      	bne.n	19602 <gnss_interface_write+0x15e>
   19528:	2800      	cmp	r0, #0
   1952a:	d071      	beq.n	19610 <gnss_interface_write+0x16c>
   1952c:	f241 0605 	movw	r6, #4101	; 0x1005
   19530:	f04f 0c49 	mov.w	ip, #73	; 0x49
   19534:	2272      	movs	r2, #114	; 0x72
   19536:	f04f 0e76 	mov.w	lr, #118	; 0x76
   1953a:	f04f 0943 	mov.w	r9, #67	; 0x43
   1953e:	f04f 0854 	mov.w	r8, #84	; 0x54
   19542:	4f51      	ldr	r7, [pc, #324]	; (19688 <gnss_interface_write+0x1e4>)
   19544:	a91e      	add	r1, sp, #120	; 0x78
   19546:	883b      	ldrh	r3, [r7, #0]
   19548:	f880 c00f 	strb.w	ip, [r0, #15]
   1954c:	3301      	adds	r3, #1
   1954e:	b29b      	uxth	r3, r3
   19550:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   19554:	f841 cd74 	str.w	ip, [r1, #-116]!
   19558:	7145      	strb	r5, [r0, #5]
   1955a:	7185      	strb	r5, [r0, #6]
   1955c:	71c5      	strb	r5, [r0, #7]
   1955e:	7205      	strb	r5, [r0, #8]
   19560:	7245      	strb	r5, [r0, #9]
   19562:	7285      	strb	r5, [r0, #10]
   19564:	72c5      	strb	r5, [r0, #11]
   19566:	7102      	strb	r2, [r0, #4]
   19568:	f880 900c 	strb.w	r9, [r0, #12]
   1956c:	f880 800d 	strb.w	r8, [r0, #13]
   19570:	f880 e00e 	strb.w	lr, [r0, #14]
   19574:	6800      	ldr	r0, [r0, #0]
   19576:	803b      	strh	r3, [r7, #0]
   19578:	f003 fd97 	bl	1d0aa <memcpy>
   1957c:	4b43      	ldr	r3, [pc, #268]	; (1968c <gnss_interface_write+0x1e8>)
   1957e:	4631      	mov	r1, r6
   19580:	9800      	ldr	r0, [sp, #0]
   19582:	601d      	str	r5, [r3, #0]
   19584:	f000 febe 	bl	1a304 <rpc_gnss_client_request_send>
   19588:	2800      	cmp	r0, #0
   1958a:	d148      	bne.n	1961e <gnss_interface_write+0x17a>
   1958c:	6823      	ldr	r3, [r4, #0]
   1958e:	0299      	lsls	r1, r3, #10
   19590:	d50d      	bpl.n	195ae <gnss_interface_write+0x10a>
   19592:	4e3f      	ldr	r6, [pc, #252]	; (19690 <gnss_interface_write+0x1ec>)
   19594:	4d3a      	ldr	r5, [pc, #232]	; (19680 <gnss_interface_write+0x1dc>)
   19596:	e001      	b.n	1959c <gnss_interface_write+0xf8>
   19598:	2800      	cmp	r0, #0
   1959a:	d150      	bne.n	1963e <gnss_interface_write+0x19a>
   1959c:	4631      	mov	r1, r6
   1959e:	4628      	mov	r0, r5
   195a0:	f7f7 fea2 	bl	112e8 <bsd_os_timedwait>
   195a4:	6823      	ldr	r3, [r4, #0]
   195a6:	029a      	lsls	r2, r3, #10
   195a8:	d4f6      	bmi.n	19598 <gnss_interface_write+0xf4>
   195aa:	2800      	cmp	r0, #0
   195ac:	d147      	bne.n	1963e <gnss_interface_write+0x19a>
   195ae:	6823      	ldr	r3, [r4, #0]
   195b0:	039b      	lsls	r3, r3, #14
   195b2:	d53f      	bpl.n	19634 <gnss_interface_write+0x190>
   195b4:	2000      	movs	r0, #0
   195b6:	b01f      	add	sp, #124	; 0x7c
   195b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   195bc:	4608      	mov	r0, r1
   195be:	a902      	add	r1, sp, #8
   195c0:	f000 fe2a 	bl	1a218 <rpc_gnss_serialize_time_and_sv_tow>
   195c4:	e7a8      	b.n	19518 <gnss_interface_write+0x74>
   195c6:	4608      	mov	r0, r1
   195c8:	a902      	add	r1, sp, #8
   195ca:	f000 fe4d 	bl	1a268 <rpc_gnss_serialize_location>
   195ce:	e7a3      	b.n	19518 <gnss_interface_write+0x74>
   195d0:	4608      	mov	r0, r1
   195d2:	a902      	add	r1, sp, #8
   195d4:	f000 fe06 	bl	1a1e4 <rpc_gnss_serialize_nequick>
   195d8:	e79e      	b.n	19518 <gnss_interface_write+0x74>
   195da:	4608      	mov	r0, r1
   195dc:	a902      	add	r1, sp, #8
   195de:	f000 fddd 	bl	1a19c <rpc_gnss_serialize_klob>
   195e2:	e799      	b.n	19518 <gnss_interface_write+0x74>
   195e4:	4608      	mov	r0, r1
   195e6:	a902      	add	r1, sp, #8
   195e8:	f000 fda6 	bl	1a138 <rpc_gnss_serialize_alm>
   195ec:	e794      	b.n	19518 <gnss_interface_write+0x74>
   195ee:	4608      	mov	r0, r1
   195f0:	a902      	add	r1, sp, #8
   195f2:	f000 fd4f 	bl	1a094 <rpc_gnss_serialize_ephe>
   195f6:	e78f      	b.n	19518 <gnss_interface_write+0x74>
   195f8:	4608      	mov	r0, r1
   195fa:	a902      	add	r1, sp, #8
   195fc:	f000 fd28 	bl	1a050 <rpc_gnss_serialize_utc>
   19600:	e78a      	b.n	19518 <gnss_interface_write+0x74>
   19602:	b128      	cbz	r0, 19610 <gnss_interface_write+0x16c>
   19604:	6803      	ldr	r3, [r0, #0]
   19606:	b11b      	cbz	r3, 19610 <gnss_interface_write+0x16c>
   19608:	4618      	mov	r0, r3
   1960a:	f000 fe99 	bl	1a340 <rpc_gnss_client_data_free>
   1960e:	9800      	ldr	r0, [sp, #0]
   19610:	f000 fe8e 	bl	1a330 <rpc_gnss_client_message_free>
   19614:	2023      	movs	r0, #35	; 0x23
   19616:	f7f7 fefb 	bl	11410 <bsd_os_errno_set>
   1961a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1961e:	6823      	ldr	r3, [r4, #0]
   19620:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   19624:	6023      	str	r3, [r4, #0]
   19626:	6823      	ldr	r3, [r4, #0]
   19628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1962c:	6023      	str	r3, [r4, #0]
   1962e:	b01f      	add	sp, #124	; 0x7c
   19630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19634:	2005      	movs	r0, #5
   19636:	6823      	ldr	r3, [r4, #0]
   19638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1963c:	6023      	str	r3, [r4, #0]
   1963e:	f7f7 fee7 	bl	11410 <bsd_os_errno_set>
   19642:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19646:	b01f      	add	sp, #124	; 0x7c
   19648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1964c:	2016      	movs	r0, #22
   1964e:	f7f7 fedf 	bl	11410 <bsd_os_errno_set>
   19652:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19656:	b01f      	add	sp, #124	; 0x7c
   19658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1965c:	2009      	movs	r0, #9
   1965e:	f7f7 fed7 	bl	11410 <bsd_os_errno_set>
   19662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19666:	e7a6      	b.n	195b6 <gnss_interface_write+0x112>
   19668:	2039      	movs	r0, #57	; 0x39
   1966a:	f7f7 fed1 	bl	11410 <bsd_os_errno_set>
   1966e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19672:	e7a0      	b.n	195b6 <gnss_interface_write+0x112>
   19674:	202d      	movs	r0, #45	; 0x2d
   19676:	f7f7 fecb 	bl	11410 <bsd_os_errno_set>
   1967a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1967e:	e79a      	b.n	195b6 <gnss_interface_write+0x112>
   19680:	49765443 	.word	0x49765443
   19684:	20020b0c 	.word	0x20020b0c
   19688:	20024e24 	.word	0x20024e24
   1968c:	20020b10 	.word	0x20020b10
   19690:	2002c444 	.word	0x2002c444

00019694 <gnss_interface_read>:
   19694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19698:	4c4a      	ldr	r4, [pc, #296]	; (197c4 <gnss_interface_read+0x130>)
   1969a:	b0b7      	sub	sp, #220	; 0xdc
   1969c:	42a0      	cmp	r0, r4
   1969e:	f040 81ec 	bne.w	19a7a <gnss_interface_read+0x3e6>
   196a2:	4688      	mov	r8, r1
   196a4:	2900      	cmp	r1, #0
   196a6:	f000 81e2 	beq.w	19a6e <gnss_interface_read+0x3da>
   196aa:	2ad7      	cmp	r2, #215	; 0xd7
   196ac:	f240 81df 	bls.w	19a6e <gnss_interface_read+0x3da>
   196b0:	4d45      	ldr	r5, [pc, #276]	; (197c8 <gnss_interface_read+0x134>)
   196b2:	4699      	mov	r9, r3
   196b4:	682b      	ldr	r3, [r5, #0]
   196b6:	b29b      	uxth	r3, r3
   196b8:	2b04      	cmp	r3, #4
   196ba:	d004      	beq.n	196c6 <gnss_interface_read+0x32>
   196bc:	682b      	ldr	r3, [r5, #0]
   196be:	b29b      	uxth	r3, r3
   196c0:	2b02      	cmp	r3, #2
   196c2:	f040 81e0 	bne.w	19a86 <gnss_interface_read+0x3f2>
   196c6:	2102      	movs	r1, #2
   196c8:	20b6      	movs	r0, #182	; 0xb6
   196ca:	2400      	movs	r4, #0
   196cc:	682b      	ldr	r3, [r5, #0]
   196ce:	f10d 020e 	add.w	r2, sp, #14
   196d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   196d6:	602b      	str	r3, [r5, #0]
   196d8:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 197d0 <gnss_interface_read+0x13c>
   196dc:	ab08      	add	r3, sp, #32
   196de:	4f3b      	ldr	r7, [pc, #236]	; (197cc <gnss_interface_read+0x138>)
   196e0:	4e38      	ldr	r6, [pc, #224]	; (197c4 <gnss_interface_read+0x130>)
   196e2:	9005      	str	r0, [sp, #20]
   196e4:	9107      	str	r1, [sp, #28]
   196e6:	9304      	str	r3, [sp, #16]
   196e8:	9206      	str	r2, [sp, #24]
   196ea:	ea09 0b01 	and.w	fp, r9, r1
   196ee:	f8da 0000 	ldr.w	r0, [sl]
   196f2:	464a      	mov	r2, r9
   196f4:	6803      	ldr	r3, [r0, #0]
   196f6:	a904      	add	r1, sp, #16
   196f8:	689b      	ldr	r3, [r3, #8]
   196fa:	4798      	blx	r3
   196fc:	2800      	cmp	r0, #0
   196fe:	da11      	bge.n	19724 <gnss_interface_read+0x90>
   19700:	f1bb 0f00 	cmp.w	fp, #0
   19704:	d138      	bne.n	19778 <gnss_interface_read+0xe4>
   19706:	682b      	ldr	r3, [r5, #0]
   19708:	03d8      	lsls	r0, r3, #15
   1970a:	d4f0      	bmi.n	196ee <gnss_interface_read+0x5a>
   1970c:	b10c      	cbz	r4, 19712 <gnss_interface_read+0x7e>
   1970e:	e7ee      	b.n	196ee <gnss_interface_read+0x5a>
   19710:	b930      	cbnz	r0, 19720 <gnss_interface_read+0x8c>
   19712:	4639      	mov	r1, r7
   19714:	4630      	mov	r0, r6
   19716:	f7f7 fde7 	bl	112e8 <bsd_os_timedwait>
   1971a:	682b      	ldr	r3, [r5, #0]
   1971c:	03d9      	lsls	r1, r3, #15
   1971e:	d5f7      	bpl.n	19710 <gnss_interface_read+0x7c>
   19720:	4604      	mov	r4, r0
   19722:	e7e4      	b.n	196ee <gnss_interface_read+0x5a>
   19724:	f244 0202 	movw	r2, #16386	; 0x4002
   19728:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1972c:	4293      	cmp	r3, r2
   1972e:	d039      	beq.n	197a4 <gnss_interface_read+0x110>
   19730:	f244 0201 	movw	r2, #16385	; 0x4001
   19734:	4293      	cmp	r3, r2
   19736:	d04d      	beq.n	197d4 <gnss_interface_read+0x140>
   19738:	f244 0203 	movw	r2, #16387	; 0x4003
   1973c:	4293      	cmp	r3, r2
   1973e:	f040 8196 	bne.w	19a6e <gnss_interface_read+0x3da>
   19742:	2201      	movs	r2, #1
   19744:	2414      	movs	r4, #20
   19746:	9b08      	ldr	r3, [sp, #32]
   19748:	f888 2000 	strb.w	r2, [r8]
   1974c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1974e:	f8c8 3008 	str.w	r3, [r8, #8]
   19752:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   19756:	e9c8 2303 	strd	r2, r3, [r8, #12]
   1975a:	f8da 0000 	ldr.w	r0, [sl]
   1975e:	6803      	ldr	r3, [r0, #0]
   19760:	68db      	ldr	r3, [r3, #12]
   19762:	4798      	blx	r3
   19764:	2800      	cmp	r0, #0
   19766:	dd03      	ble.n	19770 <gnss_interface_read+0xdc>
   19768:	682b      	ldr	r3, [r5, #0]
   1976a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1976e:	602b      	str	r3, [r5, #0]
   19770:	4620      	mov	r0, r4
   19772:	b037      	add	sp, #220	; 0xdc
   19774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19778:	1c42      	adds	r2, r0, #1
   1977a:	4603      	mov	r3, r0
   1977c:	d1d2      	bne.n	19724 <gnss_interface_read+0x90>
   1977e:	b93c      	cbnz	r4, 19790 <gnss_interface_read+0xfc>
   19780:	461c      	mov	r4, r3
   19782:	2023      	movs	r0, #35	; 0x23
   19784:	f7f7 fe44 	bl	11410 <bsd_os_errno_set>
   19788:	4620      	mov	r0, r4
   1978a:	b037      	add	sp, #220	; 0xdc
   1978c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19790:	9001      	str	r0, [sp, #4]
   19792:	4620      	mov	r0, r4
   19794:	f7f7 fe3c 	bl	11410 <bsd_os_errno_set>
   19798:	9b01      	ldr	r3, [sp, #4]
   1979a:	461c      	mov	r4, r3
   1979c:	4620      	mov	r0, r4
   1979e:	b037      	add	sp, #220	; 0xdc
   197a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197a4:	a808      	add	r0, sp, #32
   197a6:	f003 fc45 	bl	1d034 <strlen>
   197aa:	2302      	movs	r3, #2
   197ac:	1c44      	adds	r4, r0, #1
   197ae:	b2a4      	uxth	r4, r4
   197b0:	f808 3b08 	strb.w	r3, [r8], #8
   197b4:	4622      	mov	r2, r4
   197b6:	a908      	add	r1, sp, #32
   197b8:	4640      	mov	r0, r8
   197ba:	f003 fc76 	bl	1d0aa <memcpy>
   197be:	3408      	adds	r4, #8
   197c0:	e7cb      	b.n	1975a <gnss_interface_read+0xc6>
   197c2:	bf00      	nop
   197c4:	49765443 	.word	0x49765443
   197c8:	20020b0c 	.word	0x20020b0c
   197cc:	2002c444 	.word	0x2002c444
   197d0:	20020b14 	.word	0x20020b14
   197d4:	2401      	movs	r4, #1
   197d6:	a809      	add	r0, sp, #36	; 0x24
   197d8:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   197da:	e9c8 0102 	strd	r0, r1, [r8, #8]
   197de:	e9c8 2304 	strd	r2, r3, [r8, #16]
   197e2:	990d      	ldr	r1, [sp, #52]	; 0x34
   197e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   197e6:	f888 4000 	strb.w	r4, [r8]
   197ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   197ec:	f8c8 1018 	str.w	r1, [r8, #24]
   197f0:	9910      	ldr	r1, [sp, #64]	; 0x40
   197f2:	f8c8 201c 	str.w	r2, [r8, #28]
   197f6:	f8c8 3020 	str.w	r3, [r8, #32]
   197fa:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   197fe:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   19802:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
   19806:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   1980a:	f888 2044 	strb.w	r2, [r8, #68]	; 0x44
   1980e:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   19812:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
   19816:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   1981a:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
   1981e:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   19822:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
   19826:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
   1982a:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   1982e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   19832:	f8a8 1028 	strh.w	r1, [r8, #40]	; 0x28
   19836:	f888 302e 	strb.w	r3, [r8, #46]	; 0x2e
   1983a:	f8c8 202a 	str.w	r2, [r8, #42]	; 0x2a
   1983e:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   19842:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   19846:	9b18      	ldr	r3, [sp, #96]	; 0x60
   19848:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   1984c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   19850:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   19854:	f3c3 210f 	ubfx	r1, r3, #8, #16
   19858:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1985a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   1985e:	f8a8 0030 	strh.w	r0, [r8, #48]	; 0x30
   19862:	f8a8 104a 	strh.w	r1, [r8, #74]	; 0x4a
   19866:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   1986a:	f3c3 230f 	ubfx	r3, r3, #8, #16
   1986e:	f8a8 2056 	strh.w	r2, [r8, #86]	; 0x56
   19872:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   19876:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
   1987a:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   1987e:	f8a8 1046 	strh.w	r1, [r8, #70]	; 0x46
   19882:	f888 2048 	strb.w	r2, [r8, #72]	; 0x48
   19886:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   1988a:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   1988e:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
   19892:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   19896:	f888 1050 	strb.w	r1, [r8, #80]	; 0x50
   1989a:	f8a8 2052 	strh.w	r2, [r8, #82]	; 0x52
   1989e:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
   198a2:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   198a6:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   198aa:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   198ae:	f8c8 1058 	str.w	r1, [r8, #88]	; 0x58
   198b2:	f888 205c 	strb.w	r2, [r8, #92]	; 0x5c
   198b6:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   198ba:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   198be:	f8a8 305e 	strh.w	r3, [r8, #94]	; 0x5e
   198c2:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   198c6:	f888 1060 	strb.w	r1, [r8, #96]	; 0x60
   198ca:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
   198ce:	f888 3068 	strb.w	r3, [r8, #104]	; 0x68
   198d2:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   198d6:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   198da:	9a22      	ldr	r2, [sp, #136]	; 0x88
   198dc:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   198e0:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   198e4:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   198e8:	f3c2 220f 	ubfx	r2, r2, #8, #16
   198ec:	f8a8 106e 	strh.w	r1, [r8, #110]	; 0x6e
   198f0:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   198f4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   198f8:	f8a8 207a 	strh.w	r2, [r8, #122]	; 0x7a
   198fc:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   19900:	f8a8 3086 	strh.w	r3, [r8, #134]	; 0x86
   19904:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   19908:	f8a8 106a 	strh.w	r1, [r8, #106]	; 0x6a
   1990c:	f888 206c 	strb.w	r2, [r8, #108]	; 0x6c
   19910:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   19914:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   19918:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
   1991c:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   19920:	f888 1074 	strb.w	r1, [r8, #116]	; 0x74
   19924:	f8a8 2076 	strh.w	r2, [r8, #118]	; 0x76
   19928:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
   1992c:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   19930:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   19934:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   19938:	f8c8 107c 	str.w	r1, [r8, #124]	; 0x7c
   1993c:	f888 2080 	strb.w	r2, [r8, #128]	; 0x80
   19940:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   19944:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   19948:	f8a8 3082 	strh.w	r3, [r8, #130]	; 0x82
   1994c:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   19950:	f888 1084 	strb.w	r1, [r8, #132]	; 0x84
   19954:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
   19958:	f888 308c 	strb.w	r3, [r8, #140]	; 0x8c
   1995c:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   19960:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   19962:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   19966:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   1996a:	f3c3 210f 	ubfx	r1, r3, #8, #16
   1996e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   19970:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   19974:	f8a8 1092 	strh.w	r1, [r8, #146]	; 0x92
   19978:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   1997c:	f8a8 209e 	strh.w	r2, [r8, #158]	; 0x9e
   19980:	f3c3 230f 	ubfx	r3, r3, #8, #16
   19984:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   19988:	f8a8 008e 	strh.w	r0, [r8, #142]	; 0x8e
   1998c:	f8a8 30aa 	strh.w	r3, [r8, #170]	; 0xaa
   19990:	f888 1090 	strb.w	r1, [r8, #144]	; 0x90
   19994:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   19998:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   1999c:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
   199a0:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   199a4:	f888 3098 	strb.w	r3, [r8, #152]	; 0x98
   199a8:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   199ac:	f8a8 109a 	strh.w	r1, [r8, #154]	; 0x9a
   199b0:	f888 209c 	strb.w	r2, [r8, #156]	; 0x9c
   199b4:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   199b8:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   199bc:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
   199c0:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   199c4:	f888 10a4 	strb.w	r1, [r8, #164]	; 0xa4
   199c8:	f8a8 20a6 	strh.w	r2, [r8, #166]	; 0xa6
   199cc:	f888 30a8 	strb.w	r3, [r8, #168]	; 0xa8
   199d0:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   199d4:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   199d8:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   199dc:	f8c8 10ac 	str.w	r1, [r8, #172]	; 0xac
   199e0:	f888 20b0 	strb.w	r2, [r8, #176]	; 0xb0
   199e4:	f8a8 30b2 	strh.w	r3, [r8, #178]	; 0xb2
   199e8:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   199ec:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   199f0:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   199f4:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   199f6:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   199fa:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   199fe:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   19a02:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   19a06:	f3c2 220f 	ubfx	r2, r2, #8, #16
   19a0a:	f8a8 10b6 	strh.w	r1, [r8, #182]	; 0xb6
   19a0e:	f8a8 30ce 	strh.w	r3, [r8, #206]	; 0xce
   19a12:	f888 40b4 	strb.w	r4, [r8, #180]	; 0xb4
   19a16:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
   19a1a:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   19a1e:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   19a22:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   19a26:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   19a2a:	f888 10bc 	strb.w	r1, [r8, #188]	; 0xbc
   19a2e:	f8a8 20be 	strh.w	r2, [r8, #190]	; 0xbe
   19a32:	f8c8 00b8 	str.w	r0, [r8, #184]	; 0xb8
   19a36:	f888 30c0 	strb.w	r3, [r8, #192]	; 0xc0
   19a3a:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   19a3e:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   19a42:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   19a46:	f8c8 10c4 	str.w	r1, [r8, #196]	; 0xc4
   19a4a:	f888 20c8 	strb.w	r2, [r8, #200]	; 0xc8
   19a4e:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   19a52:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   19a56:	f8a8 30ca 	strh.w	r3, [r8, #202]	; 0xca
   19a5a:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   19a5e:	f888 10cc 	strb.w	r1, [r8, #204]	; 0xcc
   19a62:	f8c8 20d0 	str.w	r2, [r8, #208]	; 0xd0
   19a66:	f888 30d4 	strb.w	r3, [r8, #212]	; 0xd4
   19a6a:	24d8      	movs	r4, #216	; 0xd8
   19a6c:	e675      	b.n	1975a <gnss_interface_read+0xc6>
   19a6e:	2016      	movs	r0, #22
   19a70:	f7f7 fcce 	bl	11410 <bsd_os_errno_set>
   19a74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19a78:	e67a      	b.n	19770 <gnss_interface_read+0xdc>
   19a7a:	2009      	movs	r0, #9
   19a7c:	f7f7 fcc8 	bl	11410 <bsd_os_errno_set>
   19a80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19a84:	e674      	b.n	19770 <gnss_interface_read+0xdc>
   19a86:	2039      	movs	r0, #57	; 0x39
   19a88:	f7f7 fcc2 	bl	11410 <bsd_os_errno_set>
   19a8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19a90:	e66e      	b.n	19770 <gnss_interface_read+0xdc>
   19a92:	bf00      	nop

00019a94 <gnss_interface_setopt>:
   19a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19a98:	f241 1402 	movw	r4, #4354	; 0x1102
   19a9c:	4222      	tst	r2, r4
   19a9e:	b086      	sub	sp, #24
   19aa0:	4d9c      	ldr	r5, [pc, #624]	; (19d14 <gnss_interface_setopt+0x280>)
   19aa2:	d004      	beq.n	19aae <gnss_interface_setopt+0x1a>
   19aa4:	682c      	ldr	r4, [r5, #0]
   19aa6:	b2a4      	uxth	r4, r4
   19aa8:	2c02      	cmp	r4, #2
   19aaa:	f040 8104 	bne.w	19cb6 <gnss_interface_setopt+0x222>
   19aae:	682c      	ldr	r4, [r5, #0]
   19ab0:	0264      	lsls	r4, r4, #9
   19ab2:	f100 8128 	bmi.w	19d06 <gnss_interface_setopt+0x272>
   19ab6:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   19aba:	f040 811e 	bne.w	19cfa <gnss_interface_setopt+0x266>
   19abe:	4996      	ldr	r1, [pc, #600]	; (19d18 <gnss_interface_setopt+0x284>)
   19ac0:	4288      	cmp	r0, r1
   19ac2:	f040 8114 	bne.w	19cee <gnss_interface_setopt+0x25a>
   19ac6:	3a01      	subs	r2, #1
   19ac8:	2a08      	cmp	r2, #8
   19aca:	f200 80ec 	bhi.w	19ca6 <gnss_interface_setopt+0x212>
   19ace:	e8df f012 	tbh	[pc, r2, lsl #1]
   19ad2:	0075      	.short	0x0075
   19ad4:	00c200d8 	.word	0x00c200d8
   19ad8:	008100cc 	.word	0x008100cc
   19adc:	0098008c 	.word	0x0098008c
   19ae0:	000900af 	.word	0x000900af
   19ae4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19ae6:	2a01      	cmp	r2, #1
   19ae8:	f040 80dd 	bne.w	19ca6 <gnss_interface_setopt+0x212>
   19aec:	f241 1603 	movw	r6, #4355	; 0x1103
   19af0:	2240      	movs	r2, #64	; 0x40
   19af2:	4637      	mov	r7, r6
   19af4:	781b      	ldrb	r3, [r3, #0]
   19af6:	9202      	str	r2, [sp, #8]
   19af8:	f88d 3015 	strb.w	r3, [sp, #21]
   19afc:	682b      	ldr	r3, [r5, #0]
   19afe:	2112      	movs	r1, #18
   19b00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   19b04:	4668      	mov	r0, sp
   19b06:	602b      	str	r3, [r5, #0]
   19b08:	f000 fbe8 	bl	1a2dc <rpc_gnss_client_request_alloc>
   19b0c:	4604      	mov	r4, r0
   19b0e:	9800      	ldr	r0, [sp, #0]
   19b10:	2c00      	cmp	r4, #0
   19b12:	f040 80d6 	bne.w	19cc2 <gnss_interface_setopt+0x22e>
   19b16:	2800      	cmp	r0, #0
   19b18:	f000 80da 	beq.w	19cd0 <gnss_interface_setopt+0x23c>
   19b1c:	2212      	movs	r2, #18
   19b1e:	f04f 0876 	mov.w	r8, #118	; 0x76
   19b22:	f04f 0e49 	mov.w	lr, #73	; 0x49
   19b26:	f04f 0a43 	mov.w	sl, #67	; 0x43
   19b2a:	f04f 0954 	mov.w	r9, #84	; 0x54
   19b2e:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 19d20 <gnss_interface_setopt+0x28c>
   19b32:	a906      	add	r1, sp, #24
   19b34:	f8bc 3000 	ldrh.w	r3, [ip]
   19b38:	f880 800e 	strb.w	r8, [r0, #14]
   19b3c:	3301      	adds	r3, #1
   19b3e:	b29b      	uxth	r3, r3
   19b40:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   19b44:	f841 6d14 	str.w	r6, [r1, #-20]!
   19b48:	7144      	strb	r4, [r0, #5]
   19b4a:	7184      	strb	r4, [r0, #6]
   19b4c:	71c4      	strb	r4, [r0, #7]
   19b4e:	7204      	strb	r4, [r0, #8]
   19b50:	7244      	strb	r4, [r0, #9]
   19b52:	7284      	strb	r4, [r0, #10]
   19b54:	72c4      	strb	r4, [r0, #11]
   19b56:	7102      	strb	r2, [r0, #4]
   19b58:	f880 a00c 	strb.w	sl, [r0, #12]
   19b5c:	f880 900d 	strb.w	r9, [r0, #13]
   19b60:	f880 e00f 	strb.w	lr, [r0, #15]
   19b64:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 19d24 <gnss_interface_setopt+0x290>
   19b68:	6800      	ldr	r0, [r0, #0]
   19b6a:	f8ac 3000 	strh.w	r3, [ip]
   19b6e:	f003 fa9c 	bl	1d0aa <memcpy>
   19b72:	4639      	mov	r1, r7
   19b74:	9800      	ldr	r0, [sp, #0]
   19b76:	f8c8 4000 	str.w	r4, [r8]
   19b7a:	f000 fbc3 	bl	1a304 <rpc_gnss_client_request_send>
   19b7e:	2800      	cmp	r0, #0
   19b80:	f040 80ab 	bne.w	19cda <gnss_interface_setopt+0x246>
   19b84:	4f65      	ldr	r7, [pc, #404]	; (19d1c <gnss_interface_setopt+0x288>)
   19b86:	4e64      	ldr	r6, [pc, #400]	; (19d18 <gnss_interface_setopt+0x284>)
   19b88:	4639      	mov	r1, r7
   19b8a:	4630      	mov	r0, r6
   19b8c:	f7f7 fbac 	bl	112e8 <bsd_os_timedwait>
   19b90:	682c      	ldr	r4, [r5, #0]
   19b92:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   19b96:	d1f7      	bne.n	19b88 <gnss_interface_setopt+0xf4>
   19b98:	f8d8 0000 	ldr.w	r0, [r8]
   19b9c:	b118      	cbz	r0, 19ba6 <gnss_interface_setopt+0x112>
   19b9e:	f000 fbcf 	bl	1a340 <rpc_gnss_client_data_free>
   19ba2:	f8c8 4000 	str.w	r4, [r8]
   19ba6:	682b      	ldr	r3, [r5, #0]
   19ba8:	021b      	lsls	r3, r3, #8
   19baa:	d576      	bpl.n	19c9a <gnss_interface_setopt+0x206>
   19bac:	2000      	movs	r0, #0
   19bae:	682b      	ldr	r3, [r5, #0]
   19bb0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   19bb4:	602b      	str	r3, [r5, #0]
   19bb6:	b006      	add	sp, #24
   19bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19bbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19bbe:	2a02      	cmp	r2, #2
   19bc0:	d171      	bne.n	19ca6 <gnss_interface_setopt+0x212>
   19bc2:	2208      	movs	r2, #8
   19bc4:	f241 1603 	movw	r6, #4355	; 0x1103
   19bc8:	881b      	ldrh	r3, [r3, #0]
   19bca:	9202      	str	r2, [sp, #8]
   19bcc:	f8ad 300f 	strh.w	r3, [sp, #15]
   19bd0:	4637      	mov	r7, r6
   19bd2:	e793      	b.n	19afc <gnss_interface_setopt+0x68>
   19bd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19bd6:	2a01      	cmp	r2, #1
   19bd8:	d165      	bne.n	19ca6 <gnss_interface_setopt+0x212>
   19bda:	f241 1603 	movw	r6, #4355	; 0x1103
   19bde:	781b      	ldrb	r3, [r3, #0]
   19be0:	9202      	str	r2, [sp, #8]
   19be2:	f88d 300c 	strb.w	r3, [sp, #12]
   19be6:	4637      	mov	r7, r6
   19be8:	e788      	b.n	19afc <gnss_interface_setopt+0x68>
   19bea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19bec:	2a01      	cmp	r2, #1
   19bee:	d15a      	bne.n	19ca6 <gnss_interface_setopt+0x212>
   19bf0:	2202      	movs	r2, #2
   19bf2:	f241 1603 	movw	r6, #4355	; 0x1103
   19bf6:	781b      	ldrb	r3, [r3, #0]
   19bf8:	9202      	str	r2, [sp, #8]
   19bfa:	f88d 300d 	strb.w	r3, [sp, #13]
   19bfe:	4637      	mov	r7, r6
   19c00:	e77c      	b.n	19afc <gnss_interface_setopt+0x68>
   19c02:	682a      	ldr	r2, [r5, #0]
   19c04:	b292      	uxth	r2, r2
   19c06:	2a02      	cmp	r2, #2
   19c08:	d155      	bne.n	19cb6 <gnss_interface_setopt+0x222>
   19c0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19c0c:	2a04      	cmp	r2, #4
   19c0e:	d14a      	bne.n	19ca6 <gnss_interface_setopt+0x212>
   19c10:	2101      	movs	r1, #1
   19c12:	f241 0604 	movw	r6, #4100	; 0x1004
   19c16:	682a      	ldr	r2, [r5, #0]
   19c18:	6818      	ldr	r0, [r3, #0]
   19c1a:	0c13      	lsrs	r3, r2, #16
   19c1c:	041b      	lsls	r3, r3, #16
   19c1e:	f043 0303 	orr.w	r3, r3, #3
   19c22:	f8cd 0009 	str.w	r0, [sp, #9]
   19c26:	602b      	str	r3, [r5, #0]
   19c28:	f88d 1008 	strb.w	r1, [sp, #8]
   19c2c:	4637      	mov	r7, r6
   19c2e:	e765      	b.n	19afc <gnss_interface_setopt+0x68>
   19c30:	682b      	ldr	r3, [r5, #0]
   19c32:	b29b      	uxth	r3, r3
   19c34:	2b04      	cmp	r3, #4
   19c36:	d13e      	bne.n	19cb6 <gnss_interface_setopt+0x222>
   19c38:	2300      	movs	r3, #0
   19c3a:	f241 0604 	movw	r6, #4100	; 0x1004
   19c3e:	f88d 3008 	strb.w	r3, [sp, #8]
   19c42:	f88d 3009 	strb.w	r3, [sp, #9]
   19c46:	f88d 300a 	strb.w	r3, [sp, #10]
   19c4a:	f88d 300b 	strb.w	r3, [sp, #11]
   19c4e:	f88d 300c 	strb.w	r3, [sp, #12]
   19c52:	4637      	mov	r7, r6
   19c54:	e752      	b.n	19afc <gnss_interface_setopt+0x68>
   19c56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19c58:	2a01      	cmp	r2, #1
   19c5a:	d124      	bne.n	19ca6 <gnss_interface_setopt+0x212>
   19c5c:	781b      	ldrb	r3, [r3, #0]
   19c5e:	2b01      	cmp	r3, #1
   19c60:	d121      	bne.n	19ca6 <gnss_interface_setopt+0x212>
   19c62:	f241 1603 	movw	r6, #4355	; 0x1103
   19c66:	4637      	mov	r7, r6
   19c68:	e748      	b.n	19afc <gnss_interface_setopt+0x68>
   19c6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19c6c:	2a02      	cmp	r2, #2
   19c6e:	d11a      	bne.n	19ca6 <gnss_interface_setopt+0x212>
   19c70:	2220      	movs	r2, #32
   19c72:	f241 1603 	movw	r6, #4355	; 0x1103
   19c76:	881b      	ldrh	r3, [r3, #0]
   19c78:	9202      	str	r2, [sp, #8]
   19c7a:	f8ad 3013 	strh.w	r3, [sp, #19]
   19c7e:	4637      	mov	r7, r6
   19c80:	e73c      	b.n	19afc <gnss_interface_setopt+0x68>
   19c82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19c84:	2a02      	cmp	r2, #2
   19c86:	d10e      	bne.n	19ca6 <gnss_interface_setopt+0x212>
   19c88:	2210      	movs	r2, #16
   19c8a:	f241 1603 	movw	r6, #4355	; 0x1103
   19c8e:	881b      	ldrh	r3, [r3, #0]
   19c90:	9202      	str	r2, [sp, #8]
   19c92:	f8ad 3011 	strh.w	r3, [sp, #17]
   19c96:	4637      	mov	r7, r6
   19c98:	e730      	b.n	19afc <gnss_interface_setopt+0x68>
   19c9a:	200e      	movs	r0, #14
   19c9c:	f7f7 fbb8 	bl	11410 <bsd_os_errno_set>
   19ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19ca4:	e783      	b.n	19bae <gnss_interface_setopt+0x11a>
   19ca6:	2016      	movs	r0, #22
   19ca8:	f7f7 fbb2 	bl	11410 <bsd_os_errno_set>
   19cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19cb0:	b006      	add	sp, #24
   19cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19cb6:	200e      	movs	r0, #14
   19cb8:	f7f7 fbaa 	bl	11410 <bsd_os_errno_set>
   19cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19cc0:	e779      	b.n	19bb6 <gnss_interface_setopt+0x122>
   19cc2:	b128      	cbz	r0, 19cd0 <gnss_interface_setopt+0x23c>
   19cc4:	6803      	ldr	r3, [r0, #0]
   19cc6:	b11b      	cbz	r3, 19cd0 <gnss_interface_setopt+0x23c>
   19cc8:	4618      	mov	r0, r3
   19cca:	f000 fb39 	bl	1a340 <rpc_gnss_client_data_free>
   19cce:	9800      	ldr	r0, [sp, #0]
   19cd0:	f000 fb2e 	bl	1a330 <rpc_gnss_client_message_free>
   19cd4:	2023      	movs	r0, #35	; 0x23
   19cd6:	f7f7 fb9b 	bl	11410 <bsd_os_errno_set>
   19cda:	682b      	ldr	r3, [r5, #0]
   19cdc:	200e      	movs	r0, #14
   19cde:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   19ce2:	602b      	str	r3, [r5, #0]
   19ce4:	f7f7 fb94 	bl	11410 <bsd_os_errno_set>
   19ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19cec:	e763      	b.n	19bb6 <gnss_interface_setopt+0x122>
   19cee:	2009      	movs	r0, #9
   19cf0:	f7f7 fb8e 	bl	11410 <bsd_os_errno_set>
   19cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19cf8:	e75d      	b.n	19bb6 <gnss_interface_setopt+0x122>
   19cfa:	202a      	movs	r0, #42	; 0x2a
   19cfc:	f7f7 fb88 	bl	11410 <bsd_os_errno_set>
   19d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19d04:	e757      	b.n	19bb6 <gnss_interface_setopt+0x122>
   19d06:	2073      	movs	r0, #115	; 0x73
   19d08:	f7f7 fb82 	bl	11410 <bsd_os_errno_set>
   19d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19d10:	e751      	b.n	19bb6 <gnss_interface_setopt+0x122>
   19d12:	bf00      	nop
   19d14:	20020b0c 	.word	0x20020b0c
   19d18:	49765443 	.word	0x49765443
   19d1c:	2002c444 	.word	0x2002c444
   19d20:	20024e24 	.word	0x20024e24
   19d24:	20020b10 	.word	0x20020b10

00019d28 <gnss_interface_getopt>:
   19d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d2c:	4c81      	ldr	r4, [pc, #516]	; (19f34 <gnss_interface_getopt+0x20c>)
   19d2e:	b087      	sub	sp, #28
   19d30:	6825      	ldr	r5, [r4, #0]
   19d32:	4698      	mov	r8, r3
   19d34:	b2ad      	uxth	r5, r5
   19d36:	2d02      	cmp	r5, #2
   19d38:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19d3a:	f040 80dd 	bne.w	19ef8 <gnss_interface_getopt+0x1d0>
   19d3e:	6825      	ldr	r5, [r4, #0]
   19d40:	03ee      	lsls	r6, r5, #15
   19d42:	f100 80eb 	bmi.w	19f1c <gnss_interface_getopt+0x1f4>
   19d46:	6825      	ldr	r5, [r4, #0]
   19d48:	01ed      	lsls	r5, r5, #7
   19d4a:	f100 80ed 	bmi.w	19f28 <gnss_interface_getopt+0x200>
   19d4e:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   19d52:	f040 80d7 	bne.w	19f04 <gnss_interface_getopt+0x1dc>
   19d56:	4978      	ldr	r1, [pc, #480]	; (19f38 <gnss_interface_getopt+0x210>)
   19d58:	4288      	cmp	r0, r1
   19d5a:	f040 80d9 	bne.w	19f10 <gnss_interface_getopt+0x1e8>
   19d5e:	f1b8 0f00 	cmp.w	r8, #0
   19d62:	d00b      	beq.n	19d7c <gnss_interface_getopt+0x54>
   19d64:	b153      	cbz	r3, 19d7c <gnss_interface_getopt+0x54>
   19d66:	1e57      	subs	r7, r2, #1
   19d68:	2f05      	cmp	r7, #5
   19d6a:	d807      	bhi.n	19d7c <gnss_interface_getopt+0x54>
   19d6c:	e8df f007 	tbb	[pc, r7]
   19d70:	0f030f0f 	.word	0x0f030f0f
   19d74:	0303      	.short	0x0303
   19d76:	681b      	ldr	r3, [r3, #0]
   19d78:	2b01      	cmp	r3, #1
   19d7a:	d00b      	beq.n	19d94 <gnss_interface_getopt+0x6c>
   19d7c:	2016      	movs	r0, #22
   19d7e:	f7f7 fb47 	bl	11410 <bsd_os_errno_set>
   19d82:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19d86:	4628      	mov	r0, r5
   19d88:	b007      	add	sp, #28
   19d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d8e:	681b      	ldr	r3, [r3, #0]
   19d90:	2b02      	cmp	r3, #2
   19d92:	d1f3      	bne.n	19d7c <gnss_interface_getopt+0x54>
   19d94:	6823      	ldr	r3, [r4, #0]
   19d96:	2212      	movs	r2, #18
   19d98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   19d9c:	2100      	movs	r1, #0
   19d9e:	a801      	add	r0, sp, #4
   19da0:	6023      	str	r3, [r4, #0]
   19da2:	f003 f9ac 	bl	1d0fe <memset>
   19da6:	2112      	movs	r1, #18
   19da8:	4668      	mov	r0, sp
   19daa:	f000 fa97 	bl	1a2dc <rpc_gnss_client_request_alloc>
   19dae:	4605      	mov	r5, r0
   19db0:	9800      	ldr	r0, [sp, #0]
   19db2:	2d00      	cmp	r5, #0
   19db4:	f040 808a 	bne.w	19ecc <gnss_interface_getopt+0x1a4>
   19db8:	2800      	cmp	r0, #0
   19dba:	f000 808e 	beq.w	19eda <gnss_interface_getopt+0x1b2>
   19dbe:	f241 1602 	movw	r6, #4354	; 0x1102
   19dc2:	f04f 0e49 	mov.w	lr, #73	; 0x49
   19dc6:	2212      	movs	r2, #18
   19dc8:	f04f 0976 	mov.w	r9, #118	; 0x76
   19dcc:	f04f 0b43 	mov.w	fp, #67	; 0x43
   19dd0:	f04f 0a54 	mov.w	sl, #84	; 0x54
   19dd4:	f8df c168 	ldr.w	ip, [pc, #360]	; 19f40 <gnss_interface_getopt+0x218>
   19dd8:	f880 e00f 	strb.w	lr, [r0, #15]
   19ddc:	f8bc 3000 	ldrh.w	r3, [ip]
   19de0:	f880 900e 	strb.w	r9, [r0, #14]
   19de4:	3301      	adds	r3, #1
   19de6:	b29b      	uxth	r3, r3
   19de8:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   19dec:	f8cd e004 	str.w	lr, [sp, #4]
   19df0:	7145      	strb	r5, [r0, #5]
   19df2:	7185      	strb	r5, [r0, #6]
   19df4:	71c5      	strb	r5, [r0, #7]
   19df6:	7205      	strb	r5, [r0, #8]
   19df8:	7245      	strb	r5, [r0, #9]
   19dfa:	7285      	strb	r5, [r0, #10]
   19dfc:	72c5      	strb	r5, [r0, #11]
   19dfe:	a901      	add	r1, sp, #4
   19e00:	7102      	strb	r2, [r0, #4]
   19e02:	f880 b00c 	strb.w	fp, [r0, #12]
   19e06:	f880 a00d 	strb.w	sl, [r0, #13]
   19e0a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 19f44 <gnss_interface_getopt+0x21c>
   19e0e:	6800      	ldr	r0, [r0, #0]
   19e10:	f8ac 3000 	strh.w	r3, [ip]
   19e14:	f003 f949 	bl	1d0aa <memcpy>
   19e18:	4631      	mov	r1, r6
   19e1a:	9800      	ldr	r0, [sp, #0]
   19e1c:	f8c9 5000 	str.w	r5, [r9]
   19e20:	f000 fa70 	bl	1a304 <rpc_gnss_client_request_send>
   19e24:	2800      	cmp	r0, #0
   19e26:	d15d      	bne.n	19ee4 <gnss_interface_getopt+0x1bc>
   19e28:	4e44      	ldr	r6, [pc, #272]	; (19f3c <gnss_interface_getopt+0x214>)
   19e2a:	4d43      	ldr	r5, [pc, #268]	; (19f38 <gnss_interface_getopt+0x210>)
   19e2c:	4631      	mov	r1, r6
   19e2e:	4628      	mov	r0, r5
   19e30:	f7f7 fa5a 	bl	112e8 <bsd_os_timedwait>
   19e34:	6823      	ldr	r3, [r4, #0]
   19e36:	01db      	lsls	r3, r3, #7
   19e38:	d4f8      	bmi.n	19e2c <gnss_interface_getopt+0x104>
   19e3a:	f8d9 0000 	ldr.w	r0, [r9]
   19e3e:	b1d8      	cbz	r0, 19e78 <gnss_interface_getopt+0x150>
   19e40:	6825      	ldr	r5, [r4, #0]
   19e42:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   19e46:	d00f      	beq.n	19e68 <gnss_interface_getopt+0x140>
   19e48:	2f05      	cmp	r7, #5
   19e4a:	d837      	bhi.n	19ebc <gnss_interface_getopt+0x194>
   19e4c:	e8df f007 	tbb	[pc, r7]
   19e50:	2b26201a 	.word	0x2b26201a
   19e54:	0331      	.short	0x0331
   19e56:	2500      	movs	r5, #0
   19e58:	7b43      	ldrb	r3, [r0, #13]
   19e5a:	f888 3000 	strb.w	r3, [r8]
   19e5e:	f000 fa6f 	bl	1a340 <rpc_gnss_client_data_free>
   19e62:	2300      	movs	r3, #0
   19e64:	f8c9 3000 	str.w	r3, [r9]
   19e68:	6823      	ldr	r3, [r4, #0]
   19e6a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   19e6e:	6023      	str	r3, [r4, #0]
   19e70:	4628      	mov	r0, r5
   19e72:	b007      	add	sp, #28
   19e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e78:	6823      	ldr	r3, [r4, #0]
   19e7a:	4605      	mov	r5, r0
   19e7c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   19e80:	6023      	str	r3, [r4, #0]
   19e82:	e7f5      	b.n	19e70 <gnss_interface_getopt+0x148>
   19e84:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   19e88:	2500      	movs	r5, #0
   19e8a:	f8a8 3000 	strh.w	r3, [r8]
   19e8e:	e7e6      	b.n	19e5e <gnss_interface_getopt+0x136>
   19e90:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   19e94:	2500      	movs	r5, #0
   19e96:	f8a8 3000 	strh.w	r3, [r8]
   19e9a:	e7e0      	b.n	19e5e <gnss_interface_getopt+0x136>
   19e9c:	7b83      	ldrb	r3, [r0, #14]
   19e9e:	2500      	movs	r5, #0
   19ea0:	f888 3000 	strb.w	r3, [r8]
   19ea4:	e7db      	b.n	19e5e <gnss_interface_getopt+0x136>
   19ea6:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   19eaa:	2500      	movs	r5, #0
   19eac:	f8a8 3000 	strh.w	r3, [r8]
   19eb0:	e7d5      	b.n	19e5e <gnss_interface_getopt+0x136>
   19eb2:	7b03      	ldrb	r3, [r0, #12]
   19eb4:	2500      	movs	r5, #0
   19eb6:	f888 3000 	strb.w	r3, [r8]
   19eba:	e7d0      	b.n	19e5e <gnss_interface_getopt+0x136>
   19ebc:	2016      	movs	r0, #22
   19ebe:	f7f7 faa7 	bl	11410 <bsd_os_errno_set>
   19ec2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19ec6:	f8d9 0000 	ldr.w	r0, [r9]
   19eca:	e7c8      	b.n	19e5e <gnss_interface_getopt+0x136>
   19ecc:	b128      	cbz	r0, 19eda <gnss_interface_getopt+0x1b2>
   19ece:	6803      	ldr	r3, [r0, #0]
   19ed0:	b11b      	cbz	r3, 19eda <gnss_interface_getopt+0x1b2>
   19ed2:	4618      	mov	r0, r3
   19ed4:	f000 fa34 	bl	1a340 <rpc_gnss_client_data_free>
   19ed8:	9800      	ldr	r0, [sp, #0]
   19eda:	f000 fa29 	bl	1a330 <rpc_gnss_client_message_free>
   19ede:	2023      	movs	r0, #35	; 0x23
   19ee0:	f7f7 fa96 	bl	11410 <bsd_os_errno_set>
   19ee4:	6823      	ldr	r3, [r4, #0]
   19ee6:	200e      	movs	r0, #14
   19ee8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   19eec:	6023      	str	r3, [r4, #0]
   19eee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19ef2:	f7f7 fa8d 	bl	11410 <bsd_os_errno_set>
   19ef6:	e746      	b.n	19d86 <gnss_interface_getopt+0x5e>
   19ef8:	200e      	movs	r0, #14
   19efa:	f7f7 fa89 	bl	11410 <bsd_os_errno_set>
   19efe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19f02:	e740      	b.n	19d86 <gnss_interface_getopt+0x5e>
   19f04:	202a      	movs	r0, #42	; 0x2a
   19f06:	f7f7 fa83 	bl	11410 <bsd_os_errno_set>
   19f0a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19f0e:	e73a      	b.n	19d86 <gnss_interface_getopt+0x5e>
   19f10:	2009      	movs	r0, #9
   19f12:	f7f7 fa7d 	bl	11410 <bsd_os_errno_set>
   19f16:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19f1a:	e734      	b.n	19d86 <gnss_interface_getopt+0x5e>
   19f1c:	2005      	movs	r0, #5
   19f1e:	f7f7 fa77 	bl	11410 <bsd_os_errno_set>
   19f22:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19f26:	e72e      	b.n	19d86 <gnss_interface_getopt+0x5e>
   19f28:	2073      	movs	r0, #115	; 0x73
   19f2a:	f7f7 fa71 	bl	11410 <bsd_os_errno_set>
   19f2e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19f32:	e728      	b.n	19d86 <gnss_interface_getopt+0x5e>
   19f34:	20020b0c 	.word	0x20020b0c
   19f38:	49765443 	.word	0x49765443
   19f3c:	2002c444 	.word	0x2002c444
   19f40:	20024e24 	.word	0x20024e24
   19f44:	20020b10 	.word	0x20020b10

00019f48 <gnss_interface_init>:
   19f48:	2100      	movs	r1, #0
   19f4a:	b538      	push	{r3, r4, r5, lr}
   19f4c:	4c09      	ldr	r4, [pc, #36]	; (19f74 <gnss_interface_init+0x2c>)
   19f4e:	4d0a      	ldr	r5, [pc, #40]	; (19f78 <gnss_interface_init+0x30>)
   19f50:	6822      	ldr	r2, [r4, #0]
   19f52:	480a      	ldr	r0, [pc, #40]	; (19f7c <gnss_interface_init+0x34>)
   19f54:	4b0a      	ldr	r3, [pc, #40]	; (19f80 <gnss_interface_init+0x38>)
   19f56:	402a      	ands	r2, r5
   19f58:	6022      	str	r2, [r4, #0]
   19f5a:	8001      	strh	r1, [r0, #0]
   19f5c:	6019      	str	r1, [r3, #0]
   19f5e:	f000 f9b7 	bl	1a2d0 <rpc_gnss_client_init>
   19f62:	b928      	cbnz	r0, 19f70 <gnss_interface_init+0x28>
   19f64:	6823      	ldr	r3, [r4, #0]
   19f66:	402b      	ands	r3, r5
   19f68:	f043 0301 	orr.w	r3, r3, #1
   19f6c:	6023      	str	r3, [r4, #0]
   19f6e:	bd38      	pop	{r3, r4, r5, pc}
   19f70:	2003      	movs	r0, #3
   19f72:	bd38      	pop	{r3, r4, r5, pc}
   19f74:	20020b0c 	.word	0x20020b0c
   19f78:	ffff0000 	.word	0xffff0000
   19f7c:	20024e24 	.word	0x20024e24
   19f80:	20020b10 	.word	0x20020b10

00019f84 <gnss_interface_open>:
   19f84:	2801      	cmp	r0, #1
   19f86:	b510      	push	{r4, lr}
   19f88:	d120      	bne.n	19fcc <gnss_interface_open+0x48>
   19f8a:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   19f8e:	d11d      	bne.n	19fcc <gnss_interface_open+0x48>
   19f90:	2902      	cmp	r1, #2
   19f92:	d11b      	bne.n	19fcc <gnss_interface_open+0x48>
   19f94:	4c13      	ldr	r4, [pc, #76]	; (19fe4 <gnss_interface_open+0x60>)
   19f96:	6823      	ldr	r3, [r4, #0]
   19f98:	b29b      	uxth	r3, r3
   19f9a:	2b01      	cmp	r3, #1
   19f9c:	d11c      	bne.n	19fd8 <gnss_interface_open+0x54>
   19f9e:	6823      	ldr	r3, [r4, #0]
   19fa0:	4608      	mov	r0, r1
   19fa2:	0c1b      	lsrs	r3, r3, #16
   19fa4:	041b      	lsls	r3, r3, #16
   19fa6:	f043 0302 	orr.w	r3, r3, #2
   19faa:	2200      	movs	r2, #0
   19fac:	490e      	ldr	r1, [pc, #56]	; (19fe8 <gnss_interface_open+0x64>)
   19fae:	6023      	str	r3, [r4, #0]
   19fb0:	f000 faac 	bl	1a50c <packet_handler_create>
   19fb4:	4a0d      	ldr	r2, [pc, #52]	; (19fec <gnss_interface_open+0x68>)
   19fb6:	6010      	str	r0, [r2, #0]
   19fb8:	b170      	cbz	r0, 19fd8 <gnss_interface_open+0x54>
   19fba:	6823      	ldr	r3, [r4, #0]
   19fbc:	6802      	ldr	r2, [r0, #0]
   19fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19fc2:	6812      	ldr	r2, [r2, #0]
   19fc4:	6023      	str	r3, [r4, #0]
   19fc6:	4790      	blx	r2
   19fc8:	4809      	ldr	r0, [pc, #36]	; (19ff0 <gnss_interface_open+0x6c>)
   19fca:	bd10      	pop	{r4, pc}
   19fcc:	2016      	movs	r0, #22
   19fce:	f7f7 fa1f 	bl	11410 <bsd_os_errno_set>
   19fd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19fd6:	bd10      	pop	{r4, pc}
   19fd8:	200e      	movs	r0, #14
   19fda:	f7f7 fa19 	bl	11410 <bsd_os_errno_set>
   19fde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19fe2:	bd10      	pop	{r4, pc}
   19fe4:	20020b0c 	.word	0x20020b0c
   19fe8:	000192e1 	.word	0x000192e1
   19fec:	20020b14 	.word	0x20020b14
   19ff0:	49765443 	.word	0x49765443

00019ff4 <gnss_interface_close>:
   19ff4:	b530      	push	{r4, r5, lr}
   19ff6:	4b13      	ldr	r3, [pc, #76]	; (1a044 <gnss_interface_close+0x50>)
   19ff8:	b083      	sub	sp, #12
   19ffa:	4298      	cmp	r0, r3
   19ffc:	d11c      	bne.n	1a038 <gnss_interface_close+0x44>
   19ffe:	4c12      	ldr	r4, [pc, #72]	; (1a048 <gnss_interface_close+0x54>)
   1a000:	6823      	ldr	r3, [r4, #0]
   1a002:	b29b      	uxth	r3, r3
   1a004:	2b04      	cmp	r3, #4
   1a006:	d00f      	beq.n	1a028 <gnss_interface_close+0x34>
   1a008:	4d10      	ldr	r5, [pc, #64]	; (1a04c <gnss_interface_close+0x58>)
   1a00a:	6828      	ldr	r0, [r5, #0]
   1a00c:	b118      	cbz	r0, 1a016 <gnss_interface_close+0x22>
   1a00e:	f000 fa9d 	bl	1a54c <packet_handler_delete>
   1a012:	2300      	movs	r3, #0
   1a014:	602b      	str	r3, [r5, #0]
   1a016:	2000      	movs	r0, #0
   1a018:	6823      	ldr	r3, [r4, #0]
   1a01a:	0c1b      	lsrs	r3, r3, #16
   1a01c:	041b      	lsls	r3, r3, #16
   1a01e:	f043 0301 	orr.w	r3, r3, #1
   1a022:	6023      	str	r3, [r4, #0]
   1a024:	b003      	add	sp, #12
   1a026:	bd30      	pop	{r4, r5, pc}
   1a028:	2300      	movs	r3, #0
   1a02a:	2208      	movs	r2, #8
   1a02c:	9300      	str	r3, [sp, #0]
   1a02e:	f44f 7101 	mov.w	r1, #516	; 0x204
   1a032:	f7fc feaf 	bl	16d94 <nrf_setsockopt>
   1a036:	e7e7      	b.n	1a008 <gnss_interface_close+0x14>
   1a038:	2009      	movs	r0, #9
   1a03a:	f7f7 f9e9 	bl	11410 <bsd_os_errno_set>
   1a03e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a042:	e7ef      	b.n	1a024 <gnss_interface_close+0x30>
   1a044:	49765443 	.word	0x49765443
   1a048:	20020b0c 	.word	0x20020b0c
   1a04c:	20020b14 	.word	0x20020b14

0001a050 <rpc_gnss_serialize_utc>:
   1a050:	4603      	mov	r3, r0
   1a052:	b1d8      	cbz	r0, 1a08c <rpc_gnss_serialize_utc+0x3c>
   1a054:	b1d1      	cbz	r1, 1a08c <rpc_gnss_serialize_utc+0x3c>
   1a056:	2000      	movs	r0, #0
   1a058:	2201      	movs	r2, #1
   1a05a:	7048      	strb	r0, [r1, #1]
   1a05c:	700a      	strb	r2, [r1, #0]
   1a05e:	685a      	ldr	r2, [r3, #4]
   1a060:	2010      	movs	r0, #16
   1a062:	f8c1 2006 	str.w	r2, [r1, #6]
   1a066:	681a      	ldr	r2, [r3, #0]
   1a068:	f8c1 2002 	str.w	r2, [r1, #2]
   1a06c:	f993 200a 	ldrsb.w	r2, [r3, #10]
   1a070:	730a      	strb	r2, [r1, #12]
   1a072:	f993 200d 	ldrsb.w	r2, [r3, #13]
   1a076:	73ca      	strb	r2, [r1, #15]
   1a078:	f993 200c 	ldrsb.w	r2, [r3, #12]
   1a07c:	738a      	strb	r2, [r1, #14]
   1a07e:	7a1a      	ldrb	r2, [r3, #8]
   1a080:	728a      	strb	r2, [r1, #10]
   1a082:	7ada      	ldrb	r2, [r3, #11]
   1a084:	734a      	strb	r2, [r1, #13]
   1a086:	7a5b      	ldrb	r3, [r3, #9]
   1a088:	72cb      	strb	r3, [r1, #11]
   1a08a:	4770      	bx	lr
   1a08c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a090:	4770      	bx	lr
   1a092:	bf00      	nop

0001a094 <rpc_gnss_serialize_ephe>:
   1a094:	4603      	mov	r3, r0
   1a096:	2800      	cmp	r0, #0
   1a098:	d04b      	beq.n	1a132 <rpc_gnss_serialize_ephe+0x9e>
   1a09a:	2900      	cmp	r1, #0
   1a09c:	d049      	beq.n	1a132 <rpc_gnss_serialize_ephe+0x9e>
   1a09e:	2000      	movs	r0, #0
   1a0a0:	2202      	movs	r2, #2
   1a0a2:	7048      	strb	r0, [r1, #1]
   1a0a4:	700a      	strb	r2, [r1, #0]
   1a0a6:	68da      	ldr	r2, [r3, #12]
   1a0a8:	2040      	movs	r0, #64	; 0x40
   1a0aa:	f8c1 200b 	str.w	r2, [r1, #11]
   1a0ae:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a0b2:	f8a1 2009 	strh.w	r2, [r1, #9]
   1a0b6:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1a0ba:	720a      	strb	r2, [r1, #8]
   1a0bc:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   1a0c0:	878a      	strh	r2, [r1, #60]	; 0x3c
   1a0c2:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   1a0c6:	86ca      	strh	r2, [r1, #54]	; 0x36
   1a0c8:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   1a0cc:	874a      	strh	r2, [r1, #58]	; 0x3a
   1a0ce:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   1a0d2:	868a      	strh	r2, [r1, #52]	; 0x34
   1a0d4:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   1a0d8:	87ca      	strh	r2, [r1, #62]	; 0x3e
   1a0da:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   1a0de:	870a      	strh	r2, [r1, #56]	; 0x38
   1a0e0:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1a0e4:	830a      	strh	r2, [r1, #24]
   1a0e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a0e8:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   1a0ec:	7c9a      	ldrb	r2, [r3, #18]
   1a0ee:	744a      	strb	r2, [r1, #17]
   1a0f0:	785a      	ldrb	r2, [r3, #1]
   1a0f2:	70ca      	strb	r2, [r1, #3]
   1a0f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1a0f6:	62ca      	str	r2, [r1, #44]	; 0x2c
   1a0f8:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   1a0fc:	84ca      	strh	r2, [r1, #38]	; 0x26
   1a0fe:	885a      	ldrh	r2, [r3, #2]
   1a100:	808a      	strh	r2, [r1, #4]
   1a102:	6a1a      	ldr	r2, [r3, #32]
   1a104:	f8c1 201a 	str.w	r2, [r1, #26]
   1a108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a10a:	630a      	str	r2, [r1, #48]	; 0x30
   1a10c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a10e:	f8c1 201e 	str.w	r2, [r1, #30]
   1a112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1a114:	628a      	str	r2, [r1, #40]	; 0x28
   1a116:	781a      	ldrb	r2, [r3, #0]
   1a118:	708a      	strb	r2, [r1, #2]
   1a11a:	f993 2010 	ldrsb.w	r2, [r3, #16]
   1a11e:	73ca      	strb	r2, [r1, #15]
   1a120:	889a      	ldrh	r2, [r3, #4]
   1a122:	80ca      	strh	r2, [r1, #6]
   1a124:	8a9a      	ldrh	r2, [r3, #20]
   1a126:	824a      	strh	r2, [r1, #18]
   1a128:	7c5a      	ldrb	r2, [r3, #17]
   1a12a:	740a      	strb	r2, [r1, #16]
   1a12c:	699b      	ldr	r3, [r3, #24]
   1a12e:	614b      	str	r3, [r1, #20]
   1a130:	4770      	bx	lr
   1a132:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a136:	4770      	bx	lr

0001a138 <rpc_gnss_serialize_alm>:
   1a138:	4603      	mov	r3, r0
   1a13a:	b360      	cbz	r0, 1a196 <rpc_gnss_serialize_alm+0x5e>
   1a13c:	b359      	cbz	r1, 1a196 <rpc_gnss_serialize_alm+0x5e>
   1a13e:	2000      	movs	r0, #0
   1a140:	2203      	movs	r2, #3
   1a142:	7048      	strb	r0, [r1, #1]
   1a144:	700a      	strb	r2, [r1, #0]
   1a146:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1a14a:	2021      	movs	r0, #33	; 0x21
   1a14c:	f8a1 201d 	strh.w	r2, [r1, #29]
   1a150:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   1a154:	f8a1 201f 	strh.w	r2, [r1, #31]
   1a158:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   1a15c:	810a      	strh	r2, [r1, #8]
   1a15e:	889a      	ldrh	r2, [r3, #4]
   1a160:	80ca      	strh	r2, [r1, #6]
   1a162:	78da      	ldrb	r2, [r3, #3]
   1a164:	714a      	strb	r2, [r1, #5]
   1a166:	699a      	ldr	r2, [r3, #24]
   1a168:	f8c1 2019 	str.w	r2, [r1, #25]
   1a16c:	691a      	ldr	r2, [r3, #16]
   1a16e:	f8c1 2011 	str.w	r2, [r1, #17]
   1a172:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a176:	814a      	strh	r2, [r1, #10]
   1a178:	68da      	ldr	r2, [r3, #12]
   1a17a:	f8c1 200d 	str.w	r2, [r1, #13]
   1a17e:	7a9a      	ldrb	r2, [r3, #10]
   1a180:	730a      	strb	r2, [r1, #12]
   1a182:	781a      	ldrb	r2, [r3, #0]
   1a184:	708a      	strb	r2, [r1, #2]
   1a186:	789a      	ldrb	r2, [r3, #2]
   1a188:	710a      	strb	r2, [r1, #4]
   1a18a:	695a      	ldr	r2, [r3, #20]
   1a18c:	f8c1 2015 	str.w	r2, [r1, #21]
   1a190:	785b      	ldrb	r3, [r3, #1]
   1a192:	70cb      	strb	r3, [r1, #3]
   1a194:	4770      	bx	lr
   1a196:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a19a:	4770      	bx	lr

0001a19c <rpc_gnss_serialize_klob>:
   1a19c:	4603      	mov	r3, r0
   1a19e:	b1f0      	cbz	r0, 1a1de <rpc_gnss_serialize_klob+0x42>
   1a1a0:	b1e9      	cbz	r1, 1a1de <rpc_gnss_serialize_klob+0x42>
   1a1a2:	2000      	movs	r0, #0
   1a1a4:	2204      	movs	r2, #4
   1a1a6:	7048      	strb	r0, [r1, #1]
   1a1a8:	700a      	strb	r2, [r1, #0]
   1a1aa:	f993 2000 	ldrsb.w	r2, [r3]
   1a1ae:	200a      	movs	r0, #10
   1a1b0:	708a      	strb	r2, [r1, #2]
   1a1b2:	f993 2001 	ldrsb.w	r2, [r3, #1]
   1a1b6:	70ca      	strb	r2, [r1, #3]
   1a1b8:	f993 2002 	ldrsb.w	r2, [r3, #2]
   1a1bc:	710a      	strb	r2, [r1, #4]
   1a1be:	f993 2003 	ldrsb.w	r2, [r3, #3]
   1a1c2:	714a      	strb	r2, [r1, #5]
   1a1c4:	f993 2004 	ldrsb.w	r2, [r3, #4]
   1a1c8:	718a      	strb	r2, [r1, #6]
   1a1ca:	f993 2005 	ldrsb.w	r2, [r3, #5]
   1a1ce:	71ca      	strb	r2, [r1, #7]
   1a1d0:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1a1d4:	720a      	strb	r2, [r1, #8]
   1a1d6:	f993 3007 	ldrsb.w	r3, [r3, #7]
   1a1da:	724b      	strb	r3, [r1, #9]
   1a1dc:	4770      	bx	lr
   1a1de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a1e2:	4770      	bx	lr

0001a1e4 <rpc_gnss_serialize_nequick>:
   1a1e4:	4603      	mov	r3, r0
   1a1e6:	b198      	cbz	r0, 1a210 <rpc_gnss_serialize_nequick+0x2c>
   1a1e8:	b191      	cbz	r1, 1a210 <rpc_gnss_serialize_nequick+0x2c>
   1a1ea:	2000      	movs	r0, #0
   1a1ec:	2205      	movs	r2, #5
   1a1ee:	7048      	strb	r0, [r1, #1]
   1a1f0:	700a      	strb	r2, [r1, #0]
   1a1f2:	f9b3 2000 	ldrsh.w	r2, [r3]
   1a1f6:	200a      	movs	r0, #10
   1a1f8:	804a      	strh	r2, [r1, #2]
   1a1fa:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   1a1fe:	808a      	strh	r2, [r1, #4]
   1a200:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   1a204:	80ca      	strh	r2, [r1, #6]
   1a206:	799a      	ldrb	r2, [r3, #6]
   1a208:	720a      	strb	r2, [r1, #8]
   1a20a:	79db      	ldrb	r3, [r3, #7]
   1a20c:	724b      	strb	r3, [r1, #9]
   1a20e:	4770      	bx	lr
   1a210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a214:	4770      	bx	lr
   1a216:	bf00      	nop

0001a218 <rpc_gnss_serialize_time_and_sv_tow>:
   1a218:	b310      	cbz	r0, 1a260 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   1a21a:	b309      	cbz	r1, 1a260 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   1a21c:	b470      	push	{r4, r5, r6}
   1a21e:	2500      	movs	r5, #0
   1a220:	2606      	movs	r6, #6
   1a222:	460c      	mov	r4, r1
   1a224:	704d      	strb	r5, [r1, #1]
   1a226:	700e      	strb	r6, [r1, #0]
   1a228:	462b      	mov	r3, r5
   1a22a:	8805      	ldrh	r5, [r0, #0]
   1a22c:	4602      	mov	r2, r0
   1a22e:	804d      	strh	r5, [r1, #2]
   1a230:	68c5      	ldr	r5, [r0, #12]
   1a232:	f8c1 500a 	str.w	r5, [r1, #10]
   1a236:	8905      	ldrh	r5, [r0, #8]
   1a238:	810d      	strh	r5, [r1, #8]
   1a23a:	6840      	ldr	r0, [r0, #4]
   1a23c:	6048      	str	r0, [r1, #4]
   1a23e:	8a15      	ldrh	r5, [r2, #16]
   1a240:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   1a244:	4408      	add	r0, r1
   1a246:	81c5      	strh	r5, [r0, #14]
   1a248:	7c90      	ldrb	r0, [r2, #18]
   1a24a:	3301      	adds	r3, #1
   1a24c:	2b20      	cmp	r3, #32
   1a24e:	7420      	strb	r0, [r4, #16]
   1a250:	f102 0204 	add.w	r2, r2, #4
   1a254:	f104 0403 	add.w	r4, r4, #3
   1a258:	d1f1      	bne.n	1a23e <rpc_gnss_serialize_time_and_sv_tow+0x26>
   1a25a:	206e      	movs	r0, #110	; 0x6e
   1a25c:	bc70      	pop	{r4, r5, r6}
   1a25e:	4770      	bx	lr
   1a260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a264:	4770      	bx	lr
   1a266:	bf00      	nop

0001a268 <rpc_gnss_serialize_location>:
   1a268:	4603      	mov	r3, r0
   1a26a:	b1c8      	cbz	r0, 1a2a0 <rpc_gnss_serialize_location+0x38>
   1a26c:	b1c1      	cbz	r1, 1a2a0 <rpc_gnss_serialize_location+0x38>
   1a26e:	2000      	movs	r0, #0
   1a270:	2207      	movs	r2, #7
   1a272:	7048      	strb	r0, [r1, #1]
   1a274:	700a      	strb	r2, [r1, #0]
   1a276:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a27a:	2011      	movs	r0, #17
   1a27c:	814a      	strh	r2, [r1, #10]
   1a27e:	7b9a      	ldrb	r2, [r3, #14]
   1a280:	740a      	strb	r2, [r1, #16]
   1a282:	681a      	ldr	r2, [r3, #0]
   1a284:	f8c1 2002 	str.w	r2, [r1, #2]
   1a288:	685a      	ldr	r2, [r3, #4]
   1a28a:	f8c1 2006 	str.w	r2, [r1, #6]
   1a28e:	7b1a      	ldrb	r2, [r3, #12]
   1a290:	738a      	strb	r2, [r1, #14]
   1a292:	7b5a      	ldrb	r2, [r3, #13]
   1a294:	73ca      	strb	r2, [r1, #15]
   1a296:	7a9a      	ldrb	r2, [r3, #10]
   1a298:	730a      	strb	r2, [r1, #12]
   1a29a:	7adb      	ldrb	r3, [r3, #11]
   1a29c:	734b      	strb	r3, [r1, #13]
   1a29e:	4770      	bx	lr
   1a2a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a2a4:	4770      	bx	lr
   1a2a6:	bf00      	nop

0001a2a8 <rpc_gnss_serialize_integrity>:
   1a2a8:	b148      	cbz	r0, 1a2be <rpc_gnss_serialize_integrity+0x16>
   1a2aa:	b141      	cbz	r1, 1a2be <rpc_gnss_serialize_integrity+0x16>
   1a2ac:	2200      	movs	r2, #0
   1a2ae:	2308      	movs	r3, #8
   1a2b0:	704a      	strb	r2, [r1, #1]
   1a2b2:	700b      	strb	r3, [r1, #0]
   1a2b4:	6803      	ldr	r3, [r0, #0]
   1a2b6:	2006      	movs	r0, #6
   1a2b8:	f8c1 3002 	str.w	r3, [r1, #2]
   1a2bc:	4770      	bx	lr
   1a2be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a2c2:	4770      	bx	lr

0001a2c4 <gnss_client_event_handler>:
   1a2c4:	f850 1b08 	ldr.w	r1, [r0], #8
   1a2c8:	0c09      	lsrs	r1, r1, #16
   1a2ca:	f7ff b817 	b.w	192fc <rpc_gnss_event_handler>
   1a2ce:	bf00      	nop

0001a2d0 <rpc_gnss_client_init>:
   1a2d0:	4801      	ldr	r0, [pc, #4]	; (1a2d8 <rpc_gnss_client_init+0x8>)
   1a2d2:	f7fe bb79 	b.w	189c8 <rpc_client_register>
   1a2d6:	bf00      	nop
   1a2d8:	0001f30c 	.word	0x0001f30c

0001a2dc <rpc_gnss_client_request_alloc>:
   1a2dc:	2300      	movs	r3, #0
   1a2de:	b510      	push	{r4, lr}
   1a2e0:	b082      	sub	sp, #8
   1a2e2:	9301      	str	r3, [sp, #4]
   1a2e4:	b158      	cbz	r0, 1a2fe <rpc_gnss_client_request_alloc+0x22>
   1a2e6:	4604      	mov	r4, r0
   1a2e8:	aa01      	add	r2, sp, #4
   1a2ea:	2007      	movs	r0, #7
   1a2ec:	f7fe fda4 	bl	18e38 <rpc_message_alloc>
   1a2f0:	b918      	cbnz	r0, 1a2fa <rpc_gnss_client_request_alloc+0x1e>
   1a2f2:	9b01      	ldr	r3, [sp, #4]
   1a2f4:	b10b      	cbz	r3, 1a2fa <rpc_gnss_client_request_alloc+0x1e>
   1a2f6:	3308      	adds	r3, #8
   1a2f8:	6023      	str	r3, [r4, #0]
   1a2fa:	b002      	add	sp, #8
   1a2fc:	bd10      	pop	{r4, pc}
   1a2fe:	2007      	movs	r0, #7
   1a300:	b002      	add	sp, #8
   1a302:	bd10      	pop	{r4, pc}

0001a304 <rpc_gnss_client_request_send>:
   1a304:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1a308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1a30c:	d10b      	bne.n	1a326 <rpc_gnss_client_request_send+0x22>
   1a30e:	b160      	cbz	r0, 1a32a <rpc_gnss_client_request_send+0x26>
   1a310:	4603      	mov	r3, r0
   1a312:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1a316:	2007      	movs	r0, #7
   1a318:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1a31c:	f843 1d08 	str.w	r1, [r3, #-8]!
   1a320:	4619      	mov	r1, r3
   1a322:	f7fe bd71 	b.w	18e08 <rpc_message_send>
   1a326:	200f      	movs	r0, #15
   1a328:	4770      	bx	lr
   1a32a:	2007      	movs	r0, #7
   1a32c:	4770      	bx	lr
   1a32e:	bf00      	nop

0001a330 <rpc_gnss_client_message_free>:
   1a330:	b120      	cbz	r0, 1a33c <rpc_gnss_client_message_free+0xc>
   1a332:	f1a0 0108 	sub.w	r1, r0, #8
   1a336:	2007      	movs	r0, #7
   1a338:	f7fe bdb0 	b.w	18e9c <rpc_message_free>
   1a33c:	2007      	movs	r0, #7
   1a33e:	4770      	bx	lr

0001a340 <rpc_gnss_client_data_free>:
   1a340:	b118      	cbz	r0, 1a34a <rpc_gnss_client_data_free+0xa>
   1a342:	4601      	mov	r1, r0
   1a344:	2007      	movs	r0, #7
   1a346:	f7fe bebb 	b.w	190c0 <rpc_message_data_free>
   1a34a:	2007      	movs	r0, #7
   1a34c:	4770      	bx	lr
   1a34e:	bf00      	nop

0001a350 <datagram_handler_init>:
   1a350:	b510      	push	{r4, lr}
   1a352:	4604      	mov	r4, r0
   1a354:	200c      	movs	r0, #12
   1a356:	f7f9 f901 	bl	1355c <nrf_malloc>
   1a35a:	60e0      	str	r0, [r4, #12]
   1a35c:	b118      	cbz	r0, 1a366 <datagram_handler_init+0x16>
   1a35e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a362:	f7fc bc0d 	b.w	16b80 <linked_list_init>
   1a366:	2004      	movs	r0, #4
   1a368:	bd10      	pop	{r4, pc}
   1a36a:	bf00      	nop

0001a36c <datagram_handler_put>:
   1a36c:	b570      	push	{r4, r5, r6, lr}
   1a36e:	4606      	mov	r6, r0
   1a370:	2014      	movs	r0, #20
   1a372:	460d      	mov	r5, r1
   1a374:	f7f9 f8f2 	bl	1355c <nrf_malloc>
   1a378:	b178      	cbz	r0, 1a39a <datagram_handler_put+0x2e>
   1a37a:	682b      	ldr	r3, [r5, #0]
   1a37c:	4604      	mov	r4, r0
   1a37e:	6043      	str	r3, [r0, #4]
   1a380:	686b      	ldr	r3, [r5, #4]
   1a382:	4601      	mov	r1, r0
   1a384:	6083      	str	r3, [r0, #8]
   1a386:	68eb      	ldr	r3, [r5, #12]
   1a388:	60c3      	str	r3, [r0, #12]
   1a38a:	68ab      	ldr	r3, [r5, #8]
   1a38c:	6103      	str	r3, [r0, #16]
   1a38e:	68f0      	ldr	r0, [r6, #12]
   1a390:	f7fc fc00 	bl	16b94 <linked_list_push>
   1a394:	b920      	cbnz	r0, 1a3a0 <datagram_handler_put+0x34>
   1a396:	6868      	ldr	r0, [r5, #4]
   1a398:	bd70      	pop	{r4, r5, r6, pc}
   1a39a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a39e:	bd70      	pop	{r4, r5, r6, pc}
   1a3a0:	4620      	mov	r0, r4
   1a3a2:	f7f9 f8e5 	bl	13570 <nrf_free>
   1a3a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a3aa:	bd70      	pop	{r4, r5, r6, pc}

0001a3ac <datagram_handler_get>:
   1a3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a3ae:	4606      	mov	r6, r0
   1a3b0:	b085      	sub	sp, #20
   1a3b2:	68c0      	ldr	r0, [r0, #12]
   1a3b4:	460c      	mov	r4, r1
   1a3b6:	4617      	mov	r7, r2
   1a3b8:	f7fc fc0c 	bl	16bd4 <linked_list_peek>
   1a3bc:	2800      	cmp	r0, #0
   1a3be:	d037      	beq.n	1a430 <datagram_handler_get+0x84>
   1a3c0:	6882      	ldr	r2, [r0, #8]
   1a3c2:	4605      	mov	r5, r0
   1a3c4:	e9d4 0300 	ldrd	r0, r3, [r4]
   1a3c8:	429a      	cmp	r2, r3
   1a3ca:	bf28      	it	cs
   1a3cc:	461a      	movcs	r2, r3
   1a3ce:	6062      	str	r2, [r4, #4]
   1a3d0:	b110      	cbz	r0, 1a3d8 <datagram_handler_get+0x2c>
   1a3d2:	6869      	ldr	r1, [r5, #4]
   1a3d4:	f002 fe69 	bl	1d0aa <memcpy>
   1a3d8:	68a0      	ldr	r0, [r4, #8]
   1a3da:	b118      	cbz	r0, 1a3e4 <datagram_handler_get+0x38>
   1a3dc:	692b      	ldr	r3, [r5, #16]
   1a3de:	b10b      	cbz	r3, 1a3e4 <datagram_handler_get+0x38>
   1a3e0:	68ea      	ldr	r2, [r5, #12]
   1a3e2:	b9e2      	cbnz	r2, 1a41e <datagram_handler_get+0x72>
   1a3e4:	2300      	movs	r3, #0
   1a3e6:	60e3      	str	r3, [r4, #12]
   1a3e8:	073b      	lsls	r3, r7, #28
   1a3ea:	d502      	bpl.n	1a3f2 <datagram_handler_get+0x46>
   1a3ec:	6860      	ldr	r0, [r4, #4]
   1a3ee:	b005      	add	sp, #20
   1a3f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a3f2:	68f0      	ldr	r0, [r6, #12]
   1a3f4:	f7fc fbe4 	bl	16bc0 <linked_list_pop>
   1a3f8:	4605      	mov	r5, r0
   1a3fa:	2800      	cmp	r0, #0
   1a3fc:	d0f6      	beq.n	1a3ec <datagram_handler_get+0x40>
   1a3fe:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1a402:	6902      	ldr	r2, [r0, #16]
   1a404:	9300      	str	r3, [sp, #0]
   1a406:	68c3      	ldr	r3, [r0, #12]
   1a408:	e9cd 1201 	strd	r1, r2, [sp, #4]
   1a40c:	9303      	str	r3, [sp, #12]
   1a40e:	4668      	mov	r0, sp
   1a410:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
   1a414:	4798      	blx	r3
   1a416:	4628      	mov	r0, r5
   1a418:	f7f9 f8aa 	bl	13570 <nrf_free>
   1a41c:	e7e6      	b.n	1a3ec <datagram_handler_get+0x40>
   1a41e:	68e3      	ldr	r3, [r4, #12]
   1a420:	429a      	cmp	r2, r3
   1a422:	bf28      	it	cs
   1a424:	461a      	movcs	r2, r3
   1a426:	60e2      	str	r2, [r4, #12]
   1a428:	6929      	ldr	r1, [r5, #16]
   1a42a:	f002 fe3e 	bl	1d0aa <memcpy>
   1a42e:	e7db      	b.n	1a3e8 <datagram_handler_get+0x3c>
   1a430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a434:	e7db      	b.n	1a3ee <datagram_handler_get+0x42>
   1a436:	bf00      	nop

0001a438 <datagram_handler_available>:
   1a438:	b508      	push	{r3, lr}
   1a43a:	68c0      	ldr	r0, [r0, #12]
   1a43c:	f7fc fbca 	bl	16bd4 <linked_list_peek>
   1a440:	b108      	cbz	r0, 1a446 <datagram_handler_available+0xe>
   1a442:	6880      	ldr	r0, [r0, #8]
   1a444:	bd08      	pop	{r3, pc}
   1a446:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a44a:	bd08      	pop	{r3, pc}

0001a44c <datagram_handler_flush>:
   1a44c:	b530      	push	{r4, r5, lr}
   1a44e:	4605      	mov	r5, r0
   1a450:	68c0      	ldr	r0, [r0, #12]
   1a452:	b085      	sub	sp, #20
   1a454:	b9a8      	cbnz	r0, 1a482 <datagram_handler_flush+0x36>
   1a456:	e01a      	b.n	1a48e <datagram_handler_flush+0x42>
   1a458:	68e8      	ldr	r0, [r5, #12]
   1a45a:	f7fc fbb1 	bl	16bc0 <linked_list_pop>
   1a45e:	4604      	mov	r4, r0
   1a460:	b170      	cbz	r0, 1a480 <datagram_handler_flush+0x34>
   1a462:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1a466:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1a46a:	e9cd 0100 	strd	r0, r1, [sp]
   1a46e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1a472:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1a476:	4668      	mov	r0, sp
   1a478:	4798      	blx	r3
   1a47a:	4620      	mov	r0, r4
   1a47c:	f7f9 f878 	bl	13570 <nrf_free>
   1a480:	68e8      	ldr	r0, [r5, #12]
   1a482:	f7fc fbad 	bl	16be0 <linked_list_size_get>
   1a486:	2800      	cmp	r0, #0
   1a488:	d1e6      	bne.n	1a458 <datagram_handler_flush+0xc>
   1a48a:	b005      	add	sp, #20
   1a48c:	bd30      	pop	{r4, r5, pc}
   1a48e:	2008      	movs	r0, #8
   1a490:	b005      	add	sp, #20
   1a492:	bd30      	pop	{r4, r5, pc}

0001a494 <datagram_handler_free>:
   1a494:	b530      	push	{r4, r5, lr}
   1a496:	4605      	mov	r5, r0
   1a498:	68c0      	ldr	r0, [r0, #12]
   1a49a:	b085      	sub	sp, #20
   1a49c:	b9a0      	cbnz	r0, 1a4c8 <datagram_handler_free+0x34>
   1a49e:	e01c      	b.n	1a4da <datagram_handler_free+0x46>
   1a4a0:	f7fc fb8e 	bl	16bc0 <linked_list_pop>
   1a4a4:	4604      	mov	r4, r0
   1a4a6:	b170      	cbz	r0, 1a4c6 <datagram_handler_free+0x32>
   1a4a8:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1a4ac:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1a4b0:	e9cd 0100 	strd	r0, r1, [sp]
   1a4b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1a4b8:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1a4bc:	4668      	mov	r0, sp
   1a4be:	4798      	blx	r3
   1a4c0:	4620      	mov	r0, r4
   1a4c2:	f7f9 f855 	bl	13570 <nrf_free>
   1a4c6:	68e8      	ldr	r0, [r5, #12]
   1a4c8:	f7fc fb8a 	bl	16be0 <linked_list_size_get>
   1a4cc:	4604      	mov	r4, r0
   1a4ce:	68e8      	ldr	r0, [r5, #12]
   1a4d0:	2c00      	cmp	r4, #0
   1a4d2:	d1e5      	bne.n	1a4a0 <datagram_handler_free+0xc>
   1a4d4:	f7f9 f84c 	bl	13570 <nrf_free>
   1a4d8:	60ec      	str	r4, [r5, #12]
   1a4da:	b005      	add	sp, #20
   1a4dc:	bd30      	pop	{r4, r5, pc}
   1a4de:	bf00      	nop

0001a4e0 <null_handler_init>:
   1a4e0:	2000      	movs	r0, #0
   1a4e2:	4770      	bx	lr

0001a4e4 <null_handler_put>:
   1a4e4:	b510      	push	{r4, lr}
   1a4e6:	460c      	mov	r4, r1
   1a4e8:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1a4ec:	4620      	mov	r0, r4
   1a4ee:	4798      	blx	r3
   1a4f0:	6860      	ldr	r0, [r4, #4]
   1a4f2:	bd10      	pop	{r4, pc}

0001a4f4 <null_handler_get>:
   1a4f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a4f8:	4770      	bx	lr
   1a4fa:	bf00      	nop

0001a4fc <null_handler_available>:
   1a4fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a500:	4770      	bx	lr
   1a502:	bf00      	nop

0001a504 <null_handler_flush>:
   1a504:	2000      	movs	r0, #0
   1a506:	4770      	bx	lr

0001a508 <null_handler_free>:
   1a508:	4770      	bx	lr
   1a50a:	bf00      	nop

0001a50c <packet_handler_create>:
   1a50c:	2801      	cmp	r0, #1
   1a50e:	b538      	push	{r3, r4, r5, lr}
   1a510:	460d      	mov	r5, r1
   1a512:	4614      	mov	r4, r2
   1a514:	d00d      	beq.n	1a532 <packet_handler_create+0x26>
   1a516:	db11      	blt.n	1a53c <packet_handler_create+0x30>
   1a518:	2803      	cmp	r0, #3
   1a51a:	dc0f      	bgt.n	1a53c <packet_handler_create+0x30>
   1a51c:	2010      	movs	r0, #16
   1a51e:	f7f9 f81d 	bl	1355c <nrf_malloc>
   1a522:	2218      	movs	r2, #24
   1a524:	b120      	cbz	r0, 1a530 <packet_handler_create+0x24>
   1a526:	4b08      	ldr	r3, [pc, #32]	; (1a548 <packet_handler_create+0x3c>)
   1a528:	6045      	str	r5, [r0, #4]
   1a52a:	4413      	add	r3, r2
   1a52c:	6084      	str	r4, [r0, #8]
   1a52e:	6003      	str	r3, [r0, #0]
   1a530:	bd38      	pop	{r3, r4, r5, pc}
   1a532:	2014      	movs	r0, #20
   1a534:	f7f9 f812 	bl	1355c <nrf_malloc>
   1a538:	2230      	movs	r2, #48	; 0x30
   1a53a:	e7f3      	b.n	1a524 <packet_handler_create+0x18>
   1a53c:	200c      	movs	r0, #12
   1a53e:	f7f9 f80d 	bl	1355c <nrf_malloc>
   1a542:	2200      	movs	r2, #0
   1a544:	e7ee      	b.n	1a524 <packet_handler_create+0x18>
   1a546:	bf00      	nop
   1a548:	0001f31c 	.word	0x0001f31c

0001a54c <packet_handler_delete>:
   1a54c:	b510      	push	{r4, lr}
   1a54e:	4604      	mov	r4, r0
   1a550:	6803      	ldr	r3, [r0, #0]
   1a552:	691b      	ldr	r3, [r3, #16]
   1a554:	4798      	blx	r3
   1a556:	6823      	ldr	r3, [r4, #0]
   1a558:	4620      	mov	r0, r4
   1a55a:	695b      	ldr	r3, [r3, #20]
   1a55c:	4798      	blx	r3
   1a55e:	4620      	mov	r0, r4
   1a560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a564:	f7f9 b804 	b.w	13570 <nrf_free>

0001a568 <stream_handler_init>:
   1a568:	b510      	push	{r4, lr}
   1a56a:	4604      	mov	r4, r0
   1a56c:	200c      	movs	r0, #12
   1a56e:	f7f8 fff5 	bl	1355c <nrf_malloc>
   1a572:	60e0      	str	r0, [r4, #12]
   1a574:	b128      	cbz	r0, 1a582 <stream_handler_init+0x1a>
   1a576:	2300      	movs	r3, #0
   1a578:	6123      	str	r3, [r4, #16]
   1a57a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a57e:	f7fc baff 	b.w	16b80 <linked_list_init>
   1a582:	2004      	movs	r0, #4
   1a584:	bd10      	pop	{r4, pc}
   1a586:	bf00      	nop

0001a588 <stream_handler_put>:
   1a588:	b570      	push	{r4, r5, r6, lr}
   1a58a:	4606      	mov	r6, r0
   1a58c:	2014      	movs	r0, #20
   1a58e:	460d      	mov	r5, r1
   1a590:	f7f8 ffe4 	bl	1355c <nrf_malloc>
   1a594:	b178      	cbz	r0, 1a5b6 <stream_handler_put+0x2e>
   1a596:	682b      	ldr	r3, [r5, #0]
   1a598:	4604      	mov	r4, r0
   1a59a:	6043      	str	r3, [r0, #4]
   1a59c:	686b      	ldr	r3, [r5, #4]
   1a59e:	4601      	mov	r1, r0
   1a5a0:	6083      	str	r3, [r0, #8]
   1a5a2:	68eb      	ldr	r3, [r5, #12]
   1a5a4:	60c3      	str	r3, [r0, #12]
   1a5a6:	68ab      	ldr	r3, [r5, #8]
   1a5a8:	6103      	str	r3, [r0, #16]
   1a5aa:	68f0      	ldr	r0, [r6, #12]
   1a5ac:	f7fc faf2 	bl	16b94 <linked_list_push>
   1a5b0:	b920      	cbnz	r0, 1a5bc <stream_handler_put+0x34>
   1a5b2:	6868      	ldr	r0, [r5, #4]
   1a5b4:	bd70      	pop	{r4, r5, r6, pc}
   1a5b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a5ba:	bd70      	pop	{r4, r5, r6, pc}
   1a5bc:	4620      	mov	r0, r4
   1a5be:	f7f8 ffd7 	bl	13570 <nrf_free>
   1a5c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a5c6:	bd70      	pop	{r4, r5, r6, pc}

0001a5c8 <stream_handler_get>:
   1a5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5cc:	4682      	mov	sl, r0
   1a5ce:	b087      	sub	sp, #28
   1a5d0:	68c0      	ldr	r0, [r0, #12]
   1a5d2:	4689      	mov	r9, r1
   1a5d4:	4693      	mov	fp, r2
   1a5d6:	f7fc fafd 	bl	16bd4 <linked_list_peek>
   1a5da:	2800      	cmp	r0, #0
   1a5dc:	d072      	beq.n	1a6c4 <stream_handler_get+0xfc>
   1a5de:	4605      	mov	r5, r0
   1a5e0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1a5e4:	b120      	cbz	r0, 1a5f0 <stream_handler_get+0x28>
   1a5e6:	692b      	ldr	r3, [r5, #16]
   1a5e8:	b113      	cbz	r3, 1a5f0 <stream_handler_get+0x28>
   1a5ea:	68ea      	ldr	r2, [r5, #12]
   1a5ec:	2a00      	cmp	r2, #0
   1a5ee:	d15c      	bne.n	1a6aa <stream_handler_get+0xe2>
   1a5f0:	2300      	movs	r3, #0
   1a5f2:	f8c9 300c 	str.w	r3, [r9, #12]
   1a5f6:	f8d9 2000 	ldr.w	r2, [r9]
   1a5fa:	f8d9 8004 	ldr.w	r8, [r9, #4]
   1a5fe:	f8da 1010 	ldr.w	r1, [sl, #16]
   1a602:	9201      	str	r2, [sp, #4]
   1a604:	f1b8 0f00 	cmp.w	r8, #0
   1a608:	d05a      	beq.n	1a6c0 <stream_handler_get+0xf8>
   1a60a:	f00b 0308 	and.w	r3, fp, #8
   1a60e:	2400      	movs	r4, #0
   1a610:	9300      	str	r3, [sp, #0]
   1a612:	e010      	b.n	1a636 <stream_handler_get+0x6e>
   1a614:	f8da 3010 	ldr.w	r3, [sl, #16]
   1a618:	443b      	add	r3, r7
   1a61a:	f8ca 3010 	str.w	r3, [sl, #16]
   1a61e:	4628      	mov	r0, r5
   1a620:	f7fc fae0 	bl	16be4 <linked_list_get_next>
   1a624:	443c      	add	r4, r7
   1a626:	4605      	mov	r5, r0
   1a628:	2800      	cmp	r0, #0
   1a62a:	d038      	beq.n	1a69e <stream_handler_get+0xd6>
   1a62c:	45a0      	cmp	r8, r4
   1a62e:	d936      	bls.n	1a69e <stream_handler_get+0xd6>
   1a630:	2100      	movs	r1, #0
   1a632:	f8d9 2000 	ldr.w	r2, [r9]
   1a636:	68ae      	ldr	r6, [r5, #8]
   1a638:	eba8 0b04 	sub.w	fp, r8, r4
   1a63c:	1a76      	subs	r6, r6, r1
   1a63e:	455e      	cmp	r6, fp
   1a640:	4637      	mov	r7, r6
   1a642:	bf28      	it	cs
   1a644:	465f      	movcs	r7, fp
   1a646:	b132      	cbz	r2, 1a656 <stream_handler_get+0x8e>
   1a648:	6868      	ldr	r0, [r5, #4]
   1a64a:	9b01      	ldr	r3, [sp, #4]
   1a64c:	4401      	add	r1, r0
   1a64e:	463a      	mov	r2, r7
   1a650:	1918      	adds	r0, r3, r4
   1a652:	f002 fd2a 	bl	1d0aa <memcpy>
   1a656:	9b00      	ldr	r3, [sp, #0]
   1a658:	2b00      	cmp	r3, #0
   1a65a:	d1e0      	bne.n	1a61e <stream_handler_get+0x56>
   1a65c:	455e      	cmp	r6, fp
   1a65e:	d8d9      	bhi.n	1a614 <stream_handler_get+0x4c>
   1a660:	f8da 000c 	ldr.w	r0, [sl, #12]
   1a664:	f7fc faac 	bl	16bc0 <linked_list_pop>
   1a668:	4606      	mov	r6, r0
   1a66a:	b170      	cbz	r0, 1a68a <stream_handler_get+0xc2>
   1a66c:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   1a670:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   1a674:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1a678:	e9cd 1004 	strd	r1, r0, [sp, #16]
   1a67c:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   1a680:	a802      	add	r0, sp, #8
   1a682:	4798      	blx	r3
   1a684:	4630      	mov	r0, r6
   1a686:	f7f8 ff73 	bl	13570 <nrf_free>
   1a68a:	2300      	movs	r3, #0
   1a68c:	4628      	mov	r0, r5
   1a68e:	f8ca 3010 	str.w	r3, [sl, #16]
   1a692:	f7fc faa7 	bl	16be4 <linked_list_get_next>
   1a696:	443c      	add	r4, r7
   1a698:	4605      	mov	r5, r0
   1a69a:	2800      	cmp	r0, #0
   1a69c:	d1c6      	bne.n	1a62c <stream_handler_get+0x64>
   1a69e:	4620      	mov	r0, r4
   1a6a0:	f8c9 4004 	str.w	r4, [r9, #4]
   1a6a4:	b007      	add	sp, #28
   1a6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6aa:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1a6ae:	429a      	cmp	r2, r3
   1a6b0:	bf28      	it	cs
   1a6b2:	461a      	movcs	r2, r3
   1a6b4:	f8c9 200c 	str.w	r2, [r9, #12]
   1a6b8:	6929      	ldr	r1, [r5, #16]
   1a6ba:	f002 fcf6 	bl	1d0aa <memcpy>
   1a6be:	e79a      	b.n	1a5f6 <stream_handler_get+0x2e>
   1a6c0:	4644      	mov	r4, r8
   1a6c2:	e7ec      	b.n	1a69e <stream_handler_get+0xd6>
   1a6c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a6c8:	e7ec      	b.n	1a6a4 <stream_handler_get+0xdc>
   1a6ca:	bf00      	nop

0001a6cc <stream_handler_available>:
   1a6cc:	b510      	push	{r4, lr}
   1a6ce:	4604      	mov	r4, r0
   1a6d0:	68c0      	ldr	r0, [r0, #12]
   1a6d2:	f7fc fa7f 	bl	16bd4 <linked_list_peek>
   1a6d6:	b150      	cbz	r0, 1a6ee <stream_handler_available+0x22>
   1a6d8:	6924      	ldr	r4, [r4, #16]
   1a6da:	4264      	negs	r4, r4
   1a6dc:	6883      	ldr	r3, [r0, #8]
   1a6de:	441c      	add	r4, r3
   1a6e0:	f7fc fa80 	bl	16be4 <linked_list_get_next>
   1a6e4:	2800      	cmp	r0, #0
   1a6e6:	d1f9      	bne.n	1a6dc <stream_handler_available+0x10>
   1a6e8:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   1a6ec:	bd10      	pop	{r4, pc}
   1a6ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a6f2:	bd10      	pop	{r4, pc}

0001a6f4 <stream_handler_flush>:
   1a6f4:	b530      	push	{r4, r5, lr}
   1a6f6:	4605      	mov	r5, r0
   1a6f8:	68c0      	ldr	r0, [r0, #12]
   1a6fa:	b085      	sub	sp, #20
   1a6fc:	b9a8      	cbnz	r0, 1a72a <stream_handler_flush+0x36>
   1a6fe:	e01a      	b.n	1a736 <stream_handler_flush+0x42>
   1a700:	68e8      	ldr	r0, [r5, #12]
   1a702:	f7fc fa5d 	bl	16bc0 <linked_list_pop>
   1a706:	4604      	mov	r4, r0
   1a708:	b170      	cbz	r0, 1a728 <stream_handler_flush+0x34>
   1a70a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1a70e:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1a712:	e9cd 0100 	strd	r0, r1, [sp]
   1a716:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1a71a:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1a71e:	4668      	mov	r0, sp
   1a720:	4798      	blx	r3
   1a722:	4620      	mov	r0, r4
   1a724:	f7f8 ff24 	bl	13570 <nrf_free>
   1a728:	68e8      	ldr	r0, [r5, #12]
   1a72a:	f7fc fa59 	bl	16be0 <linked_list_size_get>
   1a72e:	2800      	cmp	r0, #0
   1a730:	d1e6      	bne.n	1a700 <stream_handler_flush+0xc>
   1a732:	b005      	add	sp, #20
   1a734:	bd30      	pop	{r4, r5, pc}
   1a736:	2008      	movs	r0, #8
   1a738:	b005      	add	sp, #20
   1a73a:	bd30      	pop	{r4, r5, pc}

0001a73c <stream_handler_free>:
   1a73c:	b530      	push	{r4, r5, lr}
   1a73e:	4605      	mov	r5, r0
   1a740:	68c0      	ldr	r0, [r0, #12]
   1a742:	b085      	sub	sp, #20
   1a744:	b9a0      	cbnz	r0, 1a770 <stream_handler_free+0x34>
   1a746:	e01c      	b.n	1a782 <stream_handler_free+0x46>
   1a748:	f7fc fa3a 	bl	16bc0 <linked_list_pop>
   1a74c:	4604      	mov	r4, r0
   1a74e:	b170      	cbz	r0, 1a76e <stream_handler_free+0x32>
   1a750:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1a754:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1a758:	e9cd 0100 	strd	r0, r1, [sp]
   1a75c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1a760:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1a764:	4668      	mov	r0, sp
   1a766:	4798      	blx	r3
   1a768:	4620      	mov	r0, r4
   1a76a:	f7f8 ff01 	bl	13570 <nrf_free>
   1a76e:	68e8      	ldr	r0, [r5, #12]
   1a770:	f7fc fa36 	bl	16be0 <linked_list_size_get>
   1a774:	4604      	mov	r4, r0
   1a776:	68e8      	ldr	r0, [r5, #12]
   1a778:	2c00      	cmp	r4, #0
   1a77a:	d1e5      	bne.n	1a748 <stream_handler_free+0xc>
   1a77c:	f7f8 fef8 	bl	13570 <nrf_free>
   1a780:	60ec      	str	r4, [r5, #12]
   1a782:	b005      	add	sp, #20
   1a784:	bd30      	pop	{r4, r5, pc}
   1a786:	bf00      	nop

0001a788 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   1a788:	4a07      	ldr	r2, [pc, #28]	; (1a7a8 <SystemInit+0x20>)
   1a78a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1a78e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1a792:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   1a796:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1a79a:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   1a79e:	4b03      	ldr	r3, [pc, #12]	; (1a7ac <SystemInit+0x24>)
   1a7a0:	4a03      	ldr	r2, [pc, #12]	; (1a7b0 <SystemInit+0x28>)
   1a7a2:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   1a7a4:	4770      	bx	lr
   1a7a6:	bf00      	nop
   1a7a8:	e000ed00 	.word	0xe000ed00
   1a7ac:	2002c448 	.word	0x2002c448
   1a7b0:	03d09000 	.word	0x03d09000

0001a7b4 <nrfx_uarte_init>:
}

nrfx_err_t nrfx_uarte_init(nrfx_uarte_t const *        p_instance,
                           nrfx_uarte_config_t const * p_config,
                           nrfx_uarte_event_handler_t  event_handler)
{
   1a7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a7b8:	4606      	mov	r6, r0
    NRFX_ASSERT(p_config);
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1a7ba:	7904      	ldrb	r4, [r0, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1a7bc:	2024      	movs	r0, #36	; 0x24
   1a7be:	4d42      	ldr	r5, [pc, #264]	; (1a8c8 <nrfx_uarte_init+0x114>)
   1a7c0:	fb00 5004 	mla	r0, r0, r4, r5
   1a7c4:	f890 0020 	ldrb.w	r0, [r0, #32]
   1a7c8:	2800      	cmp	r0, #0
   1a7ca:	d17a      	bne.n	1a8c2 <nrfx_uarte_init+0x10e>
    if (p_config->pseltxd != NRF_UARTE_PSEL_DISCONNECTED)
   1a7cc:	680f      	ldr	r7, [r1, #0]
   1a7ce:	1c7b      	adds	r3, r7, #1
   1a7d0:	d009      	beq.n	1a7e6 <nrfx_uarte_init+0x32>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1a7d2:	2301      	movs	r3, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1a7d4:	f04f 0c03 	mov.w	ip, #3
    p_reg->OUTSET = set_mask;
   1a7d8:	483c      	ldr	r0, [pc, #240]	; (1a8cc <nrfx_uarte_init+0x118>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1a7da:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1a7dc:	6083      	str	r3, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1a7de:	f107 0380 	add.w	r3, r7, #128	; 0x80
   1a7e2:	f840 c023 	str.w	ip, [r0, r3, lsl #2]
    if (p_config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED)
   1a7e6:	f8d1 c004 	ldr.w	ip, [r1, #4]
                    | (uint32_t)p_cfg->hwfc;
   1a7ea:	f891 801b 	ldrb.w	r8, [r1, #27]
   1a7ee:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
   1a7f2:	bf1f      	itttt	ne
   1a7f4:	f04f 0e00 	movne.w	lr, #0
   1a7f8:	4834      	ldrne	r0, [pc, #208]	; (1a8cc <nrfx_uarte_init+0x118>)
   1a7fa:	f10c 0380 	addne.w	r3, ip, #128	; 0x80
   1a7fe:	f840 e023 	strne.w	lr, [r0, r3, lsl #2]
    nrf_uarte_baudrate_set(p_instance->p_reg, p_config->baudrate);
   1a802:	6948      	ldr	r0, [r1, #20]
   1a804:	6833      	ldr	r3, [r6, #0]
   1a806:	f891 e019 	ldrb.w	lr, [r1, #25]
    p_reg->BAUDRATE = baudrate;
   1a80a:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   1a80e:	7e88      	ldrb	r0, [r1, #26]
    if (p_config->hal_cfg.hwfc == NRF_UARTE_HWFC_ENABLED)
   1a810:	f1be 0f01 	cmp.w	lr, #1
   1a814:	ea40 0008 	orr.w	r0, r0, r8
   1a818:	ea4e 0000 	orr.w	r0, lr, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1a81c:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->PSEL.TXD = pseltxd;
   1a820:	f8c3 750c 	str.w	r7, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1a824:	f8c3 c514 	str.w	ip, [r3, #1300]	; 0x514
   1a828:	d120      	bne.n	1a86c <nrfx_uarte_init+0xb8>
        if (p_config->pselcts != NRF_UARTE_PSEL_DISCONNECTED)
   1a82a:	688f      	ldr	r7, [r1, #8]
   1a82c:	1c78      	adds	r0, r7, #1
   1a82e:	bf1f      	itttt	ne
   1a830:	f04f 0e00 	movne.w	lr, #0
   1a834:	f8df c094 	ldrne.w	ip, [pc, #148]	; 1a8cc <nrfx_uarte_init+0x118>
   1a838:	f107 0080 	addne.w	r0, r7, #128	; 0x80
   1a83c:	f84c e020 	strne.w	lr, [ip, r0, lsl #2]
        if (p_config->pselrts != NRF_UARTE_PSEL_DISCONNECTED)
   1a840:	68c8      	ldr	r0, [r1, #12]
   1a842:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1a846:	d00d      	beq.n	1a864 <nrfx_uarte_init+0xb0>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1a848:	f04f 0c01 	mov.w	ip, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1a84c:	f04f 0803 	mov.w	r8, #3
    p_reg->OUTSET = set_mask;
   1a850:	f8df e078 	ldr.w	lr, [pc, #120]	; 1a8cc <nrfx_uarte_init+0x118>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1a854:	fa0c fc00 	lsl.w	ip, ip, r0
    p_reg->OUTSET = set_mask;
   1a858:	f8ce c008 	str.w	ip, [lr, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1a85c:	f100 0c80 	add.w	ip, r0, #128	; 0x80
   1a860:	f84e 802c 	str.w	r8, [lr, ip, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   1a864:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1a868:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    apply_config(p_instance, p_config);

    p_cb->handler   = event_handler;
   1a86c:	2324      	movs	r3, #36	; 0x24
   1a86e:	4363      	muls	r3, r4
    p_cb->p_context = p_config->p_context;
   1a870:	6909      	ldr	r1, [r1, #16]
    p_cb->handler   = event_handler;
   1a872:	18e8      	adds	r0, r5, r3
   1a874:	6042      	str	r2, [r0, #4]
    p_cb->p_context = p_config->p_context;
   1a876:	50e9      	str	r1, [r5, r3]

    if (p_cb->handler)
   1a878:	b192      	cbz	r2, 1a8a0 <nrfx_uarte_init+0xec>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a87a:	2300      	movs	r3, #0
    {
        interrupts_enable(p_instance, p_config->interrupt_priority);
   1a87c:	6830      	ldr	r0, [r6, #0]
   1a87e:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
   1a882:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   1a886:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1a88a:	f8c0 3144 	str.w	r3, [r0, #324]	; 0x144
   1a88e:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
    p_reg->INTENSET = mask;
   1a892:	4b0f      	ldr	r3, [pc, #60]	; (1a8d0 <nrfx_uarte_init+0x11c>)
   1a894:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    NRFX_IRQ_ENABLE(nrfx_get_irq_number((void *)p_instance->p_reg));
   1a898:	f340 3007 	sbfx	r0, r0, #12, #8
   1a89c:	f7f4 fd38 	bl	f310 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1a8a0:	2208      	movs	r2, #8
    }

    nrf_uarte_enable(p_instance->p_reg);
   1a8a2:	6833      	ldr	r3, [r6, #0]
    p_cb->tx_buffer_length           = 0;
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1a8a4:	480b      	ldr	r0, [pc, #44]	; (1a8d4 <nrfx_uarte_init+0x120>)
   1a8a6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->rx_buffer_length           = 0;
   1a8aa:	2324      	movs	r3, #36	; 0x24
   1a8ac:	2200      	movs	r2, #0
   1a8ae:	fb03 5304 	mla	r3, r3, r4, r5
    p_cb->rx_secondary_buffer_length = 0;
   1a8b2:	e9c3 2206 	strd	r2, r2, [r3, #24]
    p_cb->tx_buffer_length           = 0;
   1a8b6:	615a      	str	r2, [r3, #20]
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
   1a8b8:	2201      	movs	r2, #1
   1a8ba:	f883 2020 	strb.w	r2, [r3, #32]
}
   1a8be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
   1a8c2:	4805      	ldr	r0, [pc, #20]	; (1a8d8 <nrfx_uarte_init+0x124>)
   1a8c4:	e7fb      	b.n	1a8be <nrfx_uarte_init+0x10a>
   1a8c6:	bf00      	nop
   1a8c8:	20020b18 	.word	0x20020b18
   1a8cc:	40842500 	.word	0x40842500
   1a8d0:	00420310 	.word	0x00420310
   1a8d4:	0bad0000 	.word	0x0bad0000
   1a8d8:	0bad0005 	.word	0x0bad0005

0001a8dc <nrfx_uarte_tx>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1a8dc:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000

    nrfx_err_t err_code;

    // EasyDMA requires that transfer buffers are placed in DataRAM,
    // signal error if the are not.
    if (!nrfx_is_in_ram(p_data))
   1a8e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
   1a8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!nrfx_is_in_ram(p_data))
   1a8e6:	d12e      	bne.n	1a946 <nrfx_uarte_tx+0x6a>
    return err_code;
}

bool nrfx_uarte_tx_in_progress(nrfx_uarte_t const * p_instance)
{
    return (m_cb[p_instance->drv_inst_idx].tx_buffer_length != 0);
   1a8e8:	2424      	movs	r4, #36	; 0x24
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1a8ea:	7905      	ldrb	r5, [r0, #4]
    return (m_cb[p_instance->drv_inst_idx].tx_buffer_length != 0);
   1a8ec:	4f19      	ldr	r7, [pc, #100]	; (1a954 <nrfx_uarte_tx+0x78>)
   1a8ee:	fb04 7405 	mla	r4, r4, r5, r7
   1a8f2:	6966      	ldr	r6, [r4, #20]
    if (nrfx_uarte_tx_in_progress(p_instance))
   1a8f4:	bb4e      	cbnz	r6, 1a94a <nrfx_uarte_tx+0x6e>
    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_ENDTX);
   1a8f6:	6803      	ldr	r3, [r0, #0]
    p_cb->tx_buffer_length = length;
   1a8f8:	6162      	str	r2, [r4, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a8fa:	f8c3 6120 	str.w	r6, [r3, #288]	; 0x120
   1a8fe:	f8c3 6158 	str.w	r6, [r3, #344]	; 0x158
    nrf_uarte_tx_buffer_set(p_instance->p_reg, p_cb->p_tx_buffer, p_cb->tx_buffer_length);
   1a902:	6962      	ldr	r2, [r4, #20]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a904:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1a908:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a90c:	2201      	movs	r2, #1
    p_cb->p_tx_buffer      = p_data;
   1a90e:	60a1      	str	r1, [r4, #8]
   1a910:	609a      	str	r2, [r3, #8]
    if (p_cb->handler == NULL)
   1a912:	6862      	ldr	r2, [r4, #4]
   1a914:	b9da      	cbnz	r2, 1a94e <nrfx_uarte_tx+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a916:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1a91a:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
        while ((!endtx) && (!txstopped));
   1a91e:	b919      	cbnz	r1, 1a928 <nrfx_uarte_tx+0x4c>
   1a920:	2a00      	cmp	r2, #0
   1a922:	d0f8      	beq.n	1a916 <nrfx_uarte_tx+0x3a>
            err_code = NRFX_ERROR_FORBIDDEN;
   1a924:	480c      	ldr	r0, [pc, #48]	; (1a958 <nrfx_uarte_tx+0x7c>)
   1a926:	e008      	b.n	1a93a <nrfx_uarte_tx+0x5e>
        if (txstopped)
   1a928:	2a00      	cmp	r2, #0
   1a92a:	d1fb      	bne.n	1a924 <nrfx_uarte_tx+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a92c:	2201      	movs	r2, #1
   1a92e:	60da      	str	r2, [r3, #12]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a930:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
            while (!nrf_uarte_event_check(p_instance->p_reg, NRF_UARTE_EVENT_TXSTOPPED))
   1a934:	2a00      	cmp	r2, #0
   1a936:	d0fb      	beq.n	1a930 <nrfx_uarte_tx+0x54>
    err_code = NRFX_SUCCESS;
   1a938:	4808      	ldr	r0, [pc, #32]	; (1a95c <nrfx_uarte_tx+0x80>)
        p_cb->tx_buffer_length = 0;
   1a93a:	2324      	movs	r3, #36	; 0x24
   1a93c:	fb03 7505 	mla	r5, r3, r5, r7
   1a940:	2300      	movs	r3, #0
   1a942:	616b      	str	r3, [r5, #20]
}
   1a944:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return err_code;
   1a946:	4806      	ldr	r0, [pc, #24]	; (1a960 <nrfx_uarte_tx+0x84>)
   1a948:	e7fc      	b.n	1a944 <nrfx_uarte_tx+0x68>
        return err_code;
   1a94a:	4806      	ldr	r0, [pc, #24]	; (1a964 <nrfx_uarte_tx+0x88>)
   1a94c:	e7fa      	b.n	1a944 <nrfx_uarte_tx+0x68>
    err_code = NRFX_SUCCESS;
   1a94e:	4803      	ldr	r0, [pc, #12]	; (1a95c <nrfx_uarte_tx+0x80>)
   1a950:	e7f8      	b.n	1a944 <nrfx_uarte_tx+0x68>
   1a952:	bf00      	nop
   1a954:	20020b18 	.word	0x20020b18
   1a958:	0bad0008 	.word	0x0bad0008
   1a95c:	0bad0000 	.word	0x0bad0000
   1a960:	0bad000a 	.word	0x0bad000a
   1a964:	0bad000b 	.word	0x0bad000b

0001a968 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   1a968:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   1a96a:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   1a96c:	4b08      	ldr	r3, [pc, #32]	; (1a990 <z_sys_device_do_config_level+0x28>)
   1a96e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1a972:	3001      	adds	r0, #1
   1a974:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1a978:	42a5      	cmp	r5, r4
   1a97a:	d800      	bhi.n	1a97e <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   1a97c:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   1a97e:	6823      	ldr	r3, [r4, #0]
   1a980:	4620      	mov	r0, r4
   1a982:	685b      	ldr	r3, [r3, #4]
   1a984:	4798      	blx	r3
		if (retval != 0) {
   1a986:	b100      	cbz	r0, 1a98a <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   1a988:	6066      	str	r6, [r4, #4]
								info++) {
   1a98a:	340c      	adds	r4, #12
   1a98c:	e7f4      	b.n	1a978 <z_sys_device_do_config_level+0x10>
   1a98e:	bf00      	nop
   1a990:	0001f364 	.word	0x0001f364

0001a994 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   1a994:	4b10      	ldr	r3, [pc, #64]	; (1a9d8 <z_impl_device_get_binding+0x44>)
{
   1a996:	b570      	push	{r4, r5, r6, lr}
   1a998:	4605      	mov	r5, r0
   1a99a:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   1a99c:	4c0f      	ldr	r4, [pc, #60]	; (1a9dc <z_impl_device_get_binding+0x48>)
   1a99e:	429c      	cmp	r4, r3
   1a9a0:	d104      	bne.n	1a9ac <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   1a9a2:	4c0e      	ldr	r4, [pc, #56]	; (1a9dc <z_impl_device_get_binding+0x48>)
   1a9a4:	42b4      	cmp	r4, r6
   1a9a6:	d109      	bne.n	1a9bc <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   1a9a8:	2400      	movs	r4, #0
   1a9aa:	e012      	b.n	1a9d2 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   1a9ac:	6862      	ldr	r2, [r4, #4]
   1a9ae:	b11a      	cbz	r2, 1a9b8 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   1a9b0:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   1a9b2:	6812      	ldr	r2, [r2, #0]
   1a9b4:	42aa      	cmp	r2, r5
   1a9b6:	d00c      	beq.n	1a9d2 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1a9b8:	340c      	adds	r4, #12
   1a9ba:	e7f0      	b.n	1a99e <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   1a9bc:	6863      	ldr	r3, [r4, #4]
   1a9be:	b90b      	cbnz	r3, 1a9c4 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1a9c0:	340c      	adds	r4, #12
   1a9c2:	e7ef      	b.n	1a9a4 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   1a9c4:	6823      	ldr	r3, [r4, #0]
   1a9c6:	4628      	mov	r0, r5
   1a9c8:	6819      	ldr	r1, [r3, #0]
   1a9ca:	f002 fb3a 	bl	1d042 <strcmp>
   1a9ce:	2800      	cmp	r0, #0
   1a9d0:	d1f6      	bne.n	1a9c0 <z_impl_device_get_binding+0x2c>
}
   1a9d2:	4620      	mov	r0, r4
   1a9d4:	bd70      	pop	{r4, r5, r6, pc}
   1a9d6:	bf00      	nop
   1a9d8:	2002c538 	.word	0x2002c538
   1a9dc:	2002c454 	.word	0x2002c454

0001a9e0 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1a9e0:	4b01      	ldr	r3, [pc, #4]	; (1a9e8 <z_impl_z_errno+0x8>)
   1a9e2:	6898      	ldr	r0, [r3, #8]
}
   1a9e4:	3054      	adds	r0, #84	; 0x54
   1a9e6:	4770      	bx	lr
   1a9e8:	20024d00 	.word	0x20024d00

0001a9ec <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1a9ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a9f0:	4605      	mov	r5, r0
   1a9f2:	4688      	mov	r8, r1
	return z_impl_k_current_get();
   1a9f4:	f000 fe9a 	bl	1b72c <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1a9f8:	2201      	movs	r2, #1
   1a9fa:	f04f 0300 	mov.w	r3, #0
   1a9fe:	4c26      	ldr	r4, [pc, #152]	; (1aa98 <z_fatal_error+0xac>)
   1aa00:	f362 0307 	bfi	r3, r2, #0, #8
   1aa04:	4a25      	ldr	r2, [pc, #148]	; (1aa9c <z_fatal_error+0xb0>)
   1aa06:	2d04      	cmp	r5, #4
   1aa08:	eba4 0402 	sub.w	r4, r4, r2
   1aa0c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   1aa10:	bf98      	it	ls
   1aa12:	4a23      	ldrls	r2, [pc, #140]	; (1aaa0 <z_fatal_error+0xb4>)
   1aa14:	f364 138f 	bfi	r3, r4, #6, #10
   1aa18:	f8ad 3000 	strh.w	r3, [sp]
   1aa1c:	4606      	mov	r6, r0
   1aa1e:	f04f 0300 	mov.w	r3, #0
   1aa22:	bf94      	ite	ls
   1aa24:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
   1aa28:	4a1e      	ldrhi	r2, [pc, #120]	; (1aaa4 <z_fatal_error+0xb8>)
   1aa2a:	4629      	mov	r1, r5
   1aa2c:	481e      	ldr	r0, [pc, #120]	; (1aaa8 <z_fatal_error+0xbc>)
   1aa2e:	f001 fdff 	bl	1c630 <log_3>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1aa32:	f8d8 301c 	ldr.w	r3, [r8, #28]
   1aa36:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
   1aa3a:	b14b      	cbz	r3, 1aa50 <z_fatal_error+0x64>
		LOG_ERR("Fault during interrupt handling\n");
   1aa3c:	f04f 0100 	mov.w	r1, #0
   1aa40:	2301      	movs	r3, #1
   1aa42:	f363 0107 	bfi	r1, r3, #0, #8
   1aa46:	f364 118f 	bfi	r1, r4, #6, #10
   1aa4a:	4818      	ldr	r0, [pc, #96]	; (1aaac <z_fatal_error+0xc0>)
   1aa4c:	f001 fdb7 	bl	1c5be <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1aa50:	f04f 0700 	mov.w	r7, #0
   1aa54:	2301      	movs	r3, #1
	const char *thread_name = k_thread_name_get(thread);
   1aa56:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
   1aa58:	f363 0707 	bfi	r7, r3, #0, #8
   1aa5c:	f364 178f 	bfi	r7, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   1aa60:	f003 fe6d 	bl	1e73e <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1aa64:	b1b0      	cbz	r0, 1aa94 <z_fatal_error+0xa8>
   1aa66:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   1aa68:	4b11      	ldr	r3, [pc, #68]	; (1aab0 <z_fatal_error+0xc4>)
   1aa6a:	2a00      	cmp	r2, #0
   1aa6c:	bf08      	it	eq
   1aa6e:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   1aa70:	f7f3 ff92 	bl	e998 <log_strdup>
   1aa74:	463b      	mov	r3, r7
   1aa76:	4602      	mov	r2, r0
   1aa78:	4631      	mov	r1, r6
   1aa7a:	480e      	ldr	r0, [pc, #56]	; (1aab4 <z_fatal_error+0xc8>)
   1aa7c:	f001 fdc0 	bl	1c600 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   1aa80:	4641      	mov	r1, r8
   1aa82:	4628      	mov	r0, r5
   1aa84:	f7f7 fbce 	bl	12224 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
   1aa88:	4630      	mov	r0, r6
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
   1aa8a:	b002      	add	sp, #8
   1aa8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1aa90:	f7f5 b89e 	b.w	fbd0 <z_impl_k_thread_abort>
		thread_name = "unknown";
   1aa94:	4806      	ldr	r0, [pc, #24]	; (1aab0 <z_fatal_error+0xc4>)
   1aa96:	e7eb      	b.n	1aa70 <z_fatal_error+0x84>
   1aa98:	0001ee24 	.word	0x0001ee24
   1aa9c:	0001edc4 	.word	0x0001edc4
   1aaa0:	0001f37c 	.word	0x0001f37c
   1aaa4:	000207be 	.word	0x000207be
   1aaa8:	000207d4 	.word	0x000207d4
   1aaac:	000207fc 	.word	0x000207fc
   1aab0:	000207cc 	.word	0x000207cc
   1aab4:	0002081d 	.word	0x0002081d

0001aab8 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1aab8:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1aaba:	4d0b      	ldr	r5, [pc, #44]	; (1aae8 <idle+0x30>)
	__asm__ volatile(
   1aabc:	f04f 0220 	mov.w	r2, #32
   1aac0:	f3ef 8311 	mrs	r3, BASEPRI
   1aac4:	f382 8811 	msr	BASEPRI, r2
   1aac8:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   1aacc:	f003 fe8f 	bl	1e7ee <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1aad0:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   1aad2:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1aad4:	2802      	cmp	r0, #2
   1aad6:	bfd8      	it	le
   1aad8:	4608      	movle	r0, r1
   1aada:	f003 fe98 	bl	1e80e <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1aade:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1aae0:	f7f4 fca0 	bl	f424 <arch_cpu_idle>
   1aae4:	e7ea      	b.n	1aabc <idle+0x4>
   1aae6:	bf00      	nop
   1aae8:	20024d00 	.word	0x20024d00

0001aaec <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1aaec:	4802      	ldr	r0, [pc, #8]	; (1aaf8 <z_bss_zero+0xc>)
   1aaee:	4a03      	ldr	r2, [pc, #12]	; (1aafc <z_bss_zero+0x10>)
   1aaf0:	2100      	movs	r1, #0
   1aaf2:	1a12      	subs	r2, r2, r0
   1aaf4:	f002 bb03 	b.w	1d0fe <memset>
   1aaf8:	20020000 	.word	0x20020000
   1aafc:	2002659c 	.word	0x2002659c

0001ab00 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1ab00:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1ab02:	4806      	ldr	r0, [pc, #24]	; (1ab1c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1ab04:	4a06      	ldr	r2, [pc, #24]	; (1ab20 <z_data_copy+0x20>)
   1ab06:	4907      	ldr	r1, [pc, #28]	; (1ab24 <z_data_copy+0x24>)
   1ab08:	1a12      	subs	r2, r2, r0
   1ab0a:	f002 face 	bl	1d0aa <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1ab0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1ab12:	4a05      	ldr	r2, [pc, #20]	; (1ab28 <z_data_copy+0x28>)
   1ab14:	4905      	ldr	r1, [pc, #20]	; (1ab2c <z_data_copy+0x2c>)
   1ab16:	4806      	ldr	r0, [pc, #24]	; (1ab30 <z_data_copy+0x30>)
   1ab18:	f002 bac7 	b.w	1d0aa <memcpy>
   1ab1c:	2002c3f4 	.word	0x2002c3f4
   1ab20:	2002c63c 	.word	0x2002c63c
   1ab24:	00020884 	.word	0x00020884
   1ab28:	00000000 	.word	0x00000000
   1ab2c:	00020884 	.word	0x00020884
   1ab30:	20020000 	.word	0x20020000

0001ab34 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1ab34:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1ab36:	2002      	movs	r0, #2
   1ab38:	f7ff ff16 	bl	1a968 <z_sys_device_do_config_level>
#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
			STRINGIFY(BUILD_VERSION), BOOT_DELAY_BANNER);
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
   1ab3c:	4a08      	ldr	r2, [pc, #32]	; (1ab60 <bg_thread_main+0x2c>)
   1ab3e:	4909      	ldr	r1, [pc, #36]	; (1ab64 <bg_thread_main+0x30>)
   1ab40:	4809      	ldr	r0, [pc, #36]	; (1ab68 <bg_thread_main+0x34>)
   1ab42:	f001 fd09 	bl	1c558 <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   1ab46:	2003      	movs	r0, #3
   1ab48:	f7ff ff0e 	bl	1a968 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   1ab4c:	f000 ff38 	bl	1b9c0 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1ab50:	f001 f974 	bl	1be3c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1ab54:	4a05      	ldr	r2, [pc, #20]	; (1ab6c <bg_thread_main+0x38>)
   1ab56:	7b13      	ldrb	r3, [r2, #12]
   1ab58:	f023 0301 	bic.w	r3, r3, #1
   1ab5c:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1ab5e:	bd08      	pop	{r3, pc}
   1ab60:	0001f795 	.word	0x0001f795
   1ab64:	00020835 	.word	0x00020835
   1ab68:	0002083b 	.word	0x0002083b
   1ab6c:	20020bec 	.word	0x20020bec

0001ab70 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1ab70:	b580      	push	{r7, lr}
   1ab72:	b0b2      	sub	sp, #200	; 0xc8
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1ab74:	f7f3 fd84 	bl	e680 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   1ab78:	4b33      	ldr	r3, [pc, #204]	; (1ac48 <z_cstart+0xd8>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1ab7a:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ab7e:	2400      	movs	r4, #0
   1ab80:	23e0      	movs	r3, #224	; 0xe0
   1ab82:	4d32      	ldr	r5, [pc, #200]	; (1ac4c <z_cstart+0xdc>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   1ab84:	2701      	movs	r7, #1
   1ab86:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1ab8a:	77ec      	strb	r4, [r5, #31]
   1ab8c:	762c      	strb	r4, [r5, #24]
   1ab8e:	766c      	strb	r4, [r5, #25]
   1ab90:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1ab92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   1ab94:	4e2e      	ldr	r6, [pc, #184]	; (1ac50 <z_cstart+0xe0>)
   1ab96:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1ab9a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1ab9c:	f7f4 fff2 	bl	fb84 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1aba0:	f7f4 fc3a 	bl	f418 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1aba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1aba8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1abaa:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   1abac:	ab06      	add	r3, sp, #24
   1abae:	22b0      	movs	r2, #176	; 0xb0
   1abb0:	4621      	mov	r1, r4
   1abb2:	4618      	mov	r0, r3
   1abb4:	f002 faa3 	bl	1d0fe <memset>
	_current = &dummy_thread;
   1abb8:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1abba:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   1abbc:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1abc0:	f7ff fed2 	bl	1a968 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1abc4:	4638      	mov	r0, r7
   1abc6:	f7ff fecf 	bl	1a968 <z_sys_device_do_config_level>
	_kernel.ready_q.cache = &z_main_thread;
   1abca:	4d22      	ldr	r5, [pc, #136]	; (1ac54 <z_cstart+0xe4>)
	z_sched_init();
   1abcc:	f000 fd2e 	bl	1b62c <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1abd0:	4b21      	ldr	r3, [pc, #132]	; (1ac58 <z_cstart+0xe8>)
   1abd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1abd6:	e9cd 7304 	strd	r7, r3, [sp, #16]
   1abda:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1abde:	4b1f      	ldr	r3, [pc, #124]	; (1ac5c <z_cstart+0xec>)
   1abe0:	e9cd 4400 	strd	r4, r4, [sp]
   1abe4:	491e      	ldr	r1, [pc, #120]	; (1ac60 <z_cstart+0xf0>)
   1abe6:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   1abe8:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1abea:	f000 fe49 	bl	1b880 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1abee:	7b6b      	ldrb	r3, [r5, #13]
   1abf0:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1abf4:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1abf8:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1abfa:	d104      	bne.n	1ac06 <z_cstart+0x96>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   1abfc:	69ab      	ldr	r3, [r5, #24]
   1abfe:	b913      	cbnz	r3, 1ac06 <z_cstart+0x96>
		z_add_thread_to_ready_q(thread);
   1ac00:	4628      	mov	r0, r5
   1ac02:	f000 fb53 	bl	1b2ac <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
   1ac06:	4b17      	ldr	r3, [pc, #92]	; (1ac64 <z_cstart+0xf4>)
   1ac08:	2201      	movs	r2, #1
   1ac0a:	9305      	str	r3, [sp, #20]
   1ac0c:	230f      	movs	r3, #15
   1ac0e:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1ac12:	2300      	movs	r3, #0
   1ac14:	4d14      	ldr	r5, [pc, #80]	; (1ac68 <z_cstart+0xf8>)
   1ac16:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1ac1a:	9300      	str	r3, [sp, #0]
   1ac1c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1ac20:	4b12      	ldr	r3, [pc, #72]	; (1ac6c <z_cstart+0xfc>)
   1ac22:	4913      	ldr	r1, [pc, #76]	; (1ac70 <z_cstart+0x100>)
   1ac24:	4628      	mov	r0, r5
   1ac26:	f000 fe2b 	bl	1b880 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1ac2a:	7b6b      	ldrb	r3, [r5, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1ac2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1ac30:	f023 0304 	bic.w	r3, r3, #4
   1ac34:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1ac36:	4b0f      	ldr	r3, [pc, #60]	; (1ac74 <z_cstart+0x104>)
   1ac38:	4909      	ldr	r1, [pc, #36]	; (1ac60 <z_cstart+0xf0>)
	list->tail = (sys_dnode_t *)list;
   1ac3a:	e9c6 3306 	strd	r3, r3, [r6, #24]
   1ac3e:	4805      	ldr	r0, [pc, #20]	; (1ac54 <z_cstart+0xe4>)
   1ac40:	4b06      	ldr	r3, [pc, #24]	; (1ac5c <z_cstart+0xec>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   1ac42:	60f5      	str	r5, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1ac44:	f7f4 fbbe 	bl	f3c4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1ac48:	200289e0 	.word	0x200289e0
   1ac4c:	e000ed00 	.word	0xe000ed00
   1ac50:	20024d00 	.word	0x20024d00
   1ac54:	20020bec 	.word	0x20020bec
   1ac58:	00020867 	.word	0x00020867
   1ac5c:	0001ab35 	.word	0x0001ab35
   1ac60:	200270a0 	.word	0x200270a0
   1ac64:	0002086c 	.word	0x0002086c
   1ac68:	20020b3c 	.word	0x20020b3c
   1ac6c:	0001aab9 	.word	0x0001aab9
   1ac70:	200280a0 	.word	0x200280a0
   1ac74:	20024d18 	.word	0x20024d18

0001ac78 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   1ac78:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
   1ac7a:	2400      	movs	r4, #0
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1ac7c:	4b0a      	ldr	r3, [pc, #40]	; (1aca8 <init_mem_slab_module+0x30>)
   1ac7e:	480b      	ldr	r0, [pc, #44]	; (1acac <init_mem_slab_module+0x34>)
   1ac80:	4283      	cmp	r3, r0
   1ac82:	d301      	bcc.n	1ac88 <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
   1ac84:	2000      	movs	r0, #0
   1ac86:	bd70      	pop	{r4, r5, r6, pc}
	for (j = 0U; j < slab->num_blocks; j++) {
   1ac88:	2100      	movs	r1, #0
	p = slab->buffer;
   1ac8a:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   1ac8c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1ac8e:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1ac90:	42a9      	cmp	r1, r5
   1ac92:	d101      	bne.n	1ac98 <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1ac94:	331c      	adds	r3, #28
   1ac96:	e7f3      	b.n	1ac80 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   1ac98:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1ac9a:	3101      	adds	r1, #1
		*(char **)p = slab->free_list;
   1ac9c:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
   1ac9e:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
   1aca0:	615a      	str	r2, [r3, #20]
		p += slab->block_size;
   1aca2:	4432      	add	r2, r6
   1aca4:	e7f4      	b.n	1ac90 <init_mem_slab_module+0x18>
   1aca6:	bf00      	nop
   1aca8:	2002c538 	.word	0x2002c538
   1acac:	2002c554 	.word	0x2002c554

0001acb0 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   1acb0:	b510      	push	{r4, lr}
   1acb2:	4613      	mov	r3, r2
   1acb4:	460c      	mov	r4, r1
   1acb6:	f04f 0220 	mov.w	r2, #32
   1acba:	f3ef 8111 	mrs	r1, BASEPRI
   1acbe:	f382 8811 	msr	BASEPRI, r2
   1acc2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1acc6:	6942      	ldr	r2, [r0, #20]
   1acc8:	b15a      	cbz	r2, 1ace2 <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
   1acca:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1accc:	6813      	ldr	r3, [r2, #0]
   1acce:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1acd0:	6983      	ldr	r3, [r0, #24]
   1acd2:	3301      	adds	r3, #1
   1acd4:	6183      	str	r3, [r0, #24]
		result = 0;
   1acd6:	2000      	movs	r0, #0
	__asm__ volatile(
   1acd8:	f381 8811 	msr	BASEPRI, r1
   1acdc:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1ace0:	e00d      	b.n	1acfe <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
   1ace2:	b91b      	cbnz	r3, 1acec <k_mem_slab_alloc+0x3c>
		*mem = NULL;
   1ace4:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1ace6:	f06f 000b 	mvn.w	r0, #11
   1acea:	e7f5      	b.n	1acd8 <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1acec:	4602      	mov	r2, r0
   1acee:	4804      	ldr	r0, [pc, #16]	; (1ad00 <k_mem_slab_alloc+0x50>)
   1acf0:	f000 fc18 	bl	1b524 <z_pend_curr>
		if (result == 0) {
   1acf4:	b918      	cbnz	r0, 1acfe <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
   1acf6:	4b03      	ldr	r3, [pc, #12]	; (1ad04 <k_mem_slab_alloc+0x54>)
   1acf8:	689b      	ldr	r3, [r3, #8]
   1acfa:	695b      	ldr	r3, [r3, #20]
   1acfc:	6023      	str	r3, [r4, #0]
}
   1acfe:	bd10      	pop	{r4, pc}
   1ad00:	2002647c 	.word	0x2002647c
   1ad04:	20024d00 	.word	0x20024d00

0001ad08 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1ad08:	b570      	push	{r4, r5, r6, lr}
   1ad0a:	4604      	mov	r4, r0
   1ad0c:	460d      	mov	r5, r1
	__asm__ volatile(
   1ad0e:	f04f 0320 	mov.w	r3, #32
   1ad12:	f3ef 8611 	mrs	r6, BASEPRI
   1ad16:	f383 8811 	msr	BASEPRI, r3
   1ad1a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1ad1e:	f003 fcb6 	bl	1e68e <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1ad22:	b180      	cbz	r0, 1ad46 <k_mem_slab_free+0x3e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1ad24:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1ad26:	682a      	ldr	r2, [r5, #0]
   1ad28:	6681      	str	r1, [r0, #104]	; 0x68
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1ad2a:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1ad2c:	7b42      	ldrb	r2, [r0, #13]
   1ad2e:	06d2      	lsls	r2, r2, #27
   1ad30:	d103      	bne.n	1ad3a <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
   1ad32:	6983      	ldr	r3, [r0, #24]
   1ad34:	b90b      	cbnz	r3, 1ad3a <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
   1ad36:	f000 fab9 	bl	1b2ac <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   1ad3a:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1ad3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1ad40:	4807      	ldr	r0, [pc, #28]	; (1ad60 <k_mem_slab_free+0x58>)
   1ad42:	f003 bc2e 	b.w	1e5a2 <z_reschedule>
		**(char ***)mem = slab->free_list;
   1ad46:	682b      	ldr	r3, [r5, #0]
   1ad48:	6962      	ldr	r2, [r4, #20]
   1ad4a:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1ad4c:	682b      	ldr	r3, [r5, #0]
   1ad4e:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1ad50:	69a3      	ldr	r3, [r4, #24]
   1ad52:	3b01      	subs	r3, #1
   1ad54:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1ad56:	f386 8811 	msr	BASEPRI, r6
   1ad5a:	f3bf 8f6f 	isb	sy
}
   1ad5e:	bd70      	pop	{r4, r5, r6, pc}
   1ad60:	2002647c 	.word	0x2002647c

0001ad64 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   1ad64:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   1ad66:	4c07      	ldr	r4, [pc, #28]	; (1ad84 <init_static_pools+0x20>)
   1ad68:	4d07      	ldr	r5, [pc, #28]	; (1ad88 <init_static_pools+0x24>)
   1ad6a:	42ac      	cmp	r4, r5
   1ad6c:	d301      	bcc.n	1ad72 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   1ad6e:	2000      	movs	r0, #0
   1ad70:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1ad72:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   1ad76:	4620      	mov	r0, r4
   1ad78:	e9c4 3305 	strd	r3, r3, [r4, #20]
   1ad7c:	f001 f8b5 	bl	1beea <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   1ad80:	341c      	adds	r4, #28
   1ad82:	e7f2      	b.n	1ad6a <init_static_pools+0x6>
   1ad84:	2002c554 	.word	0x2002c554
   1ad88:	2002c570 	.word	0x2002c570

0001ad8c <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   1ad8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   1ad90:	1e1c      	subs	r4, r3, #0
{
   1ad92:	b085      	sub	sp, #20
   1ad94:	4607      	mov	r7, r0
   1ad96:	460d      	mov	r5, r1
   1ad98:	4692      	mov	sl, r2
	if (timeout > 0) {
   1ad9a:	dd3b      	ble.n	1ae14 <k_mem_pool_alloc+0x88>
	return z_impl_k_uptime_get();
   1ad9c:	f003 fd55 	bl	1e84a <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   1ada0:	eb10 0804 	adds.w	r8, r0, r4
	return pool - &_k_mem_pool_list_start[0];
   1ada4:	4b1d      	ldr	r3, [pc, #116]	; (1ae1c <k_mem_pool_alloc+0x90>)
   1ada6:	4e1e      	ldr	r6, [pc, #120]	; (1ae20 <k_mem_pool_alloc+0x94>)
   1ada8:	1afb      	subs	r3, r7, r3
   1adaa:	109b      	asrs	r3, r3, #2
   1adac:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   1adae:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   1adb2:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   1adb4:	ab03      	add	r3, sp, #12
   1adb6:	aa02      	add	r2, sp, #8
   1adb8:	9500      	str	r5, [sp, #0]
   1adba:	4651      	mov	r1, sl
   1adbc:	4638      	mov	r0, r7
   1adbe:	f001 f8da 	bl	1bf76 <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   1adc2:	796b      	ldrb	r3, [r5, #5]
   1adc4:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   1adc6:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   1adc8:	f362 0303 	bfi	r3, r2, #0, #4
   1adcc:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   1adce:	686b      	ldr	r3, [r5, #4]
   1add0:	9a03      	ldr	r2, [sp, #12]
   1add2:	f362 331f 	bfi	r3, r2, #12, #20
   1add6:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   1add8:	b1c8      	cbz	r0, 1ae0e <k_mem_pool_alloc+0x82>
   1adda:	b1c4      	cbz	r4, 1ae0e <k_mem_pool_alloc+0x82>
   1addc:	f110 0f0c 	cmn.w	r0, #12
   1ade0:	d115      	bne.n	1ae0e <k_mem_pool_alloc+0x82>
	__asm__ volatile(
   1ade2:	f04f 0320 	mov.w	r3, #32
   1ade6:	f3ef 8011 	mrs	r0, BASEPRI
   1adea:	f383 8811 	msr	BASEPRI, r3
   1adee:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
   1adf2:	4622      	mov	r2, r4
   1adf4:	4659      	mov	r1, fp
   1adf6:	f000 fb71 	bl	1b4dc <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   1adfa:	1c63      	adds	r3, r4, #1
   1adfc:	d0da      	beq.n	1adb4 <k_mem_pool_alloc+0x28>
   1adfe:	f003 fd24 	bl	1e84a <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   1ae02:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   1ae06:	2c00      	cmp	r4, #0
   1ae08:	dcd4      	bgt.n	1adb4 <k_mem_pool_alloc+0x28>
				break;
			}
		}
	}

	return -EAGAIN;
   1ae0a:	f06f 000a 	mvn.w	r0, #10
}
   1ae0e:	b005      	add	sp, #20
   1ae10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   1ae14:	f04f 0800 	mov.w	r8, #0
   1ae18:	e7c4      	b.n	1ada4 <k_mem_pool_alloc+0x18>
   1ae1a:	bf00      	nop
   1ae1c:	2002c554 	.word	0x2002c554
   1ae20:	b6db6db7 	.word	0xb6db6db7

0001ae24 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   1ae24:	b570      	push	{r4, r5, r6, lr}
   1ae26:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   1ae28:	6802      	ldr	r2, [r0, #0]
   1ae2a:	7841      	ldrb	r1, [r0, #1]
   1ae2c:	4e11      	ldr	r6, [pc, #68]	; (1ae74 <k_mem_pool_free_id+0x50>)
   1ae2e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1ae32:	00a4      	lsls	r4, r4, #2
   1ae34:	0b12      	lsrs	r2, r2, #12
   1ae36:	f001 010f 	and.w	r1, r1, #15
   1ae3a:	1930      	adds	r0, r6, r4
   1ae3c:	f001 f94d 	bl	1c0da <z_sys_mem_pool_block_free>
   1ae40:	f04f 0320 	mov.w	r3, #32
   1ae44:	f3ef 8511 	mrs	r5, BASEPRI
   1ae48:	f383 8811 	msr	BASEPRI, r3
   1ae4c:	f3bf 8f6f 	isb	sy
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   1ae50:	f104 0014 	add.w	r0, r4, #20
   1ae54:	4430      	add	r0, r6
   1ae56:	f003 fc47 	bl	1e6e8 <z_unpend_all>

	if (need_sched != 0) {
   1ae5a:	b128      	cbz	r0, 1ae68 <k_mem_pool_free_id+0x44>
		z_reschedule(&lock, key);
   1ae5c:	4629      	mov	r1, r5
	} else {
		k_spin_unlock(&lock, key);
	}
}
   1ae5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1ae62:	4805      	ldr	r0, [pc, #20]	; (1ae78 <k_mem_pool_free_id+0x54>)
   1ae64:	f003 bb9d 	b.w	1e5a2 <z_reschedule>
	__asm__ volatile(
   1ae68:	f385 8811 	msr	BASEPRI, r5
   1ae6c:	f3bf 8f6f 	isb	sy
}
   1ae70:	bd70      	pop	{r4, r5, r6, pc}
   1ae72:	bf00      	nop
   1ae74:	2002c554 	.word	0x2002c554
   1ae78:	2002647c 	.word	0x2002647c

0001ae7c <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   1ae7c:	4601      	mov	r1, r0
   1ae7e:	4801      	ldr	r0, [pc, #4]	; (1ae84 <k_malloc+0x8>)
   1ae80:	f003 ba51 	b.w	1e326 <k_mem_pool_malloc>
   1ae84:	2002c554 	.word	0x2002c554

0001ae88 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   1ae88:	4b03      	ldr	r3, [pc, #12]	; (1ae98 <z_thread_malloc+0x10>)
{
   1ae8a:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   1ae8c:	689b      	ldr	r3, [r3, #8]
   1ae8e:	6e18      	ldr	r0, [r3, #96]	; 0x60
   1ae90:	b108      	cbz	r0, 1ae96 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   1ae92:	f003 ba48 	b.w	1e326 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   1ae96:	4770      	bx	lr
   1ae98:	20024d00 	.word	0x20024d00

0001ae9c <z_impl_k_msgq_put>:
	}
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
   1ae9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aea0:	4613      	mov	r3, r2
   1aea2:	4604      	mov	r4, r0
   1aea4:	460f      	mov	r7, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   1aea6:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   1aeaa:	f04f 0220 	mov.w	r2, #32
   1aeae:	f3ef 8611 	mrs	r6, BASEPRI
   1aeb2:	f382 8811 	msr	BASEPRI, r2
   1aeb6:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   1aeba:	6a01      	ldr	r1, [r0, #32]
   1aebc:	68c2      	ldr	r2, [r0, #12]
   1aebe:	4291      	cmp	r1, r2
   1aec0:	d22e      	bcs.n	1af20 <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1aec2:	f003 fbe4 	bl	1e68e <z_unpend_first_thread>
		if (pending_thread != NULL) {
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   1aec6:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   1aec8:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   1aeca:	4639      	mov	r1, r7
		if (pending_thread != NULL) {
   1aecc:	b198      	cbz	r0, 1aef6 <z_impl_k_msgq_put+0x5a>
			(void)memcpy(pending_thread->base.swap_data, data,
   1aece:	6940      	ldr	r0, [r0, #20]
   1aed0:	f002 f8eb 	bl	1d0aa <memcpy>
   1aed4:	2300      	movs	r3, #0
   1aed6:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1aed8:	7b6b      	ldrb	r3, [r5, #13]
   1aeda:	06db      	lsls	r3, r3, #27
   1aedc:	d104      	bne.n	1aee8 <z_impl_k_msgq_put+0x4c>
	if (z_is_thread_ready(thread)) {
   1aede:	69ab      	ldr	r3, [r5, #24]
   1aee0:	b913      	cbnz	r3, 1aee8 <z_impl_k_msgq_put+0x4c>
		z_add_thread_to_ready_q(thread);
   1aee2:	4628      	mov	r0, r5
   1aee4:	f000 f9e2 	bl	1b2ac <z_add_thread_to_ready_q>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   1aee8:	4640      	mov	r0, r8
   1aeea:	4631      	mov	r1, r6
   1aeec:	f003 fb59 	bl	1e5a2 <z_reschedule>
			return 0;
   1aef0:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1aef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   1aef6:	69e0      	ldr	r0, [r4, #28]
   1aef8:	f002 f8d7 	bl	1d0aa <memcpy>
		result = 0;
   1aefc:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
   1aefe:	69e3      	ldr	r3, [r4, #28]
   1af00:	68a2      	ldr	r2, [r4, #8]
   1af02:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1af04:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1af06:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1af08:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1af0a:	bf04      	itt	eq
   1af0c:	6923      	ldreq	r3, [r4, #16]
   1af0e:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   1af10:	6a23      	ldr	r3, [r4, #32]
   1af12:	3301      	adds	r3, #1
   1af14:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
   1af16:	f386 8811 	msr	BASEPRI, r6
   1af1a:	f3bf 8f6f 	isb	sy
	return result;
   1af1e:	e7e8      	b.n	1aef2 <z_impl_k_msgq_put+0x56>
	} else if (timeout == K_NO_WAIT) {
   1af20:	b14b      	cbz	r3, 1af36 <z_impl_k_msgq_put+0x9a>
		_current->base.swap_data = data;
   1af22:	4a06      	ldr	r2, [pc, #24]	; (1af3c <z_impl_k_msgq_put+0xa0>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1af24:	4631      	mov	r1, r6
		_current->base.swap_data = data;
   1af26:	6892      	ldr	r2, [r2, #8]
   1af28:	6157      	str	r7, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1af2a:	4602      	mov	r2, r0
   1af2c:	4640      	mov	r0, r8
}
   1af2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1af32:	f000 baf7 	b.w	1b524 <z_pend_curr>
		result = -ENOMSG;
   1af36:	f06f 004f 	mvn.w	r0, #79	; 0x4f
   1af3a:	e7ec      	b.n	1af16 <z_impl_k_msgq_put+0x7a>
   1af3c:	20024d00 	.word	0x20024d00

0001af40 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
   1af40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af44:	4604      	mov	r4, r0
   1af46:	4613      	mov	r3, r2
   1af48:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   1af4a:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
   1af4e:	f04f 0220 	mov.w	r2, #32
   1af52:	f3ef 8611 	mrs	r6, BASEPRI
   1af56:	f382 8811 	msr	BASEPRI, r2
   1af5a:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   1af5e:	6a22      	ldr	r2, [r4, #32]
   1af60:	2a00      	cmp	r2, #0
   1af62:	d037      	beq.n	1afd4 <z_impl_k_msgq_get+0x94>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   1af64:	68a2      	ldr	r2, [r4, #8]
   1af66:	69a1      	ldr	r1, [r4, #24]
   1af68:	f002 f89f 	bl	1d0aa <memcpy>
		msgq->read_ptr += msgq->msg_size;
   1af6c:	69a3      	ldr	r3, [r4, #24]
   1af6e:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1af70:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   1af72:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   1af74:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   1af76:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   1af78:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   1af7a:	bf04      	itt	eq
   1af7c:	6923      	ldreq	r3, [r4, #16]
   1af7e:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   1af80:	6a23      	ldr	r3, [r4, #32]
   1af82:	3b01      	subs	r3, #1
   1af84:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1af86:	f003 fb82 	bl	1e68e <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1af8a:	4605      	mov	r5, r0
   1af8c:	2800      	cmp	r0, #0
   1af8e:	d02e      	beq.n	1afee <z_impl_k_msgq_get+0xae>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   1af90:	68a2      	ldr	r2, [r4, #8]
   1af92:	6941      	ldr	r1, [r0, #20]
   1af94:	69e0      	ldr	r0, [r4, #28]
   1af96:	f002 f888 	bl	1d0aa <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   1af9a:	69e3      	ldr	r3, [r4, #28]
   1af9c:	68a2      	ldr	r2, [r4, #8]
   1af9e:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1afa0:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1afa2:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1afa4:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1afa6:	bf04      	itt	eq
   1afa8:	6923      	ldreq	r3, [r4, #16]
   1afaa:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   1afac:	6a23      	ldr	r3, [r4, #32]
   1afae:	3301      	adds	r3, #1
   1afb0:	6223      	str	r3, [r4, #32]
   1afb2:	2300      	movs	r3, #0
   1afb4:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1afb6:	7b6b      	ldrb	r3, [r5, #13]
   1afb8:	06db      	lsls	r3, r3, #27
   1afba:	d104      	bne.n	1afc6 <z_impl_k_msgq_get+0x86>
	if (z_is_thread_ready(thread)) {
   1afbc:	69ab      	ldr	r3, [r5, #24]
   1afbe:	b913      	cbnz	r3, 1afc6 <z_impl_k_msgq_get+0x86>
		z_add_thread_to_ready_q(thread);
   1afc0:	4628      	mov	r0, r5
   1afc2:	f000 f973 	bl	1b2ac <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   1afc6:	4638      	mov	r0, r7
   1afc8:	4631      	mov	r1, r6
   1afca:	f003 faea 	bl	1e5a2 <z_reschedule>
			return 0;
   1afce:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1afd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   1afd4:	b14b      	cbz	r3, 1afea <z_impl_k_msgq_get+0xaa>
		_current->base.swap_data = data;
   1afd6:	4a08      	ldr	r2, [pc, #32]	; (1aff8 <z_impl_k_msgq_get+0xb8>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1afd8:	4638      	mov	r0, r7
		_current->base.swap_data = data;
   1afda:	6892      	ldr	r2, [r2, #8]
   1afdc:	6151      	str	r1, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1afde:	4622      	mov	r2, r4
   1afe0:	4631      	mov	r1, r6
}
   1afe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1afe6:	f000 ba9d 	b.w	1b524 <z_pend_curr>
		result = -ENOMSG;
   1afea:	f06f 004f 	mvn.w	r0, #79	; 0x4f
	__asm__ volatile(
   1afee:	f386 8811 	msr	BASEPRI, r6
   1aff2:	f3bf 8f6f 	isb	sy
	return result;
   1aff6:	e7eb      	b.n	1afd0 <z_impl_k_msgq_get+0x90>
   1aff8:	20024d00 	.word	0x20024d00

0001affc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   1affc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1affe:	4604      	mov	r4, r0
   1b000:	460f      	mov	r7, r1
	__asm__ volatile(
   1b002:	f04f 0320 	mov.w	r3, #32
   1b006:	f3ef 8511 	mrs	r5, BASEPRI
   1b00a:	f383 8811 	msr	BASEPRI, r3
   1b00e:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1b012:	68c2      	ldr	r2, [r0, #12]
   1b014:	4930      	ldr	r1, [pc, #192]	; (1b0d8 <z_impl_k_mutex_lock+0xdc>)
   1b016:	b15a      	cbz	r2, 1b030 <z_impl_k_mutex_lock+0x34>
   1b018:	6880      	ldr	r0, [r0, #8]
   1b01a:	688e      	ldr	r6, [r1, #8]
   1b01c:	42b0      	cmp	r0, r6
   1b01e:	d015      	beq.n	1b04c <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   1b020:	b9b7      	cbnz	r7, 1b050 <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
   1b022:	f385 8811 	msr	BASEPRI, r5
   1b026:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1b02a:	f06f 000f 	mvn.w	r0, #15
   1b02e:	e00c      	b.n	1b04a <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
   1b030:	688b      	ldr	r3, [r1, #8]
   1b032:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1b036:	6123      	str	r3, [r4, #16]
		mutex->owner = _current;
   1b038:	688b      	ldr	r3, [r1, #8]
		mutex->lock_count++;
   1b03a:	3201      	adds	r2, #1
   1b03c:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
   1b03e:	60a3      	str	r3, [r4, #8]
   1b040:	f385 8811 	msr	BASEPRI, r5
   1b044:	f3bf 8f6f 	isb	sy
		return 0;
   1b048:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1b04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   1b04c:	6923      	ldr	r3, [r4, #16]
   1b04e:	e7f2      	b.n	1b036 <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1b050:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b054:	f996 100e 	ldrsb.w	r1, [r6, #14]
   1b058:	4299      	cmp	r1, r3
   1b05a:	bfa8      	it	ge
   1b05c:	4619      	movge	r1, r3
   1b05e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1b062:	4299      	cmp	r1, r3
   1b064:	da2b      	bge.n	1b0be <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
   1b066:	f000 fa9f 	bl	1b5a8 <z_set_prio>
   1b06a:	4606      	mov	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1b06c:	463b      	mov	r3, r7
   1b06e:	4622      	mov	r2, r4
   1b070:	4629      	mov	r1, r5
   1b072:	481a      	ldr	r0, [pc, #104]	; (1b0dc <z_impl_k_mutex_lock+0xe0>)
   1b074:	f000 fa56 	bl	1b524 <z_pend_curr>
	if (got_mutex == 0) {
   1b078:	2800      	cmp	r0, #0
   1b07a:	d0e6      	beq.n	1b04a <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
   1b07c:	f04f 0320 	mov.w	r3, #32
   1b080:	f3ef 8511 	mrs	r5, BASEPRI
   1b084:	f383 8811 	msr	BASEPRI, r3
   1b088:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1b08c:	6823      	ldr	r3, [r4, #0]
   1b08e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b090:	429c      	cmp	r4, r3
   1b092:	d007      	beq.n	1b0a4 <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
   1b094:	b133      	cbz	r3, 1b0a4 <z_impl_k_mutex_lock+0xa8>
   1b096:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1b09a:	4299      	cmp	r1, r3
   1b09c:	bfa8      	it	ge
   1b09e:	4619      	movge	r1, r3
   1b0a0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1b0a4:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1b0a6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b0aa:	4299      	cmp	r1, r3
   1b0ac:	d109      	bne.n	1b0c2 <z_impl_k_mutex_lock+0xc6>
	if (resched) {
   1b0ae:	b16e      	cbz	r6, 1b0cc <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
   1b0b0:	4629      	mov	r1, r5
   1b0b2:	480a      	ldr	r0, [pc, #40]	; (1b0dc <z_impl_k_mutex_lock+0xe0>)
   1b0b4:	f003 fa75 	bl	1e5a2 <z_reschedule>
	return -EAGAIN;
   1b0b8:	f06f 000a 	mvn.w	r0, #10
   1b0bc:	e7c5      	b.n	1b04a <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
   1b0be:	2600      	movs	r6, #0
   1b0c0:	e7d4      	b.n	1b06c <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
   1b0c2:	f000 fa71 	bl	1b5a8 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1b0c6:	2800      	cmp	r0, #0
   1b0c8:	d1f2      	bne.n	1b0b0 <z_impl_k_mutex_lock+0xb4>
   1b0ca:	e7f0      	b.n	1b0ae <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
   1b0cc:	f385 8811 	msr	BASEPRI, r5
   1b0d0:	f3bf 8f6f 	isb	sy
   1b0d4:	e7f0      	b.n	1b0b8 <z_impl_k_mutex_lock+0xbc>
   1b0d6:	bf00      	nop
   1b0d8:	20024d00 	.word	0x20024d00
   1b0dc:	2002647c 	.word	0x2002647c

0001b0e0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1b0e0:	b538      	push	{r3, r4, r5, lr}
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1b0e2:	4b1d      	ldr	r3, [pc, #116]	; (1b158 <z_impl_k_mutex_unlock+0x78>)
   1b0e4:	4604      	mov	r4, r0
   1b0e6:	689a      	ldr	r2, [r3, #8]
   1b0e8:	7bd3      	ldrb	r3, [r2, #15]
   1b0ea:	3b01      	subs	r3, #1
   1b0ec:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
   1b0ee:	68c3      	ldr	r3, [r0, #12]
   1b0f0:	2b01      	cmp	r3, #1
   1b0f2:	d005      	beq.n	1b100 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
   1b0f4:	3b01      	subs	r3, #1
   1b0f6:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
   1b0f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sched_unlock();
   1b0fc:	f000 b8ba 	b.w	1b274 <k_sched_unlock>
	__asm__ volatile(
   1b100:	f04f 0320 	mov.w	r3, #32
   1b104:	f3ef 8511 	mrs	r5, BASEPRI
   1b108:	f383 8811 	msr	BASEPRI, r3
   1b10c:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1b110:	6901      	ldr	r1, [r0, #16]
   1b112:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1b114:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b118:	4299      	cmp	r1, r3
   1b11a:	d001      	beq.n	1b120 <z_impl_k_mutex_unlock+0x40>
		return z_set_prio(mutex->owner, new_prio);
   1b11c:	f000 fa44 	bl	1b5a8 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1b120:	4620      	mov	r0, r4
   1b122:	f003 fab4 	bl	1e68e <z_unpend_first_thread>
	mutex->owner = new_owner;
   1b126:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1b128:	b180      	cbz	r0, 1b14c <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1b12a:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1b12e:	6122      	str	r2, [r4, #16]
   1b130:	2200      	movs	r2, #0
   1b132:	6682      	str	r2, [r0, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b134:	7b42      	ldrb	r2, [r0, #13]
   1b136:	06d2      	lsls	r2, r2, #27
   1b138:	d103      	bne.n	1b142 <z_impl_k_mutex_unlock+0x62>
	if (z_is_thread_ready(thread)) {
   1b13a:	6983      	ldr	r3, [r0, #24]
   1b13c:	b90b      	cbnz	r3, 1b142 <z_impl_k_mutex_unlock+0x62>
		z_add_thread_to_ready_q(thread);
   1b13e:	f000 f8b5 	bl	1b2ac <z_add_thread_to_ready_q>
		z_reschedule(&lock, key);
   1b142:	4629      	mov	r1, r5
   1b144:	4805      	ldr	r0, [pc, #20]	; (1b15c <z_impl_k_mutex_unlock+0x7c>)
   1b146:	f003 fa2c 	bl	1e5a2 <z_reschedule>
   1b14a:	e7d5      	b.n	1b0f8 <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0U;
   1b14c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1b14e:	f385 8811 	msr	BASEPRI, r5
   1b152:	f3bf 8f6f 	isb	sy
   1b156:	e7cf      	b.n	1b0f8 <z_impl_k_mutex_unlock+0x18>
   1b158:	20024d00 	.word	0x20024d00
   1b15c:	2002647c 	.word	0x2002647c

0001b160 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1b160:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1b162:	4c08      	ldr	r4, [pc, #32]	; (1b184 <z_reset_time_slice+0x24>)
   1b164:	6823      	ldr	r3, [r4, #0]
   1b166:	b15b      	cbz	r3, 1b180 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1b168:	f7f4 f808 	bl	f17c <z_clock_elapsed>
   1b16c:	6823      	ldr	r3, [r4, #0]
   1b16e:	4a06      	ldr	r2, [pc, #24]	; (1b188 <z_reset_time_slice+0x28>)
   1b170:	4418      	add	r0, r3
   1b172:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1b174:	2100      	movs	r1, #0
	}
}
   1b176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   1b17a:	4618      	mov	r0, r3
   1b17c:	f003 bb47 	b.w	1e80e <z_set_timeout_expiry>
}
   1b180:	bd10      	pop	{r4, pc}
   1b182:	bf00      	nop
   1b184:	20024d3c 	.word	0x20024d3c
   1b188:	20024d00 	.word	0x20024d00

0001b18c <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
   1b18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b18e:	460d      	mov	r5, r1
	__asm__ volatile(
   1b190:	f04f 0320 	mov.w	r3, #32
   1b194:	f3ef 8411 	mrs	r4, BASEPRI
   1b198:	f383 8811 	msr	BASEPRI, r3
   1b19c:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
   1b1a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1b1a4:	f240 36e7 	movw	r6, #999	; 0x3e7
   1b1a8:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1b1aa:	2200      	movs	r2, #0
   1b1ac:	fbe1 6700 	umlal	r6, r7, r1, r0
   1b1b0:	4b09      	ldr	r3, [pc, #36]	; (1b1d8 <k_sched_time_slice_set+0x4c>)
   1b1b2:	4630      	mov	r0, r6
   1b1b4:	611a      	str	r2, [r3, #16]
   1b1b6:	4639      	mov	r1, r7
   1b1b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b1bc:	2300      	movs	r3, #0
   1b1be:	f7f1 f82f 	bl	c220 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1b1c2:	4b06      	ldr	r3, [pc, #24]	; (1b1dc <k_sched_time_slice_set+0x50>)
   1b1c4:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1b1c6:	4b06      	ldr	r3, [pc, #24]	; (1b1e0 <k_sched_time_slice_set+0x54>)
   1b1c8:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1b1ca:	f7ff ffc9 	bl	1b160 <z_reset_time_slice>
	__asm__ volatile(
   1b1ce:	f384 8811 	msr	BASEPRI, r4
   1b1d2:	f3bf 8f6f 	isb	sy
	}
}
   1b1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b1d8:	20024d00 	.word	0x20024d00
   1b1dc:	20024d3c 	.word	0x20024d3c
   1b1e0:	20024d38 	.word	0x20024d38

0001b1e4 <k_sched_lock>:
	__asm__ volatile(
   1b1e4:	f04f 0320 	mov.w	r3, #32
   1b1e8:	f3ef 8111 	mrs	r1, BASEPRI
   1b1ec:	f383 8811 	msr	BASEPRI, r3
   1b1f0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1b1f4:	4b04      	ldr	r3, [pc, #16]	; (1b208 <k_sched_lock+0x24>)
   1b1f6:	689a      	ldr	r2, [r3, #8]
   1b1f8:	7bd3      	ldrb	r3, [r2, #15]
   1b1fa:	3b01      	subs	r3, #1
   1b1fc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1b1fe:	f381 8811 	msr	BASEPRI, r1
   1b202:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1b206:	4770      	bx	lr
   1b208:	20024d00 	.word	0x20024d00

0001b20c <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1b20c:	4b09      	ldr	r3, [pc, #36]	; (1b234 <z_priq_dumb_remove+0x28>)
   1b20e:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1b212:	4282      	cmp	r2, r0
   1b214:	d105      	bne.n	1b222 <z_priq_dumb_remove+0x16>
   1b216:	689b      	ldr	r3, [r3, #8]
   1b218:	428b      	cmp	r3, r1
   1b21a:	d102      	bne.n	1b222 <z_priq_dumb_remove+0x16>
   1b21c:	7b4b      	ldrb	r3, [r1, #13]
   1b21e:	06db      	lsls	r3, r3, #27
   1b220:	d106      	bne.n	1b230 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1b222:	e9d1 3200 	ldrd	r3, r2, [r1]
   1b226:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1b228:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b22a:	2300      	movs	r3, #0
	node->prev = NULL;
   1b22c:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1b230:	4770      	bx	lr
   1b232:	bf00      	nop
   1b234:	20024d00 	.word	0x20024d00

0001b238 <update_cache>:
{
   1b238:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   1b23a:	4c0d      	ldr	r4, [pc, #52]	; (1b270 <update_cache+0x38>)
{
   1b23c:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   1b23e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1b242:	f003 f9ed 	bl	1e620 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
   1b246:	4605      	mov	r5, r0
   1b248:	b900      	cbnz	r0, 1b24c <update_cache+0x14>
   1b24a:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1b24c:	68a3      	ldr	r3, [r4, #8]
   1b24e:	b94a      	cbnz	r2, 1b264 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   1b250:	7b5a      	ldrb	r2, [r3, #13]
   1b252:	06d2      	lsls	r2, r2, #27
   1b254:	d106      	bne.n	1b264 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1b256:	69aa      	ldr	r2, [r5, #24]
   1b258:	b922      	cbnz	r2, 1b264 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
   1b25a:	89da      	ldrh	r2, [r3, #14]
   1b25c:	2a7f      	cmp	r2, #127	; 0x7f
   1b25e:	d901      	bls.n	1b264 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   1b260:	6263      	str	r3, [r4, #36]	; 0x24
}
   1b262:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   1b264:	429d      	cmp	r5, r3
   1b266:	d001      	beq.n	1b26c <update_cache+0x34>
			z_reset_time_slice();
   1b268:	f7ff ff7a 	bl	1b160 <z_reset_time_slice>
		_kernel.ready_q.cache = th;
   1b26c:	6265      	str	r5, [r4, #36]	; 0x24
}
   1b26e:	e7f8      	b.n	1b262 <update_cache+0x2a>
   1b270:	20024d00 	.word	0x20024d00

0001b274 <k_sched_unlock>:
{
   1b274:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b276:	f04f 0320 	mov.w	r3, #32
   1b27a:	f3ef 8411 	mrs	r4, BASEPRI
   1b27e:	f383 8811 	msr	BASEPRI, r3
   1b282:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1b286:	4b08      	ldr	r3, [pc, #32]	; (1b2a8 <k_sched_unlock+0x34>)
		update_cache(0);
   1b288:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1b28a:	689a      	ldr	r2, [r3, #8]
   1b28c:	7bd3      	ldrb	r3, [r2, #15]
   1b28e:	3301      	adds	r3, #1
   1b290:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1b292:	f7ff ffd1 	bl	1b238 <update_cache>
	__asm__ volatile(
   1b296:	f384 8811 	msr	BASEPRI, r4
   1b29a:	f3bf 8f6f 	isb	sy
}
   1b29e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1b2a2:	f003 b995 	b.w	1e5d0 <z_reschedule_unlocked>
   1b2a6:	bf00      	nop
   1b2a8:	20024d00 	.word	0x20024d00

0001b2ac <z_add_thread_to_ready_q>:
{
   1b2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1b2ae:	f04f 0320 	mov.w	r3, #32
   1b2b2:	f3ef 8411 	mrs	r4, BASEPRI
   1b2b6:	f383 8811 	msr	BASEPRI, r3
   1b2ba:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1b2be:	4a15      	ldr	r2, [pc, #84]	; (1b314 <z_add_thread_to_ready_q+0x68>)
   1b2c0:	4611      	mov	r1, r2
   1b2c2:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b2c6:	428b      	cmp	r3, r1
   1b2c8:	d01d      	beq.n	1b306 <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b2ca:	b1e3      	cbz	r3, 1b306 <z_add_thread_to_ready_q+0x5a>
   1b2cc:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1b2ce:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1b2d2:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1b2d6:	42af      	cmp	r7, r5
   1b2d8:	dd10      	ble.n	1b2fc <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
   1b2da:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b2dc:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1b2e0:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1b2e2:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1b2e4:	7b43      	ldrb	r3, [r0, #13]
   1b2e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b2ea:	7343      	strb	r3, [r0, #13]
		update_cache(0);
   1b2ec:	2000      	movs	r0, #0
   1b2ee:	f7ff ffa3 	bl	1b238 <update_cache>
	__asm__ volatile(
   1b2f2:	f384 8811 	msr	BASEPRI, r4
   1b2f6:	f3bf 8f6f 	isb	sy
}
   1b2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1b2fc:	42b3      	cmp	r3, r6
   1b2fe:	d002      	beq.n	1b306 <z_add_thread_to_ready_q+0x5a>
   1b300:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b302:	2b00      	cmp	r3, #0
   1b304:	d1e5      	bne.n	1b2d2 <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
   1b306:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   1b308:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   1b30a:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   1b30c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1b30e:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1b310:	62d0      	str	r0, [r2, #44]	; 0x2c
   1b312:	e7e7      	b.n	1b2e4 <z_add_thread_to_ready_q+0x38>
   1b314:	20024d00 	.word	0x20024d00

0001b318 <z_move_thread_to_end_of_prio_q>:
{
   1b318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b31a:	4604      	mov	r4, r0
	__asm__ volatile(
   1b31c:	f04f 0320 	mov.w	r3, #32
   1b320:	f3ef 8511 	mrs	r5, BASEPRI
   1b324:	f383 8811 	msr	BASEPRI, r3
   1b328:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1b32c:	7b43      	ldrb	r3, [r0, #13]
   1b32e:	065a      	lsls	r2, r3, #25
   1b330:	d503      	bpl.n	1b33a <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b332:	4601      	mov	r1, r0
   1b334:	4817      	ldr	r0, [pc, #92]	; (1b394 <z_move_thread_to_end_of_prio_q+0x7c>)
   1b336:	f7ff ff69 	bl	1b20c <z_priq_dumb_remove>
	return list->head == list;
   1b33a:	4a17      	ldr	r2, [pc, #92]	; (1b398 <z_move_thread_to_end_of_prio_q+0x80>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b33c:	f102 0128 	add.w	r1, r2, #40	; 0x28
   1b340:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   1b344:	428b      	cmp	r3, r1
   1b346:	d01f      	beq.n	1b388 <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b348:	b1f3      	cbz	r3, 1b388 <z_move_thread_to_end_of_prio_q+0x70>
	if (t1->base.prio < t2->base.prio) {
   1b34a:	f994 600e 	ldrsb.w	r6, [r4, #14]
   1b34e:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1b352:	42b7      	cmp	r7, r6
   1b354:	dd13      	ble.n	1b37e <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
   1b356:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1b358:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   1b35c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1b35e:	605c      	str	r4, [r3, #4]
   1b360:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   1b362:	6890      	ldr	r0, [r2, #8]
   1b364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b368:	7363      	strb	r3, [r4, #13]
   1b36a:	1b03      	subs	r3, r0, r4
   1b36c:	4258      	negs	r0, r3
   1b36e:	4158      	adcs	r0, r3
   1b370:	f7ff ff62 	bl	1b238 <update_cache>
	__asm__ volatile(
   1b374:	f385 8811 	msr	BASEPRI, r5
   1b378:	f3bf 8f6f 	isb	sy
}
   1b37c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1b37e:	4298      	cmp	r0, r3
   1b380:	d002      	beq.n	1b388 <z_move_thread_to_end_of_prio_q+0x70>
   1b382:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b384:	2b00      	cmp	r3, #0
   1b386:	d1e2      	bne.n	1b34e <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
   1b388:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   1b38c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1b38e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b390:	62d4      	str	r4, [r2, #44]	; 0x2c
   1b392:	e7e5      	b.n	1b360 <z_move_thread_to_end_of_prio_q+0x48>
   1b394:	20024d28 	.word	0x20024d28
   1b398:	20024d00 	.word	0x20024d00

0001b39c <z_time_slice>:
	if (pending_current == _current) {
   1b39c:	4a15      	ldr	r2, [pc, #84]	; (1b3f4 <z_time_slice+0x58>)
   1b39e:	4916      	ldr	r1, [pc, #88]	; (1b3f8 <z_time_slice+0x5c>)
{
   1b3a0:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   1b3a2:	680c      	ldr	r4, [r1, #0]
   1b3a4:	6893      	ldr	r3, [r2, #8]
   1b3a6:	42a3      	cmp	r3, r4
   1b3a8:	4614      	mov	r4, r2
   1b3aa:	d103      	bne.n	1b3b4 <z_time_slice+0x18>
}
   1b3ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   1b3b0:	f7ff bed6 	b.w	1b160 <z_reset_time_slice>
	pending_current = NULL;
   1b3b4:	2500      	movs	r5, #0
   1b3b6:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   1b3b8:	4910      	ldr	r1, [pc, #64]	; (1b3fc <z_time_slice+0x60>)
   1b3ba:	6809      	ldr	r1, [r1, #0]
   1b3bc:	b1b9      	cbz	r1, 1b3ee <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   1b3be:	89d9      	ldrh	r1, [r3, #14]
   1b3c0:	297f      	cmp	r1, #127	; 0x7f
   1b3c2:	d814      	bhi.n	1b3ee <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
   1b3c4:	490e      	ldr	r1, [pc, #56]	; (1b400 <z_time_slice+0x64>)
   1b3c6:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1b3ca:	6809      	ldr	r1, [r1, #0]
   1b3cc:	428d      	cmp	r5, r1
   1b3ce:	db0e      	blt.n	1b3ee <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
   1b3d0:	490c      	ldr	r1, [pc, #48]	; (1b404 <z_time_slice+0x68>)
   1b3d2:	428b      	cmp	r3, r1
   1b3d4:	d00b      	beq.n	1b3ee <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   1b3d6:	6999      	ldr	r1, [r3, #24]
   1b3d8:	b949      	cbnz	r1, 1b3ee <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   1b3da:	6911      	ldr	r1, [r2, #16]
   1b3dc:	4281      	cmp	r1, r0
   1b3de:	dc03      	bgt.n	1b3e8 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   1b3e0:	4618      	mov	r0, r3
   1b3e2:	f7ff ff99 	bl	1b318 <z_move_thread_to_end_of_prio_q>
   1b3e6:	e7e1      	b.n	1b3ac <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   1b3e8:	1a09      	subs	r1, r1, r0
   1b3ea:	6111      	str	r1, [r2, #16]
}
   1b3ec:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   1b3ee:	2300      	movs	r3, #0
   1b3f0:	6123      	str	r3, [r4, #16]
   1b3f2:	e7fb      	b.n	1b3ec <z_time_slice+0x50>
   1b3f4:	20024d00 	.word	0x20024d00
   1b3f8:	20024d34 	.word	0x20024d34
   1b3fc:	20024d3c 	.word	0x20024d3c
   1b400:	20024d38 	.word	0x20024d38
   1b404:	20020b3c 	.word	0x20020b3c

0001b408 <z_remove_thread_from_ready_q>:
{
   1b408:	b538      	push	{r3, r4, r5, lr}
   1b40a:	4604      	mov	r4, r0
	__asm__ volatile(
   1b40c:	f04f 0320 	mov.w	r3, #32
   1b410:	f3ef 8511 	mrs	r5, BASEPRI
   1b414:	f383 8811 	msr	BASEPRI, r3
   1b418:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1b41c:	7b43      	ldrb	r3, [r0, #13]
   1b41e:	065a      	lsls	r2, r3, #25
   1b420:	d507      	bpl.n	1b432 <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b422:	4601      	mov	r1, r0
   1b424:	4809      	ldr	r0, [pc, #36]	; (1b44c <z_remove_thread_from_ready_q+0x44>)
   1b426:	f7ff fef1 	bl	1b20c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1b42a:	7b63      	ldrb	r3, [r4, #13]
   1b42c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1b430:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1b432:	4b07      	ldr	r3, [pc, #28]	; (1b450 <z_remove_thread_from_ready_q+0x48>)
   1b434:	6898      	ldr	r0, [r3, #8]
   1b436:	1b03      	subs	r3, r0, r4
   1b438:	4258      	negs	r0, r3
   1b43a:	4158      	adcs	r0, r3
   1b43c:	f7ff fefc 	bl	1b238 <update_cache>
	__asm__ volatile(
   1b440:	f385 8811 	msr	BASEPRI, r5
   1b444:	f3bf 8f6f 	isb	sy
}
   1b448:	bd38      	pop	{r3, r4, r5, pc}
   1b44a:	bf00      	nop
   1b44c:	20024d28 	.word	0x20024d28
   1b450:	20024d00 	.word	0x20024d00

0001b454 <pend>:
{
   1b454:	b570      	push	{r4, r5, r6, lr}
   1b456:	4604      	mov	r4, r0
   1b458:	460d      	mov	r5, r1
   1b45a:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   1b45c:	f7ff ffd4 	bl	1b408 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   1b460:	7b63      	ldrb	r3, [r4, #13]
   1b462:	f043 0302 	orr.w	r3, r3, #2
   1b466:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1b468:	b17d      	cbz	r5, 1b48a <pend+0x36>
	return list->head == list;
   1b46a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1b46c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b46e:	429d      	cmp	r5, r3
   1b470:	d029      	beq.n	1b4c6 <pend+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b472:	b343      	cbz	r3, 1b4c6 <pend+0x72>
	if (t1->base.prio < t2->base.prio) {
   1b474:	f994 200e 	ldrsb.w	r2, [r4, #14]
   1b478:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1b47c:	4291      	cmp	r1, r2
   1b47e:	dd1c      	ble.n	1b4ba <pend+0x66>
	node->prev = successor->prev;
   1b480:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b482:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1b486:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b488:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   1b48a:	1c73      	adds	r3, r6, #1
   1b48c:	d022      	beq.n	1b4d4 <pend+0x80>
   1b48e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1b492:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b496:	2100      	movs	r1, #0
   1b498:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   1b49c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b4a0:	fbc5 0106 	smlal	r0, r1, r5, r6
   1b4a4:	2300      	movs	r3, #0
   1b4a6:	f7f0 febb 	bl	c220 <__aeabi_uldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1b4aa:	490b      	ldr	r1, [pc, #44]	; (1b4d8 <pend+0x84>)
   1b4ac:	1c42      	adds	r2, r0, #1
   1b4ae:	f104 0018 	add.w	r0, r4, #24
}
   1b4b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1b4b6:	f000 bb3b 	b.w	1bb30 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   1b4ba:	6869      	ldr	r1, [r5, #4]
   1b4bc:	428b      	cmp	r3, r1
   1b4be:	d002      	beq.n	1b4c6 <pend+0x72>
   1b4c0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b4c2:	2b00      	cmp	r3, #0
   1b4c4:	d1d8      	bne.n	1b478 <pend+0x24>
	node->prev = list->tail;
   1b4c6:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1b4c8:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   1b4ca:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1b4cc:	686b      	ldr	r3, [r5, #4]
   1b4ce:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b4d0:	606c      	str	r4, [r5, #4]
   1b4d2:	e7da      	b.n	1b48a <pend+0x36>
}
   1b4d4:	bd70      	pop	{r4, r5, r6, pc}
   1b4d6:	bf00      	nop
   1b4d8:	0001e62d 	.word	0x0001e62d

0001b4dc <z_pend_curr_irqlock>:
{
   1b4dc:	b570      	push	{r4, r5, r6, lr}
   1b4de:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   1b4e0:	4d0e      	ldr	r5, [pc, #56]	; (1b51c <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
   1b4e2:	4c0f      	ldr	r4, [pc, #60]	; (1b520 <z_pend_curr_irqlock+0x44>)
	pend(_current, wait_q, timeout);
   1b4e4:	68a8      	ldr	r0, [r5, #8]
   1b4e6:	f7ff ffb5 	bl	1b454 <pend>
	pending_current = _current;
   1b4ea:	68ab      	ldr	r3, [r5, #8]
	int ret = z_swap_irqlock(key);
   1b4ec:	4630      	mov	r0, r6
	pending_current = _current;
   1b4ee:	6023      	str	r3, [r4, #0]
	int ret = z_swap_irqlock(key);
   1b4f0:	f003 f81c 	bl	1e52c <z_swap_irqlock>
	__asm__ volatile(
   1b4f4:	f04f 0220 	mov.w	r2, #32
   1b4f8:	f3ef 8311 	mrs	r3, BASEPRI
   1b4fc:	f382 8811 	msr	BASEPRI, r2
   1b500:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
   1b504:	6822      	ldr	r2, [r4, #0]
   1b506:	68a9      	ldr	r1, [r5, #8]
   1b508:	4291      	cmp	r1, r2
			pending_current = NULL;
   1b50a:	bf04      	itt	eq
   1b50c:	2200      	moveq	r2, #0
   1b50e:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
   1b510:	f383 8811 	msr	BASEPRI, r3
   1b514:	f3bf 8f6f 	isb	sy
}
   1b518:	bd70      	pop	{r4, r5, r6, pc}
   1b51a:	bf00      	nop
   1b51c:	20024d00 	.word	0x20024d00
   1b520:	20024d34 	.word	0x20024d34

0001b524 <z_pend_curr>:
{
   1b524:	b510      	push	{r4, lr}
   1b526:	460c      	mov	r4, r1
   1b528:	4611      	mov	r1, r2
	pending_current = _current;
   1b52a:	4a06      	ldr	r2, [pc, #24]	; (1b544 <z_pend_curr+0x20>)
   1b52c:	6890      	ldr	r0, [r2, #8]
   1b52e:	4a06      	ldr	r2, [pc, #24]	; (1b548 <z_pend_curr+0x24>)
   1b530:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   1b532:	461a      	mov	r2, r3
   1b534:	f7ff ff8e 	bl	1b454 <pend>
 * handling.
 */
static ALWAYS_INLINE int z_swap(struct k_spinlock *lock, k_spinlock_key_t key)
{
	k_spin_release(lock);
	return z_swap_irqlock(key.key);
   1b538:	4620      	mov	r0, r4
}
   1b53a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b53e:	f002 bff5 	b.w	1e52c <z_swap_irqlock>
   1b542:	bf00      	nop
   1b544:	20024d00 	.word	0x20024d00
   1b548:	20024d34 	.word	0x20024d34

0001b54c <z_tick_sleep.part.19>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
   1b54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
   1b54e:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   1b550:	f003 f977 	bl	1e842 <z_tick_get_32>
   1b554:	1834      	adds	r4, r6, r0
	__asm__ volatile(
   1b556:	f04f 0320 	mov.w	r3, #32
   1b55a:	f3ef 8711 	mrs	r7, BASEPRI
   1b55e:	f383 8811 	msr	BASEPRI, r3
   1b562:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1b566:	4d0d      	ldr	r5, [pc, #52]	; (1b59c <z_tick_sleep.part.19+0x50>)
   1b568:	4b0d      	ldr	r3, [pc, #52]	; (1b5a0 <z_tick_sleep.part.19+0x54>)
   1b56a:	68a8      	ldr	r0, [r5, #8]
   1b56c:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   1b56e:	f7ff ff4b 	bl	1b408 <z_remove_thread_from_ready_q>
   1b572:	68a8      	ldr	r0, [r5, #8]
   1b574:	490b      	ldr	r1, [pc, #44]	; (1b5a4 <z_tick_sleep.part.19+0x58>)
   1b576:	4632      	mov	r2, r6
   1b578:	3018      	adds	r0, #24
   1b57a:	f000 fad9 	bl	1bb30 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
   1b57e:	68aa      	ldr	r2, [r5, #8]
   1b580:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b582:	7b53      	ldrb	r3, [r2, #13]
   1b584:	f043 0310 	orr.w	r3, r3, #16
   1b588:	7353      	strb	r3, [r2, #13]
   1b58a:	f002 ffcf 	bl	1e52c <z_swap_irqlock>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   1b58e:	f003 f958 	bl	1e842 <z_tick_get_32>
   1b592:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1b594:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1b598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b59a:	bf00      	nop
   1b59c:	20024d00 	.word	0x20024d00
   1b5a0:	20024d34 	.word	0x20024d34
   1b5a4:	0001e62d 	.word	0x0001e62d

0001b5a8 <z_set_prio>:
{
   1b5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b5ac:	4604      	mov	r4, r0
   1b5ae:	f04f 0320 	mov.w	r3, #32
   1b5b2:	f3ef 8911 	mrs	r9, BASEPRI
   1b5b6:	f383 8811 	msr	BASEPRI, r3
   1b5ba:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
   1b5be:	f002 ffac 	bl	1e51a <z_is_thread_ready>
		if (need_sched) {
   1b5c2:	b24e      	sxtb	r6, r1
   1b5c4:	4680      	mov	r8, r0
   1b5c6:	b360      	cbz	r0, 1b622 <z_set_prio+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b5c8:	4d17      	ldr	r5, [pc, #92]	; (1b628 <z_set_prio+0x80>)
   1b5ca:	4621      	mov	r1, r4
   1b5cc:	f105 0728 	add.w	r7, r5, #40	; 0x28
   1b5d0:	4638      	mov	r0, r7
   1b5d2:	f7ff fe1b 	bl	1b20c <z_priq_dumb_remove>
	return list->head == list;
   1b5d6:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
   1b5d8:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b5da:	42bb      	cmp	r3, r7
   1b5dc:	462a      	mov	r2, r5
   1b5de:	d019      	beq.n	1b614 <z_set_prio+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b5e0:	b1c3      	cbz	r3, 1b614 <z_set_prio+0x6c>
   1b5e2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1b5e4:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1b5e8:	42b0      	cmp	r0, r6
   1b5ea:	dd0e      	ble.n	1b60a <z_set_prio+0x62>
	node->prev = successor->prev;
   1b5ec:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b5ee:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1b5f2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b5f4:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1b5f6:	2001      	movs	r0, #1
   1b5f8:	f7ff fe1e 	bl	1b238 <update_cache>
	__asm__ volatile(
   1b5fc:	f389 8811 	msr	BASEPRI, r9
   1b600:	f3bf 8f6f 	isb	sy
}
   1b604:	4640      	mov	r0, r8
   1b606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (node == list->tail) ? NULL : node->next;
   1b60a:	4299      	cmp	r1, r3
   1b60c:	d002      	beq.n	1b614 <z_set_prio+0x6c>
   1b60e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b610:	2b00      	cmp	r3, #0
   1b612:	d1e7      	bne.n	1b5e4 <z_set_prio+0x3c>
	node->prev = list->tail;
   1b614:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   1b616:	6027      	str	r7, [r4, #0]
	node->prev = list->tail;
   1b618:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1b61a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1b61c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b61e:	62d4      	str	r4, [r2, #44]	; 0x2c
   1b620:	e7e9      	b.n	1b5f6 <z_set_prio+0x4e>
			thread->base.prio = prio;
   1b622:	73a6      	strb	r6, [r4, #14]
   1b624:	e7ea      	b.n	1b5fc <z_set_prio+0x54>
   1b626:	bf00      	nop
   1b628:	20024d00 	.word	0x20024d00

0001b62c <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1b62c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1b62e:	4b04      	ldr	r3, [pc, #16]	; (1b640 <z_sched_init+0x14>)
   1b630:	4608      	mov	r0, r1
   1b632:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1b636:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1b63a:	f7ff bda7 	b.w	1b18c <k_sched_time_slice_set>
   1b63e:	bf00      	nop
   1b640:	20024d00 	.word	0x20024d00

0001b644 <z_impl_k_yield>:
{
   1b644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1b646:	4c23      	ldr	r4, [pc, #140]	; (1b6d4 <z_impl_k_yield+0x90>)
   1b648:	4b23      	ldr	r3, [pc, #140]	; (1b6d8 <z_impl_k_yield+0x94>)
   1b64a:	68a2      	ldr	r2, [r4, #8]
   1b64c:	429a      	cmp	r2, r3
   1b64e:	d029      	beq.n	1b6a4 <z_impl_k_yield+0x60>
	__asm__ volatile(
   1b650:	f04f 0320 	mov.w	r3, #32
   1b654:	f3ef 8611 	mrs	r6, BASEPRI
   1b658:	f383 8811 	msr	BASEPRI, r3
   1b65c:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1b660:	f104 0528 	add.w	r5, r4, #40	; 0x28
   1b664:	68a1      	ldr	r1, [r4, #8]
   1b666:	4628      	mov	r0, r5
   1b668:	f7ff fdd0 	bl	1b20c <z_priq_dumb_remove>
	return list->head == list;
   1b66c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1b66e:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b670:	42aa      	cmp	r2, r5
   1b672:	d028      	beq.n	1b6c6 <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b674:	b33a      	cbz	r2, 1b6c6 <z_impl_k_yield+0x82>
   1b676:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1b678:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1b67c:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1b680:	428f      	cmp	r7, r1
   1b682:	dd1b      	ble.n	1b6bc <z_impl_k_yield+0x78>
	node->prev = successor->prev;
   1b684:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1b686:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   1b68a:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1b68c:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   1b68e:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
   1b690:	2001      	movs	r0, #1
   1b692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1b696:	735a      	strb	r2, [r3, #13]
   1b698:	f7ff fdce 	bl	1b238 <update_cache>
	__asm__ volatile(
   1b69c:	f386 8811 	msr	BASEPRI, r6
   1b6a0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1b6a4:	f04f 0320 	mov.w	r3, #32
   1b6a8:	f3ef 8011 	mrs	r0, BASEPRI
   1b6ac:	f383 8811 	msr	BASEPRI, r3
   1b6b0:	f3bf 8f6f 	isb	sy
}
   1b6b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
}

static inline void z_swap_unlocked(void)
{
	(void) z_swap_irqlock(arch_irq_lock());
   1b6b8:	f002 bf38 	b.w	1e52c <z_swap_irqlock>
	return (node == list->tail) ? NULL : node->next;
   1b6bc:	4282      	cmp	r2, r0
   1b6be:	d002      	beq.n	1b6c6 <z_impl_k_yield+0x82>
   1b6c0:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b6c2:	2a00      	cmp	r2, #0
   1b6c4:	d1da      	bne.n	1b67c <z_impl_k_yield+0x38>
	node->prev = list->tail;
   1b6c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
   1b6c8:	601d      	str	r5, [r3, #0]
	node->prev = list->tail;
   1b6ca:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1b6cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1b6ce:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1b6d0:	62e3      	str	r3, [r4, #44]	; 0x2c
   1b6d2:	e7dc      	b.n	1b68e <z_impl_k_yield+0x4a>
   1b6d4:	20024d00 	.word	0x20024d00
   1b6d8:	20020b3c 	.word	0x20020b3c

0001b6dc <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
   1b6dc:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	if (ms == K_FOREVER) {
   1b6de:	1c43      	adds	r3, r0, #1
{
   1b6e0:	4604      	mov	r4, r0
	if (ms == K_FOREVER) {
   1b6e2:	d105      	bne.n	1b6f0 <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
   1b6e4:	4b10      	ldr	r3, [pc, #64]	; (1b728 <z_impl_k_sleep+0x4c>)
   1b6e6:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1b6e8:	f000 f936 	bl	1b958 <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   1b6ec:	4620      	mov	r0, r4
   1b6ee:	bd38      	pop	{r3, r4, r5, pc}
   1b6f0:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1b6f4:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b6f8:	2100      	movs	r1, #0
   1b6fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b6fe:	fbe5 0104 	umlal	r0, r1, r5, r4
   1b702:	2300      	movs	r3, #0
   1b704:	f7f0 fd8c 	bl	c220 <__aeabi_uldivmod>
	if (ticks == 0) {
   1b708:	4604      	mov	r4, r0
   1b70a:	b948      	cbnz	r0, 1b720 <z_impl_k_sleep+0x44>
	z_impl_k_yield();
   1b70c:	f7ff ff9a 	bl	1b644 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
   1b710:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1b714:	fb84 0100 	smull	r0, r1, r4, r0
   1b718:	0bc4      	lsrs	r4, r0, #15
   1b71a:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1b71e:	e7e5      	b.n	1b6ec <z_impl_k_sleep+0x10>
   1b720:	f7ff ff14 	bl	1b54c <z_tick_sleep.part.19>
   1b724:	4604      	mov	r4, r0
   1b726:	e7f3      	b.n	1b710 <z_impl_k_sleep+0x34>
   1b728:	20024d00 	.word	0x20024d00

0001b72c <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   1b72c:	4b01      	ldr	r3, [pc, #4]	; (1b734 <z_impl_k_current_get+0x8>)
   1b72e:	6898      	ldr	r0, [r3, #8]
   1b730:	4770      	bx	lr
   1b732:	bf00      	nop
   1b734:	20024d00 	.word	0x20024d00

0001b738 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1b738:	b570      	push	{r4, r5, r6, lr}
   1b73a:	4604      	mov	r4, r0
   1b73c:	f04f 0320 	mov.w	r3, #32
   1b740:	f3ef 8611 	mrs	r6, BASEPRI
   1b744:	f383 8811 	msr	BASEPRI, r3
   1b748:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   1b74c:	f002 ff9f 	bl	1e68e <z_unpend_first_thread>
	if (thread != NULL) {
   1b750:	4605      	mov	r5, r0
   1b752:	b170      	cbz	r0, 1b772 <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b754:	7b43      	ldrb	r3, [r0, #13]
   1b756:	06db      	lsls	r3, r3, #27
   1b758:	d103      	bne.n	1b762 <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
   1b75a:	6983      	ldr	r3, [r0, #24]
   1b75c:	b90b      	cbnz	r3, 1b762 <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
   1b75e:	f7ff fda5 	bl	1b2ac <z_add_thread_to_ready_q>
   1b762:	2300      	movs	r3, #0
   1b764:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   1b766:	4631      	mov	r1, r6
}
   1b768:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   1b76c:	4807      	ldr	r0, [pc, #28]	; (1b78c <z_impl_k_sem_give+0x54>)
   1b76e:	f002 bf18 	b.w	1e5a2 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1b772:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1b776:	429a      	cmp	r2, r3
   1b778:	bf18      	it	ne
   1b77a:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1b77c:	2102      	movs	r1, #2
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1b77e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1b780:	f104 0010 	add.w	r0, r4, #16
   1b784:	f003 f994 	bl	1eab0 <z_handle_obj_poll_events>
   1b788:	e7ed      	b.n	1b766 <z_impl_k_sem_give+0x2e>
   1b78a:	bf00      	nop
   1b78c:	2002647c 	.word	0x2002647c

0001b790 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   1b790:	b410      	push	{r4}
   1b792:	4602      	mov	r2, r0
   1b794:	460b      	mov	r3, r1
   1b796:	f04f 0020 	mov.w	r0, #32
   1b79a:	f3ef 8111 	mrs	r1, BASEPRI
   1b79e:	f380 8811 	msr	BASEPRI, r0
   1b7a2:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   1b7a6:	6894      	ldr	r4, [r2, #8]
   1b7a8:	b14c      	cbz	r4, 1b7be <z_impl_k_sem_take+0x2e>
		sem->count--;
   1b7aa:	3c01      	subs	r4, #1
   1b7ac:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
   1b7ae:	f381 8811 	msr	BASEPRI, r1
   1b7b2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   1b7b6:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   1b7b8:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b7bc:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   1b7be:	b933      	cbnz	r3, 1b7ce <z_impl_k_sem_take+0x3e>
   1b7c0:	f381 8811 	msr	BASEPRI, r1
   1b7c4:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1b7c8:	f06f 000f 	mvn.w	r0, #15
   1b7cc:	e7f4      	b.n	1b7b8 <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1b7ce:	4802      	ldr	r0, [pc, #8]	; (1b7d8 <z_impl_k_sem_take+0x48>)
}
   1b7d0:	f85d 4b04 	ldr.w	r4, [sp], #4
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1b7d4:	f7ff bea6 	b.w	1b524 <z_pend_curr>
   1b7d8:	2002647c 	.word	0x2002647c

0001b7dc <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   1b7dc:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1b7de:	4c08      	ldr	r4, [pc, #32]	; (1b800 <k_sys_work_q_init+0x24>)
   1b7e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b7e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1b7e8:	4906      	ldr	r1, [pc, #24]	; (1b804 <k_sys_work_q_init+0x28>)
   1b7ea:	4620      	mov	r0, r4
   1b7ec:	f000 f942 	bl	1ba74 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1b7f0:	4905      	ldr	r1, [pc, #20]	; (1b808 <k_sys_work_q_init+0x2c>)
   1b7f2:	f104 0010 	add.w	r0, r4, #16
   1b7f6:	f002 ff9f 	bl	1e738 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1b7fa:	2000      	movs	r0, #0
   1b7fc:	bd10      	pop	{r4, pc}
   1b7fe:	bf00      	nop
   1b800:	20024d40 	.word	0x20024d40
   1b804:	200289e0 	.word	0x200289e0
   1b808:	00020871 	.word	0x00020871

0001b80c <z_check_stack_sentinel>:
 */
void z_check_stack_sentinel(void)
{
	u32_t *stack;

	if ((_current->base.thread_state & _THREAD_DUMMY) != 0) {
   1b80c:	4b09      	ldr	r3, [pc, #36]	; (1b834 <z_check_stack_sentinel+0x28>)
   1b80e:	689b      	ldr	r3, [r3, #8]
   1b810:	7b5a      	ldrb	r2, [r3, #13]
   1b812:	07d2      	lsls	r2, r2, #31
   1b814:	d40d      	bmi.n	1b832 <z_check_stack_sentinel+0x26>
		return;
	}

	stack = (u32_t *)_current->stack_info.start;
   1b816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
	if (*stack != STACK_SENTINEL) {
   1b818:	681a      	ldr	r2, [r3, #0]
   1b81a:	f1b2 3ff0 	cmp.w	r2, #4042322160	; 0xf0f0f0f0
   1b81e:	d008      	beq.n	1b832 <z_check_stack_sentinel+0x26>
		/* Restore it so further checks don't trigger this same error */
		*stack = STACK_SENTINEL;
   1b820:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
   1b824:	601a      	str	r2, [r3, #0]
		z_except_reason(K_ERR_STACK_CHK_FAIL);
   1b826:	4040      	eors	r0, r0
   1b828:	f380 8811 	msr	BASEPRI, r0
   1b82c:	f04f 0002 	mov.w	r0, #2
   1b830:	df02      	svc	2
	}
}
   1b832:	4770      	bx	lr
   1b834:	20024d00 	.word	0x20024d00

0001b838 <z_impl_k_thread_start>:
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
   1b838:	b510      	push	{r4, lr}
   1b83a:	4602      	mov	r2, r0
	__asm__ volatile(
   1b83c:	f04f 0320 	mov.w	r3, #32
   1b840:	f3ef 8411 	mrs	r4, BASEPRI
   1b844:	f383 8811 	msr	BASEPRI, r3
   1b848:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
   1b84c:	7b43      	ldrb	r3, [r0, #13]
   1b84e:	0759      	lsls	r1, r3, #29
   1b850:	d404      	bmi.n	1b85c <z_impl_k_thread_start+0x24>
	__asm__ volatile(
   1b852:	f384 8811 	msr	BASEPRI, r4
   1b856:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
   1b85a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b85c:	f023 0304 	bic.w	r3, r3, #4
   1b860:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   1b862:	f002 ff60 	bl	1e726 <z_is_thread_ready>
   1b866:	b110      	cbz	r0, 1b86e <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
   1b868:	4610      	mov	r0, r2
   1b86a:	f7ff fd1f 	bl	1b2ac <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   1b86e:	4621      	mov	r1, r4
}
   1b870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   1b874:	4801      	ldr	r0, [pc, #4]	; (1b87c <z_impl_k_thread_start+0x44>)
   1b876:	f002 be94 	b.w	1e5a2 <z_reschedule>
   1b87a:	bf00      	nop
   1b87c:	2002647c 	.word	0x2002647c

0001b880 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   1b880:	b530      	push	{r4, r5, lr}
   1b882:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b884:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   1b886:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b888:	9504      	str	r5, [sp, #16]
   1b88a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1b88c:	9503      	str	r5, [sp, #12]
   1b88e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1b890:	9502      	str	r5, [sp, #8]
   1b892:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1b894:	9501      	str	r5, [sp, #4]
   1b896:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1b898:	9500      	str	r5, [sp, #0]
   1b89a:	f7f3 fd6f 	bl	f37c <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1b89e:	4b03      	ldr	r3, [pc, #12]	; (1b8ac <z_setup_new_thread+0x2c>)
   1b8a0:	689b      	ldr	r3, [r3, #8]
   1b8a2:	b103      	cbz	r3, 1b8a6 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1b8a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b8a6:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   1b8a8:	b007      	add	sp, #28
   1b8aa:	bd30      	pop	{r4, r5, pc}
   1b8ac:	20024d00 	.word	0x20024d00

0001b8b0 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   1b8b0:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b8b2:	2600      	movs	r6, #0
{
   1b8b4:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b8b6:	9605      	str	r6, [sp, #20]
   1b8b8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
{
   1b8ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b8bc:	9604      	str	r6, [sp, #16]
   1b8be:	9e0d      	ldr	r6, [sp, #52]	; 0x34
{
   1b8c0:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b8c2:	9603      	str	r6, [sp, #12]
   1b8c4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1b8c6:	9602      	str	r6, [sp, #8]
   1b8c8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1b8ca:	9601      	str	r6, [sp, #4]
   1b8cc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1b8ce:	9600      	str	r6, [sp, #0]
   1b8d0:	f7ff ffd6 	bl	1b880 <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
   1b8d4:	1c6b      	adds	r3, r5, #1
   1b8d6:	d003      	beq.n	1b8e0 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
   1b8d8:	b92d      	cbnz	r5, 1b8e6 <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
   1b8da:	4620      	mov	r0, r4
   1b8dc:	f7ff ffac 	bl	1b838 <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   1b8e0:	4620      	mov	r0, r4
   1b8e2:	b006      	add	sp, #24
   1b8e4:	bd70      	pop	{r4, r5, r6, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   1b8e6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1b8ea:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b8ee:	2100      	movs	r1, #0
   1b8f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b8f4:	2300      	movs	r3, #0
   1b8f6:	fbe6 0105 	umlal	r0, r1, r6, r5
   1b8fa:	f7f0 fc91 	bl	c220 <__aeabi_uldivmod>
   1b8fe:	4903      	ldr	r1, [pc, #12]	; (1b90c <z_impl_k_thread_create+0x5c>)
   1b900:	1c42      	adds	r2, r0, #1
   1b902:	f104 0018 	add.w	r0, r4, #24
   1b906:	f000 f913 	bl	1bb30 <z_add_timeout>
   1b90a:	e7e9      	b.n	1b8e0 <z_impl_k_thread_create+0x30>
   1b90c:	0001e62d 	.word	0x0001e62d

0001b910 <z_thread_single_suspend>:
#include <syscalls/k_thread_create_mrsh.c>
#endif /* CONFIG_USERSPACE */
#endif /* CONFIG_MULTITHREADING */

void z_thread_single_suspend(struct k_thread *thread)
{
   1b910:	b510      	push	{r4, lr}
   1b912:	4604      	mov	r4, r0
	if (z_is_thread_ready(thread)) {
   1b914:	f002 ff07 	bl	1e726 <z_is_thread_ready>
   1b918:	b110      	cbz	r0, 1b920 <z_thread_single_suspend+0x10>
		z_remove_thread_from_ready_q(thread);
   1b91a:	4620      	mov	r0, r4
   1b91c:	f7ff fd74 	bl	1b408 <z_remove_thread_from_ready_q>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1b920:	f104 0018 	add.w	r0, r4, #24
   1b924:	f002 ff4d 	bl	1e7c2 <z_abort_timeout>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b928:	7b63      	ldrb	r3, [r4, #13]
   1b92a:	f043 0310 	orr.w	r3, r3, #16
   1b92e:	7363      	strb	r3, [r4, #13]

	(void)z_abort_thread_timeout(thread);

	z_mark_thread_as_suspended(thread);

	if (thread == _current) {
   1b930:	4b08      	ldr	r3, [pc, #32]	; (1b954 <z_thread_single_suspend+0x44>)
   1b932:	689b      	ldr	r3, [r3, #8]
   1b934:	42a3      	cmp	r3, r4
   1b936:	d10b      	bne.n	1b950 <z_thread_single_suspend+0x40>
	__asm__ volatile(
   1b938:	f04f 0320 	mov.w	r3, #32
   1b93c:	f3ef 8011 	mrs	r0, BASEPRI
   1b940:	f383 8811 	msr	BASEPRI, r3
   1b944:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   1b948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1b94c:	f002 be34 	b.w	1e5b8 <z_reschedule_irqlock>
   1b950:	bd10      	pop	{r4, pc}
   1b952:	bf00      	nop
   1b954:	20024d00 	.word	0x20024d00

0001b958 <z_impl_k_thread_suspend>:

void z_impl_k_thread_suspend(struct k_thread *thread)
{
   1b958:	b538      	push	{r3, r4, r5, lr}
   1b95a:	4605      	mov	r5, r0
   1b95c:	f04f 0320 	mov.w	r3, #32
   1b960:	f3ef 8411 	mrs	r4, BASEPRI
   1b964:	f383 8811 	msr	BASEPRI, r3
   1b968:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
   1b96c:	f7ff ffd0 	bl	1b910 <z_thread_single_suspend>

	sys_trace_thread_suspend(thread);

	if (thread == _current) {
   1b970:	4b07      	ldr	r3, [pc, #28]	; (1b990 <z_impl_k_thread_suspend+0x38>)
   1b972:	689b      	ldr	r3, [r3, #8]
   1b974:	42ab      	cmp	r3, r5
   1b976:	d105      	bne.n	1b984 <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
   1b978:	4621      	mov	r1, r4
	} else {
		k_spin_unlock(&lock, key);
	}
}
   1b97a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   1b97e:	4805      	ldr	r0, [pc, #20]	; (1b994 <z_impl_k_thread_suspend+0x3c>)
   1b980:	f002 be0f 	b.w	1e5a2 <z_reschedule>
	__asm__ volatile(
   1b984:	f384 8811 	msr	BASEPRI, r4
   1b988:	f3bf 8f6f 	isb	sy
}
   1b98c:	bd38      	pop	{r3, r4, r5, pc}
   1b98e:	bf00      	nop
   1b990:	20024d00 	.word	0x20024d00
   1b994:	2002647c 	.word	0x2002647c

0001b998 <z_impl_k_thread_resume>:
	z_mark_thread_as_not_suspended(thread);
	z_ready_thread(thread);
}

void z_impl_k_thread_resume(struct k_thread *thread)
{
   1b998:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b99a:	f04f 0320 	mov.w	r3, #32
   1b99e:	f3ef 8411 	mrs	r4, BASEPRI
   1b9a2:	f383 8811 	msr	BASEPRI, r3
   1b9a6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_resume(thread);
   1b9aa:	f002 fedc 	bl	1e766 <z_thread_single_resume>

	sys_trace_thread_resume(thread);
	z_reschedule(&lock, key);
   1b9ae:	4621      	mov	r1, r4
}
   1b9b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   1b9b4:	4801      	ldr	r0, [pc, #4]	; (1b9bc <z_impl_k_thread_resume+0x24>)
   1b9b6:	f002 bdf4 	b.w	1e5a2 <z_reschedule>
   1b9ba:	bf00      	nop
   1b9bc:	2002647c 	.word	0x2002647c

0001b9c0 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1b9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1b9c4:	4e28      	ldr	r6, [pc, #160]	; (1ba68 <z_init_static_threads+0xa8>)
   1b9c6:	4d29      	ldr	r5, [pc, #164]	; (1ba6c <z_init_static_threads+0xac>)
   1b9c8:	46b0      	mov	r8, r6
{
   1b9ca:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1b9cc:	42b5      	cmp	r5, r6
   1b9ce:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1b9d2:	d310      	bcc.n	1b9f6 <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1b9d4:	f7ff fc06 	bl	1b1e4 <k_sched_lock>
   1b9d8:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1b9dc:	f240 36e7 	movw	r6, #999	; 0x3e7
   1b9e0:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   1b9e2:	4c22      	ldr	r4, [pc, #136]	; (1ba6c <z_init_static_threads+0xac>)
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1b9e4:	f8df a088 	ldr.w	sl, [pc, #136]	; 1ba70 <z_init_static_threads+0xb0>
   1b9e8:	4544      	cmp	r4, r8
   1b9ea:	d321      	bcc.n	1ba30 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
   1b9ec:	b007      	add	sp, #28
   1b9ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   1b9f2:	f7ff bc3f 	b.w	1b274 <k_sched_unlock>
		z_setup_new_thread(
   1b9f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1b9fa:	9305      	str	r3, [sp, #20]
   1b9fc:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1ba00:	9304      	str	r3, [sp, #16]
   1ba02:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1ba06:	9303      	str	r3, [sp, #12]
   1ba08:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1ba0c:	9302      	str	r3, [sp, #8]
   1ba0e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1ba12:	9301      	str	r3, [sp, #4]
   1ba14:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1ba18:	9300      	str	r3, [sp, #0]
   1ba1a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1ba1e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1ba22:	f7ff ff2d 	bl	1b880 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1ba26:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1ba2a:	64dd      	str	r5, [r3, #76]	; 0x4c
   1ba2c:	4625      	mov	r5, r4
   1ba2e:	e7cd      	b.n	1b9cc <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   1ba30:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1ba32:	1c4b      	adds	r3, r1, #1
   1ba34:	d004      	beq.n	1ba40 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
   1ba36:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   1ba38:	b921      	cbnz	r1, 1ba44 <z_init_static_threads+0x84>
   1ba3a:	4628      	mov	r0, r5
   1ba3c:	f7ff fefc 	bl	1b838 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1ba40:	3430      	adds	r4, #48	; 0x30
   1ba42:	e7d1      	b.n	1b9e8 <z_init_static_threads+0x28>
   1ba44:	46b3      	mov	fp, r6
   1ba46:	46bc      	mov	ip, r7
   1ba48:	fbe9 bc01 	umlal	fp, ip, r9, r1
   1ba4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ba50:	2300      	movs	r3, #0
   1ba52:	4658      	mov	r0, fp
   1ba54:	4661      	mov	r1, ip
   1ba56:	f7f0 fbe3 	bl	c220 <__aeabi_uldivmod>
   1ba5a:	4651      	mov	r1, sl
   1ba5c:	1c42      	adds	r2, r0, #1
   1ba5e:	f105 0018 	add.w	r0, r5, #24
   1ba62:	f000 f865 	bl	1bb30 <z_add_timeout>
   1ba66:	e7eb      	b.n	1ba40 <z_init_static_threads+0x80>
   1ba68:	2002c538 	.word	0x2002c538
   1ba6c:	2002c538 	.word	0x2002c538
   1ba70:	0001e62d 	.word	0x0001e62d

0001ba74 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1ba74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba78:	4605      	mov	r5, r0
   1ba7a:	b086      	sub	sp, #24
   1ba7c:	460e      	mov	r6, r1
   1ba7e:	4617      	mov	r7, r2
   1ba80:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   1ba82:	f002 fcd8 	bl	1e436 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1ba86:	f105 0410 	add.w	r4, r5, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1ba8a:	2000      	movs	r0, #0
   1ba8c:	4b09      	ldr	r3, [pc, #36]	; (1bab4 <k_work_q_start+0x40>)
   1ba8e:	e9cd 0004 	strd	r0, r0, [sp, #16]
   1ba92:	e9cd 0802 	strd	r0, r8, [sp, #8]
   1ba96:	e9cd 5000 	strd	r5, r0, [sp]
   1ba9a:	463a      	mov	r2, r7
   1ba9c:	4631      	mov	r1, r6
   1ba9e:	4620      	mov	r0, r4
   1baa0:	f7ff ff06 	bl	1b8b0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1baa4:	4620      	mov	r0, r4
   1baa6:	4904      	ldr	r1, [pc, #16]	; (1bab8 <k_work_q_start+0x44>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1baa8:	b006      	add	sp, #24
   1baaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1baae:	f002 be43 	b.w	1e738 <z_impl_k_thread_name_set>
   1bab2:	bf00      	nop
   1bab4:	0001c223 	.word	0x0001c223
   1bab8:	0002087a 	.word	0x0002087a

0001babc <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   1babc:	4b03      	ldr	r3, [pc, #12]	; (1bacc <elapsed+0x10>)
   1babe:	681b      	ldr	r3, [r3, #0]
   1bac0:	b90b      	cbnz	r3, 1bac6 <elapsed+0xa>
   1bac2:	f7f3 bb5b 	b.w	f17c <z_clock_elapsed>
}
   1bac6:	2000      	movs	r0, #0
   1bac8:	4770      	bx	lr
   1baca:	bf00      	nop
   1bacc:	20024e00 	.word	0x20024e00

0001bad0 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bad0:	6803      	ldr	r3, [r0, #0]
   1bad2:	b140      	cbz	r0, 1bae6 <remove_timeout+0x16>
   1bad4:	4a07      	ldr	r2, [pc, #28]	; (1baf4 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   1bad6:	6852      	ldr	r2, [r2, #4]
   1bad8:	4290      	cmp	r0, r2
   1bada:	d004      	beq.n	1bae6 <remove_timeout+0x16>
	if (next(t) != NULL) {
   1badc:	b11b      	cbz	r3, 1bae6 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   1bade:	689a      	ldr	r2, [r3, #8]
   1bae0:	6881      	ldr	r1, [r0, #8]
   1bae2:	440a      	add	r2, r1
   1bae4:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   1bae6:	6842      	ldr	r2, [r0, #4]
   1bae8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1baea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1baec:	2300      	movs	r3, #0
	node->prev = NULL;
   1baee:	e9c0 3300 	strd	r3, r3, [r0]
}
   1baf2:	4770      	bx	lr
   1baf4:	2002c44c 	.word	0x2002c44c

0001baf8 <next_timeout>:
	return list->head == list;
   1baf8:	4b0b      	ldr	r3, [pc, #44]	; (1bb28 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   1bafa:	b510      	push	{r4, lr}
   1bafc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bafe:	429c      	cmp	r4, r3
   1bb00:	bf08      	it	eq
   1bb02:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   1bb04:	f7ff ffda 	bl	1babc <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1bb08:	b154      	cbz	r4, 1bb20 <next_timeout+0x28>
   1bb0a:	68a3      	ldr	r3, [r4, #8]
   1bb0c:	1a18      	subs	r0, r3, r0
   1bb0e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1bb12:	4b06      	ldr	r3, [pc, #24]	; (1bb2c <next_timeout+0x34>)
   1bb14:	691b      	ldr	r3, [r3, #16]
   1bb16:	b113      	cbz	r3, 1bb1e <next_timeout+0x26>
   1bb18:	4298      	cmp	r0, r3
   1bb1a:	bfa8      	it	ge
   1bb1c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1bb1e:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1bb20:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1bb24:	e7f5      	b.n	1bb12 <next_timeout+0x1a>
   1bb26:	bf00      	nop
   1bb28:	2002c44c 	.word	0x2002c44c
   1bb2c:	20024d00 	.word	0x20024d00

0001bb30 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   1bb30:	b570      	push	{r4, r5, r6, lr}
   1bb32:	4604      	mov	r4, r0
   1bb34:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1bb36:	60c1      	str	r1, [r0, #12]
   1bb38:	f04f 0320 	mov.w	r3, #32
   1bb3c:	f3ef 8511 	mrs	r5, BASEPRI
   1bb40:	f383 8811 	msr	BASEPRI, r3
   1bb44:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1bb48:	f7ff ffb8 	bl	1babc <elapsed>
   1bb4c:	2e01      	cmp	r6, #1
   1bb4e:	bfac      	ite	ge
   1bb50:	1980      	addge	r0, r0, r6
   1bb52:	3001      	addlt	r0, #1
	return list->head == list;
   1bb54:	4b16      	ldr	r3, [pc, #88]	; (1bbb0 <z_add_timeout+0x80>)
   1bb56:	60a0      	str	r0, [r4, #8]
   1bb58:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bb5a:	429a      	cmp	r2, r3
   1bb5c:	d001      	beq.n	1bb62 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bb5e:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1bb60:	b932      	cbnz	r2, 1bb70 <z_add_timeout+0x40>
	node->prev = list->tail;
   1bb62:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1bb64:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   1bb66:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   1bb68:	685a      	ldr	r2, [r3, #4]
   1bb6a:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1bb6c:	605c      	str	r4, [r3, #4]
   1bb6e:	e00a      	b.n	1bb86 <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   1bb70:	6890      	ldr	r0, [r2, #8]
   1bb72:	68a1      	ldr	r1, [r4, #8]
   1bb74:	4288      	cmp	r0, r1
   1bb76:	dd15      	ble.n	1bba4 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
   1bb78:	1a41      	subs	r1, r0, r1
   1bb7a:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   1bb7c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1bb7e:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
   1bb82:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1bb84:	6054      	str	r4, [r2, #4]
	return list->head == list;
   1bb86:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bb88:	429a      	cmp	r2, r3
   1bb8a:	d006      	beq.n	1bb9a <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1bb8c:	4294      	cmp	r4, r2
   1bb8e:	d104      	bne.n	1bb9a <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
   1bb90:	f7ff ffb2 	bl	1baf8 <next_timeout>
   1bb94:	2100      	movs	r1, #0
   1bb96:	f7f3 fa9b 	bl	f0d0 <z_clock_set_timeout>
	__asm__ volatile(
   1bb9a:	f385 8811 	msr	BASEPRI, r5
   1bb9e:	f3bf 8f6f 	isb	sy
		}
	}
}
   1bba2:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
   1bba4:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1bba6:	4296      	cmp	r6, r2
   1bba8:	60a1      	str	r1, [r4, #8]
   1bbaa:	d0da      	beq.n	1bb62 <z_add_timeout+0x32>
   1bbac:	6812      	ldr	r2, [r2, #0]
   1bbae:	e7d7      	b.n	1bb60 <z_add_timeout+0x30>
   1bbb0:	2002c44c 	.word	0x2002c44c

0001bbb4 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   1bbb4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   1bbb8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1bbba:	f7ff fbef 	bl	1b39c <z_time_slice>
	__asm__ volatile(
   1bbbe:	f04f 0320 	mov.w	r3, #32
   1bbc2:	f3ef 8511 	mrs	r5, BASEPRI
   1bbc6:	f383 8811 	msr	BASEPRI, r3
   1bbca:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1bbce:	4f21      	ldr	r7, [pc, #132]	; (1bc54 <z_clock_announce+0xa0>)
   1bbd0:	4e21      	ldr	r6, [pc, #132]	; (1bc58 <z_clock_announce+0xa4>)
   1bbd2:	46b8      	mov	r8, r7
	return list->head == list;
   1bbd4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1bc5c <z_clock_announce+0xa8>
   1bbd8:	6034      	str	r4, [r6, #0]
   1bbda:	f8d9 4000 	ldr.w	r4, [r9]
   1bbde:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bbe0:	454c      	cmp	r4, r9
   1bbe2:	e9d7 bc00 	ldrd	fp, ip, [r7]
   1bbe6:	d005      	beq.n	1bbf4 <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1bbe8:	b124      	cbz	r4, 1bbf4 <z_clock_announce+0x40>
   1bbea:	68a3      	ldr	r3, [r4, #8]
   1bbec:	4293      	cmp	r3, r2
   1bbee:	dd14      	ble.n	1bc1a <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1bbf0:	1a9b      	subs	r3, r3, r2
   1bbf2:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1bbf4:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1bbf6:	eb1b 0002 	adds.w	r0, fp, r2
   1bbfa:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   1bbfe:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
   1bc02:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   1bc04:	f7ff ff78 	bl	1baf8 <next_timeout>
   1bc08:	4621      	mov	r1, r4
   1bc0a:	f7f3 fa61 	bl	f0d0 <z_clock_set_timeout>
	__asm__ volatile(
   1bc0e:	f385 8811 	msr	BASEPRI, r5
   1bc12:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1bc16:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   1bc1a:	eb1b 0003 	adds.w	r0, fp, r3
   1bc1e:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   1bc22:	1ad3      	subs	r3, r2, r3
   1bc24:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1bc26:	2300      	movs	r3, #0
		curr_tick += dt;
   1bc28:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   1bc2c:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   1bc2e:	4620      	mov	r0, r4
   1bc30:	f7ff ff4e 	bl	1bad0 <remove_timeout>
   1bc34:	f385 8811 	msr	BASEPRI, r5
   1bc38:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1bc3c:	68e3      	ldr	r3, [r4, #12]
   1bc3e:	4798      	blx	r3
	__asm__ volatile(
   1bc40:	f04f 0320 	mov.w	r3, #32
   1bc44:	f3ef 8511 	mrs	r5, BASEPRI
   1bc48:	f383 8811 	msr	BASEPRI, r3
   1bc4c:	f3bf 8f6f 	isb	sy
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1bc50:	e7c3      	b.n	1bbda <z_clock_announce+0x26>
   1bc52:	bf00      	nop
   1bc54:	200200e0 	.word	0x200200e0
   1bc58:	20024e00 	.word	0x20024e00
   1bc5c:	2002c44c 	.word	0x2002c44c

0001bc60 <z_tick_get>:

s64_t z_tick_get(void)
{
   1bc60:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   1bc64:	f04f 0320 	mov.w	r3, #32
   1bc68:	f3ef 8411 	mrs	r4, BASEPRI
   1bc6c:	f383 8811 	msr	BASEPRI, r3
   1bc70:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1bc74:	f7f3 fa82 	bl	f17c <z_clock_elapsed>
   1bc78:	4b07      	ldr	r3, [pc, #28]	; (1bc98 <z_tick_get+0x38>)
   1bc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bc7e:	eb12 0b00 	adds.w	fp, r2, r0
   1bc82:	f143 0c00 	adc.w	ip, r3, #0
   1bc86:	4658      	mov	r0, fp
   1bc88:	4661      	mov	r1, ip
	__asm__ volatile(
   1bc8a:	f384 8811 	msr	BASEPRI, r4
   1bc8e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1bc92:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   1bc96:	bf00      	nop
   1bc98:	200200e0 	.word	0x200200e0

0001bc9c <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   1bc9c:	6a02      	ldr	r2, [r0, #32]
{
   1bc9e:	b538      	push	{r3, r4, r5, lr}
	if (timer->period > 0) {
   1bca0:	2a00      	cmp	r2, #0
{
   1bca2:	4604      	mov	r4, r0
	if (timer->period > 0) {
   1bca4:	dd02      	ble.n	1bcac <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bca6:	490e      	ldr	r1, [pc, #56]	; (1bce0 <z_timer_expiration_handler+0x44>)
   1bca8:	f7ff ff42 	bl	1bb30 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1bcac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bcae:	3301      	adds	r3, #1
   1bcb0:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1bcb2:	69a3      	ldr	r3, [r4, #24]
   1bcb4:	b10b      	cbz	r3, 1bcba <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
   1bcb6:	4620      	mov	r0, r4
   1bcb8:	4798      	blx	r3
	return list->head == list;
   1bcba:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bcbe:	42a5      	cmp	r5, r4
   1bcc0:	d00d      	beq.n	1bcde <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1bcc2:	b165      	cbz	r5, 1bcde <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1bcc4:	4628      	mov	r0, r5
   1bcc6:	f002 fc53 	bl	1e570 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1bcca:	7b6b      	ldrb	r3, [r5, #13]
   1bccc:	06db      	lsls	r3, r3, #27
   1bcce:	d104      	bne.n	1bcda <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
   1bcd0:	69ab      	ldr	r3, [r5, #24]
   1bcd2:	b913      	cbnz	r3, 1bcda <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
   1bcd4:	4628      	mov	r0, r5
   1bcd6:	f7ff fae9 	bl	1b2ac <z_add_thread_to_ready_q>
   1bcda:	2300      	movs	r3, #0
   1bcdc:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	arch_thread_return_value_set(thread, 0);
}
   1bcde:	bd38      	pop	{r3, r4, r5, pc}
   1bce0:	0001bc9d 	.word	0x0001bc9d

0001bce4 <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   1bce4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1bce8:	f240 36e7 	movw	r6, #999	; 0x3e7
   1bcec:	2700      	movs	r7, #0
   1bcee:	4604      	mov	r4, r0
   1bcf0:	4688      	mov	r8, r1
   1bcf2:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1bcf6:	4630      	mov	r0, r6
   1bcf8:	4639      	mov	r1, r7
   1bcfa:	2300      	movs	r3, #0
   1bcfc:	fbe5 0102 	umlal	r0, r1, r5, r2
   1bd00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bd04:	f7f0 fa8c 	bl	c220 <__aeabi_uldivmod>
   1bd08:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = k_ms_to_ticks_ceil32(period);
   1bd0a:	9000      	str	r0, [sp, #0]
   1bd0c:	4630      	mov	r0, r6
   1bd0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bd12:	2300      	movs	r3, #0
   1bd14:	fbe5 0108 	umlal	r0, r1, r5, r8
   1bd18:	f7f0 fa82 	bl	c220 <__aeabi_uldivmod>
	duration_in_ticks = k_ms_to_ticks_ceil32(duration);
   1bd1c:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
   1bd1e:	4620      	mov	r0, r4
   1bd20:	f002 fd4f 	bl	1e7c2 <z_abort_timeout>
	timer->period = period_in_ticks;
   1bd24:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bd26:	4620      	mov	r0, r4
	timer->period = period_in_ticks;
   1bd28:	6223      	str	r3, [r4, #32]
	timer->status = 0U;
   1bd2a:	2300      	movs	r3, #0
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bd2c:	9a01      	ldr	r2, [sp, #4]
   1bd2e:	4903      	ldr	r1, [pc, #12]	; (1bd3c <z_impl_k_timer_start+0x58>)
	timer->status = 0U;
   1bd30:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
   1bd32:	b002      	add	sp, #8
   1bd34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bd38:	f7ff befa 	b.w	1bb30 <z_add_timeout>
   1bd3c:	0001bc9d 	.word	0x0001bc9d

0001bd40 <k_poll_event_init>:
 */
static struct k_spinlock lock;

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
   1bd40:	b510      	push	{r4, lr}
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
	__ASSERT(obj != NULL, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   1bd42:	7b44      	ldrb	r4, [r0, #13]
   1bd44:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
   1bd48:	7b81      	ldrb	r1, [r0, #14]
	event->type = type;
   1bd4a:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   1bd4c:	f362 0141 	bfi	r1, r2, #1, #1
	event->poller = NULL;
   1bd50:	2200      	movs	r2, #0
	event->mode = mode;
   1bd52:	7381      	strb	r1, [r0, #14]
	event->state = K_POLL_STATE_NOT_READY;
   1bd54:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
   1bd56:	6082      	str	r2, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   1bd58:	4a02      	ldr	r2, [pc, #8]	; (1bd64 <k_poll_event_init+0x24>)
   1bd5a:	400a      	ands	r2, r1
	event->unused = 0U;
	event->obj = obj;
   1bd5c:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   1bd60:	bd10      	pop	{r4, pc}
   1bd62:	bf00      	nop
   1bd64:	00020fff 	.word	0x00020fff

0001bd68 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   1bd68:	2301      	movs	r3, #1
{
   1bd6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd6e:	b086      	sub	sp, #24
	struct _poller poller = { .is_polling = true,
   1bd70:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   1bd74:	4b23      	ldr	r3, [pc, #140]	; (1be04 <z_impl_k_poll+0x9c>)

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events > 0, "zero events\n");

	events_registered = register_events(events, num_events, &poller,
   1bd76:	4690      	mov	r8, r2
	struct _poller poller = { .is_polling = true,
   1bd78:	689b      	ldr	r3, [r3, #8]
{
   1bd7a:	4606      	mov	r6, r0
	struct _poller poller = { .is_polling = true,
   1bd7c:	9304      	str	r3, [sp, #16]
   1bd7e:	4b22      	ldr	r3, [pc, #136]	; (1be08 <z_impl_k_poll+0xa0>)
   1bd80:	9305      	str	r3, [sp, #20]
	events_registered = register_events(events, num_events, &poller,
   1bd82:	fab2 f382 	clz	r3, r2
   1bd86:	aa03      	add	r2, sp, #12
   1bd88:	095b      	lsrs	r3, r3, #5
   1bd8a:	f002 fe37 	bl	1e9fc <register_events>
   1bd8e:	4607      	mov	r7, r0
	__asm__ volatile(
   1bd90:	f04f 0320 	mov.w	r3, #32
   1bd94:	f3ef 8511 	mrs	r5, BASEPRI
   1bd98:	f383 8811 	msr	BASEPRI, r3
   1bd9c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   1bda0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1bda4:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1bda8:	b94b      	cbnz	r3, 1bdbe <z_impl_k_poll+0x56>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   1bdaa:	462a      	mov	r2, r5
   1bdac:	4639      	mov	r1, r7
   1bdae:	4630      	mov	r0, r6
   1bdb0:	f002 fd8c 	bl	1e8cc <clear_event_registrations>
	__asm__ volatile(
   1bdb4:	f385 8811 	msr	BASEPRI, r5
   1bdb8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
   1bdbc:	e00b      	b.n	1bdd6 <z_impl_k_poll+0x6e>
	poller.is_polling = false;
   1bdbe:	2300      	movs	r3, #0
   1bdc0:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   1bdc4:	f1b8 0f00 	cmp.w	r8, #0
   1bdc8:	d109      	bne.n	1bdde <z_impl_k_poll+0x76>
   1bdca:	f385 8811 	msr	BASEPRI, r5
   1bdce:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1bdd2:	f06f 040a 	mvn.w	r4, #10
}
   1bdd6:	4620      	mov	r0, r4
   1bdd8:	b006      	add	sp, #24
   1bdda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1bdde:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1bde0:	4643      	mov	r3, r8
   1bde2:	4629      	mov	r1, r5
   1bde4:	4809      	ldr	r0, [pc, #36]	; (1be0c <z_impl_k_poll+0xa4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1bde6:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1bdea:	f7ff fb9b 	bl	1b524 <z_pend_curr>
   1bdee:	4604      	mov	r4, r0
	__asm__ volatile(
   1bdf0:	f04f 0320 	mov.w	r3, #32
   1bdf4:	f3ef 8511 	mrs	r5, BASEPRI
   1bdf8:	f383 8811 	msr	BASEPRI, r3
   1bdfc:	f3bf 8f6f 	isb	sy
   1be00:	e7d3      	b.n	1bdaa <z_impl_k_poll+0x42>
   1be02:	bf00      	nop
   1be04:	20024d00 	.word	0x20024d00
   1be08:	0001e95d 	.word	0x0001e95d
   1be0c:	2002647c 	.word	0x2002647c

0001be10 <enter_sleep>:

void enter_sleep(u16_t mode)
{
	if (mode == SHUTDOWN_MODEM_ONLY) {
   1be10:	2803      	cmp	r0, #3
{
   1be12:	b508      	push	{r3, lr}
	if (mode == SHUTDOWN_MODEM_ONLY) {
   1be14:	d103      	bne.n	1be1e <enter_sleep+0xe>
	if (mode == SHUTDOWN_APP_MODEM) {
		lte_lc_power_off();
	}
	bsd_shutdown();
	nrf_regulators_system_off(NRF_REGULATORS_NS);
}
   1be16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		lte_lc_power_off();
   1be1a:	f7f6 b9f5 	b.w	12208 <lte_lc_power_off>
	if (mode == SHUTDOWN_APP_MODEM) {
   1be1e:	2801      	cmp	r0, #1
   1be20:	d101      	bne.n	1be26 <enter_sleep+0x16>
		lte_lc_power_off();
   1be22:	f7f6 f9f1 	bl	12208 <lte_lc_power_off>
	bsd_shutdown();
   1be26:	f7f8 fb31 	bl	1448c <bsd_shutdown>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   1be2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1be2e:	2201      	movs	r2, #1
   1be30:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1be34:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   1be38:	bf20      	wfe
   1be3a:	e7fd      	b.n	1be38 <enter_sleep+0x28>

0001be3c <main>:
		enter_sleep(SHUTDOWN_APP_MODEM);
	}
}
#else
void main(void)
{
   1be3c:	b508      	push	{r3, lr}
	start_execute();
   1be3e:	f7f0 fb83 	bl	c548 <start_execute>
	return z_impl_k_sleep(ms);
   1be42:	f242 7010 	movw	r0, #10000	; 0x2710
   1be46:	f7ff fc49 	bl	1b6dc <z_impl_k_sleep>
	k_sleep(K_SECONDS(10));
	while(1)
	{
		send_message();
   1be4a:	f7f1 ff51 	bl	dcf0 <send_message>
	compiler_barrier();
   1be4e:	e7f8      	b.n	1be42 <main+0x6>

0001be50 <uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   1be50:	6843      	ldr	r3, [r0, #4]
   1be52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1be54:	b103      	cbz	r3, 1be58 <uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   1be56:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
}
   1be58:	4770      	bx	lr

0001be5a <slm_at_callback>:
{
   1be5a:	b510      	push	{r4, lr}
   1be5c:	4604      	mov	r4, r0
	write_uart_string(str, strlen(str));
   1be5e:	f001 f8e9 	bl	1d034 <strlen>
   1be62:	4601      	mov	r1, r0
   1be64:	4620      	mov	r0, r4
}
   1be66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	write_uart_string(str, strlen(str));
   1be6a:	f7f0 bba9 	b.w	c5c0 <write_uart_string>

0001be6e <response_handler>:
{
   1be6e:	b510      	push	{r4, lr}
	int len = strlen(response) + 1;
   1be70:	4608      	mov	r0, r1
{
   1be72:	460c      	mov	r4, r1
	int len = strlen(response) + 1;
   1be74:	f001 f8de 	bl	1d034 <strlen>
   1be78:	1c41      	adds	r1, r0, #1
	if (len > 1) {
   1be7a:	2901      	cmp	r1, #1
   1be7c:	dd04      	ble.n	1be88 <response_handler+0x1a>
		write_uart_string(response, len);
   1be7e:	4620      	mov	r0, r4
}
   1be80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		write_uart_string(response, len);
   1be84:	f7f0 bb9c 	b.w	c5c0 <write_uart_string>
}
   1be88:	bd10      	pop	{r4, pc}

0001be8a <z_errno>:
   1be8a:	f7fe bda9 	b.w	1a9e0 <z_impl_z_errno>

0001be8e <k_sleep>:
	return z_impl_k_sleep(ms);
   1be8e:	f7ff bc25 	b.w	1b6dc <z_impl_k_sleep>

0001be92 <slm_at_tcpip_uninit>:
	return do_socket_close(0);
   1be92:	2000      	movs	r0, #0
   1be94:	f7f0 be6c 	b.w	cb70 <do_socket_close>

0001be98 <z_errno>:
   1be98:	f7fe bda2 	b.w	1a9e0 <z_impl_z_errno>

0001be9c <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
   1be9c:	b570      	push	{r4, r5, r6, lr}
   1be9e:	250c      	movs	r5, #12
   1bea0:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   1bea2:	f990 000b 	ldrsb.w	r0, [r0, #11]
   1bea6:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
   1bea8:	4288      	cmp	r0, r1

	*word = &bitarray[bn / 32];
   1beaa:	4610      	mov	r0, r2
   1beac:	eb06 0405 	add.w	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   1beb0:	bfb8      	it	lt
   1beb2:	5974      	ldrlt	r4, [r6, r5]
	*word = &bitarray[bn / 32];
   1beb4:	2a00      	cmp	r2, #0
   1beb6:	bfb8      	it	lt
   1beb8:	f102 001f 	addlt.w	r0, r2, #31
   1bebc:	1140      	asrs	r0, r0, #5
   1bebe:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   1bec2:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
   1bec4:	f002 001f 	and.w	r0, r2, #31
   1bec8:	bd70      	pop	{r4, r5, r6, pc}

0001beca <pool_irq_lock.isra.2.part.3>:
   1beca:	f04f 0320 	mov.w	r3, #32
   1bece:	f3ef 8011 	mrs	r0, BASEPRI
   1bed2:	f383 8811 	msr	BASEPRI, r3
   1bed6:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
   1beda:	4770      	bx	lr

0001bedc <pool_irq_unlock.isra.4>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1bedc:	07c3      	lsls	r3, r0, #31
   1bede:	d503      	bpl.n	1bee8 <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   1bee0:	f381 8811 	msr	BASEPRI, r1
   1bee4:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
   1bee8:	4770      	bx	lr

0001beea <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   1beea:	23ff      	movs	r3, #255	; 0xff
{
   1beec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1bef0:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
   1bef2:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1bef4:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
   1bef6:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
   1bef8:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1befc:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1befe:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1bf00:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
   1bf04:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1bf08:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
   1bf0a:	4598      	cmp	r8, r3
   1bf0c:	dc05      	bgt.n	1bf1a <z_sys_mem_pool_base_init+0x30>
   1bf0e:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   1bf10:	4619      	mov	r1, r3
   1bf12:	428f      	cmp	r7, r1
   1bf14:	dc20      	bgt.n	1bf58 <z_sys_mem_pool_base_init+0x6e>
}
   1bf16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   1bf1a:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   1bf1e:	fb09 fe03 	mul.w	lr, r9, r3
   1bf22:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   1bf26:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
   1bf28:	eb0a 040e 	add.w	r4, sl, lr
   1bf2c:	f104 0b04 	add.w	fp, r4, #4
	list->tail = (sys_dnode_t *)list;
   1bf30:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   1bf34:	d805      	bhi.n	1bf42 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   1bf36:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   1bf38:	0892      	lsrs	r2, r2, #2
   1bf3a:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   1bf3e:	3301      	adds	r3, #1
   1bf40:	e7e3      	b.n	1bf0a <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   1bf42:	f115 041f 	adds.w	r4, r5, #31
   1bf46:	bf48      	it	mi
   1bf48:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   1bf4c:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   1bf4e:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   1bf52:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1bf56:	e7ef      	b.n	1bf38 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   1bf58:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   1bf5a:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   1bf5c:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   1bf60:	18ec      	adds	r4, r5, r3
	node->next = list;
   1bf62:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   1bf66:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   1bf68:	3101      	adds	r1, #1
   1bf6a:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   1bf6c:	6895      	ldr	r5, [r2, #8]
   1bf6e:	4433      	add	r3, r6
   1bf70:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1bf72:	6094      	str	r4, [r2, #8]
   1bf74:	e7cd      	b.n	1bf12 <z_sys_mem_pool_base_init+0x28>

0001bf76 <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
   1bf76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf7a:	b087      	sub	sp, #28
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1bf7c:	7a84      	ldrb	r4, [r0, #10]
{
   1bf7e:	af00      	add	r7, sp, #0
   1bf80:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1bf84:	00a3      	lsls	r3, r4, #2
   1bf86:	3307      	adds	r3, #7
   1bf88:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1bf8c:	ebad 0d03 	sub.w	sp, sp, r3
   1bf90:	46ea      	mov	sl, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
   1bf92:	4653      	mov	r3, sl
   1bf94:	6842      	ldr	r2, [r0, #4]
{
   1bf96:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   1bf98:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   1bf9c:	2200      	movs	r2, #0
   1bf9e:	4294      	cmp	r4, r2
   1bfa0:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   1bfa4:	dd09      	ble.n	1bfba <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   1bfa6:	b122      	cbz	r2, 1bfb2 <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1bfa8:	6818      	ldr	r0, [r3, #0]
   1bfaa:	0880      	lsrs	r0, r0, #2
   1bfac:	f020 0003 	bic.w	r0, r0, #3
   1bfb0:	6058      	str	r0, [r3, #4]
		}

		if (lsizes[i] < size) {
   1bfb2:	f853 0f04 	ldr.w	r0, [r3, #4]!
   1bfb6:	4288      	cmp	r0, r1
   1bfb8:	d208      	bcs.n	1bfcc <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
   1bfba:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   1bfbe:	d107      	bne.n	1bfd0 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   1bfc0:	2300      	movs	r3, #0
   1bfc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1bfc4:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
   1bfc6:	f06f 000b 	mvn.w	r0, #11
   1bfca:	e02c      	b.n	1c026 <z_sys_mem_pool_block_alloc+0xb0>
	for (i = 0; i < p->n_levels; i++) {
   1bfcc:	3201      	adds	r2, #1
   1bfce:	e7e6      	b.n	1bf9e <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1bfd0:	7c28      	ldrb	r0, [r5, #16]
   1bfd2:	f010 0001 	ands.w	r0, r0, #1
   1bfd6:	d001      	beq.n	1bfdc <z_sys_mem_pool_block_alloc+0x66>
   1bfd8:	f7ff ff77 	bl	1beca <pool_irq_lock.isra.2.part.3>
   1bfdc:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
   1bfde:	4680      	mov	r8, r0
	block = sys_dlist_get(&p->levels[l].free_list);
   1bfe0:	464e      	mov	r6, r9
   1bfe2:	68ea      	ldr	r2, [r5, #12]
   1bfe4:	fb03 2309 	mla	r3, r3, r9, r2
	return list->head == list;
   1bfe8:	461a      	mov	r2, r3
   1bfea:	f852 4f04 	ldr.w	r4, [r2, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1bfee:	4294      	cmp	r4, r2
   1bff0:	d11d      	bne.n	1c02e <z_sys_mem_pool_block_alloc+0xb8>
	for (i = alloc_l; i >= 0; i--) {
   1bff2:	3e01      	subs	r6, #1
   1bff4:	1c72      	adds	r2, r6, #1
   1bff6:	f1a3 030c 	sub.w	r3, r3, #12
   1bffa:	d1f5      	bne.n	1bfe8 <z_sys_mem_pool_block_alloc+0x72>
   1bffc:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
   1bffe:	4641      	mov	r1, r8
   1c000:	7c28      	ldrb	r0, [r5, #16]
   1c002:	f7ff ff6b 	bl	1bedc <pool_irq_unlock.isra.4>
	*data_p = data;
   1c006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1c008:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   1c00a:	2c00      	cmp	r4, #0
   1c00c:	d0db      	beq.n	1bfc6 <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
   1c00e:	68bb      	ldr	r3, [r7, #8]
	*block_p = block_num(p, data, lsizes[alloc_l]);

	return 0;
   1c010:	2000      	movs	r0, #0
	*level_p = alloc_l;
   1c012:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c016:	682b      	ldr	r3, [r5, #0]
   1c018:	1ae4      	subs	r4, r4, r3
   1c01a:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   1c01e:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   1c022:	687b      	ldr	r3, [r7, #4]
   1c024:	601c      	str	r4, [r3, #0]
}
   1c026:	371c      	adds	r7, #28
   1c028:	46bd      	mov	sp, r7
   1c02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	node->prev->next = node->next;
   1c02e:	e9d4 3200 	ldrd	r3, r2, [r4]
   1c032:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1c034:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c036:	2300      	movs	r3, #0
	node->prev = NULL;
   1c038:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c03c:	682b      	ldr	r3, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   1c03e:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c042:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   1c044:	f107 0b14 	add.w	fp, r7, #20
   1c048:	fb92 f2f1 	sdiv	r2, r2, r1
   1c04c:	465b      	mov	r3, fp
   1c04e:	4631      	mov	r1, r6
   1c050:	4628      	mov	r0, r5
   1c052:	f7ff ff23 	bl	1be9c <get_bit_ptr>
	*word |= (1<<bit);
   1c056:	2201      	movs	r2, #1
   1c058:	6979      	ldr	r1, [r7, #20]
   1c05a:	fa02 f000 	lsl.w	r0, r2, r0
   1c05e:	680b      	ldr	r3, [r1, #0]
   1c060:	603a      	str	r2, [r7, #0]
   1c062:	4303      	orrs	r3, r0
   1c064:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
   1c066:	454e      	cmp	r6, r9
   1c068:	dac9      	bge.n	1bffe <z_sys_mem_pool_block_alloc+0x88>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c06a:	682a      	ldr	r2, [r5, #0]
   1c06c:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
   1c070:	1aa2      	subs	r2, r4, r2
   1c072:	fb92 f2f3 	sdiv	r2, r2, r3
	set_alloc_bit(p, l + 1, 4*bn);
   1c076:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   1c078:	465b      	mov	r3, fp
   1c07a:	0092      	lsls	r2, r2, #2
   1c07c:	4631      	mov	r1, r6
   1c07e:	4628      	mov	r0, r5
   1c080:	f7ff ff0c 	bl	1be9c <get_bit_ptr>
	*word |= (1<<bit);
   1c084:	697a      	ldr	r2, [r7, #20]
   1c086:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1c088:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   1c08a:	fa03 f000 	lsl.w	r0, r3, r0
   1c08e:	6813      	ldr	r3, [r2, #0]
   1c090:	4303      	orrs	r3, r0
   1c092:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1c094:	230c      	movs	r3, #12
   1c096:	2203      	movs	r2, #3
   1c098:	fb03 1106 	mla	r1, r3, r6, r1
		int lsz = lsizes[l + 1];
   1c09c:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1c0a0:	f101 0e04 	add.w	lr, r1, #4
   1c0a4:	1823      	adds	r3, r4, r0
   1c0a6:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
   1c0a8:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   1c0aa:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   1c0ae:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1c0b0:	688a      	ldr	r2, [r1, #8]
   1c0b2:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   1c0b4:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
   1c0b6:	608b      	str	r3, [r1, #8]
   1c0b8:	3a01      	subs	r2, #1
   1c0ba:	4403      	add	r3, r0
   1c0bc:	60fa      	str	r2, [r7, #12]
   1c0be:	d1f3      	bne.n	1c0a8 <z_sys_mem_pool_block_alloc+0x132>
				pool_irq_unlock(p, key);
   1c0c0:	4641      	mov	r1, r8
   1c0c2:	7c28      	ldrb	r0, [r5, #16]
   1c0c4:	f7ff ff0a 	bl	1bedc <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c0c8:	7c2b      	ldrb	r3, [r5, #16]
   1c0ca:	07db      	lsls	r3, r3, #31
   1c0cc:	d503      	bpl.n	1c0d6 <z_sys_mem_pool_block_alloc+0x160>
   1c0ce:	f7ff fefc 	bl	1beca <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   1c0d2:	4680      	mov	r8, r0
   1c0d4:	e7c7      	b.n	1c066 <z_sys_mem_pool_block_alloc+0xf0>
		return 0;
   1c0d6:	68f8      	ldr	r0, [r7, #12]
   1c0d8:	e7fb      	b.n	1c0d2 <z_sys_mem_pool_block_alloc+0x15c>

0001c0da <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   1c0da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0de:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c0e0:	7a83      	ldrb	r3, [r0, #10]
{
   1c0e2:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c0e4:	009b      	lsls	r3, r3, #2
   1c0e6:	3307      	adds	r3, #7
   1c0e8:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1c0ec:	ebad 0d03 	sub.w	sp, sp, r3
   1c0f0:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   1c0f2:	6843      	ldr	r3, [r0, #4]
{
   1c0f4:	4606      	mov	r6, r0
	lsizes[0] = p->max_sz;
   1c0f6:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
   1c0f8:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
   1c0fa:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
   1c0fe:	4281      	cmp	r1, r0
   1c100:	d215      	bcs.n	1c12e <z_sys_mem_pool_block_free+0x54>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c102:	7c30      	ldrb	r0, [r6, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   1c104:	4688      	mov	r8, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c106:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
   1c10a:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c10c:	d001      	beq.n	1c112 <z_sys_mem_pool_block_free+0x38>
   1c10e:	f7ff fedc 	bl	1beca <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   1c112:	4604      	mov	r4, r0
	while (level >= 0) {
   1c114:	f1b8 0f00 	cmp.w	r8, #0
   1c118:	da11      	bge.n	1c13e <z_sys_mem_pool_block_free+0x64>
	return -1;
   1c11a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
   1c11e:	4621      	mov	r1, r4
   1c120:	7c30      	ldrb	r0, [r6, #16]
   1c122:	f7ff fedb 	bl	1bedc <pool_irq_unlock.isra.4>
}
   1c126:	3714      	adds	r7, #20
   1c128:	46bd      	mov	sp, r7
   1c12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1c12e:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
   1c130:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1c132:	089b      	lsrs	r3, r3, #2
   1c134:	f023 0303 	bic.w	r3, r3, #3
   1c138:	f844 3f04 	str.w	r3, [r4, #4]!
   1c13c:	e7df      	b.n	1c0fe <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   1c13e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   1c142:	462a      	mov	r2, r5
	return (u8_t *)p->buf + lsz * block;
   1c144:	fb03 fa05 	mul.w	sl, r3, r5
		int i, lsz = lsizes[level];
   1c148:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   1c14a:	6833      	ldr	r3, [r6, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1c14c:	4641      	mov	r1, r8
	return (u8_t *)p->buf + lsz * block;
   1c14e:	eb03 090a 	add.w	r9, r3, sl
   1c152:	603b      	str	r3, [r7, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1c154:	4630      	mov	r0, r6
   1c156:	f107 030c 	add.w	r3, r7, #12
   1c15a:	f7ff fe9f 	bl	1be9c <get_bit_ptr>
	*word &= ~(1<<bit);
   1c15e:	2301      	movs	r3, #1
   1c160:	68fa      	ldr	r2, [r7, #12]
   1c162:	fa03 f000 	lsl.w	r0, r3, r0
   1c166:	6813      	ldr	r3, [r2, #0]
	node->next = list;
   1c168:	6839      	ldr	r1, [r7, #0]
   1c16a:	ea23 0300 	bic.w	r3, r3, r0
   1c16e:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   1c170:	220c      	movs	r2, #12
   1c172:	68f3      	ldr	r3, [r6, #12]
   1c174:	fb02 3308 	mla	r3, r2, r8, r3
   1c178:	1d1a      	adds	r2, r3, #4
   1c17a:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
   1c17e:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
   1c180:	4621      	mov	r1, r4
   1c182:	f8c9 2004 	str.w	r2, [r9, #4]
	list->tail->next = node;
   1c186:	689a      	ldr	r2, [r3, #8]
   1c188:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
   1c18c:	f8c3 9008 	str.w	r9, [r3, #8]
   1c190:	7c30      	ldrb	r0, [r6, #16]
   1c192:	f7ff fea3 	bl	1bedc <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c196:	7c30      	ldrb	r0, [r6, #16]
   1c198:	f010 0001 	ands.w	r0, r0, #1
   1c19c:	d001      	beq.n	1c1a2 <z_sys_mem_pool_block_free+0xc8>
   1c19e:	f7ff fe94 	bl	1beca <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   1c1a2:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1c1a4:	f1b8 0f00 	cmp.w	r8, #0
   1c1a8:	d0b9      	beq.n	1c11e <z_sys_mem_pool_block_free+0x44>
	int bit = get_bit_ptr(p, level, bn, &word);
   1c1aa:	f107 030c 	add.w	r3, r7, #12
   1c1ae:	462a      	mov	r2, r5
   1c1b0:	4641      	mov	r1, r8
   1c1b2:	4630      	mov	r0, r6
   1c1b4:	f7ff fe72 	bl	1be9c <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   1c1b8:	68fb      	ldr	r3, [r7, #12]
   1c1ba:	2800      	cmp	r0, #0
   1c1bc:	bfb8      	it	lt
   1c1be:	3003      	addlt	r0, #3
   1c1c0:	681b      	ldr	r3, [r3, #0]
   1c1c2:	f020 0003 	bic.w	r0, r0, #3
   1c1c6:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1c1ca:	f010 000f 	ands.w	r0, r0, #15
   1c1ce:	d1a6      	bne.n	1c11e <z_sys_mem_pool_block_free+0x44>
	node->next = NULL;
   1c1d0:	4684      	mov	ip, r0
			int b = (bn & ~3) + i;
   1c1d2:	f025 0a03 	bic.w	sl, r5, #3
	return (u8_t *)p->buf + lsz * block;
   1c1d6:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
   1c1d8:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
   1c1dc:	4353      	muls	r3, r2
   1c1de:	6832      	ldr	r2, [r6, #0]
		for (i = 0; i < 4; i++) {
   1c1e0:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
   1c1e2:	18d1      	adds	r1, r2, r3
	node->prev->next = node->next;
   1c1e4:	f8d1 9004 	ldr.w	r9, [r1, #4]
   1c1e8:	f852 e003 	ldr.w	lr, [r2, r3]
		for (i = 0; i < 4; i++) {
   1c1ec:	2804      	cmp	r0, #4
   1c1ee:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
   1c1f2:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
   1c1f6:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
   1c1fa:	f8c1 c004 	str.w	ip, [r1, #4]
   1c1fe:	d1ea      	bne.n	1c1d6 <z_sys_mem_pool_block_free+0xfc>
		bn = bn / 4;
   1c200:	2d00      	cmp	r5, #0
   1c202:	bfb8      	it	lt
   1c204:	3503      	addlt	r5, #3
		level = level - 1;
   1c206:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		bn = bn / 4;
   1c20a:	10ad      	asrs	r5, r5, #2
   1c20c:	e782      	b.n	1c114 <z_sys_mem_pool_block_free+0x3a>

0001c20e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1c20e:	4604      	mov	r4, r0
   1c210:	b508      	push	{r3, lr}
   1c212:	4608      	mov	r0, r1
   1c214:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1c216:	461a      	mov	r2, r3
   1c218:	47a0      	blx	r4
	return z_impl_k_current_get();
   1c21a:	f7ff fa87 	bl	1b72c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1c21e:	f7f3 fcd7 	bl	fbd0 <z_impl_k_thread_abort>

0001c222 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1c222:	b510      	push	{r4, lr}
   1c224:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1c226:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c22a:	4620      	mov	r0, r4
   1c22c:	f002 f910 	bl	1e450 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1c230:	4603      	mov	r3, r0
   1c232:	2800      	cmp	r0, #0
   1c234:	d0f7      	beq.n	1c226 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   1c236:	6842      	ldr	r2, [r0, #4]
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c238:	3308      	adds	r3, #8
   1c23a:	e8d3 1fef 	ldaex	r1, [r3]
   1c23e:	f021 0c01 	bic.w	ip, r1, #1
   1c242:	e8c3 cfee 	stlex	lr, ip, [r3]
   1c246:	f1be 0f00 	cmp.w	lr, #0
   1c24a:	d1f6      	bne.n	1c23a <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1c24c:	07cb      	lsls	r3, r1, #31
   1c24e:	d500      	bpl.n	1c252 <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1c250:	4790      	blx	r2
	z_impl_k_yield();
   1c252:	f7ff f9f7 	bl	1b644 <z_impl_k_yield>
   1c256:	e7e6      	b.n	1c226 <z_work_q_main+0x4>

0001c258 <arch_printk_char_out>:
}
   1c258:	2000      	movs	r0, #0
   1c25a:	4770      	bx	lr

0001c25c <print_err>:
{
   1c25c:	b570      	push	{r4, r5, r6, lr}
   1c25e:	460d      	mov	r5, r1
   1c260:	4604      	mov	r4, r0
	out('E', ctx);
   1c262:	2045      	movs	r0, #69	; 0x45
   1c264:	47a0      	blx	r4
	out('R', ctx);
   1c266:	4629      	mov	r1, r5
   1c268:	2052      	movs	r0, #82	; 0x52
   1c26a:	47a0      	blx	r4
	out('R', ctx);
   1c26c:	4629      	mov	r1, r5
   1c26e:	4623      	mov	r3, r4
}
   1c270:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   1c274:	2052      	movs	r0, #82	; 0x52
   1c276:	4718      	bx	r3

0001c278 <z_vprintk>:
{
   1c278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   1c27c:	f04f 0800 	mov.w	r8, #0
{
   1c280:	4606      	mov	r6, r0
   1c282:	460f      	mov	r7, r1
	int min_width = -1;
   1c284:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   1c288:	46c1      	mov	r9, r8
{
   1c28a:	b08b      	sub	sp, #44	; 0x2c
   1c28c:	461c      	mov	r4, r3
	while (*fmt) {
   1c28e:	1e53      	subs	r3, r2, #1
   1c290:	9302      	str	r3, [sp, #8]
			might_format = 0;
   1c292:	2500      	movs	r5, #0
					break;
   1c294:	e005      	b.n	1c2a2 <z_vprintk+0x2a>
		if (!might_format) {
   1c296:	b96d      	cbnz	r5, 1c2b4 <z_vprintk+0x3c>
			if (*fmt != '%') {
   1c298:	2825      	cmp	r0, #37	; 0x25
   1c29a:	f000 814f 	beq.w	1c53c <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   1c29e:	4639      	mov	r1, r7
   1c2a0:	47b0      	blx	r6
	while (*fmt) {
   1c2a2:	9b02      	ldr	r3, [sp, #8]
   1c2a4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1c2a8:	9302      	str	r3, [sp, #8]
   1c2aa:	2800      	cmp	r0, #0
   1c2ac:	d1f3      	bne.n	1c296 <z_vprintk+0x1e>
}
   1c2ae:	b00b      	add	sp, #44	; 0x2c
   1c2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   1c2b4:	2864      	cmp	r0, #100	; 0x64
   1c2b6:	d06e      	beq.n	1c396 <z_vprintk+0x11e>
   1c2b8:	d81a      	bhi.n	1c2f0 <z_vprintk+0x78>
   1c2ba:	2839      	cmp	r0, #57	; 0x39
   1c2bc:	d80a      	bhi.n	1c2d4 <z_vprintk+0x5c>
   1c2be:	2831      	cmp	r0, #49	; 0x31
   1c2c0:	d260      	bcs.n	1c384 <z_vprintk+0x10c>
   1c2c2:	282d      	cmp	r0, #45	; 0x2d
   1c2c4:	f000 8140 	beq.w	1c548 <z_vprintk+0x2d0>
   1c2c8:	2830      	cmp	r0, #48	; 0x30
   1c2ca:	d04c      	beq.n	1c366 <z_vprintk+0xee>
   1c2cc:	2825      	cmp	r0, #37	; 0x25
   1c2ce:	d107      	bne.n	1c2e0 <z_vprintk+0x68>
				out((int)'%', ctx);
   1c2d0:	4639      	mov	r1, r7
   1c2d2:	e00b      	b.n	1c2ec <z_vprintk+0x74>
			switch (*fmt) {
   1c2d4:	2858      	cmp	r0, #88	; 0x58
   1c2d6:	f000 80bb 	beq.w	1c450 <z_vprintk+0x1d8>
   1c2da:	2863      	cmp	r0, #99	; 0x63
   1c2dc:	f000 812a 	beq.w	1c534 <z_vprintk+0x2bc>
					out((int)'%', ctx);
   1c2e0:	4639      	mov	r1, r7
   1c2e2:	2025      	movs	r0, #37	; 0x25
   1c2e4:	47b0      	blx	r6
					out((int)*fmt, ctx);
   1c2e6:	4639      	mov	r1, r7
   1c2e8:	9b02      	ldr	r3, [sp, #8]
   1c2ea:	7818      	ldrb	r0, [r3, #0]
   1c2ec:	47b0      	blx	r6
   1c2ee:	e7d0      	b.n	1c292 <z_vprintk+0x1a>
			switch (*fmt) {
   1c2f0:	2870      	cmp	r0, #112	; 0x70
   1c2f2:	f000 80a3 	beq.w	1c43c <z_vprintk+0x1c4>
   1c2f6:	d811      	bhi.n	1c31c <z_vprintk+0xa4>
   1c2f8:	2869      	cmp	r0, #105	; 0x69
   1c2fa:	d04c      	beq.n	1c396 <z_vprintk+0x11e>
   1c2fc:	286c      	cmp	r0, #108	; 0x6c
   1c2fe:	d105      	bne.n	1c30c <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
   1c300:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1c304:	d12a      	bne.n	1c35c <z_vprintk+0xe4>
					length_mod = 'L';
   1c306:	f04f 084c 	mov.w	r8, #76	; 0x4c
   1c30a:	e7ca      	b.n	1c2a2 <z_vprintk+0x2a>
			switch (*fmt) {
   1c30c:	2868      	cmp	r0, #104	; 0x68
   1c30e:	d1e7      	bne.n	1c2e0 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   1c310:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   1c314:	d122      	bne.n	1c35c <z_vprintk+0xe4>
					length_mod = 'H';
   1c316:	f04f 0848 	mov.w	r8, #72	; 0x48
   1c31a:	e7c2      	b.n	1c2a2 <z_vprintk+0x2a>
			switch (*fmt) {
   1c31c:	2875      	cmp	r0, #117	; 0x75
   1c31e:	d071      	beq.n	1c404 <z_vprintk+0x18c>
   1c320:	d818      	bhi.n	1c354 <z_vprintk+0xdc>
   1c322:	2873      	cmp	r0, #115	; 0x73
   1c324:	d1dc      	bne.n	1c2e0 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   1c326:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   1c32a:	46ab      	mov	fp, r5
   1c32c:	465b      	mov	r3, fp
   1c32e:	f81b 0b01 	ldrb.w	r0, [fp], #1
   1c332:	2800      	cmp	r0, #0
   1c334:	f040 80fb 	bne.w	1c52e <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
   1c338:	f1b9 0f03 	cmp.w	r9, #3
   1c33c:	f040 810a 	bne.w	1c554 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   1c340:	1b5d      	subs	r5, r3, r5
   1c342:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   1c346:	2d00      	cmp	r5, #0
   1c348:	dda3      	ble.n	1c292 <z_vprintk+0x1a>
						out(' ', ctx);
   1c34a:	4639      	mov	r1, r7
   1c34c:	2020      	movs	r0, #32
   1c34e:	47b0      	blx	r6
   1c350:	3d01      	subs	r5, #1
   1c352:	e7f8      	b.n	1c346 <z_vprintk+0xce>
			switch (*fmt) {
   1c354:	2878      	cmp	r0, #120	; 0x78
   1c356:	d07b      	beq.n	1c450 <z_vprintk+0x1d8>
   1c358:	287a      	cmp	r0, #122	; 0x7a
   1c35a:	d1c1      	bne.n	1c2e0 <z_vprintk+0x68>
				} else if (length_mod == 0) {
   1c35c:	f1b8 0f00 	cmp.w	r8, #0
   1c360:	d1be      	bne.n	1c2e0 <z_vprintk+0x68>
   1c362:	4680      	mov	r8, r0
   1c364:	e79d      	b.n	1c2a2 <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
   1c366:	f1ba 0f00 	cmp.w	sl, #0
   1c36a:	da0e      	bge.n	1c38a <z_vprintk+0x112>
   1c36c:	f1b9 0f00 	cmp.w	r9, #0
   1c370:	f000 80ed 	beq.w	1c54e <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   1c374:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   1c378:	f1b9 0f00 	cmp.w	r9, #0
   1c37c:	bf08      	it	eq
   1c37e:	f04f 0902 	moveq.w	r9, #2
   1c382:	e78e      	b.n	1c2a2 <z_vprintk+0x2a>
				if (min_width < 0) {
   1c384:	f1ba 0f00 	cmp.w	sl, #0
   1c388:	dbf4      	blt.n	1c374 <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
   1c38a:	230a      	movs	r3, #10
   1c38c:	fb03 0a0a 	mla	sl, r3, sl, r0
   1c390:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   1c394:	e7f0      	b.n	1c378 <z_vprintk+0x100>
				if (length_mod == 'z') {
   1c396:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   1c39a:	d102      	bne.n	1c3a2 <z_vprintk+0x12a>
					d = va_arg(ap, int);
   1c39c:	f854 5b04 	ldr.w	r5, [r4], #4
   1c3a0:	e01f      	b.n	1c3e2 <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
   1c3a2:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1c3a6:	d0f9      	beq.n	1c39c <z_vprintk+0x124>
				} else if (length_mod == 'L') {
   1c3a8:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1c3ac:	d1f6      	bne.n	1c39c <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
   1c3ae:	3407      	adds	r4, #7
   1c3b0:	f024 0407 	bic.w	r4, r4, #7
   1c3b4:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   1c3b8:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   1c3bc:	9106      	str	r1, [sp, #24]
   1c3be:	f143 0100 	adc.w	r1, r3, #0
   1c3c2:	9107      	str	r1, [sp, #28]
   1c3c4:	2100      	movs	r1, #0
   1c3c6:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   1c3ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c3ce:	4561      	cmp	r1, ip
   1c3d0:	bf08      	it	eq
   1c3d2:	4558      	cmpeq	r0, fp
   1c3d4:	d204      	bcs.n	1c3e0 <z_vprintk+0x168>
						print_err(out, ctx);
   1c3d6:	4639      	mov	r1, r7
   1c3d8:	4630      	mov	r0, r6
   1c3da:	f7ff ff3f 	bl	1c25c <print_err>
						break;
   1c3de:	e758      	b.n	1c292 <z_vprintk+0x1a>
					d = lld;
   1c3e0:	4615      	mov	r5, r2
				if (d < 0) {
   1c3e2:	2d00      	cmp	r5, #0
   1c3e4:	da05      	bge.n	1c3f2 <z_vprintk+0x17a>
					out((int)'-', ctx);
   1c3e6:	4639      	mov	r1, r7
   1c3e8:	202d      	movs	r0, #45	; 0x2d
   1c3ea:	47b0      	blx	r6
					d = -d;
   1c3ec:	426d      	negs	r5, r5
					min_width--;
   1c3ee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   1c3f2:	464b      	mov	r3, r9
   1c3f4:	462a      	mov	r2, r5
   1c3f6:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   1c3fa:	4639      	mov	r1, r7
   1c3fc:	4630      	mov	r0, r6
   1c3fe:	f7f2 f89b 	bl	e538 <_printk_dec_ulong>
				break;
   1c402:	e746      	b.n	1c292 <z_vprintk+0x1a>
				if (length_mod == 'z') {
   1c404:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   1c408:	d102      	bne.n	1c410 <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
   1c40a:	f854 2b04 	ldr.w	r2, [r4], #4
   1c40e:	e011      	b.n	1c434 <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
   1c410:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1c414:	d0f9      	beq.n	1c40a <z_vprintk+0x192>
				} else if (length_mod == 'L') {
   1c416:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1c41a:	d1f6      	bne.n	1c40a <z_vprintk+0x192>
					if (llu > ~0UL) {
   1c41c:	2100      	movs	r1, #0
   1c41e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
   1c422:	3407      	adds	r4, #7
   1c424:	f024 0407 	bic.w	r4, r4, #7
   1c428:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   1c42c:	4299      	cmp	r1, r3
   1c42e:	bf08      	it	eq
   1c430:	4290      	cmpeq	r0, r2
   1c432:	d3d0      	bcc.n	1c3d6 <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
   1c434:	f8cd a000 	str.w	sl, [sp]
   1c438:	464b      	mov	r3, r9
   1c43a:	e7de      	b.n	1c3fa <z_vprintk+0x182>
				out('0', ctx);
   1c43c:	4639      	mov	r1, r7
   1c43e:	2030      	movs	r0, #48	; 0x30
   1c440:	47b0      	blx	r6
				out('x', ctx);
   1c442:	4639      	mov	r1, r7
   1c444:	2078      	movs	r0, #120	; 0x78
   1c446:	47b0      	blx	r6
					min_width = 8;
   1c448:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   1c44c:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   1c450:	9b02      	ldr	r3, [sp, #8]
   1c452:	781b      	ldrb	r3, [r3, #0]
   1c454:	2b70      	cmp	r3, #112	; 0x70
   1c456:	d104      	bne.n	1c462 <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
   1c458:	f854 3b04 	ldr.w	r3, [r4], #4
   1c45c:	9304      	str	r3, [sp, #16]
   1c45e:	2300      	movs	r3, #0
   1c460:	e00d      	b.n	1c47e <z_vprintk+0x206>
				} else if (length_mod == 'l') {
   1c462:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1c466:	d0f7      	beq.n	1c458 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
   1c468:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1c46c:	d1f4      	bne.n	1c458 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
   1c46e:	3407      	adds	r4, #7
   1c470:	f024 0307 	bic.w	r3, r4, #7
   1c474:	461c      	mov	r4, r3
   1c476:	f854 2b08 	ldr.w	r2, [r4], #8
   1c47a:	685b      	ldr	r3, [r3, #4]
   1c47c:	9204      	str	r2, [sp, #16]
	int digits = 0;
   1c47e:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   1c480:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
   1c482:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
   1c486:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   1c488:	9105      	str	r1, [sp, #20]
		shift -= 4;
   1c48a:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   1c48e:	9804      	ldr	r0, [sp, #16]
   1c490:	f1cb 0c20 	rsb	ip, fp, #32
   1c494:	f1ab 0120 	sub.w	r1, fp, #32
   1c498:	fa20 f00b 	lsr.w	r0, r0, fp
   1c49c:	fa03 fc0c 	lsl.w	ip, r3, ip
   1c4a0:	ea40 000c 	orr.w	r0, r0, ip
   1c4a4:	fa23 f101 	lsr.w	r1, r3, r1
   1c4a8:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   1c4aa:	f010 000f 	ands.w	r0, r0, #15
   1c4ae:	d106      	bne.n	1c4be <z_vprintk+0x246>
   1c4b0:	9905      	ldr	r1, [sp, #20]
   1c4b2:	b911      	cbnz	r1, 1c4ba <z_vprintk+0x242>
   1c4b4:	f1bb 0f00 	cmp.w	fp, #0
   1c4b8:	d122      	bne.n	1c500 <z_vprintk+0x288>
			nibble += nibble > 9 ? 87 : 48;
   1c4ba:	2130      	movs	r1, #48	; 0x30
   1c4bc:	e003      	b.n	1c4c6 <z_vprintk+0x24e>
   1c4be:	2809      	cmp	r0, #9
   1c4c0:	bf8c      	ite	hi
   1c4c2:	2157      	movhi	r1, #87	; 0x57
   1c4c4:	2130      	movls	r1, #48	; 0x30
   1c4c6:	4408      	add	r0, r1
			out((int)nibble, ctx);
   1c4c8:	b240      	sxtb	r0, r0
   1c4ca:	4639      	mov	r1, r7
   1c4cc:	9308      	str	r3, [sp, #32]
   1c4ce:	9205      	str	r2, [sp, #20]
   1c4d0:	47b0      	blx	r6
			digits++;
   1c4d2:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   1c4d4:	9a05      	ldr	r2, [sp, #20]
			digits++;
   1c4d6:	3301      	adds	r3, #1
   1c4d8:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   1c4da:	9b08      	ldr	r3, [sp, #32]
   1c4dc:	f1bb 0f00 	cmp.w	fp, #0
   1c4e0:	d123      	bne.n	1c52a <z_vprintk+0x2b2>
	if (padding == PAD_SPACE_AFTER) {
   1c4e2:	f1b9 0f03 	cmp.w	r9, #3
   1c4e6:	f47f aed4 	bne.w	1c292 <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
   1c4ea:	9b03      	ldr	r3, [sp, #12]
   1c4ec:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   1c4f0:	2d00      	cmp	r5, #0
   1c4f2:	f77f aece 	ble.w	1c292 <z_vprintk+0x1a>
			out(' ', ctx);
   1c4f6:	4639      	mov	r1, r7
   1c4f8:	2020      	movs	r0, #32
   1c4fa:	47b0      	blx	r6
   1c4fc:	3d01      	subs	r5, #1
   1c4fe:	e7f7      	b.n	1c4f0 <z_vprintk+0x278>
		if (remaining-- <= min_width) {
   1c500:	1e51      	subs	r1, r2, #1
   1c502:	4592      	cmp	sl, r2
   1c504:	9108      	str	r1, [sp, #32]
   1c506:	db07      	blt.n	1c518 <z_vprintk+0x2a0>
			if (padding == PAD_ZERO_BEFORE) {
   1c508:	f1b9 0f01 	cmp.w	r9, #1
   1c50c:	d106      	bne.n	1c51c <z_vprintk+0x2a4>
				out('0', ctx);
   1c50e:	4639      	mov	r1, r7
   1c510:	2030      	movs	r0, #48	; 0x30
   1c512:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   1c514:	47b0      	blx	r6
   1c516:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
   1c518:	9a08      	ldr	r2, [sp, #32]
   1c51a:	e7b6      	b.n	1c48a <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
   1c51c:	f1b9 0f02 	cmp.w	r9, #2
   1c520:	d1fa      	bne.n	1c518 <z_vprintk+0x2a0>
   1c522:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   1c524:	4639      	mov	r1, r7
   1c526:	2020      	movs	r0, #32
   1c528:	e7f4      	b.n	1c514 <z_vprintk+0x29c>
			found_largest_digit = 1;
   1c52a:	9505      	str	r5, [sp, #20]
   1c52c:	e7ad      	b.n	1c48a <z_vprintk+0x212>
					out((int)(*s++), ctx);
   1c52e:	4639      	mov	r1, r7
   1c530:	47b0      	blx	r6
   1c532:	e6fb      	b.n	1c32c <z_vprintk+0xb4>
				out(c, ctx);
   1c534:	4639      	mov	r1, r7
   1c536:	f854 0b04 	ldr.w	r0, [r4], #4
   1c53a:	e6d7      	b.n	1c2ec <z_vprintk+0x74>
				length_mod = 0;
   1c53c:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   1c53e:	46a9      	mov	r9, r5
				min_width = -1;
   1c540:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
   1c544:	2501      	movs	r5, #1
   1c546:	e6ac      	b.n	1c2a2 <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
   1c548:	f04f 0903 	mov.w	r9, #3
   1c54c:	e6a9      	b.n	1c2a2 <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
   1c54e:	f04f 0901 	mov.w	r9, #1
   1c552:	e6a6      	b.n	1c2a2 <z_vprintk+0x2a>
			might_format = 0;
   1c554:	4605      	mov	r5, r0
		++fmt;
   1c556:	e6a4      	b.n	1c2a2 <z_vprintk+0x2a>

0001c558 <printk>:
{
   1c558:	b40f      	push	{r0, r1, r2, r3}
   1c55a:	b507      	push	{r0, r1, r2, lr}
   1c55c:	a904      	add	r1, sp, #16
   1c55e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1c562:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1c564:	f7f2 f83a 	bl	e5dc <vprintk>
}
   1c568:	b003      	add	sp, #12
   1c56a:	f85d eb04 	ldr.w	lr, [sp], #4
   1c56e:	b004      	add	sp, #16
   1c570:	4770      	bx	lr

0001c572 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_SLM_CR_LF_TERMINATION, 1);
GEN_ABSOLUTE_SYM(CONFIG_SLM_AT_HOST_TERMINATION, 3);
GEN_ABSOLUTE_SYM(CONFIG_SLM_LOG_LEVEL_INF, 1);
GEN_ABSOLUTE_SYM(CONFIG_SLM_LOG_LEVEL, 3);

GEN_ABS_SYM_END
   1c572:	4770      	bx	lr

0001c574 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   1c574:	f7fe b908 	b.w	1a788 <SystemInit>

0001c578 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1c578:	2300      	movs	r3, #0
	list->head = NULL;
   1c57a:	e9c0 3300 	strd	r3, r3, [r0]
}
   1c57e:	4770      	bx	lr

0001c580 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1c580:	6803      	ldr	r3, [r0, #0]
   1c582:	b923      	cbnz	r3, 1c58e <log_list_add_tail+0xe>
		list->head = msg;
   1c584:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1c586:	2300      	movs	r3, #0
	list->tail = msg;
   1c588:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1c58a:	600b      	str	r3, [r1, #0]
}
   1c58c:	4770      	bx	lr
		list->tail->next = msg;
   1c58e:	6843      	ldr	r3, [r0, #4]
   1c590:	6019      	str	r1, [r3, #0]
   1c592:	e7f8      	b.n	1c586 <log_list_add_tail+0x6>

0001c594 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1c594:	6800      	ldr	r0, [r0, #0]
   1c596:	4770      	bx	lr

0001c598 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   1c598:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   1c59a:	b10b      	cbz	r3, 1c5a0 <log_list_head_get+0x8>
		list->head = list->head->next;
   1c59c:	681a      	ldr	r2, [r3, #0]
   1c59e:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   1c5a0:	4618      	mov	r0, r3
   1c5a2:	4770      	bx	lr

0001c5a4 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1c5a4:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1c5a6:	f7f2 fa6f 	bl	ea88 <log_msg_chunk_alloc>

	if (msg != NULL) {
   1c5aa:	b118      	cbz	r0, 1c5b4 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1c5ac:	2301      	movs	r3, #1
   1c5ae:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1c5b0:	2300      	movs	r3, #0
   1c5b2:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   1c5b4:	bd08      	pop	{r3, pc}

0001c5b6 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   1c5b6:	f7f2 bdfb 	b.w	f1b0 <z_timer_cycle_get_32>

0001c5ba <dummy_timestamp>:
   1c5ba:	2000      	movs	r0, #0
   1c5bc:	4770      	bx	lr

0001c5be <log_0>:
{
   1c5be:	b538      	push	{r3, r4, r5, lr}
   1c5c0:	4605      	mov	r5, r0
   1c5c2:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1c5c4:	f7ff ffee 	bl	1c5a4 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c5c8:	b128      	cbz	r0, 1c5d6 <log_0+0x18>
		msg->str = str;
   1c5ca:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1c5cc:	4621      	mov	r1, r4
}
   1c5ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1c5d2:	f7f2 b8e9 	b.w	e7a8 <msg_finalize>
}
   1c5d6:	bd38      	pop	{r3, r4, r5, pc}

0001c5d8 <log_1>:
{
   1c5d8:	b570      	push	{r4, r5, r6, lr}
   1c5da:	4604      	mov	r4, r0
   1c5dc:	460e      	mov	r6, r1
   1c5de:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1c5e0:	f7ff ffe0 	bl	1c5a4 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c5e4:	b158      	cbz	r0, 1c5fe <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1c5e6:	2201      	movs	r2, #1
		msg->str = str;
   1c5e8:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1c5ea:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1c5ec:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   1c5ee:	f362 1407 	bfi	r4, r2, #4, #4
   1c5f2:	7244      	strb	r4, [r0, #9]
		msg_finalize(msg, src_level);
   1c5f4:	4629      	mov	r1, r5
}
   1c5f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1c5fa:	f7f2 b8d5 	b.w	e7a8 <msg_finalize>
}
   1c5fe:	bd70      	pop	{r4, r5, r6, pc}

0001c600 <log_2>:
{
   1c600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c604:	4605      	mov	r5, r0
   1c606:	4688      	mov	r8, r1
   1c608:	4617      	mov	r7, r2
   1c60a:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1c60c:	f7ff ffca 	bl	1c5a4 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c610:	b160      	cbz	r0, 1c62c <log_2+0x2c>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1c612:	2302      	movs	r3, #2
		msg->str = str;
   1c614:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1c616:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1c618:	e9c0 8705 	strd	r8, r7, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   1c61c:	f363 1507 	bfi	r5, r3, #4, #4
   1c620:	7245      	strb	r5, [r0, #9]
		msg_finalize(msg, src_level);
   1c622:	4631      	mov	r1, r6
}
   1c624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1c628:	f7f2 b8be 	b.w	e7a8 <msg_finalize>
}
   1c62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c630 <log_3>:
{
   1c630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c634:	4605      	mov	r5, r0
   1c636:	4689      	mov	r9, r1
   1c638:	4690      	mov	r8, r2
   1c63a:	461f      	mov	r7, r3
   1c63c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1c640:	f7ff ffb0 	bl	1c5a4 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c644:	b168      	cbz	r0, 1c662 <log_3+0x32>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1c646:	2303      	movs	r3, #3
		msg->str = str;
   1c648:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1c64a:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1c64c:	e9c0 9805 	strd	r9, r8, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   1c650:	f363 1507 	bfi	r5, r3, #4, #4
   1c654:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[2] = arg3;
   1c656:	61c7      	str	r7, [r0, #28]
		msg_finalize(msg, src_level);
   1c658:	4631      	mov	r1, r6
}
   1c65a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1c65e:	f7f2 b8a3 	b.w	e7a8 <msg_finalize>
}
   1c662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c666 <log_n>:
{
   1c666:	b510      	push	{r4, lr}
   1c668:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1c66a:	f000 f893 	bl	1c794 <log_msg_create_n>
		if (msg == NULL) {
   1c66e:	b120      	cbz	r0, 1c67a <log_n+0x14>
		msg_finalize(msg, src_level);
   1c670:	4621      	mov	r1, r4
}
   1c672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1c676:	f7f2 b897 	b.w	e7a8 <msg_finalize>
}
   1c67a:	bd10      	pop	{r4, pc}

0001c67c <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1c67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c680:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
   1c682:	8903      	ldrh	r3, [r0, #8]
{
   1c684:	460e      	mov	r6, r1
	u32_t available_len = msg->hdr.params.hexdump.length;
   1c686:	089b      	lsrs	r3, r3, #2
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
   1c688:	42a3      	cmp	r3, r4
{
   1c68a:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   1c68e:	d803      	bhi.n	1c698 <log_msg_hexdump_data_op+0x1c>
		*length = 0;
   1c690:	2300      	movs	r3, #0
   1c692:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1c694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1c698:	6811      	ldr	r1, [r2, #0]
   1c69a:	4421      	add	r1, r4
   1c69c:	4299      	cmp	r1, r3
		*length = available_len - offset;
   1c69e:	bf84      	itt	hi
   1c6a0:	1b19      	subhi	r1, r3, r4
   1c6a2:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1c6a4:	2b0c      	cmp	r3, #12
	req_len = *length;
   1c6a6:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1c6aa:	d928      	bls.n	1c6fe <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
   1c6ac:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1c6ae:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   1c6b2:	d82b      	bhi.n	1c70c <log_msg_hexdump_data_op+0x90>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1c6b4:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   1c6b6:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1c6b8:	454b      	cmp	r3, r9
   1c6ba:	bf28      	it	cs
   1c6bc:	464b      	movcs	r3, r9
   1c6be:	4420      	add	r0, r4
   1c6c0:	461d      	mov	r5, r3
			(void)memcpy(&head_data[offset], data, cpy_len);
   1c6c2:	461a      	mov	r2, r3
		if (put_op) {
   1c6c4:	b1ff      	cbz	r7, 1c706 <log_msg_hexdump_data_op+0x8a>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1c6c6:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   1c6c8:	f000 fcef 	bl	1d0aa <memcpy>
		req_len -= cpy_len;
   1c6cc:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1c6d0:	442e      	add	r6, r5
	while (req_len > 0) {
   1c6d2:	f1b9 0f00 	cmp.w	r9, #0
   1c6d6:	d0dd      	beq.n	1c694 <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1c6d8:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1c6dc:	454d      	cmp	r5, r9
   1c6de:	bf28      	it	cs
   1c6e0:	464d      	movcs	r5, r9
		if (put_op) {
   1c6e2:	1d20      	adds	r0, r4, #4
   1c6e4:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
   1c6e6:	462a      	mov	r2, r5
		if (put_op) {
   1c6e8:	b1bf      	cbz	r7, 1c71a <log_msg_hexdump_data_op+0x9e>
			(void)memcpy(&cont->payload.bytes[offset],
   1c6ea:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   1c6ec:	f000 fcdd 	bl	1d0aa <memcpy>
		req_len -= cpy_len;
   1c6f0:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1c6f4:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   1c6f8:	442e      	add	r6, r5
		offset = 0;
   1c6fa:	2400      	movs	r4, #0
   1c6fc:	e7e9      	b.n	1c6d2 <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
   1c6fe:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1c700:	f04f 0800 	mov.w	r8, #0
   1c704:	e7d8      	b.n	1c6b8 <log_msg_hexdump_data_op+0x3c>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1c706:	4601      	mov	r1, r0
   1c708:	4630      	mov	r0, r6
   1c70a:	e7dd      	b.n	1c6c8 <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
   1c70c:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1c70e:	2c1b      	cmp	r4, #27
   1c710:	d9df      	bls.n	1c6d2 <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
   1c712:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   1c716:	3c1c      	subs	r4, #28
   1c718:	e7f9      	b.n	1c70e <log_msg_hexdump_data_op+0x92>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1c71a:	4601      	mov	r1, r0
   1c71c:	4630      	mov	r0, r6
   1c71e:	e7e5      	b.n	1c6ec <log_msg_hexdump_data_op+0x70>

0001c720 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1c720:	3004      	adds	r0, #4
   1c722:	e8d0 3fef 	ldaex	r3, [r0]
   1c726:	3301      	adds	r3, #1
   1c728:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1c72c:	2a00      	cmp	r2, #0
   1c72e:	d1f8      	bne.n	1c722 <log_msg_get+0x2>
}
   1c730:	4770      	bx	lr

0001c732 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1c732:	7a40      	ldrb	r0, [r0, #9]
}
   1c734:	0900      	lsrs	r0, r0, #4
   1c736:	4770      	bx	lr

0001c738 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1c738:	7a43      	ldrb	r3, [r0, #9]
   1c73a:	091b      	lsrs	r3, r3, #4
   1c73c:	428b      	cmp	r3, r1
   1c73e:	d916      	bls.n	1c76e <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1c740:	2b03      	cmp	r3, #3
   1c742:	d803      	bhi.n	1c74c <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
   1c744:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1c748:	6948      	ldr	r0, [r1, #20]
   1c74a:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1c74c:	2901      	cmp	r1, #1
   1c74e:	d803      	bhi.n	1c758 <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
   1c750:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1c754:	6988      	ldr	r0, [r1, #24]
   1c756:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1c758:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1c75a:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1c75c:	2906      	cmp	r1, #6
   1c75e:	d803      	bhi.n	1c768 <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
   1c760:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1c764:	6848      	ldr	r0, [r1, #4]
   1c766:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
   1c768:	3907      	subs	r1, #7
		cont = cont->next;
   1c76a:	681b      	ldr	r3, [r3, #0]
   1c76c:	e7f6      	b.n	1c75c <log_msg_arg_get+0x24>
		return 0;
   1c76e:	2000      	movs	r0, #0
}
   1c770:	4770      	bx	lr

0001c772 <log_msg_put>:
{
   1c772:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1c774:	1d02      	adds	r2, r0, #4
   1c776:	e8d2 1fef 	ldaex	r1, [r2]
   1c77a:	3901      	subs	r1, #1
   1c77c:	e8c2 1fec 	stlex	ip, r1, [r2]
   1c780:	f1bc 0f00 	cmp.w	ip, #0
   1c784:	d1f7      	bne.n	1c776 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   1c786:	685b      	ldr	r3, [r3, #4]
   1c788:	b90b      	cbnz	r3, 1c78e <log_msg_put+0x1c>
		msg_free(msg);
   1c78a:	f7f2 b98f 	b.w	eaac <msg_free>
}
   1c78e:	4770      	bx	lr

0001c790 <log_msg_str_get>:
}
   1c790:	6900      	ldr	r0, [r0, #16]
   1c792:	4770      	bx	lr

0001c794 <log_msg_create_n>:
{
   1c794:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c798:	4682      	mov	sl, r0
   1c79a:	4688      	mov	r8, r1
   1c79c:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1c79e:	f7f2 f973 	bl	ea88 <log_msg_chunk_alloc>
	if (msg != NULL) {
   1c7a2:	4604      	mov	r4, r0
   1c7a4:	b330      	cbz	r0, 1c7f4 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1c7a6:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1c7a8:	2600      	movs	r6, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1c7aa:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1c7ac:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1c7ae:	8106      	strh	r6, [r0, #8]
   1c7b0:	d909      	bls.n	1c7c6 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1c7b2:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1c7b4:	f1a5 0902 	sub.w	r9, r5, #2
	msg->hdr.params.generic.ext = 1;
   1c7b8:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   1c7ba:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1c7be:	6146      	str	r6, [r0, #20]
	while (n > 0) {
   1c7c0:	f1b9 0f00 	cmp.w	r9, #0
   1c7c4:	dc0e      	bgt.n	1c7e4 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   1c7c6:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1c7c8:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1c7ca:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   1c7ce:	f8c4 a010 	str.w	sl, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1c7d2:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1c7d4:	d818      	bhi.n	1c808 <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1c7d6:	00aa      	lsls	r2, r5, #2
   1c7d8:	4641      	mov	r1, r8
   1c7da:	f104 0014 	add.w	r0, r4, #20
   1c7de:	f000 fc64 	bl	1d0aa <memcpy>
		nargs  = 0U;
   1c7e2:	e007      	b.n	1c7f4 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1c7e4:	f7f2 f950 	bl	ea88 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1c7e8:	4607      	mov	r7, r0
   1c7ea:	b930      	cbnz	r0, 1c7fa <log_msg_create_n+0x66>
			msg_free(msg);
   1c7ec:	4620      	mov	r0, r4
   1c7ee:	f7f2 f95d 	bl	eaac <msg_free>
			return NULL;
   1c7f2:	463c      	mov	r4, r7
}
   1c7f4:	4620      	mov	r0, r4
   1c7f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1c7fa:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1c7fe:	f1a9 0907 	sub.w	r9, r9, #7
   1c802:	6006      	str	r6, [r0, #0]
		next = &cont->next;
   1c804:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1c806:	e7db      	b.n	1c7c0 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1c808:	4641      	mov	r1, r8
   1c80a:	2208      	movs	r2, #8
   1c80c:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1c810:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1c812:	f000 fc4a 	bl	1d0aa <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1c816:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1c818:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1c81c:	2d07      	cmp	r5, #7
   1c81e:	462e      	mov	r6, r5
   1c820:	bf28      	it	cs
   1c822:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1c824:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1c828:	4641      	mov	r1, r8
   1c82a:	1d38      	adds	r0, r7, #4
   1c82c:	464a      	mov	r2, r9
   1c82e:	f000 fc3c 	bl	1d0aa <memcpy>
	while (nargs != 0U) {
   1c832:	1bad      	subs	r5, r5, r6
		args += cpy_args;
   1c834:	44c8      	add	r8, r9
		cont = cont->next;
   1c836:	683f      	ldr	r7, [r7, #0]
	while (nargs != 0U) {
   1c838:	d1f0      	bne.n	1c81c <log_msg_create_n+0x88>
   1c83a:	e7db      	b.n	1c7f4 <log_msg_create_n+0x60>

0001c83c <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
   1c83c:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1c83e:	2400      	movs	r4, #0
   1c840:	9400      	str	r4, [sp, #0]
   1c842:	f7ff ff1b 	bl	1c67c <log_msg_hexdump_data_op>
}
   1c846:	b002      	add	sp, #8
   1c848:	bd10      	pop	{r4, pc}

0001c84a <buffer_write>:
{
   1c84a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c84c:	4606      	mov	r6, r0
   1c84e:	460d      	mov	r5, r1
   1c850:	4614      	mov	r4, r2
   1c852:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1c854:	4621      	mov	r1, r4
   1c856:	4628      	mov	r0, r5
   1c858:	463a      	mov	r2, r7
   1c85a:	47b0      	blx	r6
	} while (len != 0);
   1c85c:	1a24      	subs	r4, r4, r0
		buf += processed;
   1c85e:	4405      	add	r5, r0
	} while (len != 0);
   1c860:	d1f8      	bne.n	1c854 <buffer_write+0xa>
}
   1c862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c864 <std_print>:
{
   1c864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c868:	b08e      	sub	sp, #56	; 0x38
   1c86a:	af0e      	add	r7, sp, #56	; 0x38
   1c86c:	4681      	mov	r9, r0
   1c86e:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1c870:	f7ff ff8e 	bl	1c790 <log_msg_str_get>
   1c874:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
   1c876:	4648      	mov	r0, r9
   1c878:	f7ff ff5b 	bl	1c732 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   1c87c:	f04f 0800 	mov.w	r8, #0
	u32_t nargs = log_msg_nargs_get(msg);
   1c880:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   1c882:	0083      	lsls	r3, r0, #2
   1c884:	3307      	adds	r3, #7
   1c886:	f023 0307 	bic.w	r3, r3, #7
   1c88a:	ebad 0d03 	sub.w	sp, sp, r3
   1c88e:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1c890:	45d0      	cmp	r8, sl
   1c892:	d116      	bne.n	1c8c2 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1c894:	4648      	mov	r0, r9
   1c896:	f7ff ff4c 	bl	1c732 <log_msg_nargs_get>
   1c89a:	280f      	cmp	r0, #15
   1c89c:	d81e      	bhi.n	1c8dc <std_print+0x78>
   1c89e:	e8df f010 	tbh	[pc, r0, lsl #1]
   1c8a2:	0019      	.short	0x0019
   1c8a4:	00260020 	.word	0x00260020
   1c8a8:	0036002d 	.word	0x0036002d
   1c8ac:	004e0041 	.word	0x004e0041
   1c8b0:	006e005d 	.word	0x006e005d
   1c8b4:	00960081 	.word	0x00960081
   1c8b8:	00c600ad 	.word	0x00c600ad
   1c8bc:	00fe00e1 	.word	0x00fe00e1
   1c8c0:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   1c8c2:	4641      	mov	r1, r8
   1c8c4:	4648      	mov	r0, r9
   1c8c6:	f7ff ff37 	bl	1c738 <log_msg_arg_get>
   1c8ca:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	for (i = 0; i < nargs; i++) {
   1c8ce:	f108 0801 	add.w	r8, r8, #1
   1c8d2:	e7dd      	b.n	1c890 <std_print+0x2c>
		print_formatted(log_output, str);
   1c8d4:	4631      	mov	r1, r6
   1c8d6:	4628      	mov	r0, r5
   1c8d8:	f7f2 f91a 	bl	eb10 <print_formatted>
}
   1c8dc:	46bd      	mov	sp, r7
   1c8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   1c8e2:	6822      	ldr	r2, [r4, #0]
   1c8e4:	4631      	mov	r1, r6
   1c8e6:	4628      	mov	r0, r5
   1c8e8:	f7f2 f912 	bl	eb10 <print_formatted>
		break;
   1c8ec:	e7f6      	b.n	1c8dc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   1c8ee:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c8f2:	4631      	mov	r1, r6
   1c8f4:	4628      	mov	r0, r5
   1c8f6:	f7f2 f90b 	bl	eb10 <print_formatted>
		break;
   1c8fa:	e7ef      	b.n	1c8dc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   1c8fc:	68a3      	ldr	r3, [r4, #8]
   1c8fe:	4631      	mov	r1, r6
   1c900:	9300      	str	r3, [sp, #0]
   1c902:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c906:	4628      	mov	r0, r5
   1c908:	f7f2 f902 	bl	eb10 <print_formatted>
		break;
   1c90c:	e7e6      	b.n	1c8dc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c90e:	68e3      	ldr	r3, [r4, #12]
   1c910:	4631      	mov	r1, r6
   1c912:	9301      	str	r3, [sp, #4]
   1c914:	68a3      	ldr	r3, [r4, #8]
   1c916:	4628      	mov	r0, r5
   1c918:	9300      	str	r3, [sp, #0]
   1c91a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c91e:	f7f2 f8f7 	bl	eb10 <print_formatted>
		break;
   1c922:	e7db      	b.n	1c8dc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c924:	6923      	ldr	r3, [r4, #16]
   1c926:	4631      	mov	r1, r6
   1c928:	9302      	str	r3, [sp, #8]
   1c92a:	68e3      	ldr	r3, [r4, #12]
   1c92c:	4628      	mov	r0, r5
   1c92e:	9301      	str	r3, [sp, #4]
   1c930:	68a3      	ldr	r3, [r4, #8]
   1c932:	9300      	str	r3, [sp, #0]
   1c934:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c938:	f7f2 f8ea 	bl	eb10 <print_formatted>
		break;
   1c93c:	e7ce      	b.n	1c8dc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c93e:	6963      	ldr	r3, [r4, #20]
   1c940:	4631      	mov	r1, r6
   1c942:	9303      	str	r3, [sp, #12]
   1c944:	6923      	ldr	r3, [r4, #16]
   1c946:	4628      	mov	r0, r5
   1c948:	9302      	str	r3, [sp, #8]
   1c94a:	68e3      	ldr	r3, [r4, #12]
   1c94c:	9301      	str	r3, [sp, #4]
   1c94e:	68a3      	ldr	r3, [r4, #8]
   1c950:	9300      	str	r3, [sp, #0]
   1c952:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c956:	f7f2 f8db 	bl	eb10 <print_formatted>
		break;
   1c95a:	e7bf      	b.n	1c8dc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c95c:	69a3      	ldr	r3, [r4, #24]
   1c95e:	4631      	mov	r1, r6
   1c960:	9304      	str	r3, [sp, #16]
   1c962:	6963      	ldr	r3, [r4, #20]
   1c964:	4628      	mov	r0, r5
   1c966:	9303      	str	r3, [sp, #12]
   1c968:	6923      	ldr	r3, [r4, #16]
   1c96a:	9302      	str	r3, [sp, #8]
   1c96c:	68e3      	ldr	r3, [r4, #12]
   1c96e:	9301      	str	r3, [sp, #4]
   1c970:	68a3      	ldr	r3, [r4, #8]
   1c972:	9300      	str	r3, [sp, #0]
   1c974:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c978:	f7f2 f8ca 	bl	eb10 <print_formatted>
		break;
   1c97c:	e7ae      	b.n	1c8dc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c97e:	69e3      	ldr	r3, [r4, #28]
   1c980:	4631      	mov	r1, r6
   1c982:	9305      	str	r3, [sp, #20]
   1c984:	69a3      	ldr	r3, [r4, #24]
   1c986:	4628      	mov	r0, r5
   1c988:	9304      	str	r3, [sp, #16]
   1c98a:	6963      	ldr	r3, [r4, #20]
   1c98c:	9303      	str	r3, [sp, #12]
   1c98e:	6923      	ldr	r3, [r4, #16]
   1c990:	9302      	str	r3, [sp, #8]
   1c992:	68e3      	ldr	r3, [r4, #12]
   1c994:	9301      	str	r3, [sp, #4]
   1c996:	68a3      	ldr	r3, [r4, #8]
   1c998:	9300      	str	r3, [sp, #0]
   1c99a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c99e:	f7f2 f8b7 	bl	eb10 <print_formatted>
		break;
   1c9a2:	e79b      	b.n	1c8dc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c9a4:	6a23      	ldr	r3, [r4, #32]
   1c9a6:	4631      	mov	r1, r6
   1c9a8:	9306      	str	r3, [sp, #24]
   1c9aa:	69e3      	ldr	r3, [r4, #28]
   1c9ac:	4628      	mov	r0, r5
   1c9ae:	9305      	str	r3, [sp, #20]
   1c9b0:	69a3      	ldr	r3, [r4, #24]
   1c9b2:	9304      	str	r3, [sp, #16]
   1c9b4:	6963      	ldr	r3, [r4, #20]
   1c9b6:	9303      	str	r3, [sp, #12]
   1c9b8:	6923      	ldr	r3, [r4, #16]
   1c9ba:	9302      	str	r3, [sp, #8]
   1c9bc:	68e3      	ldr	r3, [r4, #12]
   1c9be:	9301      	str	r3, [sp, #4]
   1c9c0:	68a3      	ldr	r3, [r4, #8]
   1c9c2:	9300      	str	r3, [sp, #0]
   1c9c4:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c9c8:	f7f2 f8a2 	bl	eb10 <print_formatted>
		break;
   1c9cc:	e786      	b.n	1c8dc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c9ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c9d0:	4631      	mov	r1, r6
   1c9d2:	9307      	str	r3, [sp, #28]
   1c9d4:	6a23      	ldr	r3, [r4, #32]
   1c9d6:	4628      	mov	r0, r5
   1c9d8:	9306      	str	r3, [sp, #24]
   1c9da:	69e3      	ldr	r3, [r4, #28]
   1c9dc:	9305      	str	r3, [sp, #20]
   1c9de:	69a3      	ldr	r3, [r4, #24]
   1c9e0:	9304      	str	r3, [sp, #16]
   1c9e2:	6963      	ldr	r3, [r4, #20]
   1c9e4:	9303      	str	r3, [sp, #12]
   1c9e6:	6923      	ldr	r3, [r4, #16]
   1c9e8:	9302      	str	r3, [sp, #8]
   1c9ea:	68e3      	ldr	r3, [r4, #12]
   1c9ec:	9301      	str	r3, [sp, #4]
   1c9ee:	68a3      	ldr	r3, [r4, #8]
   1c9f0:	9300      	str	r3, [sp, #0]
   1c9f2:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c9f6:	f7f2 f88b 	bl	eb10 <print_formatted>
		break;
   1c9fa:	e76f      	b.n	1c8dc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c9fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c9fe:	4631      	mov	r1, r6
   1ca00:	9308      	str	r3, [sp, #32]
   1ca02:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ca04:	4628      	mov	r0, r5
   1ca06:	9307      	str	r3, [sp, #28]
   1ca08:	6a23      	ldr	r3, [r4, #32]
   1ca0a:	9306      	str	r3, [sp, #24]
   1ca0c:	69e3      	ldr	r3, [r4, #28]
   1ca0e:	9305      	str	r3, [sp, #20]
   1ca10:	69a3      	ldr	r3, [r4, #24]
   1ca12:	9304      	str	r3, [sp, #16]
   1ca14:	6963      	ldr	r3, [r4, #20]
   1ca16:	9303      	str	r3, [sp, #12]
   1ca18:	6923      	ldr	r3, [r4, #16]
   1ca1a:	9302      	str	r3, [sp, #8]
   1ca1c:	68e3      	ldr	r3, [r4, #12]
   1ca1e:	9301      	str	r3, [sp, #4]
   1ca20:	68a3      	ldr	r3, [r4, #8]
   1ca22:	9300      	str	r3, [sp, #0]
   1ca24:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ca28:	f7f2 f872 	bl	eb10 <print_formatted>
		break;
   1ca2c:	e756      	b.n	1c8dc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1ca2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ca30:	4631      	mov	r1, r6
   1ca32:	9309      	str	r3, [sp, #36]	; 0x24
   1ca34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1ca36:	4628      	mov	r0, r5
   1ca38:	9308      	str	r3, [sp, #32]
   1ca3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ca3c:	9307      	str	r3, [sp, #28]
   1ca3e:	6a23      	ldr	r3, [r4, #32]
   1ca40:	9306      	str	r3, [sp, #24]
   1ca42:	69e3      	ldr	r3, [r4, #28]
   1ca44:	9305      	str	r3, [sp, #20]
   1ca46:	69a3      	ldr	r3, [r4, #24]
   1ca48:	9304      	str	r3, [sp, #16]
   1ca4a:	6963      	ldr	r3, [r4, #20]
   1ca4c:	9303      	str	r3, [sp, #12]
   1ca4e:	6923      	ldr	r3, [r4, #16]
   1ca50:	9302      	str	r3, [sp, #8]
   1ca52:	68e3      	ldr	r3, [r4, #12]
   1ca54:	9301      	str	r3, [sp, #4]
   1ca56:	68a3      	ldr	r3, [r4, #8]
   1ca58:	9300      	str	r3, [sp, #0]
   1ca5a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ca5e:	f7f2 f857 	bl	eb10 <print_formatted>
		break;
   1ca62:	e73b      	b.n	1c8dc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1ca64:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1ca66:	4631      	mov	r1, r6
   1ca68:	930a      	str	r3, [sp, #40]	; 0x28
   1ca6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ca6c:	4628      	mov	r0, r5
   1ca6e:	9309      	str	r3, [sp, #36]	; 0x24
   1ca70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1ca72:	9308      	str	r3, [sp, #32]
   1ca74:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ca76:	9307      	str	r3, [sp, #28]
   1ca78:	6a23      	ldr	r3, [r4, #32]
   1ca7a:	9306      	str	r3, [sp, #24]
   1ca7c:	69e3      	ldr	r3, [r4, #28]
   1ca7e:	9305      	str	r3, [sp, #20]
   1ca80:	69a3      	ldr	r3, [r4, #24]
   1ca82:	9304      	str	r3, [sp, #16]
   1ca84:	6963      	ldr	r3, [r4, #20]
   1ca86:	9303      	str	r3, [sp, #12]
   1ca88:	6923      	ldr	r3, [r4, #16]
   1ca8a:	9302      	str	r3, [sp, #8]
   1ca8c:	68e3      	ldr	r3, [r4, #12]
   1ca8e:	9301      	str	r3, [sp, #4]
   1ca90:	68a3      	ldr	r3, [r4, #8]
   1ca92:	9300      	str	r3, [sp, #0]
   1ca94:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ca98:	f7f2 f83a 	bl	eb10 <print_formatted>
		break;
   1ca9c:	e71e      	b.n	1c8dc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1ca9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1caa0:	4631      	mov	r1, r6
   1caa2:	930b      	str	r3, [sp, #44]	; 0x2c
   1caa4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1caa6:	4628      	mov	r0, r5
   1caa8:	930a      	str	r3, [sp, #40]	; 0x28
   1caaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1caac:	9309      	str	r3, [sp, #36]	; 0x24
   1caae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cab0:	9308      	str	r3, [sp, #32]
   1cab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cab4:	9307      	str	r3, [sp, #28]
   1cab6:	6a23      	ldr	r3, [r4, #32]
   1cab8:	9306      	str	r3, [sp, #24]
   1caba:	69e3      	ldr	r3, [r4, #28]
   1cabc:	9305      	str	r3, [sp, #20]
   1cabe:	69a3      	ldr	r3, [r4, #24]
   1cac0:	9304      	str	r3, [sp, #16]
   1cac2:	6963      	ldr	r3, [r4, #20]
   1cac4:	9303      	str	r3, [sp, #12]
   1cac6:	6923      	ldr	r3, [r4, #16]
   1cac8:	9302      	str	r3, [sp, #8]
   1caca:	68e3      	ldr	r3, [r4, #12]
   1cacc:	9301      	str	r3, [sp, #4]
   1cace:	68a3      	ldr	r3, [r4, #8]
   1cad0:	9300      	str	r3, [sp, #0]
   1cad2:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cad6:	f7f2 f81b 	bl	eb10 <print_formatted>
		break;
   1cada:	e6ff      	b.n	1c8dc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cadc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1cade:	4631      	mov	r1, r6
   1cae0:	930c      	str	r3, [sp, #48]	; 0x30
   1cae2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1cae4:	4628      	mov	r0, r5
   1cae6:	930b      	str	r3, [sp, #44]	; 0x2c
   1cae8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1caea:	930a      	str	r3, [sp, #40]	; 0x28
   1caec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1caee:	9309      	str	r3, [sp, #36]	; 0x24
   1caf0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1caf2:	9308      	str	r3, [sp, #32]
   1caf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1caf6:	9307      	str	r3, [sp, #28]
   1caf8:	6a23      	ldr	r3, [r4, #32]
   1cafa:	9306      	str	r3, [sp, #24]
   1cafc:	69e3      	ldr	r3, [r4, #28]
   1cafe:	9305      	str	r3, [sp, #20]
   1cb00:	69a3      	ldr	r3, [r4, #24]
   1cb02:	9304      	str	r3, [sp, #16]
   1cb04:	6963      	ldr	r3, [r4, #20]
   1cb06:	9303      	str	r3, [sp, #12]
   1cb08:	6923      	ldr	r3, [r4, #16]
   1cb0a:	9302      	str	r3, [sp, #8]
   1cb0c:	68e3      	ldr	r3, [r4, #12]
   1cb0e:	9301      	str	r3, [sp, #4]
   1cb10:	68a3      	ldr	r3, [r4, #8]
   1cb12:	9300      	str	r3, [sp, #0]
   1cb14:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cb18:	f7f1 fffa 	bl	eb10 <print_formatted>
}
   1cb1c:	e6de      	b.n	1c8dc <std_print+0x78>

0001cb1e <log_output_flush>:
		     log_output->control_block->offset,
   1cb1e:	6842      	ldr	r2, [r0, #4]
{
   1cb20:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   1cb22:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   1cb26:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   1cb28:	6881      	ldr	r1, [r0, #8]
   1cb2a:	6800      	ldr	r0, [r0, #0]
   1cb2c:	f7ff fe8d 	bl	1c84a <buffer_write>
	log_output->control_block->offset = 0;
   1cb30:	2200      	movs	r2, #0
   1cb32:	6863      	ldr	r3, [r4, #4]
   1cb34:	601a      	str	r2, [r3, #0]
}
   1cb36:	bd10      	pop	{r4, pc}

0001cb38 <out_func>:
{
   1cb38:	b508      	push	{r3, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
   1cb3a:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   1cb3e:	681b      	ldr	r3, [r3, #0]
   1cb40:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
   1cb42:	684a      	ldr	r2, [r1, #4]
   1cb44:	6813      	ldr	r3, [r2, #0]
   1cb46:	3301      	adds	r3, #1
   1cb48:	6013      	str	r3, [r2, #0]
	if (out_ctx->control_block->offset == out_ctx->size) {
   1cb4a:	68ca      	ldr	r2, [r1, #12]
   1cb4c:	4293      	cmp	r3, r2
   1cb4e:	d102      	bne.n	1cb56 <out_func+0x1e>
		log_output_flush(out_ctx);
   1cb50:	4608      	mov	r0, r1
   1cb52:	f7ff ffe4 	bl	1cb1e <log_output_flush>
}
   1cb56:	2000      	movs	r0, #0
   1cb58:	bd08      	pop	{r3, pc}

0001cb5a <char_out>:
{
   1cb5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cb5c:	460d      	mov	r5, r1
   1cb5e:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
   1cb60:	4604      	mov	r4, r0
   1cb62:	1847      	adds	r7, r0, r1
   1cb64:	42bc      	cmp	r4, r7
   1cb66:	d101      	bne.n	1cb6c <char_out+0x12>
}
   1cb68:	4628      	mov	r0, r5
   1cb6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   1cb6c:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   1cb70:	6873      	ldr	r3, [r6, #4]
   1cb72:	4630      	mov	r0, r6
   1cb74:	685b      	ldr	r3, [r3, #4]
   1cb76:	4798      	blx	r3
   1cb78:	e7f4      	b.n	1cb64 <char_out+0xa>

0001cb7a <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
   1cb7a:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
   1cb7c:	7a5a      	ldrb	r2, [r3, #9]
   1cb7e:	b932      	cbnz	r2, 1cb8e <get_status+0x14>
	if (data->ref > 0) {
   1cb80:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
   1cb84:	2800      	cmp	r0, #0
   1cb86:	bfcc      	ite	gt
   1cb88:	2000      	movgt	r0, #0
   1cb8a:	2001      	movle	r0, #1
   1cb8c:	4770      	bx	lr
   1cb8e:	2002      	movs	r0, #2
}
   1cb90:	4770      	bx	lr

0001cb92 <clock_stop>:
	const struct nrf_clock_control_config *config =
   1cb92:	6802      	ldr	r2, [r0, #0]
{
   1cb94:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
   1cb96:	6896      	ldr	r6, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
   1cb98:	6884      	ldr	r4, [r0, #8]
	__asm__ volatile(
   1cb9a:	f04f 0320 	mov.w	r3, #32
   1cb9e:	f3ef 8511 	mrs	r5, BASEPRI
   1cba2:	f383 8811 	msr	BASEPRI, r3
   1cba6:	f3bf 8f6f 	isb	sy
	data->ref--;
   1cbaa:	7a23      	ldrb	r3, [r4, #8]
   1cbac:	3b01      	subs	r3, #1
   1cbae:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
   1cbb0:	2b00      	cmp	r3, #0
	data->ref--;
   1cbb2:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
   1cbb4:	d11c      	bne.n	1cbf0 <clock_stop+0x5e>
	list->tail = NULL;
   1cbb6:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
   1cbba:	6873      	ldr	r3, [r6, #4]
				config->stop_handler(dev) : true;
   1cbbc:	b9a3      	cbnz	r3, 1cbe8 <clock_stop+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cbbe:	2201      	movs	r2, #1
   1cbc0:	7af3      	ldrb	r3, [r6, #11]
   1cbc2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cbc6:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1cbca:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cbcc:	2200      	movs	r2, #0
   1cbce:	8933      	ldrh	r3, [r6, #8]
   1cbd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cbd4:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1cbd8:	601a      	str	r2, [r3, #0]
		data->started = false;
   1cbda:	2000      	movs	r0, #0
   1cbdc:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   1cbde:	f385 8811 	msr	BASEPRI, r5
   1cbe2:	f3bf 8f6f 	isb	sy
}
   1cbe6:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
   1cbe8:	4798      	blx	r3
   1cbea:	2800      	cmp	r0, #0
   1cbec:	d1e7      	bne.n	1cbbe <clock_stop+0x2c>
   1cbee:	e7f4      	b.n	1cbda <clock_stop+0x48>
	} else if (data->ref < 0) {
   1cbf0:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
   1cbf4:	bfbc      	itt	lt
   1cbf6:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
   1cbf8:	f06f 0044 	mvnlt.w	r0, #68	; 0x44
   1cbfc:	e7ef      	b.n	1cbde <clock_stop+0x4c>

0001cbfe <clock_async_start>:
{
   1cbfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
   1cc00:	6803      	ldr	r3, [r0, #0]
{
   1cc02:	4606      	mov	r6, r0
   1cc04:	4614      	mov	r4, r2
	const struct nrf_clock_control_config *config =
   1cc06:	689f      	ldr	r7, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
   1cc08:	6885      	ldr	r5, [r0, #8]
	__asm__ volatile(
   1cc0a:	f04f 0320 	mov.w	r3, #32
   1cc0e:	f3ef 8211 	mrs	r2, BASEPRI
   1cc12:	f383 8811 	msr	BASEPRI, r3
   1cc16:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   1cc1a:	7a2b      	ldrb	r3, [r5, #8]
   1cc1c:	3301      	adds	r3, #1
   1cc1e:	b25b      	sxtb	r3, r3
   1cc20:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
   1cc22:	f382 8811 	msr	BASEPRI, r2
   1cc26:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
   1cc2a:	7a6a      	ldrb	r2, [r5, #9]
   1cc2c:	b132      	cbz	r2, 1cc3c <clock_async_start+0x3e>
		if (data) {
   1cc2e:	b90c      	cbnz	r4, 1cc34 <clock_async_start+0x36>
	return 0;
   1cc30:	2000      	movs	r0, #0
}
   1cc32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
   1cc34:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1cc38:	4798      	blx	r3
   1cc3a:	e7f9      	b.n	1cc30 <clock_async_start+0x32>
		if (ref == 1) {
   1cc3c:	2b01      	cmp	r3, #1
   1cc3e:	d108      	bne.n	1cc52 <clock_async_start+0x54>
			do_start =  (config->start_handler) ?
   1cc40:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
   1cc42:	b943      	cbnz	r3, 1cc56 <clock_async_start+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cc44:	2201      	movs	r2, #1
   1cc46:	7abb      	ldrb	r3, [r7, #10]
   1cc48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cc4c:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1cc50:	601a      	str	r2, [r3, #0]
		if (data) {
   1cc52:	b94c      	cbnz	r4, 1cc68 <clock_async_start+0x6a>
   1cc54:	e7ec      	b.n	1cc30 <clock_async_start+0x32>
					config->start_handler(dev) : true;
   1cc56:	4798      	blx	r3
   1cc58:	2800      	cmp	r0, #0
   1cc5a:	d1f3      	bne.n	1cc44 <clock_async_start+0x46>
			} else if (data) {
   1cc5c:	2c00      	cmp	r4, #0
   1cc5e:	d0e7      	beq.n	1cc30 <clock_async_start+0x32>
				data->cb(dev, data->user_data);
   1cc60:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1cc64:	4630      	mov	r0, r6
   1cc66:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
   1cc68:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
   1cc6a:	429c      	cmp	r4, r3
   1cc6c:	d00d      	beq.n	1cc8a <clock_async_start+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1cc6e:	b113      	cbz	r3, 1cc76 <clock_async_start+0x78>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1cc70:	681b      	ldr	r3, [r3, #0]
	} while (item);
   1cc72:	2b00      	cmp	r3, #0
   1cc74:	d1f9      	bne.n	1cc6a <clock_async_start+0x6c>
	parent->next = child;
   1cc76:	2000      	movs	r0, #0
   1cc78:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1cc7a:	686b      	ldr	r3, [r5, #4]
   1cc7c:	b913      	cbnz	r3, 1cc84 <clock_async_start+0x86>
	list->head = node;
   1cc7e:	e9c5 4400 	strd	r4, r4, [r5]
   1cc82:	e7d5      	b.n	1cc30 <clock_async_start+0x32>
	parent->next = child;
   1cc84:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1cc86:	606c      	str	r4, [r5, #4]
   1cc88:	e7d3      	b.n	1cc32 <clock_async_start+0x34>
				return -EALREADY;
   1cc8a:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1cc8e:	e7d0      	b.n	1cc32 <clock_async_start+0x34>

0001cc90 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   1cc90:	2200      	movs	r2, #0
   1cc92:	f7ff bfb4 	b.w	1cbfe <clock_async_start>

0001cc96 <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
   1cc96:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
   1cc98:	2000      	movs	r0, #0
	list->tail = NULL;
   1cc9a:	e9c3 0000 	strd	r0, r0, [r3]
}
   1cc9e:	4770      	bx	lr

0001cca0 <clkstarted_handle>:
{
   1cca0:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
   1cca2:	6884      	ldr	r4, [r0, #8]
{
   1cca4:	4605      	mov	r5, r0
Z_GENLIST_IS_EMPTY(slist)
   1cca6:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1cca8:	b12b      	cbz	r3, 1ccb6 <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ccaa:	6861      	ldr	r1, [r4, #4]
   1ccac:	681a      	ldr	r2, [r3, #0]
   1ccae:	428b      	cmp	r3, r1
	list->head = node;
   1ccb0:	6022      	str	r2, [r4, #0]
	list->tail = node;
   1ccb2:	bf08      	it	eq
   1ccb4:	6062      	streq	r2, [r4, #4]
	data->started = true;
   1ccb6:	2201      	movs	r2, #1
   1ccb8:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
   1ccba:	b903      	cbnz	r3, 1ccbe <clkstarted_handle+0x1e>
}
   1ccbc:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   1ccbe:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   1ccc2:	4628      	mov	r0, r5
   1ccc4:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
   1ccc6:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1ccc8:	2b00      	cmp	r3, #0
   1ccca:	d0f7      	beq.n	1ccbc <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1cccc:	6861      	ldr	r1, [r4, #4]
   1ccce:	681a      	ldr	r2, [r3, #0]
   1ccd0:	428b      	cmp	r3, r1
	list->head = node;
   1ccd2:	6022      	str	r2, [r4, #0]
	list->tail = node;
   1ccd4:	bf08      	it	eq
   1ccd6:	6062      	streq	r2, [r4, #4]
   1ccd8:	e7ef      	b.n	1ccba <clkstarted_handle+0x1a>

0001ccda <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1ccda:	4770      	bx	lr

0001ccdc <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1ccdc:	4770      	bx	lr

0001ccde <z_irq_spurious>:
	z_arm_reserved();
   1ccde:	f7f2 bba7 	b.w	f430 <z_arm_bus_fault>

0001cce2 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1cce2:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   1cce4:	6800      	ldr	r0, [r0, #0]
   1cce6:	f7f2 bbad 	b.w	f444 <z_arm_fatal_error>

0001ccea <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1ccea:	b508      	push	{r3, lr}
	handler();
   1ccec:	f7f2 fc44 	bl	f578 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   1ccf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   1ccf4:	f7f2 ba76 	b.w	f1e4 <z_arm_exc_exit>

0001ccf8 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   1ccf8:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   1ccfa:	2100      	movs	r1, #0
   1ccfc:	a801      	add	r0, sp, #4
   1ccfe:	f7f3 f94f 	bl	ffa0 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   1cd02:	b003      	add	sp, #12
   1cd04:	f85d fb04 	ldr.w	pc, [sp], #4

0001cd08 <mpu_configure_region>:
{
   1cd08:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   1cd0a:	684b      	ldr	r3, [r1, #4]
{
   1cd0c:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   1cd0e:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   1cd10:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1cd14:	890d      	ldrh	r5, [r1, #8]
   1cd16:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   1cd18:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1cd1a:	f024 041f 	bic.w	r4, r4, #31
   1cd1e:	3b01      	subs	r3, #1
   1cd20:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   1cd22:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   1cd26:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1cd2a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   1cd2e:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
   1cd30:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1cd34:	9303      	str	r3, [sp, #12]
   1cd36:	4604      	mov	r4, r0
   1cd38:	d905      	bls.n	1cd46 <mpu_configure_region+0x3e>
   1cd3a:	f7f2 ffb3 	bl	fca4 <region_allocate_and_init.part.0>
   1cd3e:	4604      	mov	r4, r0
}
   1cd40:	4620      	mov	r0, r4
   1cd42:	b005      	add	sp, #20
   1cd44:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   1cd46:	4669      	mov	r1, sp
   1cd48:	f7f2 ff94 	bl	fc74 <region_init>
	return region_allocate_and_init(index,
   1cd4c:	e7f8      	b.n	1cd40 <mpu_configure_region+0x38>

0001cd4e <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1cd4e:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   1cd52:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1cd56:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   1cd58:	bf08      	it	eq
   1cd5a:	f06f 0015 	mvneq.w	r0, #21
   1cd5e:	4770      	bx	lr

0001cd60 <atoi>:

#include <stdlib.h>
#include <ctype.h>

int atoi(const char *s)
{
   1cd60:	b530      	push	{r4, r5, lr}
	int n = 0;
	int neg = 0;

	while (isspace(*s)) {
   1cd62:	7802      	ldrb	r2, [r0, #0]
   1cd64:	4603      	mov	r3, r0
   1cd66:	2a20      	cmp	r2, #32
   1cd68:	f100 0001 	add.w	r0, r0, #1
   1cd6c:	d0f9      	beq.n	1cd62 <atoi+0x2>
   1cd6e:	f1a2 0109 	sub.w	r1, r2, #9
   1cd72:	2904      	cmp	r1, #4
   1cd74:	d9f5      	bls.n	1cd62 <atoi+0x2>
		s++;
	}
	switch (*s) {
   1cd76:	2a2b      	cmp	r2, #43	; 0x2b
   1cd78:	d008      	beq.n	1cd8c <atoi+0x2c>
	case '-':
		neg = 1;
		s++;
   1cd7a:	2a2d      	cmp	r2, #45	; 0x2d
   1cd7c:	bf0a      	itet	eq
   1cd7e:	4603      	moveq	r3, r0
   1cd80:	2100      	movne	r1, #0
   1cd82:	2101      	moveq	r1, #1
   1cd84:	3b01      	subs	r3, #1
	int neg = 0;
   1cd86:	2000      	movs	r0, #0
	case '+':
		s++;
	}
	/* Compute n as a negative number to avoid overflow on INT_MIN */
	while (isdigit(*s)) {
		n = 10*n - (*s++ - '0');
   1cd88:	250a      	movs	r5, #10
   1cd8a:	e006      	b.n	1cd9a <atoi+0x3a>
		s++;
   1cd8c:	4603      	mov	r3, r0
	int neg = 0;
   1cd8e:	2100      	movs	r1, #0
   1cd90:	e7f8      	b.n	1cd84 <atoi+0x24>
		n = 10*n - (*s++ - '0');
   1cd92:	f1c2 0230 	rsb	r2, r2, #48	; 0x30
   1cd96:	fb05 2000 	mla	r0, r5, r0, r2
	while (isdigit(*s)) {
   1cd9a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1cd9e:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   1cda2:	2c09      	cmp	r4, #9
   1cda4:	d9f5      	bls.n	1cd92 <atoi+0x32>
	}
	return neg ? n : -n;
   1cda6:	b901      	cbnz	r1, 1cdaa <atoi+0x4a>
   1cda8:	4240      	negs	r0, r0
}
   1cdaa:	bd30      	pop	{r4, r5, pc}

0001cdac <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1cdac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cdb0:	4684      	mov	ip, r0
   1cdb2:	460f      	mov	r7, r1
	register const char *s = nptr;
   1cdb4:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1cdb6:	462c      	mov	r4, r5
   1cdb8:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1cdbc:	2b20      	cmp	r3, #32
   1cdbe:	d036      	beq.n	1ce2e <strtol+0x82>
   1cdc0:	f1a3 0109 	sub.w	r1, r3, #9
   1cdc4:	2904      	cmp	r1, #4
   1cdc6:	d932      	bls.n	1ce2e <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
   1cdc8:	2b2d      	cmp	r3, #45	; 0x2d
   1cdca:	d132      	bne.n	1ce32 <strtol+0x86>
		neg = 1;
   1cdcc:	2101      	movs	r1, #1
		c = *s++;
   1cdce:	786b      	ldrb	r3, [r5, #1]
   1cdd0:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1cdd2:	2a00      	cmp	r2, #0
   1cdd4:	d05c      	beq.n	1ce90 <strtol+0xe4>
   1cdd6:	2a10      	cmp	r2, #16
   1cdd8:	d109      	bne.n	1cdee <strtol+0x42>
   1cdda:	2b30      	cmp	r3, #48	; 0x30
   1cddc:	d107      	bne.n	1cdee <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1cdde:	7823      	ldrb	r3, [r4, #0]
   1cde0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1cde4:	2b58      	cmp	r3, #88	; 0x58
   1cde6:	d14e      	bne.n	1ce86 <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   1cde8:	2210      	movs	r2, #16
		c = s[1];
   1cdea:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1cdec:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1cdee:	2900      	cmp	r1, #0
   1cdf0:	bf14      	ite	ne
   1cdf2:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
   1cdf6:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1cdfa:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   1cdfc:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
   1ce00:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1ce02:	fb02 891e 	mls	r9, r2, lr, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1ce06:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1ce0a:	2d09      	cmp	r5, #9
   1ce0c:	d817      	bhi.n	1ce3e <strtol+0x92>
			c -= '0';
   1ce0e:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1ce10:	429a      	cmp	r2, r3
   1ce12:	dd24      	ble.n	1ce5e <strtol+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1ce14:	1c75      	adds	r5, r6, #1
   1ce16:	d007      	beq.n	1ce28 <strtol+0x7c>
   1ce18:	4570      	cmp	r0, lr
   1ce1a:	d81d      	bhi.n	1ce58 <strtol+0xac>
   1ce1c:	d101      	bne.n	1ce22 <strtol+0x76>
   1ce1e:	454b      	cmp	r3, r9
   1ce20:	dc1a      	bgt.n	1ce58 <strtol+0xac>
			any = -1;
		} else {
			any = 1;
   1ce22:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1ce24:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1ce28:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1ce2c:	e7eb      	b.n	1ce06 <strtol+0x5a>
{
   1ce2e:	4625      	mov	r5, r4
   1ce30:	e7c1      	b.n	1cdb6 <strtol+0xa>
	} else if (c == '+') {
   1ce32:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1ce34:	bf04      	itt	eq
   1ce36:	1cac      	addeq	r4, r5, #2
   1ce38:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   1ce3a:	2100      	movs	r1, #0
   1ce3c:	e7c9      	b.n	1cdd2 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1ce3e:	f043 0520 	orr.w	r5, r3, #32
   1ce42:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1ce44:	2d19      	cmp	r5, #25
   1ce46:	d80a      	bhi.n	1ce5e <strtol+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1ce48:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1ce4c:	2d1a      	cmp	r5, #26
   1ce4e:	bf34      	ite	cc
   1ce50:	2537      	movcc	r5, #55	; 0x37
   1ce52:	2557      	movcs	r5, #87	; 0x57
   1ce54:	1b5b      	subs	r3, r3, r5
   1ce56:	e7db      	b.n	1ce10 <strtol+0x64>
			any = -1;
   1ce58:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1ce5c:	e7e4      	b.n	1ce28 <strtol+0x7c>
		}
	}

	if (any < 0) {
   1ce5e:	1c73      	adds	r3, r6, #1
   1ce60:	d107      	bne.n	1ce72 <strtol+0xc6>
   1ce62:	f7fd fdbd 	bl	1a9e0 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1ce66:	2326      	movs	r3, #38	; 0x26
   1ce68:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1ce6a:	4640      	mov	r0, r8
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1ce6c:	b937      	cbnz	r7, 1ce7c <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1ce6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1ce72:	b101      	cbz	r1, 1ce76 <strtol+0xca>
		acc = -acc;
   1ce74:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1ce76:	2f00      	cmp	r7, #0
   1ce78:	d0f9      	beq.n	1ce6e <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
   1ce7a:	b10e      	cbz	r6, 1ce80 <strtol+0xd4>
   1ce7c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   1ce80:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   1ce84:	e7f3      	b.n	1ce6e <strtol+0xc2>
	if (base == 0) {
   1ce86:	2330      	movs	r3, #48	; 0x30
   1ce88:	2a00      	cmp	r2, #0
   1ce8a:	d1b0      	bne.n	1cdee <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1ce8c:	2208      	movs	r2, #8
   1ce8e:	e7ae      	b.n	1cdee <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1ce90:	2b30      	cmp	r3, #48	; 0x30
   1ce92:	d0a4      	beq.n	1cdde <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1ce94:	220a      	movs	r2, #10
   1ce96:	e7aa      	b.n	1cdee <strtol+0x42>

0001ce98 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   1ce98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ce9c:	4684      	mov	ip, r0
   1ce9e:	460f      	mov	r7, r1
	register const char *s = nptr;
   1cea0:	4605      	mov	r5, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   1cea2:	462c      	mov	r4, r5
   1cea4:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1cea8:	2b20      	cmp	r3, #32
   1ceaa:	d035      	beq.n	1cf18 <strtoul+0x80>
   1ceac:	f1a3 0109 	sub.w	r1, r3, #9
   1ceb0:	2904      	cmp	r1, #4
   1ceb2:	d931      	bls.n	1cf18 <strtoul+0x80>
	} while (isspace(c));
	if (c == '-') {
   1ceb4:	2b2d      	cmp	r3, #45	; 0x2d
   1ceb6:	d131      	bne.n	1cf1c <strtoul+0x84>
		neg = 1;
   1ceb8:	f04f 0e01 	mov.w	lr, #1
		c = *s++;
   1cebc:	786b      	ldrb	r3, [r5, #1]
   1cebe:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1cec0:	2a00      	cmp	r2, #0
   1cec2:	d05e      	beq.n	1cf82 <strtoul+0xea>
   1cec4:	2a10      	cmp	r2, #16
   1cec6:	d109      	bne.n	1cedc <strtoul+0x44>
   1cec8:	2b30      	cmp	r3, #48	; 0x30
   1ceca:	d107      	bne.n	1cedc <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1cecc:	7823      	ldrb	r3, [r4, #0]
   1cece:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1ced2:	2b58      	cmp	r3, #88	; 0x58
   1ced4:	d150      	bne.n	1cf78 <strtoul+0xe0>
		c = s[1];
		s += 2;
		base = 16;
   1ced6:	2210      	movs	r2, #16
		c = s[1];
   1ced8:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1ceda:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   1cedc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cee0:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1cee4:	2600      	movs	r6, #0
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   1cee6:	fb02 f801 	mul.w	r8, r2, r1
	for (acc = 0, any = 0;; c = *s++) {
   1ceea:	4630      	mov	r0, r6
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   1ceec:	ea6f 0808 	mvn.w	r8, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1cef0:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1cef4:	2d09      	cmp	r5, #9
   1cef6:	d818      	bhi.n	1cf2a <strtoul+0x92>
			c -= '0';
   1cef8:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1cefa:	429a      	cmp	r2, r3
   1cefc:	dd25      	ble.n	1cf4a <strtoul+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1cefe:	2e00      	cmp	r6, #0
   1cf00:	db20      	blt.n	1cf44 <strtoul+0xac>
   1cf02:	4288      	cmp	r0, r1
   1cf04:	d81e      	bhi.n	1cf44 <strtoul+0xac>
   1cf06:	d101      	bne.n	1cf0c <strtoul+0x74>
   1cf08:	4543      	cmp	r3, r8
   1cf0a:	dc1b      	bgt.n	1cf44 <strtoul+0xac>
			any = -1;
		} else {
			any = 1;
   1cf0c:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1cf0e:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1cf12:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1cf16:	e7eb      	b.n	1cef0 <strtoul+0x58>
{
   1cf18:	4625      	mov	r5, r4
   1cf1a:	e7c2      	b.n	1cea2 <strtoul+0xa>
	} else if (c == '+') {
   1cf1c:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1cf1e:	bf04      	itt	eq
   1cf20:	1cac      	addeq	r4, r5, #2
   1cf22:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   1cf24:	f04f 0e00 	mov.w	lr, #0
   1cf28:	e7ca      	b.n	1cec0 <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1cf2a:	f043 0520 	orr.w	r5, r3, #32
   1cf2e:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1cf30:	2d19      	cmp	r5, #25
   1cf32:	d80a      	bhi.n	1cf4a <strtoul+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1cf34:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1cf38:	2d1a      	cmp	r5, #26
   1cf3a:	bf34      	ite	cc
   1cf3c:	2537      	movcc	r5, #55	; 0x37
   1cf3e:	2557      	movcs	r5, #87	; 0x57
   1cf40:	1b5b      	subs	r3, r3, r5
   1cf42:	e7da      	b.n	1cefa <strtoul+0x62>
			any = -1;
   1cf44:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1cf48:	e7e3      	b.n	1cf12 <strtoul+0x7a>
		}
	}
	if (any < 0) {
   1cf4a:	2e00      	cmp	r6, #0
   1cf4c:	da08      	bge.n	1cf60 <strtoul+0xc8>
   1cf4e:	f7fd fd47 	bl	1a9e0 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   1cf52:	2326      	movs	r3, #38	; 0x26
   1cf54:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   1cf56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   1cf5a:	b947      	cbnz	r7, 1cf6e <strtoul+0xd6>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1cf5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   1cf60:	f1be 0f00 	cmp.w	lr, #0
   1cf64:	d000      	beq.n	1cf68 <strtoul+0xd0>
		acc = -acc;
   1cf66:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1cf68:	2f00      	cmp	r7, #0
   1cf6a:	d0f7      	beq.n	1cf5c <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   1cf6c:	b10e      	cbz	r6, 1cf72 <strtoul+0xda>
   1cf6e:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   1cf72:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   1cf76:	e7f1      	b.n	1cf5c <strtoul+0xc4>
	if (base == 0) {
   1cf78:	2330      	movs	r3, #48	; 0x30
   1cf7a:	2a00      	cmp	r2, #0
   1cf7c:	d1ae      	bne.n	1cedc <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   1cf7e:	2208      	movs	r2, #8
   1cf80:	e7ac      	b.n	1cedc <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   1cf82:	2b30      	cmp	r3, #48	; 0x30
   1cf84:	d0a2      	beq.n	1cecc <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   1cf86:	220a      	movs	r2, #10
   1cf88:	e7a8      	b.n	1cedc <strtoul+0x44>

0001cf8a <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   1cf8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   1cf8e:	780f      	ldrb	r7, [r1, #0]
{
   1cf90:	4605      	mov	r5, r0
	if (c != 0) {
   1cf92:	b187      	cbz	r7, 1cfb6 <strstr+0x2c>
	c = *find++;
   1cf94:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   1cf96:	4620      	mov	r0, r4
   1cf98:	f000 f84c 	bl	1d034 <strlen>
   1cf9c:	4680      	mov	r8, r0
		do {
			do {
				sc = *s++;
   1cf9e:	462e      	mov	r6, r5
   1cfa0:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   1cfa4:	b163      	cbz	r3, 1cfc0 <strstr+0x36>
					return NULL;
				}
			} while (sc != c);
   1cfa6:	429f      	cmp	r7, r3
   1cfa8:	d108      	bne.n	1cfbc <strstr+0x32>
		} while (strncmp(s, find, len) != 0);
   1cfaa:	4642      	mov	r2, r8
   1cfac:	4621      	mov	r1, r4
   1cfae:	4630      	mov	r0, r6
   1cfb0:	f000 f853 	bl	1d05a <strncmp>
   1cfb4:	b910      	cbnz	r0, 1cfbc <strstr+0x32>
	s--;
	}
	return (char *)s;
}
   1cfb6:	4628      	mov	r0, r5
   1cfb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1cfbc:	4635      	mov	r5, r6
   1cfbe:	e7ee      	b.n	1cf9e <strstr+0x14>
					return NULL;
   1cfc0:	461d      	mov	r5, r3
   1cfc2:	e7f8      	b.n	1cfb6 <strstr+0x2c>

0001cfc4 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1cfc4:	4603      	mov	r3, r0
   1cfc6:	3901      	subs	r1, #1
   1cfc8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1cfcc:	b90a      	cbnz	r2, 1cfd2 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1cfce:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1cfd0:	4770      	bx	lr
		*d = *s;
   1cfd2:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1cfd6:	e7f7      	b.n	1cfc8 <strcpy+0x4>

0001cfd8 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1cfd8:	b570      	push	{r4, r5, r6, lr}
   1cfda:	4605      	mov	r5, r0
   1cfdc:	3901      	subs	r1, #1
   1cfde:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1cfe0:	b142      	cbz	r2, 1cff4 <strncpy+0x1c>
   1cfe2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1cfe6:	1e56      	subs	r6, r2, #1
   1cfe8:	b92b      	cbnz	r3, 1cff6 <strncpy+0x1e>
   1cfea:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1cfec:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   1cff0:	42a2      	cmp	r2, r4
   1cff2:	d1fb      	bne.n	1cfec <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   1cff4:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   1cff6:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   1cffa:	4632      	mov	r2, r6
   1cffc:	e7ef      	b.n	1cfde <strncpy+0x6>

0001cffe <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   1cffe:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   1d000:	7802      	ldrb	r2, [r0, #0]
   1d002:	4603      	mov	r3, r0
   1d004:	428a      	cmp	r2, r1
   1d006:	f100 0001 	add.w	r0, r0, #1
   1d00a:	d004      	beq.n	1d016 <strchr+0x18>
   1d00c:	2a00      	cmp	r2, #0
   1d00e:	d1f7      	bne.n	1d000 <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   1d010:	2900      	cmp	r1, #0
   1d012:	bf18      	it	ne
   1d014:	2300      	movne	r3, #0
}
   1d016:	4618      	mov	r0, r3
   1d018:	4770      	bx	lr

0001d01a <strrchr>:
 * @return pointer to last instance of found byte, or NULL if not found
 */

char *strrchr(const char *s, int c)
{
	char *match = NULL;
   1d01a:	2300      	movs	r3, #0
{
   1d01c:	b510      	push	{r4, lr}

	do {
		if (*s == (char)c) {
   1d01e:	b2c9      	uxtb	r1, r1
   1d020:	4604      	mov	r4, r0
   1d022:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d026:	428a      	cmp	r2, r1
   1d028:	bf08      	it	eq
   1d02a:	4623      	moveq	r3, r4
			match = (char *)s;
		}
	} while (*s++);
   1d02c:	2a00      	cmp	r2, #0
   1d02e:	d1f7      	bne.n	1d020 <strrchr+0x6>

	return match;
}
   1d030:	4618      	mov	r0, r3
   1d032:	bd10      	pop	{r4, pc}

0001d034 <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
   1d034:	2300      	movs	r3, #0

	while (*s != '\0') {
   1d036:	5cc2      	ldrb	r2, [r0, r3]
   1d038:	b90a      	cbnz	r2, 1d03e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1d03a:	4618      	mov	r0, r3
   1d03c:	4770      	bx	lr
		n++;
   1d03e:	3301      	adds	r3, #1
   1d040:	e7f9      	b.n	1d036 <strlen+0x2>

0001d042 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1d042:	3801      	subs	r0, #1
   1d044:	3901      	subs	r1, #1
   1d046:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1d04a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1d04e:	4293      	cmp	r3, r2
   1d050:	d101      	bne.n	1d056 <strcmp+0x14>
   1d052:	2b00      	cmp	r3, #0
   1d054:	d1f7      	bne.n	1d046 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1d056:	1a98      	subs	r0, r3, r2
   1d058:	4770      	bx	lr

0001d05a <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1d05a:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1d05c:	2400      	movs	r4, #0
   1d05e:	42a2      	cmp	r2, r4
   1d060:	d008      	beq.n	1d074 <strncmp+0x1a>
   1d062:	5d03      	ldrb	r3, [r0, r4]
   1d064:	5d0d      	ldrb	r5, [r1, r4]
   1d066:	42ab      	cmp	r3, r5
   1d068:	d102      	bne.n	1d070 <strncmp+0x16>
   1d06a:	3401      	adds	r4, #1
   1d06c:	2b00      	cmp	r3, #0
   1d06e:	d1f6      	bne.n	1d05e <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1d070:	1b58      	subs	r0, r3, r5
   1d072:	e000      	b.n	1d076 <strncmp+0x1c>
   1d074:	2000      	movs	r0, #0
}
   1d076:	bd30      	pop	{r4, r5, pc}

0001d078 <strcat>:

char *strcat(char *_MLIBC_RESTRICT dest, const char *_MLIBC_RESTRICT src)
{
   1d078:	b510      	push	{r4, lr}
   1d07a:	4604      	mov	r4, r0
	strcpy(dest + strlen(dest), src);
   1d07c:	f7ff ffda 	bl	1d034 <strlen>
   1d080:	4420      	add	r0, r4
   1d082:	f7ff ff9f 	bl	1cfc4 <strcpy>
	return dest;
}
   1d086:	4620      	mov	r0, r4
   1d088:	bd10      	pop	{r4, pc}

0001d08a <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1d08a:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1d08c:	b15a      	cbz	r2, 1d0a6 <memcmp+0x1c>
   1d08e:	3901      	subs	r1, #1
   1d090:	1884      	adds	r4, r0, r2
   1d092:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d096:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1d09a:	42a0      	cmp	r0, r4
   1d09c:	d001      	beq.n	1d0a2 <memcmp+0x18>
   1d09e:	429a      	cmp	r2, r3
   1d0a0:	d0f7      	beq.n	1d092 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1d0a2:	1ad0      	subs	r0, r2, r3
}
   1d0a4:	bd10      	pop	{r4, pc}
		return 0;
   1d0a6:	4610      	mov	r0, r2
   1d0a8:	e7fc      	b.n	1d0a4 <memcmp+0x1a>

0001d0aa <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1d0aa:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1d0ac:	ea81 0400 	eor.w	r4, r1, r0
   1d0b0:	07a5      	lsls	r5, r4, #30
   1d0b2:	4603      	mov	r3, r0
   1d0b4:	d00b      	beq.n	1d0ce <memcpy+0x24>
   1d0b6:	3b01      	subs	r3, #1
   1d0b8:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1d0ba:	4291      	cmp	r1, r2
   1d0bc:	d11a      	bne.n	1d0f4 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1d0be:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1d0c0:	2a00      	cmp	r2, #0
   1d0c2:	d0fc      	beq.n	1d0be <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1d0c4:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1d0c8:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1d0ca:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1d0ce:	079c      	lsls	r4, r3, #30
   1d0d0:	d1f6      	bne.n	1d0c0 <memcpy+0x16>
   1d0d2:	0895      	lsrs	r5, r2, #2
   1d0d4:	00ac      	lsls	r4, r5, #2
   1d0d6:	1f1e      	subs	r6, r3, #4
   1d0d8:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1d0da:	42b9      	cmp	r1, r7
   1d0dc:	d105      	bne.n	1d0ea <memcpy+0x40>
   1d0de:	f06f 0603 	mvn.w	r6, #3
   1d0e2:	4423      	add	r3, r4
   1d0e4:	fb06 2205 	mla	r2, r6, r5, r2
   1d0e8:	e7e5      	b.n	1d0b6 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1d0ea:	f851 cb04 	ldr.w	ip, [r1], #4
   1d0ee:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
   1d0f2:	e7f2      	b.n	1d0da <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
   1d0f4:	f811 4b01 	ldrb.w	r4, [r1], #1
   1d0f8:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1d0fc:	e7dd      	b.n	1d0ba <memcpy+0x10>

0001d0fe <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1d0fe:	4603      	mov	r3, r0
{
   1d100:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   1d102:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1d104:	079c      	lsls	r4, r3, #30
   1d106:	d110      	bne.n	1d12a <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1d108:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1d10c:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1d110:	0894      	lsrs	r4, r2, #2
   1d112:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   1d116:	42b3      	cmp	r3, r6
   1d118:	d10d      	bne.n	1d136 <memset+0x38>
   1d11a:	f06f 0503 	mvn.w	r5, #3
   1d11e:	fb05 2404 	mla	r4, r5, r4, r2
   1d122:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1d124:	42a3      	cmp	r3, r4
   1d126:	d109      	bne.n	1d13c <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1d128:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1d12a:	2a00      	cmp	r2, #0
   1d12c:	d0fc      	beq.n	1d128 <memset+0x2a>
		*(d_byte++) = c_byte;
   1d12e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1d132:	3a01      	subs	r2, #1
   1d134:	e7e6      	b.n	1d104 <memset+0x6>
		*(d_word++) = c_word;
   1d136:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1d13a:	e7ec      	b.n	1d116 <memset+0x18>
		*(d_byte++) = c_byte;
   1d13c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1d140:	e7f0      	b.n	1d124 <memset+0x26>

0001d142 <_to_x>:
{
   1d142:	4603      	mov	r3, r0
   1d144:	b5f0      	push	{r4, r5, r6, r7, lr}
		unsigned int d = n % base;
   1d146:	fbb1 f7f2 	udiv	r7, r1, r2
   1d14a:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1d14e:	2d09      	cmp	r5, #9
   1d150:	bf8c      	ite	hi
   1d152:	2627      	movhi	r6, #39	; 0x27
   1d154:	2600      	movls	r6, #0
   1d156:	461c      	mov	r4, r3
   1d158:	3530      	adds	r5, #48	; 0x30
   1d15a:	4435      	add	r5, r6
	} while (n);
   1d15c:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1d15e:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
   1d162:	d206      	bcs.n	1d172 <_to_x+0x30>
	*buf = 0;
   1d164:	2200      	movs	r2, #0
   1d166:	7022      	strb	r2, [r4, #0]
	len = buf - start;
   1d168:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
   1d16a:	4283      	cmp	r3, r0
   1d16c:	d804      	bhi.n	1d178 <_to_x+0x36>
}
   1d16e:	4620      	mov	r0, r4
   1d170:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
   1d172:	4639      	mov	r1, r7
   1d174:	4623      	mov	r3, r4
   1d176:	e7e6      	b.n	1d146 <_to_x+0x4>
		char tmp = *buf;
   1d178:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
   1d17a:	7801      	ldrb	r1, [r0, #0]
   1d17c:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
   1d180:	f800 2b01 	strb.w	r2, [r0], #1
   1d184:	e7f1      	b.n	1d16a <_to_x+0x28>

0001d186 <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
   1d186:	2100      	movs	r1, #0
{
   1d188:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   1d18a:	e9d0 6500 	ldrd	r6, r5, [r0]
   1d18e:	0872      	lsrs	r2, r6, #1
   1d190:	f006 0301 	and.w	r3, r6, #1
   1d194:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   1d198:	189b      	adds	r3, r3, r2
   1d19a:	ea4f 0455 	mov.w	r4, r5, lsr #1
   1d19e:	eb44 0101 	adc.w	r1, r4, r1
   1d1a2:	e9c0 3100 	strd	r3, r1, [r0]
}
   1d1a6:	bd70      	pop	{r4, r5, r6, pc}

0001d1a8 <_ldiv5>:
{
   1d1a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint64_t rem = *v, quot = 0U, q;
   1d1ac:	e9d0 3200 	ldrd	r3, r2, [r0]
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d1b0:	2705      	movs	r7, #5
	rem += 2U;
   1d1b2:	3302      	adds	r3, #2
   1d1b4:	f142 0200 	adc.w	r2, r2, #0
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d1b8:	fbb2 fef7 	udiv	lr, r2, r7
   1d1bc:	f04f 0c00 	mov.w	ip, #0
		rem -= q * 5U;
   1d1c0:	fb07 f10e 	mul.w	r1, r7, lr
   1d1c4:	ebb3 060c 	subs.w	r6, r3, ip
   1d1c8:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
   1d1cc:	08f2      	lsrs	r2, r6, #3
   1d1ce:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d1d2:	fbb2 f1f7 	udiv	r1, r2, r7
   1d1d6:	00ca      	lsls	r2, r1, #3
		quot += q;
   1d1d8:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d1dc:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
   1d1e0:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
   1d1e4:	fba2 2307 	umull	r2, r3, r2, r7
   1d1e8:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d1ea:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
   1d1ee:	eb18 0403 	adds.w	r4, r8, r3
   1d1f2:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
   1d1f6:	e9c0 4500 	strd	r4, r5, [r0]
}
   1d1fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001d1fe <_get_digit>:
	if (*digit_count > 0) {
   1d1fe:	680b      	ldr	r3, [r1, #0]
{
   1d200:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   1d202:	2b00      	cmp	r3, #0
   1d204:	dd10      	ble.n	1d228 <_get_digit+0x2a>
		*digit_count -= 1;
   1d206:	3b01      	subs	r3, #1
   1d208:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   1d20a:	210a      	movs	r1, #10
   1d20c:	6802      	ldr	r2, [r0, #0]
   1d20e:	6844      	ldr	r4, [r0, #4]
   1d210:	fba2 5601 	umull	r5, r6, r2, r1
   1d214:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   1d218:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   1d21c:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   1d220:	0f31      	lsrs	r1, r6, #28
   1d222:	3130      	adds	r1, #48	; 0x30
}
   1d224:	4608      	mov	r0, r1
   1d226:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   1d228:	2130      	movs	r1, #48	; 0x30
   1d22a:	e7fb      	b.n	1d224 <_get_digit+0x26>

0001d22c <_stdout_hook_default>:
}
   1d22c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d230:	4770      	bx	lr

0001d232 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   1d232:	684b      	ldr	r3, [r1, #4]
   1d234:	2b01      	cmp	r3, #1
   1d236:	dd07      	ble.n	1d248 <sprintf_out+0x16>
		*(p->ptr) = c;
   1d238:	680b      	ldr	r3, [r1, #0]
   1d23a:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   1d23c:	680b      	ldr	r3, [r1, #0]
   1d23e:	3301      	adds	r3, #1
   1d240:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   1d242:	684b      	ldr	r3, [r1, #4]
   1d244:	3b01      	subs	r3, #1
   1d246:	604b      	str	r3, [r1, #4]
}
   1d248:	2000      	movs	r0, #0
   1d24a:	4770      	bx	lr

0001d24c <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   1d24c:	b508      	push	{r3, lr}
	net_if_init();
   1d24e:	f7f3 fbc1 	bl	109d4 <net_if_init>
	net_if_post_init();
   1d252:	f7f3 fbd3 	bl	109fc <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   1d256:	2000      	movs	r0, #0
   1d258:	bd08      	pop	{r3, pc}

0001d25a <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d25a:	e8d0 0faf 	lda	r0, [r0]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1d25e:	4108      	asrs	r0, r1
}
   1d260:	f000 0001 	and.w	r0, r0, #1
   1d264:	4770      	bx	lr

0001d266 <l2_flags_get>:
	if (!iface) {
   1d266:	b128      	cbz	r0, 1d274 <l2_flags_get+0xe>
	return iface->if_dev->l2;
   1d268:	6803      	ldr	r3, [r0, #0]
   1d26a:	685b      	ldr	r3, [r3, #4]
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   1d26c:	b113      	cbz	r3, 1d274 <l2_flags_get+0xe>
   1d26e:	68db      	ldr	r3, [r3, #12]
   1d270:	b103      	cbz	r3, 1d274 <l2_flags_get+0xe>
		flags = net_if_l2(iface)->get_flags(iface);
   1d272:	4718      	bx	r3
}
   1d274:	2000      	movs	r0, #0
   1d276:	4770      	bx	lr

0001d278 <net_if_up>:
{
   1d278:	b510      	push	{r4, lr}
   1d27a:	4604      	mov	r4, r0
	return atomic_test_bit(iface->if_dev->flags, value);
   1d27c:	6800      	ldr	r0, [r0, #0]
   1d27e:	2100      	movs	r1, #0
   1d280:	300c      	adds	r0, #12
   1d282:	f7ff ffea 	bl	1d25a <atomic_test_bit>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1d286:	b9d8      	cbnz	r0, 1d2c0 <net_if_up+0x48>
	     net_if_is_socket_offloaded(iface))) {
   1d288:	6823      	ldr	r3, [r4, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1d28a:	7e9a      	ldrb	r2, [r3, #26]
   1d28c:	b14a      	cbz	r2, 1d2a2 <net_if_up+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d28e:	330c      	adds	r3, #12
   1d290:	e8d3 2fef 	ldaex	r2, [r3]
   1d294:	f042 0201 	orr.w	r2, r2, #1
   1d298:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1d29c:	2900      	cmp	r1, #0
   1d29e:	d1f7      	bne.n	1d290 <net_if_up+0x18>
}
   1d2a0:	bd10      	pop	{r4, pc}
	return iface->if_dev->l2;
   1d2a2:	685b      	ldr	r3, [r3, #4]
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1d2a4:	b973      	cbnz	r3, 1d2c4 <net_if_up+0x4c>
   1d2a6:	6823      	ldr	r3, [r4, #0]
   1d2a8:	330c      	adds	r3, #12
   1d2aa:	e8d3 2fef 	ldaex	r2, [r3]
   1d2ae:	f042 0201 	orr.w	r2, r2, #1
   1d2b2:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1d2b6:	2900      	cmp	r1, #0
   1d2b8:	d1f7      	bne.n	1d2aa <net_if_up+0x32>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1d2ba:	4620      	mov	r0, r4
   1d2bc:	f7ff ffd3 	bl	1d266 <l2_flags_get>
		return 0;
   1d2c0:	2000      	movs	r0, #0
   1d2c2:	e7ed      	b.n	1d2a0 <net_if_up+0x28>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1d2c4:	689b      	ldr	r3, [r3, #8]
   1d2c6:	2b00      	cmp	r3, #0
   1d2c8:	d0ed      	beq.n	1d2a6 <net_if_up+0x2e>
	status = net_if_l2(iface)->enable(iface, true);
   1d2ca:	2101      	movs	r1, #1
   1d2cc:	4620      	mov	r0, r4
   1d2ce:	4798      	blx	r3
	if (status < 0) {
   1d2d0:	2800      	cmp	r0, #0
   1d2d2:	dae8      	bge.n	1d2a6 <net_if_up+0x2e>
   1d2d4:	e7e4      	b.n	1d2a0 <net_if_up+0x28>

0001d2d6 <net_byte_to_hex>:
{
   1d2d6:	b570      	push	{r4, r5, r6, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1d2d8:	090e      	lsrs	r6, r1, #4
		if (i == 0 && !pad && !val) {
   1d2da:	b1b3      	cbz	r3, 1d30a <net_byte_to_hex+0x34>
		if (val < 10) {
   1d2dc:	2e09      	cmp	r6, #9
			*ptr++ = (char) (val - 10 + base);
   1d2de:	b274      	sxtb	r4, r6
   1d2e0:	bf86      	itte	hi
   1d2e2:	f1a2 030a 	subhi.w	r3, r2, #10
   1d2e6:	18e4      	addhi	r4, r4, r3
			*ptr++ = (char) (val + '0');
   1d2e8:	3430      	addls	r4, #48	; 0x30
   1d2ea:	1c45      	adds	r5, r0, #1
   1d2ec:	7004      	strb	r4, [r0, #0]
   1d2ee:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   1d2f2:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   1d2f4:	b24b      	sxtb	r3, r1
   1d2f6:	bf83      	ittte	hi
   1d2f8:	3a0a      	subhi	r2, #10
   1d2fa:	189b      	addhi	r3, r3, r2
   1d2fc:	b2db      	uxtbhi	r3, r3
			*ptr++ = (char) (val + '0');
   1d2fe:	3330      	addls	r3, #48	; 0x30
   1d300:	702b      	strb	r3, [r5, #0]
	*ptr = '\0';
   1d302:	2300      	movs	r3, #0
   1d304:	706b      	strb	r3, [r5, #1]
   1d306:	1c68      	adds	r0, r5, #1
}
   1d308:	bd70      	pop	{r4, r5, r6, pc}
		if (i == 0 && !pad && !val) {
   1d30a:	2e00      	cmp	r6, #0
   1d30c:	d1e6      	bne.n	1d2dc <net_byte_to_hex+0x6>
   1d30e:	4605      	mov	r5, r0
   1d310:	e7ed      	b.n	1d2ee <net_byte_to_hex+0x18>

0001d312 <z_impl_net_addr_pton>:
#endif /* CONFIG_USERSPACE */

int z_impl_net_addr_pton(sa_family_t family, const char *src,
			 void *dst)
{
	if (family == AF_INET) {
   1d312:	2801      	cmp	r0, #1
{
   1d314:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d318:	460c      	mov	r4, r1
   1d31a:	4616      	mov	r6, r2
	if (family == AF_INET) {
   1d31c:	d128      	bne.n	1d370 <z_impl_net_addr_pton+0x5e>
		struct in_addr *addr = (struct in_addr *)dst;
		size_t i, len;

		len = strlen(src);
   1d31e:	4608      	mov	r0, r1
   1d320:	f7ff fe88 	bl	1d034 <strlen>
		for (i = 0; i < len; i++) {
   1d324:	4623      	mov	r3, r4
   1d326:	4420      	add	r0, r4
   1d328:	4298      	cmp	r0, r3
   1d32a:	d114      	bne.n	1d356 <z_impl_net_addr_pton+0x44>
			    src[i] != '.') {
				return -EINVAL;
			}
		}

		(void)memset(addr, 0, sizeof(struct in_addr));
   1d32c:	4630      	mov	r0, r6
   1d32e:	2204      	movs	r2, #4
   1d330:	2100      	movs	r1, #0
   1d332:	f7ff fee4 	bl	1d0fe <memset>

		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d336:	1e75      	subs	r5, r6, #1
   1d338:	3603      	adds	r6, #3
			char *endptr;

			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1d33a:	4620      	mov	r0, r4
   1d33c:	220a      	movs	r2, #10
   1d33e:	a901      	add	r1, sp, #4
   1d340:	f7ff fd34 	bl	1cdac <strtol>

			src = ++endptr;
   1d344:	9c01      	ldr	r4, [sp, #4]
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1d346:	f805 0f01 	strb.w	r0, [r5, #1]!
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d34a:	42b5      	cmp	r5, r6
			src = ++endptr;
   1d34c:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d350:	d1f3      	bne.n	1d33a <z_impl_net_addr_pton+0x28>
		}
	} else {
		return -EINVAL;
	}

	return 0;
   1d352:	2000      	movs	r0, #0
   1d354:	e009      	b.n	1d36a <z_impl_net_addr_pton+0x58>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1d356:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d35a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1d35e:	2909      	cmp	r1, #9
   1d360:	d9e2      	bls.n	1d328 <z_impl_net_addr_pton+0x16>
   1d362:	2a2e      	cmp	r2, #46	; 0x2e
   1d364:	d0e0      	beq.n	1d328 <z_impl_net_addr_pton+0x16>
				return -EINVAL;
   1d366:	f06f 0015 	mvn.w	r0, #21
}
   1d36a:	b003      	add	sp, #12
   1d36c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (family == AF_INET6) {
   1d370:	2802      	cmp	r0, #2
   1d372:	d1f8      	bne.n	1d366 <z_impl_net_addr_pton+0x54>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1d374:	212e      	movs	r1, #46	; 0x2e
   1d376:	4620      	mov	r0, r4
   1d378:	f7ff fe41 	bl	1cffe <strchr>
		if (*src == ':') {
   1d37c:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1d37e:	2800      	cmp	r0, #0
   1d380:	bf14      	ite	ne
   1d382:	2706      	movne	r7, #6
   1d384:	2708      	moveq	r7, #8
		if (*src == ':') {
   1d386:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   1d388:	bf08      	it	eq
   1d38a:	3401      	addeq	r4, #1
		len = strlen(src);
   1d38c:	4620      	mov	r0, r4
   1d38e:	f7ff fe51 	bl	1d034 <strlen>
		for (i = 0; i < len; i++) {
   1d392:	2300      	movs	r3, #0
   1d394:	4283      	cmp	r3, r0
   1d396:	db21      	blt.n	1d3dc <z_impl_net_addr_pton+0xca>
		for (i = 0; i < expected_groups; i++) {
   1d398:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1d39a:	46a9      	mov	r9, r5
			if (!src || *src == '\0') {
   1d39c:	2c00      	cmp	r4, #0
   1d39e:	d0e2      	beq.n	1d366 <z_impl_net_addr_pton+0x54>
   1d3a0:	7823      	ldrb	r3, [r4, #0]
   1d3a2:	2b00      	cmp	r3, #0
   1d3a4:	d0df      	beq.n	1d366 <z_impl_net_addr_pton+0x54>
			if (*src != ':') {
   1d3a6:	2b3a      	cmp	r3, #58	; 0x3a
   1d3a8:	d02d      	beq.n	1d406 <z_impl_net_addr_pton+0xf4>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1d3aa:	2210      	movs	r2, #16
   1d3ac:	2100      	movs	r1, #0
   1d3ae:	4620      	mov	r0, r4
   1d3b0:	f7ff fcfc 	bl	1cdac <strtol>
   1d3b4:	2210      	movs	r2, #16
   1d3b6:	4680      	mov	r8, r0
   1d3b8:	2100      	movs	r1, #0
   1d3ba:	4620      	mov	r0, r4
   1d3bc:	f7ff fcf6 	bl	1cdac <strtol>
   1d3c0:	f3c8 2807 	ubfx	r8, r8, #8, #8
   1d3c4:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
   1d3c8:	f826 8015 	strh.w	r8, [r6, r5, lsl #1]
				src = strchr(src, ':');
   1d3cc:	213a      	movs	r1, #58	; 0x3a
   1d3ce:	4620      	mov	r0, r4
   1d3d0:	f7ff fe15 	bl	1cffe <strchr>
				if (src) {
   1d3d4:	4604      	mov	r4, r0
   1d3d6:	b178      	cbz	r0, 1d3f8 <z_impl_net_addr_pton+0xe6>
			src++;
   1d3d8:	3401      	adds	r4, #1
   1d3da:	e010      	b.n	1d3fe <z_impl_net_addr_pton+0xec>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1d3dc:	5ce2      	ldrb	r2, [r4, r3]
   1d3de:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1d3e2:	290a      	cmp	r1, #10
   1d3e4:	d906      	bls.n	1d3f4 <z_impl_net_addr_pton+0xe2>
   1d3e6:	f022 0120 	bic.w	r1, r2, #32
   1d3ea:	3941      	subs	r1, #65	; 0x41
   1d3ec:	2905      	cmp	r1, #5
   1d3ee:	d901      	bls.n	1d3f4 <z_impl_net_addr_pton+0xe2>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1d3f0:	2a2e      	cmp	r2, #46	; 0x2e
   1d3f2:	d1b8      	bne.n	1d366 <z_impl_net_addr_pton+0x54>
		for (i = 0; i < len; i++) {
   1d3f4:	3301      	adds	r3, #1
   1d3f6:	e7cd      	b.n	1d394 <z_impl_net_addr_pton+0x82>
					if (i < expected_groups - 1) {
   1d3f8:	1e7b      	subs	r3, r7, #1
   1d3fa:	42ab      	cmp	r3, r5
   1d3fc:	dcb3      	bgt.n	1d366 <z_impl_net_addr_pton+0x54>
		for (i = 0; i < expected_groups; i++) {
   1d3fe:	3501      	adds	r5, #1
   1d400:	42af      	cmp	r7, r5
   1d402:	dccb      	bgt.n	1d39c <z_impl_net_addr_pton+0x8a>
   1d404:	e013      	b.n	1d42e <z_impl_net_addr_pton+0x11c>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   1d406:	eb06 0345 	add.w	r3, r6, r5, lsl #1
   1d40a:	f806 9015 	strb.w	r9, [r6, r5, lsl #1]
   1d40e:	f883 9001 	strb.w	r9, [r3, #1]
			for (; i < expected_groups; i++) {
   1d412:	3501      	adds	r5, #1
   1d414:	42af      	cmp	r7, r5
   1d416:	dcf6      	bgt.n	1d406 <z_impl_net_addr_pton+0xf4>
			tmp = strrchr(src, ':');
   1d418:	213a      	movs	r1, #58	; 0x3a
   1d41a:	4620      	mov	r0, r4
   1d41c:	f7ff fdfd 	bl	1d01a <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1d420:	42a0      	cmp	r0, r4
   1d422:	d11f      	bne.n	1d464 <z_impl_net_addr_pton+0x152>
   1d424:	2f06      	cmp	r7, #6
   1d426:	d001      	beq.n	1d42c <z_impl_net_addr_pton+0x11a>
   1d428:	7863      	ldrb	r3, [r4, #1]
   1d42a:	bb63      	cbnz	r3, 1d486 <z_impl_net_addr_pton+0x174>
				src++;
   1d42c:	3401      	adds	r4, #1
		if (expected_groups == 6) {
   1d42e:	2f06      	cmp	r7, #6
   1d430:	d18f      	bne.n	1d352 <z_impl_net_addr_pton+0x40>
			for (i = 0; i < 4; i++) {
   1d432:	2500      	movs	r5, #0
   1d434:	360c      	adds	r6, #12
				if (!src || !*src) {
   1d436:	2c00      	cmp	r4, #0
   1d438:	d095      	beq.n	1d366 <z_impl_net_addr_pton+0x54>
   1d43a:	7823      	ldrb	r3, [r4, #0]
   1d43c:	2b00      	cmp	r3, #0
   1d43e:	d092      	beq.n	1d366 <z_impl_net_addr_pton+0x54>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1d440:	220a      	movs	r2, #10
   1d442:	2100      	movs	r1, #0
   1d444:	4620      	mov	r0, r4
   1d446:	f7ff fcb1 	bl	1cdac <strtol>
				src = strchr(src, '.');
   1d44a:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1d44c:	f806 0b01 	strb.w	r0, [r6], #1
				src = strchr(src, '.');
   1d450:	4620      	mov	r0, r4
   1d452:	f7ff fdd4 	bl	1cffe <strchr>
				if (src) {
   1d456:	4604      	mov	r4, r0
   1d458:	b1b8      	cbz	r0, 1d48a <z_impl_net_addr_pton+0x178>
					src++;
   1d45a:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
   1d45c:	3501      	adds	r5, #1
   1d45e:	2d04      	cmp	r5, #4
   1d460:	d1e9      	bne.n	1d436 <z_impl_net_addr_pton+0x124>
   1d462:	e776      	b.n	1d352 <z_impl_net_addr_pton+0x40>
			if (expected_groups == 6) {
   1d464:	2f06      	cmp	r7, #6
   1d466:	d100      	bne.n	1d46a <z_impl_net_addr_pton+0x158>
				tmp--;
   1d468:	3801      	subs	r0, #1
			i = expected_groups - 1;
   1d46a:	1e7d      	subs	r5, r7, #1
   1d46c:	3001      	adds	r0, #1
				if (*tmp == ':') {
   1d46e:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   1d472:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   1d474:	bf08      	it	eq
   1d476:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
				if (i < 0) {
   1d47a:	2d00      	cmp	r5, #0
   1d47c:	f6ff af73 	blt.w	1d366 <z_impl_net_addr_pton+0x54>
			} while (tmp-- != src);
   1d480:	42a0      	cmp	r0, r4
   1d482:	d1f4      	bne.n	1d46e <z_impl_net_addr_pton+0x15c>
   1d484:	e7a8      	b.n	1d3d8 <z_impl_net_addr_pton+0xc6>
   1d486:	4620      	mov	r0, r4
   1d488:	e7ef      	b.n	1d46a <z_impl_net_addr_pton+0x158>
					if (i < 3) {
   1d48a:	2d03      	cmp	r5, #3
   1d48c:	f47f af6b 	bne.w	1d366 <z_impl_net_addr_pton+0x54>
   1d490:	e7e4      	b.n	1d45c <z_impl_net_addr_pton+0x14a>

0001d492 <gpio_nrfx_write>:
{
   1d492:	b510      	push	{r4, lr}
	return port->config->config_info;
   1d494:	6804      	ldr	r4, [r0, #0]
   1d496:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d498:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1d49a:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d49c:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1d49e:	69c0      	ldr	r0, [r0, #28]
   1d4a0:	d103      	bne.n	1d4aa <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   1d4a2:	4058      	eors	r0, r3
    p_reg->OUT = value;
   1d4a4:	6060      	str	r0, [r4, #4]
}
   1d4a6:	2000      	movs	r0, #0
   1d4a8:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   1d4aa:	3300      	adds	r3, #0
   1d4ac:	f04f 0101 	mov.w	r1, #1
   1d4b0:	bf18      	it	ne
   1d4b2:	2301      	movne	r3, #1
   1d4b4:	40d0      	lsrs	r0, r2
   1d4b6:	f000 0001 	and.w	r0, r0, #1
   1d4ba:	4091      	lsls	r1, r2
   1d4bc:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   1d4be:	bf14      	ite	ne
   1d4c0:	60a1      	strne	r1, [r4, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   1d4c2:	60e1      	streq	r1, [r4, #12]
   1d4c4:	e7ef      	b.n	1d4a6 <gpio_nrfx_write+0x14>

0001d4c6 <gpio_nrfx_read>:
{
   1d4c6:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   1d4c8:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1d4ca:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d4cc:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1d4ce:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d4d0:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1d4d2:	2901      	cmp	r1, #1
    return p_reg->DIR;
   1d4d4:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   1d4d6:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   1d4d8:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1d4da:	ea80 0004 	eor.w	r0, r0, r4
   1d4de:	ea84 0405 	eor.w	r4, r4, r5
   1d4e2:	ea04 0406 	and.w	r4, r4, r6
   1d4e6:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   1d4ea:	bf1c      	itt	ne
   1d4ec:	40d0      	lsrne	r0, r2
   1d4ee:	f000 0001 	andne.w	r0, r0, #1
   1d4f2:	6018      	str	r0, [r3, #0]
}
   1d4f4:	2000      	movs	r0, #0
   1d4f6:	bd70      	pop	{r4, r5, r6, pc}

0001d4f8 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d4f8:	6883      	ldr	r3, [r0, #8]
{
   1d4fa:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   1d4fc:	6818      	ldr	r0, [r3, #0]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   1d4fe:	b158      	cbz	r0, 1d518 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d500:	2400      	movs	r4, #0
   1d502:	4281      	cmp	r1, r0
   1d504:	d113      	bne.n	1d52e <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1d506:	6808      	ldr	r0, [r1, #0]
   1d508:	b95c      	cbnz	r4, 1d522 <gpio_nrfx_manage_callback+0x2a>
   1d50a:	685c      	ldr	r4, [r3, #4]
	list->head = node;
   1d50c:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d50e:	42a1      	cmp	r1, r4
   1d510:	d100      	bne.n	1d514 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1d512:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1d514:	2000      	movs	r0, #0
   1d516:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1d518:	b972      	cbnz	r2, 1d538 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1d51a:	2000      	movs	r0, #0
}
   1d51c:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d51e:	4628      	mov	r0, r5
   1d520:	e7ef      	b.n	1d502 <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
   1d522:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d524:	6858      	ldr	r0, [r3, #4]
   1d526:	4281      	cmp	r1, r0
	list->tail = node;
   1d528:	bf08      	it	eq
   1d52a:	605c      	streq	r4, [r3, #4]
   1d52c:	e7f2      	b.n	1d514 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d52e:	6805      	ldr	r5, [r0, #0]
	return node->next;
   1d530:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d532:	2d00      	cmp	r5, #0
   1d534:	d1f3      	bne.n	1d51e <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1d536:	b13a      	cbz	r2, 1d548 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1d538:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   1d53a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d53c:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   1d53e:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d540:	2800      	cmp	r0, #0
   1d542:	d1ea      	bne.n	1d51a <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1d544:	6059      	str	r1, [r3, #4]
   1d546:	e7e9      	b.n	1d51c <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1d548:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d54c:	e7e6      	b.n	1d51c <gpio_nrfx_manage_callback+0x24>

0001d54e <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1d54e:	2901      	cmp	r1, #1
{
   1d550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1d554:	bf18      	it	ne
   1d556:	b2d4      	uxtbne	r4, r2
{
   1d558:	4606      	mov	r6, r0
		to_pin   = pin;
   1d55a:	bf12      	itee	ne
   1d55c:	4625      	movne	r5, r4
		to_pin   = 31U;
   1d55e:	251f      	moveq	r5, #31
		from_pin = 0U;
   1d560:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1d562:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   1d566:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1d568:	42ac      	cmp	r4, r5
   1d56a:	d902      	bls.n	1d572 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   1d56c:	2000      	movs	r0, #0
}
   1d56e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1d572:	68fb      	ldr	r3, [r7, #12]
   1d574:	fa08 f204 	lsl.w	r2, r8, r4
   1d578:	ea23 0302 	bic.w	r3, r3, r2
   1d57c:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1d57e:	4621      	mov	r1, r4
   1d580:	4630      	mov	r0, r6
   1d582:	f7f3 fb43 	bl	10c0c <gpiote_pin_int_cfg>
		if (res != 0) {
   1d586:	2800      	cmp	r0, #0
   1d588:	d1f1      	bne.n	1d56e <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1d58a:	3401      	adds	r4, #1
   1d58c:	b2e4      	uxtb	r4, r4
   1d58e:	e7eb      	b.n	1d568 <gpio_nrfx_pin_disable_callback+0x1a>

0001d590 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1d590:	2901      	cmp	r1, #1
{
   1d592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1d596:	bf18      	it	ne
   1d598:	b2d4      	uxtbne	r4, r2
{
   1d59a:	4606      	mov	r6, r0
		to_pin   = pin;
   1d59c:	bf12      	itee	ne
   1d59e:	4625      	movne	r5, r4
		to_pin   = 31U;
   1d5a0:	251f      	moveq	r5, #31
		from_pin = 0U;
   1d5a2:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1d5a4:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   1d5a8:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1d5aa:	42ac      	cmp	r4, r5
   1d5ac:	d902      	bls.n	1d5b4 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   1d5ae:	2000      	movs	r0, #0
}
   1d5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1d5b4:	68fb      	ldr	r3, [r7, #12]
   1d5b6:	fa08 f204 	lsl.w	r2, r8, r4
   1d5ba:	4313      	orrs	r3, r2
   1d5bc:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1d5be:	4621      	mov	r1, r4
   1d5c0:	4630      	mov	r0, r6
   1d5c2:	f7f3 fb23 	bl	10c0c <gpiote_pin_int_cfg>
		if (res != 0) {
   1d5c6:	2800      	cmp	r0, #0
   1d5c8:	d1f2      	bne.n	1d5b0 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1d5ca:	3401      	adds	r4, #1
   1d5cc:	b2e4      	uxtb	r4, r4
   1d5ce:	e7ec      	b.n	1d5aa <gpio_nrfx_pin_enable_callback+0x1a>

0001d5d0 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   1d5d0:	6882      	ldr	r2, [r0, #8]
	return dev->config->config_info;
   1d5d2:	6803      	ldr	r3, [r0, #0]
	if (data->int_driven->disable_tx_irq &&
   1d5d4:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   1d5d6:	689b      	ldr	r3, [r3, #8]
	if (data->int_driven->disable_tx_irq &&
   1d5d8:	7b91      	ldrb	r1, [r2, #14]
	return config->uarte_regs;
   1d5da:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   1d5dc:	b159      	cbz	r1, 1d5f6 <uarte_nrfx_isr_int+0x26>
   1d5de:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1d5e2:	b141      	cbz	r1, 1d5f6 <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   1d5e4:	f44f 7180 	mov.w	r1, #256	; 0x100
   1d5e8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d5ec:	2101      	movs	r1, #1
   1d5ee:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   1d5f0:	2300      	movs	r3, #0
   1d5f2:	7393      	strb	r3, [r2, #14]
		return;
   1d5f4:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d5f6:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1d5fa:	b111      	cbz	r1, 1d602 <uarte_nrfx_isr_int+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d5fc:	2100      	movs	r1, #0
   1d5fe:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1d602:	6813      	ldr	r3, [r2, #0]
   1d604:	b10b      	cbz	r3, 1d60a <uarte_nrfx_isr_int+0x3a>
		data->int_driven->cb(data->int_driven->cb_data);
   1d606:	6850      	ldr	r0, [r2, #4]
   1d608:	4718      	bx	r3
}
   1d60a:	4770      	bx	lr

0001d60c <uarte_nrfx_config_get>:
{
   1d60c:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1d60e:	6882      	ldr	r2, [r0, #8]
   1d610:	e892 0003 	ldmia.w	r2, {r0, r1}
   1d614:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1d618:	2000      	movs	r0, #0
   1d61a:	4770      	bx	lr

0001d61c <uarte_nrfx_err_check>:
	return dev->config->config_info;
   1d61c:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1d61e:	689b      	ldr	r3, [r3, #8]
   1d620:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1d622:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1d626:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1d62a:	4770      	bx	lr

0001d62c <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   1d62c:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1d62e:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   1d630:	689b      	ldr	r3, [r3, #8]
   1d632:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d634:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d638:	b138      	cbz	r0, 1d64a <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   1d63a:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d63c:	2000      	movs	r0, #0
   1d63e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d640:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d642:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d646:	601a      	str	r2, [r3, #0]
	return 0;
   1d648:	4770      	bx	lr
		return -1;
   1d64a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1d64e:	4770      	bx	lr

0001d650 <uarte_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d650:	2200      	movs	r2, #0
	return dev->config->config_info;
   1d652:	6803      	ldr	r3, [r0, #0]
{
   1d654:	b082      	sub	sp, #8
	return config->uarte_regs;
   1d656:	689b      	ldr	r3, [r3, #8]
{
   1d658:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   1d65c:	681b      	ldr	r3, [r3, #0]
   1d65e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d662:	f10d 0207 	add.w	r2, sp, #7
   1d666:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d66a:	2201      	movs	r2, #1
   1d66c:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d670:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d672:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1d676:	2900      	cmp	r1, #0
   1d678:	d0fb      	beq.n	1d672 <uarte_nrfx_poll_out+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d67a:	60da      	str	r2, [r3, #12]
}
   1d67c:	b002      	add	sp, #8
   1d67e:	4770      	bx	lr

0001d680 <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   1d680:	6803      	ldr	r3, [r0, #0]
{
   1d682:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   1d684:	689b      	ldr	r3, [r3, #8]
   1d686:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d688:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1d68c:	b1bb      	cbz	r3, 1d6be <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1d68e:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   1d690:	68ab      	ldr	r3, [r5, #8]
   1d692:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d694:	2300      	movs	r3, #0
   1d696:	4290      	cmp	r0, r2
   1d698:	bfa8      	it	ge
   1d69a:	4610      	movge	r0, r2
   1d69c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   1d6a0:	68aa      	ldr	r2, [r5, #8]
   1d6a2:	4283      	cmp	r3, r0
   1d6a4:	6892      	ldr	r2, [r2, #8]
   1d6a6:	db06      	blt.n	1d6b6 <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d6a8:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d6aa:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d6ae:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d6b2:	60a3      	str	r3, [r4, #8]
}
   1d6b4:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1d6b6:	5cce      	ldrb	r6, [r1, r3]
   1d6b8:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   1d6ba:	3301      	adds	r3, #1
   1d6bc:	e7f0      	b.n	1d6a0 <uarte_nrfx_fifo_fill+0x20>
		return 0;
   1d6be:	4618      	mov	r0, r3
   1d6c0:	e7f8      	b.n	1d6b4 <uarte_nrfx_fifo_fill+0x34>

0001d6c2 <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   1d6c2:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1d6c4:	689b      	ldr	r3, [r3, #8]
   1d6c6:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d6c8:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d6cc:	b143      	cbz	r3, 1d6e0 <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1d6ce:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d6d0:	2000      	movs	r0, #0
   1d6d2:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d6d6:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   1d6d8:	7b1b      	ldrb	r3, [r3, #12]
   1d6da:	700b      	strb	r3, [r1, #0]
   1d6dc:	6010      	str	r0, [r2, #0]
   1d6de:	4770      	bx	lr
	int num_rx = 0;
   1d6e0:	4618      	mov	r0, r3
}
   1d6e2:	4770      	bx	lr

0001d6e4 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   1d6e4:	2100      	movs	r1, #0
	return dev->config->config_info;
   1d6e6:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   1d6e8:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   1d6ea:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   1d6ec:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   1d6ee:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   1d6f0:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   1d6f2:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d6f6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d6fa:	4770      	bx	lr

0001d6fc <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1d6fc:	2201      	movs	r2, #1
   1d6fe:	6883      	ldr	r3, [r0, #8]
   1d700:	689b      	ldr	r3, [r3, #8]
   1d702:	739a      	strb	r2, [r3, #14]
}
   1d704:	4770      	bx	lr

0001d706 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   1d706:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1d708:	689b      	ldr	r3, [r3, #8]
   1d70a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d70c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   1d710:	b118      	cbz	r0, 1d71a <uarte_nrfx_irq_tx_ready_complete+0x14>
    return p_reg->INTENSET & mask;
   1d712:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   1d716:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   1d71a:	4770      	bx	lr

0001d71c <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   1d71c:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1d71e:	689b      	ldr	r3, [r3, #8]
   1d720:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d722:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1d726:	3000      	adds	r0, #0
   1d728:	bf18      	it	ne
   1d72a:	2001      	movne	r0, #1
   1d72c:	4770      	bx	lr

0001d72e <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   1d72e:	2210      	movs	r2, #16
	return dev->config->config_info;
   1d730:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1d732:	689b      	ldr	r3, [r3, #8]
   1d734:	681b      	ldr	r3, [r3, #0]
   1d736:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d73a:	4770      	bx	lr

0001d73c <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   1d73c:	2210      	movs	r2, #16
	return dev->config->config_info;
   1d73e:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1d740:	689b      	ldr	r3, [r3, #8]
   1d742:	681b      	ldr	r3, [r3, #0]
   1d744:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1d748:	4770      	bx	lr

0001d74a <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1d74a:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   1d74e:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1d750:	689b      	ldr	r3, [r3, #8]
   1d752:	681b      	ldr	r3, [r3, #0]
   1d754:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d758:	4770      	bx	lr

0001d75a <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1d75a:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   1d75e:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1d760:	689b      	ldr	r3, [r3, #8]
   1d762:	681b      	ldr	r3, [r3, #0]
   1d764:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1d768:	4770      	bx	lr

0001d76a <uarte_nrfx_irq_update>:
}
   1d76a:	2001      	movs	r0, #1
   1d76c:	4770      	bx	lr

0001d76e <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1d76e:	6883      	ldr	r3, [r0, #8]
   1d770:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   1d772:	e9c3 1200 	strd	r1, r2, [r3]
}
   1d776:	4770      	bx	lr

0001d778 <uarte_nrfx_irq_is_pending>:
{
   1d778:	b508      	push	{r3, lr}
	return dev->config->config_info;
   1d77a:	6803      	ldr	r3, [r0, #0]
{
   1d77c:	4602      	mov	r2, r0
	return config->uarte_regs;
   1d77e:	689b      	ldr	r3, [r3, #8]
   1d780:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   1d782:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   1d786:	05db      	lsls	r3, r3, #23
   1d788:	d405      	bmi.n	1d796 <uarte_nrfx_irq_is_pending+0x1e>
   1d78a:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   1d78e:	f010 0010 	ands.w	r0, r0, #16
   1d792:	d106      	bne.n	1d7a2 <uarte_nrfx_irq_is_pending+0x2a>
}
   1d794:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1d796:	f7ff ffb6 	bl	1d706 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   1d79a:	2800      	cmp	r0, #0
   1d79c:	d0f5      	beq.n	1d78a <uarte_nrfx_irq_is_pending+0x12>
		||
   1d79e:	2001      	movs	r0, #1
   1d7a0:	e7f8      	b.n	1d794 <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   1d7a2:	4610      	mov	r0, r2
   1d7a4:	f7ff ffba 	bl	1d71c <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1d7a8:	3000      	adds	r0, #0
   1d7aa:	bf18      	it	ne
   1d7ac:	2001      	movne	r0, #1
   1d7ae:	e7f1      	b.n	1d794 <uarte_nrfx_irq_is_pending+0x1c>

0001d7b0 <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   1d7b0:	2000      	movs	r0, #0
   1d7b2:	4770      	bx	lr

0001d7b4 <entropy_cc310_rng_get_entropy>:
{
   1d7b4:	b513      	push	{r0, r1, r4, lr}
   1d7b6:	4614      	mov	r4, r2
   1d7b8:	4608      	mov	r0, r1
	res = spm_request_random_number(buffer, length, &olen);
   1d7ba:	aa01      	add	r2, sp, #4
   1d7bc:	4621      	mov	r1, r4
   1d7be:	f7ea fc17 	bl	7ff0 <spm_request_random_number>
	if (olen != length) {
   1d7c2:	9b01      	ldr	r3, [sp, #4]
   1d7c4:	429c      	cmp	r4, r3
}
   1d7c6:	bf18      	it	ne
   1d7c8:	f06f 0015 	mvnne.w	r0, #21
   1d7cc:	b002      	add	sp, #8
   1d7ce:	bd10      	pop	{r4, pc}

0001d7d0 <z_errno>:
   1d7d0:	f7fd b906 	b.w	1a9e0 <z_impl_z_errno>

0001d7d4 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1d7d4:	4668      	mov	r0, sp
   1d7d6:	f020 0107 	bic.w	r1, r0, #7
   1d7da:	468d      	mov	sp, r1
   1d7dc:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   1d7de:	f7f7 f817 	bl	14810 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1d7e2:	f7f1 fdbd 	bl	f360 <_arch_isr_direct_pm>
   1d7e6:	f7f1 fcfd 	bl	f1e4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1d7ea:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1d7ee:	4685      	mov	sp, r0
   1d7f0:	4770      	bx	lr

0001d7f2 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1d7f2:	4668      	mov	r0, sp
   1d7f4:	f020 0107 	bic.w	r1, r0, #7
   1d7f8:	468d      	mov	sp, r1
   1d7fa:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   1d7fc:	f7f7 fc0c 	bl	15018 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1d800:	f7f1 fdae 	bl	f360 <_arch_isr_direct_pm>
   1d804:	f7f1 fcee 	bl	f1e4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1d808:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1d80c:	4685      	mov	sp, r0
   1d80e:	4770      	bx	lr

0001d810 <trace_task_create>:
{
   1d810:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   1d812:	201d      	movs	r0, #29
   1d814:	2200      	movs	r2, #0
   1d816:	2106      	movs	r1, #6
   1d818:	f7f1 fd8a 	bl	f330 <z_arm_irq_priority_set>
}
   1d81c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   1d820:	201d      	movs	r0, #29
   1d822:	f7f1 bd75 	b.w	f310 <arch_irq_enable>

0001d826 <read_task_create>:
{
   1d826:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   1d828:	201c      	movs	r0, #28
   1d82a:	2200      	movs	r2, #0
   1d82c:	2106      	movs	r1, #6
   1d82e:	f7f1 fd7f 	bl	f330 <z_arm_irq_priority_set>
}
   1d832:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   1d836:	201c      	movs	r0, #28
   1d838:	f7f1 bd6a 	b.w	f310 <arch_irq_enable>

0001d83c <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   1d83c:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   1d840:	bf18      	it	ne
   1d842:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   1d844:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   1d846:	bf48      	it	mi
   1d848:	f043 0308 	orrmi.w	r3, r3, #8
}
   1d84c:	4618      	mov	r0, r3
   1d84e:	4770      	bx	lr

0001d850 <z_to_nrf_family>:
	switch (z_family) {
   1d850:	2803      	cmp	r0, #3
   1d852:	d00f      	beq.n	1d874 <z_to_nrf_family+0x24>
   1d854:	d808      	bhi.n	1d868 <z_to_nrf_family+0x18>
   1d856:	2801      	cmp	r0, #1
   1d858:	d00e      	beq.n	1d878 <z_to_nrf_family+0x28>
   1d85a:	2802      	cmp	r0, #2
		return -EAFNOSUPPORT;
   1d85c:	bf08      	it	eq
   1d85e:	200a      	moveq	r0, #10
   1d860:	bf18      	it	ne
   1d862:	f06f 002e 	mvnne.w	r0, #46	; 0x2e
   1d866:	4770      	bx	lr
	switch (z_family) {
   1d868:	2866      	cmp	r0, #102	; 0x66
   1d86a:	d006      	beq.n	1d87a <z_to_nrf_family+0x2a>
   1d86c:	2867      	cmp	r0, #103	; 0x67
		return -EAFNOSUPPORT;
   1d86e:	bf08      	it	eq
   1d870:	2001      	moveq	r0, #1
   1d872:	e7f5      	b.n	1d860 <z_to_nrf_family+0x10>
		return NRF_AF_PACKET;
   1d874:	2005      	movs	r0, #5
   1d876:	4770      	bx	lr
		return NRF_AF_INET;
   1d878:	2002      	movs	r0, #2
}
   1d87a:	4770      	bx	lr

0001d87c <z_to_nrf_protocol>:
	switch (proto) {
   1d87c:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   1d880:	d01d      	beq.n	1d8be <z_to_nrf_protocol+0x42>
   1d882:	dc08      	bgt.n	1d896 <z_to_nrf_protocol+0x1a>
   1d884:	2806      	cmp	r0, #6
   1d886:	d01d      	beq.n	1d8c4 <z_to_nrf_protocol+0x48>
   1d888:	2811      	cmp	r0, #17
   1d88a:	d01d      	beq.n	1d8c8 <z_to_nrf_protocol+0x4c>
   1d88c:	2800      	cmp	r0, #0
		return -EPROTONOSUPPORT;
   1d88e:	bf18      	it	ne
   1d890:	f06f 002a 	mvnne.w	r0, #42	; 0x2a
   1d894:	4770      	bx	lr
	switch (proto) {
   1d896:	f240 2301 	movw	r3, #513	; 0x201
   1d89a:	4298      	cmp	r0, r3
   1d89c:	d015      	beq.n	1d8ca <z_to_nrf_protocol+0x4e>
   1d89e:	dc06      	bgt.n	1d8ae <z_to_nrf_protocol+0x32>
   1d8a0:	f240 1311 	movw	r3, #273	; 0x111
   1d8a4:	4298      	cmp	r0, r3
		return -EPROTONOSUPPORT;
   1d8a6:	bf08      	it	eq
   1d8a8:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   1d8ac:	e7ef      	b.n	1d88e <z_to_nrf_protocol+0x12>
	switch (proto) {
   1d8ae:	f240 2302 	movw	r3, #514	; 0x202
   1d8b2:	4298      	cmp	r0, r3
   1d8b4:	d009      	beq.n	1d8ca <z_to_nrf_protocol+0x4e>
   1d8b6:	f240 2303 	movw	r3, #515	; 0x203
   1d8ba:	4298      	cmp	r0, r3
   1d8bc:	e7e7      	b.n	1d88e <z_to_nrf_protocol+0x12>
		return NRF_SPROTO_TLS1v2;
   1d8be:	f44f 7082 	mov.w	r0, #260	; 0x104
   1d8c2:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   1d8c4:	2001      	movs	r0, #1
   1d8c6:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   1d8c8:	2002      	movs	r0, #2
}
   1d8ca:	4770      	bx	lr

0001d8cc <nrf91_bsdlib_socket_offload_init>:
}
   1d8cc:	2000      	movs	r0, #0
   1d8ce:	4770      	bx	lr

0001d8d0 <z_errno>:
   1d8d0:	f7fd b886 	b.w	1a9e0 <z_impl_z_errno>

0001d8d4 <nrf91_socket_offload_freeaddrinfo>:
{
   1d8d4:	b538      	push	{r3, r4, r5, lr}
   1d8d6:	4604      	mov	r4, r0
	while (next != NULL) {
   1d8d8:	b904      	cbnz	r4, 1d8dc <nrf91_socket_offload_freeaddrinfo+0x8>
}
   1d8da:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   1d8dc:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   1d8de:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   1d8e0:	f000 fd35 	bl	1e34e <k_free>
		k_free(this);
   1d8e4:	4620      	mov	r0, r4
   1d8e6:	f000 fd32 	bl	1e34e <k_free>
		next = next->ai_next;
   1d8ea:	462c      	mov	r4, r5
   1d8ec:	e7f4      	b.n	1d8d8 <nrf91_socket_offload_freeaddrinfo+0x4>

0001d8ee <z_to_nrf_addrinfo_hints>:
{
   1d8ee:	b538      	push	{r3, r4, r5, lr}
   1d8f0:	460c      	mov	r4, r1
   1d8f2:	4605      	mov	r5, r0
	memset(nrf_out, 0, sizeof(struct nrf_addrinfo));
   1d8f4:	2220      	movs	r2, #32
   1d8f6:	2100      	movs	r1, #0
   1d8f8:	4620      	mov	r0, r4
   1d8fa:	f7ff fc00 	bl	1d0fe <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   1d8fe:	2300      	movs	r3, #0
   1d900:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1d902:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   1d904:	2b03      	cmp	r3, #3
   1d906:	d003      	beq.n	1d910 <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   1d908:	2b04      	cmp	r3, #4
   1d90a:	bf08      	it	eq
   1d90c:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1d910:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   1d912:	88a8      	ldrh	r0, [r5, #4]
   1d914:	f7ff ff9c 	bl	1d850 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1d918:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
   1d91c:	d00b      	beq.n	1d936 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   1d91e:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1d920:	68e8      	ldr	r0, [r5, #12]
   1d922:	f7ff ffab 	bl	1d87c <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1d926:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1d92a:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1d92c:	d003      	beq.n	1d936 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   1d92e:	69a8      	ldr	r0, [r5, #24]
   1d930:	b108      	cbz	r0, 1d936 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   1d932:	61a0      	str	r0, [r4, #24]
	return 0;
   1d934:	2000      	movs	r0, #0
}
   1d936:	bd38      	pop	{r3, r4, r5, pc}

0001d938 <nrf91_socket_offload_send>:
{
   1d938:	b570      	push	{r4, r5, r6, lr}
   1d93a:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1d93c:	4618      	mov	r0, r3
{
   1d93e:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1d940:	f7ff ff7c 	bl	1d83c <z_to_nrf_flags>
   1d944:	462a      	mov	r2, r5
   1d946:	4603      	mov	r3, r0
   1d948:	4620      	mov	r0, r4
}
   1d94a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1d94e:	f7f9 b987 	b.w	16c60 <nrf_send>

0001d952 <nrf91_socket_offload_recv>:
{
   1d952:	b570      	push	{r4, r5, r6, lr}
   1d954:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1d956:	4618      	mov	r0, r3
{
   1d958:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1d95a:	f7ff ff6f 	bl	1d83c <z_to_nrf_flags>
   1d95e:	462a      	mov	r2, r5
   1d960:	4603      	mov	r3, r0
   1d962:	4620      	mov	r0, r4
}
   1d964:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1d968:	f7f9 b9b0 	b.w	16ccc <nrf_recv>

0001d96c <nrf91_socket_offload_getsockopt>:
{
   1d96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d970:	461d      	mov	r5, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   1d972:	2300      	movs	r3, #0
{
   1d974:	b086      	sub	sp, #24
   1d976:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   1d97a:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1d97e:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   1d982:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   1d986:	4607      	mov	r7, r0
   1d988:	460c      	mov	r4, r1
   1d98a:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1d98c:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   1d98e:	d002      	beq.n	1d996 <nrf91_socket_offload_getsockopt+0x2a>
   1d990:	dc2b      	bgt.n	1d9ea <nrf91_socket_offload_getsockopt+0x7e>
   1d992:	2901      	cmp	r1, #1
   1d994:	d13d      	bne.n	1da12 <nrf91_socket_offload_getsockopt+0xa6>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1d996:	aa02      	add	r2, sp, #8
   1d998:	4631      	mov	r1, r6
   1d99a:	4620      	mov	r0, r4
   1d99c:	f7f3 fe54 	bl	11648 <z_to_nrf_optname>
   1d9a0:	2800      	cmp	r0, #0
   1d9a2:	db36      	blt.n	1da12 <nrf91_socket_offload_getsockopt+0xa6>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   1d9a4:	2c01      	cmp	r4, #1
   1d9a6:	d128      	bne.n	1d9fa <nrf91_socket_offload_getsockopt+0x8e>
   1d9a8:	2e14      	cmp	r6, #20
   1d9aa:	d126      	bne.n	1d9fa <nrf91_socket_offload_getsockopt+0x8e>
		nrf_optlen = sizeof(struct nrf_timeval);
   1d9ac:	2308      	movs	r3, #8
   1d9ae:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   1d9b0:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1d9b2:	aa03      	add	r2, sp, #12
   1d9b4:	9200      	str	r2, [sp, #0]
   1d9b6:	4638      	mov	r0, r7
   1d9b8:	9a02      	ldr	r2, [sp, #8]
   1d9ba:	4621      	mov	r1, r4
   1d9bc:	f7f9 fa06 	bl	16dcc <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   1d9c0:	4607      	mov	r7, r0
   1d9c2:	b970      	cbnz	r0, 1d9e2 <nrf91_socket_offload_getsockopt+0x76>
   1d9c4:	b16d      	cbz	r5, 1d9e2 <nrf91_socket_offload_getsockopt+0x76>
		*optlen = nrf_optlen;
   1d9c6:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   1d9c8:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   1d9ca:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   1d9ce:	d108      	bne.n	1d9e2 <nrf91_socket_offload_getsockopt+0x76>
			if (optname == SO_ERROR) {
   1d9d0:	2e04      	cmp	r6, #4
   1d9d2:	d114      	bne.n	1d9fe <nrf91_socket_offload_getsockopt+0x92>
				bsd_os_errno_set(*(int *)optval);
   1d9d4:	6828      	ldr	r0, [r5, #0]
   1d9d6:	f7f3 fd1b 	bl	11410 <bsd_os_errno_set>
				*(int *)optval = errno;
   1d9da:	f7ff ff79 	bl	1d8d0 <z_errno>
   1d9de:	6803      	ldr	r3, [r0, #0]
   1d9e0:	602b      	str	r3, [r5, #0]
}
   1d9e2:	4638      	mov	r0, r7
   1d9e4:	b006      	add	sp, #24
   1d9e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1d9ea:	f240 2302 	movw	r3, #514	; 0x202
   1d9ee:	4299      	cmp	r1, r3
   1d9f0:	d0d1      	beq.n	1d996 <nrf91_socket_offload_getsockopt+0x2a>
   1d9f2:	f240 2303 	movw	r3, #515	; 0x203
   1d9f6:	4299      	cmp	r1, r3
   1d9f8:	e7cc      	b.n	1d994 <nrf91_socket_offload_getsockopt+0x28>
   1d9fa:	462b      	mov	r3, r5
   1d9fc:	e7d9      	b.n	1d9b2 <nrf91_socket_offload_getsockopt+0x46>
			} else if (optname == SO_RCVTIMEO) {
   1d9fe:	2e14      	cmp	r6, #20
   1da00:	d1ef      	bne.n	1d9e2 <nrf91_socket_offload_getsockopt+0x76>
				((struct timeval *)optval)->tv_sec =
   1da02:	9b04      	ldr	r3, [sp, #16]
   1da04:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   1da06:	9b05      	ldr	r3, [sp, #20]
   1da08:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   1da0a:	2308      	movs	r3, #8
   1da0c:	f8c8 3000 	str.w	r3, [r8]
   1da10:	e7e7      	b.n	1d9e2 <nrf91_socket_offload_getsockopt+0x76>
	errno = ENOPROTOOPT;
   1da12:	f7ff ff5d 	bl	1d8d0 <z_errno>
   1da16:	232a      	movs	r3, #42	; 0x2a
	return retval;
   1da18:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	errno = ENOPROTOOPT;
   1da1c:	6003      	str	r3, [r0, #0]
	return retval;
   1da1e:	e7e0      	b.n	1d9e2 <nrf91_socket_offload_getsockopt+0x76>

0001da20 <nrf91_socket_offload_poll>:
{
   1da20:	b5f0      	push	{r4, r5, r6, r7, lr}
   1da22:	b091      	sub	sp, #68	; 0x44
   1da24:	4605      	mov	r5, r0
   1da26:	460c      	mov	r4, r1
   1da28:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   1da2a:	2100      	movs	r1, #0
   1da2c:	2240      	movs	r2, #64	; 0x40
   1da2e:	4668      	mov	r0, sp
   1da30:	f7ff fb65 	bl	1d0fe <memset>
	for (int i = 0; i < nfds; i++) {
   1da34:	466a      	mov	r2, sp
   1da36:	2100      	movs	r1, #0
		if (fds[i].events & POLLIN) {
   1da38:	1d2f      	adds	r7, r5, #4
	for (int i = 0; i < nfds; i++) {
   1da3a:	42a1      	cmp	r1, r4
   1da3c:	db0c      	blt.n	1da58 <nrf91_socket_offload_poll+0x38>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   1da3e:	4632      	mov	r2, r6
   1da40:	4621      	mov	r1, r4
   1da42:	4668      	mov	r0, sp
   1da44:	f7f9 f9e2 	bl	16e0c <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   1da48:	2200      	movs	r2, #0
   1da4a:	462b      	mov	r3, r5
		fds[i].revents = 0;
   1da4c:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   1da4e:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   1da50:	42a2      	cmp	r2, r4
   1da52:	db1a      	blt.n	1da8a <nrf91_socket_offload_poll+0x6a>
}
   1da54:	b011      	add	sp, #68	; 0x44
   1da56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   1da58:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   1da5c:	f837 0031 	ldrh.w	r0, [r7, r1, lsl #3]
		tmp[i].handle = fds[i].fd;
   1da60:	6013      	str	r3, [r2, #0]
		if (fds[i].events & POLLIN) {
   1da62:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   1da64:	bf48      	it	mi
   1da66:	8893      	ldrhmi	r3, [r2, #4]
	for (int i = 0; i < nfds; i++) {
   1da68:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   1da6c:	bf44      	itt	mi
   1da6e:	f043 0301 	orrmi.w	r3, r3, #1
   1da72:	8093      	strhmi	r3, [r2, #4]
		if (fds[i].events & POLLOUT) {
   1da74:	0743      	lsls	r3, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   1da76:	bf48      	it	mi
   1da78:	8893      	ldrhmi	r3, [r2, #4]
   1da7a:	f102 0208 	add.w	r2, r2, #8
   1da7e:	bf44      	itt	mi
   1da80:	f043 0302 	orrmi.w	r3, r3, #2
   1da84:	f822 3c04 	strhmi.w	r3, [r2, #-4]
   1da88:	e7d7      	b.n	1da3a <nrf91_socket_offload_poll+0x1a>
		if (tmp[i].returned & NRF_POLLIN) {
   1da8a:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   1da8e:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   1da90:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   1da92:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   1da94:	bf48      	it	mi
   1da96:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   1da98:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   1da9a:	bf48      	it	mi
   1da9c:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   1da9e:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   1daa2:	bf44      	itt	mi
   1daa4:	f045 0504 	orrmi.w	r5, r5, #4
   1daa8:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   1daaa:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   1daac:	bf48      	it	mi
   1daae:	88dd      	ldrhmi	r5, [r3, #6]
   1dab0:	f103 0308 	add.w	r3, r3, #8
   1dab4:	bf44      	itt	mi
   1dab6:	f045 0508 	orrmi.w	r5, r5, #8
   1daba:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   1dabe:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   1dac0:	bf42      	ittt	mi
   1dac2:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   1dac6:	f045 0520 	orrmi.w	r5, r5, #32
   1daca:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   1dace:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   1dad0:	bf42      	ittt	mi
   1dad2:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   1dad6:	f041 0110 	orrmi.w	r1, r1, #16
   1dada:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   1dade:	e7b7      	b.n	1da50 <nrf91_socket_offload_poll+0x30>

0001dae0 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   1dae0:	f7f9 b920 	b.w	16d24 <nrf_listen>

0001dae4 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   1dae4:	f7f9 b892 	b.w	16c0c <nrf_close>

0001dae8 <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   1dae8:	2903      	cmp	r1, #3
{
   1daea:	b508      	push	{r3, lr}
	switch (cmd) {
   1daec:	d00b      	beq.n	1db06 <nrf91_socket_offload_fcntl+0x1e>
   1daee:	2904      	cmp	r1, #4
   1daf0:	d111      	bne.n	1db16 <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   1daf2:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   1daf4:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   1daf8:	d10d      	bne.n	1db16 <nrf91_socket_offload_fcntl+0x2e>
}
   1dafa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1dafe:	1392      	asrs	r2, r2, #14
   1db00:	2101      	movs	r1, #1
   1db02:	f7f9 b985 	b.w	16e10 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   1db06:	2200      	movs	r2, #0
   1db08:	2102      	movs	r1, #2
   1db0a:	f7f9 f981 	bl	16e10 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1db0e:	0380      	lsls	r0, r0, #14
   1db10:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   1db14:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   1db16:	f7ff fedb 	bl	1d8d0 <z_errno>
   1db1a:	2316      	movs	r3, #22
   1db1c:	6003      	str	r3, [r0, #0]
	return retval;
   1db1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1db22:	e7f7      	b.n	1db14 <nrf91_socket_offload_fcntl+0x2c>

0001db24 <nrf91_socket_offload_recvfrom>:
{
   1db24:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db26:	4605      	mov	r5, r0
   1db28:	b08d      	sub	sp, #52	; 0x34
   1db2a:	4618      	mov	r0, r3
   1db2c:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   1db30:	4617      	mov	r7, r2
	if (from == NULL) {
   1db32:	f7ff fe83 	bl	1d83c <z_to_nrf_flags>
   1db36:	4603      	mov	r3, r0
   1db38:	b94c      	cbnz	r4, 1db4e <nrf91_socket_offload_recvfrom+0x2a>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1db3a:	4628      	mov	r0, r5
   1db3c:	e9cd 4400 	strd	r4, r4, [sp]
   1db40:	463a      	mov	r2, r7
   1db42:	f7f9 f8a7 	bl	16c94 <nrf_recvfrom>
   1db46:	4605      	mov	r5, r0
}
   1db48:	4628      	mov	r0, r5
   1db4a:	b00d      	add	sp, #52	; 0x34
   1db4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   1db4e:	2224      	movs	r2, #36	; 0x24
   1db50:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1db52:	aa02      	add	r2, sp, #8
   1db54:	9201      	str	r2, [sp, #4]
   1db56:	aa03      	add	r2, sp, #12
   1db58:	9200      	str	r2, [sp, #0]
   1db5a:	4628      	mov	r0, r5
   1db5c:	463a      	mov	r2, r7
   1db5e:	f7f9 f899 	bl	16c94 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   1db62:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1db64:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   1db66:	2b02      	cmp	r3, #2
   1db68:	d109      	bne.n	1db7e <nrf91_socket_offload_recvfrom+0x5a>
	ptr->sin_port = nrf_in->sin_port;
   1db6a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1db6e:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1db70:	2301      	movs	r3, #1
   1db72:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1db74:	9b06      	ldr	r3, [sp, #24]
   1db76:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   1db78:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   1db7a:	6033      	str	r3, [r6, #0]
	return retval;
   1db7c:	e7e4      	b.n	1db48 <nrf91_socket_offload_recvfrom+0x24>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   1db7e:	2b0a      	cmp	r3, #10
   1db80:	d1e2      	bne.n	1db48 <nrf91_socket_offload_recvfrom+0x24>
	ptr->sin6_port = nrf_in->sin6_port;
   1db82:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	ptr->sin6_family = AF_INET6;
   1db86:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   1db88:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   1db8a:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1db8c:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   1db8e:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1db92:	a907      	add	r1, sp, #28
   1db94:	f7ff fa89 	bl	1d0aa <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1db98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1db9a:	7523      	strb	r3, [r4, #20]
			*fromlen = sizeof(struct sockaddr_in6);
   1db9c:	2318      	movs	r3, #24
   1db9e:	e7ec      	b.n	1db7a <nrf91_socket_offload_recvfrom+0x56>

0001dba0 <nrf91_socket_offload_connect>:
{
   1dba0:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1dba2:	880b      	ldrh	r3, [r1, #0]
{
   1dba4:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   1dba6:	2b01      	cmp	r3, #1
{
   1dba8:	4606      	mov	r6, r0
   1dbaa:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   1dbac:	d10e      	bne.n	1dbcc <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   1dbae:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1dbb0:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1dbb2:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1dbb6:	2302      	movs	r3, #2
   1dbb8:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1dbba:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1dbbc:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1dbc0:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   1dbc2:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1dbc4:	f7f9 f89c 	bl	16d00 <nrf_connect>
}
   1dbc8:	b00a      	add	sp, #40	; 0x28
   1dbca:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1dbcc:	2b02      	cmp	r3, #2
   1dbce:	d112      	bne.n	1dbf6 <nrf91_socket_offload_connect+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   1dbd0:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1dbd2:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1dbd4:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1dbd8:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1dbda:	2210      	movs	r2, #16
   1dbdc:	3104      	adds	r1, #4
   1dbde:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   1dbe0:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1dbe2:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1dbe6:	f7ff fa60 	bl	1d0aa <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1dbea:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1dbec:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1dbee:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1dbf0:	a901      	add	r1, sp, #4
   1dbf2:	4630      	mov	r0, r6
   1dbf4:	e7e6      	b.n	1dbc4 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   1dbf6:	f7f9 f883 	bl	16d00 <nrf_connect>
		if (retval < 0) {
   1dbfa:	2800      	cmp	r0, #0
   1dbfc:	dae4      	bge.n	1dbc8 <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   1dbfe:	f7ff fe67 	bl	1d8d0 <z_errno>
   1dc02:	2323      	movs	r3, #35	; 0x23
   1dc04:	6003      	str	r3, [r0, #0]
   1dc06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dc0a:	e7dd      	b.n	1dbc8 <nrf91_socket_offload_connect+0x28>

0001dc0c <nrf91_socket_offload_socket>:
{
   1dc0c:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   1dc0e:	b280      	uxth	r0, r0
   1dc10:	f7ff fe1e 	bl	1d850 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1dc14:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
	family = z_to_nrf_family(family);
   1dc18:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   1dc1a:	d106      	bne.n	1dc2a <nrf91_socket_offload_socket+0x1e>
		errno = EAFNOSUPPORT;
   1dc1c:	f7ff fe58 	bl	1d8d0 <z_errno>
   1dc20:	232f      	movs	r3, #47	; 0x2f
		errno = EPROTONOSUPPORT;
   1dc22:	6003      	str	r3, [r0, #0]
}
   1dc24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dc28:	bd10      	pop	{r4, pc}
	switch (socktype) {
   1dc2a:	2903      	cmp	r1, #3
   1dc2c:	d003      	beq.n	1dc36 <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   1dc2e:	2904      	cmp	r1, #4
   1dc30:	bf08      	it	eq
   1dc32:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   1dc36:	4610      	mov	r0, r2
   1dc38:	f7ff fe20 	bl	1d87c <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   1dc3c:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	proto = z_to_nrf_protocol(proto);
   1dc40:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   1dc42:	d103      	bne.n	1dc4c <nrf91_socket_offload_socket+0x40>
		errno = EPROTONOSUPPORT;
   1dc44:	f7ff fe44 	bl	1d8d0 <z_errno>
   1dc48:	232b      	movs	r3, #43	; 0x2b
   1dc4a:	e7ea      	b.n	1dc22 <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   1dc4c:	4620      	mov	r0, r4
}
   1dc4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   1dc52:	f7f8 bfc9 	b.w	16be8 <nrf_socket>

0001dc56 <nrf91_socket_offload_accept>:
{
   1dc56:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   1dc58:	2708      	movs	r7, #8
{
   1dc5a:	b085      	sub	sp, #20
   1dc5c:	460c      	mov	r4, r1
   1dc5e:	4616      	mov	r6, r2
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   1dc60:	eb0d 0107 	add.w	r1, sp, r7
   1dc64:	aa01      	add	r2, sp, #4
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   1dc66:	9701      	str	r7, [sp, #4]
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   1dc68:	f7f9 f86c 	bl	16d44 <nrf_accept>
	if (retval < 0) {
   1dc6c:	1e05      	subs	r5, r0, #0
   1dc6e:	db23      	blt.n	1dcb8 <nrf91_socket_offload_accept+0x62>
	if (nrf_addr.sa_family == NRF_AF_INET) {
   1dc70:	9b03      	ldr	r3, [sp, #12]
   1dc72:	2b02      	cmp	r3, #2
   1dc74:	d10a      	bne.n	1dc8c <nrf91_socket_offload_accept+0x36>
	ptr->sin_port = nrf_in->sin_port;
   1dc76:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		*addrlen = sizeof(struct sockaddr_in);
   1dc7a:	6037      	str	r7, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   1dc7c:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1dc7e:	2301      	movs	r3, #1
   1dc80:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1dc82:	9b05      	ldr	r3, [sp, #20]
   1dc84:	6063      	str	r3, [r4, #4]
}
   1dc86:	4628      	mov	r0, r5
   1dc88:	b005      	add	sp, #20
   1dc8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (nrf_addr.sa_family == NRF_AF_INET6) {
   1dc8c:	2b0a      	cmp	r3, #10
   1dc8e:	d10f      	bne.n	1dcb0 <nrf91_socket_offload_accept+0x5a>
		*addrlen = sizeof(struct sockaddr_in6);
   1dc90:	2318      	movs	r3, #24
   1dc92:	6033      	str	r3, [r6, #0]
	ptr->sin6_port = nrf_in->sin6_port;
   1dc94:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	ptr->sin6_family = AF_INET6;
   1dc98:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   1dc9a:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   1dc9c:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1dc9e:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   1dca0:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1dca4:	a906      	add	r1, sp, #24
   1dca6:	f7ff fa00 	bl	1d0aa <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1dcaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1dcac:	7523      	strb	r3, [r4, #20]
   1dcae:	e7ea      	b.n	1dc86 <nrf91_socket_offload_accept+0x30>
	errno = ENOTSUP;
   1dcb0:	f7ff fe0e 	bl	1d8d0 <z_errno>
   1dcb4:	2323      	movs	r3, #35	; 0x23
   1dcb6:	6003      	str	r3, [r0, #0]
		return -1;
   1dcb8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1dcbc:	e7e3      	b.n	1dc86 <nrf91_socket_offload_accept+0x30>

0001dcbe <nrf91_socket_offload_getaddrinfo>:
{
   1dcbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dcc2:	4614      	mov	r4, r2
   1dcc4:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   1dcc6:	2100      	movs	r1, #0
{
   1dcc8:	b093      	sub	sp, #76	; 0x4c
   1dcca:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1dccc:	2220      	movs	r2, #32
   1dcce:	a802      	add	r0, sp, #8
{
   1dcd0:	4698      	mov	r8, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1dcd2:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1dcd4:	f7ff fa13 	bl	1d0fe <memset>
	if (hints != NULL) {
   1dcd8:	b194      	cbz	r4, 1dd00 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   1dcda:	a902      	add	r1, sp, #8
   1dcdc:	4620      	mov	r0, r4
   1dcde:	f7ff fe06 	bl	1d8ee <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   1dce2:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
   1dce6:	f000 80bf 	beq.w	1de68 <nrf91_socket_offload_getaddrinfo+0x1aa>
		} else if (error == -EAFNOSUPPORT) {
   1dcea:	302f      	adds	r0, #47	; 0x2f
   1dcec:	f000 80bf 	beq.w	1de6e <nrf91_socket_offload_getaddrinfo+0x1b0>
		if (hints->ai_next != NULL) {
   1dcf0:	69e0      	ldr	r0, [r4, #28]
   1dcf2:	b120      	cbz	r0, 1dcfe <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   1dcf4:	ac0a      	add	r4, sp, #40	; 0x28
   1dcf6:	4621      	mov	r1, r4
   1dcf8:	f7ff fdf9 	bl	1d8ee <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   1dcfc:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   1dcfe:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   1dd00:	4631      	mov	r1, r6
   1dd02:	4628      	mov	r0, r5
   1dd04:	ab01      	add	r3, sp, #4
   1dd06:	4622      	mov	r2, r4
   1dd08:	f7f9 f87c 	bl	16e04 <nrf_getaddrinfo>
	*res = NULL;
   1dd0c:	2700      	movs	r7, #0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   1dd0e:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   1dd10:	f8c8 7000 	str.w	r7, [r8]
		return AF_INET6;
   1dd14:	f04f 0902 	mov.w	r9, #2
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1dd18:	4605      	mov	r5, r0
   1dd1a:	2800      	cmp	r0, #0
   1dd1c:	d04a      	beq.n	1ddb4 <nrf91_socket_offload_getaddrinfo+0xf6>
		nrf91_socket_offload_freeaddrinfo(*res);
   1dd1e:	f8d8 0000 	ldr.w	r0, [r8]
   1dd22:	f7ff fdd7 	bl	1d8d4 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   1dd26:	2300      	movs	r3, #0
   1dd28:	f8c8 3000 	str.w	r3, [r8]
   1dd2c:	e044      	b.n	1ddb8 <nrf91_socket_offload_getaddrinfo+0xfa>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   1dd2e:	2020      	movs	r0, #32
   1dd30:	f7fd f8a4 	bl	1ae7c <k_malloc>
		if (next_z_res == NULL) {
   1dd34:	4604      	mov	r4, r0
   1dd36:	2800      	cmp	r0, #0
   1dd38:	f000 8091 	beq.w	1de5e <nrf91_socket_offload_getaddrinfo+0x1a0>
	family = nrf_to_z_family(nrf_in->ai_family);
   1dd3c:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1dd3e:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   1dd40:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   1dd42:	e9c0 5506 	strd	r5, r5, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   1dd46:	6005      	str	r5, [r0, #0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1dd48:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   1dd4a:	d03c      	beq.n	1ddc6 <nrf91_socket_offload_getaddrinfo+0x108>
   1dd4c:	dc09      	bgt.n	1dd62 <nrf91_socket_offload_getaddrinfo+0xa4>
   1dd4e:	2a01      	cmp	r2, #1
   1dd50:	d03b      	beq.n	1ddca <nrf91_socket_offload_getaddrinfo+0x10c>
   1dd52:	2a02      	cmp	r2, #2
   1dd54:	d03b      	beq.n	1ddce <nrf91_socket_offload_getaddrinfo+0x110>
			k_free(next_z_res);
   1dd56:	4620      	mov	r0, r4
   1dd58:	f000 faf9 	bl	1e34e <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   1dd5c:	f06f 0508 	mvn.w	r5, #8
   1dd60:	e7dd      	b.n	1dd1e <nrf91_socket_offload_getaddrinfo+0x60>
	switch (nrf_family) {
   1dd62:	2a0a      	cmp	r2, #10
   1dd64:	d035      	beq.n	1ddd2 <nrf91_socket_offload_getaddrinfo+0x114>
   1dd66:	2a66      	cmp	r2, #102	; 0x66
   1dd68:	d1f5      	bne.n	1dd56 <nrf91_socket_offload_getaddrinfo+0x98>
		return AF_LTE;
   1dd6a:	4613      	mov	r3, r2
	z_out->ai_family = family;
   1dd6c:	6063      	str	r3, [r4, #4]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1dd6e:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   1dd70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1dd74:	d04e      	beq.n	1de14 <nrf91_socket_offload_getaddrinfo+0x156>
   1dd76:	dc2e      	bgt.n	1ddd6 <nrf91_socket_offload_getaddrinfo+0x118>
   1dd78:	2b01      	cmp	r3, #1
   1dd7a:	d050      	beq.n	1de1e <nrf91_socket_offload_getaddrinfo+0x160>
   1dd7c:	2b02      	cmp	r3, #2
   1dd7e:	d04c      	beq.n	1de1a <nrf91_socket_offload_getaddrinfo+0x15c>
   1dd80:	2b00      	cmp	r3, #0
   1dd82:	d130      	bne.n	1dde6 <nrf91_socket_offload_getaddrinfo+0x128>
	if (nrf_in->ai_family == NRF_AF_INET) {
   1dd84:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1dd86:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   1dd88:	d14b      	bne.n	1de22 <nrf91_socket_offload_getaddrinfo+0x164>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   1dd8a:	2008      	movs	r0, #8
   1dd8c:	f7fd f876 	bl	1ae7c <k_malloc>
   1dd90:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   1dd92:	2800      	cmp	r0, #0
   1dd94:	d060      	beq.n	1de58 <nrf91_socket_offload_getaddrinfo+0x19a>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   1dd96:	2308      	movs	r3, #8
   1dd98:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   1dd9a:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   1dd9c:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1dd9e:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   1dda0:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   1dda2:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1dda4:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   1dda6:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   1dda8:	2f00      	cmp	r7, #0
   1ddaa:	d15b      	bne.n	1de64 <nrf91_socket_offload_getaddrinfo+0x1a6>
			*res = next_z_res;
   1ddac:	f8c8 4000 	str.w	r4, [r8]
		next_nrf_res = next_nrf_res->ai_next;
   1ddb0:	4627      	mov	r7, r4
   1ddb2:	69f6      	ldr	r6, [r6, #28]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1ddb4:	2e00      	cmp	r6, #0
   1ddb6:	d1ba      	bne.n	1dd2e <nrf91_socket_offload_getaddrinfo+0x70>
	nrf_freeaddrinfo(nrf_res);
   1ddb8:	9801      	ldr	r0, [sp, #4]
   1ddba:	f7f9 f825 	bl	16e08 <nrf_freeaddrinfo>
}
   1ddbe:	4628      	mov	r0, r5
   1ddc0:	b013      	add	sp, #76	; 0x4c
   1ddc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return AF_PACKET;
   1ddc6:	2303      	movs	r3, #3
   1ddc8:	e7d0      	b.n	1dd6c <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_LOCAL;
   1ddca:	2367      	movs	r3, #103	; 0x67
   1ddcc:	e7ce      	b.n	1dd6c <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_INET;
   1ddce:	2301      	movs	r3, #1
   1ddd0:	e7cc      	b.n	1dd6c <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_INET6;
   1ddd2:	2302      	movs	r3, #2
   1ddd4:	e7ca      	b.n	1dd6c <nrf91_socket_offload_getaddrinfo+0xae>
	switch (proto) {
   1ddd6:	f240 2101 	movw	r1, #513	; 0x201
   1ddda:	428b      	cmp	r3, r1
   1dddc:	d0d2      	beq.n	1dd84 <nrf91_socket_offload_getaddrinfo+0xc6>
   1ddde:	dc0d      	bgt.n	1ddfc <nrf91_socket_offload_getaddrinfo+0x13e>
   1dde0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1dde4:	d013      	beq.n	1de0e <nrf91_socket_offload_getaddrinfo+0x150>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1dde6:	f06f 032a 	mvn.w	r3, #42	; 0x2a
   1ddea:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   1ddec:	2300      	movs	r3, #0
   1ddee:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   1ddf0:	4620      	mov	r0, r4
   1ddf2:	f000 faac 	bl	1e34e <k_free>
			retval = DNS_EAI_SOCKTYPE;
   1ddf6:	f06f 0506 	mvn.w	r5, #6
   1ddfa:	e790      	b.n	1dd1e <nrf91_socket_offload_getaddrinfo+0x60>
	switch (proto) {
   1ddfc:	f240 2102 	movw	r1, #514	; 0x202
   1de00:	428b      	cmp	r3, r1
   1de02:	d0bf      	beq.n	1dd84 <nrf91_socket_offload_getaddrinfo+0xc6>
   1de04:	f240 2103 	movw	r1, #515	; 0x203
   1de08:	428b      	cmp	r3, r1
   1de0a:	d0bb      	beq.n	1dd84 <nrf91_socket_offload_getaddrinfo+0xc6>
   1de0c:	e7eb      	b.n	1dde6 <nrf91_socket_offload_getaddrinfo+0x128>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1de0e:	f240 1311 	movw	r3, #273	; 0x111
   1de12:	e7b7      	b.n	1dd84 <nrf91_socket_offload_getaddrinfo+0xc6>
   1de14:	f44f 7381 	mov.w	r3, #258	; 0x102
   1de18:	e7b4      	b.n	1dd84 <nrf91_socket_offload_getaddrinfo+0xc6>
   1de1a:	2311      	movs	r3, #17
   1de1c:	e7b2      	b.n	1dd84 <nrf91_socket_offload_getaddrinfo+0xc6>
   1de1e:	2306      	movs	r3, #6
   1de20:	e7b0      	b.n	1dd84 <nrf91_socket_offload_getaddrinfo+0xc6>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   1de22:	2a0a      	cmp	r2, #10
   1de24:	d1e4      	bne.n	1ddf0 <nrf91_socket_offload_getaddrinfo+0x132>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1de26:	2018      	movs	r0, #24
   1de28:	f7fd f828 	bl	1ae7c <k_malloc>
   1de2c:	4682      	mov	sl, r0
   1de2e:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   1de30:	b190      	cbz	r0, 1de58 <nrf91_socket_offload_getaddrinfo+0x19a>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1de32:	2318      	movs	r3, #24
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1de34:	2210      	movs	r2, #16
			(const struct nrf_sockaddr_in6 *)nrf_in->ai_addr);
   1de36:	f8d6 b014 	ldr.w	fp, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1de3a:	6123      	str	r3, [r4, #16]
	ptr->sin6_port = nrf_in->sin6_port;
   1de3c:	f8bb 3008 	ldrh.w	r3, [fp, #8]
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1de40:	eb0b 0102 	add.w	r1, fp, r2
	ptr->sin6_port = nrf_in->sin6_port;
   1de44:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   1de46:	f820 9b04 	strh.w	r9, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1de4a:	f7ff f92e 	bl	1d0aa <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1de4e:	f8db 3020 	ldr.w	r3, [fp, #32]
   1de52:	f88a 3014 	strb.w	r3, [sl, #20]
		} else if (error == -EAFNOSUPPORT) {
   1de56:	e7a7      	b.n	1dda8 <nrf91_socket_offload_getaddrinfo+0xea>
			k_free(next_z_res);
   1de58:	4620      	mov	r0, r4
   1de5a:	f000 fa78 	bl	1e34e <k_free>
			retval = DNS_EAI_MEMORY;
   1de5e:	f06f 0509 	mvn.w	r5, #9
   1de62:	e75c      	b.n	1dd1e <nrf91_socket_offload_getaddrinfo+0x60>
			latest_z_res->ai_next = next_z_res;
   1de64:	61fc      	str	r4, [r7, #28]
   1de66:	e7a3      	b.n	1ddb0 <nrf91_socket_offload_getaddrinfo+0xf2>
			return DNS_EAI_SOCKTYPE;
   1de68:	f06f 0506 	mvn.w	r5, #6
   1de6c:	e7a7      	b.n	1ddbe <nrf91_socket_offload_getaddrinfo+0x100>
			return DNS_EAI_ADDRFAMILY;
   1de6e:	f06f 0508 	mvn.w	r5, #8
   1de72:	e7a4      	b.n	1ddbe <nrf91_socket_offload_getaddrinfo+0x100>

0001de74 <nrf91_socket_offload_setsockopt>:
{
   1de74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   1de78:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   1de7c:	b086      	sub	sp, #24
   1de7e:	4680      	mov	r8, r0
   1de80:	460c      	mov	r4, r1
   1de82:	4617      	mov	r7, r2
   1de84:	461d      	mov	r5, r3
   1de86:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   1de88:	d002      	beq.n	1de90 <nrf91_socket_offload_setsockopt+0x1c>
   1de8a:	dc1c      	bgt.n	1dec6 <nrf91_socket_offload_setsockopt+0x52>
   1de8c:	2901      	cmp	r1, #1
   1de8e:	d122      	bne.n	1ded6 <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1de90:	aa03      	add	r2, sp, #12
   1de92:	4639      	mov	r1, r7
   1de94:	4620      	mov	r0, r4
   1de96:	f7f3 fbd7 	bl	11648 <z_to_nrf_optname>
   1de9a:	2800      	cmp	r0, #0
   1de9c:	db1b      	blt.n	1ded6 <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   1de9e:	2c01      	cmp	r4, #1
   1dea0:	d107      	bne.n	1deb2 <nrf91_socket_offload_setsockopt+0x3e>
   1dea2:	2f14      	cmp	r7, #20
   1dea4:	d105      	bne.n	1deb2 <nrf91_socket_offload_setsockopt+0x3e>
		nrf_optlen = sizeof(struct nrf_timeval);
   1dea6:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   1dea8:	682b      	ldr	r3, [r5, #0]
   1deaa:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1deac:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   1deae:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1deb0:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1deb2:	9600      	str	r6, [sp, #0]
   1deb4:	462b      	mov	r3, r5
   1deb6:	9a03      	ldr	r2, [sp, #12]
   1deb8:	4621      	mov	r1, r4
   1deba:	4640      	mov	r0, r8
   1debc:	f7f8 ff6a 	bl	16d94 <nrf_setsockopt>
}
   1dec0:	b006      	add	sp, #24
   1dec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1dec6:	f240 2302 	movw	r3, #514	; 0x202
   1deca:	4299      	cmp	r1, r3
   1decc:	d0e0      	beq.n	1de90 <nrf91_socket_offload_setsockopt+0x1c>
   1dece:	f240 2303 	movw	r3, #515	; 0x203
   1ded2:	4299      	cmp	r1, r3
   1ded4:	e7db      	b.n	1de8e <nrf91_socket_offload_setsockopt+0x1a>
	errno = ENOPROTOOPT;
   1ded6:	f7ff fcfb 	bl	1d8d0 <z_errno>
   1deda:	232a      	movs	r3, #42	; 0x2a
   1dedc:	6003      	str	r3, [r0, #0]
   1dede:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dee2:	e7ed      	b.n	1dec0 <nrf91_socket_offload_setsockopt+0x4c>

0001dee4 <nrf91_socket_offload_sendto>:
{
   1dee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dee8:	b08d      	sub	sp, #52	; 0x34
   1deea:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1deec:	4605      	mov	r5, r0
   1deee:	460e      	mov	r6, r1
   1def0:	4617      	mov	r7, r2
   1def2:	4698      	mov	r8, r3
	if (to == NULL) {
   1def4:	b96c      	cbnz	r4, 1df12 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1def6:	4618      	mov	r0, r3
   1def8:	f7ff fca0 	bl	1d83c <z_to_nrf_flags>
   1defc:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1df00:	4603      	mov	r3, r0
   1df02:	463a      	mov	r2, r7
   1df04:	4631      	mov	r1, r6
   1df06:	4628      	mov	r0, r5
   1df08:	f7f8 fe8e 	bl	16c28 <nrf_sendto>
}
   1df0c:	b00d      	add	sp, #52	; 0x34
   1df0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   1df12:	8823      	ldrh	r3, [r4, #0]
   1df14:	2b01      	cmp	r3, #1
   1df16:	d110      	bne.n	1df3a <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   1df18:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1df1a:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   1df1c:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   1df20:	2302      	movs	r3, #2
   1df22:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1df24:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1df26:	4640      	mov	r0, r8
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1df28:	f88d 100c 	strb.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1df2c:	9306      	str	r3, [sp, #24]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1df2e:	f7ff fc85 	bl	1d83c <z_to_nrf_flags>
   1df32:	9101      	str	r1, [sp, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1df34:	ab03      	add	r3, sp, #12
   1df36:	9300      	str	r3, [sp, #0]
   1df38:	e7e2      	b.n	1df00 <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   1df3a:	2b02      	cmp	r3, #2
   1df3c:	d115      	bne.n	1df6a <nrf91_socket_offload_sendto+0x86>
	nrf_out->sin6_port = ptr->sin6_port;
   1df3e:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1df40:	f04f 0924 	mov.w	r9, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1df44:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin6_family = NRF_AF_INET6;
   1df48:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1df4a:	2210      	movs	r2, #16
   1df4c:	1d21      	adds	r1, r4, #4
   1df4e:	a807      	add	r0, sp, #28
	nrf_out->sin6_family = NRF_AF_INET6;
   1df50:	9304      	str	r3, [sp, #16]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1df52:	f88d 900c 	strb.w	r9, [sp, #12]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1df56:	f7ff f8a8 	bl	1d0aa <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1df5a:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1df5c:	4640      	mov	r0, r8
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1df5e:	930b      	str	r3, [sp, #44]	; 0x2c
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1df60:	f7ff fc6c 	bl	1d83c <z_to_nrf_flags>
   1df64:	f8cd 9004 	str.w	r9, [sp, #4]
   1df68:	e7e4      	b.n	1df34 <nrf91_socket_offload_sendto+0x50>
	errno = ENOTSUP;
   1df6a:	f7ff fcb1 	bl	1d8d0 <z_errno>
   1df6e:	2323      	movs	r3, #35	; 0x23
   1df70:	6003      	str	r3, [r0, #0]
	return retval;
   1df72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1df76:	e7c9      	b.n	1df0c <nrf91_socket_offload_sendto+0x28>

0001df78 <nrf91_socket_offload_bind>:
{
   1df78:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1df7a:	880b      	ldrh	r3, [r1, #0]
{
   1df7c:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   1df7e:	2b01      	cmp	r3, #1
{
   1df80:	4606      	mov	r6, r0
   1df82:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   1df84:	d10e      	bne.n	1dfa4 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   1df86:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1df88:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1df8a:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1df8e:	2302      	movs	r3, #2
   1df90:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1df92:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1df94:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1df98:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   1df9a:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1df9c:	f7f8 fee8 	bl	16d70 <nrf_bind>
}
   1dfa0:	b00a      	add	sp, #40	; 0x28
   1dfa2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1dfa4:	2b02      	cmp	r3, #2
   1dfa6:	d112      	bne.n	1dfce <nrf91_socket_offload_bind+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   1dfa8:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1dfaa:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1dfac:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1dfb0:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1dfb2:	2210      	movs	r2, #16
   1dfb4:	3104      	adds	r1, #4
   1dfb6:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   1dfb8:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1dfba:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1dfbe:	f7ff f874 	bl	1d0aa <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1dfc2:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1dfc4:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1dfc6:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1dfc8:	a901      	add	r1, sp, #4
   1dfca:	4630      	mov	r0, r6
   1dfcc:	e7e6      	b.n	1df9c <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   1dfce:	f7ff fc7f 	bl	1d8d0 <z_errno>
   1dfd2:	2323      	movs	r3, #35	; 0x23
   1dfd4:	6003      	str	r3, [r0, #0]
   1dfd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dfda:	e7e1      	b.n	1dfa0 <nrf91_socket_offload_bind+0x28>

0001dfdc <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   1dfdc:	280d      	cmp	r0, #13
   1dfde:	d004      	beq.n	1dfea <is_lfcr+0xe>
   1dfe0:	f1a0 030a 	sub.w	r3, r0, #10
   1dfe4:	4258      	negs	r0, r3
   1dfe6:	4158      	adcs	r0, r3
   1dfe8:	4770      	bx	lr
		return true;
   1dfea:	2001      	movs	r0, #1
}
   1dfec:	4770      	bx	lr

0001dfee <skip_command_prefix>:
{
   1dfee:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   1dff0:	6802      	ldr	r2, [r0, #0]
{
   1dff2:	4601      	mov	r1, r0
	*cmd += sizeof("AT") - 1;
   1dff4:	1c93      	adds	r3, r2, #2
   1dff6:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   1dff8:	7894      	ldrb	r4, [r2, #2]
   1dffa:	4620      	mov	r0, r4
   1dffc:	f7ff ffee 	bl	1dfdc <is_lfcr>
   1e000:	b910      	cbnz	r0, 1e008 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e002:	b10c      	cbz	r4, 1e008 <skip_command_prefix+0x1a>
	(*cmd)++;
   1e004:	3203      	adds	r2, #3
   1e006:	600a      	str	r2, [r1, #0]
}
   1e008:	bd10      	pop	{r4, pc}

0001e00a <is_valid_notification_char>:
	return (int)((chr >= (int)'a' && chr <=
   1e00a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1e00e:	2b19      	cmp	r3, #25
   1e010:	bf98      	it	ls
   1e012:	3820      	subls	r0, #32
	if ((chr >= 'A') && (chr <= 'Z')) {
   1e014:	3841      	subs	r0, #65	; 0x41
   1e016:	b2c0      	uxtb	r0, r0
}
   1e018:	2819      	cmp	r0, #25
   1e01a:	bf8c      	ite	hi
   1e01c:	2000      	movhi	r0, #0
   1e01e:	2001      	movls	r0, #1
   1e020:	4770      	bx	lr

0001e022 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   1e022:	b510      	push	{r4, lr}
   1e024:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   1e026:	f7ff f805 	bl	1d034 <strlen>
   1e02a:	2801      	cmp	r0, #1
   1e02c:	d91e      	bls.n	1e06c <is_command+0x4a>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   1e02e:	7823      	ldrb	r3, [r4, #0]
   1e030:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1e034:	2a19      	cmp	r2, #25
   1e036:	bf98      	it	ls
   1e038:	3b20      	subls	r3, #32
   1e03a:	2b41      	cmp	r3, #65	; 0x41
   1e03c:	d116      	bne.n	1e06c <is_command+0x4a>
   1e03e:	7863      	ldrb	r3, [r4, #1]
   1e040:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1e044:	2a19      	cmp	r2, #25
   1e046:	bf98      	it	ls
   1e048:	3b20      	subls	r3, #32
   1e04a:	2b54      	cmp	r3, #84	; 0x54
   1e04c:	d10e      	bne.n	1e06c <is_command+0x4a>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1e04e:	78a2      	ldrb	r2, [r4, #2]
   1e050:	2a25      	cmp	r2, #37	; 0x25
   1e052:	d00d      	beq.n	1e070 <is_command+0x4e>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   1e054:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   1e058:	2b23      	cmp	r3, #35	; 0x23
   1e05a:	d009      	beq.n	1e070 <is_command+0x4e>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1e05c:	4610      	mov	r0, r2
   1e05e:	f7ff ffbd 	bl	1dfdc <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   1e062:	b910      	cbnz	r0, 1e06a <is_command+0x48>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e064:	fab2 f082 	clz	r0, r2
   1e068:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   1e06a:	bd10      	pop	{r4, pc}
		return false;
   1e06c:	2000      	movs	r0, #0
   1e06e:	e7fc      	b.n	1e06a <is_command+0x48>
		return true;
   1e070:	2001      	movs	r0, #1
   1e072:	e7fa      	b.n	1e06a <is_command+0x48>

0001e074 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   1e074:	6813      	ldr	r3, [r2, #0]
   1e076:	f7f4 b83b 	b.w	120f0 <at_parser_max_params_from_str>

0001e07a <at_parser_cmd_type_get>:

enum at_cmd_type at_parser_cmd_type_get(const char *at_cmd)
{
   1e07a:	b507      	push	{r0, r1, r2, lr}
   1e07c:	9001      	str	r0, [sp, #4]
	enum at_cmd_type type;

	if (!is_command(at_cmd)) {
   1e07e:	f7ff ffd0 	bl	1e022 <is_command>
   1e082:	b178      	cbz	r0, 1e0a4 <at_parser_cmd_type_get+0x2a>
		return AT_CMD_TYPE_UNKNOWN;
	}

	skip_command_prefix(&at_cmd);
   1e084:	a801      	add	r0, sp, #4
   1e086:	f7ff ffb2 	bl	1dfee <skip_command_prefix>

	while (is_valid_notification_char(*at_cmd)) {
   1e08a:	9901      	ldr	r1, [sp, #4]
   1e08c:	780a      	ldrb	r2, [r1, #0]
   1e08e:	4610      	mov	r0, r2
   1e090:	f7ff ffbb 	bl	1e00a <is_valid_notification_char>
   1e094:	b948      	cbnz	r0, 1e0aa <at_parser_cmd_type_get+0x30>
		at_cmd++;
	}

	if ((*at_cmd == AT_CMD_SEPARATOR) &&
   1e096:	2a3d      	cmp	r2, #61	; 0x3d
   1e098:	d114      	bne.n	1e0c4 <at_parser_cmd_type_get+0x4a>
   1e09a:	784b      	ldrb	r3, [r1, #1]
	    (*(at_cmd + 1) == AT_CMD_READ_TEST_IDENTIFIER)) {
		type = AT_CMD_TYPE_TEST_COMMAND;
   1e09c:	2b3f      	cmp	r3, #63	; 0x3f
   1e09e:	bf14      	ite	ne
   1e0a0:	2001      	movne	r0, #1
   1e0a2:	2003      	moveq	r0, #3
	} else {
		type = AT_CMD_TYPE_UNKNOWN;
	}

	return type;
}
   1e0a4:	b003      	add	sp, #12
   1e0a6:	f85d fb04 	ldr.w	pc, [sp], #4
		at_cmd++;
   1e0aa:	3101      	adds	r1, #1
   1e0ac:	9101      	str	r1, [sp, #4]
   1e0ae:	e7ec      	b.n	1e08a <at_parser_cmd_type_get+0x10>
	} else if ((*at_cmd == AT_CMD_SEPARATOR) || is_lfcr(*at_cmd) ||
   1e0b0:	4610      	mov	r0, r2
   1e0b2:	f7ff ff93 	bl	1dfdc <is_lfcr>
   1e0b6:	b918      	cbnz	r0, 1e0c0 <at_parser_cmd_type_get+0x46>
		return AT_CMD_TYPE_UNKNOWN;
   1e0b8:	fab2 f082 	clz	r0, r2
   1e0bc:	0940      	lsrs	r0, r0, #5
   1e0be:	e7f1      	b.n	1e0a4 <at_parser_cmd_type_get+0x2a>
		type = AT_CMD_TYPE_SET_COMMAND;
   1e0c0:	2001      	movs	r0, #1
   1e0c2:	e7ef      	b.n	1e0a4 <at_parser_cmd_type_get+0x2a>
	} else if (*at_cmd == AT_CMD_READ_TEST_IDENTIFIER) {
   1e0c4:	2a3f      	cmp	r2, #63	; 0x3f
   1e0c6:	d1f3      	bne.n	1e0b0 <at_parser_cmd_type_get+0x36>
		type = AT_CMD_TYPE_READ_COMMAND;
   1e0c8:	2002      	movs	r0, #2
   1e0ca:	e7eb      	b.n	1e0a4 <at_parser_cmd_type_get+0x2a>

0001e0cc <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   1e0cc:	6803      	ldr	r3, [r0, #0]
   1e0ce:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   1e0d0:	bf83      	ittte	hi
   1e0d2:	230c      	movhi	r3, #12
   1e0d4:	6840      	ldrhi	r0, [r0, #4]
   1e0d6:	fb03 0001 	mlahi	r0, r3, r1, r0
		return NULL;
   1e0da:	2000      	movls	r0, #0
}
   1e0dc:	4770      	bx	lr

0001e0de <at_param_size>:
/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
	__ASSERT(param != NULL, "Parameter cannot be NULL.");

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   1e0de:	7803      	ldrb	r3, [r0, #0]
   1e0e0:	2b01      	cmp	r3, #1
   1e0e2:	d006      	beq.n	1e0f2 <at_param_size+0x14>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   1e0e4:	2b02      	cmp	r3, #2
   1e0e6:	d006      	beq.n	1e0f6 <at_param_size+0x18>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e0e8:	3b03      	subs	r3, #3
   1e0ea:	2b01      	cmp	r3, #1
   1e0ec:	d805      	bhi.n	1e0fa <at_param_size+0x1c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   1e0ee:	6840      	ldr	r0, [r0, #4]
   1e0f0:	4770      	bx	lr
		return sizeof(u16_t);
   1e0f2:	2002      	movs	r0, #2
   1e0f4:	4770      	bx	lr
		return sizeof(u32_t);
   1e0f6:	2004      	movs	r0, #4
   1e0f8:	4770      	bx	lr
	}

	return 0;
   1e0fa:	2000      	movs	r0, #0
}
   1e0fc:	4770      	bx	lr

0001e0fe <at_param_clear>:
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e0fe:	7803      	ldrb	r3, [r0, #0]
{
   1e100:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e102:	3b03      	subs	r3, #3
   1e104:	2b01      	cmp	r3, #1
{
   1e106:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e108:	d802      	bhi.n	1e110 <at_param_clear+0x12>
		k_free(param->value.str_val);
   1e10a:	6880      	ldr	r0, [r0, #8]
   1e10c:	f000 f91f 	bl	1e34e <k_free>
	param->value.int_val = 0;
   1e110:	2300      	movs	r3, #0
   1e112:	60a3      	str	r3, [r4, #8]
}
   1e114:	bd10      	pop	{r4, pc}

0001e116 <at_params_list_init>:

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   1e116:	b538      	push	{r3, r4, r5, lr}
   1e118:	460d      	mov	r5, r1
	if (list == NULL) {
   1e11a:	4604      	mov	r4, r0
   1e11c:	b140      	cbz	r0, 1e130 <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   1e11e:	210c      	movs	r1, #12
   1e120:	4628      	mov	r0, r5
   1e122:	f000 f919 	bl	1e358 <k_calloc>
   1e126:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   1e128:	b128      	cbz	r0, 1e136 <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   1e12a:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   1e12c:	6025      	str	r5, [r4, #0]
}
   1e12e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1e130:	f06f 0015 	mvn.w	r0, #21
   1e134:	e7fb      	b.n	1e12e <at_params_list_init+0x18>
		return -ENOMEM;
   1e136:	f06f 000b 	mvn.w	r0, #11
   1e13a:	e7f8      	b.n	1e12e <at_params_list_init+0x18>

0001e13c <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   1e13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (list == NULL || list->params == NULL) {
   1e13e:	4605      	mov	r5, r0
   1e140:	b130      	cbz	r0, 1e150 <at_params_list_clear+0x14>
   1e142:	6843      	ldr	r3, [r0, #4]
   1e144:	b123      	cbz	r3, 1e150 <at_params_list_clear+0x14>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   1e146:	2400      	movs	r4, #0
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
   1e148:	270c      	movs	r7, #12
	for (size_t i = 0; i < list->param_count; ++i) {
   1e14a:	682b      	ldr	r3, [r5, #0]
   1e14c:	429c      	cmp	r4, r3
   1e14e:	d300      	bcc.n	1e152 <at_params_list_clear+0x16>
		at_param_init(&params[i]);
	}
}
   1e150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		at_param_clear(&params[i]);
   1e152:	686e      	ldr	r6, [r5, #4]
   1e154:	fb07 6604 	mla	r6, r7, r4, r6
   1e158:	4630      	mov	r0, r6
   1e15a:	f7ff ffd0 	bl	1e0fe <at_param_clear>
	memset(param, 0, sizeof(struct at_param));
   1e15e:	220c      	movs	r2, #12
   1e160:	2100      	movs	r1, #0
   1e162:	4630      	mov	r0, r6
   1e164:	f7fe ffcb 	bl	1d0fe <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   1e168:	3401      	adds	r4, #1
   1e16a:	e7ee      	b.n	1e14a <at_params_list_clear+0xe>

0001e16c <at_params_short_put>:
	list->params = NULL;
}

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   1e16c:	b538      	push	{r3, r4, r5, lr}
   1e16e:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   1e170:	b160      	cbz	r0, 1e18c <at_params_short_put+0x20>
   1e172:	6843      	ldr	r3, [r0, #4]
   1e174:	b153      	cbz	r3, 1e18c <at_params_short_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e176:	f7ff ffa9 	bl	1e0cc <at_params_get>

	if (param == NULL) {
   1e17a:	4604      	mov	r4, r0
   1e17c:	b130      	cbz	r0, 1e18c <at_params_short_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   1e17e:	f7ff ffbe 	bl	1e0fe <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_SHORT;
   1e182:	2301      	movs	r3, #1
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
   1e184:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   1e186:	7023      	strb	r3, [r4, #0]
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   1e188:	60a5      	str	r5, [r4, #8]
}
   1e18a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1e18c:	f06f 0015 	mvn.w	r0, #21
   1e190:	e7fb      	b.n	1e18a <at_params_short_put+0x1e>

0001e192 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   1e192:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   1e194:	b160      	cbz	r0, 1e1b0 <at_params_empty_put+0x1e>
   1e196:	6843      	ldr	r3, [r0, #4]
   1e198:	b153      	cbz	r3, 1e1b0 <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e19a:	f7ff ff97 	bl	1e0cc <at_params_get>

	if (param == NULL) {
   1e19e:	4604      	mov	r4, r0
   1e1a0:	b130      	cbz	r0, 1e1b0 <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	at_param_clear(param);
   1e1a2:	f7ff ffac 	bl	1e0fe <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   1e1a6:	2305      	movs	r3, #5
	param->value.int_val = 0;
   1e1a8:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   1e1aa:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   1e1ac:	60a0      	str	r0, [r4, #8]

	return 0;
}
   1e1ae:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1e1b0:	f06f 0015 	mvn.w	r0, #21
   1e1b4:	e7fb      	b.n	1e1ae <at_params_empty_put+0x1c>

0001e1b6 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   1e1b6:	b538      	push	{r3, r4, r5, lr}
   1e1b8:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   1e1ba:	b160      	cbz	r0, 1e1d6 <at_params_int_put+0x20>
   1e1bc:	6843      	ldr	r3, [r0, #4]
   1e1be:	b153      	cbz	r3, 1e1d6 <at_params_int_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e1c0:	f7ff ff84 	bl	1e0cc <at_params_get>

	if (param == NULL) {
   1e1c4:	4604      	mov	r4, r0
   1e1c6:	b130      	cbz	r0, 1e1d6 <at_params_int_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   1e1c8:	f7ff ff99 	bl	1e0fe <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   1e1cc:	2302      	movs	r3, #2
	param->value.int_val = value;
	return 0;
   1e1ce:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   1e1d0:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   1e1d2:	60a5      	str	r5, [r4, #8]
}
   1e1d4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1e1d6:	f06f 0015 	mvn.w	r0, #21
   1e1da:	e7fb      	b.n	1e1d4 <at_params_int_put+0x1e>

0001e1dc <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   1e1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e1de:	4616      	mov	r6, r2
   1e1e0:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   1e1e2:	b1c0      	cbz	r0, 1e216 <at_params_string_put+0x3a>
   1e1e4:	6843      	ldr	r3, [r0, #4]
   1e1e6:	b1b3      	cbz	r3, 1e216 <at_params_string_put+0x3a>
   1e1e8:	b1aa      	cbz	r2, 1e216 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e1ea:	f7ff ff6f 	bl	1e0cc <at_params_get>

	if (param == NULL) {
   1e1ee:	4604      	mov	r4, r0
   1e1f0:	b188      	cbz	r0, 1e216 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   1e1f2:	1c68      	adds	r0, r5, #1
   1e1f4:	f7fc fe42 	bl	1ae7c <k_malloc>

	if (param_value == NULL) {
   1e1f8:	4607      	mov	r7, r0
   1e1fa:	b178      	cbz	r0, 1e21c <at_params_string_put+0x40>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);
   1e1fc:	462a      	mov	r2, r5
   1e1fe:	4631      	mov	r1, r6
   1e200:	f7fe ff53 	bl	1d0aa <memcpy>

	at_param_clear(param);
   1e204:	4620      	mov	r0, r4
   1e206:	f7ff ff7a 	bl	1e0fe <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   1e20a:	2303      	movs	r3, #3
	param->value.str_val = param_value;

	return 0;
   1e20c:	2000      	movs	r0, #0
	param->size = str_len;
   1e20e:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   1e210:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   1e212:	60a7      	str	r7, [r4, #8]
}
   1e214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1e216:	f06f 0015 	mvn.w	r0, #21
   1e21a:	e7fb      	b.n	1e214 <at_params_string_put+0x38>
		return -ENOMEM;
   1e21c:	f06f 000b 	mvn.w	r0, #11
   1e220:	e7f8      	b.n	1e214 <at_params_string_put+0x38>

0001e222 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const u32_t *array, size_t array_len)
{
   1e222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e224:	4616      	mov	r6, r2
   1e226:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   1e228:	b1c0      	cbz	r0, 1e25c <at_params_array_put+0x3a>
   1e22a:	6843      	ldr	r3, [r0, #4]
   1e22c:	b1b3      	cbz	r3, 1e25c <at_params_array_put+0x3a>
   1e22e:	b1aa      	cbz	r2, 1e25c <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e230:	f7ff ff4c 	bl	1e0cc <at_params_get>

	if (param == NULL) {
   1e234:	4604      	mov	r4, r0
   1e236:	b188      	cbz	r0, 1e25c <at_params_array_put+0x3a>
		return -EINVAL;
	}

	u32_t *param_value = (u32_t *)k_malloc(array_len);
   1e238:	4628      	mov	r0, r5
   1e23a:	f7fc fe1f 	bl	1ae7c <k_malloc>

	if (param_value == NULL) {
   1e23e:	4607      	mov	r7, r0
   1e240:	b178      	cbz	r0, 1e262 <at_params_array_put+0x40>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);
   1e242:	462a      	mov	r2, r5
   1e244:	4631      	mov	r1, r6
   1e246:	f7fe ff30 	bl	1d0aa <memcpy>

	at_param_clear(param);
   1e24a:	4620      	mov	r0, r4
   1e24c:	f7ff ff57 	bl	1e0fe <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   1e250:	2304      	movs	r3, #4
	param->value.array_val = param_value;

	return 0;
   1e252:	2000      	movs	r0, #0
	param->size = array_len;
   1e254:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   1e256:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   1e258:	60a7      	str	r7, [r4, #8]
}
   1e25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1e25c:	f06f 0015 	mvn.w	r0, #21
   1e260:	e7fb      	b.n	1e25a <at_params_array_put+0x38>
		return -ENOMEM;
   1e262:	f06f 000b 	mvn.w	r0, #11
   1e266:	e7f8      	b.n	1e25a <at_params_array_put+0x38>

0001e268 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			u16_t *value)
{
   1e268:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   1e26a:	b160      	cbz	r0, 1e286 <at_params_short_get+0x1e>
   1e26c:	6843      	ldr	r3, [r0, #4]
   1e26e:	b153      	cbz	r3, 1e286 <at_params_short_get+0x1e>
   1e270:	b14a      	cbz	r2, 1e286 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e272:	f7ff ff2b 	bl	1e0cc <at_params_get>

	if (param == NULL) {
   1e276:	b130      	cbz	r0, 1e286 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   1e278:	7803      	ldrb	r3, [r0, #0]
   1e27a:	2b01      	cmp	r3, #1
   1e27c:	d103      	bne.n	1e286 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	*value = (u16_t)param->value.int_val;
   1e27e:	6883      	ldr	r3, [r0, #8]
	return 0;
   1e280:	2000      	movs	r0, #0
	*value = (u16_t)param->value.int_val;
   1e282:	8013      	strh	r3, [r2, #0]
}
   1e284:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1e286:	f06f 0015 	mvn.w	r0, #21
   1e28a:	e7fb      	b.n	1e284 <at_params_short_get+0x1c>

0001e28c <at_params_string_get>:
	return 0;
}

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   1e28c:	b570      	push	{r4, r5, r6, lr}
   1e28e:	4616      	mov	r6, r2
   1e290:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   1e292:	b1c0      	cbz	r0, 1e2c6 <at_params_string_get+0x3a>
   1e294:	6843      	ldr	r3, [r0, #4]
   1e296:	b1b3      	cbz	r3, 1e2c6 <at_params_string_get+0x3a>
   1e298:	b1aa      	cbz	r2, 1e2c6 <at_params_string_get+0x3a>
	    value == NULL || len == NULL) {
   1e29a:	b1a4      	cbz	r4, 1e2c6 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e29c:	f7ff ff16 	bl	1e0cc <at_params_get>

	if (param == NULL) {
   1e2a0:	4601      	mov	r1, r0
   1e2a2:	b180      	cbz	r0, 1e2c6 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   1e2a4:	7803      	ldrb	r3, [r0, #0]
   1e2a6:	2b03      	cmp	r3, #3
   1e2a8:	d10d      	bne.n	1e2c6 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   1e2aa:	f7ff ff18 	bl	1e0de <at_param_size>

	if (*len < param_len) {
   1e2ae:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   1e2b0:	4605      	mov	r5, r0
	if (*len < param_len) {
   1e2b2:	4283      	cmp	r3, r0
   1e2b4:	d30a      	bcc.n	1e2cc <at_params_string_get+0x40>
		return -ENOMEM;
	}

	memcpy(value, param->value.str_val, param_len);
   1e2b6:	4602      	mov	r2, r0
   1e2b8:	6889      	ldr	r1, [r1, #8]
   1e2ba:	4630      	mov	r0, r6
   1e2bc:	f7fe fef5 	bl	1d0aa <memcpy>
	*len = param_len;

	return 0;
   1e2c0:	2000      	movs	r0, #0
	*len = param_len;
   1e2c2:	6025      	str	r5, [r4, #0]
}
   1e2c4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1e2c6:	f06f 0015 	mvn.w	r0, #21
   1e2ca:	e7fb      	b.n	1e2c4 <at_params_string_get+0x38>
		return -ENOMEM;
   1e2cc:	f06f 000b 	mvn.w	r0, #11
   1e2d0:	e7f8      	b.n	1e2c4 <at_params_string_get+0x38>

0001e2d2 <at_params_valid_count_get>:

	return 0;
}

u32_t at_params_valid_count_get(const struct at_param_list *list)
{
   1e2d2:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   1e2d4:	4604      	mov	r4, r0
   1e2d6:	b178      	cbz	r0, 1e2f8 <at_params_valid_count_get+0x26>
   1e2d8:	6840      	ldr	r0, [r0, #4]
   1e2da:	b168      	cbz	r0, 1e2f8 <at_params_valid_count_get+0x26>
	if (index >= list->param_count) {
   1e2dc:	6822      	ldr	r2, [r4, #0]
   1e2de:	b14a      	cbz	r2, 1e2f4 <at_params_valid_count_get+0x22>
   1e2e0:	2200      	movs	r2, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   1e2e2:	7803      	ldrb	r3, [r0, #0]
   1e2e4:	b133      	cbz	r3, 1e2f4 <at_params_valid_count_get+0x22>
		valid_i += 1;
   1e2e6:	3201      	adds	r2, #1
		param = at_params_get(list, valid_i);
   1e2e8:	4611      	mov	r1, r2
   1e2ea:	4620      	mov	r0, r4
   1e2ec:	f7ff feee 	bl	1e0cc <at_params_get>
	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   1e2f0:	2800      	cmp	r0, #0
   1e2f2:	d1f6      	bne.n	1e2e2 <at_params_valid_count_get+0x10>
	}

	return valid_i;
}
   1e2f4:	4610      	mov	r0, r2
   1e2f6:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1e2f8:	f06f 0215 	mvn.w	r2, #21
   1e2fc:	e7fa      	b.n	1e2f4 <at_params_valid_count_get+0x22>

0001e2fe <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   1e2fe:	f7fe bced 	b.w	1ccdc <z_clock_idle_exit>

0001e302 <k_mem_slab_init>:
{
   1e302:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1e304:	2400      	movs	r4, #0
	slab->block_size = block_size;
   1e306:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
   1e30a:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
   1e30e:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e310:	42a3      	cmp	r3, r4
   1e312:	d102      	bne.n	1e31a <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
   1e314:	e9c0 0000 	strd	r0, r0, [r0]
}
   1e318:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1e31a:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e31c:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   1e31e:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   1e320:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   1e322:	4411      	add	r1, r2
   1e324:	e7f4      	b.n	1e310 <k_mem_slab_init+0xe>

0001e326 <k_mem_pool_malloc>:
{
   1e326:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1e328:	2404      	movs	r4, #4
   1e32a:	190a      	adds	r2, r1, r4
   1e32c:	d204      	bcs.n	1e338 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   1e32e:	2300      	movs	r3, #0
   1e330:	4669      	mov	r1, sp
   1e332:	f7fc fd2b 	bl	1ad8c <k_mem_pool_alloc>
   1e336:	b110      	cbz	r0, 1e33e <k_mem_pool_malloc+0x18>
		return NULL;
   1e338:	2000      	movs	r0, #0
}
   1e33a:	b002      	add	sp, #8
   1e33c:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   1e33e:	4622      	mov	r2, r4
   1e340:	a901      	add	r1, sp, #4
   1e342:	9800      	ldr	r0, [sp, #0]
   1e344:	f7fe feb1 	bl	1d0aa <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   1e348:	9800      	ldr	r0, [sp, #0]
   1e34a:	3004      	adds	r0, #4
   1e34c:	e7f5      	b.n	1e33a <k_mem_pool_malloc+0x14>

0001e34e <k_free>:
	if (ptr != NULL) {
   1e34e:	b110      	cbz	r0, 1e356 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   1e350:	3804      	subs	r0, #4
   1e352:	f7fc bd67 	b.w	1ae24 <k_mem_pool_free_id>
}
   1e356:	4770      	bx	lr

0001e358 <k_calloc>:
{
   1e358:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   1e35a:	fba0 4501 	umull	r4, r5, r0, r1
   1e35e:	b935      	cbnz	r5, 1e36e <k_calloc+0x16>
	ret = k_malloc(bounds);
   1e360:	4620      	mov	r0, r4
   1e362:	f7fc fd8b 	bl	1ae7c <k_malloc>
	if (ret != NULL) {
   1e366:	4606      	mov	r6, r0
   1e368:	b918      	cbnz	r0, 1e372 <k_calloc+0x1a>
}
   1e36a:	4630      	mov	r0, r6
   1e36c:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1e36e:	2600      	movs	r6, #0
   1e370:	e7fb      	b.n	1e36a <k_calloc+0x12>
		(void)memset(ret, 0, bounds);
   1e372:	4622      	mov	r2, r4
   1e374:	4629      	mov	r1, r5
   1e376:	f7fe fec2 	bl	1d0fe <memset>
   1e37a:	e7f6      	b.n	1e36a <k_calloc+0x12>

0001e37c <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   1e37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e380:	4604      	mov	r4, r0
   1e382:	460f      	mov	r7, r1
   1e384:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1e386:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1e38a:	f04f 0220 	mov.w	r2, #32
   1e38e:	f3ef 8611 	mrs	r6, BASEPRI
   1e392:	f382 8811 	msr	BASEPRI, r2
   1e396:	f3bf 8f6f 	isb	sy
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   1e39a:	b1db      	cbz	r3, 1e3d4 <queue_insert+0x58>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   1e39c:	2008      	movs	r0, #8
   1e39e:	f7fc fd73 	bl	1ae88 <z_thread_malloc>
		if (anode == NULL) {
   1e3a2:	b938      	cbnz	r0, 1e3b4 <queue_insert+0x38>
	__asm__ volatile(
   1e3a4:	f386 8811 	msr	BASEPRI, r6
   1e3a8:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   1e3ac:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   1e3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   1e3b4:	2301      	movs	r3, #1
		anode->data = data;
   1e3b6:	f8c0 8004 	str.w	r8, [r0, #4]
   1e3ba:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1e3bc:	6803      	ldr	r3, [r0, #0]
   1e3be:	f003 0203 	and.w	r2, r3, #3
   1e3c2:	b95f      	cbnz	r7, 1e3dc <queue_insert+0x60>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e3c4:	6823      	ldr	r3, [r4, #0]
   1e3c6:	4313      	orrs	r3, r2
   1e3c8:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1e3ca:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1e3cc:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1e3ce:	b973      	cbnz	r3, 1e3ee <queue_insert+0x72>
	list->tail = node;
   1e3d0:	6060      	str	r0, [r4, #4]
   1e3d2:	e00c      	b.n	1e3ee <queue_insert+0x72>
	node->next_and_flags = flags;
   1e3d4:	f8c8 3000 	str.w	r3, [r8]
   1e3d8:	4640      	mov	r0, r8
   1e3da:	e7ef      	b.n	1e3bc <queue_insert+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e3dc:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1e3de:	f033 0303 	bics.w	r3, r3, #3
   1e3e2:	d114      	bne.n	1e40e <queue_insert+0x92>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e3e4:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1e3e6:	6862      	ldr	r2, [r4, #4]
   1e3e8:	b95a      	cbnz	r2, 1e402 <queue_insert+0x86>
	list->head = node;
   1e3ea:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1e3ee:	2104      	movs	r1, #4
   1e3f0:	4628      	mov	r0, r5
   1e3f2:	f000 fb5d 	bl	1eab0 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1e3f6:	4628      	mov	r0, r5
   1e3f8:	4631      	mov	r1, r6
   1e3fa:	f000 f8d2 	bl	1e5a2 <z_reschedule>
	return 0;
   1e3fe:	2000      	movs	r0, #0
   1e400:	e7d6      	b.n	1e3b0 <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e402:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e404:	f003 0303 	and.w	r3, r3, #3
   1e408:	4303      	orrs	r3, r0
   1e40a:	6013      	str	r3, [r2, #0]
   1e40c:	e7e0      	b.n	1e3d0 <queue_insert+0x54>
   1e40e:	4313      	orrs	r3, r2
   1e410:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e412:	683b      	ldr	r3, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e414:	f003 0303 	and.w	r3, r3, #3
   1e418:	4318      	orrs	r0, r3
   1e41a:	6038      	str	r0, [r7, #0]
   1e41c:	e7e7      	b.n	1e3ee <queue_insert+0x72>

0001e41e <z_queue_node_peek>:
{
   1e41e:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   1e420:	4604      	mov	r4, r0
   1e422:	b130      	cbz	r0, 1e432 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e424:	6802      	ldr	r2, [r0, #0]
   1e426:	0793      	lsls	r3, r2, #30
   1e428:	d003      	beq.n	1e432 <z_queue_node_peek+0x14>
		ret = anode->data;
   1e42a:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1e42c:	b109      	cbz	r1, 1e432 <z_queue_node_peek+0x14>
			k_free(anode);
   1e42e:	f7ff ff8e 	bl	1e34e <k_free>
}
   1e432:	4620      	mov	r0, r4
   1e434:	bd10      	pop	{r4, pc}

0001e436 <z_impl_k_queue_init>:
	list->head = NULL;
   1e436:	2300      	movs	r3, #0
	list->tail = NULL;
   1e438:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
   1e43c:	f100 0308 	add.w	r3, r0, #8
   1e440:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   1e444:	4770      	bx	lr

0001e446 <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   1e446:	460a      	mov	r2, r1
   1e448:	2300      	movs	r3, #0
   1e44a:	6841      	ldr	r1, [r0, #4]
   1e44c:	f7ff bf96 	b.w	1e37c <queue_insert>

0001e450 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   1e450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e454:	4604      	mov	r4, r0
   1e456:	b086      	sub	sp, #24
   1e458:	460d      	mov	r5, r1
	__asm__ volatile(
   1e45a:	f04f 0320 	mov.w	r3, #32
   1e45e:	f3ef 8711 	mrs	r7, BASEPRI
   1e462:	f383 8811 	msr	BASEPRI, r3
   1e466:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   1e46a:	6800      	ldr	r0, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1e46c:	b188      	cbz	r0, 1e492 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e46e:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1e470:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e472:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1e476:	4290      	cmp	r0, r2
	list->head = node;
   1e478:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1e47a:	bf08      	it	eq
   1e47c:	6063      	streq	r3, [r4, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1e47e:	2101      	movs	r1, #1
   1e480:	f7ff ffcd 	bl	1e41e <z_queue_node_peek>
	__asm__ volatile(
   1e484:	f387 8811 	msr	BASEPRI, r7
   1e488:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   1e48c:	b006      	add	sp, #24
   1e48e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   1e492:	2900      	cmp	r1, #0
   1e494:	d0f6      	beq.n	1e484 <z_impl_k_queue_get+0x34>
   1e496:	f387 8811 	msr	BASEPRI, r7
   1e49a:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   1e49e:	2104      	movs	r1, #4
   1e4a0:	4602      	mov	r2, r0
   1e4a2:	4623      	mov	r3, r4
   1e4a4:	eb0d 0001 	add.w	r0, sp, r1
   1e4a8:	f7fd fc4a 	bl	1bd40 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   1e4ac:	1c6a      	adds	r2, r5, #1
   1e4ae:	d002      	beq.n	1e4b6 <z_impl_k_queue_get+0x66>
	return z_impl_k_uptime_get();
   1e4b0:	f000 f9cb 	bl	1e84a <z_impl_k_uptime_get>
   1e4b4:	4606      	mov	r6, r0
{
   1e4b6:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   1e4b8:	9b04      	ldr	r3, [sp, #16]
   1e4ba:	f36f 3310 	bfc	r3, #12, #5
   1e4be:	9304      	str	r3, [sp, #16]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1e4c0:	2101      	movs	r1, #1
   1e4c2:	1bea      	subs	r2, r5, r7
   1e4c4:	a801      	add	r0, sp, #4
   1e4c6:	f7fd fc4f 	bl	1bd68 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   1e4ca:	b118      	cbz	r0, 1e4d4 <z_impl_k_queue_get+0x84>
   1e4cc:	300b      	adds	r0, #11
   1e4ce:	d001      	beq.n	1e4d4 <z_impl_k_queue_get+0x84>
			return NULL;
   1e4d0:	2000      	movs	r0, #0
   1e4d2:	e7db      	b.n	1e48c <z_impl_k_queue_get+0x3c>
	__asm__ volatile(
   1e4d4:	f04f 0320 	mov.w	r3, #32
   1e4d8:	f3ef 8811 	mrs	r8, BASEPRI
   1e4dc:	f383 8811 	msr	BASEPRI, r3
   1e4e0:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   1e4e4:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   1e4e6:	b138      	cbz	r0, 1e4f8 <z_impl_k_queue_get+0xa8>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e4e8:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1e4ea:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e4ec:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1e4f0:	4290      	cmp	r0, r2
	list->head = node;
   1e4f2:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1e4f4:	bf08      	it	eq
   1e4f6:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   1e4f8:	2101      	movs	r1, #1
   1e4fa:	f7ff ff90 	bl	1e41e <z_queue_node_peek>
	__asm__ volatile(
   1e4fe:	f388 8811 	msr	BASEPRI, r8
   1e502:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   1e506:	2800      	cmp	r0, #0
   1e508:	d1c0      	bne.n	1e48c <z_impl_k_queue_get+0x3c>
   1e50a:	1c6b      	adds	r3, r5, #1
   1e50c:	d0d4      	beq.n	1e4b8 <z_impl_k_queue_get+0x68>
	return z_impl_k_uptime_get();
   1e50e:	f000 f99c 	bl	1e84a <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   1e512:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   1e514:	42bd      	cmp	r5, r7
   1e516:	dacf      	bge.n	1e4b8 <z_impl_k_queue_get+0x68>
   1e518:	e7da      	b.n	1e4d0 <z_impl_k_queue_get+0x80>

0001e51a <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1e51a:	7b43      	ldrb	r3, [r0, #13]
   1e51c:	06db      	lsls	r3, r3, #27
   1e51e:	bf03      	ittte	eq
   1e520:	6980      	ldreq	r0, [r0, #24]
   1e522:	fab0 f080 	clzeq	r0, r0
   1e526:	0940      	lsreq	r0, r0, #5
   1e528:	2000      	movne	r0, #0
}
   1e52a:	4770      	bx	lr

0001e52c <z_swap_irqlock>:
{
   1e52c:	b510      	push	{r4, lr}
   1e52e:	4604      	mov	r4, r0
	z_check_stack_sentinel();
   1e530:	f7fd f96c 	bl	1b80c <z_check_stack_sentinel>
	ret = arch_swap(key);
   1e534:	4620      	mov	r0, r4
}
   1e536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   1e53a:	f7f0 be67 	b.w	f20c <arch_swap>

0001e53e <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   1e53e:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1e542:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1e546:	4298      	cmp	r0, r3
   1e548:	bfac      	ite	ge
   1e54a:	2000      	movge	r0, #0
   1e54c:	2001      	movlt	r0, #1
   1e54e:	4770      	bx	lr

0001e550 <z_find_first_thread_to_unpend>:
{
   1e550:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e552:	f04f 0320 	mov.w	r3, #32
   1e556:	f3ef 8411 	mrs	r4, BASEPRI
   1e55a:	f383 8811 	msr	BASEPRI, r3
   1e55e:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1e562:	f000 f85d 	bl	1e620 <z_priq_dumb_best>
	__asm__ volatile(
   1e566:	f384 8811 	msr	BASEPRI, r4
   1e56a:	f3bf 8f6f 	isb	sy
}
   1e56e:	bd10      	pop	{r4, pc}

0001e570 <z_unpend_thread_no_timeout>:
{
   1e570:	b538      	push	{r3, r4, r5, lr}
   1e572:	4604      	mov	r4, r0
	__asm__ volatile(
   1e574:	f04f 0320 	mov.w	r3, #32
   1e578:	f3ef 8511 	mrs	r5, BASEPRI
   1e57c:	f383 8811 	msr	BASEPRI, r3
   1e580:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1e584:	4601      	mov	r1, r0
   1e586:	6880      	ldr	r0, [r0, #8]
   1e588:	f7fc fe40 	bl	1b20c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1e58c:	7b63      	ldrb	r3, [r4, #13]
   1e58e:	f023 0302 	bic.w	r3, r3, #2
   1e592:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1e594:	f385 8811 	msr	BASEPRI, r5
   1e598:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1e59c:	2300      	movs	r3, #0
   1e59e:	60a3      	str	r3, [r4, #8]
}
   1e5a0:	bd38      	pop	{r3, r4, r5, pc}

0001e5a2 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1e5a2:	b921      	cbnz	r1, 1e5ae <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1e5a4:	f3ef 8005 	mrs	r0, IPSR
   1e5a8:	b908      	cbnz	r0, 1e5ae <z_reschedule+0xc>
	return z_swap_irqlock(key.key);
   1e5aa:	f7ff bfbf 	b.w	1e52c <z_swap_irqlock>
   1e5ae:	f381 8811 	msr	BASEPRI, r1
   1e5b2:	f3bf 8f6f 	isb	sy
}
   1e5b6:	4770      	bx	lr

0001e5b8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1e5b8:	4603      	mov	r3, r0
   1e5ba:	b920      	cbnz	r0, 1e5c6 <z_reschedule_irqlock+0xe>
   1e5bc:	f3ef 8205 	mrs	r2, IPSR
   1e5c0:	b90a      	cbnz	r2, 1e5c6 <z_reschedule_irqlock+0xe>
		z_swap_irqlock(key);
   1e5c2:	f7ff bfb3 	b.w	1e52c <z_swap_irqlock>
   1e5c6:	f383 8811 	msr	BASEPRI, r3
   1e5ca:	f3bf 8f6f 	isb	sy
}
   1e5ce:	4770      	bx	lr

0001e5d0 <z_reschedule_unlocked>:
	__asm__ volatile(
   1e5d0:	f04f 0320 	mov.w	r3, #32
   1e5d4:	f3ef 8011 	mrs	r0, BASEPRI
   1e5d8:	f383 8811 	msr	BASEPRI, r3
   1e5dc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1e5e0:	f7ff bfea 	b.w	1e5b8 <z_reschedule_irqlock>

0001e5e4 <z_unpend_thread>:
{
   1e5e4:	b538      	push	{r3, r4, r5, lr}
   1e5e6:	4604      	mov	r4, r0
   1e5e8:	f04f 0320 	mov.w	r3, #32
   1e5ec:	f3ef 8511 	mrs	r5, BASEPRI
   1e5f0:	f383 8811 	msr	BASEPRI, r3
   1e5f4:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1e5f8:	4601      	mov	r1, r0
   1e5fa:	6880      	ldr	r0, [r0, #8]
   1e5fc:	f7fc fe06 	bl	1b20c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1e600:	7b63      	ldrb	r3, [r4, #13]
   1e602:	f023 0302 	bic.w	r3, r3, #2
   1e606:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1e608:	f385 8811 	msr	BASEPRI, r5
   1e60c:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1e610:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   1e612:	f104 0018 	add.w	r0, r4, #24
   1e616:	60a3      	str	r3, [r4, #8]
}
   1e618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1e61c:	f000 b8d1 	b.w	1e7c2 <z_abort_timeout>

0001e620 <z_priq_dumb_best>:
	return list->head == list;
   1e620:	6803      	ldr	r3, [r0, #0]
}
   1e622:	4298      	cmp	r0, r3
   1e624:	bf14      	ite	ne
   1e626:	4618      	movne	r0, r3
   1e628:	2000      	moveq	r0, #0
   1e62a:	4770      	bx	lr

0001e62c <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   1e62c:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   1e630:	b570      	push	{r4, r5, r6, lr}
   1e632:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   1e634:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   1e638:	b1cb      	cbz	r3, 1e66e <z_thread_timeout+0x42>
	__asm__ volatile(
   1e63a:	f04f 0320 	mov.w	r3, #32
   1e63e:	f3ef 8611 	mrs	r6, BASEPRI
   1e642:	f383 8811 	msr	BASEPRI, r3
   1e646:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1e64a:	4629      	mov	r1, r5
   1e64c:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1e650:	f7fc fddc 	bl	1b20c <z_priq_dumb_remove>
   1e654:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1e658:	f023 0302 	bic.w	r3, r3, #2
   1e65c:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
   1e660:	f386 8811 	msr	BASEPRI, r6
   1e664:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1e668:	2300      	movs	r3, #0
   1e66a:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1e66e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1e672:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1e674:	f023 0314 	bic.w	r3, r3, #20
   1e678:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1e67c:	f7ff ff4d 	bl	1e51a <z_is_thread_ready>
   1e680:	b120      	cbz	r0, 1e68c <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
   1e682:	4628      	mov	r0, r5
}
   1e684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e688:	f7fc be10 	b.w	1b2ac <z_add_thread_to_ready_q>
   1e68c:	bd70      	pop	{r4, r5, r6, pc}

0001e68e <z_unpend_first_thread>:
{
   1e68e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1e690:	f04f 0320 	mov.w	r3, #32
   1e694:	f3ef 8211 	mrs	r2, BASEPRI
   1e698:	f383 8811 	msr	BASEPRI, r3
   1e69c:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1e6a0:	f7ff ffbe 	bl	1e620 <z_priq_dumb_best>
   1e6a4:	4604      	mov	r4, r0
	__asm__ volatile(
   1e6a6:	f382 8811 	msr	BASEPRI, r2
   1e6aa:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1e6ae:	b1c8      	cbz	r0, 1e6e4 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   1e6b0:	f04f 0320 	mov.w	r3, #32
   1e6b4:	f3ef 8511 	mrs	r5, BASEPRI
   1e6b8:	f383 8811 	msr	BASEPRI, r3
   1e6bc:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1e6c0:	4601      	mov	r1, r0
   1e6c2:	6880      	ldr	r0, [r0, #8]
   1e6c4:	f7fc fda2 	bl	1b20c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1e6c8:	7b63      	ldrb	r3, [r4, #13]
   1e6ca:	f023 0302 	bic.w	r3, r3, #2
   1e6ce:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1e6d0:	f385 8811 	msr	BASEPRI, r5
   1e6d4:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1e6d8:	2300      	movs	r3, #0
   1e6da:	f104 0018 	add.w	r0, r4, #24
   1e6de:	60a3      	str	r3, [r4, #8]
   1e6e0:	f000 f86f 	bl	1e7c2 <z_abort_timeout>
}
   1e6e4:	4620      	mov	r0, r4
   1e6e6:	bd38      	pop	{r3, r4, r5, pc}

0001e6e8 <z_unpend_all>:
{
   1e6e8:	b570      	push	{r4, r5, r6, lr}
   1e6ea:	4606      	mov	r6, r0
	int need_sched = 0;
   1e6ec:	2500      	movs	r5, #0
   1e6ee:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e6f0:	42a6      	cmp	r6, r4
   1e6f2:	d000      	beq.n	1e6f6 <z_unpend_all+0xe>
	while ((th = z_waitq_head(wait_q)) != NULL) {
   1e6f4:	b90c      	cbnz	r4, 1e6fa <z_unpend_all+0x12>
}
   1e6f6:	4628      	mov	r0, r5
   1e6f8:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(th);
   1e6fa:	4620      	mov	r0, r4
   1e6fc:	f7ff ff72 	bl	1e5e4 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   1e700:	4620      	mov	r0, r4
   1e702:	f7ff ff0a 	bl	1e51a <z_is_thread_ready>
		need_sched = 1;
   1e706:	2501      	movs	r5, #1
   1e708:	2800      	cmp	r0, #0
   1e70a:	d0f0      	beq.n	1e6ee <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   1e70c:	4620      	mov	r0, r4
   1e70e:	f7fc fdcd 	bl	1b2ac <z_add_thread_to_ready_q>
   1e712:	e7ec      	b.n	1e6ee <z_unpend_all+0x6>

0001e714 <z_impl_k_sem_init>:
	sys_dlist_init(&sem->poll_events);
   1e714:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1e718:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1e71c:	e9c0 0000 	strd	r0, r0, [r0]
   1e720:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1e724:	4770      	bx	lr

0001e726 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1e726:	7b43      	ldrb	r3, [r0, #13]
   1e728:	06db      	lsls	r3, r3, #27
   1e72a:	bf03      	ittte	eq
   1e72c:	6980      	ldreq	r0, [r0, #24]
   1e72e:	fab0 f080 	clzeq	r0, r0
   1e732:	0940      	lsreq	r0, r0, #5
   1e734:	2000      	movne	r0, #0
}
   1e736:	4770      	bx	lr

0001e738 <z_impl_k_thread_name_set>:
}
   1e738:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1e73c:	4770      	bx	lr

0001e73e <k_thread_name_get>:
}
   1e73e:	2000      	movs	r0, #0
   1e740:	4770      	bx	lr

0001e742 <z_new_thread_init>:
{
   1e742:	b510      	push	{r4, lr}
	*((u32_t *)pStack) = STACK_SENTINEL;
   1e744:	f04f 34f0 	mov.w	r4, #4042322160	; 0xf0f0f0f0
   1e748:	600c      	str	r4, [r1, #0]
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   1e74a:	9c02      	ldr	r4, [sp, #8]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
   1e74c:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
   1e74e:	7304      	strb	r4, [r0, #12]

	thread_base->sched_locked = 0U;
   1e750:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   1e752:	2404      	movs	r4, #4
	thread_base->sched_locked = 0U;
   1e754:	73c3      	strb	r3, [r0, #15]
	thread_base->thread_state = (u8_t)initial_state;
   1e756:	7344      	strb	r4, [r0, #13]
	node->prev = NULL;
   1e758:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   1e75c:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   1e760:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
   1e764:	bd10      	pop	{r4, pc}

0001e766 <z_thread_single_resume>:
{
   1e766:	b508      	push	{r3, lr}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1e768:	7b43      	ldrb	r3, [r0, #13]
   1e76a:	4602      	mov	r2, r0
   1e76c:	f023 0310 	bic.w	r3, r3, #16
   1e770:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   1e772:	f7ff ffd8 	bl	1e726 <z_is_thread_ready>
   1e776:	b120      	cbz	r0, 1e782 <z_thread_single_resume+0x1c>
}
   1e778:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_add_thread_to_ready_q(thread);
   1e77c:	4610      	mov	r0, r2
   1e77e:	f7fc bd95 	b.w	1b2ac <z_add_thread_to_ready_q>
   1e782:	bd08      	pop	{r3, pc}

0001e784 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   1e784:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1e786:	b510      	push	{r4, lr}
   1e788:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1e78a:	b103      	cbz	r3, 1e78e <z_thread_single_abort+0xa>
		thread->fn_abort();
   1e78c:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   1e78e:	4620      	mov	r0, r4
   1e790:	f7ff ffc9 	bl	1e726 <z_is_thread_ready>
   1e794:	b138      	cbz	r0, 1e7a6 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
   1e796:	4620      	mov	r0, r4
   1e798:	f7fc fe36 	bl	1b408 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   1e79c:	7b63      	ldrb	r3, [r4, #13]
   1e79e:	f043 0308 	orr.w	r3, r3, #8
   1e7a2:	7363      	strb	r3, [r4, #13]
}
   1e7a4:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
   1e7a6:	7b63      	ldrb	r3, [r4, #13]
   1e7a8:	079b      	lsls	r3, r3, #30
   1e7aa:	d502      	bpl.n	1e7b2 <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
   1e7ac:	4620      	mov	r0, r4
   1e7ae:	f7ff fedf 	bl	1e570 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   1e7b2:	69a3      	ldr	r3, [r4, #24]
   1e7b4:	2b00      	cmp	r3, #0
   1e7b6:	d0f1      	beq.n	1e79c <z_thread_single_abort+0x18>
   1e7b8:	f104 0018 	add.w	r0, r4, #24
   1e7bc:	f000 f801 	bl	1e7c2 <z_abort_timeout>
   1e7c0:	e7ec      	b.n	1e79c <z_thread_single_abort+0x18>

0001e7c2 <z_abort_timeout>:
{
   1e7c2:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e7c4:	f04f 0220 	mov.w	r2, #32
   1e7c8:	f3ef 8411 	mrs	r4, BASEPRI
   1e7cc:	f382 8811 	msr	BASEPRI, r2
   1e7d0:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1e7d4:	6803      	ldr	r3, [r0, #0]
   1e7d6:	b13b      	cbz	r3, 1e7e8 <z_abort_timeout+0x26>
			remove_timeout(to);
   1e7d8:	f7fd f97a 	bl	1bad0 <remove_timeout>
			ret = 0;
   1e7dc:	2000      	movs	r0, #0
	__asm__ volatile(
   1e7de:	f384 8811 	msr	BASEPRI, r4
   1e7e2:	f3bf 8f6f 	isb	sy
}
   1e7e6:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1e7e8:	f06f 0015 	mvn.w	r0, #21
   1e7ec:	e7f7      	b.n	1e7de <z_abort_timeout+0x1c>

0001e7ee <z_get_next_timeout_expiry>:
{
   1e7ee:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e7f0:	f04f 0320 	mov.w	r3, #32
   1e7f4:	f3ef 8411 	mrs	r4, BASEPRI
   1e7f8:	f383 8811 	msr	BASEPRI, r3
   1e7fc:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1e800:	f7fd f97a 	bl	1baf8 <next_timeout>
	__asm__ volatile(
   1e804:	f384 8811 	msr	BASEPRI, r4
   1e808:	f3bf 8f6f 	isb	sy
}
   1e80c:	bd10      	pop	{r4, pc}

0001e80e <z_set_timeout_expiry>:
{
   1e80e:	b570      	push	{r4, r5, r6, lr}
   1e810:	4604      	mov	r4, r0
   1e812:	460e      	mov	r6, r1
	__asm__ volatile(
   1e814:	f04f 0320 	mov.w	r3, #32
   1e818:	f3ef 8511 	mrs	r5, BASEPRI
   1e81c:	f383 8811 	msr	BASEPRI, r3
   1e820:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   1e824:	f7fd f968 	bl	1baf8 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1e828:	2801      	cmp	r0, #1
   1e82a:	dd05      	ble.n	1e838 <z_set_timeout_expiry+0x2a>
   1e82c:	42a0      	cmp	r0, r4
   1e82e:	dd03      	ble.n	1e838 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   1e830:	4631      	mov	r1, r6
   1e832:	4620      	mov	r0, r4
   1e834:	f7f0 fc4c 	bl	f0d0 <z_clock_set_timeout>
	__asm__ volatile(
   1e838:	f385 8811 	msr	BASEPRI, r5
   1e83c:	f3bf 8f6f 	isb	sy
}
   1e840:	bd70      	pop	{r4, r5, r6, pc}

0001e842 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   1e842:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   1e844:	f7fd fa0c 	bl	1bc60 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   1e848:	bd08      	pop	{r3, pc}

0001e84a <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   1e84a:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
   1e84c:	f7fd fa08 	bl	1bc60 <z_tick_get>
			return (t * to_hz + off) / from_hz;
   1e850:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1e854:	fba0 2304 	umull	r2, r3, r0, r4
   1e858:	fb04 3301 	mla	r3, r4, r1, r3
   1e85c:	0bd0      	lsrs	r0, r2, #15
}
   1e85e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1e862:	0bd9      	lsrs	r1, r3, #15
   1e864:	bd10      	pop	{r4, pc}

0001e866 <k_timer_init>:
	timer->status = 0U;
   1e866:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1e868:	e9c0 1206 	strd	r1, r2, [r0, #24]
   1e86c:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
   1e870:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   1e872:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   1e876:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
   1e87a:	6283      	str	r3, [r0, #40]	; 0x28
}
   1e87c:	4770      	bx	lr

0001e87e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1e87e:	b510      	push	{r4, lr}
   1e880:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1e882:	f7ff ff9e 	bl	1e7c2 <z_abort_timeout>

	if (inactive) {
   1e886:	bb00      	cbnz	r0, 1e8ca <z_impl_k_timer_stop+0x4c>
		return;
	}

	if (timer->stop_fn != NULL) {
   1e888:	69e3      	ldr	r3, [r4, #28]
   1e88a:	b10b      	cbz	r3, 1e890 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1e88c:	4620      	mov	r0, r4
   1e88e:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   1e890:	f104 0010 	add.w	r0, r4, #16
   1e894:	2100      	movs	r1, #0
   1e896:	f7ff fe5b 	bl	1e550 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   1e89a:	4604      	mov	r4, r0
   1e89c:	b1a8      	cbz	r0, 1e8ca <z_impl_k_timer_stop+0x4c>
		z_unpend_thread_no_timeout(thread);
   1e89e:	f7ff fe67 	bl	1e570 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1e8a2:	7b63      	ldrb	r3, [r4, #13]
   1e8a4:	06db      	lsls	r3, r3, #27
   1e8a6:	d104      	bne.n	1e8b2 <z_impl_k_timer_stop+0x34>
	if (z_is_thread_ready(thread)) {
   1e8a8:	69a3      	ldr	r3, [r4, #24]
   1e8aa:	b913      	cbnz	r3, 1e8b2 <z_impl_k_timer_stop+0x34>
		z_add_thread_to_ready_q(thread);
   1e8ac:	4620      	mov	r0, r4
   1e8ae:	f7fc fcfd 	bl	1b2ac <z_add_thread_to_ready_q>
	__asm__ volatile(
   1e8b2:	f04f 0320 	mov.w	r3, #32
   1e8b6:	f3ef 8011 	mrs	r0, BASEPRI
   1e8ba:	f383 8811 	msr	BASEPRI, r3
   1e8be:	f3bf 8f6f 	isb	sy

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
		z_reschedule_unlocked();
	}
}
   1e8c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1e8c6:	f7ff be77 	b.w	1e5b8 <z_reschedule_irqlock>
   1e8ca:	bd10      	pop	{r4, pc}

0001e8cc <clear_event_registrations>:
	while (num_events--) {
   1e8cc:	2314      	movs	r3, #20
{
   1e8ce:	b570      	push	{r4, r5, r6, lr}
	event->poller = NULL;
   1e8d0:	2400      	movs	r4, #0
   1e8d2:	2601      	movs	r6, #1
   1e8d4:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   1e8d8:	4281      	cmp	r1, r0
   1e8da:	d100      	bne.n	1e8de <clear_event_registrations+0x12>
}
   1e8dc:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   1e8de:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   1e8e2:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   1e8e6:	f003 030f 	and.w	r3, r3, #15
   1e8ea:	2b04      	cmp	r3, #4
   1e8ec:	d80d      	bhi.n	1e90a <clear_event_registrations+0x3e>
   1e8ee:	fa06 f303 	lsl.w	r3, r6, r3
   1e8f2:	f013 0f16 	tst.w	r3, #22
   1e8f6:	d008      	beq.n	1e90a <clear_event_registrations+0x3e>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1e8f8:	f851 3c14 	ldr.w	r3, [r1, #-20]
   1e8fc:	b12b      	cbz	r3, 1e90a <clear_event_registrations+0x3e>
	node->prev->next = node->next;
   1e8fe:	f851 5c10 	ldr.w	r5, [r1, #-16]
   1e902:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   1e904:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1e906:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   1e90a:	f382 8811 	msr	BASEPRI, r2
   1e90e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1e912:	f04f 0320 	mov.w	r3, #32
   1e916:	f3ef 8211 	mrs	r2, BASEPRI
   1e91a:	f383 8811 	msr	BASEPRI, r3
   1e91e:	f3bf 8f6f 	isb	sy
   1e922:	3914      	subs	r1, #20
   1e924:	e7d8      	b.n	1e8d8 <clear_event_registrations+0xc>

0001e926 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   1e926:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   1e928:	6884      	ldr	r4, [r0, #8]
{
   1e92a:	4605      	mov	r5, r0
   1e92c:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   1e92e:	b19c      	cbz	r4, 1e958 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   1e930:	68a3      	ldr	r3, [r4, #8]
   1e932:	b95b      	cbnz	r3, 1e94c <signal_poll_event+0x26>
	int retcode = 0;
   1e934:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   1e936:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1e938:	2300      	movs	r3, #0
   1e93a:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   1e93c:	68eb      	ldr	r3, [r5, #12]
   1e93e:	f3c3 3204 	ubfx	r2, r3, #12, #5
   1e942:	4316      	orrs	r6, r2
   1e944:	f366 3310 	bfi	r3, r6, #12, #5
   1e948:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   1e94a:	e004      	b.n	1e956 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   1e94c:	4798      	blx	r3
		poller->is_polling = false;
   1e94e:	2300      	movs	r3, #0
		if (retcode < 0) {
   1e950:	2800      	cmp	r0, #0
		poller->is_polling = false;
   1e952:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   1e954:	daf0      	bge.n	1e938 <signal_poll_event+0x12>
}
   1e956:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   1e958:	4620      	mov	r0, r4
   1e95a:	e7ed      	b.n	1e938 <signal_poll_event+0x12>

0001e95c <k_poll_poller_cb>:
{
   1e95c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   1e95e:	6883      	ldr	r3, [r0, #8]
{
   1e960:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   1e962:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   1e964:	7b63      	ldrb	r3, [r4, #13]
   1e966:	079a      	lsls	r2, r3, #30
   1e968:	d401      	bmi.n	1e96e <k_poll_poller_cb+0x12>
		return 0;
   1e96a:	2000      	movs	r0, #0
}
   1e96c:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   1e96e:	6a23      	ldr	r3, [r4, #32]
   1e970:	3302      	adds	r3, #2
   1e972:	d012      	beq.n	1e99a <k_poll_poller_cb+0x3e>
	z_unpend_thread(thread);
   1e974:	4620      	mov	r0, r4
   1e976:	f7ff fe35 	bl	1e5e4 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1e97a:	2d08      	cmp	r5, #8
   1e97c:	bf0c      	ite	eq
   1e97e:	f06f 0303 	mvneq.w	r3, #3
   1e982:	2300      	movne	r3, #0
   1e984:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1e986:	7b63      	ldrb	r3, [r4, #13]
   1e988:	06db      	lsls	r3, r3, #27
   1e98a:	d1ee      	bne.n	1e96a <k_poll_poller_cb+0xe>
	if (!z_is_thread_ready(thread)) {
   1e98c:	69a5      	ldr	r5, [r4, #24]
   1e98e:	2d00      	cmp	r5, #0
   1e990:	d1eb      	bne.n	1e96a <k_poll_poller_cb+0xe>
		z_add_thread_to_ready_q(thread);
   1e992:	4620      	mov	r0, r4
   1e994:	f7fc fc8a 	bl	1b2ac <z_add_thread_to_ready_q>
	return 0;
   1e998:	e7e7      	b.n	1e96a <k_poll_poller_cb+0xe>
		return -EAGAIN;
   1e99a:	f06f 000a 	mvn.w	r0, #10
   1e99e:	e7e5      	b.n	1e96c <k_poll_poller_cb+0x10>

0001e9a0 <add_event>:
{
   1e9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e9a2:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1e9a4:	e9d0 2300 	ldrd	r2, r3, [r0]
   1e9a8:	4290      	cmp	r0, r2
   1e9aa:	4604      	mov	r4, r0
   1e9ac:	460d      	mov	r5, r1
   1e9ae:	d106      	bne.n	1e9be <add_event+0x1e>
	node->prev = list->tail;
   1e9b0:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1e9b2:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   1e9b4:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1e9b6:	6863      	ldr	r3, [r4, #4]
   1e9b8:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1e9ba:	6065      	str	r5, [r4, #4]
}
   1e9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1e9be:	2b00      	cmp	r3, #0
   1e9c0:	d0f6      	beq.n	1e9b0 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   1e9c2:	689b      	ldr	r3, [r3, #8]
   1e9c4:	6879      	ldr	r1, [r7, #4]
   1e9c6:	6858      	ldr	r0, [r3, #4]
   1e9c8:	f7ff fdb9 	bl	1e53e <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1e9cc:	2800      	cmp	r0, #0
   1e9ce:	d1ef      	bne.n	1e9b0 <add_event+0x10>
	return list->head == list;
   1e9d0:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e9d2:	42b4      	cmp	r4, r6
   1e9d4:	d0ec      	beq.n	1e9b0 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e9d6:	2e00      	cmp	r6, #0
   1e9d8:	d0ea      	beq.n	1e9b0 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   1e9da:	68b3      	ldr	r3, [r6, #8]
   1e9dc:	6878      	ldr	r0, [r7, #4]
   1e9de:	6859      	ldr	r1, [r3, #4]
   1e9e0:	f7ff fdad 	bl	1e53e <z_is_t1_higher_prio_than_t2>
   1e9e4:	b128      	cbz	r0, 1e9f2 <add_event+0x52>
	node->prev = successor->prev;
   1e9e6:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1e9e8:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1e9ec:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1e9ee:	6075      	str	r5, [r6, #4]
			return;
   1e9f0:	e7e4      	b.n	1e9bc <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1e9f2:	6863      	ldr	r3, [r4, #4]
   1e9f4:	429e      	cmp	r6, r3
   1e9f6:	d0db      	beq.n	1e9b0 <add_event+0x10>
   1e9f8:	6836      	ldr	r6, [r6, #0]
   1e9fa:	e7ec      	b.n	1e9d6 <add_event+0x36>

0001e9fc <register_events>:
{
   1e9fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1ea00:	f04f 0b00 	mov.w	fp, #0
{
   1ea04:	4688      	mov	r8, r1
   1ea06:	4615      	mov	r5, r2
   1ea08:	4699      	mov	r9, r3
   1ea0a:	4604      	mov	r4, r0
	int events_registered = 0;
   1ea0c:	465e      	mov	r6, fp
	event->poller = NULL;
   1ea0e:	465f      	mov	r7, fp
	for (int ii = 0; ii < num_events; ii++) {
   1ea10:	45c3      	cmp	fp, r8
   1ea12:	db02      	blt.n	1ea1a <register_events+0x1e>
}
   1ea14:	4630      	mov	r0, r6
   1ea16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea1a:	f04f 0320 	mov.w	r3, #32
   1ea1e:	f3ef 8a11 	mrs	sl, BASEPRI
   1ea22:	f383 8811 	msr	BASEPRI, r3
   1ea26:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1ea2a:	7b63      	ldrb	r3, [r4, #13]
   1ea2c:	f003 030f 	and.w	r3, r3, #15
   1ea30:	2b02      	cmp	r3, #2
   1ea32:	d005      	beq.n	1ea40 <register_events+0x44>
   1ea34:	2b04      	cmp	r3, #4
   1ea36:	d006      	beq.n	1ea46 <register_events+0x4a>
   1ea38:	2b01      	cmp	r3, #1
   1ea3a:	d118      	bne.n	1ea6e <register_events+0x72>
		if (event->signal->signaled != 0U) {
   1ea3c:	6922      	ldr	r2, [r4, #16]
   1ea3e:	e000      	b.n	1ea42 <register_events+0x46>
		if (k_sem_count_get(event->sem) > 0) {
   1ea40:	6922      	ldr	r2, [r4, #16]
		if (event->signal->signaled != 0U) {
   1ea42:	6892      	ldr	r2, [r2, #8]
   1ea44:	e001      	b.n	1ea4a <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
   1ea46:	6922      	ldr	r2, [r4, #16]
   1ea48:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0U) {
   1ea4a:	b182      	cbz	r2, 1ea6e <register_events+0x72>
	event->state |= state;
   1ea4c:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   1ea4e:	60a7      	str	r7, [r4, #8]
	event->state |= state;
   1ea50:	f3c2 3104 	ubfx	r1, r2, #12, #5
   1ea54:	430b      	orrs	r3, r1
   1ea56:	f363 3210 	bfi	r2, r3, #12, #5
   1ea5a:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   1ea5c:	702f      	strb	r7, [r5, #0]
	__asm__ volatile(
   1ea5e:	f38a 8811 	msr	BASEPRI, sl
   1ea62:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1ea66:	f10b 0b01 	add.w	fp, fp, #1
   1ea6a:	3414      	adds	r4, #20
   1ea6c:	e7d0      	b.n	1ea10 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   1ea6e:	f1b9 0f00 	cmp.w	r9, #0
   1ea72:	d1f4      	bne.n	1ea5e <register_events+0x62>
   1ea74:	782b      	ldrb	r3, [r5, #0]
   1ea76:	2b00      	cmp	r3, #0
   1ea78:	d0f1      	beq.n	1ea5e <register_events+0x62>
	switch (event->type) {
   1ea7a:	7b63      	ldrb	r3, [r4, #13]
   1ea7c:	f003 030f 	and.w	r3, r3, #15
   1ea80:	2b02      	cmp	r3, #2
   1ea82:	d007      	beq.n	1ea94 <register_events+0x98>
   1ea84:	2b04      	cmp	r3, #4
   1ea86:	d00e      	beq.n	1eaa6 <register_events+0xaa>
   1ea88:	2b01      	cmp	r3, #1
   1ea8a:	d109      	bne.n	1eaa0 <register_events+0xa4>
		add_event(&event->signal->poll_events, event, poller);
   1ea8c:	462a      	mov	r2, r5
   1ea8e:	4621      	mov	r1, r4
   1ea90:	6920      	ldr	r0, [r4, #16]
   1ea92:	e003      	b.n	1ea9c <register_events+0xa0>
		add_event(&event->sem->poll_events, event, poller);
   1ea94:	462a      	mov	r2, r5
   1ea96:	4621      	mov	r1, r4
   1ea98:	6920      	ldr	r0, [r4, #16]
   1ea9a:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   1ea9c:	f7ff ff80 	bl	1e9a0 <add_event>
	event->poller = poller;
   1eaa0:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   1eaa2:	3601      	adds	r6, #1
   1eaa4:	e7db      	b.n	1ea5e <register_events+0x62>
		add_event(&event->queue->poll_events, event, poller);
   1eaa6:	6920      	ldr	r0, [r4, #16]
   1eaa8:	462a      	mov	r2, r5
   1eaaa:	4621      	mov	r1, r4
   1eaac:	3008      	adds	r0, #8
   1eaae:	e7f5      	b.n	1ea9c <register_events+0xa0>

0001eab0 <z_handle_obj_poll_events>:
	return list->head == list;
   1eab0:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1eab2:	4298      	cmp	r0, r3
   1eab4:	d009      	beq.n	1eaca <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1eab6:	e9d3 2000 	ldrd	r2, r0, [r3]
   1eaba:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   1eabc:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   1eabe:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   1eac0:	4618      	mov	r0, r3
	node->prev = NULL;
   1eac2:	e9c3 2200 	strd	r2, r2, [r3]
   1eac6:	f7ff bf2e 	b.w	1e926 <signal_poll_event>
	}
}
   1eaca:	4770      	bx	lr

0001eacc <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   1eacc:	4770      	bx	lr
