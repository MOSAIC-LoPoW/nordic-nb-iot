
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

0000c000 <_vector_table>:
    c000:	20029050 	.word	0x20029050
    c004:	00010251 	.word	0x00010251
    c008:	0002456f 	.word	0x0002456f
    c00c:	00010069 	.word	0x00010069
    c010:	00010069 	.word	0x00010069
    c014:	00010069 	.word	0x00010069
    c018:	00010069 	.word	0x00010069
    c01c:	00010069 	.word	0x00010069
    c020:	00010069 	.word	0x00010069
    c024:	00010069 	.word	0x00010069
    c028:	00010069 	.word	0x00010069
    c02c:	0000ff29 	.word	0x0000ff29
    c030:	00010069 	.word	0x00010069
    c034:	00010069 	.word	0x00010069
    c038:	0000fe79 	.word	0x0000fe79
    c03c:	0002455f 	.word	0x0002455f

0000c040 <_irq_vector_table>:
    c040:	00010211 00010211 00010211 00010211     ................
    c050:	00010211 00010211 00010211 00010211     ................
    c060:	00010211 00010211 00010211 00010211     ................
    c070:	00010211 00010211 00010211 00010211     ................
    c080:	00010211 00010211 00010211 00010211     ................
    c090:	00010211 00010211 00010211 00010211     ................
    c0a0:	00010211 00010211 00010211 00010211     ................
    c0b0:	00011fc9 00024ffd 00010211 00010211     .....O..........
    c0c0:	00010211 00010211 00010211 00010211     ................
    c0d0:	00010211 00010211 00010211 00010211     ................
    c0e0:	00010211 00010211 0002501b 00010211     .........P......
    c0f0:	00010211 00010211 00010211 00010211     ................
    c100:	00010211 00010211 00010211 00010211     ................
    c110:	00010211 00010211 00010211 00010211     ................
    c120:	00010211 00010211 00010211 00010211     ................
    c130:	00010211 00010211 00010211 00010211     ................
    c140:	00010211                                ....

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b01 0001d050     ...(L....[..P...
    c210:	00000001 0000c000 2002be60 000128ed     ........`.. .(..

Disassembly of section _TEXT_SECTION_NAME_2:

0000c220 <__aeabi_uldivmod>:
    c220:	b953      	cbnz	r3, c238 <__aeabi_uldivmod+0x18>
    c222:	b94a      	cbnz	r2, c238 <__aeabi_uldivmod+0x18>
    c224:	2900      	cmp	r1, #0
    c226:	bf08      	it	eq
    c228:	2800      	cmpeq	r0, #0
    c22a:	bf1c      	itt	ne
    c22c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c234:	f000 b97c 	b.w	c530 <__aeabi_idiv0>
    c238:	f1ad 0c08 	sub.w	ip, sp, #8
    c23c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c240:	f000 f806 	bl	c250 <__udivmoddi4>
    c244:	f8dd e004 	ldr.w	lr, [sp, #4]
    c248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c24c:	b004      	add	sp, #16
    c24e:	4770      	bx	lr

0000c250 <__udivmoddi4>:
    c250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c254:	468c      	mov	ip, r1
    c256:	9d08      	ldr	r5, [sp, #32]
    c258:	4604      	mov	r4, r0
    c25a:	468a      	mov	sl, r1
    c25c:	2b00      	cmp	r3, #0
    c25e:	d14a      	bne.n	c2f6 <__udivmoddi4+0xa6>
    c260:	428a      	cmp	r2, r1
    c262:	4617      	mov	r7, r2
    c264:	d962      	bls.n	c32c <__udivmoddi4+0xdc>
    c266:	fab2 f682 	clz	r6, r2
    c26a:	b14e      	cbz	r6, c280 <__udivmoddi4+0x30>
    c26c:	f1c6 0e20 	rsb	lr, r6, #32
    c270:	fa01 f306 	lsl.w	r3, r1, r6
    c274:	40b7      	lsls	r7, r6
    c276:	40b4      	lsls	r4, r6
    c278:	fa20 fe0e 	lsr.w	lr, r0, lr
    c27c:	ea4e 0a03 	orr.w	sl, lr, r3
    c280:	ea4f 4817 	mov.w	r8, r7, lsr #16
    c284:	0c23      	lsrs	r3, r4, #16
    c286:	fa1f f987 	uxth.w	r9, r7
    c28a:	fbba fef8 	udiv	lr, sl, r8
    c28e:	fb08 aa1e 	mls	sl, r8, lr, sl
    c292:	fb0e f209 	mul.w	r2, lr, r9
    c296:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
    c29a:	429a      	cmp	r2, r3
    c29c:	d90b      	bls.n	c2b6 <__udivmoddi4+0x66>
    c29e:	18fb      	adds	r3, r7, r3
    c2a0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
    c2a4:	bf2c      	ite	cs
    c2a6:	2001      	movcs	r0, #1
    c2a8:	2000      	movcc	r0, #0
    c2aa:	429a      	cmp	r2, r3
    c2ac:	d902      	bls.n	c2b4 <__udivmoddi4+0x64>
    c2ae:	2800      	cmp	r0, #0
    c2b0:	f000 812a 	beq.w	c508 <__udivmoddi4+0x2b8>
    c2b4:	468e      	mov	lr, r1
    c2b6:	1a9a      	subs	r2, r3, r2
    c2b8:	b2a3      	uxth	r3, r4
    c2ba:	fbb2 f0f8 	udiv	r0, r2, r8
    c2be:	fb08 2210 	mls	r2, r8, r0, r2
    c2c2:	fb00 f909 	mul.w	r9, r0, r9
    c2c6:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
    c2ca:	45a1      	cmp	r9, r4
    c2cc:	d907      	bls.n	c2de <__udivmoddi4+0x8e>
    c2ce:	193c      	adds	r4, r7, r4
    c2d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    c2d4:	d202      	bcs.n	c2dc <__udivmoddi4+0x8c>
    c2d6:	45a1      	cmp	r9, r4
    c2d8:	f200 8110 	bhi.w	c4fc <__udivmoddi4+0x2ac>
    c2dc:	4618      	mov	r0, r3
    c2de:	eba4 0409 	sub.w	r4, r4, r9
    c2e2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    c2e6:	2100      	movs	r1, #0
    c2e8:	b11d      	cbz	r5, c2f2 <__udivmoddi4+0xa2>
    c2ea:	40f4      	lsrs	r4, r6
    c2ec:	2300      	movs	r3, #0
    c2ee:	e9c5 4300 	strd	r4, r3, [r5]
    c2f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c2f6:	428b      	cmp	r3, r1
    c2f8:	d908      	bls.n	c30c <__udivmoddi4+0xbc>
    c2fa:	2d00      	cmp	r5, #0
    c2fc:	f000 80f2 	beq.w	c4e4 <__udivmoddi4+0x294>
    c300:	2100      	movs	r1, #0
    c302:	e9c5 0c00 	strd	r0, ip, [r5]
    c306:	4608      	mov	r0, r1
    c308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c30c:	fab3 f183 	clz	r1, r3
    c310:	2900      	cmp	r1, #0
    c312:	d14e      	bne.n	c3b2 <__udivmoddi4+0x162>
    c314:	4563      	cmp	r3, ip
    c316:	f0c0 80e8 	bcc.w	c4ea <__udivmoddi4+0x29a>
    c31a:	4282      	cmp	r2, r0
    c31c:	f240 80e5 	bls.w	c4ea <__udivmoddi4+0x29a>
    c320:	4608      	mov	r0, r1
    c322:	2d00      	cmp	r5, #0
    c324:	d0e5      	beq.n	c2f2 <__udivmoddi4+0xa2>
    c326:	e9c5 4a00 	strd	r4, sl, [r5]
    c32a:	e7e2      	b.n	c2f2 <__udivmoddi4+0xa2>
    c32c:	b902      	cbnz	r2, c330 <__udivmoddi4+0xe0>
    c32e:	deff      	udf	#255	; 0xff
    c330:	fab2 f682 	clz	r6, r2
    c334:	2e00      	cmp	r6, #0
    c336:	f040 8099 	bne.w	c46c <__udivmoddi4+0x21c>
    c33a:	1a8b      	subs	r3, r1, r2
    c33c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    c340:	fa1f f882 	uxth.w	r8, r2
    c344:	2101      	movs	r1, #1
    c346:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    c34a:	fbb3 f2fe 	udiv	r2, r3, lr
    c34e:	fb0e 3012 	mls	r0, lr, r2, r3
    c352:	fb08 f902 	mul.w	r9, r8, r2
    c356:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
    c35a:	45e1      	cmp	r9, ip
    c35c:	d908      	bls.n	c370 <__udivmoddi4+0x120>
    c35e:	eb17 0c0c 	adds.w	ip, r7, ip
    c362:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
    c366:	d202      	bcs.n	c36e <__udivmoddi4+0x11e>
    c368:	45e1      	cmp	r9, ip
    c36a:	f200 80ca 	bhi.w	c502 <__udivmoddi4+0x2b2>
    c36e:	461a      	mov	r2, r3
    c370:	ebac 0c09 	sub.w	ip, ip, r9
    c374:	b2a3      	uxth	r3, r4
    c376:	fbbc f0fe 	udiv	r0, ip, lr
    c37a:	fb0e cc10 	mls	ip, lr, r0, ip
    c37e:	fb08 f800 	mul.w	r8, r8, r0
    c382:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
    c386:	45a0      	cmp	r8, r4
    c388:	d90e      	bls.n	c3a8 <__udivmoddi4+0x158>
    c38a:	193c      	adds	r4, r7, r4
    c38c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    c390:	bf2c      	ite	cs
    c392:	f04f 0c01 	movcs.w	ip, #1
    c396:	f04f 0c00 	movcc.w	ip, #0
    c39a:	45a0      	cmp	r8, r4
    c39c:	d903      	bls.n	c3a6 <__udivmoddi4+0x156>
    c39e:	f1bc 0f00 	cmp.w	ip, #0
    c3a2:	f000 80a8 	beq.w	c4f6 <__udivmoddi4+0x2a6>
    c3a6:	4618      	mov	r0, r3
    c3a8:	eba4 0408 	sub.w	r4, r4, r8
    c3ac:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    c3b0:	e79a      	b.n	c2e8 <__udivmoddi4+0x98>
    c3b2:	f1c1 0420 	rsb	r4, r1, #32
    c3b6:	408b      	lsls	r3, r1
    c3b8:	fa02 fe01 	lsl.w	lr, r2, r1
    c3bc:	fa0c f601 	lsl.w	r6, ip, r1
    c3c0:	40e2      	lsrs	r2, r4
    c3c2:	fa20 f704 	lsr.w	r7, r0, r4
    c3c6:	fa2c fc04 	lsr.w	ip, ip, r4
    c3ca:	fa00 f801 	lsl.w	r8, r0, r1
    c3ce:	4313      	orrs	r3, r2
    c3d0:	433e      	orrs	r6, r7
    c3d2:	0c1f      	lsrs	r7, r3, #16
    c3d4:	0c32      	lsrs	r2, r6, #16
    c3d6:	fa1f f983 	uxth.w	r9, r3
    c3da:	fbbc f0f7 	udiv	r0, ip, r7
    c3de:	fb07 cc10 	mls	ip, r7, r0, ip
    c3e2:	fb00 fa09 	mul.w	sl, r0, r9
    c3e6:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    c3ea:	45e2      	cmp	sl, ip
    c3ec:	d908      	bls.n	c400 <__udivmoddi4+0x1b0>
    c3ee:	eb13 0c0c 	adds.w	ip, r3, ip
    c3f2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    c3f6:	d202      	bcs.n	c3fe <__udivmoddi4+0x1ae>
    c3f8:	45e2      	cmp	sl, ip
    c3fa:	f200 8089 	bhi.w	c510 <__udivmoddi4+0x2c0>
    c3fe:	4610      	mov	r0, r2
    c400:	ebac 0c0a 	sub.w	ip, ip, sl
    c404:	b2b6      	uxth	r6, r6
    c406:	fbbc faf7 	udiv	sl, ip, r7
    c40a:	fb07 cc1a 	mls	ip, r7, sl, ip
    c40e:	fb0a f909 	mul.w	r9, sl, r9
    c412:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
    c416:	4591      	cmp	r9, r2
    c418:	d906      	bls.n	c428 <__udivmoddi4+0x1d8>
    c41a:	189a      	adds	r2, r3, r2
    c41c:	f10a 36ff 	add.w	r6, sl, #4294967295	; 0xffffffff
    c420:	d201      	bcs.n	c426 <__udivmoddi4+0x1d6>
    c422:	4591      	cmp	r9, r2
    c424:	d87a      	bhi.n	c51c <__udivmoddi4+0x2cc>
    c426:	46b2      	mov	sl, r6
    c428:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
    c42c:	eba2 0209 	sub.w	r2, r2, r9
    c430:	fba0 670e 	umull	r6, r7, r0, lr
    c434:	42ba      	cmp	r2, r7
    c436:	46b4      	mov	ip, r6
    c438:	46b9      	mov	r9, r7
    c43a:	d302      	bcc.n	c442 <__udivmoddi4+0x1f2>
    c43c:	d107      	bne.n	c44e <__udivmoddi4+0x1fe>
    c43e:	45b0      	cmp	r8, r6
    c440:	d205      	bcs.n	c44e <__udivmoddi4+0x1fe>
    c442:	ebb6 0c0e 	subs.w	ip, r6, lr
    c446:	eb67 0303 	sbc.w	r3, r7, r3
    c44a:	3801      	subs	r0, #1
    c44c:	4699      	mov	r9, r3
    c44e:	2d00      	cmp	r5, #0
    c450:	d06b      	beq.n	c52a <__udivmoddi4+0x2da>
    c452:	ebb8 030c 	subs.w	r3, r8, ip
    c456:	eb62 0209 	sbc.w	r2, r2, r9
    c45a:	fa02 f404 	lsl.w	r4, r2, r4
    c45e:	40cb      	lsrs	r3, r1
    c460:	40ca      	lsrs	r2, r1
    c462:	2100      	movs	r1, #0
    c464:	431c      	orrs	r4, r3
    c466:	e9c5 4200 	strd	r4, r2, [r5]
    c46a:	e742      	b.n	c2f2 <__udivmoddi4+0xa2>
    c46c:	40b7      	lsls	r7, r6
    c46e:	f1c6 0220 	rsb	r2, r6, #32
    c472:	fa01 f306 	lsl.w	r3, r1, r6
    c476:	40b4      	lsls	r4, r6
    c478:	fa21 fc02 	lsr.w	ip, r1, r2
    c47c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c480:	fa20 f202 	lsr.w	r2, r0, r2
    c484:	fa1f f887 	uxth.w	r8, r7
    c488:	fbbc f1fe 	udiv	r1, ip, lr
    c48c:	431a      	orrs	r2, r3
    c48e:	fb0e cc11 	mls	ip, lr, r1, ip
    c492:	fb01 f008 	mul.w	r0, r1, r8
    c496:	0c13      	lsrs	r3, r2, #16
    c498:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
    c49c:	4560      	cmp	r0, ip
    c49e:	d907      	bls.n	c4b0 <__udivmoddi4+0x260>
    c4a0:	eb17 0c0c 	adds.w	ip, r7, ip
    c4a4:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
    c4a8:	d201      	bcs.n	c4ae <__udivmoddi4+0x25e>
    c4aa:	4560      	cmp	r0, ip
    c4ac:	d833      	bhi.n	c516 <__udivmoddi4+0x2c6>
    c4ae:	4619      	mov	r1, r3
    c4b0:	ebac 0c00 	sub.w	ip, ip, r0
    c4b4:	b292      	uxth	r2, r2
    c4b6:	fbbc f0fe 	udiv	r0, ip, lr
    c4ba:	fb0e cc10 	mls	ip, lr, r0, ip
    c4be:	fb00 f308 	mul.w	r3, r0, r8
    c4c2:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    c4c6:	4563      	cmp	r3, ip
    c4c8:	d907      	bls.n	c4da <__udivmoddi4+0x28a>
    c4ca:	eb17 0c0c 	adds.w	ip, r7, ip
    c4ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    c4d2:	d201      	bcs.n	c4d8 <__udivmoddi4+0x288>
    c4d4:	4563      	cmp	r3, ip
    c4d6:	d825      	bhi.n	c524 <__udivmoddi4+0x2d4>
    c4d8:	4610      	mov	r0, r2
    c4da:	ebac 0303 	sub.w	r3, ip, r3
    c4de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    c4e2:	e730      	b.n	c346 <__udivmoddi4+0xf6>
    c4e4:	4629      	mov	r1, r5
    c4e6:	4628      	mov	r0, r5
    c4e8:	e703      	b.n	c2f2 <__udivmoddi4+0xa2>
    c4ea:	1a84      	subs	r4, r0, r2
    c4ec:	eb6c 0303 	sbc.w	r3, ip, r3
    c4f0:	2001      	movs	r0, #1
    c4f2:	469a      	mov	sl, r3
    c4f4:	e715      	b.n	c322 <__udivmoddi4+0xd2>
    c4f6:	3802      	subs	r0, #2
    c4f8:	443c      	add	r4, r7
    c4fa:	e755      	b.n	c3a8 <__udivmoddi4+0x158>
    c4fc:	3802      	subs	r0, #2
    c4fe:	443c      	add	r4, r7
    c500:	e6ed      	b.n	c2de <__udivmoddi4+0x8e>
    c502:	3a02      	subs	r2, #2
    c504:	44bc      	add	ip, r7
    c506:	e733      	b.n	c370 <__udivmoddi4+0x120>
    c508:	f1ae 0e02 	sub.w	lr, lr, #2
    c50c:	443b      	add	r3, r7
    c50e:	e6d2      	b.n	c2b6 <__udivmoddi4+0x66>
    c510:	3802      	subs	r0, #2
    c512:	449c      	add	ip, r3
    c514:	e774      	b.n	c400 <__udivmoddi4+0x1b0>
    c516:	3902      	subs	r1, #2
    c518:	44bc      	add	ip, r7
    c51a:	e7c9      	b.n	c4b0 <__udivmoddi4+0x260>
    c51c:	f1aa 0a02 	sub.w	sl, sl, #2
    c520:	441a      	add	r2, r3
    c522:	e781      	b.n	c428 <__udivmoddi4+0x1d8>
    c524:	3802      	subs	r0, #2
    c526:	44bc      	add	ip, r7
    c528:	e7d7      	b.n	c4da <__udivmoddi4+0x28a>
    c52a:	4629      	mov	r1, r5
    c52c:	e6e1      	b.n	c2f2 <__udivmoddi4+0xa2>
    c52e:	bf00      	nop

0000c530 <__aeabi_idiv0>:
    c530:	4770      	bx	lr
    c532:	bf00      	nop

0000c534 <ocrypto_bigint_add128>:
    c534:	b470      	push	{r4, r5, r6}
    c536:	e891 0078 	ldmia.w	r1, {r3, r4, r5, r6}
    c53a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c53e:	185b      	adds	r3, r3, r1
    c540:	eb54 040c 	adcs.w	r4, r4, ip
    c544:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c548:	414d      	adcs	r5, r1
    c54a:	eb56 060c 	adcs.w	r6, r6, ip
    c54e:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
    c552:	4180      	sbcs	r0, r0
    c554:	3001      	adds	r0, #1
    c556:	bc70      	pop	{r4, r5, r6}
    c558:	4770      	bx	lr

0000c55a <ocrypto_bigint_sub128>:
    c55a:	b470      	push	{r4, r5, r6}
    c55c:	e891 0078 	ldmia.w	r1, {r3, r4, r5, r6}
    c560:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c564:	1a5b      	subs	r3, r3, r1
    c566:	eb74 040c 	sbcs.w	r4, r4, ip
    c56a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c56e:	418d      	sbcs	r5, r1
    c570:	eb76 060c 	sbcs.w	r6, r6, ip
    c574:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
    c578:	4180      	sbcs	r0, r0
    c57a:	4240      	negs	r0, r0
    c57c:	bc70      	pop	{r4, r5, r6}
    c57e:	4770      	bx	lr

0000c580 <ocrypto_bigint_add256>:
    c580:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c584:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    c588:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c58c:	185b      	adds	r3, r3, r1
    c58e:	eb54 040c 	adcs.w	r4, r4, ip
    c592:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c596:	414d      	adcs	r5, r1
    c598:	eb56 060c 	adcs.w	r6, r6, ip
    c59c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c5a0:	414f      	adcs	r7, r1
    c5a2:	eb58 080c 	adcs.w	r8, r8, ip
    c5a6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c5aa:	eb59 0901 	adcs.w	r9, r9, r1
    c5ae:	eb5a 0a0c 	adcs.w	sl, sl, ip
    c5b2:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    c5b6:	4180      	sbcs	r0, r0
    c5b8:	3001      	adds	r0, #1
    c5ba:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c5be:	4770      	bx	lr

0000c5c0 <ocrypto_bigint_sub256>:
    c5c0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c5c4:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    c5c8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c5cc:	1a5b      	subs	r3, r3, r1
    c5ce:	eb74 040c 	sbcs.w	r4, r4, ip
    c5d2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c5d6:	418d      	sbcs	r5, r1
    c5d8:	eb76 060c 	sbcs.w	r6, r6, ip
    c5dc:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c5e0:	418f      	sbcs	r7, r1
    c5e2:	eb78 080c 	sbcs.w	r8, r8, ip
    c5e6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c5ea:	eb79 0901 	sbcs.w	r9, r9, r1
    c5ee:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    c5f2:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    c5f6:	4180      	sbcs	r0, r0
    c5f8:	4240      	negs	r0, r0
    c5fa:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c5fe:	4770      	bx	lr

0000c600 <ocrypto_bigint_cadd256>:
    c600:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c604:	4252      	negs	r2, r2
    c606:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c60a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c60e:	4017      	ands	r7, r2
    c610:	19db      	adds	r3, r3, r7
    c612:	ea18 0802 	ands.w	r8, r8, r2
    c616:	eb54 0408 	adcs.w	r4, r4, r8
    c61a:	ea19 0902 	ands.w	r9, r9, r2
    c61e:	eb55 0509 	adcs.w	r5, r5, r9
    c622:	ea1a 0a02 	ands.w	sl, sl, r2
    c626:	eb56 060a 	adcs.w	r6, r6, sl
    c62a:	c078      	stmia	r0!, {r3, r4, r5, r6}
    c62c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c630:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c634:	4017      	ands	r7, r2
    c636:	417b      	adcs	r3, r7
    c638:	ea18 0802 	ands.w	r8, r8, r2
    c63c:	eb54 0408 	adcs.w	r4, r4, r8
    c640:	ea19 0902 	ands.w	r9, r9, r2
    c644:	eb55 0509 	adcs.w	r5, r5, r9
    c648:	ea1a 0a02 	ands.w	sl, sl, r2
    c64c:	eb56 060a 	adcs.w	r6, r6, sl
    c650:	c078      	stmia	r0!, {r3, r4, r5, r6}
    c652:	4180      	sbcs	r0, r0
    c654:	3001      	adds	r0, #1
    c656:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c65a:	4770      	bx	lr

0000c65c <ocrypto_bigint_csub256>:
    c65c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c660:	4252      	negs	r2, r2
    c662:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c666:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c66a:	4017      	ands	r7, r2
    c66c:	1bdb      	subs	r3, r3, r7
    c66e:	ea18 0802 	ands.w	r8, r8, r2
    c672:	eb74 0408 	sbcs.w	r4, r4, r8
    c676:	ea19 0902 	ands.w	r9, r9, r2
    c67a:	eb75 0509 	sbcs.w	r5, r5, r9
    c67e:	ea1a 0a02 	ands.w	sl, sl, r2
    c682:	eb76 060a 	sbcs.w	r6, r6, sl
    c686:	c078      	stmia	r0!, {r3, r4, r5, r6}
    c688:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c68c:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c690:	4017      	ands	r7, r2
    c692:	41bb      	sbcs	r3, r7
    c694:	ea18 0802 	ands.w	r8, r8, r2
    c698:	eb74 0408 	sbcs.w	r4, r4, r8
    c69c:	ea19 0902 	ands.w	r9, r9, r2
    c6a0:	eb75 0509 	sbcs.w	r5, r5, r9
    c6a4:	ea1a 0a02 	ands.w	sl, sl, r2
    c6a8:	eb76 060a 	sbcs.w	r6, r6, sl
    c6ac:	c078      	stmia	r0!, {r3, r4, r5, r6}
    c6ae:	4180      	sbcs	r0, r0
    c6b0:	4240      	negs	r0, r0
    c6b2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c6b6:	4770      	bx	lr

0000c6b8 <cswap64>:
    c6b8:	e890 0030 	ldmia.w	r0, {r4, r5}
    c6bc:	e891 00c0 	ldmia.w	r1, {r6, r7}
    c6c0:	1ba3      	subs	r3, r4, r6
    c6c2:	4013      	ands	r3, r2
    c6c4:	1ae4      	subs	r4, r4, r3
    c6c6:	18f6      	adds	r6, r6, r3
    c6c8:	1beb      	subs	r3, r5, r7
    c6ca:	4013      	ands	r3, r2
    c6cc:	1aed      	subs	r5, r5, r3
    c6ce:	18ff      	adds	r7, r7, r3
    c6d0:	c030      	stmia	r0!, {r4, r5}
    c6d2:	c1c0      	stmia	r1!, {r6, r7}
    c6d4:	4770      	bx	lr

0000c6d6 <ocrypto_bigint_cswap256>:
    c6d6:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6d8:	4252      	negs	r2, r2
    c6da:	f7ff ffed 	bl	c6b8 <cswap64>
    c6de:	f7ff ffeb 	bl	c6b8 <cswap64>
    c6e2:	f7ff ffe9 	bl	c6b8 <cswap64>
    c6e6:	f7ff ffe7 	bl	c6b8 <cswap64>
    c6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c6ec <ocrypto_bigint_mul128>:
    c6ec:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c6f0:	c93a      	ldmia	r1, {r1, r3, r4, r5}
    c6f2:	6816      	ldr	r6, [r2, #0]
    c6f4:	fba1 9a06 	umull	r9, sl, r1, r6
    c6f8:	f04f 0c00 	mov.w	ip, #0
    c6fc:	fbe3 ac06 	umlal	sl, ip, r3, r6
    c700:	f04f 0700 	mov.w	r7, #0
    c704:	fbe4 c706 	umlal	ip, r7, r4, r6
    c708:	f04f 0800 	mov.w	r8, #0
    c70c:	fbe5 7806 	umlal	r7, r8, r5, r6
    c710:	f840 9b04 	str.w	r9, [r0], #4
    c714:	6856      	ldr	r6, [r2, #4]
    c716:	f04f 0900 	mov.w	r9, #0
    c71a:	fbe1 a906 	umlal	sl, r9, r1, r6
    c71e:	eb1c 0c09 	adds.w	ip, ip, r9
    c722:	f04f 0900 	mov.w	r9, #0
    c726:	eb49 0909 	adc.w	r9, r9, r9
    c72a:	fbe3 c906 	umlal	ip, r9, r3, r6
    c72e:	eb17 0709 	adds.w	r7, r7, r9
    c732:	f04f 0900 	mov.w	r9, #0
    c736:	eb49 0909 	adc.w	r9, r9, r9
    c73a:	fbe4 7906 	umlal	r7, r9, r4, r6
    c73e:	eb18 0809 	adds.w	r8, r8, r9
    c742:	f04f 0900 	mov.w	r9, #0
    c746:	eb49 0909 	adc.w	r9, r9, r9
    c74a:	fbe5 8906 	umlal	r8, r9, r5, r6
    c74e:	f840 ab04 	str.w	sl, [r0], #4
    c752:	6896      	ldr	r6, [r2, #8]
    c754:	f04f 0a00 	mov.w	sl, #0
    c758:	fbe1 ca06 	umlal	ip, sl, r1, r6
    c75c:	eb17 070a 	adds.w	r7, r7, sl
    c760:	f04f 0a00 	mov.w	sl, #0
    c764:	eb4a 0a0a 	adc.w	sl, sl, sl
    c768:	fbe3 7a06 	umlal	r7, sl, r3, r6
    c76c:	eb18 080a 	adds.w	r8, r8, sl
    c770:	f04f 0a00 	mov.w	sl, #0
    c774:	eb4a 0a0a 	adc.w	sl, sl, sl
    c778:	fbe4 8a06 	umlal	r8, sl, r4, r6
    c77c:	eb19 090a 	adds.w	r9, r9, sl
    c780:	f04f 0a00 	mov.w	sl, #0
    c784:	eb4a 0a0a 	adc.w	sl, sl, sl
    c788:	fbe5 9a06 	umlal	r9, sl, r5, r6
    c78c:	f840 cb04 	str.w	ip, [r0], #4
    c790:	68d6      	ldr	r6, [r2, #12]
    c792:	f04f 0c00 	mov.w	ip, #0
    c796:	fbe1 7c06 	umlal	r7, ip, r1, r6
    c79a:	eb18 080c 	adds.w	r8, r8, ip
    c79e:	f04f 0c00 	mov.w	ip, #0
    c7a2:	eb4c 0c0c 	adc.w	ip, ip, ip
    c7a6:	fbe3 8c06 	umlal	r8, ip, r3, r6
    c7aa:	eb19 090c 	adds.w	r9, r9, ip
    c7ae:	f04f 0c00 	mov.w	ip, #0
    c7b2:	eb4c 0c0c 	adc.w	ip, ip, ip
    c7b6:	fbe4 9c06 	umlal	r9, ip, r4, r6
    c7ba:	eb1a 0a0c 	adds.w	sl, sl, ip
    c7be:	f04f 0c00 	mov.w	ip, #0
    c7c2:	eb4c 0c0c 	adc.w	ip, ip, ip
    c7c6:	fbe5 ac06 	umlal	sl, ip, r5, r6
    c7ca:	e880 1780 	stmia.w	r0, {r7, r8, r9, sl, ip}
    c7ce:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c7d2:	4770      	bx	lr

0000c7d4 <ocrypto_bigint_sqr256>:
    c7d4:	460a      	mov	r2, r1

0000c7d6 <ocrypto_bigint_mul256>:
    c7d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7da:	ec41 0a14 	vmov	s8, s9, r0, r1
    c7de:	ec92 0a08 	vldmia	r2, {s0-s7}
    c7e2:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    c7e4:	ee10 0a10 	vmov	r0, s0
    c7e8:	fba1 7800 	umull	r7, r8, r1, r0
    c7ec:	f04f 0900 	mov.w	r9, #0
    c7f0:	fbe2 8900 	umlal	r8, r9, r2, r0
    c7f4:	f04f 0a00 	mov.w	sl, #0
    c7f8:	fbe3 9a00 	umlal	r9, sl, r3, r0
    c7fc:	f04f 0b00 	mov.w	fp, #0
    c800:	fbe4 ab00 	umlal	sl, fp, r4, r0
    c804:	ee12 0a10 	vmov	r0, s4
    c808:	f04f 0c00 	mov.w	ip, #0
    c80c:	fbe1 bc00 	umlal	fp, ip, r1, r0
    c810:	f04f 0e00 	mov.w	lr, #0
    c814:	fbe2 ce00 	umlal	ip, lr, r2, r0
    c818:	f04f 0500 	mov.w	r5, #0
    c81c:	fbe3 e500 	umlal	lr, r5, r3, r0
    c820:	f04f 0600 	mov.w	r6, #0
    c824:	fbe4 5600 	umlal	r5, r6, r4, r0
    c828:	ee05 7a10 	vmov	s10, r7
    c82c:	ee10 0a90 	vmov	r0, s1
    c830:	f04f 0700 	mov.w	r7, #0
    c834:	fbe1 8700 	umlal	r8, r7, r1, r0
    c838:	eb19 0907 	adds.w	r9, r9, r7
    c83c:	f04f 0700 	mov.w	r7, #0
    c840:	eb47 0707 	adc.w	r7, r7, r7
    c844:	fbe2 9700 	umlal	r9, r7, r2, r0
    c848:	eb1a 0a07 	adds.w	sl, sl, r7
    c84c:	f04f 0700 	mov.w	r7, #0
    c850:	eb47 0707 	adc.w	r7, r7, r7
    c854:	fbe3 a700 	umlal	sl, r7, r3, r0
    c858:	eb1b 0b07 	adds.w	fp, fp, r7
    c85c:	f04f 0700 	mov.w	r7, #0
    c860:	eb47 0707 	adc.w	r7, r7, r7
    c864:	fbe4 b700 	umlal	fp, r7, r4, r0
    c868:	ee12 0a90 	vmov	r0, s5
    c86c:	eb1c 0c07 	adds.w	ip, ip, r7
    c870:	f04f 0700 	mov.w	r7, #0
    c874:	eb47 0707 	adc.w	r7, r7, r7
    c878:	fbe1 c700 	umlal	ip, r7, r1, r0
    c87c:	eb1e 0e07 	adds.w	lr, lr, r7
    c880:	f04f 0700 	mov.w	r7, #0
    c884:	eb47 0707 	adc.w	r7, r7, r7
    c888:	fbe2 e700 	umlal	lr, r7, r2, r0
    c88c:	19ed      	adds	r5, r5, r7
    c88e:	f04f 0700 	mov.w	r7, #0
    c892:	eb47 0707 	adc.w	r7, r7, r7
    c896:	fbe3 5700 	umlal	r5, r7, r3, r0
    c89a:	19f6      	adds	r6, r6, r7
    c89c:	f04f 0700 	mov.w	r7, #0
    c8a0:	eb47 0707 	adc.w	r7, r7, r7
    c8a4:	fbe4 6700 	umlal	r6, r7, r4, r0
    c8a8:	ee05 8a90 	vmov	s11, r8
    c8ac:	ee11 0a10 	vmov	r0, s2
    c8b0:	f04f 0800 	mov.w	r8, #0
    c8b4:	fbe1 9800 	umlal	r9, r8, r1, r0
    c8b8:	eb1a 0a08 	adds.w	sl, sl, r8
    c8bc:	f04f 0800 	mov.w	r8, #0
    c8c0:	eb48 0808 	adc.w	r8, r8, r8
    c8c4:	fbe2 a800 	umlal	sl, r8, r2, r0
    c8c8:	eb1b 0b08 	adds.w	fp, fp, r8
    c8cc:	f04f 0800 	mov.w	r8, #0
    c8d0:	eb48 0808 	adc.w	r8, r8, r8
    c8d4:	fbe3 b800 	umlal	fp, r8, r3, r0
    c8d8:	eb1c 0c08 	adds.w	ip, ip, r8
    c8dc:	f04f 0800 	mov.w	r8, #0
    c8e0:	eb48 0808 	adc.w	r8, r8, r8
    c8e4:	fbe4 c800 	umlal	ip, r8, r4, r0
    c8e8:	ee13 0a10 	vmov	r0, s6
    c8ec:	eb1e 0e08 	adds.w	lr, lr, r8
    c8f0:	f04f 0800 	mov.w	r8, #0
    c8f4:	eb48 0808 	adc.w	r8, r8, r8
    c8f8:	fbe1 e800 	umlal	lr, r8, r1, r0
    c8fc:	eb15 0508 	adds.w	r5, r5, r8
    c900:	f04f 0800 	mov.w	r8, #0
    c904:	eb48 0808 	adc.w	r8, r8, r8
    c908:	fbe2 5800 	umlal	r5, r8, r2, r0
    c90c:	eb16 0608 	adds.w	r6, r6, r8
    c910:	f04f 0800 	mov.w	r8, #0
    c914:	eb48 0808 	adc.w	r8, r8, r8
    c918:	fbe3 6800 	umlal	r6, r8, r3, r0
    c91c:	eb17 0708 	adds.w	r7, r7, r8
    c920:	f04f 0800 	mov.w	r8, #0
    c924:	eb48 0808 	adc.w	r8, r8, r8
    c928:	fbe4 7800 	umlal	r7, r8, r4, r0
    c92c:	ee06 9a10 	vmov	s12, r9
    c930:	ee11 0a90 	vmov	r0, s3
    c934:	f04f 0900 	mov.w	r9, #0
    c938:	fbe1 a900 	umlal	sl, r9, r1, r0
    c93c:	eb1b 0b09 	adds.w	fp, fp, r9
    c940:	f04f 0900 	mov.w	r9, #0
    c944:	eb49 0909 	adc.w	r9, r9, r9
    c948:	fbe2 b900 	umlal	fp, r9, r2, r0
    c94c:	eb1c 0c09 	adds.w	ip, ip, r9
    c950:	f04f 0900 	mov.w	r9, #0
    c954:	eb49 0909 	adc.w	r9, r9, r9
    c958:	fbe3 c900 	umlal	ip, r9, r3, r0
    c95c:	eb1e 0e09 	adds.w	lr, lr, r9
    c960:	f04f 0900 	mov.w	r9, #0
    c964:	eb49 0909 	adc.w	r9, r9, r9
    c968:	fbe4 e900 	umlal	lr, r9, r4, r0
    c96c:	ee13 0a90 	vmov	r0, s7
    c970:	eb15 0509 	adds.w	r5, r5, r9
    c974:	f04f 0900 	mov.w	r9, #0
    c978:	eb49 0909 	adc.w	r9, r9, r9
    c97c:	fbe1 5900 	umlal	r5, r9, r1, r0
    c980:	eb16 0609 	adds.w	r6, r6, r9
    c984:	f04f 0900 	mov.w	r9, #0
    c988:	eb49 0909 	adc.w	r9, r9, r9
    c98c:	fbe2 6900 	umlal	r6, r9, r2, r0
    c990:	eb17 0709 	adds.w	r7, r7, r9
    c994:	f04f 0900 	mov.w	r9, #0
    c998:	eb49 0909 	adc.w	r9, r9, r9
    c99c:	fbe3 7900 	umlal	r7, r9, r3, r0
    c9a0:	eb18 0809 	adds.w	r8, r8, r9
    c9a4:	f04f 0900 	mov.w	r9, #0
    c9a8:	eb49 0909 	adc.w	r9, r9, r9
    c9ac:	fbe4 8900 	umlal	r8, r9, r4, r0
    c9b0:	ee06 aa90 	vmov	s13, sl
    c9b4:	ee14 1a90 	vmov	r1, s9
    c9b8:	f101 0110 	add.w	r1, r1, #16
    c9bc:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    c9be:	ee10 0a10 	vmov	r0, s0
    c9c2:	f04f 0a00 	mov.w	sl, #0
    c9c6:	fbe1 ba00 	umlal	fp, sl, r1, r0
    c9ca:	eb1c 0c0a 	adds.w	ip, ip, sl
    c9ce:	f04f 0a00 	mov.w	sl, #0
    c9d2:	eb4a 0a0a 	adc.w	sl, sl, sl
    c9d6:	fbe2 ca00 	umlal	ip, sl, r2, r0
    c9da:	eb1e 0e0a 	adds.w	lr, lr, sl
    c9de:	f04f 0a00 	mov.w	sl, #0
    c9e2:	eb4a 0a0a 	adc.w	sl, sl, sl
    c9e6:	fbe3 ea00 	umlal	lr, sl, r3, r0
    c9ea:	eb15 050a 	adds.w	r5, r5, sl
    c9ee:	f04f 0a00 	mov.w	sl, #0
    c9f2:	eb4a 0a0a 	adc.w	sl, sl, sl
    c9f6:	fbe4 5a00 	umlal	r5, sl, r4, r0
    c9fa:	ee12 0a10 	vmov	r0, s4
    c9fe:	eb16 060a 	adds.w	r6, r6, sl
    ca02:	f04f 0a00 	mov.w	sl, #0
    ca06:	eb4a 0a0a 	adc.w	sl, sl, sl
    ca0a:	fbe1 6a00 	umlal	r6, sl, r1, r0
    ca0e:	eb17 070a 	adds.w	r7, r7, sl
    ca12:	f04f 0a00 	mov.w	sl, #0
    ca16:	eb4a 0a0a 	adc.w	sl, sl, sl
    ca1a:	fbe2 7a00 	umlal	r7, sl, r2, r0
    ca1e:	eb18 080a 	adds.w	r8, r8, sl
    ca22:	f04f 0a00 	mov.w	sl, #0
    ca26:	eb4a 0a0a 	adc.w	sl, sl, sl
    ca2a:	fbe3 8a00 	umlal	r8, sl, r3, r0
    ca2e:	eb19 090a 	adds.w	r9, r9, sl
    ca32:	f04f 0a00 	mov.w	sl, #0
    ca36:	eb4a 0a0a 	adc.w	sl, sl, sl
    ca3a:	fbe4 9a00 	umlal	r9, sl, r4, r0
    ca3e:	ee07 ba10 	vmov	s14, fp
    ca42:	ee10 0a90 	vmov	r0, s1
    ca46:	f04f 0b00 	mov.w	fp, #0
    ca4a:	fbe1 cb00 	umlal	ip, fp, r1, r0
    ca4e:	eb1e 0e0b 	adds.w	lr, lr, fp
    ca52:	f04f 0b00 	mov.w	fp, #0
    ca56:	eb4b 0b0b 	adc.w	fp, fp, fp
    ca5a:	fbe2 eb00 	umlal	lr, fp, r2, r0
    ca5e:	eb15 050b 	adds.w	r5, r5, fp
    ca62:	f04f 0b00 	mov.w	fp, #0
    ca66:	eb4b 0b0b 	adc.w	fp, fp, fp
    ca6a:	fbe3 5b00 	umlal	r5, fp, r3, r0
    ca6e:	eb16 060b 	adds.w	r6, r6, fp
    ca72:	f04f 0b00 	mov.w	fp, #0
    ca76:	eb4b 0b0b 	adc.w	fp, fp, fp
    ca7a:	fbe4 6b00 	umlal	r6, fp, r4, r0
    ca7e:	ee12 0a90 	vmov	r0, s5
    ca82:	eb17 070b 	adds.w	r7, r7, fp
    ca86:	f04f 0b00 	mov.w	fp, #0
    ca8a:	eb4b 0b0b 	adc.w	fp, fp, fp
    ca8e:	fbe1 7b00 	umlal	r7, fp, r1, r0
    ca92:	eb18 080b 	adds.w	r8, r8, fp
    ca96:	f04f 0b00 	mov.w	fp, #0
    ca9a:	eb4b 0b0b 	adc.w	fp, fp, fp
    ca9e:	fbe2 8b00 	umlal	r8, fp, r2, r0
    caa2:	eb19 090b 	adds.w	r9, r9, fp
    caa6:	f04f 0b00 	mov.w	fp, #0
    caaa:	eb4b 0b0b 	adc.w	fp, fp, fp
    caae:	fbe3 9b00 	umlal	r9, fp, r3, r0
    cab2:	eb1a 0a0b 	adds.w	sl, sl, fp
    cab6:	f04f 0b00 	mov.w	fp, #0
    caba:	eb4b 0b0b 	adc.w	fp, fp, fp
    cabe:	fbe4 ab00 	umlal	sl, fp, r4, r0
    cac2:	ee07 ca90 	vmov	s15, ip
    cac6:	ee11 0a10 	vmov	r0, s2
    caca:	f04f 0c00 	mov.w	ip, #0
    cace:	fbe1 ec00 	umlal	lr, ip, r1, r0
    cad2:	eb15 050c 	adds.w	r5, r5, ip
    cad6:	f04f 0c00 	mov.w	ip, #0
    cada:	eb4c 0c0c 	adc.w	ip, ip, ip
    cade:	fbe2 5c00 	umlal	r5, ip, r2, r0
    cae2:	eb16 060c 	adds.w	r6, r6, ip
    cae6:	f04f 0c00 	mov.w	ip, #0
    caea:	eb4c 0c0c 	adc.w	ip, ip, ip
    caee:	fbe3 6c00 	umlal	r6, ip, r3, r0
    caf2:	eb17 070c 	adds.w	r7, r7, ip
    caf6:	f04f 0c00 	mov.w	ip, #0
    cafa:	eb4c 0c0c 	adc.w	ip, ip, ip
    cafe:	fbe4 7c00 	umlal	r7, ip, r4, r0
    cb02:	ee13 0a10 	vmov	r0, s6
    cb06:	eb18 080c 	adds.w	r8, r8, ip
    cb0a:	f04f 0c00 	mov.w	ip, #0
    cb0e:	eb4c 0c0c 	adc.w	ip, ip, ip
    cb12:	fbe1 8c00 	umlal	r8, ip, r1, r0
    cb16:	eb19 090c 	adds.w	r9, r9, ip
    cb1a:	f04f 0c00 	mov.w	ip, #0
    cb1e:	eb4c 0c0c 	adc.w	ip, ip, ip
    cb22:	fbe2 9c00 	umlal	r9, ip, r2, r0
    cb26:	eb1a 0a0c 	adds.w	sl, sl, ip
    cb2a:	f04f 0c00 	mov.w	ip, #0
    cb2e:	eb4c 0c0c 	adc.w	ip, ip, ip
    cb32:	fbe3 ac00 	umlal	sl, ip, r3, r0
    cb36:	eb1b 0b0c 	adds.w	fp, fp, ip
    cb3a:	f04f 0c00 	mov.w	ip, #0
    cb3e:	eb4c 0c0c 	adc.w	ip, ip, ip
    cb42:	fbe4 bc00 	umlal	fp, ip, r4, r0
    cb46:	ee08 ea10 	vmov	s16, lr
    cb4a:	ee11 0a90 	vmov	r0, s3
    cb4e:	f04f 0e00 	mov.w	lr, #0
    cb52:	fbe1 5e00 	umlal	r5, lr, r1, r0
    cb56:	eb16 060e 	adds.w	r6, r6, lr
    cb5a:	f04f 0e00 	mov.w	lr, #0
    cb5e:	eb4e 0e0e 	adc.w	lr, lr, lr
    cb62:	fbe2 6e00 	umlal	r6, lr, r2, r0
    cb66:	eb17 070e 	adds.w	r7, r7, lr
    cb6a:	f04f 0e00 	mov.w	lr, #0
    cb6e:	eb4e 0e0e 	adc.w	lr, lr, lr
    cb72:	fbe3 7e00 	umlal	r7, lr, r3, r0
    cb76:	eb18 080e 	adds.w	r8, r8, lr
    cb7a:	f04f 0e00 	mov.w	lr, #0
    cb7e:	eb4e 0e0e 	adc.w	lr, lr, lr
    cb82:	fbe4 8e00 	umlal	r8, lr, r4, r0
    cb86:	ee13 0a90 	vmov	r0, s7
    cb8a:	eb19 090e 	adds.w	r9, r9, lr
    cb8e:	f04f 0e00 	mov.w	lr, #0
    cb92:	eb4e 0e0e 	adc.w	lr, lr, lr
    cb96:	fbe1 9e00 	umlal	r9, lr, r1, r0
    cb9a:	eb1a 0a0e 	adds.w	sl, sl, lr
    cb9e:	f04f 0e00 	mov.w	lr, #0
    cba2:	eb4e 0e0e 	adc.w	lr, lr, lr
    cba6:	fbe2 ae00 	umlal	sl, lr, r2, r0
    cbaa:	eb1b 0b0e 	adds.w	fp, fp, lr
    cbae:	f04f 0e00 	mov.w	lr, #0
    cbb2:	eb4e 0e0e 	adc.w	lr, lr, lr
    cbb6:	fbe3 be00 	umlal	fp, lr, r3, r0
    cbba:	eb1c 0c0e 	adds.w	ip, ip, lr
    cbbe:	f04f 0e00 	mov.w	lr, #0
    cbc2:	eb4e 0e0e 	adc.w	lr, lr, lr
    cbc6:	fbe4 ce00 	umlal	ip, lr, r4, r0
    cbca:	ee14 0a10 	vmov	r0, s8
    cbce:	eca0 5a07 	vstmia	r0!, {s10-s16}
    cbd2:	e880 5fe0 	stmia.w	r0, {r5, r6, r7, r8, r9, sl, fp, ip, lr}
    cbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cbda:	bf00      	nop

0000cbdc <ocrypto_constant_time_equal>:
    cbdc:	b430      	push	{r4, r5}
    cbde:	f04f 0300 	mov.w	r3, #0

0000cbe2 <constant_time_equal_loop>:
    cbe2:	f810 4b01 	ldrb.w	r4, [r0], #1
    cbe6:	f811 5b01 	ldrb.w	r5, [r1], #1
    cbea:	3a01      	subs	r2, #1
    cbec:	ea84 0405 	eor.w	r4, r4, r5
    cbf0:	ea43 0304 	orr.w	r3, r3, r4
    cbf4:	d1f5      	bne.n	cbe2 <constant_time_equal_loop>
    cbf6:	f1a3 0301 	sub.w	r3, r3, #1
    cbfa:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    cbfe:	bc30      	pop	{r4, r5}
    cc00:	4770      	bx	lr

0000cc02 <ocrypto_constant_time_is_zero>:
    cc02:	f04f 0300 	mov.w	r3, #0

0000cc06 <constant_time_is_zero_loop>:
    cc06:	f810 2b01 	ldrb.w	r2, [r0], #1
    cc0a:	3901      	subs	r1, #1
    cc0c:	ea43 0302 	orr.w	r3, r3, r2
    cc10:	d1f9      	bne.n	cc06 <constant_time_is_zero_loop>
    cc12:	f1a3 0301 	sub.w	r3, r3, #1
    cc16:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    cc1a:	4770      	bx	lr

0000cc1c <ocrypto_constant_time_copy>:
    cc1c:	f811 3b01 	ldrb.w	r3, [r1], #1
    cc20:	f800 3b01 	strb.w	r3, [r0], #1
    cc24:	3a01      	subs	r2, #1
    cc26:	d1f9      	bne.n	cc1c <ocrypto_constant_time_copy>
    cc28:	4770      	bx	lr

0000cc2a <ocrypto_constant_time_fill_zero>:
    cc2a:	2200      	movs	r2, #0

0000cc2c <constant_time_fill_zero_loop>:
    cc2c:	f800 2b01 	strb.w	r2, [r0], #1
    cc30:	3901      	subs	r1, #1
    cc32:	d1fb      	bne.n	cc2c <constant_time_fill_zero_loop>
    cc34:	4770      	bx	lr
    cc36:	bf00      	nop

0000cc38 <ocrypto_mod_p256_add>:
    cc38:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    cc3c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    cc40:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cc44:	185b      	adds	r3, r3, r1
    cc46:	eb54 040c 	adcs.w	r4, r4, ip
    cc4a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cc4e:	414d      	adcs	r5, r1
    cc50:	eb56 060c 	adcs.w	r6, r6, ip
    cc54:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cc58:	414f      	adcs	r7, r1
    cc5a:	eb58 080c 	adcs.w	r8, r8, ip
    cc5e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cc62:	eb59 0901 	adcs.w	r9, r9, r1
    cc66:	eb5a 0a0c 	adcs.w	sl, sl, ip
    cc6a:	4189      	sbcs	r1, r1
    cc6c:	f1b3 33ff 	subs.w	r3, r3, #4294967295	; 0xffffffff
    cc70:	f174 34ff 	sbcs.w	r4, r4, #4294967295	; 0xffffffff
    cc74:	f175 35ff 	sbcs.w	r5, r5, #4294967295	; 0xffffffff
    cc78:	f176 0600 	sbcs.w	r6, r6, #0
    cc7c:	f177 0700 	sbcs.w	r7, r7, #0
    cc80:	f178 0800 	sbcs.w	r8, r8, #0
    cc84:	f179 0901 	sbcs.w	r9, r9, #1
    cc88:	f17a 3aff 	sbcs.w	sl, sl, #4294967295	; 0xffffffff
    cc8c:	f151 0100 	adcs.w	r1, r1, #0
    cc90:	424a      	negs	r2, r1
    cc92:	185b      	adds	r3, r3, r1
    cc94:	414c      	adcs	r4, r1
    cc96:	414d      	adcs	r5, r1
    cc98:	f156 0600 	adcs.w	r6, r6, #0
    cc9c:	f157 0700 	adcs.w	r7, r7, #0
    cca0:	f158 0800 	adcs.w	r8, r8, #0
    cca4:	eb59 0902 	adcs.w	r9, r9, r2
    cca8:	eb5a 0a01 	adcs.w	sl, sl, r1
    ccac:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    ccb0:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    ccb4:	4770      	bx	lr

0000ccb6 <ocrypto_mod_p256_sub>:
    ccb6:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    ccba:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    ccbe:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    ccc2:	1a5b      	subs	r3, r3, r1
    ccc4:	eb74 040c 	sbcs.w	r4, r4, ip
    ccc8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cccc:	418d      	sbcs	r5, r1
    ccce:	eb76 060c 	sbcs.w	r6, r6, ip
    ccd2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    ccd6:	418f      	sbcs	r7, r1
    ccd8:	eb78 080c 	sbcs.w	r8, r8, ip
    ccdc:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cce0:	eb79 0901 	sbcs.w	r9, r9, r1
    cce4:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    cce8:	4189      	sbcs	r1, r1
    ccea:	424a      	negs	r2, r1
    ccec:	185b      	adds	r3, r3, r1
    ccee:	414c      	adcs	r4, r1
    ccf0:	414d      	adcs	r5, r1
    ccf2:	f156 0600 	adcs.w	r6, r6, #0
    ccf6:	f157 0700 	adcs.w	r7, r7, #0
    ccfa:	f158 0800 	adcs.w	r8, r8, #0
    ccfe:	eb59 0902 	adcs.w	r9, r9, r2
    cd02:	eb5a 0a01 	adcs.w	sl, sl, r1
    cd06:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    cd0a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    cd0e:	4770      	bx	lr

0000cd10 <ocrypto_mod_p256_square>:
    cd10:	460a      	mov	r2, r1

0000cd12 <ocrypto_mod_p256_mul>:
    cd12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd16:	ec41 0a14 	vmov	s8, s9, r0, r1
    cd1a:	ec92 0a08 	vldmia	r2, {s0-s7}
    cd1e:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    cd20:	ee10 0a10 	vmov	r0, s0
    cd24:	fba1 7800 	umull	r7, r8, r1, r0
    cd28:	f04f 0900 	mov.w	r9, #0
    cd2c:	fbe2 8900 	umlal	r8, r9, r2, r0
    cd30:	f04f 0a00 	mov.w	sl, #0
    cd34:	fbe3 9a00 	umlal	r9, sl, r3, r0
    cd38:	f04f 0b00 	mov.w	fp, #0
    cd3c:	fbe4 ab00 	umlal	sl, fp, r4, r0
    cd40:	ee12 0a10 	vmov	r0, s4
    cd44:	f04f 0c00 	mov.w	ip, #0
    cd48:	fbe1 bc00 	umlal	fp, ip, r1, r0
    cd4c:	f04f 0e00 	mov.w	lr, #0
    cd50:	fbe2 ce00 	umlal	ip, lr, r2, r0
    cd54:	f04f 0500 	mov.w	r5, #0
    cd58:	fbe3 e500 	umlal	lr, r5, r3, r0
    cd5c:	f04f 0600 	mov.w	r6, #0
    cd60:	fbe4 5600 	umlal	r5, r6, r4, r0
    cd64:	ee05 7a10 	vmov	s10, r7
    cd68:	ee10 0a90 	vmov	r0, s1
    cd6c:	f04f 0700 	mov.w	r7, #0
    cd70:	fbe1 8700 	umlal	r8, r7, r1, r0
    cd74:	eb19 0907 	adds.w	r9, r9, r7
    cd78:	f04f 0700 	mov.w	r7, #0
    cd7c:	eb47 0707 	adc.w	r7, r7, r7
    cd80:	fbe2 9700 	umlal	r9, r7, r2, r0
    cd84:	eb1a 0a07 	adds.w	sl, sl, r7
    cd88:	f04f 0700 	mov.w	r7, #0
    cd8c:	eb47 0707 	adc.w	r7, r7, r7
    cd90:	fbe3 a700 	umlal	sl, r7, r3, r0
    cd94:	eb1b 0b07 	adds.w	fp, fp, r7
    cd98:	f04f 0700 	mov.w	r7, #0
    cd9c:	eb47 0707 	adc.w	r7, r7, r7
    cda0:	fbe4 b700 	umlal	fp, r7, r4, r0
    cda4:	ee12 0a90 	vmov	r0, s5
    cda8:	eb1c 0c07 	adds.w	ip, ip, r7
    cdac:	f04f 0700 	mov.w	r7, #0
    cdb0:	eb47 0707 	adc.w	r7, r7, r7
    cdb4:	fbe1 c700 	umlal	ip, r7, r1, r0
    cdb8:	eb1e 0e07 	adds.w	lr, lr, r7
    cdbc:	f04f 0700 	mov.w	r7, #0
    cdc0:	eb47 0707 	adc.w	r7, r7, r7
    cdc4:	fbe2 e700 	umlal	lr, r7, r2, r0
    cdc8:	19ed      	adds	r5, r5, r7
    cdca:	f04f 0700 	mov.w	r7, #0
    cdce:	eb47 0707 	adc.w	r7, r7, r7
    cdd2:	fbe3 5700 	umlal	r5, r7, r3, r0
    cdd6:	19f6      	adds	r6, r6, r7
    cdd8:	f04f 0700 	mov.w	r7, #0
    cddc:	eb47 0707 	adc.w	r7, r7, r7
    cde0:	fbe4 6700 	umlal	r6, r7, r4, r0
    cde4:	ee05 8a90 	vmov	s11, r8
    cde8:	ee11 0a10 	vmov	r0, s2
    cdec:	f04f 0800 	mov.w	r8, #0
    cdf0:	fbe1 9800 	umlal	r9, r8, r1, r0
    cdf4:	eb1a 0a08 	adds.w	sl, sl, r8
    cdf8:	f04f 0800 	mov.w	r8, #0
    cdfc:	eb48 0808 	adc.w	r8, r8, r8
    ce00:	fbe2 a800 	umlal	sl, r8, r2, r0
    ce04:	eb1b 0b08 	adds.w	fp, fp, r8
    ce08:	f04f 0800 	mov.w	r8, #0
    ce0c:	eb48 0808 	adc.w	r8, r8, r8
    ce10:	fbe3 b800 	umlal	fp, r8, r3, r0
    ce14:	eb1c 0c08 	adds.w	ip, ip, r8
    ce18:	f04f 0800 	mov.w	r8, #0
    ce1c:	eb48 0808 	adc.w	r8, r8, r8
    ce20:	fbe4 c800 	umlal	ip, r8, r4, r0
    ce24:	ee13 0a10 	vmov	r0, s6
    ce28:	eb1e 0e08 	adds.w	lr, lr, r8
    ce2c:	f04f 0800 	mov.w	r8, #0
    ce30:	eb48 0808 	adc.w	r8, r8, r8
    ce34:	fbe1 e800 	umlal	lr, r8, r1, r0
    ce38:	eb15 0508 	adds.w	r5, r5, r8
    ce3c:	f04f 0800 	mov.w	r8, #0
    ce40:	eb48 0808 	adc.w	r8, r8, r8
    ce44:	fbe2 5800 	umlal	r5, r8, r2, r0
    ce48:	eb16 0608 	adds.w	r6, r6, r8
    ce4c:	f04f 0800 	mov.w	r8, #0
    ce50:	eb48 0808 	adc.w	r8, r8, r8
    ce54:	fbe3 6800 	umlal	r6, r8, r3, r0
    ce58:	eb17 0708 	adds.w	r7, r7, r8
    ce5c:	f04f 0800 	mov.w	r8, #0
    ce60:	eb48 0808 	adc.w	r8, r8, r8
    ce64:	fbe4 7800 	umlal	r7, r8, r4, r0
    ce68:	ee06 9a10 	vmov	s12, r9
    ce6c:	ee11 0a90 	vmov	r0, s3
    ce70:	f04f 0900 	mov.w	r9, #0
    ce74:	fbe1 a900 	umlal	sl, r9, r1, r0
    ce78:	eb1b 0b09 	adds.w	fp, fp, r9
    ce7c:	f04f 0900 	mov.w	r9, #0
    ce80:	eb49 0909 	adc.w	r9, r9, r9
    ce84:	fbe2 b900 	umlal	fp, r9, r2, r0
    ce88:	eb1c 0c09 	adds.w	ip, ip, r9
    ce8c:	f04f 0900 	mov.w	r9, #0
    ce90:	eb49 0909 	adc.w	r9, r9, r9
    ce94:	fbe3 c900 	umlal	ip, r9, r3, r0
    ce98:	eb1e 0e09 	adds.w	lr, lr, r9
    ce9c:	f04f 0900 	mov.w	r9, #0
    cea0:	eb49 0909 	adc.w	r9, r9, r9
    cea4:	fbe4 e900 	umlal	lr, r9, r4, r0
    cea8:	ee13 0a90 	vmov	r0, s7
    ceac:	eb15 0509 	adds.w	r5, r5, r9
    ceb0:	f04f 0900 	mov.w	r9, #0
    ceb4:	eb49 0909 	adc.w	r9, r9, r9
    ceb8:	fbe1 5900 	umlal	r5, r9, r1, r0
    cebc:	eb16 0609 	adds.w	r6, r6, r9
    cec0:	f04f 0900 	mov.w	r9, #0
    cec4:	eb49 0909 	adc.w	r9, r9, r9
    cec8:	fbe2 6900 	umlal	r6, r9, r2, r0
    cecc:	eb17 0709 	adds.w	r7, r7, r9
    ced0:	f04f 0900 	mov.w	r9, #0
    ced4:	eb49 0909 	adc.w	r9, r9, r9
    ced8:	fbe3 7900 	umlal	r7, r9, r3, r0
    cedc:	eb18 0809 	adds.w	r8, r8, r9
    cee0:	f04f 0900 	mov.w	r9, #0
    cee4:	eb49 0909 	adc.w	r9, r9, r9
    cee8:	fbe4 8900 	umlal	r8, r9, r4, r0
    ceec:	ee06 aa90 	vmov	s13, sl
    cef0:	ee14 1a90 	vmov	r1, s9
    cef4:	f101 0110 	add.w	r1, r1, #16
    cef8:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    cefa:	ee10 0a10 	vmov	r0, s0
    cefe:	f04f 0a00 	mov.w	sl, #0
    cf02:	fbe1 ba00 	umlal	fp, sl, r1, r0
    cf06:	eb1c 0c0a 	adds.w	ip, ip, sl
    cf0a:	f04f 0a00 	mov.w	sl, #0
    cf0e:	eb4a 0a0a 	adc.w	sl, sl, sl
    cf12:	fbe2 ca00 	umlal	ip, sl, r2, r0
    cf16:	eb1e 0e0a 	adds.w	lr, lr, sl
    cf1a:	f04f 0a00 	mov.w	sl, #0
    cf1e:	eb4a 0a0a 	adc.w	sl, sl, sl
    cf22:	fbe3 ea00 	umlal	lr, sl, r3, r0
    cf26:	eb15 050a 	adds.w	r5, r5, sl
    cf2a:	f04f 0a00 	mov.w	sl, #0
    cf2e:	eb4a 0a0a 	adc.w	sl, sl, sl
    cf32:	fbe4 5a00 	umlal	r5, sl, r4, r0
    cf36:	ee12 0a10 	vmov	r0, s4
    cf3a:	eb16 060a 	adds.w	r6, r6, sl
    cf3e:	f04f 0a00 	mov.w	sl, #0
    cf42:	eb4a 0a0a 	adc.w	sl, sl, sl
    cf46:	fbe1 6a00 	umlal	r6, sl, r1, r0
    cf4a:	eb17 070a 	adds.w	r7, r7, sl
    cf4e:	f04f 0a00 	mov.w	sl, #0
    cf52:	eb4a 0a0a 	adc.w	sl, sl, sl
    cf56:	fbe2 7a00 	umlal	r7, sl, r2, r0
    cf5a:	eb18 080a 	adds.w	r8, r8, sl
    cf5e:	f04f 0a00 	mov.w	sl, #0
    cf62:	eb4a 0a0a 	adc.w	sl, sl, sl
    cf66:	fbe3 8a00 	umlal	r8, sl, r3, r0
    cf6a:	eb19 090a 	adds.w	r9, r9, sl
    cf6e:	f04f 0a00 	mov.w	sl, #0
    cf72:	eb4a 0a0a 	adc.w	sl, sl, sl
    cf76:	fbe4 9a00 	umlal	r9, sl, r4, r0
    cf7a:	ee07 ba10 	vmov	s14, fp
    cf7e:	ee10 0a90 	vmov	r0, s1
    cf82:	f04f 0b00 	mov.w	fp, #0
    cf86:	fbe1 cb00 	umlal	ip, fp, r1, r0
    cf8a:	eb1e 0e0b 	adds.w	lr, lr, fp
    cf8e:	f04f 0b00 	mov.w	fp, #0
    cf92:	eb4b 0b0b 	adc.w	fp, fp, fp
    cf96:	fbe2 eb00 	umlal	lr, fp, r2, r0
    cf9a:	eb15 050b 	adds.w	r5, r5, fp
    cf9e:	f04f 0b00 	mov.w	fp, #0
    cfa2:	eb4b 0b0b 	adc.w	fp, fp, fp
    cfa6:	fbe3 5b00 	umlal	r5, fp, r3, r0
    cfaa:	eb16 060b 	adds.w	r6, r6, fp
    cfae:	f04f 0b00 	mov.w	fp, #0
    cfb2:	eb4b 0b0b 	adc.w	fp, fp, fp
    cfb6:	fbe4 6b00 	umlal	r6, fp, r4, r0
    cfba:	ee12 0a90 	vmov	r0, s5
    cfbe:	eb17 070b 	adds.w	r7, r7, fp
    cfc2:	f04f 0b00 	mov.w	fp, #0
    cfc6:	eb4b 0b0b 	adc.w	fp, fp, fp
    cfca:	fbe1 7b00 	umlal	r7, fp, r1, r0
    cfce:	eb18 080b 	adds.w	r8, r8, fp
    cfd2:	f04f 0b00 	mov.w	fp, #0
    cfd6:	eb4b 0b0b 	adc.w	fp, fp, fp
    cfda:	fbe2 8b00 	umlal	r8, fp, r2, r0
    cfde:	eb19 090b 	adds.w	r9, r9, fp
    cfe2:	f04f 0b00 	mov.w	fp, #0
    cfe6:	eb4b 0b0b 	adc.w	fp, fp, fp
    cfea:	fbe3 9b00 	umlal	r9, fp, r3, r0
    cfee:	eb1a 0a0b 	adds.w	sl, sl, fp
    cff2:	f04f 0b00 	mov.w	fp, #0
    cff6:	eb4b 0b0b 	adc.w	fp, fp, fp
    cffa:	fbe4 ab00 	umlal	sl, fp, r4, r0
    cffe:	ee07 ca90 	vmov	s15, ip
    d002:	ee11 0a10 	vmov	r0, s2
    d006:	f04f 0c00 	mov.w	ip, #0
    d00a:	fbe1 ec00 	umlal	lr, ip, r1, r0
    d00e:	eb15 050c 	adds.w	r5, r5, ip
    d012:	f04f 0c00 	mov.w	ip, #0
    d016:	eb4c 0c0c 	adc.w	ip, ip, ip
    d01a:	fbe2 5c00 	umlal	r5, ip, r2, r0
    d01e:	eb16 060c 	adds.w	r6, r6, ip
    d022:	f04f 0c00 	mov.w	ip, #0
    d026:	eb4c 0c0c 	adc.w	ip, ip, ip
    d02a:	fbe3 6c00 	umlal	r6, ip, r3, r0
    d02e:	eb17 070c 	adds.w	r7, r7, ip
    d032:	f04f 0c00 	mov.w	ip, #0
    d036:	eb4c 0c0c 	adc.w	ip, ip, ip
    d03a:	fbe4 7c00 	umlal	r7, ip, r4, r0
    d03e:	ee13 0a10 	vmov	r0, s6
    d042:	eb18 080c 	adds.w	r8, r8, ip
    d046:	f04f 0c00 	mov.w	ip, #0
    d04a:	eb4c 0c0c 	adc.w	ip, ip, ip
    d04e:	fbe1 8c00 	umlal	r8, ip, r1, r0
    d052:	eb19 090c 	adds.w	r9, r9, ip
    d056:	f04f 0c00 	mov.w	ip, #0
    d05a:	eb4c 0c0c 	adc.w	ip, ip, ip
    d05e:	fbe2 9c00 	umlal	r9, ip, r2, r0
    d062:	eb1a 0a0c 	adds.w	sl, sl, ip
    d066:	f04f 0c00 	mov.w	ip, #0
    d06a:	eb4c 0c0c 	adc.w	ip, ip, ip
    d06e:	fbe3 ac00 	umlal	sl, ip, r3, r0
    d072:	eb1b 0b0c 	adds.w	fp, fp, ip
    d076:	f04f 0c00 	mov.w	ip, #0
    d07a:	eb4c 0c0c 	adc.w	ip, ip, ip
    d07e:	fbe4 bc00 	umlal	fp, ip, r4, r0
    d082:	ee08 ea10 	vmov	s16, lr
    d086:	ee11 0a90 	vmov	r0, s3
    d08a:	f04f 0e00 	mov.w	lr, #0
    d08e:	fbe1 5e00 	umlal	r5, lr, r1, r0
    d092:	eb16 060e 	adds.w	r6, r6, lr
    d096:	f04f 0e00 	mov.w	lr, #0
    d09a:	eb4e 0e0e 	adc.w	lr, lr, lr
    d09e:	fbe2 6e00 	umlal	r6, lr, r2, r0
    d0a2:	eb17 070e 	adds.w	r7, r7, lr
    d0a6:	f04f 0e00 	mov.w	lr, #0
    d0aa:	eb4e 0e0e 	adc.w	lr, lr, lr
    d0ae:	fbe3 7e00 	umlal	r7, lr, r3, r0
    d0b2:	eb18 080e 	adds.w	r8, r8, lr
    d0b6:	f04f 0e00 	mov.w	lr, #0
    d0ba:	eb4e 0e0e 	adc.w	lr, lr, lr
    d0be:	fbe4 8e00 	umlal	r8, lr, r4, r0
    d0c2:	ee13 0a90 	vmov	r0, s7
    d0c6:	eb19 090e 	adds.w	r9, r9, lr
    d0ca:	f04f 0e00 	mov.w	lr, #0
    d0ce:	eb4e 0e0e 	adc.w	lr, lr, lr
    d0d2:	fbe1 9e00 	umlal	r9, lr, r1, r0
    d0d6:	eb1a 0a0e 	adds.w	sl, sl, lr
    d0da:	f04f 0e00 	mov.w	lr, #0
    d0de:	eb4e 0e0e 	adc.w	lr, lr, lr
    d0e2:	fbe2 ae00 	umlal	sl, lr, r2, r0
    d0e6:	eb1b 0b0e 	adds.w	fp, fp, lr
    d0ea:	f04f 0e00 	mov.w	lr, #0
    d0ee:	eb4e 0e0e 	adc.w	lr, lr, lr
    d0f2:	fbe3 be00 	umlal	fp, lr, r3, r0
    d0f6:	eb1c 0c0e 	adds.w	ip, ip, lr
    d0fa:	f04f 0e00 	mov.w	lr, #0
    d0fe:	eb4e 0e0e 	adc.w	lr, lr, lr
    d102:	fbe4 ce00 	umlal	ip, lr, r4, r0
    d106:	ec53 2a17 	vmov	r2, r3, s14, s15
    d10a:	ee18 4a10 	vmov	r4, s16
    d10e:	eb12 020a 	adds.w	r2, r2, sl
    d112:	eb53 030b 	adcs.w	r3, r3, fp
    d116:	eb54 040c 	adcs.w	r4, r4, ip
    d11a:	eb55 050e 	adcs.w	r5, r5, lr
    d11e:	2000      	movs	r0, #0
    d120:	f140 0000 	adc.w	r0, r0, #0
    d124:	eb12 020b 	adds.w	r2, r2, fp
    d128:	eb53 030c 	adcs.w	r3, r3, ip
    d12c:	eb54 040e 	adcs.w	r4, r4, lr
    d130:	eb55 050e 	adcs.w	r5, r5, lr
    d134:	4146      	adcs	r6, r0
    d136:	2000      	movs	r0, #0
    d138:	4147      	adcs	r7, r0
    d13a:	eb58 0800 	adcs.w	r8, r8, r0
    d13e:	eb59 090a 	adcs.w	r9, r9, sl
    d142:	f140 0000 	adc.w	r0, r0, #0
    d146:	ebb2 020e 	subs.w	r2, r2, lr
    d14a:	f173 0300 	sbcs.w	r3, r3, #0
    d14e:	f174 0400 	sbcs.w	r4, r4, #0
    d152:	eb75 050a 	sbcs.w	r5, r5, sl
    d156:	eb76 060b 	sbcs.w	r6, r6, fp
    d15a:	eb77 070c 	sbcs.w	r7, r7, ip
    d15e:	eb78 080a 	sbcs.w	r8, r8, sl
    d162:	eb79 090c 	sbcs.w	r9, r9, ip
    d166:	f160 0000 	sbc.w	r0, r0, #0
    d16a:	ebb5 050b 	subs.w	r5, r5, fp
    d16e:	eb76 060c 	sbcs.w	r6, r6, ip
    d172:	eb77 070e 	sbcs.w	r7, r7, lr
    d176:	eb78 080b 	sbcs.w	r8, r8, fp
    d17a:	eb79 090e 	sbcs.w	r9, r9, lr
    d17e:	f160 0000 	sbc.w	r0, r0, #0
    d182:	ea5f 7ce0 	movs.w	ip, r0, asr #31
    d186:	ea7f 0c0c 	mvns.w	ip, ip
    d18a:	f1dc 0e00 	rsbs	lr, ip, #0
    d18e:	ebb2 020c 	subs.w	r2, r2, ip
    d192:	eb73 030c 	sbcs.w	r3, r3, ip
    d196:	eb74 040c 	sbcs.w	r4, r4, ip
    d19a:	f175 0500 	sbcs.w	r5, r5, #0
    d19e:	f176 0600 	sbcs.w	r6, r6, #0
    d1a2:	f177 0700 	sbcs.w	r7, r7, #0
    d1a6:	eb78 080e 	sbcs.w	r8, r8, lr
    d1aa:	eb79 090c 	sbcs.w	r9, r9, ip
    d1ae:	f160 0000 	sbc.w	r0, r0, #0
    d1b2:	ea5f 7ce0 	movs.w	ip, r0, asr #31
    d1b6:	f1dc 0e00 	rsbs	lr, ip, #0
    d1ba:	eb12 020c 	adds.w	r2, r2, ip
    d1be:	eb53 030c 	adcs.w	r3, r3, ip
    d1c2:	eb54 040c 	adcs.w	r4, r4, ip
    d1c6:	f155 0500 	adcs.w	r5, r5, #0
    d1ca:	f156 0600 	adcs.w	r6, r6, #0
    d1ce:	f157 0700 	adcs.w	r7, r7, #0
    d1d2:	eb58 080e 	adcs.w	r8, r8, lr
    d1d6:	eb59 090c 	adcs.w	r9, r9, ip
    d1da:	f140 0000 	adc.w	r0, r0, #0
    d1de:	ea5f 7ce0 	movs.w	ip, r0, asr #31
    d1e2:	f1dc 0e00 	rsbs	lr, ip, #0
    d1e6:	eb12 020c 	adds.w	r2, r2, ip
    d1ea:	eb53 030c 	adcs.w	r3, r3, ip
    d1ee:	eb54 040c 	adcs.w	r4, r4, ip
    d1f2:	f155 0500 	adcs.w	r5, r5, #0
    d1f6:	f156 0600 	adcs.w	r6, r6, #0
    d1fa:	f157 0700 	adcs.w	r7, r7, #0
    d1fe:	eb58 080e 	adcs.w	r8, r8, lr
    d202:	eb59 090c 	adcs.w	r9, r9, ip
    d206:	ec5b aa15 	vmov	sl, fp, s10, s11
    d20a:	ec51 0a16 	vmov	r0, r1, s12, s13
    d20e:	eb1a 0a06 	adds.w	sl, sl, r6
    d212:	eb5b 0b07 	adcs.w	fp, fp, r7
    d216:	eb50 0008 	adcs.w	r0, r0, r8
    d21a:	eb51 0109 	adcs.w	r1, r1, r9
    d21e:	f05f 0c00 	movs.w	ip, #0
    d222:	f14c 0c00 	adc.w	ip, ip, #0
    d226:	eb1a 0a07 	adds.w	sl, sl, r7
    d22a:	eb5b 0b08 	adcs.w	fp, fp, r8
    d22e:	eb50 0009 	adcs.w	r0, r0, r9
    d232:	eb51 0109 	adcs.w	r1, r1, r9
    d236:	eb52 020c 	adcs.w	r2, r2, ip
    d23a:	f05f 0c00 	movs.w	ip, #0
    d23e:	eb53 030c 	adcs.w	r3, r3, ip
    d242:	eb54 040c 	adcs.w	r4, r4, ip
    d246:	4175      	adcs	r5, r6
    d248:	f14c 0c00 	adc.w	ip, ip, #0
    d24c:	ebba 0a09 	subs.w	sl, sl, r9
    d250:	f17b 0b00 	sbcs.w	fp, fp, #0
    d254:	f170 0000 	sbcs.w	r0, r0, #0
    d258:	41b1      	sbcs	r1, r6
    d25a:	41ba      	sbcs	r2, r7
    d25c:	eb73 0308 	sbcs.w	r3, r3, r8
    d260:	41b4      	sbcs	r4, r6
    d262:	eb75 0508 	sbcs.w	r5, r5, r8
    d266:	f16c 0c00 	sbc.w	ip, ip, #0
    d26a:	1bc9      	subs	r1, r1, r7
    d26c:	eb72 0208 	sbcs.w	r2, r2, r8
    d270:	eb73 0309 	sbcs.w	r3, r3, r9
    d274:	41bc      	sbcs	r4, r7
    d276:	eb75 0509 	sbcs.w	r5, r5, r9
    d27a:	f16c 0c00 	sbc.w	ip, ip, #0
    d27e:	ea5f 78ec 	movs.w	r8, ip, asr #31
    d282:	ea7f 0808 	mvns.w	r8, r8
    d286:	f1d8 0900 	rsbs	r9, r8, #0
    d28a:	ebba 0a08 	subs.w	sl, sl, r8
    d28e:	eb7b 0b08 	sbcs.w	fp, fp, r8
    d292:	eb70 0008 	sbcs.w	r0, r0, r8
    d296:	f171 0100 	sbcs.w	r1, r1, #0
    d29a:	f172 0200 	sbcs.w	r2, r2, #0
    d29e:	f173 0300 	sbcs.w	r3, r3, #0
    d2a2:	eb74 0409 	sbcs.w	r4, r4, r9
    d2a6:	eb75 0508 	sbcs.w	r5, r5, r8
    d2aa:	f16c 0c00 	sbc.w	ip, ip, #0
    d2ae:	ea5f 78ec 	movs.w	r8, ip, asr #31
    d2b2:	f1d8 0900 	rsbs	r9, r8, #0
    d2b6:	eb1a 0a08 	adds.w	sl, sl, r8
    d2ba:	eb5b 0b08 	adcs.w	fp, fp, r8
    d2be:	eb50 0008 	adcs.w	r0, r0, r8
    d2c2:	f151 0100 	adcs.w	r1, r1, #0
    d2c6:	f152 0200 	adcs.w	r2, r2, #0
    d2ca:	f153 0300 	adcs.w	r3, r3, #0
    d2ce:	eb54 0409 	adcs.w	r4, r4, r9
    d2d2:	eb55 0508 	adcs.w	r5, r5, r8
    d2d6:	f14c 0c00 	adc.w	ip, ip, #0
    d2da:	ea5f 78ec 	movs.w	r8, ip, asr #31
    d2de:	f1d8 0900 	rsbs	r9, r8, #0
    d2e2:	eb1a 0a08 	adds.w	sl, sl, r8
    d2e6:	eb5b 0b08 	adcs.w	fp, fp, r8
    d2ea:	eb50 0008 	adcs.w	r0, r0, r8
    d2ee:	f151 0100 	adcs.w	r1, r1, #0
    d2f2:	f152 0200 	adcs.w	r2, r2, #0
    d2f6:	f153 0300 	adcs.w	r3, r3, #0
    d2fa:	eb54 0409 	adcs.w	r4, r4, r9
    d2fe:	eb55 0508 	adcs.w	r5, r5, r8
    d302:	ee14 7a10 	vmov	r7, s8
    d306:	e8a7 0c00 	stmia.w	r7!, {sl, fp}
    d30a:	e887 003f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5}
    d30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d312:	bf00      	nop

0000d314 <bsd_recoverable_error_handler>:
struct at_param_list m_param_list;

/**@brief Recoverable BSD library error. */
void bsd_recoverable_error_handler(uint32_t err)
{
	LOG_ERR("bsdlib recoverable error: %u", err);
    d314:	2301      	movs	r3, #1
    d316:	f04f 0200 	mov.w	r2, #0
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    d31a:	4907      	ldr	r1, [pc, #28]	; (d338 <bsd_recoverable_error_handler+0x24>)
    d31c:	f363 0202 	bfi	r2, r3, #0, #3
    d320:	4b06      	ldr	r3, [pc, #24]	; (d33c <bsd_recoverable_error_handler+0x28>)
    d322:	f36f 02c5 	bfc	r2, #3, #3
    d326:	1a5b      	subs	r3, r3, r1
    d328:	08db      	lsrs	r3, r3, #3
    d32a:	4601      	mov	r1, r0
    d32c:	f363 128f 	bfi	r2, r3, #6, #10
    d330:	4803      	ldr	r0, [pc, #12]	; (d340 <bsd_recoverable_error_handler+0x2c>)
    d332:	f016 bd8d 	b.w	23e50 <log_1>
    d336:	bf00      	nop
    d338:	00026560 	.word	0x00026560
    d33c:	00026560 	.word	0x00026560
    d340:	00027a0c 	.word	0x00027a0c

0000d344 <start_execute>:
}

void start_execute(void)
{
    d344:	b538      	push	{r3, r4, r5, lr}
	int err;

	LOG_INF("Serial LTE Modem");
    d346:	f04f 0100 	mov.w	r1, #0
    d34a:	2303      	movs	r3, #3
    d34c:	4c19      	ldr	r4, [pc, #100]	; (d3b4 <start_execute+0x70>)
    d34e:	f363 0102 	bfi	r1, r3, #0, #3
    d352:	4b19      	ldr	r3, [pc, #100]	; (d3b8 <start_execute+0x74>)
    d354:	f36f 01c5 	bfc	r1, #3, #3
    d358:	1ae4      	subs	r4, r4, r3
    d35a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    d35e:	f364 118f 	bfi	r1, r4, #6, #10
    d362:	4816      	ldr	r0, [pc, #88]	; (d3bc <start_execute+0x78>)
    d364:	f016 fd67 	bl	23e36 <log_0>
#if defined(CONFIG_SLM_AT_MODE)
	err = slm_at_host_init();
    d368:	f000 f99a 	bl	d6a0 <slm_at_host_init>
	if (err != 0) {
    d36c:	4605      	mov	r5, r0
    d36e:	b170      	cbz	r0, d38e <start_execute+0x4a>
		LOG_ERR("Failed to init at_host: %d", err);
    d370:	f04f 0200 	mov.w	r2, #0
    d374:	2301      	movs	r3, #1
    d376:	f363 0202 	bfi	r2, r3, #0, #3
    d37a:	f36f 02c5 	bfc	r2, #3, #3
    d37e:	4601      	mov	r1, r0
    d380:	480f      	ldr	r0, [pc, #60]	; (d3c0 <start_execute+0x7c>)
    d382:	f364 128f 	bfi	r2, r4, #6, #10
	if (err) {
		LOG_ERR("Failed to init AT Parser: %d", err);
		return;
	}
#endif
}
    d386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_ERR("Failed to init AT Parser: %d", err);
    d38a:	f016 bd61 	b.w	23e50 <log_1>
	err = at_params_list_init(&m_param_list, CONFIG_SLM_AT_MAX_PARAM);
    d38e:	2108      	movs	r1, #8
    d390:	480c      	ldr	r0, [pc, #48]	; (d3c4 <start_execute+0x80>)
    d392:	f018 fa5b 	bl	2584c <at_params_list_init>
	if (err) {
    d396:	4601      	mov	r1, r0
    d398:	b150      	cbz	r0, d3b0 <start_execute+0x6c>
		LOG_ERR("Failed to init AT Parser: %d", err);
    d39a:	f04f 0200 	mov.w	r2, #0
    d39e:	2301      	movs	r3, #1
    d3a0:	f363 0202 	bfi	r2, r3, #0, #3
    d3a4:	f365 02c5 	bfi	r2, r5, #3, #3
    d3a8:	f364 128f 	bfi	r2, r4, #6, #10
    d3ac:	4806      	ldr	r0, [pc, #24]	; (d3c8 <start_execute+0x84>)
    d3ae:	e7ea      	b.n	d386 <start_execute+0x42>
}
    d3b0:	bd38      	pop	{r3, r4, r5, pc}
    d3b2:	bf00      	nop
    d3b4:	00026560 	.word	0x00026560
    d3b8:	00026560 	.word	0x00026560
    d3bc:	00027a29 	.word	0x00027a29
    d3c0:	00027a3a 	.word	0x00027a3a
    d3c4:	200200e0 	.word	0x200200e0
    d3c8:	00027a55 	.word	0x00027a55

0000d3cc <write_uart_string>:
static size_t at_buf_len;
static struct k_work cmd_send_work;
static const char termination[3] = { '\0', '\r', '\n' };

static inline void write_uart_string(char *str, size_t len)
{
    d3cc:	b570      	push	{r4, r5, r6, lr}
    d3ce:	4604      	mov	r4, r0
	LOG_HEXDUMP_DBG(str, len, "TX");

	for (size_t i = 0; i < len; i++) {
		uart_poll_out(uart_dev, str[i]);
    d3d0:	4e05      	ldr	r6, [pc, #20]	; (d3e8 <write_uart_string+0x1c>)
    d3d2:	1845      	adds	r5, r0, r1
	for (size_t i = 0; i < len; i++) {
    d3d4:	42ac      	cmp	r4, r5
    d3d6:	d100      	bne.n	d3da <write_uart_string+0xe>
	}
}
    d3d8:	bd70      	pop	{r4, r5, r6, pc}
		uart_poll_out(uart_dev, str[i]);
    d3da:	6830      	ldr	r0, [r6, #0]
    d3dc:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    d3e0:	6843      	ldr	r3, [r0, #4]
    d3e2:	685b      	ldr	r3, [r3, #4]
    d3e4:	4798      	blx	r3
    d3e6:	e7f5      	b.n	d3d4 <write_uart_string+0x8>
    d3e8:	200200fc 	.word	0x200200fc

0000d3ec <cmd_send>:
	size_t size_slmver = sizeof(AT_CMD_SLMVER_U) - 1;

	ARG_UNUSED(work);

	/* Make sure the string is 0-terminated */
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    d3ec:	f640 228b 	movw	r2, #2699	; 0xa8b
{
    d3f0:	b570      	push	{r4, r5, r6, lr}
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    d3f2:	4d3a      	ldr	r5, [pc, #232]	; (d4dc <cmd_send+0xf0>)
    d3f4:	2600      	movs	r6, #0
    d3f6:	682b      	ldr	r3, [r5, #0]
    d3f8:	4c39      	ldr	r4, [pc, #228]	; (d4e0 <cmd_send+0xf4>)
    d3fa:	4293      	cmp	r3, r2
    d3fc:	bf28      	it	cs
    d3fe:	4613      	movcs	r3, r2
{
    d400:	b086      	sub	sp, #24

	LOG_HEXDUMP_DBG(at_buf, at_buf_len, "RX");

	if (strncmp(at_buf, AT_CMD_SLMVER_U, size_slmver) == 0 ||
    d402:	220a      	movs	r2, #10
    d404:	4937      	ldr	r1, [pc, #220]	; (d4e4 <cmd_send+0xf8>)
    d406:	4620      	mov	r0, r4
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    d408:	54e6      	strb	r6, [r4, r3]
	if (strncmp(at_buf, AT_CMD_SLMVER_U, size_slmver) == 0 ||
    d40a:	f017 fa3a 	bl	24882 <strncmp>
    d40e:	b920      	cbnz	r0, d41a <cmd_send+0x2e>
		strncmp(at_buf, AT_CMD_SLMVER_L, size_slmver) == 0) {
		write_uart_string(SLM_VERSION, sizeof(SLM_VERSION));
    d410:	2110      	movs	r1, #16
    d412:	4835      	ldr	r0, [pc, #212]	; (d4e8 <cmd_send+0xfc>)
		state = AT_CMD_ERROR;
	}

	switch (state) {
	case AT_CMD_OK:
		write_uart_string(buf, strlen(buf));
    d414:	f7ff ffda 	bl	d3cc <write_uart_string>
    d418:	e00b      	b.n	d432 <cmd_send+0x46>
		strncmp(at_buf, AT_CMD_SLMVER_L, size_slmver) == 0) {
    d41a:	220a      	movs	r2, #10
    d41c:	4933      	ldr	r1, [pc, #204]	; (d4ec <cmd_send+0x100>)
    d41e:	4620      	mov	r0, r4
    d420:	f017 fa2f 	bl	24882 <strncmp>
	if (strncmp(at_buf, AT_CMD_SLMVER_U, size_slmver) == 0 ||
    d424:	2800      	cmp	r0, #0
    d426:	d0f3      	beq.n	d410 <cmd_send+0x24>
	err = slm_at_tcpip_parse(at_buf, at_buf_len);
    d428:	7829      	ldrb	r1, [r5, #0]
    d42a:	4620      	mov	r0, r4
    d42c:	f001 f8a0 	bl	e570 <slm_at_tcpip_parse>
	if (err == 0) {
    d430:	b948      	cbnz	r0, d446 <cmd_send+0x5a>
		write_uart_string(OK_STR, sizeof(OK_STR));
    d432:	2105      	movs	r1, #5
    d434:	482e      	ldr	r0, [pc, #184]	; (d4f0 <cmd_send+0x104>)
		chars = sprintf(str, "+CMS: %d\r\n", err);
		write_uart_string(str, ++chars);
		break;
	case AT_CMD_ERROR_CME:
		chars = sprintf(str, "+CME: %d\r\n", err);
		write_uart_string(str, ++chars);
    d436:	f7ff ffc9 	bl	d3cc <write_uart_string>
	default:
		break;
	}

done:
	uart_irq_rx_enable(uart_dev);
    d43a:	4b2e      	ldr	r3, [pc, #184]	; (d4f4 <cmd_send+0x108>)
    d43c:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
    d43e:	f016 f92f 	bl	236a0 <z_impl_uart_irq_rx_enable>
}
    d442:	b006      	add	sp, #24
    d444:	bd70      	pop	{r4, r5, r6, pc}
	} else if (err != -ENOTSUP) {
    d446:	3023      	adds	r0, #35	; 0x23
    d448:	d002      	beq.n	d450 <cmd_send+0x64>
		write_uart_string(ERROR_STR, sizeof(ERROR_STR));
    d44a:	2108      	movs	r1, #8
    d44c:	482a      	ldr	r0, [pc, #168]	; (d4f8 <cmd_send+0x10c>)
    d44e:	e7f2      	b.n	d436 <cmd_send+0x4a>
	err = slm_at_gps_parse(at_buf, at_buf_len);
    d450:	7829      	ldrb	r1, [r5, #0]
    d452:	4620      	mov	r0, r4
    d454:	f001 fd54 	bl	ef00 <slm_at_gps_parse>
	if (err == 0) {
    d458:	2800      	cmp	r0, #0
    d45a:	d0ea      	beq.n	d432 <cmd_send+0x46>
	} else if (err != -ENOTSUP) {
    d45c:	3023      	adds	r0, #35	; 0x23
    d45e:	d1f4      	bne.n	d44a <cmd_send+0x5e>
	err = at_cmd_write(at_buf, buf, AT_MAX_CMD_LEN, &state);
    d460:	4620      	mov	r0, r4
    d462:	f10d 0307 	add.w	r3, sp, #7
    d466:	f640 228c 	movw	r2, #2700	; 0xa8c
    d46a:	4924      	ldr	r1, [pc, #144]	; (d4fc <cmd_send+0x110>)
    d46c:	f005 fcd6 	bl	12e1c <at_cmd_write>
	if (err < 0) {
    d470:	1e04      	subs	r4, r0, #0
    d472:	da12      	bge.n	d49a <cmd_send+0xae>
		LOG_ERR("Could not send AT command to modem: %d", err);
    d474:	2501      	movs	r5, #1
    d476:	f04f 0200 	mov.w	r2, #0
    d47a:	4921      	ldr	r1, [pc, #132]	; (d500 <cmd_send+0x114>)
    d47c:	4b21      	ldr	r3, [pc, #132]	; (d504 <cmd_send+0x118>)
    d47e:	f365 0202 	bfi	r2, r5, #0, #3
    d482:	1a5b      	subs	r3, r3, r1
    d484:	08db      	lsrs	r3, r3, #3
    d486:	f366 02c5 	bfi	r2, r6, #3, #3
    d48a:	f363 128f 	bfi	r2, r3, #6, #10
    d48e:	4621      	mov	r1, r4
    d490:	481d      	ldr	r0, [pc, #116]	; (d508 <cmd_send+0x11c>)
    d492:	f016 fcdd 	bl	23e50 <log_1>
		state = AT_CMD_ERROR;
    d496:	f88d 5007 	strb.w	r5, [sp, #7]
	switch (state) {
    d49a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d49e:	2b03      	cmp	r3, #3
    d4a0:	d8cb      	bhi.n	d43a <cmd_send+0x4e>
    d4a2:	a201      	add	r2, pc, #4	; (adr r2, d4a8 <cmd_send+0xbc>)
    d4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d4a8:	0000d4b9 	.word	0x0000d4b9
    d4ac:	0000d44b 	.word	0x0000d44b
    d4b0:	0000d4c5 	.word	0x0000d4c5
    d4b4:	0000d4d5 	.word	0x0000d4d5
		write_uart_string(buf, strlen(buf));
    d4b8:	4810      	ldr	r0, [pc, #64]	; (d4fc <cmd_send+0x110>)
    d4ba:	f017 f9cd 	bl	24858 <strlen>
    d4be:	4601      	mov	r1, r0
    d4c0:	480e      	ldr	r0, [pc, #56]	; (d4fc <cmd_send+0x110>)
    d4c2:	e7a7      	b.n	d414 <cmd_send+0x28>
		chars = sprintf(str, "+CMS: %d\r\n", err);
    d4c4:	4622      	mov	r2, r4
    d4c6:	4911      	ldr	r1, [pc, #68]	; (d50c <cmd_send+0x120>)
		chars = sprintf(str, "+CME: %d\r\n", err);
    d4c8:	a802      	add	r0, sp, #8
    d4ca:	f004 f901 	bl	116d0 <sprintf>
		write_uart_string(str, ++chars);
    d4ce:	1c41      	adds	r1, r0, #1
    d4d0:	a802      	add	r0, sp, #8
    d4d2:	e7b0      	b.n	d436 <cmd_send+0x4a>
		chars = sprintf(str, "+CME: %d\r\n", err);
    d4d4:	4622      	mov	r2, r4
    d4d6:	490e      	ldr	r1, [pc, #56]	; (d510 <cmd_send+0x124>)
    d4d8:	e7f6      	b.n	d4c8 <cmd_send+0xdc>
    d4da:	bf00      	nop
    d4dc:	200200e8 	.word	0x200200e8
    d4e0:	20025e22 	.word	0x20025e22
    d4e4:	00027a76 	.word	0x00027a76
    d4e8:	00027a81 	.word	0x00027a81
    d4ec:	00027a96 	.word	0x00027a96
    d4f0:	00027a91 	.word	0x00027a91
    d4f4:	200200fc 	.word	0x200200fc
    d4f8:	00027aa1 	.word	0x00027aa1
    d4fc:	200268ae 	.word	0x200268ae
    d500:	00026560 	.word	0x00026560
    d504:	00026570 	.word	0x00026570
    d508:	00027aa9 	.word	0x00027aa9
    d50c:	00027ad0 	.word	0x00027ad0
    d510:	00027adb 	.word	0x00027adb

0000d514 <isr>:
	at_buf_len = cmd_len;
	cmd_len = 0;
}

static void isr(struct device *dev)
{
    d514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d518:	4607      	mov	r7, r0
    d51a:	b085      	sub	sp, #20
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
    d51c:	6843      	ldr	r3, [r0, #4]
    d51e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    d520:	b103      	cbz	r3, d524 <isr+0x10>
		return api->irq_update(dev);
    d522:	4798      	blx	r3
	if (api->irq_rx_ready) {
    d524:	687b      	ldr	r3, [r7, #4]
    d526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d528:	b19b      	cbz	r3, d552 <isr+0x3e>
		return api->irq_rx_ready(dev);
    d52a:	4638      	mov	r0, r7
    d52c:	4798      	blx	r3
	u8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
    d52e:	b180      	cbz	r0, d552 <isr+0x3e>
    d530:	4d4d      	ldr	r5, [pc, #308]	; (d668 <isr+0x154>)
		LOG_ERR("Invalid termination mode: %d", term_mode);
    d532:	4b4e      	ldr	r3, [pc, #312]	; (d66c <isr+0x158>)
	cmd_len += 1;
    d534:	4e4e      	ldr	r6, [pc, #312]	; (d670 <isr+0x15c>)
		LOG_ERR("Invalid termination mode: %d", term_mode);
    d536:	1aed      	subs	r5, r5, r3
	if (inside_quotes) {
    d538:	f8df b160 	ldr.w	fp, [pc, #352]	; d69c <isr+0x188>
		LOG_ERR("Invalid termination mode: %d", term_mode);
    d53c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
	if (api->fifo_read) {
    d540:	687b      	ldr	r3, [r7, #4]
    d542:	699b      	ldr	r3, [r3, #24]
    d544:	b12b      	cbz	r3, d552 <isr+0x3e>
		return api->fifo_read(dev, rx_data, size);
    d546:	2201      	movs	r2, #1
    d548:	f10d 010f 	add.w	r1, sp, #15
    d54c:	4638      	mov	r0, r7
    d54e:	4798      	blx	r3
		return;
	}

	while (uart_fifo_read(dev, &character, 1)) {
    d550:	b910      	cbnz	r0, d558 <isr+0x44>
		uart_rx_handler(character);
	}
}
    d552:	b005      	add	sp, #20
    d554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	cmd_len += 1;
    d558:	6832      	ldr	r2, [r6, #0]
		uart_rx_handler(character);
    d55a:	f89d 100f 	ldrb.w	r1, [sp, #15]
	cmd_len += 1;
    d55e:	1c54      	adds	r4, r2, #1
	switch (character) {
    d560:	2922      	cmp	r1, #34	; 0x22
	cmd_len += 1;
    d562:	6034      	str	r4, [r6, #0]
	switch (character) {
    d564:	d019      	beq.n	d59a <isr+0x86>
    d566:	297f      	cmp	r1, #127	; 0x7f
    d568:	d001      	beq.n	d56e <isr+0x5a>
    d56a:	2908      	cmp	r1, #8
    d56c:	d11b      	bne.n	d5a6 <isr+0x92>
		pos = pos ? pos - 1 : 0;
    d56e:	b102      	cbz	r2, d572 <isr+0x5e>
    d570:	3a01      	subs	r2, #1
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    d572:	2c02      	cmp	r4, #2
    d574:	bf38      	it	cc
    d576:	2402      	movcc	r4, #2
		at_buf[pos] = 0;
    d578:	2000      	movs	r0, #0
    d57a:	4b3e      	ldr	r3, [pc, #248]	; (d674 <isr+0x160>)
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    d57c:	3c02      	subs	r4, #2
		at_buf[pos] = 0;
    d57e:	5498      	strb	r0, [r3, r2]
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    d580:	6034      	str	r4, [r6, #0]
	if (inside_quotes) {
    d582:	f89b 3000 	ldrb.w	r3, [fp]
    d586:	2b00      	cmp	r3, #0
    d588:	d1da      	bne.n	d540 <isr+0x2c>
	switch (term_mode) {
    d58a:	4b3b      	ldr	r3, [pc, #236]	; (d678 <isr+0x164>)
    d58c:	781b      	ldrb	r3, [r3, #0]
    d58e:	2b03      	cmp	r3, #3
    d590:	d85c      	bhi.n	d64c <isr+0x138>
    d592:	e8df f003 	tbb	[pc, r3]
    d596:	2d2d      	.short	0x2d2d
    d598:	534b      	.short	0x534b
		inside_quotes = !inside_quotes;
    d59a:	f89b 3000 	ldrb.w	r3, [fp]
    d59e:	f083 0301 	eor.w	r3, r3, #1
    d5a2:	f88b 3000 	strb.w	r3, [fp]
		if (cmd_len > AT_MAX_CMD_LEN) {
    d5a6:	f640 238c 	movw	r3, #2700	; 0xa8c
    d5aa:	429c      	cmp	r4, r3
    d5ac:	d90e      	bls.n	d5cc <isr+0xb8>
			LOG_ERR("Buffer overflow, dropping '%c'\n", character);
    d5ae:	2201      	movs	r2, #1
    d5b0:	f362 0802 	bfi	r8, r2, #0, #3
    d5b4:	f36f 08c5 	bfc	r8, #3, #3
    d5b8:	f365 188f 	bfi	r8, r5, #6, #10
    d5bc:	4642      	mov	r2, r8
    d5be:	482f      	ldr	r0, [pc, #188]	; (d67c <isr+0x168>)
    d5c0:	9301      	str	r3, [sp, #4]
    d5c2:	f016 fc45 	bl	23e50 <log_1>
			cmd_len = AT_MAX_CMD_LEN;
    d5c6:	9b01      	ldr	r3, [sp, #4]
	cmd_len = 0;
    d5c8:	6033      	str	r3, [r6, #0]
    d5ca:	e7b9      	b.n	d540 <isr+0x2c>
		} else if (cmd_len < 1) {
    d5cc:	b96c      	cbnz	r4, d5ea <isr+0xd6>
			LOG_ERR("Invalid AT command length: %d", cmd_len);
    d5ce:	2301      	movs	r3, #1
    d5d0:	f363 0902 	bfi	r9, r3, #0, #3
    d5d4:	f364 09c5 	bfi	r9, r4, #3, #3
    d5d8:	f365 198f 	bfi	r9, r5, #6, #10
    d5dc:	464a      	mov	r2, r9
    d5de:	4621      	mov	r1, r4
    d5e0:	4827      	ldr	r0, [pc, #156]	; (d680 <isr+0x16c>)
    d5e2:	f016 fc35 	bl	23e50 <log_1>
			cmd_len = 0;
    d5e6:	6034      	str	r4, [r6, #0]
    d5e8:	e7aa      	b.n	d540 <isr+0x2c>
		at_buf[pos] = character;
    d5ea:	4b22      	ldr	r3, [pc, #136]	; (d674 <isr+0x160>)
    d5ec:	5499      	strb	r1, [r3, r2]
    d5ee:	e7c8      	b.n	d582 <isr+0x6e>
		if (character == termination[term_mode]) {
    d5f0:	4a24      	ldr	r2, [pc, #144]	; (d684 <isr+0x170>)
    d5f2:	5cd3      	ldrb	r3, [r2, r3]
    d5f4:	428b      	cmp	r3, r1
		if ((at_buf[pos - 1]) &&
    d5f6:	d1a3      	bne.n	d540 <isr+0x2c>
	uart_irq_rx_disable(uart_dev);
    d5f8:	4b23      	ldr	r3, [pc, #140]	; (d688 <isr+0x174>)
    d5fa:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
    d5fc:	6843      	ldr	r3, [r0, #4]
    d5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d600:	b103      	cbz	r3, d604 <isr+0xf0>
		api->irq_rx_disable(dev);
    d602:	4798      	blx	r3
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d604:	4921      	ldr	r1, [pc, #132]	; (d68c <isr+0x178>)
    d606:	e8d1 3fef 	ldaex	r3, [r1]
    d60a:	f043 0201 	orr.w	r2, r3, #1
    d60e:	e8c1 2fe0 	stlex	r0, r2, [r1]
    d612:	2800      	cmp	r0, #0
    d614:	d1f7      	bne.n	d606 <isr+0xf2>
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    d616:	07db      	lsls	r3, r3, #31
    d618:	d403      	bmi.n	d622 <isr+0x10e>
		k_queue_append(&work_q->queue, work);
    d61a:	3908      	subs	r1, #8
    d61c:	481c      	ldr	r0, [pc, #112]	; (d690 <isr+0x17c>)
    d61e:	f018 fab6 	bl	25b8e <k_queue_append>
	at_buf_len = cmd_len;
    d622:	4b1c      	ldr	r3, [pc, #112]	; (d694 <isr+0x180>)
    d624:	6832      	ldr	r2, [r6, #0]
    d626:	601a      	str	r2, [r3, #0]
	cmd_len = 0;
    d628:	2300      	movs	r3, #0
    d62a:	e7cd      	b.n	d5c8 <isr+0xb4>
		if ((at_buf[pos - 1]) &&
    d62c:	4b11      	ldr	r3, [pc, #68]	; (d674 <isr+0x160>)
    d62e:	441a      	add	r2, r3
    d630:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    d634:	2b00      	cmp	r3, #0
    d636:	d083      	beq.n	d540 <isr+0x2c>
    d638:	290a      	cmp	r1, #10
    d63a:	e7dc      	b.n	d5f6 <isr+0xe2>
		if ((at_buf[pos - 1] == '\r') && (character == '\n')) {
    d63c:	4b0d      	ldr	r3, [pc, #52]	; (d674 <isr+0x160>)
    d63e:	441a      	add	r2, r3
    d640:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    d644:	2b0d      	cmp	r3, #13
    d646:	f47f af7b 	bne.w	d540 <isr+0x2c>
    d64a:	e7f5      	b.n	d638 <isr+0x124>
		LOG_ERR("Invalid termination mode: %d", term_mode);
    d64c:	2201      	movs	r2, #1
    d64e:	f362 0a02 	bfi	sl, r2, #0, #3
    d652:	f36f 0ac5 	bfc	sl, #3, #3
    d656:	f365 1a8f 	bfi	sl, r5, #6, #10
    d65a:	4652      	mov	r2, sl
    d65c:	4619      	mov	r1, r3
    d65e:	480e      	ldr	r0, [pc, #56]	; (d698 <isr+0x184>)
    d660:	f016 fbf6 	bl	23e50 <log_1>
    d664:	e76c      	b.n	d540 <isr+0x2c>
    d666:	bf00      	nop
    d668:	00026570 	.word	0x00026570
    d66c:	00026560 	.word	0x00026560
    d670:	200200ec 	.word	0x200200ec
    d674:	20025e22 	.word	0x20025e22
    d678:	2002733b 	.word	0x2002733b
    d67c:	00027ae6 	.word	0x00027ae6
    d680:	00027b06 	.word	0x00027b06
    d684:	00027c1f 	.word	0x00027c1f
    d688:	200200fc 	.word	0x200200fc
    d68c:	200200f8 	.word	0x200200f8
    d690:	20025d3c 	.word	0x20025d3c
    d694:	200200e8 	.word	0x200200e8
    d698:	00027b24 	.word	0x00027b24
    d69c:	2002733a 	.word	0x2002733a

0000d6a0 <slm_at_host_init>:
{
	write_uart_string(str, strlen(str));
}

int slm_at_host_init(void)
{
    d6a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	enum select_uart uart_id = CONFIG_SLM_CONNECT_UART;
	enum term_modes mode = CONFIG_SLM_AT_HOST_TERMINATION;

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
    d6a2:	2203      	movs	r2, #3
    d6a4:	4b4d      	ldr	r3, [pc, #308]	; (d7dc <slm_at_host_init+0x13c>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
    d6a6:	494e      	ldr	r1, [pc, #312]	; (d7e0 <slm_at_host_init+0x140>)
    d6a8:	2000      	movs	r0, #0
		term_mode = mode;
    d6aa:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
    d6ac:	f004 ff14 	bl	124d8 <at_notif_register_handler>
    d6b0:	4d4c      	ldr	r5, [pc, #304]	; (d7e4 <slm_at_host_init+0x144>)
    d6b2:	4b4d      	ldr	r3, [pc, #308]	; (d7e8 <slm_at_host_init+0x148>)
	if (err != 0) {
    d6b4:	4604      	mov	r4, r0
    d6b6:	1aed      	subs	r5, r5, r3
    d6b8:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    d6bc:	b178      	cbz	r0, d6de <slm_at_host_init+0x3e>
		LOG_ERR("Can't register handler err=%d", err);
    d6be:	f04f 0200 	mov.w	r2, #0
    d6c2:	2301      	movs	r3, #1
    d6c4:	f363 0202 	bfi	r2, r3, #0, #3
    d6c8:	f36f 02c5 	bfc	r2, #3, #3
    d6cc:	4601      	mov	r1, r0
    d6ce:	f365 128f 	bfi	r2, r5, #6, #10
    d6d2:	4846      	ldr	r0, [pc, #280]	; (d7ec <slm_at_host_init+0x14c>)
    d6d4:	f016 fbbc 	bl	23e50 <log_1>
	}
#endif

	LOG_DBG("at_host init done");
	return err;
}
    d6d8:	4620      	mov	r0, r4
    d6da:	b003      	add	sp, #12
    d6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    d6de:	4844      	ldr	r0, [pc, #272]	; (d7f0 <slm_at_host_init+0x150>)
    d6e0:	f014 faaa 	bl	21c38 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
    d6e4:	4e43      	ldr	r6, [pc, #268]	; (d7f4 <slm_at_host_init+0x154>)
    d6e6:	6030      	str	r0, [r6, #0]
	if (uart_dev == NULL) {
    d6e8:	b310      	cbz	r0, d730 <slm_at_host_init+0x90>
			LOG_ERR("UART check failed: %d. "
    d6ea:	4c43      	ldr	r4, [pc, #268]	; (d7f8 <slm_at_host_init+0x158>)
		err = uart_err_check(uart_dev);
    d6ec:	6830      	ldr	r0, [r6, #0]
	if (api->err_check != NULL) {
    d6ee:	6843      	ldr	r3, [r0, #4]
    d6f0:	689b      	ldr	r3, [r3, #8]
    d6f2:	2b00      	cmp	r3, #0
    d6f4:	d04b      	beq.n	d78e <slm_at_host_init+0xee>
		return api->err_check(dev);
    d6f6:	4798      	blx	r3
		if (err) {
    d6f8:	4601      	mov	r1, r0
    d6fa:	2800      	cmp	r0, #0
    d6fc:	d047      	beq.n	d78e <slm_at_host_init+0xee>
			LOG_ERR("UART check failed: %d. "
    d6fe:	2301      	movs	r3, #1
    d700:	f363 0702 	bfi	r7, r3, #0, #3
    d704:	f36f 07c5 	bfc	r7, #3, #3
    d708:	f365 178f 	bfi	r7, r5, #6, #10
    d70c:	463a      	mov	r2, r7
    d70e:	4620      	mov	r0, r4
    d710:	f016 fb9e 	bl	23e50 <log_1>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
    d714:	6830      	ldr	r0, [r6, #0]
	if (api->fifo_read) {
    d716:	6843      	ldr	r3, [r0, #4]
    d718:	699b      	ldr	r3, [r3, #24]
    d71a:	b12b      	cbz	r3, d728 <slm_at_host_init+0x88>
		return api->fifo_read(dev, rx_data, size);
    d71c:	2201      	movs	r2, #1
    d71e:	f10d 0107 	add.w	r1, sp, #7
    d722:	4798      	blx	r3
    d724:	2800      	cmp	r0, #0
    d726:	d1f5      	bne.n	d714 <slm_at_host_init+0x74>
	if (z_syscall_trap()) {
		return (s32_t) arch_syscall_invoke1(*(uintptr_t *)&ms, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(ms);
    d728:	200a      	movs	r0, #10
    d72a:	f015 f951 	bl	229d0 <z_impl_k_sleep>
    d72e:	e7dd      	b.n	d6ec <slm_at_host_init+0x4c>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
    d730:	2601      	movs	r6, #1
    d732:	f04f 0200 	mov.w	r2, #0
    d736:	f366 0202 	bfi	r2, r6, #0, #3
    d73a:	f364 02c5 	bfi	r2, r4, #3, #3
    d73e:	f365 128f 	bfi	r2, r5, #6, #10
    d742:	492b      	ldr	r1, [pc, #172]	; (d7f0 <slm_at_host_init+0x150>)
    d744:	482d      	ldr	r0, [pc, #180]	; (d7fc <slm_at_host_init+0x15c>)
    d746:	f016 fb83 	bl	23e50 <log_1>
		LOG_ERR("UART can not be initialized: %d", err);
    d74a:	f04f 0200 	mov.w	r2, #0
    d74e:	f06f 0115 	mvn.w	r1, #21
    d752:	f366 0202 	bfi	r2, r6, #0, #3
    d756:	f364 02c5 	bfi	r2, r4, #3, #3
    d75a:	4829      	ldr	r0, [pc, #164]	; (d800 <slm_at_host_init+0x160>)
    d75c:	f365 128f 	bfi	r2, r5, #6, #10
		LOG_ERR("GPS could not be initialized: %d", err);
    d760:	f016 fb76 	bl	23e50 <log_1>
		return -EFAULT;
    d764:	f06f 040d 	mvn.w	r4, #13
    d768:	e7b6      	b.n	d6d8 <slm_at_host_init+0x38>
	err = slm_at_gps_init(slm_at_callback);
    d76a:	4826      	ldr	r0, [pc, #152]	; (d804 <slm_at_host_init+0x164>)
    d76c:	f001 fbe8 	bl	ef40 <slm_at_gps_init>
	if (err) {
    d770:	4604      	mov	r4, r0
    d772:	2800      	cmp	r0, #0
    d774:	d0b0      	beq.n	d6d8 <slm_at_host_init+0x38>
		LOG_ERR("GPS could not be initialized: %d", err);
    d776:	f04f 0200 	mov.w	r2, #0
    d77a:	2301      	movs	r3, #1
    d77c:	f363 0202 	bfi	r2, r3, #0, #3
    d780:	f366 02c5 	bfi	r2, r6, #3, #3
    d784:	4601      	mov	r1, r0
    d786:	f365 128f 	bfi	r2, r5, #6, #10
    d78a:	481f      	ldr	r0, [pc, #124]	; (d808 <slm_at_host_init+0x168>)
    d78c:	e7e8      	b.n	d760 <slm_at_host_init+0xc0>
	uart_irq_callback_set(uart_dev, isr);
    d78e:	6832      	ldr	r2, [r6, #0]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
    d790:	6853      	ldr	r3, [r2, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    d792:	b123      	cbz	r3, d79e <slm_at_host_init+0xfe>
    d794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    d796:	b113      	cbz	r3, d79e <slm_at_host_init+0xfe>
		api->irq_callback_set(dev, cb, user_data);
    d798:	491c      	ldr	r1, [pc, #112]	; (d80c <slm_at_host_init+0x16c>)
    d79a:	4610      	mov	r0, r2
    d79c:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    d79e:	2400      	movs	r4, #0
    d7a0:	4b1b      	ldr	r3, [pc, #108]	; (d810 <slm_at_host_init+0x170>)
    d7a2:	4a1c      	ldr	r2, [pc, #112]	; (d814 <slm_at_host_init+0x174>)
    d7a4:	601c      	str	r4, [r3, #0]
    d7a6:	e9c3 2401 	strd	r2, r4, [r3, #4]
	uart_irq_rx_enable(uart_dev);
    d7aa:	6830      	ldr	r0, [r6, #0]
    d7ac:	f015 ff78 	bl	236a0 <z_impl_uart_irq_rx_enable>
	write_uart_string(SLM_SYNC_STR, sizeof(SLM_SYNC_STR)-1);
    d7b0:	2107      	movs	r1, #7
    d7b2:	4819      	ldr	r0, [pc, #100]	; (d818 <slm_at_host_init+0x178>)
    d7b4:	f7ff fe0a 	bl	d3cc <write_uart_string>
	err = slm_at_tcpip_init(slm_at_callback);
    d7b8:	4812      	ldr	r0, [pc, #72]	; (d804 <slm_at_host_init+0x164>)
    d7ba:	f000 ffff 	bl	e7bc <slm_at_tcpip_init>
	if (err) {
    d7be:	4606      	mov	r6, r0
    d7c0:	2800      	cmp	r0, #0
    d7c2:	d0d2      	beq.n	d76a <slm_at_host_init+0xca>
		LOG_ERR("TCPIP could not be initialized: %d", err);
    d7c4:	f04f 0200 	mov.w	r2, #0
    d7c8:	2301      	movs	r3, #1
    d7ca:	f363 0202 	bfi	r2, r3, #0, #3
    d7ce:	f364 02c5 	bfi	r2, r4, #3, #3
    d7d2:	4601      	mov	r1, r0
    d7d4:	f365 128f 	bfi	r2, r5, #6, #10
    d7d8:	4810      	ldr	r0, [pc, #64]	; (d81c <slm_at_host_init+0x17c>)
    d7da:	e7c1      	b.n	d760 <slm_at_host_init+0xc0>
    d7dc:	2002733b 	.word	0x2002733b
    d7e0:	000236bf 	.word	0x000236bf
    d7e4:	00026570 	.word	0x00026570
    d7e8:	00026560 	.word	0x00026560
    d7ec:	00027b41 	.word	0x00027b41
    d7f0:	00027b5f 	.word	0x00027b5f
    d7f4:	200200fc 	.word	0x200200fc
    d7f8:	00027b96 	.word	0x00027b96
    d7fc:	00027b66 	.word	0x00027b66
    d800:	00027b76 	.word	0x00027b76
    d804:	000236ab 	.word	0x000236ab
    d808:	00027bf6 	.word	0x00027bf6
    d80c:	0000d515 	.word	0x0000d515
    d810:	200200f0 	.word	0x200200f0
    d814:	0000d3ed 	.word	0x0000d3ed
    d818:	00027bcb 	.word	0x00027bcb
    d81c:	00027bd3 	.word	0x00027bd3

0000d820 <socket>:
static inline int socket(int family, int type, int proto)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->socket);

	return socket_ops->socket(family, type, proto);
    d820:	4b01      	ldr	r3, [pc, #4]	; (d828 <socket+0x8>)
    d822:	681b      	ldr	r3, [r3, #0]
    d824:	681b      	ldr	r3, [r3, #0]
    d826:	4718      	bx	r3
    d828:	20020314 	.word	0x20020314

0000d82c <close>:
static inline int close(int sock)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->close);

	return socket_ops->close(sock);
    d82c:	4b01      	ldr	r3, [pc, #4]	; (d834 <close+0x8>)
    d82e:	681b      	ldr	r3, [r3, #0]
    d830:	685b      	ldr	r3, [r3, #4]
    d832:	4718      	bx	r3
    d834:	20020314 	.word	0x20020314

0000d838 <do_socket_close>:
	LOG_DBG("Socket opened");
	return ret;
}

static int do_socket_close(int error)
{
    d838:	b570      	push	{r4, r5, r6, lr}
	int ret = 0;

	if (client.sock > 0) {
    d83a:	4c1a      	ldr	r4, [pc, #104]	; (d8a4 <do_socket_close+0x6c>)
{
    d83c:	4606      	mov	r6, r0
	if (client.sock > 0) {
    d83e:	6820      	ldr	r0, [r4, #0]
    d840:	2800      	cmp	r0, #0
    d842:	dd2c      	ble.n	d89e <do_socket_close+0x66>
		ret = close(client.sock);
    d844:	f7ff fff2 	bl	d82c <close>
		if (ret < 0) {
    d848:	1e05      	subs	r5, r0, #0
    d84a:	da18      	bge.n	d87e <do_socket_close+0x46>
			LOG_WRN("close() failed: %d", -errno);
    d84c:	2302      	movs	r3, #2
    d84e:	f04f 0500 	mov.w	r5, #0
    d852:	4a15      	ldr	r2, [pc, #84]	; (d8a8 <do_socket_close+0x70>)
    d854:	f363 0502 	bfi	r5, r3, #0, #3
    d858:	4b14      	ldr	r3, [pc, #80]	; (d8ac <do_socket_close+0x74>)
    d85a:	f36f 05c5 	bfc	r5, #3, #3
    d85e:	1a9b      	subs	r3, r3, r2
    d860:	08db      	lsrs	r3, r3, #3
    d862:	f363 158f 	bfi	r5, r3, #6, #10
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    d866:	f014 fa0d 	bl	21c84 <z_impl_z_errno>
    d86a:	6801      	ldr	r1, [r0, #0]
    d86c:	462a      	mov	r2, r5
    d86e:	4249      	negs	r1, r1
    d870:	480f      	ldr	r0, [pc, #60]	; (d8b0 <do_socket_close+0x78>)
    d872:	f016 faed 	bl	23e50 <log_1>
    d876:	f014 fa05 	bl	21c84 <z_impl_z_errno>
			ret = -errno;
    d87a:	6805      	ldr	r5, [r0, #0]
    d87c:	426d      	negs	r5, r5
		}
		client.sock = INVALID_SOCKET;
    d87e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d882:	6023      	str	r3, [r4, #0]
		client.ip_proto = IPPROTO_IP;
    d884:	2300      	movs	r3, #0
		client.connected = false;

		sprintf(buf, "#XSOCKET: %d\r\n", error);
    d886:	4632      	mov	r2, r6
    d888:	490a      	ldr	r1, [pc, #40]	; (d8b4 <do_socket_close+0x7c>)
    d88a:	480b      	ldr	r0, [pc, #44]	; (d8b8 <do_socket_close+0x80>)
		client.ip_proto = IPPROTO_IP;
    d88c:	7123      	strb	r3, [r4, #4]
		client.connected = false;
    d88e:	7163      	strb	r3, [r4, #5]
		sprintf(buf, "#XSOCKET: %d\r\n", error);
    d890:	f003 ff1e 	bl	116d0 <sprintf>
		client.callback(buf);
    d894:	68a3      	ldr	r3, [r4, #8]
    d896:	4808      	ldr	r0, [pc, #32]	; (d8b8 <do_socket_close+0x80>)
    d898:	4798      	blx	r3
		LOG_DBG("Socket closed");
	}

	return ret;
}
    d89a:	4628      	mov	r0, r5
    d89c:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
    d89e:	2500      	movs	r5, #0
	return ret;
    d8a0:	e7fb      	b.n	d89a <do_socket_close+0x62>
    d8a2:	bf00      	nop
    d8a4:	20020100 	.word	0x20020100
    d8a8:	00026560 	.word	0x00026560
    d8ac:	000265d0 	.word	0x000265d0
    d8b0:	00027c22 	.word	0x00027c22
    d8b4:	00027c35 	.word	0x00027c35
    d8b8:	2002733c 	.word	0x2002733c

0000d8bc <do_socket_open>:
	if (type == SOCK_STREAM) {
    d8bc:	2801      	cmp	r0, #1
{
    d8be:	b538      	push	{r3, r4, r5, lr}
    d8c0:	4601      	mov	r1, r0
    d8c2:	4c22      	ldr	r4, [pc, #136]	; (d94c <do_socket_open+0x90>)
	if (type == SOCK_STREAM) {
    d8c4:	d12f      	bne.n	d926 <do_socket_open+0x6a>
		client.sock = socket(AF_INET, SOCK_STREAM,
    d8c6:	2206      	movs	r2, #6
    d8c8:	f7ff ffaa 	bl	d820 <socket>
		client.ip_proto = IPPROTO_TCP;
    d8cc:	2306      	movs	r3, #6
		client.sock = socket(AF_INET, SOCK_STREAM,
    d8ce:	6020      	str	r0, [r4, #0]
		client.ip_proto = IPPROTO_UDP;
    d8d0:	7123      	strb	r3, [r4, #4]
	if (client.sock < 0) {
    d8d2:	6822      	ldr	r2, [r4, #0]
    d8d4:	2a00      	cmp	r2, #0
    d8d6:	da2f      	bge.n	d938 <do_socket_open+0x7c>
		LOG_ERR("socket() failed: %d", -errno);
    d8d8:	2301      	movs	r3, #1
    d8da:	f04f 0500 	mov.w	r5, #0
    d8de:	4a1c      	ldr	r2, [pc, #112]	; (d950 <do_socket_open+0x94>)
    d8e0:	f363 0502 	bfi	r5, r3, #0, #3
    d8e4:	4b1b      	ldr	r3, [pc, #108]	; (d954 <do_socket_open+0x98>)
    d8e6:	f36f 05c5 	bfc	r5, #3, #3
    d8ea:	1a9b      	subs	r3, r3, r2
    d8ec:	08db      	lsrs	r3, r3, #3
    d8ee:	f363 158f 	bfi	r5, r3, #6, #10
    d8f2:	f014 f9c7 	bl	21c84 <z_impl_z_errno>
    d8f6:	6801      	ldr	r1, [r0, #0]
    d8f8:	462a      	mov	r2, r5
    d8fa:	4249      	negs	r1, r1
    d8fc:	4816      	ldr	r0, [pc, #88]	; (d958 <do_socket_open+0x9c>)
    d8fe:	f016 faa7 	bl	23e50 <log_1>
    d902:	f014 f9bf 	bl	21c84 <z_impl_z_errno>
		sprintf(buf, "#XSOCKET: %d\r\n", -errno);
    d906:	6802      	ldr	r2, [r0, #0]
    d908:	4914      	ldr	r1, [pc, #80]	; (d95c <do_socket_open+0xa0>)
    d90a:	4252      	negs	r2, r2
    d90c:	4814      	ldr	r0, [pc, #80]	; (d960 <do_socket_open+0xa4>)
    d90e:	f003 fedf 	bl	116d0 <sprintf>
		client.callback(buf);
    d912:	68a3      	ldr	r3, [r4, #8]
    d914:	4812      	ldr	r0, [pc, #72]	; (d960 <do_socket_open+0xa4>)
    d916:	4798      	blx	r3
		client.ip_proto = IPPROTO_IP;
    d918:	2300      	movs	r3, #0
    d91a:	7123      	strb	r3, [r4, #4]
    d91c:	f014 f9b2 	bl	21c84 <z_impl_z_errno>
		ret = -errno;
    d920:	6800      	ldr	r0, [r0, #0]
    d922:	4240      	negs	r0, r0
}
    d924:	bd38      	pop	{r3, r4, r5, pc}
	} else if (type == SOCK_DGRAM) {
    d926:	2802      	cmp	r0, #2
    d928:	d1d3      	bne.n	d8d2 <do_socket_open+0x16>
		client.sock = socket(AF_INET, SOCK_DGRAM,
    d92a:	2211      	movs	r2, #17
    d92c:	2001      	movs	r0, #1
    d92e:	f7ff ff77 	bl	d820 <socket>
		client.ip_proto = IPPROTO_UDP;
    d932:	2311      	movs	r3, #17
		client.sock = socket(AF_INET, SOCK_DGRAM,
    d934:	6020      	str	r0, [r4, #0]
    d936:	e7cb      	b.n	d8d0 <do_socket_open+0x14>
		sprintf(buf, "#XSOCKET: %d, %d\r\n", client.sock,
    d938:	7923      	ldrb	r3, [r4, #4]
    d93a:	490a      	ldr	r1, [pc, #40]	; (d964 <do_socket_open+0xa8>)
    d93c:	4808      	ldr	r0, [pc, #32]	; (d960 <do_socket_open+0xa4>)
    d93e:	f003 fec7 	bl	116d0 <sprintf>
		client.callback(buf);
    d942:	4807      	ldr	r0, [pc, #28]	; (d960 <do_socket_open+0xa4>)
    d944:	68a3      	ldr	r3, [r4, #8]
    d946:	4798      	blx	r3
	int ret = 0;
    d948:	2000      	movs	r0, #0
	return ret;
    d94a:	e7eb      	b.n	d924 <do_socket_open+0x68>
    d94c:	20020100 	.word	0x20020100
    d950:	00026560 	.word	0x00026560
    d954:	000265d0 	.word	0x000265d0
    d958:	00027c44 	.word	0x00027c44
    d95c:	00027c35 	.word	0x00027c35
    d960:	2002733c 	.word	0x2002733c
    d964:	00027c58 	.word	0x00027c58

0000d968 <handle_at_socket>:
 *  AT#XSOCKET=<op>[,<type>]
 *  AT#XSOCKET?
 *  AT#XSOCKET=? TEST command not supported
 */
static int handle_at_socket(const char *at_cmd, size_t param_offset)
{
    d968:	b513      	push	{r0, r1, r4, lr}
	int err = -EINVAL;
	char *at_param = (char *)at_cmd + param_offset;
	u16_t op;

	if (*(at_param) == '=') {
    d96a:	5c43      	ldrb	r3, [r0, r1]
	char *at_param = (char *)at_cmd + param_offset;
    d96c:	1842      	adds	r2, r0, r1
	if (*(at_param) == '=') {
    d96e:	2b3d      	cmp	r3, #61	; 0x3d
    d970:	d15a      	bne.n	da28 <handle_at_socket+0xc0>
		at_param++;
		if (*(at_param) == '?') {
    d972:	7853      	ldrb	r3, [r2, #1]
    d974:	2b3f      	cmp	r3, #63	; 0x3f
    d976:	d06c      	beq.n	da52 <handle_at_socket+0xea>
			return err;
		}
		err = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    d978:	4a37      	ldr	r2, [pc, #220]	; (da58 <handle_at_socket+0xf0>)
    d97a:	2100      	movs	r1, #0
    d97c:	f017 ff3e 	bl	257fc <at_parser_params_from_str>
		if (err < 0) {
    d980:	1e04      	subs	r4, r0, #0
    d982:	db30      	blt.n	d9e6 <handle_at_socket+0x7e>
			return err;
		};
		if (at_params_valid_count_get(&m_param_list) < 2) {
    d984:	4834      	ldr	r0, [pc, #208]	; (da58 <handle_at_socket+0xf0>)
    d986:	f018 f83f 	bl	25a08 <at_params_valid_count_get>
    d98a:	2801      	cmp	r0, #1
    d98c:	d961      	bls.n	da52 <handle_at_socket+0xea>
			return -EINVAL;
		}
		err = at_params_short_get(&m_param_list, 1, &op);
    d98e:	aa01      	add	r2, sp, #4
    d990:	2101      	movs	r1, #1
    d992:	4831      	ldr	r0, [pc, #196]	; (da58 <handle_at_socket+0xf0>)
    d994:	f018 f803 	bl	2599e <at_params_short_get>
		if (err < 0) {
    d998:	1e04      	subs	r4, r0, #0
    d99a:	db24      	blt.n	d9e6 <handle_at_socket+0x7e>
			return err;
		};
		if (op == 1) {
    d99c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d9a0:	2801      	cmp	r0, #1
    d9a2:	d129      	bne.n	d9f8 <handle_at_socket+0x90>
			u16_t type;

			if (at_params_valid_count_get(&m_param_list) < 3) {
    d9a4:	482c      	ldr	r0, [pc, #176]	; (da58 <handle_at_socket+0xf0>)
    d9a6:	f018 f82f 	bl	25a08 <at_params_valid_count_get>
    d9aa:	2802      	cmp	r0, #2
    d9ac:	d951      	bls.n	da52 <handle_at_socket+0xea>
				return -EINVAL;
			}
			err = at_params_short_get(&m_param_list, 2, &type);
    d9ae:	f10d 0206 	add.w	r2, sp, #6
    d9b2:	2102      	movs	r1, #2
    d9b4:	4828      	ldr	r0, [pc, #160]	; (da58 <handle_at_socket+0xf0>)
    d9b6:	f017 fff2 	bl	2599e <at_params_short_get>
			if (err < 0) {
    d9ba:	1e04      	subs	r4, r0, #0
    d9bc:	db13      	blt.n	d9e6 <handle_at_socket+0x7e>
				return err;
			};
			if (client.sock > 0) {
    d9be:	4b27      	ldr	r3, [pc, #156]	; (da5c <handle_at_socket+0xf4>)
    d9c0:	681b      	ldr	r3, [r3, #0]
    d9c2:	2b00      	cmp	r3, #0
    d9c4:	dd12      	ble.n	d9ec <handle_at_socket+0x84>
				LOG_WRN("Socket is already opened");
    d9c6:	2302      	movs	r3, #2
    d9c8:	f04f 0100 	mov.w	r1, #0
    d9cc:	4a24      	ldr	r2, [pc, #144]	; (da60 <handle_at_socket+0xf8>)
    d9ce:	f363 0102 	bfi	r1, r3, #0, #3
    d9d2:	4b24      	ldr	r3, [pc, #144]	; (da64 <handle_at_socket+0xfc>)
    d9d4:	f36f 01c5 	bfc	r1, #3, #3
    d9d8:	1a9b      	subs	r3, r3, r2
    d9da:	08db      	lsrs	r3, r3, #3
    d9dc:	4822      	ldr	r0, [pc, #136]	; (da68 <handle_at_socket+0x100>)
    d9de:	f363 118f 	bfi	r1, r3, #6, #10
			} else {
				err = do_socket_open(type);
			}
		} else if (op == 0) {
			if (client.sock < 0) {
				LOG_WRN("Socket is not opened yet");
    d9e2:	f016 fa28 	bl	23e36 <log_0>
		client.callback(buf);
		err = 0;
	}

	return err;
}
    d9e6:	4620      	mov	r0, r4
    d9e8:	b002      	add	sp, #8
    d9ea:	bd10      	pop	{r4, pc}
				err = do_socket_open(type);
    d9ec:	f89d 0006 	ldrb.w	r0, [sp, #6]
    d9f0:	f7ff ff64 	bl	d8bc <do_socket_open>
				err = do_socket_close(0);
    d9f4:	4604      	mov	r4, r0
    d9f6:	e7f6      	b.n	d9e6 <handle_at_socket+0x7e>
		} else if (op == 0) {
    d9f8:	2800      	cmp	r0, #0
    d9fa:	d1f4      	bne.n	d9e6 <handle_at_socket+0x7e>
			if (client.sock < 0) {
    d9fc:	4b17      	ldr	r3, [pc, #92]	; (da5c <handle_at_socket+0xf4>)
    d9fe:	681b      	ldr	r3, [r3, #0]
    da00:	2b00      	cmp	r3, #0
    da02:	da0e      	bge.n	da22 <handle_at_socket+0xba>
				LOG_WRN("Socket is not opened yet");
    da04:	2302      	movs	r3, #2
    da06:	f04f 0100 	mov.w	r1, #0
    da0a:	4a15      	ldr	r2, [pc, #84]	; (da60 <handle_at_socket+0xf8>)
    da0c:	f363 0102 	bfi	r1, r3, #0, #3
    da10:	4b14      	ldr	r3, [pc, #80]	; (da64 <handle_at_socket+0xfc>)
    da12:	f360 01c5 	bfi	r1, r0, #3, #3
    da16:	1a9b      	subs	r3, r3, r2
    da18:	08db      	lsrs	r3, r3, #3
    da1a:	f363 118f 	bfi	r1, r3, #6, #10
    da1e:	4813      	ldr	r0, [pc, #76]	; (da6c <handle_at_socket+0x104>)
    da20:	e7df      	b.n	d9e2 <handle_at_socket+0x7a>
				err = do_socket_close(0);
    da22:	f7ff ff09 	bl	d838 <do_socket_close>
    da26:	e7e5      	b.n	d9f4 <handle_at_socket+0x8c>
	} else if (*(at_param) == '?') {
    da28:	2b3f      	cmp	r3, #63	; 0x3f
    da2a:	d112      	bne.n	da52 <handle_at_socket+0xea>
		if (client.sock != INVALID_SOCKET) {
    da2c:	4c0b      	ldr	r4, [pc, #44]	; (da5c <handle_at_socket+0xf4>)
    da2e:	6822      	ldr	r2, [r4, #0]
    da30:	1c53      	adds	r3, r2, #1
    da32:	d009      	beq.n	da48 <handle_at_socket+0xe0>
			sprintf(buf, "#XSOCKET: %d, %d\r\n", client.sock,
    da34:	7923      	ldrb	r3, [r4, #4]
    da36:	490e      	ldr	r1, [pc, #56]	; (da70 <handle_at_socket+0x108>)
    da38:	480e      	ldr	r0, [pc, #56]	; (da74 <handle_at_socket+0x10c>)
    da3a:	f003 fe49 	bl	116d0 <sprintf>
		client.callback(buf);
    da3e:	68a3      	ldr	r3, [r4, #8]
    da40:	480c      	ldr	r0, [pc, #48]	; (da74 <handle_at_socket+0x10c>)
    da42:	4798      	blx	r3
		err = 0;
    da44:	2400      	movs	r4, #0
    da46:	e7ce      	b.n	d9e6 <handle_at_socket+0x7e>
			sprintf(buf, "#XSOCKET: 0\r\n");
    da48:	490b      	ldr	r1, [pc, #44]	; (da78 <handle_at_socket+0x110>)
    da4a:	480a      	ldr	r0, [pc, #40]	; (da74 <handle_at_socket+0x10c>)
    da4c:	f003 fe40 	bl	116d0 <sprintf>
    da50:	e7f5      	b.n	da3e <handle_at_socket+0xd6>
			return err;
    da52:	f06f 0415 	mvn.w	r4, #21
    da56:	e7c6      	b.n	d9e6 <handle_at_socket+0x7e>
    da58:	200200e0 	.word	0x200200e0
    da5c:	20020100 	.word	0x20020100
    da60:	00026560 	.word	0x00026560
    da64:	000265d0 	.word	0x000265d0
    da68:	00027d19 	.word	0x00027d19
    da6c:	00027d32 	.word	0x00027d32
    da70:	00027c58 	.word	0x00027c58
    da74:	2002733c 	.word	0x2002733c
    da78:	00027d4b 	.word	0x00027d4b

0000da7c <parse_host_by_name>:
{
    da7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da80:	4614      	mov	r4, r2
    da82:	4680      	mov	r8, r0
	struct addrinfo hints = {
    da84:	2501      	movs	r5, #1
{
    da86:	b08e      	sub	sp, #56	; 0x38
			      struct addrinfo **res)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);

	return socket_ops->getaddrinfo(node, service, hints, res);
    da88:	4f25      	ldr	r7, [pc, #148]	; (db20 <parse_host_by_name+0xa4>)
	struct addrinfo hints = {
    da8a:	2220      	movs	r2, #32
{
    da8c:	460e      	mov	r6, r1
	struct addrinfo hints = {
    da8e:	a806      	add	r0, sp, #24
    da90:	2100      	movs	r1, #0
    da92:	f016 ff42 	bl	2491a <memset>
    da96:	683b      	ldr	r3, [r7, #0]
    da98:	e9cd 5407 	strd	r5, r4, [sp, #28]
    da9c:	aa06      	add	r2, sp, #24
    da9e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    daa0:	2100      	movs	r1, #0
    daa2:	ab01      	add	r3, sp, #4
    daa4:	4640      	mov	r0, r8
    daa6:	47a0      	blx	r4
	if (err) {
    daa8:	4604      	mov	r4, r0
    daaa:	b198      	cbz	r0, dad4 <parse_host_by_name+0x58>
		LOG_ERR("ERROR: getaddrinfo failed %d", err);
    daac:	f04f 0200 	mov.w	r2, #0
    dab0:	491c      	ldr	r1, [pc, #112]	; (db24 <parse_host_by_name+0xa8>)
    dab2:	4b1d      	ldr	r3, [pc, #116]	; (db28 <parse_host_by_name+0xac>)
    dab4:	f365 0202 	bfi	r2, r5, #0, #3
    dab8:	1a5b      	subs	r3, r3, r1
    daba:	f36f 02c5 	bfc	r2, #3, #3
    dabe:	08db      	lsrs	r3, r3, #3
    dac0:	4601      	mov	r1, r0
    dac2:	f363 128f 	bfi	r2, r3, #6, #10
    dac6:	4819      	ldr	r0, [pc, #100]	; (db2c <parse_host_by_name+0xb0>)
    dac8:	f016 f9c2 	bl	23e50 <log_1>
}
    dacc:	4620      	mov	r0, r4
    dace:	b00e      	add	sp, #56	; 0x38
    dad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (result == NULL) {
    dad4:	9b01      	ldr	r3, [sp, #4]
    dad6:	b98b      	cbnz	r3, dafc <parse_host_by_name+0x80>
		LOG_ERR("ERROR: Address not found\n");
    dad8:	f04f 0100 	mov.w	r1, #0
    dadc:	4a11      	ldr	r2, [pc, #68]	; (db24 <parse_host_by_name+0xa8>)
    dade:	4b12      	ldr	r3, [pc, #72]	; (db28 <parse_host_by_name+0xac>)
    dae0:	f365 0102 	bfi	r1, r5, #0, #3
    dae4:	1a9b      	subs	r3, r3, r2
    dae6:	f360 01c5 	bfi	r1, r0, #3, #3
    daea:	08db      	lsrs	r3, r3, #3
    daec:	f363 118f 	bfi	r1, r3, #6, #10
    daf0:	480f      	ldr	r0, [pc, #60]	; (db30 <parse_host_by_name+0xb4>)
    daf2:	f016 f9a0 	bl	23e36 <log_0>
		return -ENOENT;
    daf6:	f06f 0401 	mvn.w	r4, #1
    dafa:	e7e7      	b.n	dacc <parse_host_by_name+0x50>
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
    dafc:	695b      	ldr	r3, [r3, #20]
	server4->sin_addr.s_addr =
    dafe:	490d      	ldr	r1, [pc, #52]	; (db34 <parse_host_by_name+0xb8>)
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
    db00:	685b      	ldr	r3, [r3, #4]
	server4->sin_port = htons(port);
    db02:	ba76      	rev16	r6, r6
	server4->sin_addr.s_addr =
    db04:	604b      	str	r3, [r1, #4]
	server4->sin_family = AF_INET;
    db06:	800d      	strh	r5, [r1, #0]
	server4->sin_port = htons(port);
    db08:	804e      	strh	r6, [r1, #2]
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
    db0a:	2310      	movs	r3, #16
    db0c:	aa02      	add	r2, sp, #8
    db0e:	3104      	adds	r1, #4
    db10:	4628      	mov	r0, r5
    db12:	f003 fe27 	bl	11764 <z_impl_net_addr_ntop>
static inline void freeaddrinfo(struct addrinfo *res)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);

	return socket_ops->freeaddrinfo(res);
    db16:	683b      	ldr	r3, [r7, #0]
    db18:	9801      	ldr	r0, [sp, #4]
    db1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    db1c:	4798      	blx	r3
    db1e:	e7d5      	b.n	dacc <parse_host_by_name+0x50>
    db20:	20020314 	.word	0x20020314
    db24:	00026560 	.word	0x00026560
    db28:	000265d0 	.word	0x000265d0
    db2c:	00027eb1 	.word	0x00027eb1
    db30:	00027ece 	.word	0x00027ece
    db34:	20025e00 	.word	0x20025e00

0000db38 <send.constprop.10>:
	return socket_ops->send(sock, buf, len, flags);
    db38:	4b04      	ldr	r3, [pc, #16]	; (db4c <send.constprop.10+0x14>)
static inline ssize_t send(int sock, const void *buf, size_t len,
    db3a:	b410      	push	{r4}
	return socket_ops->send(sock, buf, len, flags);
    db3c:	681b      	ldr	r3, [r3, #0]
    db3e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    db40:	2300      	movs	r3, #0
    db42:	46a4      	mov	ip, r4
}
    db44:	f85d 4b04 	ldr.w	r4, [sp], #4
	return socket_ops->send(sock, buf, len, flags);
    db48:	4760      	bx	ip
    db4a:	bf00      	nop
    db4c:	20020314 	.word	0x20020314

0000db50 <handle_at_tcp_send>:
static int handle_at_tcp_send(const char *at_cmd, size_t param_offset)
{
	int err = -EINVAL;
	char *at_param = (char *)at_cmd + param_offset;
	char data[NET_IPV4_MTU];
	int size = NET_IPV4_MTU;
    db50:	f44f 7210 	mov.w	r2, #576	; 0x240
{
    db54:	b5f0      	push	{r4, r5, r6, r7, lr}

	if (!client.connected) {
    db56:	4d36      	ldr	r5, [pc, #216]	; (dc30 <handle_at_tcp_send+0xe0>)
{
    db58:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
	int size = NET_IPV4_MTU;
    db5c:	9201      	str	r2, [sp, #4]
	if (!client.connected) {
    db5e:	796a      	ldrb	r2, [r5, #5]
	char *at_param = (char *)at_cmd + param_offset;
    db60:	1844      	adds	r4, r0, r1
	if (!client.connected) {
    db62:	b9a2      	cbnz	r2, db8e <handle_at_tcp_send+0x3e>
		LOG_ERR("TCP not connected yet");
    db64:	2301      	movs	r3, #1
    db66:	f04f 0100 	mov.w	r1, #0
    db6a:	f363 0102 	bfi	r1, r3, #0, #3
    db6e:	f362 01c5 	bfi	r1, r2, #3, #3
    db72:	4b30      	ldr	r3, [pc, #192]	; (dc34 <handle_at_tcp_send+0xe4>)
    db74:	4a30      	ldr	r2, [pc, #192]	; (dc38 <handle_at_tcp_send+0xe8>)
    db76:	4831      	ldr	r0, [pc, #196]	; (dc3c <handle_at_tcp_send+0xec>)
    db78:	1a9b      	subs	r3, r3, r2
    db7a:	08db      	lsrs	r3, r3, #3
    db7c:	f363 118f 	bfi	r1, r3, #6, #10
    db80:	f016 f959 	bl	23e36 <log_0>
	int err = -EINVAL;
    db84:	f06f 0015 	mvn.w	r0, #21
		data[size] = '\0';
		err = do_tcp_send(data);
	}

	return err;
}
    db88:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
    db8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (*(at_param) == '=') {
    db8e:	5c43      	ldrb	r3, [r0, r1]
    db90:	2b3d      	cmp	r3, #61	; 0x3d
    db92:	d1f7      	bne.n	db84 <handle_at_tcp_send+0x34>
		if (*(at_param) == '?') {
    db94:	7863      	ldrb	r3, [r4, #1]
    db96:	2b3f      	cmp	r3, #63	; 0x3f
    db98:	d0f4      	beq.n	db84 <handle_at_tcp_send+0x34>
		err = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    db9a:	4a29      	ldr	r2, [pc, #164]	; (dc40 <handle_at_tcp_send+0xf0>)
    db9c:	2100      	movs	r1, #0
    db9e:	f017 fe2d 	bl	257fc <at_parser_params_from_str>
		if (err < 0) {
    dba2:	2800      	cmp	r0, #0
    dba4:	dbf0      	blt.n	db88 <handle_at_tcp_send+0x38>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    dba6:	4826      	ldr	r0, [pc, #152]	; (dc40 <handle_at_tcp_send+0xf0>)
    dba8:	f017 ff2e 	bl	25a08 <at_params_valid_count_get>
    dbac:	2801      	cmp	r0, #1
    dbae:	d9e9      	bls.n	db84 <handle_at_tcp_send+0x34>
		err = at_params_string_get(&m_param_list, 1, data, &size);
    dbb0:	ae02      	add	r6, sp, #8
    dbb2:	ab01      	add	r3, sp, #4
    dbb4:	4632      	mov	r2, r6
    dbb6:	2101      	movs	r1, #1
    dbb8:	4821      	ldr	r0, [pc, #132]	; (dc40 <handle_at_tcp_send+0xf0>)
    dbba:	f017 ff02 	bl	259c2 <at_params_string_get>
		if (err < 0) {
    dbbe:	2800      	cmp	r0, #0
    dbc0:	dbe2      	blt.n	db88 <handle_at_tcp_send+0x38>
		data[size] = '\0';
    dbc2:	2400      	movs	r4, #0
    dbc4:	9b01      	ldr	r3, [sp, #4]
	u32_t datalen = strlen(data);
    dbc6:	4630      	mov	r0, r6
		data[size] = '\0';
    dbc8:	54f4      	strb	r4, [r6, r3]
	u32_t datalen = strlen(data);
    dbca:	f016 fe45 	bl	24858 <strlen>
    dbce:	4607      	mov	r7, r0
	while (offset < datalen) {
    dbd0:	42a7      	cmp	r7, r4
    dbd2:	d921      	bls.n	dc18 <handle_at_tcp_send+0xc8>
		ret = send(client.sock, data + offset,
    dbd4:	1b3a      	subs	r2, r7, r4
    dbd6:	1931      	adds	r1, r6, r4
    dbd8:	6828      	ldr	r0, [r5, #0]
    dbda:	f7ff ffad 	bl	db38 <send.constprop.10>
		if (ret < 0) {
    dbde:	2800      	cmp	r0, #0
    dbe0:	da24      	bge.n	dc2c <handle_at_tcp_send+0xdc>
    dbe2:	f014 f84f 	bl	21c84 <z_impl_z_errno>
			do_socket_close(-errno);
    dbe6:	6800      	ldr	r0, [r0, #0]
			LOG_WRN("send() failed: %d", -errno);
    dbe8:	f04f 0600 	mov.w	r6, #0
			do_socket_close(-errno);
    dbec:	4240      	negs	r0, r0
    dbee:	f7ff fe23 	bl	d838 <do_socket_close>
			LOG_WRN("send() failed: %d", -errno);
    dbf2:	2302      	movs	r3, #2
    dbf4:	4a10      	ldr	r2, [pc, #64]	; (dc38 <handle_at_tcp_send+0xe8>)
    dbf6:	f363 0602 	bfi	r6, r3, #0, #3
    dbfa:	4b0e      	ldr	r3, [pc, #56]	; (dc34 <handle_at_tcp_send+0xe4>)
    dbfc:	f36f 06c5 	bfc	r6, #3, #3
    dc00:	1a9b      	subs	r3, r3, r2
    dc02:	08db      	lsrs	r3, r3, #3
    dc04:	f363 168f 	bfi	r6, r3, #6, #10
    dc08:	f014 f83c 	bl	21c84 <z_impl_z_errno>
    dc0c:	6801      	ldr	r1, [r0, #0]
    dc0e:	4632      	mov	r2, r6
    dc10:	4249      	negs	r1, r1
    dc12:	480c      	ldr	r0, [pc, #48]	; (dc44 <handle_at_tcp_send+0xf4>)
    dc14:	f016 f91c 	bl	23e50 <log_1>
	sprintf(buf, "#XTCPSEND: %d\r\n", offset);
    dc18:	4622      	mov	r2, r4
    dc1a:	490b      	ldr	r1, [pc, #44]	; (dc48 <handle_at_tcp_send+0xf8>)
    dc1c:	480b      	ldr	r0, [pc, #44]	; (dc4c <handle_at_tcp_send+0xfc>)
    dc1e:	f003 fd57 	bl	116d0 <sprintf>
	client.callback(buf);
    dc22:	480a      	ldr	r0, [pc, #40]	; (dc4c <handle_at_tcp_send+0xfc>)
    dc24:	68ab      	ldr	r3, [r5, #8]
    dc26:	4798      	blx	r3
		err = do_tcp_send(data);
    dc28:	2000      	movs	r0, #0
    dc2a:	e7ad      	b.n	db88 <handle_at_tcp_send+0x38>
		offset += ret;
    dc2c:	4404      	add	r4, r0
    dc2e:	e7cf      	b.n	dbd0 <handle_at_tcp_send+0x80>
    dc30:	20020100 	.word	0x20020100
    dc34:	000265d0 	.word	0x000265d0
    dc38:	00026560 	.word	0x00026560
    dc3c:	00027d9b 	.word	0x00027d9b
    dc40:	200200e0 	.word	0x200200e0
    dc44:	00027db1 	.word	0x00027db1
    dc48:	00027dc3 	.word	0x00027dc3
    dc4c:	2002733c 	.word	0x2002733c

0000dc50 <handle_at_bind>:
{
    dc50:	b570      	push	{r4, r5, r6, lr}
	int size = TCPIP_MAX_URL;
    dc52:	2480      	movs	r4, #128	; 0x80
	if (*(at_param) == '=') {
    dc54:	5c43      	ldrb	r3, [r0, r1]
{
    dc56:	b0a4      	sub	sp, #144	; 0x90
	if (*(at_param) == '=') {
    dc58:	2b3d      	cmp	r3, #61	; 0x3d
	char *at_param = (char *)at_cmd + param_offset;
    dc5a:	eb00 0201 	add.w	r2, r0, r1
	int size = TCPIP_MAX_URL;
    dc5e:	9401      	str	r4, [sp, #4]
	if (*(at_param) == '=') {
    dc60:	d004      	beq.n	dc6c <handle_at_bind+0x1c>
		return -EINVAL;
    dc62:	f06f 0415 	mvn.w	r4, #21
}
    dc66:	4620      	mov	r0, r4
    dc68:	b024      	add	sp, #144	; 0x90
    dc6a:	bd70      	pop	{r4, r5, r6, pc}
		if (*(at_param) == '?') {
    dc6c:	7853      	ldrb	r3, [r2, #1]
    dc6e:	2b3f      	cmp	r3, #63	; 0x3f
    dc70:	d0f7      	beq.n	dc62 <handle_at_bind+0x12>
		err = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    dc72:	4a44      	ldr	r2, [pc, #272]	; (dd84 <handle_at_bind+0x134>)
    dc74:	2100      	movs	r1, #0
    dc76:	f017 fdc1 	bl	257fc <at_parser_params_from_str>
		if (err < 0) {
    dc7a:	1e04      	subs	r4, r0, #0
    dc7c:	dbf3      	blt.n	dc66 <handle_at_bind+0x16>
		if (at_params_valid_count_get(&m_param_list) < 3) {
    dc7e:	4841      	ldr	r0, [pc, #260]	; (dd84 <handle_at_bind+0x134>)
    dc80:	f017 fec2 	bl	25a08 <at_params_valid_count_get>
    dc84:	2802      	cmp	r0, #2
    dc86:	d9ec      	bls.n	dc62 <handle_at_bind+0x12>
		err = at_params_string_get(&m_param_list, 1, ip, &size);
    dc88:	ab01      	add	r3, sp, #4
    dc8a:	aa04      	add	r2, sp, #16
    dc8c:	2101      	movs	r1, #1
    dc8e:	483d      	ldr	r0, [pc, #244]	; (dd84 <handle_at_bind+0x134>)
    dc90:	f017 fe97 	bl	259c2 <at_params_string_get>
		if (err < 0) {
    dc94:	1e04      	subs	r4, r0, #0
    dc96:	dbe6      	blt.n	dc66 <handle_at_bind+0x16>
		ip[size] = '\0';
    dc98:	2600      	movs	r6, #0
    dc9a:	9b01      	ldr	r3, [sp, #4]
    dc9c:	aa24      	add	r2, sp, #144	; 0x90
    dc9e:	4413      	add	r3, r2
		err = at_params_short_get(&m_param_list, 2, &port);
    dca0:	2102      	movs	r1, #2
    dca2:	f10d 0202 	add.w	r2, sp, #2
    dca6:	4837      	ldr	r0, [pc, #220]	; (dd84 <handle_at_bind+0x134>)
		ip[size] = '\0';
    dca8:	f803 6c80 	strb.w	r6, [r3, #-128]
		err = at_params_short_get(&m_param_list, 2, &port);
    dcac:	f017 fe77 	bl	2599e <at_params_short_get>
		if (err < 0) {
    dcb0:	1e04      	subs	r4, r0, #0
    dcb2:	dbd8      	blt.n	dc66 <handle_at_bind+0x16>
	if (!check_for_ipv4(ip, strlen(ip))) {
    dcb4:	a804      	add	r0, sp, #16
		err = do_bind(ip, port);
    dcb6:	f8bd 4002 	ldrh.w	r4, [sp, #2]
	if (!check_for_ipv4(ip, strlen(ip))) {
    dcba:	f016 fdcd 	bl	24858 <strlen>
    dcbe:	b2c1      	uxtb	r1, r0
    dcc0:	a804      	add	r0, sp, #16
    dcc2:	f015 fd0a 	bl	236da <check_for_ipv4>
    dcc6:	2501      	movs	r5, #1
    dcc8:	b978      	cbnz	r0, dcea <handle_at_bind+0x9a>
		LOG_ERR("Not IPv4 address");
    dcca:	f04f 0100 	mov.w	r1, #0
    dcce:	4a2e      	ldr	r2, [pc, #184]	; (dd88 <handle_at_bind+0x138>)
    dcd0:	4b2e      	ldr	r3, [pc, #184]	; (dd8c <handle_at_bind+0x13c>)
    dcd2:	f365 0102 	bfi	r1, r5, #0, #3
    dcd6:	1a9b      	subs	r3, r3, r2
    dcd8:	f360 01c5 	bfi	r1, r0, #3, #3
    dcdc:	08db      	lsrs	r3, r3, #3
    dcde:	f363 118f 	bfi	r1, r3, #6, #10
    dce2:	482b      	ldr	r0, [pc, #172]	; (dd90 <handle_at_bind+0x140>)
    dce4:	f016 f8a7 	bl	23e36 <log_0>
    dce8:	e7bb      	b.n	dc62 <handle_at_bind+0x12>
	local.sin_port = htons(port);
    dcea:	0223      	lsls	r3, r4, #8
    dcec:	ea43 2314 	orr.w	r3, r3, r4, lsr #8
	local.sin_family = AF_INET;
    dcf0:	f8ad 5008 	strh.w	r5, [sp, #8]
	local.sin_port = htons(port);
    dcf4:	f8ad 300a 	strh.w	r3, [sp, #10]
	return z_impl_net_addr_pton(family, src, dst);
    dcf8:	aa03      	add	r2, sp, #12
    dcfa:	a904      	add	r1, sp, #16
    dcfc:	4628      	mov	r0, r5
    dcfe:	f016 ff1c 	bl	24b3a <z_impl_net_addr_pton>
	if ((family != AF_INET) && (family != AF_INET6)) {
		errno = EAFNOSUPPORT;
		return -1;
	}

	if (net_addr_pton(family, src, dst) == 0) {
    dd02:	4604      	mov	r4, r0
    dd04:	b1a0      	cbz	r0, dd30 <handle_at_bind+0xe0>
		LOG_ERR("Parse failed: %d", -errno);
    dd06:	f04f 0400 	mov.w	r4, #0
    dd0a:	4a1f      	ldr	r2, [pc, #124]	; (dd88 <handle_at_bind+0x138>)
    dd0c:	4b1f      	ldr	r3, [pc, #124]	; (dd8c <handle_at_bind+0x13c>)
    dd0e:	f365 0402 	bfi	r4, r5, #0, #3
    dd12:	1a9b      	subs	r3, r3, r2
    dd14:	f366 04c5 	bfi	r4, r6, #3, #3
    dd18:	08db      	lsrs	r3, r3, #3
    dd1a:	f363 148f 	bfi	r4, r3, #6, #10
    dd1e:	f013 ffb1 	bl	21c84 <z_impl_z_errno>
    dd22:	6801      	ldr	r1, [r0, #0]
    dd24:	4622      	mov	r2, r4
    dd26:	4249      	negs	r1, r1
    dd28:	481a      	ldr	r0, [pc, #104]	; (dd94 <handle_at_bind+0x144>)
    dd2a:	f016 f891 	bl	23e50 <log_1>
    dd2e:	e798      	b.n	dc62 <handle_at_bind+0x12>
	return socket_ops->bind(sock, addr, addrlen);
    dd30:	2208      	movs	r2, #8
    dd32:	4b19      	ldr	r3, [pc, #100]	; (dd98 <handle_at_bind+0x148>)
    dd34:	4819      	ldr	r0, [pc, #100]	; (dd9c <handle_at_bind+0x14c>)
    dd36:	681b      	ldr	r3, [r3, #0]
    dd38:	eb0d 0102 	add.w	r1, sp, r2
    dd3c:	68db      	ldr	r3, [r3, #12]
    dd3e:	6800      	ldr	r0, [r0, #0]
    dd40:	4798      	blx	r3
	if (ret < 0) {
    dd42:	2800      	cmp	r0, #0
    dd44:	da8f      	bge.n	dc66 <handle_at_bind+0x16>
		LOG_ERR("bind() failed: %d", -errno);
    dd46:	f04f 0600 	mov.w	r6, #0
    dd4a:	4a0f      	ldr	r2, [pc, #60]	; (dd88 <handle_at_bind+0x138>)
    dd4c:	4b0f      	ldr	r3, [pc, #60]	; (dd8c <handle_at_bind+0x13c>)
    dd4e:	f365 0602 	bfi	r6, r5, #0, #3
    dd52:	1a9b      	subs	r3, r3, r2
    dd54:	f364 06c5 	bfi	r6, r4, #3, #3
    dd58:	08db      	lsrs	r3, r3, #3
    dd5a:	f363 168f 	bfi	r6, r3, #6, #10
    dd5e:	f013 ff91 	bl	21c84 <z_impl_z_errno>
    dd62:	6801      	ldr	r1, [r0, #0]
    dd64:	4632      	mov	r2, r6
    dd66:	4249      	negs	r1, r1
    dd68:	480d      	ldr	r0, [pc, #52]	; (dda0 <handle_at_bind+0x150>)
    dd6a:	f016 f871 	bl	23e50 <log_1>
    dd6e:	f013 ff89 	bl	21c84 <z_impl_z_errno>
		do_socket_close(-errno);
    dd72:	6800      	ldr	r0, [r0, #0]
    dd74:	4240      	negs	r0, r0
    dd76:	f7ff fd5f 	bl	d838 <do_socket_close>
    dd7a:	f013 ff83 	bl	21c84 <z_impl_z_errno>
		return -errno;
    dd7e:	6804      	ldr	r4, [r0, #0]
    dd80:	4264      	negs	r4, r4
    dd82:	e770      	b.n	dc66 <handle_at_bind+0x16>
    dd84:	200200e0 	.word	0x200200e0
    dd88:	00026560 	.word	0x00026560
    dd8c:	000265d0 	.word	0x000265d0
    dd90:	00027ce5 	.word	0x00027ce5
    dd94:	00027cf6 	.word	0x00027cf6
    dd98:	20020314 	.word	0x20020314
    dd9c:	20020100 	.word	0x20020100
    dda0:	00027d07 	.word	0x00027d07

0000dda4 <recv.constprop.15>:
	return socket_ops->recv(sock, buf, max_len, flags);
    dda4:	4b04      	ldr	r3, [pc, #16]	; (ddb8 <recv.constprop.15+0x14>)
static inline ssize_t recv(int sock, void *buf, size_t max_len,
    dda6:	b410      	push	{r4}
	return socket_ops->recv(sock, buf, max_len, flags);
    dda8:	681b      	ldr	r3, [r3, #0]
    ddaa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    ddac:	2300      	movs	r3, #0
    ddae:	46a4      	mov	ip, r4
}
    ddb0:	f85d 4b04 	ldr.w	r4, [sp], #4
	return socket_ops->recv(sock, buf, max_len, flags);
    ddb4:	4760      	bx	ip
    ddb6:	bf00      	nop
    ddb8:	20020314 	.word	0x20020314

0000ddbc <do_tcp_receive>:
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
    ddbc:	2208      	movs	r2, #8
{
    ddbe:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct timeval tmo = {
    ddc0:	2600      	movs	r6, #0
    ddc2:	4b44      	ldr	r3, [pc, #272]	; (ded4 <do_tcp_receive+0x118>)
{
    ddc4:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
    ddc8:	681b      	ldr	r3, [r3, #0]
	ret = setsockopt(client.sock, SOL_SOCKET, SO_RCVTIMEO,
    ddca:	4d43      	ldr	r5, [pc, #268]	; (ded8 <do_tcp_receive+0x11c>)
    ddcc:	9200      	str	r2, [sp, #0]
    ddce:	69dc      	ldr	r4, [r3, #28]
	struct timeval tmo = {
    ddd0:	e9cd 1602 	strd	r1, r6, [sp, #8]
    ddd4:	eb0d 0302 	add.w	r3, sp, r2
{
    ddd8:	4607      	mov	r7, r0
    ddda:	2214      	movs	r2, #20
    dddc:	2101      	movs	r1, #1
    ddde:	6828      	ldr	r0, [r5, #0]
    dde0:	47a0      	blx	r4
	if (ret < 0) {
    dde2:	1e04      	subs	r4, r0, #0
    dde4:	da1e      	bge.n	de24 <do_tcp_receive+0x68>
    dde6:	f013 ff4d 	bl	21c84 <z_impl_z_errno>
		do_socket_close(-errno);
    ddea:	6800      	ldr	r0, [r0, #0]
		LOG_ERR("setsockopt() error: %d", -errno);
    ddec:	f04f 0500 	mov.w	r5, #0
		do_socket_close(-errno);
    ddf0:	4240      	negs	r0, r0
    ddf2:	f7ff fd21 	bl	d838 <do_socket_close>
		LOG_ERR("setsockopt() error: %d", -errno);
    ddf6:	2301      	movs	r3, #1
    ddf8:	4a38      	ldr	r2, [pc, #224]	; (dedc <do_tcp_receive+0x120>)
    ddfa:	f363 0502 	bfi	r5, r3, #0, #3
    ddfe:	4b38      	ldr	r3, [pc, #224]	; (dee0 <do_tcp_receive+0x124>)
    de00:	f366 05c5 	bfi	r5, r6, #3, #3
    de04:	1a9b      	subs	r3, r3, r2
    de06:	08db      	lsrs	r3, r3, #3
    de08:	f363 158f 	bfi	r5, r3, #6, #10
    de0c:	f013 ff3a 	bl	21c84 <z_impl_z_errno>
    de10:	6801      	ldr	r1, [r0, #0]
    de12:	462a      	mov	r2, r5
    de14:	4249      	negs	r1, r1
    de16:	4833      	ldr	r0, [pc, #204]	; (dee4 <do_tcp_receive+0x128>)
    de18:	f016 f81a 	bl	23e50 <log_1>
}
    de1c:	4620      	mov	r0, r4
    de1e:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    de22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (length > NET_IPV4_MTU) {
    de24:	f5b7 7f10 	cmp.w	r7, #576	; 0x240
    de28:	ae04      	add	r6, sp, #16
		ret = recv(client.sock, data, NET_IPV4_MTU, 0);
    de2a:	bf8c      	ite	hi
    de2c:	f44f 7210 	movhi.w	r2, #576	; 0x240
		ret = recv(client.sock, data, length, 0);
    de30:	463a      	movls	r2, r7
    de32:	6828      	ldr	r0, [r5, #0]
    de34:	4631      	mov	r1, r6
    de36:	f7ff ffb5 	bl	dda4 <recv.constprop.15>
	if (ret < 0) {
    de3a:	2800      	cmp	r0, #0
		ret = recv(client.sock, data, length, 0);
    de3c:	4604      	mov	r4, r0
	if (ret < 0) {
    de3e:	da1f      	bge.n	de80 <do_tcp_receive+0xc4>
		LOG_WRN("recv() error: %d", -errno);
    de40:	2302      	movs	r3, #2
    de42:	f04f 0400 	mov.w	r4, #0
    de46:	4a25      	ldr	r2, [pc, #148]	; (dedc <do_tcp_receive+0x120>)
    de48:	f363 0402 	bfi	r4, r3, #0, #3
    de4c:	4b24      	ldr	r3, [pc, #144]	; (dee0 <do_tcp_receive+0x124>)
    de4e:	f36f 04c5 	bfc	r4, #3, #3
    de52:	1a9b      	subs	r3, r3, r2
    de54:	08db      	lsrs	r3, r3, #3
    de56:	f363 148f 	bfi	r4, r3, #6, #10
    de5a:	f013 ff13 	bl	21c84 <z_impl_z_errno>
    de5e:	6801      	ldr	r1, [r0, #0]
    de60:	4622      	mov	r2, r4
    de62:	4249      	negs	r1, r1
    de64:	4820      	ldr	r0, [pc, #128]	; (dee8 <do_tcp_receive+0x12c>)
    de66:	f015 fff3 	bl	23e50 <log_1>
    de6a:	f013 ff0b 	bl	21c84 <z_impl_z_errno>
		do_socket_close(-errno);
    de6e:	6800      	ldr	r0, [r0, #0]
    de70:	4240      	negs	r0, r0
    de72:	f7ff fce1 	bl	d838 <do_socket_close>
    de76:	f013 ff05 	bl	21c84 <z_impl_z_errno>
		ret = -errno;
    de7a:	6804      	ldr	r4, [r0, #0]
    de7c:	4264      	negs	r4, r4
    de7e:	e7cd      	b.n	de1c <do_tcp_receive+0x60>
	} else if (ret == 0) {
    de80:	d113      	bne.n	deaa <do_tcp_receive+0xee>
		LOG_WRN("recv() return 0");
    de82:	2302      	movs	r3, #2
    de84:	f04f 0100 	mov.w	r1, #0
    de88:	4a14      	ldr	r2, [pc, #80]	; (dedc <do_tcp_receive+0x120>)
    de8a:	f363 0102 	bfi	r1, r3, #0, #3
    de8e:	4b14      	ldr	r3, [pc, #80]	; (dee0 <do_tcp_receive+0x124>)
    de90:	f360 01c5 	bfi	r1, r0, #3, #3
    de94:	1a9b      	subs	r3, r3, r2
    de96:	08db      	lsrs	r3, r3, #3
    de98:	f363 118f 	bfi	r1, r3, #6, #10
    de9c:	4813      	ldr	r0, [pc, #76]	; (deec <do_tcp_receive+0x130>)
    de9e:	f015 ffca 	bl	23e36 <log_0>
		do_socket_close(0);
    dea2:	4620      	mov	r0, r4
    dea4:	f7ff fcc8 	bl	d838 <do_socket_close>
    dea8:	e7b8      	b.n	de1c <do_tcp_receive+0x60>
		data[ret] = '\0';
    deaa:	2700      	movs	r7, #0
		client.callback("#XTCPRECV: ");
    deac:	68ab      	ldr	r3, [r5, #8]
		data[ret] = '\0';
    deae:	5437      	strb	r7, [r6, r0]
		client.callback("#XTCPRECV: ");
    deb0:	480f      	ldr	r0, [pc, #60]	; (def0 <do_tcp_receive+0x134>)
    deb2:	4798      	blx	r3
		client.callback(data);
    deb4:	68ab      	ldr	r3, [r5, #8]
    deb6:	4630      	mov	r0, r6
    deb8:	4798      	blx	r3
		client.callback("\r\n");
    deba:	68ab      	ldr	r3, [r5, #8]
    debc:	480d      	ldr	r0, [pc, #52]	; (def4 <do_tcp_receive+0x138>)
    debe:	4798      	blx	r3
		sprintf(buf, "#XTCPRECV: %d\r\n", ret);
    dec0:	4622      	mov	r2, r4
    dec2:	490d      	ldr	r1, [pc, #52]	; (def8 <do_tcp_receive+0x13c>)
    dec4:	480d      	ldr	r0, [pc, #52]	; (defc <do_tcp_receive+0x140>)
    dec6:	f003 fc03 	bl	116d0 <sprintf>
		client.callback(buf);
    deca:	68ab      	ldr	r3, [r5, #8]
    decc:	480b      	ldr	r0, [pc, #44]	; (defc <do_tcp_receive+0x140>)
    dece:	4798      	blx	r3
		ret = 0;
    ded0:	463c      	mov	r4, r7
    ded2:	e7a3      	b.n	de1c <do_tcp_receive+0x60>
    ded4:	20020314 	.word	0x20020314
    ded8:	20020100 	.word	0x20020100
    dedc:	00026560 	.word	0x00026560
    dee0:	000265d0 	.word	0x000265d0
    dee4:	00027c6b 	.word	0x00027c6b
    dee8:	00027c82 	.word	0x00027c82
    deec:	00027c93 	.word	0x00027c93
    def0:	00027ca3 	.word	0x00027ca3
    def4:	00027d98 	.word	0x00027d98
    def8:	00027caf 	.word	0x00027caf
    defc:	2002733c 	.word	0x2002733c

0000df00 <handle_at_tcp_recv>:
{
	int err = -EINVAL;
	char *at_param = (char *)at_cmd + param_offset;
	u16_t length, time;

	if (!client.connected) {
    df00:	4a1f      	ldr	r2, [pc, #124]	; (df80 <handle_at_tcp_recv+0x80>)
{
    df02:	b513      	push	{r0, r1, r4, lr}
	if (!client.connected) {
    df04:	7952      	ldrb	r2, [r2, #5]
	char *at_param = (char *)at_cmd + param_offset;
    df06:	1844      	adds	r4, r0, r1
	if (!client.connected) {
    df08:	b99a      	cbnz	r2, df32 <handle_at_tcp_recv+0x32>
		LOG_ERR("TCP not connected yet");
    df0a:	2301      	movs	r3, #1
    df0c:	f04f 0100 	mov.w	r1, #0
    df10:	f363 0102 	bfi	r1, r3, #0, #3
    df14:	f362 01c5 	bfi	r1, r2, #3, #3
    df18:	4b1a      	ldr	r3, [pc, #104]	; (df84 <handle_at_tcp_recv+0x84>)
    df1a:	4a1b      	ldr	r2, [pc, #108]	; (df88 <handle_at_tcp_recv+0x88>)
    df1c:	481b      	ldr	r0, [pc, #108]	; (df8c <handle_at_tcp_recv+0x8c>)
    df1e:	1a9b      	subs	r3, r3, r2
    df20:	08db      	lsrs	r3, r3, #3
    df22:	f363 118f 	bfi	r1, r3, #6, #10
    df26:	f015 ff86 	bl	23e36 <log_0>
	int err = -EINVAL;
    df2a:	f06f 0015 	mvn.w	r0, #21
		};
		err = do_tcp_receive(length, time);
	}

	return err;
}
    df2e:	b002      	add	sp, #8
    df30:	bd10      	pop	{r4, pc}
	if (*(at_param) == '=') {
    df32:	5c43      	ldrb	r3, [r0, r1]
    df34:	2b3d      	cmp	r3, #61	; 0x3d
    df36:	d1f8      	bne.n	df2a <handle_at_tcp_recv+0x2a>
		if (*(at_param) == '?') {
    df38:	7863      	ldrb	r3, [r4, #1]
    df3a:	2b3f      	cmp	r3, #63	; 0x3f
    df3c:	d0f5      	beq.n	df2a <handle_at_tcp_recv+0x2a>
		err = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    df3e:	4a14      	ldr	r2, [pc, #80]	; (df90 <handle_at_tcp_recv+0x90>)
    df40:	2100      	movs	r1, #0
    df42:	f017 fc5b 	bl	257fc <at_parser_params_from_str>
		if (err < 0) {
    df46:	2800      	cmp	r0, #0
    df48:	dbf1      	blt.n	df2e <handle_at_tcp_recv+0x2e>
		if (at_params_valid_count_get(&m_param_list) < 3) {
    df4a:	4811      	ldr	r0, [pc, #68]	; (df90 <handle_at_tcp_recv+0x90>)
    df4c:	f017 fd5c 	bl	25a08 <at_params_valid_count_get>
    df50:	2802      	cmp	r0, #2
    df52:	d9ea      	bls.n	df2a <handle_at_tcp_recv+0x2a>
		err = at_params_short_get(&m_param_list, 1, &length);
    df54:	aa01      	add	r2, sp, #4
    df56:	2101      	movs	r1, #1
    df58:	480d      	ldr	r0, [pc, #52]	; (df90 <handle_at_tcp_recv+0x90>)
    df5a:	f017 fd20 	bl	2599e <at_params_short_get>
		if (err < 0) {
    df5e:	2800      	cmp	r0, #0
    df60:	dbe5      	blt.n	df2e <handle_at_tcp_recv+0x2e>
		err = at_params_short_get(&m_param_list, 2, &time);
    df62:	f10d 0206 	add.w	r2, sp, #6
    df66:	2102      	movs	r1, #2
    df68:	4809      	ldr	r0, [pc, #36]	; (df90 <handle_at_tcp_recv+0x90>)
    df6a:	f017 fd18 	bl	2599e <at_params_short_get>
		if (err < 0) {
    df6e:	2800      	cmp	r0, #0
    df70:	dbdd      	blt.n	df2e <handle_at_tcp_recv+0x2e>
		err = do_tcp_receive(length, time);
    df72:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    df76:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    df7a:	f7ff ff1f 	bl	ddbc <do_tcp_receive>
    df7e:	e7d6      	b.n	df2e <handle_at_tcp_recv+0x2e>
    df80:	20020100 	.word	0x20020100
    df84:	000265d0 	.word	0x000265d0
    df88:	00026560 	.word	0x00026560
    df8c:	00027d9b 	.word	0x00027d9b
    df90:	200200e0 	.word	0x200200e0

0000df94 <parse_host_by_ipv4>:
{
    df94:	b508      	push	{r3, lr}
	address4->sin_family = AF_INET;
    df96:	2301      	movs	r3, #1
    df98:	4a06      	ldr	r2, [pc, #24]	; (dfb4 <parse_host_by_ipv4+0x20>)
	address4->sin_port = htons(port);
    df9a:	ba49      	rev16	r1, r1
	address4->sin_family = AF_INET;
    df9c:	8013      	strh	r3, [r2, #0]
	address4->sin_port = htons(port);
    df9e:	8051      	strh	r1, [r2, #2]
    dfa0:	4601      	mov	r1, r0
    dfa2:	3204      	adds	r2, #4
    dfa4:	4618      	mov	r0, r3
    dfa6:	f016 fdc8 	bl	24b3a <z_impl_net_addr_pton>
    dfaa:	2800      	cmp	r0, #0
}
    dfac:	bf18      	it	ne
    dfae:	f06f 0015 	mvnne.w	r0, #21
    dfb2:	bd08      	pop	{r3, pc}
    dfb4:	20025e00 	.word	0x20025e00

0000dfb8 <do_udp_init>:
{
    dfb8:	b538      	push	{r3, r4, r5, lr}
    dfba:	4604      	mov	r4, r0
    dfbc:	460d      	mov	r5, r1
	if (check_for_ipv4(url, strlen(url))) {
    dfbe:	f016 fc4b 	bl	24858 <strlen>
    dfc2:	b2c1      	uxtb	r1, r0
    dfc4:	4620      	mov	r0, r4
    dfc6:	f015 fb88 	bl	236da <check_for_ipv4>
    dfca:	b1c0      	cbz	r0, dffe <do_udp_init+0x46>
		ret = parse_host_by_ipv4(url, port);
    dfcc:	4629      	mov	r1, r5
    dfce:	4620      	mov	r0, r4
    dfd0:	f7ff ffe0 	bl	df94 <parse_host_by_ipv4>
		ret = parse_host_by_name(url, port, SOCK_DGRAM);
    dfd4:	4604      	mov	r4, r0
	if (ret) {
    dfd6:	b180      	cbz	r0, dffa <do_udp_init+0x42>
		LOG_ERR("Parse failed: %d", ret);
    dfd8:	2301      	movs	r3, #1
    dfda:	f04f 0200 	mov.w	r2, #0
    dfde:	490b      	ldr	r1, [pc, #44]	; (e00c <do_udp_init+0x54>)
    dfe0:	f363 0202 	bfi	r2, r3, #0, #3
    dfe4:	4b0a      	ldr	r3, [pc, #40]	; (e010 <do_udp_init+0x58>)
    dfe6:	f36f 02c5 	bfc	r2, #3, #3
    dfea:	1a5b      	subs	r3, r3, r1
    dfec:	08db      	lsrs	r3, r3, #3
    dfee:	4601      	mov	r1, r0
    dff0:	f363 128f 	bfi	r2, r3, #6, #10
    dff4:	4807      	ldr	r0, [pc, #28]	; (e014 <do_udp_init+0x5c>)
    dff6:	f015 ff2b 	bl	23e50 <log_1>
}
    dffa:	4620      	mov	r0, r4
    dffc:	bd38      	pop	{r3, r4, r5, pc}
		ret = parse_host_by_name(url, port, SOCK_DGRAM);
    dffe:	2202      	movs	r2, #2
    e000:	4629      	mov	r1, r5
    e002:	4620      	mov	r0, r4
    e004:	f7ff fd3a 	bl	da7c <parse_host_by_name>
    e008:	e7e4      	b.n	dfd4 <do_udp_init+0x1c>
    e00a:	bf00      	nop
    e00c:	00026560 	.word	0x00026560
    e010:	000265d0 	.word	0x000265d0
    e014:	00027cf6 	.word	0x00027cf6

0000e018 <do_udp_sendto>:
{
    e018:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    e01c:	4604      	mov	r4, r0
	u32_t datalen = strlen(data);
    e01e:	4610      	mov	r0, r2
{
    e020:	460d      	mov	r5, r1
    e022:	4617      	mov	r7, r2
	u32_t datalen = strlen(data);
    e024:	f016 fc18 	bl	24858 <strlen>
	ret = do_udp_init(url, port);
    e028:	4629      	mov	r1, r5
	u32_t datalen = strlen(data);
    e02a:	4606      	mov	r6, r0
	ret = do_udp_init(url, port);
    e02c:	4620      	mov	r0, r4
    e02e:	f7ff ffc3 	bl	dfb8 <do_udp_init>
	if (ret < 0) {
    e032:	2800      	cmp	r0, #0
    e034:	db3e      	blt.n	e0b4 <do_udp_sendto+0x9c>
	u32_t offset = 0;
    e036:	2400      	movs	r4, #0
    e038:	4d21      	ldr	r5, [pc, #132]	; (e0c0 <do_udp_sendto+0xa8>)
	return socket_ops->sendto(sock, buf, len, flags, to, tolen);
    e03a:	f8df 809c 	ldr.w	r8, [pc, #156]	; e0d8 <do_udp_sendto+0xc0>
    e03e:	f8df 909c 	ldr.w	r9, [pc, #156]	; e0dc <do_udp_sendto+0xc4>
	while (offset < datalen) {
    e042:	42a6      	cmp	r6, r4
    e044:	d809      	bhi.n	e05a <do_udp_sendto+0x42>
	sprintf(buf, "#XUDPSENDTO: %d\r\n", offset);
    e046:	4622      	mov	r2, r4
    e048:	491e      	ldr	r1, [pc, #120]	; (e0c4 <do_udp_sendto+0xac>)
    e04a:	481f      	ldr	r0, [pc, #124]	; (e0c8 <do_udp_sendto+0xb0>)
    e04c:	f003 fb40 	bl	116d0 <sprintf>
	client.callback(buf);
    e050:	481d      	ldr	r0, [pc, #116]	; (e0c8 <do_udp_sendto+0xb0>)
    e052:	68ab      	ldr	r3, [r5, #8]
    e054:	4798      	blx	r3
	return 0;
    e056:	2000      	movs	r0, #0
    e058:	e02c      	b.n	e0b4 <do_udp_sendto+0x9c>
    e05a:	2208      	movs	r2, #8
    e05c:	e9cd 9200 	strd	r9, r2, [sp]
    e060:	f8d8 3000 	ldr.w	r3, [r8]
    e064:	1b32      	subs	r2, r6, r4
    e066:	f8d3 a030 	ldr.w	sl, [r3, #48]	; 0x30
    e06a:	1939      	adds	r1, r7, r4
    e06c:	2300      	movs	r3, #0
    e06e:	6828      	ldr	r0, [r5, #0]
    e070:	47d0      	blx	sl
		if (ret <= 0) {
    e072:	2800      	cmp	r0, #0
    e074:	dc21      	bgt.n	e0ba <do_udp_sendto+0xa2>
			LOG_ERR("sendto() failed: %d", -errno);
    e076:	2301      	movs	r3, #1
    e078:	f04f 0400 	mov.w	r4, #0
    e07c:	4a13      	ldr	r2, [pc, #76]	; (e0cc <do_udp_sendto+0xb4>)
    e07e:	f363 0402 	bfi	r4, r3, #0, #3
    e082:	4b13      	ldr	r3, [pc, #76]	; (e0d0 <do_udp_sendto+0xb8>)
    e084:	f36f 04c5 	bfc	r4, #3, #3
    e088:	1a9b      	subs	r3, r3, r2
    e08a:	08db      	lsrs	r3, r3, #3
    e08c:	f363 148f 	bfi	r4, r3, #6, #10
    e090:	f013 fdf8 	bl	21c84 <z_impl_z_errno>
    e094:	6801      	ldr	r1, [r0, #0]
    e096:	4622      	mov	r2, r4
    e098:	4249      	negs	r1, r1
    e09a:	480e      	ldr	r0, [pc, #56]	; (e0d4 <do_udp_sendto+0xbc>)
    e09c:	f015 fed8 	bl	23e50 <log_1>
    e0a0:	f013 fdf0 	bl	21c84 <z_impl_z_errno>
			do_socket_close(-errno);
    e0a4:	6800      	ldr	r0, [r0, #0]
    e0a6:	4240      	negs	r0, r0
    e0a8:	f7ff fbc6 	bl	d838 <do_socket_close>
    e0ac:	f013 fdea 	bl	21c84 <z_impl_z_errno>
			return -errno;
    e0b0:	6800      	ldr	r0, [r0, #0]
    e0b2:	4240      	negs	r0, r0
}
    e0b4:	b002      	add	sp, #8
    e0b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		offset += ret;
    e0ba:	4404      	add	r4, r0
    e0bc:	e7c1      	b.n	e042 <do_udp_sendto+0x2a>
    e0be:	bf00      	nop
    e0c0:	20020100 	.word	0x20020100
    e0c4:	00027cd3 	.word	0x00027cd3
    e0c8:	2002733c 	.word	0x2002733c
    e0cc:	00026560 	.word	0x00026560
    e0d0:	000265d0 	.word	0x000265d0
    e0d4:	00027cbf 	.word	0x00027cbf
    e0d8:	20020314 	.word	0x20020314
    e0dc:	20025e00 	.word	0x20025e00

0000e0e0 <handle_at_udp_sendto>:
 *  AT#XUDPSENDTO=<url>,<port>,<data>
 *  AT#XUDPSENDTO? READ command not supported
 *  AT#XUDPSENDTO=? TEST command not supported
 */
static int handle_at_udp_sendto(const char *at_cmd, size_t param_offset)
{
    e0e0:	b570      	push	{r4, r5, r6, lr}
	char url[TCPIP_MAX_URL];
	u16_t port;
	char data[NET_IPV4_MTU];
	int size;

	if (client.sock < 0) {
    e0e2:	4a35      	ldr	r2, [pc, #212]	; (e1b8 <handle_at_udp_sendto+0xd8>)
{
    e0e4:	f5ad 7d32 	sub.w	sp, sp, #712	; 0x2c8
	if (client.sock < 0) {
    e0e8:	6815      	ldr	r5, [r2, #0]
	char *at_param = (char *)at_cmd + param_offset;
    e0ea:	1844      	adds	r4, r0, r1
	if (client.sock < 0) {
    e0ec:	2d00      	cmp	r5, #0
    e0ee:	da14      	bge.n	e11a <handle_at_udp_sendto+0x3a>
		LOG_ERR("Socket not opened yet");
    e0f0:	2301      	movs	r3, #1
    e0f2:	f04f 0100 	mov.w	r1, #0
    e0f6:	4a31      	ldr	r2, [pc, #196]	; (e1bc <handle_at_udp_sendto+0xdc>)
    e0f8:	f363 0102 	bfi	r1, r3, #0, #3
    e0fc:	4b30      	ldr	r3, [pc, #192]	; (e1c0 <handle_at_udp_sendto+0xe0>)
    e0fe:	f36f 01c5 	bfc	r1, #3, #3
    e102:	1a9b      	subs	r3, r3, r2
    e104:	08db      	lsrs	r3, r3, #3
    e106:	482f      	ldr	r0, [pc, #188]	; (e1c4 <handle_at_udp_sendto+0xe4>)
    e108:	f363 118f 	bfi	r1, r3, #6, #10
		return err;
	} else if (client.ip_proto != IPPROTO_UDP) {
		LOG_ERR("Invalid socket");
    e10c:	f015 fe93 	bl	23e36 <log_0>
		return err;
    e110:	f06f 0015 	mvn.w	r0, #21
		data[size] = '\0';
		err = do_udp_sendto(url, port, data);
	}

	return err;
}
    e114:	f50d 7d32 	add.w	sp, sp, #712	; 0x2c8
    e118:	bd70      	pop	{r4, r5, r6, pc}
	} else if (client.ip_proto != IPPROTO_UDP) {
    e11a:	7912      	ldrb	r2, [r2, #4]
    e11c:	2a11      	cmp	r2, #17
    e11e:	d00e      	beq.n	e13e <handle_at_udp_sendto+0x5e>
		LOG_ERR("Invalid socket");
    e120:	2301      	movs	r3, #1
    e122:	f04f 0100 	mov.w	r1, #0
    e126:	4a25      	ldr	r2, [pc, #148]	; (e1bc <handle_at_udp_sendto+0xdc>)
    e128:	f363 0102 	bfi	r1, r3, #0, #3
    e12c:	4b24      	ldr	r3, [pc, #144]	; (e1c0 <handle_at_udp_sendto+0xe0>)
    e12e:	f36f 01c5 	bfc	r1, #3, #3
    e132:	1a9b      	subs	r3, r3, r2
    e134:	08db      	lsrs	r3, r3, #3
    e136:	f363 118f 	bfi	r1, r3, #6, #10
    e13a:	4823      	ldr	r0, [pc, #140]	; (e1c8 <handle_at_udp_sendto+0xe8>)
    e13c:	e7e6      	b.n	e10c <handle_at_udp_sendto+0x2c>
	if (*(at_param) == '=') {
    e13e:	5c43      	ldrb	r3, [r0, r1]
    e140:	2b3d      	cmp	r3, #61	; 0x3d
    e142:	d1e5      	bne.n	e110 <handle_at_udp_sendto+0x30>
		if (*(at_param) == '?') {
    e144:	7863      	ldrb	r3, [r4, #1]
    e146:	2b3f      	cmp	r3, #63	; 0x3f
    e148:	d0e2      	beq.n	e110 <handle_at_udp_sendto+0x30>
		err = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    e14a:	4a20      	ldr	r2, [pc, #128]	; (e1cc <handle_at_udp_sendto+0xec>)
    e14c:	2100      	movs	r1, #0
    e14e:	f017 fb55 	bl	257fc <at_parser_params_from_str>
		if (err < 0) {
    e152:	2800      	cmp	r0, #0
    e154:	dbde      	blt.n	e114 <handle_at_udp_sendto+0x34>
		if (at_params_valid_count_get(&m_param_list) < 4) {
    e156:	481d      	ldr	r0, [pc, #116]	; (e1cc <handle_at_udp_sendto+0xec>)
    e158:	f017 fc56 	bl	25a08 <at_params_valid_count_get>
    e15c:	2803      	cmp	r0, #3
    e15e:	d9d7      	bls.n	e110 <handle_at_udp_sendto+0x30>
		size = TCPIP_MAX_URL;
    e160:	2380      	movs	r3, #128	; 0x80
		err = at_params_string_get(&m_param_list, 1, url, &size);
    e162:	ac02      	add	r4, sp, #8
		size = TCPIP_MAX_URL;
    e164:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&m_param_list, 1, url, &size);
    e166:	4622      	mov	r2, r4
    e168:	ab01      	add	r3, sp, #4
    e16a:	2101      	movs	r1, #1
    e16c:	4817      	ldr	r0, [pc, #92]	; (e1cc <handle_at_udp_sendto+0xec>)
    e16e:	f017 fc28 	bl	259c2 <at_params_string_get>
		if (err < 0) {
    e172:	2800      	cmp	r0, #0
    e174:	dbce      	blt.n	e114 <handle_at_udp_sendto+0x34>
		url[size] = '\0';
    e176:	2600      	movs	r6, #0
    e178:	9b01      	ldr	r3, [sp, #4]
		err = at_params_short_get(&m_param_list, 2, &port);
    e17a:	f10d 0202 	add.w	r2, sp, #2
    e17e:	2102      	movs	r1, #2
    e180:	4812      	ldr	r0, [pc, #72]	; (e1cc <handle_at_udp_sendto+0xec>)
		url[size] = '\0';
    e182:	54e6      	strb	r6, [r4, r3]
		err = at_params_short_get(&m_param_list, 2, &port);
    e184:	f017 fc0b 	bl	2599e <at_params_short_get>
		if (err < 0) {
    e188:	2800      	cmp	r0, #0
    e18a:	dbc3      	blt.n	e114 <handle_at_udp_sendto+0x34>
		size = NET_IPV4_MTU;
    e18c:	f44f 7310 	mov.w	r3, #576	; 0x240
		err = at_params_string_get(&m_param_list, 3, data, &size);
    e190:	ad22      	add	r5, sp, #136	; 0x88
		size = NET_IPV4_MTU;
    e192:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&m_param_list, 3, data, &size);
    e194:	462a      	mov	r2, r5
    e196:	ab01      	add	r3, sp, #4
    e198:	2103      	movs	r1, #3
    e19a:	480c      	ldr	r0, [pc, #48]	; (e1cc <handle_at_udp_sendto+0xec>)
    e19c:	f017 fc11 	bl	259c2 <at_params_string_get>
		if (err < 0) {
    e1a0:	2800      	cmp	r0, #0
    e1a2:	dbb7      	blt.n	e114 <handle_at_udp_sendto+0x34>
		data[size] = '\0';
    e1a4:	9b01      	ldr	r3, [sp, #4]
		err = do_udp_sendto(url, port, data);
    e1a6:	462a      	mov	r2, r5
    e1a8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    e1ac:	4620      	mov	r0, r4
		data[size] = '\0';
    e1ae:	54ee      	strb	r6, [r5, r3]
		err = do_udp_sendto(url, port, data);
    e1b0:	f7ff ff32 	bl	e018 <do_udp_sendto>
    e1b4:	e7ae      	b.n	e114 <handle_at_udp_sendto+0x34>
    e1b6:	bf00      	nop
    e1b8:	20020100 	.word	0x20020100
    e1bc:	00026560 	.word	0x00026560
    e1c0:	000265d0 	.word	0x000265d0
    e1c4:	00027e04 	.word	0x00027e04
    e1c8:	00027e1a 	.word	0x00027e1a
    e1cc:	200200e0 	.word	0x200200e0

0000e1d0 <handle_at_tcp_conn>:
	int size = TCPIP_MAX_URL;
    e1d0:	2380      	movs	r3, #128	; 0x80
{
    e1d2:	b530      	push	{r4, r5, lr}
    e1d4:	b0a3      	sub	sp, #140	; 0x8c
	int size = TCPIP_MAX_URL;
    e1d6:	9301      	str	r3, [sp, #4]
	if (client.sock < 0) {
    e1d8:	4b52      	ldr	r3, [pc, #328]	; (e324 <handle_at_tcp_conn+0x154>)
	char *at_param = (char *)at_cmd + param_offset;
    e1da:	1844      	adds	r4, r0, r1
	if (client.sock < 0) {
    e1dc:	681d      	ldr	r5, [r3, #0]
    e1de:	2d00      	cmp	r5, #0
    e1e0:	461d      	mov	r5, r3
    e1e2:	da14      	bge.n	e20e <handle_at_tcp_conn+0x3e>
		LOG_ERR("Socket not opened yet");
    e1e4:	2301      	movs	r3, #1
    e1e6:	f04f 0100 	mov.w	r1, #0
    e1ea:	4a4f      	ldr	r2, [pc, #316]	; (e328 <handle_at_tcp_conn+0x158>)
    e1ec:	f363 0102 	bfi	r1, r3, #0, #3
    e1f0:	4b4e      	ldr	r3, [pc, #312]	; (e32c <handle_at_tcp_conn+0x15c>)
    e1f2:	f36f 01c5 	bfc	r1, #3, #3
    e1f6:	1a9b      	subs	r3, r3, r2
    e1f8:	08db      	lsrs	r3, r3, #3
    e1fa:	f363 118f 	bfi	r1, r3, #6, #10
    e1fe:	484c      	ldr	r0, [pc, #304]	; (e330 <handle_at_tcp_conn+0x160>)
    e200:	f015 fe19 	bl	23e36 <log_0>
			return err;
    e204:	f06f 0415 	mvn.w	r4, #21
}
    e208:	4620      	mov	r0, r4
    e20a:	b023      	add	sp, #140	; 0x8c
    e20c:	bd30      	pop	{r4, r5, pc}
	if (*(at_param) == '=') {
    e20e:	5c42      	ldrb	r2, [r0, r1]
    e210:	2a3d      	cmp	r2, #61	; 0x3d
    e212:	d17a      	bne.n	e30a <handle_at_tcp_conn+0x13a>
		if (*(at_param) == '?') {
    e214:	7863      	ldrb	r3, [r4, #1]
    e216:	2b3f      	cmp	r3, #63	; 0x3f
    e218:	d0f4      	beq.n	e204 <handle_at_tcp_conn+0x34>
		err = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    e21a:	4a46      	ldr	r2, [pc, #280]	; (e334 <handle_at_tcp_conn+0x164>)
    e21c:	2100      	movs	r1, #0
    e21e:	f017 faed 	bl	257fc <at_parser_params_from_str>
		if (err < 0) {
    e222:	1e04      	subs	r4, r0, #0
    e224:	dbf0      	blt.n	e208 <handle_at_tcp_conn+0x38>
		if (at_params_valid_count_get(&m_param_list) < 3) {
    e226:	4843      	ldr	r0, [pc, #268]	; (e334 <handle_at_tcp_conn+0x164>)
    e228:	f017 fbee 	bl	25a08 <at_params_valid_count_get>
    e22c:	2802      	cmp	r0, #2
    e22e:	d9e9      	bls.n	e204 <handle_at_tcp_conn+0x34>
		err = at_params_string_get(&m_param_list, 1, url, &size);
    e230:	ab01      	add	r3, sp, #4
    e232:	aa02      	add	r2, sp, #8
    e234:	2101      	movs	r1, #1
    e236:	483f      	ldr	r0, [pc, #252]	; (e334 <handle_at_tcp_conn+0x164>)
    e238:	f017 fbc3 	bl	259c2 <at_params_string_get>
		if (err < 0) {
    e23c:	1e04      	subs	r4, r0, #0
    e23e:	dbe3      	blt.n	e208 <handle_at_tcp_conn+0x38>
		url[size] = '\0';
    e240:	9b01      	ldr	r3, [sp, #4]
    e242:	aa22      	add	r2, sp, #136	; 0x88
    e244:	4413      	add	r3, r2
    e246:	2200      	movs	r2, #0
		err = at_params_short_get(&m_param_list, 2, &port);
    e248:	2102      	movs	r1, #2
		url[size] = '\0';
    e24a:	f803 2c80 	strb.w	r2, [r3, #-128]
		err = at_params_short_get(&m_param_list, 2, &port);
    e24e:	4839      	ldr	r0, [pc, #228]	; (e334 <handle_at_tcp_conn+0x164>)
    e250:	f10d 0202 	add.w	r2, sp, #2
    e254:	f017 fba3 	bl	2599e <at_params_short_get>
		if (err < 0) {
    e258:	1e04      	subs	r4, r0, #0
    e25a:	dbd5      	blt.n	e208 <handle_at_tcp_conn+0x38>
	if (check_for_ipv4(url, strlen(url))) {
    e25c:	a802      	add	r0, sp, #8
		err = do_tcp_connect(url, port);
    e25e:	f8bd 4002 	ldrh.w	r4, [sp, #2]
	if (check_for_ipv4(url, strlen(url))) {
    e262:	f016 faf9 	bl	24858 <strlen>
    e266:	b2c1      	uxtb	r1, r0
    e268:	a802      	add	r0, sp, #8
    e26a:	f015 fa36 	bl	236da <check_for_ipv4>
    e26e:	b1b8      	cbz	r0, e2a0 <handle_at_tcp_conn+0xd0>
		ret = parse_host_by_ipv4(url, port);
    e270:	4621      	mov	r1, r4
    e272:	a802      	add	r0, sp, #8
    e274:	f7ff fe8e 	bl	df94 <parse_host_by_ipv4>
		ret = parse_host_by_name(url, port, SOCK_STREAM);
    e278:	4604      	mov	r4, r0
	if (ret) {
    e27a:	b1b8      	cbz	r0, e2ac <handle_at_tcp_conn+0xdc>
		LOG_ERR("Parse failed: %d", ret);
    e27c:	2301      	movs	r3, #1
    e27e:	f04f 0200 	mov.w	r2, #0
    e282:	4929      	ldr	r1, [pc, #164]	; (e328 <handle_at_tcp_conn+0x158>)
    e284:	f363 0202 	bfi	r2, r3, #0, #3
    e288:	4b28      	ldr	r3, [pc, #160]	; (e32c <handle_at_tcp_conn+0x15c>)
    e28a:	f36f 02c5 	bfc	r2, #3, #3
    e28e:	1a5b      	subs	r3, r3, r1
    e290:	08db      	lsrs	r3, r3, #3
    e292:	4601      	mov	r1, r0
    e294:	f363 128f 	bfi	r2, r3, #6, #10
    e298:	4827      	ldr	r0, [pc, #156]	; (e338 <handle_at_tcp_conn+0x168>)
    e29a:	f015 fdd9 	bl	23e50 <log_1>
    e29e:	e7b3      	b.n	e208 <handle_at_tcp_conn+0x38>
		ret = parse_host_by_name(url, port, SOCK_STREAM);
    e2a0:	2201      	movs	r2, #1
    e2a2:	4621      	mov	r1, r4
    e2a4:	a802      	add	r0, sp, #8
    e2a6:	f7ff fbe9 	bl	da7c <parse_host_by_name>
    e2aa:	e7e5      	b.n	e278 <handle_at_tcp_conn+0xa8>
	return socket_ops->connect(sock, addr, addrlen);
    e2ac:	4b23      	ldr	r3, [pc, #140]	; (e33c <handle_at_tcp_conn+0x16c>)
    e2ae:	2208      	movs	r2, #8
    e2b0:	681b      	ldr	r3, [r3, #0]
    e2b2:	4923      	ldr	r1, [pc, #140]	; (e340 <handle_at_tcp_conn+0x170>)
    e2b4:	695b      	ldr	r3, [r3, #20]
    e2b6:	6828      	ldr	r0, [r5, #0]
    e2b8:	4798      	blx	r3
	if (ret < 0) {
    e2ba:	2800      	cmp	r0, #0
    e2bc:	f04f 0301 	mov.w	r3, #1
    e2c0:	da1e      	bge.n	e300 <handle_at_tcp_conn+0x130>
		LOG_ERR("connect() failed: %d", -errno);
    e2c2:	f04f 0500 	mov.w	r5, #0
    e2c6:	4a18      	ldr	r2, [pc, #96]	; (e328 <handle_at_tcp_conn+0x158>)
    e2c8:	f363 0502 	bfi	r5, r3, #0, #3
    e2cc:	4b17      	ldr	r3, [pc, #92]	; (e32c <handle_at_tcp_conn+0x15c>)
    e2ce:	f364 05c5 	bfi	r5, r4, #3, #3
    e2d2:	1a9b      	subs	r3, r3, r2
    e2d4:	08db      	lsrs	r3, r3, #3
    e2d6:	f363 158f 	bfi	r5, r3, #6, #10
    e2da:	f013 fcd3 	bl	21c84 <z_impl_z_errno>
    e2de:	6801      	ldr	r1, [r0, #0]
    e2e0:	462a      	mov	r2, r5
    e2e2:	4249      	negs	r1, r1
    e2e4:	4817      	ldr	r0, [pc, #92]	; (e344 <handle_at_tcp_conn+0x174>)
    e2e6:	f015 fdb3 	bl	23e50 <log_1>
    e2ea:	f013 fccb 	bl	21c84 <z_impl_z_errno>
		do_socket_close(-errno);
    e2ee:	6800      	ldr	r0, [r0, #0]
    e2f0:	4240      	negs	r0, r0
    e2f2:	f7ff faa1 	bl	d838 <do_socket_close>
    e2f6:	f013 fcc5 	bl	21c84 <z_impl_z_errno>
		return -errno;
    e2fa:	6804      	ldr	r4, [r0, #0]
    e2fc:	4264      	negs	r4, r4
    e2fe:	e783      	b.n	e208 <handle_at_tcp_conn+0x38>
	client.connected = true;
    e300:	716b      	strb	r3, [r5, #5]
	client.callback("#XTCPCONN: 1\r\n");
    e302:	4811      	ldr	r0, [pc, #68]	; (e348 <handle_at_tcp_conn+0x178>)
    e304:	68ab      	ldr	r3, [r5, #8]
    e306:	4798      	blx	r3
    e308:	e77e      	b.n	e208 <handle_at_tcp_conn+0x38>
	} else if (*(at_param) == '?') {
    e30a:	2a3f      	cmp	r2, #63	; 0x3f
    e30c:	f47f af7a 	bne.w	e204 <handle_at_tcp_conn+0x34>
		if (client.connected) {
    e310:	795c      	ldrb	r4, [r3, #5]
    e312:	689a      	ldr	r2, [r3, #8]
    e314:	b11c      	cbz	r4, e31e <handle_at_tcp_conn+0x14e>
			client.callback("+XTCPCONN: 1\r\n");
    e316:	480d      	ldr	r0, [pc, #52]	; (e34c <handle_at_tcp_conn+0x17c>)
    e318:	4790      	blx	r2
		err = 0;
    e31a:	2400      	movs	r4, #0
    e31c:	e774      	b.n	e208 <handle_at_tcp_conn+0x38>
			client.callback("+XTCPCONN: 0\r\n");
    e31e:	480c      	ldr	r0, [pc, #48]	; (e350 <handle_at_tcp_conn+0x180>)
    e320:	4790      	blx	r2
    e322:	e771      	b.n	e208 <handle_at_tcp_conn+0x38>
    e324:	20020100 	.word	0x20020100
    e328:	00026560 	.word	0x00026560
    e32c:	000265d0 	.word	0x000265d0
    e330:	00027e04 	.word	0x00027e04
    e334:	200200e0 	.word	0x200200e0
    e338:	00027cf6 	.word	0x00027cf6
    e33c:	20020314 	.word	0x20020314
    e340:	20025e00 	.word	0x20025e00
    e344:	00027d59 	.word	0x00027d59
    e348:	00027d6e 	.word	0x00027d6e
    e34c:	00027d7d 	.word	0x00027d7d
    e350:	00027d8c 	.word	0x00027d8c

0000e354 <handle_at_udp_recvfrom>:
static int handle_at_udp_recvfrom(const char *at_cmd, size_t param_offset)
{
	int err = -EINVAL;
	char *at_param = (char *)at_cmd + param_offset;
	char url[TCPIP_MAX_URL];
	int size = TCPIP_MAX_URL;
    e354:	2380      	movs	r3, #128	; 0x80
{
    e356:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e35a:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
	int size = TCPIP_MAX_URL;
    e35e:	9304      	str	r3, [sp, #16]
	u16_t port, length, time;

	if (client.sock < 0) {
    e360:	4b75      	ldr	r3, [pc, #468]	; (e538 <handle_at_udp_recvfrom+0x1e4>)
	char *at_param = (char *)at_cmd + param_offset;
    e362:	1844      	adds	r4, r0, r1
	if (client.sock < 0) {
    e364:	681d      	ldr	r5, [r3, #0]
    e366:	4698      	mov	r8, r3
    e368:	2d00      	cmp	r5, #0
    e36a:	da16      	bge.n	e39a <handle_at_udp_recvfrom+0x46>
		LOG_ERR("Socket not opened yet");
    e36c:	2301      	movs	r3, #1
    e36e:	f04f 0100 	mov.w	r1, #0
    e372:	4a72      	ldr	r2, [pc, #456]	; (e53c <handle_at_udp_recvfrom+0x1e8>)
    e374:	f363 0102 	bfi	r1, r3, #0, #3
    e378:	4b71      	ldr	r3, [pc, #452]	; (e540 <handle_at_udp_recvfrom+0x1ec>)
    e37a:	f36f 01c5 	bfc	r1, #3, #3
    e37e:	1a9b      	subs	r3, r3, r2
    e380:	08db      	lsrs	r3, r3, #3
    e382:	4870      	ldr	r0, [pc, #448]	; (e544 <handle_at_udp_recvfrom+0x1f0>)
    e384:	f363 118f 	bfi	r1, r3, #6, #10
		return err;
	} else if (client.ip_proto != IPPROTO_UDP) {
		LOG_ERR("Invalid socket");
    e388:	f015 fd55 	bl	23e36 <log_0>
		return err;
    e38c:	f06f 0415 	mvn.w	r4, #21
		};
		err = do_udp_recvfrom(url, port, length, time);
	}

	return err;
}
    e390:	4620      	mov	r0, r4
    e392:	f50d 7d38 	add.w	sp, sp, #736	; 0x2e0
    e396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (client.ip_proto != IPPROTO_UDP) {
    e39a:	791b      	ldrb	r3, [r3, #4]
    e39c:	2b11      	cmp	r3, #17
    e39e:	d00e      	beq.n	e3be <handle_at_udp_recvfrom+0x6a>
		LOG_ERR("Invalid socket");
    e3a0:	2301      	movs	r3, #1
    e3a2:	f04f 0100 	mov.w	r1, #0
    e3a6:	4a65      	ldr	r2, [pc, #404]	; (e53c <handle_at_udp_recvfrom+0x1e8>)
    e3a8:	f363 0102 	bfi	r1, r3, #0, #3
    e3ac:	4b64      	ldr	r3, [pc, #400]	; (e540 <handle_at_udp_recvfrom+0x1ec>)
    e3ae:	f36f 01c5 	bfc	r1, #3, #3
    e3b2:	1a9b      	subs	r3, r3, r2
    e3b4:	08db      	lsrs	r3, r3, #3
    e3b6:	f363 118f 	bfi	r1, r3, #6, #10
    e3ba:	4863      	ldr	r0, [pc, #396]	; (e548 <handle_at_udp_recvfrom+0x1f4>)
    e3bc:	e7e4      	b.n	e388 <handle_at_udp_recvfrom+0x34>
	if (*(at_param) == '=') {
    e3be:	5c43      	ldrb	r3, [r0, r1]
    e3c0:	2b3d      	cmp	r3, #61	; 0x3d
    e3c2:	d1e3      	bne.n	e38c <handle_at_udp_recvfrom+0x38>
		if (*(at_param) == '?') {
    e3c4:	7863      	ldrb	r3, [r4, #1]
    e3c6:	2b3f      	cmp	r3, #63	; 0x3f
    e3c8:	d0e0      	beq.n	e38c <handle_at_udp_recvfrom+0x38>
		err = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    e3ca:	4a60      	ldr	r2, [pc, #384]	; (e54c <handle_at_udp_recvfrom+0x1f8>)
    e3cc:	2100      	movs	r1, #0
    e3ce:	f017 fa15 	bl	257fc <at_parser_params_from_str>
		if (err < 0) {
    e3d2:	1e04      	subs	r4, r0, #0
    e3d4:	dbdc      	blt.n	e390 <handle_at_udp_recvfrom+0x3c>
		if (at_params_valid_count_get(&m_param_list) < 5) {
    e3d6:	485d      	ldr	r0, [pc, #372]	; (e54c <handle_at_udp_recvfrom+0x1f8>)
    e3d8:	f017 fb16 	bl	25a08 <at_params_valid_count_get>
    e3dc:	2804      	cmp	r0, #4
    e3de:	d9d5      	bls.n	e38c <handle_at_udp_recvfrom+0x38>
		err = at_params_string_get(&m_param_list, 1, url, &size);
    e3e0:	ad08      	add	r5, sp, #32
    e3e2:	ab04      	add	r3, sp, #16
    e3e4:	462a      	mov	r2, r5
    e3e6:	2101      	movs	r1, #1
    e3e8:	4858      	ldr	r0, [pc, #352]	; (e54c <handle_at_udp_recvfrom+0x1f8>)
    e3ea:	f017 faea 	bl	259c2 <at_params_string_get>
		if (err < 0) {
    e3ee:	1e04      	subs	r4, r0, #0
    e3f0:	dbce      	blt.n	e390 <handle_at_udp_recvfrom+0x3c>
		url[size] = '\0';
    e3f2:	2200      	movs	r2, #0
    e3f4:	9b04      	ldr	r3, [sp, #16]
		err = at_params_short_get(&m_param_list, 2, &port);
    e3f6:	2102      	movs	r1, #2
		url[size] = '\0';
    e3f8:	54ea      	strb	r2, [r5, r3]
		err = at_params_short_get(&m_param_list, 2, &port);
    e3fa:	4854      	ldr	r0, [pc, #336]	; (e54c <handle_at_udp_recvfrom+0x1f8>)
    e3fc:	f10d 020a 	add.w	r2, sp, #10
    e400:	f017 facd 	bl	2599e <at_params_short_get>
		if (err < 0) {
    e404:	1e04      	subs	r4, r0, #0
    e406:	dbc3      	blt.n	e390 <handle_at_udp_recvfrom+0x3c>
		err = at_params_short_get(&m_param_list, 3, &length);
    e408:	aa03      	add	r2, sp, #12
    e40a:	2103      	movs	r1, #3
    e40c:	484f      	ldr	r0, [pc, #316]	; (e54c <handle_at_udp_recvfrom+0x1f8>)
    e40e:	f017 fac6 	bl	2599e <at_params_short_get>
		if (err < 0) {
    e412:	1e04      	subs	r4, r0, #0
    e414:	dbbc      	blt.n	e390 <handle_at_udp_recvfrom+0x3c>
		err = at_params_short_get(&m_param_list, 4, &time);
    e416:	f10d 020e 	add.w	r2, sp, #14
    e41a:	2104      	movs	r1, #4
    e41c:	484b      	ldr	r0, [pc, #300]	; (e54c <handle_at_udp_recvfrom+0x1f8>)
    e41e:	f017 fabe 	bl	2599e <at_params_short_get>
		if (err < 0) {
    e422:	1e04      	subs	r4, r0, #0
    e424:	dbb4      	blt.n	e390 <handle_at_udp_recvfrom+0x3c>
	int sockaddr_len = sizeof(struct sockaddr);
    e426:	2218      	movs	r2, #24
	struct timeval tmo = {
    e428:	f04f 0900 	mov.w	r9, #0
		err = do_udp_recvfrom(url, port, length, time);
    e42c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    e430:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	int sockaddr_len = sizeof(struct sockaddr);
    e434:	af05      	add	r7, sp, #20
	ret = do_udp_init(url, port);
    e436:	4628      	mov	r0, r5
		err = do_udp_recvfrom(url, port, length, time);
    e438:	f8bd a00c 	ldrh.w	sl, [sp, #12]
	int sockaddr_len = sizeof(struct sockaddr);
    e43c:	603a      	str	r2, [r7, #0]
	struct timeval tmo = {
    e43e:	e9cd 3906 	strd	r3, r9, [sp, #24]
	ret = do_udp_init(url, port);
    e442:	f7ff fdb9 	bl	dfb8 <do_udp_init>
	if (ret < 0) {
    e446:	1e04      	subs	r4, r0, #0
    e448:	dba2      	blt.n	e390 <handle_at_udp_recvfrom+0x3c>
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
    e44a:	2208      	movs	r2, #8
    e44c:	4d40      	ldr	r5, [pc, #256]	; (e550 <handle_at_udp_recvfrom+0x1fc>)
    e44e:	2101      	movs	r1, #1
    e450:	682b      	ldr	r3, [r5, #0]
    e452:	9200      	str	r2, [sp, #0]
    e454:	69dc      	ldr	r4, [r3, #28]
    e456:	2214      	movs	r2, #20
    e458:	ab06      	add	r3, sp, #24
    e45a:	f8d8 0000 	ldr.w	r0, [r8]
    e45e:	47a0      	blx	r4
	if (ret < 0) {
    e460:	1e04      	subs	r4, r0, #0
    e462:	da1b      	bge.n	e49c <handle_at_udp_recvfrom+0x148>
		LOG_ERR("setsockopt() error: %d", -errno);
    e464:	2301      	movs	r3, #1
    e466:	f04f 0500 	mov.w	r5, #0
    e46a:	4a34      	ldr	r2, [pc, #208]	; (e53c <handle_at_udp_recvfrom+0x1e8>)
    e46c:	f363 0502 	bfi	r5, r3, #0, #3
    e470:	4b33      	ldr	r3, [pc, #204]	; (e540 <handle_at_udp_recvfrom+0x1ec>)
    e472:	f369 05c5 	bfi	r5, r9, #3, #3
    e476:	1a9b      	subs	r3, r3, r2
    e478:	08db      	lsrs	r3, r3, #3
    e47a:	f363 158f 	bfi	r5, r3, #6, #10
    e47e:	f013 fc01 	bl	21c84 <z_impl_z_errno>
    e482:	6801      	ldr	r1, [r0, #0]
    e484:	462a      	mov	r2, r5
    e486:	4249      	negs	r1, r1
    e488:	4832      	ldr	r0, [pc, #200]	; (e554 <handle_at_udp_recvfrom+0x200>)
    e48a:	f015 fce1 	bl	23e50 <log_1>
    e48e:	f013 fbf9 	bl	21c84 <z_impl_z_errno>
		do_socket_close(-errno);
    e492:	6800      	ldr	r0, [r0, #0]
    e494:	4240      	negs	r0, r0
    e496:	f7ff f9cf 	bl	d838 <do_socket_close>
    e49a:	e779      	b.n	e390 <handle_at_udp_recvfrom+0x3c>
    e49c:	682b      	ldr	r3, [r5, #0]
	if (length > NET_IPV4_MTU) {
    e49e:	f5ba 7f10 	cmp.w	sl, #576	; 0x240
    e4a2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    e4a4:	4b2c      	ldr	r3, [pc, #176]	; (e558 <handle_at_udp_recvfrom+0x204>)
    e4a6:	ae28      	add	r6, sp, #160	; 0xa0
    e4a8:	f8d8 0000 	ldr.w	r0, [r8]
	return socket_ops->recvfrom(sock, buf, len, flags, from, fromlen);
    e4ac:	bf88      	it	hi
    e4ae:	f44f 7210 	movhi.w	r2, #576	; 0x240
    e4b2:	9300      	str	r3, [sp, #0]
    e4b4:	bf98      	it	ls
    e4b6:	fa0f f28a 	sxthls.w	r2, sl
    e4ba:	9701      	str	r7, [sp, #4]
    e4bc:	464b      	mov	r3, r9
    e4be:	4631      	mov	r1, r6
    e4c0:	47a0      	blx	r4
	if (ret < 0) {
    e4c2:	2800      	cmp	r0, #0
    e4c4:	4605      	mov	r5, r0
    e4c6:	da1f      	bge.n	e508 <handle_at_udp_recvfrom+0x1b4>
		LOG_WRN("recvfrom() error: %d", -errno);
    e4c8:	2302      	movs	r3, #2
    e4ca:	f04f 0400 	mov.w	r4, #0
    e4ce:	4a1b      	ldr	r2, [pc, #108]	; (e53c <handle_at_udp_recvfrom+0x1e8>)
    e4d0:	f363 0402 	bfi	r4, r3, #0, #3
    e4d4:	4b1a      	ldr	r3, [pc, #104]	; (e540 <handle_at_udp_recvfrom+0x1ec>)
    e4d6:	f36f 04c5 	bfc	r4, #3, #3
    e4da:	1a9b      	subs	r3, r3, r2
    e4dc:	08db      	lsrs	r3, r3, #3
    e4de:	f363 148f 	bfi	r4, r3, #6, #10
    e4e2:	f013 fbcf 	bl	21c84 <z_impl_z_errno>
    e4e6:	6801      	ldr	r1, [r0, #0]
    e4e8:	4622      	mov	r2, r4
    e4ea:	4249      	negs	r1, r1
    e4ec:	481b      	ldr	r0, [pc, #108]	; (e55c <handle_at_udp_recvfrom+0x208>)
    e4ee:	f015 fcaf 	bl	23e50 <log_1>
    e4f2:	f013 fbc7 	bl	21c84 <z_impl_z_errno>
		do_socket_close(-errno);
    e4f6:	6800      	ldr	r0, [r0, #0]
    e4f8:	4240      	negs	r0, r0
    e4fa:	f7ff f99d 	bl	d838 <do_socket_close>
    e4fe:	f013 fbc1 	bl	21c84 <z_impl_z_errno>
		ret = -errno;
    e502:	6804      	ldr	r4, [r0, #0]
    e504:	4264      	negs	r4, r4
    e506:	e743      	b.n	e390 <handle_at_udp_recvfrom+0x3c>
		data[ret] = '\0';
    e508:	2400      	movs	r4, #0
		client.callback("#XUDPRECV: ");
    e50a:	f8d8 3008 	ldr.w	r3, [r8, #8]
		data[ret] = '\0';
    e50e:	5434      	strb	r4, [r6, r0]
		client.callback("#XUDPRECV: ");
    e510:	4813      	ldr	r0, [pc, #76]	; (e560 <handle_at_udp_recvfrom+0x20c>)
    e512:	4798      	blx	r3
		client.callback(data);
    e514:	f8d8 3008 	ldr.w	r3, [r8, #8]
    e518:	4630      	mov	r0, r6
    e51a:	4798      	blx	r3
		client.callback("\r\n");
    e51c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    e520:	4810      	ldr	r0, [pc, #64]	; (e564 <handle_at_udp_recvfrom+0x210>)
    e522:	4798      	blx	r3
		sprintf(buf, "#XUDPRECV: %d\r\n", ret);
    e524:	462a      	mov	r2, r5
    e526:	4910      	ldr	r1, [pc, #64]	; (e568 <handle_at_udp_recvfrom+0x214>)
    e528:	4810      	ldr	r0, [pc, #64]	; (e56c <handle_at_udp_recvfrom+0x218>)
    e52a:	f003 f8d1 	bl	116d0 <sprintf>
		client.callback(buf);
    e52e:	f8d8 3008 	ldr.w	r3, [r8, #8]
    e532:	480e      	ldr	r0, [pc, #56]	; (e56c <handle_at_udp_recvfrom+0x218>)
    e534:	4798      	blx	r3
    e536:	e72b      	b.n	e390 <handle_at_udp_recvfrom+0x3c>
    e538:	20020100 	.word	0x20020100
    e53c:	00026560 	.word	0x00026560
    e540:	000265d0 	.word	0x000265d0
    e544:	00027e04 	.word	0x00027e04
    e548:	00027e1a 	.word	0x00027e1a
    e54c:	200200e0 	.word	0x200200e0
    e550:	20020314 	.word	0x20020314
    e554:	00027c6b 	.word	0x00027c6b
    e558:	20025e00 	.word	0x20025e00
    e55c:	00027dd3 	.word	0x00027dd3
    e560:	00027de8 	.word	0x00027de8
    e564:	00027d98 	.word	0x00027d98
    e568:	00027df4 	.word	0x00027df4
    e56c:	2002733c 	.word	0x2002733c

0000e570 <slm_at_tcpip_parse>:

/**@brief API to handle TCP/IP AT commands
 */
int slm_at_tcpip_parse(const u8_t *param, u8_t length)
{
    e570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e574:	4e14      	ldr	r6, [pc, #80]	; (e5c8 <slm_at_tcpip_parse+0x58>)
    e576:	4607      	mov	r7, r0
	int ret = -ENOTSUP;

	ARG_UNUSED(length);

	for (int i = 0; i < AT_TCPIP_MAX; i++) {
    e578:	2500      	movs	r5, #0
    e57a:	4634      	mov	r4, r6
		u8_t cmd_len = strlen(m_at_list[i].string_upper);
    e57c:	f8d6 9004 	ldr.w	r9, [r6, #4]
    e580:	4648      	mov	r0, r9
    e582:	f016 f969 	bl	24858 <strlen>
    e586:	fa5f f880 	uxtb.w	r8, r0

		if (strncmp(param, m_at_list[i].string_upper,
    e58a:	4642      	mov	r2, r8
    e58c:	4649      	mov	r1, r9
    e58e:	4638      	mov	r0, r7
    e590:	f016 f977 	bl	24882 <strncmp>
    e594:	b938      	cbnz	r0, e5a6 <slm_at_tcpip_parse+0x36>
			cmd_len) == 0) {
			ret = m_at_list[i].handler(param, cmd_len);
			break;
		} else if (strncmp(param, m_at_list[i].string_lower,
			cmd_len) == 0) {
			ret = m_at_list[i].handler(param, cmd_len);
    e596:	eb04 1405 	add.w	r4, r4, r5, lsl #4
    e59a:	68e3      	ldr	r3, [r4, #12]
    e59c:	4641      	mov	r1, r8
    e59e:	4638      	mov	r0, r7
			break;
		}
	}

	return ret;
}
    e5a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			ret = m_at_list[i].handler(param, cmd_len);
    e5a4:	4718      	bx	r3
		} else if (strncmp(param, m_at_list[i].string_lower,
    e5a6:	4642      	mov	r2, r8
    e5a8:	68b1      	ldr	r1, [r6, #8]
    e5aa:	4638      	mov	r0, r7
    e5ac:	f016 f969 	bl	24882 <strncmp>
    e5b0:	2800      	cmp	r0, #0
    e5b2:	d0f0      	beq.n	e596 <slm_at_tcpip_parse+0x26>
	for (int i = 0; i < AT_TCPIP_MAX; i++) {
    e5b4:	3501      	adds	r5, #1
    e5b6:	2d07      	cmp	r5, #7
    e5b8:	f106 0610 	add.w	r6, r6, #16
    e5bc:	d1de      	bne.n	e57c <slm_at_tcpip_parse+0xc>
}
    e5be:	f06f 0022 	mvn.w	r0, #34	; 0x22
    e5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e5c6:	bf00      	nop
    e5c8:	00026610 	.word	0x00026610

0000e5cc <request_nb_iot_network_stats>:

	return 0;
}

int request_nb_iot_network_stats(void)
{
    e5cc:	b570      	push	{r4, r5, r6, lr}
	LOG_INF("Requesting NB-IoT network stats...");
    e5ce:	f04f 0100 	mov.w	r1, #0
    e5d2:	2603      	movs	r6, #3
    e5d4:	4b69      	ldr	r3, [pc, #420]	; (e77c <request_nb_iot_network_stats+0x1b0>)
    e5d6:	4c6a      	ldr	r4, [pc, #424]	; (e780 <request_nb_iot_network_stats+0x1b4>)
    e5d8:	f366 0102 	bfi	r1, r6, #0, #3
    e5dc:	1ae4      	subs	r4, r4, r3
    e5de:	f36f 01c5 	bfc	r1, #3, #3
    e5e2:	f3c4 04c9 	ubfx	r4, r4, #3, #10
{
    e5e6:	b0a6      	sub	sp, #152	; 0x98
	LOG_INF("Requesting NB-IoT network stats...");
    e5e8:	f364 118f 	bfi	r1, r4, #6, #10
    e5ec:	4865      	ldr	r0, [pc, #404]	; (e784 <request_nb_iot_network_stats+0x1b8>)
    e5ee:	f015 fc22 	bl	23e36 <log_0>
	int  at_sock;
	int  bytes_sent;
	int  bytes_received;
	char buf[150];

	at_sock = socket(AF_LTE, 0, NPROTO_AT);
    e5f2:	f240 2201 	movw	r2, #513	; 0x201
    e5f6:	2100      	movs	r1, #0
    e5f8:	2066      	movs	r0, #102	; 0x66
    e5fa:	f7ff f911 	bl	d820 <socket>
	if (at_sock < 0) {
    e5fe:	1e05      	subs	r5, r0, #0
    e600:	db22      	blt.n	e648 <request_nb_iot_network_stats+0x7c>
		return -1;
	}

	LOG_INF("CEREG");
    e602:	f04f 0100 	mov.w	r1, #0
    e606:	f366 0102 	bfi	r1, r6, #0, #3
    e60a:	f36f 01c5 	bfc	r1, #3, #3
    e60e:	f364 118f 	bfi	r1, r4, #6, #10
    e612:	485d      	ldr	r0, [pc, #372]	; (e788 <request_nb_iot_network_stats+0x1bc>)
    e614:	f015 fc0f 	bl	23e36 <log_0>
	bytes_sent = send(at_sock, AT_CEREG, strlen(AT_CEREG), 0);
    e618:	485c      	ldr	r0, [pc, #368]	; (e78c <request_nb_iot_network_stats+0x1c0>)
    e61a:	f016 f91d 	bl	24858 <strlen>
    e61e:	495b      	ldr	r1, [pc, #364]	; (e78c <request_nb_iot_network_stats+0x1c0>)
    e620:	4602      	mov	r2, r0
    e622:	4628      	mov	r0, r5
    e624:	f7ff fa88 	bl	db38 <send.constprop.10>
	if (bytes_sent < 0) {
    e628:	2800      	cmp	r0, #0
    e62a:	da10      	bge.n	e64e <request_nb_iot_network_stats+0x82>
		LOG_INF("CEREG send error");
    e62c:	f04f 0100 	mov.w	r1, #0
    e630:	f366 0102 	bfi	r1, r6, #0, #3
    e634:	f36f 01c5 	bfc	r1, #3, #3
    e638:	4855      	ldr	r0, [pc, #340]	; (e790 <request_nb_iot_network_stats+0x1c4>)
    e63a:	f364 118f 	bfi	r1, r4, #6, #10
	k_sleep(K_SECONDS(2));

	LOG_INF("NBRGRSRP");
	bytes_sent = send(at_sock, AT_NBRGRSRP, strlen(AT_NBRGRSRP), 0);
	if (bytes_sent < 0) {
		LOG_INF("NBRGRSRP send error");
    e63e:	f015 fbfa 	bl	23e36 <log_0>
		close(at_sock);
    e642:	4628      	mov	r0, r5
    e644:	f7ff f8f2 	bl	d82c <close>
		return -1;
    e648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e64c:	e094      	b.n	e778 <request_nb_iot_network_stats+0x1ac>
		bytes_received = recv(at_sock, buf, 100, 0);
    e64e:	2264      	movs	r2, #100	; 0x64
    e650:	4669      	mov	r1, sp
    e652:	4628      	mov	r0, r5
    e654:	f7ff fba6 	bl	dda4 <recv.constprop.15>
	} while (bytes_received == 0);
    e658:	2800      	cmp	r0, #0
    e65a:	d0f8      	beq.n	e64e <request_nb_iot_network_stats+0x82>
	LOG_INF("CEREG RESPONSE: %s", buf);
    e65c:	2603      	movs	r6, #3
    e65e:	f04f 0200 	mov.w	r2, #0
    e662:	f366 0202 	bfi	r2, r6, #0, #3
    e666:	f36f 02c5 	bfc	r2, #3, #3
    e66a:	f364 128f 	bfi	r2, r4, #6, #10
    e66e:	4669      	mov	r1, sp
    e670:	4848      	ldr	r0, [pc, #288]	; (e794 <request_nb_iot_network_stats+0x1c8>)
    e672:	f015 fbed 	bl	23e50 <log_1>
    e676:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    e67a:	f014 f9a9 	bl	229d0 <z_impl_k_sleep>
	LOG_INF("CESQ");
    e67e:	f04f 0100 	mov.w	r1, #0
    e682:	f366 0102 	bfi	r1, r6, #0, #3
    e686:	f36f 01c5 	bfc	r1, #3, #3
    e68a:	f364 118f 	bfi	r1, r4, #6, #10
    e68e:	4842      	ldr	r0, [pc, #264]	; (e798 <request_nb_iot_network_stats+0x1cc>)
    e690:	f015 fbd1 	bl	23e36 <log_0>
	bytes_sent = send(at_sock, AT_CESQ, strlen(AT_CESQ), 0);
    e694:	4841      	ldr	r0, [pc, #260]	; (e79c <request_nb_iot_network_stats+0x1d0>)
    e696:	f016 f8df 	bl	24858 <strlen>
    e69a:	4940      	ldr	r1, [pc, #256]	; (e79c <request_nb_iot_network_stats+0x1d0>)
    e69c:	4602      	mov	r2, r0
    e69e:	4628      	mov	r0, r5
    e6a0:	f7ff fa4a 	bl	db38 <send.constprop.10>
	if (bytes_sent < 0) {
    e6a4:	2800      	cmp	r0, #0
    e6a6:	da09      	bge.n	e6bc <request_nb_iot_network_stats+0xf0>
		LOG_INF("CESQ send error");
    e6a8:	f04f 0100 	mov.w	r1, #0
    e6ac:	f366 0102 	bfi	r1, r6, #0, #3
    e6b0:	f36f 01c5 	bfc	r1, #3, #3
    e6b4:	f364 118f 	bfi	r1, r4, #6, #10
    e6b8:	4839      	ldr	r0, [pc, #228]	; (e7a0 <request_nb_iot_network_stats+0x1d4>)
    e6ba:	e7c0      	b.n	e63e <request_nb_iot_network_stats+0x72>
		bytes_received = recv(at_sock, buf, 100, 0);
    e6bc:	2264      	movs	r2, #100	; 0x64
    e6be:	4669      	mov	r1, sp
    e6c0:	4628      	mov	r0, r5
    e6c2:	f7ff fb6f 	bl	dda4 <recv.constprop.15>
	} while (bytes_received == 0);
    e6c6:	2800      	cmp	r0, #0
    e6c8:	d0f8      	beq.n	e6bc <request_nb_iot_network_stats+0xf0>
	LOG_INF("CESQ RESPONSE: %s", buf);		
    e6ca:	2603      	movs	r6, #3
    e6cc:	f04f 0200 	mov.w	r2, #0
    e6d0:	f366 0202 	bfi	r2, r6, #0, #3
    e6d4:	f36f 02c5 	bfc	r2, #3, #3
    e6d8:	f364 128f 	bfi	r2, r4, #6, #10
    e6dc:	4669      	mov	r1, sp
    e6de:	4831      	ldr	r0, [pc, #196]	; (e7a4 <request_nb_iot_network_stats+0x1d8>)
    e6e0:	f015 fbb6 	bl	23e50 <log_1>
    e6e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    e6e8:	f014 f972 	bl	229d0 <z_impl_k_sleep>
	LOG_INF("NBRGRSRP");
    e6ec:	f04f 0100 	mov.w	r1, #0
    e6f0:	f366 0102 	bfi	r1, r6, #0, #3
    e6f4:	f36f 01c5 	bfc	r1, #3, #3
    e6f8:	f364 118f 	bfi	r1, r4, #6, #10
    e6fc:	482a      	ldr	r0, [pc, #168]	; (e7a8 <request_nb_iot_network_stats+0x1dc>)
    e6fe:	f015 fb9a 	bl	23e36 <log_0>
	bytes_sent = send(at_sock, AT_NBRGRSRP, strlen(AT_NBRGRSRP), 0);
    e702:	482a      	ldr	r0, [pc, #168]	; (e7ac <request_nb_iot_network_stats+0x1e0>)
    e704:	f016 f8a8 	bl	24858 <strlen>
    e708:	4928      	ldr	r1, [pc, #160]	; (e7ac <request_nb_iot_network_stats+0x1e0>)
    e70a:	4602      	mov	r2, r0
    e70c:	4628      	mov	r0, r5
    e70e:	f7ff fa13 	bl	db38 <send.constprop.10>
	if (bytes_sent < 0) {
    e712:	2800      	cmp	r0, #0
    e714:	da09      	bge.n	e72a <request_nb_iot_network_stats+0x15e>
		LOG_INF("NBRGRSRP send error");
    e716:	f04f 0100 	mov.w	r1, #0
    e71a:	f366 0102 	bfi	r1, r6, #0, #3
    e71e:	f36f 01c5 	bfc	r1, #3, #3
    e722:	f364 118f 	bfi	r1, r4, #6, #10
    e726:	4822      	ldr	r0, [pc, #136]	; (e7b0 <request_nb_iot_network_stats+0x1e4>)
    e728:	e789      	b.n	e63e <request_nb_iot_network_stats+0x72>
		return -1;
	}
	do {
		bytes_received = recv(at_sock, buf, 150, 0);
    e72a:	2296      	movs	r2, #150	; 0x96
    e72c:	4669      	mov	r1, sp
    e72e:	4628      	mov	r0, r5
    e730:	f7ff fb38 	bl	dda4 <recv.constprop.15>
	} while (bytes_received == 0);
    e734:	2800      	cmp	r0, #0
    e736:	d0f8      	beq.n	e72a <request_nb_iot_network_stats+0x15e>

	LOG_INF("NBRGRSRP RESPONSE: %s", buf);	
    e738:	2603      	movs	r6, #3
    e73a:	f04f 0200 	mov.w	r2, #0
    e73e:	f366 0202 	bfi	r2, r6, #0, #3
    e742:	f36f 02c5 	bfc	r2, #3, #3
    e746:	f364 128f 	bfi	r2, r4, #6, #10
    e74a:	4669      	mov	r1, sp
    e74c:	4819      	ldr	r0, [pc, #100]	; (e7b4 <request_nb_iot_network_stats+0x1e8>)
    e74e:	f015 fb7f 	bl	23e50 <log_1>
    e752:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    e756:	f014 f93b 	bl	229d0 <z_impl_k_sleep>
	//TODO: parse buffer	
	k_sleep(K_SECONDS(2));

	close(at_sock);
    e75a:	4628      	mov	r0, r5
    e75c:	f7ff f866 	bl	d82c <close>

	LOG_INF("NB-IoT netwerk stats requested.");
    e760:	f04f 0100 	mov.w	r1, #0
    e764:	f366 0102 	bfi	r1, r6, #0, #3
    e768:	f36f 01c5 	bfc	r1, #3, #3
    e76c:	4812      	ldr	r0, [pc, #72]	; (e7b8 <request_nb_iot_network_stats+0x1ec>)
    e76e:	f364 118f 	bfi	r1, r4, #6, #10
    e772:	f015 fb60 	bl	23e36 <log_0>
	
	return 0;
    e776:	2000      	movs	r0, #0
}
    e778:	b026      	add	sp, #152	; 0x98
    e77a:	bd70      	pop	{r4, r5, r6, pc}
    e77c:	00026560 	.word	0x00026560
    e780:	000265d0 	.word	0x000265d0
    e784:	00027ee8 	.word	0x00027ee8
    e788:	00027f0b 	.word	0x00027f0b
    e78c:	00027f11 	.word	0x00027f11
    e790:	00027f1b 	.word	0x00027f1b
    e794:	00027f2c 	.word	0x00027f2c
    e798:	00027f42 	.word	0x00027f42
    e79c:	00027f3f 	.word	0x00027f3f
    e7a0:	00027f47 	.word	0x00027f47
    e7a4:	00027f57 	.word	0x00027f57
    e7a8:	00027f6c 	.word	0x00027f6c
    e7ac:	00027f69 	.word	0x00027f69
    e7b0:	00027f75 	.word	0x00027f75
    e7b4:	00027f89 	.word	0x00027f89
    e7b8:	00027f9f 	.word	0x00027f9f

0000e7bc <slm_at_tcpip_init>:

/**@brief API to initialize TCP/IP AT commands handler
 */
int slm_at_tcpip_init(at_cmd_handler_t callback)
{
    e7bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e7c0:	4b57      	ldr	r3, [pc, #348]	; (e920 <slm_at_tcpip_init+0x164>)
    e7c2:	4c58      	ldr	r4, [pc, #352]	; (e924 <slm_at_tcpip_init+0x168>)
    e7c4:	1ae4      	subs	r4, r4, r3
    e7c6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (callback == NULL) {
    e7ca:	b980      	cbnz	r0, e7ee <slm_at_tcpip_init+0x32>
		LOG_ERR("No callback");
    e7cc:	2301      	movs	r3, #1
    e7ce:	f04f 0100 	mov.w	r1, #0
    e7d2:	f363 0102 	bfi	r1, r3, #0, #3
    e7d6:	f360 01c5 	bfi	r1, r0, #3, #3
    e7da:	f364 118f 	bfi	r1, r4, #6, #10
    e7de:	4852      	ldr	r0, [pc, #328]	; (e928 <slm_at_tcpip_init+0x16c>)
    e7e0:	f015 fb29 	bl	23e36 <log_0>
		return -EINVAL;
    e7e4:	f06f 0015 	mvn.w	r0, #21
	LOG_INF("bootup message sent");

	request_nb_iot_network_stats();
	
	return 0;
}
    e7e8:	b003      	add	sp, #12
    e7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	client.connected = false;
    e7ee:	2500      	movs	r5, #0
	client.sock = INVALID_SOCKET;
    e7f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e7f4:	4b4d      	ldr	r3, [pc, #308]	; (e92c <slm_at_tcpip_init+0x170>)
	LOG_INF("Initializing NB-IoT Parameters");
    e7f6:	f04f 0100 	mov.w	r1, #0
	client.sock = INVALID_SOCKET;
    e7fa:	601a      	str	r2, [r3, #0]
	client.callback = callback;
    e7fc:	6098      	str	r0, [r3, #8]
	client.connected = false;
    e7fe:	715d      	strb	r5, [r3, #5]
	client.ip_proto = IPPROTO_IP;
    e800:	711d      	strb	r5, [r3, #4]
	LOG_INF("Initializing NB-IoT Parameters");
    e802:	2303      	movs	r3, #3
    e804:	f363 0102 	bfi	r1, r3, #0, #3
    e808:	f365 01c5 	bfi	r1, r5, #3, #3
    e80c:	f364 118f 	bfi	r1, r4, #6, #10
    e810:	4847      	ldr	r0, [pc, #284]	; (e930 <slm_at_tcpip_init+0x174>)
    e812:	f015 fb10 	bl	23e36 <log_0>
	at_sock = socket(AF_LTE, 0, NPROTO_AT);
    e816:	f240 2201 	movw	r2, #513	; 0x201
    e81a:	4629      	mov	r1, r5
    e81c:	2066      	movs	r0, #102	; 0x66
    e81e:	f7fe ffff 	bl	d820 <socket>
	if (at_sock < 0) {
    e822:	1e06      	subs	r6, r0, #0
    e824:	db28      	blt.n	e878 <slm_at_tcpip_init+0xbc>
		if (memcmp(buf, "OK", 2) != 0) {
    e826:	f8df a12c 	ldr.w	sl, [pc, #300]	; e954 <slm_at_tcpip_init+0x198>
		LOG_INF("%s",nb_init_at_commands[i]);
    e82a:	f04f 0b03 	mov.w	fp, #3
    e82e:	4b41      	ldr	r3, [pc, #260]	; (e934 <slm_at_tcpip_init+0x178>)
    e830:	f36b 0902 	bfi	r9, fp, #0, #3
    e834:	f36f 09c5 	bfc	r9, #3, #3
    e838:	195f      	adds	r7, r3, r5
    e83a:	f364 198f 	bfi	r9, r4, #6, #10
    e83e:	464a      	mov	r2, r9
    e840:	4639      	mov	r1, r7
    e842:	483d      	ldr	r0, [pc, #244]	; (e938 <slm_at_tcpip_init+0x17c>)
    e844:	f015 fb04 	bl	23e50 <log_1>
		bytes_sent = send(at_sock, nb_init_at_commands[i],
    e848:	4638      	mov	r0, r7
    e84a:	f016 f805 	bl	24858 <strlen>
    e84e:	4639      	mov	r1, r7
    e850:	4602      	mov	r2, r0
    e852:	4630      	mov	r0, r6
    e854:	f7ff f970 	bl	db38 <send.constprop.10>
		if (bytes_sent < 0) {
    e858:	2800      	cmp	r0, #0
    e85a:	da26      	bge.n	e8aa <slm_at_tcpip_init+0xee>
			LOG_INF("NO BYTES SENT");
    e85c:	f04f 0100 	mov.w	r1, #0
    e860:	f36b 0102 	bfi	r1, fp, #0, #3
    e864:	f36f 01c5 	bfc	r1, #3, #3
    e868:	4834      	ldr	r0, [pc, #208]	; (e93c <slm_at_tcpip_init+0x180>)
    e86a:	f364 118f 	bfi	r1, r4, #6, #10
			LOG_INF("NOK");
    e86e:	f015 fae2 	bl	23e36 <log_0>
			close(at_sock);
    e872:	4630      	mov	r0, r6
    e874:	f7fe ffda 	bl	d82c <close>
	do_socket_open(2);
    e878:	2002      	movs	r0, #2
    e87a:	f7ff f81f 	bl	d8bc <do_socket_open>
	do_udp_sendto("8.8.8.8", 4445, "0101");
    e87e:	4a30      	ldr	r2, [pc, #192]	; (e940 <slm_at_tcpip_init+0x184>)
    e880:	f241 115d 	movw	r1, #4445	; 0x115d
    e884:	482f      	ldr	r0, [pc, #188]	; (e944 <slm_at_tcpip_init+0x188>)
    e886:	f7ff fbc7 	bl	e018 <do_udp_sendto>
	LOG_INF("bootup message sent");
    e88a:	2303      	movs	r3, #3
    e88c:	f04f 0100 	mov.w	r1, #0
    e890:	f363 0102 	bfi	r1, r3, #0, #3
    e894:	f36f 01c5 	bfc	r1, #3, #3
    e898:	f364 118f 	bfi	r1, r4, #6, #10
    e89c:	482a      	ldr	r0, [pc, #168]	; (e948 <slm_at_tcpip_init+0x18c>)
    e89e:	f015 faca 	bl	23e36 <log_0>
	request_nb_iot_network_stats();
    e8a2:	f7ff fe93 	bl	e5cc <request_nb_iot_network_stats>
	return 0;
    e8a6:	2000      	movs	r0, #0
    e8a8:	e79e      	b.n	e7e8 <slm_at_tcpip_init+0x2c>
			bytes_received = recv(at_sock, buf, 2, 0);
    e8aa:	2202      	movs	r2, #2
    e8ac:	a901      	add	r1, sp, #4
    e8ae:	4630      	mov	r0, r6
    e8b0:	f7ff fa78 	bl	dda4 <recv.constprop.15>
		} while (bytes_received == 0);
    e8b4:	2800      	cmp	r0, #0
    e8b6:	d0f8      	beq.n	e8aa <slm_at_tcpip_init+0xee>
		if (memcmp(buf, "OK", 2) != 0) {
    e8b8:	2202      	movs	r2, #2
    e8ba:	4651      	mov	r1, sl
    e8bc:	a801      	add	r0, sp, #4
    e8be:	f015 ffef 	bl	248a0 <memcmp>
    e8c2:	f04f 0b03 	mov.w	fp, #3
    e8c6:	4607      	mov	r7, r0
    e8c8:	b148      	cbz	r0, e8de <slm_at_tcpip_init+0x122>
			LOG_INF("NOK");
    e8ca:	f04f 0100 	mov.w	r1, #0
    e8ce:	f36b 0102 	bfi	r1, fp, #0, #3
    e8d2:	f36f 01c5 	bfc	r1, #3, #3
    e8d6:	f364 118f 	bfi	r1, r4, #6, #10
    e8da:	481c      	ldr	r0, [pc, #112]	; (e94c <slm_at_tcpip_init+0x190>)
    e8dc:	e7c7      	b.n	e86e <slm_at_tcpip_init+0xb2>
			LOG_INF("OK");
    e8de:	f36b 0802 	bfi	r8, fp, #0, #3
    e8e2:	f360 08c5 	bfi	r8, r0, #3, #3
    e8e6:	f364 188f 	bfi	r8, r4, #6, #10
    e8ea:	4641      	mov	r1, r8
    e8ec:	4650      	mov	r0, sl
    e8ee:	f015 faa2 	bl	23e36 <log_0>
    e8f2:	f640 30b8 	movw	r0, #3000	; 0xbb8
    e8f6:	3522      	adds	r5, #34	; 0x22
    e8f8:	f014 f86a 	bl	229d0 <z_impl_k_sleep>
	for (int i = 0; i < ARRAY_SIZE(nb_init_at_commands); i++) {
    e8fc:	2d88      	cmp	r5, #136	; 0x88
    e8fe:	d194      	bne.n	e82a <slm_at_tcpip_init+0x6e>
	close(at_sock);
    e900:	4630      	mov	r0, r6
    e902:	f7fe ff93 	bl	d82c <close>
	LOG_INF("NB-IoT Parameters Initialized");
    e906:	f04f 0100 	mov.w	r1, #0
    e90a:	f36b 0102 	bfi	r1, fp, #0, #3
    e90e:	f367 01c5 	bfi	r1, r7, #3, #3
    e912:	f364 118f 	bfi	r1, r4, #6, #10
    e916:	480e      	ldr	r0, [pc, #56]	; (e950 <slm_at_tcpip_init+0x194>)
    e918:	f015 fa8d 	bl	23e36 <log_0>
    e91c:	e7ac      	b.n	e878 <slm_at_tcpip_init+0xbc>
    e91e:	bf00      	nop
    e920:	00026560 	.word	0x00026560
    e924:	000265d0 	.word	0x000265d0
    e928:	00027fbf 	.word	0x00027fbf
    e92c:	20020100 	.word	0x20020100
    e930:	00027fcb 	.word	0x00027fcb
    e934:	00027e29 	.word	0x00027e29
    e938:	00027f3c 	.word	0x00027f3c
    e93c:	00027fea 	.word	0x00027fea
    e940:	0002801a 	.word	0x0002801a
    e944:	0002801f 	.word	0x0002801f
    e948:	00028027 	.word	0x00028027
    e94c:	00027ff8 	.word	0x00027ff8
    e950:	00027ffc 	.word	0x00027ffc
    e954:	00027ff9 	.word	0x00027ff9

0000e958 <close>:
	return socket_ops->close(sock);
    e958:	4b01      	ldr	r3, [pc, #4]	; (e960 <close+0x8>)
    e95a:	681b      	ldr	r3, [r3, #0]
    e95c:	685b      	ldr	r3, [r3, #4]
    e95e:	4718      	bx	r3
    e960:	20020314 	.word	0x20020314

0000e964 <do_gps_start>:
		}
	}
}

static int do_gps_start(void)
{
    e964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_DBG("do_gps_start");
	int ret = -EINVAL;

	nrf_gnss_fix_retry_t    fix_retry    = 0; /* unlimited retry period */
	nrf_gnss_fix_interval_t fix_interval = 1; /* 1s delay between fixes */
    e968:	2601      	movs	r6, #1
	nrf_gnss_fix_retry_t    fix_retry    = 0; /* unlimited retry period */
    e96a:	2700      	movs	r7, #0
	nrf_gnss_delete_mask_t  delete_mask  = 0;
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)client.mask;
    e96c:	4d74      	ldr	r5, [pc, #464]	; (eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>)
{
    e96e:	b08a      	sub	sp, #40	; 0x28
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)client.mask;
    e970:	88ab      	ldrh	r3, [r5, #4]
	
	client.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    e972:	f44f 7201 	mov.w	r2, #516	; 0x204
    e976:	2102      	movs	r1, #2
    e978:	4630      	mov	r0, r6
	nrf_gnss_fix_retry_t    fix_retry    = 0; /* unlimited retry period */
    e97a:	f8ad 701e 	strh.w	r7, [sp, #30]
	nrf_gnss_fix_interval_t fix_interval = 1; /* 1s delay between fixes */
    e97e:	f8ad 6020 	strh.w	r6, [sp, #32]
	nrf_gnss_delete_mask_t  delete_mask  = 0;
    e982:	9709      	str	r7, [sp, #36]	; 0x24
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)client.mask;
    e984:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	client.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    e988:	f005 fcca 	bl	14320 <nrf_socket>
	if (client.sock < 0) {
    e98c:	42b8      	cmp	r0, r7
	client.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    e98e:	6028      	str	r0, [r5, #0]
	if (client.sock < 0) {
    e990:	da35      	bge.n	e9fe <do_gps_start+0x9a>
		LOG_ERR("Could not init socket (err: %d)", -errno);
    e992:	f04f 0400 	mov.w	r4, #0
    e996:	4a6b      	ldr	r2, [pc, #428]	; (eb44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe4>)
    e998:	4b6b      	ldr	r3, [pc, #428]	; (eb48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe8>)
    e99a:	f366 0402 	bfi	r4, r6, #0, #3
    e99e:	1a9b      	subs	r3, r3, r2
    e9a0:	f367 04c5 	bfi	r4, r7, #3, #3
    e9a4:	08db      	lsrs	r3, r3, #3
    e9a6:	f363 148f 	bfi	r4, r3, #6, #10
    e9aa:	f013 f96b 	bl	21c84 <z_impl_z_errno>
    e9ae:	6801      	ldr	r1, [r0, #0]
    e9b0:	4622      	mov	r2, r4
    e9b2:	4249      	negs	r1, r1
    e9b4:	4865      	ldr	r0, [pc, #404]	; (eb4c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xec>)
    e9b6:	f015 fa4b 	bl	23e50 <log_1>
	int ret = -EINVAL;
    e9ba:	f06f 0415 	mvn.w	r4, #21
	sprintf(buf, "#XGPSRUN: 1,%d\r\n", client.mask);
	client.callback(buf);
	return 0;

error:
	LOG_ERR("GPS start failed: %d", ret);
    e9be:	2301      	movs	r3, #1
    e9c0:	f04f 0200 	mov.w	r2, #0
    e9c4:	495f      	ldr	r1, [pc, #380]	; (eb44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe4>)
    e9c6:	f363 0202 	bfi	r2, r3, #0, #3
    e9ca:	4b5f      	ldr	r3, [pc, #380]	; (eb48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe8>)
    e9cc:	f36f 02c5 	bfc	r2, #3, #3
    e9d0:	1a5b      	subs	r3, r3, r1
    e9d2:	08db      	lsrs	r3, r3, #3
    e9d4:	f363 128f 	bfi	r2, r3, #6, #10
    e9d8:	4621      	mov	r1, r4
    e9da:	485d      	ldr	r0, [pc, #372]	; (eb50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf0>)
    e9dc:	f015 fa38 	bl	23e50 <log_1>
	sprintf(buf, "#XGPSRUN: %d\r\n", ret);
    e9e0:	4622      	mov	r2, r4
    e9e2:	495c      	ldr	r1, [pc, #368]	; (eb54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf4>)
    e9e4:	485c      	ldr	r0, [pc, #368]	; (eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>)
    e9e6:	f002 fe73 	bl	116d0 <sprintf>
	client.callback(buf);
    e9ea:	68ab      	ldr	r3, [r5, #8]
    e9ec:	485a      	ldr	r0, [pc, #360]	; (eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>)
    e9ee:	4798      	blx	r3
	client.running = false;
    e9f0:	2300      	movs	r3, #0
    e9f2:	71ab      	strb	r3, [r5, #6]
    e9f4:	f013 f946 	bl	21c84 <z_impl_z_errno>

	return -errno;
    e9f8:	6804      	ldr	r4, [r0, #0]
    e9fa:	4264      	negs	r4, r4
    e9fc:	e08b      	b.n	eb16 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb6>
	ret = nrf_setsockopt(client.sock, NRF_SOL_GNSS, NRF_SO_GNSS_FIX_RETRY,
    e9fe:	f04f 0802 	mov.w	r8, #2
    ea02:	f10d 031e 	add.w	r3, sp, #30
    ea06:	f8cd 8000 	str.w	r8, [sp]
    ea0a:	4642      	mov	r2, r8
    ea0c:	f44f 7101 	mov.w	r1, #516	; 0x204
    ea10:	f005 fd5c 	bl	144cc <nrf_setsockopt>
	if (ret != 0) {
    ea14:	4604      	mov	r4, r0
    ea16:	b1a0      	cbz	r0, ea42 <do_gps_start+0xde>
		LOG_ERR("Failed to set fix retry value (err: %d)", -errno);
    ea18:	f04f 0800 	mov.w	r8, #0
    ea1c:	4a49      	ldr	r2, [pc, #292]	; (eb44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe4>)
    ea1e:	4b4a      	ldr	r3, [pc, #296]	; (eb48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe8>)
    ea20:	f366 0802 	bfi	r8, r6, #0, #3
    ea24:	1a9b      	subs	r3, r3, r2
    ea26:	f367 08c5 	bfi	r8, r7, #3, #3
    ea2a:	08db      	lsrs	r3, r3, #3
    ea2c:	f363 188f 	bfi	r8, r3, #6, #10
    ea30:	f013 f928 	bl	21c84 <z_impl_z_errno>
    ea34:	4642      	mov	r2, r8
    ea36:	6801      	ldr	r1, [r0, #0]
    ea38:	4848      	ldr	r0, [pc, #288]	; (eb5c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfc>)
    ea3a:	4249      	negs	r1, r1
		LOG_ERR("Failed to start GPS (err: %d)", -errno);
    ea3c:	f015 fa08 	bl	23e50 <log_1>
    ea40:	e7bd      	b.n	e9be <do_gps_start+0x5a>
	ret = nrf_setsockopt(client.sock, NRF_SOL_GNSS,
    ea42:	f8cd 8000 	str.w	r8, [sp]
    ea46:	ab08      	add	r3, sp, #32
    ea48:	4632      	mov	r2, r6
    ea4a:	f44f 7101 	mov.w	r1, #516	; 0x204
    ea4e:	6828      	ldr	r0, [r5, #0]
    ea50:	f005 fd3c 	bl	144cc <nrf_setsockopt>
	if (ret != 0) {
    ea54:	4604      	mov	r4, r0
    ea56:	b190      	cbz	r0, ea7e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1e>
		LOG_ERR("Failed to set fix interval value (err: %d)", -errno);
    ea58:	f04f 0800 	mov.w	r8, #0
    ea5c:	4a39      	ldr	r2, [pc, #228]	; (eb44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe4>)
    ea5e:	4b3a      	ldr	r3, [pc, #232]	; (eb48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe8>)
    ea60:	f366 0802 	bfi	r8, r6, #0, #3
    ea64:	1a9b      	subs	r3, r3, r2
    ea66:	f367 08c5 	bfi	r8, r7, #3, #3
    ea6a:	08db      	lsrs	r3, r3, #3
    ea6c:	f363 188f 	bfi	r8, r3, #6, #10
    ea70:	f013 f908 	bl	21c84 <z_impl_z_errno>
    ea74:	6801      	ldr	r1, [r0, #0]
    ea76:	4642      	mov	r2, r8
    ea78:	4249      	negs	r1, r1
    ea7a:	4839      	ldr	r0, [pc, #228]	; (eb60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x100>)
    ea7c:	e7de      	b.n	ea3c <do_gps_start+0xd8>
	ret = nrf_setsockopt(client.sock, NRF_SOL_GNSS, NRF_SO_GNSS_NMEA_MASK,
    ea7e:	f8cd 8000 	str.w	r8, [sp]
    ea82:	f10d 0322 	add.w	r3, sp, #34	; 0x22
    ea86:	2204      	movs	r2, #4
    ea88:	f44f 7101 	mov.w	r1, #516	; 0x204
    ea8c:	6828      	ldr	r0, [r5, #0]
    ea8e:	f005 fd1d 	bl	144cc <nrf_setsockopt>
	if (ret != 0) {
    ea92:	4604      	mov	r4, r0
    ea94:	b190      	cbz	r0, eabc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5c>
		LOG_ERR("Failed to set nmea mask (err: %d)", -errno);
    ea96:	f04f 0800 	mov.w	r8, #0
    ea9a:	4a2a      	ldr	r2, [pc, #168]	; (eb44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe4>)
    ea9c:	4b2a      	ldr	r3, [pc, #168]	; (eb48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe8>)
    ea9e:	f366 0802 	bfi	r8, r6, #0, #3
    eaa2:	1a9b      	subs	r3, r3, r2
    eaa4:	f367 08c5 	bfi	r8, r7, #3, #3
    eaa8:	08db      	lsrs	r3, r3, #3
    eaaa:	f363 188f 	bfi	r8, r3, #6, #10
    eaae:	f013 f8e9 	bl	21c84 <z_impl_z_errno>
    eab2:	6801      	ldr	r1, [r0, #0]
    eab4:	4642      	mov	r2, r8
    eab6:	4249      	negs	r1, r1
    eab8:	482a      	ldr	r0, [pc, #168]	; (eb64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x104>)
    eaba:	e7bf      	b.n	ea3c <do_gps_start+0xd8>
	ret = nrf_setsockopt(client.sock, NRF_SOL_GNSS, NRF_SO_GNSS_START,
    eabc:	2304      	movs	r3, #4
    eabe:	2207      	movs	r2, #7
    eac0:	9300      	str	r3, [sp, #0]
    eac2:	f44f 7101 	mov.w	r1, #516	; 0x204
    eac6:	ab09      	add	r3, sp, #36	; 0x24
    eac8:	6828      	ldr	r0, [r5, #0]
    eaca:	f005 fcff 	bl	144cc <nrf_setsockopt>
	if (ret != 0) {
    eace:	4604      	mov	r4, r0
    ead0:	b190      	cbz	r0, eaf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98>
		LOG_ERR("Failed to start GPS (err: %d)", -errno);
    ead2:	f04f 0800 	mov.w	r8, #0
    ead6:	4a1b      	ldr	r2, [pc, #108]	; (eb44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe4>)
    ead8:	4b1b      	ldr	r3, [pc, #108]	; (eb48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe8>)
    eada:	f366 0802 	bfi	r8, r6, #0, #3
    eade:	1a9b      	subs	r3, r3, r2
    eae0:	f367 08c5 	bfi	r8, r7, #3, #3
    eae4:	08db      	lsrs	r3, r3, #3
    eae6:	f363 188f 	bfi	r8, r3, #6, #10
    eaea:	f013 f8cb 	bl	21c84 <z_impl_z_errno>
    eaee:	6801      	ldr	r1, [r0, #0]
    eaf0:	4642      	mov	r2, r8
    eaf2:	4249      	negs	r1, r1
    eaf4:	481c      	ldr	r0, [pc, #112]	; (eb68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x108>)
    eaf6:	e7a1      	b.n	ea3c <do_gps_start+0xd8>
	if (gps_thread_id != NULL) {
    eaf8:	4e1c      	ldr	r6, [pc, #112]	; (eb6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10c>)
    eafa:	6830      	ldr	r0, [r6, #0]
    eafc:	b178      	cbz	r0, eb1e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbe>
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_RESUME);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_resume(thread);
    eafe:	f014 f8a3 	bl	22c48 <z_impl_k_thread_resume>
	client.running = true;
    eb02:	2301      	movs	r3, #1
	sprintf(buf, "#XGPSRUN: 1,%d\r\n", client.mask);
    eb04:	88aa      	ldrh	r2, [r5, #4]
    eb06:	491a      	ldr	r1, [pc, #104]	; (eb70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x110>)
    eb08:	4813      	ldr	r0, [pc, #76]	; (eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>)
	client.running = true;
    eb0a:	71ab      	strb	r3, [r5, #6]
	sprintf(buf, "#XGPSRUN: 1,%d\r\n", client.mask);
    eb0c:	f002 fde0 	bl	116d0 <sprintf>
	client.callback(buf);
    eb10:	68ab      	ldr	r3, [r5, #8]
    eb12:	4811      	ldr	r0, [pc, #68]	; (eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>)
    eb14:	4798      	blx	r3
}
    eb16:	4620      	mov	r0, r4
    eb18:	b00a      	add	sp, #40	; 0x28
    eb1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    eb1e:	230e      	movs	r3, #14
    eb20:	e9cd 4404 	strd	r4, r4, [sp, #16]
    eb24:	e9cd 4302 	strd	r4, r3, [sp, #8]
    eb28:	e9cd 4400 	strd	r4, r4, [sp]
    eb2c:	4b11      	ldr	r3, [pc, #68]	; (eb74 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x114>)
    eb2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    eb32:	4911      	ldr	r1, [pc, #68]	; (eb78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x118>)
    eb34:	4811      	ldr	r0, [pc, #68]	; (eb7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11c>)
    eb36:	f014 f837 	bl	22ba8 <z_impl_k_thread_create>
		gps_thread_id = k_thread_create(&gps_thread, gps_thread_stack,
    eb3a:	6030      	str	r0, [r6, #0]
    eb3c:	e7e1      	b.n	eb02 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa2>
    eb3e:	bf00      	nop
    eb40:	2002010c 	.word	0x2002010c
    eb44:	00026560 	.word	0x00026560
    eb48:	00026590 	.word	0x00026590
    eb4c:	000280ed 	.word	0x000280ed
    eb50:	000281b1 	.word	0x000281b1
    eb54:	000281c6 	.word	0x000281c6
    eb58:	2002737c 	.word	0x2002737c
    eb5c:	0002810d 	.word	0x0002810d
    eb60:	00028135 	.word	0x00028135
    eb64:	00028160 	.word	0x00028160
    eb68:	00028182 	.word	0x00028182
    eb6c:	200201c8 	.word	0x200201c8
    eb70:	000281a0 	.word	0x000281a0
    eb74:	0000eb81 	.word	0x0000eb81
    eb78:	20027550 	.word	0x20027550
    eb7c:	20020118 	.word	0x20020118

0000eb80 <gps_thread_fn>:
{
    eb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (nrf_recv(client.sock, &gps_data, sizeof(gps_data), 0)
    eb84:	4f63      	ldr	r7, [pc, #396]	; (ed14 <gps_thread_fn+0x194>)
    eb86:	4b64      	ldr	r3, [pc, #400]	; (ed18 <gps_thread_fn+0x198>)
    eb88:	463d      	mov	r5, r7
				LOG_INF("GPS FIX client.has_fix");	
    eb8a:	4a64      	ldr	r2, [pc, #400]	; (ed1c <gps_thread_fn+0x19c>)
{
    eb8c:	b087      	sub	sp, #28
				LOG_INF("GPS FIX client.has_fix");	
    eb8e:	1a9b      	subs	r3, r3, r2
    eb90:	f3c3 03c9 	ubfx	r3, r3, #3, #10
		if (nrf_recv(client.sock, &gps_data, sizeof(gps_data), 0)
    eb94:	4c62      	ldr	r4, [pc, #392]	; (ed20 <gps_thread_fn+0x1a0>)
				LOG_INF("GPS FIX client.has_fix");	
    eb96:	9305      	str	r3, [sp, #20]
		if (nrf_recv(client.sock, &gps_data, sizeof(gps_data), 0)
    eb98:	2300      	movs	r3, #0
    eb9a:	22d8      	movs	r2, #216	; 0xd8
    eb9c:	4960      	ldr	r1, [pc, #384]	; (ed20 <gps_thread_fn+0x1a0>)
    eb9e:	6838      	ldr	r0, [r7, #0]
    eba0:	f005 fc30 	bl	14404 <nrf_recv>
    eba4:	2800      	cmp	r0, #0
    eba6:	dc24      	bgt.n	ebf2 <gps_thread_fn+0x72>
			LOG_ERR("GPS nrf_recv(): %d", -errno);
    eba8:	2301      	movs	r3, #1
    ebaa:	f04f 0400 	mov.w	r4, #0
    ebae:	f363 0402 	bfi	r4, r3, #0, #3
    ebb2:	9b05      	ldr	r3, [sp, #20]
    ebb4:	f36f 04c5 	bfc	r4, #3, #3
    ebb8:	f363 148f 	bfi	r4, r3, #6, #10
    ebbc:	f013 f862 	bl	21c84 <z_impl_z_errno>
    ebc0:	6801      	ldr	r1, [r0, #0]
    ebc2:	4622      	mov	r2, r4
    ebc4:	4249      	negs	r1, r1
    ebc6:	4857      	ldr	r0, [pc, #348]	; (ed24 <gps_thread_fn+0x1a4>)
    ebc8:	f015 f942 	bl	23e50 <log_1>
    ebcc:	f013 f85a 	bl	21c84 <z_impl_z_errno>
			sprintf(buf, "#XGPSRUN: %d\r\n", -errno);
    ebd0:	6802      	ldr	r2, [r0, #0]
    ebd2:	4955      	ldr	r1, [pc, #340]	; (ed28 <gps_thread_fn+0x1a8>)
    ebd4:	4252      	negs	r2, r2
    ebd6:	4855      	ldr	r0, [pc, #340]	; (ed2c <gps_thread_fn+0x1ac>)
    ebd8:	f002 fd7a 	bl	116d0 <sprintf>
			client.callback(buf);
    ebdc:	68bb      	ldr	r3, [r7, #8]
    ebde:	4853      	ldr	r0, [pc, #332]	; (ed2c <gps_thread_fn+0x1ac>)
    ebe0:	4798      	blx	r3
			nrf_close(client.sock);
    ebe2:	6838      	ldr	r0, [r7, #0]
    ebe4:	f005 fbae 	bl	14344 <nrf_close>
			client.running = false;
    ebe8:	2300      	movs	r3, #0
    ebea:	71bb      	strb	r3, [r7, #6]
}
    ebec:	b007      	add	sp, #28
    ebee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (gps_data.data_id != NRF_GNSS_PVT_DATA_ID || client.has_fix) {
    ebf2:	7823      	ldrb	r3, [r4, #0]
    ebf4:	2b01      	cmp	r3, #1
    ebf6:	d12d      	bne.n	ec54 <gps_thread_fn+0xd4>
    ebf8:	79fa      	ldrb	r2, [r7, #7]
    ebfa:	bb5a      	cbnz	r2, ec54 <gps_thread_fn+0xd4>
	u8_t unhealthy = 0;
    ebfc:	4611      	mov	r1, r2
	u8_t in_fix = 0;
    ebfe:	4613      	mov	r3, r2
	u8_t tracked = 0;
    ec00:	4616      	mov	r6, r2
    ec02:	eb04 0c02 	add.w	ip, r4, r2
		if ((gps_data.pvt.sv[i].sv > 0) &&
    ec06:	f8bc 0046 	ldrh.w	r0, [ip, #70]	; 0x46
    ec0a:	3801      	subs	r0, #1
    ec0c:	281f      	cmp	r0, #31
    ec0e:	d80d      	bhi.n	ec2c <gps_thread_fn+0xac>
			if (IS_FIX(gps_data.pvt.sv[i].flags)) {
    ec10:	f89c 0050 	ldrb.w	r0, [ip, #80]	; 0x50
			tracked++;
    ec14:	3601      	adds	r6, #1
			if (IS_FIX(gps_data.pvt.sv[i].flags)) {
    ec16:	f010 0f01 	tst.w	r0, #1
				in_fix++;
    ec1a:	bf1c      	itt	ne
    ec1c:	3301      	addne	r3, #1
    ec1e:	b2db      	uxtbne	r3, r3
			if (IS_UNHEALTHY(gps_data.pvt.sv[i].flags)) {
    ec20:	0700      	lsls	r0, r0, #28
				unhealthy++;
    ec22:	bf48      	it	mi
    ec24:	3101      	addmi	r1, #1
			tracked++;
    ec26:	b2f6      	uxtb	r6, r6
				unhealthy++;
    ec28:	bf48      	it	mi
    ec2a:	b2c9      	uxtbmi	r1, r1
    ec2c:	320c      	adds	r2, #12
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
    ec2e:	2a90      	cmp	r2, #144	; 0x90
    ec30:	d1e7      	bne.n	ec02 <gps_thread_fn+0x82>
	if (last_tracked != tracked) {
    ec32:	f8df b11c 	ldr.w	fp, [pc, #284]	; ed50 <gps_thread_fn+0x1d0>
    ec36:	f89b 2000 	ldrb.w	r2, [fp]
    ec3a:	42b2      	cmp	r2, r6
    ec3c:	d00a      	beq.n	ec54 <gps_thread_fn+0xd4>
		sprintf(buf, "#XGPSS: tracking %d using %d unhealthy %d\r\n",
    ec3e:	9100      	str	r1, [sp, #0]
    ec40:	4632      	mov	r2, r6
    ec42:	493b      	ldr	r1, [pc, #236]	; (ed30 <gps_thread_fn+0x1b0>)
    ec44:	4839      	ldr	r0, [pc, #228]	; (ed2c <gps_thread_fn+0x1ac>)
    ec46:	f002 fd43 	bl	116d0 <sprintf>
		client.callback(buf);
    ec4a:	68ab      	ldr	r3, [r5, #8]
    ec4c:	4837      	ldr	r0, [pc, #220]	; (ed2c <gps_thread_fn+0x1ac>)
    ec4e:	4798      	blx	r3
		last_tracked = tracked;
    ec50:	f88b 6000 	strb.w	r6, [fp]
		switch (gps_data.data_id) {
    ec54:	7826      	ldrb	r6, [r4, #0]
    ec56:	2e01      	cmp	r6, #1
    ec58:	d017      	beq.n	ec8a <gps_thread_fn+0x10a>
    ec5a:	2e02      	cmp	r6, #2
    ec5c:	d19c      	bne.n	eb98 <gps_thread_fn+0x18>
			if (client.has_fix) {
    ec5e:	79eb      	ldrb	r3, [r5, #7]
    ec60:	2b00      	cmp	r3, #0
    ec62:	d099      	beq.n	eb98 <gps_thread_fn+0x18>
				LOG_INF("GPS FIX client.has_fix");	
    ec64:	2303      	movs	r3, #3
    ec66:	f363 0802 	bfi	r8, r3, #0, #3
    ec6a:	9b05      	ldr	r3, [sp, #20]
    ec6c:	f36f 08c5 	bfc	r8, #3, #3
    ec70:	f363 188f 	bfi	r8, r3, #6, #10
    ec74:	4641      	mov	r1, r8
    ec76:	482f      	ldr	r0, [pc, #188]	; (ed34 <gps_thread_fn+0x1b4>)
    ec78:	f015 f8dd 	bl	23e36 <log_0>
				client.callback("#XGPSN: ");
    ec7c:	68ab      	ldr	r3, [r5, #8]
    ec7e:	482e      	ldr	r0, [pc, #184]	; (ed38 <gps_thread_fn+0x1b8>)
    ec80:	4798      	blx	r3
				client.callback(gps_data.nmea);
    ec82:	68ab      	ldr	r3, [r5, #8]
    ec84:	482d      	ldr	r0, [pc, #180]	; (ed3c <gps_thread_fn+0x1bc>)
    ec86:	4798      	blx	r3
    ec88:	e786      	b.n	eb98 <gps_thread_fn+0x18>
			if (IS_FIX(gps_data.pvt.flags)) {
    ec8a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    ec8e:	07db      	lsls	r3, r3, #31
    ec90:	d582      	bpl.n	eb98 <gps_thread_fn+0x18>
				LOG_INF("GPS FIX PVT DATA");
    ec92:	f04f 0b03 	mov.w	fp, #3
    ec96:	9b05      	ldr	r3, [sp, #20]
    ec98:	f36b 0a02 	bfi	sl, fp, #0, #3
    ec9c:	f36f 0ac5 	bfc	sl, #3, #3
    eca0:	f363 1a8f 	bfi	sl, r3, #6, #10
    eca4:	4651      	mov	r1, sl
    eca6:	4826      	ldr	r0, [pc, #152]	; (ed40 <gps_thread_fn+0x1c0>)
    eca8:	f015 f8c5 	bl	23e36 <log_0>
	sprintf(buf, "#XGPSP: long %f lat %f\r\n",
    ecac:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    ecb0:	e9cd 2300 	strd	r2, r3, [sp]
    ecb4:	4923      	ldr	r1, [pc, #140]	; (ed44 <gps_thread_fn+0x1c4>)
    ecb6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    ecba:	481c      	ldr	r0, [pc, #112]	; (ed2c <gps_thread_fn+0x1ac>)
    ecbc:	f002 fd08 	bl	116d0 <sprintf>
	client.callback(buf);
    ecc0:	68ab      	ldr	r3, [r5, #8]
    ecc2:	481a      	ldr	r0, [pc, #104]	; (ed2c <gps_thread_fn+0x1ac>)
    ecc4:	4798      	blx	r3
	sprintf(buf, "#XGPSP: %04u-%02u-%02u %02u:%02u:%02u\r\n",
    ecc6:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
    ecca:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    eccc:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    ecd0:	9103      	str	r1, [sp, #12]
    ecd2:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    ecd6:	4815      	ldr	r0, [pc, #84]	; (ed2c <gps_thread_fn+0x1ac>)
    ecd8:	9102      	str	r1, [sp, #8]
    ecda:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
	LOG_INF("Updating current GPS data");
    ecde:	f36b 0902 	bfi	r9, fp, #0, #3
	sprintf(buf, "#XGPSP: %04u-%02u-%02u %02u:%02u:%02u\r\n",
    ece2:	9101      	str	r1, [sp, #4]
    ece4:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
	LOG_INF("Updating current GPS data");
    ece8:	f36f 09c5 	bfc	r9, #3, #3
	sprintf(buf, "#XGPSP: %04u-%02u-%02u %02u:%02u:%02u\r\n",
    ecec:	9100      	str	r1, [sp, #0]
    ecee:	4916      	ldr	r1, [pc, #88]	; (ed48 <gps_thread_fn+0x1c8>)
    ecf0:	f002 fcee 	bl	116d0 <sprintf>
	client.callback(buf);
    ecf4:	68ab      	ldr	r3, [r5, #8]
    ecf6:	480d      	ldr	r0, [pc, #52]	; (ed2c <gps_thread_fn+0x1ac>)
    ecf8:	4798      	blx	r3
	LOG_INF("Updating current GPS data");
    ecfa:	9b05      	ldr	r3, [sp, #20]
    ecfc:	4813      	ldr	r0, [pc, #76]	; (ed4c <gps_thread_fn+0x1cc>)
    ecfe:	f363 198f 	bfi	r9, r3, #6, #10
    ed02:	4649      	mov	r1, r9
    ed04:	f015 f897 	bl	23e36 <log_0>
				if (!client.has_fix) {
    ed08:	79eb      	ldrb	r3, [r5, #7]
    ed0a:	2b00      	cmp	r3, #0
    ed0c:	f47f af44 	bne.w	eb98 <gps_thread_fn+0x18>
					client.has_fix = true;
    ed10:	71ee      	strb	r6, [r5, #7]
    ed12:	e741      	b.n	eb98 <gps_thread_fn+0x18>
    ed14:	2002010c 	.word	0x2002010c
    ed18:	00026590 	.word	0x00026590
    ed1c:	00026560 	.word	0x00026560
    ed20:	20020000 	.word	0x20020000
    ed24:	00028213 	.word	0x00028213
    ed28:	000281c6 	.word	0x000281c6
    ed2c:	2002737c 	.word	0x2002737c
    ed30:	00028226 	.word	0x00028226
    ed34:	000282be 	.word	0x000282be
    ed38:	000282d5 	.word	0x000282d5
    ed3c:	20020008 	.word	0x20020008
    ed40:	00028252 	.word	0x00028252
    ed44:	00028263 	.word	0x00028263
    ed48:	0002827c 	.word	0x0002827c
    ed4c:	000282a4 	.word	0x000282a4
    ed50:	200273bc 	.word	0x200273bc

0000ed54 <handle_at_gpsrun>:
 *  AT#XGPSRUN=<op>[,<mask>]
 *  AT#XGPSRUN?
 *  AT#XGPSRUN=? TEST command not supported
 */
static int handle_at_gpsrun(const char *at_cmd, size_t param_offset)
{
    ed54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    ed56:	460e      	mov	r6, r1
	LOG_INF("handle_at_gpsrun");
    ed58:	2303      	movs	r3, #3
    ed5a:	f04f 0100 	mov.w	r1, #0
{
    ed5e:	4604      	mov	r4, r0
	LOG_INF("handle_at_gpsrun");
    ed60:	f363 0102 	bfi	r1, r3, #0, #3
    ed64:	4d58      	ldr	r5, [pc, #352]	; (eec8 <handle_at_gpsrun+0x174>)
    ed66:	4b59      	ldr	r3, [pc, #356]	; (eecc <handle_at_gpsrun+0x178>)
    ed68:	f36f 01c5 	bfc	r1, #3, #3
    ed6c:	1aed      	subs	r5, r5, r3
    ed6e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    ed72:	f365 118f 	bfi	r1, r5, #6, #10
    ed76:	4856      	ldr	r0, [pc, #344]	; (eed0 <handle_at_gpsrun+0x17c>)
    ed78:	f015 f85d 	bl	23e36 <log_0>
	int err = -EINVAL;
	char *at_param = (char *)at_cmd + param_offset;
	u16_t op;

	if (*(at_param) == '=') {
    ed7c:	5da3      	ldrb	r3, [r4, r6]
	char *at_param = (char *)at_cmd + param_offset;
    ed7e:	19a2      	adds	r2, r4, r6
	if (*(at_param) == '=') {
    ed80:	2b3d      	cmp	r3, #61	; 0x3d
    ed82:	f040 808b 	bne.w	ee9c <handle_at_gpsrun+0x148>
		at_param++;
		if (*(at_param) == '?') {
    ed86:	7853      	ldrb	r3, [r2, #1]
    ed88:	2b3f      	cmp	r3, #63	; 0x3f
    ed8a:	d104      	bne.n	ed96 <handle_at_gpsrun+0x42>
			return err;
    ed8c:	f06f 0415 	mvn.w	r4, #21
		client.callback(buf);
		err = 0;
	}

	return err;
}
    ed90:	4620      	mov	r0, r4
    ed92:	b004      	add	sp, #16
    ed94:	bd70      	pop	{r4, r5, r6, pc}
		err = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    ed96:	4620      	mov	r0, r4
    ed98:	4a4e      	ldr	r2, [pc, #312]	; (eed4 <handle_at_gpsrun+0x180>)
    ed9a:	2100      	movs	r1, #0
    ed9c:	f016 fd2e 	bl	257fc <at_parser_params_from_str>
		if (err < 0) {
    eda0:	1e04      	subs	r4, r0, #0
    eda2:	dbf5      	blt.n	ed90 <handle_at_gpsrun+0x3c>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    eda4:	484b      	ldr	r0, [pc, #300]	; (eed4 <handle_at_gpsrun+0x180>)
    eda6:	f016 fe2f 	bl	25a08 <at_params_valid_count_get>
    edaa:	2801      	cmp	r0, #1
    edac:	d9ee      	bls.n	ed8c <handle_at_gpsrun+0x38>
		err = at_params_short_get(&m_param_list, 1, &op);
    edae:	f10d 020a 	add.w	r2, sp, #10
    edb2:	2101      	movs	r1, #1
    edb4:	4847      	ldr	r0, [pc, #284]	; (eed4 <handle_at_gpsrun+0x180>)
    edb6:	f016 fdf2 	bl	2599e <at_params_short_get>
		if (err < 0) {
    edba:	1e04      	subs	r4, r0, #0
    edbc:	dbe8      	blt.n	ed90 <handle_at_gpsrun+0x3c>
		if (op == 1) {
    edbe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    edc2:	2b01      	cmp	r3, #1
    edc4:	d129      	bne.n	ee1a <handle_at_gpsrun+0xc6>
			if (at_params_valid_count_get(&m_param_list) > 2) {
    edc6:	4843      	ldr	r0, [pc, #268]	; (eed4 <handle_at_gpsrun+0x180>)
    edc8:	f016 fe1e 	bl	25a08 <at_params_valid_count_get>
    edcc:	2802      	cmp	r0, #2
    edce:	d906      	bls.n	edde <handle_at_gpsrun+0x8a>
				err = at_params_short_get(&m_param_list, 2,
    edd0:	4a41      	ldr	r2, [pc, #260]	; (eed8 <handle_at_gpsrun+0x184>)
    edd2:	2102      	movs	r1, #2
    edd4:	483f      	ldr	r0, [pc, #252]	; (eed4 <handle_at_gpsrun+0x180>)
    edd6:	f016 fde2 	bl	2599e <at_params_short_get>
				if (err < 0) {
    edda:	1e04      	subs	r4, r0, #0
    eddc:	dbd8      	blt.n	ed90 <handle_at_gpsrun+0x3c>
			if (client.running) {
    edde:	4b3f      	ldr	r3, [pc, #252]	; (eedc <handle_at_gpsrun+0x188>)
				LOG_WRN("GPS is running");
    ede0:	f04f 0100 	mov.w	r1, #0
			if (client.running) {
    ede4:	799b      	ldrb	r3, [r3, #6]
    ede6:	b153      	cbz	r3, edfe <handle_at_gpsrun+0xaa>
				LOG_WRN("GPS is running");
    ede8:	2302      	movs	r3, #2
    edea:	f363 0102 	bfi	r1, r3, #0, #3
    edee:	f36f 01c5 	bfc	r1, #3, #3
    edf2:	483b      	ldr	r0, [pc, #236]	; (eee0 <handle_at_gpsrun+0x18c>)
    edf4:	f365 118f 	bfi	r1, r5, #6, #10
				LOG_WRN("GPS is not running");
    edf8:	f015 f81d 	bl	23e36 <log_0>
    edfc:	e7c8      	b.n	ed90 <handle_at_gpsrun+0x3c>
				LOG_INF("running do_gps_start from at handler");
    edfe:	2203      	movs	r2, #3
    ee00:	f362 0102 	bfi	r1, r2, #0, #3
    ee04:	f363 01c5 	bfi	r1, r3, #3, #3
    ee08:	f365 118f 	bfi	r1, r5, #6, #10
    ee0c:	4835      	ldr	r0, [pc, #212]	; (eee4 <handle_at_gpsrun+0x190>)
    ee0e:	f015 f812 	bl	23e36 <log_0>
				err = do_gps_start();
    ee12:	f7ff fda7 	bl	e964 <do_gps_start>
    ee16:	4604      	mov	r4, r0
    ee18:	e7ba      	b.n	ed90 <handle_at_gpsrun+0x3c>
		} else if (op == 0) {
    ee1a:	2b00      	cmp	r3, #0
    ee1c:	d1b8      	bne.n	ed90 <handle_at_gpsrun+0x3c>
			if (!client.running) {
    ee1e:	4e2f      	ldr	r6, [pc, #188]	; (eedc <handle_at_gpsrun+0x188>)
    ee20:	79b2      	ldrb	r2, [r6, #6]
    ee22:	b952      	cbnz	r2, ee3a <handle_at_gpsrun+0xe6>
				LOG_WRN("GPS is not running");
    ee24:	f04f 0100 	mov.w	r1, #0
    ee28:	2302      	movs	r3, #2
    ee2a:	f363 0102 	bfi	r1, r3, #0, #3
    ee2e:	f362 01c5 	bfi	r1, r2, #3, #3
    ee32:	f365 118f 	bfi	r1, r5, #6, #10
    ee36:	482c      	ldr	r0, [pc, #176]	; (eee8 <handle_at_gpsrun+0x194>)
    ee38:	e7de      	b.n	edf8 <handle_at_gpsrun+0xa4>
	if (client.sock != INVALID_SOCKET) {
    ee3a:	6830      	ldr	r0, [r6, #0]
	nrf_gnss_delete_mask_t	delete_mask  = 0;
    ee3c:	9303      	str	r3, [sp, #12]
	if (client.sock != INVALID_SOCKET) {
    ee3e:	1c43      	adds	r3, r0, #1
    ee40:	d03a      	beq.n	eeb8 <handle_at_gpsrun+0x164>
		ret = nrf_setsockopt(client.sock, NRF_SOL_GNSS,
    ee42:	2304      	movs	r3, #4
    ee44:	2208      	movs	r2, #8
    ee46:	9300      	str	r3, [sp, #0]
    ee48:	f44f 7101 	mov.w	r1, #516	; 0x204
    ee4c:	ab03      	add	r3, sp, #12
    ee4e:	f005 fb3d 	bl	144cc <nrf_setsockopt>
		if (ret != 0) {
    ee52:	4604      	mov	r4, r0
    ee54:	b1a8      	cbz	r0, ee82 <handle_at_gpsrun+0x12e>
			LOG_ERR("Failed to stop GPS (err: %d)", -errno);
    ee56:	2301      	movs	r3, #1
    ee58:	f04f 0400 	mov.w	r4, #0
    ee5c:	f363 0402 	bfi	r4, r3, #0, #3
    ee60:	f36f 04c5 	bfc	r4, #3, #3
    ee64:	f365 148f 	bfi	r4, r5, #6, #10
    ee68:	f012 ff0c 	bl	21c84 <z_impl_z_errno>
    ee6c:	6801      	ldr	r1, [r0, #0]
    ee6e:	4622      	mov	r2, r4
    ee70:	4249      	negs	r1, r1
    ee72:	481e      	ldr	r0, [pc, #120]	; (eeec <handle_at_gpsrun+0x198>)
    ee74:	f014 ffec 	bl	23e50 <log_1>
    ee78:	f012 ff04 	bl	21c84 <z_impl_z_errno>
			ret = -errno;
    ee7c:	6804      	ldr	r4, [r0, #0]
    ee7e:	4264      	negs	r4, r4
    ee80:	e786      	b.n	ed90 <handle_at_gpsrun+0x3c>
			k_thread_suspend(gps_thread_id);
    ee82:	4b1b      	ldr	r3, [pc, #108]	; (eef0 <handle_at_gpsrun+0x19c>)
    ee84:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_suspend(thread);
    ee86:	f013 febf 	bl	22c08 <z_impl_k_thread_suspend>
			nrf_close(client.sock);
    ee8a:	6830      	ldr	r0, [r6, #0]
    ee8c:	f005 fa5a 	bl	14344 <nrf_close>
			client.running = false;
    ee90:	2300      	movs	r3, #0
			client.callback("#XGPSRUN: 0\r\n");
    ee92:	4818      	ldr	r0, [pc, #96]	; (eef4 <handle_at_gpsrun+0x1a0>)
			client.running = false;
    ee94:	71b3      	strb	r3, [r6, #6]
			client.callback("#XGPSRUN: 0\r\n");
    ee96:	68b3      	ldr	r3, [r6, #8]
    ee98:	4798      	blx	r3
    ee9a:	e779      	b.n	ed90 <handle_at_gpsrun+0x3c>
	} else if (*(at_param) == '?') {
    ee9c:	2b3f      	cmp	r3, #63	; 0x3f
    ee9e:	f47f af75 	bne.w	ed8c <handle_at_gpsrun+0x38>
		if (client.running) {
    eea2:	4c0e      	ldr	r4, [pc, #56]	; (eedc <handle_at_gpsrun+0x188>)
    eea4:	79a3      	ldrb	r3, [r4, #6]
    eea6:	b14b      	cbz	r3, eebc <handle_at_gpsrun+0x168>
			sprintf(buf, "#XGPSRUN: 1,%d\r\n", client.mask);
    eea8:	88a2      	ldrh	r2, [r4, #4]
    eeaa:	4913      	ldr	r1, [pc, #76]	; (eef8 <handle_at_gpsrun+0x1a4>)
    eeac:	4813      	ldr	r0, [pc, #76]	; (eefc <handle_at_gpsrun+0x1a8>)
    eeae:	f002 fc0f 	bl	116d0 <sprintf>
		client.callback(buf);
    eeb2:	68a3      	ldr	r3, [r4, #8]
    eeb4:	4811      	ldr	r0, [pc, #68]	; (eefc <handle_at_gpsrun+0x1a8>)
    eeb6:	4798      	blx	r3
		err = 0;
    eeb8:	2400      	movs	r4, #0
    eeba:	e769      	b.n	ed90 <handle_at_gpsrun+0x3c>
			sprintf(buf, "#XGPSRUN: 0\r\n");
    eebc:	490d      	ldr	r1, [pc, #52]	; (eef4 <handle_at_gpsrun+0x1a0>)
    eebe:	480f      	ldr	r0, [pc, #60]	; (eefc <handle_at_gpsrun+0x1a8>)
    eec0:	f002 fc06 	bl	116d0 <sprintf>
    eec4:	e7f5      	b.n	eeb2 <handle_at_gpsrun+0x15e>
    eec6:	bf00      	nop
    eec8:	00026590 	.word	0x00026590
    eecc:	00026560 	.word	0x00026560
    eed0:	000282de 	.word	0x000282de
    eed4:	200200e0 	.word	0x200200e0
    eed8:	20020110 	.word	0x20020110
    eedc:	2002010c 	.word	0x2002010c
    eee0:	000282ef 	.word	0x000282ef
    eee4:	000282fe 	.word	0x000282fe
    eee8:	00028323 	.word	0x00028323
    eeec:	00028336 	.word	0x00028336
    eef0:	200201c8 	.word	0x200201c8
    eef4:	00028353 	.word	0x00028353
    eef8:	000281a0 	.word	0x000281a0
    eefc:	2002737c 	.word	0x2002737c

0000ef00 <slm_at_gps_parse>:

/**@brief API to handle GPS AT commands
 */
int slm_at_gps_parse(const u8_t *param, u8_t length)
{
    ef00:	b538      	push	{r3, r4, r5, lr}
    ef02:	4604      	mov	r4, r0
	int ret = -ENOTSUP;

	ARG_UNUSED(length);

	for (int i = 0; i < AT_GPS_MAX; i++) {
		u8_t cmd_len = strlen(m_at_list[i].string_upper);
    ef04:	480c      	ldr	r0, [pc, #48]	; (ef38 <slm_at_gps_parse+0x38>)
    ef06:	f015 fca7 	bl	24858 <strlen>
    ef0a:	b2c5      	uxtb	r5, r0

		if (strncmp(param, m_at_list[i].string_upper,
    ef0c:	462a      	mov	r2, r5
    ef0e:	490a      	ldr	r1, [pc, #40]	; (ef38 <slm_at_gps_parse+0x38>)
    ef10:	4620      	mov	r0, r4
    ef12:	f015 fcb6 	bl	24882 <strncmp>
    ef16:	b928      	cbnz	r0, ef24 <slm_at_gps_parse+0x24>
			cmd_len) == 0) {
			ret = m_at_list[i].handler(param, cmd_len);
			break;
		} else if (strncmp(param, m_at_list[i].string_lower,
			cmd_len) == 0) {
			ret = m_at_list[i].handler(param, cmd_len);
    ef18:	4629      	mov	r1, r5
    ef1a:	4620      	mov	r0, r4
			break;
		}
	}

	return ret;
}
    ef1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			ret = m_at_list[i].handler(param, cmd_len);
    ef20:	f7ff bf18 	b.w	ed54 <handle_at_gpsrun>
		} else if (strncmp(param, m_at_list[i].string_lower,
    ef24:	462a      	mov	r2, r5
    ef26:	4905      	ldr	r1, [pc, #20]	; (ef3c <slm_at_gps_parse+0x3c>)
    ef28:	4620      	mov	r0, r4
    ef2a:	f015 fcaa 	bl	24882 <strncmp>
    ef2e:	2800      	cmp	r0, #0
    ef30:	d0f2      	beq.n	ef18 <slm_at_gps_parse+0x18>
}
    ef32:	f06f 0022 	mvn.w	r0, #34	; 0x22
    ef36:	bd38      	pop	{r3, r4, r5, pc}
    ef38:	00028385 	.word	0x00028385
    ef3c:	00028390 	.word	0x00028390

0000ef40 <slm_at_gps_init>:
}

/**@brief API to initialize GPS AT commands handler
 */
int slm_at_gps_init(at_cmd_handler_t callback)
{
    ef40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef44:	4b45      	ldr	r3, [pc, #276]	; (f05c <slm_at_gps_init+0x11c>)
    ef46:	4d46      	ldr	r5, [pc, #280]	; (f060 <slm_at_gps_init+0x120>)
    ef48:	b085      	sub	sp, #20
    ef4a:	1aed      	subs	r5, r5, r3
    ef4c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
	if (callback == NULL) {
    ef50:	b980      	cbnz	r0, ef74 <slm_at_gps_init+0x34>
		LOG_ERR("No callback");
    ef52:	2301      	movs	r3, #1
    ef54:	f04f 0100 	mov.w	r1, #0
    ef58:	f363 0102 	bfi	r1, r3, #0, #3
    ef5c:	f360 01c5 	bfi	r1, r0, #3, #3
    ef60:	f365 118f 	bfi	r1, r5, #6, #10
    ef64:	483f      	ldr	r0, [pc, #252]	; (f064 <slm_at_gps_init+0x124>)
    ef66:	f014 ff66 	bl	23e36 <log_0>
		return -EINVAL;
    ef6a:	f06f 0015 	mvn.w	r0, #21
	client.callback = callback;
	gps_thread_id = NULL;
	enable_gps();
	do_gps_start();
	return 0;
}
    ef6e:	b005      	add	sp, #20
    ef70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	client.sock = INVALID_SOCKET;
    ef74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ef78:	4b3b      	ldr	r3, [pc, #236]	; (f068 <slm_at_gps_init+0x128>)
	client.running = false;
    ef7a:	2400      	movs	r4, #0
	client.sock = INVALID_SOCKET;
    ef7c:	601a      	str	r2, [r3, #0]
	client.mask =  NRF_GNSS_NMEA_GSV_MASK |
    ef7e:	221f      	movs	r2, #31
	client.callback = callback;
    ef80:	6098      	str	r0, [r3, #8]
	client.mask =  NRF_GNSS_NMEA_GSV_MASK |
    ef82:	809a      	strh	r2, [r3, #4]
	client.running = false;
    ef84:	719c      	strb	r4, [r3, #6]
	client.has_fix = false;
    ef86:	71dc      	strb	r4, [r3, #7]
	gps_thread_id = NULL;
    ef88:	4b38      	ldr	r3, [pc, #224]	; (f06c <slm_at_gps_init+0x12c>)
	LOG_INF("Initializing GPS Module");
    ef8a:	f04f 0100 	mov.w	r1, #0
	gps_thread_id = NULL;
    ef8e:	601c      	str	r4, [r3, #0]
	LOG_INF("Initializing GPS Module");
    ef90:	2303      	movs	r3, #3
    ef92:	f363 0102 	bfi	r1, r3, #0, #3
	return socket_ops->socket(family, type, proto);
    ef96:	4f36      	ldr	r7, [pc, #216]	; (f070 <slm_at_gps_init+0x130>)
    ef98:	f364 01c5 	bfi	r1, r4, #3, #3
    ef9c:	f365 118f 	bfi	r1, r5, #6, #10
    efa0:	4834      	ldr	r0, [pc, #208]	; (f074 <slm_at_gps_init+0x134>)
    efa2:	f014 ff48 	bl	23e36 <log_0>
    efa6:	683b      	ldr	r3, [r7, #0]
    efa8:	f240 2201 	movw	r2, #513	; 0x201
    efac:	681b      	ldr	r3, [r3, #0]
    efae:	4621      	mov	r1, r4
    efb0:	2066      	movs	r0, #102	; 0x66
    efb2:	4798      	blx	r3
	if (at_sock < 0) {
    efb4:	1e06      	subs	r6, r0, #0
    efb6:	9701      	str	r7, [sp, #4]
    efb8:	db22      	blt.n	f000 <slm_at_gps_init+0xc0>
    efba:	f8df b0c4 	ldr.w	fp, [pc, #196]	; f080 <slm_at_gps_init+0x140>
		if (memcmp(buf, "OK", 2) != 0) {
    efbe:	f8df a0c4 	ldr.w	sl, [pc, #196]	; f084 <slm_at_gps_init+0x144>
		LOG_INF("%s",gps_at_commands[i]);
    efc2:	2303      	movs	r3, #3
    efc4:	f363 0902 	bfi	r9, r3, #0, #3
    efc8:	f36f 09c5 	bfc	r9, #3, #3
    efcc:	eb0b 0804 	add.w	r8, fp, r4
    efd0:	f365 198f 	bfi	r9, r5, #6, #10
    efd4:	464a      	mov	r2, r9
    efd6:	4641      	mov	r1, r8
    efd8:	4827      	ldr	r0, [pc, #156]	; (f078 <slm_at_gps_init+0x138>)
    efda:	f014 ff39 	bl	23e50 <log_1>
		bytes_sent = send(at_sock, gps_at_commands[i],
    efde:	4640      	mov	r0, r8
    efe0:	f015 fc3a 	bl	24858 <strlen>
	return socket_ops->send(sock, buf, len, flags);
    efe4:	9b01      	ldr	r3, [sp, #4]
    efe6:	4602      	mov	r2, r0
    efe8:	681b      	ldr	r3, [r3, #0]
    efea:	4641      	mov	r1, r8
    efec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    efee:	4630      	mov	r0, r6
    eff0:	461f      	mov	r7, r3
    eff2:	2300      	movs	r3, #0
    eff4:	47b8      	blx	r7
		if (bytes_sent < 0) {
    eff6:	2800      	cmp	r0, #0
    eff8:	da06      	bge.n	f008 <slm_at_gps_init+0xc8>
			close(at_sock);
    effa:	4630      	mov	r0, r6
    effc:	f7ff fcac 	bl	e958 <close>
	do_gps_start();
    f000:	f7ff fcb0 	bl	e964 <do_gps_start>
	return 0;
    f004:	2000      	movs	r0, #0
    f006:	e7b2      	b.n	ef6e <slm_at_gps_init+0x2e>
	return socket_ops->recv(sock, buf, max_len, flags);
    f008:	9b01      	ldr	r3, [sp, #4]
    f00a:	2202      	movs	r2, #2
    f00c:	681b      	ldr	r3, [r3, #0]
    f00e:	a903      	add	r1, sp, #12
    f010:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
    f014:	4630      	mov	r0, r6
    f016:	2300      	movs	r3, #0
    f018:	47c0      	blx	r8
		} while (bytes_received == 0);
    f01a:	2800      	cmp	r0, #0
    f01c:	d0f4      	beq.n	f008 <slm_at_gps_init+0xc8>
		if (memcmp(buf, "OK", 2) != 0) {
    f01e:	2202      	movs	r2, #2
    f020:	4651      	mov	r1, sl
    f022:	a803      	add	r0, sp, #12
    f024:	f015 fc3c 	bl	248a0 <memcmp>
    f028:	4680      	mov	r8, r0
    f02a:	2800      	cmp	r0, #0
    f02c:	d1e5      	bne.n	effa <slm_at_gps_init+0xba>
	return z_impl_k_sleep(ms);
    f02e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    f032:	341f      	adds	r4, #31
    f034:	f013 fccc 	bl	229d0 <z_impl_k_sleep>
	for (int i = 0; i < ARRAY_SIZE(gps_at_commands); i++) {
    f038:	2c3e      	cmp	r4, #62	; 0x3e
    f03a:	d1c2      	bne.n	efc2 <slm_at_gps_init+0x82>
	close(at_sock);
    f03c:	4630      	mov	r0, r6
    f03e:	f7ff fc8b 	bl	e958 <close>
	LOG_INF("GPS Enabled");
    f042:	2303      	movs	r3, #3
    f044:	f04f 0100 	mov.w	r1, #0
    f048:	f363 0102 	bfi	r1, r3, #0, #3
    f04c:	f368 01c5 	bfi	r1, r8, #3, #3
    f050:	f365 118f 	bfi	r1, r5, #6, #10
    f054:	4809      	ldr	r0, [pc, #36]	; (f07c <slm_at_gps_init+0x13c>)
    f056:	f014 feee 	bl	23e36 <log_0>
    f05a:	e7d1      	b.n	f000 <slm_at_gps_init+0xc0>
    f05c:	00026560 	.word	0x00026560
    f060:	00026590 	.word	0x00026590
    f064:	00027fbf 	.word	0x00027fbf
    f068:	2002010c 	.word	0x2002010c
    f06c:	200201c8 	.word	0x200201c8
    f070:	20020314 	.word	0x20020314
    f074:	00028361 	.word	0x00028361
    f078:	00027f3c 	.word	0x00027f3c
    f07c:	00028379 	.word	0x00028379
    f080:	000281d5 	.word	0x000281d5
    f084:	00027ff9 	.word	0x00027ff9

0000f088 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    f088:	680b      	ldr	r3, [r1, #0]
    f08a:	3301      	adds	r3, #1
    f08c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    f08e:	4b01      	ldr	r3, [pc, #4]	; (f094 <char_out+0xc>)
    f090:	681b      	ldr	r3, [r3, #0]
    f092:	4718      	bx	r3
    f094:	2002d3a4 	.word	0x2002d3a4

0000f098 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    f098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f09c:	b085      	sub	sp, #20
    f09e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    f0a0:	469b      	mov	fp, r3
    f0a2:	2c01      	cmp	r4, #1
    f0a4:	bfb8      	it	lt
    f0a6:	2401      	movlt	r4, #1
    f0a8:	2b01      	cmp	r3, #1
    f0aa:	bf0c      	ite	eq
    f0ac:	2330      	moveq	r3, #48	; 0x30
    f0ae:	2320      	movne	r3, #32
    f0b0:	4616      	mov	r6, r2
    f0b2:	4682      	mov	sl, r0
    f0b4:	4688      	mov	r8, r1
    f0b6:	2501      	movs	r5, #1
    f0b8:	270a      	movs	r7, #10
    f0ba:	2200      	movs	r2, #0
    f0bc:	f8df 906c 	ldr.w	r9, [pc, #108]	; f12c <_printk_dec_ulong+0x94>
    f0c0:	9302      	str	r3, [sp, #8]
    f0c2:	fbb6 f3f9 	udiv	r3, r6, r9
    f0c6:	9301      	str	r3, [sp, #4]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    f0c8:	b90a      	cbnz	r2, f0ce <_printk_dec_ulong+0x36>
    f0ca:	45b1      	cmp	r9, r6
    f0cc:	d81c      	bhi.n	f108 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    f0ce:	9b01      	ldr	r3, [sp, #4]
    f0d0:	4641      	mov	r1, r8
    f0d2:	f103 0030 	add.w	r0, r3, #48	; 0x30
    f0d6:	47d0      	blx	sl
			found_largest_digit = 1;
    f0d8:	2201      	movs	r2, #1
			digits++;
    f0da:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    f0dc:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    f0de:	3f01      	subs	r7, #1
		remainder %= pos;
    f0e0:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
    f0e4:	230a      	movs	r3, #10
	while (pos >= 10) {
    f0e6:	2f01      	cmp	r7, #1
		pos /= 10;
    f0e8:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    f0ec:	d1e9      	bne.n	f0c2 <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
    f0ee:	4641      	mov	r1, r8
    f0f0:	f106 0030 	add.w	r0, r6, #48	; 0x30
    f0f4:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    f0f6:	f1bb 0f03 	cmp.w	fp, #3
    f0fa:	d102      	bne.n	f102 <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
    f0fc:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
    f0fe:	2c00      	cmp	r4, #0
    f100:	dc0e      	bgt.n	f120 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
    f102:	b005      	add	sp, #20
    f104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    f108:	42bc      	cmp	r4, r7
    f10a:	dbe7      	blt.n	f0dc <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    f10c:	f1bb 0f02 	cmp.w	fp, #2
    f110:	d8e4      	bhi.n	f0dc <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    f112:	4641      	mov	r1, r8
    f114:	9802      	ldr	r0, [sp, #8]
    f116:	9203      	str	r2, [sp, #12]
			digits++;
    f118:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    f11a:	47d0      	blx	sl
			digits++;
    f11c:	9a03      	ldr	r2, [sp, #12]
    f11e:	e7dd      	b.n	f0dc <_printk_dec_ulong+0x44>
			out(' ', ctx);
    f120:	4641      	mov	r1, r8
    f122:	2020      	movs	r0, #32
    f124:	47d0      	blx	sl
    f126:	3c01      	subs	r4, #1
    f128:	e7e9      	b.n	f0fe <_printk_dec_ulong+0x66>
    f12a:	bf00      	nop
    f12c:	3b9aca00 	.word	0x3b9aca00

0000f130 <__printk_hook_install>:
	_char_out = fn;
    f130:	4b01      	ldr	r3, [pc, #4]	; (f138 <__printk_hook_install+0x8>)
    f132:	6018      	str	r0, [r3, #0]
}
    f134:	4770      	bx	lr
    f136:	bf00      	nop
    f138:	2002d3a4 	.word	0x2002d3a4

0000f13c <vprintk>:
	struct out_context ctx = { 0 };
    f13c:	2300      	movs	r3, #0
{
    f13e:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
    f140:	ac02      	add	r4, sp, #8
    f142:	f844 3d04 	str.w	r3, [r4, #-4]!
	z_vprintk(char_out, &ctx, fmt, ap);
    f146:	4602      	mov	r2, r0
    f148:	460b      	mov	r3, r1
    f14a:	4803      	ldr	r0, [pc, #12]	; (f158 <vprintk+0x1c>)
    f14c:	4621      	mov	r1, r4
    f14e:	f014 fcc7 	bl	23ae0 <z_vprintk>
}
    f152:	b002      	add	sp, #8
    f154:	bd10      	pop	{r4, pc}
    f156:	bf00      	nop
    f158:	0000f089 	.word	0x0000f089

0000f15c <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    f15c:	f04f 0220 	mov.w	r2, #32
    f160:	f3ef 8311 	mrs	r3, BASEPRI
    f164:	f382 8811 	msr	BASEPRI, r2
    f168:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    f16c:	2101      	movs	r1, #1
    f16e:	4a04      	ldr	r2, [pc, #16]	; (f180 <nordicsemi_nrf91_init+0x24>)
    f170:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    f174:	f383 8811 	msr	BASEPRI, r3
    f178:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    f17c:	2000      	movs	r0, #0
    f17e:	4770      	bx	lr
    f180:	40039000 	.word	0x40039000

0000f184 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    f184:	4801      	ldr	r0, [pc, #4]	; (f18c <log_process_thread_timer_expiry_fn+0x8>)
    f186:	f013 bc51 	b.w	22a2c <z_impl_k_sem_give>
    f18a:	bf00      	nop
    f18c:	2002d540 	.word	0x2002d540

0000f190 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    f190:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    f192:	2200      	movs	r2, #0
{
    f194:	b087      	sub	sp, #28
		k_timer_init(&log_process_thread_timer,
    f196:	490d      	ldr	r1, [pc, #52]	; (f1cc <enable_logger+0x3c>)
    f198:	480d      	ldr	r0, [pc, #52]	; (f1d0 <enable_logger+0x40>)
    f19a:	f016 ff18 	bl	25fce <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f19e:	2400      	movs	r4, #0
    f1a0:	230e      	movs	r3, #14
    f1a2:	4d0c      	ldr	r5, [pc, #48]	; (f1d4 <enable_logger+0x44>)
    f1a4:	e9cd 4302 	strd	r4, r3, [sp, #8]
    f1a8:	e9cd 4404 	strd	r4, r4, [sp, #16]
    f1ac:	e9cd 4400 	strd	r4, r4, [sp]
    f1b0:	4b09      	ldr	r3, [pc, #36]	; (f1d8 <enable_logger+0x48>)
    f1b2:	f44f 7240 	mov.w	r2, #768	; 0x300
    f1b6:	4909      	ldr	r1, [pc, #36]	; (f1dc <enable_logger+0x4c>)
    f1b8:	4628      	mov	r0, r5
    f1ba:	f013 fcf5 	bl	22ba8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    f1be:	4908      	ldr	r1, [pc, #32]	; (f1e0 <enable_logger+0x50>)
    f1c0:	4628      	mov	r0, r5
    f1c2:	f016 fe60 	bl	25e86 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    f1c6:	4620      	mov	r0, r4
    f1c8:	b007      	add	sp, #28
    f1ca:	bd30      	pop	{r4, r5, pc}
    f1cc:	0000f185 	.word	0x0000f185
    f1d0:	200201e0 	.word	0x200201e0
    f1d4:	20020228 	.word	0x20020228
    f1d8:	0000f561 	.word	0x0000f561
    f1dc:	20027950 	.word	0x20027950
    f1e0:	000283b2 	.word	0x000283b2

0000f1e4 <log_core_init>:
{
    f1e4:	b508      	push	{r3, lr}
		log_msg_pool_init();
    f1e6:	f000 fa4b 	bl	f680 <log_msg_pool_init>
		log_list_init(&list);
    f1ea:	4809      	ldr	r0, [pc, #36]	; (f210 <log_core_init+0x2c>)
    f1ec:	f014 fe00 	bl	23df0 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    f1f0:	2304      	movs	r3, #4
    f1f2:	2234      	movs	r2, #52	; 0x34
    f1f4:	4807      	ldr	r0, [pc, #28]	; (f214 <log_core_init+0x30>)
    f1f6:	4908      	ldr	r1, [pc, #32]	; (f218 <log_core_init+0x34>)
    f1f8:	f016 fc27 	bl	25a4a <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    f1fc:	4b07      	ldr	r3, [pc, #28]	; (f21c <log_core_init+0x38>)
    f1fe:	4a08      	ldr	r2, [pc, #32]	; (f220 <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
    f200:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    f204:	601a      	str	r2, [r3, #0]
}
    f206:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    f20a:	f000 bc6f 	b.w	faec <log_output_timestamp_freq_set>
    f20e:	bf00      	nop
    f210:	200201d8 	.word	0x200201d8
    f214:	2002020c 	.word	0x2002020c
    f218:	2002b990 	.word	0x2002b990
    f21c:	2002d3a8 	.word	0x2002d3a8
    f220:	00023e2f 	.word	0x00023e2f

0000f224 <dropped_notify>:
{
    f224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f226:	2500      	movs	r5, #0
    f228:	4b0c      	ldr	r3, [pc, #48]	; (f25c <dropped_notify+0x38>)
    f22a:	e8d3 7fef 	ldaex	r7, [r3]
    f22e:	e8c3 5fe2 	stlex	r2, r5, [r3]
    f232:	2a00      	cmp	r2, #0
    f234:	d1f9      	bne.n	f22a <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    f236:	4c0a      	ldr	r4, [pc, #40]	; (f260 <dropped_notify+0x3c>)
    f238:	4e0a      	ldr	r6, [pc, #40]	; (f264 <dropped_notify+0x40>)
    f23a:	1b36      	subs	r6, r6, r4
    f23c:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    f23e:	42b5      	cmp	r5, r6
    f240:	db00      	blt.n	f244 <dropped_notify+0x20>
}
    f242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    f244:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    f246:	795b      	ldrb	r3, [r3, #5]
    f248:	b12b      	cbz	r3, f256 <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
    f24a:	6823      	ldr	r3, [r4, #0]
    f24c:	68db      	ldr	r3, [r3, #12]
    f24e:	b113      	cbz	r3, f256 <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
    f250:	4639      	mov	r1, r7
    f252:	4620      	mov	r0, r4
    f254:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    f256:	3501      	adds	r5, #1
    f258:	3410      	adds	r4, #16
    f25a:	e7f0      	b.n	f23e <dropped_notify+0x1a>
    f25c:	200201d0 	.word	0x200201d0
    f260:	000265e0 	.word	0x000265e0
    f264:	000265f0 	.word	0x000265f0

0000f268 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    f268:	4b04      	ldr	r3, [pc, #16]	; (f27c <log_dropped+0x14>)
    f26a:	e8d3 2fef 	ldaex	r2, [r3]
    f26e:	3201      	adds	r2, #1
    f270:	e8c3 2fe1 	stlex	r1, r2, [r3]
    f274:	2900      	cmp	r1, #0
    f276:	d1f8      	bne.n	f26a <log_dropped+0x2>
}
    f278:	4770      	bx	lr
    f27a:	bf00      	nop
    f27c:	200201d0 	.word	0x200201d0

0000f280 <log_source_name_get>:
    f280:	4a04      	ldr	r2, [pc, #16]	; (f294 <log_source_name_get+0x14>)
    f282:	4b05      	ldr	r3, [pc, #20]	; (f298 <log_source_name_get+0x18>)
    f284:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    f286:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    f28a:	bf34      	ite	cc
    f28c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    f290:	2000      	movcs	r0, #0
}
    f292:	4770      	bx	lr
    f294:	00026560 	.word	0x00026560
    f298:	000265e0 	.word	0x000265e0

0000f29c <log_backend_enable>:
	id += backend - log_backend_get(0);
    f29c:	4b09      	ldr	r3, [pc, #36]	; (f2c4 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    f29e:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    f2a0:	1ac3      	subs	r3, r0, r3
    f2a2:	111b      	asrs	r3, r3, #4
    f2a4:	3301      	adds	r3, #1
{
    f2a6:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    f2a8:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
    f2aa:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
    f2ac:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    f2ae:	4c06      	ldr	r4, [pc, #24]	; (f2c8 <log_backend_enable+0x2c>)
    f2b0:	715a      	strb	r2, [r3, #5]
    f2b2:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    f2b4:	6019      	str	r1, [r3, #0]
    f2b6:	b912      	cbnz	r2, f2be <log_backend_enable+0x22>
	z_impl_k_sem_give(sem);
    f2b8:	4804      	ldr	r0, [pc, #16]	; (f2cc <log_backend_enable+0x30>)
    f2ba:	f013 fbb7 	bl	22a2c <z_impl_k_sem_give>
	backend_attached = true;
    f2be:	2301      	movs	r3, #1
    f2c0:	7023      	strb	r3, [r4, #0]
}
    f2c2:	bd10      	pop	{r4, pc}
    f2c4:	000265e0 	.word	0x000265e0
    f2c8:	200273bd 	.word	0x200273bd
    f2cc:	2002d540 	.word	0x2002d540

0000f2d0 <log_init>:
{
    f2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f2d2:	4b0f      	ldr	r3, [pc, #60]	; (f310 <log_init+0x40>)
    f2d4:	e8d3 4fef 	ldaex	r4, [r3]
    f2d8:	1c62      	adds	r2, r4, #1
    f2da:	e8c3 2fe1 	stlex	r1, r2, [r3]
    f2de:	2900      	cmp	r1, #0
    f2e0:	d1f8      	bne.n	f2d4 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    f2e2:	b92c      	cbnz	r4, f2f0 <log_init+0x20>
	return __log_backends_end - __log_backends_start;
    f2e4:	4d0b      	ldr	r5, [pc, #44]	; (f314 <log_init+0x44>)
    f2e6:	4e0c      	ldr	r6, [pc, #48]	; (f318 <log_init+0x48>)
    f2e8:	1b76      	subs	r6, r6, r5
    f2ea:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    f2ec:	42b4      	cmp	r4, r6
    f2ee:	db00      	blt.n	f2f2 <log_init+0x22>
}
    f2f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f2f2:	0127      	lsls	r7, r4, #4
		if (backend->autostart) {
    f2f4:	19eb      	adds	r3, r5, r7
    f2f6:	7b1b      	ldrb	r3, [r3, #12]
    f2f8:	b143      	cbz	r3, f30c <log_init+0x3c>
			if (backend->api->init != NULL) {
    f2fa:	59eb      	ldr	r3, [r5, r7]
    f2fc:	695b      	ldr	r3, [r3, #20]
    f2fe:	b103      	cbz	r3, f302 <log_init+0x32>
				backend->api->init();
    f300:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    f302:	2204      	movs	r2, #4
    f304:	2100      	movs	r1, #0
    f306:	19e8      	adds	r0, r5, r7
    f308:	f7ff ffc8 	bl	f29c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    f30c:	3401      	adds	r4, #1
    f30e:	e7ed      	b.n	f2ec <log_init+0x1c>
    f310:	200201d4 	.word	0x200201d4
    f314:	000265e0 	.word	0x000265e0
    f318:	000265f0 	.word	0x000265f0

0000f31c <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    f31c:	4b14      	ldr	r3, [pc, #80]	; (f370 <log_strdup+0x54>)
{
    f31e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
    f320:	4298      	cmp	r0, r3
{
    f322:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    f324:	d302      	bcc.n	f32c <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    f326:	4b13      	ldr	r3, [pc, #76]	; (f374 <log_strdup+0x58>)
    f328:	4298      	cmp	r0, r3
    f32a:	d31b      	bcc.n	f364 <log_strdup+0x48>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    f32c:	2200      	movs	r2, #0
    f32e:	a901      	add	r1, sp, #4
    f330:	4811      	ldr	r0, [pc, #68]	; (f378 <log_strdup+0x5c>)
    f332:	f012 fe2f 	bl	21f94 <k_mem_slab_alloc>
	if (err != 0) {
    f336:	4605      	mov	r5, r0
    f338:	b9b8      	cbnz	r0, f36a <log_strdup+0x4e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f33a:	2201      	movs	r2, #1
    f33c:	9b01      	ldr	r3, [sp, #4]
    f33e:	e8d3 1fef 	ldaex	r1, [r3]
    f342:	e8c3 2fe0 	stlex	r0, r2, [r3]
    f346:	2800      	cmp	r0, #0
    f348:	d1f9      	bne.n	f33e <log_strdup+0x22>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    f34a:	9801      	ldr	r0, [sp, #4]
    f34c:	4621      	mov	r1, r4
    f34e:	222d      	movs	r2, #45	; 0x2d
    f350:	3004      	adds	r0, #4
    f352:	f015 fa53 	bl	247fc <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    f356:	237e      	movs	r3, #126	; 0x7e
    f358:	9c01      	ldr	r4, [sp, #4]
    f35a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    f35e:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	return dup->buf;
    f362:	3404      	adds	r4, #4
}
    f364:	4620      	mov	r0, r4
    f366:	b003      	add	sp, #12
    f368:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    f36a:	4c04      	ldr	r4, [pc, #16]	; (f37c <log_strdup+0x60>)
    f36c:	e7fa      	b.n	f364 <log_strdup+0x48>
    f36e:	bf00      	nop
    f370:	00026274 	.word	0x00026274
    f374:	00028df8 	.word	0x00028df8
    f378:	2002020c 	.word	0x2002020c
    f37c:	000283ba 	.word	0x000283ba

0000f380 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
    f380:	b148      	cbz	r0, f396 <log_is_strdup+0x16>
    f382:	4b05      	ldr	r3, [pc, #20]	; (f398 <log_is_strdup+0x18>)
    f384:	4298      	cmp	r0, r3
    f386:	d305      	bcc.n	f394 <log_is_strdup+0x14>
    f388:	33d0      	adds	r3, #208	; 0xd0
    f38a:	4298      	cmp	r0, r3
    f38c:	bf2c      	ite	cs
    f38e:	2000      	movcs	r0, #0
    f390:	2001      	movcc	r0, #1
    f392:	4770      	bx	lr
    f394:	2000      	movs	r0, #0
}
    f396:	4770      	bx	lr
    f398:	2002b990 	.word	0x2002b990

0000f39c <z_impl_log_process>:
{
    f39c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    f3a0:	4b50      	ldr	r3, [pc, #320]	; (f4e4 <z_impl_log_process+0x148>)
{
    f3a2:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    f3a4:	781b      	ldrb	r3, [r3, #0]
    f3a6:	b903      	cbnz	r3, f3aa <z_impl_log_process+0xe>
    f3a8:	b340      	cbz	r0, f3fc <z_impl_log_process+0x60>
	__asm__ volatile(
    f3aa:	f04f 0320 	mov.w	r3, #32
    f3ae:	f3ef 8611 	mrs	r6, BASEPRI
    f3b2:	f383 8811 	msr	BASEPRI, r3
    f3b6:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    f3ba:	484b      	ldr	r0, [pc, #300]	; (f4e8 <z_impl_log_process+0x14c>)
    f3bc:	f014 fd28 	bl	23e10 <log_list_head_get>
    f3c0:	4605      	mov	r5, r0
	__asm__ volatile(
    f3c2:	f386 8811 	msr	BASEPRI, r6
    f3c6:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    f3ca:	b158      	cbz	r0, f3e4 <z_impl_log_process+0x48>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    f3cc:	4b47      	ldr	r3, [pc, #284]	; (f4ec <z_impl_log_process+0x150>)
    f3ce:	e8d3 2fef 	ldaex	r2, [r3]
    f3d2:	3a01      	subs	r2, #1
    f3d4:	e8c3 2fe1 	stlex	r1, r2, [r3]
    f3d8:	2900      	cmp	r1, #0
    f3da:	d1f8      	bne.n	f3ce <z_impl_log_process+0x32>
	if (!bypass) {
    f3dc:	b18c      	cbz	r4, f402 <z_impl_log_process+0x66>
	log_msg_put(msg);
    f3de:	4628      	mov	r0, r5
    f3e0:	f014 fe03 	bl	23fea <log_msg_put>
	if (!bypass && dropped_cnt) {
    f3e4:	b924      	cbnz	r4, f3f0 <z_impl_log_process+0x54>
    f3e6:	4b42      	ldr	r3, [pc, #264]	; (f4f0 <z_impl_log_process+0x154>)
    f3e8:	681b      	ldr	r3, [r3, #0]
    f3ea:	b10b      	cbz	r3, f3f0 <z_impl_log_process+0x54>
		dropped_notify();
    f3ec:	f7ff ff1a 	bl	f224 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    f3f0:	483d      	ldr	r0, [pc, #244]	; (f4e8 <z_impl_log_process+0x14c>)
    f3f2:	f014 fd0b 	bl	23e0c <log_list_head_peek>
    f3f6:	1c04      	adds	r4, r0, #0
    f3f8:	bf18      	it	ne
    f3fa:	2401      	movne	r4, #1
}
    f3fc:	4620      	mov	r0, r4
    f3fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    f402:	4b3c      	ldr	r3, [pc, #240]	; (f4f4 <z_impl_log_process+0x158>)
    f404:	781b      	ldrb	r3, [r3, #0]
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    f406:	b9db      	cbnz	r3, f440 <z_impl_log_process+0xa4>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    f408:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    f40a:	07db      	lsls	r3, r3, #31
    f40c:	d418      	bmi.n	f440 <z_impl_log_process+0xa4>
	msg_str = log_msg_str_get(msg);
    f40e:	f014 fdfb 	bl	24008 <log_msg_str_get>
    f412:	4681      	mov	r9, r0
	mask = count_s(msg_str, log_msg_nargs_get(msg));
    f414:	4628      	mov	r0, r5
    f416:	f014 fdc8 	bl	23faa <log_msg_nargs_get>
	u32_t mask = 0;
    f41a:	4626      	mov	r6, r4
	bool arm = false;
    f41c:	4622      	mov	r2, r4
	mask = count_s(msg_str, log_msg_nargs_get(msg));
    f41e:	46cc      	mov	ip, r9
	u32_t arg = 0;
    f420:	4623      	mov	r3, r4
				mask |= BIT(arg);
    f422:	f04f 0e01 	mov.w	lr, #1
	while ((curr = *str++) && arg < nargs) {
    f426:	f81c 1b01 	ldrb.w	r1, [ip], #1
    f42a:	b109      	cbz	r1, f430 <z_impl_log_process+0x94>
    f42c:	4298      	cmp	r0, r3
    f42e:	d80e      	bhi.n	f44e <z_impl_log_process+0xb2>
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    f430:	4b31      	ldr	r3, [pc, #196]	; (f4f8 <z_impl_log_process+0x15c>)
				LOG_ERR(ERR_MSG, idx, msg_str);
    f432:	4a32      	ldr	r2, [pc, #200]	; (f4fc <z_impl_log_process+0x160>)
    f434:	f8df b0dc 	ldr.w	fp, [pc, #220]	; f514 <z_impl_log_process+0x178>
    f438:	1a9b      	subs	r3, r3, r2
    f43a:	f3c3 0ac9 	ubfx	sl, r3, #3, #10
	while (mask) {
    f43e:	b9d6      	cbnz	r6, f476 <z_impl_log_process+0xda>
    f440:	4e2f      	ldr	r6, [pc, #188]	; (f500 <z_impl_log_process+0x164>)
    f442:	4f30      	ldr	r7, [pc, #192]	; (f504 <z_impl_log_process+0x168>)
    f444:	f04f 0800 	mov.w	r8, #0
    f448:	1bbf      	subs	r7, r7, r6
    f44a:	113f      	asrs	r7, r7, #4
    f44c:	e047      	b.n	f4de <z_impl_log_process+0x142>
		if (curr == '%') {
    f44e:	2925      	cmp	r1, #37	; 0x25
    f450:	d102      	bne.n	f458 <z_impl_log_process+0xbc>
			arm = !arm;
    f452:	f082 0201 	eor.w	r2, r2, #1
    f456:	e7e6      	b.n	f426 <z_impl_log_process+0x8a>
		} else if (arm && isalpha(curr)) {
    f458:	2a00      	cmp	r2, #0
    f45a:	d0e4      	beq.n	f426 <z_impl_log_process+0x8a>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
}

static inline int isalpha(int c)
{
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    f45c:	f041 0720 	orr.w	r7, r1, #32
    f460:	3f61      	subs	r7, #97	; 0x61
    f462:	2f19      	cmp	r7, #25
    f464:	d8df      	bhi.n	f426 <z_impl_log_process+0x8a>
			if (curr == 's') {
    f466:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
    f468:	bf04      	itt	eq
    f46a:	fa0e f203 	lsleq.w	r2, lr, r3
    f46e:	4316      	orreq	r6, r2
			arg++;
    f470:	3301      	adds	r3, #1
			arm = false;
    f472:	2200      	movs	r2, #0
    f474:	e7d7      	b.n	f426 <z_impl_log_process+0x8a>
		idx = 31 - __builtin_clz(mask);
    f476:	fab6 f786 	clz	r7, r6
    f47a:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    f47e:	4639      	mov	r1, r7
    f480:	4628      	mov	r0, r5
    f482:	f014 fd95 	bl	23fb0 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    f486:	4b20      	ldr	r3, [pc, #128]	; (f508 <z_impl_log_process+0x16c>)
		str = (const char *)log_msg_arg_get(msg, idx);
    f488:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    f48a:	4298      	cmp	r0, r3
    f48c:	d302      	bcc.n	f494 <z_impl_log_process+0xf8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    f48e:	4b1f      	ldr	r3, [pc, #124]	; (f50c <z_impl_log_process+0x170>)
    f490:	4298      	cmp	r0, r3
    f492:	d313      	bcc.n	f4bc <z_impl_log_process+0x120>
    f494:	4610      	mov	r0, r2
    f496:	f7ff ff73 	bl	f380 <log_is_strdup>
    f49a:	b978      	cbnz	r0, f4bc <z_impl_log_process+0x120>
    f49c:	4b1c      	ldr	r3, [pc, #112]	; (f510 <z_impl_log_process+0x174>)
    f49e:	429a      	cmp	r2, r3
    f4a0:	d00c      	beq.n	f4bc <z_impl_log_process+0x120>
				LOG_ERR(ERR_MSG, idx, msg_str);
    f4a2:	2301      	movs	r3, #1
    f4a4:	f363 0802 	bfi	r8, r3, #0, #3
    f4a8:	f360 08c5 	bfi	r8, r0, #3, #3
    f4ac:	f36a 188f 	bfi	r8, sl, #6, #10
    f4b0:	4643      	mov	r3, r8
    f4b2:	464a      	mov	r2, r9
    f4b4:	4639      	mov	r1, r7
    f4b6:	4658      	mov	r0, fp
    f4b8:	f014 fcde 	bl	23e78 <log_2>
		mask &= ~BIT(idx);
    f4bc:	2301      	movs	r3, #1
    f4be:	fa03 f707 	lsl.w	r7, r3, r7
    f4c2:	ea26 0607 	bic.w	r6, r6, r7
    f4c6:	e7ba      	b.n	f43e <z_impl_log_process+0xa2>
	return backend->cb->active;
    f4c8:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    f4ca:	795b      	ldrb	r3, [r3, #5]
    f4cc:	b123      	cbz	r3, f4d8 <z_impl_log_process+0x13c>
	backend->api->put(backend, msg);
    f4ce:	6833      	ldr	r3, [r6, #0]
    f4d0:	4629      	mov	r1, r5
    f4d2:	681b      	ldr	r3, [r3, #0]
    f4d4:	4630      	mov	r0, r6
    f4d6:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    f4d8:	f108 0801 	add.w	r8, r8, #1
    f4dc:	3610      	adds	r6, #16
    f4de:	45b8      	cmp	r8, r7
    f4e0:	dbf2      	blt.n	f4c8 <z_impl_log_process+0x12c>
    f4e2:	e77c      	b.n	f3de <z_impl_log_process+0x42>
    f4e4:	200273bd 	.word	0x200273bd
    f4e8:	200201d8 	.word	0x200201d8
    f4ec:	200201cc 	.word	0x200201cc
    f4f0:	200201d0 	.word	0x200201d0
    f4f4:	200273be 	.word	0x200273be
    f4f8:	00026598 	.word	0x00026598
    f4fc:	00026560 	.word	0x00026560
    f500:	000265e0 	.word	0x000265e0
    f504:	000265f0 	.word	0x000265f0
    f508:	00026274 	.word	0x00026274
    f50c:	00028df8 	.word	0x00028df8
    f510:	000283ba 	.word	0x000283ba
    f514:	000283d8 	.word	0x000283d8

0000f518 <z_impl_log_panic>:
{
    f518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    f51a:	4f0e      	ldr	r7, [pc, #56]	; (f554 <z_impl_log_panic+0x3c>)
    f51c:	783d      	ldrb	r5, [r7, #0]
    f51e:	b975      	cbnz	r5, f53e <z_impl_log_panic+0x26>
	log_init();
    f520:	f7ff fed6 	bl	f2d0 <log_init>
	return __log_backends_end - __log_backends_start;
    f524:	4c0c      	ldr	r4, [pc, #48]	; (f558 <z_impl_log_panic+0x40>)
    f526:	4e0d      	ldr	r6, [pc, #52]	; (f55c <z_impl_log_panic+0x44>)
    f528:	1b36      	subs	r6, r6, r4
    f52a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    f52c:	42b5      	cmp	r5, r6
    f52e:	db07      	blt.n	f540 <z_impl_log_panic+0x28>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    f530:	2000      	movs	r0, #0
    f532:	f7ff ff33 	bl	f39c <z_impl_log_process>
		while (log_process(false) == true) {
    f536:	2800      	cmp	r0, #0
    f538:	d1fa      	bne.n	f530 <z_impl_log_panic+0x18>
	panic_mode = true;
    f53a:	2301      	movs	r3, #1
    f53c:	703b      	strb	r3, [r7, #0]
}
    f53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    f540:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    f542:	795b      	ldrb	r3, [r3, #5]
    f544:	b11b      	cbz	r3, f54e <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    f546:	6823      	ldr	r3, [r4, #0]
    f548:	4620      	mov	r0, r4
    f54a:	691b      	ldr	r3, [r3, #16]
    f54c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    f54e:	3501      	adds	r5, #1
    f550:	3410      	adds	r4, #16
    f552:	e7eb      	b.n	f52c <z_impl_log_panic+0x14>
    f554:	200273be 	.word	0x200273be
    f558:	000265e0 	.word	0x000265e0
    f55c:	000265f0 	.word	0x000265f0

0000f560 <log_process_thread_func>:
{
    f560:	b508      	push	{r3, lr}
	log_init();
    f562:	f7ff feb5 	bl	f2d0 <log_init>
	return z_impl_k_current_get();
    f566:	f013 fa5b 	bl	22a20 <z_impl_k_current_get>
	proc_tid = process_tid;
    f56a:	4b0b      	ldr	r3, [pc, #44]	; (f598 <log_process_thread_func+0x38>)
    f56c:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    f56e:	b130      	cbz	r0, f57e <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    f570:	4b0a      	ldr	r3, [pc, #40]	; (f59c <log_process_thread_func+0x3c>)
	    process_tid &&
    f572:	681b      	ldr	r3, [r3, #0]
    f574:	2b09      	cmp	r3, #9
    f576:	dd02      	ble.n	f57e <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    f578:	4809      	ldr	r0, [pc, #36]	; (f5a0 <log_process_thread_func+0x40>)
    f57a:	f013 fa57 	bl	22a2c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    f57e:	4c08      	ldr	r4, [pc, #32]	; (f5a0 <log_process_thread_func+0x40>)
    f580:	2000      	movs	r0, #0
    f582:	f7ff ff0b 	bl	f39c <z_impl_log_process>
		if (log_process(false) == false) {
    f586:	2800      	cmp	r0, #0
    f588:	d1fa      	bne.n	f580 <log_process_thread_func+0x20>
    f58a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f58e:	4620      	mov	r0, r4
    f590:	f013 fa78 	bl	22a84 <z_impl_k_sem_take>
    f594:	e7f4      	b.n	f580 <log_process_thread_func+0x20>
    f596:	bf00      	nop
    f598:	200202d8 	.word	0x200202d8
    f59c:	200201cc 	.word	0x200201cc
    f5a0:	2002d540 	.word	0x2002d540

0000f5a4 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    f5a4:	4b24      	ldr	r3, [pc, #144]	; (f638 <msg_finalize+0x94>)
{
    f5a6:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    f5a8:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    f5aa:	8141      	strh	r1, [r0, #10]
{
    f5ac:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    f5ae:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    f5b0:	4c22      	ldr	r4, [pc, #136]	; (f63c <msg_finalize+0x98>)
    f5b2:	60e8      	str	r0, [r5, #12]
    f5b4:	e8d4 3fef 	ldaex	r3, [r4]
    f5b8:	3301      	adds	r3, #1
    f5ba:	e8c4 3fe2 	stlex	r2, r3, [r4]
    f5be:	2a00      	cmp	r2, #0
    f5c0:	d1f8      	bne.n	f5b4 <msg_finalize+0x10>
	__asm__ volatile(
    f5c2:	f04f 0320 	mov.w	r3, #32
    f5c6:	f3ef 8611 	mrs	r6, BASEPRI
    f5ca:	f383 8811 	msr	BASEPRI, r3
    f5ce:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    f5d2:	481b      	ldr	r0, [pc, #108]	; (f640 <msg_finalize+0x9c>)
    f5d4:	4629      	mov	r1, r5
    f5d6:	f014 fc0f 	bl	23df8 <log_list_add_tail>
	__asm__ volatile(
    f5da:	f386 8811 	msr	BASEPRI, r6
    f5de:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    f5e2:	4b18      	ldr	r3, [pc, #96]	; (f644 <msg_finalize+0xa0>)
    f5e4:	781a      	ldrb	r2, [r3, #0]
    f5e6:	b17a      	cbz	r2, f608 <msg_finalize+0x64>
	__asm__ volatile(
    f5e8:	f04f 0320 	mov.w	r3, #32
    f5ec:	f3ef 8411 	mrs	r4, BASEPRI
    f5f0:	f383 8811 	msr	BASEPRI, r3
    f5f4:	f3bf 8f6f 	isb	sy
    f5f8:	2000      	movs	r0, #0
    f5fa:	f7ff fecf 	bl	f39c <z_impl_log_process>
	__asm__ volatile(
    f5fe:	f384 8811 	msr	BASEPRI, r4
    f602:	f3bf 8f6f 	isb	sy
}
    f606:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    f608:	490f      	ldr	r1, [pc, #60]	; (f648 <msg_finalize+0xa4>)
    f60a:	6823      	ldr	r3, [r4, #0]
    f60c:	6809      	ldr	r1, [r1, #0]
    f60e:	2900      	cmp	r1, #0
    f610:	d0f9      	beq.n	f606 <msg_finalize+0x62>
    f612:	2b01      	cmp	r3, #1
    f614:	d106      	bne.n	f624 <msg_finalize+0x80>
}
    f616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_timer_start(timer, duration, period);
    f61a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f61e:	480b      	ldr	r0, [pc, #44]	; (f64c <msg_finalize+0xa8>)
    f620:	f013 bcbc 	b.w	22f9c <z_impl_k_timer_start>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    f624:	2b0a      	cmp	r3, #10
    f626:	d1ee      	bne.n	f606 <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
    f628:	4808      	ldr	r0, [pc, #32]	; (f64c <msg_finalize+0xa8>)
    f62a:	f016 fcdc 	bl	25fe6 <z_impl_k_timer_stop>
}
    f62e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_sem_give(sem);
    f632:	4807      	ldr	r0, [pc, #28]	; (f650 <msg_finalize+0xac>)
    f634:	f013 b9fa 	b.w	22a2c <z_impl_k_sem_give>
    f638:	2002d3a8 	.word	0x2002d3a8
    f63c:	200201cc 	.word	0x200201cc
    f640:	200201d8 	.word	0x200201d8
    f644:	200273be 	.word	0x200273be
    f648:	200202d8 	.word	0x200202d8
    f64c:	200201e0 	.word	0x200201e0
    f650:	2002d540 	.word	0x2002d540

0000f654 <log_free>:
{
    f654:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    f656:	3804      	subs	r0, #4
    f658:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    f65a:	e8d0 3fef 	ldaex	r3, [r0]
    f65e:	1e5a      	subs	r2, r3, #1
    f660:	e8c0 2fe1 	stlex	r1, r2, [r0]
    f664:	2900      	cmp	r1, #0
    f666:	d1f8      	bne.n	f65a <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
    f668:	2b01      	cmp	r3, #1
    f66a:	d103      	bne.n	f674 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    f66c:	a901      	add	r1, sp, #4
    f66e:	4803      	ldr	r0, [pc, #12]	; (f67c <log_free+0x28>)
    f670:	f012 fcbe 	bl	21ff0 <k_mem_slab_free>
}
    f674:	b003      	add	sp, #12
    f676:	f85d fb04 	ldr.w	pc, [sp], #4
    f67a:	bf00      	nop
    f67c:	2002020c 	.word	0x2002020c

0000f680 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    f680:	2320      	movs	r3, #32
    f682:	4902      	ldr	r1, [pc, #8]	; (f68c <log_msg_pool_init+0xc>)
    f684:	461a      	mov	r2, r3
    f686:	4802      	ldr	r0, [pc, #8]	; (f690 <log_msg_pool_init+0x10>)
    f688:	f016 b9df 	b.w	25a4a <k_mem_slab_init>
    f68c:	2002ba60 	.word	0x2002ba60
    f690:	200202dc 	.word	0x200202dc

0000f694 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
    f694:	2300      	movs	r3, #0
{
    f696:	b573      	push	{r0, r1, r4, r5, r6, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    f698:	4e0a      	ldr	r6, [pc, #40]	; (f6c4 <log_msg_no_space_handle+0x30>)
	union log_msg_chunk *msg = NULL;
    f69a:	ac02      	add	r4, sp, #8
    f69c:	f844 3d04 	str.w	r3, [r4, #-4]!
    f6a0:	2001      	movs	r0, #1
    f6a2:	f7ff fe7b 	bl	f39c <z_impl_log_process>
    f6a6:	4605      	mov	r5, r0
			log_dropped();
    f6a8:	f7ff fdde 	bl	f268 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    f6ac:	2200      	movs	r2, #0
    f6ae:	4621      	mov	r1, r4
    f6b0:	4630      	mov	r0, r6
    f6b2:	f012 fc6f 	bl	21f94 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    f6b6:	b108      	cbz	r0, f6bc <log_msg_no_space_handle+0x28>
    f6b8:	2d00      	cmp	r5, #0
    f6ba:	d1f1      	bne.n	f6a0 <log_msg_no_space_handle+0xc>
	} else {
		log_dropped();
	}
	return msg;

}
    f6bc:	9801      	ldr	r0, [sp, #4]
    f6be:	b002      	add	sp, #8
    f6c0:	bd70      	pop	{r4, r5, r6, pc}
    f6c2:	bf00      	nop
    f6c4:	200202dc 	.word	0x200202dc

0000f6c8 <log_msg_chunk_alloc>:
{
    f6c8:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    f6ca:	2200      	movs	r2, #0
    f6cc:	a902      	add	r1, sp, #8
    f6ce:	f841 2d04 	str.w	r2, [r1, #-4]!
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    f6d2:	4805      	ldr	r0, [pc, #20]	; (f6e8 <log_msg_chunk_alloc+0x20>)
    f6d4:	f012 fc5e 	bl	21f94 <k_mem_slab_alloc>
	if (err != 0) {
    f6d8:	b110      	cbz	r0, f6e0 <log_msg_chunk_alloc+0x18>
		msg = log_msg_no_space_handle();
    f6da:	f7ff ffdb 	bl	f694 <log_msg_no_space_handle>
    f6de:	9001      	str	r0, [sp, #4]
}
    f6e0:	9801      	ldr	r0, [sp, #4]
    f6e2:	b003      	add	sp, #12
    f6e4:	f85d fb04 	ldr.w	pc, [sp], #4
    f6e8:	200202dc 	.word	0x200202dc

0000f6ec <msg_free>:
{
    f6ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f6ee:	7a04      	ldrb	r4, [r0, #8]
	u32_t nargs = msg->hdr.params.std.nargs;
    f6f0:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
    f6f2:	f014 0401 	ands.w	r4, r4, #1
{
    f6f6:	9001      	str	r0, [sp, #4]
	u32_t nargs = msg->hdr.params.std.nargs;
    f6f8:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    f6fc:	d010      	beq.n	f720 <msg_free+0x34>
	if (msg->hdr.params.generic.ext == 1) {
    f6fe:	9b01      	ldr	r3, [sp, #4]
    f700:	7a1a      	ldrb	r2, [r3, #8]
    f702:	0792      	lsls	r2, r2, #30
    f704:	d506      	bpl.n	f714 <msg_free+0x28>
    f706:	695b      	ldr	r3, [r3, #20]
    f708:	ac04      	add	r4, sp, #16
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    f70a:	4d11      	ldr	r5, [pc, #68]	; (f750 <msg_free+0x64>)
    f70c:	f844 3d04 	str.w	r3, [r4, #-4]!
	while (cont != NULL) {
    f710:	9b03      	ldr	r3, [sp, #12]
    f712:	b9b3      	cbnz	r3, f742 <msg_free+0x56>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    f714:	a901      	add	r1, sp, #4
    f716:	480e      	ldr	r0, [pc, #56]	; (f750 <msg_free+0x64>)
    f718:	f012 fc6a 	bl	21ff0 <k_mem_slab_free>
}
    f71c:	b004      	add	sp, #16
    f71e:	bd70      	pop	{r4, r5, r6, pc}
	if (log_msg_is_std(msg) && nargs) {
    f720:	2d00      	cmp	r5, #0
    f722:	d0ec      	beq.n	f6fe <msg_free+0x12>
		for (i = 0; i < nargs; i++) {
    f724:	42ac      	cmp	r4, r5
    f726:	9801      	ldr	r0, [sp, #4]
    f728:	d2e9      	bcs.n	f6fe <msg_free+0x12>
			void *buf = (void *)log_msg_arg_get(msg, i);
    f72a:	4621      	mov	r1, r4
    f72c:	f014 fc40 	bl	23fb0 <log_msg_arg_get>
    f730:	4606      	mov	r6, r0
			if (log_is_strdup(buf)) {
    f732:	f7ff fe25 	bl	f380 <log_is_strdup>
    f736:	b110      	cbz	r0, f73e <msg_free+0x52>
				log_free(buf);
    f738:	4630      	mov	r0, r6
    f73a:	f7ff ff8b 	bl	f654 <log_free>
		for (i = 0; i < nargs; i++) {
    f73e:	3401      	adds	r4, #1
    f740:	e7f0      	b.n	f724 <msg_free+0x38>
		next = cont->next;
    f742:	681e      	ldr	r6, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    f744:	4621      	mov	r1, r4
    f746:	4628      	mov	r0, r5
    f748:	f012 fc52 	bl	21ff0 <k_mem_slab_free>
		cont = next;
    f74c:	9603      	str	r6, [sp, #12]
    f74e:	e7df      	b.n	f710 <msg_free+0x24>
    f750:	200202dc 	.word	0x200202dc

0000f754 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    f754:	b40e      	push	{r1, r2, r3}
    f756:	b503      	push	{r0, r1, lr}
    f758:	ab03      	add	r3, sp, #12
    f75a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    f75e:	4601      	mov	r1, r0
    f760:	4804      	ldr	r0, [pc, #16]	; (f774 <print_formatted+0x20>)
	va_start(args, fmt);
    f762:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    f764:	f014 f9bc 	bl	23ae0 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    f768:	2000      	movs	r0, #0
    f76a:	b002      	add	sp, #8
    f76c:	f85d eb04 	ldr.w	lr, [sp], #4
    f770:	b003      	add	sp, #12
    f772:	4770      	bx	lr
    f774:	000243bd 	.word	0x000243bd

0000f778 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    f778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    f77c:	f011 0402 	ands.w	r4, r1, #2
{
    f780:	b085      	sub	sp, #20
    f782:	4606      	mov	r6, r0
    f784:	4690      	mov	r8, r2
    f786:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    f78a:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    f78e:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    f792:	d007      	beq.n	f7a4 <prefix_print+0x2c>
	if (!format) {
    f794:	f011 0f44 	tst.w	r1, #68	; 0x44
    f798:	d137      	bne.n	f80a <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    f79a:	461a      	mov	r2, r3
    f79c:	4932      	ldr	r1, [pc, #200]	; (f868 <prefix_print+0xf0>)
    f79e:	f7ff ffd9 	bl	f754 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    f7a2:	4604      	mov	r4, r0
	if (color) {
    f7a4:	f1b9 0f00 	cmp.w	r9, #0
    f7a8:	d00a      	beq.n	f7c0 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
    f7aa:	4b30      	ldr	r3, [pc, #192]	; (f86c <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    f7ac:	4930      	ldr	r1, [pc, #192]	; (f870 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
    f7ae:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    f7b2:	4b30      	ldr	r3, [pc, #192]	; (f874 <prefix_print+0xfc>)
    f7b4:	4630      	mov	r0, r6
    f7b6:	2a00      	cmp	r2, #0
    f7b8:	bf08      	it	eq
    f7ba:	461a      	moveq	r2, r3
    f7bc:	f7ff ffca 	bl	f754 <print_formatted>
	if (level_on) {
    f7c0:	b13d      	cbz	r5, f7d2 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    f7c2:	4b2d      	ldr	r3, [pc, #180]	; (f878 <prefix_print+0x100>)
    f7c4:	492d      	ldr	r1, [pc, #180]	; (f87c <prefix_print+0x104>)
    f7c6:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    f7ca:	4630      	mov	r0, r6
    f7cc:	f7ff ffc2 	bl	f754 <print_formatted>
    f7d0:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    f7d2:	f1b8 0f00 	cmp.w	r8, #0
    f7d6:	d044      	beq.n	f862 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    f7d8:	2301      	movs	r3, #1
    f7da:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    f7de:	4b28      	ldr	r3, [pc, #160]	; (f880 <prefix_print+0x108>)
    f7e0:	f017 0f10 	tst.w	r7, #16
    f7e4:	4f27      	ldr	r7, [pc, #156]	; (f884 <prefix_print+0x10c>)
    f7e6:	bf18      	it	ne
    f7e8:	461f      	movne	r7, r3
    f7ea:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    f7ee:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    f7f2:	f7ff fd45 	bl	f280 <log_source_name_get>
    f7f6:	4639      	mov	r1, r7
    f7f8:	4602      	mov	r2, r0
    f7fa:	4630      	mov	r0, r6
    f7fc:	f7ff ffaa 	bl	f754 <print_formatted>
    f800:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    f802:	4420      	add	r0, r4
    f804:	b005      	add	sp, #20
    f806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    f80a:	4a1f      	ldr	r2, [pc, #124]	; (f888 <prefix_print+0x110>)
    f80c:	6811      	ldr	r1, [r2, #0]
    f80e:	b331      	cbz	r1, f85e <prefix_print+0xe6>
		timestamp /= timestamp_div;
    f810:	4a1e      	ldr	r2, [pc, #120]	; (f88c <prefix_print+0x114>)
    f812:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    f816:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
    f818:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    f81c:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
    f820:	fbb3 f4f1 	udiv	r4, r3, r1
    f824:	fbb4 f2fe 	udiv	r2, r4, lr
    f828:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    f82c:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    f830:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f834:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    f838:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f83c:	fb01 441b 	mls	r4, r1, fp, r4
    f840:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    f844:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f848:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    f84c:	e9cd b101 	strd	fp, r1, [sp, #4]
    f850:	fb0a e113 	mls	r1, sl, r3, lr
    f854:	9100      	str	r1, [sp, #0]
    f856:	490e      	ldr	r1, [pc, #56]	; (f890 <prefix_print+0x118>)
    f858:	f7ff ff7c 	bl	f754 <print_formatted>
    f85c:	e7a1      	b.n	f7a2 <prefix_print+0x2a>
		length = 0;
    f85e:	4608      	mov	r0, r1
    f860:	e79f      	b.n	f7a2 <prefix_print+0x2a>
	total += print_formatted(log_output,
    f862:	4f08      	ldr	r7, [pc, #32]	; (f884 <prefix_print+0x10c>)
    f864:	e7c1      	b.n	f7ea <prefix_print+0x72>
    f866:	bf00      	nop
    f868:	00028455 	.word	0x00028455
    f86c:	000266a8 	.word	0x000266a8
    f870:	00027f3c 	.word	0x00027f3c
    f874:	00028447 	.word	0x00028447
    f878:	000266bc 	.word	0x000266bc
    f87c:	0002847a 	.word	0x0002847a
    f880:	0002844c 	.word	0x0002844c
    f884:	00028450 	.word	0x00028450
    f888:	200202f8 	.word	0x200202f8
    f88c:	200202fc 	.word	0x200202fc
    f890:	0002845e 	.word	0x0002845e

0000f894 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    f894:	b538      	push	{r3, r4, r5, lr}
    f896:	460c      	mov	r4, r1
	if (color) {
    f898:	07e1      	lsls	r1, r4, #31
{
    f89a:	4605      	mov	r5, r0
	if (color) {
    f89c:	d503      	bpl.n	f8a6 <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    f89e:	4a08      	ldr	r2, [pc, #32]	; (f8c0 <postfix_print+0x2c>)
    f8a0:	4908      	ldr	r1, [pc, #32]	; (f8c4 <postfix_print+0x30>)
    f8a2:	f7ff ff57 	bl	f754 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f8a6:	06e2      	lsls	r2, r4, #27
    f8a8:	d408      	bmi.n	f8bc <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    f8aa:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    f8ac:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    f8ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    f8b2:	bf4c      	ite	mi
    f8b4:	4904      	ldrmi	r1, [pc, #16]	; (f8c8 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    f8b6:	4905      	ldrpl	r1, [pc, #20]	; (f8cc <postfix_print+0x38>)
    f8b8:	f7ff bf4c 	b.w	f754 <print_formatted>
}
    f8bc:	bd38      	pop	{r3, r4, r5, pc}
    f8be:	bf00      	nop
    f8c0:	00028447 	.word	0x00028447
    f8c4:	00027f3c 	.word	0x00027f3c
    f8c8:	00027d99 	.word	0x00027d99
    f8cc:	00027d98 	.word	0x00027d98

0000f8d0 <hexdump_line_print>:
{
    f8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f8d4:	4698      	mov	r8, r3
    f8d6:	9b08      	ldr	r3, [sp, #32]
    f8d8:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f8da:	06dd      	lsls	r5, r3, #27
{
    f8dc:	460e      	mov	r6, r1
    f8de:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f8e0:	d405      	bmi.n	f8ee <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    f8e2:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    f8e4:	bf4c      	ite	mi
    f8e6:	4929      	ldrmi	r1, [pc, #164]	; (f98c <hexdump_line_print+0xbc>)
		print_formatted(ctx, "\r\n");
    f8e8:	4929      	ldrpl	r1, [pc, #164]	; (f990 <hexdump_line_print+0xc0>)
    f8ea:	f7ff ff33 	bl	f754 <print_formatted>
{
    f8ee:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
    f8f0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; f998 <hexdump_line_print+0xc8>
	for (int i = 0; i < prefix_offset; i++) {
    f8f4:	4545      	cmp	r5, r8
    f8f6:	db2a      	blt.n	f94e <hexdump_line_print+0x7e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f8f8:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    f8fa:	f8df 80a0 	ldr.w	r8, [pc, #160]	; f99c <hexdump_line_print+0xcc>
			print_formatted(log_output, "%02x ", data[i]);
    f8fe:	f8df 90a0 	ldr.w	r9, [pc, #160]	; f9a0 <hexdump_line_print+0xd0>
			print_formatted(log_output, " ");
    f902:	f8df a094 	ldr.w	sl, [pc, #148]	; f998 <hexdump_line_print+0xc8>
		if (i < length) {
    f906:	42af      	cmp	r7, r5
    f908:	d92e      	bls.n	f968 <hexdump_line_print+0x98>
			print_formatted(log_output, "%02x ", data[i]);
    f90a:	5d72      	ldrb	r2, [r6, r5]
    f90c:	4649      	mov	r1, r9
    f90e:	4620      	mov	r0, r4
    f910:	f7ff ff20 	bl	f754 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f914:	3501      	adds	r5, #1
    f916:	2d10      	cmp	r5, #16
    f918:	d11f      	bne.n	f95a <hexdump_line_print+0x8a>
	print_formatted(log_output, "|");
    f91a:	491e      	ldr	r1, [pc, #120]	; (f994 <hexdump_line_print+0xc4>)
    f91c:	4620      	mov	r0, r4
    f91e:	f7ff ff19 	bl	f754 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f922:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    f924:	f8df 8070 	ldr.w	r8, [pc, #112]	; f998 <hexdump_line_print+0xc8>
			print_formatted(log_output, "%c",
    f928:	f8df 9078 	ldr.w	r9, [pc, #120]	; f9a4 <hexdump_line_print+0xd4>
		if (i < length) {
    f92c:	42af      	cmp	r7, r5
    f92e:	d927      	bls.n	f980 <hexdump_line_print+0xb0>
			char c = (char)data[i];
    f930:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    f932:	4649      	mov	r1, r9
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    f934:	f1a2 0320 	sub.w	r3, r2, #32
    f938:	2b5f      	cmp	r3, #95	; 0x5f
    f93a:	bf28      	it	cs
    f93c:	222e      	movcs	r2, #46	; 0x2e
    f93e:	4620      	mov	r0, r4
    f940:	f7ff ff08 	bl	f754 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f944:	3501      	adds	r5, #1
    f946:	2d10      	cmp	r5, #16
    f948:	d113      	bne.n	f972 <hexdump_line_print+0xa2>
}
    f94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    f94e:	4649      	mov	r1, r9
    f950:	4620      	mov	r0, r4
    f952:	f7ff feff 	bl	f754 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    f956:	3501      	adds	r5, #1
    f958:	e7cc      	b.n	f8f4 <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
    f95a:	076a      	lsls	r2, r5, #29
    f95c:	d1d3      	bne.n	f906 <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
    f95e:	4651      	mov	r1, sl
    f960:	4620      	mov	r0, r4
    f962:	f7ff fef7 	bl	f754 <print_formatted>
    f966:	e7ce      	b.n	f906 <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
    f968:	4641      	mov	r1, r8
    f96a:	4620      	mov	r0, r4
    f96c:	f7ff fef2 	bl	f754 <print_formatted>
    f970:	e7d0      	b.n	f914 <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
    f972:	076b      	lsls	r3, r5, #29
    f974:	d1da      	bne.n	f92c <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    f976:	4641      	mov	r1, r8
    f978:	4620      	mov	r0, r4
    f97a:	f7ff feeb 	bl	f754 <print_formatted>
    f97e:	e7d5      	b.n	f92c <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    f980:	4641      	mov	r1, r8
    f982:	4620      	mov	r0, r4
    f984:	f7ff fee6 	bl	f754 <print_formatted>
    f988:	e7dc      	b.n	f944 <hexdump_line_print+0x74>
    f98a:	bf00      	nop
    f98c:	00027d99 	.word	0x00027d99
    f990:	00027d98 	.word	0x00027d98
    f994:	00028418 	.word	0x00028418
    f998:	00028416 	.word	0x00028416
    f99c:	00028414 	.word	0x00028414
    f9a0:	0002840e 	.word	0x0002840e
    f9a4:	0002841a 	.word	0x0002841a

0000f9a8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    f9a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f9ac:	4617      	mov	r7, r2
    f9ae:	7a0a      	ldrb	r2, [r1, #8]
	return msg->hdr.ids.level;
    f9b0:	7a8b      	ldrb	r3, [r1, #10]
    f9b2:	43d2      	mvns	r2, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f9b4:	f013 0407 	ands.w	r4, r3, #7
{
    f9b8:	b08a      	sub	sp, #40	; 0x28
    f9ba:	4605      	mov	r5, r0
    f9bc:	460e      	mov	r6, r1
    f9be:	b2d2      	uxtb	r2, r2
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f9c0:	d01b      	beq.n	f9fa <log_output_msg_process+0x52>
	return msg->hdr.ids.source_id;
    f9c2:	8949      	ldrh	r1, [r1, #10]
    f9c4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f9c8:	0989      	lsrs	r1, r1, #6
    f9ca:	9102      	str	r1, [sp, #8]
    f9cc:	e9cd 4300 	strd	r4, r3, [sp]
    f9d0:	f002 0201 	and.w	r2, r2, #1
    f9d4:	68f3      	ldr	r3, [r6, #12]
    f9d6:	4639      	mov	r1, r7
    f9d8:	f7ff fece 	bl	f778 <prefix_print>
    f9dc:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    f9de:	7a33      	ldrb	r3, [r6, #8]
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    f9e0:	07da      	lsls	r2, r3, #31
    f9e2:	d40c      	bmi.n	f9fe <log_output_msg_process+0x56>
		std_print(msg, log_output);
    f9e4:	4629      	mov	r1, r5
    f9e6:	4630      	mov	r0, r6
    f9e8:	f014 fb7e 	bl	240e8 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    f9ec:	b34c      	cbz	r4, fa42 <log_output_msg_process+0x9a>
		postfix_print(log_output, flags, level);
    f9ee:	4622      	mov	r2, r4
    f9f0:	4639      	mov	r1, r7
    f9f2:	4628      	mov	r0, r5
    f9f4:	f7ff ff4e 	bl	f894 <postfix_print>
    f9f8:	e023      	b.n	fa42 <log_output_msg_process+0x9a>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f9fa:	46a1      	mov	r9, r4
    f9fc:	e7ef      	b.n	f9de <log_output_msg_process+0x36>
	} else if (raw_string) {
    f9fe:	bb34      	cbnz	r4, fa4e <log_output_msg_process+0xa6>
	size_t offset = 0;
    fa00:	4627      	mov	r7, r4
		length = log_output->size;
    fa02:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    fa04:	aa06      	add	r2, sp, #24
		length = log_output->size;
    fa06:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    fa08:	68a9      	ldr	r1, [r5, #8]
    fa0a:	463b      	mov	r3, r7
    fa0c:	4630      	mov	r0, r6
    fa0e:	f014 fb57 	bl	240c0 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    fa12:	9a06      	ldr	r2, [sp, #24]
    fa14:	686b      	ldr	r3, [r5, #4]
    fa16:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    fa18:	b13a      	cbz	r2, fa2a <log_output_msg_process+0x82>
			eol = (log_output->buf[length - 1] == '\n');
    fa1a:	68ab      	ldr	r3, [r5, #8]
    fa1c:	4413      	add	r3, r2
    fa1e:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    fa22:	f1a4 030a 	sub.w	r3, r4, #10
    fa26:	425c      	negs	r4, r3
    fa28:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    fa2a:	4628      	mov	r0, r5
    fa2c:	f014 fcb9 	bl	243a2 <log_output_flush>
		offset += length;
    fa30:	9b06      	ldr	r3, [sp, #24]
    fa32:	441f      	add	r7, r3
	} while (length > 0);
    fa34:	2b00      	cmp	r3, #0
    fa36:	d1e4      	bne.n	fa02 <log_output_msg_process+0x5a>
	if (eol) {
    fa38:	b11c      	cbz	r4, fa42 <log_output_msg_process+0x9a>
		print_formatted(log_output, "\r");
    fa3a:	4915      	ldr	r1, [pc, #84]	; (fa90 <log_output_msg_process+0xe8>)
    fa3c:	4628      	mov	r0, r5
    fa3e:	f7ff fe89 	bl	f754 <print_formatted>
	}

	log_output_flush(log_output);
    fa42:	4628      	mov	r0, r5
    fa44:	f014 fcad 	bl	243a2 <log_output_flush>
}
    fa48:	b00a      	add	sp, #40	; 0x28
    fa4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    fa4e:	4630      	mov	r0, r6
    fa50:	f014 fada 	bl	24008 <log_msg_str_get>
    fa54:	490f      	ldr	r1, [pc, #60]	; (fa94 <log_output_msg_process+0xec>)
    fa56:	4602      	mov	r2, r0
    fa58:	4628      	mov	r0, r5
    fa5a:	f7ff fe7b 	bl	f754 <print_formatted>
	u32_t offset = 0U;
    fa5e:	f04f 0800 	mov.w	r8, #0
		length = sizeof(buf);
    fa62:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    fa66:	aa05      	add	r2, sp, #20
    fa68:	4643      	mov	r3, r8
    fa6a:	a906      	add	r1, sp, #24
    fa6c:	4630      	mov	r0, r6
		length = sizeof(buf);
    fa6e:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    fa72:	f014 fb25 	bl	240c0 <log_msg_hexdump_data_get>
		if (length) {
    fa76:	9a05      	ldr	r2, [sp, #20]
    fa78:	2a00      	cmp	r2, #0
    fa7a:	d0b8      	beq.n	f9ee <log_output_msg_process+0x46>
			hexdump_line_print(log_output, buf, length,
    fa7c:	464b      	mov	r3, r9
    fa7e:	9700      	str	r7, [sp, #0]
    fa80:	a906      	add	r1, sp, #24
    fa82:	4628      	mov	r0, r5
    fa84:	f7ff ff24 	bl	f8d0 <hexdump_line_print>
			offset += length;
    fa88:	9b05      	ldr	r3, [sp, #20]
    fa8a:	4498      	add	r8, r3
    fa8c:	e7eb      	b.n	fa66 <log_output_msg_process+0xbe>
    fa8e:	bf00      	nop
    fa90:	0002841d 	.word	0x0002841d
    fa94:	00027f3c 	.word	0x00027f3c

0000fa98 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    fa98:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    fa9a:	e9d0 4300 	ldrd	r4, r3, [r0]
    fa9e:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    faa0:	f242 730f 	movw	r3, #9999	; 0x270f
    faa4:	428b      	cmp	r3, r1
    faa6:	bf28      	it	cs
    faa8:	460b      	movcs	r3, r1
    faaa:	4a0d      	ldr	r2, [pc, #52]	; (fae0 <log_output_dropped_process+0x48>)
    faac:	2105      	movs	r1, #5
    faae:	4668      	mov	r0, sp
    fab0:	f001 fdf6 	bl	116a0 <snprintf>
    fab4:	4606      	mov	r6, r0

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    fab6:	462b      	mov	r3, r5
    fab8:	4620      	mov	r0, r4
    faba:	220b      	movs	r2, #11
    fabc:	4909      	ldr	r1, [pc, #36]	; (fae4 <log_output_dropped_process+0x4c>)
    fabe:	f014 fb06 	bl	240ce <buffer_write>
	buffer_write(outf, buf, len, dev);
    fac2:	462b      	mov	r3, r5
    fac4:	4632      	mov	r2, r6
    fac6:	4669      	mov	r1, sp
    fac8:	4620      	mov	r0, r4
    faca:	f014 fb00 	bl	240ce <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    face:	462b      	mov	r3, r5
    fad0:	221b      	movs	r2, #27
    fad2:	4905      	ldr	r1, [pc, #20]	; (fae8 <log_output_dropped_process+0x50>)
    fad4:	4620      	mov	r0, r4
    fad6:	f014 fafa 	bl	240ce <buffer_write>
}
    fada:	b002      	add	sp, #8
    fadc:	bd70      	pop	{r4, r5, r6, pc}
    fade:	bf00      	nop
    fae0:	00028223 	.word	0x00028223
    fae4:	0002843b 	.word	0x0002843b
    fae8:	0002841f 	.word	0x0002841f

0000faec <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    faec:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    faee:	2100      	movs	r1, #0
	timestamp_div = 1U;
    faf0:	4a07      	ldr	r2, [pc, #28]	; (fb10 <log_output_timestamp_freq_set+0x24>)
{
    faf2:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    faf4:	4c07      	ldr	r4, [pc, #28]	; (fb14 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    faf6:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    faf8:	42a0      	cmp	r0, r4
    fafa:	d804      	bhi.n	fb06 <log_output_timestamp_freq_set+0x1a>
    fafc:	b101      	cbz	r1, fb00 <log_output_timestamp_freq_set+0x14>
    fafe:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    fb00:	4b05      	ldr	r3, [pc, #20]	; (fb18 <log_output_timestamp_freq_set+0x2c>)
    fb02:	6018      	str	r0, [r3, #0]
}
    fb04:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    fb06:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    fb08:	005b      	lsls	r3, r3, #1
    fb0a:	2101      	movs	r1, #1
    fb0c:	e7f4      	b.n	faf8 <log_output_timestamp_freq_set+0xc>
    fb0e:	bf00      	nop
    fb10:	200202fc 	.word	0x200202fc
    fb14:	000f4240 	.word	0x000f4240
    fb18:	200202f8 	.word	0x200202f8

0000fb1c <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
    fb1c:	b508      	push	{r3, lr}
    fb1e:	4803      	ldr	r0, [pc, #12]	; (fb2c <log_backend_uart_init+0x10>)
    fb20:	f012 f88a 	bl	21c38 <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    fb24:	4b02      	ldr	r3, [pc, #8]	; (fb30 <log_backend_uart_init+0x14>)
    fb26:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
    fb28:	bd08      	pop	{r3, pc}
    fb2a:	bf00      	nop
    fb2c:	00027b5f 	.word	0x00027b5f
    fb30:	20020308 	.word	0x20020308

0000fb34 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    fb34:	4801      	ldr	r0, [pc, #4]	; (fb3c <panic+0x8>)
    fb36:	f014 bc34 	b.w	243a2 <log_output_flush>
    fb3a:	bf00      	nop
    fb3c:	000266e8 	.word	0x000266e8

0000fb40 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    fb40:	4801      	ldr	r0, [pc, #4]	; (fb48 <dropped+0x8>)
    fb42:	f7ff bfa9 	b.w	fa98 <log_output_dropped_process>
    fb46:	bf00      	nop
    fb48:	000266e8 	.word	0x000266e8

0000fb4c <put>:
{
    fb4c:	b510      	push	{r4, lr}
    fb4e:	460c      	mov	r4, r1
	log_msg_get(msg);
    fb50:	4608      	mov	r0, r1
    fb52:	f014 fa21 	bl	23f98 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    fb56:	4621      	mov	r1, r4
    fb58:	4804      	ldr	r0, [pc, #16]	; (fb6c <put+0x20>)
    fb5a:	220f      	movs	r2, #15
    fb5c:	f7ff ff24 	bl	f9a8 <log_output_msg_process>
	log_msg_put(msg);
    fb60:	4620      	mov	r0, r4
}
    fb62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fb66:	f014 ba40 	b.w	23fea <log_msg_put>
    fb6a:	bf00      	nop
    fb6c:	000266e8 	.word	0x000266e8

0000fb70 <socket_offload_register>:
void socket_offload_register(const struct socket_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(socket_ops == NULL);

	socket_ops = ops;
    fb70:	4b01      	ldr	r3, [pc, #4]	; (fb78 <socket_offload_register+0x8>)
    fb72:	6018      	str	r0, [r3, #0]
}
    fb74:	4770      	bx	lr
    fb76:	bf00      	nop
    fb78:	20020314 	.word	0x20020314

0000fb7c <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    fb7c:	280a      	cmp	r0, #10
{
    fb7e:	b538      	push	{r3, r4, r5, lr}
    fb80:	4604      	mov	r4, r0
    fb82:	4d07      	ldr	r5, [pc, #28]	; (fba0 <console_out+0x24>)
	if ('\n' == c) {
    fb84:	d104      	bne.n	fb90 <console_out+0x14>
    fb86:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    fb88:	6843      	ldr	r3, [r0, #4]
    fb8a:	210d      	movs	r1, #13
    fb8c:	685b      	ldr	r3, [r3, #4]
    fb8e:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    fb90:	6828      	ldr	r0, [r5, #0]
    fb92:	6843      	ldr	r3, [r0, #4]
    fb94:	b2e1      	uxtb	r1, r4
    fb96:	685b      	ldr	r3, [r3, #4]
    fb98:	4798      	blx	r3

	return c;
}
    fb9a:	4620      	mov	r0, r4
    fb9c:	bd38      	pop	{r3, r4, r5, pc}
    fb9e:	bf00      	nop
    fba0:	20020318 	.word	0x20020318

0000fba4 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    fba4:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    fba6:	4c04      	ldr	r4, [pc, #16]	; (fbb8 <uart_console_hook_install+0x14>)
    fba8:	4620      	mov	r0, r4
    fbaa:	f001 fd73 	bl	11694 <__stdout_hook_install>
	__printk_hook_install(console_out);
    fbae:	4620      	mov	r0, r4
}
    fbb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    fbb4:	f7ff babc 	b.w	f130 <__printk_hook_install>
    fbb8:	0000fb7d 	.word	0x0000fb7d

0000fbbc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    fbbc:	b508      	push	{r3, lr}
    fbbe:	4804      	ldr	r0, [pc, #16]	; (fbd0 <uart_console_init+0x14>)
    fbc0:	f012 f83a 	bl	21c38 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    fbc4:	4b03      	ldr	r3, [pc, #12]	; (fbd4 <uart_console_init+0x18>)
    fbc6:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    fbc8:	f7ff ffec 	bl	fba4 <uart_console_hook_install>

	return 0;
}
    fbcc:	2000      	movs	r0, #0
    fbce:	bd08      	pop	{r3, pc}
    fbd0:	00027b5f 	.word	0x00027b5f
    fbd4:	20020318 	.word	0x20020318

0000fbd8 <hfclk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int hfclk_init(struct device *dev)
{
    fbd8:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    fbda:	2200      	movs	r2, #0
{
    fbdc:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    fbde:	2101      	movs	r1, #1
    fbe0:	2005      	movs	r0, #5
    fbe2:	f000 f9c1 	bl	ff68 <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    fbe6:	2005      	movs	r0, #5
    fbe8:	f000 f9ae 	bl	ff48 <arch_irq_enable>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    fbec:	2202      	movs	r2, #2
    fbee:	4b05      	ldr	r3, [pc, #20]	; (fc04 <hfclk_init+0x2c>)
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    fbf0:	2000      	movs	r0, #0
    fbf2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    fbf6:	2203      	movs	r2, #3
    fbf8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			(NRF_POWER_INT_USBDETECTED_MASK |
			 NRF_POWER_INT_USBREMOVED_MASK |
			 NRF_POWER_INT_USBPWRRDY_MASK),
			(0))));

	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    fbfc:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
    fbfe:	e9c3 0000 	strd	r0, r0, [r3]

	return 0;
}
    fc02:	bd10      	pop	{r4, pc}
    fc04:	40005000 	.word	0x40005000

0000fc08 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    fc08:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    fc0a:	4b10      	ldr	r3, [pc, #64]	; (fc4c <nrf_power_clock_isr+0x44>)
    fc0c:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    fc0e:	b162      	cbz	r2, fc2a <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
    fc10:	4a0f      	ldr	r2, [pc, #60]	; (fc50 <nrf_power_clock_isr+0x48>)
    fc12:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    fc16:	07d1      	lsls	r1, r2, #31
    fc18:	d507      	bpl.n	fc2a <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fc1a:	2200      	movs	r2, #0
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
    fc1c:	480d      	ldr	r0, [pc, #52]	; (fc54 <nrf_power_clock_isr+0x4c>)
    fc1e:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    fc20:	6883      	ldr	r3, [r0, #8]
    fc22:	7a5b      	ldrb	r3, [r3, #9]
    fc24:	b90b      	cbnz	r3, fc2a <nrf_power_clock_isr+0x22>
			clkstarted_handle(hfclk_dev);
    fc26:	f014 fc7d 	bl	24524 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    fc2a:	4b0b      	ldr	r3, [pc, #44]	; (fc58 <nrf_power_clock_isr+0x50>)
    fc2c:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    fc2e:	b15a      	cbz	r2, fc48 <nrf_power_clock_isr+0x40>
    return p_reg->INTENSET & mask;
    fc30:	4a07      	ldr	r2, [pc, #28]	; (fc50 <nrf_power_clock_isr+0x48>)
    fc32:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    fc36:	0792      	lsls	r2, r2, #30
    fc38:	d506      	bpl.n	fc48 <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fc3a:	2200      	movs	r2, #0

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
    fc3c:	4807      	ldr	r0, [pc, #28]	; (fc5c <nrf_power_clock_isr+0x54>)
    fc3e:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    fc40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(lfclk_dev);
    fc44:	f014 bc6e 	b.w	24524 <clkstarted_handle>
}
    fc48:	bd08      	pop	{r3, pc}
    fc4a:	bf00      	nop
    fc4c:	40005100 	.word	0x40005100
    fc50:	40005000 	.word	0x40005000
    fc54:	2002d454 	.word	0x2002d454
    fc58:	40005104 	.word	0x40005104
    fc5c:	2002d460 	.word	0x2002d460

0000fc60 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    fc60:	2200      	movs	r2, #0
    fc62:	4b0d      	ldr	r3, [pc, #52]	; (fc98 <rtc1_nrf_isr+0x38>)
    fc64:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    fc68:	f04f 0220 	mov.w	r2, #32
    fc6c:	f3ef 8111 	mrs	r1, BASEPRI
    fc70:	f382 8811 	msr	BASEPRI, r2
    fc74:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    fc78:	4a08      	ldr	r2, [pc, #32]	; (fc9c <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    fc7a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    fc7e:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    fc80:	1ac0      	subs	r0, r0, r3
    fc82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    fc86:	4403      	add	r3, r0
    fc88:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    fc8a:	f381 8811 	msr	BASEPRI, r1
    fc8e:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    fc92:	f013 b8eb 	b.w	22e6c <z_clock_announce>
    fc96:	bf00      	nop
    fc98:	40015000 	.word	0x40015000
    fc9c:	20020334 	.word	0x20020334

0000fca0 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    fca0:	b570      	push	{r4, r5, r6, lr}
    fca2:	4818      	ldr	r0, [pc, #96]	; (fd04 <z_clock_driver_init+0x64>)
    fca4:	f011 ffc8 	bl	21c38 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
    fca8:	b348      	cbz	r0, fcfe <z_clock_driver_init+0x5e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    fcaa:	6843      	ldr	r3, [r0, #4]
    fcac:	2100      	movs	r1, #0
    fcae:	681b      	ldr	r3, [r3, #0]
    fcb0:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
    fcb2:	2601      	movs	r6, #1
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    fcb4:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    fcb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fcba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    fcbe:	4d12      	ldr	r5, [pc, #72]	; (fd08 <z_clock_driver_init+0x68>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    fcc0:	4631      	mov	r1, r6
    fcc2:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    fcc6:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    fcca:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    fcce:	4b0f      	ldr	r3, [pc, #60]	; (fd0c <z_clock_driver_init+0x6c>)
    fcd0:	2015      	movs	r0, #21
    fcd2:	601c      	str	r4, [r3, #0]
    fcd4:	4b0e      	ldr	r3, [pc, #56]	; (fd10 <z_clock_driver_init+0x70>)
    fcd6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    fcda:	4622      	mov	r2, r4
    fcdc:	f000 f944 	bl	ff68 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    fce0:	2015      	movs	r0, #21
    fce2:	f000 f931 	bl	ff48 <arch_irq_enable>

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    fce6:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    fce8:	4b0a      	ldr	r3, [pc, #40]	; (fd14 <z_clock_driver_init+0x74>)
    fcea:	601e      	str	r6, [r3, #0]
    fcec:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
    fcee:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
    fcf2:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    fcf4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    fcf8:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
    fcfc:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    fcfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fd02:	e7fb      	b.n	fcfc <z_clock_driver_init+0x5c>
    fd04:	000284b7 	.word	0x000284b7
    fd08:	40015000 	.word	0x40015000
    fd0c:	40015140 	.word	0x40015140
    fd10:	e000e100 	.word	0xe000e100
    fd14:	40015008 	.word	0x40015008

0000fd18 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    fd18:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    fd1a:	4e21      	ldr	r6, [pc, #132]	; (fda0 <z_clock_set_timeout+0x88>)
    fd1c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    fd20:	bf08      	it	eq
    fd22:	4630      	moveq	r0, r6
	__asm__ volatile(
    fd24:	f04f 0320 	mov.w	r3, #32
    fd28:	f3ef 8411 	mrs	r4, BASEPRI
    fd2c:	f383 8811 	msr	BASEPRI, r3
    fd30:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    fd34:	491b      	ldr	r1, [pc, #108]	; (fda4 <z_clock_set_timeout+0x8c>)
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	bool zli_fixup = IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS);

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
    fd36:	4b1c      	ldr	r3, [pc, #112]	; (fda8 <z_clock_set_timeout+0x90>)
    fd38:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
    fd3c:	681d      	ldr	r5, [r3, #0]
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    fd3e:	3801      	subs	r0, #1
	return (a - b) & COUNTER_MAX;
    fd40:	1b53      	subs	r3, r2, r5
    fd42:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	cyc += (CYC_PER_TICK - 1);
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
	cyc += last_count;
    fd46:	3501      	adds	r5, #1
    fd48:	442b      	add	r3, r5
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
    fd4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	cyc += last_count;
    fd4e:	42b0      	cmp	r0, r6
    fd50:	bfd4      	ite	le
    fd52:	1818      	addle	r0, r3, r0
    fd54:	1998      	addgt	r0, r3, r6
	return (a - b) & COUNTER_MAX;
    fd56:	1a82      	subs	r2, r0, r2
    fd58:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    fd5c:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    fd60:	2a02      	cmp	r2, #2
    p_reg->CC[ch] = cc_val;
    fd62:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
    fd66:	d904      	bls.n	fd72 <z_clock_set_timeout+0x5a>
	__asm__ volatile(
    fd68:	f384 8811 	msr	BASEPRI, r4
    fd6c:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    fd70:	bd70      	pop	{r4, r5, r6, pc}
     return p_reg->COUNTER;
    fd72:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    fd76:	4a0d      	ldr	r2, [pc, #52]	; (fdac <z_clock_set_timeout+0x94>)
	return (a - b) & COUNTER_MAX;
    fd78:	1ac3      	subs	r3, r0, r3
    fd7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    fd7e:	1e5d      	subs	r5, r3, #1
    fd80:	4295      	cmp	r5, r2
    fd82:	d905      	bls.n	fd90 <z_clock_set_timeout+0x78>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fd84:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    fd88:	4b09      	ldr	r3, [pc, #36]	; (fdb0 <z_clock_set_timeout+0x98>)
    fd8a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    fd8e:	e7eb      	b.n	fd68 <z_clock_set_timeout+0x50>
		} else if (dt == 1) {
    fd90:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    fd92:	bf02      	ittt	eq
    fd94:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    fd96:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    fd9a:	f8c1 0540 	streq.w	r0, [r1, #1344]	; 0x540
    fd9e:	e7e3      	b.n	fd68 <z_clock_set_timeout+0x50>
    fda0:	00fffffe 	.word	0x00fffffe
    fda4:	40015000 	.word	0x40015000
    fda8:	20020334 	.word	0x20020334
    fdac:	007ffffe 	.word	0x007ffffe
    fdb0:	e000e100 	.word	0xe000e100

0000fdb4 <z_clock_elapsed>:
	__asm__ volatile(
    fdb4:	f04f 0220 	mov.w	r2, #32
    fdb8:	f3ef 8311 	mrs	r3, BASEPRI
    fdbc:	f382 8811 	msr	BASEPRI, r2
    fdc0:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    fdc4:	4a06      	ldr	r2, [pc, #24]	; (fde0 <z_clock_elapsed+0x2c>)
    fdc6:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    fdca:	4a06      	ldr	r2, [pc, #24]	; (fde4 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    fdcc:	6812      	ldr	r2, [r2, #0]
    fdce:	1a80      	subs	r0, r0, r2
    fdd0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    fdd4:	f383 8811 	msr	BASEPRI, r3
    fdd8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    fddc:	4770      	bx	lr
    fdde:	bf00      	nop
    fde0:	40015000 	.word	0x40015000
    fde4:	20020334 	.word	0x20020334

0000fde8 <z_timer_cycle_get_32>:
	__asm__ volatile(
    fde8:	f04f 0320 	mov.w	r3, #32
    fdec:	f3ef 8211 	mrs	r2, BASEPRI
    fdf0:	f383 8811 	msr	BASEPRI, r3
    fdf4:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    fdf8:	4906      	ldr	r1, [pc, #24]	; (fe14 <z_timer_cycle_get_32+0x2c>)
    fdfa:	4b07      	ldr	r3, [pc, #28]	; (fe18 <z_timer_cycle_get_32+0x30>)
    fdfc:	6808      	ldr	r0, [r1, #0]
    fdfe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    fe02:	f382 8811 	msr	BASEPRI, r2
    fe06:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    fe0a:	1a1b      	subs	r3, r3, r0
    fe0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    fe10:	4418      	add	r0, r3
    fe12:	4770      	bx	lr
    fe14:	20020334 	.word	0x20020334
    fe18:	40015000 	.word	0x40015000

0000fe1c <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    fe1c:	4807      	ldr	r0, [pc, #28]	; (fe3c <_EXIT_EXC+0xe>)

    ldr r1, [r0, #_kernel_offset_to_current]
    fe1e:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    fe20:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    fe22:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    fe24:	d003      	beq.n	fe2e <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    fe26:	4906      	ldr	r1, [pc, #24]	; (fe40 <_EXIT_EXC+0x12>)
    ldr r2, =_SCS_ICSR_PENDSV
    fe28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    fe2c:	600a      	str	r2, [r1, #0]

0000fe2e <_EXIT_EXC>:
_EXIT_EXC:
#endif /* CONFIG_PREEMPT_ENABLED */

#ifdef CONFIG_STACK_SENTINEL
#if defined(CONFIG_CPU_CORTEX_M)
    push {r0, lr}
    fe2e:	b501      	push	{r0, lr}
    bl z_check_stack_sentinel
    fe30:	f012 fe66 	bl	22b00 <z_check_stack_sentinel>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0, r1}
    mov lr, r1
#else
    pop {r0, lr}
    fe34:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    fe38:	4770      	bx	lr
    fe3a:	0000      	.short	0x0000
    ldr r0, =_kernel
    fe3c:	20025cfc 	.word	0x20025cfc
    ldr r1, =_SCS_ICSR
    fe40:	e000ed04 	.word	0xe000ed04

0000fe44 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    fe44:	4a09      	ldr	r2, [pc, #36]	; (fe6c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    fe46:	490a      	ldr	r1, [pc, #40]	; (fe70 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    fe48:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    fe4a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    fe4c:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    fe4e:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    fe50:	4908      	ldr	r1, [pc, #32]	; (fe74 <arch_swap+0x30>)
    fe52:	684b      	ldr	r3, [r1, #4]
    fe54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    fe58:	604b      	str	r3, [r1, #4]
    fe5a:	2300      	movs	r3, #0
    fe5c:	f383 8811 	msr	BASEPRI, r3
    fe60:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    fe64:	6893      	ldr	r3, [r2, #8]
}
    fe66:	6e98      	ldr	r0, [r3, #104]	; 0x68
    fe68:	4770      	bx	lr
    fe6a:	bf00      	nop
    fe6c:	20025cfc 	.word	0x20025cfc
    fe70:	000278f4 	.word	0x000278f4
    fe74:	e000ed00 	.word	0xe000ed00

0000fe78 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    fe78:	4929      	ldr	r1, [pc, #164]	; (ff20 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    fe7a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    fe7c:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    fe80:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    fe82:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    fe86:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
    fe8a:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    fe8e:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
    fe92:	d004      	beq.n	fe9e <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
    fe94:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
    fe98:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
    fe9c:	e007      	b.n	feae <out_fp_endif>

0000fe9e <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
    fe9e:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
    fea2:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
    fea6:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
    feaa:	f050 0004 	orrs.w	r0, r0, #4

0000feae <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
    feae:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    feb2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    feb4:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    feb8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    febc:	4f19      	ldr	r7, [pc, #100]	; (ff24 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    febe:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    fec2:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    fec4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    fec6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    fec8:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    feca:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    fecc:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    fece:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
    fed2:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
    fed6:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
    feda:	d105      	bne.n	fee8 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    fedc:	2300      	movs	r3, #0
    vmsr fpscr, r3
    fede:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    fee2:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
    fee6:	e005      	b.n	fef4 <in_fp_endif>

0000fee8 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
    fee8:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
    feec:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
    fef0:	ec90 8a10 	vldmia	r0, {s16-s31}

0000fef4 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    fef4:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
    fef8:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    fefc:	f383 8814 	msr	CONTROL, r3
    isb
    ff00:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    ff04:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    ff06:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    ff08:	f014 fb38 	bl	2457c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    ff0c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    ff10:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    ff14:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    ff18:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    ff1c:	4770      	bx	lr
    ff1e:	0000      	.short	0x0000
    ldr r1, =_kernel
    ff20:	20025cfc 	.word	0x20025cfc
    ldr v4, =_SCS_ICSR
    ff24:	e000ed04 	.word	0xe000ed04

0000ff28 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    ff28:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    ff2c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    ff2e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    ff32:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    ff36:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    ff38:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    ff3c:	2902      	cmp	r1, #2
    beq _oops
    ff3e:	d0ff      	beq.n	ff40 <_oops>

0000ff40 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    ff40:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    ff42:	f014 fb10 	bl	24566 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    ff46:	bd01      	pop	{r0, pc}

0000ff48 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    ff48:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    ff4a:	2b00      	cmp	r3, #0
    ff4c:	db08      	blt.n	ff60 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ff4e:	2201      	movs	r2, #1
    ff50:	f000 001f 	and.w	r0, r0, #31
    ff54:	fa02 f000 	lsl.w	r0, r2, r0
    ff58:	4a02      	ldr	r2, [pc, #8]	; (ff64 <arch_irq_enable+0x1c>)
    ff5a:	095b      	lsrs	r3, r3, #5
    ff5c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    ff60:	4770      	bx	lr
    ff62:	bf00      	nop
    ff64:	e000e100 	.word	0xe000e100

0000ff68 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    ff68:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    ff6a:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    ff6c:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ff70:	bfa8      	it	ge
    ff72:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    ff76:	ea4f 1141 	mov.w	r1, r1, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ff7a:	bfb8      	it	lt
    ff7c:	4b05      	ldrlt	r3, [pc, #20]	; (ff94 <z_arm_irq_priority_set+0x2c>)
    ff7e:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ff80:	bfab      	itete	ge
    ff82:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ff86:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ff8a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ff8e:	5419      	strblt	r1, [r3, r0]
}
    ff90:	4770      	bx	lr
    ff92:	bf00      	nop
    ff94:	e000ed14 	.word	0xe000ed14

0000ff98 <_arch_isr_direct_pm>:
	z_arm_reserved();
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    ff98:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    ff9a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    ff9c:	4b04      	ldr	r3, [pc, #16]	; (ffb0 <_arch_isr_direct_pm+0x18>)
    ff9e:	6a18      	ldr	r0, [r3, #32]
    ffa0:	b118      	cbz	r0, ffaa <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    ffa2:	2200      	movs	r2, #0
    ffa4:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    ffa6:	f015 fd4e 	bl	25a46 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    ffaa:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    ffac:	bd08      	pop	{r3, pc}
    ffae:	bf00      	nop
    ffb0:	20025cfc 	.word	0x20025cfc

0000ffb4 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
    ffb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ffb6:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
    ffb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
    ffba:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    ffbc:	9300      	str	r3, [sp, #0]
    ffbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
	stackEnd = pStackMem + stackSize;
    ffc0:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    ffc2:	f015 ff65 	bl	25e90 <z_new_thread_init>
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    ffc6:	4a0c      	ldr	r2, [pc, #48]	; (fff8 <arch_new_thread+0x44>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    ffc8:	f1a4 0320 	sub.w	r3, r4, #32
    ffcc:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    ffd0:	f022 0201 	bic.w	r2, r2, #1
    ffd4:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    ffd6:	9a06      	ldr	r2, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
    ffd8:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    ffda:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    ffdc:	9a07      	ldr	r2, [sp, #28]
    ffde:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    ffe0:	9a08      	ldr	r2, [sp, #32]
    ffe2:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
    ffe4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    ffe8:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    ffea:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    ffec:	2300      	movs	r3, #0
    ffee:	666b      	str	r3, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
    fff0:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    fff4:	b002      	add	sp, #8
    fff6:	bd70      	pop	{r4, r5, r6, pc}
    fff8:	00023a77 	.word	0x00023a77

0000fffc <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    fffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10000:	461f      	mov	r7, r3
   10002:	4606      	mov	r6, r0
   10004:	460c      	mov	r4, r1
   10006:	4690      	mov	r8, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   10008:	2300      	movs	r3, #0
   1000a:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1000e:	f3ef 8514 	mrs	r5, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   10012:	f025 0504 	bic.w	r5, r5, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   10016:	f385 8814 	msr	CONTROL, r5
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   1001a:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1001e:	f000 fc43 	bl	108a8 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
   10022:	4b0a      	ldr	r3, [pc, #40]	; (1004c <arch_switch_to_main_thread+0x50>)
	start_of_main_stack =
   10024:	4444      	add	r4, r8
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   10026:	4630      	mov	r0, r6
	_current = main_thread;
   10028:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
   1002a:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1002e:	f014 faa5 	bl	2457c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   10032:	4638      	mov	r0, r7
   10034:	f384 8809 	msr	PSP, r4
   10038:	2100      	movs	r1, #0
   1003a:	b663      	cpsie	if
   1003c:	f381 8811 	msr	BASEPRI, r1
   10040:	f3bf 8f6f 	isb	sy
   10044:	2200      	movs	r2, #0
   10046:	2300      	movs	r3, #0
   10048:	f013 fd15 	bl	23a76 <z_thread_entry>
   1004c:	20025cfc 	.word	0x20025cfc

00010050 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
   10050:	4901      	ldr	r1, [pc, #4]	; (10058 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   10052:	2210      	movs	r2, #16
	str r2, [r1]
   10054:	600a      	str	r2, [r1, #0]
#endif
	bx lr
   10056:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   10058:	e000ed10 	.word	0xe000ed10

0001005c <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   1005c:	4040      	eors	r0, r0
	msr BASEPRI, r0
   1005e:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
   10062:	bf30      	wfi

	bx lr
   10064:	4770      	bx	lr
   10066:	bf00      	nop

00010068 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
   10068:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1006c:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
   10070:	4672      	mov	r2, lr

	push {r0, lr}
   10072:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
   10074:	f000 fadc 	bl	10630 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
   10078:	bd01      	pop	{r0, pc}
   1007a:	bf00      	nop

0001007c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1007c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10080:	4681      	mov	r9, r0
   10082:	b08b      	sub	sp, #44	; 0x2c

	if (esf != NULL) {
   10084:	460c      	mov	r4, r1
   10086:	2900      	cmp	r1, #0
   10088:	d07f      	beq.n	1018a <z_arm_fatal_error+0x10e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1008a:	f04f 0801 	mov.w	r8, #1
   1008e:	f04f 0300 	mov.w	r3, #0
   10092:	4a41      	ldr	r2, [pc, #260]	; (10198 <z_arm_fatal_error+0x11c>)
   10094:	4d41      	ldr	r5, [pc, #260]	; (1019c <z_arm_fatal_error+0x120>)
   10096:	f368 0302 	bfi	r3, r8, #0, #3
   1009a:	1aad      	subs	r5, r5, r2
   1009c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   100a0:	f36f 03c5 	bfc	r3, #3, #3
   100a4:	f365 138f 	bfi	r3, r5, #6, #10
   100a8:	f8ad 3000 	strh.w	r3, [sp]
   100ac:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   100b0:	483b      	ldr	r0, [pc, #236]	; (101a0 <z_arm_fatal_error+0x124>)
   100b2:	6809      	ldr	r1, [r1, #0]
   100b4:	f013 fef8 	bl	23ea8 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   100b8:	f04f 0300 	mov.w	r3, #0
   100bc:	f368 0302 	bfi	r3, r8, #0, #3
   100c0:	f36f 03c5 	bfc	r3, #3, #3
   100c4:	f365 138f 	bfi	r3, r5, #6, #10
   100c8:	f8ad 3000 	strh.w	r3, [sp]
   100cc:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   100d0:	68e1      	ldr	r1, [r4, #12]
   100d2:	4834      	ldr	r0, [pc, #208]	; (101a4 <z_arm_fatal_error+0x128>)
   100d4:	f013 fee8 	bl	23ea8 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   100d8:	f04f 0200 	mov.w	r2, #0
   100dc:	f368 0202 	bfi	r2, r8, #0, #3
   100e0:	f36f 02c5 	bfc	r2, #3, #3
   100e4:	f365 128f 	bfi	r2, r5, #6, #10
   100e8:	69e1      	ldr	r1, [r4, #28]
   100ea:	482f      	ldr	r0, [pc, #188]	; (101a8 <z_arm_fatal_error+0x12c>)
   100ec:	f013 feb0 	bl	23e50 <log_1>
   100f0:	4627      	mov	r7, r4
	for (int i = 0; i < 16; i += 4) {
   100f2:	2600      	movs	r6, #0
		LOG_ERR("s[%d]:  0x%08x  s[%d]:  0x%08x"
   100f4:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 101b4 <z_arm_fatal_error+0x138>
   100f8:	edd7 7a08 	vldr	s15, [r7, #32]
   100fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   10100:	edcd 7a03 	vstr	s15, [sp, #12]
   10104:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   10108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1010c:	edcd 7a05 	vstr	s15, [sp, #20]
   10110:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   10114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   10118:	edcd 7a07 	vstr	s15, [sp, #28]
   1011c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   10120:	2208      	movs	r2, #8
   10122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   10126:	1c73      	adds	r3, r6, #1
   10128:	f368 0a02 	bfi	sl, r8, #0, #3
   1012c:	9304      	str	r3, [sp, #16]
   1012e:	f36f 0ac5 	bfc	sl, #3, #3
   10132:	1cb3      	adds	r3, r6, #2
   10134:	9306      	str	r3, [sp, #24]
   10136:	f365 1a8f 	bfi	sl, r5, #6, #10
   1013a:	1cf3      	adds	r3, r6, #3
   1013c:	9602      	str	r6, [sp, #8]
   1013e:	9308      	str	r3, [sp, #32]
   10140:	eb0d 0102 	add.w	r1, sp, r2
   10144:	4653      	mov	r3, sl
   10146:	4658      	mov	r0, fp
	for (int i = 0; i < 16; i += 4) {
   10148:	3604      	adds	r6, #4
		LOG_ERR("s[%d]:  0x%08x  s[%d]:  0x%08x"
   1014a:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   1014e:	f013 fec6 	bl	23ede <log_n>
	for (int i = 0; i < 16; i += 4) {
   10152:	2e10      	cmp	r6, #16
   10154:	f107 0710 	add.w	r7, r7, #16
   10158:	d1ce      	bne.n	100f8 <z_arm_fatal_error+0x7c>
	LOG_ERR("fpscr:  0x%08x\n", esf->fpscr);
   1015a:	f04f 0200 	mov.w	r2, #0
   1015e:	f368 0202 	bfi	r2, r8, #0, #3
   10162:	f36f 02c5 	bfc	r2, #3, #3
   10166:	f365 128f 	bfi	r2, r5, #6, #10
   1016a:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1016c:	480f      	ldr	r0, [pc, #60]	; (101ac <z_arm_fatal_error+0x130>)
   1016e:	f013 fe6f 	bl	23e50 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   10172:	f04f 0200 	mov.w	r2, #0
   10176:	f368 0202 	bfi	r2, r8, #0, #3
   1017a:	f36f 02c5 	bfc	r2, #3, #3
   1017e:	f365 128f 	bfi	r2, r5, #6, #10
   10182:	69a1      	ldr	r1, [r4, #24]
   10184:	480a      	ldr	r0, [pc, #40]	; (101b0 <z_arm_fatal_error+0x134>)
   10186:	f013 fe63 	bl	23e50 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1018a:	4621      	mov	r1, r4
   1018c:	4648      	mov	r0, r9
   1018e:	f011 fd9d 	bl	21ccc <z_fatal_error>
}
   10192:	b00b      	add	sp, #44	; 0x2c
   10194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10198:	00026560 	.word	0x00026560
   1019c:	000265b8 	.word	0x000265b8
   101a0:	000284e3 	.word	0x000284e3
   101a4:	00028512 	.word	0x00028512
   101a8:	00028541 	.word	0x00028541
   101ac:	00028590 	.word	0x00028590
   101b0:	000285a0 	.word	0x000285a0
   101b4:	00028550 	.word	0x00028550

000101b8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   101b8:	bf30      	wfi
    b z_SysNmiOnReset
   101ba:	f7ff bffd 	b.w	101b8 <z_SysNmiOnReset>
   101be:	bf00      	nop

000101c0 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   101c0:	4a11      	ldr	r2, [pc, #68]	; (10208 <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   101c2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   101c4:	4b11      	ldr	r3, [pc, #68]	; (1020c <z_arm_prep_c+0x4c>)
   101c6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   101ca:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   101cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   101d0:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   101d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   101d8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   101dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   101e0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   101e4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   101e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   101ec:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   101f0:	2300      	movs	r3, #0
   101f2:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
   101f6:	f011 fdef 	bl	21dd8 <z_bss_zero>
	z_data_copy();
   101fa:	f011 fdf7 	bl	21dec <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
   101fe:	f000 fb1f 	bl	10840 <z_arm_int_lib_init>
	z_cstart();
   10202:	f011 fe25 	bl	21e50 <z_cstart>
   10206:	bf00      	nop
   10208:	0000c000 	.word	0x0000c000
   1020c:	e000ed00 	.word	0xe000ed00

00010210 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   10210:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
   10212:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   10214:	4a0b      	ldr	r2, [pc, #44]	; (10244 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   10216:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   10218:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1021a:	bf1e      	ittt	ne
	movne	r1, #0
   1021c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1021e:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   10220:	f015 fc11 	blne	25a46 <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   10224:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   10226:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1022a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1022e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
   10232:	4905      	ldr	r1, [pc, #20]	; (10248 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   10234:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   10236:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   10238:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1023a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1023e:	4903      	ldr	r1, [pc, #12]	; (1024c <_isr_wrapper+0x3c>)
	bx r1
   10240:	4708      	bx	r1
   10242:	0000      	.short	0x0000
	ldr r2, =_kernel
   10244:	20025cfc 	.word	0x20025cfc
	ldr r1, =_sw_isr_table
   10248:	00026274 	.word	0x00026274
	ldr r1, =z_arm_int_exit
   1024c:	0000fe1d 	.word	0x0000fe1d

00010250 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   10250:	f013 fdcc 	bl	23dec <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   10254:	2020      	movs	r0, #32
    msr BASEPRI, r0
   10256:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
   1025a:	4808      	ldr	r0, [pc, #32]	; (1027c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   1025c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   10260:	1840      	adds	r0, r0, r1
    msr PSP, r0
   10262:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   10266:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1026a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1026c:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1026e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   10272:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   10276:	f7ff ffa3 	bl	101c0 <z_arm_prep_c>
   1027a:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   1027c:	20029190 	.word	0x20029190

00010280 <usage_fault.isra.2>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
   10280:	b570      	push	{r4, r5, r6, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   10282:	f04f 0100 	mov.w	r1, #0
   10286:	2601      	movs	r6, #1
   10288:	4b40      	ldr	r3, [pc, #256]	; (1038c <usage_fault.isra.2+0x10c>)
   1028a:	4c41      	ldr	r4, [pc, #260]	; (10390 <usage_fault.isra.2+0x110>)
   1028c:	f366 0102 	bfi	r1, r6, #0, #3
   10290:	1ae4      	subs	r4, r4, r3
   10292:	f36f 01c5 	bfc	r1, #3, #3
   10296:	f3c4 04c9 	ubfx	r4, r4, #3, #10

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1029a:	4d3e      	ldr	r5, [pc, #248]	; (10394 <usage_fault.isra.2+0x114>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   1029c:	f364 118f 	bfi	r1, r4, #6, #10
   102a0:	483d      	ldr	r0, [pc, #244]	; (10398 <usage_fault.isra.2+0x118>)
   102a2:	f013 fdc8 	bl	23e36 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   102a6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   102a8:	0192      	lsls	r2, r2, #6
   102aa:	d50a      	bpl.n	102c2 <usage_fault.isra.2+0x42>
		PR_FAULT_INFO("  Division by zero");
   102ac:	f04f 0100 	mov.w	r1, #0
   102b0:	f366 0102 	bfi	r1, r6, #0, #3
   102b4:	f36f 01c5 	bfc	r1, #3, #3
   102b8:	f364 118f 	bfi	r1, r4, #6, #10
   102bc:	4837      	ldr	r0, [pc, #220]	; (1039c <usage_fault.isra.2+0x11c>)
   102be:	f013 fdba 	bl	23e36 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   102c2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   102c4:	01db      	lsls	r3, r3, #7
   102c6:	d50b      	bpl.n	102e0 <usage_fault.isra.2+0x60>
		PR_FAULT_INFO("  Unaligned memory access");
   102c8:	f04f 0100 	mov.w	r1, #0
   102cc:	2301      	movs	r3, #1
   102ce:	f363 0102 	bfi	r1, r3, #0, #3
   102d2:	f36f 01c5 	bfc	r1, #3, #3
   102d6:	f364 118f 	bfi	r1, r4, #6, #10
   102da:	4831      	ldr	r0, [pc, #196]	; (103a0 <usage_fault.isra.2+0x120>)
   102dc:	f013 fdab 	bl	23e36 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   102e0:	4d2c      	ldr	r5, [pc, #176]	; (10394 <usage_fault.isra.2+0x114>)
   102e2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   102e4:	02d6      	lsls	r6, r2, #11
   102e6:	d50b      	bpl.n	10300 <usage_fault.isra.2+0x80>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   102e8:	f04f 0100 	mov.w	r1, #0
   102ec:	2301      	movs	r3, #1
   102ee:	f363 0102 	bfi	r1, r3, #0, #3
   102f2:	f36f 01c5 	bfc	r1, #3, #3
   102f6:	f364 118f 	bfi	r1, r4, #6, #10
   102fa:	482a      	ldr	r0, [pc, #168]	; (103a4 <usage_fault.isra.2+0x124>)
   102fc:	f013 fd9b 	bl	23e36 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   10300:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10302:	0318      	lsls	r0, r3, #12
   10304:	d50b      	bpl.n	1031e <usage_fault.isra.2+0x9e>
		PR_FAULT_INFO("  No coprocessor instructions");
   10306:	f04f 0100 	mov.w	r1, #0
   1030a:	2301      	movs	r3, #1
   1030c:	f363 0102 	bfi	r1, r3, #0, #3
   10310:	f36f 01c5 	bfc	r1, #3, #3
   10314:	f364 118f 	bfi	r1, r4, #6, #10
   10318:	4823      	ldr	r0, [pc, #140]	; (103a8 <usage_fault.isra.2+0x128>)
   1031a:	f013 fd8c 	bl	23e36 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1031e:	4d1d      	ldr	r5, [pc, #116]	; (10394 <usage_fault.isra.2+0x114>)
   10320:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   10322:	0351      	lsls	r1, r2, #13
   10324:	d50b      	bpl.n	1033e <usage_fault.isra.2+0xbe>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   10326:	f04f 0100 	mov.w	r1, #0
   1032a:	2301      	movs	r3, #1
   1032c:	f363 0102 	bfi	r1, r3, #0, #3
   10330:	f36f 01c5 	bfc	r1, #3, #3
   10334:	f364 118f 	bfi	r1, r4, #6, #10
   10338:	481c      	ldr	r0, [pc, #112]	; (103ac <usage_fault.isra.2+0x12c>)
   1033a:	f013 fd7c 	bl	23e36 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1033e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10340:	039a      	lsls	r2, r3, #14
   10342:	d50b      	bpl.n	1035c <usage_fault.isra.2+0xdc>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   10344:	f04f 0100 	mov.w	r1, #0
   10348:	2301      	movs	r3, #1
   1034a:	f363 0102 	bfi	r1, r3, #0, #3
   1034e:	f36f 01c5 	bfc	r1, #3, #3
   10352:	f364 118f 	bfi	r1, r4, #6, #10
   10356:	4816      	ldr	r0, [pc, #88]	; (103b0 <usage_fault.isra.2+0x130>)
   10358:	f013 fd6d 	bl	23e36 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1035c:	4d0d      	ldr	r5, [pc, #52]	; (10394 <usage_fault.isra.2+0x114>)
   1035e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10360:	03db      	lsls	r3, r3, #15
   10362:	d50b      	bpl.n	1037c <usage_fault.isra.2+0xfc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   10364:	f04f 0100 	mov.w	r1, #0
   10368:	2301      	movs	r3, #1
   1036a:	f363 0102 	bfi	r1, r3, #0, #3
   1036e:	f36f 01c5 	bfc	r1, #3, #3
   10372:	f364 118f 	bfi	r1, r4, #6, #10
   10376:	480f      	ldr	r0, [pc, #60]	; (103b4 <usage_fault.isra.2+0x134>)
   10378:	f013 fd5d 	bl	23e36 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1037c:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   1037e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   10380:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   10384:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   10388:	62ab      	str	r3, [r5, #40]	; 0x28
}
   1038a:	bd70      	pop	{r4, r5, r6, pc}
   1038c:	00026560 	.word	0x00026560
   10390:	000265b8 	.word	0x000265b8
   10394:	e000ed00 	.word	0xe000ed00
   10398:	0002872e 	.word	0x0002872e
   1039c:	00028746 	.word	0x00028746
   103a0:	00028759 	.word	0x00028759
   103a4:	00028773 	.word	0x00028773
   103a8:	0002879d 	.word	0x0002879d
   103ac:	000287bb 	.word	0x000287bb
   103b0:	000287e0 	.word	0x000287e0
   103b4:	000287fa 	.word	0x000287fa

000103b8 <mem_manage_fault.isra.4>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   103b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   103bc:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   103be:	f04f 0801 	mov.w	r8, #1
   103c2:	f04f 0100 	mov.w	r1, #0
   103c6:	4b3d      	ldr	r3, [pc, #244]	; (104bc <mem_manage_fault.isra.4+0x104>)
   103c8:	4c3d      	ldr	r4, [pc, #244]	; (104c0 <mem_manage_fault.isra.4+0x108>)
   103ca:	f368 0102 	bfi	r1, r8, #0, #3
   103ce:	1ae4      	subs	r4, r4, r3
   103d0:	f36f 01c5 	bfc	r1, #3, #3
   103d4:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   103d8:	4d3a      	ldr	r5, [pc, #232]	; (104c4 <mem_manage_fault.isra.4+0x10c>)
	PR_FAULT_INFO("***** MPU FAULT *****");
   103da:	f364 118f 	bfi	r1, r4, #6, #10
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   103de:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   103e0:	4839      	ldr	r0, [pc, #228]	; (104c8 <mem_manage_fault.isra.4+0x110>)
   103e2:	f013 fd28 	bl	23e36 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   103e6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   103e8:	06d1      	lsls	r1, r2, #27
   103ea:	d50a      	bpl.n	10402 <mem_manage_fault.isra.4+0x4a>
		PR_FAULT_INFO("  Stacking error (context area might be"
   103ec:	f04f 0100 	mov.w	r1, #0
   103f0:	f368 0102 	bfi	r1, r8, #0, #3
   103f4:	f36f 01c5 	bfc	r1, #3, #3
   103f8:	f364 118f 	bfi	r1, r4, #6, #10
   103fc:	4833      	ldr	r0, [pc, #204]	; (104cc <mem_manage_fault.isra.4+0x114>)
   103fe:	f013 fd1a 	bl	23e36 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   10402:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10404:	071a      	lsls	r2, r3, #28
   10406:	d50b      	bpl.n	10420 <mem_manage_fault.isra.4+0x68>
		PR_FAULT_INFO("  Unstacking error");
   10408:	f04f 0100 	mov.w	r1, #0
   1040c:	2301      	movs	r3, #1
   1040e:	f363 0102 	bfi	r1, r3, #0, #3
   10412:	f36f 01c5 	bfc	r1, #3, #3
   10416:	f364 118f 	bfi	r1, r4, #6, #10
   1041a:	482d      	ldr	r0, [pc, #180]	; (104d0 <mem_manage_fault.isra.4+0x118>)
   1041c:	f013 fd0b 	bl	23e36 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   10420:	4d28      	ldr	r5, [pc, #160]	; (104c4 <mem_manage_fault.isra.4+0x10c>)
   10422:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10424:	079b      	lsls	r3, r3, #30
   10426:	d520      	bpl.n	1046a <mem_manage_fault.isra.4+0xb2>
		PR_FAULT_INFO("  Data Access Violation");
   10428:	f04f 0801 	mov.w	r8, #1
   1042c:	f04f 0100 	mov.w	r1, #0
   10430:	f368 0102 	bfi	r1, r8, #0, #3
   10434:	f36f 01c5 	bfc	r1, #3, #3
   10438:	f364 118f 	bfi	r1, r4, #6, #10
   1043c:	4825      	ldr	r0, [pc, #148]	; (104d4 <mem_manage_fault.isra.4+0x11c>)
   1043e:	f013 fcfa 	bl	23e36 <log_0>
		mmfar = SCB->MMFAR;
   10442:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   10444:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10446:	0618      	lsls	r0, r3, #24
   10448:	d50f      	bpl.n	1046a <mem_manage_fault.isra.4+0xb2>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1044a:	f04f 0200 	mov.w	r2, #0
   1044e:	f368 0202 	bfi	r2, r8, #0, #3
   10452:	f36f 02c5 	bfc	r2, #3, #3
   10456:	f364 128f 	bfi	r2, r4, #6, #10
   1045a:	481f      	ldr	r0, [pc, #124]	; (104d8 <mem_manage_fault.isra.4+0x120>)
   1045c:	f013 fcf8 	bl	23e50 <log_1>
			if (from_hard_fault) {
   10460:	b11f      	cbz	r7, 1046a <mem_manage_fault.isra.4+0xb2>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   10462:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10464:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   10468:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1046a:	4d16      	ldr	r5, [pc, #88]	; (104c4 <mem_manage_fault.isra.4+0x10c>)
   1046c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1046e:	07d2      	lsls	r2, r2, #31
   10470:	d50b      	bpl.n	1048a <mem_manage_fault.isra.4+0xd2>
		PR_FAULT_INFO("  Instruction Access Violation");
   10472:	f04f 0100 	mov.w	r1, #0
   10476:	2301      	movs	r3, #1
   10478:	f363 0102 	bfi	r1, r3, #0, #3
   1047c:	f36f 01c5 	bfc	r1, #3, #3
   10480:	f364 118f 	bfi	r1, r4, #6, #10
   10484:	4815      	ldr	r0, [pc, #84]	; (104dc <mem_manage_fault.isra.4+0x124>)
   10486:	f013 fcd6 	bl	23e36 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1048a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1048c:	069b      	lsls	r3, r3, #26
   1048e:	d50b      	bpl.n	104a8 <mem_manage_fault.isra.4+0xf0>
		PR_FAULT_INFO(
   10490:	f04f 0100 	mov.w	r1, #0
   10494:	2301      	movs	r3, #1
   10496:	f363 0102 	bfi	r1, r3, #0, #3
   1049a:	f36f 01c5 	bfc	r1, #3, #3
   1049e:	f364 118f 	bfi	r1, r4, #6, #10
   104a2:	480f      	ldr	r0, [pc, #60]	; (104e0 <mem_manage_fault.isra.4+0x128>)
   104a4:	f013 fcc7 	bl	23e36 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   104a8:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   104aa:	4b06      	ldr	r3, [pc, #24]	; (104c4 <mem_manage_fault.isra.4+0x10c>)
   104ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   104ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   104b0:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   104b4:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   104b6:	7030      	strb	r0, [r6, #0]
}
   104b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   104bc:	00026560 	.word	0x00026560
   104c0:	000265b8 	.word	0x000265b8
   104c4:	e000ed00 	.word	0xe000ed00
   104c8:	00028656 	.word	0x00028656
   104cc:	0002866c 	.word	0x0002866c
   104d0:	0002869f 	.word	0x0002869f
   104d4:	000286b2 	.word	0x000286b2
   104d8:	000286ca 	.word	0x000286ca
   104dc:	000286e0 	.word	0x000286e0
   104e0:	000286ff 	.word	0x000286ff

000104e4 <bus_fault.isra.5>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   104e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   104e8:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   104ea:	f04f 0801 	mov.w	r8, #1
   104ee:	f04f 0100 	mov.w	r1, #0
   104f2:	4b44      	ldr	r3, [pc, #272]	; (10604 <bus_fault.isra.5+0x120>)
   104f4:	4c44      	ldr	r4, [pc, #272]	; (10608 <bus_fault.isra.5+0x124>)
   104f6:	f368 0102 	bfi	r1, r8, #0, #3
   104fa:	1ae4      	subs	r4, r4, r3
   104fc:	f36f 01c5 	bfc	r1, #3, #3
   10500:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   10504:	4d41      	ldr	r5, [pc, #260]	; (1060c <bus_fault.isra.5+0x128>)
	PR_FAULT_INFO("***** BUS FAULT *****");
   10506:	f364 118f 	bfi	r1, r4, #6, #10
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1050a:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   1050c:	4840      	ldr	r0, [pc, #256]	; (10610 <bus_fault.isra.5+0x12c>)
   1050e:	f013 fc92 	bl	23e36 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   10512:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   10514:	04d1      	lsls	r1, r2, #19
   10516:	d50a      	bpl.n	1052e <bus_fault.isra.5+0x4a>
		PR_FAULT_INFO("  Stacking error");
   10518:	f04f 0100 	mov.w	r1, #0
   1051c:	f368 0102 	bfi	r1, r8, #0, #3
   10520:	f36f 01c5 	bfc	r1, #3, #3
   10524:	f364 118f 	bfi	r1, r4, #6, #10
   10528:	483a      	ldr	r0, [pc, #232]	; (10614 <bus_fault.isra.5+0x130>)
   1052a:	f013 fc84 	bl	23e36 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1052e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10530:	051a      	lsls	r2, r3, #20
   10532:	d50b      	bpl.n	1054c <bus_fault.isra.5+0x68>
		PR_FAULT_INFO("  Unstacking error");
   10534:	f04f 0100 	mov.w	r1, #0
   10538:	2301      	movs	r3, #1
   1053a:	f363 0102 	bfi	r1, r3, #0, #3
   1053e:	f36f 01c5 	bfc	r1, #3, #3
   10542:	f364 118f 	bfi	r1, r4, #6, #10
   10546:	4834      	ldr	r0, [pc, #208]	; (10618 <bus_fault.isra.5+0x134>)
   10548:	f013 fc75 	bl	23e36 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1054c:	4d2f      	ldr	r5, [pc, #188]	; (1060c <bus_fault.isra.5+0x128>)
   1054e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10550:	059b      	lsls	r3, r3, #22
   10552:	d520      	bpl.n	10596 <bus_fault.isra.5+0xb2>
		PR_FAULT_INFO("  Precise data bus error");
   10554:	f04f 0801 	mov.w	r8, #1
   10558:	f04f 0100 	mov.w	r1, #0
   1055c:	f368 0102 	bfi	r1, r8, #0, #3
   10560:	f36f 01c5 	bfc	r1, #3, #3
   10564:	f364 118f 	bfi	r1, r4, #6, #10
   10568:	482c      	ldr	r0, [pc, #176]	; (1061c <bus_fault.isra.5+0x138>)
   1056a:	f013 fc64 	bl	23e36 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   1056e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   10570:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10572:	0418      	lsls	r0, r3, #16
   10574:	d50f      	bpl.n	10596 <bus_fault.isra.5+0xb2>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   10576:	f04f 0200 	mov.w	r2, #0
   1057a:	f368 0202 	bfi	r2, r8, #0, #3
   1057e:	f36f 02c5 	bfc	r2, #3, #3
   10582:	f364 128f 	bfi	r2, r4, #6, #10
   10586:	4826      	ldr	r0, [pc, #152]	; (10620 <bus_fault.isra.5+0x13c>)
   10588:	f013 fc62 	bl	23e50 <log_1>
			if (from_hard_fault) {
   1058c:	b11f      	cbz	r7, 10596 <bus_fault.isra.5+0xb2>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1058e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10590:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   10594:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   10596:	4d1d      	ldr	r5, [pc, #116]	; (1060c <bus_fault.isra.5+0x128>)
   10598:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1059a:	0559      	lsls	r1, r3, #21
   1059c:	d50b      	bpl.n	105b6 <bus_fault.isra.5+0xd2>
		PR_FAULT_INFO("  Imprecise data bus error");
   1059e:	f04f 0100 	mov.w	r1, #0
   105a2:	2301      	movs	r3, #1
   105a4:	f363 0102 	bfi	r1, r3, #0, #3
   105a8:	f36f 01c5 	bfc	r1, #3, #3
   105ac:	f364 118f 	bfi	r1, r4, #6, #10
   105b0:	481c      	ldr	r0, [pc, #112]	; (10624 <bus_fault.isra.5+0x140>)
   105b2:	f013 fc40 	bl	23e36 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   105b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   105b8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
   105bc:	d014      	beq.n	105e8 <bus_fault.isra.5+0x104>
		PR_FAULT_INFO("  Instruction bus error");
   105be:	f04f 0100 	mov.w	r1, #0
   105c2:	2301      	movs	r3, #1
   105c4:	f363 0102 	bfi	r1, r3, #0, #3
   105c8:	f36f 01c5 	bfc	r1, #3, #3
   105cc:	4816      	ldr	r0, [pc, #88]	; (10628 <bus_fault.isra.5+0x144>)
   105ce:	f364 118f 	bfi	r1, r4, #6, #10
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   105d2:	f013 fc30 	bl	23e36 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   105d6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   105d8:	4a0c      	ldr	r2, [pc, #48]	; (1060c <bus_fault.isra.5+0x128>)
   105da:	6a93      	ldr	r3, [r2, #40]	; 0x28
   105dc:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   105e0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   105e2:	7030      	strb	r0, [r6, #0]
}
   105e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   105e8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   105ea:	0492      	lsls	r2, r2, #18
   105ec:	d5f3      	bpl.n	105d6 <bus_fault.isra.5+0xf2>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   105ee:	f04f 0100 	mov.w	r1, #0
   105f2:	2201      	movs	r2, #1
   105f4:	f362 0102 	bfi	r1, r2, #0, #3
   105f8:	f363 01c5 	bfi	r1, r3, #3, #3
   105fc:	f364 118f 	bfi	r1, r4, #6, #10
   10600:	480a      	ldr	r0, [pc, #40]	; (1062c <bus_fault.isra.5+0x148>)
   10602:	e7e6      	b.n	105d2 <bus_fault.isra.5+0xee>
   10604:	00026560 	.word	0x00026560
   10608:	000265b8 	.word	0x000265b8
   1060c:	e000ed00 	.word	0xe000ed00
   10610:	000285ce 	.word	0x000285ce
   10614:	000285e4 	.word	0x000285e4
   10618:	0002869f 	.word	0x0002869f
   1061c:	000285f5 	.word	0x000285f5
   10620:	0002860e 	.word	0x0002860e
   10624:	00028623 	.word	0x00028623
   10628:	0002863e 	.word	0x0002863e
   1062c:	000286ff 	.word	0x000286ff

00010630 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
   10630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   10634:	4b70      	ldr	r3, [pc, #448]	; (107f8 <z_arm_fault+0x1c8>)
{
   10636:	b09c      	sub	sp, #112	; 0x70
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   10638:	685f      	ldr	r7, [r3, #4]
{
   1063a:	4606      	mov	r6, r0
   1063c:	4688      	mov	r8, r1
   1063e:	4614      	mov	r4, r2
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   10640:	f3c7 0708 	ubfx	r7, r7, #0, #9
   10644:	2500      	movs	r5, #0
   10646:	f385 8811 	msr	BASEPRI, r5
   1064a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1064e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   10652:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   10656:	d12c      	bne.n	106b2 <z_arm_fault+0x82>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   10658:	f012 0301 	ands.w	r3, r2, #1
   1065c:	d129      	bne.n	106b2 <z_arm_fault+0x82>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   1065e:	0662      	lsls	r2, r4, #25
   10660:	d404      	bmi.n	1066c <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   10662:	0723      	lsls	r3, r4, #28
   10664:	d523      	bpl.n	106ae <z_arm_fault+0x7e>
			ptr_esf = (z_arch_esf_t *)psp;
   10666:	4646      	mov	r6, r8
	*nested_exc = false;
   10668:	2500      	movs	r5, #0
   1066a:	e012      	b.n	10692 <z_arm_fault+0x62>
		PR_FAULT_INFO("Exception occurred in Secure State");
   1066c:	2201      	movs	r2, #1
   1066e:	f04f 0100 	mov.w	r1, #0
   10672:	f362 0102 	bfi	r1, r2, #0, #3
   10676:	f363 01c5 	bfi	r1, r3, #3, #3
   1067a:	4a60      	ldr	r2, [pc, #384]	; (107fc <z_arm_fault+0x1cc>)
   1067c:	4b60      	ldr	r3, [pc, #384]	; (10800 <z_arm_fault+0x1d0>)
   1067e:	4861      	ldr	r0, [pc, #388]	; (10804 <z_arm_fault+0x1d4>)
   10680:	1a9b      	subs	r3, r3, r2
   10682:	08db      	lsrs	r3, r3, #3
   10684:	f363 118f 	bfi	r1, r3, #6, #10
   10688:	f013 fbd5 	bl	23e36 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   1068c:	f014 0504 	ands.w	r5, r4, #4
   10690:	d1e9      	bne.n	10666 <z_arm_fault+0x36>
	*recoverable = false;
   10692:	2300      	movs	r3, #0
   10694:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   10698:	1efb      	subs	r3, r7, #3
   1069a:	2b09      	cmp	r3, #9
   1069c:	f200 808e 	bhi.w	107bc <z_arm_fault+0x18c>
   106a0:	e8df f003 	tbb	[pc, r3]
   106a4:	6f767209 	.word	0x6f767209
   106a8:	8c8c8c8c 	.word	0x8c8c8c8c
   106ac:	7a8c      	.short	0x7a8c
			*nested_exc = true;
   106ae:	2501      	movs	r5, #1
   106b0:	e7ef      	b.n	10692 <z_arm_fault+0x62>
		return NULL;
   106b2:	462e      	mov	r6, r5
   106b4:	e7ed      	b.n	10692 <z_arm_fault+0x62>
	PR_FAULT_INFO("***** HARD FAULT *****");
   106b6:	f04f 0801 	mov.w	r8, #1
   106ba:	f04f 0100 	mov.w	r1, #0
	*recoverable = false;
   106be:	2400      	movs	r4, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
   106c0:	4b4e      	ldr	r3, [pc, #312]	; (107fc <z_arm_fault+0x1cc>)
   106c2:	4f4f      	ldr	r7, [pc, #316]	; (10800 <z_arm_fault+0x1d0>)
   106c4:	f368 0102 	bfi	r1, r8, #0, #3
   106c8:	1aff      	subs	r7, r7, r3
   106ca:	f36f 01c5 	bfc	r1, #3, #3
   106ce:	f3c7 07c9 	ubfx	r7, r7, #3, #10
   106d2:	f367 118f 	bfi	r1, r7, #6, #10
   106d6:	484c      	ldr	r0, [pc, #304]	; (10808 <z_arm_fault+0x1d8>)
   106d8:	f013 fbad 	bl	23e36 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   106dc:	4a46      	ldr	r2, [pc, #280]	; (107f8 <z_arm_fault+0x1c8>)
	*recoverable = false;
   106de:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   106e2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   106e4:	f013 0302 	ands.w	r3, r3, #2
   106e8:	d024      	beq.n	10734 <z_arm_fault+0x104>
		PR_EXC("  Bus fault on vector table read");
   106ea:	f04f 0100 	mov.w	r1, #0
   106ee:	f368 0102 	bfi	r1, r8, #0, #3
   106f2:	f364 01c5 	bfi	r1, r4, #3, #3
   106f6:	f367 118f 	bfi	r1, r7, #6, #10
   106fa:	4844      	ldr	r0, [pc, #272]	; (1080c <z_arm_fault+0x1dc>)
   106fc:	f013 fb9b 	bl	23e36 <log_0>
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   10700:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10704:	b99b      	cbnz	r3, 1072e <z_arm_fault+0xfe>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   10706:	2268      	movs	r2, #104	; 0x68
   10708:	4631      	mov	r1, r6
   1070a:	a802      	add	r0, sp, #8
   1070c:	f014 f8d8 	bl	248c0 <memcpy>
   10710:	9b09      	ldr	r3, [sp, #36]	; 0x24
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   10712:	2d00      	cmp	r5, #0
   10714:	d06a      	beq.n	107ec <z_arm_fault+0x1bc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   10716:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1071a:	b922      	cbnz	r2, 10726 <z_arm_fault+0xf6>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1071c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   10720:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   10724:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   10726:	a902      	add	r1, sp, #8
   10728:	4620      	mov	r0, r4
   1072a:	f7ff fca7 	bl	1007c <z_arm_fatal_error>
}
   1072e:	b01c      	add	sp, #112	; 0x70
   10730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   10734:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
   10736:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   1073a:	d0e4      	beq.n	10706 <z_arm_fault+0xd6>
		PR_EXC("  Fault escalation (see below)");
   1073c:	f04f 0100 	mov.w	r1, #0
   10740:	f368 0102 	bfi	r1, r8, #0, #3
   10744:	f363 01c5 	bfi	r1, r3, #3, #3
   10748:	f367 118f 	bfi	r1, r7, #6, #10
   1074c:	4830      	ldr	r0, [pc, #192]	; (10810 <z_arm_fault+0x1e0>)
   1074e:	f013 fb72 	bl	23e36 <log_0>
		if (SCB_MMFSR != 0) {
   10752:	4b30      	ldr	r3, [pc, #192]	; (10814 <z_arm_fault+0x1e4>)
   10754:	781b      	ldrb	r3, [r3, #0]
   10756:	b133      	cbz	r3, 10766 <z_arm_fault+0x136>
			reason = mem_manage_fault(esf, 1, recoverable);
   10758:	4640      	mov	r0, r8
   1075a:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   1075e:	f7ff fe2b 	bl	103b8 <mem_manage_fault.isra.4>
   10762:	4604      	mov	r4, r0
   10764:	e7cc      	b.n	10700 <z_arm_fault+0xd0>
		} else if (SCB_BFSR != 0) {
   10766:	4b2c      	ldr	r3, [pc, #176]	; (10818 <z_arm_fault+0x1e8>)
   10768:	781b      	ldrb	r3, [r3, #0]
   1076a:	b12b      	cbz	r3, 10778 <z_arm_fault+0x148>
			reason = bus_fault(esf, 1, recoverable);
   1076c:	4640      	mov	r0, r8
   1076e:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   10772:	f7ff feb7 	bl	104e4 <bus_fault.isra.5>
   10776:	e7f4      	b.n	10762 <z_arm_fault+0x132>
		} else if (SCB_UFSR != 0) {
   10778:	4b28      	ldr	r3, [pc, #160]	; (1081c <z_arm_fault+0x1ec>)
   1077a:	881c      	ldrh	r4, [r3, #0]
   1077c:	b2a4      	uxth	r4, r4
   1077e:	2c00      	cmp	r4, #0
   10780:	d0be      	beq.n	10700 <z_arm_fault+0xd0>
		reason = usage_fault(esf);
   10782:	f7ff fd7d 	bl	10280 <usage_fault.isra.2>
   10786:	e7ec      	b.n	10762 <z_arm_fault+0x132>
		reason = mem_manage_fault(esf, 0, recoverable);
   10788:	f10d 0107 	add.w	r1, sp, #7
   1078c:	2000      	movs	r0, #0
   1078e:	e7e6      	b.n	1075e <z_arm_fault+0x12e>
		reason = bus_fault(esf, 0, recoverable);
   10790:	f10d 0107 	add.w	r1, sp, #7
   10794:	2000      	movs	r0, #0
   10796:	e7ec      	b.n	10772 <z_arm_fault+0x142>
	PR_FAULT_INFO(
   10798:	2301      	movs	r3, #1
   1079a:	f04f 0100 	mov.w	r1, #0
   1079e:	4a17      	ldr	r2, [pc, #92]	; (107fc <z_arm_fault+0x1cc>)
   107a0:	f363 0102 	bfi	r1, r3, #0, #3
   107a4:	4b16      	ldr	r3, [pc, #88]	; (10800 <z_arm_fault+0x1d0>)
   107a6:	f36f 01c5 	bfc	r1, #3, #3
   107aa:	1a9b      	subs	r3, r3, r2
   107ac:	08db      	lsrs	r3, r3, #3
   107ae:	f363 118f 	bfi	r1, r3, #6, #10
   107b2:	481b      	ldr	r0, [pc, #108]	; (10820 <z_arm_fault+0x1f0>)
   107b4:	f013 fb3f 	bl	23e36 <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   107b8:	2400      	movs	r4, #0
   107ba:	e7a1      	b.n	10700 <z_arm_fault+0xd0>
	PR_FAULT_INFO("***** %s %d) *****",
   107bc:	2201      	movs	r2, #1
   107be:	f04f 0300 	mov.w	r3, #0
   107c2:	490e      	ldr	r1, [pc, #56]	; (107fc <z_arm_fault+0x1cc>)
   107c4:	f362 0302 	bfi	r3, r2, #0, #3
   107c8:	4a0d      	ldr	r2, [pc, #52]	; (10800 <z_arm_fault+0x1d0>)
   107ca:	4816      	ldr	r0, [pc, #88]	; (10824 <z_arm_fault+0x1f4>)
   107cc:	1a52      	subs	r2, r2, r1
   107ce:	4916      	ldr	r1, [pc, #88]	; (10828 <z_arm_fault+0x1f8>)
   107d0:	08d2      	lsrs	r2, r2, #3
   107d2:	f36f 03c5 	bfc	r3, #3, #3
   107d6:	f362 138f 	bfi	r3, r2, #6, #10
   107da:	2f0f      	cmp	r7, #15
   107dc:	bfc8      	it	gt
   107de:	4601      	movgt	r1, r0
   107e0:	f1a7 0210 	sub.w	r2, r7, #16
   107e4:	4811      	ldr	r0, [pc, #68]	; (1082c <z_arm_fault+0x1fc>)
   107e6:	f013 fb47 	bl	23e78 <log_2>
   107ea:	e7e5      	b.n	107b8 <z_arm_fault+0x188>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   107ec:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   107f0:	f023 0301 	bic.w	r3, r3, #1
   107f4:	e796      	b.n	10724 <z_arm_fault+0xf4>
   107f6:	bf00      	nop
   107f8:	e000ed00 	.word	0xe000ed00
   107fc:	00026560 	.word	0x00026560
   10800:	000265b8 	.word	0x000265b8
   10804:	00028825 	.word	0x00028825
   10808:	00028848 	.word	0x00028848
   1080c:	0002885f 	.word	0x0002885f
   10810:	00028880 	.word	0x00028880
   10814:	e000ed28 	.word	0xe000ed28
   10818:	e000ed29 	.word	0xe000ed29
   1081c:	e000ed2a 	.word	0xe000ed2a
   10820:	0002889f 	.word	0x0002889f
   10824:	000288ea 	.word	0x000288ea
   10828:	000288d5 	.word	0x000288d5
   1082c:	00028903 	.word	0x00028903

00010830 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   10830:	4a02      	ldr	r2, [pc, #8]	; (1083c <z_arm_fault_init+0xc>)
   10832:	6953      	ldr	r3, [r2, #20]
   10834:	f043 0310 	orr.w	r3, r3, #16
   10838:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   1083a:	4770      	bx	lr
   1083c:	e000ed00 	.word	0xe000ed00

00010840 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
   10840:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10842:	2120      	movs	r1, #32
   10844:	4803      	ldr	r0, [pc, #12]	; (10854 <z_arm_int_lib_init+0x14>)
   10846:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   10848:	3301      	adds	r3, #1
   1084a:	2b41      	cmp	r3, #65	; 0x41
   1084c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   10850:	d1f9      	bne.n	10846 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   10852:	4770      	bx	lr
   10854:	e000e100 	.word	0xe000e100

00010858 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   10858:	b538      	push	{r3, r4, r5, lr}
   1085a:	4605      	mov	r5, r0
	__asm__ volatile(
   1085c:	f04f 0320 	mov.w	r3, #32
   10860:	f3ef 8411 	mrs	r4, BASEPRI
   10864:	f383 8811 	msr	BASEPRI, r3
   10868:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
   1086c:	f015 fb3e 	bl	25eec <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   10870:	4b0b      	ldr	r3, [pc, #44]	; (108a0 <z_impl_k_thread_abort+0x48>)
   10872:	689b      	ldr	r3, [r3, #8]
   10874:	42ab      	cmp	r3, r5
   10876:	d10d      	bne.n	10894 <z_impl_k_thread_abort+0x3c>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   10878:	4b0a      	ldr	r3, [pc, #40]	; (108a4 <z_impl_k_thread_abort+0x4c>)
   1087a:	685a      	ldr	r2, [r3, #4]
   1087c:	f3c2 0208 	ubfx	r2, r2, #0, #9
   10880:	b922      	cbnz	r2, 1088c <z_impl_k_thread_abort+0x34>
extern int arch_swap(unsigned int key);

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
   10882:	f012 f93d 	bl	22b00 <z_check_stack_sentinel>

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
   10886:	4620      	mov	r0, r4
   10888:	f7ff fadc 	bl	fe44 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1088c:	685a      	ldr	r2, [r3, #4]
   1088e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   10892:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   10894:	4620      	mov	r0, r4
}
   10896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   1089a:	f015 ba34 	b.w	25d06 <z_reschedule_irqlock>
   1089e:	bf00      	nop
   108a0:	20025cfc 	.word	0x20025cfc
   108a4:	e000ed00 	.word	0xe000ed00

000108a8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   108a8:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   108aa:	4b0e      	ldr	r3, [pc, #56]	; (108e4 <z_arm_configure_static_mpu_regions+0x3c>)
{
   108ac:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   108ae:	9302      	str	r3, [sp, #8]
   108b0:	4b0d      	ldr	r3, [pc, #52]	; (108e8 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   108b2:	4c0e      	ldr	r4, [pc, #56]	; (108ec <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   108b4:	9303      	str	r3, [sp, #12]
   108b6:	4b0e      	ldr	r3, [pc, #56]	; (108f0 <z_arm_configure_static_mpu_regions+0x48>)
	const struct k_mem_partition *static_regions[] = {
   108b8:	a808      	add	r0, sp, #32
		const struct k_mem_partition ramfunc_region =
   108ba:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   108bc:	ab02      	add	r3, sp, #8
   108be:	f840 3d1c 	str.w	r3, [r0, #-28]!
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   108c2:	4a0c      	ldr	r2, [pc, #48]	; (108f4 <z_arm_configure_static_mpu_regions+0x4c>)
   108c4:	4623      	mov	r3, r4
   108c6:	2101      	movs	r1, #1
   108c8:	f000 f8a0 	bl	10a0c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   108cc:	2300      	movs	r3, #0
   108ce:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   108d0:	4b09      	ldr	r3, [pc, #36]	; (108f8 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   108d2:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   108d4:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   108d6:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   108d8:	9305      	str	r3, [sp, #20]
   108da:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   108dc:	f000 f966 	bl	10bac <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   108e0:	b008      	add	sp, #32
   108e2:	bd10      	pop	{r4, pc}
   108e4:	20020000 	.word	0x20020000
   108e8:	00000000 	.word	0x00000000
   108ec:	20040000 	.word	0x20040000
   108f0:	00010006 	.word	0x00010006
   108f4:	20020000 	.word	0x20020000
   108f8:	20020000 	.word	0x20020000

000108fc <region_allocate_and_init.part.0>:
#include <arm_mpu_v8_internal.h>
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const u8_t index,
   108fc:	b508      	push	{r3, lr}
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   108fe:	f04f 0200 	mov.w	r2, #0
   10902:	2301      	movs	r3, #1
   10904:	4908      	ldr	r1, [pc, #32]	; (10928 <region_allocate_and_init.part.0+0x2c>)
   10906:	f363 0202 	bfi	r2, r3, #0, #3
   1090a:	4b08      	ldr	r3, [pc, #32]	; (1092c <region_allocate_and_init.part.0+0x30>)
   1090c:	f36f 02c5 	bfc	r2, #3, #3
   10910:	1a5b      	subs	r3, r3, r1
   10912:	08db      	lsrs	r3, r3, #3
   10914:	4601      	mov	r1, r0
   10916:	f363 128f 	bfi	r2, r3, #6, #10
   1091a:	4805      	ldr	r0, [pc, #20]	; (10930 <region_allocate_and_init.part.0+0x34>)
   1091c:	f013 fa98 	bl	23e50 <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   10920:	f06f 0015 	mvn.w	r0, #21
   10924:	bd08      	pop	{r3, pc}
   10926:	bf00      	nop
   10928:	00026560 	.word	0x00026560
   1092c:	000265a8 	.word	0x000265a8
   10930:	00028960 	.word	0x00028960

00010934 <mpu_configure_region>:
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, u32_t base, u32_t size)
{
	p_attr->rbar = attr->rbar &
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
   10934:	7a8b      	ldrb	r3, [r1, #10]
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const u8_t index,
	const struct k_mem_partition *new_region)
{
   10936:	b470      	push	{r4, r5, r6}
   10938:	f003 0607 	and.w	r6, r3, #7
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1093c:	680c      	ldr	r4, [r1, #0]
   1093e:	684b      	ldr	r3, [r1, #4]
	p_attr->rbar = attr->rbar &
   10940:	7a0a      	ldrb	r2, [r1, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   10942:	f024 041f 	bic.w	r4, r4, #31
   10946:	3b01      	subs	r3, #1
   10948:	4423      	add	r3, r4
	if (index > (get_num_regions() - 1)) {
   1094a:	280f      	cmp	r0, #15
	p_attr->rbar = attr->rbar &
   1094c:	f002 021f 	and.w	r2, r2, #31
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   10950:	f023 031f 	bic.w	r3, r3, #31
   10954:	d902      	bls.n	1095c <mpu_configure_region+0x28>
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
   10956:	bc70      	pop	{r4, r5, r6}
   10958:	f7ff bfd0 	b.w	108fc <region_allocate_and_init.part.0>
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   1095c:	4905      	ldr	r1, [pc, #20]	; (10974 <mpu_configure_region+0x40>)
		| MPU_RLAR_EN_Msk
   1095e:	f043 0301 	orr.w	r3, r3, #1
		| (region_conf->attr.rbar &
   10962:	4322      	orrs	r2, r4
		| MPU_RLAR_EN_Msk
   10964:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
   10968:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   1096a:	60ca      	str	r2, [r1, #12]
   1096c:	bc70      	pop	{r4, r5, r6}
  mpu->RLAR = rlar;
   1096e:	610b      	str	r3, [r1, #16]
   10970:	4770      	bx	lr
   10972:	bf00      	nop
   10974:	e000ed90 	.word	0xe000ed90

00010978 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   10978:	2205      	movs	r2, #5
   1097a:	4b03      	ldr	r3, [pc, #12]	; (10988 <arm_core_mpu_enable+0x10>)
   1097c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   1097e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10982:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   10986:	4770      	bx	lr
   10988:	e000ed90 	.word	0xe000ed90

0001098c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   1098c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   10990:	2200      	movs	r2, #0
   10992:	4b01      	ldr	r3, [pc, #4]	; (10998 <arm_core_mpu_disable+0xc>)
   10994:	605a      	str	r2, [r3, #4]
}
   10996:	4770      	bx	lr
   10998:	e000ed90 	.word	0xe000ed90

0001099c <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1099c:	4917      	ldr	r1, [pc, #92]	; (109fc <arm_mpu_init+0x60>)
{
   1099e:	b570      	push	{r4, r5, r6, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   109a0:	680c      	ldr	r4, [r1, #0]
   109a2:	2c10      	cmp	r4, #16
   109a4:	d827      	bhi.n	109f6 <arm_mpu_init+0x5a>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   109a6:	f7ff fff1 	bl	1098c <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   109aa:	2500      	movs	r5, #0
	MPU->MAIR0 =
   109ac:	4a14      	ldr	r2, [pc, #80]	; (10a00 <arm_mpu_init+0x64>)
   109ae:	4b15      	ldr	r3, [pc, #84]	; (10a04 <arm_mpu_init+0x68>)
   109b0:	6849      	ldr	r1, [r1, #4]
   109b2:	6313      	str	r3, [r2, #48]	; 0x30
   109b4:	42ac      	cmp	r4, r5
   109b6:	f101 0610 	add.w	r6, r1, #16
   109ba:	d105      	bne.n	109c8 <arm_mpu_init+0x2c>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   109bc:	4b12      	ldr	r3, [pc, #72]	; (10a08 <arm_mpu_init+0x6c>)
   109be:	701c      	strb	r4, [r3, #0]


	arm_core_mpu_enable();
   109c0:	f7ff ffda 	bl	10978 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   109c4:	2000      	movs	r0, #0
}
   109c6:	bd70      	pop	{r4, r5, r6, pc}
		| (region_conf->attr.rbar &
   109c8:	7a08      	ldrb	r0, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   109ca:	f856 3c10 	ldr.w	r3, [r6, #-16]
		| (region_conf->attr.rbar &
   109ce:	f000 011f 	and.w	r1, r0, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
   109d2:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   109d6:	4319      	orrs	r1, r3
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   109d8:	f856 3c04 	ldr.w	r3, [r6, #-4]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   109dc:	0940      	lsrs	r0, r0, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   109de:	f023 031f 	bic.w	r3, r3, #31
		| MPU_RLAR_EN_Msk
   109e2:	f043 0301 	orr.w	r3, r3, #1
   109e6:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  mpu->RNR = rnr;
   109ea:	6095      	str	r5, [r2, #8]
  mpu->RBAR = rbar;
   109ec:	60d1      	str	r1, [r2, #12]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   109ee:	3501      	adds	r5, #1
  mpu->RLAR = rlar;
   109f0:	6113      	str	r3, [r2, #16]
   109f2:	4631      	mov	r1, r6
   109f4:	e7de      	b.n	109b4 <arm_mpu_init+0x18>
		return -1;
   109f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   109fa:	e7e4      	b.n	109c6 <arm_mpu_init+0x2a>
   109fc:	00026680 	.word	0x00026680
   10a00:	e000ed90 	.word	0xe000ed90
   10a04:	0044ffaa 	.word	0x0044ffaa
   10a08:	200273c0 	.word	0x200273c0

00010a0c <arm_core_mpu_configure_static_mpu_regions>:
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   10a0c:	4b61      	ldr	r3, [pc, #388]	; (10b94 <arm_core_mpu_configure_static_mpu_regions+0x188>)
{
   10a0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a12:	4681      	mov	r9, r0
   10a14:	468a      	mov	sl, r1
	for (i = 0; i < regions_num; i++) {
   10a16:	2700      	movs	r7, #0
   10a18:	4698      	mov	r8, r3
	int reg_index = start_reg_index;
   10a1a:	781c      	ldrb	r4, [r3, #0]
	MPU->RNR = index;
   10a1c:	4d5e      	ldr	r5, [pc, #376]	; (10b98 <arm_core_mpu_configure_static_mpu_regions+0x18c>)
	for (i = 0; i < regions_num; i++) {
   10a1e:	4557      	cmp	r7, sl
   10a20:	da3c      	bge.n	10a9c <arm_core_mpu_configure_static_mpu_regions+0x90>
		if (regions[i]->size == 0U) {
   10a22:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
   10a26:	685e      	ldr	r6, [r3, #4]
   10a28:	2e00      	cmp	r6, #0
   10a2a:	d05c      	beq.n	10ae6 <arm_core_mpu_configure_static_mpu_regions+0xda>
		&&
   10a2c:	2e1f      	cmp	r6, #31
   10a2e:	d922      	bls.n	10a76 <arm_core_mpu_configure_static_mpu_regions+0x6a>
		&&
   10a30:	06f1      	lsls	r1, r6, #27
   10a32:	d120      	bne.n	10a76 <arm_core_mpu_configure_static_mpu_regions+0x6a>
		((part->start &
   10a34:	681b      	ldr	r3, [r3, #0]
		&&
   10a36:	06da      	lsls	r2, r3, #27
   10a38:	d11d      	bne.n	10a76 <arm_core_mpu_configure_static_mpu_regions+0x6a>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10a3a:	4618      	mov	r0, r3
   10a3c:	9301      	str	r3, [sp, #4]
   10a3e:	f013 fda5 	bl	2458c <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10a42:	9b01      	ldr	r3, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10a44:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10a46:	18f0      	adds	r0, r6, r3
   10a48:	3801      	subs	r0, #1
   10a4a:	f013 fd9f 	bl	2458c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   10a4e:	4583      	cmp	fp, r0
   10a50:	d029      	beq.n	10aa6 <arm_core_mpu_configure_static_mpu_regions+0x9a>
	return -EINVAL;
   10a52:	f06f 0b15 	mvn.w	fp, #21
			LOG_ERR("Invalid underlying region index %u",
   10a56:	2301      	movs	r3, #1
   10a58:	f04f 0200 	mov.w	r2, #0
   10a5c:	494f      	ldr	r1, [pc, #316]	; (10b9c <arm_core_mpu_configure_static_mpu_regions+0x190>)
   10a5e:	f363 0202 	bfi	r2, r3, #0, #3
   10a62:	4b4f      	ldr	r3, [pc, #316]	; (10ba0 <arm_core_mpu_configure_static_mpu_regions+0x194>)
   10a64:	f36f 02c5 	bfc	r2, #3, #3
   10a68:	1a5b      	subs	r3, r3, r1
   10a6a:	08db      	lsrs	r3, r3, #3
   10a6c:	f363 128f 	bfi	r2, r3, #6, #10
   10a70:	4659      	mov	r1, fp
   10a72:	484c      	ldr	r0, [pc, #304]	; (10ba4 <arm_core_mpu_configure_static_mpu_regions+0x198>)
   10a74:	e00e      	b.n	10a94 <arm_core_mpu_configure_static_mpu_regions+0x88>
			LOG_ERR("Partition %u: sanity check failed.", i);
   10a76:	2301      	movs	r3, #1
   10a78:	f04f 0200 	mov.w	r2, #0
   10a7c:	4947      	ldr	r1, [pc, #284]	; (10b9c <arm_core_mpu_configure_static_mpu_regions+0x190>)
   10a7e:	f363 0202 	bfi	r2, r3, #0, #3
   10a82:	4b47      	ldr	r3, [pc, #284]	; (10ba0 <arm_core_mpu_configure_static_mpu_regions+0x194>)
   10a84:	f36f 02c5 	bfc	r2, #3, #3
   10a88:	1a5b      	subs	r3, r3, r1
   10a8a:	4639      	mov	r1, r7
   10a8c:	08db      	lsrs	r3, r3, #3
   10a8e:	4846      	ldr	r0, [pc, #280]	; (10ba8 <arm_core_mpu_configure_static_mpu_regions+0x19c>)
   10a90:	f363 128f 	bfi	r2, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
   10a94:	f013 f9dc 	bl	23e50 <log_1>
			return -EINVAL;
   10a98:	f06f 0415 	mvn.w	r4, #21
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   10a9c:	f888 4000 	strb.w	r4, [r8]
}
   10aa0:	b003      	add	sp, #12
   10aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   10aa6:	f11b 0f16 	cmn.w	fp, #22
   10aaa:	d0d4      	beq.n	10a56 <arm_core_mpu_configure_static_mpu_regions+0x4a>
			(u_reg_index > (reg_index - 1))) {
   10aac:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   10aae:	455b      	cmp	r3, fp
   10ab0:	dbd1      	blt.n	10a56 <arm_core_mpu_configure_static_mpu_regions+0x4a>
	MPU->RNR = index;
   10ab2:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   10ab6:	f8d5 c00c 	ldr.w	ip, [r5, #12]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   10aba:	f859 1027 	ldr.w	r1, [r9, r7, lsl #2]
	MPU->RNR = index;
   10abe:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   10ac2:	692e      	ldr	r6, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   10ac4:	f02c 0c1f 	bic.w	ip, ip, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   10ac8:	e9d1 3200 	ldrd	r3, r2, [r1]
   10acc:	1898      	adds	r0, r3, r2
		if ((regions[i]->start == u_reg_base) &&
   10ace:	459c      	cmp	ip, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   10ad0:	f046 061f 	orr.w	r6, r6, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   10ad4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
   10ad8:	d118      	bne.n	10b0c <arm_core_mpu_configure_static_mpu_regions+0x100>
   10ada:	4296      	cmp	r6, r2
   10adc:	d105      	bne.n	10aea <arm_core_mpu_configure_static_mpu_regions+0xde>
			mpu_configure_region(u_reg_index, regions[i]);
   10ade:	fa5f f08b 	uxtb.w	r0, fp
   10ae2:	f7ff ff27 	bl	10934 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   10ae6:	3701      	adds	r7, #1
   10ae8:	e799      	b.n	10a1e <arm_core_mpu_configure_static_mpu_regions+0x12>
	MPU->RNR = index;
   10aea:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   10aee:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   10af0:	f020 021f 	bic.w	r2, r0, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   10af4:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   10af8:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   10afa:	60ea      	str	r2, [r5, #12]
			reg_index =
   10afc:	b2e0      	uxtb	r0, r4
			reg_index =
   10afe:	f7ff ff19 	bl	10934 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   10b02:	f110 0f16 	cmn.w	r0, #22
   10b06:	d0c7      	beq.n	10a98 <arm_core_mpu_configure_static_mpu_regions+0x8c>
			reg_index++;
   10b08:	1c44      	adds	r4, r0, #1
   10b0a:	e7ec      	b.n	10ae6 <arm_core_mpu_configure_static_mpu_regions+0xda>
   10b0c:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
   10b0e:	4296      	cmp	r6, r2
   10b10:	b2e0      	uxtb	r0, r4
   10b12:	f023 031f 	bic.w	r3, r3, #31
   10b16:	d107      	bne.n	10b28 <arm_core_mpu_configure_static_mpu_regions+0x11c>
	MPU->RNR = index;
   10b18:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   10b1c:	692a      	ldr	r2, [r5, #16]
   10b1e:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   10b22:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   10b24:	612b      	str	r3, [r5, #16]
   10b26:	e7ea      	b.n	10afe <arm_core_mpu_configure_static_mpu_regions+0xf2>
   10b28:	9201      	str	r2, [sp, #4]
	MPU->RNR = index;
   10b2a:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   10b2e:	692c      	ldr	r4, [r5, #16]
   10b30:	f004 0c1f 	and.w	ip, r4, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   10b34:	ea4c 0303 	orr.w	r3, ip, r3
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   10b38:	612b      	str	r3, [r5, #16]
			reg_index =
   10b3a:	f7ff fefb 	bl	10934 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   10b3e:	f110 0f16 	cmn.w	r0, #22
   10b42:	d0a9      	beq.n	10a98 <arm_core_mpu_configure_static_mpu_regions+0x8c>
			fill_region.base = regions[i]->start +
   10b44:	f859 c027 	ldr.w	ip, [r9, r7, lsl #2]
	MPU->RNR = index;
   10b48:	f8c5 b008 	str.w	fp, [r5, #8]
			fill_region.base = regions[i]->start +
   10b4c:	e9dc 1c00 	ldrd	r1, ip, [ip]
   10b50:	4461      	add	r1, ip
			reg_index++;
   10b52:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   10b54:	f021 011f 	bic.w	r1, r1, #31
   10b58:	3e01      	subs	r6, #1
   10b5a:	9a01      	ldr	r2, [sp, #4]
	attr->rbar = MPU->RBAR &
   10b5c:	68ec      	ldr	r4, [r5, #12]
			REGION_LIMIT_ADDR((regions[i]->start +
   10b5e:	440e      	add	r6, r1
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   10b60:	692b      	ldr	r3, [r5, #16]
				region_allocate_and_init(reg_index,
   10b62:	b2c0      	uxtb	r0, r0
			REGION_LIMIT_ADDR((regions[i]->start +
   10b64:	1ab6      	subs	r6, r6, r2
	if (index > (get_num_regions() - 1)) {
   10b66:	280f      	cmp	r0, #15
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   10b68:	ea4f 0353 	mov.w	r3, r3, lsr #1
			REGION_LIMIT_ADDR((regions[i]->start +
   10b6c:	f026 061f 	bic.w	r6, r6, #31
   10b70:	d902      	bls.n	10b78 <arm_core_mpu_configure_static_mpu_regions+0x16c>
   10b72:	f7ff fec3 	bl	108fc <region_allocate_and_init.part.0>
   10b76:	e7c4      	b.n	10b02 <arm_core_mpu_configure_static_mpu_regions+0xf6>
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   10b78:	005b      	lsls	r3, r3, #1
   10b7a:	f003 030e 	and.w	r3, r3, #14
		| (region_conf->attr.rbar &
   10b7e:	f004 041f 	and.w	r4, r4, #31
		| MPU_RLAR_EN_Msk
   10b82:	f043 0301 	orr.w	r3, r3, #1
		| (region_conf->attr.rbar &
   10b86:	4321      	orrs	r1, r4
		| MPU_RLAR_EN_Msk
   10b88:	431e      	orrs	r6, r3
  mpu->RNR = rnr;
   10b8a:	60a8      	str	r0, [r5, #8]
  mpu->RBAR = rbar;
   10b8c:	60e9      	str	r1, [r5, #12]
  mpu->RLAR = rlar;
   10b8e:	612e      	str	r6, [r5, #16]
   10b90:	e7ba      	b.n	10b08 <arm_core_mpu_configure_static_mpu_regions+0xfc>
   10b92:	bf00      	nop
   10b94:	200273c0 	.word	0x200273c0
   10b98:	e000ed90 	.word	0xe000ed90
   10b9c:	00026560 	.word	0x00026560
   10ba0:	000265a8 	.word	0x000265a8
   10ba4:	0002893d 	.word	0x0002893d
   10ba8:	0002891a 	.word	0x0002891a

00010bac <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   10bac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10bb0:	4689      	mov	r9, r1
   10bb2:	4607      	mov	r7, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10bb4:	2600      	movs	r6, #0
   10bb6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 10c48 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>
		if (dyn_reg_info[i].index == -EINVAL) {

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   10bba:	f8df a090 	ldr.w	sl, [pc, #144]	; 10c4c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
	MPU->RNR = index;
   10bbe:	4c21      	ldr	r4, [pc, #132]	; (10c44 <arm_core_mpu_mark_areas_for_dynamic_regions+0x98>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10bc0:	454e      	cmp	r6, r9
   10bc2:	da19      	bge.n	10bf8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
		if (dyn_region_areas[i].size == 0U) {
   10bc4:	f8d7 b004 	ldr.w	fp, [r7, #4]
   10bc8:	f1bb 0f00 	cmp.w	fp, #0
   10bcc:	d036      	beq.n	10c3c <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
			get_region_index(dyn_region_areas[i].start,
   10bce:	683b      	ldr	r3, [r7, #0]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10bd0:	4618      	mov	r0, r3
   10bd2:	9301      	str	r3, [sp, #4]
   10bd4:	f013 fcda 	bl	2458c <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10bd8:	9b01      	ldr	r3, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10bda:	4605      	mov	r5, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10bdc:	eb0b 0003 	add.w	r0, fp, r3
   10be0:	3801      	subs	r0, #1
   10be2:	f013 fcd3 	bl	2458c <arm_cmse_mpu_region_get>
   10be6:	2314      	movs	r3, #20
	if (region_start_addr == region_end_addr) {
   10be8:	4285      	cmp	r5, r0
   10bea:	fb03 f306 	mul.w	r3, r3, r6
   10bee:	d006      	beq.n	10bfe <arm_core_mpu_mark_areas_for_dynamic_regions+0x52>
		dyn_reg_info[i].index =
   10bf0:	f06f 0215 	mvn.w	r2, #21
   10bf4:	f848 2003 	str.w	r2, [r8, r3]
}
   10bf8:	b003      	add	sp, #12
   10bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_reg_info[i].index == -EINVAL) {
   10bfe:	f115 0f16 	cmn.w	r5, #22
		dyn_reg_info[i].index =
   10c02:	f848 5003 	str.w	r5, [r8, r3]
		if (dyn_reg_info[i].index == -EINVAL) {
   10c06:	d0f7      	beq.n	10bf8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
		if (dyn_reg_info[i].index >= static_regions_num) {
   10c08:	f89a 2000 	ldrb.w	r2, [sl]
   10c0c:	42aa      	cmp	r2, r5
   10c0e:	ddf3      	ble.n	10bf8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
	MPU->RNR = index;
   10c10:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
   10c12:	4443      	add	r3, r8
	MPU->RNR = index;
   10c14:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
   10c16:	68e0      	ldr	r0, [r4, #12]
   10c18:	7b19      	ldrb	r1, [r3, #12]
   10c1a:	f360 0104 	bfi	r1, r0, #0, #5
   10c1e:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   10c20:	6921      	ldr	r1, [r4, #16]
   10c22:	7b18      	ldrb	r0, [r3, #12]
   10c24:	0849      	lsrs	r1, r1, #1
   10c26:	f361 1047 	bfi	r0, r1, #5, #3
   10c2a:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   10c2c:	68e2      	ldr	r2, [r4, #12]
   10c2e:	f022 021f 	bic.w	r2, r2, #31
   10c32:	605a      	str	r2, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   10c34:	6922      	ldr	r2, [r4, #16]
   10c36:	f022 021f 	bic.w	r2, r2, #31
   10c3a:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10c3c:	3601      	adds	r6, #1
   10c3e:	370c      	adds	r7, #12
   10c40:	e7be      	b.n	10bc0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   10c42:	bf00      	nop
   10c44:	e000ed90 	.word	0xe000ed90
   10c48:	20020338 	.word	0x20020338
   10c4c:	200273c0 	.word	0x200273c0

00010c50 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   10c50:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
   10c52:	4b1e      	ldr	r3, [pc, #120]	; (10ccc <arm_core_mpu_configure_dynamic_mpu_regions+0x7c>)
   10c54:	4606      	mov	r6, r0
   10c56:	7818      	ldrb	r0, [r3, #0]
   10c58:	460d      	mov	r5, r1

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   10c5a:	4602      	mov	r2, r0
  mpu->RLAR = 0U;
   10c5c:	2100      	movs	r1, #0
   10c5e:	4b1c      	ldr	r3, [pc, #112]	; (10cd0 <arm_core_mpu_configure_dynamic_mpu_regions+0x80>)
   10c60:	2a0f      	cmp	r2, #15
   10c62:	dd07      	ble.n	10c74 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>
   10c64:	2400      	movs	r4, #0
	/* We are going to skip the full partition of the background areas.
	 * So we can disable MPU regions inside which dynamic memroy regions
	 * may be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		ARM_MPU_ClrRegion(dyn_reg_info[i].index);
   10c66:	4a1b      	ldr	r2, [pc, #108]	; (10cd4 <arm_core_mpu_configure_dynamic_mpu_regions+0x84>)
   10c68:	6812      	ldr	r2, [r2, #0]
  mpu->RNR = rnr;
   10c6a:	609a      	str	r2, [r3, #8]
  mpu->RLAR = 0U;
   10c6c:	611c      	str	r4, [r3, #16]
	for (i = 0; i < regions_num; i++) {
   10c6e:	42ac      	cmp	r4, r5
   10c70:	db04      	blt.n	10c7c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>
}
   10c72:	bd70      	pop	{r4, r5, r6, pc}
  mpu->RNR = rnr;
   10c74:	609a      	str	r2, [r3, #8]
  mpu->RLAR = 0U;
   10c76:	6119      	str	r1, [r3, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   10c78:	3201      	adds	r2, #1
   10c7a:	e7f1      	b.n	10c60 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		if (regions[i]->size == 0U) {
   10c7c:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   10c80:	684b      	ldr	r3, [r1, #4]
   10c82:	b303      	cbz	r3, 10cc6 <arm_core_mpu_configure_dynamic_mpu_regions+0x76>
		&&
   10c84:	2b1f      	cmp	r3, #31
   10c86:	d812      	bhi.n	10cae <arm_core_mpu_configure_dynamic_mpu_regions+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   10c88:	2301      	movs	r3, #1
   10c8a:	f04f 0200 	mov.w	r2, #0
   10c8e:	4912      	ldr	r1, [pc, #72]	; (10cd8 <arm_core_mpu_configure_dynamic_mpu_regions+0x88>)
   10c90:	f363 0202 	bfi	r2, r3, #0, #3
   10c94:	4b11      	ldr	r3, [pc, #68]	; (10cdc <arm_core_mpu_configure_dynamic_mpu_regions+0x8c>)
   10c96:	f36f 02c5 	bfc	r2, #3, #3
   10c9a:	1a5b      	subs	r3, r3, r1
   10c9c:	08db      	lsrs	r3, r3, #3
   10c9e:	4621      	mov	r1, r4
}
   10ca0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LOG_ERR("Partition %u: sanity check failed.", i);
   10ca4:	f363 128f 	bfi	r2, r3, #6, #10
   10ca8:	480d      	ldr	r0, [pc, #52]	; (10ce0 <arm_core_mpu_configure_dynamic_mpu_regions+0x90>)
   10caa:	f013 b8d1 	b.w	23e50 <log_1>
		&&
   10cae:	06da      	lsls	r2, r3, #27
   10cb0:	d1ea      	bne.n	10c88 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>
		((part->start &
   10cb2:	680b      	ldr	r3, [r1, #0]
		&&
   10cb4:	06db      	lsls	r3, r3, #27
   10cb6:	d1e7      	bne.n	10c88 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>
		reg_index = mpu_configure_region(reg_index, regions[i]);
   10cb8:	b2c0      	uxtb	r0, r0
   10cba:	f7ff fe3b 	bl	10934 <mpu_configure_region>
		if (reg_index == -EINVAL) {
   10cbe:	f110 0f16 	cmn.w	r0, #22
   10cc2:	d0d6      	beq.n	10c72 <arm_core_mpu_configure_dynamic_mpu_regions+0x22>
		reg_index++;
   10cc4:	3001      	adds	r0, #1
	for (i = 0; i < regions_num; i++) {
   10cc6:	3401      	adds	r4, #1
   10cc8:	e7d1      	b.n	10c6e <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
   10cca:	bf00      	nop
   10ccc:	200273c0 	.word	0x200273c0
   10cd0:	e000ed90 	.word	0xe000ed90
   10cd4:	20020338 	.word	0x20020338
   10cd8:	00026560 	.word	0x00026560
   10cdc:	000265a8 	.word	0x000265a8
   10ce0:	0002891a 	.word	0x0002891a

00010ce4 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
   10ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ce8:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
   10cea:	2300      	movs	r3, #0
{
   10cec:	b09d      	sub	sp, #116	; 0x74
   10cee:	e9cd 0102 	strd	r0, r1, [sp, #8]
	count = 0;
   10cf2:	9301      	str	r3, [sp, #4]

	while ((c = *format++)) {
   10cf4:	7810      	ldrb	r0, [r2, #0]
   10cf6:	1c53      	adds	r3, r2, #1
   10cf8:	9306      	str	r3, [sp, #24]
   10cfa:	b158      	cbz	r0, 10d14 <z_prf+0x30>
		if (c != '%') {
   10cfc:	2825      	cmp	r0, #37	; 0x25
   10cfe:	f000 8089 	beq.w	10e14 <z_prf+0x130>
			PUTC(c);
   10d02:	9903      	ldr	r1, [sp, #12]
   10d04:	9b02      	ldr	r3, [sp, #8]
   10d06:	4798      	blx	r3
   10d08:	3001      	adds	r0, #1
   10d0a:	f040 840d 	bne.w	11528 <z_prf+0x844>
   10d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10d12:	9301      	str	r3, [sp, #4]
		}
	}
	return count;

#undef PUTC
}
   10d14:	9801      	ldr	r0, [sp, #4]
   10d16:	b01d      	add	sp, #116	; 0x74
   10d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
   10d1c:	2c23      	cmp	r4, #35	; 0x23
   10d1e:	d070      	beq.n	10e02 <z_prf+0x11e>
   10d20:	d865      	bhi.n	10dee <z_prf+0x10a>
   10d22:	2c00      	cmp	r4, #0
   10d24:	d0f6      	beq.n	10d14 <z_prf+0x30>
					fspace = true;
   10d26:	2c20      	cmp	r4, #32
   10d28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10d2a:	bf08      	it	eq
   10d2c:	2301      	moveq	r3, #1
   10d2e:	930c      	str	r3, [sp, #48]	; 0x30
					fplus = true;
   10d30:	f8cd 8018 	str.w	r8, [sp, #24]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
   10d34:	f8dd 8018 	ldr.w	r8, [sp, #24]
   10d38:	48bb      	ldr	r0, [pc, #748]	; (11028 <z_prf+0x344>)
   10d3a:	f818 4b01 	ldrb.w	r4, [r8], #1
   10d3e:	4621      	mov	r1, r4
   10d40:	f013 fd6f 	bl	24822 <strchr>
   10d44:	2800      	cmp	r0, #0
   10d46:	d1e9      	bne.n	10d1c <z_prf+0x38>
			if (c == '*') {
   10d48:	2c2a      	cmp	r4, #42	; 0x2a
   10d4a:	d16a      	bne.n	10e22 <z_prf+0x13e>
				width = va_arg(vargs, int);
   10d4c:	6832      	ldr	r2, [r6, #0]
   10d4e:	1d33      	adds	r3, r6, #4
				if (width < 0) {
   10d50:	2a00      	cmp	r2, #0
				width = va_arg(vargs, int);
   10d52:	9207      	str	r2, [sp, #28]
					width = -width;
   10d54:	bfbe      	ittt	lt
   10d56:	4252      	neglt	r2, r2
   10d58:	9207      	strlt	r2, [sp, #28]
					fminus = true;
   10d5a:	2201      	movlt	r2, #1
				width = va_arg(vargs, int);
   10d5c:	461e      	mov	r6, r3
					fminus = true;
   10d5e:	bfb8      	it	lt
   10d60:	920d      	strlt	r2, [sp, #52]	; 0x34
				c = *format++;
   10d62:	9a06      	ldr	r2, [sp, #24]
   10d64:	7854      	ldrb	r4, [r2, #1]
   10d66:	f102 0802 	add.w	r8, r2, #2
			if (c == '.') {
   10d6a:	2c2e      	cmp	r4, #46	; 0x2e
   10d6c:	d17e      	bne.n	10e6c <z_prf+0x188>
				if (c == '*') {
   10d6e:	f898 3000 	ldrb.w	r3, [r8]
   10d72:	2b2a      	cmp	r3, #42	; 0x2a
   10d74:	d177      	bne.n	10e66 <z_prf+0x182>
					precision = va_arg(vargs, int);
   10d76:	6835      	ldr	r5, [r6, #0]
				c = *format++;
   10d78:	f108 0801 	add.w	r8, r8, #1
					precision = va_arg(vargs, int);
   10d7c:	3604      	adds	r6, #4
				c = *format++;
   10d7e:	f898 4000 	ldrb.w	r4, [r8]
   10d82:	f108 0801 	add.w	r8, r8, #1
			if (strchr("hlz", c) != NULL) {
   10d86:	4621      	mov	r1, r4
   10d88:	48a8      	ldr	r0, [pc, #672]	; (1102c <z_prf+0x348>)
   10d8a:	4627      	mov	r7, r4
   10d8c:	f013 fd49 	bl	24822 <strchr>
   10d90:	2800      	cmp	r0, #0
   10d92:	d06e      	beq.n	10e72 <z_prf+0x18e>
				c = *format++;
   10d94:	f108 0301 	add.w	r3, r8, #1
				} else if (i == 'h' && c == 'h') {
   10d98:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
   10d9a:	9306      	str	r3, [sp, #24]
   10d9c:	f898 4000 	ldrb.w	r4, [r8]
				} else if (i == 'h' && c == 'h') {
   10da0:	d107      	bne.n	10db2 <z_prf+0xce>
   10da2:	2c68      	cmp	r4, #104	; 0x68
   10da4:	d105      	bne.n	10db2 <z_prf+0xce>
					i = 'H';
   10da6:	2748      	movs	r7, #72	; 0x48
					c = *format++;
   10da8:	f108 0302 	add.w	r3, r8, #2
   10dac:	f898 4001 	ldrb.w	r4, [r8, #1]
   10db0:	9306      	str	r3, [sp, #24]
			switch (c) {
   10db2:	2c67      	cmp	r4, #103	; 0x67
   10db4:	d87c      	bhi.n	10eb0 <z_prf+0x1cc>
   10db6:	2c65      	cmp	r4, #101	; 0x65
   10db8:	f080 813a 	bcs.w	11030 <z_prf+0x34c>
   10dbc:	2c47      	cmp	r4, #71	; 0x47
   10dbe:	d85c      	bhi.n	10e7a <z_prf+0x196>
   10dc0:	2c45      	cmp	r4, #69	; 0x45
   10dc2:	f080 8135 	bcs.w	11030 <z_prf+0x34c>
   10dc6:	2c00      	cmp	r4, #0
   10dc8:	d0a4      	beq.n	10d14 <z_prf+0x30>
   10dca:	2c25      	cmp	r4, #37	; 0x25
   10dcc:	f000 83a8 	beq.w	11520 <z_prf+0x83c>
				PUTC('%');
   10dd0:	9903      	ldr	r1, [sp, #12]
   10dd2:	2025      	movs	r0, #37	; 0x25
   10dd4:	9b02      	ldr	r3, [sp, #8]
   10dd6:	4798      	blx	r3
   10dd8:	3001      	adds	r0, #1
   10dda:	d098      	beq.n	10d0e <z_prf+0x2a>
				PUTC(c);
   10ddc:	9903      	ldr	r1, [sp, #12]
   10dde:	4620      	mov	r0, r4
   10de0:	9b02      	ldr	r3, [sp, #8]
   10de2:	4798      	blx	r3
   10de4:	3001      	adds	r0, #1
   10de6:	d092      	beq.n	10d0e <z_prf+0x2a>
				count += 2;
   10de8:	9b01      	ldr	r3, [sp, #4]
   10dea:	3302      	adds	r3, #2
   10dec:	e39e      	b.n	1152c <z_prf+0x848>
				switch (c) {
   10dee:	2c2d      	cmp	r4, #45	; 0x2d
   10df0:	d00d      	beq.n	10e0e <z_prf+0x12a>
   10df2:	2c30      	cmp	r4, #48	; 0x30
   10df4:	d008      	beq.n	10e08 <z_prf+0x124>
					fplus = true;
   10df6:	2c2b      	cmp	r4, #43	; 0x2b
   10df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10dfa:	bf08      	it	eq
   10dfc:	2301      	moveq	r3, #1
   10dfe:	9309      	str	r3, [sp, #36]	; 0x24
   10e00:	e796      	b.n	10d30 <z_prf+0x4c>
					falt = true;
   10e02:	2301      	movs	r3, #1
   10e04:	9305      	str	r3, [sp, #20]
					break;
   10e06:	e793      	b.n	10d30 <z_prf+0x4c>
					fzero = true;
   10e08:	2301      	movs	r3, #1
   10e0a:	9308      	str	r3, [sp, #32]
					break;
   10e0c:	e790      	b.n	10d30 <z_prf+0x4c>
					fminus = true;
   10e0e:	2301      	movs	r3, #1
   10e10:	930d      	str	r3, [sp, #52]	; 0x34
   10e12:	e78d      	b.n	10d30 <z_prf+0x4c>
			fminus = fplus = fspace = falt = fzero = false;
   10e14:	2300      	movs	r3, #0
   10e16:	9308      	str	r3, [sp, #32]
   10e18:	930c      	str	r3, [sp, #48]	; 0x30
   10e1a:	9309      	str	r3, [sp, #36]	; 0x24
   10e1c:	930d      	str	r3, [sp, #52]	; 0x34
   10e1e:	9305      	str	r3, [sp, #20]
   10e20:	e788      	b.n	10d34 <z_prf+0x50>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   10e22:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
   10e26:	2b09      	cmp	r3, #9
				width = 0;
   10e28:	9007      	str	r0, [sp, #28]
			} else if (!isdigit(c)) {
   10e2a:	d89e      	bhi.n	10d6a <z_prf+0x86>
		i = 10 * i + *p++ - '0';
   10e2c:	220a      	movs	r2, #10
	while (isdigit(*p)) {
   10e2e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   10e32:	f818 4b01 	ldrb.w	r4, [r8], #1
   10e36:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   10e3a:	2b09      	cmp	r3, #9
   10e3c:	d895      	bhi.n	10d6a <z_prf+0x86>
		i = 10 * i + *p++ - '0';
   10e3e:	9b07      	ldr	r3, [sp, #28]
   10e40:	fb02 4403 	mla	r4, r2, r3, r4
   10e44:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   10e48:	e9cd 8306 	strd	r8, r3, [sp, #24]
   10e4c:	e7ef      	b.n	10e2e <z_prf+0x14a>
   10e4e:	4690      	mov	r8, r2
   10e50:	fb01 3505 	mla	r5, r1, r5, r3
   10e54:	3d30      	subs	r5, #48	; 0x30
	while (isdigit(*p)) {
   10e56:	4642      	mov	r2, r8
   10e58:	f812 3b01 	ldrb.w	r3, [r2], #1
   10e5c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   10e60:	2809      	cmp	r0, #9
   10e62:	d9f4      	bls.n	10e4e <z_prf+0x16a>
   10e64:	e78b      	b.n	10d7e <z_prf+0x9a>
	int i = 0;
   10e66:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
   10e68:	210a      	movs	r1, #10
   10e6a:	e7f4      	b.n	10e56 <z_prf+0x172>
			precision = -1;
   10e6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   10e70:	e789      	b.n	10d86 <z_prf+0xa2>
   10e72:	f8cd 8018 	str.w	r8, [sp, #24]
			i = 0;
   10e76:	4607      	mov	r7, r0
   10e78:	e79b      	b.n	10db2 <z_prf+0xce>
			switch (c) {
   10e7a:	2c63      	cmp	r4, #99	; 0x63
   10e7c:	d059      	beq.n	10f32 <z_prf+0x24e>
   10e7e:	d821      	bhi.n	10ec4 <z_prf+0x1e0>
   10e80:	2c58      	cmp	r4, #88	; 0x58
   10e82:	d1a5      	bne.n	10dd0 <z_prf+0xec>
   10e84:	1d33      	adds	r3, r6, #4
				if (c == 'o') {
   10e86:	2c6f      	cmp	r4, #111	; 0x6f
   10e88:	9304      	str	r3, [sp, #16]
   10e8a:	6831      	ldr	r1, [r6, #0]
   10e8c:	f040 831c 	bne.w	114c8 <z_prf+0x7e4>
	if (alt_form) {
   10e90:	9b05      	ldr	r3, [sp, #20]
   10e92:	af15      	add	r7, sp, #84	; 0x54
   10e94:	2b00      	cmp	r3, #0
   10e96:	f000 830b 	beq.w	114b0 <z_prf+0x7cc>
		*buf++ = '0';
   10e9a:	2330      	movs	r3, #48	; 0x30
   10e9c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
		if (!value) {
   10ea0:	2900      	cmp	r1, #0
   10ea2:	f040 830e 	bne.w	114c2 <z_prf+0x7de>
			*buf++ = 0;
   10ea6:	f88d 1055 	strb.w	r1, [sp, #85]	; 0x55
			prefix = 0;
   10eaa:	468b      	mov	fp, r1
			return 1;
   10eac:	2701      	movs	r7, #1
   10eae:	e026      	b.n	10efe <z_prf+0x21a>
			switch (c) {
   10eb0:	2c70      	cmp	r4, #112	; 0x70
   10eb2:	f000 82e8 	beq.w	11486 <z_prf+0x7a2>
   10eb6:	d827      	bhi.n	10f08 <z_prf+0x224>
   10eb8:	2c6e      	cmp	r4, #110	; 0x6e
   10eba:	f000 82cf 	beq.w	1145c <z_prf+0x778>
   10ebe:	d8e1      	bhi.n	10e84 <z_prf+0x1a0>
   10ec0:	2c69      	cmp	r4, #105	; 0x69
   10ec2:	d185      	bne.n	10dd0 <z_prf+0xec>
   10ec4:	6834      	ldr	r4, [r6, #0]
   10ec6:	1d33      	adds	r3, r6, #4
	if (value < 0) {
   10ec8:	2c00      	cmp	r4, #0
   10eca:	9304      	str	r3, [sp, #16]
   10ecc:	f280 809e 	bge.w	1100c <z_prf+0x328>
		*buf++ = '-';
   10ed0:	232d      	movs	r3, #45	; 0x2d
		value = -value;
   10ed2:	4261      	negs	r1, r4
		*buf++ = '-';
   10ed4:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
		*buf++ = ' ';
   10ed8:	f10d 0755 	add.w	r7, sp, #85	; 0x55
	return _to_x(buf, value, 10);
   10edc:	4638      	mov	r0, r7
   10ede:	220a      	movs	r2, #10
   10ee0:	f013 fd3c 	bl	2495c <_to_x>
				if (fplus || fspace || val < 0) {
   10ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, value)) - start;
   10ee6:	4407      	add	r7, r0
   10ee8:	a815      	add	r0, sp, #84	; 0x54
   10eea:	1a3f      	subs	r7, r7, r0
				if (fplus || fspace || val < 0) {
   10eec:	2b00      	cmp	r3, #0
   10eee:	f040 8320 	bne.w	11532 <z_prf+0x84e>
   10ef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10ef4:	2b00      	cmp	r3, #0
   10ef6:	f040 831c 	bne.w	11532 <z_prf+0x84e>
   10efa:	ea4f 7bd4 	mov.w	fp, r4, lsr #31
			if (precision >= 0) {
   10efe:	2d00      	cmp	r5, #0
   10f00:	f2c0 831c 	blt.w	1153c <z_prf+0x858>
   10f04:	ae15      	add	r6, sp, #84	; 0x54
   10f06:	e01e      	b.n	10f46 <z_prf+0x262>
			switch (c) {
   10f08:	2c75      	cmp	r4, #117	; 0x75
   10f0a:	d0bb      	beq.n	10e84 <z_prf+0x1a0>
   10f0c:	2c78      	cmp	r4, #120	; 0x78
   10f0e:	d0b9      	beq.n	10e84 <z_prf+0x1a0>
   10f10:	2c73      	cmp	r4, #115	; 0x73
   10f12:	f47f af5d 	bne.w	10dd0 <z_prf+0xec>
					precision = INT_MAX;
   10f16:	2d00      	cmp	r5, #0
   10f18:	bfb8      	it	lt
   10f1a:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
   10f1e:	2700      	movs	r7, #0
				cptr = va_arg(vargs, char *);
   10f20:	1d33      	adds	r3, r6, #4
   10f22:	6836      	ldr	r6, [r6, #0]
   10f24:	9304      	str	r3, [sp, #16]
				for (clen = 0; clen < precision; clen++) {
   10f26:	42bd      	cmp	r5, r7
   10f28:	f040 82bd 	bne.w	114a6 <z_prf+0x7c2>
   10f2c:	2500      	movs	r5, #0
   10f2e:	46ab      	mov	fp, r5
   10f30:	e009      	b.n	10f46 <z_prf+0x262>
				break;
   10f32:	f04f 0b00 	mov.w	fp, #0
				clen = 1;
   10f36:	2701      	movs	r7, #1
				break;
   10f38:	465d      	mov	r5, fp
				buf[0] = va_arg(vargs, int);
   10f3a:	1d33      	adds	r3, r6, #4
   10f3c:	9304      	str	r3, [sp, #16]
   10f3e:	6833      	ldr	r3, [r6, #0]
   10f40:	ae1c      	add	r6, sp, #112	; 0x70
   10f42:	f806 3d1c 	strb.w	r3, [r6, #-28]!
				zero_head = precision - clen + prefix;
   10f46:	eba5 0a07 	sub.w	sl, r5, r7
			zero.predot = zero.postdot = zero.trail = 0;
   10f4a:	2500      	movs	r5, #0
   10f4c:	46a8      	mov	r8, r5
   10f4e:	46a9      	mov	r9, r5
				zero_head = precision - clen + prefix;
   10f50:	44da      	add	sl, fp
   10f52:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
			width -= clen + zero_head;
   10f56:	9b07      	ldr	r3, [sp, #28]
   10f58:	eb0a 0407 	add.w	r4, sl, r7
   10f5c:	1b1c      	subs	r4, r3, r4
			if (!fminus && width > 0) {
   10f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10f60:	b913      	cbnz	r3, 10f68 <z_prf+0x284>
   10f62:	2c00      	cmp	r4, #0
   10f64:	f300 8309 	bgt.w	1157a <z_prf+0x896>
   10f68:	eb06 030b 	add.w	r3, r6, fp
			while (prefix-- > 0) {
   10f6c:	429e      	cmp	r6, r3
   10f6e:	f040 8306 	bne.w	1157e <z_prf+0x89a>
   10f72:	4653      	mov	r3, sl
			while (zero_head-- > 0) {
   10f74:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   10f78:	f080 830d 	bcs.w	11596 <z_prf+0x8b2>
			clen -= prefix;
   10f7c:	eba7 070b 	sub.w	r7, r7, fp
			if (zero.predot) {
   10f80:	f1b9 0f00 	cmp.w	r9, #0
   10f84:	f000 832c 	beq.w	115e0 <z_prf+0x8fc>
				c = *cptr;
   10f88:	7830      	ldrb	r0, [r6, #0]
   10f8a:	19f2      	adds	r2, r6, r7
   10f8c:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
				while (isdigit(c)) {
   10f90:	2909      	cmp	r1, #9
   10f92:	eba2 0306 	sub.w	r3, r2, r6
   10f96:	f240 8309 	bls.w	115ac <z_prf+0x8c8>
   10f9a:	464a      	mov	r2, r9
				while (zero.predot-- > 0) {
   10f9c:	2a00      	cmp	r2, #0
   10f9e:	f040 8310 	bne.w	115c2 <z_prf+0x8de>
				clen -= zero.predot;
   10fa2:	eba3 0909 	sub.w	r9, r3, r9
			if (zero.postdot) {
   10fa6:	f1b8 0f00 	cmp.w	r8, #0
   10faa:	d018      	beq.n	10fde <z_prf+0x2fa>
   10fac:	eb06 0309 	add.w	r3, r6, r9
					c = *cptr++;
   10fb0:	f816 2b01 	ldrb.w	r2, [r6], #1
   10fb4:	9307      	str	r3, [sp, #28]
					PUTC(c);
   10fb6:	9903      	ldr	r1, [sp, #12]
   10fb8:	4610      	mov	r0, r2
   10fba:	9b02      	ldr	r3, [sp, #8]
   10fbc:	9205      	str	r2, [sp, #20]
   10fbe:	4798      	blx	r3
   10fc0:	3001      	adds	r0, #1
   10fc2:	f43f aea4 	beq.w	10d0e <z_prf+0x2a>
				} while (c != '.');
   10fc6:	9a05      	ldr	r2, [sp, #20]
   10fc8:	9b07      	ldr	r3, [sp, #28]
   10fca:	2a2e      	cmp	r2, #46	; 0x2e
   10fcc:	eba3 0906 	sub.w	r9, r3, r6
   10fd0:	d1ee      	bne.n	10fb0 <z_prf+0x2cc>
   10fd2:	4643      	mov	r3, r8
				while (zero.postdot-- > 0) {
   10fd4:	2b00      	cmp	r3, #0
   10fd6:	f300 8305 	bgt.w	115e4 <z_prf+0x900>
				clen -= zero.postdot;
   10fda:	eba9 0908 	sub.w	r9, r9, r8
			if (zero.trail) {
   10fde:	b19d      	cbz	r5, 11008 <z_prf+0x324>
				c = *cptr;
   10fe0:	7830      	ldrb	r0, [r6, #0]
   10fe2:	eb06 0809 	add.w	r8, r6, r9
   10fe6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
				while (isdigit(c) || c == '.') {
   10fea:	2b09      	cmp	r3, #9
   10fec:	eba8 0906 	sub.w	r9, r8, r6
   10ff0:	f240 8305 	bls.w	115fe <z_prf+0x91a>
   10ff4:	282e      	cmp	r0, #46	; 0x2e
   10ff6:	f000 8302 	beq.w	115fe <z_prf+0x91a>
   10ffa:	46a8      	mov	r8, r5
				while (zero.trail-- > 0) {
   10ffc:	f1b8 0f00 	cmp.w	r8, #0
   11000:	f300 8306 	bgt.w	11610 <z_prf+0x92c>
				clen -= zero.trail;
   11004:	eba9 0905 	sub.w	r9, r9, r5
   11008:	44b1      	add	r9, r6
   1100a:	e314      	b.n	11636 <z_prf+0x952>
	} else if (fplus) {
   1100c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1100e:	b123      	cbz	r3, 1101a <z_prf+0x336>
		*buf++ = '+';
   11010:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
   11012:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
   11016:	4621      	mov	r1, r4
   11018:	e75e      	b.n	10ed8 <z_prf+0x1f4>
	} else if (fspace) {
   1101a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1101c:	b10b      	cbz	r3, 11022 <z_prf+0x33e>
		*buf++ = ' ';
   1101e:	2320      	movs	r3, #32
   11020:	e7f7      	b.n	11012 <z_prf+0x32e>
	} else if (fspace) {
   11022:	4621      	mov	r1, r4
   11024:	af15      	add	r7, sp, #84	; 0x54
   11026:	e759      	b.n	10edc <z_prf+0x1f8>
   11028:	00028986 	.word	0x00028986
   1102c:	0002898c 	.word	0x0002898c
				u.d = va_arg(vargs, double);
   11030:	3607      	adds	r6, #7
   11032:	f026 0607 	bic.w	r6, r6, #7
				double_val = u.i;
   11036:	e9d6 0100 	ldrd	r0, r1, [r6]
	fract = (double_temp << 11) & ~HIGHBIT64;
   1103a:	02c2      	lsls	r2, r0, #11
   1103c:	4690      	mov	r8, r2
				u.d = va_arg(vargs, double);
   1103e:	f106 0308 	add.w	r3, r6, #8
   11042:	9304      	str	r3, [sp, #16]
	fract = (double_temp << 11) & ~HIGHBIT64;
   11044:	02cb      	lsls	r3, r1, #11
   11046:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
	if (sign) {
   1104a:	2800      	cmp	r0, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
   1104c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
	if (sign) {
   11050:	f171 0300 	sbcs.w	r3, r1, #0
	exp = double_temp >> 52 & 0x7ff;
   11054:	f3c1 560a 	ubfx	r6, r1, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
   11058:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
	if (sign) {
   1105c:	da42      	bge.n	110e4 <z_prf+0x400>
		*buf++ = '-';
   1105e:	212d      	movs	r1, #45	; 0x2d
		*buf++ = ' ';
   11060:	f88d 1054 	strb.w	r1, [sp, #84]	; 0x54
   11064:	f10d 0755 	add.w	r7, sp, #85	; 0x55
	if (exp == 0x7ff) {
   11068:	f240 71ff 	movw	r1, #2047	; 0x7ff
   1106c:	428e      	cmp	r6, r1
   1106e:	d154      	bne.n	1111a <z_prf+0x436>
		if (!fract) {
   11070:	ea58 0309 	orrs.w	r3, r8, r9
   11074:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
   11078:	f107 0003 	add.w	r0, r7, #3
   1107c:	d142      	bne.n	11104 <z_prf+0x420>
			if (isupper(c)) {
   1107e:	2c19      	cmp	r4, #25
   11080:	d83a      	bhi.n	110f8 <z_prf+0x414>
				*buf++ = 'I';
   11082:	2349      	movs	r3, #73	; 0x49
   11084:	703b      	strb	r3, [r7, #0]
				*buf++ = 'N';
   11086:	234e      	movs	r3, #78	; 0x4e
   11088:	707b      	strb	r3, [r7, #1]
				*buf++ = 'F';
   1108a:	2346      	movs	r3, #70	; 0x46
		*buf = 0;
   1108c:	2500      	movs	r5, #0
			zero.predot = zero.postdot = zero.trail = 0;
   1108e:	46a8      	mov	r8, r5
   11090:	46a9      	mov	r9, r5
				*buf++ = 'n';
   11092:	70bb      	strb	r3, [r7, #2]
		*buf = 0;
   11094:	70fd      	strb	r5, [r7, #3]
		return buf - start;
   11096:	af15      	add	r7, sp, #84	; 0x54
   11098:	1bc0      	subs	r0, r0, r7
				if (fplus || fspace || (buf[0] == '-')) {
   1109a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1109c:	2b00      	cmp	r3, #0
   1109e:	f040 81da 	bne.w	11456 <z_prf+0x772>
   110a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   110a4:	2b00      	cmp	r3, #0
   110a6:	f040 81d6 	bne.w	11456 <z_prf+0x772>
   110aa:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
   110ae:	f1ab 032d 	sub.w	r3, fp, #45	; 0x2d
   110b2:	f1d3 0b00 	rsbs	fp, r3, #0
   110b6:	eb4b 0b03 	adc.w	fp, fp, r3
				if (!isdigit(buf[prefix])) {
   110ba:	ab1c      	add	r3, sp, #112	; 0x70
   110bc:	445b      	add	r3, fp
   110be:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
				clen += zero.predot + zero.postdot + zero.trail;
   110c2:	eb08 0709 	add.w	r7, r8, r9
   110c6:	3b30      	subs	r3, #48	; 0x30
   110c8:	442f      	add	r7, r5
				if (!isdigit(buf[prefix])) {
   110ca:	2b09      	cmp	r3, #9
				clen += zero.predot + zero.postdot + zero.trail;
   110cc:	4407      	add	r7, r0
				if (!isdigit(buf[prefix])) {
   110ce:	f200 823b 	bhi.w	11548 <z_prf+0x864>
			} else if (fzero) {
   110d2:	9b08      	ldr	r3, [sp, #32]
   110d4:	2b00      	cmp	r3, #0
   110d6:	f000 823b 	beq.w	11550 <z_prf+0x86c>
				zero_head = width - clen;
   110da:	9b07      	ldr	r3, [sp, #28]
   110dc:	ae15      	add	r6, sp, #84	; 0x54
   110de:	eba3 0a07 	sub.w	sl, r3, r7
   110e2:	e736      	b.n	10f52 <z_prf+0x26e>
	} else if (fplus) {
   110e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   110e6:	b10b      	cbz	r3, 110ec <z_prf+0x408>
		*buf++ = '+';
   110e8:	212b      	movs	r1, #43	; 0x2b
   110ea:	e7b9      	b.n	11060 <z_prf+0x37c>
	} else if (fspace) {
   110ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   110ee:	b10b      	cbz	r3, 110f4 <z_prf+0x410>
		*buf++ = ' ';
   110f0:	2120      	movs	r1, #32
   110f2:	e7b5      	b.n	11060 <z_prf+0x37c>
	} else if (fspace) {
   110f4:	af15      	add	r7, sp, #84	; 0x54
   110f6:	e7b7      	b.n	11068 <z_prf+0x384>
				*buf++ = 'i';
   110f8:	2369      	movs	r3, #105	; 0x69
   110fa:	703b      	strb	r3, [r7, #0]
				*buf++ = 'n';
   110fc:	236e      	movs	r3, #110	; 0x6e
   110fe:	707b      	strb	r3, [r7, #1]
				*buf++ = 'f';
   11100:	2366      	movs	r3, #102	; 0x66
   11102:	e7c3      	b.n	1108c <z_prf+0x3a8>
			if (isupper(c)) {
   11104:	2c19      	cmp	r4, #25
				*buf++ = 'N';
   11106:	bf99      	ittee	ls
   11108:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
   1110a:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
   1110c:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
   1110e:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
   11110:	bf94      	ite	ls
   11112:	703b      	strbls	r3, [r7, #0]
				*buf++ = 'n';
   11114:	703b      	strbhi	r3, [r7, #0]
				*buf++ = 'a';
   11116:	707a      	strb	r2, [r7, #1]
   11118:	e7b8      	b.n	1108c <z_prf+0x3a8>
		c = 'f';
   1111a:	2c46      	cmp	r4, #70	; 0x46
	if ((exp | fract) != 0) {
   1111c:	ea48 0006 	orr.w	r0, r8, r6
   11120:	ea49 71e6 	orr.w	r1, r9, r6, asr #31
		c = 'f';
   11124:	bf08      	it	eq
   11126:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
   11128:	ea50 0301 	orrs.w	r3, r0, r1
   1112c:	f000 80da 	beq.w	112e4 <z_prf+0x600>
		if (exp == 0) {
   11130:	2e00      	cmp	r6, #0
   11132:	d07a      	beq.n	1122a <z_prf+0x546>
		fract |= HIGHBIT64;
   11134:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11138:	4610      	mov	r0, r2
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
   1113a:	f2a6 38fe 	subw	r8, r6, #1022	; 0x3fe
		fract |= HIGHBIT64;
   1113e:	2600      	movs	r6, #0
   11140:	f043 4100 	orr.w	r1, r3, #2147483648	; 0x80000000
   11144:	f10d 0970 	add.w	r9, sp, #112	; 0x70
   11148:	e969 010c 	strd	r0, r1, [r9, #-48]!	; 0x30
	while (exp <= -3) {
   1114c:	f118 0f02 	cmn.w	r8, #2
   11150:	db7a      	blt.n	11248 <z_prf+0x564>
		while ((fract >> 32) <= (MAXFP1 / 2)) {
   11152:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
   11156:	f04f 0b00 	mov.w	fp, #0
	while (exp > 0) {
   1115a:	f1b8 0f00 	cmp.w	r8, #0
   1115e:	f300 80a4 	bgt.w	112aa <z_prf+0x5c6>
		_rlrshift(&fract);
   11162:	a810      	add	r0, sp, #64	; 0x40
		exp++;
   11164:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
   11168:	f013 fc18 	bl	2499c <_rlrshift>
	while (exp < (0 + 4)) {
   1116c:	f1b8 0f04 	cmp.w	r8, #4
   11170:	d1f7      	bne.n	11162 <z_prf+0x47e>
		precision = 6;		/* Default precision if none given */
   11172:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
   11174:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
   11178:	bfb8      	it	lt
   1117a:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
   1117c:	2b47      	cmp	r3, #71	; 0x47
   1117e:	f040 80b9 	bne.w	112f4 <z_prf+0x610>
		if (decexp < (-4 + 1) || decexp > precision) {
   11182:	1cf2      	adds	r2, r6, #3
   11184:	db02      	blt.n	1118c <z_prf+0x4a8>
   11186:	42b5      	cmp	r5, r6
   11188:	f280 80af 	bge.w	112ea <z_prf+0x606>
			c += 'e' - 'g';
   1118c:	3c02      	subs	r4, #2
   1118e:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
   11190:	2d00      	cmp	r5, #0
   11192:	f000 8275 	beq.w	11680 <z_prf+0x99c>
		if (!falt && (precision > 0)) {
   11196:	9b05      	ldr	r3, [sp, #20]
				precision--;
   11198:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
   1119a:	2b00      	cmp	r3, #0
   1119c:	f040 8270 	bne.w	11680 <z_prf+0x99c>
   111a0:	2d00      	cmp	r5, #0
   111a2:	bfd4      	ite	le
   111a4:	f04f 0a00 	movle.w	sl, #0
   111a8:	f04f 0a01 	movgt.w	sl, #1
	if (c == 'f') {
   111ac:	2c66      	cmp	r4, #102	; 0x66
   111ae:	f040 8269 	bne.w	11684 <z_prf+0x9a0>
		if (exp < 0) {
   111b2:	eb15 0806 	adds.w	r8, r5, r6
   111b6:	f140 80a3 	bpl.w	11300 <z_prf+0x61c>
	digit_count = 16;
   111ba:	2310      	movs	r3, #16
   111bc:	2466      	movs	r4, #102	; 0x66
			exp = 0;
   111be:	f04f 0800 	mov.w	r8, #0
	digit_count = 16;
   111c2:	930f      	str	r3, [sp, #60]	; 0x3c
	ltemp = 0x0800000000000000;
   111c4:	2200      	movs	r2, #0
   111c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   111ca:	f10d 0970 	add.w	r9, sp, #112	; 0x70
   111ce:	e969 230a 	strd	r2, r3, [r9, #-40]!	; 0x28
	while (exp--) {
   111d2:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
   111d6:	f080 8095 	bcs.w	11304 <z_prf+0x620>
	fract += ltemp;
   111da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   111de:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   111e2:	eb12 0800 	adds.w	r8, r2, r0
   111e6:	eb43 0901 	adc.w	r9, r3, r1
   111ea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
	if ((fract >> 32) & 0xF0000000) {
   111ee:	f009 4870 	and.w	r8, r9, #4026531840	; 0xf0000000
   111f2:	f04f 0900 	mov.w	r9, #0
   111f6:	ea58 0309 	orrs.w	r3, r8, r9
   111fa:	d006      	beq.n	1120a <z_prf+0x526>
		_ldiv5(&fract);
   111fc:	a810      	add	r0, sp, #64	; 0x40
   111fe:	f013 fbe0 	bl	249c2 <_ldiv5>
		_rlrshift(&fract);
   11202:	a810      	add	r0, sp, #64	; 0x40
   11204:	f013 fbca 	bl	2499c <_rlrshift>
		decexp++;
   11208:	3601      	adds	r6, #1
	if (c == 'f') {
   1120a:	2c66      	cmp	r4, #102	; 0x66
   1120c:	f040 80c4 	bne.w	11398 <z_prf+0x6b4>
		if (decexp > 0) {
   11210:	2e00      	cmp	r6, #0
   11212:	dc7d      	bgt.n	11310 <z_prf+0x62c>
			*buf++ = '0';
   11214:	2330      	movs	r3, #48	; 0x30
   11216:	703b      	strb	r3, [r7, #0]
		if (falt || (precision > 0)) {
   11218:	9b05      	ldr	r3, [sp, #20]
			*buf++ = '0';
   1121a:	f107 0b01 	add.w	fp, r7, #1
		if (falt || (precision > 0)) {
   1121e:	2b00      	cmp	r3, #0
   11220:	f040 808d 	bne.w	1133e <z_prf+0x65a>
			zero.predot = zero.postdot = zero.trail = 0;
   11224:	4699      	mov	r9, r3
   11226:	e085      	b.n	11334 <z_prf+0x650>
				exp--;
   11228:	3e01      	subs	r6, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
   1122a:	eb18 0808 	adds.w	r8, r8, r8
   1122e:	eb49 0909 	adc.w	r9, r9, r9
   11232:	f1b8 0f00 	cmp.w	r8, #0
   11236:	f179 0300 	sbcs.w	r3, r9, #0
   1123a:	daf5      	bge.n	11228 <z_prf+0x544>
   1123c:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   11240:	e778      	b.n	11134 <z_prf+0x450>
			_rlrshift(&fract);
   11242:	4648      	mov	r0, r9
   11244:	f013 fbaa 	bl	2499c <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
   11248:	e9dd a010 	ldrd	sl, r0, [sp, #64]	; 0x40
   1124c:	2300      	movs	r3, #0
   1124e:	930b      	str	r3, [sp, #44]	; 0x2c
   11250:	2300      	movs	r3, #0
   11252:	900a      	str	r0, [sp, #40]	; 0x28
   11254:	4abb      	ldr	r2, [pc, #748]	; (11544 <z_prf+0x860>)
   11256:	e9dd bc0a 	ldrd	fp, ip, [sp, #40]	; 0x28
   1125a:	4563      	cmp	r3, ip
   1125c:	bf08      	it	eq
   1125e:	455a      	cmpeq	r2, fp
   11260:	f108 0801 	add.w	r8, r8, #1
   11264:	d3ed      	bcc.n	11242 <z_prf+0x55e>
		fract *= 5U;
   11266:	2205      	movs	r2, #5
		decexp--;
   11268:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
   1126c:	fbaa ab02 	umull	sl, fp, sl, r2
   11270:	fb02 bb00 	mla	fp, r2, r0, fp
   11274:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
		decexp--;
   11278:	3e01      	subs	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
   1127a:	2300      	movs	r3, #0
   1127c:	2100      	movs	r1, #0
   1127e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11282:	4299      	cmp	r1, r3
   11284:	bf08      	it	eq
   11286:	4558      	cmpeq	r0, fp
   11288:	d206      	bcs.n	11298 <z_prf+0x5b4>
   1128a:	f1bc 0f00 	cmp.w	ip, #0
   1128e:	f43f af5d 	beq.w	1114c <z_prf+0x468>
   11292:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   11296:	e759      	b.n	1114c <z_prf+0x468>
			fract <<= 1;
   11298:	eb1a 0a0a 	adds.w	sl, sl, sl
   1129c:	eb4b 0b0b 	adc.w	fp, fp, fp
			exp--;
   112a0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   112a4:	f04f 0c01 	mov.w	ip, #1
   112a8:	e7e7      	b.n	1127a <z_prf+0x596>
		_ldiv5(&fract);
   112aa:	a810      	add	r0, sp, #64	; 0x40
   112ac:	f013 fb89 	bl	249c2 <_ldiv5>
   112b0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
		decexp++;
   112b4:	f04f 0c00 	mov.w	ip, #0
		exp--;
   112b8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
   112bc:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
   112be:	2300      	movs	r3, #0
   112c0:	459b      	cmp	fp, r3
   112c2:	bf08      	it	eq
   112c4:	458a      	cmpeq	sl, r1
   112c6:	d206      	bcs.n	112d6 <z_prf+0x5f2>
   112c8:	f1bc 0f00 	cmp.w	ip, #0
   112cc:	f43f af45 	beq.w	1115a <z_prf+0x476>
   112d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   112d4:	e741      	b.n	1115a <z_prf+0x476>
			fract <<= 1;
   112d6:	1800      	adds	r0, r0, r0
   112d8:	4149      	adcs	r1, r1
			exp--;
   112da:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   112de:	f04f 0c01 	mov.w	ip, #1
   112e2:	e7ec      	b.n	112be <z_prf+0x5da>
	if ((exp | fract) != 0) {
   112e4:	2600      	movs	r6, #0
   112e6:	46b0      	mov	r8, r6
   112e8:	e73b      	b.n	11162 <z_prf+0x47e>
		if (!falt && (precision > 0)) {
   112ea:	9b05      	ldr	r3, [sp, #20]
			precision -= decexp;
   112ec:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
   112ee:	b923      	cbnz	r3, 112fa <z_prf+0x616>
			c = 'f';
   112f0:	2466      	movs	r4, #102	; 0x66
   112f2:	e755      	b.n	111a0 <z_prf+0x4bc>
	prune_zero = false;		/* Assume trailing 0's allowed     */
   112f4:	f04f 0a00 	mov.w	sl, #0
   112f8:	e758      	b.n	111ac <z_prf+0x4c8>
   112fa:	f04f 0a00 	mov.w	sl, #0
   112fe:	e758      	b.n	111b2 <z_prf+0x4ce>
		if (exp < 0) {
   11300:	2466      	movs	r4, #102	; 0x66
   11302:	e1c1      	b.n	11688 <z_prf+0x9a4>
		_ldiv5(&ltemp);
   11304:	4648      	mov	r0, r9
   11306:	f013 fb5c 	bl	249c2 <_ldiv5>
		_rlrshift(&ltemp);
   1130a:	f013 fb47 	bl	2499c <_rlrshift>
   1130e:	e760      	b.n	111d2 <z_prf+0x4ee>
		if (decexp > 0) {
   11310:	46bb      	mov	fp, r7
			while (decexp > 0 && digit_count > 0) {
   11312:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11314:	2b00      	cmp	r3, #0
   11316:	dd07      	ble.n	11328 <z_prf+0x644>
				*buf++ = _get_digit(&fract, &digit_count);
   11318:	a90f      	add	r1, sp, #60	; 0x3c
   1131a:	a810      	add	r0, sp, #64	; 0x40
   1131c:	f013 fb81 	bl	24a22 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   11320:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
   11322:	f80b 0b01 	strb.w	r0, [fp], #1
			while (decexp > 0 && digit_count > 0) {
   11326:	d1f4      	bne.n	11312 <z_prf+0x62e>
		if (falt || (precision > 0)) {
   11328:	9b05      	ldr	r3, [sp, #20]
   1132a:	2b00      	cmp	r3, #0
   1132c:	f040 819f 	bne.w	1166e <z_prf+0x98a>
			zp->predot = decexp;
   11330:	46b1      	mov	r9, r6
			decexp = 0;
   11332:	461e      	mov	r6, r3
		if (falt || (precision > 0)) {
   11334:	2d00      	cmp	r5, #0
   11336:	dc04      	bgt.n	11342 <z_prf+0x65e>
			zero.predot = zero.postdot = zero.trail = 0;
   11338:	f04f 0800 	mov.w	r8, #0
   1133c:	e020      	b.n	11380 <z_prf+0x69c>
   1133e:	f04f 0900 	mov.w	r9, #0
			*buf++ = '.';
   11342:	222e      	movs	r2, #46	; 0x2e
   11344:	f10b 0301 	add.w	r3, fp, #1
   11348:	f88b 2000 	strb.w	r2, [fp]
		if (decexp < 0 && precision > 0) {
   1134c:	2e00      	cmp	r6, #0
   1134e:	f000 8195 	beq.w	1167c <z_prf+0x998>
   11352:	2d00      	cmp	r5, #0
   11354:	dd1e      	ble.n	11394 <z_prf+0x6b0>
			zp->postdot = -decexp;
   11356:	f1c6 0800 	rsb	r8, r6, #0
   1135a:	45a8      	cmp	r8, r5
   1135c:	bfa8      	it	ge
   1135e:	46a8      	movge	r8, r5
			precision -= zp->postdot;
   11360:	eba5 0508 	sub.w	r5, r5, r8
			zero.predot = zero.postdot = zero.trail = 0;
   11364:	469b      	mov	fp, r3
   11366:	e006      	b.n	11376 <z_prf+0x692>
			*buf++ = _get_digit(&fract, &digit_count);
   11368:	a90f      	add	r1, sp, #60	; 0x3c
   1136a:	a810      	add	r0, sp, #64	; 0x40
   1136c:	f013 fb59 	bl	24a22 <_get_digit>
			precision--;
   11370:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
   11372:	f80b 0b01 	strb.w	r0, [fp], #1
		while (precision > 0 && digit_count > 0) {
   11376:	2d00      	cmp	r5, #0
   11378:	dd02      	ble.n	11380 <z_prf+0x69c>
   1137a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1137c:	2b00      	cmp	r3, #0
   1137e:	dcf3      	bgt.n	11368 <z_prf+0x684>
	if (prune_zero) {
   11380:	f1ba 0f00 	cmp.w	sl, #0
   11384:	d11e      	bne.n	113c4 <z_prf+0x6e0>
	*buf = 0;
   11386:	2300      	movs	r3, #0
	return buf - start;
   11388:	af15      	add	r7, sp, #84	; 0x54
	*buf = 0;
   1138a:	f88b 3000 	strb.w	r3, [fp]
	return buf - start;
   1138e:	ebab 0007 	sub.w	r0, fp, r7
   11392:	e682      	b.n	1109a <z_prf+0x3b6>
			*buf++ = '.';
   11394:	469b      	mov	fp, r3
   11396:	e7cf      	b.n	11338 <z_prf+0x654>
		*buf = _get_digit(&fract, &digit_count);
   11398:	a90f      	add	r1, sp, #60	; 0x3c
   1139a:	a810      	add	r0, sp, #64	; 0x40
   1139c:	f013 fb41 	bl	24a22 <_get_digit>
		if (falt || (precision > 0)) {
   113a0:	9b05      	ldr	r3, [sp, #20]
		if (*buf++ != '0') {
   113a2:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
   113a4:	7038      	strb	r0, [r7, #0]
			decexp--;
   113a6:	bf18      	it	ne
   113a8:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
   113ac:	2b00      	cmp	r3, #0
   113ae:	d13c      	bne.n	1142a <z_prf+0x746>
   113b0:	2d00      	cmp	r5, #0
   113b2:	dc3a      	bgt.n	1142a <z_prf+0x746>
		if (*buf++ != '0') {
   113b4:	f107 0b01 	add.w	fp, r7, #1
	if (prune_zero) {
   113b8:	f1ba 0f00 	cmp.w	sl, #0
   113bc:	d048      	beq.n	11450 <z_prf+0x76c>
			zero.predot = zero.postdot = zero.trail = 0;
   113be:	f04f 0900 	mov.w	r9, #0
   113c2:	46c8      	mov	r8, r9
		while (*--buf == '0')
   113c4:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   113c8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   113cc:	2a30      	cmp	r2, #48	; 0x30
   113ce:	d03d      	beq.n	1144c <z_prf+0x768>
   113d0:	2a2e      	cmp	r2, #46	; 0x2e
   113d2:	bf08      	it	eq
   113d4:	469b      	moveq	fp, r3
   113d6:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
   113d8:	f004 03df 	and.w	r3, r4, #223	; 0xdf
   113dc:	2b45      	cmp	r3, #69	; 0x45
   113de:	d1d2      	bne.n	11386 <z_prf+0x6a2>
		if (decexp < 0) {
   113e0:	2e00      	cmp	r6, #0
			*buf++ = '-';
   113e2:	bfb4      	ite	lt
   113e4:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
   113e6:	232b      	movge	r3, #43	; 0x2b
		*buf++ = c;
   113e8:	465a      	mov	r2, fp
			decexp = -decexp;
   113ea:	bfb8      	it	lt
   113ec:	4276      	neglt	r6, r6
		if (decexp >= 100) {
   113ee:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
   113f0:	f802 4b02 	strb.w	r4, [r2], #2
			*buf++ = '+';
   113f4:	f88b 3001 	strb.w	r3, [fp, #1]
		if (decexp >= 100) {
   113f8:	dd0a      	ble.n	11410 <z_prf+0x72c>
			*buf++ = (decexp / 100) + '0';
   113fa:	2164      	movs	r1, #100	; 0x64
   113fc:	fb96 f3f1 	sdiv	r3, r6, r1
			decexp %= 100;
   11400:	fb01 6613 	mls	r6, r1, r3, r6
			*buf++ = (decexp / 100) + '0';
   11404:	f103 0030 	add.w	r0, r3, #48	; 0x30
   11408:	f10b 0203 	add.w	r2, fp, #3
   1140c:	f88b 0002 	strb.w	r0, [fp, #2]
		*buf++ = (decexp / 10) + '0';
   11410:	210a      	movs	r1, #10
   11412:	fb96 f3f1 	sdiv	r3, r6, r1
   11416:	4693      	mov	fp, r2
		decexp %= 10;
   11418:	fb01 6613 	mls	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
   1141c:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = decexp + '0';
   11420:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   11422:	f80b 0b02 	strb.w	r0, [fp], #2
		*buf++ = decexp + '0';
   11426:	7056      	strb	r6, [r2, #1]
   11428:	e7ad      	b.n	11386 <z_prf+0x6a2>
			*buf++ = '.';
   1142a:	232e      	movs	r3, #46	; 0x2e
   1142c:	f107 0b02 	add.w	fp, r7, #2
   11430:	707b      	strb	r3, [r7, #1]
		while (precision > 0 && digit_count > 0) {
   11432:	2d00      	cmp	r5, #0
   11434:	ddc0      	ble.n	113b8 <z_prf+0x6d4>
   11436:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11438:	2b00      	cmp	r3, #0
   1143a:	ddbd      	ble.n	113b8 <z_prf+0x6d4>
			*buf++ = _get_digit(&fract, &digit_count);
   1143c:	a90f      	add	r1, sp, #60	; 0x3c
   1143e:	a810      	add	r0, sp, #64	; 0x40
   11440:	f013 faef 	bl	24a22 <_get_digit>
			precision--;
   11444:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
   11446:	f80b 0b01 	strb.w	r0, [fp], #1
   1144a:	e7f2      	b.n	11432 <z_prf+0x74e>
		while (*--buf == '0')
   1144c:	469b      	mov	fp, r3
   1144e:	e7b9      	b.n	113c4 <z_prf+0x6e0>
			zero.predot = zero.postdot = zero.trail = 0;
   11450:	46d1      	mov	r9, sl
   11452:	46d0      	mov	r8, sl
   11454:	e7c0      	b.n	113d8 <z_prf+0x6f4>
					prefix = 1;
   11456:	f04f 0b01 	mov.w	fp, #1
   1145a:	e62e      	b.n	110ba <z_prf+0x3d6>
   1145c:	4632      	mov	r2, r6
   1145e:	f852 3b04 	ldr.w	r3, [r2], #4
				switch (i) {
   11462:	2f68      	cmp	r7, #104	; 0x68
   11464:	9204      	str	r2, [sp, #16]
   11466:	d006      	beq.n	11476 <z_prf+0x792>
   11468:	2f6c      	cmp	r7, #108	; 0x6c
   1146a:	d009      	beq.n	11480 <z_prf+0x79c>
   1146c:	2f48      	cmp	r7, #72	; 0x48
   1146e:	d107      	bne.n	11480 <z_prf+0x79c>
					*va_arg(vargs, char *) = count;
   11470:	9a01      	ldr	r2, [sp, #4]
   11472:	701a      	strb	r2, [r3, #0]
					break;
   11474:	e001      	b.n	1147a <z_prf+0x796>
					*va_arg(vargs, short *) = count;
   11476:	9a01      	ldr	r2, [sp, #4]
   11478:	801a      	strh	r2, [r3, #0]
				continue;
   1147a:	9e04      	ldr	r6, [sp, #16]
   1147c:	9a06      	ldr	r2, [sp, #24]
   1147e:	e439      	b.n	10cf4 <z_prf+0x10>
					*va_arg(vargs, int *) = count;
   11480:	9a01      	ldr	r2, [sp, #4]
   11482:	601a      	str	r2, [r3, #0]
					break;
   11484:	e7f9      	b.n	1147a <z_prf+0x796>
				val = (uintptr_t) va_arg(vargs, void *);
   11486:	1d33      	adds	r3, r6, #4
   11488:	9304      	str	r3, [sp, #16]
		*buf++ = '0';
   1148a:	f647 0330 	movw	r3, #30768	; 0x7830
				clen = _to_hex(buf, val, true, 'x');
   1148e:	6831      	ldr	r1, [r6, #0]
	len = _to_x(buf, value, 16);
   11490:	2210      	movs	r2, #16
   11492:	f10d 0056 	add.w	r0, sp, #86	; 0x56
		*buf++ = '0';
   11496:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
	len = _to_x(buf, value, 16);
   1149a:	f013 fa5f 	bl	2495c <_to_x>
				prefix = 2;
   1149e:	f04f 0b02 	mov.w	fp, #2
	return len + (buf - buf0);
   114a2:	1c87      	adds	r7, r0, #2
				break;
   114a4:	e52b      	b.n	10efe <z_prf+0x21a>
					if (cptr[clen] == '\0') {
   114a6:	5df3      	ldrb	r3, [r6, r7]
   114a8:	2b00      	cmp	r3, #0
   114aa:	d045      	beq.n	11538 <z_prf+0x854>
				for (clen = 0; clen < precision; clen++) {
   114ac:	3701      	adds	r7, #1
   114ae:	e53a      	b.n	10f26 <z_prf+0x242>
	if (alt_form) {
   114b0:	4638      	mov	r0, r7
	return (buf - buf0) + _to_x(buf, value, 8);
   114b2:	2208      	movs	r2, #8
   114b4:	1bc7      	subs	r7, r0, r7
   114b6:	f013 fa51 	bl	2495c <_to_x>
   114ba:	4407      	add	r7, r0
			prefix = 0;
   114bc:	f04f 0b00 	mov.w	fp, #0
   114c0:	e51d      	b.n	10efe <z_prf+0x21a>
		*buf++ = '0';
   114c2:	f10d 0055 	add.w	r0, sp, #85	; 0x55
   114c6:	e7f4      	b.n	114b2 <z_prf+0x7ce>
				} else if (c == 'u') {
   114c8:	2c75      	cmp	r4, #117	; 0x75
   114ca:	d105      	bne.n	114d8 <z_prf+0x7f4>
	return _to_x(buf, value, 10);
   114cc:	220a      	movs	r2, #10
   114ce:	a815      	add	r0, sp, #84	; 0x54
   114d0:	f013 fa44 	bl	2495c <_to_x>
   114d4:	4607      	mov	r7, r0
   114d6:	e7f1      	b.n	114bc <z_prf+0x7d8>
	if (alt_form) {
   114d8:	9b05      	ldr	r3, [sp, #20]
   114da:	b1fb      	cbz	r3, 1151c <z_prf+0x838>
		*buf++ = '0';
   114dc:	f647 0330 	movw	r3, #30768	; 0x7830
		*buf++ = 'x';
   114e0:	f10d 0656 	add.w	r6, sp, #86	; 0x56
		*buf++ = '0';
   114e4:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
	len = _to_x(buf, value, 16);
   114e8:	2210      	movs	r2, #16
   114ea:	4630      	mov	r0, r6
   114ec:	f013 fa36 	bl	2495c <_to_x>
	if (prefix == 'X') {
   114f0:	2c58      	cmp	r4, #88	; 0x58
   114f2:	d10c      	bne.n	1150e <z_prf+0x82a>
   114f4:	f10d 0353 	add.w	r3, sp, #83	; 0x53
		if (*buf >= 'a' && *buf <= 'z') {
   114f8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   114fc:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   11500:	2919      	cmp	r1, #25
			*buf += 'A' - 'a';
   11502:	bf9c      	itt	ls
   11504:	3a20      	subls	r2, #32
   11506:	701a      	strbls	r2, [r3, #0]
	} while (*buf++);
   11508:	781a      	ldrb	r2, [r3, #0]
   1150a:	2a00      	cmp	r2, #0
   1150c:	d1f4      	bne.n	114f8 <z_prf+0x814>
	return len + (buf - buf0);
   1150e:	af15      	add	r7, sp, #84	; 0x54
			prefix = 0;
   11510:	9b05      	ldr	r3, [sp, #20]
	return len + (buf - buf0);
   11512:	1bf7      	subs	r7, r6, r7
   11514:	4407      	add	r7, r0
			prefix = 0;
   11516:	ea4f 0b43 	mov.w	fp, r3, lsl #1
   1151a:	e4f0      	b.n	10efe <z_prf+0x21a>
	if (alt_form) {
   1151c:	ae15      	add	r6, sp, #84	; 0x54
   1151e:	e7e3      	b.n	114e8 <z_prf+0x804>
				PUTC('%');
   11520:	9903      	ldr	r1, [sp, #12]
   11522:	4620      	mov	r0, r4
   11524:	f7ff bbee 	b.w	10d04 <z_prf+0x20>
				count++;
   11528:	9b01      	ldr	r3, [sp, #4]
   1152a:	3301      	adds	r3, #1
				count += 2;
   1152c:	9301      	str	r3, [sp, #4]
				continue;
   1152e:	9604      	str	r6, [sp, #16]
   11530:	e7a3      	b.n	1147a <z_prf+0x796>
					prefix = 1;
   11532:	f04f 0b01 	mov.w	fp, #1
   11536:	e4e2      	b.n	10efe <z_prf+0x21a>
   11538:	461d      	mov	r5, r3
   1153a:	e4f8      	b.n	10f2e <z_prf+0x24a>
			zero.predot = zero.postdot = zero.trail = 0;
   1153c:	2500      	movs	r5, #0
   1153e:	46a8      	mov	r8, r5
   11540:	46a9      	mov	r9, r5
   11542:	e5c6      	b.n	110d2 <z_prf+0x3ee>
   11544:	33333332 	.word	0x33333332
			cptr = buf;
   11548:	ae15      	add	r6, sp, #84	; 0x54
				zero_head = 0;
   1154a:	f04f 0a00 	mov.w	sl, #0
   1154e:	e502      	b.n	10f56 <z_prf+0x272>
   11550:	ae15      	add	r6, sp, #84	; 0x54
   11552:	f8dd a020 	ldr.w	sl, [sp, #32]
   11556:	e4fe      	b.n	10f56 <z_prf+0x272>
   11558:	9305      	str	r3, [sp, #20]
					PUTC(' ');
   1155a:	9903      	ldr	r1, [sp, #12]
   1155c:	9b02      	ldr	r3, [sp, #8]
   1155e:	2020      	movs	r0, #32
   11560:	4798      	blx	r3
   11562:	3001      	adds	r0, #1
   11564:	9b05      	ldr	r3, [sp, #20]
   11566:	f43f abd2 	beq.w	10d0e <z_prf+0x2a>
				while (width-- > 0) {
   1156a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   1156e:	d2f3      	bcs.n	11558 <z_prf+0x874>
				count += width;
   11570:	9a01      	ldr	r2, [sp, #4]
   11572:	4422      	add	r2, r4
   11574:	9201      	str	r2, [sp, #4]
				while (width-- > 0) {
   11576:	461c      	mov	r4, r3
   11578:	e4f6      	b.n	10f68 <z_prf+0x284>
   1157a:	4623      	mov	r3, r4
   1157c:	e7f5      	b.n	1156a <z_prf+0x886>
   1157e:	9305      	str	r3, [sp, #20]
				PUTC(*cptr++);
   11580:	9903      	ldr	r1, [sp, #12]
   11582:	9b02      	ldr	r3, [sp, #8]
   11584:	f816 0b01 	ldrb.w	r0, [r6], #1
   11588:	4798      	blx	r3
   1158a:	3001      	adds	r0, #1
   1158c:	9b05      	ldr	r3, [sp, #20]
   1158e:	f47f aced 	bne.w	10f6c <z_prf+0x288>
   11592:	f7ff bbbc 	b.w	10d0e <z_prf+0x2a>
   11596:	9305      	str	r3, [sp, #20]
				PUTC('0');
   11598:	9903      	ldr	r1, [sp, #12]
   1159a:	9b02      	ldr	r3, [sp, #8]
   1159c:	2030      	movs	r0, #48	; 0x30
   1159e:	4798      	blx	r3
   115a0:	3001      	adds	r0, #1
   115a2:	9b05      	ldr	r3, [sp, #20]
   115a4:	f47f ace6 	bne.w	10f74 <z_prf+0x290>
   115a8:	f7ff bbb1 	b.w	10d0e <z_prf+0x2a>
					PUTC(c);
   115ac:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
   115b0:	9205      	str	r2, [sp, #20]
   115b2:	4798      	blx	r3
   115b4:	3001      	adds	r0, #1
   115b6:	f43f abaa 	beq.w	10d0e <z_prf+0x2a>
					c = *++cptr;
   115ba:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   115be:	9a05      	ldr	r2, [sp, #20]
   115c0:	e4e4      	b.n	10f8c <z_prf+0x2a8>
   115c2:	9305      	str	r3, [sp, #20]
					PUTC('0');
   115c4:	9903      	ldr	r1, [sp, #12]
   115c6:	9b02      	ldr	r3, [sp, #8]
   115c8:	2030      	movs	r0, #48	; 0x30
   115ca:	9207      	str	r2, [sp, #28]
   115cc:	4798      	blx	r3
   115ce:	9a07      	ldr	r2, [sp, #28]
   115d0:	3001      	adds	r0, #1
   115d2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
   115d6:	9b05      	ldr	r3, [sp, #20]
   115d8:	f47f ace0 	bne.w	10f9c <z_prf+0x2b8>
   115dc:	f7ff bb97 	b.w	10d0e <z_prf+0x2a>
			clen -= prefix;
   115e0:	46b9      	mov	r9, r7
   115e2:	e4e0      	b.n	10fa6 <z_prf+0x2c2>
   115e4:	9305      	str	r3, [sp, #20]
					PUTC('0');
   115e6:	9903      	ldr	r1, [sp, #12]
   115e8:	9b02      	ldr	r3, [sp, #8]
   115ea:	2030      	movs	r0, #48	; 0x30
   115ec:	4798      	blx	r3
   115ee:	9b05      	ldr	r3, [sp, #20]
   115f0:	3001      	adds	r0, #1
   115f2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   115f6:	f47f aced 	bne.w	10fd4 <z_prf+0x2f0>
   115fa:	f7ff bb88 	b.w	10d0e <z_prf+0x2a>
					PUTC(c);
   115fe:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
   11602:	4798      	blx	r3
   11604:	3001      	adds	r0, #1
   11606:	f43f ab82 	beq.w	10d0e <z_prf+0x2a>
					c = *++cptr;
   1160a:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   1160e:	e4ea      	b.n	10fe6 <z_prf+0x302>
					PUTC('0');
   11610:	9903      	ldr	r1, [sp, #12]
   11612:	2030      	movs	r0, #48	; 0x30
   11614:	9b02      	ldr	r3, [sp, #8]
   11616:	4798      	blx	r3
   11618:	3001      	adds	r0, #1
   1161a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1161e:	f47f aced 	bne.w	10ffc <z_prf+0x318>
   11622:	f7ff bb74 	b.w	10d0e <z_prf+0x2a>
				PUTC(*cptr++);
   11626:	9903      	ldr	r1, [sp, #12]
   11628:	f816 0b01 	ldrb.w	r0, [r6], #1
   1162c:	9b02      	ldr	r3, [sp, #8]
   1162e:	4798      	blx	r3
   11630:	3001      	adds	r0, #1
   11632:	f43f ab6c 	beq.w	10d0e <z_prf+0x2a>
   11636:	eba9 0306 	sub.w	r3, r9, r6
			while (clen-- > 0) {
   1163a:	2b00      	cmp	r3, #0
   1163c:	dcf3      	bgt.n	11626 <z_prf+0x942>
			count += prefix;
   1163e:	9b01      	ldr	r3, [sp, #4]
			if (width > 0) {
   11640:	2c00      	cmp	r4, #0
			count += prefix;
   11642:	445b      	add	r3, fp
   11644:	469b      	mov	fp, r3
			count += zero_head;
   11646:	44d3      	add	fp, sl
			count += clen;
   11648:	eb07 030b 	add.w	r3, r7, fp
   1164c:	9301      	str	r3, [sp, #4]
			if (width > 0) {
   1164e:	f77f af14 	ble.w	1147a <z_prf+0x796>
				count += width;
   11652:	4423      	add	r3, r4
   11654:	9301      	str	r3, [sp, #4]
				while (width-- > 0) {
   11656:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   1165a:	f4ff af0e 	bcc.w	1147a <z_prf+0x796>
					PUTC(' ');
   1165e:	9903      	ldr	r1, [sp, #12]
   11660:	2020      	movs	r0, #32
   11662:	9b02      	ldr	r3, [sp, #8]
   11664:	4798      	blx	r3
   11666:	3001      	adds	r0, #1
   11668:	d1f5      	bne.n	11656 <z_prf+0x972>
   1166a:	f7ff bb50 	b.w	10d0e <z_prf+0x2a>
			*buf++ = '.';
   1166e:	222e      	movs	r2, #46	; 0x2e
			zp->predot = decexp;
   11670:	46b1      	mov	r9, r6
			decexp = 0;
   11672:	2600      	movs	r6, #0
			*buf++ = '.';
   11674:	f10b 0301 	add.w	r3, fp, #1
   11678:	f88b 2000 	strb.w	r2, [fp]
			zero.predot = zero.postdot = zero.trail = 0;
   1167c:	46b0      	mov	r8, r6
   1167e:	e671      	b.n	11364 <z_prf+0x680>
	prune_zero = false;		/* Assume trailing 0's allowed     */
   11680:	f04f 0a00 	mov.w	sl, #0
		exp = precision + 1;
   11684:	f105 0801 	add.w	r8, r5, #1
	digit_count = 16;
   11688:	2310      	movs	r3, #16
   1168a:	4598      	cmp	r8, r3
   1168c:	930f      	str	r3, [sp, #60]	; 0x3c
   1168e:	bfa8      	it	ge
   11690:	4698      	movge	r8, r3
   11692:	e597      	b.n	111c4 <z_prf+0x4e0>

00011694 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   11694:	4b01      	ldr	r3, [pc, #4]	; (1169c <__stdout_hook_install+0x8>)
   11696:	6018      	str	r0, [r3, #0]
}
   11698:	4770      	bx	lr
   1169a:	bf00      	nop
   1169c:	2002d3ac 	.word	0x2002d3ac

000116a0 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
   116a0:	b40c      	push	{r2, r3}
   116a2:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   116a4:	b909      	cbnz	r1, 116aa <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
   116a6:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
   116aa:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
   116ae:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   116b0:	9a06      	ldr	r2, [sp, #24]
   116b2:	a902      	add	r1, sp, #8
   116b4:	4805      	ldr	r0, [pc, #20]	; (116cc <snprintf+0x2c>)
	va_start(vargs, format);
   116b6:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   116b8:	f7ff fb14 	bl	10ce4 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
   116bc:	2200      	movs	r2, #0
   116be:	9b02      	ldr	r3, [sp, #8]
   116c0:	701a      	strb	r2, [r3, #0]
	return r;
}
   116c2:	b005      	add	sp, #20
   116c4:	f85d eb04 	ldr.w	lr, [sp], #4
   116c8:	b002      	add	sp, #8
   116ca:	4770      	bx	lr
   116cc:	00024a5f 	.word	0x00024a5f

000116d0 <sprintf>:

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
   116d0:	b40e      	push	{r1, r2, r3}
   116d2:	b50f      	push	{r0, r1, r2, r3, lr}

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   116d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
   116d8:	ab05      	add	r3, sp, #20
   116da:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
   116de:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   116e0:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   116e2:	4806      	ldr	r0, [pc, #24]	; (116fc <sprintf+0x2c>)
   116e4:	a902      	add	r1, sp, #8
	va_start(vargs, format);
   116e6:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   116e8:	f7ff fafc 	bl	10ce4 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
   116ec:	2200      	movs	r2, #0
   116ee:	9b02      	ldr	r3, [sp, #8]
   116f0:	701a      	strb	r2, [r3, #0]
	return r;
}
   116f2:	b004      	add	sp, #16
   116f4:	f85d eb04 	ldr.w	lr, [sp], #4
   116f8:	b003      	add	sp, #12
   116fa:	4770      	bx	lr
   116fc:	00024a5f 	.word	0x00024a5f

00011700 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   11700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11702:	4e09      	ldr	r6, [pc, #36]	; (11728 <net_if_init+0x28>)

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   11704:	2400      	movs	r4, #0
   11706:	4637      	mov	r7, r6
   11708:	4d08      	ldr	r5, [pc, #32]	; (1172c <net_if_init+0x2c>)
   1170a:	1bad      	subs	r5, r5, r6
   1170c:	42ac      	cmp	r4, r5
   1170e:	eb06 0004 	add.w	r0, r6, r4
   11712:	d100      	bne.n	11716 <net_if_init+0x16>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   11714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   11716:	593b      	ldr	r3, [r7, r4]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   11718:	681b      	ldr	r3, [r3, #0]
   1171a:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
   1171c:	b113      	cbz	r3, 11724 <net_if_init+0x24>
   1171e:	681b      	ldr	r3, [r3, #0]
   11720:	b103      	cbz	r3, 11724 <net_if_init+0x24>
	api->init(iface);
   11722:	4798      	blx	r3
   11724:	3420      	adds	r4, #32
   11726:	e7f1      	b.n	1170c <net_if_init+0xc>
   11728:	2002d5c0 	.word	0x2002d5c0
   1172c:	2002d5e0 	.word	0x2002d5e0

00011730 <net_if_post_init>:

void net_if_post_init(void)
{
   11730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11732:	4e0a      	ldr	r6, [pc, #40]	; (1175c <net_if_post_init+0x2c>)
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   11734:	2400      	movs	r4, #0
   11736:	4637      	mov	r7, r6
   11738:	4d09      	ldr	r5, [pc, #36]	; (11760 <net_if_post_init+0x30>)
   1173a:	1bad      	subs	r5, r5, r6
   1173c:	42ac      	cmp	r4, r5
   1173e:	eb04 0306 	add.w	r3, r4, r6
   11742:	d100      	bne.n	11746 <net_if_post_init+0x16>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   11744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return atomic_test_bit(iface->if_dev->flags, value);
   11746:	5938      	ldr	r0, [r7, r4]
   11748:	2103      	movs	r1, #3
   1174a:	300c      	adds	r0, #12
   1174c:	f013 f9a3 	bl	24a96 <atomic_test_bit>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   11750:	b910      	cbnz	r0, 11758 <net_if_post_init+0x28>
			net_if_up(iface);
   11752:	4618      	mov	r0, r3
   11754:	f013 f9a5 	bl	24aa2 <net_if_up>
   11758:	3420      	adds	r4, #32
   1175a:	e7ef      	b.n	1173c <net_if_post_init+0xc>
   1175c:	2002d5c0 	.word	0x2002d5c0
   11760:	2002d5e0 	.word	0x2002d5e0

00011764 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	u16_t *w;
	u8_t i, bl, bh, longest = 1U;
	s8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   11764:	2300      	movs	r3, #0
{
   11766:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	u16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   1176a:	2802      	cmp	r0, #2
{
   1176c:	b087      	sub	sp, #28
   1176e:	4682      	mov	sl, r0
   11770:	468b      	mov	fp, r1
   11772:	4691      	mov	r9, r2
	unsigned char zeros[8] = { 0 };
   11774:	e9cd 3304 	strd	r3, r3, [sp, #16]
	if (family == AF_INET6) {
   11778:	d13f      	bne.n	117fa <z_impl_net_addr_ntop+0x96>
		addr6 = (struct in6_addr *)src;
		w = (u16_t *)addr6->s6_addr16;
   1177a:	9103      	str	r1, [sp, #12]
   1177c:	a904      	add	r1, sp, #16
   1177e:	b2dc      	uxtb	r4, r3
{
   11780:	2200      	movs	r2, #0
   11782:	e007      	b.n	11794 <z_impl_net_addr_ntop+0x30>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   11784:	7808      	ldrb	r0, [r1, #0]
   11786:	3201      	adds	r2, #1
   11788:	3001      	adds	r0, #1
   1178a:	7008      	strb	r0, [r1, #0]
			for (j = i; j < 8; j++) {
   1178c:	18a0      	adds	r0, r4, r2
   1178e:	b2c0      	uxtb	r0, r0
   11790:	2807      	cmp	r0, #7
   11792:	d804      	bhi.n	1179e <z_impl_net_addr_ntop+0x3a>
				if (UNALIGNED_GET(&w[j]) != 0) {
   11794:	1898      	adds	r0, r3, r2
   11796:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
   1179a:	2800      	cmp	r0, #0
   1179c:	d0f2      	beq.n	11784 <z_impl_net_addr_ntop+0x20>
   1179e:	3301      	adds	r3, #1
		for (i = 0U; i < 8; i++) {
   117a0:	2b08      	cmp	r3, #8
   117a2:	f101 0101 	add.w	r1, r1, #1
   117a6:	d1ea      	bne.n	1177e <z_impl_net_addr_ntop+0x1a>
   117a8:	2300      	movs	r3, #0
	s8_t pos = -1;
   117aa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1U;
   117ae:	f04f 0801 	mov.w	r8, #1
			}
		}

		for (i = 0U; i < 8; i++) {
			if (zeros[i] > longest) {
   117b2:	aa04      	add	r2, sp, #16
   117b4:	5cd2      	ldrb	r2, [r2, r3]
   117b6:	4542      	cmp	r2, r8
				longest = zeros[i];
				pos = i;
   117b8:	bf88      	it	hi
   117ba:	b25f      	sxtbhi	r7, r3
   117bc:	f103 0301 	add.w	r3, r3, #1
   117c0:	bf88      	it	hi
   117c2:	4690      	movhi	r8, r2
		for (i = 0U; i < 8; i++) {
   117c4:	2b08      	cmp	r3, #8
   117c6:	d1f4      	bne.n	117b2 <z_impl_net_addr_ntop+0x4e>
		len = 8;
   117c8:	9302      	str	r3, [sp, #8]
   117ca:	f1b8 0f01 	cmp.w	r8, #1
   117ce:	f04f 033a 	mov.w	r3, #58	; 0x3a
   117d2:	bf08      	it	eq
   117d4:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff
   117d8:	9301      	str	r3, [sp, #4]
	bool needcolon = false;
   117da:	2200      	movs	r2, #0
	char *ptr = dst;
   117dc:	464c      	mov	r4, r9
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   117de:	4616      	mov	r6, r2
   117e0:	9b02      	ldr	r3, [sp, #8]
   117e2:	429e      	cmp	r6, r3
   117e4:	db19      	blt.n	1181a <z_impl_net_addr_ntop+0xb6>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   117e6:	454c      	cmp	r4, r9
   117e8:	d009      	beq.n	117fe <z_impl_net_addr_ntop+0x9a>
   117ea:	2300      	movs	r3, #0
		return NULL;
	}

	if (family == AF_INET) {
   117ec:	f1ba 0f01 	cmp.w	sl, #1
		*(ptr - 1) = '\0';
   117f0:	bf0c      	ite	eq
   117f2:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   117f6:	7023      	strbne	r3, [r4, #0]
   117f8:	e003      	b.n	11802 <z_impl_net_addr_ntop+0x9e>
	} else if (family == AF_INET) {
   117fa:	2801      	cmp	r0, #1
   117fc:	d005      	beq.n	1180a <z_impl_net_addr_ntop+0xa6>
		return NULL;
   117fe:	f04f 0900 	mov.w	r9, #0
	}

	return dst;
}
   11802:	4648      	mov	r0, r9
   11804:	b007      	add	sp, #28
   11806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   1180a:	232e      	movs	r3, #46	; 0x2e
   1180c:	2604      	movs	r6, #4
	s8_t pos = -1;
   1180e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
		delim = '.';
   11812:	e9cd 3601 	strd	r3, r6, [sp, #4]
	u8_t i, bl, bh, longest = 1U;
   11816:	4680      	mov	r8, r0
   11818:	e7df      	b.n	117da <z_impl_net_addr_ntop+0x76>
		if (len == 4) {
   1181a:	9b02      	ldr	r3, [sp, #8]
   1181c:	2b04      	cmp	r3, #4
   1181e:	d12d      	bne.n	1187c <z_impl_net_addr_ntop+0x118>
			value = (u32_t)addr->s4_addr[i];
   11820:	f81b 1006 	ldrb.w	r1, [fp, r6]
			if (value == 0U) {
   11824:	b949      	cbnz	r1, 1183a <z_impl_net_addr_ntop+0xd6>
				*ptr++ = '0';
   11826:	2330      	movs	r3, #48	; 0x30
   11828:	4620      	mov	r0, r4
   1182a:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   1182e:	9b01      	ldr	r3, [sp, #4]
   11830:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   11832:	3601      	adds	r6, #1
   11834:	b2f6      	uxtb	r6, r6
   11836:	4604      	mov	r4, r0
   11838:	e7d2      	b.n	117e0 <z_impl_net_addr_ntop+0x7c>
			l = net_value_to_udec(ptr, value, 0);
   1183a:	4623      	mov	r3, r4
   1183c:	2009      	movs	r0, #9
   1183e:	f04f 0e00 	mov.w	lr, #0
   11842:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 11904 <z_impl_net_addr_ntop+0x1a0>
		temp = value / divisor;
   11846:	fbb1 f5fc 	udiv	r5, r1, ip
		if ((precision > i) || (temp != 0)) {
   1184a:	4586      	cmp	lr, r0
		value = value % divisor;
   1184c:	fb0c 1115 	mls	r1, ip, r5, r1
		if ((precision > i) || (temp != 0)) {
   11850:	dc00      	bgt.n	11854 <z_impl_net_addr_ntop+0xf0>
   11852:	b11d      	cbz	r5, 1185c <z_impl_net_addr_ntop+0xf8>
			*buf++ = (char) (temp + '0');
   11854:	4686      	mov	lr, r0
   11856:	3530      	adds	r5, #48	; 0x30
   11858:	701d      	strb	r5, [r3, #0]
   1185a:	3301      	adds	r3, #1
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   1185c:	250a      	movs	r5, #10
   1185e:	3801      	subs	r0, #1
   11860:	fbbc fcf5 	udiv	ip, ip, r5
   11864:	1c45      	adds	r5, r0, #1
   11866:	d1ee      	bne.n	11846 <z_impl_net_addr_ntop+0xe2>
	*buf = 0;
   11868:	f04f 0100 	mov.w	r1, #0
   1186c:	7019      	strb	r1, [r3, #0]
	return buf - start;
   1186e:	1b1b      	subs	r3, r3, r4
			ptr += l;
   11870:	b2db      	uxtb	r3, r3
			*ptr++ = delim;
   11872:	9901      	ldr	r1, [sp, #4]
			ptr += l;
   11874:	18e0      	adds	r0, r4, r3
			*ptr++ = delim;
   11876:	3001      	adds	r0, #1
   11878:	54e1      	strb	r1, [r4, r3]
			continue;
   1187a:	e7da      	b.n	11832 <z_impl_net_addr_ntop+0xce>
		if (i == pos) {
   1187c:	42b7      	cmp	r7, r6
   1187e:	d10e      	bne.n	1189e <z_impl_net_addr_ntop+0x13a>
			if (needcolon || i == 0U) {
   11880:	b902      	cbnz	r2, 11884 <z_impl_net_addr_ntop+0x120>
   11882:	b91f      	cbnz	r7, 1188c <z_impl_net_addr_ntop+0x128>
				*ptr++ = ':';
   11884:	233a      	movs	r3, #58	; 0x3a
   11886:	3401      	adds	r4, #1
   11888:	f804 3c01 	strb.w	r3, [r4, #-1]
			*ptr++ = ':';
   1188c:	233a      	movs	r3, #58	; 0x3a
   1188e:	7023      	strb	r3, [r4, #0]
			i += longest - 1U;
   11890:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   11894:	441e      	add	r6, r3
			*ptr++ = ':';
   11896:	1c60      	adds	r0, r4, #1
			i += longest - 1U;
   11898:	b2f6      	uxtb	r6, r6
			needcolon = false;
   1189a:	2200      	movs	r2, #0
			continue;
   1189c:	e7c9      	b.n	11832 <z_impl_net_addr_ntop+0xce>
		if (needcolon) {
   1189e:	b11a      	cbz	r2, 118a8 <z_impl_net_addr_ntop+0x144>
			*ptr++ = ':';
   118a0:	233a      	movs	r3, #58	; 0x3a
   118a2:	3401      	adds	r4, #1
   118a4:	f804 3c01 	strb.w	r3, [r4, #-1]
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   118a8:	9b03      	ldr	r3, [sp, #12]
   118aa:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
   118ae:	021d      	lsls	r5, r3, #8
   118b0:	ea45 2513 	orr.w	r5, r5, r3, lsr #8
   118b4:	b22d      	sxth	r5, r5
		bh = value >> 8;
   118b6:	f3c5 2307 	ubfx	r3, r5, #8, #8
		bl = value & 0xff;
   118ba:	b2ed      	uxtb	r5, r5
		if (bh) {
   118bc:	b1ab      	cbz	r3, 118ea <z_impl_net_addr_ntop+0x186>
			if (bh > 0x0f) {
   118be:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   118c0:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   118c2:	d90b      	bls.n	118dc <z_impl_net_addr_ntop+0x178>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   118c4:	2300      	movs	r3, #0
   118c6:	2261      	movs	r2, #97	; 0x61
   118c8:	4620      	mov	r0, r4
   118ca:	f013 f919 	bl	24b00 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   118ce:	2301      	movs	r3, #1
   118d0:	2261      	movs	r2, #97	; 0x61
   118d2:	4629      	mov	r1, r5
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   118d4:	f013 f914 	bl	24b00 <net_byte_to_hex>
		needcolon = true;
   118d8:	2201      	movs	r2, #1
   118da:	e7aa      	b.n	11832 <z_impl_net_addr_ntop+0xce>
				if (bh < 10) {
   118dc:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   118de:	bf94      	ite	ls
   118e0:	3130      	addls	r1, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   118e2:	3157      	addhi	r1, #87	; 0x57
   118e4:	1c60      	adds	r0, r4, #1
   118e6:	7021      	strb	r1, [r4, #0]
   118e8:	e7f1      	b.n	118ce <z_impl_net_addr_ntop+0x16a>
		} else if (bl > 0x0f) {
   118ea:	2d0f      	cmp	r5, #15
   118ec:	d903      	bls.n	118f6 <z_impl_net_addr_ntop+0x192>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   118ee:	2261      	movs	r2, #97	; 0x61
   118f0:	4629      	mov	r1, r5
   118f2:	4620      	mov	r0, r4
   118f4:	e7ee      	b.n	118d4 <z_impl_net_addr_ntop+0x170>
			if (bl < 10) {
   118f6:	2d09      	cmp	r5, #9
				*ptr++ = (char)(bl + '0');
   118f8:	bf94      	ite	ls
   118fa:	3530      	addls	r5, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   118fc:	3557      	addhi	r5, #87	; 0x57
   118fe:	1c60      	adds	r0, r4, #1
   11900:	7025      	strb	r5, [r4, #0]
   11902:	e7e9      	b.n	118d8 <z_impl_net_addr_ntop+0x174>
   11904:	3b9aca00 	.word	0x3b9aca00

00011908 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   11908:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1190a:	4b09      	ldr	r3, [pc, #36]	; (11930 <gpio_nrfx_init+0x28>)
   1190c:	781a      	ldrb	r2, [r3, #0]
   1190e:	b96a      	cbnz	r2, 1192c <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   11910:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   11912:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   11914:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   11916:	2105      	movs	r1, #5
   11918:	f7fe fb26 	bl	ff68 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
   1191c:	2031      	movs	r0, #49	; 0x31
   1191e:	f7fe fb13 	bl	ff48 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   11922:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   11926:	4b03      	ldr	r3, [pc, #12]	; (11934 <gpio_nrfx_init+0x2c>)
   11928:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1192c:	2000      	movs	r0, #0
   1192e:	bd08      	pop	{r3, pc}
   11930:	200273c1 	.word	0x200273c1
   11934:	40031000 	.word	0x40031000

00011938 <gpiote_pin_int_cfg>:
{
   11938:	b5f0      	push	{r4, r5, r6, r7, lr}
	return port->config->config_info;
   1193a:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
   1193c:	6882      	ldr	r2, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1193e:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   11940:	4c4d      	ldr	r4, [pc, #308]	; (11a78 <gpiote_pin_int_cfg+0x140>)
   11942:	7918      	ldrb	r0, [r3, #4]
   11944:	f001 031f 	and.w	r3, r1, #31
   11948:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1194c:	2000      	movs	r0, #0
   1194e:	f8d4 5304 	ldr.w	r5, [r4, #772]	; 0x304
   11952:	b2ed      	uxtb	r5, r5
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   11954:	f500 76a2 	add.w	r6, r0, #324	; 0x144
   11958:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   1195c:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   11960:	42b3      	cmp	r3, r6
   11962:	d169      	bne.n	11a38 <gpiote_pin_int_cfg+0x100>
		    && (intenset & BIT(i))) {
   11964:	fa25 f600 	lsr.w	r6, r5, r0
   11968:	07f6      	lsls	r6, r6, #31
   1196a:	d565      	bpl.n	11a38 <gpiote_pin_int_cfg+0x100>
   1196c:	0085      	lsls	r5, r0, #2
   1196e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   11972:	f505 3544 	add.w	r5, r5, #200704	; 0x31000
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   11976:	f8d5 6510 	ldr.w	r6, [r5, #1296]	; 0x510
   1197a:	f026 0601 	bic.w	r6, r6, #1
   1197e:	f8c5 6510 	str.w	r6, [r5, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   11982:	2501      	movs	r5, #1
   11984:	fa05 f000 	lsl.w	r0, r5, r0
    p_reg->INTENCLR = mask;
   11988:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   1198c:	4d3b      	ldr	r5, [pc, #236]	; (11a7c <gpiote_pin_int_cfg+0x144>)
   1198e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   11992:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   11996:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1199a:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   1199e:	6890      	ldr	r0, [r2, #8]
   119a0:	40c8      	lsrs	r0, r1
   119a2:	f010 0001 	ands.w	r0, r0, #1
   119a6:	d046      	beq.n	11a36 <gpiote_pin_int_cfg+0xfe>
   119a8:	68d0      	ldr	r0, [r2, #12]
   119aa:	40c8      	lsrs	r0, r1
   119ac:	f010 0001 	ands.w	r0, r0, #1
   119b0:	d041      	beq.n	11a36 <gpiote_pin_int_cfg+0xfe>
		if (data->trig_edge & BIT(pin)) {
   119b2:	6950      	ldr	r0, [r2, #20]
   119b4:	40c8      	lsrs	r0, r1
   119b6:	f010 0001 	ands.w	r0, r0, #1
   119ba:	d049      	beq.n	11a50 <gpiote_pin_int_cfg+0x118>
			if (data->double_edge & BIT(pin)) {
   119bc:	6990      	ldr	r0, [r2, #24]
   119be:	40c8      	lsrs	r0, r1
   119c0:	07c0      	lsls	r0, r0, #31
   119c2:	d43d      	bmi.n	11a40 <gpiote_pin_int_cfg+0x108>
			} else if (((data->active_level & BIT(pin)) != 0U)
   119c4:	6910      	ldr	r0, [r2, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   119c6:	69d2      	ldr	r2, [r2, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   119c8:	40c8      	lsrs	r0, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   119ca:	fa22 f101 	lsr.w	r1, r2, r1
			} else if (((data->active_level & BIT(pin)) != 0U)
   119ce:	f000 0001 	and.w	r0, r0, #1
   119d2:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
   119d6:	4288      	cmp	r0, r1
   119d8:	bf0c      	ite	eq
   119da:	2102      	moveq	r1, #2
   119dc:	2101      	movne	r1, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   119de:	2500      	movs	r5, #0
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   119e0:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   119e4:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   119e8:	f010 0003 	ands.w	r0, r0, #3
   119ec:	d12a      	bne.n	11a44 <gpiote_pin_int_cfg+0x10c>
			nrf_gpiote_event_t evt =
   119ee:	00af      	lsls	r7, r5, #2
   119f0:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
   119f4:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   119f8:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   119fc:	021b      	lsls	r3, r3, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   119fe:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
   11a02:	f426 7640 	bic.w	r6, r6, #768	; 0x300
   11a06:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   11a0a:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
   11a0e:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
   11a12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    return ((uint32_t)p_reg + event);
   11a16:	4b1a      	ldr	r3, [pc, #104]	; (11a80 <gpiote_pin_int_cfg+0x148>)
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   11a18:	4331      	orrs	r1, r6
   11a1a:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   11a1e:	51d8      	str	r0, [r3, r7]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   11a20:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   11a24:	f043 0301 	orr.w	r3, r3, #1
   11a28:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   11a2c:	2301      	movs	r3, #1
   11a2e:	fa03 f505 	lsl.w	r5, r3, r5
    p_reg->INTENSET = mask;
   11a32:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
}
   11a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   11a38:	3001      	adds	r0, #1
   11a3a:	2808      	cmp	r0, #8
   11a3c:	d18a      	bne.n	11954 <gpiote_pin_int_cfg+0x1c>
   11a3e:	e7a5      	b.n	1198c <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   11a40:	2103      	movs	r1, #3
   11a42:	e7cc      	b.n	119de <gpiote_pin_int_cfg+0xa6>
   11a44:	3501      	adds	r5, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   11a46:	2d08      	cmp	r5, #8
   11a48:	d1ca      	bne.n	119e0 <gpiote_pin_int_cfg+0xa8>
	return -ENODEV;
   11a4a:	f06f 0012 	mvn.w	r0, #18
   11a4e:	e7f2      	b.n	11a36 <gpiote_pin_int_cfg+0xfe>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   11a50:	6913      	ldr	r3, [r2, #16]
   11a52:	69d2      	ldr	r2, [r2, #28]
   11a54:	4053      	eors	r3, r2
   11a56:	fa23 f101 	lsr.w	r1, r3, r1
		return NRF_GPIO_PIN_SENSE_HIGH;
   11a5a:	f011 0f01 	tst.w	r1, #1
   11a5e:	bf14      	ite	ne
   11a60:	f44f 3200 	movne.w	r2, #131072	; 0x20000
   11a64:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   11a68:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   11a6c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11a70:	4313      	orrs	r3, r2
   11a72:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
   11a76:	e7de      	b.n	11a36 <gpiote_pin_int_cfg+0xfe>
   11a78:	40031000 	.word	0x40031000
   11a7c:	40842500 	.word	0x40842500
   11a80:	40031100 	.word	0x40031100

00011a84 <gpio_nrfx_config>:
{
   11a84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a88:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   11a8a:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   11a8c:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   11a90:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   11a94:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   11a96:	d049      	beq.n	11b2c <gpio_nrfx_config+0xa8>
   11a98:	dc2c      	bgt.n	11af4 <gpio_nrfx_config+0x70>
   11a9a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   11a9e:	d03d      	beq.n	11b1c <gpio_nrfx_config+0x98>
   11aa0:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   11aa4:	d03e      	beq.n	11b24 <gpio_nrfx_config+0xa0>
   11aa6:	bb60      	cbnz	r0, 11b02 <gpio_nrfx_config+0x7e>
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   11aa8:	f406 7740 	and.w	r7, r6, #768	; 0x300
   11aac:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   11ab0:	d03e      	beq.n	11b30 <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_PULLUP;
   11ab2:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   11ab6:	4263      	negs	r3, r4
   11ab8:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   11aba:	2901      	cmp	r1, #1
		from_pin = pin;
   11abc:	bf19      	ittee	ne
   11abe:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
   11ac0:	46a1      	movne	r9, r4
		to_pin   = 31U;
   11ac2:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   11ac6:	2400      	moveq	r4, #0
   11ac8:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   11acc:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   11ad0:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   11ad4:	ea47 070c 	orr.w	r7, r7, ip
   11ad8:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11adc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 11ba8 <gpio_nrfx_config+0x124>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   11ae0:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   11ae4:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   11ae8:	45a1      	cmp	r9, r4
   11aea:	d223      	bcs.n	11b34 <gpio_nrfx_config+0xb0>
	return 0;
   11aec:	2000      	movs	r0, #0
}
   11aee:	b003      	add	sp, #12
   11af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   11af4:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   11af8:	d016      	beq.n	11b28 <gpio_nrfx_config+0xa4>
   11afa:	dc05      	bgt.n	11b08 <gpio_nrfx_config+0x84>
   11afc:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   11b00:	d00e      	beq.n	11b20 <gpio_nrfx_config+0x9c>
		return -EINVAL;
   11b02:	f06f 0015 	mvn.w	r0, #21
   11b06:	e7f2      	b.n	11aee <gpio_nrfx_config+0x6a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   11b08:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   11b0c:	d004      	beq.n	11b18 <gpio_nrfx_config+0x94>
   11b0e:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   11b12:	d1f6      	bne.n	11b02 <gpio_nrfx_config+0x7e>
		drive = NRF_GPIO_PIN_H0D1;
   11b14:	2007      	movs	r0, #7
		break;
   11b16:	e7c7      	b.n	11aa8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0D1;
   11b18:	2006      	movs	r0, #6
		break;
   11b1a:	e7c5      	b.n	11aa8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0S1;
   11b1c:	2001      	movs	r0, #1
		break;
   11b1e:	e7c3      	b.n	11aa8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   11b20:	2003      	movs	r0, #3
		break;
   11b22:	e7c1      	b.n	11aa8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0S1;
   11b24:	2004      	movs	r0, #4
		break;
   11b26:	e7bf      	b.n	11aa8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0H1;
   11b28:	2005      	movs	r0, #5
		break;
   11b2a:	e7bd      	b.n	11aa8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0H1;
   11b2c:	2002      	movs	r0, #2
   11b2e:	e7bb      	b.n	11aa8 <gpio_nrfx_config+0x24>
		pull = NRF_GPIO_PIN_PULLUP;
   11b30:	2303      	movs	r3, #3
   11b32:	e7c2      	b.n	11aba <gpio_nrfx_config+0x36>
	return port->config->config_info;
   11b34:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   11b38:	6892      	ldr	r2, [r2, #8]
   11b3a:	7911      	ldrb	r1, [r2, #4]
   11b3c:	f004 021f 	and.w	r2, r4, #31
   11b40:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11b44:	3280      	adds	r2, #128	; 0x80
   11b46:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
   11b4a:	68a9      	ldr	r1, [r5, #8]
   11b4c:	fa0b f204 	lsl.w	r2, fp, r4
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   11b50:	2b00      	cmp	r3, #0
   11b52:	d025      	beq.n	11ba0 <gpio_nrfx_config+0x11c>
   11b54:	4311      	orrs	r1, r2
   11b56:	60a9      	str	r1, [r5, #8]
   11b58:	6969      	ldr	r1, [r5, #20]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   11b5a:	06b0      	lsls	r0, r6, #26
   11b5c:	bf4c      	ite	mi
   11b5e:	4311      	orrmi	r1, r2
   11b60:	4391      	bicpl	r1, r2
   11b62:	6169      	str	r1, [r5, #20]
   11b64:	69a9      	ldr	r1, [r5, #24]
		WRITE_BIT(data->double_edge, curr_pin,
   11b66:	0670      	lsls	r0, r6, #25
   11b68:	bf4c      	ite	mi
   11b6a:	4311      	orrmi	r1, r2
   11b6c:	4391      	bicpl	r1, r2
   11b6e:	61a9      	str	r1, [r5, #24]
   11b70:	6929      	ldr	r1, [r5, #16]
		WRITE_BIT(data->active_level, curr_pin,
   11b72:	0770      	lsls	r0, r6, #29
   11b74:	bf4c      	ite	mi
   11b76:	4311      	orrmi	r1, r2
   11b78:	4391      	bicpl	r1, r2
   11b7a:	6129      	str	r1, [r5, #16]
   11b7c:	69e9      	ldr	r1, [r5, #28]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   11b7e:	0630      	lsls	r0, r6, #24
   11b80:	bf4c      	ite	mi
   11b82:	430a      	orrmi	r2, r1
   11b84:	ea21 0202 	bicpl.w	r2, r1, r2
   11b88:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   11b8a:	4621      	mov	r1, r4
   11b8c:	4640      	mov	r0, r8
   11b8e:	9301      	str	r3, [sp, #4]
   11b90:	f7ff fed2 	bl	11938 <gpiote_pin_int_cfg>
		if (res != 0) {
   11b94:	2800      	cmp	r0, #0
   11b96:	d1aa      	bne.n	11aee <gpio_nrfx_config+0x6a>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   11b98:	3401      	adds	r4, #1
   11b9a:	b2e4      	uxtb	r4, r4
   11b9c:	9b01      	ldr	r3, [sp, #4]
   11b9e:	e7a3      	b.n	11ae8 <gpio_nrfx_config+0x64>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   11ba0:	ea21 0102 	bic.w	r1, r1, r2
   11ba4:	e7d7      	b.n	11b56 <gpio_nrfx_config+0xd2>
   11ba6:	bf00      	nop
   11ba8:	40842500 	.word	0x40842500

00011bac <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11bac:	494e      	ldr	r1, [pc, #312]	; (11ce8 <gpiote_event_handler+0x13c>)
{
   11bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11bb2:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
   11bb4:	2d00      	cmp	r5, #0
   11bb6:	d061      	beq.n	11c7c <gpiote_event_handler+0xd0>
	struct gpio_nrfx_data *data = get_port_data(port);
   11bb8:	4b4c      	ldr	r3, [pc, #304]	; (11cec <gpiote_event_handler+0x140>)
	u32_t pin = 0U;
   11bba:	2600      	movs	r6, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   11bbc:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
   11bbe:	681b      	ldr	r3, [r3, #0]
   11bc0:	f8df e134 	ldr.w	lr, [pc, #308]	; 11cf8 <gpiote_event_handler+0x14c>
   11bc4:	689f      	ldr	r7, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   11bc6:	e9d2 0302 	ldrd	r0, r3, [r2, #8]
   11bca:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
   11bcc:	e9d2 0405 	ldrd	r0, r4, [r2, #20]
   11bd0:	4320      	orrs	r0, r4
   11bd2:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   11bd6:	6838      	ldr	r0, [r7, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   11bd8:	69d4      	ldr	r4, [r2, #28]
   11bda:	6912      	ldr	r2, [r2, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   11bdc:	6900      	ldr	r0, [r0, #16]
   11bde:	4054      	eors	r4, r2
   11be0:	4044      	eors	r4, r0
	u32_t bit = 1U << pin;
   11be2:	2001      	movs	r0, #1
	u32_t out = pin_states & level_pins;
   11be4:	ea23 0404 	bic.w	r4, r3, r4
	while (level_pins) {
   11be8:	bb9b      	cbnz	r3, 11c52 <gpiote_event_handler+0xa6>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   11bea:	600b      	str	r3, [r1, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   11bec:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   11bee:	2601      	movs	r6, #1
   11bf0:	469c      	mov	ip, r3
    return p_reg->INTENSET & mask;
   11bf2:	483f      	ldr	r0, [pc, #252]	; (11cf0 <gpiote_event_handler+0x144>)
   11bf4:	4f3f      	ldr	r7, [pc, #252]	; (11cf4 <gpiote_event_handler+0x148>)
   11bf6:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   11bfa:	fa06 f103 	lsl.w	r1, r6, r3
   11bfe:	4211      	tst	r1, r2
   11c00:	d00e      	beq.n	11c20 <gpiote_event_handler+0x74>
   11c02:	19d9      	adds	r1, r3, r7
   11c04:	0089      	lsls	r1, r1, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11c06:	680a      	ldr	r2, [r1, #0]
   11c08:	b152      	cbz	r2, 11c20 <gpiote_event_handler+0x74>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   11c0a:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   11c0e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   11c12:	f8c1 c000 	str.w	ip, [r1]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   11c16:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   11c1a:	fa06 f202 	lsl.w	r2, r6, r2
   11c1e:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   11c20:	3301      	adds	r3, #1
   11c22:	2b08      	cmp	r3, #8
   11c24:	d1e7      	bne.n	11bf6 <gpiote_event_handler+0x4a>
	if (fired_triggers[0]) {
   11c26:	b35c      	cbz	r4, 11c80 <gpiote_event_handler+0xd4>
	struct gpio_nrfx_data *data = get_port_data(port);
   11c28:	4f30      	ldr	r7, [pc, #192]	; (11cec <gpiote_event_handler+0x140>)
   11c2a:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   11c2e:	f8d8 1000 	ldr.w	r1, [r8]
   11c32:	b329      	cbz	r1, 11c80 <gpiote_event_handler+0xd4>

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   11c34:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
   11c36:	f8d8 300c 	ldr.w	r3, [r8, #12]
   11c3a:	688a      	ldr	r2, [r1, #8]
   11c3c:	4023      	ands	r3, r4
   11c3e:	4213      	tst	r3, r2
   11c40:	d003      	beq.n	11c4a <gpiote_event_handler+0x9e>
			cb->handler(port, cb, pins);
   11c42:	684b      	ldr	r3, [r1, #4]
   11c44:	4622      	mov	r2, r4
   11c46:	4638      	mov	r0, r7
   11c48:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   11c4a:	b1ce      	cbz	r6, 11c80 <gpiote_event_handler+0xd4>
   11c4c:	4631      	mov	r1, r6
   11c4e:	6836      	ldr	r6, [r6, #0]
   11c50:	e7f1      	b.n	11c36 <gpiote_event_handler+0x8a>
		if (level_pins & bit) {
   11c52:	4203      	tst	r3, r0
   11c54:	d00f      	beq.n	11c76 <gpiote_event_handler+0xca>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11c56:	f897 c004 	ldrb.w	ip, [r7, #4]
   11c5a:	f006 021f 	and.w	r2, r6, #31
   11c5e:	ea42 124c 	orr.w	r2, r2, ip, lsl #5
   11c62:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   11c66:	f8d2 c200 	ldr.w	ip, [r2, #512]	; 0x200
			level_pins &= ~bit;
   11c6a:	ea23 0300 	bic.w	r3, r3, r0
   11c6e:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11c72:	f8c2 c200 	str.w	ip, [r2, #512]	; 0x200
		++pin;
   11c76:	3601      	adds	r6, #1
		bit <<= 1;
   11c78:	0040      	lsls	r0, r0, #1
   11c7a:	e7b5      	b.n	11be8 <gpiote_event_handler+0x3c>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   11c7c:	462c      	mov	r4, r5
   11c7e:	e7b5      	b.n	11bec <gpiote_event_handler+0x40>
	if (port_event) {
   11c80:	b185      	cbz	r5, 11ca4 <gpiote_event_handler+0xf8>
	u32_t bit = 1U << pin;
   11c82:	2401      	movs	r4, #1
	u32_t pin = 0U;
   11c84:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   11c86:	4b19      	ldr	r3, [pc, #100]	; (11cec <gpiote_event_handler+0x140>)
   11c88:	f8df c06c 	ldr.w	ip, [pc, #108]	; 11cf8 <gpiote_event_handler+0x14c>
   11c8c:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
   11c8e:	681b      	ldr	r3, [r3, #0]
   11c90:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   11c92:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
   11c96:	400b      	ands	r3, r1
	out &= ~data->trig_edge & ~data->double_edge;
   11c98:	e9d2 1005 	ldrd	r1, r0, [r2, #20]
   11c9c:	4301      	orrs	r1, r0
   11c9e:	ea23 0301 	bic.w	r3, r3, r1
	while (level_pins) {
   11ca2:	b90b      	cbnz	r3, 11ca8 <gpiote_event_handler+0xfc>
}
   11ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   11ca8:	421c      	tst	r4, r3
   11caa:	d01a      	beq.n	11ce2 <gpiote_event_handler+0x136>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11cac:	7930      	ldrb	r0, [r6, #4]
   11cae:	f005 011f 	and.w	r1, r5, #31
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   11cb2:	69d7      	ldr	r7, [r2, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11cb4:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   11cb8:	6910      	ldr	r0, [r2, #16]
   11cba:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
   11cbe:	4078      	eors	r0, r7
   11cc0:	40e8      	lsrs	r0, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   11cc2:	f010 0f01 	tst.w	r0, #1
   11cc6:	bf14      	ite	ne
   11cc8:	f44f 3700 	movne.w	r7, #131072	; 0x20000
   11ccc:	f44f 3740 	moveq.w	r7, #196608	; 0x30000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   11cd0:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
			level_pins &= ~bit;
   11cd4:	ea23 0304 	bic.w	r3, r3, r4
   11cd8:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11cdc:	4338      	orrs	r0, r7
   11cde:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
		++pin;
   11ce2:	3501      	adds	r5, #1
		bit <<= 1;
   11ce4:	0064      	lsls	r4, r4, #1
   11ce6:	e7dc      	b.n	11ca2 <gpiote_event_handler+0xf6>
   11ce8:	4003117c 	.word	0x4003117c
   11cec:	2002d4c0 	.word	0x2002d4c0
   11cf0:	40031000 	.word	0x40031000
   11cf4:	1000c440 	.word	0x1000c440
   11cf8:	40842500 	.word	0x40842500

00011cfc <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   11cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   11cfe:	794b      	ldrb	r3, [r1, #5]
   11d00:	2b01      	cmp	r3, #1
   11d02:	d029      	beq.n	11d58 <uarte_nrfx_configure+0x5c>
   11d04:	2b03      	cmp	r3, #3
   11d06:	d124      	bne.n	11d52 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   11d08:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   11d0a:	798b      	ldrb	r3, [r1, #6]
   11d0c:	2b03      	cmp	r3, #3
   11d0e:	d120      	bne.n	11d52 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   11d10:	79cc      	ldrb	r4, [r1, #7]
   11d12:	b12c      	cbz	r4, 11d20 <uarte_nrfx_configure+0x24>
   11d14:	2c01      	cmp	r4, #1
   11d16:	d11c      	bne.n	11d52 <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
   11d18:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   11d1a:	689b      	ldr	r3, [r3, #8]
   11d1c:	791b      	ldrb	r3, [r3, #4]
   11d1e:	b1c3      	cbz	r3, 11d52 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   11d20:	790a      	ldrb	r2, [r1, #4]
   11d22:	b112      	cbz	r2, 11d2a <uarte_nrfx_configure+0x2e>
   11d24:	2a02      	cmp	r2, #2
   11d26:	d114      	bne.n	11d52 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   11d28:	220e      	movs	r2, #14
	switch (baudrate) {
   11d2a:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
   11d2e:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   11d30:	689b      	ldr	r3, [r3, #8]
   11d32:	681d      	ldr	r5, [r3, #0]
	switch (baudrate) {
   11d34:	680b      	ldr	r3, [r1, #0]
   11d36:	42bb      	cmp	r3, r7
   11d38:	d06f      	beq.n	11e1a <uarte_nrfx_configure+0x11e>
   11d3a:	d829      	bhi.n	11d90 <uarte_nrfx_configure+0x94>
   11d3c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   11d40:	d065      	beq.n	11e0e <uarte_nrfx_configure+0x112>
   11d42:	d814      	bhi.n	11d6e <uarte_nrfx_configure+0x72>
   11d44:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   11d48:	d04f      	beq.n	11dea <uarte_nrfx_configure+0xee>
   11d4a:	d807      	bhi.n	11d5c <uarte_nrfx_configure+0x60>
   11d4c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   11d50:	d078      	beq.n	11e44 <uarte_nrfx_configure+0x148>
		return -ENOTSUP;
   11d52:	f06f 0022 	mvn.w	r0, #34	; 0x22
   11d56:	e056      	b.n	11e06 <uarte_nrfx_configure+0x10a>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   11d58:	2600      	movs	r6, #0
   11d5a:	e7d6      	b.n	11d0a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   11d5c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   11d60:	d052      	beq.n	11e08 <uarte_nrfx_configure+0x10c>
   11d62:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   11d66:	d1f4      	bne.n	11d52 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   11d68:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   11d6c:	e03f      	b.n	11dee <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   11d6e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   11d72:	d04e      	beq.n	11e12 <uarte_nrfx_configure+0x116>
   11d74:	d804      	bhi.n	11d80 <uarte_nrfx_configure+0x84>
   11d76:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11d7a:	d1ea      	bne.n	11d52 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   11d7c:	4b33      	ldr	r3, [pc, #204]	; (11e4c <uarte_nrfx_configure+0x150>)
   11d7e:	e036      	b.n	11dee <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   11d80:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   11d84:	d047      	beq.n	11e16 <uarte_nrfx_configure+0x11a>
   11d86:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   11d8a:	d1e2      	bne.n	11d52 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   11d8c:	4b30      	ldr	r3, [pc, #192]	; (11e50 <uarte_nrfx_configure+0x154>)
   11d8e:	e02e      	b.n	11dee <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   11d90:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   11d94:	d04a      	beq.n	11e2c <uarte_nrfx_configure+0x130>
   11d96:	d812      	bhi.n	11dbe <uarte_nrfx_configure+0xc2>
   11d98:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   11d9c:	42bb      	cmp	r3, r7
   11d9e:	d03f      	beq.n	11e20 <uarte_nrfx_configure+0x124>
   11da0:	d805      	bhi.n	11dae <uarte_nrfx_configure+0xb2>
   11da2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   11da6:	d1d4      	bne.n	11d52 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   11da8:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   11dac:	e01f      	b.n	11dee <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   11dae:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   11db2:	d038      	beq.n	11e26 <uarte_nrfx_configure+0x12a>
   11db4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   11db8:	d1cb      	bne.n	11d52 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   11dba:	4b26      	ldr	r3, [pc, #152]	; (11e54 <uarte_nrfx_configure+0x158>)
   11dbc:	e017      	b.n	11dee <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   11dbe:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   11dc2:	d039      	beq.n	11e38 <uarte_nrfx_configure+0x13c>
   11dc4:	d808      	bhi.n	11dd8 <uarte_nrfx_configure+0xdc>
   11dc6:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   11dca:	d032      	beq.n	11e32 <uarte_nrfx_configure+0x136>
   11dcc:	4f22      	ldr	r7, [pc, #136]	; (11e58 <uarte_nrfx_configure+0x15c>)
   11dce:	42bb      	cmp	r3, r7
   11dd0:	d1bf      	bne.n	11d52 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   11dd2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   11dd6:	e00a      	b.n	11dee <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   11dd8:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   11ddc:	d02f      	beq.n	11e3e <uarte_nrfx_configure+0x142>
   11dde:	4f1f      	ldr	r7, [pc, #124]	; (11e5c <uarte_nrfx_configure+0x160>)
   11de0:	42bb      	cmp	r3, r7
   11de2:	d1b6      	bne.n	11d52 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   11de4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   11de8:	e001      	b.n	11dee <uarte_nrfx_configure+0xf2>
		nrf_baudrate = 0x00027000;
   11dea:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   11dee:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   11df2:	ea44 0306 	orr.w	r3, r4, r6
   11df6:	4313      	orrs	r3, r2
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   11df8:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   11dfc:	6883      	ldr	r3, [r0, #8]
   11dfe:	c903      	ldmia	r1, {r0, r1}
   11e00:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   11e04:	2000      	movs	r0, #0
}
   11e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   11e08:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   11e0c:	e7ef      	b.n	11dee <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   11e0e:	4b14      	ldr	r3, [pc, #80]	; (11e60 <uarte_nrfx_configure+0x164>)
   11e10:	e7ed      	b.n	11dee <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   11e12:	4b14      	ldr	r3, [pc, #80]	; (11e64 <uarte_nrfx_configure+0x168>)
   11e14:	e7eb      	b.n	11dee <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   11e16:	4b14      	ldr	r3, [pc, #80]	; (11e68 <uarte_nrfx_configure+0x16c>)
   11e18:	e7e9      	b.n	11dee <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   11e1a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   11e1e:	e7e6      	b.n	11dee <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   11e20:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   11e24:	e7e3      	b.n	11dee <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   11e26:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   11e2a:	e7e0      	b.n	11dee <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   11e2c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   11e30:	e7dd      	b.n	11dee <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   11e32:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   11e36:	e7da      	b.n	11dee <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   11e38:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   11e3c:	e7d7      	b.n	11dee <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   11e3e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   11e42:	e7d4      	b.n	11dee <uarte_nrfx_configure+0xf2>
		nrf_baudrate = 0x00014000;
   11e44:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   11e48:	e7d1      	b.n	11dee <uarte_nrfx_configure+0xf2>
   11e4a:	bf00      	nop
   11e4c:	00275000 	.word	0x00275000
   11e50:	0075c000 	.word	0x0075c000
   11e54:	013a9000 	.word	0x013a9000
   11e58:	0003d090 	.word	0x0003d090
   11e5c:	000f4240 	.word	0x000f4240
   11e60:	0013b000 	.word	0x0013b000
   11e64:	003af000 	.word	0x003af000
   11e68:	004ea000 	.word	0x004ea000

00011e6c <uarte_instance_init.constprop.4>:
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(struct device *dev,
   11e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11e70:	2501      	movs	r5, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11e72:	f04f 0e03 	mov.w	lr, #3
   11e76:	f04f 0c00 	mov.w	ip, #0
	return dev->config->config_info;
   11e7a:	6803      	ldr	r3, [r0, #0]
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_gpio_pin_write(config->pseltxd, 1);
   11e7c:	680a      	ldr	r2, [r1, #0]
	return config->uarte_regs;
   11e7e:	689b      	ldr	r3, [r3, #8]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11e80:	fa05 f702 	lsl.w	r7, r5, r2
   11e84:	681c      	ldr	r4, [r3, #0]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   11e86:	4b1f      	ldr	r3, [pc, #124]	; (11f04 <uarte_instance_init.constprop.4+0x98>)
	struct uarte_nrfx_data *data = get_dev_data(dev);
   11e88:	6886      	ldr	r6, [r0, #8]
   11e8a:	609f      	str	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11e8c:	f102 0780 	add.w	r7, r2, #128	; 0x80
   11e90:	f843 e027 	str.w	lr, [r3, r7, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
   11e94:	684f      	ldr	r7, [r1, #4]
   11e96:	f107 0880 	add.w	r8, r7, #128	; 0x80
   11e9a:	f843 c028 	str.w	ip, [r3, r8, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   11e9e:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   11ea2:	f8c4 7514 	str.w	r7, [r4, #1300]	; 0x514

	nrf_uarte_txrx_pins_set(uarte,
				config->pseltxd,
				config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   11ea6:	688f      	ldr	r7, [r1, #8]
   11ea8:	1c7a      	adds	r2, r7, #1
   11eaa:	d010      	beq.n	11ece <uarte_instance_init.constprop.4+0x62>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   11eac:	68ca      	ldr	r2, [r1, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   11eae:	1c51      	adds	r1, r2, #1
   11eb0:	d00d      	beq.n	11ece <uarte_instance_init.constprop.4+0x62>
   11eb2:	f102 0180 	add.w	r1, r2, #128	; 0x80
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11eb6:	4095      	lsls	r5, r2
    p_reg->OUTSET = set_mask;
   11eb8:	609d      	str	r5, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11eba:	f843 e021 	str.w	lr, [r3, r1, lsl #2]
   11ebe:	f107 0180 	add.w	r1, r7, #128	; 0x80
   11ec2:	f843 c021 	str.w	ip, [r3, r1, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   11ec6:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   11eca:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
		nrf_uarte_hwfc_pins_set(uarte,
					config->pselrts,
					config->pselcts);
	}

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   11ece:	4631      	mov	r1, r6
   11ed0:	f7ff ff14 	bl	11cfc <uarte_nrfx_configure>
	if (err) {
   11ed4:	b9a0      	cbnz	r0, 11f00 <uarte_instance_init.constprop.4+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   11ed6:	2308      	movs	r3, #8
   11ed8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   11edc:	f106 030c 	add.w	r3, r6, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11ee0:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   11ee4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   11ee8:	2301      	movs	r3, #1
		/* Set ENDTX event by requesting fake (zero-length) transfer.
		 * Pointer to RAM variable (data->tx_buffer) is set because
		 * otherwise such operation may result in HardFault or RAM
		 * corruption.
		 */
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   11eea:	68b2      	ldr	r2, [r6, #8]
   11eec:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   11ef0:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11ef2:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   11ef4:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   11ef8:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11efc:	60a3      	str	r3, [r4, #8]
   11efe:	60e3      	str	r3, [r4, #12]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
   11f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11f04:	40842500 	.word	0x40842500

00011f08 <uarte_2_init>:
	#if defined(DT_NORDIC_NRF_UARTE_UART_2_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_2_CTS_PIN)
		#define UARTE_2_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(2);
   11f08:	b530      	push	{r4, r5, lr}
   11f0a:	b085      	sub	sp, #20
   11f0c:	466c      	mov	r4, sp
   11f0e:	4605      	mov	r5, r0
   11f10:	4b08      	ldr	r3, [pc, #32]	; (11f34 <uarte_2_init+0x2c>)
   11f12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   11f14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   11f18:	2200      	movs	r2, #0
   11f1a:	2101      	movs	r1, #1
   11f1c:	200a      	movs	r0, #10
   11f1e:	f7fe f823 	bl	ff68 <z_arm_irq_priority_set>
   11f22:	200a      	movs	r0, #10
   11f24:	f7fe f810 	bl	ff48 <arch_irq_enable>
   11f28:	4621      	mov	r1, r4
   11f2a:	4628      	mov	r0, r5
   11f2c:	f7ff ff9e 	bl	11e6c <uarte_instance_init.constprop.4>
   11f30:	b005      	add	sp, #20
   11f32:	bd30      	pop	{r4, r5, pc}
   11f34:	000265f0 	.word	0x000265f0

00011f38 <uarte_0_init>:
	UART_NRF_UARTE_DEVICE(0);
   11f38:	b530      	push	{r4, r5, lr}
   11f3a:	b085      	sub	sp, #20
   11f3c:	466c      	mov	r4, sp
   11f3e:	4605      	mov	r5, r0
   11f40:	4b08      	ldr	r3, [pc, #32]	; (11f64 <uarte_0_init+0x2c>)
   11f42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   11f44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   11f48:	2200      	movs	r2, #0
   11f4a:	2101      	movs	r1, #1
   11f4c:	2008      	movs	r0, #8
   11f4e:	f7fe f80b 	bl	ff68 <z_arm_irq_priority_set>
   11f52:	2008      	movs	r0, #8
   11f54:	f7fd fff8 	bl	ff48 <arch_irq_enable>
   11f58:	4621      	mov	r1, r4
   11f5a:	4628      	mov	r0, r5
   11f5c:	f7ff ff86 	bl	11e6c <uarte_instance_init.constprop.4>
   11f60:	b005      	add	sp, #20
   11f62:	bd30      	pop	{r4, r5, pc}
   11f64:	00026600 	.word	0x00026600

00011f68 <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   11f68:	2200      	movs	r2, #0
{
   11f6a:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   11f6c:	4611      	mov	r1, r2
   11f6e:	202a      	movs	r0, #42	; 0x2a
   11f70:	f7fd fffa 	bl	ff68 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
   11f74:	f002 faee 	bl	14554 <bsd_init>
   11f78:	4b01      	ldr	r3, [pc, #4]	; (11f80 <_bsdlib_init+0x18>)
   11f7a:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   11f7c:	2000      	movs	r0, #0
   11f7e:	bd08      	pop	{r3, pc}
   11f80:	2002036c 	.word	0x2002036c

00011f84 <thread_monitor_entry_get>:
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   11f84:	2200      	movs	r2, #0
   11f86:	4b0e      	ldr	r3, [pc, #56]	; (11fc0 <thread_monitor_entry_get+0x3c>)
{
   11f88:	b5f0      	push	{r4, r5, r6, r7, lr}
		entry_age = rpc_event_cnt - entry->cnt;
   11f8a:	681c      	ldr	r4, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   11f8c:	4b0d      	ldr	r3, [pc, #52]	; (11fc4 <thread_monitor_entry_get+0x40>)
	int entry_age, oldest_entry_age = 0;
   11f8e:	4616      	mov	r6, r2
   11f90:	461f      	mov	r7, r3
		if (entry->id == id) {
   11f92:	58bd      	ldr	r5, [r7, r2]
   11f94:	18b9      	adds	r1, r7, r2
   11f96:	4285      	cmp	r5, r0
   11f98:	d00d      	beq.n	11fb6 <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   11f9a:	b175      	cbz	r5, 11fba <thread_monitor_entry_get+0x36>
		entry_age = rpc_event_cnt - entry->cnt;
   11f9c:	684d      	ldr	r5, [r1, #4]
   11f9e:	3208      	adds	r2, #8
   11fa0:	1b65      	subs	r5, r4, r5
		if (entry_age > oldest_entry_age) {
   11fa2:	42b5      	cmp	r5, r6
   11fa4:	bfc4      	itt	gt
   11fa6:	462e      	movgt	r6, r5
   11fa8:	460b      	movgt	r3, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   11faa:	2a50      	cmp	r2, #80	; 0x50
   11fac:	d1f1      	bne.n	11f92 <thread_monitor_entry_get+0xe>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
   11fae:	4619      	mov	r1, r3
	new_entry->cnt = rpc_event_cnt - 1;
   11fb0:	3c01      	subs	r4, #1
	new_entry->id = id;
   11fb2:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   11fb4:	605c      	str	r4, [r3, #4]
}
   11fb6:	4608      	mov	r0, r1
   11fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11fba:	460b      	mov	r3, r1
   11fbc:	e7f7      	b.n	11fae <thread_monitor_entry_get+0x2a>
   11fbe:	bf00      	nop
   11fc0:	20020370 	.word	0x20020370
   11fc4:	2002037c 	.word	0x2002037c

00011fc8 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   11fc8:	4668      	mov	r0, sp
   11fca:	f020 0107 	bic.w	r1, r0, #7
   11fce:	468d      	mov	sp, r1
   11fd0:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11fd2:	4b0d      	ldr	r3, [pc, #52]	; (12008 <rpc_proxy_irq_handler+0x40>)
   11fd4:	e8d3 2fef 	ldaex	r2, [r3]
   11fd8:	3201      	adds	r2, #1
   11fda:	e8c3 2fe1 	stlex	r1, r2, [r3]
   11fde:	2900      	cmp	r1, #0
   11fe0:	d1f8      	bne.n	11fd4 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   11fe2:	f00c f9a9 	bl	1e338 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   11fe6:	4b09      	ldr	r3, [pc, #36]	; (1200c <rpc_proxy_irq_handler+0x44>)
   11fe8:	681c      	ldr	r4, [r3, #0]
   11fea:	b124      	cbz	r4, 11ff6 <rpc_proxy_irq_handler+0x2e>
   11fec:	1d20      	adds	r0, r4, #4
   11fee:	f010 fd1d 	bl	22a2c <z_impl_k_sem_give>
   11ff2:	6824      	ldr	r4, [r4, #0]
   11ff4:	e7f9      	b.n	11fea <rpc_proxy_irq_handler+0x22>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   11ff6:	f7fd ffcf 	bl	ff98 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   11ffa:	f7fd ff0f 	bl	fe1c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   11ffe:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   12002:	4685      	mov	sp, r0
   12004:	4770      	bx	lr
   12006:	bf00      	nop
   12008:	20020370 	.word	0x20020370
   1200c:	20020374 	.word	0x20020374

00012010 <bsd_os_timedwait>:
{
   12010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12014:	460d      	mov	r5, r1
   12016:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
   12018:	f013 ffcb 	bl	25fb2 <z_impl_k_uptime_get>
	if (*timeout == 0) {
   1201c:	682b      	ldr	r3, [r5, #0]
   1201e:	4606      	mov	r6, r0
   12020:	2b00      	cmp	r3, #0
   12022:	460f      	mov	r7, r1
   12024:	d103      	bne.n	1202e <bsd_os_timedwait+0x1e>
	z_impl_k_yield();
   12026:	f010 fc85 	bl	22934 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   1202a:	203c      	movs	r0, #60	; 0x3c
   1202c:	e06a      	b.n	12104 <bsd_os_timedwait+0xf4>
		*timeout = K_FOREVER;
   1202e:	bfbc      	itt	lt
   12030:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   12034:	602b      	strlt	r3, [r5, #0]
	z_impl_k_sem_init(sem, initial_count, limit);
   12036:	2201      	movs	r2, #1
   12038:	2100      	movs	r1, #0
   1203a:	a802      	add	r0, sp, #8
   1203c:	f013 ff11 	bl	25e62 <z_impl_k_sem_init>
   12040:	f10d 0804 	add.w	r8, sp, #4
   12044:	f04f 0320 	mov.w	r3, #32
   12048:	f3ef 8911 	mrs	r9, BASEPRI
   1204c:	f383 8811 	msr	BASEPRI, r3
   12050:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   12054:	f010 fce4 	bl	22a20 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   12058:	f7ff ff94 	bl	11f84 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   1205c:	4c32      	ldr	r4, [pc, #200]	; (12128 <bsd_os_timedwait+0x118>)
   1205e:	6843      	ldr	r3, [r0, #4]
   12060:	6822      	ldr	r2, [r4, #0]
   12062:	4293      	cmp	r3, r2
   12064:	f04f 0300 	mov.w	r3, #0
   12068:	d108      	bne.n	1207c <bsd_os_timedwait+0x6c>
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
   1206a:	9301      	str	r3, [sp, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1206c:	4b2f      	ldr	r3, [pc, #188]	; (1212c <bsd_os_timedwait+0x11c>)
   1206e:	685a      	ldr	r2, [r3, #4]
   12070:	2a00      	cmp	r2, #0
   12072:	d14a      	bne.n	1210a <bsd_os_timedwait+0xfa>
	list->head = node;
   12074:	e9c3 8800 	strd	r8, r8, [r3]
		allow_to_sleep = true;
   12078:	2301      	movs	r3, #1
   1207a:	e000      	b.n	1207e <bsd_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   1207c:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   1207e:	f389 8811 	msr	BASEPRI, r9
   12082:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   12086:	2b00      	cmp	r3, #0
   12088:	d03b      	beq.n	12102 <bsd_os_timedwait+0xf2>
	(void)k_sem_take(&thread.sem, *timeout);
   1208a:	6829      	ldr	r1, [r5, #0]
	return z_impl_k_sem_take(sem, timeout);
   1208c:	a802      	add	r0, sp, #8
   1208e:	f010 fcf9 	bl	22a84 <z_impl_k_sem_take>
	__asm__ volatile(
   12092:	f04f 0320 	mov.w	r3, #32
   12096:	f3ef 8911 	mrs	r9, BASEPRI
   1209a:	f383 8811 	msr	BASEPRI, r3
   1209e:	f3bf 8f6f 	isb	sy
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   120a2:	2100      	movs	r1, #0
   120a4:	4b21      	ldr	r3, [pc, #132]	; (1212c <bsd_os_timedwait+0x11c>)
   120a6:	681a      	ldr	r2, [r3, #0]
   120a8:	b15a      	cbz	r2, 120c2 <bsd_os_timedwait+0xb2>
   120aa:	4542      	cmp	r2, r8
   120ac:	d138      	bne.n	12120 <bsd_os_timedwait+0x110>
   120ae:	9801      	ldr	r0, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   120b0:	2900      	cmp	r1, #0
   120b2:	d12f      	bne.n	12114 <bsd_os_timedwait+0x104>
   120b4:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   120b6:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   120b8:	4291      	cmp	r1, r2
   120ba:	d100      	bne.n	120be <bsd_os_timedwait+0xae>
	list->tail = node;
   120bc:	6058      	str	r0, [r3, #4]
	parent->next = child;
   120be:	2300      	movs	r3, #0
   120c0:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   120c2:	f010 fcad 	bl	22a20 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   120c6:	f7ff ff5d 	bl	11f84 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   120ca:	6823      	ldr	r3, [r4, #0]
   120cc:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   120ce:	f389 8811 	msr	BASEPRI, r9
   120d2:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
   120d6:	682c      	ldr	r4, [r5, #0]
   120d8:	1c63      	adds	r3, r4, #1
   120da:	d012      	beq.n	12102 <bsd_os_timedwait+0xf2>
	return z_impl_k_uptime_get();
   120dc:	f013 ff69 	bl	25fb2 <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
   120e0:	1b86      	subs	r6, r0, r6
   120e2:	eb61 0707 	sbc.w	r7, r1, r7
   120e6:	17e3      	asrs	r3, r4, #31
   120e8:	1ba2      	subs	r2, r4, r6
   120ea:	eb63 0307 	sbc.w	r3, r3, r7
   120ee:	4619      	mov	r1, r3
	*timeout = remaining > 0 ? remaining : 0;
   120f0:	2a00      	cmp	r2, #0
   120f2:	f171 0300 	sbcs.w	r3, r1, #0
	remaining = *timeout - (k_uptime_get() - start);
   120f6:	4610      	mov	r0, r2
	*timeout = remaining > 0 ? remaining : 0;
   120f8:	bfb8      	it	lt
   120fa:	2000      	movlt	r0, #0
   120fc:	6028      	str	r0, [r5, #0]
	if (*timeout == 0) {
   120fe:	2800      	cmp	r0, #0
   12100:	d093      	beq.n	1202a <bsd_os_timedwait+0x1a>
	return 0;
   12102:	2000      	movs	r0, #0
}
   12104:	b009      	add	sp, #36	; 0x24
   12106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1210a:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
   1210e:	f8c3 8004 	str.w	r8, [r3, #4]
   12112:	e7b1      	b.n	12078 <bsd_os_timedwait+0x68>
	parent->next = child;
   12114:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   12116:	6858      	ldr	r0, [r3, #4]
   12118:	4290      	cmp	r0, r2
	list->tail = node;
   1211a:	bf08      	it	eq
   1211c:	6059      	streq	r1, [r3, #4]
   1211e:	e7ce      	b.n	120be <bsd_os_timedwait+0xae>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12120:	4611      	mov	r1, r2
   12122:	6812      	ldr	r2, [r2, #0]
   12124:	e7c0      	b.n	120a8 <bsd_os_timedwait+0x98>
   12126:	bf00      	nop
   12128:	20020370 	.word	0x20020370
   1212c:	20020374 	.word	0x20020374

00012130 <bsd_os_errno_set>:
	switch (err_code) {
   12130:	282d      	cmp	r0, #45	; 0x2d
{
   12132:	b510      	push	{r4, lr}
   12134:	4604      	mov	r4, r0
	switch (err_code) {
   12136:	d07d      	beq.n	12234 <bsd_os_errno_set+0x104>
   12138:	dc39      	bgt.n	121ae <bsd_os_errno_set+0x7e>
   1213a:	280e      	cmp	r0, #14
   1213c:	d07a      	beq.n	12234 <bsd_os_errno_set+0x104>
   1213e:	dc22      	bgt.n	12186 <bsd_os_errno_set+0x56>
   12140:	2808      	cmp	r0, #8
   12142:	d077      	beq.n	12234 <bsd_os_errno_set+0x104>
   12144:	dc1a      	bgt.n	1217c <bsd_os_errno_set+0x4c>
   12146:	2802      	cmp	r0, #2
   12148:	d074      	beq.n	12234 <bsd_os_errno_set+0x104>
   1214a:	2805      	cmp	r0, #5
   1214c:	d072      	beq.n	12234 <bsd_os_errno_set+0x104>
   1214e:	2801      	cmp	r0, #1
   12150:	d070      	beq.n	12234 <bsd_os_errno_set+0x104>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   12152:	2301      	movs	r3, #1
   12154:	f04f 0200 	mov.w	r2, #0
   12158:	4948      	ldr	r1, [pc, #288]	; (1227c <bsd_os_errno_set+0x14c>)
   1215a:	f363 0202 	bfi	r2, r3, #0, #3
   1215e:	4b48      	ldr	r3, [pc, #288]	; (12280 <bsd_os_errno_set+0x150>)
   12160:	f36f 02c5 	bfc	r2, #3, #3
   12164:	1a5b      	subs	r3, r3, r1
   12166:	08db      	lsrs	r3, r3, #3
   12168:	f363 128f 	bfi	r2, r3, #6, #10
   1216c:	4621      	mov	r1, r4
   1216e:	4845      	ldr	r0, [pc, #276]	; (12284 <bsd_os_errno_set+0x154>)
   12170:	f011 fe6e 	bl	23e50 <log_1>
   12174:	f00f fd86 	bl	21c84 <z_impl_z_errno>
		errno = 0xBAADBAAD;
   12178:	4b43      	ldr	r3, [pc, #268]	; (12288 <bsd_os_errno_set+0x158>)
   1217a:	e04d      	b.n	12218 <bsd_os_errno_set+0xe8>
	switch (err_code) {
   1217c:	280c      	cmp	r0, #12
   1217e:	d059      	beq.n	12234 <bsd_os_errno_set+0x104>
   12180:	dc47      	bgt.n	12212 <bsd_os_errno_set+0xe2>
   12182:	2809      	cmp	r0, #9
   12184:	e7e4      	b.n	12150 <bsd_os_errno_set+0x20>
   12186:	2828      	cmp	r0, #40	; 0x28
   12188:	d073      	beq.n	12272 <bsd_os_errno_set+0x142>
   1218a:	dc05      	bgt.n	12198 <bsd_os_errno_set+0x68>
   1218c:	2818      	cmp	r0, #24
   1218e:	d051      	beq.n	12234 <bsd_os_errno_set+0x104>
   12190:	2823      	cmp	r0, #35	; 0x23
   12192:	d043      	beq.n	1221c <bsd_os_errno_set+0xec>
   12194:	2816      	cmp	r0, #22
   12196:	e7db      	b.n	12150 <bsd_os_errno_set+0x20>
   12198:	282a      	cmp	r0, #42	; 0x2a
   1219a:	d04b      	beq.n	12234 <bsd_os_errno_set+0x104>
   1219c:	db42      	blt.n	12224 <bsd_os_errno_set+0xf4>
   1219e:	282b      	cmp	r0, #43	; 0x2b
   121a0:	d048      	beq.n	12234 <bsd_os_errno_set+0x104>
   121a2:	282c      	cmp	r0, #44	; 0x2c
   121a4:	d1d5      	bne.n	12152 <bsd_os_errno_set+0x22>
   121a6:	f00f fd6d 	bl	21c84 <z_impl_z_errno>
		errno = ESOCKTNOSUPPORT;
   121aa:	232c      	movs	r3, #44	; 0x2c
   121ac:	e034      	b.n	12218 <bsd_os_errno_set+0xe8>
	switch (err_code) {
   121ae:	283c      	cmp	r0, #60	; 0x3c
   121b0:	d040      	beq.n	12234 <bsd_os_errno_set+0x104>
   121b2:	dc15      	bgt.n	121e0 <bsd_os_errno_set+0xb0>
   121b4:	2833      	cmp	r0, #51	; 0x33
   121b6:	d03d      	beq.n	12234 <bsd_os_errno_set+0x104>
   121b8:	dc05      	bgt.n	121c6 <bsd_os_errno_set+0x96>
   121ba:	2830      	cmp	r0, #48	; 0x30
   121bc:	d03a      	beq.n	12234 <bsd_os_errno_set+0x104>
   121be:	2832      	cmp	r0, #50	; 0x32
   121c0:	d034      	beq.n	1222c <bsd_os_errno_set+0xfc>
   121c2:	282f      	cmp	r0, #47	; 0x2f
   121c4:	e7c4      	b.n	12150 <bsd_os_errno_set+0x20>
   121c6:	2836      	cmp	r0, #54	; 0x36
   121c8:	d034      	beq.n	12234 <bsd_os_errno_set+0x104>
   121ca:	dc01      	bgt.n	121d0 <bsd_os_errno_set+0xa0>
   121cc:	2834      	cmp	r0, #52	; 0x34
   121ce:	e7bf      	b.n	12150 <bsd_os_errno_set+0x20>
   121d0:	2838      	cmp	r0, #56	; 0x38
   121d2:	d02f      	beq.n	12234 <bsd_os_errno_set+0x104>
   121d4:	2839      	cmp	r0, #57	; 0x39
   121d6:	d1bc      	bne.n	12152 <bsd_os_errno_set+0x22>
   121d8:	f00f fd54 	bl	21c84 <z_impl_z_errno>
		errno = ENOTCONN;
   121dc:	2339      	movs	r3, #57	; 0x39
   121de:	e01b      	b.n	12218 <bsd_os_errno_set+0xe8>
	switch (err_code) {
   121e0:	287d      	cmp	r0, #125	; 0x7d
   121e2:	d033      	beq.n	1224c <bsd_os_errno_set+0x11c>
   121e4:	dc09      	bgt.n	121fa <bsd_os_errno_set+0xca>
   121e6:	2870      	cmp	r0, #112	; 0x70
   121e8:	d028      	beq.n	1223c <bsd_os_errno_set+0x10c>
   121ea:	2873      	cmp	r0, #115	; 0x73
   121ec:	d02a      	beq.n	12244 <bsd_os_errno_set+0x114>
   121ee:	2869      	cmp	r0, #105	; 0x69
   121f0:	d1af      	bne.n	12152 <bsd_os_errno_set+0x22>
   121f2:	f00f fd47 	bl	21c84 <z_impl_z_errno>
		errno = ENOBUFS;
   121f6:	2337      	movs	r3, #55	; 0x37
   121f8:	e00e      	b.n	12218 <bsd_os_errno_set+0xe8>
	switch (err_code) {
   121fa:	287f      	cmp	r0, #127	; 0x7f
   121fc:	d02f      	beq.n	1225e <bsd_os_errno_set+0x12e>
   121fe:	db29      	blt.n	12254 <bsd_os_errno_set+0x124>
   12200:	2880      	cmp	r0, #128	; 0x80
   12202:	d031      	beq.n	12268 <bsd_os_errno_set+0x138>
   12204:	2881      	cmp	r0, #129	; 0x81
   12206:	d1a4      	bne.n	12152 <bsd_os_errno_set+0x22>
   12208:	f00f fd3c 	bl	21c84 <z_impl_z_errno>
		errno = EKEYREJECTED;
   1220c:	f240 73d4 	movw	r3, #2004	; 0x7d4
   12210:	e002      	b.n	12218 <bsd_os_errno_set+0xe8>
   12212:	f00f fd37 	bl	21c84 <z_impl_z_errno>
		errno = EACCES;
   12216:	230d      	movs	r3, #13
		errno = 0xBAADBAAD;
   12218:	6003      	str	r3, [r0, #0]
}
   1221a:	e00e      	b.n	1223a <bsd_os_errno_set+0x10a>
   1221c:	f00f fd32 	bl	21c84 <z_impl_z_errno>
		errno = EAGAIN;
   12220:	230b      	movs	r3, #11
   12222:	e7f9      	b.n	12218 <bsd_os_errno_set+0xe8>
   12224:	f00f fd2e 	bl	21c84 <z_impl_z_errno>
		errno = EPROTOTYPE;
   12228:	2329      	movs	r3, #41	; 0x29
   1222a:	e7f5      	b.n	12218 <bsd_os_errno_set+0xe8>
   1222c:	f00f fd2a 	bl	21c84 <z_impl_z_errno>
		errno = ENETDOWN;
   12230:	233e      	movs	r3, #62	; 0x3e
   12232:	e7f1      	b.n	12218 <bsd_os_errno_set+0xe8>
   12234:	f00f fd26 	bl	21c84 <z_impl_z_errno>
		errno = ETIMEDOUT;
   12238:	6004      	str	r4, [r0, #0]
}
   1223a:	bd10      	pop	{r4, pc}
   1223c:	f00f fd22 	bl	21c84 <z_impl_z_errno>
		errno = EHOSTDOWN;
   12240:	2343      	movs	r3, #67	; 0x43
   12242:	e7e9      	b.n	12218 <bsd_os_errno_set+0xe8>
   12244:	f00f fd1e 	bl	21c84 <z_impl_z_errno>
		errno = EINPROGRESS;
   12248:	2344      	movs	r3, #68	; 0x44
   1224a:	e7e5      	b.n	12218 <bsd_os_errno_set+0xe8>
   1224c:	f00f fd1a 	bl	21c84 <z_impl_z_errno>
		errno = ECANCELED;
   12250:	2348      	movs	r3, #72	; 0x48
   12252:	e7e1      	b.n	12218 <bsd_os_errno_set+0xe8>
   12254:	f00f fd16 	bl	21c84 <z_impl_z_errno>
		errno = ENOKEY;
   12258:	f240 73d1 	movw	r3, #2001	; 0x7d1
   1225c:	e7dc      	b.n	12218 <bsd_os_errno_set+0xe8>
   1225e:	f00f fd11 	bl	21c84 <z_impl_z_errno>
		errno = EKEYEXPIRED;
   12262:	f240 73d2 	movw	r3, #2002	; 0x7d2
   12266:	e7d7      	b.n	12218 <bsd_os_errno_set+0xe8>
   12268:	f00f fd0c 	bl	21c84 <z_impl_z_errno>
		errno = EKEYREVOKED;
   1226c:	f240 73d3 	movw	r3, #2003	; 0x7d3
   12270:	e7d2      	b.n	12218 <bsd_os_errno_set+0xe8>
   12272:	f00f fd07 	bl	21c84 <z_impl_z_errno>
		errno = EMSGSIZE;
   12276:	2324      	movs	r3, #36	; 0x24
   12278:	e7ce      	b.n	12218 <bsd_os_errno_set+0xe8>
   1227a:	bf00      	nop
   1227c:	00026560 	.word	0x00026560
   12280:	00026580 	.word	0x00026580
   12284:	000289c0 	.word	0x000289c0
   12288:	baadbaad 	.word	0xbaadbaad

0001228c <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1228c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   12290:	4b01      	ldr	r3, [pc, #4]	; (12298 <bsd_os_application_irq_set+0xc>)
   12292:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   12296:	4770      	bx	lr
   12298:	e000e100 	.word	0xe000e100

0001229c <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1229c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   122a0:	4b01      	ldr	r3, [pc, #4]	; (122a8 <bsd_os_application_irq_clear+0xc>)
   122a2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   122a6:	4770      	bx	lr
   122a8:	e000e100 	.word	0xe000e100

000122ac <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   122ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   122b0:	4b01      	ldr	r3, [pc, #4]	; (122b8 <bsd_os_trace_irq_set+0xc>)
   122b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   122b6:	4770      	bx	lr
   122b8:	e000e100 	.word	0xe000e100

000122bc <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   122bc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   122c0:	4b01      	ldr	r3, [pc, #4]	; (122c8 <bsd_os_trace_irq_clear+0xc>)
   122c2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   122c6:	4770      	bx	lr
   122c8:	e000e100 	.word	0xe000e100

000122cc <trace_uart_init>:
			   rpc_proxy_irq_handler, UNUSED_FLAGS);
	irq_enable(BSD_APPLICATION_IRQ);
}

void trace_uart_init(void)
{
   122cc:	b500      	push	{lr}
   122ce:	b089      	sub	sp, #36	; 0x24
#ifdef CONFIG_BSD_LIBRARY_TRACE_ENABLED
	/* UART pins are defined in "nrf9160_pca10090.dts". */
	const nrfx_uarte_config_t config = {
   122d0:	2218      	movs	r2, #24
   122d2:	2100      	movs	r1, #0
   122d4:	a802      	add	r0, sp, #8
   122d6:	f012 fb20 	bl	2491a <memset>
   122da:	2301      	movs	r3, #1
   122dc:	9301      	str	r3, [sp, #4]
   122de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   122e2:	e9cd 3303 	strd	r3, r3, [sp, #12]
   122e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   122ea:	9306      	str	r3, [sp, #24]
   122ec:	2307      	movs	r3, #7
		.p_context = NULL,
	};

	/* Initialize nrfx UARTE driver in blocking mode. */
	/* TODO: use UARTE in non-blocking mode with IRQ handler. */
	nrfx_uarte_init(&uarte_inst, &config, NULL);
   122ee:	2200      	movs	r2, #0
   122f0:	a901      	add	r1, sp, #4
   122f2:	4804      	ldr	r0, [pc, #16]	; (12304 <trace_uart_init+0x38>)
	const nrfx_uarte_config_t config = {
   122f4:	f88d 301c 	strb.w	r3, [sp, #28]
	nrfx_uarte_init(&uarte_inst, &config, NULL);
   122f8:	f00f fbae 	bl	21a58 <nrfx_uarte_init>
#endif
}
   122fc:	b009      	add	sp, #36	; 0x24
   122fe:	f85d fb04 	ldr.w	pc, [sp], #4
   12302:	bf00      	nop
   12304:	000267ac 	.word	0x000267ac

00012308 <bsd_os_init>:

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   12308:	b508      	push	{r3, lr}
	list->head = NULL;
   1230a:	2300      	movs	r3, #0
   1230c:	4a08      	ldr	r2, [pc, #32]	; (12330 <bsd_os_init+0x28>)
	list->tail = NULL;
   1230e:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12312:	4a08      	ldr	r2, [pc, #32]	; (12334 <bsd_os_init+0x2c>)
   12314:	e8d2 1fef 	ldaex	r1, [r2]
   12318:	e8c2 3fe0 	stlex	r0, r3, [r2]
   1231c:	2800      	cmp	r0, #0
   1231e:	d1f9      	bne.n	12314 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   12320:	f012 fe95 	bl	2504e <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
   12324:	f7ff ffd2 	bl	122cc <trace_uart_init>
	trace_task_create();
}
   12328:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   1232c:	f012 be84 	b.w	25038 <trace_task_create>
   12330:	20020374 	.word	0x20020374
   12334:	20020370 	.word	0x20020370

00012338 <bsd_os_trace_put>:

int32_t bsd_os_trace_put(const uint8_t * const data, uint32_t len)
{
   12338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1233c:	4607      	mov	r7, r0
   1233e:	460d      	mov	r5, r1
#ifdef CONFIG_BSD_LIBRARY_TRACE_ENABLED
	/* Max DMA transfers are 255 bytes.
	 * Split RAM buffer into smaller chunks
	 * to be transferred using DMA.
	 */
	u32_t remaining_bytes = len;
   12340:	460c      	mov	r4, r1

	while (remaining_bytes) {
		u8_t transfer_len = MIN(remaining_bytes, UINT8_MAX);
		u32_t idx = len - remaining_bytes;

		nrfx_uarte_tx(&uarte_inst, &data[idx], transfer_len);
   12342:	f8df 8024 	ldr.w	r8, [pc, #36]	; 12368 <bsd_os_trace_put+0x30>
	while (remaining_bytes) {
   12346:	b914      	cbnz	r4, 1234e <bsd_os_trace_put+0x16>
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   12348:	4620      	mov	r0, r4
   1234a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		u8_t transfer_len = MIN(remaining_bytes, UINT8_MAX);
   1234e:	2cff      	cmp	r4, #255	; 0xff
   12350:	4626      	mov	r6, r4
   12352:	bf28      	it	cs
   12354:	26ff      	movcs	r6, #255	; 0xff
		u32_t idx = len - remaining_bytes;
   12356:	1b29      	subs	r1, r5, r4
		nrfx_uarte_tx(&uarte_inst, &data[idx], transfer_len);
   12358:	4632      	mov	r2, r6
   1235a:	4439      	add	r1, r7
   1235c:	4640      	mov	r0, r8
   1235e:	f00f fc0f 	bl	21b80 <nrfx_uarte_tx>
		remaining_bytes -= transfer_len;
   12362:	1ba4      	subs	r4, r4, r6
   12364:	e7ef      	b.n	12346 <bsd_os_trace_put+0xe>
   12366:	bf00      	nop
   12368:	000267ac 	.word	0x000267ac

0001236c <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   1236c:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   12370:	d03c      	beq.n	123ec <z_to_nrf_optname+0x80>
   12372:	dc04      	bgt.n	1237e <z_to_nrf_optname+0x12>
   12374:	2801      	cmp	r0, #1
   12376:	d047      	beq.n	12408 <z_to_nrf_optname+0x9c>
			break;
		}
		break;

	default:
		retval = -1;
   12378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		break;
	}

	return retval;
}
   1237c:	4770      	bx	lr
	switch (z_in_level) {
   1237e:	f240 2302 	movw	r3, #514	; 0x202
   12382:	4298      	cmp	r0, r3
   12384:	d052      	beq.n	1242c <z_to_nrf_optname+0xc0>
   12386:	f240 2303 	movw	r3, #515	; 0x203
   1238a:	4298      	cmp	r0, r3
   1238c:	d1f4      	bne.n	12378 <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
   1238e:	3901      	subs	r1, #1
   12390:	2913      	cmp	r1, #19
   12392:	d8f1      	bhi.n	12378 <z_to_nrf_optname+0xc>
   12394:	a301      	add	r3, pc, #4	; (adr r3, 1239c <z_to_nrf_optname+0x30>)
   12396:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   1239a:	bf00      	nop
   1239c:	00012439 	.word	0x00012439
   123a0:	000123fd 	.word	0x000123fd
   123a4:	00012421 	.word	0x00012421
   123a8:	00012415 	.word	0x00012415
   123ac:	00012405 	.word	0x00012405
   123b0:	00012425 	.word	0x00012425
   123b4:	00012429 	.word	0x00012429
   123b8:	00012379 	.word	0x00012379
   123bc:	00012379 	.word	0x00012379
   123c0:	00012379 	.word	0x00012379
   123c4:	00012379 	.word	0x00012379
   123c8:	00012379 	.word	0x00012379
   123cc:	00012379 	.word	0x00012379
   123d0:	00012379 	.word	0x00012379
   123d4:	00012379 	.word	0x00012379
   123d8:	00012379 	.word	0x00012379
   123dc:	00012379 	.word	0x00012379
   123e0:	00012379 	.word	0x00012379
   123e4:	00012379 	.word	0x00012379
   123e8:	00012419 	.word	0x00012419
		switch (z_in_optname) {
   123ec:	3901      	subs	r1, #1
   123ee:	2905      	cmp	r1, #5
   123f0:	d8c2      	bhi.n	12378 <z_to_nrf_optname+0xc>
   123f2:	e8df f001 	tbb	[pc, r1]
   123f6:	0703      	.short	0x0703
   123f8:	210f1917 	.word	0x210f1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   123fc:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_HOSTNAME;
   123fe:	6013      	str	r3, [r2, #0]
	int retval = 0;
   12400:	2000      	movs	r0, #0
			break;
   12402:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_HOSTNAME;
   12404:	2305      	movs	r3, #5
   12406:	e7fa      	b.n	123fe <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   12408:	2914      	cmp	r1, #20
   1240a:	d005      	beq.n	12418 <z_to_nrf_optname+0xac>
   1240c:	2919      	cmp	r1, #25
   1240e:	d005      	beq.n	1241c <z_to_nrf_optname+0xb0>
   12410:	2904      	cmp	r1, #4
   12412:	d1b1      	bne.n	12378 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   12414:	2304      	movs	r3, #4
   12416:	e7f2      	b.n	123fe <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   12418:	2314      	movs	r3, #20
   1241a:	e7f0      	b.n	123fe <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   1241c:	6011      	str	r1, [r2, #0]
   1241e:	e7ef      	b.n	12400 <z_to_nrf_optname+0x94>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   12420:	2303      	movs	r3, #3
   12422:	e7ec      	b.n	123fe <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   12424:	2306      	movs	r3, #6
   12426:	e7ea      	b.n	123fe <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   12428:	2307      	movs	r3, #7
   1242a:	e7e8      	b.n	123fe <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   1242c:	2902      	cmp	r1, #2
   1242e:	d0e5      	beq.n	123fc <z_to_nrf_optname+0x90>
   12430:	2903      	cmp	r1, #3
   12432:	d0f5      	beq.n	12420 <z_to_nrf_optname+0xb4>
   12434:	2901      	cmp	r1, #1
   12436:	d19f      	bne.n	12378 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   12438:	2301      	movs	r3, #1
   1243a:	e7e0      	b.n	123fe <z_to_nrf_optname+0x92>

0001243c <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   1243c:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   1243e:	4b03      	ldr	r3, [pc, #12]	; (1244c <nrf91_socket_iface_init+0x10>)
   12440:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   12442:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
   12444:	4802      	ldr	r0, [pc, #8]	; (12450 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   12446:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
   12448:	f7fd bb92 	b.w	fb70 <socket_offload_register>
   1244c:	200203cc 	.word	0x200203cc
   12450:	000267b4 	.word	0x000267b4

00012454 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   12454:	4b0a      	ldr	r3, [pc, #40]	; (12480 <find_node+0x2c>)
{
   12456:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   12458:	681b      	ldr	r3, [r3, #0]
{
   1245a:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1245c:	b143      	cbz	r3, 12470 <find_node+0x1c>
	return node->next;
   1245e:	2400      	movs	r4, #0
   12460:	6818      	ldr	r0, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   12462:	685e      	ldr	r6, [r3, #4]
   12464:	428e      	cmp	r6, r1
   12466:	d105      	bne.n	12474 <find_node+0x20>
   12468:	689e      	ldr	r6, [r3, #8]
   1246a:	4296      	cmp	r6, r2
   1246c:	d102      	bne.n	12474 <find_node+0x20>
			*prev_out = prev;
   1246e:	602c      	str	r4, [r5, #0]
			return curr;
		}
		prev = curr;
	}
	return NULL;
   12470:	4618      	mov	r0, r3
}
   12472:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   12474:	2800      	cmp	r0, #0
   12476:	d0fc      	beq.n	12472 <find_node+0x1e>
   12478:	461c      	mov	r4, r3
   1247a:	4603      	mov	r3, r0
   1247c:	6800      	ldr	r0, [r0, #0]
   1247e:	e7f0      	b.n	12462 <find_node+0xe>
   12480:	200203d0 	.word	0x200203d0

00012484 <module_init>:

	k_mutex_unlock(&list_mtx);
}

static int module_init(struct device *dev)
{
   12484:	b510      	push	{r4, lr}
	list->head = NULL;
   12486:	2400      	movs	r4, #0
   12488:	4b03      	ldr	r3, [pc, #12]	; (12498 <module_init+0x14>)
	ARG_UNUSED(dev);

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
   1248a:	4804      	ldr	r0, [pc, #16]	; (1249c <module_init+0x18>)
	list->tail = NULL;
   1248c:	e9c3 4400 	strd	r4, r4, [r3]
   12490:	f000 fce6 	bl	12e60 <at_cmd_set_notification_handler>
	return 0;
}
   12494:	4620      	mov	r0, r4
   12496:	bd10      	pop	{r4, pc}
   12498:	200203d0 	.word	0x200203d0
   1249c:	000124a1 	.word	0x000124a1

000124a0 <notif_dispatch>:
{
   124a0:	b538      	push	{r3, r4, r5, lr}
   124a2:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   124a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   124a8:	4809      	ldr	r0, [pc, #36]	; (124d0 <notif_dispatch+0x30>)
   124aa:	f00f ff1b 	bl	222e4 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   124ae:	4b09      	ldr	r3, [pc, #36]	; (124d4 <notif_dispatch+0x34>)
   124b0:	681b      	ldr	r3, [r3, #0]
   124b2:	b143      	cbz	r3, 124c6 <notif_dispatch+0x26>
	return node->next;
   124b4:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   124b6:	689a      	ldr	r2, [r3, #8]
   124b8:	4629      	mov	r1, r5
   124ba:	6858      	ldr	r0, [r3, #4]
   124bc:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   124be:	b114      	cbz	r4, 124c6 <notif_dispatch+0x26>
   124c0:	4623      	mov	r3, r4
   124c2:	6824      	ldr	r4, [r4, #0]
   124c4:	e7f7      	b.n	124b6 <notif_dispatch+0x16>
	z_impl_k_mutex_unlock(mutex);
   124c6:	4802      	ldr	r0, [pc, #8]	; (124d0 <notif_dispatch+0x30>)
}
   124c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   124cc:	f00f bf7c 	b.w	223c8 <z_impl_k_mutex_unlock>
   124d0:	2002d584 	.word	0x2002d584
   124d4:	200203d0 	.word	0x200203d0

000124d8 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   124d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   124da:	4606      	mov	r6, r0
	if (handler == NULL) {
   124dc:	460d      	mov	r5, r1
   124de:	b369      	cbz	r1, 1253c <at_notif_register_handler+0x64>
	return z_impl_k_mutex_lock(mutex, timeout);
   124e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   124e4:	4817      	ldr	r0, [pc, #92]	; (12544 <at_notif_register_handler+0x6c>)
   124e6:	f00f fefd 	bl	222e4 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   124ea:	462a      	mov	r2, r5
   124ec:	4631      	mov	r1, r6
   124ee:	a801      	add	r0, sp, #4
   124f0:	f7ff ffb0 	bl	12454 <find_node>
   124f4:	4604      	mov	r4, r0
   124f6:	b120      	cbz	r0, 12502 <at_notif_register_handler+0x2a>
	z_impl_k_mutex_unlock(mutex);
   124f8:	4812      	ldr	r0, [pc, #72]	; (12544 <at_notif_register_handler+0x6c>)
   124fa:	f00f ff65 	bl	223c8 <z_impl_k_mutex_unlock>
	return 0;
   124fe:	2000      	movs	r0, #0
		LOG_DBG("context=0x%08X, handler=0x%08X", (u32_t)context,
			(u32_t)handler);
		return -EINVAL;
	}
	return append_notif_handler(context, handler);
   12500:	e009      	b.n	12516 <at_notif_register_handler+0x3e>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   12502:	200c      	movs	r0, #12
   12504:	f00f fe2e 	bl	22164 <k_malloc>
   12508:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   1250a:	b930      	cbnz	r0, 1251a <at_notif_register_handler+0x42>
   1250c:	480d      	ldr	r0, [pc, #52]	; (12544 <at_notif_register_handler+0x6c>)
   1250e:	f00f ff5b 	bl	223c8 <z_impl_k_mutex_unlock>
		return -ENOBUFS;
   12512:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   12516:	b002      	add	sp, #8
   12518:	bd70      	pop	{r4, r5, r6, pc}
	memset(to_ins, 0, sizeof(struct notif_handler));
   1251a:	220c      	movs	r2, #12
   1251c:	4621      	mov	r1, r4
   1251e:	f012 f9fc 	bl	2491a <memset>
	to_ins->ctx     = ctx;
   12522:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   12524:	4a08      	ldr	r2, [pc, #32]	; (12548 <at_notif_register_handler+0x70>)
	parent->next = child;
   12526:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   12528:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   1252a:	e9c3 6501 	strd	r6, r5, [r3, #4]
   1252e:	b911      	cbnz	r1, 12536 <at_notif_register_handler+0x5e>
	list->head = node;
   12530:	e9c2 3300 	strd	r3, r3, [r2]
   12534:	e7e0      	b.n	124f8 <at_notif_register_handler+0x20>
	parent->next = child;
   12536:	600b      	str	r3, [r1, #0]
	list->tail = node;
   12538:	6053      	str	r3, [r2, #4]
   1253a:	e7dd      	b.n	124f8 <at_notif_register_handler+0x20>
		return -EINVAL;
   1253c:	f06f 0015 	mvn.w	r0, #21
   12540:	e7e9      	b.n	12516 <at_notif_register_handler+0x3e>
   12542:	bf00      	nop
   12544:	2002d584 	.word	0x2002d584
   12548:	200203d0 	.word	0x200203d0

0001254c <at_parse_detect_type>:
{
	state      = IDLE;
}

static int at_parse_detect_type(const char **str, int index)
{
   1254c:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   1254e:	6804      	ldr	r4, [r0, #0]

	if ((index == 0) &&
   12550:	2900      	cmp	r1, #0
{
   12552:	4605      	mov	r5, r0
   12554:	7823      	ldrb	r3, [r4, #0]
	if ((index == 0) &&
   12556:	d14e      	bne.n	125f6 <at_parse_detect_type+0xaa>
 * @retval true  If character is + or %
 * @retval false If character is something else
 */
static inline bool is_notification(char chr)
{
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   12558:	2b2b      	cmp	r3, #43	; 0x2b
   1255a:	4e38      	ldr	r6, [pc, #224]	; (1263c <at_parse_detect_type+0xf0>)
   1255c:	d001      	beq.n	12562 <at_parse_detect_type+0x16>
   1255e:	2b25      	cmp	r3, #37	; 0x25
   12560:	d104      	bne.n	1256c <at_parse_detect_type+0x20>
	state = new_state;
   12562:	2305      	movs	r3, #5
   12564:	7033      	strb	r3, [r6, #0]
		*str = tmpstr;
		return -1;
	}

	*str = tmpstr;
	return 0;
   12566:	2000      	movs	r0, #0
	*str = tmpstr;
   12568:	602c      	str	r4, [r5, #0]
}
   1256a:	bd70      	pop	{r4, r5, r6, pc}
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
	if (strlen(str) < 3) {
   1256c:	4620      	mov	r0, r4
   1256e:	f012 f973 	bl	24858 <strlen>
   12572:	2802      	cmp	r0, #2
   12574:	d93d      	bls.n	125f2 <at_parse_detect_type+0xa6>
		return false;
	}

	if ((toupper(str[0]) == 'A') && (toupper(str[1]) == 'T') &&
   12576:	7823      	ldrb	r3, [r4, #0]
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
}

static inline int toupper(int chr)
{
	return (int)((chr >= (int)'a' && chr <=
   12578:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1257c:	2a19      	cmp	r2, #25
   1257e:	bf98      	it	ls
   12580:	3b20      	subls	r3, #32
   12582:	2b41      	cmp	r3, #65	; 0x41
   12584:	d135      	bne.n	125f2 <at_parse_detect_type+0xa6>
   12586:	7863      	ldrb	r3, [r4, #1]
   12588:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1258c:	2a19      	cmp	r2, #25
   1258e:	bf98      	it	ls
   12590:	3b20      	subls	r3, #32
   12592:	2b54      	cmp	r3, #84	; 0x54
   12594:	d12d      	bne.n	125f2 <at_parse_detect_type+0xa6>
	    ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   12596:	78a3      	ldrb	r3, [r4, #2]
   12598:	2b25      	cmp	r3, #37	; 0x25
   1259a:	d003      	beq.n	125a4 <at_parse_detect_type+0x58>
	     (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   1259c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   125a0:	2b23      	cmp	r3, #35	; 0x23
   125a2:	d126      	bne.n	125f2 <at_parse_detect_type+0xa6>
	state = new_state;
   125a4:	2306      	movs	r3, #6
   125a6:	e7dd      	b.n	12564 <at_parse_detect_type+0x18>
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   125a8:	2b22      	cmp	r3, #34	; 0x22
   125aa:	d015      	beq.n	125d8 <at_parse_detect_type+0x8c>
 * @retval true  If character is (
 * @retval false If character is something else
 */
static inline bool is_array_start(char chr)
{
	if (chr == '(') {
   125ac:	2b28      	cmp	r3, #40	; 0x28
   125ae:	d018      	beq.n	125e2 <at_parse_detect_type+0x96>
	if ((chr == '\r') ||
   125b0:	2b0d      	cmp	r3, #13
   125b2:	d001      	beq.n	125b8 <at_parse_detect_type+0x6c>
   125b4:	2b0a      	cmp	r3, #10
   125b6:	d134      	bne.n	12622 <at_parse_detect_type+0xd6>
		  (state == NUMBER)) {
   125b8:	4a20      	ldr	r2, [pc, #128]	; (1263c <at_parse_detect_type+0xf0>)
   125ba:	7811      	ldrb	r1, [r2, #0]
	} else if (is_lfcr(*tmpstr) &&
   125bc:	2903      	cmp	r1, #3
   125be:	d12e      	bne.n	1261e <at_parse_detect_type+0xd2>
   125c0:	4621      	mov	r1, r4
		while (is_lfcr(*tmpstr)) {
   125c2:	780b      	ldrb	r3, [r1, #0]
   125c4:	460c      	mov	r4, r1
   125c6:	2b0d      	cmp	r3, #13
   125c8:	f101 0101 	add.w	r1, r1, #1
   125cc:	d0f9      	beq.n	125c2 <at_parse_detect_type+0x76>
   125ce:	2b0a      	cmp	r3, #10
   125d0:	d0f7      	beq.n	125c2 <at_parse_detect_type+0x76>
	state = new_state;
   125d2:	2304      	movs	r3, #4
   125d4:	7013      	strb	r3, [r2, #0]
   125d6:	e7c6      	b.n	12566 <at_parse_detect_type+0x1a>
   125d8:	2202      	movs	r2, #2
   125da:	4b18      	ldr	r3, [pc, #96]	; (1263c <at_parse_detect_type+0xf0>)
		tmpstr++;
   125dc:	3401      	adds	r4, #1
	state = new_state;
   125de:	701a      	strb	r2, [r3, #0]
   125e0:	e7c1      	b.n	12566 <at_parse_detect_type+0x1a>
   125e2:	2201      	movs	r2, #1
   125e4:	4b15      	ldr	r3, [pc, #84]	; (1263c <at_parse_detect_type+0xf0>)
		tmpstr++;
   125e6:	4414      	add	r4, r2
	state = new_state;
   125e8:	701a      	strb	r2, [r3, #0]
   125ea:	e7bc      	b.n	12566 <at_parse_detect_type+0x1a>
		return -1;
   125ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   125f0:	e7bb      	b.n	1256a <at_parse_detect_type+0x1e>
	state = new_state;
   125f2:	2302      	movs	r3, #2
   125f4:	e7b6      	b.n	12564 <at_parse_detect_type+0x18>
	} else if ((index > 0) &&
   125f6:	dd03      	ble.n	12600 <at_parse_detect_type+0xb4>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   125f8:	2b2b      	cmp	r3, #43	; 0x2b
   125fa:	d0f7      	beq.n	125ec <at_parse_detect_type+0xa0>
   125fc:	2b25      	cmp	r3, #37	; 0x25
   125fe:	d0f5      	beq.n	125ec <at_parse_detect_type+0xa0>
 * @retval false If character is something else
 */
static inline bool is_number(char chr)
{
	if (isdigit(chr) ||
	    (chr == '-') ||
   12600:	f1a3 022b 	sub.w	r2, r3, #43	; 0x2b
   12604:	b2d2      	uxtb	r2, r2
   12606:	2a0e      	cmp	r2, #14
   12608:	d8ce      	bhi.n	125a8 <at_parse_detect_type+0x5c>
   1260a:	f647 71e5 	movw	r1, #32741	; 0x7fe5
   1260e:	fa21 f202 	lsr.w	r2, r1, r2
   12612:	07d2      	lsls	r2, r2, #31
   12614:	d5ca      	bpl.n	125ac <at_parse_detect_type+0x60>
	state = new_state;
   12616:	2203      	movs	r2, #3
   12618:	4b08      	ldr	r3, [pc, #32]	; (1263c <at_parse_detect_type+0xf0>)
   1261a:	701a      	strb	r2, [r3, #0]
   1261c:	e7a3      	b.n	12566 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) &&
   1261e:	2907      	cmp	r1, #7
   12620:	d0a1      	beq.n	12566 <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) ||
   12622:	3b2c      	subs	r3, #44	; 0x2c
   12624:	b2db      	uxtb	r3, r3
   12626:	2b11      	cmp	r3, #17
   12628:	d8e0      	bhi.n	125ec <at_parse_detect_type+0xa0>
   1262a:	4a05      	ldr	r2, [pc, #20]	; (12640 <at_parse_detect_type+0xf4>)
   1262c:	fa22 f303 	lsr.w	r3, r2, r3
   12630:	07db      	lsls	r3, r3, #31
   12632:	d5db      	bpl.n	125ec <at_parse_detect_type+0xa0>
	state = new_state;
   12634:	4b01      	ldr	r3, [pc, #4]	; (1263c <at_parse_detect_type+0xf0>)
   12636:	2207      	movs	r2, #7
   12638:	e7ef      	b.n	1261a <at_parse_detect_type+0xce>
   1263a:	bf00      	nop
   1263c:	20027402 	.word	0x20027402
   12640:	00024001 	.word	0x00024001

00012644 <at_parse_process_element>:

static int at_parse_process_element(const char **str,
				    int index,
				    struct at_param_list *const list)
{
   12644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const char *tmpstr = *str;
   12648:	6804      	ldr	r4, [r0, #0]
{
   1264a:	b0a2      	sub	sp, #136	; 0x88
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1264c:	7823      	ldrb	r3, [r4, #0]
   1264e:	4680      	mov	r8, r0
   12650:	460f      	mov	r7, r1
   12652:	4616      	mov	r6, r2
   12654:	2b00      	cmp	r3, #0
   12656:	f000 80b2 	beq.w	127be <at_parse_process_element+0x17a>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   1265a:	4b5a      	ldr	r3, [pc, #360]	; (127c4 <at_parse_process_element+0x180>)
   1265c:	781d      	ldrb	r5, [r3, #0]
   1265e:	2d05      	cmp	r5, #5
   12660:	d110      	bne.n	12684 <at_parse_process_element+0x40>
		const char *start_ptr = tmpstr++;
   12662:	1c65      	adds	r5, r4, #1

		while (is_valid_notification_char(*tmpstr)) {
   12664:	462a      	mov	r2, r5
	chr = toupper(chr);
   12666:	f812 3b01 	ldrb.w	r3, [r2], #1
   1266a:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   1266e:	2919      	cmp	r1, #25
   12670:	bf98      	it	ls
   12672:	3b20      	subls	r3, #32
	if ((chr >= 'A') && (chr <= 'Z')) {
   12674:	3b41      	subs	r3, #65	; 0x41
   12676:	b2db      	uxtb	r3, r3
   12678:	2b19      	cmp	r3, #25
   1267a:	d901      	bls.n	12680 <at_parse_process_element+0x3c>

		while (isxdigit(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list,
   1267c:	1b2b      	subs	r3, r5, r4
   1267e:	e02e      	b.n	126de <at_parse_process_element+0x9a>
   12680:	4615      	mov	r5, r2
   12682:	e7ef      	b.n	12664 <at_parse_process_element+0x20>
	} else if (state == COMMAND) {
   12684:	2d06      	cmp	r5, #6
   12686:	d10e      	bne.n	126a6 <at_parse_process_element+0x62>
		tmpstr += sizeof("AT+") - 1;
   12688:	1ce5      	adds	r5, r4, #3
		while (is_valid_notification_char(*tmpstr)) {
   1268a:	462a      	mov	r2, r5
	chr = toupper(chr);
   1268c:	f812 3b01 	ldrb.w	r3, [r2], #1
   12690:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   12694:	2919      	cmp	r1, #25
   12696:	bf98      	it	ls
   12698:	3b20      	subls	r3, #32
	if ((chr >= 'A') && (chr <= 'Z')) {
   1269a:	3b41      	subs	r3, #65	; 0x41
   1269c:	b2db      	uxtb	r3, r3
   1269e:	2b19      	cmp	r3, #25
   126a0:	d8ec      	bhi.n	1267c <at_parse_process_element+0x38>
   126a2:	4615      	mov	r5, r2
   126a4:	e7f1      	b.n	1268a <at_parse_process_element+0x46>
	} else if (state == OPTIONAL) {
   126a6:	2d07      	cmp	r5, #7
   126a8:	d108      	bne.n	126bc <at_parse_process_element+0x78>
		at_params_empty_put(list, index);
   126aa:	4610      	mov	r0, r2
   126ac:	f013 f90c 	bl	258c8 <at_params_empty_put>
				     index,
				     start_ptr, tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   126b0:	2000      	movs	r0, #0
	*str = tmpstr;
   126b2:	f8c8 4000 	str.w	r4, [r8]
}
   126b6:	b022      	add	sp, #136	; 0x88
   126b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == STRING) {
   126bc:	2d02      	cmp	r5, #2
   126be:	d117      	bne.n	126f0 <at_parse_process_element+0xac>
   126c0:	4623      	mov	r3, r4
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   126c2:	f242 4101 	movw	r1, #9217	; 0x2401
		while (!is_dblquote(*tmpstr) &&
   126c6:	461d      	mov	r5, r3
   126c8:	f815 2b01 	ldrb.w	r2, [r5], #1
	if (chr == '"') {
   126cc:	2a22      	cmp	r2, #34	; 0x22
   126ce:	d005      	beq.n	126dc <at_parse_process_element+0x98>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   126d0:	2a0d      	cmp	r2, #13
   126d2:	d80b      	bhi.n	126ec <at_parse_process_element+0xa8>
   126d4:	fa21 f202 	lsr.w	r2, r1, r2
   126d8:	07d2      	lsls	r2, r2, #31
   126da:	d507      	bpl.n	126ec <at_parse_process_element+0xa8>
		at_params_string_put(list,
   126dc:	1b1b      	subs	r3, r3, r4
		at_params_string_put(list,
   126de:	4622      	mov	r2, r4
   126e0:	4639      	mov	r1, r7
   126e2:	4630      	mov	r0, r6
   126e4:	f013 f915 	bl	25912 <at_params_string_put>
   126e8:	462c      	mov	r4, r5
   126ea:	e7e1      	b.n	126b0 <at_parse_process_element+0x6c>
	if ((chr >= 'A') && (chr <= 'Z')) {
   126ec:	462b      	mov	r3, r5
   126ee:	e7ea      	b.n	126c6 <at_parse_process_element+0x82>
	} else if (state == ARRAY) {
   126f0:	2d01      	cmp	r5, #1
   126f2:	d13b      	bne.n	1276c <at_parse_process_element+0x128>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   126f4:	4620      	mov	r0, r4
   126f6:	220a      	movs	r2, #10
   126f8:	a901      	add	r1, sp, #4
   126fa:	f011 ffe9 	bl	246d0 <strtoul>
	if ((chr == AT_PARAM_SEPARATOR) ||
   126fe:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 127c8 <at_parse_process_element+0x184>
		tmpstr = next;
   12702:	9c01      	ldr	r4, [sp, #4]
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   12704:	9002      	str	r0, [sp, #8]
		while (!is_array_stop(*tmpstr) &&
   12706:	7823      	ldrb	r3, [r4, #0]
	if (chr == ')') {
   12708:	2b29      	cmp	r3, #41	; 0x29
   1270a:	d025      	beq.n	12758 <at_parse_process_element+0x114>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1270c:	b323      	cbz	r3, 12758 <at_parse_process_element+0x114>
	if ((chr == AT_PARAM_SEPARATOR) ||
   1270e:	3b2c      	subs	r3, #44	; 0x2c
   12710:	b2db      	uxtb	r3, r3
   12712:	2b11      	cmp	r3, #17
   12714:	f104 0401 	add.w	r4, r4, #1
   12718:	d8f5      	bhi.n	12706 <at_parse_process_element+0xc2>
   1271a:	fa29 f303 	lsr.w	r3, r9, r3
   1271e:	07db      	lsls	r3, r3, #31
   12720:	d5f1      	bpl.n	12706 <at_parse_process_element+0xc2>
				      (u32_t)strtoul(++tmpstr, &next, 10);
   12722:	220a      	movs	r2, #10
   12724:	a901      	add	r1, sp, #4
   12726:	4620      	mov	r0, r4
   12728:	f011 ffd2 	bl	246d0 <strtoul>
				tmparray[i++] =
   1272c:	ab22      	add	r3, sp, #136	; 0x88
   1272e:	f105 0a01 	add.w	sl, r5, #1
   12732:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   12736:	f845 0c80 	str.w	r0, [r5, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   1273a:	4620      	mov	r0, r4
   1273c:	f012 f88c 	bl	24858 <strlen>
   12740:	4605      	mov	r5, r0
   12742:	9801      	ldr	r0, [sp, #4]
   12744:	f012 f888 	bl	24858 <strlen>
   12748:	4285      	cmp	r5, r0
   1274a:	d006      	beq.n	1275a <at_parse_process_element+0x116>
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1274c:	f1ba 0f20 	cmp.w	sl, #32
					tmpstr = next;
   12750:	9c01      	ldr	r4, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   12752:	d002      	beq.n	1275a <at_parse_process_element+0x116>
   12754:	4655      	mov	r5, sl
   12756:	e7d6      	b.n	12706 <at_parse_process_element+0xc2>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12758:	46aa      	mov	sl, r5
		at_params_array_put(list, index,
   1275a:	ea4f 038a 	mov.w	r3, sl, lsl #2
   1275e:	aa02      	add	r2, sp, #8
   12760:	4639      	mov	r1, r7
   12762:	4630      	mov	r0, r6
   12764:	f013 f8f8 	bl	25958 <at_params_array_put>
		tmpstr++;
   12768:	3401      	adds	r4, #1
   1276a:	e7a1      	b.n	126b0 <at_parse_process_element+0x6c>
	} else if (state == NUMBER) {
   1276c:	2d03      	cmp	r5, #3
   1276e:	d114      	bne.n	1279a <at_parse_process_element+0x156>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   12770:	220a      	movs	r2, #10
   12772:	4620      	mov	r0, r4
   12774:	a902      	add	r1, sp, #8
   12776:	f011 ffab 	bl	246d0 <strtoul>
		if (value <= USHRT_MAX) {
   1277a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   1277e:	4602      	mov	r2, r0
		tmpstr = next;
   12780:	9c02      	ldr	r4, [sp, #8]
		if (value <= USHRT_MAX) {
   12782:	d205      	bcs.n	12790 <at_parse_process_element+0x14c>
			at_params_short_put(list, index, (u16_t)value);
   12784:	b282      	uxth	r2, r0
   12786:	4639      	mov	r1, r7
   12788:	4630      	mov	r0, r6
   1278a:	f013 f88a 	bl	258a2 <at_params_short_put>
   1278e:	e78f      	b.n	126b0 <at_parse_process_element+0x6c>
			at_params_int_put(list, index, value);
   12790:	4639      	mov	r1, r7
   12792:	4630      	mov	r0, r6
   12794:	f013 f8aa 	bl	258ec <at_params_int_put>
   12798:	e78a      	b.n	126b0 <at_parse_process_element+0x6c>
	} else if (state == SMS_PDU) {
   1279a:	2d04      	cmp	r5, #4
   1279c:	d188      	bne.n	126b0 <at_parse_process_element+0x6c>
   1279e:	4625      	mov	r5, r4
		while (isxdigit(*tmpstr)) {
   127a0:	462a      	mov	r2, r5
   127a2:	f812 3b01 	ldrb.w	r3, [r2], #1
	return (int)(((ua - (unsigned)'0') < 10U) ||
   127a6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   127aa:	2909      	cmp	r1, #9
   127ac:	d905      	bls.n	127ba <at_parse_process_element+0x176>
			((ua | 32U) - (unsigned)'a' < 6U));
   127ae:	f043 0320 	orr.w	r3, r3, #32
   127b2:	3b61      	subs	r3, #97	; 0x61
	return (int)(((ua - (unsigned)'0') < 10U) ||
   127b4:	2b05      	cmp	r3, #5
   127b6:	f63f af61 	bhi.w	1267c <at_parse_process_element+0x38>
	if (chr == ')') {
   127ba:	4615      	mov	r5, r2
   127bc:	e7f0      	b.n	127a0 <at_parse_process_element+0x15c>
		return -1;
   127be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   127c2:	e778      	b.n	126b6 <at_parse_process_element+0x72>
   127c4:	20027402 	.word	0x20027402
   127c8:	00024001 	.word	0x00024001

000127cc <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list * const list,
				  size_t max_params_count)
{
   127cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   127d0:	4689      	mov	r9, r1
   127d2:	4616      	mov	r6, r2
   127d4:	4698      	mov	r8, r3
	int err = 0;

	if (at_params_str == NULL ||
   127d6:	4604      	mov	r4, r0
   127d8:	2800      	cmp	r0, #0
   127da:	d07f      	beq.n	128dc <at_parser_max_params_from_str+0x110>
   127dc:	2a00      	cmp	r2, #0
   127de:	d07d      	beq.n	128dc <at_parser_max_params_from_str+0x110>
	    list == NULL || list->params == NULL) {
   127e0:	6853      	ldr	r3, [r2, #4]
   127e2:	2b00      	cmp	r3, #0
   127e4:	d07a      	beq.n	128dc <at_parser_max_params_from_str+0x110>
	state      = IDLE;
   127e6:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   127e8:	4610      	mov	r0, r2
   127ea:	f013 f842 	bl	25872 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   127ee:	6832      	ldr	r2, [r6, #0]
	const char *str = *at_params_str;
   127f0:	af02      	add	r7, sp, #8
	max_params_count = MIN(max_params_count, list->param_count);
   127f2:	4590      	cmp	r8, r2
	const char *str = *at_params_str;
   127f4:	f847 4d04 	str.w	r4, [r7, #-4]!
	max_params_count = MIN(max_params_count, list->param_count);
   127f8:	bf28      	it	cs
   127fa:	4690      	movcs	r8, r2
	int index = 0;
   127fc:	462c      	mov	r4, r5
	state      = IDLE;
   127fe:	4b39      	ldr	r3, [pc, #228]	; (128e4 <at_parser_max_params_from_str+0x118>)
	if ((chr == AT_PARAM_SEPARATOR) ||
   12800:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 128e8 <at_parser_max_params_from_str+0x11c>
   12804:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) &&
   12806:	9a01      	ldr	r2, [sp, #4]
   12808:	7813      	ldrb	r3, [r2, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1280a:	2b00      	cmp	r3, #0
   1280c:	d04a      	beq.n	128a4 <at_parser_max_params_from_str+0xd8>
   1280e:	45a0      	cmp	r8, r4
   12810:	d948      	bls.n	128a4 <at_parser_max_params_from_str+0xd8>
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   12812:	2b20      	cmp	r3, #32
   12814:	d002      	beq.n	1281c <at_parser_max_params_from_str+0x50>
   12816:	3b09      	subs	r3, #9
   12818:	2b04      	cmp	r3, #4
   1281a:	d801      	bhi.n	12820 <at_parser_max_params_from_str+0x54>
			str++;
   1281c:	3201      	adds	r2, #1
   1281e:	9201      	str	r2, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   12820:	4621      	mov	r1, r4
   12822:	4638      	mov	r0, r7
   12824:	f7ff fe92 	bl	1254c <at_parse_detect_type>
   12828:	1c42      	adds	r2, r0, #1
   1282a:	d03b      	beq.n	128a4 <at_parser_max_params_from_str+0xd8>
		if (at_parse_process_element(&str, index, list) == -1) {
   1282c:	4632      	mov	r2, r6
   1282e:	4621      	mov	r1, r4
   12830:	4638      	mov	r0, r7
   12832:	f7ff ff07 	bl	12644 <at_parse_process_element>
   12836:	1c43      	adds	r3, r0, #1
   12838:	d034      	beq.n	128a4 <at_parser_max_params_from_str+0xd8>
		if (is_separator(*str)) {
   1283a:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) ||
   1283c:	781a      	ldrb	r2, [r3, #0]
   1283e:	3a2c      	subs	r2, #44	; 0x2c
   12840:	b2d2      	uxtb	r2, r2
   12842:	2a11      	cmp	r2, #17
   12844:	d81b      	bhi.n	1287e <at_parser_max_params_from_str+0xb2>
   12846:	fa2a f202 	lsr.w	r2, sl, r2
   1284a:	07d1      	lsls	r1, r2, #31
   1284c:	d517      	bpl.n	1287e <at_parser_max_params_from_str+0xb2>
			if (is_lfcr(*(str+1))) {
   1284e:	785b      	ldrb	r3, [r3, #1]
	if ((chr == '\r') ||
   12850:	2b0d      	cmp	r3, #13
   12852:	d001      	beq.n	12858 <at_parser_max_params_from_str+0x8c>
   12854:	2b0a      	cmp	r3, #10
   12856:	d10f      	bne.n	12878 <at_parser_max_params_from_str+0xac>
				index++;
   12858:	3401      	adds	r4, #1
				if (index == max_params) {
   1285a:	45a0      	cmp	r8, r4
   1285c:	d039      	beq.n	128d2 <at_parser_max_params_from_str+0x106>
				if (at_parse_detect_type(&str, index) == -1) {
   1285e:	4621      	mov	r1, r4
   12860:	4638      	mov	r0, r7
   12862:	f7ff fe73 	bl	1254c <at_parse_detect_type>
   12866:	1c42      	adds	r2, r0, #1
   12868:	d01c      	beq.n	128a4 <at_parser_max_params_from_str+0xd8>
				if (at_parse_process_element(&str,
   1286a:	4632      	mov	r2, r6
   1286c:	4621      	mov	r1, r4
   1286e:	4638      	mov	r0, r7
   12870:	f7ff fee8 	bl	12644 <at_parse_process_element>
   12874:	1c43      	adds	r3, r0, #1
   12876:	d015      	beq.n	128a4 <at_parser_max_params_from_str+0xd8>
			str++;
   12878:	9b01      	ldr	r3, [sp, #4]
   1287a:	3301      	adds	r3, #1
   1287c:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   1287e:	9a01      	ldr	r2, [sp, #4]
   12880:	7813      	ldrb	r3, [r2, #0]
   12882:	2b0d      	cmp	r3, #13
   12884:	d11e      	bne.n	128c4 <at_parser_max_params_from_str+0xf8>
   12886:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   12888:	7813      	ldrb	r3, [r2, #0]
   1288a:	4611      	mov	r1, r2
   1288c:	2b0d      	cmp	r3, #13
   1288e:	f102 0201 	add.w	r2, r2, #1
   12892:	d0f9      	beq.n	12888 <at_parser_max_params_from_str+0xbc>
   12894:	2b0a      	cmp	r3, #10
   12896:	d0f7      	beq.n	12888 <at_parser_max_params_from_str+0xbc>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12898:	b11b      	cbz	r3, 128a2 <at_parser_max_params_from_str+0xd6>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1289a:	2b2b      	cmp	r3, #43	; 0x2b
   1289c:	d001      	beq.n	128a2 <at_parser_max_params_from_str+0xd6>
   1289e:	2b25      	cmp	r3, #37	; 0x25
   128a0:	d112      	bne.n	128c8 <at_parser_max_params_from_str+0xfc>
				str += i;
   128a2:	9101      	str	r1, [sp, #4]
	*at_params_str = str;
   128a4:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   128a6:	b9b5      	cbnz	r5, 128d6 <at_parser_max_params_from_str+0x10a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   128a8:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   128aa:	2a00      	cmp	r2, #0
   128ac:	bf0c      	ite	eq
   128ae:	2000      	moveq	r0, #0
   128b0:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   128b4:	f1b9 0f00 	cmp.w	r9, #0
   128b8:	d001      	beq.n	128be <at_parser_max_params_from_str+0xf2>
		*next_param_str = (char *)at_params_str;
   128ba:	f8c9 3000 	str.w	r3, [r9]
	}

	return err;
}
   128be:	b002      	add	sp, #8
   128c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if ((chr == '\r') ||
   128c4:	2b0a      	cmp	r3, #10
   128c6:	d0de      	beq.n	12886 <at_parser_max_params_from_str+0xba>
		index++;
   128c8:	3401      	adds	r4, #1
			oversized = true;
   128ca:	45a0      	cmp	r8, r4
   128cc:	bf08      	it	eq
   128ce:	2501      	moveq	r5, #1
   128d0:	e799      	b.n	12806 <at_parser_max_params_from_str+0x3a>
					oversized = true;
   128d2:	2501      	movs	r5, #1
   128d4:	e7e6      	b.n	128a4 <at_parser_max_params_from_str+0xd8>
		return -E2BIG;
   128d6:	f06f 0006 	mvn.w	r0, #6
   128da:	e7eb      	b.n	128b4 <at_parser_max_params_from_str+0xe8>
		return -EINVAL;
   128dc:	f06f 0015 	mvn.w	r0, #21
   128e0:	e7ed      	b.n	128be <at_parser_max_params_from_str+0xf2>
   128e2:	bf00      	nop
   128e4:	20027402 	.word	0x20027402
   128e8:	00024001 	.word	0x00024001

000128ec <abi_getter>:
extern const struct fw_info_abi * const _ext_abis_start[];
extern const u32_t _ext_abis_size;
__noinit fw_info_abi_getter abi_getter_in;

int abi_getter(u32_t id, u32_t index, const struct fw_info_abi **abi)
{
   128ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!abi) {
   128ee:	b1da      	cbz	r2, 12928 <abi_getter+0x3c>
		return -EFAULT;
	}

	bool id_found = false;

	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   128f0:	2300      	movs	r3, #0
	bool id_found = false;
   128f2:	461c      	mov	r4, r3
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   128f4:	4e0e      	ldr	r6, [pc, #56]	; (12930 <abi_getter+0x44>)
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
   128f6:	4f0f      	ldr	r7, [pc, #60]	; (12934 <abi_getter+0x48>)
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   128f8:	42b3      	cmp	r3, r6
   128fa:	d306      	bcc.n	1290a <abi_getter+0x1e>
				*abi = ext_abi;
				return 0;
			}
		}
	}
	return id_found ? -EBADF : -ENOENT;
   128fc:	2c00      	cmp	r4, #0
   128fe:	bf14      	ite	ne
   12900:	f06f 0008 	mvnne.w	r0, #8
   12904:	f06f 0001 	mvneq.w	r0, #1
   12908:	e009      	b.n	1291e <abi_getter+0x32>
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
   1290a:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
		if (ext_abi->abi_id == id) {
   1290e:	f8d5 c00c 	ldr.w	ip, [r5, #12]
   12912:	4560      	cmp	r0, ip
   12914:	d106      	bne.n	12924 <abi_getter+0x38>
			if (index-- == 0) {
   12916:	1e4c      	subs	r4, r1, #1
   12918:	b911      	cbnz	r1, 12920 <abi_getter+0x34>
				return 0;
   1291a:	4608      	mov	r0, r1
				*abi = ext_abi;
   1291c:	6015      	str	r5, [r2, #0]
}
   1291e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (index-- == 0) {
   12920:	4621      	mov	r1, r4
			id_found = true;
   12922:	2401      	movs	r4, #1
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   12924:	3301      	adds	r3, #1
   12926:	e7e7      	b.n	128f8 <abi_getter+0xc>
		return -EFAULT;
   12928:	f06f 000d 	mvn.w	r0, #13
   1292c:	e7f7      	b.n	1291e <abi_getter+0x32>
   1292e:	bf00      	nop
   12930:	00000000 	.word	0x00000000
   12934:	00028df8 	.word	0x00028df8

00012938 <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   12938:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   1293a:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   1293c:	b118      	cbz	r0, 12946 <callback_worker+0xe>
		data->callback(data->data);
   1293e:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   12942:	300c      	adds	r0, #12
   12944:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   12946:	a901      	add	r1, sp, #4
   12948:	4802      	ldr	r0, [pc, #8]	; (12954 <callback_worker+0x1c>)
   1294a:	f00f fb51 	bl	21ff0 <k_mem_slab_free>
}
   1294e:	b003      	add	sp, #12
   12950:	f85d fb04 	ldr.w	pc, [sp], #4
   12954:	2002d508 	.word	0x2002d508

00012958 <open_socket>:
{
   12958:	b508      	push	{r3, lr}
	return socket_ops->socket(family, type, proto);
   1295a:	4b09      	ldr	r3, [pc, #36]	; (12980 <open_socket+0x28>)
   1295c:	f240 2201 	movw	r2, #513	; 0x201
   12960:	681b      	ldr	r3, [r3, #0]
   12962:	2100      	movs	r1, #0
   12964:	681b      	ldr	r3, [r3, #0]
   12966:	2066      	movs	r0, #102	; 0x66
   12968:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, 0, NPROTO_AT);
   1296a:	4b06      	ldr	r3, [pc, #24]	; (12984 <open_socket+0x2c>)
   1296c:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   1296e:	3001      	adds	r0, #1
   12970:	d104      	bne.n	1297c <open_socket+0x24>
   12972:	f00f f987 	bl	21c84 <z_impl_z_errno>
		return -errno;
   12976:	6800      	ldr	r0, [r0, #0]
   12978:	4240      	negs	r0, r0
}
   1297a:	bd08      	pop	{r3, pc}
	return 0;
   1297c:	2000      	movs	r0, #0
   1297e:	e7fc      	b.n	1297a <open_socket+0x22>
   12980:	20020314 	.word	0x20020314
   12984:	200203d8 	.word	0x200203d8

00012988 <at_write>:
		}
	}
}

static inline int at_write(const char *const cmd, enum at_cmd_state *state)
{
   12988:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1298c:	4681      	mov	r9, r0
   1298e:	460e      	mov	r6, r1
	int bytes_sent;
	int bytes_to_send = strlen(cmd);
   12990:	f011 ff62 	bl	24858 <strlen>
	struct return_state_object ret;

	LOG_DBG("Sending command %s", log_strdup(cmd));
   12994:	f04f 0804 	mov.w	r8, #4
   12998:	f04f 0500 	mov.w	r5, #0
   1299c:	4b31      	ldr	r3, [pc, #196]	; (12a64 <at_write+0xdc>)
   1299e:	4c32      	ldr	r4, [pc, #200]	; (12a68 <at_write+0xe0>)
	int bytes_to_send = strlen(cmd);
   129a0:	4607      	mov	r7, r0
	LOG_DBG("Sending command %s", log_strdup(cmd));
   129a2:	4648      	mov	r0, r9
   129a4:	1ae4      	subs	r4, r4, r3
   129a6:	f7fc fcb9 	bl	f31c <log_strdup>
   129aa:	f368 0502 	bfi	r5, r8, #0, #3
   129ae:	f36f 05c5 	bfc	r5, #3, #3
   129b2:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   129b6:	f364 158f 	bfi	r5, r4, #6, #10
   129ba:	462b      	mov	r3, r5
   129bc:	4602      	mov	r2, r0
   129be:	492b      	ldr	r1, [pc, #172]	; (12a6c <at_write+0xe4>)
   129c0:	482b      	ldr	r0, [pc, #172]	; (12a70 <at_write+0xe8>)
   129c2:	f011 fa59 	bl	23e78 <log_2>
	return socket_ops->send(sock, buf, len, flags);
   129c6:	4b2b      	ldr	r3, [pc, #172]	; (12a74 <at_write+0xec>)
   129c8:	482b      	ldr	r0, [pc, #172]	; (12a78 <at_write+0xf0>)
   129ca:	681b      	ldr	r3, [r3, #0]
   129cc:	463a      	mov	r2, r7
   129ce:	6add      	ldr	r5, [r3, #44]	; 0x2c
   129d0:	4649      	mov	r1, r9
   129d2:	2300      	movs	r3, #0
   129d4:	6800      	ldr	r0, [r0, #0]
   129d6:	47a8      	blx	r5

	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);

	if (bytes_sent == -1) {
   129d8:	1c43      	adds	r3, r0, #1
   129da:	4605      	mov	r5, r0
   129dc:	d11e      	bne.n	12a1c <at_write+0x94>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   129de:	2701      	movs	r7, #1
   129e0:	f04f 0500 	mov.w	r5, #0
   129e4:	f367 0502 	bfi	r5, r7, #0, #3
   129e8:	f36f 05c5 	bfc	r5, #3, #3
   129ec:	f364 158f 	bfi	r5, r4, #6, #10
   129f0:	f00f f948 	bl	21c84 <z_impl_z_errno>
   129f4:	462a      	mov	r2, r5
   129f6:	6801      	ldr	r1, [r0, #0]
   129f8:	4820      	ldr	r0, [pc, #128]	; (12a7c <at_write+0xf4>)
   129fa:	f011 fa29 	bl	23e50 <log_1>
   129fe:	f00f f941 	bl	21c84 <z_impl_z_errno>
		ret.code  = -errno;
   12a02:	6803      	ldr	r3, [r0, #0]
		ret.state = AT_CMD_ERROR;
   12a04:	f88d 7004 	strb.w	r7, [sp, #4]
		ret.code  = -errno;
   12a08:	425b      	negs	r3, r3
   12a0a:	9300      	str	r3, [sp, #0]
				"same as expected (%d)",
				bytes_sent, bytes_to_send);
		}
	}

	if (state) {
   12a0c:	b116      	cbz	r6, 12a14 <at_write+0x8c>
		*state = ret.state;
   12a0e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   12a12:	7033      	strb	r3, [r6, #0]
	}

	return ret.code;
}
   12a14:	9800      	ldr	r0, [sp, #0]
   12a16:	b003      	add	sp, #12
   12a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&q, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(q, data, timeout);
   12a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12a20:	4669      	mov	r1, sp
   12a22:	4817      	ldr	r0, [pc, #92]	; (12a80 <at_write+0xf8>)
   12a24:	f00f fc00 	bl	22228 <z_impl_k_msgq_get>
		LOG_DBG("Bytes sent: %d", bytes_sent);
   12a28:	f04f 0300 	mov.w	r3, #0
   12a2c:	f368 0302 	bfi	r3, r8, #0, #3
   12a30:	f36f 03c5 	bfc	r3, #3, #3
   12a34:	f364 138f 	bfi	r3, r4, #6, #10
   12a38:	462a      	mov	r2, r5
   12a3a:	490c      	ldr	r1, [pc, #48]	; (12a6c <at_write+0xe4>)
   12a3c:	4811      	ldr	r0, [pc, #68]	; (12a84 <at_write+0xfc>)
   12a3e:	f011 fa1b 	bl	23e78 <log_2>
		if (bytes_sent != bytes_to_send) {
   12a42:	42af      	cmp	r7, r5
   12a44:	d0e2      	beq.n	12a0c <at_write+0x84>
			LOG_ERR("Bytes sent (%d) was not the "
   12a46:	2201      	movs	r2, #1
   12a48:	f04f 0300 	mov.w	r3, #0
   12a4c:	f362 0302 	bfi	r3, r2, #0, #3
   12a50:	f36f 03c5 	bfc	r3, #3, #3
   12a54:	f364 138f 	bfi	r3, r4, #6, #10
   12a58:	463a      	mov	r2, r7
   12a5a:	4629      	mov	r1, r5
   12a5c:	480a      	ldr	r0, [pc, #40]	; (12a88 <at_write+0x100>)
   12a5e:	f011 fa0b 	bl	23e78 <log_2>
   12a62:	e7d3      	b.n	12a0c <at_write+0x84>
   12a64:	00026560 	.word	0x00026560
   12a68:	00026568 	.word	0x00026568
   12a6c:	00028a13 	.word	0x00028a13
   12a70:	00028b0d 	.word	0x00028b0d
   12a74:	20020314 	.word	0x20020314
   12a78:	200203d8 	.word	0x200203d8
   12a7c:	00028b24 	.word	0x00028b24
   12a80:	2002d598 	.word	0x2002d598
   12a84:	00028b47 	.word	0x00028b47
   12a88:	00028b5a 	.word	0x00028b5a

00012a8c <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   12a8c:	b570      	push	{r4, r5, r6, lr}
   12a8e:	b086      	sub	sp, #24
	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   12a90:	f7ff ff62 	bl	12958 <open_socket>
   12a94:	4d1e      	ldr	r5, [pc, #120]	; (12b10 <at_cmd_driver_init+0x84>)
   12a96:	4b1f      	ldr	r3, [pc, #124]	; (12b14 <at_cmd_driver_init+0x88>)
	if (err) {
   12a98:	4604      	mov	r4, r0
   12a9a:	1aed      	subs	r5, r5, r3
   12a9c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   12aa0:	b178      	cbz	r0, 12ac2 <at_cmd_driver_init+0x36>
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   12aa2:	f04f 0200 	mov.w	r2, #0
   12aa6:	2301      	movs	r3, #1
   12aa8:	f363 0202 	bfi	r2, r3, #0, #3
   12aac:	f36f 02c5 	bfc	r2, #3, #3
   12ab0:	4601      	mov	r1, r0
   12ab2:	4819      	ldr	r0, [pc, #100]	; (12b18 <at_cmd_driver_init+0x8c>)
   12ab4:	f365 128f 	bfi	r2, r5, #6, #10
			K_THREAD_STACK_SIZEOF(socket_thread_stack),
			socket_thread_fn,
			NULL, NULL, NULL,
			THREAD_PRIORITY, 0, K_NO_WAIT);

	LOG_DBG("Common AT socket processing thread created");
   12ab8:	f011 f9ca 	bl	23e50 <log_1>

	return 0;
}
   12abc:	4620      	mov	r0, r4
   12abe:	b006      	add	sp, #24
   12ac0:	bd70      	pop	{r4, r5, r6, pc}
	LOG_DBG("Common AT socket created");
   12ac2:	2604      	movs	r6, #4
   12ac4:	f04f 0200 	mov.w	r2, #0
   12ac8:	f366 0202 	bfi	r2, r6, #0, #3
   12acc:	f360 02c5 	bfi	r2, r0, #3, #3
   12ad0:	f365 128f 	bfi	r2, r5, #6, #10
   12ad4:	4911      	ldr	r1, [pc, #68]	; (12b1c <at_cmd_driver_init+0x90>)
   12ad6:	4812      	ldr	r0, [pc, #72]	; (12b20 <at_cmd_driver_init+0x94>)
   12ad8:	f011 f9ba 	bl	23e50 <log_1>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12adc:	230a      	movs	r3, #10
   12ade:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12ae2:	e9cd 4302 	strd	r4, r3, [sp, #8]
   12ae6:	490f      	ldr	r1, [pc, #60]	; (12b24 <at_cmd_driver_init+0x98>)
   12ae8:	e9cd 4404 	strd	r4, r4, [sp, #16]
   12aec:	e9cd 4400 	strd	r4, r4, [sp]
   12af0:	4b0d      	ldr	r3, [pc, #52]	; (12b28 <at_cmd_driver_init+0x9c>)
   12af2:	480e      	ldr	r0, [pc, #56]	; (12b2c <at_cmd_driver_init+0xa0>)
   12af4:	f010 f858 	bl	22ba8 <z_impl_k_thread_create>
	LOG_DBG("Common AT socket processing thread created");
   12af8:	f04f 0200 	mov.w	r2, #0
   12afc:	f366 0202 	bfi	r2, r6, #0, #3
   12b00:	f364 02c5 	bfi	r2, r4, #3, #3
   12b04:	f365 128f 	bfi	r2, r5, #6, #10
   12b08:	4904      	ldr	r1, [pc, #16]	; (12b1c <at_cmd_driver_init+0x90>)
   12b0a:	4809      	ldr	r0, [pc, #36]	; (12b30 <at_cmd_driver_init+0xa4>)
   12b0c:	e7d4      	b.n	12ab8 <at_cmd_driver_init+0x2c>
   12b0e:	bf00      	nop
   12b10:	00026568 	.word	0x00026568
   12b14:	00026560 	.word	0x00026560
   12b18:	00028a4f 	.word	0x00028a4f
   12b1c:	00028a3c 	.word	0x00028a3c
   12b20:	00028a71 	.word	0x00028a71
   12b24:	20027c50 	.word	0x20027c50
   12b28:	00012b35 	.word	0x00012b35
   12b2c:	200203ec 	.word	0x200203ec
   12b30:	00028a8e 	.word	0x00028a8e

00012b34 <socket_thread_fn>:
	LOG_DBG("AT socket thread started");
   12b34:	2304      	movs	r3, #4
   12b36:	f04f 0200 	mov.w	r2, #0
{
   12b3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_DBG("AT socket thread started");
   12b3e:	f363 0202 	bfi	r2, r3, #0, #3
   12b42:	499d      	ldr	r1, [pc, #628]	; (12db8 <socket_thread_fn+0x284>)
   12b44:	4b9d      	ldr	r3, [pc, #628]	; (12dbc <socket_thread_fn+0x288>)
   12b46:	f36f 02c5 	bfc	r2, #3, #3
   12b4a:	1a5b      	subs	r3, r3, r1
   12b4c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
{
   12b50:	b087      	sub	sp, #28
	LOG_DBG("AT socket thread started");
   12b52:	f363 128f 	bfi	r2, r3, #6, #10
   12b56:	499a      	ldr	r1, [pc, #616]	; (12dc0 <socket_thread_fn+0x28c>)
   12b58:	489a      	ldr	r0, [pc, #616]	; (12dc4 <socket_thread_fn+0x290>)
   12b5a:	9300      	str	r3, [sp, #0]
   12b5c:	f011 f978 	bl	23e50 <log_1>
		ret.code  = 0;
   12b60:	2400      	movs	r4, #0
	return socket_ops->recv(sock, buf, max_len, flags);
   12b62:	f8df b284 	ldr.w	fp, [pc, #644]	; 12de8 <socket_thread_fn+0x2b4>
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   12b66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12b6a:	a903      	add	r1, sp, #12
   12b6c:	4896      	ldr	r0, [pc, #600]	; (12dc8 <socket_thread_fn+0x294>)
   12b6e:	f00f fa11 	bl	21f94 <k_mem_slab_alloc>
		item->callback = NULL;
   12b72:	9903      	ldr	r1, [sp, #12]
   12b74:	f8db 3000 	ldr.w	r3, [fp]
   12b78:	4894      	ldr	r0, [pc, #592]	; (12dcc <socket_thread_fn+0x298>)
   12b7a:	f8c1 4a98 	str.w	r4, [r1, #2712]	; 0xa98
   12b7e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
   12b80:	310c      	adds	r1, #12
		ret.code  = 0;
   12b82:	9404      	str	r4, [sp, #16]
		ret.state = AT_CMD_OK;
   12b84:	f88d 4014 	strb.w	r4, [sp, #20]
   12b88:	4623      	mov	r3, r4
   12b8a:	f640 228c 	movw	r2, #2700	; 0xa8c
   12b8e:	6800      	ldr	r0, [r0, #0]
   12b90:	47a8      	blx	r5
		if (bytes_read < 0) {
   12b92:	1e01      	subs	r1, r0, #0
   12b94:	da5e      	bge.n	12c54 <socket_thread_fn+0x120>
			LOG_ERR("AT socket recv failed with err %d",
   12b96:	2501      	movs	r5, #1
   12b98:	9b00      	ldr	r3, [sp, #0]
   12b9a:	f365 0a02 	bfi	sl, r5, #0, #3
   12b9e:	f364 0ac5 	bfi	sl, r4, #3, #3
   12ba2:	f363 1a8f 	bfi	sl, r3, #6, #10
   12ba6:	4652      	mov	r2, sl
   12ba8:	4889      	ldr	r0, [pc, #548]	; (12dd0 <socket_thread_fn+0x29c>)
   12baa:	f011 f951 	bl	23e50 <log_1>
	return socket_ops->close(sock);
   12bae:	f8db 3000 	ldr.w	r3, [fp]
   12bb2:	4a86      	ldr	r2, [pc, #536]	; (12dcc <socket_thread_fn+0x298>)
   12bb4:	685b      	ldr	r3, [r3, #4]
   12bb6:	6810      	ldr	r0, [r2, #0]
   12bb8:	4798      	blx	r3
			if ((close(common_socket_fd) == 0) &&
   12bba:	2800      	cmp	r0, #0
   12bbc:	d130      	bne.n	12c20 <socket_thread_fn+0xec>
			    (open_socket() == 0)) {
   12bbe:	f7ff fecb 	bl	12958 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   12bc2:	bb68      	cbnz	r0, 12c20 <socket_thread_fn+0xec>
				LOG_INF("AT socket recovered");
   12bc4:	2303      	movs	r3, #3
   12bc6:	f363 0602 	bfi	r6, r3, #0, #3
   12bca:	9b00      	ldr	r3, [sp, #0]
   12bcc:	f360 06c5 	bfi	r6, r0, #3, #3
   12bd0:	f363 168f 	bfi	r6, r3, #6, #10
   12bd4:	4631      	mov	r1, r6
   12bd6:	487f      	ldr	r0, [pc, #508]	; (12dd4 <socket_thread_fn+0x2a0>)
   12bd8:	f011 f92d 	bl	23e36 <log_0>
				ret.state = AT_CMD_ERROR;
   12bdc:	f88d 5014 	strb.w	r5, [sp, #20]
   12be0:	f00f f850 	bl	21c84 <z_impl_z_errno>
				ret.code  = -errno;
   12be4:	6803      	ldr	r3, [r0, #0]
   12be6:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   12be8:	9304      	str	r3, [sp, #16]
		if (item->callback == NULL) {
   12bea:	9903      	ldr	r1, [sp, #12]
   12bec:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   12bf0:	2b00      	cmp	r3, #0
   12bf2:	f040 80bd 	bne.w	12d70 <socket_thread_fn+0x23c>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   12bf6:	a903      	add	r1, sp, #12
   12bf8:	4873      	ldr	r0, [pc, #460]	; (12dc8 <socket_thread_fn+0x294>)
   12bfa:	f00f f9f9 	bl	21ff0 <k_mem_slab_free>
	return z_impl_k_sem_count_get(sem);
   12bfe:	4b76      	ldr	r3, [pc, #472]	; (12dd8 <socket_thread_fn+0x2a4>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   12c00:	689b      	ldr	r3, [r3, #8]
   12c02:	2b00      	cmp	r3, #0
   12c04:	d1ac      	bne.n	12b60 <socket_thread_fn+0x2c>
   12c06:	f89d 2014 	ldrb.w	r2, [sp, #20]
   12c0a:	2a04      	cmp	r2, #4
   12c0c:	d0a8      	beq.n	12b60 <socket_thread_fn+0x2c>
			current_cmd_handler = NULL;
   12c0e:	4a73      	ldr	r2, [pc, #460]	; (12ddc <socket_thread_fn+0x2a8>)
   12c10:	6013      	str	r3, [r2, #0]
	return z_impl_k_msgq_put(q, data, timeout);
   12c12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12c16:	a904      	add	r1, sp, #16
   12c18:	4871      	ldr	r0, [pc, #452]	; (12de0 <socket_thread_fn+0x2ac>)
   12c1a:	f00f fab3 	bl	22184 <z_impl_k_msgq_put>
   12c1e:	e79f      	b.n	12b60 <socket_thread_fn+0x2c>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   12c20:	2301      	movs	r3, #1
   12c22:	f04f 0400 	mov.w	r4, #0
   12c26:	f363 0402 	bfi	r4, r3, #0, #3
   12c2a:	9b00      	ldr	r3, [sp, #0]
   12c2c:	f36f 04c5 	bfc	r4, #3, #3
   12c30:	f363 148f 	bfi	r4, r3, #6, #10
   12c34:	f00f f826 	bl	21c84 <z_impl_z_errno>
   12c38:	4622      	mov	r2, r4
   12c3a:	6801      	ldr	r1, [r0, #0]
   12c3c:	4869      	ldr	r0, [pc, #420]	; (12de4 <socket_thread_fn+0x2b0>)
   12c3e:	f011 f907 	bl	23e50 <log_1>
   12c42:	4b69      	ldr	r3, [pc, #420]	; (12de8 <socket_thread_fn+0x2b4>)
   12c44:	4a61      	ldr	r2, [pc, #388]	; (12dcc <socket_thread_fn+0x298>)
   12c46:	681b      	ldr	r3, [r3, #0]
   12c48:	6810      	ldr	r0, [r2, #0]
   12c4a:	685b      	ldr	r3, [r3, #4]
   12c4c:	4798      	blx	r3
}
   12c4e:	b007      	add	sp, #28
   12c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (bytes_read == sizeof(item->data) ||
   12c54:	f640 238c 	movw	r3, #2700	; 0xa8c
   12c58:	4299      	cmp	r1, r3
   12c5a:	d003      	beq.n	12c64 <socket_thread_fn+0x130>
			   item->data[bytes_read - 1] != '\0') {
   12c5c:	9803      	ldr	r0, [sp, #12]
   12c5e:	4401      	add	r1, r0
		} else if (bytes_read == sizeof(item->data) ||
   12c60:	7acd      	ldrb	r5, [r1, #11]
   12c62:	b175      	cbz	r5, 12c82 <socket_thread_fn+0x14e>
			LOG_ERR("AT message to large for reception buffer or "
   12c64:	2301      	movs	r3, #1
   12c66:	f363 0702 	bfi	r7, r3, #0, #3
   12c6a:	9b00      	ldr	r3, [sp, #0]
   12c6c:	f36f 07c5 	bfc	r7, #3, #3
   12c70:	f363 178f 	bfi	r7, r3, #6, #10
   12c74:	4639      	mov	r1, r7
   12c76:	485d      	ldr	r0, [pc, #372]	; (12dec <socket_thread_fn+0x2b8>)
   12c78:	f011 f8dd 	bl	23e36 <log_0>
			ret.code  = -ENOBUFS;
   12c7c:	f06f 0336 	mvn.w	r3, #54	; 0x36
   12c80:	e7b2      	b.n	12be8 <socket_thread_fn+0xb4>
		LOG_DBG("at_cmd_rx: %s", log_strdup(item->data));
   12c82:	f04f 0b04 	mov.w	fp, #4
   12c86:	9b00      	ldr	r3, [sp, #0]
   12c88:	f36b 0802 	bfi	r8, fp, #0, #3
   12c8c:	f365 08c5 	bfi	r8, r5, #3, #3
   12c90:	300c      	adds	r0, #12
   12c92:	f363 188f 	bfi	r8, r3, #6, #10
   12c96:	f7fc fb41 	bl	f31c <log_strdup>
   12c9a:	4643      	mov	r3, r8
   12c9c:	4602      	mov	r2, r0
   12c9e:	4948      	ldr	r1, [pc, #288]	; (12dc0 <socket_thread_fn+0x28c>)
   12ca0:	4853      	ldr	r0, [pc, #332]	; (12df0 <socket_thread_fn+0x2bc>)
   12ca2:	f011 f8e9 	bl	23e78 <log_2>
		payload_len = get_return_code(item->data, &ret);
   12ca6:	9b03      	ldr	r3, [sp, #12]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   12ca8:	4952      	ldr	r1, [pc, #328]	; (12df4 <socket_thread_fn+0x2c0>)
		payload_len = get_return_code(item->data, &ret);
   12caa:	f103 040c 	add.w	r4, r3, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   12cae:	4620      	mov	r0, r4
	ret->state = AT_CMD_NOTIFICATION;
   12cb0:	f88d b014 	strb.w	fp, [sp, #20]
		payload_len = get_return_code(item->data, &ret);
   12cb4:	9301      	str	r3, [sp, #4]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   12cb6:	f011 fd84 	bl	247c2 <strstr>
		if (tmpstr) {
   12cba:	4683      	mov	fp, r0
   12cbc:	b1f8      	cbz	r0, 12cfe <socket_thread_fn+0x1ca>
			ret->state = AT_CMD_OK;
   12cbe:	f88d 5014 	strb.w	r5, [sp, #20]
			ret->code  = 0;
   12cc2:	9504      	str	r5, [sp, #16]
		buf[new_len++] = '\0';
   12cc4:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   12cc6:	ebab 0204 	sub.w	r2, fp, r4
		buf[new_len++] = '\0';
   12cca:	3201      	adds	r2, #1
   12ccc:	f88b 3000 	strb.w	r3, [fp]
		if (ret.state != AT_CMD_NOTIFICATION) {
   12cd0:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12cd4:	2b04      	cmp	r3, #4
   12cd6:	d066      	beq.n	12da6 <socket_thread_fn+0x272>
			if ((response_buf_len > 0) &&
   12cd8:	4b47      	ldr	r3, [pc, #284]	; (12df8 <socket_thread_fn+0x2c4>)
   12cda:	681b      	ldr	r3, [r3, #0]
   12cdc:	2b00      	cmp	r3, #0
   12cde:	d042      	beq.n	12d66 <socket_thread_fn+0x232>
			    (response_buf != NULL)) {
   12ce0:	4d46      	ldr	r5, [pc, #280]	; (12dfc <socket_thread_fn+0x2c8>)
   12ce2:	6828      	ldr	r0, [r5, #0]
			if ((response_buf_len > 0) &&
   12ce4:	2800      	cmp	r0, #0
   12ce6:	d03e      	beq.n	12d66 <socket_thread_fn+0x232>
				if (response_buf_len > payload_len) {
   12ce8:	4293      	cmp	r3, r2
   12cea:	d92c      	bls.n	12d46 <socket_thread_fn+0x212>
					memcpy(response_buf, item->data,
   12cec:	9903      	ldr	r1, [sp, #12]
   12cee:	310c      	adds	r1, #12
   12cf0:	f011 fde6 	bl	248c0 <memcpy>
				response_buf_len = 0;
   12cf4:	2300      	movs	r3, #0
   12cf6:	4a40      	ldr	r2, [pc, #256]	; (12df8 <socket_thread_fn+0x2c4>)
				response_buf     = NULL;
   12cf8:	602b      	str	r3, [r5, #0]
				response_buf_len = 0;
   12cfa:	6013      	str	r3, [r2, #0]
				goto next;
   12cfc:	e775      	b.n	12bea <socket_thread_fn+0xb6>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   12cfe:	4940      	ldr	r1, [pc, #256]	; (12e00 <socket_thread_fn+0x2cc>)
   12d00:	4620      	mov	r0, r4
   12d02:	f011 fd5e 	bl	247c2 <strstr>
		if (tmpstr) {
   12d06:	4683      	mov	fp, r0
   12d08:	b140      	cbz	r0, 12d1c <socket_thread_fn+0x1e8>
			ret->state = AT_CMD_ERROR_CMS;
   12d0a:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   12d0c:	9801      	ldr	r0, [sp, #4]
			ret->state = AT_CMD_ERROR_CME;
   12d0e:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   12d12:	3017      	adds	r0, #23
   12d14:	f011 fc43 	bl	2459e <atoi>
   12d18:	9004      	str	r0, [sp, #16]
   12d1a:	e7d3      	b.n	12cc4 <socket_thread_fn+0x190>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   12d1c:	4939      	ldr	r1, [pc, #228]	; (12e04 <socket_thread_fn+0x2d0>)
   12d1e:	4620      	mov	r0, r4
   12d20:	f011 fd4f 	bl	247c2 <strstr>
		if (tmpstr) {
   12d24:	4683      	mov	fp, r0
   12d26:	b108      	cbz	r0, 12d2c <socket_thread_fn+0x1f8>
			ret->state = AT_CMD_ERROR_CME;
   12d28:	2303      	movs	r3, #3
   12d2a:	e7ef      	b.n	12d0c <socket_thread_fn+0x1d8>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   12d2c:	4936      	ldr	r1, [pc, #216]	; (12e08 <socket_thread_fn+0x2d4>)
   12d2e:	4620      	mov	r0, r4
   12d30:	f011 fd47 	bl	247c2 <strstr>
		if (tmpstr) {
   12d34:	4683      	mov	fp, r0
   12d36:	b388      	cbz	r0, 12d9c <socket_thread_fn+0x268>
			ret->state = AT_CMD_ERROR;
   12d38:	2301      	movs	r3, #1
   12d3a:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code  = -ENOEXEC;
   12d3e:	f06f 0307 	mvn.w	r3, #7
   12d42:	9304      	str	r3, [sp, #16]
   12d44:	e7be      	b.n	12cc4 <socket_thread_fn+0x190>
					LOG_ERR("Response buffer not large "
   12d46:	2301      	movs	r3, #1
   12d48:	f363 0902 	bfi	r9, r3, #0, #3
   12d4c:	9b00      	ldr	r3, [sp, #0]
   12d4e:	f36f 09c5 	bfc	r9, #3, #3
   12d52:	f363 198f 	bfi	r9, r3, #6, #10
   12d56:	4649      	mov	r1, r9
   12d58:	482c      	ldr	r0, [pc, #176]	; (12e0c <socket_thread_fn+0x2d8>)
   12d5a:	f011 f86c 	bl	23e36 <log_0>
					ret.code  = -EMSGSIZE;
   12d5e:	f06f 0323 	mvn.w	r3, #35	; 0x23
   12d62:	9304      	str	r3, [sp, #16]
   12d64:	e7c6      	b.n	12cf4 <socket_thread_fn+0x1c0>
		if (payload_len == 0) {
   12d66:	2a00      	cmp	r2, #0
   12d68:	f43f af3f 	beq.w	12bea <socket_thread_fn+0xb6>
			item->callback = current_cmd_handler;
   12d6c:	4b1b      	ldr	r3, [pc, #108]	; (12ddc <socket_thread_fn+0x2a8>)
   12d6e:	e01e      	b.n	12dae <socket_thread_fn+0x27a>
   12d70:	4b27      	ldr	r3, [pc, #156]	; (12e10 <socket_thread_fn+0x2dc>)
   12d72:	2200      	movs	r2, #0
   12d74:	604b      	str	r3, [r1, #4]
   12d76:	460b      	mov	r3, r1
   12d78:	600a      	str	r2, [r1, #0]
   12d7a:	f843 2f08 	str.w	r2, [r3, #8]!
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12d7e:	e8d3 2fef 	ldaex	r2, [r3]
   12d82:	f042 0001 	orr.w	r0, r2, #1
   12d86:	e8c3 0fe4 	stlex	r4, r0, [r3]
   12d8a:	2c00      	cmp	r4, #0
   12d8c:	d1f7      	bne.n	12d7e <socket_thread_fn+0x24a>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   12d8e:	07d3      	lsls	r3, r2, #31
   12d90:	f53f af35 	bmi.w	12bfe <socket_thread_fn+0xca>
		k_queue_append(&work_q->queue, work);
   12d94:	481f      	ldr	r0, [pc, #124]	; (12e14 <socket_thread_fn+0x2e0>)
   12d96:	f012 fefa 	bl	25b8e <k_queue_append>
   12d9a:	e730      	b.n	12bfe <socket_thread_fn+0xca>
		new_len = strlen(buf) + 1;
   12d9c:	4620      	mov	r0, r4
   12d9e:	f011 fd5b 	bl	24858 <strlen>
   12da2:	1c42      	adds	r2, r0, #1
   12da4:	e794      	b.n	12cd0 <socket_thread_fn+0x19c>
		if (payload_len == 0) {
   12da6:	2a00      	cmp	r2, #0
   12da8:	f43f af1f 	beq.w	12bea <socket_thread_fn+0xb6>
			item->callback = notification_handler;
   12dac:	4b1a      	ldr	r3, [pc, #104]	; (12e18 <socket_thread_fn+0x2e4>)
			item->callback = current_cmd_handler;
   12dae:	681a      	ldr	r2, [r3, #0]
   12db0:	9b03      	ldr	r3, [sp, #12]
   12db2:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
   12db6:	e718      	b.n	12bea <socket_thread_fn+0xb6>
   12db8:	00026560 	.word	0x00026560
   12dbc:	00026568 	.word	0x00026568
   12dc0:	00028a02 	.word	0x00028a02
   12dc4:	00028b8c 	.word	0x00028b8c
   12dc8:	2002d508 	.word	0x2002d508
   12dcc:	200203d8 	.word	0x200203d8
   12dd0:	00028ba9 	.word	0x00028ba9
   12dd4:	00028bcb 	.word	0x00028bcb
   12dd8:	2002d558 	.word	0x2002d558
   12ddc:	200203dc 	.word	0x200203dc
   12de0:	2002d598 	.word	0x2002d598
   12de4:	00028bdf 	.word	0x00028bdf
   12de8:	20020314 	.word	0x20020314
   12dec:	00028c16 	.word	0x00028c16
   12df0:	00028c60 	.word	0x00028c60
   12df4:	00027ff9 	.word	0x00027ff9
   12df8:	200203e8 	.word	0x200203e8
   12dfc:	200203e4 	.word	0x200203e4
   12e00:	00028c72 	.word	0x00028c72
   12e04:	00028c7e 	.word	0x00028c7e
   12e08:	00028c8a 	.word	0x00028c8a
   12e0c:	00028c90 	.word	0x00028c90
   12e10:	00012939 	.word	0x00012939
   12e14:	20025d3c 	.word	0x20025d3c
   12e18:	200203e0 	.word	0x200203e0

00012e1c <at_cmd_write>:
{
   12e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12e20:	4605      	mov	r5, r0
   12e22:	4688      	mov	r8, r1
   12e24:	4617      	mov	r7, r2
   12e26:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
   12e28:	4c0a      	ldr	r4, [pc, #40]	; (12e54 <at_cmd_write+0x38>)
   12e2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12e2e:	4620      	mov	r0, r4
   12e30:	f00f fe28 	bl	22a84 <z_impl_k_sem_take>
	response_buf     = buf;
   12e34:	4b08      	ldr	r3, [pc, #32]	; (12e58 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   12e36:	4631      	mov	r1, r6
	response_buf     = buf;
   12e38:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   12e3c:	4b07      	ldr	r3, [pc, #28]	; (12e5c <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   12e3e:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   12e40:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
   12e42:	f7ff fda1 	bl	12988 <at_write>
   12e46:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   12e48:	4620      	mov	r0, r4
   12e4a:	f00f fdef 	bl	22a2c <z_impl_k_sem_give>
}
   12e4e:	4628      	mov	r0, r5
   12e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12e54:	2002d558 	.word	0x2002d558
   12e58:	200203e4 	.word	0x200203e4
   12e5c:	200203e8 	.word	0x200203e8

00012e60 <at_cmd_set_notification_handler>:
	LOG_DBG("Setting notification handler to %p", handler);
   12e60:	2204      	movs	r2, #4
   12e62:	f04f 0300 	mov.w	r3, #0
{
   12e66:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("Setting notification handler to %p", handler);
   12e68:	f362 0302 	bfi	r3, r2, #0, #3
   12e6c:	4c15      	ldr	r4, [pc, #84]	; (12ec4 <at_cmd_set_notification_handler+0x64>)
   12e6e:	4a16      	ldr	r2, [pc, #88]	; (12ec8 <at_cmd_set_notification_handler+0x68>)
   12e70:	f36f 03c5 	bfc	r3, #3, #3
   12e74:	1aa4      	subs	r4, r4, r2
   12e76:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (notification_handler != NULL && handler != notification_handler) {
   12e7a:	4d14      	ldr	r5, [pc, #80]	; (12ecc <at_cmd_set_notification_handler+0x6c>)
	LOG_DBG("Setting notification handler to %p", handler);
   12e7c:	4602      	mov	r2, r0
   12e7e:	4914      	ldr	r1, [pc, #80]	; (12ed0 <at_cmd_set_notification_handler+0x70>)
{
   12e80:	4606      	mov	r6, r0
	LOG_DBG("Setting notification handler to %p", handler);
   12e82:	f364 138f 	bfi	r3, r4, #6, #10
   12e86:	4813      	ldr	r0, [pc, #76]	; (12ed4 <at_cmd_set_notification_handler+0x74>)
   12e88:	f010 fff6 	bl	23e78 <log_2>
	if (notification_handler != NULL && handler != notification_handler) {
   12e8c:	6829      	ldr	r1, [r5, #0]
   12e8e:	b169      	cbz	r1, 12eac <at_cmd_set_notification_handler+0x4c>
   12e90:	428e      	cmp	r6, r1
   12e92:	d00b      	beq.n	12eac <at_cmd_set_notification_handler+0x4c>
		LOG_WRN("Forgetting prior notification handler %p",
   12e94:	f04f 0200 	mov.w	r2, #0
   12e98:	2302      	movs	r3, #2
   12e9a:	f363 0202 	bfi	r2, r3, #0, #3
   12e9e:	f36f 02c5 	bfc	r2, #3, #3
   12ea2:	f364 128f 	bfi	r2, r4, #6, #10
   12ea6:	480c      	ldr	r0, [pc, #48]	; (12ed8 <at_cmd_set_notification_handler+0x78>)
   12ea8:	f010 ffd2 	bl	23e50 <log_1>
	return z_impl_k_sem_take(sem, timeout);
   12eac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12eb0:	480a      	ldr	r0, [pc, #40]	; (12edc <at_cmd_set_notification_handler+0x7c>)
   12eb2:	f00f fde7 	bl	22a84 <z_impl_k_sem_take>
	notification_handler = handler;
   12eb6:	602e      	str	r6, [r5, #0]
	z_impl_k_sem_give(sem);
   12eb8:	4808      	ldr	r0, [pc, #32]	; (12edc <at_cmd_set_notification_handler+0x7c>)
}
   12eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12ebe:	f00f bdb5 	b.w	22a2c <z_impl_k_sem_give>
   12ec2:	bf00      	nop
   12ec4:	00026568 	.word	0x00026568
   12ec8:	00026560 	.word	0x00026560
   12ecc:	200203e0 	.word	0x200203e0
   12ed0:	00028a1c 	.word	0x00028a1c
   12ed4:	00028abd 	.word	0x00028abd
   12ed8:	00028ae4 	.word	0x00028ae4
   12edc:	2002d558 	.word	0x2002d558

00012ee0 <ip_client_event_handler>:
   12ee0:	1b08f850 	.word	0x1b08f850
   12ee4:	f0060c09 	.word	0xf0060c09
   12ee8:	bf00bb3d 	.word	0xbf00bb3d

00012eec <rpc_ip_client_init>:
   12eec:	f00b4801 	.word	0xf00b4801
   12ef0:	bf00ba9d 	.word	0xbf00ba9d
   12ef4:	000267f4 	.word	0x000267f4

00012ef8 <rpc_ip_client_request_alloc>:
   12ef8:	b5102300 	.word	0xb5102300
   12efc:	9301b082 	.word	0x9301b082
   12f00:	4604b158 	.word	0x4604b158
   12f04:	2004aa01 	.word	0x2004aa01
   12f08:	fcc8f00b 	.word	0xfcc8f00b
   12f0c:	9b01b918 	.word	0x9b01b918
   12f10:	3308b10b 	.word	0x3308b10b
   12f14:	b0026023 	.word	0xb0026023
   12f18:	2007bd10 	.word	0x2007bd10
   12f1c:	bd10b002 	.word	0xbd10b002

00012f20 <rpc_ip_client_request_send>:
   12f20:	4370f401 	.word	0x4370f401
   12f24:	4fe0f5b3 	.word	0x4fe0f5b3
   12f28:	b160d10b 	.word	0xb160d10b
   12f2c:	f8304603 	.word	0xf8304603
   12f30:	20042c08 	.word	0x20042c08
   12f34:	4101ea42 	.word	0x4101ea42
   12f38:	1d08f843 	.word	0x1d08f843
   12f3c:	f00b4619 	.word	0xf00b4619
   12f40:	200fbc95 	.word	0x200fbc95
   12f44:	20074770 	.word	0x20074770
   12f48:	bf004770 	.word	0xbf004770

00012f4c <rpc_ip_client_message_free>:
   12f4c:	f1a0b120 	.word	0xf1a0b120
   12f50:	20040108 	.word	0x20040108
   12f54:	bcd4f00b 	.word	0xbcd4f00b
   12f58:	47702007 	.word	0x47702007

00012f5c <rpc_ip_client_data_free>:
   12f5c:	4601b118 	.word	0x4601b118
   12f60:	f00b2004 	.word	0xf00b2004
   12f64:	2007bddf 	.word	0x2007bddf
   12f68:	bf004770 	.word	0xbf004770

00012f6c <symbol_0001c77>:
   12f6c:	4603b430 	.word	0x4603b430
   12f70:	f5b26800 	.word	0xf5b26800
   12f74:	eba03f80 	.word	0xeba03f80
   12f78:	d2140101 	.word	0xd2140101
   12f7c:	dd512902 	.word	0xdd512902
   12f80:	60191e41 	.word	0x60191e41
   12f84:	2c01f800 	.word	0x2c01f800
   12f88:	24826819 	.word	0x24826819
   12f8c:	60181e48 	.word	0x60181e48
   12f90:	0a122003 	.word	0x0a122003
   12f94:	2c01f801 	.word	0x2c01f801
   12f98:	1e51681a 	.word	0x1e51681a
   12f9c:	f8026019 	.word	0xf8026019
   12fa0:	bc304c01 	.word	0xbc304c01
   12fa4:	f1b24770 	.word	0xf1b24770
   12fa8:	d21a7f80 	.word	0xd21a7f80
   12fac:	dd392903 	.word	0xdd392903
   12fb0:	1e412483 	.word	0x1e412483
   12fb4:	f8006019 	.word	0xf8006019
   12fb8:	68192c01 	.word	0x68192c01
   12fbc:	1e4d0a10 	.word	0x1e4d0a10
   12fc0:	f801601d 	.word	0xf801601d
   12fc4:	68190c01 	.word	0x68190c01
   12fc8:	1e480c12 	.word	0x1e480c12
   12fcc:	f8016018 	.word	0xf8016018
   12fd0:	681a2c01 	.word	0x681a2c01
   12fd4:	1e512004 	.word	0x1e512004
   12fd8:	f8026019 	.word	0xf8026019
   12fdc:	bc304c01 	.word	0xbc304c01
   12fe0:	29044770 	.word	0x29044770
   12fe4:	2484dd1e 	.word	0x2484dd1e
   12fe8:	60191e41 	.word	0x60191e41
   12fec:	2c01f800 	.word	0x2c01f800
   12ff0:	0a106819 	.word	0x0a106819
   12ff4:	601d1e4d 	.word	0x601d1e4d
   12ff8:	0c01f801 	.word	0x0c01f801
   12ffc:	0c106819 	.word	0x0c106819
   13000:	601d1e4d 	.word	0x601d1e4d
   13004:	0c01f801 	.word	0x0c01f801
   13008:	0e126819 	.word	0x0e126819
   1300c:	60181e48 	.word	0x60181e48
   13010:	2c01f801 	.word	0x2c01f801
   13014:	2005681a 	.word	0x2005681a
   13018:	60191e51 	.word	0x60191e51
   1301c:	4c01f802 	.word	0x4c01f802
   13020:	4770bc30 	.word	0x4770bc30
   13024:	006bf06f 	.word	0x006bf06f
   13028:	bf00e7bb 	.word	0xbf00e7bb

0001302c <symbol_000646e>:
   1302c:	6804b430 	.word	0x6804b430
   13030:	46032a7f 	.word	0x46032a7f
   13034:	0101eba4 	.word	0x0101eba4
   13038:	2900d808 	.word	0x2900d808
   1303c:	1e61dd6c 	.word	0x1e61dd6c
   13040:	20016001 	.word	0x20016001
   13044:	2c01f804 	.word	0x2c01f804
   13048:	4770bc30 	.word	0x4770bc30
   1304c:	d80e2aff 	.word	0xd80e2aff
   13050:	dd612901 	.word	0xdd612901
   13054:	1e602181 	.word	0x1e602181
   13058:	f8046018 	.word	0xf8046018
   1305c:	681a2c01 	.word	0x681a2c01
   13060:	1e542002 	.word	0x1e542002
   13064:	f802601c 	.word	0xf802601c
   13068:	bc301c01 	.word	0xbc301c01
   1306c:	f5b24770 	.word	0xf5b24770
   13070:	d31c3f80 	.word	0xd31c3f80
   13074:	7f80f1b2 	.word	0x7f80f1b2
   13078:	2903d22e 	.word	0x2903d22e
   1307c:	2583dd4c 	.word	0x2583dd4c
   13080:	60011e61 	.word	0x60011e61
   13084:	2c01f804 	.word	0x2c01f804
   13088:	0a106801 	.word	0x0a106801
   1308c:	601c1e4c 	.word	0x601c1e4c
   13090:	0c01f801 	.word	0x0c01f801
   13094:	0c126819 	.word	0x0c126819
   13098:	60181e48 	.word	0x60181e48
   1309c:	2c01f801 	.word	0x2c01f801
   130a0:	2004681a 	.word	0x2004681a
   130a4:	60191e51 	.word	0x60191e51
   130a8:	5c01f802 	.word	0x5c01f802
   130ac:	2902e7cc 	.word	0x2902e7cc
   130b0:	2582dd32 	.word	0x2582dd32
   130b4:	60011e61 	.word	0x60011e61
   130b8:	2c01f804 	.word	0x2c01f804
   130bc:	0a126801 	.word	0x0a126801
   130c0:	60181e48 	.word	0x60181e48
   130c4:	2c01f801 	.word	0x2c01f801
   130c8:	2003681a 	.word	0x2003681a
   130cc:	60191e51 	.word	0x60191e51
   130d0:	5c01f802 	.word	0x5c01f802
   130d4:	4770bc30 	.word	0x4770bc30
   130d8:	dd1d2904 	.word	0xdd1d2904
   130dc:	1e612584 	.word	0x1e612584
   130e0:	f8046001 	.word	0xf8046001
   130e4:	68012c01 	.word	0x68012c01
   130e8:	1e4c0a10 	.word	0x1e4c0a10
   130ec:	f801601c 	.word	0xf801601c
   130f0:	68190c01 	.word	0x68190c01
   130f4:	1e4c0c10 	.word	0x1e4c0c10
   130f8:	f801601c 	.word	0xf801601c
   130fc:	68190c01 	.word	0x68190c01
   13100:	1e480e12 	.word	0x1e480e12
   13104:	f8016018 	.word	0xf8016018
   13108:	681a2c01 	.word	0x681a2c01
   1310c:	1e512005 	.word	0x1e512005
   13110:	f8026019 	.word	0xf8026019
   13114:	e7975c01 	.word	0xe7975c01
   13118:	006bf06f 	.word	0x006bf06f
   1311c:	bf00e794 	.word	0xbf00e794

00013120 <symbol_00036c0>:
   13120:	1a596803 	.word	0x1a596803
   13124:	dd052900 	.word	0xdd052900
   13128:	60011e59 	.word	0x60011e59
   1312c:	f8032001 	.word	0xf8032001
   13130:	47702c01 	.word	0x47702c01
   13134:	006bf06f 	.word	0x006bf06f
   13138:	bf004770 	.word	0xbf004770

0001313c <symbol_0008475>:
   1313c:	6805b5f8 	.word	0x6805b5f8
   13140:	d83f42a9 	.word	0xd83f42a9
   13144:	1a69460f 	.word	0x1a69460f
   13148:	d83b428b 	.word	0xd83b428b
   1314c:	461c4606 	.word	0x461c4606
   13150:	46111ae8 	.word	0x46111ae8
   13154:	461a6030 	.word	0x461a6030
   13158:	fbb2f011 	.word	0xfbb2f011
   1315c:	46202c00 	.word	0x46202c00
   13160:	2c7fdb15 	.word	0x2c7fdb15
   13164:	6833d814 	.word	0x6833d814
   13168:	2a001bda 	.word	0x2a001bda
   1316c:	2001dd2a 	.word	0x2001dd2a
   13170:	60321e5a 	.word	0x60321e5a
   13174:	4c01f803 	.word	0x4c01f803
   13178:	34016833 	.word	0x34016833
   1317c:	2f001bdf 	.word	0x2f001bdf
   13180:	2206dd20 	.word	0x2206dd20
   13184:	60311e59 	.word	0x60311e59
   13188:	f8034420 	.word	0xf8034420
   1318c:	bdf82c01 	.word	0xbdf82c01
   13190:	d80f2cff 	.word	0xd80f2cff
   13194:	1bda6833 	.word	0x1bda6833
   13198:	dd132a01 	.word	0xdd132a01
   1319c:	1e592281 	.word	0x1e592281
   131a0:	f8036031 	.word	0xf8036031
   131a4:	68334c01 	.word	0x68334c01
   131a8:	1e592002 	.word	0x1e592002
   131ac:	f8036031 	.word	0xf8036031
   131b0:	e7e12c01 	.word	0xe7e12c01
   131b4:	46394622 	.word	0x46394622
   131b8:	f7ff4630 	.word	0xf7ff4630
   131bc:	2800fed7 	.word	0x2800fed7
   131c0:	bdf8dada 	.word	0xbdf8dada
   131c4:	006bf06f 	.word	0x006bf06f
   131c8:	bf00bdf8 	.word	0xbf00bdf8

000131cc <symbol_0002662>:
   131cc:	41f0e92d 	.word	0x41f0e92d
   131d0:	8018f8dd 	.word	0x8018f8dd
   131d4:	f1b86805 	.word	0xf1b86805
   131d8:	d1130f00 	.word	0xd1130f00
   131dc:	2c001a6c 	.word	0x2c001a6c
   131e0:	8087f340 	.word	0x8087f340
   131e4:	60041e6c 	.word	0x60041e6c
   131e8:	8c01f805 	.word	0x8c01f805
   131ec:	1a656804 	.word	0x1a656804
   131f0:	dd7e2d00 	.word	0xdd7e2d00
   131f4:	f04f2505 	.word	0xf04f2505
   131f8:	1e660802 	.word	0x1e660802
   131fc:	f8046006 	.word	0xf8046006
   13200:	68055c01 	.word	0x68055c01
   13204:	d87442a9 	.word	0xd87442a9
   13208:	42a31a6c 	.word	0x42a31a6c
   1320c:	4606d871 	.word	0x4606d871
   13210:	1ae8461c 	.word	0x1ae8461c
   13214:	6030460f 	.word	0x6030460f
   13218:	461a4611 	.word	0x461a4611
   1321c:	fb50f011 	.word	0xfb50f011
   13220:	46202c00 	.word	0x46202c00
   13224:	2c7fdb2f 	.word	0x2c7fdb2f
   13228:	6833d841 	.word	0x6833d841
   1322c:	2a001bda 	.word	0x2a001bda
   13230:	2001dd5f 	.word	0x2001dd5f
   13234:	60321e5a 	.word	0x60321e5a
   13238:	4c01f803 	.word	0x4c01f803
   1323c:	34016833 	.word	0x34016833
   13240:	2a001bda 	.word	0x2a001bda
   13244:	2206dd55 	.word	0x2206dd55
   13248:	1e594404 	.word	0x1e594404
   1324c:	60312c00 	.word	0x60312c00
   13250:	f8034620 	.word	0xf8034620
   13254:	db162c01 	.word	0xdb162c01
   13258:	2c7f4444 	.word	0x2c7f4444
   1325c:	6833d815 	.word	0x6833d815
   13260:	2a001bda 	.word	0x2a001bda
   13264:	2001dd45 	.word	0x2001dd45
   13268:	60321e5a 	.word	0x60321e5a
   1326c:	4c01f803 	.word	0x4c01f803
   13270:	34016833 	.word	0x34016833
   13274:	2f001bdf 	.word	0x2f001bdf
   13278:	2230dd3b 	.word	0x2230dd3b
   1327c:	60311e59 	.word	0x60311e59
   13280:	f8034420 	.word	0xf8034420
   13284:	e8bd2c01 	.word	0xe8bd2c01
   13288:	2cff81f0 	.word	0x2cff81f0
   1328c:	6833d821 	.word	0x6833d821
   13290:	2a011bda 	.word	0x2a011bda
   13294:	2281dd2d 	.word	0x2281dd2d
   13298:	60311e59 	.word	0x60311e59
   1329c:	4c01f803 	.word	0x4c01f803
   132a0:	20026833 	.word	0x20026833
   132a4:	60311e59 	.word	0x60311e59
   132a8:	2c01f803 	.word	0x2c01f803
   132ac:	2cffe7e0 	.word	0x2cffe7e0
   132b0:	6833d817 	.word	0x6833d817
   132b4:	2a011bda 	.word	0x2a011bda
   132b8:	2281dd1b 	.word	0x2281dd1b
   132bc:	60311e59 	.word	0x60311e59
   132c0:	4c01f803 	.word	0x4c01f803
   132c4:	20026833 	.word	0x20026833
   132c8:	60311e59 	.word	0x60311e59
   132cc:	2c01f803 	.word	0x2c01f803
   132d0:	4622e7b4 	.word	0x4622e7b4
   132d4:	46304639 	.word	0x46304639
   132d8:	fe48f7ff 	.word	0xfe48f7ff
   132dc:	dbd22800 	.word	0xdbd22800
   132e0:	4622e7c6 	.word	0x4622e7c6
   132e4:	46304639 	.word	0x46304639
   132e8:	fe40f7ff 	.word	0xfe40f7ff
   132ec:	daa52800 	.word	0xdaa52800
   132f0:	f06fe7c9 	.word	0xf06fe7c9
   132f4:	e7c6006b 	.word	0xe7c6006b

000132f8 <symbol_0005bf5>:
   132f8:	4ff0e92d 	.word	0x4ff0e92d
   132fc:	b0d72400 	.word	0xb0d72400
   13300:	73abf50d 	.word	0x73abf50d
   13304:	46914688 	.word	0x46914688
   13308:	4306e9cd 	.word	0x4306e9cd
   1330c:	f0014607 	.word	0xf0014607
   13310:	2802f95d 	.word	0x2802f95d
   13314:	2385d159 	.word	0x2385d159
   13318:	ae0b6878 	.word	0xae0b6878
   1331c:	46229301 	.word	0x46229301
   13320:	0188f100 	.word	0x0188f100
   13324:	ab0a9600 	.word	0xab0a9600
   13328:	f004940a 	.word	0xf004940a
   1332c:	ad2dfbc5 	.word	0xad2dfbc5
   13330:	b9684604 	.word	0xb9684604
   13334:	42a89807 	.word	0x42a89807
   13338:	9a0ad37f 	.word	0x9a0ad37f
   1333c:	42931b43 	.word	0x42931b43
   13340:	1a83d37b 	.word	0x1a83d37b
   13344:	46314618 	.word	0x46314618
   13348:	f0119307 	.word	0xf0119307
   1334c:	9c0afab9 	.word	0x9c0afab9
   13350:	db312c00 	.word	0xdb312c00
   13354:	1b5a9b07 	.word	0x1b5a9b07
   13358:	dd6e2a00 	.word	0xdd6e2a00
   1335c:	1e5a2100 	.word	0x1e5a2100
   13360:	0a01f104 	.word	0x0a01f104
   13364:	a8079207 	.word	0xa8079207
   13368:	1c01f803 	.word	0x1c01f803
   1336c:	46294652 	.word	0x46294652
   13370:	fe5cf7ff 	.word	0xfe5cf7ff
   13374:	db1f1e04 	.word	0xdb1f1e04
   13378:	46292203 	.word	0x46292203
   1337c:	f7ffa807 	.word	0xf7ffa807
   13380:	f1b0fecf 	.word	0xf1b0fecf
   13384:	db1b0b00 	.word	0xdb1b0b00
   13388:	f0014638 	.word	0xf0014638
   1338c:	aa08f91f 	.word	0xaa08f91f
   13390:	f00ba909 	.word	0xf00ba909
   13394:	4603fcd7 	.word	0x4603fcd7
   13398:	2b00b1c8 	.word	0x2b00b1c8
   1339c:	f1c3db50 	.word	0xf1c3db50
   133a0:	a90602a2 	.word	0xa90602a2
   133a4:	9101e9cd 	.word	0x9101e9cd
   133a8:	8000f8cd 	.word	0x8000f8cd
   133ac:	4925442a 	.word	0x4925442a
   133b0:	f0044825 	.word	0xf0044825
   133b4:	4604ffa1 	.word	0x4604ffa1
   133b8:	b0574620 	.word	0xb0574620
   133bc:	8ff0e8bd 	.word	0x8ff0e8bd
   133c0:	4620465c 	.word	0x4620465c
   133c4:	e8bdb057 	.word	0xe8bdb057
   133c8:	4c208ff0 	.word	0x4c208ff0
   133cc:	9005e7f4 	.word	0x9005e7f4
   133d0:	f0014638 	.word	0xf0014638
   133d4:	2802f8fb 	.word	0x2802f8fb
   133d8:	d01d9b05 	.word	0xd01d9b05
   133dc:	e9dd4618 	.word	0xe9dd4618
   133e0:	90003208 	.word	0x90003208
   133e4:	a8074629 	.word	0xa8074629
   133e8:	fef0f7ff 	.word	0xfef0f7ff
   133ec:	db222800 	.word	0xdb222800
   133f0:	44a34454 	.word	0x44a34454
   133f4:	465a4483 	.word	0x465a4483
   133f8:	a8074629 	.word	0xa8074629
   133fc:	fe16f7ff 	.word	0xfe16f7ff
   13400:	dbd91e04 	.word	0xdbd91e04
   13404:	2230a807 	.word	0x2230a807
   13408:	f7ff4629 	.word	0xf7ff4629
   1340c:	1e03fe89 	.word	0x1e03fe89
   13410:	44a3db16 	.word	0x44a3db16
   13414:	e7c0445b 	.word	0xe7c0445b
   13418:	4632687b 	.word	0x4632687b
   1341c:	a90a7818 	.word	0xa90a7818
   13420:	fcacf00b 	.word	0xfcacf00b
   13424:	6833b928 	.word	0x6833b928
   13428:	46299a0a 	.word	0x46299a0a
   1342c:	f7ffa807 	.word	0xf7ffa807
   13430:	2800fe85 	.word	0x2800fe85
   13434:	4604dad3 	.word	0x4604dad3
   13438:	f06fe7be 	.word	0xf06fe7be
   1343c:	e7bb046b 	.word	0xe7bb046b
   13440:	e7b9461c 	.word	0xe7b9461c
   13444:	00026804 	.word	0x00026804
   13448:	00026820 	.word	0x00026820
   1344c:	ffffc680 	.word	0xffffc680

00013450 <authenticated_atcmd_init>:
   13450:	4c3bb5f0 	.word	0x4c3bb5f0
   13454:	6826b0c7 	.word	0x6826b0c7
   13458:	2701bb16 	.word	0x2701bb16
   1345c:	60274839 	.word	0x60274839
   13460:	f9faf011 	.word	0xf9faf011
   13464:	f5c04605 	.word	0xf5c04605
   13468:	46317380 	.word	0x46317380
   1346c:	7280f44f 	.word	0x7280f44f
   13470:	9302a806 	.word	0x9302a806
   13474:	fa51f011 	.word	0xfa51f011
   13478:	4932462a 	.word	0x4932462a
   1347c:	f011a806 	.word	0xf011a806
   13480:	aa06fa1f 	.word	0xaa06fa1f
   13484:	ab029700 	.word	0xab029700
   13488:	2120442a 	.word	0x2120442a
   1348c:	f00a482e 	.word	0xf00a482e
   13490:	4606fed5 	.word	0x4606fed5
   13494:	2300b138 	.word	0x2300b138
   13498:	60232023 	.word	0x60232023
   1349c:	bdf0b047 	.word	0xbdf0b047
   134a0:	b047200e 	.word	0xb047200e
   134a4:	2022bdf0 	.word	0x2022bdf0
   134a8:	60279b02 	.word	0x60279b02
   134ac:	af06441d 	.word	0xaf06441d
   134b0:	5578ab06 	.word	0x5578ab06
   134b4:	f240442b 	.word	0xf240442b
   134b8:	21022201 	.word	0x21022201
   134bc:	705e2066 	.word	0x705e2066
   134c0:	f9c0f000 	.word	0xf9c0f000
   134c4:	dbe61e07 	.word	0xdbe61e07
   134c8:	f0114820 	.word	0xf0114820
   134cc:	4633f9c5 	.word	0x4633f9c5
   134d0:	491e4602 	.word	0x491e4602
   134d4:	6600e9cd 	.word	0x6600e9cd
   134d8:	f0004638 	.word	0xf0004638
   134dc:	3502f95d 	.word	0x3502f95d
   134e0:	4633a903 	.word	0x4633a903
   134e4:	e9cd220a 	.word	0xe9cd220a
   134e8:	46386600 	.word	0x46386600
   134ec:	fa3cf000 	.word	0xfa3cf000
   134f0:	6600e9cd 	.word	0x6600e9cd
   134f4:	462aa906 	.word	0x462aa906
   134f8:	46384633 	.word	0x46384633
   134fc:	f94cf000 	.word	0xf94cf000
   13500:	d00342a8 	.word	0xd00342a8
   13504:	f0004638 	.word	0xf0004638
   13508:	e7c4f9e7 	.word	0xe7c4f9e7
   1350c:	6600e9cd 	.word	0x6600e9cd
   13510:	220a4633 	.word	0x220a4633
   13514:	4638a903 	.word	0x4638a903
   13518:	fa26f000 	.word	0xfa26f000
   1351c:	ddf12801 	.word	0xddf12801
   13520:	2202a803 	.word	0x2202a803
   13524:	f011490a 	.word	0xf011490a
   13528:	4605f9ac 	.word	0x4605f9ac
   1352c:	d1e92800 	.word	0xd1e92800
   13530:	46382302 	.word	0x46382302
   13534:	f0006023 	.word	0xf0006023
   13538:	4628f9cf 	.word	0x4628f9cf
   1353c:	bf00e7ae 	.word	0xbf00e7ae
   13540:	2002049c 	.word	0x2002049c
   13544:	0002683c 	.word	0x0002683c
   13548:	2002740c 	.word	0x2002740c
   1354c:	0002684c 	.word	0x0002684c
   13550:	0002685c 	.word	0x0002685c

00013554 <gnss_client_event_handler>:
   13554:	1b08f850 	.word	0x1b08f850
   13558:	f0060c09 	.word	0xf0060c09
   1355c:	bf00bda5 	.word	0xbf00bda5

00013560 <rpc_gnss_client_init>:
   13560:	f00a4801 	.word	0xf00a4801
   13564:	bf00bf63 	.word	0xbf00bf63
   13568:	000268e4 	.word	0x000268e4

0001356c <rpc_gnss_client_request_alloc>:
   1356c:	b5102300 	.word	0xb5102300
   13570:	9301b082 	.word	0x9301b082
   13574:	4604b158 	.word	0x4604b158
   13578:	2007aa01 	.word	0x2007aa01
   1357c:	f98ef00b 	.word	0xf98ef00b
   13580:	9b01b918 	.word	0x9b01b918
   13584:	3308b10b 	.word	0x3308b10b
   13588:	b0026023 	.word	0xb0026023
   1358c:	2007bd10 	.word	0x2007bd10
   13590:	bd10b002 	.word	0xbd10b002

00013594 <rpc_gnss_client_request_send>:
   13594:	4370f401 	.word	0x4370f401
   13598:	5f80f5b3 	.word	0x5f80f5b3
   1359c:	b160d10b 	.word	0xb160d10b
   135a0:	f8304603 	.word	0xf8304603
   135a4:	20072c08 	.word	0x20072c08
   135a8:	4101ea42 	.word	0x4101ea42
   135ac:	1d08f843 	.word	0x1d08f843
   135b0:	f00b4619 	.word	0xf00b4619
   135b4:	200fb95b 	.word	0x200fb95b
   135b8:	20074770 	.word	0x20074770
   135bc:	bf004770 	.word	0xbf004770

000135c0 <rpc_gnss_client_message_free>:
   135c0:	f1a0b120 	.word	0xf1a0b120
   135c4:	20070108 	.word	0x20070108
   135c8:	b99af00b 	.word	0xb99af00b
   135cc:	47702007 	.word	0x47702007

000135d0 <rpc_gnss_client_data_free>:
   135d0:	4601b118 	.word	0x4601b118
   135d4:	f00b2007 	.word	0xf00b2007
   135d8:	2007baa5 	.word	0x2007baa5
   135dc:	bf004770 	.word	0xbf004770

000135e0 <eckey_can_do>:
   135e0:	28023802 	.word	0x28023802
   135e4:	2000bf8c 	.word	0x2000bf8c
   135e8:	47702001 	.word	0x47702001

000135ec <eckey_get_bitlen>:
   135ec:	47706d80 	.word	0x47706d80

000135f0 <eckey_debug>:
   135f0:	4b032202 	.word	0x4b032202
   135f4:	60883088 	.word	0x60883088
   135f8:	604b700a 	.word	0x604b700a
   135fc:	bf004770 	.word	0xbf004770
   13600:	000268f4 	.word	0x000268f4

00013604 <eckeydh_can_do>:
   13604:	28013802 	.word	0x28013802
   13608:	2000bf8c 	.word	0x2000bf8c
   1360c:	47702001 	.word	0x47702001

00013610 <eckey_free_wrap>:
   13610:	4604b510 	.word	0x4604b510
   13614:	fc48f003 	.word	0xfc48f003
   13618:	e8bd4620 	.word	0xe8bd4620
   1361c:	f00b4010 	.word	0xf00b4010
   13620:	bf00bfe9 	.word	0xbf00bfe9

00013624 <eckey_alloc_wrap>:
   13624:	21acb510 	.word	0x21acb510
   13628:	f00b2001 	.word	0xf00b2001
   1362c:	4604ffcf 	.word	0x4604ffcf
   13630:	f003b108 	.word	0xf003b108
   13634:	4620fbd3 	.word	0x4620fbd3
   13638:	bf00bd10 	.word	0xbf00bd10

0001363c <eckey_check_pair>:
   1363c:	bbacf004 	.word	0xbbacf004

00013640 <symbol_0005c7f>:
   13640:	4ff0e92d 	.word	0x4ff0e92d
   13644:	c024f8dd 	.word	0xc024f8dd
   13648:	0f00f1bc 	.word	0x0f00f1bc
   1364c:	4c42d065 	.word	0x4c42d065
   13650:	540cfba4 	.word	0x540cfba4
   13654:	eb040864 	.word	0xeb040864
   13658:	45c40844 	.word	0x45c40844
   1365c:	3401bf18 	.word	0x3401bf18
   13660:	4f80f1b4 	.word	0x4f80f1b4
   13664:	00a4d271 	.word	0x00a4d271
   13668:	428c3401 	.word	0x428c3401
   1366c:	2800d869 	.word	0x2800d869
   13670:	f1b8d067 	.word	0xf1b8d067
   13674:	d0610f00 	.word	0xd0610f00
   13678:	27004686 	.word	0x27004686
   1367c:	1cdc4e37 	.word	0x1cdc4e37
   13680:	f8142500 	.word	0xf8142500
   13684:	f8141c03 	.word	0xf8141c03
   13688:	f8143c02 	.word	0xf8143c02
   1368c:	ea4fbc01 	.word	0xea4fbc01
   13690:	010909a1 	.word	0x010909a1
   13694:	0130f001 	.word	0x0130f001
   13698:	1a13eb06 	.word	0x1a13eb06
   1369c:	9009f816 	.word	0x9009f816
   136a0:	f81a009b 	.word	0xf81a009b
   136a4:	f003a001 	.word	0xf003a001
   136a8:	eb06013c 	.word	0xeb06013c
   136ac:	5c59139b 	.word	0x5c59139b
   136b0:	0507f369 	.word	0x0507f369
   136b4:	033ff00b 	.word	0x033ff00b
   136b8:	f36a5cf3 	.word	0xf36a5cf3
   136bc:	f361250f 	.word	0xf361250f
   136c0:	37034517 	.word	0x37034517
   136c4:	651ff363 	.word	0x651ff363
   136c8:	0104f10e 	.word	0x0104f10e
   136cc:	f8ce45b8 	.word	0xf8ce45b8
   136d0:	46235000 	.word	0x46235000
   136d4:	f104468e 	.word	0xf104468e
   136d8:	d8d10403 	.word	0xd8d10403
   136dc:	d91445bc 	.word	0xd91445bc
   136e0:	4d1e781c 	.word	0x4d1e781c
   136e4:	10a63701 	.word	0x10a63701
   136e8:	ea4f4567 	.word	0xea4f4567
   136ec:	f0041404 	.word	0xf0041404
   136f0:	f8150430 	.word	0xf8150430
   136f4:	d315e006 	.word	0xd315e006
   136f8:	5d2b263d 	.word	0x5d2b263d
   136fc:	e000f881 	.word	0xe000f881
   13700:	233d704b 	.word	0x233d704b
   13704:	70cb708e 	.word	0x70cb708e
   13708:	23003104 	.word	0x23003104
   1370c:	1a08469c 	.word	0x1a08469c
   13710:	700b6010 	.word	0x700b6010
   13714:	e8bd4660 	.word	0xe8bd4660
   13718:	f8c28ff0 	.word	0xf8c28ff0
   1371c:	4660c000 	.word	0x4660c000
   13720:	8ff0e8bd 	.word	0x8ff0e8bd
   13724:	f881785b 	.word	0xf881785b
   13728:	eb05e000 	.word	0xeb05e000
   1372c:	5d341613 	.word	0x5d341613
   13730:	f003009b 	.word	0xf003009b
   13734:	704c033c 	.word	0x704c033c
   13738:	e7e25cee 	.word	0xe7e25cee
   1373c:	46014647 	.word	0x46014647
   13740:	6014e7cc 	.word	0x6014e7cc
   13744:	0c29f06f 	.word	0x0c29f06f
   13748:	f04fe7e4 	.word	0xf04fe7e4
   1374c:	f06f33ff 	.word	0xf06f33ff
   13750:	60130c29 	.word	0x60130c29
   13754:	bf00e7de 	.word	0xbf00e7de
   13758:	aaaaaaab 	.word	0xaaaaaaab
   1375c:	0002695c 	.word	0x0002695c

00013760 <packet_free_cb>:
   13760:	f0006800 	.word	0xf0006800
   13764:	bf00b9eb 	.word	0xbf00b9eb

00013768 <packet_free_cb>:
   13768:	4604b510 	.word	0x4604b510
   1376c:	f0066800 	.word	0xf0066800
   13770:	68a0f9a5 	.word	0x68a0f9a5
   13774:	e8bdb118 	.word	0xe8bdb118
   13778:	f00b4010 	.word	0xf00b4010
   1377c:	bd10bf3b 	.word	0xbd10bf3b

00013780 <packet_free_cb>:
   13780:	4604b510 	.word	0x4604b510
   13784:	f7ff6800 	.word	0xf7ff6800
   13788:	68a0ff23 	.word	0x68a0ff23
   1378c:	e8bdb118 	.word	0xe8bdb118
   13790:	f00b4010 	.word	0xf00b4010
   13794:	bd10bf2f 	.word	0xbd10bf2f

00013798 <at_interface_write>:
   13798:	b083b5f0 	.word	0xb083b5f0
   1379c:	4615460f 	.word	0x4615460f
   137a0:	f0044606 	.word	0xf0044606
   137a4:	2800fcf3 	.word	0x2800fcf3
   137a8:	6803d047 	.word	0x6803d047
   137ac:	039b4604 	.word	0x039b4604
   137b0:	6803d543 	.word	0x6803d543
   137b4:	f4234629 	.word	0xf4234629
   137b8:	60033300 	.word	0x60033300
   137bc:	a8016803 	.word	0xa8016803
   137c0:	1300f443 	.word	0x1300f443
   137c4:	f0006023 	.word	0xf0006023
   137c8:	bba0f98f 	.word	0xbba0f98f
   137cc:	9b012204 	.word	0x9b012204
   137d0:	7258721a 	.word	0x7258721a
   137d4:	72d87298 	.word	0x72d87298
   137d8:	b98560de 	.word	0xb98560de
   137dc:	21014618 	.word	0x21014618
   137e0:	f996f000 	.word	0xf996f000
   137e4:	f44fb9d0 	.word	0xf44fb9d0
   137e8:	46303200 	.word	0x46303200
   137ec:	f04f4611 	.word	0xf04f4611
   137f0:	f00433ff 	.word	0xf00433ff
   137f4:	b9a8fc5f 	.word	0xb9a8fc5f
   137f8:	b0034628 	.word	0xb0034628
   137fc:	4639bdf0 	.word	0x4639bdf0
   13800:	462a6818 	.word	0x462a6818
   13804:	f85cf011 	.word	0xf85cf011
   13808:	98012101 	.word	0x98012101
   1380c:	f980f000 	.word	0xf980f000
   13810:	d0e82800 	.word	0xd0e82800
   13814:	68189b01 	.word	0x68189b01
   13818:	f990f000 	.word	0xf990f000
   1381c:	f0009801 	.word	0xf0009801
   13820:	2023f985 	.word	0x2023f985
   13824:	f4436823 	.word	0xf4436823
   13828:	60233300 	.word	0x60233300
   1382c:	fc80f7fe 	.word	0xfc80f7fe
   13830:	30fff04f 	.word	0x30fff04f
   13834:	200ce7e1 	.word	0x200ce7e1
   13838:	2016e7f4 	.word	0x2016e7f4
   1383c:	bf00e7f6 	.word	0xbf00e7f6

00013840 <at_interface_init>:
   13840:	b94cf000 	.word	0xb94cf000

00013844 <at_interface_open>:
   13844:	41f0e92d 	.word	0x41f0e92d
   13848:	b0822500 	.word	0xb0822500
   1384c:	f843ab02 	.word	0xf843ab02
   13850:	46805d08 	.word	0x46805d08
   13854:	4618460f 	.word	0x4618460f
   13858:	21024616 	.word	0x21024616
   1385c:	f0044a1d 	.word	0xf0044a1d
   13860:	9b00fb85 	.word	0x9b00fb85
   13864:	b30b4604 	.word	0xb30b4604
   13868:	8703e9c3 	.word	0x8703e9c3
   1386c:	4629615e 	.word	0x4629615e
   13870:	f000a801 	.word	0xf000a801
   13874:	b9e8f939 	.word	0xb9e8f939
   13878:	9b012204 	.word	0x9b012204
   1387c:	72582105 	.word	0x72582105
   13880:	72d87298 	.word	0x72d87298
   13884:	60dc721a 	.word	0x60dc721a
   13888:	f0004618 	.word	0xf0004618
   1388c:	b9d8f941 	.word	0xb9d8f941
   13890:	f04f2202 	.word	0xf04f2202
   13894:	461133ff 	.word	0x461133ff
   13898:	f0044620 	.word	0xf0044620
   1389c:	4605fc0b 	.word	0x4605fc0b
   138a0:	9a00b948 	.word	0x9a00b948
   138a4:	f4436813 	.word	0xf4436813
   138a8:	60133300 	.word	0x60133300
   138ac:	b0024620 	.word	0xb0024620
   138b0:	81f0e8bd 	.word	0x81f0e8bd
   138b4:	4620250c 	.word	0x4620250c
   138b8:	fbaef004 	.word	0xfbaef004
   138bc:	f7fe4628 	.word	0xf7fe4628
   138c0:	f04ffc37 	.word	0xf04ffc37
   138c4:	e7f134ff 	.word	0xe7f134ff
   138c8:	f0009801 	.word	0xf0009801
   138cc:	2523f92f 	.word	0x2523f92f
   138d0:	bf00e7f1 	.word	0xbf00e7f1
   138d4:	00013761 	.word	0x00013761

000138d8 <at_interface_close>:
   138d8:	b083b5f0 	.word	0xb083b5f0
   138dc:	f0044606 	.word	0xf0044606
   138e0:	2800fc55 	.word	0x2800fc55
   138e4:	230dd03d 	.word	0x230dd03d
   138e8:	60036807 	.word	0x60036807
   138ec:	46046803 	.word	0x46046803
   138f0:	d41f039b 	.word	0xd41f039b
   138f4:	a8012100 	.word	0xa8012100
   138f8:	f8f6f000 	.word	0xf8f6f000
   138fc:	2204bb20 	.word	0x2204bb20
   13900:	21069b01 	.word	0x21069b01
   13904:	72987258 	.word	0x72987258
   13908:	721a72d8 	.word	0x721a72d8
   1390c:	461860de 	.word	0x461860de
   13910:	f8fef000 	.word	0xf8fef000
   13914:	220eb9d0 	.word	0x220eb9d0
   13918:	33fff04f 	.word	0x33fff04f
   1391c:	46304611 	.word	0x46304611
   13920:	fbc8f004 	.word	0xfbc8f004
   13924:	b9a84605 	.word	0xb9a84605
   13928:	f0044630 	.word	0xf0044630
   1392c:	4628fb75 	.word	0x4628fb75
   13930:	bdf0b003 	.word	0xbdf0b003
   13934:	21006803 	.word	0x21006803
   13938:	3300f423 	.word	0x3300f423
   1393c:	a8016003 	.word	0xa8016003
   13940:	f8d2f000 	.word	0xf8d2f000
   13944:	d0da2800 	.word	0xd0da2800
   13948:	e003250c 	.word	0xe003250c
   1394c:	f0009801 	.word	0xf0009801
   13950:	2523f8ed 	.word	0x2523f8ed
   13954:	46286027 	.word	0x46286027
   13958:	fbeaf7fe 	.word	0xfbeaf7fe
   1395c:	35fff04f 	.word	0x35fff04f
   13960:	2516e7e5 	.word	0x2516e7e5
   13964:	bf00e7f7 	.word	0xbf00e7f7

00013968 <at_interface_read>:
   13968:	41f0e92d 	.word	0x41f0e92d
   1396c:	4688b084 	.word	0x4688b084
   13970:	461e4615 	.word	0x461e4615
   13974:	f0044607 	.word	0xf0044607
   13978:	2800fc09 	.word	0x2800fc09
   1397c:	2300d049 	.word	0x2300d049
   13980:	8500e9cd 	.word	0x8500e9cd
   13984:	0502f016 	.word	0x0502f016
   13988:	e9cd4604 	.word	0xe9cd4604
   1398c:	d00e3302 	.word	0xd00e3302
   13990:	2d00e01e 	.word	0x2d00e01e
   13994:	f44fd133 	.word	0xf44fd133
   13998:	6a233280 	.word	0x6a233280
   1399c:	2b004611 	.word	0x2b004611
   139a0:	f04fbf08 	.word	0xf04fbf08
   139a4:	463833ff 	.word	0x463833ff
   139a8:	fb84f004 	.word	0xfb84f004
   139ac:	68234605 	.word	0x68234605
   139b0:	f42369e0 	.word	0xf42369e0
   139b4:	60233380 	.word	0x60233380
   139b8:	46326803 	.word	0x46326803
   139bc:	4669689b 	.word	0x4669689b
   139c0:	f1b04798 	.word	0xf1b04798
   139c4:	dbe40800 	.word	0xdbe40800
   139c8:	b0044640 	.word	0xb0044640
   139cc:	81f0e8bd 	.word	0x81f0e8bd
   139d0:	69c06803 	.word	0x69c06803
   139d4:	3380f423 	.word	0x3380f423
   139d8:	68036023 	.word	0x68036023
   139dc:	689b4632 	.word	0x689b4632
   139e0:	47984669 	.word	0x47984669
   139e4:	0800f1b0 	.word	0x0800f1b0
   139e8:	f1b8daee 	.word	0xf1b8daee
   139ec:	d1eb3fff 	.word	0xd1eb3fff
   139f0:	f7fe2023 	.word	0xf7fe2023
   139f4:	4640fb9d 	.word	0x4640fb9d
   139f8:	e8bdb004 	.word	0xe8bdb004
   139fc:	f1b881f0 	.word	0xf1b881f0
   13a00:	d1e13fff 	.word	0xd1e13fff
   13a04:	f7fe4628 	.word	0xf7fe4628
   13a08:	4640fb93 	.word	0x4640fb93
   13a0c:	e8bdb004 	.word	0xe8bdb004
   13a10:	201681f0 	.word	0x201681f0
   13a14:	fb8cf7fe 	.word	0xfb8cf7fe
   13a18:	38fff04f 	.word	0x38fff04f
   13a1c:	bf00e7d4 	.word	0xbf00e7d4

00013a20 <at_interface_getopt>:
   13a20:	bc12f004 	.word	0xbc12f004

00013a24 <at_interface_setopt>:
   13a24:	bbdaf004 	.word	0xbbdaf004

00013a28 <rpc_at_event_handler>:
   13a28:	4606b570 	.word	0x4606b570
   13a2c:	68c0b084 	.word	0x68c0b084
   13a30:	f004460d 	.word	0xf004460d
   13a34:	4604fbab 	.word	0x4604fbab
   13a38:	6803b348 	.word	0x6803b348
   13a3c:	2b01b29b 	.word	0x2b01b29b
   13a40:	6803d01f 	.word	0x6803d01f
   13a44:	2b0db29b 	.word	0x2b0db29b
   13a48:	6803d029 	.word	0x6803d029
   13a4c:	2b02b29b 	.word	0x2b02b29b
   13a50:	3d03d02d 	.word	0x3d03d02d
   13a54:	d8172d01 	.word	0xd8172d01
   13a58:	68732500 	.word	0x68732500
   13a5c:	e9cd6832 	.word	0xe9cd6832
   13a60:	e9cd5502 	.word	0xe9cd5502
   13a64:	69e02300 	.word	0x69e02300
   13a68:	68034669 	.word	0x68034669
   13a6c:	4798685b 	.word	0x4798685b
   13a70:	d0193001 	.word	0xd0193001
   13a74:	68234628 	.word	0x68234628
   13a78:	3380f443 	.word	0x3380f443
   13a7c:	b0046023 	.word	0xb0046023
   13a80:	2d02bd70 	.word	0x2d02bd70
   13a84:	6005d1e5 	.word	0x6005d1e5
   13a88:	b0042000 	.word	0xb0042000
   13a8c:	6830bd70 	.word	0x6830bd70
   13a90:	d0f92800 	.word	0xd0f92800
   13a94:	f852f000 	.word	0xf852f000
   13a98:	b0044620 	.word	0xb0044620
   13a9c:	2d02bd70 	.word	0x2d02bd70
   13aa0:	230ed1d7 	.word	0x230ed1d7
   13aa4:	e7ef6003 	.word	0xe7ef6003
   13aa8:	b0042002 	.word	0xb0042002
   13aac:	6803bd70 	.word	0x6803bd70
   13ab0:	d5ce029b 	.word	0xd5ce029b
   13ab4:	d1cc2d02 	.word	0xd1cc2d02
   13ab8:	f4236803 	.word	0xf4236803
   13abc:	60031300 	.word	0x60031300
   13ac0:	f4436803 	.word	0xf4436803
   13ac4:	60033300 	.word	0x60033300
   13ac8:	bf00e7de 	.word	0xbf00e7de

00013acc <at_client_evt_handler>:
   13acc:	f850b120 	.word	0xf850b120
   13ad0:	0c091b08 	.word	0x0c091b08
   13ad4:	bfa8f7ff 	.word	0xbfa8f7ff
   13ad8:	bf004770 	.word	0xbf004770

00013adc <rpc_at_client_init>:
   13adc:	f00a4801 	.word	0xf00a4801
   13ae0:	bf00bca5 	.word	0xbf00bca5
   13ae4:	0002699c 	.word	0x0002699c

00013ae8 <rpc_at_client_request_alloc>:
   13ae8:	2300b180 	.word	0x2300b180
   13aec:	b082b510 	.word	0xb082b510
   13af0:	4604aa02 	.word	0x4604aa02
   13af4:	3d04f842 	.word	0x3d04f842
   13af8:	f00a2003 	.word	0xf00a2003
   13afc:	b918fecf 	.word	0xb918fecf
   13b00:	b10b9b01 	.word	0xb10b9b01
   13b04:	60233308 	.word	0x60233308
   13b08:	bd10b002 	.word	0xbd10b002
   13b0c:	4770200e 	.word	0x4770200e

00013b10 <rpc_at_client_request_send>:
   13b10:	4603b150 	.word	0x4603b150
   13b14:	2c08f830 	.word	0x2c08f830
   13b18:	ea422003 	.word	0xea422003
   13b1c:	f8434101 	.word	0xf8434101
   13b20:	46191d08 	.word	0x46191d08
   13b24:	bea2f00a 	.word	0xbea2f00a
   13b28:	4770200e 	.word	0x4770200e

00013b2c <rpc_at_client_message_free>:
   13b2c:	f1a0b120 	.word	0xf1a0b120
   13b30:	20030108 	.word	0x20030108
   13b34:	bee4f00a 	.word	0xbee4f00a
   13b38:	4770200e 	.word	0x4770200e

00013b3c <rpc_at_client_data_free>:
   13b3c:	4601b118 	.word	0x4601b118
   13b40:	f00a2003 	.word	0xf00a2003
   13b44:	200ebfef 	.word	0x200ebfef
   13b48:	bf004770 	.word	0xbf004770

00013b4c <logobj_event_handler>:
   13b4c:	4b3bb530 	.word	0x4b3bb530
   13b50:	681db085 	.word	0x681db085
   13b54:	d04c2d00 	.word	0xd04c2d00
   13b58:	0302f248 	.word	0x0302f248
   13b5c:	d0534299 	.word	0xd0534299
   13b60:	f248d91c 	.word	0xf248d91c
   13b64:	42990303 	.word	0x42990303
   13b68:	f249d05a 	.word	0xf249d05a
   13b6c:	42990301 	.word	0x42990301
   13b70:	2400d147 	.word	0x2400d147
   13b74:	68026843 	.word	0x68026843
   13b78:	4402e9cd 	.word	0x4402e9cd
   13b7c:	2300e9cd 	.word	0x2300e9cd
   13b80:	466969e8 	.word	0x466969e8
   13b84:	685b6803 	.word	0x685b6803
   13b88:	30014798 	.word	0x30014798
   13b8c:	4620d04e 	.word	0x4620d04e
   13b90:	f443682b 	.word	0xf443682b
   13b94:	602b3380 	.word	0x602b3380
   13b98:	bd30b005 	.word	0xbd30b005
   13b9c:	0301f248 	.word	0x0301f248
   13ba0:	d12e4299 	.word	0xd12e4299
   13ba4:	2b0068c3 	.word	0x2b0068c3
   13ba8:	6828d135 	.word	0x6828d135
   13bac:	0080f410 	.word	0x0080f410
   13bb0:	682bd03e 	.word	0x682bd03e
   13bb4:	2b01b29b 	.word	0x2b01b29b
   13bb8:	682bd105 	.word	0x682bd105
   13bbc:	041b0c1b 	.word	0x041b0c1b
   13bc0:	0302f043 	.word	0x0302f043
   13bc4:	4b1e602b 	.word	0x4b1e602b
   13bc8:	f002781a 	.word	0xf002781a
   13bcc:	2a0001ff 	.word	0x2a0001ff
   13bd0:	4a1cd031 	.word	0x4a1cd031
   13bd4:	b9097811 	.word	0xb9097811
   13bd8:	70112101 	.word	0x70112101
   13bdc:	70182000 	.word	0x70182000
   13be0:	f423682b 	.word	0xf423682b
   13be4:	602b0380 	.word	0x602b0380
   13be8:	f443682b 	.word	0xf443682b
   13bec:	602b0300 	.word	0x602b0300
   13bf0:	6800e7d2 	.word	0x6800e7d2
   13bf4:	d0cf2800 	.word	0xd0cf2800
   13bf8:	ff60f005 	.word	0xff60f005
   13bfc:	b0054628 	.word	0xb0054628
   13c00:	2000bd30 	.word	0x2000bd30
   13c04:	bd30b005 	.word	0xbd30b005
   13c08:	f413682b 	.word	0xf413682b
   13c0c:	d00b0380 	.word	0xd00b0380
   13c10:	280068c0 	.word	0x280068c0
   13c14:	230ed0e4 	.word	0x230ed0e4
   13c18:	606b2000 	.word	0x606b2000
   13c1c:	bd30b005 	.word	0xbd30b005
   13c20:	2b0168c3 	.word	0x2b0168c3
   13c24:	e7f6d1a5 	.word	0xe7f6d1a5
   13c28:	e7b54618 	.word	0xe7b54618
   13c2c:	e7b32002 	.word	0xe7b32002
   13c30:	606b230e 	.word	0x606b230e
   13c34:	4a03e7b0 	.word	0x4a03e7b0
   13c38:	e7cf7011 	.word	0xe7cf7011
   13c3c:	200204a4 	.word	0x200204a4
   13c40:	20027403 	.word	0x20027403
   13c44:	20027404 	.word	0x20027404

00013c48 <logobj_interface_init>:
   13c48:	b5102300 	.word	0xb5102300
   13c4c:	4a084907 	.word	0x4a084907
   13c50:	48094c08 	.word	0x48094c08
   13c54:	60037023 	.word	0x60037023
   13c58:	6013700b 	.word	0x6013700b
   13c5c:	fef2f005 	.word	0xfef2f005
   13c60:	bf183000 	.word	0xbf183000
   13c64:	42402001 	.word	0x42402001
   13c68:	bf00bd10 	.word	0xbf00bd10
   13c6c:	20027403 	.word	0x20027403
   13c70:	200204a0 	.word	0x200204a0
   13c74:	20027404 	.word	0x20027404
   13c78:	200204a4 	.word	0x200204a4

00013c7c <logobj_interface_open>:
   13c7c:	e92d2300 	.word	0xe92d2300
   13c80:	286647f0 	.word	0x286647f0
   13c84:	9300b082 	.word	0x9300b082
   13c88:	2902d172 	.word	0x2902d172
   13c8c:	d16f4689 	.word	0xd16f4689
   13c90:	2305f240 	.word	0x2305f240
   13c94:	4692429a 	.word	0x4692429a
   13c98:	4f48d16a 	.word	0x4f48d16a
   13c9c:	2d00683d 	.word	0x2d00683d
   13ca0:	4680d17c 	.word	0x4680d17c
   13ca4:	46684a46 	.word	0x46684a46
   13ca8:	f960f004 	.word	0xf960f004
   13cac:	46069b00 	.word	0x46069b00
   13cb0:	d07d2b00 	.word	0xd07d2b00
   13cb4:	22044629 	.word	0x22044629
   13cb8:	603b4842 	.word	0x603b4842
   13cbc:	fe2df010 	.word	0xfe2df010
   13cc0:	46299c00 	.word	0x46299c00
   13cc4:	8903e9c4 	.word	0x8903e9c4
   13cc8:	a014f8c4 	.word	0xa014f8c4
   13ccc:	f005a801 	.word	0xf005a801
   13cd0:	2800febf 	.word	0x2800febf
   13cd4:	2201d13c 	.word	0x2201d13c
   13cd8:	9b012104 	.word	0x9b012104
   13cdc:	73584d3a 	.word	0x73584d3a
   13ce0:	73d87398 	.word	0x73d87398
   13ce4:	72987258 	.word	0x72987258
   13ce8:	721972d8 	.word	0x721972d8
   13cec:	731a702a 	.word	0x731a702a
   13cf0:	46186822 	.word	0x46186822
   13cf4:	0280f442 	.word	0x0280f442
   13cf8:	f2476022 	.word	0xf2476022
   13cfc:	f0050101 	.word	0xf0050101
   13d00:	bb38febf 	.word	0xbb38febf
   13d04:	0200f44f 	.word	0x0200f44f
   13d08:	33fff04f 	.word	0x33fff04f
   13d0c:	46304611 	.word	0x46304611
   13d10:	f9d0f004 	.word	0xf9d0f004
   13d14:	b3104604 	.word	0xb3104604
   13d18:	2e009a00 	.word	0x2e009a00
   13d1c:	f4436813 	.word	0xf4436813
   13d20:	60133300 	.word	0x60133300
   13d24:	68139a00 	.word	0x68139a00
   13d28:	0380f423 	.word	0x0380f423
   13d2c:	9a006013 	.word	0x9a006013
   13d30:	f4236813 	.word	0xf4236813
   13d34:	60130300 	.word	0x60130300
   13d38:	2300da36 	.word	0x2300da36
   13d3c:	603b4620 	.word	0x603b4620
   13d40:	36fff04f 	.word	0x36fff04f
   13d44:	f9f4f7fe 	.word	0xf9f4f7fe
   13d48:	b0024630 	.word	0xb0024630
   13d4c:	87f0e8bd 	.word	0x87f0e8bd
   13d50:	e7e1240c 	.word	0xe7e1240c
   13d54:	f0059801 	.word	0xf0059801
   13d58:	2405fea9 	.word	0x2405fea9
   13d5c:	4630e7dc 	.word	0x4630e7dc
   13d60:	fa14f004 	.word	0xfa14f004
   13d64:	6844b150 	.word	0x6844b150
   13d68:	2300b144 	.word	0x2300b144
   13d6c:	e7d36043 	.word	0xe7d36043
   13d70:	f7fe2016 	.word	0xf7fe2016
   13d74:	f04ff9dd 	.word	0xf04ff9dd
   13d78:	e7e536ff 	.word	0xe7e536ff
   13d7c:	68139a00 	.word	0x68139a00
   13d80:	3300f443 	.word	0x3300f443
   13d84:	9a006013 	.word	0x9a006013
   13d88:	f4236813 	.word	0xf4236813
   13d8c:	60130380 	.word	0x60130380
   13d90:	68139a00 	.word	0x68139a00
   13d94:	0300f423 	.word	0x0300f423
   13d98:	e7d56013 	.word	0xe7d56013
   13d9c:	f7fe2001 	.word	0xf7fe2001
   13da0:	f04ff9c7 	.word	0xf04ff9c7
   13da4:	e7cf36ff 	.word	0xe7cf36ff
   13da8:	f0044630 	.word	0xf0044630
   13dac:	e7c4f935 	.word	0xe7c4f935
   13db0:	f7fe2018 	.word	0xf7fe2018
   13db4:	f04ff9bd 	.word	0xf04ff9bd
   13db8:	e7c536ff 	.word	0xe7c536ff
   13dbc:	200204a4 	.word	0x200204a4
   13dc0:	00013769 	.word	0x00013769
   13dc4:	200204a0 	.word	0x200204a0
   13dc8:	20027403 	.word	0x20027403

00013dcc <logobj_interface_read>:
   13dcc:	43f0e92d 	.word	0x43f0e92d
   13dd0:	2900b085 	.word	0x2900b085
   13dd4:	2a00d05e 	.word	0x2a00d05e
   13dd8:	dd5b4616 	.word	0xdd5b4616
   13ddc:	4680461f 	.word	0x4680461f
   13de0:	f004460d 	.word	0xf004460d
   13de4:	4604f9d3 	.word	0x4604f9d3
   13de8:	d0592800 	.word	0xd0592800
   13dec:	07ba69c0 	.word	0x07ba69c0
   13df0:	68db6803 	.word	0x68db6803
   13df4:	4798d524 	.word	0x4798d524
   13df8:	d03b3001 	.word	0xd03b3001
   13dfc:	69e06823 	.word	0x69e06823
   13e00:	3380f413 	.word	0x3380f413
   13e04:	2100d038 	.word	0x2100d038
   13e08:	463a6823 	.word	0x463a6823
   13e0c:	3380f423 	.word	0x3380f423
   13e10:	e9cd6023 	.word	0xe9cd6023
   13e14:	e9cd1102 	.word	0xe9cd1102
   13e18:	68035600 	.word	0x68035600
   13e1c:	689b4669 	.word	0x689b4669
   13e20:	46054798 	.word	0x46054798
   13e24:	680369e0 	.word	0x680369e0
   13e28:	479868db 	.word	0x479868db
   13e2c:	d0033001 	.word	0xd0033001
   13e30:	f4436823 	.word	0xf4436823
   13e34:	60233380 	.word	0x60233380
   13e38:	b0054628 	.word	0xb0054628
   13e3c:	83f0e8bd 	.word	0x83f0e8bd
   13e40:	f0126822 	.word	0xf0126822
   13e44:	d1d65980 	.word	0xd1d65980
   13e48:	1c434798 	.word	0x1c434798
   13e4c:	f44fd1d6 	.word	0xf44fd1d6
   13e50:	6a233280 	.word	0x6a233280
   13e54:	2b004611 	.word	0x2b004611
   13e58:	4603bf08 	.word	0x4603bf08
   13e5c:	f0044640 	.word	0xf0044640
   13e60:	b158f929 	.word	0xb158f929
   13e64:	35fff04f 	.word	0x35fff04f
   13e68:	f962f7fe 	.word	0xf962f7fe
   13e6c:	b0054628 	.word	0xb0054628
   13e70:	83f0e8bd 	.word	0x83f0e8bd
   13e74:	e7f52023 	.word	0xe7f52023
   13e78:	e7d4461d 	.word	0xe7d4461d
   13e7c:	f0044640 	.word	0xf0044640
   13e80:	4603f985 	.word	0x4603f985
   13e84:	d0b92800 	.word	0xd0b92800
   13e88:	28006840 	.word	0x28006840
   13e8c:	f8c3d0b6 	.word	0xf8c3d0b6
   13e90:	e7e79004 	.word	0xe7e79004
   13e94:	f7fe2016 	.word	0xf7fe2016
   13e98:	f04ff94b 	.word	0xf04ff94b
   13e9c:	e7cb35ff 	.word	0xe7cb35ff
   13ea0:	f7fe2009 	.word	0xf7fe2009
   13ea4:	f04ff945 	.word	0xf04ff945
   13ea8:	e7c535ff 	.word	0xe7c535ff

00013eac <logobj_interface_write>:
   13eac:	41f0e92d 	.word	0x41f0e92d
   13eb0:	2900b082 	.word	0x2900b082
   13eb4:	2a04d05b 	.word	0x2a04d05b
   13eb8:	461ed159 	.word	0x461ed159
   13ebc:	460d4607 	.word	0x460d4607
   13ec0:	f964f004 	.word	0xf964f004
   13ec4:	28004604 	.word	0x28004604
   13ec8:	07b0d067 	.word	0x07b0d067
   13ecc:	6823d526 	.word	0x6823d526
   13ed0:	d55e039b 	.word	0xd55e039b
   13ed4:	68232600 	.word	0x68232600
   13ed8:	f4232100 	.word	0xf4232100
   13edc:	60233300 	.word	0x60233300
   13ee0:	f8d5a801 	.word	0xf8d5a801
   13ee4:	f0058000 	.word	0xf0058000
   13ee8:	b9f8fdb3 	.word	0xb9f8fdb3
   13eec:	9b012504 	.word	0x9b012504
   13ef0:	0103f247 	.word	0x0103f247
   13ef4:	800cf8c3 	.word	0x800cf8c3
   13ef8:	72987258 	.word	0x72987258
   13efc:	721d72d8 	.word	0x721d72d8
   13f00:	f0054618 	.word	0xf0054618
   13f04:	4680fdbd 	.word	0x4680fdbd
   13f08:	b9cebb40 	.word	0xb9cebb40
   13f0c:	68234628 	.word	0x68234628
   13f10:	3300f443 	.word	0x3300f443
   13f14:	b0026023 	.word	0xb0026023
   13f18:	81f0e8bd 	.word	0x81f0e8bd
   13f1c:	00d96823 	.word	0x00d96823
   13f20:	6823d4d5 	.word	0x6823d4d5
   13f24:	d536039a 	.word	0xd536039a
   13f28:	e7d42601 	.word	0xe7d42601
   13f2c:	6823200c 	.word	0x6823200c
   13f30:	3300f443 	.word	0x3300f443
   13f34:	f7fe6023 	.word	0xf7fe6023
   13f38:	f04ff8fb 	.word	0xf04ff8fb
   13f3c:	e7ea30ff 	.word	0xe7ea30ff
   13f40:	3280f44f 	.word	0x3280f44f
   13f44:	33fff04f 	.word	0x33fff04f
   13f48:	46384611 	.word	0x46384611
   13f4c:	f8b2f004 	.word	0xf8b2f004
   13f50:	6823b198 	.word	0x6823b198
   13f54:	3300f443 	.word	0x3300f443
   13f58:	e7ec6023 	.word	0xe7ec6023
   13f5c:	f0059801 	.word	0xf0059801
   13f60:	6823fda5 	.word	0x6823fda5
   13f64:	f4432005 	.word	0xf4432005
   13f68:	60233300 	.word	0x60233300
   13f6c:	2016e7e3 	.word	0x2016e7e3
   13f70:	f8def7fe 	.word	0xf8def7fe
   13f74:	30fff04f 	.word	0x30fff04f
   13f78:	4638e7cd 	.word	0x4638e7cd
   13f7c:	f906f004 	.word	0xf906f004
   13f80:	28004603 	.word	0x28004603
   13f84:	6840d0c2 	.word	0x6840d0c2
   13f88:	d0bf2800 	.word	0xd0bf2800
   13f8c:	8004f8c3 	.word	0x8004f8c3
   13f90:	2073e7df 	.word	0x2073e7df
   13f94:	2009e7cf 	.word	0x2009e7cf
   13f98:	2009e7cd 	.word	0x2009e7cd
   13f9c:	f8c8f7fe 	.word	0xf8c8f7fe
   13fa0:	30fff04f 	.word	0x30fff04f
   13fa4:	bf00e7b7 	.word	0xbf00e7b7

00013fa8 <logobj_interface_setopt>:
   13fa8:	2901b5f0 	.word	0x2901b5f0
   13fac:	d068b085 	.word	0xd068b085
   13fb0:	f240461e 	.word	0xf240461e
   13fb4:	42992305 	.word	0x42992305
   13fb8:	8095f040 	.word	0x8095f040
   13fbc:	46154607 	.word	0x46154607
   13fc0:	f8e4f004 	.word	0xf8e4f004
   13fc4:	28004604 	.word	0x28004604
   13fc8:	80b2f000 	.word	0x80b2f000
   13fcc:	d0192d01 	.word	0xd0192d01
   13fd0:	d0102d02 	.word	0xd0102d02
   13fd4:	6803252a 	.word	0x6803252a
   13fd8:	0380f423 	.word	0x0380f423
   13fdc:	68236023 	.word	0x68236023
   13fe0:	f4234628 	.word	0xf4234628
   13fe4:	60230300 	.word	0x60230300
   13fe8:	f8a2f7fe 	.word	0xf8a2f7fe
   13fec:	35fff04f 	.word	0x35fff04f
   13ff0:	b0054628 	.word	0xb0054628
   13ff4:	b116bdf0 	.word	0xb116bdf0
   13ff8:	2b019b0a 	.word	0x2b019b0a
   13ffc:	6823d049 	.word	0x6823d049
   14000:	e7e92516 	.word	0xe7e92516
   14004:	d0fa2e00 	.word	0xd0fa2e00
   14008:	2b049b0a 	.word	0x2b049b0a
   1400c:	2100d1f7 	.word	0x2100d1f7
   14010:	f005a803 	.word	0xf005a803
   14014:	4605fd1d 	.word	0x4605fd1d
   14018:	d16a2800 	.word	0xd16a2800
   1401c:	22089803 	.word	0x22089803
   14020:	300c4629 	.word	0x300c4629
   14024:	fc79f010 	.word	0xfc79f010
   14028:	46319803 	.word	0x46319803
   1402c:	300c9a0a 	.word	0x300c9a0a
   14030:	fc46f010 	.word	0xfc46f010
   14034:	98032308 	.word	0x98032308
   14038:	0102f247 	.word	0x0102f247
   1403c:	72457203 	.word	0x72457203
   14040:	72c57285 	.word	0x72c57285
   14044:	f4436823 	.word	0xf4436823
   14048:	60230380 	.word	0x60230380
   1404c:	fd18f005 	.word	0xfd18f005
   14050:	d1512800 	.word	0xd1512800
   14054:	0200f44f 	.word	0x0200f44f
   14058:	33fff04f 	.word	0x33fff04f
   1405c:	46384611 	.word	0x46384611
   14060:	f828f004 	.word	0xf828f004
   14064:	28004605 	.word	0x28004605
   14068:	4638d13b 	.word	0x4638d13b
   1406c:	f88ef004 	.word	0xf88ef004
   14070:	d04f2800 	.word	0xd04f2800
   14074:	2b006843 	.word	0x2b006843
   14078:	2200d04c 	.word	0x2200d04c
   1407c:	6042461d 	.word	0x6042461d
   14080:	9c0ae02f 	.word	0x9c0ae02f
   14084:	f0049400 	.word	0xf0049400
   14088:	4605f8a9 	.word	0x4605f8a9
   1408c:	b0054628 	.word	0xb0054628
   14090:	2100bdf0 	.word	0x2100bdf0
   14094:	7835a803 	.word	0x7835a803
   14098:	fcdaf005 	.word	0xfcdaf005
   1409c:	2d01bb48 	.word	0x2d01bb48
   140a0:	4b26bf08 	.word	0x4b26bf08
   140a4:	0204f04f 	.word	0x0204f04f
   140a8:	701dbf08 	.word	0x701dbf08
   140ac:	98032300 	.word	0x98032300
   140b0:	0101f247 	.word	0x0101f247
   140b4:	60c57243 	.word	0x60c57243
   140b8:	72c37283 	.word	0x72c37283
   140bc:	68237202 	.word	0x68237202
   140c0:	0380f443 	.word	0x0380f443
   140c4:	f0056023 	.word	0xf0056023
   140c8:	4606fcdb 	.word	0x4606fcdb
   140cc:	f44fb9a0 	.word	0xf44fb9a0
   140d0:	f04f0200 	.word	0xf04f0200
   140d4:	461133ff 	.word	0x461133ff
   140d8:	f0034638 	.word	0xf0034638
   140dc:	4605ffeb 	.word	0x4605ffeb
   140e0:	6823b180 	.word	0x6823b180
   140e4:	202ae778 	.word	0x202ae778
   140e8:	f822f7fe 	.word	0xf822f7fe
   140ec:	35fff04f 	.word	0x35fff04f
   140f0:	6823e77e 	.word	0x6823e77e
   140f4:	e76f250c 	.word	0xe76f250c
   140f8:	f0059803 	.word	0xf0059803
   140fc:	2505fcd7 	.word	0x2505fcd7
   14100:	e7696823 	.word	0xe7696823
   14104:	f0044638 	.word	0xf0044638
   14108:	b140f841 	.word	0xb140f841
   1410c:	b1356845 	.word	0xb1356845
   14110:	e7e66046 	.word	0xe7e66046
   14114:	22044631 	.word	0x22044631
   14118:	f0104809 	.word	0xf0104809
   1411c:	6823fbd1 	.word	0x6823fbd1
   14120:	0380f423 	.word	0x0380f423
   14124:	68236023 	.word	0x68236023
   14128:	0300f423 	.word	0x0300f423
   1412c:	e75f6023 	.word	0xe75f6023
   14130:	f7fd2009 	.word	0xf7fd2009
   14134:	f04ffffd 	.word	0xf04ffffd
   14138:	e75935ff 	.word	0xe75935ff
   1413c:	20027403 	.word	0x20027403
   14140:	200204a0 	.word	0x200204a0

00014144 <logobj_interface_getopt>:
   14144:	2901b5f0 	.word	0x2901b5f0
   14148:	9e08b083 	.word	0x9e08b083
   1414c:	461fd030 	.word	0x461fd030
   14150:	2305f240 	.word	0x2305f240
   14154:	d1344299 	.word	0xd1344299
   14158:	f0044615 	.word	0xf0044615
   1415c:	2800f817 	.word	0x2800f817
   14160:	2d01d037 	.word	0x2d01d037
   14164:	2d02d015 	.word	0x2d02d015
   14168:	b387d10b 	.word	0xb387d10b
   1416c:	b3736833 	.word	0xb3736833
   14170:	22012300 	.word	0x22012300
   14174:	491a4618 	.word	0x491a4618
   14178:	70397809 	.word	0x70397809
   1417c:	b0036032 	.word	0xb0036032
   14180:	2009bdf0 	.word	0x2009bdf0
   14184:	ffd4f7fd 	.word	0xffd4f7fd
   14188:	33fff04f 	.word	0x33fff04f
   1418c:	b0034618 	.word	0xb0034618
   14190:	b1e7bdf0 	.word	0xb1e7bdf0
   14194:	2b036833 	.word	0x2b036833
   14198:	4638d919 	.word	0x4638d919
   1419c:	49112204 	.word	0x49112204
   141a0:	fb8ef010 	.word	0xfb8ef010
   141a4:	22042300 	.word	0x22042300
   141a8:	60324618 	.word	0x60324618
   141ac:	bdf0b003 	.word	0xbdf0b003
   141b0:	f0049600 	.word	0xf0049600
   141b4:	4603f849 	.word	0x4603f849
   141b8:	d1e32800 	.word	0xd1e32800
   141bc:	b0034618 	.word	0xb0034618
   141c0:	202abdf0 	.word	0x202abdf0
   141c4:	ffb4f7fd 	.word	0xffb4f7fd
   141c8:	33fff04f 	.word	0x33fff04f
   141cc:	2016e7de 	.word	0x2016e7de
   141d0:	2009e7d8 	.word	0x2009e7d8
   141d4:	ffacf7fd 	.word	0xffacf7fd
   141d8:	33fff04f 	.word	0x33fff04f
   141dc:	bf00e7d6 	.word	0xbf00e7d6
   141e0:	20027404 	.word	0x20027404
   141e4:	200204a0 	.word	0x200204a0

000141e8 <logobj_interface_close>:
   141e8:	4604b510 	.word	0x4604b510
   141ec:	ffcef003 	.word	0xffcef003
   141f0:	4620b138 	.word	0x4620b138
   141f4:	ff10f003 	.word	0xff10f003
   141f8:	4a052300 	.word	0x4a052300
   141fc:	60134618 	.word	0x60134618
   14200:	2009bd10 	.word	0x2009bd10
   14204:	ff94f7fd 	.word	0xff94f7fd
   14208:	30fff04f 	.word	0x30fff04f
   1420c:	bf00bd10 	.word	0xbf00bd10
   14210:	200204a4 	.word	0x200204a4

00014214 <transport_reset>:
   14214:	47702000 	.word	0x47702000

00014218 <transport_data_free>:
   14218:	e9d34b0b 	.word	0xe9d34b0b
   1421c:	44132300 	.word	0x44132300
   14220:	d20d4298 	.word	0xd20d4298
   14224:	d80b4282 	.word	0xd80b4282
   14228:	4604b510 	.word	0x4604b510
   1422c:	feecf005 	.word	0xfeecf005
   14230:	4a06b140 	.word	0x4a06b140
   14234:	60026084 	.word	0x60026084
   14238:	4010e8bd 	.word	0x4010e8bd
   1423c:	be2cf005 	.word	0xbe2cf005
   14240:	b9eef00b 	.word	0xb9eef00b
   14244:	bf00bd10 	.word	0xbf00bd10
   14248:	200204a8 	.word	0x200204a8
   1424c:	00020001 	.word	0x00020001

00014250 <rpc_transport_ipc_init>:
   14250:	d02b2800 	.word	0xd02b2800
   14254:	b089b530 	.word	0xb089b530
   14258:	4669aa01 	.word	0x4669aa01
   1425c:	f0054604 	.word	0xf0054604
   14260:	4603fd31 	.word	0x4603fd31
   14264:	4a13b140 	.word	0x4a13b140
   14268:	0028f104 	.word	0x0028f104
   1426c:	e882c803 	.word	0xe882c803
   14270:	46180003 	.word	0x46180003
   14274:	bd30b009 	.word	0xbd30b009
   14278:	1200e9dd 	.word	0x1200e9dd
   1427c:	f0004620 	.word	0xf0004620
   14280:	4603f9ab 	.word	0x4603f9ab
   14284:	d1ee2800 	.word	0xd1ee2800
   14288:	490c4b0b 	.word	0x490c4b0b
   1428c:	4a0d480c 	.word	0x4a0d480c
   14290:	4d0d9303 	.word	0x4d0d9303
   14294:	91044b0d 	.word	0x91044b0d
   14298:	490d9005 	.word	0x490d9005
   1429c:	9307a802 	.word	0x9307a802
   142a0:	92029506 	.word	0x92029506
   142a4:	fa3af00a 	.word	0xfa3af00a
   142a8:	e7dc4603 	.word	0xe7dc4603
   142ac:	4618230e 	.word	0x4618230e
   142b0:	bf004770 	.word	0xbf004770
   142b4:	200204a8 	.word	0x200204a8
   142b8:	00019f99 	.word	0x00019f99
   142bc:	0001a069 	.word	0x0001a069
   142c0:	00014bf5 	.word	0x00014bf5
   142c4:	00019e99 	.word	0x00019e99
   142c8:	00014219 	.word	0x00014219
   142cc:	00014215 	.word	0x00014215
   142d0:	200204b0 	.word	0x200204b0

000142d4 <rpc_transport_rx_handle>:
   142d4:	b508b160 	.word	0xb508b160
   142d8:	b2db6843 	.word	0xb2db6843
   142dc:	d00e2b02 	.word	0xd00e2b02
   142e0:	0c1b6803 	.word	0x0c1b6803
   142e4:	d0052b02 	.word	0xd0052b02
   142e8:	d00e2b04 	.word	0xd00e2b04
   142ec:	bd082000 	.word	0xbd082000
   142f0:	47702000 	.word	0x47702000
   142f4:	f00b6880 	.word	0xf00b6880
   142f8:	2000f993 	.word	0x2000f993
   142fc:	4601bd08 	.word	0x4601bd08
   14300:	4008e8bd 	.word	0x4008e8bd
   14304:	f00a4803 	.word	0xf00a4803
   14308:	4802b8fb 	.word	0x4802b8fb
   1430c:	fa66f00a 	.word	0xfa66f00a
   14310:	bd082000 	.word	0xbd082000
   14314:	200204b0 	.word	0x200204b0
   14318:	bf004770 	.word	0xbf004770

0001431c <rpc_transport_ipc_fault_handler>:
   1431c:	b916f000 	.word	0xb916f000

00014320 <nrf_socket>:
   14320:	4604b570 	.word	0x4604b570
   14324:	4616460d 	.word	0x4616460d
   14328:	f8bef007 	.word	0xf8bef007
   1432c:	6803b130 	.word	0x6803b130
   14330:	46294632 	.word	0x46294632
   14334:	e8bd4620 	.word	0xe8bd4620
   14338:	47184070 	.word	0x47184070
   1433c:	30fff04f 	.word	0x30fff04f
   14340:	bf00bd70 	.word	0xbf00bd70

00014344 <nrf_close>:
   14344:	4604b510 	.word	0x4604b510
   14348:	f902f007 	.word	0xf902f007
   1434c:	6843b120 	.word	0x6843b120
   14350:	e8bd4620 	.word	0xe8bd4620
   14354:	47184010 	.word	0x47184010
   14358:	30fff04f 	.word	0x30fff04f
   1435c:	bf00bd10 	.word	0xbf00bd10

00014360 <nrf_sendto>:
   14360:	47f0e92d 	.word	0x47f0e92d
   14364:	e9dd460d 	.word	0xe9dd460d
   14368:	46168908 	.word	0x46168908
   1436c:	4604461f 	.word	0x4604461f
   14370:	f8eef007 	.word	0xf8eef007
   14374:	e9cdb158 	.word	0xe9cdb158
   14378:	f8d08908 	.word	0xf8d08908
   1437c:	463be008 	.word	0x463be008
   14380:	46294632 	.word	0x46294632
   14384:	46f44620 	.word	0x46f44620
   14388:	47f0e8bd 	.word	0x47f0e8bd
   1438c:	f04f4760 	.word	0xf04f4760
   14390:	e8bd30ff 	.word	0xe8bd30ff
   14394:	bf0087f0 	.word	0xbf0087f0

00014398 <nrf_send>:
   14398:	41f0e92d 	.word	0x41f0e92d
   1439c:	460eb082 	.word	0x460eb082
   143a0:	46984617 	.word	0x46984617
   143a4:	f0074605 	.word	0xf0074605
   143a8:	b160f8d3 	.word	0xb160f8d3
   143ac:	20004604 	.word	0x20004604
   143b0:	0000e9cd 	.word	0x0000e9cd
   143b4:	463a4643 	.word	0x463a4643
   143b8:	46284631 	.word	0x46284631
   143bc:	47a068a4 	.word	0x47a068a4
   143c0:	e8bdb002 	.word	0xe8bdb002
   143c4:	f04f81f0 	.word	0xf04f81f0
   143c8:	e7f930ff 	.word	0xe7f930ff

000143cc <nrf_recvfrom>:
   143cc:	47f0e92d 	.word	0x47f0e92d
   143d0:	e9dd460d 	.word	0xe9dd460d
   143d4:	46168908 	.word	0x46168908
   143d8:	4604461f 	.word	0x4604461f
   143dc:	f8b8f007 	.word	0xf8b8f007
   143e0:	e9cdb158 	.word	0xe9cdb158
   143e4:	f8d08908 	.word	0xf8d08908
   143e8:	463be00c 	.word	0x463be00c
   143ec:	46294632 	.word	0x46294632
   143f0:	46f44620 	.word	0x46f44620
   143f4:	47f0e8bd 	.word	0x47f0e8bd
   143f8:	f04f4760 	.word	0xf04f4760
   143fc:	e8bd30ff 	.word	0xe8bd30ff
   14400:	bf0087f0 	.word	0xbf0087f0

00014404 <nrf_recv>:
   14404:	41f0e92d 	.word	0x41f0e92d
   14408:	460eb082 	.word	0x460eb082
   1440c:	46984617 	.word	0x46984617
   14410:	f0074605 	.word	0xf0074605
   14414:	b160f89d 	.word	0xb160f89d
   14418:	20004604 	.word	0x20004604
   1441c:	0000e9cd 	.word	0x0000e9cd
   14420:	463a4643 	.word	0x463a4643
   14424:	46284631 	.word	0x46284631
   14428:	47a068e4 	.word	0x47a068e4
   1442c:	e8bdb002 	.word	0xe8bdb002
   14430:	f04f81f0 	.word	0xf04f81f0
   14434:	e7f930ff 	.word	0xe7f930ff

00014438 <nrf_connect>:
   14438:	460db570 	.word	0x460db570
   1443c:	46044616 	.word	0x46044616
   14440:	f886f007 	.word	0xf886f007
   14444:	6943b130 	.word	0x6943b130
   14448:	46294632 	.word	0x46294632
   1444c:	e8bd4620 	.word	0xe8bd4620
   14450:	47184070 	.word	0x47184070
   14454:	30fff04f 	.word	0x30fff04f
   14458:	bf00bd70 	.word	0xbf00bd70

0001445c <nrf_listen>:
   1445c:	460db570 	.word	0x460db570
   14460:	f0074604 	.word	0xf0074604
   14464:	b128f875 	.word	0xb128f875
   14468:	46296983 	.word	0x46296983
   1446c:	e8bd4620 	.word	0xe8bd4620
   14470:	47184070 	.word	0x47184070
   14474:	30fff04f 	.word	0x30fff04f
   14478:	bf00bd70 	.word	0xbf00bd70

0001447c <nrf_accept>:
   1447c:	41f0e92d 	.word	0x41f0e92d
   14480:	4616460d 	.word	0x4616460d
   14484:	f0074604 	.word	0xf0074604
   14488:	b140f863 	.word	0xb140f863
   1448c:	463269c7 	.word	0x463269c7
   14490:	46204629 	.word	0x46204629
   14494:	e8bd46bc 	.word	0xe8bd46bc
   14498:	230041f0 	.word	0x230041f0
   1449c:	f04f4760 	.word	0xf04f4760
   144a0:	e8bd30ff 	.word	0xe8bd30ff
   144a4:	bf0081f0 	.word	0xbf0081f0

000144a8 <nrf_bind>:
   144a8:	460db570 	.word	0x460db570
   144ac:	46044616 	.word	0x46044616
   144b0:	f84ef007 	.word	0xf84ef007
   144b4:	6903b130 	.word	0x6903b130
   144b8:	46294632 	.word	0x46294632
   144bc:	e8bd4620 	.word	0xe8bd4620
   144c0:	47184070 	.word	0x47184070
   144c4:	30fff04f 	.word	0x30fff04f
   144c8:	bf00bd70 	.word	0xbf00bd70

000144cc <nrf_setsockopt>:
   144cc:	41f0e92d 	.word	0x41f0e92d
   144d0:	8018f8dd 	.word	0x8018f8dd
   144d4:	4616460d 	.word	0x4616460d
   144d8:	4604461f 	.word	0x4604461f
   144dc:	f838f007 	.word	0xf838f007
   144e0:	f8cdb158 	.word	0xf8cdb158
   144e4:	f8d08018 	.word	0xf8d08018
   144e8:	463be020 	.word	0x463be020
   144ec:	46294632 	.word	0x46294632
   144f0:	46f44620 	.word	0x46f44620
   144f4:	41f0e8bd 	.word	0x41f0e8bd
   144f8:	f04f4760 	.word	0xf04f4760
   144fc:	e8bd30ff 	.word	0xe8bd30ff
   14500:	bf0081f0 	.word	0xbf0081f0

00014504 <nrf_getsockopt>:
   14504:	41f0e92d 	.word	0x41f0e92d
   14508:	8018f8dd 	.word	0x8018f8dd
   1450c:	4616460d 	.word	0x4616460d
   14510:	4604461f 	.word	0x4604461f
   14514:	f81cf007 	.word	0xf81cf007
   14518:	f8cdb158 	.word	0xf8cdb158
   1451c:	f8d08018 	.word	0xf8d08018
   14520:	463be024 	.word	0x463be024
   14524:	46294632 	.word	0x46294632
   14528:	46f44620 	.word	0x46f44620
   1452c:	41f0e8bd 	.word	0x41f0e8bd
   14530:	f04f4760 	.word	0xf04f4760
   14534:	e8bd30ff 	.word	0xe8bd30ff
   14538:	bf0081f0 	.word	0xbf0081f0

0001453c <nrf_getaddrinfo>:
   1453c:	b8f8f00d 	.word	0xb8f8f00d

00014540 <nrf_freeaddrinfo>:
   14540:	b8f8f00d 	.word	0xb8f8f00d

00014544 <nrf_poll>:
   14544:	b8f8f00d 	.word	0xb8f8f00d

00014548 <nrf_fcntl>:
   14548:	b950f00d 	.word	0xb950f00d

0001454c <bsd_platform_error_handler>:
   1454c:	f7f8b508 	.word	0xf7f8b508
   14550:	bd08fee1 	.word	0xbd08fee1

00014554 <bsd_init>:
   14554:	4c06b510 	.word	0x4c06b510
   14558:	b92b7823 	.word	0xb92b7823
   1455c:	ff38f006 	.word	0xff38f006
   14560:	2301b908 	.word	0x2301b908
   14564:	bd107023 	.word	0xbd107023
   14568:	30fff04f 	.word	0x30fff04f
   1456c:	bf00bd10 	.word	0xbf00bd10
   14570:	20027405 	.word	0x20027405

00014574 <symbol_000fa2a>:
   14574:	2300b110 	.word	0x2300b110
   14578:	3300e9c0 	.word	0x3300e9c0
   1457c:	bf004770 	.word	0xbf004770

00014580 <symbol_00066b4>:
   14580:	d0052802 	.word	0xd0052802
   14584:	28034b03 	.word	0x28034b03
   14588:	4618bf0c 	.word	0x4618bf0c
   1458c:	47702000 	.word	0x47702000
   14590:	47704801 	.word	0x47704801
   14594:	0002692c 	.word	0x0002692c
   14598:	000268fc 	.word	0x000268fc

0001459c <symbol_000194a>:
   1459c:	b159b160 	.word	0xb159b160
   145a0:	6806b570 	.word	0x6806b570
   145a4:	6a4bb966 	.word	0x6a4bb966
   145a8:	460d4604 	.word	0x460d4604
   145ac:	60604798 	.word	0x60604798
   145b0:	6025b120 	.word	0x6025b120
   145b4:	bd704630 	.word	0xbd704630
   145b8:	47704802 	.word	0x47704802
   145bc:	bd704802 	.word	0xbd704802
   145c0:	bd704800 	.word	0xbd704800
   145c4:	ffffc180 	.word	0xffffc180
   145c8:	ffffc080 	.word	0xffffc080

000145cc <symbol_00005ae>:
   145cc:	6800b110 	.word	0x6800b110
   145d0:	7800b100 	.word	0x7800b100
   145d4:	bf004770 	.word	0xbf004770

000145d8 <rpc_transport_ipc_rx_init>:
   145d8:	f0002800 	.word	0xf0002800
   145dc:	e92d80ff 	.word	0xe92d80ff
   145e0:	68054ff0 	.word	0x68054ff0
   145e4:	2d00b095 	.word	0x2d00b095
   145e8:	80eef000 	.word	0x80eef000
   145ec:	2b006883 	.word	0x2b006883
   145f0:	80eaf000 	.word	0x80eaf000
   145f4:	2f006907 	.word	0x2f006907
   145f8:	80e6f000 	.word	0x80e6f000
   145fc:	2c006a84 	.word	0x2c006a84
   14600:	80e2f000 	.word	0x80e2f000
   14604:	2c1b6844 	.word	0x2c1b6844
   14608:	80e3f240 	.word	0x80e3f240
   1460c:	2c0b68c4 	.word	0x2c0b68c4
   14610:	80dff240 	.word	0x80dff240
   14614:	e014f8d0 	.word	0xe014f8d0
   14618:	0f17f1be 	.word	0x0f17f1be
   1461c:	80d9f240 	.word	0x80d9f240
   14620:	46042600 	.word	0x46042600
   14624:	e9cd486f 	.word	0xe9cd486f
   14628:	f8df1200 	.word	0xf8df1200
   1462c:	496ea1d8 	.word	0x496ea1d8
   14630:	6ba08006 	.word	0x6ba08006
   14634:	c1d0f8df 	.word	0xc1d0f8df
   14638:	81d0f8df 	.word	0x81d0f8df
   1463c:	b1d0f8df 	.word	0xb1d0f8df
   14640:	91d0f8df 	.word	0x91d0f8df
   14644:	600e4672 	.word	0x600e4672
   14648:	0000f8ca 	.word	0x0000f8ca
   1464c:	46384631 	.word	0x46384631
   14650:	6000f8cc 	.word	0x6000f8cc
   14654:	3000f8cb 	.word	0x3000f8cb
   14658:	6000f8c8 	.word	0x6000f8c8
   1465c:	6000f8c9 	.word	0x6000f8c9
   14660:	f95bf010 	.word	0xf95bf010
   14664:	463869e3 	.word	0x463869e3
   14668:	69a3603b 	.word	0x69a3603b
   1466c:	f001607b 	.word	0xf001607b
   14670:	2201fd45 	.word	0x2201fd45
   14674:	0c04f04f 	.word	0x0c04f04f
   14678:	495d4b5c 	.word	0x495d4b5c
   1467c:	5610f8c3 	.word	0x5610f8c3
   14680:	20806809 	.word	0x20806809
   14684:	495b9104 	.word	0x495b9104
   14688:	e010f8dd 	.word	0xe010f8dd
   1468c:	6614f8c3 	.word	0x6614f8c3
   14690:	702e6809 	.word	0x702e6809
   14694:	706e9103 	.word	0x706e9103
   14698:	70aa70ee 	.word	0x70aa70ee
   1469c:	6aa19903 	.word	0x6aa19903
   146a0:	e000f8db 	.word	0xe000f8db
   146a4:	6ae16069 	.word	0x6ae16069
   146a8:	60a99c01 	.word	0x60a99c01
   146ac:	9c0060ec 	.word	0x9c0060ec
   146b0:	61af4951 	.word	0x61af4951
   146b4:	e014f8c5 	.word	0xe014f8c5
   146b8:	f8c3612c 	.word	0xf8c3612c
   146bc:	680c2590 	.word	0x680c2590
   146c0:	6192f5a1 	.word	0x6192f5a1
   146c4:	9c059405 	.word	0x9c059405
   146c8:	c598f8c3 	.word	0xc598f8c3
   146cc:	4498f8d1 	.word	0x4498f8d1
   146d0:	6780f44f 	.word	0x6780f44f
   146d4:	9c069406 	.word	0x9c069406
   146d8:	f8c32410 	.word	0xf8c32410
   146dc:	f8d145a0 	.word	0xf8d145a0
   146e0:	4d4644a0 	.word	0x4d4644a0
   146e4:	9c079407 	.word	0x9c079407
   146e8:	f8c32440 	.word	0xf8c32440
   146ec:	f8d145a8 	.word	0xf8d145a8
   146f0:	940844a8 	.word	0x940844a8
   146f4:	f8c39c08 	.word	0xf8c39c08
   146f8:	f8d105ac 	.word	0xf8d105ac
   146fc:	900904ac 	.word	0x900904ac
   14700:	f8c39809 	.word	0xf8c39809
   14704:	68086100 	.word	0x68086100
   14708:	980a900a 	.word	0x980a900a
   1470c:	6108f8c3 	.word	0x6108f8c3
   14710:	900b6888 	.word	0x900b6888
   14714:	f8c3980b 	.word	0xf8c3980b
   14718:	69086110 	.word	0x69086110
   1471c:	980c900c 	.word	0x980c900c
   14720:	6118f8c3 	.word	0x6118f8c3
   14724:	900d6988 	.word	0x900d6988
   14728:	f8c3980d 	.word	0xf8c3980d
   1472c:	69c8611c 	.word	0x69c8611c
   14730:	7101f501 	.word	0x7101f501
   14734:	980e900e 	.word	0x980e900e
   14738:	0304f8d3 	.word	0x0304f8d3
   1473c:	f8c34310 	.word	0xf8c34310
   14740:	680c0304 	.word	0x680c0304
   14744:	940f482e 	.word	0x940f482e
   14748:	f8d39c0f 	.word	0xf8d39c0f
   1474c:	ea444304 	.word	0xea444304
   14750:	f8c3040c 	.word	0xf8c3040c
   14754:	680c4304 	.word	0x680c4304
   14758:	9c109410 	.word	0x9c109410
   1475c:	4304f8d3 	.word	0x4304f8d3
   14760:	0410f044 	.word	0x0410f044
   14764:	4304f8c3 	.word	0x4304f8c3
   14768:	9411680c 	.word	0x9411680c
   1476c:	f8d39c11 	.word	0xf8d39c11
   14770:	f0444304 	.word	0xf0444304
   14774:	f8c30440 	.word	0xf8c30440
   14778:	680c4304 	.word	0x680c4304
   1477c:	9c129412 	.word	0x9c129412
   14780:	4304f8d3 	.word	0x4304f8d3
   14784:	0480f044 	.word	0x0480f044
   14788:	4304f8c3 	.word	0x4304f8c3
   1478c:	3000f8da 	.word	0x3000f8da
   14790:	015b6809 	.word	0x015b6809
   14794:	b2db9113 	.word	0xb2db9113
   14798:	f8c89913 	.word	0xf8c89913
   1479c:	f8802000 	.word	0xf8802000
   147a0:	f8c0332a 	.word	0xf8c0332a
   147a4:	60477184 	.word	0x60477184
   147a8:	f8c59602 	.word	0xf8c59602
   147ac:	f8d56610 	.word	0xf8d56610
   147b0:	93023610 	.word	0x93023610
   147b4:	f8d89b02 	.word	0xf8d89b02
   147b8:	2b013000 	.word	0x2b013000
   147bc:	f8d9d0fb 	.word	0xf8d9d0fb
   147c0:	b0150000 	.word	0xb0150000
   147c4:	8ff0e8bd 	.word	0x8ff0e8bd
   147c8:	000ef24c 	.word	0x000ef24c
   147cc:	e8bdb015 	.word	0xe8bdb015
   147d0:	f24c8ff0 	.word	0xf24c8ff0
   147d4:	b0150009 	.word	0xb0150009
   147d8:	8ff0e8bd 	.word	0x8ff0e8bd
   147dc:	000ef24c 	.word	0x000ef24c
   147e0:	bf004770 	.word	0xbf004770
   147e4:	20025e18 	.word	0x20025e18
   147e8:	200204c0 	.word	0x200204c0
   147ec:	4002a000 	.word	0x4002a000
   147f0:	4002a610 	.word	0x4002a610
   147f4:	4002a614 	.word	0x4002a614
   147f8:	4002a590 	.word	0x4002a590
   147fc:	40005000 	.word	0x40005000
   14800:	e000e100 	.word	0xe000e100
   14804:	200204b8 	.word	0x200204b8
   14808:	200204c4 	.word	0x200204c4
   1480c:	200204bc 	.word	0x200204bc
   14810:	200204c8 	.word	0x200204c8
   14814:	200204b4 	.word	0x200204b4

00014818 <IPC_IRQHandler>:
   14818:	4ff0e92d 	.word	0x4ff0e92d
   1481c:	6580f44f 	.word	0x6580f44f
   14820:	b0874ca7 	.word	0xb0874ca7
   14824:	5084f8c4 	.word	0x5084f8c4
   14828:	8f4ff3bf 	.word	0x8f4ff3bf
   1482c:	8f6ff3bf 	.word	0x8f6ff3bf
   14830:	f8c44ea4 	.word	0xf8c44ea4
   14834:	f8d65184 	.word	0xf8d65184
   14838:	061f330c 	.word	0x061f330c
   1483c:	80c8f100 	.word	0x80c8f100
   14840:	f8d34ba0 	.word	0xf8d34ba0
   14844:	07d0230c 	.word	0x07d0230c
   14848:	80d4f100 	.word	0x80d4f100
   1484c:	230cf8d3 	.word	0x230cf8d3
   14850:	0240f012 	.word	0x0240f012
   14854:	80b6f040 	.word	0x80b6f040
   14858:	130cf8d3 	.word	0x130cf8d3
   1485c:	f1000749 	.word	0xf1000749
   14860:	f8d380e6 	.word	0xf8d380e6
   14864:	06da330c 	.word	0x06da330c
   14868:	809df140 	.word	0x809df140
   1486c:	4a952100 	.word	0x4a952100
   14870:	f8c24b95 	.word	0xf8c24b95
   14874:	681b1110 	.word	0x681b1110
   14878:	9b049304 	.word	0x9b049304
   1487c:	8270f8df 	.word	0x8270f8df
   14880:	f8df4f92 	.word	0xf8df4f92
   14884:	f8d89270 	.word	0xf8d89270
   14888:	f8daa000 	.word	0xf8daa000
   1488c:	29001000 	.word	0x29001000
   14890:	2200d03f 	.word	0x2200d03f
   14894:	e0024614 	.word	0xe0024614
   14898:	428c3401 	.word	0x428c3401
   1489c:	eb0ad227 	.word	0xeb0ad227
   148a0:	68ab05c4 	.word	0x68ab05c4
   148a4:	d0f72b00 	.word	0xd0f72b00
   148a8:	b2f6686e 	.word	0xb2f6686e
   148ac:	d1f32e01 	.word	0xd1f32e01
   148b0:	f8b96868 	.word	0xf8b96868
   148b4:	ebb33000 	.word	0xebb33000
   148b8:	d1ed4f10 	.word	0xd1ed4f10
   148bc:	3301686a 	.word	0x3301686a
   148c0:	02fff022 	.word	0x02fff022
   148c4:	0202f042 	.word	0x0202f042
   148c8:	68a8606a 	.word	0x68a8606a
   148cc:	3000f8a9 	.word	0x3000f8a9
   148d0:	fd00f7ff 	.word	0xfd00f7ff
   148d4:	b9284632 	.word	0xb9284632
   148d8:	f023686b 	.word	0xf023686b
   148dc:	f04303ff 	.word	0xf04303ff
   148e0:	606b0303 	.word	0x606b0303
   148e4:	1000f8da 	.word	0x1000f8da
   148e8:	428c3401 	.word	0x428c3401
   148ec:	2a00d3d7 	.word	0x2a00d3d7
   148f0:	b171d1cd 	.word	0xb171d1cd
   148f4:	eb0a4613 	.word	0xeb0a4613
   148f8:	689002c3 	.word	0x689002c3
   148fc:	b1303301 	.word	0xb1303301
   14900:	b004f8d2 	.word	0xb004f8d2
   14904:	fb8bfa5f 	.word	0xfb8bfa5f
   14908:	0f01f1bb 	.word	0x0f01f1bb
   1490c:	428bd003 	.word	0x428bd003
   14910:	f04fd1f1 	.word	0xf04fd1f1
   14914:	f8d70b00 	.word	0xf8d70b00
   14918:	f8daa000 	.word	0xf8daa000
   1491c:	2a002000 	.word	0x2a002000
   14920:	2100d03d 	.word	0x2100d03d
   14924:	e002460c 	.word	0xe002460c
   14928:	42943401 	.word	0x42943401
   1492c:	eb0ad227 	.word	0xeb0ad227
   14930:	68ab05c4 	.word	0x68ab05c4
   14934:	d0f72b00 	.word	0xd0f72b00
   14938:	b2f6686e 	.word	0xb2f6686e
   1493c:	d1f32e01 	.word	0xd1f32e01
   14940:	f8b96868 	.word	0xf8b96868
   14944:	ebb33000 	.word	0xebb33000
   14948:	d1ed4f10 	.word	0xd1ed4f10
   1494c:	3301686a 	.word	0x3301686a
   14950:	02fff022 	.word	0x02fff022
   14954:	0202f042 	.word	0x0202f042
   14958:	68a8606a 	.word	0x68a8606a
   1495c:	3000f8a9 	.word	0x3000f8a9
   14960:	fcb8f7ff 	.word	0xfcb8f7ff
   14964:	b9284631 	.word	0xb9284631
   14968:	f022686a 	.word	0xf022686a
   1496c:	f04303ff 	.word	0xf04303ff
   14970:	606b0303 	.word	0x606b0303
   14974:	2000f8da 	.word	0x2000f8da
   14978:	42943401 	.word	0x42943401
   1497c:	2900d3d7 	.word	0x2900d3d7
   14980:	b162d1cd 	.word	0xb162d1cd
   14984:	eb0a460b 	.word	0xeb0a460b
   14988:	688801c3 	.word	0x688801c3
   1498c:	b1203301 	.word	0xb1203301
   14990:	b2c96849 	.word	0xb2c96849
   14994:	f43f2901 	.word	0xf43f2901
   14998:	4293af76 	.word	0x4293af76
   1499c:	f1bbd1f3 	.word	0xf1bbd1f3
   149a0:	f47f0f00 	.word	0xf47f0f00
   149a4:	f44faf70 	.word	0xf44faf70
   149a8:	4b496180 	.word	0x4b496180
   149ac:	681b4a44 	.word	0x681b4a44
   149b0:	b2db015b 	.word	0xb2db015b
   149b4:	332af882 	.word	0x332af882
   149b8:	1184f8c2 	.word	0x1184f8c2
   149bc:	b0076051 	.word	0xb0076051
   149c0:	8ff0e8bd 	.word	0x8ff0e8bd
   149c4:	4b432206 	.word	0x4b432206
   149c8:	b007601a 	.word	0xb007601a
   149cc:	8ff0e8bd 	.word	0x8ff0e8bd
   149d0:	fc7cf001 	.word	0xfc7cf001
   149d4:	fde8f001 	.word	0xfde8f001
   149d8:	d1492800 	.word	0xd1492800
   149dc:	f8c64b3e 	.word	0xf8c64b3e
   149e0:	681b011c 	.word	0x681b011c
   149e4:	9b019301 	.word	0x9b019301
   149e8:	f8d34b36 	.word	0xf8d34b36
   149ec:	07d0230c 	.word	0x07d0230c
   149f0:	af2cf57f 	.word	0xaf2cf57f
   149f4:	f2482000 	.word	0xf2482000
   149f8:	49380202 	.word	0x49380202
   149fc:	0100f8c3 	.word	0x0100f8c3
   14a00:	91026809 	.word	0x91026809
   14a04:	f8d39902 	.word	0xf8d39902
   14a08:	42933614 	.word	0x42933614
   14a0c:	d81ed040 	.word	0xd81ed040
   14a10:	d04f2b00 	.word	0xd04f2b00
   14a14:	d9422b02 	.word	0xd9422b02
   14a18:	0201f248 	.word	0x0201f248
   14a1c:	d1494293 	.word	0xd1494293
   14a20:	22072003 	.word	0x22072003
   14a24:	4b2e492b 	.word	0x4b2e492b
   14a28:	601a6008 	.word	0x601a6008
   14a2c:	4d29e7cd 	.word	0x4d29e7cd
   14a30:	f8c36829 	.word	0xf8c36829
   14a34:	29012108 	.word	0x29012108
   14a38:	d05d492a 	.word	0xd05d492a
   14a3c:	9203680a 	.word	0x9203680a
   14a40:	f8d39a03 	.word	0xf8d39a03
   14a44:	06db330c 	.word	0x06db330c
   14a48:	af10f53f 	.word	0xaf10f53f
   14a4c:	4a26e716 	.word	0x4a26e716
   14a50:	d8144293 	.word	0xd8144293
   14a54:	6f88f1b3 	.word	0x6f88f1b3
   14a58:	f248d814 	.word	0xf248d814
   14a5c:	42930203 	.word	0x42930203
   14a60:	2003d128 	.word	0x2003d128
   14a64:	491b2204 	.word	0x491b2204
   14a68:	60084b1d 	.word	0x60084b1d
   14a6c:	e7ac601a 	.word	0xe7ac601a
   14a70:	f88423e0 	.word	0xf88423e0
   14a74:	6065332a 	.word	0x6065332a
   14a78:	e8bdb007 	.word	0xe8bdb007
   14a7c:	4a1b8ff0 	.word	0x4a1b8ff0
   14a80:	d1174293 	.word	0xd1174293
   14a84:	49132003 	.word	0x49132003
   14a88:	60084a15 	.word	0x60084a15
   14a8c:	e79c6013 	.word	0xe79c6013
   14a90:	22062003 	.word	0x22062003
   14a94:	4b12490f 	.word	0x4b12490f
   14a98:	601a6008 	.word	0x601a6008
   14a9c:	2303e795 	.word	0x2303e795
   14aa0:	490c4618 	.word	0x490c4618
   14aa4:	600b4a0e 	.word	0x600b4a0e
   14aa8:	b0076013 	.word	0xb0076013
   14aac:	4ff0e8bd 	.word	0x4ff0e8bd
   14ab0:	bc34f7ff 	.word	0xbc34f7ff
   14ab4:	49072303 	.word	0x49072303
   14ab8:	600b4a09 	.word	0x600b4a09
   14abc:	e7846013 	.word	0xe7846013
   14ac0:	e000e100 	.word	0xe000e100
   14ac4:	4002a000 	.word	0x4002a000
   14ac8:	4002a110 	.word	0x4002a110
   14acc:	200204c0 	.word	0x200204c0
   14ad0:	200204b8 	.word	0x200204b8
   14ad4:	200204bc 	.word	0x200204bc
   14ad8:	4002a11c 	.word	0x4002a11c
   14adc:	4002a100 	.word	0x4002a100
   14ae0:	200204b4 	.word	0x200204b4
   14ae4:	4002a108 	.word	0x4002a108
   14ae8:	04400004 	.word	0x04400004
   14aec:	05500001 	.word	0x05500001
   14af0:	200204c4 	.word	0x200204c4
   14af4:	20025e18 	.word	0x20025e18
   14af8:	680b4a37 	.word	0x680b4a37
   14afc:	93056812 	.word	0x93056812
   14b00:	48366893 	.word	0x48366893
   14b04:	60034936 	.word	0x60034936
   14b08:	9a056854 	.word	0x9a056854
   14b0c:	b16b600c 	.word	0xb16b600c
   14b10:	681bb164 	.word	0x681bb164
   14b14:	d8022b10 	.word	0xd8022b10
   14b18:	2a106822 	.word	0x2a106822
   14b1c:	2103d90c 	.word	0x2103d90c
   14b20:	0206f24c 	.word	0x0206f24c
   14b24:	60294b2f 	.word	0x60294b2f
   14b28:	e74e601a 	.word	0xe74e601a
   14b2c:	22102103 	.word	0x22102103
   14b30:	60294b2c 	.word	0x60294b2c
   14b34:	e748601a 	.word	0xe748601a
   14b38:	80b4f8df 	.word	0x80b4f8df
   14b3c:	d0422a00 	.word	0xd0422a00
   14b40:	f1042300 	.word	0xf1042300
   14b44:	461e0904 	.word	0x461e0904
   14b48:	3601e002 	.word	0x3601e002
   14b4c:	d22a4296 	.word	0xd22a4296
   14b50:	19e100f7 	.word	0x19e100f7
   14b54:	28006888 	.word	0x28006888
   14b58:	f8d1d0f7 	.word	0xf8d1d0f7
   14b5c:	fa5fa004 	.word	0xfa5fa004
   14b60:	f1bafa8a 	.word	0xf1bafa8a
   14b64:	d1f00f01 	.word	0xd1f00f01
   14b68:	c004f8d1 	.word	0xc004f8d1
   14b6c:	0000f8b8 	.word	0x0000f8b8
   14b70:	4f1cebb0 	.word	0x4f1cebb0
   14b74:	684bd1e9 	.word	0x684bd1e9
   14b78:	f0231c42 	.word	0xf0231c42
   14b7c:	f04303ff 	.word	0xf04303ff
   14b80:	604b0302 	.word	0x604b0302
   14b84:	f8a86888 	.word	0xf8a86888
   14b88:	f7ff2000 	.word	0xf7ff2000
   14b8c:	4653fba3 	.word	0x4653fba3
   14b90:	f859b938 	.word	0xf859b938
   14b94:	f0222007 	.word	0xf0222007
   14b98:	f04202ff 	.word	0xf04202ff
   14b9c:	f8490203 	.word	0xf8490203
   14ba0:	68222007 	.word	0x68222007
   14ba4:	2b00e7d1 	.word	0x2b00e7d1
   14ba8:	b912d1c8 	.word	0xb912d1c8
   14bac:	4293e00b 	.word	0x4293e00b
   14bb0:	eb04d009 	.word	0xeb04d009
   14bb4:	688801c3 	.word	0x688801c3
   14bb8:	28003301 	.word	0x28003301
   14bbc:	6849d0f7 	.word	0x6849d0f7
   14bc0:	2901b2c9 	.word	0x2901b2c9
   14bc4:	2002d1f3 	.word	0x2002d1f3
   14bc8:	f44f4b07 	.word	0xf44f4b07
   14bcc:	4a076180 	.word	0x4a076180
   14bd0:	6028681b 	.word	0x6028681b
   14bd4:	bf00e6ec 	.word	0xbf00e6ec
   14bd8:	200204c8 	.word	0x200204c8
   14bdc:	200204c4 	.word	0x200204c4
   14be0:	200204c0 	.word	0x200204c0
   14be4:	200204b4 	.word	0x200204b4
   14be8:	200204b8 	.word	0x200204b8
   14bec:	e000e100 	.word	0xe000e100
   14bf0:	20025e18 	.word	0x20025e18

00014bf4 <rpc_transport_msg_free>:
   14bf4:	4b18b430 	.word	0x4b18b430
   14bf8:	6825681c 	.word	0x6825681c
   14bfc:	68a3b16d 	.word	0x68a3b16d
   14c00:	d0274283 	.word	0xd0274283
   14c04:	e0022300 	.word	0xe0022300
   14c08:	42816889 	.word	0x42816889
   14c0c:	3301d019 	.word	0x3301d019
   14c10:	42ab00da 	.word	0x42ab00da
   14c14:	0102eb04 	.word	0x0102eb04
   14c18:	4b10d1f6 	.word	0x4b10d1f6
   14c1c:	6825681c 	.word	0x6825681c
   14c20:	68a3b16d 	.word	0x68a3b16d
   14c24:	d0154283 	.word	0xd0154283
   14c28:	e0022300 	.word	0xe0022300
   14c2c:	42816889 	.word	0x42816889
   14c30:	3301d007 	.word	0x3301d007
   14c34:	429d00da 	.word	0x429d00da
   14c38:	0102eb04 	.word	0x0102eb04
   14c3c:	bc30d1f6 	.word	0xbc30d1f6
   14c40:	32044770 	.word	0x32044770
   14c44:	f02358a3 	.word	0xf02358a3
   14c48:	f04303ff 	.word	0xf04303ff
   14c4c:	50a30303 	.word	0x50a30303
   14c50:	4770bc30 	.word	0x4770bc30
   14c54:	e7f52204 	.word	0xe7f52204
   14c58:	200204c4 	.word	0x200204c4
   14c5c:	200204c0 	.word	0x200204c0

00014c60 <block_cipher_df>:
   14c60:	4ff0e92d 	.word	0x4ff0e92d
   14c64:	7fc0f5b2 	.word	0x7fc0f5b2
   14c68:	7d49f5ad 	.word	0x7d49f5ad
   14c6c:	8119f200 	.word	0x8119f200
   14c70:	460c4692 	.word	0x460c4692
   14c74:	72d0f44f 	.word	0x72d0f44f
   14c78:	46812100 	.word	0x46812100
   14c7c:	f00fa860 	.word	0xf00fa860
   14c80:	a81afe4c 	.word	0xa81afe4c
   14c84:	fcd8f00a 	.word	0xfcd8f00a
   14c88:	23302000 	.word	0x23302000
   14c8c:	ea4fad66 	.word	0xea4fad66
   14c90:	f8ad221a 	.word	0xf8ad221a
   14c94:	f88d0190 	.word	0xf88d0190
   14c98:	46212192 	.word	0x46212192
   14c9c:	46284652 	.word	0x46284652
   14ca0:	3197f88d 	.word	0x3197f88d
   14ca4:	a193f88d 	.word	0xa193f88d
   14ca8:	f00fae06 	.word	0xf00fae06
   14cac:	2280fe09 	.word	0x2280fe09
   14cb0:	f8054633 	.word	0xf8054633
   14cb4:	af0e200a 	.word	0xaf0e200a
   14cb8:	f8031b99 	.word	0xf8031b99
   14cbc:	429f1b01 	.word	0x429f1b01
   14cc0:	f44fd1fa 	.word	0xf44fd1fa
   14cc4:	46317280 	.word	0x46317280
   14cc8:	f00aa81a 	.word	0xf00aa81a
   14ccc:	4683fcc1 	.word	0x4683fcc1
   14cd0:	f0402800 	.word	0xf0402800
   14cd4:	900180c8 	.word	0x900180c8
   14cd8:	0a19f10a 	.word	0x0a19f10a
   14cdc:	2210ac02 	.word	0x2210ac02
   14ce0:	46202100 	.word	0x46202100
   14ce4:	fe19f00f 	.word	0xfe19f00f
   14ce8:	ad6446d0 	.word	0xad6446d0
   14cec:	f8157822 	.word	0xf8157822
   14cf0:	f8943c10 	.word	0xf8943c10
   14cf4:	f815c001 	.word	0xf815c001
   14cf8:	78a01c0f 	.word	0x78a01c0f
   14cfc:	f8154053 	.word	0xf8154053
   14d00:	ea8c2c0e 	.word	0xea8c2c0e
   14d04:	40500c01 	.word	0x40500c01
   14d08:	f81578e1 	.word	0xf81578e1
   14d0c:	f8942c0d 	.word	0xf8942c0d
   14d10:	4051e004 	.word	0x4051e004
   14d14:	2c0cf815 	.word	0x2c0cf815
   14d18:	ea8e7023 	.word	0xea8e7023
   14d1c:	f8150202 	.word	0xf8150202
   14d20:	f8943c0b 	.word	0xf8943c0b
   14d24:	f884e005 	.word	0xf884e005
   14d28:	ea8ec001 	.word	0xea8ec001
   14d2c:	f8150303 	.word	0xf8150303
   14d30:	f894cc0a 	.word	0xf894cc0a
   14d34:	70a0e006 	.word	0x70a0e006
   14d38:	0c0cea8e 	.word	0x0c0cea8e
   14d3c:	0c09f815 	.word	0x0c09f815
   14d40:	e007f894 	.word	0xe007f894
   14d44:	ea8e70e1 	.word	0xea8e70e1
   14d48:	f8150000 	.word	0xf8150000
   14d4c:	f8941c08 	.word	0xf8941c08
   14d50:	7122e008 	.word	0x7122e008
   14d54:	0101ea8e 	.word	0x0101ea8e
   14d58:	2c07f815 	.word	0x2c07f815
   14d5c:	e009f894 	.word	0xe009f894
   14d60:	ea8e7163 	.word	0xea8e7163
   14d64:	7aa30202 	.word	0x7aa30202
   14d68:	ec06f815 	.word	0xec06f815
   14d6c:	c006f884 	.word	0xc006f884
   14d70:	030eea83 	.word	0x030eea83
   14d74:	722171e0 	.word	0x722171e0
   14d78:	72a37262 	.word	0x72a37262
   14d7c:	f8157ae1 	.word	0xf8157ae1
   14d80:	f8943c05 	.word	0xf8943c05
   14d84:	7b60c00c 	.word	0x7b60c00c
   14d88:	f815404b 	.word	0xf815404b
   14d8c:	f8152c04 	.word	0xf8152c04
   14d90:	ea8c1c03 	.word	0xea8c1c03
   14d94:	40410202 	.word	0x40410202
   14d98:	c00ef894 	.word	0xc00ef894
   14d9c:	0c02f815 	.word	0x0c02f815
   14da0:	e00ff894 	.word	0xe00ff894
   14da4:	0000ea8c 	.word	0x0000ea8c
   14da8:	cc01f815 	.word	0xcc01f815
   14dac:	ea8e72e3 	.word	0xea8e72e3
   14db0:	73220c0c 	.word	0x73220c0c
   14db4:	73a07361 	.word	0x73a07361
   14db8:	46224623 	.word	0x46224623
   14dbc:	a81a2101 	.word	0xa81a2101
   14dc0:	c00ff884 	.word	0xc00ff884
   14dc4:	fbc2f00b 	.word	0xfbc2f00b
   14dc8:	0f10f1b8 	.word	0x0f10f1b8
   14dcc:	bf944683 	.word	0xbf944683
   14dd0:	0808eba8 	.word	0x0808eba8
   14dd4:	0810f1a8 	.word	0x0810f1a8
   14dd8:	d1452800 	.word	0xd1452800
   14ddc:	f1b83510 	.word	0xf1b83510
   14de0:	d1830f00 	.word	0xd1830f00
   14de4:	22109d01 	.word	0x22109d01
   14de8:	19784621 	.word	0x19784621
   14dec:	fd68f00f 	.word	0xfd68f00f
   14df0:	3183f89d 	.word	0x3183f89d
   14df4:	0210f105 	.word	0x0210f105
   14df8:	2a303301 	.word	0x2a303301
   14dfc:	f88d9201 	.word	0xf88d9201
   14e00:	f47f3183 	.word	0xf47f3183
   14e04:	f44faf6c 	.word	0xf44faf6c
   14e08:	46397280 	.word	0x46397280
   14e0c:	f00aa81a 	.word	0xf00aa81a
   14e10:	4683fc1f 	.word	0x4683fc1f
   14e14:	464dbb40 	.word	0x464dbb40
   14e18:	0830f109 	.word	0x0830f109
   14e1c:	461aab16 	.word	0x461aab16
   14e20:	a81a2101 	.word	0xa81a2101
   14e24:	fb92f00b 	.word	0xfb92f00b
   14e28:	b9e84683 	.word	0xb9e84683
   14e2c:	46282210 	.word	0x46282210
   14e30:	4415a916 	.word	0x4415a916
   14e34:	fd44f00f 	.word	0xfd44f00f
   14e38:	d1ef4545 	.word	0xd1ef4545
   14e3c:	f00aa81a 	.word	0xf00aa81a
   14e40:	a860fc01 	.word	0xa860fc01
   14e44:	71d0f44f 	.word	0x71d0f44f
   14e48:	fc38f006 	.word	0xfc38f006
   14e4c:	21304638 	.word	0x21304638
   14e50:	fc34f006 	.word	0xfc34f006
   14e54:	21204630 	.word	0x21204630
   14e58:	fc30f006 	.word	0xfc30f006
   14e5c:	21104620 	.word	0x21104620
   14e60:	fc2cf006 	.word	0xfc2cf006
   14e64:	ac02e018 	.word	0xac02e018
   14e68:	f00aa81a 	.word	0xf00aa81a
   14e6c:	a860fbeb 	.word	0xa860fbeb
   14e70:	71d0f44f 	.word	0x71d0f44f
   14e74:	fc22f006 	.word	0xfc22f006
   14e78:	21304638 	.word	0x21304638
   14e7c:	fc1ef006 	.word	0xfc1ef006
   14e80:	21204630 	.word	0x21204630
   14e84:	fc1af006 	.word	0xfc1af006
   14e88:	21104620 	.word	0x21104620
   14e8c:	fc16f006 	.word	0xfc16f006
   14e90:	21304648 	.word	0x21304648
   14e94:	fc12f006 	.word	0xfc12f006
   14e98:	f50d4658 	.word	0xf50d4658
   14e9c:	e8bd7d49 	.word	0xe8bd7d49
   14ea0:	f06f8ff0 	.word	0xf06f8ff0
   14ea4:	e7f70b37 	.word	0xe7f70b37

00014ea8 <symbol_000078b>:
   14ea8:	72a0f44f 	.word	0x72a0f44f
   14eac:	f00f2100 	.word	0xf00f2100
   14eb0:	bf00bd34 	.word	0xbf00bd34

00014eb4 <symbol_0001c64>:
   14eb4:	b510b158 	.word	0xb510b158
   14eb8:	30204604 	.word	0x30204604
   14ebc:	fbc2f00a 	.word	0xfbc2f00a
   14ec0:	e8bd4620 	.word	0xe8bd4620
   14ec4:	f44f4010 	.word	0xf44f4010
   14ec8:	f00671a0 	.word	0xf00671a0
   14ecc:	4770bbf7 	.word	0x4770bbf7

00014ed0 <symbol_000ccf0>:
   14ed0:	6983b5f0 	.word	0x6983b5f0
   14ed4:	f5b3b0ed 	.word	0xf5b3b0ed
   14ed8:	f2007fc0 	.word	0xf2007fc0
   14edc:	f5c380e1 	.word	0xf5c380e1
   14ee0:	429373c0 	.word	0x429373c0
   14ee4:	80dcf0c0 	.word	0x80dcf0c0
   14ee8:	46154604 	.word	0x46154604
   14eec:	f44f460e 	.word	0xf44f460e
   14ef0:	210072c0 	.word	0x210072c0
   14ef4:	f00fa80c 	.word	0xf00fa80c
   14ef8:	a90cfd10 	.word	0xa90cfd10
   14efc:	3138f8d4 	.word	0x3138f8d4
   14f00:	f8d469a2 	.word	0xf8d469a2
   14f04:	4798013c 	.word	0x4798013c
   14f08:	f0402800 	.word	0xf0402800
   14f0c:	69a780cc 	.word	0x69a780cc
   14f10:	b94db106 	.word	0xb94db106
   14f14:	463aa90c 	.word	0x463aa90c
   14f18:	f7ff4608 	.word	0xf7ff4608
   14f1c:	4605fea1 	.word	0x4605fea1
   14f20:	4628b188 	.word	0x4628b188
   14f24:	bdf0b06d 	.word	0xbdf0b06d
   14f28:	462aab0c 	.word	0x462aab0c
   14f2c:	463119d8 	.word	0x463119d8
   14f30:	fcc6f00f 	.word	0xfcc6f00f
   14f34:	a90c442f 	.word	0xa90c442f
   14f38:	4608463a 	.word	0x4608463a
   14f3c:	fe90f7ff 	.word	0xfe90f7ff
   14f40:	28004605 	.word	0x28004605
   14f44:	4668d1ed 	.word	0x4668d1ed
   14f48:	46292230 	.word	0x46292230
   14f4c:	fce5f00f 	.word	0xfce5f00f
   14f50:	f104462e 	.word	0xf104462e
   14f54:	7be20720 	.word	0x7be20720
   14f58:	0306eb0d 	.word	0x0306eb0d
   14f5c:	b2d23201 	.word	0xb2d23201
   14f60:	2a0073e2 	.word	0x2a0073e2
   14f64:	7ba2d14d 	.word	0x7ba2d14d
   14f68:	b2d23201 	.word	0xb2d23201
   14f6c:	2a0073a2 	.word	0x2a0073a2
   14f70:	7b62d147 	.word	0x7b62d147
   14f74:	b2d23201 	.word	0xb2d23201
   14f78:	2a007362 	.word	0x2a007362
   14f7c:	7b22d141 	.word	0x7b22d141
   14f80:	b2d23201 	.word	0xb2d23201
   14f84:	2a007322 	.word	0x2a007322
   14f88:	7ae2d13b 	.word	0x7ae2d13b
   14f8c:	b2d23201 	.word	0xb2d23201
   14f90:	2a0072e2 	.word	0x2a0072e2
   14f94:	7aa2d135 	.word	0x7aa2d135
   14f98:	b2d23201 	.word	0xb2d23201
   14f9c:	2a0072a2 	.word	0x2a0072a2
   14fa0:	7a62d12f 	.word	0x7a62d12f
   14fa4:	b2d23201 	.word	0xb2d23201
   14fa8:	bb527262 	.word	0xbb527262
   14fac:	32017a22 	.word	0x32017a22
   14fb0:	7222b2d2 	.word	0x7222b2d2
   14fb4:	79e2bb2a 	.word	0x79e2bb2a
   14fb8:	b2d23201 	.word	0xb2d23201
   14fbc:	bb0271e2 	.word	0xbb0271e2
   14fc0:	320179a2 	.word	0x320179a2
   14fc4:	71a2b2d2 	.word	0x71a2b2d2
   14fc8:	7962b9da 	.word	0x7962b9da
   14fcc:	b2d23201 	.word	0xb2d23201
   14fd0:	b9b27162 	.word	0xb9b27162
   14fd4:	32017922 	.word	0x32017922
   14fd8:	7122b2d2 	.word	0x7122b2d2
   14fdc:	78e2b98a 	.word	0x78e2b98a
   14fe0:	b2d23201 	.word	0xb2d23201
   14fe4:	b96270e2 	.word	0xb96270e2
   14fe8:	320178a2 	.word	0x320178a2
   14fec:	70a2b2d2 	.word	0x70a2b2d2
   14ff0:	7862b93a 	.word	0x7862b93a
   14ff4:	b2d23201 	.word	0xb2d23201
   14ff8:	b9127062 	.word	0xb9127062
   14ffc:	32017822 	.word	0x32017822
   15000:	46227022 	.word	0x46227022
   15004:	46382101 	.word	0x46382101
   15008:	faa0f00b 	.word	0xfaa0f00b
   1500c:	28004605 	.word	0x28004605
   15010:	3610d187 	.word	0x3610d187
   15014:	d19e2e30 	.word	0xd19e2e30
   15018:	9b0c9901 	.word	0x9b0c9901
   1501c:	9a0d9800 	.word	0x9a0d9800
   15020:	404a4058 	.word	0x404a4058
   15024:	99029b0e 	.word	0x99029b0e
   15028:	40599000 	.word	0x40599000
   1502c:	9b0f9803 	.word	0x9b0f9803
   15030:	40439201 	.word	0x40439201
   15034:	98049a10 	.word	0x98049a10
   15038:	40509102 	.word	0x40509102
   1503c:	9a119905 	.word	0x9a119905
   15040:	40519303 	.word	0x40519303
   15044:	9a069b12 	.word	0x9a069b12
   15048:	405a9004 	.word	0x405a9004
   1504c:	9b139807 	.word	0x9b139807
   15050:	40589105 	.word	0x40589105
   15054:	9b149908 	.word	0x9b149908
   15058:	40599206 	.word	0x40599206
   1505c:	9b159a09 	.word	0x9b159a09
   15060:	405a9007 	.word	0x405a9007
   15064:	9b16980a 	.word	0x9b16980a
   15068:	40439108 	.word	0x40439108
   1506c:	2309e9cd 	.word	0x2309e9cd
   15070:	9b179a0b 	.word	0x9b179a0b
   15074:	40534638 	.word	0x40534638
   15078:	f44f4669 	.word	0xf44f4669
   1507c:	930b7280 	.word	0x930b7280
   15080:	fae6f00a 	.word	0xfae6f00a
   15084:	28004605 	.word	0x28004605
   15088:	af4bf47f 	.word	0xaf4bf47f
   1508c:	a9082210 	.word	0xa9082210
   15090:	f00f4620 	.word	0xf00f4620
   15094:	2301fc15 	.word	0x2301fc15
   15098:	61234628 	.word	0x61234628
   1509c:	bdf0b06d 	.word	0xbdf0b06d
   150a0:	0537f06f 	.word	0x0537f06f
   150a4:	f06fe73d 	.word	0xf06fe73d
   150a8:	e73a0533 	.word	0xe73a0533

000150ac <symbol_0001e1e>:
   150ac:	41f0e92d 	.word	0x41f0e92d
   150b0:	46164604 	.word	0x46164604
   150b4:	b0882220 	.word	0xb0882220
   150b8:	460f18a5 	.word	0x460f18a5
   150bc:	21004668 	.word	0x21004668
   150c0:	f00f4698 	.word	0xf00f4698
   150c4:	4628fc2a 	.word	0x4628fc2a
   150c8:	fab6f00a 	.word	0xfab6f00a
   150cc:	f2422220 	.word	0xf2422220
   150d0:	f8c47310 	.word	0xf8c47310
   150d4:	e9c47138 	.word	0xe9c47138
   150d8:	46282306 	.word	0x46282306
   150dc:	613cf8c4 	.word	0x613cf8c4
   150e0:	f44f4669 	.word	0xf44f4669
   150e4:	f00a7280 	.word	0xf00a7280
   150e8:	b920fab3 	.word	0xb920fab3
   150ec:	46204641 	.word	0x46204641
   150f0:	f7ff9a0e 	.word	0xf7ff9a0e
   150f4:	b008feed 	.word	0xb008feed
   150f8:	81f0e8bd 	.word	0x81f0e8bd

000150fc <symbol_000268c>:
   150fc:	4ff0e92d 	.word	0x4ff0e92d
   15100:	6f80f5b2 	.word	0x6f80f5b2
   15104:	f200b0f9 	.word	0xf200b0f9
   15108:	46048226 	.word	0x46048226
   1510c:	460f4615 	.word	0x460f4615
   15110:	46682230 	.word	0x46682230
   15114:	f00f2100 	.word	0xf00f2100
   15118:	6922fc00 	.word	0x6922fc00
   1511c:	429a69e3 	.word	0x429a69e3
   15120:	6963dc01 	.word	0x6963dc01
   15124:	69a3b313 	.word	0x69a3b313
   15128:	7fc0f5b3 	.word	0x7fc0f5b3
   1512c:	8216f200 	.word	0x8216f200
   15130:	0a60f10d 	.word	0x0a60f10d
   15134:	72c0f44f 	.word	0x72c0f44f
   15138:	46502100 	.word	0x46502100
   1513c:	fbedf00f 	.word	0xfbedf00f
   15140:	f8d44651 	.word	0xf8d44651
   15144:	69a23138 	.word	0x69a23138
   15148:	013cf8d4 	.word	0x013cf8d4
   1514c:	f06f4798 	.word	0xf06f4798
   15150:	b9380933 	.word	0xb9380933
   15154:	465169a2 	.word	0x465169a2
   15158:	f7ff4650 	.word	0xf7ff4650
   1515c:	4681fd81 	.word	0x4681fd81
   15160:	d0772800 	.word	0xd0772800
   15164:	b0794648 	.word	0xb0794648
   15168:	8ff0e8bd 	.word	0x8ff0e8bd
   1516c:	0820f104 	.word	0x0820f104
   15170:	f0002d00 	.word	0xf0002d00
   15174:	ae0c812b 	.word	0xae0c812b
   15178:	2d10e00e 	.word	0x2d10e00e
   1517c:	bf2846a9 	.word	0xbf2846a9
   15180:	0910f04f 	.word	0x0910f04f
   15184:	46314638 	.word	0x46314638
   15188:	f00f464a 	.word	0xf00f464a
   1518c:	ebb5fb99 	.word	0xebb5fb99
   15190:	444f0509 	.word	0x444f0509
   15194:	811af000 	.word	0x811af000
   15198:	33017be3 	.word	0x33017be3
   1519c:	73e3b2db 	.word	0x73e3b2db
   151a0:	d14d2b00 	.word	0xd14d2b00
   151a4:	33017ba3 	.word	0x33017ba3
   151a8:	73a3b2db 	.word	0x73a3b2db
   151ac:	d1472b00 	.word	0xd1472b00
   151b0:	33017b63 	.word	0x33017b63
   151b4:	7363b2db 	.word	0x7363b2db
   151b8:	d1412b00 	.word	0xd1412b00
   151bc:	33017b23 	.word	0x33017b23
   151c0:	7323b2db 	.word	0x7323b2db
   151c4:	d13b2b00 	.word	0xd13b2b00
   151c8:	33017ae3 	.word	0x33017ae3
   151cc:	72e3b2db 	.word	0x72e3b2db
   151d0:	d1352b00 	.word	0xd1352b00
   151d4:	33017aa3 	.word	0x33017aa3
   151d8:	72a3b2db 	.word	0x72a3b2db
   151dc:	d12f2b00 	.word	0xd12f2b00
   151e0:	33017a63 	.word	0x33017a63
   151e4:	7263b2db 	.word	0x7263b2db
   151e8:	7a23bb53 	.word	0x7a23bb53
   151ec:	b2db3301 	.word	0xb2db3301
   151f0:	bb2b7223 	.word	0xbb2b7223
   151f4:	330179e3 	.word	0x330179e3
   151f8:	71e3b2db 	.word	0x71e3b2db
   151fc:	79a3bb03 	.word	0x79a3bb03
   15200:	b2db3301 	.word	0xb2db3301
   15204:	b9db71a3 	.word	0xb9db71a3
   15208:	33017963 	.word	0x33017963
   1520c:	7163b2db 	.word	0x7163b2db
   15210:	7923b9b3 	.word	0x7923b9b3
   15214:	b2db3301 	.word	0xb2db3301
   15218:	b98b7123 	.word	0xb98b7123
   1521c:	330178e3 	.word	0x330178e3
   15220:	70e3b2db 	.word	0x70e3b2db
   15224:	78a3b963 	.word	0x78a3b963
   15228:	b2db3301 	.word	0xb2db3301
   1522c:	b93b70a3 	.word	0xb93b70a3
   15230:	33017863 	.word	0x33017863
   15234:	7063b2db 	.word	0x7063b2db
   15238:	7823b913 	.word	0x7823b913
   1523c:	70233301 	.word	0x70233301
   15240:	46224633 	.word	0x46224633
   15244:	46402101 	.word	0x46402101
   15248:	f980f00b 	.word	0xf980f00b
   1524c:	28004681 	.word	0x28004681
   15250:	e787d093 	.word	0xe787d093
   15254:	4630ae0c 	.word	0x4630ae0c
   15258:	46492230 	.word	0x46492230
   1525c:	fb5df00f 	.word	0xfb5df00f
   15260:	f10446cb 	.word	0xf10446cb
   15264:	7be20820 	.word	0x7be20820
   15268:	030beb06 	.word	0x030beb06
   1526c:	b2d23201 	.word	0xb2d23201
   15270:	2a0073e2 	.word	0x2a0073e2
   15274:	7ba2d14d 	.word	0x7ba2d14d
   15278:	b2d23201 	.word	0xb2d23201
   1527c:	2a0073a2 	.word	0x2a0073a2
   15280:	7b62d147 	.word	0x7b62d147
   15284:	b2d23201 	.word	0xb2d23201
   15288:	2a007362 	.word	0x2a007362
   1528c:	7b22d141 	.word	0x7b22d141
   15290:	b2d23201 	.word	0xb2d23201
   15294:	2a007322 	.word	0x2a007322
   15298:	7ae2d13b 	.word	0x7ae2d13b
   1529c:	b2d23201 	.word	0xb2d23201
   152a0:	2a0072e2 	.word	0x2a0072e2
   152a4:	7aa2d135 	.word	0x7aa2d135
   152a8:	b2d23201 	.word	0xb2d23201
   152ac:	2a0072a2 	.word	0x2a0072a2
   152b0:	7a62d12f 	.word	0x7a62d12f
   152b4:	b2d23201 	.word	0xb2d23201
   152b8:	bb527262 	.word	0xbb527262
   152bc:	32017a22 	.word	0x32017a22
   152c0:	7222b2d2 	.word	0x7222b2d2
   152c4:	79e2bb2a 	.word	0x79e2bb2a
   152c8:	b2d23201 	.word	0xb2d23201
   152cc:	bb0271e2 	.word	0xbb0271e2
   152d0:	320179a2 	.word	0x320179a2
   152d4:	71a2b2d2 	.word	0x71a2b2d2
   152d8:	7962b9da 	.word	0x7962b9da
   152dc:	b2d23201 	.word	0xb2d23201
   152e0:	b9b27162 	.word	0xb9b27162
   152e4:	32017922 	.word	0x32017922
   152e8:	7122b2d2 	.word	0x7122b2d2
   152ec:	78e2b98a 	.word	0x78e2b98a
   152f0:	b2d23201 	.word	0xb2d23201
   152f4:	b96270e2 	.word	0xb96270e2
   152f8:	320178a2 	.word	0x320178a2
   152fc:	70a2b2d2 	.word	0x70a2b2d2
   15300:	7862b93a 	.word	0x7862b93a
   15304:	b2d23201 	.word	0xb2d23201
   15308:	b9127062 	.word	0xb9127062
   1530c:	32017822 	.word	0x32017822
   15310:	46227022 	.word	0x46227022
   15314:	46402101 	.word	0x46402101
   15318:	f918f00b 	.word	0xf918f00b
   1531c:	28004681 	.word	0x28004681
   15320:	af20f47f 	.word	0xaf20f47f
   15324:	0b10f10b 	.word	0x0b10f10b
   15328:	0f30f1bb 	.word	0x0f30f1bb
   1532c:	6870d19b 	.word	0x6870d19b
   15330:	3000f8da 	.word	0x3000f8da
   15334:	f8da6831 	.word	0xf8da6831
   15338:	40592004 	.word	0x40592004
   1533c:	f8da4042 	.word	0xf8da4042
   15340:	68b03008 	.word	0x68b03008
   15344:	ea836031 	.word	0xea836031
   15348:	f8da0100 	.word	0xf8da0100
   1534c:	68f0300c 	.word	0x68f0300c
   15350:	40586072 	.word	0x40586072
   15354:	f8da6932 	.word	0xf8da6932
   15358:	60b13010 	.word	0x60b13010
   1535c:	f8da4053 	.word	0xf8da4053
   15360:	69721014 	.word	0x69721014
   15364:	404a60f0 	.word	0x404a60f0
   15368:	f8da69b0 	.word	0xf8da69b0
   1536c:	61331018 	.word	0x61331018
   15370:	f8da4048 	.word	0xf8da4048
   15374:	69f1301c 	.word	0x69f1301c
   15378:	404b6172 	.word	0x404b6172
   1537c:	f8da6a32 	.word	0xf8da6a32
   15380:	61b01020 	.word	0x61b01020
   15384:	6a704051 	.word	0x6a704051
   15388:	2024f8da 	.word	0x2024f8da
   1538c:	405061f3 	.word	0x405061f3
   15390:	3028f8da 	.word	0x3028f8da
   15394:	62316ab2 	.word	0x62316ab2
   15398:	e9c64053 	.word	0xe9c64053
   1539c:	6af20309 	.word	0x6af20309
   153a0:	302cf8da 	.word	0x302cf8da
   153a4:	40534631 	.word	0x40534631
   153a8:	f44f4640 	.word	0xf44f4640
   153ac:	62f37280 	.word	0x62f37280
   153b0:	f94ef00a 	.word	0xf94ef00a
   153b4:	28004681 	.word	0x28004681
   153b8:	aed4f47f 	.word	0xaed4f47f
   153bc:	a9142210 	.word	0xa9142210
   153c0:	f00f4620 	.word	0xf00f4620
   153c4:	2301fa7d 	.word	0x2301fa7d
   153c8:	e6d16123 	.word	0xe6d16123
   153cc:	0a60f10d 	.word	0x0a60f10d
   153d0:	22304650 	.word	0x22304650
   153d4:	f00f2100 	.word	0xf00f2100
   153d8:	2500faa0 	.word	0x2500faa0
   153dc:	eb0a7be2 	.word	0xeb0a7be2
   153e0:	32010305 	.word	0x32010305
   153e4:	73e2b2d2 	.word	0x73e2b2d2
   153e8:	d14d2a00 	.word	0xd14d2a00
   153ec:	32017ba2 	.word	0x32017ba2
   153f0:	73a2b2d2 	.word	0x73a2b2d2
   153f4:	d1472a00 	.word	0xd1472a00
   153f8:	32017b62 	.word	0x32017b62
   153fc:	7362b2d2 	.word	0x7362b2d2
   15400:	d1412a00 	.word	0xd1412a00
   15404:	32017b22 	.word	0x32017b22
   15408:	7322b2d2 	.word	0x7322b2d2
   1540c:	d13b2a00 	.word	0xd13b2a00
   15410:	32017ae2 	.word	0x32017ae2
   15414:	72e2b2d2 	.word	0x72e2b2d2
   15418:	d1352a00 	.word	0xd1352a00
   1541c:	32017aa2 	.word	0x32017aa2
   15420:	72a2b2d2 	.word	0x72a2b2d2
   15424:	d12f2a00 	.word	0xd12f2a00
   15428:	32017a62 	.word	0x32017a62
   1542c:	7262b2d2 	.word	0x7262b2d2
   15430:	7a22bb52 	.word	0x7a22bb52
   15434:	b2d23201 	.word	0xb2d23201
   15438:	bb2a7222 	.word	0xbb2a7222
   1543c:	320179e2 	.word	0x320179e2
   15440:	71e2b2d2 	.word	0x71e2b2d2
   15444:	79a2bb02 	.word	0x79a2bb02
   15448:	b2d23201 	.word	0xb2d23201
   1544c:	b9da71a2 	.word	0xb9da71a2
   15450:	32017962 	.word	0x32017962
   15454:	7162b2d2 	.word	0x7162b2d2
   15458:	7922b9b2 	.word	0x7922b9b2
   1545c:	b2d23201 	.word	0xb2d23201
   15460:	b98a7122 	.word	0xb98a7122
   15464:	320178e2 	.word	0x320178e2
   15468:	70e2b2d2 	.word	0x70e2b2d2
   1546c:	78a2b962 	.word	0x78a2b962
   15470:	b2d23201 	.word	0xb2d23201
   15474:	b93a70a2 	.word	0xb93a70a2
   15478:	32017862 	.word	0x32017862
   1547c:	7062b2d2 	.word	0x7062b2d2
   15480:	7822b912 	.word	0x7822b912
   15484:	70223201 	.word	0x70223201
   15488:	21014622 	.word	0x21014622
   1548c:	f00b4640 	.word	0xf00b4640
   15490:	4681f85d 	.word	0x4681f85d
   15494:	f47f2800 	.word	0xf47f2800
   15498:	3510ae65 	.word	0x3510ae65
   1549c:	d19d2d30 	.word	0xd19d2d30
   154a0:	1200e9da 	.word	0x1200e9da
   154a4:	98019b00 	.word	0x98019b00
   154a8:	40424059 	.word	0x40424059
   154ac:	3008f8da 	.word	0x3008f8da
   154b0:	f8ca9802 	.word	0xf8ca9802
   154b4:	ea831000 	.word	0xea831000
   154b8:	f8da0100 	.word	0xf8da0100
   154bc:	9803300c 	.word	0x9803300c
   154c0:	2004f8ca 	.word	0x2004f8ca
   154c4:	9a044058 	.word	0x9a044058
   154c8:	3010f8da 	.word	0x3010f8da
   154cc:	1008f8ca 	.word	0x1008f8ca
   154d0:	99054053 	.word	0x99054053
   154d4:	2014f8da 	.word	0x2014f8da
   154d8:	000cf8ca 	.word	0x000cf8ca
   154dc:	9806404a 	.word	0x9806404a
   154e0:	1018f8da 	.word	0x1018f8da
   154e4:	3010f8ca 	.word	0x3010f8ca
   154e8:	9b074048 	.word	0x9b074048
   154ec:	101cf8da 	.word	0x101cf8da
   154f0:	2014f8ca 	.word	0x2014f8ca
   154f4:	f8da404b 	.word	0xf8da404b
   154f8:	99082020 	.word	0x99082020
   154fc:	0018f8ca 	.word	0x0018f8ca
   15500:	f8da4051 	.word	0xf8da4051
   15504:	9a090024 	.word	0x9a090024
   15508:	301cf8ca 	.word	0x301cf8ca
   1550c:	f8da4050 	.word	0xf8da4050
   15510:	9a0a3028 	.word	0x9a0a3028
   15514:	1020f8ca 	.word	0x1020f8ca
   15518:	e9ca4053 	.word	0xe9ca4053
   1551c:	9a0b0309 	.word	0x9a0b0309
   15520:	302cf8da 	.word	0x302cf8da
   15524:	40534640 	.word	0x40534640
   15528:	f44f4651 	.word	0xf44f4651
   1552c:	f8ca7280 	.word	0xf8ca7280
   15530:	f00a302c 	.word	0xf00a302c
   15534:	4681f88d 	.word	0x4681f88d
   15538:	f47f2800 	.word	0xf47f2800
   1553c:	2210ae13 	.word	0x2210ae13
   15540:	4620a920 	.word	0x4620a920
   15544:	f9bcf00f 	.word	0xf9bcf00f
   15548:	69234648 	.word	0x69234648
   1554c:	61233301 	.word	0x61233301
   15550:	e8bdb079 	.word	0xe8bdb079
   15554:	f06f8ff0 	.word	0xf06f8ff0
   15558:	e6030935 	.word	0xe6030935
   1555c:	0937f06f 	.word	0x0937f06f
   15560:	bf00e600 	.word	0xbf00e600

00015564 <packet_handler_create>:
   15564:	b5382801 	.word	0xb5382801
   15568:	4614460d 	.word	0x4614460d
   1556c:	db11d00d 	.word	0xdb11d00d
   15570:	dc0f2803 	.word	0xdc0f2803
   15574:	f00a2010 	.word	0xf00a2010
   15578:	2218f81f 	.word	0x2218f81f
   1557c:	4b08b120 	.word	0x4b08b120
   15580:	44136045 	.word	0x44136045
   15584:	60036084 	.word	0x60036084
   15588:	2014bd38 	.word	0x2014bd38
   1558c:	f814f00a 	.word	0xf814f00a
   15590:	e7f32230 	.word	0xe7f32230
   15594:	f00a200c 	.word	0xf00a200c
   15598:	2200f80f 	.word	0x2200f80f
   1559c:	bf00e7ee 	.word	0xbf00e7ee
   155a0:	000269ac 	.word	0x000269ac

000155a4 <packet_handler_delete>:
   155a4:	4604b510 	.word	0x4604b510
   155a8:	691b6803 	.word	0x691b6803
   155ac:	68234798 	.word	0x68234798
   155b0:	695b4620 	.word	0x695b4620
   155b4:	46204798 	.word	0x46204798
   155b8:	4010e8bd 	.word	0x4010e8bd
   155bc:	b81af00a 	.word	0xb81af00a

000155c0 <symbol_0002469>:
   155c0:	460db570 	.word	0x460db570
   155c4:	f0014604 	.word	0xf0014604
   155c8:	2d03fc23 	.word	0x2d03fc23
   155cc:	d1257025 	.word	0xd1257025
   155d0:	25012308 	.word	0x25012308
   155d4:	49154a14 	.word	0x49154a14
   155d8:	622360a3 	.word	0x622360a3
   155dc:	62e36523 	.word	0x62e36523
   155e0:	60e263a3 	.word	0x60e263a3
   155e4:	4a134b12 	.word	0x4a134b12
   155e8:	48144e13 	.word	0x48144e13
   155ec:	65606321 	.word	0x65606321
   155f0:	64a363e2 	.word	0x64a363e2
   155f4:	61e56065 	.word	0x61e56065
   155f8:	62a564e5 	.word	0x62a564e5
   155fc:	e9c46365 	.word	0xe9c46365
   15600:	62665510 	.word	0x62665510
   15604:	f0061d20 	.word	0xf0061d20
   15608:	65a0fde7 	.word	0x65a0fde7
   1560c:	004cf104 	.word	0x004cf104
   15610:	fde2f006 	.word	0xfde2f006
   15614:	0517e9c4 	.word	0x0517e9c4
   15618:	bd702000 	.word	0xbd702000
   1561c:	f0014620 	.word	0xf0014620
   15620:	4807fbf7 	.word	0x4807fbf7
   15624:	bf00bd70 	.word	0xbf00bd70
   15628:	00026a74 	.word	0x00026a74
   1562c:	00026a14 	.word	0x00026a14
   15630:	2002d3f4 	.word	0x2002d3f4
   15634:	00026a34 	.word	0x00026a34
   15638:	000269f4 	.word	0x000269f4
   1563c:	00026a54 	.word	0x00026a54
   15640:	ffffb180 	.word	0xffffb180

00015644 <secure_client_socket>:
   15644:	41f0e92d 	.word	0x41f0e92d
   15648:	680b460c 	.word	0x680b460c
   1564c:	f4236989 	.word	0xf4236989
   15650:	60233300 	.word	0x60233300
   15654:	23006822 	.word	0x23006822
   15658:	1280f422 	.word	0x1280f422
   1565c:	f2476022 	.word	0xf2476022
   15660:	68270281 	.word	0x68270281
   15664:	f0024606 	.word	0xf0024606
   15668:	2800fedb 	.word	0x2800fedb
   1566c:	4605d03b 	.word	0x4605d03b
   15670:	eb064b28 	.word	0xeb064b28
   15674:	eb0301c6 	.word	0xeb0301c6
   15678:	22240181 	.word	0x22240181
   1567c:	f00f3014 	.word	0xf00f3014
   15680:	68abf91f 	.word	0x68abf91f
   15684:	8090f8df 	.word	0x8090f8df
   15688:	60ab3324 	.word	0x60ab3324
   1568c:	46296823 	.word	0x46296823
   15690:	0308ea03 	.word	0x0308ea03
   15694:	030af043 	.word	0x030af043
   15698:	f2476023 	.word	0xf2476023
   1569c:	463b0281 	.word	0x463b0281
   156a0:	f0024620 	.word	0xf0024620
   156a4:	b960fedd 	.word	0xb960fedd
   156a8:	00db6823 	.word	0x00db6823
   156ac:	f04fd40b 	.word	0xf04fd40b
   156b0:	f64f33ff 	.word	0xf64f33ff
   156b4:	210b72ff 	.word	0x210b72ff
   156b8:	f0024630 	.word	0xf0024630
   156bc:	b128fee5 	.word	0xb128fee5
   156c0:	e8bd6027 	.word	0xe8bd6027
   156c4:	207381f0 	.word	0x207381f0
   156c8:	81f0e8bd 	.word	0x81f0e8bd
   156cc:	6280f04f 	.word	0x6280f04f
   156d0:	46114630 	.word	0x46114630
   156d4:	33fff04f 	.word	0x33fff04f
   156d8:	fed6f002 	.word	0xfed6f002
   156dc:	2873b130 	.word	0x2873b130
   156e0:	6027d0ef 	.word	0x6027d0ef
   156e4:	200ce7ed 	.word	0x200ce7ed
   156e8:	81f0e8bd 	.word	0x81f0e8bd
   156ec:	f0236823 	.word	0xf0236823
   156f0:	60236380 	.word	0x60236380
   156f4:	ea036823 	.word	0xea036823
   156f8:	f0480808 	.word	0xf0480808
   156fc:	6023030c 	.word	0x6023030c
   15700:	f4436823 	.word	0xf4436823
   15704:	60233300 	.word	0x60233300
   15708:	f4436823 	.word	0xf4436823
   1570c:	60231380 	.word	0x60231380
   15710:	81f0e8bd 	.word	0x81f0e8bd
   15714:	200204cc 	.word	0x200204cc
   15718:	ffff0000 	.word	0xffff0000

0001571c <tls_interface_init>:
   1571c:	47702000 	.word	0x47702000

00015720 <tls_interface_open>:
   15720:	f020b538 	.word	0xf020b538
   15724:	2b020308 	.word	0x2b020308
   15728:	202fd006 	.word	0x202fd006
   1572c:	fd00f7fc 	.word	0xfd00f7fc
   15730:	35fff04f 	.word	0x35fff04f
   15734:	bd384628 	.word	0xbd384628
   15738:	1e4a4614 	.word	0x1e4a4614
   1573c:	d8282a01 	.word	0xd8282a01
   15740:	2901bb14 	.word	0x2901bb14
   15744:	2301bf06 	.word	0x2301bf06
   15748:	7482f44f 	.word	0x7482f44f
   1574c:	7487f44f 	.word	0x7487f44f
   15750:	f002461a 	.word	0xf002461a
   15754:	1e05fec5 	.word	0x1e05fec5
   15758:	4b15db26 	.word	0x4b15db26
   1575c:	00c5eb05 	.word	0x00c5eb05
   15760:	0080eb03 	.word	0x0080eb03
   15764:	49132224 	.word	0x49132224
   15768:	f8aaf00f 	.word	0xf8aaf00f
   1576c:	f0024628 	.word	0xf0024628
   15770:	6803fd0d 	.word	0x6803fd0d
   15774:	f4236144 	.word	0xf4236144
   15778:	60031380 	.word	0x60031380
   1577c:	f4236803 	.word	0xf4236803
   15780:	60033300 	.word	0x60033300
   15784:	bd384628 	.word	0xbd384628
   15788:	d0082901 	.word	0xd0082901
   1578c:	7f87f5b4 	.word	0x7f87f5b4
   15790:	2016d0de 	.word	0x2016d0de
   15794:	fcccf7fc 	.word	0xfcccf7fc
   15798:	35fff04f 	.word	0x35fff04f
   1579c:	f5b4e7ca 	.word	0xf5b4e7ca
   157a0:	d1f67f82 	.word	0xd1f67f82
   157a4:	e7d3460b 	.word	0xe7d3460b
   157a8:	35fff04f 	.word	0x35fff04f
   157ac:	bf00e7c2 	.word	0xbf00e7c2
   157b0:	200204cc 	.word	0x200204cc
   157b4:	00026a94 	.word	0x00026a94

000157b8 <tls_interface_close>:
   157b8:	4604b510 	.word	0x4604b510
   157bc:	fce6f002 	.word	0xfce6f002
   157c0:	4620b120 	.word	0x4620b120
   157c4:	4010e8bd 	.word	0x4010e8bd
   157c8:	bf36f002 	.word	0xbf36f002
   157cc:	f7fc2009 	.word	0xf7fc2009
   157d0:	f04ffcaf 	.word	0xf04ffcaf
   157d4:	bd1030ff 	.word	0xbd1030ff

000157d8 <tls_interface_sendto>:
   157d8:	47f0e92d 	.word	0x47f0e92d
   157dc:	e9dd460d 	.word	0xe9dd460d
   157e0:	46168908 	.word	0x46168908
   157e4:	4604461f 	.word	0x4604461f
   157e8:	fcd0f002 	.word	0xfcd0f002
   157ec:	d03b2800 	.word	0xd03b2800
   157f0:	b29b6803 	.word	0xb29b6803
   157f4:	d0392b0c 	.word	0xd0392b0c
   157f8:	b29b6803 	.word	0xb29b6803
   157fc:	d1112b0b 	.word	0xd1112b0b
   15800:	eb044b20 	.word	0xeb044b20
   15804:	f81304c4 	.word	0xf81304c4
   15808:	2b023024 	.word	0x2b023024
   1580c:	6903d038 	.word	0x6903d038
   15810:	bf142b01 	.word	0xbf142b01
   15814:	202a2039 	.word	0x202a2039
   15818:	fc8af7fc 	.word	0xfc8af7fc
   1581c:	30fff04f 	.word	0x30fff04f
   15820:	87f0e8bd 	.word	0x87f0e8bd
   15824:	2b016903 	.word	0x2b016903
   15828:	2b02d00b 	.word	0x2b02d00b
   1582c:	2039d001 	.word	0x2039d001
   15830:	6803e7f2 	.word	0x6803e7f2
   15834:	2b02b29b 	.word	0x2b02b29b
   15838:	6803d007 	.word	0x6803d007
   1583c:	2b04b29b 	.word	0x2b04b29b
   15840:	6803d003 	.word	0x6803d003
   15844:	2b05b29b 	.word	0x2b05b29b
   15848:	4b0ed1f1 	.word	0x4b0ed1f1
   1584c:	02c4eb04 	.word	0x02c4eb04
   15850:	3022f813 	.word	0x3022f813
   15854:	d1ea2b02 	.word	0xd1ea2b02
   15858:	46204601 	.word	0x46204601
   1585c:	fef2f7ff 	.word	0xfef2f7ff
   15860:	d0032800 	.word	0xd0032800
   15864:	e7d9dcd8 	.word	0xe7d9dcd8
   15868:	e7d52009 	.word	0xe7d52009
   1586c:	8908e9cd 	.word	0x8908e9cd
   15870:	4632463b 	.word	0x4632463b
   15874:	46204629 	.word	0x46204629
   15878:	47f0e8bd 	.word	0x47f0e8bd
   1587c:	bf4cf002 	.word	0xbf4cf002
   15880:	e7c92023 	.word	0xe7c92023
   15884:	200204cc 	.word	0x200204cc

00015888 <tls_interface_recvfrom>:
   15888:	47f0e92d 	.word	0x47f0e92d
   1588c:	e9dd460d 	.word	0xe9dd460d
   15890:	46168908 	.word	0x46168908
   15894:	4604461f 	.word	0x4604461f
   15898:	fc78f002 	.word	0xfc78f002
   1589c:	d0382800 	.word	0xd0382800
   158a0:	b29b6803 	.word	0xb29b6803
   158a4:	d00f2b0c 	.word	0xd00f2b0c
   158a8:	b29b6803 	.word	0xb29b6803
   158ac:	d00b2b0d 	.word	0xd00b2b0d
   158b0:	2b016903 	.word	0x2b016903
   158b4:	2b02d01a 	.word	0x2b02d01a
   158b8:	2023d010 	.word	0x2023d010
   158bc:	fc38f7fc 	.word	0xfc38f7fc
   158c0:	30fff04f 	.word	0x30fff04f
   158c4:	87f0e8bd 	.word	0x87f0e8bd
   158c8:	8908e9cd 	.word	0x8908e9cd
   158cc:	4632463b 	.word	0x4632463b
   158d0:	46204629 	.word	0x46204629
   158d4:	47f0e8bd 	.word	0x47f0e8bd
   158d8:	b858f003 	.word	0xb858f003
   158dc:	b29b6803 	.word	0xb29b6803
   158e0:	d0072b02 	.word	0xd0072b02
   158e4:	b29b6803 	.word	0xb29b6803
   158e8:	d0032b04 	.word	0xd0032b04
   158ec:	b29b6803 	.word	0xb29b6803
   158f0:	d1e22b05 	.word	0xd1e22b05
   158f4:	eb044b08 	.word	0xeb044b08
   158f8:	f81302c4 	.word	0xf81302c4
   158fc:	2b023022 	.word	0x2b023022
   15900:	4601d1db 	.word	0x4601d1db
   15904:	f7ff4620 	.word	0xf7ff4620
   15908:	2800fe9d 	.word	0x2800fe9d
   1590c:	dcd5d0dc 	.word	0xdcd5d0dc
   15910:	2009e7d6 	.word	0x2009e7d6
   15914:	bf00e7d2 	.word	0xbf00e7d2
   15918:	200204cc 	.word	0x200204cc

0001591c <tls_interface_bind>:
   1591c:	43f8e92d 	.word	0x43f8e92d
   15920:	4617460c 	.word	0x4617460c
   15924:	f0024606 	.word	0xf0024606
   15928:	2800fc31 	.word	0x2800fc31
   1592c:	6803d04c 	.word	0x6803d04c
   15930:	b29b4605 	.word	0xb29b4605
   15934:	d1502b02 	.word	0xd1502b02
   15938:	463a4621 	.word	0x463a4621
   1593c:	f0034630 	.word	0xf0034630
   15940:	4604f9fb 	.word	0x4604f9fb
   15944:	2c00b120 	.word	0x2c00b120
   15948:	4620dc3f 	.word	0x4620dc3f
   1594c:	83f8e8bd 	.word	0x83f8e8bd
   15950:	07c6eb06 	.word	0x07c6eb06
   15954:	8094f8df 	.word	0x8094f8df
   15958:	f81800bf 	.word	0xf81800bf
   1595c:	2b013007 	.word	0x2b013007
   15960:	4603d1f3 	.word	0x4603d1f3
   15964:	0281f247 	.word	0x0281f247
   15968:	463069a9 	.word	0x463069a9
   1596c:	fd58f002 	.word	0xfd58f002
   15970:	b3b04681 	.word	0xb3b04681
   15974:	0107eb08 	.word	0x0107eb08
   15978:	30142224 	.word	0x30142224
   1597c:	ffa0f00e 	.word	0xffa0f00e
   15980:	3008f8d9 	.word	0x3008f8d9
   15984:	33244649 	.word	0x33244649
   15988:	3008f8c9 	.word	0x3008f8c9
   1598c:	2304682a 	.word	0x2304682a
   15990:	04120c12 	.word	0x04120c12
   15994:	020af042 	.word	0x020af042
   15998:	4628602a 	.word	0x4628602a
   1599c:	0281f247 	.word	0x0281f247
   159a0:	fd5ef002 	.word	0xfd5ef002
   159a4:	682bb9f8 	.word	0x682bb9f8
   159a8:	d41800db 	.word	0xd41800db
   159ac:	f04f4630 	.word	0xf04f4630
   159b0:	f64f33ff 	.word	0xf64f33ff
   159b4:	210b72ff 	.word	0x210b72ff
   159b8:	fd66f002 	.word	0xfd66f002
   159bc:	d0c42800 	.word	0xd0c42800
   159c0:	46042304 	.word	0x46042304
   159c4:	e7be602b 	.word	0xe7be602b
   159c8:	46202409 	.word	0x46202409
   159cc:	34fff04f 	.word	0x34fff04f
   159d0:	fbaef7fc 	.word	0xfbaef7fc
   159d4:	e8bd4620 	.word	0xe8bd4620
   159d8:	242d83f8 	.word	0x242d83f8
   159dc:	2473e7f5 	.word	0x2473e7f5
   159e0:	240ce7f3 	.word	0x240ce7f3
   159e4:	4604e7f1 	.word	0x4604e7f1
   159e8:	bf00e7ad 	.word	0xbf00e7ad
   159ec:	200204cc 	.word	0x200204cc

000159f0 <tls_interface_connect>:
   159f0:	460eb5f8 	.word	0x460eb5f8
   159f4:	46044617 	.word	0x46044617
   159f8:	fbc8f002 	.word	0xfbc8f002
   159fc:	4b13b1e8 	.word	0x4b13b1e8
   15a00:	02c4eb04 	.word	0x02c4eb04
   15a04:	3022f813 	.word	0x3022f813
   15a08:	d11c2b02 	.word	0xd11c2b02
   15a0c:	46056803 	.word	0x46056803
   15a10:	2b02b29b 	.word	0x2b02b29b
   15a14:	6803d003 	.word	0x6803d003
   15a18:	2b04b29b 	.word	0x2b04b29b
   15a1c:	463ad113 	.word	0x463ad113
   15a20:	46204631 	.word	0x46204631
   15a24:	f8def003 	.word	0xf8def003
   15a28:	2800b110 	.word	0x2800b110
   15a2c:	bdf8dc06 	.word	0xbdf8dc06
   15a30:	46204629 	.word	0x46204629
   15a34:	fe06f7ff 	.word	0xfe06f7ff
   15a38:	2009e7f7 	.word	0x2009e7f7
   15a3c:	fb78f7fc 	.word	0xfb78f7fc
   15a40:	30fff04f 	.word	0x30fff04f
   15a44:	202dbdf8 	.word	0x202dbdf8
   15a48:	bf00e7f8 	.word	0xbf00e7f8
   15a4c:	200204cc 	.word	0x200204cc

00015a50 <tls_interface_listen>:
   15a50:	47f0e92d 	.word	0x47f0e92d
   15a54:	4606460f 	.word	0x4606460f
   15a58:	fb98f002 	.word	0xfb98f002
   15a5c:	d06b2800 	.word	0xd06b2800
   15a60:	46046903 	.word	0x46046903
   15a64:	d1652b01 	.word	0xd1652b01
   15a68:	b29b6803 	.word	0xb29b6803
   15a6c:	d0562b04 	.word	0xd0562b04
   15a70:	b29b6823 	.word	0xb29b6823
   15a74:	d15d2b0b 	.word	0xd15d2b0b
   15a78:	f8df00f3 	.word	0xf8df00f3
   15a7c:	199a90c0 	.word	0x199a90c0
   15a80:	2022f819 	.word	0x2022f819
   15a84:	d1552a01 	.word	0xd1552a01
   15a88:	44332201 	.word	0x44332201
   15a8c:	f809009d 	.word	0xf809009d
   15a90:	69a12005 	.word	0x69a12005
   15a94:	f2472300 	.word	0xf2472300
   15a98:	46300281 	.word	0x46300281
   15a9c:	8000f8d4 	.word	0x8000f8d4
   15aa0:	fcbef002 	.word	0xfcbef002
   15aa4:	28004682 	.word	0x28004682
   15aa8:	eb09d042 	.word	0xeb09d042
   15aac:	22240105 	.word	0x22240105
   15ab0:	f00e3014 	.word	0xf00e3014
   15ab4:	f8daff05 	.word	0xf8daff05
   15ab8:	46513008 	.word	0x46513008
   15abc:	f8ca3324 	.word	0xf8ca3324
   15ac0:	68223008 	.word	0x68223008
   15ac4:	0c124643 	.word	0x0c124643
   15ac8:	f0420412 	.word	0xf0420412
   15acc:	6022020a 	.word	0x6022020a
   15ad0:	f2474620 	.word	0xf2474620
   15ad4:	f0020281 	.word	0xf0020281
   15ad8:	b9e0fcc3 	.word	0xb9e0fcc3
   15adc:	00db6823 	.word	0x00db6823
   15ae0:	f04fd40e 	.word	0xf04fd40e
   15ae4:	f64f33ff 	.word	0xf64f33ff
   15ae8:	210b72ff 	.word	0x210b72ff
   15aec:	f0024630 	.word	0xf0024630
   15af0:	b160fccb 	.word	0xb160fccb
   15af4:	f8c42800 	.word	0xf8c42800
   15af8:	dc028000 	.word	0xdc028000
   15afc:	87f0e8bd 	.word	0x87f0e8bd
   15b00:	f7fc2073 	.word	0xf7fc2073
   15b04:	f04ffb15 	.word	0xf04ffb15
   15b08:	e8bd30ff 	.word	0xe8bd30ff
   15b0c:	463987f0 	.word	0x463987f0
   15b10:	f0034630 	.word	0xf0034630
   15b14:	2800f9a7 	.word	0x2800f9a7
   15b18:	e8bddcf3 	.word	0xe8bddcf3
   15b1c:	00f387f0 	.word	0x00f387f0
   15b20:	9018f8df 	.word	0x9018f8df
   15b24:	f819199a 	.word	0xf819199a
   15b28:	2a022022 	.word	0x2a022022
   15b2c:	e7abd1a0 	.word	0xe7abd1a0
   15b30:	e7e6200c 	.word	0xe7e6200c
   15b34:	e7e4202d 	.word	0xe7e4202d
   15b38:	e7e22009 	.word	0xe7e22009
   15b3c:	200204cc 	.word	0x200204cc

00015b40 <tls_interface_accept>:
   15b40:	460cb5f8 	.word	0x460cb5f8
   15b44:	461f4616 	.word	0x461f4616
   15b48:	f0024605 	.word	0xf0024605
   15b4c:	2800fb1f 	.word	0x2800fb1f
   15b50:	6800d03b 	.word	0x6800d03b
   15b54:	2806b280 	.word	0x2806b280
   15b58:	4621d137 	.word	0x4621d137
   15b5c:	4632463b 	.word	0x4632463b
   15b60:	f0034628 	.word	0xf0034628
   15b64:	4604f9f5 	.word	0x4604f9f5
   15b68:	2c00b118 	.word	0x2c00b118
   15b6c:	4620dc2e 	.word	0x4620dc2e
   15b70:	4628bdf8 	.word	0x4628bdf8
   15b74:	fb0af002 	.word	0xfb0af002
   15b78:	4f186803 	.word	0x4f186803
   15b7c:	3300f423 	.word	0x3300f423
   15b80:	68036003 	.word	0x68036003
   15b84:	05c5eb05 	.word	0x05c5eb05
   15b88:	1380f423 	.word	0x1380f423
   15b8c:	60034606 	.word	0x60034606
   15b90:	0185eb07 	.word	0x0185eb07
   15b94:	46382224 	.word	0x46382224
   15b98:	fe92f00e 	.word	0xfe92f00e
   15b9c:	703b2302 	.word	0x703b2302
   15ba0:	46206833 	.word	0x46206833
   15ba4:	041b0c1b 	.word	0x041b0c1b
   15ba8:	030bf043 	.word	0x030bf043
   15bac:	f64f6033 	.word	0xf64f6033
   15bb0:	f04f72ff 	.word	0xf04f72ff
   15bb4:	210c33ff 	.word	0x210c33ff
   15bb8:	fc66f002 	.word	0xfc66f002
   15bbc:	28004604 	.word	0x28004604
   15bc0:	2000d0d5 	.word	0x2000d0d5
   15bc4:	fd38f002 	.word	0xfd38f002
   15bc8:	2409e7cf 	.word	0x2409e7cf
   15bcc:	f04f4620 	.word	0xf04f4620
   15bd0:	f7fc34ff 	.word	0xf7fc34ff
   15bd4:	4620faad 	.word	0x4620faad
   15bd8:	bf00bdf8 	.word	0xbf00bdf8
   15bdc:	200204cc 	.word	0x200204cc

00015be0 <tls_interface_setopt>:
   15be0:	41f0e92d 	.word	0x41f0e92d
   15be4:	7f8df5b1 	.word	0x7f8df5b1
   15be8:	d11d9f06 	.word	0xd11d9f06
   15bec:	b1c3461c 	.word	0xb1c3461c
   15bf0:	4605b1bf 	.word	0x4605b1bf
   15bf4:	f0024616 	.word	0xf0024616
   15bf8:	b1c8fac9 	.word	0xb1c8fac9
   15bfc:	b29b6803 	.word	0xb29b6803
   15c00:	d0072b02 	.word	0xd0072b02
   15c04:	b29b6803 	.word	0xb29b6803
   15c08:	d0032b04 	.word	0xd0032b04
   15c0c:	b29b6803 	.word	0xb29b6803
   15c10:	d10d2b05 	.word	0xd10d2b05
   15c14:	2e033e01 	.word	0x2e033e01
   15c18:	e8dfd851 	.word	0xe8dfd851
   15c1c:	3225f006 	.word	0x3225f006
   15c20:	200e0b18 	.word	0x200e0b18
   15c24:	81f0e8bd 	.word	0x81f0e8bd
   15c28:	41f0e8bd 	.word	0x41f0e8bd
   15c2c:	bac8f003 	.word	0xbac8f003
   15c30:	e7f72009 	.word	0xe7f72009
   15c34:	d1392f04 	.word	0xd1392f04
   15c38:	2b026823 	.word	0x2b026823
   15c3c:	4a21d836 	.word	0x4a21d836
   15c40:	05c5eb05 	.word	0x05c5eb05
   15c44:	0585eb02 	.word	0x0585eb02
   15c48:	200070ab 	.word	0x200070ab
   15c4c:	2f01e7ea 	.word	0x2f01e7ea
   15c50:	7823d12c 	.word	0x7823d12c
   15c54:	d8292b01 	.word	0xd8292b01
   15c58:	eb054a1a 	.word	0xeb054a1a
   15c5c:	eb0205c5 	.word	0xeb0205c5
   15c60:	70530285 	.word	0x70530285
   15c64:	e7dd2000 	.word	0xe7dd2000
   15c68:	d11f2f04 	.word	0xd11f2f04
   15c6c:	b1f86820 	.word	0xb1f86820
   15c70:	d11b2801 	.word	0xd11b2801
   15c74:	eb054b13 	.word	0xeb054b13
   15c78:	f80305c5 	.word	0xf80305c5
   15c7c:	20000025 	.word	0x20000025
   15c80:	ea5fe7d0 	.word	0xea5fe7d0
   15c84:	d0110c97 	.word	0xd0110c97
   15c88:	0603f017 	.word	0x0603f017
   15c8c:	eb05d10e 	.word	0xeb05d10e
   15c90:	00ad05c5 	.word	0x00ad05c5
   15c94:	1d284b0b 	.word	0x1d284b0b
   15c98:	442b4418 	.word	0x442b4418
   15c9c:	4621463a 	.word	0x4621463a
   15ca0:	c003f883 	.word	0xc003f883
   15ca4:	fe0cf00e 	.word	0xfe0cf00e
   15ca8:	e7bb4630 	.word	0xe7bb4630
   15cac:	e7b92016 	.word	0xe7b92016
   15cb0:	4b042202 	.word	0x4b042202
   15cb4:	05c5eb05 	.word	0x05c5eb05
   15cb8:	2025f803 	.word	0x2025f803
   15cbc:	202ae7b2 	.word	0x202ae7b2
   15cc0:	bf00e7b0 	.word	0xbf00e7b0
   15cc4:	200204cc 	.word	0x200204cc

00015cc8 <tls_interface_getopt>:
   15cc8:	41f0e92d 	.word	0x41f0e92d
   15ccc:	7f8df5b1 	.word	0x7f8df5b1
   15cd0:	d1129f06 	.word	0xd1129f06
   15cd4:	b16b461d 	.word	0xb16b461d
   15cd8:	4606b167 	.word	0x4606b167
   15cdc:	f0024614 	.word	0xf0024614
   15ce0:	2800fa55 	.word	0x2800fa55
   15ce4:	3c01d04f 	.word	0x3c01d04f
   15ce8:	d8522c03 	.word	0xd8522c03
   15cec:	f004e8df 	.word	0xf004e8df
   15cf0:	09152139 	.word	0x09152139
   15cf4:	e8bd200e 	.word	0xe8bd200e
   15cf8:	e8bd81f0 	.word	0xe8bd81f0
   15cfc:	f00341f0 	.word	0xf00341f0
   15d00:	683bbb1b 	.word	0x683bbb1b
   15d04:	d13c2b04 	.word	0xd13c2b04
   15d08:	eb064b23 	.word	0xeb064b23
   15d0c:	eb0306c6 	.word	0xeb0306c6
   15d10:	78b30686 	.word	0x78b30686
   15d14:	602b2000 	.word	0x602b2000
   15d18:	683be7ed 	.word	0x683be7ed
   15d1c:	d1302b04 	.word	0xd1302b04
   15d20:	eb064b1d 	.word	0xeb064b1d
   15d24:	eb0306c6 	.word	0xeb0306c6
   15d28:	78730686 	.word	0x78730686
   15d2c:	602b2000 	.word	0x602b2000
   15d30:	eb06e7e1 	.word	0xeb06e7e1
   15d34:	491806c6 	.word	0x491806c6
   15d38:	00b6683b 	.word	0x00b6683b
   15d3c:	f013198a 	.word	0xf013198a
   15d40:	78d00403 	.word	0x78d00403
   15d44:	089bd121 	.word	0x089bd121
   15d48:	bf284283 	.word	0xbf284283
   15d4c:	009a4603 	.word	0x009a4603
   15d50:	3604b1db 	.word	0x3604b1db
   15d54:	603a4431 	.word	0x603a4431
   15d58:	f00e4628 	.word	0xf00e4628
   15d5c:	4620fdb1 	.word	0x4620fdb1
   15d60:	683be7c9 	.word	0x683be7c9
   15d64:	d10c2b04 	.word	0xd10c2b04
   15d68:	eb064b0b 	.word	0xeb064b0b
   15d6c:	f81306c6 	.word	0xf81306c6
   15d70:	20003026 	.word	0x20003026
   15d74:	0301f1a3 	.word	0x0301f1a3
   15d78:	f383fab3 	.word	0xf383fab3
   15d7c:	602b095b 	.word	0x602b095b
   15d80:	2016e7b9 	.word	0x2016e7b9
   15d84:	2009e7b7 	.word	0x2009e7b7
   15d88:	2800e7b5 	.word	0x2800e7b5
   15d8c:	6038d1f9 	.word	0x6038d1f9
   15d90:	202ae7b1 	.word	0x202ae7b1
   15d94:	bf00e7af 	.word	0xbf00e7af
   15d98:	200204cc 	.word	0x200204cc

00015d9c <tls_rpc_ip_event_handler>:
   15d9c:	f248b538 	.word	0xf248b538
   15da0:	42ab0581 	.word	0x42ab0581
   15da4:	d053460c 	.word	0xd053460c
   15da8:	0182f249 	.word	0x0182f249
   15dac:	d02d428b 	.word	0xd02d428b
   15db0:	0102f248 	.word	0x0102f248
   15db4:	d001428b 	.word	0xd001428b
   15db8:	bd382001 	.word	0xbd382001
   15dbc:	d0fb2c00 	.word	0xd0fb2c00
   15dc0:	f5b36963 	.word	0xf5b36963
   15dc4:	d0027f82 	.word	0xd0027f82
   15dc8:	7f87f5b3 	.word	0x7f87f5b3
   15dcc:	6823d1f4 	.word	0x6823d1f4
   15dd0:	5300f023 	.word	0x5300f023
   15dd4:	69556023 	.word	0x69556023
   15dd8:	d1482d00 	.word	0xd1482d00
   15ddc:	0c1b6823 	.word	0x0c1b6823
   15de0:	f043041b 	.word	0xf043041b
   15de4:	60230305 	.word	0x60230305
   15de8:	00da6823 	.word	0x00da6823
   15dec:	4b25d50c 	.word	0x4b25d50c
   15df0:	02c0eb00 	.word	0x02c0eb00
   15df4:	3022f813 	.word	0x3022f813
   15df8:	d1052b02 	.word	0xd1052b02
   15dfc:	f7ff4621 	.word	0xf7ff4621
   15e00:	b108fc21 	.word	0xb108fc21
   15e04:	d1352873 	.word	0xd1352873
   15e08:	bd382000 	.word	0xbd382000
   15e0c:	d0fb2c00 	.word	0xd0fb2c00
   15e10:	b29b6823 	.word	0xb29b6823
   15e14:	d1f72b0b 	.word	0xd1f72b0b
   15e18:	bb486910 	.word	0xbb486910
   15e1c:	f0436823 	.word	0xf0436823
   15e20:	60236380 	.word	0x60236380
   15e24:	00db6823 	.word	0x00db6823
   15e28:	6823d5ee 	.word	0x6823d5ee
   15e2c:	6380f023 	.word	0x6380f023
   15e30:	68236023 	.word	0x68236023
   15e34:	041b0c1b 	.word	0x041b0c1b
   15e38:	030cf043 	.word	0x030cf043
   15e3c:	68236023 	.word	0x68236023
   15e40:	3300f443 	.word	0x3300f443
   15e44:	68236023 	.word	0x68236023
   15e48:	1380f443 	.word	0x1380f443
   15e4c:	bd386023 	.word	0xbd386023
   15e50:	d0d92900 	.word	0xd0d92900
   15e54:	b29b680b 	.word	0xb29b680b
   15e58:	d1d52b0a 	.word	0xd1d52b0a
   15e5c:	b9386950 	.word	0xb9386950
   15e60:	0c1b680b 	.word	0x0c1b680b
   15e64:	f043041b 	.word	0xf043041b
   15e68:	600b030b 	.word	0x600b030b
   15e6c:	4628bd38 	.word	0x4628bd38
   15e70:	faccf002 	.word	0xfaccf002
   15e74:	68236060 	.word	0x68236060
   15e78:	f4432000 	.word	0xf4432000
   15e7c:	60232380 	.word	0x60232380
   15e80:	bf00bd38 	.word	0xbf00bd38
   15e84:	200204cc 	.word	0x200204cc

00015e88 <rpc_gnss_serialize_utc>:
   15e88:	b1d84603 	.word	0xb1d84603
   15e8c:	2000b1d1 	.word	0x2000b1d1
   15e90:	70482201 	.word	0x70482201
   15e94:	685a700a 	.word	0x685a700a
   15e98:	f8c12010 	.word	0xf8c12010
   15e9c:	681a2006 	.word	0x681a2006
   15ea0:	2002f8c1 	.word	0x2002f8c1
   15ea4:	200af993 	.word	0x200af993
   15ea8:	f993730a 	.word	0xf993730a
   15eac:	73ca200d 	.word	0x73ca200d
   15eb0:	200cf993 	.word	0x200cf993
   15eb4:	7a1a738a 	.word	0x7a1a738a
   15eb8:	7ada728a 	.word	0x7ada728a
   15ebc:	7a5b734a 	.word	0x7a5b734a
   15ec0:	477072cb 	.word	0x477072cb
   15ec4:	30fff04f 	.word	0x30fff04f
   15ec8:	bf004770 	.word	0xbf004770

00015ecc <rpc_gnss_serialize_ephe>:
   15ecc:	28004603 	.word	0x28004603
   15ed0:	2900d04b 	.word	0x2900d04b
   15ed4:	2000d049 	.word	0x2000d049
   15ed8:	70482202 	.word	0x70482202
   15edc:	68da700a 	.word	0x68da700a
   15ee0:	f8c12040 	.word	0xf8c12040
   15ee4:	f9b3200b 	.word	0xf9b3200b
   15ee8:	f8a12008 	.word	0xf8a12008
   15eec:	f9932009 	.word	0xf9932009
   15ef0:	720a2006 	.word	0x720a2006
   15ef4:	2044f9b3 	.word	0x2044f9b3
   15ef8:	f9b3878a 	.word	0xf9b3878a
   15efc:	86ca203e 	.word	0x86ca203e
   15f00:	2042f9b3 	.word	0x2042f9b3
   15f04:	f9b3874a 	.word	0xf9b3874a
   15f08:	868a203c 	.word	0x868a203c
   15f0c:	2046f9b3 	.word	0x2046f9b3
   15f10:	f9b387ca 	.word	0xf9b387ca
   15f14:	870a2040 	.word	0x870a2040
   15f18:	201cf9b3 	.word	0x201cf9b3
   15f1c:	6a9a830a 	.word	0x6a9a830a
   15f20:	2022f8c1 	.word	0x2022f8c1
   15f24:	744a7c9a 	.word	0x744a7c9a
   15f28:	70ca785a 	.word	0x70ca785a
   15f2c:	62ca6b5a 	.word	0x62ca6b5a
   15f30:	202cf9b3 	.word	0x202cf9b3
   15f34:	885a84ca 	.word	0x885a84ca
   15f38:	6a1a808a 	.word	0x6a1a808a
   15f3c:	201af8c1 	.word	0x201af8c1
   15f40:	630a6b9a 	.word	0x630a6b9a
   15f44:	f8c16a5a 	.word	0xf8c16a5a
   15f48:	6b1a201e 	.word	0x6b1a201e
   15f4c:	781a628a 	.word	0x781a628a
   15f50:	f993708a 	.word	0xf993708a
   15f54:	73ca2010 	.word	0x73ca2010
   15f58:	80ca889a 	.word	0x80ca889a
   15f5c:	824a8a9a 	.word	0x824a8a9a
   15f60:	740a7c5a 	.word	0x740a7c5a
   15f64:	614b699b 	.word	0x614b699b
   15f68:	f04f4770 	.word	0xf04f4770
   15f6c:	477030ff 	.word	0x477030ff

00015f70 <rpc_gnss_serialize_alm>:
   15f70:	b3604603 	.word	0xb3604603
   15f74:	2000b359 	.word	0x2000b359
   15f78:	70482203 	.word	0x70482203
   15f7c:	f9b3700a 	.word	0xf9b3700a
   15f80:	2021201c 	.word	0x2021201c
   15f84:	201df8a1 	.word	0x201df8a1
   15f88:	201ef9b3 	.word	0x201ef9b3
   15f8c:	201ff8a1 	.word	0x201ff8a1
   15f90:	2006f9b3 	.word	0x2006f9b3
   15f94:	889a810a 	.word	0x889a810a
   15f98:	78da80ca 	.word	0x78da80ca
   15f9c:	699a714a 	.word	0x699a714a
   15fa0:	2019f8c1 	.word	0x2019f8c1
   15fa4:	f8c1691a 	.word	0xf8c1691a
   15fa8:	f9b32011 	.word	0xf9b32011
   15fac:	814a2008 	.word	0x814a2008
   15fb0:	f8c168da 	.word	0xf8c168da
   15fb4:	7a9a200d 	.word	0x7a9a200d
   15fb8:	781a730a 	.word	0x781a730a
   15fbc:	789a708a 	.word	0x789a708a
   15fc0:	695a710a 	.word	0x695a710a
   15fc4:	2015f8c1 	.word	0x2015f8c1
   15fc8:	70cb785b 	.word	0x70cb785b
   15fcc:	f04f4770 	.word	0xf04f4770
   15fd0:	477030ff 	.word	0x477030ff

00015fd4 <rpc_gnss_serialize_klob>:
   15fd4:	b1f04603 	.word	0xb1f04603
   15fd8:	2000b1e9 	.word	0x2000b1e9
   15fdc:	70482204 	.word	0x70482204
   15fe0:	f993700a 	.word	0xf993700a
   15fe4:	200a2000 	.word	0x200a2000
   15fe8:	f993708a 	.word	0xf993708a
   15fec:	70ca2001 	.word	0x70ca2001
   15ff0:	2002f993 	.word	0x2002f993
   15ff4:	f993710a 	.word	0xf993710a
   15ff8:	714a2003 	.word	0x714a2003
   15ffc:	2004f993 	.word	0x2004f993
   16000:	f993718a 	.word	0xf993718a
   16004:	71ca2005 	.word	0x71ca2005
   16008:	2006f993 	.word	0x2006f993
   1600c:	f993720a 	.word	0xf993720a
   16010:	724b3007 	.word	0x724b3007
   16014:	f04f4770 	.word	0xf04f4770
   16018:	477030ff 	.word	0x477030ff

0001601c <rpc_gnss_serialize_nequick>:
   1601c:	b1984603 	.word	0xb1984603
   16020:	2000b191 	.word	0x2000b191
   16024:	70482205 	.word	0x70482205
   16028:	f9b3700a 	.word	0xf9b3700a
   1602c:	200a2000 	.word	0x200a2000
   16030:	f9b3804a 	.word	0xf9b3804a
   16034:	808a2002 	.word	0x808a2002
   16038:	2004f9b3 	.word	0x2004f9b3
   1603c:	799a80ca 	.word	0x799a80ca
   16040:	79db720a 	.word	0x79db720a
   16044:	4770724b 	.word	0x4770724b
   16048:	30fff04f 	.word	0x30fff04f
   1604c:	bf004770 	.word	0xbf004770

00016050 <rpc_gnss_serialize_time_and_sv_tow>:
   16050:	b309b310 	.word	0xb309b310
   16054:	2500b470 	.word	0x2500b470
   16058:	460c2606 	.word	0x460c2606
   1605c:	700e704d 	.word	0x700e704d
   16060:	8805462b 	.word	0x8805462b
   16064:	804d4602 	.word	0x804d4602
   16068:	f8c168c5 	.word	0xf8c168c5
   1606c:	8905500a 	.word	0x8905500a
   16070:	6840810d 	.word	0x6840810d
   16074:	8a156048 	.word	0x8a156048
   16078:	0043eb03 	.word	0x0043eb03
   1607c:	81c54408 	.word	0x81c54408
   16080:	33017c90 	.word	0x33017c90
   16084:	74202b20 	.word	0x74202b20
   16088:	0204f102 	.word	0x0204f102
   1608c:	0403f104 	.word	0x0403f104
   16090:	206ed1f1 	.word	0x206ed1f1
   16094:	4770bc70 	.word	0x4770bc70
   16098:	30fff04f 	.word	0x30fff04f
   1609c:	bf004770 	.word	0xbf004770

000160a0 <rpc_gnss_serialize_location>:
   160a0:	b1c84603 	.word	0xb1c84603
   160a4:	2000b1c1 	.word	0x2000b1c1
   160a8:	70482207 	.word	0x70482207
   160ac:	f9b3700a 	.word	0xf9b3700a
   160b0:	20112008 	.word	0x20112008
   160b4:	7b9a814a 	.word	0x7b9a814a
   160b8:	681a740a 	.word	0x681a740a
   160bc:	2002f8c1 	.word	0x2002f8c1
   160c0:	f8c1685a 	.word	0xf8c1685a
   160c4:	7b1a2006 	.word	0x7b1a2006
   160c8:	7b5a738a 	.word	0x7b5a738a
   160cc:	7a9a73ca 	.word	0x7a9a73ca
   160d0:	7adb730a 	.word	0x7adb730a
   160d4:	4770734b 	.word	0x4770734b
   160d8:	30fff04f 	.word	0x30fff04f
   160dc:	bf004770 	.word	0xbf004770

000160e0 <rpc_gnss_serialize_integrity>:
   160e0:	b141b148 	.word	0xb141b148
   160e4:	23082200 	.word	0x23082200
   160e8:	700b704a 	.word	0x700b704a
   160ec:	20066803 	.word	0x20066803
   160f0:	3002f8c1 	.word	0x3002f8c1
   160f4:	f04f4770 	.word	0xf04f4770
   160f8:	477030ff 	.word	0x477030ff

000160fc <ipc_trace_init>:
   160fc:	60184b01 	.word	0x60184b01
   16100:	bf004770 	.word	0xbf004770
   16104:	200205f8 	.word	0x200205f8

00016108 <bsd_os_trace_irq_handler>:
   16108:	4b6cb5f0 	.word	0x4b6cb5f0
   1610c:	781bb083 	.word	0x781bb083
   16110:	f0002b00 	.word	0xf0002b00
   16114:	4b6a80ad 	.word	0x4b6a80ad
   16118:	68a2681c 	.word	0x68a2681c
   1611c:	429a6863 	.word	0x429a6863
   16120:	f64bd02d 	.word	0xf64bd02d
   16124:	f8ad63ef 	.word	0xf8ad63ef
   16128:	78233000 	.word	0x78233000
   1612c:	f88d466e 	.word	0xf88d466e
   16130:	68633004 	.word	0x68633004
   16134:	429a2105 	.word	0x429a2105
   16138:	6927bf2a 	.word	0x6927bf2a
   1613c:	1abf1a9f 	.word	0x1abf1a9f
   16140:	bf94429a 	.word	0xbf94429a
   16144:	68e52500 	.word	0x68e52500
   16148:	bf88b2bf 	.word	0xbf88b2bf
   1614c:	46301b5b 	.word	0x46301b5b
   16150:	b29dbf88 	.word	0xb29dbf88
   16154:	7002f8ad 	.word	0x7002f8ad
   16158:	f8eef7fc 	.word	0xf8eef7fc
   1615c:	1002f8bd 	.word	0x1002f8bd
   16160:	f7fc68a0 	.word	0xf7fc68a0
   16164:	68a3f8e9 	.word	0x68a3f8e9
   16168:	441f6922 	.word	0x441f6922
   1616c:	bf084297 	.word	0xbf084297
   16170:	60a768e3 	.word	0x60a768e3
   16174:	60a3bf08 	.word	0x60a3bf08
   16178:	f0402d00 	.word	0xf0402d00
   1617c:	4b51808d 	.word	0x4b51808d
   16180:	68a2681c 	.word	0x68a2681c
   16184:	429a6863 	.word	0x429a6863
   16188:	f64bd02c 	.word	0xf64bd02c
   1618c:	f8ad63ef 	.word	0xf8ad63ef
   16190:	78233000 	.word	0x78233000
   16194:	f88d466e 	.word	0xf88d466e
   16198:	68633004 	.word	0x68633004
   1619c:	429a2105 	.word	0x429a2105
   161a0:	6927bf2a 	.word	0x6927bf2a
   161a4:	1abf1a9f 	.word	0x1abf1a9f
   161a8:	bf94429a 	.word	0xbf94429a
   161ac:	68e52500 	.word	0x68e52500
   161b0:	bf88b2bf 	.word	0xbf88b2bf
   161b4:	46301b5b 	.word	0x46301b5b
   161b8:	b29dbf88 	.word	0xb29dbf88
   161bc:	7002f8ad 	.word	0x7002f8ad
   161c0:	f8baf7fc 	.word	0xf8baf7fc
   161c4:	1002f8bd 	.word	0x1002f8bd
   161c8:	f7fc68a0 	.word	0xf7fc68a0
   161cc:	68a3f8b5 	.word	0x68a3f8b5
   161d0:	441f6922 	.word	0x441f6922
   161d4:	bf084297 	.word	0xbf084297
   161d8:	60a768e3 	.word	0x60a768e3
   161dc:	60a3bf08 	.word	0x60a3bf08
   161e0:	d1482d00 	.word	0xd1482d00
   161e4:	681c4b38 	.word	0x681c4b38
   161e8:	686368a2 	.word	0x686368a2
   161ec:	d02b429a 	.word	0xd02b429a
   161f0:	63eff64b 	.word	0x63eff64b
   161f4:	3000f8ad 	.word	0x3000f8ad
   161f8:	466e7823 	.word	0x466e7823
   161fc:	3004f88d 	.word	0x3004f88d
   16200:	21056863 	.word	0x21056863
   16204:	bf2a429a 	.word	0xbf2a429a
   16208:	1a9f6927 	.word	0x1a9f6927
   1620c:	429a1abf 	.word	0x429a1abf
   16210:	2500bf94 	.word	0x2500bf94
   16214:	b2bf68e5 	.word	0xb2bf68e5
   16218:	1b5bbf88 	.word	0x1b5bbf88
   1621c:	bf884630 	.word	0xbf884630
   16220:	f8adb29d 	.word	0xf8adb29d
   16224:	f7fc7002 	.word	0xf7fc7002
   16228:	f8bdf887 	.word	0xf8bdf887
   1622c:	68a01002 	.word	0x68a01002
   16230:	f882f7fc 	.word	0xf882f7fc
   16234:	692268a3 	.word	0x692268a3
   16238:	4297441f 	.word	0x4297441f
   1623c:	68e3bf08 	.word	0x68e3bf08
   16240:	bf0860a7 	.word	0xbf0860a7
   16244:	b90d60a3 	.word	0xb90d60a3
   16248:	bdf0b003 	.word	0xbdf0b003
   1624c:	21054630 	.word	0x21054630
   16250:	5002f8ad 	.word	0x5002f8ad
   16254:	f870f7fc 	.word	0xf870f7fc
   16258:	1002f8bd 	.word	0x1002f8bd
   1625c:	f7fc68e0 	.word	0xf7fc68e0
   16260:	f8bdf86b 	.word	0xf8bdf86b
   16264:	68e32002 	.word	0x68e32002
   16268:	60a34413 	.word	0x60a34413
   1626c:	bdf0b003 	.word	0xbdf0b003
   16270:	f824f7fc 	.word	0xf824f7fc
   16274:	2105e74f 	.word	0x2105e74f
   16278:	f8ad4630 	.word	0xf8ad4630
   1627c:	f7fc5002 	.word	0xf7fc5002
   16280:	f8bdf85b 	.word	0xf8bdf85b
   16284:	68e01002 	.word	0x68e01002
   16288:	f856f7fc 	.word	0xf856f7fc
   1628c:	2002f8bd 	.word	0x2002f8bd
   16290:	441368e3 	.word	0x441368e3
   16294:	e7a560a3 	.word	0xe7a560a3
   16298:	46302105 	.word	0x46302105
   1629c:	5002f8ad 	.word	0x5002f8ad
   162a0:	f84af7fc 	.word	0xf84af7fc
   162a4:	1002f8bd 	.word	0x1002f8bd
   162a8:	f7fc68e0 	.word	0xf7fc68e0
   162ac:	f8bdf845 	.word	0xf8bdf845
   162b0:	68e32002 	.word	0x68e32002
   162b4:	60a34413 	.word	0x60a34413
   162b8:	bf00e761 	.word	0xbf00e761
   162bc:	20027406 	.word	0x20027406
   162c0:	200205f4 	.word	0x200205f4
   162c4:	200205ec 	.word	0x200205ec
   162c8:	200205f0 	.word	0x200205f0

000162cc <ipc_trace_handle>:
   162cc:	e92d2200 	.word	0xe92d2200
   162d0:	4bb04ff0 	.word	0x4bb04ff0
   162d4:	681bb083 	.word	0x681bb083
   162d8:	695c6919 	.word	0x695c6919
   162dc:	741a7c18 	.word	0x741a7c18
   162e0:	745a7c58 	.word	0x745a7c58
   162e4:	749a7c98 	.word	0x749a7c98
   162e8:	74da7cd8 	.word	0x74da7cd8
   162ec:	751a7d18 	.word	0x751a7d18
   162f0:	755a7d58 	.word	0x755a7d58
   162f4:	759a7d98 	.word	0x759a7d98
   162f8:	75da7dd8 	.word	0x75da7dd8
   162fc:	3901b1b9 	.word	0x3901b1b9
   16300:	d8142903 	.word	0xd8142903
   16304:	f011e8df 	.word	0xf011e8df
   16308:	010300d6 	.word	0x010300d6
   1630c:	00160004 	.word	0x00160004
   16310:	20032501 	.word	0x20032501
   16314:	f06f2200 	.word	0xf06f2200
   16318:	4c9f015f 	.word	0x4c9f015f
   1631c:	7a1c7025 	.word	0x7a1c7025
   16320:	7a587218 	.word	0x7a587218
   16324:	7a98725a 	.word	0x7a98725a
   16328:	7ada729a 	.word	0x7ada729a
   1632c:	b00372d9 	.word	0xb00372d9
   16330:	8ff0e8bd 	.word	0x8ff0e8bd
   16334:	22002104 	.word	0x22002104
   16338:	005ff06f 	.word	0x005ff06f
   1633c:	72197a1c 	.word	0x72197a1c
   16340:	725a7a59 	.word	0x725a7a59
   16344:	7a9c4994 	.word	0x7a9c4994
   16348:	7adc729a 	.word	0x7adc729a
   1634c:	700a72d8 	.word	0x700a72d8
   16350:	2b00780b 	.word	0x2b00780b
   16354:	8117f000 	.word	0x8117f000
   16358:	681c4b90 	.word	0x681c4b90
   1635c:	686368a2 	.word	0x686368a2
   16360:	d02d429a 	.word	0xd02d429a
   16364:	63eff64b 	.word	0x63eff64b
   16368:	3000f8ad 	.word	0x3000f8ad
   1636c:	466e7823 	.word	0x466e7823
   16370:	3004f88d 	.word	0x3004f88d
   16374:	21056863 	.word	0x21056863
   16378:	bf2a429a 	.word	0xbf2a429a
   1637c:	1a9f6927 	.word	0x1a9f6927
   16380:	429a1abf 	.word	0x429a1abf
   16384:	2500bf94 	.word	0x2500bf94
   16388:	b2bf68e5 	.word	0xb2bf68e5
   1638c:	1b5bbf88 	.word	0x1b5bbf88
   16390:	bf884630 	.word	0xbf884630
   16394:	f8adb29d 	.word	0xf8adb29d
   16398:	f7fb7002 	.word	0xf7fb7002
   1639c:	f8bdffcd 	.word	0xf8bdffcd
   163a0:	68a01002 	.word	0x68a01002
   163a4:	ffc8f7fb 	.word	0xffc8f7fb
   163a8:	692268a3 	.word	0x692268a3
   163ac:	4297441f 	.word	0x4297441f
   163b0:	68e3bf08 	.word	0x68e3bf08
   163b4:	bf0860a7 	.word	0xbf0860a7
   163b8:	2d0060a3 	.word	0x2d0060a3
   163bc:	80d2f040 	.word	0x80d2f040
   163c0:	681c4b77 	.word	0x681c4b77
   163c4:	686368a2 	.word	0x686368a2
   163c8:	d02d429a 	.word	0xd02d429a
   163cc:	63eff64b 	.word	0x63eff64b
   163d0:	3000f8ad 	.word	0x3000f8ad
   163d4:	466e7823 	.word	0x466e7823
   163d8:	3004f88d 	.word	0x3004f88d
   163dc:	21056863 	.word	0x21056863
   163e0:	bf2a429a 	.word	0xbf2a429a
   163e4:	1a9f6927 	.word	0x1a9f6927
   163e8:	429a1abf 	.word	0x429a1abf
   163ec:	2500bf94 	.word	0x2500bf94
   163f0:	b2bf68e5 	.word	0xb2bf68e5
   163f4:	1b5bbf88 	.word	0x1b5bbf88
   163f8:	bf884630 	.word	0xbf884630
   163fc:	f8adb29d 	.word	0xf8adb29d
   16400:	f7fb7002 	.word	0xf7fb7002
   16404:	f8bdff99 	.word	0xf8bdff99
   16408:	68a01002 	.word	0x68a01002
   1640c:	ff94f7fb 	.word	0xff94f7fb
   16410:	692268a3 	.word	0x692268a3
   16414:	4297441f 	.word	0x4297441f
   16418:	68e3bf08 	.word	0x68e3bf08
   1641c:	bf0860a7 	.word	0xbf0860a7
   16420:	2d0060a3 	.word	0x2d0060a3
   16424:	808df040 	.word	0x808df040
   16428:	681c4b5e 	.word	0x681c4b5e
   1642c:	686368a2 	.word	0x686368a2
   16430:	f43f429a 	.word	0xf43f429a
   16434:	f64baf7c 	.word	0xf64baf7c
   16438:	f8ad63ef 	.word	0xf8ad63ef
   1643c:	78233000 	.word	0x78233000
   16440:	f88d466e 	.word	0xf88d466e
   16444:	68633004 	.word	0x68633004
   16448:	429a2105 	.word	0x429a2105
   1644c:	6927bf2a 	.word	0x6927bf2a
   16450:	1abf1a9f 	.word	0x1abf1a9f
   16454:	bf94429a 	.word	0xbf94429a
   16458:	68e52500 	.word	0x68e52500
   1645c:	bf88b2bf 	.word	0xbf88b2bf
   16460:	46301b5b 	.word	0x46301b5b
   16464:	b29dbf88 	.word	0xb29dbf88
   16468:	7002f8ad 	.word	0x7002f8ad
   1646c:	ff64f7fb 	.word	0xff64f7fb
   16470:	1002f8bd 	.word	0x1002f8bd
   16474:	f7fb68a0 	.word	0xf7fb68a0
   16478:	68a3ff5f 	.word	0x68a3ff5f
   1647c:	441f6922 	.word	0x441f6922
   16480:	bf084297 	.word	0xbf084297
   16484:	60a768e3 	.word	0x60a768e3
   16488:	60a3bf08 	.word	0x60a3bf08
   1648c:	f43f2d00 	.word	0xf43f2d00
   16490:	2105af4e 	.word	0x2105af4e
   16494:	f8ad4630 	.word	0xf8ad4630
   16498:	f7fb5002 	.word	0xf7fb5002
   1649c:	f8bdff4d 	.word	0xf8bdff4d
   164a0:	68e01002 	.word	0x68e01002
   164a4:	ff48f7fb 	.word	0xff48f7fb
   164a8:	2002f8bd 	.word	0x2002f8bd
   164ac:	441368e3 	.word	0x441368e3
   164b0:	e73c60a3 	.word	0xe73c60a3
   164b4:	78114a38 	.word	0x78114a38
   164b8:	2100b109 	.word	0x2100b109
   164bc:	68a57011 	.word	0x68a57011
   164c0:	d0392d00 	.word	0xd0392d00
   164c4:	0c00f04f 	.word	0x0c00f04f
   164c8:	a0d4f8df 	.word	0xa0d4f8df
   164cc:	b0ccf8df 	.word	0xb0ccf8df
   164d0:	46e14934 	.word	0x46e14934
   164d4:	46624666 	.word	0x46624666
   164d8:	e000f8d1 	.word	0xe000f8d1
   164dc:	8000f8da 	.word	0x8000f8da
   164e0:	7000f8db 	.word	0x7000f8db
   164e4:	2963e008 	.word	0x2963e008
   164e8:	2961d016 	.word	0x2961d016
   164ec:	4607bf04 	.word	0x4607bf04
   164f0:	32012601 	.word	0x32012601
   164f4:	d01342aa 	.word	0xd01342aa
   164f8:	eb041c91 	.word	0xeb041c91
   164fc:	68480181 	.word	0x68480181
   16500:	29627801 	.word	0x29627801
   16504:	4680d1ef 	.word	0x4680d1ef
   16508:	0901f04f 	.word	0x0901f04f
   1650c:	f7fbe7f1 	.word	0xf7fbe7f1
   16510:	b003fecd 	.word	0xb003fecd
   16514:	8ff0e8bd 	.word	0x8ff0e8bd
   16518:	f04f4686 	.word	0xf04f4686
   1651c:	e7e80c01 	.word	0xe7e80c01
   16520:	f1b9bba6 	.word	0xf1b9bba6
   16524:	d0010f00 	.word	0xd0010f00
   16528:	8000f8ca 	.word	0x8000f8ca
   1652c:	0f00f1bc 	.word	0x0f00f1bc
   16530:	4a1cd002 	.word	0x4a1cd002
   16534:	e000f8c2 	.word	0xe000f8c2
   16538:	22002001 	.word	0x22002001
   1653c:	015ff06f 	.word	0x015ff06f
   16540:	2105e6ed 	.word	0x2105e6ed
   16544:	f8ad4630 	.word	0xf8ad4630
   16548:	f7fb5002 	.word	0xf7fb5002
   1654c:	f8bdfef5 	.word	0xf8bdfef5
   16550:	68e01002 	.word	0x68e01002
   16554:	fef0f7fb 	.word	0xfef0f7fb
   16558:	2002f8bd 	.word	0x2002f8bd
   1655c:	441368e3 	.word	0x441368e3
   16560:	e76160a3 	.word	0xe76160a3
   16564:	46302105 	.word	0x46302105
   16568:	5002f8ad 	.word	0x5002f8ad
   1656c:	fee4f7fb 	.word	0xfee4f7fb
   16570:	1002f8bd 	.word	0x1002f8bd
   16574:	f7fb68e0 	.word	0xf7fb68e0
   16578:	f8bdfedf 	.word	0xf8bdfedf
   1657c:	68e32002 	.word	0x68e32002
   16580:	60a34413 	.word	0x60a34413
   16584:	f7fbe71c 	.word	0xf7fbe71c
   16588:	e6e5fe99 	.word	0xe6e5fe99
   1658c:	7000f8cb 	.word	0x7000f8cb
   16590:	bf00e7c7 	.word	0xbf00e7c7
   16594:	200205f8 	.word	0x200205f8
   16598:	20027406 	.word	0x20027406
   1659c:	200205f4 	.word	0x200205f4
   165a0:	200205ec 	.word	0x200205ec
   165a4:	200205f0 	.word	0x200205f0

000165a8 <rpc_trace_coredump_in_progress>:
   165a8:	78184b01 	.word	0x78184b01
   165ac:	bf004770 	.word	0xbf004770
   165b0:	20027406 	.word	0x20027406

000165b4 <ecp_modp>:
   165b4:	6e4bb570 	.word	0x6e4bb570
   165b8:	2b004604 	.word	0x2b004604
   165bc:	6803d03d 	.word	0x6803d03d
   165c0:	2b00460d 	.word	0x2b00460d
   165c4:	4620db2f 	.word	0x4620db2f
   165c8:	fe06f005 	.word	0xfe06f005
   165cc:	ebb06dab 	.word	0xebb06dab
   165d0:	d82d0f43 	.word	0xd82d0f43
   165d4:	46206e6b 	.word	0x46206e6b
   165d8:	46064798 	.word	0x46064798
   165dc:	3504bb08 	.word	0x3504bb08
   165e0:	2100e00a 	.word	0x2100e00a
   165e4:	f0064620 	.word	0xf0064620
   165e8:	b1a0f8c7 	.word	0xb1a0f8c7
   165ec:	4621462a 	.word	0x4621462a
   165f0:	f0064620 	.word	0xf0064620
   165f4:	b9e8fa79 	.word	0xb9e8fa79
   165f8:	2b006823 	.word	0x2b006823
   165fc:	4629dbf1 	.word	0x4629dbf1
   16600:	f0064620 	.word	0xf0064620
   16604:	2800f851 	.word	0x2800f851
   16608:	462adb0b 	.word	0x462adb0b
   1660c:	46204621 	.word	0x46204621
   16610:	f9aaf006 	.word	0xf9aaf006
   16614:	4629b970 	.word	0x4629b970
   16618:	f0064620 	.word	0xf0064620
   1661c:	2800f845 	.word	0x2800f845
   16620:	4630daf3 	.word	0x4630daf3
   16624:	2100bd70 	.word	0x2100bd70
   16628:	f8a6f006 	.word	0xf8a6f006
   1662c:	d0ca2800 	.word	0xd0ca2800
   16630:	e7f64e05 	.word	0xe7f64e05
   16634:	46304606 	.word	0x46304606
   16638:	1d0abd70 	.word	0x1d0abd70
   1663c:	4070e8bd 	.word	0x4070e8bd
   16640:	f0074601 	.word	0xf0074601
   16644:	bf00b84d 	.word	0xbf00b84d
   16648:	ffffb080 	.word	0xffffb080

0001664c <ecp_double_jac>:
   1664c:	43f0e92d 	.word	0x43f0e92d
   16650:	b08d4606 	.word	0xb08d4606
   16654:	46884668 	.word	0x46884668
   16658:	f0054615 	.word	0xf0054615
   1665c:	a803fb63 	.word	0xa803fb63
   16660:	fb60f005 	.word	0xfb60f005
   16664:	f005a806 	.word	0xf005a806
   16668:	a809fb5d 	.word	0xa809fb5d
   1666c:	fb5af005 	.word	0xfb5af005
   16670:	2b0069b3 	.word	0x2b0069b3
   16674:	80b2f000 	.word	0x80b2f000
   16678:	4629462a 	.word	0x4629462a
   1667c:	f006a803 	.word	0xf006a803
   16680:	4604fb67 	.word	0x4604fb67
   16684:	4668b178 	.word	0x4668b178
   16688:	fb54f005 	.word	0xfb54f005
   1668c:	f005a803 	.word	0xf005a803
   16690:	a806fb51 	.word	0xa806fb51
   16694:	fb4ef005 	.word	0xfb4ef005
   16698:	f005a809 	.word	0xf005a809
   1669c:	4620fb4b 	.word	0x4620fb4b
   166a0:	e8bdb00d 	.word	0xe8bdb00d
   166a4:	463183f0 	.word	0x463183f0
   166a8:	f7ffa803 	.word	0xf7ffa803
   166ac:	4604ff83 	.word	0x4604ff83
   166b0:	d1e82800 	.word	0xd1e82800
   166b4:	a9032203 	.word	0xa9032203
   166b8:	f0064668 	.word	0xf0064668
   166bc:	4604fc41 	.word	0x4604fc41
   166c0:	d1e02800 	.word	0xd1e02800
   166c4:	e0071d37 	.word	0xe0071d37
   166c8:	4669463a 	.word	0x4669463a
   166cc:	f0064668 	.word	0xf0064668
   166d0:	4604f94b 	.word	0x4604f94b
   166d4:	d1d62800 	.word	0xd1d62800
   166d8:	46684639 	.word	0x46684639
   166dc:	ffe4f005 	.word	0xffe4f005
   166e0:	daf12800 	.word	0xdaf12800
   166e4:	0910f106 	.word	0x0910f106
   166e8:	21004648 	.word	0x21004648
   166ec:	f844f006 	.word	0xf844f006
   166f0:	f0402800 	.word	0xf0402800
   166f4:	f10580e2 	.word	0xf10580e2
   166f8:	464a090c 	.word	0x464a090c
   166fc:	a8064649 	.word	0xa8064649
   16700:	fb26f006 	.word	0xfb26f006
   16704:	28004604 	.word	0x28004604
   16708:	4631d1bd 	.word	0x4631d1bd
   1670c:	f7ffa806 	.word	0xf7ffa806
   16710:	4604ff51 	.word	0x4604ff51
   16714:	d1b62800 	.word	0xd1b62800
   16718:	a8062101 	.word	0xa8062101
   1671c:	fe9ef005 	.word	0xfe9ef005
   16720:	b1404604 	.word	0xb1404604
   16724:	a906e7af 	.word	0xa906e7af
   16728:	4608463a 	.word	0x4608463a
   1672c:	f91cf006 	.word	0xf91cf006
   16730:	28004604 	.word	0x28004604
   16734:	4639d1a7 	.word	0x4639d1a7
   16738:	f005a806 	.word	0xf005a806
   1673c:	2800ffb5 	.word	0x2800ffb5
   16740:	aa06daf1 	.word	0xaa06daf1
   16744:	a8034629 	.word	0xa8034629
   16748:	fb02f006 	.word	0xfb02f006
   1674c:	28004604 	.word	0x28004604
   16750:	4631d199 	.word	0x4631d199
   16754:	f7ffa803 	.word	0xf7ffa803
   16758:	4604ff2d 	.word	0x4604ff2d
   1675c:	d1922800 	.word	0xd1922800
   16760:	a8032101 	.word	0xa8032101
   16764:	fe7af005 	.word	0xfe7af005
   16768:	b1404604 	.word	0xb1404604
   1676c:	a903e78b 	.word	0xa903e78b
   16770:	4608463a 	.word	0x4608463a
   16774:	f8f8f006 	.word	0xf8f8f006
   16778:	28004604 	.word	0x28004604
   1677c:	4639d183 	.word	0x4639d183
   16780:	f005a803 	.word	0xf005a803
   16784:	2800ff91 	.word	0x2800ff91
   16788:	aa06daf1 	.word	0xaa06daf1
   1678c:	a8094611 	.word	0xa8094611
   16790:	fadef006 	.word	0xfadef006
   16794:	28004604 	.word	0x28004604
   16798:	af75f47f 	.word	0xaf75f47f
   1679c:	a8094631 	.word	0xa8094631
   167a0:	ff08f7ff 	.word	0xff08f7ff
   167a4:	28004604 	.word	0x28004604
   167a8:	af6df47f 	.word	0xaf6df47f
   167ac:	a8092101 	.word	0xa8092101
   167b0:	fe54f005 	.word	0xfe54f005
   167b4:	28004604 	.word	0x28004604
   167b8:	af65f47f 	.word	0xaf65f47f
   167bc:	a8094639 	.word	0xa8094639
   167c0:	ff72f005 	.word	0xff72f005
   167c4:	f2c02800 	.word	0xf2c02800
   167c8:	a90980c5 	.word	0xa90980c5
   167cc:	4608463a 	.word	0x4608463a
   167d0:	f8caf006 	.word	0xf8caf006
   167d4:	28004604 	.word	0x28004604
   167d8:	e754d0f0 	.word	0xe754d0f0
   167dc:	0218f105 	.word	0x0218f105
   167e0:	a8034611 	.word	0xa8034611
   167e4:	fab4f006 	.word	0xfab4f006
   167e8:	28004604 	.word	0x28004604
   167ec:	af4bf47f 	.word	0xaf4bf47f
   167f0:	a8034631 	.word	0xa8034631
   167f4:	fedef7ff 	.word	0xfedef7ff
   167f8:	28004604 	.word	0x28004604
   167fc:	af43f47f 	.word	0xaf43f47f
   16800:	4629aa03 	.word	0x4629aa03
   16804:	f006a806 	.word	0xf006a806
   16808:	4604f96f 	.word	0x4604f96f
   1680c:	f47f2800 	.word	0xf47f2800
   16810:	1d37af3a 	.word	0x1d37af3a
   16814:	a906e008 	.word	0xa906e008
   16818:	4608463a 	.word	0x4608463a
   1681c:	f8a4f006 	.word	0xf8a4f006
   16820:	28004604 	.word	0x28004604
   16824:	af2ff47f 	.word	0xaf2ff47f
   16828:	a8064639 	.word	0xa8064639
   1682c:	ff3cf005 	.word	0xff3cf005
   16830:	daf02800 	.word	0xdaf02800
   16834:	4629aa03 	.word	0x4629aa03
   16838:	f006a809 	.word	0xf006a809
   1683c:	4604f9c9 	.word	0x4604f9c9
   16840:	e720b170 	.word	0xe720b170
   16844:	a8092100 	.word	0xa8092100
   16848:	ff96f005 	.word	0xff96f005
   1684c:	a909b158 	.word	0xa909b158
   16850:	4608463a 	.word	0x4608463a
   16854:	f948f006 	.word	0xf948f006
   16858:	28004604 	.word	0x28004604
   1685c:	af13f47f 	.word	0xaf13f47f
   16860:	2b009b09 	.word	0x2b009b09
   16864:	aa09dbee 	.word	0xaa09dbee
   16868:	a803a906 	.word	0xa803a906
   1686c:	fa70f006 	.word	0xfa70f006
   16870:	28004604 	.word	0x28004604
   16874:	af07f47f 	.word	0xaf07f47f
   16878:	a8034631 	.word	0xa8034631
   1687c:	fe9af7ff 	.word	0xfe9af7ff
   16880:	28004604 	.word	0x28004604
   16884:	aefff47f 	.word	0xaefff47f
   16888:	a9032203 	.word	0xa9032203
   1688c:	f0064668 	.word	0xf0064668
   16890:	4604fb57 	.word	0x4604fb57
   16894:	f47f2800 	.word	0xf47f2800
   16898:	4639aef6 	.word	0x4639aef6
   1689c:	f0054668 	.word	0xf0054668
   168a0:	2800ff03 	.word	0x2800ff03
   168a4:	af27f6ff 	.word	0xaf27f6ff
   168a8:	4669463a 	.word	0x4669463a
   168ac:	f0064668 	.word	0xf0064668
   168b0:	4604f85b 	.word	0x4604f85b
   168b4:	d0f02800 	.word	0xd0f02800
   168b8:	f105e6e5 	.word	0xf105e6e5
   168bc:	46110218 	.word	0x46110218
   168c0:	f006a803 	.word	0xf006a803
   168c4:	4604fa45 	.word	0x4604fa45
   168c8:	f47f2800 	.word	0xf47f2800
   168cc:	4631aedc 	.word	0x4631aedc
   168d0:	f7ffa803 	.word	0xf7ffa803
   168d4:	4604fe6f 	.word	0x4604fe6f
   168d8:	f47f2800 	.word	0xf47f2800
   168dc:	aa03aed4 	.word	0xaa03aed4
   168e0:	a8064611 	.word	0xa8064611
   168e4:	fa34f006 	.word	0xfa34f006
   168e8:	28004604 	.word	0x28004604
   168ec:	aecbf47f 	.word	0xaecbf47f
   168f0:	a8064631 	.word	0xa8064631
   168f4:	fe5ef7ff 	.word	0xfe5ef7ff
   168f8:	28004604 	.word	0x28004604
   168fc:	aec3f47f 	.word	0xaec3f47f
   16900:	a906464a 	.word	0xa906464a
   16904:	f006a803 	.word	0xf006a803
   16908:	4604fa23 	.word	0x4604fa23
   1690c:	f47f2800 	.word	0xf47f2800
   16910:	4631aeba 	.word	0x4631aeba
   16914:	f7ffa803 	.word	0xf7ffa803
   16918:	4604fe4d 	.word	0x4604fe4d
   1691c:	f47f2800 	.word	0xf47f2800
   16920:	aa03aeb2 	.word	0xaa03aeb2
   16924:	46684669 	.word	0x46684669
   16928:	f8def006 	.word	0xf8def006
   1692c:	28004604 	.word	0x28004604
   16930:	aea9f47f 	.word	0xaea9f47f
   16934:	46684639 	.word	0x46684639
   16938:	feb6f005 	.word	0xfeb6f005
   1693c:	f6ff2800 	.word	0xf6ff2800
   16940:	463aaeda 	.word	0x463aaeda
   16944:	46684669 	.word	0x46684669
   16948:	f80ef006 	.word	0xf80ef006
   1694c:	28004604 	.word	0x28004604
   16950:	e698d0f0 	.word	0xe698d0f0
   16954:	4669466a 	.word	0x4669466a
   16958:	f006a806 	.word	0xf006a806
   1695c:	4604f9f9 	.word	0x4604f9f9
   16960:	f47f2800 	.word	0xf47f2800
   16964:	4631ae90 	.word	0x4631ae90
   16968:	f7ffa806 	.word	0xf7ffa806
   1696c:	4604fe23 	.word	0x4604fe23
   16970:	f47f2800 	.word	0xf47f2800
   16974:	a906ae88 	.word	0xa906ae88
   16978:	4608aa03 	.word	0x4608aa03
   1697c:	f928f006 	.word	0xf928f006
   16980:	28004604 	.word	0x28004604
   16984:	ae7ff47f 	.word	0xae7ff47f
   16988:	2b009b06 	.word	0x2b009b06
   1698c:	2100da0d 	.word	0x2100da0d
   16990:	f005a806 	.word	0xf005a806
   16994:	b140fef1 	.word	0xb140fef1
   16998:	463aa906 	.word	0x463aa906
   1699c:	f0064608 	.word	0xf0064608
   169a0:	4604f8a3 	.word	0x4604f8a3
   169a4:	d0ef2800 	.word	0xd0ef2800
   169a8:	a906e66d 	.word	0xa906e66d
   169ac:	4608aa03 	.word	0x4608aa03
   169b0:	f90ef006 	.word	0xf90ef006
   169b4:	28004604 	.word	0x28004604
   169b8:	ae65f47f 	.word	0xae65f47f
   169bc:	2b009b06 	.word	0x2b009b06
   169c0:	2100da0d 	.word	0x2100da0d
   169c4:	f005a806 	.word	0xf005a806
   169c8:	b140fed7 	.word	0xb140fed7
   169cc:	463aa906 	.word	0x463aa906
   169d0:	f0064608 	.word	0xf0064608
   169d4:	4604f889 	.word	0x4604f889
   169d8:	d0ef2800 	.word	0xd0ef2800
   169dc:	a903e653 	.word	0xa903e653
   169e0:	4608aa06 	.word	0x4608aa06
   169e4:	f8f4f006 	.word	0xf8f4f006
   169e8:	28004604 	.word	0x28004604
   169ec:	ae4bf47f 	.word	0xae4bf47f
   169f0:	2b009b03 	.word	0x2b009b03
   169f4:	2100da0d 	.word	0x2100da0d
   169f8:	f005a803 	.word	0xf005a803
   169fc:	b140febd 	.word	0xb140febd
   16a00:	463aa903 	.word	0x463aa903
   16a04:	f0064608 	.word	0xf0064608
   16a08:	4604f86f 	.word	0x4604f86f
   16a0c:	d0ef2800 	.word	0xd0ef2800
   16a10:	a903e639 	.word	0xa903e639
   16a14:	4608466a 	.word	0x4608466a
   16a18:	f99af006 	.word	0xf99af006
   16a1c:	28004604 	.word	0x28004604
   16a20:	ae31f47f 	.word	0xae31f47f
   16a24:	a8034631 	.word	0xa8034631
   16a28:	fdc4f7ff 	.word	0xfdc4f7ff
   16a2c:	28004604 	.word	0x28004604
   16a30:	ae29f47f 	.word	0xae29f47f
   16a34:	aa09a903 	.word	0xaa09a903
   16a38:	f0064608 	.word	0xf0064608
   16a3c:	4604f8c9 	.word	0x4604f8c9
   16a40:	f47f2800 	.word	0xf47f2800
   16a44:	9b03ae20 	.word	0x9b03ae20
   16a48:	da0d2b00 	.word	0xda0d2b00
   16a4c:	a8032100 	.word	0xa8032100
   16a50:	fe92f005 	.word	0xfe92f005
   16a54:	a903b140 	.word	0xa903b140
   16a58:	4608463a 	.word	0x4608463a
   16a5c:	f844f006 	.word	0xf844f006
   16a60:	28004604 	.word	0x28004604
   16a64:	e60ed0ef 	.word	0xe60ed0ef
   16a68:	0218f105 	.word	0x0218f105
   16a6c:	a8094649 	.word	0xa8094649
   16a70:	f96ef006 	.word	0xf96ef006
   16a74:	28004604 	.word	0x28004604
   16a78:	ae05f47f 	.word	0xae05f47f
   16a7c:	a8094631 	.word	0xa8094631
   16a80:	fd98f7ff 	.word	0xfd98f7ff
   16a84:	28004604 	.word	0x28004604
   16a88:	adfdf47f 	.word	0xadfdf47f
   16a8c:	a8092101 	.word	0xa8092101
   16a90:	fce4f005 	.word	0xfce4f005
   16a94:	28004604 	.word	0x28004604
   16a98:	adf5f47f 	.word	0xadf5f47f
   16a9c:	a8094639 	.word	0xa8094639
   16aa0:	fe02f005 	.word	0xfe02f005
   16aa4:	db082800 	.word	0xdb082800
   16aa8:	463aa909 	.word	0x463aa909
   16aac:	f0054608 	.word	0xf0054608
   16ab0:	4604ff5b 	.word	0x4604ff5b
   16ab4:	d0f12800 	.word	0xd0f12800
   16ab8:	a906e5e5 	.word	0xa906e5e5
   16abc:	f0054640 	.word	0xf0054640
   16ac0:	4604f9b5 	.word	0x4604f9b5
   16ac4:	f47f2800 	.word	0xf47f2800
   16ac8:	a903adde 	.word	0xa903adde
   16acc:	000cf108 	.word	0x000cf108
   16ad0:	f9acf005 	.word	0xf9acf005
   16ad4:	28004604 	.word	0x28004604
   16ad8:	add5f47f 	.word	0xadd5f47f
   16adc:	0018f108 	.word	0x0018f108
   16ae0:	f005a909 	.word	0xf005a909
   16ae4:	4604f9a3 	.word	0x4604f9a3
   16ae8:	bf00e5cd 	.word	0xbf00e5cd

00016aec <ecp_normalize_jac>:
   16aec:	f101b5f0 	.word	0xf101b5f0
   16af0:	b0870518 	.word	0xb0870518
   16af4:	4607460e 	.word	0x4607460e
   16af8:	46282100 	.word	0x46282100
   16afc:	fe3cf005 	.word	0xfe3cf005
   16b00:	4604b918 	.word	0x4604b918
   16b04:	b0074620 	.word	0xb0074620
   16b08:	4668bdf0 	.word	0x4668bdf0
   16b0c:	f90af005 	.word	0xf90af005
   16b10:	f005a803 	.word	0xf005a803
   16b14:	4668f907 	.word	0x4668f907
   16b18:	46291d3a 	.word	0x46291d3a
   16b1c:	f936f007 	.word	0xf936f007
   16b20:	b1404604 	.word	0xb1404604
   16b24:	f0054668 	.word	0xf0054668
   16b28:	a803f905 	.word	0xa803f905
   16b2c:	f902f005 	.word	0xf902f005
   16b30:	b0074620 	.word	0xb0074620
   16b34:	466abdf0 	.word	0x466abdf0
   16b38:	a8034669 	.word	0xa8034669
   16b3c:	f908f006 	.word	0xf908f006
   16b40:	28004604 	.word	0x28004604
   16b44:	4639d1ee 	.word	0x4639d1ee
   16b48:	f7ffa803 	.word	0xf7ffa803
   16b4c:	4604fd33 	.word	0x4604fd33
   16b50:	d1e72800 	.word	0xd1e72800
   16b54:	4631aa03 	.word	0x4631aa03
   16b58:	f0064630 	.word	0xf0064630
   16b5c:	4604f8f9 	.word	0x4604f8f9
   16b60:	d1df2800 	.word	0xd1df2800
   16b64:	46304639 	.word	0x46304639
   16b68:	fd24f7ff 	.word	0xfd24f7ff
   16b6c:	28004604 	.word	0x28004604
   16b70:	360cd1d8 	.word	0x360cd1d8
   16b74:	46304631 	.word	0x46304631
   16b78:	f006aa03 	.word	0xf006aa03
   16b7c:	4604f8e9 	.word	0x4604f8e9
   16b80:	d1cf2800 	.word	0xd1cf2800
   16b84:	46304639 	.word	0x46304639
   16b88:	fd14f7ff 	.word	0xfd14f7ff
   16b8c:	28004604 	.word	0x28004604
   16b90:	466ad1c8 	.word	0x466ad1c8
   16b94:	46304631 	.word	0x46304631
   16b98:	f8daf006 	.word	0xf8daf006
   16b9c:	28004604 	.word	0x28004604
   16ba0:	4639d1c0 	.word	0x4639d1c0
   16ba4:	f7ff4630 	.word	0xf7ff4630
   16ba8:	4604fd05 	.word	0x4604fd05
   16bac:	d1b92800 	.word	0xd1b92800
   16bb0:	21014628 	.word	0x21014628
   16bb4:	fac6f005 	.word	0xfac6f005
   16bb8:	e7b34604 	.word	0xe7b34604

00016bbc <ecp_normalize_jac_many.part.3>:
   16bbc:	4ff0e92d 	.word	0x4ff0e92d
   16bc0:	b08b4682 	.word	0xb08b4682
   16bc4:	4610468b 	.word	0x4610468b
   16bc8:	4616210c 	.word	0x4616210c
   16bcc:	fcfef008 	.word	0xfcfef008
   16bd0:	f0002800 	.word	0xf0002800
   16bd4:	468080fe 	.word	0x468080fe
   16bd8:	f005a801 	.word	0xf005a801
   16bdc:	a804f8a3 	.word	0xa804f8a3
   16be0:	f8a0f005 	.word	0xf8a0f005
   16be4:	f005a807 	.word	0xf005a807
   16be8:	f8dbf89d 	.word	0xf8dbf89d
   16bec:	46401000 	.word	0x46401000
   16bf0:	f0053118 	.word	0xf0053118
   16bf4:	4604f91b 	.word	0x4604f91b
   16bf8:	2e01bb60 	.word	0x2e01bb60
   16bfc:	46d9d946 	.word	0x46d9d946
   16c00:	f1082701 	.word	0xf1082701
   16c04:	e008050c 	.word	0xe008050c
   16c08:	46514628 	.word	0x46514628
   16c0c:	fcd2f7ff 	.word	0xfcd2f7ff
   16c10:	4604350c 	.word	0x4604350c
   16c14:	42beb968 	.word	0x42beb968
   16c18:	f859d038 	.word	0xf859d038
   16c1c:	f1a52f04 	.word	0xf1a52f04
   16c20:	3218010c 	.word	0x3218010c
   16c24:	f0064628 	.word	0xf0064628
   16c28:	3701f893 	.word	0x3701f893
   16c2c:	28004604 	.word	0x28004604
   16c30:	a801d0ea 	.word	0xa801d0ea
   16c34:	f87ef005 	.word	0xf87ef005
   16c38:	f005a804 	.word	0xf005a804
   16c3c:	a807f87b 	.word	0xa807f87b
   16c40:	f878f005 	.word	0xf878f005
   16c44:	a901e010 	.word	0xa901e010
   16c48:	f005a804 	.word	0xf005a804
   16c4c:	4604f8ef 	.word	0x4604f8ef
   16c50:	d0532800 	.word	0xd0532800
   16c54:	f005a801 	.word	0xf005a801
   16c58:	a804f86d 	.word	0xa804f86d
   16c5c:	f86af005 	.word	0xf86af005
   16c60:	f005a807 	.word	0xf005a807
   16c64:	b156f867 	.word	0xb156f867
   16c68:	eb064645 	.word	0xeb064645
   16c6c:	eb080646 	.word	0xeb080646
   16c70:	46280686 	.word	0x46280686
   16c74:	f005350c 	.word	0xf005350c
   16c78:	42b5f85d 	.word	0x42b5f85d
   16c7c:	4640d1f9 	.word	0x4640d1f9
   16c80:	fcb8f008 	.word	0xfcb8f008
   16c84:	b00b4620 	.word	0xb00b4620
   16c88:	8ff0e8bd 	.word	0x8ff0e8bd
   16c8c:	0546eb06 	.word	0x0546eb06
   16c90:	f1a500ad 	.word	0xf1a500ad
   16c94:	4441010c 	.word	0x4441010c
   16c98:	0204f10a 	.word	0x0204f10a
   16c9c:	f007a801 	.word	0xf007a801
   16ca0:	4604f875 	.word	0x4604f875
   16ca4:	d1d52800 	.word	0xd1d52800
   16ca8:	4380f106 	.word	0x4380f106
   16cac:	3b013d18 	.word	0x3b013d18
   16cb0:	eb0b4445 	.word	0xeb0b4445
   16cb4:	1e770b83 	.word	0x1e770b83
   16cb8:	d0c42f00 	.word	0xd0c42f00
   16cbc:	a901462a 	.word	0xa901462a
   16cc0:	f006a804 	.word	0xf006a804
   16cc4:	4604f845 	.word	0x4604f845
   16cc8:	d1c32800 	.word	0xd1c32800
   16ccc:	a8044651 	.word	0xa8044651
   16cd0:	fc70f7ff 	.word	0xfc70f7ff
   16cd4:	28004604 	.word	0x28004604
   16cd8:	f8dbd1bc 	.word	0xf8dbd1bc
   16cdc:	a9012000 	.word	0xa9012000
   16ce0:	46083218 	.word	0x46083218
   16ce4:	f834f006 	.word	0xf834f006
   16ce8:	28004604 	.word	0x28004604
   16cec:	4651d1b2 	.word	0x4651d1b2
   16cf0:	f7ffa801 	.word	0xf7ffa801
   16cf4:	4604fc5f 	.word	0x4604fc5f
   16cf8:	d1ab2800 	.word	0xd1ab2800
   16cfc:	4611aa04 	.word	0x4611aa04
   16d00:	f006a807 	.word	0xf006a807
   16d04:	4604f825 	.word	0x4604f825
   16d08:	d1a32800 	.word	0xd1a32800
   16d0c:	a8074651 	.word	0xa8074651
   16d10:	fc50f7ff 	.word	0xfc50f7ff
   16d14:	28004604 	.word	0x28004604
   16d18:	f8dbd19c 	.word	0xf8dbd19c
   16d1c:	aa071000 	.word	0xaa071000
   16d20:	f0064608 	.word	0xf0064608
   16d24:	4604f815 	.word	0x4604f815
   16d28:	d1932800 	.word	0xd1932800
   16d2c:	f8db4651 	.word	0xf8db4651
   16d30:	f7ff0000 	.word	0xf7ff0000
   16d34:	4604fc3f 	.word	0x4604fc3f
   16d38:	d18b2800 	.word	0xd18b2800
   16d3c:	1000f8db 	.word	0x1000f8db
   16d40:	310caa07 	.word	0x310caa07
   16d44:	f0064608 	.word	0xf0064608
   16d48:	4604f803 	.word	0x4604f803
   16d4c:	d1812800 	.word	0xd1812800
   16d50:	0000f8db 	.word	0x0000f8db
   16d54:	300c4651 	.word	0x300c4651
   16d58:	fc2cf7ff 	.word	0xfc2cf7ff
   16d5c:	28004604 	.word	0x28004604
   16d60:	af78f47f 	.word	0xaf78f47f
   16d64:	1000f8db 	.word	0x1000f8db
   16d68:	310caa04 	.word	0x310caa04
   16d6c:	f0054608 	.word	0xf0054608
   16d70:	4604ffef 	.word	0x4604ffef
   16d74:	f47f2800 	.word	0xf47f2800
   16d78:	f8dbaf6d 	.word	0xf8dbaf6d
   16d7c:	46510000 	.word	0x46510000
   16d80:	f7ff300c 	.word	0xf7ff300c
   16d84:	4604fc17 	.word	0x4604fc17
   16d88:	f47f2800 	.word	0xf47f2800
   16d8c:	f8daaf63 	.word	0xf8daaf63
   16d90:	f8db1008 	.word	0xf8db1008
   16d94:	f0040000 	.word	0xf0040000
   16d98:	4604ffe7 	.word	0x4604ffe7
   16d9c:	f47f2800 	.word	0xf47f2800
   16da0:	f8dbaf59 	.word	0xf8dbaf59
   16da4:	f8da0000 	.word	0xf8da0000
   16da8:	300c1008 	.word	0x300c1008
   16dac:	ffdcf004 	.word	0xffdcf004
   16db0:	28004604 	.word	0x28004604
   16db4:	af4ef47f 	.word	0xaf4ef47f
   16db8:	0000f8db 	.word	0x0000f8db
   16dbc:	30183d0c 	.word	0x30183d0c
   16dc0:	0b04f1ab 	.word	0x0b04f1ab
   16dc4:	ffb6f004 	.word	0xffb6f004
   16dc8:	f43f2f00 	.word	0xf43f2f00
   16dcc:	3f01af43 	.word	0x3f01af43
   16dd0:	4c01e772 	.word	0x4c01e772
   16dd4:	bf00e756 	.word	0xbf00e756
   16dd8:	ffffb280 	.word	0xffffb280

00016ddc <symbol_0002b14>:
   16ddc:	b510b1b8 	.word	0xb510b1b8
   16de0:	227c4604 	.word	0x227c4604
   16de4:	f00d2100 	.word	0xf00d2100
   16de8:	f104fd98 	.word	0xf104fd98
   16dec:	f004007c 	.word	0xf004007c
   16df0:	f104ff99 	.word	0xf104ff99
   16df4:	f0040088 	.word	0xf0040088
   16df8:	f104ff95 	.word	0xf104ff95
   16dfc:	f0040094 	.word	0xf0040094
   16e00:	f104ff91 	.word	0xf104ff91
   16e04:	e8bd00a0 	.word	0xe8bd00a0
   16e08:	f0044010 	.word	0xf0044010
   16e0c:	4770bf8b 	.word	0x4770bf8b

00016e10 <symbol_0000ef7>:
   16e10:	d0482800 	.word	0xd0482800
   16e14:	6e03b570 	.word	0x6e03b570
   16e18:	2b014604 	.word	0x2b014604
   16e1c:	6f60d123 	.word	0x6f60d123
   16e20:	6fa2b1c8 	.word	0x6fa2b1c8
   16e24:	2600b1aa 	.word	0x2600b1aa
   16e28:	03c6eb06 	.word	0x03c6eb06
   16e2c:	0583eb10 	.word	0x0583eb10
   16e30:	4628d035 	.word	0x4628d035
   16e34:	ff7ef004 	.word	0xff7ef004
   16e38:	000cf105 	.word	0x000cf105
   16e3c:	ff7af004 	.word	0xff7af004
   16e40:	0018f105 	.word	0x0018f105
   16e44:	ff76f004 	.word	0xff76f004
   16e48:	36016fa2 	.word	0x36016fa2
   16e4c:	6f604296 	.word	0x6f604296
   16e50:	f008d3ea 	.word	0xf008d3ea
   16e54:	2200fbcf 	.word	0x2200fbcf
   16e58:	037cf104 	.word	0x037cf104
   16e5c:	34017022 	.word	0x34017022
   16e60:	d1fb429c 	.word	0xd1fb429c
   16e64:	3004bd70 	.word	0x3004bd70
   16e68:	ff64f004 	.word	0xff64f004
   16e6c:	0010f104 	.word	0x0010f104
   16e70:	ff60f004 	.word	0xff60f004
   16e74:	001cf104 	.word	0x001cf104
   16e78:	ff5cf004 	.word	0xff5cf004
   16e7c:	0028f104 	.word	0x0028f104
   16e80:	ff58f004 	.word	0xff58f004
   16e84:	0034f104 	.word	0x0034f104
   16e88:	ff54f004 	.word	0xff54f004
   16e8c:	0040f104 	.word	0x0040f104
   16e90:	ff50f004 	.word	0xff50f004
   16e94:	004cf104 	.word	0x004cf104
   16e98:	ff4cf004 	.word	0xff4cf004
   16e9c:	3601e7bf 	.word	0x3601e7bf
   16ea0:	d3c14296 	.word	0xd3c14296
   16ea4:	4770e7d5 	.word	0x4770e7d5

00016ea8 <symbol_0001d5f>:
   16ea8:	b510b1a8 	.word	0xb510b1a8
   16eac:	f7ff4604 	.word	0xf7ff4604
   16eb0:	f104ffaf 	.word	0xf104ffaf
   16eb4:	f004007c 	.word	0xf004007c
   16eb8:	f104ff3d 	.word	0xf104ff3d
   16ebc:	f0040088 	.word	0xf0040088
   16ec0:	f104ff39 	.word	0xf104ff39
   16ec4:	f0040094 	.word	0xf0040094
   16ec8:	f104ff35 	.word	0xf104ff35
   16ecc:	e8bd00a0 	.word	0xe8bd00a0
   16ed0:	f0044010 	.word	0xf0044010
   16ed4:	4770bf2f 	.word	0x4770bf2f

00016ed8 <symbol_000d41f>:
   16ed8:	2101b510 	.word	0x2101b510
   16edc:	f0054604 	.word	0xf0054604
   16ee0:	b100f931 	.word	0xb100f931
   16ee4:	2101bd10 	.word	0x2101bd10
   16ee8:	000cf104 	.word	0x000cf104
   16eec:	f92af005 	.word	0xf92af005
   16ef0:	d1f72800 	.word	0xd1f72800
   16ef4:	f1044601 	.word	0xf1044601
   16ef8:	e8bd0018 	.word	0xe8bd0018
   16efc:	f0054010 	.word	0xf0054010
   16f00:	bf00b921 	.word	0xbf00b921

00016f04 <ecp_add_mixed>:
   16f04:	47f0e92d 	.word	0x47f0e92d
   16f08:	0518f102 	.word	0x0518f102
   16f0c:	4681b096 	.word	0x4681b096
   16f10:	46284688 	.word	0x46284688
   16f14:	46172100 	.word	0x46172100
   16f18:	f005461e 	.word	0xf005461e
   16f1c:	2800fc2d 	.word	0x2800fc2d
   16f20:	6a33d048 	.word	0x6a33d048
   16f24:	f106b18b 	.word	0xf106b18b
   16f28:	46200418 	.word	0x46200418
   16f2c:	f0052100 	.word	0xf0052100
   16f30:	2800fc23 	.word	0x2800fc23
   16f34:	80d7f000 	.word	0x80d7f000
   16f38:	b1336a33 	.word	0xb1336a33
   16f3c:	21014620 	.word	0x21014620
   16f40:	fc1af005 	.word	0xfc1af005
   16f44:	f0402800 	.word	0xf0402800
   16f48:	a80180e7 	.word	0xa80180e7
   16f4c:	feeaf004 	.word	0xfeeaf004
   16f50:	f004a804 	.word	0xf004a804
   16f54:	a807fee7 	.word	0xa807fee7
   16f58:	fee4f004 	.word	0xfee4f004
   16f5c:	f004a80a 	.word	0xf004a80a
   16f60:	a80dfee1 	.word	0xa80dfee1
   16f64:	fedef004 	.word	0xfedef004
   16f68:	f004a810 	.word	0xf004a810
   16f6c:	a813fedb 	.word	0xa813fedb
   16f70:	fed8f004 	.word	0xfed8f004
   16f74:	4629462a 	.word	0x4629462a
   16f78:	f005a801 	.word	0xf005a801
   16f7c:	4604fee9 	.word	0x4604fee9
   16f80:	a801b380 	.word	0xa801b380
   16f84:	fed6f004 	.word	0xfed6f004
   16f88:	f004a804 	.word	0xf004a804
   16f8c:	a807fed3 	.word	0xa807fed3
   16f90:	fed0f004 	.word	0xfed0f004
   16f94:	f004a80a 	.word	0xf004a80a
   16f98:	a80dfecd 	.word	0xa80dfecd
   16f9c:	fecaf004 	.word	0xfecaf004
   16fa0:	f004a810 	.word	0xf004a810
   16fa4:	a813fec7 	.word	0xa813fec7
   16fa8:	fec4f004 	.word	0xfec4f004
   16fac:	b0164620 	.word	0xb0164620
   16fb0:	87f0e8bd 	.word	0x87f0e8bd
   16fb4:	46404631 	.word	0x46404631
   16fb8:	ff38f004 	.word	0xff38f004
   16fbc:	28004604 	.word	0x28004604
   16fc0:	f106d1f4 	.word	0xf106d1f4
   16fc4:	f108010c 	.word	0xf108010c
   16fc8:	f004000c 	.word	0xf004000c
   16fcc:	4604ff2f 	.word	0x4604ff2f
   16fd0:	d1eb2800 	.word	0xd1eb2800
   16fd4:	0118f106 	.word	0x0118f106
   16fd8:	0018f108 	.word	0x0018f108
   16fdc:	ff26f004 	.word	0xff26f004
   16fe0:	e7e34604 	.word	0xe7e34604
   16fe4:	a8014649 	.word	0xa8014649
   16fe8:	fae4f7ff 	.word	0xfae4f7ff
   16fec:	28004604 	.word	0x28004604
   16ff0:	462ad1c7 	.word	0x462ad1c7
   16ff4:	a804a901 	.word	0xa804a901
   16ff8:	feaaf005 	.word	0xfeaaf005
   16ffc:	28004604 	.word	0x28004604
   17000:	4649d1bf 	.word	0x4649d1bf
   17004:	f7ffa804 	.word	0xf7ffa804
   17008:	4604fad5 	.word	0x4604fad5
   1700c:	d1b82800 	.word	0xd1b82800
   17010:	4632a901 	.word	0x4632a901
   17014:	f0054608 	.word	0xf0054608
   17018:	4604fe9b 	.word	0x4604fe9b
   1701c:	d1b02800 	.word	0xd1b02800
   17020:	a8014649 	.word	0xa8014649
   17024:	fac6f7ff 	.word	0xfac6f7ff
   17028:	28004604 	.word	0x28004604
   1702c:	a904d1a9 	.word	0xa904d1a9
   17030:	020cf106 	.word	0x020cf106
   17034:	f0054608 	.word	0xf0054608
   17038:	4604fe8b 	.word	0x4604fe8b
   1703c:	d1a02800 	.word	0xd1a02800
   17040:	a8044649 	.word	0xa8044649
   17044:	fab6f7ff 	.word	0xfab6f7ff
   17048:	28004604 	.word	0x28004604
   1704c:	a901d199 	.word	0xa901d199
   17050:	4608463a 	.word	0x4608463a
   17054:	fdbcf005 	.word	0xfdbcf005
   17058:	28004604 	.word	0x28004604
   1705c:	f109d191 	.word	0xf109d191
   17060:	e00c0604 	.word	0xe00c0604
   17064:	a8012100 	.word	0xa8012100
   17068:	fb86f005 	.word	0xfb86f005
   1706c:	a901b150 	.word	0xa901b150
   17070:	46084632 	.word	0x46084632
   17074:	fd38f005 	.word	0xfd38f005
   17078:	28004604 	.word	0x28004604
   1707c:	9b01d181 	.word	0x9b01d181
   17080:	dbef2b00 	.word	0xdbef2b00
   17084:	f107a904 	.word	0xf107a904
   17088:	4632060c 	.word	0x4632060c
   1708c:	f0054608 	.word	0xf0054608
   17090:	4604fd9f 	.word	0x4604fd9f
   17094:	f47f2800 	.word	0xf47f2800
   17098:	f109af74 	.word	0xf109af74
   1709c:	e00d0a04 	.word	0xe00d0a04
   170a0:	a8042100 	.word	0xa8042100
   170a4:	fb68f005 	.word	0xfb68f005
   170a8:	a904b158 	.word	0xa904b158
   170ac:	46084652 	.word	0x46084652
   170b0:	fd1af005 	.word	0xfd1af005
   170b4:	28004604 	.word	0x28004604
   170b8:	af63f47f 	.word	0xaf63f47f
   170bc:	2b009b04 	.word	0x2b009b04
   170c0:	2100dbee 	.word	0x2100dbee
   170c4:	f005a801 	.word	0xf005a801
   170c8:	4601fb57 	.word	0x4601fb57
   170cc:	a804bb30 	.word	0xa804bb30
   170d0:	fb52f005 	.word	0xfb52f005
   170d4:	d17f2800 	.word	0xd17f2800
   170d8:	4641463a 	.word	0x4641463a
   170dc:	f7ff4648 	.word	0xf7ff4648
   170e0:	4604fab5 	.word	0x4604fab5
   170e4:	4639e74d 	.word	0x4639e74d
   170e8:	f0044640 	.word	0xf0044640
   170ec:	4604fe9f 	.word	0x4604fe9f
   170f0:	f47f2800 	.word	0xf47f2800
   170f4:	f107af5b 	.word	0xf107af5b
   170f8:	f108010c 	.word	0xf108010c
   170fc:	f004000c 	.word	0xf004000c
   17100:	4604fe95 	.word	0x4604fe95
   17104:	f47f2800 	.word	0xf47f2800
   17108:	4629af51 	.word	0x4629af51
   1710c:	0018f108 	.word	0x0018f108
   17110:	fe8cf004 	.word	0xfe8cf004
   17114:	e7494604 	.word	0xe7494604
   17118:	e7474c8b 	.word	0xe7474c8b
   1711c:	aa014629 	.word	0xaa014629
   17120:	f005a813 	.word	0xf005a813
   17124:	4604fe15 	.word	0x4604fe15
   17128:	f47f2800 	.word	0xf47f2800
   1712c:	4649af2a 	.word	0x4649af2a
   17130:	f7ffa813 	.word	0xf7ffa813
   17134:	4604fa3f 	.word	0x4604fa3f
   17138:	f47f2800 	.word	0xf47f2800
   1713c:	aa01af22 	.word	0xaa01af22
   17140:	a8074611 	.word	0xa8074611
   17144:	fe04f005 	.word	0xfe04f005
   17148:	28004604 	.word	0x28004604
   1714c:	af19f47f 	.word	0xaf19f47f
   17150:	a8074649 	.word	0xa8074649
   17154:	fa2ef7ff 	.word	0xfa2ef7ff
   17158:	28004604 	.word	0x28004604
   1715c:	af11f47f 	.word	0xaf11f47f
   17160:	a907aa01 	.word	0xa907aa01
   17164:	f005a80a 	.word	0xf005a80a
   17168:	4604fdf3 	.word	0x4604fdf3
   1716c:	f47f2800 	.word	0xf47f2800
   17170:	4649af08 	.word	0x4649af08
   17174:	f7ffa80a 	.word	0xf7ffa80a
   17178:	4604fa1d 	.word	0x4604fa1d
   1717c:	f47f2800 	.word	0xf47f2800
   17180:	a907af00 	.word	0xa907af00
   17184:	4608463a 	.word	0x4608463a
   17188:	fde2f005 	.word	0xfde2f005
   1718c:	28004604 	.word	0x28004604
   17190:	aef7f47f 	.word	0xaef7f47f
   17194:	a8074649 	.word	0xa8074649
   17198:	fa0cf7ff 	.word	0xfa0cf7ff
   1719c:	28004604 	.word	0x28004604
   171a0:	aeeff47f 	.word	0xaeeff47f
   171a4:	a9072202 	.word	0xa9072202
   171a8:	f005a801 	.word	0xf005a801
   171ac:	4604fec9 	.word	0x4604fec9
   171b0:	f47f2800 	.word	0xf47f2800
   171b4:	f109aee6 	.word	0xf109aee6
   171b8:	46290504 	.word	0x46290504
   171bc:	f005a801 	.word	0xf005a801
   171c0:	2800fa73 	.word	0x2800fa73
   171c4:	a901db0d 	.word	0xa901db0d
   171c8:	4608462a 	.word	0x4608462a
   171cc:	fbccf005 	.word	0xfbccf005
   171d0:	28004604 	.word	0x28004604
   171d4:	e6d4d0f1 	.word	0xe6d4d0f1
   171d8:	f7ff4640 	.word	0xf7ff4640
   171dc:	4604fe7d 	.word	0x4604fe7d
   171e0:	aa04e6cf 	.word	0xaa04e6cf
   171e4:	a80d4611 	.word	0xa80d4611
   171e8:	fdb2f005 	.word	0xfdb2f005
   171ec:	28004604 	.word	0x28004604
   171f0:	aec7f47f 	.word	0xaec7f47f
   171f4:	a80d4649 	.word	0xa80d4649
   171f8:	f9dcf7ff 	.word	0xf9dcf7ff
   171fc:	28004604 	.word	0x28004604
   17200:	aebff47f 	.word	0xaebff47f
   17204:	aa01a90d 	.word	0xaa01a90d
   17208:	f0054608 	.word	0xf0054608
   1720c:	4604fce1 	.word	0x4604fce1
   17210:	f47f2800 	.word	0xf47f2800
   17214:	9b0daeb6 	.word	0x9b0daeb6
   17218:	da0d2b00 	.word	0xda0d2b00
   1721c:	a80d2100 	.word	0xa80d2100
   17220:	faaaf005 	.word	0xfaaaf005
   17224:	a90db140 	.word	0xa90db140
   17228:	4608462a 	.word	0x4608462a
   1722c:	fc5cf005 	.word	0xfc5cf005
   17230:	28004604 	.word	0x28004604
   17234:	e6a4d0ef 	.word	0xe6a4d0ef
   17238:	aa0aa90d 	.word	0xaa0aa90d
   1723c:	f0054608 	.word	0xf0054608
   17240:	4604fcc7 	.word	0x4604fcc7
   17244:	f47f2800 	.word	0xf47f2800
   17248:	9b0dae9c 	.word	0x9b0dae9c
   1724c:	da0d2b00 	.word	0xda0d2b00
   17250:	a80d2100 	.word	0xa80d2100
   17254:	fa90f005 	.word	0xfa90f005
   17258:	a90db140 	.word	0xa90db140
   1725c:	4608462a 	.word	0x4608462a
   17260:	fc42f005 	.word	0xfc42f005
   17264:	28004604 	.word	0x28004604
   17268:	e68ad0ef 	.word	0xe68ad0ef
   1726c:	aa0da907 	.word	0xaa0da907
   17270:	f0054608 	.word	0xf0054608
   17274:	4604fcad 	.word	0x4604fcad
   17278:	f47f2800 	.word	0xf47f2800
   1727c:	9b07ae82 	.word	0x9b07ae82
   17280:	da0d2b00 	.word	0xda0d2b00
   17284:	a8072100 	.word	0xa8072100
   17288:	fa76f005 	.word	0xfa76f005
   1728c:	a907b140 	.word	0xa907b140
   17290:	4608462a 	.word	0x4608462a
   17294:	fc28f005 	.word	0xfc28f005
   17298:	28004604 	.word	0x28004604
   1729c:	e670d0ef 	.word	0xe670d0ef
   172a0:	aa04a907 	.word	0xaa04a907
   172a4:	f0054608 	.word	0xf0054608
   172a8:	4604fd53 	.word	0x4604fd53
   172ac:	f47f2800 	.word	0xf47f2800
   172b0:	4649ae68 	.word	0x4649ae68
   172b4:	f7ffa807 	.word	0xf7ffa807
   172b8:	4604f97d 	.word	0x4604f97d
   172bc:	f47f2800 	.word	0xf47f2800
   172c0:	a90aae60 	.word	0xa90aae60
   172c4:	46084632 	.word	0x46084632
   172c8:	fd42f005 	.word	0xfd42f005
   172cc:	28004604 	.word	0x28004604
   172d0:	ae57f47f 	.word	0xae57f47f
   172d4:	a80a4649 	.word	0xa80a4649
   172d8:	f96cf7ff 	.word	0xf96cf7ff
   172dc:	28004604 	.word	0x28004604
   172e0:	ae4ff47f 	.word	0xae4ff47f
   172e4:	a907aa0a 	.word	0xa907aa0a
   172e8:	f005a810 	.word	0xf005a810
   172ec:	4604fc71 	.word	0x4604fc71
   172f0:	f47f2800 	.word	0xf47f2800
   172f4:	9b10ae46 	.word	0x9b10ae46
   172f8:	da0d2b00 	.word	0xda0d2b00
   172fc:	a8102100 	.word	0xa8102100
   17300:	fa3af005 	.word	0xfa3af005
   17304:	a910b140 	.word	0xa910b140
   17308:	4608462a 	.word	0x4608462a
   1730c:	fbecf005 	.word	0xfbecf005
   17310:	28004604 	.word	0x28004604
   17314:	e634d0ef 	.word	0xe634d0ef
   17318:	4640a90d 	.word	0x4640a90d
   1731c:	fd86f004 	.word	0xfd86f004
   17320:	28004604 	.word	0x28004604
   17324:	ae2df47f 	.word	0xae2df47f
   17328:	f108a910 	.word	0xf108a910
   1732c:	f004000c 	.word	0xf004000c
   17330:	4604fd7d 	.word	0x4604fd7d
   17334:	f47f2800 	.word	0xf47f2800
   17338:	f108ae24 	.word	0xf108ae24
   1733c:	a9130018 	.word	0xa9130018
   17340:	fd74f004 	.word	0xfd74f004
   17344:	e61c4604 	.word	0xe61c4604
   17348:	ffffb080 	.word	0xffffb080

0001734c <ecp_mul_comb>:
   1734c:	4ff0e92d 	.word	0x4ff0e92d
   17350:	46984605 	.word	0x46984605
   17354:	034cf105 	.word	0x034cf105
   17358:	b0e5461c 	.word	0xb0e5461c
   1735c:	9104a80d 	.word	0x9104a80d
   17360:	93084617 	.word	0x93084617
   17364:	fcdef004 	.word	0xfcdef004
   17368:	f004a810 	.word	0xf004a810
   1736c:	4620fcdb 	.word	0x4620fcdb
   17370:	f0042100 	.word	0xf0042100
   17374:	2801ff21 	.word	0x2801ff21
   17378:	f0409007 	.word	0xf0409007
   1737c:	6deb81c9 	.word	0x6deb81c9
   17380:	090cf108 	.word	0x090cf108
   17384:	7fc0f5b3 	.word	0x7fc0f5b3
   17388:	2605bf2c 	.word	0x2605bf2c
   1738c:	46482604 	.word	0x46482604
   17390:	0134f105 	.word	0x0134f105
   17394:	f04fbf2c 	.word	0xf04fbf2c
   17398:	f04f0a06 	.word	0xf04f0a06
   1739c:	46b30a05 	.word	0x46b30a05
   173a0:	f982f005 	.word	0xf982f005
   173a4:	d0722800 	.word	0xd0722800
   173a8:	42a66dec 	.word	0x42a66dec
   173ac:	2301d245 	.word	0x2301d245
   173b0:	32fff10b 	.word	0x32fff10b
   173b4:	93024093 	.word	0x93024093
   173b8:	b2db4434 	.word	0xb2db4434
   173bc:	93033c01 	.word	0x93033c01
   173c0:	fbb42300 	.word	0xfbb42300
   173c4:	9802f4f6 	.word	0x9802f4f6
   173c8:	93059206 	.word	0x93059206
   173cc:	f0082124 	.word	0xf0082124
   173d0:	9001f8fd 	.word	0x9001f8fd
   173d4:	d0402800 	.word	0xd0402800
   173d8:	f0044641 	.word	0xf0044641
   173dc:	f8ddfd27 	.word	0xf8ddfd27
   173e0:	4683a004 	.word	0x4683a004
   173e4:	f0002800 	.word	0xf0002800
   173e8:	9b058086 	.word	0x9b058086
   173ec:	d17b2b00 	.word	0xd17b2b00
   173f0:	9c012500 	.word	0x9c012500
   173f4:	35019e03 	.word	0x35019e03
   173f8:	4620b154 	.word	0x4620b154
   173fc:	fc9af004 	.word	0xfc9af004
   17400:	000cf104 	.word	0x000cf104
   17404:	fc96f004 	.word	0xfc96f004
   17408:	0018f104 	.word	0x0018f104
   1740c:	fc92f004 	.word	0xfc92f004
   17410:	429eb2eb 	.word	0x429eb2eb
   17414:	0424f104 	.word	0x0424f104
   17418:	9801d8ed 	.word	0x9801d8ed
   1741c:	f8eaf008 	.word	0xf8eaf008
   17420:	f004a80d 	.word	0xf004a80d
   17424:	a810fc87 	.word	0xa810fc87
   17428:	fc84f004 	.word	0xfc84f004
   1742c:	0f00f1bb 	.word	0x0f00f1bb
   17430:	4658d11b 	.word	0x4658d11b
   17434:	e8bdb065 	.word	0xe8bdb065
   17438:	26028ff0 	.word	0x26028ff0
   1743c:	22012300 	.word	0x22012300
   17440:	21244630 	.word	0x21244630
   17444:	6602e9cd 	.word	0x6602e9cd
   17448:	3205e9cd 	.word	0x3205e9cd
   1744c:	f8bef008 	.word	0xf8bef008
   17450:	08643401 	.word	0x08643401
   17454:	28009001 	.word	0x28009001
   17458:	a80dd1be 	.word	0xa80dd1be
   1745c:	fc6af004 	.word	0xfc6af004
   17460:	f004a810 	.word	0xf004a810
   17464:	f8dffc67 	.word	0xf8dffc67
   17468:	9c04b644 	.word	0x9c04b644
   1746c:	d0e02c00 	.word	0xd0e02c00
   17470:	f0044620 	.word	0xf0044620
   17474:	f104fc5f 	.word	0xf104fc5f
   17478:	f004000c 	.word	0xf004000c
   1747c:	f104fc5b 	.word	0xf104fc5b
   17480:	f0040018 	.word	0xf0040018
   17484:	4658fc57 	.word	0x4658fc57
   17488:	e8bdb065 	.word	0xe8bdb065
   1748c:	f1058ff0 	.word	0xf1058ff0
   17490:	46400128 	.word	0x46400128
   17494:	f908f005 	.word	0xf908f005
   17498:	d1852800 	.word	0xd1852800
   1749c:	459a6deb 	.word	0x459a6deb
   174a0:	82f4f0c0 	.word	0x82f4f0c0
   174a4:	1c5c2602 	.word	0x1c5c2602
   174a8:	e9cd2301 	.word	0xe9cd2301
   174ac:	08646602 	.word	0x08646602
   174b0:	6f6b9306 	.word	0x6f6b9306
   174b4:	2b009301 	.word	0x2b009301
   174b8:	80eaf000 	.word	0x80eaf000
   174bc:	46382100 	.word	0x46382100
   174c0:	fe7af004 	.word	0xfe7af004
   174c4:	46804639 	.word	0x46804639
   174c8:	f004a80d 	.word	0xf004a80d
   174cc:	4683fcaf 	.word	0x4683fcaf
   174d0:	463ab950 	.word	0x463ab950
   174d4:	a8109908 	.word	0xa8109908
   174d8:	fb7af005 	.word	0xfb7af005
   174dc:	28004683 	.word	0x28004683
   174e0:	9b07d036 	.word	0x9b07d036
   174e4:	d0832b00 	.word	0xd0832b00
   174e8:	f004a80d 	.word	0xf004a80d
   174ec:	a810fc23 	.word	0xa810fc23
   174f0:	fc20f004 	.word	0xfc20f004
   174f4:	4649e7b9 	.word	0x4649e7b9
   174f8:	000cf10a 	.word	0x000cf10a
   174fc:	fc96f004 	.word	0xfc96f004
   17500:	28004683 	.word	0x28004683
   17504:	af71f47f 	.word	0xaf71f47f
   17508:	f1089b01 	.word	0xf1089b01
   1750c:	f1030118 	.word	0xf1030118
   17510:	f0040018 	.word	0xf0040018
   17514:	4683fc8b 	.word	0x4683fc8b
   17518:	f47f2800 	.word	0xf47f2800
   1751c:	462aaf66 	.word	0x462aaf66
   17520:	0901f04f 	.word	0x0901f04f
   17524:	46254651 	.word	0x46254651
   17528:	464c4682 	.word	0x464c4682
   1752c:	96094690 	.word	0x96094690
   17530:	9e06970a 	.word	0x9e06970a
   17534:	eb049f01 	.word	0xeb049f01
   17538:	eb0704c4 	.word	0xeb0704c4
   1753c:	46200484 	.word	0x46200484
   17540:	fc74f004 	.word	0xfc74f004
   17544:	f0002800 	.word	0xf0002800
   17548:	468380a7 	.word	0x468380a7
   1754c:	e74d9b05 	.word	0xe74d9b05
   17550:	33fff118 	.word	0x33fff118
   17554:	2301bf18 	.word	0x2301bf18
   17558:	461aa910 	.word	0x461aa910
   1755c:	9302a80d 	.word	0x9302a80d
   17560:	fd92f004 	.word	0xfd92f004
   17564:	28004683 	.word	0x28004683
   17568:	a822d1bb 	.word	0xa822d1bb
   1756c:	46591c62 	.word	0x46591c62
   17570:	f9d3f00d 	.word	0xf9d3f00d
   17574:	f10db3d4 	.word	0xf10db3d4
   17578:	46d80988 	.word	0x46d80988
   1757c:	46c246cb 	.word	0x46c246cb
   17580:	46512700 	.word	0x46512700
   17584:	f004a80d 	.word	0xf004a80d
   17588:	f89bfe17 	.word	0xf89bfe17
   1758c:	40b83000 	.word	0x40b83000
   17590:	43033701 	.word	0x43033701
   17594:	44a242b7 	.word	0x44a242b7
   17598:	3000f88b 	.word	0x3000f88b
   1759c:	f108d1f1 	.word	0xf108d1f1
   175a0:	45a00801 	.word	0x45a00801
   175a4:	0b01f10b 	.word	0x0b01f10b
   175a8:	2300d1e9 	.word	0x2300d1e9
   175ac:	0c01f04f 	.word	0x0c01f04f
   175b0:	1088f89d 	.word	0x1088f89d
   175b4:	6f01f819 	.word	0x6f01f819
   175b8:	0c01f10c 	.word	0x0c01f10c
   175bc:	0203ea86 	.word	0x0203ea86
   175c0:	f00043d0 	.word	0xf00043d0
   175c4:	fb000001 	.word	0xfb000001
   175c8:	b252f701 	.word	0xb252f701
   175cc:	4033b27f 	.word	0x4033b27f
   175d0:	0607ea02 	.word	0x0607ea02
   175d4:	ea41407a 	.word	0xea41407a
   175d8:	433310c0 	.word	0x433310c0
   175dc:	45e0b2d1 	.word	0x45e0b2d1
   175e0:	0c01f809 	.word	0x0c01f809
   175e4:	f889b2db 	.word	0xf889b2db
   175e8:	d2e31000 	.word	0xd2e31000
   175ec:	a8192600 	.word	0xa8192600
   175f0:	fb98f004 	.word	0xfb98f004
   175f4:	f004a81c 	.word	0xf004a81c
   175f8:	a81ffb95 	.word	0xa81ffb95
   175fc:	fb92f004 	.word	0xfb92f004
   17600:	f813ab22 	.word	0xf813ab22
   17604:	44239004 	.word	0x44239004
   17608:	9b049306 	.word	0x9b049306
   1760c:	469b4632 	.word	0x469b4632
   17610:	95059f01 	.word	0x95059f01
   17614:	9f03463d 	.word	0x9f03463d
   17618:	0845f3c9 	.word	0x0845f3c9
   1761c:	0a0cf103 	.word	0x0a0cf103
   17620:	0408eba2 	.word	0x0408eba2
   17624:	f484fab4 	.word	0xf484fab4
   17628:	46290964 	.word	0x46290964
   1762c:	46584622 	.word	0x46584622
   17630:	fd2af004 	.word	0xfd2af004
   17634:	f1053601 	.word	0xf1053601
   17638:	3524010c 	.word	0x3524010c
   1763c:	d16a2800 	.word	0xd16a2800
   17640:	46504622 	.word	0x46504622
   17644:	fd20f004 	.word	0xfd20f004
   17648:	2800b2f2 	.word	0x2800b2f2
   1764c:	42bad163 	.word	0x42bad163
   17650:	9d05d3e6 	.word	0x9d05d3e6
   17654:	1d2ba816 	.word	0x1d2ba816
   17658:	9308461c 	.word	0x9308461c
   1765c:	fb62f004 	.word	0xfb62f004
   17660:	4621a816 	.word	0x4621a816
   17664:	f0054652 	.word	0xf0054652
   17668:	4683fab3 	.word	0x4683fab3
   1766c:	f0002800 	.word	0xf0002800
   17670:	a81680c3 	.word	0xa81680c3
   17674:	fb5ef004 	.word	0xfb5ef004
   17678:	f004a819 	.word	0xf004a819
   1767c:	a81cfb5b 	.word	0xa81cfb5b
   17680:	fb58f004 	.word	0xfb58f004
   17684:	f004a81f 	.word	0xf004a81f
   17688:	9b07fb55 	.word	0x9b07fb55
   1768c:	e6ac9305 	.word	0xe6ac9305
   17690:	98022301 	.word	0x98022301
   17694:	e6999305 	.word	0xe6999305
   17698:	0b59ea4f 	.word	0x0b59ea4f
   1769c:	0bcbeb0b 	.word	0x0bcbeb0b
   176a0:	0b8beb07 	.word	0x0b8beb07
   176a4:	010cf10b 	.word	0x010cf10b
   176a8:	000cf104 	.word	0x000cf104
   176ac:	fbbef004 	.word	0xfbbef004
   176b0:	f47f2800 	.word	0xf47f2800
   176b4:	f10baf4a 	.word	0xf10baf4a
   176b8:	f1040118 	.word	0xf1040118
   176bc:	f0040018 	.word	0xf0040018
   176c0:	2800fbb5 	.word	0x2800fbb5
   176c4:	af41f47f 	.word	0xaf41f47f
   176c8:	4683b165 	.word	0x4683b165
   176cc:	46214622 	.word	0x46214622
   176d0:	f7fe4640 	.word	0xf7fe4640
   176d4:	f10bffbb 	.word	0xf10bffbb
   176d8:	28000b01 	.word	0x28000b01
   176dc:	af35f47f 	.word	0xaf35f47f
   176e0:	d1f345ab 	.word	0xd1f345ab
   176e4:	0949ea4f 	.word	0x0949ea4f
   176e8:	f989fa5f 	.word	0xf989fa5f
   176ec:	0301f10a 	.word	0x0301f10a
   176f0:	f842aa22 	.word	0xf842aa22
   176f4:	fa5f402a 	.word	0xfa5f402a
   176f8:	fa39fa83 	.word	0xfa39fa83
   176fc:	464cf306 	.word	0x464cf306
   17700:	ea4fd10b 	.word	0xea4fd10b
   17704:	eb010159 	.word	0xeb010159
   17708:	eb0701c1 	.word	0xeb0701c1
   1770c:	e7120181 	.word	0xe7120181
   17710:	b39cf8df 	.word	0xb39cf8df
   17714:	4683e68d 	.word	0x4683e68d
   17718:	4652e7ae 	.word	0x4652e7ae
   1771c:	462c2a01 	.word	0x462c2a01
   17720:	46459e09 	.word	0x46459e09
   17724:	d9619f0a 	.word	0xd9619f0a
   17728:	4640a922 	.word	0x4640a922
   1772c:	fa46f7ff 	.word	0xfa46f7ff
   17730:	f1bb4683 	.word	0xf1bb4683
   17734:	f47f0f00 	.word	0xf47f0f00
   17738:	2301ae58 	.word	0x2301ae58
   1773c:	46da9a01 	.word	0x46da9a01
   17740:	970b3a24 	.word	0x970b3a24
   17744:	461f4693 	.word	0x461f4693
   17748:	4609e9cd 	.word	0x4609e9cd
   1774c:	eb03b303 	.word	0xeb03b303
   17750:	ea4f03c3 	.word	0xea4f03c3
   17754:	9b010883 	.word	0x9b010883
   17758:	0424f1a8 	.word	0x0424f1a8
   1775c:	eb03441c 	.word	0xeb03441c
   17760:	e0050908 	.word	0xe0050908
   17764:	45a3aa22 	.word	0x45a3aa22
   17768:	602af842 	.word	0x602af842
   1776c:	d00f469a 	.word	0xd00f469a
   17770:	0604eb08 	.word	0x0604eb08
   17774:	4622464b 	.word	0x4622464b
   17778:	46284631 	.word	0x46284631
   1777c:	fbc2f7ff 	.word	0xfbc2f7ff
   17780:	0301f10a 	.word	0x0301f10a
   17784:	b2db3c24 	.word	0xb2db3c24
   17788:	d0eb2800 	.word	0xd0eb2800
   1778c:	e6dd4683 	.word	0xe6dd4683
   17790:	9a06007b 	.word	0x9a06007b
   17794:	fa37b2df 	.word	0xfa37b2df
   17798:	463bf202 	.word	0x463bf202
   1779c:	f1bad0d6 	.word	0xf1bad0d6
   177a0:	e9dd0f01 	.word	0xe9dd0f01
   177a4:	9f0b4609 	.word	0x9f0b4609
   177a8:	8167f240 	.word	0x8167f240
   177ac:	a9224652 	.word	0xa9224652
   177b0:	f7ff4628 	.word	0xf7ff4628
   177b4:	4683fa03 	.word	0x4683fa03
   177b8:	f1bb9b05 	.word	0xf1bb9b05
   177bc:	f47f0f00 	.word	0xf47f0f00
   177c0:	b123ae15 	.word	0xb123ae15
   177c4:	676b9b01 	.word	0x676b9b01
   177c8:	67ab9b02 	.word	0x67ab9b02
   177cc:	4619e676 	.word	0x4619e676
   177d0:	f0044638 	.word	0xf0044638
   177d4:	4639fcf1 	.word	0x4639fcf1
   177d8:	a80d4680 	.word	0xa80d4680
   177dc:	fb26f004 	.word	0xfb26f004
   177e0:	28004683 	.word	0x28004683
   177e4:	ae04f47f 	.word	0xae04f47f
   177e8:	e6729007 	.word	0xe6729007
   177ec:	46289922 	.word	0x46289922
   177f0:	f97cf7ff 	.word	0xf97cf7ff
   177f4:	e79c4683 	.word	0xe79c4683
   177f8:	46504601 	.word	0x46504601
   177fc:	ffbcf004 	.word	0xffbcf004
   17800:	bf181c02 	.word	0xbf181c02
   17804:	a9162201 	.word	0xa9162201
   17808:	12d9ea02 	.word	0x12d9ea02
   1780c:	f0044650 	.word	0xf0044650
   17810:	4683fc3b 	.word	0x4683fc3b
   17814:	f004a816 	.word	0xf004a816
   17818:	f1bbfa8d 	.word	0xf1bbfa8d
   1781c:	f47f0f00 	.word	0xf47f0f00
   17820:	9b04af2b 	.word	0x9b04af2b
   17824:	f1032101 	.word	0xf1032101
   17828:	46200418 	.word	0x46200418
   1782c:	fc8af004 	.word	0xfc8af004
   17830:	28004683 	.word	0x28004683
   17834:	af20f47f 	.word	0xaf20f47f
   17838:	2b009b6e 	.word	0x2b009b6e
   1783c:	8082f000 	.word	0x8082f000
   17840:	6dab260c 	.word	0x6dab260c
   17844:	3307a813 	.word	0x3307a813
   17848:	f00408df 	.word	0xf00408df
   1784c:	a816fa6b 	.word	0xa816fa6b
   17850:	fa68f004 	.word	0xfa68f004
   17854:	8020f8dd 	.word	0x8020f8dd
   17858:	9a6e9b6f 	.word	0x9a6e9b6f
   1785c:	a8134639 	.word	0xa8134639
   17860:	f9e2f006 	.word	0xf9e2f006
   17864:	2101e006 	.word	0x2101e006
   17868:	f004a813 	.word	0xf004a813
   1786c:	2800fead 	.word	0x2800fead
   17870:	80c8f040 	.word	0x80c8f040
   17874:	a8134641 	.word	0xa8134641
   17878:	ff16f004 	.word	0xff16f004
   1787c:	daf22800 	.word	0xdaf22800
   17880:	f0003e01 	.word	0xf0003e01
   17884:	21018100 	.word	0x21018100
   17888:	f004a813 	.word	0xf004a813
   1788c:	2800ff75 	.word	0x2800ff75
   17890:	aa13dde2 	.word	0xaa13dde2
   17894:	46204621 	.word	0x46204621
   17898:	fa5af005 	.word	0xfa5af005
   1789c:	b1304683 	.word	0xb1304683
   178a0:	f004a813 	.word	0xf004a813
   178a4:	a816fa47 	.word	0xa816fa47
   178a8:	fa44f004 	.word	0xfa44f004
   178ac:	4620e6e4 	.word	0x4620e6e4
   178b0:	f7fe4629 	.word	0xf7fe4629
   178b4:	4683fe7f 	.word	0x4683fe7f
   178b8:	d1f12800 	.word	0xd1f12800
   178bc:	4611aa13 	.word	0x4611aa13
   178c0:	f005a816 	.word	0xf005a816
   178c4:	4683fa45 	.word	0x4683fa45
   178c8:	d1e92800 	.word	0xd1e92800
   178cc:	a8164629 	.word	0xa8164629
   178d0:	fe70f7fe 	.word	0xfe70f7fe
   178d4:	28004683 	.word	0x28004683
   178d8:	9804d1e2 	.word	0x9804d1e2
   178dc:	4601aa16 	.word	0x4601aa16
   178e0:	fa36f005 	.word	0xfa36f005
   178e4:	28004683 	.word	0x28004683
   178e8:	4629d1da 	.word	0x4629d1da
   178ec:	f7fe9804 	.word	0xf7fe9804
   178f0:	4683fe61 	.word	0x4683fe61
   178f4:	d1d32800 	.word	0xd1d32800
   178f8:	aa13a916 	.word	0xaa13a916
   178fc:	f0054608 	.word	0xf0054608
   17900:	4683fa27 	.word	0x4683fa27
   17904:	d1cb2800 	.word	0xd1cb2800
   17908:	a8164629 	.word	0xa8164629
   1790c:	fe52f7fe 	.word	0xfe52f7fe
   17910:	28004683 	.word	0x28004683
   17914:	aa16d1c4 	.word	0xaa16d1c4
   17918:	46504651 	.word	0x46504651
   1791c:	fa18f005 	.word	0xfa18f005
   17920:	28004683 	.word	0x28004683
   17924:	4629d1bc 	.word	0x4629d1bc
   17928:	f7fe4650 	.word	0xf7fe4650
   1792c:	4683fe43 	.word	0x4683fe43
   17930:	f004a813 	.word	0xf004a813
   17934:	a816f9ff 	.word	0xa816f9ff
   17938:	f9fcf004 	.word	0xf9fcf004
   1793c:	0f00f1bb 	.word	0x0f00f1bb
   17940:	ae9af47f 	.word	0xae9af47f
   17944:	f8dd46ab 	.word	0xf8dd46ab
   17948:	f8dd8018 	.word	0xf8dd8018
   1794c:	f8cd900c 	.word	0xf8cd900c
   17950:	f8dda018 	.word	0xf8dda018
   17954:	ab22a010 	.word	0xab22a010
   17958:	d0554543 	.word	0xd0554543
   1795c:	46514652 	.word	0x46514652
   17960:	f7fe4658 	.word	0xf7fe4658
   17964:	4602fe73 	.word	0x4602fe73
   17968:	d1492800 	.word	0xd1492800
   1796c:	46044606 	.word	0x46044606
   17970:	3d01f818 	.word	0x3d01f818
   17974:	93059d01 	.word	0x93059d01
   17978:	0745f3c3 	.word	0x0745f3c3
   1797c:	fab41be4 	.word	0xfab41be4
   17980:	0964f484 	.word	0x0964f484
   17984:	46224629 	.word	0x46224629
   17988:	f004a819 	.word	0xf004a819
   1798c:	3601fb7d 	.word	0x3601fb7d
   17990:	010cf105 	.word	0x010cf105
   17994:	28003524 	.word	0x28003524
   17998:	aebdf47f 	.word	0xaebdf47f
   1799c:	a81c4622 	.word	0xa81c4622
   179a0:	fb72f004 	.word	0xfb72f004
   179a4:	2800b2f4 	.word	0x2800b2f4
   179a8:	aeb5f47f 	.word	0xaeb5f47f
   179ac:	d8e545a1 	.word	0xd8e545a1
   179b0:	f004a816 	.word	0xf004a816
   179b4:	aa1cf9b7 	.word	0xaa1cf9b7
   179b8:	a8169908 	.word	0xa8169908
   179bc:	f908f005 	.word	0xf908f005
   179c0:	4683b108 	.word	0x4683b108
   179c4:	4601e655 	.word	0x4601e655
   179c8:	f004a81c 	.word	0xf004a81c
   179cc:	1c02fed5 	.word	0x1c02fed5
   179d0:	2201bf18 	.word	0x2201bf18
   179d4:	a9169b05 	.word	0xa9169b05
   179d8:	12d3ea02 	.word	0x12d3ea02
   179dc:	f004a81c 	.word	0xf004a81c
   179e0:	9005fb53 	.word	0x9005fb53
   179e4:	f004a816 	.word	0xf004a816
   179e8:	9a05f9a5 	.word	0x9a05f9a5
   179ec:	4652b942 	.word	0x4652b942
   179f0:	4651ab19 	.word	0x4651ab19
   179f4:	f7ff4658 	.word	0xf7ff4658
   179f8:	4602fa85 	.word	0x4602fa85
   179fc:	d0aa2800 	.word	0xd0aa2800
   17a00:	e6394693 	.word	0xe6394693
   17a04:	e74b4683 	.word	0xe74b4683
   17a08:	f8dda819 	.word	0xf8dda819
   17a0c:	f004a018 	.word	0xf004a018
   17a10:	a81cf991 	.word	0xa81cf991
   17a14:	f98ef004 	.word	0xf98ef004
   17a18:	f004a81f 	.word	0xf004a81f
   17a1c:	a819f98b 	.word	0xa819f98b
   17a20:	f980f004 	.word	0xf980f004
   17a24:	99084652 	.word	0x99084652
   17a28:	f005a819 	.word	0xf005a819
   17a2c:	465df8d1 	.word	0x465df8d1
   17a30:	b1184683 	.word	0xb1184683
   17a34:	f004a819 	.word	0xf004a819
   17a38:	e552f97d 	.word	0xe552f97d
   17a3c:	46504659 	.word	0x46504659
   17a40:	fe9af004 	.word	0xfe9af004
   17a44:	a9199b02 	.word	0xa9199b02
   17a48:	bf082800 	.word	0xbf082800
   17a4c:	46502300 	.word	0x46502300
   17a50:	f004461a 	.word	0xf004461a
   17a54:	4683fb19 	.word	0x4683fb19
   17a58:	f004a819 	.word	0xf004a819
   17a5c:	f1bbf96b 	.word	0xf1bbf96b
   17a60:	f47f0f00 	.word	0xf47f0f00
   17a64:	4628ad3e 	.word	0x4628ad3e
   17a68:	f7ff9904 	.word	0xf7ff9904
   17a6c:	9b07f83f 	.word	0x9b07f83f
   17a70:	2b004683 	.word	0x2b004683
   17a74:	acd4f47f 	.word	0xacd4f47f
   17a78:	9922e4ba 	.word	0x9922e4ba
   17a7c:	f7ff4628 	.word	0xf7ff4628
   17a80:	4683f835 	.word	0x4683f835
   17a84:	f8dfe698 	.word	0xf8dfe698
   17a88:	e5f5b02c 	.word	0xe5f5b02c
   17a8c:	f10a2201 	.word	0xf10a2201
   17a90:	eb0a31ff 	.word	0xeb0a31ff
   17a94:	fa020403 	.word	0xfa020403
   17a98:	3c01f301 	.word	0x3c01f301
   17a9c:	b2db9302 	.word	0xb2db9302
   17aa0:	fbb49106 	.word	0xfbb49106
   17aa4:	4656f4fa 	.word	0x4656f4fa
   17aa8:	e5029303 	.word	0xe5029303
   17aac:	ffffb280 	.word	0xffffb280
   17ab0:	ffffb080 	.word	0xffffb080
   17ab4:	ffffb300 	.word	0xffffb300

00017ab8 <symbol_000637b>:
   17ab8:	43f8e92d 	.word	0x43f8e92d
   17abc:	e9dd2a01 	.word	0xe9dd2a01
   17ac0:	d8437808 	.word	0xd8437808
   17ac4:	4681460d 	.word	0x4681460d
   17ac8:	f1052100 	.word	0xf1052100
   17acc:	461e0018 	.word	0x461e0018
   17ad0:	f0044614 	.word	0xf0044614
   17ad4:	b938fe51 	.word	0xb938fe51
   17ad8:	0f00f1b8 	.word	0x0f00f1b8
   17adc:	2301d038 	.word	0x2301d038
   17ae0:	60337038 	.word	0x60337038
   17ae4:	83f8e8bd 	.word	0x83f8e8bd
   17ae8:	0004f109 	.word	0x0004f109
   17aec:	fba2f004 	.word	0xfba2f004
   17af0:	b9c44681 	.word	0xb9c44681
   17af4:	33010043 	.word	0x33010043
   17af8:	60334598 	.word	0x60334598
   17afc:	2304d328 	.word	0x2304d328
   17b00:	46024639 	.word	0x46024639
   17b04:	3b01f801 	.word	0x3b01f801
   17b08:	f0044628 	.word	0xf0044628
   17b0c:	2800fc55 	.word	0x2800fc55
   17b10:	f109d1e8 	.word	0xf109d1e8
   17b14:	f1050101 	.word	0xf1050101
   17b18:	4439000c 	.word	0x4439000c
   17b1c:	e8bd464a 	.word	0xe8bd464a
   17b20:	f00443f8 	.word	0xf00443f8
   17b24:	1c43bc49 	.word	0x1c43bc49
   17b28:	60334598 	.word	0x60334598
   17b2c:	2100d310 	.word	0x2100d310
   17b30:	000cf105 	.word	0x000cf105
   17b34:	fb40f004 	.word	0xfb40f004
   17b38:	30024639 	.word	0x30024639
   17b3c:	0b01f801 	.word	0x0b01f801
   17b40:	4628464a 	.word	0x4628464a
   17b44:	43f8e8bd 	.word	0x43f8e8bd
   17b48:	bc36f004 	.word	0xbc36f004
   17b4c:	e7c94801 	.word	0xe7c94801
   17b50:	e7c74801 	.word	0xe7c74801
   17b54:	ffffb080 	.word	0xffffb080
   17b58:	ffffb100 	.word	0xffffb100

00017b5c <symbol_0007a22>:
   17b5c:	d0412b00 	.word	0xd0412b00
   17b60:	461eb5f8 	.word	0x461eb5f8
   17b64:	46147813 	.word	0x46147813
   17b68:	b9ab460d 	.word	0xb9ab460d
   17b6c:	d1352e01 	.word	0xd1352e01
   17b70:	46284631 	.word	0x46284631
   17b74:	fae6f004 	.word	0xfae6f004
   17b78:	bdf8b100 	.word	0xbdf8b100
   17b7c:	f1054631 	.word	0xf1054631
   17b80:	f004000c 	.word	0xf004000c
   17b84:	2800fadf 	.word	0x2800fadf
   17b88:	4601d1f7 	.word	0x4601d1f7
   17b8c:	0018f105 	.word	0x0018f105
   17b90:	40f8e8bd 	.word	0x40f8e8bd
   17b94:	bad6f004 	.word	0xbad6f004
   17b98:	f0043004 	.word	0xf0043004
   17b9c:	7823fb4b 	.word	0x7823fb4b
   17ba0:	2b044607 	.word	0x2b044607
   17ba4:	0043d11c 	.word	0x0043d11c
   17ba8:	429e3301 	.word	0x429e3301
   17bac:	4602d116 	.word	0x4602d116
   17bb0:	46281c61 	.word	0x46281c61
   17bb4:	fb6ef004 	.word	0xfb6ef004
   17bb8:	d1de2800 	.word	0xd1de2800
   17bbc:	44211c79 	.word	0x44211c79
   17bc0:	f105463a 	.word	0xf105463a
   17bc4:	f004000c 	.word	0xf004000c
   17bc8:	2800fb65 	.word	0x2800fb65
   17bcc:	f105d1d5 	.word	0xf105d1d5
   17bd0:	21010018 	.word	0x21010018
   17bd4:	40f8e8bd 	.word	0x40f8e8bd
   17bd8:	bab4f004 	.word	0xbab4f004
   17bdc:	bdf84802 	.word	0xbdf84802
   17be0:	bdf84802 	.word	0xbdf84802
   17be4:	47704800 	.word	0x47704800
   17be8:	ffffb080 	.word	0xffffb080
   17bec:	ffffb180 	.word	0xffffb180

00017bf0 <symbol_000e8bc>:
   17bf0:	41f0e92d 	.word	0x41f0e92d
   17bf4:	b086460c 	.word	0xb086460c
   17bf8:	21014605 	.word	0x21014605
   17bfc:	0018f104 	.word	0x0018f104
   17c00:	fdbaf004 	.word	0xfdbaf004
   17c04:	f0402800 	.word	0xf0402800
   17c08:	6b2b809f 	.word	0x6b2b809f
   17c0c:	f0002b00 	.word	0xf0002b00
   17c10:	6beb80a0 	.word	0x6beb80a0
   17c14:	f0002b00 	.word	0xf0002b00
   17c18:	4601809c 	.word	0x4601809c
   17c1c:	46204606 	.word	0x46204606
   17c20:	fdaaf004 	.word	0xfdaaf004
   17c24:	f2c02800 	.word	0xf2c02800
   17c28:	f104808f 	.word	0xf104808f
   17c2c:	4631070c 	.word	0x4631070c
   17c30:	f0044638 	.word	0xf0044638
   17c34:	2800fda1 	.word	0x2800fda1
   17c38:	8086f2c0 	.word	0x8086f2c0
   17c3c:	0804f105 	.word	0x0804f105
   17c40:	46204641 	.word	0x46204641
   17c44:	fd30f004 	.word	0xfd30f004
   17c48:	da7d2800 	.word	0xda7d2800
   17c4c:	46384641 	.word	0x46384641
   17c50:	fd2af004 	.word	0xfd2af004
   17c54:	da772800 	.word	0xda772800
   17c58:	f0044668 	.word	0xf0044668
   17c5c:	a803f863 	.word	0xa803f863
   17c60:	f860f004 	.word	0xf860f004
   17c64:	4639463a 	.word	0x4639463a
   17c68:	f0054668 	.word	0xf0054668
   17c6c:	4606f871 	.word	0x4606f871
   17c70:	4668b148 	.word	0x4668b148
   17c74:	f85ef004 	.word	0xf85ef004
   17c78:	f004a803 	.word	0xf004a803
   17c7c:	4630f85b 	.word	0x4630f85b
   17c80:	e8bdb006 	.word	0xe8bdb006
   17c84:	462981f0 	.word	0x462981f0
   17c88:	f7fe4668 	.word	0xf7fe4668
   17c8c:	4606fc93 	.word	0x4606fc93
   17c90:	d1ee2800 	.word	0xd1ee2800
   17c94:	46214622 	.word	0x46214622
   17c98:	f005a803 	.word	0xf005a803
   17c9c:	4606f859 	.word	0x4606f859
   17ca0:	d1e62800 	.word	0xd1e62800
   17ca4:	a8034629 	.word	0xa8034629
   17ca8:	fc84f7fe 	.word	0xfc84f7fe
   17cac:	28004606 	.word	0x28004606
   17cb0:	69abd1df 	.word	0x69abd1df
   17cb4:	d04e2b00 	.word	0xd04e2b00
   17cb8:	f105a903 	.word	0xf105a903
   17cbc:	46080210 	.word	0x46080210
   17cc0:	ff12f004 	.word	0xff12f004
   17cc4:	28004606 	.word	0x28004606
   17cc8:	e007d1d3 	.word	0xe007d1d3
   17ccc:	4642a903 	.word	0x4642a903
   17cd0:	f0044608 	.word	0xf0044608
   17cd4:	4606fe49 	.word	0x4606fe49
   17cd8:	d1ca2800 	.word	0xd1ca2800
   17cdc:	a8034641 	.word	0xa8034641
   17ce0:	fce2f004 	.word	0xfce2f004
   17ce4:	daf12800 	.word	0xdaf12800
   17ce8:	4622a903 	.word	0x4622a903
   17cec:	f0054608 	.word	0xf0054608
   17cf0:	4606f82f 	.word	0x4606f82f
   17cf4:	d1bc2800 	.word	0xd1bc2800
   17cf8:	a8034629 	.word	0xa8034629
   17cfc:	fc5af7fe 	.word	0xfc5af7fe
   17d00:	28004606 	.word	0x28004606
   17d04:	a903d1b5 	.word	0xa903d1b5
   17d08:	021cf105 	.word	0x021cf105
   17d0c:	f0044608 	.word	0xf0044608
   17d10:	4606feeb 	.word	0x4606feeb
   17d14:	d1ac2800 	.word	0xd1ac2800
   17d18:	a903e007 	.word	0xa903e007
   17d1c:	46084642 	.word	0x46084642
   17d20:	fe22f004 	.word	0xfe22f004
   17d24:	28004606 	.word	0x28004606
   17d28:	4641d1a3 	.word	0x4641d1a3
   17d2c:	f004a803 	.word	0xf004a803
   17d30:	2800fcbb 	.word	0x2800fcbb
   17d34:	a903daf1 	.word	0xa903daf1
   17d38:	f0044668 	.word	0xf0044668
   17d3c:	4e14fcb5 	.word	0x4e14fcb5
   17d40:	bf082800 	.word	0xbf082800
   17d44:	e7942600 	.word	0xe7942600
   17d48:	46304e11 	.word	0x46304e11
   17d4c:	e8bdb006 	.word	0xe8bdb006
   17d50:	4e1081f0 	.word	0x4e1081f0
   17d54:	a903e793 	.word	0xa903e793
   17d58:	46082203 	.word	0x46082203
   17d5c:	ffacf004 	.word	0xffacf004
   17d60:	28004606 	.word	0x28004606
   17d64:	e00ed185 	.word	0xe00ed185
   17d68:	a8032100 	.word	0xa8032100
   17d6c:	fd04f004 	.word	0xfd04f004
   17d70:	d0b92800 	.word	0xd0b92800
   17d74:	4642a903 	.word	0x4642a903
   17d78:	f0044608 	.word	0xf0044608
   17d7c:	4606feb5 	.word	0x4606feb5
   17d80:	f47f2800 	.word	0xf47f2800
   17d84:	9b03af76 	.word	0x9b03af76
   17d88:	dbed2b00 	.word	0xdbed2b00
   17d8c:	bf00e7ac 	.word	0xbf00e7ac
   17d90:	ffffb380 	.word	0xffffb380
   17d94:	ffffb080 	.word	0xffffb080

00017d98 <symbol_0001f66>:
   17d98:	43f0e92d 	.word	0x43f0e92d
   17d9c:	b0ab7803 	.word	0xb0ab7803
   17da0:	f0002b00 	.word	0xf0002b00
   17da4:	780a80c4 	.word	0x780a80c4
   17da8:	f040429a 	.word	0xf040429a
   17dac:	f10180c0 	.word	0xf10180c0
   17db0:	460c0788 	.word	0x460c0788
   17db4:	46394605 	.word	0x46394605
   17db8:	f0043088 	.word	0xf0043088
   17dbc:	2800fc75 	.word	0x2800fc75
   17dc0:	80b5f040 	.word	0x80b5f040
   17dc4:	0994f104 	.word	0x0994f104
   17dc8:	f1054649 	.word	0xf1054649
   17dcc:	f0040094 	.word	0xf0040094
   17dd0:	2800fc6b 	.word	0x2800fc6b
   17dd4:	80abf040 	.word	0x80abf040
   17dd8:	08a0f104 	.word	0x08a0f104
   17ddc:	00a0f105 	.word	0x00a0f105
   17de0:	f0044641 	.word	0xf0044641
   17de4:	4606fc61 	.word	0x4606fc61
   17de8:	f0402800 	.word	0xf0402800
   17dec:	462580a0 	.word	0x462580a0
   17df0:	f003a802 	.word	0xf003a802
   17df4:	a805ff97 	.word	0xa805ff97
   17df8:	ff94f003 	.word	0xff94f003
   17dfc:	f003a808 	.word	0xf003a808
   17e00:	4631ff91 	.word	0x4631ff91
   17e04:	a80b227c 	.word	0xa80b227c
   17e08:	fd87f00c 	.word	0xfd87f00c
   17e0c:	1b7cf815 	.word	0x1b7cf815
   17e10:	f7fda80b 	.word	0xf7fda80b
   17e14:	f104fbd5 	.word	0xf104fbd5
   17e18:	21010040 	.word	0x21010040
   17e1c:	f0043428 	.word	0xf0043428
   17e20:	2800fcab 	.word	0x2800fcab
   17e24:	8081f040 	.word	0x8081f040
   17e28:	2b009b17 	.word	0x2b009b17
   17e2c:	9b1ad07d 	.word	0x9b1ad07d
   17e30:	d07a2b00 	.word	0xd07a2b00
   17e34:	46282101 	.word	0x46282101
   17e38:	fc9ef004 	.word	0xfc9ef004
   17e3c:	f2c02800 	.word	0xf2c02800
   17e40:	a91e8083 	.word	0xa91e8083
   17e44:	f0044628 	.word	0xf0044628
   17e48:	2800fc2f 	.word	0x2800fc2f
   17e4c:	4621da7c 	.word	0x4621da7c
   17e50:	f7ffa80b 	.word	0xf7ffa80b
   17e54:	4606fecd 	.word	0x4606fecd
   17e58:	9b17b980 	.word	0x9b17b980
   17e5c:	d0642b00 	.word	0xd0642b00
   17e60:	2b009b1a 	.word	0x2b009b1a
   17e64:	e9cdd061 	.word	0xe9cdd061
   17e68:	46230000 	.word	0x46230000
   17e6c:	a902462a 	.word	0xa902462a
   17e70:	f7ffa80b 	.word	0xf7ffa80b
   17e74:	4606fa6b 	.word	0x4606fa6b
   17e78:	d04c2800 	.word	0xd04c2800
   17e7c:	f003a802 	.word	0xf003a802
   17e80:	a805ff59 	.word	0xa805ff59
   17e84:	ff56f003 	.word	0xff56f003
   17e88:	f003a808 	.word	0xf003a808
   17e8c:	9b23ff53 	.word	0x9b23ff53
   17e90:	d1262b01 	.word	0xd1262b01
   17e94:	b1c89828 	.word	0xb1c89828
   17e98:	b1aa9a29 	.word	0xb1aa9a29
   17e9c:	eb052500 	.word	0xeb052500
   17ea0:	eb1003c5 	.word	0xeb1003c5
   17ea4:	d0320483 	.word	0xd0320483
   17ea8:	f0034620 	.word	0xf0034620
   17eac:	f104ff43 	.word	0xf104ff43
   17eb0:	f003000c 	.word	0xf003000c
   17eb4:	f104ff3f 	.word	0xf104ff3f
   17eb8:	f0030018 	.word	0xf0030018
   17ebc:	9a29ff3b 	.word	0x9a29ff3b
   17ec0:	42953501 	.word	0x42953501
   17ec4:	d3ea9828 	.word	0xd3ea9828
   17ec8:	fb94f007 	.word	0xfb94f007
   17ecc:	ab0b2200 	.word	0xab0b2200
   17ed0:	a92a701a 	.word	0xa92a701a
   17ed4:	428b3301 	.word	0x428b3301
   17ed8:	4630d1fa 	.word	0x4630d1fa
   17edc:	e8bdb02b 	.word	0xe8bdb02b
   17ee0:	a80c83f0 	.word	0xa80c83f0
   17ee4:	ff26f003 	.word	0xff26f003
   17ee8:	f003a80f 	.word	0xf003a80f
   17eec:	a812ff23 	.word	0xa812ff23
   17ef0:	ff20f003 	.word	0xff20f003
   17ef4:	f003a815 	.word	0xf003a815
   17ef8:	a818ff1d 	.word	0xa818ff1d
   17efc:	ff1af003 	.word	0xff1af003
   17f00:	f003a81b 	.word	0xf003a81b
   17f04:	a81eff17 	.word	0xa81eff17
   17f08:	ff14f003 	.word	0xff14f003
   17f0c:	3501e7c2 	.word	0x3501e7c2
   17f10:	d3c44295 	.word	0xd3c44295
   17f14:	4639e7d8 	.word	0x4639e7d8
   17f18:	f004a802 	.word	0xf004a802
   17f1c:	b920fbc5 	.word	0xb920fbc5
   17f20:	a8054649 	.word	0xa8054649
   17f24:	fbc0f004 	.word	0xfbc0f004
   17f28:	4e08b130 	.word	0x4e08b130
   17f2c:	4e07e7a6 	.word	0x4e07e7a6
   17f30:	b02b4630 	.word	0xb02b4630
   17f34:	83f0e8bd 	.word	0x83f0e8bd
   17f38:	a8084641 	.word	0xa8084641
   17f3c:	fbb4f004 	.word	0xfbb4f004
   17f40:	28004606 	.word	0x28004606
   17f44:	e7f0d09a 	.word	0xe7f0d09a
   17f48:	e7974e01 	.word	0xe7974e01
   17f4c:	ffffb080 	.word	0xffffb080
   17f50:	ffffb380 	.word	0xffffb380

00017f54 <interface_init>:
   17f54:	f44fb508 	.word	0xf44fb508
   17f58:	21007290 	.word	0x21007290
   17f5c:	f00c4802 	.word	0xf00c4802
   17f60:	2000fcdc 	.word	0x2000fcdc
   17f64:	bf00bd08 	.word	0xbf00bd08
   17f68:	2002742c 	.word	0x2002742c

00017f6c <interface_socket_allocate>:
   17f6c:	4b29b5f8 	.word	0x4b29b5f8
   17f70:	681d4606 	.word	0x681d4606
   17f74:	b1e54608 	.word	0xb1e54608
   17f78:	2c006a5c 	.word	0x2c006a5c
   17f7c:	6c9cd03d 	.word	0x6c9cd03d
   17f80:	d03c2c00 	.word	0xd03c2c00
   17f84:	2c006edc 	.word	0x2c006edc
   17f88:	f8d3d03b 	.word	0xf8d3d03b
   17f8c:	b1791090 	.word	0xb1791090
   17f90:	10b4f8d3 	.word	0x10b4f8d3
   17f94:	f8d3b3b9 	.word	0xf8d3b3b9
   17f98:	b3b110d8 	.word	0xb3b110d8
   17f9c:	10fcf8d3 	.word	0x10fcf8d3
   17fa0:	f04fb3a9 	.word	0xf04fb3a9
   17fa4:	200c35ff 	.word	0x200c35ff
   17fa8:	f8c2f7fa 	.word	0xf8c2f7fa
   17fac:	bdf84628 	.word	0xbdf84628
   17fb0:	f04f2504 	.word	0xf04f2504
   17fb4:	f04f0c01 	.word	0xf04f0c01
   17fb8:	eb0537ff 	.word	0xeb0537ff
   17fbc:	00a404c5 	.word	0x00a404c5
   17fc0:	c004f843 	.word	0xc004f843
   17fc4:	4611441c 	.word	0x4611441c
   17fc8:	462261a7 	.word	0x462261a7
   17fcc:	facaf7fd 	.word	0xfacaf7fd
   17fd0:	61e04603 	.word	0x61e04603
   17fd4:	681bb158 	.word	0x681bb158
   17fd8:	4798681b 	.word	0x4798681b
   17fdc:	6034b910 	.word	0x6034b910
   17fe0:	bdf84628 	.word	0xbdf84628
   17fe4:	f7fd69e0 	.word	0xf7fd69e0
   17fe8:	2300fadd 	.word	0x2300fadd
   17fec:	462061e3 	.word	0x462061e3
   17ff0:	21002224 	.word	0x21002224
   17ff4:	fc91f00c 	.word	0xfc91f00c
   17ff8:	2501e7d3 	.word	0x2501e7d3
   17ffc:	2502e7d9 	.word	0x2502e7d9
   18000:	2503e7d7 	.word	0x2503e7d7
   18004:	2505e7d5 	.word	0x2505e7d5
   18008:	2506e7d3 	.word	0x2506e7d3
   1800c:	2507e7d1 	.word	0x2507e7d1
   18010:	bf00e7cf 	.word	0xbf00e7cf
   18014:	2002742c 	.word	0x2002742c

00018018 <interface_socket_free>:
   18018:	d9002807 	.word	0xd9002807
   1801c:	b5104770 	.word	0xb5104770
   18020:	eb004c07 	.word	0xeb004c07
   18024:	eb0400c0 	.word	0xeb0400c0
   18028:	69e00480 	.word	0x69e00480
   1802c:	f7fdb108 	.word	0xf7fdb108
   18030:	4620fab9 	.word	0x4620fab9
   18034:	4010e8bd 	.word	0x4010e8bd
   18038:	21002224 	.word	0x21002224
   1803c:	bc6df00c 	.word	0xbc6df00c
   18040:	2002742c 	.word	0x2002742c

00018044 <interface_socket_packet_handler_update>:
   18044:	e92d2807 	.word	0xe92d2807
   18048:	d81e43f8 	.word	0xd81e43f8
   1804c:	08c0ea4f 	.word	0x08c0ea4f
   18050:	eb084e17 	.word	0xeb084e17
   18054:	009b0300 	.word	0x009b0300
   18058:	18f558f4 	.word	0x18f558f4
   1805c:	460bb1ac 	.word	0x460bb1ac
   18060:	46114604 	.word	0x46114604
   18064:	462a4618 	.word	0x462a4618
   18068:	901cf8d5 	.word	0x901cf8d5
   1806c:	fa7af7fd 	.word	0xfa7af7fd
   18070:	b1d061e8 	.word	0xb1d061e8
   18074:	681b6803 	.word	0x681b6803
   18078:	46074798 	.word	0x46074798
   1807c:	4648b948 	.word	0x4648b948
   18080:	fa90f7fd 	.word	0xfa90f7fd
   18084:	e8bd4638 	.word	0xe8bd4638
   18088:	270583f8 	.word	0x270583f8
   1808c:	e8bd4638 	.word	0xe8bd4638
   18090:	69e883f8 	.word	0x69e883f8
   18094:	fa86f7fd 	.word	0xfa86f7fd
   18098:	0004eb08 	.word	0x0004eb08
   1809c:	0680eb06 	.word	0x0680eb06
   180a0:	901cf8c6 	.word	0x901cf8c6
   180a4:	e8bd4638 	.word	0xe8bd4638
   180a8:	270483f8 	.word	0x270483f8
   180ac:	bf00e7f4 	.word	0xbf00e7f4
   180b0:	2002742c 	.word	0x2002742c

000180b4 <interface_socket_wait>:
   180b4:	eb00b5f0 	.word	0xeb00b5f0
   180b8:	4c0e00c0 	.word	0x4c0e00c0
   180bc:	58250080 	.word	0x58250080
   180c0:	4015b083 	.word	0x4015b083
   180c4:	9301428d 	.word	0x9301428d
   180c8:	d0104404 	.word	0xd0104404
   180cc:	b9736863 	.word	0xb9736863
   180d0:	4616460f 	.word	0x4616460f
   180d4:	e0064625 	.word	0xe0064625
   180d8:	b943686b 	.word	0xb943686b
   180dc:	4620a901 	.word	0x4620a901
   180e0:	ff96f7f9 	.word	0xff96f7f9
   180e4:	682bb920 	.word	0x682bb920
   180e8:	42bb4033 	.word	0x42bb4033
   180ec:	2000d1f4 	.word	0x2000d1f4
   180f0:	bdf0b003 	.word	0xbdf0b003
   180f4:	2002742c 	.word	0x2002742c

000180f8 <interface_from_internal_id_search>:
   180f8:	681a4b23 	.word	0x681a4b23
   180fc:	699ab112 	.word	0x699ab112
   18100:	d0324282 	.word	0xd0324282
   18104:	b1126a5a 	.word	0xb1126a5a
   18108:	42826bda 	.word	0x42826bda
   1810c:	6c9ad02f 	.word	0x6c9ad02f
   18110:	6e1ab112 	.word	0x6e1ab112
   18114:	d02c4282 	.word	0xd02c4282
   18118:	b11a6eda 	.word	0xb11a6eda
   1811c:	2084f8d3 	.word	0x2084f8d3
   18120:	d0284282 	.word	0xd0284282
   18124:	2090f8d3 	.word	0x2090f8d3
   18128:	f8d3b11a 	.word	0xf8d3b11a
   1812c:	428220a8 	.word	0x428220a8
   18130:	f8d3d023 	.word	0xf8d3d023
   18134:	b11a20b4 	.word	0xb11a20b4
   18138:	20ccf8d3 	.word	0x20ccf8d3
   1813c:	d01e4282 	.word	0xd01e4282
   18140:	20d8f8d3 	.word	0x20d8f8d3
   18144:	f8d3b11a 	.word	0xf8d3b11a
   18148:	428220f0 	.word	0x428220f0
   1814c:	f8d3d019 	.word	0xf8d3d019
   18150:	b13a20fc 	.word	0xb13a20fc
   18154:	3114f8d3 	.word	0x3114f8d3
   18158:	bf144283 	.word	0xbf144283
   1815c:	30fff04f 	.word	0x30fff04f
   18160:	47702007 	.word	0x47702007
   18164:	30fff04f 	.word	0x30fff04f
   18168:	20004770 	.word	0x20004770
   1816c:	20014770 	.word	0x20014770
   18170:	20024770 	.word	0x20024770
   18174:	20034770 	.word	0x20034770
   18178:	20044770 	.word	0x20044770
   1817c:	20054770 	.word	0x20054770
   18180:	20064770 	.word	0x20064770
   18184:	bf004770 	.word	0xbf004770
   18188:	2002742c 	.word	0x2002742c

0001818c <interface_socket_from_handle_get>:
   1818c:	d8072807 	.word	0xd8072807
   18190:	00c0eb00 	.word	0x00c0eb00
   18194:	00804b03 	.word	0x00804b03
   18198:	b10a581a 	.word	0xb10a581a
   1819c:	47704418 	.word	0x47704418
   181a0:	47702000 	.word	0x47702000
   181a4:	2002742c 	.word	0x2002742c

000181a8 <interface_socket_event_get>:
   181a8:	2807b119 	.word	0x2807b119
   181ac:	2310d902 	.word	0x2310d902
   181b0:	4770600b 	.word	0x4770600b
   181b4:	00c0eb00 	.word	0x00c0eb00
   181b8:	00804b07 	.word	0x00804b07
   181bc:	2a00581a 	.word	0x2a00581a
   181c0:	581bd0f5 	.word	0x581bd0f5
   181c4:	f0030c1b 	.word	0xf0030c1b
   181c8:	2a0a020a 	.word	0x2a0a020a
   181cc:	f003bf14 	.word	0xf003bf14
   181d0:	f003030f 	.word	0xf003030f
   181d4:	e7eb030d 	.word	0xe7eb030d
   181d8:	2002742c 	.word	0x2002742c

000181dc <interface_socket_setopt>:
   181dc:	b5702807 	.word	0xb5702807
   181e0:	eb00d827 	.word	0xeb00d827
   181e4:	4c1600c0 	.word	0x4c1600c0
   181e8:	58250080 	.word	0x58250080
   181ec:	2901b30d 	.word	0x2901b30d
   181f0:	2a14d119 	.word	0x2a14d119
   181f4:	b183d117 	.word	0xb183d117
   181f8:	2a089a04 	.word	0x2a089a04
   181fc:	f44fd10d 	.word	0xf44fd10d
   18200:	685a757a 	.word	0x685a757a
   18204:	68194e0f 	.word	0x68194e0f
   18208:	2302fba6 	.word	0x2302fba6
   1820c:	fb05099b 	.word	0xfb05099b
   18210:	44203301 	.word	0x44203301
   18214:	20006203 	.word	0x20006203
   18218:	2016bd70 	.word	0x2016bd70
   1821c:	ff88f7f9 	.word	0xff88f7f9
   18220:	30fff04f 	.word	0x30fff04f
   18224:	202abd70 	.word	0x202abd70
   18228:	ff82f7f9 	.word	0xff82f7f9
   1822c:	30fff04f 	.word	0x30fff04f
   18230:	2009bd70 	.word	0x2009bd70
   18234:	ff7cf7f9 	.word	0xff7cf7f9
   18238:	30fff04f 	.word	0x30fff04f
   1823c:	bf00bd70 	.word	0xbf00bd70
   18240:	2002742c 	.word	0x2002742c
   18244:	10624dd3 	.word	0x10624dd3

00018248 <interface_socket_getopt>:
   18248:	2807b570 	.word	0x2807b570
   1824c:	d8219d04 	.word	0xd8219d04
   18250:	eb004c13 	.word	0xeb004c13
   18254:	008000c0 	.word	0x008000c0
   18258:	44045826 	.word	0x44045826
   1825c:	2901b1d6 	.word	0x2901b1d6
   18260:	2a04d112 	.word	0x2a04d112
   18264:	b14bd110 	.word	0xb14bd110
   18268:	682ab145 	.word	0x682ab145
   1826c:	d1052a04 	.word	0xd1052a04
   18270:	68612200 	.word	0x68612200
   18274:	60194610 	.word	0x60194610
   18278:	bd706062 	.word	0xbd706062
   1827c:	f7f92016 	.word	0xf7f92016
   18280:	f04fff57 	.word	0xf04fff57
   18284:	bd7030ff 	.word	0xbd7030ff
   18288:	f7f9202a 	.word	0xf7f9202a
   1828c:	f04fff51 	.word	0xf04fff51
   18290:	bd7030ff 	.word	0xbd7030ff
   18294:	f7f92009 	.word	0xf7f92009
   18298:	f04fff4b 	.word	0xf04fff4b
   1829c:	bd7030ff 	.word	0xbd7030ff
   182a0:	2002742c 	.word	0x2002742c

000182a4 <interface_socket_fcntl>:
   182a4:	b5102807 	.word	0xb5102807
   182a8:	eb00d818 	.word	0xeb00d818
   182ac:	4c1100c0 	.word	0x4c1100c0
   182b0:	58e00083 	.word	0x58e00083
   182b4:	2901b190 	.word	0x2901b190
   182b8:	2902d005 	.word	0x2902d005
   182bc:	58e0d114 	.word	0x58e0d114
   182c0:	7000f3c0 	.word	0x7000f3c0
   182c4:	f012bd10 	.word	0xf012bd10
   182c8:	58e20001 	.word	0x58e20001
   182cc:	2000bf1a 	.word	0x2000bf1a
   182d0:	5280f042 	.word	0x5280f042
   182d4:	5280f022 	.word	0x5280f022
   182d8:	bd1050e2 	.word	0xbd1050e2
   182dc:	f7f92009 	.word	0xf7f92009
   182e0:	f04fff27 	.word	0xf04fff27
   182e4:	bd1030ff 	.word	0xbd1030ff
   182e8:	f7f92016 	.word	0xf7f92016
   182ec:	f04fff21 	.word	0xf04fff21
   182f0:	bd1030ff 	.word	0xbd1030ff
   182f4:	2002742c 	.word	0x2002742c

000182f8 <symbol_00026c2>:
   182f8:	4ff0e92d 	.word	0x4ff0e92d
   182fc:	2100460e 	.word	0x2100460e
   18300:	b0854605 	.word	0xb0854605
   18304:	93004608 	.word	0x93004608
   18308:	461c4617 	.word	0x461c4617
   1830c:	aa034613 	.word	0xaa034613
   18310:	9038f8dd 	.word	0x9038f8dd
   18314:	f994f7fb 	.word	0xf994f7fb
   18318:	f00c4628 	.word	0xf00c4628
   1831c:	4682fa9d 	.word	0x4682fa9d
   18320:	f00c4630 	.word	0xf00c4630
   18324:	9903fa99 	.word	0x9903fa99
   18328:	eb031c4b 	.word	0xeb031c4b
   1832c:	44531391 	.word	0x44531391
   18330:	9b0f4418 	.word	0x9b0f4418
   18334:	d8534298 	.word	0xd8534298
   18338:	f0072001 	.word	0xf0072001
   1833c:	4682f947 	.word	0x4682f947
   18340:	d0522800 	.word	0xd0522800
   18344:	94009903 	.word	0x94009903
   18348:	aa03463b 	.word	0xaa03463b
   1834c:	f978f7fb 	.word	0xf978f7fb
   18350:	28004680 	.word	0x28004680
   18354:	4628d13d 	.word	0x4628d13d
   18358:	fa7ef00c 	.word	0xfa7ef00c
   1835c:	46024629 	.word	0x46024629
   18360:	f00c4648 	.word	0xf00c4648
   18364:	4628faad 	.word	0x4628faad
   18368:	fa76f00c 	.word	0xfa76f00c
   1836c:	eb099b03 	.word	0xeb099b03
   18370:	b19b0400 	.word	0xb19b0400
   18374:	270a46d3 	.word	0x270a46d3
   18378:	bf282b40 	.word	0xbf282b40
   1837c:	461d2340 	.word	0x461d2340
   18380:	461a4659 	.word	0x461a4659
   18384:	f00c4620 	.word	0xf00c4620
   18388:	9b03fa9b 	.word	0x9b03fa9b
   1838c:	1b5b442c 	.word	0x1b5b442c
   18390:	44ab7027 	.word	0x44ab7027
   18394:	93033401 	.word	0x93033401
   18398:	d1ed2b00 	.word	0xd1ed2b00
   1839c:	f00c4630 	.word	0xf00c4630
   183a0:	4631fa5b 	.word	0x4631fa5b
   183a4:	46204602 	.word	0x46204602
   183a8:	fa8af00c 	.word	0xfa8af00c
   183ac:	f00c4630 	.word	0xf00c4630
   183b0:	2100fa53 	.word	0x2100fa53
   183b4:	18234602 	.word	0x18234602
   183b8:	330154a1 	.word	0x330154a1
   183bc:	eba39a10 	.word	0xeba39a10
   183c0:	46500309 	.word	0x46500309
   183c4:	f0076013 	.word	0xf0076013
   183c8:	4640f915 	.word	0x4640f915
   183cc:	e8bdb005 	.word	0xe8bdb005
   183d0:	46508ff0 	.word	0x46508ff0
   183d4:	f90ef007 	.word	0xf90ef007
   183d8:	b0054640 	.word	0xb0054640
   183dc:	8ff0e8bd 	.word	0x8ff0e8bd
   183e0:	f06f9b10 	.word	0xf06f9b10
   183e4:	60180829 	.word	0x60180829
   183e8:	f8dfe7ef 	.word	0xf8dfe7ef
   183ec:	e7ec8004 	.word	0xe7ec8004
   183f0:	ffffee80 	.word	0xffffee80

000183f4 <ip_recvd_packet_free_cb>:
   183f4:	4604b510 	.word	0x4604b510
   183f8:	f7fa6800 	.word	0xf7fa6800
   183fc:	68a0fdaf 	.word	0x68a0fdaf
   18400:	e8bdb118 	.word	0xe8bdb118
   18404:	f0074010 	.word	0xf0074010
   18408:	bd10b8f5 	.word	0xbd10b8f5

0001840c <rpc_error_to_nrf_bsd_error>:
   1840c:	bf9a2810 	.word	0xbf9a2810
   18410:	f8534b02 	.word	0xf8534b02
   18414:	202d0020 	.word	0x202d0020
   18418:	bf004770 	.word	0xbf004770
   1841c:	00026ab8 	.word	0x00026ab8

00018420 <ip_interface_request_create>:
   18420:	2500b570 	.word	0x2500b570
   18424:	ac02b082 	.word	0xac02b082
   18428:	5d04f844 	.word	0x5d04f844
   1842c:	460d4606 	.word	0x460d4606
   18430:	46194620 	.word	0x46194620
   18434:	f7fa4614 	.word	0xf7fa4614
   18438:	b960fd5f 	.word	0xb960fd5f
   1843c:	22089b01 	.word	0x22089b01
   18440:	72987258 	.word	0x72987258
   18444:	461872d8 	.word	0x461872d8
   18448:	4406ea44 	.word	0x4406ea44
   1844c:	611d60dc 	.word	0x611d60dc
   18450:	b002721a 	.word	0xb002721a
   18454:	9b01bd70 	.word	0x9b01bd70
   18458:	b0024618 	.word	0xb0024618
   1845c:	bf00bd70 	.word	0xbf00bd70

00018460 <ip_interface_request_send>:
   18460:	460cb570 	.word	0x460cb570
   18464:	46114605 	.word	0x46114605
   18468:	461e4620 	.word	0x461e4620
   1846c:	fd58f7fa 	.word	0xfd58f7fa
   18470:	bd70b900 	.word	0xbd70b900
   18474:	b1086820 	.word	0xb1086820
   18478:	fd70f7fa 	.word	0xfd70f7fa
   1847c:	f7fa4620 	.word	0xf7fa4620
   18480:	602efd65 	.word	0x602efd65
   18484:	bd702023 	.word	0xbd702023

00018488 <ip_interface_wait>:
   18488:	4605b538 	.word	0x4605b538
   1848c:	fe12f7ff 	.word	0xfe12f7ff
   18490:	b1084604 	.word	0xb1084604
   18494:	bd384620 	.word	0xbd384620
   18498:	f7ff4628 	.word	0xf7ff4628
   1849c:	2800fe77 	.word	0x2800fe77
   184a0:	6844d0f8 	.word	0x6844d0f8
   184a4:	d0f52c00 	.word	0xd0f52c00
   184a8:	60432300 	.word	0x60432300
   184ac:	bd384620 	.word	0xbd384620

000184b0 <ip_interface_init>:
   184b0:	2300b538 	.word	0x2300b538
   184b4:	4c084d07 	.word	0x4c084d07
   184b8:	22204619 	.word	0x22204619
   184bc:	602b4807 	.word	0x602b4807
   184c0:	f00c6023 	.word	0xf00c6023
   184c4:	f7fafa2a 	.word	0xf7fafa2a
   184c8:	3000fd11 	.word	0x3000fd11
   184cc:	2001bf18 	.word	0x2001bf18
   184d0:	bd384240 	.word	0xbd384240
   184d4:	2002060c 	.word	0x2002060c
   184d8:	20020608 	.word	0x20020608
   184dc:	20020614 	.word	0x20020614

000184e0 <ip_interface_open>:
   184e0:	41f0e92d 	.word	0x41f0e92d
   184e4:	20004606 	.word	0x20004606
   184e8:	0308f026 	.word	0x0308f026
   184ec:	2b02b082 	.word	0x2b02b082
   184f0:	4617460c 	.word	0x4617460c
   184f4:	d0029000 	.word	0xd0029000
   184f8:	f0402e05 	.word	0xf0402e05
   184fc:	1e638084 	.word	0x1e638084
   18500:	d85c2b02 	.word	0xd85c2b02
   18504:	d1542f00 	.word	0xd1542f00
   18508:	d0672c01 	.word	0xd0672c01
   1850c:	bf182c03 	.word	0xbf182c03
   18510:	4a482702 	.word	0x4a482702
   18514:	46684621 	.word	0x46684621
   18518:	fd28f7ff 	.word	0xfd28f7ff
   1851c:	46809b00 	.word	0x46809b00
   18520:	d0592b00 	.word	0xd0592b00
   18524:	a8022100 	.word	0xa8022100
   18528:	1d04f840 	.word	0x1d04f840
   1852c:	6403e9c3 	.word	0x6403e9c3
   18530:	f7fa615f 	.word	0xf7fa615f
   18534:	2800fce1 	.word	0x2800fce1
   18538:	f247d14b 	.word	0xf247d14b
   1853c:	f04f0201 	.word	0xf04f0201
   18540:	210833ff 	.word	0x210833ff
   18544:	ea429d01 	.word	0xea429d01
   18548:	60ea4208 	.word	0x60ea4208
   1854c:	72a87268 	.word	0x72a87268
   18550:	722972e8 	.word	0x722972e8
   18554:	746b742b 	.word	0x746b742b
   18558:	74eb74ab 	.word	0x74eb74ab
   1855c:	2e0568ab 	.word	0x2e0568ab
   18560:	030cf103 	.word	0x030cf103
   18564:	d00360ab 	.word	0xd00360ab
   18568:	bf142e0a 	.word	0xbf142e0a
   1856c:	26022601 	.word	0x26022601
   18570:	61ef616e 	.word	0x61ef616e
   18574:	f24761ac 	.word	0xf24761ac
   18578:	46280101 	.word	0x46280101
   1857c:	f7fa9f00 	.word	0xf7fa9f00
   18580:	4606fccf 	.word	0x4606fccf
   18584:	6828b360 	.word	0x6828b360
   18588:	f7fab108 	.word	0xf7fab108
   1858c:	4628fce7 	.word	0x4628fce7
   18590:	fcdcf7fa 	.word	0xfcdcf7fa
   18594:	25232301 	.word	0x25232301
   18598:	4640603b 	.word	0x4640603b
   1859c:	fd3cf7ff 	.word	0xfd3cf7ff
   185a0:	f7f94628 	.word	0xf7f94628
   185a4:	f04ffdc5 	.word	0xf04ffdc5
   185a8:	464038ff 	.word	0x464038ff
   185ac:	e8bdb002 	.word	0xe8bdb002
   185b0:	2c0181f0 	.word	0x2c0181f0
   185b4:	2c02d009 	.word	0x2c02d009
   185b8:	2f02d109 	.word	0x2f02d109
   185bc:	2016d0a9 	.word	0x2016d0a9
   185c0:	fdb6f7f9 	.word	0xfdb6f7f9
   185c4:	38fff04f 	.word	0x38fff04f
   185c8:	2f01e7ef 	.word	0x2f01e7ef
   185cc:	2702d1f7 	.word	0x2702d1f7
   185d0:	9d01e79f 	.word	0x9d01e79f
   185d4:	d1c12d00 	.word	0xd1c12d00
   185d8:	e7de250c 	.word	0xe7de250c
   185dc:	e7984627 	.word	0xe7984627
   185e0:	33fff04f 	.word	0x33fff04f
   185e4:	72fff64f 	.word	0x72fff64f
   185e8:	46402102 	.word	0x46402102
   185ec:	fd62f7ff 	.word	0xfd62f7ff
   185f0:	28004605 	.word	0x28004605
   185f4:	4640d1d1 	.word	0x4640d1d1
   185f8:	fdc8f7ff 	.word	0xfdc8f7ff
   185fc:	6845b148 	.word	0x6845b148
   18600:	6046b13d 	.word	0x6046b13d
   18604:	202fe7c9 	.word	0x202fe7c9
   18608:	fd92f7f9 	.word	0xfd92f7f9
   1860c:	38fff04f 	.word	0x38fff04f
   18610:	3c02e7cb 	.word	0x3c02e7cb
   18614:	d8c82c01 	.word	0xd8c82c01
   18618:	9b004640 	.word	0x9b004640
   1861c:	f442681a 	.word	0xf442681a
   18620:	601a3200 	.word	0x601a3200
   18624:	f442681a 	.word	0xf442681a
   18628:	601a1280 	.word	0x601a1280
   1862c:	e8bdb002 	.word	0xe8bdb002
   18630:	bf0081f0 	.word	0xbf0081f0
   18634:	000183f5 	.word	0x000183f5

00018638 <ip_interface_close>:
   18638:	41f0e92d 	.word	0x41f0e92d
   1863c:	4606b082 	.word	0x4606b082
   18640:	fda4f7ff 	.word	0xfda4f7ff
   18644:	d0632800 	.word	0xd0632800
   18648:	21004604 	.word	0x21004604
   1864c:	6827a802 	.word	0x6827a802
   18650:	1d04f840 	.word	0x1d04f840
   18654:	8018f8d4 	.word	0x8018f8d4
   18658:	fc4ef7fa 	.word	0xfc4ef7fa
   1865c:	d13a2800 	.word	0xd13a2800
   18660:	0309f247 	.word	0x0309f247
   18664:	9d012208 	.word	0x9d012208
   18668:	4306ea43 	.word	0x4306ea43
   1866c:	f8c560eb 	.word	0xf8c560eb
   18670:	72688010 	.word	0x72688010
   18674:	72e872a8 	.word	0x72e872a8
   18678:	6823722a 	.word	0x6823722a
   1867c:	0109f247 	.word	0x0109f247
   18680:	041b0c1b 	.word	0x041b0c1b
   18684:	030df043 	.word	0x030df043
   18688:	68236023 	.word	0x68236023
   1868c:	f4234628 	.word	0xf4234628
   18690:	60233300 	.word	0x60233300
   18694:	f4236823 	.word	0xf4236823
   18698:	60231380 	.word	0x60231380
   1869c:	fc40f7fa 	.word	0xfc40f7fa
   186a0:	f04fbb40 	.word	0xf04fbb40
   186a4:	f64f33ff 	.word	0xf64f33ff
   186a8:	210e72ff 	.word	0x210e72ff
   186ac:	f7ff4630 	.word	0xf7ff4630
   186b0:	4604fd01 	.word	0x4604fd01
   186b4:	4c17b1a0 	.word	0x4c17b1a0
   186b8:	0026f854 	.word	0x0026f854
   186bc:	f7fab120 	.word	0xf7fab120
   186c0:	2300fc45 	.word	0x2300fc45
   186c4:	3026f844 	.word	0x3026f844
   186c8:	f7ff4630 	.word	0xf7ff4630
   186cc:	2000fca5 	.word	0x2000fca5
   186d0:	e8bdb002 	.word	0xe8bdb002
   186d4:	9d0181f0 	.word	0x9d0181f0
   186d8:	2d00200c 	.word	0x2d00200c
   186dc:	e012d1cd 	.word	0xe012d1cd
   186e0:	f7ff4630 	.word	0xf7ff4630
   186e4:	2800fd53 	.word	0x2800fd53
   186e8:	6843d0e5 	.word	0x6843d0e5
   186ec:	d0e22b00 	.word	0xd0e22b00
   186f0:	e7e06044 	.word	0xe7e06044
   186f4:	b1086828 	.word	0xb1086828
   186f8:	fc30f7fa 	.word	0xfc30f7fa
   186fc:	f7fa4628 	.word	0xf7fa4628
   18700:	2023fc25 	.word	0x2023fc25
   18704:	f7f96027 	.word	0xf7f96027
   18708:	f04ffd13 	.word	0xf04ffd13
   1870c:	e7df30ff 	.word	0xe7df30ff
   18710:	e7f82009 	.word	0xe7f82009
   18714:	20020614 	.word	0x20020614

00018718 <ip_interface_sendto>:
   18718:	4ff0e92d 	.word	0x4ff0e92d
   1871c:	b0892500 	.word	0xb0892500
   18720:	46149103 	.word	0x46149103
   18724:	95079301 	.word	0x95079301
   18728:	9e124607 	.word	0x9e124607
   1872c:	fd2ef7ff 	.word	0xfd2ef7ff
   18730:	f0002800 	.word	0xf0002800
   18734:	f5b48124 	.word	0xf5b48124
   18738:	f3005f80 	.word	0xf3005f80
   1873c:	69038118 	.word	0x69038118
   18740:	2b014605 	.word	0x2b014605
   18744:	80d1f000 	.word	0x80d1f000
   18748:	0390682a 	.word	0x0390682a
   1874c:	682ad423 	.word	0x682ad423
   18750:	d4060091 	.word	0xd4060091
   18754:	f0002b01 	.word	0xf0002b01
   18758:	682b80ed 	.word	0x682b80ed
   1875c:	f140031a 	.word	0xf140031a
   18760:	682b8102 	.word	0x682b8102
   18764:	f140031b 	.word	0xf140031b
   18768:	68a88106 	.word	0x68a88106
   1876c:	9218f8df 	.word	0x9218f8df
   18770:	f0402800 	.word	0xf0402800
   18774:	682b8096 	.word	0x682b8096
   18778:	f1400118 	.word	0xf1400118
   1877c:	682b8082 	.word	0x682b8082
   18780:	6300f023 	.word	0x6300f023
   18784:	f859602b 	.word	0xf859602b
   18788:	28000027 	.word	0x28000027
   1878c:	4620d17c 	.word	0x4620d17c
   18790:	e8bdb009 	.word	0xe8bdb009
   18794:	f2478ff0 	.word	0xf2478ff0
   18798:	f04f0806 	.word	0xf04f0806
   1879c:	043b0a0c 	.word	0x043b0a0c
   187a0:	91e4f8df 	.word	0x91e4f8df
   187a4:	46219304 	.word	0x46219304
   187a8:	f7faa807 	.word	0xf7faa807
   187ac:	2804fba5 	.word	0x2804fba5
   187b0:	2800d0f9 	.word	0x2800d0f9
   187b4:	9b07d171 	.word	0x9b07d171
   187b8:	a008f883 	.word	0xa008f883
   187bc:	72987258 	.word	0x72987258
   187c0:	b33e72d8 	.word	0xb33e72d8
   187c4:	687168ea 	.word	0x687168ea
   187c8:	d10a428a 	.word	0xd10a428a
   187cc:	f1032a02 	.word	0xf1032a02
   187d0:	7831001c 	.word	0x7831001c
   187d4:	8090f000 	.word	0x8090f000
   187d8:	d1022a0a 	.word	0xd1022a0a
   187dc:	f0002924 	.word	0xf0002924
   187e0:	681880af 	.word	0x681880af
   187e4:	f7fab110 	.word	0xf7fab110
   187e8:	9b07fbb9 	.word	0x9b07fbb9
   187ec:	f7fa4618 	.word	0xf7fa4618
   187f0:	2016fbad 	.word	0x2016fbad
   187f4:	031a682b 	.word	0x031a682b
   187f8:	682bd453 	.word	0x682bd453
   187fc:	2b0db29b 	.word	0x2b0db29b
   18800:	682bd0b6 	.word	0x682bd0b6
   18804:	1300f423 	.word	0x1300f423
   18808:	682b602b 	.word	0x682b602b
   1880c:	3300f443 	.word	0x3300f443
   18810:	e7ad602b 	.word	0xe7ad602b
   18814:	99014642 	.word	0x99014642
   18818:	69a96159 	.word	0x69a96159
   1881c:	61199804 	.word	0x61199804
   18820:	43029903 	.word	0x43029903
   18824:	605c60da 	.word	0x605c60da
   18828:	6818b119 	.word	0x6818b119
   1882c:	f00c4622 	.word	0xf00c4622
   18830:	682bf847 	.word	0x682bf847
   18834:	93054641 	.word	0x93054641
   18838:	f423682b 	.word	0xf423682b
   1883c:	602b3300 	.word	0x602b3300
   18840:	f443682b 	.word	0xf443682b
   18844:	602b1300 	.word	0x602b1300
   18848:	46189b07 	.word	0x46189b07
   1884c:	f7fa9302 	.word	0xf7fa9302
   18850:	9b02fb67 	.word	0x9b02fb67
   18854:	bb584683 	.word	0xbb584683
   18858:	3200f44f 	.word	0x3200f44f
   1885c:	33fff04f 	.word	0x33fff04f
   18860:	46384611 	.word	0x46384611
   18864:	fc26f7ff 	.word	0xfc26f7ff
   18868:	682bb370 	.word	0x682bb370
   1886c:	d4370319 	.word	0xd4370319
   18870:	d1bf280c 	.word	0xd1bf280c
   18874:	0027f859 	.word	0x0027f859
   18878:	d0942800 	.word	0xd0942800
   1887c:	fb66f7fa 	.word	0xfb66f7fa
   18880:	f859e791 	.word	0xf859e791
   18884:	69840027 	.word	0x69840027
   18888:	fb60f7fa 	.word	0xfb60f7fa
   1888c:	46202300 	.word	0x46202300
   18890:	3027f849 	.word	0x3027f849
   18894:	e8bdb009 	.word	0xe8bdb009
   18898:	682b8ff0 	.word	0x682b8ff0
   1889c:	031a200c 	.word	0x031a200c
   188a0:	f7f9d5ab 	.word	0xf7f9d5ab
   188a4:	f04ffc45 	.word	0xf04ffc45
   188a8:	f85934ff 	.word	0xf85934ff
   188ac:	e76c0027 	.word	0xe76c0027
   188b0:	469b6818 	.word	0x469b6818
   188b4:	f7fab108 	.word	0xf7fab108
   188b8:	4658fb51 	.word	0x4658fb51
   188bc:	fb46f7fa 	.word	0xfb46f7fa
   188c0:	20239b05 	.word	0x20239b05
   188c4:	e795602b 	.word	0xe795602b
   188c8:	f7ff4638 	.word	0xf7ff4638
   188cc:	4603fc5f 	.word	0x4603fc5f
   188d0:	6840b1f0 	.word	0x6840b1f0
   188d4:	f8c3b1e0 	.word	0xf8c3b1e0
   188d8:	682bb004 	.word	0x682bb004
   188dc:	d5c70319 	.word	0xd5c70319
   188e0:	682b68a8 	.word	0x682b68a8
   188e4:	d588031e 	.word	0xd588031e
   188e8:	2e00e742 	.word	0x2e00e742
   188ec:	af2cf43f 	.word	0xaf2cf43f
   188f0:	f8df2016 	.word	0xf8df2016
   188f4:	e7d49094 	.word	0xe7d49094
   188f8:	f47f2910 	.word	0xf47f2910
   188fc:	2204af72 	.word	0x2204af72
   18900:	835a8931 	.word	0x835a8931
   18904:	f1068319 	.word	0xf1068319
   18908:	f00b010c 	.word	0xf00b010c
   1890c:	e01effd9 	.word	0xe01effd9
   18910:	031b682b 	.word	0x031b682b
   18914:	af2ff53f 	.word	0xaf2ff53f
   18918:	b29b682b 	.word	0xb29b682b
   1891c:	f43f2b0d 	.word	0xf43f2b0d
   18920:	682baf2a 	.word	0x682baf2a
   18924:	1300f423 	.word	0x1300f423
   18928:	682b602b 	.word	0x682b602b
   1892c:	3300f443 	.word	0x3300f443
   18930:	e720602b 	.word	0xe720602b
   18934:	b29b682b 	.word	0xb29b682b
   18938:	f47f2b05 	.word	0xf47f2b05
   1893c:	e70caf12 	.word	0xe70caf12
   18940:	89312210 	.word	0x89312210
   18944:	8319835a 	.word	0x8319835a
   18948:	f00b18b1 	.word	0xf00b18b1
   1894c:	f247ffb9 	.word	0xf247ffb9
   18950:	9b070207 	.word	0x9b070207
   18954:	68994690 	.word	0x68994690
   18958:	31048b58 	.word	0x31048b58
   1895c:	98014401 	.word	0x98014401
   18960:	61586099 	.word	0x61586099
   18964:	2023e759 	.word	0x2023e759
   18968:	901cf8df 	.word	0x901cf8df
   1896c:	2028e799 	.word	0x2028e799
   18970:	9014f8df 	.word	0x9014f8df
   18974:	2039e795 	.word	0x2039e795
   18978:	900cf8df 	.word	0x900cf8df
   1897c:	2009e791 	.word	0x2009e791
   18980:	9004f8df 	.word	0x9004f8df
   18984:	bf00e78d 	.word	0xbf00e78d
   18988:	20020614 	.word	0x20020614

0001898c <ip_interface_recvfrom>:
   1898c:	4ff0e92d 	.word	0x4ff0e92d
   18990:	2a00b085 	.word	0x2a00b085
   18994:	8110f000 	.word	0x8110f000
   18998:	4699468a 	.word	0x4699468a
   1899c:	46164607 	.word	0x46164607
   189a0:	fbf4f7ff 	.word	0xfbf4f7ff
   189a4:	28004604 	.word	0x28004604
   189a8:	810df000 	.word	0x810df000
   189ac:	02d96803 	.word	0x02d96803
   189b0:	f019d565 	.word	0xf019d565
   189b4:	bf180f02 	.word	0xbf180f02
   189b8:	0800f04f 	.word	0x0800f04f
   189bc:	3bfff04f 	.word	0x3bfff04f
   189c0:	6803bf08 	.word	0x6803bf08
   189c4:	0510f009 	.word	0x0510f009
   189c8:	f083bf04 	.word	0xf083bf04
   189cc:	f3c85880 	.word	0xf3c85880
   189d0:	68237800 	.word	0x68237800
   189d4:	d56d03da 	.word	0xd56d03da
   189d8:	69e06823 	.word	0x69e06823
   189dc:	3380f423 	.word	0x3380f423
   189e0:	68036023 	.word	0x68036023
   189e4:	479868db 	.word	0x479868db
   189e8:	3ffff1b0 	.word	0x3ffff1b0
   189ec:	f0004683 	.word	0xf0004683
   189f0:	42868081 	.word	0x42868081
   189f4:	6923dd03 	.word	0x6923dd03
   189f8:	f0002b01 	.word	0xf0002b01
   189fc:	250080a7 	.word	0x250080a7
   18a00:	9b0f69e0 	.word	0x9b0f69e0
   18a04:	681bb103 	.word	0x681bb103
   18a08:	e9cd9a0e 	.word	0xe9cd9a0e
   18a0c:	e9cda600 	.word	0xe9cda600
   18a10:	68032302 	.word	0x68032302
   18a14:	689b464a 	.word	0x689b464a
   18a18:	47984669 	.word	0x47984669
   18a1c:	69e04683 	.word	0x69e04683
   18a20:	3ffff1bb 	.word	0x3ffff1bb
   18a24:	bf186803 	.word	0xbf186803
   18a28:	68db2601 	.word	0x68db2601
   18a2c:	2600bf0a 	.word	0x2600bf0a
   18a30:	0800f04f 	.word	0x0800f04f
   18a34:	0823f04f 	.word	0x0823f04f
   18a38:	30014798 	.word	0x30014798
   18a3c:	2d00d135 	.word	0x2d00d135
   18a40:	80b6f000 	.word	0x80b6f000
   18a44:	f0002e00 	.word	0xf0002e00
   18a48:	682380a6 	.word	0x682380a6
   18a4c:	d5060319 	.word	0xd5060319
   18a50:	b29b6823 	.word	0xb29b6823
   18a54:	d0022b0d 	.word	0xd0022b0d
   18a58:	2b016923 	.word	0x2b016923
   18a5c:	6823d025 	.word	0x6823d025
   18a60:	4f80f013 	.word	0x4f80f013
   18a64:	f0406823 	.word	0xf0406823
   18a68:	031a80b1 	.word	0x031a80b1
   18a6c:	f1b8d475 	.word	0xf1b8d475
   18a70:	f0400f00 	.word	0xf0400f00
   18a74:	4658808a 	.word	0x4658808a
   18a78:	e8bdb005 	.word	0xe8bdb005
   18a7c:	68038ff0 	.word	0x68038ff0
   18a80:	2b06b29b 	.word	0x2b06b29b
   18a84:	6803d073 	.word	0x6803d073
   18a88:	2b07b29b 	.word	0x2b07b29b
   18a8c:	f04fbf0c 	.word	0xf04fbf0c
   18a90:	f04f0809 	.word	0xf04f0809
   18a94:	69e00839 	.word	0x69e00839
   18a98:	68db6803 	.word	0x68db6803
   18a9c:	f1b04798 	.word	0xf1b04798
   18aa0:	46833fff 	.word	0x46833fff
   18aa4:	f04fd0db 	.word	0xf04fd0db
   18aa8:	68233bff 	.word	0x68233bff
   18aac:	3380f443 	.word	0x3380f443
   18ab0:	e7dc6023 	.word	0xe7dc6023
   18ab4:	0f00f1b8 	.word	0x0f00f1b8
   18ab8:	8081f000 	.word	0x8081f000
   18abc:	3280f44f 	.word	0x3280f44f
   18ac0:	46116a23 	.word	0x46116a23
   18ac4:	bf082b00 	.word	0xbf082b00
   18ac8:	33fff04f 	.word	0x33fff04f
   18acc:	f7ff4638 	.word	0xf7ff4638
   18ad0:	4680faf1 	.word	0x4680faf1
   18ad4:	6823b358 	.word	0x6823b358
   18ad8:	031b69e0 	.word	0x031b69e0
   18adc:	6823d521 	.word	0x6823d521
   18ae0:	2b0db29b 	.word	0x2b0db29b
   18ae4:	6925d01d 	.word	0x6925d01d
   18ae8:	0501f1a5 	.word	0x0501f1a5
   18aec:	f585fab5 	.word	0xf585fab5
   18af0:	e786096d 	.word	0xe786096d
   18af4:	03186823 	.word	0x03186823
   18af8:	6823d5dc 	.word	0x6823d5dc
   18afc:	2b0db29b 	.word	0x2b0db29b
   18b00:	6923d0d8 	.word	0x6923d0d8
   18b04:	2b0169e0 	.word	0x2b0169e0
   18b08:	f04fd034 	.word	0xf04fd034
   18b0c:	68230839 	.word	0x68230839
   18b10:	041b0c1b 	.word	0x041b0c1b
   18b14:	030df043 	.word	0x030df043
   18b18:	68236023 	.word	0x68236023
   18b1c:	1380f423 	.word	0x1380f423
   18b20:	68036023 	.word	0x68036023
   18b24:	479868db 	.word	0x479868db
   18b28:	d1be3001 	.word	0xd1be3001
   18b2c:	4638e797 	.word	0x4638e797
   18b30:	fb2cf7ff 	.word	0xfb2cf7ff
   18b34:	f8d0b138 	.word	0xf8d0b138
   18b38:	f1b88004 	.word	0xf1b88004
   18b3c:	d0020f00 	.word	0xd0020f00
   18b40:	60432300 	.word	0x60432300
   18b44:	f04fe7c7 	.word	0xf04fe7c7
   18b48:	e7420801 	.word	0xe7420801
   18b4c:	6823b11d 	.word	0x6823b11d
   18b50:	d5b300db 	.word	0xd5b300db
   18b54:	69e0e753 	.word	0x69e0e753
   18b58:	6823e753 	.word	0x6823e753
   18b5c:	2b0db29b 	.word	0x2b0db29b
   18b60:	68a3d185 	.word	0x68a3d185
   18b64:	d0822b00 	.word	0xd0822b00
   18b68:	8008f8d4 	.word	0x8008f8d4
   18b6c:	f04fe77f 	.word	0xf04fe77f
   18b70:	e7900809 	.word	0xe7900809
   18b74:	68db6803 	.word	0x68db6803
   18b78:	30014798 	.word	0x30014798
   18b7c:	f04fd00b 	.word	0xf04fd00b
   18b80:	68230823 	.word	0x68230823
   18b84:	3380f443 	.word	0x3380f443
   18b88:	46406023 	.word	0x46406023
   18b8c:	fad0f7f9 	.word	0xfad0f7f9
   18b90:	3bfff04f 	.word	0x3bfff04f
   18b94:	6823e76f 	.word	0x6823e76f
   18b98:	0b00f04f 	.word	0x0b00f04f
   18b9c:	041b0c1b 	.word	0x041b0c1b
   18ba0:	030df043 	.word	0x030df043
   18ba4:	68236023 	.word	0x68236023
   18ba8:	1380f423 	.word	0x1380f423
   18bac:	e7626023 	.word	0xe7626023
   18bb0:	f47f2e00 	.word	0xf47f2e00
   18bb4:	e752af4a 	.word	0xe752af4a
   18bb8:	0816f04f 	.word	0x0816f04f
   18bbc:	f04fe7e5 	.word	0xf04fe7e5
   18bc0:	69e00823 	.word	0x69e00823
   18bc4:	f04fe7ad 	.word	0xf04fe7ad
   18bc8:	e7de0809 	.word	0xe7de0809
   18bcc:	4380f023 	.word	0x4380f023
   18bd0:	68236023 	.word	0x68236023
   18bd4:	0869f04f 	.word	0x0869f04f
   18bd8:	041b0c1b 	.word	0x041b0c1b
   18bdc:	030df043 	.word	0x030df043
   18be0:	e7d26023 	.word	0xe7d26023

00018be4 <ip_interface_connect>:
   18be4:	41f0e92d 	.word	0x41f0e92d
   18be8:	2900b082 	.word	0x2900b082
   18bec:	2a00d044 	.word	0x2a00d044
   18bf0:	4606d042 	.word	0x4606d042
   18bf4:	f7ff460f 	.word	0xf7ff460f
   18bf8:	4605fac9 	.word	0x4605fac9
   18bfc:	f0002800 	.word	0xf0002800
   18c00:	68038096 	.word	0x68038096
   18c04:	2b02b29b 	.word	0x2b02b29b
   18c08:	6803d004 	.word	0x6803d004
   18c0c:	2b04b29b 	.word	0x2b04b29b
   18c10:	808df040 	.word	0x808df040
   18c14:	f0116829 	.word	0xf0116829
   18c18:	f0405100 	.word	0xf0405100
   18c1c:	a8028084 	.word	0xa8028084
   18c20:	1d04f840 	.word	0x1d04f840
   18c24:	8018f8d5 	.word	0x8018f8d5
   18c28:	f966f7fa 	.word	0xf966f7fa
   18c2c:	2108bb70 	.word	0x2108bb70
   18c30:	9c010433 	.word	0x9c010433
   18c34:	42e0f443 	.word	0x42e0f443
   18c38:	0202f042 	.word	0x0202f042
   18c3c:	f8c460e2 	.word	0xf8c460e2
   18c40:	72608010 	.word	0x72608010
   18c44:	72e072a0 	.word	0x72e072a0
   18c48:	f4437221 	.word	0xf4437221
   18c4c:	f04343e0 	.word	0xf04343e0
   18c50:	60e30302 	.word	0x60e30302
   18c54:	69aa68a3 	.word	0x69aa68a3
   18c58:	61223304 	.word	0x61223304
   18c5c:	68eb60a3 	.word	0x68eb60a3
   18c60:	4293687a 	.word	0x4293687a
   18c64:	2b02d108 	.word	0x2b02d108
   18c68:	0018f104 	.word	0x0018f104
   18c6c:	d03a783a 	.word	0xd03a783a
   18c70:	d1012b0a 	.word	0xd1012b0a
   18c74:	d00e2a24 	.word	0xd00e2a24
   18c78:	46202416 	.word	0x46202416
   18c7c:	fa58f7f9 	.word	0xfa58f7f9
   18c80:	34fff04f 	.word	0x34fff04f
   18c84:	b0024620 	.word	0xb0024620
   18c88:	81f0e8bd 	.word	0x81f0e8bd
   18c8c:	2c009c01 	.word	0x2c009c01
   18c90:	0433d04f 	.word	0x0433d04f
   18c94:	2210e7d9 	.word	0x2210e7d9
   18c98:	18b9893b 	.word	0x18b9893b
   18c9c:	82a382e2 	.word	0x82a382e2
   18ca0:	fe0ef00b 	.word	0xfe0ef00b
   18ca4:	8ae268a3 	.word	0x8ae268a3
   18ca8:	0102f247 	.word	0x0102f247
   18cac:	60a34413 	.word	0x60a34413
   18cb0:	682b682f 	.word	0x682b682f
   18cb4:	f0434620 	.word	0xf0434620
   18cb8:	602b5300 	.word	0x602b5300
   18cbc:	f930f7fa 	.word	0xf930f7fa
   18cc0:	682bb9e0 	.word	0x682bb9e0
   18cc4:	5880f013 	.word	0x5880f013
   18cc8:	f04fd12f 	.word	0xf04fd12f
   18ccc:	f64f33ff 	.word	0xf64f33ff
   18cd0:	210572ff 	.word	0x210572ff
   18cd4:	f7ff4630 	.word	0xf7ff4630
   18cd8:	4604f9ed 	.word	0x4604f9ed
   18cdc:	2c73b1c0 	.word	0x2c73b1c0
   18ce0:	602fd0cb 	.word	0x602fd0cb
   18ce4:	2a10e7c9 	.word	0x2a10e7c9
   18ce8:	2204d1c6 	.word	0x2204d1c6
   18cec:	f107893b 	.word	0xf107893b
   18cf0:	82e2010c 	.word	0x82e2010c
   18cf4:	f00b82a3 	.word	0xf00b82a3
   18cf8:	e7d3fde3 	.word	0xe7d3fde3
   18cfc:	b1086820 	.word	0xb1086820
   18d00:	f92cf7fa 	.word	0xf92cf7fa
   18d04:	f7fa4620 	.word	0xf7fa4620
   18d08:	2423f921 	.word	0x2423f921
   18d0c:	e7b4602f 	.word	0xe7b4602f
   18d10:	f7ff4630 	.word	0xf7ff4630
   18d14:	2800fa3b 	.word	0x2800fa3b
   18d18:	6844d0b4 	.word	0x6844d0b4
   18d1c:	d0b12c00 	.word	0xd0b12c00
   18d20:	8004f8c0 	.word	0x8004f8c0
   18d24:	2472e7db 	.word	0x2472e7db
   18d28:	2473e7a7 	.word	0x2473e7a7
   18d2c:	2409e7a5 	.word	0x2409e7a5
   18d30:	240ce7a3 	.word	0x240ce7a3
   18d34:	bf00e7a1 	.word	0xbf00e7a1

00018d38 <ip_interface_bind>:
   18d38:	41f0e92d 	.word	0x41f0e92d
   18d3c:	b389b082 	.word	0xb389b082
   18d40:	4607b382 	.word	0x4607b382
   18d44:	f7ff460e 	.word	0xf7ff460e
   18d48:	4605fa21 	.word	0x4605fa21
   18d4c:	d07b2800 	.word	0xd07b2800
   18d50:	b29b6803 	.word	0xb29b6803
   18d54:	d1772b02 	.word	0xd1772b02
   18d58:	a8022100 	.word	0xa8022100
   18d5c:	1d04f840 	.word	0x1d04f840
   18d60:	8018f8d5 	.word	0x8018f8d5
   18d64:	f8c8f7fa 	.word	0xf8c8f7fa
   18d68:	f247bb30 	.word	0xf247bb30
   18d6c:	22080305 	.word	0x22080305
   18d70:	ea439c01 	.word	0xea439c01
   18d74:	60e34307 	.word	0x60e34307
   18d78:	8010f8c4 	.word	0x8010f8c4
   18d7c:	72a07260 	.word	0x72a07260
   18d80:	722272e0 	.word	0x722272e0
   18d84:	330468a3 	.word	0x330468a3
   18d88:	68eb60a3 	.word	0x68eb60a3
   18d8c:	42936872 	.word	0x42936872
   18d90:	2b02d108 	.word	0x2b02d108
   18d94:	0018f104 	.word	0x0018f104
   18d98:	d03c7832 	.word	0xd03c7832
   18d9c:	d1012b0a 	.word	0xd1012b0a
   18da0:	d00e2a24 	.word	0xd00e2a24
   18da4:	46202416 	.word	0x46202416
   18da8:	f9c2f7f9 	.word	0xf9c2f7f9
   18dac:	34fff04f 	.word	0x34fff04f
   18db0:	b0024620 	.word	0xb0024620
   18db4:	81f0e8bd 	.word	0x81f0e8bd
   18db8:	2c009c01 	.word	0x2c009c01
   18dbc:	240cd1e2 	.word	0x240cd1e2
   18dc0:	2210e7f1 	.word	0x2210e7f1
   18dc4:	18b18933 	.word	0x18b18933
   18dc8:	82a382e2 	.word	0x82a382e2
   18dcc:	fd78f00b 	.word	0xfd78f00b
   18dd0:	8ae268a3 	.word	0x8ae268a3
   18dd4:	0105f247 	.word	0x0105f247
   18dd8:	60a34413 	.word	0x60a34413
   18ddc:	4620682b 	.word	0x4620682b
   18de0:	041b0c1b 	.word	0x041b0c1b
   18de4:	0303f043 	.word	0x0303f043
   18de8:	682e602b 	.word	0x682e602b
   18dec:	f898f7fa 	.word	0xf898f7fa
   18df0:	b9d84680 	.word	0xb9d84680
   18df4:	33fff04f 	.word	0x33fff04f
   18df8:	72fff64f 	.word	0x72fff64f
   18dfc:	46382104 	.word	0x46382104
   18e00:	f958f7ff 	.word	0xf958f7ff
   18e04:	b3084604 	.word	0xb3084604
   18e08:	0c1b682b 	.word	0x0c1b682b
   18e0c:	f043041b 	.word	0xf043041b
   18e10:	602b0302 	.word	0x602b0302
   18e14:	2a10e7c7 	.word	0x2a10e7c7
   18e18:	2204d1c4 	.word	0x2204d1c4
   18e1c:	f1068933 	.word	0xf1068933
   18e20:	82e2010c 	.word	0x82e2010c
   18e24:	f00b82a3 	.word	0xf00b82a3
   18e28:	e7d1fd4b 	.word	0xe7d1fd4b
   18e2c:	b1086820 	.word	0xb1086820
   18e30:	f894f7fa 	.word	0xf894f7fa
   18e34:	04360c36 	.word	0x04360c36
   18e38:	f0464620 	.word	0xf0464620
   18e3c:	f7fa0602 	.word	0xf7fa0602
   18e40:	2423f885 	.word	0x2423f885
   18e44:	e7ae602e 	.word	0xe7ae602e
   18e48:	e7ac2409 	.word	0xe7ac2409
   18e4c:	f7ff4638 	.word	0xf7ff4638
   18e50:	2800f99d 	.word	0x2800f99d
   18e54:	6844d0ac 	.word	0x6844d0ac
   18e58:	d0a92c00 	.word	0xd0a92c00
   18e5c:	8004f8c0 	.word	0x8004f8c0
   18e60:	bf00e7d2 	.word	0xbf00e7d2

00018e64 <ip_interface_listen>:
   18e64:	41f0e92d 	.word	0x41f0e92d
   18e68:	4606b082 	.word	0x4606b082
   18e6c:	f98ef7ff 	.word	0xf98ef7ff
   18e70:	d0672800 	.word	0xd0672800
   18e74:	46056803 	.word	0x46056803
   18e78:	2b04b29b 	.word	0x2b04b29b
   18e7c:	2100d162 	.word	0x2100d162
   18e80:	46304a32 	.word	0x46304a32
   18e84:	f8def7ff 	.word	0xf8def7ff
   18e88:	28004601 	.word	0x28004601
   18e8c:	a802d15c 	.word	0xa802d15c
   18e90:	1d04f840 	.word	0x1d04f840
   18e94:	f7fa69af 	.word	0xf7fa69af
   18e98:	bba8f82f 	.word	0xbba8f82f
   18e9c:	0308f247 	.word	0x0308f247
   18ea0:	9c012208 	.word	0x9c012208
   18ea4:	4306ea43 	.word	0x4306ea43
   18ea8:	612760e3 	.word	0x612760e3
   18eac:	72a07260 	.word	0x72a07260
   18eb0:	722272e0 	.word	0x722272e0
   18eb4:	f24768a3 	.word	0xf24768a3
   18eb8:	33040108 	.word	0x33040108
   18ebc:	682b60a3 	.word	0x682b60a3
   18ec0:	0c1b4620 	.word	0x0c1b4620
   18ec4:	f043041b 	.word	0xf043041b
   18ec8:	602b0306 	.word	0x602b0306
   18ecc:	f7fa682f 	.word	0xf7fa682f
   18ed0:	4680f827 	.word	0x4680f827
   18ed4:	f04fb9e8 	.word	0xf04fb9e8
   18ed8:	f64f33ff 	.word	0xf64f33ff
   18edc:	210772ff 	.word	0x210772ff
   18ee0:	f7ff4630 	.word	0xf7ff4630
   18ee4:	4604f8e7 	.word	0x4604f8e7
   18ee8:	682bb308 	.word	0x682bb308
   18eec:	041b0c1b 	.word	0x041b0c1b
   18ef0:	0304f043 	.word	0x0304f043
   18ef4:	4620602b 	.word	0x4620602b
   18ef8:	f91af7f9 	.word	0xf91af7f9
   18efc:	34fff04f 	.word	0x34fff04f
   18f00:	b0024620 	.word	0xb0024620
   18f04:	81f0e8bd 	.word	0x81f0e8bd
   18f08:	2c009c01 	.word	0x2c009c01
   18f0c:	240cd1d2 	.word	0x240cd1d2
   18f10:	6820e7f1 	.word	0x6820e7f1
   18f14:	f7fab108 	.word	0xf7fab108
   18f18:	0c3ff821 	.word	0x0c3ff821
   18f1c:	4620043f 	.word	0x4620043f
   18f20:	0704f047 	.word	0x0704f047
   18f24:	f812f7fa 	.word	0xf812f7fa
   18f28:	602f2423 	.word	0x602f2423
   18f2c:	4630e7e3 	.word	0x4630e7e3
   18f30:	f92cf7ff 	.word	0xf92cf7ff
   18f34:	d0e32800 	.word	0xd0e32800
   18f38:	2c006844 	.word	0x2c006844
   18f3c:	f8c0d0e0 	.word	0xf8c0d0e0
   18f40:	e7d28004 	.word	0xe7d28004
   18f44:	e7d62409 	.word	0xe7d62409
   18f48:	e7d42423 	.word	0xe7d42423
   18f4c:	000183f5 	.word	0x000183f5

00018f50 <ip_interface_accept>:
   18f50:	4ff0e92d 	.word	0x4ff0e92d
   18f54:	b0852500 	.word	0xb0852500
   18f58:	4690460f 	.word	0x4690460f
   18f5c:	46069502 	.word	0x46069502
   18f60:	f914f7ff 	.word	0xf914f7ff
   18f64:	28004604 	.word	0x28004604
   18f68:	811cf000 	.word	0x811cf000
   18f6c:	b29b6803 	.word	0xb29b6803
   18f70:	d10a2b07 	.word	0xd10a2b07
   18f74:	68056803 	.word	0x68056803
   18f78:	d41600db 	.word	0xd41600db
   18f7c:	3580f415 	.word	0x3580f415
   18f80:	6805d019 	.word	0x6805d019
   18f84:	3580f415 	.word	0x3580f415
   18f88:	f04fd124 	.word	0xf04fd124
   18f8c:	9b020909 	.word	0x9b020909
   18f90:	4628b113 	.word	0x4628b113
   18f94:	f840f7ff 	.word	0xf840f7ff
   18f98:	f04f4648 	.word	0xf04f4648
   18f9c:	f7f939ff 	.word	0xf7f939ff
   18fa0:	4648f8c7 	.word	0x4648f8c7
   18fa4:	e8bdb005 	.word	0xe8bdb005
   18fa8:	f4158ff0 	.word	0xf4158ff0
   18fac:	d16d3580 	.word	0xd16d3580
   18fb0:	0923f04f 	.word	0x0923f04f
   18fb4:	f44fe7eb 	.word	0xf44fe7eb
   18fb8:	f04f3280 	.word	0xf04f3280
   18fbc:	461133ff 	.word	0x461133ff
   18fc0:	f7ff4630 	.word	0xf7ff4630
   18fc4:	4681f877 	.word	0x4681f877
   18fc8:	d07e2800 	.word	0xd07e2800
   18fcc:	f4156825 	.word	0xf4156825
   18fd0:	d0dc3580 	.word	0xd0dc3580
   18fd4:	30fff04f 	.word	0x30fff04f
   18fd8:	e9cd2300 	.word	0xe9cd2300
   18fdc:	4a750300 	.word	0x4a750300
   18fe0:	a8026921 	.word	0xa8026921
   18fe4:	ffc2f7fe 	.word	0xffc2f7fe
   18fe8:	46059b02 	.word	0x46059b02
   18fec:	f0002b00 	.word	0xf0002b00
   18ff0:	210080dd 	.word	0x210080dd
   18ff4:	a8046962 	.word	0xa8046962
   18ff8:	68e2615a 	.word	0x68e2615a
   18ffc:	1d04f840 	.word	0x1d04f840
   19000:	692260da 	.word	0x692260da
   19004:	f8d4611a 	.word	0xf8d4611a
   19008:	f7f99018 	.word	0xf7f99018
   1900c:	2800ff75 	.word	0x2800ff75
   19010:	f247d143 	.word	0xf247d143
   19014:	2108030c 	.word	0x2108030c
   19018:	b00cf8dd 	.word	0xb00cf8dd
   1901c:	4306ea43 	.word	0x4306ea43
   19020:	300cf8cb 	.word	0x300cf8cb
   19024:	9010f8cb 	.word	0x9010f8cb
   19028:	0009f88b 	.word	0x0009f88b
   1902c:	000af88b 	.word	0x000af88b
   19030:	000bf88b 	.word	0x000bf88b
   19034:	1008f88b 	.word	0x1008f88b
   19038:	f2476823 	.word	0xf2476823
   1903c:	0c1b010c 	.word	0x0c1b010c
   19040:	f043041b 	.word	0xf043041b
   19044:	60230308 	.word	0x60230308
   19048:	f8d44658 	.word	0xf8d44658
   1904c:	f7f99000 	.word	0xf7f99000
   19050:	4682ff67 	.word	0x4682ff67
   19054:	6822bb48 	.word	0x6822bb48
   19058:	f04f9900 	.word	0xf04f9900
   1905c:	400a33ff 	.word	0x400a33ff
   19060:	21096022 	.word	0x21096022
   19064:	72fff64f 	.word	0x72fff64f
   19068:	f7ff4630 	.word	0xf7ff4630
   1906c:	4681f823 	.word	0x4681f823
   19070:	f0002800 	.word	0xf0002800
   19074:	68238085 	.word	0x68238085
   19078:	431a9a01 	.word	0x431a9a01
   1907c:	68236022 	.word	0x68236022
   19080:	041b0c1b 	.word	0x041b0c1b
   19084:	0307f043 	.word	0x0307f043
   19088:	e7806023 	.word	0xe7806023
   1908c:	5280f06f 	.word	0x5280f06f
   19090:	5380f04f 	.word	0x5380f04f
   19094:	2300e9cd 	.word	0x2300e9cd
   19098:	f8dde7a1 	.word	0xf8dde7a1
   1909c:	f04fb00c 	.word	0xf04fb00c
   190a0:	f1bb090c 	.word	0xf1bb090c
   190a4:	d1c70f00 	.word	0xd1c70f00
   190a8:	f8dbe771 	.word	0xf8dbe771
   190ac:	b1080000 	.word	0xb1080000
   190b0:	ff54f7f9 	.word	0xff54f7f9
   190b4:	4919ea4f 	.word	0x4919ea4f
   190b8:	ea4f4658 	.word	0xea4f4658
   190bc:	f7f94909 	.word	0xf7f94909
   190c0:	f049ff45 	.word	0xf049ff45
   190c4:	60230307 	.word	0x60230307
   190c8:	4630e772 	.word	0x4630e772
   190cc:	f85ef7ff 	.word	0xf85ef7ff
   190d0:	f8d0b130 	.word	0xf8d0b130
   190d4:	f1b99004 	.word	0xf1b99004
   190d8:	d0010f00 	.word	0xd0010f00
   190dc:	e7756045 	.word	0xe7756045
   190e0:	03d96823 	.word	0x03d96823
   190e4:	af76f53f 	.word	0xaf76f53f
   190e8:	99024d33 	.word	0x99024d33
   190ec:	3026f855 	.word	0x3026f855
   190f0:	618b699b 	.word	0x618b699b
   190f4:	68cbb147 	.word	0x68cbb147
   190f8:	d0242b0a 	.word	0xd0242b0a
   190fc:	d1032b02 	.word	0xd1032b02
   19100:	2000f8d8 	.word	0x2000f8d8
   19104:	d0322a10 	.word	0xd0322a10
   19108:	482c680a 	.word	0x482c680a
   1910c:	f0424002 	.word	0xf0424002
   19110:	600a0205 	.word	0x600a0205
   19114:	68119a02 	.word	0x68119a02
   19118:	3100f441 	.word	0x3100f441
   1911c:	68116011 	.word	0x68116011
   19120:	1180f441 	.word	0x1180f441
   19124:	68236011 	.word	0x68236011
   19128:	f0434003 	.word	0xf0434003
   1912c:	60230307 	.word	0x60230307
   19130:	0026f855 	.word	0x0026f855
   19134:	ff0af7f9 	.word	0xff0af7f9
   19138:	46482300 	.word	0x46482300
   1913c:	3026f845 	.word	0x3026f845
   19140:	e8bdb005 	.word	0xe8bdb005
   19144:	f8d88ff0 	.word	0xf8d88ff0
   19148:	2a242000 	.word	0x2a242000
   1914c:	703ad1dc 	.word	0x703ad1dc
   19150:	607b2210 	.word	0x607b2210
   19154:	3026f855 	.word	0x3026f855
   19158:	0010f107 	.word	0x0010f107
   1915c:	813b8b9b 	.word	0x813b8b9b
   19160:	1026f855 	.word	0x1026f855
   19164:	f00b3120 	.word	0xf00b3120
   19168:	9902fbab 	.word	0x9902fbab
   1916c:	703ae7cc 	.word	0x703ae7cc
   19170:	f855607b 	.word	0xf855607b
   19174:	f1073026 	.word	0xf1073026
   19178:	8b9b000c 	.word	0x8b9b000c
   1917c:	e7ee2204 	.word	0xe7ee2204
   19180:	f7ff4630 	.word	0xf7ff4630
   19184:	b138f803 	.word	0xb138f803
   19188:	9004f8d0 	.word	0x9004f8d0
   1918c:	0f00f1b9 	.word	0x0f00f1b9
   19190:	f8c0d002 	.word	0xf8c0d002
   19194:	e76ea004 	.word	0xe76ea004
   19198:	9a016823 	.word	0x9a016823
   1919c:	431346a9 	.word	0x431346a9
   191a0:	e7a16023 	.word	0xe7a16023
   191a4:	f04f4605 	.word	0xf04f4605
   191a8:	e6f00909 	.word	0xe6f00909
   191ac:	090cf04f 	.word	0x090cf04f
   191b0:	bf00e6f2 	.word	0xbf00e6f2
   191b4:	000183f5 	.word	0x000183f5
   191b8:	20020614 	.word	0x20020614
   191bc:	ffff0000 	.word	0xffff0000

000191c0 <ip_interface_setopt>:
   191c0:	41f0e92d 	.word	0x41f0e92d
   191c4:	b0842901 	.word	0xb0842901
   191c8:	809cf040 	.word	0x809cf040
   191cc:	4690460e 	.word	0x4690460e
   191d0:	4607461d 	.word	0x4607461d
   191d4:	ffdaf7fe 	.word	0xffdaf7fe
   191d8:	28004604 	.word	0x28004604
   191dc:	80a5f000 	.word	0x80a5f000
   191e0:	0f19f1b8 	.word	0x0f19f1b8
   191e4:	2d00d16e 	.word	0x2d00d16e
   191e8:	8092f000 	.word	0x8092f000
   191ec:	f00b4628 	.word	0xf00b4628
   191f0:	9b0afb33 	.word	0x9b0afb33
   191f4:	f0404298 	.word	0xf0404298
   191f8:	6823808b 	.word	0x6823808b
   191fc:	2b02b29b 	.word	0x2b02b29b
   19200:	4629d173 	.word	0x4629d173
   19204:	f00768e0 	.word	0xf00768e0
   19208:	9002feb9 	.word	0x9002feb9
   1920c:	bf083001 	.word	0xbf083001
   19210:	d04e2516 	.word	0xd04e2516
   19214:	025b6823 	.word	0x025b6823
   19218:	6823d44a 	.word	0x6823d44a
   1921c:	0300f413 	.word	0x0300f413
   19220:	6826d146 	.word	0x6826d146
   19224:	a8046822 	.word	0xa8046822
   19228:	0280f442 	.word	0x0280f442
   1922c:	21046022 	.word	0x21046022
   19230:	3d04f840 	.word	0x3d04f840
   19234:	8018f8d4 	.word	0x8018f8d4
   19238:	fe5ef7f9 	.word	0xfe5ef7f9
   1923c:	d14e2800 	.word	0xd14e2800
   19240:	0203f247 	.word	0x0203f247
   19244:	21082300 	.word	0x21082300
   19248:	ea429d03 	.word	0xea429d03
   1924c:	60ea4207 	.word	0x60ea4207
   19250:	8010f8c5 	.word	0x8010f8c5
   19254:	726b7229 	.word	0x726b7229
   19258:	72eb72ab 	.word	0x72eb72ab
   1925c:	0c08f04f 	.word	0x0c08f04f
   19260:	20102300 	.word	0x20102300
   19264:	68aa2130 	.word	0x68aa2130
   19268:	4462756b 	.word	0x4462756b
   1926c:	75ab60aa 	.word	0x75ab60aa
   19270:	76ab75eb 	.word	0x76ab75eb
   19274:	f88576eb 	.word	0xf88576eb
   19278:	7628c014 	.word	0x7628c014
   1927c:	22047669 	.word	0x22047669
   19280:	010ceb0d 	.word	0x010ceb0d
   19284:	f00b6828 	.word	0xf00b6828
   19288:	f247fb1b 	.word	0xf247fb1b
   1928c:	46280103 	.word	0x46280103
   19290:	fe46f7f9 	.word	0xfe46f7f9
   19294:	bb504680 	.word	0xbb504680
   19298:	0200f44f 	.word	0x0200f44f
   1929c:	33fff04f 	.word	0x33fff04f
   192a0:	46384611 	.word	0x46384611
   192a4:	ff06f7fe 	.word	0xff06f7fe
   192a8:	b3984605 	.word	0xb3984605
   192ac:	e0006026 	.word	0xe0006026
   192b0:	46282523 	.word	0x46282523
   192b4:	ff3cf7f8 	.word	0xff3cf7f8
   192b8:	35fff04f 	.word	0x35fff04f
   192bc:	b0044628 	.word	0xb0044628
   192c0:	81f0e8bd 	.word	0x81f0e8bd
   192c4:	46429b0a 	.word	0x46429b0a
   192c8:	46319300 	.word	0x46319300
   192cc:	4638462b 	.word	0x4638462b
   192d0:	ff84f7fe 	.word	0xff84f7fe
   192d4:	46284605 	.word	0x46284605
   192d8:	e8bdb004 	.word	0xe8bdb004
   192dc:	9d0381f0 	.word	0x9d0381f0
   192e0:	d1bb2d00 	.word	0xd1bb2d00
   192e4:	250c6026 	.word	0x250c6026
   192e8:	2509e7e3 	.word	0x2509e7e3
   192ec:	6828e7e1 	.word	0x6828e7e1
   192f0:	f7f9b108 	.word	0xf7f9b108
   192f4:	4628fe33 	.word	0x4628fe33
   192f8:	fe28f7f9 	.word	0xfe28f7f9
   192fc:	60262523 	.word	0x60262523
   19300:	e7d66026 	.word	0xe7d66026
   19304:	f7f8202a 	.word	0xf7f8202a
   19308:	f04fff13 	.word	0xf04fff13
   1930c:	e7d535ff 	.word	0xe7d535ff
   19310:	e7ce250e 	.word	0xe7ce250e
   19314:	f7fe4638 	.word	0xf7fe4638
   19318:	b120ff39 	.word	0xb120ff39
   1931c:	b1156845 	.word	0xb1156845
   19320:	8004f8c0 	.word	0x8004f8c0
   19324:	6026e7c2 	.word	0x6026e7c2
   19328:	2009e7c8 	.word	0x2009e7c8
   1932c:	ff00f7f8 	.word	0xff00f7f8
   19330:	35fff04f 	.word	0x35fff04f
   19334:	bf00e7c2 	.word	0xbf00e7c2

00019338 <ip_interface_getopt>:
   19338:	bf86f7fe 	.word	0xbf86f7fe

0001933c <ip_interface_getaddrinfo>:
   1933c:	4ff0e92d 	.word	0x4ff0e92d
   19340:	0c00f04f 	.word	0x0c00f04f
   19344:	4e722401 	.word	0x4e722401
   19348:	a1d0f8df 	.word	0xa1d0f8df
   1934c:	91d0f8df 	.word	0x91d0f8df
   19350:	4607b085 	.word	0x4607b085
   19354:	93014615 	.word	0x93014615
   19358:	c000f8a6 	.word	0xc000f8a6
   1935c:	4000f8ca 	.word	0x4000f8ca
   19360:	4000f8c9 	.word	0x4000f8c9
   19364:	4608b171 	.word	0x4608b171
   19368:	4661220a 	.word	0x4661220a
   1936c:	f93af00b 	.word	0xf93af00b
   19370:	73fef64f 	.word	0x73fef64f
   19374:	429a1e42 	.word	0x429a1e42
   19378:	8083f200 	.word	0x8083f200
   1937c:	ea430203 	.word	0xea430203
   19380:	80302020 	.word	0x80302020
   19384:	819cf8df 	.word	0x819cf8df
   19388:	3000f8d8 	.word	0x3000f8d8
   1938c:	d1742b00 	.word	0xd1742b00
   19390:	60134a60 	.word	0x60134a60
   19394:	60134a60 	.word	0x60134a60
   19398:	d0622f00 	.word	0xd0622f00
   1939c:	f00b4638 	.word	0xf00b4638
   193a0:	4683fa5b 	.word	0x4683fa5b
   193a4:	69eab125 	.word	0x69eab125
   193a8:	6851b112 	.word	0x6851b112
   193ac:	d06c2966 	.word	0xd06c2966
   193b0:	32fff04f 	.word	0x32fff04f
   193b4:	ae042100 	.word	0xae042100
   193b8:	1d04f846 	.word	0x1d04f846
   193bc:	46594630 	.word	0x46594630
   193c0:	f7f99200 	.word	0xf7f99200
   193c4:	9a00fd99 	.word	0x9a00fd99
   193c8:	d14c2800 	.word	0xd14c2800
   193cc:	010df247 	.word	0x010df247
   193d0:	0c08f04f 	.word	0x0c08f04f
   193d4:	ea419c03 	.word	0xea419c03
   193d8:	60e14102 	.word	0x60e14102
   193dc:	72606122 	.word	0x72606122
   193e0:	72e072a0 	.word	0x72e072a0
   193e4:	c008f884 	.word	0xc008f884
   193e8:	d0762d00 	.word	0xd0762d00
   193ec:	f022686a 	.word	0xf022686a
   193f0:	29020108 	.word	0x29020108
   193f4:	2a05d05c 	.word	0x2a05d05c
   193f8:	68a9d178 	.word	0x68a9d178
   193fc:	f8c92902 	.word	0xf8c92902
   19400:	d0611000 	.word	0xd0611000
   19404:	68ea61a2 	.word	0x68ea61a2
   19408:	68aa6222 	.word	0x68aa6222
   1940c:	682a61e2 	.word	0x682a61e2
   19410:	68a26162 	.word	0x68a26162
   19414:	60a23210 	.word	0x60a23210
   19418:	6820b12f 	.word	0x6820b12f
   1941c:	465ab118 	.word	0x465ab118
   19420:	f00b4639 	.word	0xf00b4639
   19424:	2301fa4d 	.word	0x2301fa4d
   19428:	010df247 	.word	0x010df247
   1942c:	f8c84620 	.word	0xf8c84620
   19430:	f7f93000 	.word	0xf7f93000
   19434:	2800fd75 	.word	0x2800fd75
   19438:	f04fd156 	.word	0xf04fd156
   1943c:	930333ff 	.word	0x930333ff
   19440:	46204631 	.word	0x46204631
   19444:	fde4f7f8 	.word	0xfde4f7f8
   19448:	3000f8d8 	.word	0x3000f8d8
   1944c:	d0f72b01 	.word	0xd0f72b01
   19450:	68184b31 	.word	0x68184b31
   19454:	d13b2800 	.word	0xd13b2800
   19458:	9a014b2e 	.word	0x9a014b2e
   1945c:	6013681b 	.word	0x6013681b
   19460:	46bbe00c 	.word	0x46bbe00c
   19464:	9c03e79e 	.word	0x9c03e79e
   19468:	d1bd2c00 	.word	0xd1bd2c00
   1946c:	2300200c 	.word	0x2300200c
   19470:	3000f8c8 	.word	0x3000f8c8
   19474:	e8bdb005 	.word	0xe8bdb005
   19478:	20738ff0 	.word	0x20738ff0
   1947c:	e8bdb005 	.word	0xe8bdb005
   19480:	20168ff0 	.word	0x20168ff0
   19484:	e8bdb005 	.word	0xe8bdb005
   19488:	68918ff0 	.word	0x68918ff0
   1948c:	7f00f5b1 	.word	0x7f00f5b1
   19490:	f240d18e 	.word	0xf240d18e
   19494:	68d02102 	.word	0x68d02102
   19498:	d1894288 	.word	0xd1894288
   1949c:	29006991 	.word	0x29006991
   194a0:	6868d086 	.word	0x6868d086
   194a4:	fd6af007 	.word	0xfd6af007
   194a8:	d0811c43 	.word	0xd0811c43
   194ac:	e7814602 	.word	0xe7814602
   194b0:	290268a9 	.word	0x290268a9
   194b4:	1000f8c9 	.word	0x1000f8c9
   194b8:	2a05d006 	.word	0x2a05d006
   194bc:	2a0ad0a2 	.word	0x2a0ad0a2
   194c0:	2201bf14 	.word	0x2201bf14
   194c4:	e79d2202 	.word	0xe79d2202
   194c8:	f8ca2102 	.word	0xf8ca2102
   194cc:	e7f41000 	.word	0xe7f41000
   194d0:	68184b11 	.word	0x68184b11
   194d4:	d0d12800 	.word	0xd0d12800
   194d8:	4629e7c9 	.word	0x4629e7c9
   194dc:	f1042210 	.word	0xf1042210
   194e0:	f00b0014 	.word	0xf00b0014
   194e4:	e794fa1a 	.word	0xe794fa1a
   194e8:	e7c02023 	.word	0xe7c02023
   194ec:	f7f8202f 	.word	0xf7f8202f
   194f0:	68a2fe1f 	.word	0x68a2fe1f
   194f4:	60a23210 	.word	0x60a23210
   194f8:	f04fb917 	.word	0xf04fb917
   194fc:	e7b630ff 	.word	0xe7b630ff
   19500:	28006820 	.word	0x28006820
   19504:	465ad0f9 	.word	0x465ad0f9
   19508:	f00b4639 	.word	0xf00b4639
   1950c:	e7f4f9d9 	.word	0xe7f4f9d9
   19510:	20025e1a 	.word	0x20025e1a
   19514:	2002060c 	.word	0x2002060c
   19518:	20020604 	.word	0x20020604
   1951c:	200205fc 	.word	0x200205fc
   19520:	20020600 	.word	0x20020600
   19524:	20020608 	.word	0x20020608

00019528 <ip_interface_freeaddrinfo>:
   19528:	4c0bb538 	.word	0x4c0bb538
   1952c:	2b026823 	.word	0x2b026823
   19530:	bd38d000 	.word	0xbd38d000
   19534:	4605b130 	.word	0x4605b130
   19538:	f0066940 	.word	0xf0066940
   1953c:	4628f85b 	.word	0x4628f85b
   19540:	f858f006 	.word	0xf858f006
   19544:	4a052300 	.word	0x4a052300
   19548:	60234905 	.word	0x60234905
   1954c:	68086013 	.word	0x68086013
   19550:	4038e8bd 	.word	0x4038e8bd
   19554:	bd02f7f9 	.word	0xbd02f7f9
   19558:	20020608 	.word	0x20020608
   1955c:	20020604 	.word	0x20020604
   19560:	20020610 	.word	0x20020610

00019564 <rpc_ip_event_handler>:
   19564:	4ff0e92d 	.word	0x4ff0e92d
   19568:	4310f401 	.word	0x4310f401
   1956c:	4f10f5b3 	.word	0x4f10f5b3
   19570:	b0894605 	.word	0xb0894605
   19574:	68c0460e 	.word	0x68c0460e
   19578:	0c04d05e 	.word	0x0c04d05e
   1957c:	f7fe4620 	.word	0xf7fe4620
   19580:	f248fe05 	.word	0xf248fe05
   19584:	429e030d 	.word	0x429e030d
   19588:	46a04607 	.word	0x46a04607
   1958c:	2f00d041 	.word	0x2f00d041
   19590:	4640d04e 	.word	0x4640d04e
   19594:	462a4633 	.word	0x462a4633
   19598:	f7fc4639 	.word	0xf7fc4639
   1959c:	2800fbff 	.word	0x2800fbff
   195a0:	f248d042 	.word	0xf248d042
   195a4:	429e0307 	.word	0x429e0307
   195a8:	f248d961 	.word	0xf248d961
   195ac:	429e030c 	.word	0x429e030c
   195b0:	816bf000 	.word	0x816bf000
   195b4:	8106f240 	.word	0x8106f240
   195b8:	0302f249 	.word	0x0302f249
   195bc:	f000429e 	.word	0xf000429e
   195c0:	f249808c 	.word	0xf249808c
   195c4:	429e0303 	.word	0x429e0303
   195c8:	8180f000 	.word	0x8180f000
   195cc:	0301f249 	.word	0x0301f249
   195d0:	d12d429e 	.word	0xd12d429e
   195d4:	f414683c 	.word	0xf414683c
   195d8:	f0001480 	.word	0xf0001480
   195dc:	68ab81c3 	.word	0x68ab81c3
   195e0:	f2002b04 	.word	0xf2002b04
   195e4:	240081eb 	.word	0x240081eb
   195e8:	68294626 	.word	0x68294626
   195ec:	e9cd686a 	.word	0xe9cd686a
   195f0:	e9cd6406 	.word	0xe9cd6406
   195f4:	69f81204 	.word	0x69f81204
   195f8:	6803a904 	.word	0x6803a904
   195fc:	4798685b 	.word	0x4798685b
   19600:	f0003001 	.word	0xf0003001
   19604:	683b81cc 	.word	0x683b81cc
   19608:	f4432000 	.word	0xf4432000
   1960c:	603b3380 	.word	0x603b3380
   19610:	f8dfe00b 	.word	0xf8dfe00b
   19614:	682f9344 	.word	0x682f9344
   19618:	3000f8d9 	.word	0x3000f8d9
   1961c:	d0152b01 	.word	0xd0152b01
   19620:	4638b117 	.word	0x4638b117
   19624:	fc9af7f9 	.word	0xfc9af7f9
   19628:	b0092000 	.word	0xb0092000
   1962c:	8ff0e8bd 	.word	0x8ff0e8bd
   19630:	28006828 	.word	0x28006828
   19634:	e7f7d1f6 	.word	0xe7f7d1f6
   19638:	fd5ef7fe 	.word	0xfd5ef7fe
   1963c:	f7fe4680 	.word	0xf7fe4680
   19640:	4607fda5 	.word	0x4607fda5
   19644:	2f004644 	.word	0x2f004644
   19648:	e7f1d1a3 	.word	0xe7f1d1a3
   1964c:	2b00696b 	.word	0x2b00696b
   19650:	2b10d048 	.word	0x2b10d048
   19654:	4ababf96 	.word	0x4ababf96
   19658:	f852212d 	.word	0xf852212d
   1965c:	23021023 	.word	0x23021023
   19660:	60114ab8 	.word	0x60114ab8
   19664:	3000f8c9 	.word	0x3000f8c9
   19668:	d1da2f00 	.word	0xd1da2f00
   1966c:	f248e7dc 	.word	0xf248e7dc
   19670:	429e0306 	.word	0x429e0306
   19674:	80e6f080 	.word	0x80e6f080
   19678:	0302f248 	.word	0x0302f248
   1967c:	f000429e 	.word	0xf000429e
   19680:	d91880c8 	.word	0xd91880c8
   19684:	0303f248 	.word	0x0303f248
   19688:	f000429e 	.word	0xf000429e
   1968c:	f2488112 	.word	0xf2488112
   19690:	429e0305 	.word	0x429e0305
   19694:	683bd1cc 	.word	0x683bd1cc
   19698:	2b03b29b 	.word	0x2b03b29b
   1969c:	696bd1c4 	.word	0x696bd1c4
   196a0:	f0002b00 	.word	0xf0002b00
   196a4:	2b10817e 	.word	0x2b10817e
   196a8:	813bf200 	.word	0x813bf200
   196ac:	f8524aa4 	.word	0xf8524aa4
   196b0:	607b3023 	.word	0x607b3023
   196b4:	f248e7b8 	.word	0xf248e7b8
   196b8:	429e0301 	.word	0x429e0301
   196bc:	683bd1b8 	.word	0x683bd1b8
   196c0:	d1b12b01 	.word	0xd1b12b01
   196c4:	28006968 	.word	0x28006968
   196c8:	8173f000 	.word	0x8173f000
   196cc:	f2002810 	.word	0xf2002810
   196d0:	4b9b8128 	.word	0x4b9b8128
   196d4:	3020f853 	.word	0x3020f853
   196d8:	683be7eb 	.word	0x683be7eb
   196dc:	2b07b29b 	.word	0x2b07b29b
   196e0:	e790d1a2 	.word	0xe790d1a2
   196e4:	601f4b98 	.word	0x601f4b98
   196e8:	016369ac 	.word	0x016369ac
   196ec:	93034618 	.word	0x93034618
   196f0:	ff62f005 	.word	0xff62f005
   196f4:	28009002 	.word	0x28009002
   196f8:	8103f000 	.word	0x8103f000
   196fc:	192800e5 	.word	0x192800e5
   19700:	f0050080 	.word	0xf0050080
   19704:	2800ff59 	.word	0x2800ff59
   19708:	810df000 	.word	0x810df000
   1970c:	d0782c00 	.word	0xd0782c00
   19710:	0210f105 	.word	0x0210f105
   19714:	93011883 	.word	0x93011883
   19718:	24049b02 	.word	0x24049b02
   1971c:	a23cf8df 	.word	0xa23cf8df
   19720:	b23cf8df 	.word	0xb23cf8df
   19724:	0810f100 	.word	0x0810f100
   19728:	0620f103 	.word	0x0620f103
   1972c:	220ae01d 	.word	0x220ae01d
   19730:	2c0cf848 	.word	0x2c0cf848
   19734:	0224f04f 	.word	0x0224f04f
   19738:	f8084640 	.word	0xf8084640
   1973c:	f8282c10 	.word	0xf8282c10
   19740:	f8563c08 	.word	0xf8563c08
   19744:	f00b2c10 	.word	0xf00b2c10
   19748:	f856f8bb 	.word	0xf856f8bb
   1974c:	f1083c10 	.word	0xf1083c10
   19750:	441c0808 	.word	0x441c0808
   19754:	f846193b 	.word	0xf846193b
   19758:	9b013c08 	.word	0x9b013c08
   1975c:	6c04f846 	.word	0x6c04f846
   19760:	442c4598 	.word	0x442c4598
   19764:	0620f106 	.word	0x0620f106
   19768:	593bd045 	.word	0x593bd045
   1976c:	f846193a 	.word	0xf846193a
   19770:	68533c20 	.word	0x68533c20
   19774:	1000f8da 	.word	0x1000f8da
   19778:	bf142b02 	.word	0xbf142b02
   1977c:	200a2002 	.word	0x200a2002
   19780:	3000f8db 	.word	0x3000f8db
   19784:	0107e946 	.word	0x0107e946
   19788:	3c14f846 	.word	0x3c14f846
   1978c:	f1a88a10 	.word	0xf1a88a10
   19790:	f8460310 	.word	0xf8460310
   19794:	8a550c10 	.word	0x8a550c10
   19798:	3c0cf846 	.word	0x3c0cf846
   1979c:	34144b6b 	.word	0x34144b6b
   197a0:	eb072804 	.word	0xeb072804
   197a4:	881b0104 	.word	0x881b0104
   197a8:	2210d1c1 	.word	0x2210d1c1
   197ac:	f8282002 	.word	0xf8282002
   197b0:	f8483c08 	.word	0xf8483c08
   197b4:	f8080c0c 	.word	0xf8080c0c
   197b8:	f8562c10 	.word	0xf8562c10
   197bc:	f1a82c10 	.word	0xf1a82c10
   197c0:	e7c00004 	.word	0xe7c00004
   197c4:	0308f248 	.word	0x0308f248
   197c8:	d04e429e 	.word	0xd04e429e
   197cc:	0309f248 	.word	0x0309f248
   197d0:	f47f429e 	.word	0xf47f429e
   197d4:	683baf2d 	.word	0x683baf2d
   197d8:	2b0db29b 	.word	0x2b0db29b
   197dc:	af24f47f 	.word	0xaf24f47f
   197e0:	28006968 	.word	0x28006968
   197e4:	af72f47f 	.word	0xaf72f47f
   197e8:	0c1b683b 	.word	0x0c1b683b
   197ec:	f043041b 	.word	0xf043041b
   197f0:	603b030e 	.word	0x603b030e
   197f4:	2200e719 	.word	0x2200e719
   197f8:	1302e9dd 	.word	0x1302e9dd
   197fc:	f843440b 	.word	0xf843440b
   19800:	22022c04 	.word	0x22022c04
   19804:	f8c94b52 	.word	0xf8c94b52
   19808:	9a022000 	.word	0x9a022000
   1980c:	601a2000 	.word	0x601a2000
   19810:	683be70b 	.word	0x683be70b
   19814:	f57f0099 	.word	0xf57f0099
   19818:	683baf07 	.word	0x683baf07
   1981c:	5300f023 	.word	0x5300f023
   19820:	6968603b 	.word	0x6968603b
   19824:	f0002800 	.word	0xf0002800
   19828:	281080a2 	.word	0x281080a2
   1982c:	232dbf8e 	.word	0x232dbf8e
   19830:	f8534b43 	.word	0xf8534b43
   19834:	20003020 	.word	0x20003020
   19838:	683b607b 	.word	0x683b607b
   1983c:	2380f443 	.word	0x2380f443
   19840:	e6f2603b 	.word	0xe6f2603b
   19844:	029a683b 	.word	0x029a683b
   19848:	aeeef57f 	.word	0xaeeef57f
   1984c:	2b00696b 	.word	0x2b00696b
   19850:	809cf000 	.word	0x809cf000
   19854:	f47f2b6b 	.word	0xf47f2b6b
   19858:	693baf26 	.word	0x693baf26
   1985c:	f0002b01 	.word	0xf0002b01
   19860:	230c80b1 	.word	0x230c80b1
   19864:	607b2000 	.word	0x607b2000
   19868:	683be6df 	.word	0x683be6df
   1986c:	2b06b29b 	.word	0x2b06b29b
   19870:	aedaf47f 	.word	0xaedaf47f
   19874:	28006968 	.word	0x28006968
   19878:	af28f47f 	.word	0xaf28f47f
   1987c:	0c1b683b 	.word	0x0c1b683b
   19880:	f043041b 	.word	0xf043041b
   19884:	603b0307 	.word	0x603b0307
   19888:	683be6cf 	.word	0x683be6cf
   1988c:	2b08b29b 	.word	0x2b08b29b
   19890:	aecaf47f 	.word	0xaecaf47f
   19894:	2b00696b 	.word	0x2b00696b
   19898:	af05f47f 	.word	0xaf05f47f
   1989c:	20014b2d 	.word	0x20014b2d
   198a0:	5024f843 	.word	0x5024f843
   198a4:	0c1b683b 	.word	0x0c1b683b
   198a8:	f043041b 	.word	0xf043041b
   198ac:	603b0309 	.word	0x603b0309
   198b0:	683be6bb 	.word	0x683be6bb
   198b4:	f57f025b 	.word	0xf57f025b
   198b8:	6968aeb7 	.word	0x6968aeb7
   198bc:	f47f2800 	.word	0xf47f2800
   198c0:	683baf05 	.word	0x683baf05
   198c4:	0300f443 	.word	0x0300f443
   198c8:	e6ae603b 	.word	0xe6ae603b
   198cc:	f443683b 	.word	0xf443683b
   198d0:	603b2300 	.word	0x603b2300
   198d4:	f423683b 	.word	0xf423683b
   198d8:	603b1300 	.word	0x603b1300
   198dc:	f423683b 	.word	0xf423683b
   198e0:	603b3300 	.word	0x603b3300
   198e4:	2b6c692b 	.word	0x2b6c692b
   198e8:	2b10d021 	.word	0x2b10d021
   198ec:	232dbf8c 	.word	0x232dbf8c
   198f0:	f04f4a13 	.word	0xf04f4a13
   198f4:	bf980000 	.word	0xbf980000
   198f8:	3023f852 	.word	0x3023f852
   198fc:	60bb607b 	.word	0x60bb607b
   19900:	f005e693 	.word	0xf005e693
   19904:	200cfe77 	.word	0x200cfe77
   19908:	490e2302 	.word	0x490e2302
   1990c:	60084a10 	.word	0x60084a10
   19910:	9902682f 	.word	0x9902682f
   19914:	f8c96011 	.word	0xf8c96011
   19918:	2f003000 	.word	0x2f003000
   1991c:	ae81f47f 	.word	0xae81f47f
   19920:	232de682 	.word	0x232de682
   19924:	220ce6c5 	.word	0x220ce6c5
   19928:	601a4b06 	.word	0x601a4b06
   1992c:	2239e769 	.word	0x2239e769
   19930:	2000683b 	.word	0x2000683b
   19934:	4380f043 	.word	0x4380f043
   19938:	607a603b 	.word	0x607a603b
   1993c:	e67460ba 	.word	0xe67460ba
   19940:	00026ab8 	.word	0x00026ab8
   19944:	20020604 	.word	0x20020604
   19948:	20020610 	.word	0x20020610
   1994c:	20025e1a 	.word	0x20025e1a
   19950:	2002060c 	.word	0x2002060c
   19954:	20020614 	.word	0x20020614
   19958:	20020608 	.word	0x20020608
   1995c:	20020600 	.word	0x20020600
   19960:	200205fc 	.word	0x200205fc
   19964:	f7f96828 	.word	0xf7f96828
   19968:	4620faf9 	.word	0x4620faf9
   1996c:	683be65d 	.word	0x683be65d
   19970:	3300f443 	.word	0x3300f443
   19974:	683b603b 	.word	0x683b603b
   19978:	1380f443 	.word	0x1380f443
   1997c:	683b603b 	.word	0x683b603b
   19980:	041b0c1b 	.word	0x041b0c1b
   19984:	0305f043 	.word	0x0305f043
   19988:	e64e603b 	.word	0xe64e603b
   1998c:	4a28683b 	.word	0x4a28683b
   19990:	3300f443 	.word	0x3300f443
   19994:	2001603b 	.word	0x2001603b
   19998:	5024f842 	.word	0x5024f842
   1999c:	2002e645 	.word	0x2002e645
   199a0:	683be643 	.word	0x683be643
   199a4:	0c1b2000 	.word	0x0c1b2000
   199a8:	f043041b 	.word	0xf043041b
   199ac:	603b0304 	.word	0x603b0304
   199b0:	2302e63b 	.word	0x2302e63b
   199b4:	69ab603b 	.word	0x69ab603b
   199b8:	e63661bb 	.word	0xe63661bb
   199bc:	b94c8a6c 	.word	0xb94c8a6c
   199c0:	e6124626 	.word	0xe6124626
   199c4:	683b220c 	.word	0x683b220c
   199c8:	f0432000 	.word	0xf0432000
   199cc:	603b6300 	.word	0x603b6300
   199d0:	e62a607a 	.word	0xe62a607a
   199d4:	f0052024 	.word	0xf0052024
   199d8:	4606fdef 	.word	0x4606fdef
   199dc:	8a6ab158 	.word	0x8a6ab158
   199e0:	d0182a10 	.word	0xd0182a10
   199e4:	d00a2a04 	.word	0xd00a2a04
   199e8:	f7f96828 	.word	0xf7f96828
   199ec:	4630fab7 	.word	0x4630fab7
   199f0:	fe00f005 	.word	0xfe00f005
   199f4:	6828e618 	.word	0x6828e618
   199f8:	fab0f7f9 	.word	0xfab0f7f9
   199fc:	2302e614 	.word	0x2302e614
   19a00:	60432410 	.word	0x60432410
   19a04:	8a2b7004 	.word	0x8a2b7004
   19a08:	0114f105 	.word	0x0114f105
   19a0c:	300c8103 	.word	0x300c8103
   19a10:	ff56f00a 	.word	0xff56f00a
   19a14:	230ae5e9 	.word	0x230ae5e9
   19a18:	60432424 	.word	0x60432424
   19a1c:	8a2b7004 	.word	0x8a2b7004
   19a20:	0114f105 	.word	0x0114f105
   19a24:	30108103 	.word	0x30108103
   19a28:	ff4af00a 	.word	0xff4af00a
   19a2c:	bf00e5dd 	.word	0xbf00e5dd
   19a30:	20020614 	.word	0x20020614

00019a34 <rpc_logobj_client_evt_handler>:
   19a34:	f850b120 	.word	0xf850b120
   19a38:	0c091b08 	.word	0x0c091b08
   19a3c:	b886f7fa 	.word	0xb886f7fa
   19a40:	bf004770 	.word	0xbf004770

00019a44 <rpc_logobj_client_init>:
   19a44:	f0044801 	.word	0xf0044801
   19a48:	bf00bcf1 	.word	0xbf00bcf1
   19a4c:	00026afc 	.word	0x00026afc

00019a50 <rpc_logobj_client_request_alloc>:
   19a50:	b5102300 	.word	0xb5102300
   19a54:	9301b082 	.word	0x9301b082
   19a58:	b170b961 	.word	0xb170b961
   19a5c:	aa014604 	.word	0xaa014604
   19a60:	f0042009 	.word	0xf0042009
   19a64:	b918ff1b 	.word	0xb918ff1b
   19a68:	b10b9b01 	.word	0xb10b9b01
   19a6c:	60233308 	.word	0x60233308
   19a70:	bd10b002 	.word	0xbd10b002
   19a74:	b002200f 	.word	0xb002200f
   19a78:	200ebd10 	.word	0x200ebd10
   19a7c:	bd10b002 	.word	0xbd10b002

00019a80 <rpc_logobj_client_request_send>:
   19a80:	4370f401 	.word	0x4370f401
   19a84:	4fe0f5b3 	.word	0x4fe0f5b3
   19a88:	b160d10b 	.word	0xb160d10b
   19a8c:	f8304603 	.word	0xf8304603
   19a90:	20092c08 	.word	0x20092c08
   19a94:	4101ea42 	.word	0x4101ea42
   19a98:	1d08f843 	.word	0x1d08f843
   19a9c:	f0044619 	.word	0xf0044619
   19aa0:	200fbee5 	.word	0x200fbee5
   19aa4:	200e4770 	.word	0x200e4770
   19aa8:	bf004770 	.word	0xbf004770

00019aac <rpc_logobj_client_message_free>:
   19aac:	f1a0b120 	.word	0xf1a0b120
   19ab0:	20090108 	.word	0x20090108
   19ab4:	bf24f004 	.word	0xbf24f004
   19ab8:	4770200e 	.word	0x4770200e

00019abc <rpc_logobj_client_data_free>:
   19abc:	4601b118 	.word	0x4601b118
   19ac0:	f0052009 	.word	0xf0052009
   19ac4:	200eb82f 	.word	0x200eb82f
   19ac8:	bf004770 	.word	0xbf004770

00019acc <datagram_handler_init>:
   19acc:	4604b510 	.word	0x4604b510
   19ad0:	f005200c 	.word	0xf005200c
   19ad4:	60e0fd71 	.word	0x60e0fd71
   19ad8:	e8bdb118 	.word	0xe8bdb118
   19adc:	f0004010 	.word	0xf0004010
   19ae0:	2004b8bd 	.word	0x2004b8bd
   19ae4:	bf00bd10 	.word	0xbf00bd10

00019ae8 <datagram_handler_put>:
   19ae8:	4606b570 	.word	0x4606b570
   19aec:	460d2014 	.word	0x460d2014
   19af0:	fd62f005 	.word	0xfd62f005
   19af4:	682bb178 	.word	0x682bb178
   19af8:	60434604 	.word	0x60434604
   19afc:	4601686b 	.word	0x4601686b
   19b00:	68eb6083 	.word	0x68eb6083
   19b04:	68ab60c3 	.word	0x68ab60c3
   19b08:	68f06103 	.word	0x68f06103
   19b0c:	f8b0f000 	.word	0xf8b0f000
   19b10:	6868b920 	.word	0x6868b920
   19b14:	f04fbd70 	.word	0xf04fbd70
   19b18:	bd7030ff 	.word	0xbd7030ff
   19b1c:	f0054620 	.word	0xf0054620
   19b20:	f04ffd69 	.word	0xf04ffd69
   19b24:	bd7030ff 	.word	0xbd7030ff

00019b28 <datagram_handler_get>:
   19b28:	4606b5f0 	.word	0x4606b5f0
   19b2c:	68c0b085 	.word	0x68c0b085
   19b30:	4617460c 	.word	0x4617460c
   19b34:	f8bcf000 	.word	0xf8bcf000
   19b38:	d0372800 	.word	0xd0372800
   19b3c:	46056882 	.word	0x46056882
   19b40:	0300e9d4 	.word	0x0300e9d4
   19b44:	bf28429a 	.word	0xbf28429a
   19b48:	6062461a 	.word	0x6062461a
   19b4c:	6869b110 	.word	0x6869b110
   19b50:	feb6f00a 	.word	0xfeb6f00a
   19b54:	b11868a0 	.word	0xb11868a0
   19b58:	b10b692b 	.word	0xb10b692b
   19b5c:	b9e268ea 	.word	0xb9e268ea
   19b60:	60e32300 	.word	0x60e32300
   19b64:	d502073b 	.word	0xd502073b
   19b68:	b0056860 	.word	0xb0056860
   19b6c:	68f0bdf0 	.word	0x68f0bdf0
   19b70:	f894f000 	.word	0xf894f000
   19b74:	28004605 	.word	0x28004605
   19b78:	e9d0d0f6 	.word	0xe9d0d0f6
   19b7c:	69023101 	.word	0x69023101
   19b80:	68c39300 	.word	0x68c39300
   19b84:	1201e9cd 	.word	0x1201e9cd
   19b88:	46689303 	.word	0x46689303
   19b8c:	3101e9d6 	.word	0x3101e9d6
   19b90:	46284798 	.word	0x46284798
   19b94:	fd2ef005 	.word	0xfd2ef005
   19b98:	68e3e7e6 	.word	0x68e3e7e6
   19b9c:	bf28429a 	.word	0xbf28429a
   19ba0:	60e2461a 	.word	0x60e2461a
   19ba4:	f00a6929 	.word	0xf00a6929
   19ba8:	e7dbfe8b 	.word	0xe7dbfe8b
   19bac:	30fff04f 	.word	0x30fff04f
   19bb0:	bf00e7db 	.word	0xbf00e7db

00019bb4 <datagram_handler_available>:
   19bb4:	68c0b508 	.word	0x68c0b508
   19bb8:	f87af000 	.word	0xf87af000
   19bbc:	6880b108 	.word	0x6880b108
   19bc0:	f04fbd08 	.word	0xf04fbd08
   19bc4:	bd0830ff 	.word	0xbd0830ff

00019bc8 <datagram_handler_flush>:
   19bc8:	4605b530 	.word	0x4605b530
   19bcc:	b08568c0 	.word	0xb08568c0
   19bd0:	e01ab9a8 	.word	0xe01ab9a8
   19bd4:	f00068e8 	.word	0xf00068e8
   19bd8:	4604f861 	.word	0x4604f861
   19bdc:	e9d0b170 	.word	0xe9d0b170
   19be0:	e9d40101 	.word	0xe9d40101
   19be4:	e9cd3203 	.word	0xe9cd3203
   19be8:	e9cd0100 	.word	0xe9cd0100
   19bec:	e9d52302 	.word	0xe9d52302
   19bf0:	46683101 	.word	0x46683101
   19bf4:	46204798 	.word	0x46204798
   19bf8:	fcfcf005 	.word	0xfcfcf005
   19bfc:	f00068e8 	.word	0xf00068e8
   19c00:	2800f85d 	.word	0x2800f85d
   19c04:	b005d1e6 	.word	0xb005d1e6
   19c08:	2008bd30 	.word	0x2008bd30
   19c0c:	bd30b005 	.word	0xbd30b005

00019c10 <datagram_handler_free>:
   19c10:	4605b530 	.word	0x4605b530
   19c14:	b08568c0 	.word	0xb08568c0
   19c18:	e01cb9a0 	.word	0xe01cb9a0
   19c1c:	f83ef000 	.word	0xf83ef000
   19c20:	b1704604 	.word	0xb1704604
   19c24:	0101e9d0 	.word	0x0101e9d0
   19c28:	3203e9d4 	.word	0x3203e9d4
   19c2c:	0100e9cd 	.word	0x0100e9cd
   19c30:	2302e9cd 	.word	0x2302e9cd
   19c34:	3101e9d5 	.word	0x3101e9d5
   19c38:	47984668 	.word	0x47984668
   19c3c:	f0054620 	.word	0xf0054620
   19c40:	68e8fcd9 	.word	0x68e8fcd9
   19c44:	f83af000 	.word	0xf83af000
   19c48:	68e84604 	.word	0x68e84604
   19c4c:	d1e52c00 	.word	0xd1e52c00
   19c50:	fcd0f005 	.word	0xfcd0f005
   19c54:	b00560ec 	.word	0xb00560ec
   19c58:	bf00bd30 	.word	0xbf00bd30

00019c5c <linked_list_init>:
   19c5c:	2300b128 	.word	0x2300b128
   19c60:	e9c06003 	.word	0xe9c06003
   19c64:	46183301 	.word	0x46183301
   19c68:	20074770 	.word	0x20074770
   19c6c:	bf004770 	.word	0xbf004770

00019c70 <linked_list_push>:
   19c70:	46036802 	.word	0x46036802
   19c74:	d00e3201 	.word	0xd00e3201
   19c78:	600a2200 	.word	0x600a2200
   19c7c:	b13a6802 	.word	0xb13a6802
   19c80:	60116882 	.word	0x60116882
   19c84:	681a6081 	.word	0x681a6081
   19c88:	32012000 	.word	0x32012000
   19c8c:	4770601a 	.word	0x4770601a
   19c90:	1101e9c0 	.word	0x1101e9c0
   19c94:	2004e7f7 	.word	0x2004e7f7
   19c98:	bf004770 	.word	0xbf004770

00019c9c <linked_list_pop>:
   19c9c:	68004603 	.word	0x68004603
   19ca0:	6858b128 	.word	0x6858b128
   19ca4:	6801681a 	.word	0x6801681a
   19ca8:	60593a01 	.word	0x60593a01
   19cac:	4770601a 	.word	0x4770601a

00019cb0 <linked_list_peek>:
   19cb0:	b10b6803 	.word	0xb10b6803
   19cb4:	47706840 	.word	0x47706840
   19cb8:	47704618 	.word	0x47704618

00019cbc <linked_list_size_get>:
   19cbc:	47706800 	.word	0x47706800

00019cc0 <linked_list_get_next>:
   19cc0:	47706800 	.word	0x47706800

00019cc4 <rpc_transport_ipc_tx_init>:
   19cc4:	f0002800 	.word	0xf0002800
   19cc8:	290080b8 	.word	0x290080b8
   19ccc:	80b5f000 	.word	0x80b5f000
   19cd0:	f0002a00 	.word	0xf0002a00
   19cd4:	e92d80b2 	.word	0xe92d80b2
   19cd8:	6a044ff0 	.word	0x6a044ff0
   19cdc:	2c00b085 	.word	0x2c00b085
   19ce0:	80a6f000 	.word	0x80a6f000
   19ce4:	28006a40 	.word	0x28006a40
   19ce8:	80a2f000 	.word	0x80a2f000
   19cec:	4587f642 	.word	0x4587f642
   19cf0:	0a00f04f 	.word	0x0a00f04f
   19cf4:	42a84e55 	.word	0x42a84e55
   19cf8:	a000f886 	.word	0xa000f886
   19cfc:	80a0f240 	.word	0x80a0f240
   19d00:	f8df2708 	.word	0xf8df2708
   19d04:	46209180 	.word	0x46209180
   19d08:	460d4616 	.word	0x460d4616
   19d0c:	46512244 	.word	0x46512244
   19d10:	4000f8c9 	.word	0x4000f8c9
   19d14:	fe01f00a 	.word	0xfe01f00a
   19d18:	2000f8d9 	.word	0x2000f8d9
   19d1c:	0344f104 	.word	0x0344f104
   19d20:	8164f8df 	.word	0x8164f8df
   19d24:	a001f882 	.word	0xa001f882
   19d28:	a002f882 	.word	0xa002f882
   19d2c:	a003f882 	.word	0xa003f882
   19d30:	46187017 	.word	0x46187017
   19d34:	46512244 	.word	0x46512244
   19d38:	3000f8c8 	.word	0x3000f8c8
   19d3c:	fdedf00a 	.word	0xfdedf00a
   19d40:	2000f8d8 	.word	0x2000f8d8
   19d44:	0388f104 	.word	0x0388f104
   19d48:	b140f8df 	.word	0xb140f8df
   19d4c:	f8827017 	.word	0xf8827017
   19d50:	f882a001 	.word	0xf882a001
   19d54:	f882a002 	.word	0xf882a002
   19d58:	4618a003 	.word	0x4618a003
   19d5c:	7200f44f 	.word	0x7200f44f
   19d60:	f8cb4651 	.word	0xf8cb4651
   19d64:	f00a3000 	.word	0xf00a3000
   19d68:	4b39fdd8 	.word	0x4b39fdd8
   19d6c:	7c22f504 	.word	0x7c22f504
   19d70:	c000f8c3 	.word	0xc000f8c3
   19d74:	46604651 	.word	0x46604651
   19d78:	7200f44f 	.word	0x7200f44f
   19d7c:	fdcdf00a 	.word	0xfdcdf00a
   19d80:	5c20f44f 	.word	0x5c20f44f
   19d84:	f04f2106 	.word	0xf04f2106
   19d88:	f44f0e01 	.word	0xf44f0e01
   19d8c:	f44f3001 	.word	0xf44f3001
   19d90:	4b303288 	.word	0x4b303288
   19d94:	6491f504 	.word	0x6491f504
   19d98:	4c2f605c 	.word	0x4c2f605c
   19d9c:	c008f8c3 	.word	0xc008f8c3
   19da0:	f8a38199 	.word	0xf8a38199
   19da4:	4619e000 	.word	0x4619e000
   19da8:	4b2c611c 	.word	0x4b2c611c
   19dac:	c0e0f8df 	.word	0xc0e0f8df
   19db0:	482b6120 	.word	0x482b6120
   19db4:	f5036063 	.word	0xf5036063
   19db8:	60a073c0 	.word	0x60a073c0
   19dbc:	c000f8c4 	.word	0xc000f8c4
   19dc0:	60e34828 	.word	0x60e34828
   19dc4:	f0056162 	.word	0xf0056162
   19dc8:	2800fadd 	.word	0x2800fadd
   19dcc:	f04fd132 	.word	0xf04fd132
   19dd0:	24200c02 	.word	0x24200c02
   19dd4:	1000f8d9 	.word	0x1000f8d9
   19dd8:	2000f8db 	.word	0x2000f8db
   19ddc:	4b1c6029 	.word	0x4b1c6029
   19de0:	1000f8d8 	.word	0x1000f8d8
   19de4:	e0acf8df 	.word	0xe0acf8df
   19de8:	60314d1f 	.word	0x60314d1f
   19dec:	2000f8ce 	.word	0x2000f8ce
   19df0:	491e681b 	.word	0x491e681b
   19df4:	7200f502 	.word	0x7200f502
   19df8:	4e1d602a 	.word	0x4e1d602a
   19dfc:	4d1e4a1d 	.word	0x4d1e4a1d
   19e00:	f503600b 	.word	0xf503600b
   19e04:	491d7300 	.word	0x491d7300
   19e08:	80286033 	.word	0x80286033
   19e0c:	c514f8c2 	.word	0xc514f8c2
   19e10:	4b1b6809 	.word	0x4b1b6809
   19e14:	99039103 	.word	0x99039103
   19e18:	751cf8c2 	.word	0x751cf8c2
   19e1c:	443b6819 	.word	0x443b6819
   19e20:	99029102 	.word	0x99029102
   19e24:	4524f8c2 	.word	0x4524f8c2
   19e28:	9301681b 	.word	0x9301681b
   19e2c:	e0019b01 	.word	0xe0019b01
   19e30:	0007f24c 	.word	0x0007f24c
   19e34:	e8bdb005 	.word	0xe8bdb005
   19e38:	f24c8ff0 	.word	0xf24c8ff0
   19e3c:	4770000e 	.word	0x4770000e
   19e40:	0004f24c 	.word	0x0004f24c
   19e44:	e8bdb005 	.word	0xe8bdb005
   19e48:	bf008ff0 	.word	0xbf008ff0
   19e4c:	20027407 	.word	0x20027407
   19e50:	20020664 	.word	0x20020664
   19e54:	20020650 	.word	0x20020650
   19e58:	20020674 	.word	0x20020674
   19e5c:	00040080 	.word	0x00040080
   19e60:	00040100 	.word	0x00040100
   19e64:	2002063c 	.word	0x2002063c
   19e68:	20020648 	.word	0x20020648
   19e6c:	20020644 	.word	0x20020644
   19e70:	20020640 	.word	0x20020640
   19e74:	4002a000 	.word	0x4002a000
   19e78:	20025e1c 	.word	0x20025e1c
   19e7c:	4002a514 	.word	0x4002a514
   19e80:	4002a51c 	.word	0x4002a51c
   19e84:	20020670 	.word	0x20020670
   19e88:	20020668 	.word	0x20020668
   19e8c:	2002066c 	.word	0x2002066c
   19e90:	00080040 	.word	0x00080040
   19e94:	2002064c 	.word	0x2002064c

00019e98 <rpc_transport_ipc_tx_send>:
   19e98:	d05f2800 	.word	0xd05f2800
   19e9c:	4b33b470 	.word	0x4b33b470
   19ea0:	681ab083 	.word	0x681ab083
   19ea4:	42824b32 	.word	0x42824b32
   19ea8:	681bd81e 	.word	0x681bd81e
   19eac:	42834931 	.word	0x42834931
   19eb0:	d8036809 	.word	0xd8036809
   19eb4:	68244c30 	.word	0x68244c30
   19eb8:	d8474284 	.word	0xd8474284
   19ebc:	d90e4281 	.word	0xd90e4281
   19ec0:	781b4b2e 	.word	0x781b4b2e
   19ec4:	d14c2b00 	.word	0xd14c2b00
   19ec8:	492d1a83 	.word	0x492d1a83
   19ecc:	069b099e 	.word	0x069b099e
   19ed0:	4c2c680a 	.word	0x4c2c680a
   19ed4:	0103f04f 	.word	0x0103f04f
   19ed8:	0502f04f 	.word	0x0502f04f
   19edc:	f24cd014 	.word	0xf24cd014
   19ee0:	b0030010 	.word	0xb0030010
   19ee4:	4770bc70 	.word	0x4770bc70
   19ee8:	4298681b 	.word	0x4298681b
   19eec:	4a22d3f7 	.word	0x4a22d3f7
   19ef0:	42906812 	.word	0x42906812
   19ef4:	2101d2f3 	.word	0x2101d2f3
   19ef8:	4a231ac3 	.word	0x4a231ac3
   19efc:	069b099e 	.word	0x069b099e
   19f00:	6812460d 	.word	0x6812460d
   19f04:	d1ea4c21 	.word	0xd1ea4c21
   19f08:	b2db6843 	.word	0xb2db6843
   19f0c:	d120429d 	.word	0xd120429d
   19f10:	eb022020 	.word	0xeb022020
   19f14:	4d1e02c6 	.word	0x4d1e02c6
   19f18:	882e6853 	.word	0x882e6853
   19f1c:	ea43b29b 	.word	0xea43b29b
   19f20:	f0234306 	.word	0xf0234306
   19f24:	f04303ff 	.word	0xf04303ff
   19f28:	60530301 	.word	0x60530301
   19f2c:	3801bf00 	.word	0x3801bf00
   19f30:	2201d1fc 	.word	0x2201d1fc
   19f34:	f8434b17 	.word	0xf8434b17
   19f38:	68222021 	.word	0x68222021
   19f3c:	9201882b 	.word	0x9201882b
   19f40:	33019a01 	.word	0x33019a01
   19f44:	b003802b 	.word	0xb003802b
   19f48:	4770bc70 	.word	0x4770bc70
   19f4c:	d9d24281 	.word	0xd9d24281
   19f50:	f24ce7b6 	.word	0xf24ce7b6
   19f54:	b0030007 	.word	0xb0030007
   19f58:	4770bc70 	.word	0x4770bc70
   19f5c:	000ef24c 	.word	0x000ef24c
   19f60:	f24c4770 	.word	0xf24c4770
   19f64:	b003000f 	.word	0xb003000f
   19f68:	4770bc70 	.word	0x4770bc70
   19f6c:	2002064c 	.word	0x2002064c
   19f70:	20020644 	.word	0x20020644
   19f74:	20020648 	.word	0x20020648
   19f78:	20020640 	.word	0x20020640
   19f7c:	20027407 	.word	0x20027407
   19f80:	20020670 	.word	0x20020670
   19f84:	4002a00c 	.word	0x4002a00c
   19f88:	20020668 	.word	0x20020668
   19f8c:	4002a004 	.word	0x4002a004
   19f90:	20025e1c 	.word	0x20025e1c
   19f94:	4002a000 	.word	0x4002a000

00019f98 <rpc_transport_ipc_tx_rpc_data_alloc>:
   19f98:	781b4b18 	.word	0x781b4b18
   19f9c:	b4f0bb63 	.word	0xb4f0bb63
   19fa0:	f0034a17 	.word	0xf0034a17
   19fa4:	681400ff 	.word	0x681400ff
   19fa8:	68254b16 	.word	0x68254b16
   19fac:	b1a5681e 	.word	0xb1a5681e
   19fb0:	00c14607 	.word	0x00c14607
   19fb4:	685a1863 	.word	0x685a1863
   19fb8:	2a03b2d2 	.word	0x2a03b2d2
   19fbc:	609fd104 	.word	0x609fd104
   19fc0:	f022685a 	.word	0xf022685a
   19fc4:	605a02ff 	.word	0x605a02ff
   19fc8:	f012685a 	.word	0xf012685a
   19fcc:	d1010fff 	.word	0xd1010fff
   19fd0:	b12b689b 	.word	0xb12b689b
   19fd4:	42a83001 	.word	0x42a83001
   19fd8:	2000d1eb 	.word	0x2000d1eb
   19fdc:	4770bcf0 	.word	0x4770bcf0
   19fe0:	1080eb06 	.word	0x1080eb06
   19fe4:	60884421 	.word	0x60884421
   19fe8:	f0236843 	.word	0xf0236843
   19fec:	f04303ff 	.word	0xf04303ff
   19ff0:	60430302 	.word	0x60430302
   19ff4:	4770bcf0 	.word	0x4770bcf0
   19ff8:	47702000 	.word	0x47702000
   19ffc:	20027407 	.word	0x20027407
   1a000:	20020670 	.word	0x20020670
   1a004:	2002066c 	.word	0x2002066c

0001a008 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   1a008:	4a15b4f0 	.word	0x4a15b4f0
   1a00c:	68144b15 	.word	0x68144b15
   1a010:	6825681e 	.word	0x6825681e
   1a014:	2000b1ad 	.word	0x2000b1ad
   1a018:	00c14607 	.word	0x00c14607
   1a01c:	685a1863 	.word	0x685a1863
   1a020:	2a03b2d2 	.word	0x2a03b2d2
   1a024:	609fd104 	.word	0x609fd104
   1a028:	f022685a 	.word	0xf022685a
   1a02c:	605a02ff 	.word	0x605a02ff
   1a030:	f012685a 	.word	0xf012685a
   1a034:	d1010fff 	.word	0xd1010fff
   1a038:	b12b689b 	.word	0xb12b689b
   1a03c:	42853001 	.word	0x42853001
   1a040:	2000d1eb 	.word	0x2000d1eb
   1a044:	4770bcf0 	.word	0x4770bcf0
   1a048:	1080eb06 	.word	0x1080eb06
   1a04c:	60884421 	.word	0x60884421
   1a050:	f0236843 	.word	0xf0236843
   1a054:	f04303ff 	.word	0xf04303ff
   1a058:	60430301 	.word	0x60430301
   1a05c:	4770bcf0 	.word	0x4770bcf0
   1a060:	20020668 	.word	0x20020668
   1a064:	20020664 	.word	0x20020664

0001a068 <rpc_transport_ipc_tx_data_alloc>:
   1a068:	781b4b03 	.word	0x781b4b03
   1a06c:	f005b90b 	.word	0xf005b90b
   1a070:	2000bacd 	.word	0x2000bacd
   1a074:	bf004770 	.word	0xbf004770
   1a078:	20027407 	.word	0x20027407

0001a07c <null_handler_init>:
   1a07c:	47702000 	.word	0x47702000

0001a080 <null_handler_put>:
   1a080:	460cb510 	.word	0x460cb510
   1a084:	3101e9d0 	.word	0x3101e9d0
   1a088:	47984620 	.word	0x47984620
   1a08c:	bd106860 	.word	0xbd106860

0001a090 <null_handler_get>:
   1a090:	30fff04f 	.word	0x30fff04f
   1a094:	bf004770 	.word	0xbf004770

0001a098 <null_handler_available>:
   1a098:	30fff04f 	.word	0x30fff04f
   1a09c:	bf004770 	.word	0xbf004770

0001a0a0 <null_handler_flush>:
   1a0a0:	47702000 	.word	0x47702000

0001a0a4 <null_handler_free>:
   1a0a4:	bf004770 	.word	0xbf004770

0001a0a8 <rpc_gnss_event_handler>:
   1a0a8:	4b5db5f0 	.word	0x4b5db5f0
   1a0ac:	68004606 	.word	0x68004606
   1a0b0:	6802881b 	.word	0x6802881b
   1a0b4:	ebb34c5b 	.word	0xebb34c5b
   1a0b8:	b0854f12 	.word	0xb0854f12
   1a0bc:	6020460d 	.word	0x6020460d
   1a0c0:	f505d033 	.word	0xf505d033
   1a0c4:	33ff433f 	.word	0x33ff433f
   1a0c8:	2b02b29b 	.word	0x2b02b29b
   1a0cc:	4c56d80e 	.word	0x4c56d80e
   1a0d0:	075a6823 	.word	0x075a6823
   1a0d4:	6823d40d 	.word	0x6823d40d
   1a0d8:	d503079b 	.word	0xd503079b
   1a0dc:	0303f244 	.word	0x0303f244
   1a0e0:	d006429d 	.word	0xd006429d
   1a0e4:	b1086830 	.word	0xb1086830
   1a0e8:	fa72f7f9 	.word	0xfa72f7f9
   1a0ec:	b0052000 	.word	0xb0052000
   1a0f0:	2002bdf0 	.word	0x2002bdf0
   1a0f4:	fa60f005 	.word	0xfa60f005
   1a0f8:	28004607 	.word	0x28004607
   1a0fc:	2302d0f2 	.word	0x2302d0f2
   1a100:	68318005 	.word	0x68318005
   1a104:	48496872 	.word	0x48496872
   1a108:	0086e88d 	.word	0x0086e88d
   1a10c:	93036800 	.word	0x93036800
   1a110:	46696803 	.word	0x46696803
   1a114:	4798685b 	.word	0x4798685b
   1a118:	d06d3001 	.word	0xd06d3001
   1a11c:	68232000 	.word	0x68232000
   1a120:	3380f443 	.word	0x3380f443
   1a124:	b0056023 	.word	0xb0056023
   1a128:	4c3fbdf0 	.word	0x4c3fbdf0
   1a12c:	01da6823 	.word	0x01da6823
   1a130:	f242d523 	.word	0xf242d523
   1a134:	42991302 	.word	0x42991302
   1a138:	6843d11f 	.word	0x6843d11f
   1a13c:	6823b91b 	.word	0x6823b91b
   1a140:	7300f043 	.word	0x7300f043
   1a144:	68236023 	.word	0x68236023
   1a148:	7380f023 	.word	0x7380f023
   1a14c:	68236023 	.word	0x68236023
   1a150:	d430025b 	.word	0xd430025b
   1a154:	0305f242 	.word	0x0305f242
   1a158:	d12c429d 	.word	0xd12c429d
   1a15c:	02996823 	.word	0x02996823
   1a160:	6843d529 	.word	0x6843d529
   1a164:	d1552b00 	.word	0xd1552b00
   1a168:	f4236823 	.word	0xf4236823
   1a16c:	60231300 	.word	0x60231300
   1a170:	f4436823 	.word	0xf4436823
   1a174:	60233300 	.word	0x60233300
   1a178:	6823e01d 	.word	0x6823e01d
   1a17c:	d50e025f 	.word	0xd50e025f
   1a180:	1303f242 	.word	0x1303f242
   1a184:	d10a429d 	.word	0xd10a429d
   1a188:	b91b6843 	.word	0xb91b6843
   1a18c:	f4436823 	.word	0xf4436823
   1a190:	60230300 	.word	0x60230300
   1a194:	f4236823 	.word	0xf4236823
   1a198:	60230380 	.word	0x60230380
   1a19c:	f242e00b 	.word	0xf242e00b
   1a1a0:	429d0301 	.word	0x429d0301
   1a1a4:	6843d10a 	.word	0x6843d10a
   1a1a8:	6823b92b 	.word	0x6823b92b
   1a1ac:	041b0c1b 	.word	0x041b0c1b
   1a1b0:	0302f043 	.word	0x0302f043
   1a1b4:	f7f96023 	.word	0xf7f96023
   1a1b8:	e782fa0b 	.word	0xe782fa0b
   1a1bc:	0304f242 	.word	0x0304f242
   1a1c0:	d1c7429d 	.word	0xd1c7429d
   1a1c4:	b9936843 	.word	0xb9936843
   1a1c8:	f4436823 	.word	0xf4436823
   1a1cc:	60230300 	.word	0x60230300
   1a1d0:	b29b6823 	.word	0xb29b6823
   1a1d4:	68232b03 	.word	0x68232b03
   1a1d8:	b29bd016 	.word	0xb29bd016
   1a1dc:	d1d92b04 	.word	0xd1d92b04
   1a1e0:	0c1b6823 	.word	0x0c1b6823
   1a1e4:	f043041b 	.word	0xf043041b
   1a1e8:	60230302 	.word	0x60230302
   1a1ec:	6823e7d2 	.word	0x6823e7d2
   1a1f0:	2b03b29b 	.word	0x2b03b29b
   1a1f4:	e7f3d1ce 	.word	0xe7f3d1ce
   1a1f8:	f0054638 	.word	0xf0054638
   1a1fc:	6830f9fb 	.word	0x6830f9fb
   1a200:	f47f2800 	.word	0xf47f2800
   1a204:	e771af71 	.word	0xe771af71
   1a208:	041b0c1b 	.word	0x041b0c1b
   1a20c:	0304f043 	.word	0x0304f043
   1a210:	e7bf6023 	.word	0xe7bf6023
   1a214:	f4236823 	.word	0xf4236823
   1a218:	60231300 	.word	0x60231300
   1a21c:	bf00e7cb 	.word	0xbf00e7cb
   1a220:	20025e1e 	.word	0x20025e1e
   1a224:	20020634 	.word	0x20020634
   1a228:	2002068c 	.word	0x2002068c
   1a22c:	20020690 	.word	0x20020690

0001a230 <gnss_interface_write>:
   1a230:	43f0e92d 	.word	0x43f0e92d
   1a234:	b09f4a75 	.word	0xb09f4a75
   1a238:	9d264290 	.word	0x9d264290
   1a23c:	80d3f040 	.word	0x80d3f040
   1a240:	f0002900 	.word	0xf0002900
   1a244:	2d0080c8 	.word	0x2d0080c8
   1a248:	80c5f000 	.word	0x80c5f000
   1a24c:	2a029a27 	.word	0x2a029a27
   1a250:	80c1f040 	.word	0x80c1f040
   1a254:	68224c6e 	.word	0x68224c6e
   1a258:	2a02b292 	.word	0x2a02b292
   1a25c:	6822d004 	.word	0x6822d004
   1a260:	2a04b292 	.word	0x2a04b292
   1a264:	80c5f040 	.word	0x80c5f040
   1a268:	f1000798 	.word	0xf1000798
   1a26c:	682080c8 	.word	0x682080c8
   1a270:	3000f410 	.word	0x3000f410
   1a274:	6822d065 	.word	0x6822d065
   1a278:	f422882b 	.word	0xf422882b
   1a27c:	60223200 	.word	0x60223200
   1a280:	3b016822 	.word	0x3b016822
   1a284:	1200f442 	.word	0x1200f442
   1a288:	2b076022 	.word	0x2b076022
   1a28c:	80a3f200 	.word	0x80a3f200
   1a290:	f003e8df 	.word	0xf003e8df
   1a294:	696e7378 	.word	0x696e7378
   1a298:	045f5a64 	.word	0x045f5a64
   1a29c:	a9024608 	.word	0xa9024608
   1a2a0:	ff1ef7fb 	.word	0xff1ef7fb
   1a2a4:	46682172 	.word	0x46682172
   1a2a8:	f960f7f9 	.word	0xf960f7f9
   1a2ac:	98004605 	.word	0x98004605
   1a2b0:	d16c2d00 	.word	0xd16c2d00
   1a2b4:	d06a2800 	.word	0xd06a2800
   1a2b8:	0605f241 	.word	0x0605f241
   1a2bc:	0c49f04f 	.word	0x0c49f04f
   1a2c0:	f04f2272 	.word	0xf04f2272
   1a2c4:	f04f0e76 	.word	0xf04f0e76
   1a2c8:	f04f0943 	.word	0xf04f0943
   1a2cc:	4f510854 	.word	0x4f510854
   1a2d0:	883ba91e 	.word	0x883ba91e
   1a2d4:	c00ff880 	.word	0xc00ff880
   1a2d8:	b29b3301 	.word	0xb29b3301
   1a2dc:	4c03ea46 	.word	0x4c03ea46
   1a2e0:	cd74f841 	.word	0xcd74f841
   1a2e4:	71857145 	.word	0x71857145
   1a2e8:	720571c5 	.word	0x720571c5
   1a2ec:	72857245 	.word	0x72857245
   1a2f0:	710272c5 	.word	0x710272c5
   1a2f4:	900cf880 	.word	0x900cf880
   1a2f8:	800df880 	.word	0x800df880
   1a2fc:	e00ef880 	.word	0xe00ef880
   1a300:	803b6800 	.word	0x803b6800
   1a304:	fadcf00a 	.word	0xfadcf00a
   1a308:	46314b43 	.word	0x46314b43
   1a30c:	601d9800 	.word	0x601d9800
   1a310:	f940f7f9 	.word	0xf940f7f9
   1a314:	d1472800 	.word	0xd1472800
   1a318:	02996823 	.word	0x02996823
   1a31c:	4e3fd50d 	.word	0x4e3fd50d
   1a320:	e0014d3a 	.word	0xe0014d3a
   1a324:	d14f2800 	.word	0xd14f2800
   1a328:	46284631 	.word	0x46284631
   1a32c:	fe70f7f7 	.word	0xfe70f7f7
   1a330:	029a6823 	.word	0x029a6823
   1a334:	2800d4f6 	.word	0x2800d4f6
   1a338:	6823d146 	.word	0x6823d146
   1a33c:	d53e039b 	.word	0xd53e039b
   1a340:	b01f2000 	.word	0xb01f2000
   1a344:	83f0e8bd 	.word	0x83f0e8bd
   1a348:	a9024608 	.word	0xa9024608
   1a34c:	fe80f7fb 	.word	0xfe80f7fb
   1a350:	4608e7a8 	.word	0x4608e7a8
   1a354:	f7fba902 	.word	0xf7fba902
   1a358:	e7a3fea3 	.word	0xe7a3fea3
   1a35c:	a9024608 	.word	0xa9024608
   1a360:	fe5cf7fb 	.word	0xfe5cf7fb
   1a364:	4608e79e 	.word	0x4608e79e
   1a368:	f7fba902 	.word	0xf7fba902
   1a36c:	e799fe33 	.word	0xe799fe33
   1a370:	a9024608 	.word	0xa9024608
   1a374:	fdfcf7fb 	.word	0xfdfcf7fb
   1a378:	4608e794 	.word	0x4608e794
   1a37c:	f7fba902 	.word	0xf7fba902
   1a380:	e78ffda5 	.word	0xe78ffda5
   1a384:	a9024608 	.word	0xa9024608
   1a388:	fd7ef7fb 	.word	0xfd7ef7fb
   1a38c:	6803e78a 	.word	0x6803e78a
   1a390:	4618b11b 	.word	0x4618b11b
   1a394:	f91cf7f9 	.word	0xf91cf7f9
   1a398:	f7f99800 	.word	0xf7f99800
   1a39c:	2023f911 	.word	0x2023f911
   1a3a0:	fec6f7f7 	.word	0xfec6f7f7
   1a3a4:	30fff04f 	.word	0x30fff04f
   1a3a8:	f4236823 	.word	0xf4236823
   1a3ac:	60231300 	.word	0x60231300
   1a3b0:	f4436823 	.word	0xf4436823
   1a3b4:	60233300 	.word	0x60233300
   1a3b8:	e8bdb01f 	.word	0xe8bdb01f
   1a3bc:	200583f0 	.word	0x200583f0
   1a3c0:	f4436823 	.word	0xf4436823
   1a3c4:	60233300 	.word	0x60233300
   1a3c8:	feb2f7f7 	.word	0xfeb2f7f7
   1a3cc:	30fff04f 	.word	0x30fff04f
   1a3d0:	e8bdb01f 	.word	0xe8bdb01f
   1a3d4:	201683f0 	.word	0x201683f0
   1a3d8:	feaaf7f7 	.word	0xfeaaf7f7
   1a3dc:	30fff04f 	.word	0x30fff04f
   1a3e0:	e8bdb01f 	.word	0xe8bdb01f
   1a3e4:	200983f0 	.word	0x200983f0
   1a3e8:	fea2f7f7 	.word	0xfea2f7f7
   1a3ec:	30fff04f 	.word	0x30fff04f
   1a3f0:	2039e7a7 	.word	0x2039e7a7
   1a3f4:	fe9cf7f7 	.word	0xfe9cf7f7
   1a3f8:	30fff04f 	.word	0x30fff04f
   1a3fc:	202de7a1 	.word	0x202de7a1
   1a400:	fe96f7f7 	.word	0xfe96f7f7
   1a404:	30fff04f 	.word	0x30fff04f
   1a408:	bf00e79b 	.word	0xbf00e79b
   1a40c:	49765443 	.word	0x49765443
   1a410:	2002068c 	.word	0x2002068c
   1a414:	20025e1e 	.word	0x20025e1e
   1a418:	20020634 	.word	0x20020634
   1a41c:	2002d3f8 	.word	0x2002d3f8

0001a420 <gnss_interface_read>:
   1a420:	4ff0e92d 	.word	0x4ff0e92d
   1a424:	b0b74c4a 	.word	0xb0b74c4a
   1a428:	f04042a0 	.word	0xf04042a0
   1a42c:	468881ec 	.word	0x468881ec
   1a430:	f0002900 	.word	0xf0002900
   1a434:	2ad781e2 	.word	0x2ad781e2
   1a438:	81dff240 	.word	0x81dff240
   1a43c:	46994d45 	.word	0x46994d45
   1a440:	b29b682b 	.word	0xb29b682b
   1a444:	d0042b04 	.word	0xd0042b04
   1a448:	b29b682b 	.word	0xb29b682b
   1a44c:	f0402b02 	.word	0xf0402b02
   1a450:	210281e0 	.word	0x210281e0
   1a454:	240020b6 	.word	0x240020b6
   1a458:	f10d682b 	.word	0xf10d682b
   1a45c:	f423020e 	.word	0xf423020e
   1a460:	602b3380 	.word	0x602b3380
   1a464:	a0f4f8df 	.word	0xa0f4f8df
   1a468:	4f3bab08 	.word	0x4f3bab08
   1a46c:	90054e38 	.word	0x90054e38
   1a470:	93049107 	.word	0x93049107
   1a474:	ea099206 	.word	0xea099206
   1a478:	f8da0b01 	.word	0xf8da0b01
   1a47c:	464a0000 	.word	0x464a0000
   1a480:	a9046803 	.word	0xa9046803
   1a484:	4798689b 	.word	0x4798689b
   1a488:	da112800 	.word	0xda112800
   1a48c:	0f00f1bb 	.word	0x0f00f1bb
   1a490:	682bd138 	.word	0x682bd138
   1a494:	d4f003d8 	.word	0xd4f003d8
   1a498:	e7eeb10c 	.word	0xe7eeb10c
   1a49c:	4639b930 	.word	0x4639b930
   1a4a0:	f7f74630 	.word	0xf7f74630
   1a4a4:	682bfdb5 	.word	0x682bfdb5
   1a4a8:	d5f703d9 	.word	0xd5f703d9
   1a4ac:	e7e44604 	.word	0xe7e44604
   1a4b0:	0202f244 	.word	0x0202f244
   1a4b4:	300ef8bd 	.word	0x300ef8bd
   1a4b8:	d0394293 	.word	0xd0394293
   1a4bc:	0201f244 	.word	0x0201f244
   1a4c0:	d04d4293 	.word	0xd04d4293
   1a4c4:	0203f244 	.word	0x0203f244
   1a4c8:	f0404293 	.word	0xf0404293
   1a4cc:	22018196 	.word	0x22018196
   1a4d0:	9b082414 	.word	0x9b082414
   1a4d4:	2000f888 	.word	0x2000f888
   1a4d8:	f8c89a09 	.word	0xf8c89a09
   1a4dc:	f8bd3008 	.word	0xf8bd3008
   1a4e0:	e9c83028 	.word	0xe9c83028
   1a4e4:	f8da2303 	.word	0xf8da2303
   1a4e8:	68030000 	.word	0x68030000
   1a4ec:	479868db 	.word	0x479868db
   1a4f0:	dd032800 	.word	0xdd032800
   1a4f4:	f443682b 	.word	0xf443682b
   1a4f8:	602b3380 	.word	0x602b3380
   1a4fc:	b0374620 	.word	0xb0374620
   1a500:	8ff0e8bd 	.word	0x8ff0e8bd
   1a504:	46031c42 	.word	0x46031c42
   1a508:	b93cd1d2 	.word	0xb93cd1d2
   1a50c:	2023461c 	.word	0x2023461c
   1a510:	fe0ef7f7 	.word	0xfe0ef7f7
   1a514:	b0374620 	.word	0xb0374620
   1a518:	8ff0e8bd 	.word	0x8ff0e8bd
   1a51c:	46209001 	.word	0x46209001
   1a520:	fe06f7f7 	.word	0xfe06f7f7
   1a524:	461c9b01 	.word	0x461c9b01
   1a528:	b0374620 	.word	0xb0374620
   1a52c:	8ff0e8bd 	.word	0x8ff0e8bd
   1a530:	f00aa808 	.word	0xf00aa808
   1a534:	2302f991 	.word	0x2302f991
   1a538:	b2a41c44 	.word	0xb2a41c44
   1a53c:	3b08f808 	.word	0x3b08f808
   1a540:	a9084622 	.word	0xa9084622
   1a544:	f00a4640 	.word	0xf00a4640
   1a548:	3408f9bb 	.word	0x3408f9bb
   1a54c:	bf00e7cb 	.word	0xbf00e7cb
   1a550:	49765443 	.word	0x49765443
   1a554:	2002068c 	.word	0x2002068c
   1a558:	2002d3f8 	.word	0x2002d3f8
   1a55c:	20020690 	.word	0x20020690
   1a560:	a8092401 	.word	0xa8092401
   1a564:	e9c8c80f 	.word	0xe9c8c80f
   1a568:	e9c80102 	.word	0xe9c80102
   1a56c:	990d2304 	.word	0x990d2304
   1a570:	f8889a0e 	.word	0xf8889a0e
   1a574:	9b0f4000 	.word	0x9b0f4000
   1a578:	1018f8c8 	.word	0x1018f8c8
   1a57c:	f8c89910 	.word	0xf8c89910
   1a580:	f8c8201c 	.word	0xf8c8201c
   1a584:	f89d3020 	.word	0xf89d3020
   1a588:	f8dd205d 	.word	0xf8dd205d
   1a58c:	f8c8304d 	.word	0xf8c8304d
   1a590:	f8dd1024 	.word	0xf8dd1024
   1a594:	f8881051 	.word	0xf8881051
   1a598:	f8dd2044 	.word	0xf8dd2044
   1a59c:	f8c82055 	.word	0xf8c82055
   1a5a0:	f8dd3034 	.word	0xf8dd3034
   1a5a4:	f8c83059 	.word	0xf8c83059
   1a5a8:	f8bd1038 	.word	0xf8bd1038
   1a5ac:	f8c81044 	.word	0xf8c81044
   1a5b0:	f8c8203c 	.word	0xf8c8203c
   1a5b4:	f8dd3040 	.word	0xf8dd3040
   1a5b8:	f89d2046 	.word	0xf89d2046
   1a5bc:	f8a8304a 	.word	0xf8a8304a
   1a5c0:	f8881028 	.word	0xf8881028
   1a5c4:	f8c8302e 	.word	0xf8c8302e
   1a5c8:	f89d202a 	.word	0xf89d202a
   1a5cc:	f89d004b 	.word	0xf89d004b
   1a5d0:	9b18204c 	.word	0x9b18204c
   1a5d4:	406cf89d 	.word	0x406cf89d
   1a5d8:	2002ea40 	.word	0x2002ea40
   1a5dc:	206bf89d 	.word	0x206bf89d
   1a5e0:	210ff3c3 	.word	0x210ff3c3
   1a5e4:	ea429b1d 	.word	0xea429b1d
   1a5e8:	f8a82204 	.word	0xf8a82204
   1a5ec:	f8a80030 	.word	0xf8a80030
   1a5f0:	f8bd104a 	.word	0xf8bd104a
   1a5f4:	f3c3105e 	.word	0xf3c3105e
   1a5f8:	f8a8230f 	.word	0xf8a8230f
   1a5fc:	f89d2056 	.word	0xf89d2056
   1a600:	f8a82060 	.word	0xf8a82060
   1a604:	f8dd3062 	.word	0xf8dd3062
   1a608:	f8a83063 	.word	0xf8a83063
   1a60c:	f8881046 	.word	0xf8881046
   1a610:	f8bd2048 	.word	0xf8bd2048
   1a614:	f89d2068 	.word	0xf89d2068
   1a618:	f8c81067 	.word	0xf8c81067
   1a61c:	f89d304c 	.word	0xf89d304c
   1a620:	f888306a 	.word	0xf888306a
   1a624:	f8a81050 	.word	0xf8a81050
   1a628:	f8882052 	.word	0xf8882052
   1a62c:	f8bd3054 	.word	0xf8bd3054
   1a630:	f8dd3072 	.word	0xf8dd3072
   1a634:	f89d106d 	.word	0xf89d106d
   1a638:	f8c82071 	.word	0xf8c82071
   1a63c:	f8881058 	.word	0xf8881058
   1a640:	f89d205c 	.word	0xf89d205c
   1a644:	f8dd1074 	.word	0xf8dd1074
   1a648:	f8a82077 	.word	0xf8a82077
   1a64c:	f89d305e 	.word	0xf89d305e
   1a650:	f888307b 	.word	0xf888307b
   1a654:	f8c81060 	.word	0xf8c81060
   1a658:	f8882064 	.word	0xf8882064
   1a65c:	f89d3068 	.word	0xf89d3068
   1a660:	f89d3080 	.word	0xf89d3080
   1a664:	9a22107f 	.word	0x9a22107f
   1a668:	0094f89d 	.word	0x0094f89d
   1a66c:	2103ea41 	.word	0x2103ea41
   1a670:	3093f89d 	.word	0x3093f89d
   1a674:	220ff3c2 	.word	0x220ff3c2
   1a678:	106ef8a8 	.word	0x106ef8a8
   1a67c:	107cf8bd 	.word	0x107cf8bd
   1a680:	2300ea43 	.word	0x2300ea43
   1a684:	207af8a8 	.word	0x207af8a8
   1a688:	207ef89d 	.word	0x207ef89d
   1a68c:	3086f8a8 	.word	0x3086f8a8
   1a690:	3081f8dd 	.word	0x3081f8dd
   1a694:	106af8a8 	.word	0x106af8a8
   1a698:	206cf888 	.word	0x206cf888
   1a69c:	2086f8bd 	.word	0x2086f8bd
   1a6a0:	1085f89d 	.word	0x1085f89d
   1a6a4:	3070f8c8 	.word	0x3070f8c8
   1a6a8:	3088f89d 	.word	0x3088f89d
   1a6ac:	1074f888 	.word	0x1074f888
   1a6b0:	2076f8a8 	.word	0x2076f8a8
   1a6b4:	3078f888 	.word	0x3078f888
   1a6b8:	3090f8bd 	.word	0x3090f8bd
   1a6bc:	108bf8dd 	.word	0x108bf8dd
   1a6c0:	208ff89d 	.word	0x208ff89d
   1a6c4:	107cf8c8 	.word	0x107cf8c8
   1a6c8:	2080f888 	.word	0x2080f888
   1a6cc:	1092f89d 	.word	0x1092f89d
   1a6d0:	2095f8dd 	.word	0x2095f8dd
   1a6d4:	3082f8a8 	.word	0x3082f8a8
   1a6d8:	3099f89d 	.word	0x3099f89d
   1a6dc:	1084f888 	.word	0x1084f888
   1a6e0:	2088f8c8 	.word	0x2088f8c8
   1a6e4:	308cf888 	.word	0x308cf888
   1a6e8:	009af8bd 	.word	0x009af8bd
   1a6ec:	f89d9b27 	.word	0xf89d9b27
   1a6f0:	f89d40a8 	.word	0xf89d40a8
   1a6f4:	f3c320a7 	.word	0xf3c320a7
   1a6f8:	9b2c210f 	.word	0x9b2c210f
   1a6fc:	2204ea42 	.word	0x2204ea42
   1a700:	1092f8a8 	.word	0x1092f8a8
   1a704:	109cf89d 	.word	0x109cf89d
   1a708:	209ef8a8 	.word	0x209ef8a8
   1a70c:	230ff3c3 	.word	0x230ff3c3
   1a710:	209ff8dd 	.word	0x209ff8dd
   1a714:	008ef8a8 	.word	0x008ef8a8
   1a718:	30aaf8a8 	.word	0x30aaf8a8
   1a71c:	1090f888 	.word	0x1090f888
   1a720:	30a3f89d 	.word	0x30a3f89d
   1a724:	10a4f8bd 	.word	0x10a4f8bd
   1a728:	2094f8c8 	.word	0x2094f8c8
   1a72c:	20a6f89d 	.word	0x20a6f89d
   1a730:	3098f888 	.word	0x3098f888
   1a734:	30a9f8dd 	.word	0x30a9f8dd
   1a738:	109af8a8 	.word	0x109af8a8
   1a73c:	209cf888 	.word	0x209cf888
   1a740:	20aef8bd 	.word	0x20aef8bd
   1a744:	10adf89d 	.word	0x10adf89d
   1a748:	30a0f8c8 	.word	0x30a0f8c8
   1a74c:	30b0f89d 	.word	0x30b0f89d
   1a750:	10a4f888 	.word	0x10a4f888
   1a754:	20a6f8a8 	.word	0x20a6f8a8
   1a758:	30a8f888 	.word	0x30a8f888
   1a75c:	30b8f8bd 	.word	0x30b8f8bd
   1a760:	10b3f8dd 	.word	0x10b3f8dd
   1a764:	20b7f89d 	.word	0x20b7f89d
   1a768:	10acf8c8 	.word	0x10acf8c8
   1a76c:	20b0f888 	.word	0x20b0f888
   1a770:	30b2f8a8 	.word	0x30b2f8a8
   1a774:	30bcf89d 	.word	0x30bcf89d
   1a778:	10bbf89d 	.word	0x10bbf89d
   1a77c:	00d0f89d 	.word	0x00d0f89d
   1a780:	ea419a31 	.word	0xea419a31
   1a784:	f89d2103 	.word	0xf89d2103
   1a788:	f89d30cf 	.word	0xf89d30cf
   1a78c:	ea4340ba 	.word	0xea4340ba
   1a790:	f3c22300 	.word	0xf3c22300
   1a794:	f8a8220f 	.word	0xf8a8220f
   1a798:	f8a810b6 	.word	0xf8a810b6
   1a79c:	f88830ce 	.word	0xf88830ce
   1a7a0:	f8a840b4 	.word	0xf8a840b4
   1a7a4:	f8bd20c2 	.word	0xf8bd20c2
   1a7a8:	f89d20c2 	.word	0xf89d20c2
   1a7ac:	f89d10c1 	.word	0xf89d10c1
   1a7b0:	f8dd30c4 	.word	0xf8dd30c4
   1a7b4:	f88800bd 	.word	0xf88800bd
   1a7b8:	f8a810bc 	.word	0xf8a810bc
   1a7bc:	f8c820be 	.word	0xf8c820be
   1a7c0:	f88800b8 	.word	0xf88800b8
   1a7c4:	f8bd30c0 	.word	0xf8bd30c0
   1a7c8:	f8dd30cc 	.word	0xf8dd30cc
   1a7cc:	f89d10c7 	.word	0xf89d10c7
   1a7d0:	f8c820cb 	.word	0xf8c820cb
   1a7d4:	f88810c4 	.word	0xf88810c4
   1a7d8:	f89d20c8 	.word	0xf89d20c8
   1a7dc:	f8dd10ce 	.word	0xf8dd10ce
   1a7e0:	f8a820d1 	.word	0xf8a820d1
   1a7e4:	f89d30ca 	.word	0xf89d30ca
   1a7e8:	f88830d5 	.word	0xf88830d5
   1a7ec:	f8c810cc 	.word	0xf8c810cc
   1a7f0:	f88820d0 	.word	0xf88820d0
   1a7f4:	24d830d4 	.word	0x24d830d4
   1a7f8:	2016e675 	.word	0x2016e675
   1a7fc:	fc98f7f7 	.word	0xfc98f7f7
   1a800:	34fff04f 	.word	0x34fff04f
   1a804:	2009e67a 	.word	0x2009e67a
   1a808:	fc92f7f7 	.word	0xfc92f7f7
   1a80c:	34fff04f 	.word	0x34fff04f
   1a810:	2039e674 	.word	0x2039e674
   1a814:	fc8cf7f7 	.word	0xfc8cf7f7
   1a818:	34fff04f 	.word	0x34fff04f
   1a81c:	bf00e66e 	.word	0xbf00e66e

0001a820 <gnss_interface_setopt>:
   1a820:	47f0e92d 	.word	0x47f0e92d
   1a824:	1402f241 	.word	0x1402f241
   1a828:	b0864222 	.word	0xb0864222
   1a82c:	d0044d9b 	.word	0xd0044d9b
   1a830:	b2a4682c 	.word	0xb2a4682c
   1a834:	f0402c02 	.word	0xf0402c02
   1a838:	682c8104 	.word	0x682c8104
   1a83c:	f1000264 	.word	0xf1000264
   1a840:	f5b18127 	.word	0xf5b18127
   1a844:	f0407f01 	.word	0xf0407f01
   1a848:	4995811d 	.word	0x4995811d
   1a84c:	f0404288 	.word	0xf0404288
   1a850:	3a018113 	.word	0x3a018113
   1a854:	f2002a08 	.word	0xf2002a08
   1a858:	e8df80ec 	.word	0xe8df80ec
   1a85c:	0075f012 	.word	0x0075f012
   1a860:	00c200d8 	.word	0x00c200d8
   1a864:	008100cc 	.word	0x008100cc
   1a868:	0098008c 	.word	0x0098008c
   1a86c:	000900af 	.word	0x000900af
   1a870:	2a019a0e 	.word	0x2a019a0e
   1a874:	80ddf040 	.word	0x80ddf040
   1a878:	1603f241 	.word	0x1603f241
   1a87c:	46372240 	.word	0x46372240
   1a880:	9202781b 	.word	0x9202781b
   1a884:	3015f88d 	.word	0x3015f88d
   1a888:	2112682b 	.word	0x2112682b
   1a88c:	0380f443 	.word	0x0380f443
   1a890:	602b4668 	.word	0x602b4668
   1a894:	fe6af7f8 	.word	0xfe6af7f8
   1a898:	98004604 	.word	0x98004604
   1a89c:	f0402c00 	.word	0xf0402c00
   1a8a0:	280080d6 	.word	0x280080d6
   1a8a4:	80d3f000 	.word	0x80d3f000
   1a8a8:	f04f2212 	.word	0xf04f2212
   1a8ac:	f04f0876 	.word	0xf04f0876
   1a8b0:	f04f0e49 	.word	0xf04f0e49
   1a8b4:	f04f0a43 	.word	0xf04f0a43
   1a8b8:	f8df0954 	.word	0xf8df0954
   1a8bc:	a906c1ec 	.word	0xa906c1ec
   1a8c0:	3000f8bc 	.word	0x3000f8bc
   1a8c4:	800ef880 	.word	0x800ef880
   1a8c8:	b29b3301 	.word	0xb29b3301
   1a8cc:	4603ea46 	.word	0x4603ea46
   1a8d0:	6d14f841 	.word	0x6d14f841
   1a8d4:	71847144 	.word	0x71847144
   1a8d8:	720471c4 	.word	0x720471c4
   1a8dc:	72847244 	.word	0x72847244
   1a8e0:	710272c4 	.word	0x710272c4
   1a8e4:	a00cf880 	.word	0xa00cf880
   1a8e8:	900df880 	.word	0x900df880
   1a8ec:	e00ff880 	.word	0xe00ff880
   1a8f0:	81b8f8df 	.word	0x81b8f8df
   1a8f4:	f8ac6800 	.word	0xf8ac6800
   1a8f8:	f0093000 	.word	0xf0093000
   1a8fc:	4639ffe1 	.word	0x4639ffe1
   1a900:	f8c89800 	.word	0xf8c89800
   1a904:	f7f84000 	.word	0xf7f84000
   1a908:	2800fe45 	.word	0x2800fe45
   1a90c:	80aaf040 	.word	0x80aaf040
   1a910:	4e634f64 	.word	0x4e634f64
   1a914:	46304639 	.word	0x46304639
   1a918:	fb7af7f7 	.word	0xfb7af7f7
   1a91c:	f414682c 	.word	0xf414682c
   1a920:	d1f70480 	.word	0xd1f70480
   1a924:	0000f8d8 	.word	0x0000f8d8
   1a928:	f7f8b118 	.word	0xf7f8b118
   1a92c:	f8c8fe51 	.word	0xf8c8fe51
   1a930:	682b4000 	.word	0x682b4000
   1a934:	d576021b 	.word	0xd576021b
   1a938:	682b2000 	.word	0x682b2000
   1a93c:	0300f423 	.word	0x0300f423
   1a940:	b006602b 	.word	0xb006602b
   1a944:	87f0e8bd 	.word	0x87f0e8bd
   1a948:	2a029a0e 	.word	0x2a029a0e
   1a94c:	2208d171 	.word	0x2208d171
   1a950:	1603f241 	.word	0x1603f241
   1a954:	9202881b 	.word	0x9202881b
   1a958:	300ff8ad 	.word	0x300ff8ad
   1a95c:	e7934637 	.word	0xe7934637
   1a960:	2a019a0e 	.word	0x2a019a0e
   1a964:	f241d165 	.word	0xf241d165
   1a968:	781b1603 	.word	0x781b1603
   1a96c:	f88d9202 	.word	0xf88d9202
   1a970:	4637300c 	.word	0x4637300c
   1a974:	9a0ee788 	.word	0x9a0ee788
   1a978:	d15a2a01 	.word	0xd15a2a01
   1a97c:	f2412202 	.word	0xf2412202
   1a980:	781b1603 	.word	0x781b1603
   1a984:	f88d9202 	.word	0xf88d9202
   1a988:	4637300d 	.word	0x4637300d
   1a98c:	682ae77c 	.word	0x682ae77c
   1a990:	2a02b292 	.word	0x2a02b292
   1a994:	9a0ed155 	.word	0x9a0ed155
   1a998:	d14a2a04 	.word	0xd14a2a04
   1a99c:	f2412101 	.word	0xf2412101
   1a9a0:	682a0604 	.word	0x682a0604
   1a9a4:	0c136818 	.word	0x0c136818
   1a9a8:	f043041b 	.word	0xf043041b
   1a9ac:	f8cd0303 	.word	0xf8cd0303
   1a9b0:	602b0009 	.word	0x602b0009
   1a9b4:	1008f88d 	.word	0x1008f88d
   1a9b8:	e7654637 	.word	0xe7654637
   1a9bc:	b29b682b 	.word	0xb29b682b
   1a9c0:	d13e2b04 	.word	0xd13e2b04
   1a9c4:	f2412300 	.word	0xf2412300
   1a9c8:	f88d0604 	.word	0xf88d0604
   1a9cc:	f88d3008 	.word	0xf88d3008
   1a9d0:	f88d3009 	.word	0xf88d3009
   1a9d4:	f88d300a 	.word	0xf88d300a
   1a9d8:	f88d300b 	.word	0xf88d300b
   1a9dc:	4637300c 	.word	0x4637300c
   1a9e0:	9a0ee752 	.word	0x9a0ee752
   1a9e4:	d1242a01 	.word	0xd1242a01
   1a9e8:	2b01781b 	.word	0x2b01781b
   1a9ec:	f241d121 	.word	0xf241d121
   1a9f0:	46371603 	.word	0x46371603
   1a9f4:	9a0ee748 	.word	0x9a0ee748
   1a9f8:	d11a2a02 	.word	0xd11a2a02
   1a9fc:	f2412220 	.word	0xf2412220
   1aa00:	881b1603 	.word	0x881b1603
   1aa04:	f8ad9202 	.word	0xf8ad9202
   1aa08:	46373013 	.word	0x46373013
   1aa0c:	9a0ee73c 	.word	0x9a0ee73c
   1aa10:	d10e2a02 	.word	0xd10e2a02
   1aa14:	f2412210 	.word	0xf2412210
   1aa18:	881b1603 	.word	0x881b1603
   1aa1c:	f8ad9202 	.word	0xf8ad9202
   1aa20:	46373011 	.word	0x46373011
   1aa24:	200ee730 	.word	0x200ee730
   1aa28:	fb82f7f7 	.word	0xfb82f7f7
   1aa2c:	30fff04f 	.word	0x30fff04f
   1aa30:	2016e783 	.word	0x2016e783
   1aa34:	fb7cf7f7 	.word	0xfb7cf7f7
   1aa38:	30fff04f 	.word	0x30fff04f
   1aa3c:	e8bdb006 	.word	0xe8bdb006
   1aa40:	200e87f0 	.word	0x200e87f0
   1aa44:	fb74f7f7 	.word	0xfb74f7f7
   1aa48:	30fff04f 	.word	0x30fff04f
   1aa4c:	6803e779 	.word	0x6803e779
   1aa50:	4618b11b 	.word	0x4618b11b
   1aa54:	fdbcf7f8 	.word	0xfdbcf7f8
   1aa58:	f7f89800 	.word	0xf7f89800
   1aa5c:	2023fdb1 	.word	0x2023fdb1
   1aa60:	fb66f7f7 	.word	0xfb66f7f7
   1aa64:	200e682b 	.word	0x200e682b
   1aa68:	0380f423 	.word	0x0380f423
   1aa6c:	f7f7602b 	.word	0xf7f7602b
   1aa70:	f04ffb5f 	.word	0xf04ffb5f
   1aa74:	e76430ff 	.word	0xe76430ff
   1aa78:	f7f72009 	.word	0xf7f72009
   1aa7c:	f04ffb59 	.word	0xf04ffb59
   1aa80:	e75e30ff 	.word	0xe75e30ff
   1aa84:	f7f7202a 	.word	0xf7f7202a
   1aa88:	f04ffb53 	.word	0xf04ffb53
   1aa8c:	e75830ff 	.word	0xe75830ff
   1aa90:	f7f72073 	.word	0xf7f72073
   1aa94:	f04ffb4d 	.word	0xf04ffb4d
   1aa98:	e75230ff 	.word	0xe75230ff
   1aa9c:	2002068c 	.word	0x2002068c
   1aaa0:	49765443 	.word	0x49765443
   1aaa4:	2002d3f8 	.word	0x2002d3f8
   1aaa8:	20025e1e 	.word	0x20025e1e
   1aaac:	20020634 	.word	0x20020634

0001aab0 <gnss_interface_getopt>:
   1aab0:	4ff0e92d 	.word	0x4ff0e92d
   1aab4:	b0874c81 	.word	0xb0874c81
   1aab8:	46986825 	.word	0x46986825
   1aabc:	2d02b2ad 	.word	0x2d02b2ad
   1aac0:	f0409b10 	.word	0xf0409b10
   1aac4:	682580dc 	.word	0x682580dc
   1aac8:	f10003ee 	.word	0xf10003ee
   1aacc:	682580f0 	.word	0x682580f0
   1aad0:	f10001ed 	.word	0xf10001ed
   1aad4:	f5b180e6 	.word	0xf5b180e6
   1aad8:	f0407f01 	.word	0xf0407f01
   1aadc:	497880d6 	.word	0x497880d6
   1aae0:	f0404288 	.word	0xf0404288
   1aae4:	f1b880d8 	.word	0xf1b880d8
   1aae8:	d00b0f00 	.word	0xd00b0f00
   1aaec:	1e57b153 	.word	0x1e57b153
   1aaf0:	d8072f05 	.word	0xd8072f05
   1aaf4:	f007e8df 	.word	0xf007e8df
   1aaf8:	0f030f0f 	.word	0x0f030f0f
   1aafc:	681b0303 	.word	0x681b0303
   1ab00:	d00b2b01 	.word	0xd00b2b01
   1ab04:	f7f72016 	.word	0xf7f72016
   1ab08:	f04ffb13 	.word	0xf04ffb13
   1ab0c:	462835ff 	.word	0x462835ff
   1ab10:	e8bdb007 	.word	0xe8bdb007
   1ab14:	681b8ff0 	.word	0x681b8ff0
   1ab18:	d1f32b02 	.word	0xd1f32b02
   1ab1c:	22126823 	.word	0x22126823
   1ab20:	7380f043 	.word	0x7380f043
   1ab24:	a8012100 	.word	0xa8012100
   1ab28:	f0096023 	.word	0xf0096023
   1ab2c:	2112fef6 	.word	0x2112fef6
   1ab30:	f7f84668 	.word	0xf7f84668
   1ab34:	4605fd1b 	.word	0x4605fd1b
   1ab38:	2d009800 	.word	0x2d009800
   1ab3c:	808af040 	.word	0x808af040
   1ab40:	f0002800 	.word	0xf0002800
   1ab44:	f2418087 	.word	0xf2418087
   1ab48:	f04f1602 	.word	0xf04f1602
   1ab4c:	22120e49 	.word	0x22120e49
   1ab50:	0976f04f 	.word	0x0976f04f
   1ab54:	0b43f04f 	.word	0x0b43f04f
   1ab58:	0a54f04f 	.word	0x0a54f04f
   1ab5c:	c168f8df 	.word	0xc168f8df
   1ab60:	e00ff880 	.word	0xe00ff880
   1ab64:	3000f8bc 	.word	0x3000f8bc
   1ab68:	900ef880 	.word	0x900ef880
   1ab6c:	b29b3301 	.word	0xb29b3301
   1ab70:	4e03ea46 	.word	0x4e03ea46
   1ab74:	e004f8cd 	.word	0xe004f8cd
   1ab78:	71857145 	.word	0x71857145
   1ab7c:	720571c5 	.word	0x720571c5
   1ab80:	72857245 	.word	0x72857245
   1ab84:	a90172c5 	.word	0xa90172c5
   1ab88:	f8807102 	.word	0xf8807102
   1ab8c:	f880b00c 	.word	0xf880b00c
   1ab90:	f8dfa00d 	.word	0xf8dfa00d
   1ab94:	68009138 	.word	0x68009138
   1ab98:	3000f8ac 	.word	0x3000f8ac
   1ab9c:	fe90f009 	.word	0xfe90f009
   1aba0:	98004631 	.word	0x98004631
   1aba4:	5000f8c9 	.word	0x5000f8c9
   1aba8:	fcf4f7f8 	.word	0xfcf4f7f8
   1abac:	d15c2800 	.word	0xd15c2800
   1abb0:	4d434e44 	.word	0x4d434e44
   1abb4:	46284631 	.word	0x46284631
   1abb8:	fa2af7f7 	.word	0xfa2af7f7
   1abbc:	01db6823 	.word	0x01db6823
   1abc0:	f8d9d4f8 	.word	0xf8d9d4f8
   1abc4:	b1d80000 	.word	0xb1d80000
   1abc8:	f0156825 	.word	0xf0156825
   1abcc:	d00f7500 	.word	0xd00f7500
   1abd0:	d8372f05 	.word	0xd8372f05
   1abd4:	f007e8df 	.word	0xf007e8df
   1abd8:	2b26201a 	.word	0x2b26201a
   1abdc:	25000331 	.word	0x25000331
   1abe0:	f8887b43 	.word	0xf8887b43
   1abe4:	f7f83000 	.word	0xf7f83000
   1abe8:	2300fcf3 	.word	0x2300fcf3
   1abec:	3000f8c9 	.word	0x3000f8c9
   1abf0:	f0236823 	.word	0xf0236823
   1abf4:	60237300 	.word	0x60237300
   1abf8:	b0074628 	.word	0xb0074628
   1abfc:	8ff0e8bd 	.word	0x8ff0e8bd
   1ac00:	46056823 	.word	0x46056823
   1ac04:	7300f023 	.word	0x7300f023
   1ac08:	e7f56023 	.word	0xe7f56023
   1ac0c:	300ff8b0 	.word	0x300ff8b0
   1ac10:	f8a82500 	.word	0xf8a82500
   1ac14:	e7e63000 	.word	0xe7e63000
   1ac18:	3011f8b0 	.word	0x3011f8b0
   1ac1c:	f8a82500 	.word	0xf8a82500
   1ac20:	e7e03000 	.word	0xe7e03000
   1ac24:	25007b83 	.word	0x25007b83
   1ac28:	3000f888 	.word	0x3000f888
   1ac2c:	f8b0e7db 	.word	0xf8b0e7db
   1ac30:	25003013 	.word	0x25003013
   1ac34:	3000f8a8 	.word	0x3000f8a8
   1ac38:	7b03e7d5 	.word	0x7b03e7d5
   1ac3c:	f8882500 	.word	0xf8882500
   1ac40:	e7d03000 	.word	0xe7d03000
   1ac44:	f7f72016 	.word	0xf7f72016
   1ac48:	f04ffa73 	.word	0xf04ffa73
   1ac4c:	f8d935ff 	.word	0xf8d935ff
   1ac50:	e7c80000 	.word	0xe7c80000
   1ac54:	b11b6803 	.word	0xb11b6803
   1ac58:	f7f84618 	.word	0xf7f84618
   1ac5c:	9800fcb9 	.word	0x9800fcb9
   1ac60:	fcaef7f8 	.word	0xfcaef7f8
   1ac64:	f7f72023 	.word	0xf7f72023
   1ac68:	6823fa63 	.word	0x6823fa63
   1ac6c:	f023200e 	.word	0xf023200e
   1ac70:	60237380 	.word	0x60237380
   1ac74:	35fff04f 	.word	0x35fff04f
   1ac78:	fa5af7f7 	.word	0xfa5af7f7
   1ac7c:	200ee747 	.word	0x200ee747
   1ac80:	fa56f7f7 	.word	0xfa56f7f7
   1ac84:	35fff04f 	.word	0x35fff04f
   1ac88:	202ae741 	.word	0x202ae741
   1ac8c:	fa50f7f7 	.word	0xfa50f7f7
   1ac90:	35fff04f 	.word	0x35fff04f
   1ac94:	2009e73b 	.word	0x2009e73b
   1ac98:	fa4af7f7 	.word	0xfa4af7f7
   1ac9c:	35fff04f 	.word	0x35fff04f
   1aca0:	2073e735 	.word	0x2073e735
   1aca4:	fa44f7f7 	.word	0xfa44f7f7
   1aca8:	35fff04f 	.word	0x35fff04f
   1acac:	2005e72f 	.word	0x2005e72f
   1acb0:	fa3ef7f7 	.word	0xfa3ef7f7
   1acb4:	35fff04f 	.word	0x35fff04f
   1acb8:	bf00e729 	.word	0xbf00e729
   1acbc:	2002068c 	.word	0x2002068c
   1acc0:	49765443 	.word	0x49765443
   1acc4:	2002d3f8 	.word	0x2002d3f8
   1acc8:	20025e1e 	.word	0x20025e1e
   1accc:	20020634 	.word	0x20020634

0001acd0 <gnss_interface_init>:
   1acd0:	b5382100 	.word	0xb5382100
   1acd4:	4d0a4c09 	.word	0x4d0a4c09
   1acd8:	480a6822 	.word	0x480a6822
   1acdc:	402a4b0a 	.word	0x402a4b0a
   1ace0:	80016022 	.word	0x80016022
   1ace4:	f7f86019 	.word	0xf7f86019
   1ace8:	b928fc3b 	.word	0xb928fc3b
   1acec:	402b6823 	.word	0x402b6823
   1acf0:	0301f043 	.word	0x0301f043
   1acf4:	bd386023 	.word	0xbd386023
   1acf8:	bd382003 	.word	0xbd382003
   1acfc:	2002068c 	.word	0x2002068c
   1ad00:	ffff0000 	.word	0xffff0000
   1ad04:	20025e1e 	.word	0x20025e1e
   1ad08:	20020634 	.word	0x20020634

0001ad0c <gnss_interface_open>:
   1ad0c:	b5102801 	.word	0xb5102801
   1ad10:	f5b2d120 	.word	0xf5b2d120
   1ad14:	d11d7f01 	.word	0xd11d7f01
   1ad18:	d11b2902 	.word	0xd11b2902
   1ad1c:	68234c13 	.word	0x68234c13
   1ad20:	2b01b29b 	.word	0x2b01b29b
   1ad24:	6823d11c 	.word	0x6823d11c
   1ad28:	0c1b4608 	.word	0x0c1b4608
   1ad2c:	f043041b 	.word	0xf043041b
   1ad30:	22000302 	.word	0x22000302
   1ad34:	6023490e 	.word	0x6023490e
   1ad38:	fc14f7fa 	.word	0xfc14f7fa
   1ad3c:	60104a0d 	.word	0x60104a0d
   1ad40:	6823b170 	.word	0x6823b170
   1ad44:	f4436802 	.word	0xf4436802
   1ad48:	68123300 	.word	0x68123300
   1ad4c:	47906023 	.word	0x47906023
   1ad50:	bd104809 	.word	0xbd104809
   1ad54:	f7f72016 	.word	0xf7f72016
   1ad58:	f04ff9eb 	.word	0xf04ff9eb
   1ad5c:	bd1030ff 	.word	0xbd1030ff
   1ad60:	f7f7200e 	.word	0xf7f7200e
   1ad64:	f04ff9e5 	.word	0xf04ff9e5
   1ad68:	bd1030ff 	.word	0xbd1030ff
   1ad6c:	2002068c 	.word	0x2002068c
   1ad70:	00013781 	.word	0x00013781
   1ad74:	20020690 	.word	0x20020690
   1ad78:	49765443 	.word	0x49765443

0001ad7c <gnss_interface_close>:
   1ad7c:	4b13b530 	.word	0x4b13b530
   1ad80:	4298b083 	.word	0x4298b083
   1ad84:	4c12d11c 	.word	0x4c12d11c
   1ad88:	b29b6823 	.word	0xb29b6823
   1ad8c:	d00f2b04 	.word	0xd00f2b04
   1ad90:	68284d10 	.word	0x68284d10
   1ad94:	f7fab118 	.word	0xf7fab118
   1ad98:	2300fc05 	.word	0x2300fc05
   1ad9c:	2000602b 	.word	0x2000602b
   1ada0:	0c1b6823 	.word	0x0c1b6823
   1ada4:	f043041b 	.word	0xf043041b
   1ada8:	60230301 	.word	0x60230301
   1adac:	bd30b003 	.word	0xbd30b003
   1adb0:	22082300 	.word	0x22082300
   1adb4:	f44f9300 	.word	0xf44f9300
   1adb8:	f7f97101 	.word	0xf7f97101
   1adbc:	e7e7fb87 	.word	0xe7e7fb87
   1adc0:	f7f72009 	.word	0xf7f72009
   1adc4:	f04ff9b5 	.word	0xf04ff9b5
   1adc8:	e7ef30ff 	.word	0xe7ef30ff
   1adcc:	49765443 	.word	0x49765443
   1add0:	2002068c 	.word	0x2002068c
   1add4:	20020690 	.word	0x20020690

0001add8 <rpc_dfu_event_handler>:
   1add8:	4a08b508 	.word	0x4a08b508
   1addc:	881268c1 	.word	0x881268c1
   1ade0:	ebb24603 	.word	0xebb24603
   1ade4:	d0054f11 	.word	0xd0054f11
   1ade8:	b1106800 	.word	0xb1106800
   1adec:	f81ef004 	.word	0xf81ef004
   1adf0:	bd082000 	.word	0xbd082000
   1adf4:	20014a02 	.word	0x20014a02
   1adf8:	bd086013 	.word	0xbd086013
   1adfc:	20025e20 	.word	0x20025e20
   1ae00:	20020638 	.word	0x20020638

0001ae04 <mfu_interface_init>:
   1ae04:	b5102300 	.word	0xb5102300
   1ae08:	49094808 	.word	0x49094808
   1ae0c:	4c0a4a09 	.word	0x4c0a4a09
   1ae10:	600b8003 	.word	0x600b8003
   1ae14:	60236013 	.word	0x60236013
   1ae18:	ffd2f003 	.word	0xffd2f003
   1ae1c:	2301b910 	.word	0x2301b910
   1ae20:	bd106023 	.word	0xbd106023
   1ae24:	30fff04f 	.word	0x30fff04f
   1ae28:	bf00bd10 	.word	0xbf00bd10
   1ae2c:	20025e20 	.word	0x20025e20
   1ae30:	20020638 	.word	0x20020638
   1ae34:	2002069c 	.word	0x2002069c
   1ae38:	20020694 	.word	0x20020694

0001ae3c <mfu_interface_open>:
   1ae3c:	b5082801 	.word	0xb5082801
   1ae40:	f240d10b 	.word	0xf240d10b
   1ae44:	429a2303 	.word	0x429a2303
   1ae48:	4b09d107 	.word	0x4b09d107
   1ae4c:	2a01681a 	.word	0x2a01681a
   1ae50:	2202d109 	.word	0x2202d109
   1ae54:	4807601a 	.word	0x4807601a
   1ae58:	2016bd08 	.word	0x2016bd08
   1ae5c:	f968f7f7 	.word	0xf968f7f7
   1ae60:	30fff04f 	.word	0x30fff04f
   1ae64:	f7f7bd08 	.word	0xf7f7bd08
   1ae68:	f04ff963 	.word	0xf04ff963
   1ae6c:	bd0830ff 	.word	0xbd0830ff
   1ae70:	20020694 	.word	0x20020694
   1ae74:	49765432 	.word	0x49765432

0001ae78 <mfu_interface_close>:
   1ae78:	4c32b5f0 	.word	0x4c32b5f0
   1ae7c:	6823b083 	.word	0x6823b083
   1ae80:	2a011e9a 	.word	0x2a011e9a
   1ae84:	2b03d857 	.word	0x2b03d857
   1ae88:	2301d004 	.word	0x2301d004
   1ae8c:	60232000 	.word	0x60232000
   1ae90:	bdf0b003 	.word	0xbdf0b003
   1ae94:	46682100 	.word	0x46682100
   1ae98:	ff98f003 	.word	0xff98f003
   1ae9c:	28004603 	.word	0x28004603
   1aea0:	2104d13d 	.word	0x2104d13d
   1aea4:	98004e28 	.word	0x98004e28
   1aea8:	72018832 	.word	0x72018832
   1aeac:	b2923201 	.word	0xb2923201
   1aeb0:	f0410411 	.word	0xf0410411
   1aeb4:	4d250106 	.word	0x4d250106
   1aeb8:	710360c1 	.word	0x710360c1
   1aebc:	71837143 	.word	0x71837143
   1aec0:	724371c3 	.word	0x724371c3
   1aec4:	72c37283 	.word	0x72c37283
   1aec8:	80322106 	.word	0x80322106
   1aecc:	f003602b 	.word	0xf003602b
   1aed0:	b9d8ff91 	.word	0xb9d8ff91
   1aed4:	33fff04f 	.word	0x33fff04f
   1aed8:	4627ae02 	.word	0x4627ae02
   1aedc:	3d04f846 	.word	0x3d04f846
   1aee0:	4631e004 	.word	0x4631e004
   1aee4:	f7f74638 	.word	0xf7f74638
   1aee8:	b9f0f893 	.word	0xb9f0f893
   1aeec:	28006828 	.word	0x28006828
   1aef0:	6905d0f7 	.word	0x6905d0f7
   1aef4:	ff92f003 	.word	0xff92f003
   1aef8:	d0c62d00 	.word	0xd0c62d00
   1aefc:	20084b14 	.word	0x20084b14
   1af00:	f7f7601d 	.word	0xf7f7601d
   1af04:	f04ff915 	.word	0xf04ff915
   1af08:	e7c130ff 	.word	0xe7c130ff
   1af0c:	68039800 	.word	0x68039800
   1af10:	4618b11b 	.word	0x4618b11b
   1af14:	ff8af003 	.word	0xff8af003
   1af18:	f0039800 	.word	0xf0039800
   1af1c:	200cff7f 	.word	0x200cff7f
   1af20:	f906f7f7 	.word	0xf906f7f7
   1af24:	30fff04f 	.word	0x30fff04f
   1af28:	203ce7b2 	.word	0x203ce7b2
   1af2c:	f900f7f7 	.word	0xf900f7f7
   1af30:	30fff04f 	.word	0x30fff04f
   1af34:	2001e7ac 	.word	0x2001e7ac
   1af38:	f8faf7f7 	.word	0xf8faf7f7
   1af3c:	30fff04f 	.word	0x30fff04f
   1af40:	bf00e7a6 	.word	0xbf00e7a6
   1af44:	20020694 	.word	0x20020694
   1af48:	20025e20 	.word	0x20025e20
   1af4c:	20020638 	.word	0x20020638
   1af50:	20020698 	.word	0x20020698

0001af54 <mfu_interface_sendto>:
   1af54:	47f0e92d 	.word	0x47f0e92d
   1af58:	46154e5a 	.word	0x46154e5a
   1af5c:	b0826833 	.word	0xb0826833
   1af60:	2a011e9a 	.word	0x2a011e9a
   1af64:	80a7f200 	.word	0x80a7f200
   1af68:	2900460f 	.word	0x2900460f
   1af6c:	809df000 	.word	0x809df000
   1af70:	f0002d00 	.word	0xf0002d00
   1af74:	2b02809a 	.word	0x2b02809a
   1af78:	d04e46e8 	.word	0xd04e46e8
   1af7c:	46294640 	.word	0x46294640
   1af80:	ff24f003 	.word	0xff24f003
   1af84:	b1404606 	.word	0xb1404606
   1af88:	f7f7200c 	.word	0xf7f7200c
   1af8c:	f04ff8d1 	.word	0xf04ff8d1
   1af90:	462835ff 	.word	0x462835ff
   1af94:	e8bdb002 	.word	0xe8bdb002
   1af98:	9b0087f0 	.word	0x9b0087f0
   1af9c:	68184639 	.word	0x68184639
   1afa0:	f009462a 	.word	0xf009462a
   1afa4:	2104fc8d 	.word	0x2104fc8d
   1afa8:	98004c47 	.word	0x98004c47
   1afac:	60458823 	.word	0x60458823
   1afb0:	b29b3301 	.word	0xb29b3301
   1afb4:	8023041a 	.word	0x8023041a
   1afb8:	4c44430a 	.word	0x4c44430a
   1afbc:	724660c2 	.word	0x724660c2
   1afc0:	72c67286 	.word	0x72c67286
   1afc4:	60267201 	.word	0x60267201
   1afc8:	ff14f003 	.word	0xff14f003
   1afcc:	d1622800 	.word	0xd1622800
   1afd0:	33fff04f 	.word	0x33fff04f
   1afd4:	4f3bae02 	.word	0x4f3bae02
   1afd8:	3d04f846 	.word	0x3d04f846
   1afdc:	4631e004 	.word	0x4631e004
   1afe0:	f7f74638 	.word	0xf7f74638
   1afe4:	b978f815 	.word	0xb978f815
   1afe8:	28006820 	.word	0x28006820
   1afec:	6904d0f7 	.word	0x6904d0f7
   1aff0:	ff14f003 	.word	0xff14f003
   1aff4:	d0cc2c00 	.word	0xd0cc2c00
   1aff8:	20084b35 	.word	0x20084b35
   1affc:	f04f601c 	.word	0xf04f601c
   1b000:	f7f735ff 	.word	0xf7f735ff
   1b004:	e7c4f895 	.word	0xe7c4f895
   1b008:	35fff04f 	.word	0x35fff04f
   1b00c:	f7f7203c 	.word	0xf7f7203c
   1b010:	4628f88f 	.word	0x4628f88f
   1b014:	e8bdb002 	.word	0xe8bdb002
   1b018:	464087f0 	.word	0x464087f0
   1b01c:	f0032100 	.word	0xf0032100
   1b020:	4602fed5 	.word	0x4602fed5
   1b024:	d1af2800 	.word	0xd1af2800
   1b028:	0c08f04f 	.word	0x0c08f04f
   1b02c:	48294926 	.word	0x48294926
   1b030:	6804880b 	.word	0x6804880b
   1b034:	98003301 	.word	0x98003301
   1b038:	800bb29b 	.word	0x800bb29b
   1b03c:	f043041b 	.word	0xf043041b
   1b040:	61040303 	.word	0x61040303
   1b044:	60c34c21 	.word	0x60c34c21
   1b048:	71427102 	.word	0x71427102
   1b04c:	71c27182 	.word	0x71c27182
   1b050:	72827242 	.word	0x72827242
   1b054:	f88072c2 	.word	0xf88072c2
   1b058:	2103c008 	.word	0x2103c008
   1b05c:	f0036022 	.word	0xf0036022
   1b060:	b9c0fec9 	.word	0xb9c0fec9
   1b064:	33fff04f 	.word	0x33fff04f
   1b068:	0908f10d 	.word	0x0908f10d
   1b06c:	3d04f849 	.word	0x3d04f849
   1b070:	e00546b2 	.word	0xe00546b2
   1b074:	46504649 	.word	0x46504649
   1b078:	ffcaf7f6 	.word	0xffcaf7f6
   1b07c:	d1c32800 	.word	0xd1c32800
   1b080:	28006820 	.word	0x28006820
   1b084:	6904d0f6 	.word	0x6904d0f6
   1b088:	fec8f003 	.word	0xfec8f003
   1b08c:	d1b32c00 	.word	0xd1b32c00
   1b090:	60332303 	.word	0x60332303
   1b094:	9800e772 	.word	0x9800e772
   1b098:	b11b6803 	.word	0xb11b6803
   1b09c:	f0034618 	.word	0xf0034618
   1b0a0:	9800fec5 	.word	0x9800fec5
   1b0a4:	febaf003 	.word	0xfebaf003
   1b0a8:	2016e76e 	.word	0x2016e76e
   1b0ac:	f840f7f7 	.word	0xf840f7f7
   1b0b0:	35fff04f 	.word	0x35fff04f
   1b0b4:	2001e76d 	.word	0x2001e76d
   1b0b8:	f83af7f7 	.word	0xf83af7f7
   1b0bc:	35fff04f 	.word	0x35fff04f
   1b0c0:	bf00e767 	.word	0xbf00e767
   1b0c4:	20020694 	.word	0x20020694
   1b0c8:	20025e20 	.word	0x20025e20
   1b0cc:	20020638 	.word	0x20020638
   1b0d0:	20020698 	.word	0x20020698
   1b0d4:	2002069c 	.word	0x2002069c

0001b0d8 <mfu_interface_setopt>:
   1b0d8:	4846b5f0 	.word	0x4846b5f0
   1b0dc:	6800b083 	.word	0x6800b083
   1b0e0:	28013802 	.word	0x28013802
   1b0e4:	f240d877 	.word	0xf240d877
   1b0e8:	42812003 	.word	0x42812003
   1b0ec:	3a04d16d 	.word	0x3a04d16d
   1b0f0:	d85c2a03 	.word	0xd85c2a03
   1b0f4:	f002e8df 	.word	0xf002e8df
   1b0f8:	514e024b 	.word	0x514e024b
   1b0fc:	46252407 	.word	0x46252407
   1b100:	46682100 	.word	0x46682100
   1b104:	fe62f003 	.word	0xfe62f003
   1b108:	28004603 	.word	0x28004603
   1b10c:	2704d138 	.word	0x2704d138
   1b110:	98004e39 	.word	0x98004e39
   1b114:	46298832 	.word	0x46298832
   1b118:	b2923201 	.word	0xb2923201
   1b11c:	4502ea44 	.word	0x4502ea44
   1b120:	60c54c36 	.word	0x60c54c36
   1b124:	71437103 	.word	0x71437103
   1b128:	71c37183 	.word	0x71c37183
   1b12c:	72837243 	.word	0x72837243
   1b130:	720772c3 	.word	0x720772c3
   1b134:	60238032 	.word	0x60238032
   1b138:	fe5cf003 	.word	0xfe5cf003
   1b13c:	f04fb9b8 	.word	0xf04fb9b8
   1b140:	ad0233ff 	.word	0xad0233ff
   1b144:	f8454e2b 	.word	0xf8454e2b
   1b148:	e0053d04 	.word	0xe0053d04
   1b14c:	46304629 	.word	0x46304629
   1b150:	ff5ef7f6 	.word	0xff5ef7f6
   1b154:	d1312800 	.word	0xd1312800
   1b158:	28006820 	.word	0x28006820
   1b15c:	6904d0f6 	.word	0x6904d0f6
   1b160:	fe5cf003 	.word	0xfe5cf003
   1b164:	d13c2c00 	.word	0xd13c2c00
   1b168:	b0034620 	.word	0xb0034620
   1b16c:	9800bdf0 	.word	0x9800bdf0
   1b170:	b11b6803 	.word	0xb11b6803
   1b174:	f0034618 	.word	0xf0034618
   1b178:	9800fe59 	.word	0x9800fe59
   1b17c:	fe4ef003 	.word	0xfe4ef003
   1b180:	f7f6200c 	.word	0xf7f6200c
   1b184:	f04fffd5 	.word	0xf04fffd5
   1b188:	b00330ff 	.word	0xb00330ff
   1b18c:	2405bdf0 	.word	0x2405bdf0
   1b190:	e7b54625 	.word	0xe7b54625
   1b194:	46252408 	.word	0x46252408
   1b198:	b1b3e7b2 	.word	0xb1b3e7b2
   1b19c:	2a049a08 	.word	0x2a049a08
   1b1a0:	2000d113 	.word	0x2000d113
   1b1a4:	4b16681a 	.word	0x4b16681a
   1b1a8:	b003601a 	.word	0xb003601a
   1b1ac:	202abdf0 	.word	0x202abdf0
   1b1b0:	ffbef7f6 	.word	0xffbef7f6
   1b1b4:	30fff04f 	.word	0x30fff04f
   1b1b8:	bdf0b003 	.word	0xbdf0b003
   1b1bc:	f7f6203c 	.word	0xf7f6203c
   1b1c0:	f04fffb7 	.word	0xf04fffb7
   1b1c4:	b00330ff 	.word	0xb00330ff
   1b1c8:	2016bdf0 	.word	0x2016bdf0
   1b1cc:	ffb0f7f6 	.word	0xffb0f7f6
   1b1d0:	30fff04f 	.word	0x30fff04f
   1b1d4:	2001e7c9 	.word	0x2001e7c9
   1b1d8:	ffaaf7f6 	.word	0xffaaf7f6
   1b1dc:	30fff04f 	.word	0x30fff04f
   1b1e0:	4b08e7c3 	.word	0x4b08e7c3
   1b1e4:	601c2008 	.word	0x601c2008
   1b1e8:	ffa2f7f6 	.word	0xffa2f7f6
   1b1ec:	30fff04f 	.word	0x30fff04f
   1b1f0:	bf00e7bb 	.word	0xbf00e7bb
   1b1f4:	20020694 	.word	0x20020694
   1b1f8:	20025e20 	.word	0x20025e20
   1b1fc:	20020638 	.word	0x20020638
   1b200:	2002069c 	.word	0x2002069c
   1b204:	20020698 	.word	0x20020698

0001b208 <mfu_interface_getopt>:
   1b208:	2003f240 	.word	0x2003f240
   1b20c:	41f0e92d 	.word	0x41f0e92d
   1b210:	b0824281 	.word	0xb0824281
   1b214:	f0409e08 	.word	0xf0409e08
   1b218:	461d80ae 	.word	0x461d80ae
   1b21c:	f0002b00 	.word	0xf0002b00
   1b220:	2e0080aa 	.word	0x2e0080aa
   1b224:	80a7f000 	.word	0x80a7f000
   1b228:	681b4b5e 	.word	0x681b4b5e
   1b22c:	2b013b02 	.word	0x2b013b02
   1b230:	80a7f200 	.word	0x80a7f200
   1b234:	2a133a01 	.word	0x2a133a01
   1b238:	e8dfd879 	.word	0xe8dfd879
   1b23c:	5f17f002 	.word	0x5f17f002
   1b240:	78787878 	.word	0x78787878
   1b244:	78787872 	.word	0x78787872
   1b248:	78787878 	.word	0x78787878
   1b24c:	78787878 	.word	0x78787878
   1b250:	68330a78 	.word	0x68330a78
   1b254:	f0402b04 	.word	0xf0402b04
   1b258:	2200808e 	.word	0x2200808e
   1b25c:	4b524610 	.word	0x4b524610
   1b260:	601a6819 	.word	0x601a6819
   1b264:	b0026029 	.word	0xb0026029
   1b268:	81f0e8bd 	.word	0x81f0e8bd
   1b26c:	2b246833 	.word	0x2b246833
   1b270:	8081f040 	.word	0x8081f040
   1b274:	46a02401 	.word	0x46a02401
   1b278:	46682100 	.word	0x46682100
   1b27c:	fda6f003 	.word	0xfda6f003
   1b280:	d1462800 	.word	0xd1462800
   1b284:	9b004949 	.word	0x9b004949
   1b288:	f1b8880a 	.word	0xf1b8880a
   1b28c:	f1020f03 	.word	0xf1020f03
   1b290:	b2920201 	.word	0xb2920201
   1b294:	4402ea44 	.word	0x4402ea44
   1b298:	800a7118 	.word	0x800a7118
   1b29c:	715860dc 	.word	0x715860dc
   1b2a0:	71d87198 	.word	0x71d87198
   1b2a4:	2104d04b 	.word	0x2104d04b
   1b2a8:	4f412200 	.word	0x4f412200
   1b2ac:	46186099 	.word	0x46186099
   1b2b0:	603a4641 	.word	0x603a4641
   1b2b4:	fd9ef003 	.word	0xfd9ef003
   1b2b8:	d14d2800 	.word	0xd14d2800
   1b2bc:	33fff04f 	.word	0x33fff04f
   1b2c0:	f844ac02 	.word	0xf844ac02
   1b2c4:	f8df3d04 	.word	0xf8df3d04
   1b2c8:	e00580dc 	.word	0xe00580dc
   1b2cc:	46404621 	.word	0x46404621
   1b2d0:	fe9ef7f6 	.word	0xfe9ef7f6
   1b2d4:	d1372800 	.word	0xd1372800
   1b2d8:	29006839 	.word	0x29006839
   1b2dc:	690cd0f6 	.word	0x690cd0f6
   1b2e0:	d1542c00 	.word	0xd1542c00
   1b2e4:	31146832 	.word	0x31146832
   1b2e8:	f0094628 	.word	0xf0094628
   1b2ec:	6838fae9 	.word	0x6838fae9
   1b2f0:	fd94f003 	.word	0xfd94f003
   1b2f4:	b0024620 	.word	0xb0024620
   1b2f8:	81f0e8bd 	.word	0x81f0e8bd
   1b2fc:	2b046833 	.word	0x2b046833
   1b300:	2402d139 	.word	0x2402d139
   1b304:	46682100 	.word	0x46682100
   1b308:	f00346a0 	.word	0xf00346a0
   1b30c:	2800fd5f 	.word	0x2800fd5f
   1b310:	200cd0b8 	.word	0x200cd0b8
   1b314:	ff0cf7f6 	.word	0xff0cf7f6
   1b318:	30fff04f 	.word	0x30fff04f
   1b31c:	e8bdb002 	.word	0xe8bdb002
   1b320:	683381f0 	.word	0x683381f0
   1b324:	d1262b04 	.word	0xd1262b04
   1b328:	46a02409 	.word	0x46a02409
   1b32c:	202ae7a4 	.word	0x202ae7a4
   1b330:	fefef7f6 	.word	0xfefef7f6
   1b334:	30fff04f 	.word	0x30fff04f
   1b338:	e8bdb002 	.word	0xe8bdb002
   1b33c:	4a1d81f0 	.word	0x4a1d81f0
   1b340:	68122108 	.word	0x68122108
   1b344:	e7af611a 	.word	0xe7af611a
   1b348:	f7f6203c 	.word	0xf7f6203c
   1b34c:	f04ffef1 	.word	0xf04ffef1
   1b350:	b00230ff 	.word	0xb00230ff
   1b354:	81f0e8bd 	.word	0x81f0e8bd
   1b358:	68039800 	.word	0x68039800
   1b35c:	4618b11b 	.word	0x4618b11b
   1b360:	fd64f003 	.word	0xfd64f003
   1b364:	f0039800 	.word	0xf0039800
   1b368:	200cfd59 	.word	0x200cfd59
   1b36c:	fee0f7f6 	.word	0xfee0f7f6
   1b370:	30fff04f 	.word	0x30fff04f
   1b374:	2016e7d2 	.word	0x2016e7d2
   1b378:	fedaf7f6 	.word	0xfedaf7f6
   1b37c:	30fff04f 	.word	0x30fff04f
   1b380:	2001e771 	.word	0x2001e771
   1b384:	fed4f7f6 	.word	0xfed4f7f6
   1b388:	30fff04f 	.word	0x30fff04f
   1b38c:	4b06e76b 	.word	0x4b06e76b
   1b390:	601c2008 	.word	0x601c2008
   1b394:	feccf7f6 	.word	0xfeccf7f6
   1b398:	f0036838 	.word	0xf0036838
   1b39c:	f04ffd3f 	.word	0xf04ffd3f
   1b3a0:	e76030ff 	.word	0xe76030ff
   1b3a4:	20020694 	.word	0x20020694
   1b3a8:	20020698 	.word	0x20020698
   1b3ac:	20025e20 	.word	0x20025e20
   1b3b0:	20020638 	.word	0x20020638
   1b3b4:	2002069c 	.word	0x2002069c

0001b3b8 <unimplemented_method>:
   1b3b8:	b508b40f 	.word	0xb508b40f
   1b3bc:	f7f6202d 	.word	0xf7f6202d
   1b3c0:	e8bdfeb7 	.word	0xe8bdfeb7
   1b3c4:	f04f4008 	.word	0xf04f4008
   1b3c8:	b00430ff 	.word	0xb00430ff
   1b3cc:	bf004770 	.word	0xbf004770

0001b3d0 <bsd_platform_init>:
   1b3d0:	b093b5f0 	.word	0xb093b5f0
   1b3d4:	ff62f003 	.word	0xff62f003
   1b3d8:	d1522800 	.word	0xd1522800
   1b3dc:	a801492b 	.word	0xa801492b
   1b3e0:	ffd0f003 	.word	0xffd0f003
   1b3e4:	d14c2800 	.word	0xd14c2800
   1b3e8:	ff8ef7f6 	.word	0xff8ef7f6
   1b3ec:	f814f003 	.word	0xf814f003
   1b3f0:	d1462800 	.word	0xd1462800
   1b3f4:	f44f2320 	.word	0xf44f2320
   1b3f8:	22084180 	.word	0x22084180
   1b3fc:	5c40f44f 	.word	0x5c40f44f
   1b400:	4e244f23 	.word	0x4e244f23
   1b404:	93059303 	.word	0x93059303
   1b408:	4d239307 	.word	0x4d239307
   1b40c:	910d9109 	.word	0x910d9109
   1b410:	49234c22 	.word	0x49234c22
   1b414:	e9cd4b23 	.word	0xe9cd4b23
   1b418:	eb0d0010 	.word	0xeb0d0010
   1b41c:	f8cd0002 	.word	0xf8cd0002
   1b420:	e9cdc02c 	.word	0xe9cdc02c
   1b424:	9702220e 	.word	0x9702220e
   1b428:	95069604 	.word	0x95069604
   1b42c:	910a9408 	.word	0x910a9408
   1b430:	f7f8930c 	.word	0xf7f8930c
   1b434:	b108ff0d 	.word	0xb108ff0d
   1b438:	bdf0b013 	.word	0xbdf0b013
   1b43c:	fd8af7fc 	.word	0xfd8af7fc
   1b440:	f7f8b9f8 	.word	0xf7f8b9f8
   1b444:	b9e0f9fd 	.word	0xb9e0f9fd
   1b448:	f832f7fd 	.word	0xf832f7fd
   1b44c:	f7fab9c8 	.word	0xf7fab9c8
   1b450:	b9b0f965 	.word	0xb9b0f965
   1b454:	fcd6f7ff 	.word	0xfcd6f7ff
   1b458:	f7f7b998 	.word	0xf7f7b998
   1b45c:	b980fff9 	.word	0xb980fff9
   1b460:	f8e6f000 	.word	0xf8e6f000
   1b464:	f005b968 	.word	0xf005b968
   1b468:	b950f90f 	.word	0xb950f90f
   1b46c:	fc30f7ff 	.word	0xfc30f7ff
   1b470:	f7f8b938 	.word	0xf7f8b938
   1b474:	3000fbe9 	.word	0x3000fbe9
   1b478:	2001bf18 	.word	0x2001bf18
   1b47c:	b0134240 	.word	0xb0134240
   1b480:	f04fbdf0 	.word	0xf04fbdf0
   1b484:	b01330ff 	.word	0xb01330ff
   1b488:	bf00bdf0 	.word	0xbf00bdf0
   1b48c:	00026c68 	.word	0x00026c68
   1b490:	20010000 	.word	0x20010000
   1b494:	20010040 	.word	0x20010040
   1b498:	20010020 	.word	0x20010020
   1b49c:	20017060 	.word	0x20017060
   1b4a0:	20010060 	.word	0x20010060
   1b4a4:	20013060 	.word	0x20013060

0001b4a8 <bsd_platform_af_method_table_get>:
   1b4a8:	d02a2805 	.word	0xd02a2805
   1b4ac:	d914b508 	.word	0xd914b508
   1b4b0:	d016280a 	.word	0xd016280a
   1b4b4:	d10b2866 	.word	0xd10b2866
   1b4b8:	2302f240 	.word	0x2302f240
   1b4bc:	d032429a 	.word	0xd032429a
   1b4c0:	2305f240 	.word	0x2305f240
   1b4c4:	d032429a 	.word	0xd032429a
   1b4c8:	2301f240 	.word	0x2301f240
   1b4cc:	d02c429a 	.word	0xd02c429a
   1b4d0:	f7f62016 	.word	0xf7f62016
   1b4d4:	2000fe2d 	.word	0x2000fe2d
   1b4d8:	2801bd08 	.word	0x2801bd08
   1b4dc:	2802d016 	.word	0x2802d016
   1b4e0:	f5a2d1f6 	.word	0xf5a2d1f6
   1b4e4:	2a0a7282 	.word	0x2a0a7282
   1b4e8:	2301d819 	.word	0x2301d819
   1b4ec:	4103f240 	.word	0x4103f240
   1b4f0:	fa034810 	.word	0xfa034810
   1b4f4:	420af202 	.word	0x420af202
   1b4f8:	0328f100 	.word	0x0328f100
   1b4fc:	4618bf18 	.word	0x4618bf18
   1b500:	2903bd08 	.word	0x2903bd08
   1b504:	bf18480c 	.word	0xbf18480c
   1b508:	47702000 	.word	0x47702000
   1b50c:	2303f240 	.word	0x2303f240
   1b510:	d006429a 	.word	0xd006429a
   1b514:	7f01f5b2 	.word	0x7f01f5b2
   1b518:	4808d1da 	.word	0x4808d1da
   1b51c:	4805bd08 	.word	0x4805bd08
   1b520:	4807bd08 	.word	0x4807bd08
   1b524:	4807bd08 	.word	0x4807bd08
   1b528:	4807bd08 	.word	0x4807bd08
   1b52c:	4807bd08 	.word	0x4807bd08
   1b530:	bf00bd08 	.word	0xbf00bd08
   1b534:	00026b34 	.word	0x00026b34
   1b538:	00026c24 	.word	0x00026c24
   1b53c:	00026bd4 	.word	0x00026bd4
   1b540:	00026b84 	.word	0x00026b84
   1b544:	00026bac 	.word	0x00026bac
   1b548:	00026b0c 	.word	0x00026b0c
   1b54c:	00026bfc 	.word	0x00026bfc

0001b550 <bsd_platform_fd_method_table_get>:
   1b550:	4605b538 	.word	0x4605b538
   1b554:	fe1af7fc 	.word	0xfe1af7fc
   1b558:	b9504604 	.word	0xb9504604
   1b55c:	43ab4b2a 	.word	0x43ab4b2a
   1b560:	4b2ad032 	.word	0x4b2ad032
   1b564:	d04343ab 	.word	0xd04343ab
   1b568:	43ab4b29 	.word	0x43ab4b29
   1b56c:	4829d146 	.word	0x4829d146
   1b570:	68c3bd38 	.word	0x68c3bd38
   1b574:	2b056942 	.word	0x2b056942
   1b578:	d911d034 	.word	0xd911d034
   1b57c:	d0132b0a 	.word	0xd0132b0a
   1b580:	d12a2b66 	.word	0xd12a2b66
   1b584:	2302f240 	.word	0x2302f240
   1b588:	d031429a 	.word	0xd031429a
   1b58c:	2305f240 	.word	0x2305f240
   1b590:	d031429a 	.word	0xd031429a
   1b594:	2301f240 	.word	0x2301f240
   1b598:	d11e429a 	.word	0xd11e429a
   1b59c:	bd38481e 	.word	0xbd38481e
   1b5a0:	d0132b01 	.word	0xd0132b01
   1b5a4:	d1182b02 	.word	0xd1182b02
   1b5a8:	7282f5a2 	.word	0x7282f5a2
   1b5ac:	d8212a0a 	.word	0xd8212a0a
   1b5b0:	f2402301 	.word	0xf2402301
   1b5b4:	48194103 	.word	0x48194103
   1b5b8:	f202fa03 	.word	0xf202fa03
   1b5bc:	f100420a 	.word	0xf100420a
   1b5c0:	bf180428 	.word	0xbf180428
   1b5c4:	bd384620 	.word	0xbd384620
   1b5c8:	bd384815 	.word	0xbd384815
   1b5cc:	2303f240 	.word	0x2303f240
   1b5d0:	d0f9429a 	.word	0xd0f9429a
   1b5d4:	7f01f5b2 	.word	0x7f01f5b2
   1b5d8:	2016d0c9 	.word	0x2016d0c9
   1b5dc:	fda8f7f6 	.word	0xfda8f7f6
   1b5e0:	bd382000 	.word	0xbd382000
   1b5e4:	480f6903 	.word	0x480f6903
   1b5e8:	bf182b03 	.word	0xbf182b03
   1b5ec:	bd382000 	.word	0xbd382000
   1b5f0:	bd38480d 	.word	0xbd38480d
   1b5f4:	bd384809 	.word	0xbd384809
   1b5f8:	bd38480c 	.word	0xbd38480c
   1b5fc:	f7f62009 	.word	0xf7f62009
   1b600:	4620fd97 	.word	0x4620fd97
   1b604:	bf00bd38 	.word	0xbf00bd38
   1b608:	49765432 	.word	0x49765432
   1b60c:	789a0000 	.word	0x789a0000
   1b610:	49765443 	.word	0x49765443
   1b614:	00026bd4 	.word	0x00026bd4
   1b618:	00026b0c 	.word	0x00026b0c
   1b61c:	00026b34 	.word	0x00026b34
   1b620:	00026b84 	.word	0x00026b84
   1b624:	00026c24 	.word	0x00026c24
   1b628:	00026bac 	.word	0x00026bac
   1b62c:	00026bfc 	.word	0x00026bfc

0001b630 <nrf_inbuilt_key_init>:
   1b630:	b086b570 	.word	0xb086b570
   1b634:	a802491d 	.word	0xa802491d
   1b638:	fea4f003 	.word	0xfea4f003
   1b63c:	4601bb00 	.word	0x4601bb00
   1b640:	f2404604 	.word	0xf2404604
   1b644:	20662201 	.word	0x20662201
   1b648:	f8fcf7f8 	.word	0xf8fcf7f8
   1b64c:	28004e18 	.word	0x28004e18
   1b650:	60304605 	.word	0x60304605
   1b654:	4817db10 	.word	0x4817db10
   1b658:	f8fef009 	.word	0xf8fef009
   1b65c:	46024623 	.word	0x46024623
   1b660:	46284914 	.word	0x46284914
   1b664:	94009401 	.word	0x94009401
   1b668:	f896f7f8 	.word	0xf896f7f8
   1b66c:	48114605 	.word	0x48114605
   1b670:	f8f2f009 	.word	0xf8f2f009
   1b674:	d00742a8 	.word	0xd00742a8
   1b678:	46202405 	.word	0x46202405
   1b67c:	bd70b006 	.word	0xbd70b006
   1b680:	46202469 	.word	0x46202469
   1b684:	bd70b006 	.word	0xbd70b006
   1b688:	e9cd6830 	.word	0xe9cd6830
   1b68c:	a9034400 	.word	0xa9034400
   1b690:	220a4623 	.word	0x220a4623
   1b694:	f968f7f8 	.word	0xf968f7f8
   1b698:	dded2801 	.word	0xdded2801
   1b69c:	2202a803 	.word	0x2202a803
   1b6a0:	f0094905 	.word	0xf0094905
   1b6a4:	2800f8ee 	.word	0x2800f8ee
   1b6a8:	e7e5d0e7 	.word	0xe7e5d0e7
   1b6ac:	2002d400 	.word	0x2002d400
   1b6b0:	2002d3fc 	.word	0x2002d3fc
   1b6b4:	00026c7c 	.word	0x00026c7c
   1b6b8:	0002685c 	.word	0x0002685c

0001b6bc <symbol_0005436>:
   1b6bc:	460a4b02 	.word	0x460a4b02
   1b6c0:	2100681b 	.word	0x2100681b
   1b6c4:	bf004718 	.word	0xbf004718
   1b6c8:	2002d414 	.word	0x2002d414

0001b6cc <mpi_mul_hlp>:
   1b6cc:	e92d280f 	.word	0xe92d280f
   1b6d0:	46864ff0 	.word	0x46864ff0
   1b6d4:	82e0f240 	.word	0x82e0f240
   1b6d8:	0800f04f 	.word	0x0800f04f
   1b6dc:	f1014684 	.word	0xf1014684
   1b6e0:	f1020440 	.word	0xf1020440
   1b6e4:	f8540040 	.word	0xf8540040
   1b6e8:	f8506c40 	.word	0xf8506c40
   1b6ec:	fba35c40 	.word	0xfba35c40
   1b6f0:	eb186706 	.word	0xeb186706
   1b6f4:	bf2c0806 	.word	0xbf2c0806
   1b6f8:	0901f04f 	.word	0x0901f04f
   1b6fc:	0900f04f 	.word	0x0900f04f
   1b700:	0508eb15 	.word	0x0508eb15
   1b704:	f04f444f 	.word	0xf04f444f
   1b708:	bf280900 	.word	0xbf280900
   1b70c:	0901f04f 	.word	0x0901f04f
   1b710:	5c40f840 	.word	0x5c40f840
   1b714:	6c3cf854 	.word	0x6c3cf854
   1b718:	fba344b9 	.word	0xfba344b9
   1b71c:	eb19ab06 	.word	0xeb19ab06
   1b720:	bf2c090a 	.word	0xbf2c090a
   1b724:	0801f04f 	.word	0x0801f04f
   1b728:	0800f04f 	.word	0x0800f04f
   1b72c:	6c3cf850 	.word	0x6c3cf850
   1b730:	050beb08 	.word	0x050beb08
   1b734:	0609eb16 	.word	0x0609eb16
   1b738:	0800f04f 	.word	0x0800f04f
   1b73c:	f04fbf28 	.word	0xf04fbf28
   1b740:	f8400801 	.word	0xf8400801
   1b744:	f8546c3c 	.word	0xf8546c3c
   1b748:	44a86c38 	.word	0x44a86c38
   1b74c:	6706fba3 	.word	0x6706fba3
   1b750:	0806eb18 	.word	0x0806eb18
   1b754:	f04fbf2c 	.word	0xf04fbf2c
   1b758:	f04f0901 	.word	0xf04f0901
   1b75c:	f8500900 	.word	0xf8500900
   1b760:	444f5c38 	.word	0x444f5c38
   1b764:	0508eb15 	.word	0x0508eb15
   1b768:	0900f04f 	.word	0x0900f04f
   1b76c:	f04fbf28 	.word	0xf04fbf28
   1b770:	f8400901 	.word	0xf8400901
   1b774:	f8545c38 	.word	0xf8545c38
   1b778:	44b96c34 	.word	0x44b96c34
   1b77c:	ab06fba3 	.word	0xab06fba3
   1b780:	090aeb19 	.word	0x090aeb19
   1b784:	f04fbf2c 	.word	0xf04fbf2c
   1b788:	f04f0801 	.word	0xf04f0801
   1b78c:	f8500800 	.word	0xf8500800
   1b790:	eb086c34 	.word	0xeb086c34
   1b794:	eb16050b 	.word	0xeb16050b
   1b798:	f04f0609 	.word	0xf04f0609
   1b79c:	bf280800 	.word	0xbf280800
   1b7a0:	0801f04f 	.word	0x0801f04f
   1b7a4:	6c34f840 	.word	0x6c34f840
   1b7a8:	6c30f854 	.word	0x6c30f854
   1b7ac:	fba344a8 	.word	0xfba344a8
   1b7b0:	eb186706 	.word	0xeb186706
   1b7b4:	bf2c0806 	.word	0xbf2c0806
   1b7b8:	0901f04f 	.word	0x0901f04f
   1b7bc:	0900f04f 	.word	0x0900f04f
   1b7c0:	5c30f850 	.word	0x5c30f850
   1b7c4:	eb15444f 	.word	0xeb15444f
   1b7c8:	f04f0508 	.word	0xf04f0508
   1b7cc:	bf280900 	.word	0xbf280900
   1b7d0:	0901f04f 	.word	0x0901f04f
   1b7d4:	5c30f840 	.word	0x5c30f840
   1b7d8:	6c2cf854 	.word	0x6c2cf854
   1b7dc:	fba344b9 	.word	0xfba344b9
   1b7e0:	eb19ab06 	.word	0xeb19ab06
   1b7e4:	bf2c090a 	.word	0xbf2c090a
   1b7e8:	0801f04f 	.word	0x0801f04f
   1b7ec:	0800f04f 	.word	0x0800f04f
   1b7f0:	6c2cf850 	.word	0x6c2cf850
   1b7f4:	050beb08 	.word	0x050beb08
   1b7f8:	0609eb16 	.word	0x0609eb16
   1b7fc:	0800f04f 	.word	0x0800f04f
   1b800:	f04fbf28 	.word	0xf04fbf28
   1b804:	f8400801 	.word	0xf8400801
   1b808:	f8546c2c 	.word	0xf8546c2c
   1b80c:	44a86c28 	.word	0x44a86c28
   1b810:	6706fba3 	.word	0x6706fba3
   1b814:	0806eb18 	.word	0x0806eb18
   1b818:	f04fbf2c 	.word	0xf04fbf2c
   1b81c:	f04f0901 	.word	0xf04f0901
   1b820:	f8500900 	.word	0xf8500900
   1b824:	444f5c28 	.word	0x444f5c28
   1b828:	0508eb15 	.word	0x0508eb15
   1b82c:	0900f04f 	.word	0x0900f04f
   1b830:	f04fbf28 	.word	0xf04fbf28
   1b834:	f8400901 	.word	0xf8400901
   1b838:	f8545c28 	.word	0xf8545c28
   1b83c:	44b96c24 	.word	0x44b96c24
   1b840:	ab06fba3 	.word	0xab06fba3
   1b844:	090aeb19 	.word	0x090aeb19
   1b848:	f04fbf2c 	.word	0xf04fbf2c
   1b84c:	f04f0801 	.word	0xf04f0801
   1b850:	f8500800 	.word	0xf8500800
   1b854:	eb086c24 	.word	0xeb086c24
   1b858:	eb16050b 	.word	0xeb16050b
   1b85c:	f04f0609 	.word	0xf04f0609
   1b860:	bf280800 	.word	0xbf280800
   1b864:	0801f04f 	.word	0x0801f04f
   1b868:	6c24f840 	.word	0x6c24f840
   1b86c:	6c20f854 	.word	0x6c20f854
   1b870:	fba344a8 	.word	0xfba344a8
   1b874:	eb186706 	.word	0xeb186706
   1b878:	bf2c0806 	.word	0xbf2c0806
   1b87c:	0901f04f 	.word	0x0901f04f
   1b880:	0900f04f 	.word	0x0900f04f
   1b884:	5c20f850 	.word	0x5c20f850
   1b888:	eb15444f 	.word	0xeb15444f
   1b88c:	f04f0508 	.word	0xf04f0508
   1b890:	bf280900 	.word	0xbf280900
   1b894:	0901f04f 	.word	0x0901f04f
   1b898:	5c20f840 	.word	0x5c20f840
   1b89c:	6c1cf854 	.word	0x6c1cf854
   1b8a0:	fba344b9 	.word	0xfba344b9
   1b8a4:	eb19ab06 	.word	0xeb19ab06
   1b8a8:	bf2c090a 	.word	0xbf2c090a
   1b8ac:	0801f04f 	.word	0x0801f04f
   1b8b0:	0800f04f 	.word	0x0800f04f
   1b8b4:	6c1cf850 	.word	0x6c1cf850
   1b8b8:	050beb08 	.word	0x050beb08
   1b8bc:	0609eb16 	.word	0x0609eb16
   1b8c0:	0800f04f 	.word	0x0800f04f
   1b8c4:	f04fbf28 	.word	0xf04fbf28
   1b8c8:	f8400801 	.word	0xf8400801
   1b8cc:	f8546c1c 	.word	0xf8546c1c
   1b8d0:	44a86c18 	.word	0x44a86c18
   1b8d4:	6706fba3 	.word	0x6706fba3
   1b8d8:	0806eb18 	.word	0x0806eb18
   1b8dc:	f04fbf2c 	.word	0xf04fbf2c
   1b8e0:	f04f0901 	.word	0xf04f0901
   1b8e4:	f8500900 	.word	0xf8500900
   1b8e8:	444f5c18 	.word	0x444f5c18
   1b8ec:	0508eb15 	.word	0x0508eb15
   1b8f0:	0900f04f 	.word	0x0900f04f
   1b8f4:	f04fbf28 	.word	0xf04fbf28
   1b8f8:	f8400901 	.word	0xf8400901
   1b8fc:	f8545c18 	.word	0xf8545c18
   1b900:	44b96c14 	.word	0x44b96c14
   1b904:	ab06fba3 	.word	0xab06fba3
   1b908:	090aeb19 	.word	0x090aeb19
   1b90c:	f04fbf2c 	.word	0xf04fbf2c
   1b910:	f04f0801 	.word	0xf04f0801
   1b914:	f8500800 	.word	0xf8500800
   1b918:	eb086c14 	.word	0xeb086c14
   1b91c:	eb16050b 	.word	0xeb16050b
   1b920:	f04f0609 	.word	0xf04f0609
   1b924:	bf280800 	.word	0xbf280800
   1b928:	0801f04f 	.word	0x0801f04f
   1b92c:	6c14f840 	.word	0x6c14f840
   1b930:	6c10f854 	.word	0x6c10f854
   1b934:	fba344a8 	.word	0xfba344a8
   1b938:	eb186706 	.word	0xeb186706
   1b93c:	bf2c0806 	.word	0xbf2c0806
   1b940:	0901f04f 	.word	0x0901f04f
   1b944:	0900f04f 	.word	0x0900f04f
   1b948:	5c10f850 	.word	0x5c10f850
   1b94c:	eb15444f 	.word	0xeb15444f
   1b950:	f04f0508 	.word	0xf04f0508
   1b954:	bf280900 	.word	0xbf280900
   1b958:	0901f04f 	.word	0x0901f04f
   1b95c:	5c10f840 	.word	0x5c10f840
   1b960:	6c0cf854 	.word	0x6c0cf854
   1b964:	fba344b9 	.word	0xfba344b9
   1b968:	eb19ab06 	.word	0xeb19ab06
   1b96c:	bf2c090a 	.word	0xbf2c090a
   1b970:	0801f04f 	.word	0x0801f04f
   1b974:	0800f04f 	.word	0x0800f04f
   1b978:	6c0cf850 	.word	0x6c0cf850
   1b97c:	050beb08 	.word	0x050beb08
   1b980:	0609eb16 	.word	0x0609eb16
   1b984:	0800f04f 	.word	0x0800f04f
   1b988:	f04fbf28 	.word	0xf04fbf28
   1b98c:	f8400801 	.word	0xf8400801
   1b990:	f8546c0c 	.word	0xf8546c0c
   1b994:	44a86c08 	.word	0x44a86c08
   1b998:	6706fba3 	.word	0x6706fba3
   1b99c:	0806eb18 	.word	0x0806eb18
   1b9a0:	f04fbf2c 	.word	0xf04fbf2c
   1b9a4:	f04f0901 	.word	0xf04f0901
   1b9a8:	f8500900 	.word	0xf8500900
   1b9ac:	444f5c08 	.word	0x444f5c08
   1b9b0:	0508eb15 	.word	0x0508eb15
   1b9b4:	0900f04f 	.word	0x0900f04f
   1b9b8:	f04fbf28 	.word	0xf04fbf28
   1b9bc:	f8400901 	.word	0xf8400901
   1b9c0:	f8545c08 	.word	0xf8545c08
   1b9c4:	44b96c04 	.word	0x44b96c04
   1b9c8:	ab06fba3 	.word	0xab06fba3
   1b9cc:	090aeb19 	.word	0x090aeb19
   1b9d0:	f04fbf2c 	.word	0xf04fbf2c
   1b9d4:	f04f0801 	.word	0xf04f0801
   1b9d8:	f8500800 	.word	0xf8500800
   1b9dc:	eb086c04 	.word	0xeb086c04
   1b9e0:	eb16050b 	.word	0xeb16050b
   1b9e4:	f04f0609 	.word	0xf04f0609
   1b9e8:	bf280800 	.word	0xbf280800
   1b9ec:	0801f04f 	.word	0x0801f04f
   1b9f0:	0c10f1ac 	.word	0x0c10f1ac
   1b9f4:	0f0ff1bc 	.word	0x0f0ff1bc
   1b9f8:	6c04f840 	.word	0x6c04f840
   1b9fc:	f10444a8 	.word	0xf10444a8
   1ba00:	f1000440 	.word	0xf1000440
   1ba04:	f63f0040 	.word	0xf63f0040
   1ba08:	f1aeae6e 	.word	0xf1aeae6e
   1ba0c:	09000010 	.word	0x09000010
   1ba10:	01803001 	.word	0x01803001
   1ba14:	44024401 	.word	0x44024401
   1ba18:	000ff00e 	.word	0x000ff00e
   1ba1c:	68172807 	.word	0x68172807
   1ba20:	8092f240 	.word	0x8092f240
   1ba24:	6856680c 	.word	0x6856680c
   1ba28:	9a04fba3 	.word	0x9a04fba3
   1ba2c:	0809eb18 	.word	0x0809eb18
   1ba30:	f04fbf2c 	.word	0xf04fbf2c
   1ba34:	f04f0c01 	.word	0xf04f0c01
   1ba38:	eb170c00 	.word	0xeb170c00
   1ba3c:	bf2c0708 	.word	0xbf2c0708
   1ba40:	24002401 	.word	0x24002401
   1ba44:	684f6017 	.word	0x684f6017
   1ba48:	050ceb0a 	.word	0x050ceb0a
   1ba4c:	8907fba3 	.word	0x8907fba3
   1ba50:	eb14442c 	.word	0xeb14442c
   1ba54:	bf2c0408 	.word	0xbf2c0408
   1ba58:	25002501 	.word	0x25002501
   1ba5c:	eb0519a6 	.word	0xeb0519a6
   1ba60:	f04f0709 	.word	0xf04f0709
   1ba64:	bf280500 	.word	0xbf280500
   1ba68:	60562501 	.word	0x60562501
   1ba6c:	443d688e 	.word	0x443d688e
   1ba70:	7806fba3 	.word	0x7806fba3
   1ba74:	bf2c19ed 	.word	0xbf2c19ed
   1ba78:	24002401 	.word	0x24002401
   1ba7c:	eb086896 	.word	0xeb086896
   1ba80:	19ad0704 	.word	0x19ad0704
   1ba84:	0400f04f 	.word	0x0400f04f
   1ba88:	2401bf28 	.word	0x2401bf28
   1ba8c:	68ce6095 	.word	0x68ce6095
   1ba90:	fba3443c 	.word	0xfba3443c
   1ba94:	19e47806 	.word	0x19e47806
   1ba98:	2501bf2c 	.word	0x2501bf2c
   1ba9c:	68d62500 	.word	0x68d62500
   1baa0:	0705eb08 	.word	0x0705eb08
   1baa4:	f04f19a4 	.word	0xf04f19a4
   1baa8:	bf280500 	.word	0xbf280500
   1baac:	60d42501 	.word	0x60d42501
   1bab0:	443d690e 	.word	0x443d690e
   1bab4:	7806fba3 	.word	0x7806fba3
   1bab8:	bf2c19ed 	.word	0xbf2c19ed
   1babc:	24002401 	.word	0x24002401
   1bac0:	eb086916 	.word	0xeb086916
   1bac4:	19ad0704 	.word	0x19ad0704
   1bac8:	0400f04f 	.word	0x0400f04f
   1bacc:	2401bf28 	.word	0x2401bf28
   1bad0:	694e6115 	.word	0x694e6115
   1bad4:	fba3443c 	.word	0xfba3443c
   1bad8:	19e47806 	.word	0x19e47806
   1badc:	2501bf2c 	.word	0x2501bf2c
   1bae0:	69562500 	.word	0x69562500
   1bae4:	0705eb08 	.word	0x0705eb08
   1bae8:	f04f19a4 	.word	0xf04f19a4
   1baec:	bf280500 	.word	0xbf280500
   1baf0:	61542501 	.word	0x61542501
   1baf4:	443d698e 	.word	0x443d698e
   1baf8:	7806fba3 	.word	0x7806fba3
   1bafc:	bf2c19ed 	.word	0xbf2c19ed
   1bb00:	24002401 	.word	0x24002401
   1bb04:	eb086996 	.word	0xeb086996
   1bb08:	19ad0704 	.word	0x19ad0704
   1bb0c:	0400f04f 	.word	0x0400f04f
   1bb10:	2401bf28 	.word	0x2401bf28
   1bb14:	69ce6195 	.word	0x69ce6195
   1bb18:	fba3443c 	.word	0xfba3443c
   1bb1c:	eb149a06 	.word	0xeb149a06
   1bb20:	bf2c0409 	.word	0xbf2c0409
   1bb24:	0801f04f 	.word	0x0801f04f
   1bb28:	0800f04f 	.word	0x0800f04f
   1bb2c:	eb0869d6 	.word	0xeb0869d6
   1bb30:	19a4050a 	.word	0x19a4050a
   1bb34:	0800f04f 	.word	0x0800f04f
   1bb38:	f04fbf28 	.word	0xf04fbf28
   1bb3c:	61d40801 	.word	0x61d40801
   1bb40:	44a83120 	.word	0x44a83120
   1bb44:	32203808 	.word	0x32203808
   1bb48:	f0002800 	.word	0xf0002800
   1bb4c:	680c8097 	.word	0x680c8097
   1bb50:	fba36816 	.word	0xfba36816
   1bb54:	eb199a04 	.word	0xeb199a04
   1bb58:	bf2c0808 	.word	0xbf2c0808
   1bb5c:	24002401 	.word	0x24002401
   1bb60:	0608eb16 	.word	0x0608eb16
   1bb64:	0500f04f 	.word	0x0500f04f
   1bb68:	2501bf28 	.word	0x2501bf28
   1bb6c:	28014454 	.word	0x28014454
   1bb70:	0804eb05 	.word	0x0804eb05
   1bb74:	d07f6016 	.word	0xd07f6016
   1bb78:	6856684c 	.word	0x6856684c
   1bb7c:	9a04fba3 	.word	0x9a04fba3
   1bb80:	0808eb19 	.word	0x0808eb19
   1bb84:	2401bf2c 	.word	0x2401bf2c
   1bb88:	eb162400 	.word	0xeb162400
   1bb8c:	f04f0608 	.word	0xf04f0608
   1bb90:	bf280500 	.word	0xbf280500
   1bb94:	44542501 	.word	0x44542501
   1bb98:	eb052802 	.word	0xeb052802
   1bb9c:	60560804 	.word	0x60560804
   1bba0:	688cd06a 	.word	0x688cd06a
   1bba4:	fba36896 	.word	0xfba36896
   1bba8:	eb199a04 	.word	0xeb199a04
   1bbac:	bf2c0808 	.word	0xbf2c0808
   1bbb0:	24002401 	.word	0x24002401
   1bbb4:	0608eb16 	.word	0x0608eb16
   1bbb8:	0500f04f 	.word	0x0500f04f
   1bbbc:	2501bf28 	.word	0x2501bf28
   1bbc0:	28034454 	.word	0x28034454
   1bbc4:	0804eb05 	.word	0x0804eb05
   1bbc8:	d0556096 	.word	0xd0556096
   1bbcc:	68d668cc 	.word	0x68d668cc
   1bbd0:	9a04fba3 	.word	0x9a04fba3
   1bbd4:	0808eb19 	.word	0x0808eb19
   1bbd8:	2401bf2c 	.word	0x2401bf2c
   1bbdc:	eb162400 	.word	0xeb162400
   1bbe0:	f04f0608 	.word	0xf04f0608
   1bbe4:	bf280500 	.word	0xbf280500
   1bbe8:	44542501 	.word	0x44542501
   1bbec:	eb052804 	.word	0xeb052804
   1bbf0:	60d60804 	.word	0x60d60804
   1bbf4:	690cd040 	.word	0x690cd040
   1bbf8:	fba36916 	.word	0xfba36916
   1bbfc:	eb199a04 	.word	0xeb199a04
   1bc00:	bf2c0408 	.word	0xbf2c0408
   1bc04:	0801f04f 	.word	0x0801f04f
   1bc08:	0800f04f 	.word	0x0800f04f
   1bc0c:	eb0a19a6 	.word	0xeb0a19a6
   1bc10:	f04f0508 	.word	0xf04f0508
   1bc14:	bf280800 	.word	0xbf280800
   1bc18:	0801f04f 	.word	0x0801f04f
   1bc1c:	44a82805 	.word	0x44a82805
   1bc20:	d0296116 	.word	0xd0296116
   1bc24:	6956694c 	.word	0x6956694c
   1bc28:	9a04fba3 	.word	0x9a04fba3
   1bc2c:	0409eb18 	.word	0x0409eb18
   1bc30:	f04fbf2c 	.word	0xf04fbf2c
   1bc34:	f04f0801 	.word	0xf04f0801
   1bc38:	19a60800 	.word	0x19a60800
   1bc3c:	0508eb0a 	.word	0x0508eb0a
   1bc40:	0800f04f 	.word	0x0800f04f
   1bc44:	f04fbf28 	.word	0xf04fbf28
   1bc48:	28060801 	.word	0x28060801
   1bc4c:	615644a8 	.word	0x615644a8
   1bc50:	698cd012 	.word	0x698cd012
   1bc54:	fba36991 	.word	0xfba36991
   1bc58:	eb144504 	.word	0xeb144504
   1bc5c:	bf2c0808 	.word	0xbf2c0808
   1bc60:	23002301 	.word	0x23002301
   1bc64:	0108eb11 	.word	0x0108eb11
   1bc68:	0400f04f 	.word	0x0400f04f
   1bc6c:	2401bf28 	.word	0x2401bf28
   1bc70:	eb04442b 	.word	0xeb04442b
   1bc74:	61910803 	.word	0x61910803
   1bc78:	0280eb02 	.word	0x0280eb02
   1bc7c:	23006815 	.word	0x23006815
   1bc80:	0508eb15 	.word	0x0508eb15
   1bc84:	2301bf28 	.word	0x2301bf28
   1bc88:	5b04f842 	.word	0x5b04f842
   1bc8c:	0801f04f 	.word	0x0801f04f
   1bc90:	d1f32b00 	.word	0xd1f32b00
   1bc94:	8ff0e8bd 	.word	0x8ff0e8bd
   1bc98:	0800f04f 	.word	0x0800f04f
   1bc9c:	bf00e6be 	.word	0xbf00e6be

0001bca0 <symbol_0002616>:
   1bca0:	2b006843 	.word	0x2b006843
   1bca4:	b430d033 	.word	0xb430d033
   1bca8:	4280f103 	.word	0x4280f103
   1bcac:	3a016885 	.word	0x3a016885
   1bcb0:	4022f855 	.word	0x4022f855
   1bcb4:	0282eb05 	.word	0x0282eb05
   1bcb8:	e009b11c 	.word	0xe009b11c
   1bcbc:	4d04f852 	.word	0x4d04f852
   1bcc0:	3b01b934 	.word	0x3b01b934
   1bcc4:	688bd1fa 	.word	0x688bd1fa
   1bcc8:	b9d06818 	.word	0xb9d06818
   1bccc:	4770bc30 	.word	0x4770bc30
   1bcd0:	6812688a 	.word	0x6812688a
   1bcd4:	2b01b192 	.word	0x2b01b192
   1bcd8:	6800d810 	.word	0x6800d810
   1bcdc:	2800680b 	.word	0x2800680b
   1bce0:	2b00dd01 	.word	0x2b00dd01
   1bce4:	2b00db11 	.word	0x2b00db11
   1bce8:	2800dd01 	.word	0x2800dd01
   1bcec:	682bdb16 	.word	0x682bdb16
   1bcf0:	d8eb4293 	.word	0xd8eb4293
   1bcf4:	bc30d306 	.word	0xbc30d306
   1bcf8:	47702000 	.word	0x47702000
   1bcfc:	bc306800 	.word	0xbc306800
   1bd00:	68084770 	.word	0x68084770
   1bd04:	bc304240 	.word	0xbc304240
   1bd08:	20014770 	.word	0x20014770
   1bd0c:	688be7de 	.word	0x688be7de
   1bd10:	b9006818 	.word	0xb9006818
   1bd14:	68084770 	.word	0x68084770
   1bd18:	e7fb4240 	.word	0xe7fb4240
   1bd1c:	30fff04f 	.word	0x30fff04f
   1bd20:	bf00e7d4 	.word	0xbf00e7d4

0001bd24 <symbol_00038d0>:
   1bd24:	2300b120 	.word	0x2300b120
   1bd28:	e9c02201 	.word	0xe9c02201
   1bd2c:	60832300 	.word	0x60832300
   1bd30:	bf004770 	.word	0xbf004770

0001bd34 <symbol_000fb6e>:
   1bd34:	b510b1b0 	.word	0xb510b1b0
   1bd38:	68804604 	.word	0x68804604
   1bd3c:	6862b160 	.word	0x6862b160
   1bd40:	b13a1e53 	.word	0xb13a1e53
   1bd44:	3b012200 	.word	0x3b012200
   1bd48:	60021c59 	.word	0x60021c59
   1bd4c:	0004f100 	.word	0x0004f100
   1bd50:	68a0d1f9 	.word	0x68a0d1f9
   1bd54:	fc4ef003 	.word	0xfc4ef003
   1bd58:	22012300 	.word	0x22012300
   1bd5c:	2300e9c4 	.word	0x2300e9c4
   1bd60:	bd1060a3 	.word	0xbd1060a3
   1bd64:	bf004770 	.word	0xbf004770

0001bd68 <symbol_0006423>:
   1bd68:	6842b570 	.word	0x6842b570
   1bd6c:	428a4605 	.word	0x428a4605
   1bd70:	d807460c 	.word	0xd807460c
   1bd74:	7310f242 	.word	0x7310f242
   1bd78:	d8514299 	.word	0xd8514299
   1bd7c:	d335428a 	.word	0xd335428a
   1bd80:	bd702000 	.word	0xbd702000
   1bd84:	d0101e51 	.word	0xd0101e51
   1bd88:	f8536883 	.word	0xf8536883
   1bd8c:	28000021 	.word	0x28000021
   1bd90:	f102d149 	.word	0xf102d149
   1bd94:	3a014280 	.word	0x3a014280
   1bd98:	0382eb03 	.word	0x0382eb03
   1bd9c:	f853e003 	.word	0xf853e003
   1bda0:	b9180d04 	.word	0xb9180d04
   1bda4:	1e4a4611 	.word	0x1e4a4611
   1bda8:	2101d1f9 	.word	0x2101d1f9
   1bdac:	bf38428c 	.word	0xbf38428c
   1bdb0:	2104460c 	.word	0x2104460c
   1bdb4:	f0034620 	.word	0xf0034620
   1bdb8:	4606fc09 	.word	0x4606fc09
   1bdbc:	68a9b380 	.word	0x68a9b380
   1bdc0:	00a2b181 	.word	0x00a2b181
   1bdc4:	fd7cf008 	.word	0xfd7cf008
   1bdc8:	2001e9d5 	.word	0x2001e9d5
   1bdcc:	b13a1e53 	.word	0xb13a1e53
   1bdd0:	3b012200 	.word	0x3b012200
   1bdd4:	60021c59 	.word	0x60021c59
   1bdd8:	0004f100 	.word	0x0004f100
   1bddc:	68a8d1f9 	.word	0x68a8d1f9
   1bde0:	fc08f003 	.word	0xfc08f003
   1bde4:	4601e9c5 	.word	0x4601e9c5
   1bde8:	bd702000 	.word	0xbd702000
   1bdec:	46202104 	.word	0x46202104
   1bdf0:	fbecf003 	.word	0xfbecf003
   1bdf4:	b1984606 	.word	0xb1984606
   1bdf8:	290068a9 	.word	0x290068a9
   1bdfc:	686ad0f2 	.word	0x686ad0f2
   1be00:	f0080092 	.word	0xf0080092
   1be04:	e9d5fd5d 	.word	0xe9d5fd5d
   1be08:	1e532001 	.word	0x1e532001
   1be0c:	d0e72a00 	.word	0xd0e72a00
   1be10:	3b012200 	.word	0x3b012200
   1be14:	60021c59 	.word	0x60021c59
   1be18:	0004f100 	.word	0x0004f100
   1be1c:	e7ded1f9 	.word	0xe7ded1f9
   1be20:	000ff06f 	.word	0x000ff06f
   1be24:	4611bd70 	.word	0x4611bd70
   1be28:	bf00e7c0 	.word	0xbf00e7c0

0001be2c <symbol_00084df>:
   1be2c:	d0524288 	.word	0xd0524288
   1be30:	688ab5f8 	.word	0x688ab5f8
   1be34:	4605460e 	.word	0x4605460e
   1be38:	d04e2a00 	.word	0xd04e2a00
   1be3c:	1e4b6849 	.word	0x1e4b6849
   1be40:	f852d00e 	.word	0xf852d00e
   1be44:	28000023 	.word	0x28000023
   1be48:	f101d13b 	.word	0xf101d13b
   1be4c:	39014180 	.word	0x39014180
   1be50:	0281eb02 	.word	0x0281eb02
   1be54:	f852e002 	.word	0xf852e002
   1be58:	bb900d04 	.word	0xbb900d04
   1be5c:	d1fa3b01 	.word	0xd1fa3b01
   1be60:	68332401 	.word	0x68332401
   1be64:	686a602b 	.word	0x686a602b
   1be68:	d30c42a2 	.word	0xd30c42a2
   1be6c:	009268af 	.word	0x009268af
   1be70:	46382100 	.word	0x46382100
   1be74:	fd51f008 	.word	0xfd51f008
   1be78:	68b100a2 	.word	0x68b100a2
   1be7c:	f00868a8 	.word	0xf00868a8
   1be80:	2000fd1f 	.word	0x2000fd1f
   1be84:	2104bdf8 	.word	0x2104bdf8
   1be88:	f0034620 	.word	0xf0034620
   1be8c:	4607fb9f 	.word	0x4607fb9f
   1be90:	68a9b1f0 	.word	0x68a9b1f0
   1be94:	686ab189 	.word	0x686ab189
   1be98:	f0080092 	.word	0xf0080092
   1be9c:	e9d5fd11 	.word	0xe9d5fd11
   1bea0:	1e532001 	.word	0x1e532001
   1bea4:	2200b13a 	.word	0x2200b13a
   1bea8:	1c593b01 	.word	0x1c593b01
   1beac:	f1006002 	.word	0xf1006002
   1beb0:	d1f90004 	.word	0xd1f90004
   1beb4:	f00368a8 	.word	0xf00368a8
   1beb8:	4622fb9d 	.word	0x4622fb9d
   1bebc:	4701e9c5 	.word	0x4701e9c5
   1bec0:	f242e7d5 	.word	0xf242e7d5
   1bec4:	68317210 	.word	0x68317210
   1bec8:	42941c5c 	.word	0x42941c5c
   1becc:	d9ca6029 	.word	0xd9ca6029
   1bed0:	000ff06f 	.word	0x000ff06f
   1bed4:	2000bdf8 	.word	0x2000bdf8
   1bed8:	28004770 	.word	0x28004770
   1bedc:	6880d0d1 	.word	0x6880d0d1
   1bee0:	6869b158 	.word	0x6869b158
   1bee4:	b1311e4b 	.word	0xb1311e4b
   1bee8:	1c5c3b01 	.word	0x1c5c3b01
   1beec:	f1006002 	.word	0xf1006002
   1bef0:	d1f90004 	.word	0xd1f90004
   1bef4:	f00368a8 	.word	0xf00368a8
   1bef8:	2000fb7d 	.word	0x2000fb7d
   1befc:	e9c52301 	.word	0xe9c52301
   1bf00:	60a83000 	.word	0x60a83000
   1bf04:	bf00bdf8 	.word	0xbf00bdf8

0001bf08 <symbol_000fa6b>:
   1bf08:	684bb5f0 	.word	0x684bb5f0
   1bf0c:	b085460d 	.word	0xb085460d
   1bf10:	46064614 	.word	0x46064614
   1bf14:	b17b6851 	.word	0xb17b6851
   1bf18:	f10368a8 	.word	0xf10368a8
   1bf1c:	3a014280 	.word	0x3a014280
   1bf20:	7022f850 	.word	0x7022f850
   1bf24:	0082eb00 	.word	0x0082eb00
   1bf28:	e04fb127 	.word	0xe04fb127
   1bf2c:	2d04f850 	.word	0x2d04f850
   1bf30:	d14b2a00 	.word	0xd14b2a00
   1bf34:	d1f93b01 	.word	0xd1f93b01
   1bf38:	f101b189 	.word	0xf101b189
   1bf3c:	68a74080 	.word	0x68a74080
   1bf40:	f8573801 	.word	0xf8573801
   1bf44:	2a002020 	.word	0x2a002020
   1bf48:	8099f040 	.word	0x8099f040
   1bf4c:	0080eb07 	.word	0x0080eb07
   1bf50:	f850e003 	.word	0xf850e003
   1bf54:	2a002d04 	.word	0x2a002d04
   1bf58:	3901d142 	.word	0x3901d142
   1bf5c:	2300d1f9 	.word	0x2300d1f9
   1bf60:	42b42201 	.word	0x42b42201
   1bf64:	2301e9cd 	.word	0x2301e9cd
   1bf68:	d07f9303 	.word	0xd07f9303
   1bf6c:	d00542b5 	.word	0xd00542b5
   1bf70:	46304629 	.word	0x46304629
   1bf74:	ff5af7ff 	.word	0xff5af7ff
   1bf78:	b9a84607 	.word	0xb9a84607
   1bf7c:	60332301 	.word	0x60332301
   1bf80:	b1806860 	.word	0xb1806860
   1bf84:	c008f8d4 	.word	0xc008f8d4
   1bf88:	4380f100 	.word	0x4380f100
   1bf8c:	f85c3b01 	.word	0xf85c3b01
   1bf90:	eb0c2023 	.word	0xeb0c2023
   1bf94:	b1220383 	.word	0xb1220383
   1bf98:	f853e042 	.word	0xf853e042
   1bf9c:	2a002d04 	.word	0x2a002d04
   1bfa0:	3801d13e 	.word	0x3801d13e
   1bfa4:	2700d1f9 	.word	0x2700d1f9
   1bfa8:	b1609803 	.word	0xb1609803
   1bfac:	1e539a02 	.word	0x1e539a02
   1bfb0:	2200b13a 	.word	0x2200b13a
   1bfb4:	1c593b01 	.word	0x1c593b01
   1bfb8:	f1006002 	.word	0xf1006002
   1bfbc:	d1f90004 	.word	0xd1f90004
   1bfc0:	f0039803 	.word	0xf0039803
   1bfc4:	4638fb17 	.word	0x4638fb17
   1bfc8:	bdf0b005 	.word	0xbdf0b005
   1bfcc:	d0c62900 	.word	0xd0c62900
   1bfd0:	4080f101 	.word	0x4080f101
   1bfd4:	380168a7 	.word	0x380168a7
   1bfd8:	2020f857 	.word	0x2020f857
   1bfdc:	d0b52a00 	.word	0xd0b52a00
   1bfe0:	d8bc428b 	.word	0xd8bc428b
   1bfe4:	2b00d34b 	.word	0x2b00d34b
   1bfe8:	68a8d0b9 	.word	0x68a8d0b9
   1bfec:	4180f103 	.word	0x4180f103
   1bff0:	f8503901 	.word	0xf8503901
   1bff4:	f857c021 	.word	0xf857c021
   1bff8:	0089e021 	.word	0x0089e021
   1bffc:	440845e6 	.word	0x440845e6
   1c000:	0201eb07 	.word	0x0201eb07
   1c004:	d83ad3ab 	.word	0xd83ad3ab
   1c008:	e0064601 	.word	0xe0064601
   1c00c:	7d04f851 	.word	0x7d04f851
   1c010:	0d04f852 	.word	0x0d04f852
   1c014:	d8a24287 	.word	0xd8a24287
   1c018:	3b01d331 	.word	0x3b01d331
   1c01c:	e79ed1f6 	.word	0xe79ed1f6
   1c020:	462b2500 	.word	0x462b2500
   1c024:	f85168b1 	.word	0xf85168b1
   1c028:	35016b04 	.word	0x35016b04
   1c02c:	f8411af2 	.word	0xf8411af2
   1c030:	f85c2c04 	.word	0xf85c2c04
   1c034:	460c7b04 	.word	0x460c7b04
   1c038:	bf2c42ba 	.word	0xbf2c42ba
   1c03c:	0e00f04f 	.word	0x0e00f04f
   1c040:	0e01f04f 	.word	0x0e01f04f
   1c044:	429e1bd2 	.word	0x429e1bd2
   1c048:	4673bf2c 	.word	0x4673bf2c
   1c04c:	0301f10e 	.word	0x0301f10e
   1c050:	f8414285 	.word	0xf8414285
   1c054:	d3e62c04 	.word	0xd3e62c04
   1c058:	e7a4b90b 	.word	0xe7a4b90b
   1c05c:	68222301 	.word	0x68222301
   1c060:	429a1ad1 	.word	0x429a1ad1
   1c064:	1b04f844 	.word	0x1b04f844
   1c068:	e79cd3f8 	.word	0xe79cd3f8
   1c06c:	a8014621 	.word	0xa8014621
   1c070:	fedcf7ff 	.word	0xfedcf7ff
   1c074:	28004607 	.word	0x28004607
   1c078:	ac01d196 	.word	0xac01d196
   1c07c:	f06fe776 	.word	0xf06fe776
   1c080:	46380709 	.word	0x46380709
   1c084:	bdf0b005 	.word	0xbdf0b005

0001c088 <symbol_0006ccd>:
   1c088:	7310f242 	.word	0x7310f242
   1c08c:	41f0e92d 	.word	0x41f0e92d
   1c090:	4256684f 	.word	0x4256684f
   1c094:	429f4316 	.word	0x429f4316
   1c098:	16c0f3c6 	.word	0x16c0f3c6
   1c09c:	6842d84f 	.word	0x6842d84f
   1c0a0:	42974604 	.word	0x42974604
   1c0a4:	d82c460d 	.word	0xd82c460d
   1c0a8:	68236829 	.word	0x68236829
   1c0ac:	f106fb01 	.word	0xf106fb01
   1c0b0:	0701f1c6 	.word	0x0701f1c6
   1c0b4:	1307fb03 	.word	0x1307fb03
   1c0b8:	686b6023 	.word	0x686b6023
   1c0bc:	2300b18b 	.word	0x2300b18b
   1c0c0:	68aa68a1 	.word	0x68aa68a1
   1c0c4:	0023f851 	.word	0x0023f851
   1c0c8:	2023f852 	.word	0x2023f852
   1c0cc:	f007fb00 	.word	0xf007fb00
   1c0d0:	0206fb02 	.word	0x0206fb02
   1c0d4:	2023f841 	.word	0x2023f841
   1c0d8:	3301686a 	.word	0x3301686a
   1c0dc:	d8ef429a 	.word	0xd8ef429a
   1c0e0:	42936862 	.word	0x42936862
   1c0e4:	009ad20a 	.word	0x009ad20a
   1c0e8:	330168a0 	.word	0x330168a0
   1c0ec:	fb075881 	.word	0xfb075881
   1c0f0:	5081f101 	.word	0x5081f101
   1c0f4:	32046861 	.word	0x32046861
   1c0f8:	d8f54299 	.word	0xd8f54299
   1c0fc:	e8bd2000 	.word	0xe8bd2000
   1c100:	210481f0 	.word	0x210481f0
   1c104:	f0034638 	.word	0xf0034638
   1c108:	4680fa61 	.word	0x4680fa61
   1c10c:	68a1b1b8 	.word	0x68a1b1b8
   1c110:	6862b189 	.word	0x6862b189
   1c114:	f0080092 	.word	0xf0080092
   1c118:	e9d4fbd3 	.word	0xe9d4fbd3
   1c11c:	1e532001 	.word	0x1e532001
   1c120:	2200b13a 	.word	0x2200b13a
   1c124:	1c593b01 	.word	0x1c593b01
   1c128:	f1006002 	.word	0xf1006002
   1c12c:	d1f90004 	.word	0xd1f90004
   1c130:	f00368a0 	.word	0xf00368a0
   1c134:	463afa5f 	.word	0x463afa5f
   1c138:	7801e9c4 	.word	0x7801e9c4
   1c13c:	f06fe7b4 	.word	0xf06fe7b4
   1c140:	e7dc000f 	.word	0xe7dc000f

0001c144 <symbol_000b345>:
   1c144:	6845b5f8 	.word	0x6845b5f8
   1c148:	460e4604 	.word	0x460e4604
   1c14c:	6887b19d 	.word	0x6887b19d
   1c150:	463800aa 	.word	0x463800aa
   1c154:	f0082100 	.word	0xf0082100
   1c158:	2e00fbe0 	.word	0x2e00fbe0
   1c15c:	2301bfac 	.word	0x2301bfac
   1c160:	33fff04f 	.word	0x33fff04f
   1c164:	71e6ea86 	.word	0x71e6ea86
   1c168:	eba168a2 	.word	0xeba168a2
   1c16c:	601171e6 	.word	0x601171e6
   1c170:	20006023 	.word	0x20006023
   1c174:	2104bdf8 	.word	0x2104bdf8
   1c178:	f0032001 	.word	0xf0032001
   1c17c:	4607fa27 	.word	0x4607fa27
   1c180:	68a1b1b8 	.word	0x68a1b1b8
   1c184:	6862b181 	.word	0x6862b181
   1c188:	f0080092 	.word	0xf0080092
   1c18c:	e9d4fb99 	.word	0xe9d4fb99
   1c190:	1e532001 	.word	0x1e532001
   1c194:	3b01b132 	.word	0x3b01b132
   1c198:	60051c5a 	.word	0x60051c5a
   1c19c:	0004f100 	.word	0x0004f100
   1c1a0:	68a0d1f9 	.word	0x68a0d1f9
   1c1a4:	fa26f003 	.word	0xfa26f003
   1c1a8:	22042301 	.word	0x22042301
   1c1ac:	3701e9c4 	.word	0x3701e9c4
   1c1b0:	f06fe7cf 	.word	0xf06fe7cf
   1c1b4:	bdf8000f 	.word	0xbdf8000f

0001c1b8 <symbol_0007f0f>:
   1c1b8:	ebb16843 	.word	0xebb16843
   1c1bc:	d2091f43 	.word	0xd2091f43
   1c1c0:	094a6883 	.word	0x094a6883
   1c1c4:	0022f853 	.word	0x0022f853
   1c1c8:	011ff001 	.word	0x011ff001
   1c1cc:	f00040c8 	.word	0xf00040c8
   1c1d0:	47700001 	.word	0x47700001
   1c1d4:	47702000 	.word	0x47702000

0001c1d8 <symbol_00030c0>:
   1c1d8:	b3136843 	.word	0xb3136843
   1c1dc:	6882b410 	.word	0x6882b410
   1c1e0:	d0241e58 	.word	0xd0241e58
   1c1e4:	1020f852 	.word	0x1020f852
   1c1e8:	f103b9e9 	.word	0xf103b9e9
   1c1ec:	3b014380 	.word	0x3b014380
   1c1f0:	0383eb02 	.word	0x0383eb02
   1c1f4:	f853e002 	.word	0xf853e002
   1c1f8:	b9a11d04 	.word	0xb9a11d04
   1c1fc:	d1fa3801 	.word	0xd1fa3801
   1c200:	68112420 	.word	0x68112420
   1c204:	f04f2200 	.word	0xf04f2200
   1c208:	e0024300 	.word	0xe0024300
   1c20c:	2a203201 	.word	0x2a203201
   1c210:	420bd004 	.word	0x420bd004
   1c214:	0353ea4f 	.word	0x0353ea4f
   1c218:	1aa0d0f8 	.word	0x1aa0d0f8
   1c21c:	4b04f85d 	.word	0x4b04f85d
   1c220:	46184770 	.word	0x46184770
   1c224:	01404770 	.word	0x01404770
   1c228:	0420f100 	.word	0x0420f100
   1c22c:	6811e7ea 	.word	0x6811e7ea
   1c230:	e7e72420 	.word	0xe7e72420

0001c234 <symbol_000b7da>:
   1c234:	b3236843 	.word	0xb3236843
   1c238:	6882b410 	.word	0x6882b410
   1c23c:	d0261e58 	.word	0xd0261e58
   1c240:	1020f852 	.word	0x1020f852
   1c244:	f103b9f9 	.word	0xf103b9f9
   1c248:	3b014380 	.word	0x3b014380
   1c24c:	0383eb02 	.word	0x0383eb02
   1c250:	f853e002 	.word	0xf853e002
   1c254:	b9b11d04 	.word	0xb9b11d04
   1c258:	d1fa3801 	.word	0xd1fa3801
   1c25c:	68112420 	.word	0x68112420
   1c260:	f04f2200 	.word	0xf04f2200
   1c264:	e0024300 	.word	0xe0024300
   1c268:	2a203201 	.word	0x2a203201
   1c26c:	420bd004 	.word	0x420bd004
   1c270:	0353ea4f 	.word	0x0353ea4f
   1c274:	1aa0d0f8 	.word	0x1aa0d0f8
   1c278:	08c03007 	.word	0x08c03007
   1c27c:	4b04f85d 	.word	0x4b04f85d
   1c280:	46184770 	.word	0x46184770
   1c284:	01404770 	.word	0x01404770
   1c288:	0420f100 	.word	0x0420f100
   1c28c:	6811e7e8 	.word	0x6811e7e8
   1c290:	e7e52420 	.word	0xe7e52420

0001c294 <symbol_000eaf4>:
   1c294:	43f8e92d 	.word	0x43f8e92d
   1c298:	460f4605 	.word	0x460f4605
   1c29c:	2a004616 	.word	0x2a004616
   1c2a0:	780cd07e 	.word	0x780cd07e
   1c2a4:	b124460b 	.word	0xb124460b
   1c2a8:	f813e07e 	.word	0xf813e07e
   1c2ac:	2a002f01 	.word	0x2a002f01
   1c2b0:	3401d146 	.word	0x3401d146
   1c2b4:	d1f842a6 	.word	0xd1f842a6
   1c2b8:	8004f8d5 	.word	0x8004f8d5
   1c2bc:	0f00f1b8 	.word	0x0f00f1b8
   1c2c0:	2104d169 	.word	0x2104d169
   1c2c4:	f0032001 	.word	0xf0032001
   1c2c8:	4681f981 	.word	0x4681f981
   1c2cc:	d06d2800 	.word	0xd06d2800
   1c2d0:	b18968a9 	.word	0xb18968a9
   1c2d4:	0092686a 	.word	0x0092686a
   1c2d8:	faf2f008 	.word	0xfaf2f008
   1c2dc:	2001e9d5 	.word	0x2001e9d5
   1c2e0:	b13a1e53 	.word	0xb13a1e53
   1c2e4:	3b014642 	.word	0x3b014642
   1c2e8:	60021c59 	.word	0x60021c59
   1c2ec:	0004f100 	.word	0x0004f100
   1c2f0:	68a8d1f9 	.word	0x68a8d1f9
   1c2f4:	f97ef003 	.word	0xf97ef003
   1c2f8:	22042301 	.word	0x22042301
   1c2fc:	3901e9c5 	.word	0x3901e9c5
   1c300:	46482100 	.word	0x46482100
   1c304:	fb09f008 	.word	0xfb09f008
   1c308:	22012300 	.word	0x22012300
   1c30c:	42a668a9 	.word	0x42a668a9
   1c310:	602a600b 	.word	0x602a600b
   1c314:	eb07d911 	.word	0xeb07d911
   1c318:	1b340c06 	.word	0x1b340c06
   1c31c:	f02368ae 	.word	0xf02368ae
   1c320:	00df0103 	.word	0x00df0103
   1c324:	0d01f81c 	.word	0x0d01f81c
   1c328:	f0075872 	.word	0xf0075872
   1c32c:	40b80718 	.word	0x40b80718
   1c330:	43023301 	.word	0x43023301
   1c334:	507242a3 	.word	0x507242a3
   1c338:	2000d1f0 	.word	0x2000d1f0
   1c33c:	83f8e8bd 	.word	0x83f8e8bd
   1c340:	f0121b32 	.word	0xf0121b32
   1c344:	bf180803 	.word	0xbf180803
   1c348:	0801f04f 	.word	0x0801f04f
   1c34c:	7310f242 	.word	0x7310f242
   1c350:	0892eb08 	.word	0x0892eb08
   1c354:	d8294598 	.word	0xd8294598
   1c358:	4598686b 	.word	0x4598686b
   1c35c:	2104d929 	.word	0x2104d929
   1c360:	f0034640 	.word	0xf0034640
   1c364:	4681f933 	.word	0x4681f933
   1c368:	68a9b300 	.word	0x68a9b300
   1c36c:	686ab189 	.word	0x686ab189
   1c370:	f0080092 	.word	0xf0080092
   1c374:	e9d5faa5 	.word	0xe9d5faa5
   1c378:	1e532001 	.word	0x1e532001
   1c37c:	2200b13a 	.word	0x2200b13a
   1c380:	1c593b01 	.word	0x1c593b01
   1c384:	f1006002 	.word	0xf1006002
   1c388:	d1f90004 	.word	0xd1f90004
   1c38c:	f00368a8 	.word	0xf00368a8
   1c390:	e9c5f931 	.word	0xe9c5f931
   1c394:	ea4f8901 	.word	0xea4f8901
   1c398:	f8d50288 	.word	0xf8d50288
   1c39c:	e7af9008 	.word	0xe7af9008
   1c3a0:	8004f8d0 	.word	0x8004f8d0
   1c3a4:	e7894614 	.word	0xe7894614
   1c3a8:	e7ca2400 	.word	0xe7ca2400
   1c3ac:	000ff06f 	.word	0x000ff06f
   1c3b0:	4698e7c4 	.word	0x4698e7c4
   1c3b4:	bf00e782 	.word	0xbf00e782

0001c3b8 <symbol_000116e>:
   1c3b8:	41f0e92d 	.word	0x41f0e92d
   1c3bc:	46886844 	.word	0x46886844
   1c3c0:	d03e2c00 	.word	0xd03e2c00
   1c3c4:	1e624615 	.word	0x1e624615
   1c3c8:	68804607 	.word	0x68804607
   1c3cc:	f850d040 	.word	0xf850d040
   1c3d0:	bb991022 	.word	0xbb991022
   1c3d4:	4380f104 	.word	0x4380f104
   1c3d8:	eb003b01 	.word	0xeb003b01
   1c3dc:	e0020383 	.word	0xe0020383
   1c3e0:	1d04f853 	.word	0x1d04f853
   1c3e4:	3a01bb51 	.word	0x3a01bb51
   1c3e8:	2627d1fa 	.word	0x2627d1fa
   1c3ec:	22006801 	.word	0x22006801
   1c3f0:	4300f04f 	.word	0x4300f04f
   1c3f4:	3201e002 	.word	0x3201e002
   1c3f8:	d0032a20 	.word	0xd0032a20
   1c3fc:	ea4f420b 	.word	0xea4f420b
   1c400:	d0f80353 	.word	0xd0f80353
   1c404:	08f61ab6 	.word	0x08f61ab6
   1c408:	d32442b5 	.word	0xd32442b5
   1c40c:	2100462a 	.word	0x2100462a
   1c410:	f0084640 	.word	0xf0084640
   1c414:	b176fa82 	.word	0xb176fa82
   1c418:	44a82300 	.word	0x44a82300
   1c41c:	f02368b9 	.word	0xf02368b9
   1c420:	588c0203 	.word	0x588c0203
   1c424:	f00500dd 	.word	0xf00500dd
   1c428:	33010518 	.word	0x33010518
   1c42c:	42b340ec 	.word	0x42b340ec
   1c430:	4d01f808 	.word	0x4d01f808
   1c434:	2000d1f2 	.word	0x2000d1f2
   1c438:	81f0e8bd 	.word	0x81f0e8bd
   1c43c:	36270156 	.word	0x36270156
   1c440:	4608e7d5 	.word	0x4608e7d5
   1c444:	f0084621 	.word	0xf0084621
   1c448:	4620fa68 	.word	0x4620fa68
   1c44c:	81f0e8bd 	.word	0x81f0e8bd
   1c450:	26276801 	.word	0x26276801
   1c454:	f06fe7cb 	.word	0xf06fe7cb
   1c458:	e7ed0007 	.word	0xe7ed0007

0001c45c <symbol_0004fb7>:
   1c45c:	41f0e92d 	.word	0x41f0e92d
   1c460:	46046843 	.word	0x46046843
   1c464:	f001094d 	.word	0xf001094d
   1c468:	b343061f 	.word	0xb343061f
   1c46c:	f8d01e5a 	.word	0xf8d01e5a
   1c470:	f000e008 	.word	0xf000e008
   1c474:	f85e8099 	.word	0xf85e8099
   1c478:	f1bcc022 	.word	0xf1bcc022
   1c47c:	f0400f00 	.word	0xf0400f00
   1c480:	f103809c 	.word	0xf103809c
   1c484:	38014080 	.word	0x38014080
   1c488:	0080eb0e 	.word	0x0080eb0e
   1c48c:	f850e003 	.word	0xf850e003
   1c490:	2f007d04 	.word	0x2f007d04
   1c494:	3a01d15e 	.word	0x3a01d15e
   1c498:	f04fd1f9 	.word	0xf04fd1f9
   1c49c:	f8de0820 	.word	0xf8de0820
   1c4a0:	20007000 	.word	0x20007000
   1c4a4:	4200f04f 	.word	0x4200f04f
   1c4a8:	3001e002 	.word	0x3001e002
   1c4ac:	d0052820 	.word	0xd0052820
   1c4b0:	ea4f423a 	.word	0xea4f423a
   1c4b4:	d0f80252 	.word	0xd0f80252
   1c4b8:	0c00eba8 	.word	0x0c00eba8
   1c4bc:	ebb14461 	.word	0xebb14461
   1c4c0:	d90b1f43 	.word	0xd90b1f43
   1c4c4:	021ff011 	.word	0x021ff011
   1c4c8:	2201bf18 	.word	0x2201bf18
   1c4cc:	7010f242 	.word	0x7010f242
   1c4d0:	1751eb02 	.word	0x1751eb02
   1c4d4:	d86d4287 	.word	0xd86d4287
   1c4d8:	d840429f 	.word	0xd840429f
   1c4dc:	429db1f5 	.word	0x429db1f5
   1c4e0:	f06fd25d 	.word	0xf06fd25d
   1c4e4:	1b7f4740 	.word	0x1b7f4740
   1c4e8:	ebc719da 	.word	0xebc719da
   1c4ec:	00927787 	.word	0x00927787
   1c4f0:	68a000bf 	.word	0x68a000bf
   1c4f4:	19c13b01 	.word	0x19c13b01
   1c4f8:	44115880 	.word	0x44115880
   1c4fc:	f841429d 	.word	0xf841429d
   1c500:	f1a20c04 	.word	0xf1a20c04
   1c504:	d1f40204 	.word	0xd1f40204
   1c508:	f1032100 	.word	0xf1032100
   1c50c:	3b014380 	.word	0x3b014380
   1c510:	68a2009b 	.word	0x68a2009b
   1c514:	3b0450d1 	.word	0x3b0450d1
   1c518:	d1fa1d1a 	.word	0xd1fa1d1a
   1c51c:	6863b1be 	.word	0x6863b1be
   1c520:	d214429d 	.word	0xd214429d
   1c524:	f1c62700 	.word	0xf1c62700
   1c528:	00ab0c20 	.word	0x00ab0c20
   1c52c:	350168a0 	.word	0x350168a0
   1c530:	fa0158c1 	.word	0xfa0158c1
   1c534:	50c2f206 	.word	0x50c2f206
   1c538:	58c268a0 	.word	0x58c268a0
   1c53c:	50c2433a 	.word	0x50c2433a
   1c540:	fa216862 	.word	0xfa216862
   1c544:	42aaf70c 	.word	0x42aaf70c
   1c548:	0304f103 	.word	0x0304f103
   1c54c:	2000d8ee 	.word	0x2000d8ee
   1c550:	81f0e8bd 	.word	0x81f0e8bd
   1c554:	1c42ea4f 	.word	0x1c42ea4f
   1c558:	0820f10c 	.word	0x0820f10c
   1c55c:	2104e7a1 	.word	0x2104e7a1
   1c560:	f0034638 	.word	0xf0034638
   1c564:	4680f833 	.word	0x4680f833
   1c568:	68a1b320 	.word	0x68a1b320
   1c56c:	6862b189 	.word	0x6862b189
   1c570:	f0080092 	.word	0xf0080092
   1c574:	e9d4f9a5 	.word	0xe9d4f9a5
   1c578:	1e532001 	.word	0x1e532001
   1c57c:	2200b13a 	.word	0x2200b13a
   1c580:	1c593b01 	.word	0x1c593b01
   1c584:	f1006002 	.word	0xf1006002
   1c588:	d1f90004 	.word	0xd1f90004
   1c58c:	f00368a0 	.word	0xf00368a0
   1c590:	463bf831 	.word	0x463bf831
   1c594:	7801e9c4 	.word	0x7801e9c4
   1c598:	d0bf2d00 	.word	0xd0bf2d00
   1c59c:	2b00e79f 	.word	0x2b00e79f
   1c5a0:	2e00d1b2 	.word	0x2e00d1b2
   1c5a4:	e7d2d1bb 	.word	0xe7d2d1bb
   1c5a8:	7000f8de 	.word	0x7000f8de
   1c5ac:	f04f4694 	.word	0xf04f4694
   1c5b0:	e7760820 	.word	0xe7760820
   1c5b4:	000ff06f 	.word	0x000ff06f
   1c5b8:	0152e7ca 	.word	0x0152e7ca
   1c5bc:	f1024667 	.word	0xf1024667
   1c5c0:	46940820 	.word	0x46940820
   1c5c4:	bf00e76d 	.word	0xbf00e76d

0001c5c8 <symbol_0000994>:
   1c5c8:	6844b5f8 	.word	0x6844b5f8
   1c5cc:	42ac094d 	.word	0x42ac094d
   1c5d0:	f001d33a 	.word	0xf001d33a
   1c5d4:	d032011f 	.word	0xd032011f
   1c5d8:	2300b1b5 	.word	0x2300b1b5
   1c5dc:	688400aa 	.word	0x688400aa
   1c5e0:	320458a6 	.word	0x320458a6
   1c5e4:	6023f844 	.word	0x6023f844
   1c5e8:	33016844 	.word	0x33016844
   1c5ec:	429e1b66 	.word	0x429e1b66
   1c5f0:	429cd8f5 	.word	0x429cd8f5
   1c5f4:	2500d908 	.word	0x2500d908
   1c5f8:	6884009a 	.word	0x6884009a
   1c5fc:	50a53301 	.word	0x50a53301
   1c600:	32046844 	.word	0x32046844
   1c604:	d8f8429c 	.word	0xd8f8429c
   1c608:	b1b4b1b9 	.word	0xb1b4b1b9
   1c60c:	f1042700 	.word	0xf1042700
   1c610:	3b014380 	.word	0x3b014380
   1c614:	f1c1009b 	.word	0xf1c1009b
   1c618:	68860c20 	.word	0x68860c20
   1c61c:	58f53c01 	.word	0x58f53c01
   1c620:	f201fa25 	.word	0xf201fa25
   1c624:	688650f2 	.word	0x688650f2
   1c628:	ea4258f2 	.word	0xea4258f2
   1c62c:	50f20207 	.word	0x50f20207
   1c630:	f70cfa05 	.word	0xf70cfa05
   1c634:	0304f1a3 	.word	0x0304f1a3
   1c638:	2000d1ef 	.word	0x2000d1ef
   1c63c:	b919bdf8 	.word	0xb919bdf8
   1c640:	d0fa2c00 	.word	0xd0fa2c00
   1c644:	e7d6460b 	.word	0xe7d6460b
   1c648:	b1644605 	.word	0xb1644605
   1c64c:	00a26886 	.word	0x00a26886
   1c650:	21004630 	.word	0x21004630
   1c654:	f961f008 	.word	0xf961f008
   1c658:	22012300 	.word	0x22012300
   1c65c:	461868a9 	.word	0x461868a9
   1c660:	602a600b 	.word	0x602a600b
   1c664:	2104bdf8 	.word	0x2104bdf8
   1c668:	f0022001 	.word	0xf0022001
   1c66c:	4606ffaf 	.word	0x4606ffaf
   1c670:	68a9b1b8 	.word	0x68a9b1b8
   1c674:	686ab181 	.word	0x686ab181
   1c678:	f0080092 	.word	0xf0080092
   1c67c:	e9d5f921 	.word	0xe9d5f921
   1c680:	1e532001 	.word	0x1e532001
   1c684:	3b01b132 	.word	0x3b01b132
   1c688:	60041c5a 	.word	0x60041c5a
   1c68c:	0004f100 	.word	0x0004f100
   1c690:	68a8d1f9 	.word	0x68a8d1f9
   1c694:	ffaef002 	.word	0xffaef002
   1c698:	22042301 	.word	0x22042301
   1c69c:	3601e9c5 	.word	0x3601e9c5
   1c6a0:	f06fe7d6 	.word	0xf06fe7d6
   1c6a4:	bdf8000f 	.word	0xbdf8000f

0001c6a8 <symbol_000242f>:
   1c6a8:	6843b470 	.word	0x6843b470
   1c6ac:	b173684a 	.word	0xb173684a
   1c6b0:	f1036884 	.word	0xf1036884
   1c6b4:	3d014580 	.word	0x3d014580
   1c6b8:	6025f854 	.word	0x6025f854
   1c6bc:	0485eb04 	.word	0x0485eb04
   1c6c0:	e01ab11e 	.word	0xe01ab11e
   1c6c4:	5d04f854 	.word	0x5d04f854
   1c6c8:	3b01b9bd 	.word	0x3b01b9bd
   1c6cc:	b18ad1fa 	.word	0xb18ad1fa
   1c6d0:	4480f102 	.word	0x4480f102
   1c6d4:	3c01688e 	.word	0x3c01688e
   1c6d8:	5024f856 	.word	0x5024f856
   1c6dc:	eb06b9cd 	.word	0xeb06b9cd
   1c6e0:	e0020484 	.word	0xe0020484
   1c6e4:	5d04f854 	.word	0x5d04f854
   1c6e8:	3a01b98d 	.word	0x3a01b98d
   1c6ec:	2b00d1fa 	.word	0x2b00d1fa
   1c6f0:	6802d037 	.word	0x6802d037
   1c6f4:	bc704610 	.word	0xbc704610
   1c6f8:	2a004770 	.word	0x2a004770
   1c6fc:	f102d0f9 	.word	0xf102d0f9
   1c700:	688e4480 	.word	0x688e4480
   1c704:	f8563c01 	.word	0xf8563c01
   1c708:	2d005024 	.word	0x2d005024
   1c70c:	4293d0e7 	.word	0x4293d0e7
   1c710:	4293d8ef 	.word	0x4293d8ef
   1c714:	d2036809 	.word	0xd2036809
   1c718:	424abc70 	.word	0x424abc70
   1c71c:	47704610 	.word	0x47704610
   1c720:	2a006802 	.word	0x2a006802
   1c724:	2900dd01 	.word	0x2900dd01
   1c728:	2900db24 	.word	0x2900db24
   1c72c:	2a00dd01 	.word	0x2a00dd01
   1c730:	b1b3db1d 	.word	0xb1b3db1d
   1c734:	f1036884 	.word	0xf1036884
   1c738:	39014180 	.word	0x39014180
   1c73c:	5021f854 	.word	0x5021f854
   1c740:	0021f856 	.word	0x0021f856
   1c744:	42850089 	.word	0x42850089
   1c748:	4431440c 	.word	0x4431440c
   1c74c:	d30cd8d2 	.word	0xd30cd8d2
   1c750:	d0063b01 	.word	0xd0063b01
   1c754:	5d04f854 	.word	0x5d04f854
   1c758:	0d04f851 	.word	0x0d04f851
   1c75c:	d9f64285 	.word	0xd9f64285
   1c760:	461ae7c8 	.word	0x461ae7c8
   1c764:	4610bc70 	.word	0x4610bc70
   1c768:	42524770 	.word	0x42524770
   1c76c:	f04fe7c2 	.word	0xf04fe7c2
   1c770:	e7bf32ff 	.word	0xe7bf32ff
   1c774:	e7bd2201 	.word	0xe7bd2201

0001c778 <symbol_000ccad>:
   1c778:	2900b4f0 	.word	0x2900b4f0
   1c77c:	68434605 	.word	0x68434605
   1c780:	2b00db32 	.word	0x2b00db32
   1c784:	6886d042 	.word	0x6886d042
   1c788:	4280f103 	.word	0x4280f103
   1c78c:	f8563a01 	.word	0xf8563a01
   1c790:	eb060022 	.word	0xeb060022
   1c794:	b9680282 	.word	0xb9680282
   1c798:	30fff04f 	.word	0x30fff04f
   1c79c:	e0022701 	.word	0xe0022701
   1c7a0:	4d04f852 	.word	0x4d04f852
   1c7a4:	3b01b93c 	.word	0x3b01b93c
   1c7a8:	2900d1fa 	.word	0x2900d1fa
   1c7ac:	2000bf08 	.word	0x2000bf08
   1c7b0:	4770bcf0 	.word	0x4770bcf0
   1c7b4:	b1a12701 	.word	0xb1a12701
   1c7b8:	d8122b01 	.word	0xd8122b01
   1c7bc:	28006828 	.word	0x28006828
   1c7c0:	1c7bdd01 	.word	0x1c7bdd01
   1c7c4:	2f01d01e 	.word	0x2f01d01e
   1c7c8:	2800d101 	.word	0x2800d101
   1c7cc:	2900db24 	.word	0x2900db24
   1c7d0:	bfb86833 	.word	0xbfb86833
   1c7d4:	42994249 	.word	0x42994249
   1c7d8:	d815d3ea 	.word	0xd815d3ea
   1c7dc:	2000bcf0 	.word	0x2000bcf0
   1c7e0:	68284770 	.word	0x68284770
   1c7e4:	4770bcf0 	.word	0x4770bcf0
   1c7e8:	6886b163 	.word	0x6886b163
   1c7ec:	4280f103 	.word	0x4280f103
   1c7f0:	f8563a01 	.word	0xf8563a01
   1c7f4:	eb060022 	.word	0xeb060022
   1c7f8:	b9500282 	.word	0xb9500282
   1c7fc:	f04f2001 	.word	0xf04f2001
   1c800:	e7d037ff 	.word	0xe7d037ff
   1c804:	e7d32001 	.word	0xe7d32001
   1c808:	e7d14240 	.word	0xe7d14240
   1c80c:	30fff04f 	.word	0x30fff04f
   1c810:	f04fe7cb 	.word	0xf04fe7cb
   1c814:	e7cf37ff 	.word	0xe7cf37ff
   1c818:	30fff04f 	.word	0x30fff04f
   1c81c:	bf00e7c8 	.word	0xbf00e7c8

0001c820 <symbol_000c914>:
   1c820:	e92d4290 	.word	0xe92d4290
   1c824:	460747f0 	.word	0x460747f0
   1c828:	d006460c 	.word	0xd006460c
   1c82c:	46154288 	.word	0x46154288
   1c830:	f7ffd002 	.word	0xf7ffd002
   1c834:	b9a0fafb 	.word	0xb9a0fafb
   1c838:	2301462c 	.word	0x2301462c
   1c83c:	6865603b 	.word	0x6865603b
   1c840:	68a3b175 	.word	0x68a3b175
   1c844:	4280f105 	.word	0x4280f105
   1c848:	f8533a01 	.word	0xf8533a01
   1c84c:	eb031022 	.word	0xeb031022
   1c850:	b1190282 	.word	0xb1190282
   1c854:	f852e007 	.word	0xf852e007
   1c858:	b9211d04 	.word	0xb9211d04
   1c85c:	d1fa3d01 	.word	0xd1fa3d01
   1c860:	e8bd2000 	.word	0xe8bd2000
   1c864:	f24287f0 	.word	0xf24287f0
   1c868:	42957210 	.word	0x42957210
   1c86c:	687ad875 	.word	0x687ad875
   1c870:	d27642aa 	.word	0xd27642aa
   1c874:	46282104 	.word	0x46282104
   1c878:	fea8f002 	.word	0xfea8f002
   1c87c:	28004606 	.word	0x28004606
   1c880:	68b9d06b 	.word	0x68b9d06b
   1c884:	687ab189 	.word	0x687ab189
   1c888:	f0080092 	.word	0xf0080092
   1c88c:	e9d7f819 	.word	0xe9d7f819
   1c890:	1e532001 	.word	0x1e532001
   1c894:	2200b13a 	.word	0x2200b13a
   1c898:	1c593b01 	.word	0x1c593b01
   1c89c:	f1006002 	.word	0xf1006002
   1c8a0:	d1f90004 	.word	0xd1f90004
   1c8a4:	f00268b8 	.word	0xf00268b8
   1c8a8:	e9c7fea5 	.word	0xe9c7fea5
   1c8ac:	68a35601 	.word	0x68a35601
   1c8b0:	ea4f2400 	.word	0xea4f2400
   1c8b4:	f1a30a85 	.word	0xf1a30a85
   1c8b8:	eb060c04 	.word	0xeb060c04
   1c8bc:	2200000a 	.word	0x2200000a
   1c8c0:	f10c6833 	.word	0xf10c6833
   1c8c4:	f8dc0c04 	.word	0xf8dc0c04
   1c8c8:	191b1000 	.word	0x191b1000
   1c8cc:	bf284614 	.word	0xbf284614
   1c8d0:	185b2201 	.word	0x185b2201
   1c8d4:	2401bf28 	.word	0x2401bf28
   1c8d8:	3b04f846 	.word	0x3b04f846
   1c8dc:	44144286 	.word	0x44144286
   1c8e0:	2c00d1ed 	.word	0x2c00d1ed
   1c8e4:	f242d0bc 	.word	0xf242d0bc
   1c8e8:	f04f7810 	.word	0xf04f7810
   1c8ec:	e00f0900 	.word	0xe00f0900
   1c8f0:	eb0568bd 	.word	0xeb0568bd
   1c8f4:	6803000a 	.word	0x6803000a
   1c8f8:	191c2200 	.word	0x191c2200
   1c8fc:	2201bf28 	.word	0x2201bf28
   1c900:	4b04f840 	.word	0x4b04f840
   1c904:	0a04f10a 	.word	0x0a04f10a
   1c908:	24014635 	.word	0x24014635
   1c90c:	d0a72a00 	.word	0xd0a72a00
   1c910:	1c6e687b 	.word	0x1c6e687b
   1c914:	d8ee42ab 	.word	0xd8ee42ab
   1c918:	d81e4546 	.word	0xd81e4546
   1c91c:	d2e742b3 	.word	0xd2e742b3
   1c920:	46302104 	.word	0x46302104
   1c924:	fe52f002 	.word	0xfe52f002
   1c928:	b1b04605 	.word	0xb1b04605
   1c92c:	b18968b9 	.word	0xb18968b9
   1c930:	0092687a 	.word	0x0092687a
   1c934:	ffc4f007 	.word	0xffc4f007
   1c938:	2001e9d7 	.word	0x2001e9d7
   1c93c:	b13a1e53 	.word	0xb13a1e53
   1c940:	1c5a3b01 	.word	0x1c5a3b01
   1c944:	9000f8c0 	.word	0x9000f8c0
   1c948:	0004f100 	.word	0x0004f100
   1c94c:	68b8d1f8 	.word	0x68b8d1f8
   1c950:	fe50f002 	.word	0xfe50f002
   1c954:	6501e9c7 	.word	0x6501e9c7
   1c958:	f06fe7cb 	.word	0xf06fe7cb
   1c95c:	e8bd000f 	.word	0xe8bd000f
   1c960:	68be87f0 	.word	0x68be87f0
   1c964:	bf00e7a4 	.word	0xbf00e7a4

0001c968 <symbol_0004fdf>:
   1c968:	684bb5f0 	.word	0x684bb5f0
   1c96c:	b085460d 	.word	0xb085460d
   1c970:	46064614 	.word	0x46064614
   1c974:	b17b6851 	.word	0xb17b6851
   1c978:	f10368a8 	.word	0xf10368a8
   1c97c:	3a014280 	.word	0x3a014280
   1c980:	7022f850 	.word	0x7022f850
   1c984:	0082eb00 	.word	0x0082eb00
   1c988:	e04fb127 	.word	0xe04fb127
   1c98c:	2d04f850 	.word	0x2d04f850
   1c990:	d14b2a00 	.word	0xd14b2a00
   1c994:	d1f93b01 	.word	0xd1f93b01
   1c998:	f101b189 	.word	0xf101b189
   1c99c:	68a74080 	.word	0x68a74080
   1c9a0:	f8573801 	.word	0xf8573801
   1c9a4:	2a002020 	.word	0x2a002020
   1c9a8:	8099f040 	.word	0x8099f040
   1c9ac:	0080eb07 	.word	0x0080eb07
   1c9b0:	f850e003 	.word	0xf850e003
   1c9b4:	2a002d04 	.word	0x2a002d04
   1c9b8:	3901d142 	.word	0x3901d142
   1c9bc:	2300d1f9 	.word	0x2300d1f9
   1c9c0:	42b42201 	.word	0x42b42201
   1c9c4:	2301e9cd 	.word	0x2301e9cd
   1c9c8:	d07f9303 	.word	0xd07f9303
   1c9cc:	d00542b5 	.word	0xd00542b5
   1c9d0:	46304629 	.word	0x46304629
   1c9d4:	fa2af7ff 	.word	0xfa2af7ff
   1c9d8:	b9a84607 	.word	0xb9a84607
   1c9dc:	60332301 	.word	0x60332301
   1c9e0:	b1806860 	.word	0xb1806860
   1c9e4:	c008f8d4 	.word	0xc008f8d4
   1c9e8:	4380f100 	.word	0x4380f100
   1c9ec:	f85c3b01 	.word	0xf85c3b01
   1c9f0:	eb0c2023 	.word	0xeb0c2023
   1c9f4:	b1220383 	.word	0xb1220383
   1c9f8:	f853e042 	.word	0xf853e042
   1c9fc:	2a002d04 	.word	0x2a002d04
   1ca00:	3801d13e 	.word	0x3801d13e
   1ca04:	2700d1f9 	.word	0x2700d1f9
   1ca08:	b1609803 	.word	0xb1609803
   1ca0c:	1e539a02 	.word	0x1e539a02
   1ca10:	2200b13a 	.word	0x2200b13a
   1ca14:	1c593b01 	.word	0x1c593b01
   1ca18:	f1006002 	.word	0xf1006002
   1ca1c:	d1f90004 	.word	0xd1f90004
   1ca20:	f0029803 	.word	0xf0029803
   1ca24:	4638fde7 	.word	0x4638fde7
   1ca28:	bdf0b005 	.word	0xbdf0b005
   1ca2c:	d0c62900 	.word	0xd0c62900
   1ca30:	4080f101 	.word	0x4080f101
   1ca34:	380168a7 	.word	0x380168a7
   1ca38:	2020f857 	.word	0x2020f857
   1ca3c:	d0b52a00 	.word	0xd0b52a00
   1ca40:	d8bc428b 	.word	0xd8bc428b
   1ca44:	2b00d34b 	.word	0x2b00d34b
   1ca48:	68a8d0b9 	.word	0x68a8d0b9
   1ca4c:	4180f103 	.word	0x4180f103
   1ca50:	f8503901 	.word	0xf8503901
   1ca54:	f857c021 	.word	0xf857c021
   1ca58:	0089e021 	.word	0x0089e021
   1ca5c:	440845e6 	.word	0x440845e6
   1ca60:	0201eb07 	.word	0x0201eb07
   1ca64:	d83ad3ab 	.word	0xd83ad3ab
   1ca68:	e0064601 	.word	0xe0064601
   1ca6c:	7d04f851 	.word	0x7d04f851
   1ca70:	0d04f852 	.word	0x0d04f852
   1ca74:	d8a24287 	.word	0xd8a24287
   1ca78:	3b01d331 	.word	0x3b01d331
   1ca7c:	e79ed1f6 	.word	0xe79ed1f6
   1ca80:	462b2500 	.word	0x462b2500
   1ca84:	f85168b1 	.word	0xf85168b1
   1ca88:	35016b04 	.word	0x35016b04
   1ca8c:	f8411af2 	.word	0xf8411af2
   1ca90:	f85c2c04 	.word	0xf85c2c04
   1ca94:	460c7b04 	.word	0x460c7b04
   1ca98:	bf2c42ba 	.word	0xbf2c42ba
   1ca9c:	0e00f04f 	.word	0x0e00f04f
   1caa0:	0e01f04f 	.word	0x0e01f04f
   1caa4:	429e1bd2 	.word	0x429e1bd2
   1caa8:	4673bf2c 	.word	0x4673bf2c
   1caac:	0301f10e 	.word	0x0301f10e
   1cab0:	f8414285 	.word	0xf8414285
   1cab4:	d3e62c04 	.word	0xd3e62c04
   1cab8:	e7a4b90b 	.word	0xe7a4b90b
   1cabc:	68222301 	.word	0x68222301
   1cac0:	429a1ad1 	.word	0x429a1ad1
   1cac4:	1b04f844 	.word	0x1b04f844
   1cac8:	e79cd3f8 	.word	0xe79cd3f8
   1cacc:	a8014621 	.word	0xa8014621
   1cad0:	f9acf7ff 	.word	0xf9acf7ff
   1cad4:	28004607 	.word	0x28004607
   1cad8:	ac01d196 	.word	0xac01d196
   1cadc:	f06fe776 	.word	0xf06fe776
   1cae0:	46380709 	.word	0x46380709
   1cae4:	bdf0b005 	.word	0xbdf0b005

0001cae8 <symbol_0005cc7>:
   1cae8:	41f0e92d 	.word	0x41f0e92d
   1caec:	6813680c 	.word	0x6813680c
   1caf0:	fb034605 	.word	0xfb034605
   1caf4:	2b00f304 	.word	0x2b00f304
   1caf8:	684bda39 	.word	0x684bda39
   1cafc:	460e4617 	.word	0x460e4617
   1cb00:	b1836852 	.word	0xb1836852
   1cb04:	f1036889 	.word	0xf1036889
   1cb08:	38014080 	.word	0x38014080
   1cb0c:	c020f851 	.word	0xc020f851
   1cb10:	0180eb01 	.word	0x0180eb01
   1cb14:	0f00f1bc 	.word	0x0f00f1bc
   1cb18:	e02ed003 	.word	0xe02ed003
   1cb1c:	0d04f851 	.word	0x0d04f851
   1cb20:	3b01bb58 	.word	0x3b01bb58
   1cb24:	b17ad1fa 	.word	0xb17ad1fa
   1cb28:	4180f102 	.word	0x4180f102
   1cb2c:	c008f8d7 	.word	0xc008f8d7
   1cb30:	f85c3901 	.word	0xf85c3901
   1cb34:	b9780021 	.word	0xb9780021
   1cb38:	0181eb0c 	.word	0x0181eb0c
   1cb3c:	f851e002 	.word	0xf851e002
   1cb40:	bb280d04 	.word	0xbb280d04
   1cb44:	d1fa3a01 	.word	0xd1fa3a01
   1cb48:	4631463a 	.word	0x4631463a
   1cb4c:	f7ff4628 	.word	0xf7ff4628
   1cb50:	b148ff0b 	.word	0xb148ff0b
   1cb54:	81f0e8bd 	.word	0x81f0e8bd
   1cb58:	46394632 	.word	0x46394632
   1cb5c:	f7ff4628 	.word	0xf7ff4628
   1cb60:	2800ff03 	.word	0x2800ff03
   1cb64:	4264d1f6 	.word	0x4264d1f6
   1cb68:	e8bd602c 	.word	0xe8bd602c
   1cb6c:	f7ff81f0 	.word	0xf7ff81f0
   1cb70:	2800fe57 	.word	0x2800fe57
   1cb74:	602cd1ee 	.word	0x602cd1ee
   1cb78:	2a00e7f7 	.word	0x2a00e7f7
   1cb7c:	f102d0e4 	.word	0xf102d0e4
   1cb80:	f8d74180 	.word	0xf8d74180
   1cb84:	3901c008 	.word	0x3901c008
   1cb88:	0021f85c 	.word	0x0021f85c
   1cb8c:	d0d32800 	.word	0xd0d32800
   1cb90:	d8d94293 	.word	0xd8d94293
   1cb94:	2b00d3e0 	.word	0x2b00d3e0
   1cb98:	68b0d0d6 	.word	0x68b0d0d6
   1cb9c:	4180f103 	.word	0x4180f103
   1cba0:	f8503901 	.word	0xf8503901
   1cba4:	f85c8021 	.word	0xf85c8021
   1cba8:	0089e021 	.word	0x0089e021
   1cbac:	440845f0 	.word	0x440845f0
   1cbb0:	0201eb0c 	.word	0x0201eb0c
   1cbb4:	d3cfd8c8 	.word	0xd3cfd8c8
   1cbb8:	e0064601 	.word	0xe0064601
   1cbbc:	cd04f851 	.word	0xcd04f851
   1cbc0:	0d04f852 	.word	0x0d04f852
   1cbc4:	d8bf4584 	.word	0xd8bf4584
   1cbc8:	3b01d3c6 	.word	0x3b01d3c6
   1cbcc:	e7bbd1f6 	.word	0xe7bbd1f6

0001cbd0 <symbol_000d773>:
   1cbd0:	41f0e92d 	.word	0x41f0e92d
   1cbd4:	6813680c 	.word	0x6813680c
   1cbd8:	fb034605 	.word	0xfb034605
   1cbdc:	2b00f304 	.word	0x2b00f304
   1cbe0:	684bdd64 	.word	0x684bdd64
   1cbe4:	460e4617 	.word	0x460e4617
   1cbe8:	b1836852 	.word	0xb1836852
   1cbec:	f1036889 	.word	0xf1036889
   1cbf0:	38014080 	.word	0x38014080
   1cbf4:	c020f851 	.word	0xc020f851
   1cbf8:	0180eb01 	.word	0x0180eb01
   1cbfc:	0f00f1bc 	.word	0x0f00f1bc
   1cc00:	e01fd003 	.word	0xe01fd003
   1cc04:	0d04f851 	.word	0x0d04f851
   1cc08:	3b01b9e0 	.word	0x3b01b9e0
   1cc0c:	b182d1fa 	.word	0xb182d1fa
   1cc10:	4180f102 	.word	0x4180f102
   1cc14:	c008f8d7 	.word	0xc008f8d7
   1cc18:	f85c3901 	.word	0xf85c3901
   1cc1c:	28000021 	.word	0x28000021
   1cc20:	eb0cd13b 	.word	0xeb0cd13b
   1cc24:	e0020181 	.word	0xe0020181
   1cc28:	0d04f851 	.word	0x0d04f851
   1cc2c:	3a01b9a8 	.word	0x3a01b9a8
   1cc30:	463ad1fa 	.word	0x463ad1fa
   1cc34:	46284631 	.word	0x46284631
   1cc38:	fe96f7ff 	.word	0xfe96f7ff
   1cc3c:	602cb900 	.word	0x602cb900
   1cc40:	81f0e8bd 	.word	0x81f0e8bd
   1cc44:	d0f42a00 	.word	0xd0f42a00
   1cc48:	4180f102 	.word	0x4180f102
   1cc4c:	c008f8d7 	.word	0xc008f8d7
   1cc50:	f85c3901 	.word	0xf85c3901
   1cc54:	28000021 	.word	0x28000021
   1cc58:	4293d0e3 	.word	0x4293d0e3
   1cc5c:	d31cd8e9 	.word	0xd31cd8e9
   1cc60:	d0e62b00 	.word	0xd0e62b00
   1cc64:	f10368b0 	.word	0xf10368b0
   1cc68:	39014180 	.word	0x39014180
   1cc6c:	8021f850 	.word	0x8021f850
   1cc70:	e021f85c 	.word	0xe021f85c
   1cc74:	45f00089 	.word	0x45f00089
   1cc78:	eb0c4408 	.word	0xeb0c4408
   1cc7c:	d8d80201 	.word	0xd8d80201
   1cc80:	4601d30b 	.word	0x4601d30b
   1cc84:	f851e006 	.word	0xf851e006
   1cc88:	f852cd04 	.word	0xf852cd04
   1cc8c:	45840d04 	.word	0x45840d04
   1cc90:	d302d8cf 	.word	0xd302d8cf
   1cc94:	d1f63b01 	.word	0xd1f63b01
   1cc98:	4632e7cb 	.word	0x4632e7cb
   1cc9c:	46284639 	.word	0x46284639
   1cca0:	fe62f7ff 	.word	0xfe62f7ff
   1cca4:	d1cb2800 	.word	0xd1cb2800
   1cca8:	e7c84264 	.word	0xe7c84264
   1ccac:	fdb8f7ff 	.word	0xfdb8f7ff
   1ccb0:	d0c42800 	.word	0xd0c42800
   1ccb4:	81f0e8bd 	.word	0x81f0e8bd

0001ccb8 <symbol_000f268>:
   1ccb8:	bfac2a00 	.word	0xbfac2a00
   1ccbc:	f04f2301 	.word	0xf04f2301
   1ccc0:	b5f033ff 	.word	0xb5f033ff
   1ccc4:	680d2601 	.word	0x680d2601
   1ccc8:	7ce2ea82 	.word	0x7ce2ea82
   1cccc:	f703fb05 	.word	0xf703fb05
   1ccd0:	ebacb085 	.word	0xebacb085
   1ccd4:	2f007ce2 	.word	0x2f007ce2
   1ccd8:	e9cd9602 	.word	0xe9cd9602
   1ccdc:	f8cdc300 	.word	0xf8cdc300
   1cce0:	4606d00c 	.word	0x4606d00c
   1cce4:	684bdd2c 	.word	0x684bdd2c
   1cce8:	b173460c 	.word	0xb173460c
   1ccec:	f10368a7 	.word	0xf10368a7
   1ccf0:	39014180 	.word	0x39014180
   1ccf4:	0021f857 	.word	0x0021f857
   1ccf8:	0181eb07 	.word	0x0181eb07
   1ccfc:	e00eb118 	.word	0xe00eb118
   1cd00:	0d04f851 	.word	0x0d04f851
   1cd04:	3b01b958 	.word	0x3b01b958
   1cd08:	b982d1fa 	.word	0xb982d1fa
   1cd0c:	aa014621 	.word	0xaa014621
   1cd10:	f7ff4630 	.word	0xf7ff4630
   1cd14:	b900f8f9 	.word	0xb900f8f9
   1cd18:	b0056035 	.word	0xb0056035
   1cd1c:	2a00bdf0 	.word	0x2a00bdf0
   1cd20:	2b01d0f4 	.word	0x2b01d0f4
   1cd24:	683bd8f2 	.word	0x683bd8f2
   1cd28:	d3ef459c 	.word	0xd3ef459c
   1cd2c:	4622d9ee 	.word	0x4622d9ee
   1cd30:	4630a901 	.word	0x4630a901
   1cd34:	fe18f7ff 	.word	0xfe18f7ff
   1cd38:	d1ee2800 	.word	0xd1ee2800
   1cd3c:	e7eb426d 	.word	0xe7eb426d
   1cd40:	f7ffaa01 	.word	0xf7ffaa01
   1cd44:	2800fd6d 	.word	0x2800fd6d
   1cd48:	b005d0e6 	.word	0xb005d0e6
   1cd4c:	bf00bdf0 	.word	0xbf00bdf0

0001cd50 <symbol_000b923>:
   1cd50:	47f0e92d 	.word	0x47f0e92d
   1cd54:	23004606 	.word	0x23004606
   1cd58:	b0862001 	.word	0xb0862001
   1cd5c:	4690428e 	.word	0x4690428e
   1cd60:	90039000 	.word	0x90039000
   1cd64:	3301e9cd 	.word	0x3301e9cd
   1cd68:	3304e9cd 	.word	0x3304e9cd
   1cd6c:	80d1f000 	.word	0x80d1f000
   1cd70:	4546460f 	.word	0x4546460f
   1cd74:	80d5f000 	.word	0x80d5f000
   1cd78:	b185687d 	.word	0xb185687d
   1cd7c:	f10568bb 	.word	0xf10568bb
   1cd80:	3a014280 	.word	0x3a014280
   1cd84:	1022f853 	.word	0x1022f853
   1cd88:	0382eb03 	.word	0x0382eb03
   1cd8c:	e0bab129 	.word	0xe0bab129
   1cd90:	2d04f853 	.word	0x2d04f853
   1cd94:	f0402a00 	.word	0xf0402a00
   1cd98:	3d0180b6 	.word	0x3d0180b6
   1cd9c:	f8d8d1f8 	.word	0xf8d8d1f8
   1cda0:	25004004 	.word	0x25004004
   1cda4:	d03d2c00 	.word	0xd03d2c00
   1cda8:	3008f8d8 	.word	0x3008f8d8
   1cdac:	4280f104 	.word	0x4280f104
   1cdb0:	f8533a01 	.word	0xf8533a01
   1cdb4:	eb031022 	.word	0xeb031022
   1cdb8:	b1190382 	.word	0xb1190382
   1cdbc:	f853e004 	.word	0xf853e004
   1cdc0:	b90a2d04 	.word	0xb90a2d04
   1cdc4:	d1fa3c01 	.word	0xd1fa3c01
   1cdc8:	7310f242 	.word	0x7310f242
   1cdcc:	0905eb04 	.word	0x0905eb04
   1cdd0:	f2004599 	.word	0xf2004599
   1cdd4:	f8d680b0 	.word	0xf8d680b0
   1cdd8:	45d1a004 	.word	0x45d1a004
   1cddc:	2104d925 	.word	0x2104d925
   1cde0:	f0024648 	.word	0xf0024648
   1cde4:	4682fbf3 	.word	0x4682fbf3
   1cde8:	f0002800 	.word	0xf0002800
   1cdec:	68b180a4 	.word	0x68b180a4
   1cdf0:	6872b189 	.word	0x6872b189
   1cdf4:	f0070092 	.word	0xf0070092
   1cdf8:	e9d6fd63 	.word	0xe9d6fd63
   1cdfc:	1e532001 	.word	0x1e532001
   1ce00:	2200b13a 	.word	0x2200b13a
   1ce04:	1c593b01 	.word	0x1c593b01
   1ce08:	f1006002 	.word	0xf1006002
   1ce0c:	d1f90004 	.word	0xd1f90004
   1ce10:	f00268b0 	.word	0xf00268b0
   1ce14:	e9c6fbef 	.word	0xe9c6fbef
   1ce18:	ea4f9a01 	.word	0xea4f9a01
   1ce1c:	f8d60289 	.word	0xf8d60289
   1ce20:	e0259008 	.word	0xe0259008
   1ce24:	f8d64625 	.word	0xf8d64625
   1ce28:	f1baa004 	.word	0xf1baa004
   1ce2c:	f0400f00 	.word	0xf0400f00
   1ce30:	21048085 	.word	0x21048085
   1ce34:	f0022001 	.word	0xf0022001
   1ce38:	4681fbc9 	.word	0x4681fbc9
   1ce3c:	d07a2800 	.word	0xd07a2800
   1ce40:	b18968b1 	.word	0xb18968b1
   1ce44:	00926872 	.word	0x00926872
   1ce48:	fd3af007 	.word	0xfd3af007
   1ce4c:	2001e9d6 	.word	0x2001e9d6
   1ce50:	b13a1e53 	.word	0xb13a1e53
   1ce54:	3b014652 	.word	0x3b014652
   1ce58:	60021c59 	.word	0x60021c59
   1ce5c:	0004f100 	.word	0x0004f100
   1ce60:	68b0d1f9 	.word	0x68b0d1f9
   1ce64:	fbc6f002 	.word	0xfbc6f002
   1ce68:	22042301 	.word	0x22042301
   1ce6c:	3901e9c6 	.word	0x3901e9c6
   1ce70:	46482100 	.word	0x46482100
   1ce74:	fd51f007 	.word	0xfd51f007
   1ce78:	23012100 	.word	0x23012100
   1ce7c:	601168b2 	.word	0x601168b2
   1ce80:	b19c6033 	.word	0xb19c6033
   1ce84:	4980f104 	.word	0x4980f104
   1ce88:	39fff109 	.word	0x39fff109
   1ce8c:	0989ea4f 	.word	0x0989ea4f
   1ce90:	3008f8d8 	.word	0x3008f8d8
   1ce94:	f85368b2 	.word	0xf85368b2
   1ce98:	444a3009 	.word	0x444a3009
   1ce9c:	462868b9 	.word	0x462868b9
   1cea0:	fc14f7fe 	.word	0xfc14f7fe
   1cea4:	f1a93c01 	.word	0xf1a93c01
   1cea8:	d1f10904 	.word	0xd1f10904
   1ceac:	683a2400 	.word	0x683a2400
   1ceb0:	3000f8d8 	.word	0x3000f8d8
   1ceb4:	f302fb03 	.word	0xf302fb03
   1ceb8:	98056033 	.word	0x98056033
   1cebc:	9a04b160 	.word	0x9a04b160
   1cec0:	b13a1e53 	.word	0xb13a1e53
   1cec4:	3b012200 	.word	0x3b012200
   1cec8:	60021c5d 	.word	0x60021c5d
   1cecc:	0004f100 	.word	0x0004f100
   1ced0:	9805d1f9 	.word	0x9805d1f9
   1ced4:	fb8ef002 	.word	0xfb8ef002
   1ced8:	23012200 	.word	0x23012200
   1cedc:	e9cd9802 	.word	0xe9cd9802
   1cee0:	92053203 	.word	0x92053203
   1cee4:	9901b158 	.word	0x9901b158
   1cee8:	b1311e4b 	.word	0xb1311e4b
   1ceec:	1c593b01 	.word	0x1c593b01
   1cef0:	f1006002 	.word	0xf1006002
   1cef4:	d1f90004 	.word	0xd1f90004
   1cef8:	f0029802 	.word	0xf0029802
   1cefc:	4620fb7b 	.word	0x4620fb7b
   1cf00:	e8bdb006 	.word	0xe8bdb006
   1cf04:	f8d887f0 	.word	0xf8d887f0
   1cf08:	2c004004 	.word	0x2c004004
   1cf0c:	af4cf47f 	.word	0xaf4cf47f
   1cf10:	4668e75a 	.word	0x4668e75a
   1cf14:	ff8af7fe 	.word	0xff8af7fe
   1cf18:	28004604 	.word	0x28004604
   1cf1c:	466fd1cd 	.word	0x466fd1cd
   1cf20:	a803e727 	.word	0xa803e727
   1cf24:	f7fe4631 	.word	0xf7fe4631
   1cf28:	4604ff81 	.word	0x4604ff81
   1cf2c:	d1c42800 	.word	0xd1c42800
   1cf30:	080cf10d 	.word	0x080cf10d
   1cf34:	f06fe720 	.word	0xf06fe720
   1cf38:	e7be040f 	.word	0xe7be040f
   1cf3c:	e76c46d1 	.word	0xe76c46d1

0001cf40 <symbol_0008c0f>:
   1cf40:	b5002301 	.word	0xb5002301
   1cf44:	9200b085 	.word	0x9200b085
   1cf48:	e9cdaa01 	.word	0xe9cdaa01
   1cf4c:	f8cd3301 	.word	0xf8cd3301
   1cf50:	f7ffd00c 	.word	0xf7ffd00c
   1cf54:	b005fefd 	.word	0xb005fefd
   1cf58:	fb04f85d 	.word	0xfb04f85d

0001cf5c <symbol_0007bb0>:
   1cf5c:	4ff0e92d 	.word	0x4ff0e92d
   1cf60:	b0a3685e 	.word	0xb0a3685e
   1cf64:	f8d3b196 	.word	0xf8d3b196
   1cf68:	f1068008 	.word	0xf1068008
   1cf6c:	f1094980 	.word	0xf1094980
   1cf70:	f85839ff 	.word	0xf85839ff
   1cf74:	eb085029 	.word	0xeb085029
   1cf78:	b96d0e89 	.word	0xb96d0e89
   1cf7c:	463746f4 	.word	0x463746f4
   1cf80:	f85ce002 	.word	0xf85ce002
   1cf84:	b93c4d04 	.word	0xb93c4d04
   1cf88:	d1fa3f01 	.word	0xd1fa3f01
   1cf8c:	060bf06f 	.word	0x060bf06f
   1cf90:	b0234630 	.word	0xb0234630
   1cf94:	8ff0e8bd 	.word	0x8ff0e8bd
   1cf98:	2d00681d 	.word	0x2d00681d
   1cf9c:	4614d0f6 	.word	0x4614d0f6
   1cfa0:	2200468a 	.word	0x2200468a
   1cfa4:	469b2101 	.word	0x469b2101
   1cfa8:	46056863 	.word	0x46056863
   1cfac:	91139110 	.word	0x91139110
   1cfb0:	91199116 	.word	0x91199116
   1cfb4:	e9cd911c 	.word	0xe9cd911c
   1cfb8:	e9cd2211 	.word	0xe9cd2211
   1cfbc:	e9cd2214 	.word	0xe9cd2214
   1cfc0:	e9cd2217 	.word	0xe9cd2217
   1cfc4:	e9cd221a 	.word	0xe9cd221a
   1cfc8:	2b00221d 	.word	0x2b00221d
   1cfcc:	821af000 	.word	0x821af000
   1cfd0:	f10368a2 	.word	0xf10368a2
   1cfd4:	39014180 	.word	0x39014180
   1cfd8:	0021f852 	.word	0x0021f852
   1cfdc:	0281eb02 	.word	0x0281eb02
   1cfe0:	e07bb120 	.word	0xe07bb120
   1cfe4:	1d04f852 	.word	0x1d04f852
   1cfe8:	d1772900 	.word	0xd1772900
   1cfec:	d1f93b01 	.word	0xd1f93b01
   1cff0:	2029f858 	.word	0x2029f858
   1cff4:	d1772a00 	.word	0xd1772a00
   1cff8:	e0034672 	.word	0xe0034672
   1cffc:	1d04f852 	.word	0x1d04f852
   1d000:	d16f2900 	.word	0xd16f2900
   1d004:	d1f93e01 	.word	0xd1f93e01
   1d008:	4621a810 	.word	0x4621a810
   1d00c:	ff0ef7fe 	.word	0xff0ef7fe
   1d010:	28004606 	.word	0x28004606
   1d014:	8092f000 	.word	0x8092f000
   1d018:	98122700 	.word	0x98122700
   1d01c:	9a11b160 	.word	0x9a11b160
   1d020:	b13a1e53 	.word	0xb13a1e53
   1d024:	3b012200 	.word	0x3b012200
   1d028:	60021c5c 	.word	0x60021c5c
   1d02c:	0004f100 	.word	0x0004f100
   1d030:	9812d1f9 	.word	0x9812d1f9
   1d034:	fadef002 	.word	0xfadef002
   1d038:	23012200 	.word	0x23012200
   1d03c:	e9cd9815 	.word	0xe9cd9815
   1d040:	92123210 	.word	0x92123210
   1d044:	9914b158 	.word	0x9914b158
   1d048:	b1311e4b 	.word	0xb1311e4b
   1d04c:	1c593b01 	.word	0x1c593b01
   1d050:	f1006002 	.word	0xf1006002
   1d054:	d1f90004 	.word	0xd1f90004
   1d058:	f0029815 	.word	0xf0029815
   1d05c:	2200facb 	.word	0x2200facb
   1d060:	98182301 	.word	0x98182301
   1d064:	3213e9cd 	.word	0x3213e9cd
   1d068:	b1589215 	.word	0xb1589215
   1d06c:	1e4b9917 	.word	0x1e4b9917
   1d070:	3b01b131 	.word	0x3b01b131
   1d074:	60021c5d 	.word	0x60021c5d
   1d078:	0004f100 	.word	0x0004f100
   1d07c:	9818d1f9 	.word	0x9818d1f9
   1d080:	fab8f002 	.word	0xfab8f002
   1d084:	23012200 	.word	0x23012200
   1d088:	e9cd981b 	.word	0xe9cd981b
   1d08c:	92183216 	.word	0x92183216
   1d090:	991ab158 	.word	0x991ab158
   1d094:	b1311e4b 	.word	0xb1311e4b
   1d098:	1c5c3b01 	.word	0x1c5c3b01
   1d09c:	f1006002 	.word	0xf1006002
   1d0a0:	d1f90004 	.word	0xd1f90004
   1d0a4:	f002981b 	.word	0xf002981b
   1d0a8:	2100faa5 	.word	0x2100faa5
   1d0ac:	911b2301 	.word	0x911b2301
   1d0b0:	3119e9cd 	.word	0x3119e9cd
   1d0b4:	f43f2f00 	.word	0xf43f2f00
   1d0b8:	9a1daf6b 	.word	0x9a1daf6b
   1d0bc:	b1321e53 	.word	0xb1321e53
   1d0c0:	3b01463a 	.word	0x3b01463a
   1d0c4:	60111c58 	.word	0x60111c58
   1d0c8:	0204f102 	.word	0x0204f102
   1d0cc:	4638d1f9 	.word	0x4638d1f9
   1d0d0:	fa90f002 	.word	0xfa90f002
   1d0d4:	b0234630 	.word	0xb0234630
   1d0d8:	8ff0e8bd 	.word	0x8ff0e8bd
   1d0dc:	2029f858 	.word	0x2029f858
   1d0e0:	d0892a00 	.word	0xd0892a00
   1d0e4:	d38f429e 	.word	0xd38f429e
   1d0e8:	f200429e 	.word	0xf200429e
   1d0ec:	2b008190 	.word	0x2b008190
   1d0f0:	68a1d08a 	.word	0x68a1d08a
   1d0f4:	4280f103 	.word	0x4280f103
   1d0f8:	f8513a01 	.word	0xf8513a01
   1d0fc:	f8580022 	.word	0xf8580022
   1d100:	00926022 	.word	0x00926022
   1d104:	44114286 	.word	0x44114286
   1d108:	f4ff4490 	.word	0xf4ff4490
   1d10c:	f200af7d 	.word	0xf200af7d
   1d110:	460a817e 	.word	0x460a817e
   1d114:	f852e008 	.word	0xf852e008
   1d118:	f8580d04 	.word	0xf8580d04
   1d11c:	42881d04 	.word	0x42881d04
   1d120:	af72f63f 	.word	0xaf72f63f
   1d124:	8173f0c0 	.word	0x8173f0c0
   1d128:	d1f43b01 	.word	0xd1f43b01
   1d12c:	4621a810 	.word	0x4621a810
   1d130:	fe7cf7fe 	.word	0xfe7cf7fe
   1d134:	28004606 	.word	0x28004606
   1d138:	af6ef47f 	.word	0xaf6ef47f
   1d13c:	4659a813 	.word	0x4659a813
   1d140:	fe74f7fe 	.word	0xfe74f7fe
   1d144:	28004606 	.word	0x28004606
   1d148:	af66f47f 	.word	0xaf66f47f
   1d14c:	7210f242 	.word	0x7210f242
   1d150:	68672301 	.word	0x68672301
   1d154:	37029313 	.word	0x37029313
   1d158:	93104297 	.word	0x93104297
   1d15c:	8193f200 	.word	0x8193f200
   1d160:	805cf8dd 	.word	0x805cf8dd
   1d164:	d91d4547 	.word	0xd91d4547
   1d168:	46382104 	.word	0x46382104
   1d16c:	fa2ef002 	.word	0xfa2ef002
   1d170:	28004681 	.word	0x28004681
   1d174:	8187f000 	.word	0x8187f000
   1d178:	b1819918 	.word	0xb1819918
   1d17c:	00929a17 	.word	0x00929a17
   1d180:	fb9ef007 	.word	0xfb9ef007
   1d184:	2017e9dd 	.word	0x2017e9dd
   1d188:	b1321e53 	.word	0xb1321e53
   1d18c:	1c5a3b01 	.word	0x1c5a3b01
   1d190:	f1006006 	.word	0xf1006006
   1d194:	d1f90004 	.word	0xd1f90004
   1d198:	f0029818 	.word	0xf0029818
   1d19c:	46b8fa2b 	.word	0x46b8fa2b
   1d1a0:	7917e9cd 	.word	0x7917e9cd
   1d1a4:	0f00f1b8 	.word	0x0f00f1b8
   1d1a8:	8171f000 	.word	0x8171f000
   1d1ac:	ea4f9e18 	.word	0xea4f9e18
   1d1b0:	27000288 	.word	0x27000288
   1d1b4:	46394630 	.word	0x46394630
   1d1b8:	fbaff007 	.word	0xfbaff007
   1d1bc:	9b182201 	.word	0x9b182201
   1d1c0:	9b1a601f 	.word	0x9b1a601f
   1d1c4:	42939216 	.word	0x42939216
   1d1c8:	81b2f240 	.word	0x81b2f240
   1d1cc:	20032104 	.word	0x20032104
   1d1d0:	f9fcf002 	.word	0xf9fcf002
   1d1d4:	28004607 	.word	0x28004607
   1d1d8:	8155f000 	.word	0x8155f000
   1d1dc:	9a142303 	.word	0x9a142303
   1d1e0:	301de9cd 	.word	0x301de9cd
   1d1e4:	2a009203 	.word	0x2a009203
   1d1e8:	8171f000 	.word	0x8171f000
   1d1ec:	0901f1b2 	.word	0x0901f1b2
   1d1f0:	f0009915 	.word	0xf0009915
   1d1f4:	f85181cf 	.word	0xf85181cf
   1d1f8:	28000029 	.word	0x28000029
   1d1fc:	81c5f040 	.word	0x81c5f040
   1d200:	4280f102 	.word	0x4280f102
   1d204:	464b3a01 	.word	0x464b3a01
   1d208:	0282eb01 	.word	0x0282eb01
   1d20c:	f852e004 	.word	0xf852e004
   1d210:	28000d04 	.word	0x28000d04
   1d214:	81aef040 	.word	0x81aef040
   1d218:	d1f83b01 	.word	0xd1f83b01
   1d21c:	68082620 	.word	0x68082620
   1d220:	f04f2200 	.word	0xf04f2200
   1d224:	e0024100 	.word	0xe0024100
   1d228:	2a203201 	.word	0x2a203201
   1d22c:	4201d004 	.word	0x4201d004
   1d230:	0151ea4f 	.word	0x0151ea4f
   1d234:	1ab3d0f8 	.word	0x1ab3d0f8
   1d238:	031ff003 	.word	0x031ff003
   1d23c:	f0402b1f 	.word	0xf0402b1f
   1d240:	2300819f 	.word	0x2300819f
   1d244:	9b119302 	.word	0x9b119302
   1d248:	9304a813 	.word	0x9304a813
   1d24c:	eba33b01 	.word	0xeba33b01
   1d250:	93010809 	.word	0x93010809
   1d254:	1348ea4f 	.word	0x1348ea4f
   1d258:	93054619 	.word	0x93054619
   1d25c:	f8fef7ff 	.word	0xf8fef7ff
   1d260:	28004606 	.word	0x28004606
   1d264:	aed9f47f 	.word	0xaed9f47f
   1d268:	0888ea4f 	.word	0x0888ea4f
   1d26c:	9818e00d 	.word	0x9818e00d
   1d270:	f850a910 	.word	0xf850a910
   1d274:	aa133008 	.word	0xaa133008
   1d278:	f8403301 	.word	0xf8403301
   1d27c:	46083008 	.word	0x46083008
   1d280:	fca6f7ff 	.word	0xfca6f7ff
   1d284:	f0402800 	.word	0xf0402800
   1d288:	a9138179 	.word	0xa9138179
   1d28c:	f7ffa810 	.word	0xf7ffa810
   1d290:	2800fa0b 	.word	0x2800fa0b
   1d294:	9905daeb 	.word	0x9905daeb
   1d298:	f7ffa813 	.word	0xf7ffa813
   1d29c:	4606f995 	.word	0x4606f995
   1d2a0:	f47f2800 	.word	0xf47f2800
   1d2a4:	f06faeba 	.word	0xf06faeba
   1d2a8:	9a030303 	.word	0x9a030303
   1d2ac:	b508e9cd 	.word	0xb508e9cd
   1d2b0:	4780f102 	.word	0x4780f102
   1d2b4:	fb039a04 	.word	0xfb039a04
   1d2b8:	f102f309 	.word	0xf102f309
   1d2bc:	3a024280 	.word	0x3a024280
   1d2c0:	46150092 	.word	0x46150092
   1d2c4:	ea4f9305 	.word	0xea4f9305
   1d2c8:	93030389 	.word	0x93030389
   1d2cc:	63c9ebc9 	.word	0x63c9ebc9
   1d2d0:	e9cd3f02 	.word	0xe9cd3f02
   1d2d4:	e9cd3006 	.word	0xe9cd3006
   1d2d8:	00b9a40a 	.word	0x00b9a40a
   1d2dc:	9b019104 	.word	0x9b019104
   1d2e0:	f240454b 	.word	0xf240454b
   1d2e4:	98038173 	.word	0x98038173
   1d2e8:	9a159912 	.word	0x9a159912
   1d2ec:	0a04f105 	.word	0x0a04f105
   1d2f0:	f8515812 	.word	0xf8515812
   1d2f4:	9805300a 	.word	0x9805300a
   1d2f8:	eb004293 	.word	0xeb004293
   1d2fc:	9e180405 	.word	0x9e180405
   1d300:	814cf0c0 	.word	0x814cf0c0
   1d304:	33fff04f 	.word	0x33fff04f
   1d308:	26015133 	.word	0x26015133
   1d30c:	9f1e9a18 	.word	0x9f1e9a18
   1d310:	f1a55913 	.word	0xf1a55913
   1d314:	44330b04 	.word	0x44330b04
   1d318:	e04b5113 	.word	0xe04b5113
   1d31c:	806cf8dd 	.word	0x806cf8dd
   1d320:	46400092 	.word	0x46400092
   1d324:	f0072100 	.word	0xf0072100
   1d328:	2200faf8 	.word	0x2200faf8
   1d32c:	601a9b1b 	.word	0x601a9b1b
   1d330:	f1b99619 	.word	0xf1b99619
   1d334:	f0000f00 	.word	0xf0000f00
   1d338:	9b1580f9 	.word	0x9b1580f9
   1d33c:	589b9a04 	.word	0x589b9a04
   1d340:	99039a1b 	.word	0x99039a1b
   1d344:	9a156013 	.word	0x9a156013
   1d348:	58529b1b 	.word	0x58529b1b
   1d34c:	605aa919 	.word	0x605aa919
   1d350:	f10d9b18 	.word	0xf10d9b18
   1d354:	591b083c 	.word	0x591b083c
   1d358:	4608aa1f 	.word	0x4608aa1f
   1d35c:	e9cd930f 	.word	0xe9cd930f
   1d360:	f8cd661f 	.word	0xf8cd661f
   1d364:	f7ff8084 	.word	0xf7ff8084
   1d368:	2800fcf3 	.word	0x2800fcf3
   1d36c:	8106f040 	.word	0x8106f040
   1d370:	2a009a1d 	.word	0x2a009a1d
   1d374:	80c2f000 	.word	0x80c2f000
   1d378:	21000092 	.word	0x21000092
   1d37c:	f0074638 	.word	0xf0074638
   1d380:	2300facc 	.word	0x2300facc
   1d384:	9b01603b 	.word	0x9b01603b
   1d388:	2b01961c 	.word	0x2b01961c
   1d38c:	9b12a91c 	.word	0x9b12a91c
   1d390:	80edf000 	.word	0x80edf000
   1d394:	300bf853 	.word	0x300bf853
   1d398:	603ba819 	.word	0x603ba819
   1d39c:	595b9b12 	.word	0x595b9b12
   1d3a0:	9b12607b 	.word	0x9b12607b
   1d3a4:	300af853 	.word	0x300af853
   1d3a8:	f7ff60bb 	.word	0xf7ff60bb
   1d3ac:	2800f97d 	.word	0x2800f97d
   1d3b0:	811cf340 	.word	0x811cf340
   1d3b4:	59139a18 	.word	0x59139a18
   1d3b8:	51133b01 	.word	0x51133b01
   1d3bc:	2a009a1a 	.word	0x2a009a1a
   1d3c0:	2104d1ac 	.word	0x2104d1ac
   1d3c4:	f0022001 	.word	0xf0022001
   1d3c8:	4680f901 	.word	0x4680f901
   1d3cc:	f0002800 	.word	0xf0002800
   1d3d0:	991b8140 	.word	0x991b8140
   1d3d4:	9a1ab191 	.word	0x9a1ab191
   1d3d8:	f0070092 	.word	0xf0070092
   1d3dc:	e9ddfa71 	.word	0xe9ddfa71
   1d3e0:	4602101a 	.word	0x4602101a
   1d3e4:	b1391e4b 	.word	0xb1391e4b
   1d3e8:	3b012100 	.word	0x3b012100
   1d3ec:	1c596011 	.word	0x1c596011
   1d3f0:	0204f102 	.word	0x0204f102
   1d3f4:	981bd1f8 	.word	0x981bd1f8
   1d3f8:	f8fcf002 	.word	0xf8fcf002
   1d3fc:	e9cd2204 	.word	0xe9cd2204
   1d400:	e78e681a 	.word	0xe78e681a
   1d404:	2029f858 	.word	0x2029f858
   1d408:	f43f2a00 	.word	0xf43f2a00
   1d40c:	b355adf5 	.word	0xb355adf5
   1d410:	b9ee686e 	.word	0xb9ee686e
   1d414:	20012104 	.word	0x20012104
   1d418:	f8d8f002 	.word	0xf8d8f002
   1d41c:	b3904607 	.word	0xb3904607
   1d420:	b18168a9 	.word	0xb18168a9
   1d424:	0092686a 	.word	0x0092686a
   1d428:	fa4af007 	.word	0xfa4af007
   1d42c:	2001e9d5 	.word	0x2001e9d5
   1d430:	b1321e53 	.word	0xb1321e53
   1d434:	1c593b01 	.word	0x1c593b01
   1d438:	f1006006 	.word	0xf1006006
   1d43c:	d1f90004 	.word	0xd1f90004
   1d440:	f00268a8 	.word	0xf00268a8
   1d444:	2301f8d7 	.word	0x2301f8d7
   1d448:	e9c52204 	.word	0xe9c52204
   1d44c:	e0013701 	.word	0xe0013701
   1d450:	00b268af 	.word	0x00b268af
   1d454:	46382100 	.word	0x46382100
   1d458:	fa5ff007 	.word	0xfa5ff007
   1d45c:	23012100 	.word	0x23012100
   1d460:	601168aa 	.word	0x601168aa
   1d464:	f1ba602b 	.word	0xf1ba602b
   1d468:	d0070f00 	.word	0xd0070f00
   1d46c:	46504621 	.word	0x46504621
   1d470:	fcdcf7fe 	.word	0xfcdcf7fe
   1d474:	28004606 	.word	0x28004606
   1d478:	adcef47f 	.word	0xadcef47f
   1d47c:	46302600 	.word	0x46302600
   1d480:	e8bdb023 	.word	0xe8bdb023
   1d484:	27008ff0 	.word	0x27008ff0
   1d488:	060ff06f 	.word	0x060ff06f
   1d48c:	2104e5c5 	.word	0x2104e5c5
   1d490:	f0022001 	.word	0xf0022001
   1d494:	4606f89b 	.word	0x4606f89b
   1d498:	d0f42800 	.word	0xd0f42800
   1d49c:	b1899918 	.word	0xb1899918
   1d4a0:	00929a17 	.word	0x00929a17
   1d4a4:	fa0cf007 	.word	0xfa0cf007
   1d4a8:	3017e9dd 	.word	0x3017e9dd
   1d4ac:	b13b1e5a 	.word	0xb13b1e5a
   1d4b0:	3a014643 	.word	0x3a014643
   1d4b4:	60031c57 	.word	0x60031c57
   1d4b8:	0004f100 	.word	0x0004f100
   1d4bc:	9818d1f9 	.word	0x9818d1f9
   1d4c0:	f898f002 	.word	0xf898f002
   1d4c4:	22042301 	.word	0x22042301
   1d4c8:	3617e9cd 	.word	0x3617e9cd
   1d4cc:	231fe671 	.word	0x231fe671
   1d4d0:	93024619 	.word	0x93024619
   1d4d4:	f7fea810 	.word	0xf7fea810
   1d4d8:	4606ffc1 	.word	0x4606ffc1
   1d4dc:	f47f2800 	.word	0xf47f2800
   1d4e0:	9902ad9c 	.word	0x9902ad9c
   1d4e4:	f7fea813 	.word	0xf7fea813
   1d4e8:	4606ffb9 	.word	0x4606ffb9
   1d4ec:	f47f2800 	.word	0xf47f2800
   1d4f0:	9b14ad94 	.word	0x9b14ad94
   1d4f4:	f1039303 	.word	0xf1039303
   1d4f8:	e6a439ff 	.word	0xe6a439ff
   1d4fc:	20012104 	.word	0x20012104
   1d500:	f002920d 	.word	0xf002920d
   1d504:	4603f863 	.word	0x4603f863
   1d508:	f0002800 	.word	0xf0002800
   1d50c:	b14780a2 	.word	0xb14780a2
   1d510:	46399a0d 	.word	0x46399a0d
   1d514:	f007900c 	.word	0xf007900c
   1d518:	4638f9d3 	.word	0x4638f9d3
   1d51c:	f86af002 	.word	0xf86af002
   1d520:	461f9b0c 	.word	0x461f9b0c
   1d524:	e9cd2204 	.word	0xe9cd2204
   1d528:	e726631d 	.word	0xe726631d
   1d52c:	e707464b 	.word	0xe707464b
   1d530:	20022104 	.word	0x20022104
   1d534:	f84af002 	.word	0xf84af002
   1d538:	28004606 	.word	0x28004606
   1d53c:	991bd0a3 	.word	0x991bd0a3
   1d540:	9a1ab189 	.word	0x9a1ab189
   1d544:	f0070092 	.word	0xf0070092
   1d548:	e9ddf9bb 	.word	0xe9ddf9bb
   1d54c:	4618131a 	.word	0x4618131a
   1d550:	b1311e4a 	.word	0xb1311e4a
   1d554:	1c503a01 	.word	0x1c503a01
   1d558:	f103601f 	.word	0xf103601f
   1d55c:	d1f90304 	.word	0xd1f90304
   1d560:	f002981b 	.word	0xf002981b
   1d564:	2302f847 	.word	0x2302f847
   1d568:	361ae9cd 	.word	0x361ae9cd
   1d56c:	595be62e 	.word	0x595be62e
   1d570:	e715a819 	.word	0xe715a819
   1d574:	f103015b 	.word	0xf103015b
   1d578:	e6510620 	.word	0xe6510620
   1d57c:	e54c4606 	.word	0xe54c4606
   1d580:	031ff1c3 	.word	0x031ff1c3
   1d584:	46199302 	.word	0x46199302
   1d588:	ea4fe7a4 	.word	0xea4fe7a4
   1d58c:	f1031349 	.word	0xf1031349
   1d590:	e6450620 	.word	0xe6450620
   1d594:	26206808 	.word	0x26206808
   1d598:	e641464b 	.word	0xe641464b
   1d59c:	b192594f 	.word	0xb192594f
   1d5a0:	f04f469c 	.word	0xf04f469c
   1d5a4:	46610b00 	.word	0x46610b00
   1d5a8:	ea4b465b 	.word	0xea4b465b
   1d5ac:	f7ee0007 	.word	0xf7ee0007
   1d5b0:	2300fe37 	.word	0x2300fe37
   1d5b4:	32fff04f 	.word	0x32fff04f
   1d5b8:	bf08428b 	.word	0xbf08428b
   1d5bc:	d2004282 	.word	0xd2004282
   1d5c0:	51304610 	.word	0x51304610
   1d5c4:	f04fe6a1 	.word	0xf04fe6a1
   1d5c8:	e7fa30ff 	.word	0xe7fa30ff
   1d5cc:	6b07e9dd 	.word	0x6b07e9dd
   1d5d0:	5a09e9dd 	.word	0x5a09e9dd
   1d5d4:	2d009c0b 	.word	0x2d009c0b
   1d5d8:	a916d05f 	.word	0xa916d05f
   1d5dc:	f7fe4628 	.word	0xf7fe4628
   1d5e0:	2800fc25 	.word	0x2800fc25
   1d5e4:	4606d053 	.word	0x4606d053
   1d5e8:	e5169f1e 	.word	0xe5169f1e
   1d5ec:	9b182501 	.word	0x9b182501
   1d5f0:	591baa1f 	.word	0x591baa1f
   1d5f4:	a819a913 	.word	0xa819a913
   1d5f8:	f8cd930f 	.word	0xf8cd930f
   1d5fc:	e9cd8084 	.word	0xe9cd8084
   1d600:	f7ff551f 	.word	0xf7ff551f
   1d604:	2800fba5 	.word	0x2800fba5
   1d608:	9b06d1b8 	.word	0x9b06d1b8
   1d60c:	f1039a01 	.word	0xf1039a01
   1d610:	3b016300 	.word	0x3b016300
   1d614:	015e4413 	.word	0x015e4413
   1d618:	a8194631 	.word	0xa8194631
   1d61c:	ff1ef7fe 	.word	0xff1ef7fe
   1d620:	d1ab2800 	.word	0xd1ab2800
   1d624:	aa19a910 	.word	0xaa19a910
   1d628:	f7ff4608 	.word	0xf7ff4608
   1d62c:	4603fad1 	.word	0x4603fad1
   1d630:	a91fbb58 	.word	0xa91fbb58
   1d634:	930fa810 	.word	0x930fa810
   1d638:	551fe9cd 	.word	0x551fe9cd
   1d63c:	8084f8cd 	.word	0x8084f8cd
   1d640:	fb2ef7fe 	.word	0xfb2ef7fe
   1d644:	db072800 	.word	0xdb072800
   1d648:	465d9b01 	.word	0x465d9b01
   1d64c:	93013b01 	.word	0x93013b01
   1d650:	f06fe645 	.word	0xf06fe645
   1d654:	e4e0060f 	.word	0xe4e0060f
   1d658:	a819a913 	.word	0xa819a913
   1d65c:	fbe6f7fe 	.word	0xfbe6f7fe
   1d660:	d18b2800 	.word	0xd18b2800
   1d664:	a8194631 	.word	0xa8194631
   1d668:	fef8f7fe 	.word	0xfef8f7fe
   1d66c:	d1852800 	.word	0xd1852800
   1d670:	aa19a910 	.word	0xaa19a910
   1d674:	f7ff4608 	.word	0xf7ff4608
   1d678:	2800fa37 	.word	0x2800fa37
   1d67c:	af7ef47f 	.word	0xaf7ef47f
   1d680:	59139a18 	.word	0x59139a18
   1d684:	51133b01 	.word	0x51133b01
   1d688:	4606e7de 	.word	0x4606e7de
   1d68c:	f8dbe4c5 	.word	0xf8dbe4c5
   1d690:	68223000 	.word	0x68223000
   1d694:	f302fb03 	.word	0xf302fb03
   1d698:	f1ba602b 	.word	0xf1ba602b
   1d69c:	d0050f00 	.word	0xd0050f00
   1d6a0:	a8109902 	.word	0xa8109902
   1d6a4:	ff90f7fe 	.word	0xff90f7fe
   1d6a8:	b1084606 	.word	0xb1084606
   1d6ac:	e4b49f1e 	.word	0xe4b49f1e
   1d6b0:	a9106823 	.word	0xa9106823
   1d6b4:	93104650 	.word	0x93104650
   1d6b8:	fbb8f7fe 	.word	0xfbb8f7fe
   1d6bc:	28004606 	.word	0x28004606
   1d6c0:	2401d1f4 	.word	0x2401d1f4
   1d6c4:	a91fab0f 	.word	0xa91fab0f
   1d6c8:	960f4650 	.word	0x960f4650
   1d6cc:	441fe9cd 	.word	0x441fe9cd
   1d6d0:	f7fe9321 	.word	0xf7fe9321
   1d6d4:	2800fae5 	.word	0x2800fae5
   1d6d8:	f8cad1e8 	.word	0xf8cad1e8
   1d6dc:	e7e54000 	.word	0xe7e54000

0001d6e0 <symbol_000dbba>:
   1d6e0:	41f0e92d 	.word	0x41f0e92d
   1d6e4:	46176853 	.word	0x46176853
   1d6e8:	6894b183 	.word	0x6894b183
   1d6ec:	4580f103 	.word	0x4580f103
   1d6f0:	f8543d01 	.word	0xf8543d01
   1d6f4:	eb042025 	.word	0xeb042025
   1d6f8:	b12a0485 	.word	0xb12a0485
   1d6fc:	f854e11a 	.word	0xf854e11a
   1d700:	2d005d04 	.word	0x2d005d04
   1d704:	8116f040 	.word	0x8116f040
   1d708:	d1f83b01 	.word	0xd1f83b01
   1d70c:	4606460a 	.word	0x4606460a
   1d710:	463b4601 	.word	0x463b4601
   1d714:	f7ff2000 	.word	0xf7ff2000
   1d718:	2800fc21 	.word	0x2800fc21
   1d71c:	f06fd151 	.word	0xf06fd151
   1d720:	68714840 	.word	0x68714840
   1d724:	68b0b191 	.word	0x68b0b191
   1d728:	0308eb01 	.word	0x0308eb01
   1d72c:	c023f850 	.word	0xc023f850
   1d730:	0283eb00 	.word	0x0283eb00
   1d734:	0f00f1bc 	.word	0x0f00f1bc
   1d738:	4614d156 	.word	0x4614d156
   1d73c:	e003460b 	.word	0xe003460b
   1d740:	5d04f854 	.word	0x5d04f854
   1d744:	d14f2d00 	.word	0xd14f2d00
   1d748:	d1f93b01 	.word	0xd1f93b01
   1d74c:	4440f06f 	.word	0x4440f06f
   1d750:	46304639 	.word	0x46304639
   1d754:	ffa8f7fe 	.word	0xffa8f7fe
   1d758:	db422800 	.word	0xdb422800
   1d75c:	683b6835 	.word	0x683b6835
   1d760:	f305fb03 	.word	0xf305fb03
   1d764:	dd2e2b00 	.word	0xdd2e2b00
   1d768:	687a6873 	.word	0x687a6873
   1d76c:	68b1b183 	.word	0x68b1b183
   1d770:	f8511918 	.word	0xf8511918
   1d774:	eb01c020 	.word	0xeb01c020
   1d778:	f1bc0180 	.word	0xf1bc0180
   1d77c:	d0050f00 	.word	0xd0050f00
   1d780:	f851e090 	.word	0xf851e090
   1d784:	28000d04 	.word	0x28000d04
   1d788:	808cf040 	.word	0x808cf040
   1d78c:	d1f83b01 	.word	0xd1f83b01
   1d790:	f8d7b18a 	.word	0xf8d7b18a
   1d794:	1911c008 	.word	0x1911c008
   1d798:	0021f85c 	.word	0x0021f85c
   1d79c:	f0402800 	.word	0xf0402800
   1d7a0:	eb0c80be 	.word	0xeb0c80be
   1d7a4:	e0040181 	.word	0xe0040181
   1d7a8:	0d04f851 	.word	0x0d04f851
   1d7ac:	f0402800 	.word	0xf0402800
   1d7b0:	3a018083 	.word	0x3a018083
   1d7b4:	463ad1f8 	.word	0x463ad1f8
   1d7b8:	46304631 	.word	0x46304631
   1d7bc:	f8d4f7ff 	.word	0xf8d4f7ff
   1d7c0:	e8bdb140 	.word	0xe8bdb140
   1d7c4:	463a81f0 	.word	0x463a81f0
   1d7c8:	46304631 	.word	0x46304631
   1d7cc:	f828f7ff 	.word	0xf828f7ff
   1d7d0:	d1f62800 	.word	0xd1f62800
   1d7d4:	46396035 	.word	0x46396035
   1d7d8:	f7fe4630 	.word	0xf7fe4630
   1d7dc:	2800ff65 	.word	0x2800ff65
   1d7e0:	2000dabc 	.word	0x2000dabc
   1d7e4:	81f0e8bd 	.word	0x81f0e8bd
   1d7e8:	2c006834 	.word	0x2c006834
   1d7ec:	683bdaae 	.word	0x683bdaae
   1d7f0:	f304fb03 	.word	0xf304fb03
   1d7f4:	da232b00 	.word	0xda232b00
   1d7f8:	0f00f1bc 	.word	0x0f00f1bc
   1d7fc:	4613d129 	.word	0x4613d129
   1d800:	f853e002 	.word	0xf853e002
   1d804:	bb222d04 	.word	0xbb222d04
   1d808:	d1fa3901 	.word	0xd1fa3901
   1d80c:	b173687b 	.word	0xb173687b
   1d810:	c008f8d7 	.word	0xc008f8d7
   1d814:	0208eb03 	.word	0x0208eb03
   1d818:	5022f85c 	.word	0x5022f85c
   1d81c:	0282eb0c 	.word	0x0282eb0c
   1d820:	e071b11d 	.word	0xe071b11d
   1d824:	5d04f852 	.word	0x5d04f852
   1d828:	3b01bb05 	.word	0x3b01bb05
   1d82c:	463ad1fa 	.word	0x463ad1fa
   1d830:	46304631 	.word	0x46304631
   1d834:	f898f7ff 	.word	0xf898f7ff
   1d838:	d1c22800 	.word	0xd1c22800
   1d83c:	e7706034 	.word	0xe7706034
   1d840:	4631463a 	.word	0x4631463a
   1d844:	f7fe4630 	.word	0xf7fe4630
   1d848:	2800ffeb 	.word	0x2800ffeb
   1d84c:	e8bdd0f6 	.word	0xe8bdd0f6
   1d850:	687b81f0 	.word	0x687b81f0
   1d854:	d0ea2b00 	.word	0xd0ea2b00
   1d858:	c008f8d7 	.word	0xc008f8d7
   1d85c:	0208eb03 	.word	0x0208eb03
   1d860:	5022f85c 	.word	0x5022f85c
   1d864:	0282eb0c 	.word	0x0282eb0c
   1d868:	d0de2d00 	.word	0xd0de2d00
   1d86c:	d8de4299 	.word	0xd8de4299
   1d870:	2900d34a 	.word	0x2900d34a
   1d874:	eb01d0db 	.word	0xeb01d0db
   1d878:	f8500308 	.word	0xf8500308
   1d87c:	f85c2023 	.word	0xf85c2023
   1d880:	009b5023 	.word	0x009b5023
   1d884:	44184295 	.word	0x44184295
   1d888:	d3d04463 	.word	0xd3d04463
   1d88c:	e03bd907 	.word	0xe03bd907
   1d890:	5d04f850 	.word	0x5d04f850
   1d894:	2d04f853 	.word	0x2d04f853
   1d898:	d8c84295 	.word	0xd8c84295
   1d89c:	3901d334 	.word	0x3901d334
   1d8a0:	e7c4d1f6 	.word	0xe7c4d1f6
   1d8a4:	d0862a00 	.word	0xd0862a00
   1d8a8:	c008f8d7 	.word	0xc008f8d7
   1d8ac:	f85c1911 	.word	0xf85c1911
   1d8b0:	28000021 	.word	0x28000021
   1d8b4:	af75f43f 	.word	0xaf75f43f
   1d8b8:	f63f4293 	.word	0xf63f4293
   1d8bc:	d32eaf7c 	.word	0xd32eaf7c
   1d8c0:	f43f2b00 	.word	0xf43f2b00
   1d8c4:	68b1af78 	.word	0x68b1af78
   1d8c8:	f851191a 	.word	0xf851191a
   1d8cc:	f85c0022 	.word	0xf85c0022
   1d8d0:	0092e022 	.word	0x0092e022
   1d8d4:	44114586 	.word	0x44114586
   1d8d8:	f4ff4462 	.word	0xf4ff4462
   1d8dc:	d908af6c 	.word	0xd908af6c
   1d8e0:	f851e01d 	.word	0xf851e01d
   1d8e4:	f852cd04 	.word	0xf852cd04
   1d8e8:	45840d04 	.word	0x45840d04
   1d8ec:	af63f63f 	.word	0xaf63f63f
   1d8f0:	3b01d315 	.word	0x3b01d315
   1d8f4:	463ad1f5 	.word	0x463ad1f5
   1d8f8:	46304631 	.word	0x46304631
   1d8fc:	f834f7ff 	.word	0xf834f7ff
   1d900:	f47f2800 	.word	0xf47f2800
   1d904:	e765af5e 	.word	0xe765af5e
   1d908:	46394632 	.word	0x46394632
   1d90c:	f7ff4630 	.word	0xf7ff4630
   1d910:	2800f82b 	.word	0x2800f82b
   1d914:	af55f47f 	.word	0xaf55f47f
   1d918:	60344264 	.word	0x60344264
   1d91c:	4632e701 	.word	0x4632e701
   1d920:	46304639 	.word	0x46304639
   1d924:	f820f7ff 	.word	0xf820f7ff
   1d928:	f47f2800 	.word	0xf47f2800
   1d92c:	426daf4a 	.word	0x426daf4a
   1d930:	e70d6035 	.word	0xe70d6035
   1d934:	2b00683b 	.word	0x2b00683b
   1d938:	aee8f6bf 	.word	0xaee8f6bf
   1d93c:	0009f06f 	.word	0x0009f06f
   1d940:	bf00e73f 	.word	0xbf00e73f

0001d944 <symbol_0005f38>:
   1d944:	41f0e92d 	.word	0x41f0e92d
   1d948:	2501460f 	.word	0x2501460f
   1d94c:	68bb2100 	.word	0x68bb2100
   1d950:	4604b086 	.word	0x4604b086
   1d954:	95004616 	.word	0x95004616
   1d958:	e9cd9503 	.word	0xe9cd9503
   1d95c:	e9cd1101 	.word	0xe9cd1101
   1d960:	2b001104 	.word	0x2b001104
   1d964:	6879d040 	.word	0x6879d040
   1d968:	d0111e4a 	.word	0xd0111e4a
   1d96c:	0022f853 	.word	0x0022f853
   1d970:	f0402800 	.word	0xf0402800
   1d974:	f10180c4 	.word	0xf10180c4
   1d978:	39014180 	.word	0x39014180
   1d97c:	0381eb03 	.word	0x0381eb03
   1d980:	f853e004 	.word	0xf853e004
   1d984:	29001d04 	.word	0x29001d04
   1d988:	80b9f040 	.word	0x80b9f040
   1d98c:	d1f83a01 	.word	0xd1f83a01
   1d990:	683b2501 	.word	0x683b2501
   1d994:	21049300 	.word	0x21049300
   1d998:	f0014628 	.word	0xf0014628
   1d99c:	4680fe17 	.word	0x4680fe17
   1d9a0:	f0002800 	.word	0xf0002800
   1d9a4:	9902813c 	.word	0x9902813c
   1d9a8:	9a01b189 	.word	0x9a01b189
   1d9ac:	f0060092 	.word	0xf0060092
   1d9b0:	e9ddff87 	.word	0xe9ddff87
   1d9b4:	1e532001 	.word	0x1e532001
   1d9b8:	2200b13a 	.word	0x2200b13a
   1d9bc:	1c593b01 	.word	0x1c593b01
   1d9c0:	f1006002 	.word	0xf1006002
   1d9c4:	d1f90004 	.word	0xd1f90004
   1d9c8:	f0019802 	.word	0xf0019802
   1d9cc:	e9cdfe13 	.word	0xe9cdfe13
   1d9d0:	00ad5801 	.word	0x00ad5801
   1d9d4:	2100462a 	.word	0x2100462a
   1d9d8:	f0064640 	.word	0xf0064640
   1d9dc:	462aff9e 	.word	0x462aff9e
   1d9e0:	980268b9 	.word	0x980268b9
   1d9e4:	ff6cf006 	.word	0xff6cf006
   1d9e8:	a8034631 	.word	0xa8034631
   1d9ec:	fa1ef7fe 	.word	0xfa1ef7fe
   1d9f0:	28004607 	.word	0x28004607
   1d9f4:	9e01d15d 	.word	0x9e01d15d
   1d9f8:	f0002e00 	.word	0xf0002e00
   1d9fc:	4601810e 	.word	0x4601810e
   1da00:	3d049d02 	.word	0x3d049d02
   1da04:	f8552200 	.word	0xf8552200
   1da08:	e0040f04 	.word	0xe0040f04
   1da0c:	f1012a20 	.word	0xf1012a20
   1da10:	f0000101 	.word	0xf0000101
   1da14:	fa208081 	.word	0xfa208081
   1da18:	f013f302 	.word	0xf013f302
   1da1c:	f1020301 	.word	0xf1020301
   1da20:	d0f30201 	.word	0xd0f30201
   1da24:	b1b59d04 	.word	0xb1b59d04
   1da28:	46842000 	.word	0x46842000
   1da2c:	3f049f05 	.word	0x3f049f05
   1da30:	f8572200 	.word	0xf8572200
   1da34:	e0036f04 	.word	0xe0036f04
   1da38:	f1002a20 	.word	0xf1002a20
   1da3c:	d0710001 	.word	0xd0710001
   1da40:	f302fa26 	.word	0xf302fa26
   1da44:	0301f013 	.word	0x0301f013
   1da48:	0201f102 	.word	0x0201f102
   1da4c:	4281d0f4 	.word	0x4281d0f4
   1da50:	4601bf28 	.word	0x4601bf28
   1da54:	4668460d 	.word	0x4668460d
   1da58:	f7fe4629 	.word	0xf7fe4629
   1da5c:	4607fdb5 	.word	0x4607fdb5
   1da60:	4629bb38 	.word	0x4629bb38
   1da64:	f7fea803 	.word	0xf7fea803
   1da68:	4607fdaf 	.word	0x4607fdaf
   1da6c:	2301bb08 	.word	0x2301bb08
   1da70:	4640f06f 	.word	0x4640f06f
   1da74:	93009303 	.word	0x93009303
   1da78:	b17f9f01 	.word	0xb17f9f01
   1da7c:	19ba9802 	.word	0x19ba9802
   1da80:	3022f850 	.word	0x3022f850
   1da84:	0282eb00 	.word	0x0282eb00
   1da88:	d1512b00 	.word	0xd1512b00
   1da8c:	e003463b 	.word	0xe003463b
   1da90:	1d04f852 	.word	0x1d04f852
   1da94:	d14b2900 	.word	0xd14b2900
   1da98:	d1f93b01 	.word	0xd1f93b01
   1da9c:	a8034629 	.word	0xa8034629
   1daa0:	fcdcf7fe 	.word	0xfcdcf7fe
   1daa4:	b9204607 	.word	0xb9204607
   1daa8:	4620a903 	.word	0x4620a903
   1daac:	f9bef7fe 	.word	0xf9bef7fe
   1dab0:	98024607 	.word	0x98024607
   1dab4:	9a01b160 	.word	0x9a01b160
   1dab8:	b13a1e53 	.word	0xb13a1e53
   1dabc:	3b012200 	.word	0x3b012200
   1dac0:	60021c5c 	.word	0x60021c5c
   1dac4:	0004f100 	.word	0x0004f100
   1dac8:	9802d1f9 	.word	0x9802d1f9
   1dacc:	fd92f001 	.word	0xfd92f001
   1dad0:	23012200 	.word	0x23012200
   1dad4:	e9cd9805 	.word	0xe9cd9805
   1dad8:	92023200 	.word	0x92023200
   1dadc:	9904b158 	.word	0x9904b158
   1dae0:	b1311e4b 	.word	0xb1311e4b
   1dae4:	1c593b01 	.word	0x1c593b01
   1dae8:	f1006002 	.word	0xf1006002
   1daec:	d1f90004 	.word	0xd1f90004
   1daf0:	f0019805 	.word	0xf0019805
   1daf4:	4638fd7f 	.word	0x4638fd7f
   1daf8:	e8bdb006 	.word	0xe8bdb006
   1dafc:	f24281f0 	.word	0xf24281f0
   1db00:	68397310 	.word	0x68397310
   1db04:	429d1c55 	.word	0x429d1c55
   1db08:	f2009100 	.word	0xf2009100
   1db0c:	2d008083 	.word	0x2d008083
   1db10:	af41f47f 	.word	0xaf41f47f
   1db14:	e75d46a8 	.word	0xe75d46a8
   1db18:	42be3701 	.word	0x42be3701
   1db1c:	af72f47f 	.word	0xaf72f47f
   1db20:	e77f4619 	.word	0xe77f4619
   1db24:	0c01f10c 	.word	0x0c01f10c
   1db28:	d18145ac 	.word	0xd18145ac
   1db2c:	e792461d 	.word	0xe792461d
   1db30:	2b009b00 	.word	0x2b009b00
   1db34:	2100d0b2 	.word	0x2100d0b2
   1db38:	f1a0468e 	.word	0xf1a0468e
   1db3c:	22000c04 	.word	0x22000c04
   1db40:	0f04f85c 	.word	0x0f04f85c
   1db44:	2a20e003 	.word	0x2a20e003
   1db48:	0101f101 	.word	0x0101f101
   1db4c:	fa20d042 	.word	0xfa20d042
   1db50:	f013f302 	.word	0xf013f302
   1db54:	f1020301 	.word	0xf1020301
   1db58:	d0f40201 	.word	0xd0f40201
   1db5c:	f7fe4668 	.word	0xf7fe4668
   1db60:	4607fd33 	.word	0x4607fd33
   1db64:	d1a42800 	.word	0xd1a42800
   1db68:	c010f8dd 	.word	0xc010f8dd
   1db6c:	0f00f1bc 	.word	0x0f00f1bc
   1db70:	4601d04e 	.word	0x4601d04e
   1db74:	9f054686 	.word	0x9f054686
   1db78:	22003f04 	.word	0x22003f04
   1db7c:	0f04f857 	.word	0x0f04f857
   1db80:	2a20e003 	.word	0x2a20e003
   1db84:	0101f101 	.word	0x0101f101
   1db88:	fa20d02a 	.word	0xfa20d02a
   1db8c:	f013f302 	.word	0xf013f302
   1db90:	f1020301 	.word	0xf1020301
   1db94:	d0f40201 	.word	0xd0f40201
   1db98:	f7fea803 	.word	0xf7fea803
   1db9c:	4607fd15 	.word	0x4607fd15
   1dba0:	d1862800 	.word	0xd1862800
   1dba4:	4668a903 	.word	0x4668a903
   1dba8:	fd7ef7fe 	.word	0xfd7ef7fe
   1dbac:	db1d2800 	.word	0xdb1d2800
   1dbb0:	4669aa03 	.word	0x4669aa03
   1dbb4:	f7fe4668 	.word	0xf7fe4668
   1dbb8:	4607fed7 	.word	0x4607fed7
   1dbbc:	f47f2800 	.word	0xf47f2800
   1dbc0:	2101af78 	.word	0x2101af78
   1dbc4:	f7fe4668 	.word	0xf7fe4668
   1dbc8:	4607fcff 	.word	0x4607fcff
   1dbcc:	f43f2800 	.word	0xf43f2800
   1dbd0:	e76eaf53 	.word	0xe76eaf53
   1dbd4:	0e01f10e 	.word	0x0e01f10e
   1dbd8:	d1b045be 	.word	0xd1b045be
   1dbdc:	e7bd4619 	.word	0xe7bd4619
   1dbe0:	0e01f10e 	.word	0x0e01f10e
   1dbe4:	d1c845e6 	.word	0xd1c845e6
   1dbe8:	e7d54619 	.word	0xe7d54619
   1dbec:	466aa903 	.word	0x466aa903
   1dbf0:	f7fe4608 	.word	0xf7fe4608
   1dbf4:	4607feb9 	.word	0x4607feb9
   1dbf8:	f47f2800 	.word	0xf47f2800
   1dbfc:	2101af5a 	.word	0x2101af5a
   1dc00:	f7fea803 	.word	0xf7fea803
   1dc04:	4607fce1 	.word	0x4607fce1
   1dc08:	f43f2800 	.word	0xf43f2800
   1dc0c:	e750af35 	.word	0xe750af35
   1dc10:	e7c14661 	.word	0xe7c14661
   1dc14:	070ff06f 	.word	0x070ff06f
   1dc18:	4631e75a 	.word	0x4631e75a
   1dc1c:	9802e702 	.word	0x9802e702
   1dc20:	070ff06f 	.word	0x070ff06f
   1dc24:	bf00e746 	.word	0xbf00e746

0001dc28 <symbol_000644e>:
   1dc28:	43f0e92d 	.word	0x43f0e92d
   1dc2c:	6f80f5b1 	.word	0x6f80f5b1
   1dc30:	4d04f2ad 	.word	0x4d04f2ad
   1dc34:	80a5f200 	.word	0x80a5f200
   1dc38:	4617460d 	.word	0x4617460d
   1dc3c:	46694606 	.word	0x46694606
   1dc40:	462a4618 	.word	0x462a4618
   1dc44:	460747b8 	.word	0x460747b8
   1dc48:	4638b120 	.word	0x4638b120
   1dc4c:	4d04f20d 	.word	0x4d04f20d
   1dc50:	83f0e8bd 	.word	0x83f0e8bd
   1dc54:	f0002d00 	.word	0xf0002d00
   1dc58:	f89d808a 	.word	0xf89d808a
   1dc5c:	2b003000 	.word	0x2b003000
   1dc60:	8089f040 	.word	0x8089f040
   1dc64:	4604466b 	.word	0x4604466b
   1dc68:	f813e003 	.word	0xf813e003
   1dc6c:	2a002f01 	.word	0x2a002f01
   1dc70:	3401d14d 	.word	0x3401d14d
   1dc74:	d1f842a5 	.word	0xd1f842a5
   1dc78:	8004f8d6 	.word	0x8004f8d6
   1dc7c:	0f00f1b8 	.word	0x0f00f1b8
   1dc80:	2104d170 	.word	0x2104d170
   1dc84:	f0012001 	.word	0xf0012001
   1dc88:	4681fca1 	.word	0x4681fca1
   1dc8c:	d0752800 	.word	0xd0752800
   1dc90:	b18968b1 	.word	0xb18968b1
   1dc94:	00926872 	.word	0x00926872
   1dc98:	fe12f006 	.word	0xfe12f006
   1dc9c:	2001e9d6 	.word	0x2001e9d6
   1dca0:	b13a1e53 	.word	0xb13a1e53
   1dca4:	3b014642 	.word	0x3b014642
   1dca8:	60021c59 	.word	0x60021c59
   1dcac:	0004f100 	.word	0x0004f100
   1dcb0:	68b0d1f9 	.word	0x68b0d1f9
   1dcb4:	fc9ef001 	.word	0xfc9ef001
   1dcb8:	22042301 	.word	0x22042301
   1dcbc:	3901e9c6 	.word	0x3901e9c6
   1dcc0:	46482100 	.word	0x46482100
   1dcc4:	fe29f006 	.word	0xfe29f006
   1dcc8:	22012300 	.word	0x22012300
   1dccc:	42a568b1 	.word	0x42a568b1
   1dcd0:	6032600b 	.word	0x6032600b
   1dcd4:	eb0dd9b9 	.word	0xeb0dd9b9
   1dcd8:	1b2c0205 	.word	0x1b2c0205
   1dcdc:	f02368b1 	.word	0xf02368b1
   1dce0:	ea4f0803 	.word	0xea4f0803
   1dce4:	f8120ec3 	.word	0xf8120ec3
   1dce8:	f851cd01 	.word	0xf851cd01
   1dcec:	f00e0008 	.word	0xf00e0008
   1dcf0:	fa0c0e18 	.word	0xfa0c0e18
   1dcf4:	3301fc0e 	.word	0x3301fc0e
   1dcf8:	000cea40 	.word	0x000cea40
   1dcfc:	f84142a3 	.word	0xf84142a3
   1dd00:	d1eb0008 	.word	0xd1eb0008
   1dd04:	f20d4638 	.word	0xf20d4638
   1dd08:	e8bd4d04 	.word	0xe8bd4d04
   1dd0c:	1b2a83f0 	.word	0x1b2a83f0
   1dd10:	0803f012 	.word	0x0803f012
   1dd14:	f04fbf18 	.word	0xf04fbf18
   1dd18:	f2420801 	.word	0xf2420801
   1dd1c:	eb087310 	.word	0xeb087310
   1dd20:	45980892 	.word	0x45980892
   1dd24:	6873d82a 	.word	0x6873d82a
   1dd28:	d92d4598 	.word	0xd92d4598
   1dd2c:	46402104 	.word	0x46402104
   1dd30:	fc4cf001 	.word	0xfc4cf001
   1dd34:	b3084681 	.word	0xb3084681
   1dd38:	b18968b1 	.word	0xb18968b1
   1dd3c:	00926872 	.word	0x00926872
   1dd40:	fdbef006 	.word	0xfdbef006
   1dd44:	2001e9d6 	.word	0x2001e9d6
   1dd48:	b13a1e53 	.word	0xb13a1e53
   1dd4c:	3b012200 	.word	0x3b012200
   1dd50:	60021c59 	.word	0x60021c59
   1dd54:	0004f100 	.word	0x0004f100
   1dd58:	68b0d1f9 	.word	0x68b0d1f9
   1dd5c:	fc4af001 	.word	0xfc4af001
   1dd60:	8901e9c6 	.word	0x8901e9c6
   1dd64:	0288ea4f 	.word	0x0288ea4f
   1dd68:	9008f8d6 	.word	0x9008f8d6
   1dd6c:	f8d6e7a8 	.word	0xf8d6e7a8
   1dd70:	462c8004 	.word	0x462c8004
   1dd74:	462ae782 	.word	0x462ae782
   1dd78:	e7c94604 	.word	0xe7c94604
   1dd7c:	070ff06f 	.word	0x070ff06f
   1dd80:	f06fe763 	.word	0xf06fe763
   1dd84:	e7600703 	.word	0xe7600703
   1dd88:	e7774698 	.word	0xe7774698

0001dd8c <symbol_0004482>:
   1dd8c:	43f0e92d 	.word	0x43f0e92d
   1dd90:	b0a16853 	.word	0xb0a16853
   1dd94:	6894b17b 	.word	0x6894b17b
   1dd98:	4c80f103 	.word	0x4c80f103
   1dd9c:	3cfff10c 	.word	0x3cfff10c
   1dda0:	502cf854 	.word	0x502cf854
   1dda4:	048ceb04 	.word	0x048ceb04
   1dda8:	e00ab11d 	.word	0xe00ab11d
   1ddac:	5d04f854 	.word	0x5d04f854
   1ddb0:	3b01b93d 	.word	0x3b01b93d
   1ddb4:	f06fd1fa 	.word	0xf06fd1fa
   1ddb8:	46200403 	.word	0x46200403
   1ddbc:	e8bdb021 	.word	0xe8bdb021
   1ddc0:	681383f0 	.word	0x681383f0
   1ddc4:	ddf62b00 	.word	0xddf62b00
   1ddc8:	23002401 	.word	0x23002401
   1ddcc:	a8024606 	.word	0xa8024606
   1ddd0:	94089405 	.word	0x94089405
   1ddd4:	940e940b 	.word	0x940e940b
   1ddd8:	94119402 	.word	0x94119402
   1dddc:	94179414 	.word	0x94179414
   1dde0:	460f941a 	.word	0x460f941a
   1dde4:	e9cd4615 	.word	0xe9cd4615
   1dde8:	e9cd3306 	.word	0xe9cd3306
   1ddec:	e9cd3309 	.word	0xe9cd3309
   1ddf0:	e9cd330c 	.word	0xe9cd330c
   1ddf4:	e9cd330f 	.word	0xe9cd330f
   1ddf8:	e9cd3303 	.word	0xe9cd3303
   1ddfc:	e9cd3312 	.word	0xe9cd3312
   1de00:	e9cd3315 	.word	0xe9cd3315
   1de04:	e9cd3318 	.word	0xe9cd3318
   1de08:	f7ff331b 	.word	0xf7ff331b
   1de0c:	4604fd9b 	.word	0x4604fd9b
   1de10:	9b03b9a0 	.word	0x9b03b9a0
   1de14:	9904b183 	.word	0x9904b183
   1de18:	4480f103 	.word	0x4480f103
   1de1c:	f8513c01 	.word	0xf8513c01
   1de20:	eb012024 	.word	0xeb012024
   1de24:	b12a0484 	.word	0xb12a0484
   1de28:	f854e0b5 	.word	0xf854e0b5
   1de2c:	2a002d04 	.word	0x2a002d04
   1de30:	80b1f040 	.word	0x80b1f040
   1de34:	d1f83b01 	.word	0xd1f83b01
   1de38:	040df06f 	.word	0x040df06f
   1de3c:	b1609807 	.word	0xb1609807
   1de40:	1e539a06 	.word	0x1e539a06
   1de44:	2200b13a 	.word	0x2200b13a
   1de48:	1c593b01 	.word	0x1c593b01
   1de4c:	f1006002 	.word	0xf1006002
   1de50:	d1f90004 	.word	0xd1f90004
   1de54:	f0019807 	.word	0xf0019807
   1de58:	2200fbcd 	.word	0x2200fbcd
   1de5c:	980a2301 	.word	0x980a2301
   1de60:	3205e9cd 	.word	0x3205e9cd
   1de64:	b1589207 	.word	0xb1589207
   1de68:	1e4b9909 	.word	0x1e4b9909
   1de6c:	3b01b131 	.word	0x3b01b131
   1de70:	60021c5f 	.word	0x60021c5f
   1de74:	0004f100 	.word	0x0004f100
   1de78:	980ad1f9 	.word	0x980ad1f9
   1de7c:	fbbaf001 	.word	0xfbbaf001
   1de80:	23012200 	.word	0x23012200
   1de84:	e9cd980d 	.word	0xe9cd980d
   1de88:	920a3208 	.word	0x920a3208
   1de8c:	990cb158 	.word	0x990cb158
   1de90:	b1311e4b 	.word	0xb1311e4b
   1de94:	1c5e3b01 	.word	0x1c5e3b01
   1de98:	f1006002 	.word	0xf1006002
   1de9c:	d1f90004 	.word	0xd1f90004
   1dea0:	f001980d 	.word	0xf001980d
   1dea4:	2200fba7 	.word	0x2200fba7
   1dea8:	98102301 	.word	0x98102301
   1deac:	320be9cd 	.word	0x320be9cd
   1deb0:	b158920d 	.word	0xb158920d
   1deb4:	1e4b990f 	.word	0x1e4b990f
   1deb8:	3b01b131 	.word	0x3b01b131
   1debc:	60021c5d 	.word	0x60021c5d
   1dec0:	0004f100 	.word	0x0004f100
   1dec4:	9810d1f9 	.word	0x9810d1f9
   1dec8:	fb94f001 	.word	0xfb94f001
   1decc:	23012200 	.word	0x23012200
   1ded0:	e9cd9804 	.word	0xe9cd9804
   1ded4:	9210320e 	.word	0x9210320e
   1ded8:	9903b158 	.word	0x9903b158
   1dedc:	b1311e4b 	.word	0xb1311e4b
   1dee0:	1c593b01 	.word	0x1c593b01
   1dee4:	f1006002 	.word	0xf1006002
   1dee8:	d1f90004 	.word	0xd1f90004
   1deec:	f0019804 	.word	0xf0019804
   1def0:	2200fb81 	.word	0x2200fb81
   1def4:	98132301 	.word	0x98132301
   1def8:	3202e9cd 	.word	0x3202e9cd
   1defc:	b1589204 	.word	0xb1589204
   1df00:	1e4b9912 	.word	0x1e4b9912
   1df04:	3b01b131 	.word	0x3b01b131
   1df08:	60021c5f 	.word	0x60021c5f
   1df0c:	0004f100 	.word	0x0004f100
   1df10:	9813d1f9 	.word	0x9813d1f9
   1df14:	fb6ef001 	.word	0xfb6ef001
   1df18:	23012200 	.word	0x23012200
   1df1c:	e9cd9816 	.word	0xe9cd9816
   1df20:	92133211 	.word	0x92133211
   1df24:	9915b158 	.word	0x9915b158
   1df28:	b1311e4b 	.word	0xb1311e4b
   1df2c:	1c5e3b01 	.word	0x1c5e3b01
   1df30:	f1006002 	.word	0xf1006002
   1df34:	d1f90004 	.word	0xd1f90004
   1df38:	f0019816 	.word	0xf0019816
   1df3c:	2200fb5b 	.word	0x2200fb5b
   1df40:	98192301 	.word	0x98192301
   1df44:	3214e9cd 	.word	0x3214e9cd
   1df48:	b1589216 	.word	0xb1589216
   1df4c:	1e4b9918 	.word	0x1e4b9918
   1df50:	3b01b131 	.word	0x3b01b131
   1df54:	60021c5d 	.word	0x60021c5d
   1df58:	0004f100 	.word	0x0004f100
   1df5c:	9819d1f9 	.word	0x9819d1f9
   1df60:	fb48f001 	.word	0xfb48f001
   1df64:	23012200 	.word	0x23012200
   1df68:	e9cd981c 	.word	0xe9cd981c
   1df6c:	92193217 	.word	0x92193217
   1df70:	f43f2800 	.word	0xf43f2800
   1df74:	991baf22 	.word	0x991baf22
   1df78:	b1311e4b 	.word	0xb1311e4b
   1df7c:	1c593b01 	.word	0x1c593b01
   1df80:	f1006002 	.word	0xf1006002
   1df84:	d1f90004 	.word	0xd1f90004
   1df88:	f001981c 	.word	0xf001981c
   1df8c:	4620fb33 	.word	0x4620fb33
   1df90:	e8bdb021 	.word	0xe8bdb021
   1df94:	2b0183f0 	.word	0x2b0183f0
   1df98:	d96b9a02 	.word	0xd96b9a02
   1df9c:	f47f2a00 	.word	0xf47f2a00
   1dfa0:	4639af4b 	.word	0x4639af4b
   1dfa4:	462aa805 	.word	0x462aa805
   1dfa8:	fb9af7ff 	.word	0xfb9af7ff
   1dfac:	28004604 	.word	0x28004604
   1dfb0:	af44f47f 	.word	0xaf44f47f
   1dfb4:	a905a808 	.word	0xa905a808
   1dfb8:	ff38f7fd 	.word	0xff38f7fd
   1dfbc:	28004604 	.word	0x28004604
   1dfc0:	af3cf47f 	.word	0xaf3cf47f
   1dfc4:	4629a811 	.word	0x4629a811
   1dfc8:	ff30f7fd 	.word	0xff30f7fd
   1dfcc:	28004604 	.word	0x28004604
   1dfd0:	af34f47f 	.word	0xaf34f47f
   1dfd4:	4629a814 	.word	0x4629a814
   1dfd8:	ff28f7fd 	.word	0xff28f7fd
   1dfdc:	28004604 	.word	0x28004604
   1dfe0:	af2cf47f 	.word	0xaf2cf47f
   1dfe4:	2101a80b 	.word	0x2101a80b
   1dfe8:	f8acf7fe 	.word	0xf8acf7fe
   1dfec:	28004604 	.word	0x28004604
   1dff0:	af24f47f 	.word	0xaf24f47f
   1dff4:	a80e4601 	.word	0xa80e4601
   1dff8:	f8a4f7fe 	.word	0xf8a4f7fe
   1dffc:	28004604 	.word	0x28004604
   1e000:	af1cf47f 	.word	0xaf1cf47f
   1e004:	a8174601 	.word	0xa8174601
   1e008:	f89cf7fe 	.word	0xf89cf7fe
   1e00c:	28004604 	.word	0x28004604
   1e010:	af14f47f 	.word	0xaf14f47f
   1e014:	2101a81a 	.word	0x2101a81a
   1e018:	f894f7fe 	.word	0xf894f7fe
   1e01c:	28004604 	.word	0x28004604
   1e020:	af0cf47f 	.word	0xaf0cf47f
   1e024:	f04f4681 	.word	0xf04f4681
   1e028:	af010801 	.word	0xaf010801
   1e02c:	681b9b0a 	.word	0x681b9b0a
   1e030:	d42c07da 	.word	0xd42c07da
   1e034:	a8082101 	.word	0xa8082101
   1e038:	fac6f7fe 	.word	0xfac6f7fe
   1e03c:	28004604 	.word	0x28004604
   1e040:	aefcf47f 	.word	0xaefcf47f
   1e044:	681b9b0d 	.word	0x681b9b0d
   1e048:	d44407d8 	.word	0xd44407d8
   1e04c:	681b9b10 	.word	0x681b9b10
   1e050:	d44007d9 	.word	0xd44007d9
   1e054:	a80b2101 	.word	0xa80b2101
   1e058:	fab6f7fe 	.word	0xfab6f7fe
   1e05c:	28004604 	.word	0x28004604
   1e060:	aeecf47f 	.word	0xaeecf47f
   1e064:	a80e2101 	.word	0xa80e2101
   1e068:	faaef7fe 	.word	0xfaaef7fe
   1e06c:	28004604 	.word	0x28004604
   1e070:	e6e3d0dc 	.word	0xe6e3d0dc
   1e074:	f6ff2a00 	.word	0xf6ff2a00
   1e078:	680baedf 	.word	0x680baedf
   1e07c:	d88d2b01 	.word	0xd88d2b01
   1e080:	d18e2b00 	.word	0xd18e2b00
   1e084:	2a004252 	.word	0x2a004252
   1e088:	aed6f47f 	.word	0xaed6f47f
   1e08c:	9b16e789 	.word	0x9b16e789
   1e090:	07d8681b 	.word	0x07d8681b
   1e094:	2101d443 	.word	0x2101d443
   1e098:	f7fea814 	.word	0xf7fea814
   1e09c:	4604fa95 	.word	0x4604fa95
   1e0a0:	f47f2800 	.word	0xf47f2800
   1e0a4:	9b19aecb 	.word	0x9b19aecb
   1e0a8:	07db681b 	.word	0x07db681b
   1e0ac:	9b1cd425 	.word	0x9b1cd425
   1e0b0:	07dc681b 	.word	0x07dc681b
   1e0b4:	2101d421 	.word	0x2101d421
   1e0b8:	f7fea817 	.word	0xf7fea817
   1e0bc:	4604fa85 	.word	0x4604fa85
   1e0c0:	f47f2800 	.word	0xf47f2800
   1e0c4:	2101aebb 	.word	0x2101aebb
   1e0c8:	f7fea81a 	.word	0xf7fea81a
   1e0cc:	4604fa7d 	.word	0x4604fa7d
   1e0d0:	d0dc2800 	.word	0xd0dc2800
   1e0d4:	a90be6b2 	.word	0xa90be6b2
   1e0d8:	4608aa11 	.word	0x4608aa11
   1e0dc:	fd04f7fe 	.word	0xfd04f7fe
   1e0e0:	28004604 	.word	0x28004604
   1e0e4:	aeaaf47f 	.word	0xaeaaf47f
   1e0e8:	aa05a90e 	.word	0xaa05a90e
   1e0ec:	f7fe4608 	.word	0xf7fe4608
   1e0f0:	4604fd6f 	.word	0x4604fd6f
   1e0f4:	d0ad2800 	.word	0xd0ad2800
   1e0f8:	a917e6a0 	.word	0xa917e6a0
   1e0fc:	4608aa11 	.word	0x4608aa11
   1e100:	fcf2f7fe 	.word	0xfcf2f7fe
   1e104:	28004604 	.word	0x28004604
   1e108:	ae98f47f 	.word	0xae98f47f
   1e10c:	aa05a91a 	.word	0xaa05a91a
   1e110:	f7fe4608 	.word	0xf7fe4608
   1e114:	4604fd5d 	.word	0x4604fd5d
   1e118:	d0cc2800 	.word	0xd0cc2800
   1e11c:	a914e68e 	.word	0xa914e68e
   1e120:	f7fea808 	.word	0xf7fea808
   1e124:	2800fac1 	.word	0x2800fac1
   1e128:	a908db3d 	.word	0xa908db3d
   1e12c:	4608aa14 	.word	0x4608aa14
   1e130:	fd4ef7fe 	.word	0xfd4ef7fe
   1e134:	28004604 	.word	0x28004604
   1e138:	ae80f47f 	.word	0xae80f47f
   1e13c:	aa17a90b 	.word	0xaa17a90b
   1e140:	f7fe4608 	.word	0xf7fe4608
   1e144:	4604fd45 	.word	0x4604fd45
   1e148:	f47f2800 	.word	0xf47f2800
   1e14c:	a90eae77 	.word	0xa90eae77
   1e150:	4608aa1a 	.word	0x4608aa1a
   1e154:	fd3cf7fe 	.word	0xfd3cf7fe
   1e158:	28004604 	.word	0x28004604
   1e15c:	ae6ef47f 	.word	0xae6ef47f
   1e160:	a808a91d 	.word	0xa808a91d
   1e164:	9004f8cd 	.word	0x9004f8cd
   1e168:	881de9cd 	.word	0x881de9cd
   1e16c:	f7fd971f 	.word	0xf7fd971f
   1e170:	2800fd97 	.word	0x2800fd97
   1e174:	af5af47f 	.word	0xaf5af47f
   1e178:	f04f4680 	.word	0xf04f4680
   1e17c:	a91d0901 	.word	0xa91d0901
   1e180:	f8cda817 	.word	0xf8cda817
   1e184:	e9cd8004 	.word	0xe9cd8004
   1e188:	971f991d 	.word	0x971f991d
   1e18c:	fd88f7fd 	.word	0xfd88f7fd
   1e190:	da232800 	.word	0xda232800
   1e194:	462aa917 	.word	0x462aa917
   1e198:	f7fe4608 	.word	0xf7fe4608
   1e19c:	4604fca5 	.word	0x4604fca5
   1e1a0:	d0ec2800 	.word	0xd0ec2800
   1e1a4:	a914e64a 	.word	0xa914e64a
   1e1a8:	4608aa08 	.word	0x4608aa08
   1e1ac:	fd10f7fe 	.word	0xfd10f7fe
   1e1b0:	28004604 	.word	0x28004604
   1e1b4:	ae42f47f 	.word	0xae42f47f
   1e1b8:	aa0ba917 	.word	0xaa0ba917
   1e1bc:	f7fe4608 	.word	0xf7fe4608
   1e1c0:	4604fd07 	.word	0x4604fd07
   1e1c4:	f47f2800 	.word	0xf47f2800
   1e1c8:	a91aae39 	.word	0xa91aae39
   1e1cc:	4608aa0e 	.word	0x4608aa0e
   1e1d0:	fcfef7fe 	.word	0xfcfef7fe
   1e1d4:	28004604 	.word	0x28004604
   1e1d8:	e62fd0c2 	.word	0xe62fd0c2
   1e1dc:	a8174629 	.word	0xa8174629
   1e1e0:	fa62f7fe 	.word	0xfa62f7fe
   1e1e4:	db082800 	.word	0xdb082800
   1e1e8:	462aa917 	.word	0x462aa917
   1e1ec:	f7fe4608 	.word	0xf7fe4608
   1e1f0:	4604fcef 	.word	0x4604fcef
   1e1f4:	d0f12800 	.word	0xd0f12800
   1e1f8:	a917e620 	.word	0xa917e620
   1e1fc:	f7fd4630 	.word	0xf7fd4630
   1e200:	4604fe15 	.word	0x4604fe15
   1e204:	bf00e61a 	.word	0xbf00e61a

0001e208 <entropy_callback>:
   1e208:	4c0ab538 	.word	0x4c0ab538
   1e20c:	78254b0a 	.word	0x78254b0a
   1e210:	bf282a07 	.word	0xbf282a07
   1e214:	46082207 	.word	0x46082207
   1e218:	1145eb03 	.word	0x1145eb03
   1e21c:	fb50f006 	.word	0xfb50f006
   1e220:	20007823 	.word	0x20007823
   1e224:	b2db3301 	.word	0xb2db3301
   1e228:	bf082b07 	.word	0xbf082b07
   1e22c:	70232300 	.word	0x70232300
   1e230:	bf00bd38 	.word	0xbf00bd38
   1e234:	20027408 	.word	0x20027408
   1e238:	00026c88 	.word	0x00026c88

0001e23c <es256_key_generate>:
   1e23c:	b0e5b5f0 	.word	0xb0e5b5f0
   1e240:	71a8f89d 	.word	0x71a8f89d
   1e244:	b152b158 	.word	0xb152b158
   1e248:	291fb14b 	.word	0x291fb14b
   1e24c:	6819d907 	.word	0x6819d907
   1e250:	d904293f 	.word	0xd904293f
   1e254:	2955b13f 	.word	0x2955b13f
   1e258:	240cd805 	.word	0x240cd805
   1e25c:	2416e000 	.word	0x2416e000
   1e260:	b0654620 	.word	0xb0654620
   1e264:	461dbdf0 	.word	0x461dbdf0
   1e268:	21002304 	.word	0x21002304
   1e26c:	46164604 	.word	0x46164604
   1e270:	f44fa814 	.word	0xf44fa814
   1e274:	f88d72a0 	.word	0xf88d72a0
   1e278:	f006300c 	.word	0xf006300c
   1e27c:	a814fb4e 	.word	0xa814fb4e
   1e280:	fe12f7f6 	.word	0xfe12f7f6
   1e284:	49292300 	.word	0x49292300
   1e288:	a814461a 	.word	0xa814461a
   1e28c:	f7f69300 	.word	0xf7f69300
   1e290:	a814ff0d 	.word	0xa814ff0d
   1e294:	46212220 	.word	0x46212220
   1e298:	ff30f7f6 	.word	0xff30f7f6
   1e29c:	a814b9b8 	.word	0xa814b9b8
   1e2a0:	fe08f7f6 	.word	0xfe08f7f6
   1e2a4:	f10d4621 	.word	0xf10d4621
   1e2a8:	f004000d 	.word	0xf004000d
   1e2ac:	4604fef9 	.word	0x4604fef9
   1e2b0:	b1c7b9b8 	.word	0xb1c7b9b8
   1e2b4:	f7f6a814 	.word	0xf7f6a814
   1e2b8:	2002f95d 	.word	0x2002f95d
   1e2bc:	f960f7f6 	.word	0xf960f7f6
   1e2c0:	a8144601 	.word	0xa8144601
   1e2c4:	f96af7f6 	.word	0xf96af7f6
   1e2c8:	240eb1a8 	.word	0x240eb1a8
   1e2cc:	4a18e7c8 	.word	0x4a18e7c8
   1e2d0:	78114b18 	.word	0x78114b18
   1e2d4:	22074620 	.word	0x22074620
   1e2d8:	1141eb03 	.word	0x1141eb03
   1e2dc:	faf0f006 	.word	0xfaf0f006
   1e2e0:	2423e7dd 	.word	0x2423e7dd
   1e2e4:	a903e7bc 	.word	0xa903e7bc
   1e2e8:	22401c70 	.word	0x22401c70
   1e2ec:	fae8f006 	.word	0xfae8f006
   1e2f0:	602b2341 	.word	0x602b2341
   1e2f4:	2103e7b4 	.word	0x2103e7b4
   1e2f8:	f7f79815 	.word	0xf7f79815
   1e2fc:	2800f961 	.word	0x2800f961
   1e300:	9815d1e3 	.word	0x9815d1e3
   1e304:	f100aa03 	.word	0xf100aa03
   1e308:	23410188 	.word	0x23410188
   1e30c:	fc26f7f9 	.word	0xfc26f7f9
   1e310:	d1da2800 	.word	0xd1da2800
   1e314:	a8144631 	.word	0xa8144631
   1e318:	f7f4682a 	.word	0xf7f4682a
   1e31c:	23b2ffed 	.word	0x23b2ffed
   1e320:	602b4604 	.word	0x602b4604
   1e324:	d09b2800 	.word	0xd09b2800
   1e328:	bf00e7cf 	.word	0xbf00e7cf
   1e32c:	0001e209 	.word	0x0001e209
   1e330:	20027408 	.word	0x20027408
   1e334:	00026c88 	.word	0x00026c88

0001e338 <bsd_os_application_irq_handler>:
   1e338:	41f0e92d 	.word	0x41f0e92d
   1e33c:	f7f34c33 	.word	0xf7f34c33
   1e340:	f04fffad 	.word	0xf04fffad
   1e344:	4d320803 	.word	0x4d320803
   1e348:	f1044f32 	.word	0xf1044f32
   1e34c:	e0040680 	.word	0xe0040680
   1e350:	d0062b04 	.word	0xd0062b04
   1e354:	42b43408 	.word	0x42b43408
   1e358:	f814d03b 	.word	0xf814d03b
   1e35c:	2b023c04 	.word	0x2b023c04
   1e360:	6820d1f6 	.word	0x6820d1f6
   1e364:	6803882a 	.word	0x6803882a
   1e368:	429ab29b 	.word	0x429ab29b
   1e36c:	8a2ad033 	.word	0x8a2ad033
   1e370:	d032429a 	.word	0xd032429a
   1e374:	429a8c2a 	.word	0x429a8c2a
   1e378:	8e2ad031 	.word	0x8e2ad031
   1e37c:	d030429a 	.word	0xd030429a
   1e380:	2040f8b5 	.word	0x2040f8b5
   1e384:	d036429a 	.word	0xd036429a
   1e388:	2050f8b5 	.word	0x2050f8b5
   1e38c:	d034429a 	.word	0xd034429a
   1e390:	2060f8b5 	.word	0x2060f8b5
   1e394:	d032429a 	.word	0xd032429a
   1e398:	2070f8b5 	.word	0x2070f8b5
   1e39c:	d030429a 	.word	0xd030429a
   1e3a0:	2080f8b5 	.word	0x2080f8b5
   1e3a4:	d02e429a 	.word	0xd02e429a
   1e3a8:	2090f8b5 	.word	0x2090f8b5
   1e3ac:	bf08429a 	.word	0xbf08429a
   1e3b0:	d1cf2309 	.word	0xd1cf2309
   1e3b4:	1303eb05 	.word	0x1303eb05
   1e3b8:	68d9685a 	.word	0x68d9685a
   1e3bc:	b9904790 	.word	0xb9904790
   1e3c0:	68202201 	.word	0x68202201
   1e3c4:	2c04f804 	.word	0x2c04f804
   1e3c8:	340868fb 	.word	0x340868fb
   1e3cc:	42b44798 	.word	0x42b44798
   1e3d0:	e8bdd1c3 	.word	0xe8bdd1c3
   1e3d4:	230081f0 	.word	0x230081f0
   1e3d8:	2301e7ec 	.word	0x2301e7ec
   1e3dc:	2302e7ea 	.word	0x2302e7ea
   1e3e0:	2303e7e8 	.word	0x2303e7e8
   1e3e4:	2802e7e6 	.word	0x2802e7e6
   1e3e8:	2304bf0a 	.word	0x2304bf0a
   1e3ec:	8c04f804 	.word	0x8c04f804
   1e3f0:	3c04f804 	.word	0x3c04f804
   1e3f4:	2304e7ae 	.word	0x2304e7ae
   1e3f8:	2305e7dc 	.word	0x2305e7dc
   1e3fc:	2306e7da 	.word	0x2306e7da
   1e400:	2307e7d8 	.word	0x2307e7d8
   1e404:	2308e7d6 	.word	0x2308e7d6
   1e408:	bf00e7d4 	.word	0xbf00e7d4
   1e40c:	200217dc 	.word	0x200217dc
   1e410:	200216a0 	.word	0x200216a0
   1e414:	20021740 	.word	0x20021740

0001e418 <rpc_framework_init>:
   1e418:	22a0b508 	.word	0x22a0b508
   1e41c:	48022100 	.word	0x48022100
   1e420:	fa7bf006 	.word	0xfa7bf006
   1e424:	bd082000 	.word	0xbd082000
   1e428:	200216a0 	.word	0x200216a0

0001e42c <rpc_client_register>:
   1e42c:	2b008803 	.word	0x2b008803
   1e430:	6842d045 	.word	0x6842d045
   1e434:	2a004601 	.word	0x2a004601
   1e438:	4a30d050 	.word	0x4a30d050
   1e43c:	42838810 	.word	0x42838810
   1e440:	e92dd03d 	.word	0xe92dd03d
   1e444:	8a1447f0 	.word	0x8a1447f0
   1e448:	d03542a3 	.word	0xd03542a3
   1e44c:	42ab8c15 	.word	0x42ab8c15
   1e450:	8e16d032 	.word	0x8e16d032
   1e454:	d02f42b3 	.word	0xd02f42b3
   1e458:	7040f8b2 	.word	0x7040f8b2
   1e45c:	d02b42bb 	.word	0xd02b42bb
   1e460:	c050f8b2 	.word	0xc050f8b2
   1e464:	d0274563 	.word	0xd0274563
   1e468:	e060f8b2 	.word	0xe060f8b2
   1e46c:	d0234573 	.word	0xd0234573
   1e470:	8070f8b2 	.word	0x8070f8b2
   1e474:	d01f4543 	.word	0xd01f4543
   1e478:	9080f8b2 	.word	0x9080f8b2
   1e47c:	d01b454b 	.word	0xd01b454b
   1e480:	a090f8b2 	.word	0xa090f8b2
   1e484:	d0174553 	.word	0xd0174553
   1e488:	b35cb1e0 	.word	0xb35cb1e0
   1e48c:	b36eb365 	.word	0xb36eb365
   1e490:	f1bcb377 	.word	0xf1bcb377
   1e494:	d02d0f00 	.word	0xd02d0f00
   1e498:	0f00f1be 	.word	0x0f00f1be
   1e49c:	f1b8d020 	.word	0xf1b8d020
   1e4a0:	d0290f00 	.word	0xd0290f00
   1e4a4:	0f00f1b9 	.word	0x0f00f1b9
   1e4a8:	2009d00b 	.word	0x2009d00b
   1e4ac:	0f00f1ba 	.word	0x0f00f1ba
   1e4b0:	2004d008 	.word	0x2004d008
   1e4b4:	87f0e8bd 	.word	0x87f0e8bd
   1e4b8:	e8bd2007 	.word	0xe8bd2007
   1e4bc:	200787f0 	.word	0x200787f0
   1e4c0:	20084770 	.word	0x20084770
   1e4c4:	52130100 	.word	0x52130100
   1e4c8:	4402684b 	.word	0x4402684b
   1e4cc:	688b6053 	.word	0x688b6053
   1e4d0:	60932000 	.word	0x60932000
   1e4d4:	60d368cb 	.word	0x60d368cb
   1e4d8:	87f0e8bd 	.word	0x87f0e8bd
   1e4dc:	4770200e 	.word	0x4770200e
   1e4e0:	e7ef2006 	.word	0xe7ef2006
   1e4e4:	e7ed2001 	.word	0xe7ed2001
   1e4e8:	e7eb2002 	.word	0xe7eb2002
   1e4ec:	e7e92003 	.word	0xe7e92003
   1e4f0:	e7e72004 	.word	0xe7e72004
   1e4f4:	e7e52005 	.word	0xe7e52005
   1e4f8:	e7e32007 	.word	0xe7e32007
   1e4fc:	200216a0 	.word	0x200216a0

0001e500 <rpc_transport_input>:
   1e500:	4a82b538 	.word	0x4a82b538
   1e504:	8810680b 	.word	0x8810680b
   1e508:	4298b29b 	.word	0x4298b29b
   1e50c:	8a10d027 	.word	0x8a10d027
   1e510:	d0244298 	.word	0xd0244298
   1e514:	42988c10 	.word	0x42988c10
   1e518:	8e10d021 	.word	0x8e10d021
   1e51c:	d01e4298 	.word	0xd01e4298
   1e520:	0040f8b2 	.word	0x0040f8b2
   1e524:	d01a4298 	.word	0xd01a4298
   1e528:	0050f8b2 	.word	0x0050f8b2
   1e52c:	d0164298 	.word	0xd0164298
   1e530:	0060f8b2 	.word	0x0060f8b2
   1e534:	d0124298 	.word	0xd0124298
   1e538:	0070f8b2 	.word	0x0070f8b2
   1e53c:	d00e4298 	.word	0xd00e4298
   1e540:	0080f8b2 	.word	0x0080f8b2
   1e544:	d00a4298 	.word	0xd00a4298
   1e548:	2090f8b2 	.word	0x2090f8b2
   1e54c:	d006429a 	.word	0xd006429a
   1e550:	b1186888 	.word	0xb1186888
   1e554:	691b4b6e 	.word	0x691b4b6e
   1e558:	20004798 	.word	0x20004798
   1e55c:	6888bd38 	.word	0x6888bd38
   1e560:	f0002800 	.word	0xf0002800
   1e564:	4a6b8098 	.word	0x4a6b8098
   1e568:	2c006814 	.word	0x2c006814
   1e56c:	6894d03c 	.word	0x6894d03c
   1e570:	f0002c00 	.word	0xf0002c00
   1e574:	6914809a 	.word	0x6914809a
   1e578:	f0002c00 	.word	0xf0002c00
   1e57c:	6994809a 	.word	0x6994809a
   1e580:	f0002c00 	.word	0xf0002c00
   1e584:	6a14809a 	.word	0x6a14809a
   1e588:	f0002c00 	.word	0xf0002c00
   1e58c:	6a94809a 	.word	0x6a94809a
   1e590:	f0002c00 	.word	0xf0002c00
   1e594:	6b148084 	.word	0x6b148084
   1e598:	f0002c00 	.word	0xf0002c00
   1e59c:	6b948098 	.word	0x6b948098
   1e5a0:	f0002c00 	.word	0xf0002c00
   1e5a4:	6c148096 	.word	0x6c148096
   1e5a8:	f0002c00 	.word	0xf0002c00
   1e5ac:	6c948096 	.word	0x6c948096
   1e5b0:	f0002c00 	.word	0xf0002c00
   1e5b4:	6d148096 	.word	0x6d148096
   1e5b8:	f0002c00 	.word	0xf0002c00
   1e5bc:	6d948096 	.word	0x6d948096
   1e5c0:	f0002c00 	.word	0xf0002c00
   1e5c4:	6e148098 	.word	0x6e148098
   1e5c8:	f0002c00 	.word	0xf0002c00
   1e5cc:	6e948098 	.word	0x6e948098
   1e5d0:	f0002c00 	.word	0xf0002c00
   1e5d4:	6f148096 	.word	0x6f148096
   1e5d8:	f0002c00 	.word	0xf0002c00
   1e5dc:	6f948094 	.word	0x6f948094
   1e5e0:	2001b10c 	.word	0x2001b10c
   1e5e4:	240fbd38 	.word	0x240fbd38
   1e5e8:	05c4eb02 	.word	0x05c4eb02
   1e5ec:	0034f842 	.word	0x0034f842
   1e5f0:	4b4980ab 	.word	0x4b4980ab
   1e5f4:	2a01781a 	.word	0x2a01781a
   1e5f8:	7a1ad053 	.word	0x7a1ad053
   1e5fc:	d0412a01 	.word	0xd0412a01
   1e600:	2a017c1a 	.word	0x2a017c1a
   1e604:	7e1ad04f 	.word	0x7e1ad04f
   1e608:	d0502a01 	.word	0xd0502a01
   1e60c:	2020f893 	.word	0x2020f893
   1e610:	d0502a01 	.word	0xd0502a01
   1e614:	2028f893 	.word	0x2028f893
   1e618:	d0502a01 	.word	0xd0502a01
   1e61c:	2030f893 	.word	0x2030f893
   1e620:	d03a2a01 	.word	0xd03a2a01
   1e624:	2038f893 	.word	0x2038f893
   1e628:	d04c2a01 	.word	0xd04c2a01
   1e62c:	2040f893 	.word	0x2040f893
   1e630:	d04a2a01 	.word	0xd04a2a01
   1e634:	2048f893 	.word	0x2048f893
   1e638:	d04c2a01 	.word	0xd04c2a01
   1e63c:	2050f893 	.word	0x2050f893
   1e640:	d04c2a01 	.word	0xd04c2a01
   1e644:	2058f893 	.word	0x2058f893
   1e648:	d04c2a01 	.word	0xd04c2a01
   1e64c:	2060f893 	.word	0x2060f893
   1e650:	d04c2a01 	.word	0xd04c2a01
   1e654:	2068f893 	.word	0x2068f893
   1e658:	d04a2a01 	.word	0xd04a2a01
   1e65c:	2070f893 	.word	0x2070f893
   1e660:	d04a2a01 	.word	0xd04a2a01
   1e664:	2078f893 	.word	0x2078f893
   1e668:	d00a2a01 	.word	0xd00a2a01
   1e66c:	d0b82c10 	.word	0xd0b82c10
   1e670:	4b282200 	.word	0x4b282200
   1e674:	eb032001 	.word	0xeb032001
   1e678:	808a01c4 	.word	0x808a01c4
   1e67c:	2034f843 	.word	0x2034f843
   1e680:	220fbd38 	.word	0x220fbd38
   1e684:	eb032402 	.word	0xeb032402
   1e688:	f80300c2 	.word	0xf80300c2
   1e68c:	60414032 	.word	0x60414032
   1e690:	fdfcf7f3 	.word	0xfdfcf7f3
   1e694:	2410e7a5 	.word	0x2410e7a5
   1e698:	2206e7ab 	.word	0x2206e7ab
   1e69c:	2405e7f2 	.word	0x2405e7f2
   1e6a0:	2200e7a2 	.word	0x2200e7a2
   1e6a4:	2202e7ee 	.word	0x2202e7ee
   1e6a8:	2401e7ec 	.word	0x2401e7ec
   1e6ac:	2203e79c 	.word	0x2203e79c
   1e6b0:	2402e7e8 	.word	0x2402e7e8
   1e6b4:	2204e798 	.word	0x2204e798
   1e6b8:	2403e7e4 	.word	0x2403e7e4
   1e6bc:	2205e794 	.word	0x2205e794
   1e6c0:	2404e7e0 	.word	0x2404e7e0
   1e6c4:	2207e790 	.word	0x2207e790
   1e6c8:	2208e7dc 	.word	0x2208e7dc
   1e6cc:	2406e7da 	.word	0x2406e7da
   1e6d0:	2407e78a 	.word	0x2407e78a
   1e6d4:	2209e788 	.word	0x2209e788
   1e6d8:	2408e7d4 	.word	0x2408e7d4
   1e6dc:	220ae784 	.word	0x220ae784
   1e6e0:	2409e7d0 	.word	0x2409e7d0
   1e6e4:	220be780 	.word	0x220be780
   1e6e8:	240ae7cc 	.word	0x240ae7cc
   1e6ec:	220ce77c 	.word	0x220ce77c
   1e6f0:	220de7c8 	.word	0x220de7c8
   1e6f4:	240be7c6 	.word	0x240be7c6
   1e6f8:	220ee776 	.word	0x220ee776
   1e6fc:	240ce7c2 	.word	0x240ce7c2
   1e700:	240de772 	.word	0x240de772
   1e704:	240ee770 	.word	0x240ee770
   1e708:	bf00e76e 	.word	0xbf00e76e
   1e70c:	200216a0 	.word	0x200216a0
   1e710:	20021740 	.word	0x20021740
   1e714:	20021758 	.word	0x20021758
   1e718:	200217d8 	.word	0x200217d8

0001e71c <rpc_transport_register>:
   1e71c:	2900b4f0 	.word	0x2900b4f0
   1e720:	2800d052 	.word	0x2800d052
   1e724:	6883d050 	.word	0x6883d050
   1e728:	d04d2b00 	.word	0xd04d2b00
   1e72c:	2b006903 	.word	0x2b006903
   1e730:	6843d04a 	.word	0x6843d04a
   1e734:	d0472b00 	.word	0xd0472b00
   1e738:	2b0068c3 	.word	0x2b0068c3
   1e73c:	6803d044 	.word	0x6803d044
   1e740:	d0412b00 	.word	0xd0412b00
   1e744:	2b006943 	.word	0x2b006943
   1e748:	2601d03e 	.word	0x2601d03e
   1e74c:	46042500 	.word	0x46042500
   1e750:	4a1f460f 	.word	0x4a1f460f
   1e754:	f8df4b1f 	.word	0xf8df4b1f
   1e758:	7416c080 	.word	0x7416c080
   1e75c:	f8827616 	.word	0xf8827616
   1e760:	f8826020 	.word	0xf8826020
   1e764:	f8826028 	.word	0xf8826028
   1e768:	f8826030 	.word	0xf8826030
   1e76c:	f8826038 	.word	0xf8826038
   1e770:	f8826040 	.word	0xf8826040
   1e774:	f8826048 	.word	0xf8826048
   1e778:	f8826050 	.word	0xf8826050
   1e77c:	f8826058 	.word	0xf8826058
   1e780:	f8826060 	.word	0xf8826060
   1e784:	f8826068 	.word	0xf8826068
   1e788:	f8826070 	.word	0xf8826070
   1e78c:	611d6078 	.word	0x611d6078
   1e790:	621d619d 	.word	0x621d619d
   1e794:	631d629d 	.word	0x631d629d
   1e798:	641d639d 	.word	0x641d639d
   1e79c:	651d649d 	.word	0x651d649d
   1e7a0:	661d659d 	.word	0x661d659d
   1e7a4:	671d669d 	.word	0x671d669d
   1e7a8:	7016679d 	.word	0x7016679d
   1e7ac:	601d7216 	.word	0x601d7216
   1e7b0:	cc0f609d 	.word	0xcc0f609d
   1e7b4:	000fe8ac 	.word	0x000fe8ac
   1e7b8:	0003e894 	.word	0x0003e894
   1e7bc:	0003e88c 	.word	0x0003e88c
   1e7c0:	4628603e 	.word	0x4628603e
   1e7c4:	4770bcf0 	.word	0x4770bcf0
   1e7c8:	4628250e 	.word	0x4628250e
   1e7cc:	4770bcf0 	.word	0x4770bcf0
   1e7d0:	200217d8 	.word	0x200217d8
   1e7d4:	20021758 	.word	0x20021758
   1e7d8:	20021740 	.word	0x20021740

0001e7dc <rpc_transport_unregister>:
   1e7dc:	d03a2800 	.word	0xd03a2800
   1e7e0:	47f0e92d 	.word	0x47f0e92d
   1e7e4:	4c1d4680 	.word	0x4c1d4680
   1e7e8:	05a0f104 	.word	0x05a0f104
   1e7ec:	341068a3 	.word	0x341068a3
   1e7f0:	4798b103 	.word	0x4798b103
   1e7f4:	d1f942ac 	.word	0xd1f942ac
   1e7f8:	0901f04f 	.word	0x0901f04f
   1e7fc:	4c182600 	.word	0x4c182600
   1e800:	f8df4d18 	.word	0xf8df4d18
   1e804:	f104a064 	.word	0xf104a064
   1e808:	f8140780 	.word	0xf8140780
   1e80c:	2b013c04 	.word	0x2b013c04
   1e810:	f8dad005 	.word	0xf8dad005
   1e814:	6820300c 	.word	0x6820300c
   1e818:	f8044798 	.word	0xf8044798
   1e81c:	f8559c04 	.word	0xf8559c04
   1e820:	34080c04 	.word	0x34080c04
   1e824:	f8dab128 	.word	0xf8dab128
   1e828:	47983010 	.word	0x47983010
   1e82c:	f845802e 	.word	0xf845802e
   1e830:	42bc6c04 	.word	0x42bc6c04
   1e834:	0508f105 	.word	0x0508f105
   1e838:	f8d8d1e7 	.word	0xf8d8d1e7
   1e83c:	22180000 	.word	0x22180000
   1e840:	eb003801 	.word	0xeb003801
   1e844:	eb0a0040 	.word	0xeb0a0040
   1e848:	210000c0 	.word	0x210000c0
   1e84c:	f865f006 	.word	0xf865f006
   1e850:	e8bd2000 	.word	0xe8bd2000
   1e854:	200e87f0 	.word	0x200e87f0
   1e858:	bf004770 	.word	0xbf004770
   1e85c:	200216a0 	.word	0x200216a0
   1e860:	200217dc 	.word	0x200217dc
   1e864:	2002175c 	.word	0x2002175c
   1e868:	20021740 	.word	0x20021740

0001e86c <rpc_message_send>:
   1e86c:	b171b168 	.word	0xb171b168
   1e870:	68534a09 	.word	0x68534a09
   1e874:	684bb16b 	.word	0x684bb16b
   1e878:	f0238008 	.word	0xf0238008
   1e87c:	f04303ff 	.word	0xf04303ff
   1e880:	68120302 	.word	0x68120302
   1e884:	4608604b 	.word	0x4608604b
   1e888:	20074710 	.word	0x20074710
   1e88c:	200e4770 	.word	0x200e4770
   1e890:	20084770 	.word	0x20084770
   1e894:	bf004770 	.word	0xbf004770
   1e898:	20021740 	.word	0x20021740

0001e89c <rpc_message_alloc>:
   1e89c:	b330b35a 	.word	0xb330b35a
   1e8a0:	e92d2300 	.word	0xe92d2300
   1e8a4:	4f1541f0 	.word	0x4f1541f0
   1e8a8:	687b6013 	.word	0x687b6013
   1e8ac:	4615b30b 	.word	0x4615b30b
   1e8b0:	4606460c 	.word	0x4606460c
   1e8b4:	4798b959 	.word	0x4798b959
   1e8b8:	b1a84603 	.word	0xb1a84603
   1e8bc:	60dc46a0 	.word	0x60dc46a0
   1e8c0:	8008f8c3 	.word	0x8008f8c3
   1e8c4:	602b801e 	.word	0x602b801e
   1e8c8:	e8bd2000 	.word	0xe8bd2000
   1e8cc:	68bb81f0 	.word	0x68bb81f0
   1e8d0:	47984608 	.word	0x47984608
   1e8d4:	b1384680 	.word	0xb1384680
   1e8d8:	4798687b 	.word	0x4798687b
   1e8dc:	28004603 	.word	0x28004603
   1e8e0:	693bd1ed 	.word	0x693bd1ed
   1e8e4:	47984640 	.word	0x47984640
   1e8e8:	e8bd2004 	.word	0xe8bd2004
   1e8ec:	200781f0 	.word	0x200781f0
   1e8f0:	20084770 	.word	0x20084770
   1e8f4:	200ee7f9 	.word	0x200ee7f9
   1e8f8:	bf004770 	.word	0xbf004770
   1e8fc:	20021740 	.word	0x20021740

0001e900 <rpc_message_free>:
   1e900:	f0002800 	.word	0xf0002800
   1e904:	2900808c 	.word	0x2900808c
   1e908:	80e9f000 	.word	0x80e9f000
   1e90c:	4a83b538 	.word	0x4a83b538
   1e910:	2b006853 	.word	0x2b006853
   1e914:	8085f000 	.word	0x8085f000
   1e918:	46084c81 	.word	0x46084c81
   1e91c:	42996863 	.word	0x42996863
   1e920:	8085f000 	.word	0x8085f000
   1e924:	429868e3 	.word	0x429868e3
   1e928:	808ef000 	.word	0x808ef000
   1e92c:	42986963 	.word	0x42986963
   1e930:	8090f000 	.word	0x8090f000
   1e934:	429869e3 	.word	0x429869e3
   1e938:	8092f000 	.word	0x8092f000
   1e93c:	42986a63 	.word	0x42986a63
   1e940:	8095f000 	.word	0x8095f000
   1e944:	42986ae3 	.word	0x42986ae3
   1e948:	8098f000 	.word	0x8098f000
   1e94c:	42986b63 	.word	0x42986b63
   1e950:	809bf000 	.word	0x809bf000
   1e954:	42986be3 	.word	0x42986be3
   1e958:	809ef000 	.word	0x809ef000
   1e95c:	42986c63 	.word	0x42986c63
   1e960:	80a1f000 	.word	0x80a1f000
   1e964:	42986ce3 	.word	0x42986ce3
   1e968:	80a4f000 	.word	0x80a4f000
   1e96c:	42986d63 	.word	0x42986d63
   1e970:	80a7f000 	.word	0x80a7f000
   1e974:	42986de3 	.word	0x42986de3
   1e978:	80aaf000 	.word	0x80aaf000
   1e97c:	42986e63 	.word	0x42986e63
   1e980:	80aff000 	.word	0x80aff000
   1e984:	42986ee3 	.word	0x42986ee3
   1e988:	80b2f000 	.word	0x80b2f000
   1e98c:	42986f63 	.word	0x42986f63
   1e990:	80b5f000 	.word	0x80b5f000
   1e994:	42836fe3 	.word	0x42836fe3
   1e998:	80b8f000 	.word	0x80b8f000
   1e99c:	479868d3 	.word	0x479868d3
   1e9a0:	2b047823 	.word	0x2b047823
   1e9a4:	7a23d03f 	.word	0x7a23d03f
   1e9a8:	d03c2b04 	.word	0xd03c2b04
   1e9ac:	2b047c23 	.word	0x2b047c23
   1e9b0:	7e23d039 	.word	0x7e23d039
   1e9b4:	d0362b04 	.word	0xd0362b04
   1e9b8:	3020f894 	.word	0x3020f894
   1e9bc:	d0322b04 	.word	0xd0322b04
   1e9c0:	3028f894 	.word	0x3028f894
   1e9c4:	d02e2b04 	.word	0xd02e2b04
   1e9c8:	3030f894 	.word	0x3030f894
   1e9cc:	d02a2b04 	.word	0xd02a2b04
   1e9d0:	3038f894 	.word	0x3038f894
   1e9d4:	d0262b04 	.word	0xd0262b04
   1e9d8:	3040f894 	.word	0x3040f894
   1e9dc:	d0222b04 	.word	0xd0222b04
   1e9e0:	3048f894 	.word	0x3048f894
   1e9e4:	d01e2b04 	.word	0xd01e2b04
   1e9e8:	3050f894 	.word	0x3050f894
   1e9ec:	d01a2b04 	.word	0xd01a2b04
   1e9f0:	3058f894 	.word	0x3058f894
   1e9f4:	d0162b04 	.word	0xd0162b04
   1e9f8:	3060f894 	.word	0x3060f894
   1e9fc:	d0122b04 	.word	0xd0122b04
   1ea00:	3068f894 	.word	0x3068f894
   1ea04:	d00e2b04 	.word	0xd00e2b04
   1ea08:	3070f894 	.word	0x3070f894
   1ea0c:	d00a2b04 	.word	0xd00a2b04
   1ea10:	3078f894 	.word	0x3078f894
   1ea14:	bf182b04 	.word	0xbf182b04
   1ea18:	d0042000 	.word	0xd0042000
   1ea1c:	2007bd38 	.word	0x2007bd38
   1ea20:	20084770 	.word	0x20084770
   1ea24:	f7f3bd38 	.word	0xf7f3bd38
   1ea28:	2000fc31 	.word	0x2000fc31
   1ea2c:	7821bd38 	.word	0x7821bd38
   1ea30:	f47f2903 	.word	0xf47f2903
   1ea34:	2100af77 	.word	0x2100af77
   1ea38:	46182501 	.word	0x46182501
   1ea3c:	f80468d2 	.word	0xf80468d2
   1ea40:	47905031 	.word	0x47905031
   1ea44:	bd382000 	.word	0xbd382000
   1ea48:	29037a21 	.word	0x29037a21
   1ea4c:	af6ef47f 	.word	0xaf6ef47f
   1ea50:	e7f12101 	.word	0xe7f12101
   1ea54:	29037c21 	.word	0x29037c21
   1ea58:	af6cf47f 	.word	0xaf6cf47f
   1ea5c:	e7eb2102 	.word	0xe7eb2102
   1ea60:	29037e21 	.word	0x29037e21
   1ea64:	6a63d0e8 	.word	0x6a63d0e8
   1ea68:	f47f4298 	.word	0xf47f4298
   1ea6c:	f894af6b 	.word	0xf894af6b
   1ea70:	29031020 	.word	0x29031020
   1ea74:	af66f47f 	.word	0xaf66f47f
   1ea78:	e7dd2104 	.word	0xe7dd2104
   1ea7c:	1028f894 	.word	0x1028f894
   1ea80:	f47f2903 	.word	0xf47f2903
   1ea84:	2105af63 	.word	0x2105af63
   1ea88:	f894e7d6 	.word	0xf894e7d6
   1ea8c:	29031030 	.word	0x29031030
   1ea90:	af60f47f 	.word	0xaf60f47f
   1ea94:	e7cf2106 	.word	0xe7cf2106
   1ea98:	1038f894 	.word	0x1038f894
   1ea9c:	f47f2903 	.word	0xf47f2903
   1eaa0:	2107af5d 	.word	0x2107af5d
   1eaa4:	f894e7c8 	.word	0xf894e7c8
   1eaa8:	29031040 	.word	0x29031040
   1eaac:	af5af47f 	.word	0xaf5af47f
   1eab0:	e7c12108 	.word	0xe7c12108
   1eab4:	1048f894 	.word	0x1048f894
   1eab8:	f47f2903 	.word	0xf47f2903
   1eabc:	2109af57 	.word	0x2109af57
   1eac0:	f894e7ba 	.word	0xf894e7ba
   1eac4:	29031050 	.word	0x29031050
   1eac8:	af54f47f 	.word	0xaf54f47f
   1eacc:	e7b3210a 	.word	0xe7b3210a
   1ead0:	1058f894 	.word	0x1058f894
   1ead4:	f47f2903 	.word	0xf47f2903
   1ead8:	210baf51 	.word	0x210baf51
   1eadc:	200ee7ac 	.word	0x200ee7ac
   1eae0:	f8944770 	.word	0xf8944770
   1eae4:	29031060 	.word	0x29031060
   1eae8:	af4cf47f 	.word	0xaf4cf47f
   1eaec:	e7a3210c 	.word	0xe7a3210c
   1eaf0:	1068f894 	.word	0x1068f894
   1eaf4:	f47f2903 	.word	0xf47f2903
   1eaf8:	210daf49 	.word	0x210daf49
   1eafc:	f894e79c 	.word	0xf894e79c
   1eb00:	29031070 	.word	0x29031070
   1eb04:	af46f47f 	.word	0xaf46f47f
   1eb08:	e795210e 	.word	0xe795210e
   1eb0c:	3078f894 	.word	0x3078f894
   1eb10:	f47f2b03 	.word	0xf47f2b03
   1eb14:	4603af43 	.word	0x4603af43
   1eb18:	e78d210f 	.word	0xe78d210f
   1eb1c:	20021740 	.word	0x20021740
   1eb20:	200217d8 	.word	0x200217d8

0001eb24 <rpc_message_data_free>:
   1eb24:	f0002800 	.word	0xf0002800
   1eb28:	29008091 	.word	0x29008091
   1eb2c:	80e4f000 	.word	0x80e4f000
   1eb30:	4a81b538 	.word	0x4a81b538
   1eb34:	2b006853 	.word	0x2b006853
   1eb38:	808af000 	.word	0x808af000
   1eb3c:	681c4b7f 	.word	0x681c4b7f
   1eb40:	f00042a1 	.word	0xf00042a1
   1eb44:	689c8087 	.word	0x689c8087
   1eb48:	f00042a1 	.word	0xf00042a1
   1eb4c:	691c808f 	.word	0x691c808f
   1eb50:	f00042a1 	.word	0xf00042a1
   1eb54:	699c8091 	.word	0x699c8091
   1eb58:	f00042a1 	.word	0xf00042a1
   1eb5c:	6a1c8093 	.word	0x6a1c8093
   1eb60:	f00042a1 	.word	0xf00042a1
   1eb64:	6a9c8095 	.word	0x6a9c8095
   1eb68:	f00042a1 	.word	0xf00042a1
   1eb6c:	6b1c8097 	.word	0x6b1c8097
   1eb70:	f00042a1 	.word	0xf00042a1
   1eb74:	6b9c8099 	.word	0x6b9c8099
   1eb78:	f00042a1 	.word	0xf00042a1
   1eb7c:	6c1c809b 	.word	0x6c1c809b
   1eb80:	f00042a1 	.word	0xf00042a1
   1eb84:	6c9c809d 	.word	0x6c9c809d
   1eb88:	f00042a1 	.word	0xf00042a1
   1eb8c:	6d1c80a0 	.word	0x6d1c80a0
   1eb90:	f00042a1 	.word	0xf00042a1
   1eb94:	6d9c80a3 	.word	0x6d9c80a3
   1eb98:	f00042a1 	.word	0xf00042a1
   1eb9c:	6e1c80a6 	.word	0x6e1c80a6
   1eba0:	f00042a1 	.word	0xf00042a1
   1eba4:	6e9c80ab 	.word	0x6e9c80ab
   1eba8:	f00042a1 	.word	0xf00042a1
   1ebac:	6f1c80ae 	.word	0x6f1c80ae
   1ebb0:	f00042a1 	.word	0xf00042a1
   1ebb4:	6f9c80b1 	.word	0x6f9c80b1
   1ebb8:	f000428c 	.word	0xf000428c
   1ebbc:	691380b4 	.word	0x691380b4
   1ebc0:	47984608 	.word	0x47984608
   1ebc4:	781a4b5e 	.word	0x781a4b5e
   1ebc8:	d03b2a04 	.word	0xd03b2a04
   1ebcc:	2a047a1a 	.word	0x2a047a1a
   1ebd0:	7c1ad038 	.word	0x7c1ad038
   1ebd4:	d0352a04 	.word	0xd0352a04
   1ebd8:	2a047e1a 	.word	0x2a047e1a
   1ebdc:	f893d032 	.word	0xf893d032
   1ebe0:	2a042020 	.word	0x2a042020
   1ebe4:	f893d02e 	.word	0xf893d02e
   1ebe8:	2a042028 	.word	0x2a042028
   1ebec:	f893d02a 	.word	0xf893d02a
   1ebf0:	2a042030 	.word	0x2a042030
   1ebf4:	f893d026 	.word	0xf893d026
   1ebf8:	2a042038 	.word	0x2a042038
   1ebfc:	f893d022 	.word	0xf893d022
   1ec00:	2a042040 	.word	0x2a042040
   1ec04:	f893d01e 	.word	0xf893d01e
   1ec08:	2a042048 	.word	0x2a042048
   1ec0c:	f893d01a 	.word	0xf893d01a
   1ec10:	2a042050 	.word	0x2a042050
   1ec14:	f893d016 	.word	0xf893d016
   1ec18:	2a042058 	.word	0x2a042058
   1ec1c:	f893d012 	.word	0xf893d012
   1ec20:	2a042060 	.word	0x2a042060
   1ec24:	f893d00e 	.word	0xf893d00e
   1ec28:	2a042068 	.word	0x2a042068
   1ec2c:	f893d00a 	.word	0xf893d00a
   1ec30:	2a042070 	.word	0x2a042070
   1ec34:	f893d006 	.word	0xf893d006
   1ec38:	2b043078 	.word	0x2b043078
   1ec3c:	2000bf18 	.word	0x2000bf18
   1ec40:	bd38d000 	.word	0xbd38d000
   1ec44:	fb22f7f3 	.word	0xfb22f7f3
   1ec48:	bd382000 	.word	0xbd382000
   1ec4c:	47702007 	.word	0x47702007
   1ec50:	bd382008 	.word	0xbd382008
   1ec54:	4284889c 	.word	0x4284889c
   1ec58:	af75f47f 	.word	0xaf75f47f
   1ec5c:	20002400 	.word	0x20002400
   1ec60:	05c4eb03 	.word	0x05c4eb03
   1ec64:	0034f843 	.word	0x0034f843
   1ec68:	e7a880a8 	.word	0xe7a880a8
   1ec6c:	4284899c 	.word	0x4284899c
   1ec70:	af6df47f 	.word	0xaf6df47f
   1ec74:	e7f22401 	.word	0xe7f22401
   1ec78:	42848a9c 	.word	0x42848a9c
   1ec7c:	af6bf47f 	.word	0xaf6bf47f
   1ec80:	e7ec2402 	.word	0xe7ec2402
   1ec84:	42848b9c 	.word	0x42848b9c
   1ec88:	af69f47f 	.word	0xaf69f47f
   1ec8c:	e7e62403 	.word	0xe7e62403
   1ec90:	42848c9c 	.word	0x42848c9c
   1ec94:	af67f47f 	.word	0xaf67f47f
   1ec98:	e7e02404 	.word	0xe7e02404
   1ec9c:	42848d9c 	.word	0x42848d9c
   1eca0:	af65f47f 	.word	0xaf65f47f
   1eca4:	e7da2405 	.word	0xe7da2405
   1eca8:	42848e9c 	.word	0x42848e9c
   1ecac:	af63f47f 	.word	0xaf63f47f
   1ecb0:	e7d42406 	.word	0xe7d42406
   1ecb4:	42848f9c 	.word	0x42848f9c
   1ecb8:	af61f47f 	.word	0xaf61f47f
   1ecbc:	e7ce2407 	.word	0xe7ce2407
   1ecc0:	4044f8b3 	.word	0x4044f8b3
   1ecc4:	f47f4284 	.word	0xf47f4284
   1ecc8:	2408af5e 	.word	0x2408af5e
   1eccc:	f8b3e7c7 	.word	0xf8b3e7c7
   1ecd0:	4284404c 	.word	0x4284404c
   1ecd4:	af5bf47f 	.word	0xaf5bf47f
   1ecd8:	e7c02409 	.word	0xe7c02409
   1ecdc:	4054f8b3 	.word	0x4054f8b3
   1ece0:	f47f4284 	.word	0xf47f4284
   1ece4:	240aaf58 	.word	0x240aaf58
   1ece8:	f8b3e7b9 	.word	0xf8b3e7b9
   1ecec:	4284405c 	.word	0x4284405c
   1ecf0:	af55f47f 	.word	0xaf55f47f
   1ecf4:	e7b2240b 	.word	0xe7b2240b
   1ecf8:	4770200e 	.word	0x4770200e
   1ecfc:	4064f8b3 	.word	0x4064f8b3
   1ed00:	f47f4284 	.word	0xf47f4284
   1ed04:	240caf50 	.word	0x240caf50
   1ed08:	f8b3e7a9 	.word	0xf8b3e7a9
   1ed0c:	4284406c 	.word	0x4284406c
   1ed10:	af4df47f 	.word	0xaf4df47f
   1ed14:	e7a2240d 	.word	0xe7a2240d
   1ed18:	4074f8b3 	.word	0x4074f8b3
   1ed1c:	f47f4284 	.word	0xf47f4284
   1ed20:	240eaf4a 	.word	0x240eaf4a
   1ed24:	f8b3e79b 	.word	0xf8b3e79b
   1ed28:	4284407c 	.word	0x4284407c
   1ed2c:	240fbf08 	.word	0x240fbf08
   1ed30:	af45f47f 	.word	0xaf45f47f
   1ed34:	bf00e793 	.word	0xbf00e793
   1ed38:	20021740 	.word	0x20021740
   1ed3c:	20021758 	.word	0x20021758
   1ed40:	200217d8 	.word	0x200217d8

0001ed44 <symbol_000fb79>:
   1ed44:	b4302801 	.word	0xb4302801
   1ed48:	d1034b0a 	.word	0xd1034b0a
   1ed4c:	7c1de00a 	.word	0x7c1de00a
   1ed50:	d0084285 	.word	0xd0084285
   1ed54:	4f14f853 	.word	0x4f14f853
   1ed58:	d1f82c00 	.word	0xd1f82c00
   1ed5c:	002df06f 	.word	0x002df06f
   1ed60:	4770bc30 	.word	0x4770bc30
   1ed64:	600c4c04 	.word	0x600c4c04
   1ed68:	2000685b 	.word	0x2000685b
   1ed6c:	6013bc30 	.word	0x6013bc30
   1ed70:	bf004770 	.word	0xbf004770
   1ed74:	00026da8 	.word	0x00026da8
   1ed78:	00026d74 	.word	0x00026d74

0001ed7c <symbol_000494c>:
   1ed7c:	b4302803 	.word	0xb4302803
   1ed80:	d1034b0a 	.word	0xd1034b0a
   1ed84:	7c1de00a 	.word	0x7c1de00a
   1ed88:	d0084285 	.word	0xd0084285
   1ed8c:	4f14f853 	.word	0x4f14f853
   1ed90:	d1f82c00 	.word	0xd1f82c00
   1ed94:	002df06f 	.word	0x002df06f
   1ed98:	4770bc30 	.word	0x4770bc30
   1ed9c:	600c4c04 	.word	0x600c4c04
   1eda0:	2000685b 	.word	0x2000685b
   1eda4:	6013bc30 	.word	0x6013bc30
   1eda8:	bf004770 	.word	0xbf004770
   1edac:	00026d80 	.word	0x00026d80
   1edb0:	00026d68 	.word	0x00026d68

0001edb4 <dfu_client_event_handler>:
   1edb4:	1b08f850 	.word	0x1b08f850
   1edb8:	f7fc0c09 	.word	0xf7fc0c09
   1edbc:	bf00b80d 	.word	0xbf00b80d

0001edc0 <rpc_dfu_client_init>:
   1edc0:	f7ff4801 	.word	0xf7ff4801
   1edc4:	bf00bb33 	.word	0xbf00bb33
   1edc8:	00026df8 	.word	0x00026df8

0001edcc <rpc_dfu_client_request_alloc>:
   1edcc:	b5102300 	.word	0xb5102300
   1edd0:	9301b082 	.word	0x9301b082
   1edd4:	4604b158 	.word	0x4604b158
   1edd8:	2006aa01 	.word	0x2006aa01
   1eddc:	fd5ef7ff 	.word	0xfd5ef7ff
   1ede0:	9b01b918 	.word	0x9b01b918
   1ede4:	3308b10b 	.word	0x3308b10b
   1ede8:	b0026023 	.word	0xb0026023
   1edec:	2007bd10 	.word	0x2007bd10
   1edf0:	bd10b002 	.word	0xbd10b002

0001edf4 <rpc_dfu_client_request_send>:
   1edf4:	4f70f411 	.word	0x4f70f411
   1edf8:	b160d10b 	.word	0xb160d10b
   1edfc:	f8304603 	.word	0xf8304603
   1ee00:	20062c08 	.word	0x20062c08
   1ee04:	4101ea42 	.word	0x4101ea42
   1ee08:	1d08f843 	.word	0x1d08f843
   1ee0c:	f7ff4619 	.word	0xf7ff4619
   1ee10:	200fbd2d 	.word	0x200fbd2d
   1ee14:	20074770 	.word	0x20074770
   1ee18:	bf004770 	.word	0xbf004770

0001ee1c <rpc_dfu_client_message_free>:
   1ee1c:	f1a0b120 	.word	0xf1a0b120
   1ee20:	20060108 	.word	0x20060108
   1ee24:	bd6cf7ff 	.word	0xbd6cf7ff
   1ee28:	47702007 	.word	0x47702007

0001ee2c <rpc_dfu_client_data_free>:
   1ee2c:	4601b118 	.word	0x4601b118
   1ee30:	f7ff2006 	.word	0xf7ff2006
   1ee34:	2007be77 	.word	0x2007be77
   1ee38:	bf004770 	.word	0xbf004770

0001ee3c <mem_free>:
   1ee3c:	4ff0e92d 	.word	0x4ff0e92d
   1ee40:	c0ccf8df 	.word	0xc0ccf8df
   1ee44:	9000b083 	.word	0x9000b083
   1ee48:	0b3cf10c 	.word	0x0b3cf10c
   1ee4c:	3008f8dc 	.word	0x3008f8dc
   1ee50:	f8dcb12b 	.word	0xf8dcb12b
   1ee54:	9c002000 	.word	0x9c002000
   1ee58:	42a07810 	.word	0x42a07810
   1ee5c:	f10cd006 	.word	0xf10cd006
   1ee60:	45e30c0c 	.word	0x45e30c0c
   1ee64:	b003d1f2 	.word	0xb003d1f2
   1ee68:	8ff0e8bd 	.word	0x8ff0e8bd
   1ee6c:	a004f8dc 	.word	0xa004f8dc
   1ee70:	080aeb03 	.word	0x080aeb03
   1ee74:	d2f245c2 	.word	0xd2f245c2
   1ee78:	f8cd6853 	.word	0xf8cd6853
   1ee7c:	46d6c004 	.word	0x46d6c004
   1ee80:	f8d2469c 	.word	0xf8d2469c
   1ee84:	89979010 	.word	0x89979010
   1ee88:	000aebae 	.word	0x000aebae
   1ee8c:	f8b9b3df 	.word	0xf8b9b3df
   1ee90:	42902002 	.word	0x42902002
   1ee94:	4665d31c 	.word	0x4665d31c
   1ee98:	f1092400 	.word	0xf1092400
   1ee9c:	e0030304 	.word	0xe0030304
   1eea0:	3304885a 	.word	0x3304885a
   1eea4:	d8154282 	.word	0xd8154282
   1eea8:	6c04f833 	.word	0x6c04f833
   1eeac:	42a73401 	.word	0x42a73401
   1eeb0:	5506fb02 	.word	0x5506fb02
   1eeb4:	0002eba0 	.word	0x0002eba0
   1eeb8:	d1f1461e 	.word	0xd1f1461e
   1eebc:	42812000 	.word	0x42812000
   1eec0:	f10ed00d 	.word	0xf10ed00d
   1eec4:	45f00e01 	.word	0x45f00e01
   1eec8:	f8ddd1de 	.word	0xf8ddd1de
   1eecc:	e7c6c004 	.word	0xe7c6c004
   1eed0:	464e4665 	.word	0x464e4665
   1eed4:	fb008833 	.word	0xfb008833
   1eed8:	42815003 	.word	0x42815003
   1eedc:	f5bed1f1 	.word	0xf5bed1f1
   1eee0:	f8dd7f00 	.word	0xf8dd7f00
   1eee4:	d0bac004 	.word	0xd0bac004
   1eee8:	4a082301 	.word	0x4a082301
   1eeec:	115eea4f 	.word	0x115eea4f
   1eef0:	0021f852 	.word	0x0021f852
   1eef4:	0e1ff00e 	.word	0x0e1ff00e
   1eef8:	fe0efa03 	.word	0xfe0efa03
   1eefc:	0000ea4e 	.word	0x0000ea4e
   1ef00:	0021f842 	.word	0x0021f842
   1ef04:	4638e7af 	.word	0x4638e7af
   1ef08:	bf00e7d9 	.word	0xbf00e7d9
   1ef0c:	20021858 	.word	0x20021858
   1ef10:	2002189c 	.word	0x2002189c

0001ef14 <mem_alloc.constprop.5>:
   1ef14:	d0502800 	.word	0xd0502800
   1ef18:	f8d34b6d 	.word	0xf8d34b6d
   1ef1c:	42902088 	.word	0x42902088
   1ef20:	e92dd84b 	.word	0xe92dd84b
   1ef24:	f8d34ff0 	.word	0xf8d34ff0
   1ef28:	b083b08c 	.word	0xb083b08c
   1ef2c:	0f00f1bb 	.word	0x0f00f1bb
   1ef30:	f10bd054 	.word	0xf10bd054
   1ef34:	469132ff 	.word	0x469132ff
   1ef38:	f04f2600 	.word	0xf04f2600
   1ef3c:	4f650812 	.word	0x4f650812
   1ef40:	f10b9201 	.word	0xf10b9201
   1ef44:	eb060e11 	.word	0xeb060e11
   1ef48:	f8530209 	.word	0xf8530209
   1ef4c:	32014038 	.word	0x32014038
   1ef50:	eb040852 	.word	0xeb040852
   1ef54:	f1020c44 	.word	0xf1020c44
   1ef58:	f8530112 	.word	0xf8530112
   1ef5c:	f8575031 	.word	0xf8575031
   1ef60:	f853a02c 	.word	0xf853a02c
   1ef64:	eb03403e 	.word	0xeb03403e
   1ef68:	f8dc0cc8 	.word	0xf8dc0cc8
   1ef6c:	eb05c004 	.word	0xeb05c004
   1ef70:	eb040545 	.word	0xeb040545
   1ef74:	f8da0444 	.word	0xf8da0444
   1ef78:	f857a010 	.word	0xf857a010
   1ef7c:	f8575025 	.word	0xf8575025
   1ef80:	f83a4024 	.word	0xf83a4024
   1ef84:	eb03a02c 	.word	0xeb03a02c
   1ef88:	eb0301c1 	.word	0xeb0301c1
   1ef8c:	68490cce 	.word	0x68490cce
   1ef90:	6924692d 	.word	0x6924692d
   1ef94:	c004f8dc 	.word	0xc004f8dc
   1ef98:	f8354550 	.word	0xf8354550
   1ef9c:	f8345021 	.word	0xf8345021
   1efa0:	d915102c 	.word	0xd915102c
   1efa4:	d2114288 	.word	0xd2114288
   1efa8:	d90842a8 	.word	0xd90842a8
   1efac:	45b11c56 	.word	0x45b11c56
   1efb0:	8087f0c0 	.word	0x8087f0c0
   1efb4:	0813f102 	.word	0x0813f102
   1efb8:	2000e7c5 	.word	0x2000e7c5
   1efbc:	f1024770 	.word	0xf1024770
   1efc0:	454e39ff 	.word	0x454e39ff
   1efc4:	f102d87d 	.word	0xf102d87d
   1efc8:	e7bc0e11 	.word	0xe7bc0e11
   1efcc:	0601f109 	.word	0x0601f109
   1efd0:	d00745b3 	.word	0xd00745b3
   1efd4:	d0012e10 	.word	0xd0012e10
   1efd8:	d80845b3 	.word	0xd80845b3
   1efdc:	b0032000 	.word	0xb0032000
   1efe0:	8ff0e8bd 	.word	0x8ff0e8bd
   1efe4:	2a109a01 	.word	0x2a109a01
   1efe8:	4616bf18 	.word	0x4616bf18
   1efec:	f8dfd0f6 	.word	0xf8dfd0f6
   1eff0:	eb03c0e8 	.word	0xeb03c0e8
   1eff4:	e9d808c6 	.word	0xe9d808c6
   1eff8:	eb022424 	.word	0xeb022424
   1effc:	f8570242 	.word	0xf8570242
   1f000:	eb073022 	.word	0xeb073022
   1f004:	f8d20282 	.word	0xf8d20282
   1f008:	691de004 	.word	0x691de004
   1f00c:	d0562c00 	.word	0xd0562c00
   1f010:	4670462a 	.word	0x4670462a
   1f014:	eb0500a4 	.word	0xeb0500a4
   1f018:	88510904 	.word	0x88510904
   1f01c:	45913204 	.word	0x45913204
   1f020:	d1fa4408 	.word	0xd1fa4408
   1f024:	f8b11929 	.word	0xf8b11929
   1f028:	4482a002 	.word	0x4482a002
   1f02c:	d9184582 	.word	0xd9184582
   1f030:	f85c0941 	.word	0xf85c0941
   1f034:	f0002021 	.word	0xf0002021
   1f038:	fa22041f 	.word	0xfa22041f
   1f03c:	f019f904 	.word	0xf019f904
   1f040:	d0070f01 	.word	0xd0070f01
   1f044:	f85ce013 	.word	0xf85ce013
   1f048:	fa222021 	.word	0xfa222021
   1f04c:	f019f904 	.word	0xf019f904
   1f050:	d10c0f01 	.word	0xd10c0f01
   1f054:	45823001 	.word	0x45823001
   1f058:	1150ea4f 	.word	0x1150ea4f
   1f05c:	041ff000 	.word	0x041ff000
   1f060:	3601d1f1 	.word	0x3601d1f1
   1f064:	f108455e 	.word	0xf108455e
   1f068:	d3c40808 	.word	0xd3c40808
   1f06c:	2601e7b6 	.word	0x2601e7b6
   1f070:	f404fa06 	.word	0xf404fa06
   1f074:	ea22899e 	.word	0xea22899e
   1f078:	eba00204 	.word	0xeba00204
   1f07c:	f84c000e 	.word	0xf84c000e
   1f080:	685c2021 	.word	0x685c2021
   1f084:	d0a92e00 	.word	0xd0a92e00
   1f088:	4282886a 	.word	0x4282886a
   1f08c:	2100d811 	.word	0x2100d811
   1f090:	e0031d2b 	.word	0xe0031d2b
   1f094:	3304885a 	.word	0x3304885a
   1f098:	d80a4282 	.word	0xd80a4282
   1f09c:	5c04f833 	.word	0x5c04f833
   1f0a0:	428e3101 	.word	0x428e3101
   1f0a4:	4405fb02 	.word	0x4405fb02
   1f0a8:	0002eba0 	.word	0x0002eba0
   1f0ac:	d1f1461d 	.word	0xd1f1461d
   1f0b0:	882be794 	.word	0x882be794
   1f0b4:	4003fb00 	.word	0x4003fb00
   1f0b8:	e8bdb003 	.word	0xe8bdb003
   1f0bc:	46708ff0 	.word	0x46708ff0
   1f0c0:	f1bbe7b0 	.word	0xf1bbe7b0
   1f0c4:	bf080f10 	.word	0xbf080f10
   1f0c8:	d090260f 	.word	0xd090260f
   1f0cc:	bf00e786 	.word	0xbf00e786
   1f0d0:	200218d8 	.word	0x200218d8
   1f0d4:	2002189c 	.word	0x2002189c
   1f0d8:	20021858 	.word	0x20021858

0001f0dc <mem_alloc.constprop.4>:
   1f0dc:	d04c2800 	.word	0xd04c2800
   1f0e0:	681a4b6b 	.word	0x681a4b6b
   1f0e4:	d8484290 	.word	0xd8484290
   1f0e8:	4ff0e92d 	.word	0x4ff0e92d
   1f0ec:	b083685f 	.word	0xb083685f
   1f0f0:	2f009700 	.word	0x2f009700
   1f0f4:	1e7ad051 	.word	0x1e7ad051
   1f0f8:	21004696 	.word	0x21004696
   1f0fc:	0c01f04f 	.word	0x0c01f04f
   1f100:	92014c64 	.word	0x92014c64
   1f104:	020eeb01 	.word	0x020eeb01
   1f108:	f8533201 	.word	0xf8533201
   1f10c:	0852503c 	.word	0x0852503c
   1f110:	0801f102 	.word	0x0801f102
   1f114:	0545eb05 	.word	0x0545eb05
   1f118:	9037f853 	.word	0x9037f853
   1f11c:	a025f854 	.word	0xa025f854
   1f120:	6038f853 	.word	0x6038f853
   1f124:	0549eb09 	.word	0x0549eb09
   1f128:	09cceb03 	.word	0x09cceb03
   1f12c:	9004f8d9 	.word	0x9004f8d9
   1f130:	0646eb06 	.word	0x0646eb06
   1f134:	a010f8da 	.word	0xa010f8da
   1f138:	6026f854 	.word	0x6026f854
   1f13c:	5025f854 	.word	0x5025f854
   1f140:	a029f83a 	.word	0xa029f83a
   1f144:	0bc8eb03 	.word	0x0bc8eb03
   1f148:	09c7eb03 	.word	0x09c7eb03
   1f14c:	f8db6936 	.word	0xf8db6936
   1f150:	692db004 	.word	0x692db004
   1f154:	9004f8d9 	.word	0x9004f8d9
   1f158:	f8364550 	.word	0xf8364550
   1f15c:	f835602b 	.word	0xf835602b
   1f160:	d9135029 	.word	0xd9135029
   1f164:	d21042a8 	.word	0xd21042a8
   1f168:	d90842b0 	.word	0xd90842b0
   1f16c:	464145c6 	.word	0x464145c6
   1f170:	8087f0c0 	.word	0x8087f0c0
   1f174:	0c01f108 	.word	0x0c01f108
   1f178:	2000e7c4 	.word	0x2000e7c4
   1f17c:	f1024770 	.word	0xf1024770
   1f180:	45713eff 	.word	0x45713eff
   1f184:	4617d87d 	.word	0x4617d87d
   1f188:	4639e7bc 	.word	0x4639e7bc
   1f18c:	428a9a00 	.word	0x428a9a00
   1f190:	2910d007 	.word	0x2910d007
   1f194:	428ad001 	.word	0x428ad001
   1f198:	2000d808 	.word	0x2000d808
   1f19c:	e8bdb003 	.word	0xe8bdb003
   1f1a0:	9a018ff0 	.word	0x9a018ff0
   1f1a4:	bf182a10 	.word	0xbf182a10
   1f1a8:	d0f64611 	.word	0xd0f64611
   1f1ac:	c0e8f8df 	.word	0xc0e8f8df
   1f1b0:	9000f8dd 	.word	0x9000f8dd
   1f1b4:	08c1eb03 	.word	0x08c1eb03
   1f1b8:	2602e9d8 	.word	0x2602e9d8
   1f1bc:	0242eb02 	.word	0x0242eb02
   1f1c0:	3022f854 	.word	0x3022f854
   1f1c4:	0282eb04 	.word	0x0282eb04
   1f1c8:	e004f8d2 	.word	0xe004f8d2
   1f1cc:	2e00691f 	.word	0x2e00691f
   1f1d0:	463ad055 	.word	0x463ad055
   1f1d4:	00b64670 	.word	0x00b64670
   1f1d8:	0a06eb07 	.word	0x0a06eb07
   1f1dc:	32048855 	.word	0x32048855
   1f1e0:	44284592 	.word	0x44284592
   1f1e4:	19bdd1fa 	.word	0x19bdd1fa
   1f1e8:	b002f8b5 	.word	0xb002f8b5
   1f1ec:	45834483 	.word	0x45834483
   1f1f0:	0945d918 	.word	0x0945d918
   1f1f4:	2025f85c 	.word	0x2025f85c
   1f1f8:	061ff000 	.word	0x061ff000
   1f1fc:	fa06fa22 	.word	0xfa06fa22
   1f200:	0f01f01a 	.word	0x0f01f01a
   1f204:	e013d007 	.word	0xe013d007
   1f208:	2025f85c 	.word	0x2025f85c
   1f20c:	fa06fa22 	.word	0xfa06fa22
   1f210:	0f01f01a 	.word	0x0f01f01a
   1f214:	3001d10c 	.word	0x3001d10c
   1f218:	ea4f4583 	.word	0xea4f4583
   1f21c:	f0001550 	.word	0xf0001550
   1f220:	d1f1061f 	.word	0xd1f1061f
   1f224:	45493101 	.word	0x45493101
   1f228:	0808f108 	.word	0x0808f108
   1f22c:	e7b4d3c4 	.word	0xe7b4d3c4
   1f230:	40b12101 	.word	0x40b12101
   1f234:	ea22899e 	.word	0xea22899e
   1f238:	eba00201 	.word	0xeba00201
   1f23c:	f84c000e 	.word	0xf84c000e
   1f240:	685c2025 	.word	0x685c2025
   1f244:	d0a82e00 	.word	0xd0a82e00
   1f248:	4282887a 	.word	0x4282887a
   1f24c:	2100d811 	.word	0x2100d811
   1f250:	e0031d3b 	.word	0xe0031d3b
   1f254:	3304885a 	.word	0x3304885a
   1f258:	d80a4282 	.word	0xd80a4282
   1f25c:	5c04f833 	.word	0x5c04f833
   1f260:	428e3101 	.word	0x428e3101
   1f264:	0002eba0 	.word	0x0002eba0
   1f268:	4405fb02 	.word	0x4405fb02
   1f26c:	d1f1461f 	.word	0xd1f1461f
   1f270:	883be793 	.word	0x883be793
   1f274:	4003fb00 	.word	0x4003fb00
   1f278:	e8bdb003 	.word	0xe8bdb003
   1f27c:	46708ff0 	.word	0x46708ff0
   1f280:	9a00e7b1 	.word	0x9a00e7b1
   1f284:	bf082a10 	.word	0xbf082a10
   1f288:	d08f210f 	.word	0xd08f210f
   1f28c:	bf00e785 	.word	0xbf00e785
   1f290:	200218d8 	.word	0x200218d8
   1f294:	2002189c 	.word	0x2002189c
   1f298:	20021858 	.word	0x20021858

0001f29c <nrf_mem_init>:
   1f29c:	2200b570 	.word	0x2200b570
   1f2a0:	48332501 	.word	0x48332501
   1f2a4:	f8500951 	.word	0xf8500951
   1f2a8:	f0024021 	.word	0xf0024021
   1f2ac:	fa05031f 	.word	0xfa05031f
   1f2b0:	3201f303 	.word	0x3201f303
   1f2b4:	f5b24323 	.word	0xf5b24323
   1f2b8:	f8407f00 	.word	0xf8407f00
   1f2bc:	d1f13021 	.word	0xd1f13021
   1f2c0:	4b2c2400 	.word	0x4b2c2400
   1f2c4:	223c4621 	.word	0x223c4621
   1f2c8:	601c482b 	.word	0x601c482b
   1f2cc:	fb25f005 	.word	0xfb25f005
   1f2d0:	22052110 	.word	0x22052110
   1f2d4:	4e2a4b29 	.word	0x4e2a4b29
   1f2d8:	4400e9c3 	.word	0x4400e9c3
   1f2dc:	615960d9 	.word	0x615960d9
   1f2e0:	625961d9 	.word	0x625961d9
   1f2e4:	635962d9 	.word	0x635962d9
   1f2e8:	645963d9 	.word	0x645963d9
   1f2ec:	655964d9 	.word	0x655964d9
   1f2f0:	665965d9 	.word	0x665965d9
   1f2f4:	675966d9 	.word	0x675966d9
   1f2f8:	609a67d9 	.word	0x609a67d9
   1f2fc:	619a611a 	.word	0x619a611a
   1f300:	629a621a 	.word	0x629a621a
   1f304:	639a631a 	.word	0x639a631a
   1f308:	649a641a 	.word	0x649a641a
   1f30c:	659a651a 	.word	0x659a651a
   1f310:	669a661a 	.word	0x669a661a
   1f314:	679a671a 	.word	0x679a671a
   1f318:	2120e9c3 	.word	0x2120e9c3
   1f31c:	4422e9c3 	.word	0x4422e9c3
   1f320:	2124e9c3 	.word	0x2124e9c3
   1f324:	2126e9c3 	.word	0x2126e9c3
   1f328:	2128e9c3 	.word	0x2128e9c3
   1f32c:	212ae9c3 	.word	0x212ae9c3
   1f330:	212ce9c3 	.word	0x212ce9c3
   1f334:	212ee9c3 	.word	0x212ee9c3
   1f338:	2130e9c3 	.word	0x2130e9c3
   1f33c:	2132e9c3 	.word	0x2132e9c3
   1f340:	2134e9c3 	.word	0x2134e9c3
   1f344:	2136e9c3 	.word	0x2136e9c3
   1f348:	2138e9c3 	.word	0x2138e9c3
   1f34c:	213ae9c3 	.word	0x213ae9c3
   1f350:	213ce9c3 	.word	0x213ce9c3
   1f354:	213ee9c3 	.word	0x213ee9c3
   1f358:	1104f8c3 	.word	0x1104f8c3
   1f35c:	2100f8c3 	.word	0x2100f8c3
   1f360:	110cf8c3 	.word	0x110cf8c3
   1f364:	2108f8c3 	.word	0x2108f8c3
   1f368:	70354620 	.word	0x70354620
   1f36c:	bf00bd70 	.word	0xbf00bd70
   1f370:	20021858 	.word	0x20021858
   1f374:	20021898 	.word	0x20021898
   1f378:	2002189c 	.word	0x2002189c
   1f37c:	200218d8 	.word	0x200218d8
   1f380:	20027409 	.word	0x20027409

0001f384 <nrf_mem_register>:
   1f384:	4ff0e92d 	.word	0x4ff0e92d
   1f388:	b0874b87 	.word	0xb0874b87
   1f38c:	2b00781b 	.word	0x2b00781b
   1f390:	808cf000 	.word	0x808cf000
   1f394:	b321b328 	.word	0xb321b328
   1f398:	f8df780b 	.word	0xf8df780b
   1f39c:	eb038218 	.word	0xeb038218
   1f3a0:	eb081303 	.word	0xeb081303
   1f3a4:	685b03c3 	.word	0x685b03c3
   1f3a8:	c00cf8b1 	.word	0xc00cf8b1
   1f3ac:	2b104463 	.word	0x2b104463
   1f3b0:	f04fd811 	.word	0xf04fd811
   1f3b4:	46890a00 	.word	0x46890a00
   1f3b8:	4f7d4b7c 	.word	0x4f7d4b7c
   1f3bc:	ea4f681b 	.word	0xea4f681b
   1f3c0:	93000e8c 	.word	0x93000e8c
   1f3c4:	b19168b9 	.word	0xb19168b9
   1f3c8:	0a01f10a 	.word	0x0a01f10a
   1f3cc:	0f05f1ba 	.word	0x0f05f1ba
   1f3d0:	070cf107 	.word	0x070cf107
   1f3d4:	f248d1f6 	.word	0xf248d1f6
   1f3d8:	46581b07 	.word	0x46581b07
   1f3dc:	e8bdb007 	.word	0xe8bdb007
   1f3e0:	f2488ff0 	.word	0xf2488ff0
   1f3e4:	46581b0e 	.word	0x46581b0e
   1f3e8:	e8bdb007 	.word	0xe8bdb007
   1f3ec:	f1bc8ff0 	.word	0xf1bc8ff0
   1f3f0:	d0610f00 	.word	0xd0610f00
   1f3f4:	460c460d 	.word	0x460c460d
   1f3f8:	3010f8d9 	.word	0x3010f8d9
   1f3fc:	0b03eb0e 	.word	0x0b03eb0e
   1f400:	f833885a 	.word	0xf833885a
   1f404:	44156b04 	.word	0x44156b04
   1f408:	fb02459b 	.word	0xfb02459b
   1f40c:	d1f74406 	.word	0xd1f74406
   1f410:	3008f8d9 	.word	0x3008f8d9
   1f414:	d3d742a3 	.word	0xd3d742a3
   1f418:	442b9b00 	.word	0x442b9b00
   1f41c:	7f00f5b3 	.word	0x7f00f5b3
   1f420:	4c63d2d2 	.word	0x4c63d2d2
   1f424:	024aeb0a 	.word	0x024aeb0a
   1f428:	f8c00092 	.word	0xf8c00092
   1f42c:	18a0a000 	.word	0x18a0a000
   1f430:	9002f844 	.word	0x9002f844
   1f434:	468b9a00 	.word	0x468b9a00
   1f438:	2501e9c0 	.word	0x2501e9c0
   1f43c:	2001f899 	.word	0x2001f899
   1f440:	2a01485a 	.word	0x2a01485a
   1f444:	d0c86003 	.word	0xd0c86003
   1f448:	300cf8b9 	.word	0x300cf8b9
   1f44c:	d0c42b00 	.word	0xd0c42b00
   1f450:	f8cd2500 	.word	0xf8cd2500
   1f454:	f8cd9004 	.word	0xf8cd9004
   1f458:	f8cda00c 	.word	0xf8cda00c
   1f45c:	9b01b014 	.word	0x9b01b014
   1f460:	691a781f 	.word	0x691a781f
   1f464:	eb03013b 	.word	0xeb03013b
   1f468:	93000907 	.word	0x93000907
   1f46c:	03c9eb08 	.word	0x03c9eb08
   1f470:	f8326859 	.word	0xf8326859
   1f474:	91024025 	.word	0x91024025
   1f478:	9a03bb39 	.word	0x9a03bb39
   1f47c:	609a60dd 	.word	0x609a60dd
   1f480:	443b9b00 	.word	0x443b9b00
   1f484:	eb08461f 	.word	0xeb08461f
   1f488:	684b01c3 	.word	0x684b01c3
   1f48c:	2037f858 	.word	0x2037f858
   1f490:	42943301 	.word	0x42943301
   1f494:	d912604b 	.word	0xd912604b
   1f498:	f8489b01 	.word	0xf8489b01
   1f49c:	899b4037 	.word	0x899b4037
   1f4a0:	429d3501 	.word	0x429d3501
   1f4a4:	f8ddd3db 	.word	0xf8ddd3db
   1f4a8:	e796b014 	.word	0xe796b014
   1f4ac:	1b08f248 	.word	0x1b08f248
   1f4b0:	b0074658 	.word	0xb0074658
   1f4b4:	8ff0e8bd 	.word	0x8ff0e8bd
   1f4b8:	46659b00 	.word	0x46659b00
   1f4bc:	9b01e7ae 	.word	0x9b01e7ae
   1f4c0:	899b3501 	.word	0x899b3501
   1f4c4:	d8ca42ab 	.word	0xd8ca42ab
   1f4c8:	2600e7ed 	.word	0x2600e7ed
   1f4cc:	3afff101 	.word	0x3afff101
   1f4d0:	eb069504 	.word	0xeb069504
   1f4d4:	eb09000a 	.word	0xeb09000a
   1f4d8:	32010206 	.word	0x32010206
   1f4dc:	f8583001 	.word	0xf8583001
   1f4e0:	0840c032 	.word	0x0840c032
   1f4e4:	eb094d32 	.word	0xeb094d32
   1f4e8:	eb090100 	.word	0xeb090100
   1f4ec:	3101030a 	.word	0x3101030a
   1f4f0:	eb0c3301 	.word	0xeb0c3301
   1f4f4:	f8580c4c 	.word	0xf8580c4c
   1f4f8:	f855e031 	.word	0xf855e031
   1f4fc:	f858b02c 	.word	0xf858b02c
   1f500:	eb08c033 	.word	0xeb08c033
   1f504:	eb0e02c2 	.word	0xeb0e02c2
   1f508:	eb0c0e4e 	.word	0xeb0c0e4e
   1f50c:	f8db0c4c 	.word	0xf8db0c4c
   1f510:	6852b010 	.word	0x6852b010
   1f514:	e02ef855 	.word	0xe02ef855
   1f518:	c02cf855 	.word	0xc02cf855
   1f51c:	01c1eb08 	.word	0x01c1eb08
   1f520:	03c3eb08 	.word	0x03c3eb08
   1f524:	2022f83b 	.word	0x2022f83b
   1f528:	e010f8de 	.word	0xe010f8de
   1f52c:	f8dc6849 	.word	0xf8dc6849
   1f530:	685bc010 	.word	0x685bc010
   1f534:	f83e4294 	.word	0xf83e4294
   1f538:	f83c1021 	.word	0xf83c1021
   1f53c:	d92d3023 	.word	0xd92d3023
   1f540:	d22d429c 	.word	0xd22d429c
   1f544:	d924428c 	.word	0xd924428c
   1f548:	45b21c46 	.word	0x45b21c46
   1f54c:	2610d2c1 	.word	0x2610d2c1
   1f550:	9a029d04 	.word	0x9a029d04
   1f554:	d91142b2 	.word	0xd91142b2
   1f558:	443b9b00 	.word	0x443b9b00
   1f55c:	4433441a 	.word	0x4433441a
   1f560:	0ac2eb08 	.word	0x0ac2eb08
   1f564:	09c3eb08 	.word	0x09c3eb08
   1f568:	46512208 	.word	0x46512208
   1f56c:	0002eb0a 	.word	0x0002eb0a
   1f570:	0a08f1aa 	.word	0x0a08f1aa
   1f574:	f9a4f005 	.word	0xf9a4f005
   1f578:	d1f545d1 	.word	0xd1f545d1
   1f57c:	99039b00 	.word	0x99039b00
   1f580:	4433443b 	.word	0x4433443b
   1f584:	eb083301 	.word	0xeb083301
   1f588:	f84802c3 	.word	0xf84802c3
   1f58c:	60551033 	.word	0x60551033
   1f590:	f100e776 	.word	0xf100e776
   1f594:	45563aff 	.word	0x45563aff
   1f598:	e7d8d99b 	.word	0xe7d8d99b
   1f59c:	e7d89d04 	.word	0xe7d89d04
   1f5a0:	f10a9d04 	.word	0xf10a9d04
   1f5a4:	e7d40601 	.word	0xe7d40601
   1f5a8:	20027409 	.word	0x20027409
   1f5ac:	20021898 	.word	0x20021898
   1f5b0:	2002189c 	.word	0x2002189c
   1f5b4:	200218d8 	.word	0x200218d8

0001f5b8 <nrf_malloc>:
   1f5b8:	781b4b03 	.word	0x781b4b03
   1f5bc:	f7ffb10b 	.word	0xf7ffb10b
   1f5c0:	4618bd8d 	.word	0x4618bd8d
   1f5c4:	bf004770 	.word	0xbf004770
   1f5c8:	20027409 	.word	0x20027409

0001f5cc <nrf_calloc>:
   1f5cc:	4b08b538 	.word	0x4b08b538
   1f5d0:	b155781d 	.word	0xb155781d
   1f5d4:	f400fb01 	.word	0xf400fb01
   1f5d8:	f7ff4620 	.word	0xf7ff4620
   1f5dc:	4605fd7f 	.word	0x4605fd7f
   1f5e0:	4622b118 	.word	0x4622b118
   1f5e4:	f0052100 	.word	0xf0052100
   1f5e8:	4628f998 	.word	0x4628f998
   1f5ec:	bf00bd38 	.word	0xbf00bd38
   1f5f0:	20027409 	.word	0x20027409

0001f5f4 <nrf_free>:
   1f5f4:	781b4b04 	.word	0x781b4b04
   1f5f8:	b118b123 	.word	0xb118b123
   1f5fc:	20004601 	.word	0x20004601
   1f600:	bc1cf7ff 	.word	0xbc1cf7ff
   1f604:	bf004770 	.word	0xbf004770
   1f608:	20027409 	.word	0x20027409

0001f60c <nrf_shared_malloc>:
   1f60c:	781b4b03 	.word	0x781b4b03
   1f610:	f7ffb10b 	.word	0xf7ffb10b
   1f614:	4618bc7f 	.word	0x4618bc7f
   1f618:	bf004770 	.word	0xbf004770
   1f61c:	20027409 	.word	0x20027409

0001f620 <nrf_shared_free>:
   1f620:	781b4b04 	.word	0x781b4b04
   1f624:	b118b123 	.word	0xb118b123
   1f628:	20014601 	.word	0x20014601
   1f62c:	bc06f7ff 	.word	0xbc06f7ff
   1f630:	bf004770 	.word	0xbf004770
   1f634:	20027409 	.word	0x20027409

0001f638 <symbol_0003897>:
   1f638:	728cf44f 	.word	0x728cf44f
   1f63c:	f0052100 	.word	0xf0052100
   1f640:	bf00b96c 	.word	0xbf00b96c

0001f644 <symbol_0006f61>:
   1f644:	f44fb118 	.word	0xf44fb118
   1f648:	f7fc718c 	.word	0xf7fc718c
   1f64c:	4770b837 	.word	0x4770b837

0001f650 <symbol_000468b>:
   1f650:	f0002ac0 	.word	0xf0002ac0
   1f654:	f5b28184 	.word	0xf5b28184
   1f658:	f0007f80 	.word	0xf0007f80
   1f65c:	2a80817d 	.word	0x2a80817d
   1f660:	f06fd002 	.word	0xf06fd002
   1f664:	4770001f 	.word	0x4770001f
   1f668:	6003230a 	.word	0x6003230a
   1f66c:	4ff0e92d 	.word	0x4ff0e92d
   1f670:	f04f4607 	.word	0xf04f4607
   1f674:	f1000c00 	.word	0xf1000c00
   1f678:	b0850408 	.word	0xb0850408
   1f67c:	f8470952 	.word	0xf8470952
   1f680:	788b4f04 	.word	0x788b4f04
   1f684:	780e784d 	.word	0x780e784d
   1f688:	ea43041b 	.word	0xea43041b
   1f68c:	78cd2305 	.word	0x78cd2305
   1f690:	f10c4333 	.word	0xf10c4333
   1f694:	ea430c01 	.word	0xea430c01
   1f698:	45946305 	.word	0x45946305
   1f69c:	3f04f847 	.word	0x3f04f847
   1f6a0:	0104f101 	.word	0x0104f101
   1f6a4:	6803d3ed 	.word	0x6803d3ed
   1f6a8:	f0002b0c 	.word	0xf0002b0c
   1f6ac:	2b0e81bf 	.word	0x2b0e81bf
   1f6b0:	8158f000 	.word	0x8158f000
   1f6b4:	f0402b0a 	.word	0xf0402b0a
   1f6b8:	6944814b 	.word	0x6944814b
   1f6bc:	f3c44bd8 	.word	0xf3c44bd8
   1f6c0:	68812207 	.word	0x68812207
   1f6c4:	0e255c9a 	.word	0x0e255c9a
   1f6c8:	f0815d5e 	.word	0xf0815d5e
   1f6cc:	b2e50101 	.word	0xb2e50101
   1f6d0:	404a5d5d 	.word	0x404a5d5d
   1f6d4:	4107f3c4 	.word	0x4107f3c4
   1f6d8:	4206ea82 	.word	0x4206ea82
   1f6dc:	ea825c5e 	.word	0xea825c5e
   1f6e0:	68c16505 	.word	0x68c16505
   1f6e4:	2206ea85 	.word	0x2206ea85
   1f6e8:	40516907 	.word	0x40516907
   1f6ec:	0907ea81 	.word	0x0907ea81
   1f6f0:	0404ea89 	.word	0x0404ea89
   1f6f4:	2507f3c4 	.word	0x2507f3c4
   1f6f8:	0e265d5d 	.word	0x0e265d5d
   1f6fc:	f0825d9e 	.word	0xf0825d9e
   1f700:	ea850c02 	.word	0xea850c02
   1f704:	ea85050c 	.word	0xea85050c
   1f708:	b2e64506 	.word	0xb2e64506
   1f70c:	c006f813 	.word	0xc006f813
   1f710:	4607f3c4 	.word	0x4607f3c4
   1f714:	ea855d9e 	.word	0xea855d9e
   1f718:	ea85650c 	.word	0xea85650c
   1f71c:	406f2506 	.word	0x406f2506
   1f720:	0c04ea87 	.word	0x0c04ea87
   1f724:	2607f3cc 	.word	0x2607f3cc
   1f728:	ea4f5d9e 	.word	0xea4f5d9e
   1f72c:	f8136e1c 	.word	0xf8136e1c
   1f730:	f085e00e 	.word	0xf085e00e
   1f734:	ea860804 	.word	0xea860804
   1f738:	ea860608 	.word	0xea860608
   1f73c:	fa5f460e 	.word	0xfa5f460e
   1f740:	f813fe8c 	.word	0xf813fe8c
   1f744:	6182e00e 	.word	0x6182e00e
   1f748:	4207f3cc 	.word	0x4207f3cc
   1f74c:	660eea86 	.word	0x660eea86
   1f750:	e002f813 	.word	0xe002f813
   1f754:	0201ea85 	.word	0x0201ea85
   1f758:	260eea86 	.word	0x260eea86
   1f75c:	0802ea86 	.word	0x0802ea86
   1f760:	0e04ea88 	.word	0x0e04ea88
   1f764:	f3ce61c1 	.word	0xf3ce61c1
   1f768:	5c592107 	.word	0x5c592107
   1f76c:	6a1eea4f 	.word	0x6a1eea4f
   1f770:	a00af813 	.word	0xa00af813
   1f774:	0b08f086 	.word	0x0b08f086
   1f778:	010bea81 	.word	0x010bea81
   1f77c:	410aea81 	.word	0x410aea81
   1f780:	fa8efa5f 	.word	0xfa8efa5f
   1f784:	a00af813 	.word	0xa00af813
   1f788:	f3ce6244 	.word	0xf3ce6244
   1f78c:	5d1c4407 	.word	0x5d1c4407
   1f790:	610aea81 	.word	0x610aea81
   1f794:	2104ea81 	.word	0x2104ea81
   1f798:	0a07ea81 	.word	0x0a07ea81
   1f79c:	040eea8a 	.word	0x040eea8a
   1f7a0:	630762c2 	.word	0x630762c2
   1f7a4:	2207f3c4 	.word	0x2207f3c4
   1f7a8:	0707ea88 	.word	0x0707ea88
   1f7ac:	680ee9c0 	.word	0x680ee9c0
   1f7b0:	9020f8c0 	.word	0x9020f8c0
   1f7b4:	f8c06285 	.word	0xf8c06285
   1f7b8:	f8c0c034 	.word	0xf8c0c034
   1f7bc:	6407e044 	.word	0x6407e044
   1f7c0:	f8136481 	.word	0xf8136481
   1f7c4:	0e22c002 	.word	0x0e22c002
   1f7c8:	f0815c9a 	.word	0xf0815c9a
   1f7cc:	ea8c0510 	.word	0xea8c0510
   1f7d0:	ea8c0c05 	.word	0xea8c0c05
   1f7d4:	b2e24c02 	.word	0xb2e24c02
   1f7d8:	f3c45c9d 	.word	0xf3c45c9d
   1f7dc:	5c9a4207 	.word	0x5c9a4207
   1f7e0:	6c05ea8c 	.word	0x6c05ea8c
   1f7e4:	2c02ea8c 	.word	0x2c02ea8c
   1f7e8:	0108ea81 	.word	0x0108ea81
   1f7ec:	090cea81 	.word	0x090cea81
   1f7f0:	0209ea8e 	.word	0x0209ea8e
   1f7f4:	2507f3c2 	.word	0x2507f3c2
   1f7f8:	0e155d5e 	.word	0x0e155d5e
   1f7fc:	f08c5d5d 	.word	0xf08c5d5d
   1f800:	407e0720 	.word	0x407e0720
   1f804:	4605ea86 	.word	0x4605ea86
   1f808:	5d5db2d5 	.word	0x5d5db2d5
   1f80c:	f3c264c1 	.word	0xf3c264c1
   1f810:	5c594107 	.word	0x5c594107
   1f814:	6605ea86 	.word	0x6605ea86
   1f818:	2601ea86 	.word	0x2601ea86
   1f81c:	0e06ea8a 	.word	0x0e06ea8a
   1f820:	080eea82 	.word	0x080eea82
   1f824:	2107f3c8 	.word	0x2107f3c8
   1f828:	ea4f5c5f 	.word	0xea4f5c5f
   1f82c:	5c596118 	.word	0x5c596118
   1f830:	0540f086 	.word	0x0540f086
   1f834:	ea87406f 	.word	0xea87406f
   1f838:	fa5f4701 	.word	0xfa5f4701
   1f83c:	5c59f188 	.word	0x5c59f188
   1f840:	0509ea8a 	.word	0x0509ea8a
   1f844:	6701ea87 	.word	0x6701ea87
   1f848:	4107f3c8 	.word	0x4107f3c8
   1f84c:	f8c05c59 	.word	0xf8c05c59
   1f850:	ea87a050 	.word	0xea87a050
   1f854:	ea892701 	.word	0xea892701
   1f858:	66050a06 	.word	0x66050a06
   1f85c:	0507ea8a 	.word	0x0507ea8a
   1f860:	0105ea82 	.word	0x0105ea82
   1f864:	f3c16544 	.word	0xf3c16544
   1f868:	5d1c2407 	.word	0x5d1c2407
   1f86c:	6b11ea4f 	.word	0x6b11ea4f
   1f870:	b00bf813 	.word	0xb00bf813
   1f874:	f0876642 	.word	0xf0876642
   1f878:	40620280 	.word	0x40620280
   1f87c:	ea82b2cc 	.word	0xea82b2cc
   1f880:	f813420b 	.word	0xf813420b
   1f884:	f3c1b004 	.word	0xf3c1b004
   1f888:	5d1c4407 	.word	0x5d1c4407
   1f88c:	620bea82 	.word	0x620bea82
   1f890:	2204ea82 	.word	0x2204ea82
   1f894:	0402ea8e 	.word	0x0402ea8e
   1f898:	c058f8c0 	.word	0xc058f8c0
   1f89c:	0c04ea81 	.word	0x0c04ea81
   1f8a0:	67c56686 	.word	0x67c56686
   1f8a4:	0605ea8e 	.word	0x0605ea8e
   1f8a8:	40556787 	.word	0x40556787
   1f8ac:	2707f3cc 	.word	0x2707f3cc
   1f8b0:	ae1be9c0 	.word	0xae1be9c0
   1f8b4:	1084f8c0 	.word	0x1084f8c0
   1f8b8:	2088f8c0 	.word	0x2088f8c0
   1f8bc:	6080f8c0 	.word	0x6080f8c0
   1f8c0:	905cf8c0 	.word	0x905cf8c0
   1f8c4:	8074f8c0 	.word	0x8074f8c0
   1f8c8:	508cf8c0 	.word	0x508cf8c0
   1f8cc:	f0825dde 	.word	0xf0825dde
   1f8d0:	ea4f021b 	.word	0xea4f021b
   1f8d4:	f813671c 	.word	0xf813671c
   1f8d8:	4056e007 	.word	0x4056e007
   1f8dc:	f28cfa5f 	.word	0xf28cfa5f
   1f8e0:	f3cc5c9f 	.word	0xf3cc5c9f
   1f8e4:	5c9a4207 	.word	0x5c9a4207
   1f8e8:	460eea86 	.word	0x460eea86
   1f8ec:	6607ea86 	.word	0x6607ea86
   1f8f0:	2602ea86 	.word	0x2602ea86
   1f8f4:	40694075 	.word	0x40694075
   1f8f8:	2207f3c1 	.word	0x2207f3c1
   1f8fc:	0e0f5c9a 	.word	0x0e0f5c9a
   1f900:	f0865ddf 	.word	0xf0865ddf
   1f904:	ea820e36 	.word	0xea820e36
   1f908:	ea82020e 	.word	0xea82020e
   1f90c:	b2cf4207 	.word	0xb2cf4207
   1f910:	e007f813 	.word	0xe007f813
   1f914:	4707f3c1 	.word	0x4707f3c1
   1f918:	ea825ddf 	.word	0xea825ddf
   1f91c:	ea83630e 	.word	0xea83630e
   1f920:	ea832307 	.word	0xea832307
   1f924:	ea820204 	.word	0xea820204
   1f928:	e9c00e01 	.word	0xe9c00e01
   1f92c:	e9c06526 	.word	0xe9c06526
   1f930:	f8c02e2c 	.word	0xf8c02e2c
   1f934:	ea834090 	.word	0xea834090
   1f938:	406c0705 	.word	0x406c0705
   1f93c:	c094f8c0 	.word	0xc094f8c0
   1f940:	10a4f8c0 	.word	0x10a4f8c0
   1f944:	30a8f8c0 	.word	0x30a8f8c0
   1f948:	70acf8c0 	.word	0x70acf8c0
   1f94c:	40a0f8c0 	.word	0x40a0f8c0
   1f950:	b0052000 	.word	0xb0052000
   1f954:	8ff0e8bd 	.word	0x8ff0e8bd
   1f958:	6003230e 	.word	0x6003230e
   1f95c:	230ce686 	.word	0x230ce686
   1f960:	e6836003 	.word	0xe6836003
   1f964:	ce03e9d0 	.word	0xce03e9d0
   1f968:	8907e9d0 	.word	0x8907e9d0
   1f96c:	7205e9d0 	.word	0x7205e9d0
   1f970:	68836a46 	.word	0x68836a46
   1f974:	f8df4670 	.word	0xf8df4670
   1f978:	4d29a0b0 	.word	0x4d29a0b0
   1f97c:	c000f8cd 	.word	0xc000f8cd
   1f980:	bf04f85a 	.word	0xbf04f85a
   1f984:	2c07f3c6 	.word	0x2c07f3c6
   1f988:	e00cf815 	.word	0xe00cf815
   1f98c:	6c16ea4f 	.word	0x6c16ea4f
   1f990:	030bea83 	.word	0x030bea83
   1f994:	b00cf815 	.word	0xb00cf815
   1f998:	fc86fa5f 	.word	0xfc86fa5f
   1f99c:	0303ea8e 	.word	0x0303ea8e
   1f9a0:	c00cf815 	.word	0xc00cf815
   1f9a4:	4e07f3c6 	.word	0x4e07f3c6
   1f9a8:	430bea83 	.word	0x430bea83
   1f9ac:	e00ef815 	.word	0xe00ef815
   1f9b0:	630cea83 	.word	0x630cea83
   1f9b4:	ea839900 	.word	0xea839900
   1f9b8:	4059230e 	.word	0x4059230e
   1f9bc:	40474048 	.word	0x40474048
   1f9c0:	fc87fa5f 	.word	0xfc87fa5f
   1f9c4:	e00cf815 	.word	0xe00cf815
   1f9c8:	6c17ea4f 	.word	0x6c17ea4f
   1f9cc:	b00cf815 	.word	0xb00cf815
   1f9d0:	2c07f3c7 	.word	0x2c07f3c7
   1f9d4:	0202ea8e 	.word	0x0202ea8e
   1f9d8:	c00cf815 	.word	0xc00cf815
   1f9dc:	4e07f3c7 	.word	0x4e07f3c7
   1f9e0:	620bea82 	.word	0x620bea82
   1f9e4:	e00ef815 	.word	0xe00ef815
   1f9e8:	220cea82 	.word	0x220cea82
   1f9ec:	420eea82 	.word	0x420eea82
   1f9f0:	0802ea88 	.word	0x0802ea88
   1f9f4:	3108e9c4 	.word	0x3108e9c4
   1f9f8:	490a9100 	.word	0x490a9100
   1f9fc:	0908ea89 	.word	0x0908ea89
   1fa00:	0609ea86 	.word	0x0609ea86
   1fa04:	e9c4458a 	.word	0xe9c4458a
   1fa08:	e9c4070a 	.word	0xe9c4070a
   1fa0c:	e9c4960e 	.word	0xe9c4960e
   1fa10:	f104280c 	.word	0xf104280c
   1fa14:	d1b30420 	.word	0xd1b30420
   1fa18:	b0052000 	.word	0xb0052000
   1fa1c:	8ff0e8bd 	.word	0x8ff0e8bd
   1fa20:	00026e08 	.word	0x00026e08
   1fa24:	00027320 	.word	0x00027320
   1fa28:	00027304 	.word	0x00027304
   1fa2c:	4bb269c2 	.word	0x4bb269c2
   1fa30:	2407f3c2 	.word	0x2407f3c2
   1fa34:	5d1d6881 	.word	0x5d1d6881
   1fa38:	5d1e0e14 	.word	0x5d1e0e14
   1fa3c:	0101f081 	.word	0x0101f081
   1fa40:	5d1cb2d4 	.word	0x5d1cb2d4
   1fa44:	f3c2404d 	.word	0xf3c2404d
   1fa48:	5c594107 	.word	0x5c594107
   1fa4c:	4506ea85 	.word	0x4506ea85
   1fa50:	ea8568c7 	.word	0xea8568c7
   1fa54:	ea856504 	.word	0xea856504
   1fa58:	69012501 	.word	0x69012501
   1fa5c:	6946406f 	.word	0x6946406f
   1fa60:	0907ea81 	.word	0x0907ea81
   1fa64:	ea866984 	.word	0xea866984
   1fa68:	ea840609 	.word	0xea840609
   1fa6c:	ea820806 	.word	0xea820806
   1fa70:	f3c20208 	.word	0xf3c20208
   1fa74:	f8132407 	.word	0xf8132407
   1fa78:	ea4fe004 	.word	0xea4fe004
   1fa7c:	f8136c12 	.word	0xf8136c12
   1fa80:	f085a00c 	.word	0xf085a00c
   1fa84:	fa5f0402 	.word	0xfa5f0402
   1fa88:	ea8efc82 	.word	0xea8efc82
   1fa8c:	f8130404 	.word	0xf8130404
   1fa90:	f3c2e00c 	.word	0xf3c2e00c
   1fa94:	f8134c07 	.word	0xf8134c07
   1fa98:	ea84c00c 	.word	0xea84c00c
   1fa9c:	ea84440a 	.word	0xea84440a
   1faa0:	ea84640e 	.word	0xea84640e
   1faa4:	4061240c 	.word	0x4061240c
   1faa8:	460c9401 	.word	0x460c9401
   1faac:	62056981 	.word	0x62056981
   1fab0:	ea824061 	.word	0xea824061
   1fab4:	91030c01 	.word	0x91030c01
   1fab8:	2e07f3cc 	.word	0x2e07f3cc
   1fabc:	f8139901 	.word	0xf8139901
   1fac0:	ea4fe00e 	.word	0xea4fe00e
   1fac4:	f8136a1c 	.word	0xf8136a1c
   1fac8:	f081a00a 	.word	0xf081a00a
   1facc:	ea8e0b04 	.word	0xea8e0b04
   1fad0:	ea8e0e0b 	.word	0xea8e0e0b
   1fad4:	fa5f4a0a 	.word	0xfa5f4a0a
   1fad8:	f813fe8c 	.word	0xf813fe8c
   1fadc:	e9c0e00e 	.word	0xe9c0e00e
   1fae0:	ea8a960a 	.word	0xea8a960a
   1fae4:	f3cc650e 	.word	0xf3cc650e
   1fae8:	f8134e07 	.word	0xf8134e07
   1faec:	ea87e00e 	.word	0xea87e00e
   1faf0:	ea850a01 	.word	0xea850a01
   1faf4:	ea8a250e 	.word	0xea8a250e
   1faf8:	ea860e05 	.word	0xea860e05
   1fafc:	9100010e 	.word	0x9100010e
   1fb00:	ea864621 	.word	0xea864621
   1fb04:	9c000904 	.word	0x9c000904
   1fb08:	820ce9c0 	.word	0x820ce9c0
   1fb0c:	0604ea82 	.word	0x0604ea82
   1fb10:	f8c06247 	.word	0xf8c06247
   1fb14:	9102a03c 	.word	0x9102a03c
   1fb18:	9f036401 	.word	0x9f036401
   1fb1c:	2407f3c6 	.word	0x2407f3c6
   1fb20:	080eea81 	.word	0x080eea81
   1fb24:	7c12e9c0 	.word	0x7c12e9c0
   1fb28:	ea4f5d1c 	.word	0xea4f5d1c
   1fb2c:	e9c06c16 	.word	0xe9c06c16
   1fb30:	f8c05e14 	.word	0xf8c05e14
   1fb34:	f0858058 	.word	0xf0858058
   1fb38:	f8130508 	.word	0xf8130508
   1fb3c:	fa5f800c 	.word	0xfa5f800c
   1fb40:	9901fc86 	.word	0x9901fc86
   1fb44:	c00cf813 	.word	0xc00cf813
   1fb48:	f3c64065 	.word	0xf3c64065
   1fb4c:	5d1c4407 	.word	0x5d1c4407
   1fb50:	4508ea85 	.word	0x4508ea85
   1fb54:	ea856381 	.word	0xea856381
   1fb58:	9902650c 	.word	0x9902650c
   1fb5c:	2504ea85 	.word	0x2504ea85
   1fb60:	91014069 	.word	0x91014069
   1fb64:	69844639 	.word	0x69844639
   1fb68:	9044f8c0 	.word	0x9044f8c0
   1fb6c:	0805ea84 	.word	0x0805ea84
   1fb70:	0908ea86 	.word	0x0908ea86
   1fb74:	2407f3c9 	.word	0x2407f3c9
   1fb78:	a004f813 	.word	0xa004f813
   1fb7c:	6419ea4f 	.word	0x6419ea4f
   1fb80:	f0855d1c 	.word	0xf0855d1c
   1fb84:	ea8a0c10 	.word	0xea8a0c10
   1fb88:	fa5f0c0c 	.word	0xfa5f0c0c
   1fb8c:	f813fa89 	.word	0xf813fa89
   1fb90:	ea8ca00a 	.word	0xea8ca00a
   1fb94:	f3c94c04 	.word	0xf3c94c04
   1fb98:	5d1c4407 	.word	0x5d1c4407
   1fb9c:	6c0aea8c 	.word	0x6c0aea8c
   1fba0:	0e05ea8e 	.word	0x0e05ea8e
   1fba4:	2c04ea8c 	.word	0x2c04ea8c
   1fba8:	040cea8e 	.word	0x040cea8e
   1fbac:	f8c04062 	.word	0xf8c04062
   1fbb0:	f3c2e06c 	.word	0xf3c2e06c
   1fbb4:	f8132e07 	.word	0xf8132e07
   1fbb8:	ea4fe00e 	.word	0xea4fe00e
   1fbbc:	f8136a12 	.word	0xf8136a12
   1fbc0:	f08ca00a 	.word	0xf08ca00a
   1fbc4:	ea8e0b20 	.word	0xea8e0b20
   1fbc8:	ea8e0e0b 	.word	0xea8e0e0b
   1fbcc:	fa5f4a0a 	.word	0xfa5f4a0a
   1fbd0:	f813fe82 	.word	0xf813fe82
   1fbd4:	9f00e00e 	.word	0x9f00e00e
   1fbd8:	6a0eea8a 	.word	0x6a0eea8a
   1fbdc:	4e07f3c2 	.word	0x4e07f3c2
   1fbe0:	b00ef813 	.word	0xb00ef813
   1fbe4:	0e07ea81 	.word	0x0e07ea81
   1fbe8:	ea8a9901 	.word	0xea8a9901
   1fbec:	ea812b0b 	.word	0xea812b0b
   1fbf0:	9f000a0b 	.word	0x9f000a0b
   1fbf4:	e060f8c0 	.word	0xe060f8c0
   1fbf8:	0e0aea88 	.word	0x0e0aea88
   1fbfc:	664665c7 	.word	0x664665c7
   1fc00:	907cf8c0 	.word	0x907cf8c0
   1fc04:	060eea82 	.word	0x060eea82
   1fc08:	ea876701 	.word	0xea876701
   1fc0c:	404f0904 	.word	0x404f0904
   1fc10:	66854061 	.word	0x66854061
   1fc14:	1088f8c0 	.word	0x1088f8c0
   1fc18:	2507f3c6 	.word	0x2507f3c6
   1fc1c:	0109ea88 	.word	0x0109ea88
   1fc20:	1090f8c0 	.word	0x1090f8c0
   1fc24:	0e315d5d 	.word	0x0e315d5d
   1fc28:	f8c05c59 	.word	0xf8c05c59
   1fc2c:	f8c04084 	.word	0xf8c04084
   1fc30:	ea84b098 	.word	0xea84b098
   1fc34:	6747040b 	.word	0x6747040b
   1fc38:	0b40f08b 	.word	0x0b40f08b
   1fc3c:	5ddfb2f7 	.word	0x5ddfb2f7
   1fc40:	60acf8c0 	.word	0x60acf8c0
   1fc44:	050bea85 	.word	0x050bea85
   1fc48:	4607f3c6 	.word	0x4607f3c6
   1fc4c:	4501ea85 	.word	0x4501ea85
   1fc50:	ea855d99 	.word	0xea855d99
   1fc54:	ea856507 	.word	0xea856507
   1fc58:	f8c02501 	.word	0xf8c02501
   1fc5c:	406c409c 	.word	0x406c409c
   1fc60:	0604ea89 	.word	0x0604ea89
   1fc64:	2094f8c0 	.word	0x2094f8c0
   1fc68:	f3c24072 	.word	0xf3c24072
   1fc6c:	f8c02107 	.word	0xf8c02107
   1fc70:	5c59c080 	.word	0x5c59c080
   1fc74:	0c0aea89 	.word	0x0c0aea89
   1fc78:	f8c00e17 	.word	0xf8c00e17
   1fc7c:	f8c0908c 	.word	0xf8c0908c
   1fc80:	f813c0a4 	.word	0xf813c0a4
   1fc84:	f0859007 	.word	0xf0859007
   1fc88:	b2d70c80 	.word	0xb2d70c80
   1fc8c:	010cea81 	.word	0x010cea81
   1fc90:	c007f813 	.word	0xc007f813
   1fc94:	4707f3c2 	.word	0x4707f3c2
   1fc98:	ea815ddf 	.word	0xea815ddf
   1fc9c:	ea814109 	.word	0xea814109
   1fca0:	ea83630c 	.word	0xea83630c
   1fca4:	f8c02307 	.word	0xf8c02307
   1fca8:	ea838078 	.word	0xea838078
   1fcac:	ea830c0a 	.word	0xea830c0a
   1fcb0:	f8c00808 	.word	0xf8c00808
   1fcb4:	ea8ee0a8 	.word	0xea8ee0a8
   1fcb8:	ea880706 	.word	0xea880706
   1fcbc:	ea8c0b02 	.word	0xea8c0b02
   1fcc0:	ea830906 	.word	0xea830906
   1fcc4:	ea8a0e04 	.word	0xea8a0e04
   1fcc8:	f8c00104 	.word	0xf8c00104
   1fccc:	e9c0a0a0 	.word	0xe9c0a0a0
   1fcd0:	f8c07230 	.word	0xf8c07230
   1fcd4:	e9c060bc 	.word	0xe9c060bc
   1fcd8:	e9c0542c 	.word	0xe9c0542c
   1fcdc:	f8c08b36 	.word	0xf8c08b36
   1fce0:	e9c030c8 	.word	0xe9c030c8
   1fce4:	f8c0c934 	.word	0xf8c0c934
   1fce8:	f8c0e0cc 	.word	0xf8c0e0cc
   1fcec:	200010b8 	.word	0x200010b8
   1fcf0:	e8bdb005 	.word	0xe8bdb005
   1fcf4:	bf008ff0 	.word	0xbf008ff0
   1fcf8:	00026e08 	.word	0x00026e08

0001fcfc <symbol_000e9b3>:
   1fcfc:	4ff0e92d 	.word	0x4ff0e92d
   1fd00:	0400e9d0 	.word	0x0400e9d0
   1fd04:	46061040 	.word	0x46061040
   1fd08:	f8d16823 	.word	0xf8d16823
   1fd0c:	b089a000 	.word	0xb089a000
   1fd10:	0a03ea8a 	.word	0x0a03ea8a
   1fd14:	800cf8d1 	.word	0x800cf8d1
   1fd18:	3e0168e3 	.word	0x3e0168e3
   1fd1c:	68659006 	.word	0x68659006
   1fd20:	68a0684f 	.word	0x68a0684f
   1fd24:	688a9205 	.word	0x688a9205
   1fd28:	0803ea88 	.word	0x0803ea88
   1fd2c:	f1042e00 	.word	0xf1042e00
   1fd30:	96010310 	.word	0x96010310
   1fd34:	0507ea85 	.word	0x0507ea85
   1fd38:	0200ea82 	.word	0x0200ea82
   1fd3c:	f8df9304 	.word	0xf8df9304
   1fd40:	f340b3e8 	.word	0xf340b3e8
   1fd44:	462b80db 	.word	0x462b80db
   1fd48:	0930f104 	.word	0x0930f104
   1fd4c:	f18afa5f 	.word	0xf18afa5f
   1fd50:	f788fa5f 	.word	0xf788fa5f
   1fd54:	b2d4b2de 	.word	0xb2d4b2de
   1fd58:	0021f85b 	.word	0x0021f85b
   1fd5c:	5027f85b 	.word	0x5027f85b
   1fd60:	7026f85b 	.word	0x7026f85b
   1fd64:	6024f85b 	.word	0x6024f85b
   1fd68:	4c20f859 	.word	0x4c20f859
   1fd6c:	6118ea4f 	.word	0x6118ea4f
   1fd70:	0c04ea80 	.word	0x0c04ea80
   1fd74:	0c14f859 	.word	0x0c14f859
   1fd78:	1021f85b 	.word	0x1021f85b
   1fd7c:	0e00ea85 	.word	0x0e00ea85
   1fd80:	f85b0e10 	.word	0xf85b0e10
   1fd84:	f3c35020 	.word	0xf3c35020
   1fd88:	ea8c2407 	.word	0xea8c2407
   1fd8c:	f3c22c31 	.word	0xf3c22c31
   1fd90:	f3c24107 	.word	0xf3c24107
   1fd94:	f85b2207 	.word	0xf85b2207
   1fd98:	f85b4024 	.word	0xf85b4024
   1fd9c:	ea8e0022 	.word	0xea8e0022
   1fda0:	0e1d2235 	.word	0x0e1d2235
   1fda4:	4307f3c3 	.word	0x4307f3c3
   1fda8:	3023f85b 	.word	0x3023f85b
   1fdac:	6c34ea8c 	.word	0x6c34ea8c
   1fdb0:	4c18f859 	.word	0x4c18f859
   1fdb4:	f85b9302 	.word	0xf85b9302
   1fdb8:	f8595025 	.word	0xf8595025
   1fdbc:	ea4f3c1c 	.word	0xea4f3c1c
   1fdc0:	f85b6e1a 	.word	0xf85b6e1a
   1fdc4:	4066e02e 	.word	0x4066e02e
   1fdc8:	f3ca405f 	.word	0xf3ca405f
   1fdcc:	ea862407 	.word	0xea862407
   1fdd0:	f3c82635 	.word	0xf3c82635
   1fdd4:	f3c82507 	.word	0xf3c82507
   1fdd8:	ea874807 	.word	0xea874807
   1fddc:	f85b273e 	.word	0xf85b273e
   1fde0:	f85b4024 	.word	0xf85b4024
   1fde4:	f85be025 	.word	0xf85be025
   1fde8:	9b025028 	.word	0x9b025028
   1fdec:	6030ea87 	.word	0x6030ea87
   1fdf0:	4035ea80 	.word	0x4035ea80
   1fdf4:	1021f85b 	.word	0x1021f85b
   1fdf8:	6434ea82 	.word	0x6434ea82
   1fdfc:	4433ea84 	.word	0x4433ea84
   1fe00:	ea8cb2c3 	.word	0xea8cb2c3
   1fe04:	f85b4131 	.word	0xf85b4131
   1fe08:	f3ca3023 	.word	0xf3ca3023
   1fe0c:	f85b4a07 	.word	0xf85b4a07
   1fe10:	b2ca702a 	.word	0xb2ca702a
   1fe14:	6c14ea4f 	.word	0x6c14ea4f
   1fe18:	2022f85b 	.word	0x2022f85b
   1fe1c:	663eea86 	.word	0x663eea86
   1fe20:	f8599302 	.word	0xf8599302
   1fe24:	ea863c10 	.word	0xea863c10
   1fe28:	f85b4637 	.word	0xf85b4637
   1fe2c:	f3c0e02c 	.word	0xf3c0e02c
   1fe30:	f85b2707 	.word	0xf85b2707
   1fe34:	ea82c027 	.word	0xea82c027
   1fe38:	f3c60a03 	.word	0xf3c60a03
   1fe3c:	f3c64507 	.word	0xf3c64507
   1fe40:	f85b2207 	.word	0xf85b2207
   1fe44:	f85b3022 	.word	0xf85b3022
   1fe48:	ea8a5025 	.word	0xea8a5025
   1fe4c:	f3c42a3e 	.word	0xf3c42a3e
   1fe50:	0e0f4207 	.word	0x0e0f4207
   1fe54:	6a3cea8a 	.word	0x6a3cea8a
   1fe58:	7027f85b 	.word	0x7027f85b
   1fe5c:	ea8a9303 	.word	0xea8a9303
   1fe60:	f85b4a35 	.word	0xf85b4a35
   1fe64:	f8598022 	.word	0xf8598022
   1fe68:	9b025c0c 	.word	0x9b025c0c
   1fe6c:	406bb2f2 	.word	0x406bb2f2
   1fe70:	2022f85b 	.word	0x2022f85b
   1fe74:	2337ea83 	.word	0x2337ea83
   1fe78:	7c08f859 	.word	0x7c08f859
   1fe7c:	fc84fa5f 	.word	0xfc84fa5f
   1fe80:	2407f3c4 	.word	0x2407f3c4
   1fe84:	502cf85b 	.word	0x502cf85b
   1fe88:	0e364057 	.word	0x0e364057
   1fe8c:	2024f85b 	.word	0x2024f85b
   1fe90:	4c04f859 	.word	0x4c04f859
   1fe94:	6e10ea4f 	.word	0x6e10ea4f
   1fe98:	6026f85b 	.word	0x6026f85b
   1fe9c:	f85b406c 	.word	0xf85b406c
   1fea0:	ea84e02e 	.word	0xea84e02e
   1fea4:	f3c12636 	.word	0xf3c12636
   1fea8:	f3c12407 	.word	0xf3c12407
   1feac:	f85b4107 	.word	0xf85b4107
   1feb0:	ea871021 	.word	0xea871021
   1feb4:	ea8e2e3e 	.word	0xea8e2e3e
   1feb8:	f3c06232 	.word	0xf3c06232
   1febc:	f85b4007 	.word	0xf85b4007
   1fec0:	9d034024 	.word	0x9d034024
   1fec4:	4231ea82 	.word	0x4231ea82
   1fec8:	f85b9901 	.word	0xf85b9901
   1fecc:	ea830020 	.word	0xea830020
   1fed0:	ea866335 	.word	0xea866335
   1fed4:	39016634 	.word	0x39016634
   1fed8:	4338ea83 	.word	0x4338ea83
   1fedc:	0920f109 	.word	0x0920f109
   1fee0:	4830ea86 	.word	0x4830ea86
   1fee4:	f47f9101 	.word	0xf47f9101
   1fee8:	461daf31 	.word	0x461daf31
   1feec:	99049b06 	.word	0x99049b06
   1fef0:	6300f103 	.word	0x6300f103
   1fef4:	eb013b01 	.word	0xeb013b01
   1fef8:	93041343 	.word	0x93041343
   1fefc:	fa5f2400 	.word	0xfa5f2400
   1ff00:	f85bf38a 	.word	0xf85bf38a
   1ff04:	9b047023 	.word	0x9b047023
   1ff08:	fa5f46a1 	.word	0xfa5f46a1
   1ff0c:	6819fc85 	.word	0x6819fc85
   1ff10:	6318ea4f 	.word	0x6318ea4f
   1ff14:	46a69407 	.word	0x46a69407
   1ff18:	402cf85b 	.word	0x402cf85b
   1ff1c:	c023f85b 	.word	0xc023f85b
   1ff20:	f3c54079 	.word	0xf3c54079
   1ff24:	f85b2307 	.word	0xf85b2307
   1ff28:	f3c23023 	.word	0xf3c23023
   1ff2c:	ea814707 	.word	0xea814707
   1ff30:	fa5f213c 	.word	0xfa5f213c
   1ff34:	f85bfc82 	.word	0xf85bfc82
   1ff38:	f85b002c 	.word	0xf85b002c
   1ff3c:	ea817027 	.word	0xea817027
   1ff40:	90036133 	.word	0x90036133
   1ff44:	4037ea81 	.word	0x4037ea81
   1ff48:	fa5f9f04 	.word	0xfa5f9f04
   1ff4c:	f85bf688 	.word	0xf85bf688
   1ff50:	68fb6026 	.word	0x68fb6026
   1ff54:	40739001 	.word	0x40739001
   1ff58:	f85b0e16 	.word	0xf85b0e16
   1ff5c:	98046026 	.word	0x98046026
   1ff60:	2636ea83 	.word	0x2636ea83
   1ff64:	f85b0e2b 	.word	0xf85b0e2b
   1ff68:	f3c53023 	.word	0xf3c53023
   1ff6c:	496d4507 	.word	0x496d4507
   1ff70:	7025f85b 	.word	0x7025f85b
   1ff74:	f89d9306 	.word	0xf89d9306
   1ff78:	6843c004 	.word	0x6843c004
   1ff7c:	651aea4f 	.word	0x651aea4f
   1ff80:	5025f85b 	.word	0x5025f85b
   1ff84:	2207f3c2 	.word	0x2207f3c2
   1ff88:	2022f85b 	.word	0x2022f85b
   1ff8c:	c00cf811 	.word	0xc00cf811
   1ff90:	69044063 	.word	0x69044063
   1ff94:	2535ea83 	.word	0x2535ea83
   1ff98:	2307f3ca 	.word	0x2307f3ca
   1ff9c:	3023f85b 	.word	0x3023f85b
   1ffa0:	0c04ea8c 	.word	0x0c04ea8c
   1ffa4:	6532ea85 	.word	0x6532ea85
   1ffa8:	68829c03 	.word	0x68829c03
   1ffac:	6633ea86 	.word	0x6633ea86
   1ffb0:	f3c84660 	.word	0xf3c84660
   1ffb4:	ea842307 	.word	0xea842307
   1ffb8:	9c060c02 	.word	0x9c060c02
   1ffbc:	3023f85b 	.word	0x3023f85b
   1ffc0:	4a07f3ca 	.word	0x4a07f3ca
   1ffc4:	202af85b 	.word	0x202af85b
   1ffc8:	2c34ea8c 	.word	0x2c34ea8c
   1ffcc:	4807f3c8 	.word	0x4807f3c8
   1ffd0:	4637ea86 	.word	0x4637ea86
   1ffd4:	6c33ea8c 	.word	0x6c33ea8c
   1ffd8:	7028f85b 	.word	0x7028f85b
   1ffdc:	4232ea8c 	.word	0x4232ea8c
   1ffe0:	4537ea85 	.word	0x4537ea85
   1ffe4:	4c07f3c2 	.word	0x4c07f3c2
   1ffe8:	5ccb0e33 	.word	0x5ccb0e33
   1ffec:	a00cf811 	.word	0xa00cf811
   1fff0:	fc85fa5f 	.word	0xfc85fa5f
   1fff4:	400cf811 	.word	0x400cf811
   1fff8:	2707f3c5 	.word	0x2707f3c5
   1fffc:	464c9403 	.word	0x464c9403
   20000:	ea805dcf 	.word	0xea805dcf
   20004:	98016303 	.word	0x98016303
   20008:	2307ea83 	.word	0x2307ea83
   2000c:	fb82fa5f 	.word	0xfb82fa5f
   20010:	430aea83 	.word	0x430aea83
   20014:	b00bf811 	.word	0xb00bf811
   20018:	6c10ea4f 	.word	0x6c10ea4f
   2001c:	f3639804 	.word	0xf3639804
   20020:	f8110407 	.word	0xf8110407
   20024:	f8cd800c 	.word	0xf8cd800c
   20028:	9402b018 	.word	0x9402b018
   2002c:	2c07f3c2 	.word	0x2c07f3c2
   20030:	ea4f9c03 	.word	0xea4f9c03
   20034:	69426b12 	.word	0x69426b12
   20038:	c00cf811 	.word	0xc00cf811
   2003c:	f3c64062 	.word	0xf3c64062
   20040:	5dcf4707 	.word	0x5dcf4707
   20044:	6808ea82 	.word	0x6808ea82
   20048:	6a15ea4f 	.word	0x6a15ea4f
   2004c:	ea886982 	.word	0xea886982
   20050:	9c062c0c 	.word	0x9c062c0c
   20054:	f886fa5f 	.word	0xf886fa5f
   20058:	4707ea8c 	.word	0x4707ea8c
   2005c:	8008f811 	.word	0x8008f811
   20060:	c00af811 	.word	0xc00af811
   20064:	a01cf8d0 	.word	0xa01cf8d0
   20068:	40629801 	.word	0x40629801
   2006c:	0a0aea88 	.word	0x0a0aea88
   20070:	620cea82 	.word	0x620cea82
   20074:	4807f3c0 	.word	0x4807f3c0
   20078:	2c07f3c0 	.word	0x2c07f3c0
   2007c:	f8112000 	.word	0xf8112000
   20080:	f3c6b00b 	.word	0xf3c6b00b
   20084:	5d8e2607 	.word	0x5d8e2607
   20088:	6b0bea8a 	.word	0x6b0bea8a
   2008c:	4507f3c5 	.word	0x4507f3c5
   20090:	a00cf811 	.word	0xa00cf811
   20094:	f8115d4d 	.word	0xf8115d4d
   20098:	ea821008 	.word	0xea821008
   2009c:	ea8b2606 	.word	0xea8b2606
   200a0:	9c022b0a 	.word	0x9c022b0a
   200a4:	4b05ea8b 	.word	0x4b05ea8b
   200a8:	4601ea86 	.word	0x4601ea86
   200ac:	2c13ea4f 	.word	0x2c13ea4f
   200b0:	ea4f0a31 	.word	0xea4f0a31
   200b4:	f366221b 	.word	0xf366221b
   200b8:	f36b0e07 	.word	0xf36b0e07
   200bc:	f36c0007 	.word	0xf36c0007
   200c0:	ea4f240f 	.word	0xea4f240f
   200c4:	f3624c13 	.word	0xf3624c13
   200c8:	f361200f 	.word	0xf361200f
   200cc:	f36c2e0f 	.word	0xf36c2e0f
   200d0:	0c314417 	.word	0x0c314417
   200d4:	4e17f361 	.word	0x4e17f361
   200d8:	46204601 	.word	0x46204601
   200dc:	f3630e1b 	.word	0xf3630e1b
   200e0:	9b05601f 	.word	0x9b05601f
   200e4:	60180a3d 	.word	0x60180a3d
   200e8:	f3672000 	.word	0xf3672000
   200ec:	ea4f0907 	.word	0xea4f0907
   200f0:	f365421b 	.word	0xf365421b
   200f4:	0c3d290f 	.word	0x0c3d290f
   200f8:	4917f365 	.word	0x4917f365
   200fc:	0e360e3f 	.word	0x0e360e3f
   20100:	4117f362 	.word	0x4117f362
   20104:	6b1bea4f 	.word	0x6b1bea4f
   20108:	691ff367 	.word	0x691ff367
   2010c:	6e1ff366 	.word	0x6e1ff366
   20110:	611ff36b 	.word	0x611ff36b
   20114:	9004f8c3 	.word	0x9004f8c3
   20118:	e008f8c3 	.word	0xe008f8c3
   2011c:	b00960d9 	.word	0xb00960d9
   20120:	8ff0e8bd 	.word	0x8ff0e8bd
   20124:	00026e08 	.word	0x00026e08
   20128:	00026f08 	.word	0x00026f08

0002012c <symbol_000e471>:
   2012c:	4ff0e92d 	.word	0x4ff0e92d
   20130:	3500e9d0 	.word	0x3500e9d0
   20134:	682fb089 	.word	0x682fb089
   20138:	f8d1105b 	.word	0xf8d1105b
   2013c:	9306a000 	.word	0x9306a000
   20140:	684c3b01 	.word	0x684c3b01
   20144:	ea8a9301 	.word	0xea8a9301
   20148:	68eb0a07 	.word	0x68eb0a07
   2014c:	68c9688f 	.word	0x68c9688f
   20150:	40596868 	.word	0x40596868
   20154:	68ae9b01 	.word	0x68ae9b01
   20158:	2b009205 	.word	0x2b009205
   2015c:	0210f105 	.word	0x0210f105
   20160:	0004ea80 	.word	0x0004ea80
   20164:	0706ea87 	.word	0x0706ea87
   20168:	f8df9204 	.word	0xf8df9204
   2016c:	f340b3dc 	.word	0xf340b3dc
   20170:	46d180d7 	.word	0x46d180d7
   20174:	0830f105 	.word	0x0830f105
   20178:	f489fa5f 	.word	0xf489fa5f
   2017c:	5024f85b 	.word	0x5024f85b
   20180:	6c20f858 	.word	0x6c20f858
   20184:	fc80fa5f 	.word	0xfc80fa5f
   20188:	f85b0e04 	.word	0xf85b0e04
   2018c:	f85bc02c 	.word	0xf85bc02c
   20190:	406e4024 	.word	0x406e4024
   20194:	5c1cf858 	.word	0x5c1cf858
   20198:	2e07f3c1 	.word	0x2e07f3c1
   2019c:	a02ef85b 	.word	0xa02ef85b
   201a0:	0505ea8c 	.word	0x0505ea8c
   201a4:	2e34ea86 	.word	0x2e34ea86
   201a8:	b2fbb2ca 	.word	0xb2fbb2ca
   201ac:	6c17ea4f 	.word	0x6c17ea4f
   201b0:	4407f3c7 	.word	0x4407f3c7
   201b4:	2707f3c7 	.word	0x2707f3c7
   201b8:	6027f85b 	.word	0x6027f85b
   201bc:	2022f85b 	.word	0x2022f85b
   201c0:	7c14f858 	.word	0x7c14f858
   201c4:	3023f85b 	.word	0x3023f85b
   201c8:	ea4f407a 	.word	0xea4f407a
   201cc:	f85b6719 	.word	0xf85b6719
   201d0:	f85b7027 	.word	0xf85b7027
   201d4:	ea82c02c 	.word	0xea82c02c
   201d8:	ea822237 	.word	0xea822237
   201dc:	f8586636 	.word	0xf8586636
   201e0:	ea852c18 	.word	0xea852c18
   201e4:	ea8e2c3c 	.word	0xea8e2c3c
   201e8:	0e0d6e3a 	.word	0x0e0d6e3a
   201ec:	0a02ea83 	.word	0x0a02ea83
   201f0:	2307f3c9 	.word	0x2307f3c9
   201f4:	3023f85b 	.word	0x3023f85b
   201f8:	5025f85b 	.word	0x5025f85b
   201fc:	4107f3c1 	.word	0x4107f3c1
   20200:	1021f85b 	.word	0x1021f85b
   20204:	2707f3c0 	.word	0x2707f3c0
   20208:	2535ea8a 	.word	0x2535ea8a
   2020c:	4a07f3c0 	.word	0x4a07f3c0
   20210:	6033ea8c 	.word	0x6033ea8c
   20214:	4031ea80 	.word	0x4031ea80
   20218:	4024f85b 	.word	0x4024f85b
   2021c:	ea8e0e03 	.word	0xea8e0e03
   20220:	f85b4434 	.word	0xf85b4434
   20224:	b2e13023 	.word	0xb2e13023
   20228:	f3c99302 	.word	0xf3c99302
   2022c:	f8584907 	.word	0xf8584907
   20230:	f85b3c10 	.word	0xf85b3c10
   20234:	f85b1021 	.word	0xf85b1021
   20238:	f3c42029 	.word	0xf3c42029
   2023c:	f85b2c07 	.word	0xf85b2c07
   20240:	f85b9027 	.word	0xf85b9027
   20244:	4059702a 	.word	0x4059702a
   20248:	302cf85b 	.word	0x302cf85b
   2024c:	4637ea86 	.word	0x4637ea86
   20250:	6539ea85 	.word	0x6539ea85
   20254:	4532ea85 	.word	0x4532ea85
   20258:	2707f3c6 	.word	0x2707f3c6
   2025c:	9b029303 	.word	0x9b029303
   20260:	4e07f3c5 	.word	0x4e07f3c5
   20264:	7027f85b 	.word	0x7027f85b
   20268:	902ef85b 	.word	0x902ef85b
   2026c:	4c07f3c6 	.word	0x4c07f3c6
   20270:	ea4fb2c2 	.word	0xea4fb2c2
   20274:	ea816e15 	.word	0xea816e15
   20278:	b2e92333 	.word	0xb2e92333
   2027c:	a02cf85b 	.word	0xa02cf85b
   20280:	6337ea83 	.word	0x6337ea83
   20284:	2022f85b 	.word	0x2022f85b
   20288:	e02ef85b 	.word	0xe02ef85b
   2028c:	1021f85b 	.word	0x1021f85b
   20290:	7c0cf858 	.word	0x7c0cf858
   20294:	6c16ea4f 	.word	0x6c16ea4f
   20298:	b2f6407a 	.word	0xb2f6407a
   2029c:	2e3eea82 	.word	0x2e3eea82
   202a0:	2026f85b 	.word	0x2026f85b
   202a4:	6c08f858 	.word	0x6c08f858
   202a8:	4939ea83 	.word	0x4939ea83
   202ac:	40710e23 	.word	0x40710e23
   202b0:	6023f85b 	.word	0x6023f85b
   202b4:	3c04f858 	.word	0x3c04f858
   202b8:	702cf85b 	.word	0x702cf85b
   202bc:	f3c54053 	.word	0xf3c54053
   202c0:	ea832507 	.word	0xea832507
   202c4:	f85b2636 	.word	0xf85b2636
   202c8:	f3c05025 	.word	0xf3c05025
   202cc:	f3c02307 	.word	0xf3c02307
   202d0:	ea814007 	.word	0xea814007
   202d4:	f85b2137 	.word	0xf85b2137
   202d8:	f85b7023 	.word	0xf85b7023
   202dc:	ea863020 	.word	0xea863020
   202e0:	ea816635 	.word	0xea816635
   202e4:	f3c46737 	.word	0xf3c46737
   202e8:	9a034407 	.word	0x9a034407
   202ec:	4133ea86 	.word	0x4133ea86
   202f0:	f85b9b01 	.word	0xf85b9b01
   202f4:	ea8e4024 	.word	0xea8e4024
   202f8:	3b016e32 	.word	0x3b016e32
   202fc:	403aea8e 	.word	0x403aea8e
   20300:	4734ea87 	.word	0x4734ea87
   20304:	0820f108 	.word	0x0820f108
   20308:	f47f9301 	.word	0xf47f9301
   2030c:	46caaf35 	.word	0x46caaf35
   20310:	9a049b06 	.word	0x9a049b06
   20314:	6300f103 	.word	0x6300f103
   20318:	eb023b01 	.word	0xeb023b01
   2031c:	93041343 	.word	0x93041343
   20320:	f38afa5f 	.word	0xf38afa5f
   20324:	5023f85b 	.word	0x5023f85b
   20328:	fa5f9b04 	.word	0xfa5f9b04
   2032c:	681cf881 	.word	0x681cf881
   20330:	f85b0e03 	.word	0xf85b0e03
   20334:	f85b2028 	.word	0xf85b2028
   20338:	f3c18023 	.word	0xf3c18023
   2033c:	f85b2307 	.word	0xf85b2307
   20340:	406c3023 	.word	0x406c3023
   20344:	4507f3c7 	.word	0x4507f3c7
   20348:	5025f85b 	.word	0x5025f85b
   2034c:	2438ea84 	.word	0x2438ea84
   20350:	f887fa5f 	.word	0xf887fa5f
   20354:	6028f85b 	.word	0x6028f85b
   20358:	6433ea84 	.word	0x6433ea84
   2035c:	4535ea84 	.word	0x4535ea84
   20360:	462e9602 	.word	0x462e9602
   20364:	fa5f9c04 	.word	0xfa5f9c04
   20368:	f85bf980 	.word	0xf85bf980
   2036c:	68639029 	.word	0x68639029
   20370:	f85b0e3c 	.word	0xf85b0e3c
   20374:	96014024 	.word	0x96014024
   20378:	0303ea89 	.word	0x0303ea89
   2037c:	ea839e04 	.word	0xea839e04
   20380:	f3c72434 	.word	0xf3c72434
   20384:	0e0b2707 	.word	0x0e0b2707
   20388:	f85b4d6e 	.word	0xf85b4d6e
   2038c:	f89d9027 	.word	0xf89d9027
   20390:	f85b8004 	.word	0xf85b8004
   20394:	68f37023 	.word	0x68f37023
   20398:	0e00f04f 	.word	0x0e00f04f
   2039c:	8008f815 	.word	0x8008f815
   203a0:	69324053 	.word	0x69324053
   203a4:	4107f3c1 	.word	0x4107f3c1
   203a8:	0802ea88 	.word	0x0802ea88
   203ac:	97034642 	.word	0x97034642
   203b0:	7021f85b 	.word	0x7021f85b
   203b4:	611aea4f 	.word	0x611aea4f
   203b8:	1021f85b 	.word	0x1021f85b
   203bc:	e018f8cd 	.word	0xe018f8cd
   203c0:	2331ea83 	.word	0x2331ea83
   203c4:	6939ea83 	.word	0x6939ea83
   203c8:	2307f3ca 	.word	0x2307f3ca
   203cc:	3023f85b 	.word	0x3023f85b
   203d0:	9e0268b1 	.word	0x9e0268b1
   203d4:	6333ea84 	.word	0x6333ea84
   203d8:	4737ea83 	.word	0x4737ea83
   203dc:	0801ea86 	.word	0x0801ea86
   203e0:	2307f3c0 	.word	0x2307f3c0
   203e4:	f3ca9e03 	.word	0xf3ca9e03
   203e8:	f3c04a07 	.word	0xf3c04a07
   203ec:	f85b4007 	.word	0xf85b4007
   203f0:	f85b102a 	.word	0xf85b102a
   203f4:	f8cd4023 	.word	0xf8cd4023
   203f8:	f85be01c 	.word	0xf85be01c
   203fc:	0e383020 	.word	0x0e383020
   20400:	ea885c28 	.word	0xea885c28
   20404:	ea892836 	.word	0xea892836
   20408:	ea884933 	.word	0xea884933
   2040c:	ea886834 	.word	0xea886834
   20410:	f3c94131 	.word	0xf3c94131
   20414:	ea822407 	.word	0xea822407
   20418:	9a016000 	.word	0x9a016000
   2041c:	8004f815 	.word	0x8004f815
   20420:	4307f3c1 	.word	0x4307f3c1
   20424:	6a11ea4f 	.word	0x6a11ea4f
   20428:	f8155cec 	.word	0xf8155cec
   2042c:	f3c2b00a 	.word	0xf3c2b00a
   20430:	9a042a07 	.word	0x9a042a07
   20434:	ea80b2fb 	.word	0xea80b2fb
   20438:	ea802008 	.word	0xea802008
   2043c:	5ceb4004 	.word	0x5ceb4004
   20440:	f8156954 	.word	0xf8156954
   20444:	f3c9a00a 	.word	0xf3c9a00a
   20448:	40634807 	.word	0x40634807
   2044c:	6008f815 	.word	0x6008f815
   20450:	6b0bea83 	.word	0x6b0bea83
   20454:	2b0aea8b 	.word	0x2b0aea8b
   20458:	4b06ea8b 	.word	0x4b06ea8b
   2045c:	260046f4 	.word	0x260046f4
   20460:	f881fa5f 	.word	0xf881fa5f
   20464:	f8156994 	.word	0xf8156994
   20468:	ea4f8008 	.word	0xea4f8008
   2046c:	f8d26319 	.word	0xf8d26319
   20470:	5ceba01c 	.word	0x5ceba01c
   20474:	fa5f9a01 	.word	0xfa5f9a01
   20478:	f815f989 	.word	0xf815f989
   2047c:	ea889009 	.word	0xea889009
   20480:	ea880804 	.word	0xea880804
   20484:	0e136803 	.word	0x0e136803
   20488:	090aea89 	.word	0x090aea89
   2048c:	a003f815 	.word	0xa003f815
   20490:	4307f3c2 	.word	0x4307f3c2
   20494:	f3c75cec 	.word	0xf3c75cec
   20498:	5ceb2307 	.word	0x5ceb2307
   2049c:	2107f3c1 	.word	0x2107f3c1
   204a0:	ea885c69 	.word	0xea885c69
   204a4:	ea882803 	.word	0xea882803
   204a8:	ea894804 	.word	0xea894804
   204ac:	ea4f690a 	.word	0xea4f690a
   204b0:	ea89241b 	.word	0xea89241b
   204b4:	f36b2901 	.word	0xf36b2901
   204b8:	ea4f0c07 	.word	0xea4f0c07
   204bc:	f3682118 	.word	0xf3682118
   204c0:	22000607 	.word	0x22000607
   204c4:	260ff361 	.word	0x260ff361
   204c8:	2c0ff364 	.word	0x2c0ff364
   204cc:	441bea4f 	.word	0x441bea4f
   204d0:	4c17f364 	.word	0x4c17f364
   204d4:	f3c74634 	.word	0xf3c74634
   204d8:	5ded4707 	.word	0x5ded4707
   204dc:	0e07f360 	.word	0x0e07f360
   204e0:	4905ea89 	.word	0x4905ea89
   204e4:	2319ea4f 	.word	0x2319ea4f
   204e8:	f3690a05 	.word	0xf3690a05
   204ec:	ea4f0207 	.word	0xea4f0207
   204f0:	f3634118 	.word	0xf3634118
   204f4:	f365220f 	.word	0xf365220f
   204f8:	0c052e0f 	.word	0x0c052e0f
   204fc:	4417f361 	.word	0x4417f361
   20500:	4e17f365 	.word	0x4e17f365
   20504:	46110e00 	.word	0x46110e00
   20508:	6e1ff360 	.word	0x6e1ff360
   2050c:	ea4f4620 	.word	0xea4f4620
   20510:	ea4f4319 	.word	0xea4f4319
   20514:	f3636818 	.word	0xf3636818
   20518:	9b054117 	.word	0x9b054117
   2051c:	601ff368 	.word	0x601ff368
   20520:	20006098 	.word	0x20006098
   20524:	6b1bea4f 	.word	0x6b1bea4f
   20528:	6919ea4f 	.word	0x6919ea4f
   2052c:	6c1ff36b 	.word	0x6c1ff36b
   20530:	611ff369 	.word	0x611ff369
   20534:	e000f8c3 	.word	0xe000f8c3
   20538:	c004f8c3 	.word	0xc004f8c3
   2053c:	b00960d9 	.word	0xb00960d9
   20540:	8ff0e8bd 	.word	0x8ff0e8bd
   20544:	00027330 	.word	0x00027330
   20548:	00027430 	.word	0x00027430

0002054c <symbol_0005bab>:
   2054c:	4614b410 	.word	0x4614b410
   20550:	461a2901 	.word	0x461a2901
   20554:	d0034621 	.word	0xd0034621
   20558:	4b04f85d 	.word	0x4b04f85d
   2055c:	bde6f7ff 	.word	0xbde6f7ff
   20560:	4b04f85d 	.word	0x4b04f85d
   20564:	bbcaf7ff 	.word	0xbbcaf7ff

00020568 <ok_rsp_parser>:
   20568:	47702000 	.word	0x47702000

0002056c <pdn_state_get_parser>:
   2056c:	b5702200 	.word	0xb5702200
   20570:	b084780b 	.word	0xb084780b
   20574:	e9cd460e 	.word	0xe9cd460e
   20578:	e9cd2200 	.word	0xe9cd2200
   2057c:	b3232202 	.word	0xb3232202
   20580:	2b20460c 	.word	0x2b20460c
   20584:	d01b460d 	.word	0xd01b460d
   20588:	3201700b 	.word	0x3201700b
   2058c:	3f01f814 	.word	0x3f01f814
   20590:	460d18b1 	.word	0x460d18b1
   20594:	d1f42b00 	.word	0xd1f42b00
   20598:	4b0d2200 	.word	0x4b0d2200
   2059c:	f853702a 	.word	0xf853702a
   205a0:	4a0c3020 	.word	0x4a0c3020
   205a4:	2110681b 	.word	0x2110681b
   205a8:	f7f14668 	.word	0xf7f14668
   205ac:	4669f879 	.word	0x4669f879
   205b0:	f0044630 	.word	0xf0044630
   205b4:	3000f906 	.word	0x3000f906
   205b8:	2001bf18 	.word	0x2001bf18
   205bc:	bd70b004 	.word	0xbd70b004
   205c0:	3f01f814 	.word	0x3f01f814
   205c4:	d1dc2b00 	.word	0xd1dc2b00
   205c8:	460de7e6 	.word	0x460de7e6
   205cc:	bf00e7e4 	.word	0xbf00e7e4
   205d0:	20021aec 	.word	0x20021aec
   205d4:	000278d4 	.word	0x000278d4

000205d8 <pdn_id_get_parser>:
   205d8:	780bb570 	.word	0x780bb570
   205dc:	b3134606 	.word	0xb3134606
   205e0:	24004608 	.word	0x24004608
   205e4:	2b20460a 	.word	0x2b20460a
   205e8:	d0174615 	.word	0xd0174615
   205ec:	34017013 	.word	0x34017013
   205f0:	3f01f810 	.word	0x3f01f810
   205f4:	4615190a 	.word	0x4615190a
   205f8:	d1f42b00 	.word	0xd1f42b00
   205fc:	46082300 	.word	0x46082300
   20600:	213a702b 	.word	0x213a702b
   20604:	f90df004 	.word	0xf90df004
   20608:	3001b130 	.word	0x3001b130
   2060c:	ffc7f003 	.word	0xffc7f003
   20610:	f8534b06 	.word	0xf8534b06
   20614:	60583026 	.word	0x60583026
   20618:	bd702000 	.word	0xbd702000
   2061c:	3f01f810 	.word	0x3f01f810
   20620:	d1e02b00 	.word	0xd1e02b00
   20624:	460de7ea 	.word	0x460de7ea
   20628:	bf00e7e8 	.word	0xbf00e7e8
   2062c:	20021aec 	.word	0x20021aec

00020630 <context_create_parser>:
   20630:	780bb570 	.word	0x780bb570
   20634:	b3134606 	.word	0xb3134606
   20638:	24004608 	.word	0x24004608
   2063c:	2b20460a 	.word	0x2b20460a
   20640:	d0174615 	.word	0xd0174615
   20644:	34017013 	.word	0x34017013
   20648:	3f01f810 	.word	0x3f01f810
   2064c:	4615190a 	.word	0x4615190a
   20650:	d1f42b00 	.word	0xd1f42b00
   20654:	46082300 	.word	0x46082300
   20658:	213a702b 	.word	0x213a702b
   2065c:	f8e1f004 	.word	0xf8e1f004
   20660:	4b08b130 	.word	0x4b08b130
   20664:	f8533001 	.word	0xf8533001
   20668:	f0034026 	.word	0xf0034026
   2066c:	6020ff98 	.word	0x6020ff98
   20670:	bd702000 	.word	0xbd702000
   20674:	3f01f810 	.word	0x3f01f810
   20678:	d1e02b00 	.word	0xd1e02b00
   2067c:	460de7ea 	.word	0x460de7ea
   20680:	bf00e7e8 	.word	0xbf00e7e8
   20684:	20021aec 	.word	0x20021aec

00020688 <pdn_interface_init>:
   20688:	33fff04f 	.word	0x33fff04f
   2068c:	4c09b510 	.word	0x4c09b510
   20690:	21002228 	.word	0x21002228
   20694:	60234808 	.word	0x60234808
   20698:	f93ff004 	.word	0xf93ff004
   2069c:	2201f240 	.word	0x2201f240
   206a0:	20662100 	.word	0x20662100
   206a4:	f8cef7f3 	.word	0xf8cef7f3
   206a8:	60202800 	.word	0x60202800
   206ac:	2003bfb4 	.word	0x2003bfb4
   206b0:	bd102000 	.word	0xbd102000
   206b4:	200219e8 	.word	0x200219e8
   206b8:	20021aec 	.word	0x20021aec

000206bc <pdn_interface_open>:
   206bc:	43f0e92d 	.word	0x43f0e92d
   206c0:	b0832866 	.word	0xb0832866
   206c4:	80bcf040 	.word	0x80bcf040
   206c8:	7f00f5b1 	.word	0x7f00f5b1
   206cc:	80aaf040 	.word	0x80aaf040
   206d0:	2302f240 	.word	0x2302f240
   206d4:	f040429a 	.word	0xf040429a
   206d8:	4c6280a5 	.word	0x4c6280a5
   206dc:	b34d6825 	.word	0xb34d6825
   206e0:	2b006863 	.word	0x2b006863
   206e4:	8098f000 	.word	0x8098f000
   206e8:	2b0068a3 	.word	0x2b0068a3
   206ec:	8096f000 	.word	0x8096f000
   206f0:	2b0068e3 	.word	0x2b0068e3
   206f4:	8094f000 	.word	0x8094f000
   206f8:	2b006923 	.word	0x2b006923
   206fc:	8098f000 	.word	0x8098f000
   20700:	2b006963 	.word	0x2b006963
   20704:	8098f000 	.word	0x8098f000
   20708:	2b0069a3 	.word	0x2b0069a3
   2070c:	8096f000 	.word	0x8096f000
   20710:	2b0069e3 	.word	0x2b0069e3
   20714:	808ef000 	.word	0x808ef000
   20718:	b1536a23 	.word	0xb1536a23
   2071c:	25096a63 	.word	0x25096a63
   20720:	200cb143 	.word	0x200cb143
   20724:	fd04f7f1 	.word	0xfd04f7f1
   20728:	30fff04f 	.word	0x30fff04f
   2072c:	e8bdb003 	.word	0xe8bdb003
   20730:	250883f0 	.word	0x250883f0
   20734:	f7fe2074 	.word	0xf7fe2074
   20738:	f844ff3f 	.word	0xf844ff3f
   2073c:	28000025 	.word	0x28000025
   20740:	2274d0ef 	.word	0x2274d0ef
   20744:	f0042100 	.word	0xf0042100
   20748:	2101f8e8 	.word	0x2101f8e8
   2074c:	f04f2003 	.word	0xf04f2003
   20750:	f85437ff 	.word	0xf85437ff
   20754:	4a443025 	.word	0x4a443025
   20758:	f8546099 	.word	0xf8546099
   2075c:	f44f3025 	.word	0xf44f3025
   20760:	67187180 	.word	0x67187180
   20764:	4841605f 	.word	0x4841605f
   20768:	810cf8df 	.word	0x810cf8df
   2076c:	ff98f7f0 	.word	0xff98f7f0
   20770:	f8d8483e 	.word	0xf8d8483e
   20774:	26009000 	.word	0x26009000
   20778:	f86ef004 	.word	0xf86ef004
   2077c:	46024633 	.word	0x46024633
   20780:	4648493a 	.word	0x4648493a
   20784:	96009601 	.word	0x96009601
   20788:	f806f7f3 	.word	0xf806f7f3
   2078c:	48374681 	.word	0x48374681
   20790:	f862f004 	.word	0xf862f004
   20794:	d1594548 	.word	0xd1594548
   20798:	e9cd4633 	.word	0xe9cd4633
   2079c:	f44f6600 	.word	0xf44f6600
   207a0:	49327280 	.word	0x49327280
   207a4:	0000f8d8 	.word	0x0000f8d8
   207a8:	f8def7f3 	.word	0xf8def7f3
   207ac:	48304606 	.word	0x48304606
   207b0:	f852f004 	.word	0xf852f004
   207b4:	db154286 	.word	0xdb154286
   207b8:	492c4602 	.word	0x492c4602
   207bc:	f004482c 	.word	0xf004482c
   207c0:	b978f860 	.word	0xb978f860
   207c4:	46284929 	.word	0x46284929
   207c8:	ff32f7ff 	.word	0xff32f7ff
   207cc:	2202b9b0 	.word	0x2202b9b0
   207d0:	3025f854 	.word	0x3025f854
   207d4:	40f1f045 	.word	0x40f1f045
   207d8:	10d0f440 	.word	0x10d0f440
   207dc:	b003609a 	.word	0xb003609a
   207e0:	83f0e8bd 	.word	0x83f0e8bd
   207e4:	f0044823 	.word	0xf0044823
   207e8:	4920f837 	.word	0x4920f837
   207ec:	48214602 	.word	0x48214602
   207f0:	f847f004 	.word	0xf847f004
   207f4:	2008b960 	.word	0x2008b960
   207f8:	fc9af7f1 	.word	0xfc9af7f1
   207fc:	0025f854 	.word	0x0025f854
   20800:	fef8f7fe 	.word	0xfef8f7fe
   20804:	f04f2300 	.word	0xf04f2300
   20808:	f84430ff 	.word	0xf84430ff
   2080c:	e78d3025 	.word	0xe78d3025
   20810:	f7f12005 	.word	0xf7f12005
   20814:	e7f1fc8d 	.word	0xe7f1fc8d
   20818:	e78b2501 	.word	0xe78b2501
   2081c:	e7892502 	.word	0xe7892502
   20820:	e7872503 	.word	0xe7872503
   20824:	f7f12016 	.word	0xf7f12016
   20828:	f04ffc83 	.word	0xf04ffc83
   2082c:	e77d30ff 	.word	0xe77d30ff
   20830:	e77f2504 	.word	0xe77f2504
   20834:	e77d2507 	.word	0xe77d2507
   20838:	e77b2505 	.word	0xe77b2505
   2083c:	e7792506 	.word	0xe7792506
   20840:	f7f1202f 	.word	0xf7f1202f
   20844:	f04ffc75 	.word	0xf04ffc75
   20848:	e76f30ff 	.word	0xe76f30ff
   2084c:	f7f12005 	.word	0xf7f12005
   20850:	f854fc6f 	.word	0xf854fc6f
   20854:	f7fe0025 	.word	0xf7fe0025
   20858:	f844fecd 	.word	0xf844fecd
   2085c:	46386025 	.word	0x46386025
   20860:	bf00e764 	.word	0xbf00e764
   20864:	20021aec 	.word	0x20021aec
   20868:	000278b0 	.word	0x000278b0
   2086c:	200219ec 	.word	0x200219ec
   20870:	000278c0 	.word	0x000278c0
   20874:	000278cc 	.word	0x000278cc
   20878:	200219e8 	.word	0x200219e8

0002087c <pdn_interface_connect>:
   2087c:	4ff0e92d 	.word	0x4ff0e92d
   20880:	2900b083 	.word	0x2900b083
   20884:	813ef000 	.word	0x813ef000
   20888:	46912a64 	.word	0x46912a64
   2088c:	813af200 	.word	0x813af200
   20890:	46084605 	.word	0x46084605
   20894:	f0034688 	.word	0xf0034688
   20898:	2864ffdf 	.word	0x2864ffdf
   2089c:	8132f200 	.word	0x8132f200
   208a0:	43ab4ba5 	.word	0x43ab4ba5
   208a4:	8125f040 	.word	0x8125f040
   208a8:	45f1f025 	.word	0x45f1f025
   208ac:	15d0f425 	.word	0x15d0f425
   208b0:	f3002d09 	.word	0xf3002d09
   208b4:	4fa1811e 	.word	0x4fa1811e
   208b8:	3025f857 	.word	0x3025f857
   208bc:	f0002b00 	.word	0xf0002b00
   208c0:	689a8118 	.word	0x689a8118
   208c4:	f0002a00 	.word	0xf0002a00
   208c8:	2d008114 	.word	0x2d008114
   208cc:	8111f2c0 	.word	0x8111f2c0
   208d0:	2b02689b 	.word	0x2b02689b
   208d4:	810df040 	.word	0x810df040
   208d8:	4a9a4e99 	.word	0x4a9a4e99
   208dc:	7180f44f 	.word	0x7180f44f
   208e0:	f7f04630 	.word	0xf7f04630
   208e4:	f857fedd 	.word	0xf857fedd
   208e8:	46043025 	.word	0x46043025
   208ec:	7180f5c0 	.word	0x7180f5c0
   208f0:	4a95681b 	.word	0x4a95681b
   208f4:	f7f01830 	.word	0xf7f01830
   208f8:	f857fed3 	.word	0xf857fed3
   208fc:	44043025 	.word	0x44043025
   20900:	f0036f1b 	.word	0xf0036f1b
   20904:	2a030203 	.word	0x2a030203
   20908:	80eaf000 	.word	0x80eaf000
   2090c:	eb06079b 	.word	0xeb06079b
   20910:	f5c40004 	.word	0xf5c40004
   20914:	bf4c7180 	.word	0xbf4c7180
   20918:	4b8d4b8c 	.word	0x4b8d4b8c
   2091c:	f7f04a8d 	.word	0xf7f04a8d
   20920:	4404febf 	.word	0x4404febf
   20924:	4a8c4643 	.word	0x4a8c4643
   20928:	7180f5c4 	.word	0x7180f5c4
   2092c:	f7f01930 	.word	0xf7f01930
   20930:	4420feb7 	.word	0x4420feb7
   20934:	7f80f5b0 	.word	0x7f80f5b0
   20938:	80f7f300 	.word	0x80f7f300
   2093c:	a238f8df 	.word	0xa238f8df
   20940:	f8da487f 	.word	0xf8da487f
   20944:	2400b000 	.word	0x2400b000
   20948:	ff86f003 	.word	0xff86f003
   2094c:	46024623 	.word	0x46024623
   20950:	4658497b 	.word	0x4658497b
   20954:	94009401 	.word	0x94009401
   20958:	ff1ef7f2 	.word	0xff1ef7f2
   2095c:	48784683 	.word	0x48784683
   20960:	ff7af003 	.word	0xff7af003
   20964:	d0084558 	.word	0xd0084558
   20968:	f7f12005 	.word	0xf7f12005
   2096c:	f04ffbe1 	.word	0xf04ffbe1
   20970:	462034ff 	.word	0x462034ff
   20974:	e8bdb003 	.word	0xe8bdb003
   20978:	46238ff0 	.word	0x46238ff0
   2097c:	4400e9cd 	.word	0x4400e9cd
   20980:	7280f44f 	.word	0x7280f44f
   20984:	f8da496e 	.word	0xf8da496e
   20988:	f7f20000 	.word	0xf7f20000
   2098c:	4604ffed 	.word	0x4604ffed
   20990:	f0034872 	.word	0xf0034872
   20994:	4284ff61 	.word	0x4284ff61
   20998:	8091f2c0 	.word	0x8091f2c0
   2099c:	49684602 	.word	0x49684602
   209a0:	f003486e 	.word	0xf003486e
   209a4:	2800ff6e 	.word	0x2800ff6e
   209a8:	8089f040 	.word	0x8089f040
   209ac:	46284964 	.word	0x46284964
   209b0:	fddaf7ff 	.word	0xfddaf7ff
   209b4:	28004604 	.word	0x28004604
   209b8:	4a69d1db 	.word	0x4a69d1db
   209bc:	7180f44f 	.word	0x7180f44f
   209c0:	f7f0485f 	.word	0xf7f0485f
   209c4:	f857fe6d 	.word	0xf857fe6d
   209c8:	f5c03025 	.word	0xf5c03025
   209cc:	681b7180 	.word	0x681b7180
   209d0:	44304a64 	.word	0x44304a64
   209d4:	fe64f7f0 	.word	0xfe64f7f0
   209d8:	f8da4859 	.word	0xf8da4859
   209dc:	f003b000 	.word	0xf003b000
   209e0:	4623ff3b 	.word	0x4623ff3b
   209e4:	49564602 	.word	0x49564602
   209e8:	94014658 	.word	0x94014658
   209ec:	f7f29400 	.word	0xf7f29400
   209f0:	4683fed3 	.word	0x4683fed3
   209f4:	f0034852 	.word	0xf0034852
   209f8:	4558ff2f 	.word	0x4558ff2f
   209fc:	4623d1b4 	.word	0x4623d1b4
   20a00:	7280f44f 	.word	0x7280f44f
   20a04:	f8da494e 	.word	0xf8da494e
   20a08:	e9cd0000 	.word	0xe9cd0000
   20a0c:	f7f24400 	.word	0xf7f24400
   20a10:	4683ffab 	.word	0x4683ffab
   20a14:	f0034851 	.word	0xf0034851
   20a18:	4583ff1f 	.word	0x4583ff1f
   20a1c:	4602db4f 	.word	0x4602db4f
   20a20:	484e4947 	.word	0x484e4947
   20a24:	ff2df003 	.word	0xff2df003
   20a28:	d1482800 	.word	0xd1482800
   20a2c:	f8572103 	.word	0xf8572103
   20a30:	464a3025 	.word	0x464a3025
   20a34:	f8576099 	.word	0xf8576099
   20a38:	46410025 	.word	0x46410025
   20a3c:	f003300c 	.word	0xf003300c
   20a40:	4a49ff3f 	.word	0x4a49ff3f
   20a44:	7180f44f 	.word	0x7180f44f
   20a48:	f7f0483d 	.word	0xf7f0483d
   20a4c:	4601fe29 	.word	0x4601fe29
   20a50:	3025f857 	.word	0x3025f857
   20a54:	7180f5c1 	.word	0x7180f5c1
   20a58:	4a42681b 	.word	0x4a42681b
   20a5c:	f7f01830 	.word	0xf7f01830
   20a60:	4837fe1f 	.word	0x4837fe1f
   20a64:	6000f8da 	.word	0x6000f8da
   20a68:	fef6f003 	.word	0xfef6f003
   20a6c:	46024623 	.word	0x46024623
   20a70:	46304933 	.word	0x46304933
   20a74:	94009401 	.word	0x94009401
   20a78:	fe8ef7f2 	.word	0xfe8ef7f2
   20a7c:	48304606 	.word	0x48304606
   20a80:	feeaf003 	.word	0xfeeaf003
   20a84:	d15342b0 	.word	0xd15342b0
   20a88:	f44f4623 	.word	0xf44f4623
   20a8c:	492c7280 	.word	0x492c7280
   20a90:	0000f8da 	.word	0x0000f8da
   20a94:	4400e9cd 	.word	0x4400e9cd
   20a98:	ff66f7f2 	.word	0xff66f7f2
   20a9c:	48334606 	.word	0x48334606
   20aa0:	fedaf003 	.word	0xfedaf003
   20aa4:	db334286 	.word	0xdb334286
   20aa8:	49254602 	.word	0x49254602
   20aac:	f003482f 	.word	0xf003482f
   20ab0:	bb68fee8 	.word	0xbb68fee8
   20ab4:	49224628 	.word	0x49224628
   20ab8:	fd8ef7ff 	.word	0xfd8ef7ff
   20abc:	482ce759 	.word	0x482ce759
   20ac0:	fecaf003 	.word	0xfecaf003
   20ac4:	4602491e 	.word	0x4602491e
   20ac8:	f0034829 	.word	0xf0034829
   20acc:	2800feda 	.word	0x2800feda
   20ad0:	af4af47f 	.word	0xaf4af47f
   20ad4:	f7f12008 	.word	0xf7f12008
   20ad8:	f04ffb2b 	.word	0xf04ffb2b
   20adc:	e74834ff 	.word	0xe74834ff
   20ae0:	7180f5c4 	.word	0x7180f5c4
   20ae4:	4b231930 	.word	0x4b231930
   20ae8:	f7f04a1a 	.word	0xf7f04a1a
   20aec:	4404fdd9 	.word	0x4404fdd9
   20af0:	f04fe718 	.word	0xf04fe718
   20af4:	200934ff 	.word	0x200934ff
   20af8:	fb1af7f1 	.word	0xfb1af7f1
   20afc:	b0034620 	.word	0xb0034620
   20b00:	8ff0e8bd 	.word	0x8ff0e8bd
   20b04:	f7f12016 	.word	0xf7f12016
   20b08:	f04ffb13 	.word	0xf04ffb13
   20b0c:	e73034ff 	.word	0xe73034ff
   20b10:	f0034817 	.word	0xf0034817
   20b14:	490afea1 	.word	0x490afea1
   20b18:	48154602 	.word	0x48154602
   20b1c:	feb1f003 	.word	0xfeb1f003
   20b20:	2008b930 	.word	0x2008b930
   20b24:	fb04f7f1 	.word	0xfb04f7f1
   20b28:	f04fe723 	.word	0xf04fe723
   20b2c:	e72034ff 	.word	0xe72034ff
   20b30:	f7f12005 	.word	0xf7f12005
   20b34:	e71cfafd 	.word	0xe71cfafd
   20b38:	789a0000 	.word	0x789a0000
   20b3c:	20021aec 	.word	0x20021aec
   20b40:	200219ec 	.word	0x200219ec
   20b44:	0002783c 	.word	0x0002783c
   20b48:	00027848 	.word	0x00027848
   20b4c:	0002785c 	.word	0x0002785c
   20b50:	00027864 	.word	0x00027864
   20b54:	00027854 	.word	0x00027854
   20b58:	00027894 	.word	0x00027894
   20b5c:	0002685c 	.word	0x0002685c
   20b60:	00027868 	.word	0x00027868
   20b64:	00027874 	.word	0x00027874
   20b68:	00027878 	.word	0x00027878
   20b6c:	00027888 	.word	0x00027888
   20b70:	000278cc 	.word	0x000278cc
   20b74:	0002784c 	.word	0x0002784c
   20b78:	200219e8 	.word	0x200219e8

00020b7c <pdn_interface_close>:
   20b7c:	43f0e92d 	.word	0x43f0e92d
   20b80:	b0834b63 	.word	0xb0834b63
   20b84:	f0404383 	.word	0xf0404383
   20b88:	f020809d 	.word	0xf020809d
   20b8c:	f42444f1 	.word	0xf42444f1
   20b90:	2c0914d0 	.word	0x2c0914d0
   20b94:	8096f300 	.word	0x8096f300
   20b98:	f8554d5e 	.word	0xf8554d5e
   20b9c:	28000024 	.word	0x28000024
   20ba0:	8090f000 	.word	0x8090f000
   20ba4:	2b006883 	.word	0x2b006883
   20ba8:	808cf000 	.word	0x808cf000
   20bac:	2b036883 	.word	0x2b036883
   20bb0:	f7fed008 	.word	0xf7fed008
   20bb4:	2300fd1f 	.word	0x2300fd1f
   20bb8:	f8454618 	.word	0xf8454618
   20bbc:	b0033024 	.word	0xb0033024
   20bc0:	83f0e8bd 	.word	0x83f0e8bd
   20bc4:	4a554e54 	.word	0x4a554e54
   20bc8:	7180f44f 	.word	0x7180f44f
   20bcc:	f7f04630 	.word	0xf7f04630
   20bd0:	f855fd67 	.word	0xf855fd67
   20bd4:	f5c03024 	.word	0xf5c03024
   20bd8:	681b7180 	.word	0x681b7180
   20bdc:	44304a50 	.word	0x44304a50
   20be0:	814cf8df 	.word	0x814cf8df
   20be4:	fd5cf7f0 	.word	0xfd5cf7f0
   20be8:	f8d84630 	.word	0xf8d84630
   20bec:	27009000 	.word	0x27009000
   20bf0:	fe32f003 	.word	0xfe32f003
   20bf4:	46024631 	.word	0x46024631
   20bf8:	4648463b 	.word	0x4648463b
   20bfc:	97009701 	.word	0x97009701
   20c00:	fdcaf7f2 	.word	0xfdcaf7f2
   20c04:	46304681 	.word	0x46304681
   20c08:	fe26f003 	.word	0xfe26f003
   20c0c:	d1764548 	.word	0xd1764548
   20c10:	e9cd463b 	.word	0xe9cd463b
   20c14:	f44f7700 	.word	0xf44f7700
   20c18:	46317280 	.word	0x46317280
   20c1c:	0000f8d8 	.word	0x0000f8d8
   20c20:	fea2f7f2 	.word	0xfea2f7f2
   20c24:	483f4607 	.word	0x483f4607
   20c28:	fe16f003 	.word	0xfe16f003
   20c2c:	da4f4287 	.word	0xda4f4287
   20c30:	f003483d 	.word	0xf003483d
   20c34:	4938fe11 	.word	0x4938fe11
   20c38:	483b4602 	.word	0x483b4602
   20c3c:	fe21f003 	.word	0xfe21f003
   20c40:	d15c2800 	.word	0xd15c2800
   20c44:	f7f12008 	.word	0xf7f12008
   20c48:	4a38fa73 	.word	0x4a38fa73
   20c4c:	7180f44f 	.word	0x7180f44f
   20c50:	f7f04831 	.word	0xf7f04831
   20c54:	4601fd25 	.word	0x4601fd25
   20c58:	3024f855 	.word	0x3024f855
   20c5c:	7180f5c1 	.word	0x7180f5c1
   20c60:	4a2f681b 	.word	0x4a2f681b
   20c64:	f7f01830 	.word	0xf7f01830
   20c68:	482bfd1b 	.word	0x482bfd1b
   20c6c:	7000f8d8 	.word	0x7000f8d8
   20c70:	f0032600 	.word	0xf0032600
   20c74:	4633fdf1 	.word	0x4633fdf1
   20c78:	49274602 	.word	0x49274602
   20c7c:	96014638 	.word	0x96014638
   20c80:	f7f29600 	.word	0xf7f29600
   20c84:	4607fd89 	.word	0x4607fd89
   20c88:	f0034823 	.word	0xf0034823
   20c8c:	42b8fde5 	.word	0x42b8fde5
   20c90:	4633d139 	.word	0x4633d139
   20c94:	6600e9cd 	.word	0x6600e9cd
   20c98:	7280f44f 	.word	0x7280f44f
   20c9c:	f8d8491e 	.word	0xf8d8491e
   20ca0:	f7f20000 	.word	0xf7f20000
   20ca4:	4606fe61 	.word	0x4606fe61
   20ca8:	f003481e 	.word	0xf003481e
   20cac:	4286fdd5 	.word	0x4286fdd5
   20cb0:	4602db16 	.word	0x4602db16
   20cb4:	481b4918 	.word	0x481b4918
   20cb8:	fde3f003 	.word	0xfde3f003
   20cbc:	f855b980 	.word	0xf855b980
   20cc0:	e7760024 	.word	0xe7760024
   20cc4:	f7f12009 	.word	0xf7f12009
   20cc8:	f04ffa33 	.word	0xf04ffa33
   20ccc:	e77630ff 	.word	0xe77630ff
   20cd0:	46314602 	.word	0x46314602
   20cd4:	f0034813 	.word	0xf0034813
   20cd8:	2800fdd4 	.word	0x2800fdd4
   20cdc:	e7a7d0b5 	.word	0xe7a7d0b5
   20ce0:	f0034811 	.word	0xf0034811
   20ce4:	490cfdb9 	.word	0x490cfdb9
   20ce8:	480f4602 	.word	0x480f4602
   20cec:	fdc9f003 	.word	0xfdc9f003
   20cf0:	2008b948 	.word	0x2008b948
   20cf4:	fa1cf7f1 	.word	0xfa1cf7f1
   20cf8:	0024f855 	.word	0x0024f855
   20cfc:	2005e759 	.word	0x2005e759
   20d00:	fa16f7f1 	.word	0xfa16f7f1
   20d04:	2005e7a1 	.word	0x2005e7a1
   20d08:	fa12f7f1 	.word	0xfa12f7f1
   20d0c:	bf00e7d7 	.word	0xbf00e7d7
   20d10:	789a0000 	.word	0x789a0000
   20d14:	20021aec 	.word	0x20021aec
   20d18:	200219ec 	.word	0x200219ec
   20d1c:	00027830 	.word	0x00027830
   20d20:	00027874 	.word	0x00027874
   20d24:	0002685c 	.word	0x0002685c
   20d28:	000278cc 	.word	0x000278cc
   20d2c:	0002783c 	.word	0x0002783c
   20d30:	200219e8 	.word	0x200219e8

00020d34 <pdn_interface_setopt>:
   20d34:	f240b510 	.word	0xf240b510
   20d38:	42a12402 	.word	0x42a12402
   20d3c:	b153d10b 	.word	0xb153d10b
   20d40:	b1419902 	.word	0xb1419902
   20d44:	43814925 	.word	0x43814925
   20d48:	2009d00b 	.word	0x2009d00b
   20d4c:	f9f0f7f1 	.word	0xf9f0f7f1
   20d50:	30fff04f 	.word	0x30fff04f
   20d54:	2016bd10 	.word	0x2016bd10
   20d58:	f9eaf7f1 	.word	0xf9eaf7f1
   20d5c:	30fff04f 	.word	0x30fff04f
   20d60:	f020bd10 	.word	0xf020bd10
   20d64:	f42040f1 	.word	0xf42040f1
   20d68:	280910d0 	.word	0x280910d0
   20d6c:	491cdced 	.word	0x491cdced
   20d70:	1020f851 	.word	0x1020f851
   20d74:	d0e82900 	.word	0xd0e82900
   20d78:	2c00688c 	.word	0x2c00688c
   20d7c:	2800d0e5 	.word	0x2800d0e5
   20d80:	2a01dbe3 	.word	0x2a01dbe3
   20d84:	202dd001 	.word	0x202dd001
   20d88:	688ae7e6 	.word	0x688ae7e6
   20d8c:	688ab1fa 	.word	0x688ab1fa
   20d90:	d01c2a03 	.word	0xd01c2a03
   20d94:	2a04688a 	.word	0x2a04688a
   20d98:	9a02d019 	.word	0x9a02d019
   20d9c:	1e420890 	.word	0x1e420890
   20da0:	d8d82a01 	.word	0xd8d82a01
   20da4:	07929a02 	.word	0x07929a02
   20da8:	681ad1d5 	.word	0x681ad1d5
   20dac:	d0102a02 	.word	0xd0102a02
   20db0:	d1d02a0a 	.word	0xd1d02a0a
   20db4:	28022202 	.word	0x28022202
   20db8:	685bd106 	.word	0x685bd106
   20dbc:	d00a2b02 	.word	0xd00a2b02
   20dc0:	d1c82b0a 	.word	0xd1c82b0a
   20dc4:	0202f042 	.word	0x0202f042
   20dc8:	2000670a 	.word	0x2000670a
   20dcc:	200ee7c4 	.word	0x200ee7c4
   20dd0:	2201e7c2 	.word	0x2201e7c2
   20dd4:	f042e7ef 	.word	0xf042e7ef
   20dd8:	e7f50201 	.word	0xe7f50201
   20ddc:	789a0000 	.word	0x789a0000
   20de0:	20021aec 	.word	0x20021aec

00020de4 <pdn_interface_getopt>:
   20de4:	43f0e92d 	.word	0x43f0e92d
   20de8:	2402f240 	.word	0x2402f240
   20dec:	42a1b083 	.word	0x42a1b083
   20df0:	f0409d0a 	.word	0xf0409d0a
   20df4:	461e80a9 	.word	0x461e80a9
   20df8:	f0002b00 	.word	0xf0002b00
   20dfc:	2d0080a5 	.word	0x2d0080a5
   20e00:	80a2f000 	.word	0x80a2f000
   20e04:	43834b56 	.word	0x43834b56
   20e08:	8084f040 	.word	0x8084f040
   20e0c:	44f1f020 	.word	0x44f1f020
   20e10:	14d0f424 	.word	0x14d0f424
   20e14:	dc7d2c09 	.word	0xdc7d2c09
   20e18:	f8534b52 	.word	0xf8534b52
   20e1c:	2b003024 	.word	0x2b003024
   20e20:	6899d078 	.word	0x6899d078
   20e24:	d0752900 	.word	0xd0752900
   20e28:	db732c00 	.word	0xdb732c00
   20e2c:	d00e2a02 	.word	0xd00e2a02
   20e30:	d0082a03 	.word	0xd0082a03
   20e34:	d0152a01 	.word	0xd0152a01
   20e38:	f7f1202d 	.word	0xf7f1202d
   20e3c:	2000f979 	.word	0x2000f979
   20e40:	e8bdb003 	.word	0xe8bdb003
   20e44:	682b83f0 	.word	0x682b83f0
   20e48:	2016bb23 	.word	0x2016bb23
   20e4c:	682ae7f5 	.word	0x682ae7f5
   20e50:	d0fa2a00 	.word	0xd0fa2a00
   20e54:	20002201 	.word	0x20002201
   20e58:	7033681b 	.word	0x7033681b
   20e5c:	b003602a 	.word	0xb003602a
   20e60:	83f0e8bd 	.word	0x83f0e8bd
   20e64:	2a00689a 	.word	0x2a00689a
   20e68:	689ad052 	.word	0x689ad052
   20e6c:	d04f2a04 	.word	0xd04f2a04
   20e70:	2a07682a 	.word	0x2a07682a
   20e74:	f012d9e9 	.word	0xf012d9e9
   20e78:	d1e60203 	.word	0xd1e60203
   20e7c:	07996f1b 	.word	0x07996f1b
   20e80:	2104d45d 	.word	0x2104d45d
   20e84:	d50207db 	.word	0xd50207db
   20e88:	50b32302 	.word	0x50b32302
   20e8c:	602a460a 	.word	0x602a460a
   20e90:	e7d52000 	.word	0xe7d52000
   20e94:	f44f4a34 	.word	0xf44f4a34
   20e98:	48347180 	.word	0x48347180
   20e9c:	80d8f8df 	.word	0x80d8f8df
   20ea0:	fbfef7f0 	.word	0xfbfef7f0
   20ea4:	f8d84831 	.word	0xf8d84831
   20ea8:	27009000 	.word	0x27009000
   20eac:	fcd4f003 	.word	0xfcd4f003
   20eb0:	4602463b 	.word	0x4602463b
   20eb4:	4648492d 	.word	0x4648492d
   20eb8:	97009701 	.word	0x97009701
   20ebc:	fc6cf7f2 	.word	0xfc6cf7f2
   20ec0:	482a4681 	.word	0x482a4681
   20ec4:	fcc8f003 	.word	0xfcc8f003
   20ec8:	d1434548 	.word	0xd1434548
   20ecc:	e9cd463b 	.word	0xe9cd463b
   20ed0:	f44f7700 	.word	0xf44f7700
   20ed4:	49257280 	.word	0x49257280
   20ed8:	0000f8d8 	.word	0x0000f8d8
   20edc:	fd44f7f2 	.word	0xfd44f7f2
   20ee0:	48234607 	.word	0x48234607
   20ee4:	fcb8f003 	.word	0xfcb8f003
   20ee8:	db194287 	.word	0xdb194287
   20eec:	491f4602 	.word	0x491f4602
   20ef0:	f003481f 	.word	0xf003481f
   20ef4:	4607fcc6 	.word	0x4607fcc6
   20ef8:	4620b990 	.word	0x4620b990
   20efc:	f7ff491b 	.word	0xf7ff491b
   20f00:	2800fb35 	.word	0x2800fb35
   20f04:	2301db99 	.word	0x2301db99
   20f08:	46387030 	.word	0x46387030
   20f0c:	e797602b 	.word	0xe797602b
   20f10:	e792200e 	.word	0xe792200e
   20f14:	f7f12009 	.word	0xf7f12009
   20f18:	f04ff90b 	.word	0xf04ff90b
   20f1c:	e78f30ff 	.word	0xe78f30ff
   20f20:	f0034814 	.word	0xf0034814
   20f24:	4911fc99 	.word	0x4911fc99
   20f28:	48124602 	.word	0x48124602
   20f2c:	fca9f003 	.word	0xfca9f003
   20f30:	2008b980 	.word	0x2008b980
   20f34:	f8fcf7f1 	.word	0xf8fcf7f1
   20f38:	30fff04f 	.word	0x30fff04f
   20f3c:	220ae77d 	.word	0x220ae77d
   20f40:	60322108 	.word	0x60322108
   20f44:	e79d2204 	.word	0xe79d2204
   20f48:	f7f12016 	.word	0xf7f12016
   20f4c:	f04ff8f1 	.word	0xf04ff8f1
   20f50:	e77530ff 	.word	0xe77530ff
   20f54:	f7f12005 	.word	0xf7f12005
   20f58:	f04ff8eb 	.word	0xf04ff8eb
   20f5c:	e76c30ff 	.word	0xe76c30ff
   20f60:	789a0000 	.word	0x789a0000
   20f64:	20021aec 	.word	0x20021aec
   20f68:	0002789c 	.word	0x0002789c
   20f6c:	200219ec 	.word	0x200219ec
   20f70:	000278a8 	.word	0x000278a8
   20f74:	000278cc 	.word	0x000278cc
   20f78:	200219e8 	.word	0x200219e8

00020f7c <pdn_interface_pdn_id_get>:
   20f7c:	f0002900 	.word	0xf0002900
   20f80:	e92d83b9 	.word	0xe92d83b9
   20f84:	4ca343f0 	.word	0x4ca343f0
   20f88:	b0832802 	.word	0xb0832802
   20f8c:	6823460d 	.word	0x6823460d
   20f90:	8094f000 	.word	0x8094f000
   20f94:	d03f280a 	.word	0xd03f280a
   20f98:	689bb11b 	.word	0x689bb11b
   20f9c:	f0002b03 	.word	0xf0002b03
   20fa0:	68638127 	.word	0x68638127
   20fa4:	689bb11b 	.word	0x689bb11b
   20fa8:	f0002b03 	.word	0xf0002b03
   20fac:	68a38110 	.word	0x68a38110
   20fb0:	689bb11b 	.word	0x689bb11b
   20fb4:	f0002b03 	.word	0xf0002b03
   20fb8:	68e380f9 	.word	0x68e380f9
   20fbc:	689bb11b 	.word	0x689bb11b
   20fc0:	f0002b03 	.word	0xf0002b03
   20fc4:	692380e2 	.word	0x692380e2
   20fc8:	689bb11b 	.word	0x689bb11b
   20fcc:	f0002b03 	.word	0xf0002b03
   20fd0:	69638123 	.word	0x69638123
   20fd4:	689bb11b 	.word	0x689bb11b
   20fd8:	f0002b03 	.word	0xf0002b03
   20fdc:	69a38161 	.word	0x69a38161
   20fe0:	689bb11b 	.word	0x689bb11b
   20fe4:	f0002b03 	.word	0xf0002b03
   20fe8:	69e3814a 	.word	0x69e3814a
   20fec:	689bb11b 	.word	0x689bb11b
   20ff0:	f0002b03 	.word	0xf0002b03
   20ff4:	6a238133 	.word	0x6a238133
   20ff8:	689bb11b 	.word	0x689bb11b
   20ffc:	f0002b03 	.word	0xf0002b03
   21000:	6a63811c 	.word	0x6a63811c
   21004:	689bb11b 	.word	0x689bb11b
   21008:	f0002b03 	.word	0xf0002b03
   2100c:	f04f80ad 	.word	0xf04f80ad
   21010:	b00330ff 	.word	0xb00330ff
   21014:	83f0e8bd 	.word	0x83f0e8bd
   21018:	689bb11b 	.word	0x689bb11b
   2101c:	f0002b03 	.word	0xf0002b03
   21020:	68638335 	.word	0x68638335
   21024:	689bb11b 	.word	0x689bb11b
   21028:	f0002b03 	.word	0xf0002b03
   2102c:	68a382fd 	.word	0x68a382fd
   21030:	689bb11b 	.word	0x689bb11b
   21034:	f0002b03 	.word	0xf0002b03
   21038:	68e382d5 	.word	0x68e382d5
   2103c:	689eb11b 	.word	0x689eb11b
   21040:	f0002e03 	.word	0xf0002e03
   21044:	692381f0 	.word	0x692381f0
   21048:	689bb11b 	.word	0x689bb11b
   2104c:	f0002b03 	.word	0xf0002b03
   21050:	69638203 	.word	0x69638203
   21054:	689bb11b 	.word	0x689bb11b
   21058:	f0002b03 	.word	0xf0002b03
   2105c:	69a38215 	.word	0x69a38215
   21060:	689bb11b 	.word	0x689bb11b
   21064:	f0002b03 	.word	0xf0002b03
   21068:	69e38227 	.word	0x69e38227
   2106c:	689bb11b 	.word	0x689bb11b
   21070:	f0002b03 	.word	0xf0002b03
   21074:	6a238239 	.word	0x6a238239
   21078:	689bb11b 	.word	0x689bb11b
   2107c:	f0002b03 	.word	0xf0002b03
   21080:	6a63824d 	.word	0x6a63824d
   21084:	d0c22b00 	.word	0xd0c22b00
   21088:	2b03689b 	.word	0x2b03689b
   2108c:	4628d1bf 	.word	0x4628d1bf
   21090:	fbe2f003 	.word	0xfbe2f003
   21094:	6a604606 	.word	0x6a604606
   21098:	f003300c 	.word	0xf003300c
   2109c:	42b0fbdd 	.word	0x42b0fbdd
   210a0:	6a61d1b5 	.word	0x6a61d1b5
   210a4:	310c4628 	.word	0x310c4628
   210a8:	fbdef003 	.word	0xfbdef003
   210ac:	d1ae2800 	.word	0xd1ae2800
   210b0:	6f1a6a63 	.word	0x6f1a6a63
   210b4:	d5aa0792 	.word	0xd5aa0792
   210b8:	e11a2609 	.word	0xe11a2609
   210bc:	689bb11b 	.word	0x689bb11b
   210c0:	f0002b03 	.word	0xf0002b03
   210c4:	686382fd 	.word	0x686382fd
   210c8:	689bb11b 	.word	0x689bb11b
   210cc:	f0002b03 	.word	0xf0002b03
   210d0:	68a382c5 	.word	0x68a382c5
   210d4:	689bb11b 	.word	0x689bb11b
   210d8:	f0002b03 	.word	0xf0002b03
   210dc:	68e38269 	.word	0x68e38269
   210e0:	689eb11b 	.word	0x689eb11b
   210e4:	f0002e03 	.word	0xf0002e03
   210e8:	692380ec 	.word	0x692380ec
   210ec:	689bb11b 	.word	0x689bb11b
   210f0:	f0002b03 	.word	0xf0002b03
   210f4:	6963814a 	.word	0x6963814a
   210f8:	689bb11b 	.word	0x689bb11b
   210fc:	f0002b03 	.word	0xf0002b03
   21100:	69a3815e 	.word	0x69a3815e
   21104:	689bb11b 	.word	0x689bb11b
   21108:	f0002b03 	.word	0xf0002b03
   2110c:	69e38172 	.word	0x69e38172
   21110:	689bb11b 	.word	0x689bb11b
   21114:	f0002b03 	.word	0xf0002b03
   21118:	6a23821b 	.word	0x6a23821b
   2111c:	689bb11b 	.word	0x689bb11b
   21120:	f0002b03 	.word	0xf0002b03
   21124:	6a63822d 	.word	0x6a63822d
   21128:	f43f2b00 	.word	0xf43f2b00
   2112c:	689baf70 	.word	0x689baf70
   21130:	f47f2b03 	.word	0xf47f2b03
   21134:	4628af6c 	.word	0x4628af6c
   21138:	fb8ef003 	.word	0xfb8ef003
   2113c:	6a604606 	.word	0x6a604606
   21140:	f003300c 	.word	0xf003300c
   21144:	4286fb89 	.word	0x4286fb89
   21148:	af61f47f 	.word	0xaf61f47f
   2114c:	46286a61 	.word	0x46286a61
   21150:	f003310c 	.word	0xf003310c
   21154:	2800fb89 	.word	0x2800fb89
   21158:	af59f47f 	.word	0xaf59f47f
   2115c:	6f1a6a63 	.word	0x6f1a6a63
   21160:	f57f07d2 	.word	0xf57f07d2
   21164:	e7a7af54 	.word	0xe7a7af54
   21168:	f0034628 	.word	0xf0034628
   2116c:	4606fb75 	.word	0x4606fb75
   21170:	300c6a60 	.word	0x300c6a60
   21174:	fb70f003 	.word	0xfb70f003
   21178:	f47f42b0 	.word	0xf47f42b0
   2117c:	6a61af48 	.word	0x6a61af48
   21180:	310c4628 	.word	0x310c4628
   21184:	fb70f003 	.word	0xfb70f003
   21188:	4628e741 	.word	0x4628e741
   2118c:	fb64f003 	.word	0xfb64f003
   21190:	68e04606 	.word	0x68e04606
   21194:	f003300c 	.word	0xf003300c
   21198:	4286fb5f 	.word	0x4286fb5f
   2119c:	af13f47f 	.word	0xaf13f47f
   211a0:	462868e1 	.word	0x462868e1
   211a4:	f003310c 	.word	0xf003310c
   211a8:	e70cfb5f 	.word	0xe70cfb5f
   211ac:	f0034628 	.word	0xf0034628
   211b0:	4606fb53 	.word	0x4606fb53
   211b4:	300c68a0 	.word	0x300c68a0
   211b8:	fb4ef003 	.word	0xfb4ef003
   211bc:	f47f4286 	.word	0xf47f4286
   211c0:	68a1aefc 	.word	0x68a1aefc
   211c4:	310c4628 	.word	0x310c4628
   211c8:	fb4ef003 	.word	0xfb4ef003
   211cc:	4628e6f5 	.word	0x4628e6f5
   211d0:	fb42f003 	.word	0xfb42f003
   211d4:	68604606 	.word	0x68604606
   211d8:	f003300c 	.word	0xf003300c
   211dc:	4286fb3d 	.word	0x4286fb3d
   211e0:	aee5f47f 	.word	0xaee5f47f
   211e4:	46286861 	.word	0x46286861
   211e8:	f003310c 	.word	0xf003310c
   211ec:	e6defb3d 	.word	0xe6defb3d
   211f0:	f0034608 	.word	0xf0034608
   211f4:	4606fb31 	.word	0x4606fb31
   211f8:	300c6820 	.word	0x300c6820
   211fc:	fb2cf003 	.word	0xfb2cf003
   21200:	f47f4286 	.word	0xf47f4286
   21204:	6821aece 	.word	0x6821aece
   21208:	310c4628 	.word	0x310c4628
   2120c:	fb2cf003 	.word	0xfb2cf003
   21210:	bf00e6c7 	.word	0xbf00e6c7
   21214:	20021aec 	.word	0x20021aec
   21218:	f0034628 	.word	0xf0034628
   2121c:	4606fb1d 	.word	0x4606fb1d
   21220:	300c6920 	.word	0x300c6920
   21224:	fb18f003 	.word	0xfb18f003
   21228:	f47f4286 	.word	0xf47f4286
   2122c:	6921aed2 	.word	0x6921aed2
   21230:	310c4628 	.word	0x310c4628
   21234:	fb18f003 	.word	0xfb18f003
   21238:	4628e6cb 	.word	0x4628e6cb
   2123c:	fb0cf003 	.word	0xfb0cf003
   21240:	6a204606 	.word	0x6a204606
   21244:	f003300c 	.word	0xf003300c
   21248:	4286fb07 	.word	0x4286fb07
   2124c:	aed9f47f 	.word	0xaed9f47f
   21250:	46286a21 	.word	0x46286a21
   21254:	f003310c 	.word	0xf003310c
   21258:	e6d2fb07 	.word	0xe6d2fb07
   2125c:	f0034628 	.word	0xf0034628
   21260:	4606fafb 	.word	0x4606fafb
   21264:	300c69e0 	.word	0x300c69e0
   21268:	faf6f003 	.word	0xfaf6f003
   2126c:	f47f4286 	.word	0xf47f4286
   21270:	69e1aec2 	.word	0x69e1aec2
   21274:	310c4628 	.word	0x310c4628
   21278:	faf6f003 	.word	0xfaf6f003
   2127c:	4628e6bb 	.word	0x4628e6bb
   21280:	faeaf003 	.word	0xfaeaf003
   21284:	69a04606 	.word	0x69a04606
   21288:	f003300c 	.word	0xf003300c
   2128c:	4286fae5 	.word	0x4286fae5
   21290:	aeabf47f 	.word	0xaeabf47f
   21294:	462869a1 	.word	0x462869a1
   21298:	f003310c 	.word	0xf003310c
   2129c:	e6a4fae5 	.word	0xe6a4fae5
   212a0:	f0034628 	.word	0xf0034628
   212a4:	4606fad9 	.word	0x4606fad9
   212a8:	300c6960 	.word	0x300c6960
   212ac:	fad4f003 	.word	0xfad4f003
   212b0:	f47f4286 	.word	0xf47f4286
   212b4:	6961ae94 	.word	0x6961ae94
   212b8:	310c4628 	.word	0x310c4628
   212bc:	fad4f003 	.word	0xfad4f003
   212c0:	4628e68d 	.word	0x4628e68d
   212c4:	fac8f003 	.word	0xfac8f003
   212c8:	68e04607 	.word	0x68e04607
   212cc:	f003300c 	.word	0xf003300c
   212d0:	4287fac3 	.word	0x4287fac3
   212d4:	af09f47f 	.word	0xaf09f47f
   212d8:	462868e1 	.word	0x462868e1
   212dc:	f003310c 	.word	0xf003310c
   212e0:	2800fac3 	.word	0x2800fac3
   212e4:	af01f47f 	.word	0xaf01f47f
   212e8:	6f1a68e3 	.word	0x6f1a68e3
   212ec:	f57f07d1 	.word	0xf57f07d1
   212f0:	6858aefc 	.word	0x6858aefc
   212f4:	f47f1c43 	.word	0xf47f1c43
   212f8:	4dc6ae8c 	.word	0x4dc6ae8c
   212fc:	f44f4ac6 	.word	0xf44f4ac6
   21300:	46287180 	.word	0x46287180
   21304:	f9ccf7f0 	.word	0xf9ccf7f0
   21308:	3026f854 	.word	0x3026f854
   2130c:	7180f5c0 	.word	0x7180f5c0
   21310:	4ac2681b 	.word	0x4ac2681b
   21314:	f8df4428 	.word	0xf8df4428
   21318:	f7f0830c 	.word	0xf7f0830c
   2131c:	4628f9c1 	.word	0x4628f9c1
   21320:	9000f8d8 	.word	0x9000f8d8
   21324:	f0032700 	.word	0xf0032700
   21328:	4629fa97 	.word	0x4629fa97
   2132c:	463b4602 	.word	0x463b4602
   21330:	97014648 	.word	0x97014648
   21334:	f7f29700 	.word	0xf7f29700
   21338:	4681fa2f 	.word	0x4681fa2f
   2133c:	f0034628 	.word	0xf0034628
   21340:	4548fa8b 	.word	0x4548fa8b
   21344:	81e9f040 	.word	0x81e9f040
   21348:	f44f463b 	.word	0xf44f463b
   2134c:	e9cd7280 	.word	0xe9cd7280
   21350:	46297700 	.word	0x46297700
   21354:	0000f8d8 	.word	0x0000f8d8
   21358:	fb06f7f2 	.word	0xfb06f7f2
   2135c:	48b04607 	.word	0x48b04607
   21360:	fa7af003 	.word	0xfa7af003
   21364:	46024287 	.word	0x46024287
   21368:	81c7f2c0 	.word	0x81c7f2c0
   2136c:	48ac4629 	.word	0x48ac4629
   21370:	fa87f003 	.word	0xfa87f003
   21374:	f0402800 	.word	0xf0402800
   21378:	462981c0 	.word	0x462981c0
   2137c:	f7ff4630 	.word	0xf7ff4630
   21380:	f854f92b 	.word	0xf854f92b
   21384:	68583026 	.word	0x68583026
   21388:	4628e643 	.word	0x4628e643
   2138c:	fa64f003 	.word	0xfa64f003
   21390:	69204606 	.word	0x69204606
   21394:	f003300c 	.word	0xf003300c
   21398:	4286fa5f 	.word	0x4286fa5f
   2139c:	aeabf47f 	.word	0xaeabf47f
   213a0:	46286921 	.word	0x46286921
   213a4:	f003310c 	.word	0xf003310c
   213a8:	2800fa5f 	.word	0x2800fa5f
   213ac:	aea3f47f 	.word	0xaea3f47f
   213b0:	6f1a6923 	.word	0x6f1a6923
   213b4:	f57f07d2 	.word	0xf57f07d2
   213b8:	2604ae9e 	.word	0x2604ae9e
   213bc:	4628e799 	.word	0x4628e799
   213c0:	fa4af003 	.word	0xfa4af003
   213c4:	69604606 	.word	0x69604606
   213c8:	f003300c 	.word	0xf003300c
   213cc:	4286fa45 	.word	0x4286fa45
   213d0:	ae97f47f 	.word	0xae97f47f
   213d4:	46286961 	.word	0x46286961
   213d8:	f003310c 	.word	0xf003310c
   213dc:	2800fa45 	.word	0x2800fa45
   213e0:	ae8ff47f 	.word	0xae8ff47f
   213e4:	6f1a6963 	.word	0x6f1a6963
   213e8:	f57f07d7 	.word	0xf57f07d7
   213ec:	2605ae8a 	.word	0x2605ae8a
   213f0:	4628e77f 	.word	0x4628e77f
   213f4:	fa30f003 	.word	0xfa30f003
   213f8:	69a04606 	.word	0x69a04606
   213fc:	f003300c 	.word	0xf003300c
   21400:	4286fa2b 	.word	0x4286fa2b
   21404:	ae83f47f 	.word	0xae83f47f
   21408:	462869a1 	.word	0x462869a1
   2140c:	f003310c 	.word	0xf003310c
   21410:	2800fa2b 	.word	0x2800fa2b
   21414:	ae7bf47f 	.word	0xae7bf47f
   21418:	6f1a69a3 	.word	0x6f1a69a3
   2141c:	f57f07d6 	.word	0xf57f07d6
   21420:	2606ae76 	.word	0x2606ae76
   21424:	4628e765 	.word	0x4628e765
   21428:	fa16f003 	.word	0xfa16f003
   2142c:	68e04607 	.word	0x68e04607
   21430:	f003300c 	.word	0xf003300c
   21434:	4287fa11 	.word	0x4287fa11
   21438:	ae05f47f 	.word	0xae05f47f
   2143c:	462868e1 	.word	0x462868e1
   21440:	f003310c 	.word	0xf003310c
   21444:	2800fa11 	.word	0x2800fa11
   21448:	adfdf47f 	.word	0xadfdf47f
   2144c:	6f1a68e3 	.word	0x6f1a68e3
   21450:	f53f0791 	.word	0xf53f0791
   21454:	e5f6af4e 	.word	0xe5f6af4e
   21458:	f0034628 	.word	0xf0034628
   2145c:	4606f9fd 	.word	0x4606f9fd
   21460:	300c6920 	.word	0x300c6920
   21464:	f9f8f003 	.word	0xf9f8f003
   21468:	f47f4286 	.word	0xf47f4286
   2146c:	6921adf2 	.word	0x6921adf2
   21470:	310c4628 	.word	0x310c4628
   21474:	f9f8f003 	.word	0xf9f8f003
   21478:	f47f2800 	.word	0xf47f2800
   2147c:	6923adea 	.word	0x6923adea
   21480:	07926f1a 	.word	0x07926f1a
   21484:	e5e4d499 	.word	0xe5e4d499
   21488:	f0034628 	.word	0xf0034628
   2148c:	4606f9e5 	.word	0x4606f9e5
   21490:	300c6960 	.word	0x300c6960
   21494:	f9e0f003 	.word	0xf9e0f003
   21498:	f47f4286 	.word	0xf47f4286
   2149c:	6961ade0 	.word	0x6961ade0
   214a0:	310c4628 	.word	0x310c4628
   214a4:	f9e0f003 	.word	0xf9e0f003
   214a8:	f47f2800 	.word	0xf47f2800
   214ac:	6963add8 	.word	0x6963add8
   214b0:	07976f1a 	.word	0x07976f1a
   214b4:	e5d2d49b 	.word	0xe5d2d49b
   214b8:	f0034628 	.word	0xf0034628
   214bc:	4606f9cd 	.word	0x4606f9cd
   214c0:	300c69a0 	.word	0x300c69a0
   214c4:	f9c8f003 	.word	0xf9c8f003
   214c8:	f47f4286 	.word	0xf47f4286
   214cc:	69a1adce 	.word	0x69a1adce
   214d0:	310c4628 	.word	0x310c4628
   214d4:	f9c8f003 	.word	0xf9c8f003
   214d8:	f47f2800 	.word	0xf47f2800
   214dc:	69a3adc6 	.word	0x69a3adc6
   214e0:	07966f1a 	.word	0x07966f1a
   214e4:	e5c0d49d 	.word	0xe5c0d49d
   214e8:	f0034628 	.word	0xf0034628
   214ec:	4606f9b5 	.word	0x4606f9b5
   214f0:	300c69e0 	.word	0x300c69e0
   214f4:	f9b0f003 	.word	0xf9b0f003
   214f8:	f47f4286 	.word	0xf47f4286
   214fc:	69e1adbc 	.word	0x69e1adbc
   21500:	310c4628 	.word	0x310c4628
   21504:	f9b0f003 	.word	0xf9b0f003
   21508:	f47f2800 	.word	0xf47f2800
   2150c:	69e3adb4 	.word	0x69e3adb4
   21510:	07906f1a 	.word	0x07906f1a
   21514:	adaff57f 	.word	0xadaff57f
   21518:	e6ea2607 	.word	0xe6ea2607
   2151c:	f0034628 	.word	0xf0034628
   21520:	4606f99b 	.word	0x4606f99b
   21524:	300c6a20 	.word	0x300c6a20
   21528:	f996f003 	.word	0xf996f003
   2152c:	f47f4286 	.word	0xf47f4286
   21530:	6a21ada8 	.word	0x6a21ada8
   21534:	310c4628 	.word	0x310c4628
   21538:	f996f003 	.word	0xf996f003
   2153c:	f47f2800 	.word	0xf47f2800
   21540:	6a23ada0 	.word	0x6a23ada0
   21544:	07916f1a 	.word	0x07916f1a
   21548:	ad9bf57f 	.word	0xad9bf57f
   2154c:	e6d02608 	.word	0xe6d02608
   21550:	f0034628 	.word	0xf0034628
   21554:	4606f981 	.word	0x4606f981
   21558:	300c69e0 	.word	0x300c69e0
   2155c:	f97cf003 	.word	0xf97cf003
   21560:	f47f4286 	.word	0xf47f4286
   21564:	69e1adda 	.word	0x69e1adda
   21568:	310c4628 	.word	0x310c4628
   2156c:	f97cf003 	.word	0xf97cf003
   21570:	f47f2800 	.word	0xf47f2800
   21574:	69e3add2 	.word	0x69e3add2
   21578:	07d06f1a 	.word	0x07d06f1a
   2157c:	e5ccd4cc 	.word	0xe5ccd4cc
   21580:	f0034628 	.word	0xf0034628
   21584:	4606f969 	.word	0x4606f969
   21588:	300c6a20 	.word	0x300c6a20
   2158c:	f964f003 	.word	0xf964f003
   21590:	f47f4286 	.word	0xf47f4286
   21594:	6a21adc8 	.word	0x6a21adc8
   21598:	310c4628 	.word	0x310c4628
   2159c:	f964f003 	.word	0xf964f003
   215a0:	f47f2800 	.word	0xf47f2800
   215a4:	6a23adc0 	.word	0x6a23adc0
   215a8:	07d16f1a 	.word	0x07d16f1a
   215ac:	e5bad4ce 	.word	0xe5bad4ce
   215b0:	f0034628 	.word	0xf0034628
   215b4:	4606f951 	.word	0x4606f951
   215b8:	300c68a0 	.word	0x300c68a0
   215bc:	f94cf003 	.word	0xf94cf003
   215c0:	f47f4286 	.word	0xf47f4286
   215c4:	68a1ad8c 	.word	0x68a1ad8c
   215c8:	310c4628 	.word	0x310c4628
   215cc:	f94cf003 	.word	0xf94cf003
   215d0:	f47f2800 	.word	0xf47f2800
   215d4:	68a3ad84 	.word	0x68a3ad84
   215d8:	07d06f1a 	.word	0x07d06f1a
   215dc:	ad7ff57f 	.word	0xad7ff57f
   215e0:	e6862602 	.word	0xe6862602
   215e4:	f0034628 	.word	0xf0034628
   215e8:	4606f937 	.word	0x4606f937
   215ec:	300c68a0 	.word	0x300c68a0
   215f0:	f932f003 	.word	0xf932f003
   215f4:	f47f4286 	.word	0xf47f4286
   215f8:	68a1ad20 	.word	0x68a1ad20
   215fc:	310c4628 	.word	0x310c4628
   21600:	f932f003 	.word	0xf932f003
   21604:	f47f2800 	.word	0xf47f2800
   21608:	68a3ad18 	.word	0x68a3ad18
   2160c:	07906f1a 	.word	0x07906f1a
   21610:	e512d4e6 	.word	0xe512d4e6
   21614:	200219ec 	.word	0x200219ec
   21618:	00027878 	.word	0x00027878
   2161c:	00027874 	.word	0x00027874
   21620:	00027888 	.word	0x00027888
   21624:	200219e8 	.word	0x200219e8
   21628:	f0034628 	.word	0xf0034628
   2162c:	4606f915 	.word	0x4606f915
   21630:	300c6860 	.word	0x300c6860
   21634:	f910f003 	.word	0xf910f003
   21638:	f47f4286 	.word	0xf47f4286
   2163c:	6861acf8 	.word	0x6861acf8
   21640:	310c4628 	.word	0x310c4628
   21644:	f910f003 	.word	0xf910f003
   21648:	f47f2800 	.word	0xf47f2800
   2164c:	6863acf0 	.word	0x6863acf0
   21650:	07966f1a 	.word	0x07966f1a
   21654:	acebf57f 	.word	0xacebf57f
   21658:	e64a2601 	.word	0xe64a2601
   2165c:	f0034628 	.word	0xf0034628
   21660:	4606f8fb 	.word	0x4606f8fb
   21664:	300c6860 	.word	0x300c6860
   21668:	f8f6f003 	.word	0xf8f6f003
   2166c:	f47f4286 	.word	0xf47f4286
   21670:	6861ad30 	.word	0x6861ad30
   21674:	310c4628 	.word	0x310c4628
   21678:	f8f6f003 	.word	0xf8f6f003
   2167c:	f47f2800 	.word	0xf47f2800
   21680:	6863ad28 	.word	0x6863ad28
   21684:	07d66f1a 	.word	0x07d66f1a
   21688:	e522d4e6 	.word	0xe522d4e6
   2168c:	f0034608 	.word	0xf0034608
   21690:	4606f8e3 	.word	0x4606f8e3
   21694:	300c6820 	.word	0x300c6820
   21698:	f8def003 	.word	0xf8def003
   2169c:	f47f4286 	.word	0xf47f4286
   216a0:	6821acc0 	.word	0x6821acc0
   216a4:	310c4628 	.word	0x310c4628
   216a8:	f8def003 	.word	0xf8def003
   216ac:	28004606 	.word	0x28004606
   216b0:	acb7f47f 	.word	0xacb7f47f
   216b4:	6f1a6823 	.word	0x6f1a6823
   216b8:	f53f0797 	.word	0xf53f0797
   216bc:	e4b0ae1a 	.word	0xe4b0ae1a
   216c0:	f0034608 	.word	0xf0034608
   216c4:	4606f8c9 	.word	0x4606f8c9
   216c8:	300c6820 	.word	0x300c6820
   216cc:	f8c4f003 	.word	0xf8c4f003
   216d0:	f47f4286 	.word	0xf47f4286
   216d4:	6821acf8 	.word	0x6821acf8
   216d8:	310c4628 	.word	0x310c4628
   216dc:	f8c4f003 	.word	0xf8c4f003
   216e0:	28004606 	.word	0x28004606
   216e4:	aceff47f 	.word	0xaceff47f
   216e8:	6f1a6823 	.word	0x6f1a6823
   216ec:	f53f07d7 	.word	0xf53f07d7
   216f0:	e4e8ae00 	.word	0xe4e8ae00
   216f4:	30fff04f 	.word	0x30fff04f
   216f8:	480b4770 	.word	0x480b4770
   216fc:	f8acf003 	.word	0xf8acf003
   21700:	4602490a 	.word	0x4602490a
   21704:	f0034808 	.word	0xf0034808
   21708:	b930f8bc 	.word	0xb930f8bc
   2170c:	f7f02008 	.word	0xf7f02008
   21710:	f854fd0f 	.word	0xf854fd0f
   21714:	68583026 	.word	0x68583026
   21718:	2005e47b 	.word	0x2005e47b
   2171c:	fd08f7f0 	.word	0xfd08f7f0
   21720:	3026f854 	.word	0x3026f854
   21724:	e4746858 	.word	0xe4746858
   21728:	000278cc 	.word	0x000278cc
   2172c:	200219ec 	.word	0x200219ec

00021730 <bsd_platform_getaddrinfo>:
   21730:	be04f7f7 	.word	0xbe04f7f7

00021734 <bsd_platform_freeaddrinfo>:
   21734:	bef8f7f7 	.word	0xbef8f7f7

00021738 <bsd_platform_poll>:
   21738:	43f0e92d 	.word	0x43f0e92d
   2173c:	72e2ea42 	.word	0x72e2ea42
   21740:	9200b083 	.word	0x9200b083
   21744:	d0482800 	.word	0xd0482800
   21748:	2b071e4b 	.word	0x2b071e4b
   2174c:	4680d845 	.word	0x4680d845
   21750:	24004605 	.word	0x24004605
   21754:	07c1eb00 	.word	0x07c1eb00
   21758:	682888ab 	.word	0x682888ab
   2175c:	0303f003 	.word	0x0303f003
   21760:	f043a901 	.word	0xf043a901
   21764:	f7f6061c 	.word	0xf7f6061c
   21768:	9b01fd1f 	.word	0x9b01fd1f
   2176c:	40333508 	.word	0x40333508
   21770:	3c02f825 	.word	0x3c02f825
   21774:	3401b103 	.word	0x3401b103
   21778:	d1ed42af 	.word	0xd1ed42af
   2177c:	4669bb9c 	.word	0x4669bb9c
   21780:	f7f04640 	.word	0xf7f04640
   21784:	4607fc45 	.word	0x4607fc45
   21788:	283cb108 	.word	0x283cb108
   2178c:	46c1d11d 	.word	0x46c1d11d
   21790:	f8b92600 	.word	0xf8b92600
   21794:	f8d93004 	.word	0xf8d93004
   21798:	f0030000 	.word	0xf0030000
   2179c:	a9010303 	.word	0xa9010303
   217a0:	041cf043 	.word	0x041cf043
   217a4:	fd00f7f6 	.word	0xfd00f7f6
   217a8:	f1099b01 	.word	0xf1099b01
   217ac:	40230908 	.word	0x40230908
   217b0:	3c02f829 	.word	0x3c02f829
   217b4:	3601b103 	.word	0x3601b103
   217b8:	d1ea454d 	.word	0xd1ea454d
   217bc:	2f00b90e 	.word	0x2f00b90e
   217c0:	4630d0dd 	.word	0x4630d0dd
   217c4:	e8bdb003 	.word	0xe8bdb003
   217c8:	202383f0 	.word	0x202383f0
   217cc:	fcb0f7f0 	.word	0xfcb0f7f0
   217d0:	30fff04f 	.word	0x30fff04f
   217d4:	e8bdb003 	.word	0xe8bdb003
   217d8:	201683f0 	.word	0x201683f0
   217dc:	fca8f7f0 	.word	0xfca8f7f0
   217e0:	30fff04f 	.word	0x30fff04f
   217e4:	4620e7ee 	.word	0x4620e7ee
   217e8:	bf00e7ec 	.word	0xbf00e7ec

000217ec <bsd_platform_fcntl>:
   217ec:	4b06b508 	.word	0x4b06b508
   217f0:	d0034383 	.word	0xd0034383
   217f4:	4008e8bd 	.word	0x4008e8bd
   217f8:	bd54f7f6 	.word	0xbd54f7f6
   217fc:	f7f0202d 	.word	0xf7f0202d
   21800:	f04ffc97 	.word	0xf04ffc97
   21804:	bd0830ff 	.word	0xbd0830ff
   21808:	49765432 	.word	0x49765432

0002180c <stream_handler_init>:
   2180c:	4604b510 	.word	0x4604b510
   21810:	f7fd200c 	.word	0xf7fd200c
   21814:	60e0fed1 	.word	0x60e0fed1
   21818:	2300b128 	.word	0x2300b128
   2181c:	e8bd6123 	.word	0xe8bd6123
   21820:	f7f84010 	.word	0xf7f84010
   21824:	2004ba1b 	.word	0x2004ba1b
   21828:	bf00bd10 	.word	0xbf00bd10

0002182c <stream_handler_put>:
   2182c:	4606b570 	.word	0x4606b570
   21830:	460d2014 	.word	0x460d2014
   21834:	fec0f7fd 	.word	0xfec0f7fd
   21838:	682bb178 	.word	0x682bb178
   2183c:	60434604 	.word	0x60434604
   21840:	4601686b 	.word	0x4601686b
   21844:	68eb6083 	.word	0x68eb6083
   21848:	68ab60c3 	.word	0x68ab60c3
   2184c:	68f06103 	.word	0x68f06103
   21850:	fa0ef7f8 	.word	0xfa0ef7f8
   21854:	6868b920 	.word	0x6868b920
   21858:	f04fbd70 	.word	0xf04fbd70
   2185c:	bd7030ff 	.word	0xbd7030ff
   21860:	f7fd4620 	.word	0xf7fd4620
   21864:	f04ffec7 	.word	0xf04ffec7
   21868:	bd7030ff 	.word	0xbd7030ff

0002186c <stream_handler_get>:
   2186c:	4ff0e92d 	.word	0x4ff0e92d
   21870:	b0874682 	.word	0xb0874682
   21874:	468968c0 	.word	0x468968c0
   21878:	f7f84693 	.word	0xf7f84693
   2187c:	2800fa19 	.word	0x2800fa19
   21880:	4605d072 	.word	0x4605d072
   21884:	0008f8d9 	.word	0x0008f8d9
   21888:	692bb120 	.word	0x692bb120
   2188c:	68eab113 	.word	0x68eab113
   21890:	d15c2a00 	.word	0xd15c2a00
   21894:	f8c92300 	.word	0xf8c92300
   21898:	f8d9300c 	.word	0xf8d9300c
   2189c:	f8d92000 	.word	0xf8d92000
   218a0:	f8da8004 	.word	0xf8da8004
   218a4:	92011010 	.word	0x92011010
   218a8:	0f00f1b8 	.word	0x0f00f1b8
   218ac:	f00bd05a 	.word	0xf00bd05a
   218b0:	24000308 	.word	0x24000308
   218b4:	e0109300 	.word	0xe0109300
   218b8:	3010f8da 	.word	0x3010f8da
   218bc:	f8ca443b 	.word	0xf8ca443b
   218c0:	46283010 	.word	0x46283010
   218c4:	f9fcf7f8 	.word	0xf9fcf7f8
   218c8:	4605443c 	.word	0x4605443c
   218cc:	d0382800 	.word	0xd0382800
   218d0:	d93645a0 	.word	0xd93645a0
   218d4:	f8d92100 	.word	0xf8d92100
   218d8:	68ae2000 	.word	0x68ae2000
   218dc:	0b04eba8 	.word	0x0b04eba8
   218e0:	455e1a76 	.word	0x455e1a76
   218e4:	bf284637 	.word	0xbf284637
   218e8:	b132465f 	.word	0xb132465f
   218ec:	9b016868 	.word	0x9b016868
   218f0:	463a4401 	.word	0x463a4401
   218f4:	f0021918 	.word	0xf0021918
   218f8:	9b00ffe3 	.word	0x9b00ffe3
   218fc:	d1e02b00 	.word	0xd1e02b00
   21900:	d8d9455e 	.word	0xd8d9455e
   21904:	000cf8da 	.word	0x000cf8da
   21908:	f9c8f7f8 	.word	0xf9c8f7f8
   2190c:	b1704606 	.word	0xb1704606
   21910:	2301e9d0 	.word	0x2301e9d0
   21914:	0103e9d0 	.word	0x0103e9d0
   21918:	2302e9cd 	.word	0x2302e9cd
   2191c:	1004e9cd 	.word	0x1004e9cd
   21920:	3101e9da 	.word	0x3101e9da
   21924:	4798a802 	.word	0x4798a802
   21928:	f7fd4630 	.word	0xf7fd4630
   2192c:	2300fe63 	.word	0x2300fe63
   21930:	f8ca4628 	.word	0xf8ca4628
   21934:	f7f83010 	.word	0xf7f83010
   21938:	443cf9c3 	.word	0x443cf9c3
   2193c:	28004605 	.word	0x28004605
   21940:	4620d1c6 	.word	0x4620d1c6
   21944:	4004f8c9 	.word	0x4004f8c9
   21948:	e8bdb007 	.word	0xe8bdb007
   2194c:	f8d98ff0 	.word	0xf8d98ff0
   21950:	429a300c 	.word	0x429a300c
   21954:	461abf28 	.word	0x461abf28
   21958:	200cf8c9 	.word	0x200cf8c9
   2195c:	f0026929 	.word	0xf0026929
   21960:	e79affaf 	.word	0xe79affaf
   21964:	e7ec4644 	.word	0xe7ec4644
   21968:	30fff04f 	.word	0x30fff04f
   2196c:	bf00e7ec 	.word	0xbf00e7ec

00021970 <stream_handler_available>:
   21970:	4604b510 	.word	0x4604b510
   21974:	f7f868c0 	.word	0xf7f868c0
   21978:	b150f99b 	.word	0xb150f99b
   2197c:	42646924 	.word	0x42646924
   21980:	441c6883 	.word	0x441c6883
   21984:	f99cf7f8 	.word	0xf99cf7f8
   21988:	d1f92800 	.word	0xd1f92800
   2198c:	70e4ea24 	.word	0x70e4ea24
   21990:	f04fbd10 	.word	0xf04fbd10
   21994:	bd1030ff 	.word	0xbd1030ff

00021998 <stream_handler_flush>:
   21998:	4605b530 	.word	0x4605b530
   2199c:	b08568c0 	.word	0xb08568c0
   219a0:	e01ab9a8 	.word	0xe01ab9a8
   219a4:	f7f868e8 	.word	0xf7f868e8
   219a8:	4604f979 	.word	0x4604f979
   219ac:	e9d0b170 	.word	0xe9d0b170
   219b0:	e9d40101 	.word	0xe9d40101
   219b4:	e9cd3203 	.word	0xe9cd3203
   219b8:	e9cd0100 	.word	0xe9cd0100
   219bc:	e9d52302 	.word	0xe9d52302
   219c0:	46683101 	.word	0x46683101
   219c4:	46204798 	.word	0x46204798
   219c8:	fe14f7fd 	.word	0xfe14f7fd
   219cc:	f7f868e8 	.word	0xf7f868e8
   219d0:	2800f975 	.word	0x2800f975
   219d4:	b005d1e6 	.word	0xb005d1e6
   219d8:	2008bd30 	.word	0x2008bd30
   219dc:	bd30b005 	.word	0xbd30b005

000219e0 <stream_handler_free>:
   219e0:	4605b530 	.word	0x4605b530
   219e4:	b08568c0 	.word	0xb08568c0
   219e8:	e01cb9a0 	.word	0xe01cb9a0
   219ec:	f956f7f8 	.word	0xf956f7f8
   219f0:	b1704604 	.word	0xb1704604
   219f4:	0101e9d0 	.word	0x0101e9d0
   219f8:	3203e9d4 	.word	0x3203e9d4
   219fc:	0100e9cd 	.word	0x0100e9cd
   21a00:	2302e9cd 	.word	0x2302e9cd
   21a04:	3101e9d5 	.word	0x3101e9d5
   21a08:	47984668 	.word	0x47984668
   21a0c:	f7fd4620 	.word	0xf7fd4620
   21a10:	68e8fdf1 	.word	0x68e8fdf1
   21a14:	f952f7f8 	.word	0xf952f7f8
   21a18:	68e84604 	.word	0x68e84604
   21a1c:	d1e52c00 	.word	0xd1e52c00
   21a20:	fde8f7fd 	.word	0xfde8f7fd
   21a24:	b00560ec 	.word	0xb00560ec
   21a28:	bf00bd30 	.word	0xbf00bd30

00021a2c <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   21a2c:	4a07      	ldr	r2, [pc, #28]	; (21a4c <SystemInit+0x20>)
   21a2e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   21a32:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   21a36:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   21a3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   21a3e:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   21a42:	4b03      	ldr	r3, [pc, #12]	; (21a50 <SystemInit+0x24>)
   21a44:	4a03      	ldr	r2, [pc, #12]	; (21a54 <SystemInit+0x28>)
   21a46:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   21a48:	4770      	bx	lr
   21a4a:	bf00      	nop
   21a4c:	e000ed00 	.word	0xe000ed00
   21a50:	2002d418 	.word	0x2002d418
   21a54:	03d09000 	.word	0x03d09000

00021a58 <nrfx_uarte_init>:
}

nrfx_err_t nrfx_uarte_init(nrfx_uarte_t const *        p_instance,
                           nrfx_uarte_config_t const * p_config,
                           nrfx_uarte_event_handler_t  event_handler)
{
   21a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21a5c:	4606      	mov	r6, r0
    NRFX_ASSERT(p_config);
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   21a5e:	7904      	ldrb	r4, [r0, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   21a60:	2024      	movs	r0, #36	; 0x24
   21a62:	4d42      	ldr	r5, [pc, #264]	; (21b6c <nrfx_uarte_init+0x114>)
   21a64:	fb00 5004 	mla	r0, r0, r4, r5
   21a68:	f890 0020 	ldrb.w	r0, [r0, #32]
   21a6c:	2800      	cmp	r0, #0
   21a6e:	d17a      	bne.n	21b66 <nrfx_uarte_init+0x10e>
    if (p_config->pseltxd != NRF_UARTE_PSEL_DISCONNECTED)
   21a70:	680f      	ldr	r7, [r1, #0]
   21a72:	1c7b      	adds	r3, r7, #1
   21a74:	d009      	beq.n	21a8a <nrfx_uarte_init+0x32>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21a76:	2301      	movs	r3, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   21a78:	f04f 0c03 	mov.w	ip, #3
    p_reg->OUTSET = set_mask;
   21a7c:	483c      	ldr	r0, [pc, #240]	; (21b70 <nrfx_uarte_init+0x118>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21a7e:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   21a80:	6083      	str	r3, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   21a82:	f107 0380 	add.w	r3, r7, #128	; 0x80
   21a86:	f840 c023 	str.w	ip, [r0, r3, lsl #2]
    if (p_config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED)
   21a8a:	f8d1 c004 	ldr.w	ip, [r1, #4]
                    | (uint32_t)p_cfg->hwfc;
   21a8e:	f891 801b 	ldrb.w	r8, [r1, #27]
   21a92:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
   21a96:	bf1f      	itttt	ne
   21a98:	f04f 0e00 	movne.w	lr, #0
   21a9c:	4834      	ldrne	r0, [pc, #208]	; (21b70 <nrfx_uarte_init+0x118>)
   21a9e:	f10c 0380 	addne.w	r3, ip, #128	; 0x80
   21aa2:	f840 e023 	strne.w	lr, [r0, r3, lsl #2]
    nrf_uarte_baudrate_set(p_instance->p_reg, p_config->baudrate);
   21aa6:	6948      	ldr	r0, [r1, #20]
   21aa8:	6833      	ldr	r3, [r6, #0]
   21aaa:	f891 e019 	ldrb.w	lr, [r1, #25]
    p_reg->BAUDRATE = baudrate;
   21aae:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   21ab2:	7e88      	ldrb	r0, [r1, #26]
    if (p_config->hal_cfg.hwfc == NRF_UARTE_HWFC_ENABLED)
   21ab4:	f1be 0f01 	cmp.w	lr, #1
   21ab8:	ea40 0008 	orr.w	r0, r0, r8
   21abc:	ea4e 0000 	orr.w	r0, lr, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   21ac0:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->PSEL.TXD = pseltxd;
   21ac4:	f8c3 750c 	str.w	r7, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   21ac8:	f8c3 c514 	str.w	ip, [r3, #1300]	; 0x514
   21acc:	d120      	bne.n	21b10 <nrfx_uarte_init+0xb8>
        if (p_config->pselcts != NRF_UARTE_PSEL_DISCONNECTED)
   21ace:	688f      	ldr	r7, [r1, #8]
   21ad0:	1c78      	adds	r0, r7, #1
   21ad2:	bf1f      	itttt	ne
   21ad4:	f04f 0e00 	movne.w	lr, #0
   21ad8:	f8df c094 	ldrne.w	ip, [pc, #148]	; 21b70 <nrfx_uarte_init+0x118>
   21adc:	f107 0080 	addne.w	r0, r7, #128	; 0x80
   21ae0:	f84c e020 	strne.w	lr, [ip, r0, lsl #2]
        if (p_config->pselrts != NRF_UARTE_PSEL_DISCONNECTED)
   21ae4:	68c8      	ldr	r0, [r1, #12]
   21ae6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   21aea:	d00d      	beq.n	21b08 <nrfx_uarte_init+0xb0>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21aec:	f04f 0c01 	mov.w	ip, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   21af0:	f04f 0803 	mov.w	r8, #3
    p_reg->OUTSET = set_mask;
   21af4:	f8df e078 	ldr.w	lr, [pc, #120]	; 21b70 <nrfx_uarte_init+0x118>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21af8:	fa0c fc00 	lsl.w	ip, ip, r0
    p_reg->OUTSET = set_mask;
   21afc:	f8ce c008 	str.w	ip, [lr, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   21b00:	f100 0c80 	add.w	ip, r0, #128	; 0x80
   21b04:	f84e 802c 	str.w	r8, [lr, ip, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   21b08:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   21b0c:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    apply_config(p_instance, p_config);

    p_cb->handler   = event_handler;
   21b10:	2324      	movs	r3, #36	; 0x24
   21b12:	4363      	muls	r3, r4
    p_cb->p_context = p_config->p_context;
   21b14:	6909      	ldr	r1, [r1, #16]
    p_cb->handler   = event_handler;
   21b16:	18e8      	adds	r0, r5, r3
   21b18:	6042      	str	r2, [r0, #4]
    p_cb->p_context = p_config->p_context;
   21b1a:	50e9      	str	r1, [r5, r3]

    if (p_cb->handler)
   21b1c:	b192      	cbz	r2, 21b44 <nrfx_uarte_init+0xec>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21b1e:	2300      	movs	r3, #0
    {
        interrupts_enable(p_instance, p_config->interrupt_priority);
   21b20:	6830      	ldr	r0, [r6, #0]
   21b22:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
   21b26:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   21b2a:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   21b2e:	f8c0 3144 	str.w	r3, [r0, #324]	; 0x144
   21b32:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
    p_reg->INTENSET = mask;
   21b36:	4b0f      	ldr	r3, [pc, #60]	; (21b74 <nrfx_uarte_init+0x11c>)
   21b38:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    NRFX_IRQ_ENABLE(nrfx_get_irq_number((void *)p_instance->p_reg));
   21b3c:	f340 3007 	sbfx	r0, r0, #12, #8
   21b40:	f7ee fa02 	bl	ff48 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   21b44:	2208      	movs	r2, #8
    }

    nrf_uarte_enable(p_instance->p_reg);
   21b46:	6833      	ldr	r3, [r6, #0]
    p_cb->tx_buffer_length           = 0;
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   21b48:	480b      	ldr	r0, [pc, #44]	; (21b78 <nrfx_uarte_init+0x120>)
   21b4a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->rx_buffer_length           = 0;
   21b4e:	2324      	movs	r3, #36	; 0x24
   21b50:	2200      	movs	r2, #0
   21b52:	fb03 5304 	mla	r3, r3, r4, r5
    p_cb->rx_secondary_buffer_length = 0;
   21b56:	e9c3 2206 	strd	r2, r2, [r3, #24]
    p_cb->tx_buffer_length           = 0;
   21b5a:	615a      	str	r2, [r3, #20]
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
   21b5c:	2201      	movs	r2, #1
   21b5e:	f883 2020 	strb.w	r2, [r3, #32]
}
   21b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
   21b66:	4805      	ldr	r0, [pc, #20]	; (21b7c <nrfx_uarte_init+0x124>)
   21b68:	e7fb      	b.n	21b62 <nrfx_uarte_init+0x10a>
   21b6a:	bf00      	nop
   21b6c:	20021b14 	.word	0x20021b14
   21b70:	40842500 	.word	0x40842500
   21b74:	00420310 	.word	0x00420310
   21b78:	0bad0000 	.word	0x0bad0000
   21b7c:	0bad0005 	.word	0x0bad0005

00021b80 <nrfx_uarte_tx>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   21b80:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000

    nrfx_err_t err_code;

    // EasyDMA requires that transfer buffers are placed in DataRAM,
    // signal error if the are not.
    if (!nrfx_is_in_ram(p_data))
   21b84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
   21b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!nrfx_is_in_ram(p_data))
   21b8a:	d12e      	bne.n	21bea <nrfx_uarte_tx+0x6a>
    return err_code;
}

bool nrfx_uarte_tx_in_progress(nrfx_uarte_t const * p_instance)
{
    return (m_cb[p_instance->drv_inst_idx].tx_buffer_length != 0);
   21b8c:	2424      	movs	r4, #36	; 0x24
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   21b8e:	7905      	ldrb	r5, [r0, #4]
    return (m_cb[p_instance->drv_inst_idx].tx_buffer_length != 0);
   21b90:	4f19      	ldr	r7, [pc, #100]	; (21bf8 <nrfx_uarte_tx+0x78>)
   21b92:	fb04 7405 	mla	r4, r4, r5, r7
   21b96:	6966      	ldr	r6, [r4, #20]
    if (nrfx_uarte_tx_in_progress(p_instance))
   21b98:	bb4e      	cbnz	r6, 21bee <nrfx_uarte_tx+0x6e>
    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_ENDTX);
   21b9a:	6803      	ldr	r3, [r0, #0]
    p_cb->tx_buffer_length = length;
   21b9c:	6162      	str	r2, [r4, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21b9e:	f8c3 6120 	str.w	r6, [r3, #288]	; 0x120
   21ba2:	f8c3 6158 	str.w	r6, [r3, #344]	; 0x158
    nrf_uarte_tx_buffer_set(p_instance->p_reg, p_cb->p_tx_buffer, p_cb->tx_buffer_length);
   21ba6:	6962      	ldr	r2, [r4, #20]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   21ba8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   21bac:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21bb0:	2201      	movs	r2, #1
    p_cb->p_tx_buffer      = p_data;
   21bb2:	60a1      	str	r1, [r4, #8]
   21bb4:	609a      	str	r2, [r3, #8]
    if (p_cb->handler == NULL)
   21bb6:	6862      	ldr	r2, [r4, #4]
   21bb8:	b9da      	cbnz	r2, 21bf2 <nrfx_uarte_tx+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21bba:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   21bbe:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
        while ((!endtx) && (!txstopped));
   21bc2:	b919      	cbnz	r1, 21bcc <nrfx_uarte_tx+0x4c>
   21bc4:	2a00      	cmp	r2, #0
   21bc6:	d0f8      	beq.n	21bba <nrfx_uarte_tx+0x3a>
            err_code = NRFX_ERROR_FORBIDDEN;
   21bc8:	480c      	ldr	r0, [pc, #48]	; (21bfc <nrfx_uarte_tx+0x7c>)
   21bca:	e008      	b.n	21bde <nrfx_uarte_tx+0x5e>
        if (txstopped)
   21bcc:	2a00      	cmp	r2, #0
   21bce:	d1fb      	bne.n	21bc8 <nrfx_uarte_tx+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21bd0:	2201      	movs	r2, #1
   21bd2:	60da      	str	r2, [r3, #12]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21bd4:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
            while (!nrf_uarte_event_check(p_instance->p_reg, NRF_UARTE_EVENT_TXSTOPPED))
   21bd8:	2a00      	cmp	r2, #0
   21bda:	d0fb      	beq.n	21bd4 <nrfx_uarte_tx+0x54>
    err_code = NRFX_SUCCESS;
   21bdc:	4808      	ldr	r0, [pc, #32]	; (21c00 <nrfx_uarte_tx+0x80>)
        p_cb->tx_buffer_length = 0;
   21bde:	2324      	movs	r3, #36	; 0x24
   21be0:	fb03 7505 	mla	r5, r3, r5, r7
   21be4:	2300      	movs	r3, #0
   21be6:	616b      	str	r3, [r5, #20]
}
   21be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return err_code;
   21bea:	4806      	ldr	r0, [pc, #24]	; (21c04 <nrfx_uarte_tx+0x84>)
   21bec:	e7fc      	b.n	21be8 <nrfx_uarte_tx+0x68>
        return err_code;
   21bee:	4806      	ldr	r0, [pc, #24]	; (21c08 <nrfx_uarte_tx+0x88>)
   21bf0:	e7fa      	b.n	21be8 <nrfx_uarte_tx+0x68>
    err_code = NRFX_SUCCESS;
   21bf2:	4803      	ldr	r0, [pc, #12]	; (21c00 <nrfx_uarte_tx+0x80>)
   21bf4:	e7f8      	b.n	21be8 <nrfx_uarte_tx+0x68>
   21bf6:	bf00      	nop
   21bf8:	20021b14 	.word	0x20021b14
   21bfc:	0bad0008 	.word	0x0bad0008
   21c00:	0bad0000 	.word	0x0bad0000
   21c04:	0bad000a 	.word	0x0bad000a
   21c08:	0bad000b 	.word	0x0bad000b

00021c0c <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   21c0c:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   21c0e:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   21c10:	4b08      	ldr	r3, [pc, #32]	; (21c34 <z_sys_device_do_config_level+0x28>)
   21c12:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   21c16:	3001      	adds	r0, #1
   21c18:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   21c1c:	42a5      	cmp	r5, r4
   21c1e:	d800      	bhi.n	21c22 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   21c20:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   21c22:	6823      	ldr	r3, [r4, #0]
   21c24:	4620      	mov	r0, r4
   21c26:	685b      	ldr	r3, [r3, #4]
   21c28:	4798      	blx	r3
		if (retval != 0) {
   21c2a:	b100      	cbz	r0, 21c2e <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   21c2c:	6066      	str	r6, [r4, #4]
								info++) {
   21c2e:	340c      	adds	r4, #12
   21c30:	e7f4      	b.n	21c1c <z_sys_device_do_config_level+0x10>
   21c32:	bf00      	nop
   21c34:	000278e0 	.word	0x000278e0

00021c38 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   21c38:	4b10      	ldr	r3, [pc, #64]	; (21c7c <z_impl_device_get_binding+0x44>)
{
   21c3a:	b570      	push	{r4, r5, r6, lr}
   21c3c:	4605      	mov	r5, r0
   21c3e:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   21c40:	4c0f      	ldr	r4, [pc, #60]	; (21c80 <z_impl_device_get_binding+0x48>)
   21c42:	429c      	cmp	r4, r3
   21c44:	d104      	bne.n	21c50 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   21c46:	4c0e      	ldr	r4, [pc, #56]	; (21c80 <z_impl_device_get_binding+0x48>)
   21c48:	42b4      	cmp	r4, r6
   21c4a:	d109      	bne.n	21c60 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   21c4c:	2400      	movs	r4, #0
   21c4e:	e012      	b.n	21c76 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   21c50:	6862      	ldr	r2, [r4, #4]
   21c52:	b11a      	cbz	r2, 21c5c <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   21c54:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   21c56:	6812      	ldr	r2, [r2, #0]
   21c58:	42aa      	cmp	r2, r5
   21c5a:	d00c      	beq.n	21c76 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   21c5c:	340c      	adds	r4, #12
   21c5e:	e7f0      	b.n	21c42 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   21c60:	6863      	ldr	r3, [r4, #4]
   21c62:	b90b      	cbnz	r3, 21c68 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   21c64:	340c      	adds	r4, #12
   21c66:	e7ef      	b.n	21c48 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   21c68:	6823      	ldr	r3, [r4, #0]
   21c6a:	4628      	mov	r0, r5
   21c6c:	6819      	ldr	r1, [r3, #0]
   21c6e:	f002 fdfb 	bl	24868 <strcmp>
   21c72:	2800      	cmp	r0, #0
   21c74:	d1f6      	bne.n	21c64 <z_impl_device_get_binding+0x2c>
}
   21c76:	4620      	mov	r0, r4
   21c78:	bd70      	pop	{r4, r5, r6, pc}
   21c7a:	bf00      	nop
   21c7c:	2002d508 	.word	0x2002d508
   21c80:	2002d424 	.word	0x2002d424

00021c84 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   21c84:	4b01      	ldr	r3, [pc, #4]	; (21c8c <z_impl_z_errno+0x8>)
   21c86:	6898      	ldr	r0, [r3, #8]
}
   21c88:	3054      	adds	r0, #84	; 0x54
   21c8a:	4770      	bx	lr
   21c8c:	20025cfc 	.word	0x20025cfc

00021c90 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   21c90:	b510      	push	{r4, lr}
   21c92:	4604      	mov	r4, r0
	z_impl_log_panic();
   21c94:	f7ed fc40 	bl	f518 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   21c98:	2301      	movs	r3, #1
   21c9a:	f04f 0100 	mov.w	r1, #0
   21c9e:	4a08      	ldr	r2, [pc, #32]	; (21cc0 <k_sys_fatal_error_handler+0x30>)
   21ca0:	f363 0102 	bfi	r1, r3, #0, #3
   21ca4:	4b07      	ldr	r3, [pc, #28]	; (21cc4 <k_sys_fatal_error_handler+0x34>)
   21ca6:	f36f 01c5 	bfc	r1, #3, #3
   21caa:	1a9b      	subs	r3, r3, r2
   21cac:	08db      	lsrs	r3, r3, #3
   21cae:	4806      	ldr	r0, [pc, #24]	; (21cc8 <k_sys_fatal_error_handler+0x38>)
   21cb0:	f363 118f 	bfi	r1, r3, #6, #10
   21cb4:	f002 f8bf 	bl	23e36 <log_0>
	arch_system_halt(reason);
   21cb8:	4620      	mov	r0, r4
   21cba:	f003 febb 	bl	25a34 <arch_system_halt>
   21cbe:	bf00      	nop
   21cc0:	00026560 	.word	0x00026560
   21cc4:	000265b8 	.word	0x000265b8
   21cc8:	00028cbf 	.word	0x00028cbf

00021ccc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   21ccc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21cd0:	4605      	mov	r5, r0
   21cd2:	4688      	mov	r8, r1
	return z_impl_k_current_get();
   21cd4:	f000 fea4 	bl	22a20 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   21cd8:	2201      	movs	r2, #1
   21cda:	f04f 0300 	mov.w	r3, #0
   21cde:	4c29      	ldr	r4, [pc, #164]	; (21d84 <z_fatal_error+0xb8>)
   21ce0:	f362 0302 	bfi	r3, r2, #0, #3
   21ce4:	4a28      	ldr	r2, [pc, #160]	; (21d88 <z_fatal_error+0xbc>)
   21ce6:	2d04      	cmp	r5, #4
   21ce8:	eba4 0402 	sub.w	r4, r4, r2
   21cec:	f36f 03c5 	bfc	r3, #3, #3
   21cf0:	bf98      	it	ls
   21cf2:	4a26      	ldrls	r2, [pc, #152]	; (21d8c <z_fatal_error+0xc0>)
   21cf4:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   21cf8:	f364 138f 	bfi	r3, r4, #6, #10
   21cfc:	f8ad 3000 	strh.w	r3, [sp]
   21d00:	4607      	mov	r7, r0
   21d02:	f04f 0300 	mov.w	r3, #0
   21d06:	bf94      	ite	ls
   21d08:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
   21d0c:	4a20      	ldrhi	r2, [pc, #128]	; (21d90 <z_fatal_error+0xc4>)
   21d0e:	4629      	mov	r1, r5
   21d10:	4820      	ldr	r0, [pc, #128]	; (21d94 <z_fatal_error+0xc8>)
   21d12:	f002 f8c9 	bl	23ea8 <log_3>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   21d16:	f8d8 301c 	ldr.w	r3, [r8, #28]
   21d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
   21d1e:	b15b      	cbz	r3, 21d38 <z_fatal_error+0x6c>
		LOG_ERR("Fault during interrupt handling\n");
   21d20:	f04f 0100 	mov.w	r1, #0
   21d24:	2301      	movs	r3, #1
   21d26:	f363 0102 	bfi	r1, r3, #0, #3
   21d2a:	f36f 01c5 	bfc	r1, #3, #3
   21d2e:	f364 118f 	bfi	r1, r4, #6, #10
   21d32:	4819      	ldr	r0, [pc, #100]	; (21d98 <z_fatal_error+0xcc>)
   21d34:	f002 f87f 	bl	23e36 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   21d38:	f04f 0600 	mov.w	r6, #0
   21d3c:	2301      	movs	r3, #1
   21d3e:	f363 0602 	bfi	r6, r3, #0, #3
   21d42:	f36f 06c5 	bfc	r6, #3, #3
	const char *thread_name = k_thread_name_get(thread);
   21d46:	4638      	mov	r0, r7
	LOG_ERR("Current thread: %p (%s)", thread,
   21d48:	f364 168f 	bfi	r6, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   21d4c:	f004 f89e 	bl	25e8c <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   21d50:	b1b0      	cbz	r0, 21d80 <z_fatal_error+0xb4>
   21d52:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   21d54:	4b11      	ldr	r3, [pc, #68]	; (21d9c <z_fatal_error+0xd0>)
   21d56:	2a00      	cmp	r2, #0
   21d58:	bf08      	it	eq
   21d5a:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   21d5c:	f7ed fade 	bl	f31c <log_strdup>
   21d60:	4633      	mov	r3, r6
   21d62:	4602      	mov	r2, r0
   21d64:	4639      	mov	r1, r7
   21d66:	480e      	ldr	r0, [pc, #56]	; (21da0 <z_fatal_error+0xd4>)
   21d68:	f002 f886 	bl	23e78 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   21d6c:	4641      	mov	r1, r8
   21d6e:	4628      	mov	r0, r5
   21d70:	f7ff ff8e 	bl	21c90 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
   21d74:	4638      	mov	r0, r7
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
   21d76:	b002      	add	sp, #8
   21d78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21d7c:	f7ee bd6c 	b.w	10858 <z_impl_k_thread_abort>
		thread_name = "unknown";
   21d80:	4806      	ldr	r0, [pc, #24]	; (21d9c <z_fatal_error+0xd0>)
   21d82:	e7eb      	b.n	21d5c <z_fatal_error+0x90>
   21d84:	000265b8 	.word	0x000265b8
   21d88:	00026560 	.word	0x00026560
   21d8c:	000278f8 	.word	0x000278f8
   21d90:	00028d18 	.word	0x00028d18
   21d94:	00028d2e 	.word	0x00028d2e
   21d98:	00028d56 	.word	0x00028d56
   21d9c:	00028d26 	.word	0x00028d26
   21da0:	00028d77 	.word	0x00028d77

00021da4 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   21da4:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   21da6:	4d0b      	ldr	r5, [pc, #44]	; (21dd4 <idle+0x30>)
	__asm__ volatile(
   21da8:	f04f 0220 	mov.w	r2, #32
   21dac:	f3ef 8311 	mrs	r3, BASEPRI
   21db0:	f382 8811 	msr	BASEPRI, r2
   21db4:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   21db8:	f004 f8cd 	bl	25f56 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   21dbc:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   21dbe:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   21dc0:	2802      	cmp	r0, #2
   21dc2:	bfd8      	it	le
   21dc4:	4608      	movle	r0, r1
   21dc6:	f004 f8d6 	bl	25f76 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   21dca:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   21dcc:	f7ee f946 	bl	1005c <arch_cpu_idle>
   21dd0:	e7ea      	b.n	21da8 <idle+0x4>
   21dd2:	bf00      	nop
   21dd4:	20025cfc 	.word	0x20025cfc

00021dd8 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   21dd8:	4802      	ldr	r0, [pc, #8]	; (21de4 <z_bss_zero+0xc>)
   21dda:	4a03      	ldr	r2, [pc, #12]	; (21de8 <z_bss_zero+0x10>)
   21ddc:	2100      	movs	r1, #0
   21dde:	1a12      	subs	r2, r2, r0
   21de0:	f002 bd9b 	b.w	2491a <memset>
   21de4:	20020000 	.word	0x20020000
   21de8:	2002754c 	.word	0x2002754c

00021dec <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   21dec:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   21dee:	4806      	ldr	r0, [pc, #24]	; (21e08 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   21df0:	4a06      	ldr	r2, [pc, #24]	; (21e0c <z_data_copy+0x20>)
   21df2:	4907      	ldr	r1, [pc, #28]	; (21e10 <z_data_copy+0x24>)
   21df4:	1a12      	subs	r2, r2, r0
   21df6:	f002 fd63 	bl	248c0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   21dfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   21dfe:	4a05      	ldr	r2, [pc, #20]	; (21e14 <z_data_copy+0x28>)
   21e00:	4905      	ldr	r1, [pc, #20]	; (21e18 <z_data_copy+0x2c>)
   21e02:	4806      	ldr	r0, [pc, #24]	; (21e1c <z_data_copy+0x30>)
   21e04:	f002 bd5c 	b.w	248c0 <memcpy>
   21e08:	2002d3a4 	.word	0x2002d3a4
   21e0c:	2002d5fc 	.word	0x2002d5fc
   21e10:	00028df8 	.word	0x00028df8
   21e14:	00000000 	.word	0x00000000
   21e18:	00028df8 	.word	0x00028df8
   21e1c:	20020000 	.word	0x20020000

00021e20 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   21e20:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   21e22:	2002      	movs	r0, #2
   21e24:	f7ff fef2 	bl	21c0c <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   21e28:	4807      	ldr	r0, [pc, #28]	; (21e48 <bg_thread_main+0x28>)
   21e2a:	f001 ffd1 	bl	23dd0 <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   21e2e:	2003      	movs	r0, #3
   21e30:	f7ff feec 	bl	21c0c <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   21e34:	f000 ff1c 	bl	22c70 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   21e38:	f001 fc28 	bl	2368c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   21e3c:	4a03      	ldr	r2, [pc, #12]	; (21e4c <bg_thread_main+0x2c>)
   21e3e:	7b13      	ldrb	r3, [r2, #12]
   21e40:	f023 0301 	bic.w	r3, r3, #1
   21e44:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   21e46:	bd08      	pop	{r3, pc}
   21e48:	00028d8f 	.word	0x00028d8f
   21e4c:	20021be8 	.word	0x20021be8

00021e50 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   21e50:	b580      	push	{r7, lr}
   21e52:	b0b2      	sub	sp, #200	; 0xc8
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   21e54:	f7ed f9c6 	bl	f1e4 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   21e58:	4b34      	ldr	r3, [pc, #208]	; (21f2c <z_cstart+0xdc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   21e5a:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21e5e:	2400      	movs	r4, #0
   21e60:	23e0      	movs	r3, #224	; 0xe0
   21e62:	4d33      	ldr	r5, [pc, #204]	; (21f30 <z_cstart+0xe0>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   21e64:	2701      	movs	r7, #1
   21e66:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   21e6a:	77ec      	strb	r4, [r5, #31]
   21e6c:	762c      	strb	r4, [r5, #24]
   21e6e:	766c      	strb	r4, [r5, #25]
   21e70:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   21e72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   21e74:	4e2f      	ldr	r6, [pc, #188]	; (21f34 <z_cstart+0xe4>)
   21e76:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   21e7a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   21e7c:	f7ee fcd8 	bl	10830 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   21e80:	f7ee f8e6 	bl	10050 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   21e84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21e88:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   21e8a:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   21e8c:	ab06      	add	r3, sp, #24
   21e8e:	22b0      	movs	r2, #176	; 0xb0
   21e90:	4621      	mov	r1, r4
   21e92:	4618      	mov	r0, r3
   21e94:	f002 fd41 	bl	2491a <memset>
	_current = &dummy_thread;
   21e98:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   21e9a:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   21e9c:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   21ea0:	f7ff feb4 	bl	21c0c <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   21ea4:	4638      	mov	r0, r7
   21ea6:	f7ff feb1 	bl	21c0c <z_sys_device_do_config_level>
	z_sched_init();
   21eaa:	f000 fd37 	bl	2291c <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   21eae:	4b22      	ldr	r3, [pc, #136]	; (21f38 <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
   21eb0:	4d22      	ldr	r5, [pc, #136]	; (21f3c <z_cstart+0xec>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
   21eb2:	e9cd 7304 	strd	r7, r3, [sp, #16]
   21eb6:	2307      	movs	r3, #7
   21eb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   21ebc:	e9cd 4302 	strd	r4, r3, [sp, #8]
   21ec0:	e9cd 4400 	strd	r4, r4, [sp]
   21ec4:	4b1e      	ldr	r3, [pc, #120]	; (21f40 <z_cstart+0xf0>)
   21ec6:	491f      	ldr	r1, [pc, #124]	; (21f44 <z_cstart+0xf4>)
   21ec8:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   21eca:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   21ecc:	f000 fe52 	bl	22b74 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21ed0:	7b6b      	ldrb	r3, [r5, #13]
   21ed2:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   21ed6:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21eda:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   21edc:	d104      	bne.n	21ee8 <z_cstart+0x98>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   21ede:	69ab      	ldr	r3, [r5, #24]
   21ee0:	b913      	cbnz	r3, 21ee8 <z_cstart+0x98>
		z_add_thread_to_ready_q(thread);
   21ee2:	4628      	mov	r0, r5
   21ee4:	f000 fb56 	bl	22594 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
   21ee8:	4b17      	ldr	r3, [pc, #92]	; (21f48 <z_cstart+0xf8>)
   21eea:	2201      	movs	r2, #1
   21eec:	9305      	str	r3, [sp, #20]
   21eee:	230f      	movs	r3, #15
   21ef0:	e9cd 3203 	strd	r3, r2, [sp, #12]
   21ef4:	2300      	movs	r3, #0
   21ef6:	4d15      	ldr	r5, [pc, #84]	; (21f4c <z_cstart+0xfc>)
   21ef8:	e9cd 3301 	strd	r3, r3, [sp, #4]
   21efc:	9300      	str	r3, [sp, #0]
   21efe:	f44f 72a0 	mov.w	r2, #320	; 0x140
   21f02:	4b13      	ldr	r3, [pc, #76]	; (21f50 <z_cstart+0x100>)
   21f04:	4913      	ldr	r1, [pc, #76]	; (21f54 <z_cstart+0x104>)
   21f06:	4628      	mov	r0, r5
   21f08:	f000 fe34 	bl	22b74 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21f0c:	7b6b      	ldrb	r3, [r5, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   21f0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   21f12:	f023 0304 	bic.w	r3, r3, #4
   21f16:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   21f18:	4b0f      	ldr	r3, [pc, #60]	; (21f58 <z_cstart+0x108>)
   21f1a:	490a      	ldr	r1, [pc, #40]	; (21f44 <z_cstart+0xf4>)
	list->tail = (sys_dnode_t *)list;
   21f1c:	e9c6 3306 	strd	r3, r3, [r6, #24]
   21f20:	4806      	ldr	r0, [pc, #24]	; (21f3c <z_cstart+0xec>)
   21f22:	4b07      	ldr	r3, [pc, #28]	; (21f40 <z_cstart+0xf0>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   21f24:	60f5      	str	r5, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   21f26:	f7ee f869 	bl	fffc <arch_switch_to_main_thread>
   21f2a:	bf00      	nop
   21f2c:	20029990 	.word	0x20029990
   21f30:	e000ed00 	.word	0xe000ed00
   21f34:	20025cfc 	.word	0x20025cfc
   21f38:	00028dda 	.word	0x00028dda
   21f3c:	20021be8 	.word	0x20021be8
   21f40:	00021e21 	.word	0x00021e21
   21f44:	20028050 	.word	0x20028050
   21f48:	00028ddf 	.word	0x00028ddf
   21f4c:	20021b38 	.word	0x20021b38
   21f50:	00021da5 	.word	0x00021da5
   21f54:	20029050 	.word	0x20029050
   21f58:	20025d14 	.word	0x20025d14

00021f5c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   21f5c:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
   21f5e:	2400      	movs	r4, #0
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   21f60:	4b0a      	ldr	r3, [pc, #40]	; (21f8c <init_mem_slab_module+0x30>)
   21f62:	480b      	ldr	r0, [pc, #44]	; (21f90 <init_mem_slab_module+0x34>)
   21f64:	4283      	cmp	r3, r0
   21f66:	d301      	bcc.n	21f6c <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
   21f68:	2000      	movs	r0, #0
   21f6a:	bd70      	pop	{r4, r5, r6, pc}
	for (j = 0U; j < slab->num_blocks; j++) {
   21f6c:	2100      	movs	r1, #0
	p = slab->buffer;
   21f6e:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   21f70:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   21f72:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   21f74:	42a9      	cmp	r1, r5
   21f76:	d101      	bne.n	21f7c <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   21f78:	331c      	adds	r3, #28
   21f7a:	e7f3      	b.n	21f64 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   21f7c:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   21f7e:	3101      	adds	r1, #1
		*(char **)p = slab->free_list;
   21f80:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
   21f82:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
   21f84:	615a      	str	r2, [r3, #20]
		p += slab->block_size;
   21f86:	4432      	add	r2, r6
   21f88:	e7f4      	b.n	21f74 <init_mem_slab_module+0x18>
   21f8a:	bf00      	nop
   21f8c:	2002d508 	.word	0x2002d508
   21f90:	2002d524 	.word	0x2002d524

00021f94 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   21f94:	b510      	push	{r4, lr}
   21f96:	4613      	mov	r3, r2
   21f98:	460c      	mov	r4, r1
   21f9a:	f04f 0220 	mov.w	r2, #32
   21f9e:	f3ef 8111 	mrs	r1, BASEPRI
   21fa2:	f382 8811 	msr	BASEPRI, r2
   21fa6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   21faa:	6942      	ldr	r2, [r0, #20]
   21fac:	b162      	cbz	r2, 21fc8 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   21fae:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   21fb0:	6943      	ldr	r3, [r0, #20]
   21fb2:	681b      	ldr	r3, [r3, #0]
   21fb4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   21fb6:	6983      	ldr	r3, [r0, #24]
   21fb8:	3301      	adds	r3, #1
   21fba:	6183      	str	r3, [r0, #24]
		result = 0;
   21fbc:	2000      	movs	r0, #0
	__asm__ volatile(
   21fbe:	f381 8811 	msr	BASEPRI, r1
   21fc2:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   21fc6:	e00d      	b.n	21fe4 <k_mem_slab_alloc+0x50>
	} else if (timeout == K_NO_WAIT) {
   21fc8:	b91b      	cbnz	r3, 21fd2 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   21fca:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   21fcc:	f06f 000b 	mvn.w	r0, #11
   21fd0:	e7f5      	b.n	21fbe <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   21fd2:	4602      	mov	r2, r0
   21fd4:	4804      	ldr	r0, [pc, #16]	; (21fe8 <k_mem_slab_alloc+0x54>)
   21fd6:	f000 fc1d 	bl	22814 <z_pend_curr>
		if (result == 0) {
   21fda:	b918      	cbnz	r0, 21fe4 <k_mem_slab_alloc+0x50>
			*mem = _current->base.swap_data;
   21fdc:	4b03      	ldr	r3, [pc, #12]	; (21fec <k_mem_slab_alloc+0x58>)
   21fde:	689b      	ldr	r3, [r3, #8]
   21fe0:	695b      	ldr	r3, [r3, #20]
   21fe2:	6023      	str	r3, [r4, #0]
}
   21fe4:	bd10      	pop	{r4, pc}
   21fe6:	bf00      	nop
   21fe8:	2002740a 	.word	0x2002740a
   21fec:	20025cfc 	.word	0x20025cfc

00021ff0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   21ff0:	b570      	push	{r4, r5, r6, lr}
   21ff2:	4604      	mov	r4, r0
   21ff4:	460d      	mov	r5, r1
	__asm__ volatile(
   21ff6:	f04f 0320 	mov.w	r3, #32
   21ffa:	f3ef 8611 	mrs	r6, BASEPRI
   21ffe:	f383 8811 	msr	BASEPRI, r3
   22002:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   22006:	f003 fee9 	bl	25ddc <z_unpend_first_thread>

	if (pending_thread != NULL) {
   2200a:	b180      	cbz	r0, 2202e <k_mem_slab_free+0x3e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2200c:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2200e:	682a      	ldr	r2, [r5, #0]
   22010:	6681      	str	r1, [r0, #104]	; 0x68
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   22012:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   22014:	7b42      	ldrb	r2, [r0, #13]
   22016:	06d2      	lsls	r2, r2, #27
   22018:	d103      	bne.n	22022 <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
   2201a:	6983      	ldr	r3, [r0, #24]
   2201c:	b90b      	cbnz	r3, 22022 <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
   2201e:	f000 fab9 	bl	22594 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   22022:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   22024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   22028:	4807      	ldr	r0, [pc, #28]	; (22048 <k_mem_slab_free+0x58>)
   2202a:	f003 be61 	b.w	25cf0 <z_reschedule>
		**(char ***)mem = slab->free_list;
   2202e:	682b      	ldr	r3, [r5, #0]
   22030:	6962      	ldr	r2, [r4, #20]
   22032:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   22034:	682b      	ldr	r3, [r5, #0]
   22036:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   22038:	69a3      	ldr	r3, [r4, #24]
   2203a:	3b01      	subs	r3, #1
   2203c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2203e:	f386 8811 	msr	BASEPRI, r6
   22042:	f3bf 8f6f 	isb	sy
}
   22046:	bd70      	pop	{r4, r5, r6, pc}
   22048:	2002740a 	.word	0x2002740a

0002204c <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   2204c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   2204e:	4c07      	ldr	r4, [pc, #28]	; (2206c <init_static_pools+0x20>)
   22050:	4d07      	ldr	r5, [pc, #28]	; (22070 <init_static_pools+0x24>)
   22052:	42ac      	cmp	r4, r5
   22054:	d301      	bcc.n	2205a <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   22056:	2000      	movs	r0, #0
   22058:	bd38      	pop	{r3, r4, r5, pc}
   2205a:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   2205e:	4620      	mov	r0, r4
   22060:	e9c4 3305 	strd	r3, r3, [r4, #20]
   22064:	f001 fb6e 	bl	23744 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   22068:	341c      	adds	r4, #28
   2206a:	e7f2      	b.n	22052 <init_static_pools+0x6>
   2206c:	2002d524 	.word	0x2002d524
   22070:	2002d540 	.word	0x2002d540

00022074 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   22074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   22078:	1e1c      	subs	r4, r3, #0
{
   2207a:	b085      	sub	sp, #20
   2207c:	4607      	mov	r7, r0
   2207e:	460d      	mov	r5, r1
   22080:	4692      	mov	sl, r2
	if (timeout > 0) {
   22082:	dd3b      	ble.n	220fc <k_mem_pool_alloc+0x88>
	return z_impl_k_uptime_get();
   22084:	f003 ff95 	bl	25fb2 <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   22088:	eb10 0804 	adds.w	r8, r0, r4
	return pool - &_k_mem_pool_list_start[0];
   2208c:	4b1d      	ldr	r3, [pc, #116]	; (22104 <k_mem_pool_alloc+0x90>)
   2208e:	4e1e      	ldr	r6, [pc, #120]	; (22108 <k_mem_pool_alloc+0x94>)
   22090:	1afb      	subs	r3, r7, r3
   22092:	109b      	asrs	r3, r3, #2
   22094:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   22096:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   2209a:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   2209c:	ab03      	add	r3, sp, #12
   2209e:	aa02      	add	r2, sp, #8
   220a0:	9500      	str	r5, [sp, #0]
   220a2:	4651      	mov	r1, sl
   220a4:	4638      	mov	r0, r7
   220a6:	f001 fb99 	bl	237dc <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   220aa:	796b      	ldrb	r3, [r5, #5]
   220ac:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   220ae:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   220b0:	f362 0303 	bfi	r3, r2, #0, #4
   220b4:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   220b6:	686b      	ldr	r3, [r5, #4]
   220b8:	9a03      	ldr	r2, [sp, #12]
   220ba:	f362 331f 	bfi	r3, r2, #12, #20
   220be:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   220c0:	b1c8      	cbz	r0, 220f6 <k_mem_pool_alloc+0x82>
   220c2:	b1c4      	cbz	r4, 220f6 <k_mem_pool_alloc+0x82>
   220c4:	f110 0f0c 	cmn.w	r0, #12
   220c8:	d115      	bne.n	220f6 <k_mem_pool_alloc+0x82>
	__asm__ volatile(
   220ca:	f04f 0320 	mov.w	r3, #32
   220ce:	f3ef 8011 	mrs	r0, BASEPRI
   220d2:	f383 8811 	msr	BASEPRI, r3
   220d6:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
   220da:	4622      	mov	r2, r4
   220dc:	4659      	mov	r1, fp
   220de:	f000 fb75 	bl	227cc <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   220e2:	1c63      	adds	r3, r4, #1
   220e4:	d0da      	beq.n	2209c <k_mem_pool_alloc+0x28>
   220e6:	f003 ff64 	bl	25fb2 <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   220ea:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   220ee:	2c00      	cmp	r4, #0
   220f0:	dcd4      	bgt.n	2209c <k_mem_pool_alloc+0x28>
				break;
			}
		}
	}

	return -EAGAIN;
   220f2:	f06f 000a 	mvn.w	r0, #10
}
   220f6:	b005      	add	sp, #20
   220f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   220fc:	f04f 0800 	mov.w	r8, #0
   22100:	e7c4      	b.n	2208c <k_mem_pool_alloc+0x18>
   22102:	bf00      	nop
   22104:	2002d524 	.word	0x2002d524
   22108:	b6db6db7 	.word	0xb6db6db7

0002210c <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   2210c:	b570      	push	{r4, r5, r6, lr}
   2210e:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   22110:	6802      	ldr	r2, [r0, #0]
   22112:	7841      	ldrb	r1, [r0, #1]
   22114:	4e11      	ldr	r6, [pc, #68]	; (2215c <k_mem_pool_free_id+0x50>)
   22116:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2211a:	00a4      	lsls	r4, r4, #2
   2211c:	0b12      	lsrs	r2, r2, #12
   2211e:	f001 010f 	and.w	r1, r1, #15
   22122:	1930      	adds	r0, r6, r4
   22124:	f001 fc12 	bl	2394c <z_sys_mem_pool_block_free>
   22128:	f04f 0320 	mov.w	r3, #32
   2212c:	f3ef 8511 	mrs	r5, BASEPRI
   22130:	f383 8811 	msr	BASEPRI, r3
   22134:	f3bf 8f6f 	isb	sy
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   22138:	f104 0014 	add.w	r0, r4, #20
   2213c:	4430      	add	r0, r6
   2213e:	f003 fe7a 	bl	25e36 <z_unpend_all>

	if (need_sched != 0) {
   22142:	b128      	cbz	r0, 22150 <k_mem_pool_free_id+0x44>
		z_reschedule(&lock, key);
   22144:	4629      	mov	r1, r5
	} else {
		k_spin_unlock(&lock, key);
	}
}
   22146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   2214a:	4805      	ldr	r0, [pc, #20]	; (22160 <k_mem_pool_free_id+0x54>)
   2214c:	f003 bdd0 	b.w	25cf0 <z_reschedule>
	__asm__ volatile(
   22150:	f385 8811 	msr	BASEPRI, r5
   22154:	f3bf 8f6f 	isb	sy
}
   22158:	bd70      	pop	{r4, r5, r6, pc}
   2215a:	bf00      	nop
   2215c:	2002d524 	.word	0x2002d524
   22160:	2002740a 	.word	0x2002740a

00022164 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   22164:	4601      	mov	r1, r0
   22166:	4801      	ldr	r0, [pc, #4]	; (2216c <k_malloc+0x8>)
   22168:	f003 bc81 	b.w	25a6e <k_mem_pool_malloc>
   2216c:	2002d524 	.word	0x2002d524

00022170 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   22170:	4b03      	ldr	r3, [pc, #12]	; (22180 <z_thread_malloc+0x10>)
{
   22172:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   22174:	689b      	ldr	r3, [r3, #8]
   22176:	6e18      	ldr	r0, [r3, #96]	; 0x60
   22178:	b108      	cbz	r0, 2217e <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   2217a:	f003 bc78 	b.w	25a6e <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   2217e:	4770      	bx	lr
   22180:	20025cfc 	.word	0x20025cfc

00022184 <z_impl_k_msgq_put>:
	}
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
   22184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22188:	4613      	mov	r3, r2
   2218a:	4604      	mov	r4, r0
   2218c:	460f      	mov	r7, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   2218e:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   22192:	f04f 0220 	mov.w	r2, #32
   22196:	f3ef 8611 	mrs	r6, BASEPRI
   2219a:	f382 8811 	msr	BASEPRI, r2
   2219e:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   221a2:	6a01      	ldr	r1, [r0, #32]
   221a4:	68c2      	ldr	r2, [r0, #12]
   221a6:	4291      	cmp	r1, r2
   221a8:	d22e      	bcs.n	22208 <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   221aa:	f003 fe17 	bl	25ddc <z_unpend_first_thread>
		if (pending_thread != NULL) {
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   221ae:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   221b0:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   221b2:	4639      	mov	r1, r7
		if (pending_thread != NULL) {
   221b4:	b198      	cbz	r0, 221de <z_impl_k_msgq_put+0x5a>
			(void)memcpy(pending_thread->base.swap_data, data,
   221b6:	6940      	ldr	r0, [r0, #20]
   221b8:	f002 fb82 	bl	248c0 <memcpy>
   221bc:	2300      	movs	r3, #0
   221be:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   221c0:	7b6b      	ldrb	r3, [r5, #13]
   221c2:	06db      	lsls	r3, r3, #27
   221c4:	d104      	bne.n	221d0 <z_impl_k_msgq_put+0x4c>
	if (z_is_thread_ready(thread)) {
   221c6:	69ab      	ldr	r3, [r5, #24]
   221c8:	b913      	cbnz	r3, 221d0 <z_impl_k_msgq_put+0x4c>
		z_add_thread_to_ready_q(thread);
   221ca:	4628      	mov	r0, r5
   221cc:	f000 f9e2 	bl	22594 <z_add_thread_to_ready_q>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   221d0:	4640      	mov	r0, r8
   221d2:	4631      	mov	r1, r6
   221d4:	f003 fd8c 	bl	25cf0 <z_reschedule>
			return 0;
   221d8:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   221da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   221de:	69e0      	ldr	r0, [r4, #28]
   221e0:	f002 fb6e 	bl	248c0 <memcpy>
		result = 0;
   221e4:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
   221e6:	69e3      	ldr	r3, [r4, #28]
   221e8:	68a2      	ldr	r2, [r4, #8]
   221ea:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   221ec:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   221ee:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   221f0:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   221f2:	bf04      	itt	eq
   221f4:	6923      	ldreq	r3, [r4, #16]
   221f6:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   221f8:	6a23      	ldr	r3, [r4, #32]
   221fa:	3301      	adds	r3, #1
   221fc:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
   221fe:	f386 8811 	msr	BASEPRI, r6
   22202:	f3bf 8f6f 	isb	sy
	return result;
   22206:	e7e8      	b.n	221da <z_impl_k_msgq_put+0x56>
	} else if (timeout == K_NO_WAIT) {
   22208:	b14b      	cbz	r3, 2221e <z_impl_k_msgq_put+0x9a>
		_current->base.swap_data = data;
   2220a:	4a06      	ldr	r2, [pc, #24]	; (22224 <z_impl_k_msgq_put+0xa0>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2220c:	4631      	mov	r1, r6
		_current->base.swap_data = data;
   2220e:	6892      	ldr	r2, [r2, #8]
   22210:	6157      	str	r7, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22212:	4602      	mov	r2, r0
   22214:	4640      	mov	r0, r8
}
   22216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2221a:	f000 bafb 	b.w	22814 <z_pend_curr>
		result = -ENOMSG;
   2221e:	f06f 004f 	mvn.w	r0, #79	; 0x4f
   22222:	e7ec      	b.n	221fe <z_impl_k_msgq_put+0x7a>
   22224:	20025cfc 	.word	0x20025cfc

00022228 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
   22228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2222c:	4604      	mov	r4, r0
   2222e:	4613      	mov	r3, r2
   22230:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   22232:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
   22236:	f04f 0220 	mov.w	r2, #32
   2223a:	f3ef 8611 	mrs	r6, BASEPRI
   2223e:	f382 8811 	msr	BASEPRI, r2
   22242:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   22246:	6a22      	ldr	r2, [r4, #32]
   22248:	2a00      	cmp	r2, #0
   2224a:	d037      	beq.n	222bc <z_impl_k_msgq_get+0x94>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   2224c:	68a2      	ldr	r2, [r4, #8]
   2224e:	69a1      	ldr	r1, [r4, #24]
   22250:	f002 fb36 	bl	248c0 <memcpy>
		msgq->read_ptr += msgq->msg_size;
   22254:	69a3      	ldr	r3, [r4, #24]
   22256:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   22258:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   2225a:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   2225c:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   2225e:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   22260:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   22262:	bf04      	itt	eq
   22264:	6923      	ldreq	r3, [r4, #16]
   22266:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   22268:	6a23      	ldr	r3, [r4, #32]
   2226a:	3b01      	subs	r3, #1
   2226c:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   2226e:	f003 fdb5 	bl	25ddc <z_unpend_first_thread>
		if (pending_thread != NULL) {
   22272:	4605      	mov	r5, r0
   22274:	2800      	cmp	r0, #0
   22276:	d02e      	beq.n	222d6 <z_impl_k_msgq_get+0xae>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   22278:	68a2      	ldr	r2, [r4, #8]
   2227a:	6941      	ldr	r1, [r0, #20]
   2227c:	69e0      	ldr	r0, [r4, #28]
   2227e:	f002 fb1f 	bl	248c0 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   22282:	69e3      	ldr	r3, [r4, #28]
   22284:	68a2      	ldr	r2, [r4, #8]
   22286:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   22288:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   2228a:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   2228c:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   2228e:	bf04      	itt	eq
   22290:	6923      	ldreq	r3, [r4, #16]
   22292:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   22294:	6a23      	ldr	r3, [r4, #32]
   22296:	3301      	adds	r3, #1
   22298:	6223      	str	r3, [r4, #32]
   2229a:	2300      	movs	r3, #0
   2229c:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2229e:	7b6b      	ldrb	r3, [r5, #13]
   222a0:	06db      	lsls	r3, r3, #27
   222a2:	d104      	bne.n	222ae <z_impl_k_msgq_get+0x86>
	if (z_is_thread_ready(thread)) {
   222a4:	69ab      	ldr	r3, [r5, #24]
   222a6:	b913      	cbnz	r3, 222ae <z_impl_k_msgq_get+0x86>
		z_add_thread_to_ready_q(thread);
   222a8:	4628      	mov	r0, r5
   222aa:	f000 f973 	bl	22594 <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   222ae:	4638      	mov	r0, r7
   222b0:	4631      	mov	r1, r6
   222b2:	f003 fd1d 	bl	25cf0 <z_reschedule>
			return 0;
   222b6:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   222b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   222bc:	b14b      	cbz	r3, 222d2 <z_impl_k_msgq_get+0xaa>
		_current->base.swap_data = data;
   222be:	4a08      	ldr	r2, [pc, #32]	; (222e0 <z_impl_k_msgq_get+0xb8>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   222c0:	4638      	mov	r0, r7
		_current->base.swap_data = data;
   222c2:	6892      	ldr	r2, [r2, #8]
   222c4:	6151      	str	r1, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   222c6:	4622      	mov	r2, r4
   222c8:	4631      	mov	r1, r6
}
   222ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   222ce:	f000 baa1 	b.w	22814 <z_pend_curr>
		result = -ENOMSG;
   222d2:	f06f 004f 	mvn.w	r0, #79	; 0x4f
	__asm__ volatile(
   222d6:	f386 8811 	msr	BASEPRI, r6
   222da:	f3bf 8f6f 	isb	sy
	return result;
   222de:	e7eb      	b.n	222b8 <z_impl_k_msgq_get+0x90>
   222e0:	20025cfc 	.word	0x20025cfc

000222e4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   222e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   222e6:	4604      	mov	r4, r0
   222e8:	460f      	mov	r7, r1
	__asm__ volatile(
   222ea:	f04f 0320 	mov.w	r3, #32
   222ee:	f3ef 8511 	mrs	r5, BASEPRI
   222f2:	f383 8811 	msr	BASEPRI, r3
   222f6:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   222fa:	68c2      	ldr	r2, [r0, #12]
   222fc:	4930      	ldr	r1, [pc, #192]	; (223c0 <z_impl_k_mutex_lock+0xdc>)
   222fe:	b15a      	cbz	r2, 22318 <z_impl_k_mutex_lock+0x34>
   22300:	6880      	ldr	r0, [r0, #8]
   22302:	688e      	ldr	r6, [r1, #8]
   22304:	42b0      	cmp	r0, r6
   22306:	d015      	beq.n	22334 <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   22308:	b9b7      	cbnz	r7, 22338 <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
   2230a:	f385 8811 	msr	BASEPRI, r5
   2230e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   22312:	f06f 000f 	mvn.w	r0, #15
   22316:	e00c      	b.n	22332 <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
   22318:	688b      	ldr	r3, [r1, #8]
   2231a:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2231e:	6123      	str	r3, [r4, #16]
		mutex->owner = _current;
   22320:	688b      	ldr	r3, [r1, #8]
		mutex->lock_count++;
   22322:	3201      	adds	r2, #1
   22324:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
   22326:	60a3      	str	r3, [r4, #8]
   22328:	f385 8811 	msr	BASEPRI, r5
   2232c:	f3bf 8f6f 	isb	sy
		return 0;
   22330:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   22332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   22334:	6923      	ldr	r3, [r4, #16]
   22336:	e7f2      	b.n	2231e <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   22338:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2233c:	f996 100e 	ldrsb.w	r1, [r6, #14]
   22340:	4299      	cmp	r1, r3
   22342:	bfa8      	it	ge
   22344:	4619      	movge	r1, r3
   22346:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2234a:	4299      	cmp	r1, r3
   2234c:	da2b      	bge.n	223a6 <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
   2234e:	f000 faa3 	bl	22898 <z_set_prio>
   22352:	4606      	mov	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   22354:	463b      	mov	r3, r7
   22356:	4622      	mov	r2, r4
   22358:	4629      	mov	r1, r5
   2235a:	481a      	ldr	r0, [pc, #104]	; (223c4 <z_impl_k_mutex_lock+0xe0>)
   2235c:	f000 fa5a 	bl	22814 <z_pend_curr>
	if (got_mutex == 0) {
   22360:	2800      	cmp	r0, #0
   22362:	d0e6      	beq.n	22332 <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
   22364:	f04f 0320 	mov.w	r3, #32
   22368:	f3ef 8511 	mrs	r5, BASEPRI
   2236c:	f383 8811 	msr	BASEPRI, r3
   22370:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   22374:	6823      	ldr	r3, [r4, #0]
   22376:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22378:	429c      	cmp	r4, r3
   2237a:	d007      	beq.n	2238c <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
   2237c:	b133      	cbz	r3, 2238c <z_impl_k_mutex_lock+0xa8>
   2237e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   22382:	4299      	cmp	r1, r3
   22384:	bfa8      	it	ge
   22386:	4619      	movge	r1, r3
   22388:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2238c:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   2238e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   22392:	4299      	cmp	r1, r3
   22394:	d109      	bne.n	223aa <z_impl_k_mutex_lock+0xc6>
	if (resched) {
   22396:	b16e      	cbz	r6, 223b4 <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
   22398:	4629      	mov	r1, r5
   2239a:	480a      	ldr	r0, [pc, #40]	; (223c4 <z_impl_k_mutex_lock+0xe0>)
   2239c:	f003 fca8 	bl	25cf0 <z_reschedule>
	return -EAGAIN;
   223a0:	f06f 000a 	mvn.w	r0, #10
   223a4:	e7c5      	b.n	22332 <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
   223a6:	2600      	movs	r6, #0
   223a8:	e7d4      	b.n	22354 <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
   223aa:	f000 fa75 	bl	22898 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   223ae:	2800      	cmp	r0, #0
   223b0:	d1f2      	bne.n	22398 <z_impl_k_mutex_lock+0xb4>
   223b2:	e7f0      	b.n	22396 <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
   223b4:	f385 8811 	msr	BASEPRI, r5
   223b8:	f3bf 8f6f 	isb	sy
   223bc:	e7f0      	b.n	223a0 <z_impl_k_mutex_lock+0xbc>
   223be:	bf00      	nop
   223c0:	20025cfc 	.word	0x20025cfc
   223c4:	2002740a 	.word	0x2002740a

000223c8 <z_impl_k_mutex_unlock>:
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   223c8:	4b1e      	ldr	r3, [pc, #120]	; (22444 <z_impl_k_mutex_unlock+0x7c>)
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   223ca:	b570      	push	{r4, r5, r6, lr}
   223cc:	689a      	ldr	r2, [r3, #8]
   223ce:	4604      	mov	r4, r0
   223d0:	7bd3      	ldrb	r3, [r2, #15]
   223d2:	3b01      	subs	r3, #1
   223d4:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
   223d6:	68c3      	ldr	r3, [r0, #12]
   223d8:	2b01      	cmp	r3, #1
   223da:	d005      	beq.n	223e8 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
   223dc:	3b01      	subs	r3, #1
   223de:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
   223e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   223e4:	f000 b8ba 	b.w	2255c <k_sched_unlock>
	__asm__ volatile(
   223e8:	f04f 0320 	mov.w	r3, #32
   223ec:	f3ef 8611 	mrs	r6, BASEPRI
   223f0:	f383 8811 	msr	BASEPRI, r3
   223f4:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   223f8:	6901      	ldr	r1, [r0, #16]
   223fa:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   223fc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   22400:	4299      	cmp	r1, r3
   22402:	d001      	beq.n	22408 <z_impl_k_mutex_unlock+0x40>
		return z_set_prio(mutex->owner, new_prio);
   22404:	f000 fa48 	bl	22898 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   22408:	4620      	mov	r0, r4
   2240a:	f003 fce7 	bl	25ddc <z_unpend_first_thread>
   2240e:	4605      	mov	r5, r0
	mutex->owner = new_owner;
   22410:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   22412:	b180      	cbz	r0, 22436 <z_impl_k_mutex_unlock+0x6e>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   22414:	7b43      	ldrb	r3, [r0, #13]
   22416:	06db      	lsls	r3, r3, #27
   22418:	d103      	bne.n	22422 <z_impl_k_mutex_unlock+0x5a>
	if (z_is_thread_ready(thread)) {
   2241a:	6983      	ldr	r3, [r0, #24]
   2241c:	b90b      	cbnz	r3, 22422 <z_impl_k_mutex_unlock+0x5a>
		z_add_thread_to_ready_q(thread);
   2241e:	f000 f8b9 	bl	22594 <z_add_thread_to_ready_q>
	__asm__ volatile(
   22422:	f386 8811 	msr	BASEPRI, r6
   22426:	f3bf 8f6f 	isb	sy
   2242a:	2300      	movs	r3, #0
   2242c:	66ab      	str	r3, [r5, #104]	; 0x68
		mutex->owner_orig_prio = new_owner->base.prio;
   2242e:	f995 300e 	ldrsb.w	r3, [r5, #14]
   22432:	6123      	str	r3, [r4, #16]
   22434:	e7d4      	b.n	223e0 <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0U;
   22436:	60e0      	str	r0, [r4, #12]
   22438:	f386 8811 	msr	BASEPRI, r6
   2243c:	f3bf 8f6f 	isb	sy
   22440:	e7ce      	b.n	223e0 <z_impl_k_mutex_unlock+0x18>
   22442:	bf00      	nop
   22444:	20025cfc 	.word	0x20025cfc

00022448 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   22448:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   2244a:	4c08      	ldr	r4, [pc, #32]	; (2246c <z_reset_time_slice+0x24>)
   2244c:	6823      	ldr	r3, [r4, #0]
   2244e:	b15b      	cbz	r3, 22468 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   22450:	f7ed fcb0 	bl	fdb4 <z_clock_elapsed>
   22454:	6823      	ldr	r3, [r4, #0]
   22456:	4a06      	ldr	r2, [pc, #24]	; (22470 <z_reset_time_slice+0x28>)
   22458:	4418      	add	r0, r3
   2245a:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   2245c:	2100      	movs	r1, #0
	}
}
   2245e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   22462:	4618      	mov	r0, r3
   22464:	f003 bd87 	b.w	25f76 <z_set_timeout_expiry>
}
   22468:	bd10      	pop	{r4, pc}
   2246a:	bf00      	nop
   2246c:	20025d38 	.word	0x20025d38
   22470:	20025cfc 	.word	0x20025cfc

00022474 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
   22474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22476:	460d      	mov	r5, r1
	__asm__ volatile(
   22478:	f04f 0320 	mov.w	r3, #32
   2247c:	f3ef 8411 	mrs	r4, BASEPRI
   22480:	f383 8811 	msr	BASEPRI, r3
   22484:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
   22488:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2248c:	f240 36e7 	movw	r6, #999	; 0x3e7
   22490:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   22492:	2200      	movs	r2, #0
   22494:	fbe1 6700 	umlal	r6, r7, r1, r0
   22498:	4b09      	ldr	r3, [pc, #36]	; (224c0 <k_sched_time_slice_set+0x4c>)
   2249a:	4630      	mov	r0, r6
   2249c:	611a      	str	r2, [r3, #16]
   2249e:	4639      	mov	r1, r7
   224a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   224a4:	2300      	movs	r3, #0
   224a6:	f7e9 febb 	bl	c220 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   224aa:	4b06      	ldr	r3, [pc, #24]	; (224c4 <k_sched_time_slice_set+0x50>)
   224ac:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   224ae:	4b06      	ldr	r3, [pc, #24]	; (224c8 <k_sched_time_slice_set+0x54>)
   224b0:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   224b2:	f7ff ffc9 	bl	22448 <z_reset_time_slice>
	__asm__ volatile(
   224b6:	f384 8811 	msr	BASEPRI, r4
   224ba:	f3bf 8f6f 	isb	sy
	}
}
   224be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   224c0:	20025cfc 	.word	0x20025cfc
   224c4:	20025d38 	.word	0x20025d38
   224c8:	20025d34 	.word	0x20025d34

000224cc <k_sched_lock>:
	__asm__ volatile(
   224cc:	f04f 0320 	mov.w	r3, #32
   224d0:	f3ef 8111 	mrs	r1, BASEPRI
   224d4:	f383 8811 	msr	BASEPRI, r3
   224d8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   224dc:	4b04      	ldr	r3, [pc, #16]	; (224f0 <k_sched_lock+0x24>)
   224de:	689a      	ldr	r2, [r3, #8]
   224e0:	7bd3      	ldrb	r3, [r2, #15]
   224e2:	3b01      	subs	r3, #1
   224e4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   224e6:	f381 8811 	msr	BASEPRI, r1
   224ea:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   224ee:	4770      	bx	lr
   224f0:	20025cfc 	.word	0x20025cfc

000224f4 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   224f4:	4b09      	ldr	r3, [pc, #36]	; (2251c <z_priq_dumb_remove+0x28>)
   224f6:	f103 0228 	add.w	r2, r3, #40	; 0x28
   224fa:	4282      	cmp	r2, r0
   224fc:	d105      	bne.n	2250a <z_priq_dumb_remove+0x16>
   224fe:	689b      	ldr	r3, [r3, #8]
   22500:	428b      	cmp	r3, r1
   22502:	d102      	bne.n	2250a <z_priq_dumb_remove+0x16>
   22504:	7b4b      	ldrb	r3, [r1, #13]
   22506:	06db      	lsls	r3, r3, #27
   22508:	d107      	bne.n	2251a <z_priq_dumb_remove+0x26>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   2250a:	e9d1 2300 	ldrd	r2, r3, [r1]
   2250e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   22510:	680a      	ldr	r2, [r1, #0]
   22512:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   22514:	2300      	movs	r3, #0
	node->prev = NULL;
   22516:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   2251a:	4770      	bx	lr
   2251c:	20025cfc 	.word	0x20025cfc

00022520 <update_cache>:
{
   22520:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   22522:	4c0d      	ldr	r4, [pc, #52]	; (22558 <update_cache+0x38>)
{
   22524:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   22526:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2252a:	f003 fc20 	bl	25d6e <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
   2252e:	4605      	mov	r5, r0
   22530:	b900      	cbnz	r0, 22534 <update_cache+0x14>
   22532:	68e5      	ldr	r5, [r4, #12]
   22534:	68a3      	ldr	r3, [r4, #8]
	if (preempt_ok != 0) {
   22536:	b94a      	cbnz	r2, 2254c <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   22538:	7b5a      	ldrb	r2, [r3, #13]
   2253a:	06d2      	lsls	r2, r2, #27
   2253c:	d106      	bne.n	2254c <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   2253e:	69aa      	ldr	r2, [r5, #24]
   22540:	b922      	cbnz	r2, 2254c <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
   22542:	89da      	ldrh	r2, [r3, #14]
   22544:	2a7f      	cmp	r2, #127	; 0x7f
   22546:	d901      	bls.n	2254c <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   22548:	6263      	str	r3, [r4, #36]	; 0x24
}
   2254a:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   2254c:	429d      	cmp	r5, r3
   2254e:	d001      	beq.n	22554 <update_cache+0x34>
			z_reset_time_slice();
   22550:	f7ff ff7a 	bl	22448 <z_reset_time_slice>
		_kernel.ready_q.cache = th;
   22554:	6265      	str	r5, [r4, #36]	; 0x24
}
   22556:	e7f8      	b.n	2254a <update_cache+0x2a>
   22558:	20025cfc 	.word	0x20025cfc

0002255c <k_sched_unlock>:
{
   2255c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2255e:	f04f 0320 	mov.w	r3, #32
   22562:	f3ef 8411 	mrs	r4, BASEPRI
   22566:	f383 8811 	msr	BASEPRI, r3
   2256a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   2256e:	4b08      	ldr	r3, [pc, #32]	; (22590 <k_sched_unlock+0x34>)
		update_cache(0);
   22570:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   22572:	689a      	ldr	r2, [r3, #8]
   22574:	7bd3      	ldrb	r3, [r2, #15]
   22576:	3301      	adds	r3, #1
   22578:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   2257a:	f7ff ffd1 	bl	22520 <update_cache>
	__asm__ volatile(
   2257e:	f384 8811 	msr	BASEPRI, r4
   22582:	f3bf 8f6f 	isb	sy
}
   22586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   2258a:	f003 bbc8 	b.w	25d1e <z_reschedule_unlocked>
   2258e:	bf00      	nop
   22590:	20025cfc 	.word	0x20025cfc

00022594 <z_add_thread_to_ready_q>:
{
   22594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   22596:	f04f 0320 	mov.w	r3, #32
   2259a:	f3ef 8411 	mrs	r4, BASEPRI
   2259e:	f383 8811 	msr	BASEPRI, r3
   225a2:	f3bf 8f6f 	isb	sy
	return list->head == list;
   225a6:	4a16      	ldr	r2, [pc, #88]	; (22600 <z_add_thread_to_ready_q+0x6c>)
   225a8:	4611      	mov	r1, r2
   225aa:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   225ae:	428b      	cmp	r3, r1
   225b0:	d00c      	beq.n	225cc <z_add_thread_to_ready_q+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   225b2:	b15b      	cbz	r3, 225cc <z_add_thread_to_ready_q+0x38>
   225b4:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   225b6:	f990 500e 	ldrsb.w	r5, [r0, #14]
   225ba:	f993 700e 	ldrsb.w	r7, [r3, #14]
   225be:	42af      	cmp	r7, r5
   225c0:	dc0b      	bgt.n	225da <z_add_thread_to_ready_q+0x46>
	return (node == list->tail) ? NULL : node->next;
   225c2:	42b3      	cmp	r3, r6
   225c4:	d002      	beq.n	225cc <z_add_thread_to_ready_q+0x38>
   225c6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   225c8:	2b00      	cmp	r3, #0
   225ca:	d1f6      	bne.n	225ba <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
   225cc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   225ce:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   225d0:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   225d2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   225d4:	6018      	str	r0, [r3, #0]
	list->tail = node;
   225d6:	62d0      	str	r0, [r2, #44]	; 0x2c
   225d8:	e005      	b.n	225e6 <z_add_thread_to_ready_q+0x52>
	node->prev = successor->prev;
   225da:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   225dc:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   225e0:	685a      	ldr	r2, [r3, #4]
   225e2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   225e4:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   225e6:	7b43      	ldrb	r3, [r0, #13]
   225e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   225ec:	7343      	strb	r3, [r0, #13]
		update_cache(0);
   225ee:	2000      	movs	r0, #0
   225f0:	f7ff ff96 	bl	22520 <update_cache>
	__asm__ volatile(
   225f4:	f384 8811 	msr	BASEPRI, r4
   225f8:	f3bf 8f6f 	isb	sy
}
   225fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   225fe:	bf00      	nop
   22600:	20025cfc 	.word	0x20025cfc

00022604 <z_move_thread_to_end_of_prio_q>:
{
   22604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22606:	4604      	mov	r4, r0
	__asm__ volatile(
   22608:	f04f 0320 	mov.w	r3, #32
   2260c:	f3ef 8511 	mrs	r5, BASEPRI
   22610:	f383 8811 	msr	BASEPRI, r3
   22614:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   22618:	7b43      	ldrb	r3, [r0, #13]
   2261a:	065a      	lsls	r2, r3, #25
   2261c:	d503      	bpl.n	22626 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   2261e:	4601      	mov	r1, r0
   22620:	4818      	ldr	r0, [pc, #96]	; (22684 <z_move_thread_to_end_of_prio_q+0x80>)
   22622:	f7ff ff67 	bl	224f4 <z_priq_dumb_remove>
	return list->head == list;
   22626:	4a18      	ldr	r2, [pc, #96]	; (22688 <z_move_thread_to_end_of_prio_q+0x84>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22628:	f102 0128 	add.w	r1, r2, #40	; 0x28
   2262c:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   22630:	428b      	cmp	r3, r1
   22632:	d00b      	beq.n	2264c <z_move_thread_to_end_of_prio_q+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22634:	b153      	cbz	r3, 2264c <z_move_thread_to_end_of_prio_q+0x48>
	if (t1->base.prio < t2->base.prio) {
   22636:	f994 600e 	ldrsb.w	r6, [r4, #14]
   2263a:	f993 700e 	ldrsb.w	r7, [r3, #14]
   2263e:	42b7      	cmp	r7, r6
   22640:	dc0a      	bgt.n	22658 <z_move_thread_to_end_of_prio_q+0x54>
	return (node == list->tail) ? NULL : node->next;
   22642:	4283      	cmp	r3, r0
   22644:	d002      	beq.n	2264c <z_move_thread_to_end_of_prio_q+0x48>
   22646:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22648:	2b00      	cmp	r3, #0
   2264a:	d1f6      	bne.n	2263a <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
   2264c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   22650:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   22652:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22654:	62d4      	str	r4, [r2, #44]	; 0x2c
   22656:	e005      	b.n	22664 <z_move_thread_to_end_of_prio_q+0x60>
	node->prev = successor->prev;
   22658:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   2265a:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   2265e:	6859      	ldr	r1, [r3, #4]
   22660:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   22662:	605c      	str	r4, [r3, #4]
   22664:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   22666:	6890      	ldr	r0, [r2, #8]
   22668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2266c:	7363      	strb	r3, [r4, #13]
   2266e:	1b03      	subs	r3, r0, r4
   22670:	4258      	negs	r0, r3
   22672:	4158      	adcs	r0, r3
   22674:	f7ff ff54 	bl	22520 <update_cache>
	__asm__ volatile(
   22678:	f385 8811 	msr	BASEPRI, r5
   2267c:	f3bf 8f6f 	isb	sy
}
   22680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22682:	bf00      	nop
   22684:	20025d24 	.word	0x20025d24
   22688:	20025cfc 	.word	0x20025cfc

0002268c <z_time_slice>:
	if (pending_current == _current) {
   2268c:	4a15      	ldr	r2, [pc, #84]	; (226e4 <z_time_slice+0x58>)
   2268e:	4916      	ldr	r1, [pc, #88]	; (226e8 <z_time_slice+0x5c>)
{
   22690:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   22692:	680c      	ldr	r4, [r1, #0]
   22694:	6893      	ldr	r3, [r2, #8]
   22696:	42a3      	cmp	r3, r4
   22698:	4614      	mov	r4, r2
   2269a:	d103      	bne.n	226a4 <z_time_slice+0x18>
}
   2269c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   226a0:	f7ff bed2 	b.w	22448 <z_reset_time_slice>
	pending_current = NULL;
   226a4:	2500      	movs	r5, #0
   226a6:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   226a8:	4910      	ldr	r1, [pc, #64]	; (226ec <z_time_slice+0x60>)
   226aa:	6809      	ldr	r1, [r1, #0]
   226ac:	b1b9      	cbz	r1, 226de <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   226ae:	89d9      	ldrh	r1, [r3, #14]
   226b0:	297f      	cmp	r1, #127	; 0x7f
   226b2:	d814      	bhi.n	226de <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
   226b4:	490e      	ldr	r1, [pc, #56]	; (226f0 <z_time_slice+0x64>)
   226b6:	f993 500e 	ldrsb.w	r5, [r3, #14]
   226ba:	6809      	ldr	r1, [r1, #0]
   226bc:	428d      	cmp	r5, r1
   226be:	db0e      	blt.n	226de <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
   226c0:	490c      	ldr	r1, [pc, #48]	; (226f4 <z_time_slice+0x68>)
   226c2:	428b      	cmp	r3, r1
   226c4:	d00b      	beq.n	226de <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   226c6:	6999      	ldr	r1, [r3, #24]
   226c8:	b949      	cbnz	r1, 226de <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   226ca:	6911      	ldr	r1, [r2, #16]
   226cc:	4281      	cmp	r1, r0
   226ce:	dc03      	bgt.n	226d8 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   226d0:	4618      	mov	r0, r3
   226d2:	f7ff ff97 	bl	22604 <z_move_thread_to_end_of_prio_q>
   226d6:	e7e1      	b.n	2269c <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   226d8:	1a09      	subs	r1, r1, r0
   226da:	6111      	str	r1, [r2, #16]
}
   226dc:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   226de:	2300      	movs	r3, #0
   226e0:	6123      	str	r3, [r4, #16]
   226e2:	e7fb      	b.n	226dc <z_time_slice+0x50>
   226e4:	20025cfc 	.word	0x20025cfc
   226e8:	20025d30 	.word	0x20025d30
   226ec:	20025d38 	.word	0x20025d38
   226f0:	20025d34 	.word	0x20025d34
   226f4:	20021b38 	.word	0x20021b38

000226f8 <z_remove_thread_from_ready_q>:
{
   226f8:	b538      	push	{r3, r4, r5, lr}
   226fa:	4604      	mov	r4, r0
	__asm__ volatile(
   226fc:	f04f 0320 	mov.w	r3, #32
   22700:	f3ef 8511 	mrs	r5, BASEPRI
   22704:	f383 8811 	msr	BASEPRI, r3
   22708:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   2270c:	7b43      	ldrb	r3, [r0, #13]
   2270e:	065a      	lsls	r2, r3, #25
   22710:	d507      	bpl.n	22722 <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   22712:	4601      	mov	r1, r0
   22714:	4809      	ldr	r0, [pc, #36]	; (2273c <z_remove_thread_from_ready_q+0x44>)
   22716:	f7ff feed 	bl	224f4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   2271a:	7b63      	ldrb	r3, [r4, #13]
   2271c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   22720:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   22722:	4b07      	ldr	r3, [pc, #28]	; (22740 <z_remove_thread_from_ready_q+0x48>)
   22724:	6898      	ldr	r0, [r3, #8]
   22726:	1b03      	subs	r3, r0, r4
   22728:	4258      	negs	r0, r3
   2272a:	4158      	adcs	r0, r3
   2272c:	f7ff fef8 	bl	22520 <update_cache>
	__asm__ volatile(
   22730:	f385 8811 	msr	BASEPRI, r5
   22734:	f3bf 8f6f 	isb	sy
}
   22738:	bd38      	pop	{r3, r4, r5, pc}
   2273a:	bf00      	nop
   2273c:	20025d24 	.word	0x20025d24
   22740:	20025cfc 	.word	0x20025cfc

00022744 <pend>:
{
   22744:	b570      	push	{r4, r5, r6, lr}
   22746:	4604      	mov	r4, r0
   22748:	460d      	mov	r5, r1
   2274a:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   2274c:	f7ff ffd4 	bl	226f8 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   22750:	7b63      	ldrb	r3, [r4, #13]
   22752:	f043 0302 	orr.w	r3, r3, #2
   22756:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   22758:	b1ed      	cbz	r5, 22796 <pend+0x52>
	return list->head == list;
   2275a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2275c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2275e:	429d      	cmp	r5, r3
   22760:	d00c      	beq.n	2277c <pend+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22762:	b15b      	cbz	r3, 2277c <pend+0x38>
	if (t1->base.prio < t2->base.prio) {
   22764:	f994 200e 	ldrsb.w	r2, [r4, #14]
   22768:	f993 100e 	ldrsb.w	r1, [r3, #14]
   2276c:	4291      	cmp	r1, r2
   2276e:	dc0c      	bgt.n	2278a <pend+0x46>
	return (node == list->tail) ? NULL : node->next;
   22770:	6869      	ldr	r1, [r5, #4]
   22772:	428b      	cmp	r3, r1
   22774:	d002      	beq.n	2277c <pend+0x38>
   22776:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22778:	2b00      	cmp	r3, #0
   2277a:	d1f5      	bne.n	22768 <pend+0x24>
	node->prev = list->tail;
   2277c:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2277e:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   22780:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   22782:	686b      	ldr	r3, [r5, #4]
   22784:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22786:	606c      	str	r4, [r5, #4]
   22788:	e005      	b.n	22796 <pend+0x52>
	node->prev = successor->prev;
   2278a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2278c:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   22790:	685a      	ldr	r2, [r3, #4]
   22792:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22794:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   22796:	1c73      	adds	r3, r6, #1
   22798:	d015      	beq.n	227c6 <pend+0x82>
   2279a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2279e:	f240 30e7 	movw	r0, #999	; 0x3e7
   227a2:	2100      	movs	r1, #0
   227a4:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   227a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   227ac:	fbc5 0106 	smlal	r0, r1, r5, r6
   227b0:	2300      	movs	r3, #0
   227b2:	f7e9 fd35 	bl	c220 <__aeabi_uldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   227b6:	4904      	ldr	r1, [pc, #16]	; (227c8 <pend+0x84>)
   227b8:	1c42      	adds	r2, r0, #1
   227ba:	f104 0018 	add.w	r0, r4, #24
}
   227be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   227c2:	f000 bb0f 	b.w	22de4 <z_add_timeout>
   227c6:	bd70      	pop	{r4, r5, r6, pc}
   227c8:	00025d7b 	.word	0x00025d7b

000227cc <z_pend_curr_irqlock>:
{
   227cc:	b570      	push	{r4, r5, r6, lr}
   227ce:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   227d0:	4d0e      	ldr	r5, [pc, #56]	; (2280c <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
   227d2:	4c0f      	ldr	r4, [pc, #60]	; (22810 <z_pend_curr_irqlock+0x44>)
	pend(_current, wait_q, timeout);
   227d4:	68a8      	ldr	r0, [r5, #8]
   227d6:	f7ff ffb5 	bl	22744 <pend>
	pending_current = _current;
   227da:	68ab      	ldr	r3, [r5, #8]
	int ret = z_swap_irqlock(key);
   227dc:	4630      	mov	r0, r6
	pending_current = _current;
   227de:	6023      	str	r3, [r4, #0]
	int ret = z_swap_irqlock(key);
   227e0:	f003 fa4b 	bl	25c7a <z_swap_irqlock>
	__asm__ volatile(
   227e4:	f04f 0220 	mov.w	r2, #32
   227e8:	f3ef 8311 	mrs	r3, BASEPRI
   227ec:	f382 8811 	msr	BASEPRI, r2
   227f0:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
   227f4:	6822      	ldr	r2, [r4, #0]
   227f6:	68a9      	ldr	r1, [r5, #8]
   227f8:	4291      	cmp	r1, r2
			pending_current = NULL;
   227fa:	bf04      	itt	eq
   227fc:	2200      	moveq	r2, #0
   227fe:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
   22800:	f383 8811 	msr	BASEPRI, r3
   22804:	f3bf 8f6f 	isb	sy
}
   22808:	bd70      	pop	{r4, r5, r6, pc}
   2280a:	bf00      	nop
   2280c:	20025cfc 	.word	0x20025cfc
   22810:	20025d30 	.word	0x20025d30

00022814 <z_pend_curr>:
{
   22814:	b510      	push	{r4, lr}
   22816:	460c      	mov	r4, r1
   22818:	4611      	mov	r1, r2
	pending_current = _current;
   2281a:	4a06      	ldr	r2, [pc, #24]	; (22834 <z_pend_curr+0x20>)
   2281c:	6890      	ldr	r0, [r2, #8]
   2281e:	4a06      	ldr	r2, [pc, #24]	; (22838 <z_pend_curr+0x24>)
   22820:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   22822:	461a      	mov	r2, r3
   22824:	f7ff ff8e 	bl	22744 <pend>
 * handling.
 */
static ALWAYS_INLINE int z_swap(struct k_spinlock *lock, k_spinlock_key_t key)
{
	k_spin_release(lock);
	return z_swap_irqlock(key.key);
   22828:	4620      	mov	r0, r4
}
   2282a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2282e:	f003 ba24 	b.w	25c7a <z_swap_irqlock>
   22832:	bf00      	nop
   22834:	20025cfc 	.word	0x20025cfc
   22838:	20025d30 	.word	0x20025d30

0002283c <z_tick_sleep.part.19>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
   2283c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
   2283e:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   22840:	f003 fbb3 	bl	25faa <z_tick_get_32>
   22844:	1834      	adds	r4, r6, r0
	__asm__ volatile(
   22846:	f04f 0320 	mov.w	r3, #32
   2284a:	f3ef 8711 	mrs	r7, BASEPRI
   2284e:	f383 8811 	msr	BASEPRI, r3
   22852:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   22856:	4d0d      	ldr	r5, [pc, #52]	; (2288c <z_tick_sleep.part.19+0x50>)
   22858:	4b0d      	ldr	r3, [pc, #52]	; (22890 <z_tick_sleep.part.19+0x54>)
   2285a:	68a8      	ldr	r0, [r5, #8]
   2285c:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   2285e:	f7ff ff4b 	bl	226f8 <z_remove_thread_from_ready_q>
   22862:	68a8      	ldr	r0, [r5, #8]
   22864:	490b      	ldr	r1, [pc, #44]	; (22894 <z_tick_sleep.part.19+0x58>)
   22866:	4632      	mov	r2, r6
   22868:	3018      	adds	r0, #24
   2286a:	f000 fabb 	bl	22de4 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
   2286e:	68aa      	ldr	r2, [r5, #8]
   22870:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   22872:	7b53      	ldrb	r3, [r2, #13]
   22874:	f043 0310 	orr.w	r3, r3, #16
   22878:	7353      	strb	r3, [r2, #13]
   2287a:	f003 f9fe 	bl	25c7a <z_swap_irqlock>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   2287e:	f003 fb94 	bl	25faa <z_tick_get_32>
   22882:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   22884:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   22888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2288a:	bf00      	nop
   2288c:	20025cfc 	.word	0x20025cfc
   22890:	20025d30 	.word	0x20025d30
   22894:	00025d7b 	.word	0x00025d7b

00022898 <z_set_prio>:
{
   22898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2289c:	4604      	mov	r4, r0
   2289e:	f04f 0320 	mov.w	r3, #32
   228a2:	f3ef 8911 	mrs	r9, BASEPRI
   228a6:	f383 8811 	msr	BASEPRI, r3
   228aa:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
   228ae:	f003 f9db 	bl	25c68 <z_is_thread_ready>
   228b2:	b24e      	sxtb	r6, r1
		if (need_sched) {
   228b4:	4680      	mov	r8, r0
   228b6:	b368      	cbz	r0, 22914 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   228b8:	4d17      	ldr	r5, [pc, #92]	; (22918 <z_set_prio+0x80>)
   228ba:	4621      	mov	r1, r4
   228bc:	f105 0728 	add.w	r7, r5, #40	; 0x28
   228c0:	4638      	mov	r0, r7
   228c2:	f7ff fe17 	bl	224f4 <z_priq_dumb_remove>
	return list->head == list;
   228c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
   228c8:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   228ca:	42bb      	cmp	r3, r7
   228cc:	462a      	mov	r2, r5
   228ce:	d00a      	beq.n	228e6 <z_set_prio+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   228d0:	b14b      	cbz	r3, 228e6 <z_set_prio+0x4e>
   228d2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   228d4:	f993 000e 	ldrsb.w	r0, [r3, #14]
   228d8:	42b0      	cmp	r0, r6
   228da:	dc0b      	bgt.n	228f4 <z_set_prio+0x5c>
	return (node == list->tail) ? NULL : node->next;
   228dc:	4299      	cmp	r1, r3
   228de:	d002      	beq.n	228e6 <z_set_prio+0x4e>
   228e0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   228e2:	2b00      	cmp	r3, #0
   228e4:	d1f6      	bne.n	228d4 <z_set_prio+0x3c>
	node->prev = list->tail;
   228e6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   228e8:	6027      	str	r7, [r4, #0]
	node->prev = list->tail;
   228ea:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   228ec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   228ee:	601c      	str	r4, [r3, #0]
	list->tail = node;
   228f0:	62d4      	str	r4, [r2, #44]	; 0x2c
   228f2:	e005      	b.n	22900 <z_set_prio+0x68>
	node->prev = successor->prev;
   228f4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   228f6:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   228fa:	685a      	ldr	r2, [r3, #4]
   228fc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   228fe:	605c      	str	r4, [r3, #4]
			update_cache(1);
   22900:	2001      	movs	r0, #1
   22902:	f7ff fe0d 	bl	22520 <update_cache>
	__asm__ volatile(
   22906:	f389 8811 	msr	BASEPRI, r9
   2290a:	f3bf 8f6f 	isb	sy
}
   2290e:	4640      	mov	r0, r8
   22910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			thread->base.prio = prio;
   22914:	73a6      	strb	r6, [r4, #14]
   22916:	e7f6      	b.n	22906 <z_set_prio+0x6e>
   22918:	20025cfc 	.word	0x20025cfc

0002291c <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   2291c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   2291e:	4b04      	ldr	r3, [pc, #16]	; (22930 <z_sched_init+0x14>)
   22920:	4608      	mov	r0, r1
   22922:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   22926:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   2292a:	f7ff bda3 	b.w	22474 <k_sched_time_slice_set>
   2292e:	bf00      	nop
   22930:	20025cfc 	.word	0x20025cfc

00022934 <z_impl_k_yield>:
{
   22934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   22936:	4c24      	ldr	r4, [pc, #144]	; (229c8 <z_impl_k_yield+0x94>)
   22938:	4b24      	ldr	r3, [pc, #144]	; (229cc <z_impl_k_yield+0x98>)
   2293a:	68a2      	ldr	r2, [r4, #8]
   2293c:	429a      	cmp	r2, r3
   2293e:	d036      	beq.n	229ae <z_impl_k_yield+0x7a>
	__asm__ volatile(
   22940:	f04f 0320 	mov.w	r3, #32
   22944:	f3ef 8611 	mrs	r6, BASEPRI
   22948:	f383 8811 	msr	BASEPRI, r3
   2294c:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   22950:	f104 0528 	add.w	r5, r4, #40	; 0x28
   22954:	68a1      	ldr	r1, [r4, #8]
   22956:	4628      	mov	r0, r5
   22958:	f7ff fdcc 	bl	224f4 <z_priq_dumb_remove>
	return list->head == list;
   2295c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   2295e:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22960:	42aa      	cmp	r2, r5
   22962:	d00c      	beq.n	2297e <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22964:	b15a      	cbz	r2, 2297e <z_impl_k_yield+0x4a>
   22966:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   22968:	f993 100e 	ldrsb.w	r1, [r3, #14]
   2296c:	f992 700e 	ldrsb.w	r7, [r2, #14]
   22970:	428f      	cmp	r7, r1
   22972:	dc0b      	bgt.n	2298c <z_impl_k_yield+0x58>
	return (node == list->tail) ? NULL : node->next;
   22974:	4282      	cmp	r2, r0
   22976:	d002      	beq.n	2297e <z_impl_k_yield+0x4a>
   22978:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2297a:	2a00      	cmp	r2, #0
   2297c:	d1f6      	bne.n	2296c <z_impl_k_yield+0x38>
	node->prev = list->tail;
   2297e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
   22980:	601d      	str	r5, [r3, #0]
	node->prev = list->tail;
   22982:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   22984:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   22986:	6013      	str	r3, [r2, #0]
	list->tail = node;
   22988:	62e3      	str	r3, [r4, #44]	; 0x2c
   2298a:	e005      	b.n	22998 <z_impl_k_yield+0x64>
	node->prev = successor->prev;
   2298c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   2298e:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   22992:	6851      	ldr	r1, [r2, #4]
   22994:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   22996:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   22998:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
   2299a:	2001      	movs	r0, #1
   2299c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   229a0:	735a      	strb	r2, [r3, #13]
   229a2:	f7ff fdbd 	bl	22520 <update_cache>
	__asm__ volatile(
   229a6:	f386 8811 	msr	BASEPRI, r6
   229aa:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   229ae:	f04f 0320 	mov.w	r3, #32
   229b2:	f3ef 8011 	mrs	r0, BASEPRI
   229b6:	f383 8811 	msr	BASEPRI, r3
   229ba:	f3bf 8f6f 	isb	sy
}
   229be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
}

static inline void z_swap_unlocked(void)
{
	(void) z_swap_irqlock(arch_irq_lock());
   229c2:	f003 b95a 	b.w	25c7a <z_swap_irqlock>
   229c6:	bf00      	nop
   229c8:	20025cfc 	.word	0x20025cfc
   229cc:	20021b38 	.word	0x20021b38

000229d0 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
   229d0:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	if (ms == K_FOREVER) {
   229d2:	1c43      	adds	r3, r0, #1
{
   229d4:	4604      	mov	r4, r0
	if (ms == K_FOREVER) {
   229d6:	d105      	bne.n	229e4 <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
   229d8:	4b10      	ldr	r3, [pc, #64]	; (22a1c <z_impl_k_sleep+0x4c>)
   229da:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   229dc:	f000 f914 	bl	22c08 <z_impl_k_thread_suspend>
		return K_FOREVER;
   229e0:	4620      	mov	r0, r4
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   229e2:	bd38      	pop	{r3, r4, r5, pc}
   229e4:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   229e8:	f240 30e7 	movw	r0, #999	; 0x3e7
   229ec:	2100      	movs	r1, #0
   229ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   229f2:	fbe5 0104 	umlal	r0, r1, r5, r4
   229f6:	2300      	movs	r3, #0
   229f8:	f7e9 fc12 	bl	c220 <__aeabi_uldivmod>
	if (ticks == 0) {
   229fc:	4604      	mov	r4, r0
   229fe:	b948      	cbnz	r0, 22a14 <z_impl_k_sleep+0x44>
	z_impl_k_yield();
   22a00:	f7ff ff98 	bl	22934 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
   22a04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   22a08:	fb84 0100 	smull	r0, r1, r4, r0
   22a0c:	0bc4      	lsrs	r4, r0, #15
   22a0e:	ea44 4041 	orr.w	r0, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   22a12:	e7e6      	b.n	229e2 <z_impl_k_sleep+0x12>
   22a14:	f7ff ff12 	bl	2283c <z_tick_sleep.part.19>
   22a18:	4604      	mov	r4, r0
   22a1a:	e7f3      	b.n	22a04 <z_impl_k_sleep+0x34>
   22a1c:	20025cfc 	.word	0x20025cfc

00022a20 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   22a20:	4b01      	ldr	r3, [pc, #4]	; (22a28 <z_impl_k_current_get+0x8>)
   22a22:	6898      	ldr	r0, [r3, #8]
   22a24:	4770      	bx	lr
   22a26:	bf00      	nop
   22a28:	20025cfc 	.word	0x20025cfc

00022a2c <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   22a2c:	b570      	push	{r4, r5, r6, lr}
   22a2e:	4604      	mov	r4, r0
   22a30:	f04f 0320 	mov.w	r3, #32
   22a34:	f3ef 8611 	mrs	r6, BASEPRI
   22a38:	f383 8811 	msr	BASEPRI, r3
   22a3c:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   22a40:	f003 f9cc 	bl	25ddc <z_unpend_first_thread>
	if (thread != NULL) {
   22a44:	4605      	mov	r5, r0
   22a46:	b170      	cbz	r0, 22a66 <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   22a48:	7b43      	ldrb	r3, [r0, #13]
   22a4a:	06db      	lsls	r3, r3, #27
   22a4c:	d103      	bne.n	22a56 <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
   22a4e:	6983      	ldr	r3, [r0, #24]
   22a50:	b90b      	cbnz	r3, 22a56 <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
   22a52:	f7ff fd9f 	bl	22594 <z_add_thread_to_ready_q>
   22a56:	2300      	movs	r3, #0
   22a58:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   22a5a:	4631      	mov	r1, r6
}
   22a5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   22a60:	4807      	ldr	r0, [pc, #28]	; (22a80 <z_impl_k_sem_give+0x54>)
   22a62:	f003 b945 	b.w	25cf0 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   22a66:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   22a6a:	429a      	cmp	r2, r3
   22a6c:	bf18      	it	ne
   22a6e:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   22a70:	2102      	movs	r1, #2
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   22a72:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   22a74:	f104 0010 	add.w	r0, r4, #16
   22a78:	f003 fbe7 	bl	2624a <z_handle_obj_poll_events>
   22a7c:	e7ed      	b.n	22a5a <z_impl_k_sem_give+0x2e>
   22a7e:	bf00      	nop
   22a80:	2002740a 	.word	0x2002740a

00022a84 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   22a84:	b410      	push	{r4}
   22a86:	4602      	mov	r2, r0
   22a88:	460b      	mov	r3, r1
   22a8a:	f04f 0020 	mov.w	r0, #32
   22a8e:	f3ef 8111 	mrs	r1, BASEPRI
   22a92:	f380 8811 	msr	BASEPRI, r0
   22a96:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   22a9a:	6894      	ldr	r4, [r2, #8]
   22a9c:	b14c      	cbz	r4, 22ab2 <z_impl_k_sem_take+0x2e>
		sem->count--;
   22a9e:	3c01      	subs	r4, #1
   22aa0:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
   22aa2:	f381 8811 	msr	BASEPRI, r1
   22aa6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   22aaa:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   22aac:	f85d 4b04 	ldr.w	r4, [sp], #4
   22ab0:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   22ab2:	b933      	cbnz	r3, 22ac2 <z_impl_k_sem_take+0x3e>
   22ab4:	f381 8811 	msr	BASEPRI, r1
   22ab8:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   22abc:	f06f 000f 	mvn.w	r0, #15
   22ac0:	e7f4      	b.n	22aac <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   22ac2:	4802      	ldr	r0, [pc, #8]	; (22acc <z_impl_k_sem_take+0x48>)
}
   22ac4:	f85d 4b04 	ldr.w	r4, [sp], #4
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   22ac8:	f7ff bea4 	b.w	22814 <z_pend_curr>
   22acc:	2002740a 	.word	0x2002740a

00022ad0 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   22ad0:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   22ad2:	4c08      	ldr	r4, [pc, #32]	; (22af4 <k_sys_work_q_init+0x24>)
   22ad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22ad8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   22adc:	4906      	ldr	r1, [pc, #24]	; (22af8 <k_sys_work_q_init+0x28>)
   22ade:	4620      	mov	r0, r4
   22ae0:	f000 f920 	bl	22d24 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   22ae4:	4905      	ldr	r1, [pc, #20]	; (22afc <k_sys_work_q_init+0x2c>)
   22ae6:	f104 0010 	add.w	r0, r4, #16
   22aea:	f003 f9cc 	bl	25e86 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   22aee:	2000      	movs	r0, #0
   22af0:	bd10      	pop	{r4, pc}
   22af2:	bf00      	nop
   22af4:	20025d3c 	.word	0x20025d3c
   22af8:	20029990 	.word	0x20029990
   22afc:	00028de4 	.word	0x00028de4

00022b00 <z_check_stack_sentinel>:
 */
void z_check_stack_sentinel(void)
{
	u32_t *stack;

	if ((_current->base.thread_state & _THREAD_DUMMY) != 0) {
   22b00:	4b09      	ldr	r3, [pc, #36]	; (22b28 <z_check_stack_sentinel+0x28>)
   22b02:	689b      	ldr	r3, [r3, #8]
   22b04:	7b5a      	ldrb	r2, [r3, #13]
   22b06:	07d2      	lsls	r2, r2, #31
   22b08:	d40d      	bmi.n	22b26 <z_check_stack_sentinel+0x26>
		return;
	}

	stack = (u32_t *)_current->stack_info.start;
   22b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
	if (*stack != STACK_SENTINEL) {
   22b0c:	681a      	ldr	r2, [r3, #0]
   22b0e:	f1b2 3ff0 	cmp.w	r2, #4042322160	; 0xf0f0f0f0
   22b12:	d008      	beq.n	22b26 <z_check_stack_sentinel+0x26>
		/* Restore it so further checks don't trigger this same error */
		*stack = STACK_SENTINEL;
   22b14:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
   22b18:	601a      	str	r2, [r3, #0]
		z_except_reason(K_ERR_STACK_CHK_FAIL);
   22b1a:	4040      	eors	r0, r0
   22b1c:	f380 8811 	msr	BASEPRI, r0
   22b20:	f04f 0002 	mov.w	r0, #2
   22b24:	df02      	svc	2
	}
}
   22b26:	4770      	bx	lr
   22b28:	20025cfc 	.word	0x20025cfc

00022b2c <z_impl_k_thread_start>:
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
   22b2c:	b510      	push	{r4, lr}
   22b2e:	4602      	mov	r2, r0
	__asm__ volatile(
   22b30:	f04f 0320 	mov.w	r3, #32
   22b34:	f3ef 8411 	mrs	r4, BASEPRI
   22b38:	f383 8811 	msr	BASEPRI, r3
   22b3c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
   22b40:	7b43      	ldrb	r3, [r0, #13]
   22b42:	0759      	lsls	r1, r3, #29
   22b44:	d404      	bmi.n	22b50 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
   22b46:	f384 8811 	msr	BASEPRI, r4
   22b4a:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
   22b4e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   22b50:	f023 0304 	bic.w	r3, r3, #4
   22b54:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   22b56:	f003 f98d 	bl	25e74 <z_is_thread_ready>
   22b5a:	b110      	cbz	r0, 22b62 <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
   22b5c:	4610      	mov	r0, r2
   22b5e:	f7ff fd19 	bl	22594 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   22b62:	4621      	mov	r1, r4
}
   22b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   22b68:	4801      	ldr	r0, [pc, #4]	; (22b70 <z_impl_k_thread_start+0x44>)
   22b6a:	f003 b8c1 	b.w	25cf0 <z_reschedule>
   22b6e:	bf00      	nop
   22b70:	2002740a 	.word	0x2002740a

00022b74 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   22b74:	b530      	push	{r4, r5, lr}
   22b76:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22b78:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   22b7a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22b7c:	9504      	str	r5, [sp, #16]
   22b7e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   22b80:	9503      	str	r5, [sp, #12]
   22b82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   22b84:	9502      	str	r5, [sp, #8]
   22b86:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   22b88:	9501      	str	r5, [sp, #4]
   22b8a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   22b8c:	9500      	str	r5, [sp, #0]
   22b8e:	f7ed fa11 	bl	ffb4 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   22b92:	4b04      	ldr	r3, [pc, #16]	; (22ba4 <z_setup_new_thread+0x30>)
   22b94:	689b      	ldr	r3, [r3, #8]
   22b96:	b913      	cbnz	r3, 22b9e <z_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   22b98:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   22b9a:	b007      	add	sp, #28
   22b9c:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   22b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   22ba0:	e7fa      	b.n	22b98 <z_setup_new_thread+0x24>
   22ba2:	bf00      	nop
   22ba4:	20025cfc 	.word	0x20025cfc

00022ba8 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   22ba8:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22baa:	2600      	movs	r6, #0
{
   22bac:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22bae:	9605      	str	r6, [sp, #20]
   22bb0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
{
   22bb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22bb4:	9604      	str	r6, [sp, #16]
   22bb6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
{
   22bb8:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22bba:	9603      	str	r6, [sp, #12]
   22bbc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   22bbe:	9602      	str	r6, [sp, #8]
   22bc0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   22bc2:	9601      	str	r6, [sp, #4]
   22bc4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   22bc6:	9600      	str	r6, [sp, #0]
   22bc8:	f7ff ffd4 	bl	22b74 <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
   22bcc:	1c6b      	adds	r3, r5, #1
   22bce:	d003      	beq.n	22bd8 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
   22bd0:	b92d      	cbnz	r5, 22bde <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
   22bd2:	4620      	mov	r0, r4
   22bd4:	f7ff ffaa 	bl	22b2c <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   22bd8:	4620      	mov	r0, r4
   22bda:	b006      	add	sp, #24
   22bdc:	bd70      	pop	{r4, r5, r6, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   22bde:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   22be2:	f240 30e7 	movw	r0, #999	; 0x3e7
   22be6:	2100      	movs	r1, #0
   22be8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22bec:	2300      	movs	r3, #0
   22bee:	fbe6 0105 	umlal	r0, r1, r6, r5
   22bf2:	f7e9 fb15 	bl	c220 <__aeabi_uldivmod>
   22bf6:	4903      	ldr	r1, [pc, #12]	; (22c04 <z_impl_k_thread_create+0x5c>)
   22bf8:	1c42      	adds	r2, r0, #1
   22bfa:	f104 0018 	add.w	r0, r4, #24
   22bfe:	f000 f8f1 	bl	22de4 <z_add_timeout>
   22c02:	e7e9      	b.n	22bd8 <z_impl_k_thread_create+0x30>
   22c04:	00025d7b 	.word	0x00025d7b

00022c08 <z_impl_k_thread_suspend>:

	z_mark_thread_as_suspended(thread);
}

void z_impl_k_thread_suspend(struct k_thread *thread)
{
   22c08:	b538      	push	{r3, r4, r5, lr}
   22c0a:	4605      	mov	r5, r0
	__asm__ volatile(
   22c0c:	f04f 0320 	mov.w	r3, #32
   22c10:	f3ef 8411 	mrs	r4, BASEPRI
   22c14:	f383 8811 	msr	BASEPRI, r3
   22c18:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
   22c1c:	f003 f94a 	bl	25eb4 <z_thread_single_suspend>

	sys_trace_thread_suspend(thread);

	if (thread == _current) {
   22c20:	4b07      	ldr	r3, [pc, #28]	; (22c40 <z_impl_k_thread_suspend+0x38>)
   22c22:	689b      	ldr	r3, [r3, #8]
   22c24:	42ab      	cmp	r3, r5
   22c26:	d105      	bne.n	22c34 <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
   22c28:	4621      	mov	r1, r4
	} else {
		k_spin_unlock(&lock, key);
	}
}
   22c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   22c2e:	4805      	ldr	r0, [pc, #20]	; (22c44 <z_impl_k_thread_suspend+0x3c>)
   22c30:	f003 b85e 	b.w	25cf0 <z_reschedule>
	__asm__ volatile(
   22c34:	f384 8811 	msr	BASEPRI, r4
   22c38:	f3bf 8f6f 	isb	sy
}
   22c3c:	bd38      	pop	{r3, r4, r5, pc}
   22c3e:	bf00      	nop
   22c40:	20025cfc 	.word	0x20025cfc
   22c44:	2002740a 	.word	0x2002740a

00022c48 <z_impl_k_thread_resume>:
	z_mark_thread_as_not_suspended(thread);
	z_ready_thread(thread);
}

void z_impl_k_thread_resume(struct k_thread *thread)
{
   22c48:	b510      	push	{r4, lr}
	__asm__ volatile(
   22c4a:	f04f 0320 	mov.w	r3, #32
   22c4e:	f3ef 8411 	mrs	r4, BASEPRI
   22c52:	f383 8811 	msr	BASEPRI, r3
   22c56:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_resume(thread);
   22c5a:	f003 f938 	bl	25ece <z_thread_single_resume>

	sys_trace_thread_resume(thread);
	z_reschedule(&lock, key);
   22c5e:	4621      	mov	r1, r4
}
   22c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   22c64:	4801      	ldr	r0, [pc, #4]	; (22c6c <z_impl_k_thread_resume+0x24>)
   22c66:	f003 b843 	b.w	25cf0 <z_reschedule>
   22c6a:	bf00      	nop
   22c6c:	2002740a 	.word	0x2002740a

00022c70 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   22c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   22c74:	4e28      	ldr	r6, [pc, #160]	; (22d18 <z_init_static_threads+0xa8>)
   22c76:	4d29      	ldr	r5, [pc, #164]	; (22d1c <z_init_static_threads+0xac>)
   22c78:	46b0      	mov	r8, r6
{
   22c7a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   22c7c:	42b5      	cmp	r5, r6
   22c7e:	f105 0430 	add.w	r4, r5, #48	; 0x30
   22c82:	d310      	bcc.n	22ca6 <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   22c84:	f7ff fc22 	bl	224cc <k_sched_lock>
   22c88:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   22c8c:	f240 36e7 	movw	r6, #999	; 0x3e7
   22c90:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   22c92:	4c22      	ldr	r4, [pc, #136]	; (22d1c <z_init_static_threads+0xac>)
   22c94:	f8df a088 	ldr.w	sl, [pc, #136]	; 22d20 <z_init_static_threads+0xb0>
   22c98:	4544      	cmp	r4, r8
   22c9a:	d321      	bcc.n	22ce0 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
   22c9c:	b007      	add	sp, #28
   22c9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   22ca2:	f7ff bc5b 	b.w	2255c <k_sched_unlock>
		z_setup_new_thread(
   22ca6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   22caa:	9305      	str	r3, [sp, #20]
   22cac:	f854 3c10 	ldr.w	r3, [r4, #-16]
   22cb0:	9304      	str	r3, [sp, #16]
   22cb2:	f854 3c14 	ldr.w	r3, [r4, #-20]
   22cb6:	9303      	str	r3, [sp, #12]
   22cb8:	f854 3c18 	ldr.w	r3, [r4, #-24]
   22cbc:	9302      	str	r3, [sp, #8]
   22cbe:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   22cc2:	9301      	str	r3, [sp, #4]
   22cc4:	f854 3c20 	ldr.w	r3, [r4, #-32]
   22cc8:	9300      	str	r3, [sp, #0]
   22cca:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   22cce:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   22cd2:	f7ff ff4f 	bl	22b74 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   22cd6:	f854 3c30 	ldr.w	r3, [r4, #-48]
   22cda:	64dd      	str	r5, [r3, #76]	; 0x4c
   22cdc:	4625      	mov	r5, r4
   22cde:	e7cd      	b.n	22c7c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   22ce0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   22ce2:	1c4b      	adds	r3, r1, #1
   22ce4:	d004      	beq.n	22cf0 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
   22ce6:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   22ce8:	b921      	cbnz	r1, 22cf4 <z_init_static_threads+0x84>
   22cea:	4628      	mov	r0, r5
   22cec:	f7ff ff1e 	bl	22b2c <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   22cf0:	3430      	adds	r4, #48	; 0x30
   22cf2:	e7d1      	b.n	22c98 <z_init_static_threads+0x28>
   22cf4:	46b3      	mov	fp, r6
   22cf6:	46bc      	mov	ip, r7
   22cf8:	fbe9 bc01 	umlal	fp, ip, r9, r1
   22cfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22d00:	2300      	movs	r3, #0
   22d02:	4658      	mov	r0, fp
   22d04:	4661      	mov	r1, ip
   22d06:	f7e9 fa8b 	bl	c220 <__aeabi_uldivmod>
   22d0a:	4651      	mov	r1, sl
   22d0c:	1c42      	adds	r2, r0, #1
   22d0e:	f105 0018 	add.w	r0, r5, #24
   22d12:	f000 f867 	bl	22de4 <z_add_timeout>
   22d16:	e7eb      	b.n	22cf0 <z_init_static_threads+0x80>
   22d18:	2002d508 	.word	0x2002d508
   22d1c:	2002d508 	.word	0x2002d508
   22d20:	00025d7b 	.word	0x00025d7b

00022d24 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   22d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22d28:	4605      	mov	r5, r0
   22d2a:	b086      	sub	sp, #24
   22d2c:	460e      	mov	r6, r1
   22d2e:	4617      	mov	r7, r2
   22d30:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   22d32:	f002 ff24 	bl	25b7e <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   22d36:	f105 0410 	add.w	r4, r5, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   22d3a:	2000      	movs	r0, #0
   22d3c:	4b09      	ldr	r3, [pc, #36]	; (22d64 <k_work_q_start+0x40>)
   22d3e:	e9cd 0004 	strd	r0, r0, [sp, #16]
   22d42:	e9cd 0802 	strd	r0, r8, [sp, #8]
   22d46:	e9cd 5000 	strd	r5, r0, [sp]
   22d4a:	463a      	mov	r2, r7
   22d4c:	4631      	mov	r1, r6
   22d4e:	4620      	mov	r0, r4
   22d50:	f7ff ff2a 	bl	22ba8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   22d54:	4620      	mov	r0, r4
   22d56:	4904      	ldr	r1, [pc, #16]	; (22d68 <k_work_q_start+0x44>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   22d58:	b006      	add	sp, #24
   22d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22d5e:	f003 b892 	b.w	25e86 <z_impl_k_thread_name_set>
   22d62:	bf00      	nop
   22d64:	00023a8b 	.word	0x00023a8b
   22d68:	00028ded 	.word	0x00028ded

00022d6c <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   22d6c:	4b03      	ldr	r3, [pc, #12]	; (22d7c <elapsed+0x10>)
   22d6e:	681b      	ldr	r3, [r3, #0]
   22d70:	b90b      	cbnz	r3, 22d76 <elapsed+0xa>
   22d72:	f7ed b81f 	b.w	fdb4 <z_clock_elapsed>
}
   22d76:	2000      	movs	r0, #0
   22d78:	4770      	bx	lr
   22d7a:	bf00      	nop
   22d7c:	20025dfc 	.word	0x20025dfc

00022d80 <remove_timeout>:
{
   22d80:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22d82:	b140      	cbz	r0, 22d96 <remove_timeout+0x16>
   22d84:	4a08      	ldr	r2, [pc, #32]	; (22da8 <remove_timeout+0x28>)
	return (node == list->tail) ? NULL : node->next;
   22d86:	6852      	ldr	r2, [r2, #4]
   22d88:	4290      	cmp	r0, r2
   22d8a:	d004      	beq.n	22d96 <remove_timeout+0x16>
	if (next(t) != NULL) {
   22d8c:	b11b      	cbz	r3, 22d96 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   22d8e:	689a      	ldr	r2, [r3, #8]
   22d90:	6881      	ldr	r1, [r0, #8]
   22d92:	440a      	add	r2, r1
   22d94:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   22d96:	6842      	ldr	r2, [r0, #4]
   22d98:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   22d9a:	6803      	ldr	r3, [r0, #0]
   22d9c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22d9e:	2300      	movs	r3, #0
	node->prev = NULL;
   22da0:	e9c0 3300 	strd	r3, r3, [r0]
}
   22da4:	4770      	bx	lr
   22da6:	bf00      	nop
   22da8:	2002d41c 	.word	0x2002d41c

00022dac <next_timeout>:
	return list->head == list;
   22dac:	4b0b      	ldr	r3, [pc, #44]	; (22ddc <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   22dae:	b510      	push	{r4, lr}
   22db0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22db2:	429c      	cmp	r4, r3
   22db4:	bf08      	it	eq
   22db6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   22db8:	f7ff ffd8 	bl	22d6c <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   22dbc:	b154      	cbz	r4, 22dd4 <next_timeout+0x28>
   22dbe:	68a3      	ldr	r3, [r4, #8]
   22dc0:	1a18      	subs	r0, r3, r0
   22dc2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   22dc6:	4b06      	ldr	r3, [pc, #24]	; (22de0 <next_timeout+0x34>)
   22dc8:	691b      	ldr	r3, [r3, #16]
   22dca:	b113      	cbz	r3, 22dd2 <next_timeout+0x26>
   22dcc:	4298      	cmp	r0, r3
   22dce:	bfa8      	it	ge
   22dd0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   22dd2:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   22dd4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   22dd8:	e7f5      	b.n	22dc6 <next_timeout+0x1a>
   22dda:	bf00      	nop
   22ddc:	2002d41c 	.word	0x2002d41c
   22de0:	20025cfc 	.word	0x20025cfc

00022de4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   22de4:	b570      	push	{r4, r5, r6, lr}
   22de6:	4604      	mov	r4, r0
   22de8:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   22dea:	60c1      	str	r1, [r0, #12]
   22dec:	f04f 0320 	mov.w	r3, #32
   22df0:	f3ef 8511 	mrs	r5, BASEPRI
   22df4:	f383 8811 	msr	BASEPRI, r3
   22df8:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   22dfc:	f7ff ffb6 	bl	22d6c <elapsed>
   22e00:	2e01      	cmp	r6, #1
   22e02:	bfac      	ite	ge
   22e04:	1980      	addge	r0, r0, r6
   22e06:	3001      	addlt	r0, #1
	return list->head == list;
   22e08:	4b17      	ldr	r3, [pc, #92]	; (22e68 <z_add_timeout+0x84>)
   22e0a:	60a0      	str	r0, [r4, #8]
   22e0c:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22e0e:	429a      	cmp	r2, r3
   22e10:	d001      	beq.n	22e16 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22e12:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   22e14:	b932      	cbnz	r2, 22e24 <z_add_timeout+0x40>
	node->prev = list->tail;
   22e16:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   22e18:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   22e1a:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   22e1c:	685a      	ldr	r2, [r3, #4]
   22e1e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   22e20:	605c      	str	r4, [r3, #4]
   22e22:	e00b      	b.n	22e3c <z_add_timeout+0x58>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   22e24:	6890      	ldr	r0, [r2, #8]
   22e26:	68a1      	ldr	r1, [r4, #8]
   22e28:	4288      	cmp	r0, r1
   22e2a:	dd16      	ble.n	22e5a <z_add_timeout+0x76>
				t->dticks -= to->dticks;
   22e2c:	1a41      	subs	r1, r0, r1
   22e2e:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   22e30:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   22e32:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
   22e36:	6851      	ldr	r1, [r2, #4]
   22e38:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   22e3a:	6054      	str	r4, [r2, #4]
	return list->head == list;
   22e3c:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22e3e:	429a      	cmp	r2, r3
   22e40:	d006      	beq.n	22e50 <z_add_timeout+0x6c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   22e42:	4294      	cmp	r4, r2
   22e44:	d104      	bne.n	22e50 <z_add_timeout+0x6c>
			z_clock_set_timeout(next_timeout(), false);
   22e46:	f7ff ffb1 	bl	22dac <next_timeout>
   22e4a:	2100      	movs	r1, #0
   22e4c:	f7ec ff64 	bl	fd18 <z_clock_set_timeout>
	__asm__ volatile(
   22e50:	f385 8811 	msr	BASEPRI, r5
   22e54:	f3bf 8f6f 	isb	sy
		}
	}
}
   22e58:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
   22e5a:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   22e5c:	4296      	cmp	r6, r2
   22e5e:	60a1      	str	r1, [r4, #8]
   22e60:	d0d9      	beq.n	22e16 <z_add_timeout+0x32>
   22e62:	6812      	ldr	r2, [r2, #0]
   22e64:	e7d6      	b.n	22e14 <z_add_timeout+0x30>
   22e66:	bf00      	nop
   22e68:	2002d41c 	.word	0x2002d41c

00022e6c <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   22e6c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   22e70:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   22e72:	f7ff fc0b 	bl	2268c <z_time_slice>
	__asm__ volatile(
   22e76:	f04f 0320 	mov.w	r3, #32
   22e7a:	f3ef 8511 	mrs	r5, BASEPRI
   22e7e:	f383 8811 	msr	BASEPRI, r3
   22e82:	f3bf 8f6f 	isb	sy
   22e86:	4f21      	ldr	r7, [pc, #132]	; (22f0c <z_clock_announce+0xa0>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   22e88:	4e21      	ldr	r6, [pc, #132]	; (22f10 <z_clock_announce+0xa4>)
   22e8a:	46b8      	mov	r8, r7
	return list->head == list;
   22e8c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 22f14 <z_clock_announce+0xa8>
   22e90:	6034      	str	r4, [r6, #0]
   22e92:	f8d9 4000 	ldr.w	r4, [r9]
   22e96:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22e98:	454c      	cmp	r4, r9
   22e9a:	e9d7 bc00 	ldrd	fp, ip, [r7]
   22e9e:	d005      	beq.n	22eac <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   22ea0:	b124      	cbz	r4, 22eac <z_clock_announce+0x40>
   22ea2:	68a3      	ldr	r3, [r4, #8]
   22ea4:	4293      	cmp	r3, r2
   22ea6:	dd14      	ble.n	22ed2 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   22ea8:	1a9b      	subs	r3, r3, r2
   22eaa:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   22eac:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   22eae:	eb1b 0002 	adds.w	r0, fp, r2
   22eb2:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   22eb6:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
   22eba:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   22ebc:	f7ff ff76 	bl	22dac <next_timeout>
   22ec0:	4621      	mov	r1, r4
   22ec2:	f7ec ff29 	bl	fd18 <z_clock_set_timeout>
	__asm__ volatile(
   22ec6:	f385 8811 	msr	BASEPRI, r5
   22eca:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   22ece:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   22ed2:	eb1b 0003 	adds.w	r0, fp, r3
   22ed6:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   22eda:	1ad3      	subs	r3, r2, r3
   22edc:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   22ede:	2300      	movs	r3, #0
		curr_tick += dt;
   22ee0:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   22ee4:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   22ee6:	4620      	mov	r0, r4
   22ee8:	f7ff ff4a 	bl	22d80 <remove_timeout>
   22eec:	f385 8811 	msr	BASEPRI, r5
   22ef0:	f3bf 8f6f 	isb	sy
		t->fn(t);
   22ef4:	68e3      	ldr	r3, [r4, #12]
   22ef6:	4798      	blx	r3
	__asm__ volatile(
   22ef8:	f04f 0320 	mov.w	r3, #32
   22efc:	f3ef 8511 	mrs	r5, BASEPRI
   22f00:	f383 8811 	msr	BASEPRI, r3
   22f04:	f3bf 8f6f 	isb	sy
   22f08:	e7c3      	b.n	22e92 <z_clock_announce+0x26>
   22f0a:	bf00      	nop
   22f0c:	200200d8 	.word	0x200200d8
   22f10:	20025dfc 	.word	0x20025dfc
   22f14:	2002d41c 	.word	0x2002d41c

00022f18 <z_tick_get>:

s64_t z_tick_get(void)
{
   22f18:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   22f1c:	f04f 0320 	mov.w	r3, #32
   22f20:	f3ef 8411 	mrs	r4, BASEPRI
   22f24:	f383 8811 	msr	BASEPRI, r3
   22f28:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   22f2c:	f7ec ff42 	bl	fdb4 <z_clock_elapsed>
   22f30:	4b07      	ldr	r3, [pc, #28]	; (22f50 <z_tick_get+0x38>)
   22f32:	e9d3 2300 	ldrd	r2, r3, [r3]
   22f36:	eb12 0b00 	adds.w	fp, r2, r0
   22f3a:	f143 0c00 	adc.w	ip, r3, #0
   22f3e:	4658      	mov	r0, fp
   22f40:	4661      	mov	r1, ip
	__asm__ volatile(
   22f42:	f384 8811 	msr	BASEPRI, r4
   22f46:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   22f4a:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   22f4e:	bf00      	nop
   22f50:	200200d8 	.word	0x200200d8

00022f54 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   22f54:	6a02      	ldr	r2, [r0, #32]
{
   22f56:	b538      	push	{r3, r4, r5, lr}
	if (timer->period > 0) {
   22f58:	2a00      	cmp	r2, #0
{
   22f5a:	4604      	mov	r4, r0
	if (timer->period > 0) {
   22f5c:	dd02      	ble.n	22f64 <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22f5e:	490e      	ldr	r1, [pc, #56]	; (22f98 <z_timer_expiration_handler+0x44>)
   22f60:	f7ff ff40 	bl	22de4 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   22f64:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22f66:	3301      	adds	r3, #1
   22f68:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   22f6a:	69a3      	ldr	r3, [r4, #24]
   22f6c:	b10b      	cbz	r3, 22f72 <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
   22f6e:	4620      	mov	r0, r4
   22f70:	4798      	blx	r3
	return list->head == list;
   22f72:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22f76:	42a5      	cmp	r5, r4
   22f78:	d00d      	beq.n	22f96 <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   22f7a:	b165      	cbz	r5, 22f96 <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   22f7c:	4628      	mov	r0, r5
   22f7e:	f002 fe9e 	bl	25cbe <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   22f82:	7b6b      	ldrb	r3, [r5, #13]
   22f84:	06db      	lsls	r3, r3, #27
   22f86:	d104      	bne.n	22f92 <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
   22f88:	69ab      	ldr	r3, [r5, #24]
   22f8a:	b913      	cbnz	r3, 22f92 <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
   22f8c:	4628      	mov	r0, r5
   22f8e:	f7ff fb01 	bl	22594 <z_add_thread_to_ready_q>
   22f92:	2300      	movs	r3, #0
   22f94:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	arch_thread_return_value_set(thread, 0);
}
   22f96:	bd38      	pop	{r3, r4, r5, pc}
   22f98:	00022f55 	.word	0x00022f55

00022f9c <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   22f9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22fa0:	f240 36e7 	movw	r6, #999	; 0x3e7
   22fa4:	2700      	movs	r7, #0
   22fa6:	4604      	mov	r4, r0
   22fa8:	4688      	mov	r8, r1
   22faa:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   22fae:	4630      	mov	r0, r6
   22fb0:	4639      	mov	r1, r7
   22fb2:	2300      	movs	r3, #0
   22fb4:	fbe5 0102 	umlal	r0, r1, r5, r2
   22fb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22fbc:	f7e9 f930 	bl	c220 <__aeabi_uldivmod>
   22fc0:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = k_ms_to_ticks_ceil32(period);
   22fc2:	9000      	str	r0, [sp, #0]
   22fc4:	4630      	mov	r0, r6
   22fc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22fca:	2300      	movs	r3, #0
   22fcc:	fbe5 0108 	umlal	r0, r1, r5, r8
   22fd0:	f7e9 f926 	bl	c220 <__aeabi_uldivmod>
	duration_in_ticks = k_ms_to_ticks_ceil32(duration);
   22fd4:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
   22fd6:	4620      	mov	r0, r4
   22fd8:	f002 ffa7 	bl	25f2a <z_abort_timeout>
	timer->period = period_in_ticks;
   22fdc:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22fde:	4620      	mov	r0, r4
	timer->period = period_in_ticks;
   22fe0:	6223      	str	r3, [r4, #32]
	timer->status = 0U;
   22fe2:	2300      	movs	r3, #0
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22fe4:	9a01      	ldr	r2, [sp, #4]
   22fe6:	4903      	ldr	r1, [pc, #12]	; (22ff4 <z_impl_k_timer_start+0x58>)
	timer->status = 0U;
   22fe8:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
   22fea:	b002      	add	sp, #8
   22fec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22ff0:	f7ff bef8 	b.w	22de4 <z_add_timeout>
   22ff4:	00022f55 	.word	0x00022f55

00022ff8 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   22ff8:	2301      	movs	r3, #1
{
   22ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22ffe:	b086      	sub	sp, #24
	struct _poller poller = { .is_polling = true,
   23000:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   23004:	4b23      	ldr	r3, [pc, #140]	; (23094 <z_impl_k_poll+0x9c>)

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events > 0, "zero events\n");

	events_registered = register_events(events, num_events, &poller,
   23006:	4690      	mov	r8, r2
	struct _poller poller = { .is_polling = true,
   23008:	689b      	ldr	r3, [r3, #8]
{
   2300a:	4606      	mov	r6, r0
	struct _poller poller = { .is_polling = true,
   2300c:	9304      	str	r3, [sp, #16]
   2300e:	4b22      	ldr	r3, [pc, #136]	; (23098 <z_impl_k_poll+0xa0>)
   23010:	9305      	str	r3, [sp, #20]
	events_registered = register_events(events, num_events, &poller,
   23012:	fab2 f382 	clz	r3, r2
   23016:	aa03      	add	r2, sp, #12
   23018:	095b      	lsrs	r3, r3, #5
   2301a:	f003 f8a6 	bl	2616a <register_events>
   2301e:	4607      	mov	r7, r0
	__asm__ volatile(
   23020:	f04f 0320 	mov.w	r3, #32
   23024:	f3ef 8511 	mrs	r5, BASEPRI
   23028:	f383 8811 	msr	BASEPRI, r3
   2302c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   23030:	f89d 300c 	ldrb.w	r3, [sp, #12]
   23034:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   23038:	b94b      	cbnz	r3, 2304e <z_impl_k_poll+0x56>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   2303a:	462a      	mov	r2, r5
   2303c:	4639      	mov	r1, r7
   2303e:	4630      	mov	r0, r6
   23040:	f002 fff8 	bl	26034 <clear_event_registrations>
	__asm__ volatile(
   23044:	f385 8811 	msr	BASEPRI, r5
   23048:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
   2304c:	e00b      	b.n	23066 <z_impl_k_poll+0x6e>
	poller.is_polling = false;
   2304e:	2300      	movs	r3, #0
   23050:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   23054:	f1b8 0f00 	cmp.w	r8, #0
   23058:	d109      	bne.n	2306e <z_impl_k_poll+0x76>
   2305a:	f385 8811 	msr	BASEPRI, r5
   2305e:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   23062:	f06f 040a 	mvn.w	r4, #10
}
   23066:	4620      	mov	r0, r4
   23068:	b006      	add	sp, #24
   2306a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   2306e:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   23070:	4643      	mov	r3, r8
   23072:	4629      	mov	r1, r5
   23074:	4809      	ldr	r0, [pc, #36]	; (2309c <z_impl_k_poll+0xa4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   23076:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2307a:	f7ff fbcb 	bl	22814 <z_pend_curr>
   2307e:	4604      	mov	r4, r0
	__asm__ volatile(
   23080:	f04f 0320 	mov.w	r3, #32
   23084:	f3ef 8511 	mrs	r5, BASEPRI
   23088:	f383 8811 	msr	BASEPRI, r3
   2308c:	f3bf 8f6f 	isb	sy
   23090:	e7d3      	b.n	2303a <z_impl_k_poll+0x42>
   23092:	bf00      	nop
   23094:	20025cfc 	.word	0x20025cfc
   23098:	000260c9 	.word	0x000260c9
   2309c:	2002740a 	.word	0x2002740a

000230a0 <ocrypto_ecdsa_p256_public_key>:
   230a0:	b530      	push	{r4, r5, lr}
   230a2:	b099      	sub	sp, #100	; 0x64
   230a4:	4605      	mov	r5, r0
   230a6:	4668      	mov	r0, sp
   230a8:	f000 f8f2 	bl	23290 <ocrypto_sc_p256_from32bytes>
   230ac:	4669      	mov	r1, sp
   230ae:	a808      	add	r0, sp, #32
   230b0:	f000 fae6 	bl	23680 <ocrypto_curve_p256_scalarmult_base>
   230b4:	4604      	mov	r4, r0
   230b6:	a908      	add	r1, sp, #32
   230b8:	4628      	mov	r0, r5
   230ba:	f000 fa21 	bl	23500 <ocrypto_curve_p256_to64bytes>
   230be:	4620      	mov	r0, r4
   230c0:	b019      	add	sp, #100	; 0x64
   230c2:	bd30      	pop	{r4, r5, pc}

000230c4 <ocrypto_mod_p256_cneg>:
   230c4:	b570      	push	{r4, r5, r6, lr}
   230c6:	b088      	sub	sp, #32
   230c8:	4604      	mov	r4, r0
   230ca:	460d      	mov	r5, r1
   230cc:	4668      	mov	r0, sp
   230ce:	2120      	movs	r1, #32
   230d0:	4616      	mov	r6, r2
   230d2:	f7e9 fdaa 	bl	cc2a <ocrypto_constant_time_fill_zero>
   230d6:	2300      	movs	r3, #0
   230d8:	4629      	mov	r1, r5
   230da:	4620      	mov	r0, r4
   230dc:	2220      	movs	r2, #32
   230de:	9300      	str	r3, [sp, #0]
   230e0:	f7e9 fd9c 	bl	cc1c <ocrypto_constant_time_copy>
   230e4:	462a      	mov	r2, r5
   230e6:	4669      	mov	r1, sp
   230e8:	4668      	mov	r0, sp
   230ea:	f7e9 fde4 	bl	ccb6 <ocrypto_mod_p256_sub>
   230ee:	4632      	mov	r2, r6
   230f0:	4669      	mov	r1, sp
   230f2:	4620      	mov	r0, r4
   230f4:	f7e9 faef 	bl	c6d6 <ocrypto_bigint_cswap256>
   230f8:	b008      	add	sp, #32
   230fa:	bd70      	pop	{r4, r5, r6, pc}

000230fc <ocrypto_mod_p256_toBytes>:
   230fc:	69cb      	ldr	r3, [r1, #28]
   230fe:	ba1b      	rev	r3, r3
   23100:	6003      	str	r3, [r0, #0]
   23102:	698b      	ldr	r3, [r1, #24]
   23104:	ba1b      	rev	r3, r3
   23106:	6043      	str	r3, [r0, #4]
   23108:	694b      	ldr	r3, [r1, #20]
   2310a:	ba1b      	rev	r3, r3
   2310c:	6083      	str	r3, [r0, #8]
   2310e:	690b      	ldr	r3, [r1, #16]
   23110:	ba1b      	rev	r3, r3
   23112:	60c3      	str	r3, [r0, #12]
   23114:	68cb      	ldr	r3, [r1, #12]
   23116:	ba1b      	rev	r3, r3
   23118:	6103      	str	r3, [r0, #16]
   2311a:	688b      	ldr	r3, [r1, #8]
   2311c:	ba1b      	rev	r3, r3
   2311e:	6143      	str	r3, [r0, #20]
   23120:	684b      	ldr	r3, [r1, #4]
   23122:	ba1b      	rev	r3, r3
   23124:	6183      	str	r3, [r0, #24]
   23126:	680b      	ldr	r3, [r1, #0]
   23128:	ba1b      	rev	r3, r3
   2312a:	61c3      	str	r3, [r0, #28]
   2312c:	4770      	bx	lr
   2312e:	bf00      	nop

00023130 <ocrypto_mod_p256_invert>:
   23130:	b570      	push	{r4, r5, r6, lr}
   23132:	460d      	mov	r5, r1
   23134:	2405      	movs	r4, #5
   23136:	b098      	sub	sp, #96	; 0x60
   23138:	4606      	mov	r6, r0
   2313a:	a810      	add	r0, sp, #64	; 0x40
   2313c:	f7e9 fde8 	bl	cd10 <ocrypto_mod_p256_square>
   23140:	462a      	mov	r2, r5
   23142:	a910      	add	r1, sp, #64	; 0x40
   23144:	4668      	mov	r0, sp
   23146:	f7e9 fde4 	bl	cd12 <ocrypto_mod_p256_mul>
   2314a:	4669      	mov	r1, sp
   2314c:	a810      	add	r0, sp, #64	; 0x40
   2314e:	f7e9 fddf 	bl	cd10 <ocrypto_mod_p256_square>
   23152:	a910      	add	r1, sp, #64	; 0x40
   23154:	4608      	mov	r0, r1
   23156:	f7e9 fddb 	bl	cd10 <ocrypto_mod_p256_square>
   2315a:	466a      	mov	r2, sp
   2315c:	a910      	add	r1, sp, #64	; 0x40
   2315e:	a808      	add	r0, sp, #32
   23160:	f7e9 fdd7 	bl	cd12 <ocrypto_mod_p256_mul>
   23164:	a908      	add	r1, sp, #32
   23166:	a810      	add	r0, sp, #64	; 0x40
   23168:	f7e9 fdd2 	bl	cd10 <ocrypto_mod_p256_square>
   2316c:	a910      	add	r1, sp, #64	; 0x40
   2316e:	4608      	mov	r0, r1
   23170:	f7e9 fdce 	bl	cd10 <ocrypto_mod_p256_square>
   23174:	a910      	add	r1, sp, #64	; 0x40
   23176:	4608      	mov	r0, r1
   23178:	f7e9 fdca 	bl	cd10 <ocrypto_mod_p256_square>
   2317c:	a910      	add	r1, sp, #64	; 0x40
   2317e:	4608      	mov	r0, r1
   23180:	f7e9 fdc6 	bl	cd10 <ocrypto_mod_p256_square>
   23184:	a910      	add	r1, sp, #64	; 0x40
   23186:	aa08      	add	r2, sp, #32
   23188:	4608      	mov	r0, r1
   2318a:	f7e9 fdc2 	bl	cd12 <ocrypto_mod_p256_mul>
   2318e:	a910      	add	r1, sp, #64	; 0x40
   23190:	4608      	mov	r0, r1
   23192:	f7e9 fdbd 	bl	cd10 <ocrypto_mod_p256_square>
   23196:	a910      	add	r1, sp, #64	; 0x40
   23198:	4608      	mov	r0, r1
   2319a:	f7e9 fdb9 	bl	cd10 <ocrypto_mod_p256_square>
   2319e:	a910      	add	r1, sp, #64	; 0x40
   231a0:	466a      	mov	r2, sp
   231a2:	a808      	add	r0, sp, #32
   231a4:	f7e9 fdb5 	bl	cd12 <ocrypto_mod_p256_mul>
   231a8:	a908      	add	r1, sp, #32
   231aa:	a810      	add	r0, sp, #64	; 0x40
   231ac:	f7e9 fdb0 	bl	cd10 <ocrypto_mod_p256_square>
   231b0:	a910      	add	r1, sp, #64	; 0x40
   231b2:	4608      	mov	r0, r1
   231b4:	f7e9 fdac 	bl	cd10 <ocrypto_mod_p256_square>
   231b8:	3c01      	subs	r4, #1
   231ba:	a910      	add	r1, sp, #64	; 0x40
   231bc:	d1f5      	bne.n	231aa <ocrypto_mod_p256_invert+0x7a>
   231be:	aa08      	add	r2, sp, #32
   231c0:	4608      	mov	r0, r1
   231c2:	f7e9 fda6 	bl	cd12 <ocrypto_mod_p256_mul>
   231c6:	2405      	movs	r4, #5
   231c8:	a910      	add	r1, sp, #64	; 0x40
   231ca:	4608      	mov	r0, r1
   231cc:	f7e9 fda0 	bl	cd10 <ocrypto_mod_p256_square>
   231d0:	a910      	add	r1, sp, #64	; 0x40
   231d2:	4608      	mov	r0, r1
   231d4:	f7e9 fd9c 	bl	cd10 <ocrypto_mod_p256_square>
   231d8:	3c01      	subs	r4, #1
   231da:	d1f5      	bne.n	231c8 <ocrypto_mod_p256_invert+0x98>
   231dc:	a910      	add	r1, sp, #64	; 0x40
   231de:	aa08      	add	r2, sp, #32
   231e0:	4608      	mov	r0, r1
   231e2:	f7e9 fd96 	bl	cd12 <ocrypto_mod_p256_mul>
   231e6:	a910      	add	r1, sp, #64	; 0x40
   231e8:	a808      	add	r0, sp, #32
   231ea:	f7e9 fd91 	bl	cd10 <ocrypto_mod_p256_square>
   231ee:	a908      	add	r1, sp, #32
   231f0:	4608      	mov	r0, r1
   231f2:	f7e9 fd8d 	bl	cd10 <ocrypto_mod_p256_square>
   231f6:	a908      	add	r1, sp, #32
   231f8:	466a      	mov	r2, sp
   231fa:	4668      	mov	r0, sp
   231fc:	f7e9 fd89 	bl	cd12 <ocrypto_mod_p256_mul>
   23200:	2410      	movs	r4, #16
   23202:	4669      	mov	r1, sp
   23204:	a810      	add	r0, sp, #64	; 0x40
   23206:	f7e9 fd83 	bl	cd10 <ocrypto_mod_p256_square>
   2320a:	a910      	add	r1, sp, #64	; 0x40
   2320c:	4608      	mov	r0, r1
   2320e:	f7e9 fd7f 	bl	cd10 <ocrypto_mod_p256_square>
   23212:	3c01      	subs	r4, #1
   23214:	a910      	add	r1, sp, #64	; 0x40
   23216:	d1f5      	bne.n	23204 <ocrypto_mod_p256_invert+0xd4>
   23218:	462a      	mov	r2, r5
   2321a:	4608      	mov	r0, r1
   2321c:	f7e9 fd79 	bl	cd12 <ocrypto_mod_p256_mul>
   23220:	2440      	movs	r4, #64	; 0x40
   23222:	a910      	add	r1, sp, #64	; 0x40
   23224:	4608      	mov	r0, r1
   23226:	f7e9 fd73 	bl	cd10 <ocrypto_mod_p256_square>
   2322a:	a910      	add	r1, sp, #64	; 0x40
   2322c:	4608      	mov	r0, r1
   2322e:	f7e9 fd6f 	bl	cd10 <ocrypto_mod_p256_square>
   23232:	3c01      	subs	r4, #1
   23234:	d1f5      	bne.n	23222 <ocrypto_mod_p256_invert+0xf2>
   23236:	a910      	add	r1, sp, #64	; 0x40
   23238:	466a      	mov	r2, sp
   2323a:	4608      	mov	r0, r1
   2323c:	f7e9 fd69 	bl	cd12 <ocrypto_mod_p256_mul>
   23240:	2410      	movs	r4, #16
   23242:	a910      	add	r1, sp, #64	; 0x40
   23244:	4608      	mov	r0, r1
   23246:	f7e9 fd63 	bl	cd10 <ocrypto_mod_p256_square>
   2324a:	a910      	add	r1, sp, #64	; 0x40
   2324c:	4608      	mov	r0, r1
   2324e:	f7e9 fd5f 	bl	cd10 <ocrypto_mod_p256_square>
   23252:	3c01      	subs	r4, #1
   23254:	d1f5      	bne.n	23242 <ocrypto_mod_p256_invert+0x112>
   23256:	a910      	add	r1, sp, #64	; 0x40
   23258:	466a      	mov	r2, sp
   2325a:	4608      	mov	r0, r1
   2325c:	f7e9 fd59 	bl	cd12 <ocrypto_mod_p256_mul>
   23260:	2410      	movs	r4, #16
   23262:	a910      	add	r1, sp, #64	; 0x40
   23264:	4608      	mov	r0, r1
   23266:	f7e9 fd53 	bl	cd10 <ocrypto_mod_p256_square>
   2326a:	a910      	add	r1, sp, #64	; 0x40
   2326c:	4608      	mov	r0, r1
   2326e:	f7e9 fd4f 	bl	cd10 <ocrypto_mod_p256_square>
   23272:	3c01      	subs	r4, #1
   23274:	d1f5      	bne.n	23262 <ocrypto_mod_p256_invert+0x132>
   23276:	a910      	add	r1, sp, #64	; 0x40
   23278:	aa08      	add	r2, sp, #32
   2327a:	4608      	mov	r0, r1
   2327c:	f7e9 fd49 	bl	cd12 <ocrypto_mod_p256_mul>
   23280:	462a      	mov	r2, r5
   23282:	a910      	add	r1, sp, #64	; 0x40
   23284:	4630      	mov	r0, r6
   23286:	f7e9 fd44 	bl	cd12 <ocrypto_mod_p256_mul>
   2328a:	b018      	add	sp, #96	; 0x60
   2328c:	bd70      	pop	{r4, r5, r6, pc}
   2328e:	bf00      	nop

00023290 <ocrypto_sc_p256_from32bytes>:
   23290:	b538      	push	{r3, r4, r5, lr}
   23292:	460b      	mov	r3, r1
   23294:	680a      	ldr	r2, [r1, #0]
   23296:	4d12      	ldr	r5, [pc, #72]	; (232e0 <ocrypto_sc_p256_from32bytes+0x50>)
   23298:	ba12      	rev	r2, r2
   2329a:	61c2      	str	r2, [r0, #28]
   2329c:	684a      	ldr	r2, [r1, #4]
   2329e:	4601      	mov	r1, r0
   232a0:	ba12      	rev	r2, r2
   232a2:	6182      	str	r2, [r0, #24]
   232a4:	689a      	ldr	r2, [r3, #8]
   232a6:	4604      	mov	r4, r0
   232a8:	ba12      	rev	r2, r2
   232aa:	6142      	str	r2, [r0, #20]
   232ac:	68da      	ldr	r2, [r3, #12]
   232ae:	ba12      	rev	r2, r2
   232b0:	6102      	str	r2, [r0, #16]
   232b2:	691a      	ldr	r2, [r3, #16]
   232b4:	ba12      	rev	r2, r2
   232b6:	60c2      	str	r2, [r0, #12]
   232b8:	695a      	ldr	r2, [r3, #20]
   232ba:	ba12      	rev	r2, r2
   232bc:	6082      	str	r2, [r0, #8]
   232be:	699a      	ldr	r2, [r3, #24]
   232c0:	ba12      	rev	r2, r2
   232c2:	6042      	str	r2, [r0, #4]
   232c4:	69db      	ldr	r3, [r3, #28]
   232c6:	462a      	mov	r2, r5
   232c8:	ba1b      	rev	r3, r3
   232ca:	6003      	str	r3, [r0, #0]
   232cc:	f7e9 f978 	bl	c5c0 <ocrypto_bigint_sub256>
   232d0:	4629      	mov	r1, r5
   232d2:	4602      	mov	r2, r0
   232d4:	4620      	mov	r0, r4
   232d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   232da:	f7e9 b991 	b.w	c600 <ocrypto_bigint_cadd256>
   232de:	bf00      	nop
   232e0:	0002790c 	.word	0x0002790c

000232e4 <p256_zdblu>:
   232e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   232e8:	4607      	mov	r7, r0
   232ea:	460d      	mov	r5, r1
   232ec:	4690      	mov	r8, r2
   232ee:	b088      	sub	sp, #32
   232f0:	f102 0120 	add.w	r1, r2, #32
   232f4:	4668      	mov	r0, sp
   232f6:	f107 0620 	add.w	r6, r7, #32
   232fa:	f7e9 fd09 	bl	cd10 <ocrypto_mod_p256_square>
   232fe:	466a      	mov	r2, sp
   23300:	4669      	mov	r1, sp
   23302:	4668      	mov	r0, sp
   23304:	f7e9 fc98 	bl	cc38 <ocrypto_mod_p256_add>
   23308:	4630      	mov	r0, r6
   2330a:	4669      	mov	r1, sp
   2330c:	f7e9 fd00 	bl	cd10 <ocrypto_mod_p256_square>
   23310:	4632      	mov	r2, r6
   23312:	4631      	mov	r1, r6
   23314:	4630      	mov	r0, r6
   23316:	f105 0420 	add.w	r4, r5, #32
   2331a:	f7e9 fc8d 	bl	cc38 <ocrypto_mod_p256_add>
   2331e:	466a      	mov	r2, sp
   23320:	4669      	mov	r1, sp
   23322:	4668      	mov	r0, sp
   23324:	f7e9 fc88 	bl	cc38 <ocrypto_mod_p256_add>
   23328:	4620      	mov	r0, r4
   2332a:	4641      	mov	r1, r8
   2332c:	f7e9 fcf0 	bl	cd10 <ocrypto_mod_p256_square>
   23330:	466a      	mov	r2, sp
   23332:	4641      	mov	r1, r8
   23334:	4638      	mov	r0, r7
   23336:	f7e9 fcec 	bl	cd12 <ocrypto_mod_p256_mul>
   2333a:	4622      	mov	r2, r4
   2333c:	4621      	mov	r1, r4
   2333e:	4668      	mov	r0, sp
   23340:	f7e9 fc7a 	bl	cc38 <ocrypto_mod_p256_add>
   23344:	4622      	mov	r2, r4
   23346:	4669      	mov	r1, sp
   23348:	4668      	mov	r0, sp
   2334a:	f7e9 fc75 	bl	cc38 <ocrypto_mod_p256_add>
   2334e:	4669      	mov	r1, sp
   23350:	4668      	mov	r0, sp
   23352:	4a11      	ldr	r2, [pc, #68]	; (23398 <p256_zdblu+0xb4>)
   23354:	f7e9 fc70 	bl	cc38 <ocrypto_mod_p256_add>
   23358:	4669      	mov	r1, sp
   2335a:	4628      	mov	r0, r5
   2335c:	f7e9 fcd8 	bl	cd10 <ocrypto_mod_p256_square>
   23360:	463a      	mov	r2, r7
   23362:	4629      	mov	r1, r5
   23364:	4628      	mov	r0, r5
   23366:	f7e9 fca6 	bl	ccb6 <ocrypto_mod_p256_sub>
   2336a:	463a      	mov	r2, r7
   2336c:	4629      	mov	r1, r5
   2336e:	4628      	mov	r0, r5
   23370:	f7e9 fca1 	bl	ccb6 <ocrypto_mod_p256_sub>
   23374:	462a      	mov	r2, r5
   23376:	4639      	mov	r1, r7
   23378:	4620      	mov	r0, r4
   2337a:	f7e9 fc9c 	bl	ccb6 <ocrypto_mod_p256_sub>
   2337e:	466a      	mov	r2, sp
   23380:	4621      	mov	r1, r4
   23382:	4620      	mov	r0, r4
   23384:	f7e9 fcc5 	bl	cd12 <ocrypto_mod_p256_mul>
   23388:	4632      	mov	r2, r6
   2338a:	4621      	mov	r1, r4
   2338c:	4620      	mov	r0, r4
   2338e:	f7e9 fc92 	bl	ccb6 <ocrypto_mod_p256_sub>
   23392:	b008      	add	sp, #32
   23394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23398:	000279ac 	.word	0x000279ac

0002339c <p256_zaddc>:
   2339c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2339e:	4604      	mov	r4, r0
   233a0:	460e      	mov	r6, r1
   233a2:	b099      	sub	sp, #100	; 0x64
   233a4:	460a      	mov	r2, r1
   233a6:	4601      	mov	r1, r0
   233a8:	4668      	mov	r0, sp
   233aa:	f7e9 fc84 	bl	ccb6 <ocrypto_mod_p256_sub>
   233ae:	4669      	mov	r1, sp
   233b0:	4668      	mov	r0, sp
   233b2:	f7e9 fcad 	bl	cd10 <ocrypto_mod_p256_square>
   233b6:	466a      	mov	r2, sp
   233b8:	4621      	mov	r1, r4
   233ba:	a808      	add	r0, sp, #32
   233bc:	f106 0520 	add.w	r5, r6, #32
   233c0:	f104 0720 	add.w	r7, r4, #32
   233c4:	f7e9 fca5 	bl	cd12 <ocrypto_mod_p256_mul>
   233c8:	466a      	mov	r2, sp
   233ca:	4631      	mov	r1, r6
   233cc:	4668      	mov	r0, sp
   233ce:	f7e9 fca0 	bl	cd12 <ocrypto_mod_p256_mul>
   233d2:	4639      	mov	r1, r7
   233d4:	462a      	mov	r2, r5
   233d6:	a810      	add	r0, sp, #64	; 0x40
   233d8:	f7e9 fc2e 	bl	cc38 <ocrypto_mod_p256_add>
   233dc:	462a      	mov	r2, r5
   233de:	4639      	mov	r1, r7
   233e0:	4628      	mov	r0, r5
   233e2:	f7e9 fc68 	bl	ccb6 <ocrypto_mod_p256_sub>
   233e6:	4629      	mov	r1, r5
   233e8:	4630      	mov	r0, r6
   233ea:	f7e9 fc91 	bl	cd10 <ocrypto_mod_p256_square>
   233ee:	466a      	mov	r2, sp
   233f0:	a908      	add	r1, sp, #32
   233f2:	4620      	mov	r0, r4
   233f4:	f7e9 fc20 	bl	cc38 <ocrypto_mod_p256_add>
   233f8:	4622      	mov	r2, r4
   233fa:	4631      	mov	r1, r6
   233fc:	4630      	mov	r0, r6
   233fe:	f7e9 fc5a 	bl	ccb6 <ocrypto_mod_p256_sub>
   23402:	466a      	mov	r2, sp
   23404:	a908      	add	r1, sp, #32
   23406:	4668      	mov	r0, sp
   23408:	f7e9 fc55 	bl	ccb6 <ocrypto_mod_p256_sub>
   2340c:	466a      	mov	r2, sp
   2340e:	4639      	mov	r1, r7
   23410:	4638      	mov	r0, r7
   23412:	f7e9 fc7e 	bl	cd12 <ocrypto_mod_p256_mul>
   23416:	4632      	mov	r2, r6
   23418:	a908      	add	r1, sp, #32
   2341a:	4668      	mov	r0, sp
   2341c:	f7e9 fc4b 	bl	ccb6 <ocrypto_mod_p256_sub>
   23420:	466a      	mov	r2, sp
   23422:	4629      	mov	r1, r5
   23424:	4628      	mov	r0, r5
   23426:	f7e9 fc74 	bl	cd12 <ocrypto_mod_p256_mul>
   2342a:	463a      	mov	r2, r7
   2342c:	4629      	mov	r1, r5
   2342e:	4628      	mov	r0, r5
   23430:	f7e9 fc41 	bl	ccb6 <ocrypto_mod_p256_sub>
   23434:	a910      	add	r1, sp, #64	; 0x40
   23436:	4668      	mov	r0, sp
   23438:	f7e9 fc6a 	bl	cd10 <ocrypto_mod_p256_square>
   2343c:	4622      	mov	r2, r4
   2343e:	4669      	mov	r1, sp
   23440:	4620      	mov	r0, r4
   23442:	f7e9 fc38 	bl	ccb6 <ocrypto_mod_p256_sub>
   23446:	a908      	add	r1, sp, #32
   23448:	4622      	mov	r2, r4
   2344a:	4608      	mov	r0, r1
   2344c:	f7e9 fc33 	bl	ccb6 <ocrypto_mod_p256_sub>
   23450:	a910      	add	r1, sp, #64	; 0x40
   23452:	aa08      	add	r2, sp, #32
   23454:	4608      	mov	r0, r1
   23456:	f7e9 fc5c 	bl	cd12 <ocrypto_mod_p256_mul>
   2345a:	463a      	mov	r2, r7
   2345c:	a910      	add	r1, sp, #64	; 0x40
   2345e:	4638      	mov	r0, r7
   23460:	f7e9 fc29 	bl	ccb6 <ocrypto_mod_p256_sub>
   23464:	b019      	add	sp, #100	; 0x64
   23466:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023468 <p256_zaddu>:
   23468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2346c:	460c      	mov	r4, r1
   2346e:	4605      	mov	r5, r0
   23470:	4690      	mov	r8, r2
   23472:	b088      	sub	sp, #32
   23474:	4622      	mov	r2, r4
   23476:	4601      	mov	r1, r0
   23478:	4668      	mov	r0, sp
   2347a:	f7e9 fc1c 	bl	ccb6 <ocrypto_mod_p256_sub>
   2347e:	4669      	mov	r1, sp
   23480:	4668      	mov	r0, sp
   23482:	f7e9 fc45 	bl	cd10 <ocrypto_mod_p256_square>
   23486:	466a      	mov	r2, sp
   23488:	4629      	mov	r1, r5
   2348a:	4628      	mov	r0, r5
   2348c:	f104 0620 	add.w	r6, r4, #32
   23490:	f7e9 fc3f 	bl	cd12 <ocrypto_mod_p256_mul>
   23494:	f105 0720 	add.w	r7, r5, #32
   23498:	466a      	mov	r2, sp
   2349a:	4621      	mov	r1, r4
   2349c:	4668      	mov	r0, sp
   2349e:	f7e9 fc38 	bl	cd12 <ocrypto_mod_p256_mul>
   234a2:	4632      	mov	r2, r6
   234a4:	4630      	mov	r0, r6
   234a6:	4639      	mov	r1, r7
   234a8:	f7e9 fc05 	bl	ccb6 <ocrypto_mod_p256_sub>
   234ac:	4631      	mov	r1, r6
   234ae:	4620      	mov	r0, r4
   234b0:	f7e9 fc2e 	bl	cd10 <ocrypto_mod_p256_square>
   234b4:	462a      	mov	r2, r5
   234b6:	4621      	mov	r1, r4
   234b8:	4620      	mov	r0, r4
   234ba:	f7e9 fbfc 	bl	ccb6 <ocrypto_mod_p256_sub>
   234be:	466a      	mov	r2, sp
   234c0:	4621      	mov	r1, r4
   234c2:	4620      	mov	r0, r4
   234c4:	f7e9 fbf7 	bl	ccb6 <ocrypto_mod_p256_sub>
   234c8:	466a      	mov	r2, sp
   234ca:	4629      	mov	r1, r5
   234cc:	4640      	mov	r0, r8
   234ce:	f7e9 fbf2 	bl	ccb6 <ocrypto_mod_p256_sub>
   234d2:	4642      	mov	r2, r8
   234d4:	4639      	mov	r1, r7
   234d6:	4638      	mov	r0, r7
   234d8:	f7e9 fc1b 	bl	cd12 <ocrypto_mod_p256_mul>
   234dc:	4622      	mov	r2, r4
   234de:	4629      	mov	r1, r5
   234e0:	4668      	mov	r0, sp
   234e2:	f7e9 fbe8 	bl	ccb6 <ocrypto_mod_p256_sub>
   234e6:	466a      	mov	r2, sp
   234e8:	4631      	mov	r1, r6
   234ea:	4630      	mov	r0, r6
   234ec:	f7e9 fc11 	bl	cd12 <ocrypto_mod_p256_mul>
   234f0:	463a      	mov	r2, r7
   234f2:	4631      	mov	r1, r6
   234f4:	4630      	mov	r0, r6
   234f6:	f7e9 fbde 	bl	ccb6 <ocrypto_mod_p256_sub>
   234fa:	b008      	add	sp, #32
   234fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023500 <ocrypto_curve_p256_to64bytes>:
   23500:	b538      	push	{r3, r4, r5, lr}
   23502:	4604      	mov	r4, r0
   23504:	460d      	mov	r5, r1
   23506:	f7ff fdf9 	bl	230fc <ocrypto_mod_p256_toBytes>
   2350a:	f105 0120 	add.w	r1, r5, #32
   2350e:	f104 0020 	add.w	r0, r4, #32
   23512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   23516:	f7ff bdf1 	b.w	230fc <ocrypto_mod_p256_toBytes>
   2351a:	bf00      	nop

0002351c <ocrypto_curve_p256_scalarmult>:
   2351c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23520:	b0b8      	sub	sp, #224	; 0xe0
   23522:	468a      	mov	sl, r1
   23524:	4681      	mov	r9, r0
   23526:	4611      	mov	r1, r2
   23528:	a810      	add	r0, sp, #64	; 0x40
   2352a:	4a51      	ldr	r2, [pc, #324]	; (23670 <ocrypto_curve_p256_scalarmult+0x154>)
   2352c:	f7e9 f848 	bl	c5c0 <ocrypto_bigint_sub256>
   23530:	4950      	ldr	r1, [pc, #320]	; (23674 <ocrypto_curve_p256_scalarmult+0x158>)
   23532:	4602      	mov	r2, r0
   23534:	a810      	add	r0, sp, #64	; 0x40
   23536:	f7e9 f863 	bl	c600 <ocrypto_bigint_cadd256>
   2353a:	4680      	mov	r8, r0
   2353c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
   2353e:	494c      	ldr	r1, [pc, #304]	; (23670 <ocrypto_curve_p256_scalarmult+0x154>)
   23540:	ea08 77d7 	and.w	r7, r8, r7, lsr #31
   23544:	f1c7 0201 	rsb	r2, r7, #1
   23548:	a810      	add	r0, sp, #64	; 0x40
   2354a:	f7e9 f859 	bl	c600 <ocrypto_bigint_cadd256>
   2354e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   23550:	4652      	mov	r2, sl
   23552:	43ed      	mvns	r5, r5
   23554:	a928      	add	r1, sp, #160	; 0xa0
   23556:	a818      	add	r0, sp, #96	; 0x60
   23558:	f7ff fec4 	bl	232e4 <p256_zdblu>
   2355c:	0fed      	lsrs	r5, r5, #31
   2355e:	a920      	add	r1, sp, #128	; 0x80
   23560:	f1c5 0201 	rsb	r2, r5, #1
   23564:	4608      	mov	r0, r1
   23566:	f7ff fdad 	bl	230c4 <ocrypto_mod_p256_cneg>
   2356a:	26fe      	movs	r6, #254	; 0xfe
   2356c:	f1c8 0801 	rsb	r8, r8, #1
   23570:	466a      	mov	r2, sp
   23572:	a918      	add	r1, sp, #96	; 0x60
   23574:	a828      	add	r0, sp, #160	; 0xa0
   23576:	f7ff ff77 	bl	23468 <p256_zaddu>
   2357a:	1173      	asrs	r3, r6, #5
   2357c:	aa38      	add	r2, sp, #224	; 0xe0
   2357e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   23582:	f853 4ca0 	ldr.w	r4, [r3, #-160]
   23586:	f006 031f 	and.w	r3, r6, #31
   2358a:	40dc      	lsrs	r4, r3
   2358c:	f004 0401 	and.w	r4, r4, #1
   23590:	4065      	eors	r5, r4
   23592:	462a      	mov	r2, r5
   23594:	a928      	add	r1, sp, #160	; 0xa0
   23596:	a818      	add	r0, sp, #96	; 0x60
   23598:	f7e9 f89d 	bl	c6d6 <ocrypto_bigint_cswap256>
   2359c:	462a      	mov	r2, r5
   2359e:	a930      	add	r1, sp, #192	; 0xc0
   235a0:	a820      	add	r0, sp, #128	; 0x80
   235a2:	f7e9 f898 	bl	c6d6 <ocrypto_bigint_cswap256>
   235a6:	3e01      	subs	r6, #1
   235a8:	a928      	add	r1, sp, #160	; 0xa0
   235aa:	a818      	add	r0, sp, #96	; 0x60
   235ac:	f7ff fef6 	bl	2339c <p256_zaddc>
   235b0:	1c73      	adds	r3, r6, #1
   235b2:	4625      	mov	r5, r4
   235b4:	d1dc      	bne.n	23570 <ocrypto_curve_p256_scalarmult+0x54>
   235b6:	f1c4 0201 	rsb	r2, r4, #1
   235ba:	a808      	add	r0, sp, #32
   235bc:	a920      	add	r1, sp, #128	; 0x80
   235be:	f7ff fd81 	bl	230c4 <ocrypto_mod_p256_cneg>
   235c2:	407d      	eors	r5, r7
   235c4:	466a      	mov	r2, sp
   235c6:	a918      	add	r1, sp, #96	; 0x60
   235c8:	a828      	add	r0, sp, #160	; 0xa0
   235ca:	f7ff ff4d 	bl	23468 <p256_zaddu>
   235ce:	a928      	add	r1, sp, #160	; 0xa0
   235d0:	462a      	mov	r2, r5
   235d2:	a818      	add	r0, sp, #96	; 0x60
   235d4:	f7e9 f87f 	bl	c6d6 <ocrypto_bigint_cswap256>
   235d8:	462a      	mov	r2, r5
   235da:	a930      	add	r1, sp, #192	; 0xc0
   235dc:	a820      	add	r0, sp, #128	; 0x80
   235de:	f7e9 f87a 	bl	c6d6 <ocrypto_bigint_cswap256>
   235e2:	a908      	add	r1, sp, #32
   235e4:	466a      	mov	r2, sp
   235e6:	4608      	mov	r0, r1
   235e8:	f7e9 fb93 	bl	cd12 <ocrypto_mod_p256_mul>
   235ec:	a908      	add	r1, sp, #32
   235ee:	4608      	mov	r0, r1
   235f0:	f7ff fd9e 	bl	23130 <ocrypto_mod_p256_invert>
   235f4:	a908      	add	r1, sp, #32
   235f6:	f109 0420 	add.w	r4, r9, #32
   235fa:	f10a 0220 	add.w	r2, sl, #32
   235fe:	4608      	mov	r0, r1
   23600:	f7e9 fb87 	bl	cd12 <ocrypto_mod_p256_mul>
   23604:	a920      	add	r1, sp, #128	; 0x80
   23606:	aa08      	add	r2, sp, #32
   23608:	4620      	mov	r0, r4
   2360a:	f7e9 fb82 	bl	cd12 <ocrypto_mod_p256_mul>
   2360e:	aa08      	add	r2, sp, #32
   23610:	a918      	add	r1, sp, #96	; 0x60
   23612:	4668      	mov	r0, sp
   23614:	f7e9 fb7d 	bl	cd12 <ocrypto_mod_p256_mul>
   23618:	4669      	mov	r1, sp
   2361a:	4668      	mov	r0, sp
   2361c:	f7e9 fb78 	bl	cd10 <ocrypto_mod_p256_square>
   23620:	aa18      	add	r2, sp, #96	; 0x60
   23622:	4669      	mov	r1, sp
   23624:	a808      	add	r0, sp, #32
   23626:	f7e9 fb74 	bl	cd12 <ocrypto_mod_p256_mul>
   2362a:	4621      	mov	r1, r4
   2362c:	4668      	mov	r0, sp
   2362e:	f7e9 fb6f 	bl	cd10 <ocrypto_mod_p256_square>
   23632:	aa08      	add	r2, sp, #32
   23634:	4669      	mov	r1, sp
   23636:	4610      	mov	r0, r2
   23638:	f7e9 fb3d 	bl	ccb6 <ocrypto_mod_p256_sub>
   2363c:	a908      	add	r1, sp, #32
   2363e:	4a0e      	ldr	r2, [pc, #56]	; (23678 <ocrypto_curve_p256_scalarmult+0x15c>)
   23640:	4668      	mov	r0, sp
   23642:	f7e9 fb38 	bl	ccb6 <ocrypto_mod_p256_sub>
   23646:	4620      	mov	r0, r4
   23648:	2120      	movs	r1, #32
   2364a:	f7e9 fada 	bl	cc02 <ocrypto_constant_time_is_zero>
   2364e:	a908      	add	r1, sp, #32
   23650:	4243      	negs	r3, r0
   23652:	4602      	mov	r2, r0
   23654:	4668      	mov	r0, sp
   23656:	ea43 0808 	orr.w	r8, r3, r8
   2365a:	f7e9 f83c 	bl	c6d6 <ocrypto_bigint_cswap256>
   2365e:	4648      	mov	r0, r9
   23660:	4669      	mov	r1, sp
   23662:	4a06      	ldr	r2, [pc, #24]	; (2367c <ocrypto_curve_p256_scalarmult+0x160>)
   23664:	f7e9 fb55 	bl	cd12 <ocrypto_mod_p256_mul>
   23668:	4640      	mov	r0, r8
   2366a:	b038      	add	sp, #224	; 0xe0
   2366c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23670:	000279ec 	.word	0x000279ec
   23674:	0002796c 	.word	0x0002796c
   23678:	000279cc 	.word	0x000279cc
   2367c:	0002798c 	.word	0x0002798c

00023680 <ocrypto_curve_p256_scalarmult_base>:
   23680:	460a      	mov	r2, r1
   23682:	4901      	ldr	r1, [pc, #4]	; (23688 <ocrypto_curve_p256_scalarmult_base+0x8>)
   23684:	f7ff bf4a 	b.w	2351c <ocrypto_curve_p256_scalarmult>
   23688:	0002792c 	.word	0x0002792c

0002368c <main>:
		nrf_regulators_system_off(NRF_REGULATORS_NS);
	}
}
#else
void main(void)
{
   2368c:	b508      	push	{r3, lr}
	start_execute();
   2368e:	f7e9 fe59 	bl	d344 <start_execute>
	do
	{
		/* code */
		request_nb_iot_network_stats();
   23692:	f7ea ff9b 	bl	e5cc <request_nb_iot_network_stats>
	return z_impl_k_sleep(ms);
   23696:	f242 7010 	movw	r0, #10000	; 0x2710
   2369a:	f7ff f999 	bl	229d0 <z_impl_k_sleep>
   2369e:	e7f8      	b.n	23692 <main+0x6>

000236a0 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   236a0:	6843      	ldr	r3, [r0, #4]
   236a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   236a4:	b103      	cbz	r3, 236a8 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   236a6:	4718      	bx	r3
}
   236a8:	4770      	bx	lr

000236aa <slm_at_callback>:
{
   236aa:	b510      	push	{r4, lr}
   236ac:	4604      	mov	r4, r0
	write_uart_string(str, strlen(str));
   236ae:	f001 f8d3 	bl	24858 <strlen>
   236b2:	4601      	mov	r1, r0
   236b4:	4620      	mov	r0, r4
}
   236b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	write_uart_string(str, strlen(str));
   236ba:	f7e9 be87 	b.w	d3cc <write_uart_string>

000236be <response_handler>:
{
   236be:	b510      	push	{r4, lr}
	int len = strlen(response) + 1;
   236c0:	4608      	mov	r0, r1
{
   236c2:	460c      	mov	r4, r1
	int len = strlen(response) + 1;
   236c4:	f001 f8c8 	bl	24858 <strlen>
   236c8:	1c41      	adds	r1, r0, #1
	if (len > 1) {
   236ca:	2901      	cmp	r1, #1
   236cc:	dd04      	ble.n	236d8 <response_handler+0x1a>
		write_uart_string(response, len);
   236ce:	4620      	mov	r0, r4
}
   236d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		write_uart_string(response, len);
   236d4:	f7e9 be7a 	b.w	d3cc <write_uart_string>
}
   236d8:	bd10      	pop	{r4, pc}

000236da <check_for_ipv4>:
	for (index = 0; index < length; index++) {
   236da:	4602      	mov	r2, r0
   236dc:	1a13      	subs	r3, r2, r0
   236de:	4299      	cmp	r1, r3
   236e0:	dc01      	bgt.n	236e6 <check_for_ipv4+0xc>
	return true;
   236e2:	2001      	movs	r0, #1
   236e4:	4770      	bx	lr
		char ch = *(address + index);
   236e6:	f812 3b01 	ldrb.w	r3, [r2], #1
		if ((ch == '.') || (ch >= '0' && ch <= '9')) {
   236ea:	2b2e      	cmp	r3, #46	; 0x2e
   236ec:	d0f6      	beq.n	236dc <check_for_ipv4+0x2>
   236ee:	3b30      	subs	r3, #48	; 0x30
   236f0:	2b09      	cmp	r3, #9
   236f2:	d9f3      	bls.n	236dc <check_for_ipv4+0x2>
			return false;
   236f4:	2000      	movs	r0, #0
}
   236f6:	4770      	bx	lr

000236f8 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
   236f8:	b570      	push	{r4, r5, r6, lr}
   236fa:	250c      	movs	r5, #12
   236fc:	434d      	muls	r5, r1
   236fe:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   23700:	f990 000b 	ldrsb.w	r0, [r0, #11]
   23704:	1974      	adds	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   23706:	4288      	cmp	r0, r1
   23708:	bfa8      	it	ge
   2370a:	4621      	movge	r1, r4

	*word = &bitarray[bn / 32];
   2370c:	f04f 0420 	mov.w	r4, #32
   23710:	fb92 f4f4 	sdiv	r4, r2, r4
		p->levels[level].bits : p->levels[level].bits_p;
   23714:	bfb8      	it	lt
   23716:	5971      	ldrlt	r1, [r6, r5]

	return bn & 0x1f;
}
   23718:	f002 001f 	and.w	r0, r2, #31
	*word = &bitarray[bn / 32];
   2371c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   23720:	6019      	str	r1, [r3, #0]
}
   23722:	bd70      	pop	{r4, r5, r6, pc}

00023724 <pool_irq_lock.isra.2.part.3>:
   23724:	f04f 0320 	mov.w	r3, #32
   23728:	f3ef 8011 	mrs	r0, BASEPRI
   2372c:	f383 8811 	msr	BASEPRI, r3
   23730:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
   23734:	4770      	bx	lr

00023736 <pool_irq_unlock.isra.4>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   23736:	07c3      	lsls	r3, r0, #31
   23738:	d503      	bpl.n	23742 <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   2373a:	f381 8811 	msr	BASEPRI, r1
   2373e:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
   23742:	4770      	bx	lr

00023744 <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   23744:	23ff      	movs	r3, #255	; 0xff
{
   23746:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   2374a:	6845      	ldr	r5, [r0, #4]
	for (i = 0; i < p->n_levels; i++) {
   2374c:	2200      	movs	r2, #0
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   2374e:	4629      	mov	r1, r5
		sys_dlist_init(&p->levels[i].free_list);
   23750:	f04f 0a0c 	mov.w	sl, #12
			bits += (nblocks + 31)/32;
   23754:	f04f 0b20 	mov.w	fp, #32
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   23758:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   2375a:	6804      	ldr	r4, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   2375c:	fb05 fc07 	mul.w	ip, r5, r7
	p->max_inline_level = -1;
   23760:	72c3      	strb	r3, [r0, #11]
	for (i = 0; i < p->n_levels; i++) {
   23762:	7a83      	ldrb	r3, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   23764:	4464      	add	r4, ip
	for (i = 0; i < p->n_levels; i++) {
   23766:	9301      	str	r3, [sp, #4]
   23768:	9b01      	ldr	r3, [sp, #4]
   2376a:	4293      	cmp	r3, r2
   2376c:	dc08      	bgt.n	23780 <z_sys_mem_pool_base_init+0x3c>
   2376e:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   23770:	4619      	mov	r1, r3
   23772:	428f      	cmp	r7, r1
   23774:	eb05 0c03 	add.w	ip, r5, r3
   23778:	dc21      	bgt.n	237be <z_sys_mem_pool_base_init+0x7a>
}
   2377a:	b003      	add	sp, #12
   2377c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   23780:	fbbc f3f1 	udiv	r3, ip, r1
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   23784:	2b20      	cmp	r3, #32
			bits += (nblocks + 31)/32;
   23786:	bf84      	itt	hi
   23788:	331f      	addhi	r3, #31
   2378a:	fb93 f3fb 	sdivhi	r3, r3, fp
		sys_dlist_init(&p->levels[i].free_list);
   2378e:	fb0a fe02 	mul.w	lr, sl, r2
   23792:	f8d0 800c 	ldr.w	r8, [r0, #12]
		sz = WB_DN(sz / 4);
   23796:	ea4f 0191 	mov.w	r1, r1, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
   2379a:	eb08 060e 	add.w	r6, r8, lr
   2379e:	f106 0904 	add.w	r9, r6, #4
	list->tail = (sys_dnode_t *)list;
   237a2:	e9c6 9901 	strd	r9, r9, [r6, #4]
		sz = WB_DN(sz / 4);
   237a6:	f021 0103 	bic.w	r1, r1, #3
			p->max_inline_level = i;
   237aa:	bf94      	ite	ls
   237ac:	72c2      	strbls	r2, [r0, #11]
			p->levels[i].bits_p = bits;
   237ae:	f848 400e 	strhi.w	r4, [r8, lr]
	for (i = 0; i < p->n_levels; i++) {
   237b2:	f102 0201 	add.w	r2, r2, #1
			bits += (nblocks + 31)/32;
   237b6:	bf88      	it	hi
   237b8:	eb04 0483 	addhi.w	r4, r4, r3, lsl #2
   237bc:	e7d4      	b.n	23768 <z_sys_mem_pool_base_init+0x24>
		sys_dlist_append(&p->levels[0].free_list, block);
   237be:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   237c0:	6806      	ldr	r6, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   237c2:	f102 0e04 	add.w	lr, r2, #4
	return (u8_t *)p->buf + lsz * block;
   237c6:	18f4      	adds	r4, r6, r3
	node->next = list;
   237c8:	f846 e003 	str.w	lr, [r6, r3]
	node->prev = list->tail;
   237cc:	6893      	ldr	r3, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   237ce:	3101      	adds	r1, #1
   237d0:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   237d2:	6893      	ldr	r3, [r2, #8]
   237d4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   237d6:	6094      	str	r4, [r2, #8]
   237d8:	4663      	mov	r3, ip
   237da:	e7ca      	b.n	23772 <z_sys_mem_pool_base_init+0x2e>

000237dc <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
   237dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   237e0:	b089      	sub	sp, #36	; 0x24
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   237e2:	7a84      	ldrb	r4, [r0, #10]
{
   237e4:	af00      	add	r7, sp, #0
   237e6:	e9c7 3202 	strd	r3, r2, [r7, #8]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   237ea:	00a3      	lsls	r3, r4, #2
   237ec:	330a      	adds	r3, #10
   237ee:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   237f2:	ebad 0d03 	sub.w	sp, sp, r3
   237f6:	46ea      	mov	sl, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
   237f8:	4653      	mov	r3, sl
   237fa:	6842      	ldr	r2, [r0, #4]
{
   237fc:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   237fe:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   23802:	2200      	movs	r2, #0
   23804:	4294      	cmp	r4, r2
   23806:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   2380a:	dd09      	ble.n	23820 <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   2380c:	b122      	cbz	r2, 23818 <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   2380e:	6818      	ldr	r0, [r3, #0]
   23810:	0880      	lsrs	r0, r0, #2
   23812:	f020 0003 	bic.w	r0, r0, #3
   23816:	6058      	str	r0, [r3, #4]
		}

		if (lsizes[i] < size) {
   23818:	f853 0f04 	ldr.w	r0, [r3, #4]!
   2381c:	4288      	cmp	r0, r1
   2381e:	d208      	bcs.n	23832 <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
   23820:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   23824:	d107      	bne.n	23836 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   23826:	2300      	movs	r3, #0
   23828:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2382a:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
   2382c:	f06f 000b 	mvn.w	r0, #11
   23830:	e047      	b.n	238c2 <z_sys_mem_pool_block_alloc+0xe6>
	for (i = 0; i < p->n_levels; i++) {
   23832:	3201      	adds	r2, #1
   23834:	e7e6      	b.n	23804 <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   23836:	7c28      	ldrb	r0, [r5, #16]
   23838:	f010 0001 	ands.w	r0, r0, #1
   2383c:	d001      	beq.n	23842 <z_sys_mem_pool_block_alloc+0x66>
   2383e:	f7ff ff71 	bl	23724 <pool_irq_lock.isra.2.part.3>
   23842:	230c      	movs	r3, #12
	block = sys_dlist_get(&p->levels[l].free_list);
   23844:	46c8      	mov	r8, r9
   23846:	fb03 f309 	mul.w	r3, r3, r9
   2384a:	1d1a      	adds	r2, r3, #4
   2384c:	68eb      	ldr	r3, [r5, #12]
	key = pool_irq_lock(p);
   2384e:	6178      	str	r0, [r7, #20]
   23850:	4413      	add	r3, r2
	return list->head == list;
   23852:	681c      	ldr	r4, [r3, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   23854:	42a3      	cmp	r3, r4
   23856:	d070      	beq.n	2393a <z_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
   23858:	e9d4 2300 	ldrd	r2, r3, [r4]
   2385c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2385e:	6822      	ldr	r2, [r4, #0]
		data = block_alloc(p, i, lsizes[i]);
   23860:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
   23864:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   23866:	2300      	movs	r3, #0
	node->prev = NULL;
   23868:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   2386c:	682b      	ldr	r3, [r5, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   2386e:	f107 0b1c 	add.w	fp, r7, #28
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   23872:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   23874:	fb92 f2f1 	sdiv	r2, r2, r1
   23878:	465b      	mov	r3, fp
   2387a:	4641      	mov	r1, r8
   2387c:	4628      	mov	r0, r5
   2387e:	f7ff ff3b 	bl	236f8 <get_bit_ptr>
	*word |= (1<<bit);
   23882:	2201      	movs	r2, #1
   23884:	69f9      	ldr	r1, [r7, #28]
   23886:	fa02 f000 	lsl.w	r0, r2, r0
   2388a:	680b      	ldr	r3, [r1, #0]
   2388c:	eb0a 0688 	add.w	r6, sl, r8, lsl #2
   23890:	4303      	orrs	r3, r0
   23892:	600b      	str	r3, [r1, #0]
   23894:	607a      	str	r2, [r7, #4]
			for (from_l = i; from_l < alloc_l; from_l++) {
   23896:	45c8      	cmp	r8, r9
   23898:	db17      	blt.n	238ca <z_sys_mem_pool_block_alloc+0xee>
	pool_irq_unlock(p, key);
   2389a:	6979      	ldr	r1, [r7, #20]
   2389c:	7c28      	ldrb	r0, [r5, #16]
   2389e:	f7ff ff4a 	bl	23736 <pool_irq_unlock.isra.4>
	*data_p = data;
   238a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   238a4:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   238a6:	2c00      	cmp	r4, #0
   238a8:	d0c0      	beq.n	2382c <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
   238aa:	68fb      	ldr	r3, [r7, #12]
	*block_p = block_num(p, data, lsizes[alloc_l]);

	return 0;
   238ac:	2000      	movs	r0, #0
	*level_p = alloc_l;
   238ae:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   238b2:	682b      	ldr	r3, [r5, #0]
   238b4:	1ae4      	subs	r4, r4, r3
   238b6:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   238ba:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   238be:	68bb      	ldr	r3, [r7, #8]
   238c0:	601c      	str	r4, [r3, #0]
}
   238c2:	3724      	adds	r7, #36	; 0x24
   238c4:	46bd      	mov	sp, r7
   238c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   238ca:	682b      	ldr	r3, [r5, #0]
	bn = block_num(p, block, lsizes[l]);
   238cc:	6832      	ldr	r2, [r6, #0]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   238ce:	1ae3      	subs	r3, r4, r3
   238d0:	fb93 f2f2 	sdiv	r2, r3, r2
	set_alloc_bit(p, l + 1, 4*bn);
   238d4:	f108 0801 	add.w	r8, r8, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   238d8:	465b      	mov	r3, fp
   238da:	0092      	lsls	r2, r2, #2
   238dc:	4641      	mov	r1, r8
   238de:	4628      	mov	r0, r5
   238e0:	f7ff ff0a 	bl	236f8 <get_bit_ptr>
	*word |= (1<<bit);
   238e4:	69fa      	ldr	r2, [r7, #28]
   238e6:	687b      	ldr	r3, [r7, #4]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   238e8:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   238ea:	fa03 f000 	lsl.w	r0, r3, r0
   238ee:	6813      	ldr	r3, [r2, #0]
   238f0:	4303      	orrs	r3, r0
   238f2:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   238f4:	230c      	movs	r3, #12
   238f6:	2203      	movs	r2, #3
   238f8:	fb03 1108 	mla	r1, r3, r8, r1
		int lsz = lsizes[l + 1];
   238fc:	f856 0f04 	ldr.w	r0, [r6, #4]!
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   23900:	f101 0e04 	add.w	lr, r1, #4
   23904:	1823      	adds	r3, r4, r0
   23906:	613a      	str	r2, [r7, #16]
	node->prev = list->tail;
   23908:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   2390a:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   2390e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   23910:	688a      	ldr	r2, [r1, #8]
   23912:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   23914:	693a      	ldr	r2, [r7, #16]
	list->tail = node;
   23916:	608b      	str	r3, [r1, #8]
   23918:	3a01      	subs	r2, #1
   2391a:	4403      	add	r3, r0
   2391c:	613a      	str	r2, [r7, #16]
   2391e:	d1f3      	bne.n	23908 <z_sys_mem_pool_block_alloc+0x12c>
				pool_irq_unlock(p, key);
   23920:	6979      	ldr	r1, [r7, #20]
   23922:	7c28      	ldrb	r0, [r5, #16]
   23924:	f7ff ff07 	bl	23736 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   23928:	7c2b      	ldrb	r3, [r5, #16]
   2392a:	07db      	lsls	r3, r3, #31
   2392c:	d503      	bpl.n	23936 <z_sys_mem_pool_block_alloc+0x15a>
   2392e:	f7ff fef9 	bl	23724 <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   23932:	6178      	str	r0, [r7, #20]
   23934:	e7af      	b.n	23896 <z_sys_mem_pool_block_alloc+0xba>
		return 0;
   23936:	6938      	ldr	r0, [r7, #16]
   23938:	e7fb      	b.n	23932 <z_sys_mem_pool_block_alloc+0x156>
	for (i = alloc_l; i >= 0; i--) {
   2393a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2393e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   23942:	f1a4 030c 	sub.w	r3, r4, #12
   23946:	d184      	bne.n	23852 <z_sys_mem_pool_block_alloc+0x76>
   23948:	2400      	movs	r4, #0
   2394a:	e7a6      	b.n	2389a <z_sys_mem_pool_block_alloc+0xbe>

0002394c <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   2394c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23950:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   23952:	7a83      	ldrb	r3, [r0, #10]
{
   23954:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   23956:	009b      	lsls	r3, r3, #2
   23958:	330a      	adds	r3, #10
   2395a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   2395e:	ebad 0d03 	sub.w	sp, sp, r3
   23962:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   23964:	6843      	ldr	r3, [r0, #4]
{
   23966:	4605      	mov	r5, r0
   23968:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
   2396a:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
   2396c:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
   23970:	4281      	cmp	r1, r0
   23972:	d214      	bcs.n	2399e <z_sys_mem_pool_block_free+0x52>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   23974:	7c28      	ldrb	r0, [r5, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   23976:	460e      	mov	r6, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   23978:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
   2397c:	4690      	mov	r8, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   2397e:	d001      	beq.n	23984 <z_sys_mem_pool_block_free+0x38>
   23980:	f7ff fed0 	bl	23724 <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   23984:	4604      	mov	r4, r0
	while (level >= 0) {
   23986:	2e00      	cmp	r6, #0
   23988:	da11      	bge.n	239ae <z_sys_mem_pool_block_free+0x62>
	return -1;
   2398a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
   2398e:	4621      	mov	r1, r4
   23990:	7c28      	ldrb	r0, [r5, #16]
   23992:	f7ff fed0 	bl	23736 <pool_irq_unlock.isra.4>
}
   23996:	3714      	adds	r7, #20
   23998:	46bd      	mov	sp, r7
   2399a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   2399e:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
   239a0:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   239a2:	089b      	lsrs	r3, r3, #2
   239a4:	f023 0303 	bic.w	r3, r3, #3
   239a8:	f844 3f04 	str.w	r3, [r4, #4]!
   239ac:	e7e0      	b.n	23970 <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   239ae:	f85b 3026 	ldr.w	r3, [fp, r6, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   239b2:	4642      	mov	r2, r8
	return (u8_t *)p->buf + lsz * block;
   239b4:	fb03 fa08 	mul.w	sl, r3, r8
		int i, lsz = lsizes[level];
   239b8:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   239ba:	682b      	ldr	r3, [r5, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   239bc:	4631      	mov	r1, r6
	return (u8_t *)p->buf + lsz * block;
   239be:	eb03 090a 	add.w	r9, r3, sl
   239c2:	603b      	str	r3, [r7, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   239c4:	4628      	mov	r0, r5
   239c6:	f107 030c 	add.w	r3, r7, #12
   239ca:	f7ff fe95 	bl	236f8 <get_bit_ptr>
	*word &= ~(1<<bit);
   239ce:	2301      	movs	r3, #1
   239d0:	68fa      	ldr	r2, [r7, #12]
   239d2:	fa03 f000 	lsl.w	r0, r3, r0
   239d6:	6813      	ldr	r3, [r2, #0]
	node->next = list;
   239d8:	6839      	ldr	r1, [r7, #0]
   239da:	ea23 0300 	bic.w	r3, r3, r0
   239de:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   239e0:	220c      	movs	r2, #12
   239e2:	68eb      	ldr	r3, [r5, #12]
   239e4:	fb02 3306 	mla	r3, r2, r6, r3
   239e8:	1d1a      	adds	r2, r3, #4
   239ea:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
   239ee:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
   239f0:	4621      	mov	r1, r4
   239f2:	f8c9 2004 	str.w	r2, [r9, #4]
	list->tail->next = node;
   239f6:	689a      	ldr	r2, [r3, #8]
   239f8:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
   239fc:	f8c3 9008 	str.w	r9, [r3, #8]
   23a00:	7c28      	ldrb	r0, [r5, #16]
   23a02:	f7ff fe98 	bl	23736 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   23a06:	7c28      	ldrb	r0, [r5, #16]
   23a08:	f010 0001 	ands.w	r0, r0, #1
   23a0c:	d001      	beq.n	23a12 <z_sys_mem_pool_block_free+0xc6>
   23a0e:	f7ff fe89 	bl	23724 <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   23a12:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   23a14:	2e00      	cmp	r6, #0
   23a16:	d0ba      	beq.n	2398e <z_sys_mem_pool_block_free+0x42>
	int bit = get_bit_ptr(p, level, bn, &word);
   23a18:	f107 030c 	add.w	r3, r7, #12
   23a1c:	4642      	mov	r2, r8
   23a1e:	4631      	mov	r1, r6
   23a20:	4628      	mov	r0, r5
   23a22:	f7ff fe69 	bl	236f8 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   23a26:	2304      	movs	r3, #4
   23a28:	fb90 f0f3 	sdiv	r0, r0, r3
   23a2c:	68fb      	ldr	r3, [r7, #12]
   23a2e:	0080      	lsls	r0, r0, #2
   23a30:	681b      	ldr	r3, [r3, #0]
   23a32:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   23a36:	f010 000f 	ands.w	r0, r0, #15
   23a3a:	d1a8      	bne.n	2398e <z_sys_mem_pool_block_free+0x42>
	node->next = NULL;
   23a3c:	4686      	mov	lr, r0
			int b = (bn & ~3) + i;
   23a3e:	f028 0a03 	bic.w	sl, r8, #3
	return (u8_t *)p->buf + lsz * block;
   23a42:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
   23a44:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
   23a48:	4353      	muls	r3, r2
   23a4a:	682a      	ldr	r2, [r5, #0]
		for (i = 0; i < 4; i++) {
   23a4c:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
   23a4e:	eb02 0c03 	add.w	ip, r2, r3
	node->prev->next = node->next;
   23a52:	58d1      	ldr	r1, [r2, r3]
   23a54:	f8dc 9004 	ldr.w	r9, [ip, #4]
		for (i = 0; i < 4; i++) {
   23a58:	2804      	cmp	r0, #4
   23a5a:	f8c9 1000 	str.w	r1, [r9]
	node->next->prev = node->prev;
   23a5e:	58d1      	ldr	r1, [r2, r3]
   23a60:	f8c1 9004 	str.w	r9, [r1, #4]
	node->next = NULL;
   23a64:	f842 e003 	str.w	lr, [r2, r3]
	node->prev = NULL;
   23a68:	f8cc e004 	str.w	lr, [ip, #4]
   23a6c:	d1e9      	bne.n	23a42 <z_sys_mem_pool_block_free+0xf6>
		level = level - 1;
   23a6e:	3e01      	subs	r6, #1
		bn = bn / 4;
   23a70:	fb98 f8f0 	sdiv	r8, r8, r0
   23a74:	e787      	b.n	23986 <z_sys_mem_pool_block_free+0x3a>

00023a76 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   23a76:	4604      	mov	r4, r0
   23a78:	b508      	push	{r3, lr}
   23a7a:	4608      	mov	r0, r1
   23a7c:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   23a7e:	461a      	mov	r2, r3
   23a80:	47a0      	blx	r4
	return z_impl_k_current_get();
   23a82:	f7fe ffcd 	bl	22a20 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   23a86:	f7ec fee7 	bl	10858 <z_impl_k_thread_abort>

00023a8a <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   23a8a:	b510      	push	{r4, lr}
   23a8c:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   23a8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23a92:	4620      	mov	r0, r4
   23a94:	f002 f880 	bl	25b98 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   23a98:	4603      	mov	r3, r0
   23a9a:	2800      	cmp	r0, #0
   23a9c:	d0f7      	beq.n	23a8e <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   23a9e:	6842      	ldr	r2, [r0, #4]
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23aa0:	3308      	adds	r3, #8
   23aa2:	e8d3 1fef 	ldaex	r1, [r3]
   23aa6:	f021 0c01 	bic.w	ip, r1, #1
   23aaa:	e8c3 cfee 	stlex	lr, ip, [r3]
   23aae:	f1be 0f00 	cmp.w	lr, #0
   23ab2:	d1f6      	bne.n	23aa2 <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   23ab4:	07cb      	lsls	r3, r1, #31
   23ab6:	d500      	bpl.n	23aba <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   23ab8:	4790      	blx	r2
	z_impl_k_yield();
   23aba:	f7fe ff3b 	bl	22934 <z_impl_k_yield>
   23abe:	e7e6      	b.n	23a8e <z_work_q_main+0x4>

00023ac0 <arch_printk_char_out>:
}
   23ac0:	2000      	movs	r0, #0
   23ac2:	4770      	bx	lr

00023ac4 <print_err>:
{
   23ac4:	b570      	push	{r4, r5, r6, lr}
   23ac6:	460d      	mov	r5, r1
   23ac8:	4604      	mov	r4, r0
	out('E', ctx);
   23aca:	2045      	movs	r0, #69	; 0x45
   23acc:	47a0      	blx	r4
	out('R', ctx);
   23ace:	4629      	mov	r1, r5
   23ad0:	2052      	movs	r0, #82	; 0x52
   23ad2:	47a0      	blx	r4
	out('R', ctx);
   23ad4:	4629      	mov	r1, r5
   23ad6:	4623      	mov	r3, r4
}
   23ad8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   23adc:	2052      	movs	r0, #82	; 0x52
   23ade:	4718      	bx	r3

00023ae0 <z_vprintk>:
{
   23ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   23ae4:	f04f 0800 	mov.w	r8, #0
{
   23ae8:	4606      	mov	r6, r0
   23aea:	460f      	mov	r7, r1
   23aec:	461c      	mov	r4, r3
	int min_width = -1;
   23aee:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   23af2:	46c1      	mov	r9, r8
{
   23af4:	b08b      	sub	sp, #44	; 0x2c
   23af6:	f102 3bff 	add.w	fp, r2, #4294967295	; 0xffffffff
			might_format = 0;
   23afa:	2500      	movs	r5, #0
					break;
   23afc:	e005      	b.n	23b0a <z_vprintk+0x2a>
		if (!might_format) {
   23afe:	b95d      	cbnz	r5, 23b18 <z_vprintk+0x38>
			if (*fmt != '%') {
   23b00:	2825      	cmp	r0, #37	; 0x25
   23b02:	f000 8156 	beq.w	23db2 <z_vprintk+0x2d2>
				out((int)*fmt, ctx);
   23b06:	4639      	mov	r1, r7
   23b08:	47b0      	blx	r6
	while (*fmt) {
   23b0a:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
   23b0e:	2800      	cmp	r0, #0
   23b10:	d1f5      	bne.n	23afe <z_vprintk+0x1e>
}
   23b12:	b00b      	add	sp, #44	; 0x2c
   23b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   23b18:	2864      	cmp	r0, #100	; 0x64
   23b1a:	d06d      	beq.n	23bf8 <z_vprintk+0x118>
   23b1c:	d81a      	bhi.n	23b54 <z_vprintk+0x74>
   23b1e:	2839      	cmp	r0, #57	; 0x39
   23b20:	d80a      	bhi.n	23b38 <z_vprintk+0x58>
   23b22:	2831      	cmp	r0, #49	; 0x31
   23b24:	d25f      	bcs.n	23be6 <z_vprintk+0x106>
   23b26:	282d      	cmp	r0, #45	; 0x2d
   23b28:	f000 8149 	beq.w	23dbe <z_vprintk+0x2de>
   23b2c:	2830      	cmp	r0, #48	; 0x30
   23b2e:	d04b      	beq.n	23bc8 <z_vprintk+0xe8>
   23b30:	2825      	cmp	r0, #37	; 0x25
   23b32:	d107      	bne.n	23b44 <z_vprintk+0x64>
				out((int)'%', ctx);
   23b34:	4639      	mov	r1, r7
   23b36:	e00b      	b.n	23b50 <z_vprintk+0x70>
			switch (*fmt) {
   23b38:	2858      	cmp	r0, #88	; 0x58
   23b3a:	f000 80bc 	beq.w	23cb6 <z_vprintk+0x1d6>
   23b3e:	2863      	cmp	r0, #99	; 0x63
   23b40:	f000 8131 	beq.w	23da6 <z_vprintk+0x2c6>
					out((int)'%', ctx);
   23b44:	4639      	mov	r1, r7
   23b46:	2025      	movs	r0, #37	; 0x25
   23b48:	47b0      	blx	r6
					out((int)*fmt, ctx);
   23b4a:	4639      	mov	r1, r7
   23b4c:	f89b 0000 	ldrb.w	r0, [fp]
   23b50:	47b0      	blx	r6
   23b52:	e7d2      	b.n	23afa <z_vprintk+0x1a>
			switch (*fmt) {
   23b54:	2870      	cmp	r0, #112	; 0x70
   23b56:	f000 80a4 	beq.w	23ca2 <z_vprintk+0x1c2>
   23b5a:	d811      	bhi.n	23b80 <z_vprintk+0xa0>
   23b5c:	2869      	cmp	r0, #105	; 0x69
   23b5e:	d04b      	beq.n	23bf8 <z_vprintk+0x118>
   23b60:	286c      	cmp	r0, #108	; 0x6c
   23b62:	d105      	bne.n	23b70 <z_vprintk+0x90>
				} else if (*fmt == 'l' && length_mod == 'l') {
   23b64:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   23b68:	d129      	bne.n	23bbe <z_vprintk+0xde>
					length_mod = 'L';
   23b6a:	f04f 084c 	mov.w	r8, #76	; 0x4c
   23b6e:	e7cc      	b.n	23b0a <z_vprintk+0x2a>
			switch (*fmt) {
   23b70:	2868      	cmp	r0, #104	; 0x68
   23b72:	d1e7      	bne.n	23b44 <z_vprintk+0x64>
				if (*fmt == 'h' && length_mod == 'h') {
   23b74:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   23b78:	d121      	bne.n	23bbe <z_vprintk+0xde>
					length_mod = 'H';
   23b7a:	f04f 0848 	mov.w	r8, #72	; 0x48
   23b7e:	e7c4      	b.n	23b0a <z_vprintk+0x2a>
			switch (*fmt) {
   23b80:	2875      	cmp	r0, #117	; 0x75
   23b82:	d070      	beq.n	23c66 <z_vprintk+0x186>
   23b84:	d817      	bhi.n	23bb6 <z_vprintk+0xd6>
   23b86:	2873      	cmp	r0, #115	; 0x73
   23b88:	d1dc      	bne.n	23b44 <z_vprintk+0x64>
				char *s = va_arg(ap, char *);
   23b8a:	6825      	ldr	r5, [r4, #0]
   23b8c:	1d23      	adds	r3, r4, #4
   23b8e:	9302      	str	r3, [sp, #8]
   23b90:	462b      	mov	r3, r5
				while (*s) {
   23b92:	461c      	mov	r4, r3
   23b94:	f814 0b01 	ldrb.w	r0, [r4], #1
   23b98:	2800      	cmp	r0, #0
   23b9a:	f040 80fb 	bne.w	23d94 <z_vprintk+0x2b4>
				if (padding == PAD_SPACE_AFTER) {
   23b9e:	f1b9 0f03 	cmp.w	r9, #3
   23ba2:	f040 8112 	bne.w	23dca <z_vprintk+0x2ea>
					int remaining = min_width - (s - start);
   23ba6:	1b5c      	subs	r4, r3, r5
   23ba8:	ebaa 0404 	sub.w	r4, sl, r4
					while (remaining-- > 0) {
   23bac:	2c00      	cmp	r4, #0
   23bae:	f300 80f5 	bgt.w	23d9c <z_vprintk+0x2bc>
				char *s = va_arg(ap, char *);
   23bb2:	9c02      	ldr	r4, [sp, #8]
   23bb4:	e7a1      	b.n	23afa <z_vprintk+0x1a>
			switch (*fmt) {
   23bb6:	2878      	cmp	r0, #120	; 0x78
   23bb8:	d07d      	beq.n	23cb6 <z_vprintk+0x1d6>
   23bba:	287a      	cmp	r0, #122	; 0x7a
   23bbc:	d1c2      	bne.n	23b44 <z_vprintk+0x64>
				} else if (length_mod == 0) {
   23bbe:	f1b8 0f00 	cmp.w	r8, #0
   23bc2:	d1bf      	bne.n	23b44 <z_vprintk+0x64>
   23bc4:	4680      	mov	r8, r0
   23bc6:	e7a0      	b.n	23b0a <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
   23bc8:	f1ba 0f00 	cmp.w	sl, #0
   23bcc:	da0e      	bge.n	23bec <z_vprintk+0x10c>
   23bce:	f1b9 0f00 	cmp.w	r9, #0
   23bd2:	f000 80f7 	beq.w	23dc4 <z_vprintk+0x2e4>
					min_width = *fmt - '0';
   23bd6:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   23bda:	f1b9 0f00 	cmp.w	r9, #0
   23bde:	bf08      	it	eq
   23be0:	f04f 0902 	moveq.w	r9, #2
   23be4:	e791      	b.n	23b0a <z_vprintk+0x2a>
				if (min_width < 0) {
   23be6:	f1ba 0f00 	cmp.w	sl, #0
   23bea:	dbf4      	blt.n	23bd6 <z_vprintk+0xf6>
					min_width = 10 * min_width + *fmt - '0';
   23bec:	230a      	movs	r3, #10
   23bee:	fb03 0a0a 	mla	sl, r3, sl, r0
   23bf2:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   23bf6:	e7f0      	b.n	23bda <z_vprintk+0xfa>
				if (length_mod == 'z') {
   23bf8:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   23bfc:	d102      	bne.n	23c04 <z_vprintk+0x124>
					d = va_arg(ap, int);
   23bfe:	6825      	ldr	r5, [r4, #0]
   23c00:	3404      	adds	r4, #4
   23c02:	e01f      	b.n	23c44 <z_vprintk+0x164>
				} else if (length_mod == 'l') {
   23c04:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   23c08:	d0f9      	beq.n	23bfe <z_vprintk+0x11e>
				} else if (length_mod == 'L') {
   23c0a:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   23c0e:	d1f6      	bne.n	23bfe <z_vprintk+0x11e>
					long long lld = va_arg(ap, long long);
   23c10:	3407      	adds	r4, #7
   23c12:	f024 0307 	bic.w	r3, r4, #7
   23c16:	f103 0408 	add.w	r4, r3, #8
   23c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (lld > __LONG_MAX__ ||
   23c1e:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
					long long lld = va_arg(ap, long long);
   23c22:	e9cd 2302 	strd	r2, r3, [sp, #8]
					if (lld > __LONG_MAX__ ||
   23c26:	f143 0100 	adc.w	r1, r3, #0
   23c2a:	2300      	movs	r3, #0
   23c2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23c30:	428b      	cmp	r3, r1
   23c32:	bf08      	it	eq
   23c34:	4282      	cmpeq	r2, r0
   23c36:	d204      	bcs.n	23c42 <z_vprintk+0x162>
						print_err(out, ctx);
   23c38:	4639      	mov	r1, r7
   23c3a:	4630      	mov	r0, r6
   23c3c:	f7ff ff42 	bl	23ac4 <print_err>
   23c40:	e75b      	b.n	23afa <z_vprintk+0x1a>
					d = lld;
   23c42:	9d02      	ldr	r5, [sp, #8]
				if (d < 0) {
   23c44:	2d00      	cmp	r5, #0
   23c46:	da05      	bge.n	23c54 <z_vprintk+0x174>
					out((int)'-', ctx);
   23c48:	4639      	mov	r1, r7
   23c4a:	202d      	movs	r0, #45	; 0x2d
   23c4c:	47b0      	blx	r6
					d = -d;
   23c4e:	426d      	negs	r5, r5
					min_width--;
   23c50:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   23c54:	464b      	mov	r3, r9
   23c56:	462a      	mov	r2, r5
   23c58:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   23c5c:	4639      	mov	r1, r7
   23c5e:	4630      	mov	r0, r6
   23c60:	f7eb fa1a 	bl	f098 <_printk_dec_ulong>
   23c64:	e749      	b.n	23afa <z_vprintk+0x1a>
				if (length_mod == 'z') {
   23c66:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   23c6a:	d102      	bne.n	23c72 <z_vprintk+0x192>
					u = va_arg(ap, unsigned int);
   23c6c:	6822      	ldr	r2, [r4, #0]
   23c6e:	3404      	adds	r4, #4
   23c70:	e013      	b.n	23c9a <z_vprintk+0x1ba>
				} else if (length_mod == 'l') {
   23c72:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   23c76:	d0f9      	beq.n	23c6c <z_vprintk+0x18c>
				} else if (length_mod == 'L') {
   23c78:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   23c7c:	d1f6      	bne.n	23c6c <z_vprintk+0x18c>
					if (llu > ~0UL) {
   23c7e:	2100      	movs	r1, #0
   23c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
   23c84:	3407      	adds	r4, #7
   23c86:	f024 0307 	bic.w	r3, r4, #7
   23c8a:	f103 0408 	add.w	r4, r3, #8
   23c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (llu > ~0UL) {
   23c92:	4299      	cmp	r1, r3
   23c94:	bf08      	it	eq
   23c96:	4290      	cmpeq	r0, r2
   23c98:	d3ce      	bcc.n	23c38 <z_vprintk+0x158>
				_printk_dec_ulong(out, ctx, u, padding,
   23c9a:	f8cd a000 	str.w	sl, [sp]
   23c9e:	464b      	mov	r3, r9
   23ca0:	e7dc      	b.n	23c5c <z_vprintk+0x17c>
				out('0', ctx);
   23ca2:	4639      	mov	r1, r7
   23ca4:	2030      	movs	r0, #48	; 0x30
   23ca6:	47b0      	blx	r6
				out('x', ctx);
   23ca8:	4639      	mov	r1, r7
   23caa:	2078      	movs	r0, #120	; 0x78
   23cac:	47b0      	blx	r6
					min_width = 8;
   23cae:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   23cb2:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   23cb6:	f89b 3000 	ldrb.w	r3, [fp]
   23cba:	2b70      	cmp	r3, #112	; 0x70
   23cbc:	d105      	bne.n	23cca <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
   23cbe:	6823      	ldr	r3, [r4, #0]
   23cc0:	3404      	adds	r4, #4
   23cc2:	9306      	str	r3, [sp, #24]
   23cc4:	2300      	movs	r3, #0
   23cc6:	9302      	str	r3, [sp, #8]
   23cc8:	e00e      	b.n	23ce8 <z_vprintk+0x208>
				} else if (length_mod == 'l') {
   23cca:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   23cce:	d0f6      	beq.n	23cbe <z_vprintk+0x1de>
				} else if (length_mod == 'L') {
   23cd0:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   23cd4:	d1f3      	bne.n	23cbe <z_vprintk+0x1de>
					x = va_arg(ap, unsigned long long);
   23cd6:	3407      	adds	r4, #7
   23cd8:	f024 0307 	bic.w	r3, r4, #7
   23cdc:	681a      	ldr	r2, [r3, #0]
   23cde:	f103 0408 	add.w	r4, r3, #8
   23ce2:	685b      	ldr	r3, [r3, #4]
   23ce4:	9206      	str	r2, [sp, #24]
   23ce6:	9302      	str	r3, [sp, #8]
	int digits = 0;
   23ce8:	2300      	movs	r3, #0
	int remaining = 16; /* 16 digits max */
   23cea:	2210      	movs	r2, #16
	int digits = 0;
   23cec:	9305      	str	r3, [sp, #20]
	int found_largest_digit = 0;
   23cee:	9307      	str	r3, [sp, #28]
	int shift = sizeof(num) * 8;
   23cf0:	2340      	movs	r3, #64	; 0x40
		shift -= 4;
   23cf2:	3b04      	subs	r3, #4
		nibble = (num >> shift) & 0xf;
   23cf4:	9902      	ldr	r1, [sp, #8]
   23cf6:	9806      	ldr	r0, [sp, #24]
   23cf8:	f1c3 0c20 	rsb	ip, r3, #32
   23cfc:	f1a3 0e20 	sub.w	lr, r3, #32
   23d00:	40d8      	lsrs	r0, r3
   23d02:	fa01 fc0c 	lsl.w	ip, r1, ip
   23d06:	ea40 000c 	orr.w	r0, r0, ip
   23d0a:	fa21 fe0e 	lsr.w	lr, r1, lr
   23d0e:	ea40 000e 	orr.w	r0, r0, lr
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   23d12:	f010 000f 	ands.w	r0, r0, #15
   23d16:	d107      	bne.n	23d28 <z_vprintk+0x248>
   23d18:	9907      	ldr	r1, [sp, #28]
   23d1a:	b901      	cbnz	r1, 23d1e <z_vprintk+0x23e>
   23d1c:	bb2b      	cbnz	r3, 23d6a <z_vprintk+0x28a>
			nibble += nibble > 9 ? 87 : 48;
   23d1e:	f04f 0c30 	mov.w	ip, #48	; 0x30
   23d22:	e007      	b.n	23d34 <z_vprintk+0x254>
			found_largest_digit = 1;
   23d24:	9507      	str	r5, [sp, #28]
   23d26:	e7e4      	b.n	23cf2 <z_vprintk+0x212>
			nibble += nibble > 9 ? 87 : 48;
   23d28:	2809      	cmp	r0, #9
   23d2a:	bf8c      	ite	hi
   23d2c:	f04f 0c57 	movhi.w	ip, #87	; 0x57
   23d30:	f04f 0c30 	movls.w	ip, #48	; 0x30
			out((int)nibble, ctx);
   23d34:	4639      	mov	r1, r7
   23d36:	4460      	add	r0, ip
   23d38:	e9cd 3207 	strd	r3, r2, [sp, #28]
   23d3c:	47b0      	blx	r6
			digits++;
   23d3e:	9b05      	ldr	r3, [sp, #20]
   23d40:	3301      	adds	r3, #1
   23d42:	9305      	str	r3, [sp, #20]
	while (shift >= 4) {
   23d44:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   23d48:	2b00      	cmp	r3, #0
   23d4a:	d1eb      	bne.n	23d24 <z_vprintk+0x244>
	if (padding == PAD_SPACE_AFTER) {
   23d4c:	f1b9 0f03 	cmp.w	r9, #3
   23d50:	f47f aed3 	bne.w	23afa <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
   23d54:	9b05      	ldr	r3, [sp, #20]
   23d56:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   23d5a:	2d00      	cmp	r5, #0
   23d5c:	f77f aecd 	ble.w	23afa <z_vprintk+0x1a>
			out(' ', ctx);
   23d60:	4639      	mov	r1, r7
   23d62:	2020      	movs	r0, #32
   23d64:	47b0      	blx	r6
   23d66:	3d01      	subs	r5, #1
   23d68:	e7f7      	b.n	23d5a <z_vprintk+0x27a>
		if (remaining-- <= min_width) {
   23d6a:	1e51      	subs	r1, r2, #1
   23d6c:	4592      	cmp	sl, r2
   23d6e:	9108      	str	r1, [sp, #32]
   23d70:	db07      	blt.n	23d82 <z_vprintk+0x2a2>
			if (padding == PAD_ZERO_BEFORE) {
   23d72:	f1b9 0f01 	cmp.w	r9, #1
   23d76:	d106      	bne.n	23d86 <z_vprintk+0x2a6>
				out('0', ctx);
   23d78:	4639      	mov	r1, r7
   23d7a:	2030      	movs	r0, #48	; 0x30
   23d7c:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   23d7e:	47b0      	blx	r6
   23d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
					x = va_arg(ap, unsigned int);
   23d82:	9a08      	ldr	r2, [sp, #32]
   23d84:	e7b5      	b.n	23cf2 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
   23d86:	f1b9 0f02 	cmp.w	r9, #2
   23d8a:	d1fa      	bne.n	23d82 <z_vprintk+0x2a2>
   23d8c:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   23d8e:	4639      	mov	r1, r7
   23d90:	2020      	movs	r0, #32
   23d92:	e7f4      	b.n	23d7e <z_vprintk+0x29e>
					out((int)(*s++), ctx);
   23d94:	4639      	mov	r1, r7
   23d96:	47b0      	blx	r6
   23d98:	4623      	mov	r3, r4
   23d9a:	e6fa      	b.n	23b92 <z_vprintk+0xb2>
						out(' ', ctx);
   23d9c:	4639      	mov	r1, r7
   23d9e:	2020      	movs	r0, #32
   23da0:	47b0      	blx	r6
   23da2:	3c01      	subs	r4, #1
   23da4:	e702      	b.n	23bac <z_vprintk+0xcc>
				out(c, ctx);
   23da6:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
   23da8:	1d25      	adds	r5, r4, #4
				out(c, ctx);
   23daa:	4639      	mov	r1, r7
   23dac:	47b0      	blx	r6
				int c = va_arg(ap, int);
   23dae:	462c      	mov	r4, r5
   23db0:	e6a3      	b.n	23afa <z_vprintk+0x1a>
				length_mod = 0;
   23db2:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   23db4:	46a9      	mov	r9, r5
				min_width = -1;
   23db6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
   23dba:	2501      	movs	r5, #1
   23dbc:	e6a5      	b.n	23b0a <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
   23dbe:	f04f 0903 	mov.w	r9, #3
   23dc2:	e6a2      	b.n	23b0a <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
   23dc4:	f04f 0901 	mov.w	r9, #1
   23dc8:	e69f      	b.n	23b0a <z_vprintk+0x2a>
				char *s = va_arg(ap, char *);
   23dca:	9c02      	ldr	r4, [sp, #8]
			might_format = 0;
   23dcc:	4605      	mov	r5, r0
   23dce:	e69c      	b.n	23b0a <z_vprintk+0x2a>

00023dd0 <printk>:
{
   23dd0:	b40f      	push	{r0, r1, r2, r3}
   23dd2:	b507      	push	{r0, r1, r2, lr}
   23dd4:	a904      	add	r1, sp, #16
   23dd6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   23dda:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   23ddc:	f7eb f9ae 	bl	f13c <vprintk>
}
   23de0:	b003      	add	sp, #12
   23de2:	f85d eb04 	ldr.w	lr, [sp], #4
   23de6:	b004      	add	sp, #16
   23de8:	4770      	bx	lr

00023dea <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_SLM_CR_LF_TERMINATION, 1);
GEN_ABSOLUTE_SYM(CONFIG_SLM_AT_HOST_TERMINATION, 3);
GEN_ABSOLUTE_SYM(CONFIG_SLM_LOG_LEVEL_INF, 1);
GEN_ABSOLUTE_SYM(CONFIG_SLM_LOG_LEVEL, 3);

GEN_ABS_SYM_END
   23dea:	4770      	bx	lr

00023dec <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   23dec:	f7fd be1e 	b.w	21a2c <SystemInit>

00023df0 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   23df0:	2300      	movs	r3, #0
	list->head = NULL;
   23df2:	e9c0 3300 	strd	r3, r3, [r0]
}
   23df6:	4770      	bx	lr

00023df8 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   23df8:	6803      	ldr	r3, [r0, #0]
   23dfa:	b923      	cbnz	r3, 23e06 <log_list_add_tail+0xe>
		list->head = msg;
   23dfc:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   23dfe:	2300      	movs	r3, #0
	list->tail = msg;
   23e00:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   23e02:	600b      	str	r3, [r1, #0]
}
   23e04:	4770      	bx	lr
		list->tail->next = msg;
   23e06:	6843      	ldr	r3, [r0, #4]
   23e08:	6019      	str	r1, [r3, #0]
   23e0a:	e7f8      	b.n	23dfe <log_list_add_tail+0x6>

00023e0c <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   23e0c:	6800      	ldr	r0, [r0, #0]
   23e0e:	4770      	bx	lr

00023e10 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   23e10:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   23e12:	b10b      	cbz	r3, 23e18 <log_list_head_get+0x8>
		list->head = list->head->next;
   23e14:	681a      	ldr	r2, [r3, #0]
   23e16:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   23e18:	4618      	mov	r0, r3
   23e1a:	4770      	bx	lr

00023e1c <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   23e1c:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   23e1e:	f7eb fc53 	bl	f6c8 <log_msg_chunk_alloc>

	if (msg != NULL) {
   23e22:	b118      	cbz	r0, 23e2c <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   23e24:	2301      	movs	r3, #1
   23e26:	6043      	str	r3, [r0, #4]
   23e28:	2300      	movs	r3, #0
   23e2a:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.raw = 0U;
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   23e2c:	bd08      	pop	{r3, pc}

00023e2e <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   23e2e:	f7eb bfdb 	b.w	fde8 <z_timer_cycle_get_32>

00023e32 <dummy_timestamp>:
   23e32:	2000      	movs	r0, #0
   23e34:	4770      	bx	lr

00023e36 <log_0>:
{
   23e36:	b538      	push	{r3, r4, r5, lr}
   23e38:	4605      	mov	r5, r0
   23e3a:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   23e3c:	f7ff ffee 	bl	23e1c <z_log_msg_std_alloc>

	if (msg != NULL) {
   23e40:	b128      	cbz	r0, 23e4e <log_0+0x18>
		msg->str = str;
   23e42:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   23e44:	4621      	mov	r1, r4
}
   23e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   23e4a:	f7eb bbab 	b.w	f5a4 <msg_finalize>
}
   23e4e:	bd38      	pop	{r3, r4, r5, pc}

00023e50 <log_1>:
{
   23e50:	b570      	push	{r4, r5, r6, lr}
   23e52:	4604      	mov	r4, r0
   23e54:	460e      	mov	r6, r1
   23e56:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   23e58:	f7ff ffe0 	bl	23e1c <z_log_msg_std_alloc>

	if (msg != NULL) {
   23e5c:	b158      	cbz	r0, 23e76 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   23e5e:	2201      	movs	r2, #1
		msg->str = str;
   23e60:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   23e62:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
   23e64:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   23e66:	f362 1407 	bfi	r4, r2, #4, #4
   23e6a:	7244      	strb	r4, [r0, #9]
		msg_finalize(msg, src_level);
   23e6c:	4629      	mov	r1, r5
}
   23e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   23e72:	f7eb bb97 	b.w	f5a4 <msg_finalize>
}
   23e76:	bd70      	pop	{r4, r5, r6, pc}

00023e78 <log_2>:
{
   23e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23e7c:	4605      	mov	r5, r0
   23e7e:	4688      	mov	r8, r1
   23e80:	4617      	mov	r7, r2
   23e82:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   23e84:	f7ff ffca 	bl	23e1c <z_log_msg_std_alloc>

	if (msg != NULL) {
   23e88:	b160      	cbz	r0, 23ea4 <log_2+0x2c>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   23e8a:	2302      	movs	r3, #2
		msg->str = str;
   23e8c:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   23e8e:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   23e90:	e9c0 8705 	strd	r8, r7, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   23e94:	f363 1507 	bfi	r5, r3, #4, #4
   23e98:	7245      	strb	r5, [r0, #9]
		msg_finalize(msg, src_level);
   23e9a:	4631      	mov	r1, r6
}
   23e9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   23ea0:	f7eb bb80 	b.w	f5a4 <msg_finalize>
}
   23ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023ea8 <log_3>:
{
   23ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23eac:	4605      	mov	r5, r0
   23eae:	4689      	mov	r9, r1
   23eb0:	4690      	mov	r8, r2
   23eb2:	461f      	mov	r7, r3
   23eb4:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   23eb8:	f7ff ffb0 	bl	23e1c <z_log_msg_std_alloc>

	if (msg != NULL) {
   23ebc:	b168      	cbz	r0, 23eda <log_3+0x32>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   23ebe:	2303      	movs	r3, #3
		msg->str = str;
   23ec0:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   23ec2:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   23ec4:	e9c0 9805 	strd	r9, r8, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   23ec8:	f363 1507 	bfi	r5, r3, #4, #4
   23ecc:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[2] = arg3;
   23ece:	61c7      	str	r7, [r0, #28]
		msg_finalize(msg, src_level);
   23ed0:	4631      	mov	r1, r6
}
   23ed2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   23ed6:	f7eb bb65 	b.w	f5a4 <msg_finalize>
}
   23eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00023ede <log_n>:
{
   23ede:	b510      	push	{r4, lr}
   23ee0:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   23ee2:	f000 f893 	bl	2400c <log_msg_create_n>
		if (msg == NULL) {
   23ee6:	b120      	cbz	r0, 23ef2 <log_n+0x14>
		msg_finalize(msg, src_level);
   23ee8:	4621      	mov	r1, r4
}
   23eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   23eee:	f7eb bb59 	b.w	f5a4 <msg_finalize>
}
   23ef2:	bd10      	pop	{r4, pc}

00023ef4 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   23ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23ef8:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
   23efa:	8903      	ldrh	r3, [r0, #8]
{
   23efc:	460e      	mov	r6, r1
	u32_t available_len = msg->hdr.params.hexdump.length;
   23efe:	089b      	lsrs	r3, r3, #2
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
   23f00:	42a3      	cmp	r3, r4
{
   23f02:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   23f06:	d803      	bhi.n	23f10 <log_msg_hexdump_data_op+0x1c>
		*length = 0;
   23f08:	2300      	movs	r3, #0
   23f0a:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   23f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   23f10:	6811      	ldr	r1, [r2, #0]
   23f12:	4421      	add	r1, r4
   23f14:	4299      	cmp	r1, r3
		*length = available_len - offset;
   23f16:	bf84      	itt	hi
   23f18:	1b19      	subhi	r1, r3, r4
   23f1a:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   23f1c:	2b0c      	cmp	r3, #12
	req_len = *length;
   23f1e:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   23f22:	d928      	bls.n	23f76 <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
   23f24:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   23f26:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   23f2a:	d82b      	bhi.n	23f84 <log_msg_hexdump_data_op+0x90>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   23f2c:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   23f2e:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   23f30:	454b      	cmp	r3, r9
   23f32:	bf28      	it	cs
   23f34:	464b      	movcs	r3, r9
   23f36:	4420      	add	r0, r4
   23f38:	461d      	mov	r5, r3
			(void)memcpy(&head_data[offset], data, cpy_len);
   23f3a:	461a      	mov	r2, r3
		if (put_op) {
   23f3c:	b1ff      	cbz	r7, 23f7e <log_msg_hexdump_data_op+0x8a>
			(void)memcpy(&head_data[offset], data, cpy_len);
   23f3e:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   23f40:	f000 fcbe 	bl	248c0 <memcpy>
		req_len -= cpy_len;
   23f44:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   23f48:	442e      	add	r6, r5
	while (req_len > 0) {
   23f4a:	f1b9 0f00 	cmp.w	r9, #0
   23f4e:	d0dd      	beq.n	23f0c <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   23f50:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   23f54:	454d      	cmp	r5, r9
   23f56:	bf28      	it	cs
   23f58:	464d      	movcs	r5, r9
   23f5a:	1d20      	adds	r0, r4, #4
   23f5c:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
   23f5e:	462a      	mov	r2, r5
		if (put_op) {
   23f60:	b1bf      	cbz	r7, 23f92 <log_msg_hexdump_data_op+0x9e>
			(void)memcpy(&cont->payload.bytes[offset],
   23f62:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   23f64:	f000 fcac 	bl	248c0 <memcpy>
		req_len -= cpy_len;
   23f68:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   23f6c:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   23f70:	442e      	add	r6, r5
		offset = 0;
   23f72:	2400      	movs	r4, #0
   23f74:	e7e9      	b.n	23f4a <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
   23f76:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   23f78:	f04f 0800 	mov.w	r8, #0
   23f7c:	e7d8      	b.n	23f30 <log_msg_hexdump_data_op+0x3c>
			(void)memcpy(data, &head_data[offset], cpy_len);
   23f7e:	4601      	mov	r1, r0
   23f80:	4630      	mov	r0, r6
   23f82:	e7dd      	b.n	23f40 <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
   23f84:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   23f86:	2c1b      	cmp	r4, #27
   23f88:	d9df      	bls.n	23f4a <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
   23f8a:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   23f8e:	3c1c      	subs	r4, #28
   23f90:	e7f9      	b.n	23f86 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(data, &cont->payload.bytes[offset],
   23f92:	4601      	mov	r1, r0
   23f94:	4630      	mov	r0, r6
   23f96:	e7e5      	b.n	23f64 <log_msg_hexdump_data_op+0x70>

00023f98 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   23f98:	3004      	adds	r0, #4
   23f9a:	e8d0 3fef 	ldaex	r3, [r0]
   23f9e:	3301      	adds	r3, #1
   23fa0:	e8c0 3fe2 	stlex	r2, r3, [r0]
   23fa4:	2a00      	cmp	r2, #0
   23fa6:	d1f8      	bne.n	23f9a <log_msg_get+0x2>
}
   23fa8:	4770      	bx	lr

00023faa <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   23faa:	7a40      	ldrb	r0, [r0, #9]
}
   23fac:	0900      	lsrs	r0, r0, #4
   23fae:	4770      	bx	lr

00023fb0 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   23fb0:	7a43      	ldrb	r3, [r0, #9]
   23fb2:	091b      	lsrs	r3, r3, #4
   23fb4:	428b      	cmp	r3, r1
   23fb6:	d916      	bls.n	23fe6 <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   23fb8:	2b03      	cmp	r3, #3
   23fba:	d803      	bhi.n	23fc4 <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
   23fbc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   23fc0:	6948      	ldr	r0, [r1, #20]
   23fc2:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   23fc4:	2901      	cmp	r1, #1
   23fc6:	d803      	bhi.n	23fd0 <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
   23fc8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   23fcc:	6988      	ldr	r0, [r1, #24]
   23fce:	4770      	bx	lr
	cont = msg->payload.ext.next;
   23fd0:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   23fd2:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   23fd4:	2906      	cmp	r1, #6
   23fd6:	d803      	bhi.n	23fe0 <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
   23fd8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   23fdc:	6848      	ldr	r0, [r1, #4]
   23fde:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
   23fe0:	3907      	subs	r1, #7
		cont = cont->next;
   23fe2:	681b      	ldr	r3, [r3, #0]
   23fe4:	e7f6      	b.n	23fd4 <log_msg_arg_get+0x24>
		return 0;
   23fe6:	2000      	movs	r0, #0
}
   23fe8:	4770      	bx	lr

00023fea <log_msg_put>:
{
   23fea:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   23fec:	1d02      	adds	r2, r0, #4
   23fee:	e8d2 1fef 	ldaex	r1, [r2]
   23ff2:	3901      	subs	r1, #1
   23ff4:	e8c2 1fec 	stlex	ip, r1, [r2]
   23ff8:	f1bc 0f00 	cmp.w	ip, #0
   23ffc:	d1f7      	bne.n	23fee <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   23ffe:	685b      	ldr	r3, [r3, #4]
   24000:	b90b      	cbnz	r3, 24006 <log_msg_put+0x1c>
		msg_free(msg);
   24002:	f7eb bb73 	b.w	f6ec <msg_free>
}
   24006:	4770      	bx	lr

00024008 <log_msg_str_get>:
}
   24008:	6900      	ldr	r0, [r0, #16]
   2400a:	4770      	bx	lr

0002400c <log_msg_create_n>:
{
   2400c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24010:	4682      	mov	sl, r0
   24012:	4688      	mov	r8, r1
   24014:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   24016:	f7eb fb57 	bl	f6c8 <log_msg_chunk_alloc>
	if (msg != NULL) {
   2401a:	4604      	mov	r4, r0
   2401c:	b360      	cbz	r0, 24078 <log_msg_create_n+0x6c>
		msg->hdr.ref_cnt = 1;
   2401e:	2301      	movs	r3, #1
   24020:	2600      	movs	r6, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   24022:	2d03      	cmp	r5, #3
   24024:	6043      	str	r3, [r0, #4]
   24026:	8106      	strh	r6, [r0, #8]
   24028:	d90f      	bls.n	2404a <log_msg_create_n+0x3e>
	msg->hdr.params.std.nargs = 0U;
   2402a:	7a42      	ldrb	r2, [r0, #9]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   2402c:	f1a5 0902 	sub.w	r9, r5, #2
	msg->hdr.params.std.nargs = 0U;
   24030:	f366 1207 	bfi	r2, r6, #4, #4
   24034:	7242      	strb	r2, [r0, #9]
	msg->hdr.params.generic.ext = 1;
   24036:	7a02      	ldrb	r2, [r0, #8]
	next = &msg->payload.ext.next;
   24038:	f100 0b14 	add.w	fp, r0, #20
	msg->hdr.params.generic.ext = 1;
   2403c:	f042 0202 	orr.w	r2, r2, #2
   24040:	7202      	strb	r2, [r0, #8]
	*next = NULL;
   24042:	6146      	str	r6, [r0, #20]
	while (n > 0) {
   24044:	f1b9 0f00 	cmp.w	r9, #0
   24048:	dc0e      	bgt.n	24068 <log_msg_create_n+0x5c>
		msg->hdr.params.std.nargs = nargs;
   2404a:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   2404c:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   2404e:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   24052:	f8c4 a010 	str.w	sl, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   24056:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   24058:	d818      	bhi.n	2408c <log_msg_create_n+0x80>
		(void)memcpy(msg->payload.single.args, args,
   2405a:	00aa      	lsls	r2, r5, #2
   2405c:	4641      	mov	r1, r8
   2405e:	f104 0014 	add.w	r0, r4, #20
   24062:	f000 fc2d 	bl	248c0 <memcpy>
   24066:	e007      	b.n	24078 <log_msg_create_n+0x6c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   24068:	f7eb fb2e 	bl	f6c8 <log_msg_chunk_alloc>
		if (cont == NULL) {
   2406c:	4607      	mov	r7, r0
   2406e:	b930      	cbnz	r0, 2407e <log_msg_create_n+0x72>
			msg_free(msg);
   24070:	4620      	mov	r0, r4
   24072:	f7eb fb3b 	bl	f6ec <msg_free>
			return NULL;
   24076:	463c      	mov	r4, r7
}
   24078:	4620      	mov	r0, r4
   2407a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   2407e:	f8cb 0000 	str.w	r0, [fp]
   24082:	f1a9 0907 	sub.w	r9, r9, #7
		cont->next = NULL;
   24086:	6006      	str	r6, [r0, #0]
		next = &cont->next;
   24088:	4683      	mov	fp, r0
   2408a:	e7db      	b.n	24044 <log_msg_create_n+0x38>
		(void)memcpy(msg->payload.ext.data.args, args,
   2408c:	4641      	mov	r1, r8
   2408e:	2208      	movs	r2, #8
   24090:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   24094:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   24096:	f000 fc13 	bl	248c0 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   2409a:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   2409c:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   240a0:	2d07      	cmp	r5, #7
   240a2:	462e      	mov	r6, r5
   240a4:	bf28      	it	cs
   240a6:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   240a8:	ea4f 0986 	mov.w	r9, r6, lsl #2
   240ac:	4641      	mov	r1, r8
   240ae:	1d38      	adds	r0, r7, #4
   240b0:	464a      	mov	r2, r9
   240b2:	f000 fc05 	bl	248c0 <memcpy>
	while (nargs != 0U) {
   240b6:	1bad      	subs	r5, r5, r6
		args += cpy_args;
   240b8:	44c8      	add	r8, r9
		cont = cont->next;
   240ba:	683f      	ldr	r7, [r7, #0]
	while (nargs != 0U) {
   240bc:	d1f0      	bne.n	240a0 <log_msg_create_n+0x94>
   240be:	e7db      	b.n	24078 <log_msg_create_n+0x6c>

000240c0 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
   240c0:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   240c2:	2400      	movs	r4, #0
   240c4:	9400      	str	r4, [sp, #0]
   240c6:	f7ff ff15 	bl	23ef4 <log_msg_hexdump_data_op>
}
   240ca:	b002      	add	sp, #8
   240cc:	bd10      	pop	{r4, pc}

000240ce <buffer_write>:
{
   240ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   240d0:	4606      	mov	r6, r0
   240d2:	460d      	mov	r5, r1
   240d4:	4614      	mov	r4, r2
   240d6:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   240d8:	4621      	mov	r1, r4
   240da:	4628      	mov	r0, r5
   240dc:	463a      	mov	r2, r7
   240de:	47b0      	blx	r6
	} while (len != 0);
   240e0:	1a24      	subs	r4, r4, r0
		buf += processed;
   240e2:	4405      	add	r5, r0
	} while (len != 0);
   240e4:	d1f8      	bne.n	240d8 <buffer_write+0xa>
}
   240e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000240e8 <std_print>:
{
   240e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   240ec:	b08e      	sub	sp, #56	; 0x38
   240ee:	af0e      	add	r7, sp, #56	; 0x38
   240f0:	4681      	mov	r9, r0
   240f2:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   240f4:	f7ff ff88 	bl	24008 <log_msg_str_get>
   240f8:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
   240fa:	4648      	mov	r0, r9
   240fc:	f7ff ff55 	bl	23faa <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   24100:	f04f 0800 	mov.w	r8, #0
	u32_t nargs = log_msg_nargs_get(msg);
   24104:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   24106:	0083      	lsls	r3, r0, #2
   24108:	330e      	adds	r3, #14
   2410a:	f023 0307 	bic.w	r3, r3, #7
   2410e:	ebad 0d03 	sub.w	sp, sp, r3
   24112:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   24114:	45d0      	cmp	r8, sl
   24116:	d116      	bne.n	24146 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   24118:	4648      	mov	r0, r9
   2411a:	f7ff ff46 	bl	23faa <log_msg_nargs_get>
   2411e:	280f      	cmp	r0, #15
   24120:	d81e      	bhi.n	24160 <std_print+0x78>
   24122:	e8df f010 	tbh	[pc, r0, lsl #1]
   24126:	0019      	.short	0x0019
   24128:	00260020 	.word	0x00260020
   2412c:	0036002d 	.word	0x0036002d
   24130:	004e0041 	.word	0x004e0041
   24134:	006e005d 	.word	0x006e005d
   24138:	00960081 	.word	0x00960081
   2413c:	00c600ad 	.word	0x00c600ad
   24140:	00fe00e1 	.word	0x00fe00e1
   24144:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   24146:	4641      	mov	r1, r8
   24148:	4648      	mov	r0, r9
   2414a:	f7ff ff31 	bl	23fb0 <log_msg_arg_get>
   2414e:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	for (i = 0; i < nargs; i++) {
   24152:	f108 0801 	add.w	r8, r8, #1
   24156:	e7dd      	b.n	24114 <std_print+0x2c>
		print_formatted(log_output, str);
   24158:	4631      	mov	r1, r6
   2415a:	4628      	mov	r0, r5
   2415c:	f7eb fafa 	bl	f754 <print_formatted>
}
   24160:	46bd      	mov	sp, r7
   24162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   24166:	6822      	ldr	r2, [r4, #0]
   24168:	4631      	mov	r1, r6
   2416a:	4628      	mov	r0, r5
   2416c:	f7eb faf2 	bl	f754 <print_formatted>
		break;
   24170:	e7f6      	b.n	24160 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   24172:	e9d4 2300 	ldrd	r2, r3, [r4]
   24176:	4631      	mov	r1, r6
   24178:	4628      	mov	r0, r5
   2417a:	f7eb faeb 	bl	f754 <print_formatted>
		break;
   2417e:	e7ef      	b.n	24160 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   24180:	68a3      	ldr	r3, [r4, #8]
   24182:	4631      	mov	r1, r6
   24184:	9300      	str	r3, [sp, #0]
   24186:	e9d4 2300 	ldrd	r2, r3, [r4]
   2418a:	4628      	mov	r0, r5
   2418c:	f7eb fae2 	bl	f754 <print_formatted>
		break;
   24190:	e7e6      	b.n	24160 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   24192:	68e3      	ldr	r3, [r4, #12]
   24194:	4631      	mov	r1, r6
   24196:	9301      	str	r3, [sp, #4]
   24198:	68a3      	ldr	r3, [r4, #8]
   2419a:	4628      	mov	r0, r5
   2419c:	9300      	str	r3, [sp, #0]
   2419e:	e9d4 2300 	ldrd	r2, r3, [r4]
   241a2:	f7eb fad7 	bl	f754 <print_formatted>
		break;
   241a6:	e7db      	b.n	24160 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   241a8:	6923      	ldr	r3, [r4, #16]
   241aa:	4631      	mov	r1, r6
   241ac:	9302      	str	r3, [sp, #8]
   241ae:	68e3      	ldr	r3, [r4, #12]
   241b0:	4628      	mov	r0, r5
   241b2:	9301      	str	r3, [sp, #4]
   241b4:	68a3      	ldr	r3, [r4, #8]
   241b6:	9300      	str	r3, [sp, #0]
   241b8:	e9d4 2300 	ldrd	r2, r3, [r4]
   241bc:	f7eb faca 	bl	f754 <print_formatted>
		break;
   241c0:	e7ce      	b.n	24160 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   241c2:	6963      	ldr	r3, [r4, #20]
   241c4:	4631      	mov	r1, r6
   241c6:	9303      	str	r3, [sp, #12]
   241c8:	6923      	ldr	r3, [r4, #16]
   241ca:	4628      	mov	r0, r5
   241cc:	9302      	str	r3, [sp, #8]
   241ce:	68e3      	ldr	r3, [r4, #12]
   241d0:	9301      	str	r3, [sp, #4]
   241d2:	68a3      	ldr	r3, [r4, #8]
   241d4:	9300      	str	r3, [sp, #0]
   241d6:	e9d4 2300 	ldrd	r2, r3, [r4]
   241da:	f7eb fabb 	bl	f754 <print_formatted>
		break;
   241de:	e7bf      	b.n	24160 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   241e0:	69a3      	ldr	r3, [r4, #24]
   241e2:	4631      	mov	r1, r6
   241e4:	9304      	str	r3, [sp, #16]
   241e6:	6963      	ldr	r3, [r4, #20]
   241e8:	4628      	mov	r0, r5
   241ea:	9303      	str	r3, [sp, #12]
   241ec:	6923      	ldr	r3, [r4, #16]
   241ee:	9302      	str	r3, [sp, #8]
   241f0:	68e3      	ldr	r3, [r4, #12]
   241f2:	9301      	str	r3, [sp, #4]
   241f4:	68a3      	ldr	r3, [r4, #8]
   241f6:	9300      	str	r3, [sp, #0]
   241f8:	e9d4 2300 	ldrd	r2, r3, [r4]
   241fc:	f7eb faaa 	bl	f754 <print_formatted>
		break;
   24200:	e7ae      	b.n	24160 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   24202:	69e3      	ldr	r3, [r4, #28]
   24204:	4631      	mov	r1, r6
   24206:	9305      	str	r3, [sp, #20]
   24208:	69a3      	ldr	r3, [r4, #24]
   2420a:	4628      	mov	r0, r5
   2420c:	9304      	str	r3, [sp, #16]
   2420e:	6963      	ldr	r3, [r4, #20]
   24210:	9303      	str	r3, [sp, #12]
   24212:	6923      	ldr	r3, [r4, #16]
   24214:	9302      	str	r3, [sp, #8]
   24216:	68e3      	ldr	r3, [r4, #12]
   24218:	9301      	str	r3, [sp, #4]
   2421a:	68a3      	ldr	r3, [r4, #8]
   2421c:	9300      	str	r3, [sp, #0]
   2421e:	e9d4 2300 	ldrd	r2, r3, [r4]
   24222:	f7eb fa97 	bl	f754 <print_formatted>
		break;
   24226:	e79b      	b.n	24160 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   24228:	6a23      	ldr	r3, [r4, #32]
   2422a:	4631      	mov	r1, r6
   2422c:	9306      	str	r3, [sp, #24]
   2422e:	69e3      	ldr	r3, [r4, #28]
   24230:	4628      	mov	r0, r5
   24232:	9305      	str	r3, [sp, #20]
   24234:	69a3      	ldr	r3, [r4, #24]
   24236:	9304      	str	r3, [sp, #16]
   24238:	6963      	ldr	r3, [r4, #20]
   2423a:	9303      	str	r3, [sp, #12]
   2423c:	6923      	ldr	r3, [r4, #16]
   2423e:	9302      	str	r3, [sp, #8]
   24240:	68e3      	ldr	r3, [r4, #12]
   24242:	9301      	str	r3, [sp, #4]
   24244:	68a3      	ldr	r3, [r4, #8]
   24246:	9300      	str	r3, [sp, #0]
   24248:	e9d4 2300 	ldrd	r2, r3, [r4]
   2424c:	f7eb fa82 	bl	f754 <print_formatted>
		break;
   24250:	e786      	b.n	24160 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   24252:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24254:	4631      	mov	r1, r6
   24256:	9307      	str	r3, [sp, #28]
   24258:	6a23      	ldr	r3, [r4, #32]
   2425a:	4628      	mov	r0, r5
   2425c:	9306      	str	r3, [sp, #24]
   2425e:	69e3      	ldr	r3, [r4, #28]
   24260:	9305      	str	r3, [sp, #20]
   24262:	69a3      	ldr	r3, [r4, #24]
   24264:	9304      	str	r3, [sp, #16]
   24266:	6963      	ldr	r3, [r4, #20]
   24268:	9303      	str	r3, [sp, #12]
   2426a:	6923      	ldr	r3, [r4, #16]
   2426c:	9302      	str	r3, [sp, #8]
   2426e:	68e3      	ldr	r3, [r4, #12]
   24270:	9301      	str	r3, [sp, #4]
   24272:	68a3      	ldr	r3, [r4, #8]
   24274:	9300      	str	r3, [sp, #0]
   24276:	e9d4 2300 	ldrd	r2, r3, [r4]
   2427a:	f7eb fa6b 	bl	f754 <print_formatted>
		break;
   2427e:	e76f      	b.n	24160 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   24280:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   24282:	4631      	mov	r1, r6
   24284:	9308      	str	r3, [sp, #32]
   24286:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24288:	4628      	mov	r0, r5
   2428a:	9307      	str	r3, [sp, #28]
   2428c:	6a23      	ldr	r3, [r4, #32]
   2428e:	9306      	str	r3, [sp, #24]
   24290:	69e3      	ldr	r3, [r4, #28]
   24292:	9305      	str	r3, [sp, #20]
   24294:	69a3      	ldr	r3, [r4, #24]
   24296:	9304      	str	r3, [sp, #16]
   24298:	6963      	ldr	r3, [r4, #20]
   2429a:	9303      	str	r3, [sp, #12]
   2429c:	6923      	ldr	r3, [r4, #16]
   2429e:	9302      	str	r3, [sp, #8]
   242a0:	68e3      	ldr	r3, [r4, #12]
   242a2:	9301      	str	r3, [sp, #4]
   242a4:	68a3      	ldr	r3, [r4, #8]
   242a6:	9300      	str	r3, [sp, #0]
   242a8:	e9d4 2300 	ldrd	r2, r3, [r4]
   242ac:	f7eb fa52 	bl	f754 <print_formatted>
		break;
   242b0:	e756      	b.n	24160 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   242b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   242b4:	4631      	mov	r1, r6
   242b6:	9309      	str	r3, [sp, #36]	; 0x24
   242b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   242ba:	4628      	mov	r0, r5
   242bc:	9308      	str	r3, [sp, #32]
   242be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   242c0:	9307      	str	r3, [sp, #28]
   242c2:	6a23      	ldr	r3, [r4, #32]
   242c4:	9306      	str	r3, [sp, #24]
   242c6:	69e3      	ldr	r3, [r4, #28]
   242c8:	9305      	str	r3, [sp, #20]
   242ca:	69a3      	ldr	r3, [r4, #24]
   242cc:	9304      	str	r3, [sp, #16]
   242ce:	6963      	ldr	r3, [r4, #20]
   242d0:	9303      	str	r3, [sp, #12]
   242d2:	6923      	ldr	r3, [r4, #16]
   242d4:	9302      	str	r3, [sp, #8]
   242d6:	68e3      	ldr	r3, [r4, #12]
   242d8:	9301      	str	r3, [sp, #4]
   242da:	68a3      	ldr	r3, [r4, #8]
   242dc:	9300      	str	r3, [sp, #0]
   242de:	e9d4 2300 	ldrd	r2, r3, [r4]
   242e2:	f7eb fa37 	bl	f754 <print_formatted>
		break;
   242e6:	e73b      	b.n	24160 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   242e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   242ea:	4631      	mov	r1, r6
   242ec:	930a      	str	r3, [sp, #40]	; 0x28
   242ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   242f0:	4628      	mov	r0, r5
   242f2:	9309      	str	r3, [sp, #36]	; 0x24
   242f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   242f6:	9308      	str	r3, [sp, #32]
   242f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   242fa:	9307      	str	r3, [sp, #28]
   242fc:	6a23      	ldr	r3, [r4, #32]
   242fe:	9306      	str	r3, [sp, #24]
   24300:	69e3      	ldr	r3, [r4, #28]
   24302:	9305      	str	r3, [sp, #20]
   24304:	69a3      	ldr	r3, [r4, #24]
   24306:	9304      	str	r3, [sp, #16]
   24308:	6963      	ldr	r3, [r4, #20]
   2430a:	9303      	str	r3, [sp, #12]
   2430c:	6923      	ldr	r3, [r4, #16]
   2430e:	9302      	str	r3, [sp, #8]
   24310:	68e3      	ldr	r3, [r4, #12]
   24312:	9301      	str	r3, [sp, #4]
   24314:	68a3      	ldr	r3, [r4, #8]
   24316:	9300      	str	r3, [sp, #0]
   24318:	e9d4 2300 	ldrd	r2, r3, [r4]
   2431c:	f7eb fa1a 	bl	f754 <print_formatted>
		break;
   24320:	e71e      	b.n	24160 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   24322:	6b63      	ldr	r3, [r4, #52]	; 0x34
   24324:	4631      	mov	r1, r6
   24326:	930b      	str	r3, [sp, #44]	; 0x2c
   24328:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2432a:	4628      	mov	r0, r5
   2432c:	930a      	str	r3, [sp, #40]	; 0x28
   2432e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   24330:	9309      	str	r3, [sp, #36]	; 0x24
   24332:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   24334:	9308      	str	r3, [sp, #32]
   24336:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24338:	9307      	str	r3, [sp, #28]
   2433a:	6a23      	ldr	r3, [r4, #32]
   2433c:	9306      	str	r3, [sp, #24]
   2433e:	69e3      	ldr	r3, [r4, #28]
   24340:	9305      	str	r3, [sp, #20]
   24342:	69a3      	ldr	r3, [r4, #24]
   24344:	9304      	str	r3, [sp, #16]
   24346:	6963      	ldr	r3, [r4, #20]
   24348:	9303      	str	r3, [sp, #12]
   2434a:	6923      	ldr	r3, [r4, #16]
   2434c:	9302      	str	r3, [sp, #8]
   2434e:	68e3      	ldr	r3, [r4, #12]
   24350:	9301      	str	r3, [sp, #4]
   24352:	68a3      	ldr	r3, [r4, #8]
   24354:	9300      	str	r3, [sp, #0]
   24356:	e9d4 2300 	ldrd	r2, r3, [r4]
   2435a:	f7eb f9fb 	bl	f754 <print_formatted>
		break;
   2435e:	e6ff      	b.n	24160 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   24360:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   24362:	4631      	mov	r1, r6
   24364:	930c      	str	r3, [sp, #48]	; 0x30
   24366:	6b63      	ldr	r3, [r4, #52]	; 0x34
   24368:	4628      	mov	r0, r5
   2436a:	930b      	str	r3, [sp, #44]	; 0x2c
   2436c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2436e:	930a      	str	r3, [sp, #40]	; 0x28
   24370:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   24372:	9309      	str	r3, [sp, #36]	; 0x24
   24374:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   24376:	9308      	str	r3, [sp, #32]
   24378:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2437a:	9307      	str	r3, [sp, #28]
   2437c:	6a23      	ldr	r3, [r4, #32]
   2437e:	9306      	str	r3, [sp, #24]
   24380:	69e3      	ldr	r3, [r4, #28]
   24382:	9305      	str	r3, [sp, #20]
   24384:	69a3      	ldr	r3, [r4, #24]
   24386:	9304      	str	r3, [sp, #16]
   24388:	6963      	ldr	r3, [r4, #20]
   2438a:	9303      	str	r3, [sp, #12]
   2438c:	6923      	ldr	r3, [r4, #16]
   2438e:	9302      	str	r3, [sp, #8]
   24390:	68e3      	ldr	r3, [r4, #12]
   24392:	9301      	str	r3, [sp, #4]
   24394:	68a3      	ldr	r3, [r4, #8]
   24396:	9300      	str	r3, [sp, #0]
   24398:	e9d4 2300 	ldrd	r2, r3, [r4]
   2439c:	f7eb f9da 	bl	f754 <print_formatted>
}
   243a0:	e6de      	b.n	24160 <std_print+0x78>

000243a2 <log_output_flush>:
		     log_output->control_block->offset,
   243a2:	6842      	ldr	r2, [r0, #4]
{
   243a4:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   243a6:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   243aa:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   243ac:	6881      	ldr	r1, [r0, #8]
   243ae:	6800      	ldr	r0, [r0, #0]
   243b0:	f7ff fe8d 	bl	240ce <buffer_write>
	log_output->control_block->offset = 0;
   243b4:	2200      	movs	r2, #0
   243b6:	6863      	ldr	r3, [r4, #4]
   243b8:	601a      	str	r2, [r3, #0]
}
   243ba:	bd10      	pop	{r4, pc}

000243bc <out_func>:
{
   243bc:	b508      	push	{r3, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
   243be:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   243c2:	681b      	ldr	r3, [r3, #0]
   243c4:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
   243c6:	684a      	ldr	r2, [r1, #4]
   243c8:	6813      	ldr	r3, [r2, #0]
   243ca:	3301      	adds	r3, #1
   243cc:	6013      	str	r3, [r2, #0]
	if (out_ctx->control_block->offset == out_ctx->size) {
   243ce:	68ca      	ldr	r2, [r1, #12]
   243d0:	4293      	cmp	r3, r2
   243d2:	d102      	bne.n	243da <out_func+0x1e>
		log_output_flush(out_ctx);
   243d4:	4608      	mov	r0, r1
   243d6:	f7ff ffe4 	bl	243a2 <log_output_flush>
}
   243da:	2000      	movs	r0, #0
   243dc:	bd08      	pop	{r3, pc}

000243de <char_out>:
{
   243de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   243e0:	460d      	mov	r5, r1
   243e2:	4616      	mov	r6, r2
   243e4:	4604      	mov	r4, r0
   243e6:	1847      	adds	r7, r0, r1
	for (size_t i = 0; i < length; i++) {
   243e8:	42bc      	cmp	r4, r7
   243ea:	d101      	bne.n	243f0 <char_out+0x12>
}
   243ec:	4628      	mov	r0, r5
   243ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   243f0:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   243f4:	6873      	ldr	r3, [r6, #4]
   243f6:	4630      	mov	r0, r6
   243f8:	685b      	ldr	r3, [r3, #4]
   243fa:	4798      	blx	r3
   243fc:	e7f4      	b.n	243e8 <char_out+0xa>

000243fe <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
   243fe:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
   24400:	7a5a      	ldrb	r2, [r3, #9]
   24402:	b932      	cbnz	r2, 24412 <get_status+0x14>
	if (data->ref > 0) {
   24404:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
   24408:	2800      	cmp	r0, #0
   2440a:	bfcc      	ite	gt
   2440c:	2000      	movgt	r0, #0
   2440e:	2001      	movle	r0, #1
   24410:	4770      	bx	lr
   24412:	2002      	movs	r0, #2
}
   24414:	4770      	bx	lr

00024416 <clock_stop>:
	const struct nrf_clock_control_config *config =
   24416:	6802      	ldr	r2, [r0, #0]
{
   24418:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
   2441a:	6896      	ldr	r6, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
   2441c:	6884      	ldr	r4, [r0, #8]
	__asm__ volatile(
   2441e:	f04f 0320 	mov.w	r3, #32
   24422:	f3ef 8511 	mrs	r5, BASEPRI
   24426:	f383 8811 	msr	BASEPRI, r3
   2442a:	f3bf 8f6f 	isb	sy
	data->ref--;
   2442e:	7a23      	ldrb	r3, [r4, #8]
   24430:	3b01      	subs	r3, #1
   24432:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
   24434:	2b00      	cmp	r3, #0
	data->ref--;
   24436:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
   24438:	d11c      	bne.n	24474 <clock_stop+0x5e>
	list->tail = NULL;
   2443a:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
   2443e:	6873      	ldr	r3, [r6, #4]
				config->stop_handler(dev) : true;
   24440:	b9a3      	cbnz	r3, 2446c <clock_stop+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24442:	2201      	movs	r2, #1
   24444:	7af3      	ldrb	r3, [r6, #11]
   24446:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2444a:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   2444e:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24450:	2200      	movs	r2, #0
   24452:	8933      	ldrh	r3, [r6, #8]
   24454:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   24458:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   2445c:	601a      	str	r2, [r3, #0]
		data->started = false;
   2445e:	2000      	movs	r0, #0
   24460:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   24462:	f385 8811 	msr	BASEPRI, r5
   24466:	f3bf 8f6f 	isb	sy
}
   2446a:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
   2446c:	4798      	blx	r3
   2446e:	2800      	cmp	r0, #0
   24470:	d1e7      	bne.n	24442 <clock_stop+0x2c>
   24472:	e7f4      	b.n	2445e <clock_stop+0x48>
   24474:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
   24478:	bfbc      	itt	lt
   2447a:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
   2447c:	f06f 0044 	mvnlt.w	r0, #68	; 0x44
   24480:	e7ef      	b.n	24462 <clock_stop+0x4c>

00024482 <clock_async_start>:
{
   24482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
   24484:	6803      	ldr	r3, [r0, #0]
{
   24486:	4606      	mov	r6, r0
   24488:	4614      	mov	r4, r2
	const struct nrf_clock_control_config *config =
   2448a:	689f      	ldr	r7, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
   2448c:	6885      	ldr	r5, [r0, #8]
	__asm__ volatile(
   2448e:	f04f 0320 	mov.w	r3, #32
   24492:	f3ef 8211 	mrs	r2, BASEPRI
   24496:	f383 8811 	msr	BASEPRI, r3
   2449a:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   2449e:	7a2b      	ldrb	r3, [r5, #8]
   244a0:	3301      	adds	r3, #1
   244a2:	b25b      	sxtb	r3, r3
   244a4:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
   244a6:	f382 8811 	msr	BASEPRI, r2
   244aa:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
   244ae:	7a6a      	ldrb	r2, [r5, #9]
   244b0:	b132      	cbz	r2, 244c0 <clock_async_start+0x3e>
		if (data) {
   244b2:	b90c      	cbnz	r4, 244b8 <clock_async_start+0x36>
	return 0;
   244b4:	2000      	movs	r0, #0
}
   244b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
   244b8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   244bc:	4798      	blx	r3
   244be:	e7f9      	b.n	244b4 <clock_async_start+0x32>
		if (ref == 1) {
   244c0:	2b01      	cmp	r3, #1
   244c2:	d108      	bne.n	244d6 <clock_async_start+0x54>
			do_start =  (config->start_handler) ?
   244c4:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
   244c6:	b943      	cbnz	r3, 244da <clock_async_start+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   244c8:	2201      	movs	r2, #1
   244ca:	7abb      	ldrb	r3, [r7, #10]
   244cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   244d0:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   244d4:	601a      	str	r2, [r3, #0]
		if (data) {
   244d6:	b94c      	cbnz	r4, 244ec <clock_async_start+0x6a>
   244d8:	e7ec      	b.n	244b4 <clock_async_start+0x32>
					config->start_handler(dev) : true;
   244da:	4798      	blx	r3
   244dc:	2800      	cmp	r0, #0
   244de:	d1f3      	bne.n	244c8 <clock_async_start+0x46>
			} else if (data) {
   244e0:	2c00      	cmp	r4, #0
   244e2:	d0e7      	beq.n	244b4 <clock_async_start+0x32>
				data->cb(dev, data->user_data);
   244e4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   244e8:	4630      	mov	r0, r6
   244ea:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
   244ec:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
   244ee:	429c      	cmp	r4, r3
   244f0:	d00d      	beq.n	2450e <clock_async_start+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   244f2:	b113      	cbz	r3, 244fa <clock_async_start+0x78>
	return node->next;
   244f4:	681b      	ldr	r3, [r3, #0]
	} while (item);
   244f6:	2b00      	cmp	r3, #0
   244f8:	d1f9      	bne.n	244ee <clock_async_start+0x6c>
	parent->next = child;
   244fa:	2000      	movs	r0, #0
   244fc:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   244fe:	686b      	ldr	r3, [r5, #4]
   24500:	b913      	cbnz	r3, 24508 <clock_async_start+0x86>
	list->head = node;
   24502:	e9c5 4400 	strd	r4, r4, [r5]
   24506:	e7d5      	b.n	244b4 <clock_async_start+0x32>
	parent->next = child;
   24508:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2450a:	606c      	str	r4, [r5, #4]
   2450c:	e7d3      	b.n	244b6 <clock_async_start+0x34>
				return -EALREADY;
   2450e:	f06f 0044 	mvn.w	r0, #68	; 0x44
   24512:	e7d0      	b.n	244b6 <clock_async_start+0x34>

00024514 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   24514:	2200      	movs	r2, #0
   24516:	f7ff bfb4 	b.w	24482 <clock_async_start>

0002451a <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
   2451a:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
   2451c:	2000      	movs	r0, #0
	list->tail = NULL;
   2451e:	e9c3 0000 	strd	r0, r0, [r3]
}
   24522:	4770      	bx	lr

00024524 <clkstarted_handle>:
{
   24524:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
   24526:	6884      	ldr	r4, [r0, #8]
{
   24528:	4605      	mov	r5, r0
Z_GENLIST_IS_EMPTY(slist)
   2452a:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   2452c:	b12b      	cbz	r3, 2453a <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2452e:	6861      	ldr	r1, [r4, #4]
	return node->next;
   24530:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24532:	428b      	cmp	r3, r1
	list->head = node;
   24534:	6022      	str	r2, [r4, #0]
	list->tail = node;
   24536:	bf08      	it	eq
   24538:	6062      	streq	r2, [r4, #4]
	data->started = true;
   2453a:	2201      	movs	r2, #1
   2453c:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
   2453e:	b903      	cbnz	r3, 24542 <clkstarted_handle+0x1e>
}
   24540:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   24542:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   24546:	4628      	mov	r0, r5
   24548:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
   2454a:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   2454c:	2b00      	cmp	r3, #0
   2454e:	d0f7      	beq.n	24540 <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24550:	6861      	ldr	r1, [r4, #4]
	return node->next;
   24552:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24554:	428b      	cmp	r3, r1
	list->head = node;
   24556:	6022      	str	r2, [r4, #0]
	list->tail = node;
   24558:	bf08      	it	eq
   2455a:	6062      	streq	r2, [r4, #4]
   2455c:	e7ef      	b.n	2453e <clkstarted_handle+0x1a>

0002455e <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   2455e:	4770      	bx	lr

00024560 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   24560:	4770      	bx	lr

00024562 <z_irq_spurious>:
	z_arm_reserved();
   24562:	f7eb bd81 	b.w	10068 <z_arm_bus_fault>

00024566 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   24566:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   24568:	6800      	ldr	r0, [r0, #0]
   2456a:	f7eb bd87 	b.w	1007c <z_arm_fatal_error>

0002456e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   2456e:	b508      	push	{r3, lr}
	handler();
   24570:	f7eb fe22 	bl	101b8 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   24574:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   24578:	f7eb bc50 	b.w	fe1c <z_arm_exc_exit>

0002457c <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   2457c:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   2457e:	2100      	movs	r1, #0
   24580:	a801      	add	r0, sp, #4
   24582:	f7ec fb65 	bl	10c50 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   24586:	b003      	add	sp, #12
   24588:	f85d fb04 	ldr.w	pc, [sp], #4

0002458c <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   2458c:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   24590:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   24594:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   24596:	bf08      	it	eq
   24598:	f06f 0015 	mvneq.w	r0, #21
   2459c:	4770      	bx	lr

0002459e <atoi>:

#include <stdlib.h>
#include <ctype.h>

int atoi(const char *s)
{
   2459e:	b510      	push	{r4, lr}
	int n = 0;
	int neg = 0;

	while (isspace(*s)) {
   245a0:	7802      	ldrb	r2, [r0, #0]
   245a2:	4603      	mov	r3, r0
   245a4:	2a20      	cmp	r2, #32
   245a6:	f100 0001 	add.w	r0, r0, #1
   245aa:	d0f9      	beq.n	245a0 <atoi+0x2>
   245ac:	f1a2 0109 	sub.w	r1, r2, #9
   245b0:	2904      	cmp	r1, #4
   245b2:	d9f5      	bls.n	245a0 <atoi+0x2>
		s++;
	}
	switch (*s) {
   245b4:	2a2b      	cmp	r2, #43	; 0x2b
   245b6:	d008      	beq.n	245ca <atoi+0x2c>
	int neg = 0;
   245b8:	2a2d      	cmp	r2, #45	; 0x2d
   245ba:	bf0a      	itet	eq
   245bc:	2101      	moveq	r1, #1
   245be:	2100      	movne	r1, #0
   245c0:	4603      	moveq	r3, r0
   245c2:	3b01      	subs	r3, #1
   245c4:	2000      	movs	r0, #0
	case '+':
		s++;
	}
	/* Compute n as a negative number to avoid overflow on INT_MIN */
	while (isdigit(*s)) {
		n = 10*n - (*s++ - '0');
   245c6:	240a      	movs	r4, #10
   245c8:	e004      	b.n	245d4 <atoi+0x36>
		s++;
   245ca:	4603      	mov	r3, r0
	int neg = 0;
   245cc:	2100      	movs	r1, #0
   245ce:	e7f8      	b.n	245c2 <atoi+0x24>
		n = 10*n - (*s++ - '0');
   245d0:	4360      	muls	r0, r4
   245d2:	1a80      	subs	r0, r0, r2
	while (isdigit(*s)) {
   245d4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   245d8:	3a30      	subs	r2, #48	; 0x30
   245da:	2a09      	cmp	r2, #9
   245dc:	d9f8      	bls.n	245d0 <atoi+0x32>
	}
	return neg ? n : -n;
   245de:	b901      	cbnz	r1, 245e2 <atoi+0x44>
   245e0:	4240      	negs	r0, r0
}
   245e2:	bd10      	pop	{r4, pc}

000245e4 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   245e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   245e8:	4684      	mov	ip, r0
   245ea:	460f      	mov	r7, r1
	register const char *s = nptr;
   245ec:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   245ee:	462c      	mov	r4, r5
   245f0:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   245f4:	2b20      	cmp	r3, #32
   245f6:	d036      	beq.n	24666 <strtol+0x82>
   245f8:	f1a3 0109 	sub.w	r1, r3, #9
   245fc:	2904      	cmp	r1, #4
   245fe:	d932      	bls.n	24666 <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
   24600:	2b2d      	cmp	r3, #45	; 0x2d
   24602:	d132      	bne.n	2466a <strtol+0x86>
		neg = 1;
   24604:	2101      	movs	r1, #1
		c = *s++;
   24606:	786b      	ldrb	r3, [r5, #1]
   24608:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   2460a:	2a00      	cmp	r2, #0
   2460c:	d05c      	beq.n	246c8 <strtol+0xe4>
   2460e:	2a10      	cmp	r2, #16
   24610:	d109      	bne.n	24626 <strtol+0x42>
   24612:	2b30      	cmp	r3, #48	; 0x30
   24614:	d107      	bne.n	24626 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   24616:	7823      	ldrb	r3, [r4, #0]
   24618:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2461c:	2b58      	cmp	r3, #88	; 0x58
   2461e:	d14e      	bne.n	246be <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   24620:	2210      	movs	r2, #16
		c = s[1];
   24622:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   24624:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   24626:	2900      	cmp	r1, #0
   24628:	bf0c      	ite	eq
   2462a:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
   2462e:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   24632:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   24634:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
   24638:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   2463a:	fb02 891e 	mls	r9, r2, lr, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2463e:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   24642:	2d09      	cmp	r5, #9
   24644:	d817      	bhi.n	24676 <strtol+0x92>
			c -= '0';
   24646:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   24648:	429a      	cmp	r2, r3
   2464a:	dd24      	ble.n	24696 <strtol+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   2464c:	1c75      	adds	r5, r6, #1
   2464e:	d007      	beq.n	24660 <strtol+0x7c>
   24650:	4570      	cmp	r0, lr
   24652:	d81d      	bhi.n	24690 <strtol+0xac>
   24654:	d101      	bne.n	2465a <strtol+0x76>
   24656:	454b      	cmp	r3, r9
   24658:	dc1a      	bgt.n	24690 <strtol+0xac>
			any = -1;
		} else {
			any = 1;
   2465a:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   2465c:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   24660:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   24664:	e7eb      	b.n	2463e <strtol+0x5a>
{
   24666:	4625      	mov	r5, r4
   24668:	e7c1      	b.n	245ee <strtol+0xa>
	} else if (c == '+') {
   2466a:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   2466c:	bf04      	itt	eq
   2466e:	1cac      	addeq	r4, r5, #2
   24670:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   24672:	2100      	movs	r1, #0
   24674:	e7c9      	b.n	2460a <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   24676:	f043 0520 	orr.w	r5, r3, #32
   2467a:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   2467c:	2d19      	cmp	r5, #25
   2467e:	d80a      	bhi.n	24696 <strtol+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   24680:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   24684:	2d19      	cmp	r5, #25
   24686:	bf8c      	ite	hi
   24688:	2557      	movhi	r5, #87	; 0x57
   2468a:	2537      	movls	r5, #55	; 0x37
   2468c:	1b5b      	subs	r3, r3, r5
   2468e:	e7db      	b.n	24648 <strtol+0x64>
			any = -1;
   24690:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   24694:	e7e4      	b.n	24660 <strtol+0x7c>
		}
	}

	if (any < 0) {
   24696:	1c73      	adds	r3, r6, #1
   24698:	d107      	bne.n	246aa <strtol+0xc6>
   2469a:	f7fd faf3 	bl	21c84 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   2469e:	2326      	movs	r3, #38	; 0x26
   246a0:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   246a2:	4640      	mov	r0, r8
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   246a4:	b937      	cbnz	r7, 246b4 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   246a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   246aa:	b101      	cbz	r1, 246ae <strtol+0xca>
		acc = -acc;
   246ac:	4240      	negs	r0, r0
	if (endptr != NULL) {
   246ae:	2f00      	cmp	r7, #0
   246b0:	d0f9      	beq.n	246a6 <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
   246b2:	b10e      	cbz	r6, 246b8 <strtol+0xd4>
   246b4:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   246b8:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   246bc:	e7f3      	b.n	246a6 <strtol+0xc2>
	if (base == 0) {
   246be:	2330      	movs	r3, #48	; 0x30
   246c0:	2a00      	cmp	r2, #0
   246c2:	d1b0      	bne.n	24626 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   246c4:	2208      	movs	r2, #8
   246c6:	e7ae      	b.n	24626 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   246c8:	2b30      	cmp	r3, #48	; 0x30
   246ca:	d0a4      	beq.n	24616 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   246cc:	220a      	movs	r2, #10
   246ce:	e7aa      	b.n	24626 <strtol+0x42>

000246d0 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   246d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   246d4:	4684      	mov	ip, r0
   246d6:	460f      	mov	r7, r1
	register const char *s = nptr;
   246d8:	4605      	mov	r5, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   246da:	462c      	mov	r4, r5
   246dc:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   246e0:	2b20      	cmp	r3, #32
   246e2:	d035      	beq.n	24750 <strtoul+0x80>
   246e4:	f1a3 0109 	sub.w	r1, r3, #9
   246e8:	2904      	cmp	r1, #4
   246ea:	d931      	bls.n	24750 <strtoul+0x80>
	} while (isspace(c));
	if (c == '-') {
   246ec:	2b2d      	cmp	r3, #45	; 0x2d
   246ee:	d131      	bne.n	24754 <strtoul+0x84>
		neg = 1;
   246f0:	f04f 0e01 	mov.w	lr, #1
		c = *s++;
   246f4:	786b      	ldrb	r3, [r5, #1]
   246f6:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   246f8:	2a00      	cmp	r2, #0
   246fa:	d05e      	beq.n	247ba <strtoul+0xea>
   246fc:	2a10      	cmp	r2, #16
   246fe:	d109      	bne.n	24714 <strtoul+0x44>
   24700:	2b30      	cmp	r3, #48	; 0x30
   24702:	d107      	bne.n	24714 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   24704:	7823      	ldrb	r3, [r4, #0]
   24706:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2470a:	2b58      	cmp	r3, #88	; 0x58
   2470c:	d150      	bne.n	247b0 <strtoul+0xe0>
		c = s[1];
		s += 2;
		base = 16;
   2470e:	2210      	movs	r2, #16
		c = s[1];
   24710:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   24712:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   24714:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   24718:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   2471c:	2600      	movs	r6, #0
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   2471e:	fb02 f801 	mul.w	r8, r2, r1
	for (acc = 0, any = 0;; c = *s++) {
   24722:	4630      	mov	r0, r6
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   24724:	ea6f 0808 	mvn.w	r8, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   24728:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   2472c:	2d09      	cmp	r5, #9
   2472e:	d818      	bhi.n	24762 <strtoul+0x92>
			c -= '0';
   24730:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   24732:	429a      	cmp	r2, r3
   24734:	dd25      	ble.n	24782 <strtoul+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   24736:	2e00      	cmp	r6, #0
   24738:	db20      	blt.n	2477c <strtoul+0xac>
   2473a:	4288      	cmp	r0, r1
   2473c:	d81e      	bhi.n	2477c <strtoul+0xac>
   2473e:	d101      	bne.n	24744 <strtoul+0x74>
   24740:	4543      	cmp	r3, r8
   24742:	dc1b      	bgt.n	2477c <strtoul+0xac>
			any = -1;
		} else {
			any = 1;
   24744:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   24746:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   2474a:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   2474e:	e7eb      	b.n	24728 <strtoul+0x58>
{
   24750:	4625      	mov	r5, r4
   24752:	e7c2      	b.n	246da <strtoul+0xa>
	} else if (c == '+') {
   24754:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   24756:	bf04      	itt	eq
   24758:	1cac      	addeq	r4, r5, #2
   2475a:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   2475c:	f04f 0e00 	mov.w	lr, #0
   24760:	e7ca      	b.n	246f8 <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   24762:	f043 0520 	orr.w	r5, r3, #32
   24766:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   24768:	2d19      	cmp	r5, #25
   2476a:	d80a      	bhi.n	24782 <strtoul+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2476c:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   24770:	2d19      	cmp	r5, #25
   24772:	bf8c      	ite	hi
   24774:	2557      	movhi	r5, #87	; 0x57
   24776:	2537      	movls	r5, #55	; 0x37
   24778:	1b5b      	subs	r3, r3, r5
   2477a:	e7da      	b.n	24732 <strtoul+0x62>
			any = -1;
   2477c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   24780:	e7e3      	b.n	2474a <strtoul+0x7a>
		}
	}
	if (any < 0) {
   24782:	2e00      	cmp	r6, #0
   24784:	da08      	bge.n	24798 <strtoul+0xc8>
   24786:	f7fd fa7d 	bl	21c84 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   2478a:	2326      	movs	r3, #38	; 0x26
   2478c:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   2478e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   24792:	b947      	cbnz	r7, 247a6 <strtoul+0xd6>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   24794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   24798:	f1be 0f00 	cmp.w	lr, #0
   2479c:	d000      	beq.n	247a0 <strtoul+0xd0>
		acc = -acc;
   2479e:	4240      	negs	r0, r0
	if (endptr != NULL) {
   247a0:	2f00      	cmp	r7, #0
   247a2:	d0f7      	beq.n	24794 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   247a4:	b10e      	cbz	r6, 247aa <strtoul+0xda>
   247a6:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   247aa:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   247ae:	e7f1      	b.n	24794 <strtoul+0xc4>
	if (base == 0) {
   247b0:	2330      	movs	r3, #48	; 0x30
   247b2:	2a00      	cmp	r2, #0
   247b4:	d1ae      	bne.n	24714 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   247b6:	2208      	movs	r2, #8
   247b8:	e7ac      	b.n	24714 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   247ba:	2b30      	cmp	r3, #48	; 0x30
   247bc:	d0a2      	beq.n	24704 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   247be:	220a      	movs	r2, #10
   247c0:	e7a8      	b.n	24714 <strtoul+0x44>

000247c2 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   247c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   247c6:	780f      	ldrb	r7, [r1, #0]
{
   247c8:	4605      	mov	r5, r0
	if (c != 0) {
   247ca:	b187      	cbz	r7, 247ee <strstr+0x2c>
	c = *find++;
   247cc:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   247ce:	4620      	mov	r0, r4
   247d0:	f000 f842 	bl	24858 <strlen>
   247d4:	4680      	mov	r8, r0
		do {
			do {
				sc = *s++;
   247d6:	462e      	mov	r6, r5
   247d8:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   247dc:	b163      	cbz	r3, 247f8 <strstr+0x36>
					return NULL;
				}
			} while (sc != c);
   247de:	429f      	cmp	r7, r3
   247e0:	d108      	bne.n	247f4 <strstr+0x32>
		} while (strncmp(s, find, len) != 0);
   247e2:	4642      	mov	r2, r8
   247e4:	4621      	mov	r1, r4
   247e6:	4630      	mov	r0, r6
   247e8:	f000 f84b 	bl	24882 <strncmp>
   247ec:	b910      	cbnz	r0, 247f4 <strstr+0x32>
	s--;
	}
	return (char *)s;
}
   247ee:	4628      	mov	r0, r5
   247f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   247f4:	4635      	mov	r5, r6
   247f6:	e7ee      	b.n	247d6 <strstr+0x14>
					return NULL;
   247f8:	461d      	mov	r5, r3
   247fa:	e7f8      	b.n	247ee <strstr+0x2c>

000247fc <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   247fc:	b570      	push	{r4, r5, r6, lr}
   247fe:	4605      	mov	r5, r0
   24800:	3901      	subs	r1, #1
   24802:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   24804:	b142      	cbz	r2, 24818 <strncpy+0x1c>
   24806:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2480a:	1e56      	subs	r6, r2, #1
   2480c:	b92b      	cbnz	r3, 2481a <strncpy+0x1e>
   2480e:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   24810:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   24814:	42a2      	cmp	r2, r4
   24816:	d1fb      	bne.n	24810 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   24818:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   2481a:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   2481e:	4632      	mov	r2, r6
   24820:	e7ef      	b.n	24802 <strncpy+0x6>

00024822 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   24822:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   24824:	7802      	ldrb	r2, [r0, #0]
   24826:	4603      	mov	r3, r0
   24828:	428a      	cmp	r2, r1
   2482a:	f100 0001 	add.w	r0, r0, #1
   2482e:	d004      	beq.n	2483a <strchr+0x18>
   24830:	2a00      	cmp	r2, #0
   24832:	d1f7      	bne.n	24824 <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   24834:	2900      	cmp	r1, #0
   24836:	bf18      	it	ne
   24838:	2300      	movne	r3, #0
}
   2483a:	4618      	mov	r0, r3
   2483c:	4770      	bx	lr

0002483e <strrchr>:
 * @return pointer to last instance of found byte, or NULL if not found
 */

char *strrchr(const char *s, int c)
{
	char *match = NULL;
   2483e:	2300      	movs	r3, #0
{
   24840:	b510      	push	{r4, lr}

	do {
		if (*s == (char)c) {
   24842:	b2c9      	uxtb	r1, r1
   24844:	4604      	mov	r4, r0
   24846:	f810 2b01 	ldrb.w	r2, [r0], #1
   2484a:	428a      	cmp	r2, r1
   2484c:	bf08      	it	eq
   2484e:	4623      	moveq	r3, r4
			match = (char *)s;
		}
	} while (*s++);
   24850:	2a00      	cmp	r2, #0
   24852:	d1f7      	bne.n	24844 <strrchr+0x6>

	return match;
}
   24854:	4618      	mov	r0, r3
   24856:	bd10      	pop	{r4, pc}

00024858 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   24858:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
   2485a:	4603      	mov	r3, r0
   2485c:	1a98      	subs	r0, r3, r2
   2485e:	f813 1b01 	ldrb.w	r1, [r3], #1
   24862:	2900      	cmp	r1, #0
   24864:	d1fa      	bne.n	2485c <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
   24866:	4770      	bx	lr

00024868 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
   24868:	3801      	subs	r0, #1
   2486a:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2486c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   24870:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   24874:	4293      	cmp	r3, r2
   24876:	d102      	bne.n	2487e <strcmp+0x16>
   24878:	2b00      	cmp	r3, #0
   2487a:	d1f7      	bne.n	2486c <strcmp+0x4>
   2487c:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   2487e:	1a98      	subs	r0, r3, r2
   24880:	4770      	bx	lr

00024882 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   24882:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   24884:	2400      	movs	r4, #0
   24886:	42a2      	cmp	r2, r4
   24888:	d008      	beq.n	2489c <strncmp+0x1a>
   2488a:	5d03      	ldrb	r3, [r0, r4]
   2488c:	5d0d      	ldrb	r5, [r1, r4]
   2488e:	42ab      	cmp	r3, r5
   24890:	d102      	bne.n	24898 <strncmp+0x16>
   24892:	3401      	adds	r4, #1
   24894:	2b00      	cmp	r3, #0
   24896:	d1f6      	bne.n	24886 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   24898:	1b58      	subs	r0, r3, r5
   2489a:	e000      	b.n	2489e <strncmp+0x1c>
   2489c:	2000      	movs	r0, #0
}
   2489e:	bd30      	pop	{r4, r5, pc}

000248a0 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   248a0:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   248a2:	b15a      	cbz	r2, 248bc <memcmp+0x1c>
   248a4:	3901      	subs	r1, #1
   248a6:	1884      	adds	r4, r0, r2
   248a8:	f810 2b01 	ldrb.w	r2, [r0], #1
   248ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   248b0:	42a0      	cmp	r0, r4
   248b2:	d001      	beq.n	248b8 <memcmp+0x18>
   248b4:	429a      	cmp	r2, r3
   248b6:	d0f7      	beq.n	248a8 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   248b8:	1ad0      	subs	r0, r2, r3
}
   248ba:	bd10      	pop	{r4, pc}
		return 0;
   248bc:	4610      	mov	r0, r2
   248be:	e7fc      	b.n	248ba <memcmp+0x1a>

000248c0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   248c0:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   248c2:	ea81 0400 	eor.w	r4, r1, r0
   248c6:	07a5      	lsls	r5, r4, #30
   248c8:	4603      	mov	r3, r0
   248ca:	d00b      	beq.n	248e4 <memcpy+0x24>
   248cc:	3b01      	subs	r3, #1
   248ce:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   248d0:	4291      	cmp	r1, r2
   248d2:	d11d      	bne.n	24910 <memcpy+0x50>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   248d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   248d6:	2a00      	cmp	r2, #0
   248d8:	d0fc      	beq.n	248d4 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   248da:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   248de:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   248e0:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   248e4:	079c      	lsls	r4, r3, #30
   248e6:	d1f6      	bne.n	248d6 <memcpy+0x16>
   248e8:	460c      	mov	r4, r1
   248ea:	1f1d      	subs	r5, r3, #4
   248ec:	188f      	adds	r7, r1, r2
		while (n >= sizeof(mem_word_t)) {
   248ee:	1b3e      	subs	r6, r7, r4
   248f0:	2e03      	cmp	r6, #3
   248f2:	d808      	bhi.n	24906 <memcpy+0x46>
   248f4:	f06f 0503 	mvn.w	r5, #3
   248f8:	0894      	lsrs	r4, r2, #2
   248fa:	fb05 2204 	mla	r2, r5, r4, r2
   248fe:	00a4      	lsls	r4, r4, #2
   24900:	4423      	add	r3, r4
   24902:	4421      	add	r1, r4
   24904:	e7e2      	b.n	248cc <memcpy+0xc>
			*(d_word++) = *(s_word++);
   24906:	f854 6b04 	ldr.w	r6, [r4], #4
   2490a:	f845 6f04 	str.w	r6, [r5, #4]!
   2490e:	e7ee      	b.n	248ee <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
   24910:	f811 4b01 	ldrb.w	r4, [r1], #1
   24914:	f803 4f01 	strb.w	r4, [r3, #1]!
   24918:	e7da      	b.n	248d0 <memcpy+0x10>

0002491a <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   2491a:	4603      	mov	r3, r0
{
   2491c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned char c_byte = (unsigned char)c;
   2491e:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   24920:	079c      	lsls	r4, r3, #30
   24922:	d10f      	bne.n	24944 <memset+0x2a>
	c_word |= c_word << 16;
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   24924:	461d      	mov	r5, r3
	c_word |= c_word << 8;
   24926:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   2492a:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
   2492e:	189f      	adds	r7, r3, r2
	while (n >= sizeof(mem_word_t)) {
   24930:	1b7e      	subs	r6, r7, r5
   24932:	2e03      	cmp	r6, #3
   24934:	d80c      	bhi.n	24950 <memset+0x36>
   24936:	0894      	lsrs	r4, r2, #2
   24938:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   2493c:	4413      	add	r3, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   2493e:	429c      	cmp	r4, r3
   24940:	d109      	bne.n	24956 <memset+0x3c>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   24942:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (n == 0) {
   24944:	2a00      	cmp	r2, #0
   24946:	d0fc      	beq.n	24942 <memset+0x28>
		*(d_byte++) = c_byte;
   24948:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2494c:	3a01      	subs	r2, #1
   2494e:	e7e7      	b.n	24920 <memset+0x6>
		*(d_word++) = c_word;
   24950:	f845 4b04 	str.w	r4, [r5], #4
   24954:	e7ec      	b.n	24930 <memset+0x16>
		*(d_byte++) = c_byte;
   24956:	f804 1b01 	strb.w	r1, [r4], #1
   2495a:	e7f0      	b.n	2493e <memset+0x24>

0002495c <_to_x>:
{
   2495c:	4603      	mov	r3, r0
   2495e:	b570      	push	{r4, r5, r6, lr}
		unsigned int d = n % base;
   24960:	fbb1 f6f2 	udiv	r6, r1, r2
   24964:	fb02 1116 	mls	r1, r2, r6, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   24968:	2909      	cmp	r1, #9
   2496a:	bf8c      	ite	hi
   2496c:	2527      	movhi	r5, #39	; 0x27
   2496e:	2500      	movls	r5, #0
   24970:	461c      	mov	r4, r3
   24972:	3130      	adds	r1, #48	; 0x30
   24974:	4429      	add	r1, r5
   24976:	f804 1b01 	strb.w	r1, [r4], #1
	} while (n);
   2497a:	4631      	mov	r1, r6
   2497c:	b92e      	cbnz	r6, 2498a <_to_x+0x2e>
	*buf = 0;
   2497e:	705e      	strb	r6, [r3, #1]
	len = buf - start;
   24980:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
   24982:	4283      	cmp	r3, r0
   24984:	d803      	bhi.n	2498e <_to_x+0x32>
}
   24986:	4620      	mov	r0, r4
   24988:	bd70      	pop	{r4, r5, r6, pc}
   2498a:	4623      	mov	r3, r4
   2498c:	e7e8      	b.n	24960 <_to_x+0x4>
		char tmp = *buf;
   2498e:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
   24990:	7801      	ldrb	r1, [r0, #0]
   24992:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
   24996:	f800 2b01 	strb.w	r2, [r0], #1
   2499a:	e7f2      	b.n	24982 <_to_x+0x26>

0002499c <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
   2499c:	e9d0 2300 	ldrd	r2, r3, [r0]
{
   249a0:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
	*v = (*v & 1) + (*v >> 1);
   249a4:	ea5f 0c53 	movs.w	ip, r3, lsr #1
   249a8:	ea4f 0b32 	mov.w	fp, r2, rrx
   249ac:	2500      	movs	r5, #0
   249ae:	f002 0401 	and.w	r4, r2, #1
   249b2:	eb1b 0204 	adds.w	r2, fp, r4
   249b6:	eb4c 0305 	adc.w	r3, ip, r5
   249ba:	e9c0 2300 	strd	r2, r3, [r0]
}
   249be:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}

000249c2 <_ldiv5>:
		q = (uint64_t)(hi / 5U) << shifts[i];
   249c2:	2105      	movs	r1, #5
	uint64_t rem = *v, quot = 0U, q;
   249c4:	e9d0 2300 	ldrd	r2, r3, [r0]
{
   249c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rem += 2U;
   249cc:	f112 0802 	adds.w	r8, r2, #2
   249d0:	f143 0900 	adc.w	r9, r3, #0
		q = (uint64_t)(hi / 5U) << shifts[i];
   249d4:	fbb9 f5f1 	udiv	r5, r9, r1
		rem -= q * 5U;
   249d8:	2600      	movs	r6, #0
   249da:	fb01 f705 	mul.w	r7, r1, r5
   249de:	ebb8 0806 	subs.w	r8, r8, r6
   249e2:	eb69 0907 	sbc.w	r9, r9, r7
		hi = rem >> shifts[i];
   249e6:	ea4f 06d8 	mov.w	r6, r8, lsr #3
   249ea:	ea46 7649 	orr.w	r6, r6, r9, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   249ee:	fbb6 fcf1 	udiv	ip, r6, r1
   249f2:	2400      	movs	r4, #0
		rem -= q * 5U;
   249f4:	46c2      	mov	sl, r8
		q = (uint64_t)(hi / 5U) << shifts[i];
   249f6:	ea4f 06cc 	mov.w	r6, ip, lsl #3
		rem -= q * 5U;
   249fa:	fba6 8901 	umull	r8, r9, r6, r1
		quot += q;
   249fe:	19a2      	adds	r2, r4, r6
		q = (uint64_t)(hi / 5U) << shifts[i];
   24a00:	ea4f 775c 	mov.w	r7, ip, lsr #29
		quot += q;
   24a04:	eb45 0307 	adc.w	r3, r5, r7
   24a08:	4614      	mov	r4, r2
		rem -= q * 5U;
   24a0a:	ebba 0208 	subs.w	r2, sl, r8
		q = (uint64_t)(hi / 5U) << shifts[i];
   24a0e:	fbb2 f2f1 	udiv	r2, r2, r1
		quot += q;
   24a12:	461d      	mov	r5, r3
   24a14:	18a4      	adds	r4, r4, r2
   24a16:	f145 0500 	adc.w	r5, r5, #0
	*v = quot;
   24a1a:	e9c0 4500 	strd	r4, r5, [r0]
}
   24a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00024a22 <_get_digit>:
	if (*digit_count > 0) {
   24a22:	680b      	ldr	r3, [r1, #0]
{
   24a24:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
	if (*digit_count > 0) {
   24a28:	2b00      	cmp	r3, #0
   24a2a:	dd13      	ble.n	24a54 <_get_digit+0x32>
		*digit_count -= 1;
   24a2c:	3b01      	subs	r3, #1
   24a2e:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   24a30:	210a      	movs	r1, #10
   24a32:	6802      	ldr	r2, [r0, #0]
   24a34:	6844      	ldr	r4, [r0, #4]
   24a36:	fba2 bc01 	umull	fp, ip, r2, r1
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   24a3a:	465a      	mov	r2, fp
		*fr = *fr * 10U;
   24a3c:	fb01 cc04 	mla	ip, r1, r4, ip
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   24a40:	f02c 4370 	bic.w	r3, ip, #4026531840	; 0xf0000000
   24a44:	e9c0 2300 	strd	r2, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   24a48:	ea4f 711c 	mov.w	r1, ip, lsr #28
   24a4c:	3130      	adds	r1, #48	; 0x30
}
   24a4e:	4608      	mov	r0, r1
   24a50:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
		rval = '0';
   24a54:	2130      	movs	r1, #48	; 0x30
   24a56:	e7fa      	b.n	24a4e <_get_digit+0x2c>

00024a58 <_stdout_hook_default>:
}
   24a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24a5c:	4770      	bx	lr

00024a5e <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   24a5e:	684b      	ldr	r3, [r1, #4]
   24a60:	2b01      	cmp	r3, #1
   24a62:	dd07      	ble.n	24a74 <sprintf_out+0x16>
		*(p->ptr) = c;
   24a64:	680b      	ldr	r3, [r1, #0]
   24a66:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   24a68:	680b      	ldr	r3, [r1, #0]
   24a6a:	3301      	adds	r3, #1
   24a6c:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   24a6e:	684b      	ldr	r3, [r1, #4]
   24a70:	3b01      	subs	r3, #1
   24a72:	604b      	str	r3, [r1, #4]
}
   24a74:	2000      	movs	r0, #0
   24a76:	4770      	bx	lr

00024a78 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   24a78:	b508      	push	{r3, lr}
	net_if_init();
   24a7a:	f7ec fe41 	bl	11700 <net_if_init>
	net_if_post_init();
   24a7e:	f7ec fe57 	bl	11730 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   24a82:	2000      	movs	r0, #0
   24a84:	bd08      	pop	{r3, pc}

00024a86 <l2_flags_get>:
	return iface->if_dev->l2;
   24a86:	6803      	ldr	r3, [r0, #0]
   24a88:	685b      	ldr	r3, [r3, #4]
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   24a8a:	b113      	cbz	r3, 24a92 <l2_flags_get+0xc>
   24a8c:	68db      	ldr	r3, [r3, #12]
   24a8e:	b103      	cbz	r3, 24a92 <l2_flags_get+0xc>
		flags = net_if_l2(iface)->get_flags(iface);
   24a90:	4718      	bx	r3
}
   24a92:	2000      	movs	r0, #0
   24a94:	4770      	bx	lr

00024a96 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24a96:	e8d0 0faf 	lda	r0, [r0]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   24a9a:	4108      	asrs	r0, r1
}
   24a9c:	f000 0001 	and.w	r0, r0, #1
   24aa0:	4770      	bx	lr

00024aa2 <net_if_up>:
{
   24aa2:	b510      	push	{r4, lr}
   24aa4:	4604      	mov	r4, r0
	return atomic_test_bit(iface->if_dev->flags, value);
   24aa6:	6800      	ldr	r0, [r0, #0]
   24aa8:	2100      	movs	r1, #0
   24aaa:	300c      	adds	r0, #12
   24aac:	f7ff fff3 	bl	24a96 <atomic_test_bit>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   24ab0:	b9d8      	cbnz	r0, 24aea <net_if_up+0x48>
	     net_if_is_socket_offloaded(iface))) {
   24ab2:	6823      	ldr	r3, [r4, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   24ab4:	7e9a      	ldrb	r2, [r3, #26]
   24ab6:	b14a      	cbz	r2, 24acc <net_if_up+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24ab8:	330c      	adds	r3, #12
   24aba:	e8d3 2fef 	ldaex	r2, [r3]
   24abe:	f042 0201 	orr.w	r2, r2, #1
   24ac2:	e8c3 2fe1 	stlex	r1, r2, [r3]
   24ac6:	2900      	cmp	r1, #0
   24ac8:	d1f7      	bne.n	24aba <net_if_up+0x18>
}
   24aca:	bd10      	pop	{r4, pc}
	return iface->if_dev->l2;
   24acc:	685b      	ldr	r3, [r3, #4]
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   24ace:	b973      	cbnz	r3, 24aee <net_if_up+0x4c>
   24ad0:	6823      	ldr	r3, [r4, #0]
   24ad2:	330c      	adds	r3, #12
   24ad4:	e8d3 2fef 	ldaex	r2, [r3]
   24ad8:	f042 0201 	orr.w	r2, r2, #1
   24adc:	e8c3 2fe1 	stlex	r1, r2, [r3]
   24ae0:	2900      	cmp	r1, #0
   24ae2:	d1f7      	bne.n	24ad4 <net_if_up+0x32>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   24ae4:	4620      	mov	r0, r4
   24ae6:	f7ff ffce 	bl	24a86 <l2_flags_get>
		return 0;
   24aea:	2000      	movs	r0, #0
   24aec:	e7ed      	b.n	24aca <net_if_up+0x28>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   24aee:	689b      	ldr	r3, [r3, #8]
   24af0:	2b00      	cmp	r3, #0
   24af2:	d0ed      	beq.n	24ad0 <net_if_up+0x2e>
	status = net_if_l2(iface)->enable(iface, true);
   24af4:	2101      	movs	r1, #1
   24af6:	4620      	mov	r0, r4
   24af8:	4798      	blx	r3
	if (status < 0) {
   24afa:	2800      	cmp	r0, #0
   24afc:	dae8      	bge.n	24ad0 <net_if_up+0x2e>
   24afe:	e7e4      	b.n	24aca <net_if_up+0x28>

00024b00 <net_byte_to_hex>:
{
   24b00:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   24b02:	090c      	lsrs	r4, r1, #4
		if (i == 0 && !pad && !val) {
   24b04:	b1ab      	cbz	r3, 24b32 <net_byte_to_hex+0x32>
		if (val < 10) {
   24b06:	2c09      	cmp	r4, #9
			*ptr++ = (char) (val - 10 + base);
   24b08:	bf86      	itte	hi
   24b0a:	f1a2 050a 	subhi.w	r5, r2, #10
   24b0e:	1964      	addhi	r4, r4, r5
			*ptr++ = (char) (val + '0');
   24b10:	3430      	addls	r4, #48	; 0x30
   24b12:	1c43      	adds	r3, r0, #1
   24b14:	7004      	strb	r4, [r0, #0]
   24b16:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   24b1a:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   24b1c:	bf84      	itt	hi
   24b1e:	3a0a      	subhi	r2, #10
   24b20:	1889      	addhi	r1, r1, r2
	*ptr = '\0';
   24b22:	f04f 0200 	mov.w	r2, #0
			*ptr++ = (char) (val + '0');
   24b26:	bf98      	it	ls
   24b28:	3130      	addls	r1, #48	; 0x30
   24b2a:	7019      	strb	r1, [r3, #0]
	*ptr = '\0';
   24b2c:	705a      	strb	r2, [r3, #1]
   24b2e:	1c58      	adds	r0, r3, #1
}
   24b30:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   24b32:	2c00      	cmp	r4, #0
   24b34:	d1e7      	bne.n	24b06 <net_byte_to_hex+0x6>
   24b36:	4603      	mov	r3, r0
   24b38:	e7ed      	b.n	24b16 <net_byte_to_hex+0x16>

00024b3a <z_impl_net_addr_pton>:
#endif /* CONFIG_USERSPACE */

int z_impl_net_addr_pton(sa_family_t family, const char *src,
			 void *dst)
{
	if (family == AF_INET) {
   24b3a:	2801      	cmp	r0, #1
{
   24b3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   24b40:	460c      	mov	r4, r1
   24b42:	4616      	mov	r6, r2
	if (family == AF_INET) {
   24b44:	d128      	bne.n	24b98 <z_impl_net_addr_pton+0x5e>
		struct in_addr *addr = (struct in_addr *)dst;
		size_t i, len;

		len = strlen(src);
   24b46:	4608      	mov	r0, r1
   24b48:	f7ff fe86 	bl	24858 <strlen>
   24b4c:	4623      	mov	r3, r4
   24b4e:	4420      	add	r0, r4
		for (i = 0; i < len; i++) {
   24b50:	4283      	cmp	r3, r0
   24b52:	d116      	bne.n	24b82 <z_impl_net_addr_pton+0x48>
			    src[i] != '.') {
				return -EINVAL;
			}
		}

		(void)memset(addr, 0, sizeof(struct in_addr));
   24b54:	4630      	mov	r0, r6
   24b56:	2204      	movs	r2, #4
   24b58:	2100      	movs	r1, #0
   24b5a:	f7ff fede 	bl	2491a <memset>
   24b5e:	1e75      	subs	r5, r6, #1
   24b60:	3603      	adds	r6, #3

		for (i = 0; i < sizeof(struct in_addr); i++) {
			char *endptr;

			addr->s4_addr[i] = strtol(src, &endptr, 10);
   24b62:	4620      	mov	r0, r4
   24b64:	220a      	movs	r2, #10
   24b66:	a901      	add	r1, sp, #4
   24b68:	f7ff fd3c 	bl	245e4 <strtol>

			src = ++endptr;
   24b6c:	9c01      	ldr	r4, [sp, #4]
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   24b6e:	f805 0f01 	strb.w	r0, [r5, #1]!
		for (i = 0; i < sizeof(struct in_addr); i++) {
   24b72:	42ae      	cmp	r6, r5
			src = ++endptr;
   24b74:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   24b78:	d1f3      	bne.n	24b62 <z_impl_net_addr_pton+0x28>
		}
	} else {
		return -EINVAL;
	}

	return 0;
   24b7a:	2000      	movs	r0, #0
}
   24b7c:	b003      	add	sp, #12
   24b7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (!(src[i] >= '0' && src[i] <= '9') &&
   24b82:	f813 2b01 	ldrb.w	r2, [r3], #1
   24b86:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   24b8a:	2909      	cmp	r1, #9
   24b8c:	d9e0      	bls.n	24b50 <z_impl_net_addr_pton+0x16>
   24b8e:	2a2e      	cmp	r2, #46	; 0x2e
   24b90:	d0de      	beq.n	24b50 <z_impl_net_addr_pton+0x16>
				return -EINVAL;
   24b92:	f06f 0015 	mvn.w	r0, #21
   24b96:	e7f1      	b.n	24b7c <z_impl_net_addr_pton+0x42>
	} else if (family == AF_INET6) {
   24b98:	2802      	cmp	r0, #2
   24b9a:	d1fa      	bne.n	24b92 <z_impl_net_addr_pton+0x58>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   24b9c:	212e      	movs	r1, #46	; 0x2e
   24b9e:	4620      	mov	r0, r4
   24ba0:	f7ff fe3f 	bl	24822 <strchr>
		if (*src == ':') {
   24ba4:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   24ba6:	2800      	cmp	r0, #0
   24ba8:	bf14      	ite	ne
   24baa:	2706      	movne	r7, #6
   24bac:	2708      	moveq	r7, #8
		if (*src == ':') {
   24bae:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   24bb0:	bf08      	it	eq
   24bb2:	3401      	addeq	r4, #1
		len = strlen(src);
   24bb4:	4620      	mov	r0, r4
   24bb6:	f7ff fe4f 	bl	24858 <strlen>
		for (i = 0; i < len; i++) {
   24bba:	4623      	mov	r3, r4
   24bbc:	1b1a      	subs	r2, r3, r4
   24bbe:	4290      	cmp	r0, r2
   24bc0:	dc32      	bgt.n	24c28 <z_impl_net_addr_pton+0xee>
		for (i = 0; i < expected_groups; i++) {
   24bc2:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   24bc4:	46a8      	mov	r8, r5
			if (!src || *src == '\0') {
   24bc6:	2c00      	cmp	r4, #0
   24bc8:	d0e3      	beq.n	24b92 <z_impl_net_addr_pton+0x58>
   24bca:	7823      	ldrb	r3, [r4, #0]
   24bcc:	2b00      	cmp	r3, #0
   24bce:	d0e0      	beq.n	24b92 <z_impl_net_addr_pton+0x58>
			if (*src != ':') {
   24bd0:	2b3a      	cmp	r3, #58	; 0x3a
   24bd2:	ea4f 0345 	mov.w	r3, r5, lsl #1
   24bd6:	d135      	bne.n	24c44 <z_impl_net_addr_pton+0x10a>
   24bd8:	4433      	add	r3, r6
			for (; i < expected_groups; i++) {
   24bda:	42bd      	cmp	r5, r7
   24bdc:	db52      	blt.n	24c84 <z_impl_net_addr_pton+0x14a>
			tmp = strrchr(src, ':');
   24bde:	213a      	movs	r1, #58	; 0x3a
   24be0:	4620      	mov	r0, r4
   24be2:	f7ff fe2c 	bl	2483e <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   24be6:	42a0      	cmp	r0, r4
   24be8:	d164      	bne.n	24cb4 <z_impl_net_addr_pton+0x17a>
   24bea:	2f06      	cmp	r7, #6
   24bec:	d151      	bne.n	24c92 <z_impl_net_addr_pton+0x158>
				src++;
   24bee:	1c44      	adds	r4, r0, #1
		if (expected_groups == 6) {
   24bf0:	2f06      	cmp	r7, #6
   24bf2:	d1c2      	bne.n	24b7a <z_impl_net_addr_pton+0x40>
			for (i = 0; i < 4; i++) {
   24bf4:	2500      	movs	r5, #0
   24bf6:	360c      	adds	r6, #12
				if (!src || !*src) {
   24bf8:	2c00      	cmp	r4, #0
   24bfa:	d0ca      	beq.n	24b92 <z_impl_net_addr_pton+0x58>
   24bfc:	7823      	ldrb	r3, [r4, #0]
   24bfe:	2b00      	cmp	r3, #0
   24c00:	d0c7      	beq.n	24b92 <z_impl_net_addr_pton+0x58>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   24c02:	220a      	movs	r2, #10
   24c04:	2100      	movs	r1, #0
   24c06:	4620      	mov	r0, r4
   24c08:	f7ff fcec 	bl	245e4 <strtol>
				src = strchr(src, '.');
   24c0c:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   24c0e:	f806 0b01 	strb.w	r0, [r6], #1
				src = strchr(src, '.');
   24c12:	4620      	mov	r0, r4
   24c14:	f7ff fe05 	bl	24822 <strchr>
				if (src) {
   24c18:	4604      	mov	r4, r0
   24c1a:	2800      	cmp	r0, #0
   24c1c:	d04f      	beq.n	24cbe <z_impl_net_addr_pton+0x184>
					src++;
   24c1e:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
   24c20:	3501      	adds	r5, #1
   24c22:	2d04      	cmp	r5, #4
   24c24:	d1e8      	bne.n	24bf8 <z_impl_net_addr_pton+0xbe>
   24c26:	e7a8      	b.n	24b7a <z_impl_net_addr_pton+0x40>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   24c28:	f813 2b01 	ldrb.w	r2, [r3], #1
   24c2c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   24c30:	290a      	cmp	r1, #10
   24c32:	d9c3      	bls.n	24bbc <z_impl_net_addr_pton+0x82>
   24c34:	f022 0120 	bic.w	r1, r2, #32
   24c38:	3941      	subs	r1, #65	; 0x41
   24c3a:	2905      	cmp	r1, #5
   24c3c:	d9be      	bls.n	24bbc <z_impl_net_addr_pton+0x82>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   24c3e:	2a2e      	cmp	r2, #46	; 0x2e
   24c40:	d1a7      	bne.n	24b92 <z_impl_net_addr_pton+0x58>
   24c42:	e7bb      	b.n	24bbc <z_impl_net_addr_pton+0x82>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   24c44:	2210      	movs	r2, #16
   24c46:	2100      	movs	r1, #0
   24c48:	4620      	mov	r0, r4
   24c4a:	f7ff fccb 	bl	245e4 <strtol>
   24c4e:	2210      	movs	r2, #16
   24c50:	4681      	mov	r9, r0
   24c52:	2100      	movs	r1, #0
   24c54:	4620      	mov	r0, r4
   24c56:	f7ff fcc5 	bl	245e4 <strtol>
   24c5a:	f3c9 2907 	ubfx	r9, r9, #8, #8
   24c5e:	ea49 2900 	orr.w	r9, r9, r0, lsl #8
   24c62:	f826 9015 	strh.w	r9, [r6, r5, lsl #1]
				src = strchr(src, ':');
   24c66:	213a      	movs	r1, #58	; 0x3a
   24c68:	4620      	mov	r0, r4
   24c6a:	f7ff fdda 	bl	24822 <strchr>
				if (src) {
   24c6e:	4604      	mov	r4, r0
   24c70:	b108      	cbz	r0, 24c76 <z_impl_net_addr_pton+0x13c>
			src++;
   24c72:	3401      	adds	r4, #1
   24c74:	e002      	b.n	24c7c <z_impl_net_addr_pton+0x142>
					if (i < expected_groups - 1) {
   24c76:	1e7b      	subs	r3, r7, #1
   24c78:	42ab      	cmp	r3, r5
   24c7a:	dc8a      	bgt.n	24b92 <z_impl_net_addr_pton+0x58>
		for (i = 0; i < expected_groups; i++) {
   24c7c:	3501      	adds	r5, #1
   24c7e:	42af      	cmp	r7, r5
   24c80:	dca1      	bgt.n	24bc6 <z_impl_net_addr_pton+0x8c>
   24c82:	e7b5      	b.n	24bf0 <z_impl_net_addr_pton+0xb6>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   24c84:	f883 8000 	strb.w	r8, [r3]
   24c88:	f883 8001 	strb.w	r8, [r3, #1]
			for (; i < expected_groups; i++) {
   24c8c:	3501      	adds	r5, #1
   24c8e:	3302      	adds	r3, #2
   24c90:	e7a3      	b.n	24bda <z_impl_net_addr_pton+0xa0>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   24c92:	7863      	ldrb	r3, [r4, #1]
   24c94:	2b00      	cmp	r3, #0
   24c96:	d0aa      	beq.n	24bee <z_impl_net_addr_pton+0xb4>
			i = expected_groups - 1;
   24c98:	1e7d      	subs	r5, r7, #1
   24c9a:	3001      	adds	r0, #1
				if (*tmp == ':') {
   24c9c:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   24ca0:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   24ca2:	bf08      	it	eq
   24ca4:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
				if (i < 0) {
   24ca8:	2d00      	cmp	r5, #0
   24caa:	f6ff af72 	blt.w	24b92 <z_impl_net_addr_pton+0x58>
			} while (tmp-- != src);
   24cae:	42a0      	cmp	r0, r4
   24cb0:	d1f4      	bne.n	24c9c <z_impl_net_addr_pton+0x162>
   24cb2:	e7de      	b.n	24c72 <z_impl_net_addr_pton+0x138>
			if (expected_groups == 6) {
   24cb4:	2f06      	cmp	r7, #6
				tmp--;
   24cb6:	bf08      	it	eq
   24cb8:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
   24cbc:	e7ec      	b.n	24c98 <z_impl_net_addr_pton+0x15e>
					if (i < 3) {
   24cbe:	2d03      	cmp	r5, #3
   24cc0:	f47f af67 	bne.w	24b92 <z_impl_net_addr_pton+0x58>
   24cc4:	e7ac      	b.n	24c20 <z_impl_net_addr_pton+0xe6>

00024cc6 <gpio_nrfx_write>:
{
   24cc6:	b510      	push	{r4, lr}
	return port->config->config_info;
   24cc8:	6804      	ldr	r4, [r0, #0]
   24cca:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24ccc:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   24cce:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24cd0:	6824      	ldr	r4, [r4, #0]
   24cd2:	69c0      	ldr	r0, [r0, #28]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   24cd4:	d103      	bne.n	24cde <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   24cd6:	4058      	eors	r0, r3
    p_reg->OUT = value;
   24cd8:	6060      	str	r0, [r4, #4]
}
   24cda:	2000      	movs	r0, #0
   24cdc:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   24cde:	3300      	adds	r3, #0
   24ce0:	f04f 0101 	mov.w	r1, #1
   24ce4:	bf18      	it	ne
   24ce6:	2301      	movne	r3, #1
   24ce8:	40d0      	lsrs	r0, r2
   24cea:	f000 0001 	and.w	r0, r0, #1
   24cee:	4091      	lsls	r1, r2
   24cf0:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   24cf2:	bf14      	ite	ne
   24cf4:	60a1      	strne	r1, [r4, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   24cf6:	60e1      	streq	r1, [r4, #12]
   24cf8:	e7ef      	b.n	24cda <gpio_nrfx_write+0x14>

00024cfa <gpio_nrfx_read>:
{
   24cfa:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   24cfc:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   24cfe:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24d00:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   24d02:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24d04:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   24d06:	2901      	cmp	r1, #1
    return p_reg->DIR;
   24d08:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   24d0a:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   24d0c:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   24d0e:	ea80 0004 	eor.w	r0, r0, r4
   24d12:	ea84 0405 	eor.w	r4, r4, r5
   24d16:	ea04 0406 	and.w	r4, r4, r6
   24d1a:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   24d1e:	bf1c      	itt	ne
   24d20:	40d0      	lsrne	r0, r2
   24d22:	f000 0001 	andne.w	r0, r0, #1
   24d26:	6018      	str	r0, [r3, #0]
}
   24d28:	2000      	movs	r0, #0
   24d2a:	bd70      	pop	{r4, r5, r6, pc}

00024d2c <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   24d2c:	6883      	ldr	r3, [r0, #8]
{
   24d2e:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   24d30:	6818      	ldr	r0, [r3, #0]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   24d32:	b158      	cbz	r0, 24d4c <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24d34:	2400      	movs	r4, #0
   24d36:	4281      	cmp	r1, r0
   24d38:	d113      	bne.n	24d62 <gpio_nrfx_manage_callback+0x36>
   24d3a:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   24d3c:	b95c      	cbnz	r4, 24d56 <gpio_nrfx_manage_callback+0x2a>
   24d3e:	685c      	ldr	r4, [r3, #4]
	list->head = node;
   24d40:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   24d42:	42a1      	cmp	r1, r4
   24d44:	d100      	bne.n	24d48 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   24d46:	6058      	str	r0, [r3, #4]
	parent->next = child;
   24d48:	2000      	movs	r0, #0
   24d4a:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   24d4c:	b972      	cbnz	r2, 24d6c <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   24d4e:	2000      	movs	r0, #0
}
   24d50:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24d52:	4628      	mov	r0, r5
   24d54:	e7ef      	b.n	24d36 <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
   24d56:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   24d58:	6858      	ldr	r0, [r3, #4]
   24d5a:	4281      	cmp	r1, r0
	list->tail = node;
   24d5c:	bf08      	it	eq
   24d5e:	605c      	streq	r4, [r3, #4]
   24d60:	e7f2      	b.n	24d48 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   24d62:	6805      	ldr	r5, [r0, #0]
   24d64:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24d66:	2d00      	cmp	r5, #0
   24d68:	d1f3      	bne.n	24d52 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   24d6a:	b13a      	cbz	r2, 24d7c <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   24d6c:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   24d6e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   24d70:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   24d72:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   24d74:	2800      	cmp	r0, #0
   24d76:	d1ea      	bne.n	24d4e <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   24d78:	6059      	str	r1, [r3, #4]
   24d7a:	e7e9      	b.n	24d50 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   24d7c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   24d80:	e7e6      	b.n	24d50 <gpio_nrfx_manage_callback+0x24>

00024d82 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   24d82:	2901      	cmp	r1, #1
{
   24d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   24d88:	bf18      	it	ne
   24d8a:	b2d4      	uxtbne	r4, r2
{
   24d8c:	4606      	mov	r6, r0
		to_pin   = pin;
   24d8e:	bf12      	itee	ne
   24d90:	4625      	movne	r5, r4
		to_pin   = 31U;
   24d92:	251f      	moveq	r5, #31
		from_pin = 0U;
   24d94:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   24d96:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   24d9a:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   24d9c:	42ac      	cmp	r4, r5
   24d9e:	d902      	bls.n	24da6 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   24da0:	2000      	movs	r0, #0
}
   24da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   24da6:	68fb      	ldr	r3, [r7, #12]
   24da8:	fa08 f204 	lsl.w	r2, r8, r4
   24dac:	ea23 0302 	bic.w	r3, r3, r2
   24db0:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   24db2:	4621      	mov	r1, r4
   24db4:	4630      	mov	r0, r6
   24db6:	f7ec fdbf 	bl	11938 <gpiote_pin_int_cfg>
		if (res != 0) {
   24dba:	2800      	cmp	r0, #0
   24dbc:	d1f1      	bne.n	24da2 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   24dbe:	3401      	adds	r4, #1
   24dc0:	b2e4      	uxtb	r4, r4
   24dc2:	e7eb      	b.n	24d9c <gpio_nrfx_pin_disable_callback+0x1a>

00024dc4 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   24dc4:	2901      	cmp	r1, #1
{
   24dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   24dca:	bf18      	it	ne
   24dcc:	b2d4      	uxtbne	r4, r2
{
   24dce:	4606      	mov	r6, r0
		to_pin   = pin;
   24dd0:	bf12      	itee	ne
   24dd2:	4625      	movne	r5, r4
		to_pin   = 31U;
   24dd4:	251f      	moveq	r5, #31
		from_pin = 0U;
   24dd6:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   24dd8:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   24ddc:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   24dde:	42ac      	cmp	r4, r5
   24de0:	d902      	bls.n	24de8 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   24de2:	2000      	movs	r0, #0
}
   24de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   24de8:	68fb      	ldr	r3, [r7, #12]
   24dea:	fa08 f204 	lsl.w	r2, r8, r4
   24dee:	4313      	orrs	r3, r2
   24df0:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   24df2:	4621      	mov	r1, r4
   24df4:	4630      	mov	r0, r6
   24df6:	f7ec fd9f 	bl	11938 <gpiote_pin_int_cfg>
		if (res != 0) {
   24dfa:	2800      	cmp	r0, #0
   24dfc:	d1f2      	bne.n	24de4 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   24dfe:	3401      	adds	r4, #1
   24e00:	b2e4      	uxtb	r4, r4
   24e02:	e7ec      	b.n	24dde <gpio_nrfx_pin_enable_callback+0x1a>

00024e04 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   24e04:	6883      	ldr	r3, [r0, #8]
   24e06:	689b      	ldr	r3, [r3, #8]
   24e08:	7b9a      	ldrb	r2, [r3, #14]
   24e0a:	b172      	cbz	r2, 24e2a <uarte_nrfx_isr_int+0x26>
	return dev->config->config_info;
   24e0c:	6802      	ldr	r2, [r0, #0]
	return config->uarte_regs;
   24e0e:	6892      	ldr	r2, [r2, #8]
   24e10:	6812      	ldr	r2, [r2, #0]
   24e12:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (data->int_driven->disable_tx_irq &&
   24e16:	b141      	cbz	r1, 24e2a <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   24e18:	f44f 7180 	mov.w	r1, #256	; 0x100
   24e1c:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24e20:	2101      	movs	r1, #1
   24e22:	60d1      	str	r1, [r2, #12]
		data->int_driven->disable_tx_irq = false;
   24e24:	2200      	movs	r2, #0
   24e26:	739a      	strb	r2, [r3, #14]
		return;
   24e28:	4770      	bx	lr
	if (data->int_driven->cb) {
   24e2a:	681a      	ldr	r2, [r3, #0]
   24e2c:	b10a      	cbz	r2, 24e32 <uarte_nrfx_isr_int+0x2e>
		data->int_driven->cb(data->int_driven->cb_data);
   24e2e:	6858      	ldr	r0, [r3, #4]
   24e30:	4710      	bx	r2
}
   24e32:	4770      	bx	lr

00024e34 <uarte_nrfx_config_get>:
{
   24e34:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   24e36:	6882      	ldr	r2, [r0, #8]
   24e38:	e892 0003 	ldmia.w	r2, {r0, r1}
   24e3c:	e883 0003 	stmia.w	r3, {r0, r1}
}
   24e40:	2000      	movs	r0, #0
   24e42:	4770      	bx	lr

00024e44 <uarte_nrfx_err_check>:
	return dev->config->config_info;
   24e44:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   24e46:	689b      	ldr	r3, [r3, #8]
   24e48:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24e4a:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   24e4e:	b118      	cbz	r0, 24e58 <uarte_nrfx_err_check+0x14>
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   24e50:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   24e54:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   24e58:	4770      	bx	lr

00024e5a <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   24e5a:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   24e5c:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   24e5e:	689b      	ldr	r3, [r3, #8]
   24e60:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24e62:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   24e66:	b138      	cbz	r0, 24e78 <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   24e68:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24e6a:	2000      	movs	r0, #0
   24e6c:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24e6e:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24e70:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24e74:	601a      	str	r2, [r3, #0]
	return 0;
   24e76:	4770      	bx	lr
		return -1;
   24e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   24e7c:	4770      	bx	lr

00024e7e <uarte_nrfx_poll_out>:
{
   24e7e:	b082      	sub	sp, #8
   24e80:	aa02      	add	r2, sp, #8
   24e82:	f802 1d01 	strb.w	r1, [r2, #-1]!
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24e86:	2100      	movs	r1, #0
	return dev->config->config_info;
   24e88:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   24e8a:	689b      	ldr	r3, [r3, #8]
   24e8c:	681b      	ldr	r3, [r3, #0]
   24e8e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   24e92:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   24e96:	2201      	movs	r2, #1
   24e98:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24e9c:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24e9e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   24ea2:	2900      	cmp	r1, #0
   24ea4:	d0fb      	beq.n	24e9e <uarte_nrfx_poll_out+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24ea6:	60da      	str	r2, [r3, #12]
}
   24ea8:	b002      	add	sp, #8
   24eaa:	4770      	bx	lr

00024eac <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   24eac:	6803      	ldr	r3, [r0, #0]
{
   24eae:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   24eb0:	689b      	ldr	r3, [r3, #8]
   24eb2:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24eb4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   24eb8:	b1bb      	cbz	r3, 24eea <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   24eba:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   24ebc:	68ab      	ldr	r3, [r5, #8]
   24ebe:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24ec0:	2300      	movs	r3, #0
   24ec2:	4290      	cmp	r0, r2
   24ec4:	bfa8      	it	ge
   24ec6:	4610      	movge	r0, r2
   24ec8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   24ecc:	68aa      	ldr	r2, [r5, #8]
	for (int i = 0; i < len; i++) {
   24ece:	4283      	cmp	r3, r0
   24ed0:	6892      	ldr	r2, [r2, #8]
   24ed2:	db06      	blt.n	24ee2 <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24ed4:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   24ed6:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   24eda:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24ede:	60a3      	str	r3, [r4, #8]
}
   24ee0:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   24ee2:	5cce      	ldrb	r6, [r1, r3]
   24ee4:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   24ee6:	3301      	adds	r3, #1
   24ee8:	e7f0      	b.n	24ecc <uarte_nrfx_fifo_fill+0x20>
		return 0;
   24eea:	4618      	mov	r0, r3
   24eec:	e7f8      	b.n	24ee0 <uarte_nrfx_fifo_fill+0x34>

00024eee <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   24eee:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   24ef0:	689b      	ldr	r3, [r3, #8]
   24ef2:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24ef4:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   24ef8:	b143      	cbz	r3, 24f0c <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   24efa:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24efc:	2000      	movs	r0, #0
   24efe:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24f02:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   24f04:	7b1b      	ldrb	r3, [r3, #12]
   24f06:	700b      	strb	r3, [r1, #0]
   24f08:	6010      	str	r0, [r2, #0]
   24f0a:	4770      	bx	lr
	int num_rx = 0;
   24f0c:	4618      	mov	r0, r3
}
   24f0e:	4770      	bx	lr

00024f10 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   24f10:	2100      	movs	r1, #0
	return dev->config->config_info;
   24f12:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   24f14:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   24f16:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   24f18:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   24f1a:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   24f1c:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   24f1e:	f44f 7280 	mov.w	r2, #256	; 0x100
   24f22:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   24f26:	4770      	bx	lr

00024f28 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   24f28:	2201      	movs	r2, #1
   24f2a:	6883      	ldr	r3, [r0, #8]
   24f2c:	689b      	ldr	r3, [r3, #8]
   24f2e:	739a      	strb	r2, [r3, #14]
}
   24f30:	4770      	bx	lr

00024f32 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   24f32:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   24f34:	689b      	ldr	r3, [r3, #8]
   24f36:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24f38:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   24f3c:	b118      	cbz	r0, 24f46 <uarte_nrfx_irq_tx_ready_complete+0x14>
    return p_reg->INTENSET & mask;
   24f3e:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   24f42:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   24f46:	4770      	bx	lr

00024f48 <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   24f48:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   24f4a:	689b      	ldr	r3, [r3, #8]
   24f4c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24f4e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   24f52:	3000      	adds	r0, #0
   24f54:	bf18      	it	ne
   24f56:	2001      	movne	r0, #1
   24f58:	4770      	bx	lr

00024f5a <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   24f5a:	2210      	movs	r2, #16
	return dev->config->config_info;
   24f5c:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   24f5e:	689b      	ldr	r3, [r3, #8]
   24f60:	681b      	ldr	r3, [r3, #0]
   24f62:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   24f66:	4770      	bx	lr

00024f68 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   24f68:	2210      	movs	r2, #16
	return dev->config->config_info;
   24f6a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   24f6c:	689b      	ldr	r3, [r3, #8]
   24f6e:	681b      	ldr	r3, [r3, #0]
   24f70:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   24f74:	4770      	bx	lr

00024f76 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   24f76:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   24f7a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   24f7c:	689b      	ldr	r3, [r3, #8]
   24f7e:	681b      	ldr	r3, [r3, #0]
   24f80:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   24f84:	4770      	bx	lr

00024f86 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   24f86:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   24f8a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   24f8c:	689b      	ldr	r3, [r3, #8]
   24f8e:	681b      	ldr	r3, [r3, #0]
   24f90:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   24f94:	4770      	bx	lr

00024f96 <uarte_nrfx_irq_update>:
}
   24f96:	2001      	movs	r0, #1
   24f98:	4770      	bx	lr

00024f9a <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   24f9a:	6883      	ldr	r3, [r0, #8]
   24f9c:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   24f9e:	e9c3 1200 	strd	r1, r2, [r3]
}
   24fa2:	4770      	bx	lr

00024fa4 <uarte_nrfx_irq_is_pending>:
{
   24fa4:	b508      	push	{r3, lr}
	return dev->config->config_info;
   24fa6:	6803      	ldr	r3, [r0, #0]
{
   24fa8:	4602      	mov	r2, r0
	return config->uarte_regs;
   24faa:	689b      	ldr	r3, [r3, #8]
   24fac:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   24fae:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   24fb2:	05db      	lsls	r3, r3, #23
   24fb4:	d405      	bmi.n	24fc2 <uarte_nrfx_irq_is_pending+0x1e>
   24fb6:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   24fba:	f010 0010 	ands.w	r0, r0, #16
   24fbe:	d106      	bne.n	24fce <uarte_nrfx_irq_is_pending+0x2a>
}
   24fc0:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   24fc2:	f7ff ffb6 	bl	24f32 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   24fc6:	2800      	cmp	r0, #0
   24fc8:	d0f5      	beq.n	24fb6 <uarte_nrfx_irq_is_pending+0x12>
		||
   24fca:	2001      	movs	r0, #1
   24fcc:	e7f8      	b.n	24fc0 <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   24fce:	4610      	mov	r0, r2
   24fd0:	f7ff ffba 	bl	24f48 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   24fd4:	3000      	adds	r0, #0
   24fd6:	bf18      	it	ne
   24fd8:	2001      	movne	r0, #1
   24fda:	e7f1      	b.n	24fc0 <uarte_nrfx_irq_is_pending+0x1c>

00024fdc <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   24fdc:	2000      	movs	r0, #0
   24fde:	4770      	bx	lr

00024fe0 <entropy_cc310_rng_get_entropy>:
{
   24fe0:	b513      	push	{r0, r1, r4, lr}
   24fe2:	4614      	mov	r4, r2
   24fe4:	4608      	mov	r0, r1
	res = spm_request_random_number(buffer, length, &olen);
   24fe6:	aa01      	add	r2, sp, #4
   24fe8:	4621      	mov	r1, r4
   24fea:	f7e3 f801 	bl	7ff0 <spm_request_random_number>
	if (olen != length) {
   24fee:	9b01      	ldr	r3, [sp, #4]
   24ff0:	429c      	cmp	r4, r3
}
   24ff2:	bf18      	it	ne
   24ff4:	f06f 0015 	mvnne.w	r0, #21
   24ff8:	b002      	add	sp, #8
   24ffa:	bd10      	pop	{r4, pc}

00024ffc <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   24ffc:	4668      	mov	r0, sp
   24ffe:	f020 0107 	bic.w	r1, r0, #7
   25002:	468d      	mov	sp, r1
   25004:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   25006:	f7f1 f87f 	bl	16108 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   2500a:	f7ea ffc5 	bl	ff98 <_arch_isr_direct_pm>
   2500e:	f7ea ff05 	bl	fe1c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   25012:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   25016:	4685      	mov	sp, r0
   25018:	4770      	bx	lr

0002501a <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   2501a:	4668      	mov	r0, sp
   2501c:	f020 0107 	bic.w	r1, r0, #7
   25020:	468d      	mov	sp, r1
   25022:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   25024:	f7ef fbf8 	bl	14818 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   25028:	f7ea ffb6 	bl	ff98 <_arch_isr_direct_pm>
   2502c:	f7ea fef6 	bl	fe1c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   25030:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   25034:	4685      	mov	sp, r0
   25036:	4770      	bx	lr

00025038 <trace_task_create>:
{
   25038:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   2503a:	201d      	movs	r0, #29
   2503c:	2200      	movs	r2, #0
   2503e:	2106      	movs	r1, #6
   25040:	f7ea ff92 	bl	ff68 <z_arm_irq_priority_set>
}
   25044:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   25048:	201d      	movs	r0, #29
   2504a:	f7ea bf7d 	b.w	ff48 <arch_irq_enable>

0002504e <read_task_create>:
{
   2504e:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   25050:	201c      	movs	r0, #28
   25052:	2200      	movs	r2, #0
   25054:	2106      	movs	r1, #6
   25056:	f7ea ff87 	bl	ff68 <z_arm_irq_priority_set>
}
   2505a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   2505e:	201c      	movs	r0, #28
   25060:	f7ea bf72 	b.w	ff48 <arch_irq_enable>

00025064 <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   25064:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   25068:	bf18      	it	ne
   2506a:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   2506c:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   2506e:	bf48      	it	mi
   25070:	f043 0308 	orrmi.w	r3, r3, #8
}
   25074:	4618      	mov	r0, r3
   25076:	4770      	bx	lr

00025078 <z_to_nrf_family>:
	switch (z_family) {
   25078:	2803      	cmp	r0, #3
   2507a:	d00f      	beq.n	2509c <z_to_nrf_family+0x24>
   2507c:	d806      	bhi.n	2508c <z_to_nrf_family+0x14>
   2507e:	2801      	cmp	r0, #1
   25080:	d00e      	beq.n	250a0 <z_to_nrf_family+0x28>
   25082:	2802      	cmp	r0, #2
   25084:	d008      	beq.n	25098 <z_to_nrf_family+0x20>
		return -EAFNOSUPPORT;
   25086:	f06f 002e 	mvn.w	r0, #46	; 0x2e
   2508a:	4770      	bx	lr
	switch (z_family) {
   2508c:	2866      	cmp	r0, #102	; 0x66
   2508e:	d008      	beq.n	250a2 <z_to_nrf_family+0x2a>
   25090:	2867      	cmp	r0, #103	; 0x67
   25092:	d1f8      	bne.n	25086 <z_to_nrf_family+0xe>
		return NRF_AF_LOCAL;
   25094:	2001      	movs	r0, #1
   25096:	4770      	bx	lr
		return NRF_AF_INET6;
   25098:	200a      	movs	r0, #10
   2509a:	4770      	bx	lr
		return NRF_AF_PACKET;
   2509c:	2005      	movs	r0, #5
   2509e:	4770      	bx	lr
		return NRF_AF_INET;
   250a0:	2002      	movs	r0, #2
}
   250a2:	4770      	bx	lr

000250a4 <z_to_nrf_protocol>:
	switch (proto) {
   250a4:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   250a8:	d01d      	beq.n	250e6 <z_to_nrf_protocol+0x42>
   250aa:	dc05      	bgt.n	250b8 <z_to_nrf_protocol+0x14>
   250ac:	2806      	cmp	r0, #6
   250ae:	d020      	beq.n	250f2 <z_to_nrf_protocol+0x4e>
   250b0:	2811      	cmp	r0, #17
   250b2:	d016      	beq.n	250e2 <z_to_nrf_protocol+0x3e>
   250b4:	b948      	cbnz	r0, 250ca <z_to_nrf_protocol+0x26>
   250b6:	4770      	bx	lr
   250b8:	f240 2301 	movw	r3, #513	; 0x201
   250bc:	4298      	cmp	r0, r3
   250be:	d00f      	beq.n	250e0 <z_to_nrf_protocol+0x3c>
   250c0:	dc06      	bgt.n	250d0 <z_to_nrf_protocol+0x2c>
   250c2:	f240 1311 	movw	r3, #273	; 0x111
   250c6:	4298      	cmp	r0, r3
   250c8:	d010      	beq.n	250ec <z_to_nrf_protocol+0x48>
		return -EPROTONOSUPPORT;
   250ca:	f06f 002a 	mvn.w	r0, #42	; 0x2a
   250ce:	4770      	bx	lr
	switch (proto) {
   250d0:	f240 2302 	movw	r3, #514	; 0x202
   250d4:	4298      	cmp	r0, r3
   250d6:	d003      	beq.n	250e0 <z_to_nrf_protocol+0x3c>
   250d8:	f240 2303 	movw	r3, #515	; 0x203
   250dc:	4298      	cmp	r0, r3
   250de:	d1f4      	bne.n	250ca <z_to_nrf_protocol+0x26>
}
   250e0:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   250e2:	2002      	movs	r0, #2
   250e4:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   250e6:	f44f 7082 	mov.w	r0, #260	; 0x104
   250ea:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   250ec:	f44f 7087 	mov.w	r0, #270	; 0x10e
   250f0:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   250f2:	2001      	movs	r0, #1
   250f4:	e7f4      	b.n	250e0 <z_to_nrf_protocol+0x3c>

000250f6 <nrf91_bsdlib_socket_offload_init>:
}
   250f6:	2000      	movs	r0, #0
   250f8:	4770      	bx	lr

000250fa <nrf91_socket_offload_freeaddrinfo>:
{
   250fa:	b538      	push	{r3, r4, r5, lr}
   250fc:	4604      	mov	r4, r0
	while (next != NULL) {
   250fe:	b904      	cbnz	r4, 25102 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   25100:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   25102:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   25104:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   25106:	f000 fcc6 	bl	25a96 <k_free>
		k_free(this);
   2510a:	4620      	mov	r0, r4
   2510c:	f000 fcc3 	bl	25a96 <k_free>
		next = next->ai_next;
   25110:	462c      	mov	r4, r5
   25112:	e7f4      	b.n	250fe <nrf91_socket_offload_freeaddrinfo+0x4>

00025114 <z_to_nrf_addrinfo_hints>:
{
   25114:	b538      	push	{r3, r4, r5, lr}
   25116:	460c      	mov	r4, r1
   25118:	4605      	mov	r5, r0
	memset(nrf_out, 0, sizeof(struct nrf_addrinfo));
   2511a:	2220      	movs	r2, #32
   2511c:	2100      	movs	r1, #0
   2511e:	4620      	mov	r0, r4
   25120:	f7ff fbfb 	bl	2491a <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   25124:	2300      	movs	r3, #0
   25126:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   25128:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   2512a:	2b03      	cmp	r3, #3
   2512c:	d003      	beq.n	25136 <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   2512e:	2b04      	cmp	r3, #4
   25130:	bf08      	it	eq
   25132:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   25136:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   25138:	88a8      	ldrh	r0, [r5, #4]
   2513a:	f7ff ff9d 	bl	25078 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   2513e:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
   25142:	d00b      	beq.n	2515c <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   25144:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   25146:	68e8      	ldr	r0, [r5, #12]
   25148:	f7ff ffac 	bl	250a4 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   2514c:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   25150:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   25152:	d003      	beq.n	2515c <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   25154:	69a8      	ldr	r0, [r5, #24]
   25156:	b108      	cbz	r0, 2515c <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   25158:	61a0      	str	r0, [r4, #24]
	return 0;
   2515a:	2000      	movs	r0, #0
}
   2515c:	bd38      	pop	{r3, r4, r5, pc}

0002515e <nrf91_socket_offload_send>:
{
   2515e:	b570      	push	{r4, r5, r6, lr}
   25160:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   25162:	4618      	mov	r0, r3
{
   25164:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   25166:	f7ff ff7d 	bl	25064 <z_to_nrf_flags>
   2516a:	462a      	mov	r2, r5
   2516c:	4603      	mov	r3, r0
   2516e:	4620      	mov	r0, r4
}
   25170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   25174:	f7ef b910 	b.w	14398 <nrf_send>

00025178 <nrf91_socket_offload_recv>:
{
   25178:	b570      	push	{r4, r5, r6, lr}
   2517a:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   2517c:	4618      	mov	r0, r3
{
   2517e:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   25180:	f7ff ff70 	bl	25064 <z_to_nrf_flags>
   25184:	462a      	mov	r2, r5
   25186:	4603      	mov	r3, r0
   25188:	4620      	mov	r0, r4
}
   2518a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   2518e:	f7ef b939 	b.w	14404 <nrf_recv>

00025192 <nrf91_socket_offload_getsockopt>:
{
   25192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25196:	461c      	mov	r4, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   25198:	2300      	movs	r3, #0
{
   2519a:	b086      	sub	sp, #24
   2519c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   251a0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   251a4:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   251a8:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   251ac:	4607      	mov	r7, r0
   251ae:	460d      	mov	r5, r1
   251b0:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   251b2:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   251b4:	d00d      	beq.n	251d2 <nrf91_socket_offload_getsockopt+0x40>
   251b6:	dc08      	bgt.n	251ca <nrf91_socket_offload_getsockopt+0x38>
   251b8:	2901      	cmp	r1, #1
   251ba:	d00a      	beq.n	251d2 <nrf91_socket_offload_getsockopt+0x40>
   251bc:	f7fc fd62 	bl	21c84 <z_impl_z_errno>
	errno = ENOPROTOOPT;
   251c0:	232a      	movs	r3, #42	; 0x2a
	return retval;
   251c2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	errno = ENOPROTOOPT;
   251c6:	6003      	str	r3, [r0, #0]
	return retval;
   251c8:	e029      	b.n	2521e <nrf91_socket_offload_getsockopt+0x8c>
	switch (z_in_level) {
   251ca:	f2a1 2302 	subw	r3, r1, #514	; 0x202
   251ce:	2b01      	cmp	r3, #1
   251d0:	d8f4      	bhi.n	251bc <nrf91_socket_offload_getsockopt+0x2a>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   251d2:	aa02      	add	r2, sp, #8
   251d4:	4631      	mov	r1, r6
   251d6:	4628      	mov	r0, r5
   251d8:	f7ed f8c8 	bl	1236c <z_to_nrf_optname>
   251dc:	2800      	cmp	r0, #0
   251de:	dbed      	blt.n	251bc <nrf91_socket_offload_getsockopt+0x2a>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   251e0:	2d01      	cmp	r5, #1
   251e2:	d120      	bne.n	25226 <nrf91_socket_offload_getsockopt+0x94>
   251e4:	2e14      	cmp	r6, #20
   251e6:	d11e      	bne.n	25226 <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   251e8:	2308      	movs	r3, #8
   251ea:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   251ec:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   251ee:	aa03      	add	r2, sp, #12
   251f0:	9200      	str	r2, [sp, #0]
   251f2:	4638      	mov	r0, r7
   251f4:	9a02      	ldr	r2, [sp, #8]
   251f6:	4629      	mov	r1, r5
   251f8:	f7ef f984 	bl	14504 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   251fc:	4607      	mov	r7, r0
   251fe:	b970      	cbnz	r0, 2521e <nrf91_socket_offload_getsockopt+0x8c>
   25200:	b16c      	cbz	r4, 2521e <nrf91_socket_offload_getsockopt+0x8c>
		*optlen = nrf_optlen;
   25202:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   25204:	2d01      	cmp	r5, #1
		*optlen = nrf_optlen;
   25206:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   2520a:	d108      	bne.n	2521e <nrf91_socket_offload_getsockopt+0x8c>
			if (optname == SO_ERROR) {
   2520c:	2e04      	cmp	r6, #4
   2520e:	d10c      	bne.n	2522a <nrf91_socket_offload_getsockopt+0x98>
				bsd_os_errno_set(*(int *)optval);
   25210:	6820      	ldr	r0, [r4, #0]
   25212:	f7ec ff8d 	bl	12130 <bsd_os_errno_set>
   25216:	f7fc fd35 	bl	21c84 <z_impl_z_errno>
				*(int *)optval = errno;
   2521a:	6803      	ldr	r3, [r0, #0]
   2521c:	6023      	str	r3, [r4, #0]
}
   2521e:	4638      	mov	r0, r7
   25220:	b006      	add	sp, #24
   25222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25226:	4623      	mov	r3, r4
   25228:	e7e1      	b.n	251ee <nrf91_socket_offload_getsockopt+0x5c>
			} else if (optname == SO_RCVTIMEO) {
   2522a:	2e14      	cmp	r6, #20
   2522c:	d1f7      	bne.n	2521e <nrf91_socket_offload_getsockopt+0x8c>
				((struct timeval *)optval)->tv_sec =
   2522e:	9b04      	ldr	r3, [sp, #16]
   25230:	6023      	str	r3, [r4, #0]
				((struct timeval *)optval)->tv_usec =
   25232:	9b05      	ldr	r3, [sp, #20]
   25234:	6063      	str	r3, [r4, #4]
				*optlen = sizeof(struct timeval);
   25236:	2308      	movs	r3, #8
   25238:	f8c8 3000 	str.w	r3, [r8]
   2523c:	e7ef      	b.n	2521e <nrf91_socket_offload_getsockopt+0x8c>

0002523e <nrf91_socket_offload_poll>:
{
   2523e:	b5f0      	push	{r4, r5, r6, r7, lr}
   25240:	b091      	sub	sp, #68	; 0x44
   25242:	4605      	mov	r5, r0
   25244:	460c      	mov	r4, r1
   25246:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   25248:	2100      	movs	r1, #0
   2524a:	2240      	movs	r2, #64	; 0x40
   2524c:	4668      	mov	r0, sp
   2524e:	f7ff fb64 	bl	2491a <memset>
	for (int i = 0; i < nfds; i++) {
   25252:	2204      	movs	r2, #4
   25254:	2100      	movs	r1, #0
   25256:	42a1      	cmp	r1, r4
   25258:	db0c      	blt.n	25274 <nrf91_socket_offload_poll+0x36>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   2525a:	4632      	mov	r2, r6
   2525c:	4621      	mov	r1, r4
   2525e:	4668      	mov	r0, sp
   25260:	f7ef f970 	bl	14544 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   25264:	2200      	movs	r2, #0
   25266:	462b      	mov	r3, r5
		fds[i].revents = 0;
   25268:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   2526a:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   2526c:	42a2      	cmp	r2, r4
   2526e:	db1b      	blt.n	252a8 <nrf91_socket_offload_poll+0x6a>
}
   25270:	b011      	add	sp, #68	; 0x44
   25272:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   25274:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   25278:	5aa8      	ldrh	r0, [r5, r2]
		tmp[i].handle = fds[i].fd;
   2527a:	f84d 3031 	str.w	r3, [sp, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   2527e:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   25280:	bf48      	it	mi
   25282:	f83d 3002 	ldrhmi.w	r3, [sp, r2]
	for (int i = 0; i < nfds; i++) {
   25286:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   2528a:	bf44      	itt	mi
   2528c:	f043 0301 	orrmi.w	r3, r3, #1
   25290:	f82d 3002 	strhmi.w	r3, [sp, r2]
		if (fds[i].events & POLLOUT) {
   25294:	0747      	lsls	r7, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   25296:	bf42      	ittt	mi
   25298:	f83d 3002 	ldrhmi.w	r3, [sp, r2]
   2529c:	f043 0302 	orrmi.w	r3, r3, #2
   252a0:	f82d 3002 	strhmi.w	r3, [sp, r2]
   252a4:	3208      	adds	r2, #8
   252a6:	e7d6      	b.n	25256 <nrf91_socket_offload_poll+0x18>
		if (tmp[i].returned & NRF_POLLIN) {
   252a8:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   252ac:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   252ae:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   252b0:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   252b2:	bf48      	it	mi
   252b4:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   252b6:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   252b8:	bf48      	it	mi
   252ba:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   252bc:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   252c0:	bf44      	itt	mi
   252c2:	f045 0504 	orrmi.w	r5, r5, #4
   252c6:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   252c8:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   252ca:	bf48      	it	mi
   252cc:	88dd      	ldrhmi	r5, [r3, #6]
   252ce:	f103 0308 	add.w	r3, r3, #8
   252d2:	bf44      	itt	mi
   252d4:	f045 0508 	orrmi.w	r5, r5, #8
   252d8:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   252dc:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   252de:	bf42      	ittt	mi
   252e0:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   252e4:	f045 0520 	orrmi.w	r5, r5, #32
   252e8:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   252ec:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   252ee:	bf42      	ittt	mi
   252f0:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   252f4:	f041 0110 	orrmi.w	r1, r1, #16
   252f8:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   252fc:	e7b6      	b.n	2526c <nrf91_socket_offload_poll+0x2e>

000252fe <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   252fe:	f7ef b8ad 	b.w	1445c <nrf_listen>

00025302 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   25302:	f7ef b81f 	b.w	14344 <nrf_close>

00025306 <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   25306:	2903      	cmp	r1, #3
{
   25308:	b508      	push	{r3, lr}
	switch (cmd) {
   2530a:	d00b      	beq.n	25324 <nrf91_socket_offload_fcntl+0x1e>
   2530c:	2904      	cmp	r1, #4
   2530e:	d111      	bne.n	25334 <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   25310:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   25312:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   25316:	d10d      	bne.n	25334 <nrf91_socket_offload_fcntl+0x2e>
}
   25318:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   2531c:	1392      	asrs	r2, r2, #14
   2531e:	2101      	movs	r1, #1
   25320:	f7ef b912 	b.w	14548 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   25324:	2200      	movs	r2, #0
   25326:	2102      	movs	r1, #2
   25328:	f7ef f90e 	bl	14548 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   2532c:	0380      	lsls	r0, r0, #14
   2532e:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   25332:	bd08      	pop	{r3, pc}
   25334:	f7fc fca6 	bl	21c84 <z_impl_z_errno>
	errno = EINVAL;
   25338:	2316      	movs	r3, #22
   2533a:	6003      	str	r3, [r0, #0]
	return retval;
   2533c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25340:	e7f7      	b.n	25332 <nrf91_socket_offload_fcntl+0x2c>

00025342 <nrf91_socket_offload_recvfrom>:
{
   25342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25346:	4607      	mov	r7, r0
   25348:	b08c      	sub	sp, #48	; 0x30
   2534a:	4618      	mov	r0, r3
   2534c:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   25350:	4690      	mov	r8, r2
   25352:	f7ff fe87 	bl	25064 <z_to_nrf_flags>
   25356:	4603      	mov	r3, r0
	if (from == NULL) {
   25358:	b954      	cbnz	r4, 25370 <nrf91_socket_offload_recvfrom+0x2e>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   2535a:	e9cd 4400 	strd	r4, r4, [sp]
   2535e:	4642      	mov	r2, r8
   25360:	4638      	mov	r0, r7
   25362:	f7ef f833 	bl	143cc <nrf_recvfrom>
   25366:	4605      	mov	r5, r0
}
   25368:	4628      	mov	r0, r5
   2536a:	b00c      	add	sp, #48	; 0x30
   2536c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   25370:	2224      	movs	r2, #36	; 0x24
   25372:	ad0c      	add	r5, sp, #48	; 0x30
   25374:	f845 2d28 	str.w	r2, [r5, #-40]!
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   25378:	aa03      	add	r2, sp, #12
   2537a:	9501      	str	r5, [sp, #4]
   2537c:	9200      	str	r2, [sp, #0]
   2537e:	4638      	mov	r0, r7
   25380:	4642      	mov	r2, r8
   25382:	f7ef f823 	bl	143cc <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   25386:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   25388:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   2538a:	2b02      	cmp	r3, #2
   2538c:	d109      	bne.n	253a2 <nrf91_socket_offload_recvfrom+0x60>
	ptr->sin_port = nrf_in->sin_port;
   2538e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   25392:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   25394:	2301      	movs	r3, #1
   25396:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   25398:	9b06      	ldr	r3, [sp, #24]
   2539a:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   2539c:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   2539e:	6033      	str	r3, [r6, #0]
	return retval;
   253a0:	e7e2      	b.n	25368 <nrf91_socket_offload_recvfrom+0x26>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   253a2:	2b0a      	cmp	r3, #10
   253a4:	d1e0      	bne.n	25368 <nrf91_socket_offload_recvfrom+0x26>
	ptr->sin6_port = nrf_in->sin6_port;
   253a6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	ptr->sin6_family = AF_INET6;
   253aa:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   253ac:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   253ae:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   253b0:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   253b2:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   253b6:	a907      	add	r1, sp, #28
   253b8:	f7ff fa82 	bl	248c0 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   253bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   253be:	7523      	strb	r3, [r4, #20]
			*fromlen = sizeof(struct sockaddr_in6);
   253c0:	2318      	movs	r3, #24
   253c2:	e7ec      	b.n	2539e <nrf91_socket_offload_recvfrom+0x5c>

000253c4 <nrf91_socket_offload_connect>:
{
   253c4:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   253c6:	880b      	ldrh	r3, [r1, #0]
{
   253c8:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   253ca:	2b01      	cmp	r3, #1
{
   253cc:	4606      	mov	r6, r0
   253ce:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   253d0:	d10e      	bne.n	253f0 <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   253d2:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   253d4:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   253d6:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   253da:	2302      	movs	r3, #2
   253dc:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   253de:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   253e0:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   253e4:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   253e6:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   253e8:	f7ef f826 	bl	14438 <nrf_connect>
}
   253ec:	b00a      	add	sp, #40	; 0x28
   253ee:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   253f0:	2b02      	cmp	r3, #2
   253f2:	d112      	bne.n	2541a <nrf91_socket_offload_connect+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   253f4:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   253f6:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   253f8:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   253fc:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   253fe:	2210      	movs	r2, #16
   25400:	3104      	adds	r1, #4
   25402:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   25404:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   25406:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   2540a:	f7ff fa59 	bl	248c0 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   2540e:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   25410:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   25412:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   25414:	a901      	add	r1, sp, #4
   25416:	4630      	mov	r0, r6
   25418:	e7e6      	b.n	253e8 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   2541a:	f7ef f80d 	bl	14438 <nrf_connect>
		if (retval < 0) {
   2541e:	2800      	cmp	r0, #0
   25420:	dae4      	bge.n	253ec <nrf91_socket_offload_connect+0x28>
   25422:	f7fc fc2f 	bl	21c84 <z_impl_z_errno>
	errno = ENOTSUP;
   25426:	2323      	movs	r3, #35	; 0x23
   25428:	6003      	str	r3, [r0, #0]
   2542a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2542e:	e7dd      	b.n	253ec <nrf91_socket_offload_connect+0x28>

00025430 <nrf91_socket_offload_socket>:
{
   25430:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   25432:	b280      	uxth	r0, r0
   25434:	f7ff fe20 	bl	25078 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   25438:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
	family = z_to_nrf_family(family);
   2543c:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   2543e:	d106      	bne.n	2544e <nrf91_socket_offload_socket+0x1e>
   25440:	f7fc fc20 	bl	21c84 <z_impl_z_errno>
		errno = EAFNOSUPPORT;
   25444:	232f      	movs	r3, #47	; 0x2f
		errno = EPROTONOSUPPORT;
   25446:	6003      	str	r3, [r0, #0]
}
   25448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2544c:	bd10      	pop	{r4, pc}
	switch (socktype) {
   2544e:	2903      	cmp	r1, #3
   25450:	d003      	beq.n	2545a <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   25452:	2904      	cmp	r1, #4
   25454:	bf08      	it	eq
   25456:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   2545a:	4610      	mov	r0, r2
   2545c:	f7ff fe22 	bl	250a4 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   25460:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	proto = z_to_nrf_protocol(proto);
   25464:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   25466:	d103      	bne.n	25470 <nrf91_socket_offload_socket+0x40>
   25468:	f7fc fc0c 	bl	21c84 <z_impl_z_errno>
		errno = EPROTONOSUPPORT;
   2546c:	232b      	movs	r3, #43	; 0x2b
   2546e:	e7ea      	b.n	25446 <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   25470:	4620      	mov	r0, r4
}
   25472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   25476:	f7ee bf53 	b.w	14320 <nrf_socket>

0002547a <nrf91_socket_offload_accept>:
{
   2547a:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   2547c:	2708      	movs	r7, #8
{
   2547e:	b085      	sub	sp, #20
   25480:	4616      	mov	r6, r2
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   25482:	aa04      	add	r2, sp, #16
{
   25484:	460c      	mov	r4, r1
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   25486:	f842 7d0c 	str.w	r7, [r2, #-12]!
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   2548a:	eb0d 0107 	add.w	r1, sp, r7
   2548e:	f7ee fff5 	bl	1447c <nrf_accept>
	if (retval < 0) {
   25492:	1e05      	subs	r5, r0, #0
   25494:	db23      	blt.n	254de <nrf91_socket_offload_accept+0x64>
	if (nrf_addr.sa_family == NRF_AF_INET) {
   25496:	9b03      	ldr	r3, [sp, #12]
   25498:	2b02      	cmp	r3, #2
   2549a:	d10a      	bne.n	254b2 <nrf91_socket_offload_accept+0x38>
	ptr->sin_port = nrf_in->sin_port;
   2549c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		*addrlen = sizeof(struct sockaddr_in);
   254a0:	6037      	str	r7, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   254a2:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   254a4:	2301      	movs	r3, #1
   254a6:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   254a8:	9b05      	ldr	r3, [sp, #20]
   254aa:	6063      	str	r3, [r4, #4]
}
   254ac:	4628      	mov	r0, r5
   254ae:	b005      	add	sp, #20
   254b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (nrf_addr.sa_family == NRF_AF_INET6) {
   254b2:	2b0a      	cmp	r3, #10
   254b4:	d10f      	bne.n	254d6 <nrf91_socket_offload_accept+0x5c>
		*addrlen = sizeof(struct sockaddr_in6);
   254b6:	2318      	movs	r3, #24
	ptr->sin6_port = nrf_in->sin6_port;
   254b8:	a904      	add	r1, sp, #16
		*addrlen = sizeof(struct sockaddr_in6);
   254ba:	6033      	str	r3, [r6, #0]
	ptr->sin6_port = nrf_in->sin6_port;
   254bc:	f831 3b08 	ldrh.w	r3, [r1], #8
	ptr->sin6_family = AF_INET6;
   254c0:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   254c2:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   254c4:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   254c6:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   254c8:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   254cc:	f7ff f9f8 	bl	248c0 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   254d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   254d2:	7523      	strb	r3, [r4, #20]
   254d4:	e7ea      	b.n	254ac <nrf91_socket_offload_accept+0x32>
   254d6:	f7fc fbd5 	bl	21c84 <z_impl_z_errno>
	errno = ENOTSUP;
   254da:	2323      	movs	r3, #35	; 0x23
   254dc:	6003      	str	r3, [r0, #0]
		return -1;
   254de:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   254e2:	e7e3      	b.n	254ac <nrf91_socket_offload_accept+0x32>

000254e4 <nrf91_socket_offload_getaddrinfo>:
{
   254e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   254e8:	4614      	mov	r4, r2
   254ea:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   254ec:	2100      	movs	r1, #0
{
   254ee:	b093      	sub	sp, #76	; 0x4c
   254f0:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   254f2:	2220      	movs	r2, #32
   254f4:	a802      	add	r0, sp, #8
{
   254f6:	4698      	mov	r8, r3
	struct nrf_addrinfo *nrf_res = NULL;
   254f8:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   254fa:	f7ff fa0e 	bl	2491a <memset>
	if (hints != NULL) {
   254fe:	b19c      	cbz	r4, 25528 <nrf91_socket_offload_getaddrinfo+0x44>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   25500:	a902      	add	r1, sp, #8
   25502:	4620      	mov	r0, r4
   25504:	f7ff fe06 	bl	25114 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   25508:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
   2550c:	f000 80c0 	beq.w	25690 <nrf91_socket_offload_getaddrinfo+0x1ac>
		} else if (error == -EAFNOSUPPORT) {
   25510:	302f      	adds	r0, #47	; 0x2f
   25512:	f000 80c0 	beq.w	25696 <nrf91_socket_offload_getaddrinfo+0x1b2>
		if (hints->ai_next != NULL) {
   25516:	69e0      	ldr	r0, [r4, #28]
   25518:	b120      	cbz	r0, 25524 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   2551a:	ac0a      	add	r4, sp, #40	; 0x28
   2551c:	4621      	mov	r1, r4
   2551e:	f7ff fdf9 	bl	25114 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   25522:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   25524:	aa02      	add	r2, sp, #8
   25526:	e000      	b.n	2552a <nrf91_socket_offload_getaddrinfo+0x46>
	struct nrf_addrinfo *nrf_hints_ptr = NULL;
   25528:	4622      	mov	r2, r4
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   2552a:	4631      	mov	r1, r6
   2552c:	4628      	mov	r0, r5
   2552e:	ab01      	add	r3, sp, #4
   25530:	f7ef f804 	bl	1453c <nrf_getaddrinfo>
	*res = NULL;
   25534:	2700      	movs	r7, #0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   25536:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   25538:	f8c8 7000 	str.w	r7, [r8]
		return AF_INET6;
   2553c:	f04f 0902 	mov.w	r9, #2
	while ((retval == 0) && (next_nrf_res != NULL)) {
   25540:	4605      	mov	r5, r0
   25542:	2800      	cmp	r0, #0
   25544:	d04c      	beq.n	255e0 <nrf91_socket_offload_getaddrinfo+0xfc>
		nrf91_socket_offload_freeaddrinfo(*res);
   25546:	f8d8 0000 	ldr.w	r0, [r8]
   2554a:	f7ff fdd6 	bl	250fa <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   2554e:	2300      	movs	r3, #0
   25550:	f8c8 3000 	str.w	r3, [r8]
   25554:	e046      	b.n	255e4 <nrf91_socket_offload_getaddrinfo+0x100>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   25556:	2020      	movs	r0, #32
   25558:	f7fc fe04 	bl	22164 <k_malloc>
		if (next_z_res == NULL) {
   2555c:	4604      	mov	r4, r0
   2555e:	2800      	cmp	r0, #0
   25560:	f000 8091 	beq.w	25686 <nrf91_socket_offload_getaddrinfo+0x1a2>
	family = nrf_to_z_family(nrf_in->ai_family);
   25564:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   25566:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   25568:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   2556a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   2556e:	6005      	str	r5, [r0, #0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   25570:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   25572:	d03e      	beq.n	255f2 <nrf91_socket_offload_getaddrinfo+0x10e>
   25574:	dc09      	bgt.n	2558a <nrf91_socket_offload_getaddrinfo+0xa6>
   25576:	2a01      	cmp	r2, #1
   25578:	d00d      	beq.n	25596 <nrf91_socket_offload_getaddrinfo+0xb2>
   2557a:	2a02      	cmp	r2, #2
   2557c:	d03d      	beq.n	255fa <nrf91_socket_offload_getaddrinfo+0x116>
			k_free(next_z_res);
   2557e:	4620      	mov	r0, r4
   25580:	f000 fa89 	bl	25a96 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   25584:	f06f 0508 	mvn.w	r5, #8
   25588:	e7dd      	b.n	25546 <nrf91_socket_offload_getaddrinfo+0x62>
	switch (nrf_family) {
   2558a:	2a0a      	cmp	r2, #10
   2558c:	d033      	beq.n	255f6 <nrf91_socket_offload_getaddrinfo+0x112>
   2558e:	2a66      	cmp	r2, #102	; 0x66
   25590:	d1f5      	bne.n	2557e <nrf91_socket_offload_getaddrinfo+0x9a>
		return AF_LTE;
   25592:	4613      	mov	r3, r2
   25594:	e000      	b.n	25598 <nrf91_socket_offload_getaddrinfo+0xb4>
		return AF_LOCAL;
   25596:	2367      	movs	r3, #103	; 0x67
	z_out->ai_family = family;
   25598:	6063      	str	r3, [r4, #4]
	switch (proto) {
   2559a:	68f3      	ldr	r3, [r6, #12]
   2559c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   255a0:	d04c      	beq.n	2563c <nrf91_socket_offload_getaddrinfo+0x158>
   255a2:	dc2c      	bgt.n	255fe <nrf91_socket_offload_getaddrinfo+0x11a>
   255a4:	2b01      	cmp	r3, #1
   255a6:	d04e      	beq.n	25646 <nrf91_socket_offload_getaddrinfo+0x162>
   255a8:	2b02      	cmp	r3, #2
   255aa:	d04a      	beq.n	25642 <nrf91_socket_offload_getaddrinfo+0x15e>
   255ac:	2b00      	cmp	r3, #0
   255ae:	d12e      	bne.n	2560e <nrf91_socket_offload_getaddrinfo+0x12a>
	if (nrf_in->ai_family == NRF_AF_INET) {
   255b0:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   255b2:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   255b4:	d149      	bne.n	2564a <nrf91_socket_offload_getaddrinfo+0x166>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   255b6:	2008      	movs	r0, #8
   255b8:	f7fc fdd4 	bl	22164 <k_malloc>
   255bc:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   255be:	2800      	cmp	r0, #0
   255c0:	d05e      	beq.n	25680 <nrf91_socket_offload_getaddrinfo+0x19c>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   255c2:	2308      	movs	r3, #8
   255c4:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   255c6:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   255c8:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   255ca:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   255cc:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   255ce:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   255d0:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   255d2:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   255d4:	2f00      	cmp	r7, #0
   255d6:	d159      	bne.n	2568c <nrf91_socket_offload_getaddrinfo+0x1a8>
			*res = next_z_res;
   255d8:	f8c8 4000 	str.w	r4, [r8]
		next_nrf_res = next_nrf_res->ai_next;
   255dc:	4627      	mov	r7, r4
   255de:	69f6      	ldr	r6, [r6, #28]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   255e0:	2e00      	cmp	r6, #0
   255e2:	d1b8      	bne.n	25556 <nrf91_socket_offload_getaddrinfo+0x72>
	nrf_freeaddrinfo(nrf_res);
   255e4:	9801      	ldr	r0, [sp, #4]
   255e6:	f7ee ffab 	bl	14540 <nrf_freeaddrinfo>
}
   255ea:	4628      	mov	r0, r5
   255ec:	b013      	add	sp, #76	; 0x4c
   255ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return AF_PACKET;
   255f2:	2303      	movs	r3, #3
   255f4:	e7d0      	b.n	25598 <nrf91_socket_offload_getaddrinfo+0xb4>
		return AF_INET6;
   255f6:	2302      	movs	r3, #2
   255f8:	e7ce      	b.n	25598 <nrf91_socket_offload_getaddrinfo+0xb4>
		return AF_INET;
   255fa:	2301      	movs	r3, #1
   255fc:	e7cc      	b.n	25598 <nrf91_socket_offload_getaddrinfo+0xb4>
	switch (proto) {
   255fe:	f240 2101 	movw	r1, #513	; 0x201
   25602:	428b      	cmp	r3, r1
   25604:	d0d4      	beq.n	255b0 <nrf91_socket_offload_getaddrinfo+0xcc>
   25606:	dc0d      	bgt.n	25624 <nrf91_socket_offload_getaddrinfo+0x140>
   25608:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   2560c:	d013      	beq.n	25636 <nrf91_socket_offload_getaddrinfo+0x152>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2560e:	f06f 032a 	mvn.w	r3, #42	; 0x2a
   25612:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   25614:	2300      	movs	r3, #0
   25616:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   25618:	4620      	mov	r0, r4
   2561a:	f000 fa3c 	bl	25a96 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   2561e:	f06f 0506 	mvn.w	r5, #6
   25622:	e790      	b.n	25546 <nrf91_socket_offload_getaddrinfo+0x62>
	switch (proto) {
   25624:	f240 2102 	movw	r1, #514	; 0x202
   25628:	428b      	cmp	r3, r1
   2562a:	d0c1      	beq.n	255b0 <nrf91_socket_offload_getaddrinfo+0xcc>
   2562c:	f240 2103 	movw	r1, #515	; 0x203
   25630:	428b      	cmp	r3, r1
   25632:	d0bd      	beq.n	255b0 <nrf91_socket_offload_getaddrinfo+0xcc>
   25634:	e7eb      	b.n	2560e <nrf91_socket_offload_getaddrinfo+0x12a>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   25636:	f240 1311 	movw	r3, #273	; 0x111
   2563a:	e7b9      	b.n	255b0 <nrf91_socket_offload_getaddrinfo+0xcc>
   2563c:	f44f 7381 	mov.w	r3, #258	; 0x102
   25640:	e7b6      	b.n	255b0 <nrf91_socket_offload_getaddrinfo+0xcc>
   25642:	2311      	movs	r3, #17
   25644:	e7b4      	b.n	255b0 <nrf91_socket_offload_getaddrinfo+0xcc>
   25646:	2306      	movs	r3, #6
   25648:	e7b2      	b.n	255b0 <nrf91_socket_offload_getaddrinfo+0xcc>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   2564a:	2a0a      	cmp	r2, #10
   2564c:	d1e4      	bne.n	25618 <nrf91_socket_offload_getaddrinfo+0x134>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   2564e:	2018      	movs	r0, #24
   25650:	f7fc fd88 	bl	22164 <k_malloc>
   25654:	4682      	mov	sl, r0
   25656:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   25658:	b190      	cbz	r0, 25680 <nrf91_socket_offload_getaddrinfo+0x19c>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   2565a:	2318      	movs	r3, #24
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   2565c:	2210      	movs	r2, #16
			(const struct nrf_sockaddr_in6 *)nrf_in->ai_addr);
   2565e:	f8d6 b014 	ldr.w	fp, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   25662:	6123      	str	r3, [r4, #16]
	ptr->sin6_port = nrf_in->sin6_port;
   25664:	f8bb 3008 	ldrh.w	r3, [fp, #8]
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   25668:	eb0b 0102 	add.w	r1, fp, r2
	ptr->sin6_port = nrf_in->sin6_port;
   2566c:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   2566e:	f820 9b04 	strh.w	r9, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   25672:	f7ff f925 	bl	248c0 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   25676:	f8db 3020 	ldr.w	r3, [fp, #32]
   2567a:	f88a 3014 	strb.w	r3, [sl, #20]
   2567e:	e7a9      	b.n	255d4 <nrf91_socket_offload_getaddrinfo+0xf0>
			k_free(next_z_res);
   25680:	4620      	mov	r0, r4
   25682:	f000 fa08 	bl	25a96 <k_free>
			retval = DNS_EAI_MEMORY;
   25686:	f06f 0509 	mvn.w	r5, #9
   2568a:	e75c      	b.n	25546 <nrf91_socket_offload_getaddrinfo+0x62>
			latest_z_res->ai_next = next_z_res;
   2568c:	61fc      	str	r4, [r7, #28]
   2568e:	e7a5      	b.n	255dc <nrf91_socket_offload_getaddrinfo+0xf8>
			return DNS_EAI_SOCKTYPE;
   25690:	f06f 0506 	mvn.w	r5, #6
   25694:	e7a9      	b.n	255ea <nrf91_socket_offload_getaddrinfo+0x106>
			return DNS_EAI_ADDRFAMILY;
   25696:	f06f 0508 	mvn.w	r5, #8
   2569a:	e7a6      	b.n	255ea <nrf91_socket_offload_getaddrinfo+0x106>

0002569c <nrf91_socket_offload_sendto>:
{
   2569c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   256a0:	b08d      	sub	sp, #52	; 0x34
   256a2:	9c14      	ldr	r4, [sp, #80]	; 0x50
   256a4:	4605      	mov	r5, r0
   256a6:	460e      	mov	r6, r1
   256a8:	4617      	mov	r7, r2
   256aa:	4698      	mov	r8, r3
	if (to == NULL) {
   256ac:	b96c      	cbnz	r4, 256ca <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   256ae:	4618      	mov	r0, r3
   256b0:	f7ff fcd8 	bl	25064 <z_to_nrf_flags>
   256b4:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   256b8:	4603      	mov	r3, r0
   256ba:	463a      	mov	r2, r7
   256bc:	4631      	mov	r1, r6
   256be:	4628      	mov	r0, r5
   256c0:	f7ee fe4e 	bl	14360 <nrf_sendto>
}
   256c4:	b00d      	add	sp, #52	; 0x34
   256c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   256ca:	8823      	ldrh	r3, [r4, #0]
   256cc:	2b01      	cmp	r3, #1
   256ce:	d110      	bne.n	256f2 <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   256d0:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   256d2:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   256d4:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   256d8:	2302      	movs	r3, #2
   256da:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   256dc:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   256de:	4640      	mov	r0, r8
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   256e0:	f88d 100c 	strb.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   256e4:	9306      	str	r3, [sp, #24]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   256e6:	f7ff fcbd 	bl	25064 <z_to_nrf_flags>
   256ea:	9101      	str	r1, [sp, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   256ec:	ab03      	add	r3, sp, #12
   256ee:	9300      	str	r3, [sp, #0]
   256f0:	e7e2      	b.n	256b8 <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   256f2:	2b02      	cmp	r3, #2
   256f4:	d115      	bne.n	25722 <nrf91_socket_offload_sendto+0x86>
	nrf_out->sin6_port = ptr->sin6_port;
   256f6:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   256f8:	f04f 0924 	mov.w	r9, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   256fc:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin6_family = NRF_AF_INET6;
   25700:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   25702:	2210      	movs	r2, #16
   25704:	1d21      	adds	r1, r4, #4
   25706:	a807      	add	r0, sp, #28
	nrf_out->sin6_family = NRF_AF_INET6;
   25708:	9304      	str	r3, [sp, #16]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   2570a:	f88d 900c 	strb.w	r9, [sp, #12]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   2570e:	f7ff f8d7 	bl	248c0 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   25712:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   25714:	4640      	mov	r0, r8
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   25716:	930b      	str	r3, [sp, #44]	; 0x2c
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   25718:	f7ff fca4 	bl	25064 <z_to_nrf_flags>
   2571c:	f8cd 9004 	str.w	r9, [sp, #4]
   25720:	e7e4      	b.n	256ec <nrf91_socket_offload_sendto+0x50>
   25722:	f7fc faaf 	bl	21c84 <z_impl_z_errno>
	errno = ENOTSUP;
   25726:	2323      	movs	r3, #35	; 0x23
   25728:	6003      	str	r3, [r0, #0]
	return retval;
   2572a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2572e:	e7c9      	b.n	256c4 <nrf91_socket_offload_sendto+0x28>

00025730 <nrf91_socket_offload_setsockopt>:
{
   25730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   25734:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   25738:	b086      	sub	sp, #24
   2573a:	4680      	mov	r8, r0
   2573c:	460c      	mov	r4, r1
   2573e:	4617      	mov	r7, r2
   25740:	461d      	mov	r5, r3
   25742:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   25744:	d00d      	beq.n	25762 <nrf91_socket_offload_setsockopt+0x32>
   25746:	dc08      	bgt.n	2575a <nrf91_socket_offload_setsockopt+0x2a>
   25748:	2901      	cmp	r1, #1
   2574a:	d00a      	beq.n	25762 <nrf91_socket_offload_setsockopt+0x32>
   2574c:	f7fc fa9a 	bl	21c84 <z_impl_z_errno>
	errno = ENOPROTOOPT;
   25750:	232a      	movs	r3, #42	; 0x2a
   25752:	6003      	str	r3, [r0, #0]
   25754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25758:	e01b      	b.n	25792 <nrf91_socket_offload_setsockopt+0x62>
	switch (z_in_level) {
   2575a:	f2a1 2302 	subw	r3, r1, #514	; 0x202
   2575e:	2b01      	cmp	r3, #1
   25760:	d8f4      	bhi.n	2574c <nrf91_socket_offload_setsockopt+0x1c>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   25762:	aa03      	add	r2, sp, #12
   25764:	4639      	mov	r1, r7
   25766:	4620      	mov	r0, r4
   25768:	f7ec fe00 	bl	1236c <z_to_nrf_optname>
   2576c:	2800      	cmp	r0, #0
   2576e:	dbed      	blt.n	2574c <nrf91_socket_offload_setsockopt+0x1c>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   25770:	2c01      	cmp	r4, #1
   25772:	d107      	bne.n	25784 <nrf91_socket_offload_setsockopt+0x54>
   25774:	2f14      	cmp	r7, #20
   25776:	d105      	bne.n	25784 <nrf91_socket_offload_setsockopt+0x54>
		nrf_optlen = sizeof(struct nrf_timeval);
   25778:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   2577a:	682b      	ldr	r3, [r5, #0]
   2577c:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   2577e:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   25780:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   25782:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   25784:	9600      	str	r6, [sp, #0]
   25786:	462b      	mov	r3, r5
   25788:	9a03      	ldr	r2, [sp, #12]
   2578a:	4621      	mov	r1, r4
   2578c:	4640      	mov	r0, r8
   2578e:	f7ee fe9d 	bl	144cc <nrf_setsockopt>
}
   25792:	b006      	add	sp, #24
   25794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025798 <nrf91_socket_offload_bind>:
{
   25798:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   2579a:	880b      	ldrh	r3, [r1, #0]
{
   2579c:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   2579e:	2b01      	cmp	r3, #1
{
   257a0:	4606      	mov	r6, r0
   257a2:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   257a4:	d10e      	bne.n	257c4 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   257a6:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   257a8:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   257aa:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   257ae:	2302      	movs	r3, #2
   257b0:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   257b2:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   257b4:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   257b8:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   257ba:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   257bc:	f7ee fe74 	bl	144a8 <nrf_bind>
}
   257c0:	b00a      	add	sp, #40	; 0x28
   257c2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   257c4:	2b02      	cmp	r3, #2
   257c6:	d112      	bne.n	257ee <nrf91_socket_offload_bind+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   257c8:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   257ca:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   257cc:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   257d0:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   257d2:	2210      	movs	r2, #16
   257d4:	3104      	adds	r1, #4
   257d6:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   257d8:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   257da:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   257de:	f7ff f86f 	bl	248c0 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   257e2:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   257e4:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   257e6:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   257e8:	a901      	add	r1, sp, #4
   257ea:	4630      	mov	r0, r6
   257ec:	e7e6      	b.n	257bc <nrf91_socket_offload_bind+0x24>
   257ee:	f7fc fa49 	bl	21c84 <z_impl_z_errno>
	errno = ENOTSUP;
   257f2:	2323      	movs	r3, #35	; 0x23
   257f4:	6003      	str	r3, [r0, #0]
   257f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   257fa:	e7e1      	b.n	257c0 <nrf91_socket_offload_bind+0x28>

000257fc <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str,
   257fc:	6813      	ldr	r3, [r2, #0]
   257fe:	f7ec bfe5 	b.w	127cc <at_parser_max_params_from_str>

00025802 <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   25802:	6803      	ldr	r3, [r0, #0]
   25804:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   25806:	bf83      	ittte	hi
   25808:	230c      	movhi	r3, #12
   2580a:	6840      	ldrhi	r0, [r0, #4]
   2580c:	fb03 0001 	mlahi	r0, r3, r1, r0
		return NULL;
   25810:	2000      	movls	r0, #0
}
   25812:	4770      	bx	lr

00025814 <at_param_size>:
/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
	__ASSERT(param != NULL, "Parameter cannot be NULL.");

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   25814:	7803      	ldrb	r3, [r0, #0]
   25816:	2b01      	cmp	r3, #1
   25818:	d006      	beq.n	25828 <at_param_size+0x14>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   2581a:	2b02      	cmp	r3, #2
   2581c:	d006      	beq.n	2582c <at_param_size+0x18>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   2581e:	3b03      	subs	r3, #3
   25820:	2b01      	cmp	r3, #1
   25822:	d805      	bhi.n	25830 <at_param_size+0x1c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   25824:	6840      	ldr	r0, [r0, #4]
   25826:	4770      	bx	lr
		return sizeof(u16_t);
   25828:	2002      	movs	r0, #2
   2582a:	4770      	bx	lr
		return sizeof(u32_t);
   2582c:	2004      	movs	r0, #4
   2582e:	4770      	bx	lr
	}

	return 0;
   25830:	2000      	movs	r0, #0
}
   25832:	4770      	bx	lr

00025834 <at_param_clear>:
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   25834:	7803      	ldrb	r3, [r0, #0]
{
   25836:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   25838:	3b03      	subs	r3, #3
   2583a:	2b01      	cmp	r3, #1
{
   2583c:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   2583e:	d802      	bhi.n	25846 <at_param_clear+0x12>
		k_free(param->value.str_val);
   25840:	6880      	ldr	r0, [r0, #8]
   25842:	f000 f928 	bl	25a96 <k_free>
	param->value.int_val = 0;
   25846:	2300      	movs	r3, #0
   25848:	60a3      	str	r3, [r4, #8]
}
   2584a:	bd10      	pop	{r4, pc}

0002584c <at_params_list_init>:

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   2584c:	b538      	push	{r3, r4, r5, lr}
   2584e:	460d      	mov	r5, r1
	if (list == NULL) {
   25850:	4604      	mov	r4, r0
   25852:	b140      	cbz	r0, 25866 <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   25854:	210c      	movs	r1, #12
   25856:	4628      	mov	r0, r5
   25858:	f000 f922 	bl	25aa0 <k_calloc>
   2585c:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   2585e:	b128      	cbz	r0, 2586c <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   25860:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   25862:	6025      	str	r5, [r4, #0]
}
   25864:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   25866:	f06f 0015 	mvn.w	r0, #21
   2586a:	e7fb      	b.n	25864 <at_params_list_init+0x18>
		return -ENOMEM;
   2586c:	f06f 000b 	mvn.w	r0, #11
   25870:	e7f8      	b.n	25864 <at_params_list_init+0x18>

00025872 <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   25872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (list == NULL || list->params == NULL) {
   25874:	4605      	mov	r5, r0
   25876:	b130      	cbz	r0, 25886 <at_params_list_clear+0x14>
   25878:	6843      	ldr	r3, [r0, #4]
   2587a:	b123      	cbz	r3, 25886 <at_params_list_clear+0x14>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   2587c:	2400      	movs	r4, #0
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
   2587e:	270c      	movs	r7, #12
	for (size_t i = 0; i < list->param_count; ++i) {
   25880:	682b      	ldr	r3, [r5, #0]
   25882:	429c      	cmp	r4, r3
   25884:	d300      	bcc.n	25888 <at_params_list_clear+0x16>
		at_param_init(&params[i]);
	}
}
   25886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		at_param_clear(&params[i]);
   25888:	686e      	ldr	r6, [r5, #4]
   2588a:	fb07 6604 	mla	r6, r7, r4, r6
   2588e:	4630      	mov	r0, r6
   25890:	f7ff ffd0 	bl	25834 <at_param_clear>
	memset(param, 0, sizeof(struct at_param));
   25894:	220c      	movs	r2, #12
   25896:	2100      	movs	r1, #0
   25898:	4630      	mov	r0, r6
   2589a:	f7ff f83e 	bl	2491a <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   2589e:	3401      	adds	r4, #1
   258a0:	e7ee      	b.n	25880 <at_params_list_clear+0xe>

000258a2 <at_params_short_put>:
	list->params = NULL;
}

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   258a2:	b538      	push	{r3, r4, r5, lr}
   258a4:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   258a6:	b160      	cbz	r0, 258c2 <at_params_short_put+0x20>
   258a8:	6843      	ldr	r3, [r0, #4]
   258aa:	b153      	cbz	r3, 258c2 <at_params_short_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   258ac:	f7ff ffa9 	bl	25802 <at_params_get>

	if (param == NULL) {
   258b0:	4604      	mov	r4, r0
   258b2:	b130      	cbz	r0, 258c2 <at_params_short_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   258b4:	f7ff ffbe 	bl	25834 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_SHORT;
   258b8:	2301      	movs	r3, #1
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
   258ba:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   258bc:	7023      	strb	r3, [r4, #0]
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   258be:	60a5      	str	r5, [r4, #8]
}
   258c0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   258c2:	f06f 0015 	mvn.w	r0, #21
   258c6:	e7fb      	b.n	258c0 <at_params_short_put+0x1e>

000258c8 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   258c8:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   258ca:	b160      	cbz	r0, 258e6 <at_params_empty_put+0x1e>
   258cc:	6843      	ldr	r3, [r0, #4]
   258ce:	b153      	cbz	r3, 258e6 <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   258d0:	f7ff ff97 	bl	25802 <at_params_get>

	if (param == NULL) {
   258d4:	4604      	mov	r4, r0
   258d6:	b130      	cbz	r0, 258e6 <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	at_param_clear(param);
   258d8:	f7ff ffac 	bl	25834 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   258dc:	2305      	movs	r3, #5
	param->value.int_val = 0;
   258de:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   258e0:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   258e2:	60a0      	str	r0, [r4, #8]

	return 0;
}
   258e4:	bd10      	pop	{r4, pc}
		return -EINVAL;
   258e6:	f06f 0015 	mvn.w	r0, #21
   258ea:	e7fb      	b.n	258e4 <at_params_empty_put+0x1c>

000258ec <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   258ec:	b538      	push	{r3, r4, r5, lr}
   258ee:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   258f0:	b160      	cbz	r0, 2590c <at_params_int_put+0x20>
   258f2:	6843      	ldr	r3, [r0, #4]
   258f4:	b153      	cbz	r3, 2590c <at_params_int_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   258f6:	f7ff ff84 	bl	25802 <at_params_get>

	if (param == NULL) {
   258fa:	4604      	mov	r4, r0
   258fc:	b130      	cbz	r0, 2590c <at_params_int_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   258fe:	f7ff ff99 	bl	25834 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   25902:	2302      	movs	r3, #2
	param->value.int_val = value;
	return 0;
   25904:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   25906:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   25908:	60a5      	str	r5, [r4, #8]
}
   2590a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2590c:	f06f 0015 	mvn.w	r0, #21
   25910:	e7fb      	b.n	2590a <at_params_int_put+0x1e>

00025912 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   25912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25914:	4616      	mov	r6, r2
   25916:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   25918:	b1c0      	cbz	r0, 2594c <at_params_string_put+0x3a>
   2591a:	6843      	ldr	r3, [r0, #4]
   2591c:	b1b3      	cbz	r3, 2594c <at_params_string_put+0x3a>
   2591e:	b1aa      	cbz	r2, 2594c <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   25920:	f7ff ff6f 	bl	25802 <at_params_get>

	if (param == NULL) {
   25924:	4604      	mov	r4, r0
   25926:	b188      	cbz	r0, 2594c <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   25928:	1c68      	adds	r0, r5, #1
   2592a:	f7fc fc1b 	bl	22164 <k_malloc>

	if (param_value == NULL) {
   2592e:	4607      	mov	r7, r0
   25930:	b178      	cbz	r0, 25952 <at_params_string_put+0x40>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);
   25932:	462a      	mov	r2, r5
   25934:	4631      	mov	r1, r6
   25936:	f7fe ffc3 	bl	248c0 <memcpy>

	at_param_clear(param);
   2593a:	4620      	mov	r0, r4
   2593c:	f7ff ff7a 	bl	25834 <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   25940:	2303      	movs	r3, #3
	param->value.str_val = param_value;

	return 0;
   25942:	2000      	movs	r0, #0
	param->size = str_len;
   25944:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   25946:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   25948:	60a7      	str	r7, [r4, #8]
}
   2594a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   2594c:	f06f 0015 	mvn.w	r0, #21
   25950:	e7fb      	b.n	2594a <at_params_string_put+0x38>
		return -ENOMEM;
   25952:	f06f 000b 	mvn.w	r0, #11
   25956:	e7f8      	b.n	2594a <at_params_string_put+0x38>

00025958 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			 const u32_t *array, size_t array_len)
{
   25958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2595a:	4616      	mov	r6, r2
   2595c:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   2595e:	b1c0      	cbz	r0, 25992 <at_params_array_put+0x3a>
   25960:	6843      	ldr	r3, [r0, #4]
   25962:	b1b3      	cbz	r3, 25992 <at_params_array_put+0x3a>
   25964:	b1aa      	cbz	r2, 25992 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   25966:	f7ff ff4c 	bl	25802 <at_params_get>

	if (param == NULL) {
   2596a:	4604      	mov	r4, r0
   2596c:	b188      	cbz	r0, 25992 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	u32_t *param_value = (u32_t *)k_malloc(array_len);
   2596e:	4628      	mov	r0, r5
   25970:	f7fc fbf8 	bl	22164 <k_malloc>

	if (param_value == NULL) {
   25974:	4607      	mov	r7, r0
   25976:	b178      	cbz	r0, 25998 <at_params_array_put+0x40>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);
   25978:	462a      	mov	r2, r5
   2597a:	4631      	mov	r1, r6
   2597c:	f7fe ffa0 	bl	248c0 <memcpy>

	at_param_clear(param);
   25980:	4620      	mov	r0, r4
   25982:	f7ff ff57 	bl	25834 <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   25986:	2304      	movs	r3, #4
	param->value.array_val = param_value;

	return 0;
   25988:	2000      	movs	r0, #0
	param->size = array_len;
   2598a:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   2598c:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   2598e:	60a7      	str	r7, [r4, #8]
}
   25990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   25992:	f06f 0015 	mvn.w	r0, #21
   25996:	e7fb      	b.n	25990 <at_params_array_put+0x38>
		return -ENOMEM;
   25998:	f06f 000b 	mvn.w	r0, #11
   2599c:	e7f8      	b.n	25990 <at_params_array_put+0x38>

0002599e <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			u16_t *value)
{
   2599e:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   259a0:	b160      	cbz	r0, 259bc <at_params_short_get+0x1e>
   259a2:	6843      	ldr	r3, [r0, #4]
   259a4:	b153      	cbz	r3, 259bc <at_params_short_get+0x1e>
   259a6:	b14a      	cbz	r2, 259bc <at_params_short_get+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   259a8:	f7ff ff2b 	bl	25802 <at_params_get>

	if (param == NULL) {
   259ac:	b130      	cbz	r0, 259bc <at_params_short_get+0x1e>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   259ae:	7803      	ldrb	r3, [r0, #0]
   259b0:	2b01      	cmp	r3, #1
   259b2:	d103      	bne.n	259bc <at_params_short_get+0x1e>
		return -EINVAL;
	}

	*value = (u16_t)param->value.int_val;
   259b4:	6883      	ldr	r3, [r0, #8]
	return 0;
   259b6:	2000      	movs	r0, #0
	*value = (u16_t)param->value.int_val;
   259b8:	8013      	strh	r3, [r2, #0]
}
   259ba:	bd08      	pop	{r3, pc}
		return -EINVAL;
   259bc:	f06f 0015 	mvn.w	r0, #21
   259c0:	e7fb      	b.n	259ba <at_params_short_get+0x1c>

000259c2 <at_params_string_get>:
	return 0;
}

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   259c2:	b570      	push	{r4, r5, r6, lr}
   259c4:	4616      	mov	r6, r2
   259c6:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   259c8:	b1c0      	cbz	r0, 259fc <at_params_string_get+0x3a>
   259ca:	6843      	ldr	r3, [r0, #4]
   259cc:	b1b3      	cbz	r3, 259fc <at_params_string_get+0x3a>
   259ce:	b1aa      	cbz	r2, 259fc <at_params_string_get+0x3a>
	    value == NULL || len == NULL) {
   259d0:	b1a4      	cbz	r4, 259fc <at_params_string_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   259d2:	f7ff ff16 	bl	25802 <at_params_get>

	if (param == NULL) {
   259d6:	4601      	mov	r1, r0
   259d8:	b180      	cbz	r0, 259fc <at_params_string_get+0x3a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   259da:	7803      	ldrb	r3, [r0, #0]
   259dc:	2b03      	cmp	r3, #3
   259de:	d10d      	bne.n	259fc <at_params_string_get+0x3a>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   259e0:	f7ff ff18 	bl	25814 <at_param_size>

	if (*len < param_len) {
   259e4:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   259e6:	4605      	mov	r5, r0
	if (*len < param_len) {
   259e8:	4283      	cmp	r3, r0
   259ea:	d30a      	bcc.n	25a02 <at_params_string_get+0x40>
		return -ENOMEM;
	}

	memcpy(value, param->value.str_val, param_len);
   259ec:	4602      	mov	r2, r0
   259ee:	6889      	ldr	r1, [r1, #8]
   259f0:	4630      	mov	r0, r6
   259f2:	f7fe ff65 	bl	248c0 <memcpy>
	*len = param_len;

	return 0;
   259f6:	2000      	movs	r0, #0
	*len = param_len;
   259f8:	6025      	str	r5, [r4, #0]
}
   259fa:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   259fc:	f06f 0015 	mvn.w	r0, #21
   25a00:	e7fb      	b.n	259fa <at_params_string_get+0x38>
		return -ENOMEM;
   25a02:	f06f 000b 	mvn.w	r0, #11
   25a06:	e7f8      	b.n	259fa <at_params_string_get+0x38>

00025a08 <at_params_valid_count_get>:

	return 0;
}

u32_t at_params_valid_count_get(const struct at_param_list *list)
{
   25a08:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   25a0a:	4604      	mov	r4, r0
   25a0c:	b178      	cbz	r0, 25a2e <at_params_valid_count_get+0x26>
   25a0e:	6840      	ldr	r0, [r0, #4]
   25a10:	b168      	cbz	r0, 25a2e <at_params_valid_count_get+0x26>
	if (index >= list->param_count) {
   25a12:	6822      	ldr	r2, [r4, #0]
   25a14:	b14a      	cbz	r2, 25a2a <at_params_valid_count_get+0x22>
   25a16:	2200      	movs	r2, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   25a18:	7803      	ldrb	r3, [r0, #0]
   25a1a:	b133      	cbz	r3, 25a2a <at_params_valid_count_get+0x22>
		valid_i += 1;
   25a1c:	3201      	adds	r2, #1
		param = at_params_get(list, valid_i);
   25a1e:	4611      	mov	r1, r2
   25a20:	4620      	mov	r0, r4
   25a22:	f7ff feee 	bl	25802 <at_params_get>
	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   25a26:	2800      	cmp	r0, #0
   25a28:	d1f6      	bne.n	25a18 <at_params_valid_count_get+0x10>
	}

	return valid_i;
}
   25a2a:	4610      	mov	r0, r2
   25a2c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   25a2e:	f06f 0215 	mvn.w	r2, #21
   25a32:	e7fa      	b.n	25a2a <at_params_valid_count_get+0x22>

00025a34 <arch_system_halt>:
	__asm__ volatile(
   25a34:	f04f 0220 	mov.w	r2, #32
   25a38:	f3ef 8311 	mrs	r3, BASEPRI
   25a3c:	f382 8811 	msr	BASEPRI, r2
   25a40:	f3bf 8f6f 	isb	sy
   25a44:	e7fe      	b.n	25a44 <arch_system_halt+0x10>

00025a46 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   25a46:	f7fe bd8b 	b.w	24560 <z_clock_idle_exit>

00025a4a <k_mem_slab_init>:
{
   25a4a:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   25a4c:	2400      	movs	r4, #0
	slab->block_size = block_size;
   25a4e:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
   25a52:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
   25a56:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   25a58:	42a3      	cmp	r3, r4
   25a5a:	d102      	bne.n	25a62 <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
   25a5c:	e9c0 0000 	strd	r0, r0, [r0]
}
   25a60:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   25a62:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   25a64:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   25a66:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   25a68:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   25a6a:	4411      	add	r1, r2
   25a6c:	e7f4      	b.n	25a58 <k_mem_slab_init+0xe>

00025a6e <k_mem_pool_malloc>:
{
   25a6e:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   25a70:	2404      	movs	r4, #4
   25a72:	190a      	adds	r2, r1, r4
   25a74:	d204      	bcs.n	25a80 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   25a76:	2300      	movs	r3, #0
   25a78:	4669      	mov	r1, sp
   25a7a:	f7fc fafb 	bl	22074 <k_mem_pool_alloc>
   25a7e:	b110      	cbz	r0, 25a86 <k_mem_pool_malloc+0x18>
		return NULL;
   25a80:	2000      	movs	r0, #0
}
   25a82:	b002      	add	sp, #8
   25a84:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   25a86:	4622      	mov	r2, r4
   25a88:	a901      	add	r1, sp, #4
   25a8a:	9800      	ldr	r0, [sp, #0]
   25a8c:	f7fe ff18 	bl	248c0 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   25a90:	9800      	ldr	r0, [sp, #0]
   25a92:	3004      	adds	r0, #4
   25a94:	e7f5      	b.n	25a82 <k_mem_pool_malloc+0x14>

00025a96 <k_free>:
	if (ptr != NULL) {
   25a96:	b110      	cbz	r0, 25a9e <k_free+0x8>
		k_mem_pool_free_id(ptr);
   25a98:	3804      	subs	r0, #4
   25a9a:	f7fc bb37 	b.w	2210c <k_mem_pool_free_id>
}
   25a9e:	4770      	bx	lr

00025aa0 <k_calloc>:
{
   25aa0:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   25aa2:	fba0 4501 	umull	r4, r5, r0, r1
   25aa6:	b935      	cbnz	r5, 25ab6 <k_calloc+0x16>
	ret = k_malloc(bounds);
   25aa8:	4620      	mov	r0, r4
   25aaa:	f7fc fb5b 	bl	22164 <k_malloc>
	if (ret != NULL) {
   25aae:	4606      	mov	r6, r0
   25ab0:	b918      	cbnz	r0, 25aba <k_calloc+0x1a>
}
   25ab2:	4630      	mov	r0, r6
   25ab4:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   25ab6:	2600      	movs	r6, #0
   25ab8:	e7fb      	b.n	25ab2 <k_calloc+0x12>
		(void)memset(ret, 0, bounds);
   25aba:	4622      	mov	r2, r4
   25abc:	4629      	mov	r1, r5
   25abe:	f7fe ff2c 	bl	2491a <memset>
   25ac2:	e7f6      	b.n	25ab2 <k_calloc+0x12>

00025ac4 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   25ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25ac8:	4604      	mov	r4, r0
   25aca:	460f      	mov	r7, r1
   25acc:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   25ace:	f100 0508 	add.w	r5, r0, #8
   25ad2:	f04f 0220 	mov.w	r2, #32
   25ad6:	f3ef 8611 	mrs	r6, BASEPRI
   25ada:	f382 8811 	msr	BASEPRI, r2
   25ade:	f3bf 8f6f 	isb	sy
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   25ae2:	b1db      	cbz	r3, 25b1c <queue_insert+0x58>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   25ae4:	2008      	movs	r0, #8
   25ae6:	f7fc fb43 	bl	22170 <z_thread_malloc>
		if (anode == NULL) {
   25aea:	b938      	cbnz	r0, 25afc <queue_insert+0x38>
	__asm__ volatile(
   25aec:	f386 8811 	msr	BASEPRI, r6
   25af0:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   25af4:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   25af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   25afc:	2301      	movs	r3, #1
		anode->data = data;
   25afe:	f8c0 8004 	str.w	r8, [r0, #4]
   25b02:	6003      	str	r3, [r0, #0]
   25b04:	6803      	ldr	r3, [r0, #0]
   25b06:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   25b0a:	b95f      	cbnz	r7, 25b24 <queue_insert+0x60>
	parent->next_and_flags = cur_flags | (unative_t)child;
   25b0c:	6823      	ldr	r3, [r4, #0]
   25b0e:	4313      	orrs	r3, r2
   25b10:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   25b12:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   25b14:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   25b16:	b973      	cbnz	r3, 25b36 <queue_insert+0x72>
	list->tail = node;
   25b18:	6060      	str	r0, [r4, #4]
   25b1a:	e00c      	b.n	25b36 <queue_insert+0x72>
	node->next_and_flags = flags;
   25b1c:	f8c8 3000 	str.w	r3, [r8]
   25b20:	4640      	mov	r0, r8
   25b22:	e7ef      	b.n	25b04 <queue_insert+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25b24:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   25b26:	f033 0303 	bics.w	r3, r3, #3
   25b2a:	d114      	bne.n	25b56 <queue_insert+0x92>
	parent->next_and_flags = cur_flags | (unative_t)child;
   25b2c:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   25b2e:	6862      	ldr	r2, [r4, #4]
   25b30:	b95a      	cbnz	r2, 25b4a <queue_insert+0x86>
	list->head = node;
   25b32:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   25b36:	2104      	movs	r1, #4
   25b38:	4628      	mov	r0, r5
   25b3a:	f000 fb86 	bl	2624a <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   25b3e:	4628      	mov	r0, r5
   25b40:	4631      	mov	r1, r6
   25b42:	f000 f8d5 	bl	25cf0 <z_reschedule>
	return 0;
   25b46:	2000      	movs	r0, #0
   25b48:	e7d6      	b.n	25af8 <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25b4a:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25b4c:	f003 0303 	and.w	r3, r3, #3
   25b50:	4303      	orrs	r3, r0
   25b52:	6013      	str	r3, [r2, #0]
   25b54:	e7e0      	b.n	25b18 <queue_insert+0x54>
   25b56:	4313      	orrs	r3, r2
   25b58:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25b5a:	683b      	ldr	r3, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25b5c:	f003 0303 	and.w	r3, r3, #3
   25b60:	4318      	orrs	r0, r3
   25b62:	6038      	str	r0, [r7, #0]
   25b64:	e7e7      	b.n	25b36 <queue_insert+0x72>

00025b66 <z_queue_node_peek>:
{
   25b66:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   25b68:	4604      	mov	r4, r0
   25b6a:	b130      	cbz	r0, 25b7a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25b6c:	6802      	ldr	r2, [r0, #0]
   25b6e:	0793      	lsls	r3, r2, #30
   25b70:	d003      	beq.n	25b7a <z_queue_node_peek+0x14>
		ret = anode->data;
   25b72:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   25b74:	b109      	cbz	r1, 25b7a <z_queue_node_peek+0x14>
			k_free(anode);
   25b76:	f7ff ff8e 	bl	25a96 <k_free>
}
   25b7a:	4620      	mov	r0, r4
   25b7c:	bd10      	pop	{r4, pc}

00025b7e <z_impl_k_queue_init>:
	list->head = NULL;
   25b7e:	2300      	movs	r3, #0
	list->tail = NULL;
   25b80:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
   25b84:	f100 0308 	add.w	r3, r0, #8
   25b88:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   25b8c:	4770      	bx	lr

00025b8e <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   25b8e:	460a      	mov	r2, r1
   25b90:	2300      	movs	r3, #0
   25b92:	6841      	ldr	r1, [r0, #4]
   25b94:	f7ff bf96 	b.w	25ac4 <queue_insert>

00025b98 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   25b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25b9c:	4604      	mov	r4, r0
   25b9e:	b086      	sub	sp, #24
   25ba0:	460d      	mov	r5, r1
	__asm__ volatile(
   25ba2:	f04f 0320 	mov.w	r3, #32
   25ba6:	f3ef 8711 	mrs	r7, BASEPRI
   25baa:	f383 8811 	msr	BASEPRI, r3
   25bae:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   25bb2:	6802      	ldr	r2, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   25bb4:	b192      	cbz	r2, 25bdc <z_impl_k_queue_get+0x44>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25bb6:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25bb8:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25bba:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25bbe:	428a      	cmp	r2, r1
	list->head = node;
   25bc0:	6003      	str	r3, [r0, #0]
	list->tail = node;
   25bc2:	bf08      	it	eq
   25bc4:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   25bc6:	2101      	movs	r1, #1
   25bc8:	4610      	mov	r0, r2
   25bca:	f7ff ffcc 	bl	25b66 <z_queue_node_peek>
	__asm__ volatile(
   25bce:	f387 8811 	msr	BASEPRI, r7
   25bd2:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   25bd6:	b006      	add	sp, #24
   25bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   25bdc:	b929      	cbnz	r1, 25bea <z_impl_k_queue_get+0x52>
   25bde:	f387 8811 	msr	BASEPRI, r7
   25be2:	f3bf 8f6f 	isb	sy
			return NULL;
   25be6:	2000      	movs	r0, #0
   25be8:	e7f5      	b.n	25bd6 <z_impl_k_queue_get+0x3e>
   25bea:	f387 8811 	msr	BASEPRI, r7
   25bee:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   25bf2:	2104      	movs	r1, #4
   25bf4:	4603      	mov	r3, r0
   25bf6:	eb0d 0001 	add.w	r0, sp, r1
   25bfa:	f000 fb10 	bl	2621e <k_poll_event_init>
	if (timeout != K_FOREVER) {
   25bfe:	1c6a      	adds	r2, r5, #1
   25c00:	d002      	beq.n	25c08 <z_impl_k_queue_get+0x70>
	return z_impl_k_uptime_get();
   25c02:	f000 f9d6 	bl	25fb2 <z_impl_k_uptime_get>
   25c06:	4606      	mov	r6, r0
{
   25c08:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   25c0a:	9b04      	ldr	r3, [sp, #16]
   25c0c:	f36f 3310 	bfc	r3, #12, #5
   25c10:	9304      	str	r3, [sp, #16]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   25c12:	2101      	movs	r1, #1
   25c14:	1bea      	subs	r2, r5, r7
   25c16:	a801      	add	r0, sp, #4
   25c18:	f7fd f9ee 	bl	22ff8 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   25c1c:	b108      	cbz	r0, 25c22 <z_impl_k_queue_get+0x8a>
   25c1e:	300b      	adds	r0, #11
   25c20:	d1e1      	bne.n	25be6 <z_impl_k_queue_get+0x4e>
	__asm__ volatile(
   25c22:	f04f 0320 	mov.w	r3, #32
   25c26:	f3ef 8811 	mrs	r8, BASEPRI
   25c2a:	f383 8811 	msr	BASEPRI, r3
   25c2e:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   25c32:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   25c34:	b138      	cbz	r0, 25c46 <z_impl_k_queue_get+0xae>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25c36:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25c38:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25c3a:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25c3e:	4290      	cmp	r0, r2
	list->head = node;
   25c40:	6023      	str	r3, [r4, #0]
	list->tail = node;
   25c42:	bf08      	it	eq
   25c44:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   25c46:	2101      	movs	r1, #1
   25c48:	f7ff ff8d 	bl	25b66 <z_queue_node_peek>
	__asm__ volatile(
   25c4c:	f388 8811 	msr	BASEPRI, r8
   25c50:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   25c54:	2800      	cmp	r0, #0
   25c56:	d1be      	bne.n	25bd6 <z_impl_k_queue_get+0x3e>
   25c58:	1c6b      	adds	r3, r5, #1
   25c5a:	d0d6      	beq.n	25c0a <z_impl_k_queue_get+0x72>
	return z_impl_k_uptime_get();
   25c5c:	f000 f9a9 	bl	25fb2 <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   25c60:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   25c62:	42bd      	cmp	r5, r7
   25c64:	dad1      	bge.n	25c0a <z_impl_k_queue_get+0x72>
   25c66:	e7be      	b.n	25be6 <z_impl_k_queue_get+0x4e>

00025c68 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   25c68:	7b43      	ldrb	r3, [r0, #13]
   25c6a:	06db      	lsls	r3, r3, #27
   25c6c:	bf03      	ittte	eq
   25c6e:	6980      	ldreq	r0, [r0, #24]
   25c70:	fab0 f080 	clzeq	r0, r0
   25c74:	0940      	lsreq	r0, r0, #5
   25c76:	2000      	movne	r0, #0
}
   25c78:	4770      	bx	lr

00025c7a <z_swap_irqlock>:
{
   25c7a:	b510      	push	{r4, lr}
   25c7c:	4604      	mov	r4, r0
	z_check_stack_sentinel();
   25c7e:	f7fc ff3f 	bl	22b00 <z_check_stack_sentinel>
	ret = arch_swap(key);
   25c82:	4620      	mov	r0, r4
}
   25c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   25c88:	f7ea b8dc 	b.w	fe44 <arch_swap>

00025c8c <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   25c8c:	f990 000e 	ldrsb.w	r0, [r0, #14]
   25c90:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   25c94:	4298      	cmp	r0, r3
   25c96:	bfac      	ite	ge
   25c98:	2000      	movge	r0, #0
   25c9a:	2001      	movlt	r0, #1
   25c9c:	4770      	bx	lr

00025c9e <z_find_first_thread_to_unpend>:
{
   25c9e:	b510      	push	{r4, lr}
	__asm__ volatile(
   25ca0:	f04f 0320 	mov.w	r3, #32
   25ca4:	f3ef 8411 	mrs	r4, BASEPRI
   25ca8:	f383 8811 	msr	BASEPRI, r3
   25cac:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   25cb0:	f000 f85d 	bl	25d6e <z_priq_dumb_best>
	__asm__ volatile(
   25cb4:	f384 8811 	msr	BASEPRI, r4
   25cb8:	f3bf 8f6f 	isb	sy
}
   25cbc:	bd10      	pop	{r4, pc}

00025cbe <z_unpend_thread_no_timeout>:
{
   25cbe:	b538      	push	{r3, r4, r5, lr}
   25cc0:	4604      	mov	r4, r0
	__asm__ volatile(
   25cc2:	f04f 0320 	mov.w	r3, #32
   25cc6:	f3ef 8511 	mrs	r5, BASEPRI
   25cca:	f383 8811 	msr	BASEPRI, r3
   25cce:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   25cd2:	4601      	mov	r1, r0
   25cd4:	6880      	ldr	r0, [r0, #8]
   25cd6:	f7fc fc0d 	bl	224f4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   25cda:	7b63      	ldrb	r3, [r4, #13]
   25cdc:	f023 0302 	bic.w	r3, r3, #2
   25ce0:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   25ce2:	f385 8811 	msr	BASEPRI, r5
   25ce6:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   25cea:	2300      	movs	r3, #0
   25cec:	60a3      	str	r3, [r4, #8]
}
   25cee:	bd38      	pop	{r3, r4, r5, pc}

00025cf0 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   25cf0:	b921      	cbnz	r1, 25cfc <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   25cf2:	f3ef 8005 	mrs	r0, IPSR
   25cf6:	b908      	cbnz	r0, 25cfc <z_reschedule+0xc>
	return z_swap_irqlock(key.key);
   25cf8:	f7ff bfbf 	b.w	25c7a <z_swap_irqlock>
   25cfc:	f381 8811 	msr	BASEPRI, r1
   25d00:	f3bf 8f6f 	isb	sy
}
   25d04:	4770      	bx	lr

00025d06 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   25d06:	4603      	mov	r3, r0
   25d08:	b920      	cbnz	r0, 25d14 <z_reschedule_irqlock+0xe>
   25d0a:	f3ef 8205 	mrs	r2, IPSR
   25d0e:	b90a      	cbnz	r2, 25d14 <z_reschedule_irqlock+0xe>
		z_swap_irqlock(key);
   25d10:	f7ff bfb3 	b.w	25c7a <z_swap_irqlock>
   25d14:	f383 8811 	msr	BASEPRI, r3
   25d18:	f3bf 8f6f 	isb	sy
}
   25d1c:	4770      	bx	lr

00025d1e <z_reschedule_unlocked>:
	__asm__ volatile(
   25d1e:	f04f 0320 	mov.w	r3, #32
   25d22:	f3ef 8011 	mrs	r0, BASEPRI
   25d26:	f383 8811 	msr	BASEPRI, r3
   25d2a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   25d2e:	f7ff bfea 	b.w	25d06 <z_reschedule_irqlock>

00025d32 <z_unpend_thread>:
{
   25d32:	b538      	push	{r3, r4, r5, lr}
   25d34:	4604      	mov	r4, r0
   25d36:	f04f 0320 	mov.w	r3, #32
   25d3a:	f3ef 8511 	mrs	r5, BASEPRI
   25d3e:	f383 8811 	msr	BASEPRI, r3
   25d42:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   25d46:	4601      	mov	r1, r0
   25d48:	6880      	ldr	r0, [r0, #8]
   25d4a:	f7fc fbd3 	bl	224f4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   25d4e:	7b63      	ldrb	r3, [r4, #13]
   25d50:	f023 0302 	bic.w	r3, r3, #2
   25d54:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   25d56:	f385 8811 	msr	BASEPRI, r5
   25d5a:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   25d5e:	2300      	movs	r3, #0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   25d60:	f104 0018 	add.w	r0, r4, #24
   25d64:	60a3      	str	r3, [r4, #8]
}
   25d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   25d6a:	f000 b8de 	b.w	25f2a <z_abort_timeout>

00025d6e <z_priq_dumb_best>:
	return list->head == list;
   25d6e:	6803      	ldr	r3, [r0, #0]
}
   25d70:	4298      	cmp	r0, r3
   25d72:	bf14      	ite	ne
   25d74:	4618      	movne	r0, r3
   25d76:	2000      	moveq	r0, #0
   25d78:	4770      	bx	lr

00025d7a <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   25d7a:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   25d7e:	b570      	push	{r4, r5, r6, lr}
   25d80:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   25d82:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   25d86:	b1cb      	cbz	r3, 25dbc <z_thread_timeout+0x42>
	__asm__ volatile(
   25d88:	f04f 0320 	mov.w	r3, #32
   25d8c:	f3ef 8611 	mrs	r6, BASEPRI
   25d90:	f383 8811 	msr	BASEPRI, r3
   25d94:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   25d98:	4629      	mov	r1, r5
   25d9a:	f850 0c10 	ldr.w	r0, [r0, #-16]
   25d9e:	f7fc fba9 	bl	224f4 <z_priq_dumb_remove>
   25da2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   25da6:	f023 0302 	bic.w	r3, r3, #2
   25daa:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
   25dae:	f386 8811 	msr	BASEPRI, r6
   25db2:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   25db6:	2300      	movs	r3, #0
   25db8:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   25dbc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   25dc0:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   25dc2:	f023 0314 	bic.w	r3, r3, #20
   25dc6:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   25dca:	f7ff ff4d 	bl	25c68 <z_is_thread_ready>
   25dce:	b120      	cbz	r0, 25dda <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
   25dd0:	4628      	mov	r0, r5
}
   25dd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25dd6:	f7fc bbdd 	b.w	22594 <z_add_thread_to_ready_q>
   25dda:	bd70      	pop	{r4, r5, r6, pc}

00025ddc <z_unpend_first_thread>:
{
   25ddc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   25dde:	f04f 0320 	mov.w	r3, #32
   25de2:	f3ef 8211 	mrs	r2, BASEPRI
   25de6:	f383 8811 	msr	BASEPRI, r3
   25dea:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   25dee:	f7ff ffbe 	bl	25d6e <z_priq_dumb_best>
   25df2:	4604      	mov	r4, r0
	__asm__ volatile(
   25df4:	f382 8811 	msr	BASEPRI, r2
   25df8:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   25dfc:	b1c8      	cbz	r0, 25e32 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   25dfe:	f04f 0320 	mov.w	r3, #32
   25e02:	f3ef 8511 	mrs	r5, BASEPRI
   25e06:	f383 8811 	msr	BASEPRI, r3
   25e0a:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   25e0e:	4601      	mov	r1, r0
   25e10:	6880      	ldr	r0, [r0, #8]
   25e12:	f7fc fb6f 	bl	224f4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   25e16:	7b63      	ldrb	r3, [r4, #13]
   25e18:	f023 0302 	bic.w	r3, r3, #2
   25e1c:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   25e1e:	f385 8811 	msr	BASEPRI, r5
   25e22:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   25e26:	2300      	movs	r3, #0
   25e28:	f104 0018 	add.w	r0, r4, #24
   25e2c:	60a3      	str	r3, [r4, #8]
   25e2e:	f000 f87c 	bl	25f2a <z_abort_timeout>
}
   25e32:	4620      	mov	r0, r4
   25e34:	bd38      	pop	{r3, r4, r5, pc}

00025e36 <z_unpend_all>:
{
   25e36:	b570      	push	{r4, r5, r6, lr}
   25e38:	4606      	mov	r6, r0
	int need_sched = 0;
   25e3a:	2500      	movs	r5, #0
   25e3c:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25e3e:	42a6      	cmp	r6, r4
   25e40:	d000      	beq.n	25e44 <z_unpend_all+0xe>
	while ((th = z_waitq_head(wait_q)) != NULL) {
   25e42:	b90c      	cbnz	r4, 25e48 <z_unpend_all+0x12>
}
   25e44:	4628      	mov	r0, r5
   25e46:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(th);
   25e48:	4620      	mov	r0, r4
   25e4a:	f7ff ff72 	bl	25d32 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   25e4e:	4620      	mov	r0, r4
   25e50:	f7ff ff0a 	bl	25c68 <z_is_thread_ready>
		need_sched = 1;
   25e54:	2501      	movs	r5, #1
   25e56:	2800      	cmp	r0, #0
   25e58:	d0f0      	beq.n	25e3c <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   25e5a:	4620      	mov	r0, r4
   25e5c:	f7fc fb9a 	bl	22594 <z_add_thread_to_ready_q>
   25e60:	e7ec      	b.n	25e3c <z_unpend_all+0x6>

00025e62 <z_impl_k_sem_init>:
	sys_dlist_init(&sem->poll_events);
   25e62:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   25e66:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   25e6a:	e9c0 0000 	strd	r0, r0, [r0]
   25e6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   25e72:	4770      	bx	lr

00025e74 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   25e74:	7b43      	ldrb	r3, [r0, #13]
   25e76:	06db      	lsls	r3, r3, #27
   25e78:	bf03      	ittte	eq
   25e7a:	6980      	ldreq	r0, [r0, #24]
   25e7c:	fab0 f080 	clzeq	r0, r0
   25e80:	0940      	lsreq	r0, r0, #5
   25e82:	2000      	movne	r0, #0
}
   25e84:	4770      	bx	lr

00025e86 <z_impl_k_thread_name_set>:
}
   25e86:	f06f 0046 	mvn.w	r0, #70	; 0x46
   25e8a:	4770      	bx	lr

00025e8c <k_thread_name_get>:
}
   25e8c:	2000      	movs	r0, #0
   25e8e:	4770      	bx	lr

00025e90 <z_new_thread_init>:
{
   25e90:	b510      	push	{r4, lr}
	*((u32_t *)pStack) = STACK_SENTINEL;
   25e92:	f04f 34f0 	mov.w	r4, #4042322160	; 0xf0f0f0f0
   25e96:	600c      	str	r4, [r1, #0]
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   25e98:	9c02      	ldr	r4, [sp, #8]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
   25e9a:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
   25e9c:	7304      	strb	r4, [r0, #12]

	thread_base->sched_locked = 0U;
   25e9e:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   25ea0:	2404      	movs	r4, #4
	thread_base->sched_locked = 0U;
   25ea2:	73c3      	strb	r3, [r0, #15]
	thread_base->thread_state = (u8_t)initial_state;
   25ea4:	7344      	strb	r4, [r0, #13]
	node->prev = NULL;
   25ea6:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   25eaa:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   25eae:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
   25eb2:	bd10      	pop	{r4, pc}

00025eb4 <z_thread_single_suspend>:
{
   25eb4:	b510      	push	{r4, lr}
   25eb6:	4604      	mov	r4, r0
	if (z_is_thread_ready(thread)) {
   25eb8:	f7ff ffdc 	bl	25e74 <z_is_thread_ready>
   25ebc:	b110      	cbz	r0, 25ec4 <z_thread_single_suspend+0x10>
		z_remove_thread_from_ready_q(thread);
   25ebe:	4620      	mov	r0, r4
   25ec0:	f7fc fc1a 	bl	226f8 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   25ec4:	7b63      	ldrb	r3, [r4, #13]
   25ec6:	f043 0310 	orr.w	r3, r3, #16
   25eca:	7363      	strb	r3, [r4, #13]
}
   25ecc:	bd10      	pop	{r4, pc}

00025ece <z_thread_single_resume>:
{
   25ece:	b508      	push	{r3, lr}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   25ed0:	7b43      	ldrb	r3, [r0, #13]
   25ed2:	4602      	mov	r2, r0
   25ed4:	f023 0310 	bic.w	r3, r3, #16
   25ed8:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   25eda:	f7ff ffcb 	bl	25e74 <z_is_thread_ready>
   25ede:	b120      	cbz	r0, 25eea <z_thread_single_resume+0x1c>
}
   25ee0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_add_thread_to_ready_q(thread);
   25ee4:	4610      	mov	r0, r2
   25ee6:	f7fc bb55 	b.w	22594 <z_add_thread_to_ready_q>
   25eea:	bd08      	pop	{r3, pc}

00025eec <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   25eec:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   25eee:	b510      	push	{r4, lr}
   25ef0:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   25ef2:	b103      	cbz	r3, 25ef6 <z_thread_single_abort+0xa>
		thread->fn_abort();
   25ef4:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   25ef6:	4620      	mov	r0, r4
   25ef8:	f7ff ffbc 	bl	25e74 <z_is_thread_ready>
   25efc:	b138      	cbz	r0, 25f0e <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
   25efe:	4620      	mov	r0, r4
   25f00:	f7fc fbfa 	bl	226f8 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   25f04:	7b63      	ldrb	r3, [r4, #13]
   25f06:	f043 0308 	orr.w	r3, r3, #8
   25f0a:	7363      	strb	r3, [r4, #13]
}
   25f0c:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
   25f0e:	7b63      	ldrb	r3, [r4, #13]
   25f10:	079b      	lsls	r3, r3, #30
   25f12:	d502      	bpl.n	25f1a <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
   25f14:	4620      	mov	r0, r4
   25f16:	f7ff fed2 	bl	25cbe <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   25f1a:	69a3      	ldr	r3, [r4, #24]
   25f1c:	2b00      	cmp	r3, #0
   25f1e:	d0f1      	beq.n	25f04 <z_thread_single_abort+0x18>
   25f20:	f104 0018 	add.w	r0, r4, #24
   25f24:	f000 f801 	bl	25f2a <z_abort_timeout>
   25f28:	e7ec      	b.n	25f04 <z_thread_single_abort+0x18>

00025f2a <z_abort_timeout>:
{
   25f2a:	b510      	push	{r4, lr}
	__asm__ volatile(
   25f2c:	f04f 0220 	mov.w	r2, #32
   25f30:	f3ef 8411 	mrs	r4, BASEPRI
   25f34:	f382 8811 	msr	BASEPRI, r2
   25f38:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   25f3c:	6803      	ldr	r3, [r0, #0]
   25f3e:	b13b      	cbz	r3, 25f50 <z_abort_timeout+0x26>
			remove_timeout(to);
   25f40:	f7fc ff1e 	bl	22d80 <remove_timeout>
			ret = 0;
   25f44:	2000      	movs	r0, #0
	__asm__ volatile(
   25f46:	f384 8811 	msr	BASEPRI, r4
   25f4a:	f3bf 8f6f 	isb	sy
}
   25f4e:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   25f50:	f06f 0015 	mvn.w	r0, #21
   25f54:	e7f7      	b.n	25f46 <z_abort_timeout+0x1c>

00025f56 <z_get_next_timeout_expiry>:
{
   25f56:	b510      	push	{r4, lr}
	__asm__ volatile(
   25f58:	f04f 0320 	mov.w	r3, #32
   25f5c:	f3ef 8411 	mrs	r4, BASEPRI
   25f60:	f383 8811 	msr	BASEPRI, r3
   25f64:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   25f68:	f7fc ff20 	bl	22dac <next_timeout>
	__asm__ volatile(
   25f6c:	f384 8811 	msr	BASEPRI, r4
   25f70:	f3bf 8f6f 	isb	sy
}
   25f74:	bd10      	pop	{r4, pc}

00025f76 <z_set_timeout_expiry>:
{
   25f76:	b570      	push	{r4, r5, r6, lr}
   25f78:	4604      	mov	r4, r0
   25f7a:	460e      	mov	r6, r1
	__asm__ volatile(
   25f7c:	f04f 0320 	mov.w	r3, #32
   25f80:	f3ef 8511 	mrs	r5, BASEPRI
   25f84:	f383 8811 	msr	BASEPRI, r3
   25f88:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   25f8c:	f7fc ff0e 	bl	22dac <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   25f90:	2801      	cmp	r0, #1
   25f92:	dd05      	ble.n	25fa0 <z_set_timeout_expiry+0x2a>
   25f94:	42a0      	cmp	r0, r4
   25f96:	dd03      	ble.n	25fa0 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   25f98:	4631      	mov	r1, r6
   25f9a:	4620      	mov	r0, r4
   25f9c:	f7e9 febc 	bl	fd18 <z_clock_set_timeout>
	__asm__ volatile(
   25fa0:	f385 8811 	msr	BASEPRI, r5
   25fa4:	f3bf 8f6f 	isb	sy
}
   25fa8:	bd70      	pop	{r4, r5, r6, pc}

00025faa <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   25faa:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   25fac:	f7fc ffb4 	bl	22f18 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   25fb0:	bd08      	pop	{r3, pc}

00025fb2 <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   25fb2:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
   25fb4:	f7fc ffb0 	bl	22f18 <z_tick_get>
			return (t * to_hz + off) / from_hz;
   25fb8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   25fbc:	fba0 2304 	umull	r2, r3, r0, r4
   25fc0:	fb04 3301 	mla	r3, r4, r1, r3
   25fc4:	0bd0      	lsrs	r0, r2, #15
}
   25fc6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   25fca:	0bd9      	lsrs	r1, r3, #15
   25fcc:	bd10      	pop	{r4, pc}

00025fce <k_timer_init>:
	timer->status = 0U;
   25fce:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   25fd0:	e9c0 1206 	strd	r1, r2, [r0, #24]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   25fd4:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
   25fd8:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   25fda:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   25fde:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
   25fe2:	6283      	str	r3, [r0, #40]	; 0x28
}
   25fe4:	4770      	bx	lr

00025fe6 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   25fe6:	b510      	push	{r4, lr}
   25fe8:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   25fea:	f7ff ff9e 	bl	25f2a <z_abort_timeout>

	if (inactive) {
   25fee:	bb00      	cbnz	r0, 26032 <z_impl_k_timer_stop+0x4c>
		return;
	}

	if (timer->stop_fn != NULL) {
   25ff0:	69e3      	ldr	r3, [r4, #28]
   25ff2:	b10b      	cbz	r3, 25ff8 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   25ff4:	4620      	mov	r0, r4
   25ff6:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   25ff8:	f104 0010 	add.w	r0, r4, #16
   25ffc:	2100      	movs	r1, #0
   25ffe:	f7ff fe4e 	bl	25c9e <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   26002:	4604      	mov	r4, r0
   26004:	b1a8      	cbz	r0, 26032 <z_impl_k_timer_stop+0x4c>
		z_unpend_thread_no_timeout(thread);
   26006:	f7ff fe5a 	bl	25cbe <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2600a:	7b63      	ldrb	r3, [r4, #13]
   2600c:	06db      	lsls	r3, r3, #27
   2600e:	d104      	bne.n	2601a <z_impl_k_timer_stop+0x34>
	if (z_is_thread_ready(thread)) {
   26010:	69a3      	ldr	r3, [r4, #24]
   26012:	b913      	cbnz	r3, 2601a <z_impl_k_timer_stop+0x34>
		z_add_thread_to_ready_q(thread);
   26014:	4620      	mov	r0, r4
   26016:	f7fc fabd 	bl	22594 <z_add_thread_to_ready_q>
	__asm__ volatile(
   2601a:	f04f 0320 	mov.w	r3, #32
   2601e:	f3ef 8011 	mrs	r0, BASEPRI
   26022:	f383 8811 	msr	BASEPRI, r3
   26026:	f3bf 8f6f 	isb	sy

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
		z_reschedule_unlocked();
	}
}
   2602a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2602e:	f7ff be6a 	b.w	25d06 <z_reschedule_irqlock>
   26032:	bd10      	pop	{r4, pc}

00026034 <clear_event_registrations>:
{
   26034:	2314      	movs	r3, #20
   26036:	b570      	push	{r4, r5, r6, lr}
	event->poller = NULL;
   26038:	2400      	movs	r4, #0
   2603a:	2601      	movs	r6, #1
   2603c:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   26040:	4281      	cmp	r1, r0
   26042:	d100      	bne.n	26046 <clear_event_registrations+0x12>
}
   26044:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   26046:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   2604a:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   2604e:	f003 030f 	and.w	r3, r3, #15
   26052:	2b04      	cmp	r3, #4
   26054:	d80f      	bhi.n	26076 <clear_event_registrations+0x42>
   26056:	fa06 f303 	lsl.w	r3, r6, r3
   2605a:	f013 0f16 	tst.w	r3, #22
   2605e:	d00a      	beq.n	26076 <clear_event_registrations+0x42>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   26060:	f851 5c14 	ldr.w	r5, [r1, #-20]
   26064:	b13d      	cbz	r5, 26076 <clear_event_registrations+0x42>
	node->prev->next = node->next;
   26066:	f851 3c10 	ldr.w	r3, [r1, #-16]
   2606a:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
   2606c:	f851 5c14 	ldr.w	r5, [r1, #-20]
   26070:	606b      	str	r3, [r5, #4]
	node->prev = NULL;
   26072:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   26076:	f382 8811 	msr	BASEPRI, r2
   2607a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2607e:	f04f 0320 	mov.w	r3, #32
   26082:	f3ef 8211 	mrs	r2, BASEPRI
   26086:	f383 8811 	msr	BASEPRI, r3
   2608a:	f3bf 8f6f 	isb	sy
   2608e:	3914      	subs	r1, #20
   26090:	e7d6      	b.n	26040 <clear_event_registrations+0xc>

00026092 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   26092:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   26094:	6884      	ldr	r4, [r0, #8]
{
   26096:	4605      	mov	r5, r0
   26098:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   2609a:	b19c      	cbz	r4, 260c4 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   2609c:	68a3      	ldr	r3, [r4, #8]
   2609e:	b95b      	cbnz	r3, 260b8 <signal_poll_event+0x26>
	int retcode = 0;
   260a0:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   260a2:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   260a4:	2300      	movs	r3, #0
   260a6:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   260a8:	68eb      	ldr	r3, [r5, #12]
   260aa:	f3c3 3204 	ubfx	r2, r3, #12, #5
   260ae:	4316      	orrs	r6, r2
   260b0:	f366 3310 	bfi	r3, r6, #12, #5
   260b4:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   260b6:	e004      	b.n	260c2 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   260b8:	4798      	blx	r3
		poller->is_polling = false;
   260ba:	2300      	movs	r3, #0
		if (retcode < 0) {
   260bc:	2800      	cmp	r0, #0
		poller->is_polling = false;
   260be:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   260c0:	daf0      	bge.n	260a4 <signal_poll_event+0x12>
}
   260c2:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   260c4:	4620      	mov	r0, r4
   260c6:	e7ed      	b.n	260a4 <signal_poll_event+0x12>

000260c8 <k_poll_poller_cb>:
{
   260c8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   260ca:	6883      	ldr	r3, [r0, #8]
{
   260cc:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   260ce:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   260d0:	7b63      	ldrb	r3, [r4, #13]
   260d2:	079a      	lsls	r2, r3, #30
   260d4:	d401      	bmi.n	260da <k_poll_poller_cb+0x12>
		return 0;
   260d6:	2000      	movs	r0, #0
}
   260d8:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   260da:	6a23      	ldr	r3, [r4, #32]
   260dc:	3302      	adds	r3, #2
   260de:	d012      	beq.n	26106 <k_poll_poller_cb+0x3e>
	z_unpend_thread(thread);
   260e0:	4620      	mov	r0, r4
   260e2:	f7ff fe26 	bl	25d32 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   260e6:	2d08      	cmp	r5, #8
   260e8:	bf0c      	ite	eq
   260ea:	f06f 0303 	mvneq.w	r3, #3
   260ee:	2300      	movne	r3, #0
   260f0:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   260f2:	7b63      	ldrb	r3, [r4, #13]
   260f4:	06db      	lsls	r3, r3, #27
   260f6:	d1ee      	bne.n	260d6 <k_poll_poller_cb+0xe>
	if (!z_is_thread_ready(thread)) {
   260f8:	69a5      	ldr	r5, [r4, #24]
   260fa:	2d00      	cmp	r5, #0
   260fc:	d1eb      	bne.n	260d6 <k_poll_poller_cb+0xe>
		z_add_thread_to_ready_q(thread);
   260fe:	4620      	mov	r0, r4
   26100:	f7fc fa48 	bl	22594 <z_add_thread_to_ready_q>
   26104:	e7e7      	b.n	260d6 <k_poll_poller_cb+0xe>
		return -EAGAIN;
   26106:	f06f 000a 	mvn.w	r0, #10
   2610a:	e7e5      	b.n	260d8 <k_poll_poller_cb+0x10>

0002610c <add_event>:
{
   2610c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2610e:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   26110:	e9d0 2300 	ldrd	r2, r3, [r0]
   26114:	4290      	cmp	r0, r2
   26116:	4604      	mov	r4, r0
   26118:	460d      	mov	r5, r1
   2611a:	d106      	bne.n	2612a <add_event+0x1e>
	node->prev = list->tail;
   2611c:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   2611e:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   26120:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   26122:	6863      	ldr	r3, [r4, #4]
   26124:	601d      	str	r5, [r3, #0]
	list->tail = node;
   26126:	6065      	str	r5, [r4, #4]
   26128:	e019      	b.n	2615e <add_event+0x52>
	if ((pending == NULL) ||
   2612a:	2b00      	cmp	r3, #0
   2612c:	d0f6      	beq.n	2611c <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   2612e:	689b      	ldr	r3, [r3, #8]
   26130:	6879      	ldr	r1, [r7, #4]
   26132:	6858      	ldr	r0, [r3, #4]
   26134:	f7ff fdaa 	bl	25c8c <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   26138:	2800      	cmp	r0, #0
   2613a:	d1ef      	bne.n	2611c <add_event+0x10>
	return list->head == list;
   2613c:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2613e:	42b4      	cmp	r4, r6
   26140:	d0ec      	beq.n	2611c <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   26142:	2e00      	cmp	r6, #0
   26144:	d0ea      	beq.n	2611c <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   26146:	68b3      	ldr	r3, [r6, #8]
   26148:	6878      	ldr	r0, [r7, #4]
   2614a:	6859      	ldr	r1, [r3, #4]
   2614c:	f7ff fd9e 	bl	25c8c <z_is_t1_higher_prio_than_t2>
   26150:	b130      	cbz	r0, 26160 <add_event+0x54>
	node->prev = successor->prev;
   26152:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   26154:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   26158:	6873      	ldr	r3, [r6, #4]
   2615a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2615c:	6075      	str	r5, [r6, #4]
}
   2615e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   26160:	6863      	ldr	r3, [r4, #4]
   26162:	429e      	cmp	r6, r3
   26164:	d0da      	beq.n	2611c <add_event+0x10>
   26166:	6836      	ldr	r6, [r6, #0]
   26168:	e7eb      	b.n	26142 <add_event+0x36>

0002616a <register_events>:
{
   2616a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2616e:	f04f 0b00 	mov.w	fp, #0
{
   26172:	4688      	mov	r8, r1
   26174:	4615      	mov	r5, r2
   26176:	4699      	mov	r9, r3
   26178:	4604      	mov	r4, r0
	int events_registered = 0;
   2617a:	465e      	mov	r6, fp
	event->poller = NULL;
   2617c:	465f      	mov	r7, fp
	for (int ii = 0; ii < num_events; ii++) {
   2617e:	45c3      	cmp	fp, r8
   26180:	db02      	blt.n	26188 <register_events+0x1e>
}
   26182:	4630      	mov	r0, r6
   26184:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26188:	f04f 0320 	mov.w	r3, #32
   2618c:	f3ef 8a11 	mrs	sl, BASEPRI
   26190:	f383 8811 	msr	BASEPRI, r3
   26194:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   26198:	7b63      	ldrb	r3, [r4, #13]
   2619a:	f003 030f 	and.w	r3, r3, #15
   2619e:	2b02      	cmp	r3, #2
   261a0:	d005      	beq.n	261ae <register_events+0x44>
   261a2:	2b04      	cmp	r3, #4
   261a4:	d006      	beq.n	261b4 <register_events+0x4a>
   261a6:	2b01      	cmp	r3, #1
   261a8:	d118      	bne.n	261dc <register_events+0x72>
		if (event->signal->signaled != 0U) {
   261aa:	6922      	ldr	r2, [r4, #16]
   261ac:	e000      	b.n	261b0 <register_events+0x46>
		if (k_sem_count_get(event->sem) > 0) {
   261ae:	6922      	ldr	r2, [r4, #16]
		if (event->signal->signaled != 0U) {
   261b0:	6892      	ldr	r2, [r2, #8]
   261b2:	e001      	b.n	261b8 <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
   261b4:	6922      	ldr	r2, [r4, #16]
   261b6:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0U) {
   261b8:	b182      	cbz	r2, 261dc <register_events+0x72>
	event->state |= state;
   261ba:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   261bc:	60a7      	str	r7, [r4, #8]
	event->state |= state;
   261be:	f3c2 3104 	ubfx	r1, r2, #12, #5
   261c2:	430b      	orrs	r3, r1
   261c4:	f363 3210 	bfi	r2, r3, #12, #5
   261c8:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   261ca:	702f      	strb	r7, [r5, #0]
	__asm__ volatile(
   261cc:	f38a 8811 	msr	BASEPRI, sl
   261d0:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   261d4:	f10b 0b01 	add.w	fp, fp, #1
   261d8:	3414      	adds	r4, #20
   261da:	e7d0      	b.n	2617e <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   261dc:	f1b9 0f00 	cmp.w	r9, #0
   261e0:	d1f4      	bne.n	261cc <register_events+0x62>
   261e2:	782b      	ldrb	r3, [r5, #0]
   261e4:	2b00      	cmp	r3, #0
   261e6:	d0f1      	beq.n	261cc <register_events+0x62>
	switch (event->type) {
   261e8:	7b63      	ldrb	r3, [r4, #13]
   261ea:	f003 030f 	and.w	r3, r3, #15
   261ee:	2b02      	cmp	r3, #2
   261f0:	d007      	beq.n	26202 <register_events+0x98>
   261f2:	2b04      	cmp	r3, #4
   261f4:	d00e      	beq.n	26214 <register_events+0xaa>
   261f6:	2b01      	cmp	r3, #1
   261f8:	d109      	bne.n	2620e <register_events+0xa4>
		add_event(&event->signal->poll_events, event, poller);
   261fa:	462a      	mov	r2, r5
   261fc:	4621      	mov	r1, r4
   261fe:	6920      	ldr	r0, [r4, #16]
   26200:	e003      	b.n	2620a <register_events+0xa0>
		add_event(&event->sem->poll_events, event, poller);
   26202:	462a      	mov	r2, r5
   26204:	4621      	mov	r1, r4
   26206:	6920      	ldr	r0, [r4, #16]
   26208:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   2620a:	f7ff ff7f 	bl	2610c <add_event>
	event->poller = poller;
   2620e:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   26210:	3601      	adds	r6, #1
   26212:	e7db      	b.n	261cc <register_events+0x62>
		add_event(&event->queue->poll_events, event, poller);
   26214:	6920      	ldr	r0, [r4, #16]
   26216:	462a      	mov	r2, r5
   26218:	4621      	mov	r1, r4
   2621a:	3008      	adds	r0, #8
   2621c:	e7f5      	b.n	2620a <register_events+0xa0>

0002621e <k_poll_event_init>:
{
   2621e:	b530      	push	{r4, r5, lr}
	event->poller = NULL;
   26220:	2400      	movs	r4, #0
	event->type = type;
   26222:	7b45      	ldrb	r5, [r0, #13]
	event->poller = NULL;
   26224:	6084      	str	r4, [r0, #8]
	event->type = type;
   26226:	f361 0503 	bfi	r5, r1, #0, #4
   2622a:	7345      	strb	r5, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
   2622c:	68c1      	ldr	r1, [r0, #12]
	event->obj = obj;
   2622e:	6103      	str	r3, [r0, #16]
	event->state = K_POLL_STATE_NOT_READY;
   26230:	f364 3110 	bfi	r1, r4, #12, #5
   26234:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
   26236:	f3c1 4107 	ubfx	r1, r1, #16, #8
   2623a:	f362 0141 	bfi	r1, r2, #1, #1
   2623e:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
   26240:	89c2      	ldrh	r2, [r0, #14]
   26242:	f364 028f 	bfi	r2, r4, #2, #14
   26246:	81c2      	strh	r2, [r0, #14]
}
   26248:	bd30      	pop	{r4, r5, pc}

0002624a <z_handle_obj_poll_events>:
	return list->head == list;
   2624a:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2624c:	4298      	cmp	r0, r3
   2624e:	d00a      	beq.n	26266 <z_handle_obj_poll_events+0x1c>
	node->prev->next = node->next;
   26250:	e9d3 0200 	ldrd	r0, r2, [r3]
   26254:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   26256:	6818      	ldr	r0, [r3, #0]
   26258:	6042      	str	r2, [r0, #4]
	node->next = NULL;
   2625a:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   2625c:	4618      	mov	r0, r3
	node->prev = NULL;
   2625e:	e9c3 2200 	strd	r2, r2, [r3]
   26262:	f7ff bf16 	b.w	26092 <signal_poll_event>
	}
}
   26266:	4770      	bx	lr

00026268 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   26268:	4770      	bx	lr
