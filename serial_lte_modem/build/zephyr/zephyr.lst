
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

0000c000 <_vector_table>:
    c000:	20029090 	.word	0x20029090
    c004:	0001022d 	.word	0x0001022d
    c008:	0002447f 	.word	0x0002447f
    c00c:	0001004d 	.word	0x0001004d
    c010:	0001004d 	.word	0x0001004d
    c014:	0001004d 	.word	0x0001004d
    c018:	0001004d 	.word	0x0001004d
    c01c:	0001004d 	.word	0x0001004d
    c020:	0001004d 	.word	0x0001004d
    c024:	0001004d 	.word	0x0001004d
    c028:	0001004d 	.word	0x0001004d
    c02c:	0000ff0d 	.word	0x0000ff0d
    c030:	0001004d 	.word	0x0001004d
    c034:	0001004d 	.word	0x0001004d
    c038:	0000fe5d 	.word	0x0000fe5d
    c03c:	0002446f 	.word	0x0002446f

0000c040 <_irq_vector_table>:
    c040:	000101ed 000101ed 000101ed 000101ed     ................
    c050:	000101ed 000101ed 000101ed 000101ed     ................
    c060:	000101ed 000101ed 000101ed 000101ed     ................
    c070:	000101ed 000101ed 000101ed 000101ed     ................
    c080:	000101ed 000101ed 000101ed 000101ed     ................
    c090:	000101ed 000101ed 000101ed 000101ed     ................
    c0a0:	000101ed 000101ed 000101ed 000101ed     ................
    c0b0:	00011f09 00024ef5 000101ed 000101ed     .....N..........
    c0c0:	000101ed 000101ed 000101ed 000101ed     ................
    c0d0:	000101ed 000101ed 000101ed 000101ed     ................
    c0e0:	000101ed 000101ed 00024f13 000101ed     .........O......
    c0f0:	000101ed 000101ed 000101ed 000101ed     ................
    c100:	000101ed 000101ed 000101ed 000101ed     ................
    c110:	000101ed 000101ed 000101ed 000101ed     ................
    c120:	000101ed 000101ed 000101ed 000101ed     ................
    c130:	000101ed 000101ed 000101ed 000101ed     ................
    c140:	000101ed                                ....

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b01 0001d070     ...(L....[..p...
    c210:	00000001 0000c000 2002bea0 00012845     ........... E(..

Disassembly of section _TEXT_SECTION_NAME_2:

0000c220 <__aeabi_uldivmod>:
    c220:	b953      	cbnz	r3, c238 <__aeabi_uldivmod+0x18>
    c222:	b94a      	cbnz	r2, c238 <__aeabi_uldivmod+0x18>
    c224:	2900      	cmp	r1, #0
    c226:	bf08      	it	eq
    c228:	2800      	cmpeq	r0, #0
    c22a:	bf1c      	itt	ne
    c22c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c234:	f000 b970 	b.w	c518 <__aeabi_idiv0>
    c238:	f1ad 0c08 	sub.w	ip, sp, #8
    c23c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c240:	f000 f806 	bl	c250 <__udivmoddi4>
    c244:	f8dd e004 	ldr.w	lr, [sp, #4]
    c248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c24c:	b004      	add	sp, #16
    c24e:	4770      	bx	lr

0000c250 <__udivmoddi4>:
    c250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c254:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c256:	4604      	mov	r4, r0
    c258:	4689      	mov	r9, r1
    c25a:	2b00      	cmp	r3, #0
    c25c:	f040 8083 	bne.w	c366 <__udivmoddi4+0x116>
    c260:	428a      	cmp	r2, r1
    c262:	4615      	mov	r5, r2
    c264:	d945      	bls.n	c2f2 <__udivmoddi4+0xa2>
    c266:	fab2 f282 	clz	r2, r2
    c26a:	b14a      	cbz	r2, c280 <__udivmoddi4+0x30>
    c26c:	f1c2 0720 	rsb	r7, r2, #32
    c270:	fa01 f302 	lsl.w	r3, r1, r2
    c274:	4095      	lsls	r5, r2
    c276:	4094      	lsls	r4, r2
    c278:	fa20 f707 	lsr.w	r7, r0, r7
    c27c:	ea47 0903 	orr.w	r9, r7, r3
    c280:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c284:	0c23      	lsrs	r3, r4, #16
    c286:	fa1f f885 	uxth.w	r8, r5
    c28a:	fbb9 fcfe 	udiv	ip, r9, lr
    c28e:	fb0e 991c 	mls	r9, lr, ip, r9
    c292:	fb0c f108 	mul.w	r1, ip, r8
    c296:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
    c29a:	4299      	cmp	r1, r3
    c29c:	d90a      	bls.n	c2b4 <__udivmoddi4+0x64>
    c29e:	18eb      	adds	r3, r5, r3
    c2a0:	bf2c      	ite	cs
    c2a2:	2001      	movcs	r0, #1
    c2a4:	2000      	movcc	r0, #0
    c2a6:	4299      	cmp	r1, r3
    c2a8:	d902      	bls.n	c2b0 <__udivmoddi4+0x60>
    c2aa:	2800      	cmp	r0, #0
    c2ac:	f000 811d 	beq.w	c4ea <__udivmoddi4+0x29a>
    c2b0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c2b4:	1a59      	subs	r1, r3, r1
    c2b6:	b2a3      	uxth	r3, r4
    c2b8:	fbb1 f0fe 	udiv	r0, r1, lr
    c2bc:	fb0e 1110 	mls	r1, lr, r0, r1
    c2c0:	fb00 f808 	mul.w	r8, r0, r8
    c2c4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c2c8:	45a0      	cmp	r8, r4
    c2ca:	d905      	bls.n	c2d8 <__udivmoddi4+0x88>
    c2cc:	192c      	adds	r4, r5, r4
    c2ce:	d202      	bcs.n	c2d6 <__udivmoddi4+0x86>
    c2d0:	45a0      	cmp	r8, r4
    c2d2:	f200 810e 	bhi.w	c4f2 <__udivmoddi4+0x2a2>
    c2d6:	3801      	subs	r0, #1
    c2d8:	eba4 0408 	sub.w	r4, r4, r8
    c2dc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c2e0:	2700      	movs	r7, #0
    c2e2:	b11e      	cbz	r6, c2ec <__udivmoddi4+0x9c>
    c2e4:	40d4      	lsrs	r4, r2
    c2e6:	2300      	movs	r3, #0
    c2e8:	e9c6 4300 	strd	r4, r3, [r6]
    c2ec:	4639      	mov	r1, r7
    c2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c2f2:	2a00      	cmp	r2, #0
    c2f4:	d051      	beq.n	c39a <__udivmoddi4+0x14a>
    c2f6:	fab2 f282 	clz	r2, r2
    c2fa:	2a00      	cmp	r2, #0
    c2fc:	f040 80af 	bne.w	c45e <__udivmoddi4+0x20e>
    c300:	1b49      	subs	r1, r1, r5
    c302:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c306:	fa1f f885 	uxth.w	r8, r5
    c30a:	2701      	movs	r7, #1
    c30c:	0c23      	lsrs	r3, r4, #16
    c30e:	fbb1 fcfe 	udiv	ip, r1, lr
    c312:	fb0e 111c 	mls	r1, lr, ip, r1
    c316:	fb08 f00c 	mul.w	r0, r8, ip
    c31a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c31e:	4298      	cmp	r0, r3
    c320:	d90a      	bls.n	c338 <__udivmoddi4+0xe8>
    c322:	18eb      	adds	r3, r5, r3
    c324:	bf2c      	ite	cs
    c326:	2101      	movcs	r1, #1
    c328:	2100      	movcc	r1, #0
    c32a:	4298      	cmp	r0, r3
    c32c:	d902      	bls.n	c334 <__udivmoddi4+0xe4>
    c32e:	2900      	cmp	r1, #0
    c330:	f000 80d7 	beq.w	c4e2 <__udivmoddi4+0x292>
    c334:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c338:	1a19      	subs	r1, r3, r0
    c33a:	b2a3      	uxth	r3, r4
    c33c:	fbb1 f0fe 	udiv	r0, r1, lr
    c340:	fb0e 1110 	mls	r1, lr, r0, r1
    c344:	fb08 f800 	mul.w	r8, r8, r0
    c348:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c34c:	45a0      	cmp	r8, r4
    c34e:	d905      	bls.n	c35c <__udivmoddi4+0x10c>
    c350:	192c      	adds	r4, r5, r4
    c352:	d202      	bcs.n	c35a <__udivmoddi4+0x10a>
    c354:	45a0      	cmp	r8, r4
    c356:	f200 80c1 	bhi.w	c4dc <__udivmoddi4+0x28c>
    c35a:	3801      	subs	r0, #1
    c35c:	eba4 0408 	sub.w	r4, r4, r8
    c360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c364:	e7bd      	b.n	c2e2 <__udivmoddi4+0x92>
    c366:	428b      	cmp	r3, r1
    c368:	d908      	bls.n	c37c <__udivmoddi4+0x12c>
    c36a:	2e00      	cmp	r6, #0
    c36c:	d074      	beq.n	c458 <__udivmoddi4+0x208>
    c36e:	2700      	movs	r7, #0
    c370:	e9c6 0100 	strd	r0, r1, [r6]
    c374:	4638      	mov	r0, r7
    c376:	4639      	mov	r1, r7
    c378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c37c:	fab3 f783 	clz	r7, r3
    c380:	b967      	cbnz	r7, c39c <__udivmoddi4+0x14c>
    c382:	428b      	cmp	r3, r1
    c384:	f0c0 80a4 	bcc.w	c4d0 <__udivmoddi4+0x280>
    c388:	4282      	cmp	r2, r0
    c38a:	f240 80a1 	bls.w	c4d0 <__udivmoddi4+0x280>
    c38e:	4638      	mov	r0, r7
    c390:	2e00      	cmp	r6, #0
    c392:	d0ab      	beq.n	c2ec <__udivmoddi4+0x9c>
    c394:	e9c6 4900 	strd	r4, r9, [r6]
    c398:	e7a8      	b.n	c2ec <__udivmoddi4+0x9c>
    c39a:	deff      	udf	#255	; 0xff
    c39c:	f1c7 0520 	rsb	r5, r7, #32
    c3a0:	40bb      	lsls	r3, r7
    c3a2:	fa02 fc07 	lsl.w	ip, r2, r7
    c3a6:	fa01 f407 	lsl.w	r4, r1, r7
    c3aa:	40ea      	lsrs	r2, r5
    c3ac:	fa20 f805 	lsr.w	r8, r0, r5
    c3b0:	40e9      	lsrs	r1, r5
    c3b2:	fa00 fe07 	lsl.w	lr, r0, r7
    c3b6:	431a      	orrs	r2, r3
    c3b8:	ea48 0404 	orr.w	r4, r8, r4
    c3bc:	ea4f 4812 	mov.w	r8, r2, lsr #16
    c3c0:	0c20      	lsrs	r0, r4, #16
    c3c2:	fa1f f982 	uxth.w	r9, r2
    c3c6:	fbb1 faf8 	udiv	sl, r1, r8
    c3ca:	fb08 111a 	mls	r1, r8, sl, r1
    c3ce:	fb0a fb09 	mul.w	fp, sl, r9
    c3d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    c3d6:	458b      	cmp	fp, r1
    c3d8:	d90a      	bls.n	c3f0 <__udivmoddi4+0x1a0>
    c3da:	1851      	adds	r1, r2, r1
    c3dc:	bf2c      	ite	cs
    c3de:	2301      	movcs	r3, #1
    c3e0:	2300      	movcc	r3, #0
    c3e2:	458b      	cmp	fp, r1
    c3e4:	d902      	bls.n	c3ec <__udivmoddi4+0x19c>
    c3e6:	2b00      	cmp	r3, #0
    c3e8:	f000 8088 	beq.w	c4fc <__udivmoddi4+0x2ac>
    c3ec:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    c3f0:	eba1 010b 	sub.w	r1, r1, fp
    c3f4:	b2a4      	uxth	r4, r4
    c3f6:	fbb1 f0f8 	udiv	r0, r1, r8
    c3fa:	fb08 1110 	mls	r1, r8, r0, r1
    c3fe:	fb00 f909 	mul.w	r9, r0, r9
    c402:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
    c406:	4589      	cmp	r9, r1
    c408:	d904      	bls.n	c414 <__udivmoddi4+0x1c4>
    c40a:	1851      	adds	r1, r2, r1
    c40c:	d201      	bcs.n	c412 <__udivmoddi4+0x1c2>
    c40e:	4589      	cmp	r9, r1
    c410:	d87b      	bhi.n	c50a <__udivmoddi4+0x2ba>
    c412:	3801      	subs	r0, #1
    c414:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c418:	eba1 0109 	sub.w	r1, r1, r9
    c41c:	fba0 890c 	umull	r8, r9, r0, ip
    c420:	4549      	cmp	r1, r9
    c422:	4644      	mov	r4, r8
    c424:	464b      	mov	r3, r9
    c426:	d302      	bcc.n	c42e <__udivmoddi4+0x1de>
    c428:	d106      	bne.n	c438 <__udivmoddi4+0x1e8>
    c42a:	45c6      	cmp	lr, r8
    c42c:	d204      	bcs.n	c438 <__udivmoddi4+0x1e8>
    c42e:	3801      	subs	r0, #1
    c430:	ebb8 040c 	subs.w	r4, r8, ip
    c434:	eb69 0302 	sbc.w	r3, r9, r2
    c438:	2e00      	cmp	r6, #0
    c43a:	d05d      	beq.n	c4f8 <__udivmoddi4+0x2a8>
    c43c:	ebbe 0204 	subs.w	r2, lr, r4
    c440:	eb61 0103 	sbc.w	r1, r1, r3
    c444:	fa01 f505 	lsl.w	r5, r1, r5
    c448:	fa22 f307 	lsr.w	r3, r2, r7
    c44c:	40f9      	lsrs	r1, r7
    c44e:	2700      	movs	r7, #0
    c450:	431d      	orrs	r5, r3
    c452:	e9c6 5100 	strd	r5, r1, [r6]
    c456:	e749      	b.n	c2ec <__udivmoddi4+0x9c>
    c458:	4637      	mov	r7, r6
    c45a:	4630      	mov	r0, r6
    c45c:	e746      	b.n	c2ec <__udivmoddi4+0x9c>
    c45e:	f1c2 0020 	rsb	r0, r2, #32
    c462:	4095      	lsls	r5, r2
    c464:	fa01 f702 	lsl.w	r7, r1, r2
    c468:	fa21 f300 	lsr.w	r3, r1, r0
    c46c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c470:	fa24 f100 	lsr.w	r1, r4, r0
    c474:	fa1f f885 	uxth.w	r8, r5
    c478:	4094      	lsls	r4, r2
    c47a:	4339      	orrs	r1, r7
    c47c:	fbb3 f0fe 	udiv	r0, r3, lr
    c480:	0c0f      	lsrs	r7, r1, #16
    c482:	fb0e 3310 	mls	r3, lr, r0, r3
    c486:	fb00 fc08 	mul.w	ip, r0, r8
    c48a:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    c48e:	459c      	cmp	ip, r3
    c490:	d907      	bls.n	c4a2 <__udivmoddi4+0x252>
    c492:	18eb      	adds	r3, r5, r3
    c494:	bf2c      	ite	cs
    c496:	2701      	movcs	r7, #1
    c498:	2700      	movcc	r7, #0
    c49a:	459c      	cmp	ip, r3
    c49c:	d900      	bls.n	c4a0 <__udivmoddi4+0x250>
    c49e:	b38f      	cbz	r7, c504 <__udivmoddi4+0x2b4>
    c4a0:	3801      	subs	r0, #1
    c4a2:	eba3 030c 	sub.w	r3, r3, ip
    c4a6:	b289      	uxth	r1, r1
    c4a8:	fbb3 f7fe 	udiv	r7, r3, lr
    c4ac:	fb0e 3317 	mls	r3, lr, r7, r3
    c4b0:	fb07 fc08 	mul.w	ip, r7, r8
    c4b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c4b8:	458c      	cmp	ip, r1
    c4ba:	d904      	bls.n	c4c6 <__udivmoddi4+0x276>
    c4bc:	1869      	adds	r1, r5, r1
    c4be:	d201      	bcs.n	c4c4 <__udivmoddi4+0x274>
    c4c0:	458c      	cmp	ip, r1
    c4c2:	d825      	bhi.n	c510 <__udivmoddi4+0x2c0>
    c4c4:	3f01      	subs	r7, #1
    c4c6:	eba1 010c 	sub.w	r1, r1, ip
    c4ca:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
    c4ce:	e71d      	b.n	c30c <__udivmoddi4+0xbc>
    c4d0:	1a84      	subs	r4, r0, r2
    c4d2:	eb61 0303 	sbc.w	r3, r1, r3
    c4d6:	2001      	movs	r0, #1
    c4d8:	4699      	mov	r9, r3
    c4da:	e759      	b.n	c390 <__udivmoddi4+0x140>
    c4dc:	3802      	subs	r0, #2
    c4de:	442c      	add	r4, r5
    c4e0:	e73c      	b.n	c35c <__udivmoddi4+0x10c>
    c4e2:	f1ac 0c02 	sub.w	ip, ip, #2
    c4e6:	442b      	add	r3, r5
    c4e8:	e726      	b.n	c338 <__udivmoddi4+0xe8>
    c4ea:	f1ac 0c02 	sub.w	ip, ip, #2
    c4ee:	442b      	add	r3, r5
    c4f0:	e6e0      	b.n	c2b4 <__udivmoddi4+0x64>
    c4f2:	3802      	subs	r0, #2
    c4f4:	442c      	add	r4, r5
    c4f6:	e6ef      	b.n	c2d8 <__udivmoddi4+0x88>
    c4f8:	4637      	mov	r7, r6
    c4fa:	e6f7      	b.n	c2ec <__udivmoddi4+0x9c>
    c4fc:	f1aa 0a02 	sub.w	sl, sl, #2
    c500:	4411      	add	r1, r2
    c502:	e775      	b.n	c3f0 <__udivmoddi4+0x1a0>
    c504:	3802      	subs	r0, #2
    c506:	442b      	add	r3, r5
    c508:	e7cb      	b.n	c4a2 <__udivmoddi4+0x252>
    c50a:	3802      	subs	r0, #2
    c50c:	4411      	add	r1, r2
    c50e:	e781      	b.n	c414 <__udivmoddi4+0x1c4>
    c510:	3f02      	subs	r7, #2
    c512:	4429      	add	r1, r5
    c514:	e7d7      	b.n	c4c6 <__udivmoddi4+0x276>
    c516:	bf00      	nop

0000c518 <__aeabi_idiv0>:
    c518:	4770      	bx	lr
    c51a:	bf00      	nop

0000c51c <ocrypto_bigint_add128>:
    c51c:	b470      	push	{r4, r5, r6}
    c51e:	e891 0078 	ldmia.w	r1, {r3, r4, r5, r6}
    c522:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c526:	185b      	adds	r3, r3, r1
    c528:	eb54 040c 	adcs.w	r4, r4, ip
    c52c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c530:	414d      	adcs	r5, r1
    c532:	eb56 060c 	adcs.w	r6, r6, ip
    c536:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
    c53a:	4180      	sbcs	r0, r0
    c53c:	3001      	adds	r0, #1
    c53e:	bc70      	pop	{r4, r5, r6}
    c540:	4770      	bx	lr

0000c542 <ocrypto_bigint_sub128>:
    c542:	b470      	push	{r4, r5, r6}
    c544:	e891 0078 	ldmia.w	r1, {r3, r4, r5, r6}
    c548:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c54c:	1a5b      	subs	r3, r3, r1
    c54e:	eb74 040c 	sbcs.w	r4, r4, ip
    c552:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c556:	418d      	sbcs	r5, r1
    c558:	eb76 060c 	sbcs.w	r6, r6, ip
    c55c:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
    c560:	4180      	sbcs	r0, r0
    c562:	4240      	negs	r0, r0
    c564:	bc70      	pop	{r4, r5, r6}
    c566:	4770      	bx	lr

0000c568 <ocrypto_bigint_add256>:
    c568:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c56c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    c570:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c574:	185b      	adds	r3, r3, r1
    c576:	eb54 040c 	adcs.w	r4, r4, ip
    c57a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c57e:	414d      	adcs	r5, r1
    c580:	eb56 060c 	adcs.w	r6, r6, ip
    c584:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c588:	414f      	adcs	r7, r1
    c58a:	eb58 080c 	adcs.w	r8, r8, ip
    c58e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c592:	eb59 0901 	adcs.w	r9, r9, r1
    c596:	eb5a 0a0c 	adcs.w	sl, sl, ip
    c59a:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    c59e:	4180      	sbcs	r0, r0
    c5a0:	3001      	adds	r0, #1
    c5a2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c5a6:	4770      	bx	lr

0000c5a8 <ocrypto_bigint_sub256>:
    c5a8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c5ac:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    c5b0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c5b4:	1a5b      	subs	r3, r3, r1
    c5b6:	eb74 040c 	sbcs.w	r4, r4, ip
    c5ba:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c5be:	418d      	sbcs	r5, r1
    c5c0:	eb76 060c 	sbcs.w	r6, r6, ip
    c5c4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c5c8:	418f      	sbcs	r7, r1
    c5ca:	eb78 080c 	sbcs.w	r8, r8, ip
    c5ce:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c5d2:	eb79 0901 	sbcs.w	r9, r9, r1
    c5d6:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    c5da:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    c5de:	4180      	sbcs	r0, r0
    c5e0:	4240      	negs	r0, r0
    c5e2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c5e6:	4770      	bx	lr

0000c5e8 <ocrypto_bigint_cadd256>:
    c5e8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c5ec:	4252      	negs	r2, r2
    c5ee:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c5f2:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c5f6:	4017      	ands	r7, r2
    c5f8:	19db      	adds	r3, r3, r7
    c5fa:	ea18 0802 	ands.w	r8, r8, r2
    c5fe:	eb54 0408 	adcs.w	r4, r4, r8
    c602:	ea19 0902 	ands.w	r9, r9, r2
    c606:	eb55 0509 	adcs.w	r5, r5, r9
    c60a:	ea1a 0a02 	ands.w	sl, sl, r2
    c60e:	eb56 060a 	adcs.w	r6, r6, sl
    c612:	c078      	stmia	r0!, {r3, r4, r5, r6}
    c614:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c618:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c61c:	4017      	ands	r7, r2
    c61e:	417b      	adcs	r3, r7
    c620:	ea18 0802 	ands.w	r8, r8, r2
    c624:	eb54 0408 	adcs.w	r4, r4, r8
    c628:	ea19 0902 	ands.w	r9, r9, r2
    c62c:	eb55 0509 	adcs.w	r5, r5, r9
    c630:	ea1a 0a02 	ands.w	sl, sl, r2
    c634:	eb56 060a 	adcs.w	r6, r6, sl
    c638:	c078      	stmia	r0!, {r3, r4, r5, r6}
    c63a:	4180      	sbcs	r0, r0
    c63c:	3001      	adds	r0, #1
    c63e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c642:	4770      	bx	lr

0000c644 <ocrypto_bigint_csub256>:
    c644:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c648:	4252      	negs	r2, r2
    c64a:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c64e:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c652:	4017      	ands	r7, r2
    c654:	1bdb      	subs	r3, r3, r7
    c656:	ea18 0802 	ands.w	r8, r8, r2
    c65a:	eb74 0408 	sbcs.w	r4, r4, r8
    c65e:	ea19 0902 	ands.w	r9, r9, r2
    c662:	eb75 0509 	sbcs.w	r5, r5, r9
    c666:	ea1a 0a02 	ands.w	sl, sl, r2
    c66a:	eb76 060a 	sbcs.w	r6, r6, sl
    c66e:	c078      	stmia	r0!, {r3, r4, r5, r6}
    c670:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c674:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c678:	4017      	ands	r7, r2
    c67a:	41bb      	sbcs	r3, r7
    c67c:	ea18 0802 	ands.w	r8, r8, r2
    c680:	eb74 0408 	sbcs.w	r4, r4, r8
    c684:	ea19 0902 	ands.w	r9, r9, r2
    c688:	eb75 0509 	sbcs.w	r5, r5, r9
    c68c:	ea1a 0a02 	ands.w	sl, sl, r2
    c690:	eb76 060a 	sbcs.w	r6, r6, sl
    c694:	c078      	stmia	r0!, {r3, r4, r5, r6}
    c696:	4180      	sbcs	r0, r0
    c698:	4240      	negs	r0, r0
    c69a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c69e:	4770      	bx	lr

0000c6a0 <cswap64>:
    c6a0:	e890 0030 	ldmia.w	r0, {r4, r5}
    c6a4:	e891 00c0 	ldmia.w	r1, {r6, r7}
    c6a8:	1ba3      	subs	r3, r4, r6
    c6aa:	4013      	ands	r3, r2
    c6ac:	1ae4      	subs	r4, r4, r3
    c6ae:	18f6      	adds	r6, r6, r3
    c6b0:	1beb      	subs	r3, r5, r7
    c6b2:	4013      	ands	r3, r2
    c6b4:	1aed      	subs	r5, r5, r3
    c6b6:	18ff      	adds	r7, r7, r3
    c6b8:	c030      	stmia	r0!, {r4, r5}
    c6ba:	c1c0      	stmia	r1!, {r6, r7}
    c6bc:	4770      	bx	lr

0000c6be <ocrypto_bigint_cswap256>:
    c6be:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6c0:	4252      	negs	r2, r2
    c6c2:	f7ff ffed 	bl	c6a0 <cswap64>
    c6c6:	f7ff ffeb 	bl	c6a0 <cswap64>
    c6ca:	f7ff ffe9 	bl	c6a0 <cswap64>
    c6ce:	f7ff ffe7 	bl	c6a0 <cswap64>
    c6d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c6d4 <ocrypto_bigint_mul128>:
    c6d4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c6d8:	c93a      	ldmia	r1, {r1, r3, r4, r5}
    c6da:	6816      	ldr	r6, [r2, #0]
    c6dc:	fba1 9a06 	umull	r9, sl, r1, r6
    c6e0:	f04f 0c00 	mov.w	ip, #0
    c6e4:	fbe3 ac06 	umlal	sl, ip, r3, r6
    c6e8:	f04f 0700 	mov.w	r7, #0
    c6ec:	fbe4 c706 	umlal	ip, r7, r4, r6
    c6f0:	f04f 0800 	mov.w	r8, #0
    c6f4:	fbe5 7806 	umlal	r7, r8, r5, r6
    c6f8:	f840 9b04 	str.w	r9, [r0], #4
    c6fc:	6856      	ldr	r6, [r2, #4]
    c6fe:	f04f 0900 	mov.w	r9, #0
    c702:	fbe1 a906 	umlal	sl, r9, r1, r6
    c706:	eb1c 0c09 	adds.w	ip, ip, r9
    c70a:	f04f 0900 	mov.w	r9, #0
    c70e:	eb49 0909 	adc.w	r9, r9, r9
    c712:	fbe3 c906 	umlal	ip, r9, r3, r6
    c716:	eb17 0709 	adds.w	r7, r7, r9
    c71a:	f04f 0900 	mov.w	r9, #0
    c71e:	eb49 0909 	adc.w	r9, r9, r9
    c722:	fbe4 7906 	umlal	r7, r9, r4, r6
    c726:	eb18 0809 	adds.w	r8, r8, r9
    c72a:	f04f 0900 	mov.w	r9, #0
    c72e:	eb49 0909 	adc.w	r9, r9, r9
    c732:	fbe5 8906 	umlal	r8, r9, r5, r6
    c736:	f840 ab04 	str.w	sl, [r0], #4
    c73a:	6896      	ldr	r6, [r2, #8]
    c73c:	f04f 0a00 	mov.w	sl, #0
    c740:	fbe1 ca06 	umlal	ip, sl, r1, r6
    c744:	eb17 070a 	adds.w	r7, r7, sl
    c748:	f04f 0a00 	mov.w	sl, #0
    c74c:	eb4a 0a0a 	adc.w	sl, sl, sl
    c750:	fbe3 7a06 	umlal	r7, sl, r3, r6
    c754:	eb18 080a 	adds.w	r8, r8, sl
    c758:	f04f 0a00 	mov.w	sl, #0
    c75c:	eb4a 0a0a 	adc.w	sl, sl, sl
    c760:	fbe4 8a06 	umlal	r8, sl, r4, r6
    c764:	eb19 090a 	adds.w	r9, r9, sl
    c768:	f04f 0a00 	mov.w	sl, #0
    c76c:	eb4a 0a0a 	adc.w	sl, sl, sl
    c770:	fbe5 9a06 	umlal	r9, sl, r5, r6
    c774:	f840 cb04 	str.w	ip, [r0], #4
    c778:	68d6      	ldr	r6, [r2, #12]
    c77a:	f04f 0c00 	mov.w	ip, #0
    c77e:	fbe1 7c06 	umlal	r7, ip, r1, r6
    c782:	eb18 080c 	adds.w	r8, r8, ip
    c786:	f04f 0c00 	mov.w	ip, #0
    c78a:	eb4c 0c0c 	adc.w	ip, ip, ip
    c78e:	fbe3 8c06 	umlal	r8, ip, r3, r6
    c792:	eb19 090c 	adds.w	r9, r9, ip
    c796:	f04f 0c00 	mov.w	ip, #0
    c79a:	eb4c 0c0c 	adc.w	ip, ip, ip
    c79e:	fbe4 9c06 	umlal	r9, ip, r4, r6
    c7a2:	eb1a 0a0c 	adds.w	sl, sl, ip
    c7a6:	f04f 0c00 	mov.w	ip, #0
    c7aa:	eb4c 0c0c 	adc.w	ip, ip, ip
    c7ae:	fbe5 ac06 	umlal	sl, ip, r5, r6
    c7b2:	e880 1780 	stmia.w	r0, {r7, r8, r9, sl, ip}
    c7b6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c7ba:	4770      	bx	lr

0000c7bc <ocrypto_bigint_sqr256>:
    c7bc:	460a      	mov	r2, r1

0000c7be <ocrypto_bigint_mul256>:
    c7be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7c2:	ec41 0a14 	vmov	s8, s9, r0, r1
    c7c6:	ec92 0a08 	vldmia	r2, {s0-s7}
    c7ca:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    c7cc:	ee10 0a10 	vmov	r0, s0
    c7d0:	fba1 7800 	umull	r7, r8, r1, r0
    c7d4:	f04f 0900 	mov.w	r9, #0
    c7d8:	fbe2 8900 	umlal	r8, r9, r2, r0
    c7dc:	f04f 0a00 	mov.w	sl, #0
    c7e0:	fbe3 9a00 	umlal	r9, sl, r3, r0
    c7e4:	f04f 0b00 	mov.w	fp, #0
    c7e8:	fbe4 ab00 	umlal	sl, fp, r4, r0
    c7ec:	ee12 0a10 	vmov	r0, s4
    c7f0:	f04f 0c00 	mov.w	ip, #0
    c7f4:	fbe1 bc00 	umlal	fp, ip, r1, r0
    c7f8:	f04f 0e00 	mov.w	lr, #0
    c7fc:	fbe2 ce00 	umlal	ip, lr, r2, r0
    c800:	f04f 0500 	mov.w	r5, #0
    c804:	fbe3 e500 	umlal	lr, r5, r3, r0
    c808:	f04f 0600 	mov.w	r6, #0
    c80c:	fbe4 5600 	umlal	r5, r6, r4, r0
    c810:	ee05 7a10 	vmov	s10, r7
    c814:	ee10 0a90 	vmov	r0, s1
    c818:	f04f 0700 	mov.w	r7, #0
    c81c:	fbe1 8700 	umlal	r8, r7, r1, r0
    c820:	eb19 0907 	adds.w	r9, r9, r7
    c824:	f04f 0700 	mov.w	r7, #0
    c828:	eb47 0707 	adc.w	r7, r7, r7
    c82c:	fbe2 9700 	umlal	r9, r7, r2, r0
    c830:	eb1a 0a07 	adds.w	sl, sl, r7
    c834:	f04f 0700 	mov.w	r7, #0
    c838:	eb47 0707 	adc.w	r7, r7, r7
    c83c:	fbe3 a700 	umlal	sl, r7, r3, r0
    c840:	eb1b 0b07 	adds.w	fp, fp, r7
    c844:	f04f 0700 	mov.w	r7, #0
    c848:	eb47 0707 	adc.w	r7, r7, r7
    c84c:	fbe4 b700 	umlal	fp, r7, r4, r0
    c850:	ee12 0a90 	vmov	r0, s5
    c854:	eb1c 0c07 	adds.w	ip, ip, r7
    c858:	f04f 0700 	mov.w	r7, #0
    c85c:	eb47 0707 	adc.w	r7, r7, r7
    c860:	fbe1 c700 	umlal	ip, r7, r1, r0
    c864:	eb1e 0e07 	adds.w	lr, lr, r7
    c868:	f04f 0700 	mov.w	r7, #0
    c86c:	eb47 0707 	adc.w	r7, r7, r7
    c870:	fbe2 e700 	umlal	lr, r7, r2, r0
    c874:	19ed      	adds	r5, r5, r7
    c876:	f04f 0700 	mov.w	r7, #0
    c87a:	eb47 0707 	adc.w	r7, r7, r7
    c87e:	fbe3 5700 	umlal	r5, r7, r3, r0
    c882:	19f6      	adds	r6, r6, r7
    c884:	f04f 0700 	mov.w	r7, #0
    c888:	eb47 0707 	adc.w	r7, r7, r7
    c88c:	fbe4 6700 	umlal	r6, r7, r4, r0
    c890:	ee05 8a90 	vmov	s11, r8
    c894:	ee11 0a10 	vmov	r0, s2
    c898:	f04f 0800 	mov.w	r8, #0
    c89c:	fbe1 9800 	umlal	r9, r8, r1, r0
    c8a0:	eb1a 0a08 	adds.w	sl, sl, r8
    c8a4:	f04f 0800 	mov.w	r8, #0
    c8a8:	eb48 0808 	adc.w	r8, r8, r8
    c8ac:	fbe2 a800 	umlal	sl, r8, r2, r0
    c8b0:	eb1b 0b08 	adds.w	fp, fp, r8
    c8b4:	f04f 0800 	mov.w	r8, #0
    c8b8:	eb48 0808 	adc.w	r8, r8, r8
    c8bc:	fbe3 b800 	umlal	fp, r8, r3, r0
    c8c0:	eb1c 0c08 	adds.w	ip, ip, r8
    c8c4:	f04f 0800 	mov.w	r8, #0
    c8c8:	eb48 0808 	adc.w	r8, r8, r8
    c8cc:	fbe4 c800 	umlal	ip, r8, r4, r0
    c8d0:	ee13 0a10 	vmov	r0, s6
    c8d4:	eb1e 0e08 	adds.w	lr, lr, r8
    c8d8:	f04f 0800 	mov.w	r8, #0
    c8dc:	eb48 0808 	adc.w	r8, r8, r8
    c8e0:	fbe1 e800 	umlal	lr, r8, r1, r0
    c8e4:	eb15 0508 	adds.w	r5, r5, r8
    c8e8:	f04f 0800 	mov.w	r8, #0
    c8ec:	eb48 0808 	adc.w	r8, r8, r8
    c8f0:	fbe2 5800 	umlal	r5, r8, r2, r0
    c8f4:	eb16 0608 	adds.w	r6, r6, r8
    c8f8:	f04f 0800 	mov.w	r8, #0
    c8fc:	eb48 0808 	adc.w	r8, r8, r8
    c900:	fbe3 6800 	umlal	r6, r8, r3, r0
    c904:	eb17 0708 	adds.w	r7, r7, r8
    c908:	f04f 0800 	mov.w	r8, #0
    c90c:	eb48 0808 	adc.w	r8, r8, r8
    c910:	fbe4 7800 	umlal	r7, r8, r4, r0
    c914:	ee06 9a10 	vmov	s12, r9
    c918:	ee11 0a90 	vmov	r0, s3
    c91c:	f04f 0900 	mov.w	r9, #0
    c920:	fbe1 a900 	umlal	sl, r9, r1, r0
    c924:	eb1b 0b09 	adds.w	fp, fp, r9
    c928:	f04f 0900 	mov.w	r9, #0
    c92c:	eb49 0909 	adc.w	r9, r9, r9
    c930:	fbe2 b900 	umlal	fp, r9, r2, r0
    c934:	eb1c 0c09 	adds.w	ip, ip, r9
    c938:	f04f 0900 	mov.w	r9, #0
    c93c:	eb49 0909 	adc.w	r9, r9, r9
    c940:	fbe3 c900 	umlal	ip, r9, r3, r0
    c944:	eb1e 0e09 	adds.w	lr, lr, r9
    c948:	f04f 0900 	mov.w	r9, #0
    c94c:	eb49 0909 	adc.w	r9, r9, r9
    c950:	fbe4 e900 	umlal	lr, r9, r4, r0
    c954:	ee13 0a90 	vmov	r0, s7
    c958:	eb15 0509 	adds.w	r5, r5, r9
    c95c:	f04f 0900 	mov.w	r9, #0
    c960:	eb49 0909 	adc.w	r9, r9, r9
    c964:	fbe1 5900 	umlal	r5, r9, r1, r0
    c968:	eb16 0609 	adds.w	r6, r6, r9
    c96c:	f04f 0900 	mov.w	r9, #0
    c970:	eb49 0909 	adc.w	r9, r9, r9
    c974:	fbe2 6900 	umlal	r6, r9, r2, r0
    c978:	eb17 0709 	adds.w	r7, r7, r9
    c97c:	f04f 0900 	mov.w	r9, #0
    c980:	eb49 0909 	adc.w	r9, r9, r9
    c984:	fbe3 7900 	umlal	r7, r9, r3, r0
    c988:	eb18 0809 	adds.w	r8, r8, r9
    c98c:	f04f 0900 	mov.w	r9, #0
    c990:	eb49 0909 	adc.w	r9, r9, r9
    c994:	fbe4 8900 	umlal	r8, r9, r4, r0
    c998:	ee06 aa90 	vmov	s13, sl
    c99c:	ee14 1a90 	vmov	r1, s9
    c9a0:	f101 0110 	add.w	r1, r1, #16
    c9a4:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    c9a6:	ee10 0a10 	vmov	r0, s0
    c9aa:	f04f 0a00 	mov.w	sl, #0
    c9ae:	fbe1 ba00 	umlal	fp, sl, r1, r0
    c9b2:	eb1c 0c0a 	adds.w	ip, ip, sl
    c9b6:	f04f 0a00 	mov.w	sl, #0
    c9ba:	eb4a 0a0a 	adc.w	sl, sl, sl
    c9be:	fbe2 ca00 	umlal	ip, sl, r2, r0
    c9c2:	eb1e 0e0a 	adds.w	lr, lr, sl
    c9c6:	f04f 0a00 	mov.w	sl, #0
    c9ca:	eb4a 0a0a 	adc.w	sl, sl, sl
    c9ce:	fbe3 ea00 	umlal	lr, sl, r3, r0
    c9d2:	eb15 050a 	adds.w	r5, r5, sl
    c9d6:	f04f 0a00 	mov.w	sl, #0
    c9da:	eb4a 0a0a 	adc.w	sl, sl, sl
    c9de:	fbe4 5a00 	umlal	r5, sl, r4, r0
    c9e2:	ee12 0a10 	vmov	r0, s4
    c9e6:	eb16 060a 	adds.w	r6, r6, sl
    c9ea:	f04f 0a00 	mov.w	sl, #0
    c9ee:	eb4a 0a0a 	adc.w	sl, sl, sl
    c9f2:	fbe1 6a00 	umlal	r6, sl, r1, r0
    c9f6:	eb17 070a 	adds.w	r7, r7, sl
    c9fa:	f04f 0a00 	mov.w	sl, #0
    c9fe:	eb4a 0a0a 	adc.w	sl, sl, sl
    ca02:	fbe2 7a00 	umlal	r7, sl, r2, r0
    ca06:	eb18 080a 	adds.w	r8, r8, sl
    ca0a:	f04f 0a00 	mov.w	sl, #0
    ca0e:	eb4a 0a0a 	adc.w	sl, sl, sl
    ca12:	fbe3 8a00 	umlal	r8, sl, r3, r0
    ca16:	eb19 090a 	adds.w	r9, r9, sl
    ca1a:	f04f 0a00 	mov.w	sl, #0
    ca1e:	eb4a 0a0a 	adc.w	sl, sl, sl
    ca22:	fbe4 9a00 	umlal	r9, sl, r4, r0
    ca26:	ee07 ba10 	vmov	s14, fp
    ca2a:	ee10 0a90 	vmov	r0, s1
    ca2e:	f04f 0b00 	mov.w	fp, #0
    ca32:	fbe1 cb00 	umlal	ip, fp, r1, r0
    ca36:	eb1e 0e0b 	adds.w	lr, lr, fp
    ca3a:	f04f 0b00 	mov.w	fp, #0
    ca3e:	eb4b 0b0b 	adc.w	fp, fp, fp
    ca42:	fbe2 eb00 	umlal	lr, fp, r2, r0
    ca46:	eb15 050b 	adds.w	r5, r5, fp
    ca4a:	f04f 0b00 	mov.w	fp, #0
    ca4e:	eb4b 0b0b 	adc.w	fp, fp, fp
    ca52:	fbe3 5b00 	umlal	r5, fp, r3, r0
    ca56:	eb16 060b 	adds.w	r6, r6, fp
    ca5a:	f04f 0b00 	mov.w	fp, #0
    ca5e:	eb4b 0b0b 	adc.w	fp, fp, fp
    ca62:	fbe4 6b00 	umlal	r6, fp, r4, r0
    ca66:	ee12 0a90 	vmov	r0, s5
    ca6a:	eb17 070b 	adds.w	r7, r7, fp
    ca6e:	f04f 0b00 	mov.w	fp, #0
    ca72:	eb4b 0b0b 	adc.w	fp, fp, fp
    ca76:	fbe1 7b00 	umlal	r7, fp, r1, r0
    ca7a:	eb18 080b 	adds.w	r8, r8, fp
    ca7e:	f04f 0b00 	mov.w	fp, #0
    ca82:	eb4b 0b0b 	adc.w	fp, fp, fp
    ca86:	fbe2 8b00 	umlal	r8, fp, r2, r0
    ca8a:	eb19 090b 	adds.w	r9, r9, fp
    ca8e:	f04f 0b00 	mov.w	fp, #0
    ca92:	eb4b 0b0b 	adc.w	fp, fp, fp
    ca96:	fbe3 9b00 	umlal	r9, fp, r3, r0
    ca9a:	eb1a 0a0b 	adds.w	sl, sl, fp
    ca9e:	f04f 0b00 	mov.w	fp, #0
    caa2:	eb4b 0b0b 	adc.w	fp, fp, fp
    caa6:	fbe4 ab00 	umlal	sl, fp, r4, r0
    caaa:	ee07 ca90 	vmov	s15, ip
    caae:	ee11 0a10 	vmov	r0, s2
    cab2:	f04f 0c00 	mov.w	ip, #0
    cab6:	fbe1 ec00 	umlal	lr, ip, r1, r0
    caba:	eb15 050c 	adds.w	r5, r5, ip
    cabe:	f04f 0c00 	mov.w	ip, #0
    cac2:	eb4c 0c0c 	adc.w	ip, ip, ip
    cac6:	fbe2 5c00 	umlal	r5, ip, r2, r0
    caca:	eb16 060c 	adds.w	r6, r6, ip
    cace:	f04f 0c00 	mov.w	ip, #0
    cad2:	eb4c 0c0c 	adc.w	ip, ip, ip
    cad6:	fbe3 6c00 	umlal	r6, ip, r3, r0
    cada:	eb17 070c 	adds.w	r7, r7, ip
    cade:	f04f 0c00 	mov.w	ip, #0
    cae2:	eb4c 0c0c 	adc.w	ip, ip, ip
    cae6:	fbe4 7c00 	umlal	r7, ip, r4, r0
    caea:	ee13 0a10 	vmov	r0, s6
    caee:	eb18 080c 	adds.w	r8, r8, ip
    caf2:	f04f 0c00 	mov.w	ip, #0
    caf6:	eb4c 0c0c 	adc.w	ip, ip, ip
    cafa:	fbe1 8c00 	umlal	r8, ip, r1, r0
    cafe:	eb19 090c 	adds.w	r9, r9, ip
    cb02:	f04f 0c00 	mov.w	ip, #0
    cb06:	eb4c 0c0c 	adc.w	ip, ip, ip
    cb0a:	fbe2 9c00 	umlal	r9, ip, r2, r0
    cb0e:	eb1a 0a0c 	adds.w	sl, sl, ip
    cb12:	f04f 0c00 	mov.w	ip, #0
    cb16:	eb4c 0c0c 	adc.w	ip, ip, ip
    cb1a:	fbe3 ac00 	umlal	sl, ip, r3, r0
    cb1e:	eb1b 0b0c 	adds.w	fp, fp, ip
    cb22:	f04f 0c00 	mov.w	ip, #0
    cb26:	eb4c 0c0c 	adc.w	ip, ip, ip
    cb2a:	fbe4 bc00 	umlal	fp, ip, r4, r0
    cb2e:	ee08 ea10 	vmov	s16, lr
    cb32:	ee11 0a90 	vmov	r0, s3
    cb36:	f04f 0e00 	mov.w	lr, #0
    cb3a:	fbe1 5e00 	umlal	r5, lr, r1, r0
    cb3e:	eb16 060e 	adds.w	r6, r6, lr
    cb42:	f04f 0e00 	mov.w	lr, #0
    cb46:	eb4e 0e0e 	adc.w	lr, lr, lr
    cb4a:	fbe2 6e00 	umlal	r6, lr, r2, r0
    cb4e:	eb17 070e 	adds.w	r7, r7, lr
    cb52:	f04f 0e00 	mov.w	lr, #0
    cb56:	eb4e 0e0e 	adc.w	lr, lr, lr
    cb5a:	fbe3 7e00 	umlal	r7, lr, r3, r0
    cb5e:	eb18 080e 	adds.w	r8, r8, lr
    cb62:	f04f 0e00 	mov.w	lr, #0
    cb66:	eb4e 0e0e 	adc.w	lr, lr, lr
    cb6a:	fbe4 8e00 	umlal	r8, lr, r4, r0
    cb6e:	ee13 0a90 	vmov	r0, s7
    cb72:	eb19 090e 	adds.w	r9, r9, lr
    cb76:	f04f 0e00 	mov.w	lr, #0
    cb7a:	eb4e 0e0e 	adc.w	lr, lr, lr
    cb7e:	fbe1 9e00 	umlal	r9, lr, r1, r0
    cb82:	eb1a 0a0e 	adds.w	sl, sl, lr
    cb86:	f04f 0e00 	mov.w	lr, #0
    cb8a:	eb4e 0e0e 	adc.w	lr, lr, lr
    cb8e:	fbe2 ae00 	umlal	sl, lr, r2, r0
    cb92:	eb1b 0b0e 	adds.w	fp, fp, lr
    cb96:	f04f 0e00 	mov.w	lr, #0
    cb9a:	eb4e 0e0e 	adc.w	lr, lr, lr
    cb9e:	fbe3 be00 	umlal	fp, lr, r3, r0
    cba2:	eb1c 0c0e 	adds.w	ip, ip, lr
    cba6:	f04f 0e00 	mov.w	lr, #0
    cbaa:	eb4e 0e0e 	adc.w	lr, lr, lr
    cbae:	fbe4 ce00 	umlal	ip, lr, r4, r0
    cbb2:	ee14 0a10 	vmov	r0, s8
    cbb6:	eca0 5a07 	vstmia	r0!, {s10-s16}
    cbba:	e880 5fe0 	stmia.w	r0, {r5, r6, r7, r8, r9, sl, fp, ip, lr}
    cbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cbc2:	bf00      	nop

0000cbc4 <ocrypto_constant_time_equal>:
    cbc4:	b430      	push	{r4, r5}
    cbc6:	f04f 0300 	mov.w	r3, #0

0000cbca <constant_time_equal_loop>:
    cbca:	f810 4b01 	ldrb.w	r4, [r0], #1
    cbce:	f811 5b01 	ldrb.w	r5, [r1], #1
    cbd2:	3a01      	subs	r2, #1
    cbd4:	ea84 0405 	eor.w	r4, r4, r5
    cbd8:	ea43 0304 	orr.w	r3, r3, r4
    cbdc:	d1f5      	bne.n	cbca <constant_time_equal_loop>
    cbde:	f1a3 0301 	sub.w	r3, r3, #1
    cbe2:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    cbe6:	bc30      	pop	{r4, r5}
    cbe8:	4770      	bx	lr

0000cbea <ocrypto_constant_time_is_zero>:
    cbea:	f04f 0300 	mov.w	r3, #0

0000cbee <constant_time_is_zero_loop>:
    cbee:	f810 2b01 	ldrb.w	r2, [r0], #1
    cbf2:	3901      	subs	r1, #1
    cbf4:	ea43 0302 	orr.w	r3, r3, r2
    cbf8:	d1f9      	bne.n	cbee <constant_time_is_zero_loop>
    cbfa:	f1a3 0301 	sub.w	r3, r3, #1
    cbfe:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    cc02:	4770      	bx	lr

0000cc04 <ocrypto_constant_time_copy>:
    cc04:	f811 3b01 	ldrb.w	r3, [r1], #1
    cc08:	f800 3b01 	strb.w	r3, [r0], #1
    cc0c:	3a01      	subs	r2, #1
    cc0e:	d1f9      	bne.n	cc04 <ocrypto_constant_time_copy>
    cc10:	4770      	bx	lr

0000cc12 <ocrypto_constant_time_fill_zero>:
    cc12:	2200      	movs	r2, #0

0000cc14 <constant_time_fill_zero_loop>:
    cc14:	f800 2b01 	strb.w	r2, [r0], #1
    cc18:	3901      	subs	r1, #1
    cc1a:	d1fb      	bne.n	cc14 <constant_time_fill_zero_loop>
    cc1c:	4770      	bx	lr
    cc1e:	bf00      	nop

0000cc20 <ocrypto_mod_p256_add>:
    cc20:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    cc24:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    cc28:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cc2c:	185b      	adds	r3, r3, r1
    cc2e:	eb54 040c 	adcs.w	r4, r4, ip
    cc32:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cc36:	414d      	adcs	r5, r1
    cc38:	eb56 060c 	adcs.w	r6, r6, ip
    cc3c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cc40:	414f      	adcs	r7, r1
    cc42:	eb58 080c 	adcs.w	r8, r8, ip
    cc46:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cc4a:	eb59 0901 	adcs.w	r9, r9, r1
    cc4e:	eb5a 0a0c 	adcs.w	sl, sl, ip
    cc52:	4189      	sbcs	r1, r1
    cc54:	f1b3 33ff 	subs.w	r3, r3, #4294967295	; 0xffffffff
    cc58:	f174 34ff 	sbcs.w	r4, r4, #4294967295	; 0xffffffff
    cc5c:	f175 35ff 	sbcs.w	r5, r5, #4294967295	; 0xffffffff
    cc60:	f176 0600 	sbcs.w	r6, r6, #0
    cc64:	f177 0700 	sbcs.w	r7, r7, #0
    cc68:	f178 0800 	sbcs.w	r8, r8, #0
    cc6c:	f179 0901 	sbcs.w	r9, r9, #1
    cc70:	f17a 3aff 	sbcs.w	sl, sl, #4294967295	; 0xffffffff
    cc74:	f151 0100 	adcs.w	r1, r1, #0
    cc78:	424a      	negs	r2, r1
    cc7a:	185b      	adds	r3, r3, r1
    cc7c:	414c      	adcs	r4, r1
    cc7e:	414d      	adcs	r5, r1
    cc80:	f156 0600 	adcs.w	r6, r6, #0
    cc84:	f157 0700 	adcs.w	r7, r7, #0
    cc88:	f158 0800 	adcs.w	r8, r8, #0
    cc8c:	eb59 0902 	adcs.w	r9, r9, r2
    cc90:	eb5a 0a01 	adcs.w	sl, sl, r1
    cc94:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    cc98:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    cc9c:	4770      	bx	lr

0000cc9e <ocrypto_mod_p256_sub>:
    cc9e:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    cca2:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    cca6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    ccaa:	1a5b      	subs	r3, r3, r1
    ccac:	eb74 040c 	sbcs.w	r4, r4, ip
    ccb0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    ccb4:	418d      	sbcs	r5, r1
    ccb6:	eb76 060c 	sbcs.w	r6, r6, ip
    ccba:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    ccbe:	418f      	sbcs	r7, r1
    ccc0:	eb78 080c 	sbcs.w	r8, r8, ip
    ccc4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    ccc8:	eb79 0901 	sbcs.w	r9, r9, r1
    cccc:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    ccd0:	4189      	sbcs	r1, r1
    ccd2:	424a      	negs	r2, r1
    ccd4:	185b      	adds	r3, r3, r1
    ccd6:	414c      	adcs	r4, r1
    ccd8:	414d      	adcs	r5, r1
    ccda:	f156 0600 	adcs.w	r6, r6, #0
    ccde:	f157 0700 	adcs.w	r7, r7, #0
    cce2:	f158 0800 	adcs.w	r8, r8, #0
    cce6:	eb59 0902 	adcs.w	r9, r9, r2
    ccea:	eb5a 0a01 	adcs.w	sl, sl, r1
    ccee:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    ccf2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    ccf6:	4770      	bx	lr

0000ccf8 <ocrypto_mod_p256_square>:
    ccf8:	460a      	mov	r2, r1

0000ccfa <ocrypto_mod_p256_mul>:
    ccfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ccfe:	ec41 0a14 	vmov	s8, s9, r0, r1
    cd02:	ec92 0a08 	vldmia	r2, {s0-s7}
    cd06:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    cd08:	ee10 0a10 	vmov	r0, s0
    cd0c:	fba1 7800 	umull	r7, r8, r1, r0
    cd10:	f04f 0900 	mov.w	r9, #0
    cd14:	fbe2 8900 	umlal	r8, r9, r2, r0
    cd18:	f04f 0a00 	mov.w	sl, #0
    cd1c:	fbe3 9a00 	umlal	r9, sl, r3, r0
    cd20:	f04f 0b00 	mov.w	fp, #0
    cd24:	fbe4 ab00 	umlal	sl, fp, r4, r0
    cd28:	ee12 0a10 	vmov	r0, s4
    cd2c:	f04f 0c00 	mov.w	ip, #0
    cd30:	fbe1 bc00 	umlal	fp, ip, r1, r0
    cd34:	f04f 0e00 	mov.w	lr, #0
    cd38:	fbe2 ce00 	umlal	ip, lr, r2, r0
    cd3c:	f04f 0500 	mov.w	r5, #0
    cd40:	fbe3 e500 	umlal	lr, r5, r3, r0
    cd44:	f04f 0600 	mov.w	r6, #0
    cd48:	fbe4 5600 	umlal	r5, r6, r4, r0
    cd4c:	ee05 7a10 	vmov	s10, r7
    cd50:	ee10 0a90 	vmov	r0, s1
    cd54:	f04f 0700 	mov.w	r7, #0
    cd58:	fbe1 8700 	umlal	r8, r7, r1, r0
    cd5c:	eb19 0907 	adds.w	r9, r9, r7
    cd60:	f04f 0700 	mov.w	r7, #0
    cd64:	eb47 0707 	adc.w	r7, r7, r7
    cd68:	fbe2 9700 	umlal	r9, r7, r2, r0
    cd6c:	eb1a 0a07 	adds.w	sl, sl, r7
    cd70:	f04f 0700 	mov.w	r7, #0
    cd74:	eb47 0707 	adc.w	r7, r7, r7
    cd78:	fbe3 a700 	umlal	sl, r7, r3, r0
    cd7c:	eb1b 0b07 	adds.w	fp, fp, r7
    cd80:	f04f 0700 	mov.w	r7, #0
    cd84:	eb47 0707 	adc.w	r7, r7, r7
    cd88:	fbe4 b700 	umlal	fp, r7, r4, r0
    cd8c:	ee12 0a90 	vmov	r0, s5
    cd90:	eb1c 0c07 	adds.w	ip, ip, r7
    cd94:	f04f 0700 	mov.w	r7, #0
    cd98:	eb47 0707 	adc.w	r7, r7, r7
    cd9c:	fbe1 c700 	umlal	ip, r7, r1, r0
    cda0:	eb1e 0e07 	adds.w	lr, lr, r7
    cda4:	f04f 0700 	mov.w	r7, #0
    cda8:	eb47 0707 	adc.w	r7, r7, r7
    cdac:	fbe2 e700 	umlal	lr, r7, r2, r0
    cdb0:	19ed      	adds	r5, r5, r7
    cdb2:	f04f 0700 	mov.w	r7, #0
    cdb6:	eb47 0707 	adc.w	r7, r7, r7
    cdba:	fbe3 5700 	umlal	r5, r7, r3, r0
    cdbe:	19f6      	adds	r6, r6, r7
    cdc0:	f04f 0700 	mov.w	r7, #0
    cdc4:	eb47 0707 	adc.w	r7, r7, r7
    cdc8:	fbe4 6700 	umlal	r6, r7, r4, r0
    cdcc:	ee05 8a90 	vmov	s11, r8
    cdd0:	ee11 0a10 	vmov	r0, s2
    cdd4:	f04f 0800 	mov.w	r8, #0
    cdd8:	fbe1 9800 	umlal	r9, r8, r1, r0
    cddc:	eb1a 0a08 	adds.w	sl, sl, r8
    cde0:	f04f 0800 	mov.w	r8, #0
    cde4:	eb48 0808 	adc.w	r8, r8, r8
    cde8:	fbe2 a800 	umlal	sl, r8, r2, r0
    cdec:	eb1b 0b08 	adds.w	fp, fp, r8
    cdf0:	f04f 0800 	mov.w	r8, #0
    cdf4:	eb48 0808 	adc.w	r8, r8, r8
    cdf8:	fbe3 b800 	umlal	fp, r8, r3, r0
    cdfc:	eb1c 0c08 	adds.w	ip, ip, r8
    ce00:	f04f 0800 	mov.w	r8, #0
    ce04:	eb48 0808 	adc.w	r8, r8, r8
    ce08:	fbe4 c800 	umlal	ip, r8, r4, r0
    ce0c:	ee13 0a10 	vmov	r0, s6
    ce10:	eb1e 0e08 	adds.w	lr, lr, r8
    ce14:	f04f 0800 	mov.w	r8, #0
    ce18:	eb48 0808 	adc.w	r8, r8, r8
    ce1c:	fbe1 e800 	umlal	lr, r8, r1, r0
    ce20:	eb15 0508 	adds.w	r5, r5, r8
    ce24:	f04f 0800 	mov.w	r8, #0
    ce28:	eb48 0808 	adc.w	r8, r8, r8
    ce2c:	fbe2 5800 	umlal	r5, r8, r2, r0
    ce30:	eb16 0608 	adds.w	r6, r6, r8
    ce34:	f04f 0800 	mov.w	r8, #0
    ce38:	eb48 0808 	adc.w	r8, r8, r8
    ce3c:	fbe3 6800 	umlal	r6, r8, r3, r0
    ce40:	eb17 0708 	adds.w	r7, r7, r8
    ce44:	f04f 0800 	mov.w	r8, #0
    ce48:	eb48 0808 	adc.w	r8, r8, r8
    ce4c:	fbe4 7800 	umlal	r7, r8, r4, r0
    ce50:	ee06 9a10 	vmov	s12, r9
    ce54:	ee11 0a90 	vmov	r0, s3
    ce58:	f04f 0900 	mov.w	r9, #0
    ce5c:	fbe1 a900 	umlal	sl, r9, r1, r0
    ce60:	eb1b 0b09 	adds.w	fp, fp, r9
    ce64:	f04f 0900 	mov.w	r9, #0
    ce68:	eb49 0909 	adc.w	r9, r9, r9
    ce6c:	fbe2 b900 	umlal	fp, r9, r2, r0
    ce70:	eb1c 0c09 	adds.w	ip, ip, r9
    ce74:	f04f 0900 	mov.w	r9, #0
    ce78:	eb49 0909 	adc.w	r9, r9, r9
    ce7c:	fbe3 c900 	umlal	ip, r9, r3, r0
    ce80:	eb1e 0e09 	adds.w	lr, lr, r9
    ce84:	f04f 0900 	mov.w	r9, #0
    ce88:	eb49 0909 	adc.w	r9, r9, r9
    ce8c:	fbe4 e900 	umlal	lr, r9, r4, r0
    ce90:	ee13 0a90 	vmov	r0, s7
    ce94:	eb15 0509 	adds.w	r5, r5, r9
    ce98:	f04f 0900 	mov.w	r9, #0
    ce9c:	eb49 0909 	adc.w	r9, r9, r9
    cea0:	fbe1 5900 	umlal	r5, r9, r1, r0
    cea4:	eb16 0609 	adds.w	r6, r6, r9
    cea8:	f04f 0900 	mov.w	r9, #0
    ceac:	eb49 0909 	adc.w	r9, r9, r9
    ceb0:	fbe2 6900 	umlal	r6, r9, r2, r0
    ceb4:	eb17 0709 	adds.w	r7, r7, r9
    ceb8:	f04f 0900 	mov.w	r9, #0
    cebc:	eb49 0909 	adc.w	r9, r9, r9
    cec0:	fbe3 7900 	umlal	r7, r9, r3, r0
    cec4:	eb18 0809 	adds.w	r8, r8, r9
    cec8:	f04f 0900 	mov.w	r9, #0
    cecc:	eb49 0909 	adc.w	r9, r9, r9
    ced0:	fbe4 8900 	umlal	r8, r9, r4, r0
    ced4:	ee06 aa90 	vmov	s13, sl
    ced8:	ee14 1a90 	vmov	r1, s9
    cedc:	f101 0110 	add.w	r1, r1, #16
    cee0:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    cee2:	ee10 0a10 	vmov	r0, s0
    cee6:	f04f 0a00 	mov.w	sl, #0
    ceea:	fbe1 ba00 	umlal	fp, sl, r1, r0
    ceee:	eb1c 0c0a 	adds.w	ip, ip, sl
    cef2:	f04f 0a00 	mov.w	sl, #0
    cef6:	eb4a 0a0a 	adc.w	sl, sl, sl
    cefa:	fbe2 ca00 	umlal	ip, sl, r2, r0
    cefe:	eb1e 0e0a 	adds.w	lr, lr, sl
    cf02:	f04f 0a00 	mov.w	sl, #0
    cf06:	eb4a 0a0a 	adc.w	sl, sl, sl
    cf0a:	fbe3 ea00 	umlal	lr, sl, r3, r0
    cf0e:	eb15 050a 	adds.w	r5, r5, sl
    cf12:	f04f 0a00 	mov.w	sl, #0
    cf16:	eb4a 0a0a 	adc.w	sl, sl, sl
    cf1a:	fbe4 5a00 	umlal	r5, sl, r4, r0
    cf1e:	ee12 0a10 	vmov	r0, s4
    cf22:	eb16 060a 	adds.w	r6, r6, sl
    cf26:	f04f 0a00 	mov.w	sl, #0
    cf2a:	eb4a 0a0a 	adc.w	sl, sl, sl
    cf2e:	fbe1 6a00 	umlal	r6, sl, r1, r0
    cf32:	eb17 070a 	adds.w	r7, r7, sl
    cf36:	f04f 0a00 	mov.w	sl, #0
    cf3a:	eb4a 0a0a 	adc.w	sl, sl, sl
    cf3e:	fbe2 7a00 	umlal	r7, sl, r2, r0
    cf42:	eb18 080a 	adds.w	r8, r8, sl
    cf46:	f04f 0a00 	mov.w	sl, #0
    cf4a:	eb4a 0a0a 	adc.w	sl, sl, sl
    cf4e:	fbe3 8a00 	umlal	r8, sl, r3, r0
    cf52:	eb19 090a 	adds.w	r9, r9, sl
    cf56:	f04f 0a00 	mov.w	sl, #0
    cf5a:	eb4a 0a0a 	adc.w	sl, sl, sl
    cf5e:	fbe4 9a00 	umlal	r9, sl, r4, r0
    cf62:	ee07 ba10 	vmov	s14, fp
    cf66:	ee10 0a90 	vmov	r0, s1
    cf6a:	f04f 0b00 	mov.w	fp, #0
    cf6e:	fbe1 cb00 	umlal	ip, fp, r1, r0
    cf72:	eb1e 0e0b 	adds.w	lr, lr, fp
    cf76:	f04f 0b00 	mov.w	fp, #0
    cf7a:	eb4b 0b0b 	adc.w	fp, fp, fp
    cf7e:	fbe2 eb00 	umlal	lr, fp, r2, r0
    cf82:	eb15 050b 	adds.w	r5, r5, fp
    cf86:	f04f 0b00 	mov.w	fp, #0
    cf8a:	eb4b 0b0b 	adc.w	fp, fp, fp
    cf8e:	fbe3 5b00 	umlal	r5, fp, r3, r0
    cf92:	eb16 060b 	adds.w	r6, r6, fp
    cf96:	f04f 0b00 	mov.w	fp, #0
    cf9a:	eb4b 0b0b 	adc.w	fp, fp, fp
    cf9e:	fbe4 6b00 	umlal	r6, fp, r4, r0
    cfa2:	ee12 0a90 	vmov	r0, s5
    cfa6:	eb17 070b 	adds.w	r7, r7, fp
    cfaa:	f04f 0b00 	mov.w	fp, #0
    cfae:	eb4b 0b0b 	adc.w	fp, fp, fp
    cfb2:	fbe1 7b00 	umlal	r7, fp, r1, r0
    cfb6:	eb18 080b 	adds.w	r8, r8, fp
    cfba:	f04f 0b00 	mov.w	fp, #0
    cfbe:	eb4b 0b0b 	adc.w	fp, fp, fp
    cfc2:	fbe2 8b00 	umlal	r8, fp, r2, r0
    cfc6:	eb19 090b 	adds.w	r9, r9, fp
    cfca:	f04f 0b00 	mov.w	fp, #0
    cfce:	eb4b 0b0b 	adc.w	fp, fp, fp
    cfd2:	fbe3 9b00 	umlal	r9, fp, r3, r0
    cfd6:	eb1a 0a0b 	adds.w	sl, sl, fp
    cfda:	f04f 0b00 	mov.w	fp, #0
    cfde:	eb4b 0b0b 	adc.w	fp, fp, fp
    cfe2:	fbe4 ab00 	umlal	sl, fp, r4, r0
    cfe6:	ee07 ca90 	vmov	s15, ip
    cfea:	ee11 0a10 	vmov	r0, s2
    cfee:	f04f 0c00 	mov.w	ip, #0
    cff2:	fbe1 ec00 	umlal	lr, ip, r1, r0
    cff6:	eb15 050c 	adds.w	r5, r5, ip
    cffa:	f04f 0c00 	mov.w	ip, #0
    cffe:	eb4c 0c0c 	adc.w	ip, ip, ip
    d002:	fbe2 5c00 	umlal	r5, ip, r2, r0
    d006:	eb16 060c 	adds.w	r6, r6, ip
    d00a:	f04f 0c00 	mov.w	ip, #0
    d00e:	eb4c 0c0c 	adc.w	ip, ip, ip
    d012:	fbe3 6c00 	umlal	r6, ip, r3, r0
    d016:	eb17 070c 	adds.w	r7, r7, ip
    d01a:	f04f 0c00 	mov.w	ip, #0
    d01e:	eb4c 0c0c 	adc.w	ip, ip, ip
    d022:	fbe4 7c00 	umlal	r7, ip, r4, r0
    d026:	ee13 0a10 	vmov	r0, s6
    d02a:	eb18 080c 	adds.w	r8, r8, ip
    d02e:	f04f 0c00 	mov.w	ip, #0
    d032:	eb4c 0c0c 	adc.w	ip, ip, ip
    d036:	fbe1 8c00 	umlal	r8, ip, r1, r0
    d03a:	eb19 090c 	adds.w	r9, r9, ip
    d03e:	f04f 0c00 	mov.w	ip, #0
    d042:	eb4c 0c0c 	adc.w	ip, ip, ip
    d046:	fbe2 9c00 	umlal	r9, ip, r2, r0
    d04a:	eb1a 0a0c 	adds.w	sl, sl, ip
    d04e:	f04f 0c00 	mov.w	ip, #0
    d052:	eb4c 0c0c 	adc.w	ip, ip, ip
    d056:	fbe3 ac00 	umlal	sl, ip, r3, r0
    d05a:	eb1b 0b0c 	adds.w	fp, fp, ip
    d05e:	f04f 0c00 	mov.w	ip, #0
    d062:	eb4c 0c0c 	adc.w	ip, ip, ip
    d066:	fbe4 bc00 	umlal	fp, ip, r4, r0
    d06a:	ee08 ea10 	vmov	s16, lr
    d06e:	ee11 0a90 	vmov	r0, s3
    d072:	f04f 0e00 	mov.w	lr, #0
    d076:	fbe1 5e00 	umlal	r5, lr, r1, r0
    d07a:	eb16 060e 	adds.w	r6, r6, lr
    d07e:	f04f 0e00 	mov.w	lr, #0
    d082:	eb4e 0e0e 	adc.w	lr, lr, lr
    d086:	fbe2 6e00 	umlal	r6, lr, r2, r0
    d08a:	eb17 070e 	adds.w	r7, r7, lr
    d08e:	f04f 0e00 	mov.w	lr, #0
    d092:	eb4e 0e0e 	adc.w	lr, lr, lr
    d096:	fbe3 7e00 	umlal	r7, lr, r3, r0
    d09a:	eb18 080e 	adds.w	r8, r8, lr
    d09e:	f04f 0e00 	mov.w	lr, #0
    d0a2:	eb4e 0e0e 	adc.w	lr, lr, lr
    d0a6:	fbe4 8e00 	umlal	r8, lr, r4, r0
    d0aa:	ee13 0a90 	vmov	r0, s7
    d0ae:	eb19 090e 	adds.w	r9, r9, lr
    d0b2:	f04f 0e00 	mov.w	lr, #0
    d0b6:	eb4e 0e0e 	adc.w	lr, lr, lr
    d0ba:	fbe1 9e00 	umlal	r9, lr, r1, r0
    d0be:	eb1a 0a0e 	adds.w	sl, sl, lr
    d0c2:	f04f 0e00 	mov.w	lr, #0
    d0c6:	eb4e 0e0e 	adc.w	lr, lr, lr
    d0ca:	fbe2 ae00 	umlal	sl, lr, r2, r0
    d0ce:	eb1b 0b0e 	adds.w	fp, fp, lr
    d0d2:	f04f 0e00 	mov.w	lr, #0
    d0d6:	eb4e 0e0e 	adc.w	lr, lr, lr
    d0da:	fbe3 be00 	umlal	fp, lr, r3, r0
    d0de:	eb1c 0c0e 	adds.w	ip, ip, lr
    d0e2:	f04f 0e00 	mov.w	lr, #0
    d0e6:	eb4e 0e0e 	adc.w	lr, lr, lr
    d0ea:	fbe4 ce00 	umlal	ip, lr, r4, r0
    d0ee:	ec53 2a17 	vmov	r2, r3, s14, s15
    d0f2:	ee18 4a10 	vmov	r4, s16
    d0f6:	eb12 020a 	adds.w	r2, r2, sl
    d0fa:	eb53 030b 	adcs.w	r3, r3, fp
    d0fe:	eb54 040c 	adcs.w	r4, r4, ip
    d102:	eb55 050e 	adcs.w	r5, r5, lr
    d106:	2000      	movs	r0, #0
    d108:	f140 0000 	adc.w	r0, r0, #0
    d10c:	eb12 020b 	adds.w	r2, r2, fp
    d110:	eb53 030c 	adcs.w	r3, r3, ip
    d114:	eb54 040e 	adcs.w	r4, r4, lr
    d118:	eb55 050e 	adcs.w	r5, r5, lr
    d11c:	4146      	adcs	r6, r0
    d11e:	2000      	movs	r0, #0
    d120:	4147      	adcs	r7, r0
    d122:	eb58 0800 	adcs.w	r8, r8, r0
    d126:	eb59 090a 	adcs.w	r9, r9, sl
    d12a:	f140 0000 	adc.w	r0, r0, #0
    d12e:	ebb2 020e 	subs.w	r2, r2, lr
    d132:	f173 0300 	sbcs.w	r3, r3, #0
    d136:	f174 0400 	sbcs.w	r4, r4, #0
    d13a:	eb75 050a 	sbcs.w	r5, r5, sl
    d13e:	eb76 060b 	sbcs.w	r6, r6, fp
    d142:	eb77 070c 	sbcs.w	r7, r7, ip
    d146:	eb78 080a 	sbcs.w	r8, r8, sl
    d14a:	eb79 090c 	sbcs.w	r9, r9, ip
    d14e:	f160 0000 	sbc.w	r0, r0, #0
    d152:	ebb5 050b 	subs.w	r5, r5, fp
    d156:	eb76 060c 	sbcs.w	r6, r6, ip
    d15a:	eb77 070e 	sbcs.w	r7, r7, lr
    d15e:	eb78 080b 	sbcs.w	r8, r8, fp
    d162:	eb79 090e 	sbcs.w	r9, r9, lr
    d166:	f160 0000 	sbc.w	r0, r0, #0
    d16a:	ea5f 7ce0 	movs.w	ip, r0, asr #31
    d16e:	ea7f 0c0c 	mvns.w	ip, ip
    d172:	f1dc 0e00 	rsbs	lr, ip, #0
    d176:	ebb2 020c 	subs.w	r2, r2, ip
    d17a:	eb73 030c 	sbcs.w	r3, r3, ip
    d17e:	eb74 040c 	sbcs.w	r4, r4, ip
    d182:	f175 0500 	sbcs.w	r5, r5, #0
    d186:	f176 0600 	sbcs.w	r6, r6, #0
    d18a:	f177 0700 	sbcs.w	r7, r7, #0
    d18e:	eb78 080e 	sbcs.w	r8, r8, lr
    d192:	eb79 090c 	sbcs.w	r9, r9, ip
    d196:	f160 0000 	sbc.w	r0, r0, #0
    d19a:	ea5f 7ce0 	movs.w	ip, r0, asr #31
    d19e:	f1dc 0e00 	rsbs	lr, ip, #0
    d1a2:	eb12 020c 	adds.w	r2, r2, ip
    d1a6:	eb53 030c 	adcs.w	r3, r3, ip
    d1aa:	eb54 040c 	adcs.w	r4, r4, ip
    d1ae:	f155 0500 	adcs.w	r5, r5, #0
    d1b2:	f156 0600 	adcs.w	r6, r6, #0
    d1b6:	f157 0700 	adcs.w	r7, r7, #0
    d1ba:	eb58 080e 	adcs.w	r8, r8, lr
    d1be:	eb59 090c 	adcs.w	r9, r9, ip
    d1c2:	f140 0000 	adc.w	r0, r0, #0
    d1c6:	ea5f 7ce0 	movs.w	ip, r0, asr #31
    d1ca:	f1dc 0e00 	rsbs	lr, ip, #0
    d1ce:	eb12 020c 	adds.w	r2, r2, ip
    d1d2:	eb53 030c 	adcs.w	r3, r3, ip
    d1d6:	eb54 040c 	adcs.w	r4, r4, ip
    d1da:	f155 0500 	adcs.w	r5, r5, #0
    d1de:	f156 0600 	adcs.w	r6, r6, #0
    d1e2:	f157 0700 	adcs.w	r7, r7, #0
    d1e6:	eb58 080e 	adcs.w	r8, r8, lr
    d1ea:	eb59 090c 	adcs.w	r9, r9, ip
    d1ee:	ec5b aa15 	vmov	sl, fp, s10, s11
    d1f2:	ec51 0a16 	vmov	r0, r1, s12, s13
    d1f6:	eb1a 0a06 	adds.w	sl, sl, r6
    d1fa:	eb5b 0b07 	adcs.w	fp, fp, r7
    d1fe:	eb50 0008 	adcs.w	r0, r0, r8
    d202:	eb51 0109 	adcs.w	r1, r1, r9
    d206:	f05f 0c00 	movs.w	ip, #0
    d20a:	f14c 0c00 	adc.w	ip, ip, #0
    d20e:	eb1a 0a07 	adds.w	sl, sl, r7
    d212:	eb5b 0b08 	adcs.w	fp, fp, r8
    d216:	eb50 0009 	adcs.w	r0, r0, r9
    d21a:	eb51 0109 	adcs.w	r1, r1, r9
    d21e:	eb52 020c 	adcs.w	r2, r2, ip
    d222:	f05f 0c00 	movs.w	ip, #0
    d226:	eb53 030c 	adcs.w	r3, r3, ip
    d22a:	eb54 040c 	adcs.w	r4, r4, ip
    d22e:	4175      	adcs	r5, r6
    d230:	f14c 0c00 	adc.w	ip, ip, #0
    d234:	ebba 0a09 	subs.w	sl, sl, r9
    d238:	f17b 0b00 	sbcs.w	fp, fp, #0
    d23c:	f170 0000 	sbcs.w	r0, r0, #0
    d240:	41b1      	sbcs	r1, r6
    d242:	41ba      	sbcs	r2, r7
    d244:	eb73 0308 	sbcs.w	r3, r3, r8
    d248:	41b4      	sbcs	r4, r6
    d24a:	eb75 0508 	sbcs.w	r5, r5, r8
    d24e:	f16c 0c00 	sbc.w	ip, ip, #0
    d252:	1bc9      	subs	r1, r1, r7
    d254:	eb72 0208 	sbcs.w	r2, r2, r8
    d258:	eb73 0309 	sbcs.w	r3, r3, r9
    d25c:	41bc      	sbcs	r4, r7
    d25e:	eb75 0509 	sbcs.w	r5, r5, r9
    d262:	f16c 0c00 	sbc.w	ip, ip, #0
    d266:	ea5f 78ec 	movs.w	r8, ip, asr #31
    d26a:	ea7f 0808 	mvns.w	r8, r8
    d26e:	f1d8 0900 	rsbs	r9, r8, #0
    d272:	ebba 0a08 	subs.w	sl, sl, r8
    d276:	eb7b 0b08 	sbcs.w	fp, fp, r8
    d27a:	eb70 0008 	sbcs.w	r0, r0, r8
    d27e:	f171 0100 	sbcs.w	r1, r1, #0
    d282:	f172 0200 	sbcs.w	r2, r2, #0
    d286:	f173 0300 	sbcs.w	r3, r3, #0
    d28a:	eb74 0409 	sbcs.w	r4, r4, r9
    d28e:	eb75 0508 	sbcs.w	r5, r5, r8
    d292:	f16c 0c00 	sbc.w	ip, ip, #0
    d296:	ea5f 78ec 	movs.w	r8, ip, asr #31
    d29a:	f1d8 0900 	rsbs	r9, r8, #0
    d29e:	eb1a 0a08 	adds.w	sl, sl, r8
    d2a2:	eb5b 0b08 	adcs.w	fp, fp, r8
    d2a6:	eb50 0008 	adcs.w	r0, r0, r8
    d2aa:	f151 0100 	adcs.w	r1, r1, #0
    d2ae:	f152 0200 	adcs.w	r2, r2, #0
    d2b2:	f153 0300 	adcs.w	r3, r3, #0
    d2b6:	eb54 0409 	adcs.w	r4, r4, r9
    d2ba:	eb55 0508 	adcs.w	r5, r5, r8
    d2be:	f14c 0c00 	adc.w	ip, ip, #0
    d2c2:	ea5f 78ec 	movs.w	r8, ip, asr #31
    d2c6:	f1d8 0900 	rsbs	r9, r8, #0
    d2ca:	eb1a 0a08 	adds.w	sl, sl, r8
    d2ce:	eb5b 0b08 	adcs.w	fp, fp, r8
    d2d2:	eb50 0008 	adcs.w	r0, r0, r8
    d2d6:	f151 0100 	adcs.w	r1, r1, #0
    d2da:	f152 0200 	adcs.w	r2, r2, #0
    d2de:	f153 0300 	adcs.w	r3, r3, #0
    d2e2:	eb54 0409 	adcs.w	r4, r4, r9
    d2e6:	eb55 0508 	adcs.w	r5, r5, r8
    d2ea:	ee14 7a10 	vmov	r7, s8
    d2ee:	e8a7 0c00 	stmia.w	r7!, {sl, fp}
    d2f2:	e887 003f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5}
    d2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d2fa:	bf00      	nop

0000d2fc <bsd_recoverable_error_handler>:
struct at_param_list m_param_list;

/**@brief Recoverable BSD library error. */
void bsd_recoverable_error_handler(uint32_t err)
{
	LOG_ERR("bsdlib recoverable error: %u", err);
    d2fc:	2301      	movs	r3, #1
    d2fe:	f04f 0200 	mov.w	r2, #0
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    d302:	4906      	ldr	r1, [pc, #24]	; (d31c <bsd_recoverable_error_handler+0x20>)
    d304:	f363 0207 	bfi	r2, r3, #0, #8
    d308:	4b05      	ldr	r3, [pc, #20]	; (d320 <bsd_recoverable_error_handler+0x24>)
    d30a:	1a5b      	subs	r3, r3, r1
    d30c:	08db      	lsrs	r3, r3, #3
    d30e:	4601      	mov	r1, r0
    d310:	f363 128f 	bfi	r2, r3, #6, #10
    d314:	4803      	ldr	r0, [pc, #12]	; (d324 <bsd_recoverable_error_handler+0x28>)
    d316:	f016 bd29 	b.w	23d6c <log_1>
    d31a:	bf00      	nop
    d31c:	000264bc 	.word	0x000264bc
    d320:	000264bc 	.word	0x000264bc
    d324:	00027968 	.word	0x00027968

0000d328 <start_execute>:

void start_execute(void)
{
	int err;

	LOG_INF("SERIAL LTE MODEM FOR MULTIPLE NB-IOT BS");
    d328:	2303      	movs	r3, #3
    d32a:	f04f 0100 	mov.w	r1, #0
{
    d32e:	b510      	push	{r4, lr}
	LOG_INF("SERIAL LTE MODEM FOR MULTIPLE NB-IOT BS");
    d330:	f363 0107 	bfi	r1, r3, #0, #8
    d334:	4c14      	ldr	r4, [pc, #80]	; (d388 <start_execute+0x60>)
    d336:	4b15      	ldr	r3, [pc, #84]	; (d38c <start_execute+0x64>)
    d338:	4815      	ldr	r0, [pc, #84]	; (d390 <start_execute+0x68>)
    d33a:	1ae4      	subs	r4, r4, r3
    d33c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    d340:	f364 118f 	bfi	r1, r4, #6, #10
    d344:	f016 fd05 	bl	23d52 <log_0>
#if defined(CONFIG_SLM_AT_MODE)
	err = slm_at_host_init();
    d348:	f000 f996 	bl	d678 <slm_at_host_init>
	if (err != 0) {
    d34c:	4601      	mov	r1, r0
    d34e:	b158      	cbz	r0, d368 <start_execute+0x40>
		LOG_ERR("Failed to init at_host: %d", err);
    d350:	f04f 0200 	mov.w	r2, #0
    d354:	2301      	movs	r3, #1
    d356:	480f      	ldr	r0, [pc, #60]	; (d394 <start_execute+0x6c>)
    d358:	f363 0207 	bfi	r2, r3, #0, #8
    d35c:	f364 128f 	bfi	r2, r4, #6, #10
	if (err) {
		LOG_ERR("Failed to init AT Parser: %d", err);
		return;
	}
#endif
}
    d360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Failed to init AT Parser: %d", err);
    d364:	f016 bd02 	b.w	23d6c <log_1>
	err = at_params_list_init(&m_param_list, CONFIG_SLM_AT_MAX_PARAM);
    d368:	2108      	movs	r1, #8
    d36a:	480b      	ldr	r0, [pc, #44]	; (d398 <start_execute+0x70>)
    d36c:	f018 fa3a 	bl	257e4 <at_params_list_init>
	if (err) {
    d370:	4601      	mov	r1, r0
    d372:	b140      	cbz	r0, d386 <start_execute+0x5e>
		LOG_ERR("Failed to init AT Parser: %d", err);
    d374:	f04f 0200 	mov.w	r2, #0
    d378:	2301      	movs	r3, #1
    d37a:	f363 0207 	bfi	r2, r3, #0, #8
    d37e:	f364 128f 	bfi	r2, r4, #6, #10
    d382:	4806      	ldr	r0, [pc, #24]	; (d39c <start_execute+0x74>)
    d384:	e7ec      	b.n	d360 <start_execute+0x38>
}
    d386:	bd10      	pop	{r4, pc}
    d388:	000264bc 	.word	0x000264bc
    d38c:	000264bc 	.word	0x000264bc
    d390:	00027985 	.word	0x00027985
    d394:	000279ad 	.word	0x000279ad
    d398:	200200e0 	.word	0x200200e0
    d39c:	000279c8 	.word	0x000279c8

0000d3a0 <write_uart_string>:
static size_t at_buf_len;
static struct k_work cmd_send_work;
static const char termination[3] = { '\0', '\r', '\n' };

static inline void write_uart_string(char *str, size_t len)
{
    d3a0:	b570      	push	{r4, r5, r6, lr}
    d3a2:	4604      	mov	r4, r0
	LOG_HEXDUMP_DBG(str, len, "TX");

	for (size_t i = 0; i < len; i++) {
		uart_poll_out(uart_dev, str[i]);
    d3a4:	4e05      	ldr	r6, [pc, #20]	; (d3bc <write_uart_string+0x1c>)
    d3a6:	1845      	adds	r5, r0, r1
	for (size_t i = 0; i < len; i++) {
    d3a8:	42ac      	cmp	r4, r5
    d3aa:	d100      	bne.n	d3ae <write_uart_string+0xe>
	}
}
    d3ac:	bd70      	pop	{r4, r5, r6, pc}
		uart_poll_out(uart_dev, str[i]);
    d3ae:	6830      	ldr	r0, [r6, #0]
    d3b0:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    d3b4:	6843      	ldr	r3, [r0, #4]
    d3b6:	685b      	ldr	r3, [r3, #4]
    d3b8:	4798      	blx	r3
    d3ba:	e7f5      	b.n	d3a8 <write_uart_string+0x8>
    d3bc:	200200fc 	.word	0x200200fc

0000d3c0 <cmd_send>:
	size_t size_slmver = sizeof(AT_CMD_SLMVER_U) - 1;

	ARG_UNUSED(work);

	/* Make sure the string is 0-terminated */
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    d3c0:	f640 228b 	movw	r2, #2699	; 0xa8b
{
    d3c4:	b530      	push	{r4, r5, lr}
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    d3c6:	4d3a      	ldr	r5, [pc, #232]	; (d4b0 <cmd_send+0xf0>)
    d3c8:	4c3a      	ldr	r4, [pc, #232]	; (d4b4 <cmd_send+0xf4>)
    d3ca:	682b      	ldr	r3, [r5, #0]
{
    d3cc:	b087      	sub	sp, #28
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    d3ce:	4293      	cmp	r3, r2
    d3d0:	bf28      	it	cs
    d3d2:	4613      	movcs	r3, r2
    d3d4:	2200      	movs	r2, #0

	LOG_HEXDUMP_DBG(at_buf, at_buf_len, "RX");

	if (strncmp(at_buf, AT_CMD_SLMVER_U, size_slmver) == 0 ||
    d3d6:	4938      	ldr	r1, [pc, #224]	; (d4b8 <cmd_send+0xf8>)
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    d3d8:	54e2      	strb	r2, [r4, r3]
	if (strncmp(at_buf, AT_CMD_SLMVER_U, size_slmver) == 0 ||
    d3da:	4620      	mov	r0, r4
    d3dc:	220a      	movs	r2, #10
    d3de:	f017 f9d9 	bl	24794 <strncmp>
    d3e2:	b920      	cbnz	r0, d3ee <cmd_send+0x2e>
		strncmp(at_buf, AT_CMD_SLMVER_L, size_slmver) == 0) {
		write_uart_string(SLM_VERSION, sizeof(SLM_VERSION));
    d3e4:	2110      	movs	r1, #16
    d3e6:	4835      	ldr	r0, [pc, #212]	; (d4bc <cmd_send+0xfc>)
		state = AT_CMD_ERROR;
	}

	switch (state) {
	case AT_CMD_OK:
		write_uart_string(buf, strlen(buf));
    d3e8:	f7ff ffda 	bl	d3a0 <write_uart_string>
    d3ec:	e00b      	b.n	d406 <cmd_send+0x46>
		strncmp(at_buf, AT_CMD_SLMVER_L, size_slmver) == 0) {
    d3ee:	220a      	movs	r2, #10
    d3f0:	4933      	ldr	r1, [pc, #204]	; (d4c0 <cmd_send+0x100>)
    d3f2:	4620      	mov	r0, r4
    d3f4:	f017 f9ce 	bl	24794 <strncmp>
	if (strncmp(at_buf, AT_CMD_SLMVER_U, size_slmver) == 0 ||
    d3f8:	2800      	cmp	r0, #0
    d3fa:	d0f3      	beq.n	d3e4 <cmd_send+0x24>
	err = slm_at_tcpip_parse(at_buf, at_buf_len);
    d3fc:	7829      	ldrb	r1, [r5, #0]
    d3fe:	4620      	mov	r0, r4
    d400:	f001 f852 	bl	e4a8 <slm_at_tcpip_parse>
	if (err == 0) {
    d404:	b948      	cbnz	r0, d41a <cmd_send+0x5a>
		write_uart_string(OK_STR, sizeof(OK_STR));
    d406:	2105      	movs	r1, #5
    d408:	482e      	ldr	r0, [pc, #184]	; (d4c4 <cmd_send+0x104>)
		chars = sprintf(str, "+CMS: %d\r\n", err);
		write_uart_string(str, ++chars);
		break;
	case AT_CMD_ERROR_CME:
		chars = sprintf(str, "+CME: %d\r\n", err);
		write_uart_string(str, ++chars);
    d40a:	f7ff ffc9 	bl	d3a0 <write_uart_string>
	default:
		break;
	}

done:
	uart_irq_rx_enable(uart_dev);
    d40e:	4b2e      	ldr	r3, [pc, #184]	; (d4c8 <cmd_send+0x108>)
    d410:	6818      	ldr	r0, [r3, #0]
    d412:	f016 f8d9 	bl	235c8 <uart_irq_rx_enable>
}
    d416:	b007      	add	sp, #28
    d418:	bd30      	pop	{r4, r5, pc}
	} else if (err != -ENOTSUP) {
    d41a:	3023      	adds	r0, #35	; 0x23
    d41c:	d002      	beq.n	d424 <cmd_send+0x64>
		write_uart_string(ERROR_STR, sizeof(ERROR_STR));
    d41e:	2108      	movs	r1, #8
    d420:	482a      	ldr	r0, [pc, #168]	; (d4cc <cmd_send+0x10c>)
    d422:	e7f2      	b.n	d40a <cmd_send+0x4a>
	err = slm_at_gps_parse(at_buf, at_buf_len);
    d424:	7829      	ldrb	r1, [r5, #0]
    d426:	4620      	mov	r0, r4
    d428:	f001 fdda 	bl	efe0 <slm_at_gps_parse>
	if (err == 0) {
    d42c:	2800      	cmp	r0, #0
    d42e:	d0ea      	beq.n	d406 <cmd_send+0x46>
	} else if (err != -ENOTSUP) {
    d430:	3023      	adds	r0, #35	; 0x23
    d432:	d1f4      	bne.n	d41e <cmd_send+0x5e>
	err = at_cmd_write(at_buf, buf, AT_MAX_CMD_LEN, &state);
    d434:	4926      	ldr	r1, [pc, #152]	; (d4d0 <cmd_send+0x110>)
    d436:	f10d 0307 	add.w	r3, sp, #7
    d43a:	f640 228c 	movw	r2, #2700	; 0xa8c
    d43e:	4620      	mov	r0, r4
    d440:	f005 fc86 	bl	12d50 <at_cmd_write>
	if (err < 0) {
    d444:	1e01      	subs	r1, r0, #0
    d446:	da11      	bge.n	d46c <cmd_send+0xac>
		LOG_ERR("Could not send AT command to modem: %d", err);
    d448:	2301      	movs	r3, #1
    d44a:	f04f 0200 	mov.w	r2, #0
    d44e:	4821      	ldr	r0, [pc, #132]	; (d4d4 <cmd_send+0x114>)
    d450:	f363 0207 	bfi	r2, r3, #0, #8
    d454:	4b20      	ldr	r3, [pc, #128]	; (d4d8 <cmd_send+0x118>)
    d456:	1a1b      	subs	r3, r3, r0
    d458:	08db      	lsrs	r3, r3, #3
    d45a:	f363 128f 	bfi	r2, r3, #6, #10
    d45e:	481f      	ldr	r0, [pc, #124]	; (d4dc <cmd_send+0x11c>)
    d460:	f016 fc84 	bl	23d6c <log_1>
		state = AT_CMD_ERROR;
    d464:	2301      	movs	r3, #1
    d466:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (state) {
    d46a:	e7d8      	b.n	d41e <cmd_send+0x5e>
    d46c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d470:	2b03      	cmp	r3, #3
    d472:	d8cc      	bhi.n	d40e <cmd_send+0x4e>
    d474:	a201      	add	r2, pc, #4	; (adr r2, d47c <cmd_send+0xbc>)
    d476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d47a:	bf00      	nop
    d47c:	0000d48d 	.word	0x0000d48d
    d480:	0000d41f 	.word	0x0000d41f
    d484:	0000d499 	.word	0x0000d499
    d488:	0000d4a9 	.word	0x0000d4a9
		write_uart_string(buf, strlen(buf));
    d48c:	4810      	ldr	r0, [pc, #64]	; (d4d0 <cmd_send+0x110>)
    d48e:	f017 f96e 	bl	2476e <strlen>
    d492:	4601      	mov	r1, r0
    d494:	480e      	ldr	r0, [pc, #56]	; (d4d0 <cmd_send+0x110>)
    d496:	e7a7      	b.n	d3e8 <cmd_send+0x28>
		chars = sprintf(str, "+CMS: %d\r\n", err);
    d498:	460a      	mov	r2, r1
    d49a:	4911      	ldr	r1, [pc, #68]	; (d4e0 <cmd_send+0x120>)
		chars = sprintf(str, "+CME: %d\r\n", err);
    d49c:	a802      	add	r0, sp, #8
    d49e:	f004 f8b5 	bl	1160c <sprintf>
		write_uart_string(str, ++chars);
    d4a2:	1c41      	adds	r1, r0, #1
    d4a4:	a802      	add	r0, sp, #8
    d4a6:	e7b0      	b.n	d40a <cmd_send+0x4a>
		chars = sprintf(str, "+CME: %d\r\n", err);
    d4a8:	460a      	mov	r2, r1
    d4aa:	490e      	ldr	r1, [pc, #56]	; (d4e4 <cmd_send+0x124>)
    d4ac:	e7f6      	b.n	d49c <cmd_send+0xdc>
    d4ae:	bf00      	nop
    d4b0:	200200e8 	.word	0x200200e8
    d4b4:	20025e22 	.word	0x20025e22
    d4b8:	000279e9 	.word	0x000279e9
    d4bc:	000279f4 	.word	0x000279f4
    d4c0:	00027a09 	.word	0x00027a09
    d4c4:	00027a04 	.word	0x00027a04
    d4c8:	200200fc 	.word	0x200200fc
    d4cc:	00027a14 	.word	0x00027a14
    d4d0:	200268ae 	.word	0x200268ae
    d4d4:	000264bc 	.word	0x000264bc
    d4d8:	000264cc 	.word	0x000264cc
    d4dc:	00027a1c 	.word	0x00027a1c
    d4e0:	00027a43 	.word	0x00027a43
    d4e4:	00027a4e 	.word	0x00027a4e

0000d4e8 <isr>:
	at_buf_len = cmd_len;
	cmd_len = 0;
}

static void isr(struct device *dev)
{
    d4e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4ec:	4607      	mov	r7, r0
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
    d4ee:	6843      	ldr	r3, [r0, #4]
    d4f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    d4f2:	b103      	cbz	r3, d4f6 <isr+0xe>
		return api->irq_update(dev);
    d4f4:	4798      	blx	r3
	if (api->irq_rx_ready) {
    d4f6:	687b      	ldr	r3, [r7, #4]
    d4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d4fa:	b19b      	cbz	r3, d524 <isr+0x3c>
		return api->irq_rx_ready(dev);
    d4fc:	4638      	mov	r0, r7
    d4fe:	4798      	blx	r3
	u8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
    d500:	b180      	cbz	r0, d524 <isr+0x3c>
    d502:	4d4f      	ldr	r5, [pc, #316]	; (d640 <isr+0x158>)
		LOG_ERR("Invalid termination mode: %d", term_mode);
    d504:	4b4f      	ldr	r3, [pc, #316]	; (d644 <isr+0x15c>)
	cmd_len += 1;
    d506:	4e50      	ldr	r6, [pc, #320]	; (d648 <isr+0x160>)
		LOG_ERR("Invalid termination mode: %d", term_mode);
    d508:	1aed      	subs	r5, r5, r3
	if (inside_quotes) {
    d50a:	f8df b168 	ldr.w	fp, [pc, #360]	; d674 <isr+0x18c>
		LOG_ERR("Invalid termination mode: %d", term_mode);
    d50e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
	if (api->fifo_read) {
    d512:	687b      	ldr	r3, [r7, #4]
    d514:	699b      	ldr	r3, [r3, #24]
    d516:	b12b      	cbz	r3, d524 <isr+0x3c>
		return api->fifo_read(dev, rx_data, size);
    d518:	2201      	movs	r2, #1
    d51a:	f10d 0107 	add.w	r1, sp, #7
    d51e:	4638      	mov	r0, r7
    d520:	4798      	blx	r3
		return;
	}

	while (uart_fifo_read(dev, &character, 1)) {
    d522:	b910      	cbnz	r0, d52a <isr+0x42>
		uart_rx_handler(character);
	}
}
    d524:	b003      	add	sp, #12
    d526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	cmd_len += 1;
    d52a:	6832      	ldr	r2, [r6, #0]
		uart_rx_handler(character);
    d52c:	f89d 1007 	ldrb.w	r1, [sp, #7]
	cmd_len += 1;
    d530:	1c54      	adds	r4, r2, #1
	switch (character) {
    d532:	2922      	cmp	r1, #34	; 0x22
	cmd_len += 1;
    d534:	6034      	str	r4, [r6, #0]
	switch (character) {
    d536:	d019      	beq.n	d56c <isr+0x84>
    d538:	297f      	cmp	r1, #127	; 0x7f
    d53a:	d001      	beq.n	d540 <isr+0x58>
    d53c:	2908      	cmp	r1, #8
    d53e:	d11b      	bne.n	d578 <isr+0x90>
		pos = pos ? pos - 1 : 0;
    d540:	b102      	cbz	r2, d544 <isr+0x5c>
    d542:	3a01      	subs	r2, #1
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    d544:	2c02      	cmp	r4, #2
    d546:	bf38      	it	cc
    d548:	2402      	movcc	r4, #2
		at_buf[pos] = 0;
    d54a:	2000      	movs	r0, #0
    d54c:	4b3f      	ldr	r3, [pc, #252]	; (d64c <isr+0x164>)
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    d54e:	3c02      	subs	r4, #2
		at_buf[pos] = 0;
    d550:	5498      	strb	r0, [r3, r2]
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    d552:	6034      	str	r4, [r6, #0]
	if (inside_quotes) {
    d554:	f89b 3000 	ldrb.w	r3, [fp]
    d558:	2b00      	cmp	r3, #0
    d55a:	d1da      	bne.n	d512 <isr+0x2a>
	switch (term_mode) {
    d55c:	4b3c      	ldr	r3, [pc, #240]	; (d650 <isr+0x168>)
    d55e:	781b      	ldrb	r3, [r3, #0]
    d560:	2b03      	cmp	r3, #3
    d562:	d85e      	bhi.n	d622 <isr+0x13a>
    d564:	e8df f003 	tbb	[pc, r3]
    d568:	554d2f2f 	.word	0x554d2f2f
		inside_quotes = !inside_quotes;
    d56c:	f89b 3000 	ldrb.w	r3, [fp]
    d570:	f083 0301 	eor.w	r3, r3, #1
    d574:	f88b 3000 	strb.w	r3, [fp]
		if (cmd_len > AT_MAX_CMD_LEN) {
    d578:	f640 238c 	movw	r3, #2700	; 0xa8c
    d57c:	429c      	cmp	r4, r3
    d57e:	d90f      	bls.n	d5a0 <isr+0xb8>
			LOG_ERR("Buffer overflow, dropping '%c'\n", character);
    d580:	f028 023f 	bic.w	r2, r8, #63	; 0x3f
    d584:	f042 0201 	orr.w	r2, r2, #1
    d588:	f362 0807 	bfi	r8, r2, #0, #8
    d58c:	f365 188f 	bfi	r8, r5, #6, #10
    d590:	4642      	mov	r2, r8
    d592:	4830      	ldr	r0, [pc, #192]	; (d654 <isr+0x16c>)
    d594:	f016 fbea 	bl	23d6c <log_1>
			cmd_len = AT_MAX_CMD_LEN;
    d598:	f640 238c 	movw	r3, #2700	; 0xa8c
	cmd_len = 0;
    d59c:	6033      	str	r3, [r6, #0]
    d59e:	e7b8      	b.n	d512 <isr+0x2a>
		} else if (cmd_len < 1) {
    d5a0:	b974      	cbnz	r4, d5c0 <isr+0xd8>
			LOG_ERR("Invalid AT command length: %d", cmd_len);
    d5a2:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    d5a6:	f043 0301 	orr.w	r3, r3, #1
    d5aa:	f363 0907 	bfi	r9, r3, #0, #8
    d5ae:	f365 198f 	bfi	r9, r5, #6, #10
    d5b2:	464a      	mov	r2, r9
    d5b4:	4621      	mov	r1, r4
    d5b6:	4828      	ldr	r0, [pc, #160]	; (d658 <isr+0x170>)
    d5b8:	f016 fbd8 	bl	23d6c <log_1>
			cmd_len = 0;
    d5bc:	6034      	str	r4, [r6, #0]
			return;
    d5be:	e7a8      	b.n	d512 <isr+0x2a>
		at_buf[pos] = character;
    d5c0:	4b22      	ldr	r3, [pc, #136]	; (d64c <isr+0x164>)
    d5c2:	5499      	strb	r1, [r3, r2]
		break;
    d5c4:	e7c6      	b.n	d554 <isr+0x6c>
		if (character == termination[term_mode]) {
    d5c6:	4a25      	ldr	r2, [pc, #148]	; (d65c <isr+0x174>)
    d5c8:	5cd3      	ldrb	r3, [r2, r3]
    d5ca:	428b      	cmp	r3, r1
		if ((at_buf[pos - 1]) &&
    d5cc:	d1a1      	bne.n	d512 <isr+0x2a>
	uart_irq_rx_disable(uart_dev);
    d5ce:	4b24      	ldr	r3, [pc, #144]	; (d660 <isr+0x178>)
    d5d0:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
    d5d2:	6843      	ldr	r3, [r0, #4]
    d5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d5d6:	b103      	cbz	r3, d5da <isr+0xf2>
		api->irq_rx_disable(dev);
    d5d8:	4798      	blx	r3
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d5da:	4922      	ldr	r1, [pc, #136]	; (d664 <isr+0x17c>)
    d5dc:	e8d1 3fef 	ldaex	r3, [r1]
    d5e0:	f043 0201 	orr.w	r2, r3, #1
    d5e4:	e8c1 2fe0 	stlex	r0, r2, [r1]
    d5e8:	2800      	cmp	r0, #0
    d5ea:	d1f7      	bne.n	d5dc <isr+0xf4>
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    d5ec:	07db      	lsls	r3, r3, #31
    d5ee:	d403      	bmi.n	d5f8 <isr+0x110>
		k_queue_append(&work_q->queue, work);
    d5f0:	3908      	subs	r1, #8
    d5f2:	481d      	ldr	r0, [pc, #116]	; (d668 <isr+0x180>)
    d5f4:	f018 fa97 	bl	25b26 <k_queue_append>
	at_buf_len = cmd_len;
    d5f8:	4b1c      	ldr	r3, [pc, #112]	; (d66c <isr+0x184>)
    d5fa:	6832      	ldr	r2, [r6, #0]
    d5fc:	601a      	str	r2, [r3, #0]
	cmd_len = 0;
    d5fe:	2300      	movs	r3, #0
    d600:	e7cc      	b.n	d59c <isr+0xb4>
		if ((at_buf[pos - 1]) &&
    d602:	4b12      	ldr	r3, [pc, #72]	; (d64c <isr+0x164>)
    d604:	441a      	add	r2, r3
    d606:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    d60a:	2b00      	cmp	r3, #0
    d60c:	d081      	beq.n	d512 <isr+0x2a>
    d60e:	290a      	cmp	r1, #10
    d610:	e7dc      	b.n	d5cc <isr+0xe4>
		if ((at_buf[pos - 1] == '\r') && (character == '\n')) {
    d612:	4b0e      	ldr	r3, [pc, #56]	; (d64c <isr+0x164>)
    d614:	441a      	add	r2, r3
    d616:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    d61a:	2b0d      	cmp	r3, #13
    d61c:	f47f af79 	bne.w	d512 <isr+0x2a>
    d620:	e7f5      	b.n	d60e <isr+0x126>
		LOG_ERR("Invalid termination mode: %d", term_mode);
    d622:	f02a 023f 	bic.w	r2, sl, #63	; 0x3f
    d626:	f042 0201 	orr.w	r2, r2, #1
    d62a:	f362 0a07 	bfi	sl, r2, #0, #8
    d62e:	f365 1a8f 	bfi	sl, r5, #6, #10
    d632:	4652      	mov	r2, sl
    d634:	4619      	mov	r1, r3
    d636:	480e      	ldr	r0, [pc, #56]	; (d670 <isr+0x188>)
    d638:	f016 fb98 	bl	23d6c <log_1>
    d63c:	e769      	b.n	d512 <isr+0x2a>
    d63e:	bf00      	nop
    d640:	000264cc 	.word	0x000264cc
    d644:	000264bc 	.word	0x000264bc
    d648:	200200ec 	.word	0x200200ec
    d64c:	20025e22 	.word	0x20025e22
    d650:	2002733b 	.word	0x2002733b
    d654:	00027a59 	.word	0x00027a59
    d658:	00027a79 	.word	0x00027a79
    d65c:	00027b92 	.word	0x00027b92
    d660:	200200fc 	.word	0x200200fc
    d664:	200200f8 	.word	0x200200f8
    d668:	20025d3c 	.word	0x20025d3c
    d66c:	200200e8 	.word	0x200200e8
    d670:	00027a97 	.word	0x00027a97
    d674:	2002733a 	.word	0x2002733a

0000d678 <slm_at_host_init>:
{
	write_uart_string(str, strlen(str));
}

int slm_at_host_init(void)
{
    d678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	enum select_uart uart_id = CONFIG_SLM_CONNECT_UART;
	enum term_modes mode = CONFIG_SLM_AT_HOST_TERMINATION;

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
    d67a:	2203      	movs	r2, #3
    d67c:	4b49      	ldr	r3, [pc, #292]	; (d7a4 <slm_at_host_init+0x12c>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
    d67e:	494a      	ldr	r1, [pc, #296]	; (d7a8 <slm_at_host_init+0x130>)
    d680:	2000      	movs	r0, #0
		term_mode = mode;
    d682:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
    d684:	f004 fece 	bl	12424 <at_notif_register_handler>
	if (err != 0) {
    d688:	4c48      	ldr	r4, [pc, #288]	; (d7ac <slm_at_host_init+0x134>)
    d68a:	4b49      	ldr	r3, [pc, #292]	; (d7b0 <slm_at_host_init+0x138>)
    d68c:	4605      	mov	r5, r0
    d68e:	1ae4      	subs	r4, r4, r3
    d690:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    d694:	b168      	cbz	r0, d6b2 <slm_at_host_init+0x3a>
		LOG_ERR("Can't register handler err=%d", err);
    d696:	f04f 0200 	mov.w	r2, #0
    d69a:	2301      	movs	r3, #1
    d69c:	f363 0207 	bfi	r2, r3, #0, #8
    d6a0:	4601      	mov	r1, r0
    d6a2:	f364 128f 	bfi	r2, r4, #6, #10
    d6a6:	4843      	ldr	r0, [pc, #268]	; (d7b4 <slm_at_host_init+0x13c>)
    d6a8:	f016 fb60 	bl	23d6c <log_1>
	}
#endif

	LOG_DBG("at_host init done");
	return err;
}
    d6ac:	4628      	mov	r0, r5
    d6ae:	b003      	add	sp, #12
    d6b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    d6b2:	4841      	ldr	r0, [pc, #260]	; (d7b8 <slm_at_host_init+0x140>)
    d6b4:	f014 fa56 	bl	21b64 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
    d6b8:	4d40      	ldr	r5, [pc, #256]	; (d7bc <slm_at_host_init+0x144>)
    d6ba:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
    d6bc:	b1e8      	cbz	r0, d6fa <slm_at_host_init+0x82>
			LOG_ERR("UART check failed: %d. "
    d6be:	4f40      	ldr	r7, [pc, #256]	; (d7c0 <slm_at_host_init+0x148>)
		err = uart_err_check(uart_dev);
    d6c0:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
    d6c2:	6843      	ldr	r3, [r0, #4]
    d6c4:	689b      	ldr	r3, [r3, #8]
    d6c6:	2b00      	cmp	r3, #0
    d6c8:	d048      	beq.n	d75c <slm_at_host_init+0xe4>
		return api->err_check(dev);
    d6ca:	4798      	blx	r3
		if (err) {
    d6cc:	4601      	mov	r1, r0
    d6ce:	2800      	cmp	r0, #0
    d6d0:	d044      	beq.n	d75c <slm_at_host_init+0xe4>
			LOG_ERR("UART check failed: %d. "
    d6d2:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
    d6d6:	f043 0301 	orr.w	r3, r3, #1
    d6da:	f363 0607 	bfi	r6, r3, #0, #8
    d6de:	f364 168f 	bfi	r6, r4, #6, #10
    d6e2:	4632      	mov	r2, r6
    d6e4:	4638      	mov	r0, r7
    d6e6:	f016 fb41 	bl	23d6c <log_1>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
    d6ea:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
    d6ec:	6843      	ldr	r3, [r0, #4]
    d6ee:	699b      	ldr	r3, [r3, #24]
    d6f0:	b9eb      	cbnz	r3, d72e <slm_at_host_init+0xb6>
	if (z_syscall_trap()) {
		return (s32_t) arch_syscall_invoke1(*(uintptr_t *)&ms, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(ms);
    d6f2:	200a      	movs	r0, #10
    d6f4:	f015 f8f2 	bl	228dc <z_impl_k_sleep>
    d6f8:	e7e2      	b.n	d6c0 <slm_at_host_init+0x48>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
    d6fa:	2301      	movs	r3, #1
    d6fc:	f04f 0200 	mov.w	r2, #0
    d700:	f363 0207 	bfi	r2, r3, #0, #8
    d704:	f364 128f 	bfi	r2, r4, #6, #10
    d708:	492b      	ldr	r1, [pc, #172]	; (d7b8 <slm_at_host_init+0x140>)
    d70a:	482e      	ldr	r0, [pc, #184]	; (d7c4 <slm_at_host_init+0x14c>)
    d70c:	f016 fb2e 	bl	23d6c <log_1>
		LOG_ERR("UART can not be initialized: %d", err);
    d710:	f04f 0200 	mov.w	r2, #0
    d714:	2301      	movs	r3, #1
    d716:	f06f 0115 	mvn.w	r1, #21
    d71a:	f363 0207 	bfi	r2, r3, #0, #8
    d71e:	482a      	ldr	r0, [pc, #168]	; (d7c8 <slm_at_host_init+0x150>)
    d720:	f364 128f 	bfi	r2, r4, #6, #10
		LOG_ERR("GPS could not be initialized: %d", err);
    d724:	f016 fb22 	bl	23d6c <log_1>
		return -EFAULT;
    d728:	f06f 050d 	mvn.w	r5, #13
    d72c:	e7be      	b.n	d6ac <slm_at_host_init+0x34>
		return api->fifo_read(dev, rx_data, size);
    d72e:	2201      	movs	r2, #1
    d730:	f10d 0107 	add.w	r1, sp, #7
    d734:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
    d736:	2800      	cmp	r0, #0
    d738:	d1d7      	bne.n	d6ea <slm_at_host_init+0x72>
    d73a:	e7da      	b.n	d6f2 <slm_at_host_init+0x7a>
	err = slm_at_gps_init(slm_at_callback);
    d73c:	4823      	ldr	r0, [pc, #140]	; (d7cc <slm_at_host_init+0x154>)
    d73e:	f001 fc6f 	bl	f020 <slm_at_gps_init>
	if (err) {
    d742:	4605      	mov	r5, r0
    d744:	2800      	cmp	r0, #0
    d746:	d0b1      	beq.n	d6ac <slm_at_host_init+0x34>
		LOG_ERR("GPS could not be initialized: %d", err);
    d748:	f04f 0200 	mov.w	r2, #0
    d74c:	2301      	movs	r3, #1
    d74e:	f363 0207 	bfi	r2, r3, #0, #8
    d752:	4601      	mov	r1, r0
    d754:	f364 128f 	bfi	r2, r4, #6, #10
    d758:	481d      	ldr	r0, [pc, #116]	; (d7d0 <slm_at_host_init+0x158>)
    d75a:	e7e3      	b.n	d724 <slm_at_host_init+0xac>
	uart_irq_callback_set(uart_dev, isr);
    d75c:	682a      	ldr	r2, [r5, #0]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
    d75e:	6853      	ldr	r3, [r2, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    d760:	b123      	cbz	r3, d76c <slm_at_host_init+0xf4>
    d762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    d764:	b113      	cbz	r3, d76c <slm_at_host_init+0xf4>
		api->irq_callback_set(dev, cb, user_data);
    d766:	491b      	ldr	r1, [pc, #108]	; (d7d4 <slm_at_host_init+0x15c>)
    d768:	4610      	mov	r0, r2
    d76a:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    d76c:	2200      	movs	r2, #0
    d76e:	4b1a      	ldr	r3, [pc, #104]	; (d7d8 <slm_at_host_init+0x160>)
    d770:	491a      	ldr	r1, [pc, #104]	; (d7dc <slm_at_host_init+0x164>)
	uart_irq_rx_enable(uart_dev);
    d772:	6828      	ldr	r0, [r5, #0]
    d774:	e9c3 1201 	strd	r1, r2, [r3, #4]
    d778:	601a      	str	r2, [r3, #0]
    d77a:	f015 ff25 	bl	235c8 <uart_irq_rx_enable>
	write_uart_string(SLM_SYNC_STR, sizeof(SLM_SYNC_STR)-1);
    d77e:	2107      	movs	r1, #7
    d780:	4817      	ldr	r0, [pc, #92]	; (d7e0 <slm_at_host_init+0x168>)
    d782:	f7ff fe0d 	bl	d3a0 <write_uart_string>
	err = slm_at_tcpip_init(slm_at_callback);
    d786:	4811      	ldr	r0, [pc, #68]	; (d7cc <slm_at_host_init+0x154>)
    d788:	f001 f882 	bl	e890 <slm_at_tcpip_init>
	if (err) {
    d78c:	4601      	mov	r1, r0
    d78e:	2800      	cmp	r0, #0
    d790:	d0d4      	beq.n	d73c <slm_at_host_init+0xc4>
		LOG_ERR("TCPIP could not be initialized: %d", err);
    d792:	f04f 0200 	mov.w	r2, #0
    d796:	2301      	movs	r3, #1
    d798:	f363 0207 	bfi	r2, r3, #0, #8
    d79c:	f364 128f 	bfi	r2, r4, #6, #10
    d7a0:	4810      	ldr	r0, [pc, #64]	; (d7e4 <slm_at_host_init+0x16c>)
    d7a2:	e7bf      	b.n	d724 <slm_at_host_init+0xac>
    d7a4:	2002733b 	.word	0x2002733b
    d7a8:	000235e7 	.word	0x000235e7
    d7ac:	000264cc 	.word	0x000264cc
    d7b0:	000264bc 	.word	0x000264bc
    d7b4:	00027ab4 	.word	0x00027ab4
    d7b8:	00027ad2 	.word	0x00027ad2
    d7bc:	200200fc 	.word	0x200200fc
    d7c0:	00027b09 	.word	0x00027b09
    d7c4:	00027ad9 	.word	0x00027ad9
    d7c8:	00027ae9 	.word	0x00027ae9
    d7cc:	000235d3 	.word	0x000235d3
    d7d0:	00027b69 	.word	0x00027b69
    d7d4:	0000d4e9 	.word	0x0000d4e9
    d7d8:	200200f0 	.word	0x200200f0
    d7dc:	0000d3c1 	.word	0x0000d3c1
    d7e0:	00027b3e 	.word	0x00027b3e
    d7e4:	00027b46 	.word	0x00027b46

0000d7e8 <socket>:
static inline int socket(int family, int type, int proto)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->socket);

	return socket_ops->socket(family, type, proto);
    d7e8:	4b01      	ldr	r3, [pc, #4]	; (d7f0 <socket+0x8>)
    d7ea:	681b      	ldr	r3, [r3, #0]
    d7ec:	681b      	ldr	r3, [r3, #0]
    d7ee:	4718      	bx	r3
    d7f0:	20020314 	.word	0x20020314

0000d7f4 <close>:
static inline int close(int sock)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->close);

	return socket_ops->close(sock);
    d7f4:	4b01      	ldr	r3, [pc, #4]	; (d7fc <close+0x8>)
    d7f6:	681b      	ldr	r3, [r3, #0]
    d7f8:	685b      	ldr	r3, [r3, #4]
    d7fa:	4718      	bx	r3
    d7fc:	20020314 	.word	0x20020314

0000d800 <do_socket_close>:
	LOG_DBG("Socket opened");
	return ret;
}

static int do_socket_close(int error)
{
    d800:	b570      	push	{r4, r5, r6, lr}
	int ret = 0;

	if (client.sock > 0) {
    d802:	4c18      	ldr	r4, [pc, #96]	; (d864 <do_socket_close+0x64>)
{
    d804:	4606      	mov	r6, r0
	if (client.sock > 0) {
    d806:	6820      	ldr	r0, [r4, #0]
    d808:	2800      	cmp	r0, #0
    d80a:	dd29      	ble.n	d860 <do_socket_close+0x60>
		ret = close(client.sock);
    d80c:	f7ff fff2 	bl	d7f4 <close>
		if (ret < 0) {
    d810:	1e05      	subs	r5, r0, #0
    d812:	da16      	bge.n	d842 <do_socket_close+0x42>
			LOG_WRN("close() failed: %d", -errno);
    d814:	2302      	movs	r3, #2
    d816:	f04f 0500 	mov.w	r5, #0
    d81a:	4a13      	ldr	r2, [pc, #76]	; (d868 <do_socket_close+0x68>)
    d81c:	f363 0507 	bfi	r5, r3, #0, #8
    d820:	4b12      	ldr	r3, [pc, #72]	; (d86c <do_socket_close+0x6c>)
    d822:	1a9b      	subs	r3, r3, r2
    d824:	08db      	lsrs	r3, r3, #3
    d826:	f363 158f 	bfi	r5, r3, #6, #10
    d82a:	f015 feea 	bl	23602 <z_errno>
    d82e:	6801      	ldr	r1, [r0, #0]
    d830:	462a      	mov	r2, r5
    d832:	4249      	negs	r1, r1
    d834:	480e      	ldr	r0, [pc, #56]	; (d870 <do_socket_close+0x70>)
    d836:	f016 fa99 	bl	23d6c <log_1>
			ret = -errno;
    d83a:	f015 fee2 	bl	23602 <z_errno>
    d83e:	6805      	ldr	r5, [r0, #0]
    d840:	426d      	negs	r5, r5
		}
		client.sock = INVALID_SOCKET;
    d842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d846:	6023      	str	r3, [r4, #0]
		client.ip_proto = IPPROTO_IP;
    d848:	2300      	movs	r3, #0
		client.connected = false;

		sprintf(buf, "#XSOCKET: %d\r\n", error);
    d84a:	4632      	mov	r2, r6
    d84c:	4909      	ldr	r1, [pc, #36]	; (d874 <do_socket_close+0x74>)
    d84e:	480a      	ldr	r0, [pc, #40]	; (d878 <do_socket_close+0x78>)
		client.ip_proto = IPPROTO_IP;
    d850:	80a3      	strh	r3, [r4, #4]
		sprintf(buf, "#XSOCKET: %d\r\n", error);
    d852:	f003 fedb 	bl	1160c <sprintf>
		client.callback(buf);
    d856:	68a3      	ldr	r3, [r4, #8]
    d858:	4807      	ldr	r0, [pc, #28]	; (d878 <do_socket_close+0x78>)
    d85a:	4798      	blx	r3
		LOG_DBG("Socket closed");
	}

	return ret;
}
    d85c:	4628      	mov	r0, r5
    d85e:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
    d860:	2500      	movs	r5, #0
	return ret;
    d862:	e7fb      	b.n	d85c <do_socket_close+0x5c>
    d864:	20020100 	.word	0x20020100
    d868:	000264bc 	.word	0x000264bc
    d86c:	0002652c 	.word	0x0002652c
    d870:	00027b95 	.word	0x00027b95
    d874:	00027ba8 	.word	0x00027ba8
    d878:	2002733c 	.word	0x2002733c

0000d87c <do_socket_open>:
	if (type == SOCK_STREAM) {
    d87c:	2801      	cmp	r0, #1
{
    d87e:	b538      	push	{r3, r4, r5, lr}
    d880:	4601      	mov	r1, r0
    d882:	4c21      	ldr	r4, [pc, #132]	; (d908 <do_socket_open+0x8c>)
	if (type == SOCK_STREAM) {
    d884:	d12d      	bne.n	d8e2 <do_socket_open+0x66>
		client.sock = socket(AF_INET, SOCK_STREAM,
    d886:	2206      	movs	r2, #6
    d888:	f7ff ffae 	bl	d7e8 <socket>
		client.ip_proto = IPPROTO_TCP;
    d88c:	2306      	movs	r3, #6
		client.sock = socket(AF_INET, SOCK_STREAM,
    d88e:	6020      	str	r0, [r4, #0]
		client.ip_proto = IPPROTO_UDP;
    d890:	7123      	strb	r3, [r4, #4]
	if (client.sock < 0) {
    d892:	6822      	ldr	r2, [r4, #0]
    d894:	2a00      	cmp	r2, #0
    d896:	da2d      	bge.n	d8f4 <do_socket_open+0x78>
		LOG_ERR("socket() failed: %d", -errno);
    d898:	2301      	movs	r3, #1
    d89a:	f04f 0500 	mov.w	r5, #0
    d89e:	4a1b      	ldr	r2, [pc, #108]	; (d90c <do_socket_open+0x90>)
    d8a0:	f363 0507 	bfi	r5, r3, #0, #8
    d8a4:	4b1a      	ldr	r3, [pc, #104]	; (d910 <do_socket_open+0x94>)
    d8a6:	1a9b      	subs	r3, r3, r2
    d8a8:	08db      	lsrs	r3, r3, #3
    d8aa:	f363 158f 	bfi	r5, r3, #6, #10
    d8ae:	f015 fea8 	bl	23602 <z_errno>
    d8b2:	6801      	ldr	r1, [r0, #0]
    d8b4:	462a      	mov	r2, r5
    d8b6:	4249      	negs	r1, r1
    d8b8:	4816      	ldr	r0, [pc, #88]	; (d914 <do_socket_open+0x98>)
    d8ba:	f016 fa57 	bl	23d6c <log_1>
		sprintf(buf, "#XSOCKET: %d\r\n", -errno);
    d8be:	f015 fea0 	bl	23602 <z_errno>
    d8c2:	6802      	ldr	r2, [r0, #0]
    d8c4:	4914      	ldr	r1, [pc, #80]	; (d918 <do_socket_open+0x9c>)
    d8c6:	4252      	negs	r2, r2
    d8c8:	4814      	ldr	r0, [pc, #80]	; (d91c <do_socket_open+0xa0>)
    d8ca:	f003 fe9f 	bl	1160c <sprintf>
		client.callback(buf);
    d8ce:	68a3      	ldr	r3, [r4, #8]
    d8d0:	4812      	ldr	r0, [pc, #72]	; (d91c <do_socket_open+0xa0>)
    d8d2:	4798      	blx	r3
		client.ip_proto = IPPROTO_IP;
    d8d4:	2300      	movs	r3, #0
    d8d6:	7123      	strb	r3, [r4, #4]
		ret = -errno;
    d8d8:	f015 fe93 	bl	23602 <z_errno>
    d8dc:	6800      	ldr	r0, [r0, #0]
    d8de:	4240      	negs	r0, r0
}
    d8e0:	bd38      	pop	{r3, r4, r5, pc}
	} else if (type == SOCK_DGRAM) {
    d8e2:	2802      	cmp	r0, #2
    d8e4:	d1d5      	bne.n	d892 <do_socket_open+0x16>
		client.sock = socket(AF_INET, SOCK_DGRAM,
    d8e6:	2211      	movs	r2, #17
    d8e8:	2001      	movs	r0, #1
    d8ea:	f7ff ff7d 	bl	d7e8 <socket>
		client.ip_proto = IPPROTO_UDP;
    d8ee:	2311      	movs	r3, #17
		client.sock = socket(AF_INET, SOCK_DGRAM,
    d8f0:	6020      	str	r0, [r4, #0]
		client.ip_proto = IPPROTO_UDP;
    d8f2:	e7cd      	b.n	d890 <do_socket_open+0x14>
		sprintf(buf, "#XSOCKET: %d, %d\r\n", client.sock,
    d8f4:	7923      	ldrb	r3, [r4, #4]
    d8f6:	490a      	ldr	r1, [pc, #40]	; (d920 <do_socket_open+0xa4>)
    d8f8:	4808      	ldr	r0, [pc, #32]	; (d91c <do_socket_open+0xa0>)
    d8fa:	f003 fe87 	bl	1160c <sprintf>
		client.callback(buf);
    d8fe:	4807      	ldr	r0, [pc, #28]	; (d91c <do_socket_open+0xa0>)
    d900:	68a3      	ldr	r3, [r4, #8]
    d902:	4798      	blx	r3
	int ret = 0;
    d904:	2000      	movs	r0, #0
	return ret;
    d906:	e7eb      	b.n	d8e0 <do_socket_open+0x64>
    d908:	20020100 	.word	0x20020100
    d90c:	000264bc 	.word	0x000264bc
    d910:	0002652c 	.word	0x0002652c
    d914:	00027bb7 	.word	0x00027bb7
    d918:	00027ba8 	.word	0x00027ba8
    d91c:	2002733c 	.word	0x2002733c
    d920:	00027bcb 	.word	0x00027bcb

0000d924 <handle_at_socket>:
 *  AT#XSOCKET=<op>[,<type>]
 *  AT#XSOCKET?
 *  AT#XSOCKET=? TEST command not supported
 */
static int handle_at_socket(const char *at_cmd, size_t param_offset)
{
    d924:	b513      	push	{r0, r1, r4, lr}
	int err = -EINVAL;
	char *at_param = (char *)at_cmd + param_offset;
	u16_t op;

	if (*(at_param) == '=') {
    d926:	5c43      	ldrb	r3, [r0, r1]
	char *at_param = (char *)at_cmd + param_offset;
    d928:	1842      	adds	r2, r0, r1
	if (*(at_param) == '=') {
    d92a:	2b3d      	cmp	r3, #61	; 0x3d
    d92c:	d156      	bne.n	d9dc <handle_at_socket+0xb8>
		at_param++;
		if (*(at_param) == '?') {
    d92e:	7853      	ldrb	r3, [r2, #1]
    d930:	2b3f      	cmp	r3, #63	; 0x3f
    d932:	d068      	beq.n	da06 <handle_at_socket+0xe2>
			return err;
		}
		err = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    d934:	4a35      	ldr	r2, [pc, #212]	; (da0c <handle_at_socket+0xe8>)
    d936:	2100      	movs	r1, #0
    d938:	f017 ff2c 	bl	25794 <at_parser_params_from_str>
		if (err < 0) {
    d93c:	1e04      	subs	r4, r0, #0
    d93e:	db2e      	blt.n	d99e <handle_at_socket+0x7a>
			return err;
		};
		if (at_params_valid_count_get(&m_param_list) < 2) {
    d940:	4832      	ldr	r0, [pc, #200]	; (da0c <handle_at_socket+0xe8>)
    d942:	f018 f82d 	bl	259a0 <at_params_valid_count_get>
    d946:	2801      	cmp	r0, #1
    d948:	d95d      	bls.n	da06 <handle_at_socket+0xe2>
			return -EINVAL;
		}
		err = at_params_short_get(&m_param_list, 1, &op);
    d94a:	aa01      	add	r2, sp, #4
    d94c:	2101      	movs	r1, #1
    d94e:	482f      	ldr	r0, [pc, #188]	; (da0c <handle_at_socket+0xe8>)
    d950:	f017 fff1 	bl	25936 <at_params_short_get>
		if (err < 0) {
    d954:	1e04      	subs	r4, r0, #0
    d956:	db22      	blt.n	d99e <handle_at_socket+0x7a>
			return err;
		};
		if (op == 1) {
    d958:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d95c:	2801      	cmp	r0, #1
    d95e:	d127      	bne.n	d9b0 <handle_at_socket+0x8c>
			u16_t type;

			if (at_params_valid_count_get(&m_param_list) < 3) {
    d960:	482a      	ldr	r0, [pc, #168]	; (da0c <handle_at_socket+0xe8>)
    d962:	f018 f81d 	bl	259a0 <at_params_valid_count_get>
    d966:	2802      	cmp	r0, #2
    d968:	d94d      	bls.n	da06 <handle_at_socket+0xe2>
				return -EINVAL;
			}
			err = at_params_short_get(&m_param_list, 2, &type);
    d96a:	f10d 0206 	add.w	r2, sp, #6
    d96e:	2102      	movs	r1, #2
    d970:	4826      	ldr	r0, [pc, #152]	; (da0c <handle_at_socket+0xe8>)
    d972:	f017 ffe0 	bl	25936 <at_params_short_get>
			if (err < 0) {
    d976:	1e04      	subs	r4, r0, #0
    d978:	db11      	blt.n	d99e <handle_at_socket+0x7a>
				return err;
			};
			if (client.sock > 0) {
    d97a:	4b25      	ldr	r3, [pc, #148]	; (da10 <handle_at_socket+0xec>)
    d97c:	681b      	ldr	r3, [r3, #0]
    d97e:	2b00      	cmp	r3, #0
    d980:	dd10      	ble.n	d9a4 <handle_at_socket+0x80>
				LOG_WRN("Socket is already opened");
    d982:	2302      	movs	r3, #2
    d984:	f04f 0100 	mov.w	r1, #0
    d988:	4a22      	ldr	r2, [pc, #136]	; (da14 <handle_at_socket+0xf0>)
    d98a:	f363 0107 	bfi	r1, r3, #0, #8
    d98e:	4b22      	ldr	r3, [pc, #136]	; (da18 <handle_at_socket+0xf4>)
    d990:	4822      	ldr	r0, [pc, #136]	; (da1c <handle_at_socket+0xf8>)
    d992:	1a9b      	subs	r3, r3, r2
    d994:	08db      	lsrs	r3, r3, #3
    d996:	f363 118f 	bfi	r1, r3, #6, #10
			} else {
				err = do_socket_open(type);
			}
		} else if (op == 0) {
			if (client.sock < 0) {
				LOG_WRN("Socket is not opened yet");
    d99a:	f016 f9da 	bl	23d52 <log_0>
		client.callback(buf);
		err = 0;
	}

	return err;
}
    d99e:	4620      	mov	r0, r4
    d9a0:	b002      	add	sp, #8
    d9a2:	bd10      	pop	{r4, pc}
				err = do_socket_open(type);
    d9a4:	f89d 0006 	ldrb.w	r0, [sp, #6]
    d9a8:	f7ff ff68 	bl	d87c <do_socket_open>
				err = do_socket_close(0);
    d9ac:	4604      	mov	r4, r0
    d9ae:	e7f6      	b.n	d99e <handle_at_socket+0x7a>
		} else if (op == 0) {
    d9b0:	2800      	cmp	r0, #0
    d9b2:	d1f4      	bne.n	d99e <handle_at_socket+0x7a>
			if (client.sock < 0) {
    d9b4:	4b16      	ldr	r3, [pc, #88]	; (da10 <handle_at_socket+0xec>)
    d9b6:	681b      	ldr	r3, [r3, #0]
    d9b8:	2b00      	cmp	r3, #0
    d9ba:	da0c      	bge.n	d9d6 <handle_at_socket+0xb2>
				LOG_WRN("Socket is not opened yet");
    d9bc:	2302      	movs	r3, #2
    d9be:	f04f 0100 	mov.w	r1, #0
    d9c2:	4a14      	ldr	r2, [pc, #80]	; (da14 <handle_at_socket+0xf0>)
    d9c4:	f363 0107 	bfi	r1, r3, #0, #8
    d9c8:	4b13      	ldr	r3, [pc, #76]	; (da18 <handle_at_socket+0xf4>)
    d9ca:	4815      	ldr	r0, [pc, #84]	; (da20 <handle_at_socket+0xfc>)
    d9cc:	1a9b      	subs	r3, r3, r2
    d9ce:	08db      	lsrs	r3, r3, #3
    d9d0:	f363 118f 	bfi	r1, r3, #6, #10
    d9d4:	e7e1      	b.n	d99a <handle_at_socket+0x76>
				err = do_socket_close(0);
    d9d6:	f7ff ff13 	bl	d800 <do_socket_close>
    d9da:	e7e7      	b.n	d9ac <handle_at_socket+0x88>
	} else if (*(at_param) == '?') {
    d9dc:	2b3f      	cmp	r3, #63	; 0x3f
    d9de:	d112      	bne.n	da06 <handle_at_socket+0xe2>
		if (client.sock != INVALID_SOCKET) {
    d9e0:	4c0b      	ldr	r4, [pc, #44]	; (da10 <handle_at_socket+0xec>)
    d9e2:	6822      	ldr	r2, [r4, #0]
    d9e4:	1c53      	adds	r3, r2, #1
    d9e6:	d009      	beq.n	d9fc <handle_at_socket+0xd8>
			sprintf(buf, "#XSOCKET: %d, %d\r\n", client.sock,
    d9e8:	7923      	ldrb	r3, [r4, #4]
    d9ea:	490e      	ldr	r1, [pc, #56]	; (da24 <handle_at_socket+0x100>)
    d9ec:	480e      	ldr	r0, [pc, #56]	; (da28 <handle_at_socket+0x104>)
    d9ee:	f003 fe0d 	bl	1160c <sprintf>
		client.callback(buf);
    d9f2:	68a3      	ldr	r3, [r4, #8]
    d9f4:	480c      	ldr	r0, [pc, #48]	; (da28 <handle_at_socket+0x104>)
    d9f6:	4798      	blx	r3
		err = 0;
    d9f8:	2400      	movs	r4, #0
    d9fa:	e7d0      	b.n	d99e <handle_at_socket+0x7a>
			sprintf(buf, "#XSOCKET: 0\r\n");
    d9fc:	490b      	ldr	r1, [pc, #44]	; (da2c <handle_at_socket+0x108>)
    d9fe:	480a      	ldr	r0, [pc, #40]	; (da28 <handle_at_socket+0x104>)
    da00:	f003 fe04 	bl	1160c <sprintf>
    da04:	e7f5      	b.n	d9f2 <handle_at_socket+0xce>
			return err;
    da06:	f06f 0415 	mvn.w	r4, #21
    da0a:	e7c8      	b.n	d99e <handle_at_socket+0x7a>
    da0c:	200200e0 	.word	0x200200e0
    da10:	20020100 	.word	0x20020100
    da14:	000264bc 	.word	0x000264bc
    da18:	0002652c 	.word	0x0002652c
    da1c:	00027c66 	.word	0x00027c66
    da20:	00027c7f 	.word	0x00027c7f
    da24:	00027bcb 	.word	0x00027bcb
    da28:	2002733c 	.word	0x2002733c
    da2c:	00027c98 	.word	0x00027c98

0000da30 <send.constprop.10>:
			   int flags)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->send);

	return socket_ops->send(sock, buf, len, flags);
    da30:	4b04      	ldr	r3, [pc, #16]	; (da44 <send.constprop.10+0x14>)
static inline ssize_t send(int sock, const void *buf, size_t len,
    da32:	b410      	push	{r4}
	return socket_ops->send(sock, buf, len, flags);
    da34:	681b      	ldr	r3, [r3, #0]
    da36:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    da38:	2300      	movs	r3, #0
    da3a:	46a4      	mov	ip, r4
}
    da3c:	f85d 4b04 	ldr.w	r4, [sp], #4
	return socket_ops->send(sock, buf, len, flags);
    da40:	4760      	bx	ip
    da42:	bf00      	nop
    da44:	20020314 	.word	0x20020314

0000da48 <handle_at_tcp_send>:
 *  AT#XTCPSEND=<data>
 *  AT#XTCPSEND? READ command not supported
 *  AT#XTCPSEND=? TEST command not supported
 */
static int handle_at_tcp_send(const char *at_cmd, size_t param_offset)
{
    da48:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err = -EINVAL;
	char *at_param = (char *)at_cmd + param_offset;
	char data[NET_IPV4_MTU];
	int size = NET_IPV4_MTU;
    da4a:	f44f 7410 	mov.w	r4, #576	; 0x240

	if (!client.connected) {
    da4e:	4d34      	ldr	r5, [pc, #208]	; (db20 <handle_at_tcp_send+0xd8>)
{
    da50:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
	int size = NET_IPV4_MTU;
    da54:	9401      	str	r4, [sp, #4]
	if (!client.connected) {
    da56:	796c      	ldrb	r4, [r5, #5]
	char *at_param = (char *)at_cmd + param_offset;
    da58:	1842      	adds	r2, r0, r1
	if (!client.connected) {
    da5a:	b994      	cbnz	r4, da82 <handle_at_tcp_send+0x3a>
		LOG_ERR("TCP not connected yet");
    da5c:	2301      	movs	r3, #1
    da5e:	f04f 0100 	mov.w	r1, #0
    da62:	4a30      	ldr	r2, [pc, #192]	; (db24 <handle_at_tcp_send+0xdc>)
    da64:	f363 0107 	bfi	r1, r3, #0, #8
    da68:	4b2f      	ldr	r3, [pc, #188]	; (db28 <handle_at_tcp_send+0xe0>)
    da6a:	4830      	ldr	r0, [pc, #192]	; (db2c <handle_at_tcp_send+0xe4>)
    da6c:	1a9b      	subs	r3, r3, r2
    da6e:	08db      	lsrs	r3, r3, #3
    da70:	f363 118f 	bfi	r1, r3, #6, #10
    da74:	f016 f96d 	bl	23d52 <log_0>
	int err = -EINVAL;
    da78:	f06f 0015 	mvn.w	r0, #21
		data[size] = '\0';
		err = do_tcp_send(data);
	}

	return err;
}
    da7c:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
    da80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (*(at_param) == '=') {
    da82:	5c43      	ldrb	r3, [r0, r1]
    da84:	2b3d      	cmp	r3, #61	; 0x3d
    da86:	d1f7      	bne.n	da78 <handle_at_tcp_send+0x30>
		if (*(at_param) == '?') {
    da88:	7853      	ldrb	r3, [r2, #1]
    da8a:	2b3f      	cmp	r3, #63	; 0x3f
    da8c:	d0f4      	beq.n	da78 <handle_at_tcp_send+0x30>
		err = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    da8e:	4a28      	ldr	r2, [pc, #160]	; (db30 <handle_at_tcp_send+0xe8>)
    da90:	2100      	movs	r1, #0
    da92:	f017 fe7f 	bl	25794 <at_parser_params_from_str>
		if (err < 0) {
    da96:	2800      	cmp	r0, #0
    da98:	dbf0      	blt.n	da7c <handle_at_tcp_send+0x34>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    da9a:	4825      	ldr	r0, [pc, #148]	; (db30 <handle_at_tcp_send+0xe8>)
    da9c:	f017 ff80 	bl	259a0 <at_params_valid_count_get>
    daa0:	2801      	cmp	r0, #1
    daa2:	d9e9      	bls.n	da78 <handle_at_tcp_send+0x30>
		err = at_params_string_get(&m_param_list, 1, data, &size);
    daa4:	ae02      	add	r6, sp, #8
    daa6:	ab01      	add	r3, sp, #4
    daa8:	4632      	mov	r2, r6
    daaa:	2101      	movs	r1, #1
    daac:	4820      	ldr	r0, [pc, #128]	; (db30 <handle_at_tcp_send+0xe8>)
    daae:	f017 ff54 	bl	2595a <at_params_string_get>
		if (err < 0) {
    dab2:	2800      	cmp	r0, #0
    dab4:	dbe2      	blt.n	da7c <handle_at_tcp_send+0x34>
		data[size] = '\0';
    dab6:	2400      	movs	r4, #0
    dab8:	9b01      	ldr	r3, [sp, #4]
	u32_t datalen = strlen(data);
    daba:	4630      	mov	r0, r6
		data[size] = '\0';
    dabc:	54f4      	strb	r4, [r6, r3]
	u32_t datalen = strlen(data);
    dabe:	f016 fe56 	bl	2476e <strlen>
    dac2:	4607      	mov	r7, r0
	while (offset < datalen) {
    dac4:	42a7      	cmp	r7, r4
    dac6:	d91f      	bls.n	db08 <handle_at_tcp_send+0xc0>
		ret = send(client.sock, data + offset,
    dac8:	1b3a      	subs	r2, r7, r4
    daca:	1931      	adds	r1, r6, r4
    dacc:	6828      	ldr	r0, [r5, #0]
    dace:	f7ff ffaf 	bl	da30 <send.constprop.10>
		if (ret < 0) {
    dad2:	2800      	cmp	r0, #0
    dad4:	da22      	bge.n	db1c <handle_at_tcp_send+0xd4>
			do_socket_close(-errno);
    dad6:	f015 fd94 	bl	23602 <z_errno>
    dada:	6800      	ldr	r0, [r0, #0]
			LOG_WRN("send() failed: %d", -errno);
    dadc:	f04f 0600 	mov.w	r6, #0
			do_socket_close(-errno);
    dae0:	4240      	negs	r0, r0
    dae2:	f7ff fe8d 	bl	d800 <do_socket_close>
			LOG_WRN("send() failed: %d", -errno);
    dae6:	2302      	movs	r3, #2
    dae8:	4a0e      	ldr	r2, [pc, #56]	; (db24 <handle_at_tcp_send+0xdc>)
    daea:	f363 0607 	bfi	r6, r3, #0, #8
    daee:	4b0e      	ldr	r3, [pc, #56]	; (db28 <handle_at_tcp_send+0xe0>)
    daf0:	1a9b      	subs	r3, r3, r2
    daf2:	08db      	lsrs	r3, r3, #3
    daf4:	f363 168f 	bfi	r6, r3, #6, #10
    daf8:	f015 fd83 	bl	23602 <z_errno>
    dafc:	6801      	ldr	r1, [r0, #0]
    dafe:	4632      	mov	r2, r6
    db00:	4249      	negs	r1, r1
    db02:	480c      	ldr	r0, [pc, #48]	; (db34 <handle_at_tcp_send+0xec>)
    db04:	f016 f932 	bl	23d6c <log_1>
	sprintf(buf, "#XTCPSEND: %d\r\n", offset);
    db08:	4622      	mov	r2, r4
    db0a:	490b      	ldr	r1, [pc, #44]	; (db38 <handle_at_tcp_send+0xf0>)
    db0c:	480b      	ldr	r0, [pc, #44]	; (db3c <handle_at_tcp_send+0xf4>)
    db0e:	f003 fd7d 	bl	1160c <sprintf>
	client.callback(buf);
    db12:	480a      	ldr	r0, [pc, #40]	; (db3c <handle_at_tcp_send+0xf4>)
    db14:	68ab      	ldr	r3, [r5, #8]
    db16:	4798      	blx	r3
		err = do_tcp_send(data);
    db18:	2000      	movs	r0, #0
    db1a:	e7af      	b.n	da7c <handle_at_tcp_send+0x34>
		offset += ret;
    db1c:	4404      	add	r4, r0
    db1e:	e7d1      	b.n	dac4 <handle_at_tcp_send+0x7c>
    db20:	20020100 	.word	0x20020100
    db24:	000264bc 	.word	0x000264bc
    db28:	0002652c 	.word	0x0002652c
    db2c:	00027ce8 	.word	0x00027ce8
    db30:	200200e0 	.word	0x200200e0
    db34:	00027cfe 	.word	0x00027cfe
    db38:	00027d10 	.word	0x00027d10
    db3c:	2002733c 	.word	0x2002733c

0000db40 <parse_host_by_name>:
{
    db40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db44:	4614      	mov	r4, r2
    db46:	4680      	mov	r8, r0
	struct addrinfo hints = {
    db48:	2501      	movs	r5, #1
{
    db4a:	b08e      	sub	sp, #56	; 0x38
			      struct addrinfo **res)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);

	return socket_ops->getaddrinfo(node, service, hints, res);
    db4c:	4f24      	ldr	r7, [pc, #144]	; (dbe0 <parse_host_by_name+0xa0>)
	struct addrinfo hints = {
    db4e:	2220      	movs	r2, #32
{
    db50:	460e      	mov	r6, r1
	struct addrinfo hints = {
    db52:	a806      	add	r0, sp, #24
    db54:	2100      	movs	r1, #0
    db56:	f016 fe66 	bl	24826 <memset>
    db5a:	683b      	ldr	r3, [r7, #0]
    db5c:	e9cd 5407 	strd	r5, r4, [sp, #28]
    db60:	aa06      	add	r2, sp, #24
    db62:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    db64:	2100      	movs	r1, #0
    db66:	ab01      	add	r3, sp, #4
    db68:	4640      	mov	r0, r8
    db6a:	47a0      	blx	r4
	if (err) {
    db6c:	4604      	mov	r4, r0
    db6e:	b188      	cbz	r0, db94 <parse_host_by_name+0x54>
		LOG_ERR("ERROR: getaddrinfo failed %d", err);
    db70:	f04f 0200 	mov.w	r2, #0
    db74:	491b      	ldr	r1, [pc, #108]	; (dbe4 <parse_host_by_name+0xa4>)
    db76:	4b1c      	ldr	r3, [pc, #112]	; (dbe8 <parse_host_by_name+0xa8>)
    db78:	f365 0207 	bfi	r2, r5, #0, #8
    db7c:	1a5b      	subs	r3, r3, r1
    db7e:	08db      	lsrs	r3, r3, #3
    db80:	4601      	mov	r1, r0
    db82:	f363 128f 	bfi	r2, r3, #6, #10
    db86:	4819      	ldr	r0, [pc, #100]	; (dbec <parse_host_by_name+0xac>)
    db88:	f016 f8f0 	bl	23d6c <log_1>
}
    db8c:	4620      	mov	r0, r4
    db8e:	b00e      	add	sp, #56	; 0x38
    db90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (result == NULL) {
    db94:	9b01      	ldr	r3, [sp, #4]
    db96:	b983      	cbnz	r3, dbba <parse_host_by_name+0x7a>
		LOG_ERR("ERROR: Address not found\n");
    db98:	2301      	movs	r3, #1
    db9a:	f04f 0100 	mov.w	r1, #0
    db9e:	4a11      	ldr	r2, [pc, #68]	; (dbe4 <parse_host_by_name+0xa4>)
    dba0:	f363 0107 	bfi	r1, r3, #0, #8
    dba4:	4b10      	ldr	r3, [pc, #64]	; (dbe8 <parse_host_by_name+0xa8>)
    dba6:	4812      	ldr	r0, [pc, #72]	; (dbf0 <parse_host_by_name+0xb0>)
    dba8:	1a9b      	subs	r3, r3, r2
    dbaa:	08db      	lsrs	r3, r3, #3
    dbac:	f363 118f 	bfi	r1, r3, #6, #10
    dbb0:	f016 f8cf 	bl	23d52 <log_0>
		return -ENOENT;
    dbb4:	f06f 0401 	mvn.w	r4, #1
    dbb8:	e7e8      	b.n	db8c <parse_host_by_name+0x4c>
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
    dbba:	695b      	ldr	r3, [r3, #20]
	server4->sin_addr.s_addr =
    dbbc:	490d      	ldr	r1, [pc, #52]	; (dbf4 <parse_host_by_name+0xb4>)
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
    dbbe:	685b      	ldr	r3, [r3, #4]
	server4->sin_port = htons(port);
    dbc0:	ba76      	rev16	r6, r6
	server4->sin_addr.s_addr =
    dbc2:	604b      	str	r3, [r1, #4]
	server4->sin_family = AF_INET;
    dbc4:	800d      	strh	r5, [r1, #0]
	server4->sin_port = htons(port);
    dbc6:	804e      	strh	r6, [r1, #2]
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
    dbc8:	2310      	movs	r3, #16
    dbca:	aa02      	add	r2, sp, #8
    dbcc:	3104      	adds	r1, #4
    dbce:	4628      	mov	r0, r5
    dbd0:	f003 fd5e 	bl	11690 <z_impl_net_addr_ntop>
static inline void freeaddrinfo(struct addrinfo *res)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);

	return socket_ops->freeaddrinfo(res);
    dbd4:	683b      	ldr	r3, [r7, #0]
    dbd6:	9801      	ldr	r0, [sp, #4]
    dbd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    dbda:	4798      	blx	r3
    dbdc:	e7d6      	b.n	db8c <parse_host_by_name+0x4c>
    dbde:	bf00      	nop
    dbe0:	20020314 	.word	0x20020314
    dbe4:	000264bc 	.word	0x000264bc
    dbe8:	0002652c 	.word	0x0002652c
    dbec:	00027e24 	.word	0x00027e24
    dbf0:	00027e41 	.word	0x00027e41
    dbf4:	20025e00 	.word	0x20025e00

0000dbf8 <handle_at_bind>:
{
    dbf8:	b510      	push	{r4, lr}
	int size = TCPIP_MAX_URL;
    dbfa:	2480      	movs	r4, #128	; 0x80
	if (*(at_param) == '=') {
    dbfc:	5c43      	ldrb	r3, [r0, r1]
{
    dbfe:	b0a4      	sub	sp, #144	; 0x90
	if (*(at_param) == '=') {
    dc00:	2b3d      	cmp	r3, #61	; 0x3d
	char *at_param = (char *)at_cmd + param_offset;
    dc02:	eb00 0201 	add.w	r2, r0, r1
	int size = TCPIP_MAX_URL;
    dc06:	9401      	str	r4, [sp, #4]
	if (*(at_param) == '=') {
    dc08:	d004      	beq.n	dc14 <handle_at_bind+0x1c>
		return -EINVAL;
    dc0a:	f06f 0415 	mvn.w	r4, #21
}
    dc0e:	4620      	mov	r0, r4
    dc10:	b024      	add	sp, #144	; 0x90
    dc12:	bd10      	pop	{r4, pc}
		if (*(at_param) == '?') {
    dc14:	7853      	ldrb	r3, [r2, #1]
    dc16:	2b3f      	cmp	r3, #63	; 0x3f
    dc18:	d0f7      	beq.n	dc0a <handle_at_bind+0x12>
		err = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    dc1a:	4a42      	ldr	r2, [pc, #264]	; (dd24 <handle_at_bind+0x12c>)
    dc1c:	2100      	movs	r1, #0
    dc1e:	f017 fdb9 	bl	25794 <at_parser_params_from_str>
		if (err < 0) {
    dc22:	1e04      	subs	r4, r0, #0
    dc24:	dbf3      	blt.n	dc0e <handle_at_bind+0x16>
		if (at_params_valid_count_get(&m_param_list) < 3) {
    dc26:	483f      	ldr	r0, [pc, #252]	; (dd24 <handle_at_bind+0x12c>)
    dc28:	f017 feba 	bl	259a0 <at_params_valid_count_get>
    dc2c:	2802      	cmp	r0, #2
    dc2e:	d9ec      	bls.n	dc0a <handle_at_bind+0x12>
		err = at_params_string_get(&m_param_list, 1, ip, &size);
    dc30:	ab01      	add	r3, sp, #4
    dc32:	aa04      	add	r2, sp, #16
    dc34:	2101      	movs	r1, #1
    dc36:	483b      	ldr	r0, [pc, #236]	; (dd24 <handle_at_bind+0x12c>)
    dc38:	f017 fe8f 	bl	2595a <at_params_string_get>
		if (err < 0) {
    dc3c:	1e04      	subs	r4, r0, #0
    dc3e:	dbe6      	blt.n	dc0e <handle_at_bind+0x16>
		ip[size] = '\0';
    dc40:	9b01      	ldr	r3, [sp, #4]
    dc42:	aa24      	add	r2, sp, #144	; 0x90
    dc44:	4413      	add	r3, r2
    dc46:	2200      	movs	r2, #0
		err = at_params_short_get(&m_param_list, 2, &port);
    dc48:	2102      	movs	r1, #2
		ip[size] = '\0';
    dc4a:	f803 2c80 	strb.w	r2, [r3, #-128]
		err = at_params_short_get(&m_param_list, 2, &port);
    dc4e:	4835      	ldr	r0, [pc, #212]	; (dd24 <handle_at_bind+0x12c>)
    dc50:	f10d 0202 	add.w	r2, sp, #2
    dc54:	f017 fe6f 	bl	25936 <at_params_short_get>
		if (err < 0) {
    dc58:	1e04      	subs	r4, r0, #0
    dc5a:	dbd8      	blt.n	dc0e <handle_at_bind+0x16>
	if (!check_for_ipv4(ip, strlen(ip))) {
    dc5c:	a804      	add	r0, sp, #16
		err = do_bind(ip, port);
    dc5e:	f8bd 4002 	ldrh.w	r4, [sp, #2]
	if (!check_for_ipv4(ip, strlen(ip))) {
    dc62:	f016 fd84 	bl	2476e <strlen>
	for (index = 0; index < length; index++) {
    dc66:	b2c1      	uxtb	r1, r0
    dc68:	a804      	add	r0, sp, #16
    dc6a:	f015 fcce 	bl	2360a <check_for_ipv4.part.0>
	if (!check_for_ipv4(ip, strlen(ip))) {
    dc6e:	b970      	cbnz	r0, dc8e <handle_at_bind+0x96>
		LOG_ERR("Not IPv4 address");
    dc70:	2301      	movs	r3, #1
    dc72:	f04f 0100 	mov.w	r1, #0
    dc76:	4a2c      	ldr	r2, [pc, #176]	; (dd28 <handle_at_bind+0x130>)
    dc78:	f363 0107 	bfi	r1, r3, #0, #8
    dc7c:	4b2b      	ldr	r3, [pc, #172]	; (dd2c <handle_at_bind+0x134>)
    dc7e:	482c      	ldr	r0, [pc, #176]	; (dd30 <handle_at_bind+0x138>)
    dc80:	1a9b      	subs	r3, r3, r2
    dc82:	08db      	lsrs	r3, r3, #3
    dc84:	f363 118f 	bfi	r1, r3, #6, #10
    dc88:	f016 f863 	bl	23d52 <log_0>
    dc8c:	e7bd      	b.n	dc0a <handle_at_bind+0x12>
	local.sin_family = AF_INET;
    dc8e:	2001      	movs	r0, #1
	local.sin_port = htons(port);
    dc90:	0223      	lsls	r3, r4, #8
    dc92:	ea43 2314 	orr.w	r3, r3, r4, lsr #8
	local.sin_family = AF_INET;
    dc96:	f8ad 0008 	strh.w	r0, [sp, #8]
	local.sin_port = htons(port);
    dc9a:	f8ad 300a 	strh.w	r3, [sp, #10]
	return z_impl_net_addr_pton(family, src, dst);
    dc9e:	aa03      	add	r2, sp, #12
    dca0:	a904      	add	r1, sp, #16
    dca2:	f016 fec9 	bl	24a38 <z_impl_net_addr_pton>
	if ((family != AF_INET) && (family != AF_INET6)) {
		errno = EAFNOSUPPORT;
		return -1;
	}

	if (net_addr_pton(family, src, dst) == 0) {
    dca6:	4604      	mov	r4, r0
    dca8:	b198      	cbz	r0, dcd2 <handle_at_bind+0xda>
		LOG_ERR("Parse failed: %d", -errno);
    dcaa:	2301      	movs	r3, #1
    dcac:	f04f 0400 	mov.w	r4, #0
    dcb0:	4a1d      	ldr	r2, [pc, #116]	; (dd28 <handle_at_bind+0x130>)
    dcb2:	f363 0407 	bfi	r4, r3, #0, #8
    dcb6:	4b1d      	ldr	r3, [pc, #116]	; (dd2c <handle_at_bind+0x134>)
    dcb8:	1a9b      	subs	r3, r3, r2
    dcba:	08db      	lsrs	r3, r3, #3
    dcbc:	f363 148f 	bfi	r4, r3, #6, #10
    dcc0:	f015 fc9f 	bl	23602 <z_errno>
    dcc4:	6801      	ldr	r1, [r0, #0]
    dcc6:	4622      	mov	r2, r4
    dcc8:	4249      	negs	r1, r1
    dcca:	481a      	ldr	r0, [pc, #104]	; (dd34 <handle_at_bind+0x13c>)
    dccc:	f016 f84e 	bl	23d6c <log_1>
		return -EINVAL;
    dcd0:	e79b      	b.n	dc0a <handle_at_bind+0x12>
	return socket_ops->bind(sock, addr, addrlen);
    dcd2:	2208      	movs	r2, #8
    dcd4:	4b18      	ldr	r3, [pc, #96]	; (dd38 <handle_at_bind+0x140>)
    dcd6:	4819      	ldr	r0, [pc, #100]	; (dd3c <handle_at_bind+0x144>)
    dcd8:	681b      	ldr	r3, [r3, #0]
    dcda:	eb0d 0102 	add.w	r1, sp, r2
    dcde:	68db      	ldr	r3, [r3, #12]
    dce0:	6800      	ldr	r0, [r0, #0]
    dce2:	4798      	blx	r3
	if (ret < 0) {
    dce4:	2800      	cmp	r0, #0
    dce6:	da92      	bge.n	dc0e <handle_at_bind+0x16>
		LOG_ERR("bind() failed: %d", -errno);
    dce8:	2301      	movs	r3, #1
    dcea:	f04f 0400 	mov.w	r4, #0
    dcee:	4a0e      	ldr	r2, [pc, #56]	; (dd28 <handle_at_bind+0x130>)
    dcf0:	f363 0407 	bfi	r4, r3, #0, #8
    dcf4:	4b0d      	ldr	r3, [pc, #52]	; (dd2c <handle_at_bind+0x134>)
    dcf6:	1a9b      	subs	r3, r3, r2
    dcf8:	08db      	lsrs	r3, r3, #3
    dcfa:	f363 148f 	bfi	r4, r3, #6, #10
    dcfe:	f015 fc80 	bl	23602 <z_errno>
    dd02:	6801      	ldr	r1, [r0, #0]
    dd04:	4622      	mov	r2, r4
    dd06:	4249      	negs	r1, r1
    dd08:	480d      	ldr	r0, [pc, #52]	; (dd40 <handle_at_bind+0x148>)
    dd0a:	f016 f82f 	bl	23d6c <log_1>
		do_socket_close(-errno);
    dd0e:	f015 fc78 	bl	23602 <z_errno>
    dd12:	6800      	ldr	r0, [r0, #0]
    dd14:	4240      	negs	r0, r0
    dd16:	f7ff fd73 	bl	d800 <do_socket_close>
		return -errno;
    dd1a:	f015 fc72 	bl	23602 <z_errno>
    dd1e:	6804      	ldr	r4, [r0, #0]
    dd20:	4264      	negs	r4, r4
    dd22:	e774      	b.n	dc0e <handle_at_bind+0x16>
    dd24:	200200e0 	.word	0x200200e0
    dd28:	000264bc 	.word	0x000264bc
    dd2c:	0002652c 	.word	0x0002652c
    dd30:	00027c32 	.word	0x00027c32
    dd34:	00027c43 	.word	0x00027c43
    dd38:	20020314 	.word	0x20020314
    dd3c:	20020100 	.word	0x20020100
    dd40:	00027c54 	.word	0x00027c54

0000dd44 <recv.constprop.17>:
	return socket_ops->recv(sock, buf, max_len, flags);
    dd44:	4b04      	ldr	r3, [pc, #16]	; (dd58 <recv.constprop.17+0x14>)
static inline ssize_t recv(int sock, void *buf, size_t max_len,
    dd46:	b410      	push	{r4}
	return socket_ops->recv(sock, buf, max_len, flags);
    dd48:	681b      	ldr	r3, [r3, #0]
    dd4a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    dd4c:	2300      	movs	r3, #0
    dd4e:	46a4      	mov	ip, r4
}
    dd50:	f85d 4b04 	ldr.w	r4, [sp], #4
	return socket_ops->recv(sock, buf, max_len, flags);
    dd54:	4760      	bx	ip
    dd56:	bf00      	nop
    dd58:	20020314 	.word	0x20020314

0000dd5c <parse_host_by_ipv4>:
{
    dd5c:	b508      	push	{r3, lr}
	address4->sin_family = AF_INET;
    dd5e:	2301      	movs	r3, #1
    dd60:	4a06      	ldr	r2, [pc, #24]	; (dd7c <parse_host_by_ipv4+0x20>)
	address4->sin_port = htons(port);
    dd62:	ba49      	rev16	r1, r1
	address4->sin_family = AF_INET;
    dd64:	8013      	strh	r3, [r2, #0]
	address4->sin_port = htons(port);
    dd66:	8051      	strh	r1, [r2, #2]
    dd68:	4601      	mov	r1, r0
    dd6a:	3204      	adds	r2, #4
    dd6c:	4618      	mov	r0, r3
    dd6e:	f016 fe63 	bl	24a38 <z_impl_net_addr_pton>
    dd72:	2800      	cmp	r0, #0
}
    dd74:	bf18      	it	ne
    dd76:	f06f 0015 	mvnne.w	r0, #21
    dd7a:	bd08      	pop	{r3, pc}
    dd7c:	20025e00 	.word	0x20025e00

0000dd80 <do_udp_init>:
{
    dd80:	b538      	push	{r3, r4, r5, lr}
    dd82:	4604      	mov	r4, r0
    dd84:	460d      	mov	r5, r1
	if (check_for_ipv4(url, strlen(url))) {
    dd86:	f016 fcf2 	bl	2476e <strlen>
	for (index = 0; index < length; index++) {
    dd8a:	b2c1      	uxtb	r1, r0
    dd8c:	4620      	mov	r0, r4
    dd8e:	f015 fc3c 	bl	2360a <check_for_ipv4.part.0>
	if (check_for_ipv4(url, strlen(url))) {
    dd92:	b1b0      	cbz	r0, ddc2 <do_udp_init+0x42>
		ret = parse_host_by_ipv4(url, port);
    dd94:	4629      	mov	r1, r5
    dd96:	4620      	mov	r0, r4
    dd98:	f7ff ffe0 	bl	dd5c <parse_host_by_ipv4>
		ret = parse_host_by_name(url, port, SOCK_DGRAM);
    dd9c:	4604      	mov	r4, r0
	if (ret) {
    dd9e:	b170      	cbz	r0, ddbe <do_udp_init+0x3e>
		LOG_ERR("Parse failed: %d", ret);
    dda0:	2301      	movs	r3, #1
    dda2:	f04f 0200 	mov.w	r2, #0
    dda6:	490a      	ldr	r1, [pc, #40]	; (ddd0 <do_udp_init+0x50>)
    dda8:	f363 0207 	bfi	r2, r3, #0, #8
    ddac:	4b09      	ldr	r3, [pc, #36]	; (ddd4 <do_udp_init+0x54>)
    ddae:	1a5b      	subs	r3, r3, r1
    ddb0:	08db      	lsrs	r3, r3, #3
    ddb2:	4601      	mov	r1, r0
    ddb4:	f363 128f 	bfi	r2, r3, #6, #10
    ddb8:	4807      	ldr	r0, [pc, #28]	; (ddd8 <do_udp_init+0x58>)
    ddba:	f015 ffd7 	bl	23d6c <log_1>
}
    ddbe:	4620      	mov	r0, r4
    ddc0:	bd38      	pop	{r3, r4, r5, pc}
		ret = parse_host_by_name(url, port, SOCK_DGRAM);
    ddc2:	2202      	movs	r2, #2
    ddc4:	4629      	mov	r1, r5
    ddc6:	4620      	mov	r0, r4
    ddc8:	f7ff feba 	bl	db40 <parse_host_by_name>
    ddcc:	e7e6      	b.n	dd9c <do_udp_init+0x1c>
    ddce:	bf00      	nop
    ddd0:	000264bc 	.word	0x000264bc
    ddd4:	0002652c 	.word	0x0002652c
    ddd8:	00027c43 	.word	0x00027c43

0000dddc <handle_at_udp_sendto>:
 *  AT#XUDPSENDTO=<url>,<port>,<data>
 *  AT#XUDPSENDTO? READ command not supported
 *  AT#XUDPSENDTO=? TEST command not supported
 */
static int handle_at_udp_sendto(const char *at_cmd, size_t param_offset)
{
    dddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char url[TCPIP_MAX_URL];
	u16_t port;
	char data[NET_IPV4_MTU];
	int size;

	if (client.sock < 0) {
    dde0:	4b56      	ldr	r3, [pc, #344]	; (df3c <handle_at_udp_sendto+0x160>)
{
    dde2:	f5ad 7d35 	sub.w	sp, sp, #724	; 0x2d4
	if (client.sock < 0) {
    dde6:	681d      	ldr	r5, [r3, #0]
	char *at_param = (char *)at_cmd + param_offset;
    dde8:	1844      	adds	r4, r0, r1
	if (client.sock < 0) {
    ddea:	2d00      	cmp	r5, #0
    ddec:	461e      	mov	r6, r3
    ddee:	da13      	bge.n	de18 <handle_at_udp_sendto+0x3c>
		LOG_ERR("Socket not opened yet");
    ddf0:	2301      	movs	r3, #1
    ddf2:	f04f 0100 	mov.w	r1, #0
    ddf6:	4a52      	ldr	r2, [pc, #328]	; (df40 <handle_at_udp_sendto+0x164>)
    ddf8:	f363 0107 	bfi	r1, r3, #0, #8
    ddfc:	4b51      	ldr	r3, [pc, #324]	; (df44 <handle_at_udp_sendto+0x168>)
    ddfe:	4852      	ldr	r0, [pc, #328]	; (df48 <handle_at_udp_sendto+0x16c>)
    de00:	1a9b      	subs	r3, r3, r2
    de02:	08db      	lsrs	r3, r3, #3
    de04:	f363 118f 	bfi	r1, r3, #6, #10
		return err;
	} else if (client.ip_proto != IPPROTO_UDP) {
		LOG_ERR("Invalid socket");
    de08:	f015 ffa3 	bl	23d52 <log_0>
	int err = -EINVAL;
    de0c:	f06f 0015 	mvn.w	r0, #21
		data[size] = '\0';
		err = do_udp_sendto(url, port, data);
	}

	return err;
}
    de10:	f50d 7d35 	add.w	sp, sp, #724	; 0x2d4
    de14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (client.ip_proto != IPPROTO_UDP) {
    de18:	791b      	ldrb	r3, [r3, #4]
    de1a:	2b11      	cmp	r3, #17
    de1c:	d00c      	beq.n	de38 <handle_at_udp_sendto+0x5c>
		LOG_ERR("Invalid socket");
    de1e:	2301      	movs	r3, #1
    de20:	f04f 0100 	mov.w	r1, #0
    de24:	4a46      	ldr	r2, [pc, #280]	; (df40 <handle_at_udp_sendto+0x164>)
    de26:	f363 0107 	bfi	r1, r3, #0, #8
    de2a:	4b46      	ldr	r3, [pc, #280]	; (df44 <handle_at_udp_sendto+0x168>)
    de2c:	4847      	ldr	r0, [pc, #284]	; (df4c <handle_at_udp_sendto+0x170>)
    de2e:	1a9b      	subs	r3, r3, r2
    de30:	08db      	lsrs	r3, r3, #3
    de32:	f363 118f 	bfi	r1, r3, #6, #10
    de36:	e7e7      	b.n	de08 <handle_at_udp_sendto+0x2c>
	if (*(at_param) == '=') {
    de38:	5c43      	ldrb	r3, [r0, r1]
    de3a:	2b3d      	cmp	r3, #61	; 0x3d
    de3c:	d1e6      	bne.n	de0c <handle_at_udp_sendto+0x30>
		if (*(at_param) == '?') {
    de3e:	7863      	ldrb	r3, [r4, #1]
    de40:	2b3f      	cmp	r3, #63	; 0x3f
    de42:	d0e3      	beq.n	de0c <handle_at_udp_sendto+0x30>
		err = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    de44:	4a42      	ldr	r2, [pc, #264]	; (df50 <handle_at_udp_sendto+0x174>)
    de46:	2100      	movs	r1, #0
    de48:	f017 fca4 	bl	25794 <at_parser_params_from_str>
		if (err < 0) {
    de4c:	2800      	cmp	r0, #0
    de4e:	dbdf      	blt.n	de10 <handle_at_udp_sendto+0x34>
		if (at_params_valid_count_get(&m_param_list) < 4) {
    de50:	483f      	ldr	r0, [pc, #252]	; (df50 <handle_at_udp_sendto+0x174>)
    de52:	f017 fda5 	bl	259a0 <at_params_valid_count_get>
    de56:	2803      	cmp	r0, #3
    de58:	d9d8      	bls.n	de0c <handle_at_udp_sendto+0x30>
		size = TCPIP_MAX_URL;
    de5a:	2380      	movs	r3, #128	; 0x80
		err = at_params_string_get(&m_param_list, 1, url, &size);
    de5c:	ac04      	add	r4, sp, #16
		size = TCPIP_MAX_URL;
    de5e:	9303      	str	r3, [sp, #12]
		err = at_params_string_get(&m_param_list, 1, url, &size);
    de60:	4622      	mov	r2, r4
    de62:	ab03      	add	r3, sp, #12
    de64:	2101      	movs	r1, #1
    de66:	483a      	ldr	r0, [pc, #232]	; (df50 <handle_at_udp_sendto+0x174>)
    de68:	f017 fd77 	bl	2595a <at_params_string_get>
		if (err < 0) {
    de6c:	2800      	cmp	r0, #0
    de6e:	dbcf      	blt.n	de10 <handle_at_udp_sendto+0x34>
		url[size] = '\0';
    de70:	2700      	movs	r7, #0
    de72:	9b03      	ldr	r3, [sp, #12]
		err = at_params_short_get(&m_param_list, 2, &port);
    de74:	f10d 020a 	add.w	r2, sp, #10
    de78:	2102      	movs	r1, #2
    de7a:	4835      	ldr	r0, [pc, #212]	; (df50 <handle_at_udp_sendto+0x174>)
		url[size] = '\0';
    de7c:	54e7      	strb	r7, [r4, r3]
		err = at_params_short_get(&m_param_list, 2, &port);
    de7e:	f017 fd5a 	bl	25936 <at_params_short_get>
		if (err < 0) {
    de82:	2800      	cmp	r0, #0
    de84:	dbc4      	blt.n	de10 <handle_at_udp_sendto+0x34>
		size = NET_IPV4_MTU;
    de86:	f44f 7310 	mov.w	r3, #576	; 0x240
		err = at_params_string_get(&m_param_list, 3, data, &size);
    de8a:	ad24      	add	r5, sp, #144	; 0x90
		size = NET_IPV4_MTU;
    de8c:	9303      	str	r3, [sp, #12]
		err = at_params_string_get(&m_param_list, 3, data, &size);
    de8e:	462a      	mov	r2, r5
    de90:	ab03      	add	r3, sp, #12
    de92:	2103      	movs	r1, #3
    de94:	482e      	ldr	r0, [pc, #184]	; (df50 <handle_at_udp_sendto+0x174>)
    de96:	f017 fd60 	bl	2595a <at_params_string_get>
		if (err < 0) {
    de9a:	2800      	cmp	r0, #0
    de9c:	dbb8      	blt.n	de10 <handle_at_udp_sendto+0x34>
		data[size] = '\0';
    de9e:	9b03      	ldr	r3, [sp, #12]
	u32_t datalen = strlen(data);
    dea0:	4628      	mov	r0, r5
		data[size] = '\0';
    dea2:	54ef      	strb	r7, [r5, r3]
		err = do_udp_sendto(url, port, data);
    dea4:	f8bd 800a 	ldrh.w	r8, [sp, #10]
	u32_t datalen = strlen(data);
    dea8:	f016 fc61 	bl	2476e <strlen>
	ret = do_udp_init(url, port);
    deac:	4641      	mov	r1, r8
	u32_t datalen = strlen(data);
    deae:	4607      	mov	r7, r0
	ret = do_udp_init(url, port);
    deb0:	4620      	mov	r0, r4
    deb2:	f7ff ff65 	bl	dd80 <do_udp_init>
	if (ret < 0) {
    deb6:	2800      	cmp	r0, #0
    deb8:	dbaa      	blt.n	de10 <handle_at_udp_sendto+0x34>
	u32_t offset = 0;
    deba:	2400      	movs	r4, #0
	return socket_ops->sendto(sock, buf, len, flags, to, tolen);
    debc:	f04f 0908 	mov.w	r9, #8
    dec0:	f8df 809c 	ldr.w	r8, [pc, #156]	; df60 <handle_at_udp_sendto+0x184>
    dec4:	f8df a09c 	ldr.w	sl, [pc, #156]	; df64 <handle_at_udp_sendto+0x188>
	while (offset < datalen) {
    dec8:	42a7      	cmp	r7, r4
    deca:	d809      	bhi.n	dee0 <handle_at_udp_sendto+0x104>
	sprintf(buf, "#XUDPSENDTO: %d\r\n", offset);
    decc:	4622      	mov	r2, r4
    dece:	4921      	ldr	r1, [pc, #132]	; (df54 <handle_at_udp_sendto+0x178>)
    ded0:	4821      	ldr	r0, [pc, #132]	; (df58 <handle_at_udp_sendto+0x17c>)
    ded2:	f003 fb9b 	bl	1160c <sprintf>
	client.callback(buf);
    ded6:	4820      	ldr	r0, [pc, #128]	; (df58 <handle_at_udp_sendto+0x17c>)
    ded8:	68b3      	ldr	r3, [r6, #8]
    deda:	4798      	blx	r3
	return 0;
    dedc:	2000      	movs	r0, #0
    dede:	e797      	b.n	de10 <handle_at_udp_sendto+0x34>
    dee0:	f8d8 3000 	ldr.w	r3, [r8]
    dee4:	e9cd a900 	strd	sl, r9, [sp]
    dee8:	1b3a      	subs	r2, r7, r4
    deea:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
    deee:	1929      	adds	r1, r5, r4
    def0:	2300      	movs	r3, #0
    def2:	6830      	ldr	r0, [r6, #0]
    def4:	47d8      	blx	fp
		if (ret <= 0) {
    def6:	2800      	cmp	r0, #0
    def8:	dc1d      	bgt.n	df36 <handle_at_udp_sendto+0x15a>
			LOG_ERR("sendto() failed: %d", -errno);
    defa:	2301      	movs	r3, #1
    defc:	f04f 0400 	mov.w	r4, #0
    df00:	4a0f      	ldr	r2, [pc, #60]	; (df40 <handle_at_udp_sendto+0x164>)
    df02:	f363 0407 	bfi	r4, r3, #0, #8
    df06:	4b0f      	ldr	r3, [pc, #60]	; (df44 <handle_at_udp_sendto+0x168>)
    df08:	1a9b      	subs	r3, r3, r2
    df0a:	08db      	lsrs	r3, r3, #3
    df0c:	f363 148f 	bfi	r4, r3, #6, #10
    df10:	f015 fb77 	bl	23602 <z_errno>
    df14:	6801      	ldr	r1, [r0, #0]
    df16:	4622      	mov	r2, r4
    df18:	4249      	negs	r1, r1
    df1a:	4810      	ldr	r0, [pc, #64]	; (df5c <handle_at_udp_sendto+0x180>)
    df1c:	f015 ff26 	bl	23d6c <log_1>
			do_socket_close(-errno);
    df20:	f015 fb6f 	bl	23602 <z_errno>
    df24:	6800      	ldr	r0, [r0, #0]
    df26:	4240      	negs	r0, r0
    df28:	f7ff fc6a 	bl	d800 <do_socket_close>
			return -errno;
    df2c:	f015 fb69 	bl	23602 <z_errno>
    df30:	6800      	ldr	r0, [r0, #0]
    df32:	4240      	negs	r0, r0
    df34:	e76c      	b.n	de10 <handle_at_udp_sendto+0x34>
		offset += ret;
    df36:	4404      	add	r4, r0
    df38:	e7c6      	b.n	dec8 <handle_at_udp_sendto+0xec>
    df3a:	bf00      	nop
    df3c:	20020100 	.word	0x20020100
    df40:	000264bc 	.word	0x000264bc
    df44:	0002652c 	.word	0x0002652c
    df48:	00027d51 	.word	0x00027d51
    df4c:	00027d67 	.word	0x00027d67
    df50:	200200e0 	.word	0x200200e0
    df54:	00027d8a 	.word	0x00027d8a
    df58:	2002733c 	.word	0x2002733c
    df5c:	00027d76 	.word	0x00027d76
    df60:	20020314 	.word	0x20020314
    df64:	20025e00 	.word	0x20025e00

0000df68 <handle_at_tcp_conn>:
	int size = TCPIP_MAX_URL;
    df68:	2380      	movs	r3, #128	; 0x80
{
    df6a:	b530      	push	{r4, r5, lr}
    df6c:	b0a3      	sub	sp, #140	; 0x8c
	int size = TCPIP_MAX_URL;
    df6e:	9301      	str	r3, [sp, #4]
	if (client.sock < 0) {
    df70:	4b4f      	ldr	r3, [pc, #316]	; (e0b0 <handle_at_tcp_conn+0x148>)
	char *at_param = (char *)at_cmd + param_offset;
    df72:	1844      	adds	r4, r0, r1
	if (client.sock < 0) {
    df74:	681d      	ldr	r5, [r3, #0]
    df76:	2d00      	cmp	r5, #0
    df78:	461d      	mov	r5, r3
    df7a:	da12      	bge.n	dfa2 <handle_at_tcp_conn+0x3a>
		LOG_ERR("Socket not opened yet");
    df7c:	2301      	movs	r3, #1
    df7e:	f04f 0100 	mov.w	r1, #0
    df82:	4a4c      	ldr	r2, [pc, #304]	; (e0b4 <handle_at_tcp_conn+0x14c>)
    df84:	f363 0107 	bfi	r1, r3, #0, #8
    df88:	4b4b      	ldr	r3, [pc, #300]	; (e0b8 <handle_at_tcp_conn+0x150>)
    df8a:	484c      	ldr	r0, [pc, #304]	; (e0bc <handle_at_tcp_conn+0x154>)
    df8c:	1a9b      	subs	r3, r3, r2
    df8e:	08db      	lsrs	r3, r3, #3
    df90:	f363 118f 	bfi	r1, r3, #6, #10
    df94:	f015 fedd 	bl	23d52 <log_0>
			return err;
    df98:	f06f 0415 	mvn.w	r4, #21
}
    df9c:	4620      	mov	r0, r4
    df9e:	b023      	add	sp, #140	; 0x8c
    dfa0:	bd30      	pop	{r4, r5, pc}
	if (*(at_param) == '=') {
    dfa2:	5c42      	ldrb	r2, [r0, r1]
    dfa4:	2a3d      	cmp	r2, #61	; 0x3d
    dfa6:	d176      	bne.n	e096 <handle_at_tcp_conn+0x12e>
		if (*(at_param) == '?') {
    dfa8:	7863      	ldrb	r3, [r4, #1]
    dfaa:	2b3f      	cmp	r3, #63	; 0x3f
    dfac:	d0f4      	beq.n	df98 <handle_at_tcp_conn+0x30>
		err = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    dfae:	4a44      	ldr	r2, [pc, #272]	; (e0c0 <handle_at_tcp_conn+0x158>)
    dfb0:	2100      	movs	r1, #0
    dfb2:	f017 fbef 	bl	25794 <at_parser_params_from_str>
		if (err < 0) {
    dfb6:	1e04      	subs	r4, r0, #0
    dfb8:	dbf0      	blt.n	df9c <handle_at_tcp_conn+0x34>
		if (at_params_valid_count_get(&m_param_list) < 3) {
    dfba:	4841      	ldr	r0, [pc, #260]	; (e0c0 <handle_at_tcp_conn+0x158>)
    dfbc:	f017 fcf0 	bl	259a0 <at_params_valid_count_get>
    dfc0:	2802      	cmp	r0, #2
    dfc2:	d9e9      	bls.n	df98 <handle_at_tcp_conn+0x30>
		err = at_params_string_get(&m_param_list, 1, url, &size);
    dfc4:	ab01      	add	r3, sp, #4
    dfc6:	aa02      	add	r2, sp, #8
    dfc8:	2101      	movs	r1, #1
    dfca:	483d      	ldr	r0, [pc, #244]	; (e0c0 <handle_at_tcp_conn+0x158>)
    dfcc:	f017 fcc5 	bl	2595a <at_params_string_get>
		if (err < 0) {
    dfd0:	1e04      	subs	r4, r0, #0
    dfd2:	dbe3      	blt.n	df9c <handle_at_tcp_conn+0x34>
		url[size] = '\0';
    dfd4:	9b01      	ldr	r3, [sp, #4]
    dfd6:	aa22      	add	r2, sp, #136	; 0x88
    dfd8:	4413      	add	r3, r2
    dfda:	2200      	movs	r2, #0
		err = at_params_short_get(&m_param_list, 2, &port);
    dfdc:	2102      	movs	r1, #2
		url[size] = '\0';
    dfde:	f803 2c80 	strb.w	r2, [r3, #-128]
		err = at_params_short_get(&m_param_list, 2, &port);
    dfe2:	4837      	ldr	r0, [pc, #220]	; (e0c0 <handle_at_tcp_conn+0x158>)
    dfe4:	f10d 0202 	add.w	r2, sp, #2
    dfe8:	f017 fca5 	bl	25936 <at_params_short_get>
		if (err < 0) {
    dfec:	1e04      	subs	r4, r0, #0
    dfee:	dbd5      	blt.n	df9c <handle_at_tcp_conn+0x34>
	if (check_for_ipv4(url, strlen(url))) {
    dff0:	a802      	add	r0, sp, #8
		err = do_tcp_connect(url, port);
    dff2:	f8bd 4002 	ldrh.w	r4, [sp, #2]
	if (check_for_ipv4(url, strlen(url))) {
    dff6:	f016 fbba 	bl	2476e <strlen>
	for (index = 0; index < length; index++) {
    dffa:	b2c1      	uxtb	r1, r0
    dffc:	a802      	add	r0, sp, #8
    dffe:	f015 fb04 	bl	2360a <check_for_ipv4.part.0>
	if (check_for_ipv4(url, strlen(url))) {
    e002:	b1a8      	cbz	r0, e030 <handle_at_tcp_conn+0xc8>
		ret = parse_host_by_ipv4(url, port);
    e004:	4621      	mov	r1, r4
    e006:	a802      	add	r0, sp, #8
    e008:	f7ff fea8 	bl	dd5c <parse_host_by_ipv4>
		ret = parse_host_by_name(url, port, SOCK_STREAM);
    e00c:	4604      	mov	r4, r0
	if (ret) {
    e00e:	b1a8      	cbz	r0, e03c <handle_at_tcp_conn+0xd4>
		LOG_ERR("Parse failed: %d", ret);
    e010:	2301      	movs	r3, #1
    e012:	f04f 0200 	mov.w	r2, #0
    e016:	4927      	ldr	r1, [pc, #156]	; (e0b4 <handle_at_tcp_conn+0x14c>)
    e018:	f363 0207 	bfi	r2, r3, #0, #8
    e01c:	4b26      	ldr	r3, [pc, #152]	; (e0b8 <handle_at_tcp_conn+0x150>)
    e01e:	1a5b      	subs	r3, r3, r1
    e020:	08db      	lsrs	r3, r3, #3
    e022:	4601      	mov	r1, r0
    e024:	f363 128f 	bfi	r2, r3, #6, #10
    e028:	4826      	ldr	r0, [pc, #152]	; (e0c4 <handle_at_tcp_conn+0x15c>)
    e02a:	f015 fe9f 	bl	23d6c <log_1>
		return ret;
    e02e:	e7b5      	b.n	df9c <handle_at_tcp_conn+0x34>
		ret = parse_host_by_name(url, port, SOCK_STREAM);
    e030:	2201      	movs	r2, #1
    e032:	4621      	mov	r1, r4
    e034:	a802      	add	r0, sp, #8
    e036:	f7ff fd83 	bl	db40 <parse_host_by_name>
    e03a:	e7e7      	b.n	e00c <handle_at_tcp_conn+0xa4>
	return socket_ops->connect(sock, addr, addrlen);
    e03c:	4b22      	ldr	r3, [pc, #136]	; (e0c8 <handle_at_tcp_conn+0x160>)
    e03e:	2208      	movs	r2, #8
    e040:	681b      	ldr	r3, [r3, #0]
    e042:	4922      	ldr	r1, [pc, #136]	; (e0cc <handle_at_tcp_conn+0x164>)
    e044:	695b      	ldr	r3, [r3, #20]
    e046:	6828      	ldr	r0, [r5, #0]
    e048:	4798      	blx	r3
	if (ret < 0) {
    e04a:	2800      	cmp	r0, #0
    e04c:	da1d      	bge.n	e08a <handle_at_tcp_conn+0x122>
		LOG_ERR("connect() failed: %d", -errno);
    e04e:	2301      	movs	r3, #1
    e050:	f04f 0400 	mov.w	r4, #0
    e054:	4a17      	ldr	r2, [pc, #92]	; (e0b4 <handle_at_tcp_conn+0x14c>)
    e056:	f363 0407 	bfi	r4, r3, #0, #8
    e05a:	4b17      	ldr	r3, [pc, #92]	; (e0b8 <handle_at_tcp_conn+0x150>)
    e05c:	1a9b      	subs	r3, r3, r2
    e05e:	08db      	lsrs	r3, r3, #3
    e060:	f363 148f 	bfi	r4, r3, #6, #10
    e064:	f015 facd 	bl	23602 <z_errno>
    e068:	6801      	ldr	r1, [r0, #0]
    e06a:	4622      	mov	r2, r4
    e06c:	4249      	negs	r1, r1
    e06e:	4818      	ldr	r0, [pc, #96]	; (e0d0 <handle_at_tcp_conn+0x168>)
    e070:	f015 fe7c 	bl	23d6c <log_1>
		do_socket_close(-errno);
    e074:	f015 fac5 	bl	23602 <z_errno>
    e078:	6800      	ldr	r0, [r0, #0]
    e07a:	4240      	negs	r0, r0
    e07c:	f7ff fbc0 	bl	d800 <do_socket_close>
		return -errno;
    e080:	f015 fabf 	bl	23602 <z_errno>
    e084:	6804      	ldr	r4, [r0, #0]
    e086:	4264      	negs	r4, r4
    e088:	e788      	b.n	df9c <handle_at_tcp_conn+0x34>
	client.connected = true;
    e08a:	2301      	movs	r3, #1
	client.callback("#XTCPCONN: 1\r\n");
    e08c:	4811      	ldr	r0, [pc, #68]	; (e0d4 <handle_at_tcp_conn+0x16c>)
	client.connected = true;
    e08e:	716b      	strb	r3, [r5, #5]
	client.callback("#XTCPCONN: 1\r\n");
    e090:	68ab      	ldr	r3, [r5, #8]
    e092:	4798      	blx	r3
	return 0;
    e094:	e782      	b.n	df9c <handle_at_tcp_conn+0x34>
	} else if (*(at_param) == '?') {
    e096:	2a3f      	cmp	r2, #63	; 0x3f
    e098:	f47f af7e 	bne.w	df98 <handle_at_tcp_conn+0x30>
		if (client.connected) {
    e09c:	795c      	ldrb	r4, [r3, #5]
    e09e:	689a      	ldr	r2, [r3, #8]
    e0a0:	b11c      	cbz	r4, e0aa <handle_at_tcp_conn+0x142>
			client.callback("+XTCPCONN: 1\r\n");
    e0a2:	480d      	ldr	r0, [pc, #52]	; (e0d8 <handle_at_tcp_conn+0x170>)
    e0a4:	4790      	blx	r2
		err = 0;
    e0a6:	2400      	movs	r4, #0
    e0a8:	e778      	b.n	df9c <handle_at_tcp_conn+0x34>
			client.callback("+XTCPCONN: 0\r\n");
    e0aa:	480c      	ldr	r0, [pc, #48]	; (e0dc <handle_at_tcp_conn+0x174>)
    e0ac:	4790      	blx	r2
    e0ae:	e775      	b.n	df9c <handle_at_tcp_conn+0x34>
    e0b0:	20020100 	.word	0x20020100
    e0b4:	000264bc 	.word	0x000264bc
    e0b8:	0002652c 	.word	0x0002652c
    e0bc:	00027d51 	.word	0x00027d51
    e0c0:	200200e0 	.word	0x200200e0
    e0c4:	00027c43 	.word	0x00027c43
    e0c8:	20020314 	.word	0x20020314
    e0cc:	20025e00 	.word	0x20025e00
    e0d0:	00027ca6 	.word	0x00027ca6
    e0d4:	00027cbb 	.word	0x00027cbb
    e0d8:	00027cca 	.word	0x00027cca
    e0dc:	00027cd9 	.word	0x00027cd9

0000e0e0 <do_tcp_receive>:
	struct timeval tmo = {
    e0e0:	2300      	movs	r3, #0
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
    e0e2:	2208      	movs	r2, #8
{
    e0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e0e6:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
	struct timeval tmo = {
    e0ea:	e9cd 1302 	strd	r1, r3, [sp, #8]
    e0ee:	4b3f      	ldr	r3, [pc, #252]	; (e1ec <do_tcp_receive+0x10c>)
	ret = setsockopt(client.sock, SOL_SOCKET, SO_RCVTIMEO,
    e0f0:	4d3f      	ldr	r5, [pc, #252]	; (e1f0 <do_tcp_receive+0x110>)
    e0f2:	681b      	ldr	r3, [r3, #0]
    e0f4:	9200      	str	r2, [sp, #0]
    e0f6:	69dc      	ldr	r4, [r3, #28]
{
    e0f8:	4607      	mov	r7, r0
    e0fa:	eb0d 0302 	add.w	r3, sp, r2
    e0fe:	2101      	movs	r1, #1
    e100:	2214      	movs	r2, #20
    e102:	6828      	ldr	r0, [r5, #0]
    e104:	47a0      	blx	r4
	if (ret < 0) {
    e106:	1e04      	subs	r4, r0, #0
    e108:	da1c      	bge.n	e144 <do_tcp_receive+0x64>
		do_socket_close(-errno);
    e10a:	f015 fa7a 	bl	23602 <z_errno>
    e10e:	6800      	ldr	r0, [r0, #0]
		LOG_ERR("setsockopt() error: %d", -errno);
    e110:	f04f 0500 	mov.w	r5, #0
		do_socket_close(-errno);
    e114:	4240      	negs	r0, r0
    e116:	f7ff fb73 	bl	d800 <do_socket_close>
		LOG_ERR("setsockopt() error: %d", -errno);
    e11a:	2301      	movs	r3, #1
    e11c:	4a35      	ldr	r2, [pc, #212]	; (e1f4 <do_tcp_receive+0x114>)
    e11e:	f363 0507 	bfi	r5, r3, #0, #8
    e122:	4b35      	ldr	r3, [pc, #212]	; (e1f8 <do_tcp_receive+0x118>)
    e124:	1a9b      	subs	r3, r3, r2
    e126:	08db      	lsrs	r3, r3, #3
    e128:	f363 158f 	bfi	r5, r3, #6, #10
    e12c:	f015 fa69 	bl	23602 <z_errno>
    e130:	6801      	ldr	r1, [r0, #0]
    e132:	462a      	mov	r2, r5
    e134:	4249      	negs	r1, r1
    e136:	4831      	ldr	r0, [pc, #196]	; (e1fc <do_tcp_receive+0x11c>)
    e138:	f015 fe18 	bl	23d6c <log_1>
}
    e13c:	4620      	mov	r0, r4
    e13e:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    e142:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (length > NET_IPV4_MTU) {
    e144:	f5b7 7f10 	cmp.w	r7, #576	; 0x240
    e148:	ae04      	add	r6, sp, #16
		ret = recv(client.sock, data, NET_IPV4_MTU, 0);
    e14a:	bf8c      	ite	hi
    e14c:	f44f 7210 	movhi.w	r2, #576	; 0x240
		ret = recv(client.sock, data, length, 0);
    e150:	463a      	movls	r2, r7
    e152:	6828      	ldr	r0, [r5, #0]
    e154:	4631      	mov	r1, r6
    e156:	f7ff fdf5 	bl	dd44 <recv.constprop.17>
	if (ret < 0) {
    e15a:	2800      	cmp	r0, #0
		ret = recv(client.sock, data, length, 0);
    e15c:	4604      	mov	r4, r0
	if (ret < 0) {
    e15e:	da1d      	bge.n	e19c <do_tcp_receive+0xbc>
		LOG_WRN("recv() error: %d", -errno);
    e160:	2302      	movs	r3, #2
    e162:	f04f 0400 	mov.w	r4, #0
    e166:	4a23      	ldr	r2, [pc, #140]	; (e1f4 <do_tcp_receive+0x114>)
    e168:	f363 0407 	bfi	r4, r3, #0, #8
    e16c:	4b22      	ldr	r3, [pc, #136]	; (e1f8 <do_tcp_receive+0x118>)
    e16e:	1a9b      	subs	r3, r3, r2
    e170:	08db      	lsrs	r3, r3, #3
    e172:	f363 148f 	bfi	r4, r3, #6, #10
    e176:	f015 fa44 	bl	23602 <z_errno>
    e17a:	6801      	ldr	r1, [r0, #0]
    e17c:	4622      	mov	r2, r4
    e17e:	4249      	negs	r1, r1
    e180:	481f      	ldr	r0, [pc, #124]	; (e200 <do_tcp_receive+0x120>)
    e182:	f015 fdf3 	bl	23d6c <log_1>
		do_socket_close(-errno);
    e186:	f015 fa3c 	bl	23602 <z_errno>
    e18a:	6800      	ldr	r0, [r0, #0]
    e18c:	4240      	negs	r0, r0
    e18e:	f7ff fb37 	bl	d800 <do_socket_close>
		ret = -errno;
    e192:	f015 fa36 	bl	23602 <z_errno>
    e196:	6804      	ldr	r4, [r0, #0]
    e198:	4264      	negs	r4, r4
    e19a:	e7cf      	b.n	e13c <do_tcp_receive+0x5c>
	} else if (ret == 0) {
    e19c:	d111      	bne.n	e1c2 <do_tcp_receive+0xe2>
		LOG_WRN("recv() return 0");
    e19e:	2302      	movs	r3, #2
    e1a0:	f04f 0100 	mov.w	r1, #0
    e1a4:	4a13      	ldr	r2, [pc, #76]	; (e1f4 <do_tcp_receive+0x114>)
    e1a6:	f363 0107 	bfi	r1, r3, #0, #8
    e1aa:	4b13      	ldr	r3, [pc, #76]	; (e1f8 <do_tcp_receive+0x118>)
    e1ac:	4815      	ldr	r0, [pc, #84]	; (e204 <do_tcp_receive+0x124>)
    e1ae:	1a9b      	subs	r3, r3, r2
    e1b0:	08db      	lsrs	r3, r3, #3
    e1b2:	f363 118f 	bfi	r1, r3, #6, #10
    e1b6:	f015 fdcc 	bl	23d52 <log_0>
		do_socket_close(0);
    e1ba:	4620      	mov	r0, r4
    e1bc:	f7ff fb20 	bl	d800 <do_socket_close>
    e1c0:	e7bc      	b.n	e13c <do_tcp_receive+0x5c>
		data[ret] = '\0';
    e1c2:	2700      	movs	r7, #0
		client.callback("#XTCPRECV: ");
    e1c4:	68ab      	ldr	r3, [r5, #8]
		data[ret] = '\0';
    e1c6:	5437      	strb	r7, [r6, r0]
		client.callback("#XTCPRECV: ");
    e1c8:	480f      	ldr	r0, [pc, #60]	; (e208 <do_tcp_receive+0x128>)
    e1ca:	4798      	blx	r3
		client.callback(data);
    e1cc:	68ab      	ldr	r3, [r5, #8]
    e1ce:	4630      	mov	r0, r6
    e1d0:	4798      	blx	r3
		client.callback("\r\n");
    e1d2:	68ab      	ldr	r3, [r5, #8]
    e1d4:	480d      	ldr	r0, [pc, #52]	; (e20c <do_tcp_receive+0x12c>)
    e1d6:	4798      	blx	r3
		sprintf(buf, "#XTCPRECV: %d\r\n", ret);
    e1d8:	4622      	mov	r2, r4
    e1da:	490d      	ldr	r1, [pc, #52]	; (e210 <do_tcp_receive+0x130>)
    e1dc:	480d      	ldr	r0, [pc, #52]	; (e214 <do_tcp_receive+0x134>)
    e1de:	f003 fa15 	bl	1160c <sprintf>
		client.callback(buf);
    e1e2:	68ab      	ldr	r3, [r5, #8]
    e1e4:	480b      	ldr	r0, [pc, #44]	; (e214 <do_tcp_receive+0x134>)
    e1e6:	4798      	blx	r3
		ret = 0;
    e1e8:	463c      	mov	r4, r7
    e1ea:	e7a7      	b.n	e13c <do_tcp_receive+0x5c>
    e1ec:	20020314 	.word	0x20020314
    e1f0:	20020100 	.word	0x20020100
    e1f4:	000264bc 	.word	0x000264bc
    e1f8:	0002652c 	.word	0x0002652c
    e1fc:	00027bde 	.word	0x00027bde
    e200:	00027bf5 	.word	0x00027bf5
    e204:	00027c06 	.word	0x00027c06
    e208:	00027c16 	.word	0x00027c16
    e20c:	00027ce5 	.word	0x00027ce5
    e210:	00027c22 	.word	0x00027c22
    e214:	2002733c 	.word	0x2002733c

0000e218 <handle_at_tcp_recv>:
{
    e218:	b513      	push	{r0, r1, r4, lr}
	if (!client.connected) {
    e21a:	4c1e      	ldr	r4, [pc, #120]	; (e294 <handle_at_tcp_recv+0x7c>)
	char *at_param = (char *)at_cmd + param_offset;
    e21c:	1842      	adds	r2, r0, r1
	if (!client.connected) {
    e21e:	7964      	ldrb	r4, [r4, #5]
    e220:	b98c      	cbnz	r4, e246 <handle_at_tcp_recv+0x2e>
		LOG_ERR("TCP not connected yet");
    e222:	2301      	movs	r3, #1
    e224:	f04f 0100 	mov.w	r1, #0
    e228:	4a1b      	ldr	r2, [pc, #108]	; (e298 <handle_at_tcp_recv+0x80>)
    e22a:	f363 0107 	bfi	r1, r3, #0, #8
    e22e:	4b1b      	ldr	r3, [pc, #108]	; (e29c <handle_at_tcp_recv+0x84>)
    e230:	481b      	ldr	r0, [pc, #108]	; (e2a0 <handle_at_tcp_recv+0x88>)
    e232:	1a9b      	subs	r3, r3, r2
    e234:	08db      	lsrs	r3, r3, #3
    e236:	f363 118f 	bfi	r1, r3, #6, #10
    e23a:	f015 fd8a 	bl	23d52 <log_0>
	int err = -EINVAL;
    e23e:	f06f 0015 	mvn.w	r0, #21
}
    e242:	b002      	add	sp, #8
    e244:	bd10      	pop	{r4, pc}
	if (*(at_param) == '=') {
    e246:	5c43      	ldrb	r3, [r0, r1]
    e248:	2b3d      	cmp	r3, #61	; 0x3d
    e24a:	d1f8      	bne.n	e23e <handle_at_tcp_recv+0x26>
		if (*(at_param) == '?') {
    e24c:	7853      	ldrb	r3, [r2, #1]
    e24e:	2b3f      	cmp	r3, #63	; 0x3f
    e250:	d0f5      	beq.n	e23e <handle_at_tcp_recv+0x26>
		err = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    e252:	4a14      	ldr	r2, [pc, #80]	; (e2a4 <handle_at_tcp_recv+0x8c>)
    e254:	2100      	movs	r1, #0
    e256:	f017 fa9d 	bl	25794 <at_parser_params_from_str>
		if (err < 0) {
    e25a:	2800      	cmp	r0, #0
    e25c:	dbf1      	blt.n	e242 <handle_at_tcp_recv+0x2a>
		if (at_params_valid_count_get(&m_param_list) < 3) {
    e25e:	4811      	ldr	r0, [pc, #68]	; (e2a4 <handle_at_tcp_recv+0x8c>)
    e260:	f017 fb9e 	bl	259a0 <at_params_valid_count_get>
    e264:	2802      	cmp	r0, #2
    e266:	d9ea      	bls.n	e23e <handle_at_tcp_recv+0x26>
		err = at_params_short_get(&m_param_list, 1, &length);
    e268:	aa01      	add	r2, sp, #4
    e26a:	2101      	movs	r1, #1
    e26c:	480d      	ldr	r0, [pc, #52]	; (e2a4 <handle_at_tcp_recv+0x8c>)
    e26e:	f017 fb62 	bl	25936 <at_params_short_get>
		if (err < 0) {
    e272:	2800      	cmp	r0, #0
    e274:	dbe5      	blt.n	e242 <handle_at_tcp_recv+0x2a>
		err = at_params_short_get(&m_param_list, 2, &time);
    e276:	f10d 0206 	add.w	r2, sp, #6
    e27a:	2102      	movs	r1, #2
    e27c:	4809      	ldr	r0, [pc, #36]	; (e2a4 <handle_at_tcp_recv+0x8c>)
    e27e:	f017 fb5a 	bl	25936 <at_params_short_get>
		if (err < 0) {
    e282:	2800      	cmp	r0, #0
    e284:	dbdd      	blt.n	e242 <handle_at_tcp_recv+0x2a>
		err = do_tcp_receive(length, time);
    e286:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    e28a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    e28e:	f7ff ff27 	bl	e0e0 <do_tcp_receive>
    e292:	e7d6      	b.n	e242 <handle_at_tcp_recv+0x2a>
    e294:	20020100 	.word	0x20020100
    e298:	000264bc 	.word	0x000264bc
    e29c:	0002652c 	.word	0x0002652c
    e2a0:	00027ce8 	.word	0x00027ce8
    e2a4:	200200e0 	.word	0x200200e0

0000e2a8 <handle_at_udp_recvfrom>:
static int handle_at_udp_recvfrom(const char *at_cmd, size_t param_offset)
{
	int err = -EINVAL;
	char *at_param = (char *)at_cmd + param_offset;
	char url[TCPIP_MAX_URL];
	int size = TCPIP_MAX_URL;
    e2a8:	2380      	movs	r3, #128	; 0x80
{
    e2aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e2ae:	f5ad 7d39 	sub.w	sp, sp, #740	; 0x2e4
	int size = TCPIP_MAX_URL;
    e2b2:	9304      	str	r3, [sp, #16]
	u16_t port, length, time;

	if (client.sock < 0) {
    e2b4:	4b6e      	ldr	r3, [pc, #440]	; (e470 <handle_at_udp_recvfrom+0x1c8>)
	char *at_param = (char *)at_cmd + param_offset;
    e2b6:	1844      	adds	r4, r0, r1
	if (client.sock < 0) {
    e2b8:	681d      	ldr	r5, [r3, #0]
    e2ba:	2d00      	cmp	r5, #0
    e2bc:	461d      	mov	r5, r3
    e2be:	da14      	bge.n	e2ea <handle_at_udp_recvfrom+0x42>
		LOG_ERR("Socket not opened yet");
    e2c0:	2301      	movs	r3, #1
    e2c2:	f04f 0100 	mov.w	r1, #0
    e2c6:	4a6b      	ldr	r2, [pc, #428]	; (e474 <handle_at_udp_recvfrom+0x1cc>)
    e2c8:	f363 0107 	bfi	r1, r3, #0, #8
    e2cc:	4b6a      	ldr	r3, [pc, #424]	; (e478 <handle_at_udp_recvfrom+0x1d0>)
    e2ce:	486b      	ldr	r0, [pc, #428]	; (e47c <handle_at_udp_recvfrom+0x1d4>)
    e2d0:	1a9b      	subs	r3, r3, r2
    e2d2:	08db      	lsrs	r3, r3, #3
    e2d4:	f363 118f 	bfi	r1, r3, #6, #10
		return err;
	} else if (client.ip_proto != IPPROTO_UDP) {
		LOG_ERR("Invalid socket");
    e2d8:	f015 fd3b 	bl	23d52 <log_0>
		return err;
    e2dc:	f06f 0415 	mvn.w	r4, #21
		};
		err = do_udp_recvfrom(url, port, length, time);
	}

	return err;
}
    e2e0:	4620      	mov	r0, r4
    e2e2:	f50d 7d39 	add.w	sp, sp, #740	; 0x2e4
    e2e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (client.ip_proto != IPPROTO_UDP) {
    e2ea:	791b      	ldrb	r3, [r3, #4]
    e2ec:	2b11      	cmp	r3, #17
    e2ee:	d00c      	beq.n	e30a <handle_at_udp_recvfrom+0x62>
		LOG_ERR("Invalid socket");
    e2f0:	2301      	movs	r3, #1
    e2f2:	f04f 0100 	mov.w	r1, #0
    e2f6:	4a5f      	ldr	r2, [pc, #380]	; (e474 <handle_at_udp_recvfrom+0x1cc>)
    e2f8:	f363 0107 	bfi	r1, r3, #0, #8
    e2fc:	4b5e      	ldr	r3, [pc, #376]	; (e478 <handle_at_udp_recvfrom+0x1d0>)
    e2fe:	4860      	ldr	r0, [pc, #384]	; (e480 <handle_at_udp_recvfrom+0x1d8>)
    e300:	1a9b      	subs	r3, r3, r2
    e302:	08db      	lsrs	r3, r3, #3
    e304:	f363 118f 	bfi	r1, r3, #6, #10
    e308:	e7e6      	b.n	e2d8 <handle_at_udp_recvfrom+0x30>
	if (*(at_param) == '=') {
    e30a:	5c43      	ldrb	r3, [r0, r1]
    e30c:	2b3d      	cmp	r3, #61	; 0x3d
    e30e:	d1e5      	bne.n	e2dc <handle_at_udp_recvfrom+0x34>
		if (*(at_param) == '?') {
    e310:	7863      	ldrb	r3, [r4, #1]
    e312:	2b3f      	cmp	r3, #63	; 0x3f
    e314:	d0e2      	beq.n	e2dc <handle_at_udp_recvfrom+0x34>
		err = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    e316:	4a5b      	ldr	r2, [pc, #364]	; (e484 <handle_at_udp_recvfrom+0x1dc>)
    e318:	2100      	movs	r1, #0
    e31a:	f017 fa3b 	bl	25794 <at_parser_params_from_str>
		if (err < 0) {
    e31e:	1e04      	subs	r4, r0, #0
    e320:	dbde      	blt.n	e2e0 <handle_at_udp_recvfrom+0x38>
		if (at_params_valid_count_get(&m_param_list) < 5) {
    e322:	4858      	ldr	r0, [pc, #352]	; (e484 <handle_at_udp_recvfrom+0x1dc>)
    e324:	f017 fb3c 	bl	259a0 <at_params_valid_count_get>
    e328:	2804      	cmp	r0, #4
    e32a:	d9d7      	bls.n	e2dc <handle_at_udp_recvfrom+0x34>
		err = at_params_string_get(&m_param_list, 1, url, &size);
    e32c:	af08      	add	r7, sp, #32
    e32e:	ab04      	add	r3, sp, #16
    e330:	463a      	mov	r2, r7
    e332:	2101      	movs	r1, #1
    e334:	4853      	ldr	r0, [pc, #332]	; (e484 <handle_at_udp_recvfrom+0x1dc>)
    e336:	f017 fb10 	bl	2595a <at_params_string_get>
		if (err < 0) {
    e33a:	1e04      	subs	r4, r0, #0
    e33c:	dbd0      	blt.n	e2e0 <handle_at_udp_recvfrom+0x38>
		url[size] = '\0';
    e33e:	2200      	movs	r2, #0
    e340:	9b04      	ldr	r3, [sp, #16]
		err = at_params_short_get(&m_param_list, 2, &port);
    e342:	2102      	movs	r1, #2
		url[size] = '\0';
    e344:	54fa      	strb	r2, [r7, r3]
		err = at_params_short_get(&m_param_list, 2, &port);
    e346:	484f      	ldr	r0, [pc, #316]	; (e484 <handle_at_udp_recvfrom+0x1dc>)
    e348:	f10d 020a 	add.w	r2, sp, #10
    e34c:	f017 faf3 	bl	25936 <at_params_short_get>
		if (err < 0) {
    e350:	1e04      	subs	r4, r0, #0
    e352:	dbc5      	blt.n	e2e0 <handle_at_udp_recvfrom+0x38>
		err = at_params_short_get(&m_param_list, 3, &length);
    e354:	aa03      	add	r2, sp, #12
    e356:	2103      	movs	r1, #3
    e358:	484a      	ldr	r0, [pc, #296]	; (e484 <handle_at_udp_recvfrom+0x1dc>)
    e35a:	f017 faec 	bl	25936 <at_params_short_get>
		if (err < 0) {
    e35e:	1e04      	subs	r4, r0, #0
    e360:	dbbe      	blt.n	e2e0 <handle_at_udp_recvfrom+0x38>
		err = at_params_short_get(&m_param_list, 4, &time);
    e362:	f10d 020e 	add.w	r2, sp, #14
    e366:	2104      	movs	r1, #4
    e368:	4846      	ldr	r0, [pc, #280]	; (e484 <handle_at_udp_recvfrom+0x1dc>)
    e36a:	f017 fae4 	bl	25936 <at_params_short_get>
		if (err < 0) {
    e36e:	1e04      	subs	r4, r0, #0
    e370:	dbb6      	blt.n	e2e0 <handle_at_udp_recvfrom+0x38>
	int sockaddr_len = sizeof(struct sockaddr);
    e372:	2218      	movs	r2, #24
	struct timeval tmo = {
    e374:	f04f 0800 	mov.w	r8, #0
		err = do_udp_recvfrom(url, port, length, time);
    e378:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	int sockaddr_len = sizeof(struct sockaddr);
    e37c:	ae05      	add	r6, sp, #20
	ret = do_udp_init(url, port);
    e37e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    e382:	4638      	mov	r0, r7
		err = do_udp_recvfrom(url, port, length, time);
    e384:	f8bd 900c 	ldrh.w	r9, [sp, #12]
	int sockaddr_len = sizeof(struct sockaddr);
    e388:	6032      	str	r2, [r6, #0]
	struct timeval tmo = {
    e38a:	e9cd 3806 	strd	r3, r8, [sp, #24]
	ret = do_udp_init(url, port);
    e38e:	f7ff fcf7 	bl	dd80 <do_udp_init>
	if (ret < 0) {
    e392:	1e04      	subs	r4, r0, #0
    e394:	dba4      	blt.n	e2e0 <handle_at_udp_recvfrom+0x38>
    e396:	2208      	movs	r2, #8
    e398:	4f3b      	ldr	r7, [pc, #236]	; (e488 <handle_at_udp_recvfrom+0x1e0>)
    e39a:	2101      	movs	r1, #1
    e39c:	683b      	ldr	r3, [r7, #0]
    e39e:	9200      	str	r2, [sp, #0]
    e3a0:	69dc      	ldr	r4, [r3, #28]
    e3a2:	2214      	movs	r2, #20
    e3a4:	ab06      	add	r3, sp, #24
    e3a6:	6828      	ldr	r0, [r5, #0]
    e3a8:	47a0      	blx	r4
	if (ret < 0) {
    e3aa:	1e04      	subs	r4, r0, #0
    e3ac:	da19      	bge.n	e3e2 <handle_at_udp_recvfrom+0x13a>
		LOG_ERR("setsockopt() error: %d", -errno);
    e3ae:	2301      	movs	r3, #1
    e3b0:	f04f 0500 	mov.w	r5, #0
    e3b4:	4a2f      	ldr	r2, [pc, #188]	; (e474 <handle_at_udp_recvfrom+0x1cc>)
    e3b6:	f363 0507 	bfi	r5, r3, #0, #8
    e3ba:	4b2f      	ldr	r3, [pc, #188]	; (e478 <handle_at_udp_recvfrom+0x1d0>)
    e3bc:	1a9b      	subs	r3, r3, r2
    e3be:	08db      	lsrs	r3, r3, #3
    e3c0:	f363 158f 	bfi	r5, r3, #6, #10
    e3c4:	f015 f91d 	bl	23602 <z_errno>
    e3c8:	6801      	ldr	r1, [r0, #0]
    e3ca:	462a      	mov	r2, r5
    e3cc:	4249      	negs	r1, r1
    e3ce:	482f      	ldr	r0, [pc, #188]	; (e48c <handle_at_udp_recvfrom+0x1e4>)
    e3d0:	f015 fccc 	bl	23d6c <log_1>
		do_socket_close(-errno);
    e3d4:	f015 f915 	bl	23602 <z_errno>
    e3d8:	6800      	ldr	r0, [r0, #0]
    e3da:	4240      	negs	r0, r0
    e3dc:	f7ff fa10 	bl	d800 <do_socket_close>
		return ret;
    e3e0:	e77e      	b.n	e2e0 <handle_at_udp_recvfrom+0x38>
	if (length > NET_IPV4_MTU) {
    e3e2:	683b      	ldr	r3, [r7, #0]
    e3e4:	f5b9 7f10 	cmp.w	r9, #576	; 0x240
    e3e8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    e3ea:	4b29      	ldr	r3, [pc, #164]	; (e490 <handle_at_udp_recvfrom+0x1e8>)
    e3ec:	af28      	add	r7, sp, #160	; 0xa0
    e3ee:	6828      	ldr	r0, [r5, #0]
	return socket_ops->recvfrom(sock, buf, len, flags, from, fromlen);
    e3f0:	bf88      	it	hi
    e3f2:	f44f 7210 	movhi.w	r2, #576	; 0x240
    e3f6:	9601      	str	r6, [sp, #4]
    e3f8:	9300      	str	r3, [sp, #0]
    e3fa:	bf98      	it	ls
    e3fc:	fa0f f289 	sxthls.w	r2, r9
    e400:	4643      	mov	r3, r8
    e402:	4639      	mov	r1, r7
    e404:	47a0      	blx	r4
	if (ret < 0) {
    e406:	2800      	cmp	r0, #0
    e408:	4606      	mov	r6, r0
    e40a:	da1d      	bge.n	e448 <handle_at_udp_recvfrom+0x1a0>
		LOG_WRN("recvfrom() error: %d", -errno);
    e40c:	2302      	movs	r3, #2
    e40e:	f04f 0400 	mov.w	r4, #0
    e412:	4a18      	ldr	r2, [pc, #96]	; (e474 <handle_at_udp_recvfrom+0x1cc>)
    e414:	f363 0407 	bfi	r4, r3, #0, #8
    e418:	4b17      	ldr	r3, [pc, #92]	; (e478 <handle_at_udp_recvfrom+0x1d0>)
    e41a:	1a9b      	subs	r3, r3, r2
    e41c:	08db      	lsrs	r3, r3, #3
    e41e:	f363 148f 	bfi	r4, r3, #6, #10
    e422:	f015 f8ee 	bl	23602 <z_errno>
    e426:	6801      	ldr	r1, [r0, #0]
    e428:	4622      	mov	r2, r4
    e42a:	4249      	negs	r1, r1
    e42c:	4819      	ldr	r0, [pc, #100]	; (e494 <handle_at_udp_recvfrom+0x1ec>)
    e42e:	f015 fc9d 	bl	23d6c <log_1>
		do_socket_close(-errno);
    e432:	f015 f8e6 	bl	23602 <z_errno>
    e436:	6800      	ldr	r0, [r0, #0]
    e438:	4240      	negs	r0, r0
    e43a:	f7ff f9e1 	bl	d800 <do_socket_close>
		ret = -errno;
    e43e:	f015 f8e0 	bl	23602 <z_errno>
    e442:	6804      	ldr	r4, [r0, #0]
    e444:	4264      	negs	r4, r4
    e446:	e74b      	b.n	e2e0 <handle_at_udp_recvfrom+0x38>
		data[ret] = '\0';
    e448:	2400      	movs	r4, #0
		client.callback("#XUDPRECV: ");
    e44a:	68ab      	ldr	r3, [r5, #8]
		data[ret] = '\0';
    e44c:	543c      	strb	r4, [r7, r0]
		client.callback("#XUDPRECV: ");
    e44e:	4812      	ldr	r0, [pc, #72]	; (e498 <handle_at_udp_recvfrom+0x1f0>)
    e450:	4798      	blx	r3
		client.callback(data);
    e452:	68ab      	ldr	r3, [r5, #8]
    e454:	4638      	mov	r0, r7
    e456:	4798      	blx	r3
		client.callback("\r\n");
    e458:	68ab      	ldr	r3, [r5, #8]
    e45a:	4810      	ldr	r0, [pc, #64]	; (e49c <handle_at_udp_recvfrom+0x1f4>)
    e45c:	4798      	blx	r3
		sprintf(buf, "#XUDPRECV: %d\r\n", ret);
    e45e:	4632      	mov	r2, r6
    e460:	490f      	ldr	r1, [pc, #60]	; (e4a0 <handle_at_udp_recvfrom+0x1f8>)
    e462:	4810      	ldr	r0, [pc, #64]	; (e4a4 <handle_at_udp_recvfrom+0x1fc>)
    e464:	f003 f8d2 	bl	1160c <sprintf>
		client.callback(buf);
    e468:	68ab      	ldr	r3, [r5, #8]
    e46a:	480e      	ldr	r0, [pc, #56]	; (e4a4 <handle_at_udp_recvfrom+0x1fc>)
    e46c:	4798      	blx	r3
		ret = 0;
    e46e:	e737      	b.n	e2e0 <handle_at_udp_recvfrom+0x38>
    e470:	20020100 	.word	0x20020100
    e474:	000264bc 	.word	0x000264bc
    e478:	0002652c 	.word	0x0002652c
    e47c:	00027d51 	.word	0x00027d51
    e480:	00027d67 	.word	0x00027d67
    e484:	200200e0 	.word	0x200200e0
    e488:	20020314 	.word	0x20020314
    e48c:	00027bde 	.word	0x00027bde
    e490:	20025e00 	.word	0x20025e00
    e494:	00027d20 	.word	0x00027d20
    e498:	00027d35 	.word	0x00027d35
    e49c:	00027ce5 	.word	0x00027ce5
    e4a0:	00027d41 	.word	0x00027d41
    e4a4:	2002733c 	.word	0x2002733c

0000e4a8 <slm_at_tcpip_parse>:

/**@brief API to handle TCP/IP AT commands
 */
int slm_at_tcpip_parse(const u8_t *param, u8_t length)
{
    e4a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e4ac:	4e14      	ldr	r6, [pc, #80]	; (e500 <slm_at_tcpip_parse+0x58>)
    e4ae:	4607      	mov	r7, r0
	int ret = -ENOTSUP;

	ARG_UNUSED(length);

	for (int i = 0; i < AT_TCPIP_MAX; i++) {
    e4b0:	2500      	movs	r5, #0
    e4b2:	4634      	mov	r4, r6
		u8_t cmd_len = strlen(m_at_list[i].string_upper);
    e4b4:	f8d6 9004 	ldr.w	r9, [r6, #4]
    e4b8:	4648      	mov	r0, r9
    e4ba:	f016 f958 	bl	2476e <strlen>

		if (strncmp(param, m_at_list[i].string_upper,
    e4be:	fa5f f880 	uxtb.w	r8, r0
    e4c2:	4642      	mov	r2, r8
    e4c4:	4649      	mov	r1, r9
    e4c6:	4638      	mov	r0, r7
    e4c8:	f016 f964 	bl	24794 <strncmp>
    e4cc:	b938      	cbnz	r0, e4de <slm_at_tcpip_parse+0x36>
			cmd_len) == 0) {
			ret = m_at_list[i].handler(param, cmd_len);
			break;
		} else if (strncmp(param, m_at_list[i].string_lower,
			cmd_len) == 0) {
			ret = m_at_list[i].handler(param, cmd_len);
    e4ce:	eb04 1405 	add.w	r4, r4, r5, lsl #4
    e4d2:	68e3      	ldr	r3, [r4, #12]
    e4d4:	4641      	mov	r1, r8
    e4d6:	4638      	mov	r0, r7
			break;
		}
	}

	return ret;
}
    e4d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			ret = m_at_list[i].handler(param, cmd_len);
    e4dc:	4718      	bx	r3
		} else if (strncmp(param, m_at_list[i].string_lower,
    e4de:	4642      	mov	r2, r8
    e4e0:	68b1      	ldr	r1, [r6, #8]
    e4e2:	4638      	mov	r0, r7
    e4e4:	f016 f956 	bl	24794 <strncmp>
    e4e8:	2800      	cmp	r0, #0
    e4ea:	d0f0      	beq.n	e4ce <slm_at_tcpip_parse+0x26>
	for (int i = 0; i < AT_TCPIP_MAX; i++) {
    e4ec:	3501      	adds	r5, #1
    e4ee:	2d07      	cmp	r5, #7
    e4f0:	f106 0610 	add.w	r6, r6, #16
    e4f4:	d1de      	bne.n	e4b4 <slm_at_tcpip_parse+0xc>
}
    e4f6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    e4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e4fe:	bf00      	nop
    e500:	0002656c 	.word	0x0002656c

0000e504 <request_nb_iot_network_stats>:
	return 0;
}

int request_nb_iot_network_stats()
{
	LOG_INF("Requesting NB-IoT network stats...");
    e504:	2303      	movs	r3, #3
    e506:	f04f 0100 	mov.w	r1, #0
{
    e50a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	LOG_INF("Requesting NB-IoT network stats...");
    e50e:	f363 0107 	bfi	r1, r3, #0, #8
    e512:	4cbf      	ldr	r4, [pc, #764]	; (e810 <request_nb_iot_network_stats+0x30c>)
    e514:	4bbf      	ldr	r3, [pc, #764]	; (e814 <request_nb_iot_network_stats+0x310>)
{
    e516:	b0a7      	sub	sp, #156	; 0x9c
	LOG_INF("Requesting NB-IoT network stats...");
    e518:	1ae4      	subs	r4, r4, r3
    e51a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    e51e:	f364 118f 	bfi	r1, r4, #6, #10
    e522:	48bd      	ldr	r0, [pc, #756]	; (e818 <request_nb_iot_network_stats+0x314>)
    e524:	f015 fc15 	bl	23d52 <log_0>
	int  at_sock;
	int  bytes_sent;
	int  bytes_received;
	char buf[150];

	at_sock = socket(AF_LTE, 0, NPROTO_AT);
    e528:	f240 2201 	movw	r2, #513	; 0x201
    e52c:	2100      	movs	r1, #0
    e52e:	2066      	movs	r0, #102	; 0x66
    e530:	f7ff f95a 	bl	d7e8 <socket>
	if (at_sock < 0) {
    e534:	1e05      	subs	r5, r0, #0
    e536:	db20      	blt.n	e57a <request_nb_iot_network_stats+0x76>
		return -1;
	}

	// Get and parse current cell ID: AT+CEREG?
	LOG_INF("CEREG");
    e538:	2303      	movs	r3, #3
    e53a:	f04f 0100 	mov.w	r1, #0
    e53e:	f363 0107 	bfi	r1, r3, #0, #8
    e542:	f364 118f 	bfi	r1, r4, #6, #10
    e546:	48b5      	ldr	r0, [pc, #724]	; (e81c <request_nb_iot_network_stats+0x318>)
    e548:	f015 fc03 	bl	23d52 <log_0>
	bytes_sent = send(at_sock, AT_CEREG, strlen(AT_CEREG), 0);
    e54c:	48b4      	ldr	r0, [pc, #720]	; (e820 <request_nb_iot_network_stats+0x31c>)
    e54e:	f016 f90e 	bl	2476e <strlen>
    e552:	49b3      	ldr	r1, [pc, #716]	; (e820 <request_nb_iot_network_stats+0x31c>)
    e554:	4602      	mov	r2, r0
    e556:	4628      	mov	r0, r5
    e558:	f7ff fa6a 	bl	da30 <send.constprop.10>
	if (bytes_sent < 0) {
    e55c:	2800      	cmp	r0, #0
    e55e:	da0f      	bge.n	e580 <request_nb_iot_network_stats+0x7c>
		LOG_INF("CEREG send error");
    e560:	f04f 0100 	mov.w	r1, #0
    e564:	2303      	movs	r3, #3
    e566:	48af      	ldr	r0, [pc, #700]	; (e824 <request_nb_iot_network_stats+0x320>)
    e568:	f363 0107 	bfi	r1, r3, #0, #8
    e56c:	f364 118f 	bfi	r1, r4, #6, #10
		LOG_INF("Neighbors = %s", neighbors);
		LOG_INF("###0###");
	}
	else if (strstr(buf, "ERROR") != NULL) 
	{
		LOG_ERR("Error while getting neighbor data!");
    e570:	f015 fbef 	bl	23d52 <log_0>
		close(at_sock);
    e574:	4628      	mov	r0, r5
    e576:	f7ff f93d 	bl	d7f4 <close>
		return -1;
    e57a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e57e:	e130      	b.n	e7e2 <request_nb_iot_network_stats+0x2de>
		bytes_received = recv(at_sock, buf, 100, 0);
    e580:	2264      	movs	r2, #100	; 0x64
    e582:	4669      	mov	r1, sp
    e584:	4628      	mov	r0, r5
    e586:	f7ff fbdd 	bl	dd44 <recv.constprop.17>
	} while (bytes_received == 0);
    e58a:	2800      	cmp	r0, #0
    e58c:	d0f8      	beq.n	e580 <request_nb_iot_network_stats+0x7c>
	LOG_INF("CEREG RESPONSE: %s", buf); // +CEREG: 0,5,"5276","0101D268",9
    e58e:	2303      	movs	r3, #3
    e590:	f04f 0200 	mov.w	r2, #0
    e594:	f363 0207 	bfi	r2, r3, #0, #8
    e598:	4669      	mov	r1, sp
    e59a:	48a3      	ldr	r0, [pc, #652]	; (e828 <request_nb_iot_network_stats+0x324>)
    e59c:	f364 128f 	bfi	r2, r4, #6, #10
    e5a0:	f015 fbe4 	bl	23d6c <log_1>
	if(strstr(buf, "OK") != NULL)
    e5a4:	49a1      	ldr	r1, [pc, #644]	; (e82c <request_nb_iot_network_stats+0x328>)
    e5a6:	4668      	mov	r0, sp
    e5a8:	f016 f896 	bl	246d8 <strstr>
    e5ac:	2800      	cmp	r0, #0
    e5ae:	d038      	beq.n	e622 <request_nb_iot_network_stats+0x11e>
		char* pos = strstr(buf, "\",\"")+3;		
    e5b0:	499f      	ldr	r1, [pc, #636]	; (e830 <request_nb_iot_network_stats+0x32c>)
    e5b2:	4668      	mov	r0, sp
    e5b4:	f016 f890 	bl	246d8 <strstr>
    e5b8:	4a9e      	ldr	r2, [pc, #632]	; (e834 <request_nb_iot_network_stats+0x330>)
    e5ba:	1c83      	adds	r3, r0, #2
    e5bc:	300a      	adds	r0, #10
			current_cell_id[i] = pos[i];
    e5be:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		for(uint8_t i=0; i<8; i++)
    e5c2:	4298      	cmp	r0, r3
			current_cell_id[i] = pos[i];
    e5c4:	f802 1b01 	strb.w	r1, [r2], #1
		for(uint8_t i=0; i<8; i++)
    e5c8:	d1f9      	bne.n	e5be <request_nb_iot_network_stats+0xba>
		LOG_INF("Current cell ID = %s", current_cell_id);
    e5ca:	f04f 0200 	mov.w	r2, #0
    e5ce:	2303      	movs	r3, #3
    e5d0:	f363 0207 	bfi	r2, r3, #0, #8
    e5d4:	f364 128f 	bfi	r2, r4, #6, #10
    e5d8:	4996      	ldr	r1, [pc, #600]	; (e834 <request_nb_iot_network_stats+0x330>)
    e5da:	4897      	ldr	r0, [pc, #604]	; (e838 <request_nb_iot_network_stats+0x334>)
    e5dc:	f015 fbc6 	bl	23d6c <log_1>
	k_sleep(K_SECONDS(2));
    e5e0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    e5e4:	f015 f80f 	bl	23606 <k_sleep>
	LOG_INF("CESQ");
    e5e8:	2303      	movs	r3, #3
    e5ea:	f04f 0100 	mov.w	r1, #0
    e5ee:	f363 0107 	bfi	r1, r3, #0, #8
    e5f2:	f364 118f 	bfi	r1, r4, #6, #10
    e5f6:	4891      	ldr	r0, [pc, #580]	; (e83c <request_nb_iot_network_stats+0x338>)
    e5f8:	f015 fbab 	bl	23d52 <log_0>
	bytes_sent = send(at_sock, AT_CESQ, strlen(AT_CESQ), 0);
    e5fc:	4890      	ldr	r0, [pc, #576]	; (e840 <request_nb_iot_network_stats+0x33c>)
    e5fe:	f016 f8b6 	bl	2476e <strlen>
    e602:	498f      	ldr	r1, [pc, #572]	; (e840 <request_nb_iot_network_stats+0x33c>)
    e604:	4602      	mov	r2, r0
    e606:	4628      	mov	r0, r5
    e608:	f7ff fa12 	bl	da30 <send.constprop.10>
	if (bytes_sent < 0) {
    e60c:	2800      	cmp	r0, #0
    e60e:	da17      	bge.n	e640 <request_nb_iot_network_stats+0x13c>
		LOG_INF("CESQ send error");
    e610:	f04f 0100 	mov.w	r1, #0
    e614:	2303      	movs	r3, #3
    e616:	f363 0107 	bfi	r1, r3, #0, #8
    e61a:	f364 118f 	bfi	r1, r4, #6, #10
    e61e:	4889      	ldr	r0, [pc, #548]	; (e844 <request_nb_iot_network_stats+0x340>)
    e620:	e7a6      	b.n	e570 <request_nb_iot_network_stats+0x6c>
	else if (strstr(buf, "ERROR") != NULL) 
    e622:	4989      	ldr	r1, [pc, #548]	; (e848 <request_nb_iot_network_stats+0x344>)
    e624:	4668      	mov	r0, sp
    e626:	f016 f857 	bl	246d8 <strstr>
    e62a:	2800      	cmp	r0, #0
    e62c:	d0d8      	beq.n	e5e0 <request_nb_iot_network_stats+0xdc>
		LOG_ERR("Error while getting current cell ID!");
    e62e:	f04f 0100 	mov.w	r1, #0
    e632:	2301      	movs	r3, #1
    e634:	f363 0107 	bfi	r1, r3, #0, #8
    e638:	f364 118f 	bfi	r1, r4, #6, #10
    e63c:	4883      	ldr	r0, [pc, #524]	; (e84c <request_nb_iot_network_stats+0x348>)
    e63e:	e797      	b.n	e570 <request_nb_iot_network_stats+0x6c>
		bytes_received = recv(at_sock, buf, 100, 0);
    e640:	2264      	movs	r2, #100	; 0x64
    e642:	4669      	mov	r1, sp
    e644:	4628      	mov	r0, r5
    e646:	f7ff fb7d 	bl	dd44 <recv.constprop.17>
	} while (bytes_received == 0);
    e64a:	2800      	cmp	r0, #0
    e64c:	d0f8      	beq.n	e640 <request_nb_iot_network_stats+0x13c>
	LOG_INF("CESQ RESPONSE: %s", buf); // +CESQ: 99,99,255,255,17,54		
    e64e:	2303      	movs	r3, #3
    e650:	f04f 0200 	mov.w	r2, #0
    e654:	f363 0207 	bfi	r2, r3, #0, #8
    e658:	4669      	mov	r1, sp
    e65a:	487d      	ldr	r0, [pc, #500]	; (e850 <request_nb_iot_network_stats+0x34c>)
    e65c:	f364 128f 	bfi	r2, r4, #6, #10
    e660:	f015 fb84 	bl	23d6c <log_1>
	if(strstr(buf, "OK") != NULL)
    e664:	4971      	ldr	r1, [pc, #452]	; (e82c <request_nb_iot_network_stats+0x328>)
    e666:	4668      	mov	r0, sp
    e668:	f016 f836 	bl	246d8 <strstr>
    e66c:	2800      	cmp	r0, #0
    e66e:	d041      	beq.n	e6f4 <request_nb_iot_network_stats+0x1f0>
		char* pos = strrchr(buf, ',') + 1;
    e670:	212c      	movs	r1, #44	; 0x2c
    e672:	4668      	mov	r0, sp
    e674:	f016 f86e 	bl	24754 <strrchr>
		for(uint8_t i=0; i<strlen(pos); i++)
    e678:	2600      	movs	r6, #0
			current_rsrp[i] = pos[i];
    e67a:	f8df 91d8 	ldr.w	r9, [pc, #472]	; e854 <request_nb_iot_network_stats+0x350>
		char* pos = strrchr(buf, ',') + 1;
    e67e:	f100 0801 	add.w	r8, r0, #1
		for(uint8_t i=0; i<strlen(pos); i++)
    e682:	4640      	mov	r0, r8
    e684:	f016 f873 	bl	2476e <strlen>
    e688:	b2f7      	uxtb	r7, r6
    e68a:	4287      	cmp	r7, r0
    e68c:	f106 0601 	add.w	r6, r6, #1
    e690:	d32b      	bcc.n	e6ea <request_nb_iot_network_stats+0x1e6>
		LOG_INF("Current RSRP = %s", current_rsrp);
    e692:	f04f 0200 	mov.w	r2, #0
    e696:	2303      	movs	r3, #3
    e698:	f363 0207 	bfi	r2, r3, #0, #8
    e69c:	f364 128f 	bfi	r2, r4, #6, #10
    e6a0:	496c      	ldr	r1, [pc, #432]	; (e854 <request_nb_iot_network_stats+0x350>)
    e6a2:	486d      	ldr	r0, [pc, #436]	; (e858 <request_nb_iot_network_stats+0x354>)
    e6a4:	f015 fb62 	bl	23d6c <log_1>
	k_sleep(K_SECONDS(2));
    e6a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    e6ac:	f014 ffab 	bl	23606 <k_sleep>
	LOG_INF("NBRGRSRP");
    e6b0:	2303      	movs	r3, #3
    e6b2:	f04f 0100 	mov.w	r1, #0
    e6b6:	f363 0107 	bfi	r1, r3, #0, #8
    e6ba:	f364 118f 	bfi	r1, r4, #6, #10
    e6be:	4867      	ldr	r0, [pc, #412]	; (e85c <request_nb_iot_network_stats+0x358>)
    e6c0:	f015 fb47 	bl	23d52 <log_0>
	bytes_sent = send(at_sock, AT_NBRGRSRP, strlen(AT_NBRGRSRP), 0);
    e6c4:	4866      	ldr	r0, [pc, #408]	; (e860 <request_nb_iot_network_stats+0x35c>)
    e6c6:	f016 f852 	bl	2476e <strlen>
    e6ca:	4965      	ldr	r1, [pc, #404]	; (e860 <request_nb_iot_network_stats+0x35c>)
    e6cc:	4602      	mov	r2, r0
    e6ce:	4628      	mov	r0, r5
    e6d0:	f7ff f9ae 	bl	da30 <send.constprop.10>
	if (bytes_sent < 0) {
    e6d4:	2800      	cmp	r0, #0
    e6d6:	da1c      	bge.n	e712 <request_nb_iot_network_stats+0x20e>
		LOG_INF("NBRGRSRP send error");
    e6d8:	f04f 0100 	mov.w	r1, #0
    e6dc:	2303      	movs	r3, #3
    e6de:	f363 0107 	bfi	r1, r3, #0, #8
    e6e2:	f364 118f 	bfi	r1, r4, #6, #10
    e6e6:	485f      	ldr	r0, [pc, #380]	; (e864 <request_nb_iot_network_stats+0x360>)
    e6e8:	e742      	b.n	e570 <request_nb_iot_network_stats+0x6c>
			current_rsrp[i] = pos[i];
    e6ea:	f818 3007 	ldrb.w	r3, [r8, r7]
    e6ee:	f809 3007 	strb.w	r3, [r9, r7]
    e6f2:	e7c6      	b.n	e682 <request_nb_iot_network_stats+0x17e>
	else if (strstr(buf, "ERROR") != NULL) 
    e6f4:	4954      	ldr	r1, [pc, #336]	; (e848 <request_nb_iot_network_stats+0x344>)
    e6f6:	4668      	mov	r0, sp
    e6f8:	f015 ffee 	bl	246d8 <strstr>
    e6fc:	2800      	cmp	r0, #0
    e6fe:	d0d3      	beq.n	e6a8 <request_nb_iot_network_stats+0x1a4>
		LOG_ERR("Error while getting current RSRP!");
    e700:	f04f 0100 	mov.w	r1, #0
    e704:	2301      	movs	r3, #1
    e706:	f363 0107 	bfi	r1, r3, #0, #8
    e70a:	f364 118f 	bfi	r1, r4, #6, #10
    e70e:	4856      	ldr	r0, [pc, #344]	; (e868 <request_nb_iot_network_stats+0x364>)
    e710:	e72e      	b.n	e570 <request_nb_iot_network_stats+0x6c>
		bytes_received = recv(at_sock, buf, 150, 0);
    e712:	2296      	movs	r2, #150	; 0x96
    e714:	4669      	mov	r1, sp
    e716:	4628      	mov	r0, r5
    e718:	f7ff fb14 	bl	dd44 <recv.constprop.17>
	} while (bytes_received == 0);
    e71c:	2800      	cmp	r0, #0
    e71e:	d0f8      	beq.n	e712 <request_nb_iot_network_stats+0x20e>
	LOG_INF("NBRGRSRP RESPONSE: %s", buf); // %NBRGRSRP: 179,6447,57,11,6447,54
    e720:	2303      	movs	r3, #3
    e722:	f04f 0200 	mov.w	r2, #0
    e726:	f363 0207 	bfi	r2, r3, #0, #8
    e72a:	4669      	mov	r1, sp
    e72c:	484f      	ldr	r0, [pc, #316]	; (e86c <request_nb_iot_network_stats+0x368>)
    e72e:	f364 128f 	bfi	r2, r4, #6, #10
    e732:	f015 fb1b 	bl	23d6c <log_1>
	if(strstr(buf, "OK") != NULL)
    e736:	493d      	ldr	r1, [pc, #244]	; (e82c <request_nb_iot_network_stats+0x328>)
    e738:	4668      	mov	r0, sp
    e73a:	f015 ffcd 	bl	246d8 <strstr>
    e73e:	2800      	cmp	r0, #0
    e740:	d057      	beq.n	e7f2 <request_nb_iot_network_stats+0x2ee>
		char* pos = strstr(buf, "\%NBRGRSRP: ") + strlen("\%NBRGRSRP: ");
    e742:	494b      	ldr	r1, [pc, #300]	; (e870 <request_nb_iot_network_stats+0x36c>)
    e744:	4668      	mov	r0, sp
    e746:	f015 ffc7 	bl	246d8 <strstr>
    e74a:	4607      	mov	r7, r0
    e74c:	4848      	ldr	r0, [pc, #288]	; (e870 <request_nb_iot_network_stats+0x36c>)
    e74e:	f016 f80e 	bl	2476e <strlen>
		for(uint8_t i=0; i<strlen(pos); i++)
    e752:	2600      	movs	r6, #0
		 	neighbors[i] = pos[i];
    e754:	f8df 911c 	ldr.w	r9, [pc, #284]	; e874 <request_nb_iot_network_stats+0x370>
		char* pos = strstr(buf, "\%NBRGRSRP: ") + strlen("\%NBRGRSRP: ");
    e758:	4407      	add	r7, r0
		for(uint8_t i=0; i<strlen(pos); i++)
    e75a:	4638      	mov	r0, r7
    e75c:	f016 f807 	bl	2476e <strlen>
    e760:	fa5f f886 	uxtb.w	r8, r6
    e764:	4540      	cmp	r0, r8
    e766:	f106 0601 	add.w	r6, r6, #1
    e76a:	d83d      	bhi.n	e7e8 <request_nb_iot_network_stats+0x2e4>
		LOG_INF("Neighbors = %s", neighbors);
    e76c:	2303      	movs	r3, #3
    e76e:	f04f 0200 	mov.w	r2, #0
    e772:	f363 0207 	bfi	r2, r3, #0, #8
    e776:	493f      	ldr	r1, [pc, #252]	; (e874 <request_nb_iot_network_stats+0x370>)
    e778:	483f      	ldr	r0, [pc, #252]	; (e878 <request_nb_iot_network_stats+0x374>)
    e77a:	f364 128f 	bfi	r2, r4, #6, #10
    e77e:	f015 faf5 	bl	23d6c <log_1>
		LOG_INF("###0###");
    e782:	f04f 0100 	mov.w	r1, #0
    e786:	2303      	movs	r3, #3
    e788:	f363 0107 	bfi	r1, r3, #0, #8
    e78c:	f364 118f 	bfi	r1, r4, #6, #10
    e790:	483a      	ldr	r0, [pc, #232]	; (e87c <request_nb_iot_network_stats+0x378>)
    e792:	f015 fade 	bl	23d52 <log_0>
		return -1;
	}
	LOG_INF("###1###");
    e796:	2303      	movs	r3, #3
    e798:	f04f 0100 	mov.w	r1, #0
    e79c:	f363 0107 	bfi	r1, r3, #0, #8
    e7a0:	f364 118f 	bfi	r1, r4, #6, #10
    e7a4:	4836      	ldr	r0, [pc, #216]	; (e880 <request_nb_iot_network_stats+0x37c>)
    e7a6:	f015 fad4 	bl	23d52 <log_0>
	k_sleep(K_SECONDS(2));
    e7aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    e7ae:	f014 ff2a 	bl	23606 <k_sleep>
	LOG_INF("###2###");
    e7b2:	2303      	movs	r3, #3
    e7b4:	f04f 0100 	mov.w	r1, #0
    e7b8:	f363 0107 	bfi	r1, r3, #0, #8
    e7bc:	f364 118f 	bfi	r1, r4, #6, #10
    e7c0:	4830      	ldr	r0, [pc, #192]	; (e884 <request_nb_iot_network_stats+0x380>)
    e7c2:	f015 fac6 	bl	23d52 <log_0>
	close(at_sock);
    e7c6:	4628      	mov	r0, r5
    e7c8:	f7ff f814 	bl	d7f4 <close>
	LOG_INF("NB-IoT network stats requested.");
    e7cc:	2303      	movs	r3, #3
    e7ce:	f04f 0100 	mov.w	r1, #0
    e7d2:	f363 0107 	bfi	r1, r3, #0, #8
    e7d6:	482c      	ldr	r0, [pc, #176]	; (e888 <request_nb_iot_network_stats+0x384>)
    e7d8:	f364 118f 	bfi	r1, r4, #6, #10
    e7dc:	f015 fab9 	bl	23d52 <log_0>
	
	return 0;
    e7e0:	2000      	movs	r0, #0
}
    e7e2:	b027      	add	sp, #156	; 0x9c
    e7e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		 	neighbors[i] = pos[i];
    e7e8:	f817 3008 	ldrb.w	r3, [r7, r8]
    e7ec:	f809 3008 	strb.w	r3, [r9, r8]
    e7f0:	e7b3      	b.n	e75a <request_nb_iot_network_stats+0x256>
	else if (strstr(buf, "ERROR") != NULL) 
    e7f2:	4915      	ldr	r1, [pc, #84]	; (e848 <request_nb_iot_network_stats+0x344>)
    e7f4:	4668      	mov	r0, sp
    e7f6:	f015 ff6f 	bl	246d8 <strstr>
    e7fa:	2800      	cmp	r0, #0
    e7fc:	d0cb      	beq.n	e796 <request_nb_iot_network_stats+0x292>
		LOG_ERR("Error while getting neighbor data!");
    e7fe:	f04f 0100 	mov.w	r1, #0
    e802:	2301      	movs	r3, #1
    e804:	f363 0107 	bfi	r1, r3, #0, #8
    e808:	f364 118f 	bfi	r1, r4, #6, #10
    e80c:	481f      	ldr	r0, [pc, #124]	; (e88c <request_nb_iot_network_stats+0x388>)
    e80e:	e6af      	b.n	e570 <request_nb_iot_network_stats+0x6c>
    e810:	0002652c 	.word	0x0002652c
    e814:	000264bc 	.word	0x000264bc
    e818:	00027e5b 	.word	0x00027e5b
    e81c:	00027e7e 	.word	0x00027e7e
    e820:	00027e84 	.word	0x00027e84
    e824:	00027e8e 	.word	0x00027e8e
    e828:	00027e9f 	.word	0x00027e9f
    e82c:	0002803a 	.word	0x0002803a
    e830:	00027eb2 	.word	0x00027eb2
    e834:	2002737c 	.word	0x2002737c
    e838:	00027eb6 	.word	0x00027eb6
    e83c:	00027ef9 	.word	0x00027ef9
    e840:	00027ef6 	.word	0x00027ef6
    e844:	00027efe 	.word	0x00027efe
    e848:	00027ecb 	.word	0x00027ecb
    e84c:	00027ed1 	.word	0x00027ed1
    e850:	00027f0e 	.word	0x00027f0e
    e854:	20027386 	.word	0x20027386
    e858:	00027f20 	.word	0x00027f20
    e85c:	00027f57 	.word	0x00027f57
    e860:	00027f54 	.word	0x00027f54
    e864:	00027f60 	.word	0x00027f60
    e868:	00027f32 	.word	0x00027f32
    e86c:	00027f74 	.word	0x00027f74
    e870:	00027f8a 	.word	0x00027f8a
    e874:	20027390 	.word	0x20027390
    e878:	00027f96 	.word	0x00027f96
    e87c:	00027fa5 	.word	0x00027fa5
    e880:	00027fd0 	.word	0x00027fd0
    e884:	00027fd8 	.word	0x00027fd8
    e888:	00027fe0 	.word	0x00027fe0
    e88c:	00027fad 	.word	0x00027fad

0000e890 <slm_at_tcpip_init>:

/**@brief API to initialize TCP/IP AT commands handler
 */
int slm_at_tcpip_init(at_cmd_handler_t callback)
{
    e890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e894:	4a65      	ldr	r2, [pc, #404]	; (ea2c <slm_at_tcpip_init+0x19c>)
    e896:	4c66      	ldr	r4, [pc, #408]	; (ea30 <slm_at_tcpip_init+0x1a0>)
    e898:	b0a7      	sub	sp, #156	; 0x9c
    e89a:	1aa4      	subs	r4, r4, r2
    e89c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (callback == NULL) {
    e8a0:	b970      	cbnz	r0, e8c0 <slm_at_tcpip_init+0x30>
		LOG_ERR("No callback");
    e8a2:	2301      	movs	r3, #1
    e8a4:	f04f 0100 	mov.w	r1, #0
    e8a8:	f363 0107 	bfi	r1, r3, #0, #8
    e8ac:	4861      	ldr	r0, [pc, #388]	; (ea34 <slm_at_tcpip_init+0x1a4>)
    e8ae:	f364 118f 	bfi	r1, r4, #6, #10
    e8b2:	f015 fa4e 	bl	23d52 <log_0>
		return -EINVAL;
    e8b6:	f06f 0015 	mvn.w	r0, #21
	client.callback = callback;
	//init nb_iot module & udp socket
	init_nb_iot_parameters();
	do_socket_open(2);
	return 0;
}
    e8ba:	b027      	add	sp, #156	; 0x9c
    e8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	client.sock = INVALID_SOCKET;
    e8c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	client.ip_proto = IPPROTO_IP;
    e8c4:	2600      	movs	r6, #0
	client.sock = INVALID_SOCKET;
    e8c6:	4a5c      	ldr	r2, [pc, #368]	; (ea38 <slm_at_tcpip_init+0x1a8>)
    e8c8:	6011      	str	r1, [r2, #0]
	client.callback = callback;
    e8ca:	6090      	str	r0, [r2, #8]
	client.ip_proto = IPPROTO_IP;
    e8cc:	8096      	strh	r6, [r2, #4]
	LOG_INF("Initializing NB-IoT Parameters");
    e8ce:	f04f 0100 	mov.w	r1, #0
    e8d2:	2203      	movs	r2, #3
    e8d4:	f362 0107 	bfi	r1, r2, #0, #8
    e8d8:	f364 118f 	bfi	r1, r4, #6, #10
    e8dc:	4857      	ldr	r0, [pc, #348]	; (ea3c <slm_at_tcpip_init+0x1ac>)
    e8de:	f015 fa38 	bl	23d52 <log_0>
	at_sock = socket(AF_LTE, 0, NPROTO_AT);
    e8e2:	f240 2201 	movw	r2, #513	; 0x201
    e8e6:	4631      	mov	r1, r6
    e8e8:	2066      	movs	r0, #102	; 0x66
    e8ea:	f7fe ff7d 	bl	d7e8 <socket>
	if (at_sock < 0) {
    e8ee:	1e05      	subs	r5, r0, #0
    e8f0:	db26      	blt.n	e940 <slm_at_tcpip_init+0xb0>
    e8f2:	4f53      	ldr	r7, [pc, #332]	; (ea40 <slm_at_tcpip_init+0x1b0>)
		if (memcmp(buf, "OK", 2) != 0) {
    e8f4:	f8df a168 	ldr.w	sl, [pc, #360]	; ea60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1>
		LOG_INF("%s",nb_init_at_commands[i]);
    e8f8:	f02b 023f 	bic.w	r2, fp, #63	; 0x3f
    e8fc:	f042 0203 	orr.w	r2, r2, #3
    e900:	f362 0b07 	bfi	fp, r2, #0, #8
    e904:	f364 1b8f 	bfi	fp, r4, #6, #10
    e908:	465a      	mov	r2, fp
    e90a:	4639      	mov	r1, r7
    e90c:	484d      	ldr	r0, [pc, #308]	; (ea44 <slm_at_tcpip_init+0x1b4>)
    e90e:	f015 fa2d 	bl	23d6c <log_1>
		bytes_sent = send(at_sock, nb_init_at_commands[i],
    e912:	4638      	mov	r0, r7
    e914:	f015 ff2b 	bl	2476e <strlen>
    e918:	4639      	mov	r1, r7
    e91a:	4602      	mov	r2, r0
    e91c:	4628      	mov	r0, r5
    e91e:	f7ff f887 	bl	da30 <send.constprop.10>
		if (bytes_sent < 0) {
    e922:	2800      	cmp	r0, #0
    e924:	da11      	bge.n	e94a <slm_at_tcpip_init+0xba>
			LOG_INF("NO BYTES SENT");
    e926:	f04f 0100 	mov.w	r1, #0
    e92a:	2303      	movs	r3, #3
    e92c:	4846      	ldr	r0, [pc, #280]	; (ea48 <slm_at_tcpip_init+0x1b8>)
    e92e:	f363 0107 	bfi	r1, r3, #0, #8
    e932:	f364 118f 	bfi	r1, r4, #6, #10
			LOG_INF("NOK");
    e936:	f015 fa0c 	bl	23d52 <log_0>
			close(at_sock);
    e93a:	4628      	mov	r0, r5
    e93c:	f7fe ff5a 	bl	d7f4 <close>
	do_socket_open(2);
    e940:	2002      	movs	r0, #2
    e942:	f7fe ff9b 	bl	d87c <do_socket_open>
	return 0;
    e946:	2000      	movs	r0, #0
    e948:	e7b7      	b.n	e8ba <slm_at_tcpip_init+0x2a>
			bytes_received = recv(at_sock, buf, 2, 0);
    e94a:	2202      	movs	r2, #2
    e94c:	4669      	mov	r1, sp
    e94e:	4628      	mov	r0, r5
    e950:	f7ff f9f8 	bl	dd44 <recv.constprop.17>
		} while (bytes_received == 0);
    e954:	2800      	cmp	r0, #0
    e956:	d0f8      	beq.n	e94a <slm_at_tcpip_init+0xba>
		if (memcmp(buf, "OK", 2) != 0) {
    e958:	2202      	movs	r2, #2
    e95a:	4651      	mov	r1, sl
    e95c:	4668      	mov	r0, sp
    e95e:	f015 ff28 	bl	247b2 <memcmp>
    e962:	b140      	cbz	r0, e976 <slm_at_tcpip_init+0xe6>
			LOG_INF("NOK");
    e964:	f04f 0100 	mov.w	r1, #0
    e968:	2303      	movs	r3, #3
    e96a:	f363 0107 	bfi	r1, r3, #0, #8
    e96e:	f364 118f 	bfi	r1, r4, #6, #10
    e972:	4836      	ldr	r0, [pc, #216]	; (ea4c <slm_at_tcpip_init+0x1bc>)
    e974:	e7df      	b.n	e936 <slm_at_tcpip_init+0xa6>
			LOG_INF("OK");
    e976:	f029 023f 	bic.w	r2, r9, #63	; 0x3f
    e97a:	f042 0203 	orr.w	r2, r2, #3
    e97e:	f362 0907 	bfi	r9, r2, #0, #8
    e982:	f364 198f 	bfi	r9, r4, #6, #10
    e986:	4649      	mov	r1, r9
    e988:	4650      	mov	r0, sl
    e98a:	f015 f9e2 	bl	23d52 <log_0>
	for (int i = 0; i < ARRAY_SIZE(nb_init_at_commands); i++) {
    e98e:	3601      	adds	r6, #1
		k_sleep(K_SECONDS(3));
    e990:	f640 30b8 	movw	r0, #3000	; 0xbb8
    e994:	f014 fe37 	bl	23606 <k_sleep>
	for (int i = 0; i < ARRAY_SIZE(nb_init_at_commands); i++) {
    e998:	2e04      	cmp	r6, #4
    e99a:	f107 0722 	add.w	r7, r7, #34	; 0x22
    e99e:	d1ab      	bne.n	e8f8 <slm_at_tcpip_init+0x68>
		bytes_sent = send(at_sock, AT_NBRGRSRP, strlen(AT_NBRGRSRP), 0);
    e9a0:	4e2b      	ldr	r6, [pc, #172]	; (ea50 <slm_at_tcpip_init+0x1c0>)
		LOG_INF("NBRGRSRP RESPONSE: %s", buf);
    e9a2:	f8df 90c0 	ldr.w	r9, [pc, #192]	; ea64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4>
		if(strstr(buf, "NBRGRSRP:") != NULL)
    e9a6:	4f2b      	ldr	r7, [pc, #172]	; (ea54 <slm_at_tcpip_init+0x1c4>)
		bytes_sent = send(at_sock, AT_NBRGRSRP, strlen(AT_NBRGRSRP), 0);
    e9a8:	4630      	mov	r0, r6
    e9aa:	f015 fee0 	bl	2476e <strlen>
    e9ae:	4631      	mov	r1, r6
    e9b0:	4602      	mov	r2, r0
    e9b2:	4628      	mov	r0, r5
    e9b4:	f7ff f83c 	bl	da30 <send.constprop.10>
		if (bytes_sent < 0) {
    e9b8:	2800      	cmp	r0, #0
    e9ba:	da08      	bge.n	e9ce <slm_at_tcpip_init+0x13e>
			LOG_INF("NBRGRSRP send error");
    e9bc:	f04f 0100 	mov.w	r1, #0
    e9c0:	2303      	movs	r3, #3
    e9c2:	f363 0107 	bfi	r1, r3, #0, #8
    e9c6:	f364 118f 	bfi	r1, r4, #6, #10
    e9ca:	4823      	ldr	r0, [pc, #140]	; (ea58 <slm_at_tcpip_init+0x1c8>)
    e9cc:	e7b3      	b.n	e936 <slm_at_tcpip_init+0xa6>
			bytes_received = recv(at_sock, buf, 150, 0);
    e9ce:	2296      	movs	r2, #150	; 0x96
    e9d0:	4669      	mov	r1, sp
    e9d2:	4628      	mov	r0, r5
    e9d4:	f7ff f9b6 	bl	dd44 <recv.constprop.17>
		} while (bytes_received == 0);
    e9d8:	2800      	cmp	r0, #0
    e9da:	d0f8      	beq.n	e9ce <slm_at_tcpip_init+0x13e>
		LOG_INF("NBRGRSRP RESPONSE: %s", buf);
    e9dc:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    e9e0:	f043 0303 	orr.w	r3, r3, #3
    e9e4:	f363 0807 	bfi	r8, r3, #0, #8
    e9e8:	f364 188f 	bfi	r8, r4, #6, #10
    e9ec:	4642      	mov	r2, r8
    e9ee:	4669      	mov	r1, sp
    e9f0:	4648      	mov	r0, r9
    e9f2:	f015 f9bb 	bl	23d6c <log_1>
		if(strstr(buf, "NBRGRSRP:") != NULL)
    e9f6:	4639      	mov	r1, r7
    e9f8:	4668      	mov	r0, sp
    e9fa:	f015 fe6d 	bl	246d8 <strstr>
    e9fe:	4682      	mov	sl, r0
		k_sleep(K_SECONDS(3));
    ea00:	f640 30b8 	movw	r0, #3000	; 0xbb8
    ea04:	f014 fdff 	bl	23606 <k_sleep>
	while(neighbors_found == 0)
    ea08:	f1ba 0f00 	cmp.w	sl, #0
    ea0c:	d0cc      	beq.n	e9a8 <slm_at_tcpip_init+0x118>
	close(at_sock);
    ea0e:	4628      	mov	r0, r5
    ea10:	f7fe fef0 	bl	d7f4 <close>
	LOG_INF("NB-IoT Parameters Initialized");
    ea14:	2303      	movs	r3, #3
    ea16:	f04f 0100 	mov.w	r1, #0
    ea1a:	f363 0107 	bfi	r1, r3, #0, #8
    ea1e:	f364 118f 	bfi	r1, r4, #6, #10
    ea22:	480e      	ldr	r0, [pc, #56]	; (ea5c <slm_at_tcpip_init+0x1cc>)
    ea24:	f015 f995 	bl	23d52 <log_0>
	return 0;
    ea28:	e78a      	b.n	e940 <slm_at_tcpip_init+0xb0>
    ea2a:	bf00      	nop
    ea2c:	000264bc 	.word	0x000264bc
    ea30:	0002652c 	.word	0x0002652c
    ea34:	00028000 	.word	0x00028000
    ea38:	20020100 	.word	0x20020100
    ea3c:	0002800c 	.word	0x0002800c
    ea40:	00027d9c 	.word	0x00027d9c
    ea44:	00027eaf 	.word	0x00027eaf
    ea48:	0002802b 	.word	0x0002802b
    ea4c:	00028039 	.word	0x00028039
    ea50:	00027f54 	.word	0x00027f54
    ea54:	0002803d 	.word	0x0002803d
    ea58:	00027f60 	.word	0x00027f60
    ea5c:	00028047 	.word	0x00028047
    ea60:	0002803a 	.word	0x0002803a
    ea64:	00027f74 	.word	0x00027f74

0000ea68 <close>:
	return socket_ops->close(sock);
    ea68:	4b01      	ldr	r3, [pc, #4]	; (ea70 <close+0x8>)
    ea6a:	681b      	ldr	r3, [r3, #0]
    ea6c:	685b      	ldr	r3, [r3, #4]
    ea6e:	4718      	bx	r3
    ea70:	20020314 	.word	0x20020314

0000ea74 <gps_thread_fn>:
	current_gps_data.hdop = gps_data.pvt.hdop;
	current_gps_data.datetime = gps_data.pvt.datetime;
}

static void gps_thread_fn(void *arg1, void *arg2, void *arg3)
{
    ea74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ARG_UNUSED(arg1);
	ARG_UNUSED(arg2);
	ARG_UNUSED(arg3);

	while (true) {
		if (nrf_recv(client.sock, &gps_data, sizeof(gps_data), 0)
    ea78:	4f63      	ldr	r7, [pc, #396]	; (ec08 <gps_thread_fn+0x194>)
    ea7a:	4b64      	ldr	r3, [pc, #400]	; (ec0c <gps_thread_fn+0x198>)
    ea7c:	463d      	mov	r5, r7
				}
			}
			break;
		case NRF_GNSS_NMEA_DATA_ID:
			if (client.has_fix) {
				LOG_INF("GPS FIX client.has_fix");	
    ea7e:	4a64      	ldr	r2, [pc, #400]	; (ec10 <gps_thread_fn+0x19c>)
		if (nrf_recv(client.sock, &gps_data, sizeof(gps_data), 0)
    ea80:	4c64      	ldr	r4, [pc, #400]	; (ec14 <gps_thread_fn+0x1a0>)
				LOG_INF("GPS FIX client.has_fix");	
    ea82:	1a9b      	subs	r3, r3, r2
{
    ea84:	b085      	sub	sp, #20
				LOG_INF("GPS FIX client.has_fix");	
    ea86:	f3c3 0bc9 	ubfx	fp, r3, #3, #10
		if (nrf_recv(client.sock, &gps_data, sizeof(gps_data), 0)
    ea8a:	2300      	movs	r3, #0
    ea8c:	22d8      	movs	r2, #216	; 0xd8
    ea8e:	4961      	ldr	r1, [pc, #388]	; (ec14 <gps_thread_fn+0x1a0>)
    ea90:	6838      	ldr	r0, [r7, #0]
    ea92:	f005 fc4d 	bl	14330 <nrf_recv>
    ea96:	2800      	cmp	r0, #0
    ea98:	dc21      	bgt.n	eade <gps_thread_fn+0x6a>
			LOG_ERR("GPS nrf_recv(): %d", -errno);
    ea9a:	2301      	movs	r3, #1
    ea9c:	f04f 0400 	mov.w	r4, #0
    eaa0:	f363 0407 	bfi	r4, r3, #0, #8
    eaa4:	f014 fdc2 	bl	2362c <z_errno>
    eaa8:	6801      	ldr	r1, [r0, #0]
    eaaa:	f36b 148f 	bfi	r4, fp, #6, #10
    eaae:	4622      	mov	r2, r4
    eab0:	4249      	negs	r1, r1
    eab2:	4859      	ldr	r0, [pc, #356]	; (ec18 <gps_thread_fn+0x1a4>)
    eab4:	f015 f95a 	bl	23d6c <log_1>
			sprintf(buf, "#XGPSRUN: %d\r\n", -errno);
    eab8:	f014 fdb8 	bl	2362c <z_errno>
    eabc:	6802      	ldr	r2, [r0, #0]
    eabe:	4957      	ldr	r1, [pc, #348]	; (ec1c <gps_thread_fn+0x1a8>)
    eac0:	4252      	negs	r2, r2
    eac2:	4857      	ldr	r0, [pc, #348]	; (ec20 <gps_thread_fn+0x1ac>)
    eac4:	f002 fda2 	bl	1160c <sprintf>
			client.callback(buf);
    eac8:	68bb      	ldr	r3, [r7, #8]
    eaca:	4855      	ldr	r0, [pc, #340]	; (ec20 <gps_thread_fn+0x1ac>)
    eacc:	4798      	blx	r3
			nrf_close(client.sock);
    eace:	6838      	ldr	r0, [r7, #0]
    ead0:	f005 fbce 	bl	14270 <nrf_close>
			client.running = false;
    ead4:	2300      	movs	r3, #0
    ead6:	71bb      	strb	r3, [r7, #6]
			break;
		default:
			break;
		}
	}
}
    ead8:	b005      	add	sp, #20
    eada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (gps_data.data_id != NRF_GNSS_PVT_DATA_ID || client.has_fix) {
    eade:	7823      	ldrb	r3, [r4, #0]
    eae0:	2b01      	cmp	r3, #1
    eae2:	d130      	bne.n	eb46 <gps_thread_fn+0xd2>
    eae4:	79fa      	ldrb	r2, [r7, #7]
    eae6:	2a00      	cmp	r2, #0
    eae8:	d148      	bne.n	eb7c <gps_thread_fn+0x108>
	u8_t in_fix = 0;
    eaea:	4613      	mov	r3, r2
	u8_t tracked = 0;
    eaec:	4616      	mov	r6, r2
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
    eaee:	4610      	mov	r0, r2
    eaf0:	4948      	ldr	r1, [pc, #288]	; (ec14 <gps_thread_fn+0x1a0>)
		if ((gps_data.pvt.sv[i].sv > 0) &&
    eaf2:	f8b1 c046 	ldrh.w	ip, [r1, #70]	; 0x46
    eaf6:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    eafa:	f1bc 0f1f 	cmp.w	ip, #31
    eafe:	d80e      	bhi.n	eb1e <gps_thread_fn+0xaa>
			if (IS_FIX(gps_data.pvt.sv[i].flags)) {
    eb00:	f891 c050 	ldrb.w	ip, [r1, #80]	; 0x50
			tracked++;
    eb04:	3601      	adds	r6, #1
			if (IS_FIX(gps_data.pvt.sv[i].flags)) {
    eb06:	f01c 0f01 	tst.w	ip, #1
				in_fix++;
    eb0a:	bf1c      	itt	ne
    eb0c:	3301      	addne	r3, #1
    eb0e:	b2db      	uxtbne	r3, r3
			if (IS_UNHEALTHY(gps_data.pvt.sv[i].flags)) {
    eb10:	f01c 0f08 	tst.w	ip, #8
				unhealthy++;
    eb14:	bf18      	it	ne
    eb16:	3201      	addne	r2, #1
			tracked++;
    eb18:	b2f6      	uxtb	r6, r6
				unhealthy++;
    eb1a:	bf18      	it	ne
    eb1c:	b2d2      	uxtbne	r2, r2
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
    eb1e:	3001      	adds	r0, #1
    eb20:	280c      	cmp	r0, #12
    eb22:	f101 010c 	add.w	r1, r1, #12
    eb26:	d1e4      	bne.n	eaf2 <gps_thread_fn+0x7e>
	if (last_tracked != tracked) {
    eb28:	493e      	ldr	r1, [pc, #248]	; (ec24 <gps_thread_fn+0x1b0>)
    eb2a:	7809      	ldrb	r1, [r1, #0]
    eb2c:	42b1      	cmp	r1, r6
    eb2e:	d025      	beq.n	eb7c <gps_thread_fn+0x108>
		sprintf(buf, "#XGPSS: tracking %d using %d unhealthy %d\r\n",
    eb30:	493d      	ldr	r1, [pc, #244]	; (ec28 <gps_thread_fn+0x1b4>)
    eb32:	9200      	str	r2, [sp, #0]
    eb34:	483a      	ldr	r0, [pc, #232]	; (ec20 <gps_thread_fn+0x1ac>)
    eb36:	4632      	mov	r2, r6
    eb38:	f002 fd68 	bl	1160c <sprintf>
		client.callback(buf);
    eb3c:	68ab      	ldr	r3, [r5, #8]
    eb3e:	4838      	ldr	r0, [pc, #224]	; (ec20 <gps_thread_fn+0x1ac>)
    eb40:	4798      	blx	r3
		last_tracked = tracked;
    eb42:	4938      	ldr	r1, [pc, #224]	; (ec24 <gps_thread_fn+0x1b0>)
    eb44:	700e      	strb	r6, [r1, #0]
		switch (gps_data.data_id) {
    eb46:	7823      	ldrb	r3, [r4, #0]
    eb48:	2b01      	cmp	r3, #1
    eb4a:	d017      	beq.n	eb7c <gps_thread_fn+0x108>
    eb4c:	2b02      	cmp	r3, #2
    eb4e:	d19c      	bne.n	ea8a <gps_thread_fn+0x16>
			if (client.has_fix) {
    eb50:	79eb      	ldrb	r3, [r5, #7]
    eb52:	2b00      	cmp	r3, #0
    eb54:	d099      	beq.n	ea8a <gps_thread_fn+0x16>
				LOG_INF("GPS FIX client.has_fix");	
    eb56:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    eb5a:	f043 0303 	orr.w	r3, r3, #3
    eb5e:	f363 0807 	bfi	r8, r3, #0, #8
    eb62:	f36b 188f 	bfi	r8, fp, #6, #10
    eb66:	4641      	mov	r1, r8
    eb68:	4830      	ldr	r0, [pc, #192]	; (ec2c <gps_thread_fn+0x1b8>)
    eb6a:	f015 f8f2 	bl	23d52 <log_0>
				client.callback("#XGPSN: ");
    eb6e:	68ab      	ldr	r3, [r5, #8]
    eb70:	482f      	ldr	r0, [pc, #188]	; (ec30 <gps_thread_fn+0x1bc>)
    eb72:	4798      	blx	r3
				client.callback(gps_data.nmea);
    eb74:	68ab      	ldr	r3, [r5, #8]
    eb76:	482f      	ldr	r0, [pc, #188]	; (ec34 <gps_thread_fn+0x1c0>)
    eb78:	4798      	blx	r3
    eb7a:	e786      	b.n	ea8a <gps_thread_fn+0x16>
			if (IS_FIX(gps_data.pvt.flags)) {
    eb7c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    eb80:	07db      	lsls	r3, r3, #31
    eb82:	d582      	bpl.n	ea8a <gps_thread_fn+0x16>
				LOG_INF("GPS FIX PVT DATA");
    eb84:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
    eb88:	f043 0303 	orr.w	r3, r3, #3
    eb8c:	f363 0a07 	bfi	sl, r3, #0, #8
    eb90:	f36b 1a8f 	bfi	sl, fp, #6, #10
    eb94:	4651      	mov	r1, sl
    eb96:	4828      	ldr	r0, [pc, #160]	; (ec38 <gps_thread_fn+0x1c4>)
    eb98:	f015 f8db 	bl	23d52 <log_0>
	sprintf(buf, "#XGPSP: long %f lat %f\r\n",
    eb9c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    eba0:	e9cd 2300 	strd	r2, r3, [sp]
    eba4:	4925      	ldr	r1, [pc, #148]	; (ec3c <gps_thread_fn+0x1c8>)
    eba6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    ebaa:	481d      	ldr	r0, [pc, #116]	; (ec20 <gps_thread_fn+0x1ac>)
    ebac:	f002 fd2e 	bl	1160c <sprintf>
	client.callback(buf);
    ebb0:	68ab      	ldr	r3, [r5, #8]
    ebb2:	481b      	ldr	r0, [pc, #108]	; (ec20 <gps_thread_fn+0x1ac>)
    ebb4:	4798      	blx	r3
	sprintf(buf, "#XGPSP: %04u-%02u-%02u %02u:%02u:%02u\r\n",
    ebb6:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    ebba:	4921      	ldr	r1, [pc, #132]	; (ec40 <gps_thread_fn+0x1cc>)
    ebbc:	9303      	str	r3, [sp, #12]
    ebbe:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    ebc2:	4817      	ldr	r0, [pc, #92]	; (ec20 <gps_thread_fn+0x1ac>)
    ebc4:	9302      	str	r3, [sp, #8]
    ebc6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    ebca:	9301      	str	r3, [sp, #4]
    ebcc:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    ebd0:	9300      	str	r3, [sp, #0]
    ebd2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    ebd4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    ebd8:	f002 fd18 	bl	1160c <sprintf>
	client.callback(buf);
    ebdc:	68ab      	ldr	r3, [r5, #8]
    ebde:	4810      	ldr	r0, [pc, #64]	; (ec20 <gps_thread_fn+0x1ac>)
    ebe0:	4798      	blx	r3
	LOG_INF("Updating current GPS data");
    ebe2:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    ebe6:	f043 0303 	orr.w	r3, r3, #3
    ebea:	f363 0907 	bfi	r9, r3, #0, #8
    ebee:	f36b 198f 	bfi	r9, fp, #6, #10
    ebf2:	4649      	mov	r1, r9
    ebf4:	4813      	ldr	r0, [pc, #76]	; (ec44 <gps_thread_fn+0x1d0>)
    ebf6:	f015 f8ac 	bl	23d52 <log_0>
				if (!client.has_fix) {
    ebfa:	79eb      	ldrb	r3, [r5, #7]
    ebfc:	2b00      	cmp	r3, #0
    ebfe:	f47f af44 	bne.w	ea8a <gps_thread_fn+0x16>
					client.has_fix = true;
    ec02:	2301      	movs	r3, #1
    ec04:	71eb      	strb	r3, [r5, #7]
    ec06:	e740      	b.n	ea8a <gps_thread_fn+0x16>
    ec08:	2002010c 	.word	0x2002010c
    ec0c:	000264ec 	.word	0x000264ec
    ec10:	000264bc 	.word	0x000264bc
    ec14:	20020000 	.word	0x20020000
    ec18:	0002822e 	.word	0x0002822e
    ec1c:	00028241 	.word	0x00028241
    ec20:	200273c2 	.word	0x200273c2
    ec24:	20027402 	.word	0x20027402
    ec28:	00028250 	.word	0x00028250
    ec2c:	000282e8 	.word	0x000282e8
    ec30:	000282ff 	.word	0x000282ff
    ec34:	20020008 	.word	0x20020008
    ec38:	0002827c 	.word	0x0002827c
    ec3c:	0002828d 	.word	0x0002828d
    ec40:	000282a6 	.word	0x000282a6
    ec44:	000282ce 	.word	0x000282ce

0000ec48 <do_gps_start>:
static int do_gps_start(void)
{
	LOG_DBG("do_gps_start");
	int ret = -EINVAL;

	nrf_gnss_fix_retry_t    fix_retry    = 0; /* unlimited retry period */
    ec48:	2300      	movs	r3, #0
{
    ec4a:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_gnss_fix_interval_t fix_interval = 1; /* 1s delay between fixes */
    ec4c:	2701      	movs	r7, #1
	nrf_gnss_delete_mask_t  delete_mask  = 0;
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)client.mask;
    ec4e:	4d6e      	ldr	r5, [pc, #440]	; (ee08 <do_gps_start+0x1c0>)
{
    ec50:	b08b      	sub	sp, #44	; 0x2c
	nrf_gnss_fix_retry_t    fix_retry    = 0; /* unlimited retry period */
    ec52:	f8ad 301e 	strh.w	r3, [sp, #30]
	nrf_gnss_delete_mask_t  delete_mask  = 0;
    ec56:	9309      	str	r3, [sp, #36]	; 0x24
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)client.mask;
    ec58:	88ab      	ldrh	r3, [r5, #4]
	
	client.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    ec5a:	f44f 7201 	mov.w	r2, #516	; 0x204
    ec5e:	2102      	movs	r1, #2
    ec60:	4638      	mov	r0, r7
	nrf_gnss_fix_interval_t fix_interval = 1; /* 1s delay between fixes */
    ec62:	f8ad 7020 	strh.w	r7, [sp, #32]
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)client.mask;
    ec66:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	client.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    ec6a:	f005 faef 	bl	1424c <nrf_socket>
	if (client.sock < 0) {
    ec6e:	2800      	cmp	r0, #0
	client.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    ec70:	6028      	str	r0, [r5, #0]
	if (client.sock < 0) {
    ec72:	da31      	bge.n	ecd8 <do_gps_start+0x90>
		LOG_ERR("Could not init socket (err: %d)", -errno);
    ec74:	f04f 0400 	mov.w	r4, #0
    ec78:	4a64      	ldr	r2, [pc, #400]	; (ee0c <do_gps_start+0x1c4>)
    ec7a:	4b65      	ldr	r3, [pc, #404]	; (ee10 <do_gps_start+0x1c8>)
    ec7c:	f367 0407 	bfi	r4, r7, #0, #8
    ec80:	1a9b      	subs	r3, r3, r2
    ec82:	08db      	lsrs	r3, r3, #3
    ec84:	f363 148f 	bfi	r4, r3, #6, #10
    ec88:	f014 fcd0 	bl	2362c <z_errno>
    ec8c:	6801      	ldr	r1, [r0, #0]
    ec8e:	4622      	mov	r2, r4
    ec90:	4249      	negs	r1, r1
    ec92:	4860      	ldr	r0, [pc, #384]	; (ee14 <do_gps_start+0x1cc>)
    ec94:	f015 f86a 	bl	23d6c <log_1>
	int ret = -EINVAL;
    ec98:	f06f 0415 	mvn.w	r4, #21
	sprintf(buf, "#XGPSRUN: 1,%d\r\n", client.mask);
	client.callback(buf);
	return 0;

error:
	LOG_ERR("GPS start failed: %d", ret);
    ec9c:	2301      	movs	r3, #1
    ec9e:	f04f 0200 	mov.w	r2, #0
    eca2:	495a      	ldr	r1, [pc, #360]	; (ee0c <do_gps_start+0x1c4>)
    eca4:	f363 0207 	bfi	r2, r3, #0, #8
    eca8:	4b59      	ldr	r3, [pc, #356]	; (ee10 <do_gps_start+0x1c8>)
    ecaa:	485b      	ldr	r0, [pc, #364]	; (ee18 <do_gps_start+0x1d0>)
    ecac:	1a5b      	subs	r3, r3, r1
    ecae:	08db      	lsrs	r3, r3, #3
    ecb0:	f363 128f 	bfi	r2, r3, #6, #10
    ecb4:	4621      	mov	r1, r4
    ecb6:	f015 f859 	bl	23d6c <log_1>
	sprintf(buf, "#XGPSRUN: %d\r\n", ret);
    ecba:	4622      	mov	r2, r4
    ecbc:	4957      	ldr	r1, [pc, #348]	; (ee1c <do_gps_start+0x1d4>)
    ecbe:	4858      	ldr	r0, [pc, #352]	; (ee20 <do_gps_start+0x1d8>)
    ecc0:	f002 fca4 	bl	1160c <sprintf>
	client.callback(buf);
    ecc4:	68ab      	ldr	r3, [r5, #8]
    ecc6:	4856      	ldr	r0, [pc, #344]	; (ee20 <do_gps_start+0x1d8>)
    ecc8:	4798      	blx	r3
	client.running = false;
    ecca:	2300      	movs	r3, #0
    eccc:	71ab      	strb	r3, [r5, #6]

	return -errno;
    ecce:	f014 fcad 	bl	2362c <z_errno>
    ecd2:	6804      	ldr	r4, [r0, #0]
    ecd4:	4264      	negs	r4, r4
    ecd6:	e083      	b.n	ede0 <do_gps_start+0x198>
	ret = nrf_setsockopt(client.sock, NRF_SOL_GNSS, NRF_SO_GNSS_FIX_RETRY,
    ecd8:	2602      	movs	r6, #2
    ecda:	f10d 031e 	add.w	r3, sp, #30
    ecde:	9600      	str	r6, [sp, #0]
    ece0:	4632      	mov	r2, r6
    ece2:	f44f 7101 	mov.w	r1, #516	; 0x204
    ece6:	f005 fb87 	bl	143f8 <nrf_setsockopt>
	if (ret != 0) {
    ecea:	4604      	mov	r4, r0
    ecec:	b198      	cbz	r0, ed16 <do_gps_start+0xce>
		LOG_ERR("Failed to set fix retry value (err: %d)", -errno);
    ecee:	2301      	movs	r3, #1
    ecf0:	f04f 0600 	mov.w	r6, #0
    ecf4:	4a45      	ldr	r2, [pc, #276]	; (ee0c <do_gps_start+0x1c4>)
    ecf6:	f363 0607 	bfi	r6, r3, #0, #8
    ecfa:	4b45      	ldr	r3, [pc, #276]	; (ee10 <do_gps_start+0x1c8>)
    ecfc:	1a9b      	subs	r3, r3, r2
    ecfe:	08db      	lsrs	r3, r3, #3
    ed00:	f363 168f 	bfi	r6, r3, #6, #10
    ed04:	f014 fc92 	bl	2362c <z_errno>
    ed08:	4632      	mov	r2, r6
    ed0a:	6801      	ldr	r1, [r0, #0]
    ed0c:	4845      	ldr	r0, [pc, #276]	; (ee24 <do_gps_start+0x1dc>)
    ed0e:	4249      	negs	r1, r1
		LOG_ERR("Failed to start GPS (err: %d)", -errno);
    ed10:	f015 f82c 	bl	23d6c <log_1>
		goto error;
    ed14:	e7c2      	b.n	ec9c <do_gps_start+0x54>
	ret = nrf_setsockopt(client.sock, NRF_SOL_GNSS,
    ed16:	9600      	str	r6, [sp, #0]
    ed18:	ab08      	add	r3, sp, #32
    ed1a:	463a      	mov	r2, r7
    ed1c:	f44f 7101 	mov.w	r1, #516	; 0x204
    ed20:	6828      	ldr	r0, [r5, #0]
    ed22:	f005 fb69 	bl	143f8 <nrf_setsockopt>
	if (ret != 0) {
    ed26:	4604      	mov	r4, r0
    ed28:	b188      	cbz	r0, ed4e <do_gps_start+0x106>
		LOG_ERR("Failed to set fix interval value (err: %d)", -errno);
    ed2a:	2301      	movs	r3, #1
    ed2c:	f04f 0600 	mov.w	r6, #0
    ed30:	4a36      	ldr	r2, [pc, #216]	; (ee0c <do_gps_start+0x1c4>)
    ed32:	f363 0607 	bfi	r6, r3, #0, #8
    ed36:	4b36      	ldr	r3, [pc, #216]	; (ee10 <do_gps_start+0x1c8>)
    ed38:	1a9b      	subs	r3, r3, r2
    ed3a:	08db      	lsrs	r3, r3, #3
    ed3c:	f363 168f 	bfi	r6, r3, #6, #10
    ed40:	f014 fc74 	bl	2362c <z_errno>
    ed44:	6801      	ldr	r1, [r0, #0]
    ed46:	4632      	mov	r2, r6
    ed48:	4249      	negs	r1, r1
    ed4a:	4837      	ldr	r0, [pc, #220]	; (ee28 <do_gps_start+0x1e0>)
    ed4c:	e7e0      	b.n	ed10 <do_gps_start+0xc8>
	ret = nrf_setsockopt(client.sock, NRF_SOL_GNSS, NRF_SO_GNSS_NMEA_MASK,
    ed4e:	9600      	str	r6, [sp, #0]
    ed50:	f10d 0322 	add.w	r3, sp, #34	; 0x22
    ed54:	2204      	movs	r2, #4
    ed56:	f44f 7101 	mov.w	r1, #516	; 0x204
    ed5a:	6828      	ldr	r0, [r5, #0]
    ed5c:	f005 fb4c 	bl	143f8 <nrf_setsockopt>
	if (ret != 0) {
    ed60:	4604      	mov	r4, r0
    ed62:	b188      	cbz	r0, ed88 <do_gps_start+0x140>
		LOG_ERR("Failed to set nmea mask (err: %d)", -errno);
    ed64:	2301      	movs	r3, #1
    ed66:	f04f 0600 	mov.w	r6, #0
    ed6a:	4a28      	ldr	r2, [pc, #160]	; (ee0c <do_gps_start+0x1c4>)
    ed6c:	f363 0607 	bfi	r6, r3, #0, #8
    ed70:	4b27      	ldr	r3, [pc, #156]	; (ee10 <do_gps_start+0x1c8>)
    ed72:	1a9b      	subs	r3, r3, r2
    ed74:	08db      	lsrs	r3, r3, #3
    ed76:	f363 168f 	bfi	r6, r3, #6, #10
    ed7a:	f014 fc57 	bl	2362c <z_errno>
    ed7e:	6801      	ldr	r1, [r0, #0]
    ed80:	4632      	mov	r2, r6
    ed82:	4249      	negs	r1, r1
    ed84:	4829      	ldr	r0, [pc, #164]	; (ee2c <do_gps_start+0x1e4>)
    ed86:	e7c3      	b.n	ed10 <do_gps_start+0xc8>
	ret = nrf_setsockopt(client.sock, NRF_SOL_GNSS, NRF_SO_GNSS_START,
    ed88:	2304      	movs	r3, #4
    ed8a:	2207      	movs	r2, #7
    ed8c:	9300      	str	r3, [sp, #0]
    ed8e:	f44f 7101 	mov.w	r1, #516	; 0x204
    ed92:	ab09      	add	r3, sp, #36	; 0x24
    ed94:	6828      	ldr	r0, [r5, #0]
    ed96:	f005 fb2f 	bl	143f8 <nrf_setsockopt>
	if (ret != 0) {
    ed9a:	4604      	mov	r4, r0
    ed9c:	b188      	cbz	r0, edc2 <do_gps_start+0x17a>
		LOG_ERR("Failed to start GPS (err: %d)", -errno);
    ed9e:	2301      	movs	r3, #1
    eda0:	f04f 0600 	mov.w	r6, #0
    eda4:	4a19      	ldr	r2, [pc, #100]	; (ee0c <do_gps_start+0x1c4>)
    eda6:	f363 0607 	bfi	r6, r3, #0, #8
    edaa:	4b19      	ldr	r3, [pc, #100]	; (ee10 <do_gps_start+0x1c8>)
    edac:	1a9b      	subs	r3, r3, r2
    edae:	08db      	lsrs	r3, r3, #3
    edb0:	f363 168f 	bfi	r6, r3, #6, #10
    edb4:	f014 fc3a 	bl	2362c <z_errno>
    edb8:	6801      	ldr	r1, [r0, #0]
    edba:	4632      	mov	r2, r6
    edbc:	4249      	negs	r1, r1
    edbe:	481c      	ldr	r0, [pc, #112]	; (ee30 <do_gps_start+0x1e8>)
    edc0:	e7a6      	b.n	ed10 <do_gps_start+0xc8>
	if (gps_thread_id != NULL) {
    edc2:	4e1c      	ldr	r6, [pc, #112]	; (ee34 <do_gps_start+0x1ec>)
    edc4:	6830      	ldr	r0, [r6, #0]
    edc6:	b170      	cbz	r0, ede6 <do_gps_start+0x19e>
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_RESUME);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_resume(thread);
    edc8:	f013 fec2 	bl	22b50 <z_impl_k_thread_resume>
	client.running = true;
    edcc:	2301      	movs	r3, #1
	sprintf(buf, "#XGPSRUN: 1,%d\r\n", client.mask);
    edce:	88aa      	ldrh	r2, [r5, #4]
    edd0:	4919      	ldr	r1, [pc, #100]	; (ee38 <do_gps_start+0x1f0>)
    edd2:	4813      	ldr	r0, [pc, #76]	; (ee20 <do_gps_start+0x1d8>)
	client.running = true;
    edd4:	71ab      	strb	r3, [r5, #6]
	sprintf(buf, "#XGPSRUN: 1,%d\r\n", client.mask);
    edd6:	f002 fc19 	bl	1160c <sprintf>
	client.callback(buf);
    edda:	68ab      	ldr	r3, [r5, #8]
    eddc:	4810      	ldr	r0, [pc, #64]	; (ee20 <do_gps_start+0x1d8>)
    edde:	4798      	blx	r3
}
    ede0:	4620      	mov	r0, r4
    ede2:	b00b      	add	sp, #44	; 0x2c
    ede4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ede6:	230e      	movs	r3, #14
    ede8:	e9cd 4404 	strd	r4, r4, [sp, #16]
    edec:	e9cd 4302 	strd	r4, r3, [sp, #8]
    edf0:	e9cd 4400 	strd	r4, r4, [sp]
    edf4:	4b11      	ldr	r3, [pc, #68]	; (ee3c <do_gps_start+0x1f4>)
    edf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    edfa:	4911      	ldr	r1, [pc, #68]	; (ee40 <do_gps_start+0x1f8>)
    edfc:	4811      	ldr	r0, [pc, #68]	; (ee44 <do_gps_start+0x1fc>)
    edfe:	f013 fe57 	bl	22ab0 <z_impl_k_thread_create>
		gps_thread_id = k_thread_create(&gps_thread, gps_thread_stack,
    ee02:	6030      	str	r0, [r6, #0]
    ee04:	e7e2      	b.n	edcc <do_gps_start+0x184>
    ee06:	bf00      	nop
    ee08:	2002010c 	.word	0x2002010c
    ee0c:	000264bc 	.word	0x000264bc
    ee10:	000264ec 	.word	0x000264ec
    ee14:	00028117 	.word	0x00028117
    ee18:	000281db 	.word	0x000281db
    ee1c:	00028241 	.word	0x00028241
    ee20:	200273c2 	.word	0x200273c2
    ee24:	00028137 	.word	0x00028137
    ee28:	0002815f 	.word	0x0002815f
    ee2c:	0002818a 	.word	0x0002818a
    ee30:	000281ac 	.word	0x000281ac
    ee34:	200201c8 	.word	0x200201c8
    ee38:	000281ca 	.word	0x000281ca
    ee3c:	0000ea75 	.word	0x0000ea75
    ee40:	20027590 	.word	0x20027590
    ee44:	20020118 	.word	0x20020118

0000ee48 <handle_at_gpsrun>:
 *  AT#XGPSRUN=<op>[,<mask>]
 *  AT#XGPSRUN?
 *  AT#XGPSRUN=? TEST command not supported
 */
static int handle_at_gpsrun(const char *at_cmd, size_t param_offset)
{
    ee48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    ee4a:	460e      	mov	r6, r1
	LOG_INF("handle_at_gpsrun");
    ee4c:	2303      	movs	r3, #3
    ee4e:	f04f 0100 	mov.w	r1, #0
{
    ee52:	4604      	mov	r4, r0
	LOG_INF("handle_at_gpsrun");
    ee54:	f363 0107 	bfi	r1, r3, #0, #8
    ee58:	4d53      	ldr	r5, [pc, #332]	; (efa8 <handle_at_gpsrun+0x160>)
    ee5a:	4b54      	ldr	r3, [pc, #336]	; (efac <handle_at_gpsrun+0x164>)
    ee5c:	4854      	ldr	r0, [pc, #336]	; (efb0 <handle_at_gpsrun+0x168>)
    ee5e:	1aed      	subs	r5, r5, r3
    ee60:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    ee64:	f365 118f 	bfi	r1, r5, #6, #10
    ee68:	f014 ff73 	bl	23d52 <log_0>
	int err = -EINVAL;
	char *at_param = (char *)at_cmd + param_offset;
	u16_t op;

	if (*(at_param) == '=') {
    ee6c:	5da3      	ldrb	r3, [r4, r6]
	char *at_param = (char *)at_cmd + param_offset;
    ee6e:	19a2      	adds	r2, r4, r6
	if (*(at_param) == '=') {
    ee70:	2b3d      	cmp	r3, #61	; 0x3d
    ee72:	f040 8082 	bne.w	ef7a <handle_at_gpsrun+0x132>
		at_param++;
		if (*(at_param) == '?') {
    ee76:	7853      	ldrb	r3, [r2, #1]
    ee78:	2b3f      	cmp	r3, #63	; 0x3f
    ee7a:	f000 8092 	beq.w	efa2 <handle_at_gpsrun+0x15a>
			return err;
		}
		err = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    ee7e:	4620      	mov	r0, r4
    ee80:	4a4c      	ldr	r2, [pc, #304]	; (efb4 <handle_at_gpsrun+0x16c>)
    ee82:	2100      	movs	r1, #0
    ee84:	f016 fc86 	bl	25794 <at_parser_params_from_str>
		if (err < 0) {
    ee88:	1e04      	subs	r4, r0, #0
    ee8a:	db36      	blt.n	eefa <handle_at_gpsrun+0xb2>
			return err;
		};
		if (at_params_valid_count_get(&m_param_list) < 2) {
    ee8c:	4849      	ldr	r0, [pc, #292]	; (efb4 <handle_at_gpsrun+0x16c>)
    ee8e:	f016 fd87 	bl	259a0 <at_params_valid_count_get>
    ee92:	2801      	cmp	r0, #1
    ee94:	f240 8085 	bls.w	efa2 <handle_at_gpsrun+0x15a>
			return -EINVAL;
		}
		err = at_params_short_get(&m_param_list, 1, &op);
    ee98:	f10d 020a 	add.w	r2, sp, #10
    ee9c:	2101      	movs	r1, #1
    ee9e:	4845      	ldr	r0, [pc, #276]	; (efb4 <handle_at_gpsrun+0x16c>)
    eea0:	f016 fd49 	bl	25936 <at_params_short_get>
		if (err < 0) {
    eea4:	1e04      	subs	r4, r0, #0
    eea6:	db28      	blt.n	eefa <handle_at_gpsrun+0xb2>
			return err;
		};
		if (op == 1) {
    eea8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    eeac:	2b01      	cmp	r3, #1
    eeae:	d127      	bne.n	ef00 <handle_at_gpsrun+0xb8>
			if (at_params_valid_count_get(&m_param_list) > 2) {
    eeb0:	4840      	ldr	r0, [pc, #256]	; (efb4 <handle_at_gpsrun+0x16c>)
    eeb2:	f016 fd75 	bl	259a0 <at_params_valid_count_get>
    eeb6:	2802      	cmp	r0, #2
    eeb8:	d906      	bls.n	eec8 <handle_at_gpsrun+0x80>
				err = at_params_short_get(&m_param_list, 2,
    eeba:	4a3f      	ldr	r2, [pc, #252]	; (efb8 <handle_at_gpsrun+0x170>)
    eebc:	2102      	movs	r1, #2
    eebe:	483d      	ldr	r0, [pc, #244]	; (efb4 <handle_at_gpsrun+0x16c>)
    eec0:	f016 fd39 	bl	25936 <at_params_short_get>
							&client.mask);
				if (err < 0) {
    eec4:	1e04      	subs	r4, r0, #0
    eec6:	db18      	blt.n	eefa <handle_at_gpsrun+0xb2>
					return err;
				};
			}
			if (client.running) {
    eec8:	4b3c      	ldr	r3, [pc, #240]	; (efbc <handle_at_gpsrun+0x174>)
				LOG_WRN("GPS is running");
    eeca:	f04f 0100 	mov.w	r1, #0
			if (client.running) {
    eece:	799b      	ldrb	r3, [r3, #6]
    eed0:	b143      	cbz	r3, eee4 <handle_at_gpsrun+0x9c>
				LOG_WRN("GPS is running");
    eed2:	2302      	movs	r3, #2
    eed4:	483a      	ldr	r0, [pc, #232]	; (efc0 <handle_at_gpsrun+0x178>)
    eed6:	f363 0107 	bfi	r1, r3, #0, #8
    eeda:	f365 118f 	bfi	r1, r5, #6, #10
				LOG_INF("running do_gps_start from at handler");
				err = do_gps_start();
			}
		} else if (op == 0) {
			if (!client.running) {
				LOG_WRN("GPS is not running");
    eede:	f014 ff38 	bl	23d52 <log_0>
    eee2:	e00a      	b.n	eefa <handle_at_gpsrun+0xb2>
				LOG_INF("running do_gps_start from at handler");
    eee4:	2303      	movs	r3, #3
    eee6:	f363 0107 	bfi	r1, r3, #0, #8
    eeea:	f365 118f 	bfi	r1, r5, #6, #10
    eeee:	4835      	ldr	r0, [pc, #212]	; (efc4 <handle_at_gpsrun+0x17c>)
    eef0:	f014 ff2f 	bl	23d52 <log_0>
				err = do_gps_start();
    eef4:	f7ff fea8 	bl	ec48 <do_gps_start>
    eef8:	4604      	mov	r4, r0
		client.callback(buf);
		err = 0;
	}

	return err;
}
    eefa:	4620      	mov	r0, r4
    eefc:	b004      	add	sp, #16
    eefe:	bd70      	pop	{r4, r5, r6, pc}
		} else if (op == 0) {
    ef00:	2b00      	cmp	r3, #0
    ef02:	d1fa      	bne.n	eefa <handle_at_gpsrun+0xb2>
			if (!client.running) {
    ef04:	4e2d      	ldr	r6, [pc, #180]	; (efbc <handle_at_gpsrun+0x174>)
    ef06:	79b2      	ldrb	r2, [r6, #6]
    ef08:	b942      	cbnz	r2, ef1c <handle_at_gpsrun+0xd4>
				LOG_WRN("GPS is not running");
    ef0a:	f04f 0100 	mov.w	r1, #0
    ef0e:	2302      	movs	r3, #2
    ef10:	f363 0107 	bfi	r1, r3, #0, #8
    ef14:	f365 118f 	bfi	r1, r5, #6, #10
    ef18:	482b      	ldr	r0, [pc, #172]	; (efc8 <handle_at_gpsrun+0x180>)
    ef1a:	e7e0      	b.n	eede <handle_at_gpsrun+0x96>
	if (client.sock != INVALID_SOCKET) {
    ef1c:	6830      	ldr	r0, [r6, #0]
	nrf_gnss_delete_mask_t	delete_mask  = 0;
    ef1e:	9303      	str	r3, [sp, #12]
	if (client.sock != INVALID_SOCKET) {
    ef20:	1c43      	adds	r3, r0, #1
    ef22:	d037      	beq.n	ef94 <handle_at_gpsrun+0x14c>
		ret = nrf_setsockopt(client.sock, NRF_SOL_GNSS,
    ef24:	2304      	movs	r3, #4
    ef26:	2208      	movs	r2, #8
    ef28:	9300      	str	r3, [sp, #0]
    ef2a:	f44f 7101 	mov.w	r1, #516	; 0x204
    ef2e:	ab03      	add	r3, sp, #12
    ef30:	f005 fa62 	bl	143f8 <nrf_setsockopt>
		if (ret != 0) {
    ef34:	4604      	mov	r4, r0
    ef36:	b198      	cbz	r0, ef60 <handle_at_gpsrun+0x118>
			LOG_ERR("Failed to stop GPS (err: %d)", -errno);
    ef38:	2301      	movs	r3, #1
    ef3a:	f04f 0400 	mov.w	r4, #0
    ef3e:	f363 0407 	bfi	r4, r3, #0, #8
    ef42:	f014 fb73 	bl	2362c <z_errno>
    ef46:	6801      	ldr	r1, [r0, #0]
    ef48:	f365 148f 	bfi	r4, r5, #6, #10
    ef4c:	4622      	mov	r2, r4
    ef4e:	4249      	negs	r1, r1
    ef50:	481e      	ldr	r0, [pc, #120]	; (efcc <handle_at_gpsrun+0x184>)
    ef52:	f014 ff0b 	bl	23d6c <log_1>
			ret = -errno;
    ef56:	f014 fb69 	bl	2362c <z_errno>
    ef5a:	6804      	ldr	r4, [r0, #0]
    ef5c:	4264      	negs	r4, r4
    ef5e:	e7cc      	b.n	eefa <handle_at_gpsrun+0xb2>
			k_thread_suspend(gps_thread_id);
    ef60:	4b1b      	ldr	r3, [pc, #108]	; (efd0 <handle_at_gpsrun+0x188>)
    ef62:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_suspend(thread);
    ef64:	f013 fdd4 	bl	22b10 <z_impl_k_thread_suspend>
			nrf_close(client.sock);
    ef68:	6830      	ldr	r0, [r6, #0]
    ef6a:	f005 f981 	bl	14270 <nrf_close>
			client.running = false;
    ef6e:	2300      	movs	r3, #0
			client.callback("#XGPSRUN: 0\r\n");
    ef70:	4818      	ldr	r0, [pc, #96]	; (efd4 <handle_at_gpsrun+0x18c>)
			client.running = false;
    ef72:	71b3      	strb	r3, [r6, #6]
			client.callback("#XGPSRUN: 0\r\n");
    ef74:	68b3      	ldr	r3, [r6, #8]
    ef76:	4798      	blx	r3
			LOG_DBG("GPS stopped");
    ef78:	e7bf      	b.n	eefa <handle_at_gpsrun+0xb2>
	} else if (*(at_param) == '?') {
    ef7a:	2b3f      	cmp	r3, #63	; 0x3f
    ef7c:	d111      	bne.n	efa2 <handle_at_gpsrun+0x15a>
		if (client.running) {
    ef7e:	4c0f      	ldr	r4, [pc, #60]	; (efbc <handle_at_gpsrun+0x174>)
    ef80:	79a3      	ldrb	r3, [r4, #6]
    ef82:	b14b      	cbz	r3, ef98 <handle_at_gpsrun+0x150>
			sprintf(buf, "#XGPSRUN: 1,%d\r\n", client.mask);
    ef84:	88a2      	ldrh	r2, [r4, #4]
    ef86:	4914      	ldr	r1, [pc, #80]	; (efd8 <handle_at_gpsrun+0x190>)
    ef88:	4814      	ldr	r0, [pc, #80]	; (efdc <handle_at_gpsrun+0x194>)
    ef8a:	f002 fb3f 	bl	1160c <sprintf>
		client.callback(buf);
    ef8e:	68a3      	ldr	r3, [r4, #8]
    ef90:	4812      	ldr	r0, [pc, #72]	; (efdc <handle_at_gpsrun+0x194>)
    ef92:	4798      	blx	r3
		err = 0;
    ef94:	2400      	movs	r4, #0
    ef96:	e7b0      	b.n	eefa <handle_at_gpsrun+0xb2>
			sprintf(buf, "#XGPSRUN: 0\r\n");
    ef98:	490e      	ldr	r1, [pc, #56]	; (efd4 <handle_at_gpsrun+0x18c>)
    ef9a:	4810      	ldr	r0, [pc, #64]	; (efdc <handle_at_gpsrun+0x194>)
    ef9c:	f002 fb36 	bl	1160c <sprintf>
    efa0:	e7f5      	b.n	ef8e <handle_at_gpsrun+0x146>
			return err;
    efa2:	f06f 0415 	mvn.w	r4, #21
    efa6:	e7a8      	b.n	eefa <handle_at_gpsrun+0xb2>
    efa8:	000264ec 	.word	0x000264ec
    efac:	000264bc 	.word	0x000264bc
    efb0:	00028308 	.word	0x00028308
    efb4:	200200e0 	.word	0x200200e0
    efb8:	20020110 	.word	0x20020110
    efbc:	2002010c 	.word	0x2002010c
    efc0:	00028319 	.word	0x00028319
    efc4:	00028328 	.word	0x00028328
    efc8:	0002834d 	.word	0x0002834d
    efcc:	00028360 	.word	0x00028360
    efd0:	200201c8 	.word	0x200201c8
    efd4:	0002837d 	.word	0x0002837d
    efd8:	000281ca 	.word	0x000281ca
    efdc:	200273c2 	.word	0x200273c2

0000efe0 <slm_at_gps_parse>:

/**@brief API to handle GPS AT commands
 */
int slm_at_gps_parse(const u8_t *param, u8_t length)
{
    efe0:	b538      	push	{r3, r4, r5, lr}
    efe2:	4604      	mov	r4, r0
	int ret = -ENOTSUP;

	ARG_UNUSED(length);

	for (int i = 0; i < AT_GPS_MAX; i++) {
		u8_t cmd_len = strlen(m_at_list[i].string_upper);
    efe4:	480c      	ldr	r0, [pc, #48]	; (f018 <slm_at_gps_parse+0x38>)
    efe6:	f015 fbc2 	bl	2476e <strlen>

		if (strncmp(param, m_at_list[i].string_upper,
    efea:	b2c5      	uxtb	r5, r0
    efec:	462a      	mov	r2, r5
    efee:	490a      	ldr	r1, [pc, #40]	; (f018 <slm_at_gps_parse+0x38>)
    eff0:	4620      	mov	r0, r4
    eff2:	f015 fbcf 	bl	24794 <strncmp>
    eff6:	b928      	cbnz	r0, f004 <slm_at_gps_parse+0x24>
			cmd_len) == 0) {
			ret = m_at_list[i].handler(param, cmd_len);
			break;
		} else if (strncmp(param, m_at_list[i].string_lower,
			cmd_len) == 0) {
			ret = m_at_list[i].handler(param, cmd_len);
    eff8:	4629      	mov	r1, r5
    effa:	4620      	mov	r0, r4
			break;
		}
	}

	return ret;
}
    effc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			ret = m_at_list[i].handler(param, cmd_len);
    f000:	f7ff bf22 	b.w	ee48 <handle_at_gpsrun>
		} else if (strncmp(param, m_at_list[i].string_lower,
    f004:	462a      	mov	r2, r5
    f006:	4905      	ldr	r1, [pc, #20]	; (f01c <slm_at_gps_parse+0x3c>)
    f008:	4620      	mov	r0, r4
    f00a:	f015 fbc3 	bl	24794 <strncmp>
    f00e:	2800      	cmp	r0, #0
    f010:	d0f2      	beq.n	eff8 <slm_at_gps_parse+0x18>
}
    f012:	f06f 0022 	mvn.w	r0, #34	; 0x22
    f016:	bd38      	pop	{r3, r4, r5, pc}
    f018:	000283af 	.word	0x000283af
    f01c:	000283ba 	.word	0x000283ba

0000f020 <slm_at_gps_init>:
}

/**@brief API to initialize GPS AT commands handler
 */
int slm_at_gps_init(at_cmd_handler_t callback)
{
    f020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f024:	4b40      	ldr	r3, [pc, #256]	; (f128 <slm_at_gps_init+0x108>)
    f026:	4c41      	ldr	r4, [pc, #260]	; (f12c <slm_at_gps_init+0x10c>)
    f028:	1ae4      	subs	r4, r4, r3
    f02a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (callback == NULL) {
    f02e:	b970      	cbnz	r0, f04e <slm_at_gps_init+0x2e>
		LOG_ERR("No callback");
    f030:	2301      	movs	r3, #1
    f032:	f04f 0100 	mov.w	r1, #0
    f036:	f363 0107 	bfi	r1, r3, #0, #8
    f03a:	483d      	ldr	r0, [pc, #244]	; (f130 <slm_at_gps_init+0x110>)
    f03c:	f364 118f 	bfi	r1, r4, #6, #10
    f040:	f014 fe87 	bl	23d52 <log_0>
		return -EINVAL;
    f044:	f06f 0015 	mvn.w	r0, #21
	client.callback = callback;
	gps_thread_id = NULL;
	enable_gps();
	do_gps_start();
	return 0;
}
    f048:	b003      	add	sp, #12
    f04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	client.mask =  NRF_GNSS_NMEA_GSV_MASK |
    f04e:	221f      	movs	r2, #31
    f050:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	gps_thread_id = NULL;
    f054:	2500      	movs	r5, #0
	client.sock = INVALID_SOCKET;
    f056:	4b37      	ldr	r3, [pc, #220]	; (f134 <slm_at_gps_init+0x114>)
	return socket_ops->socket(family, type, proto);
    f058:	4f37      	ldr	r7, [pc, #220]	; (f138 <slm_at_gps_init+0x118>)
	client.mask =  NRF_GNSS_NMEA_GSV_MASK |
    f05a:	e9c3 1200 	strd	r1, r2, [r3]
	client.callback = callback;
    f05e:	6098      	str	r0, [r3, #8]
	gps_thread_id = NULL;
    f060:	4b36      	ldr	r3, [pc, #216]	; (f13c <slm_at_gps_init+0x11c>)
	LOG_INF("Initializing GPS Module");
    f062:	f04f 0100 	mov.w	r1, #0
	gps_thread_id = NULL;
    f066:	601d      	str	r5, [r3, #0]
	LOG_INF("Initializing GPS Module");
    f068:	2303      	movs	r3, #3
    f06a:	f363 0107 	bfi	r1, r3, #0, #8
    f06e:	f364 118f 	bfi	r1, r4, #6, #10
    f072:	4833      	ldr	r0, [pc, #204]	; (f140 <slm_at_gps_init+0x120>)
    f074:	f014 fe6d 	bl	23d52 <log_0>
    f078:	683b      	ldr	r3, [r7, #0]
    f07a:	f240 2201 	movw	r2, #513	; 0x201
    f07e:	681b      	ldr	r3, [r3, #0]
    f080:	4629      	mov	r1, r5
    f082:	2066      	movs	r0, #102	; 0x66
    f084:	4798      	blx	r3
	if (at_sock < 0) {
    f086:	1e06      	subs	r6, r0, #0
    f088:	46b8      	mov	r8, r7
    f08a:	db20      	blt.n	f0ce <slm_at_gps_init+0xae>
    f08c:	4f2d      	ldr	r7, [pc, #180]	; (f144 <slm_at_gps_init+0x124>)
		if (memcmp(buf, "OK", 2) != 0) {
    f08e:	f8df a0c0 	ldr.w	sl, [pc, #192]	; f150 <slm_at_gps_init+0x130>
		LOG_INF("%s",gps_at_commands[i]);
    f092:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    f096:	f043 0303 	orr.w	r3, r3, #3
    f09a:	f363 0907 	bfi	r9, r3, #0, #8
    f09e:	f364 198f 	bfi	r9, r4, #6, #10
    f0a2:	464a      	mov	r2, r9
    f0a4:	4639      	mov	r1, r7
    f0a6:	4828      	ldr	r0, [pc, #160]	; (f148 <slm_at_gps_init+0x128>)
    f0a8:	f014 fe60 	bl	23d6c <log_1>
		bytes_sent = send(at_sock, gps_at_commands[i],
    f0ac:	4638      	mov	r0, r7
    f0ae:	f015 fb5e 	bl	2476e <strlen>
	return socket_ops->send(sock, buf, len, flags);
    f0b2:	f8d8 3000 	ldr.w	r3, [r8]
    f0b6:	4602      	mov	r2, r0
    f0b8:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
    f0bc:	4639      	mov	r1, r7
    f0be:	2300      	movs	r3, #0
    f0c0:	4630      	mov	r0, r6
    f0c2:	47d8      	blx	fp
		if (bytes_sent < 0) {
    f0c4:	2800      	cmp	r0, #0
    f0c6:	da08      	bge.n	f0da <slm_at_gps_init+0xba>
			close(at_sock);
    f0c8:	4630      	mov	r0, r6
    f0ca:	f7ff fccd 	bl	ea68 <close>
	do_gps_start();
    f0ce:	f7ff fdbb 	bl	ec48 <do_gps_start>
	return 0;
    f0d2:	2000      	movs	r0, #0
    f0d4:	e7b8      	b.n	f048 <slm_at_gps_init+0x28>
	for (int i = 0; i < ARRAY_SIZE(gps_at_commands); i++) {
    f0d6:	2501      	movs	r5, #1
    f0d8:	e7db      	b.n	f092 <slm_at_gps_init+0x72>
	return socket_ops->recv(sock, buf, max_len, flags);
    f0da:	f8d8 3000 	ldr.w	r3, [r8]
    f0de:	2202      	movs	r2, #2
    f0e0:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
    f0e4:	a901      	add	r1, sp, #4
    f0e6:	2300      	movs	r3, #0
    f0e8:	4630      	mov	r0, r6
    f0ea:	47d8      	blx	fp
		} while (bytes_received == 0);
    f0ec:	2800      	cmp	r0, #0
    f0ee:	d0f4      	beq.n	f0da <slm_at_gps_init+0xba>
		if (memcmp(buf, "OK", 2) != 0) {
    f0f0:	2202      	movs	r2, #2
    f0f2:	4651      	mov	r1, sl
    f0f4:	a801      	add	r0, sp, #4
    f0f6:	f015 fb5c 	bl	247b2 <memcmp>
    f0fa:	2800      	cmp	r0, #0
    f0fc:	d1e4      	bne.n	f0c8 <slm_at_gps_init+0xa8>
	return z_impl_k_sleep(ms);
    f0fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    f102:	f013 fbeb 	bl	228dc <z_impl_k_sleep>
    f106:	371f      	adds	r7, #31
	for (int i = 0; i < ARRAY_SIZE(gps_at_commands); i++) {
    f108:	2d00      	cmp	r5, #0
    f10a:	d0e4      	beq.n	f0d6 <slm_at_gps_init+0xb6>
	close(at_sock);
    f10c:	4630      	mov	r0, r6
    f10e:	f7ff fcab 	bl	ea68 <close>
	LOG_INF("GPS Enabled");
    f112:	2303      	movs	r3, #3
    f114:	f04f 0100 	mov.w	r1, #0
    f118:	f363 0107 	bfi	r1, r3, #0, #8
    f11c:	f364 118f 	bfi	r1, r4, #6, #10
    f120:	480a      	ldr	r0, [pc, #40]	; (f14c <slm_at_gps_init+0x12c>)
    f122:	f014 fe16 	bl	23d52 <log_0>
	return 0;
    f126:	e7d2      	b.n	f0ce <slm_at_gps_init+0xae>
    f128:	000264bc 	.word	0x000264bc
    f12c:	000264ec 	.word	0x000264ec
    f130:	00028000 	.word	0x00028000
    f134:	2002010c 	.word	0x2002010c
    f138:	20020314 	.word	0x20020314
    f13c:	200201c8 	.word	0x200201c8
    f140:	0002838b 	.word	0x0002838b
    f144:	000281f0 	.word	0x000281f0
    f148:	00027eaf 	.word	0x00027eaf
    f14c:	000283a3 	.word	0x000283a3
    f150:	0002803a 	.word	0x0002803a

0000f154 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    f154:	680b      	ldr	r3, [r1, #0]
    f156:	3301      	adds	r3, #1
    f158:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    f15a:	4b01      	ldr	r3, [pc, #4]	; (f160 <char_out+0xc>)
    f15c:	681b      	ldr	r3, [r3, #0]
    f15e:	4718      	bx	r3
    f160:	2002d3e4 	.word	0x2002d3e4

0000f164 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    f164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f168:	b085      	sub	sp, #20
    f16a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    f16c:	469b      	mov	fp, r3
    f16e:	2c01      	cmp	r4, #1
    f170:	bfb8      	it	lt
    f172:	2401      	movlt	r4, #1
    f174:	2b01      	cmp	r3, #1
    f176:	bf0c      	ite	eq
    f178:	2330      	moveq	r3, #48	; 0x30
    f17a:	2320      	movne	r3, #32
    f17c:	4616      	mov	r6, r2
    f17e:	4682      	mov	sl, r0
    f180:	4688      	mov	r8, r1
    f182:	2501      	movs	r5, #1
    f184:	270a      	movs	r7, #10
    f186:	2200      	movs	r2, #0
    f188:	f8df 906c 	ldr.w	r9, [pc, #108]	; f1f8 <_printk_dec_ulong+0x94>
    f18c:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    f18e:	fbb6 f3f9 	udiv	r3, r6, r9
    f192:	9301      	str	r3, [sp, #4]
    f194:	b90a      	cbnz	r2, f19a <_printk_dec_ulong+0x36>
    f196:	45b1      	cmp	r9, r6
    f198:	d81c      	bhi.n	f1d4 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    f19a:	9b01      	ldr	r3, [sp, #4]
    f19c:	4641      	mov	r1, r8
    f19e:	f103 0030 	add.w	r0, r3, #48	; 0x30
    f1a2:	47d0      	blx	sl
			found_largest_digit = 1;
    f1a4:	2201      	movs	r2, #1
			digits++;
    f1a6:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    f1a8:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    f1aa:	3f01      	subs	r7, #1
		remainder %= pos;
    f1ac:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
    f1b0:	230a      	movs	r3, #10
	while (pos >= 10) {
    f1b2:	2f01      	cmp	r7, #1
		pos /= 10;
    f1b4:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    f1b8:	d1e9      	bne.n	f18e <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
    f1ba:	4641      	mov	r1, r8
    f1bc:	f106 0030 	add.w	r0, r6, #48	; 0x30
    f1c0:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    f1c2:	f1bb 0f03 	cmp.w	fp, #3
    f1c6:	d102      	bne.n	f1ce <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
    f1c8:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
    f1ca:	2c00      	cmp	r4, #0
    f1cc:	dc0e      	bgt.n	f1ec <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
    f1ce:	b005      	add	sp, #20
    f1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    f1d4:	42bc      	cmp	r4, r7
    f1d6:	dbe7      	blt.n	f1a8 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    f1d8:	f1bb 0f02 	cmp.w	fp, #2
    f1dc:	d8e4      	bhi.n	f1a8 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    f1de:	4641      	mov	r1, r8
    f1e0:	9802      	ldr	r0, [sp, #8]
    f1e2:	9203      	str	r2, [sp, #12]
			digits++;
    f1e4:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    f1e6:	47d0      	blx	sl
			digits++;
    f1e8:	9a03      	ldr	r2, [sp, #12]
    f1ea:	e7dd      	b.n	f1a8 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    f1ec:	4641      	mov	r1, r8
    f1ee:	2020      	movs	r0, #32
    f1f0:	47d0      	blx	sl
    f1f2:	3c01      	subs	r4, #1
    f1f4:	e7e9      	b.n	f1ca <_printk_dec_ulong+0x66>
    f1f6:	bf00      	nop
    f1f8:	3b9aca00 	.word	0x3b9aca00

0000f1fc <__printk_hook_install>:
	_char_out = fn;
    f1fc:	4b01      	ldr	r3, [pc, #4]	; (f204 <__printk_hook_install+0x8>)
    f1fe:	6018      	str	r0, [r3, #0]
}
    f200:	4770      	bx	lr
    f202:	bf00      	nop
    f204:	2002d3e4 	.word	0x2002d3e4

0000f208 <vprintk>:
	struct out_context ctx = { 0 };
    f208:	2300      	movs	r3, #0
{
    f20a:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
    f20c:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    f20e:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    f210:	4803      	ldr	r0, [pc, #12]	; (f220 <vprintk+0x18>)
    f212:	460b      	mov	r3, r1
    f214:	a901      	add	r1, sp, #4
    f216:	f014 fbf9 	bl	23a0c <z_vprintk>
}
    f21a:	b003      	add	sp, #12
    f21c:	f85d fb04 	ldr.w	pc, [sp], #4
    f220:	0000f155 	.word	0x0000f155

0000f224 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    f224:	f04f 0220 	mov.w	r2, #32
    f228:	f3ef 8311 	mrs	r3, BASEPRI
    f22c:	f382 8811 	msr	BASEPRI, r2
    f230:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    f234:	2101      	movs	r1, #1
    f236:	4a04      	ldr	r2, [pc, #16]	; (f248 <nordicsemi_nrf91_init+0x24>)
    f238:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    f23c:	f383 8811 	msr	BASEPRI, r3
    f240:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    f244:	2000      	movs	r0, #0
    f246:	4770      	bx	lr
    f248:	40039000 	.word	0x40039000

0000f24c <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    f24c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    f24e:	2200      	movs	r2, #0
{
    f250:	b087      	sub	sp, #28
		k_timer_init(&log_process_thread_timer,
    f252:	490d      	ldr	r1, [pc, #52]	; (f288 <enable_logger+0x3c>)
    f254:	480d      	ldr	r0, [pc, #52]	; (f28c <enable_logger+0x40>)
    f256:	f016 fe83 	bl	25f60 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f25a:	2400      	movs	r4, #0
    f25c:	230e      	movs	r3, #14
    f25e:	4d0c      	ldr	r5, [pc, #48]	; (f290 <enable_logger+0x44>)
    f260:	e9cd 4302 	strd	r4, r3, [sp, #8]
    f264:	e9cd 4404 	strd	r4, r4, [sp, #16]
    f268:	e9cd 4400 	strd	r4, r4, [sp]
    f26c:	4b09      	ldr	r3, [pc, #36]	; (f294 <enable_logger+0x48>)
    f26e:	f44f 7240 	mov.w	r2, #768	; 0x300
    f272:	4909      	ldr	r1, [pc, #36]	; (f298 <enable_logger+0x4c>)
    f274:	4628      	mov	r0, r5
    f276:	f013 fc1b 	bl	22ab0 <z_impl_k_thread_create>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread_id, *(uintptr_t *)&value, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread_id, value);
    f27a:	4908      	ldr	r1, [pc, #32]	; (f29c <enable_logger+0x50>)
    f27c:	4628      	mov	r0, r5
    f27e:	f016 fdcb 	bl	25e18 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    f282:	4620      	mov	r0, r4
    f284:	b007      	add	sp, #28
    f286:	bd30      	pop	{r4, r5, pc}
    f288:	0000f2a1 	.word	0x0000f2a1
    f28c:	200201e0 	.word	0x200201e0
    f290:	20020228 	.word	0x20020228
    f294:	0000f581 	.word	0x0000f581
    f298:	20027990 	.word	0x20027990
    f29c:	000283dc 	.word	0x000283dc

0000f2a0 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    f2a0:	4801      	ldr	r0, [pc, #4]	; (f2a8 <log_process_thread_timer_expiry_fn+0x8>)
    f2a2:	f013 bb49 	b.w	22938 <z_impl_k_sem_give>
    f2a6:	bf00      	nop
    f2a8:	2002d580 	.word	0x2002d580

0000f2ac <log_core_init>:
{
    f2ac:	b508      	push	{r3, lr}
		log_msg_pool_init();
    f2ae:	f000 f9df 	bl	f670 <log_msg_pool_init>
		log_list_init(&list);
    f2b2:	4809      	ldr	r0, [pc, #36]	; (f2d8 <log_core_init+0x2c>)
    f2b4:	f014 fd2a 	bl	23d0c <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    f2b8:	2304      	movs	r3, #4
    f2ba:	2234      	movs	r2, #52	; 0x34
    f2bc:	4807      	ldr	r0, [pc, #28]	; (f2dc <log_core_init+0x30>)
    f2be:	4908      	ldr	r1, [pc, #32]	; (f2e0 <log_core_init+0x34>)
    f2c0:	f016 fb8f 	bl	259e2 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    f2c4:	4b07      	ldr	r3, [pc, #28]	; (f2e4 <log_core_init+0x38>)
    f2c6:	4a08      	ldr	r2, [pc, #32]	; (f2e8 <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
    f2c8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    f2cc:	601a      	str	r2, [r3, #0]
}
    f2ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    f2d2:	f000 bbfd 	b.w	fad0 <log_output_timestamp_freq_set>
    f2d6:	bf00      	nop
    f2d8:	200201d8 	.word	0x200201d8
    f2dc:	2002020c 	.word	0x2002020c
    f2e0:	2002b9d0 	.word	0x2002b9d0
    f2e4:	2002d3e8 	.word	0x2002d3e8
    f2e8:	00023d4b 	.word	0x00023d4b

0000f2ec <dropped_notify>:
{
    f2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f2ee:	2500      	movs	r5, #0
    f2f0:	4b0c      	ldr	r3, [pc, #48]	; (f324 <dropped_notify+0x38>)
    f2f2:	e8d3 7fef 	ldaex	r7, [r3]
    f2f6:	e8c3 5fe2 	stlex	r2, r5, [r3]
    f2fa:	2a00      	cmp	r2, #0
    f2fc:	d1f9      	bne.n	f2f2 <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    f2fe:	4c0a      	ldr	r4, [pc, #40]	; (f328 <dropped_notify+0x3c>)
    f300:	4e0a      	ldr	r6, [pc, #40]	; (f32c <dropped_notify+0x40>)
    f302:	1b36      	subs	r6, r6, r4
    f304:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    f306:	42b5      	cmp	r5, r6
    f308:	db00      	blt.n	f30c <dropped_notify+0x20>
}
    f30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    f30c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    f30e:	795b      	ldrb	r3, [r3, #5]
    f310:	b12b      	cbz	r3, f31e <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
    f312:	6823      	ldr	r3, [r4, #0]
    f314:	68db      	ldr	r3, [r3, #12]
    f316:	b113      	cbz	r3, f31e <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
    f318:	4639      	mov	r1, r7
    f31a:	4620      	mov	r0, r4
    f31c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    f31e:	3501      	adds	r5, #1
    f320:	3410      	adds	r4, #16
    f322:	e7f0      	b.n	f306 <dropped_notify+0x1a>
    f324:	200201d0 	.word	0x200201d0
    f328:	0002653c 	.word	0x0002653c
    f32c:	0002654c 	.word	0x0002654c

0000f330 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    f330:	4b22      	ldr	r3, [pc, #136]	; (f3bc <z_impl_log_process+0x8c>)
{
    f332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!backend_attached && !bypass) {
    f336:	781b      	ldrb	r3, [r3, #0]
{
    f338:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    f33a:	b903      	cbnz	r3, f33e <z_impl_log_process+0xe>
    f33c:	b340      	cbz	r0, f390 <z_impl_log_process+0x60>
	__asm__ volatile(
    f33e:	f04f 0320 	mov.w	r3, #32
    f342:	f3ef 8411 	mrs	r4, BASEPRI
    f346:	f383 8811 	msr	BASEPRI, r3
    f34a:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    f34e:	481c      	ldr	r0, [pc, #112]	; (f3c0 <z_impl_log_process+0x90>)
    f350:	f014 fcec 	bl	23d2c <log_list_head_get>
    f354:	4607      	mov	r7, r0
	__asm__ volatile(
    f356:	f384 8811 	msr	BASEPRI, r4
    f35a:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    f35e:	b158      	cbz	r0, f378 <z_impl_log_process+0x48>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    f360:	4b18      	ldr	r3, [pc, #96]	; (f3c4 <z_impl_log_process+0x94>)
    f362:	e8d3 2fef 	ldaex	r2, [r3]
    f366:	3a01      	subs	r2, #1
    f368:	e8c3 2fe1 	stlex	r1, r2, [r3]
    f36c:	2900      	cmp	r1, #0
    f36e:	d1f8      	bne.n	f362 <z_impl_log_process+0x32>
	if (!bypass) {
    f370:	b18d      	cbz	r5, f396 <z_impl_log_process+0x66>
	log_msg_put(msg);
    f372:	4638      	mov	r0, r7
    f374:	f014 fdc7 	bl	23f06 <log_msg_put>
	if (!bypass && dropped_cnt) {
    f378:	b925      	cbnz	r5, f384 <z_impl_log_process+0x54>
    f37a:	4b13      	ldr	r3, [pc, #76]	; (f3c8 <z_impl_log_process+0x98>)
    f37c:	681b      	ldr	r3, [r3, #0]
    f37e:	b10b      	cbz	r3, f384 <z_impl_log_process+0x54>
		dropped_notify();
    f380:	f7ff ffb4 	bl	f2ec <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    f384:	480e      	ldr	r0, [pc, #56]	; (f3c0 <z_impl_log_process+0x90>)
    f386:	f014 fccf 	bl	23d28 <log_list_head_peek>
    f38a:	1c05      	adds	r5, r0, #0
    f38c:	bf18      	it	ne
    f38e:	2501      	movne	r5, #1
}
    f390:	4628      	mov	r0, r5
    f392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (int i = 0; i < log_backend_count_get(); i++) {
    f396:	46a8      	mov	r8, r5
	return __log_backends_end - __log_backends_start;
    f398:	4c0c      	ldr	r4, [pc, #48]	; (f3cc <z_impl_log_process+0x9c>)
    f39a:	4e0d      	ldr	r6, [pc, #52]	; (f3d0 <z_impl_log_process+0xa0>)
    f39c:	1b36      	subs	r6, r6, r4
    f39e:	1136      	asrs	r6, r6, #4
    f3a0:	45b0      	cmp	r8, r6
    f3a2:	dae6      	bge.n	f372 <z_impl_log_process+0x42>
	return backend->cb->active;
    f3a4:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    f3a6:	795b      	ldrb	r3, [r3, #5]
    f3a8:	b123      	cbz	r3, f3b4 <z_impl_log_process+0x84>
	backend->api->put(backend, msg);
    f3aa:	6823      	ldr	r3, [r4, #0]
    f3ac:	4639      	mov	r1, r7
    f3ae:	681b      	ldr	r3, [r3, #0]
    f3b0:	4620      	mov	r0, r4
    f3b2:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    f3b4:	f108 0801 	add.w	r8, r8, #1
    f3b8:	3410      	adds	r4, #16
    f3ba:	e7f1      	b.n	f3a0 <z_impl_log_process+0x70>
    f3bc:	20027403 	.word	0x20027403
    f3c0:	200201d8 	.word	0x200201d8
    f3c4:	200201cc 	.word	0x200201cc
    f3c8:	200201d0 	.word	0x200201d0
    f3cc:	0002653c 	.word	0x0002653c
    f3d0:	0002654c 	.word	0x0002654c

0000f3d4 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    f3d4:	4b24      	ldr	r3, [pc, #144]	; (f468 <msg_finalize+0x94>)
{
    f3d6:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    f3d8:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    f3da:	8141      	strh	r1, [r0, #10]
{
    f3dc:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    f3de:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    f3e0:	4c22      	ldr	r4, [pc, #136]	; (f46c <msg_finalize+0x98>)
    f3e2:	60e8      	str	r0, [r5, #12]
    f3e4:	e8d4 3fef 	ldaex	r3, [r4]
    f3e8:	3301      	adds	r3, #1
    f3ea:	e8c4 3fe2 	stlex	r2, r3, [r4]
    f3ee:	2a00      	cmp	r2, #0
    f3f0:	d1f8      	bne.n	f3e4 <msg_finalize+0x10>
	__asm__ volatile(
    f3f2:	f04f 0320 	mov.w	r3, #32
    f3f6:	f3ef 8611 	mrs	r6, BASEPRI
    f3fa:	f383 8811 	msr	BASEPRI, r3
    f3fe:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    f402:	481b      	ldr	r0, [pc, #108]	; (f470 <msg_finalize+0x9c>)
    f404:	4629      	mov	r1, r5
    f406:	f014 fc85 	bl	23d14 <log_list_add_tail>
	__asm__ volatile(
    f40a:	f386 8811 	msr	BASEPRI, r6
    f40e:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    f412:	4b18      	ldr	r3, [pc, #96]	; (f474 <msg_finalize+0xa0>)
    f414:	781a      	ldrb	r2, [r3, #0]
    f416:	b17a      	cbz	r2, f438 <msg_finalize+0x64>
	__asm__ volatile(
    f418:	f04f 0320 	mov.w	r3, #32
    f41c:	f3ef 8411 	mrs	r4, BASEPRI
    f420:	f383 8811 	msr	BASEPRI, r3
    f424:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    f428:	2000      	movs	r0, #0
    f42a:	f7ff ff81 	bl	f330 <z_impl_log_process>
	__asm__ volatile(
    f42e:	f384 8811 	msr	BASEPRI, r4
    f432:	f3bf 8f6f 	isb	sy
}
    f436:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    f438:	490f      	ldr	r1, [pc, #60]	; (f478 <msg_finalize+0xa4>)
    f43a:	6823      	ldr	r3, [r4, #0]
    f43c:	6809      	ldr	r1, [r1, #0]
    f43e:	2900      	cmp	r1, #0
    f440:	d0f9      	beq.n	f436 <msg_finalize+0x62>
    f442:	2b01      	cmp	r3, #1
    f444:	d106      	bne.n	f454 <msg_finalize+0x80>
}
    f446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_timer_start(timer, duration, period);
    f44a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f44e:	480b      	ldr	r0, [pc, #44]	; (f47c <msg_finalize+0xa8>)
    f450:	f013 bd24 	b.w	22e9c <z_impl_k_timer_start>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    f454:	2b0a      	cmp	r3, #10
    f456:	d1ee      	bne.n	f436 <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
    f458:	4808      	ldr	r0, [pc, #32]	; (f47c <msg_finalize+0xa8>)
    f45a:	f016 fd8d 	bl	25f78 <z_impl_k_timer_stop>
}
    f45e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_sem_give(sem);
    f462:	4807      	ldr	r0, [pc, #28]	; (f480 <msg_finalize+0xac>)
    f464:	f013 ba68 	b.w	22938 <z_impl_k_sem_give>
    f468:	2002d3e8 	.word	0x2002d3e8
    f46c:	200201cc 	.word	0x200201cc
    f470:	200201d8 	.word	0x200201d8
    f474:	20027404 	.word	0x20027404
    f478:	200202d8 	.word	0x200202d8
    f47c:	200201e0 	.word	0x200201e0
    f480:	2002d580 	.word	0x2002d580

0000f484 <log_dropped>:
    f484:	4b04      	ldr	r3, [pc, #16]	; (f498 <log_dropped+0x14>)
    f486:	e8d3 2fef 	ldaex	r2, [r3]
    f48a:	3201      	adds	r2, #1
    f48c:	e8c3 2fe1 	stlex	r1, r2, [r3]
    f490:	2900      	cmp	r1, #0
    f492:	d1f8      	bne.n	f486 <log_dropped+0x2>
}
    f494:	4770      	bx	lr
    f496:	bf00      	nop
    f498:	200201d0 	.word	0x200201d0

0000f49c <log_source_name_get>:
    f49c:	4a04      	ldr	r2, [pc, #16]	; (f4b0 <log_source_name_get+0x14>)
    f49e:	4b05      	ldr	r3, [pc, #20]	; (f4b4 <log_source_name_get+0x18>)
    f4a0:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    f4a2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    f4a6:	bf34      	ite	cc
    f4a8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    f4ac:	2000      	movcs	r0, #0
}
    f4ae:	4770      	bx	lr
    f4b0:	000264bc 	.word	0x000264bc
    f4b4:	0002653c 	.word	0x0002653c

0000f4b8 <log_backend_enable>:
	id += backend - log_backend_get(0);
    f4b8:	4b09      	ldr	r3, [pc, #36]	; (f4e0 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    f4ba:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    f4bc:	1ac3      	subs	r3, r0, r3
    f4be:	111b      	asrs	r3, r3, #4
    f4c0:	3301      	adds	r3, #1
{
    f4c2:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    f4c4:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
    f4c6:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
    f4c8:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    f4ca:	4c06      	ldr	r4, [pc, #24]	; (f4e4 <log_backend_enable+0x2c>)
    f4cc:	715a      	strb	r2, [r3, #5]
    f4ce:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    f4d0:	6019      	str	r1, [r3, #0]
    f4d2:	b912      	cbnz	r2, f4da <log_backend_enable+0x22>
    f4d4:	4804      	ldr	r0, [pc, #16]	; (f4e8 <log_backend_enable+0x30>)
    f4d6:	f013 fa2f 	bl	22938 <z_impl_k_sem_give>
	backend_attached = true;
    f4da:	2301      	movs	r3, #1
    f4dc:	7023      	strb	r3, [r4, #0]
}
    f4de:	bd10      	pop	{r4, pc}
    f4e0:	0002653c 	.word	0x0002653c
    f4e4:	20027403 	.word	0x20027403
    f4e8:	2002d580 	.word	0x2002d580

0000f4ec <log_init>:
{
    f4ec:	b570      	push	{r4, r5, r6, lr}
    f4ee:	4b0f      	ldr	r3, [pc, #60]	; (f52c <log_init+0x40>)
    f4f0:	e8d3 5fef 	ldaex	r5, [r3]
    f4f4:	1c6a      	adds	r2, r5, #1
    f4f6:	e8c3 2fe1 	stlex	r1, r2, [r3]
    f4fa:	2900      	cmp	r1, #0
    f4fc:	d1f8      	bne.n	f4f0 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    f4fe:	b92d      	cbnz	r5, f50c <log_init+0x20>
	return __log_backends_end - __log_backends_start;
    f500:	4c0b      	ldr	r4, [pc, #44]	; (f530 <log_init+0x44>)
    f502:	4e0c      	ldr	r6, [pc, #48]	; (f534 <log_init+0x48>)
    f504:	1b36      	subs	r6, r6, r4
    f506:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    f508:	42b5      	cmp	r5, r6
    f50a:	db00      	blt.n	f50e <log_init+0x22>
}
    f50c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    f50e:	7b23      	ldrb	r3, [r4, #12]
    f510:	b143      	cbz	r3, f524 <log_init+0x38>
			if (backend->api->init != NULL) {
    f512:	6823      	ldr	r3, [r4, #0]
    f514:	695b      	ldr	r3, [r3, #20]
    f516:	b103      	cbz	r3, f51a <log_init+0x2e>
				backend->api->init();
    f518:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    f51a:	2204      	movs	r2, #4
    f51c:	2100      	movs	r1, #0
    f51e:	4620      	mov	r0, r4
    f520:	f7ff ffca 	bl	f4b8 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    f524:	3501      	adds	r5, #1
    f526:	3410      	adds	r4, #16
    f528:	e7ee      	b.n	f508 <log_init+0x1c>
    f52a:	bf00      	nop
    f52c:	200201d4 	.word	0x200201d4
    f530:	0002653c 	.word	0x0002653c
    f534:	0002654c 	.word	0x0002654c

0000f538 <z_impl_log_panic>:
{
    f538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    f53a:	4f0e      	ldr	r7, [pc, #56]	; (f574 <z_impl_log_panic+0x3c>)
    f53c:	783d      	ldrb	r5, [r7, #0]
    f53e:	b975      	cbnz	r5, f55e <z_impl_log_panic+0x26>
	log_init();
    f540:	f7ff ffd4 	bl	f4ec <log_init>
    f544:	4c0c      	ldr	r4, [pc, #48]	; (f578 <z_impl_log_panic+0x40>)
    f546:	4e0d      	ldr	r6, [pc, #52]	; (f57c <z_impl_log_panic+0x44>)
    f548:	1b36      	subs	r6, r6, r4
    f54a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    f54c:	42b5      	cmp	r5, r6
    f54e:	db07      	blt.n	f560 <z_impl_log_panic+0x28>
    f550:	2000      	movs	r0, #0
    f552:	f7ff feed 	bl	f330 <z_impl_log_process>
		while (log_process(false) == true) {
    f556:	2800      	cmp	r0, #0
    f558:	d1fa      	bne.n	f550 <z_impl_log_panic+0x18>
	panic_mode = true;
    f55a:	2301      	movs	r3, #1
    f55c:	703b      	strb	r3, [r7, #0]
}
    f55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    f560:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    f562:	795b      	ldrb	r3, [r3, #5]
    f564:	b11b      	cbz	r3, f56e <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    f566:	6823      	ldr	r3, [r4, #0]
    f568:	4620      	mov	r0, r4
    f56a:	691b      	ldr	r3, [r3, #16]
    f56c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    f56e:	3501      	adds	r5, #1
    f570:	3410      	adds	r4, #16
    f572:	e7eb      	b.n	f54c <z_impl_log_panic+0x14>
    f574:	20027404 	.word	0x20027404
    f578:	0002653c 	.word	0x0002653c
    f57c:	0002654c 	.word	0x0002654c

0000f580 <log_process_thread_func>:
{
    f580:	b508      	push	{r3, lr}
	log_init();
    f582:	f7ff ffb3 	bl	f4ec <log_init>
	return z_impl_k_current_get();
    f586:	f013 f9d1 	bl	2292c <z_impl_k_current_get>
	proc_tid = process_tid;
    f58a:	4b0b      	ldr	r3, [pc, #44]	; (f5b8 <log_process_thread_func+0x38>)
    f58c:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    f58e:	b130      	cbz	r0, f59e <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    f590:	4b0a      	ldr	r3, [pc, #40]	; (f5bc <log_process_thread_func+0x3c>)
	    process_tid &&
    f592:	681b      	ldr	r3, [r3, #0]
    f594:	2b09      	cmp	r3, #9
    f596:	dd02      	ble.n	f59e <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    f598:	4809      	ldr	r0, [pc, #36]	; (f5c0 <log_process_thread_func+0x40>)
    f59a:	f013 f9cd 	bl	22938 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    f59e:	4c08      	ldr	r4, [pc, #32]	; (f5c0 <log_process_thread_func+0x40>)
    f5a0:	2000      	movs	r0, #0
    f5a2:	f7ff fec5 	bl	f330 <z_impl_log_process>
		if (log_process(false) == false) {
    f5a6:	2800      	cmp	r0, #0
    f5a8:	d1fa      	bne.n	f5a0 <log_process_thread_func+0x20>
    f5aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f5ae:	4620      	mov	r0, r4
    f5b0:	f013 f9ee 	bl	22990 <z_impl_k_sem_take>
    f5b4:	e7f4      	b.n	f5a0 <log_process_thread_func+0x20>
    f5b6:	bf00      	nop
    f5b8:	200202d8 	.word	0x200202d8
    f5bc:	200201cc 	.word	0x200201cc
    f5c0:	2002d580 	.word	0x2002d580

0000f5c4 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    f5c4:	4b14      	ldr	r3, [pc, #80]	; (f618 <log_strdup+0x54>)
{
    f5c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
    f5c8:	4298      	cmp	r0, r3
{
    f5ca:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    f5cc:	d302      	bcc.n	f5d4 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    f5ce:	4b13      	ldr	r3, [pc, #76]	; (f61c <log_strdup+0x58>)
    f5d0:	4298      	cmp	r0, r3
    f5d2:	d31b      	bcc.n	f60c <log_strdup+0x48>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    f5d4:	2200      	movs	r2, #0
    f5d6:	a901      	add	r1, sp, #4
    f5d8:	4811      	ldr	r0, [pc, #68]	; (f620 <log_strdup+0x5c>)
    f5da:	f012 fc69 	bl	21eb0 <k_mem_slab_alloc>
	if (err != 0) {
    f5de:	4605      	mov	r5, r0
    f5e0:	b9b8      	cbnz	r0, f612 <log_strdup+0x4e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f5e2:	2201      	movs	r2, #1
    f5e4:	9b01      	ldr	r3, [sp, #4]
    f5e6:	e8d3 1fef 	ldaex	r1, [r3]
    f5ea:	e8c3 2fe0 	stlex	r0, r2, [r3]
    f5ee:	2800      	cmp	r0, #0
    f5f0:	d1f9      	bne.n	f5e6 <log_strdup+0x22>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    f5f2:	9801      	ldr	r0, [sp, #4]
    f5f4:	4621      	mov	r1, r4
    f5f6:	222d      	movs	r2, #45	; 0x2d
    f5f8:	3004      	adds	r0, #4
    f5fa:	f015 f88a 	bl	24712 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    f5fe:	237e      	movs	r3, #126	; 0x7e
    f600:	9c01      	ldr	r4, [sp, #4]
    f602:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    f606:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	return dup->buf;
    f60a:	3404      	adds	r4, #4
}
    f60c:	4620      	mov	r0, r4
    f60e:	b003      	add	sp, #12
    f610:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    f612:	4c04      	ldr	r4, [pc, #16]	; (f624 <log_strdup+0x60>)
    f614:	e7fa      	b.n	f60c <log_strdup+0x48>
    f616:	bf00      	nop
    f618:	000261d0 	.word	0x000261d0
    f61c:	00028e18 	.word	0x00028e18
    f620:	2002020c 	.word	0x2002020c
    f624:	000283e4 	.word	0x000283e4

0000f628 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
    f628:	b148      	cbz	r0, f63e <log_is_strdup+0x16>
    f62a:	4b05      	ldr	r3, [pc, #20]	; (f640 <log_is_strdup+0x18>)
    f62c:	4298      	cmp	r0, r3
    f62e:	d305      	bcc.n	f63c <log_is_strdup+0x14>
    f630:	33d0      	adds	r3, #208	; 0xd0
    f632:	4298      	cmp	r0, r3
    f634:	bf2c      	ite	cs
    f636:	2000      	movcs	r0, #0
    f638:	2001      	movcc	r0, #1
    f63a:	4770      	bx	lr
    f63c:	2000      	movs	r0, #0
}
    f63e:	4770      	bx	lr
    f640:	2002b9d0 	.word	0x2002b9d0

0000f644 <log_free>:
{
    f644:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    f646:	3804      	subs	r0, #4
    f648:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    f64a:	e8d0 3fef 	ldaex	r3, [r0]
    f64e:	1e5a      	subs	r2, r3, #1
    f650:	e8c0 2fe1 	stlex	r1, r2, [r0]
    f654:	2900      	cmp	r1, #0
    f656:	d1f8      	bne.n	f64a <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
    f658:	2b01      	cmp	r3, #1
    f65a:	d103      	bne.n	f664 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    f65c:	a901      	add	r1, sp, #4
    f65e:	4803      	ldr	r0, [pc, #12]	; (f66c <log_free+0x28>)
    f660:	f012 fc52 	bl	21f08 <k_mem_slab_free>
}
    f664:	b003      	add	sp, #12
    f666:	f85d fb04 	ldr.w	pc, [sp], #4
    f66a:	bf00      	nop
    f66c:	2002020c 	.word	0x2002020c

0000f670 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    f670:	2320      	movs	r3, #32
    f672:	4902      	ldr	r1, [pc, #8]	; (f67c <log_msg_pool_init+0xc>)
    f674:	461a      	mov	r2, r3
    f676:	4802      	ldr	r0, [pc, #8]	; (f680 <log_msg_pool_init+0x10>)
    f678:	f016 b9b3 	b.w	259e2 <k_mem_slab_init>
    f67c:	2002baa0 	.word	0x2002baa0
    f680:	200202dc 	.word	0x200202dc

0000f684 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
    f684:	2300      	movs	r3, #0
{
    f686:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    f688:	4d09      	ldr	r5, [pc, #36]	; (f6b0 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    f68a:	9301      	str	r3, [sp, #4]
    f68c:	2001      	movs	r0, #1
    f68e:	f7ff fe4f 	bl	f330 <z_impl_log_process>
    f692:	4604      	mov	r4, r0
			log_dropped();
    f694:	f7ff fef6 	bl	f484 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    f698:	2200      	movs	r2, #0
    f69a:	a901      	add	r1, sp, #4
    f69c:	4628      	mov	r0, r5
    f69e:	f012 fc07 	bl	21eb0 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    f6a2:	b108      	cbz	r0, f6a8 <log_msg_no_space_handle+0x24>
    f6a4:	2c00      	cmp	r4, #0
    f6a6:	d1f1      	bne.n	f68c <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    f6a8:	9801      	ldr	r0, [sp, #4]
    f6aa:	b003      	add	sp, #12
    f6ac:	bd30      	pop	{r4, r5, pc}
    f6ae:	bf00      	nop
    f6b0:	200202dc 	.word	0x200202dc

0000f6b4 <log_msg_chunk_alloc>:
{
    f6b4:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    f6b6:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    f6b8:	a901      	add	r1, sp, #4
    f6ba:	4806      	ldr	r0, [pc, #24]	; (f6d4 <log_msg_chunk_alloc+0x20>)
	union log_msg_chunk *msg = NULL;
    f6bc:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    f6be:	f012 fbf7 	bl	21eb0 <k_mem_slab_alloc>
	if (err != 0) {
    f6c2:	b110      	cbz	r0, f6ca <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
    f6c4:	f7ff ffde 	bl	f684 <log_msg_no_space_handle>
    f6c8:	9001      	str	r0, [sp, #4]
}
    f6ca:	9801      	ldr	r0, [sp, #4]
    f6cc:	b003      	add	sp, #12
    f6ce:	f85d fb04 	ldr.w	pc, [sp], #4
    f6d2:	bf00      	nop
    f6d4:	200202dc 	.word	0x200202dc

0000f6d8 <msg_free>:
{
    f6d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    f6da:	7a04      	ldrb	r4, [r0, #8]
	u32_t nargs = msg->hdr.params.std.nargs;
    f6dc:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
    f6de:	f014 0401 	ands.w	r4, r4, #1
{
    f6e2:	9001      	str	r0, [sp, #4]
	u32_t nargs = msg->hdr.params.std.nargs;
    f6e4:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    f6e8:	d00e      	beq.n	f708 <msg_free+0x30>
	if (msg->hdr.params.generic.ext == 1) {
    f6ea:	9b01      	ldr	r3, [sp, #4]
    f6ec:	7a1a      	ldrb	r2, [r3, #8]
    f6ee:	0792      	lsls	r2, r2, #30
    f6f0:	d504      	bpl.n	f6fc <msg_free+0x24>
		cont_free(msg->payload.ext.next);
    f6f2:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    f6f4:	4c10      	ldr	r4, [pc, #64]	; (f738 <msg_free+0x60>)
    f6f6:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    f6f8:	9b03      	ldr	r3, [sp, #12]
    f6fa:	b9b3      	cbnz	r3, f72a <msg_free+0x52>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    f6fc:	a901      	add	r1, sp, #4
    f6fe:	480e      	ldr	r0, [pc, #56]	; (f738 <msg_free+0x60>)
    f700:	f012 fc02 	bl	21f08 <k_mem_slab_free>
}
    f704:	b004      	add	sp, #16
    f706:	bd70      	pop	{r4, r5, r6, pc}
	if (log_msg_is_std(msg) && nargs) {
    f708:	2d00      	cmp	r5, #0
    f70a:	d0ee      	beq.n	f6ea <msg_free+0x12>
		for (i = 0; i < nargs; i++) {
    f70c:	42a5      	cmp	r5, r4
    f70e:	9801      	ldr	r0, [sp, #4]
    f710:	d9eb      	bls.n	f6ea <msg_free+0x12>
			void *buf = (void *)log_msg_arg_get(msg, i);
    f712:	4621      	mov	r1, r4
    f714:	f014 fbda 	bl	23ecc <log_msg_arg_get>
    f718:	4606      	mov	r6, r0
			if (log_is_strdup(buf)) {
    f71a:	f7ff ff85 	bl	f628 <log_is_strdup>
    f71e:	b110      	cbz	r0, f726 <msg_free+0x4e>
				log_free(buf);
    f720:	4630      	mov	r0, r6
    f722:	f7ff ff8f 	bl	f644 <log_free>
		for (i = 0; i < nargs; i++) {
    f726:	3401      	adds	r4, #1
    f728:	e7f0      	b.n	f70c <msg_free+0x34>
		next = cont->next;
    f72a:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    f72c:	a903      	add	r1, sp, #12
    f72e:	4620      	mov	r0, r4
    f730:	f012 fbea 	bl	21f08 <k_mem_slab_free>
		cont = next;
    f734:	9503      	str	r5, [sp, #12]
    f736:	e7df      	b.n	f6f8 <msg_free+0x20>
    f738:	200202dc 	.word	0x200202dc

0000f73c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    f73c:	b40e      	push	{r1, r2, r3}
    f73e:	b503      	push	{r0, r1, lr}
    f740:	ab03      	add	r3, sp, #12
    f742:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    f746:	4601      	mov	r1, r0
    f748:	4804      	ldr	r0, [pc, #16]	; (f75c <print_formatted+0x20>)
	va_start(args, fmt);
    f74a:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    f74c:	f014 f95e 	bl	23a0c <z_vprintk>
#endif
	va_end(args);

	return length;
}
    f750:	2000      	movs	r0, #0
    f752:	b002      	add	sp, #8
    f754:	f85d eb04 	ldr.w	lr, [sp], #4
    f758:	b003      	add	sp, #12
    f75a:	4770      	bx	lr
    f75c:	000242cd 	.word	0x000242cd

0000f760 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    f760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    f764:	f011 0402 	ands.w	r4, r1, #2
{
    f768:	b085      	sub	sp, #20
    f76a:	4606      	mov	r6, r0
    f76c:	4690      	mov	r8, r2
    f76e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    f772:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    f776:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    f77a:	d007      	beq.n	f78c <prefix_print+0x2c>
	if (!format) {
    f77c:	f011 0f44 	tst.w	r1, #68	; 0x44
    f780:	d137      	bne.n	f7f2 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    f782:	461a      	mov	r2, r3
    f784:	4932      	ldr	r1, [pc, #200]	; (f850 <prefix_print+0xf0>)
    f786:	f7ff ffd9 	bl	f73c <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    f78a:	4604      	mov	r4, r0
	if (color) {
    f78c:	f1b9 0f00 	cmp.w	r9, #0
    f790:	d00a      	beq.n	f7a8 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
    f792:	4b30      	ldr	r3, [pc, #192]	; (f854 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    f794:	4930      	ldr	r1, [pc, #192]	; (f858 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
    f796:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    f79a:	4b30      	ldr	r3, [pc, #192]	; (f85c <prefix_print+0xfc>)
    f79c:	4630      	mov	r0, r6
    f79e:	2a00      	cmp	r2, #0
    f7a0:	bf08      	it	eq
    f7a2:	461a      	moveq	r2, r3
    f7a4:	f7ff ffca 	bl	f73c <print_formatted>
	if (level_on) {
    f7a8:	b13d      	cbz	r5, f7ba <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    f7aa:	4b2d      	ldr	r3, [pc, #180]	; (f860 <prefix_print+0x100>)
    f7ac:	492d      	ldr	r1, [pc, #180]	; (f864 <prefix_print+0x104>)
    f7ae:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    f7b2:	4630      	mov	r0, r6
    f7b4:	f7ff ffc2 	bl	f73c <print_formatted>
    f7b8:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    f7ba:	f1b8 0f00 	cmp.w	r8, #0
    f7be:	d044      	beq.n	f84a <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    f7c0:	2301      	movs	r3, #1
    f7c2:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    f7c6:	4b28      	ldr	r3, [pc, #160]	; (f868 <prefix_print+0x108>)
    f7c8:	f017 0f10 	tst.w	r7, #16
    f7cc:	4f27      	ldr	r7, [pc, #156]	; (f86c <prefix_print+0x10c>)
    f7ce:	bf18      	it	ne
    f7d0:	461f      	movne	r7, r3
    f7d2:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    f7d6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    f7da:	f7ff fe5f 	bl	f49c <log_source_name_get>
    f7de:	4639      	mov	r1, r7
    f7e0:	4602      	mov	r2, r0
    f7e2:	4630      	mov	r0, r6
    f7e4:	f7ff ffaa 	bl	f73c <print_formatted>
    f7e8:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    f7ea:	4420      	add	r0, r4
    f7ec:	b005      	add	sp, #20
    f7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    f7f2:	4a1f      	ldr	r2, [pc, #124]	; (f870 <prefix_print+0x110>)
    f7f4:	6811      	ldr	r1, [r2, #0]
    f7f6:	b331      	cbz	r1, f846 <prefix_print+0xe6>
		timestamp /= timestamp_div;
    f7f8:	4a1e      	ldr	r2, [pc, #120]	; (f874 <prefix_print+0x114>)
    f7fa:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    f7fe:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
    f800:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    f804:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
    f808:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    f80c:	fbb4 f2fe 	udiv	r2, r4, lr
    f810:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    f814:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    f818:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f81c:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    f820:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f824:	fb01 441b 	mls	r4, r1, fp, r4
    f828:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    f82c:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f830:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    f834:	e9cd b101 	strd	fp, r1, [sp, #4]
    f838:	fb0a e113 	mls	r1, sl, r3, lr
    f83c:	9100      	str	r1, [sp, #0]
    f83e:	490e      	ldr	r1, [pc, #56]	; (f878 <prefix_print+0x118>)
    f840:	f7ff ff7c 	bl	f73c <print_formatted>
    f844:	e7a1      	b.n	f78a <prefix_print+0x2a>
		length = 0;
    f846:	4608      	mov	r0, r1
    f848:	e79f      	b.n	f78a <prefix_print+0x2a>
	total += print_formatted(log_output,
    f84a:	4f08      	ldr	r7, [pc, #32]	; (f86c <prefix_print+0x10c>)
    f84c:	e7c1      	b.n	f7d2 <prefix_print+0x72>
    f84e:	bf00      	nop
    f850:	00028449 	.word	0x00028449
    f854:	00026604 	.word	0x00026604
    f858:	00027eaf 	.word	0x00027eaf
    f85c:	0002843b 	.word	0x0002843b
    f860:	00026618 	.word	0x00026618
    f864:	0002846e 	.word	0x0002846e
    f868:	00028445 	.word	0x00028445
    f86c:	00028440 	.word	0x00028440
    f870:	200202f8 	.word	0x200202f8
    f874:	200202fc 	.word	0x200202fc
    f878:	00028452 	.word	0x00028452

0000f87c <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    f87c:	b538      	push	{r3, r4, r5, lr}
    f87e:	460c      	mov	r4, r1
	if (color) {
    f880:	07e1      	lsls	r1, r4, #31
{
    f882:	4605      	mov	r5, r0
	if (color) {
    f884:	d503      	bpl.n	f88e <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    f886:	4a08      	ldr	r2, [pc, #32]	; (f8a8 <postfix_print+0x2c>)
    f888:	4908      	ldr	r1, [pc, #32]	; (f8ac <postfix_print+0x30>)
    f88a:	f7ff ff57 	bl	f73c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f88e:	06e2      	lsls	r2, r4, #27
    f890:	d408      	bmi.n	f8a4 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    f892:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    f894:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    f896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    f89a:	bf4c      	ite	mi
    f89c:	4904      	ldrmi	r1, [pc, #16]	; (f8b0 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    f89e:	4905      	ldrpl	r1, [pc, #20]	; (f8b4 <postfix_print+0x38>)
    f8a0:	f7ff bf4c 	b.w	f73c <print_formatted>
}
    f8a4:	bd38      	pop	{r3, r4, r5, pc}
    f8a6:	bf00      	nop
    f8a8:	0002843b 	.word	0x0002843b
    f8ac:	00027eaf 	.word	0x00027eaf
    f8b0:	00027ce6 	.word	0x00027ce6
    f8b4:	00027ce5 	.word	0x00027ce5

0000f8b8 <hexdump_line_print>:
{
    f8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f8bc:	4698      	mov	r8, r3
    f8be:	9b08      	ldr	r3, [sp, #32]
    f8c0:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f8c2:	06dd      	lsls	r5, r3, #27
{
    f8c4:	460e      	mov	r6, r1
    f8c6:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f8c8:	d405      	bmi.n	f8d6 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    f8ca:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    f8cc:	bf4c      	ite	mi
    f8ce:	4929      	ldrmi	r1, [pc, #164]	; (f974 <hexdump_line_print+0xbc>)
		print_formatted(ctx, "\r\n");
    f8d0:	4929      	ldrpl	r1, [pc, #164]	; (f978 <hexdump_line_print+0xc0>)
    f8d2:	f7ff ff33 	bl	f73c <print_formatted>
{
    f8d6:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
    f8d8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; f980 <hexdump_line_print+0xc8>
	for (int i = 0; i < prefix_offset; i++) {
    f8dc:	4545      	cmp	r5, r8
    f8de:	db2a      	blt.n	f936 <hexdump_line_print+0x7e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f8e0:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    f8e2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; f984 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%02x ", data[i]);
    f8e6:	f8df 90a0 	ldr.w	r9, [pc, #160]	; f988 <hexdump_line_print+0xd0>
			print_formatted(log_output, " ");
    f8ea:	f8df a094 	ldr.w	sl, [pc, #148]	; f980 <hexdump_line_print+0xc8>
		if (i < length) {
    f8ee:	42bd      	cmp	r5, r7
    f8f0:	d22e      	bcs.n	f950 <hexdump_line_print+0x98>
			print_formatted(log_output, "%02x ", data[i]);
    f8f2:	5d72      	ldrb	r2, [r6, r5]
    f8f4:	4649      	mov	r1, r9
    f8f6:	4620      	mov	r0, r4
    f8f8:	f7ff ff20 	bl	f73c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f8fc:	3501      	adds	r5, #1
    f8fe:	2d10      	cmp	r5, #16
    f900:	d11f      	bne.n	f942 <hexdump_line_print+0x8a>
	print_formatted(log_output, "|");
    f902:	491e      	ldr	r1, [pc, #120]	; (f97c <hexdump_line_print+0xc4>)
    f904:	4620      	mov	r0, r4
    f906:	f7ff ff19 	bl	f73c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f90a:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    f90c:	f8df 8070 	ldr.w	r8, [pc, #112]	; f980 <hexdump_line_print+0xc8>
			print_formatted(log_output, "%c",
    f910:	f8df 9078 	ldr.w	r9, [pc, #120]	; f98c <hexdump_line_print+0xd4>
		if (i < length) {
    f914:	42af      	cmp	r7, r5
    f916:	d927      	bls.n	f968 <hexdump_line_print+0xb0>
			      isprint((int)c) ? c : '.');
    f918:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    f91a:	4649      	mov	r1, r9
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    f91c:	f1a2 0320 	sub.w	r3, r2, #32
    f920:	2b5f      	cmp	r3, #95	; 0x5f
    f922:	bf28      	it	cs
    f924:	222e      	movcs	r2, #46	; 0x2e
    f926:	4620      	mov	r0, r4
    f928:	f7ff ff08 	bl	f73c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f92c:	3501      	adds	r5, #1
    f92e:	2d10      	cmp	r5, #16
    f930:	d113      	bne.n	f95a <hexdump_line_print+0xa2>
}
    f932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    f936:	4649      	mov	r1, r9
    f938:	4620      	mov	r0, r4
    f93a:	f7ff feff 	bl	f73c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    f93e:	3501      	adds	r5, #1
    f940:	e7cc      	b.n	f8dc <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
    f942:	076a      	lsls	r2, r5, #29
    f944:	d1d3      	bne.n	f8ee <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
    f946:	4651      	mov	r1, sl
    f948:	4620      	mov	r0, r4
    f94a:	f7ff fef7 	bl	f73c <print_formatted>
    f94e:	e7ce      	b.n	f8ee <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
    f950:	4641      	mov	r1, r8
    f952:	4620      	mov	r0, r4
    f954:	f7ff fef2 	bl	f73c <print_formatted>
    f958:	e7d0      	b.n	f8fc <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
    f95a:	076b      	lsls	r3, r5, #29
    f95c:	d1da      	bne.n	f914 <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    f95e:	4641      	mov	r1, r8
    f960:	4620      	mov	r0, r4
    f962:	f7ff feeb 	bl	f73c <print_formatted>
    f966:	e7d5      	b.n	f914 <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    f968:	4641      	mov	r1, r8
    f96a:	4620      	mov	r0, r4
    f96c:	f7ff fee6 	bl	f73c <print_formatted>
    f970:	e7dc      	b.n	f92c <hexdump_line_print+0x74>
    f972:	bf00      	nop
    f974:	00027ce6 	.word	0x00027ce6
    f978:	00027ce5 	.word	0x00027ce5
    f97c:	0002840c 	.word	0x0002840c
    f980:	0002840a 	.word	0x0002840a
    f984:	00028408 	.word	0x00028408
    f988:	00028402 	.word	0x00028402
    f98c:	0002840e 	.word	0x0002840e

0000f990 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    f990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    f994:	7a8b      	ldrb	r3, [r1, #10]
    f996:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f998:	f013 0407 	ands.w	r4, r3, #7
{
    f99c:	b08a      	sub	sp, #40	; 0x28
    f99e:	4605      	mov	r5, r0
    f9a0:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    f9a2:	7a0a      	ldrb	r2, [r1, #8]
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f9a4:	d01c      	beq.n	f9e0 <log_output_msg_process+0x50>
    f9a6:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
    f9a8:	8949      	ldrh	r1, [r1, #10]
    f9aa:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f9ae:	0989      	lsrs	r1, r1, #6
    f9b0:	9102      	str	r1, [sp, #8]
    f9b2:	e9cd 4300 	strd	r4, r3, [sp]
    f9b6:	f002 0201 	and.w	r2, r2, #1
    f9ba:	68f3      	ldr	r3, [r6, #12]
    f9bc:	4639      	mov	r1, r7
    f9be:	f7ff fecf 	bl	f760 <prefix_print>
    f9c2:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    f9c4:	7a33      	ldrb	r3, [r6, #8]
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    f9c6:	07da      	lsls	r2, r3, #31
    f9c8:	d40c      	bmi.n	f9e4 <log_output_msg_process+0x54>
		std_print(msg, log_output);
    f9ca:	4629      	mov	r1, r5
    f9cc:	4630      	mov	r0, r6
    f9ce:	f014 fb13 	bl	23ff8 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    f9d2:	b34c      	cbz	r4, fa28 <log_output_msg_process+0x98>
		postfix_print(log_output, flags, level);
    f9d4:	4622      	mov	r2, r4
    f9d6:	4639      	mov	r1, r7
    f9d8:	4628      	mov	r0, r5
    f9da:	f7ff ff4f 	bl	f87c <postfix_print>
    f9de:	e023      	b.n	fa28 <log_output_msg_process+0x98>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f9e0:	46a1      	mov	r9, r4
    f9e2:	e7ef      	b.n	f9c4 <log_output_msg_process+0x34>
	} else if (raw_string) {
    f9e4:	bb34      	cbnz	r4, fa34 <log_output_msg_process+0xa4>
	size_t offset = 0;
    f9e6:	4627      	mov	r7, r4
		length = log_output->size;
    f9e8:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    f9ea:	aa06      	add	r2, sp, #24
		length = log_output->size;
    f9ec:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    f9ee:	68a9      	ldr	r1, [r5, #8]
    f9f0:	463b      	mov	r3, r7
    f9f2:	4630      	mov	r0, r6
    f9f4:	f014 faec 	bl	23fd0 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    f9f8:	9a06      	ldr	r2, [sp, #24]
    f9fa:	686b      	ldr	r3, [r5, #4]
    f9fc:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    f9fe:	b13a      	cbz	r2, fa10 <log_output_msg_process+0x80>
			eol = (log_output->buf[length - 1] == '\n');
    fa00:	68ab      	ldr	r3, [r5, #8]
    fa02:	4413      	add	r3, r2
    fa04:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    fa08:	f1a4 030a 	sub.w	r3, r4, #10
    fa0c:	425c      	negs	r4, r3
    fa0e:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    fa10:	4628      	mov	r0, r5
    fa12:	f014 fc4e 	bl	242b2 <log_output_flush>
		offset += length;
    fa16:	9b06      	ldr	r3, [sp, #24]
    fa18:	441f      	add	r7, r3
	} while (length > 0);
    fa1a:	2b00      	cmp	r3, #0
    fa1c:	d1e4      	bne.n	f9e8 <log_output_msg_process+0x58>
	if (eol) {
    fa1e:	b11c      	cbz	r4, fa28 <log_output_msg_process+0x98>
		print_formatted(log_output, "\r");
    fa20:	4914      	ldr	r1, [pc, #80]	; (fa74 <log_output_msg_process+0xe4>)
    fa22:	4628      	mov	r0, r5
    fa24:	f7ff fe8a 	bl	f73c <print_formatted>
	}

	log_output_flush(log_output);
    fa28:	4628      	mov	r0, r5
    fa2a:	f014 fc42 	bl	242b2 <log_output_flush>
}
    fa2e:	b00a      	add	sp, #40	; 0x28
    fa30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    fa34:	4630      	mov	r0, r6
    fa36:	f014 fa75 	bl	23f24 <log_msg_str_get>
    fa3a:	490f      	ldr	r1, [pc, #60]	; (fa78 <log_output_msg_process+0xe8>)
    fa3c:	4602      	mov	r2, r0
    fa3e:	4628      	mov	r0, r5
    fa40:	f7ff fe7c 	bl	f73c <print_formatted>
	u32_t offset = 0U;
    fa44:	f04f 0800 	mov.w	r8, #0
		length = sizeof(buf);
    fa48:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    fa4c:	aa05      	add	r2, sp, #20
    fa4e:	4643      	mov	r3, r8
    fa50:	a906      	add	r1, sp, #24
    fa52:	4630      	mov	r0, r6
		length = sizeof(buf);
    fa54:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    fa58:	f014 faba 	bl	23fd0 <log_msg_hexdump_data_get>
		if (length) {
    fa5c:	9a05      	ldr	r2, [sp, #20]
    fa5e:	2a00      	cmp	r2, #0
    fa60:	d0b8      	beq.n	f9d4 <log_output_msg_process+0x44>
			hexdump_line_print(log_output, buf, length,
    fa62:	464b      	mov	r3, r9
    fa64:	9700      	str	r7, [sp, #0]
    fa66:	a906      	add	r1, sp, #24
    fa68:	4628      	mov	r0, r5
    fa6a:	f7ff ff25 	bl	f8b8 <hexdump_line_print>
			offset += length;
    fa6e:	9b05      	ldr	r3, [sp, #20]
    fa70:	4498      	add	r8, r3
    fa72:	e7eb      	b.n	fa4c <log_output_msg_process+0xbc>
    fa74:	00028411 	.word	0x00028411
    fa78:	00027eaf 	.word	0x00027eaf

0000fa7c <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    fa7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    fa7e:	e9d0 4300 	ldrd	r4, r3, [r0]
    fa82:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    fa84:	f242 730f 	movw	r3, #9999	; 0x270f
    fa88:	428b      	cmp	r3, r1
    fa8a:	bf28      	it	cs
    fa8c:	460b      	movcs	r3, r1
    fa8e:	4a0d      	ldr	r2, [pc, #52]	; (fac4 <log_output_dropped_process+0x48>)
    fa90:	2105      	movs	r1, #5
    fa92:	4668      	mov	r0, sp
    fa94:	f001 fda2 	bl	115dc <snprintf>
    fa98:	4606      	mov	r6, r0

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    fa9a:	462b      	mov	r3, r5
    fa9c:	4620      	mov	r0, r4
    fa9e:	220b      	movs	r2, #11
    faa0:	4909      	ldr	r1, [pc, #36]	; (fac8 <log_output_dropped_process+0x4c>)
    faa2:	f014 fa9c 	bl	23fde <buffer_write>
	buffer_write(outf, buf, len, dev);
    faa6:	462b      	mov	r3, r5
    faa8:	4632      	mov	r2, r6
    faaa:	4669      	mov	r1, sp
    faac:	4620      	mov	r0, r4
    faae:	f014 fa96 	bl	23fde <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    fab2:	462b      	mov	r3, r5
    fab4:	221b      	movs	r2, #27
    fab6:	4905      	ldr	r1, [pc, #20]	; (facc <log_output_dropped_process+0x50>)
    fab8:	4620      	mov	r0, r4
    faba:	f014 fa90 	bl	23fde <buffer_write>
}
    fabe:	b002      	add	sp, #8
    fac0:	bd70      	pop	{r4, r5, r6, pc}
    fac2:	bf00      	nop
    fac4:	0002823e 	.word	0x0002823e
    fac8:	0002842f 	.word	0x0002842f
    facc:	00028413 	.word	0x00028413

0000fad0 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    fad0:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    fad2:	2100      	movs	r1, #0
	timestamp_div = 1U;
    fad4:	4a07      	ldr	r2, [pc, #28]	; (faf4 <log_output_timestamp_freq_set+0x24>)
{
    fad6:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    fad8:	4c07      	ldr	r4, [pc, #28]	; (faf8 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    fada:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    fadc:	42a0      	cmp	r0, r4
    fade:	d804      	bhi.n	faea <log_output_timestamp_freq_set+0x1a>
    fae0:	b101      	cbz	r1, fae4 <log_output_timestamp_freq_set+0x14>
    fae2:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    fae4:	4b05      	ldr	r3, [pc, #20]	; (fafc <log_output_timestamp_freq_set+0x2c>)
    fae6:	6018      	str	r0, [r3, #0]
}
    fae8:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    faea:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    faec:	005b      	lsls	r3, r3, #1
    faee:	2101      	movs	r1, #1
    faf0:	e7f4      	b.n	fadc <log_output_timestamp_freq_set+0xc>
    faf2:	bf00      	nop
    faf4:	200202fc 	.word	0x200202fc
    faf8:	000f4240 	.word	0x000f4240
    fafc:	200202f8 	.word	0x200202f8

0000fb00 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    fb00:	4801      	ldr	r0, [pc, #4]	; (fb08 <panic+0x8>)
    fb02:	f014 bbd6 	b.w	242b2 <log_output_flush>
    fb06:	bf00      	nop
    fb08:	00026644 	.word	0x00026644

0000fb0c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    fb0c:	4801      	ldr	r0, [pc, #4]	; (fb14 <dropped+0x8>)
    fb0e:	f7ff bfb5 	b.w	fa7c <log_output_dropped_process>
    fb12:	bf00      	nop
    fb14:	00026644 	.word	0x00026644

0000fb18 <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
    fb18:	b508      	push	{r3, lr}
    fb1a:	4803      	ldr	r0, [pc, #12]	; (fb28 <log_backend_uart_init+0x10>)
    fb1c:	f012 f822 	bl	21b64 <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    fb20:	4b02      	ldr	r3, [pc, #8]	; (fb2c <log_backend_uart_init+0x14>)
    fb22:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
    fb24:	bd08      	pop	{r3, pc}
    fb26:	bf00      	nop
    fb28:	00027ad2 	.word	0x00027ad2
    fb2c:	20020308 	.word	0x20020308

0000fb30 <put>:
{
    fb30:	b510      	push	{r4, lr}
    fb32:	460c      	mov	r4, r1
	log_msg_get(msg);
    fb34:	4608      	mov	r0, r1
    fb36:	f014 f9bd 	bl	23eb4 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    fb3a:	4621      	mov	r1, r4
    fb3c:	4804      	ldr	r0, [pc, #16]	; (fb50 <put+0x20>)
    fb3e:	220f      	movs	r2, #15
    fb40:	f7ff ff26 	bl	f990 <log_output_msg_process>
	log_msg_put(msg);
    fb44:	4620      	mov	r0, r4
}
    fb46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fb4a:	f014 b9dc 	b.w	23f06 <log_msg_put>
    fb4e:	bf00      	nop
    fb50:	00026644 	.word	0x00026644

0000fb54 <socket_offload_register>:
void socket_offload_register(const struct socket_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(socket_ops == NULL);

	socket_ops = ops;
    fb54:	4b01      	ldr	r3, [pc, #4]	; (fb5c <socket_offload_register+0x8>)
    fb56:	6018      	str	r0, [r3, #0]
}
    fb58:	4770      	bx	lr
    fb5a:	bf00      	nop
    fb5c:	20020314 	.word	0x20020314

0000fb60 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    fb60:	280a      	cmp	r0, #10
{
    fb62:	b538      	push	{r3, r4, r5, lr}
    fb64:	4604      	mov	r4, r0
    fb66:	4d07      	ldr	r5, [pc, #28]	; (fb84 <console_out+0x24>)
	if ('\n' == c) {
    fb68:	d104      	bne.n	fb74 <console_out+0x14>
    fb6a:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    fb6c:	6843      	ldr	r3, [r0, #4]
    fb6e:	210d      	movs	r1, #13
    fb70:	685b      	ldr	r3, [r3, #4]
    fb72:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    fb74:	6828      	ldr	r0, [r5, #0]
    fb76:	6843      	ldr	r3, [r0, #4]
    fb78:	b2e1      	uxtb	r1, r4
    fb7a:	685b      	ldr	r3, [r3, #4]
    fb7c:	4798      	blx	r3

	return c;
}
    fb7e:	4620      	mov	r0, r4
    fb80:	bd38      	pop	{r3, r4, r5, pc}
    fb82:	bf00      	nop
    fb84:	20020318 	.word	0x20020318

0000fb88 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    fb88:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    fb8a:	4c04      	ldr	r4, [pc, #16]	; (fb9c <uart_console_hook_install+0x14>)
    fb8c:	4620      	mov	r0, r4
    fb8e:	f001 fd1f 	bl	115d0 <__stdout_hook_install>
	__printk_hook_install(console_out);
    fb92:	4620      	mov	r0, r4
}
    fb94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    fb98:	f7ff bb30 	b.w	f1fc <__printk_hook_install>
    fb9c:	0000fb61 	.word	0x0000fb61

0000fba0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    fba0:	b508      	push	{r3, lr}
    fba2:	4804      	ldr	r0, [pc, #16]	; (fbb4 <uart_console_init+0x14>)
    fba4:	f011 ffde 	bl	21b64 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    fba8:	4b03      	ldr	r3, [pc, #12]	; (fbb8 <uart_console_init+0x18>)
    fbaa:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    fbac:	f7ff ffec 	bl	fb88 <uart_console_hook_install>

	return 0;
}
    fbb0:	2000      	movs	r0, #0
    fbb2:	bd08      	pop	{r3, pc}
    fbb4:	00027ad2 	.word	0x00027ad2
    fbb8:	20020318 	.word	0x20020318

0000fbbc <hfclk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int hfclk_init(struct device *dev)
{
    fbbc:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    fbbe:	2200      	movs	r2, #0
{
    fbc0:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    fbc2:	2101      	movs	r1, #1
    fbc4:	2005      	movs	r0, #5
    fbc6:	f000 f9c1 	bl	ff4c <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    fbca:	2005      	movs	r0, #5
    fbcc:	f000 f9ae 	bl	ff2c <arch_irq_enable>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    fbd0:	2202      	movs	r2, #2
    fbd2:	4b05      	ldr	r3, [pc, #20]	; (fbe8 <hfclk_init+0x2c>)
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    fbd4:	2000      	movs	r0, #0
    fbd6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    fbda:	2203      	movs	r2, #3
    fbdc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			(NRF_POWER_INT_USBDETECTED_MASK |
			 NRF_POWER_INT_USBREMOVED_MASK |
			 NRF_POWER_INT_USBPWRRDY_MASK),
			(0))));

	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    fbe0:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
    fbe2:	e9c3 0000 	strd	r0, r0, [r3]

	return 0;
}
    fbe6:	bd10      	pop	{r4, pc}
    fbe8:	40005000 	.word	0x40005000

0000fbec <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    fbec:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    fbee:	4b10      	ldr	r3, [pc, #64]	; (fc30 <nrf_power_clock_isr+0x44>)
    fbf0:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    fbf2:	b162      	cbz	r2, fc0e <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
    fbf4:	4a0f      	ldr	r2, [pc, #60]	; (fc34 <nrf_power_clock_isr+0x48>)
    fbf6:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    fbfa:	07d1      	lsls	r1, r2, #31
    fbfc:	d507      	bpl.n	fc0e <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fbfe:	2200      	movs	r2, #0
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
    fc00:	480d      	ldr	r0, [pc, #52]	; (fc38 <nrf_power_clock_isr+0x4c>)
    fc02:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    fc04:	6883      	ldr	r3, [r0, #8]
    fc06:	7a5b      	ldrb	r3, [r3, #9]
    fc08:	b90b      	cbnz	r3, fc0e <nrf_power_clock_isr+0x22>
			clkstarted_handle(hfclk_dev);
    fc0a:	f014 fc13 	bl	24434 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    fc0e:	4b0b      	ldr	r3, [pc, #44]	; (fc3c <nrf_power_clock_isr+0x50>)
    fc10:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    fc12:	b15a      	cbz	r2, fc2c <nrf_power_clock_isr+0x40>
    return p_reg->INTENSET & mask;
    fc14:	4a07      	ldr	r2, [pc, #28]	; (fc34 <nrf_power_clock_isr+0x48>)
    fc16:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    fc1a:	0792      	lsls	r2, r2, #30
    fc1c:	d506      	bpl.n	fc2c <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fc1e:	2200      	movs	r2, #0

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
    fc20:	4807      	ldr	r0, [pc, #28]	; (fc40 <nrf_power_clock_isr+0x54>)
    fc22:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    fc24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(lfclk_dev);
    fc28:	f014 bc04 	b.w	24434 <clkstarted_handle>
}
    fc2c:	bd08      	pop	{r3, pc}
    fc2e:	bf00      	nop
    fc30:	40005100 	.word	0x40005100
    fc34:	40005000 	.word	0x40005000
    fc38:	2002d494 	.word	0x2002d494
    fc3c:	40005104 	.word	0x40005104
    fc40:	2002d4a0 	.word	0x2002d4a0

0000fc44 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    fc44:	2200      	movs	r2, #0
    fc46:	4b0d      	ldr	r3, [pc, #52]	; (fc7c <rtc1_nrf_isr+0x38>)
    fc48:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    fc4c:	f04f 0220 	mov.w	r2, #32
    fc50:	f3ef 8111 	mrs	r1, BASEPRI
    fc54:	f382 8811 	msr	BASEPRI, r2
    fc58:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    fc5c:	4a08      	ldr	r2, [pc, #32]	; (fc80 <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    fc5e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    fc62:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    fc64:	1ac0      	subs	r0, r0, r3
    fc66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    fc6a:	4403      	add	r3, r0
    fc6c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    fc6e:	f381 8811 	msr	BASEPRI, r1
    fc72:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    fc76:	f013 b879 	b.w	22d6c <z_clock_announce>
    fc7a:	bf00      	nop
    fc7c:	40015000 	.word	0x40015000
    fc80:	20020334 	.word	0x20020334

0000fc84 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    fc84:	b570      	push	{r4, r5, r6, lr}
    fc86:	4818      	ldr	r0, [pc, #96]	; (fce8 <z_clock_driver_init+0x64>)
    fc88:	f011 ff6c 	bl	21b64 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
    fc8c:	b348      	cbz	r0, fce2 <z_clock_driver_init+0x5e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    fc8e:	6843      	ldr	r3, [r0, #4]
    fc90:	2100      	movs	r1, #0
    fc92:	681b      	ldr	r3, [r3, #0]
    fc94:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
    fc96:	2601      	movs	r6, #1
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    fc98:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    fc9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fc9e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    fca2:	4d12      	ldr	r5, [pc, #72]	; (fcec <z_clock_driver_init+0x68>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    fca4:	4631      	mov	r1, r6
    fca6:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    fcaa:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    fcae:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    fcb2:	4b0f      	ldr	r3, [pc, #60]	; (fcf0 <z_clock_driver_init+0x6c>)
    fcb4:	2015      	movs	r0, #21
    fcb6:	601c      	str	r4, [r3, #0]
    fcb8:	4b0e      	ldr	r3, [pc, #56]	; (fcf4 <z_clock_driver_init+0x70>)
    fcba:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    fcbe:	4622      	mov	r2, r4
    fcc0:	f000 f944 	bl	ff4c <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    fcc4:	2015      	movs	r0, #21
    fcc6:	f000 f931 	bl	ff2c <arch_irq_enable>

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    fcca:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    fccc:	4b0a      	ldr	r3, [pc, #40]	; (fcf8 <z_clock_driver_init+0x74>)
    fcce:	601e      	str	r6, [r3, #0]
    fcd0:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
    fcd2:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
    fcd6:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    fcd8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    fcdc:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
    fce0:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    fce2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fce6:	e7fb      	b.n	fce0 <z_clock_driver_init+0x5c>
    fce8:	000284ab 	.word	0x000284ab
    fcec:	40015000 	.word	0x40015000
    fcf0:	40015140 	.word	0x40015140
    fcf4:	e000e100 	.word	0xe000e100
    fcf8:	40015008 	.word	0x40015008

0000fcfc <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    fcfc:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    fcfe:	4e21      	ldr	r6, [pc, #132]	; (fd84 <z_clock_set_timeout+0x88>)
    fd00:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    fd04:	bf08      	it	eq
    fd06:	4630      	moveq	r0, r6
	__asm__ volatile(
    fd08:	f04f 0320 	mov.w	r3, #32
    fd0c:	f3ef 8411 	mrs	r4, BASEPRI
    fd10:	f383 8811 	msr	BASEPRI, r3
    fd14:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    fd18:	491b      	ldr	r1, [pc, #108]	; (fd88 <z_clock_set_timeout+0x8c>)
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	bool zli_fixup = IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS);

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
    fd1a:	4b1c      	ldr	r3, [pc, #112]	; (fd8c <z_clock_set_timeout+0x90>)
    fd1c:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
    fd20:	681d      	ldr	r5, [r3, #0]
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    fd22:	3801      	subs	r0, #1
	return (a - b) & COUNTER_MAX;
    fd24:	1b53      	subs	r3, r2, r5
    fd26:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	cyc += (CYC_PER_TICK - 1);
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
	cyc += last_count;
    fd2a:	3501      	adds	r5, #1
    fd2c:	442b      	add	r3, r5
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
    fd2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	cyc += last_count;
    fd32:	42b0      	cmp	r0, r6
    fd34:	bfd4      	ite	le
    fd36:	1818      	addle	r0, r3, r0
    fd38:	1998      	addgt	r0, r3, r6
	return (a - b) & COUNTER_MAX;
    fd3a:	1a82      	subs	r2, r0, r2
    fd3c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    fd40:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    fd44:	2a02      	cmp	r2, #2
    p_reg->CC[ch] = cc_val;
    fd46:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
    fd4a:	d904      	bls.n	fd56 <z_clock_set_timeout+0x5a>
	__asm__ volatile(
    fd4c:	f384 8811 	msr	BASEPRI, r4
    fd50:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    fd54:	bd70      	pop	{r4, r5, r6, pc}
     return p_reg->COUNTER;
    fd56:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    fd5a:	4a0d      	ldr	r2, [pc, #52]	; (fd90 <z_clock_set_timeout+0x94>)
	return (a - b) & COUNTER_MAX;
    fd5c:	1ac3      	subs	r3, r0, r3
    fd5e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    fd62:	1e5d      	subs	r5, r3, #1
    fd64:	4295      	cmp	r5, r2
    fd66:	d905      	bls.n	fd74 <z_clock_set_timeout+0x78>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fd68:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    fd6c:	4b09      	ldr	r3, [pc, #36]	; (fd94 <z_clock_set_timeout+0x98>)
    fd6e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    fd72:	e7eb      	b.n	fd4c <z_clock_set_timeout+0x50>
		} else if (dt == 1) {
    fd74:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    fd76:	bf02      	ittt	eq
    fd78:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    fd7a:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    fd7e:	f8c1 0540 	streq.w	r0, [r1, #1344]	; 0x540
    fd82:	e7e3      	b.n	fd4c <z_clock_set_timeout+0x50>
    fd84:	00fffffe 	.word	0x00fffffe
    fd88:	40015000 	.word	0x40015000
    fd8c:	20020334 	.word	0x20020334
    fd90:	007ffffe 	.word	0x007ffffe
    fd94:	e000e100 	.word	0xe000e100

0000fd98 <z_clock_elapsed>:
	__asm__ volatile(
    fd98:	f04f 0220 	mov.w	r2, #32
    fd9c:	f3ef 8311 	mrs	r3, BASEPRI
    fda0:	f382 8811 	msr	BASEPRI, r2
    fda4:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    fda8:	4a06      	ldr	r2, [pc, #24]	; (fdc4 <z_clock_elapsed+0x2c>)
    fdaa:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    fdae:	4a06      	ldr	r2, [pc, #24]	; (fdc8 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    fdb0:	6812      	ldr	r2, [r2, #0]
    fdb2:	1a80      	subs	r0, r0, r2
    fdb4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    fdb8:	f383 8811 	msr	BASEPRI, r3
    fdbc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    fdc0:	4770      	bx	lr
    fdc2:	bf00      	nop
    fdc4:	40015000 	.word	0x40015000
    fdc8:	20020334 	.word	0x20020334

0000fdcc <z_timer_cycle_get_32>:
	__asm__ volatile(
    fdcc:	f04f 0320 	mov.w	r3, #32
    fdd0:	f3ef 8211 	mrs	r2, BASEPRI
    fdd4:	f383 8811 	msr	BASEPRI, r3
    fdd8:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    fddc:	4906      	ldr	r1, [pc, #24]	; (fdf8 <z_timer_cycle_get_32+0x2c>)
    fdde:	4b07      	ldr	r3, [pc, #28]	; (fdfc <z_timer_cycle_get_32+0x30>)
    fde0:	6808      	ldr	r0, [r1, #0]
    fde2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    fde6:	f382 8811 	msr	BASEPRI, r2
    fdea:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    fdee:	1a1b      	subs	r3, r3, r0
    fdf0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    fdf4:	4418      	add	r0, r3
    fdf6:	4770      	bx	lr
    fdf8:	20020334 	.word	0x20020334
    fdfc:	40015000 	.word	0x40015000

0000fe00 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    fe00:	4807      	ldr	r0, [pc, #28]	; (fe20 <_EXIT_EXC+0xe>)

    ldr r1, [r0, #_kernel_offset_to_current]
    fe02:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    fe04:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    fe06:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    fe08:	d003      	beq.n	fe12 <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    fe0a:	4906      	ldr	r1, [pc, #24]	; (fe24 <_EXIT_EXC+0x12>)
    ldr r2, =_SCS_ICSR_PENDSV
    fe0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    fe10:	600a      	str	r2, [r1, #0]

0000fe12 <_EXIT_EXC>:
_EXIT_EXC:
#endif /* CONFIG_PREEMPT_ENABLED */

#ifdef CONFIG_STACK_SENTINEL
#if defined(CONFIG_CPU_CORTEX_M)
    push {r0, lr}
    fe12:	b501      	push	{r0, lr}
    bl z_check_stack_sentinel
    fe14:	f012 fdfa 	bl	22a0c <z_check_stack_sentinel>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0, r1}
    mov lr, r1
#else
    pop {r0, lr}
    fe18:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    fe1c:	4770      	bx	lr
    fe1e:	0000      	.short	0x0000
    ldr r0, =_kernel
    fe20:	20025cfc 	.word	0x20025cfc
    ldr r1, =_SCS_ICSR
    fe24:	e000ed04 	.word	0xe000ed04

0000fe28 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    fe28:	4a09      	ldr	r2, [pc, #36]	; (fe50 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    fe2a:	490a      	ldr	r1, [pc, #40]	; (fe54 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    fe2c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    fe2e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    fe30:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    fe32:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    fe34:	4908      	ldr	r1, [pc, #32]	; (fe58 <arch_swap+0x30>)
    fe36:	684b      	ldr	r3, [r1, #4]
    fe38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    fe3c:	604b      	str	r3, [r1, #4]
    fe3e:	2300      	movs	r3, #0
    fe40:	f383 8811 	msr	BASEPRI, r3
    fe44:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    fe48:	6893      	ldr	r3, [r2, #8]
}
    fe4a:	6e98      	ldr	r0, [r3, #104]	; 0x68
    fe4c:	4770      	bx	lr
    fe4e:	bf00      	nop
    fe50:	20025cfc 	.word	0x20025cfc
    fe54:	00027850 	.word	0x00027850
    fe58:	e000ed00 	.word	0xe000ed00

0000fe5c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    fe5c:	4929      	ldr	r1, [pc, #164]	; (ff04 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    fe5e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    fe60:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    fe64:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    fe66:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    fe6a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
    fe6e:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    fe72:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
    fe76:	d004      	beq.n	fe82 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
    fe78:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
    fe7c:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
    fe80:	e007      	b.n	fe92 <out_fp_endif>

0000fe82 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
    fe82:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
    fe86:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
    fe8a:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
    fe8e:	f050 0004 	orrs.w	r0, r0, #4

0000fe92 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
    fe92:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    fe96:	2020      	movs	r0, #32
    msr BASEPRI, r0
    fe98:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    fe9c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    fea0:	4f19      	ldr	r7, [pc, #100]	; (ff08 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    fea2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    fea6:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    fea8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    feaa:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    feac:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    feae:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    feb0:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    feb2:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
    feb6:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
    feba:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
    febe:	d105      	bne.n	fecc <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    fec0:	2300      	movs	r3, #0
    vmsr fpscr, r3
    fec2:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    fec6:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
    feca:	e005      	b.n	fed8 <in_fp_endif>

0000fecc <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
    fecc:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
    fed0:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
    fed4:	ec90 8a10 	vldmia	r0, {s16-s31}

0000fed8 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    fed8:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
    fedc:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    fee0:	f383 8814 	msr	CONTROL, r3
    isb
    fee4:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    fee8:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    feea:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    feec:	f014 face 	bl	2448c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    fef0:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    fef4:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    fef8:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    fefc:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    ff00:	4770      	bx	lr
    ff02:	0000      	.short	0x0000
    ldr r1, =_kernel
    ff04:	20025cfc 	.word	0x20025cfc
    ldr v4, =_SCS_ICSR
    ff08:	e000ed04 	.word	0xe000ed04

0000ff0c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    ff0c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    ff10:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    ff12:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    ff16:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    ff1a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    ff1c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    ff20:	2902      	cmp	r1, #2
    beq _oops
    ff22:	d0ff      	beq.n	ff24 <_oops>

0000ff24 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    ff24:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    ff26:	f014 faa6 	bl	24476 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    ff2a:	bd01      	pop	{r0, pc}

0000ff2c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    ff2c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    ff2e:	2b00      	cmp	r3, #0
    ff30:	db08      	blt.n	ff44 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ff32:	2201      	movs	r2, #1
    ff34:	f000 001f 	and.w	r0, r0, #31
    ff38:	fa02 f000 	lsl.w	r0, r2, r0
    ff3c:	4a02      	ldr	r2, [pc, #8]	; (ff48 <arch_irq_enable+0x1c>)
    ff3e:	095b      	lsrs	r3, r3, #5
    ff40:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    ff44:	4770      	bx	lr
    ff46:	bf00      	nop
    ff48:	e000e100 	.word	0xe000e100

0000ff4c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    ff4c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    ff4e:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    ff50:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ff54:	bfa8      	it	ge
    ff56:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    ff5a:	ea4f 1141 	mov.w	r1, r1, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ff5e:	bfb8      	it	lt
    ff60:	4b05      	ldrlt	r3, [pc, #20]	; (ff78 <z_arm_irq_priority_set+0x2c>)
    ff62:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ff64:	bfab      	itete	ge
    ff66:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ff6a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ff6e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ff72:	5419      	strblt	r1, [r3, r0]
}
    ff74:	4770      	bx	lr
    ff76:	bf00      	nop
    ff78:	e000ed14 	.word	0xe000ed14

0000ff7c <_arch_isr_direct_pm>:
	z_arm_reserved();
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    ff7c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    ff7e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    ff80:	4b04      	ldr	r3, [pc, #16]	; (ff94 <_arch_isr_direct_pm+0x18>)
    ff82:	6a18      	ldr	r0, [r3, #32]
    ff84:	b118      	cbz	r0, ff8e <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    ff86:	2200      	movs	r2, #0
    ff88:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    ff8a:	f015 fd28 	bl	259de <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    ff8e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    ff90:	bd08      	pop	{r3, pc}
    ff92:	bf00      	nop
    ff94:	20025cfc 	.word	0x20025cfc

0000ff98 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
    ff98:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ff9a:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
    ff9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
    ff9e:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    ffa0:	9300      	str	r3, [sp, #0]
    ffa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
	stackEnd = pStackMem + stackSize;
    ffa4:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    ffa6:	f015 ff3c 	bl	25e22 <z_new_thread_init>
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    ffaa:	4a0c      	ldr	r2, [pc, #48]	; (ffdc <arch_new_thread+0x44>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    ffac:	f1a4 0320 	sub.w	r3, r4, #32
    ffb0:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    ffb4:	f022 0201 	bic.w	r2, r2, #1
    ffb8:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    ffba:	9a06      	ldr	r2, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
    ffbc:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    ffbe:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    ffc0:	9a07      	ldr	r2, [sp, #28]
    ffc2:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    ffc4:	9a08      	ldr	r2, [sp, #32]
    ffc6:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
    ffc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    ffcc:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    ffce:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    ffd0:	2300      	movs	r3, #0
    ffd2:	666b      	str	r3, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
    ffd4:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    ffd8:	b002      	add	sp, #8
    ffda:	bd70      	pop	{r4, r5, r6, pc}
    ffdc:	000239a3 	.word	0x000239a3

0000ffe0 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    ffe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ffe4:	461f      	mov	r7, r3
    ffe6:	4606      	mov	r6, r0
    ffe8:	460c      	mov	r4, r1
    ffea:	4690      	mov	r8, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    ffec:	2300      	movs	r3, #0
    ffee:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    fff2:	f3ef 8514 	mrs	r5, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    fff6:	f025 0504 	bic.w	r5, r5, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    fffa:	f385 8814 	msr	CONTROL, r5
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    fffe:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   10002:	f000 fc09 	bl	10818 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
   10006:	4b0a      	ldr	r3, [pc, #40]	; (10030 <arch_switch_to_main_thread+0x50>)
	start_of_main_stack =
   10008:	4444      	add	r4, r8
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1000a:	4630      	mov	r0, r6
	_current = main_thread;
   1000c:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
   1000e:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
   10012:	f014 fa3b 	bl	2448c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   10016:	4638      	mov	r0, r7
   10018:	f384 8809 	msr	PSP, r4
   1001c:	2100      	movs	r1, #0
   1001e:	b663      	cpsie	if
   10020:	f381 8811 	msr	BASEPRI, r1
   10024:	f3bf 8f6f 	isb	sy
   10028:	2200      	movs	r2, #0
   1002a:	2300      	movs	r3, #0
   1002c:	f013 fcb9 	bl	239a2 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   10030:	20025cfc 	.word	0x20025cfc

00010034 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
   10034:	4901      	ldr	r1, [pc, #4]	; (1003c <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   10036:	2210      	movs	r2, #16
	str r2, [r1]
   10038:	600a      	str	r2, [r1, #0]
#endif
	bx lr
   1003a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   1003c:	e000ed10 	.word	0xe000ed10

00010040 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   10040:	4040      	eors	r0, r0
	msr BASEPRI, r0
   10042:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
   10046:	bf30      	wfi

	bx lr
   10048:	4770      	bx	lr
   1004a:	bf00      	nop

0001004c <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
   1004c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   10050:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
   10054:	4672      	mov	r2, lr

	push {r0, lr}
   10056:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
   10058:	f000 fab0 	bl	105bc <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
   1005c:	bd01      	pop	{r0, pc}
   1005e:	bf00      	nop

00010060 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   10060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10064:	4681      	mov	r9, r0
   10066:	b08a      	sub	sp, #40	; 0x28

	if (esf != NULL) {
   10068:	460c      	mov	r4, r1
   1006a:	2900      	cmp	r1, #0
   1006c:	d07a      	beq.n	10164 <z_arm_fatal_error+0x104>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1006e:	2201      	movs	r2, #1
   10070:	f04f 0300 	mov.w	r3, #0
   10074:	4d3f      	ldr	r5, [pc, #252]	; (10174 <z_arm_fatal_error+0x114>)
   10076:	f362 0307 	bfi	r3, r2, #0, #8
   1007a:	4a3f      	ldr	r2, [pc, #252]	; (10178 <z_arm_fatal_error+0x118>)
   1007c:	483f      	ldr	r0, [pc, #252]	; (1017c <z_arm_fatal_error+0x11c>)
   1007e:	1aad      	subs	r5, r5, r2
   10080:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   10084:	f365 138f 	bfi	r3, r5, #6, #10
   10088:	f8ad 3000 	strh.w	r3, [sp]
   1008c:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   10090:	6809      	ldr	r1, [r1, #0]
   10092:	f013 fe97 	bl	23dc4 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   10096:	2201      	movs	r2, #1
   10098:	f04f 0300 	mov.w	r3, #0
   1009c:	f362 0307 	bfi	r3, r2, #0, #8
   100a0:	f365 138f 	bfi	r3, r5, #6, #10
   100a4:	f8ad 3000 	strh.w	r3, [sp]
   100a8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   100ac:	68e1      	ldr	r1, [r4, #12]
   100ae:	4834      	ldr	r0, [pc, #208]	; (10180 <z_arm_fatal_error+0x120>)
   100b0:	f013 fe88 	bl	23dc4 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   100b4:	2301      	movs	r3, #1
   100b6:	f04f 0200 	mov.w	r2, #0
   100ba:	f363 0207 	bfi	r2, r3, #0, #8
   100be:	f365 128f 	bfi	r2, r5, #6, #10
   100c2:	69e1      	ldr	r1, [r4, #28]
   100c4:	482f      	ldr	r0, [pc, #188]	; (10184 <z_arm_fatal_error+0x124>)
   100c6:	f013 fe51 	bl	23d6c <log_1>
	for (int i = 0; i < 16; i += 4) {
   100ca:	4627      	mov	r7, r4
   100cc:	2600      	movs	r6, #0
		LOG_ERR("s[%d]:  0x%08x  s[%d]:  0x%08x"
   100ce:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 10190 <z_arm_fatal_error+0x130>
   100d2:	edd7 7a08 	vldr	s15, [r7, #32]
   100d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   100da:	edcd 7a03 	vstr	s15, [sp, #12]
   100de:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   100e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   100e6:	edcd 7a05 	vstr	s15, [sp, #20]
   100ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   100ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   100f2:	edcd 7a07 	vstr	s15, [sp, #28]
   100f6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   100fa:	2208      	movs	r2, #8
   100fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   10100:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   10104:	f043 0301 	orr.w	r3, r3, #1
   10108:	f363 0807 	bfi	r8, r3, #0, #8
   1010c:	1c73      	adds	r3, r6, #1
   1010e:	9304      	str	r3, [sp, #16]
   10110:	1cb3      	adds	r3, r6, #2
   10112:	9306      	str	r3, [sp, #24]
   10114:	f365 188f 	bfi	r8, r5, #6, #10
   10118:	1cf3      	adds	r3, r6, #3
   1011a:	9602      	str	r6, [sp, #8]
   1011c:	9308      	str	r3, [sp, #32]
   1011e:	eb0d 0102 	add.w	r1, sp, r2
   10122:	4643      	mov	r3, r8
   10124:	4650      	mov	r0, sl
	for (int i = 0; i < 16; i += 4) {
   10126:	3604      	adds	r6, #4
		LOG_ERR("s[%d]:  0x%08x  s[%d]:  0x%08x"
   10128:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   1012c:	f013 fe65 	bl	23dfa <log_n>
	for (int i = 0; i < 16; i += 4) {
   10130:	2e10      	cmp	r6, #16
   10132:	f107 0710 	add.w	r7, r7, #16
   10136:	d1cc      	bne.n	100d2 <z_arm_fatal_error+0x72>
	LOG_ERR("fpscr:  0x%08x\n", esf->fpscr);
   10138:	2301      	movs	r3, #1
   1013a:	f04f 0200 	mov.w	r2, #0
   1013e:	f363 0207 	bfi	r2, r3, #0, #8
   10142:	f365 128f 	bfi	r2, r5, #6, #10
   10146:	6e21      	ldr	r1, [r4, #96]	; 0x60
   10148:	480f      	ldr	r0, [pc, #60]	; (10188 <z_arm_fatal_error+0x128>)
   1014a:	f013 fe0f 	bl	23d6c <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   1014e:	f04f 0200 	mov.w	r2, #0
   10152:	2301      	movs	r3, #1
   10154:	f363 0207 	bfi	r2, r3, #0, #8
   10158:	f365 128f 	bfi	r2, r5, #6, #10
   1015c:	69a1      	ldr	r1, [r4, #24]
   1015e:	480b      	ldr	r0, [pc, #44]	; (1018c <z_arm_fatal_error+0x12c>)
   10160:	f013 fe04 	bl	23d6c <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   10164:	4621      	mov	r1, r4
   10166:	4648      	mov	r0, r9
   10168:	f011 fd44 	bl	21bf4 <z_fatal_error>
}
   1016c:	b00a      	add	sp, #40	; 0x28
   1016e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10172:	bf00      	nop
   10174:	00026514 	.word	0x00026514
   10178:	000264bc 	.word	0x000264bc
   1017c:	000284d7 	.word	0x000284d7
   10180:	00028506 	.word	0x00028506
   10184:	00028535 	.word	0x00028535
   10188:	00028584 	.word	0x00028584
   1018c:	00028594 	.word	0x00028594
   10190:	00028544 	.word	0x00028544

00010194 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   10194:	bf30      	wfi
    b z_SysNmiOnReset
   10196:	f7ff bffd 	b.w	10194 <z_SysNmiOnReset>
   1019a:	bf00      	nop

0001019c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1019c:	4a11      	ldr	r2, [pc, #68]	; (101e4 <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   1019e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   101a0:	4b11      	ldr	r3, [pc, #68]	; (101e8 <z_arm_prep_c+0x4c>)
   101a2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   101a6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   101a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   101ac:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   101b0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   101b4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   101b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   101bc:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   101c0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   101c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   101c8:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   101cc:	2300      	movs	r3, #0
   101ce:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
   101d2:	f011 fd8f 	bl	21cf4 <z_bss_zero>
	z_data_copy();
   101d6:	f011 fd97 	bl	21d08 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
   101da:	f000 fae9 	bl	107b0 <z_arm_int_lib_init>
	z_cstart();
   101de:	f011 fdc5 	bl	21d6c <z_cstart>
   101e2:	bf00      	nop
   101e4:	0000c000 	.word	0x0000c000
   101e8:	e000ed00 	.word	0xe000ed00

000101ec <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   101ec:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
   101ee:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   101f0:	4a0b      	ldr	r2, [pc, #44]	; (10220 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   101f2:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   101f4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   101f6:	bf1e      	ittt	ne
	movne	r1, #0
   101f8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   101fa:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   101fc:	f015 fbef 	blne	259de <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   10200:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   10202:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   10206:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1020a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
   1020e:	4905      	ldr	r1, [pc, #20]	; (10224 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   10210:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   10212:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   10214:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   10216:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1021a:	4903      	ldr	r1, [pc, #12]	; (10228 <_isr_wrapper+0x3c>)
	bx r1
   1021c:	4708      	bx	r1
   1021e:	0000      	.short	0x0000
	ldr r2, =_kernel
   10220:	20025cfc 	.word	0x20025cfc
	ldr r1, =_sw_isr_table
   10224:	000261d0 	.word	0x000261d0
	ldr r1, =z_arm_int_exit
   10228:	0000fe01 	.word	0x0000fe01

0001022c <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   1022c:	f013 fd6c 	bl	23d08 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   10230:	2020      	movs	r0, #32
    msr BASEPRI, r0
   10232:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
   10236:	4808      	ldr	r0, [pc, #32]	; (10258 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   10238:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   1023c:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1023e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   10242:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   10246:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   10248:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1024a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1024e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   10252:	f7ff ffa3 	bl	1019c <z_arm_prep_c>
   10256:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   10258:	200291d0 	.word	0x200291d0

0001025c <usage_fault.isra.2>:
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   1025c:	2301      	movs	r3, #1
   1025e:	f04f 0100 	mov.w	r1, #0
static u32_t usage_fault(const z_arch_esf_t *esf)
   10262:	b510      	push	{r4, lr}
	PR_FAULT_INFO("***** USAGE FAULT *****");
   10264:	f363 0107 	bfi	r1, r3, #0, #8
   10268:	4c3a      	ldr	r4, [pc, #232]	; (10354 <usage_fault.isra.2+0xf8>)
   1026a:	4b3b      	ldr	r3, [pc, #236]	; (10358 <usage_fault.isra.2+0xfc>)
   1026c:	483b      	ldr	r0, [pc, #236]	; (1035c <usage_fault.isra.2+0x100>)
   1026e:	1ae4      	subs	r4, r4, r3
   10270:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   10274:	f364 118f 	bfi	r1, r4, #6, #10
   10278:	f013 fd6b 	bl	23d52 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1027c:	4b38      	ldr	r3, [pc, #224]	; (10360 <usage_fault.isra.2+0x104>)
   1027e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10280:	0199      	lsls	r1, r3, #6
   10282:	d509      	bpl.n	10298 <usage_fault.isra.2+0x3c>
		PR_FAULT_INFO("  Division by zero");
   10284:	f04f 0100 	mov.w	r1, #0
   10288:	2301      	movs	r3, #1
   1028a:	f363 0107 	bfi	r1, r3, #0, #8
   1028e:	f364 118f 	bfi	r1, r4, #6, #10
   10292:	4834      	ldr	r0, [pc, #208]	; (10364 <usage_fault.isra.2+0x108>)
   10294:	f013 fd5d 	bl	23d52 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   10298:	4b31      	ldr	r3, [pc, #196]	; (10360 <usage_fault.isra.2+0x104>)
   1029a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1029c:	01da      	lsls	r2, r3, #7
   1029e:	d509      	bpl.n	102b4 <usage_fault.isra.2+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
   102a0:	f04f 0100 	mov.w	r1, #0
   102a4:	2301      	movs	r3, #1
   102a6:	f363 0107 	bfi	r1, r3, #0, #8
   102aa:	f364 118f 	bfi	r1, r4, #6, #10
   102ae:	482e      	ldr	r0, [pc, #184]	; (10368 <usage_fault.isra.2+0x10c>)
   102b0:	f013 fd4f 	bl	23d52 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   102b4:	4b2a      	ldr	r3, [pc, #168]	; (10360 <usage_fault.isra.2+0x104>)
   102b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   102b8:	02db      	lsls	r3, r3, #11
   102ba:	d509      	bpl.n	102d0 <usage_fault.isra.2+0x74>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   102bc:	f04f 0100 	mov.w	r1, #0
   102c0:	2301      	movs	r3, #1
   102c2:	f363 0107 	bfi	r1, r3, #0, #8
   102c6:	f364 118f 	bfi	r1, r4, #6, #10
   102ca:	4828      	ldr	r0, [pc, #160]	; (1036c <usage_fault.isra.2+0x110>)
   102cc:	f013 fd41 	bl	23d52 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   102d0:	4b23      	ldr	r3, [pc, #140]	; (10360 <usage_fault.isra.2+0x104>)
   102d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   102d4:	0318      	lsls	r0, r3, #12
   102d6:	d509      	bpl.n	102ec <usage_fault.isra.2+0x90>
		PR_FAULT_INFO("  No coprocessor instructions");
   102d8:	f04f 0100 	mov.w	r1, #0
   102dc:	2301      	movs	r3, #1
   102de:	f363 0107 	bfi	r1, r3, #0, #8
   102e2:	f364 118f 	bfi	r1, r4, #6, #10
   102e6:	4822      	ldr	r0, [pc, #136]	; (10370 <usage_fault.isra.2+0x114>)
   102e8:	f013 fd33 	bl	23d52 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   102ec:	4b1c      	ldr	r3, [pc, #112]	; (10360 <usage_fault.isra.2+0x104>)
   102ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   102f0:	0359      	lsls	r1, r3, #13
   102f2:	d509      	bpl.n	10308 <usage_fault.isra.2+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   102f4:	f04f 0100 	mov.w	r1, #0
   102f8:	2301      	movs	r3, #1
   102fa:	f363 0107 	bfi	r1, r3, #0, #8
   102fe:	f364 118f 	bfi	r1, r4, #6, #10
   10302:	481c      	ldr	r0, [pc, #112]	; (10374 <usage_fault.isra.2+0x118>)
   10304:	f013 fd25 	bl	23d52 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   10308:	4b15      	ldr	r3, [pc, #84]	; (10360 <usage_fault.isra.2+0x104>)
   1030a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1030c:	039a      	lsls	r2, r3, #14
   1030e:	d509      	bpl.n	10324 <usage_fault.isra.2+0xc8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   10310:	f04f 0100 	mov.w	r1, #0
   10314:	2301      	movs	r3, #1
   10316:	f363 0107 	bfi	r1, r3, #0, #8
   1031a:	f364 118f 	bfi	r1, r4, #6, #10
   1031e:	4816      	ldr	r0, [pc, #88]	; (10378 <usage_fault.isra.2+0x11c>)
   10320:	f013 fd17 	bl	23d52 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   10324:	4b0e      	ldr	r3, [pc, #56]	; (10360 <usage_fault.isra.2+0x104>)
   10326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10328:	03db      	lsls	r3, r3, #15
   1032a:	d509      	bpl.n	10340 <usage_fault.isra.2+0xe4>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   1032c:	f04f 0100 	mov.w	r1, #0
   10330:	2301      	movs	r3, #1
   10332:	f363 0107 	bfi	r1, r3, #0, #8
   10336:	f364 118f 	bfi	r1, r4, #6, #10
   1033a:	4810      	ldr	r0, [pc, #64]	; (1037c <usage_fault.isra.2+0x120>)
   1033c:	f013 fd09 	bl	23d52 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   10340:	4a07      	ldr	r2, [pc, #28]	; (10360 <usage_fault.isra.2+0x104>)

	return reason;
}
   10342:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   10344:	6a93      	ldr	r3, [r2, #40]	; 0x28
   10346:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1034a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1034e:	6293      	str	r3, [r2, #40]	; 0x28
}
   10350:	bd10      	pop	{r4, pc}
   10352:	bf00      	nop
   10354:	00026514 	.word	0x00026514
   10358:	000264bc 	.word	0x000264bc
   1035c:	00028722 	.word	0x00028722
   10360:	e000ed00 	.word	0xe000ed00
   10364:	0002873a 	.word	0x0002873a
   10368:	0002874d 	.word	0x0002874d
   1036c:	00028767 	.word	0x00028767
   10370:	00028791 	.word	0x00028791
   10374:	000287af 	.word	0x000287af
   10378:	000287d4 	.word	0x000287d4
   1037c:	000287ee 	.word	0x000287ee

00010380 <mem_manage_fault.isra.4>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   10380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
   10382:	2301      	movs	r3, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   10384:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   10386:	f04f 0100 	mov.w	r1, #0
   1038a:	4c37      	ldr	r4, [pc, #220]	; (10468 <mem_manage_fault.isra.4+0xe8>)
   1038c:	f363 0107 	bfi	r1, r3, #0, #8
   10390:	4b36      	ldr	r3, [pc, #216]	; (1046c <mem_manage_fault.isra.4+0xec>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   10392:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   10394:	1ae4      	subs	r4, r4, r3
   10396:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   1039a:	f364 118f 	bfi	r1, r4, #6, #10
   1039e:	4834      	ldr	r0, [pc, #208]	; (10470 <mem_manage_fault.isra.4+0xf0>)
   103a0:	f013 fcd7 	bl	23d52 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   103a4:	4b33      	ldr	r3, [pc, #204]	; (10474 <mem_manage_fault.isra.4+0xf4>)
   103a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   103a8:	06d9      	lsls	r1, r3, #27
   103aa:	d509      	bpl.n	103c0 <mem_manage_fault.isra.4+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
   103ac:	f04f 0100 	mov.w	r1, #0
   103b0:	2301      	movs	r3, #1
   103b2:	f363 0107 	bfi	r1, r3, #0, #8
   103b6:	f364 118f 	bfi	r1, r4, #6, #10
   103ba:	482f      	ldr	r0, [pc, #188]	; (10478 <mem_manage_fault.isra.4+0xf8>)
   103bc:	f013 fcc9 	bl	23d52 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   103c0:	4b2c      	ldr	r3, [pc, #176]	; (10474 <mem_manage_fault.isra.4+0xf4>)
   103c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   103c4:	071a      	lsls	r2, r3, #28
   103c6:	d509      	bpl.n	103dc <mem_manage_fault.isra.4+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   103c8:	f04f 0100 	mov.w	r1, #0
   103cc:	2301      	movs	r3, #1
   103ce:	f363 0107 	bfi	r1, r3, #0, #8
   103d2:	f364 118f 	bfi	r1, r4, #6, #10
   103d6:	4829      	ldr	r0, [pc, #164]	; (1047c <mem_manage_fault.isra.4+0xfc>)
   103d8:	f013 fcbb 	bl	23d52 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   103dc:	4d25      	ldr	r5, [pc, #148]	; (10474 <mem_manage_fault.isra.4+0xf4>)
   103de:	6aab      	ldr	r3, [r5, #40]	; 0x28
   103e0:	079b      	lsls	r3, r3, #30
   103e2:	d51c      	bpl.n	1041e <mem_manage_fault.isra.4+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
   103e4:	2301      	movs	r3, #1
   103e6:	f04f 0100 	mov.w	r1, #0
   103ea:	f363 0107 	bfi	r1, r3, #0, #8
   103ee:	f364 118f 	bfi	r1, r4, #6, #10
   103f2:	4823      	ldr	r0, [pc, #140]	; (10480 <mem_manage_fault.isra.4+0x100>)
   103f4:	f013 fcad 	bl	23d52 <log_0>
		mmfar = SCB->MMFAR;
   103f8:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   103fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   103fc:	0618      	lsls	r0, r3, #24
   103fe:	d50e      	bpl.n	1041e <mem_manage_fault.isra.4+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   10400:	f04f 0200 	mov.w	r2, #0
   10404:	2301      	movs	r3, #1
   10406:	f363 0207 	bfi	r2, r3, #0, #8
   1040a:	f364 128f 	bfi	r2, r4, #6, #10
   1040e:	481d      	ldr	r0, [pc, #116]	; (10484 <mem_manage_fault.isra.4+0x104>)
   10410:	f013 fcac 	bl	23d6c <log_1>
			if (from_hard_fault) {
   10414:	b11f      	cbz	r7, 1041e <mem_manage_fault.isra.4+0x9e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   10416:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1041c:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1041e:	4b15      	ldr	r3, [pc, #84]	; (10474 <mem_manage_fault.isra.4+0xf4>)
   10420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10422:	07da      	lsls	r2, r3, #31
   10424:	d509      	bpl.n	1043a <mem_manage_fault.isra.4+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
   10426:	f04f 0100 	mov.w	r1, #0
   1042a:	2301      	movs	r3, #1
   1042c:	f363 0107 	bfi	r1, r3, #0, #8
   10430:	f364 118f 	bfi	r1, r4, #6, #10
   10434:	4814      	ldr	r0, [pc, #80]	; (10488 <mem_manage_fault.isra.4+0x108>)
   10436:	f013 fc8c 	bl	23d52 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1043a:	4b0e      	ldr	r3, [pc, #56]	; (10474 <mem_manage_fault.isra.4+0xf4>)
   1043c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1043e:	069b      	lsls	r3, r3, #26
   10440:	d509      	bpl.n	10456 <mem_manage_fault.isra.4+0xd6>
		PR_FAULT_INFO(
   10442:	f04f 0100 	mov.w	r1, #0
   10446:	2301      	movs	r3, #1
   10448:	f363 0107 	bfi	r1, r3, #0, #8
   1044c:	f364 118f 	bfi	r1, r4, #6, #10
   10450:	480e      	ldr	r0, [pc, #56]	; (1048c <mem_manage_fault.isra.4+0x10c>)
   10452:	f013 fc7e 	bl	23d52 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   10456:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   10458:	4b06      	ldr	r3, [pc, #24]	; (10474 <mem_manage_fault.isra.4+0xf4>)
   1045a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1045c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1045e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   10462:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   10464:	7030      	strb	r0, [r6, #0]
}
   10466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10468:	00026514 	.word	0x00026514
   1046c:	000264bc 	.word	0x000264bc
   10470:	0002864a 	.word	0x0002864a
   10474:	e000ed00 	.word	0xe000ed00
   10478:	00028660 	.word	0x00028660
   1047c:	00028693 	.word	0x00028693
   10480:	000286a6 	.word	0x000286a6
   10484:	000286be 	.word	0x000286be
   10488:	000286d4 	.word	0x000286d4
   1048c:	000286f3 	.word	0x000286f3

00010490 <bus_fault.isra.5>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   10490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
   10492:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   10494:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   10496:	f04f 0100 	mov.w	r1, #0
   1049a:	4c3d      	ldr	r4, [pc, #244]	; (10590 <bus_fault.isra.5+0x100>)
   1049c:	f363 0107 	bfi	r1, r3, #0, #8
   104a0:	4b3c      	ldr	r3, [pc, #240]	; (10594 <bus_fault.isra.5+0x104>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   104a2:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   104a4:	1ae4      	subs	r4, r4, r3
   104a6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   104aa:	f364 118f 	bfi	r1, r4, #6, #10
   104ae:	483a      	ldr	r0, [pc, #232]	; (10598 <bus_fault.isra.5+0x108>)
   104b0:	f013 fc4f 	bl	23d52 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   104b4:	4b39      	ldr	r3, [pc, #228]	; (1059c <bus_fault.isra.5+0x10c>)
   104b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   104b8:	04d9      	lsls	r1, r3, #19
   104ba:	d509      	bpl.n	104d0 <bus_fault.isra.5+0x40>
		PR_FAULT_INFO("  Stacking error");
   104bc:	f04f 0100 	mov.w	r1, #0
   104c0:	2301      	movs	r3, #1
   104c2:	f363 0107 	bfi	r1, r3, #0, #8
   104c6:	f364 118f 	bfi	r1, r4, #6, #10
   104ca:	4835      	ldr	r0, [pc, #212]	; (105a0 <bus_fault.isra.5+0x110>)
   104cc:	f013 fc41 	bl	23d52 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   104d0:	4b32      	ldr	r3, [pc, #200]	; (1059c <bus_fault.isra.5+0x10c>)
   104d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   104d4:	051a      	lsls	r2, r3, #20
   104d6:	d509      	bpl.n	104ec <bus_fault.isra.5+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   104d8:	f04f 0100 	mov.w	r1, #0
   104dc:	2301      	movs	r3, #1
   104de:	f363 0107 	bfi	r1, r3, #0, #8
   104e2:	f364 118f 	bfi	r1, r4, #6, #10
   104e6:	482f      	ldr	r0, [pc, #188]	; (105a4 <bus_fault.isra.5+0x114>)
   104e8:	f013 fc33 	bl	23d52 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   104ec:	4d2b      	ldr	r5, [pc, #172]	; (1059c <bus_fault.isra.5+0x10c>)
   104ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
   104f0:	059b      	lsls	r3, r3, #22
   104f2:	d51c      	bpl.n	1052e <bus_fault.isra.5+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
   104f4:	2301      	movs	r3, #1
   104f6:	f04f 0100 	mov.w	r1, #0
   104fa:	f363 0107 	bfi	r1, r3, #0, #8
   104fe:	f364 118f 	bfi	r1, r4, #6, #10
   10502:	4829      	ldr	r0, [pc, #164]	; (105a8 <bus_fault.isra.5+0x118>)
   10504:	f013 fc25 	bl	23d52 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   10508:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1050a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1050c:	0418      	lsls	r0, r3, #16
   1050e:	d50e      	bpl.n	1052e <bus_fault.isra.5+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   10510:	f04f 0200 	mov.w	r2, #0
   10514:	2301      	movs	r3, #1
   10516:	f363 0207 	bfi	r2, r3, #0, #8
   1051a:	f364 128f 	bfi	r2, r4, #6, #10
   1051e:	4823      	ldr	r0, [pc, #140]	; (105ac <bus_fault.isra.5+0x11c>)
   10520:	f013 fc24 	bl	23d6c <log_1>
			if (from_hard_fault) {
   10524:	b11f      	cbz	r7, 1052e <bus_fault.isra.5+0x9e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   10526:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10528:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1052c:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1052e:	4b1b      	ldr	r3, [pc, #108]	; (1059c <bus_fault.isra.5+0x10c>)
   10530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10532:	0559      	lsls	r1, r3, #21
   10534:	d509      	bpl.n	1054a <bus_fault.isra.5+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
   10536:	f04f 0100 	mov.w	r1, #0
   1053a:	2301      	movs	r3, #1
   1053c:	f363 0107 	bfi	r1, r3, #0, #8
   10540:	f364 118f 	bfi	r1, r4, #6, #10
   10544:	481a      	ldr	r0, [pc, #104]	; (105b0 <bus_fault.isra.5+0x120>)
   10546:	f013 fc04 	bl	23d52 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1054a:	4b14      	ldr	r3, [pc, #80]	; (1059c <bus_fault.isra.5+0x10c>)
   1054c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1054e:	05d2      	lsls	r2, r2, #23
   10550:	d511      	bpl.n	10576 <bus_fault.isra.5+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
   10552:	f04f 0100 	mov.w	r1, #0
   10556:	2301      	movs	r3, #1
   10558:	4816      	ldr	r0, [pc, #88]	; (105b4 <bus_fault.isra.5+0x124>)
   1055a:	f363 0107 	bfi	r1, r3, #0, #8
   1055e:	f364 118f 	bfi	r1, r4, #6, #10
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   10562:	f013 fbf6 	bl	23d52 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   10566:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   10568:	4a0c      	ldr	r2, [pc, #48]	; (1059c <bus_fault.isra.5+0x10c>)
   1056a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1056c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   10570:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   10572:	7030      	strb	r0, [r6, #0]
}
   10574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   10576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10578:	049b      	lsls	r3, r3, #18
   1057a:	d5f4      	bpl.n	10566 <bus_fault.isra.5+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1057c:	f04f 0100 	mov.w	r1, #0
   10580:	2301      	movs	r3, #1
   10582:	f363 0107 	bfi	r1, r3, #0, #8
   10586:	f364 118f 	bfi	r1, r4, #6, #10
   1058a:	480b      	ldr	r0, [pc, #44]	; (105b8 <bus_fault.isra.5+0x128>)
   1058c:	e7e9      	b.n	10562 <bus_fault.isra.5+0xd2>
   1058e:	bf00      	nop
   10590:	00026514 	.word	0x00026514
   10594:	000264bc 	.word	0x000264bc
   10598:	000285c2 	.word	0x000285c2
   1059c:	e000ed00 	.word	0xe000ed00
   105a0:	000285d8 	.word	0x000285d8
   105a4:	00028693 	.word	0x00028693
   105a8:	000285e9 	.word	0x000285e9
   105ac:	00028602 	.word	0x00028602
   105b0:	00028617 	.word	0x00028617
   105b4:	00028632 	.word	0x00028632
   105b8:	000286f3 	.word	0x000286f3

000105bc <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
   105bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   105c0:	4b69      	ldr	r3, [pc, #420]	; (10768 <z_arm_fault+0x1ac>)
{
   105c2:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   105c4:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   105c8:	4606      	mov	r6, r0
   105ca:	4689      	mov	r9, r1
   105cc:	4614      	mov	r4, r2
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   105ce:	f3c8 0708 	ubfx	r7, r8, #0, #9
   105d2:	2500      	movs	r5, #0
   105d4:	f385 8811 	msr	BASEPRI, r5
   105d8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   105dc:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   105e0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   105e4:	d128      	bne.n	10638 <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   105e6:	07d0      	lsls	r0, r2, #31
   105e8:	d426      	bmi.n	10638 <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   105ea:	0651      	lsls	r1, r2, #25
   105ec:	d403      	bmi.n	105f6 <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   105ee:	0722      	lsls	r2, r4, #28
   105f0:	d412      	bmi.n	10618 <z_arm_fault+0x5c>
			*nested_exc = true;
   105f2:	2501      	movs	r5, #1
   105f4:	e012      	b.n	1061c <z_arm_fault+0x60>
		PR_FAULT_INFO("Exception occurred in Secure State");
   105f6:	2301      	movs	r3, #1
   105f8:	f04f 0100 	mov.w	r1, #0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   105fc:	4a5b      	ldr	r2, [pc, #364]	; (1076c <z_arm_fault+0x1b0>)
   105fe:	f363 0107 	bfi	r1, r3, #0, #8
   10602:	4b5b      	ldr	r3, [pc, #364]	; (10770 <z_arm_fault+0x1b4>)
   10604:	485b      	ldr	r0, [pc, #364]	; (10774 <z_arm_fault+0x1b8>)
   10606:	1a9b      	subs	r3, r3, r2
   10608:	08db      	lsrs	r3, r3, #3
   1060a:	f363 118f 	bfi	r1, r3, #6, #10
   1060e:	f013 fba0 	bl	23d52 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   10612:	f014 0504 	ands.w	r5, r4, #4
   10616:	d001      	beq.n	1061c <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)psp;
   10618:	464e      	mov	r6, r9
	*nested_exc = false;
   1061a:	2500      	movs	r5, #0
	*recoverable = false;
   1061c:	2300      	movs	r3, #0
   1061e:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   10622:	1efb      	subs	r3, r7, #3
   10624:	2b09      	cmp	r3, #9
   10626:	f200 8082 	bhi.w	1072e <z_arm_fault+0x172>
   1062a:	e8df f003 	tbb	[pc, r3]
   1062e:	6b07      	.short	0x6b07
   10630:	80804e6f 	.word	0x80804e6f
   10634:	73808080 	.word	0x73808080
		return NULL;
   10638:	462e      	mov	r6, r5
   1063a:	e7ef      	b.n	1061c <z_arm_fault+0x60>
	PR_FAULT_INFO("***** HARD FAULT *****");
   1063c:	2301      	movs	r3, #1
   1063e:	f04f 0100 	mov.w	r1, #0
	*recoverable = false;
   10642:	f04f 0800 	mov.w	r8, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
   10646:	f363 0107 	bfi	r1, r3, #0, #8
   1064a:	4f49      	ldr	r7, [pc, #292]	; (10770 <z_arm_fault+0x1b4>)
   1064c:	4b47      	ldr	r3, [pc, #284]	; (1076c <z_arm_fault+0x1b0>)
   1064e:	484a      	ldr	r0, [pc, #296]	; (10778 <z_arm_fault+0x1bc>)
   10650:	1aff      	subs	r7, r7, r3
   10652:	f3c7 07c9 	ubfx	r7, r7, #3, #10
   10656:	f367 118f 	bfi	r1, r7, #6, #10
   1065a:	f013 fb7a 	bl	23d52 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1065e:	4b42      	ldr	r3, [pc, #264]	; (10768 <z_arm_fault+0x1ac>)
	*recoverable = false;
   10660:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   10664:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   10666:	f014 0402 	ands.w	r4, r4, #2
   1066a:	d00b      	beq.n	10684 <z_arm_fault+0xc8>
		PR_EXC("  Bus fault on vector table read");
   1066c:	f04f 0100 	mov.w	r1, #0
   10670:	2301      	movs	r3, #1
   10672:	4842      	ldr	r0, [pc, #264]	; (1077c <z_arm_fault+0x1c0>)
   10674:	f363 0107 	bfi	r1, r3, #0, #8
   10678:	f367 118f 	bfi	r1, r7, #6, #10
	PR_FAULT_INFO(
   1067c:	f013 fb69 	bl	23d52 <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   10680:	2400      	movs	r4, #0
   10682:	e025      	b.n	106d0 <z_arm_fault+0x114>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   10684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   10686:	005b      	lsls	r3, r3, #1
   10688:	d522      	bpl.n	106d0 <z_arm_fault+0x114>
		PR_EXC("  Fault escalation (see below)");
   1068a:	2301      	movs	r3, #1
   1068c:	f04f 0100 	mov.w	r1, #0
   10690:	f363 0107 	bfi	r1, r3, #0, #8
   10694:	f367 118f 	bfi	r1, r7, #6, #10
   10698:	4839      	ldr	r0, [pc, #228]	; (10780 <z_arm_fault+0x1c4>)
   1069a:	f013 fb5a 	bl	23d52 <log_0>
		if (SCB_MMFSR != 0) {
   1069e:	4b39      	ldr	r3, [pc, #228]	; (10784 <z_arm_fault+0x1c8>)
   106a0:	781b      	ldrb	r3, [r3, #0]
   106a2:	b12b      	cbz	r3, 106b0 <z_arm_fault+0xf4>
			reason = mem_manage_fault(esf, 1, recoverable);
   106a4:	2001      	movs	r0, #1
   106a6:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   106aa:	f7ff fe69 	bl	10380 <mem_manage_fault.isra.4>
   106ae:	e00e      	b.n	106ce <z_arm_fault+0x112>
		} else if (SCB_BFSR != 0) {
   106b0:	4b35      	ldr	r3, [pc, #212]	; (10788 <z_arm_fault+0x1cc>)
   106b2:	781b      	ldrb	r3, [r3, #0]
   106b4:	b12b      	cbz	r3, 106c2 <z_arm_fault+0x106>
			reason = bus_fault(esf, 1, recoverable);
   106b6:	2001      	movs	r0, #1
   106b8:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   106bc:	f7ff fee8 	bl	10490 <bus_fault.isra.5>
   106c0:	e005      	b.n	106ce <z_arm_fault+0x112>
		} else if (SCB_UFSR != 0) {
   106c2:	4b32      	ldr	r3, [pc, #200]	; (1078c <z_arm_fault+0x1d0>)
   106c4:	881b      	ldrh	r3, [r3, #0]
   106c6:	b29b      	uxth	r3, r3
   106c8:	b113      	cbz	r3, 106d0 <z_arm_fault+0x114>
			reason = usage_fault(esf);
   106ca:	f7ff fdc7 	bl	1025c <usage_fault.isra.2>
   106ce:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   106d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   106d4:	b99b      	cbnz	r3, 106fe <z_arm_fault+0x142>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   106d6:	2268      	movs	r2, #104	; 0x68
   106d8:	4631      	mov	r1, r6
   106da:	a802      	add	r0, sp, #8
   106dc:	f014 f879 	bl	247d2 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   106e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   106e2:	2d00      	cmp	r5, #0
   106e4:	d03a      	beq.n	1075c <z_arm_fault+0x1a0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   106e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
   106ea:	b922      	cbnz	r2, 106f6 <z_arm_fault+0x13a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   106ec:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   106f0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   106f4:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   106f6:	a902      	add	r1, sp, #8
   106f8:	4620      	mov	r0, r4
   106fa:	f7ff fcb1 	bl	10060 <z_arm_fatal_error>
}
   106fe:	b01d      	add	sp, #116	; 0x74
   10700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   10704:	f10d 0107 	add.w	r1, sp, #7
   10708:	2000      	movs	r0, #0
   1070a:	e7ce      	b.n	106aa <z_arm_fault+0xee>
		reason = bus_fault(esf, 0, recoverable);
   1070c:	f10d 0107 	add.w	r1, sp, #7
   10710:	2000      	movs	r0, #0
   10712:	e7d3      	b.n	106bc <z_arm_fault+0x100>
	PR_FAULT_INFO(
   10714:	2301      	movs	r3, #1
   10716:	f04f 0100 	mov.w	r1, #0
   1071a:	4a14      	ldr	r2, [pc, #80]	; (1076c <z_arm_fault+0x1b0>)
   1071c:	f363 0107 	bfi	r1, r3, #0, #8
   10720:	4b13      	ldr	r3, [pc, #76]	; (10770 <z_arm_fault+0x1b4>)
   10722:	481b      	ldr	r0, [pc, #108]	; (10790 <z_arm_fault+0x1d4>)
   10724:	1a9b      	subs	r3, r3, r2
   10726:	08db      	lsrs	r3, r3, #3
   10728:	f363 118f 	bfi	r1, r3, #6, #10
   1072c:	e7a6      	b.n	1067c <z_arm_fault+0xc0>
	PR_FAULT_INFO("***** %s %d) *****",
   1072e:	2201      	movs	r2, #1
   10730:	f04f 0300 	mov.w	r3, #0
   10734:	490e      	ldr	r1, [pc, #56]	; (10770 <z_arm_fault+0x1b4>)
   10736:	f362 0307 	bfi	r3, r2, #0, #8
   1073a:	4a0c      	ldr	r2, [pc, #48]	; (1076c <z_arm_fault+0x1b0>)
   1073c:	4815      	ldr	r0, [pc, #84]	; (10794 <z_arm_fault+0x1d8>)
   1073e:	1a89      	subs	r1, r1, r2
   10740:	08c9      	lsrs	r1, r1, #3
   10742:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   10746:	f361 138f 	bfi	r3, r1, #6, #10
   1074a:	f1a7 0210 	sub.w	r2, r7, #16
   1074e:	4912      	ldr	r1, [pc, #72]	; (10798 <z_arm_fault+0x1dc>)
   10750:	bf18      	it	ne
   10752:	4601      	movne	r1, r0
   10754:	4811      	ldr	r0, [pc, #68]	; (1079c <z_arm_fault+0x1e0>)
   10756:	f013 fb1d 	bl	23d94 <log_2>
   1075a:	e791      	b.n	10680 <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1075c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   10760:	f023 0301 	bic.w	r3, r3, #1
   10764:	e7c6      	b.n	106f4 <z_arm_fault+0x138>
   10766:	bf00      	nop
   10768:	e000ed00 	.word	0xe000ed00
   1076c:	000264bc 	.word	0x000264bc
   10770:	00026514 	.word	0x00026514
   10774:	00028819 	.word	0x00028819
   10778:	0002883c 	.word	0x0002883c
   1077c:	00028853 	.word	0x00028853
   10780:	00028874 	.word	0x00028874
   10784:	e000ed28 	.word	0xe000ed28
   10788:	e000ed29 	.word	0xe000ed29
   1078c:	e000ed2a 	.word	0xe000ed2a
   10790:	00028893 	.word	0x00028893
   10794:	000288de 	.word	0x000288de
   10798:	000288c9 	.word	0x000288c9
   1079c:	000288f7 	.word	0x000288f7

000107a0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   107a0:	4a02      	ldr	r2, [pc, #8]	; (107ac <z_arm_fault_init+0xc>)
   107a2:	6953      	ldr	r3, [r2, #20]
   107a4:	f043 0310 	orr.w	r3, r3, #16
   107a8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   107aa:	4770      	bx	lr
   107ac:	e000ed00 	.word	0xe000ed00

000107b0 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
   107b0:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   107b2:	2120      	movs	r1, #32
   107b4:	4803      	ldr	r0, [pc, #12]	; (107c4 <z_arm_int_lib_init+0x14>)
   107b6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   107b8:	3301      	adds	r3, #1
   107ba:	2b41      	cmp	r3, #65	; 0x41
   107bc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   107c0:	d1f9      	bne.n	107b6 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   107c2:	4770      	bx	lr
   107c4:	e000e100 	.word	0xe000e100

000107c8 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   107c8:	b538      	push	{r3, r4, r5, lr}
   107ca:	4605      	mov	r5, r0
	__asm__ volatile(
   107cc:	f04f 0320 	mov.w	r3, #32
   107d0:	f3ef 8411 	mrs	r4, BASEPRI
   107d4:	f383 8811 	msr	BASEPRI, r3
   107d8:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
   107dc:	f015 fb4f 	bl	25e7e <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   107e0:	4b0b      	ldr	r3, [pc, #44]	; (10810 <z_impl_k_thread_abort+0x48>)
   107e2:	689b      	ldr	r3, [r3, #8]
   107e4:	42ab      	cmp	r3, r5
   107e6:	d10d      	bne.n	10804 <z_impl_k_thread_abort+0x3c>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   107e8:	4b0a      	ldr	r3, [pc, #40]	; (10814 <z_impl_k_thread_abort+0x4c>)
   107ea:	685a      	ldr	r2, [r3, #4]
   107ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
   107f0:	b922      	cbnz	r2, 107fc <z_impl_k_thread_abort+0x34>
extern int arch_swap(unsigned int key);

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
   107f2:	f012 f90b 	bl	22a0c <z_check_stack_sentinel>

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
   107f6:	4620      	mov	r0, r4
   107f8:	f7ff fb16 	bl	fe28 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   107fc:	685a      	ldr	r2, [r3, #4]
   107fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   10802:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   10804:	4620      	mov	r0, r4
}
   10806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   1080a:	f015 ba45 	b.w	25c98 <z_reschedule_irqlock>
   1080e:	bf00      	nop
   10810:	20025cfc 	.word	0x20025cfc
   10814:	e000ed00 	.word	0xe000ed00

00010818 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   10818:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   1081a:	4b0e      	ldr	r3, [pc, #56]	; (10854 <z_arm_configure_static_mpu_regions+0x3c>)
{
   1081c:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   1081e:	9302      	str	r3, [sp, #8]
   10820:	4b0d      	ldr	r3, [pc, #52]	; (10858 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   10822:	4c0e      	ldr	r4, [pc, #56]	; (1085c <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   10824:	9303      	str	r3, [sp, #12]
   10826:	4b0e      	ldr	r3, [pc, #56]	; (10860 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   10828:	4a0e      	ldr	r2, [pc, #56]	; (10864 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   1082a:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   1082c:	ab02      	add	r3, sp, #8
   1082e:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   10830:	a801      	add	r0, sp, #4
   10832:	4623      	mov	r3, r4
   10834:	2101      	movs	r1, #1
   10836:	f000 f89f 	bl	10978 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   1083a:	2300      	movs	r3, #0
   1083c:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   1083e:	4b0a      	ldr	r3, [pc, #40]	; (10868 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   10840:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   10842:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   10844:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   10846:	9305      	str	r3, [sp, #20]
   10848:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1084a:	f000 f961 	bl	10b10 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1084e:	b008      	add	sp, #32
   10850:	bd10      	pop	{r4, pc}
   10852:	bf00      	nop
   10854:	20020000 	.word	0x20020000
   10858:	00000000 	.word	0x00000000
   1085c:	20040000 	.word	0x20040000
   10860:	00010006 	.word	0x00010006
   10864:	20020000 	.word	0x20020000
   10868:	20020000 	.word	0x20020000

0001086c <region_allocate_and_init.part.0>:
#include <arm_mpu_v8_internal.h>
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const u8_t index,
   1086c:	b508      	push	{r3, lr}
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1086e:	f04f 0200 	mov.w	r2, #0
   10872:	2301      	movs	r3, #1
   10874:	4907      	ldr	r1, [pc, #28]	; (10894 <region_allocate_and_init.part.0+0x28>)
   10876:	f363 0207 	bfi	r2, r3, #0, #8
   1087a:	4b07      	ldr	r3, [pc, #28]	; (10898 <region_allocate_and_init.part.0+0x2c>)
   1087c:	1a5b      	subs	r3, r3, r1
   1087e:	08db      	lsrs	r3, r3, #3
   10880:	4601      	mov	r1, r0
   10882:	f363 128f 	bfi	r2, r3, #6, #10
   10886:	4805      	ldr	r0, [pc, #20]	; (1089c <region_allocate_and_init.part.0+0x30>)
   10888:	f013 fa70 	bl	23d6c <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   1088c:	f06f 0015 	mvn.w	r0, #21
   10890:	bd08      	pop	{r3, pc}
   10892:	bf00      	nop
   10894:	000264bc 	.word	0x000264bc
   10898:	00026504 	.word	0x00026504
   1089c:	00028954 	.word	0x00028954

000108a0 <mpu_configure_region>:
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, u32_t base, u32_t size)
{
	p_attr->rbar = attr->rbar &
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
   108a0:	7a8b      	ldrb	r3, [r1, #10]
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const u8_t index,
	const struct k_mem_partition *new_region)
{
   108a2:	b470      	push	{r4, r5, r6}
   108a4:	f003 0607 	and.w	r6, r3, #7
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   108a8:	680c      	ldr	r4, [r1, #0]
   108aa:	684b      	ldr	r3, [r1, #4]
	p_attr->rbar = attr->rbar &
   108ac:	7a0a      	ldrb	r2, [r1, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   108ae:	f024 041f 	bic.w	r4, r4, #31
   108b2:	3b01      	subs	r3, #1
   108b4:	4423      	add	r3, r4
	if (index > (get_num_regions() - 1)) {
   108b6:	280f      	cmp	r0, #15
	p_attr->rbar = attr->rbar &
   108b8:	f002 021f 	and.w	r2, r2, #31
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   108bc:	f023 031f 	bic.w	r3, r3, #31
   108c0:	d902      	bls.n	108c8 <mpu_configure_region+0x28>
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
   108c2:	bc70      	pop	{r4, r5, r6}
   108c4:	f7ff bfd2 	b.w	1086c <region_allocate_and_init.part.0>
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   108c8:	4905      	ldr	r1, [pc, #20]	; (108e0 <mpu_configure_region+0x40>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   108ca:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
		| (region_conf->attr.rbar &
   108ce:	4322      	orrs	r2, r4
		| MPU_RLAR_EN_Msk
   108d0:	f043 0301 	orr.w	r3, r3, #1
   108d4:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   108d6:	60ca      	str	r2, [r1, #12]
   108d8:	bc70      	pop	{r4, r5, r6}
  mpu->RLAR = rlar;
   108da:	610b      	str	r3, [r1, #16]
   108dc:	4770      	bx	lr
   108de:	bf00      	nop
   108e0:	e000ed90 	.word	0xe000ed90

000108e4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   108e4:	2205      	movs	r2, #5
   108e6:	4b03      	ldr	r3, [pc, #12]	; (108f4 <arm_core_mpu_enable+0x10>)
   108e8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   108ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   108ee:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   108f2:	4770      	bx	lr
   108f4:	e000ed90 	.word	0xe000ed90

000108f8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   108f8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   108fc:	2200      	movs	r2, #0
   108fe:	4b01      	ldr	r3, [pc, #4]	; (10904 <arm_core_mpu_disable+0xc>)
   10900:	605a      	str	r2, [r3, #4]
}
   10902:	4770      	bx	lr
   10904:	e000ed90 	.word	0xe000ed90

00010908 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   10908:	4917      	ldr	r1, [pc, #92]	; (10968 <arm_mpu_init+0x60>)
{
   1090a:	b570      	push	{r4, r5, r6, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   1090c:	680c      	ldr	r4, [r1, #0]
   1090e:	2c10      	cmp	r4, #16
   10910:	d827      	bhi.n	10962 <arm_mpu_init+0x5a>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   10912:	f7ff fff1 	bl	108f8 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   10916:	2500      	movs	r5, #0
	MPU->MAIR0 =
   10918:	4a14      	ldr	r2, [pc, #80]	; (1096c <arm_mpu_init+0x64>)
   1091a:	4b15      	ldr	r3, [pc, #84]	; (10970 <arm_mpu_init+0x68>)
   1091c:	6848      	ldr	r0, [r1, #4]
   1091e:	6313      	str	r3, [r2, #48]	; 0x30
   10920:	42ac      	cmp	r4, r5
   10922:	f100 0610 	add.w	r6, r0, #16
   10926:	d105      	bne.n	10934 <arm_mpu_init+0x2c>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   10928:	4b12      	ldr	r3, [pc, #72]	; (10974 <arm_mpu_init+0x6c>)
   1092a:	701c      	strb	r4, [r3, #0]


	arm_core_mpu_enable();
   1092c:	f7ff ffda 	bl	108e4 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   10930:	2000      	movs	r0, #0
}
   10932:	bd70      	pop	{r4, r5, r6, pc}
		(region_conf->base & MPU_RBAR_BASE_Msk)
   10934:	f856 3c10 	ldr.w	r3, [r6, #-16]
		| (region_conf->attr.rbar &
   10938:	7a00      	ldrb	r0, [r0, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1093a:	f023 011f 	bic.w	r1, r3, #31
		| (region_conf->attr.rbar &
   1093e:	f000 031f 	and.w	r3, r0, #31
   10942:	4319      	orrs	r1, r3
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   10944:	f856 3c04 	ldr.w	r3, [r6, #-4]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   10948:	0940      	lsrs	r0, r0, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1094a:	f023 031f 	bic.w	r3, r3, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1094e:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
		| MPU_RLAR_EN_Msk
   10952:	f043 0301 	orr.w	r3, r3, #1
  mpu->RNR = rnr;
   10956:	6095      	str	r5, [r2, #8]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   10958:	4630      	mov	r0, r6
  mpu->RBAR = rbar;
   1095a:	60d1      	str	r1, [r2, #12]
   1095c:	3501      	adds	r5, #1
  mpu->RLAR = rlar;
   1095e:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
   10960:	e7de      	b.n	10920 <arm_mpu_init+0x18>
		return -1;
   10962:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10966:	e7e4      	b.n	10932 <arm_mpu_init+0x2a>
   10968:	000265dc 	.word	0x000265dc
   1096c:	e000ed90 	.word	0xe000ed90
   10970:	0044ffaa 	.word	0x0044ffaa
   10974:	20027406 	.word	0x20027406

00010978 <arm_core_mpu_configure_static_mpu_regions>:
{
   10978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1097c:	468a      	mov	sl, r1
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1097e:	f04f 0800 	mov.w	r8, #0
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   10982:	4f5d      	ldr	r7, [pc, #372]	; (10af8 <arm_core_mpu_configure_static_mpu_regions+0x180>)
	MPU->RNR = index;
   10984:	4d5d      	ldr	r5, [pc, #372]	; (10afc <arm_core_mpu_configure_static_mpu_regions+0x184>)
	int reg_index = start_reg_index;
   10986:	783c      	ldrb	r4, [r7, #0]
	for (i = 0; i < regions_num; i++) {
   10988:	f1a0 0904 	sub.w	r9, r0, #4
   1098c:	45d0      	cmp	r8, sl
   1098e:	da38      	bge.n	10a02 <arm_core_mpu_configure_static_mpu_regions+0x8a>
		if (regions[i]->size == 0U) {
   10990:	f859 3f04 	ldr.w	r3, [r9, #4]!
   10994:	685e      	ldr	r6, [r3, #4]
   10996:	2e00      	cmp	r6, #0
   10998:	d057      	beq.n	10a4a <arm_core_mpu_configure_static_mpu_regions+0xd2>
		&&
   1099a:	2e1f      	cmp	r6, #31
   1099c:	d920      	bls.n	109e0 <arm_core_mpu_configure_static_mpu_regions+0x68>
		&&
   1099e:	06f1      	lsls	r1, r6, #27
   109a0:	d11e      	bne.n	109e0 <arm_core_mpu_configure_static_mpu_regions+0x68>
		((part->start &
   109a2:	681b      	ldr	r3, [r3, #0]
		&&
   109a4:	06da      	lsls	r2, r3, #27
   109a6:	d11b      	bne.n	109e0 <arm_core_mpu_configure_static_mpu_regions+0x68>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   109a8:	4618      	mov	r0, r3
   109aa:	9301      	str	r3, [sp, #4]
   109ac:	f013 fd76 	bl	2449c <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   109b0:	9b01      	ldr	r3, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   109b2:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   109b4:	18f0      	adds	r0, r6, r3
   109b6:	3801      	subs	r0, #1
   109b8:	f013 fd70 	bl	2449c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   109bc:	4583      	cmp	fp, r0
   109be:	d024      	beq.n	10a0a <arm_core_mpu_configure_static_mpu_regions+0x92>
	return -EINVAL;
   109c0:	f06f 0b15 	mvn.w	fp, #21
			LOG_ERR("Invalid underlying region index %u",
   109c4:	2301      	movs	r3, #1
   109c6:	f04f 0200 	mov.w	r2, #0
   109ca:	494d      	ldr	r1, [pc, #308]	; (10b00 <arm_core_mpu_configure_static_mpu_regions+0x188>)
   109cc:	f363 0207 	bfi	r2, r3, #0, #8
   109d0:	4b4c      	ldr	r3, [pc, #304]	; (10b04 <arm_core_mpu_configure_static_mpu_regions+0x18c>)
   109d2:	484d      	ldr	r0, [pc, #308]	; (10b08 <arm_core_mpu_configure_static_mpu_regions+0x190>)
   109d4:	1a5b      	subs	r3, r3, r1
   109d6:	08db      	lsrs	r3, r3, #3
   109d8:	f363 128f 	bfi	r2, r3, #6, #10
   109dc:	4659      	mov	r1, fp
   109de:	e00c      	b.n	109fa <arm_core_mpu_configure_static_mpu_regions+0x82>
			LOG_ERR("Partition %u: sanity check failed.", i);
   109e0:	2301      	movs	r3, #1
   109e2:	f04f 0200 	mov.w	r2, #0
   109e6:	4946      	ldr	r1, [pc, #280]	; (10b00 <arm_core_mpu_configure_static_mpu_regions+0x188>)
   109e8:	f363 0207 	bfi	r2, r3, #0, #8
   109ec:	4b45      	ldr	r3, [pc, #276]	; (10b04 <arm_core_mpu_configure_static_mpu_regions+0x18c>)
   109ee:	4847      	ldr	r0, [pc, #284]	; (10b0c <arm_core_mpu_configure_static_mpu_regions+0x194>)
   109f0:	1a5b      	subs	r3, r3, r1
   109f2:	4641      	mov	r1, r8
   109f4:	08db      	lsrs	r3, r3, #3
   109f6:	f363 128f 	bfi	r2, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
   109fa:	f013 f9b7 	bl	23d6c <log_1>
			return -EINVAL;
   109fe:	f06f 0415 	mvn.w	r4, #21
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   10a02:	703c      	strb	r4, [r7, #0]
}
   10a04:	b003      	add	sp, #12
   10a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   10a0a:	f11b 0f16 	cmn.w	fp, #22
   10a0e:	d0d9      	beq.n	109c4 <arm_core_mpu_configure_static_mpu_regions+0x4c>
			(u_reg_index > (reg_index - 1))) {
   10a10:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   10a12:	455b      	cmp	r3, fp
   10a14:	dbd6      	blt.n	109c4 <arm_core_mpu_configure_static_mpu_regions+0x4c>
	MPU->RNR = index;
   10a16:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   10a1a:	f8d5 c00c 	ldr.w	ip, [r5, #12]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   10a1e:	f8d9 1000 	ldr.w	r1, [r9]
	MPU->RNR = index;
   10a22:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   10a26:	692e      	ldr	r6, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   10a28:	f02c 0c1f 	bic.w	ip, ip, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   10a2c:	e9d1 3200 	ldrd	r3, r2, [r1]
   10a30:	1898      	adds	r0, r3, r2
		if ((regions[i]->start == u_reg_base) &&
   10a32:	459c      	cmp	ip, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   10a34:	f046 061f 	orr.w	r6, r6, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   10a38:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
   10a3c:	d119      	bne.n	10a72 <arm_core_mpu_configure_static_mpu_regions+0xfa>
   10a3e:	4296      	cmp	r6, r2
   10a40:	d106      	bne.n	10a50 <arm_core_mpu_configure_static_mpu_regions+0xd8>
			mpu_configure_region(u_reg_index, regions[i]);
   10a42:	fa5f f08b 	uxtb.w	r0, fp
   10a46:	f7ff ff2b 	bl	108a0 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   10a4a:	f108 0801 	add.w	r8, r8, #1
   10a4e:	e79d      	b.n	1098c <arm_core_mpu_configure_static_mpu_regions+0x14>
	MPU->RNR = index;
   10a50:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   10a54:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   10a56:	f020 021f 	bic.w	r2, r0, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   10a5a:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   10a5e:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   10a60:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   10a62:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   10a64:	f7ff ff1c 	bl	108a0 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   10a68:	f110 0f16 	cmn.w	r0, #22
   10a6c:	d0c7      	beq.n	109fe <arm_core_mpu_configure_static_mpu_regions+0x86>
			reg_index++;
   10a6e:	1c44      	adds	r4, r0, #1
   10a70:	e7eb      	b.n	10a4a <arm_core_mpu_configure_static_mpu_regions+0xd2>
		} else if (reg_last == u_reg_last) {
   10a72:	3b01      	subs	r3, #1
   10a74:	4296      	cmp	r6, r2
   10a76:	b2e0      	uxtb	r0, r4
   10a78:	f023 031f 	bic.w	r3, r3, #31
   10a7c:	d107      	bne.n	10a8e <arm_core_mpu_configure_static_mpu_regions+0x116>
	MPU->RNR = index;
   10a7e:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   10a82:	692a      	ldr	r2, [r5, #16]
   10a84:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   10a88:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   10a8a:	612b      	str	r3, [r5, #16]
   10a8c:	e7ea      	b.n	10a64 <arm_core_mpu_configure_static_mpu_regions+0xec>
   10a8e:	9201      	str	r2, [sp, #4]
	MPU->RNR = index;
   10a90:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   10a94:	692c      	ldr	r4, [r5, #16]
   10a96:	f004 0c1f 	and.w	ip, r4, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   10a9a:	ea4c 0303 	orr.w	r3, ip, r3
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   10a9e:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, regions[i]);
   10aa0:	f7ff fefe 	bl	108a0 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   10aa4:	f110 0f16 	cmn.w	r0, #22
   10aa8:	d0a9      	beq.n	109fe <arm_core_mpu_configure_static_mpu_regions+0x86>
			fill_region.base = regions[i]->start +
   10aaa:	f8d9 c000 	ldr.w	ip, [r9]
	MPU->RNR = index;
   10aae:	f8c5 b008 	str.w	fp, [r5, #8]
			fill_region.base = regions[i]->start +
   10ab2:	e9dc 1c00 	ldrd	r1, ip, [ip]
   10ab6:	4461      	add	r1, ip
			reg_index++;
   10ab8:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   10aba:	f021 011f 	bic.w	r1, r1, #31
   10abe:	3e01      	subs	r6, #1
   10ac0:	9a01      	ldr	r2, [sp, #4]
	attr->rbar = MPU->RBAR &
   10ac2:	68ec      	ldr	r4, [r5, #12]
			REGION_LIMIT_ADDR((regions[i]->start +
   10ac4:	440e      	add	r6, r1
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   10ac6:	692b      	ldr	r3, [r5, #16]
				region_allocate_and_init(reg_index,
   10ac8:	b2c0      	uxtb	r0, r0
			REGION_LIMIT_ADDR((regions[i]->start +
   10aca:	1ab6      	subs	r6, r6, r2
	if (index > (get_num_regions() - 1)) {
   10acc:	280f      	cmp	r0, #15
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   10ace:	ea4f 0353 	mov.w	r3, r3, lsr #1
			REGION_LIMIT_ADDR((regions[i]->start +
   10ad2:	f026 061f 	bic.w	r6, r6, #31
   10ad6:	d902      	bls.n	10ade <arm_core_mpu_configure_static_mpu_regions+0x166>
   10ad8:	f7ff fec8 	bl	1086c <region_allocate_and_init.part.0>
   10adc:	e7c4      	b.n	10a68 <arm_core_mpu_configure_static_mpu_regions+0xf0>
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   10ade:	005b      	lsls	r3, r3, #1
   10ae0:	f003 030e 	and.w	r3, r3, #14
		| (region_conf->attr.rbar &
   10ae4:	f004 041f 	and.w	r4, r4, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   10ae8:	431e      	orrs	r6, r3
		| (region_conf->attr.rbar &
   10aea:	4321      	orrs	r1, r4
		| MPU_RLAR_EN_Msk
   10aec:	f046 0601 	orr.w	r6, r6, #1
  mpu->RNR = rnr;
   10af0:	60a8      	str	r0, [r5, #8]
  mpu->RBAR = rbar;
   10af2:	60e9      	str	r1, [r5, #12]
  mpu->RLAR = rlar;
   10af4:	612e      	str	r6, [r5, #16]
			if (reg_index == -EINVAL) {
   10af6:	e7ba      	b.n	10a6e <arm_core_mpu_configure_static_mpu_regions+0xf6>
   10af8:	20027406 	.word	0x20027406
   10afc:	e000ed90 	.word	0xe000ed90
   10b00:	000264bc 	.word	0x000264bc
   10b04:	00026504 	.word	0x00026504
   10b08:	00028931 	.word	0x00028931
   10b0c:	0002890e 	.word	0x0002890e

00010b10 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   10b10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b14:	4c25      	ldr	r4, [pc, #148]	; (10bac <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>)
   10b16:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10b18:	4680      	mov	r8, r0
   10b1a:	2700      	movs	r7, #0
   10b1c:	46a1      	mov	r9, r4
	attr->rbar = MPU->RBAR &
   10b1e:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
   10b22:	4d23      	ldr	r5, [pc, #140]	; (10bb0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10b24:	4557      	cmp	r7, sl
   10b26:	da1a      	bge.n	10b5e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   10b28:	f8d8 3004 	ldr.w	r3, [r8, #4]
   10b2c:	9301      	str	r3, [sp, #4]
   10b2e:	2b00      	cmp	r3, #0
   10b30:	d036      	beq.n	10ba0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   10b32:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10b36:	4608      	mov	r0, r1
   10b38:	9100      	str	r1, [sp, #0]
   10b3a:	f013 fcaf 	bl	2449c <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10b3e:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10b42:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10b44:	1858      	adds	r0, r3, r1
   10b46:	3801      	subs	r0, #1
   10b48:	f013 fca8 	bl	2449c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   10b4c:	4286      	cmp	r6, r0
   10b4e:	4a19      	ldr	r2, [pc, #100]	; (10bb4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
   10b50:	d008      	beq.n	10b64 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   10b52:	2314      	movs	r3, #20
   10b54:	435f      	muls	r7, r3
   10b56:	f06f 0315 	mvn.w	r3, #21
   10b5a:	f849 3007 	str.w	r3, [r9, r7]
}
   10b5e:	b003      	add	sp, #12
   10b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   10b64:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
   10b68:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   10b6a:	d0f8      	beq.n	10b5e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   10b6c:	7813      	ldrb	r3, [r2, #0]
   10b6e:	42b3      	cmp	r3, r6
   10b70:	ddf5      	ble.n	10b5e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   10b72:	fb0b 9307 	mla	r3, fp, r7, r9
	MPU->RNR = index;
   10b76:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
   10b78:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
   10b7a:	68e8      	ldr	r0, [r5, #12]
   10b7c:	7b19      	ldrb	r1, [r3, #12]
   10b7e:	f360 0104 	bfi	r1, r0, #0, #5
   10b82:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   10b84:	6929      	ldr	r1, [r5, #16]
   10b86:	7b18      	ldrb	r0, [r3, #12]
   10b88:	0849      	lsrs	r1, r1, #1
   10b8a:	f361 1047 	bfi	r0, r1, #5, #3
   10b8e:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   10b90:	68eb      	ldr	r3, [r5, #12]
   10b92:	f023 031f 	bic.w	r3, r3, #31
   10b96:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   10b98:	692b      	ldr	r3, [r5, #16]
   10b9a:	f023 031f 	bic.w	r3, r3, #31
   10b9e:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10ba0:	3701      	adds	r7, #1
   10ba2:	3414      	adds	r4, #20
   10ba4:	f108 080c 	add.w	r8, r8, #12
   10ba8:	e7bc      	b.n	10b24 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   10baa:	bf00      	nop
   10bac:	20020338 	.word	0x20020338
   10bb0:	e000ed90 	.word	0xe000ed90
   10bb4:	20027406 	.word	0x20027406

00010bb8 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   10bb8:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
   10bba:	4b1d      	ldr	r3, [pc, #116]	; (10c30 <arm_core_mpu_configure_dynamic_mpu_regions+0x78>)
   10bbc:	4606      	mov	r6, r0
   10bbe:	7818      	ldrb	r0, [r3, #0]
   10bc0:	460d      	mov	r5, r1

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   10bc2:	4602      	mov	r2, r0
  mpu->RLAR = 0U;
   10bc4:	2100      	movs	r1, #0
   10bc6:	4b1b      	ldr	r3, [pc, #108]	; (10c34 <arm_core_mpu_configure_dynamic_mpu_regions+0x7c>)
   10bc8:	2a0f      	cmp	r2, #15
   10bca:	dd07      	ble.n	10bdc <arm_core_mpu_configure_dynamic_mpu_regions+0x24>
   10bcc:	2400      	movs	r4, #0
	/* We are going to skip the full partition of the background areas.
	 * So we can disable MPU regions inside which dynamic memroy regions
	 * may be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		ARM_MPU_ClrRegion(dyn_reg_info[i].index);
   10bce:	4a1a      	ldr	r2, [pc, #104]	; (10c38 <arm_core_mpu_configure_dynamic_mpu_regions+0x80>)
   10bd0:	6812      	ldr	r2, [r2, #0]
  mpu->RNR = rnr;
   10bd2:	609a      	str	r2, [r3, #8]
  mpu->RLAR = 0U;
   10bd4:	611c      	str	r4, [r3, #16]
	for (i = 0; i < regions_num; i++) {
   10bd6:	42ac      	cmp	r4, r5
   10bd8:	db04      	blt.n	10be4 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>
}
   10bda:	bd70      	pop	{r4, r5, r6, pc}
  mpu->RNR = rnr;
   10bdc:	609a      	str	r2, [r3, #8]
  mpu->RLAR = 0U;
   10bde:	6119      	str	r1, [r3, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   10be0:	3201      	adds	r2, #1
   10be2:	e7f1      	b.n	10bc8 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		if (regions[i]->size == 0U) {
   10be4:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   10be8:	684b      	ldr	r3, [r1, #4]
   10bea:	b1f3      	cbz	r3, 10c2a <arm_core_mpu_configure_dynamic_mpu_regions+0x72>
		&&
   10bec:	2b1f      	cmp	r3, #31
   10bee:	d810      	bhi.n	10c12 <arm_core_mpu_configure_dynamic_mpu_regions+0x5a>
			LOG_ERR("Partition %u: sanity check failed.", i);
   10bf0:	2301      	movs	r3, #1
   10bf2:	f04f 0200 	mov.w	r2, #0
   10bf6:	4911      	ldr	r1, [pc, #68]	; (10c3c <arm_core_mpu_configure_dynamic_mpu_regions+0x84>)
   10bf8:	f363 0207 	bfi	r2, r3, #0, #8
   10bfc:	4b10      	ldr	r3, [pc, #64]	; (10c40 <arm_core_mpu_configure_dynamic_mpu_regions+0x88>)
   10bfe:	4811      	ldr	r0, [pc, #68]	; (10c44 <arm_core_mpu_configure_dynamic_mpu_regions+0x8c>)
   10c00:	1a5b      	subs	r3, r3, r1
   10c02:	08db      	lsrs	r3, r3, #3
   10c04:	4621      	mov	r1, r4
}
   10c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LOG_ERR("Partition %u: sanity check failed.", i);
   10c0a:	f363 128f 	bfi	r2, r3, #6, #10
   10c0e:	f013 b8ad 	b.w	23d6c <log_1>
		&&
   10c12:	06da      	lsls	r2, r3, #27
   10c14:	d1ec      	bne.n	10bf0 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>
		((part->start &
   10c16:	680b      	ldr	r3, [r1, #0]
		&&
   10c18:	06db      	lsls	r3, r3, #27
   10c1a:	d1e9      	bne.n	10bf0 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>
		reg_index = mpu_configure_region(reg_index, regions[i]);
   10c1c:	b2c0      	uxtb	r0, r0
   10c1e:	f7ff fe3f 	bl	108a0 <mpu_configure_region>
		if (reg_index == -EINVAL) {
   10c22:	f110 0f16 	cmn.w	r0, #22
   10c26:	d0d8      	beq.n	10bda <arm_core_mpu_configure_dynamic_mpu_regions+0x22>
		reg_index++;
   10c28:	3001      	adds	r0, #1
	for (i = 0; i < regions_num; i++) {
   10c2a:	3401      	adds	r4, #1
   10c2c:	e7d3      	b.n	10bd6 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
   10c2e:	bf00      	nop
   10c30:	20027406 	.word	0x20027406
   10c34:	e000ed90 	.word	0xe000ed90
   10c38:	20020338 	.word	0x20020338
   10c3c:	000264bc 	.word	0x000264bc
   10c40:	00026504 	.word	0x00026504
   10c44:	0002890e 	.word	0x0002890e

00010c48 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
   10c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c4c:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
   10c4e:	2300      	movs	r3, #0
{
   10c50:	b0a3      	sub	sp, #140	; 0x8c
   10c52:	e9cd 0102 	strd	r0, r1, [sp, #8]
	count = 0;
   10c56:	9301      	str	r3, [sp, #4]

	while ((c = *format++)) {
   10c58:	4613      	mov	r3, r2
   10c5a:	f813 0b01 	ldrb.w	r0, [r3], #1
   10c5e:	9308      	str	r3, [sp, #32]
   10c60:	b158      	cbz	r0, 10c7a <z_prf+0x32>
		if (c != '%') {
   10c62:	2825      	cmp	r0, #37	; 0x25
   10c64:	f000 8085 	beq.w	10d72 <z_prf+0x12a>
			PUTC(c);
   10c68:	9903      	ldr	r1, [sp, #12]
   10c6a:	9b02      	ldr	r3, [sp, #8]
   10c6c:	4798      	blx	r3
   10c6e:	3001      	adds	r0, #1
   10c70:	f040 841a 	bne.w	114a8 <z_prf+0x860>
   10c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10c78:	9301      	str	r3, [sp, #4]
		}
	}
	return count;

#undef PUTC
}
   10c7a:	9801      	ldr	r0, [sp, #4]
   10c7c:	b023      	add	sp, #140	; 0x8c
   10c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
   10c82:	2c23      	cmp	r4, #35	; 0x23
   10c84:	d06c      	beq.n	10d60 <z_prf+0x118>
   10c86:	d861      	bhi.n	10d4c <z_prf+0x104>
   10c88:	2c00      	cmp	r4, #0
   10c8a:	d0f6      	beq.n	10c7a <z_prf+0x32>
					fspace = true;
   10c8c:	2c20      	cmp	r4, #32
   10c8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10c90:	bf08      	it	eq
   10c92:	2301      	moveq	r3, #1
   10c94:	930e      	str	r3, [sp, #56]	; 0x38
					fminus = true;
   10c96:	f8cd 8020 	str.w	r8, [sp, #32]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
   10c9a:	f8dd 8020 	ldr.w	r8, [sp, #32]
   10c9e:	48b7      	ldr	r0, [pc, #732]	; (10f7c <z_prf+0x334>)
   10ca0:	f818 4b01 	ldrb.w	r4, [r8], #1
   10ca4:	4621      	mov	r1, r4
   10ca6:	f013 fd47 	bl	24738 <strchr>
   10caa:	2800      	cmp	r0, #0
   10cac:	d1e9      	bne.n	10c82 <z_prf+0x3a>
			if (c == '*') {
   10cae:	2c2a      	cmp	r4, #42	; 0x2a
   10cb0:	d166      	bne.n	10d80 <z_prf+0x138>
				width = va_arg(vargs, int);
   10cb2:	f856 3b04 	ldr.w	r3, [r6], #4
				c = *format++;
   10cb6:	f898 4000 	ldrb.w	r4, [r8]
				if (width < 0) {
   10cba:	2b00      	cmp	r3, #0
				width = va_arg(vargs, int);
   10cbc:	9309      	str	r3, [sp, #36]	; 0x24
					width = -width;
   10cbe:	bfbf      	itttt	lt
   10cc0:	425b      	neglt	r3, r3
   10cc2:	9309      	strlt	r3, [sp, #36]	; 0x24
					fminus = true;
   10cc4:	2301      	movlt	r3, #1
   10cc6:	930f      	strlt	r3, [sp, #60]	; 0x3c
				c = *format++;
   10cc8:	9b08      	ldr	r3, [sp, #32]
   10cca:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
   10cce:	2c2e      	cmp	r4, #46	; 0x2e
   10cd0:	d17b      	bne.n	10dca <z_prf+0x182>
				if (c == '*') {
   10cd2:	f898 3000 	ldrb.w	r3, [r8]
   10cd6:	2b2a      	cmp	r3, #42	; 0x2a
   10cd8:	d174      	bne.n	10dc4 <z_prf+0x17c>
					precision = va_arg(vargs, int);
   10cda:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
   10cde:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
   10ce2:	f818 4b01 	ldrb.w	r4, [r8], #1
			if (strchr("hlz", c) != NULL) {
   10ce6:	4621      	mov	r1, r4
   10ce8:	48a5      	ldr	r0, [pc, #660]	; (10f80 <z_prf+0x338>)
   10cea:	4627      	mov	r7, r4
   10cec:	f013 fd24 	bl	24738 <strchr>
   10cf0:	2800      	cmp	r0, #0
   10cf2:	d06d      	beq.n	10dd0 <z_prf+0x188>
				c = *format++;
   10cf4:	4643      	mov	r3, r8
   10cf6:	f813 4b01 	ldrb.w	r4, [r3], #1
				} else if (i == 'h' && c == 'h') {
   10cfa:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
   10cfc:	9308      	str	r3, [sp, #32]
				} else if (i == 'h' && c == 'h') {
   10cfe:	d107      	bne.n	10d10 <z_prf+0xc8>
   10d00:	2c68      	cmp	r4, #104	; 0x68
   10d02:	d105      	bne.n	10d10 <z_prf+0xc8>
					i = 'H';
   10d04:	2748      	movs	r7, #72	; 0x48
					c = *format++;
   10d06:	f108 0302 	add.w	r3, r8, #2
   10d0a:	f898 4001 	ldrb.w	r4, [r8, #1]
   10d0e:	9308      	str	r3, [sp, #32]
			switch (c) {
   10d10:	2c67      	cmp	r4, #103	; 0x67
   10d12:	d87b      	bhi.n	10e0c <z_prf+0x1c4>
   10d14:	2c65      	cmp	r4, #101	; 0x65
   10d16:	f080 8135 	bcs.w	10f84 <z_prf+0x33c>
   10d1a:	2c47      	cmp	r4, #71	; 0x47
   10d1c:	d85c      	bhi.n	10dd8 <z_prf+0x190>
   10d1e:	2c45      	cmp	r4, #69	; 0x45
   10d20:	f080 8130 	bcs.w	10f84 <z_prf+0x33c>
   10d24:	2c00      	cmp	r4, #0
   10d26:	d0a8      	beq.n	10c7a <z_prf+0x32>
   10d28:	2c25      	cmp	r4, #37	; 0x25
   10d2a:	f000 83b9 	beq.w	114a0 <z_prf+0x858>
				PUTC('%');
   10d2e:	9903      	ldr	r1, [sp, #12]
   10d30:	2025      	movs	r0, #37	; 0x25
   10d32:	9b02      	ldr	r3, [sp, #8]
   10d34:	4798      	blx	r3
   10d36:	3001      	adds	r0, #1
   10d38:	d09c      	beq.n	10c74 <z_prf+0x2c>
				PUTC(c);
   10d3a:	9903      	ldr	r1, [sp, #12]
   10d3c:	4620      	mov	r0, r4
   10d3e:	9b02      	ldr	r3, [sp, #8]
   10d40:	4798      	blx	r3
   10d42:	3001      	adds	r0, #1
   10d44:	d096      	beq.n	10c74 <z_prf+0x2c>
				count += 2;
   10d46:	9b01      	ldr	r3, [sp, #4]
   10d48:	3302      	adds	r3, #2
   10d4a:	e3af      	b.n	114ac <z_prf+0x864>
				switch (c) {
   10d4c:	2c2d      	cmp	r4, #45	; 0x2d
   10d4e:	d00a      	beq.n	10d66 <z_prf+0x11e>
   10d50:	2c30      	cmp	r4, #48	; 0x30
   10d52:	d00b      	beq.n	10d6c <z_prf+0x124>
					fplus = true;
   10d54:	2c2b      	cmp	r4, #43	; 0x2b
   10d56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10d58:	bf08      	it	eq
   10d5a:	2301      	moveq	r3, #1
   10d5c:	930b      	str	r3, [sp, #44]	; 0x2c
   10d5e:	e79a      	b.n	10c96 <z_prf+0x4e>
					falt = true;
   10d60:	f04f 0b01 	mov.w	fp, #1
   10d64:	e797      	b.n	10c96 <z_prf+0x4e>
					fminus = true;
   10d66:	2301      	movs	r3, #1
   10d68:	930f      	str	r3, [sp, #60]	; 0x3c
   10d6a:	e794      	b.n	10c96 <z_prf+0x4e>
					fzero = true;
   10d6c:	2301      	movs	r3, #1
   10d6e:	930a      	str	r3, [sp, #40]	; 0x28
   10d70:	e791      	b.n	10c96 <z_prf+0x4e>
			fminus = fplus = fspace = falt = fzero = false;
   10d72:	2300      	movs	r3, #0
   10d74:	930a      	str	r3, [sp, #40]	; 0x28
   10d76:	930e      	str	r3, [sp, #56]	; 0x38
   10d78:	930b      	str	r3, [sp, #44]	; 0x2c
   10d7a:	930f      	str	r3, [sp, #60]	; 0x3c
   10d7c:	469b      	mov	fp, r3
   10d7e:	e78c      	b.n	10c9a <z_prf+0x52>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   10d80:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
   10d84:	2b09      	cmp	r3, #9
				width = 0;
   10d86:	9009      	str	r0, [sp, #36]	; 0x24
			} else if (!isdigit(c)) {
   10d88:	d8a1      	bhi.n	10cce <z_prf+0x86>
		i = 10 * i + *p++ - '0';
   10d8a:	220a      	movs	r2, #10
	while (isdigit(*p)) {
   10d8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
   10d90:	f818 4b01 	ldrb.w	r4, [r8], #1
   10d94:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   10d98:	2b09      	cmp	r3, #9
   10d9a:	d898      	bhi.n	10cce <z_prf+0x86>
		i = 10 * i + *p++ - '0';
   10d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10d9e:	fb02 4403 	mla	r4, r2, r3, r4
   10da2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   10da6:	e9cd 8308 	strd	r8, r3, [sp, #32]
   10daa:	e7ef      	b.n	10d8c <z_prf+0x144>
   10dac:	4690      	mov	r8, r2
   10dae:	fb01 3505 	mla	r5, r1, r5, r3
   10db2:	3d30      	subs	r5, #48	; 0x30
	while (isdigit(*p)) {
   10db4:	4642      	mov	r2, r8
   10db6:	f812 3b01 	ldrb.w	r3, [r2], #1
   10dba:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   10dbe:	2809      	cmp	r0, #9
   10dc0:	d9f4      	bls.n	10dac <z_prf+0x164>
   10dc2:	e78e      	b.n	10ce2 <z_prf+0x9a>
	int i = 0;
   10dc4:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
   10dc6:	210a      	movs	r1, #10
   10dc8:	e7f4      	b.n	10db4 <z_prf+0x16c>
			precision = -1;
   10dca:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   10dce:	e78a      	b.n	10ce6 <z_prf+0x9e>
   10dd0:	f8cd 8020 	str.w	r8, [sp, #32]
			i = 0;
   10dd4:	4607      	mov	r7, r0
   10dd6:	e79b      	b.n	10d10 <z_prf+0xc8>
			switch (c) {
   10dd8:	2c63      	cmp	r4, #99	; 0x63
   10dda:	d059      	beq.n	10e90 <z_prf+0x248>
   10ddc:	d820      	bhi.n	10e20 <z_prf+0x1d8>
   10dde:	2c58      	cmp	r4, #88	; 0x58
   10de0:	d1a5      	bne.n	10d2e <z_prf+0xe6>
				if (c == 'o') {
   10de2:	2c6f      	cmp	r4, #111	; 0x6f
   10de4:	f106 0904 	add.w	r9, r6, #4
   10de8:	6831      	ldr	r1, [r6, #0]
   10dea:	f040 8328 	bne.w	1143e <z_prf+0x7f6>
	if (alt_form) {
   10dee:	f1bb 0f00 	cmp.w	fp, #0
   10df2:	f000 8317 	beq.w	11424 <z_prf+0x7dc>
		*buf++ = '0';
   10df6:	2330      	movs	r3, #48	; 0x30
   10df8:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		if (!value) {
   10dfc:	2900      	cmp	r1, #0
   10dfe:	f040 831b 	bne.w	11438 <z_prf+0x7f0>
			*buf++ = 0;
   10e02:	f88d 106d 	strb.w	r1, [sp, #109]	; 0x6d
			prefix = 0;
   10e06:	460f      	mov	r7, r1
			return 1;
   10e08:	2601      	movs	r6, #1
   10e0a:	e025      	b.n	10e58 <z_prf+0x210>
			switch (c) {
   10e0c:	2c70      	cmp	r4, #112	; 0x70
   10e0e:	f000 82f5 	beq.w	113fc <z_prf+0x7b4>
   10e12:	d827      	bhi.n	10e64 <z_prf+0x21c>
   10e14:	2c6e      	cmp	r4, #110	; 0x6e
   10e16:	f000 82de 	beq.w	113d6 <z_prf+0x78e>
   10e1a:	d8e2      	bhi.n	10de2 <z_prf+0x19a>
   10e1c:	2c69      	cmp	r4, #105	; 0x69
   10e1e:	d186      	bne.n	10d2e <z_prf+0xe6>
				switch (i) {
   10e20:	6837      	ldr	r7, [r6, #0]
   10e22:	f106 0904 	add.w	r9, r6, #4
	if (value < 0) {
   10e26:	2f00      	cmp	r7, #0
   10e28:	f280 809a 	bge.w	10f60 <z_prf+0x318>
		*buf++ = '-';
   10e2c:	232d      	movs	r3, #45	; 0x2d
		value = -value;
   10e2e:	4279      	negs	r1, r7
		*buf++ = '-';
   10e30:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		*buf++ = ' ';
   10e34:	f10d 066d 	add.w	r6, sp, #109	; 0x6d
	return _to_x(buf, value, 10);
   10e38:	4630      	mov	r0, r6
   10e3a:	220a      	movs	r2, #10
   10e3c:	f013 fd15 	bl	2486a <_to_x>
				if (fplus || fspace || val < 0) {
   10e40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	return (buf + _to_udec(buf, value)) - start;
   10e42:	4406      	add	r6, r0
   10e44:	a81b      	add	r0, sp, #108	; 0x6c
   10e46:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
   10e48:	2b00      	cmp	r3, #0
   10e4a:	f040 8332 	bne.w	114b2 <z_prf+0x86a>
   10e4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10e50:	2b00      	cmp	r3, #0
   10e52:	f040 832e 	bne.w	114b2 <z_prf+0x86a>
   10e56:	0fff      	lsrs	r7, r7, #31
			if (precision >= 0) {
   10e58:	2d00      	cmp	r5, #0
   10e5a:	da21      	bge.n	10ea0 <z_prf+0x258>
			zero.predot = zero.postdot = zero.trail = 0;
   10e5c:	2500      	movs	r5, #0
   10e5e:	46ab      	mov	fp, r5
   10e60:	46a8      	mov	r8, r5
   10e62:	e0e1      	b.n	11028 <z_prf+0x3e0>
			switch (c) {
   10e64:	2c75      	cmp	r4, #117	; 0x75
   10e66:	d0bc      	beq.n	10de2 <z_prf+0x19a>
   10e68:	2c78      	cmp	r4, #120	; 0x78
   10e6a:	d0ba      	beq.n	10de2 <z_prf+0x19a>
   10e6c:	2c73      	cmp	r4, #115	; 0x73
   10e6e:	f47f af5e 	bne.w	10d2e <z_prf+0xe6>
				cptr = va_arg(vargs, char *);
   10e72:	46b1      	mov	r9, r6
					precision = INT_MAX;
   10e74:	2d00      	cmp	r5, #0
   10e76:	bfb8      	it	lt
   10e78:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
   10e7c:	2600      	movs	r6, #0
				cptr = va_arg(vargs, char *);
   10e7e:	f859 3b04 	ldr.w	r3, [r9], #4
				for (clen = 0; clen < precision; clen++) {
   10e82:	42b5      	cmp	r5, r6
   10e84:	f040 82c9 	bne.w	1141a <z_prf+0x7d2>
   10e88:	462e      	mov	r6, r5
   10e8a:	2500      	movs	r5, #0
   10e8c:	462f      	mov	r7, r5
   10e8e:	e008      	b.n	10ea2 <z_prf+0x25a>
				break;
   10e90:	2700      	movs	r7, #0
				buf[0] = va_arg(vargs, int);
   10e92:	46b1      	mov	r9, r6
				break;
   10e94:	463d      	mov	r5, r7
				clen = 1;
   10e96:	2601      	movs	r6, #1
				buf[0] = va_arg(vargs, int);
   10e98:	f859 3b04 	ldr.w	r3, [r9], #4
   10e9c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
				break;
   10ea0:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = precision - clen + prefix;
   10ea2:	19ea      	adds	r2, r5, r7
			zero.predot = zero.postdot = zero.trail = 0;
   10ea4:	2500      	movs	r5, #0
   10ea6:	46ab      	mov	fp, r5
   10ea8:	46a8      	mov	r8, r5
				zero_head = precision - clen + prefix;
   10eaa:	1b92      	subs	r2, r2, r6
			if (zero_head < 0) {
   10eac:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			width -= clen + zero_head;
   10eb0:	1991      	adds	r1, r2, r6
   10eb2:	9106      	str	r1, [sp, #24]
   10eb4:	9909      	ldr	r1, [sp, #36]	; 0x24
   10eb6:	1990      	adds	r0, r2, r6
   10eb8:	1a0c      	subs	r4, r1, r0
			if (!fminus && width > 0) {
   10eba:	990f      	ldr	r1, [sp, #60]	; 0x3c
   10ebc:	b911      	cbnz	r1, 10ec4 <z_prf+0x27c>
   10ebe:	2c00      	cmp	r4, #0
   10ec0:	f300 8314 	bgt.w	114ec <z_prf+0x8a4>
			while (prefix-- > 0) {
   10ec4:	eb03 0a07 	add.w	sl, r3, r7
   10ec8:	4553      	cmp	r3, sl
   10eca:	f040 8313 	bne.w	114f4 <z_prf+0x8ac>
			while (zero_head-- > 0) {
   10ece:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
   10ed2:	f080 831d 	bcs.w	11510 <z_prf+0x8c8>
			clen -= prefix;
   10ed6:	1bf6      	subs	r6, r6, r7
			if (zero.predot) {
   10ed8:	f1b8 0f00 	cmp.w	r8, #0
   10edc:	d011      	beq.n	10f02 <z_prf+0x2ba>
				c = *cptr;
   10ede:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c)) {
   10ee2:	eb0a 0706 	add.w	r7, sl, r6
   10ee6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   10eea:	2b09      	cmp	r3, #9
   10eec:	eba7 060a 	sub.w	r6, r7, sl
   10ef0:	f240 8319 	bls.w	11526 <z_prf+0x8de>
   10ef4:	4647      	mov	r7, r8
				while (zero.predot-- > 0) {
   10ef6:	f117 37ff 	adds.w	r7, r7, #4294967295	; 0xffffffff
   10efa:	f080 831d 	bcs.w	11538 <z_prf+0x8f0>
				clen -= zero.predot;
   10efe:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.postdot) {
   10f02:	f1bb 0f00 	cmp.w	fp, #0
   10f06:	d015      	beq.n	10f34 <z_prf+0x2ec>
   10f08:	eb0a 0706 	add.w	r7, sl, r6
					c = *cptr++;
   10f0c:	f81a 8b01 	ldrb.w	r8, [sl], #1
					PUTC(c);
   10f10:	9903      	ldr	r1, [sp, #12]
   10f12:	4640      	mov	r0, r8
   10f14:	9b02      	ldr	r3, [sp, #8]
   10f16:	4798      	blx	r3
   10f18:	3001      	adds	r0, #1
   10f1a:	f43f aeab 	beq.w	10c74 <z_prf+0x2c>
				} while (c != '.');
   10f1e:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
   10f22:	eba7 060a 	sub.w	r6, r7, sl
   10f26:	d1f1      	bne.n	10f0c <z_prf+0x2c4>
				while (zero.postdot-- > 0) {
   10f28:	465f      	mov	r7, fp
   10f2a:	2f00      	cmp	r7, #0
   10f2c:	f300 830d 	bgt.w	1154a <z_prf+0x902>
				clen -= zero.postdot;
   10f30:	eba6 060b 	sub.w	r6, r6, fp
			if (zero.trail) {
   10f34:	b195      	cbz	r5, 10f5c <z_prf+0x314>
				c = *cptr;
   10f36:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c) || c == '.') {
   10f3a:	eb0a 0706 	add.w	r7, sl, r6
   10f3e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   10f42:	2b09      	cmp	r3, #9
   10f44:	eba7 060a 	sub.w	r6, r7, sl
   10f48:	f240 830a 	bls.w	11560 <z_prf+0x918>
   10f4c:	282e      	cmp	r0, #46	; 0x2e
   10f4e:	f000 8307 	beq.w	11560 <z_prf+0x918>
				while (zero.trail-- > 0) {
   10f52:	462f      	mov	r7, r5
   10f54:	2f00      	cmp	r7, #0
   10f56:	f300 830c 	bgt.w	11572 <z_prf+0x92a>
				clen -= zero.trail;
   10f5a:	1b76      	subs	r6, r6, r5
   10f5c:	4456      	add	r6, sl
   10f5e:	e31b      	b.n	11598 <z_prf+0x950>
	} else if (fplus) {
   10f60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10f62:	b123      	cbz	r3, 10f6e <z_prf+0x326>
		*buf++ = '+';
   10f64:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
   10f66:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   10f6a:	4639      	mov	r1, r7
   10f6c:	e762      	b.n	10e34 <z_prf+0x1ec>
	} else if (fspace) {
   10f6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10f70:	b10b      	cbz	r3, 10f76 <z_prf+0x32e>
		*buf++ = ' ';
   10f72:	2320      	movs	r3, #32
   10f74:	e7f7      	b.n	10f66 <z_prf+0x31e>
	} else if (fspace) {
   10f76:	4639      	mov	r1, r7
   10f78:	ae1b      	add	r6, sp, #108	; 0x6c
   10f7a:	e75d      	b.n	10e38 <z_prf+0x1f0>
   10f7c:	0002897a 	.word	0x0002897a
   10f80:	00028980 	.word	0x00028980
				u.d = va_arg(vargs, double);
   10f84:	f106 0907 	add.w	r9, r6, #7
   10f88:	f029 0907 	bic.w	r9, r9, #7
   10f8c:	e8f9 2302 	ldrd	r2, r3, [r9], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
   10f90:	02d8      	lsls	r0, r3, #11
   10f92:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
   10f96:	02d6      	lsls	r6, r2, #11
   10f98:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
	if (sign) {
   10f9c:	2a00      	cmp	r2, #0
	exp = double_temp >> 52 & 0x7ff;
   10f9e:	f3c3 510a 	ubfx	r1, r3, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
   10fa2:	9604      	str	r6, [sp, #16]
   10fa4:	9005      	str	r0, [sp, #20]
	if (sign) {
   10fa6:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
   10faa:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   10fae:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
	if (sign) {
   10fb2:	da41      	bge.n	11038 <z_prf+0x3f0>
		*buf++ = '-';
   10fb4:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
   10fb6:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   10fba:	f10d 076d 	add.w	r7, sp, #109	; 0x6d
	if (exp == 0x7ff) {
   10fbe:	f240 73ff 	movw	r3, #2047	; 0x7ff
   10fc2:	4299      	cmp	r1, r3
   10fc4:	d153      	bne.n	1106e <z_prf+0x426>
		if (!fract) {
   10fc6:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   10fca:	430a      	orrs	r2, r1
   10fcc:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
   10fd0:	f107 0303 	add.w	r3, r7, #3
   10fd4:	d140      	bne.n	11058 <z_prf+0x410>
			if (isupper(c)) {
   10fd6:	2c19      	cmp	r4, #25
   10fd8:	d838      	bhi.n	1104c <z_prf+0x404>
				*buf++ = 'I';
   10fda:	2249      	movs	r2, #73	; 0x49
   10fdc:	703a      	strb	r2, [r7, #0]
				*buf++ = 'N';
   10fde:	224e      	movs	r2, #78	; 0x4e
   10fe0:	707a      	strb	r2, [r7, #1]
				*buf++ = 'F';
   10fe2:	2246      	movs	r2, #70	; 0x46
		*buf = 0;
   10fe4:	2500      	movs	r5, #0
			zero.predot = zero.postdot = zero.trail = 0;
   10fe6:	46ab      	mov	fp, r5
   10fe8:	46a8      	mov	r8, r5
		return buf - start;
   10fea:	ae1b      	add	r6, sp, #108	; 0x6c
				*buf++ = 'n';
   10fec:	70ba      	strb	r2, [r7, #2]
		*buf = 0;
   10fee:	70fd      	strb	r5, [r7, #3]
		return buf - start;
   10ff0:	1b9b      	subs	r3, r3, r6
				if (fplus || fspace || (buf[0] == '-')) {
   10ff2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10ff4:	2a00      	cmp	r2, #0
   10ff6:	f040 81ec 	bne.w	113d2 <z_prf+0x78a>
   10ffa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10ffc:	2a00      	cmp	r2, #0
   10ffe:	f040 81e8 	bne.w	113d2 <z_prf+0x78a>
   11002:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
   11006:	f1a7 022d 	sub.w	r2, r7, #45	; 0x2d
   1100a:	4257      	negs	r7, r2
   1100c:	4157      	adcs	r7, r2
				clen += zero.predot + zero.postdot + zero.trail;
   1100e:	eb05 0608 	add.w	r6, r5, r8
   11012:	4433      	add	r3, r6
   11014:	eb03 060b 	add.w	r6, r3, fp
				if (!isdigit(buf[prefix])) {
   11018:	ab22      	add	r3, sp, #136	; 0x88
   1101a:	443b      	add	r3, r7
   1101c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
   11020:	3b30      	subs	r3, #48	; 0x30
   11022:	2b09      	cmp	r3, #9
   11024:	f200 8249 	bhi.w	114ba <z_prf+0x872>
			} else if (fzero) {
   11028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1102a:	2b00      	cmp	r3, #0
   1102c:	f000 8248 	beq.w	114c0 <z_prf+0x878>
   11030:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11032:	1b9a      	subs	r2, r3, r6
   11034:	ab1b      	add	r3, sp, #108	; 0x6c
   11036:	e739      	b.n	10eac <z_prf+0x264>
	} else if (fplus) {
   11038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1103a:	b10b      	cbz	r3, 11040 <z_prf+0x3f8>
		*buf++ = '+';
   1103c:	232b      	movs	r3, #43	; 0x2b
   1103e:	e7ba      	b.n	10fb6 <z_prf+0x36e>
	} else if (fspace) {
   11040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11042:	b10b      	cbz	r3, 11048 <z_prf+0x400>
		*buf++ = ' ';
   11044:	2320      	movs	r3, #32
   11046:	e7b6      	b.n	10fb6 <z_prf+0x36e>
	} else if (fspace) {
   11048:	af1b      	add	r7, sp, #108	; 0x6c
   1104a:	e7b8      	b.n	10fbe <z_prf+0x376>
				*buf++ = 'i';
   1104c:	2269      	movs	r2, #105	; 0x69
   1104e:	703a      	strb	r2, [r7, #0]
				*buf++ = 'n';
   11050:	226e      	movs	r2, #110	; 0x6e
   11052:	707a      	strb	r2, [r7, #1]
				*buf++ = 'f';
   11054:	2266      	movs	r2, #102	; 0x66
   11056:	e7c5      	b.n	10fe4 <z_prf+0x39c>
			if (isupper(c)) {
   11058:	2c19      	cmp	r4, #25
				*buf++ = 'N';
   1105a:	bf99      	ittee	ls
   1105c:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
   1105e:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
   11060:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
   11062:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
   11064:	bf94      	ite	ls
   11066:	703a      	strbls	r2, [r7, #0]
				*buf++ = 'n';
   11068:	703a      	strbhi	r2, [r7, #0]
				*buf++ = 'a';
   1106a:	7079      	strb	r1, [r7, #1]
   1106c:	e7ba      	b.n	10fe4 <z_prf+0x39c>
	if ((exp | fract) != 0) {
   1106e:	9b04      	ldr	r3, [sp, #16]
   11070:	9805      	ldr	r0, [sp, #20]
   11072:	430b      	orrs	r3, r1
   11074:	9310      	str	r3, [sp, #64]	; 0x40
   11076:	17cb      	asrs	r3, r1, #31
   11078:	4303      	orrs	r3, r0
		c = 'f';
   1107a:	2c46      	cmp	r4, #70	; 0x46
	if ((exp | fract) != 0) {
   1107c:	9311      	str	r3, [sp, #68]	; 0x44
		c = 'f';
   1107e:	bf08      	it	eq
   11080:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
   11082:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11086:	4313      	orrs	r3, r2
   11088:	f000 8111 	beq.w	112ae <z_prf+0x666>
		if (exp == 0) {
   1108c:	2900      	cmp	r1, #0
   1108e:	f000 809b 	beq.w	111c8 <z_prf+0x580>
		fract |= HIGHBIT64;
   11092:	2600      	movs	r6, #0
   11094:	9b17      	ldr	r3, [sp, #92]	; 0x5c
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
   11096:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
   1109a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1109e:	9317      	str	r3, [sp, #92]	; 0x5c
	while (exp <= -3) {
   110a0:	f118 0f02 	cmn.w	r8, #2
   110a4:	f2c0 80a4 	blt.w	111f0 <z_prf+0x5a8>
	while (exp > 0) {
   110a8:	f1b8 0f00 	cmp.w	r8, #0
   110ac:	f300 80dd 	bgt.w	1126a <z_prf+0x622>
		_rlrshift(&fract);
   110b0:	a816      	add	r0, sp, #88	; 0x58
		exp++;
   110b2:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
   110b6:	f013 fbfa 	bl	248ae <_rlrshift>
	while (exp < (0 + 4)) {
   110ba:	f1b8 0f04 	cmp.w	r8, #4
   110be:	d1f7      	bne.n	110b0 <z_prf+0x468>
		precision = 6;		/* Default precision if none given */
   110c0:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
   110c2:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
   110c6:	bfb8      	it	lt
   110c8:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
   110ca:	2b47      	cmp	r3, #71	; 0x47
   110cc:	f040 80f8 	bne.w	112c0 <z_prf+0x678>
		if (decexp < (-4 + 1) || decexp > precision) {
   110d0:	1cf1      	adds	r1, r6, #3
   110d2:	db02      	blt.n	110da <z_prf+0x492>
   110d4:	42ae      	cmp	r6, r5
   110d6:	f340 80ed 	ble.w	112b4 <z_prf+0x66c>
			c += 'e' - 'g';
   110da:	3c02      	subs	r4, #2
   110dc:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
   110de:	2d00      	cmp	r5, #0
   110e0:	f000 80f4 	beq.w	112cc <z_prf+0x684>
				precision--;
   110e4:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
   110e6:	f1bb 0f00 	cmp.w	fp, #0
   110ea:	f040 80ef 	bne.w	112cc <z_prf+0x684>
   110ee:	2d00      	cmp	r5, #0
   110f0:	bfd4      	ite	le
   110f2:	f04f 0a00 	movle.w	sl, #0
   110f6:	f04f 0a01 	movgt.w	sl, #1
	if (c == 'f') {
   110fa:	2c66      	cmp	r4, #102	; 0x66
   110fc:	f040 80e8 	bne.w	112d0 <z_prf+0x688>
		if (exp < 0) {
   11100:	eb16 0805 	adds.w	r8, r6, r5
   11104:	f140 80ec 	bpl.w	112e0 <z_prf+0x698>
	digit_count = 16;
   11108:	2310      	movs	r3, #16
   1110a:	2466      	movs	r4, #102	; 0x66
			exp = 0;
   1110c:	f04f 0800 	mov.w	r8, #0
	digit_count = 16;
   11110:	9315      	str	r3, [sp, #84]	; 0x54
	ltemp = 0x0800000000000000;
   11112:	2200      	movs	r2, #0
   11114:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   11118:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	while (exp--) {
   1111c:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
   11120:	f080 80e0 	bcs.w	112e4 <z_prf+0x69c>
	fract += ltemp;
   11124:	9b16      	ldr	r3, [sp, #88]	; 0x58
   11126:	9a18      	ldr	r2, [sp, #96]	; 0x60
   11128:	9919      	ldr	r1, [sp, #100]	; 0x64
   1112a:	189b      	adds	r3, r3, r2
   1112c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1112e:	eb41 0202 	adc.w	r2, r1, r2
   11132:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
	if ((fract >> 32) & 0xF0000000) {
   11136:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
   1113a:	9312      	str	r3, [sp, #72]	; 0x48
   1113c:	2300      	movs	r3, #0
   1113e:	9313      	str	r3, [sp, #76]	; 0x4c
   11140:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   11144:	4313      	orrs	r3, r2
   11146:	d006      	beq.n	11156 <z_prf+0x50e>
		_ldiv5(&fract);
   11148:	a816      	add	r0, sp, #88	; 0x58
   1114a:	f013 fbc1 	bl	248d0 <_ldiv5>
		_rlrshift(&fract);
   1114e:	a816      	add	r0, sp, #88	; 0x58
   11150:	f013 fbad 	bl	248ae <_rlrshift>
		decexp++;
   11154:	3601      	adds	r6, #1
	if (c == 'f') {
   11156:	2c66      	cmp	r4, #102	; 0x66
   11158:	f040 80e1 	bne.w	1131e <z_prf+0x6d6>
		if (decexp > 0) {
   1115c:	2e00      	cmp	r6, #0
   1115e:	f340 80c8 	ble.w	112f2 <z_prf+0x6aa>
			while (decexp > 0 && digit_count > 0) {
   11162:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11164:	2b00      	cmp	r3, #0
   11166:	dd07      	ble.n	11178 <z_prf+0x530>
				*buf++ = _get_digit(&fract, &digit_count);
   11168:	a915      	add	r1, sp, #84	; 0x54
   1116a:	a816      	add	r0, sp, #88	; 0x58
   1116c:	f013 fbdb 	bl	24926 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   11170:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
   11172:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
   11176:	d1f4      	bne.n	11162 <z_prf+0x51a>
			zp->predot = decexp;
   11178:	46b0      	mov	r8, r6
   1117a:	463b      	mov	r3, r7
			decexp = 0;
   1117c:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
   1117e:	f1bb 0f00 	cmp.w	fp, #0
   11182:	d101      	bne.n	11188 <z_prf+0x540>
   11184:	2d00      	cmp	r5, #0
   11186:	dd15      	ble.n	111b4 <z_prf+0x56c>
			*buf++ = '.';
   11188:	222e      	movs	r2, #46	; 0x2e
   1118a:	f803 2b01 	strb.w	r2, [r3], #1
		if (decexp < 0 && precision > 0) {
   1118e:	2e00      	cmp	r6, #0
   11190:	f000 80c0 	beq.w	11314 <z_prf+0x6cc>
   11194:	2d00      	cmp	r5, #0
   11196:	f340 80bf 	ble.w	11318 <z_prf+0x6d0>
			zp->postdot = -decexp;
   1119a:	f1c6 0b00 	rsb	fp, r6, #0
   1119e:	45ab      	cmp	fp, r5
   111a0:	bfa8      	it	ge
   111a2:	46ab      	movge	fp, r5
			precision -= zp->postdot;
   111a4:	eba5 050b 	sub.w	r5, r5, fp
		while (precision > 0 && digit_count > 0) {
   111a8:	2d00      	cmp	r5, #0
   111aa:	dd03      	ble.n	111b4 <z_prf+0x56c>
   111ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
   111ae:	2a00      	cmp	r2, #0
   111b0:	f300 80a6 	bgt.w	11300 <z_prf+0x6b8>
	if (prune_zero) {
   111b4:	f1ba 0f00 	cmp.w	sl, #0
   111b8:	f040 80c6 	bne.w	11348 <z_prf+0x700>
	*buf = 0;
   111bc:	2200      	movs	r2, #0
	return buf - start;
   111be:	ae1b      	add	r6, sp, #108	; 0x6c
	*buf = 0;
   111c0:	701a      	strb	r2, [r3, #0]
	return buf - start;
   111c2:	1b9b      	subs	r3, r3, r6
   111c4:	e715      	b.n	10ff2 <z_prf+0x3aa>
				exp--;
   111c6:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
   111c8:	9b04      	ldr	r3, [sp, #16]
   111ca:	18db      	adds	r3, r3, r3
   111cc:	9304      	str	r3, [sp, #16]
   111ce:	9b05      	ldr	r3, [sp, #20]
   111d0:	415b      	adcs	r3, r3
   111d2:	9305      	str	r3, [sp, #20]
   111d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   111d8:	2a00      	cmp	r2, #0
   111da:	f173 0300 	sbcs.w	r3, r3, #0
   111de:	daf2      	bge.n	111c6 <z_prf+0x57e>
   111e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   111e4:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   111e8:	e753      	b.n	11092 <z_prf+0x44a>
			_rlrshift(&fract);
   111ea:	a816      	add	r0, sp, #88	; 0x58
   111ec:	f013 fb5f 	bl	248ae <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
   111f0:	e9dd ec16 	ldrd	lr, ip, [sp, #88]	; 0x58
   111f4:	2300      	movs	r3, #0
   111f6:	2100      	movs	r1, #0
   111f8:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
   111fc:	930d      	str	r3, [sp, #52]	; 0x34
   111fe:	48bc      	ldr	r0, [pc, #752]	; (114f0 <z_prf+0x8a8>)
   11200:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   11204:	4299      	cmp	r1, r3
   11206:	bf08      	it	eq
   11208:	4290      	cmpeq	r0, r2
   1120a:	f108 0801 	add.w	r8, r8, #1
   1120e:	d3ec      	bcc.n	111ea <z_prf+0x5a2>
		fract *= 5U;
   11210:	2005      	movs	r0, #5
   11212:	fbae 2300 	umull	r2, r3, lr, r0
   11216:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1121a:	9b07      	ldr	r3, [sp, #28]
		decexp--;
   1121c:	3e01      	subs	r6, #1
		fract *= 5U;
   1121e:	fb00 330c 	mla	r3, r0, ip, r3
		decexp--;
   11222:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
   11226:	9307      	str	r3, [sp, #28]
   11228:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1122c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		while ((fract >> 32) <= (MAXFP1 / 2)) {
   11230:	2100      	movs	r1, #0
   11232:	2300      	movs	r3, #0
   11234:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   11238:	9807      	ldr	r0, [sp, #28]
   1123a:	428b      	cmp	r3, r1
   1123c:	bf08      	it	eq
   1123e:	4282      	cmpeq	r2, r0
   11240:	d208      	bcs.n	11254 <z_prf+0x60c>
   11242:	f1bc 0f00 	cmp.w	ip, #0
   11246:	f43f af2b 	beq.w	110a0 <z_prf+0x458>
   1124a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1124e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   11252:	e725      	b.n	110a0 <z_prf+0x458>
			fract <<= 1;
   11254:	9b06      	ldr	r3, [sp, #24]
			exp--;
   11256:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			fract <<= 1;
   1125a:	18db      	adds	r3, r3, r3
   1125c:	9306      	str	r3, [sp, #24]
   1125e:	9b07      	ldr	r3, [sp, #28]
   11260:	f04f 0c01 	mov.w	ip, #1
   11264:	415b      	adcs	r3, r3
   11266:	9307      	str	r3, [sp, #28]
			exp--;
   11268:	e7e2      	b.n	11230 <z_prf+0x5e8>
		_ldiv5(&fract);
   1126a:	a816      	add	r0, sp, #88	; 0x58
   1126c:	f013 fb30 	bl	248d0 <_ldiv5>
		exp--;
   11270:	e9dd ae16 	ldrd	sl, lr, [sp, #88]	; 0x58
		decexp++;
   11274:	f04f 0c00 	mov.w	ip, #0
		exp--;
   11278:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
   1127c:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
   1127e:	2300      	movs	r3, #0
   11280:	2100      	movs	r1, #0
   11282:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11286:	4299      	cmp	r1, r3
   11288:	bf08      	it	eq
   1128a:	4570      	cmpeq	r0, lr
   1128c:	d206      	bcs.n	1129c <z_prf+0x654>
   1128e:	f1bc 0f00 	cmp.w	ip, #0
   11292:	f43f af09 	beq.w	110a8 <z_prf+0x460>
   11296:	e9cd ae16 	strd	sl, lr, [sp, #88]	; 0x58
   1129a:	e705      	b.n	110a8 <z_prf+0x460>
			fract <<= 1;
   1129c:	eb1a 0a0a 	adds.w	sl, sl, sl
   112a0:	eb4e 0e0e 	adc.w	lr, lr, lr
			exp--;
   112a4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   112a8:	f04f 0c01 	mov.w	ip, #1
   112ac:	e7e7      	b.n	1127e <z_prf+0x636>
	if ((exp | fract) != 0) {
   112ae:	2600      	movs	r6, #0
   112b0:	46b0      	mov	r8, r6
   112b2:	e6fd      	b.n	110b0 <z_prf+0x468>
			precision -= decexp;
   112b4:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
   112b6:	f1bb 0f00 	cmp.w	fp, #0
   112ba:	d104      	bne.n	112c6 <z_prf+0x67e>
			c = 'f';
   112bc:	2466      	movs	r4, #102	; 0x66
   112be:	e716      	b.n	110ee <z_prf+0x4a6>
	prune_zero = false;		/* Assume trailing 0's allowed     */
   112c0:	f04f 0a00 	mov.w	sl, #0
   112c4:	e719      	b.n	110fa <z_prf+0x4b2>
   112c6:	f04f 0a00 	mov.w	sl, #0
   112ca:	e719      	b.n	11100 <z_prf+0x4b8>
   112cc:	f04f 0a00 	mov.w	sl, #0
		exp = precision + 1;
   112d0:	f105 0801 	add.w	r8, r5, #1
	digit_count = 16;
   112d4:	2310      	movs	r3, #16
   112d6:	4598      	cmp	r8, r3
   112d8:	9315      	str	r3, [sp, #84]	; 0x54
	if (exp > 16) {
   112da:	bfa8      	it	ge
   112dc:	4698      	movge	r8, r3
   112de:	e718      	b.n	11112 <z_prf+0x4ca>
		if (exp < 0) {
   112e0:	2466      	movs	r4, #102	; 0x66
   112e2:	e7f7      	b.n	112d4 <z_prf+0x68c>
		_ldiv5(&ltemp);
   112e4:	a818      	add	r0, sp, #96	; 0x60
   112e6:	f013 faf3 	bl	248d0 <_ldiv5>
		_rlrshift(&ltemp);
   112ea:	a818      	add	r0, sp, #96	; 0x60
   112ec:	f013 fadf 	bl	248ae <_rlrshift>
   112f0:	e714      	b.n	1111c <z_prf+0x4d4>
			*buf++ = '0';
   112f2:	463b      	mov	r3, r7
   112f4:	2230      	movs	r2, #48	; 0x30
			zero.predot = zero.postdot = zero.trail = 0;
   112f6:	f04f 0800 	mov.w	r8, #0
			*buf++ = '0';
   112fa:	f803 2b01 	strb.w	r2, [r3], #1
   112fe:	e73e      	b.n	1117e <z_prf+0x536>
			*buf++ = _get_digit(&fract, &digit_count);
   11300:	a915      	add	r1, sp, #84	; 0x54
   11302:	a816      	add	r0, sp, #88	; 0x58
   11304:	9306      	str	r3, [sp, #24]
   11306:	f013 fb0e 	bl	24926 <_get_digit>
   1130a:	9b06      	ldr	r3, [sp, #24]
			precision--;
   1130c:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
   1130e:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
   11312:	e749      	b.n	111a8 <z_prf+0x560>
			zero.predot = zero.postdot = zero.trail = 0;
   11314:	46b3      	mov	fp, r6
   11316:	e747      	b.n	111a8 <z_prf+0x560>
   11318:	f04f 0b00 	mov.w	fp, #0
   1131c:	e74a      	b.n	111b4 <z_prf+0x56c>
		*buf = _get_digit(&fract, &digit_count);
   1131e:	a915      	add	r1, sp, #84	; 0x54
   11320:	a816      	add	r0, sp, #88	; 0x58
   11322:	f013 fb00 	bl	24926 <_get_digit>
		if (*buf++ != '0') {
   11326:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
   11328:	7038      	strb	r0, [r7, #0]
			decexp--;
   1132a:	bf18      	it	ne
   1132c:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
   11330:	f1bb 0f00 	cmp.w	fp, #0
   11334:	d138      	bne.n	113a8 <z_prf+0x760>
   11336:	2d00      	cmp	r5, #0
   11338:	dc36      	bgt.n	113a8 <z_prf+0x760>
		if (*buf++ != '0') {
   1133a:	1c7b      	adds	r3, r7, #1
	if (prune_zero) {
   1133c:	f1ba 0f00 	cmp.w	sl, #0
   11340:	d044      	beq.n	113cc <z_prf+0x784>
			zero.predot = zero.postdot = zero.trail = 0;
   11342:	f04f 0b00 	mov.w	fp, #0
   11346:	46d8      	mov	r8, fp
		while (*--buf == '0')
   11348:	461a      	mov	r2, r3
   1134a:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
   1134e:	2930      	cmp	r1, #48	; 0x30
   11350:	d0fa      	beq.n	11348 <z_prf+0x700>
		if (*buf != '.') {
   11352:	292e      	cmp	r1, #46	; 0x2e
   11354:	bf18      	it	ne
   11356:	4613      	movne	r3, r2
   11358:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
   1135a:	f004 02df 	and.w	r2, r4, #223	; 0xdf
   1135e:	2a45      	cmp	r2, #69	; 0x45
   11360:	f47f af2c 	bne.w	111bc <z_prf+0x574>
		if (decexp < 0) {
   11364:	2e00      	cmp	r6, #0
			*buf++ = '-';
   11366:	bfb4      	ite	lt
   11368:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
   1136a:	222b      	movge	r2, #43	; 0x2b
		*buf++ = c;
   1136c:	4619      	mov	r1, r3
			decexp = -decexp;
   1136e:	bfb8      	it	lt
   11370:	4276      	neglt	r6, r6
		if (decexp >= 100) {
   11372:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
   11374:	f801 4b02 	strb.w	r4, [r1], #2
			*buf++ = '-';
   11378:	705a      	strb	r2, [r3, #1]
		if (decexp >= 100) {
   1137a:	dd08      	ble.n	1138e <z_prf+0x746>
			*buf++ = (decexp / 100) + '0';
   1137c:	2064      	movs	r0, #100	; 0x64
   1137e:	fb96 f2f0 	sdiv	r2, r6, r0
			decexp %= 100;
   11382:	fb00 6612 	mls	r6, r0, r2, r6
			*buf++ = (decexp / 100) + '0';
   11386:	f102 0430 	add.w	r4, r2, #48	; 0x30
   1138a:	1cd9      	adds	r1, r3, #3
   1138c:	709c      	strb	r4, [r3, #2]
		*buf++ = (decexp / 10) + '0';
   1138e:	200a      	movs	r0, #10
   11390:	fb96 f2f0 	sdiv	r2, r6, r0
   11394:	460b      	mov	r3, r1
		decexp %= 10;
   11396:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
   1139a:	f102 0430 	add.w	r4, r2, #48	; 0x30
		*buf++ = decexp + '0';
   1139e:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   113a0:	f803 4b02 	strb.w	r4, [r3], #2
		*buf++ = decexp + '0';
   113a4:	704e      	strb	r6, [r1, #1]
   113a6:	e709      	b.n	111bc <z_prf+0x574>
			*buf++ = '.';
   113a8:	222e      	movs	r2, #46	; 0x2e
   113aa:	1cbb      	adds	r3, r7, #2
   113ac:	707a      	strb	r2, [r7, #1]
		while (precision > 0 && digit_count > 0) {
   113ae:	2d00      	cmp	r5, #0
   113b0:	ddc4      	ble.n	1133c <z_prf+0x6f4>
   113b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   113b4:	2a00      	cmp	r2, #0
   113b6:	ddc1      	ble.n	1133c <z_prf+0x6f4>
			*buf++ = _get_digit(&fract, &digit_count);
   113b8:	a915      	add	r1, sp, #84	; 0x54
   113ba:	a816      	add	r0, sp, #88	; 0x58
   113bc:	9306      	str	r3, [sp, #24]
   113be:	f013 fab2 	bl	24926 <_get_digit>
   113c2:	9b06      	ldr	r3, [sp, #24]
			precision--;
   113c4:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
   113c6:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
   113ca:	e7f0      	b.n	113ae <z_prf+0x766>
			zero.predot = zero.postdot = zero.trail = 0;
   113cc:	46d3      	mov	fp, sl
   113ce:	46d0      	mov	r8, sl
   113d0:	e7c3      	b.n	1135a <z_prf+0x712>
					prefix = 1;
   113d2:	2701      	movs	r7, #1
   113d4:	e61b      	b.n	1100e <z_prf+0x3c6>
				switch (i) {
   113d6:	46b1      	mov	r9, r6
   113d8:	2f68      	cmp	r7, #104	; 0x68
   113da:	f859 3b04 	ldr.w	r3, [r9], #4
   113de:	d005      	beq.n	113ec <z_prf+0x7a4>
   113e0:	dc01      	bgt.n	113e6 <z_prf+0x79e>
   113e2:	2f48      	cmp	r7, #72	; 0x48
   113e4:	d007      	beq.n	113f6 <z_prf+0x7ae>
					*va_arg(vargs, int *) = count;
   113e6:	9a01      	ldr	r2, [sp, #4]
   113e8:	601a      	str	r2, [r3, #0]
					break;
   113ea:	e001      	b.n	113f0 <z_prf+0x7a8>
					*va_arg(vargs, short *) = count;
   113ec:	9a01      	ldr	r2, [sp, #4]
   113ee:	801a      	strh	r2, [r3, #0]
				continue;
   113f0:	464e      	mov	r6, r9
   113f2:	9a08      	ldr	r2, [sp, #32]
   113f4:	e430      	b.n	10c58 <z_prf+0x10>
					*va_arg(vargs, char *) = count;
   113f6:	9a01      	ldr	r2, [sp, #4]
   113f8:	701a      	strb	r2, [r3, #0]
					break;
   113fa:	e7f9      	b.n	113f0 <z_prf+0x7a8>
				val = (uintptr_t) va_arg(vargs, void *);
   113fc:	46b1      	mov	r9, r6
		*buf++ = '0';
   113fe:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16);
   11402:	2210      	movs	r2, #16
   11404:	f859 1b04 	ldr.w	r1, [r9], #4
   11408:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
		*buf++ = '0';
   1140c:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
   11410:	f013 fa2b 	bl	2486a <_to_x>
				prefix = 2;
   11414:	2702      	movs	r7, #2
	return len + (buf - buf0);
   11416:	1c86      	adds	r6, r0, #2
				break;
   11418:	e51e      	b.n	10e58 <z_prf+0x210>
					if (cptr[clen] == '\0') {
   1141a:	5d9a      	ldrb	r2, [r3, r6]
   1141c:	2a00      	cmp	r2, #0
   1141e:	d04a      	beq.n	114b6 <z_prf+0x86e>
				for (clen = 0; clen < precision; clen++) {
   11420:	3601      	adds	r6, #1
   11422:	e52e      	b.n	10e82 <z_prf+0x23a>
	if (alt_form) {
   11424:	ac1b      	add	r4, sp, #108	; 0x6c
	return (buf - buf0) + _to_x(buf, value, 8);
   11426:	2208      	movs	r2, #8
   11428:	4620      	mov	r0, r4
   1142a:	f013 fa1e 	bl	2486a <_to_x>
   1142e:	ae1b      	add	r6, sp, #108	; 0x6c
   11430:	1ba6      	subs	r6, r4, r6
   11432:	4406      	add	r6, r0
			prefix = 0;
   11434:	2700      	movs	r7, #0
   11436:	e50f      	b.n	10e58 <z_prf+0x210>
		*buf++ = '0';
   11438:	f10d 046d 	add.w	r4, sp, #109	; 0x6d
   1143c:	e7f3      	b.n	11426 <z_prf+0x7de>
				} else if (c == 'u') {
   1143e:	2c75      	cmp	r4, #117	; 0x75
   11440:	d105      	bne.n	1144e <z_prf+0x806>
	return _to_x(buf, value, 10);
   11442:	220a      	movs	r2, #10
   11444:	a81b      	add	r0, sp, #108	; 0x6c
   11446:	f013 fa10 	bl	2486a <_to_x>
   1144a:	4606      	mov	r6, r0
   1144c:	e7f2      	b.n	11434 <z_prf+0x7ec>
	if (alt_form) {
   1144e:	f1bb 0f00 	cmp.w	fp, #0
   11452:	d012      	beq.n	1147a <z_prf+0x832>
		*buf++ = '0';
   11454:	f647 0330 	movw	r3, #30768	; 0x7830
		*buf++ = 'x';
   11458:	f10d 086e 	add.w	r8, sp, #110	; 0x6e
		*buf++ = '0';
   1145c:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
   11460:	2210      	movs	r2, #16
   11462:	4640      	mov	r0, r8
   11464:	f013 fa01 	bl	2486a <_to_x>
	if (prefix == 'X') {
   11468:	2c58      	cmp	r4, #88	; 0x58
   1146a:	d009      	beq.n	11480 <z_prf+0x838>
	return len + (buf - buf0);
   1146c:	ae1b      	add	r6, sp, #108	; 0x6c
   1146e:	eba8 0606 	sub.w	r6, r8, r6
   11472:	4406      	add	r6, r0
						prefix = 2;
   11474:	ea4f 074b 	mov.w	r7, fp, lsl #1
   11478:	e4ee      	b.n	10e58 <z_prf+0x210>
	if (alt_form) {
   1147a:	f10d 086c 	add.w	r8, sp, #108	; 0x6c
   1147e:	e7ef      	b.n	11460 <z_prf+0x818>
   11480:	aa1b      	add	r2, sp, #108	; 0x6c
		if (*buf >= 'a' && *buf <= 'z') {
   11482:	f812 3b01 	ldrb.w	r3, [r2], #1
   11486:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   1148a:	2919      	cmp	r1, #25
   1148c:	d803      	bhi.n	11496 <z_prf+0x84e>
			*buf += 'A' - 'a';
   1148e:	3b20      	subs	r3, #32
   11490:	f802 3c01 	strb.w	r3, [r2, #-1]
   11494:	e7f5      	b.n	11482 <z_prf+0x83a>
	} while (*buf++);
   11496:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   1149a:	2b00      	cmp	r3, #0
   1149c:	d1f1      	bne.n	11482 <z_prf+0x83a>
   1149e:	e7e5      	b.n	1146c <z_prf+0x824>
				PUTC('%');
   114a0:	9903      	ldr	r1, [sp, #12]
   114a2:	4620      	mov	r0, r4
   114a4:	f7ff bbe1 	b.w	10c6a <z_prf+0x22>
				count++;
   114a8:	9b01      	ldr	r3, [sp, #4]
   114aa:	3301      	adds	r3, #1
				count += 2;
   114ac:	9301      	str	r3, [sp, #4]
				continue;
   114ae:	46b1      	mov	r9, r6
   114b0:	e79e      	b.n	113f0 <z_prf+0x7a8>
					prefix = 1;
   114b2:	2701      	movs	r7, #1
   114b4:	e4d0      	b.n	10e58 <z_prf+0x210>
   114b6:	4615      	mov	r5, r2
   114b8:	e4e8      	b.n	10e8c <z_prf+0x244>
			cptr = buf;
   114ba:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = 0;
   114bc:	2200      	movs	r2, #0
   114be:	e4f7      	b.n	10eb0 <z_prf+0x268>
   114c0:	ab1b      	add	r3, sp, #108	; 0x6c
   114c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   114c4:	e4f4      	b.n	10eb0 <z_prf+0x268>
   114c6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
					PUTC(' ');
   114ca:	9903      	ldr	r1, [sp, #12]
   114cc:	9b02      	ldr	r3, [sp, #8]
   114ce:	2020      	movs	r0, #32
   114d0:	4798      	blx	r3
   114d2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   114d6:	3001      	adds	r0, #1
   114d8:	f43f abcc 	beq.w	10c74 <z_prf+0x2c>
				while (width-- > 0) {
   114dc:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
   114e0:	d2f1      	bcs.n	114c6 <z_prf+0x87e>
				count += width;
   114e2:	9901      	ldr	r1, [sp, #4]
   114e4:	4421      	add	r1, r4
   114e6:	9101      	str	r1, [sp, #4]
				while (width-- > 0) {
   114e8:	4654      	mov	r4, sl
   114ea:	e4eb      	b.n	10ec4 <z_prf+0x27c>
   114ec:	46a2      	mov	sl, r4
   114ee:	e7f5      	b.n	114dc <z_prf+0x894>
   114f0:	33333332 	.word	0x33333332
				PUTC(*cptr++);
   114f4:	f813 0b01 	ldrb.w	r0, [r3], #1
   114f8:	9903      	ldr	r1, [sp, #12]
   114fa:	9309      	str	r3, [sp, #36]	; 0x24
   114fc:	9b02      	ldr	r3, [sp, #8]
   114fe:	920a      	str	r2, [sp, #40]	; 0x28
   11500:	4798      	blx	r3
   11502:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   11506:	3001      	adds	r0, #1
   11508:	f47f acde 	bne.w	10ec8 <z_prf+0x280>
   1150c:	f7ff bbb2 	b.w	10c74 <z_prf+0x2c>
				PUTC('0');
   11510:	9903      	ldr	r1, [sp, #12]
   11512:	2030      	movs	r0, #48	; 0x30
   11514:	9b02      	ldr	r3, [sp, #8]
   11516:	9209      	str	r2, [sp, #36]	; 0x24
   11518:	4798      	blx	r3
   1151a:	3001      	adds	r0, #1
   1151c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1151e:	f47f acd6 	bne.w	10ece <z_prf+0x286>
   11522:	f7ff bba7 	b.w	10c74 <z_prf+0x2c>
					PUTC(c);
   11526:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
   1152a:	4798      	blx	r3
   1152c:	3001      	adds	r0, #1
   1152e:	f43f aba1 	beq.w	10c74 <z_prf+0x2c>
					c = *++cptr;
   11532:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
   11536:	e4d6      	b.n	10ee6 <z_prf+0x29e>
					PUTC('0');
   11538:	9903      	ldr	r1, [sp, #12]
   1153a:	2030      	movs	r0, #48	; 0x30
   1153c:	9b02      	ldr	r3, [sp, #8]
   1153e:	4798      	blx	r3
   11540:	3001      	adds	r0, #1
   11542:	f47f acd8 	bne.w	10ef6 <z_prf+0x2ae>
   11546:	f7ff bb95 	b.w	10c74 <z_prf+0x2c>
					PUTC('0');
   1154a:	9903      	ldr	r1, [sp, #12]
   1154c:	2030      	movs	r0, #48	; 0x30
   1154e:	9b02      	ldr	r3, [sp, #8]
   11550:	4798      	blx	r3
   11552:	3001      	adds	r0, #1
   11554:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   11558:	f47f ace7 	bne.w	10f2a <z_prf+0x2e2>
   1155c:	f7ff bb8a 	b.w	10c74 <z_prf+0x2c>
					PUTC(c);
   11560:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
   11564:	4798      	blx	r3
   11566:	3001      	adds	r0, #1
   11568:	f43f ab84 	beq.w	10c74 <z_prf+0x2c>
					c = *++cptr;
   1156c:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
   11570:	e4e5      	b.n	10f3e <z_prf+0x2f6>
					PUTC('0');
   11572:	9903      	ldr	r1, [sp, #12]
   11574:	2030      	movs	r0, #48	; 0x30
   11576:	9b02      	ldr	r3, [sp, #8]
   11578:	4798      	blx	r3
   1157a:	3001      	adds	r0, #1
   1157c:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   11580:	f47f ace8 	bne.w	10f54 <z_prf+0x30c>
   11584:	f7ff bb76 	b.w	10c74 <z_prf+0x2c>
				PUTC(*cptr++);
   11588:	9903      	ldr	r1, [sp, #12]
   1158a:	f81a 0b01 	ldrb.w	r0, [sl], #1
   1158e:	9b02      	ldr	r3, [sp, #8]
   11590:	4798      	blx	r3
   11592:	3001      	adds	r0, #1
   11594:	f43f ab6e 	beq.w	10c74 <z_prf+0x2c>
   11598:	eba6 030a 	sub.w	r3, r6, sl
			while (clen-- > 0) {
   1159c:	2b00      	cmp	r3, #0
   1159e:	dcf3      	bgt.n	11588 <z_prf+0x940>
			count += clen;
   115a0:	9b01      	ldr	r3, [sp, #4]
   115a2:	9a06      	ldr	r2, [sp, #24]
			if (width > 0) {
   115a4:	2c00      	cmp	r4, #0
			count += clen;
   115a6:	4413      	add	r3, r2
   115a8:	9301      	str	r3, [sp, #4]
			if (width > 0) {
   115aa:	f77f af21 	ble.w	113f0 <z_prf+0x7a8>
   115ae:	4625      	mov	r5, r4
   115b0:	e006      	b.n	115c0 <z_prf+0x978>
					PUTC(' ');
   115b2:	9903      	ldr	r1, [sp, #12]
   115b4:	2020      	movs	r0, #32
   115b6:	9b02      	ldr	r3, [sp, #8]
   115b8:	4798      	blx	r3
   115ba:	3001      	adds	r0, #1
   115bc:	f43f ab5a 	beq.w	10c74 <z_prf+0x2c>
				while (width-- > 0) {
   115c0:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
   115c4:	d2f5      	bcs.n	115b2 <z_prf+0x96a>
				count += width;
   115c6:	9b01      	ldr	r3, [sp, #4]
   115c8:	4423      	add	r3, r4
   115ca:	9301      	str	r3, [sp, #4]
   115cc:	e710      	b.n	113f0 <z_prf+0x7a8>
   115ce:	bf00      	nop

000115d0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   115d0:	4b01      	ldr	r3, [pc, #4]	; (115d8 <__stdout_hook_install+0x8>)
   115d2:	6018      	str	r0, [r3, #0]
}
   115d4:	4770      	bx	lr
   115d6:	bf00      	nop
   115d8:	2002d3ec 	.word	0x2002d3ec

000115dc <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
   115dc:	b40c      	push	{r2, r3}
   115de:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   115e0:	b909      	cbnz	r1, 115e6 <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
   115e2:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
   115e6:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
   115ea:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   115ec:	9a06      	ldr	r2, [sp, #24]
   115ee:	a902      	add	r1, sp, #8
   115f0:	4805      	ldr	r0, [pc, #20]	; (11608 <snprintf+0x2c>)
	va_start(vargs, format);
   115f2:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   115f4:	f7ff fb28 	bl	10c48 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
   115f8:	2200      	movs	r2, #0
   115fa:	9b02      	ldr	r3, [sp, #8]
   115fc:	701a      	strb	r2, [r3, #0]
	return r;
}
   115fe:	b005      	add	sp, #20
   11600:	f85d eb04 	ldr.w	lr, [sp], #4
   11604:	b002      	add	sp, #8
   11606:	4770      	bx	lr
   11608:	0002495b 	.word	0x0002495b

0001160c <sprintf>:

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
   1160c:	b40e      	push	{r1, r2, r3}
   1160e:	b50f      	push	{r0, r1, r2, r3, lr}

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   11610:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
   11614:	ab05      	add	r3, sp, #20
   11616:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
   1161a:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   1161c:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   1161e:	4806      	ldr	r0, [pc, #24]	; (11638 <sprintf+0x2c>)
   11620:	a902      	add	r1, sp, #8
	va_start(vargs, format);
   11622:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   11624:	f7ff fb10 	bl	10c48 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
   11628:	2200      	movs	r2, #0
   1162a:	9b02      	ldr	r3, [sp, #8]
   1162c:	701a      	strb	r2, [r3, #0]
	return r;
}
   1162e:	b004      	add	sp, #16
   11630:	f85d eb04 	ldr.w	lr, [sp], #4
   11634:	b003      	add	sp, #12
   11636:	4770      	bx	lr
   11638:	0002495b 	.word	0x0002495b

0001163c <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   1163c:	b538      	push	{r3, r4, r5, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   1163e:	4c07      	ldr	r4, [pc, #28]	; (1165c <net_if_init+0x20>)
   11640:	4d07      	ldr	r5, [pc, #28]	; (11660 <net_if_init+0x24>)
   11642:	42ac      	cmp	r4, r5
   11644:	d100      	bne.n	11648 <net_if_init+0xc>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   11646:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   11648:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   1164a:	681b      	ldr	r3, [r3, #0]
   1164c:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
   1164e:	b11b      	cbz	r3, 11658 <net_if_init+0x1c>
   11650:	681b      	ldr	r3, [r3, #0]
   11652:	b10b      	cbz	r3, 11658 <net_if_init+0x1c>
	api->init(iface);
   11654:	4620      	mov	r0, r4
   11656:	4798      	blx	r3
	     iface++, if_count++) {
   11658:	3420      	adds	r4, #32
   1165a:	e7f2      	b.n	11642 <net_if_init+0x6>
   1165c:	2002d600 	.word	0x2002d600
   11660:	2002d620 	.word	0x2002d620

00011664 <net_if_post_init>:

void net_if_post_init(void)
{
   11664:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   11666:	4c08      	ldr	r4, [pc, #32]	; (11688 <net_if_post_init+0x24>)
   11668:	4d08      	ldr	r5, [pc, #32]	; (1168c <net_if_post_init+0x28>)
   1166a:	42ac      	cmp	r4, r5
   1166c:	d100      	bne.n	11670 <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   1166e:	bd38      	pop	{r3, r4, r5, pc}
	return atomic_test_bit(iface->if_dev->flags, value);
   11670:	6820      	ldr	r0, [r4, #0]
   11672:	2103      	movs	r1, #3
   11674:	300c      	adds	r0, #12
   11676:	f013 f98c 	bl	24992 <atomic_test_bit>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   1167a:	b910      	cbnz	r0, 11682 <net_if_post_init+0x1e>
			net_if_up(iface);
   1167c:	4620      	mov	r0, r4
   1167e:	f013 f98e 	bl	2499e <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   11682:	3420      	adds	r4, #32
   11684:	e7f1      	b.n	1166a <net_if_post_init+0x6>
   11686:	bf00      	nop
   11688:	2002d600 	.word	0x2002d600
   1168c:	2002d620 	.word	0x2002d620

00011690 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	u16_t *w;
	u8_t i, bl, bh, longest = 1U;
	s8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   11690:	2300      	movs	r3, #0
{
   11692:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	u16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   11696:	2802      	cmp	r0, #2
{
   11698:	b089      	sub	sp, #36	; 0x24
   1169a:	4681      	mov	r9, r0
   1169c:	468a      	mov	sl, r1
   1169e:	4690      	mov	r8, r2
	unsigned char zeros[8] = { 0 };
   116a0:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (family == AF_INET6) {
   116a4:	d13c      	bne.n	11720 <z_impl_net_addr_ntop+0x90>
		addr6 = (struct in6_addr *)src;
		w = (u16_t *)addr6->s6_addr16;
   116a6:	aa06      	add	r2, sp, #24
   116a8:	4610      	mov	r0, r2
   116aa:	9104      	str	r1, [sp, #16]
{
   116ac:	4619      	mov	r1, r3
   116ae:	e006      	b.n	116be <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   116b0:	7804      	ldrb	r4, [r0, #0]
   116b2:	3101      	adds	r1, #1
   116b4:	3401      	adds	r4, #1
   116b6:	7004      	strb	r4, [r0, #0]
			for (j = i; j < 8; j++) {
   116b8:	b2cc      	uxtb	r4, r1
   116ba:	2c07      	cmp	r4, #7
   116bc:	d803      	bhi.n	116c6 <z_impl_net_addr_ntop+0x36>
				if (UNALIGNED_GET(&w[j]) != 0) {
   116be:	f83a 4011 	ldrh.w	r4, [sl, r1, lsl #1]
   116c2:	2c00      	cmp	r4, #0
   116c4:	d0f4      	beq.n	116b0 <z_impl_net_addr_ntop+0x20>
   116c6:	3301      	adds	r3, #1
		for (i = 0U; i < 8; i++) {
   116c8:	2b08      	cmp	r3, #8
   116ca:	f100 0001 	add.w	r0, r0, #1
   116ce:	d1ed      	bne.n	116ac <z_impl_net_addr_ntop+0x1c>
	s8_t pos = -1;
   116d0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1U;
   116d4:	2701      	movs	r7, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   116d6:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   116d8:	f812 1b01 	ldrb.w	r1, [r2], #1
   116dc:	42b9      	cmp	r1, r7
				longest = zeros[i];
				pos = i;
   116de:	bf88      	it	hi
   116e0:	b25e      	sxtbhi	r6, r3
		for (i = 0U; i < 8; i++) {
   116e2:	f103 0301 	add.w	r3, r3, #1
   116e6:	b2db      	uxtb	r3, r3
				pos = i;
   116e8:	bf88      	it	hi
   116ea:	460f      	movhi	r7, r1
		for (i = 0U; i < 8; i++) {
   116ec:	2b08      	cmp	r3, #8
   116ee:	d1f3      	bne.n	116d8 <z_impl_net_addr_ntop+0x48>
		len = 8;
   116f0:	9303      	str	r3, [sp, #12]
   116f2:	2f01      	cmp	r7, #1
   116f4:	f04f 033a 	mov.w	r3, #58	; 0x3a
   116f8:	bf08      	it	eq
   116fa:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
   116fe:	9302      	str	r3, [sp, #8]
	bool needcolon = false;
   11700:	2200      	movs	r2, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   11702:	4644      	mov	r4, r8
   11704:	4615      	mov	r5, r2
   11706:	9b03      	ldr	r3, [sp, #12]
   11708:	429d      	cmp	r5, r3
   1170a:	db19      	blt.n	11740 <z_impl_net_addr_ntop+0xb0>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   1170c:	4544      	cmp	r4, r8
   1170e:	d009      	beq.n	11724 <z_impl_net_addr_ntop+0x94>
		return NULL;
	}

	if (family == AF_INET) {
   11710:	2300      	movs	r3, #0
   11712:	f1b9 0f01 	cmp.w	r9, #1
		*(ptr - 1) = '\0';
   11716:	bf0c      	ite	eq
   11718:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   1171c:	7023      	strbne	r3, [r4, #0]
   1171e:	e003      	b.n	11728 <z_impl_net_addr_ntop+0x98>
	} else if (family == AF_INET) {
   11720:	2801      	cmp	r0, #1
   11722:	d005      	beq.n	11730 <z_impl_net_addr_ntop+0xa0>
		return NULL;
   11724:	f04f 0800 	mov.w	r8, #0
	}

	return dst;
}
   11728:	4640      	mov	r0, r8
   1172a:	b009      	add	sp, #36	; 0x24
   1172c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   11730:	232e      	movs	r3, #46	; 0x2e
   11732:	2204      	movs	r2, #4
	s8_t pos = -1;
   11734:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		delim = '.';
   11738:	e9cd 3202 	strd	r3, r2, [sp, #8]
	u8_t i, bl, bh, longest = 1U;
   1173c:	4607      	mov	r7, r0
   1173e:	e7df      	b.n	11700 <z_impl_net_addr_ntop+0x70>
		if (len == 4) {
   11740:	9b03      	ldr	r3, [sp, #12]
   11742:	2b04      	cmp	r3, #4
   11744:	d134      	bne.n	117b0 <z_impl_net_addr_ntop+0x120>
			value = (u32_t)addr->s4_addr[i];
   11746:	f81a 1005 	ldrb.w	r1, [sl, r5]
			if (value == 0U) {
   1174a:	b949      	cbnz	r1, 11760 <z_impl_net_addr_ntop+0xd0>
				*ptr++ = '0';
   1174c:	2330      	movs	r3, #48	; 0x30
   1174e:	4620      	mov	r0, r4
   11750:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   11754:	9b02      	ldr	r3, [sp, #8]
   11756:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   11758:	3501      	adds	r5, #1
   1175a:	b2ed      	uxtb	r5, r5
   1175c:	4604      	mov	r4, r0
   1175e:	e7d2      	b.n	11706 <z_impl_net_addr_ntop+0x76>
			l = net_value_to_udec(ptr, value, 0);
   11760:	2009      	movs	r0, #9
   11762:	f04f 0b00 	mov.w	fp, #0
   11766:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 11840 <z_impl_net_addr_ntop+0x1b0>
   1176a:	9401      	str	r4, [sp, #4]
		temp = value / divisor;
   1176c:	fbb1 fefc 	udiv	lr, r1, ip
		value = value % divisor;
   11770:	fb0c 131e 	mls	r3, ip, lr, r1
		if ((precision > i) || (temp != 0)) {
   11774:	4583      	cmp	fp, r0
		value = value % divisor;
   11776:	9305      	str	r3, [sp, #20]
		if ((precision > i) || (temp != 0)) {
   11778:	dc01      	bgt.n	1177e <z_impl_net_addr_ntop+0xee>
   1177a:	4561      	cmp	r1, ip
   1177c:	d306      	bcc.n	1178c <z_impl_net_addr_ntop+0xfc>
			*buf++ = (char) (temp + '0');
   1177e:	4683      	mov	fp, r0
   11780:	9b01      	ldr	r3, [sp, #4]
   11782:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
   11786:	f803 eb01 	strb.w	lr, [r3], #1
   1178a:	9301      	str	r3, [sp, #4]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   1178c:	230a      	movs	r3, #10
   1178e:	3801      	subs	r0, #1
   11790:	fbbc fcf3 	udiv	ip, ip, r3
   11794:	1c43      	adds	r3, r0, #1
		value = value % divisor;
   11796:	9905      	ldr	r1, [sp, #20]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   11798:	d1e8      	bne.n	1176c <z_impl_net_addr_ntop+0xdc>
	*buf = 0;
   1179a:	f04f 0300 	mov.w	r3, #0
   1179e:	9901      	ldr	r1, [sp, #4]
   117a0:	700b      	strb	r3, [r1, #0]
	return buf - start;
   117a2:	1b0b      	subs	r3, r1, r4
			ptr += l;
   117a4:	b2db      	uxtb	r3, r3
			*ptr++ = delim;
   117a6:	9902      	ldr	r1, [sp, #8]
			ptr += l;
   117a8:	18e0      	adds	r0, r4, r3
			*ptr++ = delim;
   117aa:	3001      	adds	r0, #1
   117ac:	54e1      	strb	r1, [r4, r3]
			continue;
   117ae:	e7d3      	b.n	11758 <z_impl_net_addr_ntop+0xc8>
		if (i == pos) {
   117b0:	42ae      	cmp	r6, r5
   117b2:	d10d      	bne.n	117d0 <z_impl_net_addr_ntop+0x140>
			if (needcolon || i == 0U) {
   117b4:	b902      	cbnz	r2, 117b8 <z_impl_net_addr_ntop+0x128>
   117b6:	b916      	cbnz	r6, 117be <z_impl_net_addr_ntop+0x12e>
				*ptr++ = ':';
   117b8:	233a      	movs	r3, #58	; 0x3a
   117ba:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   117be:	233a      	movs	r3, #58	; 0x3a
   117c0:	4620      	mov	r0, r4
   117c2:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   117c6:	1e7b      	subs	r3, r7, #1
   117c8:	441d      	add	r5, r3
   117ca:	b2ed      	uxtb	r5, r5
			needcolon = false;
   117cc:	2200      	movs	r2, #0
			continue;
   117ce:	e7c3      	b.n	11758 <z_impl_net_addr_ntop+0xc8>
		if (needcolon) {
   117d0:	b112      	cbz	r2, 117d8 <z_impl_net_addr_ntop+0x148>
			*ptr++ = ':';
   117d2:	233a      	movs	r3, #58	; 0x3a
   117d4:	f804 3b01 	strb.w	r3, [r4], #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   117d8:	9b04      	ldr	r3, [sp, #16]
   117da:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   117de:	021a      	lsls	r2, r3, #8
   117e0:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
   117e4:	b212      	sxth	r2, r2
		bh = value >> 8;
   117e6:	f3c2 2307 	ubfx	r3, r2, #8, #8
		bl = value & 0xff;
   117ea:	fa5f fb82 	uxtb.w	fp, r2
		if (bh) {
   117ee:	b1b3      	cbz	r3, 1181e <z_impl_net_addr_ntop+0x18e>
			if (bh > 0x0f) {
   117f0:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   117f2:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   117f4:	d90b      	bls.n	1180e <z_impl_net_addr_ntop+0x17e>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   117f6:	2300      	movs	r3, #0
   117f8:	2261      	movs	r2, #97	; 0x61
   117fa:	4620      	mov	r0, r4
   117fc:	f013 f8fe 	bl	249fc <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   11800:	2301      	movs	r3, #1
   11802:	2261      	movs	r2, #97	; 0x61
   11804:	4659      	mov	r1, fp
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   11806:	f013 f8f9 	bl	249fc <net_byte_to_hex>
		needcolon = true;
   1180a:	2201      	movs	r2, #1
   1180c:	e7a4      	b.n	11758 <z_impl_net_addr_ntop+0xc8>
				if (bh < 10) {
   1180e:	b25b      	sxtb	r3, r3
   11810:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   11812:	bf94      	ite	ls
   11814:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   11816:	3357      	addhi	r3, #87	; 0x57
   11818:	1c60      	adds	r0, r4, #1
   1181a:	7023      	strb	r3, [r4, #0]
   1181c:	e7f0      	b.n	11800 <z_impl_net_addr_ntop+0x170>
		} else if (bl > 0x0f) {
   1181e:	f1bb 0f0f 	cmp.w	fp, #15
   11822:	d903      	bls.n	1182c <z_impl_net_addr_ntop+0x19c>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   11824:	2261      	movs	r2, #97	; 0x61
   11826:	4659      	mov	r1, fp
   11828:	4620      	mov	r0, r4
   1182a:	e7ec      	b.n	11806 <z_impl_net_addr_ntop+0x176>
			if (bl < 10) {
   1182c:	b252      	sxtb	r2, r2
   1182e:	f1bb 0f09 	cmp.w	fp, #9
				*ptr++ = (char)(bl + '0');
   11832:	bf94      	ite	ls
   11834:	3230      	addls	r2, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   11836:	3257      	addhi	r2, #87	; 0x57
   11838:	1c60      	adds	r0, r4, #1
   1183a:	7022      	strb	r2, [r4, #0]
   1183c:	e7e5      	b.n	1180a <z_impl_net_addr_ntop+0x17a>
   1183e:	bf00      	nop
   11840:	3b9aca00 	.word	0x3b9aca00

00011844 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   11844:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   11846:	4b09      	ldr	r3, [pc, #36]	; (1186c <gpio_nrfx_init+0x28>)
   11848:	781a      	ldrb	r2, [r3, #0]
   1184a:	b96a      	cbnz	r2, 11868 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1184c:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   1184e:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   11850:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   11852:	2105      	movs	r1, #5
   11854:	f7fe fb7a 	bl	ff4c <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
   11858:	2031      	movs	r0, #49	; 0x31
   1185a:	f7fe fb67 	bl	ff2c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1185e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   11862:	4b03      	ldr	r3, [pc, #12]	; (11870 <gpio_nrfx_init+0x2c>)
   11864:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   11868:	2000      	movs	r0, #0
   1186a:	bd08      	pop	{r3, pc}
   1186c:	20027407 	.word	0x20027407
   11870:	40031000 	.word	0x40031000

00011874 <gpiote_pin_int_cfg>:
{
   11874:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   11876:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
   11878:	6882      	ldr	r2, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1187a:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1187c:	4c51      	ldr	r4, [pc, #324]	; (119c4 <gpiote_pin_int_cfg+0x150>)
   1187e:	7918      	ldrb	r0, [r3, #4]
   11880:	f001 031f 	and.w	r3, r1, #31
   11884:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   11888:	2000      	movs	r0, #0
   1188a:	f8d4 5304 	ldr.w	r5, [r4, #772]	; 0x304
   1188e:	b2ed      	uxtb	r5, r5
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   11890:	f500 76a2 	add.w	r6, r0, #324	; 0x144
   11894:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   11898:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1189c:	42b3      	cmp	r3, r6
   1189e:	d170      	bne.n	11982 <gpiote_pin_int_cfg+0x10e>
		    && (intenset & BIT(i))) {
   118a0:	fa25 f600 	lsr.w	r6, r5, r0
   118a4:	07f6      	lsls	r6, r6, #31
   118a6:	d56c      	bpl.n	11982 <gpiote_pin_int_cfg+0x10e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   118a8:	0085      	lsls	r5, r0, #2
   118aa:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   118ae:	f505 3544 	add.w	r5, r5, #200704	; 0x31000
   118b2:	f8d5 6510 	ldr.w	r6, [r5, #1296]	; 0x510
   118b6:	f026 0601 	bic.w	r6, r6, #1
   118ba:	f8c5 6510 	str.w	r6, [r5, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   118be:	2501      	movs	r5, #1
   118c0:	fa05 f000 	lsl.w	r0, r5, r0
    p_reg->INTENCLR = mask;
   118c4:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   118c8:	4d3f      	ldr	r5, [pc, #252]	; (119c8 <gpiote_pin_int_cfg+0x154>)
   118ca:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   118ce:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   118d2:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   118d6:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   118da:	6890      	ldr	r0, [r2, #8]
   118dc:	40c8      	lsrs	r0, r1
   118de:	f010 0001 	ands.w	r0, r0, #1
   118e2:	d04d      	beq.n	11980 <gpiote_pin_int_cfg+0x10c>
   118e4:	68d0      	ldr	r0, [r2, #12]
   118e6:	40c8      	lsrs	r0, r1
   118e8:	f010 0001 	ands.w	r0, r0, #1
   118ec:	d048      	beq.n	11980 <gpiote_pin_int_cfg+0x10c>
		if (data->trig_edge & BIT(pin)) {
   118ee:	6950      	ldr	r0, [r2, #20]
   118f0:	40c8      	lsrs	r0, r1
   118f2:	f010 0001 	ands.w	r0, r0, #1
   118f6:	d050      	beq.n	1199a <gpiote_pin_int_cfg+0x126>
			if (data->double_edge & BIT(pin)) {
   118f8:	6990      	ldr	r0, [r2, #24]
   118fa:	40c8      	lsrs	r0, r1
   118fc:	07c0      	lsls	r0, r0, #31
   118fe:	d444      	bmi.n	1198a <gpiote_pin_int_cfg+0x116>
			} else if (((data->active_level & BIT(pin)) != 0U)
   11900:	6910      	ldr	r0, [r2, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   11902:	69d2      	ldr	r2, [r2, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   11904:	40c8      	lsrs	r0, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   11906:	fa22 f101 	lsr.w	r1, r2, r1
			} else if (((data->active_level & BIT(pin)) != 0U)
   1190a:	f000 0001 	and.w	r0, r0, #1
   1190e:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   11912:	4288      	cmp	r0, r1
   11914:	bf14      	ite	ne
   11916:	2101      	movne	r1, #1
   11918:	2102      	moveq	r1, #2
   1191a:	2500      	movs	r5, #0
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   1191c:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   11920:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   11924:	f010 0003 	ands.w	r0, r0, #3
   11928:	d131      	bne.n	1198e <gpiote_pin_int_cfg+0x11a>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1192a:	00aa      	lsls	r2, r5, #2
   1192c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   11930:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   11934:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   11938:	021b      	lsls	r3, r3, #8
   1193a:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1193e:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
   11942:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   11946:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
			nrf_gpiote_event_t evt =
   1194a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1194e:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
   11952:	009b      	lsls	r3, r3, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   11954:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   11958:	b29b      	uxth	r3, r3
   1195a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1195e:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   11962:	4331      	orrs	r1, r6
   11964:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   11968:	6018      	str	r0, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1196a:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   1196e:	f043 0301 	orr.w	r3, r3, #1
   11972:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   11976:	2301      	movs	r3, #1
   11978:	fa03 f505 	lsl.w	r5, r3, r5
    p_reg->INTENSET = mask;
   1197c:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
}
   11980:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   11982:	3001      	adds	r0, #1
   11984:	2808      	cmp	r0, #8
   11986:	d183      	bne.n	11890 <gpiote_pin_int_cfg+0x1c>
   11988:	e79e      	b.n	118c8 <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1198a:	2103      	movs	r1, #3
   1198c:	e7c5      	b.n	1191a <gpiote_pin_int_cfg+0xa6>
   1198e:	3501      	adds	r5, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   11990:	2d08      	cmp	r5, #8
   11992:	d1c3      	bne.n	1191c <gpiote_pin_int_cfg+0xa8>
	return -ENODEV;
   11994:	f06f 0012 	mvn.w	r0, #18
   11998:	e7f2      	b.n	11980 <gpiote_pin_int_cfg+0x10c>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   1199a:	6913      	ldr	r3, [r2, #16]
   1199c:	69d2      	ldr	r2, [r2, #28]
   1199e:	4053      	eors	r3, r2
   119a0:	fa23 f101 	lsr.w	r1, r3, r1
		return NRF_GPIO_PIN_SENSE_HIGH;
   119a4:	f011 0f01 	tst.w	r1, #1
   119a8:	bf14      	ite	ne
   119aa:	f44f 3200 	movne.w	r2, #131072	; 0x20000
   119ae:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   119b2:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   119b6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   119ba:	4313      	orrs	r3, r2
   119bc:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
   119c0:	e7de      	b.n	11980 <gpiote_pin_int_cfg+0x10c>
   119c2:	bf00      	nop
   119c4:	40031000 	.word	0x40031000
   119c8:	40842500 	.word	0x40842500

000119cc <gpio_nrfx_config>:
{
   119cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119d0:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   119d2:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   119d4:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   119d8:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   119dc:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   119de:	d040      	beq.n	11a62 <gpio_nrfx_config+0x96>
   119e0:	dc09      	bgt.n	119f6 <gpio_nrfx_config+0x2a>
   119e2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   119e6:	d03e      	beq.n	11a66 <gpio_nrfx_config+0x9a>
   119e8:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   119ec:	d03d      	beq.n	11a6a <gpio_nrfx_config+0x9e>
   119ee:	b190      	cbz	r0, 11a16 <gpio_nrfx_config+0x4a>
		return -EINVAL;
   119f0:	f06f 0015 	mvn.w	r0, #21
   119f4:	e032      	b.n	11a5c <gpio_nrfx_config+0x90>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   119f6:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   119fa:	d038      	beq.n	11a6e <gpio_nrfx_config+0xa2>
   119fc:	dc04      	bgt.n	11a08 <gpio_nrfx_config+0x3c>
   119fe:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   11a02:	d1f5      	bne.n	119f0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   11a04:	2003      	movs	r0, #3
   11a06:	e006      	b.n	11a16 <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   11a08:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   11a0c:	d031      	beq.n	11a72 <gpio_nrfx_config+0xa6>
   11a0e:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   11a12:	d1ed      	bne.n	119f0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
   11a14:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   11a16:	f406 7740 	and.w	r7, r6, #768	; 0x300
   11a1a:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   11a1e:	d02a      	beq.n	11a76 <gpio_nrfx_config+0xaa>
		pull = NRF_GPIO_PIN_NOPULL;
   11a20:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   11a24:	4263      	negs	r3, r4
   11a26:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   11a28:	2901      	cmp	r1, #1
		from_pin = pin;
   11a2a:	bf19      	ittee	ne
   11a2c:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
   11a2e:	46a1      	movne	r9, r4
		to_pin   = 31U;
   11a30:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   11a34:	2400      	moveq	r4, #0
   11a36:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   11a3a:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   11a3e:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   11a42:	ea47 070c 	orr.w	r7, r7, ip
   11a46:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11a4a:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 11aec <gpio_nrfx_config+0x120>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   11a4e:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   11a52:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   11a56:	45a1      	cmp	r9, r4
   11a58:	d20f      	bcs.n	11a7a <gpio_nrfx_config+0xae>
	return 0;
   11a5a:	2000      	movs	r0, #0
}
   11a5c:	b003      	add	sp, #12
   11a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
   11a62:	2002      	movs	r0, #2
   11a64:	e7d7      	b.n	11a16 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
   11a66:	2001      	movs	r0, #1
   11a68:	e7d5      	b.n	11a16 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
   11a6a:	2004      	movs	r0, #4
   11a6c:	e7d3      	b.n	11a16 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
   11a6e:	2005      	movs	r0, #5
   11a70:	e7d1      	b.n	11a16 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
   11a72:	2006      	movs	r0, #6
   11a74:	e7cf      	b.n	11a16 <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
   11a76:	2303      	movs	r3, #3
   11a78:	e7d6      	b.n	11a28 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
   11a7a:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   11a7e:	6892      	ldr	r2, [r2, #8]
   11a80:	7911      	ldrb	r1, [r2, #4]
   11a82:	f004 021f 	and.w	r2, r4, #31
   11a86:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11a8a:	3280      	adds	r2, #128	; 0x80
   11a8c:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   11a90:	68a9      	ldr	r1, [r5, #8]
   11a92:	fa0b f204 	lsl.w	r2, fp, r4
   11a96:	2b00      	cmp	r3, #0
   11a98:	d025      	beq.n	11ae6 <gpio_nrfx_config+0x11a>
   11a9a:	4311      	orrs	r1, r2
   11a9c:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   11a9e:	6969      	ldr	r1, [r5, #20]
   11aa0:	06b0      	lsls	r0, r6, #26
   11aa2:	bf4c      	ite	mi
   11aa4:	4311      	orrmi	r1, r2
   11aa6:	4391      	bicpl	r1, r2
   11aa8:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
   11aaa:	69a9      	ldr	r1, [r5, #24]
   11aac:	0670      	lsls	r0, r6, #25
   11aae:	bf4c      	ite	mi
   11ab0:	4311      	orrmi	r1, r2
   11ab2:	4391      	bicpl	r1, r2
   11ab4:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
   11ab6:	6929      	ldr	r1, [r5, #16]
   11ab8:	0770      	lsls	r0, r6, #29
   11aba:	bf4c      	ite	mi
   11abc:	4311      	orrmi	r1, r2
   11abe:	4391      	bicpl	r1, r2
   11ac0:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   11ac2:	69e9      	ldr	r1, [r5, #28]
   11ac4:	0630      	lsls	r0, r6, #24
   11ac6:	bf4c      	ite	mi
   11ac8:	430a      	orrmi	r2, r1
   11aca:	ea21 0202 	bicpl.w	r2, r1, r2
   11ace:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   11ad0:	4621      	mov	r1, r4
   11ad2:	4640      	mov	r0, r8
   11ad4:	9301      	str	r3, [sp, #4]
   11ad6:	f7ff fecd 	bl	11874 <gpiote_pin_int_cfg>
		if (res != 0) {
   11ada:	2800      	cmp	r0, #0
   11adc:	d1be      	bne.n	11a5c <gpio_nrfx_config+0x90>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   11ade:	3401      	adds	r4, #1
   11ae0:	b2e4      	uxtb	r4, r4
   11ae2:	9b01      	ldr	r3, [sp, #4]
   11ae4:	e7b7      	b.n	11a56 <gpio_nrfx_config+0x8a>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   11ae6:	ea21 0102 	bic.w	r1, r1, r2
   11aea:	e7d7      	b.n	11a9c <gpio_nrfx_config+0xd0>
   11aec:	40842500 	.word	0x40842500

00011af0 <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11af0:	494f      	ldr	r1, [pc, #316]	; (11c30 <gpiote_event_handler+0x140>)
{
   11af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11af6:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
   11af8:	2d00      	cmp	r5, #0
   11afa:	d060      	beq.n	11bbe <gpiote_event_handler+0xce>
	struct gpio_nrfx_data *data = get_port_data(port);
   11afc:	4b4d      	ldr	r3, [pc, #308]	; (11c34 <gpiote_event_handler+0x144>)
	u32_t pin = 0U;
   11afe:	2600      	movs	r6, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   11b00:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
   11b02:	681b      	ldr	r3, [r3, #0]
   11b04:	f8df e138 	ldr.w	lr, [pc, #312]	; 11c40 <gpiote_event_handler+0x150>
   11b08:	689f      	ldr	r7, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   11b0a:	e9d2 0302 	ldrd	r0, r3, [r2, #8]
   11b0e:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
   11b10:	e9d2 0405 	ldrd	r0, r4, [r2, #20]
   11b14:	4320      	orrs	r0, r4
   11b16:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   11b1a:	6838      	ldr	r0, [r7, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   11b1c:	69d4      	ldr	r4, [r2, #28]
   11b1e:	6912      	ldr	r2, [r2, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   11b20:	6900      	ldr	r0, [r0, #16]
   11b22:	4054      	eors	r4, r2
   11b24:	4044      	eors	r4, r0
	u32_t bit = 1U << pin;
   11b26:	2001      	movs	r0, #1
	u32_t out = pin_states & level_pins;
   11b28:	ea23 0404 	bic.w	r4, r3, r4
	while (level_pins) {
   11b2c:	bb93      	cbnz	r3, 11b94 <gpiote_event_handler+0xa4>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   11b2e:	600b      	str	r3, [r1, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   11b30:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   11b32:	2001      	movs	r0, #1
   11b34:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   11b36:	4940      	ldr	r1, [pc, #256]	; (11c38 <gpiote_event_handler+0x148>)
   11b38:	4e40      	ldr	r6, [pc, #256]	; (11c3c <gpiote_event_handler+0x14c>)
   11b3a:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   11b3e:	fa00 fc03 	lsl.w	ip, r0, r3
   11b42:	ea1c 0f02 	tst.w	ip, r2
   11b46:	d00d      	beq.n	11b64 <gpiote_event_handler+0x74>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11b48:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   11b4c:	b152      	cbz	r2, 11b64 <gpiote_event_handler+0x74>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   11b4e:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   11b52:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   11b56:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   11b5a:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   11b5e:	fa00 f202 	lsl.w	r2, r0, r2
   11b62:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   11b64:	3301      	adds	r3, #1
   11b66:	2b08      	cmp	r3, #8
   11b68:	d1e7      	bne.n	11b3a <gpiote_event_handler+0x4a>
	if (fired_triggers[0]) {
   11b6a:	bb54      	cbnz	r4, 11bc2 <gpiote_event_handler+0xd2>
	if (port_event) {
   11b6c:	b185      	cbz	r5, 11b90 <gpiote_event_handler+0xa0>
	u32_t bit = 1U << pin;
   11b6e:	2401      	movs	r4, #1
	u32_t pin = 0U;
   11b70:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   11b72:	4b30      	ldr	r3, [pc, #192]	; (11c34 <gpiote_event_handler+0x144>)
   11b74:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 11c40 <gpiote_event_handler+0x150>
   11b78:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
   11b7a:	681b      	ldr	r3, [r3, #0]
   11b7c:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   11b7e:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
   11b82:	400b      	ands	r3, r1
	out &= ~data->trig_edge & ~data->double_edge;
   11b84:	e9d2 1005 	ldrd	r1, r0, [r2, #20]
   11b88:	4301      	orrs	r1, r0
   11b8a:	ea23 0301 	bic.w	r3, r3, r1
	while (level_pins) {
   11b8e:	bb7b      	cbnz	r3, 11bf0 <gpiote_event_handler+0x100>
}
   11b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   11b94:	4203      	tst	r3, r0
   11b96:	d00f      	beq.n	11bb8 <gpiote_event_handler+0xc8>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11b98:	f897 c004 	ldrb.w	ip, [r7, #4]
   11b9c:	f006 021f 	and.w	r2, r6, #31
   11ba0:	ea42 124c 	orr.w	r2, r2, ip, lsl #5
   11ba4:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   11ba8:	f8d2 c200 	ldr.w	ip, [r2, #512]	; 0x200
			level_pins &= ~bit;
   11bac:	ea23 0300 	bic.w	r3, r3, r0
   11bb0:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11bb4:	f8c2 c200 	str.w	ip, [r2, #512]	; 0x200
		++pin;
   11bb8:	3601      	adds	r6, #1
		bit <<= 1;
   11bba:	0040      	lsls	r0, r0, #1
   11bbc:	e7b6      	b.n	11b2c <gpiote_event_handler+0x3c>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   11bbe:	462c      	mov	r4, r5
   11bc0:	e7b6      	b.n	11b30 <gpiote_event_handler+0x40>
	struct gpio_nrfx_data *data = get_port_data(port);
   11bc2:	4f1c      	ldr	r7, [pc, #112]	; (11c34 <gpiote_event_handler+0x144>)
   11bc4:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   11bc8:	f8d8 1000 	ldr.w	r1, [r8]
   11bcc:	2900      	cmp	r1, #0
   11bce:	d0cd      	beq.n	11b6c <gpiote_event_handler+0x7c>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11bd0:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
   11bd2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   11bd6:	688a      	ldr	r2, [r1, #8]
   11bd8:	4023      	ands	r3, r4
   11bda:	4213      	tst	r3, r2
   11bdc:	d003      	beq.n	11be6 <gpiote_event_handler+0xf6>
			cb->handler(port, cb, pins);
   11bde:	684b      	ldr	r3, [r1, #4]
   11be0:	4622      	mov	r2, r4
   11be2:	4638      	mov	r0, r7
   11be4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   11be6:	2e00      	cmp	r6, #0
   11be8:	d0c0      	beq.n	11b6c <gpiote_event_handler+0x7c>
   11bea:	4631      	mov	r1, r6
   11bec:	6836      	ldr	r6, [r6, #0]
   11bee:	e7f0      	b.n	11bd2 <gpiote_event_handler+0xe2>
		if (level_pins & bit) {
   11bf0:	421c      	tst	r4, r3
   11bf2:	d01a      	beq.n	11c2a <gpiote_event_handler+0x13a>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11bf4:	7930      	ldrb	r0, [r6, #4]
   11bf6:	f005 011f 	and.w	r1, r5, #31
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   11bfa:	69d7      	ldr	r7, [r2, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11bfc:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   11c00:	6910      	ldr	r0, [r2, #16]
   11c02:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
   11c06:	4078      	eors	r0, r7
   11c08:	40e8      	lsrs	r0, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   11c0a:	f010 0f01 	tst.w	r0, #1
   11c0e:	bf14      	ite	ne
   11c10:	f44f 3700 	movne.w	r7, #131072	; 0x20000
   11c14:	f44f 3740 	moveq.w	r7, #196608	; 0x30000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   11c18:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
			level_pins &= ~bit;
   11c1c:	ea23 0304 	bic.w	r3, r3, r4
   11c20:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11c24:	4338      	orrs	r0, r7
   11c26:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
		++pin;
   11c2a:	3501      	adds	r5, #1
		bit <<= 1;
   11c2c:	0064      	lsls	r4, r4, #1
   11c2e:	e7ae      	b.n	11b8e <gpiote_event_handler+0x9e>
   11c30:	4003117c 	.word	0x4003117c
   11c34:	2002d500 	.word	0x2002d500
   11c38:	40031000 	.word	0x40031000
   11c3c:	40031100 	.word	0x40031100
   11c40:	40842500 	.word	0x40842500

00011c44 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   11c44:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   11c46:	794b      	ldrb	r3, [r1, #5]
   11c48:	2b01      	cmp	r3, #1
   11c4a:	d029      	beq.n	11ca0 <uarte_nrfx_configure+0x5c>
   11c4c:	2b03      	cmp	r3, #3
   11c4e:	d124      	bne.n	11c9a <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   11c50:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   11c52:	798b      	ldrb	r3, [r1, #6]
   11c54:	2b03      	cmp	r3, #3
   11c56:	d120      	bne.n	11c9a <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   11c58:	79cc      	ldrb	r4, [r1, #7]
   11c5a:	b12c      	cbz	r4, 11c68 <uarte_nrfx_configure+0x24>
   11c5c:	2c01      	cmp	r4, #1
   11c5e:	d11c      	bne.n	11c9a <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
   11c60:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   11c62:	689b      	ldr	r3, [r3, #8]
   11c64:	791b      	ldrb	r3, [r3, #4]
   11c66:	b1c3      	cbz	r3, 11c9a <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   11c68:	790a      	ldrb	r2, [r1, #4]
   11c6a:	b112      	cbz	r2, 11c72 <uarte_nrfx_configure+0x2e>
   11c6c:	2a02      	cmp	r2, #2
   11c6e:	d114      	bne.n	11c9a <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   11c70:	220e      	movs	r2, #14
	switch (baudrate) {
   11c72:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
   11c76:	6805      	ldr	r5, [r0, #0]
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   11c78:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   11c7a:	68ad      	ldr	r5, [r5, #8]
	switch (baudrate) {
   11c7c:	42bb      	cmp	r3, r7
	return config->uarte_regs;
   11c7e:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   11c80:	d062      	beq.n	11d48 <uarte_nrfx_configure+0x104>
   11c82:	d829      	bhi.n	11cd8 <uarte_nrfx_configure+0x94>
   11c84:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   11c88:	d061      	beq.n	11d4e <uarte_nrfx_configure+0x10a>
   11c8a:	d814      	bhi.n	11cb6 <uarte_nrfx_configure+0x72>
   11c8c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   11c90:	d05f      	beq.n	11d52 <uarte_nrfx_configure+0x10e>
   11c92:	d807      	bhi.n	11ca4 <uarte_nrfx_configure+0x60>
   11c94:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   11c98:	d05e      	beq.n	11d58 <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
   11c9a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   11c9e:	e052      	b.n	11d46 <uarte_nrfx_configure+0x102>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   11ca0:	2600      	movs	r6, #0
   11ca2:	e7d6      	b.n	11c52 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   11ca4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   11ca8:	d059      	beq.n	11d5e <uarte_nrfx_configure+0x11a>
   11caa:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   11cae:	d1f4      	bne.n	11c9a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   11cb0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   11cb4:	e03c      	b.n	11d30 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   11cb6:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   11cba:	d053      	beq.n	11d64 <uarte_nrfx_configure+0x120>
   11cbc:	d804      	bhi.n	11cc8 <uarte_nrfx_configure+0x84>
   11cbe:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11cc2:	d1ea      	bne.n	11c9a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   11cc4:	4b32      	ldr	r3, [pc, #200]	; (11d90 <uarte_nrfx_configure+0x14c>)
   11cc6:	e033      	b.n	11d30 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   11cc8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   11ccc:	d04c      	beq.n	11d68 <uarte_nrfx_configure+0x124>
   11cce:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   11cd2:	d1e2      	bne.n	11c9a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   11cd4:	4b2f      	ldr	r3, [pc, #188]	; (11d94 <uarte_nrfx_configure+0x150>)
   11cd6:	e02b      	b.n	11d30 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   11cd8:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   11cdc:	d046      	beq.n	11d6c <uarte_nrfx_configure+0x128>
   11cde:	d812      	bhi.n	11d06 <uarte_nrfx_configure+0xc2>
   11ce0:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   11ce4:	42bb      	cmp	r3, r7
   11ce6:	d044      	beq.n	11d72 <uarte_nrfx_configure+0x12e>
   11ce8:	d805      	bhi.n	11cf6 <uarte_nrfx_configure+0xb2>
   11cea:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   11cee:	d1d4      	bne.n	11c9a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   11cf0:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   11cf4:	e01c      	b.n	11d30 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   11cf6:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   11cfa:	d03d      	beq.n	11d78 <uarte_nrfx_configure+0x134>
   11cfc:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   11d00:	d1cb      	bne.n	11c9a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   11d02:	4b25      	ldr	r3, [pc, #148]	; (11d98 <uarte_nrfx_configure+0x154>)
   11d04:	e014      	b.n	11d30 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   11d06:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   11d0a:	d038      	beq.n	11d7e <uarte_nrfx_configure+0x13a>
   11d0c:	d808      	bhi.n	11d20 <uarte_nrfx_configure+0xdc>
   11d0e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   11d12:	d037      	beq.n	11d84 <uarte_nrfx_configure+0x140>
   11d14:	4f21      	ldr	r7, [pc, #132]	; (11d9c <uarte_nrfx_configure+0x158>)
   11d16:	42bb      	cmp	r3, r7
   11d18:	d1bf      	bne.n	11c9a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   11d1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   11d1e:	e007      	b.n	11d30 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   11d20:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   11d24:	d031      	beq.n	11d8a <uarte_nrfx_configure+0x146>
   11d26:	4f1e      	ldr	r7, [pc, #120]	; (11da0 <uarte_nrfx_configure+0x15c>)
   11d28:	42bb      	cmp	r3, r7
   11d2a:	d1b6      	bne.n	11c9a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   11d2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   11d30:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   11d34:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   11d36:	6883      	ldr	r3, [r0, #8]
   11d38:	4322      	orrs	r2, r4
   11d3a:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   11d3c:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   11d40:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   11d44:	2000      	movs	r0, #0
}
   11d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   11d48:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   11d4c:	e7f0      	b.n	11d30 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   11d4e:	4b15      	ldr	r3, [pc, #84]	; (11da4 <uarte_nrfx_configure+0x160>)
   11d50:	e7ee      	b.n	11d30 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00027000;
   11d52:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   11d56:	e7eb      	b.n	11d30 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
   11d58:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   11d5c:	e7e8      	b.n	11d30 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   11d5e:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   11d62:	e7e5      	b.n	11d30 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   11d64:	4b10      	ldr	r3, [pc, #64]	; (11da8 <uarte_nrfx_configure+0x164>)
   11d66:	e7e3      	b.n	11d30 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   11d68:	4b10      	ldr	r3, [pc, #64]	; (11dac <uarte_nrfx_configure+0x168>)
   11d6a:	e7e1      	b.n	11d30 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   11d6c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   11d70:	e7de      	b.n	11d30 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   11d72:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   11d76:	e7db      	b.n	11d30 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   11d78:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   11d7c:	e7d8      	b.n	11d30 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   11d7e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   11d82:	e7d5      	b.n	11d30 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   11d84:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   11d88:	e7d2      	b.n	11d30 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   11d8a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   11d8e:	e7cf      	b.n	11d30 <uarte_nrfx_configure+0xec>
   11d90:	00275000 	.word	0x00275000
   11d94:	0075c000 	.word	0x0075c000
   11d98:	013a9000 	.word	0x013a9000
   11d9c:	0003d090 	.word	0x0003d090
   11da0:	000f4240 	.word	0x000f4240
   11da4:	0013b000 	.word	0x0013b000
   11da8:	003af000 	.word	0x003af000
   11dac:	004ea000 	.word	0x004ea000

00011db0 <uarte_instance_init.constprop.4>:
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(struct device *dev,
   11db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11db4:	2501      	movs	r5, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11db6:	f04f 0e03 	mov.w	lr, #3
   11dba:	f04f 0c00 	mov.w	ip, #0
	return dev->config->config_info;
   11dbe:	6803      	ldr	r3, [r0, #0]
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_gpio_pin_write(config->pseltxd, 1);
   11dc0:	680a      	ldr	r2, [r1, #0]
	return config->uarte_regs;
   11dc2:	689b      	ldr	r3, [r3, #8]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11dc4:	fa05 f702 	lsl.w	r7, r5, r2
   11dc8:	681c      	ldr	r4, [r3, #0]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   11dca:	4b1f      	ldr	r3, [pc, #124]	; (11e48 <uarte_instance_init.constprop.4+0x98>)
	struct uarte_nrfx_data *data = get_dev_data(dev);
   11dcc:	6886      	ldr	r6, [r0, #8]
   11dce:	609f      	str	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11dd0:	f102 0780 	add.w	r7, r2, #128	; 0x80
   11dd4:	f843 e027 	str.w	lr, [r3, r7, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
   11dd8:	684f      	ldr	r7, [r1, #4]
   11dda:	f107 0880 	add.w	r8, r7, #128	; 0x80
   11dde:	f843 c028 	str.w	ip, [r3, r8, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   11de2:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   11de6:	f8c4 7514 	str.w	r7, [r4, #1300]	; 0x514

	nrf_uarte_txrx_pins_set(uarte,
				config->pseltxd,
				config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   11dea:	688f      	ldr	r7, [r1, #8]
   11dec:	1c7a      	adds	r2, r7, #1
   11dee:	d010      	beq.n	11e12 <uarte_instance_init.constprop.4+0x62>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   11df0:	68ca      	ldr	r2, [r1, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   11df2:	1c51      	adds	r1, r2, #1
   11df4:	d00d      	beq.n	11e12 <uarte_instance_init.constprop.4+0x62>
   11df6:	f102 0180 	add.w	r1, r2, #128	; 0x80
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11dfa:	4095      	lsls	r5, r2
    p_reg->OUTSET = set_mask;
   11dfc:	609d      	str	r5, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11dfe:	f843 e021 	str.w	lr, [r3, r1, lsl #2]
   11e02:	f107 0180 	add.w	r1, r7, #128	; 0x80
   11e06:	f843 c021 	str.w	ip, [r3, r1, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   11e0a:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   11e0e:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
		nrf_uarte_hwfc_pins_set(uarte,
					config->pselrts,
					config->pselcts);
	}

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   11e12:	4631      	mov	r1, r6
   11e14:	f7ff ff16 	bl	11c44 <uarte_nrfx_configure>
	if (err) {
   11e18:	b9a0      	cbnz	r0, 11e44 <uarte_instance_init.constprop.4+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   11e1a:	2308      	movs	r3, #8
   11e1c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   11e20:	f106 030c 	add.w	r3, r6, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11e24:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   11e28:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   11e2c:	2301      	movs	r3, #1
		/* Set ENDTX event by requesting fake (zero-length) transfer.
		 * Pointer to RAM variable (data->tx_buffer) is set because
		 * otherwise such operation may result in HardFault or RAM
		 * corruption.
		 */
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   11e2e:	68b2      	ldr	r2, [r6, #8]
   11e30:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   11e34:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11e36:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   11e38:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   11e3c:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11e40:	60a3      	str	r3, [r4, #8]
   11e42:	60e3      	str	r3, [r4, #12]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
   11e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11e48:	40842500 	.word	0x40842500

00011e4c <uarte_2_init>:
	#if defined(DT_NORDIC_NRF_UARTE_UART_2_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_2_CTS_PIN)
		#define UARTE_2_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(2);
   11e4c:	b530      	push	{r4, r5, lr}
   11e4e:	b085      	sub	sp, #20
   11e50:	466c      	mov	r4, sp
   11e52:	4605      	mov	r5, r0
   11e54:	4b08      	ldr	r3, [pc, #32]	; (11e78 <uarte_2_init+0x2c>)
   11e56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   11e58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   11e5c:	2200      	movs	r2, #0
   11e5e:	2101      	movs	r1, #1
   11e60:	200a      	movs	r0, #10
   11e62:	f7fe f873 	bl	ff4c <z_arm_irq_priority_set>
   11e66:	200a      	movs	r0, #10
   11e68:	f7fe f860 	bl	ff2c <arch_irq_enable>
   11e6c:	4621      	mov	r1, r4
   11e6e:	4628      	mov	r0, r5
   11e70:	f7ff ff9e 	bl	11db0 <uarte_instance_init.constprop.4>
   11e74:	b005      	add	sp, #20
   11e76:	bd30      	pop	{r4, r5, pc}
   11e78:	0002654c 	.word	0x0002654c

00011e7c <uarte_0_init>:
	UART_NRF_UARTE_DEVICE(0);
   11e7c:	b530      	push	{r4, r5, lr}
   11e7e:	b085      	sub	sp, #20
   11e80:	466c      	mov	r4, sp
   11e82:	4605      	mov	r5, r0
   11e84:	4b08      	ldr	r3, [pc, #32]	; (11ea8 <uarte_0_init+0x2c>)
   11e86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   11e88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   11e8c:	2200      	movs	r2, #0
   11e8e:	2101      	movs	r1, #1
   11e90:	2008      	movs	r0, #8
   11e92:	f7fe f85b 	bl	ff4c <z_arm_irq_priority_set>
   11e96:	2008      	movs	r0, #8
   11e98:	f7fe f848 	bl	ff2c <arch_irq_enable>
   11e9c:	4621      	mov	r1, r4
   11e9e:	4628      	mov	r0, r5
   11ea0:	f7ff ff86 	bl	11db0 <uarte_instance_init.constprop.4>
   11ea4:	b005      	add	sp, #20
   11ea6:	bd30      	pop	{r4, r5, pc}
   11ea8:	0002655c 	.word	0x0002655c

00011eac <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   11eac:	2200      	movs	r2, #0
{
   11eae:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   11eb0:	4611      	mov	r1, r2
   11eb2:	202a      	movs	r0, #42	; 0x2a
   11eb4:	f7fe f84a 	bl	ff4c <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
   11eb8:	f002 fae2 	bl	14480 <bsd_init>
   11ebc:	4b01      	ldr	r3, [pc, #4]	; (11ec4 <_bsdlib_init+0x18>)
   11ebe:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   11ec0:	2000      	movs	r0, #0
   11ec2:	bd08      	pop	{r3, pc}
   11ec4:	2002036c 	.word	0x2002036c

00011ec8 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   11ec8:	b570      	push	{r4, r5, r6, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   11eca:	4b0d      	ldr	r3, [pc, #52]	; (11f00 <thread_monitor_entry_get+0x38>)
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   11ecc:	4c0d      	ldr	r4, [pc, #52]	; (11f04 <thread_monitor_entry_get+0x3c>)
		entry_age = rpc_event_cnt - entry->cnt;
   11ece:	681a      	ldr	r2, [r3, #0]
   11ed0:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   11ed2:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   11ed4:	4623      	mov	r3, r4
		if (entry->id == id) {
   11ed6:	6819      	ldr	r1, [r3, #0]
   11ed8:	4281      	cmp	r1, r0
   11eda:	d00e      	beq.n	11efa <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   11edc:	b151      	cbz	r1, 11ef4 <thread_monitor_entry_get+0x2c>
		entry_age = rpc_event_cnt - entry->cnt;
   11ede:	6859      	ldr	r1, [r3, #4]
   11ee0:	1a51      	subs	r1, r2, r1
		if (entry_age > oldest_entry_age) {
   11ee2:	42b1      	cmp	r1, r6
   11ee4:	bfc4      	itt	gt
   11ee6:	461c      	movgt	r4, r3
   11ee8:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   11eea:	3d01      	subs	r5, #1
   11eec:	f103 0308 	add.w	r3, r3, #8
   11ef0:	d1f1      	bne.n	11ed6 <thread_monitor_entry_get+0xe>
   11ef2:	4623      	mov	r3, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   11ef4:	3a01      	subs	r2, #1
	new_entry->id = id;
   11ef6:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   11ef8:	605a      	str	r2, [r3, #4]

	return new_entry;
}
   11efa:	4618      	mov	r0, r3
   11efc:	bd70      	pop	{r4, r5, r6, pc}
   11efe:	bf00      	nop
   11f00:	20020370 	.word	0x20020370
   11f04:	2002037c 	.word	0x2002037c

00011f08 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   11f08:	4668      	mov	r0, sp
   11f0a:	f020 0107 	bic.w	r1, r0, #7
   11f0e:	468d      	mov	sp, r1
   11f10:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11f12:	4b0d      	ldr	r3, [pc, #52]	; (11f48 <rpc_proxy_irq_handler+0x40>)
   11f14:	e8d3 2fef 	ldaex	r2, [r3]
   11f18:	3201      	adds	r2, #1
   11f1a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   11f1e:	2900      	cmp	r1, #0
   11f20:	d1f8      	bne.n	11f14 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   11f22:	f00c f99f 	bl	1e264 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   11f26:	4b09      	ldr	r3, [pc, #36]	; (11f4c <rpc_proxy_irq_handler+0x44>)
   11f28:	681c      	ldr	r4, [r3, #0]
   11f2a:	b93c      	cbnz	r4, 11f3c <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   11f2c:	f7fe f826 	bl	ff7c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   11f30:	f7fd ff66 	bl	fe00 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   11f34:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   11f38:	4685      	mov	sp, r0
   11f3a:	4770      	bx	lr
	z_impl_k_sem_give(sem);
   11f3c:	1d20      	adds	r0, r4, #4
   11f3e:	f010 fcfb 	bl	22938 <z_impl_k_sem_give>
   11f42:	6824      	ldr	r4, [r4, #0]
	return node->next;
   11f44:	e7f1      	b.n	11f2a <rpc_proxy_irq_handler+0x22>
   11f46:	bf00      	nop
   11f48:	20020370 	.word	0x20020370
   11f4c:	20020374 	.word	0x20020374

00011f50 <bsd_os_timedwait>:
{
   11f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f54:	4688      	mov	r8, r1
   11f56:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
   11f58:	f013 fff4 	bl	25f44 <z_impl_k_uptime_get>
	if (*timeout == 0) {
   11f5c:	f8d8 3000 	ldr.w	r3, [r8]
   11f60:	4606      	mov	r6, r0
   11f62:	2b00      	cmp	r3, #0
   11f64:	460f      	mov	r7, r1
   11f66:	d103      	bne.n	11f70 <bsd_os_timedwait+0x20>
	z_impl_k_yield();
   11f68:	f010 fc6c 	bl	22844 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   11f6c:	203c      	movs	r0, #60	; 0x3c
   11f6e:	e06e      	b.n	1204e <bsd_os_timedwait+0xfe>
		*timeout = K_FOREVER;
   11f70:	bfbc      	itt	lt
   11f72:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   11f76:	f8c8 3000 	strlt.w	r3, [r8]
	z_impl_k_sem_init(sem, initial_count, limit);
   11f7a:	2201      	movs	r2, #1
   11f7c:	2100      	movs	r1, #0
   11f7e:	a802      	add	r0, sp, #8
   11f80:	f013 ff38 	bl	25df4 <z_impl_k_sem_init>
   11f84:	f10d 0a04 	add.w	sl, sp, #4
   11f88:	f04f 0320 	mov.w	r3, #32
   11f8c:	f3ef 8b11 	mrs	fp, BASEPRI
   11f90:	f383 8811 	msr	BASEPRI, r3
   11f94:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   11f98:	f010 fcc8 	bl	2292c <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   11f9c:	f7ff ff94 	bl	11ec8 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   11fa0:	4933      	ldr	r1, [pc, #204]	; (12070 <bsd_os_timedwait+0x120>)
   11fa2:	6843      	ldr	r3, [r0, #4]
   11fa4:	680a      	ldr	r2, [r1, #0]
   11fa6:	4689      	mov	r9, r1
   11fa8:	4293      	cmp	r3, r2
   11faa:	f04f 0300 	mov.w	r3, #0
   11fae:	d108      	bne.n	11fc2 <bsd_os_timedwait+0x72>
	parent->next = child;
   11fb0:	9301      	str	r3, [sp, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   11fb2:	4b30      	ldr	r3, [pc, #192]	; (12074 <bsd_os_timedwait+0x124>)
   11fb4:	685a      	ldr	r2, [r3, #4]
   11fb6:	2a00      	cmp	r2, #0
   11fb8:	d14c      	bne.n	12054 <bsd_os_timedwait+0x104>
	list->head = node;
   11fba:	e9c3 aa00 	strd	sl, sl, [r3]
		allow_to_sleep = true;
   11fbe:	2301      	movs	r3, #1
   11fc0:	e000      	b.n	11fc4 <bsd_os_timedwait+0x74>
	entry->cnt = rpc_event_cnt;
   11fc2:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   11fc4:	f38b 8811 	msr	BASEPRI, fp
   11fc8:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   11fcc:	2b00      	cmp	r3, #0
   11fce:	d03d      	beq.n	1204c <bsd_os_timedwait+0xfc>
	(void)k_sem_take(&thread.sem, *timeout);
   11fd0:	f8d8 1000 	ldr.w	r1, [r8]
	return z_impl_k_sem_take(sem, timeout);
   11fd4:	a802      	add	r0, sp, #8
   11fd6:	f010 fcdb 	bl	22990 <z_impl_k_sem_take>
	__asm__ volatile(
   11fda:	f04f 0320 	mov.w	r3, #32
   11fde:	f3ef 8b11 	mrs	fp, BASEPRI
   11fe2:	f383 8811 	msr	BASEPRI, r3
   11fe6:	f3bf 8f6f 	isb	sy
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11fea:	2000      	movs	r0, #0
   11fec:	4b21      	ldr	r3, [pc, #132]	; (12074 <bsd_os_timedwait+0x124>)
   11fee:	681a      	ldr	r2, [r3, #0]
   11ff0:	b152      	cbz	r2, 12008 <bsd_os_timedwait+0xb8>
   11ff2:	4552      	cmp	r2, sl
   11ff4:	d139      	bne.n	1206a <bsd_os_timedwait+0x11a>
Z_GENLIST_REMOVE(slist, snode)
   11ff6:	9901      	ldr	r1, [sp, #4]
   11ff8:	bb88      	cbnz	r0, 1205e <bsd_os_timedwait+0x10e>
   11ffa:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   11ffc:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   11ffe:	4290      	cmp	r0, r2
   12000:	d100      	bne.n	12004 <bsd_os_timedwait+0xb4>
	list->tail = node;
   12002:	6059      	str	r1, [r3, #4]
	parent->next = child;
   12004:	2300      	movs	r3, #0
   12006:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   12008:	f010 fc90 	bl	2292c <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1200c:	f7ff ff5c 	bl	11ec8 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   12010:	f8d9 3000 	ldr.w	r3, [r9]
   12014:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   12016:	f38b 8811 	msr	BASEPRI, fp
   1201a:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
   1201e:	f8d8 9000 	ldr.w	r9, [r8]
   12022:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   12026:	d011      	beq.n	1204c <bsd_os_timedwait+0xfc>
	return z_impl_k_uptime_get();
   12028:	f013 ff8c 	bl	25f44 <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
   1202c:	eb16 0209 	adds.w	r2, r6, r9
   12030:	eb47 73e9 	adc.w	r3, r7, r9, asr #31
   12034:	1a14      	subs	r4, r2, r0
   12036:	eb63 0501 	sbc.w	r5, r3, r1
	*timeout = remaining > 0 ? remaining : 0;
   1203a:	2c00      	cmp	r4, #0
   1203c:	f175 0300 	sbcs.w	r3, r5, #0
   12040:	bfb8      	it	lt
   12042:	2400      	movlt	r4, #0
   12044:	f8c8 4000 	str.w	r4, [r8]
	if (*timeout == 0) {
   12048:	2c00      	cmp	r4, #0
   1204a:	d08f      	beq.n	11f6c <bsd_os_timedwait+0x1c>
	return 0;
   1204c:	2000      	movs	r0, #0
}
   1204e:	b009      	add	sp, #36	; 0x24
   12050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12054:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   12058:	f8c3 a004 	str.w	sl, [r3, #4]
   1205c:	e7af      	b.n	11fbe <bsd_os_timedwait+0x6e>
	parent->next = child;
   1205e:	6001      	str	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   12060:	6859      	ldr	r1, [r3, #4]
   12062:	4291      	cmp	r1, r2
	list->tail = node;
   12064:	bf08      	it	eq
   12066:	6058      	streq	r0, [r3, #4]
   12068:	e7cc      	b.n	12004 <bsd_os_timedwait+0xb4>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1206a:	4610      	mov	r0, r2
   1206c:	6812      	ldr	r2, [r2, #0]
   1206e:	e7bf      	b.n	11ff0 <bsd_os_timedwait+0xa0>
   12070:	20020370 	.word	0x20020370
   12074:	20020374 	.word	0x20020374

00012078 <bsd_os_errno_set>:
	switch (err_code) {
   12078:	282d      	cmp	r0, #45	; 0x2d
{
   1207a:	b510      	push	{r4, lr}
   1207c:	4604      	mov	r4, r0
	switch (err_code) {
   1207e:	d00c      	beq.n	1209a <bsd_os_errno_set+0x22>
   12080:	dc38      	bgt.n	120f4 <bsd_os_errno_set+0x7c>
   12082:	280e      	cmp	r0, #14
   12084:	d009      	beq.n	1209a <bsd_os_errno_set+0x22>
   12086:	dc11      	bgt.n	120ac <bsd_os_errno_set+0x34>
   12088:	2808      	cmp	r0, #8
   1208a:	d006      	beq.n	1209a <bsd_os_errno_set+0x22>
   1208c:	dc09      	bgt.n	120a2 <bsd_os_errno_set+0x2a>
   1208e:	2802      	cmp	r0, #2
   12090:	d003      	beq.n	1209a <bsd_os_errno_set+0x22>
   12092:	2805      	cmp	r0, #5
   12094:	d001      	beq.n	1209a <bsd_os_errno_set+0x22>
   12096:	2801      	cmp	r0, #1
   12098:	d119      	bne.n	120ce <bsd_os_errno_set+0x56>
		errno = ETIMEDOUT;
   1209a:	f012 ff29 	bl	24ef0 <z_errno>
   1209e:	6004      	str	r4, [r0, #0]
}
   120a0:	bd10      	pop	{r4, pc}
	switch (err_code) {
   120a2:	280c      	cmp	r0, #12
   120a4:	d0f9      	beq.n	1209a <bsd_os_errno_set+0x22>
   120a6:	dc57      	bgt.n	12158 <bsd_os_errno_set+0xe0>
   120a8:	2809      	cmp	r0, #9
   120aa:	e7f5      	b.n	12098 <bsd_os_errno_set+0x20>
   120ac:	2828      	cmp	r0, #40	; 0x28
   120ae:	f000 8083 	beq.w	121b8 <bsd_os_errno_set+0x140>
   120b2:	dc05      	bgt.n	120c0 <bsd_os_errno_set+0x48>
   120b4:	2818      	cmp	r0, #24
   120b6:	d0f0      	beq.n	1209a <bsd_os_errno_set+0x22>
   120b8:	2823      	cmp	r0, #35	; 0x23
   120ba:	d052      	beq.n	12162 <bsd_os_errno_set+0xea>
   120bc:	2816      	cmp	r0, #22
   120be:	e7eb      	b.n	12098 <bsd_os_errno_set+0x20>
   120c0:	282a      	cmp	r0, #42	; 0x2a
   120c2:	d0ea      	beq.n	1209a <bsd_os_errno_set+0x22>
   120c4:	db51      	blt.n	1216a <bsd_os_errno_set+0xf2>
   120c6:	282b      	cmp	r0, #43	; 0x2b
   120c8:	d0e7      	beq.n	1209a <bsd_os_errno_set+0x22>
   120ca:	282c      	cmp	r0, #44	; 0x2c
   120cc:	d051      	beq.n	12172 <bsd_os_errno_set+0xfa>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   120ce:	2301      	movs	r3, #1
   120d0:	f04f 0200 	mov.w	r2, #0
   120d4:	493a      	ldr	r1, [pc, #232]	; (121c0 <bsd_os_errno_set+0x148>)
   120d6:	f363 0207 	bfi	r2, r3, #0, #8
   120da:	4b3a      	ldr	r3, [pc, #232]	; (121c4 <bsd_os_errno_set+0x14c>)
   120dc:	483a      	ldr	r0, [pc, #232]	; (121c8 <bsd_os_errno_set+0x150>)
   120de:	1a5b      	subs	r3, r3, r1
   120e0:	08db      	lsrs	r3, r3, #3
   120e2:	f363 128f 	bfi	r2, r3, #6, #10
   120e6:	4621      	mov	r1, r4
   120e8:	f011 fe40 	bl	23d6c <log_1>
		errno = 0xBAADBAAD;
   120ec:	f012 ff00 	bl	24ef0 <z_errno>
   120f0:	4b36      	ldr	r3, [pc, #216]	; (121cc <bsd_os_errno_set+0x154>)
   120f2:	e034      	b.n	1215e <bsd_os_errno_set+0xe6>
	switch (err_code) {
   120f4:	283c      	cmp	r0, #60	; 0x3c
   120f6:	d0d0      	beq.n	1209a <bsd_os_errno_set+0x22>
   120f8:	dc15      	bgt.n	12126 <bsd_os_errno_set+0xae>
   120fa:	2833      	cmp	r0, #51	; 0x33
   120fc:	d0cd      	beq.n	1209a <bsd_os_errno_set+0x22>
   120fe:	dc05      	bgt.n	1210c <bsd_os_errno_set+0x94>
   12100:	2830      	cmp	r0, #48	; 0x30
   12102:	d0ca      	beq.n	1209a <bsd_os_errno_set+0x22>
   12104:	2832      	cmp	r0, #50	; 0x32
   12106:	d038      	beq.n	1217a <bsd_os_errno_set+0x102>
   12108:	282f      	cmp	r0, #47	; 0x2f
   1210a:	e7c5      	b.n	12098 <bsd_os_errno_set+0x20>
   1210c:	2836      	cmp	r0, #54	; 0x36
   1210e:	d0c4      	beq.n	1209a <bsd_os_errno_set+0x22>
   12110:	dc01      	bgt.n	12116 <bsd_os_errno_set+0x9e>
   12112:	2834      	cmp	r0, #52	; 0x34
   12114:	e7c0      	b.n	12098 <bsd_os_errno_set+0x20>
   12116:	2838      	cmp	r0, #56	; 0x38
   12118:	d0bf      	beq.n	1209a <bsd_os_errno_set+0x22>
   1211a:	2839      	cmp	r0, #57	; 0x39
   1211c:	d1d7      	bne.n	120ce <bsd_os_errno_set+0x56>
		errno = ENOTCONN;
   1211e:	f012 fee7 	bl	24ef0 <z_errno>
   12122:	2339      	movs	r3, #57	; 0x39
   12124:	e01b      	b.n	1215e <bsd_os_errno_set+0xe6>
	switch (err_code) {
   12126:	287d      	cmp	r0, #125	; 0x7d
   12128:	d033      	beq.n	12192 <bsd_os_errno_set+0x11a>
   1212a:	dc09      	bgt.n	12140 <bsd_os_errno_set+0xc8>
   1212c:	2870      	cmp	r0, #112	; 0x70
   1212e:	d028      	beq.n	12182 <bsd_os_errno_set+0x10a>
   12130:	2873      	cmp	r0, #115	; 0x73
   12132:	d02a      	beq.n	1218a <bsd_os_errno_set+0x112>
   12134:	2869      	cmp	r0, #105	; 0x69
   12136:	d1ca      	bne.n	120ce <bsd_os_errno_set+0x56>
		errno = ENOBUFS;
   12138:	f012 feda 	bl	24ef0 <z_errno>
   1213c:	2337      	movs	r3, #55	; 0x37
   1213e:	e00e      	b.n	1215e <bsd_os_errno_set+0xe6>
	switch (err_code) {
   12140:	287f      	cmp	r0, #127	; 0x7f
   12142:	d02f      	beq.n	121a4 <bsd_os_errno_set+0x12c>
   12144:	db29      	blt.n	1219a <bsd_os_errno_set+0x122>
   12146:	2880      	cmp	r0, #128	; 0x80
   12148:	d031      	beq.n	121ae <bsd_os_errno_set+0x136>
   1214a:	2881      	cmp	r0, #129	; 0x81
   1214c:	d1bf      	bne.n	120ce <bsd_os_errno_set+0x56>
		errno = EKEYREJECTED;
   1214e:	f012 fecf 	bl	24ef0 <z_errno>
   12152:	f240 73d4 	movw	r3, #2004	; 0x7d4
   12156:	e002      	b.n	1215e <bsd_os_errno_set+0xe6>
		errno = EACCES;
   12158:	f012 feca 	bl	24ef0 <z_errno>
   1215c:	230d      	movs	r3, #13
		errno = 0xBAADBAAD;
   1215e:	6003      	str	r3, [r0, #0]
}
   12160:	e79e      	b.n	120a0 <bsd_os_errno_set+0x28>
		errno = EAGAIN;
   12162:	f012 fec5 	bl	24ef0 <z_errno>
   12166:	230b      	movs	r3, #11
   12168:	e7f9      	b.n	1215e <bsd_os_errno_set+0xe6>
		errno = EPROTOTYPE;
   1216a:	f012 fec1 	bl	24ef0 <z_errno>
   1216e:	2329      	movs	r3, #41	; 0x29
   12170:	e7f5      	b.n	1215e <bsd_os_errno_set+0xe6>
		errno = ESOCKTNOSUPPORT;
   12172:	f012 febd 	bl	24ef0 <z_errno>
   12176:	232c      	movs	r3, #44	; 0x2c
   12178:	e7f1      	b.n	1215e <bsd_os_errno_set+0xe6>
		errno = ENETDOWN;
   1217a:	f012 feb9 	bl	24ef0 <z_errno>
   1217e:	233e      	movs	r3, #62	; 0x3e
   12180:	e7ed      	b.n	1215e <bsd_os_errno_set+0xe6>
		errno = EHOSTDOWN;
   12182:	f012 feb5 	bl	24ef0 <z_errno>
   12186:	2343      	movs	r3, #67	; 0x43
   12188:	e7e9      	b.n	1215e <bsd_os_errno_set+0xe6>
		errno = EINPROGRESS;
   1218a:	f012 feb1 	bl	24ef0 <z_errno>
   1218e:	2344      	movs	r3, #68	; 0x44
   12190:	e7e5      	b.n	1215e <bsd_os_errno_set+0xe6>
		errno = ECANCELED;
   12192:	f012 fead 	bl	24ef0 <z_errno>
   12196:	2348      	movs	r3, #72	; 0x48
   12198:	e7e1      	b.n	1215e <bsd_os_errno_set+0xe6>
		errno = ENOKEY;
   1219a:	f012 fea9 	bl	24ef0 <z_errno>
   1219e:	f240 73d1 	movw	r3, #2001	; 0x7d1
   121a2:	e7dc      	b.n	1215e <bsd_os_errno_set+0xe6>
		errno = EKEYEXPIRED;
   121a4:	f012 fea4 	bl	24ef0 <z_errno>
   121a8:	f240 73d2 	movw	r3, #2002	; 0x7d2
   121ac:	e7d7      	b.n	1215e <bsd_os_errno_set+0xe6>
		errno = EKEYREVOKED;
   121ae:	f012 fe9f 	bl	24ef0 <z_errno>
   121b2:	f240 73d3 	movw	r3, #2003	; 0x7d3
   121b6:	e7d2      	b.n	1215e <bsd_os_errno_set+0xe6>
		errno = EMSGSIZE;
   121b8:	f012 fe9a 	bl	24ef0 <z_errno>
   121bc:	2324      	movs	r3, #36	; 0x24
   121be:	e7ce      	b.n	1215e <bsd_os_errno_set+0xe6>
   121c0:	000264bc 	.word	0x000264bc
   121c4:	000264dc 	.word	0x000264dc
   121c8:	000289b4 	.word	0x000289b4
   121cc:	baadbaad 	.word	0xbaadbaad

000121d0 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   121d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   121d4:	4b01      	ldr	r3, [pc, #4]	; (121dc <bsd_os_application_irq_set+0xc>)
   121d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   121da:	4770      	bx	lr
   121dc:	e000e100 	.word	0xe000e100

000121e0 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   121e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   121e4:	4b01      	ldr	r3, [pc, #4]	; (121ec <bsd_os_application_irq_clear+0xc>)
   121e6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   121ea:	4770      	bx	lr
   121ec:	e000e100 	.word	0xe000e100

000121f0 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   121f0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   121f4:	4b01      	ldr	r3, [pc, #4]	; (121fc <bsd_os_trace_irq_set+0xc>)
   121f6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   121fa:	4770      	bx	lr
   121fc:	e000e100 	.word	0xe000e100

00012200 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12200:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   12204:	4b01      	ldr	r3, [pc, #4]	; (1220c <bsd_os_trace_irq_clear+0xc>)
   12206:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1220a:	4770      	bx	lr
   1220c:	e000e100 	.word	0xe000e100

00012210 <trace_uart_init>:
			   rpc_proxy_irq_handler, UNUSED_FLAGS);
	irq_enable(BSD_APPLICATION_IRQ);
}

void trace_uart_init(void)
{
   12210:	b500      	push	{lr}
   12212:	b089      	sub	sp, #36	; 0x24
#ifdef CONFIG_BSD_LIBRARY_TRACE_ENABLED
	/* UART pins are defined in "nrf9160_pca10090.dts". */
	const nrfx_uarte_config_t config = {
   12214:	2218      	movs	r2, #24
   12216:	2100      	movs	r1, #0
   12218:	a802      	add	r0, sp, #8
   1221a:	f012 fb04 	bl	24826 <memset>
   1221e:	2301      	movs	r3, #1
   12220:	9301      	str	r3, [sp, #4]
   12222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12226:	e9cd 3303 	strd	r3, r3, [sp, #12]
   1222a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1222e:	9306      	str	r3, [sp, #24]
   12230:	2307      	movs	r3, #7
		.p_context = NULL,
	};

	/* Initialize nrfx UARTE driver in blocking mode. */
	/* TODO: use UARTE in non-blocking mode with IRQ handler. */
	nrfx_uarte_init(&uarte_inst, &config, NULL);
   12232:	2200      	movs	r2, #0
   12234:	a901      	add	r1, sp, #4
   12236:	4804      	ldr	r0, [pc, #16]	; (12248 <trace_uart_init+0x38>)
	const nrfx_uarte_config_t config = {
   12238:	f88d 301c 	strb.w	r3, [sp, #28]
	nrfx_uarte_init(&uarte_inst, &config, NULL);
   1223c:	f00f fba2 	bl	21984 <nrfx_uarte_init>
#endif
}
   12240:	b009      	add	sp, #36	; 0x24
   12242:	f85d fb04 	ldr.w	pc, [sp], #4
   12246:	bf00      	nop
   12248:	00026708 	.word	0x00026708

0001224c <bsd_os_init>:

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   1224c:	b508      	push	{r3, lr}
	list->head = NULL;
   1224e:	2300      	movs	r3, #0
   12250:	4a08      	ldr	r2, [pc, #32]	; (12274 <bsd_os_init+0x28>)
	list->tail = NULL;
   12252:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12256:	4a08      	ldr	r2, [pc, #32]	; (12278 <bsd_os_init+0x2c>)
   12258:	e8d2 1fef 	ldaex	r1, [r2]
   1225c:	e8c2 3fe0 	stlex	r0, r3, [r2]
   12260:	2800      	cmp	r0, #0
   12262:	d1f9      	bne.n	12258 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   12264:	f012 fe6f 	bl	24f46 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
   12268:	f7ff ffd2 	bl	12210 <trace_uart_init>
	trace_task_create();
}
   1226c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   12270:	f012 be5e 	b.w	24f30 <trace_task_create>
   12274:	20020374 	.word	0x20020374
   12278:	20020370 	.word	0x20020370

0001227c <bsd_os_trace_put>:

int32_t bsd_os_trace_put(const uint8_t * const data, uint32_t len)
{
   1227c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12280:	4607      	mov	r7, r0
   12282:	460d      	mov	r5, r1
#ifdef CONFIG_BSD_LIBRARY_TRACE_ENABLED
	/* Max DMA transfers are 255 bytes.
	 * Split RAM buffer into smaller chunks
	 * to be transferred using DMA.
	 */
	u32_t remaining_bytes = len;
   12284:	460c      	mov	r4, r1

	while (remaining_bytes) {
		u8_t transfer_len = MIN(remaining_bytes, UINT8_MAX);
		u32_t idx = len - remaining_bytes;

		nrfx_uarte_tx(&uarte_inst, &data[idx], transfer_len);
   12286:	f8df 8024 	ldr.w	r8, [pc, #36]	; 122ac <bsd_os_trace_put+0x30>
	while (remaining_bytes) {
   1228a:	b914      	cbnz	r4, 12292 <bsd_os_trace_put+0x16>
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   1228c:	4620      	mov	r0, r4
   1228e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		u8_t transfer_len = MIN(remaining_bytes, UINT8_MAX);
   12292:	2cff      	cmp	r4, #255	; 0xff
   12294:	4626      	mov	r6, r4
   12296:	bf28      	it	cs
   12298:	26ff      	movcs	r6, #255	; 0xff
		u32_t idx = len - remaining_bytes;
   1229a:	1b29      	subs	r1, r5, r4
		nrfx_uarte_tx(&uarte_inst, &data[idx], transfer_len);
   1229c:	4632      	mov	r2, r6
   1229e:	4439      	add	r1, r7
   122a0:	4640      	mov	r0, r8
   122a2:	f00f fc03 	bl	21aac <nrfx_uarte_tx>
		remaining_bytes -= transfer_len;
   122a6:	1ba4      	subs	r4, r4, r6
   122a8:	e7ef      	b.n	1228a <bsd_os_trace_put+0xe>
   122aa:	bf00      	nop
   122ac:	00026708 	.word	0x00026708

000122b0 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   122b0:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   122b4:	d03c      	beq.n	12330 <z_to_nrf_optname+0x80>
   122b6:	dc04      	bgt.n	122c2 <z_to_nrf_optname+0x12>
   122b8:	2801      	cmp	r0, #1
   122ba:	d044      	beq.n	12346 <z_to_nrf_optname+0x96>
			break;
		}
		break;

	default:
		retval = -1;
   122bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		break;
	}

	return retval;
}
   122c0:	4770      	bx	lr
	switch (z_in_level) {
   122c2:	f240 2302 	movw	r3, #514	; 0x202
   122c6:	4298      	cmp	r0, r3
   122c8:	d052      	beq.n	12370 <z_to_nrf_optname+0xc0>
   122ca:	f240 2303 	movw	r3, #515	; 0x203
   122ce:	4298      	cmp	r0, r3
   122d0:	d1f4      	bne.n	122bc <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
   122d2:	3901      	subs	r1, #1
   122d4:	2913      	cmp	r1, #19
   122d6:	d8f1      	bhi.n	122bc <z_to_nrf_optname+0xc>
   122d8:	a301      	add	r3, pc, #4	; (adr r3, 122e0 <z_to_nrf_optname+0x30>)
   122da:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   122de:	bf00      	nop
   122e0:	0001237d 	.word	0x0001237d
   122e4:	00012341 	.word	0x00012341
   122e8:	00012361 	.word	0x00012361
   122ec:	00012353 	.word	0x00012353
   122f0:	00012365 	.word	0x00012365
   122f4:	00012369 	.word	0x00012369
   122f8:	0001236d 	.word	0x0001236d
   122fc:	000122bd 	.word	0x000122bd
   12300:	000122bd 	.word	0x000122bd
   12304:	000122bd 	.word	0x000122bd
   12308:	000122bd 	.word	0x000122bd
   1230c:	000122bd 	.word	0x000122bd
   12310:	000122bd 	.word	0x000122bd
   12314:	000122bd 	.word	0x000122bd
   12318:	000122bd 	.word	0x000122bd
   1231c:	000122bd 	.word	0x000122bd
   12320:	000122bd 	.word	0x000122bd
   12324:	000122bd 	.word	0x000122bd
   12328:	000122bd 	.word	0x000122bd
   1232c:	00012357 	.word	0x00012357
		switch (z_in_optname) {
   12330:	3901      	subs	r1, #1
   12332:	2905      	cmp	r1, #5
   12334:	d8c2      	bhi.n	122bc <z_to_nrf_optname+0xc>
   12336:	e8df f001 	tbb	[pc, r1]
   1233a:	1503      	.short	0x1503
   1233c:	210c1917 	.word	0x210c1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   12340:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   12342:	6013      	str	r3, [r2, #0]
   12344:	e00a      	b.n	1235c <z_to_nrf_optname+0xac>
		switch (z_in_optname) {
   12346:	2914      	cmp	r1, #20
   12348:	d005      	beq.n	12356 <z_to_nrf_optname+0xa6>
   1234a:	2919      	cmp	r1, #25
   1234c:	d005      	beq.n	1235a <z_to_nrf_optname+0xaa>
   1234e:	2904      	cmp	r1, #4
   12350:	d1b4      	bne.n	122bc <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   12352:	2304      	movs	r3, #4
   12354:	e7f5      	b.n	12342 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   12356:	2314      	movs	r3, #20
   12358:	e7f3      	b.n	12342 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   1235a:	6011      	str	r1, [r2, #0]
	int retval = 0;
   1235c:	2000      	movs	r0, #0
			break;
   1235e:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   12360:	2303      	movs	r3, #3
   12362:	e7ee      	b.n	12342 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   12364:	2305      	movs	r3, #5
   12366:	e7ec      	b.n	12342 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   12368:	2306      	movs	r3, #6
   1236a:	e7ea      	b.n	12342 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   1236c:	2307      	movs	r3, #7
   1236e:	e7e8      	b.n	12342 <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   12370:	2902      	cmp	r1, #2
   12372:	d0e5      	beq.n	12340 <z_to_nrf_optname+0x90>
   12374:	2903      	cmp	r1, #3
   12376:	d0f3      	beq.n	12360 <z_to_nrf_optname+0xb0>
   12378:	2901      	cmp	r1, #1
   1237a:	d19f      	bne.n	122bc <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   1237c:	2301      	movs	r3, #1
   1237e:	e7e0      	b.n	12342 <z_to_nrf_optname+0x92>

00012380 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   12380:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   12382:	4b03      	ldr	r3, [pc, #12]	; (12390 <nrf91_socket_iface_init+0x10>)
   12384:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   12386:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
   12388:	4802      	ldr	r0, [pc, #8]	; (12394 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   1238a:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
   1238c:	f7fd bbe2 	b.w	fb54 <socket_offload_register>
   12390:	200203cc 	.word	0x200203cc
   12394:	00026710 	.word	0x00026710

00012398 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   12398:	4b0b      	ldr	r3, [pc, #44]	; (123c8 <find_node+0x30>)
{
   1239a:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1239c:	681b      	ldr	r3, [r3, #0]
   1239e:	b153      	cbz	r3, 123b6 <find_node+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   123a0:	2500      	movs	r5, #0
   123a2:	461c      	mov	r4, r3
   123a4:	681b      	ldr	r3, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   123a6:	6866      	ldr	r6, [r4, #4]
   123a8:	428e      	cmp	r6, r1
   123aa:	d106      	bne.n	123ba <find_node+0x22>
   123ac:	68a6      	ldr	r6, [r4, #8]
   123ae:	4296      	cmp	r6, r2
   123b0:	d103      	bne.n	123ba <find_node+0x22>
			*prev_out = prev;
			return curr;
   123b2:	4623      	mov	r3, r4
			*prev_out = prev;
   123b4:	6005      	str	r5, [r0, #0]
		}
		prev = curr;
	}
	return NULL;
}
   123b6:	4618      	mov	r0, r3
   123b8:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   123ba:	2b00      	cmp	r3, #0
   123bc:	d0fb      	beq.n	123b6 <find_node+0x1e>
   123be:	4625      	mov	r5, r4
   123c0:	461c      	mov	r4, r3
   123c2:	681b      	ldr	r3, [r3, #0]
   123c4:	e7ef      	b.n	123a6 <find_node+0xe>
   123c6:	bf00      	nop
   123c8:	200203d0 	.word	0x200203d0

000123cc <module_init>:

	k_mutex_unlock(&list_mtx);
}

static int module_init(struct device *dev)
{
   123cc:	b510      	push	{r4, lr}
	list->head = NULL;
   123ce:	2400      	movs	r4, #0
   123d0:	4b03      	ldr	r3, [pc, #12]	; (123e0 <module_init+0x14>)
	ARG_UNUSED(dev);

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
   123d2:	4804      	ldr	r0, [pc, #16]	; (123e4 <module_init+0x18>)
	list->tail = NULL;
   123d4:	e9c3 4400 	strd	r4, r4, [r3]
   123d8:	f000 fcdc 	bl	12d94 <at_cmd_set_notification_handler>
	return 0;
}
   123dc:	4620      	mov	r0, r4
   123de:	bd10      	pop	{r4, pc}
   123e0:	200203d0 	.word	0x200203d0
   123e4:	000123e9 	.word	0x000123e9

000123e8 <notif_dispatch>:
{
   123e8:	b538      	push	{r3, r4, r5, lr}
   123ea:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   123ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   123f0:	480a      	ldr	r0, [pc, #40]	; (1241c <notif_dispatch+0x34>)
   123f2:	f00f ff03 	bl	221fc <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   123f6:	4b0a      	ldr	r3, [pc, #40]	; (12420 <notif_dispatch+0x38>)
   123f8:	681b      	ldr	r3, [r3, #0]
   123fa:	b923      	cbnz	r3, 12406 <notif_dispatch+0x1e>
}
   123fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_mutex_unlock(mutex);
   12400:	4806      	ldr	r0, [pc, #24]	; (1241c <notif_dispatch+0x34>)
   12402:	f00f bf6d 	b.w	222e0 <z_impl_k_mutex_unlock>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12406:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   12408:	689a      	ldr	r2, [r3, #8]
   1240a:	4629      	mov	r1, r5
   1240c:	6858      	ldr	r0, [r3, #4]
   1240e:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   12410:	2c00      	cmp	r4, #0
   12412:	d0f3      	beq.n	123fc <notif_dispatch+0x14>
   12414:	4623      	mov	r3, r4
   12416:	6824      	ldr	r4, [r4, #0]
   12418:	e7f6      	b.n	12408 <notif_dispatch+0x20>
   1241a:	bf00      	nop
   1241c:	2002d5c4 	.word	0x2002d5c4
   12420:	200203d0 	.word	0x200203d0

00012424 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   12424:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12426:	4606      	mov	r6, r0
	if (handler == NULL) {
   12428:	460c      	mov	r4, r1
   1242a:	b999      	cbnz	r1, 12454 <at_notif_register_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   1242c:	2201      	movs	r2, #1
   1242e:	f04f 0300 	mov.w	r3, #0
   12432:	491f      	ldr	r1, [pc, #124]	; (124b0 <at_notif_register_handler+0x8c>)
   12434:	f362 0307 	bfi	r3, r2, #0, #8
   12438:	4a1e      	ldr	r2, [pc, #120]	; (124b4 <at_notif_register_handler+0x90>)
   1243a:	1a52      	subs	r2, r2, r1
   1243c:	08d2      	lsrs	r2, r2, #3
   1243e:	f362 138f 	bfi	r3, r2, #6, #10
   12442:	4601      	mov	r1, r0
   12444:	4622      	mov	r2, r4
   12446:	481c      	ldr	r0, [pc, #112]	; (124b8 <at_notif_register_handler+0x94>)
   12448:	f011 fca4 	bl	23d94 <log_2>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   1244c:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   12450:	b002      	add	sp, #8
   12452:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   12454:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12458:	4818      	ldr	r0, [pc, #96]	; (124bc <at_notif_register_handler+0x98>)
   1245a:	f00f fecf 	bl	221fc <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   1245e:	4622      	mov	r2, r4
   12460:	4631      	mov	r1, r6
   12462:	a801      	add	r0, sp, #4
   12464:	f7ff ff98 	bl	12398 <find_node>
   12468:	4605      	mov	r5, r0
   1246a:	b120      	cbz	r0, 12476 <at_notif_register_handler+0x52>
	z_impl_k_mutex_unlock(mutex);
   1246c:	4813      	ldr	r0, [pc, #76]	; (124bc <at_notif_register_handler+0x98>)
   1246e:	f00f ff37 	bl	222e0 <z_impl_k_mutex_unlock>
	return 0;
   12472:	2000      	movs	r0, #0
	return append_notif_handler(context, handler);
   12474:	e7ec      	b.n	12450 <at_notif_register_handler+0x2c>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   12476:	200c      	movs	r0, #12
   12478:	f00f fe00 	bl	2207c <k_malloc>
   1247c:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   1247e:	b928      	cbnz	r0, 1248c <at_notif_register_handler+0x68>
   12480:	480e      	ldr	r0, [pc, #56]	; (124bc <at_notif_register_handler+0x98>)
   12482:	f00f ff2d 	bl	222e0 <z_impl_k_mutex_unlock>
		return -ENOBUFS;
   12486:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1248a:	e7e1      	b.n	12450 <at_notif_register_handler+0x2c>
	memset(to_ins, 0, sizeof(struct notif_handler));
   1248c:	220c      	movs	r2, #12
   1248e:	4629      	mov	r1, r5
   12490:	f012 f9c9 	bl	24826 <memset>
	to_ins->ctx     = ctx;
   12494:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   12496:	4a0a      	ldr	r2, [pc, #40]	; (124c0 <at_notif_register_handler+0x9c>)
	parent->next = child;
   12498:	601d      	str	r5, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   1249a:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   1249c:	e9c3 6401 	strd	r6, r4, [r3, #4]
   124a0:	b911      	cbnz	r1, 124a8 <at_notif_register_handler+0x84>
	list->head = node;
   124a2:	e9c2 3300 	strd	r3, r3, [r2]
   124a6:	e7e1      	b.n	1246c <at_notif_register_handler+0x48>
	parent->next = child;
   124a8:	600b      	str	r3, [r1, #0]
	list->tail = node;
   124aa:	6053      	str	r3, [r2, #4]
   124ac:	e7de      	b.n	1246c <at_notif_register_handler+0x48>
   124ae:	bf00      	nop
   124b0:	000264bc 	.word	0x000264bc
   124b4:	000264d4 	.word	0x000264d4
   124b8:	000289ed 	.word	0x000289ed
   124bc:	2002d5c4 	.word	0x2002d5c4
   124c0:	200203d0 	.word	0x200203d0

000124c4 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   124c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   124c8:	6805      	ldr	r5, [r0, #0]
{
   124ca:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   124cc:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   124ce:	782b      	ldrb	r3, [r5, #0]
{
   124d0:	4680      	mov	r8, r0
   124d2:	460f      	mov	r7, r1
   124d4:	4616      	mov	r6, r2
   124d6:	2b00      	cmp	r3, #0
   124d8:	f000 80c1 	beq.w	1265e <at_parse_process_element+0x19a>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   124dc:	4b61      	ldr	r3, [pc, #388]	; (12664 <at_parse_process_element+0x1a0>)
   124de:	781c      	ldrb	r4, [r3, #0]
   124e0:	2c05      	cmp	r4, #5
   124e2:	d110      	bne.n	12506 <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   124e4:	1c6b      	adds	r3, r5, #1
   124e6:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   124e8:	9a00      	ldr	r2, [sp, #0]
   124ea:	7810      	ldrb	r0, [r2, #0]
   124ec:	f013 f91d 	bl	2572a <is_valid_notification_char>
   124f0:	b930      	cbnz	r0, 12500 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   124f2:	1b53      	subs	r3, r2, r5

		while (isxdigit(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   124f4:	462a      	mov	r2, r5
   124f6:	4639      	mov	r1, r7
   124f8:	4630      	mov	r0, r6
   124fa:	f013 f9d6 	bl	258aa <at_params_string_put>
   124fe:	e01b      	b.n	12538 <at_parse_process_element+0x74>
			tmpstr++;
   12500:	3201      	adds	r2, #1
   12502:	9200      	str	r2, [sp, #0]
   12504:	e7f0      	b.n	124e8 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   12506:	2c06      	cmp	r4, #6
   12508:	d124      	bne.n	12554 <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   1250a:	4668      	mov	r0, sp
   1250c:	f013 f8ff 	bl	2570e <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   12510:	9a00      	ldr	r2, [sp, #0]
   12512:	7810      	ldrb	r0, [r2, #0]
   12514:	f013 f909 	bl	2572a <is_valid_notification_char>
   12518:	b9a8      	cbnz	r0, 12546 <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   1251a:	1b53      	subs	r3, r2, r5
   1251c:	4639      	mov	r1, r7
   1251e:	462a      	mov	r2, r5
   12520:	4630      	mov	r0, r6
   12522:	f013 f9c2 	bl	258aa <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   12526:	9b00      	ldr	r3, [sp, #0]
   12528:	781a      	ldrb	r2, [r3, #0]
   1252a:	2a3d      	cmp	r2, #61	; 0x3d
   1252c:	d10e      	bne.n	1254c <at_parse_process_element+0x88>
   1252e:	785a      	ldrb	r2, [r3, #1]
   12530:	2a3f      	cmp	r2, #63	; 0x3f
   12532:	d101      	bne.n	12538 <at_parse_process_element+0x74>
			tmpstr += 2;
   12534:	3302      	adds	r3, #2
			tmpstr++;
   12536:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   12538:	2000      	movs	r0, #0
	*str = tmpstr;
   1253a:	9b00      	ldr	r3, [sp, #0]
   1253c:	f8c8 3000 	str.w	r3, [r8]
}
   12540:	b023      	add	sp, #140	; 0x8c
   12542:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   12546:	3201      	adds	r2, #1
   12548:	9200      	str	r2, [sp, #0]
   1254a:	e7e1      	b.n	12510 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   1254c:	2a3f      	cmp	r2, #63	; 0x3f
   1254e:	d1f3      	bne.n	12538 <at_parse_process_element+0x74>
			tmpstr++;
   12550:	3301      	adds	r3, #1
   12552:	e7f0      	b.n	12536 <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   12554:	2c07      	cmp	r4, #7
   12556:	d103      	bne.n	12560 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   12558:	4610      	mov	r0, r2
   1255a:	f013 f981 	bl	25860 <at_params_empty_put>
   1255e:	e7eb      	b.n	12538 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   12560:	2c02      	cmp	r4, #2
   12562:	d112      	bne.n	1258a <at_parse_process_element+0xc6>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   12564:	9a00      	ldr	r2, [sp, #0]
   12566:	7810      	ldrb	r0, [r2, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   12568:	2822      	cmp	r0, #34	; 0x22
   1256a:	d003      	beq.n	12574 <at_parse_process_element+0xb0>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1256c:	b110      	cbz	r0, 12574 <at_parse_process_element+0xb0>
		       !is_lfcr(*tmpstr)) {
   1256e:	f013 f8c5 	bl	256fc <is_lfcr>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   12572:	b138      	cbz	r0, 12584 <at_parse_process_element+0xc0>
		at_params_string_put(list, index, start_ptr,
   12574:	1b53      	subs	r3, r2, r5
   12576:	4639      	mov	r1, r7
   12578:	462a      	mov	r2, r5
   1257a:	4630      	mov	r0, r6
   1257c:	f013 f995 	bl	258aa <at_params_string_put>
		tmpstr++;
   12580:	9b00      	ldr	r3, [sp, #0]
   12582:	e7e5      	b.n	12550 <at_parse_process_element+0x8c>
			tmpstr++;
   12584:	3201      	adds	r2, #1
   12586:	9200      	str	r2, [sp, #0]
   12588:	e7ec      	b.n	12564 <at_parse_process_element+0xa0>
	} else if (state == ARRAY) {
   1258a:	2c01      	cmp	r4, #1
   1258c:	d13c      	bne.n	12608 <at_parse_process_element+0x144>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   1258e:	4628      	mov	r0, r5
   12590:	220a      	movs	r2, #10
   12592:	a901      	add	r1, sp, #4
   12594:	f012 f827 	bl	245e6 <strtoul>
		tmpstr = next;
   12598:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1259a:	4d33      	ldr	r5, [pc, #204]	; (12668 <at_parse_process_element+0x1a4>)
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   1259c:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   1259e:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   125a0:	9800      	ldr	r0, [sp, #0]
   125a2:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   125a4:	2b29      	cmp	r3, #41	; 0x29
   125a6:	d028      	beq.n	125fa <at_parse_process_element+0x136>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   125a8:	b33b      	cbz	r3, 125fa <at_parse_process_element+0x136>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   125aa:	3b2c      	subs	r3, #44	; 0x2c
   125ac:	b2db      	uxtb	r3, r3
   125ae:	3001      	adds	r0, #1
   125b0:	2b11      	cmp	r3, #17
				tmparray[i++] =
   125b2:	9000      	str	r0, [sp, #0]
   125b4:	d803      	bhi.n	125be <at_parse_process_element+0xfa>
   125b6:	fa25 f303 	lsr.w	r3, r5, r3
   125ba:	07db      	lsls	r3, r3, #31
   125bc:	d408      	bmi.n	125d0 <at_parse_process_element+0x10c>
				tmpstr++;
   125be:	46a1      	mov	r9, r4
   125c0:	e004      	b.n	125cc <at_parse_process_element+0x108>
					tmpstr = next;
   125c2:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   125c4:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   125c8:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   125ca:	d015      	beq.n	125f8 <at_parse_process_element+0x134>
				tmpstr++;
   125cc:	464c      	mov	r4, r9
   125ce:	e7e7      	b.n	125a0 <at_parse_process_element+0xdc>
					(u32_t)strtoul(++tmpstr, &next, 10);
   125d0:	220a      	movs	r2, #10
   125d2:	a901      	add	r1, sp, #4
   125d4:	f012 f807 	bl	245e6 <strtoul>
				tmparray[i++] =
   125d8:	ab22      	add	r3, sp, #136	; 0x88
   125da:	f104 0901 	add.w	r9, r4, #1
   125de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   125e2:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   125e6:	9800      	ldr	r0, [sp, #0]
   125e8:	f012 f8c1 	bl	2476e <strlen>
   125ec:	4604      	mov	r4, r0
   125ee:	9801      	ldr	r0, [sp, #4]
   125f0:	f012 f8bd 	bl	2476e <strlen>
   125f4:	4284      	cmp	r4, r0
   125f6:	d1e4      	bne.n	125c2 <at_parse_process_element+0xfe>
   125f8:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(u32_t));
   125fa:	00a3      	lsls	r3, r4, #2
   125fc:	aa02      	add	r2, sp, #8
   125fe:	4639      	mov	r1, r7
   12600:	4630      	mov	r0, r6
   12602:	f013 f975 	bl	258f0 <at_params_array_put>
   12606:	e7bb      	b.n	12580 <at_parse_process_element+0xbc>
	} else if (state == NUMBER) {
   12608:	2c03      	cmp	r4, #3
   1260a:	d115      	bne.n	12638 <at_parse_process_element+0x174>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   1260c:	220a      	movs	r2, #10
   1260e:	a902      	add	r1, sp, #8
   12610:	4628      	mov	r0, r5
   12612:	f011 ffe8 	bl	245e6 <strtoul>
		tmpstr = next;
   12616:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   12618:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   1261c:	4602      	mov	r2, r0
		tmpstr = next;
   1261e:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   12620:	d205      	bcs.n	1262e <at_parse_process_element+0x16a>
			at_params_short_put(list, index, (u16_t)value);
   12622:	b282      	uxth	r2, r0
   12624:	4639      	mov	r1, r7
   12626:	4630      	mov	r0, r6
   12628:	f013 f907 	bl	2583a <at_params_short_put>
   1262c:	e784      	b.n	12538 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   1262e:	4639      	mov	r1, r7
   12630:	4630      	mov	r0, r6
   12632:	f013 f927 	bl	25884 <at_params_int_put>
   12636:	e77f      	b.n	12538 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   12638:	2c04      	cmp	r4, #4
   1263a:	f47f af7d 	bne.w	12538 <at_parse_process_element+0x74>
		while (isxdigit(*tmpstr)) {
   1263e:	9b00      	ldr	r3, [sp, #0]
   12640:	781a      	ldrb	r2, [r3, #0]

static inline int isxdigit(int a)
{
	unsigned int ua = (unsigned int)a;

	return (int)(((ua - (unsigned)'0') < 10U) ||
   12642:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   12646:	2909      	cmp	r1, #9
   12648:	d906      	bls.n	12658 <at_parse_process_element+0x194>
			((ua | 32U) - (unsigned)'a' < 6U));
   1264a:	f042 0220 	orr.w	r2, r2, #32
   1264e:	3a61      	subs	r2, #97	; 0x61
	return (int)(((ua - (unsigned)'0') < 10U) ||
   12650:	2a05      	cmp	r2, #5
   12652:	d901      	bls.n	12658 <at_parse_process_element+0x194>
		at_params_string_put(list, index, start_ptr,
   12654:	1b5b      	subs	r3, r3, r5
   12656:	e74d      	b.n	124f4 <at_parse_process_element+0x30>
			tmpstr++;
   12658:	3301      	adds	r3, #1
   1265a:	9300      	str	r3, [sp, #0]
   1265c:	e7ef      	b.n	1263e <at_parse_process_element+0x17a>
		return -1;
   1265e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12662:	e76d      	b.n	12540 <at_parse_process_element+0x7c>
   12664:	20027448 	.word	0x20027448
   12668:	00024001 	.word	0x00024001

0001266c <at_parse_detect_type>:
{
   1266c:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   1266e:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   12670:	2900      	cmp	r1, #0
{
   12672:	4605      	mov	r5, r0
   12674:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   12676:	d144      	bne.n	12702 <at_parse_detect_type+0x96>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   12678:	2a2b      	cmp	r2, #43	; 0x2b
   1267a:	4e2a      	ldr	r6, [pc, #168]	; (12724 <at_parse_detect_type+0xb8>)
   1267c:	d001      	beq.n	12682 <at_parse_detect_type+0x16>
   1267e:	2a25      	cmp	r2, #37	; 0x25
   12680:	d104      	bne.n	1268c <at_parse_detect_type+0x20>
	state = new_state;
   12682:	2305      	movs	r3, #5
   12684:	7033      	strb	r3, [r6, #0]
	return 0;
   12686:	2000      	movs	r0, #0
	*str = tmpstr;
   12688:	602c      	str	r4, [r5, #0]
}
   1268a:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   1268c:	4620      	mov	r0, r4
   1268e:	f013 f858 	bl	25742 <is_command>
   12692:	b3a0      	cbz	r0, 126fe <at_parse_detect_type+0x92>
	state = new_state;
   12694:	2306      	movs	r3, #6
   12696:	e7f5      	b.n	12684 <at_parse_detect_type+0x18>
 * @retval true  If character is number character
 * @retval false If character is something else
 */
static inline bool is_number(char chr)
{
	if (isdigit(chr) || (chr == '-') || (chr == '+')) {
   12698:	f647 71e5 	movw	r1, #32741	; 0x7fe5
   1269c:	fa21 f303 	lsr.w	r3, r1, r3
   126a0:	07d9      	lsls	r1, r3, #31
   126a2:	d50a      	bpl.n	126ba <at_parse_detect_type+0x4e>
   126a4:	2203      	movs	r2, #3
   126a6:	4b1f      	ldr	r3, [pc, #124]	; (12724 <at_parse_detect_type+0xb8>)
   126a8:	701a      	strb	r2, [r3, #0]
   126aa:	e7ec      	b.n	12686 <at_parse_detect_type+0x1a>
	if (chr == '(') {
   126ac:	2a28      	cmp	r2, #40	; 0x28
   126ae:	d104      	bne.n	126ba <at_parse_detect_type+0x4e>
   126b0:	2201      	movs	r2, #1
   126b2:	4b1c      	ldr	r3, [pc, #112]	; (12724 <at_parse_detect_type+0xb8>)
		tmpstr++;
   126b4:	4414      	add	r4, r2
	state = new_state;
   126b6:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   126b8:	e7e5      	b.n	12686 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   126ba:	4610      	mov	r0, r2
   126bc:	f013 f81e 	bl	256fc <is_lfcr>
   126c0:	b170      	cbz	r0, 126e0 <at_parse_detect_type+0x74>
   126c2:	4918      	ldr	r1, [pc, #96]	; (12724 <at_parse_detect_type+0xb8>)
   126c4:	7808      	ldrb	r0, [r1, #0]
   126c6:	2803      	cmp	r0, #3
   126c8:	d108      	bne.n	126dc <at_parse_detect_type+0x70>
		while (is_lfcr(*tmpstr)) {
   126ca:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   126ce:	f013 f815 	bl	256fc <is_lfcr>
   126d2:	2800      	cmp	r0, #0
   126d4:	d1f9      	bne.n	126ca <at_parse_detect_type+0x5e>
	state = new_state;
   126d6:	2304      	movs	r3, #4
   126d8:	700b      	strb	r3, [r1, #0]
   126da:	e7d4      	b.n	12686 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   126dc:	2807      	cmp	r0, #7
   126de:	d0d2      	beq.n	12686 <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   126e0:	3a2c      	subs	r2, #44	; 0x2c
   126e2:	b2d2      	uxtb	r2, r2
   126e4:	2a11      	cmp	r2, #17
   126e6:	d807      	bhi.n	126f8 <at_parse_detect_type+0x8c>
   126e8:	4b0f      	ldr	r3, [pc, #60]	; (12728 <at_parse_detect_type+0xbc>)
   126ea:	fa23 f202 	lsr.w	r2, r3, r2
   126ee:	07d3      	lsls	r3, r2, #31
   126f0:	d502      	bpl.n	126f8 <at_parse_detect_type+0x8c>
	state = new_state;
   126f2:	4b0c      	ldr	r3, [pc, #48]	; (12724 <at_parse_detect_type+0xb8>)
   126f4:	2207      	movs	r2, #7
   126f6:	e7d7      	b.n	126a8 <at_parse_detect_type+0x3c>
		return -1;
   126f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   126fc:	e7c5      	b.n	1268a <at_parse_detect_type+0x1e>
	state = new_state;
   126fe:	2302      	movs	r3, #2
   12700:	e7c0      	b.n	12684 <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   12702:	dd03      	ble.n	1270c <at_parse_detect_type+0xa0>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   12704:	2a2b      	cmp	r2, #43	; 0x2b
   12706:	d0f7      	beq.n	126f8 <at_parse_detect_type+0x8c>
   12708:	2a25      	cmp	r2, #37	; 0x25
   1270a:	d0f5      	beq.n	126f8 <at_parse_detect_type+0x8c>
	if (isdigit(chr) || (chr == '-') || (chr == '+')) {
   1270c:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
   12710:	b2db      	uxtb	r3, r3
   12712:	2b0e      	cmp	r3, #14
   12714:	d9c0      	bls.n	12698 <at_parse_detect_type+0x2c>
	if (chr == '"') {
   12716:	2a22      	cmp	r2, #34	; 0x22
   12718:	d1c8      	bne.n	126ac <at_parse_detect_type+0x40>
	state = new_state;
   1271a:	2202      	movs	r2, #2
   1271c:	4b01      	ldr	r3, [pc, #4]	; (12724 <at_parse_detect_type+0xb8>)
		tmpstr++;
   1271e:	3401      	adds	r4, #1
	state = new_state;
   12720:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   12722:	e7b0      	b.n	12686 <at_parse_detect_type+0x1a>
   12724:	20027448 	.word	0x20027448
   12728:	00024001 	.word	0x00024001

0001272c <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   1272c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12730:	4688      	mov	r8, r1
   12732:	4616      	mov	r6, r2
   12734:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   12736:	4604      	mov	r4, r0
   12738:	2800      	cmp	r0, #0
   1273a:	d07c      	beq.n	12836 <at_parser_max_params_from_str+0x10a>
   1273c:	2a00      	cmp	r2, #0
   1273e:	d07a      	beq.n	12836 <at_parser_max_params_from_str+0x10a>
   12740:	6853      	ldr	r3, [r2, #4]
   12742:	2b00      	cmp	r3, #0
   12744:	d077      	beq.n	12836 <at_parser_max_params_from_str+0x10a>
	state = IDLE;
   12746:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   12748:	4610      	mov	r0, r2
   1274a:	f013 f85e 	bl	2580a <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   1274e:	6832      	ldr	r2, [r6, #0]
	const char *str = *at_params_str;
   12750:	9401      	str	r4, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   12752:	4297      	cmp	r7, r2
   12754:	bf28      	it	cs
   12756:	4617      	movcs	r7, r2
	int index = 0;
   12758:	462c      	mov	r4, r5
	state = IDLE;
   1275a:	4b38      	ldr	r3, [pc, #224]	; (1283c <at_parser_max_params_from_str+0x110>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1275c:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 12840 <at_parser_max_params_from_str+0x114>
   12760:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   12762:	9a01      	ldr	r2, [sp, #4]
   12764:	7813      	ldrb	r3, [r2, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12766:	2b00      	cmp	r3, #0
   12768:	d04b      	beq.n	12802 <at_parser_max_params_from_str+0xd6>
   1276a:	42a7      	cmp	r7, r4
   1276c:	d949      	bls.n	12802 <at_parser_max_params_from_str+0xd6>
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1276e:	2b20      	cmp	r3, #32
   12770:	d002      	beq.n	12778 <at_parser_max_params_from_str+0x4c>
   12772:	3b09      	subs	r3, #9
   12774:	2b04      	cmp	r3, #4
   12776:	d801      	bhi.n	1277c <at_parser_max_params_from_str+0x50>
			str++;
   12778:	3201      	adds	r2, #1
   1277a:	9201      	str	r2, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   1277c:	4621      	mov	r1, r4
   1277e:	a801      	add	r0, sp, #4
   12780:	f7ff ff74 	bl	1266c <at_parse_detect_type>
   12784:	1c42      	adds	r2, r0, #1
   12786:	d03c      	beq.n	12802 <at_parser_max_params_from_str+0xd6>
		if (at_parse_process_element(&str, index, list) == -1) {
   12788:	4632      	mov	r2, r6
   1278a:	4621      	mov	r1, r4
   1278c:	a801      	add	r0, sp, #4
   1278e:	f7ff fe99 	bl	124c4 <at_parse_process_element>
   12792:	1c43      	adds	r3, r0, #1
   12794:	d035      	beq.n	12802 <at_parser_max_params_from_str+0xd6>
		if (is_separator(*str)) {
   12796:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   12798:	781a      	ldrb	r2, [r3, #0]
   1279a:	3a2c      	subs	r2, #44	; 0x2c
   1279c:	b2d2      	uxtb	r2, r2
   1279e:	2a11      	cmp	r2, #17
   127a0:	d81a      	bhi.n	127d8 <at_parser_max_params_from_str+0xac>
   127a2:	fa29 f202 	lsr.w	r2, r9, r2
   127a6:	07d1      	lsls	r1, r2, #31
   127a8:	d516      	bpl.n	127d8 <at_parser_max_params_from_str+0xac>
			if (is_lfcr(*(str + 1))) {
   127aa:	7858      	ldrb	r0, [r3, #1]
   127ac:	f012 ffa6 	bl	256fc <is_lfcr>
   127b0:	b178      	cbz	r0, 127d2 <at_parser_max_params_from_str+0xa6>
				index++;
   127b2:	3401      	adds	r4, #1
				if (index == max_params) {
   127b4:	42bc      	cmp	r4, r7
   127b6:	d039      	beq.n	1282c <at_parser_max_params_from_str+0x100>
				if (at_parse_detect_type(&str, index) == -1) {
   127b8:	4621      	mov	r1, r4
   127ba:	a801      	add	r0, sp, #4
   127bc:	f7ff ff56 	bl	1266c <at_parse_detect_type>
   127c0:	1c42      	adds	r2, r0, #1
   127c2:	d01e      	beq.n	12802 <at_parser_max_params_from_str+0xd6>
				if (at_parse_process_element(&str, index,
   127c4:	4632      	mov	r2, r6
   127c6:	4621      	mov	r1, r4
   127c8:	a801      	add	r0, sp, #4
   127ca:	f7ff fe7b 	bl	124c4 <at_parse_process_element>
   127ce:	1c43      	adds	r3, r0, #1
   127d0:	d017      	beq.n	12802 <at_parser_max_params_from_str+0xd6>
			str++;
   127d2:	9b01      	ldr	r3, [sp, #4]
   127d4:	3301      	adds	r3, #1
   127d6:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   127d8:	9a01      	ldr	r2, [sp, #4]
   127da:	7810      	ldrb	r0, [r2, #0]
   127dc:	f012 ff8e 	bl	256fc <is_lfcr>
   127e0:	b1f8      	cbz	r0, 12822 <at_parser_max_params_from_str+0xf6>
   127e2:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   127e4:	7811      	ldrb	r1, [r2, #0]
   127e6:	4692      	mov	sl, r2
   127e8:	4608      	mov	r0, r1
   127ea:	3201      	adds	r2, #1
   127ec:	f012 ff86 	bl	256fc <is_lfcr>
   127f0:	2800      	cmp	r0, #0
   127f2:	d1f7      	bne.n	127e4 <at_parser_max_params_from_str+0xb8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   127f4:	b119      	cbz	r1, 127fe <at_parser_max_params_from_str+0xd2>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   127f6:	292b      	cmp	r1, #43	; 0x2b
   127f8:	d001      	beq.n	127fe <at_parser_max_params_from_str+0xd2>
   127fa:	2925      	cmp	r1, #37	; 0x25
   127fc:	d111      	bne.n	12822 <at_parser_max_params_from_str+0xf6>
				str += i;
   127fe:	f8cd a004 	str.w	sl, [sp, #4]
	*at_params_str = str;
   12802:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   12804:	b9a5      	cbnz	r5, 12830 <at_parser_max_params_from_str+0x104>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12806:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   12808:	2a00      	cmp	r2, #0
   1280a:	bf0c      	ite	eq
   1280c:	2000      	moveq	r0, #0
   1280e:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   12812:	f1b8 0f00 	cmp.w	r8, #0
   12816:	d001      	beq.n	1281c <at_parser_max_params_from_str+0xf0>
		*next_param_str = (char *)at_params_str;
   12818:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   1281c:	b002      	add	sp, #8
   1281e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		index++;
   12822:	3401      	adds	r4, #1
			oversized = true;
   12824:	42bc      	cmp	r4, r7
   12826:	bf08      	it	eq
   12828:	2501      	moveq	r5, #1
   1282a:	e79a      	b.n	12762 <at_parser_max_params_from_str+0x36>
					oversized = true;
   1282c:	4605      	mov	r5, r0
   1282e:	e7e8      	b.n	12802 <at_parser_max_params_from_str+0xd6>
		return -E2BIG;
   12830:	f06f 0006 	mvn.w	r0, #6
   12834:	e7ed      	b.n	12812 <at_parser_max_params_from_str+0xe6>
		return -EINVAL;
   12836:	f06f 0015 	mvn.w	r0, #21
   1283a:	e7ef      	b.n	1281c <at_parser_max_params_from_str+0xf0>
   1283c:	20027448 	.word	0x20027448
   12840:	00024001 	.word	0x00024001

00012844 <abi_getter>:
extern const struct fw_info_abi * const _ext_abis_start[];
extern const u32_t _ext_abis_size;
__noinit fw_info_abi_getter abi_getter_in;

int abi_getter(u32_t id, u32_t index, const struct fw_info_abi **abi)
{
   12844:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!abi) {
   12846:	b1da      	cbz	r2, 12880 <abi_getter+0x3c>
		return -EFAULT;
	}

	bool id_found = false;

	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   12848:	2300      	movs	r3, #0
	bool id_found = false;
   1284a:	461c      	mov	r4, r3
   1284c:	4d0e      	ldr	r5, [pc, #56]	; (12888 <abi_getter+0x44>)
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   1284e:	4f0f      	ldr	r7, [pc, #60]	; (1288c <abi_getter+0x48>)
   12850:	42bb      	cmp	r3, r7
   12852:	d306      	bcc.n	12862 <abi_getter+0x1e>
				*abi = ext_abi;
				return 0;
			}
		}
	}
	return id_found ? -EBADF : -ENOENT;
   12854:	2c00      	cmp	r4, #0
   12856:	bf14      	ite	ne
   12858:	f06f 0008 	mvnne.w	r0, #8
   1285c:	f06f 0001 	mvneq.w	r0, #1
   12860:	e009      	b.n	12876 <abi_getter+0x32>
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
   12862:	f855 6b04 	ldr.w	r6, [r5], #4
		if (ext_abi->abi_id == id) {
   12866:	f8d6 c00c 	ldr.w	ip, [r6, #12]
   1286a:	4560      	cmp	r0, ip
   1286c:	d106      	bne.n	1287c <abi_getter+0x38>
			if (index-- == 0) {
   1286e:	1e4c      	subs	r4, r1, #1
   12870:	b911      	cbnz	r1, 12878 <abi_getter+0x34>
				return 0;
   12872:	4608      	mov	r0, r1
				*abi = ext_abi;
   12874:	6016      	str	r6, [r2, #0]
}
   12876:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (index-- == 0) {
   12878:	4621      	mov	r1, r4
			id_found = true;
   1287a:	2401      	movs	r4, #1
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   1287c:	3301      	adds	r3, #1
   1287e:	e7e7      	b.n	12850 <abi_getter+0xc>
		return -EFAULT;
   12880:	f06f 000d 	mvn.w	r0, #13
   12884:	e7f7      	b.n	12876 <abi_getter+0x32>
   12886:	bf00      	nop
   12888:	00028e18 	.word	0x00028e18
   1288c:	00000000 	.word	0x00000000

00012890 <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   12890:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   12892:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   12894:	b118      	cbz	r0, 1289e <callback_worker+0xe>
		data->callback(data->data);
   12896:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   1289a:	300c      	adds	r0, #12
   1289c:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   1289e:	a901      	add	r1, sp, #4
   128a0:	4802      	ldr	r0, [pc, #8]	; (128ac <callback_worker+0x1c>)
   128a2:	f00f fb31 	bl	21f08 <k_mem_slab_free>
}
   128a6:	b003      	add	sp, #12
   128a8:	f85d fb04 	ldr.w	pc, [sp], #4
   128ac:	2002d548 	.word	0x2002d548

000128b0 <open_socket>:
{
   128b0:	b508      	push	{r3, lr}
	return socket_ops->socket(family, type, proto);
   128b2:	4b09      	ldr	r3, [pc, #36]	; (128d8 <open_socket+0x28>)
   128b4:	f240 2201 	movw	r2, #513	; 0x201
   128b8:	681b      	ldr	r3, [r3, #0]
   128ba:	2100      	movs	r1, #0
   128bc:	681b      	ldr	r3, [r3, #0]
   128be:	2066      	movs	r0, #102	; 0x66
   128c0:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, 0, NPROTO_AT);
   128c2:	4b06      	ldr	r3, [pc, #24]	; (128dc <open_socket+0x2c>)
   128c4:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   128c6:	3001      	adds	r0, #1
   128c8:	d104      	bne.n	128d4 <open_socket+0x24>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   128ca:	f00f f971 	bl	21bb0 <z_impl_z_errno>
		return -errno;
   128ce:	6800      	ldr	r0, [r0, #0]
   128d0:	4240      	negs	r0, r0
}
   128d2:	bd08      	pop	{r3, pc}
	return 0;
   128d4:	2000      	movs	r0, #0
   128d6:	e7fc      	b.n	128d2 <open_socket+0x22>
   128d8:	20020314 	.word	0x20020314
   128dc:	200203d8 	.word	0x200203d8

000128e0 <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   128e0:	b530      	push	{r4, r5, lr}
   128e2:	b087      	sub	sp, #28
	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   128e4:	f7ff ffe4 	bl	128b0 <open_socket>
	if (err) {
   128e8:	4d1a      	ldr	r5, [pc, #104]	; (12954 <at_cmd_driver_init+0x74>)
   128ea:	4b1b      	ldr	r3, [pc, #108]	; (12958 <at_cmd_driver_init+0x78>)
   128ec:	4604      	mov	r4, r0
   128ee:	1aed      	subs	r5, r5, r3
   128f0:	f3c5 05c9 	ubfx	r5, r5, #3, #10
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   128f4:	f04f 0200 	mov.w	r2, #0
	if (err) {
   128f8:	b158      	cbz	r0, 12912 <at_cmd_driver_init+0x32>
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   128fa:	2301      	movs	r3, #1
   128fc:	4601      	mov	r1, r0
   128fe:	f363 0207 	bfi	r2, r3, #0, #8
   12902:	4816      	ldr	r0, [pc, #88]	; (1295c <at_cmd_driver_init+0x7c>)
   12904:	f365 128f 	bfi	r2, r5, #6, #10
			K_THREAD_STACK_SIZEOF(socket_thread_stack),
			socket_thread_fn,
			NULL, NULL, NULL,
			THREAD_PRIORITY, 0, K_NO_WAIT);

	LOG_DBG("Common AT socket processing thread created");
   12908:	f011 fa30 	bl	23d6c <log_1>

	return 0;
}
   1290c:	4620      	mov	r0, r4
   1290e:	b007      	add	sp, #28
   12910:	bd30      	pop	{r4, r5, pc}
	LOG_DBG("Common AT socket created");
   12912:	2304      	movs	r3, #4
   12914:	f363 0207 	bfi	r2, r3, #0, #8
   12918:	f365 128f 	bfi	r2, r5, #6, #10
   1291c:	4910      	ldr	r1, [pc, #64]	; (12960 <at_cmd_driver_init+0x80>)
   1291e:	4811      	ldr	r0, [pc, #68]	; (12964 <at_cmd_driver_init+0x84>)
   12920:	f011 fa24 	bl	23d6c <log_1>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12924:	230a      	movs	r3, #10
   12926:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1292a:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1292e:	490e      	ldr	r1, [pc, #56]	; (12968 <at_cmd_driver_init+0x88>)
   12930:	4b0e      	ldr	r3, [pc, #56]	; (1296c <at_cmd_driver_init+0x8c>)
   12932:	e9cd 4404 	strd	r4, r4, [sp, #16]
   12936:	e9cd 4400 	strd	r4, r4, [sp]
   1293a:	480d      	ldr	r0, [pc, #52]	; (12970 <at_cmd_driver_init+0x90>)
   1293c:	f010 f8b8 	bl	22ab0 <z_impl_k_thread_create>
	LOG_DBG("Common AT socket processing thread created");
   12940:	f04f 0200 	mov.w	r2, #0
   12944:	2304      	movs	r3, #4
   12946:	f363 0207 	bfi	r2, r3, #0, #8
   1294a:	f365 128f 	bfi	r2, r5, #6, #10
   1294e:	4904      	ldr	r1, [pc, #16]	; (12960 <at_cmd_driver_init+0x80>)
   12950:	4808      	ldr	r0, [pc, #32]	; (12974 <at_cmd_driver_init+0x94>)
   12952:	e7d9      	b.n	12908 <at_cmd_driver_init+0x28>
   12954:	000264c4 	.word	0x000264c4
   12958:	000264bc 	.word	0x000264bc
   1295c:	00028a74 	.word	0x00028a74
   12960:	00028a61 	.word	0x00028a61
   12964:	00028a96 	.word	0x00028a96
   12968:	20027c90 	.word	0x20027c90
   1296c:	00012979 	.word	0x00012979
   12970:	200203ec 	.word	0x200203ec
   12974:	00028ab3 	.word	0x00028ab3

00012978 <socket_thread_fn>:
	LOG_DBG("AT socket thread started");
   12978:	2304      	movs	r3, #4
   1297a:	f04f 0200 	mov.w	r2, #0
{
   1297e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_DBG("AT socket thread started");
   12982:	f363 0207 	bfi	r2, r3, #0, #8
   12986:	499b      	ldr	r1, [pc, #620]	; (12bf4 <socket_thread_fn+0x27c>)
   12988:	4b9b      	ldr	r3, [pc, #620]	; (12bf8 <socket_thread_fn+0x280>)
{
   1298a:	b087      	sub	sp, #28
	LOG_DBG("AT socket thread started");
   1298c:	1a5b      	subs	r3, r3, r1
   1298e:	f3c3 0bc9 	ubfx	fp, r3, #3, #10
   12992:	f36b 128f 	bfi	r2, fp, #6, #10
   12996:	4999      	ldr	r1, [pc, #612]	; (12bfc <socket_thread_fn+0x284>)
   12998:	4899      	ldr	r0, [pc, #612]	; (12c00 <socket_thread_fn+0x288>)
   1299a:	f011 f9e7 	bl	23d6c <log_1>
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   1299e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   129a2:	a903      	add	r1, sp, #12
   129a4:	4897      	ldr	r0, [pc, #604]	; (12c04 <socket_thread_fn+0x28c>)
   129a6:	f00f fa83 	bl	21eb0 <k_mem_slab_alloc>
		ret.code  = 0;
   129aa:	2300      	movs	r3, #0
	return socket_ops->recv(sock, buf, max_len, flags);
   129ac:	4c96      	ldr	r4, [pc, #600]	; (12c08 <socket_thread_fn+0x290>)
		item->callback = NULL;
   129ae:	9903      	ldr	r1, [sp, #12]
   129b0:	6822      	ldr	r2, [r4, #0]
   129b2:	4896      	ldr	r0, [pc, #600]	; (12c0c <socket_thread_fn+0x294>)
   129b4:	f8c1 3a98 	str.w	r3, [r1, #2712]	; 0xa98
   129b8:	f8d2 a024 	ldr.w	sl, [r2, #36]	; 0x24
   129bc:	310c      	adds	r1, #12
		ret.code  = 0;
   129be:	9304      	str	r3, [sp, #16]
		ret.state = AT_CMD_OK;
   129c0:	f88d 3014 	strb.w	r3, [sp, #20]
   129c4:	f640 228c 	movw	r2, #2700	; 0xa8c
   129c8:	6800      	ldr	r0, [r0, #0]
   129ca:	47d0      	blx	sl
		if (bytes_read < 0) {
   129cc:	1e01      	subs	r1, r0, #0
   129ce:	da5b      	bge.n	12a88 <socket_thread_fn+0x110>
			LOG_ERR("AT socket recv failed with err %d",
   129d0:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
   129d4:	f043 0301 	orr.w	r3, r3, #1
   129d8:	f363 0507 	bfi	r5, r3, #0, #8
   129dc:	f36b 158f 	bfi	r5, fp, #6, #10
   129e0:	488b      	ldr	r0, [pc, #556]	; (12c10 <socket_thread_fn+0x298>)
   129e2:	462a      	mov	r2, r5
   129e4:	f011 f9c2 	bl	23d6c <log_1>
	return socket_ops->close(sock);
   129e8:	6823      	ldr	r3, [r4, #0]
   129ea:	4888      	ldr	r0, [pc, #544]	; (12c0c <socket_thread_fn+0x294>)
   129ec:	685b      	ldr	r3, [r3, #4]
   129ee:	6800      	ldr	r0, [r0, #0]
   129f0:	4798      	blx	r3
			if ((close(common_socket_fd) == 0) &&
   129f2:	2800      	cmp	r0, #0
   129f4:	d131      	bne.n	12a5a <socket_thread_fn+0xe2>
			    (open_socket() == 0)) {
   129f6:	f7ff ff5b 	bl	128b0 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   129fa:	bb70      	cbnz	r0, 12a5a <socket_thread_fn+0xe2>
				LOG_INF("AT socket recovered");
   129fc:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   12a00:	f043 0303 	orr.w	r3, r3, #3
   12a04:	f363 0607 	bfi	r6, r3, #0, #8
   12a08:	f36b 168f 	bfi	r6, fp, #6, #10
   12a0c:	4631      	mov	r1, r6
   12a0e:	4881      	ldr	r0, [pc, #516]	; (12c14 <socket_thread_fn+0x29c>)
   12a10:	f011 f99f 	bl	23d52 <log_0>
				ret.state = AT_CMD_ERROR;
   12a14:	2301      	movs	r3, #1
   12a16:	f88d 3014 	strb.w	r3, [sp, #20]
   12a1a:	f00f f8c9 	bl	21bb0 <z_impl_z_errno>
				ret.code  = -errno;
   12a1e:	6803      	ldr	r3, [r0, #0]
   12a20:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   12a22:	9304      	str	r3, [sp, #16]
		if (item->callback == NULL) {
   12a24:	9903      	ldr	r1, [sp, #12]
   12a26:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   12a2a:	2b00      	cmp	r3, #0
   12a2c:	f040 80b8 	bne.w	12ba0 <socket_thread_fn+0x228>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   12a30:	a903      	add	r1, sp, #12
   12a32:	4874      	ldr	r0, [pc, #464]	; (12c04 <socket_thread_fn+0x28c>)
   12a34:	f00f fa68 	bl	21f08 <k_mem_slab_free>
	if (z_syscall_trap()) {
		return (unsigned int) arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_COUNT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_count_get(sem);
   12a38:	4b77      	ldr	r3, [pc, #476]	; (12c18 <socket_thread_fn+0x2a0>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   12a3a:	689b      	ldr	r3, [r3, #8]
   12a3c:	2b00      	cmp	r3, #0
   12a3e:	d1ae      	bne.n	1299e <socket_thread_fn+0x26>
   12a40:	f89d 2014 	ldrb.w	r2, [sp, #20]
   12a44:	2a04      	cmp	r2, #4
   12a46:	d0aa      	beq.n	1299e <socket_thread_fn+0x26>
			current_cmd_handler = NULL;
   12a48:	4a74      	ldr	r2, [pc, #464]	; (12c1c <socket_thread_fn+0x2a4>)
   12a4a:	6013      	str	r3, [r2, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&q, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(q, data, timeout);
   12a4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12a50:	a904      	add	r1, sp, #16
   12a52:	4873      	ldr	r0, [pc, #460]	; (12c20 <socket_thread_fn+0x2a8>)
   12a54:	f00f fb22 	bl	2209c <z_impl_k_msgq_put>
   12a58:	e7a1      	b.n	1299e <socket_thread_fn+0x26>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   12a5a:	2301      	movs	r3, #1
   12a5c:	f04f 0400 	mov.w	r4, #0
   12a60:	f363 0407 	bfi	r4, r3, #0, #8
   12a64:	f36b 148f 	bfi	r4, fp, #6, #10
   12a68:	f00f f8a2 	bl	21bb0 <z_impl_z_errno>
   12a6c:	4622      	mov	r2, r4
   12a6e:	6801      	ldr	r1, [r0, #0]
   12a70:	486c      	ldr	r0, [pc, #432]	; (12c24 <socket_thread_fn+0x2ac>)
   12a72:	f011 f97b 	bl	23d6c <log_1>
   12a76:	4b64      	ldr	r3, [pc, #400]	; (12c08 <socket_thread_fn+0x290>)
   12a78:	4a64      	ldr	r2, [pc, #400]	; (12c0c <socket_thread_fn+0x294>)
   12a7a:	681b      	ldr	r3, [r3, #0]
   12a7c:	6810      	ldr	r0, [r2, #0]
   12a7e:	685b      	ldr	r3, [r3, #4]
   12a80:	4798      	blx	r3
}
   12a82:	b007      	add	sp, #28
   12a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (bytes_read == sizeof(item->data) ||
   12a88:	f640 238c 	movw	r3, #2700	; 0xa8c
   12a8c:	4299      	cmp	r1, r3
   12a8e:	d004      	beq.n	12a9a <socket_thread_fn+0x122>
			   item->data[bytes_read - 1] != '\0') {
   12a90:	9803      	ldr	r0, [sp, #12]
   12a92:	4401      	add	r1, r0
		} else if (bytes_read == sizeof(item->data) ||
   12a94:	7acb      	ldrb	r3, [r1, #11]
   12a96:	9301      	str	r3, [sp, #4]
   12a98:	b173      	cbz	r3, 12ab8 <socket_thread_fn+0x140>
			LOG_ERR("AT message to large for reception buffer or "
   12a9a:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   12a9e:	f043 0301 	orr.w	r3, r3, #1
   12aa2:	f363 0707 	bfi	r7, r3, #0, #8
   12aa6:	f36b 178f 	bfi	r7, fp, #6, #10
   12aaa:	4639      	mov	r1, r7
   12aac:	485e      	ldr	r0, [pc, #376]	; (12c28 <socket_thread_fn+0x2b0>)
   12aae:	f011 f950 	bl	23d52 <log_0>
			ret.code  = -ENOBUFS;
   12ab2:	f06f 0336 	mvn.w	r3, #54	; 0x36
   12ab6:	e7b4      	b.n	12a22 <socket_thread_fn+0xaa>
		LOG_DBG("at_cmd_rx: %s", log_strdup(item->data));
   12ab8:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   12abc:	f043 0304 	orr.w	r3, r3, #4
   12ac0:	300c      	adds	r0, #12
   12ac2:	f363 0807 	bfi	r8, r3, #0, #8
   12ac6:	f7fc fd7d 	bl	f5c4 <log_strdup>
   12aca:	f36b 188f 	bfi	r8, fp, #6, #10
   12ace:	4602      	mov	r2, r0
   12ad0:	4643      	mov	r3, r8
   12ad2:	494a      	ldr	r1, [pc, #296]	; (12bfc <socket_thread_fn+0x284>)
   12ad4:	4855      	ldr	r0, [pc, #340]	; (12c2c <socket_thread_fn+0x2b4>)
   12ad6:	f011 f95d 	bl	23d94 <log_2>
	ret->state = AT_CMD_NOTIFICATION;
   12ada:	2304      	movs	r3, #4
		payload_len = get_return_code(item->data, &ret);
   12adc:	f8dd a00c 	ldr.w	sl, [sp, #12]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   12ae0:	4953      	ldr	r1, [pc, #332]	; (12c30 <socket_thread_fn+0x2b8>)
		payload_len = get_return_code(item->data, &ret);
   12ae2:	f10a 040c 	add.w	r4, sl, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   12ae6:	4620      	mov	r0, r4
	ret->state = AT_CMD_NOTIFICATION;
   12ae8:	f88d 3014 	strb.w	r3, [sp, #20]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   12aec:	f011 fdf4 	bl	246d8 <strstr>
		if (tmpstr) {
   12af0:	4603      	mov	r3, r0
   12af2:	b120      	cbz	r0, 12afe <socket_thread_fn+0x186>
			ret->state = AT_CMD_OK;
   12af4:	9a01      	ldr	r2, [sp, #4]
   12af6:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code  = -ENOEXEC;
   12afa:	9204      	str	r2, [sp, #16]
			break;
   12afc:	e00e      	b.n	12b1c <socket_thread_fn+0x1a4>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   12afe:	494d      	ldr	r1, [pc, #308]	; (12c34 <socket_thread_fn+0x2bc>)
   12b00:	4620      	mov	r0, r4
   12b02:	f011 fde9 	bl	246d8 <strstr>
		if (tmpstr) {
   12b06:	9001      	str	r0, [sp, #4]
   12b08:	b328      	cbz	r0, 12b56 <socket_thread_fn+0x1de>
			ret->state = AT_CMD_ERROR_CMS;
   12b0a:	2202      	movs	r2, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   12b0c:	f10a 0017 	add.w	r0, sl, #23
			ret->state = AT_CMD_ERROR_CME;
   12b10:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   12b14:	f011 fccb 	bl	244ae <atoi>
   12b18:	9b01      	ldr	r3, [sp, #4]
   12b1a:	9004      	str	r0, [sp, #16]
		buf[new_len++] = '\0';
   12b1c:	2100      	movs	r1, #0
		new_len = tmpstr - buf;
   12b1e:	1b1a      	subs	r2, r3, r4
		buf[new_len++] = '\0';
   12b20:	3201      	adds	r2, #1
   12b22:	7019      	strb	r1, [r3, #0]
		if (ret.state != AT_CMD_NOTIFICATION) {
   12b24:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12b28:	2b04      	cmp	r3, #4
   12b2a:	d04f      	beq.n	12bcc <socket_thread_fn+0x254>
			if ((response_buf_len > 0) &&
   12b2c:	f8df a124 	ldr.w	sl, [pc, #292]	; 12c54 <socket_thread_fn+0x2dc>
   12b30:	f8da 3000 	ldr.w	r3, [sl]
   12b34:	2b00      	cmp	r3, #0
   12b36:	d052      	beq.n	12bde <socket_thread_fn+0x266>
			    (response_buf != NULL)) {
   12b38:	4c3f      	ldr	r4, [pc, #252]	; (12c38 <socket_thread_fn+0x2c0>)
   12b3a:	6820      	ldr	r0, [r4, #0]
			if ((response_buf_len > 0) &&
   12b3c:	2800      	cmp	r0, #0
   12b3e:	d04e      	beq.n	12bde <socket_thread_fn+0x266>
				if (response_buf_len > payload_len) {
   12b40:	4293      	cmp	r3, r2
   12b42:	d91d      	bls.n	12b80 <socket_thread_fn+0x208>
					memcpy(response_buf, item->data,
   12b44:	9903      	ldr	r1, [sp, #12]
   12b46:	310c      	adds	r1, #12
   12b48:	f011 fe43 	bl	247d2 <memcpy>
				response_buf_len = 0;
   12b4c:	2300      	movs	r3, #0
   12b4e:	f8ca 3000 	str.w	r3, [sl]
				response_buf     = NULL;
   12b52:	6023      	str	r3, [r4, #0]
				goto next;
   12b54:	e766      	b.n	12a24 <socket_thread_fn+0xac>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   12b56:	4939      	ldr	r1, [pc, #228]	; (12c3c <socket_thread_fn+0x2c4>)
   12b58:	4620      	mov	r0, r4
   12b5a:	f011 fdbd 	bl	246d8 <strstr>
		if (tmpstr) {
   12b5e:	9001      	str	r0, [sp, #4]
   12b60:	b108      	cbz	r0, 12b66 <socket_thread_fn+0x1ee>
			ret->state = AT_CMD_ERROR_CME;
   12b62:	2203      	movs	r2, #3
   12b64:	e7d2      	b.n	12b0c <socket_thread_fn+0x194>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   12b66:	4936      	ldr	r1, [pc, #216]	; (12c40 <socket_thread_fn+0x2c8>)
   12b68:	4620      	mov	r0, r4
   12b6a:	f011 fdb5 	bl	246d8 <strstr>
		if (tmpstr) {
   12b6e:	4603      	mov	r3, r0
   12b70:	2800      	cmp	r0, #0
   12b72:	d039      	beq.n	12be8 <socket_thread_fn+0x270>
			ret->state = AT_CMD_ERROR;
   12b74:	2201      	movs	r2, #1
   12b76:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code  = -ENOEXEC;
   12b7a:	f06f 0207 	mvn.w	r2, #7
   12b7e:	e7bc      	b.n	12afa <socket_thread_fn+0x182>
					LOG_ERR("Response buffer not large "
   12b80:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   12b84:	f043 0301 	orr.w	r3, r3, #1
   12b88:	f363 0907 	bfi	r9, r3, #0, #8
   12b8c:	f36b 198f 	bfi	r9, fp, #6, #10
   12b90:	4649      	mov	r1, r9
   12b92:	482c      	ldr	r0, [pc, #176]	; (12c44 <socket_thread_fn+0x2cc>)
   12b94:	f011 f8dd 	bl	23d52 <log_0>
					ret.code  = -EMSGSIZE;
   12b98:	f06f 0323 	mvn.w	r3, #35	; 0x23
   12b9c:	9304      	str	r3, [sp, #16]
   12b9e:	e7d5      	b.n	12b4c <socket_thread_fn+0x1d4>
   12ba0:	4b29      	ldr	r3, [pc, #164]	; (12c48 <socket_thread_fn+0x2d0>)
   12ba2:	2200      	movs	r2, #0
   12ba4:	604b      	str	r3, [r1, #4]
   12ba6:	460b      	mov	r3, r1
   12ba8:	600a      	str	r2, [r1, #0]
   12baa:	f843 2f08 	str.w	r2, [r3, #8]!
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12bae:	e8d3 2fef 	ldaex	r2, [r3]
   12bb2:	f042 0001 	orr.w	r0, r2, #1
   12bb6:	e8c3 0fe4 	stlex	r4, r0, [r3]
   12bba:	2c00      	cmp	r4, #0
   12bbc:	d1f7      	bne.n	12bae <socket_thread_fn+0x236>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   12bbe:	07d3      	lsls	r3, r2, #31
   12bc0:	f53f af3a 	bmi.w	12a38 <socket_thread_fn+0xc0>
		k_queue_append(&work_q->queue, work);
   12bc4:	4821      	ldr	r0, [pc, #132]	; (12c4c <socket_thread_fn+0x2d4>)
   12bc6:	f012 ffae 	bl	25b26 <k_queue_append>
   12bca:	e735      	b.n	12a38 <socket_thread_fn+0xc0>
		if (payload_len == 0) {
   12bcc:	2a00      	cmp	r2, #0
   12bce:	f43f af29 	beq.w	12a24 <socket_thread_fn+0xac>
			item->callback = notification_handler;
   12bd2:	4b1f      	ldr	r3, [pc, #124]	; (12c50 <socket_thread_fn+0x2d8>)
			item->callback = current_cmd_handler;
   12bd4:	681a      	ldr	r2, [r3, #0]
   12bd6:	9b03      	ldr	r3, [sp, #12]
   12bd8:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
   12bdc:	e722      	b.n	12a24 <socket_thread_fn+0xac>
		if (payload_len == 0) {
   12bde:	2a00      	cmp	r2, #0
   12be0:	f43f af20 	beq.w	12a24 <socket_thread_fn+0xac>
			item->callback = current_cmd_handler;
   12be4:	4b0d      	ldr	r3, [pc, #52]	; (12c1c <socket_thread_fn+0x2a4>)
   12be6:	e7f5      	b.n	12bd4 <socket_thread_fn+0x25c>
		new_len = strlen(buf) + 1;
   12be8:	4620      	mov	r0, r4
   12bea:	f011 fdc0 	bl	2476e <strlen>
   12bee:	1c42      	adds	r2, r0, #1
   12bf0:	e798      	b.n	12b24 <socket_thread_fn+0x1ac>
   12bf2:	bf00      	nop
   12bf4:	000264bc 	.word	0x000264bc
   12bf8:	000264c4 	.word	0x000264c4
   12bfc:	00028a27 	.word	0x00028a27
   12c00:	00028bb1 	.word	0x00028bb1
   12c04:	2002d548 	.word	0x2002d548
   12c08:	20020314 	.word	0x20020314
   12c0c:	200203d8 	.word	0x200203d8
   12c10:	00028bce 	.word	0x00028bce
   12c14:	00028bf0 	.word	0x00028bf0
   12c18:	2002d598 	.word	0x2002d598
   12c1c:	200203dc 	.word	0x200203dc
   12c20:	2002d5d8 	.word	0x2002d5d8
   12c24:	00028c04 	.word	0x00028c04
   12c28:	00028c3b 	.word	0x00028c3b
   12c2c:	00028c85 	.word	0x00028c85
   12c30:	0002803a 	.word	0x0002803a
   12c34:	00028c97 	.word	0x00028c97
   12c38:	200203e4 	.word	0x200203e4
   12c3c:	00028ca3 	.word	0x00028ca3
   12c40:	00027ecb 	.word	0x00027ecb
   12c44:	00028caf 	.word	0x00028caf
   12c48:	00012891 	.word	0x00012891
   12c4c:	20025d3c 	.word	0x20025d3c
   12c50:	200203e0 	.word	0x200203e0
   12c54:	200203e8 	.word	0x200203e8

00012c58 <at_write>:
{
   12c58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12c5c:	4680      	mov	r8, r0
   12c5e:	460e      	mov	r6, r1
	LOG_DBG("Sending command %s", log_strdup(cmd));
   12c60:	f04f 0500 	mov.w	r5, #0
	int bytes_to_send = strlen(cmd);
   12c64:	f011 fd83 	bl	2476e <strlen>
	LOG_DBG("Sending command %s", log_strdup(cmd));
   12c68:	2304      	movs	r3, #4
   12c6a:	4c2f      	ldr	r4, [pc, #188]	; (12d28 <at_write+0xd0>)
   12c6c:	f363 0507 	bfi	r5, r3, #0, #8
   12c70:	4b2e      	ldr	r3, [pc, #184]	; (12d2c <at_write+0xd4>)
	int bytes_to_send = strlen(cmd);
   12c72:	4607      	mov	r7, r0
	LOG_DBG("Sending command %s", log_strdup(cmd));
   12c74:	4640      	mov	r0, r8
   12c76:	1ae4      	subs	r4, r4, r3
   12c78:	f7fc fca4 	bl	f5c4 <log_strdup>
   12c7c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   12c80:	f364 158f 	bfi	r5, r4, #6, #10
   12c84:	462b      	mov	r3, r5
   12c86:	4602      	mov	r2, r0
   12c88:	4929      	ldr	r1, [pc, #164]	; (12d30 <at_write+0xd8>)
   12c8a:	482a      	ldr	r0, [pc, #168]	; (12d34 <at_write+0xdc>)
   12c8c:	f011 f882 	bl	23d94 <log_2>
	return socket_ops->send(sock, buf, len, flags);
   12c90:	4b29      	ldr	r3, [pc, #164]	; (12d38 <at_write+0xe0>)
   12c92:	482a      	ldr	r0, [pc, #168]	; (12d3c <at_write+0xe4>)
   12c94:	681b      	ldr	r3, [r3, #0]
   12c96:	463a      	mov	r2, r7
   12c98:	6add      	ldr	r5, [r3, #44]	; 0x2c
   12c9a:	4641      	mov	r1, r8
   12c9c:	2300      	movs	r3, #0
   12c9e:	6800      	ldr	r0, [r0, #0]
   12ca0:	47a8      	blx	r5
	if (bytes_sent == -1) {
   12ca2:	1c43      	adds	r3, r0, #1
   12ca4:	4605      	mov	r5, r0
   12ca6:	d11d      	bne.n	12ce4 <at_write+0x8c>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   12ca8:	2301      	movs	r3, #1
   12caa:	f04f 0500 	mov.w	r5, #0
   12cae:	f363 0507 	bfi	r5, r3, #0, #8
   12cb2:	f364 158f 	bfi	r5, r4, #6, #10
   12cb6:	f00e ff7b 	bl	21bb0 <z_impl_z_errno>
   12cba:	462a      	mov	r2, r5
   12cbc:	6801      	ldr	r1, [r0, #0]
   12cbe:	4820      	ldr	r0, [pc, #128]	; (12d40 <at_write+0xe8>)
   12cc0:	f011 f854 	bl	23d6c <log_1>
   12cc4:	f00e ff74 	bl	21bb0 <z_impl_z_errno>
		ret.code  = -errno;
   12cc8:	6803      	ldr	r3, [r0, #0]
   12cca:	425b      	negs	r3, r3
   12ccc:	9300      	str	r3, [sp, #0]
		ret.state = AT_CMD_ERROR;
   12cce:	2301      	movs	r3, #1
   12cd0:	f88d 3004 	strb.w	r3, [sp, #4]
	if (state) {
   12cd4:	b116      	cbz	r6, 12cdc <at_write+0x84>
		*state = ret.state;
   12cd6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   12cda:	7033      	strb	r3, [r6, #0]
}
   12cdc:	9800      	ldr	r0, [sp, #0]
   12cde:	b002      	add	sp, #8
   12ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&q, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(q, data, timeout);
   12ce4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12ce8:	4669      	mov	r1, sp
   12cea:	4816      	ldr	r0, [pc, #88]	; (12d44 <at_write+0xec>)
   12cec:	f00f fa28 	bl	22140 <z_impl_k_msgq_get>
		LOG_DBG("Bytes sent: %d", bytes_sent);
   12cf0:	2204      	movs	r2, #4
   12cf2:	f04f 0300 	mov.w	r3, #0
   12cf6:	f362 0307 	bfi	r3, r2, #0, #8
   12cfa:	f364 138f 	bfi	r3, r4, #6, #10
   12cfe:	462a      	mov	r2, r5
   12d00:	490b      	ldr	r1, [pc, #44]	; (12d30 <at_write+0xd8>)
   12d02:	4811      	ldr	r0, [pc, #68]	; (12d48 <at_write+0xf0>)
   12d04:	f011 f846 	bl	23d94 <log_2>
		if (bytes_sent != bytes_to_send) {
   12d08:	42af      	cmp	r7, r5
   12d0a:	d0e3      	beq.n	12cd4 <at_write+0x7c>
			LOG_ERR("Bytes sent (%d) was not the "
   12d0c:	2201      	movs	r2, #1
   12d0e:	f04f 0300 	mov.w	r3, #0
   12d12:	f362 0307 	bfi	r3, r2, #0, #8
   12d16:	f364 138f 	bfi	r3, r4, #6, #10
   12d1a:	463a      	mov	r2, r7
   12d1c:	4629      	mov	r1, r5
   12d1e:	480b      	ldr	r0, [pc, #44]	; (12d4c <at_write+0xf4>)
   12d20:	f011 f838 	bl	23d94 <log_2>
   12d24:	e7d6      	b.n	12cd4 <at_write+0x7c>
   12d26:	bf00      	nop
   12d28:	000264c4 	.word	0x000264c4
   12d2c:	000264bc 	.word	0x000264bc
   12d30:	00028a38 	.word	0x00028a38
   12d34:	00028b32 	.word	0x00028b32
   12d38:	20020314 	.word	0x20020314
   12d3c:	200203d8 	.word	0x200203d8
   12d40:	00028b49 	.word	0x00028b49
   12d44:	2002d5d8 	.word	0x2002d5d8
   12d48:	00028b6c 	.word	0x00028b6c
   12d4c:	00028b7f 	.word	0x00028b7f

00012d50 <at_cmd_write>:
{
   12d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12d54:	4605      	mov	r5, r0
   12d56:	4688      	mov	r8, r1
   12d58:	4617      	mov	r7, r2
   12d5a:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
   12d5c:	4c0a      	ldr	r4, [pc, #40]	; (12d88 <at_cmd_write+0x38>)
   12d5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12d62:	4620      	mov	r0, r4
   12d64:	f00f fe14 	bl	22990 <z_impl_k_sem_take>
	response_buf     = buf;
   12d68:	4b08      	ldr	r3, [pc, #32]	; (12d8c <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   12d6a:	4631      	mov	r1, r6
	response_buf     = buf;
   12d6c:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   12d70:	4b07      	ldr	r3, [pc, #28]	; (12d90 <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   12d72:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   12d74:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
   12d76:	f7ff ff6f 	bl	12c58 <at_write>
   12d7a:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   12d7c:	4620      	mov	r0, r4
   12d7e:	f00f fddb 	bl	22938 <z_impl_k_sem_give>
}
   12d82:	4628      	mov	r0, r5
   12d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12d88:	2002d598 	.word	0x2002d598
   12d8c:	200203e4 	.word	0x200203e4
   12d90:	200203e8 	.word	0x200203e8

00012d94 <at_cmd_set_notification_handler>:
	LOG_DBG("Setting notification handler to %p", handler);
   12d94:	2204      	movs	r2, #4
   12d96:	f04f 0300 	mov.w	r3, #0
{
   12d9a:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("Setting notification handler to %p", handler);
   12d9c:	f362 0307 	bfi	r3, r2, #0, #8
   12da0:	4c13      	ldr	r4, [pc, #76]	; (12df0 <at_cmd_set_notification_handler+0x5c>)
   12da2:	4a14      	ldr	r2, [pc, #80]	; (12df4 <at_cmd_set_notification_handler+0x60>)
	if (notification_handler != NULL && handler != notification_handler) {
   12da4:	4d14      	ldr	r5, [pc, #80]	; (12df8 <at_cmd_set_notification_handler+0x64>)
	LOG_DBG("Setting notification handler to %p", handler);
   12da6:	1aa4      	subs	r4, r4, r2
   12da8:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   12dac:	4602      	mov	r2, r0
   12dae:	4913      	ldr	r1, [pc, #76]	; (12dfc <at_cmd_set_notification_handler+0x68>)
{
   12db0:	4606      	mov	r6, r0
	LOG_DBG("Setting notification handler to %p", handler);
   12db2:	f364 138f 	bfi	r3, r4, #6, #10
   12db6:	4812      	ldr	r0, [pc, #72]	; (12e00 <at_cmd_set_notification_handler+0x6c>)
   12db8:	f010 ffec 	bl	23d94 <log_2>
	if (notification_handler != NULL && handler != notification_handler) {
   12dbc:	6829      	ldr	r1, [r5, #0]
   12dbe:	b159      	cbz	r1, 12dd8 <at_cmd_set_notification_handler+0x44>
   12dc0:	428e      	cmp	r6, r1
   12dc2:	d009      	beq.n	12dd8 <at_cmd_set_notification_handler+0x44>
		LOG_WRN("Forgetting prior notification handler %p",
   12dc4:	f04f 0200 	mov.w	r2, #0
   12dc8:	2302      	movs	r3, #2
   12dca:	f363 0207 	bfi	r2, r3, #0, #8
   12dce:	f364 128f 	bfi	r2, r4, #6, #10
   12dd2:	480c      	ldr	r0, [pc, #48]	; (12e04 <at_cmd_set_notification_handler+0x70>)
   12dd4:	f010 ffca 	bl	23d6c <log_1>
	return z_impl_k_sem_take(sem, timeout);
   12dd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12ddc:	480a      	ldr	r0, [pc, #40]	; (12e08 <at_cmd_set_notification_handler+0x74>)
   12dde:	f00f fdd7 	bl	22990 <z_impl_k_sem_take>
	notification_handler = handler;
   12de2:	602e      	str	r6, [r5, #0]
	z_impl_k_sem_give(sem);
   12de4:	4808      	ldr	r0, [pc, #32]	; (12e08 <at_cmd_set_notification_handler+0x74>)
}
   12de6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12dea:	f00f bda5 	b.w	22938 <z_impl_k_sem_give>
   12dee:	bf00      	nop
   12df0:	000264c4 	.word	0x000264c4
   12df4:	000264bc 	.word	0x000264bc
   12df8:	200203e0 	.word	0x200203e0
   12dfc:	00028a41 	.word	0x00028a41
   12e00:	00028ae2 	.word	0x00028ae2
   12e04:	00028b09 	.word	0x00028b09
   12e08:	2002d598 	.word	0x2002d598

00012e0c <ip_client_event_handler>:
   12e0c:	1b08f850 	.word	0x1b08f850
   12e10:	f0060c09 	.word	0xf0060c09
   12e14:	bf00bb3d 	.word	0xbf00bb3d

00012e18 <rpc_ip_client_init>:
   12e18:	f00b4801 	.word	0xf00b4801
   12e1c:	bf00ba9d 	.word	0xbf00ba9d
   12e20:	00026750 	.word	0x00026750

00012e24 <rpc_ip_client_request_alloc>:
   12e24:	b5102300 	.word	0xb5102300
   12e28:	9301b082 	.word	0x9301b082
   12e2c:	4604b158 	.word	0x4604b158
   12e30:	2004aa01 	.word	0x2004aa01
   12e34:	fcc8f00b 	.word	0xfcc8f00b
   12e38:	9b01b918 	.word	0x9b01b918
   12e3c:	3308b10b 	.word	0x3308b10b
   12e40:	b0026023 	.word	0xb0026023
   12e44:	2007bd10 	.word	0x2007bd10
   12e48:	bd10b002 	.word	0xbd10b002

00012e4c <rpc_ip_client_request_send>:
   12e4c:	4370f401 	.word	0x4370f401
   12e50:	4fe0f5b3 	.word	0x4fe0f5b3
   12e54:	b160d10b 	.word	0xb160d10b
   12e58:	f8304603 	.word	0xf8304603
   12e5c:	20042c08 	.word	0x20042c08
   12e60:	4101ea42 	.word	0x4101ea42
   12e64:	1d08f843 	.word	0x1d08f843
   12e68:	f00b4619 	.word	0xf00b4619
   12e6c:	200fbc95 	.word	0x200fbc95
   12e70:	20074770 	.word	0x20074770
   12e74:	bf004770 	.word	0xbf004770

00012e78 <rpc_ip_client_message_free>:
   12e78:	f1a0b120 	.word	0xf1a0b120
   12e7c:	20040108 	.word	0x20040108
   12e80:	bcd4f00b 	.word	0xbcd4f00b
   12e84:	47702007 	.word	0x47702007

00012e88 <rpc_ip_client_data_free>:
   12e88:	4601b118 	.word	0x4601b118
   12e8c:	f00b2004 	.word	0xf00b2004
   12e90:	2007bddf 	.word	0x2007bddf
   12e94:	bf004770 	.word	0xbf004770

00012e98 <symbol_0001c77>:
   12e98:	4603b430 	.word	0x4603b430
   12e9c:	f5b26800 	.word	0xf5b26800
   12ea0:	eba03f80 	.word	0xeba03f80
   12ea4:	d2140101 	.word	0xd2140101
   12ea8:	dd512902 	.word	0xdd512902
   12eac:	60191e41 	.word	0x60191e41
   12eb0:	2c01f800 	.word	0x2c01f800
   12eb4:	24826819 	.word	0x24826819
   12eb8:	60181e48 	.word	0x60181e48
   12ebc:	0a122003 	.word	0x0a122003
   12ec0:	2c01f801 	.word	0x2c01f801
   12ec4:	1e51681a 	.word	0x1e51681a
   12ec8:	f8026019 	.word	0xf8026019
   12ecc:	bc304c01 	.word	0xbc304c01
   12ed0:	f1b24770 	.word	0xf1b24770
   12ed4:	d21a7f80 	.word	0xd21a7f80
   12ed8:	dd392903 	.word	0xdd392903
   12edc:	1e412483 	.word	0x1e412483
   12ee0:	f8006019 	.word	0xf8006019
   12ee4:	68192c01 	.word	0x68192c01
   12ee8:	1e4d0a10 	.word	0x1e4d0a10
   12eec:	f801601d 	.word	0xf801601d
   12ef0:	68190c01 	.word	0x68190c01
   12ef4:	1e480c12 	.word	0x1e480c12
   12ef8:	f8016018 	.word	0xf8016018
   12efc:	681a2c01 	.word	0x681a2c01
   12f00:	1e512004 	.word	0x1e512004
   12f04:	f8026019 	.word	0xf8026019
   12f08:	bc304c01 	.word	0xbc304c01
   12f0c:	29044770 	.word	0x29044770
   12f10:	2484dd1e 	.word	0x2484dd1e
   12f14:	60191e41 	.word	0x60191e41
   12f18:	2c01f800 	.word	0x2c01f800
   12f1c:	0a106819 	.word	0x0a106819
   12f20:	601d1e4d 	.word	0x601d1e4d
   12f24:	0c01f801 	.word	0x0c01f801
   12f28:	0c106819 	.word	0x0c106819
   12f2c:	601d1e4d 	.word	0x601d1e4d
   12f30:	0c01f801 	.word	0x0c01f801
   12f34:	0e126819 	.word	0x0e126819
   12f38:	60181e48 	.word	0x60181e48
   12f3c:	2c01f801 	.word	0x2c01f801
   12f40:	2005681a 	.word	0x2005681a
   12f44:	60191e51 	.word	0x60191e51
   12f48:	4c01f802 	.word	0x4c01f802
   12f4c:	4770bc30 	.word	0x4770bc30
   12f50:	006bf06f 	.word	0x006bf06f
   12f54:	bf00e7bb 	.word	0xbf00e7bb

00012f58 <symbol_000646e>:
   12f58:	6804b430 	.word	0x6804b430
   12f5c:	46032a7f 	.word	0x46032a7f
   12f60:	0101eba4 	.word	0x0101eba4
   12f64:	2900d808 	.word	0x2900d808
   12f68:	1e61dd6c 	.word	0x1e61dd6c
   12f6c:	20016001 	.word	0x20016001
   12f70:	2c01f804 	.word	0x2c01f804
   12f74:	4770bc30 	.word	0x4770bc30
   12f78:	d80e2aff 	.word	0xd80e2aff
   12f7c:	dd612901 	.word	0xdd612901
   12f80:	1e602181 	.word	0x1e602181
   12f84:	f8046018 	.word	0xf8046018
   12f88:	681a2c01 	.word	0x681a2c01
   12f8c:	1e542002 	.word	0x1e542002
   12f90:	f802601c 	.word	0xf802601c
   12f94:	bc301c01 	.word	0xbc301c01
   12f98:	f5b24770 	.word	0xf5b24770
   12f9c:	d31c3f80 	.word	0xd31c3f80
   12fa0:	7f80f1b2 	.word	0x7f80f1b2
   12fa4:	2903d22e 	.word	0x2903d22e
   12fa8:	2583dd4c 	.word	0x2583dd4c
   12fac:	60011e61 	.word	0x60011e61
   12fb0:	2c01f804 	.word	0x2c01f804
   12fb4:	0a106801 	.word	0x0a106801
   12fb8:	601c1e4c 	.word	0x601c1e4c
   12fbc:	0c01f801 	.word	0x0c01f801
   12fc0:	0c126819 	.word	0x0c126819
   12fc4:	60181e48 	.word	0x60181e48
   12fc8:	2c01f801 	.word	0x2c01f801
   12fcc:	2004681a 	.word	0x2004681a
   12fd0:	60191e51 	.word	0x60191e51
   12fd4:	5c01f802 	.word	0x5c01f802
   12fd8:	2902e7cc 	.word	0x2902e7cc
   12fdc:	2582dd32 	.word	0x2582dd32
   12fe0:	60011e61 	.word	0x60011e61
   12fe4:	2c01f804 	.word	0x2c01f804
   12fe8:	0a126801 	.word	0x0a126801
   12fec:	60181e48 	.word	0x60181e48
   12ff0:	2c01f801 	.word	0x2c01f801
   12ff4:	2003681a 	.word	0x2003681a
   12ff8:	60191e51 	.word	0x60191e51
   12ffc:	5c01f802 	.word	0x5c01f802
   13000:	4770bc30 	.word	0x4770bc30
   13004:	dd1d2904 	.word	0xdd1d2904
   13008:	1e612584 	.word	0x1e612584
   1300c:	f8046001 	.word	0xf8046001
   13010:	68012c01 	.word	0x68012c01
   13014:	1e4c0a10 	.word	0x1e4c0a10
   13018:	f801601c 	.word	0xf801601c
   1301c:	68190c01 	.word	0x68190c01
   13020:	1e4c0c10 	.word	0x1e4c0c10
   13024:	f801601c 	.word	0xf801601c
   13028:	68190c01 	.word	0x68190c01
   1302c:	1e480e12 	.word	0x1e480e12
   13030:	f8016018 	.word	0xf8016018
   13034:	681a2c01 	.word	0x681a2c01
   13038:	1e512005 	.word	0x1e512005
   1303c:	f8026019 	.word	0xf8026019
   13040:	e7975c01 	.word	0xe7975c01
   13044:	006bf06f 	.word	0x006bf06f
   13048:	bf00e794 	.word	0xbf00e794

0001304c <symbol_00036c0>:
   1304c:	1a596803 	.word	0x1a596803
   13050:	dd052900 	.word	0xdd052900
   13054:	60011e59 	.word	0x60011e59
   13058:	f8032001 	.word	0xf8032001
   1305c:	47702c01 	.word	0x47702c01
   13060:	006bf06f 	.word	0x006bf06f
   13064:	bf004770 	.word	0xbf004770

00013068 <symbol_0008475>:
   13068:	6805b5f8 	.word	0x6805b5f8
   1306c:	d83f42a9 	.word	0xd83f42a9
   13070:	1a69460f 	.word	0x1a69460f
   13074:	d83b428b 	.word	0xd83b428b
   13078:	461c4606 	.word	0x461c4606
   1307c:	46111ae8 	.word	0x46111ae8
   13080:	461a6030 	.word	0x461a6030
   13084:	fba5f011 	.word	0xfba5f011
   13088:	46202c00 	.word	0x46202c00
   1308c:	2c7fdb15 	.word	0x2c7fdb15
   13090:	6833d814 	.word	0x6833d814
   13094:	2a001bda 	.word	0x2a001bda
   13098:	2001dd2a 	.word	0x2001dd2a
   1309c:	60321e5a 	.word	0x60321e5a
   130a0:	4c01f803 	.word	0x4c01f803
   130a4:	34016833 	.word	0x34016833
   130a8:	2f001bdf 	.word	0x2f001bdf
   130ac:	2206dd20 	.word	0x2206dd20
   130b0:	60311e59 	.word	0x60311e59
   130b4:	f8034420 	.word	0xf8034420
   130b8:	bdf82c01 	.word	0xbdf82c01
   130bc:	d80f2cff 	.word	0xd80f2cff
   130c0:	1bda6833 	.word	0x1bda6833
   130c4:	dd132a01 	.word	0xdd132a01
   130c8:	1e592281 	.word	0x1e592281
   130cc:	f8036031 	.word	0xf8036031
   130d0:	68334c01 	.word	0x68334c01
   130d4:	1e592002 	.word	0x1e592002
   130d8:	f8036031 	.word	0xf8036031
   130dc:	e7e12c01 	.word	0xe7e12c01
   130e0:	46394622 	.word	0x46394622
   130e4:	f7ff4630 	.word	0xf7ff4630
   130e8:	2800fed7 	.word	0x2800fed7
   130ec:	bdf8dada 	.word	0xbdf8dada
   130f0:	006bf06f 	.word	0x006bf06f
   130f4:	bf00bdf8 	.word	0xbf00bdf8

000130f8 <symbol_0002662>:
   130f8:	41f0e92d 	.word	0x41f0e92d
   130fc:	8018f8dd 	.word	0x8018f8dd
   13100:	f1b86805 	.word	0xf1b86805
   13104:	d1130f00 	.word	0xd1130f00
   13108:	2c001a6c 	.word	0x2c001a6c
   1310c:	8087f340 	.word	0x8087f340
   13110:	60041e6c 	.word	0x60041e6c
   13114:	8c01f805 	.word	0x8c01f805
   13118:	1a656804 	.word	0x1a656804
   1311c:	dd7e2d00 	.word	0xdd7e2d00
   13120:	f04f2505 	.word	0xf04f2505
   13124:	1e660802 	.word	0x1e660802
   13128:	f8046006 	.word	0xf8046006
   1312c:	68055c01 	.word	0x68055c01
   13130:	d87442a9 	.word	0xd87442a9
   13134:	42a31a6c 	.word	0x42a31a6c
   13138:	4606d871 	.word	0x4606d871
   1313c:	1ae8461c 	.word	0x1ae8461c
   13140:	6030460f 	.word	0x6030460f
   13144:	461a4611 	.word	0x461a4611
   13148:	fb43f011 	.word	0xfb43f011
   1314c:	46202c00 	.word	0x46202c00
   13150:	2c7fdb2f 	.word	0x2c7fdb2f
   13154:	6833d841 	.word	0x6833d841
   13158:	2a001bda 	.word	0x2a001bda
   1315c:	2001dd5f 	.word	0x2001dd5f
   13160:	60321e5a 	.word	0x60321e5a
   13164:	4c01f803 	.word	0x4c01f803
   13168:	34016833 	.word	0x34016833
   1316c:	2a001bda 	.word	0x2a001bda
   13170:	2206dd55 	.word	0x2206dd55
   13174:	1e594404 	.word	0x1e594404
   13178:	60312c00 	.word	0x60312c00
   1317c:	f8034620 	.word	0xf8034620
   13180:	db162c01 	.word	0xdb162c01
   13184:	2c7f4444 	.word	0x2c7f4444
   13188:	6833d815 	.word	0x6833d815
   1318c:	2a001bda 	.word	0x2a001bda
   13190:	2001dd45 	.word	0x2001dd45
   13194:	60321e5a 	.word	0x60321e5a
   13198:	4c01f803 	.word	0x4c01f803
   1319c:	34016833 	.word	0x34016833
   131a0:	2f001bdf 	.word	0x2f001bdf
   131a4:	2230dd3b 	.word	0x2230dd3b
   131a8:	60311e59 	.word	0x60311e59
   131ac:	f8034420 	.word	0xf8034420
   131b0:	e8bd2c01 	.word	0xe8bd2c01
   131b4:	2cff81f0 	.word	0x2cff81f0
   131b8:	6833d821 	.word	0x6833d821
   131bc:	2a011bda 	.word	0x2a011bda
   131c0:	2281dd2d 	.word	0x2281dd2d
   131c4:	60311e59 	.word	0x60311e59
   131c8:	4c01f803 	.word	0x4c01f803
   131cc:	20026833 	.word	0x20026833
   131d0:	60311e59 	.word	0x60311e59
   131d4:	2c01f803 	.word	0x2c01f803
   131d8:	2cffe7e0 	.word	0x2cffe7e0
   131dc:	6833d817 	.word	0x6833d817
   131e0:	2a011bda 	.word	0x2a011bda
   131e4:	2281dd1b 	.word	0x2281dd1b
   131e8:	60311e59 	.word	0x60311e59
   131ec:	4c01f803 	.word	0x4c01f803
   131f0:	20026833 	.word	0x20026833
   131f4:	60311e59 	.word	0x60311e59
   131f8:	2c01f803 	.word	0x2c01f803
   131fc:	4622e7b4 	.word	0x4622e7b4
   13200:	46304639 	.word	0x46304639
   13204:	fe48f7ff 	.word	0xfe48f7ff
   13208:	dbd22800 	.word	0xdbd22800
   1320c:	4622e7c6 	.word	0x4622e7c6
   13210:	46304639 	.word	0x46304639
   13214:	fe40f7ff 	.word	0xfe40f7ff
   13218:	daa52800 	.word	0xdaa52800
   1321c:	f06fe7c9 	.word	0xf06fe7c9
   13220:	e7c6006b 	.word	0xe7c6006b

00013224 <symbol_0005bf5>:
   13224:	4ff0e92d 	.word	0x4ff0e92d
   13228:	b0d72400 	.word	0xb0d72400
   1322c:	73abf50d 	.word	0x73abf50d
   13230:	46914688 	.word	0x46914688
   13234:	4306e9cd 	.word	0x4306e9cd
   13238:	f0014607 	.word	0xf0014607
   1323c:	2802f95d 	.word	0x2802f95d
   13240:	2385d159 	.word	0x2385d159
   13244:	ae0b6878 	.word	0xae0b6878
   13248:	46229301 	.word	0x46229301
   1324c:	0188f100 	.word	0x0188f100
   13250:	ab0a9600 	.word	0xab0a9600
   13254:	f004940a 	.word	0xf004940a
   13258:	ad2dfbc5 	.word	0xad2dfbc5
   1325c:	b9684604 	.word	0xb9684604
   13260:	42a89807 	.word	0x42a89807
   13264:	9a0ad37f 	.word	0x9a0ad37f
   13268:	42931b43 	.word	0x42931b43
   1326c:	1a83d37b 	.word	0x1a83d37b
   13270:	46314618 	.word	0x46314618
   13274:	f0119307 	.word	0xf0119307
   13278:	9c0afaac 	.word	0x9c0afaac
   1327c:	db312c00 	.word	0xdb312c00
   13280:	1b5a9b07 	.word	0x1b5a9b07
   13284:	dd6e2a00 	.word	0xdd6e2a00
   13288:	1e5a2100 	.word	0x1e5a2100
   1328c:	0a01f104 	.word	0x0a01f104
   13290:	a8079207 	.word	0xa8079207
   13294:	1c01f803 	.word	0x1c01f803
   13298:	46294652 	.word	0x46294652
   1329c:	fe5cf7ff 	.word	0xfe5cf7ff
   132a0:	db1f1e04 	.word	0xdb1f1e04
   132a4:	46292203 	.word	0x46292203
   132a8:	f7ffa807 	.word	0xf7ffa807
   132ac:	f1b0fecf 	.word	0xf1b0fecf
   132b0:	db1b0b00 	.word	0xdb1b0b00
   132b4:	f0014638 	.word	0xf0014638
   132b8:	aa08f91f 	.word	0xaa08f91f
   132bc:	f00ba909 	.word	0xf00ba909
   132c0:	4603fcd7 	.word	0x4603fcd7
   132c4:	2b00b1c8 	.word	0x2b00b1c8
   132c8:	f1c3db50 	.word	0xf1c3db50
   132cc:	a90602a2 	.word	0xa90602a2
   132d0:	9101e9cd 	.word	0x9101e9cd
   132d4:	8000f8cd 	.word	0x8000f8cd
   132d8:	4925442a 	.word	0x4925442a
   132dc:	f0044825 	.word	0xf0044825
   132e0:	4604ffa1 	.word	0x4604ffa1
   132e4:	b0574620 	.word	0xb0574620
   132e8:	8ff0e8bd 	.word	0x8ff0e8bd
   132ec:	4620465c 	.word	0x4620465c
   132f0:	e8bdb057 	.word	0xe8bdb057
   132f4:	4c208ff0 	.word	0x4c208ff0
   132f8:	9005e7f4 	.word	0x9005e7f4
   132fc:	f0014638 	.word	0xf0014638
   13300:	2802f8fb 	.word	0x2802f8fb
   13304:	d01d9b05 	.word	0xd01d9b05
   13308:	e9dd4618 	.word	0xe9dd4618
   1330c:	90003208 	.word	0x90003208
   13310:	a8074629 	.word	0xa8074629
   13314:	fef0f7ff 	.word	0xfef0f7ff
   13318:	db222800 	.word	0xdb222800
   1331c:	44a34454 	.word	0x44a34454
   13320:	465a4483 	.word	0x465a4483
   13324:	a8074629 	.word	0xa8074629
   13328:	fe16f7ff 	.word	0xfe16f7ff
   1332c:	dbd91e04 	.word	0xdbd91e04
   13330:	2230a807 	.word	0x2230a807
   13334:	f7ff4629 	.word	0xf7ff4629
   13338:	1e03fe89 	.word	0x1e03fe89
   1333c:	44a3db16 	.word	0x44a3db16
   13340:	e7c0445b 	.word	0xe7c0445b
   13344:	4632687b 	.word	0x4632687b
   13348:	a90a7818 	.word	0xa90a7818
   1334c:	fcacf00b 	.word	0xfcacf00b
   13350:	6833b928 	.word	0x6833b928
   13354:	46299a0a 	.word	0x46299a0a
   13358:	f7ffa807 	.word	0xf7ffa807
   1335c:	2800fe85 	.word	0x2800fe85
   13360:	4604dad3 	.word	0x4604dad3
   13364:	f06fe7be 	.word	0xf06fe7be
   13368:	e7bb046b 	.word	0xe7bb046b
   1336c:	e7b9461c 	.word	0xe7b9461c
   13370:	00026760 	.word	0x00026760
   13374:	0002677c 	.word	0x0002677c
   13378:	ffffc680 	.word	0xffffc680

0001337c <authenticated_atcmd_init>:
   1337c:	4c3bb5f0 	.word	0x4c3bb5f0
   13380:	6826b0c7 	.word	0x6826b0c7
   13384:	2701bb16 	.word	0x2701bb16
   13388:	60274839 	.word	0x60274839
   1338c:	f9eff011 	.word	0xf9eff011
   13390:	f5c04605 	.word	0xf5c04605
   13394:	46317380 	.word	0x46317380
   13398:	7280f44f 	.word	0x7280f44f
   1339c:	9302a806 	.word	0x9302a806
   133a0:	fa41f011 	.word	0xfa41f011
   133a4:	4932462a 	.word	0x4932462a
   133a8:	f011a806 	.word	0xf011a806
   133ac:	aa06fa12 	.word	0xaa06fa12
   133b0:	ab029700 	.word	0xab029700
   133b4:	2120442a 	.word	0x2120442a
   133b8:	f00a482e 	.word	0xf00a482e
   133bc:	4606fed5 	.word	0x4606fed5
   133c0:	2300b138 	.word	0x2300b138
   133c4:	60232023 	.word	0x60232023
   133c8:	bdf0b047 	.word	0xbdf0b047
   133cc:	b047200e 	.word	0xb047200e
   133d0:	2022bdf0 	.word	0x2022bdf0
   133d4:	60279b02 	.word	0x60279b02
   133d8:	af06441d 	.word	0xaf06441d
   133dc:	5578ab06 	.word	0x5578ab06
   133e0:	f240442b 	.word	0xf240442b
   133e4:	21022201 	.word	0x21022201
   133e8:	705e2066 	.word	0x705e2066
   133ec:	f9c0f000 	.word	0xf9c0f000
   133f0:	dbe61e07 	.word	0xdbe61e07
   133f4:	f0114820 	.word	0xf0114820
   133f8:	4633f9ba 	.word	0x4633f9ba
   133fc:	491e4602 	.word	0x491e4602
   13400:	6600e9cd 	.word	0x6600e9cd
   13404:	f0004638 	.word	0xf0004638
   13408:	3502f95d 	.word	0x3502f95d
   1340c:	4633a903 	.word	0x4633a903
   13410:	e9cd220a 	.word	0xe9cd220a
   13414:	46386600 	.word	0x46386600
   13418:	fa3cf000 	.word	0xfa3cf000
   1341c:	6600e9cd 	.word	0x6600e9cd
   13420:	462aa906 	.word	0x462aa906
   13424:	46384633 	.word	0x46384633
   13428:	f94cf000 	.word	0xf94cf000
   1342c:	d00342a8 	.word	0xd00342a8
   13430:	f0004638 	.word	0xf0004638
   13434:	e7c4f9e7 	.word	0xe7c4f9e7
   13438:	6600e9cd 	.word	0x6600e9cd
   1343c:	220a4633 	.word	0x220a4633
   13440:	4638a903 	.word	0x4638a903
   13444:	fa26f000 	.word	0xfa26f000
   13448:	ddf12801 	.word	0xddf12801
   1344c:	2202a803 	.word	0x2202a803
   13450:	f011490a 	.word	0xf011490a
   13454:	4605f99f 	.word	0x4605f99f
   13458:	d1e92800 	.word	0xd1e92800
   1345c:	46382302 	.word	0x46382302
   13460:	f0006023 	.word	0xf0006023
   13464:	4628f9cf 	.word	0x4628f9cf
   13468:	bf00e7ae 	.word	0xbf00e7ae
   1346c:	2002049c 	.word	0x2002049c
   13470:	00026798 	.word	0x00026798
   13474:	20027450 	.word	0x20027450
   13478:	000267a8 	.word	0x000267a8
   1347c:	000267b8 	.word	0x000267b8

00013480 <gnss_client_event_handler>:
   13480:	1b08f850 	.word	0x1b08f850
   13484:	f0060c09 	.word	0xf0060c09
   13488:	bf00bda5 	.word	0xbf00bda5

0001348c <rpc_gnss_client_init>:
   1348c:	f00a4801 	.word	0xf00a4801
   13490:	bf00bf63 	.word	0xbf00bf63
   13494:	00026840 	.word	0x00026840

00013498 <rpc_gnss_client_request_alloc>:
   13498:	b5102300 	.word	0xb5102300
   1349c:	9301b082 	.word	0x9301b082
   134a0:	4604b158 	.word	0x4604b158
   134a4:	2007aa01 	.word	0x2007aa01
   134a8:	f98ef00b 	.word	0xf98ef00b
   134ac:	9b01b918 	.word	0x9b01b918
   134b0:	3308b10b 	.word	0x3308b10b
   134b4:	b0026023 	.word	0xb0026023
   134b8:	2007bd10 	.word	0x2007bd10
   134bc:	bd10b002 	.word	0xbd10b002

000134c0 <rpc_gnss_client_request_send>:
   134c0:	4370f401 	.word	0x4370f401
   134c4:	5f80f5b3 	.word	0x5f80f5b3
   134c8:	b160d10b 	.word	0xb160d10b
   134cc:	f8304603 	.word	0xf8304603
   134d0:	20072c08 	.word	0x20072c08
   134d4:	4101ea42 	.word	0x4101ea42
   134d8:	1d08f843 	.word	0x1d08f843
   134dc:	f00b4619 	.word	0xf00b4619
   134e0:	200fb95b 	.word	0x200fb95b
   134e4:	20074770 	.word	0x20074770
   134e8:	bf004770 	.word	0xbf004770

000134ec <rpc_gnss_client_message_free>:
   134ec:	f1a0b120 	.word	0xf1a0b120
   134f0:	20070108 	.word	0x20070108
   134f4:	b99af00b 	.word	0xb99af00b
   134f8:	47702007 	.word	0x47702007

000134fc <rpc_gnss_client_data_free>:
   134fc:	4601b118 	.word	0x4601b118
   13500:	f00b2007 	.word	0xf00b2007
   13504:	2007baa5 	.word	0x2007baa5
   13508:	bf004770 	.word	0xbf004770

0001350c <eckey_can_do>:
   1350c:	28023802 	.word	0x28023802
   13510:	2000bf8c 	.word	0x2000bf8c
   13514:	47702001 	.word	0x47702001

00013518 <eckey_get_bitlen>:
   13518:	47706d80 	.word	0x47706d80

0001351c <eckey_debug>:
   1351c:	4b032202 	.word	0x4b032202
   13520:	60883088 	.word	0x60883088
   13524:	604b700a 	.word	0x604b700a
   13528:	bf004770 	.word	0xbf004770
   1352c:	00026850 	.word	0x00026850

00013530 <eckeydh_can_do>:
   13530:	28013802 	.word	0x28013802
   13534:	2000bf8c 	.word	0x2000bf8c
   13538:	47702001 	.word	0x47702001

0001353c <eckey_free_wrap>:
   1353c:	4604b510 	.word	0x4604b510
   13540:	fc48f003 	.word	0xfc48f003
   13544:	e8bd4620 	.word	0xe8bd4620
   13548:	f00b4010 	.word	0xf00b4010
   1354c:	bf00bfe9 	.word	0xbf00bfe9

00013550 <eckey_alloc_wrap>:
   13550:	21acb510 	.word	0x21acb510
   13554:	f00b2001 	.word	0xf00b2001
   13558:	4604ffcf 	.word	0x4604ffcf
   1355c:	f003b108 	.word	0xf003b108
   13560:	4620fbd3 	.word	0x4620fbd3
   13564:	bf00bd10 	.word	0xbf00bd10

00013568 <eckey_check_pair>:
   13568:	bbacf004 	.word	0xbbacf004

0001356c <symbol_0005c7f>:
   1356c:	4ff0e92d 	.word	0x4ff0e92d
   13570:	c024f8dd 	.word	0xc024f8dd
   13574:	0f00f1bc 	.word	0x0f00f1bc
   13578:	4c42d065 	.word	0x4c42d065
   1357c:	540cfba4 	.word	0x540cfba4
   13580:	eb040864 	.word	0xeb040864
   13584:	45c40844 	.word	0x45c40844
   13588:	3401bf18 	.word	0x3401bf18
   1358c:	4f80f1b4 	.word	0x4f80f1b4
   13590:	00a4d271 	.word	0x00a4d271
   13594:	428c3401 	.word	0x428c3401
   13598:	2800d869 	.word	0x2800d869
   1359c:	f1b8d067 	.word	0xf1b8d067
   135a0:	d0610f00 	.word	0xd0610f00
   135a4:	27004686 	.word	0x27004686
   135a8:	1cdc4e37 	.word	0x1cdc4e37
   135ac:	f8142500 	.word	0xf8142500
   135b0:	f8141c03 	.word	0xf8141c03
   135b4:	f8143c02 	.word	0xf8143c02
   135b8:	ea4fbc01 	.word	0xea4fbc01
   135bc:	010909a1 	.word	0x010909a1
   135c0:	0130f001 	.word	0x0130f001
   135c4:	1a13eb06 	.word	0x1a13eb06
   135c8:	9009f816 	.word	0x9009f816
   135cc:	f81a009b 	.word	0xf81a009b
   135d0:	f003a001 	.word	0xf003a001
   135d4:	eb06013c 	.word	0xeb06013c
   135d8:	5c59139b 	.word	0x5c59139b
   135dc:	0507f369 	.word	0x0507f369
   135e0:	033ff00b 	.word	0x033ff00b
   135e4:	f36a5cf3 	.word	0xf36a5cf3
   135e8:	f361250f 	.word	0xf361250f
   135ec:	37034517 	.word	0x37034517
   135f0:	651ff363 	.word	0x651ff363
   135f4:	0104f10e 	.word	0x0104f10e
   135f8:	f8ce45b8 	.word	0xf8ce45b8
   135fc:	46235000 	.word	0x46235000
   13600:	f104468e 	.word	0xf104468e
   13604:	d8d10403 	.word	0xd8d10403
   13608:	d91445bc 	.word	0xd91445bc
   1360c:	4d1e781c 	.word	0x4d1e781c
   13610:	10a63701 	.word	0x10a63701
   13614:	ea4f4567 	.word	0xea4f4567
   13618:	f0041404 	.word	0xf0041404
   1361c:	f8150430 	.word	0xf8150430
   13620:	d315e006 	.word	0xd315e006
   13624:	5d2b263d 	.word	0x5d2b263d
   13628:	e000f881 	.word	0xe000f881
   1362c:	233d704b 	.word	0x233d704b
   13630:	70cb708e 	.word	0x70cb708e
   13634:	23003104 	.word	0x23003104
   13638:	1a08469c 	.word	0x1a08469c
   1363c:	700b6010 	.word	0x700b6010
   13640:	e8bd4660 	.word	0xe8bd4660
   13644:	f8c28ff0 	.word	0xf8c28ff0
   13648:	4660c000 	.word	0x4660c000
   1364c:	8ff0e8bd 	.word	0x8ff0e8bd
   13650:	f881785b 	.word	0xf881785b
   13654:	eb05e000 	.word	0xeb05e000
   13658:	5d341613 	.word	0x5d341613
   1365c:	f003009b 	.word	0xf003009b
   13660:	704c033c 	.word	0x704c033c
   13664:	e7e25cee 	.word	0xe7e25cee
   13668:	46014647 	.word	0x46014647
   1366c:	6014e7cc 	.word	0x6014e7cc
   13670:	0c29f06f 	.word	0x0c29f06f
   13674:	f04fe7e4 	.word	0xf04fe7e4
   13678:	f06f33ff 	.word	0xf06f33ff
   1367c:	60130c29 	.word	0x60130c29
   13680:	bf00e7de 	.word	0xbf00e7de
   13684:	aaaaaaab 	.word	0xaaaaaaab
   13688:	000268b8 	.word	0x000268b8

0001368c <packet_free_cb>:
   1368c:	f0006800 	.word	0xf0006800
   13690:	bf00b9eb 	.word	0xbf00b9eb

00013694 <packet_free_cb>:
   13694:	4604b510 	.word	0x4604b510
   13698:	f0066800 	.word	0xf0066800
   1369c:	68a0f9a5 	.word	0x68a0f9a5
   136a0:	e8bdb118 	.word	0xe8bdb118
   136a4:	f00b4010 	.word	0xf00b4010
   136a8:	bd10bf3b 	.word	0xbd10bf3b

000136ac <packet_free_cb>:
   136ac:	4604b510 	.word	0x4604b510
   136b0:	f7ff6800 	.word	0xf7ff6800
   136b4:	68a0ff23 	.word	0x68a0ff23
   136b8:	e8bdb118 	.word	0xe8bdb118
   136bc:	f00b4010 	.word	0xf00b4010
   136c0:	bd10bf2f 	.word	0xbd10bf2f

000136c4 <at_interface_write>:
   136c4:	b083b5f0 	.word	0xb083b5f0
   136c8:	4615460f 	.word	0x4615460f
   136cc:	f0044606 	.word	0xf0044606
   136d0:	2800fcf3 	.word	0x2800fcf3
   136d4:	6803d047 	.word	0x6803d047
   136d8:	039b4604 	.word	0x039b4604
   136dc:	6803d543 	.word	0x6803d543
   136e0:	f4234629 	.word	0xf4234629
   136e4:	60033300 	.word	0x60033300
   136e8:	a8016803 	.word	0xa8016803
   136ec:	1300f443 	.word	0x1300f443
   136f0:	f0006023 	.word	0xf0006023
   136f4:	bba0f98f 	.word	0xbba0f98f
   136f8:	9b012204 	.word	0x9b012204
   136fc:	7258721a 	.word	0x7258721a
   13700:	72d87298 	.word	0x72d87298
   13704:	b98560de 	.word	0xb98560de
   13708:	21014618 	.word	0x21014618
   1370c:	f996f000 	.word	0xf996f000
   13710:	f44fb9d0 	.word	0xf44fb9d0
   13714:	46303200 	.word	0x46303200
   13718:	f04f4611 	.word	0xf04f4611
   1371c:	f00433ff 	.word	0xf00433ff
   13720:	b9a8fc5f 	.word	0xb9a8fc5f
   13724:	b0034628 	.word	0xb0034628
   13728:	4639bdf0 	.word	0x4639bdf0
   1372c:	462a6818 	.word	0x462a6818
   13730:	f84ff011 	.word	0xf84ff011
   13734:	98012101 	.word	0x98012101
   13738:	f980f000 	.word	0xf980f000
   1373c:	d0e82800 	.word	0xd0e82800
   13740:	68189b01 	.word	0x68189b01
   13744:	f990f000 	.word	0xf990f000
   13748:	f0009801 	.word	0xf0009801
   1374c:	2023f985 	.word	0x2023f985
   13750:	f4436823 	.word	0xf4436823
   13754:	60233300 	.word	0x60233300
   13758:	fc8ef7fe 	.word	0xfc8ef7fe
   1375c:	30fff04f 	.word	0x30fff04f
   13760:	200ce7e1 	.word	0x200ce7e1
   13764:	2016e7f4 	.word	0x2016e7f4
   13768:	bf00e7f6 	.word	0xbf00e7f6

0001376c <at_interface_init>:
   1376c:	b94cf000 	.word	0xb94cf000

00013770 <at_interface_open>:
   13770:	41f0e92d 	.word	0x41f0e92d
   13774:	b0822500 	.word	0xb0822500
   13778:	f843ab02 	.word	0xf843ab02
   1377c:	46805d08 	.word	0x46805d08
   13780:	4618460f 	.word	0x4618460f
   13784:	21024616 	.word	0x21024616
   13788:	f0044a1d 	.word	0xf0044a1d
   1378c:	9b00fb85 	.word	0x9b00fb85
   13790:	b30b4604 	.word	0xb30b4604
   13794:	8703e9c3 	.word	0x8703e9c3
   13798:	4629615e 	.word	0x4629615e
   1379c:	f000a801 	.word	0xf000a801
   137a0:	b9e8f939 	.word	0xb9e8f939
   137a4:	9b012204 	.word	0x9b012204
   137a8:	72582105 	.word	0x72582105
   137ac:	72d87298 	.word	0x72d87298
   137b0:	60dc721a 	.word	0x60dc721a
   137b4:	f0004618 	.word	0xf0004618
   137b8:	b9d8f941 	.word	0xb9d8f941
   137bc:	f04f2202 	.word	0xf04f2202
   137c0:	461133ff 	.word	0x461133ff
   137c4:	f0044620 	.word	0xf0044620
   137c8:	4605fc0b 	.word	0x4605fc0b
   137cc:	9a00b948 	.word	0x9a00b948
   137d0:	f4436813 	.word	0xf4436813
   137d4:	60133300 	.word	0x60133300
   137d8:	b0024620 	.word	0xb0024620
   137dc:	81f0e8bd 	.word	0x81f0e8bd
   137e0:	4620250c 	.word	0x4620250c
   137e4:	fbaef004 	.word	0xfbaef004
   137e8:	f7fe4628 	.word	0xf7fe4628
   137ec:	f04ffc45 	.word	0xf04ffc45
   137f0:	e7f134ff 	.word	0xe7f134ff
   137f4:	f0009801 	.word	0xf0009801
   137f8:	2523f92f 	.word	0x2523f92f
   137fc:	bf00e7f1 	.word	0xbf00e7f1
   13800:	0001368d 	.word	0x0001368d

00013804 <at_interface_close>:
   13804:	b083b5f0 	.word	0xb083b5f0
   13808:	f0044606 	.word	0xf0044606
   1380c:	2800fc55 	.word	0x2800fc55
   13810:	230dd03d 	.word	0x230dd03d
   13814:	60036807 	.word	0x60036807
   13818:	46046803 	.word	0x46046803
   1381c:	d41f039b 	.word	0xd41f039b
   13820:	a8012100 	.word	0xa8012100
   13824:	f8f6f000 	.word	0xf8f6f000
   13828:	2204bb20 	.word	0x2204bb20
   1382c:	21069b01 	.word	0x21069b01
   13830:	72987258 	.word	0x72987258
   13834:	721a72d8 	.word	0x721a72d8
   13838:	461860de 	.word	0x461860de
   1383c:	f8fef000 	.word	0xf8fef000
   13840:	220eb9d0 	.word	0x220eb9d0
   13844:	33fff04f 	.word	0x33fff04f
   13848:	46304611 	.word	0x46304611
   1384c:	fbc8f004 	.word	0xfbc8f004
   13850:	b9a84605 	.word	0xb9a84605
   13854:	f0044630 	.word	0xf0044630
   13858:	4628fb75 	.word	0x4628fb75
   1385c:	bdf0b003 	.word	0xbdf0b003
   13860:	21006803 	.word	0x21006803
   13864:	3300f423 	.word	0x3300f423
   13868:	a8016003 	.word	0xa8016003
   1386c:	f8d2f000 	.word	0xf8d2f000
   13870:	d0da2800 	.word	0xd0da2800
   13874:	e003250c 	.word	0xe003250c
   13878:	f0009801 	.word	0xf0009801
   1387c:	2523f8ed 	.word	0x2523f8ed
   13880:	46286027 	.word	0x46286027
   13884:	fbf8f7fe 	.word	0xfbf8f7fe
   13888:	35fff04f 	.word	0x35fff04f
   1388c:	2516e7e5 	.word	0x2516e7e5
   13890:	bf00e7f7 	.word	0xbf00e7f7

00013894 <at_interface_read>:
   13894:	41f0e92d 	.word	0x41f0e92d
   13898:	4688b084 	.word	0x4688b084
   1389c:	461e4615 	.word	0x461e4615
   138a0:	f0044607 	.word	0xf0044607
   138a4:	2800fc09 	.word	0x2800fc09
   138a8:	2300d049 	.word	0x2300d049
   138ac:	8500e9cd 	.word	0x8500e9cd
   138b0:	0502f016 	.word	0x0502f016
   138b4:	e9cd4604 	.word	0xe9cd4604
   138b8:	d00e3302 	.word	0xd00e3302
   138bc:	2d00e01e 	.word	0x2d00e01e
   138c0:	f44fd133 	.word	0xf44fd133
   138c4:	6a233280 	.word	0x6a233280
   138c8:	2b004611 	.word	0x2b004611
   138cc:	f04fbf08 	.word	0xf04fbf08
   138d0:	463833ff 	.word	0x463833ff
   138d4:	fb84f004 	.word	0xfb84f004
   138d8:	68234605 	.word	0x68234605
   138dc:	f42369e0 	.word	0xf42369e0
   138e0:	60233380 	.word	0x60233380
   138e4:	46326803 	.word	0x46326803
   138e8:	4669689b 	.word	0x4669689b
   138ec:	f1b04798 	.word	0xf1b04798
   138f0:	dbe40800 	.word	0xdbe40800
   138f4:	b0044640 	.word	0xb0044640
   138f8:	81f0e8bd 	.word	0x81f0e8bd
   138fc:	69c06803 	.word	0x69c06803
   13900:	3380f423 	.word	0x3380f423
   13904:	68036023 	.word	0x68036023
   13908:	689b4632 	.word	0x689b4632
   1390c:	47984669 	.word	0x47984669
   13910:	0800f1b0 	.word	0x0800f1b0
   13914:	f1b8daee 	.word	0xf1b8daee
   13918:	d1eb3fff 	.word	0xd1eb3fff
   1391c:	f7fe2023 	.word	0xf7fe2023
   13920:	4640fbab 	.word	0x4640fbab
   13924:	e8bdb004 	.word	0xe8bdb004
   13928:	f1b881f0 	.word	0xf1b881f0
   1392c:	d1e13fff 	.word	0xd1e13fff
   13930:	f7fe4628 	.word	0xf7fe4628
   13934:	4640fba1 	.word	0x4640fba1
   13938:	e8bdb004 	.word	0xe8bdb004
   1393c:	201681f0 	.word	0x201681f0
   13940:	fb9af7fe 	.word	0xfb9af7fe
   13944:	38fff04f 	.word	0x38fff04f
   13948:	bf00e7d4 	.word	0xbf00e7d4

0001394c <at_interface_getopt>:
   1394c:	bc12f004 	.word	0xbc12f004

00013950 <at_interface_setopt>:
   13950:	bbdaf004 	.word	0xbbdaf004

00013954 <rpc_at_event_handler>:
   13954:	4606b570 	.word	0x4606b570
   13958:	68c0b084 	.word	0x68c0b084
   1395c:	f004460d 	.word	0xf004460d
   13960:	4604fbab 	.word	0x4604fbab
   13964:	6803b348 	.word	0x6803b348
   13968:	2b01b29b 	.word	0x2b01b29b
   1396c:	6803d01f 	.word	0x6803d01f
   13970:	2b0db29b 	.word	0x2b0db29b
   13974:	6803d029 	.word	0x6803d029
   13978:	2b02b29b 	.word	0x2b02b29b
   1397c:	3d03d02d 	.word	0x3d03d02d
   13980:	d8172d01 	.word	0xd8172d01
   13984:	68732500 	.word	0x68732500
   13988:	e9cd6832 	.word	0xe9cd6832
   1398c:	e9cd5502 	.word	0xe9cd5502
   13990:	69e02300 	.word	0x69e02300
   13994:	68034669 	.word	0x68034669
   13998:	4798685b 	.word	0x4798685b
   1399c:	d0193001 	.word	0xd0193001
   139a0:	68234628 	.word	0x68234628
   139a4:	3380f443 	.word	0x3380f443
   139a8:	b0046023 	.word	0xb0046023
   139ac:	2d02bd70 	.word	0x2d02bd70
   139b0:	6005d1e5 	.word	0x6005d1e5
   139b4:	b0042000 	.word	0xb0042000
   139b8:	6830bd70 	.word	0x6830bd70
   139bc:	d0f92800 	.word	0xd0f92800
   139c0:	f852f000 	.word	0xf852f000
   139c4:	b0044620 	.word	0xb0044620
   139c8:	2d02bd70 	.word	0x2d02bd70
   139cc:	230ed1d7 	.word	0x230ed1d7
   139d0:	e7ef6003 	.word	0xe7ef6003
   139d4:	b0042002 	.word	0xb0042002
   139d8:	6803bd70 	.word	0x6803bd70
   139dc:	d5ce029b 	.word	0xd5ce029b
   139e0:	d1cc2d02 	.word	0xd1cc2d02
   139e4:	f4236803 	.word	0xf4236803
   139e8:	60031300 	.word	0x60031300
   139ec:	f4436803 	.word	0xf4436803
   139f0:	60033300 	.word	0x60033300
   139f4:	bf00e7de 	.word	0xbf00e7de

000139f8 <at_client_evt_handler>:
   139f8:	f850b120 	.word	0xf850b120
   139fc:	0c091b08 	.word	0x0c091b08
   13a00:	bfa8f7ff 	.word	0xbfa8f7ff
   13a04:	bf004770 	.word	0xbf004770

00013a08 <rpc_at_client_init>:
   13a08:	f00a4801 	.word	0xf00a4801
   13a0c:	bf00bca5 	.word	0xbf00bca5
   13a10:	000268f8 	.word	0x000268f8

00013a14 <rpc_at_client_request_alloc>:
   13a14:	2300b180 	.word	0x2300b180
   13a18:	b082b510 	.word	0xb082b510
   13a1c:	4604aa02 	.word	0x4604aa02
   13a20:	3d04f842 	.word	0x3d04f842
   13a24:	f00a2003 	.word	0xf00a2003
   13a28:	b918fecf 	.word	0xb918fecf
   13a2c:	b10b9b01 	.word	0xb10b9b01
   13a30:	60233308 	.word	0x60233308
   13a34:	bd10b002 	.word	0xbd10b002
   13a38:	4770200e 	.word	0x4770200e

00013a3c <rpc_at_client_request_send>:
   13a3c:	4603b150 	.word	0x4603b150
   13a40:	2c08f830 	.word	0x2c08f830
   13a44:	ea422003 	.word	0xea422003
   13a48:	f8434101 	.word	0xf8434101
   13a4c:	46191d08 	.word	0x46191d08
   13a50:	bea2f00a 	.word	0xbea2f00a
   13a54:	4770200e 	.word	0x4770200e

00013a58 <rpc_at_client_message_free>:
   13a58:	f1a0b120 	.word	0xf1a0b120
   13a5c:	20030108 	.word	0x20030108
   13a60:	bee4f00a 	.word	0xbee4f00a
   13a64:	4770200e 	.word	0x4770200e

00013a68 <rpc_at_client_data_free>:
   13a68:	4601b118 	.word	0x4601b118
   13a6c:	f00a2003 	.word	0xf00a2003
   13a70:	200ebfef 	.word	0x200ebfef
   13a74:	bf004770 	.word	0xbf004770

00013a78 <logobj_event_handler>:
   13a78:	4b3bb530 	.word	0x4b3bb530
   13a7c:	681db085 	.word	0x681db085
   13a80:	d04c2d00 	.word	0xd04c2d00
   13a84:	0302f248 	.word	0x0302f248
   13a88:	d0534299 	.word	0xd0534299
   13a8c:	f248d91c 	.word	0xf248d91c
   13a90:	42990303 	.word	0x42990303
   13a94:	f249d05a 	.word	0xf249d05a
   13a98:	42990301 	.word	0x42990301
   13a9c:	2400d147 	.word	0x2400d147
   13aa0:	68026843 	.word	0x68026843
   13aa4:	4402e9cd 	.word	0x4402e9cd
   13aa8:	2300e9cd 	.word	0x2300e9cd
   13aac:	466969e8 	.word	0x466969e8
   13ab0:	685b6803 	.word	0x685b6803
   13ab4:	30014798 	.word	0x30014798
   13ab8:	4620d04e 	.word	0x4620d04e
   13abc:	f443682b 	.word	0xf443682b
   13ac0:	602b3380 	.word	0x602b3380
   13ac4:	bd30b005 	.word	0xbd30b005
   13ac8:	0301f248 	.word	0x0301f248
   13acc:	d12e4299 	.word	0xd12e4299
   13ad0:	2b0068c3 	.word	0x2b0068c3
   13ad4:	6828d135 	.word	0x6828d135
   13ad8:	0080f410 	.word	0x0080f410
   13adc:	682bd03e 	.word	0x682bd03e
   13ae0:	2b01b29b 	.word	0x2b01b29b
   13ae4:	682bd105 	.word	0x682bd105
   13ae8:	041b0c1b 	.word	0x041b0c1b
   13aec:	0302f043 	.word	0x0302f043
   13af0:	4b1e602b 	.word	0x4b1e602b
   13af4:	f002781a 	.word	0xf002781a
   13af8:	2a0001ff 	.word	0x2a0001ff
   13afc:	4a1cd031 	.word	0x4a1cd031
   13b00:	b9097811 	.word	0xb9097811
   13b04:	70112101 	.word	0x70112101
   13b08:	70182000 	.word	0x70182000
   13b0c:	f423682b 	.word	0xf423682b
   13b10:	602b0380 	.word	0x602b0380
   13b14:	f443682b 	.word	0xf443682b
   13b18:	602b0300 	.word	0x602b0300
   13b1c:	6800e7d2 	.word	0x6800e7d2
   13b20:	d0cf2800 	.word	0xd0cf2800
   13b24:	ff60f005 	.word	0xff60f005
   13b28:	b0054628 	.word	0xb0054628
   13b2c:	2000bd30 	.word	0x2000bd30
   13b30:	bd30b005 	.word	0xbd30b005
   13b34:	f413682b 	.word	0xf413682b
   13b38:	d00b0380 	.word	0xd00b0380
   13b3c:	280068c0 	.word	0x280068c0
   13b40:	230ed0e4 	.word	0x230ed0e4
   13b44:	606b2000 	.word	0x606b2000
   13b48:	bd30b005 	.word	0xbd30b005
   13b4c:	2b0168c3 	.word	0x2b0168c3
   13b50:	e7f6d1a5 	.word	0xe7f6d1a5
   13b54:	e7b54618 	.word	0xe7b54618
   13b58:	e7b32002 	.word	0xe7b32002
   13b5c:	606b230e 	.word	0x606b230e
   13b60:	4a03e7b0 	.word	0x4a03e7b0
   13b64:	e7cf7011 	.word	0xe7cf7011
   13b68:	200204a4 	.word	0x200204a4
   13b6c:	20027449 	.word	0x20027449
   13b70:	2002744a 	.word	0x2002744a

00013b74 <logobj_interface_init>:
   13b74:	b5102300 	.word	0xb5102300
   13b78:	4a084907 	.word	0x4a084907
   13b7c:	48094c08 	.word	0x48094c08
   13b80:	60037023 	.word	0x60037023
   13b84:	6013700b 	.word	0x6013700b
   13b88:	fef2f005 	.word	0xfef2f005
   13b8c:	bf183000 	.word	0xbf183000
   13b90:	42402001 	.word	0x42402001
   13b94:	bf00bd10 	.word	0xbf00bd10
   13b98:	20027449 	.word	0x20027449
   13b9c:	200204a0 	.word	0x200204a0
   13ba0:	2002744a 	.word	0x2002744a
   13ba4:	200204a4 	.word	0x200204a4

00013ba8 <logobj_interface_open>:
   13ba8:	e92d2300 	.word	0xe92d2300
   13bac:	286647f0 	.word	0x286647f0
   13bb0:	9300b082 	.word	0x9300b082
   13bb4:	2902d172 	.word	0x2902d172
   13bb8:	d16f4689 	.word	0xd16f4689
   13bbc:	2305f240 	.word	0x2305f240
   13bc0:	4692429a 	.word	0x4692429a
   13bc4:	4f48d16a 	.word	0x4f48d16a
   13bc8:	2d00683d 	.word	0x2d00683d
   13bcc:	4680d17c 	.word	0x4680d17c
   13bd0:	46684a46 	.word	0x46684a46
   13bd4:	f960f004 	.word	0xf960f004
   13bd8:	46069b00 	.word	0x46069b00
   13bdc:	d07d2b00 	.word	0xd07d2b00
   13be0:	22044629 	.word	0x22044629
   13be4:	603b4842 	.word	0x603b4842
   13be8:	fe1df010 	.word	0xfe1df010
   13bec:	46299c00 	.word	0x46299c00
   13bf0:	8903e9c4 	.word	0x8903e9c4
   13bf4:	a014f8c4 	.word	0xa014f8c4
   13bf8:	f005a801 	.word	0xf005a801
   13bfc:	2800febf 	.word	0x2800febf
   13c00:	2201d13c 	.word	0x2201d13c
   13c04:	9b012104 	.word	0x9b012104
   13c08:	73584d3a 	.word	0x73584d3a
   13c0c:	73d87398 	.word	0x73d87398
   13c10:	72987258 	.word	0x72987258
   13c14:	721972d8 	.word	0x721972d8
   13c18:	731a702a 	.word	0x731a702a
   13c1c:	46186822 	.word	0x46186822
   13c20:	0280f442 	.word	0x0280f442
   13c24:	f2476022 	.word	0xf2476022
   13c28:	f0050101 	.word	0xf0050101
   13c2c:	bb38febf 	.word	0xbb38febf
   13c30:	0200f44f 	.word	0x0200f44f
   13c34:	33fff04f 	.word	0x33fff04f
   13c38:	46304611 	.word	0x46304611
   13c3c:	f9d0f004 	.word	0xf9d0f004
   13c40:	b3104604 	.word	0xb3104604
   13c44:	2e009a00 	.word	0x2e009a00
   13c48:	f4436813 	.word	0xf4436813
   13c4c:	60133300 	.word	0x60133300
   13c50:	68139a00 	.word	0x68139a00
   13c54:	0380f423 	.word	0x0380f423
   13c58:	9a006013 	.word	0x9a006013
   13c5c:	f4236813 	.word	0xf4236813
   13c60:	60130300 	.word	0x60130300
   13c64:	2300da36 	.word	0x2300da36
   13c68:	603b4620 	.word	0x603b4620
   13c6c:	36fff04f 	.word	0x36fff04f
   13c70:	fa02f7fe 	.word	0xfa02f7fe
   13c74:	b0024630 	.word	0xb0024630
   13c78:	87f0e8bd 	.word	0x87f0e8bd
   13c7c:	e7e1240c 	.word	0xe7e1240c
   13c80:	f0059801 	.word	0xf0059801
   13c84:	2405fea9 	.word	0x2405fea9
   13c88:	4630e7dc 	.word	0x4630e7dc
   13c8c:	fa14f004 	.word	0xfa14f004
   13c90:	6844b150 	.word	0x6844b150
   13c94:	2300b144 	.word	0x2300b144
   13c98:	e7d36043 	.word	0xe7d36043
   13c9c:	f7fe2016 	.word	0xf7fe2016
   13ca0:	f04ff9eb 	.word	0xf04ff9eb
   13ca4:	e7e536ff 	.word	0xe7e536ff
   13ca8:	68139a00 	.word	0x68139a00
   13cac:	3300f443 	.word	0x3300f443
   13cb0:	9a006013 	.word	0x9a006013
   13cb4:	f4236813 	.word	0xf4236813
   13cb8:	60130380 	.word	0x60130380
   13cbc:	68139a00 	.word	0x68139a00
   13cc0:	0300f423 	.word	0x0300f423
   13cc4:	e7d56013 	.word	0xe7d56013
   13cc8:	f7fe2001 	.word	0xf7fe2001
   13ccc:	f04ff9d5 	.word	0xf04ff9d5
   13cd0:	e7cf36ff 	.word	0xe7cf36ff
   13cd4:	f0044630 	.word	0xf0044630
   13cd8:	e7c4f935 	.word	0xe7c4f935
   13cdc:	f7fe2018 	.word	0xf7fe2018
   13ce0:	f04ff9cb 	.word	0xf04ff9cb
   13ce4:	e7c536ff 	.word	0xe7c536ff
   13ce8:	200204a4 	.word	0x200204a4
   13cec:	00013695 	.word	0x00013695
   13cf0:	200204a0 	.word	0x200204a0
   13cf4:	20027449 	.word	0x20027449

00013cf8 <logobj_interface_read>:
   13cf8:	43f0e92d 	.word	0x43f0e92d
   13cfc:	2900b085 	.word	0x2900b085
   13d00:	2a00d05e 	.word	0x2a00d05e
   13d04:	dd5b4616 	.word	0xdd5b4616
   13d08:	4680461f 	.word	0x4680461f
   13d0c:	f004460d 	.word	0xf004460d
   13d10:	4604f9d3 	.word	0x4604f9d3
   13d14:	d0592800 	.word	0xd0592800
   13d18:	07ba69c0 	.word	0x07ba69c0
   13d1c:	68db6803 	.word	0x68db6803
   13d20:	4798d524 	.word	0x4798d524
   13d24:	d03b3001 	.word	0xd03b3001
   13d28:	69e06823 	.word	0x69e06823
   13d2c:	3380f413 	.word	0x3380f413
   13d30:	2100d038 	.word	0x2100d038
   13d34:	463a6823 	.word	0x463a6823
   13d38:	3380f423 	.word	0x3380f423
   13d3c:	e9cd6023 	.word	0xe9cd6023
   13d40:	e9cd1102 	.word	0xe9cd1102
   13d44:	68035600 	.word	0x68035600
   13d48:	689b4669 	.word	0x689b4669
   13d4c:	46054798 	.word	0x46054798
   13d50:	680369e0 	.word	0x680369e0
   13d54:	479868db 	.word	0x479868db
   13d58:	d0033001 	.word	0xd0033001
   13d5c:	f4436823 	.word	0xf4436823
   13d60:	60233380 	.word	0x60233380
   13d64:	b0054628 	.word	0xb0054628
   13d68:	83f0e8bd 	.word	0x83f0e8bd
   13d6c:	f0126822 	.word	0xf0126822
   13d70:	d1d65980 	.word	0xd1d65980
   13d74:	1c434798 	.word	0x1c434798
   13d78:	f44fd1d6 	.word	0xf44fd1d6
   13d7c:	6a233280 	.word	0x6a233280
   13d80:	2b004611 	.word	0x2b004611
   13d84:	4603bf08 	.word	0x4603bf08
   13d88:	f0044640 	.word	0xf0044640
   13d8c:	b158f929 	.word	0xb158f929
   13d90:	35fff04f 	.word	0x35fff04f
   13d94:	f970f7fe 	.word	0xf970f7fe
   13d98:	b0054628 	.word	0xb0054628
   13d9c:	83f0e8bd 	.word	0x83f0e8bd
   13da0:	e7f52023 	.word	0xe7f52023
   13da4:	e7d4461d 	.word	0xe7d4461d
   13da8:	f0044640 	.word	0xf0044640
   13dac:	4603f985 	.word	0x4603f985
   13db0:	d0b92800 	.word	0xd0b92800
   13db4:	28006840 	.word	0x28006840
   13db8:	f8c3d0b6 	.word	0xf8c3d0b6
   13dbc:	e7e79004 	.word	0xe7e79004
   13dc0:	f7fe2016 	.word	0xf7fe2016
   13dc4:	f04ff959 	.word	0xf04ff959
   13dc8:	e7cb35ff 	.word	0xe7cb35ff
   13dcc:	f7fe2009 	.word	0xf7fe2009
   13dd0:	f04ff953 	.word	0xf04ff953
   13dd4:	e7c535ff 	.word	0xe7c535ff

00013dd8 <logobj_interface_write>:
   13dd8:	41f0e92d 	.word	0x41f0e92d
   13ddc:	2900b082 	.word	0x2900b082
   13de0:	2a04d05b 	.word	0x2a04d05b
   13de4:	461ed159 	.word	0x461ed159
   13de8:	460d4607 	.word	0x460d4607
   13dec:	f964f004 	.word	0xf964f004
   13df0:	28004604 	.word	0x28004604
   13df4:	07b0d067 	.word	0x07b0d067
   13df8:	6823d526 	.word	0x6823d526
   13dfc:	d55e039b 	.word	0xd55e039b
   13e00:	68232600 	.word	0x68232600
   13e04:	f4232100 	.word	0xf4232100
   13e08:	60233300 	.word	0x60233300
   13e0c:	f8d5a801 	.word	0xf8d5a801
   13e10:	f0058000 	.word	0xf0058000
   13e14:	b9f8fdb3 	.word	0xb9f8fdb3
   13e18:	9b012504 	.word	0x9b012504
   13e1c:	0103f247 	.word	0x0103f247
   13e20:	800cf8c3 	.word	0x800cf8c3
   13e24:	72987258 	.word	0x72987258
   13e28:	721d72d8 	.word	0x721d72d8
   13e2c:	f0054618 	.word	0xf0054618
   13e30:	4680fdbd 	.word	0x4680fdbd
   13e34:	b9cebb40 	.word	0xb9cebb40
   13e38:	68234628 	.word	0x68234628
   13e3c:	3300f443 	.word	0x3300f443
   13e40:	b0026023 	.word	0xb0026023
   13e44:	81f0e8bd 	.word	0x81f0e8bd
   13e48:	00d96823 	.word	0x00d96823
   13e4c:	6823d4d5 	.word	0x6823d4d5
   13e50:	d536039a 	.word	0xd536039a
   13e54:	e7d42601 	.word	0xe7d42601
   13e58:	6823200c 	.word	0x6823200c
   13e5c:	3300f443 	.word	0x3300f443
   13e60:	f7fe6023 	.word	0xf7fe6023
   13e64:	f04ff909 	.word	0xf04ff909
   13e68:	e7ea30ff 	.word	0xe7ea30ff
   13e6c:	3280f44f 	.word	0x3280f44f
   13e70:	33fff04f 	.word	0x33fff04f
   13e74:	46384611 	.word	0x46384611
   13e78:	f8b2f004 	.word	0xf8b2f004
   13e7c:	6823b198 	.word	0x6823b198
   13e80:	3300f443 	.word	0x3300f443
   13e84:	e7ec6023 	.word	0xe7ec6023
   13e88:	f0059801 	.word	0xf0059801
   13e8c:	6823fda5 	.word	0x6823fda5
   13e90:	f4432005 	.word	0xf4432005
   13e94:	60233300 	.word	0x60233300
   13e98:	2016e7e3 	.word	0x2016e7e3
   13e9c:	f8ecf7fe 	.word	0xf8ecf7fe
   13ea0:	30fff04f 	.word	0x30fff04f
   13ea4:	4638e7cd 	.word	0x4638e7cd
   13ea8:	f906f004 	.word	0xf906f004
   13eac:	28004603 	.word	0x28004603
   13eb0:	6840d0c2 	.word	0x6840d0c2
   13eb4:	d0bf2800 	.word	0xd0bf2800
   13eb8:	8004f8c3 	.word	0x8004f8c3
   13ebc:	2073e7df 	.word	0x2073e7df
   13ec0:	2009e7cf 	.word	0x2009e7cf
   13ec4:	2009e7cd 	.word	0x2009e7cd
   13ec8:	f8d6f7fe 	.word	0xf8d6f7fe
   13ecc:	30fff04f 	.word	0x30fff04f
   13ed0:	bf00e7b7 	.word	0xbf00e7b7

00013ed4 <logobj_interface_setopt>:
   13ed4:	2901b5f0 	.word	0x2901b5f0
   13ed8:	d068b085 	.word	0xd068b085
   13edc:	f240461e 	.word	0xf240461e
   13ee0:	42992305 	.word	0x42992305
   13ee4:	8095f040 	.word	0x8095f040
   13ee8:	46154607 	.word	0x46154607
   13eec:	f8e4f004 	.word	0xf8e4f004
   13ef0:	28004604 	.word	0x28004604
   13ef4:	80b2f000 	.word	0x80b2f000
   13ef8:	d0192d01 	.word	0xd0192d01
   13efc:	d0102d02 	.word	0xd0102d02
   13f00:	6803252a 	.word	0x6803252a
   13f04:	0380f423 	.word	0x0380f423
   13f08:	68236023 	.word	0x68236023
   13f0c:	f4234628 	.word	0xf4234628
   13f10:	60230300 	.word	0x60230300
   13f14:	f8b0f7fe 	.word	0xf8b0f7fe
   13f18:	35fff04f 	.word	0x35fff04f
   13f1c:	b0054628 	.word	0xb0054628
   13f20:	b116bdf0 	.word	0xb116bdf0
   13f24:	2b019b0a 	.word	0x2b019b0a
   13f28:	6823d049 	.word	0x6823d049
   13f2c:	e7e92516 	.word	0xe7e92516
   13f30:	d0fa2e00 	.word	0xd0fa2e00
   13f34:	2b049b0a 	.word	0x2b049b0a
   13f38:	2100d1f7 	.word	0x2100d1f7
   13f3c:	f005a803 	.word	0xf005a803
   13f40:	4605fd1d 	.word	0x4605fd1d
   13f44:	d16a2800 	.word	0xd16a2800
   13f48:	22089803 	.word	0x22089803
   13f4c:	300c4629 	.word	0x300c4629
   13f50:	fc69f010 	.word	0xfc69f010
   13f54:	46319803 	.word	0x46319803
   13f58:	300c9a0a 	.word	0x300c9a0a
   13f5c:	fc39f010 	.word	0xfc39f010
   13f60:	98032308 	.word	0x98032308
   13f64:	0102f247 	.word	0x0102f247
   13f68:	72457203 	.word	0x72457203
   13f6c:	72c57285 	.word	0x72c57285
   13f70:	f4436823 	.word	0xf4436823
   13f74:	60230380 	.word	0x60230380
   13f78:	fd18f005 	.word	0xfd18f005
   13f7c:	d1512800 	.word	0xd1512800
   13f80:	0200f44f 	.word	0x0200f44f
   13f84:	33fff04f 	.word	0x33fff04f
   13f88:	46384611 	.word	0x46384611
   13f8c:	f828f004 	.word	0xf828f004
   13f90:	28004605 	.word	0x28004605
   13f94:	4638d13b 	.word	0x4638d13b
   13f98:	f88ef004 	.word	0xf88ef004
   13f9c:	d04f2800 	.word	0xd04f2800
   13fa0:	2b006843 	.word	0x2b006843
   13fa4:	2200d04c 	.word	0x2200d04c
   13fa8:	6042461d 	.word	0x6042461d
   13fac:	9c0ae02f 	.word	0x9c0ae02f
   13fb0:	f0049400 	.word	0xf0049400
   13fb4:	4605f8a9 	.word	0x4605f8a9
   13fb8:	b0054628 	.word	0xb0054628
   13fbc:	2100bdf0 	.word	0x2100bdf0
   13fc0:	7835a803 	.word	0x7835a803
   13fc4:	fcdaf005 	.word	0xfcdaf005
   13fc8:	2d01bb48 	.word	0x2d01bb48
   13fcc:	4b26bf08 	.word	0x4b26bf08
   13fd0:	0204f04f 	.word	0x0204f04f
   13fd4:	701dbf08 	.word	0x701dbf08
   13fd8:	98032300 	.word	0x98032300
   13fdc:	0101f247 	.word	0x0101f247
   13fe0:	60c57243 	.word	0x60c57243
   13fe4:	72c37283 	.word	0x72c37283
   13fe8:	68237202 	.word	0x68237202
   13fec:	0380f443 	.word	0x0380f443
   13ff0:	f0056023 	.word	0xf0056023
   13ff4:	4606fcdb 	.word	0x4606fcdb
   13ff8:	f44fb9a0 	.word	0xf44fb9a0
   13ffc:	f04f0200 	.word	0xf04f0200
   14000:	461133ff 	.word	0x461133ff
   14004:	f0034638 	.word	0xf0034638
   14008:	4605ffeb 	.word	0x4605ffeb
   1400c:	6823b180 	.word	0x6823b180
   14010:	202ae778 	.word	0x202ae778
   14014:	f830f7fe 	.word	0xf830f7fe
   14018:	35fff04f 	.word	0x35fff04f
   1401c:	6823e77e 	.word	0x6823e77e
   14020:	e76f250c 	.word	0xe76f250c
   14024:	f0059803 	.word	0xf0059803
   14028:	2505fcd7 	.word	0x2505fcd7
   1402c:	e7696823 	.word	0xe7696823
   14030:	f0044638 	.word	0xf0044638
   14034:	b140f841 	.word	0xb140f841
   14038:	b1356845 	.word	0xb1356845
   1403c:	e7e66046 	.word	0xe7e66046
   14040:	22044631 	.word	0x22044631
   14044:	f0104809 	.word	0xf0104809
   14048:	6823fbc4 	.word	0x6823fbc4
   1404c:	0380f423 	.word	0x0380f423
   14050:	68236023 	.word	0x68236023
   14054:	0300f423 	.word	0x0300f423
   14058:	e75f6023 	.word	0xe75f6023
   1405c:	f7fe2009 	.word	0xf7fe2009
   14060:	f04ff80b 	.word	0xf04ff80b
   14064:	e75935ff 	.word	0xe75935ff
   14068:	20027449 	.word	0x20027449
   1406c:	200204a0 	.word	0x200204a0

00014070 <logobj_interface_getopt>:
   14070:	2901b5f0 	.word	0x2901b5f0
   14074:	9e08b083 	.word	0x9e08b083
   14078:	461fd030 	.word	0x461fd030
   1407c:	2305f240 	.word	0x2305f240
   14080:	d1344299 	.word	0xd1344299
   14084:	f0044615 	.word	0xf0044615
   14088:	2800f817 	.word	0x2800f817
   1408c:	2d01d037 	.word	0x2d01d037
   14090:	2d02d015 	.word	0x2d02d015
   14094:	b387d10b 	.word	0xb387d10b
   14098:	b3736833 	.word	0xb3736833
   1409c:	22012300 	.word	0x22012300
   140a0:	491a4618 	.word	0x491a4618
   140a4:	70397809 	.word	0x70397809
   140a8:	b0036032 	.word	0xb0036032
   140ac:	2009bdf0 	.word	0x2009bdf0
   140b0:	ffe2f7fd 	.word	0xffe2f7fd
   140b4:	33fff04f 	.word	0x33fff04f
   140b8:	b0034618 	.word	0xb0034618
   140bc:	b1e7bdf0 	.word	0xb1e7bdf0
   140c0:	2b036833 	.word	0x2b036833
   140c4:	4638d919 	.word	0x4638d919
   140c8:	49112204 	.word	0x49112204
   140cc:	fb81f010 	.word	0xfb81f010
   140d0:	22042300 	.word	0x22042300
   140d4:	60324618 	.word	0x60324618
   140d8:	bdf0b003 	.word	0xbdf0b003
   140dc:	f0049600 	.word	0xf0049600
   140e0:	4603f849 	.word	0x4603f849
   140e4:	d1e32800 	.word	0xd1e32800
   140e8:	b0034618 	.word	0xb0034618
   140ec:	202abdf0 	.word	0x202abdf0
   140f0:	ffc2f7fd 	.word	0xffc2f7fd
   140f4:	33fff04f 	.word	0x33fff04f
   140f8:	2016e7de 	.word	0x2016e7de
   140fc:	2009e7d8 	.word	0x2009e7d8
   14100:	ffbaf7fd 	.word	0xffbaf7fd
   14104:	33fff04f 	.word	0x33fff04f
   14108:	bf00e7d6 	.word	0xbf00e7d6
   1410c:	2002744a 	.word	0x2002744a
   14110:	200204a0 	.word	0x200204a0

00014114 <logobj_interface_close>:
   14114:	4604b510 	.word	0x4604b510
   14118:	ffcef003 	.word	0xffcef003
   1411c:	4620b138 	.word	0x4620b138
   14120:	ff10f003 	.word	0xff10f003
   14124:	4a052300 	.word	0x4a052300
   14128:	60134618 	.word	0x60134618
   1412c:	2009bd10 	.word	0x2009bd10
   14130:	ffa2f7fd 	.word	0xffa2f7fd
   14134:	30fff04f 	.word	0x30fff04f
   14138:	bf00bd10 	.word	0xbf00bd10
   1413c:	200204a4 	.word	0x200204a4

00014140 <transport_reset>:
   14140:	47702000 	.word	0x47702000

00014144 <transport_data_free>:
   14144:	e9d34b0b 	.word	0xe9d34b0b
   14148:	44132300 	.word	0x44132300
   1414c:	d20d4298 	.word	0xd20d4298
   14150:	d80b4282 	.word	0xd80b4282
   14154:	4604b510 	.word	0x4604b510
   14158:	feecf005 	.word	0xfeecf005
   1415c:	4a06b140 	.word	0x4a06b140
   14160:	60026084 	.word	0x60026084
   14164:	4010e8bd 	.word	0x4010e8bd
   14168:	be2cf005 	.word	0xbe2cf005
   1416c:	b9eef00b 	.word	0xb9eef00b
   14170:	bf00bd10 	.word	0xbf00bd10
   14174:	200204a8 	.word	0x200204a8
   14178:	00020001 	.word	0x00020001

0001417c <rpc_transport_ipc_init>:
   1417c:	d02b2800 	.word	0xd02b2800
   14180:	b089b530 	.word	0xb089b530
   14184:	4669aa01 	.word	0x4669aa01
   14188:	f0054604 	.word	0xf0054604
   1418c:	4603fd31 	.word	0x4603fd31
   14190:	4a13b140 	.word	0x4a13b140
   14194:	0028f104 	.word	0x0028f104
   14198:	e882c803 	.word	0xe882c803
   1419c:	46180003 	.word	0x46180003
   141a0:	bd30b009 	.word	0xbd30b009
   141a4:	1200e9dd 	.word	0x1200e9dd
   141a8:	f0004620 	.word	0xf0004620
   141ac:	4603f9ab 	.word	0x4603f9ab
   141b0:	d1ee2800 	.word	0xd1ee2800
   141b4:	490c4b0b 	.word	0x490c4b0b
   141b8:	4a0d480c 	.word	0x4a0d480c
   141bc:	4d0d9303 	.word	0x4d0d9303
   141c0:	91044b0d 	.word	0x91044b0d
   141c4:	490d9005 	.word	0x490d9005
   141c8:	9307a802 	.word	0x9307a802
   141cc:	92029506 	.word	0x92029506
   141d0:	fa3af00a 	.word	0xfa3af00a
   141d4:	e7dc4603 	.word	0xe7dc4603
   141d8:	4618230e 	.word	0x4618230e
   141dc:	bf004770 	.word	0xbf004770
   141e0:	200204a8 	.word	0x200204a8
   141e4:	00019ec5 	.word	0x00019ec5
   141e8:	00019f95 	.word	0x00019f95
   141ec:	00014b21 	.word	0x00014b21
   141f0:	00019dc5 	.word	0x00019dc5
   141f4:	00014145 	.word	0x00014145
   141f8:	00014141 	.word	0x00014141
   141fc:	200204b0 	.word	0x200204b0

00014200 <rpc_transport_rx_handle>:
   14200:	b508b160 	.word	0xb508b160
   14204:	b2db6843 	.word	0xb2db6843
   14208:	d00e2b02 	.word	0xd00e2b02
   1420c:	0c1b6803 	.word	0x0c1b6803
   14210:	d0052b02 	.word	0xd0052b02
   14214:	d00e2b04 	.word	0xd00e2b04
   14218:	bd082000 	.word	0xbd082000
   1421c:	47702000 	.word	0x47702000
   14220:	f00b6880 	.word	0xf00b6880
   14224:	2000f993 	.word	0x2000f993
   14228:	4601bd08 	.word	0x4601bd08
   1422c:	4008e8bd 	.word	0x4008e8bd
   14230:	f00a4803 	.word	0xf00a4803
   14234:	4802b8fb 	.word	0x4802b8fb
   14238:	fa66f00a 	.word	0xfa66f00a
   1423c:	bd082000 	.word	0xbd082000
   14240:	200204b0 	.word	0x200204b0
   14244:	bf004770 	.word	0xbf004770

00014248 <rpc_transport_ipc_fault_handler>:
   14248:	b916f000 	.word	0xb916f000

0001424c <nrf_socket>:
   1424c:	4604b570 	.word	0x4604b570
   14250:	4616460d 	.word	0x4616460d
   14254:	f8bef007 	.word	0xf8bef007
   14258:	6803b130 	.word	0x6803b130
   1425c:	46294632 	.word	0x46294632
   14260:	e8bd4620 	.word	0xe8bd4620
   14264:	47184070 	.word	0x47184070
   14268:	30fff04f 	.word	0x30fff04f
   1426c:	bf00bd70 	.word	0xbf00bd70

00014270 <nrf_close>:
   14270:	4604b510 	.word	0x4604b510
   14274:	f902f007 	.word	0xf902f007
   14278:	6843b120 	.word	0x6843b120
   1427c:	e8bd4620 	.word	0xe8bd4620
   14280:	47184010 	.word	0x47184010
   14284:	30fff04f 	.word	0x30fff04f
   14288:	bf00bd10 	.word	0xbf00bd10

0001428c <nrf_sendto>:
   1428c:	47f0e92d 	.word	0x47f0e92d
   14290:	e9dd460d 	.word	0xe9dd460d
   14294:	46168908 	.word	0x46168908
   14298:	4604461f 	.word	0x4604461f
   1429c:	f8eef007 	.word	0xf8eef007
   142a0:	e9cdb158 	.word	0xe9cdb158
   142a4:	f8d08908 	.word	0xf8d08908
   142a8:	463be008 	.word	0x463be008
   142ac:	46294632 	.word	0x46294632
   142b0:	46f44620 	.word	0x46f44620
   142b4:	47f0e8bd 	.word	0x47f0e8bd
   142b8:	f04f4760 	.word	0xf04f4760
   142bc:	e8bd30ff 	.word	0xe8bd30ff
   142c0:	bf0087f0 	.word	0xbf0087f0

000142c4 <nrf_send>:
   142c4:	41f0e92d 	.word	0x41f0e92d
   142c8:	460eb082 	.word	0x460eb082
   142cc:	46984617 	.word	0x46984617
   142d0:	f0074605 	.word	0xf0074605
   142d4:	b160f8d3 	.word	0xb160f8d3
   142d8:	20004604 	.word	0x20004604
   142dc:	0000e9cd 	.word	0x0000e9cd
   142e0:	463a4643 	.word	0x463a4643
   142e4:	46284631 	.word	0x46284631
   142e8:	47a068a4 	.word	0x47a068a4
   142ec:	e8bdb002 	.word	0xe8bdb002
   142f0:	f04f81f0 	.word	0xf04f81f0
   142f4:	e7f930ff 	.word	0xe7f930ff

000142f8 <nrf_recvfrom>:
   142f8:	47f0e92d 	.word	0x47f0e92d
   142fc:	e9dd460d 	.word	0xe9dd460d
   14300:	46168908 	.word	0x46168908
   14304:	4604461f 	.word	0x4604461f
   14308:	f8b8f007 	.word	0xf8b8f007
   1430c:	e9cdb158 	.word	0xe9cdb158
   14310:	f8d08908 	.word	0xf8d08908
   14314:	463be00c 	.word	0x463be00c
   14318:	46294632 	.word	0x46294632
   1431c:	46f44620 	.word	0x46f44620
   14320:	47f0e8bd 	.word	0x47f0e8bd
   14324:	f04f4760 	.word	0xf04f4760
   14328:	e8bd30ff 	.word	0xe8bd30ff
   1432c:	bf0087f0 	.word	0xbf0087f0

00014330 <nrf_recv>:
   14330:	41f0e92d 	.word	0x41f0e92d
   14334:	460eb082 	.word	0x460eb082
   14338:	46984617 	.word	0x46984617
   1433c:	f0074605 	.word	0xf0074605
   14340:	b160f89d 	.word	0xb160f89d
   14344:	20004604 	.word	0x20004604
   14348:	0000e9cd 	.word	0x0000e9cd
   1434c:	463a4643 	.word	0x463a4643
   14350:	46284631 	.word	0x46284631
   14354:	47a068e4 	.word	0x47a068e4
   14358:	e8bdb002 	.word	0xe8bdb002
   1435c:	f04f81f0 	.word	0xf04f81f0
   14360:	e7f930ff 	.word	0xe7f930ff

00014364 <nrf_connect>:
   14364:	460db570 	.word	0x460db570
   14368:	46044616 	.word	0x46044616
   1436c:	f886f007 	.word	0xf886f007
   14370:	6943b130 	.word	0x6943b130
   14374:	46294632 	.word	0x46294632
   14378:	e8bd4620 	.word	0xe8bd4620
   1437c:	47184070 	.word	0x47184070
   14380:	30fff04f 	.word	0x30fff04f
   14384:	bf00bd70 	.word	0xbf00bd70

00014388 <nrf_listen>:
   14388:	460db570 	.word	0x460db570
   1438c:	f0074604 	.word	0xf0074604
   14390:	b128f875 	.word	0xb128f875
   14394:	46296983 	.word	0x46296983
   14398:	e8bd4620 	.word	0xe8bd4620
   1439c:	47184070 	.word	0x47184070
   143a0:	30fff04f 	.word	0x30fff04f
   143a4:	bf00bd70 	.word	0xbf00bd70

000143a8 <nrf_accept>:
   143a8:	41f0e92d 	.word	0x41f0e92d
   143ac:	4616460d 	.word	0x4616460d
   143b0:	f0074604 	.word	0xf0074604
   143b4:	b140f863 	.word	0xb140f863
   143b8:	463269c7 	.word	0x463269c7
   143bc:	46204629 	.word	0x46204629
   143c0:	e8bd46bc 	.word	0xe8bd46bc
   143c4:	230041f0 	.word	0x230041f0
   143c8:	f04f4760 	.word	0xf04f4760
   143cc:	e8bd30ff 	.word	0xe8bd30ff
   143d0:	bf0081f0 	.word	0xbf0081f0

000143d4 <nrf_bind>:
   143d4:	460db570 	.word	0x460db570
   143d8:	46044616 	.word	0x46044616
   143dc:	f84ef007 	.word	0xf84ef007
   143e0:	6903b130 	.word	0x6903b130
   143e4:	46294632 	.word	0x46294632
   143e8:	e8bd4620 	.word	0xe8bd4620
   143ec:	47184070 	.word	0x47184070
   143f0:	30fff04f 	.word	0x30fff04f
   143f4:	bf00bd70 	.word	0xbf00bd70

000143f8 <nrf_setsockopt>:
   143f8:	41f0e92d 	.word	0x41f0e92d
   143fc:	8018f8dd 	.word	0x8018f8dd
   14400:	4616460d 	.word	0x4616460d
   14404:	4604461f 	.word	0x4604461f
   14408:	f838f007 	.word	0xf838f007
   1440c:	f8cdb158 	.word	0xf8cdb158
   14410:	f8d08018 	.word	0xf8d08018
   14414:	463be020 	.word	0x463be020
   14418:	46294632 	.word	0x46294632
   1441c:	46f44620 	.word	0x46f44620
   14420:	41f0e8bd 	.word	0x41f0e8bd
   14424:	f04f4760 	.word	0xf04f4760
   14428:	e8bd30ff 	.word	0xe8bd30ff
   1442c:	bf0081f0 	.word	0xbf0081f0

00014430 <nrf_getsockopt>:
   14430:	41f0e92d 	.word	0x41f0e92d
   14434:	8018f8dd 	.word	0x8018f8dd
   14438:	4616460d 	.word	0x4616460d
   1443c:	4604461f 	.word	0x4604461f
   14440:	f81cf007 	.word	0xf81cf007
   14444:	f8cdb158 	.word	0xf8cdb158
   14448:	f8d08018 	.word	0xf8d08018
   1444c:	463be024 	.word	0x463be024
   14450:	46294632 	.word	0x46294632
   14454:	46f44620 	.word	0x46f44620
   14458:	41f0e8bd 	.word	0x41f0e8bd
   1445c:	f04f4760 	.word	0xf04f4760
   14460:	e8bd30ff 	.word	0xe8bd30ff
   14464:	bf0081f0 	.word	0xbf0081f0

00014468 <nrf_getaddrinfo>:
   14468:	b8f8f00d 	.word	0xb8f8f00d

0001446c <nrf_freeaddrinfo>:
   1446c:	b8f8f00d 	.word	0xb8f8f00d

00014470 <nrf_poll>:
   14470:	b8f8f00d 	.word	0xb8f8f00d

00014474 <nrf_fcntl>:
   14474:	b950f00d 	.word	0xb950f00d

00014478 <bsd_platform_error_handler>:
   14478:	f7f8b508 	.word	0xf7f8b508
   1447c:	bd08ff3f 	.word	0xbd08ff3f

00014480 <bsd_init>:
   14480:	4c06b510 	.word	0x4c06b510
   14484:	b92b7823 	.word	0xb92b7823
   14488:	ff38f006 	.word	0xff38f006
   1448c:	2301b908 	.word	0x2301b908
   14490:	bd107023 	.word	0xbd107023
   14494:	30fff04f 	.word	0x30fff04f
   14498:	bf00bd10 	.word	0xbf00bd10
   1449c:	2002744b 	.word	0x2002744b

000144a0 <symbol_000fa2a>:
   144a0:	2300b110 	.word	0x2300b110
   144a4:	3300e9c0 	.word	0x3300e9c0
   144a8:	bf004770 	.word	0xbf004770

000144ac <symbol_00066b4>:
   144ac:	d0052802 	.word	0xd0052802
   144b0:	28034b03 	.word	0x28034b03
   144b4:	4618bf0c 	.word	0x4618bf0c
   144b8:	47702000 	.word	0x47702000
   144bc:	47704801 	.word	0x47704801
   144c0:	00026888 	.word	0x00026888
   144c4:	00026858 	.word	0x00026858

000144c8 <symbol_000194a>:
   144c8:	b159b160 	.word	0xb159b160
   144cc:	6806b570 	.word	0x6806b570
   144d0:	6a4bb966 	.word	0x6a4bb966
   144d4:	460d4604 	.word	0x460d4604
   144d8:	60604798 	.word	0x60604798
   144dc:	6025b120 	.word	0x6025b120
   144e0:	bd704630 	.word	0xbd704630
   144e4:	47704802 	.word	0x47704802
   144e8:	bd704802 	.word	0xbd704802
   144ec:	bd704800 	.word	0xbd704800
   144f0:	ffffc180 	.word	0xffffc180
   144f4:	ffffc080 	.word	0xffffc080

000144f8 <symbol_00005ae>:
   144f8:	6800b110 	.word	0x6800b110
   144fc:	7800b100 	.word	0x7800b100
   14500:	bf004770 	.word	0xbf004770

00014504 <rpc_transport_ipc_rx_init>:
   14504:	f0002800 	.word	0xf0002800
   14508:	e92d80ff 	.word	0xe92d80ff
   1450c:	68054ff0 	.word	0x68054ff0
   14510:	2d00b095 	.word	0x2d00b095
   14514:	80eef000 	.word	0x80eef000
   14518:	2b006883 	.word	0x2b006883
   1451c:	80eaf000 	.word	0x80eaf000
   14520:	2f006907 	.word	0x2f006907
   14524:	80e6f000 	.word	0x80e6f000
   14528:	2c006a84 	.word	0x2c006a84
   1452c:	80e2f000 	.word	0x80e2f000
   14530:	2c1b6844 	.word	0x2c1b6844
   14534:	80e3f240 	.word	0x80e3f240
   14538:	2c0b68c4 	.word	0x2c0b68c4
   1453c:	80dff240 	.word	0x80dff240
   14540:	e014f8d0 	.word	0xe014f8d0
   14544:	0f17f1be 	.word	0x0f17f1be
   14548:	80d9f240 	.word	0x80d9f240
   1454c:	46042600 	.word	0x46042600
   14550:	e9cd486f 	.word	0xe9cd486f
   14554:	f8df1200 	.word	0xf8df1200
   14558:	496ea1d8 	.word	0x496ea1d8
   1455c:	6ba08006 	.word	0x6ba08006
   14560:	c1d0f8df 	.word	0xc1d0f8df
   14564:	81d0f8df 	.word	0x81d0f8df
   14568:	b1d0f8df 	.word	0xb1d0f8df
   1456c:	91d0f8df 	.word	0x91d0f8df
   14570:	600e4672 	.word	0x600e4672
   14574:	0000f8ca 	.word	0x0000f8ca
   14578:	46384631 	.word	0x46384631
   1457c:	6000f8cc 	.word	0x6000f8cc
   14580:	3000f8cb 	.word	0x3000f8cb
   14584:	6000f8c8 	.word	0x6000f8c8
   14588:	6000f8c9 	.word	0x6000f8c9
   1458c:	f94bf010 	.word	0xf94bf010
   14590:	463869e3 	.word	0x463869e3
   14594:	69a3603b 	.word	0x69a3603b
   14598:	f001607b 	.word	0xf001607b
   1459c:	2201fd45 	.word	0x2201fd45
   145a0:	0c04f04f 	.word	0x0c04f04f
   145a4:	495d4b5c 	.word	0x495d4b5c
   145a8:	5610f8c3 	.word	0x5610f8c3
   145ac:	20806809 	.word	0x20806809
   145b0:	495b9104 	.word	0x495b9104
   145b4:	e010f8dd 	.word	0xe010f8dd
   145b8:	6614f8c3 	.word	0x6614f8c3
   145bc:	702e6809 	.word	0x702e6809
   145c0:	706e9103 	.word	0x706e9103
   145c4:	70aa70ee 	.word	0x70aa70ee
   145c8:	6aa19903 	.word	0x6aa19903
   145cc:	e000f8db 	.word	0xe000f8db
   145d0:	6ae16069 	.word	0x6ae16069
   145d4:	60a99c01 	.word	0x60a99c01
   145d8:	9c0060ec 	.word	0x9c0060ec
   145dc:	61af4951 	.word	0x61af4951
   145e0:	e014f8c5 	.word	0xe014f8c5
   145e4:	f8c3612c 	.word	0xf8c3612c
   145e8:	680c2590 	.word	0x680c2590
   145ec:	6192f5a1 	.word	0x6192f5a1
   145f0:	9c059405 	.word	0x9c059405
   145f4:	c598f8c3 	.word	0xc598f8c3
   145f8:	4498f8d1 	.word	0x4498f8d1
   145fc:	6780f44f 	.word	0x6780f44f
   14600:	9c069406 	.word	0x9c069406
   14604:	f8c32410 	.word	0xf8c32410
   14608:	f8d145a0 	.word	0xf8d145a0
   1460c:	4d4644a0 	.word	0x4d4644a0
   14610:	9c079407 	.word	0x9c079407
   14614:	f8c32440 	.word	0xf8c32440
   14618:	f8d145a8 	.word	0xf8d145a8
   1461c:	940844a8 	.word	0x940844a8
   14620:	f8c39c08 	.word	0xf8c39c08
   14624:	f8d105ac 	.word	0xf8d105ac
   14628:	900904ac 	.word	0x900904ac
   1462c:	f8c39809 	.word	0xf8c39809
   14630:	68086100 	.word	0x68086100
   14634:	980a900a 	.word	0x980a900a
   14638:	6108f8c3 	.word	0x6108f8c3
   1463c:	900b6888 	.word	0x900b6888
   14640:	f8c3980b 	.word	0xf8c3980b
   14644:	69086110 	.word	0x69086110
   14648:	980c900c 	.word	0x980c900c
   1464c:	6118f8c3 	.word	0x6118f8c3
   14650:	900d6988 	.word	0x900d6988
   14654:	f8c3980d 	.word	0xf8c3980d
   14658:	69c8611c 	.word	0x69c8611c
   1465c:	7101f501 	.word	0x7101f501
   14660:	980e900e 	.word	0x980e900e
   14664:	0304f8d3 	.word	0x0304f8d3
   14668:	f8c34310 	.word	0xf8c34310
   1466c:	680c0304 	.word	0x680c0304
   14670:	940f482e 	.word	0x940f482e
   14674:	f8d39c0f 	.word	0xf8d39c0f
   14678:	ea444304 	.word	0xea444304
   1467c:	f8c3040c 	.word	0xf8c3040c
   14680:	680c4304 	.word	0x680c4304
   14684:	9c109410 	.word	0x9c109410
   14688:	4304f8d3 	.word	0x4304f8d3
   1468c:	0410f044 	.word	0x0410f044
   14690:	4304f8c3 	.word	0x4304f8c3
   14694:	9411680c 	.word	0x9411680c
   14698:	f8d39c11 	.word	0xf8d39c11
   1469c:	f0444304 	.word	0xf0444304
   146a0:	f8c30440 	.word	0xf8c30440
   146a4:	680c4304 	.word	0x680c4304
   146a8:	9c129412 	.word	0x9c129412
   146ac:	4304f8d3 	.word	0x4304f8d3
   146b0:	0480f044 	.word	0x0480f044
   146b4:	4304f8c3 	.word	0x4304f8c3
   146b8:	3000f8da 	.word	0x3000f8da
   146bc:	015b6809 	.word	0x015b6809
   146c0:	b2db9113 	.word	0xb2db9113
   146c4:	f8c89913 	.word	0xf8c89913
   146c8:	f8802000 	.word	0xf8802000
   146cc:	f8c0332a 	.word	0xf8c0332a
   146d0:	60477184 	.word	0x60477184
   146d4:	f8c59602 	.word	0xf8c59602
   146d8:	f8d56610 	.word	0xf8d56610
   146dc:	93023610 	.word	0x93023610
   146e0:	f8d89b02 	.word	0xf8d89b02
   146e4:	2b013000 	.word	0x2b013000
   146e8:	f8d9d0fb 	.word	0xf8d9d0fb
   146ec:	b0150000 	.word	0xb0150000
   146f0:	8ff0e8bd 	.word	0x8ff0e8bd
   146f4:	000ef24c 	.word	0x000ef24c
   146f8:	e8bdb015 	.word	0xe8bdb015
   146fc:	f24c8ff0 	.word	0xf24c8ff0
   14700:	b0150009 	.word	0xb0150009
   14704:	8ff0e8bd 	.word	0x8ff0e8bd
   14708:	000ef24c 	.word	0x000ef24c
   1470c:	bf004770 	.word	0xbf004770
   14710:	20025e18 	.word	0x20025e18
   14714:	200204c0 	.word	0x200204c0
   14718:	4002a000 	.word	0x4002a000
   1471c:	4002a610 	.word	0x4002a610
   14720:	4002a614 	.word	0x4002a614
   14724:	4002a590 	.word	0x4002a590
   14728:	40005000 	.word	0x40005000
   1472c:	e000e100 	.word	0xe000e100
   14730:	200204b8 	.word	0x200204b8
   14734:	200204c4 	.word	0x200204c4
   14738:	200204bc 	.word	0x200204bc
   1473c:	200204c8 	.word	0x200204c8
   14740:	200204b4 	.word	0x200204b4

00014744 <IPC_IRQHandler>:
   14744:	4ff0e92d 	.word	0x4ff0e92d
   14748:	6580f44f 	.word	0x6580f44f
   1474c:	b0874ca7 	.word	0xb0874ca7
   14750:	5084f8c4 	.word	0x5084f8c4
   14754:	8f4ff3bf 	.word	0x8f4ff3bf
   14758:	8f6ff3bf 	.word	0x8f6ff3bf
   1475c:	f8c44ea4 	.word	0xf8c44ea4
   14760:	f8d65184 	.word	0xf8d65184
   14764:	061f330c 	.word	0x061f330c
   14768:	80c8f100 	.word	0x80c8f100
   1476c:	f8d34ba0 	.word	0xf8d34ba0
   14770:	07d0230c 	.word	0x07d0230c
   14774:	80d4f100 	.word	0x80d4f100
   14778:	230cf8d3 	.word	0x230cf8d3
   1477c:	0240f012 	.word	0x0240f012
   14780:	80b6f040 	.word	0x80b6f040
   14784:	130cf8d3 	.word	0x130cf8d3
   14788:	f1000749 	.word	0xf1000749
   1478c:	f8d380e6 	.word	0xf8d380e6
   14790:	06da330c 	.word	0x06da330c
   14794:	809df140 	.word	0x809df140
   14798:	4a952100 	.word	0x4a952100
   1479c:	f8c24b95 	.word	0xf8c24b95
   147a0:	681b1110 	.word	0x681b1110
   147a4:	9b049304 	.word	0x9b049304
   147a8:	8270f8df 	.word	0x8270f8df
   147ac:	f8df4f92 	.word	0xf8df4f92
   147b0:	f8d89270 	.word	0xf8d89270
   147b4:	f8daa000 	.word	0xf8daa000
   147b8:	29001000 	.word	0x29001000
   147bc:	2200d03f 	.word	0x2200d03f
   147c0:	e0024614 	.word	0xe0024614
   147c4:	428c3401 	.word	0x428c3401
   147c8:	eb0ad227 	.word	0xeb0ad227
   147cc:	68ab05c4 	.word	0x68ab05c4
   147d0:	d0f72b00 	.word	0xd0f72b00
   147d4:	b2f6686e 	.word	0xb2f6686e
   147d8:	d1f32e01 	.word	0xd1f32e01
   147dc:	f8b96868 	.word	0xf8b96868
   147e0:	ebb33000 	.word	0xebb33000
   147e4:	d1ed4f10 	.word	0xd1ed4f10
   147e8:	3301686a 	.word	0x3301686a
   147ec:	02fff022 	.word	0x02fff022
   147f0:	0202f042 	.word	0x0202f042
   147f4:	68a8606a 	.word	0x68a8606a
   147f8:	3000f8a9 	.word	0x3000f8a9
   147fc:	fd00f7ff 	.word	0xfd00f7ff
   14800:	b9284632 	.word	0xb9284632
   14804:	f023686b 	.word	0xf023686b
   14808:	f04303ff 	.word	0xf04303ff
   1480c:	606b0303 	.word	0x606b0303
   14810:	1000f8da 	.word	0x1000f8da
   14814:	428c3401 	.word	0x428c3401
   14818:	2a00d3d7 	.word	0x2a00d3d7
   1481c:	b171d1cd 	.word	0xb171d1cd
   14820:	eb0a4613 	.word	0xeb0a4613
   14824:	689002c3 	.word	0x689002c3
   14828:	b1303301 	.word	0xb1303301
   1482c:	b004f8d2 	.word	0xb004f8d2
   14830:	fb8bfa5f 	.word	0xfb8bfa5f
   14834:	0f01f1bb 	.word	0x0f01f1bb
   14838:	428bd003 	.word	0x428bd003
   1483c:	f04fd1f1 	.word	0xf04fd1f1
   14840:	f8d70b00 	.word	0xf8d70b00
   14844:	f8daa000 	.word	0xf8daa000
   14848:	2a002000 	.word	0x2a002000
   1484c:	2100d03d 	.word	0x2100d03d
   14850:	e002460c 	.word	0xe002460c
   14854:	42943401 	.word	0x42943401
   14858:	eb0ad227 	.word	0xeb0ad227
   1485c:	68ab05c4 	.word	0x68ab05c4
   14860:	d0f72b00 	.word	0xd0f72b00
   14864:	b2f6686e 	.word	0xb2f6686e
   14868:	d1f32e01 	.word	0xd1f32e01
   1486c:	f8b96868 	.word	0xf8b96868
   14870:	ebb33000 	.word	0xebb33000
   14874:	d1ed4f10 	.word	0xd1ed4f10
   14878:	3301686a 	.word	0x3301686a
   1487c:	02fff022 	.word	0x02fff022
   14880:	0202f042 	.word	0x0202f042
   14884:	68a8606a 	.word	0x68a8606a
   14888:	3000f8a9 	.word	0x3000f8a9
   1488c:	fcb8f7ff 	.word	0xfcb8f7ff
   14890:	b9284631 	.word	0xb9284631
   14894:	f022686a 	.word	0xf022686a
   14898:	f04303ff 	.word	0xf04303ff
   1489c:	606b0303 	.word	0x606b0303
   148a0:	2000f8da 	.word	0x2000f8da
   148a4:	42943401 	.word	0x42943401
   148a8:	2900d3d7 	.word	0x2900d3d7
   148ac:	b162d1cd 	.word	0xb162d1cd
   148b0:	eb0a460b 	.word	0xeb0a460b
   148b4:	688801c3 	.word	0x688801c3
   148b8:	b1203301 	.word	0xb1203301
   148bc:	b2c96849 	.word	0xb2c96849
   148c0:	f43f2901 	.word	0xf43f2901
   148c4:	4293af76 	.word	0x4293af76
   148c8:	f1bbd1f3 	.word	0xf1bbd1f3
   148cc:	f47f0f00 	.word	0xf47f0f00
   148d0:	f44faf70 	.word	0xf44faf70
   148d4:	4b496180 	.word	0x4b496180
   148d8:	681b4a44 	.word	0x681b4a44
   148dc:	b2db015b 	.word	0xb2db015b
   148e0:	332af882 	.word	0x332af882
   148e4:	1184f8c2 	.word	0x1184f8c2
   148e8:	b0076051 	.word	0xb0076051
   148ec:	8ff0e8bd 	.word	0x8ff0e8bd
   148f0:	4b432206 	.word	0x4b432206
   148f4:	b007601a 	.word	0xb007601a
   148f8:	8ff0e8bd 	.word	0x8ff0e8bd
   148fc:	fc7cf001 	.word	0xfc7cf001
   14900:	fde8f001 	.word	0xfde8f001
   14904:	d1492800 	.word	0xd1492800
   14908:	f8c64b3e 	.word	0xf8c64b3e
   1490c:	681b011c 	.word	0x681b011c
   14910:	9b019301 	.word	0x9b019301
   14914:	f8d34b36 	.word	0xf8d34b36
   14918:	07d0230c 	.word	0x07d0230c
   1491c:	af2cf57f 	.word	0xaf2cf57f
   14920:	f2482000 	.word	0xf2482000
   14924:	49380202 	.word	0x49380202
   14928:	0100f8c3 	.word	0x0100f8c3
   1492c:	91026809 	.word	0x91026809
   14930:	f8d39902 	.word	0xf8d39902
   14934:	42933614 	.word	0x42933614
   14938:	d81ed040 	.word	0xd81ed040
   1493c:	d04f2b00 	.word	0xd04f2b00
   14940:	d9422b02 	.word	0xd9422b02
   14944:	0201f248 	.word	0x0201f248
   14948:	d1494293 	.word	0xd1494293
   1494c:	22072003 	.word	0x22072003
   14950:	4b2e492b 	.word	0x4b2e492b
   14954:	601a6008 	.word	0x601a6008
   14958:	4d29e7cd 	.word	0x4d29e7cd
   1495c:	f8c36829 	.word	0xf8c36829
   14960:	29012108 	.word	0x29012108
   14964:	d05d492a 	.word	0xd05d492a
   14968:	9203680a 	.word	0x9203680a
   1496c:	f8d39a03 	.word	0xf8d39a03
   14970:	06db330c 	.word	0x06db330c
   14974:	af10f53f 	.word	0xaf10f53f
   14978:	4a26e716 	.word	0x4a26e716
   1497c:	d8144293 	.word	0xd8144293
   14980:	6f88f1b3 	.word	0x6f88f1b3
   14984:	f248d814 	.word	0xf248d814
   14988:	42930203 	.word	0x42930203
   1498c:	2003d128 	.word	0x2003d128
   14990:	491b2204 	.word	0x491b2204
   14994:	60084b1d 	.word	0x60084b1d
   14998:	e7ac601a 	.word	0xe7ac601a
   1499c:	f88423e0 	.word	0xf88423e0
   149a0:	6065332a 	.word	0x6065332a
   149a4:	e8bdb007 	.word	0xe8bdb007
   149a8:	4a1b8ff0 	.word	0x4a1b8ff0
   149ac:	d1174293 	.word	0xd1174293
   149b0:	49132003 	.word	0x49132003
   149b4:	60084a15 	.word	0x60084a15
   149b8:	e79c6013 	.word	0xe79c6013
   149bc:	22062003 	.word	0x22062003
   149c0:	4b12490f 	.word	0x4b12490f
   149c4:	601a6008 	.word	0x601a6008
   149c8:	2303e795 	.word	0x2303e795
   149cc:	490c4618 	.word	0x490c4618
   149d0:	600b4a0e 	.word	0x600b4a0e
   149d4:	b0076013 	.word	0xb0076013
   149d8:	4ff0e8bd 	.word	0x4ff0e8bd
   149dc:	bc34f7ff 	.word	0xbc34f7ff
   149e0:	49072303 	.word	0x49072303
   149e4:	600b4a09 	.word	0x600b4a09
   149e8:	e7846013 	.word	0xe7846013
   149ec:	e000e100 	.word	0xe000e100
   149f0:	4002a000 	.word	0x4002a000
   149f4:	4002a110 	.word	0x4002a110
   149f8:	200204c0 	.word	0x200204c0
   149fc:	200204b8 	.word	0x200204b8
   14a00:	200204bc 	.word	0x200204bc
   14a04:	4002a11c 	.word	0x4002a11c
   14a08:	4002a100 	.word	0x4002a100
   14a0c:	200204b4 	.word	0x200204b4
   14a10:	4002a108 	.word	0x4002a108
   14a14:	04400004 	.word	0x04400004
   14a18:	05500001 	.word	0x05500001
   14a1c:	200204c4 	.word	0x200204c4
   14a20:	20025e18 	.word	0x20025e18
   14a24:	680b4a37 	.word	0x680b4a37
   14a28:	93056812 	.word	0x93056812
   14a2c:	48366893 	.word	0x48366893
   14a30:	60034936 	.word	0x60034936
   14a34:	9a056854 	.word	0x9a056854
   14a38:	b16b600c 	.word	0xb16b600c
   14a3c:	681bb164 	.word	0x681bb164
   14a40:	d8022b10 	.word	0xd8022b10
   14a44:	2a106822 	.word	0x2a106822
   14a48:	2103d90c 	.word	0x2103d90c
   14a4c:	0206f24c 	.word	0x0206f24c
   14a50:	60294b2f 	.word	0x60294b2f
   14a54:	e74e601a 	.word	0xe74e601a
   14a58:	22102103 	.word	0x22102103
   14a5c:	60294b2c 	.word	0x60294b2c
   14a60:	e748601a 	.word	0xe748601a
   14a64:	80b4f8df 	.word	0x80b4f8df
   14a68:	d0422a00 	.word	0xd0422a00
   14a6c:	f1042300 	.word	0xf1042300
   14a70:	461e0904 	.word	0x461e0904
   14a74:	3601e002 	.word	0x3601e002
   14a78:	d22a4296 	.word	0xd22a4296
   14a7c:	19e100f7 	.word	0x19e100f7
   14a80:	28006888 	.word	0x28006888
   14a84:	f8d1d0f7 	.word	0xf8d1d0f7
   14a88:	fa5fa004 	.word	0xfa5fa004
   14a8c:	f1bafa8a 	.word	0xf1bafa8a
   14a90:	d1f00f01 	.word	0xd1f00f01
   14a94:	c004f8d1 	.word	0xc004f8d1
   14a98:	0000f8b8 	.word	0x0000f8b8
   14a9c:	4f1cebb0 	.word	0x4f1cebb0
   14aa0:	684bd1e9 	.word	0x684bd1e9
   14aa4:	f0231c42 	.word	0xf0231c42
   14aa8:	f04303ff 	.word	0xf04303ff
   14aac:	604b0302 	.word	0x604b0302
   14ab0:	f8a86888 	.word	0xf8a86888
   14ab4:	f7ff2000 	.word	0xf7ff2000
   14ab8:	4653fba3 	.word	0x4653fba3
   14abc:	f859b938 	.word	0xf859b938
   14ac0:	f0222007 	.word	0xf0222007
   14ac4:	f04202ff 	.word	0xf04202ff
   14ac8:	f8490203 	.word	0xf8490203
   14acc:	68222007 	.word	0x68222007
   14ad0:	2b00e7d1 	.word	0x2b00e7d1
   14ad4:	b912d1c8 	.word	0xb912d1c8
   14ad8:	4293e00b 	.word	0x4293e00b
   14adc:	eb04d009 	.word	0xeb04d009
   14ae0:	688801c3 	.word	0x688801c3
   14ae4:	28003301 	.word	0x28003301
   14ae8:	6849d0f7 	.word	0x6849d0f7
   14aec:	2901b2c9 	.word	0x2901b2c9
   14af0:	2002d1f3 	.word	0x2002d1f3
   14af4:	f44f4b07 	.word	0xf44f4b07
   14af8:	4a076180 	.word	0x4a076180
   14afc:	6028681b 	.word	0x6028681b
   14b00:	bf00e6ec 	.word	0xbf00e6ec
   14b04:	200204c8 	.word	0x200204c8
   14b08:	200204c4 	.word	0x200204c4
   14b0c:	200204c0 	.word	0x200204c0
   14b10:	200204b4 	.word	0x200204b4
   14b14:	200204b8 	.word	0x200204b8
   14b18:	e000e100 	.word	0xe000e100
   14b1c:	20025e18 	.word	0x20025e18

00014b20 <rpc_transport_msg_free>:
   14b20:	4b18b430 	.word	0x4b18b430
   14b24:	6825681c 	.word	0x6825681c
   14b28:	68a3b16d 	.word	0x68a3b16d
   14b2c:	d0274283 	.word	0xd0274283
   14b30:	e0022300 	.word	0xe0022300
   14b34:	42816889 	.word	0x42816889
   14b38:	3301d019 	.word	0x3301d019
   14b3c:	42ab00da 	.word	0x42ab00da
   14b40:	0102eb04 	.word	0x0102eb04
   14b44:	4b10d1f6 	.word	0x4b10d1f6
   14b48:	6825681c 	.word	0x6825681c
   14b4c:	68a3b16d 	.word	0x68a3b16d
   14b50:	d0154283 	.word	0xd0154283
   14b54:	e0022300 	.word	0xe0022300
   14b58:	42816889 	.word	0x42816889
   14b5c:	3301d007 	.word	0x3301d007
   14b60:	429d00da 	.word	0x429d00da
   14b64:	0102eb04 	.word	0x0102eb04
   14b68:	bc30d1f6 	.word	0xbc30d1f6
   14b6c:	32044770 	.word	0x32044770
   14b70:	f02358a3 	.word	0xf02358a3
   14b74:	f04303ff 	.word	0xf04303ff
   14b78:	50a30303 	.word	0x50a30303
   14b7c:	4770bc30 	.word	0x4770bc30
   14b80:	e7f52204 	.word	0xe7f52204
   14b84:	200204c4 	.word	0x200204c4
   14b88:	200204c0 	.word	0x200204c0

00014b8c <block_cipher_df>:
   14b8c:	4ff0e92d 	.word	0x4ff0e92d
   14b90:	7fc0f5b2 	.word	0x7fc0f5b2
   14b94:	7d49f5ad 	.word	0x7d49f5ad
   14b98:	8119f200 	.word	0x8119f200
   14b9c:	460c4692 	.word	0x460c4692
   14ba0:	72d0f44f 	.word	0x72d0f44f
   14ba4:	46812100 	.word	0x46812100
   14ba8:	f00fa860 	.word	0xf00fa860
   14bac:	a81afe3c 	.word	0xa81afe3c
   14bb0:	fcd8f00a 	.word	0xfcd8f00a
   14bb4:	23302000 	.word	0x23302000
   14bb8:	ea4fad66 	.word	0xea4fad66
   14bbc:	f8ad221a 	.word	0xf8ad221a
   14bc0:	f88d0190 	.word	0xf88d0190
   14bc4:	46212192 	.word	0x46212192
   14bc8:	46284652 	.word	0x46284652
   14bcc:	3197f88d 	.word	0x3197f88d
   14bd0:	a193f88d 	.word	0xa193f88d
   14bd4:	f00fae06 	.word	0xf00fae06
   14bd8:	2280fdfc 	.word	0x2280fdfc
   14bdc:	f8054633 	.word	0xf8054633
   14be0:	af0e200a 	.word	0xaf0e200a
   14be4:	f8031b99 	.word	0xf8031b99
   14be8:	429f1b01 	.word	0x429f1b01
   14bec:	f44fd1fa 	.word	0xf44fd1fa
   14bf0:	46317280 	.word	0x46317280
   14bf4:	f00aa81a 	.word	0xf00aa81a
   14bf8:	4683fcc1 	.word	0x4683fcc1
   14bfc:	f0402800 	.word	0xf0402800
   14c00:	900180c8 	.word	0x900180c8
   14c04:	0a19f10a 	.word	0x0a19f10a
   14c08:	2210ac02 	.word	0x2210ac02
   14c0c:	46202100 	.word	0x46202100
   14c10:	fe09f00f 	.word	0xfe09f00f
   14c14:	ad6446d0 	.word	0xad6446d0
   14c18:	f8157822 	.word	0xf8157822
   14c1c:	f8943c10 	.word	0xf8943c10
   14c20:	f815c001 	.word	0xf815c001
   14c24:	78a01c0f 	.word	0x78a01c0f
   14c28:	f8154053 	.word	0xf8154053
   14c2c:	ea8c2c0e 	.word	0xea8c2c0e
   14c30:	40500c01 	.word	0x40500c01
   14c34:	f81578e1 	.word	0xf81578e1
   14c38:	f8942c0d 	.word	0xf8942c0d
   14c3c:	4051e004 	.word	0x4051e004
   14c40:	2c0cf815 	.word	0x2c0cf815
   14c44:	ea8e7023 	.word	0xea8e7023
   14c48:	f8150202 	.word	0xf8150202
   14c4c:	f8943c0b 	.word	0xf8943c0b
   14c50:	f884e005 	.word	0xf884e005
   14c54:	ea8ec001 	.word	0xea8ec001
   14c58:	f8150303 	.word	0xf8150303
   14c5c:	f894cc0a 	.word	0xf894cc0a
   14c60:	70a0e006 	.word	0x70a0e006
   14c64:	0c0cea8e 	.word	0x0c0cea8e
   14c68:	0c09f815 	.word	0x0c09f815
   14c6c:	e007f894 	.word	0xe007f894
   14c70:	ea8e70e1 	.word	0xea8e70e1
   14c74:	f8150000 	.word	0xf8150000
   14c78:	f8941c08 	.word	0xf8941c08
   14c7c:	7122e008 	.word	0x7122e008
   14c80:	0101ea8e 	.word	0x0101ea8e
   14c84:	2c07f815 	.word	0x2c07f815
   14c88:	e009f894 	.word	0xe009f894
   14c8c:	ea8e7163 	.word	0xea8e7163
   14c90:	7aa30202 	.word	0x7aa30202
   14c94:	ec06f815 	.word	0xec06f815
   14c98:	c006f884 	.word	0xc006f884
   14c9c:	030eea83 	.word	0x030eea83
   14ca0:	722171e0 	.word	0x722171e0
   14ca4:	72a37262 	.word	0x72a37262
   14ca8:	f8157ae1 	.word	0xf8157ae1
   14cac:	f8943c05 	.word	0xf8943c05
   14cb0:	7b60c00c 	.word	0x7b60c00c
   14cb4:	f815404b 	.word	0xf815404b
   14cb8:	f8152c04 	.word	0xf8152c04
   14cbc:	ea8c1c03 	.word	0xea8c1c03
   14cc0:	40410202 	.word	0x40410202
   14cc4:	c00ef894 	.word	0xc00ef894
   14cc8:	0c02f815 	.word	0x0c02f815
   14ccc:	e00ff894 	.word	0xe00ff894
   14cd0:	0000ea8c 	.word	0x0000ea8c
   14cd4:	cc01f815 	.word	0xcc01f815
   14cd8:	ea8e72e3 	.word	0xea8e72e3
   14cdc:	73220c0c 	.word	0x73220c0c
   14ce0:	73a07361 	.word	0x73a07361
   14ce4:	46224623 	.word	0x46224623
   14ce8:	a81a2101 	.word	0xa81a2101
   14cec:	c00ff884 	.word	0xc00ff884
   14cf0:	fbc2f00b 	.word	0xfbc2f00b
   14cf4:	0f10f1b8 	.word	0x0f10f1b8
   14cf8:	bf944683 	.word	0xbf944683
   14cfc:	0808eba8 	.word	0x0808eba8
   14d00:	0810f1a8 	.word	0x0810f1a8
   14d04:	d1452800 	.word	0xd1452800
   14d08:	f1b83510 	.word	0xf1b83510
   14d0c:	d1830f00 	.word	0xd1830f00
   14d10:	22109d01 	.word	0x22109d01
   14d14:	19784621 	.word	0x19784621
   14d18:	fd5bf00f 	.word	0xfd5bf00f
   14d1c:	3183f89d 	.word	0x3183f89d
   14d20:	0210f105 	.word	0x0210f105
   14d24:	2a303301 	.word	0x2a303301
   14d28:	f88d9201 	.word	0xf88d9201
   14d2c:	f47f3183 	.word	0xf47f3183
   14d30:	f44faf6c 	.word	0xf44faf6c
   14d34:	46397280 	.word	0x46397280
   14d38:	f00aa81a 	.word	0xf00aa81a
   14d3c:	4683fc1f 	.word	0x4683fc1f
   14d40:	464dbb40 	.word	0x464dbb40
   14d44:	0830f109 	.word	0x0830f109
   14d48:	461aab16 	.word	0x461aab16
   14d4c:	a81a2101 	.word	0xa81a2101
   14d50:	fb92f00b 	.word	0xfb92f00b
   14d54:	b9e84683 	.word	0xb9e84683
   14d58:	46282210 	.word	0x46282210
   14d5c:	4415a916 	.word	0x4415a916
   14d60:	fd37f00f 	.word	0xfd37f00f
   14d64:	d1ef4545 	.word	0xd1ef4545
   14d68:	f00aa81a 	.word	0xf00aa81a
   14d6c:	a860fc01 	.word	0xa860fc01
   14d70:	71d0f44f 	.word	0x71d0f44f
   14d74:	fc38f006 	.word	0xfc38f006
   14d78:	21304638 	.word	0x21304638
   14d7c:	fc34f006 	.word	0xfc34f006
   14d80:	21204630 	.word	0x21204630
   14d84:	fc30f006 	.word	0xfc30f006
   14d88:	21104620 	.word	0x21104620
   14d8c:	fc2cf006 	.word	0xfc2cf006
   14d90:	ac02e018 	.word	0xac02e018
   14d94:	f00aa81a 	.word	0xf00aa81a
   14d98:	a860fbeb 	.word	0xa860fbeb
   14d9c:	71d0f44f 	.word	0x71d0f44f
   14da0:	fc22f006 	.word	0xfc22f006
   14da4:	21304638 	.word	0x21304638
   14da8:	fc1ef006 	.word	0xfc1ef006
   14dac:	21204630 	.word	0x21204630
   14db0:	fc1af006 	.word	0xfc1af006
   14db4:	21104620 	.word	0x21104620
   14db8:	fc16f006 	.word	0xfc16f006
   14dbc:	21304648 	.word	0x21304648
   14dc0:	fc12f006 	.word	0xfc12f006
   14dc4:	f50d4658 	.word	0xf50d4658
   14dc8:	e8bd7d49 	.word	0xe8bd7d49
   14dcc:	f06f8ff0 	.word	0xf06f8ff0
   14dd0:	e7f70b37 	.word	0xe7f70b37

00014dd4 <symbol_000078b>:
   14dd4:	72a0f44f 	.word	0x72a0f44f
   14dd8:	f00f2100 	.word	0xf00f2100
   14ddc:	bf00bd24 	.word	0xbf00bd24

00014de0 <symbol_0001c64>:
   14de0:	b510b158 	.word	0xb510b158
   14de4:	30204604 	.word	0x30204604
   14de8:	fbc2f00a 	.word	0xfbc2f00a
   14dec:	e8bd4620 	.word	0xe8bd4620
   14df0:	f44f4010 	.word	0xf44f4010
   14df4:	f00671a0 	.word	0xf00671a0
   14df8:	4770bbf7 	.word	0x4770bbf7

00014dfc <symbol_000ccf0>:
   14dfc:	6983b5f0 	.word	0x6983b5f0
   14e00:	f5b3b0ed 	.word	0xf5b3b0ed
   14e04:	f2007fc0 	.word	0xf2007fc0
   14e08:	f5c380e1 	.word	0xf5c380e1
   14e0c:	429373c0 	.word	0x429373c0
   14e10:	80dcf0c0 	.word	0x80dcf0c0
   14e14:	46154604 	.word	0x46154604
   14e18:	f44f460e 	.word	0xf44f460e
   14e1c:	210072c0 	.word	0x210072c0
   14e20:	f00fa80c 	.word	0xf00fa80c
   14e24:	a90cfd00 	.word	0xa90cfd00
   14e28:	3138f8d4 	.word	0x3138f8d4
   14e2c:	f8d469a2 	.word	0xf8d469a2
   14e30:	4798013c 	.word	0x4798013c
   14e34:	f0402800 	.word	0xf0402800
   14e38:	69a780cc 	.word	0x69a780cc
   14e3c:	b94db106 	.word	0xb94db106
   14e40:	463aa90c 	.word	0x463aa90c
   14e44:	f7ff4608 	.word	0xf7ff4608
   14e48:	4605fea1 	.word	0x4605fea1
   14e4c:	4628b188 	.word	0x4628b188
   14e50:	bdf0b06d 	.word	0xbdf0b06d
   14e54:	462aab0c 	.word	0x462aab0c
   14e58:	463119d8 	.word	0x463119d8
   14e5c:	fcb9f00f 	.word	0xfcb9f00f
   14e60:	a90c442f 	.word	0xa90c442f
   14e64:	4608463a 	.word	0x4608463a
   14e68:	fe90f7ff 	.word	0xfe90f7ff
   14e6c:	28004605 	.word	0x28004605
   14e70:	4668d1ed 	.word	0x4668d1ed
   14e74:	46292230 	.word	0x46292230
   14e78:	fcd5f00f 	.word	0xfcd5f00f
   14e7c:	f104462e 	.word	0xf104462e
   14e80:	7be20720 	.word	0x7be20720
   14e84:	0306eb0d 	.word	0x0306eb0d
   14e88:	b2d23201 	.word	0xb2d23201
   14e8c:	2a0073e2 	.word	0x2a0073e2
   14e90:	7ba2d14d 	.word	0x7ba2d14d
   14e94:	b2d23201 	.word	0xb2d23201
   14e98:	2a0073a2 	.word	0x2a0073a2
   14e9c:	7b62d147 	.word	0x7b62d147
   14ea0:	b2d23201 	.word	0xb2d23201
   14ea4:	2a007362 	.word	0x2a007362
   14ea8:	7b22d141 	.word	0x7b22d141
   14eac:	b2d23201 	.word	0xb2d23201
   14eb0:	2a007322 	.word	0x2a007322
   14eb4:	7ae2d13b 	.word	0x7ae2d13b
   14eb8:	b2d23201 	.word	0xb2d23201
   14ebc:	2a0072e2 	.word	0x2a0072e2
   14ec0:	7aa2d135 	.word	0x7aa2d135
   14ec4:	b2d23201 	.word	0xb2d23201
   14ec8:	2a0072a2 	.word	0x2a0072a2
   14ecc:	7a62d12f 	.word	0x7a62d12f
   14ed0:	b2d23201 	.word	0xb2d23201
   14ed4:	bb527262 	.word	0xbb527262
   14ed8:	32017a22 	.word	0x32017a22
   14edc:	7222b2d2 	.word	0x7222b2d2
   14ee0:	79e2bb2a 	.word	0x79e2bb2a
   14ee4:	b2d23201 	.word	0xb2d23201
   14ee8:	bb0271e2 	.word	0xbb0271e2
   14eec:	320179a2 	.word	0x320179a2
   14ef0:	71a2b2d2 	.word	0x71a2b2d2
   14ef4:	7962b9da 	.word	0x7962b9da
   14ef8:	b2d23201 	.word	0xb2d23201
   14efc:	b9b27162 	.word	0xb9b27162
   14f00:	32017922 	.word	0x32017922
   14f04:	7122b2d2 	.word	0x7122b2d2
   14f08:	78e2b98a 	.word	0x78e2b98a
   14f0c:	b2d23201 	.word	0xb2d23201
   14f10:	b96270e2 	.word	0xb96270e2
   14f14:	320178a2 	.word	0x320178a2
   14f18:	70a2b2d2 	.word	0x70a2b2d2
   14f1c:	7862b93a 	.word	0x7862b93a
   14f20:	b2d23201 	.word	0xb2d23201
   14f24:	b9127062 	.word	0xb9127062
   14f28:	32017822 	.word	0x32017822
   14f2c:	46227022 	.word	0x46227022
   14f30:	46382101 	.word	0x46382101
   14f34:	faa0f00b 	.word	0xfaa0f00b
   14f38:	28004605 	.word	0x28004605
   14f3c:	3610d187 	.word	0x3610d187
   14f40:	d19e2e30 	.word	0xd19e2e30
   14f44:	9b0c9901 	.word	0x9b0c9901
   14f48:	9a0d9800 	.word	0x9a0d9800
   14f4c:	404a4058 	.word	0x404a4058
   14f50:	99029b0e 	.word	0x99029b0e
   14f54:	40599000 	.word	0x40599000
   14f58:	9b0f9803 	.word	0x9b0f9803
   14f5c:	40439201 	.word	0x40439201
   14f60:	98049a10 	.word	0x98049a10
   14f64:	40509102 	.word	0x40509102
   14f68:	9a119905 	.word	0x9a119905
   14f6c:	40519303 	.word	0x40519303
   14f70:	9a069b12 	.word	0x9a069b12
   14f74:	405a9004 	.word	0x405a9004
   14f78:	9b139807 	.word	0x9b139807
   14f7c:	40589105 	.word	0x40589105
   14f80:	9b149908 	.word	0x9b149908
   14f84:	40599206 	.word	0x40599206
   14f88:	9b159a09 	.word	0x9b159a09
   14f8c:	405a9007 	.word	0x405a9007
   14f90:	9b16980a 	.word	0x9b16980a
   14f94:	40439108 	.word	0x40439108
   14f98:	2309e9cd 	.word	0x2309e9cd
   14f9c:	9b179a0b 	.word	0x9b179a0b
   14fa0:	40534638 	.word	0x40534638
   14fa4:	f44f4669 	.word	0xf44f4669
   14fa8:	930b7280 	.word	0x930b7280
   14fac:	fae6f00a 	.word	0xfae6f00a
   14fb0:	28004605 	.word	0x28004605
   14fb4:	af4bf47f 	.word	0xaf4bf47f
   14fb8:	a9082210 	.word	0xa9082210
   14fbc:	f00f4620 	.word	0xf00f4620
   14fc0:	2301fc08 	.word	0x2301fc08
   14fc4:	61234628 	.word	0x61234628
   14fc8:	bdf0b06d 	.word	0xbdf0b06d
   14fcc:	0537f06f 	.word	0x0537f06f
   14fd0:	f06fe73d 	.word	0xf06fe73d
   14fd4:	e73a0533 	.word	0xe73a0533

00014fd8 <symbol_0001e1e>:
   14fd8:	41f0e92d 	.word	0x41f0e92d
   14fdc:	46164604 	.word	0x46164604
   14fe0:	b0882220 	.word	0xb0882220
   14fe4:	460f18a5 	.word	0x460f18a5
   14fe8:	21004668 	.word	0x21004668
   14fec:	f00f4698 	.word	0xf00f4698
   14ff0:	4628fc1a 	.word	0x4628fc1a
   14ff4:	fab6f00a 	.word	0xfab6f00a
   14ff8:	f2422220 	.word	0xf2422220
   14ffc:	f8c47310 	.word	0xf8c47310
   15000:	e9c47138 	.word	0xe9c47138
   15004:	46282306 	.word	0x46282306
   15008:	613cf8c4 	.word	0x613cf8c4
   1500c:	f44f4669 	.word	0xf44f4669
   15010:	f00a7280 	.word	0xf00a7280
   15014:	b920fab3 	.word	0xb920fab3
   15018:	46204641 	.word	0x46204641
   1501c:	f7ff9a0e 	.word	0xf7ff9a0e
   15020:	b008feed 	.word	0xb008feed
   15024:	81f0e8bd 	.word	0x81f0e8bd

00015028 <symbol_000268c>:
   15028:	4ff0e92d 	.word	0x4ff0e92d
   1502c:	6f80f5b2 	.word	0x6f80f5b2
   15030:	f200b0f9 	.word	0xf200b0f9
   15034:	46048226 	.word	0x46048226
   15038:	460f4615 	.word	0x460f4615
   1503c:	46682230 	.word	0x46682230
   15040:	f00f2100 	.word	0xf00f2100
   15044:	6922fbf0 	.word	0x6922fbf0
   15048:	429a69e3 	.word	0x429a69e3
   1504c:	6963dc01 	.word	0x6963dc01
   15050:	69a3b313 	.word	0x69a3b313
   15054:	7fc0f5b3 	.word	0x7fc0f5b3
   15058:	8216f200 	.word	0x8216f200
   1505c:	0a60f10d 	.word	0x0a60f10d
   15060:	72c0f44f 	.word	0x72c0f44f
   15064:	46502100 	.word	0x46502100
   15068:	fbddf00f 	.word	0xfbddf00f
   1506c:	f8d44651 	.word	0xf8d44651
   15070:	69a23138 	.word	0x69a23138
   15074:	013cf8d4 	.word	0x013cf8d4
   15078:	f06f4798 	.word	0xf06f4798
   1507c:	b9380933 	.word	0xb9380933
   15080:	465169a2 	.word	0x465169a2
   15084:	f7ff4650 	.word	0xf7ff4650
   15088:	4681fd81 	.word	0x4681fd81
   1508c:	d0772800 	.word	0xd0772800
   15090:	b0794648 	.word	0xb0794648
   15094:	8ff0e8bd 	.word	0x8ff0e8bd
   15098:	0820f104 	.word	0x0820f104
   1509c:	f0002d00 	.word	0xf0002d00
   150a0:	ae0c812b 	.word	0xae0c812b
   150a4:	2d10e00e 	.word	0x2d10e00e
   150a8:	bf2846a9 	.word	0xbf2846a9
   150ac:	0910f04f 	.word	0x0910f04f
   150b0:	46314638 	.word	0x46314638
   150b4:	f00f464a 	.word	0xf00f464a
   150b8:	ebb5fb8c 	.word	0xebb5fb8c
   150bc:	444f0509 	.word	0x444f0509
   150c0:	811af000 	.word	0x811af000
   150c4:	33017be3 	.word	0x33017be3
   150c8:	73e3b2db 	.word	0x73e3b2db
   150cc:	d14d2b00 	.word	0xd14d2b00
   150d0:	33017ba3 	.word	0x33017ba3
   150d4:	73a3b2db 	.word	0x73a3b2db
   150d8:	d1472b00 	.word	0xd1472b00
   150dc:	33017b63 	.word	0x33017b63
   150e0:	7363b2db 	.word	0x7363b2db
   150e4:	d1412b00 	.word	0xd1412b00
   150e8:	33017b23 	.word	0x33017b23
   150ec:	7323b2db 	.word	0x7323b2db
   150f0:	d13b2b00 	.word	0xd13b2b00
   150f4:	33017ae3 	.word	0x33017ae3
   150f8:	72e3b2db 	.word	0x72e3b2db
   150fc:	d1352b00 	.word	0xd1352b00
   15100:	33017aa3 	.word	0x33017aa3
   15104:	72a3b2db 	.word	0x72a3b2db
   15108:	d12f2b00 	.word	0xd12f2b00
   1510c:	33017a63 	.word	0x33017a63
   15110:	7263b2db 	.word	0x7263b2db
   15114:	7a23bb53 	.word	0x7a23bb53
   15118:	b2db3301 	.word	0xb2db3301
   1511c:	bb2b7223 	.word	0xbb2b7223
   15120:	330179e3 	.word	0x330179e3
   15124:	71e3b2db 	.word	0x71e3b2db
   15128:	79a3bb03 	.word	0x79a3bb03
   1512c:	b2db3301 	.word	0xb2db3301
   15130:	b9db71a3 	.word	0xb9db71a3
   15134:	33017963 	.word	0x33017963
   15138:	7163b2db 	.word	0x7163b2db
   1513c:	7923b9b3 	.word	0x7923b9b3
   15140:	b2db3301 	.word	0xb2db3301
   15144:	b98b7123 	.word	0xb98b7123
   15148:	330178e3 	.word	0x330178e3
   1514c:	70e3b2db 	.word	0x70e3b2db
   15150:	78a3b963 	.word	0x78a3b963
   15154:	b2db3301 	.word	0xb2db3301
   15158:	b93b70a3 	.word	0xb93b70a3
   1515c:	33017863 	.word	0x33017863
   15160:	7063b2db 	.word	0x7063b2db
   15164:	7823b913 	.word	0x7823b913
   15168:	70233301 	.word	0x70233301
   1516c:	46224633 	.word	0x46224633
   15170:	46402101 	.word	0x46402101
   15174:	f980f00b 	.word	0xf980f00b
   15178:	28004681 	.word	0x28004681
   1517c:	e787d093 	.word	0xe787d093
   15180:	4630ae0c 	.word	0x4630ae0c
   15184:	46492230 	.word	0x46492230
   15188:	fb4df00f 	.word	0xfb4df00f
   1518c:	f10446cb 	.word	0xf10446cb
   15190:	7be20820 	.word	0x7be20820
   15194:	030beb06 	.word	0x030beb06
   15198:	b2d23201 	.word	0xb2d23201
   1519c:	2a0073e2 	.word	0x2a0073e2
   151a0:	7ba2d14d 	.word	0x7ba2d14d
   151a4:	b2d23201 	.word	0xb2d23201
   151a8:	2a0073a2 	.word	0x2a0073a2
   151ac:	7b62d147 	.word	0x7b62d147
   151b0:	b2d23201 	.word	0xb2d23201
   151b4:	2a007362 	.word	0x2a007362
   151b8:	7b22d141 	.word	0x7b22d141
   151bc:	b2d23201 	.word	0xb2d23201
   151c0:	2a007322 	.word	0x2a007322
   151c4:	7ae2d13b 	.word	0x7ae2d13b
   151c8:	b2d23201 	.word	0xb2d23201
   151cc:	2a0072e2 	.word	0x2a0072e2
   151d0:	7aa2d135 	.word	0x7aa2d135
   151d4:	b2d23201 	.word	0xb2d23201
   151d8:	2a0072a2 	.word	0x2a0072a2
   151dc:	7a62d12f 	.word	0x7a62d12f
   151e0:	b2d23201 	.word	0xb2d23201
   151e4:	bb527262 	.word	0xbb527262
   151e8:	32017a22 	.word	0x32017a22
   151ec:	7222b2d2 	.word	0x7222b2d2
   151f0:	79e2bb2a 	.word	0x79e2bb2a
   151f4:	b2d23201 	.word	0xb2d23201
   151f8:	bb0271e2 	.word	0xbb0271e2
   151fc:	320179a2 	.word	0x320179a2
   15200:	71a2b2d2 	.word	0x71a2b2d2
   15204:	7962b9da 	.word	0x7962b9da
   15208:	b2d23201 	.word	0xb2d23201
   1520c:	b9b27162 	.word	0xb9b27162
   15210:	32017922 	.word	0x32017922
   15214:	7122b2d2 	.word	0x7122b2d2
   15218:	78e2b98a 	.word	0x78e2b98a
   1521c:	b2d23201 	.word	0xb2d23201
   15220:	b96270e2 	.word	0xb96270e2
   15224:	320178a2 	.word	0x320178a2
   15228:	70a2b2d2 	.word	0x70a2b2d2
   1522c:	7862b93a 	.word	0x7862b93a
   15230:	b2d23201 	.word	0xb2d23201
   15234:	b9127062 	.word	0xb9127062
   15238:	32017822 	.word	0x32017822
   1523c:	46227022 	.word	0x46227022
   15240:	46402101 	.word	0x46402101
   15244:	f918f00b 	.word	0xf918f00b
   15248:	28004681 	.word	0x28004681
   1524c:	af20f47f 	.word	0xaf20f47f
   15250:	0b10f10b 	.word	0x0b10f10b
   15254:	0f30f1bb 	.word	0x0f30f1bb
   15258:	6870d19b 	.word	0x6870d19b
   1525c:	3000f8da 	.word	0x3000f8da
   15260:	f8da6831 	.word	0xf8da6831
   15264:	40592004 	.word	0x40592004
   15268:	f8da4042 	.word	0xf8da4042
   1526c:	68b03008 	.word	0x68b03008
   15270:	ea836031 	.word	0xea836031
   15274:	f8da0100 	.word	0xf8da0100
   15278:	68f0300c 	.word	0x68f0300c
   1527c:	40586072 	.word	0x40586072
   15280:	f8da6932 	.word	0xf8da6932
   15284:	60b13010 	.word	0x60b13010
   15288:	f8da4053 	.word	0xf8da4053
   1528c:	69721014 	.word	0x69721014
   15290:	404a60f0 	.word	0x404a60f0
   15294:	f8da69b0 	.word	0xf8da69b0
   15298:	61331018 	.word	0x61331018
   1529c:	f8da4048 	.word	0xf8da4048
   152a0:	69f1301c 	.word	0x69f1301c
   152a4:	404b6172 	.word	0x404b6172
   152a8:	f8da6a32 	.word	0xf8da6a32
   152ac:	61b01020 	.word	0x61b01020
   152b0:	6a704051 	.word	0x6a704051
   152b4:	2024f8da 	.word	0x2024f8da
   152b8:	405061f3 	.word	0x405061f3
   152bc:	3028f8da 	.word	0x3028f8da
   152c0:	62316ab2 	.word	0x62316ab2
   152c4:	e9c64053 	.word	0xe9c64053
   152c8:	6af20309 	.word	0x6af20309
   152cc:	302cf8da 	.word	0x302cf8da
   152d0:	40534631 	.word	0x40534631
   152d4:	f44f4640 	.word	0xf44f4640
   152d8:	62f37280 	.word	0x62f37280
   152dc:	f94ef00a 	.word	0xf94ef00a
   152e0:	28004681 	.word	0x28004681
   152e4:	aed4f47f 	.word	0xaed4f47f
   152e8:	a9142210 	.word	0xa9142210
   152ec:	f00f4620 	.word	0xf00f4620
   152f0:	2301fa70 	.word	0x2301fa70
   152f4:	e6d16123 	.word	0xe6d16123
   152f8:	0a60f10d 	.word	0x0a60f10d
   152fc:	22304650 	.word	0x22304650
   15300:	f00f2100 	.word	0xf00f2100
   15304:	2500fa90 	.word	0x2500fa90
   15308:	eb0a7be2 	.word	0xeb0a7be2
   1530c:	32010305 	.word	0x32010305
   15310:	73e2b2d2 	.word	0x73e2b2d2
   15314:	d14d2a00 	.word	0xd14d2a00
   15318:	32017ba2 	.word	0x32017ba2
   1531c:	73a2b2d2 	.word	0x73a2b2d2
   15320:	d1472a00 	.word	0xd1472a00
   15324:	32017b62 	.word	0x32017b62
   15328:	7362b2d2 	.word	0x7362b2d2
   1532c:	d1412a00 	.word	0xd1412a00
   15330:	32017b22 	.word	0x32017b22
   15334:	7322b2d2 	.word	0x7322b2d2
   15338:	d13b2a00 	.word	0xd13b2a00
   1533c:	32017ae2 	.word	0x32017ae2
   15340:	72e2b2d2 	.word	0x72e2b2d2
   15344:	d1352a00 	.word	0xd1352a00
   15348:	32017aa2 	.word	0x32017aa2
   1534c:	72a2b2d2 	.word	0x72a2b2d2
   15350:	d12f2a00 	.word	0xd12f2a00
   15354:	32017a62 	.word	0x32017a62
   15358:	7262b2d2 	.word	0x7262b2d2
   1535c:	7a22bb52 	.word	0x7a22bb52
   15360:	b2d23201 	.word	0xb2d23201
   15364:	bb2a7222 	.word	0xbb2a7222
   15368:	320179e2 	.word	0x320179e2
   1536c:	71e2b2d2 	.word	0x71e2b2d2
   15370:	79a2bb02 	.word	0x79a2bb02
   15374:	b2d23201 	.word	0xb2d23201
   15378:	b9da71a2 	.word	0xb9da71a2
   1537c:	32017962 	.word	0x32017962
   15380:	7162b2d2 	.word	0x7162b2d2
   15384:	7922b9b2 	.word	0x7922b9b2
   15388:	b2d23201 	.word	0xb2d23201
   1538c:	b98a7122 	.word	0xb98a7122
   15390:	320178e2 	.word	0x320178e2
   15394:	70e2b2d2 	.word	0x70e2b2d2
   15398:	78a2b962 	.word	0x78a2b962
   1539c:	b2d23201 	.word	0xb2d23201
   153a0:	b93a70a2 	.word	0xb93a70a2
   153a4:	32017862 	.word	0x32017862
   153a8:	7062b2d2 	.word	0x7062b2d2
   153ac:	7822b912 	.word	0x7822b912
   153b0:	70223201 	.word	0x70223201
   153b4:	21014622 	.word	0x21014622
   153b8:	f00b4640 	.word	0xf00b4640
   153bc:	4681f85d 	.word	0x4681f85d
   153c0:	f47f2800 	.word	0xf47f2800
   153c4:	3510ae65 	.word	0x3510ae65
   153c8:	d19d2d30 	.word	0xd19d2d30
   153cc:	1200e9da 	.word	0x1200e9da
   153d0:	98019b00 	.word	0x98019b00
   153d4:	40424059 	.word	0x40424059
   153d8:	3008f8da 	.word	0x3008f8da
   153dc:	f8ca9802 	.word	0xf8ca9802
   153e0:	ea831000 	.word	0xea831000
   153e4:	f8da0100 	.word	0xf8da0100
   153e8:	9803300c 	.word	0x9803300c
   153ec:	2004f8ca 	.word	0x2004f8ca
   153f0:	9a044058 	.word	0x9a044058
   153f4:	3010f8da 	.word	0x3010f8da
   153f8:	1008f8ca 	.word	0x1008f8ca
   153fc:	99054053 	.word	0x99054053
   15400:	2014f8da 	.word	0x2014f8da
   15404:	000cf8ca 	.word	0x000cf8ca
   15408:	9806404a 	.word	0x9806404a
   1540c:	1018f8da 	.word	0x1018f8da
   15410:	3010f8ca 	.word	0x3010f8ca
   15414:	9b074048 	.word	0x9b074048
   15418:	101cf8da 	.word	0x101cf8da
   1541c:	2014f8ca 	.word	0x2014f8ca
   15420:	f8da404b 	.word	0xf8da404b
   15424:	99082020 	.word	0x99082020
   15428:	0018f8ca 	.word	0x0018f8ca
   1542c:	f8da4051 	.word	0xf8da4051
   15430:	9a090024 	.word	0x9a090024
   15434:	301cf8ca 	.word	0x301cf8ca
   15438:	f8da4050 	.word	0xf8da4050
   1543c:	9a0a3028 	.word	0x9a0a3028
   15440:	1020f8ca 	.word	0x1020f8ca
   15444:	e9ca4053 	.word	0xe9ca4053
   15448:	9a0b0309 	.word	0x9a0b0309
   1544c:	302cf8da 	.word	0x302cf8da
   15450:	40534640 	.word	0x40534640
   15454:	f44f4651 	.word	0xf44f4651
   15458:	f8ca7280 	.word	0xf8ca7280
   1545c:	f00a302c 	.word	0xf00a302c
   15460:	4681f88d 	.word	0x4681f88d
   15464:	f47f2800 	.word	0xf47f2800
   15468:	2210ae13 	.word	0x2210ae13
   1546c:	4620a920 	.word	0x4620a920
   15470:	f9aff00f 	.word	0xf9aff00f
   15474:	69234648 	.word	0x69234648
   15478:	61233301 	.word	0x61233301
   1547c:	e8bdb079 	.word	0xe8bdb079
   15480:	f06f8ff0 	.word	0xf06f8ff0
   15484:	e6030935 	.word	0xe6030935
   15488:	0937f06f 	.word	0x0937f06f
   1548c:	bf00e600 	.word	0xbf00e600

00015490 <packet_handler_create>:
   15490:	b5382801 	.word	0xb5382801
   15494:	4614460d 	.word	0x4614460d
   15498:	db11d00d 	.word	0xdb11d00d
   1549c:	dc0f2803 	.word	0xdc0f2803
   154a0:	f00a2010 	.word	0xf00a2010
   154a4:	2218f81f 	.word	0x2218f81f
   154a8:	4b08b120 	.word	0x4b08b120
   154ac:	44136045 	.word	0x44136045
   154b0:	60036084 	.word	0x60036084
   154b4:	2014bd38 	.word	0x2014bd38
   154b8:	f814f00a 	.word	0xf814f00a
   154bc:	e7f32230 	.word	0xe7f32230
   154c0:	f00a200c 	.word	0xf00a200c
   154c4:	2200f80f 	.word	0x2200f80f
   154c8:	bf00e7ee 	.word	0xbf00e7ee
   154cc:	00026908 	.word	0x00026908

000154d0 <packet_handler_delete>:
   154d0:	4604b510 	.word	0x4604b510
   154d4:	691b6803 	.word	0x691b6803
   154d8:	68234798 	.word	0x68234798
   154dc:	695b4620 	.word	0x695b4620
   154e0:	46204798 	.word	0x46204798
   154e4:	4010e8bd 	.word	0x4010e8bd
   154e8:	b81af00a 	.word	0xb81af00a

000154ec <symbol_0002469>:
   154ec:	460db570 	.word	0x460db570
   154f0:	f0014604 	.word	0xf0014604
   154f4:	2d03fc23 	.word	0x2d03fc23
   154f8:	d1257025 	.word	0xd1257025
   154fc:	25012308 	.word	0x25012308
   15500:	49154a14 	.word	0x49154a14
   15504:	622360a3 	.word	0x622360a3
   15508:	62e36523 	.word	0x62e36523
   1550c:	60e263a3 	.word	0x60e263a3
   15510:	4a134b12 	.word	0x4a134b12
   15514:	48144e13 	.word	0x48144e13
   15518:	65606321 	.word	0x65606321
   1551c:	64a363e2 	.word	0x64a363e2
   15520:	61e56065 	.word	0x61e56065
   15524:	62a564e5 	.word	0x62a564e5
   15528:	e9c46365 	.word	0xe9c46365
   1552c:	62665510 	.word	0x62665510
   15530:	f0061d20 	.word	0xf0061d20
   15534:	65a0fde7 	.word	0x65a0fde7
   15538:	004cf104 	.word	0x004cf104
   1553c:	fde2f006 	.word	0xfde2f006
   15540:	0517e9c4 	.word	0x0517e9c4
   15544:	bd702000 	.word	0xbd702000
   15548:	f0014620 	.word	0xf0014620
   1554c:	4807fbf7 	.word	0x4807fbf7
   15550:	bf00bd70 	.word	0xbf00bd70
   15554:	000269d0 	.word	0x000269d0
   15558:	00026970 	.word	0x00026970
   1555c:	2002d434 	.word	0x2002d434
   15560:	00026990 	.word	0x00026990
   15564:	00026950 	.word	0x00026950
   15568:	000269b0 	.word	0x000269b0
   1556c:	ffffb180 	.word	0xffffb180

00015570 <secure_client_socket>:
   15570:	41f0e92d 	.word	0x41f0e92d
   15574:	680b460c 	.word	0x680b460c
   15578:	f4236989 	.word	0xf4236989
   1557c:	60233300 	.word	0x60233300
   15580:	23006822 	.word	0x23006822
   15584:	1280f422 	.word	0x1280f422
   15588:	f2476022 	.word	0xf2476022
   1558c:	68270281 	.word	0x68270281
   15590:	f0024606 	.word	0xf0024606
   15594:	2800fedb 	.word	0x2800fedb
   15598:	4605d03b 	.word	0x4605d03b
   1559c:	eb064b28 	.word	0xeb064b28
   155a0:	eb0301c6 	.word	0xeb0301c6
   155a4:	22240181 	.word	0x22240181
   155a8:	f00f3014 	.word	0xf00f3014
   155ac:	68abf912 	.word	0x68abf912
   155b0:	8090f8df 	.word	0x8090f8df
   155b4:	60ab3324 	.word	0x60ab3324
   155b8:	46296823 	.word	0x46296823
   155bc:	0308ea03 	.word	0x0308ea03
   155c0:	030af043 	.word	0x030af043
   155c4:	f2476023 	.word	0xf2476023
   155c8:	463b0281 	.word	0x463b0281
   155cc:	f0024620 	.word	0xf0024620
   155d0:	b960fedd 	.word	0xb960fedd
   155d4:	00db6823 	.word	0x00db6823
   155d8:	f04fd40b 	.word	0xf04fd40b
   155dc:	f64f33ff 	.word	0xf64f33ff
   155e0:	210b72ff 	.word	0x210b72ff
   155e4:	f0024630 	.word	0xf0024630
   155e8:	b128fee5 	.word	0xb128fee5
   155ec:	e8bd6027 	.word	0xe8bd6027
   155f0:	207381f0 	.word	0x207381f0
   155f4:	81f0e8bd 	.word	0x81f0e8bd
   155f8:	6280f04f 	.word	0x6280f04f
   155fc:	46114630 	.word	0x46114630
   15600:	33fff04f 	.word	0x33fff04f
   15604:	fed6f002 	.word	0xfed6f002
   15608:	2873b130 	.word	0x2873b130
   1560c:	6027d0ef 	.word	0x6027d0ef
   15610:	200ce7ed 	.word	0x200ce7ed
   15614:	81f0e8bd 	.word	0x81f0e8bd
   15618:	f0236823 	.word	0xf0236823
   1561c:	60236380 	.word	0x60236380
   15620:	ea036823 	.word	0xea036823
   15624:	f0480808 	.word	0xf0480808
   15628:	6023030c 	.word	0x6023030c
   1562c:	f4436823 	.word	0xf4436823
   15630:	60233300 	.word	0x60233300
   15634:	f4436823 	.word	0xf4436823
   15638:	60231380 	.word	0x60231380
   1563c:	81f0e8bd 	.word	0x81f0e8bd
   15640:	200204cc 	.word	0x200204cc
   15644:	ffff0000 	.word	0xffff0000

00015648 <tls_interface_init>:
   15648:	47702000 	.word	0x47702000

0001564c <tls_interface_open>:
   1564c:	f020b538 	.word	0xf020b538
   15650:	2b020308 	.word	0x2b020308
   15654:	202fd006 	.word	0x202fd006
   15658:	fd0ef7fc 	.word	0xfd0ef7fc
   1565c:	35fff04f 	.word	0x35fff04f
   15660:	bd384628 	.word	0xbd384628
   15664:	1e4a4614 	.word	0x1e4a4614
   15668:	d8282a01 	.word	0xd8282a01
   1566c:	2901bb14 	.word	0x2901bb14
   15670:	2301bf06 	.word	0x2301bf06
   15674:	7482f44f 	.word	0x7482f44f
   15678:	7487f44f 	.word	0x7487f44f
   1567c:	f002461a 	.word	0xf002461a
   15680:	1e05fec5 	.word	0x1e05fec5
   15684:	4b15db26 	.word	0x4b15db26
   15688:	00c5eb05 	.word	0x00c5eb05
   1568c:	0080eb03 	.word	0x0080eb03
   15690:	49132224 	.word	0x49132224
   15694:	f89df00f 	.word	0xf89df00f
   15698:	f0024628 	.word	0xf0024628
   1569c:	6803fd0d 	.word	0x6803fd0d
   156a0:	f4236144 	.word	0xf4236144
   156a4:	60031380 	.word	0x60031380
   156a8:	f4236803 	.word	0xf4236803
   156ac:	60033300 	.word	0x60033300
   156b0:	bd384628 	.word	0xbd384628
   156b4:	d0082901 	.word	0xd0082901
   156b8:	7f87f5b4 	.word	0x7f87f5b4
   156bc:	2016d0de 	.word	0x2016d0de
   156c0:	fcdaf7fc 	.word	0xfcdaf7fc
   156c4:	35fff04f 	.word	0x35fff04f
   156c8:	f5b4e7ca 	.word	0xf5b4e7ca
   156cc:	d1f67f82 	.word	0xd1f67f82
   156d0:	e7d3460b 	.word	0xe7d3460b
   156d4:	35fff04f 	.word	0x35fff04f
   156d8:	bf00e7c2 	.word	0xbf00e7c2
   156dc:	200204cc 	.word	0x200204cc
   156e0:	000269f0 	.word	0x000269f0

000156e4 <tls_interface_close>:
   156e4:	4604b510 	.word	0x4604b510
   156e8:	fce6f002 	.word	0xfce6f002
   156ec:	4620b120 	.word	0x4620b120
   156f0:	4010e8bd 	.word	0x4010e8bd
   156f4:	bf36f002 	.word	0xbf36f002
   156f8:	f7fc2009 	.word	0xf7fc2009
   156fc:	f04ffcbd 	.word	0xf04ffcbd
   15700:	bd1030ff 	.word	0xbd1030ff

00015704 <tls_interface_sendto>:
   15704:	47f0e92d 	.word	0x47f0e92d
   15708:	e9dd460d 	.word	0xe9dd460d
   1570c:	46168908 	.word	0x46168908
   15710:	4604461f 	.word	0x4604461f
   15714:	fcd0f002 	.word	0xfcd0f002
   15718:	d03b2800 	.word	0xd03b2800
   1571c:	b29b6803 	.word	0xb29b6803
   15720:	d0392b0c 	.word	0xd0392b0c
   15724:	b29b6803 	.word	0xb29b6803
   15728:	d1112b0b 	.word	0xd1112b0b
   1572c:	eb044b20 	.word	0xeb044b20
   15730:	f81304c4 	.word	0xf81304c4
   15734:	2b023024 	.word	0x2b023024
   15738:	6903d038 	.word	0x6903d038
   1573c:	bf142b01 	.word	0xbf142b01
   15740:	202a2039 	.word	0x202a2039
   15744:	fc98f7fc 	.word	0xfc98f7fc
   15748:	30fff04f 	.word	0x30fff04f
   1574c:	87f0e8bd 	.word	0x87f0e8bd
   15750:	2b016903 	.word	0x2b016903
   15754:	2b02d00b 	.word	0x2b02d00b
   15758:	2039d001 	.word	0x2039d001
   1575c:	6803e7f2 	.word	0x6803e7f2
   15760:	2b02b29b 	.word	0x2b02b29b
   15764:	6803d007 	.word	0x6803d007
   15768:	2b04b29b 	.word	0x2b04b29b
   1576c:	6803d003 	.word	0x6803d003
   15770:	2b05b29b 	.word	0x2b05b29b
   15774:	4b0ed1f1 	.word	0x4b0ed1f1
   15778:	02c4eb04 	.word	0x02c4eb04
   1577c:	3022f813 	.word	0x3022f813
   15780:	d1ea2b02 	.word	0xd1ea2b02
   15784:	46204601 	.word	0x46204601
   15788:	fef2f7ff 	.word	0xfef2f7ff
   1578c:	d0032800 	.word	0xd0032800
   15790:	e7d9dcd8 	.word	0xe7d9dcd8
   15794:	e7d52009 	.word	0xe7d52009
   15798:	8908e9cd 	.word	0x8908e9cd
   1579c:	4632463b 	.word	0x4632463b
   157a0:	46204629 	.word	0x46204629
   157a4:	47f0e8bd 	.word	0x47f0e8bd
   157a8:	bf4cf002 	.word	0xbf4cf002
   157ac:	e7c92023 	.word	0xe7c92023
   157b0:	200204cc 	.word	0x200204cc

000157b4 <tls_interface_recvfrom>:
   157b4:	47f0e92d 	.word	0x47f0e92d
   157b8:	e9dd460d 	.word	0xe9dd460d
   157bc:	46168908 	.word	0x46168908
   157c0:	4604461f 	.word	0x4604461f
   157c4:	fc78f002 	.word	0xfc78f002
   157c8:	d0382800 	.word	0xd0382800
   157cc:	b29b6803 	.word	0xb29b6803
   157d0:	d00f2b0c 	.word	0xd00f2b0c
   157d4:	b29b6803 	.word	0xb29b6803
   157d8:	d00b2b0d 	.word	0xd00b2b0d
   157dc:	2b016903 	.word	0x2b016903
   157e0:	2b02d01a 	.word	0x2b02d01a
   157e4:	2023d010 	.word	0x2023d010
   157e8:	fc46f7fc 	.word	0xfc46f7fc
   157ec:	30fff04f 	.word	0x30fff04f
   157f0:	87f0e8bd 	.word	0x87f0e8bd
   157f4:	8908e9cd 	.word	0x8908e9cd
   157f8:	4632463b 	.word	0x4632463b
   157fc:	46204629 	.word	0x46204629
   15800:	47f0e8bd 	.word	0x47f0e8bd
   15804:	b858f003 	.word	0xb858f003
   15808:	b29b6803 	.word	0xb29b6803
   1580c:	d0072b02 	.word	0xd0072b02
   15810:	b29b6803 	.word	0xb29b6803
   15814:	d0032b04 	.word	0xd0032b04
   15818:	b29b6803 	.word	0xb29b6803
   1581c:	d1e22b05 	.word	0xd1e22b05
   15820:	eb044b08 	.word	0xeb044b08
   15824:	f81302c4 	.word	0xf81302c4
   15828:	2b023022 	.word	0x2b023022
   1582c:	4601d1db 	.word	0x4601d1db
   15830:	f7ff4620 	.word	0xf7ff4620
   15834:	2800fe9d 	.word	0x2800fe9d
   15838:	dcd5d0dc 	.word	0xdcd5d0dc
   1583c:	2009e7d6 	.word	0x2009e7d6
   15840:	bf00e7d2 	.word	0xbf00e7d2
   15844:	200204cc 	.word	0x200204cc

00015848 <tls_interface_bind>:
   15848:	43f8e92d 	.word	0x43f8e92d
   1584c:	4617460c 	.word	0x4617460c
   15850:	f0024606 	.word	0xf0024606
   15854:	2800fc31 	.word	0x2800fc31
   15858:	6803d04c 	.word	0x6803d04c
   1585c:	b29b4605 	.word	0xb29b4605
   15860:	d1502b02 	.word	0xd1502b02
   15864:	463a4621 	.word	0x463a4621
   15868:	f0034630 	.word	0xf0034630
   1586c:	4604f9fb 	.word	0x4604f9fb
   15870:	2c00b120 	.word	0x2c00b120
   15874:	4620dc3f 	.word	0x4620dc3f
   15878:	83f8e8bd 	.word	0x83f8e8bd
   1587c:	07c6eb06 	.word	0x07c6eb06
   15880:	8094f8df 	.word	0x8094f8df
   15884:	f81800bf 	.word	0xf81800bf
   15888:	2b013007 	.word	0x2b013007
   1588c:	4603d1f3 	.word	0x4603d1f3
   15890:	0281f247 	.word	0x0281f247
   15894:	463069a9 	.word	0x463069a9
   15898:	fd58f002 	.word	0xfd58f002
   1589c:	b3b04681 	.word	0xb3b04681
   158a0:	0107eb08 	.word	0x0107eb08
   158a4:	30142224 	.word	0x30142224
   158a8:	ff93f00e 	.word	0xff93f00e
   158ac:	3008f8d9 	.word	0x3008f8d9
   158b0:	33244649 	.word	0x33244649
   158b4:	3008f8c9 	.word	0x3008f8c9
   158b8:	2304682a 	.word	0x2304682a
   158bc:	04120c12 	.word	0x04120c12
   158c0:	020af042 	.word	0x020af042
   158c4:	4628602a 	.word	0x4628602a
   158c8:	0281f247 	.word	0x0281f247
   158cc:	fd5ef002 	.word	0xfd5ef002
   158d0:	682bb9f8 	.word	0x682bb9f8
   158d4:	d41800db 	.word	0xd41800db
   158d8:	f04f4630 	.word	0xf04f4630
   158dc:	f64f33ff 	.word	0xf64f33ff
   158e0:	210b72ff 	.word	0x210b72ff
   158e4:	fd66f002 	.word	0xfd66f002
   158e8:	d0c42800 	.word	0xd0c42800
   158ec:	46042304 	.word	0x46042304
   158f0:	e7be602b 	.word	0xe7be602b
   158f4:	46202409 	.word	0x46202409
   158f8:	34fff04f 	.word	0x34fff04f
   158fc:	fbbcf7fc 	.word	0xfbbcf7fc
   15900:	e8bd4620 	.word	0xe8bd4620
   15904:	242d83f8 	.word	0x242d83f8
   15908:	2473e7f5 	.word	0x2473e7f5
   1590c:	240ce7f3 	.word	0x240ce7f3
   15910:	4604e7f1 	.word	0x4604e7f1
   15914:	bf00e7ad 	.word	0xbf00e7ad
   15918:	200204cc 	.word	0x200204cc

0001591c <tls_interface_connect>:
   1591c:	460eb5f8 	.word	0x460eb5f8
   15920:	46044617 	.word	0x46044617
   15924:	fbc8f002 	.word	0xfbc8f002
   15928:	4b13b1e8 	.word	0x4b13b1e8
   1592c:	02c4eb04 	.word	0x02c4eb04
   15930:	3022f813 	.word	0x3022f813
   15934:	d11c2b02 	.word	0xd11c2b02
   15938:	46056803 	.word	0x46056803
   1593c:	2b02b29b 	.word	0x2b02b29b
   15940:	6803d003 	.word	0x6803d003
   15944:	2b04b29b 	.word	0x2b04b29b
   15948:	463ad113 	.word	0x463ad113
   1594c:	46204631 	.word	0x46204631
   15950:	f8def003 	.word	0xf8def003
   15954:	2800b110 	.word	0x2800b110
   15958:	bdf8dc06 	.word	0xbdf8dc06
   1595c:	46204629 	.word	0x46204629
   15960:	fe06f7ff 	.word	0xfe06f7ff
   15964:	2009e7f7 	.word	0x2009e7f7
   15968:	fb86f7fc 	.word	0xfb86f7fc
   1596c:	30fff04f 	.word	0x30fff04f
   15970:	202dbdf8 	.word	0x202dbdf8
   15974:	bf00e7f8 	.word	0xbf00e7f8
   15978:	200204cc 	.word	0x200204cc

0001597c <tls_interface_listen>:
   1597c:	47f0e92d 	.word	0x47f0e92d
   15980:	4606460f 	.word	0x4606460f
   15984:	fb98f002 	.word	0xfb98f002
   15988:	d06b2800 	.word	0xd06b2800
   1598c:	46046903 	.word	0x46046903
   15990:	d1652b01 	.word	0xd1652b01
   15994:	b29b6803 	.word	0xb29b6803
   15998:	d0562b04 	.word	0xd0562b04
   1599c:	b29b6823 	.word	0xb29b6823
   159a0:	d15d2b0b 	.word	0xd15d2b0b
   159a4:	f8df00f3 	.word	0xf8df00f3
   159a8:	199a90c0 	.word	0x199a90c0
   159ac:	2022f819 	.word	0x2022f819
   159b0:	d1552a01 	.word	0xd1552a01
   159b4:	44332201 	.word	0x44332201
   159b8:	f809009d 	.word	0xf809009d
   159bc:	69a12005 	.word	0x69a12005
   159c0:	f2472300 	.word	0xf2472300
   159c4:	46300281 	.word	0x46300281
   159c8:	8000f8d4 	.word	0x8000f8d4
   159cc:	fcbef002 	.word	0xfcbef002
   159d0:	28004682 	.word	0x28004682
   159d4:	eb09d042 	.word	0xeb09d042
   159d8:	22240105 	.word	0x22240105
   159dc:	f00e3014 	.word	0xf00e3014
   159e0:	f8dafef8 	.word	0xf8dafef8
   159e4:	46513008 	.word	0x46513008
   159e8:	f8ca3324 	.word	0xf8ca3324
   159ec:	68223008 	.word	0x68223008
   159f0:	0c124643 	.word	0x0c124643
   159f4:	f0420412 	.word	0xf0420412
   159f8:	6022020a 	.word	0x6022020a
   159fc:	f2474620 	.word	0xf2474620
   15a00:	f0020281 	.word	0xf0020281
   15a04:	b9e0fcc3 	.word	0xb9e0fcc3
   15a08:	00db6823 	.word	0x00db6823
   15a0c:	f04fd40e 	.word	0xf04fd40e
   15a10:	f64f33ff 	.word	0xf64f33ff
   15a14:	210b72ff 	.word	0x210b72ff
   15a18:	f0024630 	.word	0xf0024630
   15a1c:	b160fccb 	.word	0xb160fccb
   15a20:	f8c42800 	.word	0xf8c42800
   15a24:	dc028000 	.word	0xdc028000
   15a28:	87f0e8bd 	.word	0x87f0e8bd
   15a2c:	f7fc2073 	.word	0xf7fc2073
   15a30:	f04ffb23 	.word	0xf04ffb23
   15a34:	e8bd30ff 	.word	0xe8bd30ff
   15a38:	463987f0 	.word	0x463987f0
   15a3c:	f0034630 	.word	0xf0034630
   15a40:	2800f9a7 	.word	0x2800f9a7
   15a44:	e8bddcf3 	.word	0xe8bddcf3
   15a48:	00f387f0 	.word	0x00f387f0
   15a4c:	9018f8df 	.word	0x9018f8df
   15a50:	f819199a 	.word	0xf819199a
   15a54:	2a022022 	.word	0x2a022022
   15a58:	e7abd1a0 	.word	0xe7abd1a0
   15a5c:	e7e6200c 	.word	0xe7e6200c
   15a60:	e7e4202d 	.word	0xe7e4202d
   15a64:	e7e22009 	.word	0xe7e22009
   15a68:	200204cc 	.word	0x200204cc

00015a6c <tls_interface_accept>:
   15a6c:	460cb5f8 	.word	0x460cb5f8
   15a70:	461f4616 	.word	0x461f4616
   15a74:	f0024605 	.word	0xf0024605
   15a78:	2800fb1f 	.word	0x2800fb1f
   15a7c:	6800d03b 	.word	0x6800d03b
   15a80:	2806b280 	.word	0x2806b280
   15a84:	4621d137 	.word	0x4621d137
   15a88:	4632463b 	.word	0x4632463b
   15a8c:	f0034628 	.word	0xf0034628
   15a90:	4604f9f5 	.word	0x4604f9f5
   15a94:	2c00b118 	.word	0x2c00b118
   15a98:	4620dc2e 	.word	0x4620dc2e
   15a9c:	4628bdf8 	.word	0x4628bdf8
   15aa0:	fb0af002 	.word	0xfb0af002
   15aa4:	4f186803 	.word	0x4f186803
   15aa8:	3300f423 	.word	0x3300f423
   15aac:	68036003 	.word	0x68036003
   15ab0:	05c5eb05 	.word	0x05c5eb05
   15ab4:	1380f423 	.word	0x1380f423
   15ab8:	60034606 	.word	0x60034606
   15abc:	0185eb07 	.word	0x0185eb07
   15ac0:	46382224 	.word	0x46382224
   15ac4:	fe85f00e 	.word	0xfe85f00e
   15ac8:	703b2302 	.word	0x703b2302
   15acc:	46206833 	.word	0x46206833
   15ad0:	041b0c1b 	.word	0x041b0c1b
   15ad4:	030bf043 	.word	0x030bf043
   15ad8:	f64f6033 	.word	0xf64f6033
   15adc:	f04f72ff 	.word	0xf04f72ff
   15ae0:	210c33ff 	.word	0x210c33ff
   15ae4:	fc66f002 	.word	0xfc66f002
   15ae8:	28004604 	.word	0x28004604
   15aec:	2000d0d5 	.word	0x2000d0d5
   15af0:	fd38f002 	.word	0xfd38f002
   15af4:	2409e7cf 	.word	0x2409e7cf
   15af8:	f04f4620 	.word	0xf04f4620
   15afc:	f7fc34ff 	.word	0xf7fc34ff
   15b00:	4620fabb 	.word	0x4620fabb
   15b04:	bf00bdf8 	.word	0xbf00bdf8
   15b08:	200204cc 	.word	0x200204cc

00015b0c <tls_interface_setopt>:
   15b0c:	41f0e92d 	.word	0x41f0e92d
   15b10:	7f8df5b1 	.word	0x7f8df5b1
   15b14:	d11d9f06 	.word	0xd11d9f06
   15b18:	b1c3461c 	.word	0xb1c3461c
   15b1c:	4605b1bf 	.word	0x4605b1bf
   15b20:	f0024616 	.word	0xf0024616
   15b24:	b1c8fac9 	.word	0xb1c8fac9
   15b28:	b29b6803 	.word	0xb29b6803
   15b2c:	d0072b02 	.word	0xd0072b02
   15b30:	b29b6803 	.word	0xb29b6803
   15b34:	d0032b04 	.word	0xd0032b04
   15b38:	b29b6803 	.word	0xb29b6803
   15b3c:	d10d2b05 	.word	0xd10d2b05
   15b40:	2e033e01 	.word	0x2e033e01
   15b44:	e8dfd851 	.word	0xe8dfd851
   15b48:	3225f006 	.word	0x3225f006
   15b4c:	200e0b18 	.word	0x200e0b18
   15b50:	81f0e8bd 	.word	0x81f0e8bd
   15b54:	41f0e8bd 	.word	0x41f0e8bd
   15b58:	bac8f003 	.word	0xbac8f003
   15b5c:	e7f72009 	.word	0xe7f72009
   15b60:	d1392f04 	.word	0xd1392f04
   15b64:	2b026823 	.word	0x2b026823
   15b68:	4a21d836 	.word	0x4a21d836
   15b6c:	05c5eb05 	.word	0x05c5eb05
   15b70:	0585eb02 	.word	0x0585eb02
   15b74:	200070ab 	.word	0x200070ab
   15b78:	2f01e7ea 	.word	0x2f01e7ea
   15b7c:	7823d12c 	.word	0x7823d12c
   15b80:	d8292b01 	.word	0xd8292b01
   15b84:	eb054a1a 	.word	0xeb054a1a
   15b88:	eb0205c5 	.word	0xeb0205c5
   15b8c:	70530285 	.word	0x70530285
   15b90:	e7dd2000 	.word	0xe7dd2000
   15b94:	d11f2f04 	.word	0xd11f2f04
   15b98:	b1f86820 	.word	0xb1f86820
   15b9c:	d11b2801 	.word	0xd11b2801
   15ba0:	eb054b13 	.word	0xeb054b13
   15ba4:	f80305c5 	.word	0xf80305c5
   15ba8:	20000025 	.word	0x20000025
   15bac:	ea5fe7d0 	.word	0xea5fe7d0
   15bb0:	d0110c97 	.word	0xd0110c97
   15bb4:	0603f017 	.word	0x0603f017
   15bb8:	eb05d10e 	.word	0xeb05d10e
   15bbc:	00ad05c5 	.word	0x00ad05c5
   15bc0:	1d284b0b 	.word	0x1d284b0b
   15bc4:	442b4418 	.word	0x442b4418
   15bc8:	4621463a 	.word	0x4621463a
   15bcc:	c003f883 	.word	0xc003f883
   15bd0:	fdfff00e 	.word	0xfdfff00e
   15bd4:	e7bb4630 	.word	0xe7bb4630
   15bd8:	e7b92016 	.word	0xe7b92016
   15bdc:	4b042202 	.word	0x4b042202
   15be0:	05c5eb05 	.word	0x05c5eb05
   15be4:	2025f803 	.word	0x2025f803
   15be8:	202ae7b2 	.word	0x202ae7b2
   15bec:	bf00e7b0 	.word	0xbf00e7b0
   15bf0:	200204cc 	.word	0x200204cc

00015bf4 <tls_interface_getopt>:
   15bf4:	41f0e92d 	.word	0x41f0e92d
   15bf8:	7f8df5b1 	.word	0x7f8df5b1
   15bfc:	d1129f06 	.word	0xd1129f06
   15c00:	b16b461d 	.word	0xb16b461d
   15c04:	4606b167 	.word	0x4606b167
   15c08:	f0024614 	.word	0xf0024614
   15c0c:	2800fa55 	.word	0x2800fa55
   15c10:	3c01d04f 	.word	0x3c01d04f
   15c14:	d8522c03 	.word	0xd8522c03
   15c18:	f004e8df 	.word	0xf004e8df
   15c1c:	09152139 	.word	0x09152139
   15c20:	e8bd200e 	.word	0xe8bd200e
   15c24:	e8bd81f0 	.word	0xe8bd81f0
   15c28:	f00341f0 	.word	0xf00341f0
   15c2c:	683bbb1b 	.word	0x683bbb1b
   15c30:	d13c2b04 	.word	0xd13c2b04
   15c34:	eb064b23 	.word	0xeb064b23
   15c38:	eb0306c6 	.word	0xeb0306c6
   15c3c:	78b30686 	.word	0x78b30686
   15c40:	602b2000 	.word	0x602b2000
   15c44:	683be7ed 	.word	0x683be7ed
   15c48:	d1302b04 	.word	0xd1302b04
   15c4c:	eb064b1d 	.word	0xeb064b1d
   15c50:	eb0306c6 	.word	0xeb0306c6
   15c54:	78730686 	.word	0x78730686
   15c58:	602b2000 	.word	0x602b2000
   15c5c:	eb06e7e1 	.word	0xeb06e7e1
   15c60:	491806c6 	.word	0x491806c6
   15c64:	00b6683b 	.word	0x00b6683b
   15c68:	f013198a 	.word	0xf013198a
   15c6c:	78d00403 	.word	0x78d00403
   15c70:	089bd121 	.word	0x089bd121
   15c74:	bf284283 	.word	0xbf284283
   15c78:	009a4603 	.word	0x009a4603
   15c7c:	3604b1db 	.word	0x3604b1db
   15c80:	603a4431 	.word	0x603a4431
   15c84:	f00e4628 	.word	0xf00e4628
   15c88:	4620fda4 	.word	0x4620fda4
   15c8c:	683be7c9 	.word	0x683be7c9
   15c90:	d10c2b04 	.word	0xd10c2b04
   15c94:	eb064b0b 	.word	0xeb064b0b
   15c98:	f81306c6 	.word	0xf81306c6
   15c9c:	20003026 	.word	0x20003026
   15ca0:	0301f1a3 	.word	0x0301f1a3
   15ca4:	f383fab3 	.word	0xf383fab3
   15ca8:	602b095b 	.word	0x602b095b
   15cac:	2016e7b9 	.word	0x2016e7b9
   15cb0:	2009e7b7 	.word	0x2009e7b7
   15cb4:	2800e7b5 	.word	0x2800e7b5
   15cb8:	6038d1f9 	.word	0x6038d1f9
   15cbc:	202ae7b1 	.word	0x202ae7b1
   15cc0:	bf00e7af 	.word	0xbf00e7af
   15cc4:	200204cc 	.word	0x200204cc

00015cc8 <tls_rpc_ip_event_handler>:
   15cc8:	f248b538 	.word	0xf248b538
   15ccc:	42ab0581 	.word	0x42ab0581
   15cd0:	d053460c 	.word	0xd053460c
   15cd4:	0182f249 	.word	0x0182f249
   15cd8:	d02d428b 	.word	0xd02d428b
   15cdc:	0102f248 	.word	0x0102f248
   15ce0:	d001428b 	.word	0xd001428b
   15ce4:	bd382001 	.word	0xbd382001
   15ce8:	d0fb2c00 	.word	0xd0fb2c00
   15cec:	f5b36963 	.word	0xf5b36963
   15cf0:	d0027f82 	.word	0xd0027f82
   15cf4:	7f87f5b3 	.word	0x7f87f5b3
   15cf8:	6823d1f4 	.word	0x6823d1f4
   15cfc:	5300f023 	.word	0x5300f023
   15d00:	69556023 	.word	0x69556023
   15d04:	d1482d00 	.word	0xd1482d00
   15d08:	0c1b6823 	.word	0x0c1b6823
   15d0c:	f043041b 	.word	0xf043041b
   15d10:	60230305 	.word	0x60230305
   15d14:	00da6823 	.word	0x00da6823
   15d18:	4b25d50c 	.word	0x4b25d50c
   15d1c:	02c0eb00 	.word	0x02c0eb00
   15d20:	3022f813 	.word	0x3022f813
   15d24:	d1052b02 	.word	0xd1052b02
   15d28:	f7ff4621 	.word	0xf7ff4621
   15d2c:	b108fc21 	.word	0xb108fc21
   15d30:	d1352873 	.word	0xd1352873
   15d34:	bd382000 	.word	0xbd382000
   15d38:	d0fb2c00 	.word	0xd0fb2c00
   15d3c:	b29b6823 	.word	0xb29b6823
   15d40:	d1f72b0b 	.word	0xd1f72b0b
   15d44:	bb486910 	.word	0xbb486910
   15d48:	f0436823 	.word	0xf0436823
   15d4c:	60236380 	.word	0x60236380
   15d50:	00db6823 	.word	0x00db6823
   15d54:	6823d5ee 	.word	0x6823d5ee
   15d58:	6380f023 	.word	0x6380f023
   15d5c:	68236023 	.word	0x68236023
   15d60:	041b0c1b 	.word	0x041b0c1b
   15d64:	030cf043 	.word	0x030cf043
   15d68:	68236023 	.word	0x68236023
   15d6c:	3300f443 	.word	0x3300f443
   15d70:	68236023 	.word	0x68236023
   15d74:	1380f443 	.word	0x1380f443
   15d78:	bd386023 	.word	0xbd386023
   15d7c:	d0d92900 	.word	0xd0d92900
   15d80:	b29b680b 	.word	0xb29b680b
   15d84:	d1d52b0a 	.word	0xd1d52b0a
   15d88:	b9386950 	.word	0xb9386950
   15d8c:	0c1b680b 	.word	0x0c1b680b
   15d90:	f043041b 	.word	0xf043041b
   15d94:	600b030b 	.word	0x600b030b
   15d98:	4628bd38 	.word	0x4628bd38
   15d9c:	faccf002 	.word	0xfaccf002
   15da0:	68236060 	.word	0x68236060
   15da4:	f4432000 	.word	0xf4432000
   15da8:	60232380 	.word	0x60232380
   15dac:	bf00bd38 	.word	0xbf00bd38
   15db0:	200204cc 	.word	0x200204cc

00015db4 <rpc_gnss_serialize_utc>:
   15db4:	b1d84603 	.word	0xb1d84603
   15db8:	2000b1d1 	.word	0x2000b1d1
   15dbc:	70482201 	.word	0x70482201
   15dc0:	685a700a 	.word	0x685a700a
   15dc4:	f8c12010 	.word	0xf8c12010
   15dc8:	681a2006 	.word	0x681a2006
   15dcc:	2002f8c1 	.word	0x2002f8c1
   15dd0:	200af993 	.word	0x200af993
   15dd4:	f993730a 	.word	0xf993730a
   15dd8:	73ca200d 	.word	0x73ca200d
   15ddc:	200cf993 	.word	0x200cf993
   15de0:	7a1a738a 	.word	0x7a1a738a
   15de4:	7ada728a 	.word	0x7ada728a
   15de8:	7a5b734a 	.word	0x7a5b734a
   15dec:	477072cb 	.word	0x477072cb
   15df0:	30fff04f 	.word	0x30fff04f
   15df4:	bf004770 	.word	0xbf004770

00015df8 <rpc_gnss_serialize_ephe>:
   15df8:	28004603 	.word	0x28004603
   15dfc:	2900d04b 	.word	0x2900d04b
   15e00:	2000d049 	.word	0x2000d049
   15e04:	70482202 	.word	0x70482202
   15e08:	68da700a 	.word	0x68da700a
   15e0c:	f8c12040 	.word	0xf8c12040
   15e10:	f9b3200b 	.word	0xf9b3200b
   15e14:	f8a12008 	.word	0xf8a12008
   15e18:	f9932009 	.word	0xf9932009
   15e1c:	720a2006 	.word	0x720a2006
   15e20:	2044f9b3 	.word	0x2044f9b3
   15e24:	f9b3878a 	.word	0xf9b3878a
   15e28:	86ca203e 	.word	0x86ca203e
   15e2c:	2042f9b3 	.word	0x2042f9b3
   15e30:	f9b3874a 	.word	0xf9b3874a
   15e34:	868a203c 	.word	0x868a203c
   15e38:	2046f9b3 	.word	0x2046f9b3
   15e3c:	f9b387ca 	.word	0xf9b387ca
   15e40:	870a2040 	.word	0x870a2040
   15e44:	201cf9b3 	.word	0x201cf9b3
   15e48:	6a9a830a 	.word	0x6a9a830a
   15e4c:	2022f8c1 	.word	0x2022f8c1
   15e50:	744a7c9a 	.word	0x744a7c9a
   15e54:	70ca785a 	.word	0x70ca785a
   15e58:	62ca6b5a 	.word	0x62ca6b5a
   15e5c:	202cf9b3 	.word	0x202cf9b3
   15e60:	885a84ca 	.word	0x885a84ca
   15e64:	6a1a808a 	.word	0x6a1a808a
   15e68:	201af8c1 	.word	0x201af8c1
   15e6c:	630a6b9a 	.word	0x630a6b9a
   15e70:	f8c16a5a 	.word	0xf8c16a5a
   15e74:	6b1a201e 	.word	0x6b1a201e
   15e78:	781a628a 	.word	0x781a628a
   15e7c:	f993708a 	.word	0xf993708a
   15e80:	73ca2010 	.word	0x73ca2010
   15e84:	80ca889a 	.word	0x80ca889a
   15e88:	824a8a9a 	.word	0x824a8a9a
   15e8c:	740a7c5a 	.word	0x740a7c5a
   15e90:	614b699b 	.word	0x614b699b
   15e94:	f04f4770 	.word	0xf04f4770
   15e98:	477030ff 	.word	0x477030ff

00015e9c <rpc_gnss_serialize_alm>:
   15e9c:	b3604603 	.word	0xb3604603
   15ea0:	2000b359 	.word	0x2000b359
   15ea4:	70482203 	.word	0x70482203
   15ea8:	f9b3700a 	.word	0xf9b3700a
   15eac:	2021201c 	.word	0x2021201c
   15eb0:	201df8a1 	.word	0x201df8a1
   15eb4:	201ef9b3 	.word	0x201ef9b3
   15eb8:	201ff8a1 	.word	0x201ff8a1
   15ebc:	2006f9b3 	.word	0x2006f9b3
   15ec0:	889a810a 	.word	0x889a810a
   15ec4:	78da80ca 	.word	0x78da80ca
   15ec8:	699a714a 	.word	0x699a714a
   15ecc:	2019f8c1 	.word	0x2019f8c1
   15ed0:	f8c1691a 	.word	0xf8c1691a
   15ed4:	f9b32011 	.word	0xf9b32011
   15ed8:	814a2008 	.word	0x814a2008
   15edc:	f8c168da 	.word	0xf8c168da
   15ee0:	7a9a200d 	.word	0x7a9a200d
   15ee4:	781a730a 	.word	0x781a730a
   15ee8:	789a708a 	.word	0x789a708a
   15eec:	695a710a 	.word	0x695a710a
   15ef0:	2015f8c1 	.word	0x2015f8c1
   15ef4:	70cb785b 	.word	0x70cb785b
   15ef8:	f04f4770 	.word	0xf04f4770
   15efc:	477030ff 	.word	0x477030ff

00015f00 <rpc_gnss_serialize_klob>:
   15f00:	b1f04603 	.word	0xb1f04603
   15f04:	2000b1e9 	.word	0x2000b1e9
   15f08:	70482204 	.word	0x70482204
   15f0c:	f993700a 	.word	0xf993700a
   15f10:	200a2000 	.word	0x200a2000
   15f14:	f993708a 	.word	0xf993708a
   15f18:	70ca2001 	.word	0x70ca2001
   15f1c:	2002f993 	.word	0x2002f993
   15f20:	f993710a 	.word	0xf993710a
   15f24:	714a2003 	.word	0x714a2003
   15f28:	2004f993 	.word	0x2004f993
   15f2c:	f993718a 	.word	0xf993718a
   15f30:	71ca2005 	.word	0x71ca2005
   15f34:	2006f993 	.word	0x2006f993
   15f38:	f993720a 	.word	0xf993720a
   15f3c:	724b3007 	.word	0x724b3007
   15f40:	f04f4770 	.word	0xf04f4770
   15f44:	477030ff 	.word	0x477030ff

00015f48 <rpc_gnss_serialize_nequick>:
   15f48:	b1984603 	.word	0xb1984603
   15f4c:	2000b191 	.word	0x2000b191
   15f50:	70482205 	.word	0x70482205
   15f54:	f9b3700a 	.word	0xf9b3700a
   15f58:	200a2000 	.word	0x200a2000
   15f5c:	f9b3804a 	.word	0xf9b3804a
   15f60:	808a2002 	.word	0x808a2002
   15f64:	2004f9b3 	.word	0x2004f9b3
   15f68:	799a80ca 	.word	0x799a80ca
   15f6c:	79db720a 	.word	0x79db720a
   15f70:	4770724b 	.word	0x4770724b
   15f74:	30fff04f 	.word	0x30fff04f
   15f78:	bf004770 	.word	0xbf004770

00015f7c <rpc_gnss_serialize_time_and_sv_tow>:
   15f7c:	b309b310 	.word	0xb309b310
   15f80:	2500b470 	.word	0x2500b470
   15f84:	460c2606 	.word	0x460c2606
   15f88:	700e704d 	.word	0x700e704d
   15f8c:	8805462b 	.word	0x8805462b
   15f90:	804d4602 	.word	0x804d4602
   15f94:	f8c168c5 	.word	0xf8c168c5
   15f98:	8905500a 	.word	0x8905500a
   15f9c:	6840810d 	.word	0x6840810d
   15fa0:	8a156048 	.word	0x8a156048
   15fa4:	0043eb03 	.word	0x0043eb03
   15fa8:	81c54408 	.word	0x81c54408
   15fac:	33017c90 	.word	0x33017c90
   15fb0:	74202b20 	.word	0x74202b20
   15fb4:	0204f102 	.word	0x0204f102
   15fb8:	0403f104 	.word	0x0403f104
   15fbc:	206ed1f1 	.word	0x206ed1f1
   15fc0:	4770bc70 	.word	0x4770bc70
   15fc4:	30fff04f 	.word	0x30fff04f
   15fc8:	bf004770 	.word	0xbf004770

00015fcc <rpc_gnss_serialize_location>:
   15fcc:	b1c84603 	.word	0xb1c84603
   15fd0:	2000b1c1 	.word	0x2000b1c1
   15fd4:	70482207 	.word	0x70482207
   15fd8:	f9b3700a 	.word	0xf9b3700a
   15fdc:	20112008 	.word	0x20112008
   15fe0:	7b9a814a 	.word	0x7b9a814a
   15fe4:	681a740a 	.word	0x681a740a
   15fe8:	2002f8c1 	.word	0x2002f8c1
   15fec:	f8c1685a 	.word	0xf8c1685a
   15ff0:	7b1a2006 	.word	0x7b1a2006
   15ff4:	7b5a738a 	.word	0x7b5a738a
   15ff8:	7a9a73ca 	.word	0x7a9a73ca
   15ffc:	7adb730a 	.word	0x7adb730a
   16000:	4770734b 	.word	0x4770734b
   16004:	30fff04f 	.word	0x30fff04f
   16008:	bf004770 	.word	0xbf004770

0001600c <rpc_gnss_serialize_integrity>:
   1600c:	b141b148 	.word	0xb141b148
   16010:	23082200 	.word	0x23082200
   16014:	700b704a 	.word	0x700b704a
   16018:	20066803 	.word	0x20066803
   1601c:	3002f8c1 	.word	0x3002f8c1
   16020:	f04f4770 	.word	0xf04f4770
   16024:	477030ff 	.word	0x477030ff

00016028 <ipc_trace_init>:
   16028:	60184b01 	.word	0x60184b01
   1602c:	bf004770 	.word	0xbf004770
   16030:	200205f8 	.word	0x200205f8

00016034 <bsd_os_trace_irq_handler>:
   16034:	4b6cb5f0 	.word	0x4b6cb5f0
   16038:	781bb083 	.word	0x781bb083
   1603c:	f0002b00 	.word	0xf0002b00
   16040:	4b6a80ad 	.word	0x4b6a80ad
   16044:	68a2681c 	.word	0x68a2681c
   16048:	429a6863 	.word	0x429a6863
   1604c:	f64bd02d 	.word	0xf64bd02d
   16050:	f8ad63ef 	.word	0xf8ad63ef
   16054:	78233000 	.word	0x78233000
   16058:	f88d466e 	.word	0xf88d466e
   1605c:	68633004 	.word	0x68633004
   16060:	429a2105 	.word	0x429a2105
   16064:	6927bf2a 	.word	0x6927bf2a
   16068:	1abf1a9f 	.word	0x1abf1a9f
   1606c:	bf94429a 	.word	0xbf94429a
   16070:	68e52500 	.word	0x68e52500
   16074:	bf88b2bf 	.word	0xbf88b2bf
   16078:	46301b5b 	.word	0x46301b5b
   1607c:	b29dbf88 	.word	0xb29dbf88
   16080:	7002f8ad 	.word	0x7002f8ad
   16084:	f8faf7fc 	.word	0xf8faf7fc
   16088:	1002f8bd 	.word	0x1002f8bd
   1608c:	f7fc68a0 	.word	0xf7fc68a0
   16090:	68a3f8f5 	.word	0x68a3f8f5
   16094:	441f6922 	.word	0x441f6922
   16098:	bf084297 	.word	0xbf084297
   1609c:	60a768e3 	.word	0x60a768e3
   160a0:	60a3bf08 	.word	0x60a3bf08
   160a4:	f0402d00 	.word	0xf0402d00
   160a8:	4b51808d 	.word	0x4b51808d
   160ac:	68a2681c 	.word	0x68a2681c
   160b0:	429a6863 	.word	0x429a6863
   160b4:	f64bd02c 	.word	0xf64bd02c
   160b8:	f8ad63ef 	.word	0xf8ad63ef
   160bc:	78233000 	.word	0x78233000
   160c0:	f88d466e 	.word	0xf88d466e
   160c4:	68633004 	.word	0x68633004
   160c8:	429a2105 	.word	0x429a2105
   160cc:	6927bf2a 	.word	0x6927bf2a
   160d0:	1abf1a9f 	.word	0x1abf1a9f
   160d4:	bf94429a 	.word	0xbf94429a
   160d8:	68e52500 	.word	0x68e52500
   160dc:	bf88b2bf 	.word	0xbf88b2bf
   160e0:	46301b5b 	.word	0x46301b5b
   160e4:	b29dbf88 	.word	0xb29dbf88
   160e8:	7002f8ad 	.word	0x7002f8ad
   160ec:	f8c6f7fc 	.word	0xf8c6f7fc
   160f0:	1002f8bd 	.word	0x1002f8bd
   160f4:	f7fc68a0 	.word	0xf7fc68a0
   160f8:	68a3f8c1 	.word	0x68a3f8c1
   160fc:	441f6922 	.word	0x441f6922
   16100:	bf084297 	.word	0xbf084297
   16104:	60a768e3 	.word	0x60a768e3
   16108:	60a3bf08 	.word	0x60a3bf08
   1610c:	d1482d00 	.word	0xd1482d00
   16110:	681c4b38 	.word	0x681c4b38
   16114:	686368a2 	.word	0x686368a2
   16118:	d02b429a 	.word	0xd02b429a
   1611c:	63eff64b 	.word	0x63eff64b
   16120:	3000f8ad 	.word	0x3000f8ad
   16124:	466e7823 	.word	0x466e7823
   16128:	3004f88d 	.word	0x3004f88d
   1612c:	21056863 	.word	0x21056863
   16130:	bf2a429a 	.word	0xbf2a429a
   16134:	1a9f6927 	.word	0x1a9f6927
   16138:	429a1abf 	.word	0x429a1abf
   1613c:	2500bf94 	.word	0x2500bf94
   16140:	b2bf68e5 	.word	0xb2bf68e5
   16144:	1b5bbf88 	.word	0x1b5bbf88
   16148:	bf884630 	.word	0xbf884630
   1614c:	f8adb29d 	.word	0xf8adb29d
   16150:	f7fc7002 	.word	0xf7fc7002
   16154:	f8bdf893 	.word	0xf8bdf893
   16158:	68a01002 	.word	0x68a01002
   1615c:	f88ef7fc 	.word	0xf88ef7fc
   16160:	692268a3 	.word	0x692268a3
   16164:	4297441f 	.word	0x4297441f
   16168:	68e3bf08 	.word	0x68e3bf08
   1616c:	bf0860a7 	.word	0xbf0860a7
   16170:	b90d60a3 	.word	0xb90d60a3
   16174:	bdf0b003 	.word	0xbdf0b003
   16178:	21054630 	.word	0x21054630
   1617c:	5002f8ad 	.word	0x5002f8ad
   16180:	f87cf7fc 	.word	0xf87cf7fc
   16184:	1002f8bd 	.word	0x1002f8bd
   16188:	f7fc68e0 	.word	0xf7fc68e0
   1618c:	f8bdf877 	.word	0xf8bdf877
   16190:	68e32002 	.word	0x68e32002
   16194:	60a34413 	.word	0x60a34413
   16198:	bdf0b003 	.word	0xbdf0b003
   1619c:	f830f7fc 	.word	0xf830f7fc
   161a0:	2105e74f 	.word	0x2105e74f
   161a4:	f8ad4630 	.word	0xf8ad4630
   161a8:	f7fc5002 	.word	0xf7fc5002
   161ac:	f8bdf867 	.word	0xf8bdf867
   161b0:	68e01002 	.word	0x68e01002
   161b4:	f862f7fc 	.word	0xf862f7fc
   161b8:	2002f8bd 	.word	0x2002f8bd
   161bc:	441368e3 	.word	0x441368e3
   161c0:	e7a560a3 	.word	0xe7a560a3
   161c4:	46302105 	.word	0x46302105
   161c8:	5002f8ad 	.word	0x5002f8ad
   161cc:	f856f7fc 	.word	0xf856f7fc
   161d0:	1002f8bd 	.word	0x1002f8bd
   161d4:	f7fc68e0 	.word	0xf7fc68e0
   161d8:	f8bdf851 	.word	0xf8bdf851
   161dc:	68e32002 	.word	0x68e32002
   161e0:	60a34413 	.word	0x60a34413
   161e4:	bf00e761 	.word	0xbf00e761
   161e8:	2002744c 	.word	0x2002744c
   161ec:	200205f4 	.word	0x200205f4
   161f0:	200205ec 	.word	0x200205ec
   161f4:	200205f0 	.word	0x200205f0

000161f8 <ipc_trace_handle>:
   161f8:	e92d2200 	.word	0xe92d2200
   161fc:	4bb04ff0 	.word	0x4bb04ff0
   16200:	681bb083 	.word	0x681bb083
   16204:	695c6919 	.word	0x695c6919
   16208:	741a7c18 	.word	0x741a7c18
   1620c:	745a7c58 	.word	0x745a7c58
   16210:	749a7c98 	.word	0x749a7c98
   16214:	74da7cd8 	.word	0x74da7cd8
   16218:	751a7d18 	.word	0x751a7d18
   1621c:	755a7d58 	.word	0x755a7d58
   16220:	759a7d98 	.word	0x759a7d98
   16224:	75da7dd8 	.word	0x75da7dd8
   16228:	3901b1b9 	.word	0x3901b1b9
   1622c:	d8142903 	.word	0xd8142903
   16230:	f011e8df 	.word	0xf011e8df
   16234:	010300d6 	.word	0x010300d6
   16238:	00160004 	.word	0x00160004
   1623c:	20032501 	.word	0x20032501
   16240:	f06f2200 	.word	0xf06f2200
   16244:	4c9f015f 	.word	0x4c9f015f
   16248:	7a1c7025 	.word	0x7a1c7025
   1624c:	7a587218 	.word	0x7a587218
   16250:	7a98725a 	.word	0x7a98725a
   16254:	7ada729a 	.word	0x7ada729a
   16258:	b00372d9 	.word	0xb00372d9
   1625c:	8ff0e8bd 	.word	0x8ff0e8bd
   16260:	22002104 	.word	0x22002104
   16264:	005ff06f 	.word	0x005ff06f
   16268:	72197a1c 	.word	0x72197a1c
   1626c:	725a7a59 	.word	0x725a7a59
   16270:	7a9c4994 	.word	0x7a9c4994
   16274:	7adc729a 	.word	0x7adc729a
   16278:	700a72d8 	.word	0x700a72d8
   1627c:	2b00780b 	.word	0x2b00780b
   16280:	8117f000 	.word	0x8117f000
   16284:	681c4b90 	.word	0x681c4b90
   16288:	686368a2 	.word	0x686368a2
   1628c:	d02d429a 	.word	0xd02d429a
   16290:	63eff64b 	.word	0x63eff64b
   16294:	3000f8ad 	.word	0x3000f8ad
   16298:	466e7823 	.word	0x466e7823
   1629c:	3004f88d 	.word	0x3004f88d
   162a0:	21056863 	.word	0x21056863
   162a4:	bf2a429a 	.word	0xbf2a429a
   162a8:	1a9f6927 	.word	0x1a9f6927
   162ac:	429a1abf 	.word	0x429a1abf
   162b0:	2500bf94 	.word	0x2500bf94
   162b4:	b2bf68e5 	.word	0xb2bf68e5
   162b8:	1b5bbf88 	.word	0x1b5bbf88
   162bc:	bf884630 	.word	0xbf884630
   162c0:	f8adb29d 	.word	0xf8adb29d
   162c4:	f7fb7002 	.word	0xf7fb7002
   162c8:	f8bdffd9 	.word	0xf8bdffd9
   162cc:	68a01002 	.word	0x68a01002
   162d0:	ffd4f7fb 	.word	0xffd4f7fb
   162d4:	692268a3 	.word	0x692268a3
   162d8:	4297441f 	.word	0x4297441f
   162dc:	68e3bf08 	.word	0x68e3bf08
   162e0:	bf0860a7 	.word	0xbf0860a7
   162e4:	2d0060a3 	.word	0x2d0060a3
   162e8:	80d2f040 	.word	0x80d2f040
   162ec:	681c4b77 	.word	0x681c4b77
   162f0:	686368a2 	.word	0x686368a2
   162f4:	d02d429a 	.word	0xd02d429a
   162f8:	63eff64b 	.word	0x63eff64b
   162fc:	3000f8ad 	.word	0x3000f8ad
   16300:	466e7823 	.word	0x466e7823
   16304:	3004f88d 	.word	0x3004f88d
   16308:	21056863 	.word	0x21056863
   1630c:	bf2a429a 	.word	0xbf2a429a
   16310:	1a9f6927 	.word	0x1a9f6927
   16314:	429a1abf 	.word	0x429a1abf
   16318:	2500bf94 	.word	0x2500bf94
   1631c:	b2bf68e5 	.word	0xb2bf68e5
   16320:	1b5bbf88 	.word	0x1b5bbf88
   16324:	bf884630 	.word	0xbf884630
   16328:	f8adb29d 	.word	0xf8adb29d
   1632c:	f7fb7002 	.word	0xf7fb7002
   16330:	f8bdffa5 	.word	0xf8bdffa5
   16334:	68a01002 	.word	0x68a01002
   16338:	ffa0f7fb 	.word	0xffa0f7fb
   1633c:	692268a3 	.word	0x692268a3
   16340:	4297441f 	.word	0x4297441f
   16344:	68e3bf08 	.word	0x68e3bf08
   16348:	bf0860a7 	.word	0xbf0860a7
   1634c:	2d0060a3 	.word	0x2d0060a3
   16350:	808df040 	.word	0x808df040
   16354:	681c4b5e 	.word	0x681c4b5e
   16358:	686368a2 	.word	0x686368a2
   1635c:	f43f429a 	.word	0xf43f429a
   16360:	f64baf7c 	.word	0xf64baf7c
   16364:	f8ad63ef 	.word	0xf8ad63ef
   16368:	78233000 	.word	0x78233000
   1636c:	f88d466e 	.word	0xf88d466e
   16370:	68633004 	.word	0x68633004
   16374:	429a2105 	.word	0x429a2105
   16378:	6927bf2a 	.word	0x6927bf2a
   1637c:	1abf1a9f 	.word	0x1abf1a9f
   16380:	bf94429a 	.word	0xbf94429a
   16384:	68e52500 	.word	0x68e52500
   16388:	bf88b2bf 	.word	0xbf88b2bf
   1638c:	46301b5b 	.word	0x46301b5b
   16390:	b29dbf88 	.word	0xb29dbf88
   16394:	7002f8ad 	.word	0x7002f8ad
   16398:	ff70f7fb 	.word	0xff70f7fb
   1639c:	1002f8bd 	.word	0x1002f8bd
   163a0:	f7fb68a0 	.word	0xf7fb68a0
   163a4:	68a3ff6b 	.word	0x68a3ff6b
   163a8:	441f6922 	.word	0x441f6922
   163ac:	bf084297 	.word	0xbf084297
   163b0:	60a768e3 	.word	0x60a768e3
   163b4:	60a3bf08 	.word	0x60a3bf08
   163b8:	f43f2d00 	.word	0xf43f2d00
   163bc:	2105af4e 	.word	0x2105af4e
   163c0:	f8ad4630 	.word	0xf8ad4630
   163c4:	f7fb5002 	.word	0xf7fb5002
   163c8:	f8bdff59 	.word	0xf8bdff59
   163cc:	68e01002 	.word	0x68e01002
   163d0:	ff54f7fb 	.word	0xff54f7fb
   163d4:	2002f8bd 	.word	0x2002f8bd
   163d8:	441368e3 	.word	0x441368e3
   163dc:	e73c60a3 	.word	0xe73c60a3
   163e0:	78114a38 	.word	0x78114a38
   163e4:	2100b109 	.word	0x2100b109
   163e8:	68a57011 	.word	0x68a57011
   163ec:	d0392d00 	.word	0xd0392d00
   163f0:	0c00f04f 	.word	0x0c00f04f
   163f4:	a0d4f8df 	.word	0xa0d4f8df
   163f8:	b0ccf8df 	.word	0xb0ccf8df
   163fc:	46e14934 	.word	0x46e14934
   16400:	46624666 	.word	0x46624666
   16404:	e000f8d1 	.word	0xe000f8d1
   16408:	8000f8da 	.word	0x8000f8da
   1640c:	7000f8db 	.word	0x7000f8db
   16410:	2963e008 	.word	0x2963e008
   16414:	2961d016 	.word	0x2961d016
   16418:	4607bf04 	.word	0x4607bf04
   1641c:	32012601 	.word	0x32012601
   16420:	d01342aa 	.word	0xd01342aa
   16424:	eb041c91 	.word	0xeb041c91
   16428:	68480181 	.word	0x68480181
   1642c:	29627801 	.word	0x29627801
   16430:	4680d1ef 	.word	0x4680d1ef
   16434:	0901f04f 	.word	0x0901f04f
   16438:	f7fbe7f1 	.word	0xf7fbe7f1
   1643c:	b003fed9 	.word	0xb003fed9
   16440:	8ff0e8bd 	.word	0x8ff0e8bd
   16444:	f04f4686 	.word	0xf04f4686
   16448:	e7e80c01 	.word	0xe7e80c01
   1644c:	f1b9bba6 	.word	0xf1b9bba6
   16450:	d0010f00 	.word	0xd0010f00
   16454:	8000f8ca 	.word	0x8000f8ca
   16458:	0f00f1bc 	.word	0x0f00f1bc
   1645c:	4a1cd002 	.word	0x4a1cd002
   16460:	e000f8c2 	.word	0xe000f8c2
   16464:	22002001 	.word	0x22002001
   16468:	015ff06f 	.word	0x015ff06f
   1646c:	2105e6ed 	.word	0x2105e6ed
   16470:	f8ad4630 	.word	0xf8ad4630
   16474:	f7fb5002 	.word	0xf7fb5002
   16478:	f8bdff01 	.word	0xf8bdff01
   1647c:	68e01002 	.word	0x68e01002
   16480:	fefcf7fb 	.word	0xfefcf7fb
   16484:	2002f8bd 	.word	0x2002f8bd
   16488:	441368e3 	.word	0x441368e3
   1648c:	e76160a3 	.word	0xe76160a3
   16490:	46302105 	.word	0x46302105
   16494:	5002f8ad 	.word	0x5002f8ad
   16498:	fef0f7fb 	.word	0xfef0f7fb
   1649c:	1002f8bd 	.word	0x1002f8bd
   164a0:	f7fb68e0 	.word	0xf7fb68e0
   164a4:	f8bdfeeb 	.word	0xf8bdfeeb
   164a8:	68e32002 	.word	0x68e32002
   164ac:	60a34413 	.word	0x60a34413
   164b0:	f7fbe71c 	.word	0xf7fbe71c
   164b4:	e6e5fea5 	.word	0xe6e5fea5
   164b8:	7000f8cb 	.word	0x7000f8cb
   164bc:	bf00e7c7 	.word	0xbf00e7c7
   164c0:	200205f8 	.word	0x200205f8
   164c4:	2002744c 	.word	0x2002744c
   164c8:	200205f4 	.word	0x200205f4
   164cc:	200205ec 	.word	0x200205ec
   164d0:	200205f0 	.word	0x200205f0

000164d4 <rpc_trace_coredump_in_progress>:
   164d4:	78184b01 	.word	0x78184b01
   164d8:	bf004770 	.word	0xbf004770
   164dc:	2002744c 	.word	0x2002744c

000164e0 <ecp_modp>:
   164e0:	6e4bb570 	.word	0x6e4bb570
   164e4:	2b004604 	.word	0x2b004604
   164e8:	6803d03d 	.word	0x6803d03d
   164ec:	2b00460d 	.word	0x2b00460d
   164f0:	4620db2f 	.word	0x4620db2f
   164f4:	fe06f005 	.word	0xfe06f005
   164f8:	ebb06dab 	.word	0xebb06dab
   164fc:	d82d0f43 	.word	0xd82d0f43
   16500:	46206e6b 	.word	0x46206e6b
   16504:	46064798 	.word	0x46064798
   16508:	3504bb08 	.word	0x3504bb08
   1650c:	2100e00a 	.word	0x2100e00a
   16510:	f0064620 	.word	0xf0064620
   16514:	b1a0f8c7 	.word	0xb1a0f8c7
   16518:	4621462a 	.word	0x4621462a
   1651c:	f0064620 	.word	0xf0064620
   16520:	b9e8fa79 	.word	0xb9e8fa79
   16524:	2b006823 	.word	0x2b006823
   16528:	4629dbf1 	.word	0x4629dbf1
   1652c:	f0064620 	.word	0xf0064620
   16530:	2800f851 	.word	0x2800f851
   16534:	462adb0b 	.word	0x462adb0b
   16538:	46204621 	.word	0x46204621
   1653c:	f9aaf006 	.word	0xf9aaf006
   16540:	4629b970 	.word	0x4629b970
   16544:	f0064620 	.word	0xf0064620
   16548:	2800f845 	.word	0x2800f845
   1654c:	4630daf3 	.word	0x4630daf3
   16550:	2100bd70 	.word	0x2100bd70
   16554:	f8a6f006 	.word	0xf8a6f006
   16558:	d0ca2800 	.word	0xd0ca2800
   1655c:	e7f64e05 	.word	0xe7f64e05
   16560:	46304606 	.word	0x46304606
   16564:	1d0abd70 	.word	0x1d0abd70
   16568:	4070e8bd 	.word	0x4070e8bd
   1656c:	f0074601 	.word	0xf0074601
   16570:	bf00b84d 	.word	0xbf00b84d
   16574:	ffffb080 	.word	0xffffb080

00016578 <ecp_double_jac>:
   16578:	43f0e92d 	.word	0x43f0e92d
   1657c:	b08d4606 	.word	0xb08d4606
   16580:	46884668 	.word	0x46884668
   16584:	f0054615 	.word	0xf0054615
   16588:	a803fb63 	.word	0xa803fb63
   1658c:	fb60f005 	.word	0xfb60f005
   16590:	f005a806 	.word	0xf005a806
   16594:	a809fb5d 	.word	0xa809fb5d
   16598:	fb5af005 	.word	0xfb5af005
   1659c:	2b0069b3 	.word	0x2b0069b3
   165a0:	80b2f000 	.word	0x80b2f000
   165a4:	4629462a 	.word	0x4629462a
   165a8:	f006a803 	.word	0xf006a803
   165ac:	4604fb67 	.word	0x4604fb67
   165b0:	4668b178 	.word	0x4668b178
   165b4:	fb54f005 	.word	0xfb54f005
   165b8:	f005a803 	.word	0xf005a803
   165bc:	a806fb51 	.word	0xa806fb51
   165c0:	fb4ef005 	.word	0xfb4ef005
   165c4:	f005a809 	.word	0xf005a809
   165c8:	4620fb4b 	.word	0x4620fb4b
   165cc:	e8bdb00d 	.word	0xe8bdb00d
   165d0:	463183f0 	.word	0x463183f0
   165d4:	f7ffa803 	.word	0xf7ffa803
   165d8:	4604ff83 	.word	0x4604ff83
   165dc:	d1e82800 	.word	0xd1e82800
   165e0:	a9032203 	.word	0xa9032203
   165e4:	f0064668 	.word	0xf0064668
   165e8:	4604fc41 	.word	0x4604fc41
   165ec:	d1e02800 	.word	0xd1e02800
   165f0:	e0071d37 	.word	0xe0071d37
   165f4:	4669463a 	.word	0x4669463a
   165f8:	f0064668 	.word	0xf0064668
   165fc:	4604f94b 	.word	0x4604f94b
   16600:	d1d62800 	.word	0xd1d62800
   16604:	46684639 	.word	0x46684639
   16608:	ffe4f005 	.word	0xffe4f005
   1660c:	daf12800 	.word	0xdaf12800
   16610:	0910f106 	.word	0x0910f106
   16614:	21004648 	.word	0x21004648
   16618:	f844f006 	.word	0xf844f006
   1661c:	f0402800 	.word	0xf0402800
   16620:	f10580e2 	.word	0xf10580e2
   16624:	464a090c 	.word	0x464a090c
   16628:	a8064649 	.word	0xa8064649
   1662c:	fb26f006 	.word	0xfb26f006
   16630:	28004604 	.word	0x28004604
   16634:	4631d1bd 	.word	0x4631d1bd
   16638:	f7ffa806 	.word	0xf7ffa806
   1663c:	4604ff51 	.word	0x4604ff51
   16640:	d1b62800 	.word	0xd1b62800
   16644:	a8062101 	.word	0xa8062101
   16648:	fe9ef005 	.word	0xfe9ef005
   1664c:	b1404604 	.word	0xb1404604
   16650:	a906e7af 	.word	0xa906e7af
   16654:	4608463a 	.word	0x4608463a
   16658:	f91cf006 	.word	0xf91cf006
   1665c:	28004604 	.word	0x28004604
   16660:	4639d1a7 	.word	0x4639d1a7
   16664:	f005a806 	.word	0xf005a806
   16668:	2800ffb5 	.word	0x2800ffb5
   1666c:	aa06daf1 	.word	0xaa06daf1
   16670:	a8034629 	.word	0xa8034629
   16674:	fb02f006 	.word	0xfb02f006
   16678:	28004604 	.word	0x28004604
   1667c:	4631d199 	.word	0x4631d199
   16680:	f7ffa803 	.word	0xf7ffa803
   16684:	4604ff2d 	.word	0x4604ff2d
   16688:	d1922800 	.word	0xd1922800
   1668c:	a8032101 	.word	0xa8032101
   16690:	fe7af005 	.word	0xfe7af005
   16694:	b1404604 	.word	0xb1404604
   16698:	a903e78b 	.word	0xa903e78b
   1669c:	4608463a 	.word	0x4608463a
   166a0:	f8f8f006 	.word	0xf8f8f006
   166a4:	28004604 	.word	0x28004604
   166a8:	4639d183 	.word	0x4639d183
   166ac:	f005a803 	.word	0xf005a803
   166b0:	2800ff91 	.word	0x2800ff91
   166b4:	aa06daf1 	.word	0xaa06daf1
   166b8:	a8094611 	.word	0xa8094611
   166bc:	fadef006 	.word	0xfadef006
   166c0:	28004604 	.word	0x28004604
   166c4:	af75f47f 	.word	0xaf75f47f
   166c8:	a8094631 	.word	0xa8094631
   166cc:	ff08f7ff 	.word	0xff08f7ff
   166d0:	28004604 	.word	0x28004604
   166d4:	af6df47f 	.word	0xaf6df47f
   166d8:	a8092101 	.word	0xa8092101
   166dc:	fe54f005 	.word	0xfe54f005
   166e0:	28004604 	.word	0x28004604
   166e4:	af65f47f 	.word	0xaf65f47f
   166e8:	a8094639 	.word	0xa8094639
   166ec:	ff72f005 	.word	0xff72f005
   166f0:	f2c02800 	.word	0xf2c02800
   166f4:	a90980c5 	.word	0xa90980c5
   166f8:	4608463a 	.word	0x4608463a
   166fc:	f8caf006 	.word	0xf8caf006
   16700:	28004604 	.word	0x28004604
   16704:	e754d0f0 	.word	0xe754d0f0
   16708:	0218f105 	.word	0x0218f105
   1670c:	a8034611 	.word	0xa8034611
   16710:	fab4f006 	.word	0xfab4f006
   16714:	28004604 	.word	0x28004604
   16718:	af4bf47f 	.word	0xaf4bf47f
   1671c:	a8034631 	.word	0xa8034631
   16720:	fedef7ff 	.word	0xfedef7ff
   16724:	28004604 	.word	0x28004604
   16728:	af43f47f 	.word	0xaf43f47f
   1672c:	4629aa03 	.word	0x4629aa03
   16730:	f006a806 	.word	0xf006a806
   16734:	4604f96f 	.word	0x4604f96f
   16738:	f47f2800 	.word	0xf47f2800
   1673c:	1d37af3a 	.word	0x1d37af3a
   16740:	a906e008 	.word	0xa906e008
   16744:	4608463a 	.word	0x4608463a
   16748:	f8a4f006 	.word	0xf8a4f006
   1674c:	28004604 	.word	0x28004604
   16750:	af2ff47f 	.word	0xaf2ff47f
   16754:	a8064639 	.word	0xa8064639
   16758:	ff3cf005 	.word	0xff3cf005
   1675c:	daf02800 	.word	0xdaf02800
   16760:	4629aa03 	.word	0x4629aa03
   16764:	f006a809 	.word	0xf006a809
   16768:	4604f9c9 	.word	0x4604f9c9
   1676c:	e720b170 	.word	0xe720b170
   16770:	a8092100 	.word	0xa8092100
   16774:	ff96f005 	.word	0xff96f005
   16778:	a909b158 	.word	0xa909b158
   1677c:	4608463a 	.word	0x4608463a
   16780:	f948f006 	.word	0xf948f006
   16784:	28004604 	.word	0x28004604
   16788:	af13f47f 	.word	0xaf13f47f
   1678c:	2b009b09 	.word	0x2b009b09
   16790:	aa09dbee 	.word	0xaa09dbee
   16794:	a803a906 	.word	0xa803a906
   16798:	fa70f006 	.word	0xfa70f006
   1679c:	28004604 	.word	0x28004604
   167a0:	af07f47f 	.word	0xaf07f47f
   167a4:	a8034631 	.word	0xa8034631
   167a8:	fe9af7ff 	.word	0xfe9af7ff
   167ac:	28004604 	.word	0x28004604
   167b0:	aefff47f 	.word	0xaefff47f
   167b4:	a9032203 	.word	0xa9032203
   167b8:	f0064668 	.word	0xf0064668
   167bc:	4604fb57 	.word	0x4604fb57
   167c0:	f47f2800 	.word	0xf47f2800
   167c4:	4639aef6 	.word	0x4639aef6
   167c8:	f0054668 	.word	0xf0054668
   167cc:	2800ff03 	.word	0x2800ff03
   167d0:	af27f6ff 	.word	0xaf27f6ff
   167d4:	4669463a 	.word	0x4669463a
   167d8:	f0064668 	.word	0xf0064668
   167dc:	4604f85b 	.word	0x4604f85b
   167e0:	d0f02800 	.word	0xd0f02800
   167e4:	f105e6e5 	.word	0xf105e6e5
   167e8:	46110218 	.word	0x46110218
   167ec:	f006a803 	.word	0xf006a803
   167f0:	4604fa45 	.word	0x4604fa45
   167f4:	f47f2800 	.word	0xf47f2800
   167f8:	4631aedc 	.word	0x4631aedc
   167fc:	f7ffa803 	.word	0xf7ffa803
   16800:	4604fe6f 	.word	0x4604fe6f
   16804:	f47f2800 	.word	0xf47f2800
   16808:	aa03aed4 	.word	0xaa03aed4
   1680c:	a8064611 	.word	0xa8064611
   16810:	fa34f006 	.word	0xfa34f006
   16814:	28004604 	.word	0x28004604
   16818:	aecbf47f 	.word	0xaecbf47f
   1681c:	a8064631 	.word	0xa8064631
   16820:	fe5ef7ff 	.word	0xfe5ef7ff
   16824:	28004604 	.word	0x28004604
   16828:	aec3f47f 	.word	0xaec3f47f
   1682c:	a906464a 	.word	0xa906464a
   16830:	f006a803 	.word	0xf006a803
   16834:	4604fa23 	.word	0x4604fa23
   16838:	f47f2800 	.word	0xf47f2800
   1683c:	4631aeba 	.word	0x4631aeba
   16840:	f7ffa803 	.word	0xf7ffa803
   16844:	4604fe4d 	.word	0x4604fe4d
   16848:	f47f2800 	.word	0xf47f2800
   1684c:	aa03aeb2 	.word	0xaa03aeb2
   16850:	46684669 	.word	0x46684669
   16854:	f8def006 	.word	0xf8def006
   16858:	28004604 	.word	0x28004604
   1685c:	aea9f47f 	.word	0xaea9f47f
   16860:	46684639 	.word	0x46684639
   16864:	feb6f005 	.word	0xfeb6f005
   16868:	f6ff2800 	.word	0xf6ff2800
   1686c:	463aaeda 	.word	0x463aaeda
   16870:	46684669 	.word	0x46684669
   16874:	f80ef006 	.word	0xf80ef006
   16878:	28004604 	.word	0x28004604
   1687c:	e698d0f0 	.word	0xe698d0f0
   16880:	4669466a 	.word	0x4669466a
   16884:	f006a806 	.word	0xf006a806
   16888:	4604f9f9 	.word	0x4604f9f9
   1688c:	f47f2800 	.word	0xf47f2800
   16890:	4631ae90 	.word	0x4631ae90
   16894:	f7ffa806 	.word	0xf7ffa806
   16898:	4604fe23 	.word	0x4604fe23
   1689c:	f47f2800 	.word	0xf47f2800
   168a0:	a906ae88 	.word	0xa906ae88
   168a4:	4608aa03 	.word	0x4608aa03
   168a8:	f928f006 	.word	0xf928f006
   168ac:	28004604 	.word	0x28004604
   168b0:	ae7ff47f 	.word	0xae7ff47f
   168b4:	2b009b06 	.word	0x2b009b06
   168b8:	2100da0d 	.word	0x2100da0d
   168bc:	f005a806 	.word	0xf005a806
   168c0:	b140fef1 	.word	0xb140fef1
   168c4:	463aa906 	.word	0x463aa906
   168c8:	f0064608 	.word	0xf0064608
   168cc:	4604f8a3 	.word	0x4604f8a3
   168d0:	d0ef2800 	.word	0xd0ef2800
   168d4:	a906e66d 	.word	0xa906e66d
   168d8:	4608aa03 	.word	0x4608aa03
   168dc:	f90ef006 	.word	0xf90ef006
   168e0:	28004604 	.word	0x28004604
   168e4:	ae65f47f 	.word	0xae65f47f
   168e8:	2b009b06 	.word	0x2b009b06
   168ec:	2100da0d 	.word	0x2100da0d
   168f0:	f005a806 	.word	0xf005a806
   168f4:	b140fed7 	.word	0xb140fed7
   168f8:	463aa906 	.word	0x463aa906
   168fc:	f0064608 	.word	0xf0064608
   16900:	4604f889 	.word	0x4604f889
   16904:	d0ef2800 	.word	0xd0ef2800
   16908:	a903e653 	.word	0xa903e653
   1690c:	4608aa06 	.word	0x4608aa06
   16910:	f8f4f006 	.word	0xf8f4f006
   16914:	28004604 	.word	0x28004604
   16918:	ae4bf47f 	.word	0xae4bf47f
   1691c:	2b009b03 	.word	0x2b009b03
   16920:	2100da0d 	.word	0x2100da0d
   16924:	f005a803 	.word	0xf005a803
   16928:	b140febd 	.word	0xb140febd
   1692c:	463aa903 	.word	0x463aa903
   16930:	f0064608 	.word	0xf0064608
   16934:	4604f86f 	.word	0x4604f86f
   16938:	d0ef2800 	.word	0xd0ef2800
   1693c:	a903e639 	.word	0xa903e639
   16940:	4608466a 	.word	0x4608466a
   16944:	f99af006 	.word	0xf99af006
   16948:	28004604 	.word	0x28004604
   1694c:	ae31f47f 	.word	0xae31f47f
   16950:	a8034631 	.word	0xa8034631
   16954:	fdc4f7ff 	.word	0xfdc4f7ff
   16958:	28004604 	.word	0x28004604
   1695c:	ae29f47f 	.word	0xae29f47f
   16960:	aa09a903 	.word	0xaa09a903
   16964:	f0064608 	.word	0xf0064608
   16968:	4604f8c9 	.word	0x4604f8c9
   1696c:	f47f2800 	.word	0xf47f2800
   16970:	9b03ae20 	.word	0x9b03ae20
   16974:	da0d2b00 	.word	0xda0d2b00
   16978:	a8032100 	.word	0xa8032100
   1697c:	fe92f005 	.word	0xfe92f005
   16980:	a903b140 	.word	0xa903b140
   16984:	4608463a 	.word	0x4608463a
   16988:	f844f006 	.word	0xf844f006
   1698c:	28004604 	.word	0x28004604
   16990:	e60ed0ef 	.word	0xe60ed0ef
   16994:	0218f105 	.word	0x0218f105
   16998:	a8094649 	.word	0xa8094649
   1699c:	f96ef006 	.word	0xf96ef006
   169a0:	28004604 	.word	0x28004604
   169a4:	ae05f47f 	.word	0xae05f47f
   169a8:	a8094631 	.word	0xa8094631
   169ac:	fd98f7ff 	.word	0xfd98f7ff
   169b0:	28004604 	.word	0x28004604
   169b4:	adfdf47f 	.word	0xadfdf47f
   169b8:	a8092101 	.word	0xa8092101
   169bc:	fce4f005 	.word	0xfce4f005
   169c0:	28004604 	.word	0x28004604
   169c4:	adf5f47f 	.word	0xadf5f47f
   169c8:	a8094639 	.word	0xa8094639
   169cc:	fe02f005 	.word	0xfe02f005
   169d0:	db082800 	.word	0xdb082800
   169d4:	463aa909 	.word	0x463aa909
   169d8:	f0054608 	.word	0xf0054608
   169dc:	4604ff5b 	.word	0x4604ff5b
   169e0:	d0f12800 	.word	0xd0f12800
   169e4:	a906e5e5 	.word	0xa906e5e5
   169e8:	f0054640 	.word	0xf0054640
   169ec:	4604f9b5 	.word	0x4604f9b5
   169f0:	f47f2800 	.word	0xf47f2800
   169f4:	a903adde 	.word	0xa903adde
   169f8:	000cf108 	.word	0x000cf108
   169fc:	f9acf005 	.word	0xf9acf005
   16a00:	28004604 	.word	0x28004604
   16a04:	add5f47f 	.word	0xadd5f47f
   16a08:	0018f108 	.word	0x0018f108
   16a0c:	f005a909 	.word	0xf005a909
   16a10:	4604f9a3 	.word	0x4604f9a3
   16a14:	bf00e5cd 	.word	0xbf00e5cd

00016a18 <ecp_normalize_jac>:
   16a18:	f101b5f0 	.word	0xf101b5f0
   16a1c:	b0870518 	.word	0xb0870518
   16a20:	4607460e 	.word	0x4607460e
   16a24:	46282100 	.word	0x46282100
   16a28:	fe3cf005 	.word	0xfe3cf005
   16a2c:	4604b918 	.word	0x4604b918
   16a30:	b0074620 	.word	0xb0074620
   16a34:	4668bdf0 	.word	0x4668bdf0
   16a38:	f90af005 	.word	0xf90af005
   16a3c:	f005a803 	.word	0xf005a803
   16a40:	4668f907 	.word	0x4668f907
   16a44:	46291d3a 	.word	0x46291d3a
   16a48:	f936f007 	.word	0xf936f007
   16a4c:	b1404604 	.word	0xb1404604
   16a50:	f0054668 	.word	0xf0054668
   16a54:	a803f905 	.word	0xa803f905
   16a58:	f902f005 	.word	0xf902f005
   16a5c:	b0074620 	.word	0xb0074620
   16a60:	466abdf0 	.word	0x466abdf0
   16a64:	a8034669 	.word	0xa8034669
   16a68:	f908f006 	.word	0xf908f006
   16a6c:	28004604 	.word	0x28004604
   16a70:	4639d1ee 	.word	0x4639d1ee
   16a74:	f7ffa803 	.word	0xf7ffa803
   16a78:	4604fd33 	.word	0x4604fd33
   16a7c:	d1e72800 	.word	0xd1e72800
   16a80:	4631aa03 	.word	0x4631aa03
   16a84:	f0064630 	.word	0xf0064630
   16a88:	4604f8f9 	.word	0x4604f8f9
   16a8c:	d1df2800 	.word	0xd1df2800
   16a90:	46304639 	.word	0x46304639
   16a94:	fd24f7ff 	.word	0xfd24f7ff
   16a98:	28004604 	.word	0x28004604
   16a9c:	360cd1d8 	.word	0x360cd1d8
   16aa0:	46304631 	.word	0x46304631
   16aa4:	f006aa03 	.word	0xf006aa03
   16aa8:	4604f8e9 	.word	0x4604f8e9
   16aac:	d1cf2800 	.word	0xd1cf2800
   16ab0:	46304639 	.word	0x46304639
   16ab4:	fd14f7ff 	.word	0xfd14f7ff
   16ab8:	28004604 	.word	0x28004604
   16abc:	466ad1c8 	.word	0x466ad1c8
   16ac0:	46304631 	.word	0x46304631
   16ac4:	f8daf006 	.word	0xf8daf006
   16ac8:	28004604 	.word	0x28004604
   16acc:	4639d1c0 	.word	0x4639d1c0
   16ad0:	f7ff4630 	.word	0xf7ff4630
   16ad4:	4604fd05 	.word	0x4604fd05
   16ad8:	d1b92800 	.word	0xd1b92800
   16adc:	21014628 	.word	0x21014628
   16ae0:	fac6f005 	.word	0xfac6f005
   16ae4:	e7b34604 	.word	0xe7b34604

00016ae8 <ecp_normalize_jac_many.part.3>:
   16ae8:	4ff0e92d 	.word	0x4ff0e92d
   16aec:	b08b4682 	.word	0xb08b4682
   16af0:	4610468b 	.word	0x4610468b
   16af4:	4616210c 	.word	0x4616210c
   16af8:	fcfef008 	.word	0xfcfef008
   16afc:	f0002800 	.word	0xf0002800
   16b00:	468080fe 	.word	0x468080fe
   16b04:	f005a801 	.word	0xf005a801
   16b08:	a804f8a3 	.word	0xa804f8a3
   16b0c:	f8a0f005 	.word	0xf8a0f005
   16b10:	f005a807 	.word	0xf005a807
   16b14:	f8dbf89d 	.word	0xf8dbf89d
   16b18:	46401000 	.word	0x46401000
   16b1c:	f0053118 	.word	0xf0053118
   16b20:	4604f91b 	.word	0x4604f91b
   16b24:	2e01bb60 	.word	0x2e01bb60
   16b28:	46d9d946 	.word	0x46d9d946
   16b2c:	f1082701 	.word	0xf1082701
   16b30:	e008050c 	.word	0xe008050c
   16b34:	46514628 	.word	0x46514628
   16b38:	fcd2f7ff 	.word	0xfcd2f7ff
   16b3c:	4604350c 	.word	0x4604350c
   16b40:	42beb968 	.word	0x42beb968
   16b44:	f859d038 	.word	0xf859d038
   16b48:	f1a52f04 	.word	0xf1a52f04
   16b4c:	3218010c 	.word	0x3218010c
   16b50:	f0064628 	.word	0xf0064628
   16b54:	3701f893 	.word	0x3701f893
   16b58:	28004604 	.word	0x28004604
   16b5c:	a801d0ea 	.word	0xa801d0ea
   16b60:	f87ef005 	.word	0xf87ef005
   16b64:	f005a804 	.word	0xf005a804
   16b68:	a807f87b 	.word	0xa807f87b
   16b6c:	f878f005 	.word	0xf878f005
   16b70:	a901e010 	.word	0xa901e010
   16b74:	f005a804 	.word	0xf005a804
   16b78:	4604f8ef 	.word	0x4604f8ef
   16b7c:	d0532800 	.word	0xd0532800
   16b80:	f005a801 	.word	0xf005a801
   16b84:	a804f86d 	.word	0xa804f86d
   16b88:	f86af005 	.word	0xf86af005
   16b8c:	f005a807 	.word	0xf005a807
   16b90:	b156f867 	.word	0xb156f867
   16b94:	eb064645 	.word	0xeb064645
   16b98:	eb080646 	.word	0xeb080646
   16b9c:	46280686 	.word	0x46280686
   16ba0:	f005350c 	.word	0xf005350c
   16ba4:	42b5f85d 	.word	0x42b5f85d
   16ba8:	4640d1f9 	.word	0x4640d1f9
   16bac:	fcb8f008 	.word	0xfcb8f008
   16bb0:	b00b4620 	.word	0xb00b4620
   16bb4:	8ff0e8bd 	.word	0x8ff0e8bd
   16bb8:	0546eb06 	.word	0x0546eb06
   16bbc:	f1a500ad 	.word	0xf1a500ad
   16bc0:	4441010c 	.word	0x4441010c
   16bc4:	0204f10a 	.word	0x0204f10a
   16bc8:	f007a801 	.word	0xf007a801
   16bcc:	4604f875 	.word	0x4604f875
   16bd0:	d1d52800 	.word	0xd1d52800
   16bd4:	4380f106 	.word	0x4380f106
   16bd8:	3b013d18 	.word	0x3b013d18
   16bdc:	eb0b4445 	.word	0xeb0b4445
   16be0:	1e770b83 	.word	0x1e770b83
   16be4:	d0c42f00 	.word	0xd0c42f00
   16be8:	a901462a 	.word	0xa901462a
   16bec:	f006a804 	.word	0xf006a804
   16bf0:	4604f845 	.word	0x4604f845
   16bf4:	d1c32800 	.word	0xd1c32800
   16bf8:	a8044651 	.word	0xa8044651
   16bfc:	fc70f7ff 	.word	0xfc70f7ff
   16c00:	28004604 	.word	0x28004604
   16c04:	f8dbd1bc 	.word	0xf8dbd1bc
   16c08:	a9012000 	.word	0xa9012000
   16c0c:	46083218 	.word	0x46083218
   16c10:	f834f006 	.word	0xf834f006
   16c14:	28004604 	.word	0x28004604
   16c18:	4651d1b2 	.word	0x4651d1b2
   16c1c:	f7ffa801 	.word	0xf7ffa801
   16c20:	4604fc5f 	.word	0x4604fc5f
   16c24:	d1ab2800 	.word	0xd1ab2800
   16c28:	4611aa04 	.word	0x4611aa04
   16c2c:	f006a807 	.word	0xf006a807
   16c30:	4604f825 	.word	0x4604f825
   16c34:	d1a32800 	.word	0xd1a32800
   16c38:	a8074651 	.word	0xa8074651
   16c3c:	fc50f7ff 	.word	0xfc50f7ff
   16c40:	28004604 	.word	0x28004604
   16c44:	f8dbd19c 	.word	0xf8dbd19c
   16c48:	aa071000 	.word	0xaa071000
   16c4c:	f0064608 	.word	0xf0064608
   16c50:	4604f815 	.word	0x4604f815
   16c54:	d1932800 	.word	0xd1932800
   16c58:	f8db4651 	.word	0xf8db4651
   16c5c:	f7ff0000 	.word	0xf7ff0000
   16c60:	4604fc3f 	.word	0x4604fc3f
   16c64:	d18b2800 	.word	0xd18b2800
   16c68:	1000f8db 	.word	0x1000f8db
   16c6c:	310caa07 	.word	0x310caa07
   16c70:	f0064608 	.word	0xf0064608
   16c74:	4604f803 	.word	0x4604f803
   16c78:	d1812800 	.word	0xd1812800
   16c7c:	0000f8db 	.word	0x0000f8db
   16c80:	300c4651 	.word	0x300c4651
   16c84:	fc2cf7ff 	.word	0xfc2cf7ff
   16c88:	28004604 	.word	0x28004604
   16c8c:	af78f47f 	.word	0xaf78f47f
   16c90:	1000f8db 	.word	0x1000f8db
   16c94:	310caa04 	.word	0x310caa04
   16c98:	f0054608 	.word	0xf0054608
   16c9c:	4604ffef 	.word	0x4604ffef
   16ca0:	f47f2800 	.word	0xf47f2800
   16ca4:	f8dbaf6d 	.word	0xf8dbaf6d
   16ca8:	46510000 	.word	0x46510000
   16cac:	f7ff300c 	.word	0xf7ff300c
   16cb0:	4604fc17 	.word	0x4604fc17
   16cb4:	f47f2800 	.word	0xf47f2800
   16cb8:	f8daaf63 	.word	0xf8daaf63
   16cbc:	f8db1008 	.word	0xf8db1008
   16cc0:	f0040000 	.word	0xf0040000
   16cc4:	4604ffe7 	.word	0x4604ffe7
   16cc8:	f47f2800 	.word	0xf47f2800
   16ccc:	f8dbaf59 	.word	0xf8dbaf59
   16cd0:	f8da0000 	.word	0xf8da0000
   16cd4:	300c1008 	.word	0x300c1008
   16cd8:	ffdcf004 	.word	0xffdcf004
   16cdc:	28004604 	.word	0x28004604
   16ce0:	af4ef47f 	.word	0xaf4ef47f
   16ce4:	0000f8db 	.word	0x0000f8db
   16ce8:	30183d0c 	.word	0x30183d0c
   16cec:	0b04f1ab 	.word	0x0b04f1ab
   16cf0:	ffb6f004 	.word	0xffb6f004
   16cf4:	f43f2f00 	.word	0xf43f2f00
   16cf8:	3f01af43 	.word	0x3f01af43
   16cfc:	4c01e772 	.word	0x4c01e772
   16d00:	bf00e756 	.word	0xbf00e756
   16d04:	ffffb280 	.word	0xffffb280

00016d08 <symbol_0002b14>:
   16d08:	b510b1b8 	.word	0xb510b1b8
   16d0c:	227c4604 	.word	0x227c4604
   16d10:	f00d2100 	.word	0xf00d2100
   16d14:	f104fd88 	.word	0xf104fd88
   16d18:	f004007c 	.word	0xf004007c
   16d1c:	f104ff99 	.word	0xf104ff99
   16d20:	f0040088 	.word	0xf0040088
   16d24:	f104ff95 	.word	0xf104ff95
   16d28:	f0040094 	.word	0xf0040094
   16d2c:	f104ff91 	.word	0xf104ff91
   16d30:	e8bd00a0 	.word	0xe8bd00a0
   16d34:	f0044010 	.word	0xf0044010
   16d38:	4770bf8b 	.word	0x4770bf8b

00016d3c <symbol_0000ef7>:
   16d3c:	d0482800 	.word	0xd0482800
   16d40:	6e03b570 	.word	0x6e03b570
   16d44:	2b014604 	.word	0x2b014604
   16d48:	6f60d123 	.word	0x6f60d123
   16d4c:	6fa2b1c8 	.word	0x6fa2b1c8
   16d50:	2600b1aa 	.word	0x2600b1aa
   16d54:	03c6eb06 	.word	0x03c6eb06
   16d58:	0583eb10 	.word	0x0583eb10
   16d5c:	4628d035 	.word	0x4628d035
   16d60:	ff7ef004 	.word	0xff7ef004
   16d64:	000cf105 	.word	0x000cf105
   16d68:	ff7af004 	.word	0xff7af004
   16d6c:	0018f105 	.word	0x0018f105
   16d70:	ff76f004 	.word	0xff76f004
   16d74:	36016fa2 	.word	0x36016fa2
   16d78:	6f604296 	.word	0x6f604296
   16d7c:	f008d3ea 	.word	0xf008d3ea
   16d80:	2200fbcf 	.word	0x2200fbcf
   16d84:	037cf104 	.word	0x037cf104
   16d88:	34017022 	.word	0x34017022
   16d8c:	d1fb429c 	.word	0xd1fb429c
   16d90:	3004bd70 	.word	0x3004bd70
   16d94:	ff64f004 	.word	0xff64f004
   16d98:	0010f104 	.word	0x0010f104
   16d9c:	ff60f004 	.word	0xff60f004
   16da0:	001cf104 	.word	0x001cf104
   16da4:	ff5cf004 	.word	0xff5cf004
   16da8:	0028f104 	.word	0x0028f104
   16dac:	ff58f004 	.word	0xff58f004
   16db0:	0034f104 	.word	0x0034f104
   16db4:	ff54f004 	.word	0xff54f004
   16db8:	0040f104 	.word	0x0040f104
   16dbc:	ff50f004 	.word	0xff50f004
   16dc0:	004cf104 	.word	0x004cf104
   16dc4:	ff4cf004 	.word	0xff4cf004
   16dc8:	3601e7bf 	.word	0x3601e7bf
   16dcc:	d3c14296 	.word	0xd3c14296
   16dd0:	4770e7d5 	.word	0x4770e7d5

00016dd4 <symbol_0001d5f>:
   16dd4:	b510b1a8 	.word	0xb510b1a8
   16dd8:	f7ff4604 	.word	0xf7ff4604
   16ddc:	f104ffaf 	.word	0xf104ffaf
   16de0:	f004007c 	.word	0xf004007c
   16de4:	f104ff3d 	.word	0xf104ff3d
   16de8:	f0040088 	.word	0xf0040088
   16dec:	f104ff39 	.word	0xf104ff39
   16df0:	f0040094 	.word	0xf0040094
   16df4:	f104ff35 	.word	0xf104ff35
   16df8:	e8bd00a0 	.word	0xe8bd00a0
   16dfc:	f0044010 	.word	0xf0044010
   16e00:	4770bf2f 	.word	0x4770bf2f

00016e04 <symbol_000d41f>:
   16e04:	2101b510 	.word	0x2101b510
   16e08:	f0054604 	.word	0xf0054604
   16e0c:	b100f931 	.word	0xb100f931
   16e10:	2101bd10 	.word	0x2101bd10
   16e14:	000cf104 	.word	0x000cf104
   16e18:	f92af005 	.word	0xf92af005
   16e1c:	d1f72800 	.word	0xd1f72800
   16e20:	f1044601 	.word	0xf1044601
   16e24:	e8bd0018 	.word	0xe8bd0018
   16e28:	f0054010 	.word	0xf0054010
   16e2c:	bf00b921 	.word	0xbf00b921

00016e30 <ecp_add_mixed>:
   16e30:	47f0e92d 	.word	0x47f0e92d
   16e34:	0518f102 	.word	0x0518f102
   16e38:	4681b096 	.word	0x4681b096
   16e3c:	46284688 	.word	0x46284688
   16e40:	46172100 	.word	0x46172100
   16e44:	f005461e 	.word	0xf005461e
   16e48:	2800fc2d 	.word	0x2800fc2d
   16e4c:	6a33d048 	.word	0x6a33d048
   16e50:	f106b18b 	.word	0xf106b18b
   16e54:	46200418 	.word	0x46200418
   16e58:	f0052100 	.word	0xf0052100
   16e5c:	2800fc23 	.word	0x2800fc23
   16e60:	80d7f000 	.word	0x80d7f000
   16e64:	b1336a33 	.word	0xb1336a33
   16e68:	21014620 	.word	0x21014620
   16e6c:	fc1af005 	.word	0xfc1af005
   16e70:	f0402800 	.word	0xf0402800
   16e74:	a80180e7 	.word	0xa80180e7
   16e78:	feeaf004 	.word	0xfeeaf004
   16e7c:	f004a804 	.word	0xf004a804
   16e80:	a807fee7 	.word	0xa807fee7
   16e84:	fee4f004 	.word	0xfee4f004
   16e88:	f004a80a 	.word	0xf004a80a
   16e8c:	a80dfee1 	.word	0xa80dfee1
   16e90:	fedef004 	.word	0xfedef004
   16e94:	f004a810 	.word	0xf004a810
   16e98:	a813fedb 	.word	0xa813fedb
   16e9c:	fed8f004 	.word	0xfed8f004
   16ea0:	4629462a 	.word	0x4629462a
   16ea4:	f005a801 	.word	0xf005a801
   16ea8:	4604fee9 	.word	0x4604fee9
   16eac:	a801b380 	.word	0xa801b380
   16eb0:	fed6f004 	.word	0xfed6f004
   16eb4:	f004a804 	.word	0xf004a804
   16eb8:	a807fed3 	.word	0xa807fed3
   16ebc:	fed0f004 	.word	0xfed0f004
   16ec0:	f004a80a 	.word	0xf004a80a
   16ec4:	a80dfecd 	.word	0xa80dfecd
   16ec8:	fecaf004 	.word	0xfecaf004
   16ecc:	f004a810 	.word	0xf004a810
   16ed0:	a813fec7 	.word	0xa813fec7
   16ed4:	fec4f004 	.word	0xfec4f004
   16ed8:	b0164620 	.word	0xb0164620
   16edc:	87f0e8bd 	.word	0x87f0e8bd
   16ee0:	46404631 	.word	0x46404631
   16ee4:	ff38f004 	.word	0xff38f004
   16ee8:	28004604 	.word	0x28004604
   16eec:	f106d1f4 	.word	0xf106d1f4
   16ef0:	f108010c 	.word	0xf108010c
   16ef4:	f004000c 	.word	0xf004000c
   16ef8:	4604ff2f 	.word	0x4604ff2f
   16efc:	d1eb2800 	.word	0xd1eb2800
   16f00:	0118f106 	.word	0x0118f106
   16f04:	0018f108 	.word	0x0018f108
   16f08:	ff26f004 	.word	0xff26f004
   16f0c:	e7e34604 	.word	0xe7e34604
   16f10:	a8014649 	.word	0xa8014649
   16f14:	fae4f7ff 	.word	0xfae4f7ff
   16f18:	28004604 	.word	0x28004604
   16f1c:	462ad1c7 	.word	0x462ad1c7
   16f20:	a804a901 	.word	0xa804a901
   16f24:	feaaf005 	.word	0xfeaaf005
   16f28:	28004604 	.word	0x28004604
   16f2c:	4649d1bf 	.word	0x4649d1bf
   16f30:	f7ffa804 	.word	0xf7ffa804
   16f34:	4604fad5 	.word	0x4604fad5
   16f38:	d1b82800 	.word	0xd1b82800
   16f3c:	4632a901 	.word	0x4632a901
   16f40:	f0054608 	.word	0xf0054608
   16f44:	4604fe9b 	.word	0x4604fe9b
   16f48:	d1b02800 	.word	0xd1b02800
   16f4c:	a8014649 	.word	0xa8014649
   16f50:	fac6f7ff 	.word	0xfac6f7ff
   16f54:	28004604 	.word	0x28004604
   16f58:	a904d1a9 	.word	0xa904d1a9
   16f5c:	020cf106 	.word	0x020cf106
   16f60:	f0054608 	.word	0xf0054608
   16f64:	4604fe8b 	.word	0x4604fe8b
   16f68:	d1a02800 	.word	0xd1a02800
   16f6c:	a8044649 	.word	0xa8044649
   16f70:	fab6f7ff 	.word	0xfab6f7ff
   16f74:	28004604 	.word	0x28004604
   16f78:	a901d199 	.word	0xa901d199
   16f7c:	4608463a 	.word	0x4608463a
   16f80:	fdbcf005 	.word	0xfdbcf005
   16f84:	28004604 	.word	0x28004604
   16f88:	f109d191 	.word	0xf109d191
   16f8c:	e00c0604 	.word	0xe00c0604
   16f90:	a8012100 	.word	0xa8012100
   16f94:	fb86f005 	.word	0xfb86f005
   16f98:	a901b150 	.word	0xa901b150
   16f9c:	46084632 	.word	0x46084632
   16fa0:	fd38f005 	.word	0xfd38f005
   16fa4:	28004604 	.word	0x28004604
   16fa8:	9b01d181 	.word	0x9b01d181
   16fac:	dbef2b00 	.word	0xdbef2b00
   16fb0:	f107a904 	.word	0xf107a904
   16fb4:	4632060c 	.word	0x4632060c
   16fb8:	f0054608 	.word	0xf0054608
   16fbc:	4604fd9f 	.word	0x4604fd9f
   16fc0:	f47f2800 	.word	0xf47f2800
   16fc4:	f109af74 	.word	0xf109af74
   16fc8:	e00d0a04 	.word	0xe00d0a04
   16fcc:	a8042100 	.word	0xa8042100
   16fd0:	fb68f005 	.word	0xfb68f005
   16fd4:	a904b158 	.word	0xa904b158
   16fd8:	46084652 	.word	0x46084652
   16fdc:	fd1af005 	.word	0xfd1af005
   16fe0:	28004604 	.word	0x28004604
   16fe4:	af63f47f 	.word	0xaf63f47f
   16fe8:	2b009b04 	.word	0x2b009b04
   16fec:	2100dbee 	.word	0x2100dbee
   16ff0:	f005a801 	.word	0xf005a801
   16ff4:	4601fb57 	.word	0x4601fb57
   16ff8:	a804bb30 	.word	0xa804bb30
   16ffc:	fb52f005 	.word	0xfb52f005
   17000:	d17f2800 	.word	0xd17f2800
   17004:	4641463a 	.word	0x4641463a
   17008:	f7ff4648 	.word	0xf7ff4648
   1700c:	4604fab5 	.word	0x4604fab5
   17010:	4639e74d 	.word	0x4639e74d
   17014:	f0044640 	.word	0xf0044640
   17018:	4604fe9f 	.word	0x4604fe9f
   1701c:	f47f2800 	.word	0xf47f2800
   17020:	f107af5b 	.word	0xf107af5b
   17024:	f108010c 	.word	0xf108010c
   17028:	f004000c 	.word	0xf004000c
   1702c:	4604fe95 	.word	0x4604fe95
   17030:	f47f2800 	.word	0xf47f2800
   17034:	4629af51 	.word	0x4629af51
   17038:	0018f108 	.word	0x0018f108
   1703c:	fe8cf004 	.word	0xfe8cf004
   17040:	e7494604 	.word	0xe7494604
   17044:	e7474c8b 	.word	0xe7474c8b
   17048:	aa014629 	.word	0xaa014629
   1704c:	f005a813 	.word	0xf005a813
   17050:	4604fe15 	.word	0x4604fe15
   17054:	f47f2800 	.word	0xf47f2800
   17058:	4649af2a 	.word	0x4649af2a
   1705c:	f7ffa813 	.word	0xf7ffa813
   17060:	4604fa3f 	.word	0x4604fa3f
   17064:	f47f2800 	.word	0xf47f2800
   17068:	aa01af22 	.word	0xaa01af22
   1706c:	a8074611 	.word	0xa8074611
   17070:	fe04f005 	.word	0xfe04f005
   17074:	28004604 	.word	0x28004604
   17078:	af19f47f 	.word	0xaf19f47f
   1707c:	a8074649 	.word	0xa8074649
   17080:	fa2ef7ff 	.word	0xfa2ef7ff
   17084:	28004604 	.word	0x28004604
   17088:	af11f47f 	.word	0xaf11f47f
   1708c:	a907aa01 	.word	0xa907aa01
   17090:	f005a80a 	.word	0xf005a80a
   17094:	4604fdf3 	.word	0x4604fdf3
   17098:	f47f2800 	.word	0xf47f2800
   1709c:	4649af08 	.word	0x4649af08
   170a0:	f7ffa80a 	.word	0xf7ffa80a
   170a4:	4604fa1d 	.word	0x4604fa1d
   170a8:	f47f2800 	.word	0xf47f2800
   170ac:	a907af00 	.word	0xa907af00
   170b0:	4608463a 	.word	0x4608463a
   170b4:	fde2f005 	.word	0xfde2f005
   170b8:	28004604 	.word	0x28004604
   170bc:	aef7f47f 	.word	0xaef7f47f
   170c0:	a8074649 	.word	0xa8074649
   170c4:	fa0cf7ff 	.word	0xfa0cf7ff
   170c8:	28004604 	.word	0x28004604
   170cc:	aeeff47f 	.word	0xaeeff47f
   170d0:	a9072202 	.word	0xa9072202
   170d4:	f005a801 	.word	0xf005a801
   170d8:	4604fec9 	.word	0x4604fec9
   170dc:	f47f2800 	.word	0xf47f2800
   170e0:	f109aee6 	.word	0xf109aee6
   170e4:	46290504 	.word	0x46290504
   170e8:	f005a801 	.word	0xf005a801
   170ec:	2800fa73 	.word	0x2800fa73
   170f0:	a901db0d 	.word	0xa901db0d
   170f4:	4608462a 	.word	0x4608462a
   170f8:	fbccf005 	.word	0xfbccf005
   170fc:	28004604 	.word	0x28004604
   17100:	e6d4d0f1 	.word	0xe6d4d0f1
   17104:	f7ff4640 	.word	0xf7ff4640
   17108:	4604fe7d 	.word	0x4604fe7d
   1710c:	aa04e6cf 	.word	0xaa04e6cf
   17110:	a80d4611 	.word	0xa80d4611
   17114:	fdb2f005 	.word	0xfdb2f005
   17118:	28004604 	.word	0x28004604
   1711c:	aec7f47f 	.word	0xaec7f47f
   17120:	a80d4649 	.word	0xa80d4649
   17124:	f9dcf7ff 	.word	0xf9dcf7ff
   17128:	28004604 	.word	0x28004604
   1712c:	aebff47f 	.word	0xaebff47f
   17130:	aa01a90d 	.word	0xaa01a90d
   17134:	f0054608 	.word	0xf0054608
   17138:	4604fce1 	.word	0x4604fce1
   1713c:	f47f2800 	.word	0xf47f2800
   17140:	9b0daeb6 	.word	0x9b0daeb6
   17144:	da0d2b00 	.word	0xda0d2b00
   17148:	a80d2100 	.word	0xa80d2100
   1714c:	faaaf005 	.word	0xfaaaf005
   17150:	a90db140 	.word	0xa90db140
   17154:	4608462a 	.word	0x4608462a
   17158:	fc5cf005 	.word	0xfc5cf005
   1715c:	28004604 	.word	0x28004604
   17160:	e6a4d0ef 	.word	0xe6a4d0ef
   17164:	aa0aa90d 	.word	0xaa0aa90d
   17168:	f0054608 	.word	0xf0054608
   1716c:	4604fcc7 	.word	0x4604fcc7
   17170:	f47f2800 	.word	0xf47f2800
   17174:	9b0dae9c 	.word	0x9b0dae9c
   17178:	da0d2b00 	.word	0xda0d2b00
   1717c:	a80d2100 	.word	0xa80d2100
   17180:	fa90f005 	.word	0xfa90f005
   17184:	a90db140 	.word	0xa90db140
   17188:	4608462a 	.word	0x4608462a
   1718c:	fc42f005 	.word	0xfc42f005
   17190:	28004604 	.word	0x28004604
   17194:	e68ad0ef 	.word	0xe68ad0ef
   17198:	aa0da907 	.word	0xaa0da907
   1719c:	f0054608 	.word	0xf0054608
   171a0:	4604fcad 	.word	0x4604fcad
   171a4:	f47f2800 	.word	0xf47f2800
   171a8:	9b07ae82 	.word	0x9b07ae82
   171ac:	da0d2b00 	.word	0xda0d2b00
   171b0:	a8072100 	.word	0xa8072100
   171b4:	fa76f005 	.word	0xfa76f005
   171b8:	a907b140 	.word	0xa907b140
   171bc:	4608462a 	.word	0x4608462a
   171c0:	fc28f005 	.word	0xfc28f005
   171c4:	28004604 	.word	0x28004604
   171c8:	e670d0ef 	.word	0xe670d0ef
   171cc:	aa04a907 	.word	0xaa04a907
   171d0:	f0054608 	.word	0xf0054608
   171d4:	4604fd53 	.word	0x4604fd53
   171d8:	f47f2800 	.word	0xf47f2800
   171dc:	4649ae68 	.word	0x4649ae68
   171e0:	f7ffa807 	.word	0xf7ffa807
   171e4:	4604f97d 	.word	0x4604f97d
   171e8:	f47f2800 	.word	0xf47f2800
   171ec:	a90aae60 	.word	0xa90aae60
   171f0:	46084632 	.word	0x46084632
   171f4:	fd42f005 	.word	0xfd42f005
   171f8:	28004604 	.word	0x28004604
   171fc:	ae57f47f 	.word	0xae57f47f
   17200:	a80a4649 	.word	0xa80a4649
   17204:	f96cf7ff 	.word	0xf96cf7ff
   17208:	28004604 	.word	0x28004604
   1720c:	ae4ff47f 	.word	0xae4ff47f
   17210:	a907aa0a 	.word	0xa907aa0a
   17214:	f005a810 	.word	0xf005a810
   17218:	4604fc71 	.word	0x4604fc71
   1721c:	f47f2800 	.word	0xf47f2800
   17220:	9b10ae46 	.word	0x9b10ae46
   17224:	da0d2b00 	.word	0xda0d2b00
   17228:	a8102100 	.word	0xa8102100
   1722c:	fa3af005 	.word	0xfa3af005
   17230:	a910b140 	.word	0xa910b140
   17234:	4608462a 	.word	0x4608462a
   17238:	fbecf005 	.word	0xfbecf005
   1723c:	28004604 	.word	0x28004604
   17240:	e634d0ef 	.word	0xe634d0ef
   17244:	4640a90d 	.word	0x4640a90d
   17248:	fd86f004 	.word	0xfd86f004
   1724c:	28004604 	.word	0x28004604
   17250:	ae2df47f 	.word	0xae2df47f
   17254:	f108a910 	.word	0xf108a910
   17258:	f004000c 	.word	0xf004000c
   1725c:	4604fd7d 	.word	0x4604fd7d
   17260:	f47f2800 	.word	0xf47f2800
   17264:	f108ae24 	.word	0xf108ae24
   17268:	a9130018 	.word	0xa9130018
   1726c:	fd74f004 	.word	0xfd74f004
   17270:	e61c4604 	.word	0xe61c4604
   17274:	ffffb080 	.word	0xffffb080

00017278 <ecp_mul_comb>:
   17278:	4ff0e92d 	.word	0x4ff0e92d
   1727c:	46984605 	.word	0x46984605
   17280:	034cf105 	.word	0x034cf105
   17284:	b0e5461c 	.word	0xb0e5461c
   17288:	9104a80d 	.word	0x9104a80d
   1728c:	93084617 	.word	0x93084617
   17290:	fcdef004 	.word	0xfcdef004
   17294:	f004a810 	.word	0xf004a810
   17298:	4620fcdb 	.word	0x4620fcdb
   1729c:	f0042100 	.word	0xf0042100
   172a0:	2801ff21 	.word	0x2801ff21
   172a4:	f0409007 	.word	0xf0409007
   172a8:	6deb81c9 	.word	0x6deb81c9
   172ac:	090cf108 	.word	0x090cf108
   172b0:	7fc0f5b3 	.word	0x7fc0f5b3
   172b4:	2605bf2c 	.word	0x2605bf2c
   172b8:	46482604 	.word	0x46482604
   172bc:	0134f105 	.word	0x0134f105
   172c0:	f04fbf2c 	.word	0xf04fbf2c
   172c4:	f04f0a06 	.word	0xf04f0a06
   172c8:	46b30a05 	.word	0x46b30a05
   172cc:	f982f005 	.word	0xf982f005
   172d0:	d0722800 	.word	0xd0722800
   172d4:	42a66dec 	.word	0x42a66dec
   172d8:	2301d245 	.word	0x2301d245
   172dc:	32fff10b 	.word	0x32fff10b
   172e0:	93024093 	.word	0x93024093
   172e4:	b2db4434 	.word	0xb2db4434
   172e8:	93033c01 	.word	0x93033c01
   172ec:	fbb42300 	.word	0xfbb42300
   172f0:	9802f4f6 	.word	0x9802f4f6
   172f4:	93059206 	.word	0x93059206
   172f8:	f0082124 	.word	0xf0082124
   172fc:	9001f8fd 	.word	0x9001f8fd
   17300:	d0402800 	.word	0xd0402800
   17304:	f0044641 	.word	0xf0044641
   17308:	f8ddfd27 	.word	0xf8ddfd27
   1730c:	4683a004 	.word	0x4683a004
   17310:	f0002800 	.word	0xf0002800
   17314:	9b058086 	.word	0x9b058086
   17318:	d17b2b00 	.word	0xd17b2b00
   1731c:	9c012500 	.word	0x9c012500
   17320:	35019e03 	.word	0x35019e03
   17324:	4620b154 	.word	0x4620b154
   17328:	fc9af004 	.word	0xfc9af004
   1732c:	000cf104 	.word	0x000cf104
   17330:	fc96f004 	.word	0xfc96f004
   17334:	0018f104 	.word	0x0018f104
   17338:	fc92f004 	.word	0xfc92f004
   1733c:	429eb2eb 	.word	0x429eb2eb
   17340:	0424f104 	.word	0x0424f104
   17344:	9801d8ed 	.word	0x9801d8ed
   17348:	f8eaf008 	.word	0xf8eaf008
   1734c:	f004a80d 	.word	0xf004a80d
   17350:	a810fc87 	.word	0xa810fc87
   17354:	fc84f004 	.word	0xfc84f004
   17358:	0f00f1bb 	.word	0x0f00f1bb
   1735c:	4658d11b 	.word	0x4658d11b
   17360:	e8bdb065 	.word	0xe8bdb065
   17364:	26028ff0 	.word	0x26028ff0
   17368:	22012300 	.word	0x22012300
   1736c:	21244630 	.word	0x21244630
   17370:	6602e9cd 	.word	0x6602e9cd
   17374:	3205e9cd 	.word	0x3205e9cd
   17378:	f8bef008 	.word	0xf8bef008
   1737c:	08643401 	.word	0x08643401
   17380:	28009001 	.word	0x28009001
   17384:	a80dd1be 	.word	0xa80dd1be
   17388:	fc6af004 	.word	0xfc6af004
   1738c:	f004a810 	.word	0xf004a810
   17390:	f8dffc67 	.word	0xf8dffc67
   17394:	9c04b644 	.word	0x9c04b644
   17398:	d0e02c00 	.word	0xd0e02c00
   1739c:	f0044620 	.word	0xf0044620
   173a0:	f104fc5f 	.word	0xf104fc5f
   173a4:	f004000c 	.word	0xf004000c
   173a8:	f104fc5b 	.word	0xf104fc5b
   173ac:	f0040018 	.word	0xf0040018
   173b0:	4658fc57 	.word	0x4658fc57
   173b4:	e8bdb065 	.word	0xe8bdb065
   173b8:	f1058ff0 	.word	0xf1058ff0
   173bc:	46400128 	.word	0x46400128
   173c0:	f908f005 	.word	0xf908f005
   173c4:	d1852800 	.word	0xd1852800
   173c8:	459a6deb 	.word	0x459a6deb
   173cc:	82f4f0c0 	.word	0x82f4f0c0
   173d0:	1c5c2602 	.word	0x1c5c2602
   173d4:	e9cd2301 	.word	0xe9cd2301
   173d8:	08646602 	.word	0x08646602
   173dc:	6f6b9306 	.word	0x6f6b9306
   173e0:	2b009301 	.word	0x2b009301
   173e4:	80eaf000 	.word	0x80eaf000
   173e8:	46382100 	.word	0x46382100
   173ec:	fe7af004 	.word	0xfe7af004
   173f0:	46804639 	.word	0x46804639
   173f4:	f004a80d 	.word	0xf004a80d
   173f8:	4683fcaf 	.word	0x4683fcaf
   173fc:	463ab950 	.word	0x463ab950
   17400:	a8109908 	.word	0xa8109908
   17404:	fb7af005 	.word	0xfb7af005
   17408:	28004683 	.word	0x28004683
   1740c:	9b07d036 	.word	0x9b07d036
   17410:	d0832b00 	.word	0xd0832b00
   17414:	f004a80d 	.word	0xf004a80d
   17418:	a810fc23 	.word	0xa810fc23
   1741c:	fc20f004 	.word	0xfc20f004
   17420:	4649e7b9 	.word	0x4649e7b9
   17424:	000cf10a 	.word	0x000cf10a
   17428:	fc96f004 	.word	0xfc96f004
   1742c:	28004683 	.word	0x28004683
   17430:	af71f47f 	.word	0xaf71f47f
   17434:	f1089b01 	.word	0xf1089b01
   17438:	f1030118 	.word	0xf1030118
   1743c:	f0040018 	.word	0xf0040018
   17440:	4683fc8b 	.word	0x4683fc8b
   17444:	f47f2800 	.word	0xf47f2800
   17448:	462aaf66 	.word	0x462aaf66
   1744c:	0901f04f 	.word	0x0901f04f
   17450:	46254651 	.word	0x46254651
   17454:	464c4682 	.word	0x464c4682
   17458:	96094690 	.word	0x96094690
   1745c:	9e06970a 	.word	0x9e06970a
   17460:	eb049f01 	.word	0xeb049f01
   17464:	eb0704c4 	.word	0xeb0704c4
   17468:	46200484 	.word	0x46200484
   1746c:	fc74f004 	.word	0xfc74f004
   17470:	f0002800 	.word	0xf0002800
   17474:	468380a7 	.word	0x468380a7
   17478:	e74d9b05 	.word	0xe74d9b05
   1747c:	33fff118 	.word	0x33fff118
   17480:	2301bf18 	.word	0x2301bf18
   17484:	461aa910 	.word	0x461aa910
   17488:	9302a80d 	.word	0x9302a80d
   1748c:	fd92f004 	.word	0xfd92f004
   17490:	28004683 	.word	0x28004683
   17494:	a822d1bb 	.word	0xa822d1bb
   17498:	46591c62 	.word	0x46591c62
   1749c:	f9c3f00d 	.word	0xf9c3f00d
   174a0:	f10db3d4 	.word	0xf10db3d4
   174a4:	46d80988 	.word	0x46d80988
   174a8:	46c246cb 	.word	0x46c246cb
   174ac:	46512700 	.word	0x46512700
   174b0:	f004a80d 	.word	0xf004a80d
   174b4:	f89bfe17 	.word	0xf89bfe17
   174b8:	40b83000 	.word	0x40b83000
   174bc:	43033701 	.word	0x43033701
   174c0:	44a242b7 	.word	0x44a242b7
   174c4:	3000f88b 	.word	0x3000f88b
   174c8:	f108d1f1 	.word	0xf108d1f1
   174cc:	45a00801 	.word	0x45a00801
   174d0:	0b01f10b 	.word	0x0b01f10b
   174d4:	2300d1e9 	.word	0x2300d1e9
   174d8:	0c01f04f 	.word	0x0c01f04f
   174dc:	1088f89d 	.word	0x1088f89d
   174e0:	6f01f819 	.word	0x6f01f819
   174e4:	0c01f10c 	.word	0x0c01f10c
   174e8:	0203ea86 	.word	0x0203ea86
   174ec:	f00043d0 	.word	0xf00043d0
   174f0:	fb000001 	.word	0xfb000001
   174f4:	b252f701 	.word	0xb252f701
   174f8:	4033b27f 	.word	0x4033b27f
   174fc:	0607ea02 	.word	0x0607ea02
   17500:	ea41407a 	.word	0xea41407a
   17504:	433310c0 	.word	0x433310c0
   17508:	45e0b2d1 	.word	0x45e0b2d1
   1750c:	0c01f809 	.word	0x0c01f809
   17510:	f889b2db 	.word	0xf889b2db
   17514:	d2e31000 	.word	0xd2e31000
   17518:	a8192600 	.word	0xa8192600
   1751c:	fb98f004 	.word	0xfb98f004
   17520:	f004a81c 	.word	0xf004a81c
   17524:	a81ffb95 	.word	0xa81ffb95
   17528:	fb92f004 	.word	0xfb92f004
   1752c:	f813ab22 	.word	0xf813ab22
   17530:	44239004 	.word	0x44239004
   17534:	9b049306 	.word	0x9b049306
   17538:	469b4632 	.word	0x469b4632
   1753c:	95059f01 	.word	0x95059f01
   17540:	9f03463d 	.word	0x9f03463d
   17544:	0845f3c9 	.word	0x0845f3c9
   17548:	0a0cf103 	.word	0x0a0cf103
   1754c:	0408eba2 	.word	0x0408eba2
   17550:	f484fab4 	.word	0xf484fab4
   17554:	46290964 	.word	0x46290964
   17558:	46584622 	.word	0x46584622
   1755c:	fd2af004 	.word	0xfd2af004
   17560:	f1053601 	.word	0xf1053601
   17564:	3524010c 	.word	0x3524010c
   17568:	d16a2800 	.word	0xd16a2800
   1756c:	46504622 	.word	0x46504622
   17570:	fd20f004 	.word	0xfd20f004
   17574:	2800b2f2 	.word	0x2800b2f2
   17578:	42bad163 	.word	0x42bad163
   1757c:	9d05d3e6 	.word	0x9d05d3e6
   17580:	1d2ba816 	.word	0x1d2ba816
   17584:	9308461c 	.word	0x9308461c
   17588:	fb62f004 	.word	0xfb62f004
   1758c:	4621a816 	.word	0x4621a816
   17590:	f0054652 	.word	0xf0054652
   17594:	4683fab3 	.word	0x4683fab3
   17598:	f0002800 	.word	0xf0002800
   1759c:	a81680c3 	.word	0xa81680c3
   175a0:	fb5ef004 	.word	0xfb5ef004
   175a4:	f004a819 	.word	0xf004a819
   175a8:	a81cfb5b 	.word	0xa81cfb5b
   175ac:	fb58f004 	.word	0xfb58f004
   175b0:	f004a81f 	.word	0xf004a81f
   175b4:	9b07fb55 	.word	0x9b07fb55
   175b8:	e6ac9305 	.word	0xe6ac9305
   175bc:	98022301 	.word	0x98022301
   175c0:	e6999305 	.word	0xe6999305
   175c4:	0b59ea4f 	.word	0x0b59ea4f
   175c8:	0bcbeb0b 	.word	0x0bcbeb0b
   175cc:	0b8beb07 	.word	0x0b8beb07
   175d0:	010cf10b 	.word	0x010cf10b
   175d4:	000cf104 	.word	0x000cf104
   175d8:	fbbef004 	.word	0xfbbef004
   175dc:	f47f2800 	.word	0xf47f2800
   175e0:	f10baf4a 	.word	0xf10baf4a
   175e4:	f1040118 	.word	0xf1040118
   175e8:	f0040018 	.word	0xf0040018
   175ec:	2800fbb5 	.word	0x2800fbb5
   175f0:	af41f47f 	.word	0xaf41f47f
   175f4:	4683b165 	.word	0x4683b165
   175f8:	46214622 	.word	0x46214622
   175fc:	f7fe4640 	.word	0xf7fe4640
   17600:	f10bffbb 	.word	0xf10bffbb
   17604:	28000b01 	.word	0x28000b01
   17608:	af35f47f 	.word	0xaf35f47f
   1760c:	d1f345ab 	.word	0xd1f345ab
   17610:	0949ea4f 	.word	0x0949ea4f
   17614:	f989fa5f 	.word	0xf989fa5f
   17618:	0301f10a 	.word	0x0301f10a
   1761c:	f842aa22 	.word	0xf842aa22
   17620:	fa5f402a 	.word	0xfa5f402a
   17624:	fa39fa83 	.word	0xfa39fa83
   17628:	464cf306 	.word	0x464cf306
   1762c:	ea4fd10b 	.word	0xea4fd10b
   17630:	eb010159 	.word	0xeb010159
   17634:	eb0701c1 	.word	0xeb0701c1
   17638:	e7120181 	.word	0xe7120181
   1763c:	b39cf8df 	.word	0xb39cf8df
   17640:	4683e68d 	.word	0x4683e68d
   17644:	4652e7ae 	.word	0x4652e7ae
   17648:	462c2a01 	.word	0x462c2a01
   1764c:	46459e09 	.word	0x46459e09
   17650:	d9619f0a 	.word	0xd9619f0a
   17654:	4640a922 	.word	0x4640a922
   17658:	fa46f7ff 	.word	0xfa46f7ff
   1765c:	f1bb4683 	.word	0xf1bb4683
   17660:	f47f0f00 	.word	0xf47f0f00
   17664:	2301ae58 	.word	0x2301ae58
   17668:	46da9a01 	.word	0x46da9a01
   1766c:	970b3a24 	.word	0x970b3a24
   17670:	461f4693 	.word	0x461f4693
   17674:	4609e9cd 	.word	0x4609e9cd
   17678:	eb03b303 	.word	0xeb03b303
   1767c:	ea4f03c3 	.word	0xea4f03c3
   17680:	9b010883 	.word	0x9b010883
   17684:	0424f1a8 	.word	0x0424f1a8
   17688:	eb03441c 	.word	0xeb03441c
   1768c:	e0050908 	.word	0xe0050908
   17690:	45a3aa22 	.word	0x45a3aa22
   17694:	602af842 	.word	0x602af842
   17698:	d00f469a 	.word	0xd00f469a
   1769c:	0604eb08 	.word	0x0604eb08
   176a0:	4622464b 	.word	0x4622464b
   176a4:	46284631 	.word	0x46284631
   176a8:	fbc2f7ff 	.word	0xfbc2f7ff
   176ac:	0301f10a 	.word	0x0301f10a
   176b0:	b2db3c24 	.word	0xb2db3c24
   176b4:	d0eb2800 	.word	0xd0eb2800
   176b8:	e6dd4683 	.word	0xe6dd4683
   176bc:	9a06007b 	.word	0x9a06007b
   176c0:	fa37b2df 	.word	0xfa37b2df
   176c4:	463bf202 	.word	0x463bf202
   176c8:	f1bad0d6 	.word	0xf1bad0d6
   176cc:	e9dd0f01 	.word	0xe9dd0f01
   176d0:	9f0b4609 	.word	0x9f0b4609
   176d4:	8167f240 	.word	0x8167f240
   176d8:	a9224652 	.word	0xa9224652
   176dc:	f7ff4628 	.word	0xf7ff4628
   176e0:	4683fa03 	.word	0x4683fa03
   176e4:	f1bb9b05 	.word	0xf1bb9b05
   176e8:	f47f0f00 	.word	0xf47f0f00
   176ec:	b123ae15 	.word	0xb123ae15
   176f0:	676b9b01 	.word	0x676b9b01
   176f4:	67ab9b02 	.word	0x67ab9b02
   176f8:	4619e676 	.word	0x4619e676
   176fc:	f0044638 	.word	0xf0044638
   17700:	4639fcf1 	.word	0x4639fcf1
   17704:	a80d4680 	.word	0xa80d4680
   17708:	fb26f004 	.word	0xfb26f004
   1770c:	28004683 	.word	0x28004683
   17710:	ae04f47f 	.word	0xae04f47f
   17714:	e6729007 	.word	0xe6729007
   17718:	46289922 	.word	0x46289922
   1771c:	f97cf7ff 	.word	0xf97cf7ff
   17720:	e79c4683 	.word	0xe79c4683
   17724:	46504601 	.word	0x46504601
   17728:	ffbcf004 	.word	0xffbcf004
   1772c:	bf181c02 	.word	0xbf181c02
   17730:	a9162201 	.word	0xa9162201
   17734:	12d9ea02 	.word	0x12d9ea02
   17738:	f0044650 	.word	0xf0044650
   1773c:	4683fc3b 	.word	0x4683fc3b
   17740:	f004a816 	.word	0xf004a816
   17744:	f1bbfa8d 	.word	0xf1bbfa8d
   17748:	f47f0f00 	.word	0xf47f0f00
   1774c:	9b04af2b 	.word	0x9b04af2b
   17750:	f1032101 	.word	0xf1032101
   17754:	46200418 	.word	0x46200418
   17758:	fc8af004 	.word	0xfc8af004
   1775c:	28004683 	.word	0x28004683
   17760:	af20f47f 	.word	0xaf20f47f
   17764:	2b009b6e 	.word	0x2b009b6e
   17768:	8082f000 	.word	0x8082f000
   1776c:	6dab260c 	.word	0x6dab260c
   17770:	3307a813 	.word	0x3307a813
   17774:	f00408df 	.word	0xf00408df
   17778:	a816fa6b 	.word	0xa816fa6b
   1777c:	fa68f004 	.word	0xfa68f004
   17780:	8020f8dd 	.word	0x8020f8dd
   17784:	9a6e9b6f 	.word	0x9a6e9b6f
   17788:	a8134639 	.word	0xa8134639
   1778c:	f9e2f006 	.word	0xf9e2f006
   17790:	2101e006 	.word	0x2101e006
   17794:	f004a813 	.word	0xf004a813
   17798:	2800fead 	.word	0x2800fead
   1779c:	80c8f040 	.word	0x80c8f040
   177a0:	a8134641 	.word	0xa8134641
   177a4:	ff16f004 	.word	0xff16f004
   177a8:	daf22800 	.word	0xdaf22800
   177ac:	f0003e01 	.word	0xf0003e01
   177b0:	21018100 	.word	0x21018100
   177b4:	f004a813 	.word	0xf004a813
   177b8:	2800ff75 	.word	0x2800ff75
   177bc:	aa13dde2 	.word	0xaa13dde2
   177c0:	46204621 	.word	0x46204621
   177c4:	fa5af005 	.word	0xfa5af005
   177c8:	b1304683 	.word	0xb1304683
   177cc:	f004a813 	.word	0xf004a813
   177d0:	a816fa47 	.word	0xa816fa47
   177d4:	fa44f004 	.word	0xfa44f004
   177d8:	4620e6e4 	.word	0x4620e6e4
   177dc:	f7fe4629 	.word	0xf7fe4629
   177e0:	4683fe7f 	.word	0x4683fe7f
   177e4:	d1f12800 	.word	0xd1f12800
   177e8:	4611aa13 	.word	0x4611aa13
   177ec:	f005a816 	.word	0xf005a816
   177f0:	4683fa45 	.word	0x4683fa45
   177f4:	d1e92800 	.word	0xd1e92800
   177f8:	a8164629 	.word	0xa8164629
   177fc:	fe70f7fe 	.word	0xfe70f7fe
   17800:	28004683 	.word	0x28004683
   17804:	9804d1e2 	.word	0x9804d1e2
   17808:	4601aa16 	.word	0x4601aa16
   1780c:	fa36f005 	.word	0xfa36f005
   17810:	28004683 	.word	0x28004683
   17814:	4629d1da 	.word	0x4629d1da
   17818:	f7fe9804 	.word	0xf7fe9804
   1781c:	4683fe61 	.word	0x4683fe61
   17820:	d1d32800 	.word	0xd1d32800
   17824:	aa13a916 	.word	0xaa13a916
   17828:	f0054608 	.word	0xf0054608
   1782c:	4683fa27 	.word	0x4683fa27
   17830:	d1cb2800 	.word	0xd1cb2800
   17834:	a8164629 	.word	0xa8164629
   17838:	fe52f7fe 	.word	0xfe52f7fe
   1783c:	28004683 	.word	0x28004683
   17840:	aa16d1c4 	.word	0xaa16d1c4
   17844:	46504651 	.word	0x46504651
   17848:	fa18f005 	.word	0xfa18f005
   1784c:	28004683 	.word	0x28004683
   17850:	4629d1bc 	.word	0x4629d1bc
   17854:	f7fe4650 	.word	0xf7fe4650
   17858:	4683fe43 	.word	0x4683fe43
   1785c:	f004a813 	.word	0xf004a813
   17860:	a816f9ff 	.word	0xa816f9ff
   17864:	f9fcf004 	.word	0xf9fcf004
   17868:	0f00f1bb 	.word	0x0f00f1bb
   1786c:	ae9af47f 	.word	0xae9af47f
   17870:	f8dd46ab 	.word	0xf8dd46ab
   17874:	f8dd8018 	.word	0xf8dd8018
   17878:	f8cd900c 	.word	0xf8cd900c
   1787c:	f8dda018 	.word	0xf8dda018
   17880:	ab22a010 	.word	0xab22a010
   17884:	d0554543 	.word	0xd0554543
   17888:	46514652 	.word	0x46514652
   1788c:	f7fe4658 	.word	0xf7fe4658
   17890:	4602fe73 	.word	0x4602fe73
   17894:	d1492800 	.word	0xd1492800
   17898:	46044606 	.word	0x46044606
   1789c:	3d01f818 	.word	0x3d01f818
   178a0:	93059d01 	.word	0x93059d01
   178a4:	0745f3c3 	.word	0x0745f3c3
   178a8:	fab41be4 	.word	0xfab41be4
   178ac:	0964f484 	.word	0x0964f484
   178b0:	46224629 	.word	0x46224629
   178b4:	f004a819 	.word	0xf004a819
   178b8:	3601fb7d 	.word	0x3601fb7d
   178bc:	010cf105 	.word	0x010cf105
   178c0:	28003524 	.word	0x28003524
   178c4:	aebdf47f 	.word	0xaebdf47f
   178c8:	a81c4622 	.word	0xa81c4622
   178cc:	fb72f004 	.word	0xfb72f004
   178d0:	2800b2f4 	.word	0x2800b2f4
   178d4:	aeb5f47f 	.word	0xaeb5f47f
   178d8:	d8e545a1 	.word	0xd8e545a1
   178dc:	f004a816 	.word	0xf004a816
   178e0:	aa1cf9b7 	.word	0xaa1cf9b7
   178e4:	a8169908 	.word	0xa8169908
   178e8:	f908f005 	.word	0xf908f005
   178ec:	4683b108 	.word	0x4683b108
   178f0:	4601e655 	.word	0x4601e655
   178f4:	f004a81c 	.word	0xf004a81c
   178f8:	1c02fed5 	.word	0x1c02fed5
   178fc:	2201bf18 	.word	0x2201bf18
   17900:	a9169b05 	.word	0xa9169b05
   17904:	12d3ea02 	.word	0x12d3ea02
   17908:	f004a81c 	.word	0xf004a81c
   1790c:	9005fb53 	.word	0x9005fb53
   17910:	f004a816 	.word	0xf004a816
   17914:	9a05f9a5 	.word	0x9a05f9a5
   17918:	4652b942 	.word	0x4652b942
   1791c:	4651ab19 	.word	0x4651ab19
   17920:	f7ff4658 	.word	0xf7ff4658
   17924:	4602fa85 	.word	0x4602fa85
   17928:	d0aa2800 	.word	0xd0aa2800
   1792c:	e6394693 	.word	0xe6394693
   17930:	e74b4683 	.word	0xe74b4683
   17934:	f8dda819 	.word	0xf8dda819
   17938:	f004a018 	.word	0xf004a018
   1793c:	a81cf991 	.word	0xa81cf991
   17940:	f98ef004 	.word	0xf98ef004
   17944:	f004a81f 	.word	0xf004a81f
   17948:	a819f98b 	.word	0xa819f98b
   1794c:	f980f004 	.word	0xf980f004
   17950:	99084652 	.word	0x99084652
   17954:	f005a819 	.word	0xf005a819
   17958:	465df8d1 	.word	0x465df8d1
   1795c:	b1184683 	.word	0xb1184683
   17960:	f004a819 	.word	0xf004a819
   17964:	e552f97d 	.word	0xe552f97d
   17968:	46504659 	.word	0x46504659
   1796c:	fe9af004 	.word	0xfe9af004
   17970:	a9199b02 	.word	0xa9199b02
   17974:	bf082800 	.word	0xbf082800
   17978:	46502300 	.word	0x46502300
   1797c:	f004461a 	.word	0xf004461a
   17980:	4683fb19 	.word	0x4683fb19
   17984:	f004a819 	.word	0xf004a819
   17988:	f1bbf96b 	.word	0xf1bbf96b
   1798c:	f47f0f00 	.word	0xf47f0f00
   17990:	4628ad3e 	.word	0x4628ad3e
   17994:	f7ff9904 	.word	0xf7ff9904
   17998:	9b07f83f 	.word	0x9b07f83f
   1799c:	2b004683 	.word	0x2b004683
   179a0:	acd4f47f 	.word	0xacd4f47f
   179a4:	9922e4ba 	.word	0x9922e4ba
   179a8:	f7ff4628 	.word	0xf7ff4628
   179ac:	4683f835 	.word	0x4683f835
   179b0:	f8dfe698 	.word	0xf8dfe698
   179b4:	e5f5b02c 	.word	0xe5f5b02c
   179b8:	f10a2201 	.word	0xf10a2201
   179bc:	eb0a31ff 	.word	0xeb0a31ff
   179c0:	fa020403 	.word	0xfa020403
   179c4:	3c01f301 	.word	0x3c01f301
   179c8:	b2db9302 	.word	0xb2db9302
   179cc:	fbb49106 	.word	0xfbb49106
   179d0:	4656f4fa 	.word	0x4656f4fa
   179d4:	e5029303 	.word	0xe5029303
   179d8:	ffffb280 	.word	0xffffb280
   179dc:	ffffb080 	.word	0xffffb080
   179e0:	ffffb300 	.word	0xffffb300

000179e4 <symbol_000637b>:
   179e4:	43f8e92d 	.word	0x43f8e92d
   179e8:	e9dd2a01 	.word	0xe9dd2a01
   179ec:	d8437808 	.word	0xd8437808
   179f0:	4681460d 	.word	0x4681460d
   179f4:	f1052100 	.word	0xf1052100
   179f8:	461e0018 	.word	0x461e0018
   179fc:	f0044614 	.word	0xf0044614
   17a00:	b938fe51 	.word	0xb938fe51
   17a04:	0f00f1b8 	.word	0x0f00f1b8
   17a08:	2301d038 	.word	0x2301d038
   17a0c:	60337038 	.word	0x60337038
   17a10:	83f8e8bd 	.word	0x83f8e8bd
   17a14:	0004f109 	.word	0x0004f109
   17a18:	fba2f004 	.word	0xfba2f004
   17a1c:	b9c44681 	.word	0xb9c44681
   17a20:	33010043 	.word	0x33010043
   17a24:	60334598 	.word	0x60334598
   17a28:	2304d328 	.word	0x2304d328
   17a2c:	46024639 	.word	0x46024639
   17a30:	3b01f801 	.word	0x3b01f801
   17a34:	f0044628 	.word	0xf0044628
   17a38:	2800fc55 	.word	0x2800fc55
   17a3c:	f109d1e8 	.word	0xf109d1e8
   17a40:	f1050101 	.word	0xf1050101
   17a44:	4439000c 	.word	0x4439000c
   17a48:	e8bd464a 	.word	0xe8bd464a
   17a4c:	f00443f8 	.word	0xf00443f8
   17a50:	1c43bc49 	.word	0x1c43bc49
   17a54:	60334598 	.word	0x60334598
   17a58:	2100d310 	.word	0x2100d310
   17a5c:	000cf105 	.word	0x000cf105
   17a60:	fb40f004 	.word	0xfb40f004
   17a64:	30024639 	.word	0x30024639
   17a68:	0b01f801 	.word	0x0b01f801
   17a6c:	4628464a 	.word	0x4628464a
   17a70:	43f8e8bd 	.word	0x43f8e8bd
   17a74:	bc36f004 	.word	0xbc36f004
   17a78:	e7c94801 	.word	0xe7c94801
   17a7c:	e7c74801 	.word	0xe7c74801
   17a80:	ffffb080 	.word	0xffffb080
   17a84:	ffffb100 	.word	0xffffb100

00017a88 <symbol_0007a22>:
   17a88:	d0412b00 	.word	0xd0412b00
   17a8c:	461eb5f8 	.word	0x461eb5f8
   17a90:	46147813 	.word	0x46147813
   17a94:	b9ab460d 	.word	0xb9ab460d
   17a98:	d1352e01 	.word	0xd1352e01
   17a9c:	46284631 	.word	0x46284631
   17aa0:	fae6f004 	.word	0xfae6f004
   17aa4:	bdf8b100 	.word	0xbdf8b100
   17aa8:	f1054631 	.word	0xf1054631
   17aac:	f004000c 	.word	0xf004000c
   17ab0:	2800fadf 	.word	0x2800fadf
   17ab4:	4601d1f7 	.word	0x4601d1f7
   17ab8:	0018f105 	.word	0x0018f105
   17abc:	40f8e8bd 	.word	0x40f8e8bd
   17ac0:	bad6f004 	.word	0xbad6f004
   17ac4:	f0043004 	.word	0xf0043004
   17ac8:	7823fb4b 	.word	0x7823fb4b
   17acc:	2b044607 	.word	0x2b044607
   17ad0:	0043d11c 	.word	0x0043d11c
   17ad4:	429e3301 	.word	0x429e3301
   17ad8:	4602d116 	.word	0x4602d116
   17adc:	46281c61 	.word	0x46281c61
   17ae0:	fb6ef004 	.word	0xfb6ef004
   17ae4:	d1de2800 	.word	0xd1de2800
   17ae8:	44211c79 	.word	0x44211c79
   17aec:	f105463a 	.word	0xf105463a
   17af0:	f004000c 	.word	0xf004000c
   17af4:	2800fb65 	.word	0x2800fb65
   17af8:	f105d1d5 	.word	0xf105d1d5
   17afc:	21010018 	.word	0x21010018
   17b00:	40f8e8bd 	.word	0x40f8e8bd
   17b04:	bab4f004 	.word	0xbab4f004
   17b08:	bdf84802 	.word	0xbdf84802
   17b0c:	bdf84802 	.word	0xbdf84802
   17b10:	47704800 	.word	0x47704800
   17b14:	ffffb080 	.word	0xffffb080
   17b18:	ffffb180 	.word	0xffffb180

00017b1c <symbol_000e8bc>:
   17b1c:	41f0e92d 	.word	0x41f0e92d
   17b20:	b086460c 	.word	0xb086460c
   17b24:	21014605 	.word	0x21014605
   17b28:	0018f104 	.word	0x0018f104
   17b2c:	fdbaf004 	.word	0xfdbaf004
   17b30:	f0402800 	.word	0xf0402800
   17b34:	6b2b809f 	.word	0x6b2b809f
   17b38:	f0002b00 	.word	0xf0002b00
   17b3c:	6beb80a0 	.word	0x6beb80a0
   17b40:	f0002b00 	.word	0xf0002b00
   17b44:	4601809c 	.word	0x4601809c
   17b48:	46204606 	.word	0x46204606
   17b4c:	fdaaf004 	.word	0xfdaaf004
   17b50:	f2c02800 	.word	0xf2c02800
   17b54:	f104808f 	.word	0xf104808f
   17b58:	4631070c 	.word	0x4631070c
   17b5c:	f0044638 	.word	0xf0044638
   17b60:	2800fda1 	.word	0x2800fda1
   17b64:	8086f2c0 	.word	0x8086f2c0
   17b68:	0804f105 	.word	0x0804f105
   17b6c:	46204641 	.word	0x46204641
   17b70:	fd30f004 	.word	0xfd30f004
   17b74:	da7d2800 	.word	0xda7d2800
   17b78:	46384641 	.word	0x46384641
   17b7c:	fd2af004 	.word	0xfd2af004
   17b80:	da772800 	.word	0xda772800
   17b84:	f0044668 	.word	0xf0044668
   17b88:	a803f863 	.word	0xa803f863
   17b8c:	f860f004 	.word	0xf860f004
   17b90:	4639463a 	.word	0x4639463a
   17b94:	f0054668 	.word	0xf0054668
   17b98:	4606f871 	.word	0x4606f871
   17b9c:	4668b148 	.word	0x4668b148
   17ba0:	f85ef004 	.word	0xf85ef004
   17ba4:	f004a803 	.word	0xf004a803
   17ba8:	4630f85b 	.word	0x4630f85b
   17bac:	e8bdb006 	.word	0xe8bdb006
   17bb0:	462981f0 	.word	0x462981f0
   17bb4:	f7fe4668 	.word	0xf7fe4668
   17bb8:	4606fc93 	.word	0x4606fc93
   17bbc:	d1ee2800 	.word	0xd1ee2800
   17bc0:	46214622 	.word	0x46214622
   17bc4:	f005a803 	.word	0xf005a803
   17bc8:	4606f859 	.word	0x4606f859
   17bcc:	d1e62800 	.word	0xd1e62800
   17bd0:	a8034629 	.word	0xa8034629
   17bd4:	fc84f7fe 	.word	0xfc84f7fe
   17bd8:	28004606 	.word	0x28004606
   17bdc:	69abd1df 	.word	0x69abd1df
   17be0:	d04e2b00 	.word	0xd04e2b00
   17be4:	f105a903 	.word	0xf105a903
   17be8:	46080210 	.word	0x46080210
   17bec:	ff12f004 	.word	0xff12f004
   17bf0:	28004606 	.word	0x28004606
   17bf4:	e007d1d3 	.word	0xe007d1d3
   17bf8:	4642a903 	.word	0x4642a903
   17bfc:	f0044608 	.word	0xf0044608
   17c00:	4606fe49 	.word	0x4606fe49
   17c04:	d1ca2800 	.word	0xd1ca2800
   17c08:	a8034641 	.word	0xa8034641
   17c0c:	fce2f004 	.word	0xfce2f004
   17c10:	daf12800 	.word	0xdaf12800
   17c14:	4622a903 	.word	0x4622a903
   17c18:	f0054608 	.word	0xf0054608
   17c1c:	4606f82f 	.word	0x4606f82f
   17c20:	d1bc2800 	.word	0xd1bc2800
   17c24:	a8034629 	.word	0xa8034629
   17c28:	fc5af7fe 	.word	0xfc5af7fe
   17c2c:	28004606 	.word	0x28004606
   17c30:	a903d1b5 	.word	0xa903d1b5
   17c34:	021cf105 	.word	0x021cf105
   17c38:	f0044608 	.word	0xf0044608
   17c3c:	4606feeb 	.word	0x4606feeb
   17c40:	d1ac2800 	.word	0xd1ac2800
   17c44:	a903e007 	.word	0xa903e007
   17c48:	46084642 	.word	0x46084642
   17c4c:	fe22f004 	.word	0xfe22f004
   17c50:	28004606 	.word	0x28004606
   17c54:	4641d1a3 	.word	0x4641d1a3
   17c58:	f004a803 	.word	0xf004a803
   17c5c:	2800fcbb 	.word	0x2800fcbb
   17c60:	a903daf1 	.word	0xa903daf1
   17c64:	f0044668 	.word	0xf0044668
   17c68:	4e14fcb5 	.word	0x4e14fcb5
   17c6c:	bf082800 	.word	0xbf082800
   17c70:	e7942600 	.word	0xe7942600
   17c74:	46304e11 	.word	0x46304e11
   17c78:	e8bdb006 	.word	0xe8bdb006
   17c7c:	4e1081f0 	.word	0x4e1081f0
   17c80:	a903e793 	.word	0xa903e793
   17c84:	46082203 	.word	0x46082203
   17c88:	ffacf004 	.word	0xffacf004
   17c8c:	28004606 	.word	0x28004606
   17c90:	e00ed185 	.word	0xe00ed185
   17c94:	a8032100 	.word	0xa8032100
   17c98:	fd04f004 	.word	0xfd04f004
   17c9c:	d0b92800 	.word	0xd0b92800
   17ca0:	4642a903 	.word	0x4642a903
   17ca4:	f0044608 	.word	0xf0044608
   17ca8:	4606feb5 	.word	0x4606feb5
   17cac:	f47f2800 	.word	0xf47f2800
   17cb0:	9b03af76 	.word	0x9b03af76
   17cb4:	dbed2b00 	.word	0xdbed2b00
   17cb8:	bf00e7ac 	.word	0xbf00e7ac
   17cbc:	ffffb380 	.word	0xffffb380
   17cc0:	ffffb080 	.word	0xffffb080

00017cc4 <symbol_0001f66>:
   17cc4:	43f0e92d 	.word	0x43f0e92d
   17cc8:	b0ab7803 	.word	0xb0ab7803
   17ccc:	f0002b00 	.word	0xf0002b00
   17cd0:	780a80c4 	.word	0x780a80c4
   17cd4:	f040429a 	.word	0xf040429a
   17cd8:	f10180c0 	.word	0xf10180c0
   17cdc:	460c0788 	.word	0x460c0788
   17ce0:	46394605 	.word	0x46394605
   17ce4:	f0043088 	.word	0xf0043088
   17ce8:	2800fc75 	.word	0x2800fc75
   17cec:	80b5f040 	.word	0x80b5f040
   17cf0:	0994f104 	.word	0x0994f104
   17cf4:	f1054649 	.word	0xf1054649
   17cf8:	f0040094 	.word	0xf0040094
   17cfc:	2800fc6b 	.word	0x2800fc6b
   17d00:	80abf040 	.word	0x80abf040
   17d04:	08a0f104 	.word	0x08a0f104
   17d08:	00a0f105 	.word	0x00a0f105
   17d0c:	f0044641 	.word	0xf0044641
   17d10:	4606fc61 	.word	0x4606fc61
   17d14:	f0402800 	.word	0xf0402800
   17d18:	462580a0 	.word	0x462580a0
   17d1c:	f003a802 	.word	0xf003a802
   17d20:	a805ff97 	.word	0xa805ff97
   17d24:	ff94f003 	.word	0xff94f003
   17d28:	f003a808 	.word	0xf003a808
   17d2c:	4631ff91 	.word	0x4631ff91
   17d30:	a80b227c 	.word	0xa80b227c
   17d34:	fd77f00c 	.word	0xfd77f00c
   17d38:	1b7cf815 	.word	0x1b7cf815
   17d3c:	f7fda80b 	.word	0xf7fda80b
   17d40:	f104fbd5 	.word	0xf104fbd5
   17d44:	21010040 	.word	0x21010040
   17d48:	f0043428 	.word	0xf0043428
   17d4c:	2800fcab 	.word	0x2800fcab
   17d50:	8081f040 	.word	0x8081f040
   17d54:	2b009b17 	.word	0x2b009b17
   17d58:	9b1ad07d 	.word	0x9b1ad07d
   17d5c:	d07a2b00 	.word	0xd07a2b00
   17d60:	46282101 	.word	0x46282101
   17d64:	fc9ef004 	.word	0xfc9ef004
   17d68:	f2c02800 	.word	0xf2c02800
   17d6c:	a91e8083 	.word	0xa91e8083
   17d70:	f0044628 	.word	0xf0044628
   17d74:	2800fc2f 	.word	0x2800fc2f
   17d78:	4621da7c 	.word	0x4621da7c
   17d7c:	f7ffa80b 	.word	0xf7ffa80b
   17d80:	4606fecd 	.word	0x4606fecd
   17d84:	9b17b980 	.word	0x9b17b980
   17d88:	d0642b00 	.word	0xd0642b00
   17d8c:	2b009b1a 	.word	0x2b009b1a
   17d90:	e9cdd061 	.word	0xe9cdd061
   17d94:	46230000 	.word	0x46230000
   17d98:	a902462a 	.word	0xa902462a
   17d9c:	f7ffa80b 	.word	0xf7ffa80b
   17da0:	4606fa6b 	.word	0x4606fa6b
   17da4:	d04c2800 	.word	0xd04c2800
   17da8:	f003a802 	.word	0xf003a802
   17dac:	a805ff59 	.word	0xa805ff59
   17db0:	ff56f003 	.word	0xff56f003
   17db4:	f003a808 	.word	0xf003a808
   17db8:	9b23ff53 	.word	0x9b23ff53
   17dbc:	d1262b01 	.word	0xd1262b01
   17dc0:	b1c89828 	.word	0xb1c89828
   17dc4:	b1aa9a29 	.word	0xb1aa9a29
   17dc8:	eb052500 	.word	0xeb052500
   17dcc:	eb1003c5 	.word	0xeb1003c5
   17dd0:	d0320483 	.word	0xd0320483
   17dd4:	f0034620 	.word	0xf0034620
   17dd8:	f104ff43 	.word	0xf104ff43
   17ddc:	f003000c 	.word	0xf003000c
   17de0:	f104ff3f 	.word	0xf104ff3f
   17de4:	f0030018 	.word	0xf0030018
   17de8:	9a29ff3b 	.word	0x9a29ff3b
   17dec:	42953501 	.word	0x42953501
   17df0:	d3ea9828 	.word	0xd3ea9828
   17df4:	fb94f007 	.word	0xfb94f007
   17df8:	ab0b2200 	.word	0xab0b2200
   17dfc:	a92a701a 	.word	0xa92a701a
   17e00:	428b3301 	.word	0x428b3301
   17e04:	4630d1fa 	.word	0x4630d1fa
   17e08:	e8bdb02b 	.word	0xe8bdb02b
   17e0c:	a80c83f0 	.word	0xa80c83f0
   17e10:	ff26f003 	.word	0xff26f003
   17e14:	f003a80f 	.word	0xf003a80f
   17e18:	a812ff23 	.word	0xa812ff23
   17e1c:	ff20f003 	.word	0xff20f003
   17e20:	f003a815 	.word	0xf003a815
   17e24:	a818ff1d 	.word	0xa818ff1d
   17e28:	ff1af003 	.word	0xff1af003
   17e2c:	f003a81b 	.word	0xf003a81b
   17e30:	a81eff17 	.word	0xa81eff17
   17e34:	ff14f003 	.word	0xff14f003
   17e38:	3501e7c2 	.word	0x3501e7c2
   17e3c:	d3c44295 	.word	0xd3c44295
   17e40:	4639e7d8 	.word	0x4639e7d8
   17e44:	f004a802 	.word	0xf004a802
   17e48:	b920fbc5 	.word	0xb920fbc5
   17e4c:	a8054649 	.word	0xa8054649
   17e50:	fbc0f004 	.word	0xfbc0f004
   17e54:	4e08b130 	.word	0x4e08b130
   17e58:	4e07e7a6 	.word	0x4e07e7a6
   17e5c:	b02b4630 	.word	0xb02b4630
   17e60:	83f0e8bd 	.word	0x83f0e8bd
   17e64:	a8084641 	.word	0xa8084641
   17e68:	fbb4f004 	.word	0xfbb4f004
   17e6c:	28004606 	.word	0x28004606
   17e70:	e7f0d09a 	.word	0xe7f0d09a
   17e74:	e7974e01 	.word	0xe7974e01
   17e78:	ffffb080 	.word	0xffffb080
   17e7c:	ffffb380 	.word	0xffffb380

00017e80 <interface_init>:
   17e80:	f44fb508 	.word	0xf44fb508
   17e84:	21007290 	.word	0x21007290
   17e88:	f00c4802 	.word	0xf00c4802
   17e8c:	2000fccc 	.word	0x2000fccc
   17e90:	bf00bd08 	.word	0xbf00bd08
   17e94:	20027470 	.word	0x20027470

00017e98 <interface_socket_allocate>:
   17e98:	4b29b5f8 	.word	0x4b29b5f8
   17e9c:	681d4606 	.word	0x681d4606
   17ea0:	b1e54608 	.word	0xb1e54608
   17ea4:	2c006a5c 	.word	0x2c006a5c
   17ea8:	6c9cd03d 	.word	0x6c9cd03d
   17eac:	d03c2c00 	.word	0xd03c2c00
   17eb0:	2c006edc 	.word	0x2c006edc
   17eb4:	f8d3d03b 	.word	0xf8d3d03b
   17eb8:	b1791090 	.word	0xb1791090
   17ebc:	10b4f8d3 	.word	0x10b4f8d3
   17ec0:	f8d3b3b9 	.word	0xf8d3b3b9
   17ec4:	b3b110d8 	.word	0xb3b110d8
   17ec8:	10fcf8d3 	.word	0x10fcf8d3
   17ecc:	f04fb3a9 	.word	0xf04fb3a9
   17ed0:	200c35ff 	.word	0x200c35ff
   17ed4:	f8d0f7fa 	.word	0xf8d0f7fa
   17ed8:	bdf84628 	.word	0xbdf84628
   17edc:	f04f2504 	.word	0xf04f2504
   17ee0:	f04f0c01 	.word	0xf04f0c01
   17ee4:	eb0537ff 	.word	0xeb0537ff
   17ee8:	00a404c5 	.word	0x00a404c5
   17eec:	c004f843 	.word	0xc004f843
   17ef0:	4611441c 	.word	0x4611441c
   17ef4:	462261a7 	.word	0x462261a7
   17ef8:	facaf7fd 	.word	0xfacaf7fd
   17efc:	61e04603 	.word	0x61e04603
   17f00:	681bb158 	.word	0x681bb158
   17f04:	4798681b 	.word	0x4798681b
   17f08:	6034b910 	.word	0x6034b910
   17f0c:	bdf84628 	.word	0xbdf84628
   17f10:	f7fd69e0 	.word	0xf7fd69e0
   17f14:	2300fadd 	.word	0x2300fadd
   17f18:	462061e3 	.word	0x462061e3
   17f1c:	21002224 	.word	0x21002224
   17f20:	fc81f00c 	.word	0xfc81f00c
   17f24:	2501e7d3 	.word	0x2501e7d3
   17f28:	2502e7d9 	.word	0x2502e7d9
   17f2c:	2503e7d7 	.word	0x2503e7d7
   17f30:	2505e7d5 	.word	0x2505e7d5
   17f34:	2506e7d3 	.word	0x2506e7d3
   17f38:	2507e7d1 	.word	0x2507e7d1
   17f3c:	bf00e7cf 	.word	0xbf00e7cf
   17f40:	20027470 	.word	0x20027470

00017f44 <interface_socket_free>:
   17f44:	d9002807 	.word	0xd9002807
   17f48:	b5104770 	.word	0xb5104770
   17f4c:	eb004c07 	.word	0xeb004c07
   17f50:	eb0400c0 	.word	0xeb0400c0
   17f54:	69e00480 	.word	0x69e00480
   17f58:	f7fdb108 	.word	0xf7fdb108
   17f5c:	4620fab9 	.word	0x4620fab9
   17f60:	4010e8bd 	.word	0x4010e8bd
   17f64:	21002224 	.word	0x21002224
   17f68:	bc5df00c 	.word	0xbc5df00c
   17f6c:	20027470 	.word	0x20027470

00017f70 <interface_socket_packet_handler_update>:
   17f70:	e92d2807 	.word	0xe92d2807
   17f74:	d81e43f8 	.word	0xd81e43f8
   17f78:	08c0ea4f 	.word	0x08c0ea4f
   17f7c:	eb084e17 	.word	0xeb084e17
   17f80:	009b0300 	.word	0x009b0300
   17f84:	18f558f4 	.word	0x18f558f4
   17f88:	460bb1ac 	.word	0x460bb1ac
   17f8c:	46114604 	.word	0x46114604
   17f90:	462a4618 	.word	0x462a4618
   17f94:	901cf8d5 	.word	0x901cf8d5
   17f98:	fa7af7fd 	.word	0xfa7af7fd
   17f9c:	b1d061e8 	.word	0xb1d061e8
   17fa0:	681b6803 	.word	0x681b6803
   17fa4:	46074798 	.word	0x46074798
   17fa8:	4648b948 	.word	0x4648b948
   17fac:	fa90f7fd 	.word	0xfa90f7fd
   17fb0:	e8bd4638 	.word	0xe8bd4638
   17fb4:	270583f8 	.word	0x270583f8
   17fb8:	e8bd4638 	.word	0xe8bd4638
   17fbc:	69e883f8 	.word	0x69e883f8
   17fc0:	fa86f7fd 	.word	0xfa86f7fd
   17fc4:	0004eb08 	.word	0x0004eb08
   17fc8:	0680eb06 	.word	0x0680eb06
   17fcc:	901cf8c6 	.word	0x901cf8c6
   17fd0:	e8bd4638 	.word	0xe8bd4638
   17fd4:	270483f8 	.word	0x270483f8
   17fd8:	bf00e7f4 	.word	0xbf00e7f4
   17fdc:	20027470 	.word	0x20027470

00017fe0 <interface_socket_wait>:
   17fe0:	eb00b5f0 	.word	0xeb00b5f0
   17fe4:	4c0e00c0 	.word	0x4c0e00c0
   17fe8:	58250080 	.word	0x58250080
   17fec:	4015b083 	.word	0x4015b083
   17ff0:	9301428d 	.word	0x9301428d
   17ff4:	d0104404 	.word	0xd0104404
   17ff8:	b9736863 	.word	0xb9736863
   17ffc:	4616460f 	.word	0x4616460f
   18000:	e0064625 	.word	0xe0064625
   18004:	b943686b 	.word	0xb943686b
   18008:	4620a901 	.word	0x4620a901
   1800c:	ffa0f7f9 	.word	0xffa0f7f9
   18010:	682bb920 	.word	0x682bb920
   18014:	42bb4033 	.word	0x42bb4033
   18018:	2000d1f4 	.word	0x2000d1f4
   1801c:	bdf0b003 	.word	0xbdf0b003
   18020:	20027470 	.word	0x20027470

00018024 <interface_from_internal_id_search>:
   18024:	681a4b23 	.word	0x681a4b23
   18028:	699ab112 	.word	0x699ab112
   1802c:	d0324282 	.word	0xd0324282
   18030:	b1126a5a 	.word	0xb1126a5a
   18034:	42826bda 	.word	0x42826bda
   18038:	6c9ad02f 	.word	0x6c9ad02f
   1803c:	6e1ab112 	.word	0x6e1ab112
   18040:	d02c4282 	.word	0xd02c4282
   18044:	b11a6eda 	.word	0xb11a6eda
   18048:	2084f8d3 	.word	0x2084f8d3
   1804c:	d0284282 	.word	0xd0284282
   18050:	2090f8d3 	.word	0x2090f8d3
   18054:	f8d3b11a 	.word	0xf8d3b11a
   18058:	428220a8 	.word	0x428220a8
   1805c:	f8d3d023 	.word	0xf8d3d023
   18060:	b11a20b4 	.word	0xb11a20b4
   18064:	20ccf8d3 	.word	0x20ccf8d3
   18068:	d01e4282 	.word	0xd01e4282
   1806c:	20d8f8d3 	.word	0x20d8f8d3
   18070:	f8d3b11a 	.word	0xf8d3b11a
   18074:	428220f0 	.word	0x428220f0
   18078:	f8d3d019 	.word	0xf8d3d019
   1807c:	b13a20fc 	.word	0xb13a20fc
   18080:	3114f8d3 	.word	0x3114f8d3
   18084:	bf144283 	.word	0xbf144283
   18088:	30fff04f 	.word	0x30fff04f
   1808c:	47702007 	.word	0x47702007
   18090:	30fff04f 	.word	0x30fff04f
   18094:	20004770 	.word	0x20004770
   18098:	20014770 	.word	0x20014770
   1809c:	20024770 	.word	0x20024770
   180a0:	20034770 	.word	0x20034770
   180a4:	20044770 	.word	0x20044770
   180a8:	20054770 	.word	0x20054770
   180ac:	20064770 	.word	0x20064770
   180b0:	bf004770 	.word	0xbf004770
   180b4:	20027470 	.word	0x20027470

000180b8 <interface_socket_from_handle_get>:
   180b8:	d8072807 	.word	0xd8072807
   180bc:	00c0eb00 	.word	0x00c0eb00
   180c0:	00804b03 	.word	0x00804b03
   180c4:	b10a581a 	.word	0xb10a581a
   180c8:	47704418 	.word	0x47704418
   180cc:	47702000 	.word	0x47702000
   180d0:	20027470 	.word	0x20027470

000180d4 <interface_socket_event_get>:
   180d4:	2807b119 	.word	0x2807b119
   180d8:	2310d902 	.word	0x2310d902
   180dc:	4770600b 	.word	0x4770600b
   180e0:	00c0eb00 	.word	0x00c0eb00
   180e4:	00804b07 	.word	0x00804b07
   180e8:	2a00581a 	.word	0x2a00581a
   180ec:	581bd0f5 	.word	0x581bd0f5
   180f0:	f0030c1b 	.word	0xf0030c1b
   180f4:	2a0a020a 	.word	0x2a0a020a
   180f8:	f003bf14 	.word	0xf003bf14
   180fc:	f003030f 	.word	0xf003030f
   18100:	e7eb030d 	.word	0xe7eb030d
   18104:	20027470 	.word	0x20027470

00018108 <interface_socket_setopt>:
   18108:	b5702807 	.word	0xb5702807
   1810c:	eb00d827 	.word	0xeb00d827
   18110:	4c1600c0 	.word	0x4c1600c0
   18114:	58250080 	.word	0x58250080
   18118:	2901b30d 	.word	0x2901b30d
   1811c:	2a14d119 	.word	0x2a14d119
   18120:	b183d117 	.word	0xb183d117
   18124:	2a089a04 	.word	0x2a089a04
   18128:	f44fd10d 	.word	0xf44fd10d
   1812c:	685a757a 	.word	0x685a757a
   18130:	68194e0f 	.word	0x68194e0f
   18134:	2302fba6 	.word	0x2302fba6
   18138:	fb05099b 	.word	0xfb05099b
   1813c:	44203301 	.word	0x44203301
   18140:	20006203 	.word	0x20006203
   18144:	2016bd70 	.word	0x2016bd70
   18148:	ff96f7f9 	.word	0xff96f7f9
   1814c:	30fff04f 	.word	0x30fff04f
   18150:	202abd70 	.word	0x202abd70
   18154:	ff90f7f9 	.word	0xff90f7f9
   18158:	30fff04f 	.word	0x30fff04f
   1815c:	2009bd70 	.word	0x2009bd70
   18160:	ff8af7f9 	.word	0xff8af7f9
   18164:	30fff04f 	.word	0x30fff04f
   18168:	bf00bd70 	.word	0xbf00bd70
   1816c:	20027470 	.word	0x20027470
   18170:	10624dd3 	.word	0x10624dd3

00018174 <interface_socket_getopt>:
   18174:	2807b570 	.word	0x2807b570
   18178:	d8219d04 	.word	0xd8219d04
   1817c:	eb004c13 	.word	0xeb004c13
   18180:	008000c0 	.word	0x008000c0
   18184:	44045826 	.word	0x44045826
   18188:	2901b1d6 	.word	0x2901b1d6
   1818c:	2a04d112 	.word	0x2a04d112
   18190:	b14bd110 	.word	0xb14bd110
   18194:	682ab145 	.word	0x682ab145
   18198:	d1052a04 	.word	0xd1052a04
   1819c:	68612200 	.word	0x68612200
   181a0:	60194610 	.word	0x60194610
   181a4:	bd706062 	.word	0xbd706062
   181a8:	f7f92016 	.word	0xf7f92016
   181ac:	f04fff65 	.word	0xf04fff65
   181b0:	bd7030ff 	.word	0xbd7030ff
   181b4:	f7f9202a 	.word	0xf7f9202a
   181b8:	f04fff5f 	.word	0xf04fff5f
   181bc:	bd7030ff 	.word	0xbd7030ff
   181c0:	f7f92009 	.word	0xf7f92009
   181c4:	f04fff59 	.word	0xf04fff59
   181c8:	bd7030ff 	.word	0xbd7030ff
   181cc:	20027470 	.word	0x20027470

000181d0 <interface_socket_fcntl>:
   181d0:	b5102807 	.word	0xb5102807
   181d4:	eb00d818 	.word	0xeb00d818
   181d8:	4c1100c0 	.word	0x4c1100c0
   181dc:	58e00083 	.word	0x58e00083
   181e0:	2901b190 	.word	0x2901b190
   181e4:	2902d005 	.word	0x2902d005
   181e8:	58e0d114 	.word	0x58e0d114
   181ec:	7000f3c0 	.word	0x7000f3c0
   181f0:	f012bd10 	.word	0xf012bd10
   181f4:	58e20001 	.word	0x58e20001
   181f8:	2000bf1a 	.word	0x2000bf1a
   181fc:	5280f042 	.word	0x5280f042
   18200:	5280f022 	.word	0x5280f022
   18204:	bd1050e2 	.word	0xbd1050e2
   18208:	f7f92009 	.word	0xf7f92009
   1820c:	f04fff35 	.word	0xf04fff35
   18210:	bd1030ff 	.word	0xbd1030ff
   18214:	f7f92016 	.word	0xf7f92016
   18218:	f04fff2f 	.word	0xf04fff2f
   1821c:	bd1030ff 	.word	0xbd1030ff
   18220:	20027470 	.word	0x20027470

00018224 <symbol_00026c2>:
   18224:	4ff0e92d 	.word	0x4ff0e92d
   18228:	2100460e 	.word	0x2100460e
   1822c:	b0854605 	.word	0xb0854605
   18230:	93004608 	.word	0x93004608
   18234:	461c4617 	.word	0x461c4617
   18238:	aa034613 	.word	0xaa034613
   1823c:	9038f8dd 	.word	0x9038f8dd
   18240:	f994f7fb 	.word	0xf994f7fb
   18244:	f00c4628 	.word	0xf00c4628
   18248:	4682fa92 	.word	0x4682fa92
   1824c:	f00c4630 	.word	0xf00c4630
   18250:	9903fa8e 	.word	0x9903fa8e
   18254:	eb031c4b 	.word	0xeb031c4b
   18258:	44531391 	.word	0x44531391
   1825c:	9b0f4418 	.word	0x9b0f4418
   18260:	d8534298 	.word	0xd8534298
   18264:	f0072001 	.word	0xf0072001
   18268:	4682f947 	.word	0x4682f947
   1826c:	d0522800 	.word	0xd0522800
   18270:	94009903 	.word	0x94009903
   18274:	aa03463b 	.word	0xaa03463b
   18278:	f978f7fb 	.word	0xf978f7fb
   1827c:	28004680 	.word	0x28004680
   18280:	4628d13d 	.word	0x4628d13d
   18284:	fa73f00c 	.word	0xfa73f00c
   18288:	46024629 	.word	0x46024629
   1828c:	f00c4648 	.word	0xf00c4648
   18290:	4628faa0 	.word	0x4628faa0
   18294:	fa6bf00c 	.word	0xfa6bf00c
   18298:	eb099b03 	.word	0xeb099b03
   1829c:	b19b0400 	.word	0xb19b0400
   182a0:	270a46d3 	.word	0x270a46d3
   182a4:	bf282b40 	.word	0xbf282b40
   182a8:	461d2340 	.word	0x461d2340
   182ac:	461a4659 	.word	0x461a4659
   182b0:	f00c4620 	.word	0xf00c4620
   182b4:	9b03fa8e 	.word	0x9b03fa8e
   182b8:	1b5b442c 	.word	0x1b5b442c
   182bc:	44ab7027 	.word	0x44ab7027
   182c0:	93033401 	.word	0x93033401
   182c4:	d1ed2b00 	.word	0xd1ed2b00
   182c8:	f00c4630 	.word	0xf00c4630
   182cc:	4631fa50 	.word	0x4631fa50
   182d0:	46204602 	.word	0x46204602
   182d4:	fa7df00c 	.word	0xfa7df00c
   182d8:	f00c4630 	.word	0xf00c4630
   182dc:	2100fa48 	.word	0x2100fa48
   182e0:	18234602 	.word	0x18234602
   182e4:	330154a1 	.word	0x330154a1
   182e8:	eba39a10 	.word	0xeba39a10
   182ec:	46500309 	.word	0x46500309
   182f0:	f0076013 	.word	0xf0076013
   182f4:	4640f915 	.word	0x4640f915
   182f8:	e8bdb005 	.word	0xe8bdb005
   182fc:	46508ff0 	.word	0x46508ff0
   18300:	f90ef007 	.word	0xf90ef007
   18304:	b0054640 	.word	0xb0054640
   18308:	8ff0e8bd 	.word	0x8ff0e8bd
   1830c:	f06f9b10 	.word	0xf06f9b10
   18310:	60180829 	.word	0x60180829
   18314:	f8dfe7ef 	.word	0xf8dfe7ef
   18318:	e7ec8004 	.word	0xe7ec8004
   1831c:	ffffee80 	.word	0xffffee80

00018320 <ip_recvd_packet_free_cb>:
   18320:	4604b510 	.word	0x4604b510
   18324:	f7fa6800 	.word	0xf7fa6800
   18328:	68a0fdaf 	.word	0x68a0fdaf
   1832c:	e8bdb118 	.word	0xe8bdb118
   18330:	f0074010 	.word	0xf0074010
   18334:	bd10b8f5 	.word	0xbd10b8f5

00018338 <rpc_error_to_nrf_bsd_error>:
   18338:	bf9a2810 	.word	0xbf9a2810
   1833c:	f8534b02 	.word	0xf8534b02
   18340:	202d0020 	.word	0x202d0020
   18344:	bf004770 	.word	0xbf004770
   18348:	00026a14 	.word	0x00026a14

0001834c <ip_interface_request_create>:
   1834c:	2500b570 	.word	0x2500b570
   18350:	ac02b082 	.word	0xac02b082
   18354:	5d04f844 	.word	0x5d04f844
   18358:	460d4606 	.word	0x460d4606
   1835c:	46194620 	.word	0x46194620
   18360:	f7fa4614 	.word	0xf7fa4614
   18364:	b960fd5f 	.word	0xb960fd5f
   18368:	22089b01 	.word	0x22089b01
   1836c:	72987258 	.word	0x72987258
   18370:	461872d8 	.word	0x461872d8
   18374:	4406ea44 	.word	0x4406ea44
   18378:	611d60dc 	.word	0x611d60dc
   1837c:	b002721a 	.word	0xb002721a
   18380:	9b01bd70 	.word	0x9b01bd70
   18384:	b0024618 	.word	0xb0024618
   18388:	bf00bd70 	.word	0xbf00bd70

0001838c <ip_interface_request_send>:
   1838c:	460cb570 	.word	0x460cb570
   18390:	46114605 	.word	0x46114605
   18394:	461e4620 	.word	0x461e4620
   18398:	fd58f7fa 	.word	0xfd58f7fa
   1839c:	bd70b900 	.word	0xbd70b900
   183a0:	b1086820 	.word	0xb1086820
   183a4:	fd70f7fa 	.word	0xfd70f7fa
   183a8:	f7fa4620 	.word	0xf7fa4620
   183ac:	602efd65 	.word	0x602efd65
   183b0:	bd702023 	.word	0xbd702023

000183b4 <ip_interface_wait>:
   183b4:	4605b538 	.word	0x4605b538
   183b8:	fe12f7ff 	.word	0xfe12f7ff
   183bc:	b1084604 	.word	0xb1084604
   183c0:	bd384620 	.word	0xbd384620
   183c4:	f7ff4628 	.word	0xf7ff4628
   183c8:	2800fe77 	.word	0x2800fe77
   183cc:	6844d0f8 	.word	0x6844d0f8
   183d0:	d0f52c00 	.word	0xd0f52c00
   183d4:	60432300 	.word	0x60432300
   183d8:	bd384620 	.word	0xbd384620

000183dc <ip_interface_init>:
   183dc:	2300b538 	.word	0x2300b538
   183e0:	4c084d07 	.word	0x4c084d07
   183e4:	22204619 	.word	0x22204619
   183e8:	602b4807 	.word	0x602b4807
   183ec:	f00c6023 	.word	0xf00c6023
   183f0:	f7fafa1a 	.word	0xf7fafa1a
   183f4:	3000fd11 	.word	0x3000fd11
   183f8:	2001bf18 	.word	0x2001bf18
   183fc:	bd384240 	.word	0xbd384240
   18400:	2002060c 	.word	0x2002060c
   18404:	20020608 	.word	0x20020608
   18408:	20020614 	.word	0x20020614

0001840c <ip_interface_open>:
   1840c:	41f0e92d 	.word	0x41f0e92d
   18410:	20004606 	.word	0x20004606
   18414:	0308f026 	.word	0x0308f026
   18418:	2b02b082 	.word	0x2b02b082
   1841c:	4617460c 	.word	0x4617460c
   18420:	d0029000 	.word	0xd0029000
   18424:	f0402e05 	.word	0xf0402e05
   18428:	1e638084 	.word	0x1e638084
   1842c:	d85c2b02 	.word	0xd85c2b02
   18430:	d1542f00 	.word	0xd1542f00
   18434:	d0672c01 	.word	0xd0672c01
   18438:	bf182c03 	.word	0xbf182c03
   1843c:	4a482702 	.word	0x4a482702
   18440:	46684621 	.word	0x46684621
   18444:	fd28f7ff 	.word	0xfd28f7ff
   18448:	46809b00 	.word	0x46809b00
   1844c:	d0592b00 	.word	0xd0592b00
   18450:	a8022100 	.word	0xa8022100
   18454:	1d04f840 	.word	0x1d04f840
   18458:	6403e9c3 	.word	0x6403e9c3
   1845c:	f7fa615f 	.word	0xf7fa615f
   18460:	2800fce1 	.word	0x2800fce1
   18464:	f247d14b 	.word	0xf247d14b
   18468:	f04f0201 	.word	0xf04f0201
   1846c:	210833ff 	.word	0x210833ff
   18470:	ea429d01 	.word	0xea429d01
   18474:	60ea4208 	.word	0x60ea4208
   18478:	72a87268 	.word	0x72a87268
   1847c:	722972e8 	.word	0x722972e8
   18480:	746b742b 	.word	0x746b742b
   18484:	74eb74ab 	.word	0x74eb74ab
   18488:	2e0568ab 	.word	0x2e0568ab
   1848c:	030cf103 	.word	0x030cf103
   18490:	d00360ab 	.word	0xd00360ab
   18494:	bf142e0a 	.word	0xbf142e0a
   18498:	26022601 	.word	0x26022601
   1849c:	61ef616e 	.word	0x61ef616e
   184a0:	f24761ac 	.word	0xf24761ac
   184a4:	46280101 	.word	0x46280101
   184a8:	f7fa9f00 	.word	0xf7fa9f00
   184ac:	4606fccf 	.word	0x4606fccf
   184b0:	6828b360 	.word	0x6828b360
   184b4:	f7fab108 	.word	0xf7fab108
   184b8:	4628fce7 	.word	0x4628fce7
   184bc:	fcdcf7fa 	.word	0xfcdcf7fa
   184c0:	25232301 	.word	0x25232301
   184c4:	4640603b 	.word	0x4640603b
   184c8:	fd3cf7ff 	.word	0xfd3cf7ff
   184cc:	f7f94628 	.word	0xf7f94628
   184d0:	f04ffdd3 	.word	0xf04ffdd3
   184d4:	464038ff 	.word	0x464038ff
   184d8:	e8bdb002 	.word	0xe8bdb002
   184dc:	2c0181f0 	.word	0x2c0181f0
   184e0:	2c02d009 	.word	0x2c02d009
   184e4:	2f02d109 	.word	0x2f02d109
   184e8:	2016d0a9 	.word	0x2016d0a9
   184ec:	fdc4f7f9 	.word	0xfdc4f7f9
   184f0:	38fff04f 	.word	0x38fff04f
   184f4:	2f01e7ef 	.word	0x2f01e7ef
   184f8:	2702d1f7 	.word	0x2702d1f7
   184fc:	9d01e79f 	.word	0x9d01e79f
   18500:	d1c12d00 	.word	0xd1c12d00
   18504:	e7de250c 	.word	0xe7de250c
   18508:	e7984627 	.word	0xe7984627
   1850c:	33fff04f 	.word	0x33fff04f
   18510:	72fff64f 	.word	0x72fff64f
   18514:	46402102 	.word	0x46402102
   18518:	fd62f7ff 	.word	0xfd62f7ff
   1851c:	28004605 	.word	0x28004605
   18520:	4640d1d1 	.word	0x4640d1d1
   18524:	fdc8f7ff 	.word	0xfdc8f7ff
   18528:	6845b148 	.word	0x6845b148
   1852c:	6046b13d 	.word	0x6046b13d
   18530:	202fe7c9 	.word	0x202fe7c9
   18534:	fda0f7f9 	.word	0xfda0f7f9
   18538:	38fff04f 	.word	0x38fff04f
   1853c:	3c02e7cb 	.word	0x3c02e7cb
   18540:	d8c82c01 	.word	0xd8c82c01
   18544:	9b004640 	.word	0x9b004640
   18548:	f442681a 	.word	0xf442681a
   1854c:	601a3200 	.word	0x601a3200
   18550:	f442681a 	.word	0xf442681a
   18554:	601a1280 	.word	0x601a1280
   18558:	e8bdb002 	.word	0xe8bdb002
   1855c:	bf0081f0 	.word	0xbf0081f0
   18560:	00018321 	.word	0x00018321

00018564 <ip_interface_close>:
   18564:	41f0e92d 	.word	0x41f0e92d
   18568:	4606b082 	.word	0x4606b082
   1856c:	fda4f7ff 	.word	0xfda4f7ff
   18570:	d0632800 	.word	0xd0632800
   18574:	21004604 	.word	0x21004604
   18578:	6827a802 	.word	0x6827a802
   1857c:	1d04f840 	.word	0x1d04f840
   18580:	8018f8d4 	.word	0x8018f8d4
   18584:	fc4ef7fa 	.word	0xfc4ef7fa
   18588:	d13a2800 	.word	0xd13a2800
   1858c:	0309f247 	.word	0x0309f247
   18590:	9d012208 	.word	0x9d012208
   18594:	4306ea43 	.word	0x4306ea43
   18598:	f8c560eb 	.word	0xf8c560eb
   1859c:	72688010 	.word	0x72688010
   185a0:	72e872a8 	.word	0x72e872a8
   185a4:	6823722a 	.word	0x6823722a
   185a8:	0109f247 	.word	0x0109f247
   185ac:	041b0c1b 	.word	0x041b0c1b
   185b0:	030df043 	.word	0x030df043
   185b4:	68236023 	.word	0x68236023
   185b8:	f4234628 	.word	0xf4234628
   185bc:	60233300 	.word	0x60233300
   185c0:	f4236823 	.word	0xf4236823
   185c4:	60231380 	.word	0x60231380
   185c8:	fc40f7fa 	.word	0xfc40f7fa
   185cc:	f04fbb40 	.word	0xf04fbb40
   185d0:	f64f33ff 	.word	0xf64f33ff
   185d4:	210e72ff 	.word	0x210e72ff
   185d8:	f7ff4630 	.word	0xf7ff4630
   185dc:	4604fd01 	.word	0x4604fd01
   185e0:	4c17b1a0 	.word	0x4c17b1a0
   185e4:	0026f854 	.word	0x0026f854
   185e8:	f7fab120 	.word	0xf7fab120
   185ec:	2300fc45 	.word	0x2300fc45
   185f0:	3026f844 	.word	0x3026f844
   185f4:	f7ff4630 	.word	0xf7ff4630
   185f8:	2000fca5 	.word	0x2000fca5
   185fc:	e8bdb002 	.word	0xe8bdb002
   18600:	9d0181f0 	.word	0x9d0181f0
   18604:	2d00200c 	.word	0x2d00200c
   18608:	e012d1cd 	.word	0xe012d1cd
   1860c:	f7ff4630 	.word	0xf7ff4630
   18610:	2800fd53 	.word	0x2800fd53
   18614:	6843d0e5 	.word	0x6843d0e5
   18618:	d0e22b00 	.word	0xd0e22b00
   1861c:	e7e06044 	.word	0xe7e06044
   18620:	b1086828 	.word	0xb1086828
   18624:	fc30f7fa 	.word	0xfc30f7fa
   18628:	f7fa4628 	.word	0xf7fa4628
   1862c:	2023fc25 	.word	0x2023fc25
   18630:	f7f96027 	.word	0xf7f96027
   18634:	f04ffd21 	.word	0xf04ffd21
   18638:	e7df30ff 	.word	0xe7df30ff
   1863c:	e7f82009 	.word	0xe7f82009
   18640:	20020614 	.word	0x20020614

00018644 <ip_interface_sendto>:
   18644:	4ff0e92d 	.word	0x4ff0e92d
   18648:	b0892500 	.word	0xb0892500
   1864c:	46149103 	.word	0x46149103
   18650:	95079301 	.word	0x95079301
   18654:	9e124607 	.word	0x9e124607
   18658:	fd2ef7ff 	.word	0xfd2ef7ff
   1865c:	f0002800 	.word	0xf0002800
   18660:	f5b48124 	.word	0xf5b48124
   18664:	f3005f80 	.word	0xf3005f80
   18668:	69038118 	.word	0x69038118
   1866c:	2b014605 	.word	0x2b014605
   18670:	80d1f000 	.word	0x80d1f000
   18674:	0390682a 	.word	0x0390682a
   18678:	682ad423 	.word	0x682ad423
   1867c:	d4060091 	.word	0xd4060091
   18680:	f0002b01 	.word	0xf0002b01
   18684:	682b80ed 	.word	0x682b80ed
   18688:	f140031a 	.word	0xf140031a
   1868c:	682b8102 	.word	0x682b8102
   18690:	f140031b 	.word	0xf140031b
   18694:	68a88106 	.word	0x68a88106
   18698:	9218f8df 	.word	0x9218f8df
   1869c:	f0402800 	.word	0xf0402800
   186a0:	682b8096 	.word	0x682b8096
   186a4:	f1400118 	.word	0xf1400118
   186a8:	682b8082 	.word	0x682b8082
   186ac:	6300f023 	.word	0x6300f023
   186b0:	f859602b 	.word	0xf859602b
   186b4:	28000027 	.word	0x28000027
   186b8:	4620d17c 	.word	0x4620d17c
   186bc:	e8bdb009 	.word	0xe8bdb009
   186c0:	f2478ff0 	.word	0xf2478ff0
   186c4:	f04f0806 	.word	0xf04f0806
   186c8:	043b0a0c 	.word	0x043b0a0c
   186cc:	91e4f8df 	.word	0x91e4f8df
   186d0:	46219304 	.word	0x46219304
   186d4:	f7faa807 	.word	0xf7faa807
   186d8:	2804fba5 	.word	0x2804fba5
   186dc:	2800d0f9 	.word	0x2800d0f9
   186e0:	9b07d171 	.word	0x9b07d171
   186e4:	a008f883 	.word	0xa008f883
   186e8:	72987258 	.word	0x72987258
   186ec:	b33e72d8 	.word	0xb33e72d8
   186f0:	687168ea 	.word	0x687168ea
   186f4:	d10a428a 	.word	0xd10a428a
   186f8:	f1032a02 	.word	0xf1032a02
   186fc:	7831001c 	.word	0x7831001c
   18700:	8090f000 	.word	0x8090f000
   18704:	d1022a0a 	.word	0xd1022a0a
   18708:	f0002924 	.word	0xf0002924
   1870c:	681880af 	.word	0x681880af
   18710:	f7fab110 	.word	0xf7fab110
   18714:	9b07fbb9 	.word	0x9b07fbb9
   18718:	f7fa4618 	.word	0xf7fa4618
   1871c:	2016fbad 	.word	0x2016fbad
   18720:	031a682b 	.word	0x031a682b
   18724:	682bd453 	.word	0x682bd453
   18728:	2b0db29b 	.word	0x2b0db29b
   1872c:	682bd0b6 	.word	0x682bd0b6
   18730:	1300f423 	.word	0x1300f423
   18734:	682b602b 	.word	0x682b602b
   18738:	3300f443 	.word	0x3300f443
   1873c:	e7ad602b 	.word	0xe7ad602b
   18740:	99014642 	.word	0x99014642
   18744:	69a96159 	.word	0x69a96159
   18748:	61199804 	.word	0x61199804
   1874c:	43029903 	.word	0x43029903
   18750:	605c60da 	.word	0x605c60da
   18754:	6818b119 	.word	0x6818b119
   18758:	f00c4622 	.word	0xf00c4622
   1875c:	682bf83a 	.word	0x682bf83a
   18760:	93054641 	.word	0x93054641
   18764:	f423682b 	.word	0xf423682b
   18768:	602b3300 	.word	0x602b3300
   1876c:	f443682b 	.word	0xf443682b
   18770:	602b1300 	.word	0x602b1300
   18774:	46189b07 	.word	0x46189b07
   18778:	f7fa9302 	.word	0xf7fa9302
   1877c:	9b02fb67 	.word	0x9b02fb67
   18780:	bb584683 	.word	0xbb584683
   18784:	3200f44f 	.word	0x3200f44f
   18788:	33fff04f 	.word	0x33fff04f
   1878c:	46384611 	.word	0x46384611
   18790:	fc26f7ff 	.word	0xfc26f7ff
   18794:	682bb370 	.word	0x682bb370
   18798:	d4370319 	.word	0xd4370319
   1879c:	d1bf280c 	.word	0xd1bf280c
   187a0:	0027f859 	.word	0x0027f859
   187a4:	d0942800 	.word	0xd0942800
   187a8:	fb66f7fa 	.word	0xfb66f7fa
   187ac:	f859e791 	.word	0xf859e791
   187b0:	69840027 	.word	0x69840027
   187b4:	fb60f7fa 	.word	0xfb60f7fa
   187b8:	46202300 	.word	0x46202300
   187bc:	3027f849 	.word	0x3027f849
   187c0:	e8bdb009 	.word	0xe8bdb009
   187c4:	682b8ff0 	.word	0x682b8ff0
   187c8:	031a200c 	.word	0x031a200c
   187cc:	f7f9d5ab 	.word	0xf7f9d5ab
   187d0:	f04ffc53 	.word	0xf04ffc53
   187d4:	f85934ff 	.word	0xf85934ff
   187d8:	e76c0027 	.word	0xe76c0027
   187dc:	469b6818 	.word	0x469b6818
   187e0:	f7fab108 	.word	0xf7fab108
   187e4:	4658fb51 	.word	0x4658fb51
   187e8:	fb46f7fa 	.word	0xfb46f7fa
   187ec:	20239b05 	.word	0x20239b05
   187f0:	e795602b 	.word	0xe795602b
   187f4:	f7ff4638 	.word	0xf7ff4638
   187f8:	4603fc5f 	.word	0x4603fc5f
   187fc:	6840b1f0 	.word	0x6840b1f0
   18800:	f8c3b1e0 	.word	0xf8c3b1e0
   18804:	682bb004 	.word	0x682bb004
   18808:	d5c70319 	.word	0xd5c70319
   1880c:	682b68a8 	.word	0x682b68a8
   18810:	d588031e 	.word	0xd588031e
   18814:	2e00e742 	.word	0x2e00e742
   18818:	af2cf43f 	.word	0xaf2cf43f
   1881c:	f8df2016 	.word	0xf8df2016
   18820:	e7d49094 	.word	0xe7d49094
   18824:	f47f2910 	.word	0xf47f2910
   18828:	2204af72 	.word	0x2204af72
   1882c:	835a8931 	.word	0x835a8931
   18830:	f1068319 	.word	0xf1068319
   18834:	f00b010c 	.word	0xf00b010c
   18838:	e01effcc 	.word	0xe01effcc
   1883c:	031b682b 	.word	0x031b682b
   18840:	af2ff53f 	.word	0xaf2ff53f
   18844:	b29b682b 	.word	0xb29b682b
   18848:	f43f2b0d 	.word	0xf43f2b0d
   1884c:	682baf2a 	.word	0x682baf2a
   18850:	1300f423 	.word	0x1300f423
   18854:	682b602b 	.word	0x682b602b
   18858:	3300f443 	.word	0x3300f443
   1885c:	e720602b 	.word	0xe720602b
   18860:	b29b682b 	.word	0xb29b682b
   18864:	f47f2b05 	.word	0xf47f2b05
   18868:	e70caf12 	.word	0xe70caf12
   1886c:	89312210 	.word	0x89312210
   18870:	8319835a 	.word	0x8319835a
   18874:	f00b18b1 	.word	0xf00b18b1
   18878:	f247ffac 	.word	0xf247ffac
   1887c:	9b070207 	.word	0x9b070207
   18880:	68994690 	.word	0x68994690
   18884:	31048b58 	.word	0x31048b58
   18888:	98014401 	.word	0x98014401
   1888c:	61586099 	.word	0x61586099
   18890:	2023e759 	.word	0x2023e759
   18894:	901cf8df 	.word	0x901cf8df
   18898:	2028e799 	.word	0x2028e799
   1889c:	9014f8df 	.word	0x9014f8df
   188a0:	2039e795 	.word	0x2039e795
   188a4:	900cf8df 	.word	0x900cf8df
   188a8:	2009e791 	.word	0x2009e791
   188ac:	9004f8df 	.word	0x9004f8df
   188b0:	bf00e78d 	.word	0xbf00e78d
   188b4:	20020614 	.word	0x20020614

000188b8 <ip_interface_recvfrom>:
   188b8:	4ff0e92d 	.word	0x4ff0e92d
   188bc:	2a00b085 	.word	0x2a00b085
   188c0:	8110f000 	.word	0x8110f000
   188c4:	4699468a 	.word	0x4699468a
   188c8:	46164607 	.word	0x46164607
   188cc:	fbf4f7ff 	.word	0xfbf4f7ff
   188d0:	28004604 	.word	0x28004604
   188d4:	810df000 	.word	0x810df000
   188d8:	02d96803 	.word	0x02d96803
   188dc:	f019d565 	.word	0xf019d565
   188e0:	bf180f02 	.word	0xbf180f02
   188e4:	0800f04f 	.word	0x0800f04f
   188e8:	3bfff04f 	.word	0x3bfff04f
   188ec:	6803bf08 	.word	0x6803bf08
   188f0:	0510f009 	.word	0x0510f009
   188f4:	f083bf04 	.word	0xf083bf04
   188f8:	f3c85880 	.word	0xf3c85880
   188fc:	68237800 	.word	0x68237800
   18900:	d56d03da 	.word	0xd56d03da
   18904:	69e06823 	.word	0x69e06823
   18908:	3380f423 	.word	0x3380f423
   1890c:	68036023 	.word	0x68036023
   18910:	479868db 	.word	0x479868db
   18914:	3ffff1b0 	.word	0x3ffff1b0
   18918:	f0004683 	.word	0xf0004683
   1891c:	42868081 	.word	0x42868081
   18920:	6923dd03 	.word	0x6923dd03
   18924:	f0002b01 	.word	0xf0002b01
   18928:	250080a7 	.word	0x250080a7
   1892c:	9b0f69e0 	.word	0x9b0f69e0
   18930:	681bb103 	.word	0x681bb103
   18934:	e9cd9a0e 	.word	0xe9cd9a0e
   18938:	e9cda600 	.word	0xe9cda600
   1893c:	68032302 	.word	0x68032302
   18940:	689b464a 	.word	0x689b464a
   18944:	47984669 	.word	0x47984669
   18948:	69e04683 	.word	0x69e04683
   1894c:	3ffff1bb 	.word	0x3ffff1bb
   18950:	bf186803 	.word	0xbf186803
   18954:	68db2601 	.word	0x68db2601
   18958:	2600bf0a 	.word	0x2600bf0a
   1895c:	0800f04f 	.word	0x0800f04f
   18960:	0823f04f 	.word	0x0823f04f
   18964:	30014798 	.word	0x30014798
   18968:	2d00d135 	.word	0x2d00d135
   1896c:	80b6f000 	.word	0x80b6f000
   18970:	f0002e00 	.word	0xf0002e00
   18974:	682380a6 	.word	0x682380a6
   18978:	d5060319 	.word	0xd5060319
   1897c:	b29b6823 	.word	0xb29b6823
   18980:	d0022b0d 	.word	0xd0022b0d
   18984:	2b016923 	.word	0x2b016923
   18988:	6823d025 	.word	0x6823d025
   1898c:	4f80f013 	.word	0x4f80f013
   18990:	f0406823 	.word	0xf0406823
   18994:	031a80b1 	.word	0x031a80b1
   18998:	f1b8d475 	.word	0xf1b8d475
   1899c:	f0400f00 	.word	0xf0400f00
   189a0:	4658808a 	.word	0x4658808a
   189a4:	e8bdb005 	.word	0xe8bdb005
   189a8:	68038ff0 	.word	0x68038ff0
   189ac:	2b06b29b 	.word	0x2b06b29b
   189b0:	6803d073 	.word	0x6803d073
   189b4:	2b07b29b 	.word	0x2b07b29b
   189b8:	f04fbf0c 	.word	0xf04fbf0c
   189bc:	f04f0809 	.word	0xf04f0809
   189c0:	69e00839 	.word	0x69e00839
   189c4:	68db6803 	.word	0x68db6803
   189c8:	f1b04798 	.word	0xf1b04798
   189cc:	46833fff 	.word	0x46833fff
   189d0:	f04fd0db 	.word	0xf04fd0db
   189d4:	68233bff 	.word	0x68233bff
   189d8:	3380f443 	.word	0x3380f443
   189dc:	e7dc6023 	.word	0xe7dc6023
   189e0:	0f00f1b8 	.word	0x0f00f1b8
   189e4:	8081f000 	.word	0x8081f000
   189e8:	3280f44f 	.word	0x3280f44f
   189ec:	46116a23 	.word	0x46116a23
   189f0:	bf082b00 	.word	0xbf082b00
   189f4:	33fff04f 	.word	0x33fff04f
   189f8:	f7ff4638 	.word	0xf7ff4638
   189fc:	4680faf1 	.word	0x4680faf1
   18a00:	6823b358 	.word	0x6823b358
   18a04:	031b69e0 	.word	0x031b69e0
   18a08:	6823d521 	.word	0x6823d521
   18a0c:	2b0db29b 	.word	0x2b0db29b
   18a10:	6925d01d 	.word	0x6925d01d
   18a14:	0501f1a5 	.word	0x0501f1a5
   18a18:	f585fab5 	.word	0xf585fab5
   18a1c:	e786096d 	.word	0xe786096d
   18a20:	03186823 	.word	0x03186823
   18a24:	6823d5dc 	.word	0x6823d5dc
   18a28:	2b0db29b 	.word	0x2b0db29b
   18a2c:	6923d0d8 	.word	0x6923d0d8
   18a30:	2b0169e0 	.word	0x2b0169e0
   18a34:	f04fd034 	.word	0xf04fd034
   18a38:	68230839 	.word	0x68230839
   18a3c:	041b0c1b 	.word	0x041b0c1b
   18a40:	030df043 	.word	0x030df043
   18a44:	68236023 	.word	0x68236023
   18a48:	1380f423 	.word	0x1380f423
   18a4c:	68036023 	.word	0x68036023
   18a50:	479868db 	.word	0x479868db
   18a54:	d1be3001 	.word	0xd1be3001
   18a58:	4638e797 	.word	0x4638e797
   18a5c:	fb2cf7ff 	.word	0xfb2cf7ff
   18a60:	f8d0b138 	.word	0xf8d0b138
   18a64:	f1b88004 	.word	0xf1b88004
   18a68:	d0020f00 	.word	0xd0020f00
   18a6c:	60432300 	.word	0x60432300
   18a70:	f04fe7c7 	.word	0xf04fe7c7
   18a74:	e7420801 	.word	0xe7420801
   18a78:	6823b11d 	.word	0x6823b11d
   18a7c:	d5b300db 	.word	0xd5b300db
   18a80:	69e0e753 	.word	0x69e0e753
   18a84:	6823e753 	.word	0x6823e753
   18a88:	2b0db29b 	.word	0x2b0db29b
   18a8c:	68a3d185 	.word	0x68a3d185
   18a90:	d0822b00 	.word	0xd0822b00
   18a94:	8008f8d4 	.word	0x8008f8d4
   18a98:	f04fe77f 	.word	0xf04fe77f
   18a9c:	e7900809 	.word	0xe7900809
   18aa0:	68db6803 	.word	0x68db6803
   18aa4:	30014798 	.word	0x30014798
   18aa8:	f04fd00b 	.word	0xf04fd00b
   18aac:	68230823 	.word	0x68230823
   18ab0:	3380f443 	.word	0x3380f443
   18ab4:	46406023 	.word	0x46406023
   18ab8:	fadef7f9 	.word	0xfadef7f9
   18abc:	3bfff04f 	.word	0x3bfff04f
   18ac0:	6823e76f 	.word	0x6823e76f
   18ac4:	0b00f04f 	.word	0x0b00f04f
   18ac8:	041b0c1b 	.word	0x041b0c1b
   18acc:	030df043 	.word	0x030df043
   18ad0:	68236023 	.word	0x68236023
   18ad4:	1380f423 	.word	0x1380f423
   18ad8:	e7626023 	.word	0xe7626023
   18adc:	f47f2e00 	.word	0xf47f2e00
   18ae0:	e752af4a 	.word	0xe752af4a
   18ae4:	0816f04f 	.word	0x0816f04f
   18ae8:	f04fe7e5 	.word	0xf04fe7e5
   18aec:	69e00823 	.word	0x69e00823
   18af0:	f04fe7ad 	.word	0xf04fe7ad
   18af4:	e7de0809 	.word	0xe7de0809
   18af8:	4380f023 	.word	0x4380f023
   18afc:	68236023 	.word	0x68236023
   18b00:	0869f04f 	.word	0x0869f04f
   18b04:	041b0c1b 	.word	0x041b0c1b
   18b08:	030df043 	.word	0x030df043
   18b0c:	e7d26023 	.word	0xe7d26023

00018b10 <ip_interface_connect>:
   18b10:	41f0e92d 	.word	0x41f0e92d
   18b14:	2900b082 	.word	0x2900b082
   18b18:	2a00d044 	.word	0x2a00d044
   18b1c:	4606d042 	.word	0x4606d042
   18b20:	f7ff460f 	.word	0xf7ff460f
   18b24:	4605fac9 	.word	0x4605fac9
   18b28:	f0002800 	.word	0xf0002800
   18b2c:	68038096 	.word	0x68038096
   18b30:	2b02b29b 	.word	0x2b02b29b
   18b34:	6803d004 	.word	0x6803d004
   18b38:	2b04b29b 	.word	0x2b04b29b
   18b3c:	808df040 	.word	0x808df040
   18b40:	f0116829 	.word	0xf0116829
   18b44:	f0405100 	.word	0xf0405100
   18b48:	a8028084 	.word	0xa8028084
   18b4c:	1d04f840 	.word	0x1d04f840
   18b50:	8018f8d5 	.word	0x8018f8d5
   18b54:	f966f7fa 	.word	0xf966f7fa
   18b58:	2108bb70 	.word	0x2108bb70
   18b5c:	9c010433 	.word	0x9c010433
   18b60:	42e0f443 	.word	0x42e0f443
   18b64:	0202f042 	.word	0x0202f042
   18b68:	f8c460e2 	.word	0xf8c460e2
   18b6c:	72608010 	.word	0x72608010
   18b70:	72e072a0 	.word	0x72e072a0
   18b74:	f4437221 	.word	0xf4437221
   18b78:	f04343e0 	.word	0xf04343e0
   18b7c:	60e30302 	.word	0x60e30302
   18b80:	69aa68a3 	.word	0x69aa68a3
   18b84:	61223304 	.word	0x61223304
   18b88:	68eb60a3 	.word	0x68eb60a3
   18b8c:	4293687a 	.word	0x4293687a
   18b90:	2b02d108 	.word	0x2b02d108
   18b94:	0018f104 	.word	0x0018f104
   18b98:	d03a783a 	.word	0xd03a783a
   18b9c:	d1012b0a 	.word	0xd1012b0a
   18ba0:	d00e2a24 	.word	0xd00e2a24
   18ba4:	46202416 	.word	0x46202416
   18ba8:	fa66f7f9 	.word	0xfa66f7f9
   18bac:	34fff04f 	.word	0x34fff04f
   18bb0:	b0024620 	.word	0xb0024620
   18bb4:	81f0e8bd 	.word	0x81f0e8bd
   18bb8:	2c009c01 	.word	0x2c009c01
   18bbc:	0433d04f 	.word	0x0433d04f
   18bc0:	2210e7d9 	.word	0x2210e7d9
   18bc4:	18b9893b 	.word	0x18b9893b
   18bc8:	82a382e2 	.word	0x82a382e2
   18bcc:	fe01f00b 	.word	0xfe01f00b
   18bd0:	8ae268a3 	.word	0x8ae268a3
   18bd4:	0102f247 	.word	0x0102f247
   18bd8:	60a34413 	.word	0x60a34413
   18bdc:	682b682f 	.word	0x682b682f
   18be0:	f0434620 	.word	0xf0434620
   18be4:	602b5300 	.word	0x602b5300
   18be8:	f930f7fa 	.word	0xf930f7fa
   18bec:	682bb9e0 	.word	0x682bb9e0
   18bf0:	5880f013 	.word	0x5880f013
   18bf4:	f04fd12f 	.word	0xf04fd12f
   18bf8:	f64f33ff 	.word	0xf64f33ff
   18bfc:	210572ff 	.word	0x210572ff
   18c00:	f7ff4630 	.word	0xf7ff4630
   18c04:	4604f9ed 	.word	0x4604f9ed
   18c08:	2c73b1c0 	.word	0x2c73b1c0
   18c0c:	602fd0cb 	.word	0x602fd0cb
   18c10:	2a10e7c9 	.word	0x2a10e7c9
   18c14:	2204d1c6 	.word	0x2204d1c6
   18c18:	f107893b 	.word	0xf107893b
   18c1c:	82e2010c 	.word	0x82e2010c
   18c20:	f00b82a3 	.word	0xf00b82a3
   18c24:	e7d3fdd6 	.word	0xe7d3fdd6
   18c28:	b1086820 	.word	0xb1086820
   18c2c:	f92cf7fa 	.word	0xf92cf7fa
   18c30:	f7fa4620 	.word	0xf7fa4620
   18c34:	2423f921 	.word	0x2423f921
   18c38:	e7b4602f 	.word	0xe7b4602f
   18c3c:	f7ff4630 	.word	0xf7ff4630
   18c40:	2800fa3b 	.word	0x2800fa3b
   18c44:	6844d0b4 	.word	0x6844d0b4
   18c48:	d0b12c00 	.word	0xd0b12c00
   18c4c:	8004f8c0 	.word	0x8004f8c0
   18c50:	2472e7db 	.word	0x2472e7db
   18c54:	2473e7a7 	.word	0x2473e7a7
   18c58:	2409e7a5 	.word	0x2409e7a5
   18c5c:	240ce7a3 	.word	0x240ce7a3
   18c60:	bf00e7a1 	.word	0xbf00e7a1

00018c64 <ip_interface_bind>:
   18c64:	41f0e92d 	.word	0x41f0e92d
   18c68:	b389b082 	.word	0xb389b082
   18c6c:	4607b382 	.word	0x4607b382
   18c70:	f7ff460e 	.word	0xf7ff460e
   18c74:	4605fa21 	.word	0x4605fa21
   18c78:	d07b2800 	.word	0xd07b2800
   18c7c:	b29b6803 	.word	0xb29b6803
   18c80:	d1772b02 	.word	0xd1772b02
   18c84:	a8022100 	.word	0xa8022100
   18c88:	1d04f840 	.word	0x1d04f840
   18c8c:	8018f8d5 	.word	0x8018f8d5
   18c90:	f8c8f7fa 	.word	0xf8c8f7fa
   18c94:	f247bb30 	.word	0xf247bb30
   18c98:	22080305 	.word	0x22080305
   18c9c:	ea439c01 	.word	0xea439c01
   18ca0:	60e34307 	.word	0x60e34307
   18ca4:	8010f8c4 	.word	0x8010f8c4
   18ca8:	72a07260 	.word	0x72a07260
   18cac:	722272e0 	.word	0x722272e0
   18cb0:	330468a3 	.word	0x330468a3
   18cb4:	68eb60a3 	.word	0x68eb60a3
   18cb8:	42936872 	.word	0x42936872
   18cbc:	2b02d108 	.word	0x2b02d108
   18cc0:	0018f104 	.word	0x0018f104
   18cc4:	d03c7832 	.word	0xd03c7832
   18cc8:	d1012b0a 	.word	0xd1012b0a
   18ccc:	d00e2a24 	.word	0xd00e2a24
   18cd0:	46202416 	.word	0x46202416
   18cd4:	f9d0f7f9 	.word	0xf9d0f7f9
   18cd8:	34fff04f 	.word	0x34fff04f
   18cdc:	b0024620 	.word	0xb0024620
   18ce0:	81f0e8bd 	.word	0x81f0e8bd
   18ce4:	2c009c01 	.word	0x2c009c01
   18ce8:	240cd1e2 	.word	0x240cd1e2
   18cec:	2210e7f1 	.word	0x2210e7f1
   18cf0:	18b18933 	.word	0x18b18933
   18cf4:	82a382e2 	.word	0x82a382e2
   18cf8:	fd6bf00b 	.word	0xfd6bf00b
   18cfc:	8ae268a3 	.word	0x8ae268a3
   18d00:	0105f247 	.word	0x0105f247
   18d04:	60a34413 	.word	0x60a34413
   18d08:	4620682b 	.word	0x4620682b
   18d0c:	041b0c1b 	.word	0x041b0c1b
   18d10:	0303f043 	.word	0x0303f043
   18d14:	682e602b 	.word	0x682e602b
   18d18:	f898f7fa 	.word	0xf898f7fa
   18d1c:	b9d84680 	.word	0xb9d84680
   18d20:	33fff04f 	.word	0x33fff04f
   18d24:	72fff64f 	.word	0x72fff64f
   18d28:	46382104 	.word	0x46382104
   18d2c:	f958f7ff 	.word	0xf958f7ff
   18d30:	b3084604 	.word	0xb3084604
   18d34:	0c1b682b 	.word	0x0c1b682b
   18d38:	f043041b 	.word	0xf043041b
   18d3c:	602b0302 	.word	0x602b0302
   18d40:	2a10e7c7 	.word	0x2a10e7c7
   18d44:	2204d1c4 	.word	0x2204d1c4
   18d48:	f1068933 	.word	0xf1068933
   18d4c:	82e2010c 	.word	0x82e2010c
   18d50:	f00b82a3 	.word	0xf00b82a3
   18d54:	e7d1fd3e 	.word	0xe7d1fd3e
   18d58:	b1086820 	.word	0xb1086820
   18d5c:	f894f7fa 	.word	0xf894f7fa
   18d60:	04360c36 	.word	0x04360c36
   18d64:	f0464620 	.word	0xf0464620
   18d68:	f7fa0602 	.word	0xf7fa0602
   18d6c:	2423f885 	.word	0x2423f885
   18d70:	e7ae602e 	.word	0xe7ae602e
   18d74:	e7ac2409 	.word	0xe7ac2409
   18d78:	f7ff4638 	.word	0xf7ff4638
   18d7c:	2800f99d 	.word	0x2800f99d
   18d80:	6844d0ac 	.word	0x6844d0ac
   18d84:	d0a92c00 	.word	0xd0a92c00
   18d88:	8004f8c0 	.word	0x8004f8c0
   18d8c:	bf00e7d2 	.word	0xbf00e7d2

00018d90 <ip_interface_listen>:
   18d90:	41f0e92d 	.word	0x41f0e92d
   18d94:	4606b082 	.word	0x4606b082
   18d98:	f98ef7ff 	.word	0xf98ef7ff
   18d9c:	d0672800 	.word	0xd0672800
   18da0:	46056803 	.word	0x46056803
   18da4:	2b04b29b 	.word	0x2b04b29b
   18da8:	2100d162 	.word	0x2100d162
   18dac:	46304a32 	.word	0x46304a32
   18db0:	f8def7ff 	.word	0xf8def7ff
   18db4:	28004601 	.word	0x28004601
   18db8:	a802d15c 	.word	0xa802d15c
   18dbc:	1d04f840 	.word	0x1d04f840
   18dc0:	f7fa69af 	.word	0xf7fa69af
   18dc4:	bba8f82f 	.word	0xbba8f82f
   18dc8:	0308f247 	.word	0x0308f247
   18dcc:	9c012208 	.word	0x9c012208
   18dd0:	4306ea43 	.word	0x4306ea43
   18dd4:	612760e3 	.word	0x612760e3
   18dd8:	72a07260 	.word	0x72a07260
   18ddc:	722272e0 	.word	0x722272e0
   18de0:	f24768a3 	.word	0xf24768a3
   18de4:	33040108 	.word	0x33040108
   18de8:	682b60a3 	.word	0x682b60a3
   18dec:	0c1b4620 	.word	0x0c1b4620
   18df0:	f043041b 	.word	0xf043041b
   18df4:	602b0306 	.word	0x602b0306
   18df8:	f7fa682f 	.word	0xf7fa682f
   18dfc:	4680f827 	.word	0x4680f827
   18e00:	f04fb9e8 	.word	0xf04fb9e8
   18e04:	f64f33ff 	.word	0xf64f33ff
   18e08:	210772ff 	.word	0x210772ff
   18e0c:	f7ff4630 	.word	0xf7ff4630
   18e10:	4604f8e7 	.word	0x4604f8e7
   18e14:	682bb308 	.word	0x682bb308
   18e18:	041b0c1b 	.word	0x041b0c1b
   18e1c:	0304f043 	.word	0x0304f043
   18e20:	4620602b 	.word	0x4620602b
   18e24:	f928f7f9 	.word	0xf928f7f9
   18e28:	34fff04f 	.word	0x34fff04f
   18e2c:	b0024620 	.word	0xb0024620
   18e30:	81f0e8bd 	.word	0x81f0e8bd
   18e34:	2c009c01 	.word	0x2c009c01
   18e38:	240cd1d2 	.word	0x240cd1d2
   18e3c:	6820e7f1 	.word	0x6820e7f1
   18e40:	f7fab108 	.word	0xf7fab108
   18e44:	0c3ff821 	.word	0x0c3ff821
   18e48:	4620043f 	.word	0x4620043f
   18e4c:	0704f047 	.word	0x0704f047
   18e50:	f812f7fa 	.word	0xf812f7fa
   18e54:	602f2423 	.word	0x602f2423
   18e58:	4630e7e3 	.word	0x4630e7e3
   18e5c:	f92cf7ff 	.word	0xf92cf7ff
   18e60:	d0e32800 	.word	0xd0e32800
   18e64:	2c006844 	.word	0x2c006844
   18e68:	f8c0d0e0 	.word	0xf8c0d0e0
   18e6c:	e7d28004 	.word	0xe7d28004
   18e70:	e7d62409 	.word	0xe7d62409
   18e74:	e7d42423 	.word	0xe7d42423
   18e78:	00018321 	.word	0x00018321

00018e7c <ip_interface_accept>:
   18e7c:	4ff0e92d 	.word	0x4ff0e92d
   18e80:	b0852500 	.word	0xb0852500
   18e84:	4690460f 	.word	0x4690460f
   18e88:	46069502 	.word	0x46069502
   18e8c:	f914f7ff 	.word	0xf914f7ff
   18e90:	28004604 	.word	0x28004604
   18e94:	811cf000 	.word	0x811cf000
   18e98:	b29b6803 	.word	0xb29b6803
   18e9c:	d10a2b07 	.word	0xd10a2b07
   18ea0:	68056803 	.word	0x68056803
   18ea4:	d41600db 	.word	0xd41600db
   18ea8:	3580f415 	.word	0x3580f415
   18eac:	6805d019 	.word	0x6805d019
   18eb0:	3580f415 	.word	0x3580f415
   18eb4:	f04fd124 	.word	0xf04fd124
   18eb8:	9b020909 	.word	0x9b020909
   18ebc:	4628b113 	.word	0x4628b113
   18ec0:	f840f7ff 	.word	0xf840f7ff
   18ec4:	f04f4648 	.word	0xf04f4648
   18ec8:	f7f939ff 	.word	0xf7f939ff
   18ecc:	4648f8d5 	.word	0x4648f8d5
   18ed0:	e8bdb005 	.word	0xe8bdb005
   18ed4:	f4158ff0 	.word	0xf4158ff0
   18ed8:	d16d3580 	.word	0xd16d3580
   18edc:	0923f04f 	.word	0x0923f04f
   18ee0:	f44fe7eb 	.word	0xf44fe7eb
   18ee4:	f04f3280 	.word	0xf04f3280
   18ee8:	461133ff 	.word	0x461133ff
   18eec:	f7ff4630 	.word	0xf7ff4630
   18ef0:	4681f877 	.word	0x4681f877
   18ef4:	d07e2800 	.word	0xd07e2800
   18ef8:	f4156825 	.word	0xf4156825
   18efc:	d0dc3580 	.word	0xd0dc3580
   18f00:	30fff04f 	.word	0x30fff04f
   18f04:	e9cd2300 	.word	0xe9cd2300
   18f08:	4a750300 	.word	0x4a750300
   18f0c:	a8026921 	.word	0xa8026921
   18f10:	ffc2f7fe 	.word	0xffc2f7fe
   18f14:	46059b02 	.word	0x46059b02
   18f18:	f0002b00 	.word	0xf0002b00
   18f1c:	210080dd 	.word	0x210080dd
   18f20:	a8046962 	.word	0xa8046962
   18f24:	68e2615a 	.word	0x68e2615a
   18f28:	1d04f840 	.word	0x1d04f840
   18f2c:	692260da 	.word	0x692260da
   18f30:	f8d4611a 	.word	0xf8d4611a
   18f34:	f7f99018 	.word	0xf7f99018
   18f38:	2800ff75 	.word	0x2800ff75
   18f3c:	f247d143 	.word	0xf247d143
   18f40:	2108030c 	.word	0x2108030c
   18f44:	b00cf8dd 	.word	0xb00cf8dd
   18f48:	4306ea43 	.word	0x4306ea43
   18f4c:	300cf8cb 	.word	0x300cf8cb
   18f50:	9010f8cb 	.word	0x9010f8cb
   18f54:	0009f88b 	.word	0x0009f88b
   18f58:	000af88b 	.word	0x000af88b
   18f5c:	000bf88b 	.word	0x000bf88b
   18f60:	1008f88b 	.word	0x1008f88b
   18f64:	f2476823 	.word	0xf2476823
   18f68:	0c1b010c 	.word	0x0c1b010c
   18f6c:	f043041b 	.word	0xf043041b
   18f70:	60230308 	.word	0x60230308
   18f74:	f8d44658 	.word	0xf8d44658
   18f78:	f7f99000 	.word	0xf7f99000
   18f7c:	4682ff67 	.word	0x4682ff67
   18f80:	6822bb48 	.word	0x6822bb48
   18f84:	f04f9900 	.word	0xf04f9900
   18f88:	400a33ff 	.word	0x400a33ff
   18f8c:	21096022 	.word	0x21096022
   18f90:	72fff64f 	.word	0x72fff64f
   18f94:	f7ff4630 	.word	0xf7ff4630
   18f98:	4681f823 	.word	0x4681f823
   18f9c:	f0002800 	.word	0xf0002800
   18fa0:	68238085 	.word	0x68238085
   18fa4:	431a9a01 	.word	0x431a9a01
   18fa8:	68236022 	.word	0x68236022
   18fac:	041b0c1b 	.word	0x041b0c1b
   18fb0:	0307f043 	.word	0x0307f043
   18fb4:	e7806023 	.word	0xe7806023
   18fb8:	5280f06f 	.word	0x5280f06f
   18fbc:	5380f04f 	.word	0x5380f04f
   18fc0:	2300e9cd 	.word	0x2300e9cd
   18fc4:	f8dde7a1 	.word	0xf8dde7a1
   18fc8:	f04fb00c 	.word	0xf04fb00c
   18fcc:	f1bb090c 	.word	0xf1bb090c
   18fd0:	d1c70f00 	.word	0xd1c70f00
   18fd4:	f8dbe771 	.word	0xf8dbe771
   18fd8:	b1080000 	.word	0xb1080000
   18fdc:	ff54f7f9 	.word	0xff54f7f9
   18fe0:	4919ea4f 	.word	0x4919ea4f
   18fe4:	ea4f4658 	.word	0xea4f4658
   18fe8:	f7f94909 	.word	0xf7f94909
   18fec:	f049ff45 	.word	0xf049ff45
   18ff0:	60230307 	.word	0x60230307
   18ff4:	4630e772 	.word	0x4630e772
   18ff8:	f85ef7ff 	.word	0xf85ef7ff
   18ffc:	f8d0b130 	.word	0xf8d0b130
   19000:	f1b99004 	.word	0xf1b99004
   19004:	d0010f00 	.word	0xd0010f00
   19008:	e7756045 	.word	0xe7756045
   1900c:	03d96823 	.word	0x03d96823
   19010:	af76f53f 	.word	0xaf76f53f
   19014:	99024d33 	.word	0x99024d33
   19018:	3026f855 	.word	0x3026f855
   1901c:	618b699b 	.word	0x618b699b
   19020:	68cbb147 	.word	0x68cbb147
   19024:	d0242b0a 	.word	0xd0242b0a
   19028:	d1032b02 	.word	0xd1032b02
   1902c:	2000f8d8 	.word	0x2000f8d8
   19030:	d0322a10 	.word	0xd0322a10
   19034:	482c680a 	.word	0x482c680a
   19038:	f0424002 	.word	0xf0424002
   1903c:	600a0205 	.word	0x600a0205
   19040:	68119a02 	.word	0x68119a02
   19044:	3100f441 	.word	0x3100f441
   19048:	68116011 	.word	0x68116011
   1904c:	1180f441 	.word	0x1180f441
   19050:	68236011 	.word	0x68236011
   19054:	f0434003 	.word	0xf0434003
   19058:	60230307 	.word	0x60230307
   1905c:	0026f855 	.word	0x0026f855
   19060:	ff0af7f9 	.word	0xff0af7f9
   19064:	46482300 	.word	0x46482300
   19068:	3026f845 	.word	0x3026f845
   1906c:	e8bdb005 	.word	0xe8bdb005
   19070:	f8d88ff0 	.word	0xf8d88ff0
   19074:	2a242000 	.word	0x2a242000
   19078:	703ad1dc 	.word	0x703ad1dc
   1907c:	607b2210 	.word	0x607b2210
   19080:	3026f855 	.word	0x3026f855
   19084:	0010f107 	.word	0x0010f107
   19088:	813b8b9b 	.word	0x813b8b9b
   1908c:	1026f855 	.word	0x1026f855
   19090:	f00b3120 	.word	0xf00b3120
   19094:	9902fb9e 	.word	0x9902fb9e
   19098:	703ae7cc 	.word	0x703ae7cc
   1909c:	f855607b 	.word	0xf855607b
   190a0:	f1073026 	.word	0xf1073026
   190a4:	8b9b000c 	.word	0x8b9b000c
   190a8:	e7ee2204 	.word	0xe7ee2204
   190ac:	f7ff4630 	.word	0xf7ff4630
   190b0:	b138f803 	.word	0xb138f803
   190b4:	9004f8d0 	.word	0x9004f8d0
   190b8:	0f00f1b9 	.word	0x0f00f1b9
   190bc:	f8c0d002 	.word	0xf8c0d002
   190c0:	e76ea004 	.word	0xe76ea004
   190c4:	9a016823 	.word	0x9a016823
   190c8:	431346a9 	.word	0x431346a9
   190cc:	e7a16023 	.word	0xe7a16023
   190d0:	f04f4605 	.word	0xf04f4605
   190d4:	e6f00909 	.word	0xe6f00909
   190d8:	090cf04f 	.word	0x090cf04f
   190dc:	bf00e6f2 	.word	0xbf00e6f2
   190e0:	00018321 	.word	0x00018321
   190e4:	20020614 	.word	0x20020614
   190e8:	ffff0000 	.word	0xffff0000

000190ec <ip_interface_setopt>:
   190ec:	41f0e92d 	.word	0x41f0e92d
   190f0:	b0842901 	.word	0xb0842901
   190f4:	809cf040 	.word	0x809cf040
   190f8:	4690460e 	.word	0x4690460e
   190fc:	4607461d 	.word	0x4607461d
   19100:	ffdaf7fe 	.word	0xffdaf7fe
   19104:	28004604 	.word	0x28004604
   19108:	80a5f000 	.word	0x80a5f000
   1910c:	0f19f1b8 	.word	0x0f19f1b8
   19110:	2d00d16e 	.word	0x2d00d16e
   19114:	8092f000 	.word	0x8092f000
   19118:	f00b4628 	.word	0xf00b4628
   1911c:	9b0afb28 	.word	0x9b0afb28
   19120:	f0404298 	.word	0xf0404298
   19124:	6823808b 	.word	0x6823808b
   19128:	2b02b29b 	.word	0x2b02b29b
   1912c:	4629d173 	.word	0x4629d173
   19130:	f00768e0 	.word	0xf00768e0
   19134:	9002feb9 	.word	0x9002feb9
   19138:	bf083001 	.word	0xbf083001
   1913c:	d04e2516 	.word	0xd04e2516
   19140:	025b6823 	.word	0x025b6823
   19144:	6823d44a 	.word	0x6823d44a
   19148:	0300f413 	.word	0x0300f413
   1914c:	6826d146 	.word	0x6826d146
   19150:	a8046822 	.word	0xa8046822
   19154:	0280f442 	.word	0x0280f442
   19158:	21046022 	.word	0x21046022
   1915c:	3d04f840 	.word	0x3d04f840
   19160:	8018f8d4 	.word	0x8018f8d4
   19164:	fe5ef7f9 	.word	0xfe5ef7f9
   19168:	d14e2800 	.word	0xd14e2800
   1916c:	0203f247 	.word	0x0203f247
   19170:	21082300 	.word	0x21082300
   19174:	ea429d03 	.word	0xea429d03
   19178:	60ea4207 	.word	0x60ea4207
   1917c:	8010f8c5 	.word	0x8010f8c5
   19180:	726b7229 	.word	0x726b7229
   19184:	72eb72ab 	.word	0x72eb72ab
   19188:	0c08f04f 	.word	0x0c08f04f
   1918c:	20102300 	.word	0x20102300
   19190:	68aa2130 	.word	0x68aa2130
   19194:	4462756b 	.word	0x4462756b
   19198:	75ab60aa 	.word	0x75ab60aa
   1919c:	76ab75eb 	.word	0x76ab75eb
   191a0:	f88576eb 	.word	0xf88576eb
   191a4:	7628c014 	.word	0x7628c014
   191a8:	22047669 	.word	0x22047669
   191ac:	010ceb0d 	.word	0x010ceb0d
   191b0:	f00b6828 	.word	0xf00b6828
   191b4:	f247fb0e 	.word	0xf247fb0e
   191b8:	46280103 	.word	0x46280103
   191bc:	fe46f7f9 	.word	0xfe46f7f9
   191c0:	bb504680 	.word	0xbb504680
   191c4:	0200f44f 	.word	0x0200f44f
   191c8:	33fff04f 	.word	0x33fff04f
   191cc:	46384611 	.word	0x46384611
   191d0:	ff06f7fe 	.word	0xff06f7fe
   191d4:	b3984605 	.word	0xb3984605
   191d8:	e0006026 	.word	0xe0006026
   191dc:	46282523 	.word	0x46282523
   191e0:	ff4af7f8 	.word	0xff4af7f8
   191e4:	35fff04f 	.word	0x35fff04f
   191e8:	b0044628 	.word	0xb0044628
   191ec:	81f0e8bd 	.word	0x81f0e8bd
   191f0:	46429b0a 	.word	0x46429b0a
   191f4:	46319300 	.word	0x46319300
   191f8:	4638462b 	.word	0x4638462b
   191fc:	ff84f7fe 	.word	0xff84f7fe
   19200:	46284605 	.word	0x46284605
   19204:	e8bdb004 	.word	0xe8bdb004
   19208:	9d0381f0 	.word	0x9d0381f0
   1920c:	d1bb2d00 	.word	0xd1bb2d00
   19210:	250c6026 	.word	0x250c6026
   19214:	2509e7e3 	.word	0x2509e7e3
   19218:	6828e7e1 	.word	0x6828e7e1
   1921c:	f7f9b108 	.word	0xf7f9b108
   19220:	4628fe33 	.word	0x4628fe33
   19224:	fe28f7f9 	.word	0xfe28f7f9
   19228:	60262523 	.word	0x60262523
   1922c:	e7d66026 	.word	0xe7d66026
   19230:	f7f8202a 	.word	0xf7f8202a
   19234:	f04fff21 	.word	0xf04fff21
   19238:	e7d535ff 	.word	0xe7d535ff
   1923c:	e7ce250e 	.word	0xe7ce250e
   19240:	f7fe4638 	.word	0xf7fe4638
   19244:	b120ff39 	.word	0xb120ff39
   19248:	b1156845 	.word	0xb1156845
   1924c:	8004f8c0 	.word	0x8004f8c0
   19250:	6026e7c2 	.word	0x6026e7c2
   19254:	2009e7c8 	.word	0x2009e7c8
   19258:	ff0ef7f8 	.word	0xff0ef7f8
   1925c:	35fff04f 	.word	0x35fff04f
   19260:	bf00e7c2 	.word	0xbf00e7c2

00019264 <ip_interface_getopt>:
   19264:	bf86f7fe 	.word	0xbf86f7fe

00019268 <ip_interface_getaddrinfo>:
   19268:	4ff0e92d 	.word	0x4ff0e92d
   1926c:	0c00f04f 	.word	0x0c00f04f
   19270:	4e722401 	.word	0x4e722401
   19274:	a1d0f8df 	.word	0xa1d0f8df
   19278:	91d0f8df 	.word	0x91d0f8df
   1927c:	4607b085 	.word	0x4607b085
   19280:	93014615 	.word	0x93014615
   19284:	c000f8a6 	.word	0xc000f8a6
   19288:	4000f8ca 	.word	0x4000f8ca
   1928c:	4000f8c9 	.word	0x4000f8c9
   19290:	4608b171 	.word	0x4608b171
   19294:	4661220a 	.word	0x4661220a
   19298:	f92ff00b 	.word	0xf92ff00b
   1929c:	73fef64f 	.word	0x73fef64f
   192a0:	429a1e42 	.word	0x429a1e42
   192a4:	8083f200 	.word	0x8083f200
   192a8:	ea430203 	.word	0xea430203
   192ac:	80302020 	.word	0x80302020
   192b0:	819cf8df 	.word	0x819cf8df
   192b4:	3000f8d8 	.word	0x3000f8d8
   192b8:	d1742b00 	.word	0xd1742b00
   192bc:	60134a60 	.word	0x60134a60
   192c0:	60134a60 	.word	0x60134a60
   192c4:	d0622f00 	.word	0xd0622f00
   192c8:	f00b4638 	.word	0xf00b4638
   192cc:	4683fa50 	.word	0x4683fa50
   192d0:	69eab125 	.word	0x69eab125
   192d4:	6851b112 	.word	0x6851b112
   192d8:	d06c2966 	.word	0xd06c2966
   192dc:	32fff04f 	.word	0x32fff04f
   192e0:	ae042100 	.word	0xae042100
   192e4:	1d04f846 	.word	0x1d04f846
   192e8:	46594630 	.word	0x46594630
   192ec:	f7f99200 	.word	0xf7f99200
   192f0:	9a00fd99 	.word	0x9a00fd99
   192f4:	d14c2800 	.word	0xd14c2800
   192f8:	010df247 	.word	0x010df247
   192fc:	0c08f04f 	.word	0x0c08f04f
   19300:	ea419c03 	.word	0xea419c03
   19304:	60e14102 	.word	0x60e14102
   19308:	72606122 	.word	0x72606122
   1930c:	72e072a0 	.word	0x72e072a0
   19310:	c008f884 	.word	0xc008f884
   19314:	d0762d00 	.word	0xd0762d00
   19318:	f022686a 	.word	0xf022686a
   1931c:	29020108 	.word	0x29020108
   19320:	2a05d05c 	.word	0x2a05d05c
   19324:	68a9d178 	.word	0x68a9d178
   19328:	f8c92902 	.word	0xf8c92902
   1932c:	d0611000 	.word	0xd0611000
   19330:	68ea61a2 	.word	0x68ea61a2
   19334:	68aa6222 	.word	0x68aa6222
   19338:	682a61e2 	.word	0x682a61e2
   1933c:	68a26162 	.word	0x68a26162
   19340:	60a23210 	.word	0x60a23210
   19344:	6820b12f 	.word	0x6820b12f
   19348:	465ab118 	.word	0x465ab118
   1934c:	f00b4639 	.word	0xf00b4639
   19350:	2301fa40 	.word	0x2301fa40
   19354:	010df247 	.word	0x010df247
   19358:	f8c84620 	.word	0xf8c84620
   1935c:	f7f93000 	.word	0xf7f93000
   19360:	2800fd75 	.word	0x2800fd75
   19364:	f04fd156 	.word	0xf04fd156
   19368:	930333ff 	.word	0x930333ff
   1936c:	46204631 	.word	0x46204631
   19370:	fdeef7f8 	.word	0xfdeef7f8
   19374:	3000f8d8 	.word	0x3000f8d8
   19378:	d0f72b01 	.word	0xd0f72b01
   1937c:	68184b31 	.word	0x68184b31
   19380:	d13b2800 	.word	0xd13b2800
   19384:	9a014b2e 	.word	0x9a014b2e
   19388:	6013681b 	.word	0x6013681b
   1938c:	46bbe00c 	.word	0x46bbe00c
   19390:	9c03e79e 	.word	0x9c03e79e
   19394:	d1bd2c00 	.word	0xd1bd2c00
   19398:	2300200c 	.word	0x2300200c
   1939c:	3000f8c8 	.word	0x3000f8c8
   193a0:	e8bdb005 	.word	0xe8bdb005
   193a4:	20738ff0 	.word	0x20738ff0
   193a8:	e8bdb005 	.word	0xe8bdb005
   193ac:	20168ff0 	.word	0x20168ff0
   193b0:	e8bdb005 	.word	0xe8bdb005
   193b4:	68918ff0 	.word	0x68918ff0
   193b8:	7f00f5b1 	.word	0x7f00f5b1
   193bc:	f240d18e 	.word	0xf240d18e
   193c0:	68d02102 	.word	0x68d02102
   193c4:	d1894288 	.word	0xd1894288
   193c8:	29006991 	.word	0x29006991
   193cc:	6868d086 	.word	0x6868d086
   193d0:	fd6af007 	.word	0xfd6af007
   193d4:	d0811c43 	.word	0xd0811c43
   193d8:	e7814602 	.word	0xe7814602
   193dc:	290268a9 	.word	0x290268a9
   193e0:	1000f8c9 	.word	0x1000f8c9
   193e4:	2a05d006 	.word	0x2a05d006
   193e8:	2a0ad0a2 	.word	0x2a0ad0a2
   193ec:	2201bf14 	.word	0x2201bf14
   193f0:	e79d2202 	.word	0xe79d2202
   193f4:	f8ca2102 	.word	0xf8ca2102
   193f8:	e7f41000 	.word	0xe7f41000
   193fc:	68184b11 	.word	0x68184b11
   19400:	d0d12800 	.word	0xd0d12800
   19404:	4629e7c9 	.word	0x4629e7c9
   19408:	f1042210 	.word	0xf1042210
   1940c:	f00b0014 	.word	0xf00b0014
   19410:	e794fa0a 	.word	0xe794fa0a
   19414:	e7c02023 	.word	0xe7c02023
   19418:	f7f8202f 	.word	0xf7f8202f
   1941c:	68a2fe2d 	.word	0x68a2fe2d
   19420:	60a23210 	.word	0x60a23210
   19424:	f04fb917 	.word	0xf04fb917
   19428:	e7b630ff 	.word	0xe7b630ff
   1942c:	28006820 	.word	0x28006820
   19430:	465ad0f9 	.word	0x465ad0f9
   19434:	f00b4639 	.word	0xf00b4639
   19438:	e7f4f9cc 	.word	0xe7f4f9cc
   1943c:	20025e1a 	.word	0x20025e1a
   19440:	2002060c 	.word	0x2002060c
   19444:	20020604 	.word	0x20020604
   19448:	200205fc 	.word	0x200205fc
   1944c:	20020600 	.word	0x20020600
   19450:	20020608 	.word	0x20020608

00019454 <ip_interface_freeaddrinfo>:
   19454:	4c0bb538 	.word	0x4c0bb538
   19458:	2b026823 	.word	0x2b026823
   1945c:	bd38d000 	.word	0xbd38d000
   19460:	4605b130 	.word	0x4605b130
   19464:	f0066940 	.word	0xf0066940
   19468:	4628f85b 	.word	0x4628f85b
   1946c:	f858f006 	.word	0xf858f006
   19470:	4a052300 	.word	0x4a052300
   19474:	60234905 	.word	0x60234905
   19478:	68086013 	.word	0x68086013
   1947c:	4038e8bd 	.word	0x4038e8bd
   19480:	bd02f7f9 	.word	0xbd02f7f9
   19484:	20020608 	.word	0x20020608
   19488:	20020604 	.word	0x20020604
   1948c:	20020610 	.word	0x20020610

00019490 <rpc_ip_event_handler>:
   19490:	4ff0e92d 	.word	0x4ff0e92d
   19494:	4310f401 	.word	0x4310f401
   19498:	4f10f5b3 	.word	0x4f10f5b3
   1949c:	b0894605 	.word	0xb0894605
   194a0:	68c0460e 	.word	0x68c0460e
   194a4:	0c04d05e 	.word	0x0c04d05e
   194a8:	f7fe4620 	.word	0xf7fe4620
   194ac:	f248fe05 	.word	0xf248fe05
   194b0:	429e030d 	.word	0x429e030d
   194b4:	46a04607 	.word	0x46a04607
   194b8:	2f00d041 	.word	0x2f00d041
   194bc:	4640d04e 	.word	0x4640d04e
   194c0:	462a4633 	.word	0x462a4633
   194c4:	f7fc4639 	.word	0xf7fc4639
   194c8:	2800fbff 	.word	0x2800fbff
   194cc:	f248d042 	.word	0xf248d042
   194d0:	429e0307 	.word	0x429e0307
   194d4:	f248d961 	.word	0xf248d961
   194d8:	429e030c 	.word	0x429e030c
   194dc:	816bf000 	.word	0x816bf000
   194e0:	8106f240 	.word	0x8106f240
   194e4:	0302f249 	.word	0x0302f249
   194e8:	f000429e 	.word	0xf000429e
   194ec:	f249808c 	.word	0xf249808c
   194f0:	429e0303 	.word	0x429e0303
   194f4:	8180f000 	.word	0x8180f000
   194f8:	0301f249 	.word	0x0301f249
   194fc:	d12d429e 	.word	0xd12d429e
   19500:	f414683c 	.word	0xf414683c
   19504:	f0001480 	.word	0xf0001480
   19508:	68ab81c3 	.word	0x68ab81c3
   1950c:	f2002b04 	.word	0xf2002b04
   19510:	240081eb 	.word	0x240081eb
   19514:	68294626 	.word	0x68294626
   19518:	e9cd686a 	.word	0xe9cd686a
   1951c:	e9cd6406 	.word	0xe9cd6406
   19520:	69f81204 	.word	0x69f81204
   19524:	6803a904 	.word	0x6803a904
   19528:	4798685b 	.word	0x4798685b
   1952c:	f0003001 	.word	0xf0003001
   19530:	683b81cc 	.word	0x683b81cc
   19534:	f4432000 	.word	0xf4432000
   19538:	603b3380 	.word	0x603b3380
   1953c:	f8dfe00b 	.word	0xf8dfe00b
   19540:	682f9344 	.word	0x682f9344
   19544:	3000f8d9 	.word	0x3000f8d9
   19548:	d0152b01 	.word	0xd0152b01
   1954c:	4638b117 	.word	0x4638b117
   19550:	fc9af7f9 	.word	0xfc9af7f9
   19554:	b0092000 	.word	0xb0092000
   19558:	8ff0e8bd 	.word	0x8ff0e8bd
   1955c:	28006828 	.word	0x28006828
   19560:	e7f7d1f6 	.word	0xe7f7d1f6
   19564:	fd5ef7fe 	.word	0xfd5ef7fe
   19568:	f7fe4680 	.word	0xf7fe4680
   1956c:	4607fda5 	.word	0x4607fda5
   19570:	2f004644 	.word	0x2f004644
   19574:	e7f1d1a3 	.word	0xe7f1d1a3
   19578:	2b00696b 	.word	0x2b00696b
   1957c:	2b10d048 	.word	0x2b10d048
   19580:	4ababf96 	.word	0x4ababf96
   19584:	f852212d 	.word	0xf852212d
   19588:	23021023 	.word	0x23021023
   1958c:	60114ab8 	.word	0x60114ab8
   19590:	3000f8c9 	.word	0x3000f8c9
   19594:	d1da2f00 	.word	0xd1da2f00
   19598:	f248e7dc 	.word	0xf248e7dc
   1959c:	429e0306 	.word	0x429e0306
   195a0:	80e6f080 	.word	0x80e6f080
   195a4:	0302f248 	.word	0x0302f248
   195a8:	f000429e 	.word	0xf000429e
   195ac:	d91880c8 	.word	0xd91880c8
   195b0:	0303f248 	.word	0x0303f248
   195b4:	f000429e 	.word	0xf000429e
   195b8:	f2488112 	.word	0xf2488112
   195bc:	429e0305 	.word	0x429e0305
   195c0:	683bd1cc 	.word	0x683bd1cc
   195c4:	2b03b29b 	.word	0x2b03b29b
   195c8:	696bd1c4 	.word	0x696bd1c4
   195cc:	f0002b00 	.word	0xf0002b00
   195d0:	2b10817e 	.word	0x2b10817e
   195d4:	813bf200 	.word	0x813bf200
   195d8:	f8524aa4 	.word	0xf8524aa4
   195dc:	607b3023 	.word	0x607b3023
   195e0:	f248e7b8 	.word	0xf248e7b8
   195e4:	429e0301 	.word	0x429e0301
   195e8:	683bd1b8 	.word	0x683bd1b8
   195ec:	d1b12b01 	.word	0xd1b12b01
   195f0:	28006968 	.word	0x28006968
   195f4:	8173f000 	.word	0x8173f000
   195f8:	f2002810 	.word	0xf2002810
   195fc:	4b9b8128 	.word	0x4b9b8128
   19600:	3020f853 	.word	0x3020f853
   19604:	683be7eb 	.word	0x683be7eb
   19608:	2b07b29b 	.word	0x2b07b29b
   1960c:	e790d1a2 	.word	0xe790d1a2
   19610:	601f4b98 	.word	0x601f4b98
   19614:	016369ac 	.word	0x016369ac
   19618:	93034618 	.word	0x93034618
   1961c:	ff62f005 	.word	0xff62f005
   19620:	28009002 	.word	0x28009002
   19624:	8103f000 	.word	0x8103f000
   19628:	192800e5 	.word	0x192800e5
   1962c:	f0050080 	.word	0xf0050080
   19630:	2800ff59 	.word	0x2800ff59
   19634:	810df000 	.word	0x810df000
   19638:	d0782c00 	.word	0xd0782c00
   1963c:	0210f105 	.word	0x0210f105
   19640:	93011883 	.word	0x93011883
   19644:	24049b02 	.word	0x24049b02
   19648:	a23cf8df 	.word	0xa23cf8df
   1964c:	b23cf8df 	.word	0xb23cf8df
   19650:	0810f100 	.word	0x0810f100
   19654:	0620f103 	.word	0x0620f103
   19658:	220ae01d 	.word	0x220ae01d
   1965c:	2c0cf848 	.word	0x2c0cf848
   19660:	0224f04f 	.word	0x0224f04f
   19664:	f8084640 	.word	0xf8084640
   19668:	f8282c10 	.word	0xf8282c10
   1966c:	f8563c08 	.word	0xf8563c08
   19670:	f00b2c10 	.word	0xf00b2c10
   19674:	f856f8ae 	.word	0xf856f8ae
   19678:	f1083c10 	.word	0xf1083c10
   1967c:	441c0808 	.word	0x441c0808
   19680:	f846193b 	.word	0xf846193b
   19684:	9b013c08 	.word	0x9b013c08
   19688:	6c04f846 	.word	0x6c04f846
   1968c:	442c4598 	.word	0x442c4598
   19690:	0620f106 	.word	0x0620f106
   19694:	593bd045 	.word	0x593bd045
   19698:	f846193a 	.word	0xf846193a
   1969c:	68533c20 	.word	0x68533c20
   196a0:	1000f8da 	.word	0x1000f8da
   196a4:	bf142b02 	.word	0xbf142b02
   196a8:	200a2002 	.word	0x200a2002
   196ac:	3000f8db 	.word	0x3000f8db
   196b0:	0107e946 	.word	0x0107e946
   196b4:	3c14f846 	.word	0x3c14f846
   196b8:	f1a88a10 	.word	0xf1a88a10
   196bc:	f8460310 	.word	0xf8460310
   196c0:	8a550c10 	.word	0x8a550c10
   196c4:	3c0cf846 	.word	0x3c0cf846
   196c8:	34144b6b 	.word	0x34144b6b
   196cc:	eb072804 	.word	0xeb072804
   196d0:	881b0104 	.word	0x881b0104
   196d4:	2210d1c1 	.word	0x2210d1c1
   196d8:	f8282002 	.word	0xf8282002
   196dc:	f8483c08 	.word	0xf8483c08
   196e0:	f8080c0c 	.word	0xf8080c0c
   196e4:	f8562c10 	.word	0xf8562c10
   196e8:	f1a82c10 	.word	0xf1a82c10
   196ec:	e7c00004 	.word	0xe7c00004
   196f0:	0308f248 	.word	0x0308f248
   196f4:	d04e429e 	.word	0xd04e429e
   196f8:	0309f248 	.word	0x0309f248
   196fc:	f47f429e 	.word	0xf47f429e
   19700:	683baf2d 	.word	0x683baf2d
   19704:	2b0db29b 	.word	0x2b0db29b
   19708:	af24f47f 	.word	0xaf24f47f
   1970c:	28006968 	.word	0x28006968
   19710:	af72f47f 	.word	0xaf72f47f
   19714:	0c1b683b 	.word	0x0c1b683b
   19718:	f043041b 	.word	0xf043041b
   1971c:	603b030e 	.word	0x603b030e
   19720:	2200e719 	.word	0x2200e719
   19724:	1302e9dd 	.word	0x1302e9dd
   19728:	f843440b 	.word	0xf843440b
   1972c:	22022c04 	.word	0x22022c04
   19730:	f8c94b52 	.word	0xf8c94b52
   19734:	9a022000 	.word	0x9a022000
   19738:	601a2000 	.word	0x601a2000
   1973c:	683be70b 	.word	0x683be70b
   19740:	f57f0099 	.word	0xf57f0099
   19744:	683baf07 	.word	0x683baf07
   19748:	5300f023 	.word	0x5300f023
   1974c:	6968603b 	.word	0x6968603b
   19750:	f0002800 	.word	0xf0002800
   19754:	281080a2 	.word	0x281080a2
   19758:	232dbf8e 	.word	0x232dbf8e
   1975c:	f8534b43 	.word	0xf8534b43
   19760:	20003020 	.word	0x20003020
   19764:	683b607b 	.word	0x683b607b
   19768:	2380f443 	.word	0x2380f443
   1976c:	e6f2603b 	.word	0xe6f2603b
   19770:	029a683b 	.word	0x029a683b
   19774:	aeeef57f 	.word	0xaeeef57f
   19778:	2b00696b 	.word	0x2b00696b
   1977c:	809cf000 	.word	0x809cf000
   19780:	f47f2b6b 	.word	0xf47f2b6b
   19784:	693baf26 	.word	0x693baf26
   19788:	f0002b01 	.word	0xf0002b01
   1978c:	230c80b1 	.word	0x230c80b1
   19790:	607b2000 	.word	0x607b2000
   19794:	683be6df 	.word	0x683be6df
   19798:	2b06b29b 	.word	0x2b06b29b
   1979c:	aedaf47f 	.word	0xaedaf47f
   197a0:	28006968 	.word	0x28006968
   197a4:	af28f47f 	.word	0xaf28f47f
   197a8:	0c1b683b 	.word	0x0c1b683b
   197ac:	f043041b 	.word	0xf043041b
   197b0:	603b0307 	.word	0x603b0307
   197b4:	683be6cf 	.word	0x683be6cf
   197b8:	2b08b29b 	.word	0x2b08b29b
   197bc:	aecaf47f 	.word	0xaecaf47f
   197c0:	2b00696b 	.word	0x2b00696b
   197c4:	af05f47f 	.word	0xaf05f47f
   197c8:	20014b2d 	.word	0x20014b2d
   197cc:	5024f843 	.word	0x5024f843
   197d0:	0c1b683b 	.word	0x0c1b683b
   197d4:	f043041b 	.word	0xf043041b
   197d8:	603b0309 	.word	0x603b0309
   197dc:	683be6bb 	.word	0x683be6bb
   197e0:	f57f025b 	.word	0xf57f025b
   197e4:	6968aeb7 	.word	0x6968aeb7
   197e8:	f47f2800 	.word	0xf47f2800
   197ec:	683baf05 	.word	0x683baf05
   197f0:	0300f443 	.word	0x0300f443
   197f4:	e6ae603b 	.word	0xe6ae603b
   197f8:	f443683b 	.word	0xf443683b
   197fc:	603b2300 	.word	0x603b2300
   19800:	f423683b 	.word	0xf423683b
   19804:	603b1300 	.word	0x603b1300
   19808:	f423683b 	.word	0xf423683b
   1980c:	603b3300 	.word	0x603b3300
   19810:	2b6c692b 	.word	0x2b6c692b
   19814:	2b10d021 	.word	0x2b10d021
   19818:	232dbf8c 	.word	0x232dbf8c
   1981c:	f04f4a13 	.word	0xf04f4a13
   19820:	bf980000 	.word	0xbf980000
   19824:	3023f852 	.word	0x3023f852
   19828:	60bb607b 	.word	0x60bb607b
   1982c:	f005e693 	.word	0xf005e693
   19830:	200cfe77 	.word	0x200cfe77
   19834:	490e2302 	.word	0x490e2302
   19838:	60084a10 	.word	0x60084a10
   1983c:	9902682f 	.word	0x9902682f
   19840:	f8c96011 	.word	0xf8c96011
   19844:	2f003000 	.word	0x2f003000
   19848:	ae81f47f 	.word	0xae81f47f
   1984c:	232de682 	.word	0x232de682
   19850:	220ce6c5 	.word	0x220ce6c5
   19854:	601a4b06 	.word	0x601a4b06
   19858:	2239e769 	.word	0x2239e769
   1985c:	2000683b 	.word	0x2000683b
   19860:	4380f043 	.word	0x4380f043
   19864:	607a603b 	.word	0x607a603b
   19868:	e67460ba 	.word	0xe67460ba
   1986c:	00026a14 	.word	0x00026a14
   19870:	20020604 	.word	0x20020604
   19874:	20020610 	.word	0x20020610
   19878:	20025e1a 	.word	0x20025e1a
   1987c:	2002060c 	.word	0x2002060c
   19880:	20020614 	.word	0x20020614
   19884:	20020608 	.word	0x20020608
   19888:	20020600 	.word	0x20020600
   1988c:	200205fc 	.word	0x200205fc
   19890:	f7f96828 	.word	0xf7f96828
   19894:	4620faf9 	.word	0x4620faf9
   19898:	683be65d 	.word	0x683be65d
   1989c:	3300f443 	.word	0x3300f443
   198a0:	683b603b 	.word	0x683b603b
   198a4:	1380f443 	.word	0x1380f443
   198a8:	683b603b 	.word	0x683b603b
   198ac:	041b0c1b 	.word	0x041b0c1b
   198b0:	0305f043 	.word	0x0305f043
   198b4:	e64e603b 	.word	0xe64e603b
   198b8:	4a28683b 	.word	0x4a28683b
   198bc:	3300f443 	.word	0x3300f443
   198c0:	2001603b 	.word	0x2001603b
   198c4:	5024f842 	.word	0x5024f842
   198c8:	2002e645 	.word	0x2002e645
   198cc:	683be643 	.word	0x683be643
   198d0:	0c1b2000 	.word	0x0c1b2000
   198d4:	f043041b 	.word	0xf043041b
   198d8:	603b0304 	.word	0x603b0304
   198dc:	2302e63b 	.word	0x2302e63b
   198e0:	69ab603b 	.word	0x69ab603b
   198e4:	e63661bb 	.word	0xe63661bb
   198e8:	b94c8a6c 	.word	0xb94c8a6c
   198ec:	e6124626 	.word	0xe6124626
   198f0:	683b220c 	.word	0x683b220c
   198f4:	f0432000 	.word	0xf0432000
   198f8:	603b6300 	.word	0x603b6300
   198fc:	e62a607a 	.word	0xe62a607a
   19900:	f0052024 	.word	0xf0052024
   19904:	4606fdef 	.word	0x4606fdef
   19908:	8a6ab158 	.word	0x8a6ab158
   1990c:	d0182a10 	.word	0xd0182a10
   19910:	d00a2a04 	.word	0xd00a2a04
   19914:	f7f96828 	.word	0xf7f96828
   19918:	4630fab7 	.word	0x4630fab7
   1991c:	fe00f005 	.word	0xfe00f005
   19920:	6828e618 	.word	0x6828e618
   19924:	fab0f7f9 	.word	0xfab0f7f9
   19928:	2302e614 	.word	0x2302e614
   1992c:	60432410 	.word	0x60432410
   19930:	8a2b7004 	.word	0x8a2b7004
   19934:	0114f105 	.word	0x0114f105
   19938:	300c8103 	.word	0x300c8103
   1993c:	ff49f00a 	.word	0xff49f00a
   19940:	230ae5e9 	.word	0x230ae5e9
   19944:	60432424 	.word	0x60432424
   19948:	8a2b7004 	.word	0x8a2b7004
   1994c:	0114f105 	.word	0x0114f105
   19950:	30108103 	.word	0x30108103
   19954:	ff3df00a 	.word	0xff3df00a
   19958:	bf00e5dd 	.word	0xbf00e5dd
   1995c:	20020614 	.word	0x20020614

00019960 <rpc_logobj_client_evt_handler>:
   19960:	f850b120 	.word	0xf850b120
   19964:	0c091b08 	.word	0x0c091b08
   19968:	b886f7fa 	.word	0xb886f7fa
   1996c:	bf004770 	.word	0xbf004770

00019970 <rpc_logobj_client_init>:
   19970:	f0044801 	.word	0xf0044801
   19974:	bf00bcf1 	.word	0xbf00bcf1
   19978:	00026a58 	.word	0x00026a58

0001997c <rpc_logobj_client_request_alloc>:
   1997c:	b5102300 	.word	0xb5102300
   19980:	9301b082 	.word	0x9301b082
   19984:	b170b961 	.word	0xb170b961
   19988:	aa014604 	.word	0xaa014604
   1998c:	f0042009 	.word	0xf0042009
   19990:	b918ff1b 	.word	0xb918ff1b
   19994:	b10b9b01 	.word	0xb10b9b01
   19998:	60233308 	.word	0x60233308
   1999c:	bd10b002 	.word	0xbd10b002
   199a0:	b002200f 	.word	0xb002200f
   199a4:	200ebd10 	.word	0x200ebd10
   199a8:	bd10b002 	.word	0xbd10b002

000199ac <rpc_logobj_client_request_send>:
   199ac:	4370f401 	.word	0x4370f401
   199b0:	4fe0f5b3 	.word	0x4fe0f5b3
   199b4:	b160d10b 	.word	0xb160d10b
   199b8:	f8304603 	.word	0xf8304603
   199bc:	20092c08 	.word	0x20092c08
   199c0:	4101ea42 	.word	0x4101ea42
   199c4:	1d08f843 	.word	0x1d08f843
   199c8:	f0044619 	.word	0xf0044619
   199cc:	200fbee5 	.word	0x200fbee5
   199d0:	200e4770 	.word	0x200e4770
   199d4:	bf004770 	.word	0xbf004770

000199d8 <rpc_logobj_client_message_free>:
   199d8:	f1a0b120 	.word	0xf1a0b120
   199dc:	20090108 	.word	0x20090108
   199e0:	bf24f004 	.word	0xbf24f004
   199e4:	4770200e 	.word	0x4770200e

000199e8 <rpc_logobj_client_data_free>:
   199e8:	4601b118 	.word	0x4601b118
   199ec:	f0052009 	.word	0xf0052009
   199f0:	200eb82f 	.word	0x200eb82f
   199f4:	bf004770 	.word	0xbf004770

000199f8 <datagram_handler_init>:
   199f8:	4604b510 	.word	0x4604b510
   199fc:	f005200c 	.word	0xf005200c
   19a00:	60e0fd71 	.word	0x60e0fd71
   19a04:	e8bdb118 	.word	0xe8bdb118
   19a08:	f0004010 	.word	0xf0004010
   19a0c:	2004b8bd 	.word	0x2004b8bd
   19a10:	bf00bd10 	.word	0xbf00bd10

00019a14 <datagram_handler_put>:
   19a14:	4606b570 	.word	0x4606b570
   19a18:	460d2014 	.word	0x460d2014
   19a1c:	fd62f005 	.word	0xfd62f005
   19a20:	682bb178 	.word	0x682bb178
   19a24:	60434604 	.word	0x60434604
   19a28:	4601686b 	.word	0x4601686b
   19a2c:	68eb6083 	.word	0x68eb6083
   19a30:	68ab60c3 	.word	0x68ab60c3
   19a34:	68f06103 	.word	0x68f06103
   19a38:	f8b0f000 	.word	0xf8b0f000
   19a3c:	6868b920 	.word	0x6868b920
   19a40:	f04fbd70 	.word	0xf04fbd70
   19a44:	bd7030ff 	.word	0xbd7030ff
   19a48:	f0054620 	.word	0xf0054620
   19a4c:	f04ffd69 	.word	0xf04ffd69
   19a50:	bd7030ff 	.word	0xbd7030ff

00019a54 <datagram_handler_get>:
   19a54:	4606b5f0 	.word	0x4606b5f0
   19a58:	68c0b085 	.word	0x68c0b085
   19a5c:	4617460c 	.word	0x4617460c
   19a60:	f8bcf000 	.word	0xf8bcf000
   19a64:	d0372800 	.word	0xd0372800
   19a68:	46056882 	.word	0x46056882
   19a6c:	0300e9d4 	.word	0x0300e9d4
   19a70:	bf28429a 	.word	0xbf28429a
   19a74:	6062461a 	.word	0x6062461a
   19a78:	6869b110 	.word	0x6869b110
   19a7c:	fea9f00a 	.word	0xfea9f00a
   19a80:	b11868a0 	.word	0xb11868a0
   19a84:	b10b692b 	.word	0xb10b692b
   19a88:	b9e268ea 	.word	0xb9e268ea
   19a8c:	60e32300 	.word	0x60e32300
   19a90:	d502073b 	.word	0xd502073b
   19a94:	b0056860 	.word	0xb0056860
   19a98:	68f0bdf0 	.word	0x68f0bdf0
   19a9c:	f894f000 	.word	0xf894f000
   19aa0:	28004605 	.word	0x28004605
   19aa4:	e9d0d0f6 	.word	0xe9d0d0f6
   19aa8:	69023101 	.word	0x69023101
   19aac:	68c39300 	.word	0x68c39300
   19ab0:	1201e9cd 	.word	0x1201e9cd
   19ab4:	46689303 	.word	0x46689303
   19ab8:	3101e9d6 	.word	0x3101e9d6
   19abc:	46284798 	.word	0x46284798
   19ac0:	fd2ef005 	.word	0xfd2ef005
   19ac4:	68e3e7e6 	.word	0x68e3e7e6
   19ac8:	bf28429a 	.word	0xbf28429a
   19acc:	60e2461a 	.word	0x60e2461a
   19ad0:	f00a6929 	.word	0xf00a6929
   19ad4:	e7dbfe7e 	.word	0xe7dbfe7e
   19ad8:	30fff04f 	.word	0x30fff04f
   19adc:	bf00e7db 	.word	0xbf00e7db

00019ae0 <datagram_handler_available>:
   19ae0:	68c0b508 	.word	0x68c0b508
   19ae4:	f87af000 	.word	0xf87af000
   19ae8:	6880b108 	.word	0x6880b108
   19aec:	f04fbd08 	.word	0xf04fbd08
   19af0:	bd0830ff 	.word	0xbd0830ff

00019af4 <datagram_handler_flush>:
   19af4:	4605b530 	.word	0x4605b530
   19af8:	b08568c0 	.word	0xb08568c0
   19afc:	e01ab9a8 	.word	0xe01ab9a8
   19b00:	f00068e8 	.word	0xf00068e8
   19b04:	4604f861 	.word	0x4604f861
   19b08:	e9d0b170 	.word	0xe9d0b170
   19b0c:	e9d40101 	.word	0xe9d40101
   19b10:	e9cd3203 	.word	0xe9cd3203
   19b14:	e9cd0100 	.word	0xe9cd0100
   19b18:	e9d52302 	.word	0xe9d52302
   19b1c:	46683101 	.word	0x46683101
   19b20:	46204798 	.word	0x46204798
   19b24:	fcfcf005 	.word	0xfcfcf005
   19b28:	f00068e8 	.word	0xf00068e8
   19b2c:	2800f85d 	.word	0x2800f85d
   19b30:	b005d1e6 	.word	0xb005d1e6
   19b34:	2008bd30 	.word	0x2008bd30
   19b38:	bd30b005 	.word	0xbd30b005

00019b3c <datagram_handler_free>:
   19b3c:	4605b530 	.word	0x4605b530
   19b40:	b08568c0 	.word	0xb08568c0
   19b44:	e01cb9a0 	.word	0xe01cb9a0
   19b48:	f83ef000 	.word	0xf83ef000
   19b4c:	b1704604 	.word	0xb1704604
   19b50:	0101e9d0 	.word	0x0101e9d0
   19b54:	3203e9d4 	.word	0x3203e9d4
   19b58:	0100e9cd 	.word	0x0100e9cd
   19b5c:	2302e9cd 	.word	0x2302e9cd
   19b60:	3101e9d5 	.word	0x3101e9d5
   19b64:	47984668 	.word	0x47984668
   19b68:	f0054620 	.word	0xf0054620
   19b6c:	68e8fcd9 	.word	0x68e8fcd9
   19b70:	f83af000 	.word	0xf83af000
   19b74:	68e84604 	.word	0x68e84604
   19b78:	d1e52c00 	.word	0xd1e52c00
   19b7c:	fcd0f005 	.word	0xfcd0f005
   19b80:	b00560ec 	.word	0xb00560ec
   19b84:	bf00bd30 	.word	0xbf00bd30

00019b88 <linked_list_init>:
   19b88:	2300b128 	.word	0x2300b128
   19b8c:	e9c06003 	.word	0xe9c06003
   19b90:	46183301 	.word	0x46183301
   19b94:	20074770 	.word	0x20074770
   19b98:	bf004770 	.word	0xbf004770

00019b9c <linked_list_push>:
   19b9c:	46036802 	.word	0x46036802
   19ba0:	d00e3201 	.word	0xd00e3201
   19ba4:	600a2200 	.word	0x600a2200
   19ba8:	b13a6802 	.word	0xb13a6802
   19bac:	60116882 	.word	0x60116882
   19bb0:	681a6081 	.word	0x681a6081
   19bb4:	32012000 	.word	0x32012000
   19bb8:	4770601a 	.word	0x4770601a
   19bbc:	1101e9c0 	.word	0x1101e9c0
   19bc0:	2004e7f7 	.word	0x2004e7f7
   19bc4:	bf004770 	.word	0xbf004770

00019bc8 <linked_list_pop>:
   19bc8:	68004603 	.word	0x68004603
   19bcc:	6858b128 	.word	0x6858b128
   19bd0:	6801681a 	.word	0x6801681a
   19bd4:	60593a01 	.word	0x60593a01
   19bd8:	4770601a 	.word	0x4770601a

00019bdc <linked_list_peek>:
   19bdc:	b10b6803 	.word	0xb10b6803
   19be0:	47706840 	.word	0x47706840
   19be4:	47704618 	.word	0x47704618

00019be8 <linked_list_size_get>:
   19be8:	47706800 	.word	0x47706800

00019bec <linked_list_get_next>:
   19bec:	47706800 	.word	0x47706800

00019bf0 <rpc_transport_ipc_tx_init>:
   19bf0:	f0002800 	.word	0xf0002800
   19bf4:	290080b8 	.word	0x290080b8
   19bf8:	80b5f000 	.word	0x80b5f000
   19bfc:	f0002a00 	.word	0xf0002a00
   19c00:	e92d80b2 	.word	0xe92d80b2
   19c04:	6a044ff0 	.word	0x6a044ff0
   19c08:	2c00b085 	.word	0x2c00b085
   19c0c:	80a6f000 	.word	0x80a6f000
   19c10:	28006a40 	.word	0x28006a40
   19c14:	80a2f000 	.word	0x80a2f000
   19c18:	4587f642 	.word	0x4587f642
   19c1c:	0a00f04f 	.word	0x0a00f04f
   19c20:	42a84e55 	.word	0x42a84e55
   19c24:	a000f886 	.word	0xa000f886
   19c28:	80a0f240 	.word	0x80a0f240
   19c2c:	f8df2708 	.word	0xf8df2708
   19c30:	46209180 	.word	0x46209180
   19c34:	460d4616 	.word	0x460d4616
   19c38:	46512244 	.word	0x46512244
   19c3c:	4000f8c9 	.word	0x4000f8c9
   19c40:	fdf1f00a 	.word	0xfdf1f00a
   19c44:	2000f8d9 	.word	0x2000f8d9
   19c48:	0344f104 	.word	0x0344f104
   19c4c:	8164f8df 	.word	0x8164f8df
   19c50:	a001f882 	.word	0xa001f882
   19c54:	a002f882 	.word	0xa002f882
   19c58:	a003f882 	.word	0xa003f882
   19c5c:	46187017 	.word	0x46187017
   19c60:	46512244 	.word	0x46512244
   19c64:	3000f8c8 	.word	0x3000f8c8
   19c68:	fdddf00a 	.word	0xfdddf00a
   19c6c:	2000f8d8 	.word	0x2000f8d8
   19c70:	0388f104 	.word	0x0388f104
   19c74:	b140f8df 	.word	0xb140f8df
   19c78:	f8827017 	.word	0xf8827017
   19c7c:	f882a001 	.word	0xf882a001
   19c80:	f882a002 	.word	0xf882a002
   19c84:	4618a003 	.word	0x4618a003
   19c88:	7200f44f 	.word	0x7200f44f
   19c8c:	f8cb4651 	.word	0xf8cb4651
   19c90:	f00a3000 	.word	0xf00a3000
   19c94:	4b39fdc8 	.word	0x4b39fdc8
   19c98:	7c22f504 	.word	0x7c22f504
   19c9c:	c000f8c3 	.word	0xc000f8c3
   19ca0:	46604651 	.word	0x46604651
   19ca4:	7200f44f 	.word	0x7200f44f
   19ca8:	fdbdf00a 	.word	0xfdbdf00a
   19cac:	5c20f44f 	.word	0x5c20f44f
   19cb0:	f04f2106 	.word	0xf04f2106
   19cb4:	f44f0e01 	.word	0xf44f0e01
   19cb8:	f44f3001 	.word	0xf44f3001
   19cbc:	4b303288 	.word	0x4b303288
   19cc0:	6491f504 	.word	0x6491f504
   19cc4:	4c2f605c 	.word	0x4c2f605c
   19cc8:	c008f8c3 	.word	0xc008f8c3
   19ccc:	f8a38199 	.word	0xf8a38199
   19cd0:	4619e000 	.word	0x4619e000
   19cd4:	4b2c611c 	.word	0x4b2c611c
   19cd8:	c0e0f8df 	.word	0xc0e0f8df
   19cdc:	482b6120 	.word	0x482b6120
   19ce0:	f5036063 	.word	0xf5036063
   19ce4:	60a073c0 	.word	0x60a073c0
   19ce8:	c000f8c4 	.word	0xc000f8c4
   19cec:	60e34828 	.word	0x60e34828
   19cf0:	f0056162 	.word	0xf0056162
   19cf4:	2800fadd 	.word	0x2800fadd
   19cf8:	f04fd132 	.word	0xf04fd132
   19cfc:	24200c02 	.word	0x24200c02
   19d00:	1000f8d9 	.word	0x1000f8d9
   19d04:	2000f8db 	.word	0x2000f8db
   19d08:	4b1c6029 	.word	0x4b1c6029
   19d0c:	1000f8d8 	.word	0x1000f8d8
   19d10:	e0acf8df 	.word	0xe0acf8df
   19d14:	60314d1f 	.word	0x60314d1f
   19d18:	2000f8ce 	.word	0x2000f8ce
   19d1c:	491e681b 	.word	0x491e681b
   19d20:	7200f502 	.word	0x7200f502
   19d24:	4e1d602a 	.word	0x4e1d602a
   19d28:	4d1e4a1d 	.word	0x4d1e4a1d
   19d2c:	f503600b 	.word	0xf503600b
   19d30:	491d7300 	.word	0x491d7300
   19d34:	80286033 	.word	0x80286033
   19d38:	c514f8c2 	.word	0xc514f8c2
   19d3c:	4b1b6809 	.word	0x4b1b6809
   19d40:	99039103 	.word	0x99039103
   19d44:	751cf8c2 	.word	0x751cf8c2
   19d48:	443b6819 	.word	0x443b6819
   19d4c:	99029102 	.word	0x99029102
   19d50:	4524f8c2 	.word	0x4524f8c2
   19d54:	9301681b 	.word	0x9301681b
   19d58:	e0019b01 	.word	0xe0019b01
   19d5c:	0007f24c 	.word	0x0007f24c
   19d60:	e8bdb005 	.word	0xe8bdb005
   19d64:	f24c8ff0 	.word	0xf24c8ff0
   19d68:	4770000e 	.word	0x4770000e
   19d6c:	0004f24c 	.word	0x0004f24c
   19d70:	e8bdb005 	.word	0xe8bdb005
   19d74:	bf008ff0 	.word	0xbf008ff0
   19d78:	2002744d 	.word	0x2002744d
   19d7c:	20020664 	.word	0x20020664
   19d80:	20020650 	.word	0x20020650
   19d84:	20020674 	.word	0x20020674
   19d88:	00040080 	.word	0x00040080
   19d8c:	00040100 	.word	0x00040100
   19d90:	2002063c 	.word	0x2002063c
   19d94:	20020648 	.word	0x20020648
   19d98:	20020644 	.word	0x20020644
   19d9c:	20020640 	.word	0x20020640
   19da0:	4002a000 	.word	0x4002a000
   19da4:	20025e1c 	.word	0x20025e1c
   19da8:	4002a514 	.word	0x4002a514
   19dac:	4002a51c 	.word	0x4002a51c
   19db0:	20020670 	.word	0x20020670
   19db4:	20020668 	.word	0x20020668
   19db8:	2002066c 	.word	0x2002066c
   19dbc:	00080040 	.word	0x00080040
   19dc0:	2002064c 	.word	0x2002064c

00019dc4 <rpc_transport_ipc_tx_send>:
   19dc4:	d05f2800 	.word	0xd05f2800
   19dc8:	4b33b470 	.word	0x4b33b470
   19dcc:	681ab083 	.word	0x681ab083
   19dd0:	42824b32 	.word	0x42824b32
   19dd4:	681bd81e 	.word	0x681bd81e
   19dd8:	42834931 	.word	0x42834931
   19ddc:	d8036809 	.word	0xd8036809
   19de0:	68244c30 	.word	0x68244c30
   19de4:	d8474284 	.word	0xd8474284
   19de8:	d90e4281 	.word	0xd90e4281
   19dec:	781b4b2e 	.word	0x781b4b2e
   19df0:	d14c2b00 	.word	0xd14c2b00
   19df4:	492d1a83 	.word	0x492d1a83
   19df8:	069b099e 	.word	0x069b099e
   19dfc:	4c2c680a 	.word	0x4c2c680a
   19e00:	0103f04f 	.word	0x0103f04f
   19e04:	0502f04f 	.word	0x0502f04f
   19e08:	f24cd014 	.word	0xf24cd014
   19e0c:	b0030010 	.word	0xb0030010
   19e10:	4770bc70 	.word	0x4770bc70
   19e14:	4298681b 	.word	0x4298681b
   19e18:	4a22d3f7 	.word	0x4a22d3f7
   19e1c:	42906812 	.word	0x42906812
   19e20:	2101d2f3 	.word	0x2101d2f3
   19e24:	4a231ac3 	.word	0x4a231ac3
   19e28:	069b099e 	.word	0x069b099e
   19e2c:	6812460d 	.word	0x6812460d
   19e30:	d1ea4c21 	.word	0xd1ea4c21
   19e34:	b2db6843 	.word	0xb2db6843
   19e38:	d120429d 	.word	0xd120429d
   19e3c:	eb022020 	.word	0xeb022020
   19e40:	4d1e02c6 	.word	0x4d1e02c6
   19e44:	882e6853 	.word	0x882e6853
   19e48:	ea43b29b 	.word	0xea43b29b
   19e4c:	f0234306 	.word	0xf0234306
   19e50:	f04303ff 	.word	0xf04303ff
   19e54:	60530301 	.word	0x60530301
   19e58:	3801bf00 	.word	0x3801bf00
   19e5c:	2201d1fc 	.word	0x2201d1fc
   19e60:	f8434b17 	.word	0xf8434b17
   19e64:	68222021 	.word	0x68222021
   19e68:	9201882b 	.word	0x9201882b
   19e6c:	33019a01 	.word	0x33019a01
   19e70:	b003802b 	.word	0xb003802b
   19e74:	4770bc70 	.word	0x4770bc70
   19e78:	d9d24281 	.word	0xd9d24281
   19e7c:	f24ce7b6 	.word	0xf24ce7b6
   19e80:	b0030007 	.word	0xb0030007
   19e84:	4770bc70 	.word	0x4770bc70
   19e88:	000ef24c 	.word	0x000ef24c
   19e8c:	f24c4770 	.word	0xf24c4770
   19e90:	b003000f 	.word	0xb003000f
   19e94:	4770bc70 	.word	0x4770bc70
   19e98:	2002064c 	.word	0x2002064c
   19e9c:	20020644 	.word	0x20020644
   19ea0:	20020648 	.word	0x20020648
   19ea4:	20020640 	.word	0x20020640
   19ea8:	2002744d 	.word	0x2002744d
   19eac:	20020670 	.word	0x20020670
   19eb0:	4002a00c 	.word	0x4002a00c
   19eb4:	20020668 	.word	0x20020668
   19eb8:	4002a004 	.word	0x4002a004
   19ebc:	20025e1c 	.word	0x20025e1c
   19ec0:	4002a000 	.word	0x4002a000

00019ec4 <rpc_transport_ipc_tx_rpc_data_alloc>:
   19ec4:	781b4b18 	.word	0x781b4b18
   19ec8:	b4f0bb63 	.word	0xb4f0bb63
   19ecc:	f0034a17 	.word	0xf0034a17
   19ed0:	681400ff 	.word	0x681400ff
   19ed4:	68254b16 	.word	0x68254b16
   19ed8:	b1a5681e 	.word	0xb1a5681e
   19edc:	00c14607 	.word	0x00c14607
   19ee0:	685a1863 	.word	0x685a1863
   19ee4:	2a03b2d2 	.word	0x2a03b2d2
   19ee8:	609fd104 	.word	0x609fd104
   19eec:	f022685a 	.word	0xf022685a
   19ef0:	605a02ff 	.word	0x605a02ff
   19ef4:	f012685a 	.word	0xf012685a
   19ef8:	d1010fff 	.word	0xd1010fff
   19efc:	b12b689b 	.word	0xb12b689b
   19f00:	42a83001 	.word	0x42a83001
   19f04:	2000d1eb 	.word	0x2000d1eb
   19f08:	4770bcf0 	.word	0x4770bcf0
   19f0c:	1080eb06 	.word	0x1080eb06
   19f10:	60884421 	.word	0x60884421
   19f14:	f0236843 	.word	0xf0236843
   19f18:	f04303ff 	.word	0xf04303ff
   19f1c:	60430302 	.word	0x60430302
   19f20:	4770bcf0 	.word	0x4770bcf0
   19f24:	47702000 	.word	0x47702000
   19f28:	2002744d 	.word	0x2002744d
   19f2c:	20020670 	.word	0x20020670
   19f30:	2002066c 	.word	0x2002066c

00019f34 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   19f34:	4a15b4f0 	.word	0x4a15b4f0
   19f38:	68144b15 	.word	0x68144b15
   19f3c:	6825681e 	.word	0x6825681e
   19f40:	2000b1ad 	.word	0x2000b1ad
   19f44:	00c14607 	.word	0x00c14607
   19f48:	685a1863 	.word	0x685a1863
   19f4c:	2a03b2d2 	.word	0x2a03b2d2
   19f50:	609fd104 	.word	0x609fd104
   19f54:	f022685a 	.word	0xf022685a
   19f58:	605a02ff 	.word	0x605a02ff
   19f5c:	f012685a 	.word	0xf012685a
   19f60:	d1010fff 	.word	0xd1010fff
   19f64:	b12b689b 	.word	0xb12b689b
   19f68:	42853001 	.word	0x42853001
   19f6c:	2000d1eb 	.word	0x2000d1eb
   19f70:	4770bcf0 	.word	0x4770bcf0
   19f74:	1080eb06 	.word	0x1080eb06
   19f78:	60884421 	.word	0x60884421
   19f7c:	f0236843 	.word	0xf0236843
   19f80:	f04303ff 	.word	0xf04303ff
   19f84:	60430301 	.word	0x60430301
   19f88:	4770bcf0 	.word	0x4770bcf0
   19f8c:	20020668 	.word	0x20020668
   19f90:	20020664 	.word	0x20020664

00019f94 <rpc_transport_ipc_tx_data_alloc>:
   19f94:	781b4b03 	.word	0x781b4b03
   19f98:	f005b90b 	.word	0xf005b90b
   19f9c:	2000bacd 	.word	0x2000bacd
   19fa0:	bf004770 	.word	0xbf004770
   19fa4:	2002744d 	.word	0x2002744d

00019fa8 <null_handler_init>:
   19fa8:	47702000 	.word	0x47702000

00019fac <null_handler_put>:
   19fac:	460cb510 	.word	0x460cb510
   19fb0:	3101e9d0 	.word	0x3101e9d0
   19fb4:	47984620 	.word	0x47984620
   19fb8:	bd106860 	.word	0xbd106860

00019fbc <null_handler_get>:
   19fbc:	30fff04f 	.word	0x30fff04f
   19fc0:	bf004770 	.word	0xbf004770

00019fc4 <null_handler_available>:
   19fc4:	30fff04f 	.word	0x30fff04f
   19fc8:	bf004770 	.word	0xbf004770

00019fcc <null_handler_flush>:
   19fcc:	47702000 	.word	0x47702000

00019fd0 <null_handler_free>:
   19fd0:	bf004770 	.word	0xbf004770

00019fd4 <rpc_gnss_event_handler>:
   19fd4:	4b5db5f0 	.word	0x4b5db5f0
   19fd8:	68004606 	.word	0x68004606
   19fdc:	6802881b 	.word	0x6802881b
   19fe0:	ebb34c5b 	.word	0xebb34c5b
   19fe4:	b0854f12 	.word	0xb0854f12
   19fe8:	6020460d 	.word	0x6020460d
   19fec:	f505d033 	.word	0xf505d033
   19ff0:	33ff433f 	.word	0x33ff433f
   19ff4:	2b02b29b 	.word	0x2b02b29b
   19ff8:	4c56d80e 	.word	0x4c56d80e
   19ffc:	075a6823 	.word	0x075a6823
   1a000:	6823d40d 	.word	0x6823d40d
   1a004:	d503079b 	.word	0xd503079b
   1a008:	0303f244 	.word	0x0303f244
   1a00c:	d006429d 	.word	0xd006429d
   1a010:	b1086830 	.word	0xb1086830
   1a014:	fa72f7f9 	.word	0xfa72f7f9
   1a018:	b0052000 	.word	0xb0052000
   1a01c:	2002bdf0 	.word	0x2002bdf0
   1a020:	fa60f005 	.word	0xfa60f005
   1a024:	28004607 	.word	0x28004607
   1a028:	2302d0f2 	.word	0x2302d0f2
   1a02c:	68318005 	.word	0x68318005
   1a030:	48496872 	.word	0x48496872
   1a034:	0086e88d 	.word	0x0086e88d
   1a038:	93036800 	.word	0x93036800
   1a03c:	46696803 	.word	0x46696803
   1a040:	4798685b 	.word	0x4798685b
   1a044:	d06d3001 	.word	0xd06d3001
   1a048:	68232000 	.word	0x68232000
   1a04c:	3380f443 	.word	0x3380f443
   1a050:	b0056023 	.word	0xb0056023
   1a054:	4c3fbdf0 	.word	0x4c3fbdf0
   1a058:	01da6823 	.word	0x01da6823
   1a05c:	f242d523 	.word	0xf242d523
   1a060:	42991302 	.word	0x42991302
   1a064:	6843d11f 	.word	0x6843d11f
   1a068:	6823b91b 	.word	0x6823b91b
   1a06c:	7300f043 	.word	0x7300f043
   1a070:	68236023 	.word	0x68236023
   1a074:	7380f023 	.word	0x7380f023
   1a078:	68236023 	.word	0x68236023
   1a07c:	d430025b 	.word	0xd430025b
   1a080:	0305f242 	.word	0x0305f242
   1a084:	d12c429d 	.word	0xd12c429d
   1a088:	02996823 	.word	0x02996823
   1a08c:	6843d529 	.word	0x6843d529
   1a090:	d1552b00 	.word	0xd1552b00
   1a094:	f4236823 	.word	0xf4236823
   1a098:	60231300 	.word	0x60231300
   1a09c:	f4436823 	.word	0xf4436823
   1a0a0:	60233300 	.word	0x60233300
   1a0a4:	6823e01d 	.word	0x6823e01d
   1a0a8:	d50e025f 	.word	0xd50e025f
   1a0ac:	1303f242 	.word	0x1303f242
   1a0b0:	d10a429d 	.word	0xd10a429d
   1a0b4:	b91b6843 	.word	0xb91b6843
   1a0b8:	f4436823 	.word	0xf4436823
   1a0bc:	60230300 	.word	0x60230300
   1a0c0:	f4236823 	.word	0xf4236823
   1a0c4:	60230380 	.word	0x60230380
   1a0c8:	f242e00b 	.word	0xf242e00b
   1a0cc:	429d0301 	.word	0x429d0301
   1a0d0:	6843d10a 	.word	0x6843d10a
   1a0d4:	6823b92b 	.word	0x6823b92b
   1a0d8:	041b0c1b 	.word	0x041b0c1b
   1a0dc:	0302f043 	.word	0x0302f043
   1a0e0:	f7f96023 	.word	0xf7f96023
   1a0e4:	e782fa0b 	.word	0xe782fa0b
   1a0e8:	0304f242 	.word	0x0304f242
   1a0ec:	d1c7429d 	.word	0xd1c7429d
   1a0f0:	b9936843 	.word	0xb9936843
   1a0f4:	f4436823 	.word	0xf4436823
   1a0f8:	60230300 	.word	0x60230300
   1a0fc:	b29b6823 	.word	0xb29b6823
   1a100:	68232b03 	.word	0x68232b03
   1a104:	b29bd016 	.word	0xb29bd016
   1a108:	d1d92b04 	.word	0xd1d92b04
   1a10c:	0c1b6823 	.word	0x0c1b6823
   1a110:	f043041b 	.word	0xf043041b
   1a114:	60230302 	.word	0x60230302
   1a118:	6823e7d2 	.word	0x6823e7d2
   1a11c:	2b03b29b 	.word	0x2b03b29b
   1a120:	e7f3d1ce 	.word	0xe7f3d1ce
   1a124:	f0054638 	.word	0xf0054638
   1a128:	6830f9fb 	.word	0x6830f9fb
   1a12c:	f47f2800 	.word	0xf47f2800
   1a130:	e771af71 	.word	0xe771af71
   1a134:	041b0c1b 	.word	0x041b0c1b
   1a138:	0304f043 	.word	0x0304f043
   1a13c:	e7bf6023 	.word	0xe7bf6023
   1a140:	f4236823 	.word	0xf4236823
   1a144:	60231300 	.word	0x60231300
   1a148:	bf00e7cb 	.word	0xbf00e7cb
   1a14c:	20025e1e 	.word	0x20025e1e
   1a150:	20020634 	.word	0x20020634
   1a154:	2002068c 	.word	0x2002068c
   1a158:	20020690 	.word	0x20020690

0001a15c <gnss_interface_write>:
   1a15c:	43f0e92d 	.word	0x43f0e92d
   1a160:	b09f4a75 	.word	0xb09f4a75
   1a164:	9d264290 	.word	0x9d264290
   1a168:	80d3f040 	.word	0x80d3f040
   1a16c:	f0002900 	.word	0xf0002900
   1a170:	2d0080c8 	.word	0x2d0080c8
   1a174:	80c5f000 	.word	0x80c5f000
   1a178:	2a029a27 	.word	0x2a029a27
   1a17c:	80c1f040 	.word	0x80c1f040
   1a180:	68224c6e 	.word	0x68224c6e
   1a184:	2a02b292 	.word	0x2a02b292
   1a188:	6822d004 	.word	0x6822d004
   1a18c:	2a04b292 	.word	0x2a04b292
   1a190:	80c5f040 	.word	0x80c5f040
   1a194:	f1000798 	.word	0xf1000798
   1a198:	682080c8 	.word	0x682080c8
   1a19c:	3000f410 	.word	0x3000f410
   1a1a0:	6822d065 	.word	0x6822d065
   1a1a4:	f422882b 	.word	0xf422882b
   1a1a8:	60223200 	.word	0x60223200
   1a1ac:	3b016822 	.word	0x3b016822
   1a1b0:	1200f442 	.word	0x1200f442
   1a1b4:	2b076022 	.word	0x2b076022
   1a1b8:	80a3f200 	.word	0x80a3f200
   1a1bc:	f003e8df 	.word	0xf003e8df
   1a1c0:	696e7378 	.word	0x696e7378
   1a1c4:	045f5a64 	.word	0x045f5a64
   1a1c8:	a9024608 	.word	0xa9024608
   1a1cc:	ff1ef7fb 	.word	0xff1ef7fb
   1a1d0:	46682172 	.word	0x46682172
   1a1d4:	f960f7f9 	.word	0xf960f7f9
   1a1d8:	98004605 	.word	0x98004605
   1a1dc:	d16c2d00 	.word	0xd16c2d00
   1a1e0:	d06a2800 	.word	0xd06a2800
   1a1e4:	0605f241 	.word	0x0605f241
   1a1e8:	0c49f04f 	.word	0x0c49f04f
   1a1ec:	f04f2272 	.word	0xf04f2272
   1a1f0:	f04f0e76 	.word	0xf04f0e76
   1a1f4:	f04f0943 	.word	0xf04f0943
   1a1f8:	4f510854 	.word	0x4f510854
   1a1fc:	883ba91e 	.word	0x883ba91e
   1a200:	c00ff880 	.word	0xc00ff880
   1a204:	b29b3301 	.word	0xb29b3301
   1a208:	4c03ea46 	.word	0x4c03ea46
   1a20c:	cd74f841 	.word	0xcd74f841
   1a210:	71857145 	.word	0x71857145
   1a214:	720571c5 	.word	0x720571c5
   1a218:	72857245 	.word	0x72857245
   1a21c:	710272c5 	.word	0x710272c5
   1a220:	900cf880 	.word	0x900cf880
   1a224:	800df880 	.word	0x800df880
   1a228:	e00ef880 	.word	0xe00ef880
   1a22c:	803b6800 	.word	0x803b6800
   1a230:	facff00a 	.word	0xfacff00a
   1a234:	46314b43 	.word	0x46314b43
   1a238:	601d9800 	.word	0x601d9800
   1a23c:	f940f7f9 	.word	0xf940f7f9
   1a240:	d1472800 	.word	0xd1472800
   1a244:	02996823 	.word	0x02996823
   1a248:	4e3fd50d 	.word	0x4e3fd50d
   1a24c:	e0014d3a 	.word	0xe0014d3a
   1a250:	d14f2800 	.word	0xd14f2800
   1a254:	46284631 	.word	0x46284631
   1a258:	fe7af7f7 	.word	0xfe7af7f7
   1a25c:	029a6823 	.word	0x029a6823
   1a260:	2800d4f6 	.word	0x2800d4f6
   1a264:	6823d146 	.word	0x6823d146
   1a268:	d53e039b 	.word	0xd53e039b
   1a26c:	b01f2000 	.word	0xb01f2000
   1a270:	83f0e8bd 	.word	0x83f0e8bd
   1a274:	a9024608 	.word	0xa9024608
   1a278:	fe80f7fb 	.word	0xfe80f7fb
   1a27c:	4608e7a8 	.word	0x4608e7a8
   1a280:	f7fba902 	.word	0xf7fba902
   1a284:	e7a3fea3 	.word	0xe7a3fea3
   1a288:	a9024608 	.word	0xa9024608
   1a28c:	fe5cf7fb 	.word	0xfe5cf7fb
   1a290:	4608e79e 	.word	0x4608e79e
   1a294:	f7fba902 	.word	0xf7fba902
   1a298:	e799fe33 	.word	0xe799fe33
   1a29c:	a9024608 	.word	0xa9024608
   1a2a0:	fdfcf7fb 	.word	0xfdfcf7fb
   1a2a4:	4608e794 	.word	0x4608e794
   1a2a8:	f7fba902 	.word	0xf7fba902
   1a2ac:	e78ffda5 	.word	0xe78ffda5
   1a2b0:	a9024608 	.word	0xa9024608
   1a2b4:	fd7ef7fb 	.word	0xfd7ef7fb
   1a2b8:	6803e78a 	.word	0x6803e78a
   1a2bc:	4618b11b 	.word	0x4618b11b
   1a2c0:	f91cf7f9 	.word	0xf91cf7f9
   1a2c4:	f7f99800 	.word	0xf7f99800
   1a2c8:	2023f911 	.word	0x2023f911
   1a2cc:	fed4f7f7 	.word	0xfed4f7f7
   1a2d0:	30fff04f 	.word	0x30fff04f
   1a2d4:	f4236823 	.word	0xf4236823
   1a2d8:	60231300 	.word	0x60231300
   1a2dc:	f4436823 	.word	0xf4436823
   1a2e0:	60233300 	.word	0x60233300
   1a2e4:	e8bdb01f 	.word	0xe8bdb01f
   1a2e8:	200583f0 	.word	0x200583f0
   1a2ec:	f4436823 	.word	0xf4436823
   1a2f0:	60233300 	.word	0x60233300
   1a2f4:	fec0f7f7 	.word	0xfec0f7f7
   1a2f8:	30fff04f 	.word	0x30fff04f
   1a2fc:	e8bdb01f 	.word	0xe8bdb01f
   1a300:	201683f0 	.word	0x201683f0
   1a304:	feb8f7f7 	.word	0xfeb8f7f7
   1a308:	30fff04f 	.word	0x30fff04f
   1a30c:	e8bdb01f 	.word	0xe8bdb01f
   1a310:	200983f0 	.word	0x200983f0
   1a314:	feb0f7f7 	.word	0xfeb0f7f7
   1a318:	30fff04f 	.word	0x30fff04f
   1a31c:	2039e7a7 	.word	0x2039e7a7
   1a320:	feaaf7f7 	.word	0xfeaaf7f7
   1a324:	30fff04f 	.word	0x30fff04f
   1a328:	202de7a1 	.word	0x202de7a1
   1a32c:	fea4f7f7 	.word	0xfea4f7f7
   1a330:	30fff04f 	.word	0x30fff04f
   1a334:	bf00e79b 	.word	0xbf00e79b
   1a338:	49765443 	.word	0x49765443
   1a33c:	2002068c 	.word	0x2002068c
   1a340:	20025e1e 	.word	0x20025e1e
   1a344:	20020634 	.word	0x20020634
   1a348:	2002d438 	.word	0x2002d438

0001a34c <gnss_interface_read>:
   1a34c:	4ff0e92d 	.word	0x4ff0e92d
   1a350:	b0b74c4a 	.word	0xb0b74c4a
   1a354:	f04042a0 	.word	0xf04042a0
   1a358:	468881ec 	.word	0x468881ec
   1a35c:	f0002900 	.word	0xf0002900
   1a360:	2ad781e2 	.word	0x2ad781e2
   1a364:	81dff240 	.word	0x81dff240
   1a368:	46994d45 	.word	0x46994d45
   1a36c:	b29b682b 	.word	0xb29b682b
   1a370:	d0042b04 	.word	0xd0042b04
   1a374:	b29b682b 	.word	0xb29b682b
   1a378:	f0402b02 	.word	0xf0402b02
   1a37c:	210281e0 	.word	0x210281e0
   1a380:	240020b6 	.word	0x240020b6
   1a384:	f10d682b 	.word	0xf10d682b
   1a388:	f423020e 	.word	0xf423020e
   1a38c:	602b3380 	.word	0x602b3380
   1a390:	a0f4f8df 	.word	0xa0f4f8df
   1a394:	4f3bab08 	.word	0x4f3bab08
   1a398:	90054e38 	.word	0x90054e38
   1a39c:	93049107 	.word	0x93049107
   1a3a0:	ea099206 	.word	0xea099206
   1a3a4:	f8da0b01 	.word	0xf8da0b01
   1a3a8:	464a0000 	.word	0x464a0000
   1a3ac:	a9046803 	.word	0xa9046803
   1a3b0:	4798689b 	.word	0x4798689b
   1a3b4:	da112800 	.word	0xda112800
   1a3b8:	0f00f1bb 	.word	0x0f00f1bb
   1a3bc:	682bd138 	.word	0x682bd138
   1a3c0:	d4f003d8 	.word	0xd4f003d8
   1a3c4:	e7eeb10c 	.word	0xe7eeb10c
   1a3c8:	4639b930 	.word	0x4639b930
   1a3cc:	f7f74630 	.word	0xf7f74630
   1a3d0:	682bfdbf 	.word	0x682bfdbf
   1a3d4:	d5f703d9 	.word	0xd5f703d9
   1a3d8:	e7e44604 	.word	0xe7e44604
   1a3dc:	0202f244 	.word	0x0202f244
   1a3e0:	300ef8bd 	.word	0x300ef8bd
   1a3e4:	d0394293 	.word	0xd0394293
   1a3e8:	0201f244 	.word	0x0201f244
   1a3ec:	d04d4293 	.word	0xd04d4293
   1a3f0:	0203f244 	.word	0x0203f244
   1a3f4:	f0404293 	.word	0xf0404293
   1a3f8:	22018196 	.word	0x22018196
   1a3fc:	9b082414 	.word	0x9b082414
   1a400:	2000f888 	.word	0x2000f888
   1a404:	f8c89a09 	.word	0xf8c89a09
   1a408:	f8bd3008 	.word	0xf8bd3008
   1a40c:	e9c83028 	.word	0xe9c83028
   1a410:	f8da2303 	.word	0xf8da2303
   1a414:	68030000 	.word	0x68030000
   1a418:	479868db 	.word	0x479868db
   1a41c:	dd032800 	.word	0xdd032800
   1a420:	f443682b 	.word	0xf443682b
   1a424:	602b3380 	.word	0x602b3380
   1a428:	b0374620 	.word	0xb0374620
   1a42c:	8ff0e8bd 	.word	0x8ff0e8bd
   1a430:	46031c42 	.word	0x46031c42
   1a434:	b93cd1d2 	.word	0xb93cd1d2
   1a438:	2023461c 	.word	0x2023461c
   1a43c:	fe1cf7f7 	.word	0xfe1cf7f7
   1a440:	b0374620 	.word	0xb0374620
   1a444:	8ff0e8bd 	.word	0x8ff0e8bd
   1a448:	46209001 	.word	0x46209001
   1a44c:	fe14f7f7 	.word	0xfe14f7f7
   1a450:	461c9b01 	.word	0x461c9b01
   1a454:	b0374620 	.word	0xb0374620
   1a458:	8ff0e8bd 	.word	0x8ff0e8bd
   1a45c:	f00aa808 	.word	0xf00aa808
   1a460:	2302f986 	.word	0x2302f986
   1a464:	b2a41c44 	.word	0xb2a41c44
   1a468:	3b08f808 	.word	0x3b08f808
   1a46c:	a9084622 	.word	0xa9084622
   1a470:	f00a4640 	.word	0xf00a4640
   1a474:	3408f9ae 	.word	0x3408f9ae
   1a478:	bf00e7cb 	.word	0xbf00e7cb
   1a47c:	49765443 	.word	0x49765443
   1a480:	2002068c 	.word	0x2002068c
   1a484:	2002d438 	.word	0x2002d438
   1a488:	20020690 	.word	0x20020690
   1a48c:	a8092401 	.word	0xa8092401
   1a490:	e9c8c80f 	.word	0xe9c8c80f
   1a494:	e9c80102 	.word	0xe9c80102
   1a498:	990d2304 	.word	0x990d2304
   1a49c:	f8889a0e 	.word	0xf8889a0e
   1a4a0:	9b0f4000 	.word	0x9b0f4000
   1a4a4:	1018f8c8 	.word	0x1018f8c8
   1a4a8:	f8c89910 	.word	0xf8c89910
   1a4ac:	f8c8201c 	.word	0xf8c8201c
   1a4b0:	f89d3020 	.word	0xf89d3020
   1a4b4:	f8dd205d 	.word	0xf8dd205d
   1a4b8:	f8c8304d 	.word	0xf8c8304d
   1a4bc:	f8dd1024 	.word	0xf8dd1024
   1a4c0:	f8881051 	.word	0xf8881051
   1a4c4:	f8dd2044 	.word	0xf8dd2044
   1a4c8:	f8c82055 	.word	0xf8c82055
   1a4cc:	f8dd3034 	.word	0xf8dd3034
   1a4d0:	f8c83059 	.word	0xf8c83059
   1a4d4:	f8bd1038 	.word	0xf8bd1038
   1a4d8:	f8c81044 	.word	0xf8c81044
   1a4dc:	f8c8203c 	.word	0xf8c8203c
   1a4e0:	f8dd3040 	.word	0xf8dd3040
   1a4e4:	f89d2046 	.word	0xf89d2046
   1a4e8:	f8a8304a 	.word	0xf8a8304a
   1a4ec:	f8881028 	.word	0xf8881028
   1a4f0:	f8c8302e 	.word	0xf8c8302e
   1a4f4:	f89d202a 	.word	0xf89d202a
   1a4f8:	f89d004b 	.word	0xf89d004b
   1a4fc:	9b18204c 	.word	0x9b18204c
   1a500:	406cf89d 	.word	0x406cf89d
   1a504:	2002ea40 	.word	0x2002ea40
   1a508:	206bf89d 	.word	0x206bf89d
   1a50c:	210ff3c3 	.word	0x210ff3c3
   1a510:	ea429b1d 	.word	0xea429b1d
   1a514:	f8a82204 	.word	0xf8a82204
   1a518:	f8a80030 	.word	0xf8a80030
   1a51c:	f8bd104a 	.word	0xf8bd104a
   1a520:	f3c3105e 	.word	0xf3c3105e
   1a524:	f8a8230f 	.word	0xf8a8230f
   1a528:	f89d2056 	.word	0xf89d2056
   1a52c:	f8a82060 	.word	0xf8a82060
   1a530:	f8dd3062 	.word	0xf8dd3062
   1a534:	f8a83063 	.word	0xf8a83063
   1a538:	f8881046 	.word	0xf8881046
   1a53c:	f8bd2048 	.word	0xf8bd2048
   1a540:	f89d2068 	.word	0xf89d2068
   1a544:	f8c81067 	.word	0xf8c81067
   1a548:	f89d304c 	.word	0xf89d304c
   1a54c:	f888306a 	.word	0xf888306a
   1a550:	f8a81050 	.word	0xf8a81050
   1a554:	f8882052 	.word	0xf8882052
   1a558:	f8bd3054 	.word	0xf8bd3054
   1a55c:	f8dd3072 	.word	0xf8dd3072
   1a560:	f89d106d 	.word	0xf89d106d
   1a564:	f8c82071 	.word	0xf8c82071
   1a568:	f8881058 	.word	0xf8881058
   1a56c:	f89d205c 	.word	0xf89d205c
   1a570:	f8dd1074 	.word	0xf8dd1074
   1a574:	f8a82077 	.word	0xf8a82077
   1a578:	f89d305e 	.word	0xf89d305e
   1a57c:	f888307b 	.word	0xf888307b
   1a580:	f8c81060 	.word	0xf8c81060
   1a584:	f8882064 	.word	0xf8882064
   1a588:	f89d3068 	.word	0xf89d3068
   1a58c:	f89d3080 	.word	0xf89d3080
   1a590:	9a22107f 	.word	0x9a22107f
   1a594:	0094f89d 	.word	0x0094f89d
   1a598:	2103ea41 	.word	0x2103ea41
   1a59c:	3093f89d 	.word	0x3093f89d
   1a5a0:	220ff3c2 	.word	0x220ff3c2
   1a5a4:	106ef8a8 	.word	0x106ef8a8
   1a5a8:	107cf8bd 	.word	0x107cf8bd
   1a5ac:	2300ea43 	.word	0x2300ea43
   1a5b0:	207af8a8 	.word	0x207af8a8
   1a5b4:	207ef89d 	.word	0x207ef89d
   1a5b8:	3086f8a8 	.word	0x3086f8a8
   1a5bc:	3081f8dd 	.word	0x3081f8dd
   1a5c0:	106af8a8 	.word	0x106af8a8
   1a5c4:	206cf888 	.word	0x206cf888
   1a5c8:	2086f8bd 	.word	0x2086f8bd
   1a5cc:	1085f89d 	.word	0x1085f89d
   1a5d0:	3070f8c8 	.word	0x3070f8c8
   1a5d4:	3088f89d 	.word	0x3088f89d
   1a5d8:	1074f888 	.word	0x1074f888
   1a5dc:	2076f8a8 	.word	0x2076f8a8
   1a5e0:	3078f888 	.word	0x3078f888
   1a5e4:	3090f8bd 	.word	0x3090f8bd
   1a5e8:	108bf8dd 	.word	0x108bf8dd
   1a5ec:	208ff89d 	.word	0x208ff89d
   1a5f0:	107cf8c8 	.word	0x107cf8c8
   1a5f4:	2080f888 	.word	0x2080f888
   1a5f8:	1092f89d 	.word	0x1092f89d
   1a5fc:	2095f8dd 	.word	0x2095f8dd
   1a600:	3082f8a8 	.word	0x3082f8a8
   1a604:	3099f89d 	.word	0x3099f89d
   1a608:	1084f888 	.word	0x1084f888
   1a60c:	2088f8c8 	.word	0x2088f8c8
   1a610:	308cf888 	.word	0x308cf888
   1a614:	009af8bd 	.word	0x009af8bd
   1a618:	f89d9b27 	.word	0xf89d9b27
   1a61c:	f89d40a8 	.word	0xf89d40a8
   1a620:	f3c320a7 	.word	0xf3c320a7
   1a624:	9b2c210f 	.word	0x9b2c210f
   1a628:	2204ea42 	.word	0x2204ea42
   1a62c:	1092f8a8 	.word	0x1092f8a8
   1a630:	109cf89d 	.word	0x109cf89d
   1a634:	209ef8a8 	.word	0x209ef8a8
   1a638:	230ff3c3 	.word	0x230ff3c3
   1a63c:	209ff8dd 	.word	0x209ff8dd
   1a640:	008ef8a8 	.word	0x008ef8a8
   1a644:	30aaf8a8 	.word	0x30aaf8a8
   1a648:	1090f888 	.word	0x1090f888
   1a64c:	30a3f89d 	.word	0x30a3f89d
   1a650:	10a4f8bd 	.word	0x10a4f8bd
   1a654:	2094f8c8 	.word	0x2094f8c8
   1a658:	20a6f89d 	.word	0x20a6f89d
   1a65c:	3098f888 	.word	0x3098f888
   1a660:	30a9f8dd 	.word	0x30a9f8dd
   1a664:	109af8a8 	.word	0x109af8a8
   1a668:	209cf888 	.word	0x209cf888
   1a66c:	20aef8bd 	.word	0x20aef8bd
   1a670:	10adf89d 	.word	0x10adf89d
   1a674:	30a0f8c8 	.word	0x30a0f8c8
   1a678:	30b0f89d 	.word	0x30b0f89d
   1a67c:	10a4f888 	.word	0x10a4f888
   1a680:	20a6f8a8 	.word	0x20a6f8a8
   1a684:	30a8f888 	.word	0x30a8f888
   1a688:	30b8f8bd 	.word	0x30b8f8bd
   1a68c:	10b3f8dd 	.word	0x10b3f8dd
   1a690:	20b7f89d 	.word	0x20b7f89d
   1a694:	10acf8c8 	.word	0x10acf8c8
   1a698:	20b0f888 	.word	0x20b0f888
   1a69c:	30b2f8a8 	.word	0x30b2f8a8
   1a6a0:	30bcf89d 	.word	0x30bcf89d
   1a6a4:	10bbf89d 	.word	0x10bbf89d
   1a6a8:	00d0f89d 	.word	0x00d0f89d
   1a6ac:	ea419a31 	.word	0xea419a31
   1a6b0:	f89d2103 	.word	0xf89d2103
   1a6b4:	f89d30cf 	.word	0xf89d30cf
   1a6b8:	ea4340ba 	.word	0xea4340ba
   1a6bc:	f3c22300 	.word	0xf3c22300
   1a6c0:	f8a8220f 	.word	0xf8a8220f
   1a6c4:	f8a810b6 	.word	0xf8a810b6
   1a6c8:	f88830ce 	.word	0xf88830ce
   1a6cc:	f8a840b4 	.word	0xf8a840b4
   1a6d0:	f8bd20c2 	.word	0xf8bd20c2
   1a6d4:	f89d20c2 	.word	0xf89d20c2
   1a6d8:	f89d10c1 	.word	0xf89d10c1
   1a6dc:	f8dd30c4 	.word	0xf8dd30c4
   1a6e0:	f88800bd 	.word	0xf88800bd
   1a6e4:	f8a810bc 	.word	0xf8a810bc
   1a6e8:	f8c820be 	.word	0xf8c820be
   1a6ec:	f88800b8 	.word	0xf88800b8
   1a6f0:	f8bd30c0 	.word	0xf8bd30c0
   1a6f4:	f8dd30cc 	.word	0xf8dd30cc
   1a6f8:	f89d10c7 	.word	0xf89d10c7
   1a6fc:	f8c820cb 	.word	0xf8c820cb
   1a700:	f88810c4 	.word	0xf88810c4
   1a704:	f89d20c8 	.word	0xf89d20c8
   1a708:	f8dd10ce 	.word	0xf8dd10ce
   1a70c:	f8a820d1 	.word	0xf8a820d1
   1a710:	f89d30ca 	.word	0xf89d30ca
   1a714:	f88830d5 	.word	0xf88830d5
   1a718:	f8c810cc 	.word	0xf8c810cc
   1a71c:	f88820d0 	.word	0xf88820d0
   1a720:	24d830d4 	.word	0x24d830d4
   1a724:	2016e675 	.word	0x2016e675
   1a728:	fca6f7f7 	.word	0xfca6f7f7
   1a72c:	34fff04f 	.word	0x34fff04f
   1a730:	2009e67a 	.word	0x2009e67a
   1a734:	fca0f7f7 	.word	0xfca0f7f7
   1a738:	34fff04f 	.word	0x34fff04f
   1a73c:	2039e674 	.word	0x2039e674
   1a740:	fc9af7f7 	.word	0xfc9af7f7
   1a744:	34fff04f 	.word	0x34fff04f
   1a748:	bf00e66e 	.word	0xbf00e66e

0001a74c <gnss_interface_setopt>:
   1a74c:	47f0e92d 	.word	0x47f0e92d
   1a750:	1402f241 	.word	0x1402f241
   1a754:	b0864222 	.word	0xb0864222
   1a758:	d0044d9b 	.word	0xd0044d9b
   1a75c:	b2a4682c 	.word	0xb2a4682c
   1a760:	f0402c02 	.word	0xf0402c02
   1a764:	682c8104 	.word	0x682c8104
   1a768:	f1000264 	.word	0xf1000264
   1a76c:	f5b18127 	.word	0xf5b18127
   1a770:	f0407f01 	.word	0xf0407f01
   1a774:	4995811d 	.word	0x4995811d
   1a778:	f0404288 	.word	0xf0404288
   1a77c:	3a018113 	.word	0x3a018113
   1a780:	f2002a08 	.word	0xf2002a08
   1a784:	e8df80ec 	.word	0xe8df80ec
   1a788:	0075f012 	.word	0x0075f012
   1a78c:	00c200d8 	.word	0x00c200d8
   1a790:	008100cc 	.word	0x008100cc
   1a794:	0098008c 	.word	0x0098008c
   1a798:	000900af 	.word	0x000900af
   1a79c:	2a019a0e 	.word	0x2a019a0e
   1a7a0:	80ddf040 	.word	0x80ddf040
   1a7a4:	1603f241 	.word	0x1603f241
   1a7a8:	46372240 	.word	0x46372240
   1a7ac:	9202781b 	.word	0x9202781b
   1a7b0:	3015f88d 	.word	0x3015f88d
   1a7b4:	2112682b 	.word	0x2112682b
   1a7b8:	0380f443 	.word	0x0380f443
   1a7bc:	602b4668 	.word	0x602b4668
   1a7c0:	fe6af7f8 	.word	0xfe6af7f8
   1a7c4:	98004604 	.word	0x98004604
   1a7c8:	f0402c00 	.word	0xf0402c00
   1a7cc:	280080d6 	.word	0x280080d6
   1a7d0:	80d3f000 	.word	0x80d3f000
   1a7d4:	f04f2212 	.word	0xf04f2212
   1a7d8:	f04f0876 	.word	0xf04f0876
   1a7dc:	f04f0e49 	.word	0xf04f0e49
   1a7e0:	f04f0a43 	.word	0xf04f0a43
   1a7e4:	f8df0954 	.word	0xf8df0954
   1a7e8:	a906c1ec 	.word	0xa906c1ec
   1a7ec:	3000f8bc 	.word	0x3000f8bc
   1a7f0:	800ef880 	.word	0x800ef880
   1a7f4:	b29b3301 	.word	0xb29b3301
   1a7f8:	4603ea46 	.word	0x4603ea46
   1a7fc:	6d14f841 	.word	0x6d14f841
   1a800:	71847144 	.word	0x71847144
   1a804:	720471c4 	.word	0x720471c4
   1a808:	72847244 	.word	0x72847244
   1a80c:	710272c4 	.word	0x710272c4
   1a810:	a00cf880 	.word	0xa00cf880
   1a814:	900df880 	.word	0x900df880
   1a818:	e00ff880 	.word	0xe00ff880
   1a81c:	81b8f8df 	.word	0x81b8f8df
   1a820:	f8ac6800 	.word	0xf8ac6800
   1a824:	f0093000 	.word	0xf0093000
   1a828:	4639ffd4 	.word	0x4639ffd4
   1a82c:	f8c89800 	.word	0xf8c89800
   1a830:	f7f84000 	.word	0xf7f84000
   1a834:	2800fe45 	.word	0x2800fe45
   1a838:	80aaf040 	.word	0x80aaf040
   1a83c:	4e634f64 	.word	0x4e634f64
   1a840:	46304639 	.word	0x46304639
   1a844:	fb84f7f7 	.word	0xfb84f7f7
   1a848:	f414682c 	.word	0xf414682c
   1a84c:	d1f70480 	.word	0xd1f70480
   1a850:	0000f8d8 	.word	0x0000f8d8
   1a854:	f7f8b118 	.word	0xf7f8b118
   1a858:	f8c8fe51 	.word	0xf8c8fe51
   1a85c:	682b4000 	.word	0x682b4000
   1a860:	d576021b 	.word	0xd576021b
   1a864:	682b2000 	.word	0x682b2000
   1a868:	0300f423 	.word	0x0300f423
   1a86c:	b006602b 	.word	0xb006602b
   1a870:	87f0e8bd 	.word	0x87f0e8bd
   1a874:	2a029a0e 	.word	0x2a029a0e
   1a878:	2208d171 	.word	0x2208d171
   1a87c:	1603f241 	.word	0x1603f241
   1a880:	9202881b 	.word	0x9202881b
   1a884:	300ff8ad 	.word	0x300ff8ad
   1a888:	e7934637 	.word	0xe7934637
   1a88c:	2a019a0e 	.word	0x2a019a0e
   1a890:	f241d165 	.word	0xf241d165
   1a894:	781b1603 	.word	0x781b1603
   1a898:	f88d9202 	.word	0xf88d9202
   1a89c:	4637300c 	.word	0x4637300c
   1a8a0:	9a0ee788 	.word	0x9a0ee788
   1a8a4:	d15a2a01 	.word	0xd15a2a01
   1a8a8:	f2412202 	.word	0xf2412202
   1a8ac:	781b1603 	.word	0x781b1603
   1a8b0:	f88d9202 	.word	0xf88d9202
   1a8b4:	4637300d 	.word	0x4637300d
   1a8b8:	682ae77c 	.word	0x682ae77c
   1a8bc:	2a02b292 	.word	0x2a02b292
   1a8c0:	9a0ed155 	.word	0x9a0ed155
   1a8c4:	d14a2a04 	.word	0xd14a2a04
   1a8c8:	f2412101 	.word	0xf2412101
   1a8cc:	682a0604 	.word	0x682a0604
   1a8d0:	0c136818 	.word	0x0c136818
   1a8d4:	f043041b 	.word	0xf043041b
   1a8d8:	f8cd0303 	.word	0xf8cd0303
   1a8dc:	602b0009 	.word	0x602b0009
   1a8e0:	1008f88d 	.word	0x1008f88d
   1a8e4:	e7654637 	.word	0xe7654637
   1a8e8:	b29b682b 	.word	0xb29b682b
   1a8ec:	d13e2b04 	.word	0xd13e2b04
   1a8f0:	f2412300 	.word	0xf2412300
   1a8f4:	f88d0604 	.word	0xf88d0604
   1a8f8:	f88d3008 	.word	0xf88d3008
   1a8fc:	f88d3009 	.word	0xf88d3009
   1a900:	f88d300a 	.word	0xf88d300a
   1a904:	f88d300b 	.word	0xf88d300b
   1a908:	4637300c 	.word	0x4637300c
   1a90c:	9a0ee752 	.word	0x9a0ee752
   1a910:	d1242a01 	.word	0xd1242a01
   1a914:	2b01781b 	.word	0x2b01781b
   1a918:	f241d121 	.word	0xf241d121
   1a91c:	46371603 	.word	0x46371603
   1a920:	9a0ee748 	.word	0x9a0ee748
   1a924:	d11a2a02 	.word	0xd11a2a02
   1a928:	f2412220 	.word	0xf2412220
   1a92c:	881b1603 	.word	0x881b1603
   1a930:	f8ad9202 	.word	0xf8ad9202
   1a934:	46373013 	.word	0x46373013
   1a938:	9a0ee73c 	.word	0x9a0ee73c
   1a93c:	d10e2a02 	.word	0xd10e2a02
   1a940:	f2412210 	.word	0xf2412210
   1a944:	881b1603 	.word	0x881b1603
   1a948:	f8ad9202 	.word	0xf8ad9202
   1a94c:	46373011 	.word	0x46373011
   1a950:	200ee730 	.word	0x200ee730
   1a954:	fb90f7f7 	.word	0xfb90f7f7
   1a958:	30fff04f 	.word	0x30fff04f
   1a95c:	2016e783 	.word	0x2016e783
   1a960:	fb8af7f7 	.word	0xfb8af7f7
   1a964:	30fff04f 	.word	0x30fff04f
   1a968:	e8bdb006 	.word	0xe8bdb006
   1a96c:	200e87f0 	.word	0x200e87f0
   1a970:	fb82f7f7 	.word	0xfb82f7f7
   1a974:	30fff04f 	.word	0x30fff04f
   1a978:	6803e779 	.word	0x6803e779
   1a97c:	4618b11b 	.word	0x4618b11b
   1a980:	fdbcf7f8 	.word	0xfdbcf7f8
   1a984:	f7f89800 	.word	0xf7f89800
   1a988:	2023fdb1 	.word	0x2023fdb1
   1a98c:	fb74f7f7 	.word	0xfb74f7f7
   1a990:	200e682b 	.word	0x200e682b
   1a994:	0380f423 	.word	0x0380f423
   1a998:	f7f7602b 	.word	0xf7f7602b
   1a99c:	f04ffb6d 	.word	0xf04ffb6d
   1a9a0:	e76430ff 	.word	0xe76430ff
   1a9a4:	f7f72009 	.word	0xf7f72009
   1a9a8:	f04ffb67 	.word	0xf04ffb67
   1a9ac:	e75e30ff 	.word	0xe75e30ff
   1a9b0:	f7f7202a 	.word	0xf7f7202a
   1a9b4:	f04ffb61 	.word	0xf04ffb61
   1a9b8:	e75830ff 	.word	0xe75830ff
   1a9bc:	f7f72073 	.word	0xf7f72073
   1a9c0:	f04ffb5b 	.word	0xf04ffb5b
   1a9c4:	e75230ff 	.word	0xe75230ff
   1a9c8:	2002068c 	.word	0x2002068c
   1a9cc:	49765443 	.word	0x49765443
   1a9d0:	2002d438 	.word	0x2002d438
   1a9d4:	20025e1e 	.word	0x20025e1e
   1a9d8:	20020634 	.word	0x20020634

0001a9dc <gnss_interface_getopt>:
   1a9dc:	4ff0e92d 	.word	0x4ff0e92d
   1a9e0:	b0874c81 	.word	0xb0874c81
   1a9e4:	46986825 	.word	0x46986825
   1a9e8:	2d02b2ad 	.word	0x2d02b2ad
   1a9ec:	f0409b10 	.word	0xf0409b10
   1a9f0:	682580dc 	.word	0x682580dc
   1a9f4:	f10003ee 	.word	0xf10003ee
   1a9f8:	682580f0 	.word	0x682580f0
   1a9fc:	f10001ed 	.word	0xf10001ed
   1aa00:	f5b180e6 	.word	0xf5b180e6
   1aa04:	f0407f01 	.word	0xf0407f01
   1aa08:	497880d6 	.word	0x497880d6
   1aa0c:	f0404288 	.word	0xf0404288
   1aa10:	f1b880d8 	.word	0xf1b880d8
   1aa14:	d00b0f00 	.word	0xd00b0f00
   1aa18:	1e57b153 	.word	0x1e57b153
   1aa1c:	d8072f05 	.word	0xd8072f05
   1aa20:	f007e8df 	.word	0xf007e8df
   1aa24:	0f030f0f 	.word	0x0f030f0f
   1aa28:	681b0303 	.word	0x681b0303
   1aa2c:	d00b2b01 	.word	0xd00b2b01
   1aa30:	f7f72016 	.word	0xf7f72016
   1aa34:	f04ffb21 	.word	0xf04ffb21
   1aa38:	462835ff 	.word	0x462835ff
   1aa3c:	e8bdb007 	.word	0xe8bdb007
   1aa40:	681b8ff0 	.word	0x681b8ff0
   1aa44:	d1f32b02 	.word	0xd1f32b02
   1aa48:	22126823 	.word	0x22126823
   1aa4c:	7380f043 	.word	0x7380f043
   1aa50:	a8012100 	.word	0xa8012100
   1aa54:	f0096023 	.word	0xf0096023
   1aa58:	2112fee6 	.word	0x2112fee6
   1aa5c:	f7f84668 	.word	0xf7f84668
   1aa60:	4605fd1b 	.word	0x4605fd1b
   1aa64:	2d009800 	.word	0x2d009800
   1aa68:	808af040 	.word	0x808af040
   1aa6c:	f0002800 	.word	0xf0002800
   1aa70:	f2418087 	.word	0xf2418087
   1aa74:	f04f1602 	.word	0xf04f1602
   1aa78:	22120e49 	.word	0x22120e49
   1aa7c:	0976f04f 	.word	0x0976f04f
   1aa80:	0b43f04f 	.word	0x0b43f04f
   1aa84:	0a54f04f 	.word	0x0a54f04f
   1aa88:	c168f8df 	.word	0xc168f8df
   1aa8c:	e00ff880 	.word	0xe00ff880
   1aa90:	3000f8bc 	.word	0x3000f8bc
   1aa94:	900ef880 	.word	0x900ef880
   1aa98:	b29b3301 	.word	0xb29b3301
   1aa9c:	4e03ea46 	.word	0x4e03ea46
   1aaa0:	e004f8cd 	.word	0xe004f8cd
   1aaa4:	71857145 	.word	0x71857145
   1aaa8:	720571c5 	.word	0x720571c5
   1aaac:	72857245 	.word	0x72857245
   1aab0:	a90172c5 	.word	0xa90172c5
   1aab4:	f8807102 	.word	0xf8807102
   1aab8:	f880b00c 	.word	0xf880b00c
   1aabc:	f8dfa00d 	.word	0xf8dfa00d
   1aac0:	68009138 	.word	0x68009138
   1aac4:	3000f8ac 	.word	0x3000f8ac
   1aac8:	fe83f009 	.word	0xfe83f009
   1aacc:	98004631 	.word	0x98004631
   1aad0:	5000f8c9 	.word	0x5000f8c9
   1aad4:	fcf4f7f8 	.word	0xfcf4f7f8
   1aad8:	d15c2800 	.word	0xd15c2800
   1aadc:	4d434e44 	.word	0x4d434e44
   1aae0:	46284631 	.word	0x46284631
   1aae4:	fa34f7f7 	.word	0xfa34f7f7
   1aae8:	01db6823 	.word	0x01db6823
   1aaec:	f8d9d4f8 	.word	0xf8d9d4f8
   1aaf0:	b1d80000 	.word	0xb1d80000
   1aaf4:	f0156825 	.word	0xf0156825
   1aaf8:	d00f7500 	.word	0xd00f7500
   1aafc:	d8372f05 	.word	0xd8372f05
   1ab00:	f007e8df 	.word	0xf007e8df
   1ab04:	2b26201a 	.word	0x2b26201a
   1ab08:	25000331 	.word	0x25000331
   1ab0c:	f8887b43 	.word	0xf8887b43
   1ab10:	f7f83000 	.word	0xf7f83000
   1ab14:	2300fcf3 	.word	0x2300fcf3
   1ab18:	3000f8c9 	.word	0x3000f8c9
   1ab1c:	f0236823 	.word	0xf0236823
   1ab20:	60237300 	.word	0x60237300
   1ab24:	b0074628 	.word	0xb0074628
   1ab28:	8ff0e8bd 	.word	0x8ff0e8bd
   1ab2c:	46056823 	.word	0x46056823
   1ab30:	7300f023 	.word	0x7300f023
   1ab34:	e7f56023 	.word	0xe7f56023
   1ab38:	300ff8b0 	.word	0x300ff8b0
   1ab3c:	f8a82500 	.word	0xf8a82500
   1ab40:	e7e63000 	.word	0xe7e63000
   1ab44:	3011f8b0 	.word	0x3011f8b0
   1ab48:	f8a82500 	.word	0xf8a82500
   1ab4c:	e7e03000 	.word	0xe7e03000
   1ab50:	25007b83 	.word	0x25007b83
   1ab54:	3000f888 	.word	0x3000f888
   1ab58:	f8b0e7db 	.word	0xf8b0e7db
   1ab5c:	25003013 	.word	0x25003013
   1ab60:	3000f8a8 	.word	0x3000f8a8
   1ab64:	7b03e7d5 	.word	0x7b03e7d5
   1ab68:	f8882500 	.word	0xf8882500
   1ab6c:	e7d03000 	.word	0xe7d03000
   1ab70:	f7f72016 	.word	0xf7f72016
   1ab74:	f04ffa81 	.word	0xf04ffa81
   1ab78:	f8d935ff 	.word	0xf8d935ff
   1ab7c:	e7c80000 	.word	0xe7c80000
   1ab80:	b11b6803 	.word	0xb11b6803
   1ab84:	f7f84618 	.word	0xf7f84618
   1ab88:	9800fcb9 	.word	0x9800fcb9
   1ab8c:	fcaef7f8 	.word	0xfcaef7f8
   1ab90:	f7f72023 	.word	0xf7f72023
   1ab94:	6823fa71 	.word	0x6823fa71
   1ab98:	f023200e 	.word	0xf023200e
   1ab9c:	60237380 	.word	0x60237380
   1aba0:	35fff04f 	.word	0x35fff04f
   1aba4:	fa68f7f7 	.word	0xfa68f7f7
   1aba8:	200ee747 	.word	0x200ee747
   1abac:	fa64f7f7 	.word	0xfa64f7f7
   1abb0:	35fff04f 	.word	0x35fff04f
   1abb4:	202ae741 	.word	0x202ae741
   1abb8:	fa5ef7f7 	.word	0xfa5ef7f7
   1abbc:	35fff04f 	.word	0x35fff04f
   1abc0:	2009e73b 	.word	0x2009e73b
   1abc4:	fa58f7f7 	.word	0xfa58f7f7
   1abc8:	35fff04f 	.word	0x35fff04f
   1abcc:	2073e735 	.word	0x2073e735
   1abd0:	fa52f7f7 	.word	0xfa52f7f7
   1abd4:	35fff04f 	.word	0x35fff04f
   1abd8:	2005e72f 	.word	0x2005e72f
   1abdc:	fa4cf7f7 	.word	0xfa4cf7f7
   1abe0:	35fff04f 	.word	0x35fff04f
   1abe4:	bf00e729 	.word	0xbf00e729
   1abe8:	2002068c 	.word	0x2002068c
   1abec:	49765443 	.word	0x49765443
   1abf0:	2002d438 	.word	0x2002d438
   1abf4:	20025e1e 	.word	0x20025e1e
   1abf8:	20020634 	.word	0x20020634

0001abfc <gnss_interface_init>:
   1abfc:	b5382100 	.word	0xb5382100
   1ac00:	4d0a4c09 	.word	0x4d0a4c09
   1ac04:	480a6822 	.word	0x480a6822
   1ac08:	402a4b0a 	.word	0x402a4b0a
   1ac0c:	80016022 	.word	0x80016022
   1ac10:	f7f86019 	.word	0xf7f86019
   1ac14:	b928fc3b 	.word	0xb928fc3b
   1ac18:	402b6823 	.word	0x402b6823
   1ac1c:	0301f043 	.word	0x0301f043
   1ac20:	bd386023 	.word	0xbd386023
   1ac24:	bd382003 	.word	0xbd382003
   1ac28:	2002068c 	.word	0x2002068c
   1ac2c:	ffff0000 	.word	0xffff0000
   1ac30:	20025e1e 	.word	0x20025e1e
   1ac34:	20020634 	.word	0x20020634

0001ac38 <gnss_interface_open>:
   1ac38:	b5102801 	.word	0xb5102801
   1ac3c:	f5b2d120 	.word	0xf5b2d120
   1ac40:	d11d7f01 	.word	0xd11d7f01
   1ac44:	d11b2902 	.word	0xd11b2902
   1ac48:	68234c13 	.word	0x68234c13
   1ac4c:	2b01b29b 	.word	0x2b01b29b
   1ac50:	6823d11c 	.word	0x6823d11c
   1ac54:	0c1b4608 	.word	0x0c1b4608
   1ac58:	f043041b 	.word	0xf043041b
   1ac5c:	22000302 	.word	0x22000302
   1ac60:	6023490e 	.word	0x6023490e
   1ac64:	fc14f7fa 	.word	0xfc14f7fa
   1ac68:	60104a0d 	.word	0x60104a0d
   1ac6c:	6823b170 	.word	0x6823b170
   1ac70:	f4436802 	.word	0xf4436802
   1ac74:	68123300 	.word	0x68123300
   1ac78:	47906023 	.word	0x47906023
   1ac7c:	bd104809 	.word	0xbd104809
   1ac80:	f7f72016 	.word	0xf7f72016
   1ac84:	f04ff9f9 	.word	0xf04ff9f9
   1ac88:	bd1030ff 	.word	0xbd1030ff
   1ac8c:	f7f7200e 	.word	0xf7f7200e
   1ac90:	f04ff9f3 	.word	0xf04ff9f3
   1ac94:	bd1030ff 	.word	0xbd1030ff
   1ac98:	2002068c 	.word	0x2002068c
   1ac9c:	000136ad 	.word	0x000136ad
   1aca0:	20020690 	.word	0x20020690
   1aca4:	49765443 	.word	0x49765443

0001aca8 <gnss_interface_close>:
   1aca8:	4b13b530 	.word	0x4b13b530
   1acac:	4298b083 	.word	0x4298b083
   1acb0:	4c12d11c 	.word	0x4c12d11c
   1acb4:	b29b6823 	.word	0xb29b6823
   1acb8:	d00f2b04 	.word	0xd00f2b04
   1acbc:	68284d10 	.word	0x68284d10
   1acc0:	f7fab118 	.word	0xf7fab118
   1acc4:	2300fc05 	.word	0x2300fc05
   1acc8:	2000602b 	.word	0x2000602b
   1accc:	0c1b6823 	.word	0x0c1b6823
   1acd0:	f043041b 	.word	0xf043041b
   1acd4:	60230301 	.word	0x60230301
   1acd8:	bd30b003 	.word	0xbd30b003
   1acdc:	22082300 	.word	0x22082300
   1ace0:	f44f9300 	.word	0xf44f9300
   1ace4:	f7f97101 	.word	0xf7f97101
   1ace8:	e7e7fb87 	.word	0xe7e7fb87
   1acec:	f7f72009 	.word	0xf7f72009
   1acf0:	f04ff9c3 	.word	0xf04ff9c3
   1acf4:	e7ef30ff 	.word	0xe7ef30ff
   1acf8:	49765443 	.word	0x49765443
   1acfc:	2002068c 	.word	0x2002068c
   1ad00:	20020690 	.word	0x20020690

0001ad04 <rpc_dfu_event_handler>:
   1ad04:	4a08b508 	.word	0x4a08b508
   1ad08:	881268c1 	.word	0x881268c1
   1ad0c:	ebb24603 	.word	0xebb24603
   1ad10:	d0054f11 	.word	0xd0054f11
   1ad14:	b1106800 	.word	0xb1106800
   1ad18:	f81ef004 	.word	0xf81ef004
   1ad1c:	bd082000 	.word	0xbd082000
   1ad20:	20014a02 	.word	0x20014a02
   1ad24:	bd086013 	.word	0xbd086013
   1ad28:	20025e20 	.word	0x20025e20
   1ad2c:	20020638 	.word	0x20020638

0001ad30 <mfu_interface_init>:
   1ad30:	b5102300 	.word	0xb5102300
   1ad34:	49094808 	.word	0x49094808
   1ad38:	4c0a4a09 	.word	0x4c0a4a09
   1ad3c:	600b8003 	.word	0x600b8003
   1ad40:	60236013 	.word	0x60236013
   1ad44:	ffd2f003 	.word	0xffd2f003
   1ad48:	2301b910 	.word	0x2301b910
   1ad4c:	bd106023 	.word	0xbd106023
   1ad50:	30fff04f 	.word	0x30fff04f
   1ad54:	bf00bd10 	.word	0xbf00bd10
   1ad58:	20025e20 	.word	0x20025e20
   1ad5c:	20020638 	.word	0x20020638
   1ad60:	2002069c 	.word	0x2002069c
   1ad64:	20020694 	.word	0x20020694

0001ad68 <mfu_interface_open>:
   1ad68:	b5082801 	.word	0xb5082801
   1ad6c:	f240d10b 	.word	0xf240d10b
   1ad70:	429a2303 	.word	0x429a2303
   1ad74:	4b09d107 	.word	0x4b09d107
   1ad78:	2a01681a 	.word	0x2a01681a
   1ad7c:	2202d109 	.word	0x2202d109
   1ad80:	4807601a 	.word	0x4807601a
   1ad84:	2016bd08 	.word	0x2016bd08
   1ad88:	f976f7f7 	.word	0xf976f7f7
   1ad8c:	30fff04f 	.word	0x30fff04f
   1ad90:	f7f7bd08 	.word	0xf7f7bd08
   1ad94:	f04ff971 	.word	0xf04ff971
   1ad98:	bd0830ff 	.word	0xbd0830ff
   1ad9c:	20020694 	.word	0x20020694
   1ada0:	49765432 	.word	0x49765432

0001ada4 <mfu_interface_close>:
   1ada4:	4c32b5f0 	.word	0x4c32b5f0
   1ada8:	6823b083 	.word	0x6823b083
   1adac:	2a011e9a 	.word	0x2a011e9a
   1adb0:	2b03d857 	.word	0x2b03d857
   1adb4:	2301d004 	.word	0x2301d004
   1adb8:	60232000 	.word	0x60232000
   1adbc:	bdf0b003 	.word	0xbdf0b003
   1adc0:	46682100 	.word	0x46682100
   1adc4:	ff98f003 	.word	0xff98f003
   1adc8:	28004603 	.word	0x28004603
   1adcc:	2104d13d 	.word	0x2104d13d
   1add0:	98004e28 	.word	0x98004e28
   1add4:	72018832 	.word	0x72018832
   1add8:	b2923201 	.word	0xb2923201
   1addc:	f0410411 	.word	0xf0410411
   1ade0:	4d250106 	.word	0x4d250106
   1ade4:	710360c1 	.word	0x710360c1
   1ade8:	71837143 	.word	0x71837143
   1adec:	724371c3 	.word	0x724371c3
   1adf0:	72c37283 	.word	0x72c37283
   1adf4:	80322106 	.word	0x80322106
   1adf8:	f003602b 	.word	0xf003602b
   1adfc:	b9d8ff91 	.word	0xb9d8ff91
   1ae00:	33fff04f 	.word	0x33fff04f
   1ae04:	4627ae02 	.word	0x4627ae02
   1ae08:	3d04f846 	.word	0x3d04f846
   1ae0c:	4631e004 	.word	0x4631e004
   1ae10:	f7f74638 	.word	0xf7f74638
   1ae14:	b9f0f89d 	.word	0xb9f0f89d
   1ae18:	28006828 	.word	0x28006828
   1ae1c:	6905d0f7 	.word	0x6905d0f7
   1ae20:	ff92f003 	.word	0xff92f003
   1ae24:	d0c62d00 	.word	0xd0c62d00
   1ae28:	20084b14 	.word	0x20084b14
   1ae2c:	f7f7601d 	.word	0xf7f7601d
   1ae30:	f04ff923 	.word	0xf04ff923
   1ae34:	e7c130ff 	.word	0xe7c130ff
   1ae38:	68039800 	.word	0x68039800
   1ae3c:	4618b11b 	.word	0x4618b11b
   1ae40:	ff8af003 	.word	0xff8af003
   1ae44:	f0039800 	.word	0xf0039800
   1ae48:	200cff7f 	.word	0x200cff7f
   1ae4c:	f914f7f7 	.word	0xf914f7f7
   1ae50:	30fff04f 	.word	0x30fff04f
   1ae54:	203ce7b2 	.word	0x203ce7b2
   1ae58:	f90ef7f7 	.word	0xf90ef7f7
   1ae5c:	30fff04f 	.word	0x30fff04f
   1ae60:	2001e7ac 	.word	0x2001e7ac
   1ae64:	f908f7f7 	.word	0xf908f7f7
   1ae68:	30fff04f 	.word	0x30fff04f
   1ae6c:	bf00e7a6 	.word	0xbf00e7a6
   1ae70:	20020694 	.word	0x20020694
   1ae74:	20025e20 	.word	0x20025e20
   1ae78:	20020638 	.word	0x20020638
   1ae7c:	20020698 	.word	0x20020698

0001ae80 <mfu_interface_sendto>:
   1ae80:	47f0e92d 	.word	0x47f0e92d
   1ae84:	46154e5a 	.word	0x46154e5a
   1ae88:	b0826833 	.word	0xb0826833
   1ae8c:	2a011e9a 	.word	0x2a011e9a
   1ae90:	80a7f200 	.word	0x80a7f200
   1ae94:	2900460f 	.word	0x2900460f
   1ae98:	809df000 	.word	0x809df000
   1ae9c:	f0002d00 	.word	0xf0002d00
   1aea0:	2b02809a 	.word	0x2b02809a
   1aea4:	d04e46e8 	.word	0xd04e46e8
   1aea8:	46294640 	.word	0x46294640
   1aeac:	ff24f003 	.word	0xff24f003
   1aeb0:	b1404606 	.word	0xb1404606
   1aeb4:	f7f7200c 	.word	0xf7f7200c
   1aeb8:	f04ff8df 	.word	0xf04ff8df
   1aebc:	462835ff 	.word	0x462835ff
   1aec0:	e8bdb002 	.word	0xe8bdb002
   1aec4:	9b0087f0 	.word	0x9b0087f0
   1aec8:	68184639 	.word	0x68184639
   1aecc:	f009462a 	.word	0xf009462a
   1aed0:	2104fc80 	.word	0x2104fc80
   1aed4:	98004c47 	.word	0x98004c47
   1aed8:	60458823 	.word	0x60458823
   1aedc:	b29b3301 	.word	0xb29b3301
   1aee0:	8023041a 	.word	0x8023041a
   1aee4:	4c44430a 	.word	0x4c44430a
   1aee8:	724660c2 	.word	0x724660c2
   1aeec:	72c67286 	.word	0x72c67286
   1aef0:	60267201 	.word	0x60267201
   1aef4:	ff14f003 	.word	0xff14f003
   1aef8:	d1622800 	.word	0xd1622800
   1aefc:	33fff04f 	.word	0x33fff04f
   1af00:	4f3bae02 	.word	0x4f3bae02
   1af04:	3d04f846 	.word	0x3d04f846
   1af08:	4631e004 	.word	0x4631e004
   1af0c:	f7f74638 	.word	0xf7f74638
   1af10:	b978f81f 	.word	0xb978f81f
   1af14:	28006820 	.word	0x28006820
   1af18:	6904d0f7 	.word	0x6904d0f7
   1af1c:	ff14f003 	.word	0xff14f003
   1af20:	d0cc2c00 	.word	0xd0cc2c00
   1af24:	20084b35 	.word	0x20084b35
   1af28:	f04f601c 	.word	0xf04f601c
   1af2c:	f7f735ff 	.word	0xf7f735ff
   1af30:	e7c4f8a3 	.word	0xe7c4f8a3
   1af34:	35fff04f 	.word	0x35fff04f
   1af38:	f7f7203c 	.word	0xf7f7203c
   1af3c:	4628f89d 	.word	0x4628f89d
   1af40:	e8bdb002 	.word	0xe8bdb002
   1af44:	464087f0 	.word	0x464087f0
   1af48:	f0032100 	.word	0xf0032100
   1af4c:	4602fed5 	.word	0x4602fed5
   1af50:	d1af2800 	.word	0xd1af2800
   1af54:	0c08f04f 	.word	0x0c08f04f
   1af58:	48294926 	.word	0x48294926
   1af5c:	6804880b 	.word	0x6804880b
   1af60:	98003301 	.word	0x98003301
   1af64:	800bb29b 	.word	0x800bb29b
   1af68:	f043041b 	.word	0xf043041b
   1af6c:	61040303 	.word	0x61040303
   1af70:	60c34c21 	.word	0x60c34c21
   1af74:	71427102 	.word	0x71427102
   1af78:	71c27182 	.word	0x71c27182
   1af7c:	72827242 	.word	0x72827242
   1af80:	f88072c2 	.word	0xf88072c2
   1af84:	2103c008 	.word	0x2103c008
   1af88:	f0036022 	.word	0xf0036022
   1af8c:	b9c0fec9 	.word	0xb9c0fec9
   1af90:	33fff04f 	.word	0x33fff04f
   1af94:	0908f10d 	.word	0x0908f10d
   1af98:	3d04f849 	.word	0x3d04f849
   1af9c:	e00546b2 	.word	0xe00546b2
   1afa0:	46504649 	.word	0x46504649
   1afa4:	ffd4f7f6 	.word	0xffd4f7f6
   1afa8:	d1c32800 	.word	0xd1c32800
   1afac:	28006820 	.word	0x28006820
   1afb0:	6904d0f6 	.word	0x6904d0f6
   1afb4:	fec8f003 	.word	0xfec8f003
   1afb8:	d1b32c00 	.word	0xd1b32c00
   1afbc:	60332303 	.word	0x60332303
   1afc0:	9800e772 	.word	0x9800e772
   1afc4:	b11b6803 	.word	0xb11b6803
   1afc8:	f0034618 	.word	0xf0034618
   1afcc:	9800fec5 	.word	0x9800fec5
   1afd0:	febaf003 	.word	0xfebaf003
   1afd4:	2016e76e 	.word	0x2016e76e
   1afd8:	f84ef7f7 	.word	0xf84ef7f7
   1afdc:	35fff04f 	.word	0x35fff04f
   1afe0:	2001e76d 	.word	0x2001e76d
   1afe4:	f848f7f7 	.word	0xf848f7f7
   1afe8:	35fff04f 	.word	0x35fff04f
   1afec:	bf00e767 	.word	0xbf00e767
   1aff0:	20020694 	.word	0x20020694
   1aff4:	20025e20 	.word	0x20025e20
   1aff8:	20020638 	.word	0x20020638
   1affc:	20020698 	.word	0x20020698
   1b000:	2002069c 	.word	0x2002069c

0001b004 <mfu_interface_setopt>:
   1b004:	4846b5f0 	.word	0x4846b5f0
   1b008:	6800b083 	.word	0x6800b083
   1b00c:	28013802 	.word	0x28013802
   1b010:	f240d877 	.word	0xf240d877
   1b014:	42812003 	.word	0x42812003
   1b018:	3a04d16d 	.word	0x3a04d16d
   1b01c:	d85c2a03 	.word	0xd85c2a03
   1b020:	f002e8df 	.word	0xf002e8df
   1b024:	514e024b 	.word	0x514e024b
   1b028:	46252407 	.word	0x46252407
   1b02c:	46682100 	.word	0x46682100
   1b030:	fe62f003 	.word	0xfe62f003
   1b034:	28004603 	.word	0x28004603
   1b038:	2704d138 	.word	0x2704d138
   1b03c:	98004e39 	.word	0x98004e39
   1b040:	46298832 	.word	0x46298832
   1b044:	b2923201 	.word	0xb2923201
   1b048:	4502ea44 	.word	0x4502ea44
   1b04c:	60c54c36 	.word	0x60c54c36
   1b050:	71437103 	.word	0x71437103
   1b054:	71c37183 	.word	0x71c37183
   1b058:	72837243 	.word	0x72837243
   1b05c:	720772c3 	.word	0x720772c3
   1b060:	60238032 	.word	0x60238032
   1b064:	fe5cf003 	.word	0xfe5cf003
   1b068:	f04fb9b8 	.word	0xf04fb9b8
   1b06c:	ad0233ff 	.word	0xad0233ff
   1b070:	f8454e2b 	.word	0xf8454e2b
   1b074:	e0053d04 	.word	0xe0053d04
   1b078:	46304629 	.word	0x46304629
   1b07c:	ff68f7f6 	.word	0xff68f7f6
   1b080:	d1312800 	.word	0xd1312800
   1b084:	28006820 	.word	0x28006820
   1b088:	6904d0f6 	.word	0x6904d0f6
   1b08c:	fe5cf003 	.word	0xfe5cf003
   1b090:	d13c2c00 	.word	0xd13c2c00
   1b094:	b0034620 	.word	0xb0034620
   1b098:	9800bdf0 	.word	0x9800bdf0
   1b09c:	b11b6803 	.word	0xb11b6803
   1b0a0:	f0034618 	.word	0xf0034618
   1b0a4:	9800fe59 	.word	0x9800fe59
   1b0a8:	fe4ef003 	.word	0xfe4ef003
   1b0ac:	f7f6200c 	.word	0xf7f6200c
   1b0b0:	f04fffe3 	.word	0xf04fffe3
   1b0b4:	b00330ff 	.word	0xb00330ff
   1b0b8:	2405bdf0 	.word	0x2405bdf0
   1b0bc:	e7b54625 	.word	0xe7b54625
   1b0c0:	46252408 	.word	0x46252408
   1b0c4:	b1b3e7b2 	.word	0xb1b3e7b2
   1b0c8:	2a049a08 	.word	0x2a049a08
   1b0cc:	2000d113 	.word	0x2000d113
   1b0d0:	4b16681a 	.word	0x4b16681a
   1b0d4:	b003601a 	.word	0xb003601a
   1b0d8:	202abdf0 	.word	0x202abdf0
   1b0dc:	ffccf7f6 	.word	0xffccf7f6
   1b0e0:	30fff04f 	.word	0x30fff04f
   1b0e4:	bdf0b003 	.word	0xbdf0b003
   1b0e8:	f7f6203c 	.word	0xf7f6203c
   1b0ec:	f04fffc5 	.word	0xf04fffc5
   1b0f0:	b00330ff 	.word	0xb00330ff
   1b0f4:	2016bdf0 	.word	0x2016bdf0
   1b0f8:	ffbef7f6 	.word	0xffbef7f6
   1b0fc:	30fff04f 	.word	0x30fff04f
   1b100:	2001e7c9 	.word	0x2001e7c9
   1b104:	ffb8f7f6 	.word	0xffb8f7f6
   1b108:	30fff04f 	.word	0x30fff04f
   1b10c:	4b08e7c3 	.word	0x4b08e7c3
   1b110:	601c2008 	.word	0x601c2008
   1b114:	ffb0f7f6 	.word	0xffb0f7f6
   1b118:	30fff04f 	.word	0x30fff04f
   1b11c:	bf00e7bb 	.word	0xbf00e7bb
   1b120:	20020694 	.word	0x20020694
   1b124:	20025e20 	.word	0x20025e20
   1b128:	20020638 	.word	0x20020638
   1b12c:	2002069c 	.word	0x2002069c
   1b130:	20020698 	.word	0x20020698

0001b134 <mfu_interface_getopt>:
   1b134:	2003f240 	.word	0x2003f240
   1b138:	41f0e92d 	.word	0x41f0e92d
   1b13c:	b0824281 	.word	0xb0824281
   1b140:	f0409e08 	.word	0xf0409e08
   1b144:	461d80ae 	.word	0x461d80ae
   1b148:	f0002b00 	.word	0xf0002b00
   1b14c:	2e0080aa 	.word	0x2e0080aa
   1b150:	80a7f000 	.word	0x80a7f000
   1b154:	681b4b5e 	.word	0x681b4b5e
   1b158:	2b013b02 	.word	0x2b013b02
   1b15c:	80a7f200 	.word	0x80a7f200
   1b160:	2a133a01 	.word	0x2a133a01
   1b164:	e8dfd879 	.word	0xe8dfd879
   1b168:	5f17f002 	.word	0x5f17f002
   1b16c:	78787878 	.word	0x78787878
   1b170:	78787872 	.word	0x78787872
   1b174:	78787878 	.word	0x78787878
   1b178:	78787878 	.word	0x78787878
   1b17c:	68330a78 	.word	0x68330a78
   1b180:	f0402b04 	.word	0xf0402b04
   1b184:	2200808e 	.word	0x2200808e
   1b188:	4b524610 	.word	0x4b524610
   1b18c:	601a6819 	.word	0x601a6819
   1b190:	b0026029 	.word	0xb0026029
   1b194:	81f0e8bd 	.word	0x81f0e8bd
   1b198:	2b246833 	.word	0x2b246833
   1b19c:	8081f040 	.word	0x8081f040
   1b1a0:	46a02401 	.word	0x46a02401
   1b1a4:	46682100 	.word	0x46682100
   1b1a8:	fda6f003 	.word	0xfda6f003
   1b1ac:	d1462800 	.word	0xd1462800
   1b1b0:	9b004949 	.word	0x9b004949
   1b1b4:	f1b8880a 	.word	0xf1b8880a
   1b1b8:	f1020f03 	.word	0xf1020f03
   1b1bc:	b2920201 	.word	0xb2920201
   1b1c0:	4402ea44 	.word	0x4402ea44
   1b1c4:	800a7118 	.word	0x800a7118
   1b1c8:	715860dc 	.word	0x715860dc
   1b1cc:	71d87198 	.word	0x71d87198
   1b1d0:	2104d04b 	.word	0x2104d04b
   1b1d4:	4f412200 	.word	0x4f412200
   1b1d8:	46186099 	.word	0x46186099
   1b1dc:	603a4641 	.word	0x603a4641
   1b1e0:	fd9ef003 	.word	0xfd9ef003
   1b1e4:	d14d2800 	.word	0xd14d2800
   1b1e8:	33fff04f 	.word	0x33fff04f
   1b1ec:	f844ac02 	.word	0xf844ac02
   1b1f0:	f8df3d04 	.word	0xf8df3d04
   1b1f4:	e00580dc 	.word	0xe00580dc
   1b1f8:	46404621 	.word	0x46404621
   1b1fc:	fea8f7f6 	.word	0xfea8f7f6
   1b200:	d1372800 	.word	0xd1372800
   1b204:	29006839 	.word	0x29006839
   1b208:	690cd0f6 	.word	0x690cd0f6
   1b20c:	d1542c00 	.word	0xd1542c00
   1b210:	31146832 	.word	0x31146832
   1b214:	f0094628 	.word	0xf0094628
   1b218:	6838fadc 	.word	0x6838fadc
   1b21c:	fd94f003 	.word	0xfd94f003
   1b220:	b0024620 	.word	0xb0024620
   1b224:	81f0e8bd 	.word	0x81f0e8bd
   1b228:	2b046833 	.word	0x2b046833
   1b22c:	2402d139 	.word	0x2402d139
   1b230:	46682100 	.word	0x46682100
   1b234:	f00346a0 	.word	0xf00346a0
   1b238:	2800fd5f 	.word	0x2800fd5f
   1b23c:	200cd0b8 	.word	0x200cd0b8
   1b240:	ff1af7f6 	.word	0xff1af7f6
   1b244:	30fff04f 	.word	0x30fff04f
   1b248:	e8bdb002 	.word	0xe8bdb002
   1b24c:	683381f0 	.word	0x683381f0
   1b250:	d1262b04 	.word	0xd1262b04
   1b254:	46a02409 	.word	0x46a02409
   1b258:	202ae7a4 	.word	0x202ae7a4
   1b25c:	ff0cf7f6 	.word	0xff0cf7f6
   1b260:	30fff04f 	.word	0x30fff04f
   1b264:	e8bdb002 	.word	0xe8bdb002
   1b268:	4a1d81f0 	.word	0x4a1d81f0
   1b26c:	68122108 	.word	0x68122108
   1b270:	e7af611a 	.word	0xe7af611a
   1b274:	f7f6203c 	.word	0xf7f6203c
   1b278:	f04ffeff 	.word	0xf04ffeff
   1b27c:	b00230ff 	.word	0xb00230ff
   1b280:	81f0e8bd 	.word	0x81f0e8bd
   1b284:	68039800 	.word	0x68039800
   1b288:	4618b11b 	.word	0x4618b11b
   1b28c:	fd64f003 	.word	0xfd64f003
   1b290:	f0039800 	.word	0xf0039800
   1b294:	200cfd59 	.word	0x200cfd59
   1b298:	feeef7f6 	.word	0xfeeef7f6
   1b29c:	30fff04f 	.word	0x30fff04f
   1b2a0:	2016e7d2 	.word	0x2016e7d2
   1b2a4:	fee8f7f6 	.word	0xfee8f7f6
   1b2a8:	30fff04f 	.word	0x30fff04f
   1b2ac:	2001e771 	.word	0x2001e771
   1b2b0:	fee2f7f6 	.word	0xfee2f7f6
   1b2b4:	30fff04f 	.word	0x30fff04f
   1b2b8:	4b06e76b 	.word	0x4b06e76b
   1b2bc:	601c2008 	.word	0x601c2008
   1b2c0:	fedaf7f6 	.word	0xfedaf7f6
   1b2c4:	f0036838 	.word	0xf0036838
   1b2c8:	f04ffd3f 	.word	0xf04ffd3f
   1b2cc:	e76030ff 	.word	0xe76030ff
   1b2d0:	20020694 	.word	0x20020694
   1b2d4:	20020698 	.word	0x20020698
   1b2d8:	20025e20 	.word	0x20025e20
   1b2dc:	20020638 	.word	0x20020638
   1b2e0:	2002069c 	.word	0x2002069c

0001b2e4 <unimplemented_method>:
   1b2e4:	b508b40f 	.word	0xb508b40f
   1b2e8:	f7f6202d 	.word	0xf7f6202d
   1b2ec:	e8bdfec5 	.word	0xe8bdfec5
   1b2f0:	f04f4008 	.word	0xf04f4008
   1b2f4:	b00430ff 	.word	0xb00430ff
   1b2f8:	bf004770 	.word	0xbf004770

0001b2fc <bsd_platform_init>:
   1b2fc:	b093b5f0 	.word	0xb093b5f0
   1b300:	ff62f003 	.word	0xff62f003
   1b304:	d1522800 	.word	0xd1522800
   1b308:	a801492b 	.word	0xa801492b
   1b30c:	ffd0f003 	.word	0xffd0f003
   1b310:	d14c2800 	.word	0xd14c2800
   1b314:	ff9af7f6 	.word	0xff9af7f6
   1b318:	f814f003 	.word	0xf814f003
   1b31c:	d1462800 	.word	0xd1462800
   1b320:	f44f2320 	.word	0xf44f2320
   1b324:	22084180 	.word	0x22084180
   1b328:	5c40f44f 	.word	0x5c40f44f
   1b32c:	4e244f23 	.word	0x4e244f23
   1b330:	93059303 	.word	0x93059303
   1b334:	4d239307 	.word	0x4d239307
   1b338:	910d9109 	.word	0x910d9109
   1b33c:	49234c22 	.word	0x49234c22
   1b340:	e9cd4b23 	.word	0xe9cd4b23
   1b344:	eb0d0010 	.word	0xeb0d0010
   1b348:	f8cd0002 	.word	0xf8cd0002
   1b34c:	e9cdc02c 	.word	0xe9cdc02c
   1b350:	9702220e 	.word	0x9702220e
   1b354:	95069604 	.word	0x95069604
   1b358:	910a9408 	.word	0x910a9408
   1b35c:	f7f8930c 	.word	0xf7f8930c
   1b360:	b108ff0d 	.word	0xb108ff0d
   1b364:	bdf0b013 	.word	0xbdf0b013
   1b368:	fd8af7fc 	.word	0xfd8af7fc
   1b36c:	f7f8b9f8 	.word	0xf7f8b9f8
   1b370:	b9e0f9fd 	.word	0xb9e0f9fd
   1b374:	f832f7fd 	.word	0xf832f7fd
   1b378:	f7fab9c8 	.word	0xf7fab9c8
   1b37c:	b9b0f965 	.word	0xb9b0f965
   1b380:	fcd6f7ff 	.word	0xfcd6f7ff
   1b384:	f7f7b998 	.word	0xf7f7b998
   1b388:	b980fff9 	.word	0xb980fff9
   1b38c:	f8e6f000 	.word	0xf8e6f000
   1b390:	f005b968 	.word	0xf005b968
   1b394:	b950f90f 	.word	0xb950f90f
   1b398:	fc30f7ff 	.word	0xfc30f7ff
   1b39c:	f7f8b938 	.word	0xf7f8b938
   1b3a0:	3000fbe9 	.word	0x3000fbe9
   1b3a4:	2001bf18 	.word	0x2001bf18
   1b3a8:	b0134240 	.word	0xb0134240
   1b3ac:	f04fbdf0 	.word	0xf04fbdf0
   1b3b0:	b01330ff 	.word	0xb01330ff
   1b3b4:	bf00bdf0 	.word	0xbf00bdf0
   1b3b8:	00026bc4 	.word	0x00026bc4
   1b3bc:	20010000 	.word	0x20010000
   1b3c0:	20010040 	.word	0x20010040
   1b3c4:	20010020 	.word	0x20010020
   1b3c8:	20017060 	.word	0x20017060
   1b3cc:	20010060 	.word	0x20010060
   1b3d0:	20013060 	.word	0x20013060

0001b3d4 <bsd_platform_af_method_table_get>:
   1b3d4:	d02a2805 	.word	0xd02a2805
   1b3d8:	d914b508 	.word	0xd914b508
   1b3dc:	d016280a 	.word	0xd016280a
   1b3e0:	d10b2866 	.word	0xd10b2866
   1b3e4:	2302f240 	.word	0x2302f240
   1b3e8:	d032429a 	.word	0xd032429a
   1b3ec:	2305f240 	.word	0x2305f240
   1b3f0:	d032429a 	.word	0xd032429a
   1b3f4:	2301f240 	.word	0x2301f240
   1b3f8:	d02c429a 	.word	0xd02c429a
   1b3fc:	f7f62016 	.word	0xf7f62016
   1b400:	2000fe3b 	.word	0x2000fe3b
   1b404:	2801bd08 	.word	0x2801bd08
   1b408:	2802d016 	.word	0x2802d016
   1b40c:	f5a2d1f6 	.word	0xf5a2d1f6
   1b410:	2a0a7282 	.word	0x2a0a7282
   1b414:	2301d819 	.word	0x2301d819
   1b418:	4103f240 	.word	0x4103f240
   1b41c:	fa034810 	.word	0xfa034810
   1b420:	420af202 	.word	0x420af202
   1b424:	0328f100 	.word	0x0328f100
   1b428:	4618bf18 	.word	0x4618bf18
   1b42c:	2903bd08 	.word	0x2903bd08
   1b430:	bf18480c 	.word	0xbf18480c
   1b434:	47702000 	.word	0x47702000
   1b438:	2303f240 	.word	0x2303f240
   1b43c:	d006429a 	.word	0xd006429a
   1b440:	7f01f5b2 	.word	0x7f01f5b2
   1b444:	4808d1da 	.word	0x4808d1da
   1b448:	4805bd08 	.word	0x4805bd08
   1b44c:	4807bd08 	.word	0x4807bd08
   1b450:	4807bd08 	.word	0x4807bd08
   1b454:	4807bd08 	.word	0x4807bd08
   1b458:	4807bd08 	.word	0x4807bd08
   1b45c:	bf00bd08 	.word	0xbf00bd08
   1b460:	00026a90 	.word	0x00026a90
   1b464:	00026b80 	.word	0x00026b80
   1b468:	00026b30 	.word	0x00026b30
   1b46c:	00026ae0 	.word	0x00026ae0
   1b470:	00026b08 	.word	0x00026b08
   1b474:	00026a68 	.word	0x00026a68
   1b478:	00026b58 	.word	0x00026b58

0001b47c <bsd_platform_fd_method_table_get>:
   1b47c:	4605b538 	.word	0x4605b538
   1b480:	fe1af7fc 	.word	0xfe1af7fc
   1b484:	b9504604 	.word	0xb9504604
   1b488:	43ab4b2a 	.word	0x43ab4b2a
   1b48c:	4b2ad032 	.word	0x4b2ad032
   1b490:	d04343ab 	.word	0xd04343ab
   1b494:	43ab4b29 	.word	0x43ab4b29
   1b498:	4829d146 	.word	0x4829d146
   1b49c:	68c3bd38 	.word	0x68c3bd38
   1b4a0:	2b056942 	.word	0x2b056942
   1b4a4:	d911d034 	.word	0xd911d034
   1b4a8:	d0132b0a 	.word	0xd0132b0a
   1b4ac:	d12a2b66 	.word	0xd12a2b66
   1b4b0:	2302f240 	.word	0x2302f240
   1b4b4:	d031429a 	.word	0xd031429a
   1b4b8:	2305f240 	.word	0x2305f240
   1b4bc:	d031429a 	.word	0xd031429a
   1b4c0:	2301f240 	.word	0x2301f240
   1b4c4:	d11e429a 	.word	0xd11e429a
   1b4c8:	bd38481e 	.word	0xbd38481e
   1b4cc:	d0132b01 	.word	0xd0132b01
   1b4d0:	d1182b02 	.word	0xd1182b02
   1b4d4:	7282f5a2 	.word	0x7282f5a2
   1b4d8:	d8212a0a 	.word	0xd8212a0a
   1b4dc:	f2402301 	.word	0xf2402301
   1b4e0:	48194103 	.word	0x48194103
   1b4e4:	f202fa03 	.word	0xf202fa03
   1b4e8:	f100420a 	.word	0xf100420a
   1b4ec:	bf180428 	.word	0xbf180428
   1b4f0:	bd384620 	.word	0xbd384620
   1b4f4:	bd384815 	.word	0xbd384815
   1b4f8:	2303f240 	.word	0x2303f240
   1b4fc:	d0f9429a 	.word	0xd0f9429a
   1b500:	7f01f5b2 	.word	0x7f01f5b2
   1b504:	2016d0c9 	.word	0x2016d0c9
   1b508:	fdb6f7f6 	.word	0xfdb6f7f6
   1b50c:	bd382000 	.word	0xbd382000
   1b510:	480f6903 	.word	0x480f6903
   1b514:	bf182b03 	.word	0xbf182b03
   1b518:	bd382000 	.word	0xbd382000
   1b51c:	bd38480d 	.word	0xbd38480d
   1b520:	bd384809 	.word	0xbd384809
   1b524:	bd38480c 	.word	0xbd38480c
   1b528:	f7f62009 	.word	0xf7f62009
   1b52c:	4620fda5 	.word	0x4620fda5
   1b530:	bf00bd38 	.word	0xbf00bd38
   1b534:	49765432 	.word	0x49765432
   1b538:	789a0000 	.word	0x789a0000
   1b53c:	49765443 	.word	0x49765443
   1b540:	00026b30 	.word	0x00026b30
   1b544:	00026a68 	.word	0x00026a68
   1b548:	00026a90 	.word	0x00026a90
   1b54c:	00026ae0 	.word	0x00026ae0
   1b550:	00026b80 	.word	0x00026b80
   1b554:	00026b08 	.word	0x00026b08
   1b558:	00026b58 	.word	0x00026b58

0001b55c <nrf_inbuilt_key_init>:
   1b55c:	b086b570 	.word	0xb086b570
   1b560:	a802491d 	.word	0xa802491d
   1b564:	fea4f003 	.word	0xfea4f003
   1b568:	4601bb00 	.word	0x4601bb00
   1b56c:	f2404604 	.word	0xf2404604
   1b570:	20662201 	.word	0x20662201
   1b574:	f8fcf7f8 	.word	0xf8fcf7f8
   1b578:	28004e18 	.word	0x28004e18
   1b57c:	60304605 	.word	0x60304605
   1b580:	4817db10 	.word	0x4817db10
   1b584:	f8f3f009 	.word	0xf8f3f009
   1b588:	46024623 	.word	0x46024623
   1b58c:	46284914 	.word	0x46284914
   1b590:	94009401 	.word	0x94009401
   1b594:	f896f7f8 	.word	0xf896f7f8
   1b598:	48114605 	.word	0x48114605
   1b59c:	f8e7f009 	.word	0xf8e7f009
   1b5a0:	d00742a8 	.word	0xd00742a8
   1b5a4:	46202405 	.word	0x46202405
   1b5a8:	bd70b006 	.word	0xbd70b006
   1b5ac:	46202469 	.word	0x46202469
   1b5b0:	bd70b006 	.word	0xbd70b006
   1b5b4:	e9cd6830 	.word	0xe9cd6830
   1b5b8:	a9034400 	.word	0xa9034400
   1b5bc:	220a4623 	.word	0x220a4623
   1b5c0:	f968f7f8 	.word	0xf968f7f8
   1b5c4:	dded2801 	.word	0xdded2801
   1b5c8:	2202a803 	.word	0x2202a803
   1b5cc:	f0094905 	.word	0xf0094905
   1b5d0:	2800f8e1 	.word	0x2800f8e1
   1b5d4:	e7e5d0e7 	.word	0xe7e5d0e7
   1b5d8:	2002d440 	.word	0x2002d440
   1b5dc:	2002d43c 	.word	0x2002d43c
   1b5e0:	00026bd8 	.word	0x00026bd8
   1b5e4:	000267b8 	.word	0x000267b8

0001b5e8 <symbol_0005436>:
   1b5e8:	460a4b02 	.word	0x460a4b02
   1b5ec:	2100681b 	.word	0x2100681b
   1b5f0:	bf004718 	.word	0xbf004718
   1b5f4:	2002d454 	.word	0x2002d454

0001b5f8 <mpi_mul_hlp>:
   1b5f8:	e92d280f 	.word	0xe92d280f
   1b5fc:	46864ff0 	.word	0x46864ff0
   1b600:	82e0f240 	.word	0x82e0f240
   1b604:	0800f04f 	.word	0x0800f04f
   1b608:	f1014684 	.word	0xf1014684
   1b60c:	f1020440 	.word	0xf1020440
   1b610:	f8540040 	.word	0xf8540040
   1b614:	f8506c40 	.word	0xf8506c40
   1b618:	fba35c40 	.word	0xfba35c40
   1b61c:	eb186706 	.word	0xeb186706
   1b620:	bf2c0806 	.word	0xbf2c0806
   1b624:	0901f04f 	.word	0x0901f04f
   1b628:	0900f04f 	.word	0x0900f04f
   1b62c:	0508eb15 	.word	0x0508eb15
   1b630:	f04f444f 	.word	0xf04f444f
   1b634:	bf280900 	.word	0xbf280900
   1b638:	0901f04f 	.word	0x0901f04f
   1b63c:	5c40f840 	.word	0x5c40f840
   1b640:	6c3cf854 	.word	0x6c3cf854
   1b644:	fba344b9 	.word	0xfba344b9
   1b648:	eb19ab06 	.word	0xeb19ab06
   1b64c:	bf2c090a 	.word	0xbf2c090a
   1b650:	0801f04f 	.word	0x0801f04f
   1b654:	0800f04f 	.word	0x0800f04f
   1b658:	6c3cf850 	.word	0x6c3cf850
   1b65c:	050beb08 	.word	0x050beb08
   1b660:	0609eb16 	.word	0x0609eb16
   1b664:	0800f04f 	.word	0x0800f04f
   1b668:	f04fbf28 	.word	0xf04fbf28
   1b66c:	f8400801 	.word	0xf8400801
   1b670:	f8546c3c 	.word	0xf8546c3c
   1b674:	44a86c38 	.word	0x44a86c38
   1b678:	6706fba3 	.word	0x6706fba3
   1b67c:	0806eb18 	.word	0x0806eb18
   1b680:	f04fbf2c 	.word	0xf04fbf2c
   1b684:	f04f0901 	.word	0xf04f0901
   1b688:	f8500900 	.word	0xf8500900
   1b68c:	444f5c38 	.word	0x444f5c38
   1b690:	0508eb15 	.word	0x0508eb15
   1b694:	0900f04f 	.word	0x0900f04f
   1b698:	f04fbf28 	.word	0xf04fbf28
   1b69c:	f8400901 	.word	0xf8400901
   1b6a0:	f8545c38 	.word	0xf8545c38
   1b6a4:	44b96c34 	.word	0x44b96c34
   1b6a8:	ab06fba3 	.word	0xab06fba3
   1b6ac:	090aeb19 	.word	0x090aeb19
   1b6b0:	f04fbf2c 	.word	0xf04fbf2c
   1b6b4:	f04f0801 	.word	0xf04f0801
   1b6b8:	f8500800 	.word	0xf8500800
   1b6bc:	eb086c34 	.word	0xeb086c34
   1b6c0:	eb16050b 	.word	0xeb16050b
   1b6c4:	f04f0609 	.word	0xf04f0609
   1b6c8:	bf280800 	.word	0xbf280800
   1b6cc:	0801f04f 	.word	0x0801f04f
   1b6d0:	6c34f840 	.word	0x6c34f840
   1b6d4:	6c30f854 	.word	0x6c30f854
   1b6d8:	fba344a8 	.word	0xfba344a8
   1b6dc:	eb186706 	.word	0xeb186706
   1b6e0:	bf2c0806 	.word	0xbf2c0806
   1b6e4:	0901f04f 	.word	0x0901f04f
   1b6e8:	0900f04f 	.word	0x0900f04f
   1b6ec:	5c30f850 	.word	0x5c30f850
   1b6f0:	eb15444f 	.word	0xeb15444f
   1b6f4:	f04f0508 	.word	0xf04f0508
   1b6f8:	bf280900 	.word	0xbf280900
   1b6fc:	0901f04f 	.word	0x0901f04f
   1b700:	5c30f840 	.word	0x5c30f840
   1b704:	6c2cf854 	.word	0x6c2cf854
   1b708:	fba344b9 	.word	0xfba344b9
   1b70c:	eb19ab06 	.word	0xeb19ab06
   1b710:	bf2c090a 	.word	0xbf2c090a
   1b714:	0801f04f 	.word	0x0801f04f
   1b718:	0800f04f 	.word	0x0800f04f
   1b71c:	6c2cf850 	.word	0x6c2cf850
   1b720:	050beb08 	.word	0x050beb08
   1b724:	0609eb16 	.word	0x0609eb16
   1b728:	0800f04f 	.word	0x0800f04f
   1b72c:	f04fbf28 	.word	0xf04fbf28
   1b730:	f8400801 	.word	0xf8400801
   1b734:	f8546c2c 	.word	0xf8546c2c
   1b738:	44a86c28 	.word	0x44a86c28
   1b73c:	6706fba3 	.word	0x6706fba3
   1b740:	0806eb18 	.word	0x0806eb18
   1b744:	f04fbf2c 	.word	0xf04fbf2c
   1b748:	f04f0901 	.word	0xf04f0901
   1b74c:	f8500900 	.word	0xf8500900
   1b750:	444f5c28 	.word	0x444f5c28
   1b754:	0508eb15 	.word	0x0508eb15
   1b758:	0900f04f 	.word	0x0900f04f
   1b75c:	f04fbf28 	.word	0xf04fbf28
   1b760:	f8400901 	.word	0xf8400901
   1b764:	f8545c28 	.word	0xf8545c28
   1b768:	44b96c24 	.word	0x44b96c24
   1b76c:	ab06fba3 	.word	0xab06fba3
   1b770:	090aeb19 	.word	0x090aeb19
   1b774:	f04fbf2c 	.word	0xf04fbf2c
   1b778:	f04f0801 	.word	0xf04f0801
   1b77c:	f8500800 	.word	0xf8500800
   1b780:	eb086c24 	.word	0xeb086c24
   1b784:	eb16050b 	.word	0xeb16050b
   1b788:	f04f0609 	.word	0xf04f0609
   1b78c:	bf280800 	.word	0xbf280800
   1b790:	0801f04f 	.word	0x0801f04f
   1b794:	6c24f840 	.word	0x6c24f840
   1b798:	6c20f854 	.word	0x6c20f854
   1b79c:	fba344a8 	.word	0xfba344a8
   1b7a0:	eb186706 	.word	0xeb186706
   1b7a4:	bf2c0806 	.word	0xbf2c0806
   1b7a8:	0901f04f 	.word	0x0901f04f
   1b7ac:	0900f04f 	.word	0x0900f04f
   1b7b0:	5c20f850 	.word	0x5c20f850
   1b7b4:	eb15444f 	.word	0xeb15444f
   1b7b8:	f04f0508 	.word	0xf04f0508
   1b7bc:	bf280900 	.word	0xbf280900
   1b7c0:	0901f04f 	.word	0x0901f04f
   1b7c4:	5c20f840 	.word	0x5c20f840
   1b7c8:	6c1cf854 	.word	0x6c1cf854
   1b7cc:	fba344b9 	.word	0xfba344b9
   1b7d0:	eb19ab06 	.word	0xeb19ab06
   1b7d4:	bf2c090a 	.word	0xbf2c090a
   1b7d8:	0801f04f 	.word	0x0801f04f
   1b7dc:	0800f04f 	.word	0x0800f04f
   1b7e0:	6c1cf850 	.word	0x6c1cf850
   1b7e4:	050beb08 	.word	0x050beb08
   1b7e8:	0609eb16 	.word	0x0609eb16
   1b7ec:	0800f04f 	.word	0x0800f04f
   1b7f0:	f04fbf28 	.word	0xf04fbf28
   1b7f4:	f8400801 	.word	0xf8400801
   1b7f8:	f8546c1c 	.word	0xf8546c1c
   1b7fc:	44a86c18 	.word	0x44a86c18
   1b800:	6706fba3 	.word	0x6706fba3
   1b804:	0806eb18 	.word	0x0806eb18
   1b808:	f04fbf2c 	.word	0xf04fbf2c
   1b80c:	f04f0901 	.word	0xf04f0901
   1b810:	f8500900 	.word	0xf8500900
   1b814:	444f5c18 	.word	0x444f5c18
   1b818:	0508eb15 	.word	0x0508eb15
   1b81c:	0900f04f 	.word	0x0900f04f
   1b820:	f04fbf28 	.word	0xf04fbf28
   1b824:	f8400901 	.word	0xf8400901
   1b828:	f8545c18 	.word	0xf8545c18
   1b82c:	44b96c14 	.word	0x44b96c14
   1b830:	ab06fba3 	.word	0xab06fba3
   1b834:	090aeb19 	.word	0x090aeb19
   1b838:	f04fbf2c 	.word	0xf04fbf2c
   1b83c:	f04f0801 	.word	0xf04f0801
   1b840:	f8500800 	.word	0xf8500800
   1b844:	eb086c14 	.word	0xeb086c14
   1b848:	eb16050b 	.word	0xeb16050b
   1b84c:	f04f0609 	.word	0xf04f0609
   1b850:	bf280800 	.word	0xbf280800
   1b854:	0801f04f 	.word	0x0801f04f
   1b858:	6c14f840 	.word	0x6c14f840
   1b85c:	6c10f854 	.word	0x6c10f854
   1b860:	fba344a8 	.word	0xfba344a8
   1b864:	eb186706 	.word	0xeb186706
   1b868:	bf2c0806 	.word	0xbf2c0806
   1b86c:	0901f04f 	.word	0x0901f04f
   1b870:	0900f04f 	.word	0x0900f04f
   1b874:	5c10f850 	.word	0x5c10f850
   1b878:	eb15444f 	.word	0xeb15444f
   1b87c:	f04f0508 	.word	0xf04f0508
   1b880:	bf280900 	.word	0xbf280900
   1b884:	0901f04f 	.word	0x0901f04f
   1b888:	5c10f840 	.word	0x5c10f840
   1b88c:	6c0cf854 	.word	0x6c0cf854
   1b890:	fba344b9 	.word	0xfba344b9
   1b894:	eb19ab06 	.word	0xeb19ab06
   1b898:	bf2c090a 	.word	0xbf2c090a
   1b89c:	0801f04f 	.word	0x0801f04f
   1b8a0:	0800f04f 	.word	0x0800f04f
   1b8a4:	6c0cf850 	.word	0x6c0cf850
   1b8a8:	050beb08 	.word	0x050beb08
   1b8ac:	0609eb16 	.word	0x0609eb16
   1b8b0:	0800f04f 	.word	0x0800f04f
   1b8b4:	f04fbf28 	.word	0xf04fbf28
   1b8b8:	f8400801 	.word	0xf8400801
   1b8bc:	f8546c0c 	.word	0xf8546c0c
   1b8c0:	44a86c08 	.word	0x44a86c08
   1b8c4:	6706fba3 	.word	0x6706fba3
   1b8c8:	0806eb18 	.word	0x0806eb18
   1b8cc:	f04fbf2c 	.word	0xf04fbf2c
   1b8d0:	f04f0901 	.word	0xf04f0901
   1b8d4:	f8500900 	.word	0xf8500900
   1b8d8:	444f5c08 	.word	0x444f5c08
   1b8dc:	0508eb15 	.word	0x0508eb15
   1b8e0:	0900f04f 	.word	0x0900f04f
   1b8e4:	f04fbf28 	.word	0xf04fbf28
   1b8e8:	f8400901 	.word	0xf8400901
   1b8ec:	f8545c08 	.word	0xf8545c08
   1b8f0:	44b96c04 	.word	0x44b96c04
   1b8f4:	ab06fba3 	.word	0xab06fba3
   1b8f8:	090aeb19 	.word	0x090aeb19
   1b8fc:	f04fbf2c 	.word	0xf04fbf2c
   1b900:	f04f0801 	.word	0xf04f0801
   1b904:	f8500800 	.word	0xf8500800
   1b908:	eb086c04 	.word	0xeb086c04
   1b90c:	eb16050b 	.word	0xeb16050b
   1b910:	f04f0609 	.word	0xf04f0609
   1b914:	bf280800 	.word	0xbf280800
   1b918:	0801f04f 	.word	0x0801f04f
   1b91c:	0c10f1ac 	.word	0x0c10f1ac
   1b920:	0f0ff1bc 	.word	0x0f0ff1bc
   1b924:	6c04f840 	.word	0x6c04f840
   1b928:	f10444a8 	.word	0xf10444a8
   1b92c:	f1000440 	.word	0xf1000440
   1b930:	f63f0040 	.word	0xf63f0040
   1b934:	f1aeae6e 	.word	0xf1aeae6e
   1b938:	09000010 	.word	0x09000010
   1b93c:	01803001 	.word	0x01803001
   1b940:	44024401 	.word	0x44024401
   1b944:	000ff00e 	.word	0x000ff00e
   1b948:	68172807 	.word	0x68172807
   1b94c:	8092f240 	.word	0x8092f240
   1b950:	6856680c 	.word	0x6856680c
   1b954:	9a04fba3 	.word	0x9a04fba3
   1b958:	0809eb18 	.word	0x0809eb18
   1b95c:	f04fbf2c 	.word	0xf04fbf2c
   1b960:	f04f0c01 	.word	0xf04f0c01
   1b964:	eb170c00 	.word	0xeb170c00
   1b968:	bf2c0708 	.word	0xbf2c0708
   1b96c:	24002401 	.word	0x24002401
   1b970:	684f6017 	.word	0x684f6017
   1b974:	050ceb0a 	.word	0x050ceb0a
   1b978:	8907fba3 	.word	0x8907fba3
   1b97c:	eb14442c 	.word	0xeb14442c
   1b980:	bf2c0408 	.word	0xbf2c0408
   1b984:	25002501 	.word	0x25002501
   1b988:	eb0519a6 	.word	0xeb0519a6
   1b98c:	f04f0709 	.word	0xf04f0709
   1b990:	bf280500 	.word	0xbf280500
   1b994:	60562501 	.word	0x60562501
   1b998:	443d688e 	.word	0x443d688e
   1b99c:	7806fba3 	.word	0x7806fba3
   1b9a0:	bf2c19ed 	.word	0xbf2c19ed
   1b9a4:	24002401 	.word	0x24002401
   1b9a8:	eb086896 	.word	0xeb086896
   1b9ac:	19ad0704 	.word	0x19ad0704
   1b9b0:	0400f04f 	.word	0x0400f04f
   1b9b4:	2401bf28 	.word	0x2401bf28
   1b9b8:	68ce6095 	.word	0x68ce6095
   1b9bc:	fba3443c 	.word	0xfba3443c
   1b9c0:	19e47806 	.word	0x19e47806
   1b9c4:	2501bf2c 	.word	0x2501bf2c
   1b9c8:	68d62500 	.word	0x68d62500
   1b9cc:	0705eb08 	.word	0x0705eb08
   1b9d0:	f04f19a4 	.word	0xf04f19a4
   1b9d4:	bf280500 	.word	0xbf280500
   1b9d8:	60d42501 	.word	0x60d42501
   1b9dc:	443d690e 	.word	0x443d690e
   1b9e0:	7806fba3 	.word	0x7806fba3
   1b9e4:	bf2c19ed 	.word	0xbf2c19ed
   1b9e8:	24002401 	.word	0x24002401
   1b9ec:	eb086916 	.word	0xeb086916
   1b9f0:	19ad0704 	.word	0x19ad0704
   1b9f4:	0400f04f 	.word	0x0400f04f
   1b9f8:	2401bf28 	.word	0x2401bf28
   1b9fc:	694e6115 	.word	0x694e6115
   1ba00:	fba3443c 	.word	0xfba3443c
   1ba04:	19e47806 	.word	0x19e47806
   1ba08:	2501bf2c 	.word	0x2501bf2c
   1ba0c:	69562500 	.word	0x69562500
   1ba10:	0705eb08 	.word	0x0705eb08
   1ba14:	f04f19a4 	.word	0xf04f19a4
   1ba18:	bf280500 	.word	0xbf280500
   1ba1c:	61542501 	.word	0x61542501
   1ba20:	443d698e 	.word	0x443d698e
   1ba24:	7806fba3 	.word	0x7806fba3
   1ba28:	bf2c19ed 	.word	0xbf2c19ed
   1ba2c:	24002401 	.word	0x24002401
   1ba30:	eb086996 	.word	0xeb086996
   1ba34:	19ad0704 	.word	0x19ad0704
   1ba38:	0400f04f 	.word	0x0400f04f
   1ba3c:	2401bf28 	.word	0x2401bf28
   1ba40:	69ce6195 	.word	0x69ce6195
   1ba44:	fba3443c 	.word	0xfba3443c
   1ba48:	eb149a06 	.word	0xeb149a06
   1ba4c:	bf2c0409 	.word	0xbf2c0409
   1ba50:	0801f04f 	.word	0x0801f04f
   1ba54:	0800f04f 	.word	0x0800f04f
   1ba58:	eb0869d6 	.word	0xeb0869d6
   1ba5c:	19a4050a 	.word	0x19a4050a
   1ba60:	0800f04f 	.word	0x0800f04f
   1ba64:	f04fbf28 	.word	0xf04fbf28
   1ba68:	61d40801 	.word	0x61d40801
   1ba6c:	44a83120 	.word	0x44a83120
   1ba70:	32203808 	.word	0x32203808
   1ba74:	f0002800 	.word	0xf0002800
   1ba78:	680c8097 	.word	0x680c8097
   1ba7c:	fba36816 	.word	0xfba36816
   1ba80:	eb199a04 	.word	0xeb199a04
   1ba84:	bf2c0808 	.word	0xbf2c0808
   1ba88:	24002401 	.word	0x24002401
   1ba8c:	0608eb16 	.word	0x0608eb16
   1ba90:	0500f04f 	.word	0x0500f04f
   1ba94:	2501bf28 	.word	0x2501bf28
   1ba98:	28014454 	.word	0x28014454
   1ba9c:	0804eb05 	.word	0x0804eb05
   1baa0:	d07f6016 	.word	0xd07f6016
   1baa4:	6856684c 	.word	0x6856684c
   1baa8:	9a04fba3 	.word	0x9a04fba3
   1baac:	0808eb19 	.word	0x0808eb19
   1bab0:	2401bf2c 	.word	0x2401bf2c
   1bab4:	eb162400 	.word	0xeb162400
   1bab8:	f04f0608 	.word	0xf04f0608
   1babc:	bf280500 	.word	0xbf280500
   1bac0:	44542501 	.word	0x44542501
   1bac4:	eb052802 	.word	0xeb052802
   1bac8:	60560804 	.word	0x60560804
   1bacc:	688cd06a 	.word	0x688cd06a
   1bad0:	fba36896 	.word	0xfba36896
   1bad4:	eb199a04 	.word	0xeb199a04
   1bad8:	bf2c0808 	.word	0xbf2c0808
   1badc:	24002401 	.word	0x24002401
   1bae0:	0608eb16 	.word	0x0608eb16
   1bae4:	0500f04f 	.word	0x0500f04f
   1bae8:	2501bf28 	.word	0x2501bf28
   1baec:	28034454 	.word	0x28034454
   1baf0:	0804eb05 	.word	0x0804eb05
   1baf4:	d0556096 	.word	0xd0556096
   1baf8:	68d668cc 	.word	0x68d668cc
   1bafc:	9a04fba3 	.word	0x9a04fba3
   1bb00:	0808eb19 	.word	0x0808eb19
   1bb04:	2401bf2c 	.word	0x2401bf2c
   1bb08:	eb162400 	.word	0xeb162400
   1bb0c:	f04f0608 	.word	0xf04f0608
   1bb10:	bf280500 	.word	0xbf280500
   1bb14:	44542501 	.word	0x44542501
   1bb18:	eb052804 	.word	0xeb052804
   1bb1c:	60d60804 	.word	0x60d60804
   1bb20:	690cd040 	.word	0x690cd040
   1bb24:	fba36916 	.word	0xfba36916
   1bb28:	eb199a04 	.word	0xeb199a04
   1bb2c:	bf2c0408 	.word	0xbf2c0408
   1bb30:	0801f04f 	.word	0x0801f04f
   1bb34:	0800f04f 	.word	0x0800f04f
   1bb38:	eb0a19a6 	.word	0xeb0a19a6
   1bb3c:	f04f0508 	.word	0xf04f0508
   1bb40:	bf280800 	.word	0xbf280800
   1bb44:	0801f04f 	.word	0x0801f04f
   1bb48:	44a82805 	.word	0x44a82805
   1bb4c:	d0296116 	.word	0xd0296116
   1bb50:	6956694c 	.word	0x6956694c
   1bb54:	9a04fba3 	.word	0x9a04fba3
   1bb58:	0409eb18 	.word	0x0409eb18
   1bb5c:	f04fbf2c 	.word	0xf04fbf2c
   1bb60:	f04f0801 	.word	0xf04f0801
   1bb64:	19a60800 	.word	0x19a60800
   1bb68:	0508eb0a 	.word	0x0508eb0a
   1bb6c:	0800f04f 	.word	0x0800f04f
   1bb70:	f04fbf28 	.word	0xf04fbf28
   1bb74:	28060801 	.word	0x28060801
   1bb78:	615644a8 	.word	0x615644a8
   1bb7c:	698cd012 	.word	0x698cd012
   1bb80:	fba36991 	.word	0xfba36991
   1bb84:	eb144504 	.word	0xeb144504
   1bb88:	bf2c0808 	.word	0xbf2c0808
   1bb8c:	23002301 	.word	0x23002301
   1bb90:	0108eb11 	.word	0x0108eb11
   1bb94:	0400f04f 	.word	0x0400f04f
   1bb98:	2401bf28 	.word	0x2401bf28
   1bb9c:	eb04442b 	.word	0xeb04442b
   1bba0:	61910803 	.word	0x61910803
   1bba4:	0280eb02 	.word	0x0280eb02
   1bba8:	23006815 	.word	0x23006815
   1bbac:	0508eb15 	.word	0x0508eb15
   1bbb0:	2301bf28 	.word	0x2301bf28
   1bbb4:	5b04f842 	.word	0x5b04f842
   1bbb8:	0801f04f 	.word	0x0801f04f
   1bbbc:	d1f32b00 	.word	0xd1f32b00
   1bbc0:	8ff0e8bd 	.word	0x8ff0e8bd
   1bbc4:	0800f04f 	.word	0x0800f04f
   1bbc8:	bf00e6be 	.word	0xbf00e6be

0001bbcc <symbol_0002616>:
   1bbcc:	2b006843 	.word	0x2b006843
   1bbd0:	b430d033 	.word	0xb430d033
   1bbd4:	4280f103 	.word	0x4280f103
   1bbd8:	3a016885 	.word	0x3a016885
   1bbdc:	4022f855 	.word	0x4022f855
   1bbe0:	0282eb05 	.word	0x0282eb05
   1bbe4:	e009b11c 	.word	0xe009b11c
   1bbe8:	4d04f852 	.word	0x4d04f852
   1bbec:	3b01b934 	.word	0x3b01b934
   1bbf0:	688bd1fa 	.word	0x688bd1fa
   1bbf4:	b9d06818 	.word	0xb9d06818
   1bbf8:	4770bc30 	.word	0x4770bc30
   1bbfc:	6812688a 	.word	0x6812688a
   1bc00:	2b01b192 	.word	0x2b01b192
   1bc04:	6800d810 	.word	0x6800d810
   1bc08:	2800680b 	.word	0x2800680b
   1bc0c:	2b00dd01 	.word	0x2b00dd01
   1bc10:	2b00db11 	.word	0x2b00db11
   1bc14:	2800dd01 	.word	0x2800dd01
   1bc18:	682bdb16 	.word	0x682bdb16
   1bc1c:	d8eb4293 	.word	0xd8eb4293
   1bc20:	bc30d306 	.word	0xbc30d306
   1bc24:	47702000 	.word	0x47702000
   1bc28:	bc306800 	.word	0xbc306800
   1bc2c:	68084770 	.word	0x68084770
   1bc30:	bc304240 	.word	0xbc304240
   1bc34:	20014770 	.word	0x20014770
   1bc38:	688be7de 	.word	0x688be7de
   1bc3c:	b9006818 	.word	0xb9006818
   1bc40:	68084770 	.word	0x68084770
   1bc44:	e7fb4240 	.word	0xe7fb4240
   1bc48:	30fff04f 	.word	0x30fff04f
   1bc4c:	bf00e7d4 	.word	0xbf00e7d4

0001bc50 <symbol_00038d0>:
   1bc50:	2300b120 	.word	0x2300b120
   1bc54:	e9c02201 	.word	0xe9c02201
   1bc58:	60832300 	.word	0x60832300
   1bc5c:	bf004770 	.word	0xbf004770

0001bc60 <symbol_000fb6e>:
   1bc60:	b510b1b0 	.word	0xb510b1b0
   1bc64:	68804604 	.word	0x68804604
   1bc68:	6862b160 	.word	0x6862b160
   1bc6c:	b13a1e53 	.word	0xb13a1e53
   1bc70:	3b012200 	.word	0x3b012200
   1bc74:	60021c59 	.word	0x60021c59
   1bc78:	0004f100 	.word	0x0004f100
   1bc7c:	68a0d1f9 	.word	0x68a0d1f9
   1bc80:	fc4ef003 	.word	0xfc4ef003
   1bc84:	22012300 	.word	0x22012300
   1bc88:	2300e9c4 	.word	0x2300e9c4
   1bc8c:	bd1060a3 	.word	0xbd1060a3
   1bc90:	bf004770 	.word	0xbf004770

0001bc94 <symbol_0006423>:
   1bc94:	6842b570 	.word	0x6842b570
   1bc98:	428a4605 	.word	0x428a4605
   1bc9c:	d807460c 	.word	0xd807460c
   1bca0:	7310f242 	.word	0x7310f242
   1bca4:	d8514299 	.word	0xd8514299
   1bca8:	d335428a 	.word	0xd335428a
   1bcac:	bd702000 	.word	0xbd702000
   1bcb0:	d0101e51 	.word	0xd0101e51
   1bcb4:	f8536883 	.word	0xf8536883
   1bcb8:	28000021 	.word	0x28000021
   1bcbc:	f102d149 	.word	0xf102d149
   1bcc0:	3a014280 	.word	0x3a014280
   1bcc4:	0382eb03 	.word	0x0382eb03
   1bcc8:	f853e003 	.word	0xf853e003
   1bccc:	b9180d04 	.word	0xb9180d04
   1bcd0:	1e4a4611 	.word	0x1e4a4611
   1bcd4:	2101d1f9 	.word	0x2101d1f9
   1bcd8:	bf38428c 	.word	0xbf38428c
   1bcdc:	2104460c 	.word	0x2104460c
   1bce0:	f0034620 	.word	0xf0034620
   1bce4:	4606fc09 	.word	0x4606fc09
   1bce8:	68a9b380 	.word	0x68a9b380
   1bcec:	00a2b181 	.word	0x00a2b181
   1bcf0:	fd6ff008 	.word	0xfd6ff008
   1bcf4:	2001e9d5 	.word	0x2001e9d5
   1bcf8:	b13a1e53 	.word	0xb13a1e53
   1bcfc:	3b012200 	.word	0x3b012200
   1bd00:	60021c59 	.word	0x60021c59
   1bd04:	0004f100 	.word	0x0004f100
   1bd08:	68a8d1f9 	.word	0x68a8d1f9
   1bd0c:	fc08f003 	.word	0xfc08f003
   1bd10:	4601e9c5 	.word	0x4601e9c5
   1bd14:	bd702000 	.word	0xbd702000
   1bd18:	46202104 	.word	0x46202104
   1bd1c:	fbecf003 	.word	0xfbecf003
   1bd20:	b1984606 	.word	0xb1984606
   1bd24:	290068a9 	.word	0x290068a9
   1bd28:	686ad0f2 	.word	0x686ad0f2
   1bd2c:	f0080092 	.word	0xf0080092
   1bd30:	e9d5fd50 	.word	0xe9d5fd50
   1bd34:	1e532001 	.word	0x1e532001
   1bd38:	d0e72a00 	.word	0xd0e72a00
   1bd3c:	3b012200 	.word	0x3b012200
   1bd40:	60021c59 	.word	0x60021c59
   1bd44:	0004f100 	.word	0x0004f100
   1bd48:	e7ded1f9 	.word	0xe7ded1f9
   1bd4c:	000ff06f 	.word	0x000ff06f
   1bd50:	4611bd70 	.word	0x4611bd70
   1bd54:	bf00e7c0 	.word	0xbf00e7c0

0001bd58 <symbol_00084df>:
   1bd58:	d0524288 	.word	0xd0524288
   1bd5c:	688ab5f8 	.word	0x688ab5f8
   1bd60:	4605460e 	.word	0x4605460e
   1bd64:	d04e2a00 	.word	0xd04e2a00
   1bd68:	1e4b6849 	.word	0x1e4b6849
   1bd6c:	f852d00e 	.word	0xf852d00e
   1bd70:	28000023 	.word	0x28000023
   1bd74:	f101d13b 	.word	0xf101d13b
   1bd78:	39014180 	.word	0x39014180
   1bd7c:	0281eb02 	.word	0x0281eb02
   1bd80:	f852e002 	.word	0xf852e002
   1bd84:	bb900d04 	.word	0xbb900d04
   1bd88:	d1fa3b01 	.word	0xd1fa3b01
   1bd8c:	68332401 	.word	0x68332401
   1bd90:	686a602b 	.word	0x686a602b
   1bd94:	d30c42a2 	.word	0xd30c42a2
   1bd98:	009268af 	.word	0x009268af
   1bd9c:	46382100 	.word	0x46382100
   1bda0:	fd41f008 	.word	0xfd41f008
   1bda4:	68b100a2 	.word	0x68b100a2
   1bda8:	f00868a8 	.word	0xf00868a8
   1bdac:	2000fd12 	.word	0x2000fd12
   1bdb0:	2104bdf8 	.word	0x2104bdf8
   1bdb4:	f0034620 	.word	0xf0034620
   1bdb8:	4607fb9f 	.word	0x4607fb9f
   1bdbc:	68a9b1f0 	.word	0x68a9b1f0
   1bdc0:	686ab189 	.word	0x686ab189
   1bdc4:	f0080092 	.word	0xf0080092
   1bdc8:	e9d5fd04 	.word	0xe9d5fd04
   1bdcc:	1e532001 	.word	0x1e532001
   1bdd0:	2200b13a 	.word	0x2200b13a
   1bdd4:	1c593b01 	.word	0x1c593b01
   1bdd8:	f1006002 	.word	0xf1006002
   1bddc:	d1f90004 	.word	0xd1f90004
   1bde0:	f00368a8 	.word	0xf00368a8
   1bde4:	4622fb9d 	.word	0x4622fb9d
   1bde8:	4701e9c5 	.word	0x4701e9c5
   1bdec:	f242e7d5 	.word	0xf242e7d5
   1bdf0:	68317210 	.word	0x68317210
   1bdf4:	42941c5c 	.word	0x42941c5c
   1bdf8:	d9ca6029 	.word	0xd9ca6029
   1bdfc:	000ff06f 	.word	0x000ff06f
   1be00:	2000bdf8 	.word	0x2000bdf8
   1be04:	28004770 	.word	0x28004770
   1be08:	6880d0d1 	.word	0x6880d0d1
   1be0c:	6869b158 	.word	0x6869b158
   1be10:	b1311e4b 	.word	0xb1311e4b
   1be14:	1c5c3b01 	.word	0x1c5c3b01
   1be18:	f1006002 	.word	0xf1006002
   1be1c:	d1f90004 	.word	0xd1f90004
   1be20:	f00368a8 	.word	0xf00368a8
   1be24:	2000fb7d 	.word	0x2000fb7d
   1be28:	e9c52301 	.word	0xe9c52301
   1be2c:	60a83000 	.word	0x60a83000
   1be30:	bf00bdf8 	.word	0xbf00bdf8

0001be34 <symbol_000fa6b>:
   1be34:	684bb5f0 	.word	0x684bb5f0
   1be38:	b085460d 	.word	0xb085460d
   1be3c:	46064614 	.word	0x46064614
   1be40:	b17b6851 	.word	0xb17b6851
   1be44:	f10368a8 	.word	0xf10368a8
   1be48:	3a014280 	.word	0x3a014280
   1be4c:	7022f850 	.word	0x7022f850
   1be50:	0082eb00 	.word	0x0082eb00
   1be54:	e04fb127 	.word	0xe04fb127
   1be58:	2d04f850 	.word	0x2d04f850
   1be5c:	d14b2a00 	.word	0xd14b2a00
   1be60:	d1f93b01 	.word	0xd1f93b01
   1be64:	f101b189 	.word	0xf101b189
   1be68:	68a74080 	.word	0x68a74080
   1be6c:	f8573801 	.word	0xf8573801
   1be70:	2a002020 	.word	0x2a002020
   1be74:	8099f040 	.word	0x8099f040
   1be78:	0080eb07 	.word	0x0080eb07
   1be7c:	f850e003 	.word	0xf850e003
   1be80:	2a002d04 	.word	0x2a002d04
   1be84:	3901d142 	.word	0x3901d142
   1be88:	2300d1f9 	.word	0x2300d1f9
   1be8c:	42b42201 	.word	0x42b42201
   1be90:	2301e9cd 	.word	0x2301e9cd
   1be94:	d07f9303 	.word	0xd07f9303
   1be98:	d00542b5 	.word	0xd00542b5
   1be9c:	46304629 	.word	0x46304629
   1bea0:	ff5af7ff 	.word	0xff5af7ff
   1bea4:	b9a84607 	.word	0xb9a84607
   1bea8:	60332301 	.word	0x60332301
   1beac:	b1806860 	.word	0xb1806860
   1beb0:	c008f8d4 	.word	0xc008f8d4
   1beb4:	4380f100 	.word	0x4380f100
   1beb8:	f85c3b01 	.word	0xf85c3b01
   1bebc:	eb0c2023 	.word	0xeb0c2023
   1bec0:	b1220383 	.word	0xb1220383
   1bec4:	f853e042 	.word	0xf853e042
   1bec8:	2a002d04 	.word	0x2a002d04
   1becc:	3801d13e 	.word	0x3801d13e
   1bed0:	2700d1f9 	.word	0x2700d1f9
   1bed4:	b1609803 	.word	0xb1609803
   1bed8:	1e539a02 	.word	0x1e539a02
   1bedc:	2200b13a 	.word	0x2200b13a
   1bee0:	1c593b01 	.word	0x1c593b01
   1bee4:	f1006002 	.word	0xf1006002
   1bee8:	d1f90004 	.word	0xd1f90004
   1beec:	f0039803 	.word	0xf0039803
   1bef0:	4638fb17 	.word	0x4638fb17
   1bef4:	bdf0b005 	.word	0xbdf0b005
   1bef8:	d0c62900 	.word	0xd0c62900
   1befc:	4080f101 	.word	0x4080f101
   1bf00:	380168a7 	.word	0x380168a7
   1bf04:	2020f857 	.word	0x2020f857
   1bf08:	d0b52a00 	.word	0xd0b52a00
   1bf0c:	d8bc428b 	.word	0xd8bc428b
   1bf10:	2b00d34b 	.word	0x2b00d34b
   1bf14:	68a8d0b9 	.word	0x68a8d0b9
   1bf18:	4180f103 	.word	0x4180f103
   1bf1c:	f8503901 	.word	0xf8503901
   1bf20:	f857c021 	.word	0xf857c021
   1bf24:	0089e021 	.word	0x0089e021
   1bf28:	440845e6 	.word	0x440845e6
   1bf2c:	0201eb07 	.word	0x0201eb07
   1bf30:	d83ad3ab 	.word	0xd83ad3ab
   1bf34:	e0064601 	.word	0xe0064601
   1bf38:	7d04f851 	.word	0x7d04f851
   1bf3c:	0d04f852 	.word	0x0d04f852
   1bf40:	d8a24287 	.word	0xd8a24287
   1bf44:	3b01d331 	.word	0x3b01d331
   1bf48:	e79ed1f6 	.word	0xe79ed1f6
   1bf4c:	462b2500 	.word	0x462b2500
   1bf50:	f85168b1 	.word	0xf85168b1
   1bf54:	35016b04 	.word	0x35016b04
   1bf58:	f8411af2 	.word	0xf8411af2
   1bf5c:	f85c2c04 	.word	0xf85c2c04
   1bf60:	460c7b04 	.word	0x460c7b04
   1bf64:	bf2c42ba 	.word	0xbf2c42ba
   1bf68:	0e00f04f 	.word	0x0e00f04f
   1bf6c:	0e01f04f 	.word	0x0e01f04f
   1bf70:	429e1bd2 	.word	0x429e1bd2
   1bf74:	4673bf2c 	.word	0x4673bf2c
   1bf78:	0301f10e 	.word	0x0301f10e
   1bf7c:	f8414285 	.word	0xf8414285
   1bf80:	d3e62c04 	.word	0xd3e62c04
   1bf84:	e7a4b90b 	.word	0xe7a4b90b
   1bf88:	68222301 	.word	0x68222301
   1bf8c:	429a1ad1 	.word	0x429a1ad1
   1bf90:	1b04f844 	.word	0x1b04f844
   1bf94:	e79cd3f8 	.word	0xe79cd3f8
   1bf98:	a8014621 	.word	0xa8014621
   1bf9c:	fedcf7ff 	.word	0xfedcf7ff
   1bfa0:	28004607 	.word	0x28004607
   1bfa4:	ac01d196 	.word	0xac01d196
   1bfa8:	f06fe776 	.word	0xf06fe776
   1bfac:	46380709 	.word	0x46380709
   1bfb0:	bdf0b005 	.word	0xbdf0b005

0001bfb4 <symbol_0006ccd>:
   1bfb4:	7310f242 	.word	0x7310f242
   1bfb8:	41f0e92d 	.word	0x41f0e92d
   1bfbc:	4256684f 	.word	0x4256684f
   1bfc0:	429f4316 	.word	0x429f4316
   1bfc4:	16c0f3c6 	.word	0x16c0f3c6
   1bfc8:	6842d84f 	.word	0x6842d84f
   1bfcc:	42974604 	.word	0x42974604
   1bfd0:	d82c460d 	.word	0xd82c460d
   1bfd4:	68236829 	.word	0x68236829
   1bfd8:	f106fb01 	.word	0xf106fb01
   1bfdc:	0701f1c6 	.word	0x0701f1c6
   1bfe0:	1307fb03 	.word	0x1307fb03
   1bfe4:	686b6023 	.word	0x686b6023
   1bfe8:	2300b18b 	.word	0x2300b18b
   1bfec:	68aa68a1 	.word	0x68aa68a1
   1bff0:	0023f851 	.word	0x0023f851
   1bff4:	2023f852 	.word	0x2023f852
   1bff8:	f007fb00 	.word	0xf007fb00
   1bffc:	0206fb02 	.word	0x0206fb02
   1c000:	2023f841 	.word	0x2023f841
   1c004:	3301686a 	.word	0x3301686a
   1c008:	d8ef429a 	.word	0xd8ef429a
   1c00c:	42936862 	.word	0x42936862
   1c010:	009ad20a 	.word	0x009ad20a
   1c014:	330168a0 	.word	0x330168a0
   1c018:	fb075881 	.word	0xfb075881
   1c01c:	5081f101 	.word	0x5081f101
   1c020:	32046861 	.word	0x32046861
   1c024:	d8f54299 	.word	0xd8f54299
   1c028:	e8bd2000 	.word	0xe8bd2000
   1c02c:	210481f0 	.word	0x210481f0
   1c030:	f0034638 	.word	0xf0034638
   1c034:	4680fa61 	.word	0x4680fa61
   1c038:	68a1b1b8 	.word	0x68a1b1b8
   1c03c:	6862b189 	.word	0x6862b189
   1c040:	f0080092 	.word	0xf0080092
   1c044:	e9d4fbc6 	.word	0xe9d4fbc6
   1c048:	1e532001 	.word	0x1e532001
   1c04c:	2200b13a 	.word	0x2200b13a
   1c050:	1c593b01 	.word	0x1c593b01
   1c054:	f1006002 	.word	0xf1006002
   1c058:	d1f90004 	.word	0xd1f90004
   1c05c:	f00368a0 	.word	0xf00368a0
   1c060:	463afa5f 	.word	0x463afa5f
   1c064:	7801e9c4 	.word	0x7801e9c4
   1c068:	f06fe7b4 	.word	0xf06fe7b4
   1c06c:	e7dc000f 	.word	0xe7dc000f

0001c070 <symbol_000b345>:
   1c070:	6845b5f8 	.word	0x6845b5f8
   1c074:	460e4604 	.word	0x460e4604
   1c078:	6887b19d 	.word	0x6887b19d
   1c07c:	463800aa 	.word	0x463800aa
   1c080:	f0082100 	.word	0xf0082100
   1c084:	2e00fbd0 	.word	0x2e00fbd0
   1c088:	2301bfac 	.word	0x2301bfac
   1c08c:	33fff04f 	.word	0x33fff04f
   1c090:	71e6ea86 	.word	0x71e6ea86
   1c094:	eba168a2 	.word	0xeba168a2
   1c098:	601171e6 	.word	0x601171e6
   1c09c:	20006023 	.word	0x20006023
   1c0a0:	2104bdf8 	.word	0x2104bdf8
   1c0a4:	f0032001 	.word	0xf0032001
   1c0a8:	4607fa27 	.word	0x4607fa27
   1c0ac:	68a1b1b8 	.word	0x68a1b1b8
   1c0b0:	6862b181 	.word	0x6862b181
   1c0b4:	f0080092 	.word	0xf0080092
   1c0b8:	e9d4fb8c 	.word	0xe9d4fb8c
   1c0bc:	1e532001 	.word	0x1e532001
   1c0c0:	3b01b132 	.word	0x3b01b132
   1c0c4:	60051c5a 	.word	0x60051c5a
   1c0c8:	0004f100 	.word	0x0004f100
   1c0cc:	68a0d1f9 	.word	0x68a0d1f9
   1c0d0:	fa26f003 	.word	0xfa26f003
   1c0d4:	22042301 	.word	0x22042301
   1c0d8:	3701e9c4 	.word	0x3701e9c4
   1c0dc:	f06fe7cf 	.word	0xf06fe7cf
   1c0e0:	bdf8000f 	.word	0xbdf8000f

0001c0e4 <symbol_0007f0f>:
   1c0e4:	ebb16843 	.word	0xebb16843
   1c0e8:	d2091f43 	.word	0xd2091f43
   1c0ec:	094a6883 	.word	0x094a6883
   1c0f0:	0022f853 	.word	0x0022f853
   1c0f4:	011ff001 	.word	0x011ff001
   1c0f8:	f00040c8 	.word	0xf00040c8
   1c0fc:	47700001 	.word	0x47700001
   1c100:	47702000 	.word	0x47702000

0001c104 <symbol_00030c0>:
   1c104:	b3136843 	.word	0xb3136843
   1c108:	6882b410 	.word	0x6882b410
   1c10c:	d0241e58 	.word	0xd0241e58
   1c110:	1020f852 	.word	0x1020f852
   1c114:	f103b9e9 	.word	0xf103b9e9
   1c118:	3b014380 	.word	0x3b014380
   1c11c:	0383eb02 	.word	0x0383eb02
   1c120:	f853e002 	.word	0xf853e002
   1c124:	b9a11d04 	.word	0xb9a11d04
   1c128:	d1fa3801 	.word	0xd1fa3801
   1c12c:	68112420 	.word	0x68112420
   1c130:	f04f2200 	.word	0xf04f2200
   1c134:	e0024300 	.word	0xe0024300
   1c138:	2a203201 	.word	0x2a203201
   1c13c:	420bd004 	.word	0x420bd004
   1c140:	0353ea4f 	.word	0x0353ea4f
   1c144:	1aa0d0f8 	.word	0x1aa0d0f8
   1c148:	4b04f85d 	.word	0x4b04f85d
   1c14c:	46184770 	.word	0x46184770
   1c150:	01404770 	.word	0x01404770
   1c154:	0420f100 	.word	0x0420f100
   1c158:	6811e7ea 	.word	0x6811e7ea
   1c15c:	e7e72420 	.word	0xe7e72420

0001c160 <symbol_000b7da>:
   1c160:	b3236843 	.word	0xb3236843
   1c164:	6882b410 	.word	0x6882b410
   1c168:	d0261e58 	.word	0xd0261e58
   1c16c:	1020f852 	.word	0x1020f852
   1c170:	f103b9f9 	.word	0xf103b9f9
   1c174:	3b014380 	.word	0x3b014380
   1c178:	0383eb02 	.word	0x0383eb02
   1c17c:	f853e002 	.word	0xf853e002
   1c180:	b9b11d04 	.word	0xb9b11d04
   1c184:	d1fa3801 	.word	0xd1fa3801
   1c188:	68112420 	.word	0x68112420
   1c18c:	f04f2200 	.word	0xf04f2200
   1c190:	e0024300 	.word	0xe0024300
   1c194:	2a203201 	.word	0x2a203201
   1c198:	420bd004 	.word	0x420bd004
   1c19c:	0353ea4f 	.word	0x0353ea4f
   1c1a0:	1aa0d0f8 	.word	0x1aa0d0f8
   1c1a4:	08c03007 	.word	0x08c03007
   1c1a8:	4b04f85d 	.word	0x4b04f85d
   1c1ac:	46184770 	.word	0x46184770
   1c1b0:	01404770 	.word	0x01404770
   1c1b4:	0420f100 	.word	0x0420f100
   1c1b8:	6811e7e8 	.word	0x6811e7e8
   1c1bc:	e7e52420 	.word	0xe7e52420

0001c1c0 <symbol_000eaf4>:
   1c1c0:	43f8e92d 	.word	0x43f8e92d
   1c1c4:	460f4605 	.word	0x460f4605
   1c1c8:	2a004616 	.word	0x2a004616
   1c1cc:	780cd07e 	.word	0x780cd07e
   1c1d0:	b124460b 	.word	0xb124460b
   1c1d4:	f813e07e 	.word	0xf813e07e
   1c1d8:	2a002f01 	.word	0x2a002f01
   1c1dc:	3401d146 	.word	0x3401d146
   1c1e0:	d1f842a6 	.word	0xd1f842a6
   1c1e4:	8004f8d5 	.word	0x8004f8d5
   1c1e8:	0f00f1b8 	.word	0x0f00f1b8
   1c1ec:	2104d169 	.word	0x2104d169
   1c1f0:	f0032001 	.word	0xf0032001
   1c1f4:	4681f981 	.word	0x4681f981
   1c1f8:	d06d2800 	.word	0xd06d2800
   1c1fc:	b18968a9 	.word	0xb18968a9
   1c200:	0092686a 	.word	0x0092686a
   1c204:	fae5f008 	.word	0xfae5f008
   1c208:	2001e9d5 	.word	0x2001e9d5
   1c20c:	b13a1e53 	.word	0xb13a1e53
   1c210:	3b014642 	.word	0x3b014642
   1c214:	60021c59 	.word	0x60021c59
   1c218:	0004f100 	.word	0x0004f100
   1c21c:	68a8d1f9 	.word	0x68a8d1f9
   1c220:	f97ef003 	.word	0xf97ef003
   1c224:	22042301 	.word	0x22042301
   1c228:	3901e9c5 	.word	0x3901e9c5
   1c22c:	46482100 	.word	0x46482100
   1c230:	faf9f008 	.word	0xfaf9f008
   1c234:	22012300 	.word	0x22012300
   1c238:	42a668a9 	.word	0x42a668a9
   1c23c:	602a600b 	.word	0x602a600b
   1c240:	eb07d911 	.word	0xeb07d911
   1c244:	1b340c06 	.word	0x1b340c06
   1c248:	f02368ae 	.word	0xf02368ae
   1c24c:	00df0103 	.word	0x00df0103
   1c250:	0d01f81c 	.word	0x0d01f81c
   1c254:	f0075872 	.word	0xf0075872
   1c258:	40b80718 	.word	0x40b80718
   1c25c:	43023301 	.word	0x43023301
   1c260:	507242a3 	.word	0x507242a3
   1c264:	2000d1f0 	.word	0x2000d1f0
   1c268:	83f8e8bd 	.word	0x83f8e8bd
   1c26c:	f0121b32 	.word	0xf0121b32
   1c270:	bf180803 	.word	0xbf180803
   1c274:	0801f04f 	.word	0x0801f04f
   1c278:	7310f242 	.word	0x7310f242
   1c27c:	0892eb08 	.word	0x0892eb08
   1c280:	d8294598 	.word	0xd8294598
   1c284:	4598686b 	.word	0x4598686b
   1c288:	2104d929 	.word	0x2104d929
   1c28c:	f0034640 	.word	0xf0034640
   1c290:	4681f933 	.word	0x4681f933
   1c294:	68a9b300 	.word	0x68a9b300
   1c298:	686ab189 	.word	0x686ab189
   1c29c:	f0080092 	.word	0xf0080092
   1c2a0:	e9d5fa98 	.word	0xe9d5fa98
   1c2a4:	1e532001 	.word	0x1e532001
   1c2a8:	2200b13a 	.word	0x2200b13a
   1c2ac:	1c593b01 	.word	0x1c593b01
   1c2b0:	f1006002 	.word	0xf1006002
   1c2b4:	d1f90004 	.word	0xd1f90004
   1c2b8:	f00368a8 	.word	0xf00368a8
   1c2bc:	e9c5f931 	.word	0xe9c5f931
   1c2c0:	ea4f8901 	.word	0xea4f8901
   1c2c4:	f8d50288 	.word	0xf8d50288
   1c2c8:	e7af9008 	.word	0xe7af9008
   1c2cc:	8004f8d0 	.word	0x8004f8d0
   1c2d0:	e7894614 	.word	0xe7894614
   1c2d4:	e7ca2400 	.word	0xe7ca2400
   1c2d8:	000ff06f 	.word	0x000ff06f
   1c2dc:	4698e7c4 	.word	0x4698e7c4
   1c2e0:	bf00e782 	.word	0xbf00e782

0001c2e4 <symbol_000116e>:
   1c2e4:	41f0e92d 	.word	0x41f0e92d
   1c2e8:	46886844 	.word	0x46886844
   1c2ec:	d03e2c00 	.word	0xd03e2c00
   1c2f0:	1e624615 	.word	0x1e624615
   1c2f4:	68804607 	.word	0x68804607
   1c2f8:	f850d040 	.word	0xf850d040
   1c2fc:	bb991022 	.word	0xbb991022
   1c300:	4380f104 	.word	0x4380f104
   1c304:	eb003b01 	.word	0xeb003b01
   1c308:	e0020383 	.word	0xe0020383
   1c30c:	1d04f853 	.word	0x1d04f853
   1c310:	3a01bb51 	.word	0x3a01bb51
   1c314:	2627d1fa 	.word	0x2627d1fa
   1c318:	22006801 	.word	0x22006801
   1c31c:	4300f04f 	.word	0x4300f04f
   1c320:	3201e002 	.word	0x3201e002
   1c324:	d0032a20 	.word	0xd0032a20
   1c328:	ea4f420b 	.word	0xea4f420b
   1c32c:	d0f80353 	.word	0xd0f80353
   1c330:	08f61ab6 	.word	0x08f61ab6
   1c334:	d32442b5 	.word	0xd32442b5
   1c338:	2100462a 	.word	0x2100462a
   1c33c:	f0084640 	.word	0xf0084640
   1c340:	b176fa72 	.word	0xb176fa72
   1c344:	44a82300 	.word	0x44a82300
   1c348:	f02368b9 	.word	0xf02368b9
   1c34c:	588c0203 	.word	0x588c0203
   1c350:	f00500dd 	.word	0xf00500dd
   1c354:	33010518 	.word	0x33010518
   1c358:	42b340ec 	.word	0x42b340ec
   1c35c:	4d01f808 	.word	0x4d01f808
   1c360:	2000d1f2 	.word	0x2000d1f2
   1c364:	81f0e8bd 	.word	0x81f0e8bd
   1c368:	36270156 	.word	0x36270156
   1c36c:	4608e7d5 	.word	0x4608e7d5
   1c370:	f0084621 	.word	0xf0084621
   1c374:	4620fa58 	.word	0x4620fa58
   1c378:	81f0e8bd 	.word	0x81f0e8bd
   1c37c:	26276801 	.word	0x26276801
   1c380:	f06fe7cb 	.word	0xf06fe7cb
   1c384:	e7ed0007 	.word	0xe7ed0007

0001c388 <symbol_0004fb7>:
   1c388:	41f0e92d 	.word	0x41f0e92d
   1c38c:	46046843 	.word	0x46046843
   1c390:	f001094d 	.word	0xf001094d
   1c394:	b343061f 	.word	0xb343061f
   1c398:	f8d01e5a 	.word	0xf8d01e5a
   1c39c:	f000e008 	.word	0xf000e008
   1c3a0:	f85e8099 	.word	0xf85e8099
   1c3a4:	f1bcc022 	.word	0xf1bcc022
   1c3a8:	f0400f00 	.word	0xf0400f00
   1c3ac:	f103809c 	.word	0xf103809c
   1c3b0:	38014080 	.word	0x38014080
   1c3b4:	0080eb0e 	.word	0x0080eb0e
   1c3b8:	f850e003 	.word	0xf850e003
   1c3bc:	2f007d04 	.word	0x2f007d04
   1c3c0:	3a01d15e 	.word	0x3a01d15e
   1c3c4:	f04fd1f9 	.word	0xf04fd1f9
   1c3c8:	f8de0820 	.word	0xf8de0820
   1c3cc:	20007000 	.word	0x20007000
   1c3d0:	4200f04f 	.word	0x4200f04f
   1c3d4:	3001e002 	.word	0x3001e002
   1c3d8:	d0052820 	.word	0xd0052820
   1c3dc:	ea4f423a 	.word	0xea4f423a
   1c3e0:	d0f80252 	.word	0xd0f80252
   1c3e4:	0c00eba8 	.word	0x0c00eba8
   1c3e8:	ebb14461 	.word	0xebb14461
   1c3ec:	d90b1f43 	.word	0xd90b1f43
   1c3f0:	021ff011 	.word	0x021ff011
   1c3f4:	2201bf18 	.word	0x2201bf18
   1c3f8:	7010f242 	.word	0x7010f242
   1c3fc:	1751eb02 	.word	0x1751eb02
   1c400:	d86d4287 	.word	0xd86d4287
   1c404:	d840429f 	.word	0xd840429f
   1c408:	429db1f5 	.word	0x429db1f5
   1c40c:	f06fd25d 	.word	0xf06fd25d
   1c410:	1b7f4740 	.word	0x1b7f4740
   1c414:	ebc719da 	.word	0xebc719da
   1c418:	00927787 	.word	0x00927787
   1c41c:	68a000bf 	.word	0x68a000bf
   1c420:	19c13b01 	.word	0x19c13b01
   1c424:	44115880 	.word	0x44115880
   1c428:	f841429d 	.word	0xf841429d
   1c42c:	f1a20c04 	.word	0xf1a20c04
   1c430:	d1f40204 	.word	0xd1f40204
   1c434:	f1032100 	.word	0xf1032100
   1c438:	3b014380 	.word	0x3b014380
   1c43c:	68a2009b 	.word	0x68a2009b
   1c440:	3b0450d1 	.word	0x3b0450d1
   1c444:	d1fa1d1a 	.word	0xd1fa1d1a
   1c448:	6863b1be 	.word	0x6863b1be
   1c44c:	d214429d 	.word	0xd214429d
   1c450:	f1c62700 	.word	0xf1c62700
   1c454:	00ab0c20 	.word	0x00ab0c20
   1c458:	350168a0 	.word	0x350168a0
   1c45c:	fa0158c1 	.word	0xfa0158c1
   1c460:	50c2f206 	.word	0x50c2f206
   1c464:	58c268a0 	.word	0x58c268a0
   1c468:	50c2433a 	.word	0x50c2433a
   1c46c:	fa216862 	.word	0xfa216862
   1c470:	42aaf70c 	.word	0x42aaf70c
   1c474:	0304f103 	.word	0x0304f103
   1c478:	2000d8ee 	.word	0x2000d8ee
   1c47c:	81f0e8bd 	.word	0x81f0e8bd
   1c480:	1c42ea4f 	.word	0x1c42ea4f
   1c484:	0820f10c 	.word	0x0820f10c
   1c488:	2104e7a1 	.word	0x2104e7a1
   1c48c:	f0034638 	.word	0xf0034638
   1c490:	4680f833 	.word	0x4680f833
   1c494:	68a1b320 	.word	0x68a1b320
   1c498:	6862b189 	.word	0x6862b189
   1c49c:	f0080092 	.word	0xf0080092
   1c4a0:	e9d4f998 	.word	0xe9d4f998
   1c4a4:	1e532001 	.word	0x1e532001
   1c4a8:	2200b13a 	.word	0x2200b13a
   1c4ac:	1c593b01 	.word	0x1c593b01
   1c4b0:	f1006002 	.word	0xf1006002
   1c4b4:	d1f90004 	.word	0xd1f90004
   1c4b8:	f00368a0 	.word	0xf00368a0
   1c4bc:	463bf831 	.word	0x463bf831
   1c4c0:	7801e9c4 	.word	0x7801e9c4
   1c4c4:	d0bf2d00 	.word	0xd0bf2d00
   1c4c8:	2b00e79f 	.word	0x2b00e79f
   1c4cc:	2e00d1b2 	.word	0x2e00d1b2
   1c4d0:	e7d2d1bb 	.word	0xe7d2d1bb
   1c4d4:	7000f8de 	.word	0x7000f8de
   1c4d8:	f04f4694 	.word	0xf04f4694
   1c4dc:	e7760820 	.word	0xe7760820
   1c4e0:	000ff06f 	.word	0x000ff06f
   1c4e4:	0152e7ca 	.word	0x0152e7ca
   1c4e8:	f1024667 	.word	0xf1024667
   1c4ec:	46940820 	.word	0x46940820
   1c4f0:	bf00e76d 	.word	0xbf00e76d

0001c4f4 <symbol_0000994>:
   1c4f4:	6844b5f8 	.word	0x6844b5f8
   1c4f8:	42ac094d 	.word	0x42ac094d
   1c4fc:	f001d33a 	.word	0xf001d33a
   1c500:	d032011f 	.word	0xd032011f
   1c504:	2300b1b5 	.word	0x2300b1b5
   1c508:	688400aa 	.word	0x688400aa
   1c50c:	320458a6 	.word	0x320458a6
   1c510:	6023f844 	.word	0x6023f844
   1c514:	33016844 	.word	0x33016844
   1c518:	429e1b66 	.word	0x429e1b66
   1c51c:	429cd8f5 	.word	0x429cd8f5
   1c520:	2500d908 	.word	0x2500d908
   1c524:	6884009a 	.word	0x6884009a
   1c528:	50a53301 	.word	0x50a53301
   1c52c:	32046844 	.word	0x32046844
   1c530:	d8f8429c 	.word	0xd8f8429c
   1c534:	b1b4b1b9 	.word	0xb1b4b1b9
   1c538:	f1042700 	.word	0xf1042700
   1c53c:	3b014380 	.word	0x3b014380
   1c540:	f1c1009b 	.word	0xf1c1009b
   1c544:	68860c20 	.word	0x68860c20
   1c548:	58f53c01 	.word	0x58f53c01
   1c54c:	f201fa25 	.word	0xf201fa25
   1c550:	688650f2 	.word	0x688650f2
   1c554:	ea4258f2 	.word	0xea4258f2
   1c558:	50f20207 	.word	0x50f20207
   1c55c:	f70cfa05 	.word	0xf70cfa05
   1c560:	0304f1a3 	.word	0x0304f1a3
   1c564:	2000d1ef 	.word	0x2000d1ef
   1c568:	b919bdf8 	.word	0xb919bdf8
   1c56c:	d0fa2c00 	.word	0xd0fa2c00
   1c570:	e7d6460b 	.word	0xe7d6460b
   1c574:	b1644605 	.word	0xb1644605
   1c578:	00a26886 	.word	0x00a26886
   1c57c:	21004630 	.word	0x21004630
   1c580:	f951f008 	.word	0xf951f008
   1c584:	22012300 	.word	0x22012300
   1c588:	461868a9 	.word	0x461868a9
   1c58c:	602a600b 	.word	0x602a600b
   1c590:	2104bdf8 	.word	0x2104bdf8
   1c594:	f0022001 	.word	0xf0022001
   1c598:	4606ffaf 	.word	0x4606ffaf
   1c59c:	68a9b1b8 	.word	0x68a9b1b8
   1c5a0:	686ab181 	.word	0x686ab181
   1c5a4:	f0080092 	.word	0xf0080092
   1c5a8:	e9d5f914 	.word	0xe9d5f914
   1c5ac:	1e532001 	.word	0x1e532001
   1c5b0:	3b01b132 	.word	0x3b01b132
   1c5b4:	60041c5a 	.word	0x60041c5a
   1c5b8:	0004f100 	.word	0x0004f100
   1c5bc:	68a8d1f9 	.word	0x68a8d1f9
   1c5c0:	ffaef002 	.word	0xffaef002
   1c5c4:	22042301 	.word	0x22042301
   1c5c8:	3601e9c5 	.word	0x3601e9c5
   1c5cc:	f06fe7d6 	.word	0xf06fe7d6
   1c5d0:	bdf8000f 	.word	0xbdf8000f

0001c5d4 <symbol_000242f>:
   1c5d4:	6843b470 	.word	0x6843b470
   1c5d8:	b173684a 	.word	0xb173684a
   1c5dc:	f1036884 	.word	0xf1036884
   1c5e0:	3d014580 	.word	0x3d014580
   1c5e4:	6025f854 	.word	0x6025f854
   1c5e8:	0485eb04 	.word	0x0485eb04
   1c5ec:	e01ab11e 	.word	0xe01ab11e
   1c5f0:	5d04f854 	.word	0x5d04f854
   1c5f4:	3b01b9bd 	.word	0x3b01b9bd
   1c5f8:	b18ad1fa 	.word	0xb18ad1fa
   1c5fc:	4480f102 	.word	0x4480f102
   1c600:	3c01688e 	.word	0x3c01688e
   1c604:	5024f856 	.word	0x5024f856
   1c608:	eb06b9cd 	.word	0xeb06b9cd
   1c60c:	e0020484 	.word	0xe0020484
   1c610:	5d04f854 	.word	0x5d04f854
   1c614:	3a01b98d 	.word	0x3a01b98d
   1c618:	2b00d1fa 	.word	0x2b00d1fa
   1c61c:	6802d037 	.word	0x6802d037
   1c620:	bc704610 	.word	0xbc704610
   1c624:	2a004770 	.word	0x2a004770
   1c628:	f102d0f9 	.word	0xf102d0f9
   1c62c:	688e4480 	.word	0x688e4480
   1c630:	f8563c01 	.word	0xf8563c01
   1c634:	2d005024 	.word	0x2d005024
   1c638:	4293d0e7 	.word	0x4293d0e7
   1c63c:	4293d8ef 	.word	0x4293d8ef
   1c640:	d2036809 	.word	0xd2036809
   1c644:	424abc70 	.word	0x424abc70
   1c648:	47704610 	.word	0x47704610
   1c64c:	2a006802 	.word	0x2a006802
   1c650:	2900dd01 	.word	0x2900dd01
   1c654:	2900db24 	.word	0x2900db24
   1c658:	2a00dd01 	.word	0x2a00dd01
   1c65c:	b1b3db1d 	.word	0xb1b3db1d
   1c660:	f1036884 	.word	0xf1036884
   1c664:	39014180 	.word	0x39014180
   1c668:	5021f854 	.word	0x5021f854
   1c66c:	0021f856 	.word	0x0021f856
   1c670:	42850089 	.word	0x42850089
   1c674:	4431440c 	.word	0x4431440c
   1c678:	d30cd8d2 	.word	0xd30cd8d2
   1c67c:	d0063b01 	.word	0xd0063b01
   1c680:	5d04f854 	.word	0x5d04f854
   1c684:	0d04f851 	.word	0x0d04f851
   1c688:	d9f64285 	.word	0xd9f64285
   1c68c:	461ae7c8 	.word	0x461ae7c8
   1c690:	4610bc70 	.word	0x4610bc70
   1c694:	42524770 	.word	0x42524770
   1c698:	f04fe7c2 	.word	0xf04fe7c2
   1c69c:	e7bf32ff 	.word	0xe7bf32ff
   1c6a0:	e7bd2201 	.word	0xe7bd2201

0001c6a4 <symbol_000ccad>:
   1c6a4:	2900b4f0 	.word	0x2900b4f0
   1c6a8:	68434605 	.word	0x68434605
   1c6ac:	2b00db32 	.word	0x2b00db32
   1c6b0:	6886d042 	.word	0x6886d042
   1c6b4:	4280f103 	.word	0x4280f103
   1c6b8:	f8563a01 	.word	0xf8563a01
   1c6bc:	eb060022 	.word	0xeb060022
   1c6c0:	b9680282 	.word	0xb9680282
   1c6c4:	30fff04f 	.word	0x30fff04f
   1c6c8:	e0022701 	.word	0xe0022701
   1c6cc:	4d04f852 	.word	0x4d04f852
   1c6d0:	3b01b93c 	.word	0x3b01b93c
   1c6d4:	2900d1fa 	.word	0x2900d1fa
   1c6d8:	2000bf08 	.word	0x2000bf08
   1c6dc:	4770bcf0 	.word	0x4770bcf0
   1c6e0:	b1a12701 	.word	0xb1a12701
   1c6e4:	d8122b01 	.word	0xd8122b01
   1c6e8:	28006828 	.word	0x28006828
   1c6ec:	1c7bdd01 	.word	0x1c7bdd01
   1c6f0:	2f01d01e 	.word	0x2f01d01e
   1c6f4:	2800d101 	.word	0x2800d101
   1c6f8:	2900db24 	.word	0x2900db24
   1c6fc:	bfb86833 	.word	0xbfb86833
   1c700:	42994249 	.word	0x42994249
   1c704:	d815d3ea 	.word	0xd815d3ea
   1c708:	2000bcf0 	.word	0x2000bcf0
   1c70c:	68284770 	.word	0x68284770
   1c710:	4770bcf0 	.word	0x4770bcf0
   1c714:	6886b163 	.word	0x6886b163
   1c718:	4280f103 	.word	0x4280f103
   1c71c:	f8563a01 	.word	0xf8563a01
   1c720:	eb060022 	.word	0xeb060022
   1c724:	b9500282 	.word	0xb9500282
   1c728:	f04f2001 	.word	0xf04f2001
   1c72c:	e7d037ff 	.word	0xe7d037ff
   1c730:	e7d32001 	.word	0xe7d32001
   1c734:	e7d14240 	.word	0xe7d14240
   1c738:	30fff04f 	.word	0x30fff04f
   1c73c:	f04fe7cb 	.word	0xf04fe7cb
   1c740:	e7cf37ff 	.word	0xe7cf37ff
   1c744:	30fff04f 	.word	0x30fff04f
   1c748:	bf00e7c8 	.word	0xbf00e7c8

0001c74c <symbol_000c914>:
   1c74c:	e92d4290 	.word	0xe92d4290
   1c750:	460747f0 	.word	0x460747f0
   1c754:	d006460c 	.word	0xd006460c
   1c758:	46154288 	.word	0x46154288
   1c75c:	f7ffd002 	.word	0xf7ffd002
   1c760:	b9a0fafb 	.word	0xb9a0fafb
   1c764:	2301462c 	.word	0x2301462c
   1c768:	6865603b 	.word	0x6865603b
   1c76c:	68a3b175 	.word	0x68a3b175
   1c770:	4280f105 	.word	0x4280f105
   1c774:	f8533a01 	.word	0xf8533a01
   1c778:	eb031022 	.word	0xeb031022
   1c77c:	b1190282 	.word	0xb1190282
   1c780:	f852e007 	.word	0xf852e007
   1c784:	b9211d04 	.word	0xb9211d04
   1c788:	d1fa3d01 	.word	0xd1fa3d01
   1c78c:	e8bd2000 	.word	0xe8bd2000
   1c790:	f24287f0 	.word	0xf24287f0
   1c794:	42957210 	.word	0x42957210
   1c798:	687ad875 	.word	0x687ad875
   1c79c:	d27642aa 	.word	0xd27642aa
   1c7a0:	46282104 	.word	0x46282104
   1c7a4:	fea8f002 	.word	0xfea8f002
   1c7a8:	28004606 	.word	0x28004606
   1c7ac:	68b9d06b 	.word	0x68b9d06b
   1c7b0:	687ab189 	.word	0x687ab189
   1c7b4:	f0080092 	.word	0xf0080092
   1c7b8:	e9d7f80c 	.word	0xe9d7f80c
   1c7bc:	1e532001 	.word	0x1e532001
   1c7c0:	2200b13a 	.word	0x2200b13a
   1c7c4:	1c593b01 	.word	0x1c593b01
   1c7c8:	f1006002 	.word	0xf1006002
   1c7cc:	d1f90004 	.word	0xd1f90004
   1c7d0:	f00268b8 	.word	0xf00268b8
   1c7d4:	e9c7fea5 	.word	0xe9c7fea5
   1c7d8:	68a35601 	.word	0x68a35601
   1c7dc:	ea4f2400 	.word	0xea4f2400
   1c7e0:	f1a30a85 	.word	0xf1a30a85
   1c7e4:	eb060c04 	.word	0xeb060c04
   1c7e8:	2200000a 	.word	0x2200000a
   1c7ec:	f10c6833 	.word	0xf10c6833
   1c7f0:	f8dc0c04 	.word	0xf8dc0c04
   1c7f4:	191b1000 	.word	0x191b1000
   1c7f8:	bf284614 	.word	0xbf284614
   1c7fc:	185b2201 	.word	0x185b2201
   1c800:	2401bf28 	.word	0x2401bf28
   1c804:	3b04f846 	.word	0x3b04f846
   1c808:	44144286 	.word	0x44144286
   1c80c:	2c00d1ed 	.word	0x2c00d1ed
   1c810:	f242d0bc 	.word	0xf242d0bc
   1c814:	f04f7810 	.word	0xf04f7810
   1c818:	e00f0900 	.word	0xe00f0900
   1c81c:	eb0568bd 	.word	0xeb0568bd
   1c820:	6803000a 	.word	0x6803000a
   1c824:	191c2200 	.word	0x191c2200
   1c828:	2201bf28 	.word	0x2201bf28
   1c82c:	4b04f840 	.word	0x4b04f840
   1c830:	0a04f10a 	.word	0x0a04f10a
   1c834:	24014635 	.word	0x24014635
   1c838:	d0a72a00 	.word	0xd0a72a00
   1c83c:	1c6e687b 	.word	0x1c6e687b
   1c840:	d8ee42ab 	.word	0xd8ee42ab
   1c844:	d81e4546 	.word	0xd81e4546
   1c848:	d2e742b3 	.word	0xd2e742b3
   1c84c:	46302104 	.word	0x46302104
   1c850:	fe52f002 	.word	0xfe52f002
   1c854:	b1b04605 	.word	0xb1b04605
   1c858:	b18968b9 	.word	0xb18968b9
   1c85c:	0092687a 	.word	0x0092687a
   1c860:	ffb7f007 	.word	0xffb7f007
   1c864:	2001e9d7 	.word	0x2001e9d7
   1c868:	b13a1e53 	.word	0xb13a1e53
   1c86c:	1c5a3b01 	.word	0x1c5a3b01
   1c870:	9000f8c0 	.word	0x9000f8c0
   1c874:	0004f100 	.word	0x0004f100
   1c878:	68b8d1f8 	.word	0x68b8d1f8
   1c87c:	fe50f002 	.word	0xfe50f002
   1c880:	6501e9c7 	.word	0x6501e9c7
   1c884:	f06fe7cb 	.word	0xf06fe7cb
   1c888:	e8bd000f 	.word	0xe8bd000f
   1c88c:	68be87f0 	.word	0x68be87f0
   1c890:	bf00e7a4 	.word	0xbf00e7a4

0001c894 <symbol_0004fdf>:
   1c894:	684bb5f0 	.word	0x684bb5f0
   1c898:	b085460d 	.word	0xb085460d
   1c89c:	46064614 	.word	0x46064614
   1c8a0:	b17b6851 	.word	0xb17b6851
   1c8a4:	f10368a8 	.word	0xf10368a8
   1c8a8:	3a014280 	.word	0x3a014280
   1c8ac:	7022f850 	.word	0x7022f850
   1c8b0:	0082eb00 	.word	0x0082eb00
   1c8b4:	e04fb127 	.word	0xe04fb127
   1c8b8:	2d04f850 	.word	0x2d04f850
   1c8bc:	d14b2a00 	.word	0xd14b2a00
   1c8c0:	d1f93b01 	.word	0xd1f93b01
   1c8c4:	f101b189 	.word	0xf101b189
   1c8c8:	68a74080 	.word	0x68a74080
   1c8cc:	f8573801 	.word	0xf8573801
   1c8d0:	2a002020 	.word	0x2a002020
   1c8d4:	8099f040 	.word	0x8099f040
   1c8d8:	0080eb07 	.word	0x0080eb07
   1c8dc:	f850e003 	.word	0xf850e003
   1c8e0:	2a002d04 	.word	0x2a002d04
   1c8e4:	3901d142 	.word	0x3901d142
   1c8e8:	2300d1f9 	.word	0x2300d1f9
   1c8ec:	42b42201 	.word	0x42b42201
   1c8f0:	2301e9cd 	.word	0x2301e9cd
   1c8f4:	d07f9303 	.word	0xd07f9303
   1c8f8:	d00542b5 	.word	0xd00542b5
   1c8fc:	46304629 	.word	0x46304629
   1c900:	fa2af7ff 	.word	0xfa2af7ff
   1c904:	b9a84607 	.word	0xb9a84607
   1c908:	60332301 	.word	0x60332301
   1c90c:	b1806860 	.word	0xb1806860
   1c910:	c008f8d4 	.word	0xc008f8d4
   1c914:	4380f100 	.word	0x4380f100
   1c918:	f85c3b01 	.word	0xf85c3b01
   1c91c:	eb0c2023 	.word	0xeb0c2023
   1c920:	b1220383 	.word	0xb1220383
   1c924:	f853e042 	.word	0xf853e042
   1c928:	2a002d04 	.word	0x2a002d04
   1c92c:	3801d13e 	.word	0x3801d13e
   1c930:	2700d1f9 	.word	0x2700d1f9
   1c934:	b1609803 	.word	0xb1609803
   1c938:	1e539a02 	.word	0x1e539a02
   1c93c:	2200b13a 	.word	0x2200b13a
   1c940:	1c593b01 	.word	0x1c593b01
   1c944:	f1006002 	.word	0xf1006002
   1c948:	d1f90004 	.word	0xd1f90004
   1c94c:	f0029803 	.word	0xf0029803
   1c950:	4638fde7 	.word	0x4638fde7
   1c954:	bdf0b005 	.word	0xbdf0b005
   1c958:	d0c62900 	.word	0xd0c62900
   1c95c:	4080f101 	.word	0x4080f101
   1c960:	380168a7 	.word	0x380168a7
   1c964:	2020f857 	.word	0x2020f857
   1c968:	d0b52a00 	.word	0xd0b52a00
   1c96c:	d8bc428b 	.word	0xd8bc428b
   1c970:	2b00d34b 	.word	0x2b00d34b
   1c974:	68a8d0b9 	.word	0x68a8d0b9
   1c978:	4180f103 	.word	0x4180f103
   1c97c:	f8503901 	.word	0xf8503901
   1c980:	f857c021 	.word	0xf857c021
   1c984:	0089e021 	.word	0x0089e021
   1c988:	440845e6 	.word	0x440845e6
   1c98c:	0201eb07 	.word	0x0201eb07
   1c990:	d83ad3ab 	.word	0xd83ad3ab
   1c994:	e0064601 	.word	0xe0064601
   1c998:	7d04f851 	.word	0x7d04f851
   1c99c:	0d04f852 	.word	0x0d04f852
   1c9a0:	d8a24287 	.word	0xd8a24287
   1c9a4:	3b01d331 	.word	0x3b01d331
   1c9a8:	e79ed1f6 	.word	0xe79ed1f6
   1c9ac:	462b2500 	.word	0x462b2500
   1c9b0:	f85168b1 	.word	0xf85168b1
   1c9b4:	35016b04 	.word	0x35016b04
   1c9b8:	f8411af2 	.word	0xf8411af2
   1c9bc:	f85c2c04 	.word	0xf85c2c04
   1c9c0:	460c7b04 	.word	0x460c7b04
   1c9c4:	bf2c42ba 	.word	0xbf2c42ba
   1c9c8:	0e00f04f 	.word	0x0e00f04f
   1c9cc:	0e01f04f 	.word	0x0e01f04f
   1c9d0:	429e1bd2 	.word	0x429e1bd2
   1c9d4:	4673bf2c 	.word	0x4673bf2c
   1c9d8:	0301f10e 	.word	0x0301f10e
   1c9dc:	f8414285 	.word	0xf8414285
   1c9e0:	d3e62c04 	.word	0xd3e62c04
   1c9e4:	e7a4b90b 	.word	0xe7a4b90b
   1c9e8:	68222301 	.word	0x68222301
   1c9ec:	429a1ad1 	.word	0x429a1ad1
   1c9f0:	1b04f844 	.word	0x1b04f844
   1c9f4:	e79cd3f8 	.word	0xe79cd3f8
   1c9f8:	a8014621 	.word	0xa8014621
   1c9fc:	f9acf7ff 	.word	0xf9acf7ff
   1ca00:	28004607 	.word	0x28004607
   1ca04:	ac01d196 	.word	0xac01d196
   1ca08:	f06fe776 	.word	0xf06fe776
   1ca0c:	46380709 	.word	0x46380709
   1ca10:	bdf0b005 	.word	0xbdf0b005

0001ca14 <symbol_0005cc7>:
   1ca14:	41f0e92d 	.word	0x41f0e92d
   1ca18:	6813680c 	.word	0x6813680c
   1ca1c:	fb034605 	.word	0xfb034605
   1ca20:	2b00f304 	.word	0x2b00f304
   1ca24:	684bda39 	.word	0x684bda39
   1ca28:	460e4617 	.word	0x460e4617
   1ca2c:	b1836852 	.word	0xb1836852
   1ca30:	f1036889 	.word	0xf1036889
   1ca34:	38014080 	.word	0x38014080
   1ca38:	c020f851 	.word	0xc020f851
   1ca3c:	0180eb01 	.word	0x0180eb01
   1ca40:	0f00f1bc 	.word	0x0f00f1bc
   1ca44:	e02ed003 	.word	0xe02ed003
   1ca48:	0d04f851 	.word	0x0d04f851
   1ca4c:	3b01bb58 	.word	0x3b01bb58
   1ca50:	b17ad1fa 	.word	0xb17ad1fa
   1ca54:	4180f102 	.word	0x4180f102
   1ca58:	c008f8d7 	.word	0xc008f8d7
   1ca5c:	f85c3901 	.word	0xf85c3901
   1ca60:	b9780021 	.word	0xb9780021
   1ca64:	0181eb0c 	.word	0x0181eb0c
   1ca68:	f851e002 	.word	0xf851e002
   1ca6c:	bb280d04 	.word	0xbb280d04
   1ca70:	d1fa3a01 	.word	0xd1fa3a01
   1ca74:	4631463a 	.word	0x4631463a
   1ca78:	f7ff4628 	.word	0xf7ff4628
   1ca7c:	b148ff0b 	.word	0xb148ff0b
   1ca80:	81f0e8bd 	.word	0x81f0e8bd
   1ca84:	46394632 	.word	0x46394632
   1ca88:	f7ff4628 	.word	0xf7ff4628
   1ca8c:	2800ff03 	.word	0x2800ff03
   1ca90:	4264d1f6 	.word	0x4264d1f6
   1ca94:	e8bd602c 	.word	0xe8bd602c
   1ca98:	f7ff81f0 	.word	0xf7ff81f0
   1ca9c:	2800fe57 	.word	0x2800fe57
   1caa0:	602cd1ee 	.word	0x602cd1ee
   1caa4:	2a00e7f7 	.word	0x2a00e7f7
   1caa8:	f102d0e4 	.word	0xf102d0e4
   1caac:	f8d74180 	.word	0xf8d74180
   1cab0:	3901c008 	.word	0x3901c008
   1cab4:	0021f85c 	.word	0x0021f85c
   1cab8:	d0d32800 	.word	0xd0d32800
   1cabc:	d8d94293 	.word	0xd8d94293
   1cac0:	2b00d3e0 	.word	0x2b00d3e0
   1cac4:	68b0d0d6 	.word	0x68b0d0d6
   1cac8:	4180f103 	.word	0x4180f103
   1cacc:	f8503901 	.word	0xf8503901
   1cad0:	f85c8021 	.word	0xf85c8021
   1cad4:	0089e021 	.word	0x0089e021
   1cad8:	440845f0 	.word	0x440845f0
   1cadc:	0201eb0c 	.word	0x0201eb0c
   1cae0:	d3cfd8c8 	.word	0xd3cfd8c8
   1cae4:	e0064601 	.word	0xe0064601
   1cae8:	cd04f851 	.word	0xcd04f851
   1caec:	0d04f852 	.word	0x0d04f852
   1caf0:	d8bf4584 	.word	0xd8bf4584
   1caf4:	3b01d3c6 	.word	0x3b01d3c6
   1caf8:	e7bbd1f6 	.word	0xe7bbd1f6

0001cafc <symbol_000d773>:
   1cafc:	41f0e92d 	.word	0x41f0e92d
   1cb00:	6813680c 	.word	0x6813680c
   1cb04:	fb034605 	.word	0xfb034605
   1cb08:	2b00f304 	.word	0x2b00f304
   1cb0c:	684bdd64 	.word	0x684bdd64
   1cb10:	460e4617 	.word	0x460e4617
   1cb14:	b1836852 	.word	0xb1836852
   1cb18:	f1036889 	.word	0xf1036889
   1cb1c:	38014080 	.word	0x38014080
   1cb20:	c020f851 	.word	0xc020f851
   1cb24:	0180eb01 	.word	0x0180eb01
   1cb28:	0f00f1bc 	.word	0x0f00f1bc
   1cb2c:	e01fd003 	.word	0xe01fd003
   1cb30:	0d04f851 	.word	0x0d04f851
   1cb34:	3b01b9e0 	.word	0x3b01b9e0
   1cb38:	b182d1fa 	.word	0xb182d1fa
   1cb3c:	4180f102 	.word	0x4180f102
   1cb40:	c008f8d7 	.word	0xc008f8d7
   1cb44:	f85c3901 	.word	0xf85c3901
   1cb48:	28000021 	.word	0x28000021
   1cb4c:	eb0cd13b 	.word	0xeb0cd13b
   1cb50:	e0020181 	.word	0xe0020181
   1cb54:	0d04f851 	.word	0x0d04f851
   1cb58:	3a01b9a8 	.word	0x3a01b9a8
   1cb5c:	463ad1fa 	.word	0x463ad1fa
   1cb60:	46284631 	.word	0x46284631
   1cb64:	fe96f7ff 	.word	0xfe96f7ff
   1cb68:	602cb900 	.word	0x602cb900
   1cb6c:	81f0e8bd 	.word	0x81f0e8bd
   1cb70:	d0f42a00 	.word	0xd0f42a00
   1cb74:	4180f102 	.word	0x4180f102
   1cb78:	c008f8d7 	.word	0xc008f8d7
   1cb7c:	f85c3901 	.word	0xf85c3901
   1cb80:	28000021 	.word	0x28000021
   1cb84:	4293d0e3 	.word	0x4293d0e3
   1cb88:	d31cd8e9 	.word	0xd31cd8e9
   1cb8c:	d0e62b00 	.word	0xd0e62b00
   1cb90:	f10368b0 	.word	0xf10368b0
   1cb94:	39014180 	.word	0x39014180
   1cb98:	8021f850 	.word	0x8021f850
   1cb9c:	e021f85c 	.word	0xe021f85c
   1cba0:	45f00089 	.word	0x45f00089
   1cba4:	eb0c4408 	.word	0xeb0c4408
   1cba8:	d8d80201 	.word	0xd8d80201
   1cbac:	4601d30b 	.word	0x4601d30b
   1cbb0:	f851e006 	.word	0xf851e006
   1cbb4:	f852cd04 	.word	0xf852cd04
   1cbb8:	45840d04 	.word	0x45840d04
   1cbbc:	d302d8cf 	.word	0xd302d8cf
   1cbc0:	d1f63b01 	.word	0xd1f63b01
   1cbc4:	4632e7cb 	.word	0x4632e7cb
   1cbc8:	46284639 	.word	0x46284639
   1cbcc:	fe62f7ff 	.word	0xfe62f7ff
   1cbd0:	d1cb2800 	.word	0xd1cb2800
   1cbd4:	e7c84264 	.word	0xe7c84264
   1cbd8:	fdb8f7ff 	.word	0xfdb8f7ff
   1cbdc:	d0c42800 	.word	0xd0c42800
   1cbe0:	81f0e8bd 	.word	0x81f0e8bd

0001cbe4 <symbol_000f268>:
   1cbe4:	bfac2a00 	.word	0xbfac2a00
   1cbe8:	f04f2301 	.word	0xf04f2301
   1cbec:	b5f033ff 	.word	0xb5f033ff
   1cbf0:	680d2601 	.word	0x680d2601
   1cbf4:	7ce2ea82 	.word	0x7ce2ea82
   1cbf8:	f703fb05 	.word	0xf703fb05
   1cbfc:	ebacb085 	.word	0xebacb085
   1cc00:	2f007ce2 	.word	0x2f007ce2
   1cc04:	e9cd9602 	.word	0xe9cd9602
   1cc08:	f8cdc300 	.word	0xf8cdc300
   1cc0c:	4606d00c 	.word	0x4606d00c
   1cc10:	684bdd2c 	.word	0x684bdd2c
   1cc14:	b173460c 	.word	0xb173460c
   1cc18:	f10368a7 	.word	0xf10368a7
   1cc1c:	39014180 	.word	0x39014180
   1cc20:	0021f857 	.word	0x0021f857
   1cc24:	0181eb07 	.word	0x0181eb07
   1cc28:	e00eb118 	.word	0xe00eb118
   1cc2c:	0d04f851 	.word	0x0d04f851
   1cc30:	3b01b958 	.word	0x3b01b958
   1cc34:	b982d1fa 	.word	0xb982d1fa
   1cc38:	aa014621 	.word	0xaa014621
   1cc3c:	f7ff4630 	.word	0xf7ff4630
   1cc40:	b900f8f9 	.word	0xb900f8f9
   1cc44:	b0056035 	.word	0xb0056035
   1cc48:	2a00bdf0 	.word	0x2a00bdf0
   1cc4c:	2b01d0f4 	.word	0x2b01d0f4
   1cc50:	683bd8f2 	.word	0x683bd8f2
   1cc54:	d3ef459c 	.word	0xd3ef459c
   1cc58:	4622d9ee 	.word	0x4622d9ee
   1cc5c:	4630a901 	.word	0x4630a901
   1cc60:	fe18f7ff 	.word	0xfe18f7ff
   1cc64:	d1ee2800 	.word	0xd1ee2800
   1cc68:	e7eb426d 	.word	0xe7eb426d
   1cc6c:	f7ffaa01 	.word	0xf7ffaa01
   1cc70:	2800fd6d 	.word	0x2800fd6d
   1cc74:	b005d0e6 	.word	0xb005d0e6
   1cc78:	bf00bdf0 	.word	0xbf00bdf0

0001cc7c <symbol_000b923>:
   1cc7c:	47f0e92d 	.word	0x47f0e92d
   1cc80:	23004606 	.word	0x23004606
   1cc84:	b0862001 	.word	0xb0862001
   1cc88:	4690428e 	.word	0x4690428e
   1cc8c:	90039000 	.word	0x90039000
   1cc90:	3301e9cd 	.word	0x3301e9cd
   1cc94:	3304e9cd 	.word	0x3304e9cd
   1cc98:	80d1f000 	.word	0x80d1f000
   1cc9c:	4546460f 	.word	0x4546460f
   1cca0:	80d5f000 	.word	0x80d5f000
   1cca4:	b185687d 	.word	0xb185687d
   1cca8:	f10568bb 	.word	0xf10568bb
   1ccac:	3a014280 	.word	0x3a014280
   1ccb0:	1022f853 	.word	0x1022f853
   1ccb4:	0382eb03 	.word	0x0382eb03
   1ccb8:	e0bab129 	.word	0xe0bab129
   1ccbc:	2d04f853 	.word	0x2d04f853
   1ccc0:	f0402a00 	.word	0xf0402a00
   1ccc4:	3d0180b6 	.word	0x3d0180b6
   1ccc8:	f8d8d1f8 	.word	0xf8d8d1f8
   1cccc:	25004004 	.word	0x25004004
   1ccd0:	d03d2c00 	.word	0xd03d2c00
   1ccd4:	3008f8d8 	.word	0x3008f8d8
   1ccd8:	4280f104 	.word	0x4280f104
   1ccdc:	f8533a01 	.word	0xf8533a01
   1cce0:	eb031022 	.word	0xeb031022
   1cce4:	b1190382 	.word	0xb1190382
   1cce8:	f853e004 	.word	0xf853e004
   1ccec:	b90a2d04 	.word	0xb90a2d04
   1ccf0:	d1fa3c01 	.word	0xd1fa3c01
   1ccf4:	7310f242 	.word	0x7310f242
   1ccf8:	0905eb04 	.word	0x0905eb04
   1ccfc:	f2004599 	.word	0xf2004599
   1cd00:	f8d680b0 	.word	0xf8d680b0
   1cd04:	45d1a004 	.word	0x45d1a004
   1cd08:	2104d925 	.word	0x2104d925
   1cd0c:	f0024648 	.word	0xf0024648
   1cd10:	4682fbf3 	.word	0x4682fbf3
   1cd14:	f0002800 	.word	0xf0002800
   1cd18:	68b180a4 	.word	0x68b180a4
   1cd1c:	6872b189 	.word	0x6872b189
   1cd20:	f0070092 	.word	0xf0070092
   1cd24:	e9d6fd56 	.word	0xe9d6fd56
   1cd28:	1e532001 	.word	0x1e532001
   1cd2c:	2200b13a 	.word	0x2200b13a
   1cd30:	1c593b01 	.word	0x1c593b01
   1cd34:	f1006002 	.word	0xf1006002
   1cd38:	d1f90004 	.word	0xd1f90004
   1cd3c:	f00268b0 	.word	0xf00268b0
   1cd40:	e9c6fbef 	.word	0xe9c6fbef
   1cd44:	ea4f9a01 	.word	0xea4f9a01
   1cd48:	f8d60289 	.word	0xf8d60289
   1cd4c:	e0259008 	.word	0xe0259008
   1cd50:	f8d64625 	.word	0xf8d64625
   1cd54:	f1baa004 	.word	0xf1baa004
   1cd58:	f0400f00 	.word	0xf0400f00
   1cd5c:	21048085 	.word	0x21048085
   1cd60:	f0022001 	.word	0xf0022001
   1cd64:	4681fbc9 	.word	0x4681fbc9
   1cd68:	d07a2800 	.word	0xd07a2800
   1cd6c:	b18968b1 	.word	0xb18968b1
   1cd70:	00926872 	.word	0x00926872
   1cd74:	fd2df007 	.word	0xfd2df007
   1cd78:	2001e9d6 	.word	0x2001e9d6
   1cd7c:	b13a1e53 	.word	0xb13a1e53
   1cd80:	3b014652 	.word	0x3b014652
   1cd84:	60021c59 	.word	0x60021c59
   1cd88:	0004f100 	.word	0x0004f100
   1cd8c:	68b0d1f9 	.word	0x68b0d1f9
   1cd90:	fbc6f002 	.word	0xfbc6f002
   1cd94:	22042301 	.word	0x22042301
   1cd98:	3901e9c6 	.word	0x3901e9c6
   1cd9c:	46482100 	.word	0x46482100
   1cda0:	fd41f007 	.word	0xfd41f007
   1cda4:	23012100 	.word	0x23012100
   1cda8:	601168b2 	.word	0x601168b2
   1cdac:	b19c6033 	.word	0xb19c6033
   1cdb0:	4980f104 	.word	0x4980f104
   1cdb4:	39fff109 	.word	0x39fff109
   1cdb8:	0989ea4f 	.word	0x0989ea4f
   1cdbc:	3008f8d8 	.word	0x3008f8d8
   1cdc0:	f85368b2 	.word	0xf85368b2
   1cdc4:	444a3009 	.word	0x444a3009
   1cdc8:	462868b9 	.word	0x462868b9
   1cdcc:	fc14f7fe 	.word	0xfc14f7fe
   1cdd0:	f1a93c01 	.word	0xf1a93c01
   1cdd4:	d1f10904 	.word	0xd1f10904
   1cdd8:	683a2400 	.word	0x683a2400
   1cddc:	3000f8d8 	.word	0x3000f8d8
   1cde0:	f302fb03 	.word	0xf302fb03
   1cde4:	98056033 	.word	0x98056033
   1cde8:	9a04b160 	.word	0x9a04b160
   1cdec:	b13a1e53 	.word	0xb13a1e53
   1cdf0:	3b012200 	.word	0x3b012200
   1cdf4:	60021c5d 	.word	0x60021c5d
   1cdf8:	0004f100 	.word	0x0004f100
   1cdfc:	9805d1f9 	.word	0x9805d1f9
   1ce00:	fb8ef002 	.word	0xfb8ef002
   1ce04:	23012200 	.word	0x23012200
   1ce08:	e9cd9802 	.word	0xe9cd9802
   1ce0c:	92053203 	.word	0x92053203
   1ce10:	9901b158 	.word	0x9901b158
   1ce14:	b1311e4b 	.word	0xb1311e4b
   1ce18:	1c593b01 	.word	0x1c593b01
   1ce1c:	f1006002 	.word	0xf1006002
   1ce20:	d1f90004 	.word	0xd1f90004
   1ce24:	f0029802 	.word	0xf0029802
   1ce28:	4620fb7b 	.word	0x4620fb7b
   1ce2c:	e8bdb006 	.word	0xe8bdb006
   1ce30:	f8d887f0 	.word	0xf8d887f0
   1ce34:	2c004004 	.word	0x2c004004
   1ce38:	af4cf47f 	.word	0xaf4cf47f
   1ce3c:	4668e75a 	.word	0x4668e75a
   1ce40:	ff8af7fe 	.word	0xff8af7fe
   1ce44:	28004604 	.word	0x28004604
   1ce48:	466fd1cd 	.word	0x466fd1cd
   1ce4c:	a803e727 	.word	0xa803e727
   1ce50:	f7fe4631 	.word	0xf7fe4631
   1ce54:	4604ff81 	.word	0x4604ff81
   1ce58:	d1c42800 	.word	0xd1c42800
   1ce5c:	080cf10d 	.word	0x080cf10d
   1ce60:	f06fe720 	.word	0xf06fe720
   1ce64:	e7be040f 	.word	0xe7be040f
   1ce68:	e76c46d1 	.word	0xe76c46d1

0001ce6c <symbol_0008c0f>:
   1ce6c:	b5002301 	.word	0xb5002301
   1ce70:	9200b085 	.word	0x9200b085
   1ce74:	e9cdaa01 	.word	0xe9cdaa01
   1ce78:	f8cd3301 	.word	0xf8cd3301
   1ce7c:	f7ffd00c 	.word	0xf7ffd00c
   1ce80:	b005fefd 	.word	0xb005fefd
   1ce84:	fb04f85d 	.word	0xfb04f85d

0001ce88 <symbol_0007bb0>:
   1ce88:	4ff0e92d 	.word	0x4ff0e92d
   1ce8c:	b0a3685e 	.word	0xb0a3685e
   1ce90:	f8d3b196 	.word	0xf8d3b196
   1ce94:	f1068008 	.word	0xf1068008
   1ce98:	f1094980 	.word	0xf1094980
   1ce9c:	f85839ff 	.word	0xf85839ff
   1cea0:	eb085029 	.word	0xeb085029
   1cea4:	b96d0e89 	.word	0xb96d0e89
   1cea8:	463746f4 	.word	0x463746f4
   1ceac:	f85ce002 	.word	0xf85ce002
   1ceb0:	b93c4d04 	.word	0xb93c4d04
   1ceb4:	d1fa3f01 	.word	0xd1fa3f01
   1ceb8:	060bf06f 	.word	0x060bf06f
   1cebc:	b0234630 	.word	0xb0234630
   1cec0:	8ff0e8bd 	.word	0x8ff0e8bd
   1cec4:	2d00681d 	.word	0x2d00681d
   1cec8:	4614d0f6 	.word	0x4614d0f6
   1cecc:	2200468a 	.word	0x2200468a
   1ced0:	469b2101 	.word	0x469b2101
   1ced4:	46056863 	.word	0x46056863
   1ced8:	91139110 	.word	0x91139110
   1cedc:	91199116 	.word	0x91199116
   1cee0:	e9cd911c 	.word	0xe9cd911c
   1cee4:	e9cd2211 	.word	0xe9cd2211
   1cee8:	e9cd2214 	.word	0xe9cd2214
   1ceec:	e9cd2217 	.word	0xe9cd2217
   1cef0:	e9cd221a 	.word	0xe9cd221a
   1cef4:	2b00221d 	.word	0x2b00221d
   1cef8:	821af000 	.word	0x821af000
   1cefc:	f10368a2 	.word	0xf10368a2
   1cf00:	39014180 	.word	0x39014180
   1cf04:	0021f852 	.word	0x0021f852
   1cf08:	0281eb02 	.word	0x0281eb02
   1cf0c:	e07bb120 	.word	0xe07bb120
   1cf10:	1d04f852 	.word	0x1d04f852
   1cf14:	d1772900 	.word	0xd1772900
   1cf18:	d1f93b01 	.word	0xd1f93b01
   1cf1c:	2029f858 	.word	0x2029f858
   1cf20:	d1772a00 	.word	0xd1772a00
   1cf24:	e0034672 	.word	0xe0034672
   1cf28:	1d04f852 	.word	0x1d04f852
   1cf2c:	d16f2900 	.word	0xd16f2900
   1cf30:	d1f93e01 	.word	0xd1f93e01
   1cf34:	4621a810 	.word	0x4621a810
   1cf38:	ff0ef7fe 	.word	0xff0ef7fe
   1cf3c:	28004606 	.word	0x28004606
   1cf40:	8092f000 	.word	0x8092f000
   1cf44:	98122700 	.word	0x98122700
   1cf48:	9a11b160 	.word	0x9a11b160
   1cf4c:	b13a1e53 	.word	0xb13a1e53
   1cf50:	3b012200 	.word	0x3b012200
   1cf54:	60021c5c 	.word	0x60021c5c
   1cf58:	0004f100 	.word	0x0004f100
   1cf5c:	9812d1f9 	.word	0x9812d1f9
   1cf60:	fadef002 	.word	0xfadef002
   1cf64:	23012200 	.word	0x23012200
   1cf68:	e9cd9815 	.word	0xe9cd9815
   1cf6c:	92123210 	.word	0x92123210
   1cf70:	9914b158 	.word	0x9914b158
   1cf74:	b1311e4b 	.word	0xb1311e4b
   1cf78:	1c593b01 	.word	0x1c593b01
   1cf7c:	f1006002 	.word	0xf1006002
   1cf80:	d1f90004 	.word	0xd1f90004
   1cf84:	f0029815 	.word	0xf0029815
   1cf88:	2200facb 	.word	0x2200facb
   1cf8c:	98182301 	.word	0x98182301
   1cf90:	3213e9cd 	.word	0x3213e9cd
   1cf94:	b1589215 	.word	0xb1589215
   1cf98:	1e4b9917 	.word	0x1e4b9917
   1cf9c:	3b01b131 	.word	0x3b01b131
   1cfa0:	60021c5d 	.word	0x60021c5d
   1cfa4:	0004f100 	.word	0x0004f100
   1cfa8:	9818d1f9 	.word	0x9818d1f9
   1cfac:	fab8f002 	.word	0xfab8f002
   1cfb0:	23012200 	.word	0x23012200
   1cfb4:	e9cd981b 	.word	0xe9cd981b
   1cfb8:	92183216 	.word	0x92183216
   1cfbc:	991ab158 	.word	0x991ab158
   1cfc0:	b1311e4b 	.word	0xb1311e4b
   1cfc4:	1c5c3b01 	.word	0x1c5c3b01
   1cfc8:	f1006002 	.word	0xf1006002
   1cfcc:	d1f90004 	.word	0xd1f90004
   1cfd0:	f002981b 	.word	0xf002981b
   1cfd4:	2100faa5 	.word	0x2100faa5
   1cfd8:	911b2301 	.word	0x911b2301
   1cfdc:	3119e9cd 	.word	0x3119e9cd
   1cfe0:	f43f2f00 	.word	0xf43f2f00
   1cfe4:	9a1daf6b 	.word	0x9a1daf6b
   1cfe8:	b1321e53 	.word	0xb1321e53
   1cfec:	3b01463a 	.word	0x3b01463a
   1cff0:	60111c58 	.word	0x60111c58
   1cff4:	0204f102 	.word	0x0204f102
   1cff8:	4638d1f9 	.word	0x4638d1f9
   1cffc:	fa90f002 	.word	0xfa90f002
   1d000:	b0234630 	.word	0xb0234630
   1d004:	8ff0e8bd 	.word	0x8ff0e8bd
   1d008:	2029f858 	.word	0x2029f858
   1d00c:	d0892a00 	.word	0xd0892a00
   1d010:	d38f429e 	.word	0xd38f429e
   1d014:	f200429e 	.word	0xf200429e
   1d018:	2b008190 	.word	0x2b008190
   1d01c:	68a1d08a 	.word	0x68a1d08a
   1d020:	4280f103 	.word	0x4280f103
   1d024:	f8513a01 	.word	0xf8513a01
   1d028:	f8580022 	.word	0xf8580022
   1d02c:	00926022 	.word	0x00926022
   1d030:	44114286 	.word	0x44114286
   1d034:	f4ff4490 	.word	0xf4ff4490
   1d038:	f200af7d 	.word	0xf200af7d
   1d03c:	460a817e 	.word	0x460a817e
   1d040:	f852e008 	.word	0xf852e008
   1d044:	f8580d04 	.word	0xf8580d04
   1d048:	42881d04 	.word	0x42881d04
   1d04c:	af72f63f 	.word	0xaf72f63f
   1d050:	8173f0c0 	.word	0x8173f0c0
   1d054:	d1f43b01 	.word	0xd1f43b01
   1d058:	4621a810 	.word	0x4621a810
   1d05c:	fe7cf7fe 	.word	0xfe7cf7fe
   1d060:	28004606 	.word	0x28004606
   1d064:	af6ef47f 	.word	0xaf6ef47f
   1d068:	4659a813 	.word	0x4659a813
   1d06c:	fe74f7fe 	.word	0xfe74f7fe
   1d070:	28004606 	.word	0x28004606
   1d074:	af66f47f 	.word	0xaf66f47f
   1d078:	7210f242 	.word	0x7210f242
   1d07c:	68672301 	.word	0x68672301
   1d080:	37029313 	.word	0x37029313
   1d084:	93104297 	.word	0x93104297
   1d088:	8193f200 	.word	0x8193f200
   1d08c:	805cf8dd 	.word	0x805cf8dd
   1d090:	d91d4547 	.word	0xd91d4547
   1d094:	46382104 	.word	0x46382104
   1d098:	fa2ef002 	.word	0xfa2ef002
   1d09c:	28004681 	.word	0x28004681
   1d0a0:	8187f000 	.word	0x8187f000
   1d0a4:	b1819918 	.word	0xb1819918
   1d0a8:	00929a17 	.word	0x00929a17
   1d0ac:	fb91f007 	.word	0xfb91f007
   1d0b0:	2017e9dd 	.word	0x2017e9dd
   1d0b4:	b1321e53 	.word	0xb1321e53
   1d0b8:	1c5a3b01 	.word	0x1c5a3b01
   1d0bc:	f1006006 	.word	0xf1006006
   1d0c0:	d1f90004 	.word	0xd1f90004
   1d0c4:	f0029818 	.word	0xf0029818
   1d0c8:	46b8fa2b 	.word	0x46b8fa2b
   1d0cc:	7917e9cd 	.word	0x7917e9cd
   1d0d0:	0f00f1b8 	.word	0x0f00f1b8
   1d0d4:	8171f000 	.word	0x8171f000
   1d0d8:	ea4f9e18 	.word	0xea4f9e18
   1d0dc:	27000288 	.word	0x27000288
   1d0e0:	46394630 	.word	0x46394630
   1d0e4:	fb9ff007 	.word	0xfb9ff007
   1d0e8:	9b182201 	.word	0x9b182201
   1d0ec:	9b1a601f 	.word	0x9b1a601f
   1d0f0:	42939216 	.word	0x42939216
   1d0f4:	81b2f240 	.word	0x81b2f240
   1d0f8:	20032104 	.word	0x20032104
   1d0fc:	f9fcf002 	.word	0xf9fcf002
   1d100:	28004607 	.word	0x28004607
   1d104:	8155f000 	.word	0x8155f000
   1d108:	9a142303 	.word	0x9a142303
   1d10c:	301de9cd 	.word	0x301de9cd
   1d110:	2a009203 	.word	0x2a009203
   1d114:	8171f000 	.word	0x8171f000
   1d118:	0901f1b2 	.word	0x0901f1b2
   1d11c:	f0009915 	.word	0xf0009915
   1d120:	f85181cf 	.word	0xf85181cf
   1d124:	28000029 	.word	0x28000029
   1d128:	81c5f040 	.word	0x81c5f040
   1d12c:	4280f102 	.word	0x4280f102
   1d130:	464b3a01 	.word	0x464b3a01
   1d134:	0282eb01 	.word	0x0282eb01
   1d138:	f852e004 	.word	0xf852e004
   1d13c:	28000d04 	.word	0x28000d04
   1d140:	81aef040 	.word	0x81aef040
   1d144:	d1f83b01 	.word	0xd1f83b01
   1d148:	68082620 	.word	0x68082620
   1d14c:	f04f2200 	.word	0xf04f2200
   1d150:	e0024100 	.word	0xe0024100
   1d154:	2a203201 	.word	0x2a203201
   1d158:	4201d004 	.word	0x4201d004
   1d15c:	0151ea4f 	.word	0x0151ea4f
   1d160:	1ab3d0f8 	.word	0x1ab3d0f8
   1d164:	031ff003 	.word	0x031ff003
   1d168:	f0402b1f 	.word	0xf0402b1f
   1d16c:	2300819f 	.word	0x2300819f
   1d170:	9b119302 	.word	0x9b119302
   1d174:	9304a813 	.word	0x9304a813
   1d178:	eba33b01 	.word	0xeba33b01
   1d17c:	93010809 	.word	0x93010809
   1d180:	1348ea4f 	.word	0x1348ea4f
   1d184:	93054619 	.word	0x93054619
   1d188:	f8fef7ff 	.word	0xf8fef7ff
   1d18c:	28004606 	.word	0x28004606
   1d190:	aed9f47f 	.word	0xaed9f47f
   1d194:	0888ea4f 	.word	0x0888ea4f
   1d198:	9818e00d 	.word	0x9818e00d
   1d19c:	f850a910 	.word	0xf850a910
   1d1a0:	aa133008 	.word	0xaa133008
   1d1a4:	f8403301 	.word	0xf8403301
   1d1a8:	46083008 	.word	0x46083008
   1d1ac:	fca6f7ff 	.word	0xfca6f7ff
   1d1b0:	f0402800 	.word	0xf0402800
   1d1b4:	a9138179 	.word	0xa9138179
   1d1b8:	f7ffa810 	.word	0xf7ffa810
   1d1bc:	2800fa0b 	.word	0x2800fa0b
   1d1c0:	9905daeb 	.word	0x9905daeb
   1d1c4:	f7ffa813 	.word	0xf7ffa813
   1d1c8:	4606f995 	.word	0x4606f995
   1d1cc:	f47f2800 	.word	0xf47f2800
   1d1d0:	f06faeba 	.word	0xf06faeba
   1d1d4:	9a030303 	.word	0x9a030303
   1d1d8:	b508e9cd 	.word	0xb508e9cd
   1d1dc:	4780f102 	.word	0x4780f102
   1d1e0:	fb039a04 	.word	0xfb039a04
   1d1e4:	f102f309 	.word	0xf102f309
   1d1e8:	3a024280 	.word	0x3a024280
   1d1ec:	46150092 	.word	0x46150092
   1d1f0:	ea4f9305 	.word	0xea4f9305
   1d1f4:	93030389 	.word	0x93030389
   1d1f8:	63c9ebc9 	.word	0x63c9ebc9
   1d1fc:	e9cd3f02 	.word	0xe9cd3f02
   1d200:	e9cd3006 	.word	0xe9cd3006
   1d204:	00b9a40a 	.word	0x00b9a40a
   1d208:	9b019104 	.word	0x9b019104
   1d20c:	f240454b 	.word	0xf240454b
   1d210:	98038173 	.word	0x98038173
   1d214:	9a159912 	.word	0x9a159912
   1d218:	0a04f105 	.word	0x0a04f105
   1d21c:	f8515812 	.word	0xf8515812
   1d220:	9805300a 	.word	0x9805300a
   1d224:	eb004293 	.word	0xeb004293
   1d228:	9e180405 	.word	0x9e180405
   1d22c:	814cf0c0 	.word	0x814cf0c0
   1d230:	33fff04f 	.word	0x33fff04f
   1d234:	26015133 	.word	0x26015133
   1d238:	9f1e9a18 	.word	0x9f1e9a18
   1d23c:	f1a55913 	.word	0xf1a55913
   1d240:	44330b04 	.word	0x44330b04
   1d244:	e04b5113 	.word	0xe04b5113
   1d248:	806cf8dd 	.word	0x806cf8dd
   1d24c:	46400092 	.word	0x46400092
   1d250:	f0072100 	.word	0xf0072100
   1d254:	2200fae8 	.word	0x2200fae8
   1d258:	601a9b1b 	.word	0x601a9b1b
   1d25c:	f1b99619 	.word	0xf1b99619
   1d260:	f0000f00 	.word	0xf0000f00
   1d264:	9b1580f9 	.word	0x9b1580f9
   1d268:	589b9a04 	.word	0x589b9a04
   1d26c:	99039a1b 	.word	0x99039a1b
   1d270:	9a156013 	.word	0x9a156013
   1d274:	58529b1b 	.word	0x58529b1b
   1d278:	605aa919 	.word	0x605aa919
   1d27c:	f10d9b18 	.word	0xf10d9b18
   1d280:	591b083c 	.word	0x591b083c
   1d284:	4608aa1f 	.word	0x4608aa1f
   1d288:	e9cd930f 	.word	0xe9cd930f
   1d28c:	f8cd661f 	.word	0xf8cd661f
   1d290:	f7ff8084 	.word	0xf7ff8084
   1d294:	2800fcf3 	.word	0x2800fcf3
   1d298:	8106f040 	.word	0x8106f040
   1d29c:	2a009a1d 	.word	0x2a009a1d
   1d2a0:	80c2f000 	.word	0x80c2f000
   1d2a4:	21000092 	.word	0x21000092
   1d2a8:	f0074638 	.word	0xf0074638
   1d2ac:	2300fabc 	.word	0x2300fabc
   1d2b0:	9b01603b 	.word	0x9b01603b
   1d2b4:	2b01961c 	.word	0x2b01961c
   1d2b8:	9b12a91c 	.word	0x9b12a91c
   1d2bc:	80edf000 	.word	0x80edf000
   1d2c0:	300bf853 	.word	0x300bf853
   1d2c4:	603ba819 	.word	0x603ba819
   1d2c8:	595b9b12 	.word	0x595b9b12
   1d2cc:	9b12607b 	.word	0x9b12607b
   1d2d0:	300af853 	.word	0x300af853
   1d2d4:	f7ff60bb 	.word	0xf7ff60bb
   1d2d8:	2800f97d 	.word	0x2800f97d
   1d2dc:	811cf340 	.word	0x811cf340
   1d2e0:	59139a18 	.word	0x59139a18
   1d2e4:	51133b01 	.word	0x51133b01
   1d2e8:	2a009a1a 	.word	0x2a009a1a
   1d2ec:	2104d1ac 	.word	0x2104d1ac
   1d2f0:	f0022001 	.word	0xf0022001
   1d2f4:	4680f901 	.word	0x4680f901
   1d2f8:	f0002800 	.word	0xf0002800
   1d2fc:	991b8140 	.word	0x991b8140
   1d300:	9a1ab191 	.word	0x9a1ab191
   1d304:	f0070092 	.word	0xf0070092
   1d308:	e9ddfa64 	.word	0xe9ddfa64
   1d30c:	4602101a 	.word	0x4602101a
   1d310:	b1391e4b 	.word	0xb1391e4b
   1d314:	3b012100 	.word	0x3b012100
   1d318:	1c596011 	.word	0x1c596011
   1d31c:	0204f102 	.word	0x0204f102
   1d320:	981bd1f8 	.word	0x981bd1f8
   1d324:	f8fcf002 	.word	0xf8fcf002
   1d328:	e9cd2204 	.word	0xe9cd2204
   1d32c:	e78e681a 	.word	0xe78e681a
   1d330:	2029f858 	.word	0x2029f858
   1d334:	f43f2a00 	.word	0xf43f2a00
   1d338:	b355adf5 	.word	0xb355adf5
   1d33c:	b9ee686e 	.word	0xb9ee686e
   1d340:	20012104 	.word	0x20012104
   1d344:	f8d8f002 	.word	0xf8d8f002
   1d348:	b3904607 	.word	0xb3904607
   1d34c:	b18168a9 	.word	0xb18168a9
   1d350:	0092686a 	.word	0x0092686a
   1d354:	fa3df007 	.word	0xfa3df007
   1d358:	2001e9d5 	.word	0x2001e9d5
   1d35c:	b1321e53 	.word	0xb1321e53
   1d360:	1c593b01 	.word	0x1c593b01
   1d364:	f1006006 	.word	0xf1006006
   1d368:	d1f90004 	.word	0xd1f90004
   1d36c:	f00268a8 	.word	0xf00268a8
   1d370:	2301f8d7 	.word	0x2301f8d7
   1d374:	e9c52204 	.word	0xe9c52204
   1d378:	e0013701 	.word	0xe0013701
   1d37c:	00b268af 	.word	0x00b268af
   1d380:	46382100 	.word	0x46382100
   1d384:	fa4ff007 	.word	0xfa4ff007
   1d388:	23012100 	.word	0x23012100
   1d38c:	601168aa 	.word	0x601168aa
   1d390:	f1ba602b 	.word	0xf1ba602b
   1d394:	d0070f00 	.word	0xd0070f00
   1d398:	46504621 	.word	0x46504621
   1d39c:	fcdcf7fe 	.word	0xfcdcf7fe
   1d3a0:	28004606 	.word	0x28004606
   1d3a4:	adcef47f 	.word	0xadcef47f
   1d3a8:	46302600 	.word	0x46302600
   1d3ac:	e8bdb023 	.word	0xe8bdb023
   1d3b0:	27008ff0 	.word	0x27008ff0
   1d3b4:	060ff06f 	.word	0x060ff06f
   1d3b8:	2104e5c5 	.word	0x2104e5c5
   1d3bc:	f0022001 	.word	0xf0022001
   1d3c0:	4606f89b 	.word	0x4606f89b
   1d3c4:	d0f42800 	.word	0xd0f42800
   1d3c8:	b1899918 	.word	0xb1899918
   1d3cc:	00929a17 	.word	0x00929a17
   1d3d0:	f9fff007 	.word	0xf9fff007
   1d3d4:	3017e9dd 	.word	0x3017e9dd
   1d3d8:	b13b1e5a 	.word	0xb13b1e5a
   1d3dc:	3a014643 	.word	0x3a014643
   1d3e0:	60031c57 	.word	0x60031c57
   1d3e4:	0004f100 	.word	0x0004f100
   1d3e8:	9818d1f9 	.word	0x9818d1f9
   1d3ec:	f898f002 	.word	0xf898f002
   1d3f0:	22042301 	.word	0x22042301
   1d3f4:	3617e9cd 	.word	0x3617e9cd
   1d3f8:	231fe671 	.word	0x231fe671
   1d3fc:	93024619 	.word	0x93024619
   1d400:	f7fea810 	.word	0xf7fea810
   1d404:	4606ffc1 	.word	0x4606ffc1
   1d408:	f47f2800 	.word	0xf47f2800
   1d40c:	9902ad9c 	.word	0x9902ad9c
   1d410:	f7fea813 	.word	0xf7fea813
   1d414:	4606ffb9 	.word	0x4606ffb9
   1d418:	f47f2800 	.word	0xf47f2800
   1d41c:	9b14ad94 	.word	0x9b14ad94
   1d420:	f1039303 	.word	0xf1039303
   1d424:	e6a439ff 	.word	0xe6a439ff
   1d428:	20012104 	.word	0x20012104
   1d42c:	f002920d 	.word	0xf002920d
   1d430:	4603f863 	.word	0x4603f863
   1d434:	f0002800 	.word	0xf0002800
   1d438:	b14780a2 	.word	0xb14780a2
   1d43c:	46399a0d 	.word	0x46399a0d
   1d440:	f007900c 	.word	0xf007900c
   1d444:	4638f9c6 	.word	0x4638f9c6
   1d448:	f86af002 	.word	0xf86af002
   1d44c:	461f9b0c 	.word	0x461f9b0c
   1d450:	e9cd2204 	.word	0xe9cd2204
   1d454:	e726631d 	.word	0xe726631d
   1d458:	e707464b 	.word	0xe707464b
   1d45c:	20022104 	.word	0x20022104
   1d460:	f84af002 	.word	0xf84af002
   1d464:	28004606 	.word	0x28004606
   1d468:	991bd0a3 	.word	0x991bd0a3
   1d46c:	9a1ab189 	.word	0x9a1ab189
   1d470:	f0070092 	.word	0xf0070092
   1d474:	e9ddf9ae 	.word	0xe9ddf9ae
   1d478:	4618131a 	.word	0x4618131a
   1d47c:	b1311e4a 	.word	0xb1311e4a
   1d480:	1c503a01 	.word	0x1c503a01
   1d484:	f103601f 	.word	0xf103601f
   1d488:	d1f90304 	.word	0xd1f90304
   1d48c:	f002981b 	.word	0xf002981b
   1d490:	2302f847 	.word	0x2302f847
   1d494:	361ae9cd 	.word	0x361ae9cd
   1d498:	595be62e 	.word	0x595be62e
   1d49c:	e715a819 	.word	0xe715a819
   1d4a0:	f103015b 	.word	0xf103015b
   1d4a4:	e6510620 	.word	0xe6510620
   1d4a8:	e54c4606 	.word	0xe54c4606
   1d4ac:	031ff1c3 	.word	0x031ff1c3
   1d4b0:	46199302 	.word	0x46199302
   1d4b4:	ea4fe7a4 	.word	0xea4fe7a4
   1d4b8:	f1031349 	.word	0xf1031349
   1d4bc:	e6450620 	.word	0xe6450620
   1d4c0:	26206808 	.word	0x26206808
   1d4c4:	e641464b 	.word	0xe641464b
   1d4c8:	b192594f 	.word	0xb192594f
   1d4cc:	f04f469c 	.word	0xf04f469c
   1d4d0:	46610b00 	.word	0x46610b00
   1d4d4:	ea4b465b 	.word	0xea4b465b
   1d4d8:	f7ee0007 	.word	0xf7ee0007
   1d4dc:	2300fea1 	.word	0x2300fea1
   1d4e0:	32fff04f 	.word	0x32fff04f
   1d4e4:	bf08428b 	.word	0xbf08428b
   1d4e8:	d2004282 	.word	0xd2004282
   1d4ec:	51304610 	.word	0x51304610
   1d4f0:	f04fe6a1 	.word	0xf04fe6a1
   1d4f4:	e7fa30ff 	.word	0xe7fa30ff
   1d4f8:	6b07e9dd 	.word	0x6b07e9dd
   1d4fc:	5a09e9dd 	.word	0x5a09e9dd
   1d500:	2d009c0b 	.word	0x2d009c0b
   1d504:	a916d05f 	.word	0xa916d05f
   1d508:	f7fe4628 	.word	0xf7fe4628
   1d50c:	2800fc25 	.word	0x2800fc25
   1d510:	4606d053 	.word	0x4606d053
   1d514:	e5169f1e 	.word	0xe5169f1e
   1d518:	9b182501 	.word	0x9b182501
   1d51c:	591baa1f 	.word	0x591baa1f
   1d520:	a819a913 	.word	0xa819a913
   1d524:	f8cd930f 	.word	0xf8cd930f
   1d528:	e9cd8084 	.word	0xe9cd8084
   1d52c:	f7ff551f 	.word	0xf7ff551f
   1d530:	2800fba5 	.word	0x2800fba5
   1d534:	9b06d1b8 	.word	0x9b06d1b8
   1d538:	f1039a01 	.word	0xf1039a01
   1d53c:	3b016300 	.word	0x3b016300
   1d540:	015e4413 	.word	0x015e4413
   1d544:	a8194631 	.word	0xa8194631
   1d548:	ff1ef7fe 	.word	0xff1ef7fe
   1d54c:	d1ab2800 	.word	0xd1ab2800
   1d550:	aa19a910 	.word	0xaa19a910
   1d554:	f7ff4608 	.word	0xf7ff4608
   1d558:	4603fad1 	.word	0x4603fad1
   1d55c:	a91fbb58 	.word	0xa91fbb58
   1d560:	930fa810 	.word	0x930fa810
   1d564:	551fe9cd 	.word	0x551fe9cd
   1d568:	8084f8cd 	.word	0x8084f8cd
   1d56c:	fb2ef7fe 	.word	0xfb2ef7fe
   1d570:	db072800 	.word	0xdb072800
   1d574:	465d9b01 	.word	0x465d9b01
   1d578:	93013b01 	.word	0x93013b01
   1d57c:	f06fe645 	.word	0xf06fe645
   1d580:	e4e0060f 	.word	0xe4e0060f
   1d584:	a819a913 	.word	0xa819a913
   1d588:	fbe6f7fe 	.word	0xfbe6f7fe
   1d58c:	d18b2800 	.word	0xd18b2800
   1d590:	a8194631 	.word	0xa8194631
   1d594:	fef8f7fe 	.word	0xfef8f7fe
   1d598:	d1852800 	.word	0xd1852800
   1d59c:	aa19a910 	.word	0xaa19a910
   1d5a0:	f7ff4608 	.word	0xf7ff4608
   1d5a4:	2800fa37 	.word	0x2800fa37
   1d5a8:	af7ef47f 	.word	0xaf7ef47f
   1d5ac:	59139a18 	.word	0x59139a18
   1d5b0:	51133b01 	.word	0x51133b01
   1d5b4:	4606e7de 	.word	0x4606e7de
   1d5b8:	f8dbe4c5 	.word	0xf8dbe4c5
   1d5bc:	68223000 	.word	0x68223000
   1d5c0:	f302fb03 	.word	0xf302fb03
   1d5c4:	f1ba602b 	.word	0xf1ba602b
   1d5c8:	d0050f00 	.word	0xd0050f00
   1d5cc:	a8109902 	.word	0xa8109902
   1d5d0:	ff90f7fe 	.word	0xff90f7fe
   1d5d4:	b1084606 	.word	0xb1084606
   1d5d8:	e4b49f1e 	.word	0xe4b49f1e
   1d5dc:	a9106823 	.word	0xa9106823
   1d5e0:	93104650 	.word	0x93104650
   1d5e4:	fbb8f7fe 	.word	0xfbb8f7fe
   1d5e8:	28004606 	.word	0x28004606
   1d5ec:	2401d1f4 	.word	0x2401d1f4
   1d5f0:	a91fab0f 	.word	0xa91fab0f
   1d5f4:	960f4650 	.word	0x960f4650
   1d5f8:	441fe9cd 	.word	0x441fe9cd
   1d5fc:	f7fe9321 	.word	0xf7fe9321
   1d600:	2800fae5 	.word	0x2800fae5
   1d604:	f8cad1e8 	.word	0xf8cad1e8
   1d608:	e7e54000 	.word	0xe7e54000

0001d60c <symbol_000dbba>:
   1d60c:	41f0e92d 	.word	0x41f0e92d
   1d610:	46176853 	.word	0x46176853
   1d614:	6894b183 	.word	0x6894b183
   1d618:	4580f103 	.word	0x4580f103
   1d61c:	f8543d01 	.word	0xf8543d01
   1d620:	eb042025 	.word	0xeb042025
   1d624:	b12a0485 	.word	0xb12a0485
   1d628:	f854e11a 	.word	0xf854e11a
   1d62c:	2d005d04 	.word	0x2d005d04
   1d630:	8116f040 	.word	0x8116f040
   1d634:	d1f83b01 	.word	0xd1f83b01
   1d638:	4606460a 	.word	0x4606460a
   1d63c:	463b4601 	.word	0x463b4601
   1d640:	f7ff2000 	.word	0xf7ff2000
   1d644:	2800fc21 	.word	0x2800fc21
   1d648:	f06fd151 	.word	0xf06fd151
   1d64c:	68714840 	.word	0x68714840
   1d650:	68b0b191 	.word	0x68b0b191
   1d654:	0308eb01 	.word	0x0308eb01
   1d658:	c023f850 	.word	0xc023f850
   1d65c:	0283eb00 	.word	0x0283eb00
   1d660:	0f00f1bc 	.word	0x0f00f1bc
   1d664:	4614d156 	.word	0x4614d156
   1d668:	e003460b 	.word	0xe003460b
   1d66c:	5d04f854 	.word	0x5d04f854
   1d670:	d14f2d00 	.word	0xd14f2d00
   1d674:	d1f93b01 	.word	0xd1f93b01
   1d678:	4440f06f 	.word	0x4440f06f
   1d67c:	46304639 	.word	0x46304639
   1d680:	ffa8f7fe 	.word	0xffa8f7fe
   1d684:	db422800 	.word	0xdb422800
   1d688:	683b6835 	.word	0x683b6835
   1d68c:	f305fb03 	.word	0xf305fb03
   1d690:	dd2e2b00 	.word	0xdd2e2b00
   1d694:	687a6873 	.word	0x687a6873
   1d698:	68b1b183 	.word	0x68b1b183
   1d69c:	f8511918 	.word	0xf8511918
   1d6a0:	eb01c020 	.word	0xeb01c020
   1d6a4:	f1bc0180 	.word	0xf1bc0180
   1d6a8:	d0050f00 	.word	0xd0050f00
   1d6ac:	f851e090 	.word	0xf851e090
   1d6b0:	28000d04 	.word	0x28000d04
   1d6b4:	808cf040 	.word	0x808cf040
   1d6b8:	d1f83b01 	.word	0xd1f83b01
   1d6bc:	f8d7b18a 	.word	0xf8d7b18a
   1d6c0:	1911c008 	.word	0x1911c008
   1d6c4:	0021f85c 	.word	0x0021f85c
   1d6c8:	f0402800 	.word	0xf0402800
   1d6cc:	eb0c80be 	.word	0xeb0c80be
   1d6d0:	e0040181 	.word	0xe0040181
   1d6d4:	0d04f851 	.word	0x0d04f851
   1d6d8:	f0402800 	.word	0xf0402800
   1d6dc:	3a018083 	.word	0x3a018083
   1d6e0:	463ad1f8 	.word	0x463ad1f8
   1d6e4:	46304631 	.word	0x46304631
   1d6e8:	f8d4f7ff 	.word	0xf8d4f7ff
   1d6ec:	e8bdb140 	.word	0xe8bdb140
   1d6f0:	463a81f0 	.word	0x463a81f0
   1d6f4:	46304631 	.word	0x46304631
   1d6f8:	f828f7ff 	.word	0xf828f7ff
   1d6fc:	d1f62800 	.word	0xd1f62800
   1d700:	46396035 	.word	0x46396035
   1d704:	f7fe4630 	.word	0xf7fe4630
   1d708:	2800ff65 	.word	0x2800ff65
   1d70c:	2000dabc 	.word	0x2000dabc
   1d710:	81f0e8bd 	.word	0x81f0e8bd
   1d714:	2c006834 	.word	0x2c006834
   1d718:	683bdaae 	.word	0x683bdaae
   1d71c:	f304fb03 	.word	0xf304fb03
   1d720:	da232b00 	.word	0xda232b00
   1d724:	0f00f1bc 	.word	0x0f00f1bc
   1d728:	4613d129 	.word	0x4613d129
   1d72c:	f853e002 	.word	0xf853e002
   1d730:	bb222d04 	.word	0xbb222d04
   1d734:	d1fa3901 	.word	0xd1fa3901
   1d738:	b173687b 	.word	0xb173687b
   1d73c:	c008f8d7 	.word	0xc008f8d7
   1d740:	0208eb03 	.word	0x0208eb03
   1d744:	5022f85c 	.word	0x5022f85c
   1d748:	0282eb0c 	.word	0x0282eb0c
   1d74c:	e071b11d 	.word	0xe071b11d
   1d750:	5d04f852 	.word	0x5d04f852
   1d754:	3b01bb05 	.word	0x3b01bb05
   1d758:	463ad1fa 	.word	0x463ad1fa
   1d75c:	46304631 	.word	0x46304631
   1d760:	f898f7ff 	.word	0xf898f7ff
   1d764:	d1c22800 	.word	0xd1c22800
   1d768:	e7706034 	.word	0xe7706034
   1d76c:	4631463a 	.word	0x4631463a
   1d770:	f7fe4630 	.word	0xf7fe4630
   1d774:	2800ffeb 	.word	0x2800ffeb
   1d778:	e8bdd0f6 	.word	0xe8bdd0f6
   1d77c:	687b81f0 	.word	0x687b81f0
   1d780:	d0ea2b00 	.word	0xd0ea2b00
   1d784:	c008f8d7 	.word	0xc008f8d7
   1d788:	0208eb03 	.word	0x0208eb03
   1d78c:	5022f85c 	.word	0x5022f85c
   1d790:	0282eb0c 	.word	0x0282eb0c
   1d794:	d0de2d00 	.word	0xd0de2d00
   1d798:	d8de4299 	.word	0xd8de4299
   1d79c:	2900d34a 	.word	0x2900d34a
   1d7a0:	eb01d0db 	.word	0xeb01d0db
   1d7a4:	f8500308 	.word	0xf8500308
   1d7a8:	f85c2023 	.word	0xf85c2023
   1d7ac:	009b5023 	.word	0x009b5023
   1d7b0:	44184295 	.word	0x44184295
   1d7b4:	d3d04463 	.word	0xd3d04463
   1d7b8:	e03bd907 	.word	0xe03bd907
   1d7bc:	5d04f850 	.word	0x5d04f850
   1d7c0:	2d04f853 	.word	0x2d04f853
   1d7c4:	d8c84295 	.word	0xd8c84295
   1d7c8:	3901d334 	.word	0x3901d334
   1d7cc:	e7c4d1f6 	.word	0xe7c4d1f6
   1d7d0:	d0862a00 	.word	0xd0862a00
   1d7d4:	c008f8d7 	.word	0xc008f8d7
   1d7d8:	f85c1911 	.word	0xf85c1911
   1d7dc:	28000021 	.word	0x28000021
   1d7e0:	af75f43f 	.word	0xaf75f43f
   1d7e4:	f63f4293 	.word	0xf63f4293
   1d7e8:	d32eaf7c 	.word	0xd32eaf7c
   1d7ec:	f43f2b00 	.word	0xf43f2b00
   1d7f0:	68b1af78 	.word	0x68b1af78
   1d7f4:	f851191a 	.word	0xf851191a
   1d7f8:	f85c0022 	.word	0xf85c0022
   1d7fc:	0092e022 	.word	0x0092e022
   1d800:	44114586 	.word	0x44114586
   1d804:	f4ff4462 	.word	0xf4ff4462
   1d808:	d908af6c 	.word	0xd908af6c
   1d80c:	f851e01d 	.word	0xf851e01d
   1d810:	f852cd04 	.word	0xf852cd04
   1d814:	45840d04 	.word	0x45840d04
   1d818:	af63f63f 	.word	0xaf63f63f
   1d81c:	3b01d315 	.word	0x3b01d315
   1d820:	463ad1f5 	.word	0x463ad1f5
   1d824:	46304631 	.word	0x46304631
   1d828:	f834f7ff 	.word	0xf834f7ff
   1d82c:	f47f2800 	.word	0xf47f2800
   1d830:	e765af5e 	.word	0xe765af5e
   1d834:	46394632 	.word	0x46394632
   1d838:	f7ff4630 	.word	0xf7ff4630
   1d83c:	2800f82b 	.word	0x2800f82b
   1d840:	af55f47f 	.word	0xaf55f47f
   1d844:	60344264 	.word	0x60344264
   1d848:	4632e701 	.word	0x4632e701
   1d84c:	46304639 	.word	0x46304639
   1d850:	f820f7ff 	.word	0xf820f7ff
   1d854:	f47f2800 	.word	0xf47f2800
   1d858:	426daf4a 	.word	0x426daf4a
   1d85c:	e70d6035 	.word	0xe70d6035
   1d860:	2b00683b 	.word	0x2b00683b
   1d864:	aee8f6bf 	.word	0xaee8f6bf
   1d868:	0009f06f 	.word	0x0009f06f
   1d86c:	bf00e73f 	.word	0xbf00e73f

0001d870 <symbol_0005f38>:
   1d870:	41f0e92d 	.word	0x41f0e92d
   1d874:	2501460f 	.word	0x2501460f
   1d878:	68bb2100 	.word	0x68bb2100
   1d87c:	4604b086 	.word	0x4604b086
   1d880:	95004616 	.word	0x95004616
   1d884:	e9cd9503 	.word	0xe9cd9503
   1d888:	e9cd1101 	.word	0xe9cd1101
   1d88c:	2b001104 	.word	0x2b001104
   1d890:	6879d040 	.word	0x6879d040
   1d894:	d0111e4a 	.word	0xd0111e4a
   1d898:	0022f853 	.word	0x0022f853
   1d89c:	f0402800 	.word	0xf0402800
   1d8a0:	f10180c4 	.word	0xf10180c4
   1d8a4:	39014180 	.word	0x39014180
   1d8a8:	0381eb03 	.word	0x0381eb03
   1d8ac:	f853e004 	.word	0xf853e004
   1d8b0:	29001d04 	.word	0x29001d04
   1d8b4:	80b9f040 	.word	0x80b9f040
   1d8b8:	d1f83a01 	.word	0xd1f83a01
   1d8bc:	683b2501 	.word	0x683b2501
   1d8c0:	21049300 	.word	0x21049300
   1d8c4:	f0014628 	.word	0xf0014628
   1d8c8:	4680fe17 	.word	0x4680fe17
   1d8cc:	f0002800 	.word	0xf0002800
   1d8d0:	9902813c 	.word	0x9902813c
   1d8d4:	9a01b189 	.word	0x9a01b189
   1d8d8:	f0060092 	.word	0xf0060092
   1d8dc:	e9ddff7a 	.word	0xe9ddff7a
   1d8e0:	1e532001 	.word	0x1e532001
   1d8e4:	2200b13a 	.word	0x2200b13a
   1d8e8:	1c593b01 	.word	0x1c593b01
   1d8ec:	f1006002 	.word	0xf1006002
   1d8f0:	d1f90004 	.word	0xd1f90004
   1d8f4:	f0019802 	.word	0xf0019802
   1d8f8:	e9cdfe13 	.word	0xe9cdfe13
   1d8fc:	00ad5801 	.word	0x00ad5801
   1d900:	2100462a 	.word	0x2100462a
   1d904:	f0064640 	.word	0xf0064640
   1d908:	462aff8e 	.word	0x462aff8e
   1d90c:	980268b9 	.word	0x980268b9
   1d910:	ff5ff006 	.word	0xff5ff006
   1d914:	a8034631 	.word	0xa8034631
   1d918:	fa1ef7fe 	.word	0xfa1ef7fe
   1d91c:	28004607 	.word	0x28004607
   1d920:	9e01d15d 	.word	0x9e01d15d
   1d924:	f0002e00 	.word	0xf0002e00
   1d928:	4601810e 	.word	0x4601810e
   1d92c:	3d049d02 	.word	0x3d049d02
   1d930:	f8552200 	.word	0xf8552200
   1d934:	e0040f04 	.word	0xe0040f04
   1d938:	f1012a20 	.word	0xf1012a20
   1d93c:	f0000101 	.word	0xf0000101
   1d940:	fa208081 	.word	0xfa208081
   1d944:	f013f302 	.word	0xf013f302
   1d948:	f1020301 	.word	0xf1020301
   1d94c:	d0f30201 	.word	0xd0f30201
   1d950:	b1b59d04 	.word	0xb1b59d04
   1d954:	46842000 	.word	0x46842000
   1d958:	3f049f05 	.word	0x3f049f05
   1d95c:	f8572200 	.word	0xf8572200
   1d960:	e0036f04 	.word	0xe0036f04
   1d964:	f1002a20 	.word	0xf1002a20
   1d968:	d0710001 	.word	0xd0710001
   1d96c:	f302fa26 	.word	0xf302fa26
   1d970:	0301f013 	.word	0x0301f013
   1d974:	0201f102 	.word	0x0201f102
   1d978:	4281d0f4 	.word	0x4281d0f4
   1d97c:	4601bf28 	.word	0x4601bf28
   1d980:	4668460d 	.word	0x4668460d
   1d984:	f7fe4629 	.word	0xf7fe4629
   1d988:	4607fdb5 	.word	0x4607fdb5
   1d98c:	4629bb38 	.word	0x4629bb38
   1d990:	f7fea803 	.word	0xf7fea803
   1d994:	4607fdaf 	.word	0x4607fdaf
   1d998:	2301bb08 	.word	0x2301bb08
   1d99c:	4640f06f 	.word	0x4640f06f
   1d9a0:	93009303 	.word	0x93009303
   1d9a4:	b17f9f01 	.word	0xb17f9f01
   1d9a8:	19ba9802 	.word	0x19ba9802
   1d9ac:	3022f850 	.word	0x3022f850
   1d9b0:	0282eb00 	.word	0x0282eb00
   1d9b4:	d1512b00 	.word	0xd1512b00
   1d9b8:	e003463b 	.word	0xe003463b
   1d9bc:	1d04f852 	.word	0x1d04f852
   1d9c0:	d14b2900 	.word	0xd14b2900
   1d9c4:	d1f93b01 	.word	0xd1f93b01
   1d9c8:	a8034629 	.word	0xa8034629
   1d9cc:	fcdcf7fe 	.word	0xfcdcf7fe
   1d9d0:	b9204607 	.word	0xb9204607
   1d9d4:	4620a903 	.word	0x4620a903
   1d9d8:	f9bef7fe 	.word	0xf9bef7fe
   1d9dc:	98024607 	.word	0x98024607
   1d9e0:	9a01b160 	.word	0x9a01b160
   1d9e4:	b13a1e53 	.word	0xb13a1e53
   1d9e8:	3b012200 	.word	0x3b012200
   1d9ec:	60021c5c 	.word	0x60021c5c
   1d9f0:	0004f100 	.word	0x0004f100
   1d9f4:	9802d1f9 	.word	0x9802d1f9
   1d9f8:	fd92f001 	.word	0xfd92f001
   1d9fc:	23012200 	.word	0x23012200
   1da00:	e9cd9805 	.word	0xe9cd9805
   1da04:	92023200 	.word	0x92023200
   1da08:	9904b158 	.word	0x9904b158
   1da0c:	b1311e4b 	.word	0xb1311e4b
   1da10:	1c593b01 	.word	0x1c593b01
   1da14:	f1006002 	.word	0xf1006002
   1da18:	d1f90004 	.word	0xd1f90004
   1da1c:	f0019805 	.word	0xf0019805
   1da20:	4638fd7f 	.word	0x4638fd7f
   1da24:	e8bdb006 	.word	0xe8bdb006
   1da28:	f24281f0 	.word	0xf24281f0
   1da2c:	68397310 	.word	0x68397310
   1da30:	429d1c55 	.word	0x429d1c55
   1da34:	f2009100 	.word	0xf2009100
   1da38:	2d008083 	.word	0x2d008083
   1da3c:	af41f47f 	.word	0xaf41f47f
   1da40:	e75d46a8 	.word	0xe75d46a8
   1da44:	42be3701 	.word	0x42be3701
   1da48:	af72f47f 	.word	0xaf72f47f
   1da4c:	e77f4619 	.word	0xe77f4619
   1da50:	0c01f10c 	.word	0x0c01f10c
   1da54:	d18145ac 	.word	0xd18145ac
   1da58:	e792461d 	.word	0xe792461d
   1da5c:	2b009b00 	.word	0x2b009b00
   1da60:	2100d0b2 	.word	0x2100d0b2
   1da64:	f1a0468e 	.word	0xf1a0468e
   1da68:	22000c04 	.word	0x22000c04
   1da6c:	0f04f85c 	.word	0x0f04f85c
   1da70:	2a20e003 	.word	0x2a20e003
   1da74:	0101f101 	.word	0x0101f101
   1da78:	fa20d042 	.word	0xfa20d042
   1da7c:	f013f302 	.word	0xf013f302
   1da80:	f1020301 	.word	0xf1020301
   1da84:	d0f40201 	.word	0xd0f40201
   1da88:	f7fe4668 	.word	0xf7fe4668
   1da8c:	4607fd33 	.word	0x4607fd33
   1da90:	d1a42800 	.word	0xd1a42800
   1da94:	c010f8dd 	.word	0xc010f8dd
   1da98:	0f00f1bc 	.word	0x0f00f1bc
   1da9c:	4601d04e 	.word	0x4601d04e
   1daa0:	9f054686 	.word	0x9f054686
   1daa4:	22003f04 	.word	0x22003f04
   1daa8:	0f04f857 	.word	0x0f04f857
   1daac:	2a20e003 	.word	0x2a20e003
   1dab0:	0101f101 	.word	0x0101f101
   1dab4:	fa20d02a 	.word	0xfa20d02a
   1dab8:	f013f302 	.word	0xf013f302
   1dabc:	f1020301 	.word	0xf1020301
   1dac0:	d0f40201 	.word	0xd0f40201
   1dac4:	f7fea803 	.word	0xf7fea803
   1dac8:	4607fd15 	.word	0x4607fd15
   1dacc:	d1862800 	.word	0xd1862800
   1dad0:	4668a903 	.word	0x4668a903
   1dad4:	fd7ef7fe 	.word	0xfd7ef7fe
   1dad8:	db1d2800 	.word	0xdb1d2800
   1dadc:	4669aa03 	.word	0x4669aa03
   1dae0:	f7fe4668 	.word	0xf7fe4668
   1dae4:	4607fed7 	.word	0x4607fed7
   1dae8:	f47f2800 	.word	0xf47f2800
   1daec:	2101af78 	.word	0x2101af78
   1daf0:	f7fe4668 	.word	0xf7fe4668
   1daf4:	4607fcff 	.word	0x4607fcff
   1daf8:	f43f2800 	.word	0xf43f2800
   1dafc:	e76eaf53 	.word	0xe76eaf53
   1db00:	0e01f10e 	.word	0x0e01f10e
   1db04:	d1b045be 	.word	0xd1b045be
   1db08:	e7bd4619 	.word	0xe7bd4619
   1db0c:	0e01f10e 	.word	0x0e01f10e
   1db10:	d1c845e6 	.word	0xd1c845e6
   1db14:	e7d54619 	.word	0xe7d54619
   1db18:	466aa903 	.word	0x466aa903
   1db1c:	f7fe4608 	.word	0xf7fe4608
   1db20:	4607feb9 	.word	0x4607feb9
   1db24:	f47f2800 	.word	0xf47f2800
   1db28:	2101af5a 	.word	0x2101af5a
   1db2c:	f7fea803 	.word	0xf7fea803
   1db30:	4607fce1 	.word	0x4607fce1
   1db34:	f43f2800 	.word	0xf43f2800
   1db38:	e750af35 	.word	0xe750af35
   1db3c:	e7c14661 	.word	0xe7c14661
   1db40:	070ff06f 	.word	0x070ff06f
   1db44:	4631e75a 	.word	0x4631e75a
   1db48:	9802e702 	.word	0x9802e702
   1db4c:	070ff06f 	.word	0x070ff06f
   1db50:	bf00e746 	.word	0xbf00e746

0001db54 <symbol_000644e>:
   1db54:	43f0e92d 	.word	0x43f0e92d
   1db58:	6f80f5b1 	.word	0x6f80f5b1
   1db5c:	4d04f2ad 	.word	0x4d04f2ad
   1db60:	80a5f200 	.word	0x80a5f200
   1db64:	4617460d 	.word	0x4617460d
   1db68:	46694606 	.word	0x46694606
   1db6c:	462a4618 	.word	0x462a4618
   1db70:	460747b8 	.word	0x460747b8
   1db74:	4638b120 	.word	0x4638b120
   1db78:	4d04f20d 	.word	0x4d04f20d
   1db7c:	83f0e8bd 	.word	0x83f0e8bd
   1db80:	f0002d00 	.word	0xf0002d00
   1db84:	f89d808a 	.word	0xf89d808a
   1db88:	2b003000 	.word	0x2b003000
   1db8c:	8089f040 	.word	0x8089f040
   1db90:	4604466b 	.word	0x4604466b
   1db94:	f813e003 	.word	0xf813e003
   1db98:	2a002f01 	.word	0x2a002f01
   1db9c:	3401d14d 	.word	0x3401d14d
   1dba0:	d1f842a5 	.word	0xd1f842a5
   1dba4:	8004f8d6 	.word	0x8004f8d6
   1dba8:	0f00f1b8 	.word	0x0f00f1b8
   1dbac:	2104d170 	.word	0x2104d170
   1dbb0:	f0012001 	.word	0xf0012001
   1dbb4:	4681fca1 	.word	0x4681fca1
   1dbb8:	d0752800 	.word	0xd0752800
   1dbbc:	b18968b1 	.word	0xb18968b1
   1dbc0:	00926872 	.word	0x00926872
   1dbc4:	fe05f006 	.word	0xfe05f006
   1dbc8:	2001e9d6 	.word	0x2001e9d6
   1dbcc:	b13a1e53 	.word	0xb13a1e53
   1dbd0:	3b014642 	.word	0x3b014642
   1dbd4:	60021c59 	.word	0x60021c59
   1dbd8:	0004f100 	.word	0x0004f100
   1dbdc:	68b0d1f9 	.word	0x68b0d1f9
   1dbe0:	fc9ef001 	.word	0xfc9ef001
   1dbe4:	22042301 	.word	0x22042301
   1dbe8:	3901e9c6 	.word	0x3901e9c6
   1dbec:	46482100 	.word	0x46482100
   1dbf0:	fe19f006 	.word	0xfe19f006
   1dbf4:	22012300 	.word	0x22012300
   1dbf8:	42a568b1 	.word	0x42a568b1
   1dbfc:	6032600b 	.word	0x6032600b
   1dc00:	eb0dd9b9 	.word	0xeb0dd9b9
   1dc04:	1b2c0205 	.word	0x1b2c0205
   1dc08:	f02368b1 	.word	0xf02368b1
   1dc0c:	ea4f0803 	.word	0xea4f0803
   1dc10:	f8120ec3 	.word	0xf8120ec3
   1dc14:	f851cd01 	.word	0xf851cd01
   1dc18:	f00e0008 	.word	0xf00e0008
   1dc1c:	fa0c0e18 	.word	0xfa0c0e18
   1dc20:	3301fc0e 	.word	0x3301fc0e
   1dc24:	000cea40 	.word	0x000cea40
   1dc28:	f84142a3 	.word	0xf84142a3
   1dc2c:	d1eb0008 	.word	0xd1eb0008
   1dc30:	f20d4638 	.word	0xf20d4638
   1dc34:	e8bd4d04 	.word	0xe8bd4d04
   1dc38:	1b2a83f0 	.word	0x1b2a83f0
   1dc3c:	0803f012 	.word	0x0803f012
   1dc40:	f04fbf18 	.word	0xf04fbf18
   1dc44:	f2420801 	.word	0xf2420801
   1dc48:	eb087310 	.word	0xeb087310
   1dc4c:	45980892 	.word	0x45980892
   1dc50:	6873d82a 	.word	0x6873d82a
   1dc54:	d92d4598 	.word	0xd92d4598
   1dc58:	46402104 	.word	0x46402104
   1dc5c:	fc4cf001 	.word	0xfc4cf001
   1dc60:	b3084681 	.word	0xb3084681
   1dc64:	b18968b1 	.word	0xb18968b1
   1dc68:	00926872 	.word	0x00926872
   1dc6c:	fdb1f006 	.word	0xfdb1f006
   1dc70:	2001e9d6 	.word	0x2001e9d6
   1dc74:	b13a1e53 	.word	0xb13a1e53
   1dc78:	3b012200 	.word	0x3b012200
   1dc7c:	60021c59 	.word	0x60021c59
   1dc80:	0004f100 	.word	0x0004f100
   1dc84:	68b0d1f9 	.word	0x68b0d1f9
   1dc88:	fc4af001 	.word	0xfc4af001
   1dc8c:	8901e9c6 	.word	0x8901e9c6
   1dc90:	0288ea4f 	.word	0x0288ea4f
   1dc94:	9008f8d6 	.word	0x9008f8d6
   1dc98:	f8d6e7a8 	.word	0xf8d6e7a8
   1dc9c:	462c8004 	.word	0x462c8004
   1dca0:	462ae782 	.word	0x462ae782
   1dca4:	e7c94604 	.word	0xe7c94604
   1dca8:	070ff06f 	.word	0x070ff06f
   1dcac:	f06fe763 	.word	0xf06fe763
   1dcb0:	e7600703 	.word	0xe7600703
   1dcb4:	e7774698 	.word	0xe7774698

0001dcb8 <symbol_0004482>:
   1dcb8:	43f0e92d 	.word	0x43f0e92d
   1dcbc:	b0a16853 	.word	0xb0a16853
   1dcc0:	6894b17b 	.word	0x6894b17b
   1dcc4:	4c80f103 	.word	0x4c80f103
   1dcc8:	3cfff10c 	.word	0x3cfff10c
   1dccc:	502cf854 	.word	0x502cf854
   1dcd0:	048ceb04 	.word	0x048ceb04
   1dcd4:	e00ab11d 	.word	0xe00ab11d
   1dcd8:	5d04f854 	.word	0x5d04f854
   1dcdc:	3b01b93d 	.word	0x3b01b93d
   1dce0:	f06fd1fa 	.word	0xf06fd1fa
   1dce4:	46200403 	.word	0x46200403
   1dce8:	e8bdb021 	.word	0xe8bdb021
   1dcec:	681383f0 	.word	0x681383f0
   1dcf0:	ddf62b00 	.word	0xddf62b00
   1dcf4:	23002401 	.word	0x23002401
   1dcf8:	a8024606 	.word	0xa8024606
   1dcfc:	94089405 	.word	0x94089405
   1dd00:	940e940b 	.word	0x940e940b
   1dd04:	94119402 	.word	0x94119402
   1dd08:	94179414 	.word	0x94179414
   1dd0c:	460f941a 	.word	0x460f941a
   1dd10:	e9cd4615 	.word	0xe9cd4615
   1dd14:	e9cd3306 	.word	0xe9cd3306
   1dd18:	e9cd3309 	.word	0xe9cd3309
   1dd1c:	e9cd330c 	.word	0xe9cd330c
   1dd20:	e9cd330f 	.word	0xe9cd330f
   1dd24:	e9cd3303 	.word	0xe9cd3303
   1dd28:	e9cd3312 	.word	0xe9cd3312
   1dd2c:	e9cd3315 	.word	0xe9cd3315
   1dd30:	e9cd3318 	.word	0xe9cd3318
   1dd34:	f7ff331b 	.word	0xf7ff331b
   1dd38:	4604fd9b 	.word	0x4604fd9b
   1dd3c:	9b03b9a0 	.word	0x9b03b9a0
   1dd40:	9904b183 	.word	0x9904b183
   1dd44:	4480f103 	.word	0x4480f103
   1dd48:	f8513c01 	.word	0xf8513c01
   1dd4c:	eb012024 	.word	0xeb012024
   1dd50:	b12a0484 	.word	0xb12a0484
   1dd54:	f854e0b5 	.word	0xf854e0b5
   1dd58:	2a002d04 	.word	0x2a002d04
   1dd5c:	80b1f040 	.word	0x80b1f040
   1dd60:	d1f83b01 	.word	0xd1f83b01
   1dd64:	040df06f 	.word	0x040df06f
   1dd68:	b1609807 	.word	0xb1609807
   1dd6c:	1e539a06 	.word	0x1e539a06
   1dd70:	2200b13a 	.word	0x2200b13a
   1dd74:	1c593b01 	.word	0x1c593b01
   1dd78:	f1006002 	.word	0xf1006002
   1dd7c:	d1f90004 	.word	0xd1f90004
   1dd80:	f0019807 	.word	0xf0019807
   1dd84:	2200fbcd 	.word	0x2200fbcd
   1dd88:	980a2301 	.word	0x980a2301
   1dd8c:	3205e9cd 	.word	0x3205e9cd
   1dd90:	b1589207 	.word	0xb1589207
   1dd94:	1e4b9909 	.word	0x1e4b9909
   1dd98:	3b01b131 	.word	0x3b01b131
   1dd9c:	60021c5f 	.word	0x60021c5f
   1dda0:	0004f100 	.word	0x0004f100
   1dda4:	980ad1f9 	.word	0x980ad1f9
   1dda8:	fbbaf001 	.word	0xfbbaf001
   1ddac:	23012200 	.word	0x23012200
   1ddb0:	e9cd980d 	.word	0xe9cd980d
   1ddb4:	920a3208 	.word	0x920a3208
   1ddb8:	990cb158 	.word	0x990cb158
   1ddbc:	b1311e4b 	.word	0xb1311e4b
   1ddc0:	1c5e3b01 	.word	0x1c5e3b01
   1ddc4:	f1006002 	.word	0xf1006002
   1ddc8:	d1f90004 	.word	0xd1f90004
   1ddcc:	f001980d 	.word	0xf001980d
   1ddd0:	2200fba7 	.word	0x2200fba7
   1ddd4:	98102301 	.word	0x98102301
   1ddd8:	320be9cd 	.word	0x320be9cd
   1dddc:	b158920d 	.word	0xb158920d
   1dde0:	1e4b990f 	.word	0x1e4b990f
   1dde4:	3b01b131 	.word	0x3b01b131
   1dde8:	60021c5d 	.word	0x60021c5d
   1ddec:	0004f100 	.word	0x0004f100
   1ddf0:	9810d1f9 	.word	0x9810d1f9
   1ddf4:	fb94f001 	.word	0xfb94f001
   1ddf8:	23012200 	.word	0x23012200
   1ddfc:	e9cd9804 	.word	0xe9cd9804
   1de00:	9210320e 	.word	0x9210320e
   1de04:	9903b158 	.word	0x9903b158
   1de08:	b1311e4b 	.word	0xb1311e4b
   1de0c:	1c593b01 	.word	0x1c593b01
   1de10:	f1006002 	.word	0xf1006002
   1de14:	d1f90004 	.word	0xd1f90004
   1de18:	f0019804 	.word	0xf0019804
   1de1c:	2200fb81 	.word	0x2200fb81
   1de20:	98132301 	.word	0x98132301
   1de24:	3202e9cd 	.word	0x3202e9cd
   1de28:	b1589204 	.word	0xb1589204
   1de2c:	1e4b9912 	.word	0x1e4b9912
   1de30:	3b01b131 	.word	0x3b01b131
   1de34:	60021c5f 	.word	0x60021c5f
   1de38:	0004f100 	.word	0x0004f100
   1de3c:	9813d1f9 	.word	0x9813d1f9
   1de40:	fb6ef001 	.word	0xfb6ef001
   1de44:	23012200 	.word	0x23012200
   1de48:	e9cd9816 	.word	0xe9cd9816
   1de4c:	92133211 	.word	0x92133211
   1de50:	9915b158 	.word	0x9915b158
   1de54:	b1311e4b 	.word	0xb1311e4b
   1de58:	1c5e3b01 	.word	0x1c5e3b01
   1de5c:	f1006002 	.word	0xf1006002
   1de60:	d1f90004 	.word	0xd1f90004
   1de64:	f0019816 	.word	0xf0019816
   1de68:	2200fb5b 	.word	0x2200fb5b
   1de6c:	98192301 	.word	0x98192301
   1de70:	3214e9cd 	.word	0x3214e9cd
   1de74:	b1589216 	.word	0xb1589216
   1de78:	1e4b9918 	.word	0x1e4b9918
   1de7c:	3b01b131 	.word	0x3b01b131
   1de80:	60021c5d 	.word	0x60021c5d
   1de84:	0004f100 	.word	0x0004f100
   1de88:	9819d1f9 	.word	0x9819d1f9
   1de8c:	fb48f001 	.word	0xfb48f001
   1de90:	23012200 	.word	0x23012200
   1de94:	e9cd981c 	.word	0xe9cd981c
   1de98:	92193217 	.word	0x92193217
   1de9c:	f43f2800 	.word	0xf43f2800
   1dea0:	991baf22 	.word	0x991baf22
   1dea4:	b1311e4b 	.word	0xb1311e4b
   1dea8:	1c593b01 	.word	0x1c593b01
   1deac:	f1006002 	.word	0xf1006002
   1deb0:	d1f90004 	.word	0xd1f90004
   1deb4:	f001981c 	.word	0xf001981c
   1deb8:	4620fb33 	.word	0x4620fb33
   1debc:	e8bdb021 	.word	0xe8bdb021
   1dec0:	2b0183f0 	.word	0x2b0183f0
   1dec4:	d96b9a02 	.word	0xd96b9a02
   1dec8:	f47f2a00 	.word	0xf47f2a00
   1decc:	4639af4b 	.word	0x4639af4b
   1ded0:	462aa805 	.word	0x462aa805
   1ded4:	fb9af7ff 	.word	0xfb9af7ff
   1ded8:	28004604 	.word	0x28004604
   1dedc:	af44f47f 	.word	0xaf44f47f
   1dee0:	a905a808 	.word	0xa905a808
   1dee4:	ff38f7fd 	.word	0xff38f7fd
   1dee8:	28004604 	.word	0x28004604
   1deec:	af3cf47f 	.word	0xaf3cf47f
   1def0:	4629a811 	.word	0x4629a811
   1def4:	ff30f7fd 	.word	0xff30f7fd
   1def8:	28004604 	.word	0x28004604
   1defc:	af34f47f 	.word	0xaf34f47f
   1df00:	4629a814 	.word	0x4629a814
   1df04:	ff28f7fd 	.word	0xff28f7fd
   1df08:	28004604 	.word	0x28004604
   1df0c:	af2cf47f 	.word	0xaf2cf47f
   1df10:	2101a80b 	.word	0x2101a80b
   1df14:	f8acf7fe 	.word	0xf8acf7fe
   1df18:	28004604 	.word	0x28004604
   1df1c:	af24f47f 	.word	0xaf24f47f
   1df20:	a80e4601 	.word	0xa80e4601
   1df24:	f8a4f7fe 	.word	0xf8a4f7fe
   1df28:	28004604 	.word	0x28004604
   1df2c:	af1cf47f 	.word	0xaf1cf47f
   1df30:	a8174601 	.word	0xa8174601
   1df34:	f89cf7fe 	.word	0xf89cf7fe
   1df38:	28004604 	.word	0x28004604
   1df3c:	af14f47f 	.word	0xaf14f47f
   1df40:	2101a81a 	.word	0x2101a81a
   1df44:	f894f7fe 	.word	0xf894f7fe
   1df48:	28004604 	.word	0x28004604
   1df4c:	af0cf47f 	.word	0xaf0cf47f
   1df50:	f04f4681 	.word	0xf04f4681
   1df54:	af010801 	.word	0xaf010801
   1df58:	681b9b0a 	.word	0x681b9b0a
   1df5c:	d42c07da 	.word	0xd42c07da
   1df60:	a8082101 	.word	0xa8082101
   1df64:	fac6f7fe 	.word	0xfac6f7fe
   1df68:	28004604 	.word	0x28004604
   1df6c:	aefcf47f 	.word	0xaefcf47f
   1df70:	681b9b0d 	.word	0x681b9b0d
   1df74:	d44407d8 	.word	0xd44407d8
   1df78:	681b9b10 	.word	0x681b9b10
   1df7c:	d44007d9 	.word	0xd44007d9
   1df80:	a80b2101 	.word	0xa80b2101
   1df84:	fab6f7fe 	.word	0xfab6f7fe
   1df88:	28004604 	.word	0x28004604
   1df8c:	aeecf47f 	.word	0xaeecf47f
   1df90:	a80e2101 	.word	0xa80e2101
   1df94:	faaef7fe 	.word	0xfaaef7fe
   1df98:	28004604 	.word	0x28004604
   1df9c:	e6e3d0dc 	.word	0xe6e3d0dc
   1dfa0:	f6ff2a00 	.word	0xf6ff2a00
   1dfa4:	680baedf 	.word	0x680baedf
   1dfa8:	d88d2b01 	.word	0xd88d2b01
   1dfac:	d18e2b00 	.word	0xd18e2b00
   1dfb0:	2a004252 	.word	0x2a004252
   1dfb4:	aed6f47f 	.word	0xaed6f47f
   1dfb8:	9b16e789 	.word	0x9b16e789
   1dfbc:	07d8681b 	.word	0x07d8681b
   1dfc0:	2101d443 	.word	0x2101d443
   1dfc4:	f7fea814 	.word	0xf7fea814
   1dfc8:	4604fa95 	.word	0x4604fa95
   1dfcc:	f47f2800 	.word	0xf47f2800
   1dfd0:	9b19aecb 	.word	0x9b19aecb
   1dfd4:	07db681b 	.word	0x07db681b
   1dfd8:	9b1cd425 	.word	0x9b1cd425
   1dfdc:	07dc681b 	.word	0x07dc681b
   1dfe0:	2101d421 	.word	0x2101d421
   1dfe4:	f7fea817 	.word	0xf7fea817
   1dfe8:	4604fa85 	.word	0x4604fa85
   1dfec:	f47f2800 	.word	0xf47f2800
   1dff0:	2101aebb 	.word	0x2101aebb
   1dff4:	f7fea81a 	.word	0xf7fea81a
   1dff8:	4604fa7d 	.word	0x4604fa7d
   1dffc:	d0dc2800 	.word	0xd0dc2800
   1e000:	a90be6b2 	.word	0xa90be6b2
   1e004:	4608aa11 	.word	0x4608aa11
   1e008:	fd04f7fe 	.word	0xfd04f7fe
   1e00c:	28004604 	.word	0x28004604
   1e010:	aeaaf47f 	.word	0xaeaaf47f
   1e014:	aa05a90e 	.word	0xaa05a90e
   1e018:	f7fe4608 	.word	0xf7fe4608
   1e01c:	4604fd6f 	.word	0x4604fd6f
   1e020:	d0ad2800 	.word	0xd0ad2800
   1e024:	a917e6a0 	.word	0xa917e6a0
   1e028:	4608aa11 	.word	0x4608aa11
   1e02c:	fcf2f7fe 	.word	0xfcf2f7fe
   1e030:	28004604 	.word	0x28004604
   1e034:	ae98f47f 	.word	0xae98f47f
   1e038:	aa05a91a 	.word	0xaa05a91a
   1e03c:	f7fe4608 	.word	0xf7fe4608
   1e040:	4604fd5d 	.word	0x4604fd5d
   1e044:	d0cc2800 	.word	0xd0cc2800
   1e048:	a914e68e 	.word	0xa914e68e
   1e04c:	f7fea808 	.word	0xf7fea808
   1e050:	2800fac1 	.word	0x2800fac1
   1e054:	a908db3d 	.word	0xa908db3d
   1e058:	4608aa14 	.word	0x4608aa14
   1e05c:	fd4ef7fe 	.word	0xfd4ef7fe
   1e060:	28004604 	.word	0x28004604
   1e064:	ae80f47f 	.word	0xae80f47f
   1e068:	aa17a90b 	.word	0xaa17a90b
   1e06c:	f7fe4608 	.word	0xf7fe4608
   1e070:	4604fd45 	.word	0x4604fd45
   1e074:	f47f2800 	.word	0xf47f2800
   1e078:	a90eae77 	.word	0xa90eae77
   1e07c:	4608aa1a 	.word	0x4608aa1a
   1e080:	fd3cf7fe 	.word	0xfd3cf7fe
   1e084:	28004604 	.word	0x28004604
   1e088:	ae6ef47f 	.word	0xae6ef47f
   1e08c:	a808a91d 	.word	0xa808a91d
   1e090:	9004f8cd 	.word	0x9004f8cd
   1e094:	881de9cd 	.word	0x881de9cd
   1e098:	f7fd971f 	.word	0xf7fd971f
   1e09c:	2800fd97 	.word	0x2800fd97
   1e0a0:	af5af47f 	.word	0xaf5af47f
   1e0a4:	f04f4680 	.word	0xf04f4680
   1e0a8:	a91d0901 	.word	0xa91d0901
   1e0ac:	f8cda817 	.word	0xf8cda817
   1e0b0:	e9cd8004 	.word	0xe9cd8004
   1e0b4:	971f991d 	.word	0x971f991d
   1e0b8:	fd88f7fd 	.word	0xfd88f7fd
   1e0bc:	da232800 	.word	0xda232800
   1e0c0:	462aa917 	.word	0x462aa917
   1e0c4:	f7fe4608 	.word	0xf7fe4608
   1e0c8:	4604fca5 	.word	0x4604fca5
   1e0cc:	d0ec2800 	.word	0xd0ec2800
   1e0d0:	a914e64a 	.word	0xa914e64a
   1e0d4:	4608aa08 	.word	0x4608aa08
   1e0d8:	fd10f7fe 	.word	0xfd10f7fe
   1e0dc:	28004604 	.word	0x28004604
   1e0e0:	ae42f47f 	.word	0xae42f47f
   1e0e4:	aa0ba917 	.word	0xaa0ba917
   1e0e8:	f7fe4608 	.word	0xf7fe4608
   1e0ec:	4604fd07 	.word	0x4604fd07
   1e0f0:	f47f2800 	.word	0xf47f2800
   1e0f4:	a91aae39 	.word	0xa91aae39
   1e0f8:	4608aa0e 	.word	0x4608aa0e
   1e0fc:	fcfef7fe 	.word	0xfcfef7fe
   1e100:	28004604 	.word	0x28004604
   1e104:	e62fd0c2 	.word	0xe62fd0c2
   1e108:	a8174629 	.word	0xa8174629
   1e10c:	fa62f7fe 	.word	0xfa62f7fe
   1e110:	db082800 	.word	0xdb082800
   1e114:	462aa917 	.word	0x462aa917
   1e118:	f7fe4608 	.word	0xf7fe4608
   1e11c:	4604fcef 	.word	0x4604fcef
   1e120:	d0f12800 	.word	0xd0f12800
   1e124:	a917e620 	.word	0xa917e620
   1e128:	f7fd4630 	.word	0xf7fd4630
   1e12c:	4604fe15 	.word	0x4604fe15
   1e130:	bf00e61a 	.word	0xbf00e61a

0001e134 <entropy_callback>:
   1e134:	4c0ab538 	.word	0x4c0ab538
   1e138:	78254b0a 	.word	0x78254b0a
   1e13c:	bf282a07 	.word	0xbf282a07
   1e140:	46082207 	.word	0x46082207
   1e144:	1145eb03 	.word	0x1145eb03
   1e148:	fb43f006 	.word	0xfb43f006
   1e14c:	20007823 	.word	0x20007823
   1e150:	b2db3301 	.word	0xb2db3301
   1e154:	bf082b07 	.word	0xbf082b07
   1e158:	70232300 	.word	0x70232300
   1e15c:	bf00bd38 	.word	0xbf00bd38
   1e160:	2002744e 	.word	0x2002744e
   1e164:	00026be4 	.word	0x00026be4

0001e168 <es256_key_generate>:
   1e168:	b0e5b5f0 	.word	0xb0e5b5f0
   1e16c:	71a8f89d 	.word	0x71a8f89d
   1e170:	b152b158 	.word	0xb152b158
   1e174:	291fb14b 	.word	0x291fb14b
   1e178:	6819d907 	.word	0x6819d907
   1e17c:	d904293f 	.word	0xd904293f
   1e180:	2955b13f 	.word	0x2955b13f
   1e184:	240cd805 	.word	0x240cd805
   1e188:	2416e000 	.word	0x2416e000
   1e18c:	b0654620 	.word	0xb0654620
   1e190:	461dbdf0 	.word	0x461dbdf0
   1e194:	21002304 	.word	0x21002304
   1e198:	46164604 	.word	0x46164604
   1e19c:	f44fa814 	.word	0xf44fa814
   1e1a0:	f88d72a0 	.word	0xf88d72a0
   1e1a4:	f006300c 	.word	0xf006300c
   1e1a8:	a814fb3e 	.word	0xa814fb3e
   1e1ac:	fe12f7f6 	.word	0xfe12f7f6
   1e1b0:	49292300 	.word	0x49292300
   1e1b4:	a814461a 	.word	0xa814461a
   1e1b8:	f7f69300 	.word	0xf7f69300
   1e1bc:	a814ff0d 	.word	0xa814ff0d
   1e1c0:	46212220 	.word	0x46212220
   1e1c4:	ff30f7f6 	.word	0xff30f7f6
   1e1c8:	a814b9b8 	.word	0xa814b9b8
   1e1cc:	fe08f7f6 	.word	0xfe08f7f6
   1e1d0:	f10d4621 	.word	0xf10d4621
   1e1d4:	f004000d 	.word	0xf004000d
   1e1d8:	4604fef7 	.word	0x4604fef7
   1e1dc:	b1c7b9b8 	.word	0xb1c7b9b8
   1e1e0:	f7f6a814 	.word	0xf7f6a814
   1e1e4:	2002f95d 	.word	0x2002f95d
   1e1e8:	f960f7f6 	.word	0xf960f7f6
   1e1ec:	a8144601 	.word	0xa8144601
   1e1f0:	f96af7f6 	.word	0xf96af7f6
   1e1f4:	240eb1a8 	.word	0x240eb1a8
   1e1f8:	4a18e7c8 	.word	0x4a18e7c8
   1e1fc:	78114b18 	.word	0x78114b18
   1e200:	22074620 	.word	0x22074620
   1e204:	1141eb03 	.word	0x1141eb03
   1e208:	fae3f006 	.word	0xfae3f006
   1e20c:	2423e7dd 	.word	0x2423e7dd
   1e210:	a903e7bc 	.word	0xa903e7bc
   1e214:	22401c70 	.word	0x22401c70
   1e218:	fadbf006 	.word	0xfadbf006
   1e21c:	602b2341 	.word	0x602b2341
   1e220:	2103e7b4 	.word	0x2103e7b4
   1e224:	f7f79815 	.word	0xf7f79815
   1e228:	2800f961 	.word	0x2800f961
   1e22c:	9815d1e3 	.word	0x9815d1e3
   1e230:	f100aa03 	.word	0xf100aa03
   1e234:	23410188 	.word	0x23410188
   1e238:	fc26f7f9 	.word	0xfc26f7f9
   1e23c:	d1da2800 	.word	0xd1da2800
   1e240:	a8144631 	.word	0xa8144631
   1e244:	f7f4682a 	.word	0xf7f4682a
   1e248:	23b2ffed 	.word	0x23b2ffed
   1e24c:	602b4604 	.word	0x602b4604
   1e250:	d09b2800 	.word	0xd09b2800
   1e254:	bf00e7cf 	.word	0xbf00e7cf
   1e258:	0001e135 	.word	0x0001e135
   1e25c:	2002744e 	.word	0x2002744e
   1e260:	00026be4 	.word	0x00026be4

0001e264 <bsd_os_application_irq_handler>:
   1e264:	41f0e92d 	.word	0x41f0e92d
   1e268:	f7f34c33 	.word	0xf7f34c33
   1e26c:	f04fffb9 	.word	0xf04fffb9
   1e270:	4d320803 	.word	0x4d320803
   1e274:	f1044f32 	.word	0xf1044f32
   1e278:	e0040680 	.word	0xe0040680
   1e27c:	d0062b04 	.word	0xd0062b04
   1e280:	42b43408 	.word	0x42b43408
   1e284:	f814d03b 	.word	0xf814d03b
   1e288:	2b023c04 	.word	0x2b023c04
   1e28c:	6820d1f6 	.word	0x6820d1f6
   1e290:	6803882a 	.word	0x6803882a
   1e294:	429ab29b 	.word	0x429ab29b
   1e298:	8a2ad033 	.word	0x8a2ad033
   1e29c:	d032429a 	.word	0xd032429a
   1e2a0:	429a8c2a 	.word	0x429a8c2a
   1e2a4:	8e2ad031 	.word	0x8e2ad031
   1e2a8:	d030429a 	.word	0xd030429a
   1e2ac:	2040f8b5 	.word	0x2040f8b5
   1e2b0:	d036429a 	.word	0xd036429a
   1e2b4:	2050f8b5 	.word	0x2050f8b5
   1e2b8:	d034429a 	.word	0xd034429a
   1e2bc:	2060f8b5 	.word	0x2060f8b5
   1e2c0:	d032429a 	.word	0xd032429a
   1e2c4:	2070f8b5 	.word	0x2070f8b5
   1e2c8:	d030429a 	.word	0xd030429a
   1e2cc:	2080f8b5 	.word	0x2080f8b5
   1e2d0:	d02e429a 	.word	0xd02e429a
   1e2d4:	2090f8b5 	.word	0x2090f8b5
   1e2d8:	bf08429a 	.word	0xbf08429a
   1e2dc:	d1cf2309 	.word	0xd1cf2309
   1e2e0:	1303eb05 	.word	0x1303eb05
   1e2e4:	68d9685a 	.word	0x68d9685a
   1e2e8:	b9904790 	.word	0xb9904790
   1e2ec:	68202201 	.word	0x68202201
   1e2f0:	2c04f804 	.word	0x2c04f804
   1e2f4:	340868fb 	.word	0x340868fb
   1e2f8:	42b44798 	.word	0x42b44798
   1e2fc:	e8bdd1c3 	.word	0xe8bdd1c3
   1e300:	230081f0 	.word	0x230081f0
   1e304:	2301e7ec 	.word	0x2301e7ec
   1e308:	2302e7ea 	.word	0x2302e7ea
   1e30c:	2303e7e8 	.word	0x2303e7e8
   1e310:	2802e7e6 	.word	0x2802e7e6
   1e314:	2304bf0a 	.word	0x2304bf0a
   1e318:	8c04f804 	.word	0x8c04f804
   1e31c:	3c04f804 	.word	0x3c04f804
   1e320:	2304e7ae 	.word	0x2304e7ae
   1e324:	2305e7dc 	.word	0x2305e7dc
   1e328:	2306e7da 	.word	0x2306e7da
   1e32c:	2307e7d8 	.word	0x2307e7d8
   1e330:	2308e7d6 	.word	0x2308e7d6
   1e334:	bf00e7d4 	.word	0xbf00e7d4
   1e338:	200217dc 	.word	0x200217dc
   1e33c:	200216a0 	.word	0x200216a0
   1e340:	20021740 	.word	0x20021740

0001e344 <rpc_framework_init>:
   1e344:	22a0b508 	.word	0x22a0b508
   1e348:	48022100 	.word	0x48022100
   1e34c:	fa6bf006 	.word	0xfa6bf006
   1e350:	bd082000 	.word	0xbd082000
   1e354:	200216a0 	.word	0x200216a0

0001e358 <rpc_client_register>:
   1e358:	2b008803 	.word	0x2b008803
   1e35c:	6842d045 	.word	0x6842d045
   1e360:	2a004601 	.word	0x2a004601
   1e364:	4a30d050 	.word	0x4a30d050
   1e368:	42838810 	.word	0x42838810
   1e36c:	e92dd03d 	.word	0xe92dd03d
   1e370:	8a1447f0 	.word	0x8a1447f0
   1e374:	d03542a3 	.word	0xd03542a3
   1e378:	42ab8c15 	.word	0x42ab8c15
   1e37c:	8e16d032 	.word	0x8e16d032
   1e380:	d02f42b3 	.word	0xd02f42b3
   1e384:	7040f8b2 	.word	0x7040f8b2
   1e388:	d02b42bb 	.word	0xd02b42bb
   1e38c:	c050f8b2 	.word	0xc050f8b2
   1e390:	d0274563 	.word	0xd0274563
   1e394:	e060f8b2 	.word	0xe060f8b2
   1e398:	d0234573 	.word	0xd0234573
   1e39c:	8070f8b2 	.word	0x8070f8b2
   1e3a0:	d01f4543 	.word	0xd01f4543
   1e3a4:	9080f8b2 	.word	0x9080f8b2
   1e3a8:	d01b454b 	.word	0xd01b454b
   1e3ac:	a090f8b2 	.word	0xa090f8b2
   1e3b0:	d0174553 	.word	0xd0174553
   1e3b4:	b35cb1e0 	.word	0xb35cb1e0
   1e3b8:	b36eb365 	.word	0xb36eb365
   1e3bc:	f1bcb377 	.word	0xf1bcb377
   1e3c0:	d02d0f00 	.word	0xd02d0f00
   1e3c4:	0f00f1be 	.word	0x0f00f1be
   1e3c8:	f1b8d020 	.word	0xf1b8d020
   1e3cc:	d0290f00 	.word	0xd0290f00
   1e3d0:	0f00f1b9 	.word	0x0f00f1b9
   1e3d4:	2009d00b 	.word	0x2009d00b
   1e3d8:	0f00f1ba 	.word	0x0f00f1ba
   1e3dc:	2004d008 	.word	0x2004d008
   1e3e0:	87f0e8bd 	.word	0x87f0e8bd
   1e3e4:	e8bd2007 	.word	0xe8bd2007
   1e3e8:	200787f0 	.word	0x200787f0
   1e3ec:	20084770 	.word	0x20084770
   1e3f0:	52130100 	.word	0x52130100
   1e3f4:	4402684b 	.word	0x4402684b
   1e3f8:	688b6053 	.word	0x688b6053
   1e3fc:	60932000 	.word	0x60932000
   1e400:	60d368cb 	.word	0x60d368cb
   1e404:	87f0e8bd 	.word	0x87f0e8bd
   1e408:	4770200e 	.word	0x4770200e
   1e40c:	e7ef2006 	.word	0xe7ef2006
   1e410:	e7ed2001 	.word	0xe7ed2001
   1e414:	e7eb2002 	.word	0xe7eb2002
   1e418:	e7e92003 	.word	0xe7e92003
   1e41c:	e7e72004 	.word	0xe7e72004
   1e420:	e7e52005 	.word	0xe7e52005
   1e424:	e7e32007 	.word	0xe7e32007
   1e428:	200216a0 	.word	0x200216a0

0001e42c <rpc_transport_input>:
   1e42c:	4a82b538 	.word	0x4a82b538
   1e430:	8810680b 	.word	0x8810680b
   1e434:	4298b29b 	.word	0x4298b29b
   1e438:	8a10d027 	.word	0x8a10d027
   1e43c:	d0244298 	.word	0xd0244298
   1e440:	42988c10 	.word	0x42988c10
   1e444:	8e10d021 	.word	0x8e10d021
   1e448:	d01e4298 	.word	0xd01e4298
   1e44c:	0040f8b2 	.word	0x0040f8b2
   1e450:	d01a4298 	.word	0xd01a4298
   1e454:	0050f8b2 	.word	0x0050f8b2
   1e458:	d0164298 	.word	0xd0164298
   1e45c:	0060f8b2 	.word	0x0060f8b2
   1e460:	d0124298 	.word	0xd0124298
   1e464:	0070f8b2 	.word	0x0070f8b2
   1e468:	d00e4298 	.word	0xd00e4298
   1e46c:	0080f8b2 	.word	0x0080f8b2
   1e470:	d00a4298 	.word	0xd00a4298
   1e474:	2090f8b2 	.word	0x2090f8b2
   1e478:	d006429a 	.word	0xd006429a
   1e47c:	b1186888 	.word	0xb1186888
   1e480:	691b4b6e 	.word	0x691b4b6e
   1e484:	20004798 	.word	0x20004798
   1e488:	6888bd38 	.word	0x6888bd38
   1e48c:	f0002800 	.word	0xf0002800
   1e490:	4a6b8098 	.word	0x4a6b8098
   1e494:	2c006814 	.word	0x2c006814
   1e498:	6894d03c 	.word	0x6894d03c
   1e49c:	f0002c00 	.word	0xf0002c00
   1e4a0:	6914809a 	.word	0x6914809a
   1e4a4:	f0002c00 	.word	0xf0002c00
   1e4a8:	6994809a 	.word	0x6994809a
   1e4ac:	f0002c00 	.word	0xf0002c00
   1e4b0:	6a14809a 	.word	0x6a14809a
   1e4b4:	f0002c00 	.word	0xf0002c00
   1e4b8:	6a94809a 	.word	0x6a94809a
   1e4bc:	f0002c00 	.word	0xf0002c00
   1e4c0:	6b148084 	.word	0x6b148084
   1e4c4:	f0002c00 	.word	0xf0002c00
   1e4c8:	6b948098 	.word	0x6b948098
   1e4cc:	f0002c00 	.word	0xf0002c00
   1e4d0:	6c148096 	.word	0x6c148096
   1e4d4:	f0002c00 	.word	0xf0002c00
   1e4d8:	6c948096 	.word	0x6c948096
   1e4dc:	f0002c00 	.word	0xf0002c00
   1e4e0:	6d148096 	.word	0x6d148096
   1e4e4:	f0002c00 	.word	0xf0002c00
   1e4e8:	6d948096 	.word	0x6d948096
   1e4ec:	f0002c00 	.word	0xf0002c00
   1e4f0:	6e148098 	.word	0x6e148098
   1e4f4:	f0002c00 	.word	0xf0002c00
   1e4f8:	6e948098 	.word	0x6e948098
   1e4fc:	f0002c00 	.word	0xf0002c00
   1e500:	6f148096 	.word	0x6f148096
   1e504:	f0002c00 	.word	0xf0002c00
   1e508:	6f948094 	.word	0x6f948094
   1e50c:	2001b10c 	.word	0x2001b10c
   1e510:	240fbd38 	.word	0x240fbd38
   1e514:	05c4eb02 	.word	0x05c4eb02
   1e518:	0034f842 	.word	0x0034f842
   1e51c:	4b4980ab 	.word	0x4b4980ab
   1e520:	2a01781a 	.word	0x2a01781a
   1e524:	7a1ad053 	.word	0x7a1ad053
   1e528:	d0412a01 	.word	0xd0412a01
   1e52c:	2a017c1a 	.word	0x2a017c1a
   1e530:	7e1ad04f 	.word	0x7e1ad04f
   1e534:	d0502a01 	.word	0xd0502a01
   1e538:	2020f893 	.word	0x2020f893
   1e53c:	d0502a01 	.word	0xd0502a01
   1e540:	2028f893 	.word	0x2028f893
   1e544:	d0502a01 	.word	0xd0502a01
   1e548:	2030f893 	.word	0x2030f893
   1e54c:	d03a2a01 	.word	0xd03a2a01
   1e550:	2038f893 	.word	0x2038f893
   1e554:	d04c2a01 	.word	0xd04c2a01
   1e558:	2040f893 	.word	0x2040f893
   1e55c:	d04a2a01 	.word	0xd04a2a01
   1e560:	2048f893 	.word	0x2048f893
   1e564:	d04c2a01 	.word	0xd04c2a01
   1e568:	2050f893 	.word	0x2050f893
   1e56c:	d04c2a01 	.word	0xd04c2a01
   1e570:	2058f893 	.word	0x2058f893
   1e574:	d04c2a01 	.word	0xd04c2a01
   1e578:	2060f893 	.word	0x2060f893
   1e57c:	d04c2a01 	.word	0xd04c2a01
   1e580:	2068f893 	.word	0x2068f893
   1e584:	d04a2a01 	.word	0xd04a2a01
   1e588:	2070f893 	.word	0x2070f893
   1e58c:	d04a2a01 	.word	0xd04a2a01
   1e590:	2078f893 	.word	0x2078f893
   1e594:	d00a2a01 	.word	0xd00a2a01
   1e598:	d0b82c10 	.word	0xd0b82c10
   1e59c:	4b282200 	.word	0x4b282200
   1e5a0:	eb032001 	.word	0xeb032001
   1e5a4:	808a01c4 	.word	0x808a01c4
   1e5a8:	2034f843 	.word	0x2034f843
   1e5ac:	220fbd38 	.word	0x220fbd38
   1e5b0:	eb032402 	.word	0xeb032402
   1e5b4:	f80300c2 	.word	0xf80300c2
   1e5b8:	60414032 	.word	0x60414032
   1e5bc:	fe08f7f3 	.word	0xfe08f7f3
   1e5c0:	2410e7a5 	.word	0x2410e7a5
   1e5c4:	2206e7ab 	.word	0x2206e7ab
   1e5c8:	2405e7f2 	.word	0x2405e7f2
   1e5cc:	2200e7a2 	.word	0x2200e7a2
   1e5d0:	2202e7ee 	.word	0x2202e7ee
   1e5d4:	2401e7ec 	.word	0x2401e7ec
   1e5d8:	2203e79c 	.word	0x2203e79c
   1e5dc:	2402e7e8 	.word	0x2402e7e8
   1e5e0:	2204e798 	.word	0x2204e798
   1e5e4:	2403e7e4 	.word	0x2403e7e4
   1e5e8:	2205e794 	.word	0x2205e794
   1e5ec:	2404e7e0 	.word	0x2404e7e0
   1e5f0:	2207e790 	.word	0x2207e790
   1e5f4:	2208e7dc 	.word	0x2208e7dc
   1e5f8:	2406e7da 	.word	0x2406e7da
   1e5fc:	2407e78a 	.word	0x2407e78a
   1e600:	2209e788 	.word	0x2209e788
   1e604:	2408e7d4 	.word	0x2408e7d4
   1e608:	220ae784 	.word	0x220ae784
   1e60c:	2409e7d0 	.word	0x2409e7d0
   1e610:	220be780 	.word	0x220be780
   1e614:	240ae7cc 	.word	0x240ae7cc
   1e618:	220ce77c 	.word	0x220ce77c
   1e61c:	220de7c8 	.word	0x220de7c8
   1e620:	240be7c6 	.word	0x240be7c6
   1e624:	220ee776 	.word	0x220ee776
   1e628:	240ce7c2 	.word	0x240ce7c2
   1e62c:	240de772 	.word	0x240de772
   1e630:	240ee770 	.word	0x240ee770
   1e634:	bf00e76e 	.word	0xbf00e76e
   1e638:	200216a0 	.word	0x200216a0
   1e63c:	20021740 	.word	0x20021740
   1e640:	20021758 	.word	0x20021758
   1e644:	200217d8 	.word	0x200217d8

0001e648 <rpc_transport_register>:
   1e648:	2900b4f0 	.word	0x2900b4f0
   1e64c:	2800d052 	.word	0x2800d052
   1e650:	6883d050 	.word	0x6883d050
   1e654:	d04d2b00 	.word	0xd04d2b00
   1e658:	2b006903 	.word	0x2b006903
   1e65c:	6843d04a 	.word	0x6843d04a
   1e660:	d0472b00 	.word	0xd0472b00
   1e664:	2b0068c3 	.word	0x2b0068c3
   1e668:	6803d044 	.word	0x6803d044
   1e66c:	d0412b00 	.word	0xd0412b00
   1e670:	2b006943 	.word	0x2b006943
   1e674:	2601d03e 	.word	0x2601d03e
   1e678:	46042500 	.word	0x46042500
   1e67c:	4a1f460f 	.word	0x4a1f460f
   1e680:	f8df4b1f 	.word	0xf8df4b1f
   1e684:	7416c080 	.word	0x7416c080
   1e688:	f8827616 	.word	0xf8827616
   1e68c:	f8826020 	.word	0xf8826020
   1e690:	f8826028 	.word	0xf8826028
   1e694:	f8826030 	.word	0xf8826030
   1e698:	f8826038 	.word	0xf8826038
   1e69c:	f8826040 	.word	0xf8826040
   1e6a0:	f8826048 	.word	0xf8826048
   1e6a4:	f8826050 	.word	0xf8826050
   1e6a8:	f8826058 	.word	0xf8826058
   1e6ac:	f8826060 	.word	0xf8826060
   1e6b0:	f8826068 	.word	0xf8826068
   1e6b4:	f8826070 	.word	0xf8826070
   1e6b8:	611d6078 	.word	0x611d6078
   1e6bc:	621d619d 	.word	0x621d619d
   1e6c0:	631d629d 	.word	0x631d629d
   1e6c4:	641d639d 	.word	0x641d639d
   1e6c8:	651d649d 	.word	0x651d649d
   1e6cc:	661d659d 	.word	0x661d659d
   1e6d0:	671d669d 	.word	0x671d669d
   1e6d4:	7016679d 	.word	0x7016679d
   1e6d8:	601d7216 	.word	0x601d7216
   1e6dc:	cc0f609d 	.word	0xcc0f609d
   1e6e0:	000fe8ac 	.word	0x000fe8ac
   1e6e4:	0003e894 	.word	0x0003e894
   1e6e8:	0003e88c 	.word	0x0003e88c
   1e6ec:	4628603e 	.word	0x4628603e
   1e6f0:	4770bcf0 	.word	0x4770bcf0
   1e6f4:	4628250e 	.word	0x4628250e
   1e6f8:	4770bcf0 	.word	0x4770bcf0
   1e6fc:	200217d8 	.word	0x200217d8
   1e700:	20021758 	.word	0x20021758
   1e704:	20021740 	.word	0x20021740

0001e708 <rpc_transport_unregister>:
   1e708:	d03a2800 	.word	0xd03a2800
   1e70c:	47f0e92d 	.word	0x47f0e92d
   1e710:	4c1d4680 	.word	0x4c1d4680
   1e714:	05a0f104 	.word	0x05a0f104
   1e718:	341068a3 	.word	0x341068a3
   1e71c:	4798b103 	.word	0x4798b103
   1e720:	d1f942ac 	.word	0xd1f942ac
   1e724:	0901f04f 	.word	0x0901f04f
   1e728:	4c182600 	.word	0x4c182600
   1e72c:	f8df4d18 	.word	0xf8df4d18
   1e730:	f104a064 	.word	0xf104a064
   1e734:	f8140780 	.word	0xf8140780
   1e738:	2b013c04 	.word	0x2b013c04
   1e73c:	f8dad005 	.word	0xf8dad005
   1e740:	6820300c 	.word	0x6820300c
   1e744:	f8044798 	.word	0xf8044798
   1e748:	f8559c04 	.word	0xf8559c04
   1e74c:	34080c04 	.word	0x34080c04
   1e750:	f8dab128 	.word	0xf8dab128
   1e754:	47983010 	.word	0x47983010
   1e758:	f845802e 	.word	0xf845802e
   1e75c:	42bc6c04 	.word	0x42bc6c04
   1e760:	0508f105 	.word	0x0508f105
   1e764:	f8d8d1e7 	.word	0xf8d8d1e7
   1e768:	22180000 	.word	0x22180000
   1e76c:	eb003801 	.word	0xeb003801
   1e770:	eb0a0040 	.word	0xeb0a0040
   1e774:	210000c0 	.word	0x210000c0
   1e778:	f855f006 	.word	0xf855f006
   1e77c:	e8bd2000 	.word	0xe8bd2000
   1e780:	200e87f0 	.word	0x200e87f0
   1e784:	bf004770 	.word	0xbf004770
   1e788:	200216a0 	.word	0x200216a0
   1e78c:	200217dc 	.word	0x200217dc
   1e790:	2002175c 	.word	0x2002175c
   1e794:	20021740 	.word	0x20021740

0001e798 <rpc_message_send>:
   1e798:	b171b168 	.word	0xb171b168
   1e79c:	68534a09 	.word	0x68534a09
   1e7a0:	684bb16b 	.word	0x684bb16b
   1e7a4:	f0238008 	.word	0xf0238008
   1e7a8:	f04303ff 	.word	0xf04303ff
   1e7ac:	68120302 	.word	0x68120302
   1e7b0:	4608604b 	.word	0x4608604b
   1e7b4:	20074710 	.word	0x20074710
   1e7b8:	200e4770 	.word	0x200e4770
   1e7bc:	20084770 	.word	0x20084770
   1e7c0:	bf004770 	.word	0xbf004770
   1e7c4:	20021740 	.word	0x20021740

0001e7c8 <rpc_message_alloc>:
   1e7c8:	b330b35a 	.word	0xb330b35a
   1e7cc:	e92d2300 	.word	0xe92d2300
   1e7d0:	4f1541f0 	.word	0x4f1541f0
   1e7d4:	687b6013 	.word	0x687b6013
   1e7d8:	4615b30b 	.word	0x4615b30b
   1e7dc:	4606460c 	.word	0x4606460c
   1e7e0:	4798b959 	.word	0x4798b959
   1e7e4:	b1a84603 	.word	0xb1a84603
   1e7e8:	60dc46a0 	.word	0x60dc46a0
   1e7ec:	8008f8c3 	.word	0x8008f8c3
   1e7f0:	602b801e 	.word	0x602b801e
   1e7f4:	e8bd2000 	.word	0xe8bd2000
   1e7f8:	68bb81f0 	.word	0x68bb81f0
   1e7fc:	47984608 	.word	0x47984608
   1e800:	b1384680 	.word	0xb1384680
   1e804:	4798687b 	.word	0x4798687b
   1e808:	28004603 	.word	0x28004603
   1e80c:	693bd1ed 	.word	0x693bd1ed
   1e810:	47984640 	.word	0x47984640
   1e814:	e8bd2004 	.word	0xe8bd2004
   1e818:	200781f0 	.word	0x200781f0
   1e81c:	20084770 	.word	0x20084770
   1e820:	200ee7f9 	.word	0x200ee7f9
   1e824:	bf004770 	.word	0xbf004770
   1e828:	20021740 	.word	0x20021740

0001e82c <rpc_message_free>:
   1e82c:	f0002800 	.word	0xf0002800
   1e830:	2900808c 	.word	0x2900808c
   1e834:	80e9f000 	.word	0x80e9f000
   1e838:	4a83b538 	.word	0x4a83b538
   1e83c:	2b006853 	.word	0x2b006853
   1e840:	8085f000 	.word	0x8085f000
   1e844:	46084c81 	.word	0x46084c81
   1e848:	42996863 	.word	0x42996863
   1e84c:	8085f000 	.word	0x8085f000
   1e850:	429868e3 	.word	0x429868e3
   1e854:	808ef000 	.word	0x808ef000
   1e858:	42986963 	.word	0x42986963
   1e85c:	8090f000 	.word	0x8090f000
   1e860:	429869e3 	.word	0x429869e3
   1e864:	8092f000 	.word	0x8092f000
   1e868:	42986a63 	.word	0x42986a63
   1e86c:	8095f000 	.word	0x8095f000
   1e870:	42986ae3 	.word	0x42986ae3
   1e874:	8098f000 	.word	0x8098f000
   1e878:	42986b63 	.word	0x42986b63
   1e87c:	809bf000 	.word	0x809bf000
   1e880:	42986be3 	.word	0x42986be3
   1e884:	809ef000 	.word	0x809ef000
   1e888:	42986c63 	.word	0x42986c63
   1e88c:	80a1f000 	.word	0x80a1f000
   1e890:	42986ce3 	.word	0x42986ce3
   1e894:	80a4f000 	.word	0x80a4f000
   1e898:	42986d63 	.word	0x42986d63
   1e89c:	80a7f000 	.word	0x80a7f000
   1e8a0:	42986de3 	.word	0x42986de3
   1e8a4:	80aaf000 	.word	0x80aaf000
   1e8a8:	42986e63 	.word	0x42986e63
   1e8ac:	80aff000 	.word	0x80aff000
   1e8b0:	42986ee3 	.word	0x42986ee3
   1e8b4:	80b2f000 	.word	0x80b2f000
   1e8b8:	42986f63 	.word	0x42986f63
   1e8bc:	80b5f000 	.word	0x80b5f000
   1e8c0:	42836fe3 	.word	0x42836fe3
   1e8c4:	80b8f000 	.word	0x80b8f000
   1e8c8:	479868d3 	.word	0x479868d3
   1e8cc:	2b047823 	.word	0x2b047823
   1e8d0:	7a23d03f 	.word	0x7a23d03f
   1e8d4:	d03c2b04 	.word	0xd03c2b04
   1e8d8:	2b047c23 	.word	0x2b047c23
   1e8dc:	7e23d039 	.word	0x7e23d039
   1e8e0:	d0362b04 	.word	0xd0362b04
   1e8e4:	3020f894 	.word	0x3020f894
   1e8e8:	d0322b04 	.word	0xd0322b04
   1e8ec:	3028f894 	.word	0x3028f894
   1e8f0:	d02e2b04 	.word	0xd02e2b04
   1e8f4:	3030f894 	.word	0x3030f894
   1e8f8:	d02a2b04 	.word	0xd02a2b04
   1e8fc:	3038f894 	.word	0x3038f894
   1e900:	d0262b04 	.word	0xd0262b04
   1e904:	3040f894 	.word	0x3040f894
   1e908:	d0222b04 	.word	0xd0222b04
   1e90c:	3048f894 	.word	0x3048f894
   1e910:	d01e2b04 	.word	0xd01e2b04
   1e914:	3050f894 	.word	0x3050f894
   1e918:	d01a2b04 	.word	0xd01a2b04
   1e91c:	3058f894 	.word	0x3058f894
   1e920:	d0162b04 	.word	0xd0162b04
   1e924:	3060f894 	.word	0x3060f894
   1e928:	d0122b04 	.word	0xd0122b04
   1e92c:	3068f894 	.word	0x3068f894
   1e930:	d00e2b04 	.word	0xd00e2b04
   1e934:	3070f894 	.word	0x3070f894
   1e938:	d00a2b04 	.word	0xd00a2b04
   1e93c:	3078f894 	.word	0x3078f894
   1e940:	bf182b04 	.word	0xbf182b04
   1e944:	d0042000 	.word	0xd0042000
   1e948:	2007bd38 	.word	0x2007bd38
   1e94c:	20084770 	.word	0x20084770
   1e950:	f7f3bd38 	.word	0xf7f3bd38
   1e954:	2000fc3d 	.word	0x2000fc3d
   1e958:	7821bd38 	.word	0x7821bd38
   1e95c:	f47f2903 	.word	0xf47f2903
   1e960:	2100af77 	.word	0x2100af77
   1e964:	46182501 	.word	0x46182501
   1e968:	f80468d2 	.word	0xf80468d2
   1e96c:	47905031 	.word	0x47905031
   1e970:	bd382000 	.word	0xbd382000
   1e974:	29037a21 	.word	0x29037a21
   1e978:	af6ef47f 	.word	0xaf6ef47f
   1e97c:	e7f12101 	.word	0xe7f12101
   1e980:	29037c21 	.word	0x29037c21
   1e984:	af6cf47f 	.word	0xaf6cf47f
   1e988:	e7eb2102 	.word	0xe7eb2102
   1e98c:	29037e21 	.word	0x29037e21
   1e990:	6a63d0e8 	.word	0x6a63d0e8
   1e994:	f47f4298 	.word	0xf47f4298
   1e998:	f894af6b 	.word	0xf894af6b
   1e99c:	29031020 	.word	0x29031020
   1e9a0:	af66f47f 	.word	0xaf66f47f
   1e9a4:	e7dd2104 	.word	0xe7dd2104
   1e9a8:	1028f894 	.word	0x1028f894
   1e9ac:	f47f2903 	.word	0xf47f2903
   1e9b0:	2105af63 	.word	0x2105af63
   1e9b4:	f894e7d6 	.word	0xf894e7d6
   1e9b8:	29031030 	.word	0x29031030
   1e9bc:	af60f47f 	.word	0xaf60f47f
   1e9c0:	e7cf2106 	.word	0xe7cf2106
   1e9c4:	1038f894 	.word	0x1038f894
   1e9c8:	f47f2903 	.word	0xf47f2903
   1e9cc:	2107af5d 	.word	0x2107af5d
   1e9d0:	f894e7c8 	.word	0xf894e7c8
   1e9d4:	29031040 	.word	0x29031040
   1e9d8:	af5af47f 	.word	0xaf5af47f
   1e9dc:	e7c12108 	.word	0xe7c12108
   1e9e0:	1048f894 	.word	0x1048f894
   1e9e4:	f47f2903 	.word	0xf47f2903
   1e9e8:	2109af57 	.word	0x2109af57
   1e9ec:	f894e7ba 	.word	0xf894e7ba
   1e9f0:	29031050 	.word	0x29031050
   1e9f4:	af54f47f 	.word	0xaf54f47f
   1e9f8:	e7b3210a 	.word	0xe7b3210a
   1e9fc:	1058f894 	.word	0x1058f894
   1ea00:	f47f2903 	.word	0xf47f2903
   1ea04:	210baf51 	.word	0x210baf51
   1ea08:	200ee7ac 	.word	0x200ee7ac
   1ea0c:	f8944770 	.word	0xf8944770
   1ea10:	29031060 	.word	0x29031060
   1ea14:	af4cf47f 	.word	0xaf4cf47f
   1ea18:	e7a3210c 	.word	0xe7a3210c
   1ea1c:	1068f894 	.word	0x1068f894
   1ea20:	f47f2903 	.word	0xf47f2903
   1ea24:	210daf49 	.word	0x210daf49
   1ea28:	f894e79c 	.word	0xf894e79c
   1ea2c:	29031070 	.word	0x29031070
   1ea30:	af46f47f 	.word	0xaf46f47f
   1ea34:	e795210e 	.word	0xe795210e
   1ea38:	3078f894 	.word	0x3078f894
   1ea3c:	f47f2b03 	.word	0xf47f2b03
   1ea40:	4603af43 	.word	0x4603af43
   1ea44:	e78d210f 	.word	0xe78d210f
   1ea48:	20021740 	.word	0x20021740
   1ea4c:	200217d8 	.word	0x200217d8

0001ea50 <rpc_message_data_free>:
   1ea50:	f0002800 	.word	0xf0002800
   1ea54:	29008091 	.word	0x29008091
   1ea58:	80e4f000 	.word	0x80e4f000
   1ea5c:	4a81b538 	.word	0x4a81b538
   1ea60:	2b006853 	.word	0x2b006853
   1ea64:	808af000 	.word	0x808af000
   1ea68:	681c4b7f 	.word	0x681c4b7f
   1ea6c:	f00042a1 	.word	0xf00042a1
   1ea70:	689c8087 	.word	0x689c8087
   1ea74:	f00042a1 	.word	0xf00042a1
   1ea78:	691c808f 	.word	0x691c808f
   1ea7c:	f00042a1 	.word	0xf00042a1
   1ea80:	699c8091 	.word	0x699c8091
   1ea84:	f00042a1 	.word	0xf00042a1
   1ea88:	6a1c8093 	.word	0x6a1c8093
   1ea8c:	f00042a1 	.word	0xf00042a1
   1ea90:	6a9c8095 	.word	0x6a9c8095
   1ea94:	f00042a1 	.word	0xf00042a1
   1ea98:	6b1c8097 	.word	0x6b1c8097
   1ea9c:	f00042a1 	.word	0xf00042a1
   1eaa0:	6b9c8099 	.word	0x6b9c8099
   1eaa4:	f00042a1 	.word	0xf00042a1
   1eaa8:	6c1c809b 	.word	0x6c1c809b
   1eaac:	f00042a1 	.word	0xf00042a1
   1eab0:	6c9c809d 	.word	0x6c9c809d
   1eab4:	f00042a1 	.word	0xf00042a1
   1eab8:	6d1c80a0 	.word	0x6d1c80a0
   1eabc:	f00042a1 	.word	0xf00042a1
   1eac0:	6d9c80a3 	.word	0x6d9c80a3
   1eac4:	f00042a1 	.word	0xf00042a1
   1eac8:	6e1c80a6 	.word	0x6e1c80a6
   1eacc:	f00042a1 	.word	0xf00042a1
   1ead0:	6e9c80ab 	.word	0x6e9c80ab
   1ead4:	f00042a1 	.word	0xf00042a1
   1ead8:	6f1c80ae 	.word	0x6f1c80ae
   1eadc:	f00042a1 	.word	0xf00042a1
   1eae0:	6f9c80b1 	.word	0x6f9c80b1
   1eae4:	f000428c 	.word	0xf000428c
   1eae8:	691380b4 	.word	0x691380b4
   1eaec:	47984608 	.word	0x47984608
   1eaf0:	781a4b5e 	.word	0x781a4b5e
   1eaf4:	d03b2a04 	.word	0xd03b2a04
   1eaf8:	2a047a1a 	.word	0x2a047a1a
   1eafc:	7c1ad038 	.word	0x7c1ad038
   1eb00:	d0352a04 	.word	0xd0352a04
   1eb04:	2a047e1a 	.word	0x2a047e1a
   1eb08:	f893d032 	.word	0xf893d032
   1eb0c:	2a042020 	.word	0x2a042020
   1eb10:	f893d02e 	.word	0xf893d02e
   1eb14:	2a042028 	.word	0x2a042028
   1eb18:	f893d02a 	.word	0xf893d02a
   1eb1c:	2a042030 	.word	0x2a042030
   1eb20:	f893d026 	.word	0xf893d026
   1eb24:	2a042038 	.word	0x2a042038
   1eb28:	f893d022 	.word	0xf893d022
   1eb2c:	2a042040 	.word	0x2a042040
   1eb30:	f893d01e 	.word	0xf893d01e
   1eb34:	2a042048 	.word	0x2a042048
   1eb38:	f893d01a 	.word	0xf893d01a
   1eb3c:	2a042050 	.word	0x2a042050
   1eb40:	f893d016 	.word	0xf893d016
   1eb44:	2a042058 	.word	0x2a042058
   1eb48:	f893d012 	.word	0xf893d012
   1eb4c:	2a042060 	.word	0x2a042060
   1eb50:	f893d00e 	.word	0xf893d00e
   1eb54:	2a042068 	.word	0x2a042068
   1eb58:	f893d00a 	.word	0xf893d00a
   1eb5c:	2a042070 	.word	0x2a042070
   1eb60:	f893d006 	.word	0xf893d006
   1eb64:	2b043078 	.word	0x2b043078
   1eb68:	2000bf18 	.word	0x2000bf18
   1eb6c:	bd38d000 	.word	0xbd38d000
   1eb70:	fb2ef7f3 	.word	0xfb2ef7f3
   1eb74:	bd382000 	.word	0xbd382000
   1eb78:	47702007 	.word	0x47702007
   1eb7c:	bd382008 	.word	0xbd382008
   1eb80:	4284889c 	.word	0x4284889c
   1eb84:	af75f47f 	.word	0xaf75f47f
   1eb88:	20002400 	.word	0x20002400
   1eb8c:	05c4eb03 	.word	0x05c4eb03
   1eb90:	0034f843 	.word	0x0034f843
   1eb94:	e7a880a8 	.word	0xe7a880a8
   1eb98:	4284899c 	.word	0x4284899c
   1eb9c:	af6df47f 	.word	0xaf6df47f
   1eba0:	e7f22401 	.word	0xe7f22401
   1eba4:	42848a9c 	.word	0x42848a9c
   1eba8:	af6bf47f 	.word	0xaf6bf47f
   1ebac:	e7ec2402 	.word	0xe7ec2402
   1ebb0:	42848b9c 	.word	0x42848b9c
   1ebb4:	af69f47f 	.word	0xaf69f47f
   1ebb8:	e7e62403 	.word	0xe7e62403
   1ebbc:	42848c9c 	.word	0x42848c9c
   1ebc0:	af67f47f 	.word	0xaf67f47f
   1ebc4:	e7e02404 	.word	0xe7e02404
   1ebc8:	42848d9c 	.word	0x42848d9c
   1ebcc:	af65f47f 	.word	0xaf65f47f
   1ebd0:	e7da2405 	.word	0xe7da2405
   1ebd4:	42848e9c 	.word	0x42848e9c
   1ebd8:	af63f47f 	.word	0xaf63f47f
   1ebdc:	e7d42406 	.word	0xe7d42406
   1ebe0:	42848f9c 	.word	0x42848f9c
   1ebe4:	af61f47f 	.word	0xaf61f47f
   1ebe8:	e7ce2407 	.word	0xe7ce2407
   1ebec:	4044f8b3 	.word	0x4044f8b3
   1ebf0:	f47f4284 	.word	0xf47f4284
   1ebf4:	2408af5e 	.word	0x2408af5e
   1ebf8:	f8b3e7c7 	.word	0xf8b3e7c7
   1ebfc:	4284404c 	.word	0x4284404c
   1ec00:	af5bf47f 	.word	0xaf5bf47f
   1ec04:	e7c02409 	.word	0xe7c02409
   1ec08:	4054f8b3 	.word	0x4054f8b3
   1ec0c:	f47f4284 	.word	0xf47f4284
   1ec10:	240aaf58 	.word	0x240aaf58
   1ec14:	f8b3e7b9 	.word	0xf8b3e7b9
   1ec18:	4284405c 	.word	0x4284405c
   1ec1c:	af55f47f 	.word	0xaf55f47f
   1ec20:	e7b2240b 	.word	0xe7b2240b
   1ec24:	4770200e 	.word	0x4770200e
   1ec28:	4064f8b3 	.word	0x4064f8b3
   1ec2c:	f47f4284 	.word	0xf47f4284
   1ec30:	240caf50 	.word	0x240caf50
   1ec34:	f8b3e7a9 	.word	0xf8b3e7a9
   1ec38:	4284406c 	.word	0x4284406c
   1ec3c:	af4df47f 	.word	0xaf4df47f
   1ec40:	e7a2240d 	.word	0xe7a2240d
   1ec44:	4074f8b3 	.word	0x4074f8b3
   1ec48:	f47f4284 	.word	0xf47f4284
   1ec4c:	240eaf4a 	.word	0x240eaf4a
   1ec50:	f8b3e79b 	.word	0xf8b3e79b
   1ec54:	4284407c 	.word	0x4284407c
   1ec58:	240fbf08 	.word	0x240fbf08
   1ec5c:	af45f47f 	.word	0xaf45f47f
   1ec60:	bf00e793 	.word	0xbf00e793
   1ec64:	20021740 	.word	0x20021740
   1ec68:	20021758 	.word	0x20021758
   1ec6c:	200217d8 	.word	0x200217d8

0001ec70 <symbol_000fb79>:
   1ec70:	b4302801 	.word	0xb4302801
   1ec74:	d1034b0a 	.word	0xd1034b0a
   1ec78:	7c1de00a 	.word	0x7c1de00a
   1ec7c:	d0084285 	.word	0xd0084285
   1ec80:	4f14f853 	.word	0x4f14f853
   1ec84:	d1f82c00 	.word	0xd1f82c00
   1ec88:	002df06f 	.word	0x002df06f
   1ec8c:	4770bc30 	.word	0x4770bc30
   1ec90:	600c4c04 	.word	0x600c4c04
   1ec94:	2000685b 	.word	0x2000685b
   1ec98:	6013bc30 	.word	0x6013bc30
   1ec9c:	bf004770 	.word	0xbf004770
   1eca0:	00026d04 	.word	0x00026d04
   1eca4:	00026cd0 	.word	0x00026cd0

0001eca8 <symbol_000494c>:
   1eca8:	b4302803 	.word	0xb4302803
   1ecac:	d1034b0a 	.word	0xd1034b0a
   1ecb0:	7c1de00a 	.word	0x7c1de00a
   1ecb4:	d0084285 	.word	0xd0084285
   1ecb8:	4f14f853 	.word	0x4f14f853
   1ecbc:	d1f82c00 	.word	0xd1f82c00
   1ecc0:	002df06f 	.word	0x002df06f
   1ecc4:	4770bc30 	.word	0x4770bc30
   1ecc8:	600c4c04 	.word	0x600c4c04
   1eccc:	2000685b 	.word	0x2000685b
   1ecd0:	6013bc30 	.word	0x6013bc30
   1ecd4:	bf004770 	.word	0xbf004770
   1ecd8:	00026cdc 	.word	0x00026cdc
   1ecdc:	00026cc4 	.word	0x00026cc4

0001ece0 <dfu_client_event_handler>:
   1ece0:	1b08f850 	.word	0x1b08f850
   1ece4:	f7fc0c09 	.word	0xf7fc0c09
   1ece8:	bf00b80d 	.word	0xbf00b80d

0001ecec <rpc_dfu_client_init>:
   1ecec:	f7ff4801 	.word	0xf7ff4801
   1ecf0:	bf00bb33 	.word	0xbf00bb33
   1ecf4:	00026d54 	.word	0x00026d54

0001ecf8 <rpc_dfu_client_request_alloc>:
   1ecf8:	b5102300 	.word	0xb5102300
   1ecfc:	9301b082 	.word	0x9301b082
   1ed00:	4604b158 	.word	0x4604b158
   1ed04:	2006aa01 	.word	0x2006aa01
   1ed08:	fd5ef7ff 	.word	0xfd5ef7ff
   1ed0c:	9b01b918 	.word	0x9b01b918
   1ed10:	3308b10b 	.word	0x3308b10b
   1ed14:	b0026023 	.word	0xb0026023
   1ed18:	2007bd10 	.word	0x2007bd10
   1ed1c:	bd10b002 	.word	0xbd10b002

0001ed20 <rpc_dfu_client_request_send>:
   1ed20:	4f70f411 	.word	0x4f70f411
   1ed24:	b160d10b 	.word	0xb160d10b
   1ed28:	f8304603 	.word	0xf8304603
   1ed2c:	20062c08 	.word	0x20062c08
   1ed30:	4101ea42 	.word	0x4101ea42
   1ed34:	1d08f843 	.word	0x1d08f843
   1ed38:	f7ff4619 	.word	0xf7ff4619
   1ed3c:	200fbd2d 	.word	0x200fbd2d
   1ed40:	20074770 	.word	0x20074770
   1ed44:	bf004770 	.word	0xbf004770

0001ed48 <rpc_dfu_client_message_free>:
   1ed48:	f1a0b120 	.word	0xf1a0b120
   1ed4c:	20060108 	.word	0x20060108
   1ed50:	bd6cf7ff 	.word	0xbd6cf7ff
   1ed54:	47702007 	.word	0x47702007

0001ed58 <rpc_dfu_client_data_free>:
   1ed58:	4601b118 	.word	0x4601b118
   1ed5c:	f7ff2006 	.word	0xf7ff2006
   1ed60:	2007be77 	.word	0x2007be77
   1ed64:	bf004770 	.word	0xbf004770

0001ed68 <mem_free>:
   1ed68:	4ff0e92d 	.word	0x4ff0e92d
   1ed6c:	c0ccf8df 	.word	0xc0ccf8df
   1ed70:	9000b083 	.word	0x9000b083
   1ed74:	0b3cf10c 	.word	0x0b3cf10c
   1ed78:	3008f8dc 	.word	0x3008f8dc
   1ed7c:	f8dcb12b 	.word	0xf8dcb12b
   1ed80:	9c002000 	.word	0x9c002000
   1ed84:	42a07810 	.word	0x42a07810
   1ed88:	f10cd006 	.word	0xf10cd006
   1ed8c:	45e30c0c 	.word	0x45e30c0c
   1ed90:	b003d1f2 	.word	0xb003d1f2
   1ed94:	8ff0e8bd 	.word	0x8ff0e8bd
   1ed98:	a004f8dc 	.word	0xa004f8dc
   1ed9c:	080aeb03 	.word	0x080aeb03
   1eda0:	d2f245c2 	.word	0xd2f245c2
   1eda4:	f8cd6853 	.word	0xf8cd6853
   1eda8:	46d6c004 	.word	0x46d6c004
   1edac:	f8d2469c 	.word	0xf8d2469c
   1edb0:	89979010 	.word	0x89979010
   1edb4:	000aebae 	.word	0x000aebae
   1edb8:	f8b9b3df 	.word	0xf8b9b3df
   1edbc:	42902002 	.word	0x42902002
   1edc0:	4665d31c 	.word	0x4665d31c
   1edc4:	f1092400 	.word	0xf1092400
   1edc8:	e0030304 	.word	0xe0030304
   1edcc:	3304885a 	.word	0x3304885a
   1edd0:	d8154282 	.word	0xd8154282
   1edd4:	6c04f833 	.word	0x6c04f833
   1edd8:	42a73401 	.word	0x42a73401
   1eddc:	5506fb02 	.word	0x5506fb02
   1ede0:	0002eba0 	.word	0x0002eba0
   1ede4:	d1f1461e 	.word	0xd1f1461e
   1ede8:	42812000 	.word	0x42812000
   1edec:	f10ed00d 	.word	0xf10ed00d
   1edf0:	45f00e01 	.word	0x45f00e01
   1edf4:	f8ddd1de 	.word	0xf8ddd1de
   1edf8:	e7c6c004 	.word	0xe7c6c004
   1edfc:	464e4665 	.word	0x464e4665
   1ee00:	fb008833 	.word	0xfb008833
   1ee04:	42815003 	.word	0x42815003
   1ee08:	f5bed1f1 	.word	0xf5bed1f1
   1ee0c:	f8dd7f00 	.word	0xf8dd7f00
   1ee10:	d0bac004 	.word	0xd0bac004
   1ee14:	4a082301 	.word	0x4a082301
   1ee18:	115eea4f 	.word	0x115eea4f
   1ee1c:	0021f852 	.word	0x0021f852
   1ee20:	0e1ff00e 	.word	0x0e1ff00e
   1ee24:	fe0efa03 	.word	0xfe0efa03
   1ee28:	0000ea4e 	.word	0x0000ea4e
   1ee2c:	0021f842 	.word	0x0021f842
   1ee30:	4638e7af 	.word	0x4638e7af
   1ee34:	bf00e7d9 	.word	0xbf00e7d9
   1ee38:	20021858 	.word	0x20021858
   1ee3c:	2002189c 	.word	0x2002189c

0001ee40 <mem_alloc.constprop.5>:
   1ee40:	d0502800 	.word	0xd0502800
   1ee44:	f8d34b6d 	.word	0xf8d34b6d
   1ee48:	42902088 	.word	0x42902088
   1ee4c:	e92dd84b 	.word	0xe92dd84b
   1ee50:	f8d34ff0 	.word	0xf8d34ff0
   1ee54:	b083b08c 	.word	0xb083b08c
   1ee58:	0f00f1bb 	.word	0x0f00f1bb
   1ee5c:	f10bd054 	.word	0xf10bd054
   1ee60:	469132ff 	.word	0x469132ff
   1ee64:	f04f2600 	.word	0xf04f2600
   1ee68:	4f650812 	.word	0x4f650812
   1ee6c:	f10b9201 	.word	0xf10b9201
   1ee70:	eb060e11 	.word	0xeb060e11
   1ee74:	f8530209 	.word	0xf8530209
   1ee78:	32014038 	.word	0x32014038
   1ee7c:	eb040852 	.word	0xeb040852
   1ee80:	f1020c44 	.word	0xf1020c44
   1ee84:	f8530112 	.word	0xf8530112
   1ee88:	f8575031 	.word	0xf8575031
   1ee8c:	f853a02c 	.word	0xf853a02c
   1ee90:	eb03403e 	.word	0xeb03403e
   1ee94:	f8dc0cc8 	.word	0xf8dc0cc8
   1ee98:	eb05c004 	.word	0xeb05c004
   1ee9c:	eb040545 	.word	0xeb040545
   1eea0:	f8da0444 	.word	0xf8da0444
   1eea4:	f857a010 	.word	0xf857a010
   1eea8:	f8575025 	.word	0xf8575025
   1eeac:	f83a4024 	.word	0xf83a4024
   1eeb0:	eb03a02c 	.word	0xeb03a02c
   1eeb4:	eb0301c1 	.word	0xeb0301c1
   1eeb8:	68490cce 	.word	0x68490cce
   1eebc:	6924692d 	.word	0x6924692d
   1eec0:	c004f8dc 	.word	0xc004f8dc
   1eec4:	f8354550 	.word	0xf8354550
   1eec8:	f8345021 	.word	0xf8345021
   1eecc:	d915102c 	.word	0xd915102c
   1eed0:	d2114288 	.word	0xd2114288
   1eed4:	d90842a8 	.word	0xd90842a8
   1eed8:	45b11c56 	.word	0x45b11c56
   1eedc:	8087f0c0 	.word	0x8087f0c0
   1eee0:	0813f102 	.word	0x0813f102
   1eee4:	2000e7c5 	.word	0x2000e7c5
   1eee8:	f1024770 	.word	0xf1024770
   1eeec:	454e39ff 	.word	0x454e39ff
   1eef0:	f102d87d 	.word	0xf102d87d
   1eef4:	e7bc0e11 	.word	0xe7bc0e11
   1eef8:	0601f109 	.word	0x0601f109
   1eefc:	d00745b3 	.word	0xd00745b3
   1ef00:	d0012e10 	.word	0xd0012e10
   1ef04:	d80845b3 	.word	0xd80845b3
   1ef08:	b0032000 	.word	0xb0032000
   1ef0c:	8ff0e8bd 	.word	0x8ff0e8bd
   1ef10:	2a109a01 	.word	0x2a109a01
   1ef14:	4616bf18 	.word	0x4616bf18
   1ef18:	f8dfd0f6 	.word	0xf8dfd0f6
   1ef1c:	eb03c0e8 	.word	0xeb03c0e8
   1ef20:	e9d808c6 	.word	0xe9d808c6
   1ef24:	eb022424 	.word	0xeb022424
   1ef28:	f8570242 	.word	0xf8570242
   1ef2c:	eb073022 	.word	0xeb073022
   1ef30:	f8d20282 	.word	0xf8d20282
   1ef34:	691de004 	.word	0x691de004
   1ef38:	d0562c00 	.word	0xd0562c00
   1ef3c:	4670462a 	.word	0x4670462a
   1ef40:	eb0500a4 	.word	0xeb0500a4
   1ef44:	88510904 	.word	0x88510904
   1ef48:	45913204 	.word	0x45913204
   1ef4c:	d1fa4408 	.word	0xd1fa4408
   1ef50:	f8b11929 	.word	0xf8b11929
   1ef54:	4482a002 	.word	0x4482a002
   1ef58:	d9184582 	.word	0xd9184582
   1ef5c:	f85c0941 	.word	0xf85c0941
   1ef60:	f0002021 	.word	0xf0002021
   1ef64:	fa22041f 	.word	0xfa22041f
   1ef68:	f019f904 	.word	0xf019f904
   1ef6c:	d0070f01 	.word	0xd0070f01
   1ef70:	f85ce013 	.word	0xf85ce013
   1ef74:	fa222021 	.word	0xfa222021
   1ef78:	f019f904 	.word	0xf019f904
   1ef7c:	d10c0f01 	.word	0xd10c0f01
   1ef80:	45823001 	.word	0x45823001
   1ef84:	1150ea4f 	.word	0x1150ea4f
   1ef88:	041ff000 	.word	0x041ff000
   1ef8c:	3601d1f1 	.word	0x3601d1f1
   1ef90:	f108455e 	.word	0xf108455e
   1ef94:	d3c40808 	.word	0xd3c40808
   1ef98:	2601e7b6 	.word	0x2601e7b6
   1ef9c:	f404fa06 	.word	0xf404fa06
   1efa0:	ea22899e 	.word	0xea22899e
   1efa4:	eba00204 	.word	0xeba00204
   1efa8:	f84c000e 	.word	0xf84c000e
   1efac:	685c2021 	.word	0x685c2021
   1efb0:	d0a92e00 	.word	0xd0a92e00
   1efb4:	4282886a 	.word	0x4282886a
   1efb8:	2100d811 	.word	0x2100d811
   1efbc:	e0031d2b 	.word	0xe0031d2b
   1efc0:	3304885a 	.word	0x3304885a
   1efc4:	d80a4282 	.word	0xd80a4282
   1efc8:	5c04f833 	.word	0x5c04f833
   1efcc:	428e3101 	.word	0x428e3101
   1efd0:	4405fb02 	.word	0x4405fb02
   1efd4:	0002eba0 	.word	0x0002eba0
   1efd8:	d1f1461d 	.word	0xd1f1461d
   1efdc:	882be794 	.word	0x882be794
   1efe0:	4003fb00 	.word	0x4003fb00
   1efe4:	e8bdb003 	.word	0xe8bdb003
   1efe8:	46708ff0 	.word	0x46708ff0
   1efec:	f1bbe7b0 	.word	0xf1bbe7b0
   1eff0:	bf080f10 	.word	0xbf080f10
   1eff4:	d090260f 	.word	0xd090260f
   1eff8:	bf00e786 	.word	0xbf00e786
   1effc:	200218d8 	.word	0x200218d8
   1f000:	2002189c 	.word	0x2002189c
   1f004:	20021858 	.word	0x20021858

0001f008 <mem_alloc.constprop.4>:
   1f008:	d04c2800 	.word	0xd04c2800
   1f00c:	681a4b6b 	.word	0x681a4b6b
   1f010:	d8484290 	.word	0xd8484290
   1f014:	4ff0e92d 	.word	0x4ff0e92d
   1f018:	b083685f 	.word	0xb083685f
   1f01c:	2f009700 	.word	0x2f009700
   1f020:	1e7ad051 	.word	0x1e7ad051
   1f024:	21004696 	.word	0x21004696
   1f028:	0c01f04f 	.word	0x0c01f04f
   1f02c:	92014c64 	.word	0x92014c64
   1f030:	020eeb01 	.word	0x020eeb01
   1f034:	f8533201 	.word	0xf8533201
   1f038:	0852503c 	.word	0x0852503c
   1f03c:	0801f102 	.word	0x0801f102
   1f040:	0545eb05 	.word	0x0545eb05
   1f044:	9037f853 	.word	0x9037f853
   1f048:	a025f854 	.word	0xa025f854
   1f04c:	6038f853 	.word	0x6038f853
   1f050:	0549eb09 	.word	0x0549eb09
   1f054:	09cceb03 	.word	0x09cceb03
   1f058:	9004f8d9 	.word	0x9004f8d9
   1f05c:	0646eb06 	.word	0x0646eb06
   1f060:	a010f8da 	.word	0xa010f8da
   1f064:	6026f854 	.word	0x6026f854
   1f068:	5025f854 	.word	0x5025f854
   1f06c:	a029f83a 	.word	0xa029f83a
   1f070:	0bc8eb03 	.word	0x0bc8eb03
   1f074:	09c7eb03 	.word	0x09c7eb03
   1f078:	f8db6936 	.word	0xf8db6936
   1f07c:	692db004 	.word	0x692db004
   1f080:	9004f8d9 	.word	0x9004f8d9
   1f084:	f8364550 	.word	0xf8364550
   1f088:	f835602b 	.word	0xf835602b
   1f08c:	d9135029 	.word	0xd9135029
   1f090:	d21042a8 	.word	0xd21042a8
   1f094:	d90842b0 	.word	0xd90842b0
   1f098:	464145c6 	.word	0x464145c6
   1f09c:	8087f0c0 	.word	0x8087f0c0
   1f0a0:	0c01f108 	.word	0x0c01f108
   1f0a4:	2000e7c4 	.word	0x2000e7c4
   1f0a8:	f1024770 	.word	0xf1024770
   1f0ac:	45713eff 	.word	0x45713eff
   1f0b0:	4617d87d 	.word	0x4617d87d
   1f0b4:	4639e7bc 	.word	0x4639e7bc
   1f0b8:	428a9a00 	.word	0x428a9a00
   1f0bc:	2910d007 	.word	0x2910d007
   1f0c0:	428ad001 	.word	0x428ad001
   1f0c4:	2000d808 	.word	0x2000d808
   1f0c8:	e8bdb003 	.word	0xe8bdb003
   1f0cc:	9a018ff0 	.word	0x9a018ff0
   1f0d0:	bf182a10 	.word	0xbf182a10
   1f0d4:	d0f64611 	.word	0xd0f64611
   1f0d8:	c0e8f8df 	.word	0xc0e8f8df
   1f0dc:	9000f8dd 	.word	0x9000f8dd
   1f0e0:	08c1eb03 	.word	0x08c1eb03
   1f0e4:	2602e9d8 	.word	0x2602e9d8
   1f0e8:	0242eb02 	.word	0x0242eb02
   1f0ec:	3022f854 	.word	0x3022f854
   1f0f0:	0282eb04 	.word	0x0282eb04
   1f0f4:	e004f8d2 	.word	0xe004f8d2
   1f0f8:	2e00691f 	.word	0x2e00691f
   1f0fc:	463ad055 	.word	0x463ad055
   1f100:	00b64670 	.word	0x00b64670
   1f104:	0a06eb07 	.word	0x0a06eb07
   1f108:	32048855 	.word	0x32048855
   1f10c:	44284592 	.word	0x44284592
   1f110:	19bdd1fa 	.word	0x19bdd1fa
   1f114:	b002f8b5 	.word	0xb002f8b5
   1f118:	45834483 	.word	0x45834483
   1f11c:	0945d918 	.word	0x0945d918
   1f120:	2025f85c 	.word	0x2025f85c
   1f124:	061ff000 	.word	0x061ff000
   1f128:	fa06fa22 	.word	0xfa06fa22
   1f12c:	0f01f01a 	.word	0x0f01f01a
   1f130:	e013d007 	.word	0xe013d007
   1f134:	2025f85c 	.word	0x2025f85c
   1f138:	fa06fa22 	.word	0xfa06fa22
   1f13c:	0f01f01a 	.word	0x0f01f01a
   1f140:	3001d10c 	.word	0x3001d10c
   1f144:	ea4f4583 	.word	0xea4f4583
   1f148:	f0001550 	.word	0xf0001550
   1f14c:	d1f1061f 	.word	0xd1f1061f
   1f150:	45493101 	.word	0x45493101
   1f154:	0808f108 	.word	0x0808f108
   1f158:	e7b4d3c4 	.word	0xe7b4d3c4
   1f15c:	40b12101 	.word	0x40b12101
   1f160:	ea22899e 	.word	0xea22899e
   1f164:	eba00201 	.word	0xeba00201
   1f168:	f84c000e 	.word	0xf84c000e
   1f16c:	685c2025 	.word	0x685c2025
   1f170:	d0a82e00 	.word	0xd0a82e00
   1f174:	4282887a 	.word	0x4282887a
   1f178:	2100d811 	.word	0x2100d811
   1f17c:	e0031d3b 	.word	0xe0031d3b
   1f180:	3304885a 	.word	0x3304885a
   1f184:	d80a4282 	.word	0xd80a4282
   1f188:	5c04f833 	.word	0x5c04f833
   1f18c:	428e3101 	.word	0x428e3101
   1f190:	0002eba0 	.word	0x0002eba0
   1f194:	4405fb02 	.word	0x4405fb02
   1f198:	d1f1461f 	.word	0xd1f1461f
   1f19c:	883be793 	.word	0x883be793
   1f1a0:	4003fb00 	.word	0x4003fb00
   1f1a4:	e8bdb003 	.word	0xe8bdb003
   1f1a8:	46708ff0 	.word	0x46708ff0
   1f1ac:	9a00e7b1 	.word	0x9a00e7b1
   1f1b0:	bf082a10 	.word	0xbf082a10
   1f1b4:	d08f210f 	.word	0xd08f210f
   1f1b8:	bf00e785 	.word	0xbf00e785
   1f1bc:	200218d8 	.word	0x200218d8
   1f1c0:	2002189c 	.word	0x2002189c
   1f1c4:	20021858 	.word	0x20021858

0001f1c8 <nrf_mem_init>:
   1f1c8:	2200b570 	.word	0x2200b570
   1f1cc:	48332501 	.word	0x48332501
   1f1d0:	f8500951 	.word	0xf8500951
   1f1d4:	f0024021 	.word	0xf0024021
   1f1d8:	fa05031f 	.word	0xfa05031f
   1f1dc:	3201f303 	.word	0x3201f303
   1f1e0:	f5b24323 	.word	0xf5b24323
   1f1e4:	f8407f00 	.word	0xf8407f00
   1f1e8:	d1f13021 	.word	0xd1f13021
   1f1ec:	4b2c2400 	.word	0x4b2c2400
   1f1f0:	223c4621 	.word	0x223c4621
   1f1f4:	601c482b 	.word	0x601c482b
   1f1f8:	fb15f005 	.word	0xfb15f005
   1f1fc:	22052110 	.word	0x22052110
   1f200:	4e2a4b29 	.word	0x4e2a4b29
   1f204:	4400e9c3 	.word	0x4400e9c3
   1f208:	615960d9 	.word	0x615960d9
   1f20c:	625961d9 	.word	0x625961d9
   1f210:	635962d9 	.word	0x635962d9
   1f214:	645963d9 	.word	0x645963d9
   1f218:	655964d9 	.word	0x655964d9
   1f21c:	665965d9 	.word	0x665965d9
   1f220:	675966d9 	.word	0x675966d9
   1f224:	609a67d9 	.word	0x609a67d9
   1f228:	619a611a 	.word	0x619a611a
   1f22c:	629a621a 	.word	0x629a621a
   1f230:	639a631a 	.word	0x639a631a
   1f234:	649a641a 	.word	0x649a641a
   1f238:	659a651a 	.word	0x659a651a
   1f23c:	669a661a 	.word	0x669a661a
   1f240:	679a671a 	.word	0x679a671a
   1f244:	2120e9c3 	.word	0x2120e9c3
   1f248:	4422e9c3 	.word	0x4422e9c3
   1f24c:	2124e9c3 	.word	0x2124e9c3
   1f250:	2126e9c3 	.word	0x2126e9c3
   1f254:	2128e9c3 	.word	0x2128e9c3
   1f258:	212ae9c3 	.word	0x212ae9c3
   1f25c:	212ce9c3 	.word	0x212ce9c3
   1f260:	212ee9c3 	.word	0x212ee9c3
   1f264:	2130e9c3 	.word	0x2130e9c3
   1f268:	2132e9c3 	.word	0x2132e9c3
   1f26c:	2134e9c3 	.word	0x2134e9c3
   1f270:	2136e9c3 	.word	0x2136e9c3
   1f274:	2138e9c3 	.word	0x2138e9c3
   1f278:	213ae9c3 	.word	0x213ae9c3
   1f27c:	213ce9c3 	.word	0x213ce9c3
   1f280:	213ee9c3 	.word	0x213ee9c3
   1f284:	1104f8c3 	.word	0x1104f8c3
   1f288:	2100f8c3 	.word	0x2100f8c3
   1f28c:	110cf8c3 	.word	0x110cf8c3
   1f290:	2108f8c3 	.word	0x2108f8c3
   1f294:	70354620 	.word	0x70354620
   1f298:	bf00bd70 	.word	0xbf00bd70
   1f29c:	20021858 	.word	0x20021858
   1f2a0:	20021898 	.word	0x20021898
   1f2a4:	2002189c 	.word	0x2002189c
   1f2a8:	200218d8 	.word	0x200218d8
   1f2ac:	2002744f 	.word	0x2002744f

0001f2b0 <nrf_mem_register>:
   1f2b0:	4ff0e92d 	.word	0x4ff0e92d
   1f2b4:	b0874b87 	.word	0xb0874b87
   1f2b8:	2b00781b 	.word	0x2b00781b
   1f2bc:	808cf000 	.word	0x808cf000
   1f2c0:	b321b328 	.word	0xb321b328
   1f2c4:	f8df780b 	.word	0xf8df780b
   1f2c8:	eb038218 	.word	0xeb038218
   1f2cc:	eb081303 	.word	0xeb081303
   1f2d0:	685b03c3 	.word	0x685b03c3
   1f2d4:	c00cf8b1 	.word	0xc00cf8b1
   1f2d8:	2b104463 	.word	0x2b104463
   1f2dc:	f04fd811 	.word	0xf04fd811
   1f2e0:	46890a00 	.word	0x46890a00
   1f2e4:	4f7d4b7c 	.word	0x4f7d4b7c
   1f2e8:	ea4f681b 	.word	0xea4f681b
   1f2ec:	93000e8c 	.word	0x93000e8c
   1f2f0:	b19168b9 	.word	0xb19168b9
   1f2f4:	0a01f10a 	.word	0x0a01f10a
   1f2f8:	0f05f1ba 	.word	0x0f05f1ba
   1f2fc:	070cf107 	.word	0x070cf107
   1f300:	f248d1f6 	.word	0xf248d1f6
   1f304:	46581b07 	.word	0x46581b07
   1f308:	e8bdb007 	.word	0xe8bdb007
   1f30c:	f2488ff0 	.word	0xf2488ff0
   1f310:	46581b0e 	.word	0x46581b0e
   1f314:	e8bdb007 	.word	0xe8bdb007
   1f318:	f1bc8ff0 	.word	0xf1bc8ff0
   1f31c:	d0610f00 	.word	0xd0610f00
   1f320:	460c460d 	.word	0x460c460d
   1f324:	3010f8d9 	.word	0x3010f8d9
   1f328:	0b03eb0e 	.word	0x0b03eb0e
   1f32c:	f833885a 	.word	0xf833885a
   1f330:	44156b04 	.word	0x44156b04
   1f334:	fb02459b 	.word	0xfb02459b
   1f338:	d1f74406 	.word	0xd1f74406
   1f33c:	3008f8d9 	.word	0x3008f8d9
   1f340:	d3d742a3 	.word	0xd3d742a3
   1f344:	442b9b00 	.word	0x442b9b00
   1f348:	7f00f5b3 	.word	0x7f00f5b3
   1f34c:	4c63d2d2 	.word	0x4c63d2d2
   1f350:	024aeb0a 	.word	0x024aeb0a
   1f354:	f8c00092 	.word	0xf8c00092
   1f358:	18a0a000 	.word	0x18a0a000
   1f35c:	9002f844 	.word	0x9002f844
   1f360:	468b9a00 	.word	0x468b9a00
   1f364:	2501e9c0 	.word	0x2501e9c0
   1f368:	2001f899 	.word	0x2001f899
   1f36c:	2a01485a 	.word	0x2a01485a
   1f370:	d0c86003 	.word	0xd0c86003
   1f374:	300cf8b9 	.word	0x300cf8b9
   1f378:	d0c42b00 	.word	0xd0c42b00
   1f37c:	f8cd2500 	.word	0xf8cd2500
   1f380:	f8cd9004 	.word	0xf8cd9004
   1f384:	f8cda00c 	.word	0xf8cda00c
   1f388:	9b01b014 	.word	0x9b01b014
   1f38c:	691a781f 	.word	0x691a781f
   1f390:	eb03013b 	.word	0xeb03013b
   1f394:	93000907 	.word	0x93000907
   1f398:	03c9eb08 	.word	0x03c9eb08
   1f39c:	f8326859 	.word	0xf8326859
   1f3a0:	91024025 	.word	0x91024025
   1f3a4:	9a03bb39 	.word	0x9a03bb39
   1f3a8:	609a60dd 	.word	0x609a60dd
   1f3ac:	443b9b00 	.word	0x443b9b00
   1f3b0:	eb08461f 	.word	0xeb08461f
   1f3b4:	684b01c3 	.word	0x684b01c3
   1f3b8:	2037f858 	.word	0x2037f858
   1f3bc:	42943301 	.word	0x42943301
   1f3c0:	d912604b 	.word	0xd912604b
   1f3c4:	f8489b01 	.word	0xf8489b01
   1f3c8:	899b4037 	.word	0x899b4037
   1f3cc:	429d3501 	.word	0x429d3501
   1f3d0:	f8ddd3db 	.word	0xf8ddd3db
   1f3d4:	e796b014 	.word	0xe796b014
   1f3d8:	1b08f248 	.word	0x1b08f248
   1f3dc:	b0074658 	.word	0xb0074658
   1f3e0:	8ff0e8bd 	.word	0x8ff0e8bd
   1f3e4:	46659b00 	.word	0x46659b00
   1f3e8:	9b01e7ae 	.word	0x9b01e7ae
   1f3ec:	899b3501 	.word	0x899b3501
   1f3f0:	d8ca42ab 	.word	0xd8ca42ab
   1f3f4:	2600e7ed 	.word	0x2600e7ed
   1f3f8:	3afff101 	.word	0x3afff101
   1f3fc:	eb069504 	.word	0xeb069504
   1f400:	eb09000a 	.word	0xeb09000a
   1f404:	32010206 	.word	0x32010206
   1f408:	f8583001 	.word	0xf8583001
   1f40c:	0840c032 	.word	0x0840c032
   1f410:	eb094d32 	.word	0xeb094d32
   1f414:	eb090100 	.word	0xeb090100
   1f418:	3101030a 	.word	0x3101030a
   1f41c:	eb0c3301 	.word	0xeb0c3301
   1f420:	f8580c4c 	.word	0xf8580c4c
   1f424:	f855e031 	.word	0xf855e031
   1f428:	f858b02c 	.word	0xf858b02c
   1f42c:	eb08c033 	.word	0xeb08c033
   1f430:	eb0e02c2 	.word	0xeb0e02c2
   1f434:	eb0c0e4e 	.word	0xeb0c0e4e
   1f438:	f8db0c4c 	.word	0xf8db0c4c
   1f43c:	6852b010 	.word	0x6852b010
   1f440:	e02ef855 	.word	0xe02ef855
   1f444:	c02cf855 	.word	0xc02cf855
   1f448:	01c1eb08 	.word	0x01c1eb08
   1f44c:	03c3eb08 	.word	0x03c3eb08
   1f450:	2022f83b 	.word	0x2022f83b
   1f454:	e010f8de 	.word	0xe010f8de
   1f458:	f8dc6849 	.word	0xf8dc6849
   1f45c:	685bc010 	.word	0x685bc010
   1f460:	f83e4294 	.word	0xf83e4294
   1f464:	f83c1021 	.word	0xf83c1021
   1f468:	d92d3023 	.word	0xd92d3023
   1f46c:	d22d429c 	.word	0xd22d429c
   1f470:	d924428c 	.word	0xd924428c
   1f474:	45b21c46 	.word	0x45b21c46
   1f478:	2610d2c1 	.word	0x2610d2c1
   1f47c:	9a029d04 	.word	0x9a029d04
   1f480:	d91142b2 	.word	0xd91142b2
   1f484:	443b9b00 	.word	0x443b9b00
   1f488:	4433441a 	.word	0x4433441a
   1f48c:	0ac2eb08 	.word	0x0ac2eb08
   1f490:	09c3eb08 	.word	0x09c3eb08
   1f494:	46512208 	.word	0x46512208
   1f498:	0002eb0a 	.word	0x0002eb0a
   1f49c:	0a08f1aa 	.word	0x0a08f1aa
   1f4a0:	f997f005 	.word	0xf997f005
   1f4a4:	d1f545d1 	.word	0xd1f545d1
   1f4a8:	99039b00 	.word	0x99039b00
   1f4ac:	4433443b 	.word	0x4433443b
   1f4b0:	eb083301 	.word	0xeb083301
   1f4b4:	f84802c3 	.word	0xf84802c3
   1f4b8:	60551033 	.word	0x60551033
   1f4bc:	f100e776 	.word	0xf100e776
   1f4c0:	45563aff 	.word	0x45563aff
   1f4c4:	e7d8d99b 	.word	0xe7d8d99b
   1f4c8:	e7d89d04 	.word	0xe7d89d04
   1f4cc:	f10a9d04 	.word	0xf10a9d04
   1f4d0:	e7d40601 	.word	0xe7d40601
   1f4d4:	2002744f 	.word	0x2002744f
   1f4d8:	20021898 	.word	0x20021898
   1f4dc:	2002189c 	.word	0x2002189c
   1f4e0:	200218d8 	.word	0x200218d8

0001f4e4 <nrf_malloc>:
   1f4e4:	781b4b03 	.word	0x781b4b03
   1f4e8:	f7ffb10b 	.word	0xf7ffb10b
   1f4ec:	4618bd8d 	.word	0x4618bd8d
   1f4f0:	bf004770 	.word	0xbf004770
   1f4f4:	2002744f 	.word	0x2002744f

0001f4f8 <nrf_calloc>:
   1f4f8:	4b08b538 	.word	0x4b08b538
   1f4fc:	b155781d 	.word	0xb155781d
   1f500:	f400fb01 	.word	0xf400fb01
   1f504:	f7ff4620 	.word	0xf7ff4620
   1f508:	4605fd7f 	.word	0x4605fd7f
   1f50c:	4622b118 	.word	0x4622b118
   1f510:	f0052100 	.word	0xf0052100
   1f514:	4628f988 	.word	0x4628f988
   1f518:	bf00bd38 	.word	0xbf00bd38
   1f51c:	2002744f 	.word	0x2002744f

0001f520 <nrf_free>:
   1f520:	781b4b04 	.word	0x781b4b04
   1f524:	b118b123 	.word	0xb118b123
   1f528:	20004601 	.word	0x20004601
   1f52c:	bc1cf7ff 	.word	0xbc1cf7ff
   1f530:	bf004770 	.word	0xbf004770
   1f534:	2002744f 	.word	0x2002744f

0001f538 <nrf_shared_malloc>:
   1f538:	781b4b03 	.word	0x781b4b03
   1f53c:	f7ffb10b 	.word	0xf7ffb10b
   1f540:	4618bc7f 	.word	0x4618bc7f
   1f544:	bf004770 	.word	0xbf004770
   1f548:	2002744f 	.word	0x2002744f

0001f54c <nrf_shared_free>:
   1f54c:	781b4b04 	.word	0x781b4b04
   1f550:	b118b123 	.word	0xb118b123
   1f554:	20014601 	.word	0x20014601
   1f558:	bc06f7ff 	.word	0xbc06f7ff
   1f55c:	bf004770 	.word	0xbf004770
   1f560:	2002744f 	.word	0x2002744f

0001f564 <symbol_0003897>:
   1f564:	728cf44f 	.word	0x728cf44f
   1f568:	f0052100 	.word	0xf0052100
   1f56c:	bf00b95c 	.word	0xbf00b95c

0001f570 <symbol_0006f61>:
   1f570:	f44fb118 	.word	0xf44fb118
   1f574:	f7fc718c 	.word	0xf7fc718c
   1f578:	4770b837 	.word	0x4770b837

0001f57c <symbol_000468b>:
   1f57c:	f0002ac0 	.word	0xf0002ac0
   1f580:	f5b28184 	.word	0xf5b28184
   1f584:	f0007f80 	.word	0xf0007f80
   1f588:	2a80817d 	.word	0x2a80817d
   1f58c:	f06fd002 	.word	0xf06fd002
   1f590:	4770001f 	.word	0x4770001f
   1f594:	6003230a 	.word	0x6003230a
   1f598:	4ff0e92d 	.word	0x4ff0e92d
   1f59c:	f04f4607 	.word	0xf04f4607
   1f5a0:	f1000c00 	.word	0xf1000c00
   1f5a4:	b0850408 	.word	0xb0850408
   1f5a8:	f8470952 	.word	0xf8470952
   1f5ac:	788b4f04 	.word	0x788b4f04
   1f5b0:	780e784d 	.word	0x780e784d
   1f5b4:	ea43041b 	.word	0xea43041b
   1f5b8:	78cd2305 	.word	0x78cd2305
   1f5bc:	f10c4333 	.word	0xf10c4333
   1f5c0:	ea430c01 	.word	0xea430c01
   1f5c4:	45946305 	.word	0x45946305
   1f5c8:	3f04f847 	.word	0x3f04f847
   1f5cc:	0104f101 	.word	0x0104f101
   1f5d0:	6803d3ed 	.word	0x6803d3ed
   1f5d4:	f0002b0c 	.word	0xf0002b0c
   1f5d8:	2b0e81bf 	.word	0x2b0e81bf
   1f5dc:	8158f000 	.word	0x8158f000
   1f5e0:	f0402b0a 	.word	0xf0402b0a
   1f5e4:	6944814b 	.word	0x6944814b
   1f5e8:	f3c44bd8 	.word	0xf3c44bd8
   1f5ec:	68812207 	.word	0x68812207
   1f5f0:	0e255c9a 	.word	0x0e255c9a
   1f5f4:	f0815d5e 	.word	0xf0815d5e
   1f5f8:	b2e50101 	.word	0xb2e50101
   1f5fc:	404a5d5d 	.word	0x404a5d5d
   1f600:	4107f3c4 	.word	0x4107f3c4
   1f604:	4206ea82 	.word	0x4206ea82
   1f608:	ea825c5e 	.word	0xea825c5e
   1f60c:	68c16505 	.word	0x68c16505
   1f610:	2206ea85 	.word	0x2206ea85
   1f614:	40516907 	.word	0x40516907
   1f618:	0907ea81 	.word	0x0907ea81
   1f61c:	0404ea89 	.word	0x0404ea89
   1f620:	2507f3c4 	.word	0x2507f3c4
   1f624:	0e265d5d 	.word	0x0e265d5d
   1f628:	f0825d9e 	.word	0xf0825d9e
   1f62c:	ea850c02 	.word	0xea850c02
   1f630:	ea85050c 	.word	0xea85050c
   1f634:	b2e64506 	.word	0xb2e64506
   1f638:	c006f813 	.word	0xc006f813
   1f63c:	4607f3c4 	.word	0x4607f3c4
   1f640:	ea855d9e 	.word	0xea855d9e
   1f644:	ea85650c 	.word	0xea85650c
   1f648:	406f2506 	.word	0x406f2506
   1f64c:	0c04ea87 	.word	0x0c04ea87
   1f650:	2607f3cc 	.word	0x2607f3cc
   1f654:	ea4f5d9e 	.word	0xea4f5d9e
   1f658:	f8136e1c 	.word	0xf8136e1c
   1f65c:	f085e00e 	.word	0xf085e00e
   1f660:	ea860804 	.word	0xea860804
   1f664:	ea860608 	.word	0xea860608
   1f668:	fa5f460e 	.word	0xfa5f460e
   1f66c:	f813fe8c 	.word	0xf813fe8c
   1f670:	6182e00e 	.word	0x6182e00e
   1f674:	4207f3cc 	.word	0x4207f3cc
   1f678:	660eea86 	.word	0x660eea86
   1f67c:	e002f813 	.word	0xe002f813
   1f680:	0201ea85 	.word	0x0201ea85
   1f684:	260eea86 	.word	0x260eea86
   1f688:	0802ea86 	.word	0x0802ea86
   1f68c:	0e04ea88 	.word	0x0e04ea88
   1f690:	f3ce61c1 	.word	0xf3ce61c1
   1f694:	5c592107 	.word	0x5c592107
   1f698:	6a1eea4f 	.word	0x6a1eea4f
   1f69c:	a00af813 	.word	0xa00af813
   1f6a0:	0b08f086 	.word	0x0b08f086
   1f6a4:	010bea81 	.word	0x010bea81
   1f6a8:	410aea81 	.word	0x410aea81
   1f6ac:	fa8efa5f 	.word	0xfa8efa5f
   1f6b0:	a00af813 	.word	0xa00af813
   1f6b4:	f3ce6244 	.word	0xf3ce6244
   1f6b8:	5d1c4407 	.word	0x5d1c4407
   1f6bc:	610aea81 	.word	0x610aea81
   1f6c0:	2104ea81 	.word	0x2104ea81
   1f6c4:	0a07ea81 	.word	0x0a07ea81
   1f6c8:	040eea8a 	.word	0x040eea8a
   1f6cc:	630762c2 	.word	0x630762c2
   1f6d0:	2207f3c4 	.word	0x2207f3c4
   1f6d4:	0707ea88 	.word	0x0707ea88
   1f6d8:	680ee9c0 	.word	0x680ee9c0
   1f6dc:	9020f8c0 	.word	0x9020f8c0
   1f6e0:	f8c06285 	.word	0xf8c06285
   1f6e4:	f8c0c034 	.word	0xf8c0c034
   1f6e8:	6407e044 	.word	0x6407e044
   1f6ec:	f8136481 	.word	0xf8136481
   1f6f0:	0e22c002 	.word	0x0e22c002
   1f6f4:	f0815c9a 	.word	0xf0815c9a
   1f6f8:	ea8c0510 	.word	0xea8c0510
   1f6fc:	ea8c0c05 	.word	0xea8c0c05
   1f700:	b2e24c02 	.word	0xb2e24c02
   1f704:	f3c45c9d 	.word	0xf3c45c9d
   1f708:	5c9a4207 	.word	0x5c9a4207
   1f70c:	6c05ea8c 	.word	0x6c05ea8c
   1f710:	2c02ea8c 	.word	0x2c02ea8c
   1f714:	0108ea81 	.word	0x0108ea81
   1f718:	090cea81 	.word	0x090cea81
   1f71c:	0209ea8e 	.word	0x0209ea8e
   1f720:	2507f3c2 	.word	0x2507f3c2
   1f724:	0e155d5e 	.word	0x0e155d5e
   1f728:	f08c5d5d 	.word	0xf08c5d5d
   1f72c:	407e0720 	.word	0x407e0720
   1f730:	4605ea86 	.word	0x4605ea86
   1f734:	5d5db2d5 	.word	0x5d5db2d5
   1f738:	f3c264c1 	.word	0xf3c264c1
   1f73c:	5c594107 	.word	0x5c594107
   1f740:	6605ea86 	.word	0x6605ea86
   1f744:	2601ea86 	.word	0x2601ea86
   1f748:	0e06ea8a 	.word	0x0e06ea8a
   1f74c:	080eea82 	.word	0x080eea82
   1f750:	2107f3c8 	.word	0x2107f3c8
   1f754:	ea4f5c5f 	.word	0xea4f5c5f
   1f758:	5c596118 	.word	0x5c596118
   1f75c:	0540f086 	.word	0x0540f086
   1f760:	ea87406f 	.word	0xea87406f
   1f764:	fa5f4701 	.word	0xfa5f4701
   1f768:	5c59f188 	.word	0x5c59f188
   1f76c:	0509ea8a 	.word	0x0509ea8a
   1f770:	6701ea87 	.word	0x6701ea87
   1f774:	4107f3c8 	.word	0x4107f3c8
   1f778:	f8c05c59 	.word	0xf8c05c59
   1f77c:	ea87a050 	.word	0xea87a050
   1f780:	ea892701 	.word	0xea892701
   1f784:	66050a06 	.word	0x66050a06
   1f788:	0507ea8a 	.word	0x0507ea8a
   1f78c:	0105ea82 	.word	0x0105ea82
   1f790:	f3c16544 	.word	0xf3c16544
   1f794:	5d1c2407 	.word	0x5d1c2407
   1f798:	6b11ea4f 	.word	0x6b11ea4f
   1f79c:	b00bf813 	.word	0xb00bf813
   1f7a0:	f0876642 	.word	0xf0876642
   1f7a4:	40620280 	.word	0x40620280
   1f7a8:	ea82b2cc 	.word	0xea82b2cc
   1f7ac:	f813420b 	.word	0xf813420b
   1f7b0:	f3c1b004 	.word	0xf3c1b004
   1f7b4:	5d1c4407 	.word	0x5d1c4407
   1f7b8:	620bea82 	.word	0x620bea82
   1f7bc:	2204ea82 	.word	0x2204ea82
   1f7c0:	0402ea8e 	.word	0x0402ea8e
   1f7c4:	c058f8c0 	.word	0xc058f8c0
   1f7c8:	0c04ea81 	.word	0x0c04ea81
   1f7cc:	67c56686 	.word	0x67c56686
   1f7d0:	0605ea8e 	.word	0x0605ea8e
   1f7d4:	40556787 	.word	0x40556787
   1f7d8:	2707f3cc 	.word	0x2707f3cc
   1f7dc:	ae1be9c0 	.word	0xae1be9c0
   1f7e0:	1084f8c0 	.word	0x1084f8c0
   1f7e4:	2088f8c0 	.word	0x2088f8c0
   1f7e8:	6080f8c0 	.word	0x6080f8c0
   1f7ec:	905cf8c0 	.word	0x905cf8c0
   1f7f0:	8074f8c0 	.word	0x8074f8c0
   1f7f4:	508cf8c0 	.word	0x508cf8c0
   1f7f8:	f0825dde 	.word	0xf0825dde
   1f7fc:	ea4f021b 	.word	0xea4f021b
   1f800:	f813671c 	.word	0xf813671c
   1f804:	4056e007 	.word	0x4056e007
   1f808:	f28cfa5f 	.word	0xf28cfa5f
   1f80c:	f3cc5c9f 	.word	0xf3cc5c9f
   1f810:	5c9a4207 	.word	0x5c9a4207
   1f814:	460eea86 	.word	0x460eea86
   1f818:	6607ea86 	.word	0x6607ea86
   1f81c:	2602ea86 	.word	0x2602ea86
   1f820:	40694075 	.word	0x40694075
   1f824:	2207f3c1 	.word	0x2207f3c1
   1f828:	0e0f5c9a 	.word	0x0e0f5c9a
   1f82c:	f0865ddf 	.word	0xf0865ddf
   1f830:	ea820e36 	.word	0xea820e36
   1f834:	ea82020e 	.word	0xea82020e
   1f838:	b2cf4207 	.word	0xb2cf4207
   1f83c:	e007f813 	.word	0xe007f813
   1f840:	4707f3c1 	.word	0x4707f3c1
   1f844:	ea825ddf 	.word	0xea825ddf
   1f848:	ea83630e 	.word	0xea83630e
   1f84c:	ea832307 	.word	0xea832307
   1f850:	ea820204 	.word	0xea820204
   1f854:	e9c00e01 	.word	0xe9c00e01
   1f858:	e9c06526 	.word	0xe9c06526
   1f85c:	f8c02e2c 	.word	0xf8c02e2c
   1f860:	ea834090 	.word	0xea834090
   1f864:	406c0705 	.word	0x406c0705
   1f868:	c094f8c0 	.word	0xc094f8c0
   1f86c:	10a4f8c0 	.word	0x10a4f8c0
   1f870:	30a8f8c0 	.word	0x30a8f8c0
   1f874:	70acf8c0 	.word	0x70acf8c0
   1f878:	40a0f8c0 	.word	0x40a0f8c0
   1f87c:	b0052000 	.word	0xb0052000
   1f880:	8ff0e8bd 	.word	0x8ff0e8bd
   1f884:	6003230e 	.word	0x6003230e
   1f888:	230ce686 	.word	0x230ce686
   1f88c:	e6836003 	.word	0xe6836003
   1f890:	ce03e9d0 	.word	0xce03e9d0
   1f894:	8907e9d0 	.word	0x8907e9d0
   1f898:	7205e9d0 	.word	0x7205e9d0
   1f89c:	68836a46 	.word	0x68836a46
   1f8a0:	f8df4670 	.word	0xf8df4670
   1f8a4:	4d29a0b0 	.word	0x4d29a0b0
   1f8a8:	c000f8cd 	.word	0xc000f8cd
   1f8ac:	bf04f85a 	.word	0xbf04f85a
   1f8b0:	2c07f3c6 	.word	0x2c07f3c6
   1f8b4:	e00cf815 	.word	0xe00cf815
   1f8b8:	6c16ea4f 	.word	0x6c16ea4f
   1f8bc:	030bea83 	.word	0x030bea83
   1f8c0:	b00cf815 	.word	0xb00cf815
   1f8c4:	fc86fa5f 	.word	0xfc86fa5f
   1f8c8:	0303ea8e 	.word	0x0303ea8e
   1f8cc:	c00cf815 	.word	0xc00cf815
   1f8d0:	4e07f3c6 	.word	0x4e07f3c6
   1f8d4:	430bea83 	.word	0x430bea83
   1f8d8:	e00ef815 	.word	0xe00ef815
   1f8dc:	630cea83 	.word	0x630cea83
   1f8e0:	ea839900 	.word	0xea839900
   1f8e4:	4059230e 	.word	0x4059230e
   1f8e8:	40474048 	.word	0x40474048
   1f8ec:	fc87fa5f 	.word	0xfc87fa5f
   1f8f0:	e00cf815 	.word	0xe00cf815
   1f8f4:	6c17ea4f 	.word	0x6c17ea4f
   1f8f8:	b00cf815 	.word	0xb00cf815
   1f8fc:	2c07f3c7 	.word	0x2c07f3c7
   1f900:	0202ea8e 	.word	0x0202ea8e
   1f904:	c00cf815 	.word	0xc00cf815
   1f908:	4e07f3c7 	.word	0x4e07f3c7
   1f90c:	620bea82 	.word	0x620bea82
   1f910:	e00ef815 	.word	0xe00ef815
   1f914:	220cea82 	.word	0x220cea82
   1f918:	420eea82 	.word	0x420eea82
   1f91c:	0802ea88 	.word	0x0802ea88
   1f920:	3108e9c4 	.word	0x3108e9c4
   1f924:	490a9100 	.word	0x490a9100
   1f928:	0908ea89 	.word	0x0908ea89
   1f92c:	0609ea86 	.word	0x0609ea86
   1f930:	e9c4458a 	.word	0xe9c4458a
   1f934:	e9c4070a 	.word	0xe9c4070a
   1f938:	e9c4960e 	.word	0xe9c4960e
   1f93c:	f104280c 	.word	0xf104280c
   1f940:	d1b30420 	.word	0xd1b30420
   1f944:	b0052000 	.word	0xb0052000
   1f948:	8ff0e8bd 	.word	0x8ff0e8bd
   1f94c:	00026d64 	.word	0x00026d64
   1f950:	0002727c 	.word	0x0002727c
   1f954:	00027260 	.word	0x00027260
   1f958:	4bb269c2 	.word	0x4bb269c2
   1f95c:	2407f3c2 	.word	0x2407f3c2
   1f960:	5d1d6881 	.word	0x5d1d6881
   1f964:	5d1e0e14 	.word	0x5d1e0e14
   1f968:	0101f081 	.word	0x0101f081
   1f96c:	5d1cb2d4 	.word	0x5d1cb2d4
   1f970:	f3c2404d 	.word	0xf3c2404d
   1f974:	5c594107 	.word	0x5c594107
   1f978:	4506ea85 	.word	0x4506ea85
   1f97c:	ea8568c7 	.word	0xea8568c7
   1f980:	ea856504 	.word	0xea856504
   1f984:	69012501 	.word	0x69012501
   1f988:	6946406f 	.word	0x6946406f
   1f98c:	0907ea81 	.word	0x0907ea81
   1f990:	ea866984 	.word	0xea866984
   1f994:	ea840609 	.word	0xea840609
   1f998:	ea820806 	.word	0xea820806
   1f99c:	f3c20208 	.word	0xf3c20208
   1f9a0:	f8132407 	.word	0xf8132407
   1f9a4:	ea4fe004 	.word	0xea4fe004
   1f9a8:	f8136c12 	.word	0xf8136c12
   1f9ac:	f085a00c 	.word	0xf085a00c
   1f9b0:	fa5f0402 	.word	0xfa5f0402
   1f9b4:	ea8efc82 	.word	0xea8efc82
   1f9b8:	f8130404 	.word	0xf8130404
   1f9bc:	f3c2e00c 	.word	0xf3c2e00c
   1f9c0:	f8134c07 	.word	0xf8134c07
   1f9c4:	ea84c00c 	.word	0xea84c00c
   1f9c8:	ea84440a 	.word	0xea84440a
   1f9cc:	ea84640e 	.word	0xea84640e
   1f9d0:	4061240c 	.word	0x4061240c
   1f9d4:	460c9401 	.word	0x460c9401
   1f9d8:	62056981 	.word	0x62056981
   1f9dc:	ea824061 	.word	0xea824061
   1f9e0:	91030c01 	.word	0x91030c01
   1f9e4:	2e07f3cc 	.word	0x2e07f3cc
   1f9e8:	f8139901 	.word	0xf8139901
   1f9ec:	ea4fe00e 	.word	0xea4fe00e
   1f9f0:	f8136a1c 	.word	0xf8136a1c
   1f9f4:	f081a00a 	.word	0xf081a00a
   1f9f8:	ea8e0b04 	.word	0xea8e0b04
   1f9fc:	ea8e0e0b 	.word	0xea8e0e0b
   1fa00:	fa5f4a0a 	.word	0xfa5f4a0a
   1fa04:	f813fe8c 	.word	0xf813fe8c
   1fa08:	e9c0e00e 	.word	0xe9c0e00e
   1fa0c:	ea8a960a 	.word	0xea8a960a
   1fa10:	f3cc650e 	.word	0xf3cc650e
   1fa14:	f8134e07 	.word	0xf8134e07
   1fa18:	ea87e00e 	.word	0xea87e00e
   1fa1c:	ea850a01 	.word	0xea850a01
   1fa20:	ea8a250e 	.word	0xea8a250e
   1fa24:	ea860e05 	.word	0xea860e05
   1fa28:	9100010e 	.word	0x9100010e
   1fa2c:	ea864621 	.word	0xea864621
   1fa30:	9c000904 	.word	0x9c000904
   1fa34:	820ce9c0 	.word	0x820ce9c0
   1fa38:	0604ea82 	.word	0x0604ea82
   1fa3c:	f8c06247 	.word	0xf8c06247
   1fa40:	9102a03c 	.word	0x9102a03c
   1fa44:	9f036401 	.word	0x9f036401
   1fa48:	2407f3c6 	.word	0x2407f3c6
   1fa4c:	080eea81 	.word	0x080eea81
   1fa50:	7c12e9c0 	.word	0x7c12e9c0
   1fa54:	ea4f5d1c 	.word	0xea4f5d1c
   1fa58:	e9c06c16 	.word	0xe9c06c16
   1fa5c:	f8c05e14 	.word	0xf8c05e14
   1fa60:	f0858058 	.word	0xf0858058
   1fa64:	f8130508 	.word	0xf8130508
   1fa68:	fa5f800c 	.word	0xfa5f800c
   1fa6c:	9901fc86 	.word	0x9901fc86
   1fa70:	c00cf813 	.word	0xc00cf813
   1fa74:	f3c64065 	.word	0xf3c64065
   1fa78:	5d1c4407 	.word	0x5d1c4407
   1fa7c:	4508ea85 	.word	0x4508ea85
   1fa80:	ea856381 	.word	0xea856381
   1fa84:	9902650c 	.word	0x9902650c
   1fa88:	2504ea85 	.word	0x2504ea85
   1fa8c:	91014069 	.word	0x91014069
   1fa90:	69844639 	.word	0x69844639
   1fa94:	9044f8c0 	.word	0x9044f8c0
   1fa98:	0805ea84 	.word	0x0805ea84
   1fa9c:	0908ea86 	.word	0x0908ea86
   1faa0:	2407f3c9 	.word	0x2407f3c9
   1faa4:	a004f813 	.word	0xa004f813
   1faa8:	6419ea4f 	.word	0x6419ea4f
   1faac:	f0855d1c 	.word	0xf0855d1c
   1fab0:	ea8a0c10 	.word	0xea8a0c10
   1fab4:	fa5f0c0c 	.word	0xfa5f0c0c
   1fab8:	f813fa89 	.word	0xf813fa89
   1fabc:	ea8ca00a 	.word	0xea8ca00a
   1fac0:	f3c94c04 	.word	0xf3c94c04
   1fac4:	5d1c4407 	.word	0x5d1c4407
   1fac8:	6c0aea8c 	.word	0x6c0aea8c
   1facc:	0e05ea8e 	.word	0x0e05ea8e
   1fad0:	2c04ea8c 	.word	0x2c04ea8c
   1fad4:	040cea8e 	.word	0x040cea8e
   1fad8:	f8c04062 	.word	0xf8c04062
   1fadc:	f3c2e06c 	.word	0xf3c2e06c
   1fae0:	f8132e07 	.word	0xf8132e07
   1fae4:	ea4fe00e 	.word	0xea4fe00e
   1fae8:	f8136a12 	.word	0xf8136a12
   1faec:	f08ca00a 	.word	0xf08ca00a
   1faf0:	ea8e0b20 	.word	0xea8e0b20
   1faf4:	ea8e0e0b 	.word	0xea8e0e0b
   1faf8:	fa5f4a0a 	.word	0xfa5f4a0a
   1fafc:	f813fe82 	.word	0xf813fe82
   1fb00:	9f00e00e 	.word	0x9f00e00e
   1fb04:	6a0eea8a 	.word	0x6a0eea8a
   1fb08:	4e07f3c2 	.word	0x4e07f3c2
   1fb0c:	b00ef813 	.word	0xb00ef813
   1fb10:	0e07ea81 	.word	0x0e07ea81
   1fb14:	ea8a9901 	.word	0xea8a9901
   1fb18:	ea812b0b 	.word	0xea812b0b
   1fb1c:	9f000a0b 	.word	0x9f000a0b
   1fb20:	e060f8c0 	.word	0xe060f8c0
   1fb24:	0e0aea88 	.word	0x0e0aea88
   1fb28:	664665c7 	.word	0x664665c7
   1fb2c:	907cf8c0 	.word	0x907cf8c0
   1fb30:	060eea82 	.word	0x060eea82
   1fb34:	ea876701 	.word	0xea876701
   1fb38:	404f0904 	.word	0x404f0904
   1fb3c:	66854061 	.word	0x66854061
   1fb40:	1088f8c0 	.word	0x1088f8c0
   1fb44:	2507f3c6 	.word	0x2507f3c6
   1fb48:	0109ea88 	.word	0x0109ea88
   1fb4c:	1090f8c0 	.word	0x1090f8c0
   1fb50:	0e315d5d 	.word	0x0e315d5d
   1fb54:	f8c05c59 	.word	0xf8c05c59
   1fb58:	f8c04084 	.word	0xf8c04084
   1fb5c:	ea84b098 	.word	0xea84b098
   1fb60:	6747040b 	.word	0x6747040b
   1fb64:	0b40f08b 	.word	0x0b40f08b
   1fb68:	5ddfb2f7 	.word	0x5ddfb2f7
   1fb6c:	60acf8c0 	.word	0x60acf8c0
   1fb70:	050bea85 	.word	0x050bea85
   1fb74:	4607f3c6 	.word	0x4607f3c6
   1fb78:	4501ea85 	.word	0x4501ea85
   1fb7c:	ea855d99 	.word	0xea855d99
   1fb80:	ea856507 	.word	0xea856507
   1fb84:	f8c02501 	.word	0xf8c02501
   1fb88:	406c409c 	.word	0x406c409c
   1fb8c:	0604ea89 	.word	0x0604ea89
   1fb90:	2094f8c0 	.word	0x2094f8c0
   1fb94:	f3c24072 	.word	0xf3c24072
   1fb98:	f8c02107 	.word	0xf8c02107
   1fb9c:	5c59c080 	.word	0x5c59c080
   1fba0:	0c0aea89 	.word	0x0c0aea89
   1fba4:	f8c00e17 	.word	0xf8c00e17
   1fba8:	f8c0908c 	.word	0xf8c0908c
   1fbac:	f813c0a4 	.word	0xf813c0a4
   1fbb0:	f0859007 	.word	0xf0859007
   1fbb4:	b2d70c80 	.word	0xb2d70c80
   1fbb8:	010cea81 	.word	0x010cea81
   1fbbc:	c007f813 	.word	0xc007f813
   1fbc0:	4707f3c2 	.word	0x4707f3c2
   1fbc4:	ea815ddf 	.word	0xea815ddf
   1fbc8:	ea814109 	.word	0xea814109
   1fbcc:	ea83630c 	.word	0xea83630c
   1fbd0:	f8c02307 	.word	0xf8c02307
   1fbd4:	ea838078 	.word	0xea838078
   1fbd8:	ea830c0a 	.word	0xea830c0a
   1fbdc:	f8c00808 	.word	0xf8c00808
   1fbe0:	ea8ee0a8 	.word	0xea8ee0a8
   1fbe4:	ea880706 	.word	0xea880706
   1fbe8:	ea8c0b02 	.word	0xea8c0b02
   1fbec:	ea830906 	.word	0xea830906
   1fbf0:	ea8a0e04 	.word	0xea8a0e04
   1fbf4:	f8c00104 	.word	0xf8c00104
   1fbf8:	e9c0a0a0 	.word	0xe9c0a0a0
   1fbfc:	f8c07230 	.word	0xf8c07230
   1fc00:	e9c060bc 	.word	0xe9c060bc
   1fc04:	e9c0542c 	.word	0xe9c0542c
   1fc08:	f8c08b36 	.word	0xf8c08b36
   1fc0c:	e9c030c8 	.word	0xe9c030c8
   1fc10:	f8c0c934 	.word	0xf8c0c934
   1fc14:	f8c0e0cc 	.word	0xf8c0e0cc
   1fc18:	200010b8 	.word	0x200010b8
   1fc1c:	e8bdb005 	.word	0xe8bdb005
   1fc20:	bf008ff0 	.word	0xbf008ff0
   1fc24:	00026d64 	.word	0x00026d64

0001fc28 <symbol_000e9b3>:
   1fc28:	4ff0e92d 	.word	0x4ff0e92d
   1fc2c:	0400e9d0 	.word	0x0400e9d0
   1fc30:	46061040 	.word	0x46061040
   1fc34:	f8d16823 	.word	0xf8d16823
   1fc38:	b089a000 	.word	0xb089a000
   1fc3c:	0a03ea8a 	.word	0x0a03ea8a
   1fc40:	800cf8d1 	.word	0x800cf8d1
   1fc44:	3e0168e3 	.word	0x3e0168e3
   1fc48:	68659006 	.word	0x68659006
   1fc4c:	68a0684f 	.word	0x68a0684f
   1fc50:	688a9205 	.word	0x688a9205
   1fc54:	0803ea88 	.word	0x0803ea88
   1fc58:	f1042e00 	.word	0xf1042e00
   1fc5c:	96010310 	.word	0x96010310
   1fc60:	0507ea85 	.word	0x0507ea85
   1fc64:	0200ea82 	.word	0x0200ea82
   1fc68:	f8df9304 	.word	0xf8df9304
   1fc6c:	f340b3e8 	.word	0xf340b3e8
   1fc70:	462b80db 	.word	0x462b80db
   1fc74:	0930f104 	.word	0x0930f104
   1fc78:	f18afa5f 	.word	0xf18afa5f
   1fc7c:	f788fa5f 	.word	0xf788fa5f
   1fc80:	b2d4b2de 	.word	0xb2d4b2de
   1fc84:	0021f85b 	.word	0x0021f85b
   1fc88:	5027f85b 	.word	0x5027f85b
   1fc8c:	7026f85b 	.word	0x7026f85b
   1fc90:	6024f85b 	.word	0x6024f85b
   1fc94:	4c20f859 	.word	0x4c20f859
   1fc98:	6118ea4f 	.word	0x6118ea4f
   1fc9c:	0c04ea80 	.word	0x0c04ea80
   1fca0:	0c14f859 	.word	0x0c14f859
   1fca4:	1021f85b 	.word	0x1021f85b
   1fca8:	0e00ea85 	.word	0x0e00ea85
   1fcac:	f85b0e10 	.word	0xf85b0e10
   1fcb0:	f3c35020 	.word	0xf3c35020
   1fcb4:	ea8c2407 	.word	0xea8c2407
   1fcb8:	f3c22c31 	.word	0xf3c22c31
   1fcbc:	f3c24107 	.word	0xf3c24107
   1fcc0:	f85b2207 	.word	0xf85b2207
   1fcc4:	f85b4024 	.word	0xf85b4024
   1fcc8:	ea8e0022 	.word	0xea8e0022
   1fccc:	0e1d2235 	.word	0x0e1d2235
   1fcd0:	4307f3c3 	.word	0x4307f3c3
   1fcd4:	3023f85b 	.word	0x3023f85b
   1fcd8:	6c34ea8c 	.word	0x6c34ea8c
   1fcdc:	4c18f859 	.word	0x4c18f859
   1fce0:	f85b9302 	.word	0xf85b9302
   1fce4:	f8595025 	.word	0xf8595025
   1fce8:	ea4f3c1c 	.word	0xea4f3c1c
   1fcec:	f85b6e1a 	.word	0xf85b6e1a
   1fcf0:	4066e02e 	.word	0x4066e02e
   1fcf4:	f3ca405f 	.word	0xf3ca405f
   1fcf8:	ea862407 	.word	0xea862407
   1fcfc:	f3c82635 	.word	0xf3c82635
   1fd00:	f3c82507 	.word	0xf3c82507
   1fd04:	ea874807 	.word	0xea874807
   1fd08:	f85b273e 	.word	0xf85b273e
   1fd0c:	f85b4024 	.word	0xf85b4024
   1fd10:	f85be025 	.word	0xf85be025
   1fd14:	9b025028 	.word	0x9b025028
   1fd18:	6030ea87 	.word	0x6030ea87
   1fd1c:	4035ea80 	.word	0x4035ea80
   1fd20:	1021f85b 	.word	0x1021f85b
   1fd24:	6434ea82 	.word	0x6434ea82
   1fd28:	4433ea84 	.word	0x4433ea84
   1fd2c:	ea8cb2c3 	.word	0xea8cb2c3
   1fd30:	f85b4131 	.word	0xf85b4131
   1fd34:	f3ca3023 	.word	0xf3ca3023
   1fd38:	f85b4a07 	.word	0xf85b4a07
   1fd3c:	b2ca702a 	.word	0xb2ca702a
   1fd40:	6c14ea4f 	.word	0x6c14ea4f
   1fd44:	2022f85b 	.word	0x2022f85b
   1fd48:	663eea86 	.word	0x663eea86
   1fd4c:	f8599302 	.word	0xf8599302
   1fd50:	ea863c10 	.word	0xea863c10
   1fd54:	f85b4637 	.word	0xf85b4637
   1fd58:	f3c0e02c 	.word	0xf3c0e02c
   1fd5c:	f85b2707 	.word	0xf85b2707
   1fd60:	ea82c027 	.word	0xea82c027
   1fd64:	f3c60a03 	.word	0xf3c60a03
   1fd68:	f3c64507 	.word	0xf3c64507
   1fd6c:	f85b2207 	.word	0xf85b2207
   1fd70:	f85b3022 	.word	0xf85b3022
   1fd74:	ea8a5025 	.word	0xea8a5025
   1fd78:	f3c42a3e 	.word	0xf3c42a3e
   1fd7c:	0e0f4207 	.word	0x0e0f4207
   1fd80:	6a3cea8a 	.word	0x6a3cea8a
   1fd84:	7027f85b 	.word	0x7027f85b
   1fd88:	ea8a9303 	.word	0xea8a9303
   1fd8c:	f85b4a35 	.word	0xf85b4a35
   1fd90:	f8598022 	.word	0xf8598022
   1fd94:	9b025c0c 	.word	0x9b025c0c
   1fd98:	406bb2f2 	.word	0x406bb2f2
   1fd9c:	2022f85b 	.word	0x2022f85b
   1fda0:	2337ea83 	.word	0x2337ea83
   1fda4:	7c08f859 	.word	0x7c08f859
   1fda8:	fc84fa5f 	.word	0xfc84fa5f
   1fdac:	2407f3c4 	.word	0x2407f3c4
   1fdb0:	502cf85b 	.word	0x502cf85b
   1fdb4:	0e364057 	.word	0x0e364057
   1fdb8:	2024f85b 	.word	0x2024f85b
   1fdbc:	4c04f859 	.word	0x4c04f859
   1fdc0:	6e10ea4f 	.word	0x6e10ea4f
   1fdc4:	6026f85b 	.word	0x6026f85b
   1fdc8:	f85b406c 	.word	0xf85b406c
   1fdcc:	ea84e02e 	.word	0xea84e02e
   1fdd0:	f3c12636 	.word	0xf3c12636
   1fdd4:	f3c12407 	.word	0xf3c12407
   1fdd8:	f85b4107 	.word	0xf85b4107
   1fddc:	ea871021 	.word	0xea871021
   1fde0:	ea8e2e3e 	.word	0xea8e2e3e
   1fde4:	f3c06232 	.word	0xf3c06232
   1fde8:	f85b4007 	.word	0xf85b4007
   1fdec:	9d034024 	.word	0x9d034024
   1fdf0:	4231ea82 	.word	0x4231ea82
   1fdf4:	f85b9901 	.word	0xf85b9901
   1fdf8:	ea830020 	.word	0xea830020
   1fdfc:	ea866335 	.word	0xea866335
   1fe00:	39016634 	.word	0x39016634
   1fe04:	4338ea83 	.word	0x4338ea83
   1fe08:	0920f109 	.word	0x0920f109
   1fe0c:	4830ea86 	.word	0x4830ea86
   1fe10:	f47f9101 	.word	0xf47f9101
   1fe14:	461daf31 	.word	0x461daf31
   1fe18:	99049b06 	.word	0x99049b06
   1fe1c:	6300f103 	.word	0x6300f103
   1fe20:	eb013b01 	.word	0xeb013b01
   1fe24:	93041343 	.word	0x93041343
   1fe28:	fa5f2400 	.word	0xfa5f2400
   1fe2c:	f85bf38a 	.word	0xf85bf38a
   1fe30:	9b047023 	.word	0x9b047023
   1fe34:	fa5f46a1 	.word	0xfa5f46a1
   1fe38:	6819fc85 	.word	0x6819fc85
   1fe3c:	6318ea4f 	.word	0x6318ea4f
   1fe40:	46a69407 	.word	0x46a69407
   1fe44:	402cf85b 	.word	0x402cf85b
   1fe48:	c023f85b 	.word	0xc023f85b
   1fe4c:	f3c54079 	.word	0xf3c54079
   1fe50:	f85b2307 	.word	0xf85b2307
   1fe54:	f3c23023 	.word	0xf3c23023
   1fe58:	ea814707 	.word	0xea814707
   1fe5c:	fa5f213c 	.word	0xfa5f213c
   1fe60:	f85bfc82 	.word	0xf85bfc82
   1fe64:	f85b002c 	.word	0xf85b002c
   1fe68:	ea817027 	.word	0xea817027
   1fe6c:	90036133 	.word	0x90036133
   1fe70:	4037ea81 	.word	0x4037ea81
   1fe74:	fa5f9f04 	.word	0xfa5f9f04
   1fe78:	f85bf688 	.word	0xf85bf688
   1fe7c:	68fb6026 	.word	0x68fb6026
   1fe80:	40739001 	.word	0x40739001
   1fe84:	f85b0e16 	.word	0xf85b0e16
   1fe88:	98046026 	.word	0x98046026
   1fe8c:	2636ea83 	.word	0x2636ea83
   1fe90:	f85b0e2b 	.word	0xf85b0e2b
   1fe94:	f3c53023 	.word	0xf3c53023
   1fe98:	496d4507 	.word	0x496d4507
   1fe9c:	7025f85b 	.word	0x7025f85b
   1fea0:	f89d9306 	.word	0xf89d9306
   1fea4:	6843c004 	.word	0x6843c004
   1fea8:	651aea4f 	.word	0x651aea4f
   1feac:	5025f85b 	.word	0x5025f85b
   1feb0:	2207f3c2 	.word	0x2207f3c2
   1feb4:	2022f85b 	.word	0x2022f85b
   1feb8:	c00cf811 	.word	0xc00cf811
   1febc:	69044063 	.word	0x69044063
   1fec0:	2535ea83 	.word	0x2535ea83
   1fec4:	2307f3ca 	.word	0x2307f3ca
   1fec8:	3023f85b 	.word	0x3023f85b
   1fecc:	0c04ea8c 	.word	0x0c04ea8c
   1fed0:	6532ea85 	.word	0x6532ea85
   1fed4:	68829c03 	.word	0x68829c03
   1fed8:	6633ea86 	.word	0x6633ea86
   1fedc:	f3c84660 	.word	0xf3c84660
   1fee0:	ea842307 	.word	0xea842307
   1fee4:	9c060c02 	.word	0x9c060c02
   1fee8:	3023f85b 	.word	0x3023f85b
   1feec:	4a07f3ca 	.word	0x4a07f3ca
   1fef0:	202af85b 	.word	0x202af85b
   1fef4:	2c34ea8c 	.word	0x2c34ea8c
   1fef8:	4807f3c8 	.word	0x4807f3c8
   1fefc:	4637ea86 	.word	0x4637ea86
   1ff00:	6c33ea8c 	.word	0x6c33ea8c
   1ff04:	7028f85b 	.word	0x7028f85b
   1ff08:	4232ea8c 	.word	0x4232ea8c
   1ff0c:	4537ea85 	.word	0x4537ea85
   1ff10:	4c07f3c2 	.word	0x4c07f3c2
   1ff14:	5ccb0e33 	.word	0x5ccb0e33
   1ff18:	a00cf811 	.word	0xa00cf811
   1ff1c:	fc85fa5f 	.word	0xfc85fa5f
   1ff20:	400cf811 	.word	0x400cf811
   1ff24:	2707f3c5 	.word	0x2707f3c5
   1ff28:	464c9403 	.word	0x464c9403
   1ff2c:	ea805dcf 	.word	0xea805dcf
   1ff30:	98016303 	.word	0x98016303
   1ff34:	2307ea83 	.word	0x2307ea83
   1ff38:	fb82fa5f 	.word	0xfb82fa5f
   1ff3c:	430aea83 	.word	0x430aea83
   1ff40:	b00bf811 	.word	0xb00bf811
   1ff44:	6c10ea4f 	.word	0x6c10ea4f
   1ff48:	f3639804 	.word	0xf3639804
   1ff4c:	f8110407 	.word	0xf8110407
   1ff50:	f8cd800c 	.word	0xf8cd800c
   1ff54:	9402b018 	.word	0x9402b018
   1ff58:	2c07f3c2 	.word	0x2c07f3c2
   1ff5c:	ea4f9c03 	.word	0xea4f9c03
   1ff60:	69426b12 	.word	0x69426b12
   1ff64:	c00cf811 	.word	0xc00cf811
   1ff68:	f3c64062 	.word	0xf3c64062
   1ff6c:	5dcf4707 	.word	0x5dcf4707
   1ff70:	6808ea82 	.word	0x6808ea82
   1ff74:	6a15ea4f 	.word	0x6a15ea4f
   1ff78:	ea886982 	.word	0xea886982
   1ff7c:	9c062c0c 	.word	0x9c062c0c
   1ff80:	f886fa5f 	.word	0xf886fa5f
   1ff84:	4707ea8c 	.word	0x4707ea8c
   1ff88:	8008f811 	.word	0x8008f811
   1ff8c:	c00af811 	.word	0xc00af811
   1ff90:	a01cf8d0 	.word	0xa01cf8d0
   1ff94:	40629801 	.word	0x40629801
   1ff98:	0a0aea88 	.word	0x0a0aea88
   1ff9c:	620cea82 	.word	0x620cea82
   1ffa0:	4807f3c0 	.word	0x4807f3c0
   1ffa4:	2c07f3c0 	.word	0x2c07f3c0
   1ffa8:	f8112000 	.word	0xf8112000
   1ffac:	f3c6b00b 	.word	0xf3c6b00b
   1ffb0:	5d8e2607 	.word	0x5d8e2607
   1ffb4:	6b0bea8a 	.word	0x6b0bea8a
   1ffb8:	4507f3c5 	.word	0x4507f3c5
   1ffbc:	a00cf811 	.word	0xa00cf811
   1ffc0:	f8115d4d 	.word	0xf8115d4d
   1ffc4:	ea821008 	.word	0xea821008
   1ffc8:	ea8b2606 	.word	0xea8b2606
   1ffcc:	9c022b0a 	.word	0x9c022b0a
   1ffd0:	4b05ea8b 	.word	0x4b05ea8b
   1ffd4:	4601ea86 	.word	0x4601ea86
   1ffd8:	2c13ea4f 	.word	0x2c13ea4f
   1ffdc:	ea4f0a31 	.word	0xea4f0a31
   1ffe0:	f366221b 	.word	0xf366221b
   1ffe4:	f36b0e07 	.word	0xf36b0e07
   1ffe8:	f36c0007 	.word	0xf36c0007
   1ffec:	ea4f240f 	.word	0xea4f240f
   1fff0:	f3624c13 	.word	0xf3624c13
   1fff4:	f361200f 	.word	0xf361200f
   1fff8:	f36c2e0f 	.word	0xf36c2e0f
   1fffc:	0c314417 	.word	0x0c314417
   20000:	4e17f361 	.word	0x4e17f361
   20004:	46204601 	.word	0x46204601
   20008:	f3630e1b 	.word	0xf3630e1b
   2000c:	9b05601f 	.word	0x9b05601f
   20010:	60180a3d 	.word	0x60180a3d
   20014:	f3672000 	.word	0xf3672000
   20018:	ea4f0907 	.word	0xea4f0907
   2001c:	f365421b 	.word	0xf365421b
   20020:	0c3d290f 	.word	0x0c3d290f
   20024:	4917f365 	.word	0x4917f365
   20028:	0e360e3f 	.word	0x0e360e3f
   2002c:	4117f362 	.word	0x4117f362
   20030:	6b1bea4f 	.word	0x6b1bea4f
   20034:	691ff367 	.word	0x691ff367
   20038:	6e1ff366 	.word	0x6e1ff366
   2003c:	611ff36b 	.word	0x611ff36b
   20040:	9004f8c3 	.word	0x9004f8c3
   20044:	e008f8c3 	.word	0xe008f8c3
   20048:	b00960d9 	.word	0xb00960d9
   2004c:	8ff0e8bd 	.word	0x8ff0e8bd
   20050:	00026d64 	.word	0x00026d64
   20054:	00026e64 	.word	0x00026e64

00020058 <symbol_000e471>:
   20058:	4ff0e92d 	.word	0x4ff0e92d
   2005c:	3500e9d0 	.word	0x3500e9d0
   20060:	682fb089 	.word	0x682fb089
   20064:	f8d1105b 	.word	0xf8d1105b
   20068:	9306a000 	.word	0x9306a000
   2006c:	684c3b01 	.word	0x684c3b01
   20070:	ea8a9301 	.word	0xea8a9301
   20074:	68eb0a07 	.word	0x68eb0a07
   20078:	68c9688f 	.word	0x68c9688f
   2007c:	40596868 	.word	0x40596868
   20080:	68ae9b01 	.word	0x68ae9b01
   20084:	2b009205 	.word	0x2b009205
   20088:	0210f105 	.word	0x0210f105
   2008c:	0004ea80 	.word	0x0004ea80
   20090:	0706ea87 	.word	0x0706ea87
   20094:	f8df9204 	.word	0xf8df9204
   20098:	f340b3dc 	.word	0xf340b3dc
   2009c:	46d180d7 	.word	0x46d180d7
   200a0:	0830f105 	.word	0x0830f105
   200a4:	f489fa5f 	.word	0xf489fa5f
   200a8:	5024f85b 	.word	0x5024f85b
   200ac:	6c20f858 	.word	0x6c20f858
   200b0:	fc80fa5f 	.word	0xfc80fa5f
   200b4:	f85b0e04 	.word	0xf85b0e04
   200b8:	f85bc02c 	.word	0xf85bc02c
   200bc:	406e4024 	.word	0x406e4024
   200c0:	5c1cf858 	.word	0x5c1cf858
   200c4:	2e07f3c1 	.word	0x2e07f3c1
   200c8:	a02ef85b 	.word	0xa02ef85b
   200cc:	0505ea8c 	.word	0x0505ea8c
   200d0:	2e34ea86 	.word	0x2e34ea86
   200d4:	b2fbb2ca 	.word	0xb2fbb2ca
   200d8:	6c17ea4f 	.word	0x6c17ea4f
   200dc:	4407f3c7 	.word	0x4407f3c7
   200e0:	2707f3c7 	.word	0x2707f3c7
   200e4:	6027f85b 	.word	0x6027f85b
   200e8:	2022f85b 	.word	0x2022f85b
   200ec:	7c14f858 	.word	0x7c14f858
   200f0:	3023f85b 	.word	0x3023f85b
   200f4:	ea4f407a 	.word	0xea4f407a
   200f8:	f85b6719 	.word	0xf85b6719
   200fc:	f85b7027 	.word	0xf85b7027
   20100:	ea82c02c 	.word	0xea82c02c
   20104:	ea822237 	.word	0xea822237
   20108:	f8586636 	.word	0xf8586636
   2010c:	ea852c18 	.word	0xea852c18
   20110:	ea8e2c3c 	.word	0xea8e2c3c
   20114:	0e0d6e3a 	.word	0x0e0d6e3a
   20118:	0a02ea83 	.word	0x0a02ea83
   2011c:	2307f3c9 	.word	0x2307f3c9
   20120:	3023f85b 	.word	0x3023f85b
   20124:	5025f85b 	.word	0x5025f85b
   20128:	4107f3c1 	.word	0x4107f3c1
   2012c:	1021f85b 	.word	0x1021f85b
   20130:	2707f3c0 	.word	0x2707f3c0
   20134:	2535ea8a 	.word	0x2535ea8a
   20138:	4a07f3c0 	.word	0x4a07f3c0
   2013c:	6033ea8c 	.word	0x6033ea8c
   20140:	4031ea80 	.word	0x4031ea80
   20144:	4024f85b 	.word	0x4024f85b
   20148:	ea8e0e03 	.word	0xea8e0e03
   2014c:	f85b4434 	.word	0xf85b4434
   20150:	b2e13023 	.word	0xb2e13023
   20154:	f3c99302 	.word	0xf3c99302
   20158:	f8584907 	.word	0xf8584907
   2015c:	f85b3c10 	.word	0xf85b3c10
   20160:	f85b1021 	.word	0xf85b1021
   20164:	f3c42029 	.word	0xf3c42029
   20168:	f85b2c07 	.word	0xf85b2c07
   2016c:	f85b9027 	.word	0xf85b9027
   20170:	4059702a 	.word	0x4059702a
   20174:	302cf85b 	.word	0x302cf85b
   20178:	4637ea86 	.word	0x4637ea86
   2017c:	6539ea85 	.word	0x6539ea85
   20180:	4532ea85 	.word	0x4532ea85
   20184:	2707f3c6 	.word	0x2707f3c6
   20188:	9b029303 	.word	0x9b029303
   2018c:	4e07f3c5 	.word	0x4e07f3c5
   20190:	7027f85b 	.word	0x7027f85b
   20194:	902ef85b 	.word	0x902ef85b
   20198:	4c07f3c6 	.word	0x4c07f3c6
   2019c:	ea4fb2c2 	.word	0xea4fb2c2
   201a0:	ea816e15 	.word	0xea816e15
   201a4:	b2e92333 	.word	0xb2e92333
   201a8:	a02cf85b 	.word	0xa02cf85b
   201ac:	6337ea83 	.word	0x6337ea83
   201b0:	2022f85b 	.word	0x2022f85b
   201b4:	e02ef85b 	.word	0xe02ef85b
   201b8:	1021f85b 	.word	0x1021f85b
   201bc:	7c0cf858 	.word	0x7c0cf858
   201c0:	6c16ea4f 	.word	0x6c16ea4f
   201c4:	b2f6407a 	.word	0xb2f6407a
   201c8:	2e3eea82 	.word	0x2e3eea82
   201cc:	2026f85b 	.word	0x2026f85b
   201d0:	6c08f858 	.word	0x6c08f858
   201d4:	4939ea83 	.word	0x4939ea83
   201d8:	40710e23 	.word	0x40710e23
   201dc:	6023f85b 	.word	0x6023f85b
   201e0:	3c04f858 	.word	0x3c04f858
   201e4:	702cf85b 	.word	0x702cf85b
   201e8:	f3c54053 	.word	0xf3c54053
   201ec:	ea832507 	.word	0xea832507
   201f0:	f85b2636 	.word	0xf85b2636
   201f4:	f3c05025 	.word	0xf3c05025
   201f8:	f3c02307 	.word	0xf3c02307
   201fc:	ea814007 	.word	0xea814007
   20200:	f85b2137 	.word	0xf85b2137
   20204:	f85b7023 	.word	0xf85b7023
   20208:	ea863020 	.word	0xea863020
   2020c:	ea816635 	.word	0xea816635
   20210:	f3c46737 	.word	0xf3c46737
   20214:	9a034407 	.word	0x9a034407
   20218:	4133ea86 	.word	0x4133ea86
   2021c:	f85b9b01 	.word	0xf85b9b01
   20220:	ea8e4024 	.word	0xea8e4024
   20224:	3b016e32 	.word	0x3b016e32
   20228:	403aea8e 	.word	0x403aea8e
   2022c:	4734ea87 	.word	0x4734ea87
   20230:	0820f108 	.word	0x0820f108
   20234:	f47f9301 	.word	0xf47f9301
   20238:	46caaf35 	.word	0x46caaf35
   2023c:	9a049b06 	.word	0x9a049b06
   20240:	6300f103 	.word	0x6300f103
   20244:	eb023b01 	.word	0xeb023b01
   20248:	93041343 	.word	0x93041343
   2024c:	f38afa5f 	.word	0xf38afa5f
   20250:	5023f85b 	.word	0x5023f85b
   20254:	fa5f9b04 	.word	0xfa5f9b04
   20258:	681cf881 	.word	0x681cf881
   2025c:	f85b0e03 	.word	0xf85b0e03
   20260:	f85b2028 	.word	0xf85b2028
   20264:	f3c18023 	.word	0xf3c18023
   20268:	f85b2307 	.word	0xf85b2307
   2026c:	406c3023 	.word	0x406c3023
   20270:	4507f3c7 	.word	0x4507f3c7
   20274:	5025f85b 	.word	0x5025f85b
   20278:	2438ea84 	.word	0x2438ea84
   2027c:	f887fa5f 	.word	0xf887fa5f
   20280:	6028f85b 	.word	0x6028f85b
   20284:	6433ea84 	.word	0x6433ea84
   20288:	4535ea84 	.word	0x4535ea84
   2028c:	462e9602 	.word	0x462e9602
   20290:	fa5f9c04 	.word	0xfa5f9c04
   20294:	f85bf980 	.word	0xf85bf980
   20298:	68639029 	.word	0x68639029
   2029c:	f85b0e3c 	.word	0xf85b0e3c
   202a0:	96014024 	.word	0x96014024
   202a4:	0303ea89 	.word	0x0303ea89
   202a8:	ea839e04 	.word	0xea839e04
   202ac:	f3c72434 	.word	0xf3c72434
   202b0:	0e0b2707 	.word	0x0e0b2707
   202b4:	f85b4d6e 	.word	0xf85b4d6e
   202b8:	f89d9027 	.word	0xf89d9027
   202bc:	f85b8004 	.word	0xf85b8004
   202c0:	68f37023 	.word	0x68f37023
   202c4:	0e00f04f 	.word	0x0e00f04f
   202c8:	8008f815 	.word	0x8008f815
   202cc:	69324053 	.word	0x69324053
   202d0:	4107f3c1 	.word	0x4107f3c1
   202d4:	0802ea88 	.word	0x0802ea88
   202d8:	97034642 	.word	0x97034642
   202dc:	7021f85b 	.word	0x7021f85b
   202e0:	611aea4f 	.word	0x611aea4f
   202e4:	1021f85b 	.word	0x1021f85b
   202e8:	e018f8cd 	.word	0xe018f8cd
   202ec:	2331ea83 	.word	0x2331ea83
   202f0:	6939ea83 	.word	0x6939ea83
   202f4:	2307f3ca 	.word	0x2307f3ca
   202f8:	3023f85b 	.word	0x3023f85b
   202fc:	9e0268b1 	.word	0x9e0268b1
   20300:	6333ea84 	.word	0x6333ea84
   20304:	4737ea83 	.word	0x4737ea83
   20308:	0801ea86 	.word	0x0801ea86
   2030c:	2307f3c0 	.word	0x2307f3c0
   20310:	f3ca9e03 	.word	0xf3ca9e03
   20314:	f3c04a07 	.word	0xf3c04a07
   20318:	f85b4007 	.word	0xf85b4007
   2031c:	f85b102a 	.word	0xf85b102a
   20320:	f8cd4023 	.word	0xf8cd4023
   20324:	f85be01c 	.word	0xf85be01c
   20328:	0e383020 	.word	0x0e383020
   2032c:	ea885c28 	.word	0xea885c28
   20330:	ea892836 	.word	0xea892836
   20334:	ea884933 	.word	0xea884933
   20338:	ea886834 	.word	0xea886834
   2033c:	f3c94131 	.word	0xf3c94131
   20340:	ea822407 	.word	0xea822407
   20344:	9a016000 	.word	0x9a016000
   20348:	8004f815 	.word	0x8004f815
   2034c:	4307f3c1 	.word	0x4307f3c1
   20350:	6a11ea4f 	.word	0x6a11ea4f
   20354:	f8155cec 	.word	0xf8155cec
   20358:	f3c2b00a 	.word	0xf3c2b00a
   2035c:	9a042a07 	.word	0x9a042a07
   20360:	ea80b2fb 	.word	0xea80b2fb
   20364:	ea802008 	.word	0xea802008
   20368:	5ceb4004 	.word	0x5ceb4004
   2036c:	f8156954 	.word	0xf8156954
   20370:	f3c9a00a 	.word	0xf3c9a00a
   20374:	40634807 	.word	0x40634807
   20378:	6008f815 	.word	0x6008f815
   2037c:	6b0bea83 	.word	0x6b0bea83
   20380:	2b0aea8b 	.word	0x2b0aea8b
   20384:	4b06ea8b 	.word	0x4b06ea8b
   20388:	260046f4 	.word	0x260046f4
   2038c:	f881fa5f 	.word	0xf881fa5f
   20390:	f8156994 	.word	0xf8156994
   20394:	ea4f8008 	.word	0xea4f8008
   20398:	f8d26319 	.word	0xf8d26319
   2039c:	5ceba01c 	.word	0x5ceba01c
   203a0:	fa5f9a01 	.word	0xfa5f9a01
   203a4:	f815f989 	.word	0xf815f989
   203a8:	ea889009 	.word	0xea889009
   203ac:	ea880804 	.word	0xea880804
   203b0:	0e136803 	.word	0x0e136803
   203b4:	090aea89 	.word	0x090aea89
   203b8:	a003f815 	.word	0xa003f815
   203bc:	4307f3c2 	.word	0x4307f3c2
   203c0:	f3c75cec 	.word	0xf3c75cec
   203c4:	5ceb2307 	.word	0x5ceb2307
   203c8:	2107f3c1 	.word	0x2107f3c1
   203cc:	ea885c69 	.word	0xea885c69
   203d0:	ea882803 	.word	0xea882803
   203d4:	ea894804 	.word	0xea894804
   203d8:	ea4f690a 	.word	0xea4f690a
   203dc:	ea89241b 	.word	0xea89241b
   203e0:	f36b2901 	.word	0xf36b2901
   203e4:	ea4f0c07 	.word	0xea4f0c07
   203e8:	f3682118 	.word	0xf3682118
   203ec:	22000607 	.word	0x22000607
   203f0:	260ff361 	.word	0x260ff361
   203f4:	2c0ff364 	.word	0x2c0ff364
   203f8:	441bea4f 	.word	0x441bea4f
   203fc:	4c17f364 	.word	0x4c17f364
   20400:	f3c74634 	.word	0xf3c74634
   20404:	5ded4707 	.word	0x5ded4707
   20408:	0e07f360 	.word	0x0e07f360
   2040c:	4905ea89 	.word	0x4905ea89
   20410:	2319ea4f 	.word	0x2319ea4f
   20414:	f3690a05 	.word	0xf3690a05
   20418:	ea4f0207 	.word	0xea4f0207
   2041c:	f3634118 	.word	0xf3634118
   20420:	f365220f 	.word	0xf365220f
   20424:	0c052e0f 	.word	0x0c052e0f
   20428:	4417f361 	.word	0x4417f361
   2042c:	4e17f365 	.word	0x4e17f365
   20430:	46110e00 	.word	0x46110e00
   20434:	6e1ff360 	.word	0x6e1ff360
   20438:	ea4f4620 	.word	0xea4f4620
   2043c:	ea4f4319 	.word	0xea4f4319
   20440:	f3636818 	.word	0xf3636818
   20444:	9b054117 	.word	0x9b054117
   20448:	601ff368 	.word	0x601ff368
   2044c:	20006098 	.word	0x20006098
   20450:	6b1bea4f 	.word	0x6b1bea4f
   20454:	6919ea4f 	.word	0x6919ea4f
   20458:	6c1ff36b 	.word	0x6c1ff36b
   2045c:	611ff369 	.word	0x611ff369
   20460:	e000f8c3 	.word	0xe000f8c3
   20464:	c004f8c3 	.word	0xc004f8c3
   20468:	b00960d9 	.word	0xb00960d9
   2046c:	8ff0e8bd 	.word	0x8ff0e8bd
   20470:	0002728c 	.word	0x0002728c
   20474:	0002738c 	.word	0x0002738c

00020478 <symbol_0005bab>:
   20478:	4614b410 	.word	0x4614b410
   2047c:	461a2901 	.word	0x461a2901
   20480:	d0034621 	.word	0xd0034621
   20484:	4b04f85d 	.word	0x4b04f85d
   20488:	bde6f7ff 	.word	0xbde6f7ff
   2048c:	4b04f85d 	.word	0x4b04f85d
   20490:	bbcaf7ff 	.word	0xbbcaf7ff

00020494 <ok_rsp_parser>:
   20494:	47702000 	.word	0x47702000

00020498 <pdn_state_get_parser>:
   20498:	b5702200 	.word	0xb5702200
   2049c:	b084780b 	.word	0xb084780b
   204a0:	e9cd460e 	.word	0xe9cd460e
   204a4:	e9cd2200 	.word	0xe9cd2200
   204a8:	b3232202 	.word	0xb3232202
   204ac:	2b20460c 	.word	0x2b20460c
   204b0:	d01b460d 	.word	0xd01b460d
   204b4:	3201700b 	.word	0x3201700b
   204b8:	3f01f814 	.word	0x3f01f814
   204bc:	460d18b1 	.word	0x460d18b1
   204c0:	d1f42b00 	.word	0xd1f42b00
   204c4:	4b0d2200 	.word	0x4b0d2200
   204c8:	f853702a 	.word	0xf853702a
   204cc:	4a0c3020 	.word	0x4a0c3020
   204d0:	2110681b 	.word	0x2110681b
   204d4:	f7f14668 	.word	0xf7f14668
   204d8:	4669f881 	.word	0x4669f881
   204dc:	f0044630 	.word	0xf0044630
   204e0:	3000f8fb 	.word	0x3000f8fb
   204e4:	2001bf18 	.word	0x2001bf18
   204e8:	bd70b004 	.word	0xbd70b004
   204ec:	3f01f814 	.word	0x3f01f814
   204f0:	d1dc2b00 	.word	0xd1dc2b00
   204f4:	460de7e6 	.word	0x460de7e6
   204f8:	bf00e7e4 	.word	0xbf00e7e4
   204fc:	20021aec 	.word	0x20021aec
   20500:	00027830 	.word	0x00027830

00020504 <pdn_id_get_parser>:
   20504:	780bb570 	.word	0x780bb570
   20508:	b3134606 	.word	0xb3134606
   2050c:	24004608 	.word	0x24004608
   20510:	2b20460a 	.word	0x2b20460a
   20514:	d0174615 	.word	0xd0174615
   20518:	34017013 	.word	0x34017013
   2051c:	3f01f810 	.word	0x3f01f810
   20520:	4615190a 	.word	0x4615190a
   20524:	d1f42b00 	.word	0xd1f42b00
   20528:	46082300 	.word	0x46082300
   2052c:	213a702b 	.word	0x213a702b
   20530:	f902f004 	.word	0xf902f004
   20534:	3001b130 	.word	0x3001b130
   20538:	ffb9f003 	.word	0xffb9f003
   2053c:	f8534b06 	.word	0xf8534b06
   20540:	60583026 	.word	0x60583026
   20544:	bd702000 	.word	0xbd702000
   20548:	3f01f810 	.word	0x3f01f810
   2054c:	d1e02b00 	.word	0xd1e02b00
   20550:	460de7ea 	.word	0x460de7ea
   20554:	bf00e7e8 	.word	0xbf00e7e8
   20558:	20021aec 	.word	0x20021aec

0002055c <context_create_parser>:
   2055c:	780bb570 	.word	0x780bb570
   20560:	b3134606 	.word	0xb3134606
   20564:	24004608 	.word	0x24004608
   20568:	2b20460a 	.word	0x2b20460a
   2056c:	d0174615 	.word	0xd0174615
   20570:	34017013 	.word	0x34017013
   20574:	3f01f810 	.word	0x3f01f810
   20578:	4615190a 	.word	0x4615190a
   2057c:	d1f42b00 	.word	0xd1f42b00
   20580:	46082300 	.word	0x46082300
   20584:	213a702b 	.word	0x213a702b
   20588:	f8d6f004 	.word	0xf8d6f004
   2058c:	4b08b130 	.word	0x4b08b130
   20590:	f8533001 	.word	0xf8533001
   20594:	f0034026 	.word	0xf0034026
   20598:	6020ff8a 	.word	0x6020ff8a
   2059c:	bd702000 	.word	0xbd702000
   205a0:	3f01f810 	.word	0x3f01f810
   205a4:	d1e02b00 	.word	0xd1e02b00
   205a8:	460de7ea 	.word	0x460de7ea
   205ac:	bf00e7e8 	.word	0xbf00e7e8
   205b0:	20021aec 	.word	0x20021aec

000205b4 <pdn_interface_init>:
   205b4:	33fff04f 	.word	0x33fff04f
   205b8:	4c09b510 	.word	0x4c09b510
   205bc:	21002228 	.word	0x21002228
   205c0:	60234808 	.word	0x60234808
   205c4:	f92ff004 	.word	0xf92ff004
   205c8:	2201f240 	.word	0x2201f240
   205cc:	20662100 	.word	0x20662100
   205d0:	f8cef7f3 	.word	0xf8cef7f3
   205d4:	60202800 	.word	0x60202800
   205d8:	2003bfb4 	.word	0x2003bfb4
   205dc:	bd102000 	.word	0xbd102000
   205e0:	200219e8 	.word	0x200219e8
   205e4:	20021aec 	.word	0x20021aec

000205e8 <pdn_interface_open>:
   205e8:	43f0e92d 	.word	0x43f0e92d
   205ec:	b0832866 	.word	0xb0832866
   205f0:	80bcf040 	.word	0x80bcf040
   205f4:	7f00f5b1 	.word	0x7f00f5b1
   205f8:	80aaf040 	.word	0x80aaf040
   205fc:	2302f240 	.word	0x2302f240
   20600:	f040429a 	.word	0xf040429a
   20604:	4c6280a5 	.word	0x4c6280a5
   20608:	b34d6825 	.word	0xb34d6825
   2060c:	2b006863 	.word	0x2b006863
   20610:	8098f000 	.word	0x8098f000
   20614:	2b0068a3 	.word	0x2b0068a3
   20618:	8096f000 	.word	0x8096f000
   2061c:	2b0068e3 	.word	0x2b0068e3
   20620:	8094f000 	.word	0x8094f000
   20624:	2b006923 	.word	0x2b006923
   20628:	8098f000 	.word	0x8098f000
   2062c:	2b006963 	.word	0x2b006963
   20630:	8098f000 	.word	0x8098f000
   20634:	2b0069a3 	.word	0x2b0069a3
   20638:	8096f000 	.word	0x8096f000
   2063c:	2b0069e3 	.word	0x2b0069e3
   20640:	808ef000 	.word	0x808ef000
   20644:	b1536a23 	.word	0xb1536a23
   20648:	25096a63 	.word	0x25096a63
   2064c:	200cb143 	.word	0x200cb143
   20650:	fd12f7f1 	.word	0xfd12f7f1
   20654:	30fff04f 	.word	0x30fff04f
   20658:	e8bdb003 	.word	0xe8bdb003
   2065c:	250883f0 	.word	0x250883f0
   20660:	f7fe2074 	.word	0xf7fe2074
   20664:	f844ff3f 	.word	0xf844ff3f
   20668:	28000025 	.word	0x28000025
   2066c:	2274d0ef 	.word	0x2274d0ef
   20670:	f0042100 	.word	0xf0042100
   20674:	2101f8d8 	.word	0x2101f8d8
   20678:	f04f2003 	.word	0xf04f2003
   2067c:	f85437ff 	.word	0xf85437ff
   20680:	4a443025 	.word	0x4a443025
   20684:	f8546099 	.word	0xf8546099
   20688:	f44f3025 	.word	0xf44f3025
   2068c:	67187180 	.word	0x67187180
   20690:	4841605f 	.word	0x4841605f
   20694:	810cf8df 	.word	0x810cf8df
   20698:	ffa0f7f0 	.word	0xffa0f7f0
   2069c:	f8d8483e 	.word	0xf8d8483e
   206a0:	26009000 	.word	0x26009000
   206a4:	f863f004 	.word	0xf863f004
   206a8:	46024633 	.word	0x46024633
   206ac:	4648493a 	.word	0x4648493a
   206b0:	96009601 	.word	0x96009601
   206b4:	f806f7f3 	.word	0xf806f7f3
   206b8:	48374681 	.word	0x48374681
   206bc:	f857f004 	.word	0xf857f004
   206c0:	d1594548 	.word	0xd1594548
   206c4:	e9cd4633 	.word	0xe9cd4633
   206c8:	f44f6600 	.word	0xf44f6600
   206cc:	49327280 	.word	0x49327280
   206d0:	0000f8d8 	.word	0x0000f8d8
   206d4:	f8def7f3 	.word	0xf8def7f3
   206d8:	48304606 	.word	0x48304606
   206dc:	f847f004 	.word	0xf847f004
   206e0:	db154286 	.word	0xdb154286
   206e4:	492c4602 	.word	0x492c4602
   206e8:	f004482c 	.word	0xf004482c
   206ec:	b978f853 	.word	0xb978f853
   206f0:	46284929 	.word	0x46284929
   206f4:	ff32f7ff 	.word	0xff32f7ff
   206f8:	2202b9b0 	.word	0x2202b9b0
   206fc:	3025f854 	.word	0x3025f854
   20700:	40f1f045 	.word	0x40f1f045
   20704:	10d0f440 	.word	0x10d0f440
   20708:	b003609a 	.word	0xb003609a
   2070c:	83f0e8bd 	.word	0x83f0e8bd
   20710:	f0044823 	.word	0xf0044823
   20714:	4920f82c 	.word	0x4920f82c
   20718:	48214602 	.word	0x48214602
   2071c:	f83af004 	.word	0xf83af004
   20720:	2008b960 	.word	0x2008b960
   20724:	fca8f7f1 	.word	0xfca8f7f1
   20728:	0025f854 	.word	0x0025f854
   2072c:	fef8f7fe 	.word	0xfef8f7fe
   20730:	f04f2300 	.word	0xf04f2300
   20734:	f84430ff 	.word	0xf84430ff
   20738:	e78d3025 	.word	0xe78d3025
   2073c:	f7f12005 	.word	0xf7f12005
   20740:	e7f1fc9b 	.word	0xe7f1fc9b
   20744:	e78b2501 	.word	0xe78b2501
   20748:	e7892502 	.word	0xe7892502
   2074c:	e7872503 	.word	0xe7872503
   20750:	f7f12016 	.word	0xf7f12016
   20754:	f04ffc91 	.word	0xf04ffc91
   20758:	e77d30ff 	.word	0xe77d30ff
   2075c:	e77f2504 	.word	0xe77f2504
   20760:	e77d2507 	.word	0xe77d2507
   20764:	e77b2505 	.word	0xe77b2505
   20768:	e7792506 	.word	0xe7792506
   2076c:	f7f1202f 	.word	0xf7f1202f
   20770:	f04ffc83 	.word	0xf04ffc83
   20774:	e76f30ff 	.word	0xe76f30ff
   20778:	f7f12005 	.word	0xf7f12005
   2077c:	f854fc7d 	.word	0xf854fc7d
   20780:	f7fe0025 	.word	0xf7fe0025
   20784:	f844fecd 	.word	0xf844fecd
   20788:	46386025 	.word	0x46386025
   2078c:	bf00e764 	.word	0xbf00e764
   20790:	20021aec 	.word	0x20021aec
   20794:	0002780c 	.word	0x0002780c
   20798:	200219ec 	.word	0x200219ec
   2079c:	0002781c 	.word	0x0002781c
   207a0:	00027828 	.word	0x00027828
   207a4:	200219e8 	.word	0x200219e8

000207a8 <pdn_interface_connect>:
   207a8:	4ff0e92d 	.word	0x4ff0e92d
   207ac:	2900b083 	.word	0x2900b083
   207b0:	813ef000 	.word	0x813ef000
   207b4:	46912a64 	.word	0x46912a64
   207b8:	813af200 	.word	0x813af200
   207bc:	46084605 	.word	0x46084605
   207c0:	f0034688 	.word	0xf0034688
   207c4:	2864ffd4 	.word	0x2864ffd4
   207c8:	8132f200 	.word	0x8132f200
   207cc:	43ab4ba5 	.word	0x43ab4ba5
   207d0:	8125f040 	.word	0x8125f040
   207d4:	45f1f025 	.word	0x45f1f025
   207d8:	15d0f425 	.word	0x15d0f425
   207dc:	f3002d09 	.word	0xf3002d09
   207e0:	4fa1811e 	.word	0x4fa1811e
   207e4:	3025f857 	.word	0x3025f857
   207e8:	f0002b00 	.word	0xf0002b00
   207ec:	689a8118 	.word	0x689a8118
   207f0:	f0002a00 	.word	0xf0002a00
   207f4:	2d008114 	.word	0x2d008114
   207f8:	8111f2c0 	.word	0x8111f2c0
   207fc:	2b02689b 	.word	0x2b02689b
   20800:	810df040 	.word	0x810df040
   20804:	4a9a4e99 	.word	0x4a9a4e99
   20808:	7180f44f 	.word	0x7180f44f
   2080c:	f7f04630 	.word	0xf7f04630
   20810:	f857fee5 	.word	0xf857fee5
   20814:	46043025 	.word	0x46043025
   20818:	7180f5c0 	.word	0x7180f5c0
   2081c:	4a95681b 	.word	0x4a95681b
   20820:	f7f01830 	.word	0xf7f01830
   20824:	f857fedb 	.word	0xf857fedb
   20828:	44043025 	.word	0x44043025
   2082c:	f0036f1b 	.word	0xf0036f1b
   20830:	2a030203 	.word	0x2a030203
   20834:	80eaf000 	.word	0x80eaf000
   20838:	eb06079b 	.word	0xeb06079b
   2083c:	f5c40004 	.word	0xf5c40004
   20840:	bf4c7180 	.word	0xbf4c7180
   20844:	4b8d4b8c 	.word	0x4b8d4b8c
   20848:	f7f04a8d 	.word	0xf7f04a8d
   2084c:	4404fec7 	.word	0x4404fec7
   20850:	4a8c4643 	.word	0x4a8c4643
   20854:	7180f5c4 	.word	0x7180f5c4
   20858:	f7f01930 	.word	0xf7f01930
   2085c:	4420febf 	.word	0x4420febf
   20860:	7f80f5b0 	.word	0x7f80f5b0
   20864:	80f7f300 	.word	0x80f7f300
   20868:	a238f8df 	.word	0xa238f8df
   2086c:	f8da487f 	.word	0xf8da487f
   20870:	2400b000 	.word	0x2400b000
   20874:	ff7bf003 	.word	0xff7bf003
   20878:	46024623 	.word	0x46024623
   2087c:	4658497b 	.word	0x4658497b
   20880:	94009401 	.word	0x94009401
   20884:	ff1ef7f2 	.word	0xff1ef7f2
   20888:	48784683 	.word	0x48784683
   2088c:	ff6ff003 	.word	0xff6ff003
   20890:	d0084558 	.word	0xd0084558
   20894:	f7f12005 	.word	0xf7f12005
   20898:	f04ffbef 	.word	0xf04ffbef
   2089c:	462034ff 	.word	0x462034ff
   208a0:	e8bdb003 	.word	0xe8bdb003
   208a4:	46238ff0 	.word	0x46238ff0
   208a8:	4400e9cd 	.word	0x4400e9cd
   208ac:	7280f44f 	.word	0x7280f44f
   208b0:	f8da496e 	.word	0xf8da496e
   208b4:	f7f20000 	.word	0xf7f20000
   208b8:	4604ffed 	.word	0x4604ffed
   208bc:	f0034872 	.word	0xf0034872
   208c0:	4284ff56 	.word	0x4284ff56
   208c4:	8091f2c0 	.word	0x8091f2c0
   208c8:	49684602 	.word	0x49684602
   208cc:	f003486e 	.word	0xf003486e
   208d0:	2800ff61 	.word	0x2800ff61
   208d4:	8089f040 	.word	0x8089f040
   208d8:	46284964 	.word	0x46284964
   208dc:	fddaf7ff 	.word	0xfddaf7ff
   208e0:	28004604 	.word	0x28004604
   208e4:	4a69d1db 	.word	0x4a69d1db
   208e8:	7180f44f 	.word	0x7180f44f
   208ec:	f7f0485f 	.word	0xf7f0485f
   208f0:	f857fe75 	.word	0xf857fe75
   208f4:	f5c03025 	.word	0xf5c03025
   208f8:	681b7180 	.word	0x681b7180
   208fc:	44304a64 	.word	0x44304a64
   20900:	fe6cf7f0 	.word	0xfe6cf7f0
   20904:	f8da4859 	.word	0xf8da4859
   20908:	f003b000 	.word	0xf003b000
   2090c:	4623ff30 	.word	0x4623ff30
   20910:	49564602 	.word	0x49564602
   20914:	94014658 	.word	0x94014658
   20918:	f7f29400 	.word	0xf7f29400
   2091c:	4683fed3 	.word	0x4683fed3
   20920:	f0034852 	.word	0xf0034852
   20924:	4558ff24 	.word	0x4558ff24
   20928:	4623d1b4 	.word	0x4623d1b4
   2092c:	7280f44f 	.word	0x7280f44f
   20930:	f8da494e 	.word	0xf8da494e
   20934:	e9cd0000 	.word	0xe9cd0000
   20938:	f7f24400 	.word	0xf7f24400
   2093c:	4683ffab 	.word	0x4683ffab
   20940:	f0034851 	.word	0xf0034851
   20944:	4583ff14 	.word	0x4583ff14
   20948:	4602db4f 	.word	0x4602db4f
   2094c:	484e4947 	.word	0x484e4947
   20950:	ff20f003 	.word	0xff20f003
   20954:	d1482800 	.word	0xd1482800
   20958:	f8572103 	.word	0xf8572103
   2095c:	464a3025 	.word	0x464a3025
   20960:	f8576099 	.word	0xf8576099
   20964:	46410025 	.word	0x46410025
   20968:	f003300c 	.word	0xf003300c
   2096c:	4a49ff32 	.word	0x4a49ff32
   20970:	7180f44f 	.word	0x7180f44f
   20974:	f7f0483d 	.word	0xf7f0483d
   20978:	4601fe31 	.word	0x4601fe31
   2097c:	3025f857 	.word	0x3025f857
   20980:	7180f5c1 	.word	0x7180f5c1
   20984:	4a42681b 	.word	0x4a42681b
   20988:	f7f01830 	.word	0xf7f01830
   2098c:	4837fe27 	.word	0x4837fe27
   20990:	6000f8da 	.word	0x6000f8da
   20994:	feebf003 	.word	0xfeebf003
   20998:	46024623 	.word	0x46024623
   2099c:	46304933 	.word	0x46304933
   209a0:	94009401 	.word	0x94009401
   209a4:	fe8ef7f2 	.word	0xfe8ef7f2
   209a8:	48304606 	.word	0x48304606
   209ac:	fedff003 	.word	0xfedff003
   209b0:	d15342b0 	.word	0xd15342b0
   209b4:	f44f4623 	.word	0xf44f4623
   209b8:	492c7280 	.word	0x492c7280
   209bc:	0000f8da 	.word	0x0000f8da
   209c0:	4400e9cd 	.word	0x4400e9cd
   209c4:	ff66f7f2 	.word	0xff66f7f2
   209c8:	48334606 	.word	0x48334606
   209cc:	fecff003 	.word	0xfecff003
   209d0:	db334286 	.word	0xdb334286
   209d4:	49254602 	.word	0x49254602
   209d8:	f003482f 	.word	0xf003482f
   209dc:	bb68fedb 	.word	0xbb68fedb
   209e0:	49224628 	.word	0x49224628
   209e4:	fd8ef7ff 	.word	0xfd8ef7ff
   209e8:	482ce759 	.word	0x482ce759
   209ec:	febff003 	.word	0xfebff003
   209f0:	4602491e 	.word	0x4602491e
   209f4:	f0034829 	.word	0xf0034829
   209f8:	2800fecd 	.word	0x2800fecd
   209fc:	af4af47f 	.word	0xaf4af47f
   20a00:	f7f12008 	.word	0xf7f12008
   20a04:	f04ffb39 	.word	0xf04ffb39
   20a08:	e74834ff 	.word	0xe74834ff
   20a0c:	7180f5c4 	.word	0x7180f5c4
   20a10:	4b231930 	.word	0x4b231930
   20a14:	f7f04a1a 	.word	0xf7f04a1a
   20a18:	4404fde1 	.word	0x4404fde1
   20a1c:	f04fe718 	.word	0xf04fe718
   20a20:	200934ff 	.word	0x200934ff
   20a24:	fb28f7f1 	.word	0xfb28f7f1
   20a28:	b0034620 	.word	0xb0034620
   20a2c:	8ff0e8bd 	.word	0x8ff0e8bd
   20a30:	f7f12016 	.word	0xf7f12016
   20a34:	f04ffb21 	.word	0xf04ffb21
   20a38:	e73034ff 	.word	0xe73034ff
   20a3c:	f0034817 	.word	0xf0034817
   20a40:	490afe96 	.word	0x490afe96
   20a44:	48154602 	.word	0x48154602
   20a48:	fea4f003 	.word	0xfea4f003
   20a4c:	2008b930 	.word	0x2008b930
   20a50:	fb12f7f1 	.word	0xfb12f7f1
   20a54:	f04fe723 	.word	0xf04fe723
   20a58:	e72034ff 	.word	0xe72034ff
   20a5c:	f7f12005 	.word	0xf7f12005
   20a60:	e71cfb0b 	.word	0xe71cfb0b
   20a64:	789a0000 	.word	0x789a0000
   20a68:	20021aec 	.word	0x20021aec
   20a6c:	200219ec 	.word	0x200219ec
   20a70:	00027798 	.word	0x00027798
   20a74:	000277a4 	.word	0x000277a4
   20a78:	000277b8 	.word	0x000277b8
   20a7c:	000277c0 	.word	0x000277c0
   20a80:	000277b0 	.word	0x000277b0
   20a84:	000277f0 	.word	0x000277f0
   20a88:	000267b8 	.word	0x000267b8
   20a8c:	000277c4 	.word	0x000277c4
   20a90:	000277d0 	.word	0x000277d0
   20a94:	000277d4 	.word	0x000277d4
   20a98:	000277e4 	.word	0x000277e4
   20a9c:	00027828 	.word	0x00027828
   20aa0:	000277a8 	.word	0x000277a8
   20aa4:	200219e8 	.word	0x200219e8

00020aa8 <pdn_interface_close>:
   20aa8:	43f0e92d 	.word	0x43f0e92d
   20aac:	b0834b63 	.word	0xb0834b63
   20ab0:	f0404383 	.word	0xf0404383
   20ab4:	f020809d 	.word	0xf020809d
   20ab8:	f42444f1 	.word	0xf42444f1
   20abc:	2c0914d0 	.word	0x2c0914d0
   20ac0:	8096f300 	.word	0x8096f300
   20ac4:	f8554d5e 	.word	0xf8554d5e
   20ac8:	28000024 	.word	0x28000024
   20acc:	8090f000 	.word	0x8090f000
   20ad0:	2b006883 	.word	0x2b006883
   20ad4:	808cf000 	.word	0x808cf000
   20ad8:	2b036883 	.word	0x2b036883
   20adc:	f7fed008 	.word	0xf7fed008
   20ae0:	2300fd1f 	.word	0x2300fd1f
   20ae4:	f8454618 	.word	0xf8454618
   20ae8:	b0033024 	.word	0xb0033024
   20aec:	83f0e8bd 	.word	0x83f0e8bd
   20af0:	4a554e54 	.word	0x4a554e54
   20af4:	7180f44f 	.word	0x7180f44f
   20af8:	f7f04630 	.word	0xf7f04630
   20afc:	f855fd6f 	.word	0xf855fd6f
   20b00:	f5c03024 	.word	0xf5c03024
   20b04:	681b7180 	.word	0x681b7180
   20b08:	44304a50 	.word	0x44304a50
   20b0c:	814cf8df 	.word	0x814cf8df
   20b10:	fd64f7f0 	.word	0xfd64f7f0
   20b14:	f8d84630 	.word	0xf8d84630
   20b18:	27009000 	.word	0x27009000
   20b1c:	fe27f003 	.word	0xfe27f003
   20b20:	46024631 	.word	0x46024631
   20b24:	4648463b 	.word	0x4648463b
   20b28:	97009701 	.word	0x97009701
   20b2c:	fdcaf7f2 	.word	0xfdcaf7f2
   20b30:	46304681 	.word	0x46304681
   20b34:	fe1bf003 	.word	0xfe1bf003
   20b38:	d1764548 	.word	0xd1764548
   20b3c:	e9cd463b 	.word	0xe9cd463b
   20b40:	f44f7700 	.word	0xf44f7700
   20b44:	46317280 	.word	0x46317280
   20b48:	0000f8d8 	.word	0x0000f8d8
   20b4c:	fea2f7f2 	.word	0xfea2f7f2
   20b50:	483f4607 	.word	0x483f4607
   20b54:	fe0bf003 	.word	0xfe0bf003
   20b58:	da4f4287 	.word	0xda4f4287
   20b5c:	f003483d 	.word	0xf003483d
   20b60:	4938fe06 	.word	0x4938fe06
   20b64:	483b4602 	.word	0x483b4602
   20b68:	fe14f003 	.word	0xfe14f003
   20b6c:	d15c2800 	.word	0xd15c2800
   20b70:	f7f12008 	.word	0xf7f12008
   20b74:	4a38fa81 	.word	0x4a38fa81
   20b78:	7180f44f 	.word	0x7180f44f
   20b7c:	f7f04831 	.word	0xf7f04831
   20b80:	4601fd2d 	.word	0x4601fd2d
   20b84:	3024f855 	.word	0x3024f855
   20b88:	7180f5c1 	.word	0x7180f5c1
   20b8c:	4a2f681b 	.word	0x4a2f681b
   20b90:	f7f01830 	.word	0xf7f01830
   20b94:	482bfd23 	.word	0x482bfd23
   20b98:	7000f8d8 	.word	0x7000f8d8
   20b9c:	f0032600 	.word	0xf0032600
   20ba0:	4633fde6 	.word	0x4633fde6
   20ba4:	49274602 	.word	0x49274602
   20ba8:	96014638 	.word	0x96014638
   20bac:	f7f29600 	.word	0xf7f29600
   20bb0:	4607fd89 	.word	0x4607fd89
   20bb4:	f0034823 	.word	0xf0034823
   20bb8:	42b8fdda 	.word	0x42b8fdda
   20bbc:	4633d139 	.word	0x4633d139
   20bc0:	6600e9cd 	.word	0x6600e9cd
   20bc4:	7280f44f 	.word	0x7280f44f
   20bc8:	f8d8491e 	.word	0xf8d8491e
   20bcc:	f7f20000 	.word	0xf7f20000
   20bd0:	4606fe61 	.word	0x4606fe61
   20bd4:	f003481e 	.word	0xf003481e
   20bd8:	4286fdca 	.word	0x4286fdca
   20bdc:	4602db16 	.word	0x4602db16
   20be0:	481b4918 	.word	0x481b4918
   20be4:	fdd6f003 	.word	0xfdd6f003
   20be8:	f855b980 	.word	0xf855b980
   20bec:	e7760024 	.word	0xe7760024
   20bf0:	f7f12009 	.word	0xf7f12009
   20bf4:	f04ffa41 	.word	0xf04ffa41
   20bf8:	e77630ff 	.word	0xe77630ff
   20bfc:	46314602 	.word	0x46314602
   20c00:	f0034813 	.word	0xf0034813
   20c04:	2800fdc7 	.word	0x2800fdc7
   20c08:	e7a7d0b5 	.word	0xe7a7d0b5
   20c0c:	f0034811 	.word	0xf0034811
   20c10:	490cfdae 	.word	0x490cfdae
   20c14:	480f4602 	.word	0x480f4602
   20c18:	fdbcf003 	.word	0xfdbcf003
   20c1c:	2008b948 	.word	0x2008b948
   20c20:	fa2af7f1 	.word	0xfa2af7f1
   20c24:	0024f855 	.word	0x0024f855
   20c28:	2005e759 	.word	0x2005e759
   20c2c:	fa24f7f1 	.word	0xfa24f7f1
   20c30:	2005e7a1 	.word	0x2005e7a1
   20c34:	fa20f7f1 	.word	0xfa20f7f1
   20c38:	bf00e7d7 	.word	0xbf00e7d7
   20c3c:	789a0000 	.word	0x789a0000
   20c40:	20021aec 	.word	0x20021aec
   20c44:	200219ec 	.word	0x200219ec
   20c48:	0002778c 	.word	0x0002778c
   20c4c:	000277d0 	.word	0x000277d0
   20c50:	000267b8 	.word	0x000267b8
   20c54:	00027828 	.word	0x00027828
   20c58:	00027798 	.word	0x00027798
   20c5c:	200219e8 	.word	0x200219e8

00020c60 <pdn_interface_setopt>:
   20c60:	f240b510 	.word	0xf240b510
   20c64:	42a12402 	.word	0x42a12402
   20c68:	b153d10b 	.word	0xb153d10b
   20c6c:	b1419902 	.word	0xb1419902
   20c70:	43814925 	.word	0x43814925
   20c74:	2009d00b 	.word	0x2009d00b
   20c78:	f9fef7f1 	.word	0xf9fef7f1
   20c7c:	30fff04f 	.word	0x30fff04f
   20c80:	2016bd10 	.word	0x2016bd10
   20c84:	f9f8f7f1 	.word	0xf9f8f7f1
   20c88:	30fff04f 	.word	0x30fff04f
   20c8c:	f020bd10 	.word	0xf020bd10
   20c90:	f42040f1 	.word	0xf42040f1
   20c94:	280910d0 	.word	0x280910d0
   20c98:	491cdced 	.word	0x491cdced
   20c9c:	1020f851 	.word	0x1020f851
   20ca0:	d0e82900 	.word	0xd0e82900
   20ca4:	2c00688c 	.word	0x2c00688c
   20ca8:	2800d0e5 	.word	0x2800d0e5
   20cac:	2a01dbe3 	.word	0x2a01dbe3
   20cb0:	202dd001 	.word	0x202dd001
   20cb4:	688ae7e6 	.word	0x688ae7e6
   20cb8:	688ab1fa 	.word	0x688ab1fa
   20cbc:	d01c2a03 	.word	0xd01c2a03
   20cc0:	2a04688a 	.word	0x2a04688a
   20cc4:	9a02d019 	.word	0x9a02d019
   20cc8:	1e420890 	.word	0x1e420890
   20ccc:	d8d82a01 	.word	0xd8d82a01
   20cd0:	07929a02 	.word	0x07929a02
   20cd4:	681ad1d5 	.word	0x681ad1d5
   20cd8:	d0102a02 	.word	0xd0102a02
   20cdc:	d1d02a0a 	.word	0xd1d02a0a
   20ce0:	28022202 	.word	0x28022202
   20ce4:	685bd106 	.word	0x685bd106
   20ce8:	d00a2b02 	.word	0xd00a2b02
   20cec:	d1c82b0a 	.word	0xd1c82b0a
   20cf0:	0202f042 	.word	0x0202f042
   20cf4:	2000670a 	.word	0x2000670a
   20cf8:	200ee7c4 	.word	0x200ee7c4
   20cfc:	2201e7c2 	.word	0x2201e7c2
   20d00:	f042e7ef 	.word	0xf042e7ef
   20d04:	e7f50201 	.word	0xe7f50201
   20d08:	789a0000 	.word	0x789a0000
   20d0c:	20021aec 	.word	0x20021aec

00020d10 <pdn_interface_getopt>:
   20d10:	43f0e92d 	.word	0x43f0e92d
   20d14:	2402f240 	.word	0x2402f240
   20d18:	42a1b083 	.word	0x42a1b083
   20d1c:	f0409d0a 	.word	0xf0409d0a
   20d20:	461e80a9 	.word	0x461e80a9
   20d24:	f0002b00 	.word	0xf0002b00
   20d28:	2d0080a5 	.word	0x2d0080a5
   20d2c:	80a2f000 	.word	0x80a2f000
   20d30:	43834b56 	.word	0x43834b56
   20d34:	8084f040 	.word	0x8084f040
   20d38:	44f1f020 	.word	0x44f1f020
   20d3c:	14d0f424 	.word	0x14d0f424
   20d40:	dc7d2c09 	.word	0xdc7d2c09
   20d44:	f8534b52 	.word	0xf8534b52
   20d48:	2b003024 	.word	0x2b003024
   20d4c:	6899d078 	.word	0x6899d078
   20d50:	d0752900 	.word	0xd0752900
   20d54:	db732c00 	.word	0xdb732c00
   20d58:	d00e2a02 	.word	0xd00e2a02
   20d5c:	d0082a03 	.word	0xd0082a03
   20d60:	d0152a01 	.word	0xd0152a01
   20d64:	f7f1202d 	.word	0xf7f1202d
   20d68:	2000f987 	.word	0x2000f987
   20d6c:	e8bdb003 	.word	0xe8bdb003
   20d70:	682b83f0 	.word	0x682b83f0
   20d74:	2016bb23 	.word	0x2016bb23
   20d78:	682ae7f5 	.word	0x682ae7f5
   20d7c:	d0fa2a00 	.word	0xd0fa2a00
   20d80:	20002201 	.word	0x20002201
   20d84:	7033681b 	.word	0x7033681b
   20d88:	b003602a 	.word	0xb003602a
   20d8c:	83f0e8bd 	.word	0x83f0e8bd
   20d90:	2a00689a 	.word	0x2a00689a
   20d94:	689ad052 	.word	0x689ad052
   20d98:	d04f2a04 	.word	0xd04f2a04
   20d9c:	2a07682a 	.word	0x2a07682a
   20da0:	f012d9e9 	.word	0xf012d9e9
   20da4:	d1e60203 	.word	0xd1e60203
   20da8:	07996f1b 	.word	0x07996f1b
   20dac:	2104d45d 	.word	0x2104d45d
   20db0:	d50207db 	.word	0xd50207db
   20db4:	50b32302 	.word	0x50b32302
   20db8:	602a460a 	.word	0x602a460a
   20dbc:	e7d52000 	.word	0xe7d52000
   20dc0:	f44f4a34 	.word	0xf44f4a34
   20dc4:	48347180 	.word	0x48347180
   20dc8:	80d8f8df 	.word	0x80d8f8df
   20dcc:	fc06f7f0 	.word	0xfc06f7f0
   20dd0:	f8d84831 	.word	0xf8d84831
   20dd4:	27009000 	.word	0x27009000
   20dd8:	fcc9f003 	.word	0xfcc9f003
   20ddc:	4602463b 	.word	0x4602463b
   20de0:	4648492d 	.word	0x4648492d
   20de4:	97009701 	.word	0x97009701
   20de8:	fc6cf7f2 	.word	0xfc6cf7f2
   20dec:	482a4681 	.word	0x482a4681
   20df0:	fcbdf003 	.word	0xfcbdf003
   20df4:	d1434548 	.word	0xd1434548
   20df8:	e9cd463b 	.word	0xe9cd463b
   20dfc:	f44f7700 	.word	0xf44f7700
   20e00:	49257280 	.word	0x49257280
   20e04:	0000f8d8 	.word	0x0000f8d8
   20e08:	fd44f7f2 	.word	0xfd44f7f2
   20e0c:	48234607 	.word	0x48234607
   20e10:	fcadf003 	.word	0xfcadf003
   20e14:	db194287 	.word	0xdb194287
   20e18:	491f4602 	.word	0x491f4602
   20e1c:	f003481f 	.word	0xf003481f
   20e20:	4607fcb9 	.word	0x4607fcb9
   20e24:	4620b990 	.word	0x4620b990
   20e28:	f7ff491b 	.word	0xf7ff491b
   20e2c:	2800fb35 	.word	0x2800fb35
   20e30:	2301db99 	.word	0x2301db99
   20e34:	46387030 	.word	0x46387030
   20e38:	e797602b 	.word	0xe797602b
   20e3c:	e792200e 	.word	0xe792200e
   20e40:	f7f12009 	.word	0xf7f12009
   20e44:	f04ff919 	.word	0xf04ff919
   20e48:	e78f30ff 	.word	0xe78f30ff
   20e4c:	f0034814 	.word	0xf0034814
   20e50:	4911fc8e 	.word	0x4911fc8e
   20e54:	48124602 	.word	0x48124602
   20e58:	fc9cf003 	.word	0xfc9cf003
   20e5c:	2008b980 	.word	0x2008b980
   20e60:	f90af7f1 	.word	0xf90af7f1
   20e64:	30fff04f 	.word	0x30fff04f
   20e68:	220ae77d 	.word	0x220ae77d
   20e6c:	60322108 	.word	0x60322108
   20e70:	e79d2204 	.word	0xe79d2204
   20e74:	f7f12016 	.word	0xf7f12016
   20e78:	f04ff8ff 	.word	0xf04ff8ff
   20e7c:	e77530ff 	.word	0xe77530ff
   20e80:	f7f12005 	.word	0xf7f12005
   20e84:	f04ff8f9 	.word	0xf04ff8f9
   20e88:	e76c30ff 	.word	0xe76c30ff
   20e8c:	789a0000 	.word	0x789a0000
   20e90:	20021aec 	.word	0x20021aec
   20e94:	000277f8 	.word	0x000277f8
   20e98:	200219ec 	.word	0x200219ec
   20e9c:	00027804 	.word	0x00027804
   20ea0:	00027828 	.word	0x00027828
   20ea4:	200219e8 	.word	0x200219e8

00020ea8 <pdn_interface_pdn_id_get>:
   20ea8:	f0002900 	.word	0xf0002900
   20eac:	e92d83b9 	.word	0xe92d83b9
   20eb0:	4ca343f0 	.word	0x4ca343f0
   20eb4:	b0832802 	.word	0xb0832802
   20eb8:	6823460d 	.word	0x6823460d
   20ebc:	8094f000 	.word	0x8094f000
   20ec0:	d03f280a 	.word	0xd03f280a
   20ec4:	689bb11b 	.word	0x689bb11b
   20ec8:	f0002b03 	.word	0xf0002b03
   20ecc:	68638127 	.word	0x68638127
   20ed0:	689bb11b 	.word	0x689bb11b
   20ed4:	f0002b03 	.word	0xf0002b03
   20ed8:	68a38110 	.word	0x68a38110
   20edc:	689bb11b 	.word	0x689bb11b
   20ee0:	f0002b03 	.word	0xf0002b03
   20ee4:	68e380f9 	.word	0x68e380f9
   20ee8:	689bb11b 	.word	0x689bb11b
   20eec:	f0002b03 	.word	0xf0002b03
   20ef0:	692380e2 	.word	0x692380e2
   20ef4:	689bb11b 	.word	0x689bb11b
   20ef8:	f0002b03 	.word	0xf0002b03
   20efc:	69638123 	.word	0x69638123
   20f00:	689bb11b 	.word	0x689bb11b
   20f04:	f0002b03 	.word	0xf0002b03
   20f08:	69a38161 	.word	0x69a38161
   20f0c:	689bb11b 	.word	0x689bb11b
   20f10:	f0002b03 	.word	0xf0002b03
   20f14:	69e3814a 	.word	0x69e3814a
   20f18:	689bb11b 	.word	0x689bb11b
   20f1c:	f0002b03 	.word	0xf0002b03
   20f20:	6a238133 	.word	0x6a238133
   20f24:	689bb11b 	.word	0x689bb11b
   20f28:	f0002b03 	.word	0xf0002b03
   20f2c:	6a63811c 	.word	0x6a63811c
   20f30:	689bb11b 	.word	0x689bb11b
   20f34:	f0002b03 	.word	0xf0002b03
   20f38:	f04f80ad 	.word	0xf04f80ad
   20f3c:	b00330ff 	.word	0xb00330ff
   20f40:	83f0e8bd 	.word	0x83f0e8bd
   20f44:	689bb11b 	.word	0x689bb11b
   20f48:	f0002b03 	.word	0xf0002b03
   20f4c:	68638335 	.word	0x68638335
   20f50:	689bb11b 	.word	0x689bb11b
   20f54:	f0002b03 	.word	0xf0002b03
   20f58:	68a382fd 	.word	0x68a382fd
   20f5c:	689bb11b 	.word	0x689bb11b
   20f60:	f0002b03 	.word	0xf0002b03
   20f64:	68e382d5 	.word	0x68e382d5
   20f68:	689eb11b 	.word	0x689eb11b
   20f6c:	f0002e03 	.word	0xf0002e03
   20f70:	692381f0 	.word	0x692381f0
   20f74:	689bb11b 	.word	0x689bb11b
   20f78:	f0002b03 	.word	0xf0002b03
   20f7c:	69638203 	.word	0x69638203
   20f80:	689bb11b 	.word	0x689bb11b
   20f84:	f0002b03 	.word	0xf0002b03
   20f88:	69a38215 	.word	0x69a38215
   20f8c:	689bb11b 	.word	0x689bb11b
   20f90:	f0002b03 	.word	0xf0002b03
   20f94:	69e38227 	.word	0x69e38227
   20f98:	689bb11b 	.word	0x689bb11b
   20f9c:	f0002b03 	.word	0xf0002b03
   20fa0:	6a238239 	.word	0x6a238239
   20fa4:	689bb11b 	.word	0x689bb11b
   20fa8:	f0002b03 	.word	0xf0002b03
   20fac:	6a63824d 	.word	0x6a63824d
   20fb0:	d0c22b00 	.word	0xd0c22b00
   20fb4:	2b03689b 	.word	0x2b03689b
   20fb8:	4628d1bf 	.word	0x4628d1bf
   20fbc:	fbd7f003 	.word	0xfbd7f003
   20fc0:	6a604606 	.word	0x6a604606
   20fc4:	f003300c 	.word	0xf003300c
   20fc8:	42b0fbd2 	.word	0x42b0fbd2
   20fcc:	6a61d1b5 	.word	0x6a61d1b5
   20fd0:	310c4628 	.word	0x310c4628
   20fd4:	fbd2f003 	.word	0xfbd2f003
   20fd8:	d1ae2800 	.word	0xd1ae2800
   20fdc:	6f1a6a63 	.word	0x6f1a6a63
   20fe0:	d5aa0792 	.word	0xd5aa0792
   20fe4:	e11a2609 	.word	0xe11a2609
   20fe8:	689bb11b 	.word	0x689bb11b
   20fec:	f0002b03 	.word	0xf0002b03
   20ff0:	686382fd 	.word	0x686382fd
   20ff4:	689bb11b 	.word	0x689bb11b
   20ff8:	f0002b03 	.word	0xf0002b03
   20ffc:	68a382c5 	.word	0x68a382c5
   21000:	689bb11b 	.word	0x689bb11b
   21004:	f0002b03 	.word	0xf0002b03
   21008:	68e38269 	.word	0x68e38269
   2100c:	689eb11b 	.word	0x689eb11b
   21010:	f0002e03 	.word	0xf0002e03
   21014:	692380ec 	.word	0x692380ec
   21018:	689bb11b 	.word	0x689bb11b
   2101c:	f0002b03 	.word	0xf0002b03
   21020:	6963814a 	.word	0x6963814a
   21024:	689bb11b 	.word	0x689bb11b
   21028:	f0002b03 	.word	0xf0002b03
   2102c:	69a3815e 	.word	0x69a3815e
   21030:	689bb11b 	.word	0x689bb11b
   21034:	f0002b03 	.word	0xf0002b03
   21038:	69e38172 	.word	0x69e38172
   2103c:	689bb11b 	.word	0x689bb11b
   21040:	f0002b03 	.word	0xf0002b03
   21044:	6a23821b 	.word	0x6a23821b
   21048:	689bb11b 	.word	0x689bb11b
   2104c:	f0002b03 	.word	0xf0002b03
   21050:	6a63822d 	.word	0x6a63822d
   21054:	f43f2b00 	.word	0xf43f2b00
   21058:	689baf70 	.word	0x689baf70
   2105c:	f47f2b03 	.word	0xf47f2b03
   21060:	4628af6c 	.word	0x4628af6c
   21064:	fb83f003 	.word	0xfb83f003
   21068:	6a604606 	.word	0x6a604606
   2106c:	f003300c 	.word	0xf003300c
   21070:	4286fb7e 	.word	0x4286fb7e
   21074:	af61f47f 	.word	0xaf61f47f
   21078:	46286a61 	.word	0x46286a61
   2107c:	f003310c 	.word	0xf003310c
   21080:	2800fb7d 	.word	0x2800fb7d
   21084:	af59f47f 	.word	0xaf59f47f
   21088:	6f1a6a63 	.word	0x6f1a6a63
   2108c:	f57f07d2 	.word	0xf57f07d2
   21090:	e7a7af54 	.word	0xe7a7af54
   21094:	f0034628 	.word	0xf0034628
   21098:	4606fb6a 	.word	0x4606fb6a
   2109c:	300c6a60 	.word	0x300c6a60
   210a0:	fb65f003 	.word	0xfb65f003
   210a4:	f47f42b0 	.word	0xf47f42b0
   210a8:	6a61af48 	.word	0x6a61af48
   210ac:	310c4628 	.word	0x310c4628
   210b0:	fb64f003 	.word	0xfb64f003
   210b4:	4628e741 	.word	0x4628e741
   210b8:	fb59f003 	.word	0xfb59f003
   210bc:	68e04606 	.word	0x68e04606
   210c0:	f003300c 	.word	0xf003300c
   210c4:	4286fb54 	.word	0x4286fb54
   210c8:	af13f47f 	.word	0xaf13f47f
   210cc:	462868e1 	.word	0x462868e1
   210d0:	f003310c 	.word	0xf003310c
   210d4:	e70cfb53 	.word	0xe70cfb53
   210d8:	f0034628 	.word	0xf0034628
   210dc:	4606fb48 	.word	0x4606fb48
   210e0:	300c68a0 	.word	0x300c68a0
   210e4:	fb43f003 	.word	0xfb43f003
   210e8:	f47f4286 	.word	0xf47f4286
   210ec:	68a1aefc 	.word	0x68a1aefc
   210f0:	310c4628 	.word	0x310c4628
   210f4:	fb42f003 	.word	0xfb42f003
   210f8:	4628e6f5 	.word	0x4628e6f5
   210fc:	fb37f003 	.word	0xfb37f003
   21100:	68604606 	.word	0x68604606
   21104:	f003300c 	.word	0xf003300c
   21108:	4286fb32 	.word	0x4286fb32
   2110c:	aee5f47f 	.word	0xaee5f47f
   21110:	46286861 	.word	0x46286861
   21114:	f003310c 	.word	0xf003310c
   21118:	e6defb31 	.word	0xe6defb31
   2111c:	f0034608 	.word	0xf0034608
   21120:	4606fb26 	.word	0x4606fb26
   21124:	300c6820 	.word	0x300c6820
   21128:	fb21f003 	.word	0xfb21f003
   2112c:	f47f4286 	.word	0xf47f4286
   21130:	6821aece 	.word	0x6821aece
   21134:	310c4628 	.word	0x310c4628
   21138:	fb20f003 	.word	0xfb20f003
   2113c:	bf00e6c7 	.word	0xbf00e6c7
   21140:	20021aec 	.word	0x20021aec
   21144:	f0034628 	.word	0xf0034628
   21148:	4606fb12 	.word	0x4606fb12
   2114c:	300c6920 	.word	0x300c6920
   21150:	fb0df003 	.word	0xfb0df003
   21154:	f47f4286 	.word	0xf47f4286
   21158:	6921aed2 	.word	0x6921aed2
   2115c:	310c4628 	.word	0x310c4628
   21160:	fb0cf003 	.word	0xfb0cf003
   21164:	4628e6cb 	.word	0x4628e6cb
   21168:	fb01f003 	.word	0xfb01f003
   2116c:	6a204606 	.word	0x6a204606
   21170:	f003300c 	.word	0xf003300c
   21174:	4286fafc 	.word	0x4286fafc
   21178:	aed9f47f 	.word	0xaed9f47f
   2117c:	46286a21 	.word	0x46286a21
   21180:	f003310c 	.word	0xf003310c
   21184:	e6d2fafb 	.word	0xe6d2fafb
   21188:	f0034628 	.word	0xf0034628
   2118c:	4606faf0 	.word	0x4606faf0
   21190:	300c69e0 	.word	0x300c69e0
   21194:	faebf003 	.word	0xfaebf003
   21198:	f47f4286 	.word	0xf47f4286
   2119c:	69e1aec2 	.word	0x69e1aec2
   211a0:	310c4628 	.word	0x310c4628
   211a4:	faeaf003 	.word	0xfaeaf003
   211a8:	4628e6bb 	.word	0x4628e6bb
   211ac:	fadff003 	.word	0xfadff003
   211b0:	69a04606 	.word	0x69a04606
   211b4:	f003300c 	.word	0xf003300c
   211b8:	4286fada 	.word	0x4286fada
   211bc:	aeabf47f 	.word	0xaeabf47f
   211c0:	462869a1 	.word	0x462869a1
   211c4:	f003310c 	.word	0xf003310c
   211c8:	e6a4fad9 	.word	0xe6a4fad9
   211cc:	f0034628 	.word	0xf0034628
   211d0:	4606face 	.word	0x4606face
   211d4:	300c6960 	.word	0x300c6960
   211d8:	fac9f003 	.word	0xfac9f003
   211dc:	f47f4286 	.word	0xf47f4286
   211e0:	6961ae94 	.word	0x6961ae94
   211e4:	310c4628 	.word	0x310c4628
   211e8:	fac8f003 	.word	0xfac8f003
   211ec:	4628e68d 	.word	0x4628e68d
   211f0:	fabdf003 	.word	0xfabdf003
   211f4:	68e04607 	.word	0x68e04607
   211f8:	f003300c 	.word	0xf003300c
   211fc:	4287fab8 	.word	0x4287fab8
   21200:	af09f47f 	.word	0xaf09f47f
   21204:	462868e1 	.word	0x462868e1
   21208:	f003310c 	.word	0xf003310c
   2120c:	2800fab7 	.word	0x2800fab7
   21210:	af01f47f 	.word	0xaf01f47f
   21214:	6f1a68e3 	.word	0x6f1a68e3
   21218:	f57f07d1 	.word	0xf57f07d1
   2121c:	6858aefc 	.word	0x6858aefc
   21220:	f47f1c43 	.word	0xf47f1c43
   21224:	4dc6ae8c 	.word	0x4dc6ae8c
   21228:	f44f4ac6 	.word	0xf44f4ac6
   2122c:	46287180 	.word	0x46287180
   21230:	f9d4f7f0 	.word	0xf9d4f7f0
   21234:	3026f854 	.word	0x3026f854
   21238:	7180f5c0 	.word	0x7180f5c0
   2123c:	4ac2681b 	.word	0x4ac2681b
   21240:	f8df4428 	.word	0xf8df4428
   21244:	f7f0830c 	.word	0xf7f0830c
   21248:	4628f9c9 	.word	0x4628f9c9
   2124c:	9000f8d8 	.word	0x9000f8d8
   21250:	f0032700 	.word	0xf0032700
   21254:	4629fa8c 	.word	0x4629fa8c
   21258:	463b4602 	.word	0x463b4602
   2125c:	97014648 	.word	0x97014648
   21260:	f7f29700 	.word	0xf7f29700
   21264:	4681fa2f 	.word	0x4681fa2f
   21268:	f0034628 	.word	0xf0034628
   2126c:	4548fa80 	.word	0x4548fa80
   21270:	81e9f040 	.word	0x81e9f040
   21274:	f44f463b 	.word	0xf44f463b
   21278:	e9cd7280 	.word	0xe9cd7280
   2127c:	46297700 	.word	0x46297700
   21280:	0000f8d8 	.word	0x0000f8d8
   21284:	fb06f7f2 	.word	0xfb06f7f2
   21288:	48b04607 	.word	0x48b04607
   2128c:	fa6ff003 	.word	0xfa6ff003
   21290:	46024287 	.word	0x46024287
   21294:	81c7f2c0 	.word	0x81c7f2c0
   21298:	48ac4629 	.word	0x48ac4629
   2129c:	fa7af003 	.word	0xfa7af003
   212a0:	f0402800 	.word	0xf0402800
   212a4:	462981c0 	.word	0x462981c0
   212a8:	f7ff4630 	.word	0xf7ff4630
   212ac:	f854f92b 	.word	0xf854f92b
   212b0:	68583026 	.word	0x68583026
   212b4:	4628e643 	.word	0x4628e643
   212b8:	fa59f003 	.word	0xfa59f003
   212bc:	69204606 	.word	0x69204606
   212c0:	f003300c 	.word	0xf003300c
   212c4:	4286fa54 	.word	0x4286fa54
   212c8:	aeabf47f 	.word	0xaeabf47f
   212cc:	46286921 	.word	0x46286921
   212d0:	f003310c 	.word	0xf003310c
   212d4:	2800fa53 	.word	0x2800fa53
   212d8:	aea3f47f 	.word	0xaea3f47f
   212dc:	6f1a6923 	.word	0x6f1a6923
   212e0:	f57f07d2 	.word	0xf57f07d2
   212e4:	2604ae9e 	.word	0x2604ae9e
   212e8:	4628e799 	.word	0x4628e799
   212ec:	fa3ff003 	.word	0xfa3ff003
   212f0:	69604606 	.word	0x69604606
   212f4:	f003300c 	.word	0xf003300c
   212f8:	4286fa3a 	.word	0x4286fa3a
   212fc:	ae97f47f 	.word	0xae97f47f
   21300:	46286961 	.word	0x46286961
   21304:	f003310c 	.word	0xf003310c
   21308:	2800fa39 	.word	0x2800fa39
   2130c:	ae8ff47f 	.word	0xae8ff47f
   21310:	6f1a6963 	.word	0x6f1a6963
   21314:	f57f07d7 	.word	0xf57f07d7
   21318:	2605ae8a 	.word	0x2605ae8a
   2131c:	4628e77f 	.word	0x4628e77f
   21320:	fa25f003 	.word	0xfa25f003
   21324:	69a04606 	.word	0x69a04606
   21328:	f003300c 	.word	0xf003300c
   2132c:	4286fa20 	.word	0x4286fa20
   21330:	ae83f47f 	.word	0xae83f47f
   21334:	462869a1 	.word	0x462869a1
   21338:	f003310c 	.word	0xf003310c
   2133c:	2800fa1f 	.word	0x2800fa1f
   21340:	ae7bf47f 	.word	0xae7bf47f
   21344:	6f1a69a3 	.word	0x6f1a69a3
   21348:	f57f07d6 	.word	0xf57f07d6
   2134c:	2606ae76 	.word	0x2606ae76
   21350:	4628e765 	.word	0x4628e765
   21354:	fa0bf003 	.word	0xfa0bf003
   21358:	68e04607 	.word	0x68e04607
   2135c:	f003300c 	.word	0xf003300c
   21360:	4287fa06 	.word	0x4287fa06
   21364:	ae05f47f 	.word	0xae05f47f
   21368:	462868e1 	.word	0x462868e1
   2136c:	f003310c 	.word	0xf003310c
   21370:	2800fa05 	.word	0x2800fa05
   21374:	adfdf47f 	.word	0xadfdf47f
   21378:	6f1a68e3 	.word	0x6f1a68e3
   2137c:	f53f0791 	.word	0xf53f0791
   21380:	e5f6af4e 	.word	0xe5f6af4e
   21384:	f0034628 	.word	0xf0034628
   21388:	4606f9f2 	.word	0x4606f9f2
   2138c:	300c6920 	.word	0x300c6920
   21390:	f9edf003 	.word	0xf9edf003
   21394:	f47f4286 	.word	0xf47f4286
   21398:	6921adf2 	.word	0x6921adf2
   2139c:	310c4628 	.word	0x310c4628
   213a0:	f9ecf003 	.word	0xf9ecf003
   213a4:	f47f2800 	.word	0xf47f2800
   213a8:	6923adea 	.word	0x6923adea
   213ac:	07926f1a 	.word	0x07926f1a
   213b0:	e5e4d499 	.word	0xe5e4d499
   213b4:	f0034628 	.word	0xf0034628
   213b8:	4606f9da 	.word	0x4606f9da
   213bc:	300c6960 	.word	0x300c6960
   213c0:	f9d5f003 	.word	0xf9d5f003
   213c4:	f47f4286 	.word	0xf47f4286
   213c8:	6961ade0 	.word	0x6961ade0
   213cc:	310c4628 	.word	0x310c4628
   213d0:	f9d4f003 	.word	0xf9d4f003
   213d4:	f47f2800 	.word	0xf47f2800
   213d8:	6963add8 	.word	0x6963add8
   213dc:	07976f1a 	.word	0x07976f1a
   213e0:	e5d2d49b 	.word	0xe5d2d49b
   213e4:	f0034628 	.word	0xf0034628
   213e8:	4606f9c2 	.word	0x4606f9c2
   213ec:	300c69a0 	.word	0x300c69a0
   213f0:	f9bdf003 	.word	0xf9bdf003
   213f4:	f47f4286 	.word	0xf47f4286
   213f8:	69a1adce 	.word	0x69a1adce
   213fc:	310c4628 	.word	0x310c4628
   21400:	f9bcf003 	.word	0xf9bcf003
   21404:	f47f2800 	.word	0xf47f2800
   21408:	69a3adc6 	.word	0x69a3adc6
   2140c:	07966f1a 	.word	0x07966f1a
   21410:	e5c0d49d 	.word	0xe5c0d49d
   21414:	f0034628 	.word	0xf0034628
   21418:	4606f9aa 	.word	0x4606f9aa
   2141c:	300c69e0 	.word	0x300c69e0
   21420:	f9a5f003 	.word	0xf9a5f003
   21424:	f47f4286 	.word	0xf47f4286
   21428:	69e1adbc 	.word	0x69e1adbc
   2142c:	310c4628 	.word	0x310c4628
   21430:	f9a4f003 	.word	0xf9a4f003
   21434:	f47f2800 	.word	0xf47f2800
   21438:	69e3adb4 	.word	0x69e3adb4
   2143c:	07906f1a 	.word	0x07906f1a
   21440:	adaff57f 	.word	0xadaff57f
   21444:	e6ea2607 	.word	0xe6ea2607
   21448:	f0034628 	.word	0xf0034628
   2144c:	4606f990 	.word	0x4606f990
   21450:	300c6a20 	.word	0x300c6a20
   21454:	f98bf003 	.word	0xf98bf003
   21458:	f47f4286 	.word	0xf47f4286
   2145c:	6a21ada8 	.word	0x6a21ada8
   21460:	310c4628 	.word	0x310c4628
   21464:	f98af003 	.word	0xf98af003
   21468:	f47f2800 	.word	0xf47f2800
   2146c:	6a23ada0 	.word	0x6a23ada0
   21470:	07916f1a 	.word	0x07916f1a
   21474:	ad9bf57f 	.word	0xad9bf57f
   21478:	e6d02608 	.word	0xe6d02608
   2147c:	f0034628 	.word	0xf0034628
   21480:	4606f976 	.word	0x4606f976
   21484:	300c69e0 	.word	0x300c69e0
   21488:	f971f003 	.word	0xf971f003
   2148c:	f47f4286 	.word	0xf47f4286
   21490:	69e1adda 	.word	0x69e1adda
   21494:	310c4628 	.word	0x310c4628
   21498:	f970f003 	.word	0xf970f003
   2149c:	f47f2800 	.word	0xf47f2800
   214a0:	69e3add2 	.word	0x69e3add2
   214a4:	07d06f1a 	.word	0x07d06f1a
   214a8:	e5ccd4cc 	.word	0xe5ccd4cc
   214ac:	f0034628 	.word	0xf0034628
   214b0:	4606f95e 	.word	0x4606f95e
   214b4:	300c6a20 	.word	0x300c6a20
   214b8:	f959f003 	.word	0xf959f003
   214bc:	f47f4286 	.word	0xf47f4286
   214c0:	6a21adc8 	.word	0x6a21adc8
   214c4:	310c4628 	.word	0x310c4628
   214c8:	f958f003 	.word	0xf958f003
   214cc:	f47f2800 	.word	0xf47f2800
   214d0:	6a23adc0 	.word	0x6a23adc0
   214d4:	07d16f1a 	.word	0x07d16f1a
   214d8:	e5bad4ce 	.word	0xe5bad4ce
   214dc:	f0034628 	.word	0xf0034628
   214e0:	4606f946 	.word	0x4606f946
   214e4:	300c68a0 	.word	0x300c68a0
   214e8:	f941f003 	.word	0xf941f003
   214ec:	f47f4286 	.word	0xf47f4286
   214f0:	68a1ad8c 	.word	0x68a1ad8c
   214f4:	310c4628 	.word	0x310c4628
   214f8:	f940f003 	.word	0xf940f003
   214fc:	f47f2800 	.word	0xf47f2800
   21500:	68a3ad84 	.word	0x68a3ad84
   21504:	07d06f1a 	.word	0x07d06f1a
   21508:	ad7ff57f 	.word	0xad7ff57f
   2150c:	e6862602 	.word	0xe6862602
   21510:	f0034628 	.word	0xf0034628
   21514:	4606f92c 	.word	0x4606f92c
   21518:	300c68a0 	.word	0x300c68a0
   2151c:	f927f003 	.word	0xf927f003
   21520:	f47f4286 	.word	0xf47f4286
   21524:	68a1ad20 	.word	0x68a1ad20
   21528:	310c4628 	.word	0x310c4628
   2152c:	f926f003 	.word	0xf926f003
   21530:	f47f2800 	.word	0xf47f2800
   21534:	68a3ad18 	.word	0x68a3ad18
   21538:	07906f1a 	.word	0x07906f1a
   2153c:	e512d4e6 	.word	0xe512d4e6
   21540:	200219ec 	.word	0x200219ec
   21544:	000277d4 	.word	0x000277d4
   21548:	000277d0 	.word	0x000277d0
   2154c:	000277e4 	.word	0x000277e4
   21550:	200219e8 	.word	0x200219e8
   21554:	f0034628 	.word	0xf0034628
   21558:	4606f90a 	.word	0x4606f90a
   2155c:	300c6860 	.word	0x300c6860
   21560:	f905f003 	.word	0xf905f003
   21564:	f47f4286 	.word	0xf47f4286
   21568:	6861acf8 	.word	0x6861acf8
   2156c:	310c4628 	.word	0x310c4628
   21570:	f904f003 	.word	0xf904f003
   21574:	f47f2800 	.word	0xf47f2800
   21578:	6863acf0 	.word	0x6863acf0
   2157c:	07966f1a 	.word	0x07966f1a
   21580:	acebf57f 	.word	0xacebf57f
   21584:	e64a2601 	.word	0xe64a2601
   21588:	f0034628 	.word	0xf0034628
   2158c:	4606f8f0 	.word	0x4606f8f0
   21590:	300c6860 	.word	0x300c6860
   21594:	f8ebf003 	.word	0xf8ebf003
   21598:	f47f4286 	.word	0xf47f4286
   2159c:	6861ad30 	.word	0x6861ad30
   215a0:	310c4628 	.word	0x310c4628
   215a4:	f8eaf003 	.word	0xf8eaf003
   215a8:	f47f2800 	.word	0xf47f2800
   215ac:	6863ad28 	.word	0x6863ad28
   215b0:	07d66f1a 	.word	0x07d66f1a
   215b4:	e522d4e6 	.word	0xe522d4e6
   215b8:	f0034608 	.word	0xf0034608
   215bc:	4606f8d8 	.word	0x4606f8d8
   215c0:	300c6820 	.word	0x300c6820
   215c4:	f8d3f003 	.word	0xf8d3f003
   215c8:	f47f4286 	.word	0xf47f4286
   215cc:	6821acc0 	.word	0x6821acc0
   215d0:	310c4628 	.word	0x310c4628
   215d4:	f8d2f003 	.word	0xf8d2f003
   215d8:	28004606 	.word	0x28004606
   215dc:	acb7f47f 	.word	0xacb7f47f
   215e0:	6f1a6823 	.word	0x6f1a6823
   215e4:	f53f0797 	.word	0xf53f0797
   215e8:	e4b0ae1a 	.word	0xe4b0ae1a
   215ec:	f0034608 	.word	0xf0034608
   215f0:	4606f8be 	.word	0x4606f8be
   215f4:	300c6820 	.word	0x300c6820
   215f8:	f8b9f003 	.word	0xf8b9f003
   215fc:	f47f4286 	.word	0xf47f4286
   21600:	6821acf8 	.word	0x6821acf8
   21604:	310c4628 	.word	0x310c4628
   21608:	f8b8f003 	.word	0xf8b8f003
   2160c:	28004606 	.word	0x28004606
   21610:	aceff47f 	.word	0xaceff47f
   21614:	6f1a6823 	.word	0x6f1a6823
   21618:	f53f07d7 	.word	0xf53f07d7
   2161c:	e4e8ae00 	.word	0xe4e8ae00
   21620:	30fff04f 	.word	0x30fff04f
   21624:	480b4770 	.word	0x480b4770
   21628:	f8a1f003 	.word	0xf8a1f003
   2162c:	4602490a 	.word	0x4602490a
   21630:	f0034808 	.word	0xf0034808
   21634:	b930f8af 	.word	0xb930f8af
   21638:	f7f02008 	.word	0xf7f02008
   2163c:	f854fd1d 	.word	0xf854fd1d
   21640:	68583026 	.word	0x68583026
   21644:	2005e47b 	.word	0x2005e47b
   21648:	fd16f7f0 	.word	0xfd16f7f0
   2164c:	3026f854 	.word	0x3026f854
   21650:	e4746858 	.word	0xe4746858
   21654:	00027828 	.word	0x00027828
   21658:	200219ec 	.word	0x200219ec

0002165c <bsd_platform_getaddrinfo>:
   2165c:	be04f7f7 	.word	0xbe04f7f7

00021660 <bsd_platform_freeaddrinfo>:
   21660:	bef8f7f7 	.word	0xbef8f7f7

00021664 <bsd_platform_poll>:
   21664:	43f0e92d 	.word	0x43f0e92d
   21668:	72e2ea42 	.word	0x72e2ea42
   2166c:	9200b083 	.word	0x9200b083
   21670:	d0482800 	.word	0xd0482800
   21674:	2b071e4b 	.word	0x2b071e4b
   21678:	4680d845 	.word	0x4680d845
   2167c:	24004605 	.word	0x24004605
   21680:	07c1eb00 	.word	0x07c1eb00
   21684:	682888ab 	.word	0x682888ab
   21688:	0303f003 	.word	0x0303f003
   2168c:	f043a901 	.word	0xf043a901
   21690:	f7f6061c 	.word	0xf7f6061c
   21694:	9b01fd1f 	.word	0x9b01fd1f
   21698:	40333508 	.word	0x40333508
   2169c:	3c02f825 	.word	0x3c02f825
   216a0:	3401b103 	.word	0x3401b103
   216a4:	d1ed42af 	.word	0xd1ed42af
   216a8:	4669bb9c 	.word	0x4669bb9c
   216ac:	f7f04640 	.word	0xf7f04640
   216b0:	4607fc4f 	.word	0x4607fc4f
   216b4:	283cb108 	.word	0x283cb108
   216b8:	46c1d11d 	.word	0x46c1d11d
   216bc:	f8b92600 	.word	0xf8b92600
   216c0:	f8d93004 	.word	0xf8d93004
   216c4:	f0030000 	.word	0xf0030000
   216c8:	a9010303 	.word	0xa9010303
   216cc:	041cf043 	.word	0x041cf043
   216d0:	fd00f7f6 	.word	0xfd00f7f6
   216d4:	f1099b01 	.word	0xf1099b01
   216d8:	40230908 	.word	0x40230908
   216dc:	3c02f829 	.word	0x3c02f829
   216e0:	3601b103 	.word	0x3601b103
   216e4:	d1ea454d 	.word	0xd1ea454d
   216e8:	2f00b90e 	.word	0x2f00b90e
   216ec:	4630d0dd 	.word	0x4630d0dd
   216f0:	e8bdb003 	.word	0xe8bdb003
   216f4:	202383f0 	.word	0x202383f0
   216f8:	fcbef7f0 	.word	0xfcbef7f0
   216fc:	30fff04f 	.word	0x30fff04f
   21700:	e8bdb003 	.word	0xe8bdb003
   21704:	201683f0 	.word	0x201683f0
   21708:	fcb6f7f0 	.word	0xfcb6f7f0
   2170c:	30fff04f 	.word	0x30fff04f
   21710:	4620e7ee 	.word	0x4620e7ee
   21714:	bf00e7ec 	.word	0xbf00e7ec

00021718 <bsd_platform_fcntl>:
   21718:	4b06b508 	.word	0x4b06b508
   2171c:	d0034383 	.word	0xd0034383
   21720:	4008e8bd 	.word	0x4008e8bd
   21724:	bd54f7f6 	.word	0xbd54f7f6
   21728:	f7f0202d 	.word	0xf7f0202d
   2172c:	f04ffca5 	.word	0xf04ffca5
   21730:	bd0830ff 	.word	0xbd0830ff
   21734:	49765432 	.word	0x49765432

00021738 <stream_handler_init>:
   21738:	4604b510 	.word	0x4604b510
   2173c:	f7fd200c 	.word	0xf7fd200c
   21740:	60e0fed1 	.word	0x60e0fed1
   21744:	2300b128 	.word	0x2300b128
   21748:	e8bd6123 	.word	0xe8bd6123
   2174c:	f7f84010 	.word	0xf7f84010
   21750:	2004ba1b 	.word	0x2004ba1b
   21754:	bf00bd10 	.word	0xbf00bd10

00021758 <stream_handler_put>:
   21758:	4606b570 	.word	0x4606b570
   2175c:	460d2014 	.word	0x460d2014
   21760:	fec0f7fd 	.word	0xfec0f7fd
   21764:	682bb178 	.word	0x682bb178
   21768:	60434604 	.word	0x60434604
   2176c:	4601686b 	.word	0x4601686b
   21770:	68eb6083 	.word	0x68eb6083
   21774:	68ab60c3 	.word	0x68ab60c3
   21778:	68f06103 	.word	0x68f06103
   2177c:	fa0ef7f8 	.word	0xfa0ef7f8
   21780:	6868b920 	.word	0x6868b920
   21784:	f04fbd70 	.word	0xf04fbd70
   21788:	bd7030ff 	.word	0xbd7030ff
   2178c:	f7fd4620 	.word	0xf7fd4620
   21790:	f04ffec7 	.word	0xf04ffec7
   21794:	bd7030ff 	.word	0xbd7030ff

00021798 <stream_handler_get>:
   21798:	4ff0e92d 	.word	0x4ff0e92d
   2179c:	b0874682 	.word	0xb0874682
   217a0:	468968c0 	.word	0x468968c0
   217a4:	f7f84693 	.word	0xf7f84693
   217a8:	2800fa19 	.word	0x2800fa19
   217ac:	4605d072 	.word	0x4605d072
   217b0:	0008f8d9 	.word	0x0008f8d9
   217b4:	692bb120 	.word	0x692bb120
   217b8:	68eab113 	.word	0x68eab113
   217bc:	d15c2a00 	.word	0xd15c2a00
   217c0:	f8c92300 	.word	0xf8c92300
   217c4:	f8d9300c 	.word	0xf8d9300c
   217c8:	f8d92000 	.word	0xf8d92000
   217cc:	f8da8004 	.word	0xf8da8004
   217d0:	92011010 	.word	0x92011010
   217d4:	0f00f1b8 	.word	0x0f00f1b8
   217d8:	f00bd05a 	.word	0xf00bd05a
   217dc:	24000308 	.word	0x24000308
   217e0:	e0109300 	.word	0xe0109300
   217e4:	3010f8da 	.word	0x3010f8da
   217e8:	f8ca443b 	.word	0xf8ca443b
   217ec:	46283010 	.word	0x46283010
   217f0:	f9fcf7f8 	.word	0xf9fcf7f8
   217f4:	4605443c 	.word	0x4605443c
   217f8:	d0382800 	.word	0xd0382800
   217fc:	d93645a0 	.word	0xd93645a0
   21800:	f8d92100 	.word	0xf8d92100
   21804:	68ae2000 	.word	0x68ae2000
   21808:	0b04eba8 	.word	0x0b04eba8
   2180c:	455e1a76 	.word	0x455e1a76
   21810:	bf284637 	.word	0xbf284637
   21814:	b132465f 	.word	0xb132465f
   21818:	9b016868 	.word	0x9b016868
   2181c:	463a4401 	.word	0x463a4401
   21820:	f0021918 	.word	0xf0021918
   21824:	9b00ffd6 	.word	0x9b00ffd6
   21828:	d1e02b00 	.word	0xd1e02b00
   2182c:	d8d9455e 	.word	0xd8d9455e
   21830:	000cf8da 	.word	0x000cf8da
   21834:	f9c8f7f8 	.word	0xf9c8f7f8
   21838:	b1704606 	.word	0xb1704606
   2183c:	2301e9d0 	.word	0x2301e9d0
   21840:	0103e9d0 	.word	0x0103e9d0
   21844:	2302e9cd 	.word	0x2302e9cd
   21848:	1004e9cd 	.word	0x1004e9cd
   2184c:	3101e9da 	.word	0x3101e9da
   21850:	4798a802 	.word	0x4798a802
   21854:	f7fd4630 	.word	0xf7fd4630
   21858:	2300fe63 	.word	0x2300fe63
   2185c:	f8ca4628 	.word	0xf8ca4628
   21860:	f7f83010 	.word	0xf7f83010
   21864:	443cf9c3 	.word	0x443cf9c3
   21868:	28004605 	.word	0x28004605
   2186c:	4620d1c6 	.word	0x4620d1c6
   21870:	4004f8c9 	.word	0x4004f8c9
   21874:	e8bdb007 	.word	0xe8bdb007
   21878:	f8d98ff0 	.word	0xf8d98ff0
   2187c:	429a300c 	.word	0x429a300c
   21880:	461abf28 	.word	0x461abf28
   21884:	200cf8c9 	.word	0x200cf8c9
   21888:	f0026929 	.word	0xf0026929
   2188c:	e79affa2 	.word	0xe79affa2
   21890:	e7ec4644 	.word	0xe7ec4644
   21894:	30fff04f 	.word	0x30fff04f
   21898:	bf00e7ec 	.word	0xbf00e7ec

0002189c <stream_handler_available>:
   2189c:	4604b510 	.word	0x4604b510
   218a0:	f7f868c0 	.word	0xf7f868c0
   218a4:	b150f99b 	.word	0xb150f99b
   218a8:	42646924 	.word	0x42646924
   218ac:	441c6883 	.word	0x441c6883
   218b0:	f99cf7f8 	.word	0xf99cf7f8
   218b4:	d1f92800 	.word	0xd1f92800
   218b8:	70e4ea24 	.word	0x70e4ea24
   218bc:	f04fbd10 	.word	0xf04fbd10
   218c0:	bd1030ff 	.word	0xbd1030ff

000218c4 <stream_handler_flush>:
   218c4:	4605b530 	.word	0x4605b530
   218c8:	b08568c0 	.word	0xb08568c0
   218cc:	e01ab9a8 	.word	0xe01ab9a8
   218d0:	f7f868e8 	.word	0xf7f868e8
   218d4:	4604f979 	.word	0x4604f979
   218d8:	e9d0b170 	.word	0xe9d0b170
   218dc:	e9d40101 	.word	0xe9d40101
   218e0:	e9cd3203 	.word	0xe9cd3203
   218e4:	e9cd0100 	.word	0xe9cd0100
   218e8:	e9d52302 	.word	0xe9d52302
   218ec:	46683101 	.word	0x46683101
   218f0:	46204798 	.word	0x46204798
   218f4:	fe14f7fd 	.word	0xfe14f7fd
   218f8:	f7f868e8 	.word	0xf7f868e8
   218fc:	2800f975 	.word	0x2800f975
   21900:	b005d1e6 	.word	0xb005d1e6
   21904:	2008bd30 	.word	0x2008bd30
   21908:	bd30b005 	.word	0xbd30b005

0002190c <stream_handler_free>:
   2190c:	4605b530 	.word	0x4605b530
   21910:	b08568c0 	.word	0xb08568c0
   21914:	e01cb9a0 	.word	0xe01cb9a0
   21918:	f956f7f8 	.word	0xf956f7f8
   2191c:	b1704604 	.word	0xb1704604
   21920:	0101e9d0 	.word	0x0101e9d0
   21924:	3203e9d4 	.word	0x3203e9d4
   21928:	0100e9cd 	.word	0x0100e9cd
   2192c:	2302e9cd 	.word	0x2302e9cd
   21930:	3101e9d5 	.word	0x3101e9d5
   21934:	47984668 	.word	0x47984668
   21938:	f7fd4620 	.word	0xf7fd4620
   2193c:	68e8fdf1 	.word	0x68e8fdf1
   21940:	f952f7f8 	.word	0xf952f7f8
   21944:	68e84604 	.word	0x68e84604
   21948:	d1e52c00 	.word	0xd1e52c00
   2194c:	fde8f7fd 	.word	0xfde8f7fd
   21950:	b00560ec 	.word	0xb00560ec
   21954:	bf00bd30 	.word	0xbf00bd30

00021958 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   21958:	4a07      	ldr	r2, [pc, #28]	; (21978 <SystemInit+0x20>)
   2195a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   2195e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   21962:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   21966:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2196a:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   2196e:	4b03      	ldr	r3, [pc, #12]	; (2197c <SystemInit+0x24>)
   21970:	4a03      	ldr	r2, [pc, #12]	; (21980 <SystemInit+0x28>)
   21972:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   21974:	4770      	bx	lr
   21976:	bf00      	nop
   21978:	e000ed00 	.word	0xe000ed00
   2197c:	2002d458 	.word	0x2002d458
   21980:	03d09000 	.word	0x03d09000

00021984 <nrfx_uarte_init>:
}

nrfx_err_t nrfx_uarte_init(nrfx_uarte_t const *        p_instance,
                           nrfx_uarte_config_t const * p_config,
                           nrfx_uarte_event_handler_t  event_handler)
{
   21984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21988:	4606      	mov	r6, r0
    NRFX_ASSERT(p_config);
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2198a:	7904      	ldrb	r4, [r0, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2198c:	2024      	movs	r0, #36	; 0x24
   2198e:	4d42      	ldr	r5, [pc, #264]	; (21a98 <nrfx_uarte_init+0x114>)
   21990:	fb00 5004 	mla	r0, r0, r4, r5
   21994:	f890 0020 	ldrb.w	r0, [r0, #32]
   21998:	2800      	cmp	r0, #0
   2199a:	d17a      	bne.n	21a92 <nrfx_uarte_init+0x10e>
    if (p_config->pseltxd != NRF_UARTE_PSEL_DISCONNECTED)
   2199c:	680f      	ldr	r7, [r1, #0]
   2199e:	1c7b      	adds	r3, r7, #1
   219a0:	d009      	beq.n	219b6 <nrfx_uarte_init+0x32>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   219a2:	2301      	movs	r3, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   219a4:	f04f 0c03 	mov.w	ip, #3
    p_reg->OUTSET = set_mask;
   219a8:	483c      	ldr	r0, [pc, #240]	; (21a9c <nrfx_uarte_init+0x118>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   219aa:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   219ac:	6083      	str	r3, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   219ae:	f107 0380 	add.w	r3, r7, #128	; 0x80
   219b2:	f840 c023 	str.w	ip, [r0, r3, lsl #2]
    if (p_config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED)
   219b6:	f8d1 c004 	ldr.w	ip, [r1, #4]
                    | (uint32_t)p_cfg->hwfc;
   219ba:	f891 801b 	ldrb.w	r8, [r1, #27]
   219be:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
   219c2:	bf1f      	itttt	ne
   219c4:	f04f 0e00 	movne.w	lr, #0
   219c8:	4834      	ldrne	r0, [pc, #208]	; (21a9c <nrfx_uarte_init+0x118>)
   219ca:	f10c 0380 	addne.w	r3, ip, #128	; 0x80
   219ce:	f840 e023 	strne.w	lr, [r0, r3, lsl #2]
    nrf_uarte_baudrate_set(p_instance->p_reg, p_config->baudrate);
   219d2:	6948      	ldr	r0, [r1, #20]
   219d4:	6833      	ldr	r3, [r6, #0]
   219d6:	f891 e019 	ldrb.w	lr, [r1, #25]
    p_reg->BAUDRATE = baudrate;
   219da:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   219de:	7e88      	ldrb	r0, [r1, #26]
    if (p_config->hal_cfg.hwfc == NRF_UARTE_HWFC_ENABLED)
   219e0:	f1be 0f01 	cmp.w	lr, #1
   219e4:	ea40 0008 	orr.w	r0, r0, r8
   219e8:	ea4e 0000 	orr.w	r0, lr, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   219ec:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->PSEL.TXD = pseltxd;
   219f0:	f8c3 750c 	str.w	r7, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   219f4:	f8c3 c514 	str.w	ip, [r3, #1300]	; 0x514
   219f8:	d120      	bne.n	21a3c <nrfx_uarte_init+0xb8>
        if (p_config->pselcts != NRF_UARTE_PSEL_DISCONNECTED)
   219fa:	688f      	ldr	r7, [r1, #8]
   219fc:	1c78      	adds	r0, r7, #1
   219fe:	bf1f      	itttt	ne
   21a00:	f04f 0e00 	movne.w	lr, #0
   21a04:	f8df c094 	ldrne.w	ip, [pc, #148]	; 21a9c <nrfx_uarte_init+0x118>
   21a08:	f107 0080 	addne.w	r0, r7, #128	; 0x80
   21a0c:	f84c e020 	strne.w	lr, [ip, r0, lsl #2]
        if (p_config->pselrts != NRF_UARTE_PSEL_DISCONNECTED)
   21a10:	68c8      	ldr	r0, [r1, #12]
   21a12:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   21a16:	d00d      	beq.n	21a34 <nrfx_uarte_init+0xb0>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21a18:	f04f 0c01 	mov.w	ip, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   21a1c:	f04f 0803 	mov.w	r8, #3
    p_reg->OUTSET = set_mask;
   21a20:	f8df e078 	ldr.w	lr, [pc, #120]	; 21a9c <nrfx_uarte_init+0x118>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21a24:	fa0c fc00 	lsl.w	ip, ip, r0
    p_reg->OUTSET = set_mask;
   21a28:	f8ce c008 	str.w	ip, [lr, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   21a2c:	f100 0c80 	add.w	ip, r0, #128	; 0x80
   21a30:	f84e 802c 	str.w	r8, [lr, ip, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   21a34:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   21a38:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    apply_config(p_instance, p_config);

    p_cb->handler   = event_handler;
   21a3c:	2324      	movs	r3, #36	; 0x24
   21a3e:	4363      	muls	r3, r4
    p_cb->p_context = p_config->p_context;
   21a40:	6909      	ldr	r1, [r1, #16]
    p_cb->handler   = event_handler;
   21a42:	18e8      	adds	r0, r5, r3
   21a44:	6042      	str	r2, [r0, #4]
    p_cb->p_context = p_config->p_context;
   21a46:	50e9      	str	r1, [r5, r3]

    if (p_cb->handler)
   21a48:	b192      	cbz	r2, 21a70 <nrfx_uarte_init+0xec>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21a4a:	2300      	movs	r3, #0
    {
        interrupts_enable(p_instance, p_config->interrupt_priority);
   21a4c:	6830      	ldr	r0, [r6, #0]
   21a4e:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
   21a52:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   21a56:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   21a5a:	f8c0 3144 	str.w	r3, [r0, #324]	; 0x144
   21a5e:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
    p_reg->INTENSET = mask;
   21a62:	4b0f      	ldr	r3, [pc, #60]	; (21aa0 <nrfx_uarte_init+0x11c>)
   21a64:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    NRFX_IRQ_ENABLE(nrfx_get_irq_number((void *)p_instance->p_reg));
   21a68:	f340 3007 	sbfx	r0, r0, #12, #8
   21a6c:	f7ee fa5e 	bl	ff2c <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   21a70:	2208      	movs	r2, #8
    }

    nrf_uarte_enable(p_instance->p_reg);
   21a72:	6833      	ldr	r3, [r6, #0]
    p_cb->tx_buffer_length           = 0;
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   21a74:	480b      	ldr	r0, [pc, #44]	; (21aa4 <nrfx_uarte_init+0x120>)
   21a76:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->rx_buffer_length           = 0;
   21a7a:	2324      	movs	r3, #36	; 0x24
   21a7c:	2200      	movs	r2, #0
   21a7e:	fb03 5304 	mla	r3, r3, r4, r5
    p_cb->rx_secondary_buffer_length = 0;
   21a82:	e9c3 2206 	strd	r2, r2, [r3, #24]
    p_cb->tx_buffer_length           = 0;
   21a86:	615a      	str	r2, [r3, #20]
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
   21a88:	2201      	movs	r2, #1
   21a8a:	f883 2020 	strb.w	r2, [r3, #32]
}
   21a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
   21a92:	4805      	ldr	r0, [pc, #20]	; (21aa8 <nrfx_uarte_init+0x124>)
   21a94:	e7fb      	b.n	21a8e <nrfx_uarte_init+0x10a>
   21a96:	bf00      	nop
   21a98:	20021b14 	.word	0x20021b14
   21a9c:	40842500 	.word	0x40842500
   21aa0:	00420310 	.word	0x00420310
   21aa4:	0bad0000 	.word	0x0bad0000
   21aa8:	0bad0005 	.word	0x0bad0005

00021aac <nrfx_uarte_tx>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   21aac:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000

    nrfx_err_t err_code;

    // EasyDMA requires that transfer buffers are placed in DataRAM,
    // signal error if the are not.
    if (!nrfx_is_in_ram(p_data))
   21ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
   21ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!nrfx_is_in_ram(p_data))
   21ab6:	d12e      	bne.n	21b16 <nrfx_uarte_tx+0x6a>
    return err_code;
}

bool nrfx_uarte_tx_in_progress(nrfx_uarte_t const * p_instance)
{
    return (m_cb[p_instance->drv_inst_idx].tx_buffer_length != 0);
   21ab8:	2424      	movs	r4, #36	; 0x24
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   21aba:	7905      	ldrb	r5, [r0, #4]
    return (m_cb[p_instance->drv_inst_idx].tx_buffer_length != 0);
   21abc:	4f19      	ldr	r7, [pc, #100]	; (21b24 <nrfx_uarte_tx+0x78>)
   21abe:	fb04 7405 	mla	r4, r4, r5, r7
   21ac2:	6966      	ldr	r6, [r4, #20]
    if (nrfx_uarte_tx_in_progress(p_instance))
   21ac4:	bb4e      	cbnz	r6, 21b1a <nrfx_uarte_tx+0x6e>
    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_ENDTX);
   21ac6:	6803      	ldr	r3, [r0, #0]
    p_cb->tx_buffer_length = length;
   21ac8:	6162      	str	r2, [r4, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21aca:	f8c3 6120 	str.w	r6, [r3, #288]	; 0x120
   21ace:	f8c3 6158 	str.w	r6, [r3, #344]	; 0x158
    nrf_uarte_tx_buffer_set(p_instance->p_reg, p_cb->p_tx_buffer, p_cb->tx_buffer_length);
   21ad2:	6962      	ldr	r2, [r4, #20]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   21ad4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   21ad8:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21adc:	2201      	movs	r2, #1
    p_cb->p_tx_buffer      = p_data;
   21ade:	60a1      	str	r1, [r4, #8]
   21ae0:	609a      	str	r2, [r3, #8]
    if (p_cb->handler == NULL)
   21ae2:	6862      	ldr	r2, [r4, #4]
   21ae4:	b9da      	cbnz	r2, 21b1e <nrfx_uarte_tx+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21ae6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   21aea:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
        while ((!endtx) && (!txstopped));
   21aee:	b919      	cbnz	r1, 21af8 <nrfx_uarte_tx+0x4c>
   21af0:	2a00      	cmp	r2, #0
   21af2:	d0f8      	beq.n	21ae6 <nrfx_uarte_tx+0x3a>
            err_code = NRFX_ERROR_FORBIDDEN;
   21af4:	480c      	ldr	r0, [pc, #48]	; (21b28 <nrfx_uarte_tx+0x7c>)
   21af6:	e008      	b.n	21b0a <nrfx_uarte_tx+0x5e>
        if (txstopped)
   21af8:	2a00      	cmp	r2, #0
   21afa:	d1fb      	bne.n	21af4 <nrfx_uarte_tx+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21afc:	2201      	movs	r2, #1
   21afe:	60da      	str	r2, [r3, #12]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21b00:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
            while (!nrf_uarte_event_check(p_instance->p_reg, NRF_UARTE_EVENT_TXSTOPPED))
   21b04:	2a00      	cmp	r2, #0
   21b06:	d0fb      	beq.n	21b00 <nrfx_uarte_tx+0x54>
    err_code = NRFX_SUCCESS;
   21b08:	4808      	ldr	r0, [pc, #32]	; (21b2c <nrfx_uarte_tx+0x80>)
        p_cb->tx_buffer_length = 0;
   21b0a:	2324      	movs	r3, #36	; 0x24
   21b0c:	fb03 7505 	mla	r5, r3, r5, r7
   21b10:	2300      	movs	r3, #0
   21b12:	616b      	str	r3, [r5, #20]
}
   21b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return err_code;
   21b16:	4806      	ldr	r0, [pc, #24]	; (21b30 <nrfx_uarte_tx+0x84>)
   21b18:	e7fc      	b.n	21b14 <nrfx_uarte_tx+0x68>
        return err_code;
   21b1a:	4806      	ldr	r0, [pc, #24]	; (21b34 <nrfx_uarte_tx+0x88>)
   21b1c:	e7fa      	b.n	21b14 <nrfx_uarte_tx+0x68>
    err_code = NRFX_SUCCESS;
   21b1e:	4803      	ldr	r0, [pc, #12]	; (21b2c <nrfx_uarte_tx+0x80>)
   21b20:	e7f8      	b.n	21b14 <nrfx_uarte_tx+0x68>
   21b22:	bf00      	nop
   21b24:	20021b14 	.word	0x20021b14
   21b28:	0bad0008 	.word	0x0bad0008
   21b2c:	0bad0000 	.word	0x0bad0000
   21b30:	0bad000a 	.word	0x0bad000a
   21b34:	0bad000b 	.word	0x0bad000b

00021b38 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   21b38:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   21b3a:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   21b3c:	4b08      	ldr	r3, [pc, #32]	; (21b60 <z_sys_device_do_config_level+0x28>)
   21b3e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   21b42:	3001      	adds	r0, #1
   21b44:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   21b48:	42a5      	cmp	r5, r4
   21b4a:	d800      	bhi.n	21b4e <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   21b4c:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   21b4e:	6823      	ldr	r3, [r4, #0]
   21b50:	4620      	mov	r0, r4
   21b52:	685b      	ldr	r3, [r3, #4]
   21b54:	4798      	blx	r3
		if (retval != 0) {
   21b56:	b100      	cbz	r0, 21b5a <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   21b58:	6066      	str	r6, [r4, #4]
								info++) {
   21b5a:	340c      	adds	r4, #12
   21b5c:	e7f4      	b.n	21b48 <z_sys_device_do_config_level+0x10>
   21b5e:	bf00      	nop
   21b60:	0002783c 	.word	0x0002783c

00021b64 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   21b64:	4b10      	ldr	r3, [pc, #64]	; (21ba8 <z_impl_device_get_binding+0x44>)
{
   21b66:	b570      	push	{r4, r5, r6, lr}
   21b68:	4605      	mov	r5, r0
   21b6a:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   21b6c:	4c0f      	ldr	r4, [pc, #60]	; (21bac <z_impl_device_get_binding+0x48>)
   21b6e:	429c      	cmp	r4, r3
   21b70:	d104      	bne.n	21b7c <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   21b72:	4c0e      	ldr	r4, [pc, #56]	; (21bac <z_impl_device_get_binding+0x48>)
   21b74:	42b4      	cmp	r4, r6
   21b76:	d109      	bne.n	21b8c <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   21b78:	2400      	movs	r4, #0
   21b7a:	e012      	b.n	21ba2 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   21b7c:	6862      	ldr	r2, [r4, #4]
   21b7e:	b11a      	cbz	r2, 21b88 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   21b80:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   21b82:	6812      	ldr	r2, [r2, #0]
   21b84:	42aa      	cmp	r2, r5
   21b86:	d00c      	beq.n	21ba2 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   21b88:	340c      	adds	r4, #12
   21b8a:	e7f0      	b.n	21b6e <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   21b8c:	6863      	ldr	r3, [r4, #4]
   21b8e:	b90b      	cbnz	r3, 21b94 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   21b90:	340c      	adds	r4, #12
   21b92:	e7ef      	b.n	21b74 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   21b94:	6823      	ldr	r3, [r4, #0]
   21b96:	4628      	mov	r0, r5
   21b98:	6819      	ldr	r1, [r3, #0]
   21b9a:	f002 fdef 	bl	2477c <strcmp>
   21b9e:	2800      	cmp	r0, #0
   21ba0:	d1f6      	bne.n	21b90 <z_impl_device_get_binding+0x2c>
}
   21ba2:	4620      	mov	r0, r4
   21ba4:	bd70      	pop	{r4, r5, r6, pc}
   21ba6:	bf00      	nop
   21ba8:	2002d548 	.word	0x2002d548
   21bac:	2002d464 	.word	0x2002d464

00021bb0 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   21bb0:	4b01      	ldr	r3, [pc, #4]	; (21bb8 <z_impl_z_errno+0x8>)
   21bb2:	6898      	ldr	r0, [r3, #8]
}
   21bb4:	3054      	adds	r0, #84	; 0x54
   21bb6:	4770      	bx	lr
   21bb8:	20025cfc 	.word	0x20025cfc

00021bbc <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   21bbc:	b510      	push	{r4, lr}
   21bbe:	4604      	mov	r4, r0
	z_impl_log_panic();
   21bc0:	f7ed fcba 	bl	f538 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   21bc4:	2301      	movs	r3, #1
   21bc6:	f04f 0100 	mov.w	r1, #0
   21bca:	4a07      	ldr	r2, [pc, #28]	; (21be8 <k_sys_fatal_error_handler+0x2c>)
   21bcc:	f363 0107 	bfi	r1, r3, #0, #8
   21bd0:	4b06      	ldr	r3, [pc, #24]	; (21bec <k_sys_fatal_error_handler+0x30>)
   21bd2:	4807      	ldr	r0, [pc, #28]	; (21bf0 <k_sys_fatal_error_handler+0x34>)
   21bd4:	1a9b      	subs	r3, r3, r2
   21bd6:	08db      	lsrs	r3, r3, #3
   21bd8:	f363 118f 	bfi	r1, r3, #6, #10
   21bdc:	f002 f8b9 	bl	23d52 <log_0>
	arch_system_halt(reason);
   21be0:	4620      	mov	r0, r4
   21be2:	f003 fef3 	bl	259cc <arch_system_halt>
   21be6:	bf00      	nop
   21be8:	000264bc 	.word	0x000264bc
   21bec:	00026514 	.word	0x00026514
   21bf0:	00028cde 	.word	0x00028cde

00021bf4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   21bf4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21bf8:	4605      	mov	r5, r0
   21bfa:	4688      	mov	r8, r1
	return z_impl_k_current_get();
   21bfc:	f000 fe96 	bl	2292c <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   21c00:	2201      	movs	r2, #1
   21c02:	f04f 0300 	mov.w	r3, #0
   21c06:	4c26      	ldr	r4, [pc, #152]	; (21ca0 <z_fatal_error+0xac>)
   21c08:	f362 0307 	bfi	r3, r2, #0, #8
   21c0c:	4a25      	ldr	r2, [pc, #148]	; (21ca4 <z_fatal_error+0xb0>)
   21c0e:	2d04      	cmp	r5, #4
   21c10:	eba4 0402 	sub.w	r4, r4, r2
   21c14:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   21c18:	bf98      	it	ls
   21c1a:	4a23      	ldrls	r2, [pc, #140]	; (21ca8 <z_fatal_error+0xb4>)
   21c1c:	f364 138f 	bfi	r3, r4, #6, #10
   21c20:	f8ad 3000 	strh.w	r3, [sp]
   21c24:	4606      	mov	r6, r0
   21c26:	f04f 0300 	mov.w	r3, #0
   21c2a:	bf94      	ite	ls
   21c2c:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
   21c30:	4a1e      	ldrhi	r2, [pc, #120]	; (21cac <z_fatal_error+0xb8>)
   21c32:	4629      	mov	r1, r5
   21c34:	481e      	ldr	r0, [pc, #120]	; (21cb0 <z_fatal_error+0xbc>)
   21c36:	f002 f8c5 	bl	23dc4 <log_3>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   21c3a:	f8d8 301c 	ldr.w	r3, [r8, #28]
   21c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
   21c42:	b14b      	cbz	r3, 21c58 <z_fatal_error+0x64>
		LOG_ERR("Fault during interrupt handling\n");
   21c44:	f04f 0100 	mov.w	r1, #0
   21c48:	2301      	movs	r3, #1
   21c4a:	f363 0107 	bfi	r1, r3, #0, #8
   21c4e:	f364 118f 	bfi	r1, r4, #6, #10
   21c52:	4818      	ldr	r0, [pc, #96]	; (21cb4 <z_fatal_error+0xc0>)
   21c54:	f002 f87d 	bl	23d52 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   21c58:	f04f 0700 	mov.w	r7, #0
   21c5c:	2301      	movs	r3, #1
	const char *thread_name = k_thread_name_get(thread);
   21c5e:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
   21c60:	f363 0707 	bfi	r7, r3, #0, #8
   21c64:	f364 178f 	bfi	r7, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   21c68:	f004 f8d9 	bl	25e1e <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   21c6c:	b1b0      	cbz	r0, 21c9c <z_fatal_error+0xa8>
   21c6e:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   21c70:	4b11      	ldr	r3, [pc, #68]	; (21cb8 <z_fatal_error+0xc4>)
   21c72:	2a00      	cmp	r2, #0
   21c74:	bf08      	it	eq
   21c76:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   21c78:	f7ed fca4 	bl	f5c4 <log_strdup>
   21c7c:	463b      	mov	r3, r7
   21c7e:	4602      	mov	r2, r0
   21c80:	4631      	mov	r1, r6
   21c82:	480e      	ldr	r0, [pc, #56]	; (21cbc <z_fatal_error+0xc8>)
   21c84:	f002 f886 	bl	23d94 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   21c88:	4641      	mov	r1, r8
   21c8a:	4628      	mov	r0, r5
   21c8c:	f7ff ff96 	bl	21bbc <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
   21c90:	4630      	mov	r0, r6
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
   21c92:	b002      	add	sp, #8
   21c94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21c98:	f7ee bd96 	b.w	107c8 <z_impl_k_thread_abort>
		thread_name = "unknown";
   21c9c:	4806      	ldr	r0, [pc, #24]	; (21cb8 <z_fatal_error+0xc4>)
   21c9e:	e7eb      	b.n	21c78 <z_fatal_error+0x84>
   21ca0:	00026514 	.word	0x00026514
   21ca4:	000264bc 	.word	0x000264bc
   21ca8:	00027854 	.word	0x00027854
   21cac:	00028d37 	.word	0x00028d37
   21cb0:	00028d4d 	.word	0x00028d4d
   21cb4:	00028d75 	.word	0x00028d75
   21cb8:	00028d45 	.word	0x00028d45
   21cbc:	00028d96 	.word	0x00028d96

00021cc0 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   21cc0:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   21cc2:	4d0b      	ldr	r5, [pc, #44]	; (21cf0 <idle+0x30>)
	__asm__ volatile(
   21cc4:	f04f 0220 	mov.w	r2, #32
   21cc8:	f3ef 8311 	mrs	r3, BASEPRI
   21ccc:	f382 8811 	msr	BASEPRI, r2
   21cd0:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   21cd4:	f004 f908 	bl	25ee8 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   21cd8:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   21cda:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   21cdc:	2802      	cmp	r0, #2
   21cde:	bfd8      	it	le
   21ce0:	4608      	movle	r0, r1
   21ce2:	f004 f911 	bl	25f08 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   21ce6:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   21ce8:	f7ee f9aa 	bl	10040 <arch_cpu_idle>
   21cec:	e7ea      	b.n	21cc4 <idle+0x4>
   21cee:	bf00      	nop
   21cf0:	20025cfc 	.word	0x20025cfc

00021cf4 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   21cf4:	4802      	ldr	r0, [pc, #8]	; (21d00 <z_bss_zero+0xc>)
   21cf6:	4a03      	ldr	r2, [pc, #12]	; (21d04 <z_bss_zero+0x10>)
   21cf8:	2100      	movs	r1, #0
   21cfa:	1a12      	subs	r2, r2, r0
   21cfc:	f002 bd93 	b.w	24826 <memset>
   21d00:	20020000 	.word	0x20020000
   21d04:	20027590 	.word	0x20027590

00021d08 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   21d08:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   21d0a:	4806      	ldr	r0, [pc, #24]	; (21d24 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   21d0c:	4a06      	ldr	r2, [pc, #24]	; (21d28 <z_data_copy+0x20>)
   21d0e:	4907      	ldr	r1, [pc, #28]	; (21d2c <z_data_copy+0x24>)
   21d10:	1a12      	subs	r2, r2, r0
   21d12:	f002 fd5e 	bl	247d2 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   21d16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   21d1a:	4a05      	ldr	r2, [pc, #20]	; (21d30 <z_data_copy+0x28>)
   21d1c:	4905      	ldr	r1, [pc, #20]	; (21d34 <z_data_copy+0x2c>)
   21d1e:	4806      	ldr	r0, [pc, #24]	; (21d38 <z_data_copy+0x30>)
   21d20:	f002 bd57 	b.w	247d2 <memcpy>
   21d24:	2002d3e4 	.word	0x2002d3e4
   21d28:	2002d63c 	.word	0x2002d63c
   21d2c:	00028e18 	.word	0x00028e18
   21d30:	00000000 	.word	0x00000000
   21d34:	00028e18 	.word	0x00028e18
   21d38:	20020000 	.word	0x20020000

00021d3c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   21d3c:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   21d3e:	2002      	movs	r0, #2
   21d40:	f7ff fefa 	bl	21b38 <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   21d44:	4807      	ldr	r0, [pc, #28]	; (21d64 <bg_thread_main+0x28>)
   21d46:	f001 ffd1 	bl	23cec <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   21d4a:	2003      	movs	r0, #3
   21d4c:	f7ff fef4 	bl	21b38 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   21d50:	f000 ff12 	bl	22b78 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   21d54:	f001 fc2e 	bl	235b4 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   21d58:	4a03      	ldr	r2, [pc, #12]	; (21d68 <bg_thread_main+0x2c>)
   21d5a:	7b13      	ldrb	r3, [r2, #12]
   21d5c:	f023 0301 	bic.w	r3, r3, #1
   21d60:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   21d62:	bd08      	pop	{r3, pc}
   21d64:	00028dae 	.word	0x00028dae
   21d68:	20021be8 	.word	0x20021be8

00021d6c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   21d6c:	b580      	push	{r7, lr}
   21d6e:	b0b2      	sub	sp, #200	; 0xc8
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   21d70:	f7ed fa9c 	bl	f2ac <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   21d74:	4b34      	ldr	r3, [pc, #208]	; (21e48 <z_cstart+0xdc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   21d76:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21d7a:	2400      	movs	r4, #0
   21d7c:	23e0      	movs	r3, #224	; 0xe0
   21d7e:	4d33      	ldr	r5, [pc, #204]	; (21e4c <z_cstart+0xe0>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   21d80:	2701      	movs	r7, #1
   21d82:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   21d86:	77ec      	strb	r4, [r5, #31]
   21d88:	762c      	strb	r4, [r5, #24]
   21d8a:	766c      	strb	r4, [r5, #25]
   21d8c:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   21d8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   21d90:	4e2f      	ldr	r6, [pc, #188]	; (21e50 <z_cstart+0xe4>)
   21d92:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   21d96:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   21d98:	f7ee fd02 	bl	107a0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   21d9c:	f7ee f94a 	bl	10034 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   21da0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21da4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   21da6:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   21da8:	ab06      	add	r3, sp, #24
   21daa:	22b0      	movs	r2, #176	; 0xb0
   21dac:	4621      	mov	r1, r4
   21dae:	4618      	mov	r0, r3
   21db0:	f002 fd39 	bl	24826 <memset>
	_current = &dummy_thread;
   21db4:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   21db6:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   21db8:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   21dbc:	f7ff febc 	bl	21b38 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   21dc0:	4638      	mov	r0, r7
   21dc2:	f7ff feb9 	bl	21b38 <z_sys_device_do_config_level>
	z_sched_init();
   21dc6:	f000 fd31 	bl	2282c <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   21dca:	4b22      	ldr	r3, [pc, #136]	; (21e54 <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
   21dcc:	4d22      	ldr	r5, [pc, #136]	; (21e58 <z_cstart+0xec>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
   21dce:	e9cd 7304 	strd	r7, r3, [sp, #16]
   21dd2:	2307      	movs	r3, #7
   21dd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   21dd8:	e9cd 4302 	strd	r4, r3, [sp, #8]
   21ddc:	e9cd 4400 	strd	r4, r4, [sp]
   21de0:	4b1e      	ldr	r3, [pc, #120]	; (21e5c <z_cstart+0xf0>)
   21de2:	491f      	ldr	r1, [pc, #124]	; (21e60 <z_cstart+0xf4>)
   21de4:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   21de6:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   21de8:	f000 fe4a 	bl	22a80 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21dec:	7b6b      	ldrb	r3, [r5, #13]
   21dee:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   21df2:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21df6:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   21df8:	d104      	bne.n	21e04 <z_cstart+0x98>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   21dfa:	69ab      	ldr	r3, [r5, #24]
   21dfc:	b913      	cbnz	r3, 21e04 <z_cstart+0x98>
		z_add_thread_to_ready_q(thread);
   21dfe:	4628      	mov	r0, r5
   21e00:	f000 fb54 	bl	224ac <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
   21e04:	4b17      	ldr	r3, [pc, #92]	; (21e64 <z_cstart+0xf8>)
   21e06:	2201      	movs	r2, #1
   21e08:	9305      	str	r3, [sp, #20]
   21e0a:	230f      	movs	r3, #15
   21e0c:	e9cd 3203 	strd	r3, r2, [sp, #12]
   21e10:	2300      	movs	r3, #0
   21e12:	4d15      	ldr	r5, [pc, #84]	; (21e68 <z_cstart+0xfc>)
   21e14:	e9cd 3301 	strd	r3, r3, [sp, #4]
   21e18:	9300      	str	r3, [sp, #0]
   21e1a:	f44f 72a0 	mov.w	r2, #320	; 0x140
   21e1e:	4b13      	ldr	r3, [pc, #76]	; (21e6c <z_cstart+0x100>)
   21e20:	4913      	ldr	r1, [pc, #76]	; (21e70 <z_cstart+0x104>)
   21e22:	4628      	mov	r0, r5
   21e24:	f000 fe2c 	bl	22a80 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21e28:	7b6b      	ldrb	r3, [r5, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   21e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   21e2e:	f023 0304 	bic.w	r3, r3, #4
   21e32:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   21e34:	4b0f      	ldr	r3, [pc, #60]	; (21e74 <z_cstart+0x108>)
   21e36:	490a      	ldr	r1, [pc, #40]	; (21e60 <z_cstart+0xf4>)
	list->tail = (sys_dnode_t *)list;
   21e38:	e9c6 3306 	strd	r3, r3, [r6, #24]
   21e3c:	4806      	ldr	r0, [pc, #24]	; (21e58 <z_cstart+0xec>)
   21e3e:	4b07      	ldr	r3, [pc, #28]	; (21e5c <z_cstart+0xf0>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   21e40:	60f5      	str	r5, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   21e42:	f7ee f8cd 	bl	ffe0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   21e46:	bf00      	nop
   21e48:	200299d0 	.word	0x200299d0
   21e4c:	e000ed00 	.word	0xe000ed00
   21e50:	20025cfc 	.word	0x20025cfc
   21e54:	00028df9 	.word	0x00028df9
   21e58:	20021be8 	.word	0x20021be8
   21e5c:	00021d3d 	.word	0x00021d3d
   21e60:	20028090 	.word	0x20028090
   21e64:	00028dfe 	.word	0x00028dfe
   21e68:	20021b38 	.word	0x20021b38
   21e6c:	00021cc1 	.word	0x00021cc1
   21e70:	20029090 	.word	0x20029090
   21e74:	20025d14 	.word	0x20025d14

00021e78 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   21e78:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
   21e7a:	2400      	movs	r4, #0
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   21e7c:	4b0a      	ldr	r3, [pc, #40]	; (21ea8 <init_mem_slab_module+0x30>)
   21e7e:	480b      	ldr	r0, [pc, #44]	; (21eac <init_mem_slab_module+0x34>)
   21e80:	4283      	cmp	r3, r0
   21e82:	d301      	bcc.n	21e88 <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
   21e84:	2000      	movs	r0, #0
   21e86:	bd70      	pop	{r4, r5, r6, pc}
	for (j = 0U; j < slab->num_blocks; j++) {
   21e88:	2100      	movs	r1, #0
	p = slab->buffer;
   21e8a:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   21e8c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   21e8e:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   21e90:	42a9      	cmp	r1, r5
   21e92:	d101      	bne.n	21e98 <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   21e94:	331c      	adds	r3, #28
   21e96:	e7f3      	b.n	21e80 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   21e98:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   21e9a:	3101      	adds	r1, #1
		*(char **)p = slab->free_list;
   21e9c:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
   21e9e:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
   21ea0:	615a      	str	r2, [r3, #20]
		p += slab->block_size;
   21ea2:	4432      	add	r2, r6
   21ea4:	e7f4      	b.n	21e90 <init_mem_slab_module+0x18>
   21ea6:	bf00      	nop
   21ea8:	2002d548 	.word	0x2002d548
   21eac:	2002d564 	.word	0x2002d564

00021eb0 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   21eb0:	b510      	push	{r4, lr}
   21eb2:	4613      	mov	r3, r2
   21eb4:	460c      	mov	r4, r1
   21eb6:	f04f 0220 	mov.w	r2, #32
   21eba:	f3ef 8111 	mrs	r1, BASEPRI
   21ebe:	f382 8811 	msr	BASEPRI, r2
   21ec2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   21ec6:	6942      	ldr	r2, [r0, #20]
   21ec8:	b15a      	cbz	r2, 21ee2 <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
   21eca:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   21ecc:	6813      	ldr	r3, [r2, #0]
   21ece:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   21ed0:	6983      	ldr	r3, [r0, #24]
   21ed2:	3301      	adds	r3, #1
   21ed4:	6183      	str	r3, [r0, #24]
		result = 0;
   21ed6:	2000      	movs	r0, #0
	__asm__ volatile(
   21ed8:	f381 8811 	msr	BASEPRI, r1
   21edc:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   21ee0:	e00d      	b.n	21efe <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
   21ee2:	b91b      	cbnz	r3, 21eec <k_mem_slab_alloc+0x3c>
		*mem = NULL;
   21ee4:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   21ee6:	f06f 000b 	mvn.w	r0, #11
   21eea:	e7f5      	b.n	21ed8 <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   21eec:	4602      	mov	r2, r0
   21eee:	4804      	ldr	r0, [pc, #16]	; (21f00 <k_mem_slab_alloc+0x50>)
   21ef0:	f000 fc18 	bl	22724 <z_pend_curr>
		if (result == 0) {
   21ef4:	b918      	cbnz	r0, 21efe <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
   21ef6:	4b03      	ldr	r3, [pc, #12]	; (21f04 <k_mem_slab_alloc+0x54>)
   21ef8:	689b      	ldr	r3, [r3, #8]
   21efa:	695b      	ldr	r3, [r3, #20]
   21efc:	6023      	str	r3, [r4, #0]
}
   21efe:	bd10      	pop	{r4, pc}
   21f00:	20027450 	.word	0x20027450
   21f04:	20025cfc 	.word	0x20025cfc

00021f08 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   21f08:	b570      	push	{r4, r5, r6, lr}
   21f0a:	4604      	mov	r4, r0
   21f0c:	460d      	mov	r5, r1
	__asm__ volatile(
   21f0e:	f04f 0320 	mov.w	r3, #32
   21f12:	f3ef 8611 	mrs	r6, BASEPRI
   21f16:	f383 8811 	msr	BASEPRI, r3
   21f1a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   21f1e:	f003 ff26 	bl	25d6e <z_unpend_first_thread>

	if (pending_thread != NULL) {
   21f22:	b180      	cbz	r0, 21f46 <k_mem_slab_free+0x3e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   21f24:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   21f26:	682a      	ldr	r2, [r5, #0]
   21f28:	6681      	str	r1, [r0, #104]	; 0x68
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   21f2a:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   21f2c:	7b42      	ldrb	r2, [r0, #13]
   21f2e:	06d2      	lsls	r2, r2, #27
   21f30:	d103      	bne.n	21f3a <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
   21f32:	6983      	ldr	r3, [r0, #24]
   21f34:	b90b      	cbnz	r3, 21f3a <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
   21f36:	f000 fab9 	bl	224ac <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   21f3a:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   21f3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   21f40:	4807      	ldr	r0, [pc, #28]	; (21f60 <k_mem_slab_free+0x58>)
   21f42:	f003 be9e 	b.w	25c82 <z_reschedule>
		**(char ***)mem = slab->free_list;
   21f46:	682b      	ldr	r3, [r5, #0]
   21f48:	6962      	ldr	r2, [r4, #20]
   21f4a:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   21f4c:	682b      	ldr	r3, [r5, #0]
   21f4e:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   21f50:	69a3      	ldr	r3, [r4, #24]
   21f52:	3b01      	subs	r3, #1
   21f54:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   21f56:	f386 8811 	msr	BASEPRI, r6
   21f5a:	f3bf 8f6f 	isb	sy
}
   21f5e:	bd70      	pop	{r4, r5, r6, pc}
   21f60:	20027450 	.word	0x20027450

00021f64 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   21f64:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   21f66:	4c07      	ldr	r4, [pc, #28]	; (21f84 <init_static_pools+0x20>)
   21f68:	4d07      	ldr	r5, [pc, #28]	; (21f88 <init_static_pools+0x24>)
   21f6a:	42ac      	cmp	r4, r5
   21f6c:	d301      	bcc.n	21f72 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   21f6e:	2000      	movs	r0, #0
   21f70:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   21f72:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   21f76:	4620      	mov	r0, r4
   21f78:	e9c4 3305 	strd	r3, r3, [r4, #20]
   21f7c:	f001 fb7f 	bl	2367e <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   21f80:	341c      	adds	r4, #28
   21f82:	e7f2      	b.n	21f6a <init_static_pools+0x6>
   21f84:	2002d564 	.word	0x2002d564
   21f88:	2002d580 	.word	0x2002d580

00021f8c <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   21f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   21f90:	1e1c      	subs	r4, r3, #0
{
   21f92:	b085      	sub	sp, #20
   21f94:	4607      	mov	r7, r0
   21f96:	460d      	mov	r5, r1
   21f98:	4692      	mov	sl, r2
	if (timeout > 0) {
   21f9a:	dd3b      	ble.n	22014 <k_mem_pool_alloc+0x88>
	return z_impl_k_uptime_get();
   21f9c:	f003 ffd2 	bl	25f44 <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   21fa0:	eb10 0804 	adds.w	r8, r0, r4
	return pool - &_k_mem_pool_list_start[0];
   21fa4:	4b1d      	ldr	r3, [pc, #116]	; (2201c <k_mem_pool_alloc+0x90>)
   21fa6:	4e1e      	ldr	r6, [pc, #120]	; (22020 <k_mem_pool_alloc+0x94>)
   21fa8:	1afb      	subs	r3, r7, r3
   21faa:	109b      	asrs	r3, r3, #2
   21fac:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   21fae:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   21fb2:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   21fb4:	ab03      	add	r3, sp, #12
   21fb6:	aa02      	add	r2, sp, #8
   21fb8:	9500      	str	r5, [sp, #0]
   21fba:	4651      	mov	r1, sl
   21fbc:	4638      	mov	r0, r7
   21fbe:	f001 fba4 	bl	2370a <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   21fc2:	796b      	ldrb	r3, [r5, #5]
   21fc4:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   21fc6:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   21fc8:	f362 0303 	bfi	r3, r2, #0, #4
   21fcc:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   21fce:	686b      	ldr	r3, [r5, #4]
   21fd0:	9a03      	ldr	r2, [sp, #12]
   21fd2:	f362 331f 	bfi	r3, r2, #12, #20
   21fd6:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   21fd8:	b1c8      	cbz	r0, 2200e <k_mem_pool_alloc+0x82>
   21fda:	b1c4      	cbz	r4, 2200e <k_mem_pool_alloc+0x82>
   21fdc:	f110 0f0c 	cmn.w	r0, #12
   21fe0:	d115      	bne.n	2200e <k_mem_pool_alloc+0x82>
	__asm__ volatile(
   21fe2:	f04f 0320 	mov.w	r3, #32
   21fe6:	f3ef 8011 	mrs	r0, BASEPRI
   21fea:	f383 8811 	msr	BASEPRI, r3
   21fee:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
   21ff2:	4622      	mov	r2, r4
   21ff4:	4659      	mov	r1, fp
   21ff6:	f000 fb71 	bl	226dc <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   21ffa:	1c63      	adds	r3, r4, #1
   21ffc:	d0da      	beq.n	21fb4 <k_mem_pool_alloc+0x28>
   21ffe:	f003 ffa1 	bl	25f44 <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   22002:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   22006:	2c00      	cmp	r4, #0
   22008:	dcd4      	bgt.n	21fb4 <k_mem_pool_alloc+0x28>
				break;
			}
		}
	}

	return -EAGAIN;
   2200a:	f06f 000a 	mvn.w	r0, #10
}
   2200e:	b005      	add	sp, #20
   22010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   22014:	f04f 0800 	mov.w	r8, #0
   22018:	e7c4      	b.n	21fa4 <k_mem_pool_alloc+0x18>
   2201a:	bf00      	nop
   2201c:	2002d564 	.word	0x2002d564
   22020:	b6db6db7 	.word	0xb6db6db7

00022024 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   22024:	b570      	push	{r4, r5, r6, lr}
   22026:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   22028:	6802      	ldr	r2, [r0, #0]
   2202a:	7841      	ldrb	r1, [r0, #1]
   2202c:	4e11      	ldr	r6, [pc, #68]	; (22074 <k_mem_pool_free_id+0x50>)
   2202e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   22032:	00a4      	lsls	r4, r4, #2
   22034:	0b12      	lsrs	r2, r2, #12
   22036:	f001 010f 	and.w	r1, r1, #15
   2203a:	1930      	adds	r0, r6, r4
   2203c:	f001 fc17 	bl	2386e <z_sys_mem_pool_block_free>
   22040:	f04f 0320 	mov.w	r3, #32
   22044:	f3ef 8511 	mrs	r5, BASEPRI
   22048:	f383 8811 	msr	BASEPRI, r3
   2204c:	f3bf 8f6f 	isb	sy
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   22050:	f104 0014 	add.w	r0, r4, #20
   22054:	4430      	add	r0, r6
   22056:	f003 feb7 	bl	25dc8 <z_unpend_all>

	if (need_sched != 0) {
   2205a:	b128      	cbz	r0, 22068 <k_mem_pool_free_id+0x44>
		z_reschedule(&lock, key);
   2205c:	4629      	mov	r1, r5
	} else {
		k_spin_unlock(&lock, key);
	}
}
   2205e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   22062:	4805      	ldr	r0, [pc, #20]	; (22078 <k_mem_pool_free_id+0x54>)
   22064:	f003 be0d 	b.w	25c82 <z_reschedule>
	__asm__ volatile(
   22068:	f385 8811 	msr	BASEPRI, r5
   2206c:	f3bf 8f6f 	isb	sy
}
   22070:	bd70      	pop	{r4, r5, r6, pc}
   22072:	bf00      	nop
   22074:	2002d564 	.word	0x2002d564
   22078:	20027450 	.word	0x20027450

0002207c <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   2207c:	4601      	mov	r1, r0
   2207e:	4801      	ldr	r0, [pc, #4]	; (22084 <k_malloc+0x8>)
   22080:	f003 bcc1 	b.w	25a06 <k_mem_pool_malloc>
   22084:	2002d564 	.word	0x2002d564

00022088 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   22088:	4b03      	ldr	r3, [pc, #12]	; (22098 <z_thread_malloc+0x10>)
{
   2208a:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   2208c:	689b      	ldr	r3, [r3, #8]
   2208e:	6e18      	ldr	r0, [r3, #96]	; 0x60
   22090:	b108      	cbz	r0, 22096 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   22092:	f003 bcb8 	b.w	25a06 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   22096:	4770      	bx	lr
   22098:	20025cfc 	.word	0x20025cfc

0002209c <z_impl_k_msgq_put>:
	}
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
   2209c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   220a0:	4613      	mov	r3, r2
   220a2:	4604      	mov	r4, r0
   220a4:	460f      	mov	r7, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   220a6:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   220aa:	f04f 0220 	mov.w	r2, #32
   220ae:	f3ef 8611 	mrs	r6, BASEPRI
   220b2:	f382 8811 	msr	BASEPRI, r2
   220b6:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   220ba:	6a01      	ldr	r1, [r0, #32]
   220bc:	68c2      	ldr	r2, [r0, #12]
   220be:	4291      	cmp	r1, r2
   220c0:	d22e      	bcs.n	22120 <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   220c2:	f003 fe54 	bl	25d6e <z_unpend_first_thread>
		if (pending_thread != NULL) {
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   220c6:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   220c8:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   220ca:	4639      	mov	r1, r7
		if (pending_thread != NULL) {
   220cc:	b198      	cbz	r0, 220f6 <z_impl_k_msgq_put+0x5a>
			(void)memcpy(pending_thread->base.swap_data, data,
   220ce:	6940      	ldr	r0, [r0, #20]
   220d0:	f002 fb7f 	bl	247d2 <memcpy>
   220d4:	2300      	movs	r3, #0
   220d6:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   220d8:	7b6b      	ldrb	r3, [r5, #13]
   220da:	06db      	lsls	r3, r3, #27
   220dc:	d104      	bne.n	220e8 <z_impl_k_msgq_put+0x4c>
	if (z_is_thread_ready(thread)) {
   220de:	69ab      	ldr	r3, [r5, #24]
   220e0:	b913      	cbnz	r3, 220e8 <z_impl_k_msgq_put+0x4c>
		z_add_thread_to_ready_q(thread);
   220e2:	4628      	mov	r0, r5
   220e4:	f000 f9e2 	bl	224ac <z_add_thread_to_ready_q>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   220e8:	4640      	mov	r0, r8
   220ea:	4631      	mov	r1, r6
   220ec:	f003 fdc9 	bl	25c82 <z_reschedule>
			return 0;
   220f0:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   220f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   220f6:	69e0      	ldr	r0, [r4, #28]
   220f8:	f002 fb6b 	bl	247d2 <memcpy>
		result = 0;
   220fc:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
   220fe:	69e3      	ldr	r3, [r4, #28]
   22100:	68a2      	ldr	r2, [r4, #8]
   22102:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   22104:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   22106:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   22108:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   2210a:	bf04      	itt	eq
   2210c:	6923      	ldreq	r3, [r4, #16]
   2210e:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   22110:	6a23      	ldr	r3, [r4, #32]
   22112:	3301      	adds	r3, #1
   22114:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
   22116:	f386 8811 	msr	BASEPRI, r6
   2211a:	f3bf 8f6f 	isb	sy
	return result;
   2211e:	e7e8      	b.n	220f2 <z_impl_k_msgq_put+0x56>
	} else if (timeout == K_NO_WAIT) {
   22120:	b14b      	cbz	r3, 22136 <z_impl_k_msgq_put+0x9a>
		_current->base.swap_data = data;
   22122:	4a06      	ldr	r2, [pc, #24]	; (2213c <z_impl_k_msgq_put+0xa0>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22124:	4631      	mov	r1, r6
		_current->base.swap_data = data;
   22126:	6892      	ldr	r2, [r2, #8]
   22128:	6157      	str	r7, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2212a:	4602      	mov	r2, r0
   2212c:	4640      	mov	r0, r8
}
   2212e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22132:	f000 baf7 	b.w	22724 <z_pend_curr>
		result = -ENOMSG;
   22136:	f06f 004f 	mvn.w	r0, #79	; 0x4f
   2213a:	e7ec      	b.n	22116 <z_impl_k_msgq_put+0x7a>
   2213c:	20025cfc 	.word	0x20025cfc

00022140 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
   22140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22144:	4604      	mov	r4, r0
   22146:	4613      	mov	r3, r2
   22148:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   2214a:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
   2214e:	f04f 0220 	mov.w	r2, #32
   22152:	f3ef 8611 	mrs	r6, BASEPRI
   22156:	f382 8811 	msr	BASEPRI, r2
   2215a:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   2215e:	6a22      	ldr	r2, [r4, #32]
   22160:	2a00      	cmp	r2, #0
   22162:	d037      	beq.n	221d4 <z_impl_k_msgq_get+0x94>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   22164:	68a2      	ldr	r2, [r4, #8]
   22166:	69a1      	ldr	r1, [r4, #24]
   22168:	f002 fb33 	bl	247d2 <memcpy>
		msgq->read_ptr += msgq->msg_size;
   2216c:	69a3      	ldr	r3, [r4, #24]
   2216e:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   22170:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   22172:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   22174:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   22176:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   22178:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   2217a:	bf04      	itt	eq
   2217c:	6923      	ldreq	r3, [r4, #16]
   2217e:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   22180:	6a23      	ldr	r3, [r4, #32]
   22182:	3b01      	subs	r3, #1
   22184:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   22186:	f003 fdf2 	bl	25d6e <z_unpend_first_thread>
		if (pending_thread != NULL) {
   2218a:	4605      	mov	r5, r0
   2218c:	2800      	cmp	r0, #0
   2218e:	d02e      	beq.n	221ee <z_impl_k_msgq_get+0xae>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   22190:	68a2      	ldr	r2, [r4, #8]
   22192:	6941      	ldr	r1, [r0, #20]
   22194:	69e0      	ldr	r0, [r4, #28]
   22196:	f002 fb1c 	bl	247d2 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   2219a:	69e3      	ldr	r3, [r4, #28]
   2219c:	68a2      	ldr	r2, [r4, #8]
   2219e:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   221a0:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   221a2:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   221a4:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   221a6:	bf04      	itt	eq
   221a8:	6923      	ldreq	r3, [r4, #16]
   221aa:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   221ac:	6a23      	ldr	r3, [r4, #32]
   221ae:	3301      	adds	r3, #1
   221b0:	6223      	str	r3, [r4, #32]
   221b2:	2300      	movs	r3, #0
   221b4:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   221b6:	7b6b      	ldrb	r3, [r5, #13]
   221b8:	06db      	lsls	r3, r3, #27
   221ba:	d104      	bne.n	221c6 <z_impl_k_msgq_get+0x86>
	if (z_is_thread_ready(thread)) {
   221bc:	69ab      	ldr	r3, [r5, #24]
   221be:	b913      	cbnz	r3, 221c6 <z_impl_k_msgq_get+0x86>
		z_add_thread_to_ready_q(thread);
   221c0:	4628      	mov	r0, r5
   221c2:	f000 f973 	bl	224ac <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   221c6:	4638      	mov	r0, r7
   221c8:	4631      	mov	r1, r6
   221ca:	f003 fd5a 	bl	25c82 <z_reschedule>
			return 0;
   221ce:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   221d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   221d4:	b14b      	cbz	r3, 221ea <z_impl_k_msgq_get+0xaa>
		_current->base.swap_data = data;
   221d6:	4a08      	ldr	r2, [pc, #32]	; (221f8 <z_impl_k_msgq_get+0xb8>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   221d8:	4638      	mov	r0, r7
		_current->base.swap_data = data;
   221da:	6892      	ldr	r2, [r2, #8]
   221dc:	6151      	str	r1, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   221de:	4622      	mov	r2, r4
   221e0:	4631      	mov	r1, r6
}
   221e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   221e6:	f000 ba9d 	b.w	22724 <z_pend_curr>
		result = -ENOMSG;
   221ea:	f06f 004f 	mvn.w	r0, #79	; 0x4f
	__asm__ volatile(
   221ee:	f386 8811 	msr	BASEPRI, r6
   221f2:	f3bf 8f6f 	isb	sy
	return result;
   221f6:	e7eb      	b.n	221d0 <z_impl_k_msgq_get+0x90>
   221f8:	20025cfc 	.word	0x20025cfc

000221fc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   221fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   221fe:	4604      	mov	r4, r0
   22200:	460f      	mov	r7, r1
	__asm__ volatile(
   22202:	f04f 0320 	mov.w	r3, #32
   22206:	f3ef 8511 	mrs	r5, BASEPRI
   2220a:	f383 8811 	msr	BASEPRI, r3
   2220e:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   22212:	68c2      	ldr	r2, [r0, #12]
   22214:	4930      	ldr	r1, [pc, #192]	; (222d8 <z_impl_k_mutex_lock+0xdc>)
   22216:	b15a      	cbz	r2, 22230 <z_impl_k_mutex_lock+0x34>
   22218:	6880      	ldr	r0, [r0, #8]
   2221a:	688e      	ldr	r6, [r1, #8]
   2221c:	42b0      	cmp	r0, r6
   2221e:	d015      	beq.n	2224c <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   22220:	b9b7      	cbnz	r7, 22250 <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
   22222:	f385 8811 	msr	BASEPRI, r5
   22226:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   2222a:	f06f 000f 	mvn.w	r0, #15
   2222e:	e00c      	b.n	2224a <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
   22230:	688b      	ldr	r3, [r1, #8]
   22232:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   22236:	6123      	str	r3, [r4, #16]
		mutex->owner = _current;
   22238:	688b      	ldr	r3, [r1, #8]
		mutex->lock_count++;
   2223a:	3201      	adds	r2, #1
   2223c:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
   2223e:	60a3      	str	r3, [r4, #8]
   22240:	f385 8811 	msr	BASEPRI, r5
   22244:	f3bf 8f6f 	isb	sy
		return 0;
   22248:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   2224a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   2224c:	6923      	ldr	r3, [r4, #16]
   2224e:	e7f2      	b.n	22236 <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   22250:	f990 300e 	ldrsb.w	r3, [r0, #14]
   22254:	f996 100e 	ldrsb.w	r1, [r6, #14]
   22258:	4299      	cmp	r1, r3
   2225a:	bfa8      	it	ge
   2225c:	4619      	movge	r1, r3
   2225e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   22262:	4299      	cmp	r1, r3
   22264:	da2b      	bge.n	222be <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
   22266:	f000 fa9f 	bl	227a8 <z_set_prio>
   2226a:	4606      	mov	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2226c:	463b      	mov	r3, r7
   2226e:	4622      	mov	r2, r4
   22270:	4629      	mov	r1, r5
   22272:	481a      	ldr	r0, [pc, #104]	; (222dc <z_impl_k_mutex_lock+0xe0>)
   22274:	f000 fa56 	bl	22724 <z_pend_curr>
	if (got_mutex == 0) {
   22278:	2800      	cmp	r0, #0
   2227a:	d0e6      	beq.n	2224a <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
   2227c:	f04f 0320 	mov.w	r3, #32
   22280:	f3ef 8511 	mrs	r5, BASEPRI
   22284:	f383 8811 	msr	BASEPRI, r3
   22288:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   2228c:	6823      	ldr	r3, [r4, #0]
   2228e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22290:	429c      	cmp	r4, r3
   22292:	d007      	beq.n	222a4 <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
   22294:	b133      	cbz	r3, 222a4 <z_impl_k_mutex_lock+0xa8>
   22296:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2229a:	4299      	cmp	r1, r3
   2229c:	bfa8      	it	ge
   2229e:	4619      	movge	r1, r3
   222a0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   222a4:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   222a6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   222aa:	4299      	cmp	r1, r3
   222ac:	d109      	bne.n	222c2 <z_impl_k_mutex_lock+0xc6>
	if (resched) {
   222ae:	b16e      	cbz	r6, 222cc <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
   222b0:	4629      	mov	r1, r5
   222b2:	480a      	ldr	r0, [pc, #40]	; (222dc <z_impl_k_mutex_lock+0xe0>)
   222b4:	f003 fce5 	bl	25c82 <z_reschedule>
	return -EAGAIN;
   222b8:	f06f 000a 	mvn.w	r0, #10
   222bc:	e7c5      	b.n	2224a <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
   222be:	2600      	movs	r6, #0
   222c0:	e7d4      	b.n	2226c <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
   222c2:	f000 fa71 	bl	227a8 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   222c6:	2800      	cmp	r0, #0
   222c8:	d1f2      	bne.n	222b0 <z_impl_k_mutex_lock+0xb4>
   222ca:	e7f0      	b.n	222ae <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
   222cc:	f385 8811 	msr	BASEPRI, r5
   222d0:	f3bf 8f6f 	isb	sy
   222d4:	e7f0      	b.n	222b8 <z_impl_k_mutex_lock+0xbc>
   222d6:	bf00      	nop
   222d8:	20025cfc 	.word	0x20025cfc
   222dc:	20027450 	.word	0x20027450

000222e0 <z_impl_k_mutex_unlock>:
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   222e0:	4b1e      	ldr	r3, [pc, #120]	; (2235c <z_impl_k_mutex_unlock+0x7c>)
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   222e2:	b570      	push	{r4, r5, r6, lr}
   222e4:	689a      	ldr	r2, [r3, #8]
   222e6:	4604      	mov	r4, r0
   222e8:	7bd3      	ldrb	r3, [r2, #15]
   222ea:	3b01      	subs	r3, #1
   222ec:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
   222ee:	68c3      	ldr	r3, [r0, #12]
   222f0:	2b01      	cmp	r3, #1
   222f2:	d005      	beq.n	22300 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
   222f4:	3b01      	subs	r3, #1
   222f6:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
   222f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   222fc:	f000 b8ba 	b.w	22474 <k_sched_unlock>
	__asm__ volatile(
   22300:	f04f 0320 	mov.w	r3, #32
   22304:	f3ef 8611 	mrs	r6, BASEPRI
   22308:	f383 8811 	msr	BASEPRI, r3
   2230c:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   22310:	6901      	ldr	r1, [r0, #16]
   22312:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   22314:	f990 300e 	ldrsb.w	r3, [r0, #14]
   22318:	4299      	cmp	r1, r3
   2231a:	d001      	beq.n	22320 <z_impl_k_mutex_unlock+0x40>
		return z_set_prio(mutex->owner, new_prio);
   2231c:	f000 fa44 	bl	227a8 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   22320:	4620      	mov	r0, r4
   22322:	f003 fd24 	bl	25d6e <z_unpend_first_thread>
   22326:	4605      	mov	r5, r0
	mutex->owner = new_owner;
   22328:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   2232a:	b180      	cbz	r0, 2234e <z_impl_k_mutex_unlock+0x6e>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2232c:	7b43      	ldrb	r3, [r0, #13]
   2232e:	06db      	lsls	r3, r3, #27
   22330:	d103      	bne.n	2233a <z_impl_k_mutex_unlock+0x5a>
	if (z_is_thread_ready(thread)) {
   22332:	6983      	ldr	r3, [r0, #24]
   22334:	b90b      	cbnz	r3, 2233a <z_impl_k_mutex_unlock+0x5a>
		z_add_thread_to_ready_q(thread);
   22336:	f000 f8b9 	bl	224ac <z_add_thread_to_ready_q>
	__asm__ volatile(
   2233a:	f386 8811 	msr	BASEPRI, r6
   2233e:	f3bf 8f6f 	isb	sy
   22342:	2300      	movs	r3, #0
   22344:	66ab      	str	r3, [r5, #104]	; 0x68
		mutex->owner_orig_prio = new_owner->base.prio;
   22346:	f995 300e 	ldrsb.w	r3, [r5, #14]
   2234a:	6123      	str	r3, [r4, #16]
   2234c:	e7d4      	b.n	222f8 <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0U;
   2234e:	60e0      	str	r0, [r4, #12]
   22350:	f386 8811 	msr	BASEPRI, r6
   22354:	f3bf 8f6f 	isb	sy
   22358:	e7ce      	b.n	222f8 <z_impl_k_mutex_unlock+0x18>
   2235a:	bf00      	nop
   2235c:	20025cfc 	.word	0x20025cfc

00022360 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   22360:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   22362:	4c08      	ldr	r4, [pc, #32]	; (22384 <z_reset_time_slice+0x24>)
   22364:	6823      	ldr	r3, [r4, #0]
   22366:	b15b      	cbz	r3, 22380 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   22368:	f7ed fd16 	bl	fd98 <z_clock_elapsed>
   2236c:	6823      	ldr	r3, [r4, #0]
   2236e:	4a06      	ldr	r2, [pc, #24]	; (22388 <z_reset_time_slice+0x28>)
   22370:	4418      	add	r0, r3
   22372:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   22374:	2100      	movs	r1, #0
	}
}
   22376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   2237a:	4618      	mov	r0, r3
   2237c:	f003 bdc4 	b.w	25f08 <z_set_timeout_expiry>
}
   22380:	bd10      	pop	{r4, pc}
   22382:	bf00      	nop
   22384:	20025d38 	.word	0x20025d38
   22388:	20025cfc 	.word	0x20025cfc

0002238c <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
   2238c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2238e:	460d      	mov	r5, r1
	__asm__ volatile(
   22390:	f04f 0320 	mov.w	r3, #32
   22394:	f3ef 8411 	mrs	r4, BASEPRI
   22398:	f383 8811 	msr	BASEPRI, r3
   2239c:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
   223a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   223a4:	f240 36e7 	movw	r6, #999	; 0x3e7
   223a8:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   223aa:	2200      	movs	r2, #0
   223ac:	fbe1 6700 	umlal	r6, r7, r1, r0
   223b0:	4b09      	ldr	r3, [pc, #36]	; (223d8 <k_sched_time_slice_set+0x4c>)
   223b2:	4630      	mov	r0, r6
   223b4:	611a      	str	r2, [r3, #16]
   223b6:	4639      	mov	r1, r7
   223b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   223bc:	2300      	movs	r3, #0
   223be:	f7e9 ff2f 	bl	c220 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   223c2:	4b06      	ldr	r3, [pc, #24]	; (223dc <k_sched_time_slice_set+0x50>)
   223c4:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   223c6:	4b06      	ldr	r3, [pc, #24]	; (223e0 <k_sched_time_slice_set+0x54>)
   223c8:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   223ca:	f7ff ffc9 	bl	22360 <z_reset_time_slice>
	__asm__ volatile(
   223ce:	f384 8811 	msr	BASEPRI, r4
   223d2:	f3bf 8f6f 	isb	sy
	}
}
   223d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   223d8:	20025cfc 	.word	0x20025cfc
   223dc:	20025d38 	.word	0x20025d38
   223e0:	20025d34 	.word	0x20025d34

000223e4 <k_sched_lock>:
	__asm__ volatile(
   223e4:	f04f 0320 	mov.w	r3, #32
   223e8:	f3ef 8111 	mrs	r1, BASEPRI
   223ec:	f383 8811 	msr	BASEPRI, r3
   223f0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   223f4:	4b04      	ldr	r3, [pc, #16]	; (22408 <k_sched_lock+0x24>)
   223f6:	689a      	ldr	r2, [r3, #8]
   223f8:	7bd3      	ldrb	r3, [r2, #15]
   223fa:	3b01      	subs	r3, #1
   223fc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   223fe:	f381 8811 	msr	BASEPRI, r1
   22402:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   22406:	4770      	bx	lr
   22408:	20025cfc 	.word	0x20025cfc

0002240c <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   2240c:	4b09      	ldr	r3, [pc, #36]	; (22434 <z_priq_dumb_remove+0x28>)
   2240e:	f103 0228 	add.w	r2, r3, #40	; 0x28
   22412:	4282      	cmp	r2, r0
   22414:	d105      	bne.n	22422 <z_priq_dumb_remove+0x16>
   22416:	689b      	ldr	r3, [r3, #8]
   22418:	428b      	cmp	r3, r1
   2241a:	d102      	bne.n	22422 <z_priq_dumb_remove+0x16>
   2241c:	7b4b      	ldrb	r3, [r1, #13]
   2241e:	06db      	lsls	r3, r3, #27
   22420:	d106      	bne.n	22430 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   22422:	e9d1 3200 	ldrd	r3, r2, [r1]
   22426:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   22428:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2242a:	2300      	movs	r3, #0
	node->prev = NULL;
   2242c:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   22430:	4770      	bx	lr
   22432:	bf00      	nop
   22434:	20025cfc 	.word	0x20025cfc

00022438 <update_cache>:
{
   22438:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   2243a:	4c0d      	ldr	r4, [pc, #52]	; (22470 <update_cache+0x38>)
{
   2243c:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   2243e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   22442:	f003 fc5d 	bl	25d00 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
   22446:	4605      	mov	r5, r0
   22448:	b900      	cbnz	r0, 2244c <update_cache+0x14>
   2244a:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   2244c:	68a3      	ldr	r3, [r4, #8]
   2244e:	b94a      	cbnz	r2, 22464 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   22450:	7b5a      	ldrb	r2, [r3, #13]
   22452:	06d2      	lsls	r2, r2, #27
   22454:	d106      	bne.n	22464 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   22456:	69aa      	ldr	r2, [r5, #24]
   22458:	b922      	cbnz	r2, 22464 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
   2245a:	89da      	ldrh	r2, [r3, #14]
   2245c:	2a7f      	cmp	r2, #127	; 0x7f
   2245e:	d901      	bls.n	22464 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   22460:	6263      	str	r3, [r4, #36]	; 0x24
}
   22462:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   22464:	429d      	cmp	r5, r3
   22466:	d001      	beq.n	2246c <update_cache+0x34>
			z_reset_time_slice();
   22468:	f7ff ff7a 	bl	22360 <z_reset_time_slice>
		_kernel.ready_q.cache = th;
   2246c:	6265      	str	r5, [r4, #36]	; 0x24
}
   2246e:	e7f8      	b.n	22462 <update_cache+0x2a>
   22470:	20025cfc 	.word	0x20025cfc

00022474 <k_sched_unlock>:
{
   22474:	b510      	push	{r4, lr}
	__asm__ volatile(
   22476:	f04f 0320 	mov.w	r3, #32
   2247a:	f3ef 8411 	mrs	r4, BASEPRI
   2247e:	f383 8811 	msr	BASEPRI, r3
   22482:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   22486:	4b08      	ldr	r3, [pc, #32]	; (224a8 <k_sched_unlock+0x34>)
		update_cache(0);
   22488:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   2248a:	689a      	ldr	r2, [r3, #8]
   2248c:	7bd3      	ldrb	r3, [r2, #15]
   2248e:	3301      	adds	r3, #1
   22490:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   22492:	f7ff ffd1 	bl	22438 <update_cache>
	__asm__ volatile(
   22496:	f384 8811 	msr	BASEPRI, r4
   2249a:	f3bf 8f6f 	isb	sy
}
   2249e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   224a2:	f003 bc05 	b.w	25cb0 <z_reschedule_unlocked>
   224a6:	bf00      	nop
   224a8:	20025cfc 	.word	0x20025cfc

000224ac <z_add_thread_to_ready_q>:
{
   224ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   224ae:	f04f 0320 	mov.w	r3, #32
   224b2:	f3ef 8411 	mrs	r4, BASEPRI
   224b6:	f383 8811 	msr	BASEPRI, r3
   224ba:	f3bf 8f6f 	isb	sy
	return list->head == list;
   224be:	4a15      	ldr	r2, [pc, #84]	; (22514 <z_add_thread_to_ready_q+0x68>)
   224c0:	4611      	mov	r1, r2
   224c2:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   224c6:	428b      	cmp	r3, r1
   224c8:	d01d      	beq.n	22506 <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   224ca:	b1e3      	cbz	r3, 22506 <z_add_thread_to_ready_q+0x5a>
   224cc:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   224ce:	f990 500e 	ldrsb.w	r5, [r0, #14]
   224d2:	f993 700e 	ldrsb.w	r7, [r3, #14]
   224d6:	42af      	cmp	r7, r5
   224d8:	dd10      	ble.n	224fc <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
   224da:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   224dc:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   224e0:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   224e2:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   224e4:	7b43      	ldrb	r3, [r0, #13]
   224e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   224ea:	7343      	strb	r3, [r0, #13]
		update_cache(0);
   224ec:	2000      	movs	r0, #0
   224ee:	f7ff ffa3 	bl	22438 <update_cache>
	__asm__ volatile(
   224f2:	f384 8811 	msr	BASEPRI, r4
   224f6:	f3bf 8f6f 	isb	sy
}
   224fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   224fc:	42b3      	cmp	r3, r6
   224fe:	d002      	beq.n	22506 <z_add_thread_to_ready_q+0x5a>
   22500:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22502:	2b00      	cmp	r3, #0
   22504:	d1e5      	bne.n	224d2 <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
   22506:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   22508:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   2250a:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   2250c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2250e:	6018      	str	r0, [r3, #0]
	list->tail = node;
   22510:	62d0      	str	r0, [r2, #44]	; 0x2c
   22512:	e7e7      	b.n	224e4 <z_add_thread_to_ready_q+0x38>
   22514:	20025cfc 	.word	0x20025cfc

00022518 <z_move_thread_to_end_of_prio_q>:
{
   22518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2251a:	4604      	mov	r4, r0
	__asm__ volatile(
   2251c:	f04f 0320 	mov.w	r3, #32
   22520:	f3ef 8511 	mrs	r5, BASEPRI
   22524:	f383 8811 	msr	BASEPRI, r3
   22528:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   2252c:	7b43      	ldrb	r3, [r0, #13]
   2252e:	065a      	lsls	r2, r3, #25
   22530:	d503      	bpl.n	2253a <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   22532:	4601      	mov	r1, r0
   22534:	4817      	ldr	r0, [pc, #92]	; (22594 <z_move_thread_to_end_of_prio_q+0x7c>)
   22536:	f7ff ff69 	bl	2240c <z_priq_dumb_remove>
	return list->head == list;
   2253a:	4a17      	ldr	r2, [pc, #92]	; (22598 <z_move_thread_to_end_of_prio_q+0x80>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2253c:	f102 0128 	add.w	r1, r2, #40	; 0x28
   22540:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   22544:	428b      	cmp	r3, r1
   22546:	d01f      	beq.n	22588 <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22548:	b1f3      	cbz	r3, 22588 <z_move_thread_to_end_of_prio_q+0x70>
	if (t1->base.prio < t2->base.prio) {
   2254a:	f994 600e 	ldrsb.w	r6, [r4, #14]
   2254e:	f993 700e 	ldrsb.w	r7, [r3, #14]
   22552:	42b7      	cmp	r7, r6
   22554:	dd13      	ble.n	2257e <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
   22556:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   22558:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   2255c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   2255e:	605c      	str	r4, [r3, #4]
   22560:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   22562:	6890      	ldr	r0, [r2, #8]
   22564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22568:	7363      	strb	r3, [r4, #13]
   2256a:	1b03      	subs	r3, r0, r4
   2256c:	4258      	negs	r0, r3
   2256e:	4158      	adcs	r0, r3
   22570:	f7ff ff62 	bl	22438 <update_cache>
	__asm__ volatile(
   22574:	f385 8811 	msr	BASEPRI, r5
   22578:	f3bf 8f6f 	isb	sy
}
   2257c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2257e:	4298      	cmp	r0, r3
   22580:	d002      	beq.n	22588 <z_move_thread_to_end_of_prio_q+0x70>
   22582:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22584:	2b00      	cmp	r3, #0
   22586:	d1e2      	bne.n	2254e <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
   22588:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   2258c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2258e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22590:	62d4      	str	r4, [r2, #44]	; 0x2c
   22592:	e7e5      	b.n	22560 <z_move_thread_to_end_of_prio_q+0x48>
   22594:	20025d24 	.word	0x20025d24
   22598:	20025cfc 	.word	0x20025cfc

0002259c <z_time_slice>:
	if (pending_current == _current) {
   2259c:	4a15      	ldr	r2, [pc, #84]	; (225f4 <z_time_slice+0x58>)
   2259e:	4916      	ldr	r1, [pc, #88]	; (225f8 <z_time_slice+0x5c>)
{
   225a0:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   225a2:	680c      	ldr	r4, [r1, #0]
   225a4:	6893      	ldr	r3, [r2, #8]
   225a6:	42a3      	cmp	r3, r4
   225a8:	4614      	mov	r4, r2
   225aa:	d103      	bne.n	225b4 <z_time_slice+0x18>
}
   225ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   225b0:	f7ff bed6 	b.w	22360 <z_reset_time_slice>
	pending_current = NULL;
   225b4:	2500      	movs	r5, #0
   225b6:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   225b8:	4910      	ldr	r1, [pc, #64]	; (225fc <z_time_slice+0x60>)
   225ba:	6809      	ldr	r1, [r1, #0]
   225bc:	b1b9      	cbz	r1, 225ee <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   225be:	89d9      	ldrh	r1, [r3, #14]
   225c0:	297f      	cmp	r1, #127	; 0x7f
   225c2:	d814      	bhi.n	225ee <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
   225c4:	490e      	ldr	r1, [pc, #56]	; (22600 <z_time_slice+0x64>)
   225c6:	f993 500e 	ldrsb.w	r5, [r3, #14]
   225ca:	6809      	ldr	r1, [r1, #0]
   225cc:	428d      	cmp	r5, r1
   225ce:	db0e      	blt.n	225ee <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
   225d0:	490c      	ldr	r1, [pc, #48]	; (22604 <z_time_slice+0x68>)
   225d2:	428b      	cmp	r3, r1
   225d4:	d00b      	beq.n	225ee <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   225d6:	6999      	ldr	r1, [r3, #24]
   225d8:	b949      	cbnz	r1, 225ee <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   225da:	6911      	ldr	r1, [r2, #16]
   225dc:	4281      	cmp	r1, r0
   225de:	dc03      	bgt.n	225e8 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   225e0:	4618      	mov	r0, r3
   225e2:	f7ff ff99 	bl	22518 <z_move_thread_to_end_of_prio_q>
   225e6:	e7e1      	b.n	225ac <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   225e8:	1a09      	subs	r1, r1, r0
   225ea:	6111      	str	r1, [r2, #16]
}
   225ec:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   225ee:	2300      	movs	r3, #0
   225f0:	6123      	str	r3, [r4, #16]
   225f2:	e7fb      	b.n	225ec <z_time_slice+0x50>
   225f4:	20025cfc 	.word	0x20025cfc
   225f8:	20025d30 	.word	0x20025d30
   225fc:	20025d38 	.word	0x20025d38
   22600:	20025d34 	.word	0x20025d34
   22604:	20021b38 	.word	0x20021b38

00022608 <z_remove_thread_from_ready_q>:
{
   22608:	b538      	push	{r3, r4, r5, lr}
   2260a:	4604      	mov	r4, r0
	__asm__ volatile(
   2260c:	f04f 0320 	mov.w	r3, #32
   22610:	f3ef 8511 	mrs	r5, BASEPRI
   22614:	f383 8811 	msr	BASEPRI, r3
   22618:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   2261c:	7b43      	ldrb	r3, [r0, #13]
   2261e:	065a      	lsls	r2, r3, #25
   22620:	d507      	bpl.n	22632 <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   22622:	4601      	mov	r1, r0
   22624:	4809      	ldr	r0, [pc, #36]	; (2264c <z_remove_thread_from_ready_q+0x44>)
   22626:	f7ff fef1 	bl	2240c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   2262a:	7b63      	ldrb	r3, [r4, #13]
   2262c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   22630:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   22632:	4b07      	ldr	r3, [pc, #28]	; (22650 <z_remove_thread_from_ready_q+0x48>)
   22634:	6898      	ldr	r0, [r3, #8]
   22636:	1b03      	subs	r3, r0, r4
   22638:	4258      	negs	r0, r3
   2263a:	4158      	adcs	r0, r3
   2263c:	f7ff fefc 	bl	22438 <update_cache>
	__asm__ volatile(
   22640:	f385 8811 	msr	BASEPRI, r5
   22644:	f3bf 8f6f 	isb	sy
}
   22648:	bd38      	pop	{r3, r4, r5, pc}
   2264a:	bf00      	nop
   2264c:	20025d24 	.word	0x20025d24
   22650:	20025cfc 	.word	0x20025cfc

00022654 <pend>:
{
   22654:	b570      	push	{r4, r5, r6, lr}
   22656:	4604      	mov	r4, r0
   22658:	460d      	mov	r5, r1
   2265a:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   2265c:	f7ff ffd4 	bl	22608 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   22660:	7b63      	ldrb	r3, [r4, #13]
   22662:	f043 0302 	orr.w	r3, r3, #2
   22666:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   22668:	b17d      	cbz	r5, 2268a <pend+0x36>
	return list->head == list;
   2266a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2266c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2266e:	429d      	cmp	r5, r3
   22670:	d029      	beq.n	226c6 <pend+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22672:	b343      	cbz	r3, 226c6 <pend+0x72>
	if (t1->base.prio < t2->base.prio) {
   22674:	f994 200e 	ldrsb.w	r2, [r4, #14]
   22678:	f993 100e 	ldrsb.w	r1, [r3, #14]
   2267c:	4291      	cmp	r1, r2
   2267e:	dd1c      	ble.n	226ba <pend+0x66>
	node->prev = successor->prev;
   22680:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   22682:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   22686:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22688:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   2268a:	1c73      	adds	r3, r6, #1
   2268c:	d022      	beq.n	226d4 <pend+0x80>
   2268e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   22692:	f240 30e7 	movw	r0, #999	; 0x3e7
   22696:	2100      	movs	r1, #0
   22698:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   2269c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   226a0:	fbc5 0106 	smlal	r0, r1, r5, r6
   226a4:	2300      	movs	r3, #0
   226a6:	f7e9 fdbb 	bl	c220 <__aeabi_uldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   226aa:	490b      	ldr	r1, [pc, #44]	; (226d8 <pend+0x84>)
   226ac:	1c42      	adds	r2, r0, #1
   226ae:	f104 0018 	add.w	r0, r4, #24
}
   226b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   226b6:	f000 bb17 	b.w	22ce8 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   226ba:	6869      	ldr	r1, [r5, #4]
   226bc:	428b      	cmp	r3, r1
   226be:	d002      	beq.n	226c6 <pend+0x72>
   226c0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   226c2:	2b00      	cmp	r3, #0
   226c4:	d1d8      	bne.n	22678 <pend+0x24>
	node->prev = list->tail;
   226c6:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   226c8:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   226ca:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   226cc:	686b      	ldr	r3, [r5, #4]
   226ce:	601c      	str	r4, [r3, #0]
	list->tail = node;
   226d0:	606c      	str	r4, [r5, #4]
   226d2:	e7da      	b.n	2268a <pend+0x36>
}
   226d4:	bd70      	pop	{r4, r5, r6, pc}
   226d6:	bf00      	nop
   226d8:	00025d0d 	.word	0x00025d0d

000226dc <z_pend_curr_irqlock>:
{
   226dc:	b570      	push	{r4, r5, r6, lr}
   226de:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   226e0:	4d0e      	ldr	r5, [pc, #56]	; (2271c <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
   226e2:	4c0f      	ldr	r4, [pc, #60]	; (22720 <z_pend_curr_irqlock+0x44>)
	pend(_current, wait_q, timeout);
   226e4:	68a8      	ldr	r0, [r5, #8]
   226e6:	f7ff ffb5 	bl	22654 <pend>
	pending_current = _current;
   226ea:	68ab      	ldr	r3, [r5, #8]
	int ret = z_swap_irqlock(key);
   226ec:	4630      	mov	r0, r6
	pending_current = _current;
   226ee:	6023      	str	r3, [r4, #0]
	int ret = z_swap_irqlock(key);
   226f0:	f003 fa8c 	bl	25c0c <z_swap_irqlock>
	__asm__ volatile(
   226f4:	f04f 0220 	mov.w	r2, #32
   226f8:	f3ef 8311 	mrs	r3, BASEPRI
   226fc:	f382 8811 	msr	BASEPRI, r2
   22700:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
   22704:	6822      	ldr	r2, [r4, #0]
   22706:	68a9      	ldr	r1, [r5, #8]
   22708:	4291      	cmp	r1, r2
			pending_current = NULL;
   2270a:	bf04      	itt	eq
   2270c:	2200      	moveq	r2, #0
   2270e:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
   22710:	f383 8811 	msr	BASEPRI, r3
   22714:	f3bf 8f6f 	isb	sy
}
   22718:	bd70      	pop	{r4, r5, r6, pc}
   2271a:	bf00      	nop
   2271c:	20025cfc 	.word	0x20025cfc
   22720:	20025d30 	.word	0x20025d30

00022724 <z_pend_curr>:
{
   22724:	b510      	push	{r4, lr}
   22726:	460c      	mov	r4, r1
   22728:	4611      	mov	r1, r2
	pending_current = _current;
   2272a:	4a06      	ldr	r2, [pc, #24]	; (22744 <z_pend_curr+0x20>)
   2272c:	6890      	ldr	r0, [r2, #8]
   2272e:	4a06      	ldr	r2, [pc, #24]	; (22748 <z_pend_curr+0x24>)
   22730:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   22732:	461a      	mov	r2, r3
   22734:	f7ff ff8e 	bl	22654 <pend>
 * handling.
 */
static ALWAYS_INLINE int z_swap(struct k_spinlock *lock, k_spinlock_key_t key)
{
	k_spin_release(lock);
	return z_swap_irqlock(key.key);
   22738:	4620      	mov	r0, r4
}
   2273a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2273e:	f003 ba65 	b.w	25c0c <z_swap_irqlock>
   22742:	bf00      	nop
   22744:	20025cfc 	.word	0x20025cfc
   22748:	20025d30 	.word	0x20025d30

0002274c <z_tick_sleep.part.18>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
   2274c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
   2274e:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   22750:	f003 fbf4 	bl	25f3c <z_tick_get_32>
   22754:	1834      	adds	r4, r6, r0
	__asm__ volatile(
   22756:	f04f 0320 	mov.w	r3, #32
   2275a:	f3ef 8711 	mrs	r7, BASEPRI
   2275e:	f383 8811 	msr	BASEPRI, r3
   22762:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   22766:	4d0d      	ldr	r5, [pc, #52]	; (2279c <z_tick_sleep.part.18+0x50>)
   22768:	4b0d      	ldr	r3, [pc, #52]	; (227a0 <z_tick_sleep.part.18+0x54>)
   2276a:	68a8      	ldr	r0, [r5, #8]
   2276c:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   2276e:	f7ff ff4b 	bl	22608 <z_remove_thread_from_ready_q>
   22772:	68a8      	ldr	r0, [r5, #8]
   22774:	490b      	ldr	r1, [pc, #44]	; (227a4 <z_tick_sleep.part.18+0x58>)
   22776:	4632      	mov	r2, r6
   22778:	3018      	adds	r0, #24
   2277a:	f000 fab5 	bl	22ce8 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
   2277e:	68aa      	ldr	r2, [r5, #8]
   22780:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   22782:	7b53      	ldrb	r3, [r2, #13]
   22784:	f043 0310 	orr.w	r3, r3, #16
   22788:	7353      	strb	r3, [r2, #13]
   2278a:	f003 fa3f 	bl	25c0c <z_swap_irqlock>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   2278e:	f003 fbd5 	bl	25f3c <z_tick_get_32>
   22792:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   22794:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   22798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2279a:	bf00      	nop
   2279c:	20025cfc 	.word	0x20025cfc
   227a0:	20025d30 	.word	0x20025d30
   227a4:	00025d0d 	.word	0x00025d0d

000227a8 <z_set_prio>:
{
   227a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   227ac:	4604      	mov	r4, r0
   227ae:	f04f 0320 	mov.w	r3, #32
   227b2:	f3ef 8911 	mrs	r9, BASEPRI
   227b6:	f383 8811 	msr	BASEPRI, r3
   227ba:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
   227be:	f003 fa1c 	bl	25bfa <z_is_thread_ready>
		if (need_sched) {
   227c2:	b24e      	sxtb	r6, r1
   227c4:	4680      	mov	r8, r0
   227c6:	b360      	cbz	r0, 22822 <z_set_prio+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   227c8:	4d17      	ldr	r5, [pc, #92]	; (22828 <z_set_prio+0x80>)
   227ca:	4621      	mov	r1, r4
   227cc:	f105 0728 	add.w	r7, r5, #40	; 0x28
   227d0:	4638      	mov	r0, r7
   227d2:	f7ff fe1b 	bl	2240c <z_priq_dumb_remove>
	return list->head == list;
   227d6:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
   227d8:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   227da:	42bb      	cmp	r3, r7
   227dc:	462a      	mov	r2, r5
   227de:	d019      	beq.n	22814 <z_set_prio+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   227e0:	b1c3      	cbz	r3, 22814 <z_set_prio+0x6c>
   227e2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   227e4:	f993 000e 	ldrsb.w	r0, [r3, #14]
   227e8:	42b0      	cmp	r0, r6
   227ea:	dd0e      	ble.n	2280a <z_set_prio+0x62>
	node->prev = successor->prev;
   227ec:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   227ee:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   227f2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   227f4:	605c      	str	r4, [r3, #4]
			update_cache(1);
   227f6:	2001      	movs	r0, #1
   227f8:	f7ff fe1e 	bl	22438 <update_cache>
	__asm__ volatile(
   227fc:	f389 8811 	msr	BASEPRI, r9
   22800:	f3bf 8f6f 	isb	sy
}
   22804:	4640      	mov	r0, r8
   22806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (node == list->tail) ? NULL : node->next;
   2280a:	4299      	cmp	r1, r3
   2280c:	d002      	beq.n	22814 <z_set_prio+0x6c>
   2280e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22810:	2b00      	cmp	r3, #0
   22812:	d1e7      	bne.n	227e4 <z_set_prio+0x3c>
	node->prev = list->tail;
   22814:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   22816:	6027      	str	r7, [r4, #0]
	node->prev = list->tail;
   22818:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2281a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2281c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2281e:	62d4      	str	r4, [r2, #44]	; 0x2c
   22820:	e7e9      	b.n	227f6 <z_set_prio+0x4e>
			thread->base.prio = prio;
   22822:	73a6      	strb	r6, [r4, #14]
   22824:	e7ea      	b.n	227fc <z_set_prio+0x54>
   22826:	bf00      	nop
   22828:	20025cfc 	.word	0x20025cfc

0002282c <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   2282c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   2282e:	4b04      	ldr	r3, [pc, #16]	; (22840 <z_sched_init+0x14>)
   22830:	4608      	mov	r0, r1
   22832:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   22836:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   2283a:	f7ff bda7 	b.w	2238c <k_sched_time_slice_set>
   2283e:	bf00      	nop
   22840:	20025cfc 	.word	0x20025cfc

00022844 <z_impl_k_yield>:
{
   22844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   22846:	4c23      	ldr	r4, [pc, #140]	; (228d4 <z_impl_k_yield+0x90>)
   22848:	4b23      	ldr	r3, [pc, #140]	; (228d8 <z_impl_k_yield+0x94>)
   2284a:	68a2      	ldr	r2, [r4, #8]
   2284c:	429a      	cmp	r2, r3
   2284e:	d029      	beq.n	228a4 <z_impl_k_yield+0x60>
	__asm__ volatile(
   22850:	f04f 0320 	mov.w	r3, #32
   22854:	f3ef 8611 	mrs	r6, BASEPRI
   22858:	f383 8811 	msr	BASEPRI, r3
   2285c:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   22860:	f104 0528 	add.w	r5, r4, #40	; 0x28
   22864:	68a1      	ldr	r1, [r4, #8]
   22866:	4628      	mov	r0, r5
   22868:	f7ff fdd0 	bl	2240c <z_priq_dumb_remove>
	return list->head == list;
   2286c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   2286e:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22870:	42aa      	cmp	r2, r5
   22872:	d028      	beq.n	228c6 <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22874:	b33a      	cbz	r2, 228c6 <z_impl_k_yield+0x82>
   22876:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   22878:	f993 100e 	ldrsb.w	r1, [r3, #14]
   2287c:	f992 700e 	ldrsb.w	r7, [r2, #14]
   22880:	428f      	cmp	r7, r1
   22882:	dd1b      	ble.n	228bc <z_impl_k_yield+0x78>
	node->prev = successor->prev;
   22884:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   22886:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   2288a:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   2288c:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   2288e:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
   22890:	2001      	movs	r0, #1
   22892:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   22896:	735a      	strb	r2, [r3, #13]
   22898:	f7ff fdce 	bl	22438 <update_cache>
	__asm__ volatile(
   2289c:	f386 8811 	msr	BASEPRI, r6
   228a0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   228a4:	f04f 0320 	mov.w	r3, #32
   228a8:	f3ef 8011 	mrs	r0, BASEPRI
   228ac:	f383 8811 	msr	BASEPRI, r3
   228b0:	f3bf 8f6f 	isb	sy
}
   228b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
}

static inline void z_swap_unlocked(void)
{
	(void) z_swap_irqlock(arch_irq_lock());
   228b8:	f003 b9a8 	b.w	25c0c <z_swap_irqlock>
	return (node == list->tail) ? NULL : node->next;
   228bc:	4282      	cmp	r2, r0
   228be:	d002      	beq.n	228c6 <z_impl_k_yield+0x82>
   228c0:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   228c2:	2a00      	cmp	r2, #0
   228c4:	d1da      	bne.n	2287c <z_impl_k_yield+0x38>
	node->prev = list->tail;
   228c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
   228c8:	601d      	str	r5, [r3, #0]
	node->prev = list->tail;
   228ca:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   228cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   228ce:	6013      	str	r3, [r2, #0]
	list->tail = node;
   228d0:	62e3      	str	r3, [r4, #44]	; 0x2c
   228d2:	e7dc      	b.n	2288e <z_impl_k_yield+0x4a>
   228d4:	20025cfc 	.word	0x20025cfc
   228d8:	20021b38 	.word	0x20021b38

000228dc <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
   228dc:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	if (ms == K_FOREVER) {
   228de:	1c43      	adds	r3, r0, #1
{
   228e0:	4604      	mov	r4, r0
	if (ms == K_FOREVER) {
   228e2:	d105      	bne.n	228f0 <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
   228e4:	4b10      	ldr	r3, [pc, #64]	; (22928 <z_impl_k_sleep+0x4c>)
   228e6:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   228e8:	f000 f912 	bl	22b10 <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   228ec:	4620      	mov	r0, r4
   228ee:	bd38      	pop	{r3, r4, r5, pc}
   228f0:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   228f4:	f240 30e7 	movw	r0, #999	; 0x3e7
   228f8:	2100      	movs	r1, #0
   228fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   228fe:	fbe5 0104 	umlal	r0, r1, r5, r4
   22902:	2300      	movs	r3, #0
   22904:	f7e9 fc8c 	bl	c220 <__aeabi_uldivmod>
	if (ticks == 0) {
   22908:	4604      	mov	r4, r0
   2290a:	b948      	cbnz	r0, 22920 <z_impl_k_sleep+0x44>
	z_impl_k_yield();
   2290c:	f7ff ff9a 	bl	22844 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
   22910:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   22914:	fb84 0100 	smull	r0, r1, r4, r0
   22918:	0bc4      	lsrs	r4, r0, #15
   2291a:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   2291e:	e7e5      	b.n	228ec <z_impl_k_sleep+0x10>
   22920:	f7ff ff14 	bl	2274c <z_tick_sleep.part.18>
   22924:	4604      	mov	r4, r0
   22926:	e7f3      	b.n	22910 <z_impl_k_sleep+0x34>
   22928:	20025cfc 	.word	0x20025cfc

0002292c <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   2292c:	4b01      	ldr	r3, [pc, #4]	; (22934 <z_impl_k_current_get+0x8>)
   2292e:	6898      	ldr	r0, [r3, #8]
   22930:	4770      	bx	lr
   22932:	bf00      	nop
   22934:	20025cfc 	.word	0x20025cfc

00022938 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   22938:	b570      	push	{r4, r5, r6, lr}
   2293a:	4604      	mov	r4, r0
   2293c:	f04f 0320 	mov.w	r3, #32
   22940:	f3ef 8611 	mrs	r6, BASEPRI
   22944:	f383 8811 	msr	BASEPRI, r3
   22948:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   2294c:	f003 fa0f 	bl	25d6e <z_unpend_first_thread>
	if (thread != NULL) {
   22950:	4605      	mov	r5, r0
   22952:	b170      	cbz	r0, 22972 <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   22954:	7b43      	ldrb	r3, [r0, #13]
   22956:	06db      	lsls	r3, r3, #27
   22958:	d103      	bne.n	22962 <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
   2295a:	6983      	ldr	r3, [r0, #24]
   2295c:	b90b      	cbnz	r3, 22962 <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
   2295e:	f7ff fda5 	bl	224ac <z_add_thread_to_ready_q>
   22962:	2300      	movs	r3, #0
   22964:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   22966:	4631      	mov	r1, r6
}
   22968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   2296c:	4807      	ldr	r0, [pc, #28]	; (2298c <z_impl_k_sem_give+0x54>)
   2296e:	f003 b988 	b.w	25c82 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   22972:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   22976:	429a      	cmp	r2, r3
   22978:	bf18      	it	ne
   2297a:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2297c:	2102      	movs	r1, #2
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2297e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   22980:	f104 0010 	add.w	r0, r4, #16
   22984:	f003 fc11 	bl	261aa <z_handle_obj_poll_events>
   22988:	e7ed      	b.n	22966 <z_impl_k_sem_give+0x2e>
   2298a:	bf00      	nop
   2298c:	20027450 	.word	0x20027450

00022990 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   22990:	b410      	push	{r4}
   22992:	4602      	mov	r2, r0
   22994:	460b      	mov	r3, r1
   22996:	f04f 0020 	mov.w	r0, #32
   2299a:	f3ef 8111 	mrs	r1, BASEPRI
   2299e:	f380 8811 	msr	BASEPRI, r0
   229a2:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   229a6:	6894      	ldr	r4, [r2, #8]
   229a8:	b14c      	cbz	r4, 229be <z_impl_k_sem_take+0x2e>
		sem->count--;
   229aa:	3c01      	subs	r4, #1
   229ac:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
   229ae:	f381 8811 	msr	BASEPRI, r1
   229b2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   229b6:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   229b8:	f85d 4b04 	ldr.w	r4, [sp], #4
   229bc:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   229be:	b933      	cbnz	r3, 229ce <z_impl_k_sem_take+0x3e>
   229c0:	f381 8811 	msr	BASEPRI, r1
   229c4:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   229c8:	f06f 000f 	mvn.w	r0, #15
   229cc:	e7f4      	b.n	229b8 <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   229ce:	4802      	ldr	r0, [pc, #8]	; (229d8 <z_impl_k_sem_take+0x48>)
}
   229d0:	f85d 4b04 	ldr.w	r4, [sp], #4
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   229d4:	f7ff bea6 	b.w	22724 <z_pend_curr>
   229d8:	20027450 	.word	0x20027450

000229dc <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   229dc:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   229de:	4c08      	ldr	r4, [pc, #32]	; (22a00 <k_sys_work_q_init+0x24>)
   229e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   229e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   229e8:	4906      	ldr	r1, [pc, #24]	; (22a04 <k_sys_work_q_init+0x28>)
   229ea:	4620      	mov	r0, r4
   229ec:	f000 f91e 	bl	22c2c <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   229f0:	4905      	ldr	r1, [pc, #20]	; (22a08 <k_sys_work_q_init+0x2c>)
   229f2:	f104 0010 	add.w	r0, r4, #16
   229f6:	f003 fa0f 	bl	25e18 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   229fa:	2000      	movs	r0, #0
   229fc:	bd10      	pop	{r4, pc}
   229fe:	bf00      	nop
   22a00:	20025d3c 	.word	0x20025d3c
   22a04:	200299d0 	.word	0x200299d0
   22a08:	00028e03 	.word	0x00028e03

00022a0c <z_check_stack_sentinel>:
 */
void z_check_stack_sentinel(void)
{
	u32_t *stack;

	if ((_current->base.thread_state & _THREAD_DUMMY) != 0) {
   22a0c:	4b09      	ldr	r3, [pc, #36]	; (22a34 <z_check_stack_sentinel+0x28>)
   22a0e:	689b      	ldr	r3, [r3, #8]
   22a10:	7b5a      	ldrb	r2, [r3, #13]
   22a12:	07d2      	lsls	r2, r2, #31
   22a14:	d40d      	bmi.n	22a32 <z_check_stack_sentinel+0x26>
		return;
	}

	stack = (u32_t *)_current->stack_info.start;
   22a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
	if (*stack != STACK_SENTINEL) {
   22a18:	681a      	ldr	r2, [r3, #0]
   22a1a:	f1b2 3ff0 	cmp.w	r2, #4042322160	; 0xf0f0f0f0
   22a1e:	d008      	beq.n	22a32 <z_check_stack_sentinel+0x26>
		/* Restore it so further checks don't trigger this same error */
		*stack = STACK_SENTINEL;
   22a20:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
   22a24:	601a      	str	r2, [r3, #0]
		z_except_reason(K_ERR_STACK_CHK_FAIL);
   22a26:	4040      	eors	r0, r0
   22a28:	f380 8811 	msr	BASEPRI, r0
   22a2c:	f04f 0002 	mov.w	r0, #2
   22a30:	df02      	svc	2
	}
}
   22a32:	4770      	bx	lr
   22a34:	20025cfc 	.word	0x20025cfc

00022a38 <z_impl_k_thread_start>:
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
   22a38:	b510      	push	{r4, lr}
   22a3a:	4602      	mov	r2, r0
	__asm__ volatile(
   22a3c:	f04f 0320 	mov.w	r3, #32
   22a40:	f3ef 8411 	mrs	r4, BASEPRI
   22a44:	f383 8811 	msr	BASEPRI, r3
   22a48:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
   22a4c:	7b43      	ldrb	r3, [r0, #13]
   22a4e:	0759      	lsls	r1, r3, #29
   22a50:	d404      	bmi.n	22a5c <z_impl_k_thread_start+0x24>
	__asm__ volatile(
   22a52:	f384 8811 	msr	BASEPRI, r4
   22a56:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
   22a5a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   22a5c:	f023 0304 	bic.w	r3, r3, #4
   22a60:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   22a62:	f003 f9d0 	bl	25e06 <z_is_thread_ready>
   22a66:	b110      	cbz	r0, 22a6e <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
   22a68:	4610      	mov	r0, r2
   22a6a:	f7ff fd1f 	bl	224ac <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   22a6e:	4621      	mov	r1, r4
}
   22a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   22a74:	4801      	ldr	r0, [pc, #4]	; (22a7c <z_impl_k_thread_start+0x44>)
   22a76:	f003 b904 	b.w	25c82 <z_reschedule>
   22a7a:	bf00      	nop
   22a7c:	20027450 	.word	0x20027450

00022a80 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   22a80:	b530      	push	{r4, r5, lr}
   22a82:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22a84:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   22a86:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22a88:	9504      	str	r5, [sp, #16]
   22a8a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   22a8c:	9503      	str	r5, [sp, #12]
   22a8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   22a90:	9502      	str	r5, [sp, #8]
   22a92:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   22a94:	9501      	str	r5, [sp, #4]
   22a96:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   22a98:	9500      	str	r5, [sp, #0]
   22a9a:	f7ed fa7d 	bl	ff98 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   22a9e:	4b03      	ldr	r3, [pc, #12]	; (22aac <z_setup_new_thread+0x2c>)
   22aa0:	689b      	ldr	r3, [r3, #8]
   22aa2:	b103      	cbz	r3, 22aa6 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   22aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   22aa6:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   22aa8:	b007      	add	sp, #28
   22aaa:	bd30      	pop	{r4, r5, pc}
   22aac:	20025cfc 	.word	0x20025cfc

00022ab0 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   22ab0:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22ab2:	2600      	movs	r6, #0
{
   22ab4:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22ab6:	9605      	str	r6, [sp, #20]
   22ab8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
{
   22aba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22abc:	9604      	str	r6, [sp, #16]
   22abe:	9e0d      	ldr	r6, [sp, #52]	; 0x34
{
   22ac0:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22ac2:	9603      	str	r6, [sp, #12]
   22ac4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   22ac6:	9602      	str	r6, [sp, #8]
   22ac8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   22aca:	9601      	str	r6, [sp, #4]
   22acc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   22ace:	9600      	str	r6, [sp, #0]
   22ad0:	f7ff ffd6 	bl	22a80 <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
   22ad4:	1c6b      	adds	r3, r5, #1
   22ad6:	d003      	beq.n	22ae0 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
   22ad8:	b92d      	cbnz	r5, 22ae6 <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
   22ada:	4620      	mov	r0, r4
   22adc:	f7ff ffac 	bl	22a38 <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   22ae0:	4620      	mov	r0, r4
   22ae2:	b006      	add	sp, #24
   22ae4:	bd70      	pop	{r4, r5, r6, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   22ae6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   22aea:	f240 30e7 	movw	r0, #999	; 0x3e7
   22aee:	2100      	movs	r1, #0
   22af0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22af4:	2300      	movs	r3, #0
   22af6:	fbe6 0105 	umlal	r0, r1, r6, r5
   22afa:	f7e9 fb91 	bl	c220 <__aeabi_uldivmod>
   22afe:	4903      	ldr	r1, [pc, #12]	; (22b0c <z_impl_k_thread_create+0x5c>)
   22b00:	1c42      	adds	r2, r0, #1
   22b02:	f104 0018 	add.w	r0, r4, #24
   22b06:	f000 f8ef 	bl	22ce8 <z_add_timeout>
   22b0a:	e7e9      	b.n	22ae0 <z_impl_k_thread_create+0x30>
   22b0c:	00025d0d 	.word	0x00025d0d

00022b10 <z_impl_k_thread_suspend>:

	z_mark_thread_as_suspended(thread);
}

void z_impl_k_thread_suspend(struct k_thread *thread)
{
   22b10:	b538      	push	{r3, r4, r5, lr}
   22b12:	4605      	mov	r5, r0
	__asm__ volatile(
   22b14:	f04f 0320 	mov.w	r3, #32
   22b18:	f3ef 8411 	mrs	r4, BASEPRI
   22b1c:	f383 8811 	msr	BASEPRI, r3
   22b20:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
   22b24:	f003 f98f 	bl	25e46 <z_thread_single_suspend>

	sys_trace_thread_suspend(thread);

	if (thread == _current) {
   22b28:	4b07      	ldr	r3, [pc, #28]	; (22b48 <z_impl_k_thread_suspend+0x38>)
   22b2a:	689b      	ldr	r3, [r3, #8]
   22b2c:	42ab      	cmp	r3, r5
   22b2e:	d105      	bne.n	22b3c <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
   22b30:	4621      	mov	r1, r4
	} else {
		k_spin_unlock(&lock, key);
	}
}
   22b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   22b36:	4805      	ldr	r0, [pc, #20]	; (22b4c <z_impl_k_thread_suspend+0x3c>)
   22b38:	f003 b8a3 	b.w	25c82 <z_reschedule>
	__asm__ volatile(
   22b3c:	f384 8811 	msr	BASEPRI, r4
   22b40:	f3bf 8f6f 	isb	sy
}
   22b44:	bd38      	pop	{r3, r4, r5, pc}
   22b46:	bf00      	nop
   22b48:	20025cfc 	.word	0x20025cfc
   22b4c:	20027450 	.word	0x20027450

00022b50 <z_impl_k_thread_resume>:
	z_mark_thread_as_not_suspended(thread);
	z_ready_thread(thread);
}

void z_impl_k_thread_resume(struct k_thread *thread)
{
   22b50:	b510      	push	{r4, lr}
	__asm__ volatile(
   22b52:	f04f 0320 	mov.w	r3, #32
   22b56:	f3ef 8411 	mrs	r4, BASEPRI
   22b5a:	f383 8811 	msr	BASEPRI, r3
   22b5e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_resume(thread);
   22b62:	f003 f97d 	bl	25e60 <z_thread_single_resume>

	sys_trace_thread_resume(thread);
	z_reschedule(&lock, key);
   22b66:	4621      	mov	r1, r4
}
   22b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   22b6c:	4801      	ldr	r0, [pc, #4]	; (22b74 <z_impl_k_thread_resume+0x24>)
   22b6e:	f003 b888 	b.w	25c82 <z_reschedule>
   22b72:	bf00      	nop
   22b74:	20027450 	.word	0x20027450

00022b78 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   22b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   22b7c:	4e28      	ldr	r6, [pc, #160]	; (22c20 <z_init_static_threads+0xa8>)
   22b7e:	4d29      	ldr	r5, [pc, #164]	; (22c24 <z_init_static_threads+0xac>)
   22b80:	46b0      	mov	r8, r6
{
   22b82:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   22b84:	42b5      	cmp	r5, r6
   22b86:	f105 0430 	add.w	r4, r5, #48	; 0x30
   22b8a:	d310      	bcc.n	22bae <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   22b8c:	f7ff fc2a 	bl	223e4 <k_sched_lock>
   22b90:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   22b94:	f240 36e7 	movw	r6, #999	; 0x3e7
   22b98:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   22b9a:	4c22      	ldr	r4, [pc, #136]	; (22c24 <z_init_static_threads+0xac>)
   22b9c:	f8df a088 	ldr.w	sl, [pc, #136]	; 22c28 <z_init_static_threads+0xb0>
   22ba0:	4544      	cmp	r4, r8
   22ba2:	d321      	bcc.n	22be8 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
   22ba4:	b007      	add	sp, #28
   22ba6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   22baa:	f7ff bc63 	b.w	22474 <k_sched_unlock>
		z_setup_new_thread(
   22bae:	f854 3c04 	ldr.w	r3, [r4, #-4]
   22bb2:	9305      	str	r3, [sp, #20]
   22bb4:	f854 3c10 	ldr.w	r3, [r4, #-16]
   22bb8:	9304      	str	r3, [sp, #16]
   22bba:	f854 3c14 	ldr.w	r3, [r4, #-20]
   22bbe:	9303      	str	r3, [sp, #12]
   22bc0:	f854 3c18 	ldr.w	r3, [r4, #-24]
   22bc4:	9302      	str	r3, [sp, #8]
   22bc6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   22bca:	9301      	str	r3, [sp, #4]
   22bcc:	f854 3c20 	ldr.w	r3, [r4, #-32]
   22bd0:	9300      	str	r3, [sp, #0]
   22bd2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   22bd6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   22bda:	f7ff ff51 	bl	22a80 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   22bde:	f854 3c30 	ldr.w	r3, [r4, #-48]
   22be2:	64dd      	str	r5, [r3, #76]	; 0x4c
   22be4:	4625      	mov	r5, r4
   22be6:	e7cd      	b.n	22b84 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   22be8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   22bea:	1c4b      	adds	r3, r1, #1
   22bec:	d004      	beq.n	22bf8 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
   22bee:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   22bf0:	b921      	cbnz	r1, 22bfc <z_init_static_threads+0x84>
   22bf2:	4628      	mov	r0, r5
   22bf4:	f7ff ff20 	bl	22a38 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   22bf8:	3430      	adds	r4, #48	; 0x30
   22bfa:	e7d1      	b.n	22ba0 <z_init_static_threads+0x28>
   22bfc:	46b3      	mov	fp, r6
   22bfe:	46bc      	mov	ip, r7
   22c00:	fbe9 bc01 	umlal	fp, ip, r9, r1
   22c04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22c08:	2300      	movs	r3, #0
   22c0a:	4658      	mov	r0, fp
   22c0c:	4661      	mov	r1, ip
   22c0e:	f7e9 fb07 	bl	c220 <__aeabi_uldivmod>
   22c12:	4651      	mov	r1, sl
   22c14:	1c42      	adds	r2, r0, #1
   22c16:	f105 0018 	add.w	r0, r5, #24
   22c1a:	f000 f865 	bl	22ce8 <z_add_timeout>
   22c1e:	e7eb      	b.n	22bf8 <z_init_static_threads+0x80>
   22c20:	2002d548 	.word	0x2002d548
   22c24:	2002d548 	.word	0x2002d548
   22c28:	00025d0d 	.word	0x00025d0d

00022c2c <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   22c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22c30:	4605      	mov	r5, r0
   22c32:	b086      	sub	sp, #24
   22c34:	460e      	mov	r6, r1
   22c36:	4617      	mov	r7, r2
   22c38:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   22c3a:	f002 ff6c 	bl	25b16 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   22c3e:	f105 0410 	add.w	r4, r5, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   22c42:	2000      	movs	r0, #0
   22c44:	4b09      	ldr	r3, [pc, #36]	; (22c6c <k_work_q_start+0x40>)
   22c46:	e9cd 0004 	strd	r0, r0, [sp, #16]
   22c4a:	e9cd 0802 	strd	r0, r8, [sp, #8]
   22c4e:	e9cd 5000 	strd	r5, r0, [sp]
   22c52:	463a      	mov	r2, r7
   22c54:	4631      	mov	r1, r6
   22c56:	4620      	mov	r0, r4
   22c58:	f7ff ff2a 	bl	22ab0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   22c5c:	4620      	mov	r0, r4
   22c5e:	4904      	ldr	r1, [pc, #16]	; (22c70 <k_work_q_start+0x44>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   22c60:	b006      	add	sp, #24
   22c62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22c66:	f003 b8d7 	b.w	25e18 <z_impl_k_thread_name_set>
   22c6a:	bf00      	nop
   22c6c:	000239b7 	.word	0x000239b7
   22c70:	00028e0c 	.word	0x00028e0c

00022c74 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   22c74:	4b03      	ldr	r3, [pc, #12]	; (22c84 <elapsed+0x10>)
   22c76:	681b      	ldr	r3, [r3, #0]
   22c78:	b90b      	cbnz	r3, 22c7e <elapsed+0xa>
   22c7a:	f7ed b88d 	b.w	fd98 <z_clock_elapsed>
}
   22c7e:	2000      	movs	r0, #0
   22c80:	4770      	bx	lr
   22c82:	bf00      	nop
   22c84:	20025dfc 	.word	0x20025dfc

00022c88 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22c88:	6803      	ldr	r3, [r0, #0]
   22c8a:	b140      	cbz	r0, 22c9e <remove_timeout+0x16>
   22c8c:	4a07      	ldr	r2, [pc, #28]	; (22cac <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   22c8e:	6852      	ldr	r2, [r2, #4]
   22c90:	4290      	cmp	r0, r2
   22c92:	d004      	beq.n	22c9e <remove_timeout+0x16>
	if (next(t) != NULL) {
   22c94:	b11b      	cbz	r3, 22c9e <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   22c96:	689a      	ldr	r2, [r3, #8]
   22c98:	6881      	ldr	r1, [r0, #8]
   22c9a:	440a      	add	r2, r1
   22c9c:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   22c9e:	6842      	ldr	r2, [r0, #4]
   22ca0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   22ca2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22ca4:	2300      	movs	r3, #0
	node->prev = NULL;
   22ca6:	e9c0 3300 	strd	r3, r3, [r0]
}
   22caa:	4770      	bx	lr
   22cac:	2002d45c 	.word	0x2002d45c

00022cb0 <next_timeout>:
	return list->head == list;
   22cb0:	4b0b      	ldr	r3, [pc, #44]	; (22ce0 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   22cb2:	b510      	push	{r4, lr}
   22cb4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22cb6:	429c      	cmp	r4, r3
   22cb8:	bf08      	it	eq
   22cba:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   22cbc:	f7ff ffda 	bl	22c74 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   22cc0:	b154      	cbz	r4, 22cd8 <next_timeout+0x28>
   22cc2:	68a3      	ldr	r3, [r4, #8]
   22cc4:	1a18      	subs	r0, r3, r0
   22cc6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   22cca:	4b06      	ldr	r3, [pc, #24]	; (22ce4 <next_timeout+0x34>)
   22ccc:	691b      	ldr	r3, [r3, #16]
   22cce:	b113      	cbz	r3, 22cd6 <next_timeout+0x26>
   22cd0:	4298      	cmp	r0, r3
   22cd2:	bfa8      	it	ge
   22cd4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   22cd6:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   22cd8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   22cdc:	e7f5      	b.n	22cca <next_timeout+0x1a>
   22cde:	bf00      	nop
   22ce0:	2002d45c 	.word	0x2002d45c
   22ce4:	20025cfc 	.word	0x20025cfc

00022ce8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   22ce8:	b570      	push	{r4, r5, r6, lr}
   22cea:	4604      	mov	r4, r0
   22cec:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   22cee:	60c1      	str	r1, [r0, #12]
   22cf0:	f04f 0320 	mov.w	r3, #32
   22cf4:	f3ef 8511 	mrs	r5, BASEPRI
   22cf8:	f383 8811 	msr	BASEPRI, r3
   22cfc:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   22d00:	f7ff ffb8 	bl	22c74 <elapsed>
   22d04:	2e01      	cmp	r6, #1
   22d06:	bfac      	ite	ge
   22d08:	1980      	addge	r0, r0, r6
   22d0a:	3001      	addlt	r0, #1
	return list->head == list;
   22d0c:	4b16      	ldr	r3, [pc, #88]	; (22d68 <z_add_timeout+0x80>)
   22d0e:	60a0      	str	r0, [r4, #8]
   22d10:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22d12:	429a      	cmp	r2, r3
   22d14:	d001      	beq.n	22d1a <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22d16:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   22d18:	b932      	cbnz	r2, 22d28 <z_add_timeout+0x40>
	node->prev = list->tail;
   22d1a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   22d1c:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   22d1e:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   22d20:	685a      	ldr	r2, [r3, #4]
   22d22:	6014      	str	r4, [r2, #0]
	list->tail = node;
   22d24:	605c      	str	r4, [r3, #4]
   22d26:	e00a      	b.n	22d3e <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   22d28:	6890      	ldr	r0, [r2, #8]
   22d2a:	68a1      	ldr	r1, [r4, #8]
   22d2c:	4288      	cmp	r0, r1
   22d2e:	dd15      	ble.n	22d5c <z_add_timeout+0x74>
				t->dticks -= to->dticks;
   22d30:	1a41      	subs	r1, r0, r1
   22d32:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   22d34:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   22d36:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
   22d3a:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   22d3c:	6054      	str	r4, [r2, #4]
	return list->head == list;
   22d3e:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22d40:	429a      	cmp	r2, r3
   22d42:	d006      	beq.n	22d52 <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   22d44:	4294      	cmp	r4, r2
   22d46:	d104      	bne.n	22d52 <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
   22d48:	f7ff ffb2 	bl	22cb0 <next_timeout>
   22d4c:	2100      	movs	r1, #0
   22d4e:	f7ec ffd5 	bl	fcfc <z_clock_set_timeout>
	__asm__ volatile(
   22d52:	f385 8811 	msr	BASEPRI, r5
   22d56:	f3bf 8f6f 	isb	sy
		}
	}
}
   22d5a:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
   22d5c:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   22d5e:	4296      	cmp	r6, r2
   22d60:	60a1      	str	r1, [r4, #8]
   22d62:	d0da      	beq.n	22d1a <z_add_timeout+0x32>
   22d64:	6812      	ldr	r2, [r2, #0]
   22d66:	e7d7      	b.n	22d18 <z_add_timeout+0x30>
   22d68:	2002d45c 	.word	0x2002d45c

00022d6c <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   22d6c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   22d70:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   22d72:	f7ff fc13 	bl	2259c <z_time_slice>
	__asm__ volatile(
   22d76:	f04f 0320 	mov.w	r3, #32
   22d7a:	f3ef 8511 	mrs	r5, BASEPRI
   22d7e:	f383 8811 	msr	BASEPRI, r3
   22d82:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   22d86:	4f21      	ldr	r7, [pc, #132]	; (22e0c <z_clock_announce+0xa0>)
   22d88:	4e21      	ldr	r6, [pc, #132]	; (22e10 <z_clock_announce+0xa4>)
   22d8a:	46b8      	mov	r8, r7
	return list->head == list;
   22d8c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 22e14 <z_clock_announce+0xa8>
   22d90:	6034      	str	r4, [r6, #0]
   22d92:	f8d9 4000 	ldr.w	r4, [r9]
   22d96:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22d98:	454c      	cmp	r4, r9
   22d9a:	e9d7 bc00 	ldrd	fp, ip, [r7]
   22d9e:	d005      	beq.n	22dac <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   22da0:	b124      	cbz	r4, 22dac <z_clock_announce+0x40>
   22da2:	68a3      	ldr	r3, [r4, #8]
   22da4:	4293      	cmp	r3, r2
   22da6:	dd14      	ble.n	22dd2 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   22da8:	1a9b      	subs	r3, r3, r2
   22daa:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   22dac:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   22dae:	eb1b 0002 	adds.w	r0, fp, r2
   22db2:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   22db6:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
   22dba:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   22dbc:	f7ff ff78 	bl	22cb0 <next_timeout>
   22dc0:	4621      	mov	r1, r4
   22dc2:	f7ec ff9b 	bl	fcfc <z_clock_set_timeout>
	__asm__ volatile(
   22dc6:	f385 8811 	msr	BASEPRI, r5
   22dca:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   22dce:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   22dd2:	eb1b 0003 	adds.w	r0, fp, r3
   22dd6:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   22dda:	1ad3      	subs	r3, r2, r3
   22ddc:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   22dde:	2300      	movs	r3, #0
		curr_tick += dt;
   22de0:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   22de4:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   22de6:	4620      	mov	r0, r4
   22de8:	f7ff ff4e 	bl	22c88 <remove_timeout>
   22dec:	f385 8811 	msr	BASEPRI, r5
   22df0:	f3bf 8f6f 	isb	sy
		t->fn(t);
   22df4:	68e3      	ldr	r3, [r4, #12]
   22df6:	4798      	blx	r3
	__asm__ volatile(
   22df8:	f04f 0320 	mov.w	r3, #32
   22dfc:	f3ef 8511 	mrs	r5, BASEPRI
   22e00:	f383 8811 	msr	BASEPRI, r3
   22e04:	f3bf 8f6f 	isb	sy
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   22e08:	e7c3      	b.n	22d92 <z_clock_announce+0x26>
   22e0a:	bf00      	nop
   22e0c:	200200d8 	.word	0x200200d8
   22e10:	20025dfc 	.word	0x20025dfc
   22e14:	2002d45c 	.word	0x2002d45c

00022e18 <z_tick_get>:

s64_t z_tick_get(void)
{
   22e18:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   22e1c:	f04f 0320 	mov.w	r3, #32
   22e20:	f3ef 8411 	mrs	r4, BASEPRI
   22e24:	f383 8811 	msr	BASEPRI, r3
   22e28:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   22e2c:	f7ec ffb4 	bl	fd98 <z_clock_elapsed>
   22e30:	4b07      	ldr	r3, [pc, #28]	; (22e50 <z_tick_get+0x38>)
   22e32:	e9d3 2300 	ldrd	r2, r3, [r3]
   22e36:	eb12 0b00 	adds.w	fp, r2, r0
   22e3a:	f143 0c00 	adc.w	ip, r3, #0
   22e3e:	4658      	mov	r0, fp
   22e40:	4661      	mov	r1, ip
	__asm__ volatile(
   22e42:	f384 8811 	msr	BASEPRI, r4
   22e46:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   22e4a:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   22e4e:	bf00      	nop
   22e50:	200200d8 	.word	0x200200d8

00022e54 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   22e54:	6a02      	ldr	r2, [r0, #32]
{
   22e56:	b538      	push	{r3, r4, r5, lr}
	if (timer->period > 0) {
   22e58:	2a00      	cmp	r2, #0
{
   22e5a:	4604      	mov	r4, r0
	if (timer->period > 0) {
   22e5c:	dd02      	ble.n	22e64 <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22e5e:	490e      	ldr	r1, [pc, #56]	; (22e98 <z_timer_expiration_handler+0x44>)
   22e60:	f7ff ff42 	bl	22ce8 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   22e64:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22e66:	3301      	adds	r3, #1
   22e68:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   22e6a:	69a3      	ldr	r3, [r4, #24]
   22e6c:	b10b      	cbz	r3, 22e72 <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
   22e6e:	4620      	mov	r0, r4
   22e70:	4798      	blx	r3
	return list->head == list;
   22e72:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22e76:	42a5      	cmp	r5, r4
   22e78:	d00d      	beq.n	22e96 <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   22e7a:	b165      	cbz	r5, 22e96 <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   22e7c:	4628      	mov	r0, r5
   22e7e:	f002 fee7 	bl	25c50 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   22e82:	7b6b      	ldrb	r3, [r5, #13]
   22e84:	06db      	lsls	r3, r3, #27
   22e86:	d104      	bne.n	22e92 <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
   22e88:	69ab      	ldr	r3, [r5, #24]
   22e8a:	b913      	cbnz	r3, 22e92 <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
   22e8c:	4628      	mov	r0, r5
   22e8e:	f7ff fb0d 	bl	224ac <z_add_thread_to_ready_q>
   22e92:	2300      	movs	r3, #0
   22e94:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	arch_thread_return_value_set(thread, 0);
}
   22e96:	bd38      	pop	{r3, r4, r5, pc}
   22e98:	00022e55 	.word	0x00022e55

00022e9c <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   22e9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22ea0:	f240 36e7 	movw	r6, #999	; 0x3e7
   22ea4:	2700      	movs	r7, #0
   22ea6:	4604      	mov	r4, r0
   22ea8:	4688      	mov	r8, r1
   22eaa:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   22eae:	4630      	mov	r0, r6
   22eb0:	4639      	mov	r1, r7
   22eb2:	2300      	movs	r3, #0
   22eb4:	fbe5 0102 	umlal	r0, r1, r5, r2
   22eb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22ebc:	f7e9 f9b0 	bl	c220 <__aeabi_uldivmod>
   22ec0:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = k_ms_to_ticks_ceil32(period);
   22ec2:	9000      	str	r0, [sp, #0]
   22ec4:	4630      	mov	r0, r6
   22ec6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22eca:	2300      	movs	r3, #0
   22ecc:	fbe5 0108 	umlal	r0, r1, r5, r8
   22ed0:	f7e9 f9a6 	bl	c220 <__aeabi_uldivmod>
	duration_in_ticks = k_ms_to_ticks_ceil32(duration);
   22ed4:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
   22ed6:	4620      	mov	r0, r4
   22ed8:	f002 fff0 	bl	25ebc <z_abort_timeout>
	timer->period = period_in_ticks;
   22edc:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22ede:	4620      	mov	r0, r4
	timer->period = period_in_ticks;
   22ee0:	6223      	str	r3, [r4, #32]
	timer->status = 0U;
   22ee2:	2300      	movs	r3, #0
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22ee4:	9a01      	ldr	r2, [sp, #4]
   22ee6:	4903      	ldr	r1, [pc, #12]	; (22ef4 <z_impl_k_timer_start+0x58>)
	timer->status = 0U;
   22ee8:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
   22eea:	b002      	add	sp, #8
   22eec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22ef0:	f7ff befa 	b.w	22ce8 <z_add_timeout>
   22ef4:	00022e55 	.word	0x00022e55

00022ef8 <k_poll_event_init>:
 */
static struct k_spinlock lock;

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
   22ef8:	b510      	push	{r4, lr}
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
	__ASSERT(obj != NULL, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   22efa:	7b44      	ldrb	r4, [r0, #13]
   22efc:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
   22f00:	7b81      	ldrb	r1, [r0, #14]
	event->type = type;
   22f02:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   22f04:	f362 0141 	bfi	r1, r2, #1, #1
	event->poller = NULL;
   22f08:	2200      	movs	r2, #0
	event->mode = mode;
   22f0a:	7381      	strb	r1, [r0, #14]
	event->state = K_POLL_STATE_NOT_READY;
   22f0c:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
   22f0e:	6082      	str	r2, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   22f10:	4a02      	ldr	r2, [pc, #8]	; (22f1c <k_poll_event_init+0x24>)
   22f12:	400a      	ands	r2, r1
	event->unused = 0U;
	event->obj = obj;
   22f14:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   22f18:	bd10      	pop	{r4, pc}
   22f1a:	bf00      	nop
   22f1c:	00020fff 	.word	0x00020fff

00022f20 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   22f20:	2301      	movs	r3, #1
{
   22f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22f26:	b086      	sub	sp, #24
	struct _poller poller = { .is_polling = true,
   22f28:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   22f2c:	4b23      	ldr	r3, [pc, #140]	; (22fbc <z_impl_k_poll+0x9c>)

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events > 0, "zero events\n");

	events_registered = register_events(events, num_events, &poller,
   22f2e:	4690      	mov	r8, r2
	struct _poller poller = { .is_polling = true,
   22f30:	689b      	ldr	r3, [r3, #8]
{
   22f32:	4606      	mov	r6, r0
	struct _poller poller = { .is_polling = true,
   22f34:	9304      	str	r3, [sp, #16]
   22f36:	4b22      	ldr	r3, [pc, #136]	; (22fc0 <z_impl_k_poll+0xa0>)
   22f38:	9305      	str	r3, [sp, #20]
	events_registered = register_events(events, num_events, &poller,
   22f3a:	fab2 f382 	clz	r3, r2
   22f3e:	aa03      	add	r2, sp, #12
   22f40:	095b      	lsrs	r3, r3, #5
   22f42:	f003 f8d8 	bl	260f6 <register_events>
   22f46:	4607      	mov	r7, r0
	__asm__ volatile(
   22f48:	f04f 0320 	mov.w	r3, #32
   22f4c:	f3ef 8511 	mrs	r5, BASEPRI
   22f50:	f383 8811 	msr	BASEPRI, r3
   22f54:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   22f58:	f89d 300c 	ldrb.w	r3, [sp, #12]
   22f5c:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   22f60:	b94b      	cbnz	r3, 22f76 <z_impl_k_poll+0x56>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   22f62:	462a      	mov	r2, r5
   22f64:	4639      	mov	r1, r7
   22f66:	4630      	mov	r0, r6
   22f68:	f003 f82d 	bl	25fc6 <clear_event_registrations>
	__asm__ volatile(
   22f6c:	f385 8811 	msr	BASEPRI, r5
   22f70:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
   22f74:	e00b      	b.n	22f8e <z_impl_k_poll+0x6e>
	poller.is_polling = false;
   22f76:	2300      	movs	r3, #0
   22f78:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   22f7c:	f1b8 0f00 	cmp.w	r8, #0
   22f80:	d109      	bne.n	22f96 <z_impl_k_poll+0x76>
   22f82:	f385 8811 	msr	BASEPRI, r5
   22f86:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   22f8a:	f06f 040a 	mvn.w	r4, #10
}
   22f8e:	4620      	mov	r0, r4
   22f90:	b006      	add	sp, #24
   22f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   22f96:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   22f98:	4643      	mov	r3, r8
   22f9a:	4629      	mov	r1, r5
   22f9c:	4809      	ldr	r0, [pc, #36]	; (22fc4 <z_impl_k_poll+0xa4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   22f9e:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   22fa2:	f7ff fbbf 	bl	22724 <z_pend_curr>
   22fa6:	4604      	mov	r4, r0
	__asm__ volatile(
   22fa8:	f04f 0320 	mov.w	r3, #32
   22fac:	f3ef 8511 	mrs	r5, BASEPRI
   22fb0:	f383 8811 	msr	BASEPRI, r3
   22fb4:	f3bf 8f6f 	isb	sy
   22fb8:	e7d3      	b.n	22f62 <z_impl_k_poll+0x42>
   22fba:	bf00      	nop
   22fbc:	20025cfc 	.word	0x20025cfc
   22fc0:	00026057 	.word	0x00026057
   22fc4:	20027450 	.word	0x20027450

00022fc8 <ocrypto_ecdsa_p256_public_key>:
   22fc8:	b530      	push	{r4, r5, lr}
   22fca:	b099      	sub	sp, #100	; 0x64
   22fcc:	4605      	mov	r5, r0
   22fce:	4668      	mov	r0, sp
   22fd0:	f000 f8f2 	bl	231b8 <ocrypto_sc_p256_from32bytes>
   22fd4:	4669      	mov	r1, sp
   22fd6:	a808      	add	r0, sp, #32
   22fd8:	f000 fae6 	bl	235a8 <ocrypto_curve_p256_scalarmult_base>
   22fdc:	4604      	mov	r4, r0
   22fde:	a908      	add	r1, sp, #32
   22fe0:	4628      	mov	r0, r5
   22fe2:	f000 fa21 	bl	23428 <ocrypto_curve_p256_to64bytes>
   22fe6:	4620      	mov	r0, r4
   22fe8:	b019      	add	sp, #100	; 0x64
   22fea:	bd30      	pop	{r4, r5, pc}

00022fec <ocrypto_mod_p256_cneg>:
   22fec:	b570      	push	{r4, r5, r6, lr}
   22fee:	b088      	sub	sp, #32
   22ff0:	4604      	mov	r4, r0
   22ff2:	460d      	mov	r5, r1
   22ff4:	4668      	mov	r0, sp
   22ff6:	2120      	movs	r1, #32
   22ff8:	4616      	mov	r6, r2
   22ffa:	f7e9 fe0a 	bl	cc12 <ocrypto_constant_time_fill_zero>
   22ffe:	2300      	movs	r3, #0
   23000:	4629      	mov	r1, r5
   23002:	4620      	mov	r0, r4
   23004:	2220      	movs	r2, #32
   23006:	9300      	str	r3, [sp, #0]
   23008:	f7e9 fdfc 	bl	cc04 <ocrypto_constant_time_copy>
   2300c:	462a      	mov	r2, r5
   2300e:	4669      	mov	r1, sp
   23010:	4668      	mov	r0, sp
   23012:	f7e9 fe44 	bl	cc9e <ocrypto_mod_p256_sub>
   23016:	4632      	mov	r2, r6
   23018:	4669      	mov	r1, sp
   2301a:	4620      	mov	r0, r4
   2301c:	f7e9 fb4f 	bl	c6be <ocrypto_bigint_cswap256>
   23020:	b008      	add	sp, #32
   23022:	bd70      	pop	{r4, r5, r6, pc}

00023024 <ocrypto_mod_p256_toBytes>:
   23024:	69cb      	ldr	r3, [r1, #28]
   23026:	ba1b      	rev	r3, r3
   23028:	6003      	str	r3, [r0, #0]
   2302a:	698b      	ldr	r3, [r1, #24]
   2302c:	ba1b      	rev	r3, r3
   2302e:	6043      	str	r3, [r0, #4]
   23030:	694b      	ldr	r3, [r1, #20]
   23032:	ba1b      	rev	r3, r3
   23034:	6083      	str	r3, [r0, #8]
   23036:	690b      	ldr	r3, [r1, #16]
   23038:	ba1b      	rev	r3, r3
   2303a:	60c3      	str	r3, [r0, #12]
   2303c:	68cb      	ldr	r3, [r1, #12]
   2303e:	ba1b      	rev	r3, r3
   23040:	6103      	str	r3, [r0, #16]
   23042:	688b      	ldr	r3, [r1, #8]
   23044:	ba1b      	rev	r3, r3
   23046:	6143      	str	r3, [r0, #20]
   23048:	684b      	ldr	r3, [r1, #4]
   2304a:	ba1b      	rev	r3, r3
   2304c:	6183      	str	r3, [r0, #24]
   2304e:	680b      	ldr	r3, [r1, #0]
   23050:	ba1b      	rev	r3, r3
   23052:	61c3      	str	r3, [r0, #28]
   23054:	4770      	bx	lr
   23056:	bf00      	nop

00023058 <ocrypto_mod_p256_invert>:
   23058:	b570      	push	{r4, r5, r6, lr}
   2305a:	460d      	mov	r5, r1
   2305c:	2405      	movs	r4, #5
   2305e:	b098      	sub	sp, #96	; 0x60
   23060:	4606      	mov	r6, r0
   23062:	a810      	add	r0, sp, #64	; 0x40
   23064:	f7e9 fe48 	bl	ccf8 <ocrypto_mod_p256_square>
   23068:	462a      	mov	r2, r5
   2306a:	a910      	add	r1, sp, #64	; 0x40
   2306c:	4668      	mov	r0, sp
   2306e:	f7e9 fe44 	bl	ccfa <ocrypto_mod_p256_mul>
   23072:	4669      	mov	r1, sp
   23074:	a810      	add	r0, sp, #64	; 0x40
   23076:	f7e9 fe3f 	bl	ccf8 <ocrypto_mod_p256_square>
   2307a:	a910      	add	r1, sp, #64	; 0x40
   2307c:	4608      	mov	r0, r1
   2307e:	f7e9 fe3b 	bl	ccf8 <ocrypto_mod_p256_square>
   23082:	466a      	mov	r2, sp
   23084:	a910      	add	r1, sp, #64	; 0x40
   23086:	a808      	add	r0, sp, #32
   23088:	f7e9 fe37 	bl	ccfa <ocrypto_mod_p256_mul>
   2308c:	a908      	add	r1, sp, #32
   2308e:	a810      	add	r0, sp, #64	; 0x40
   23090:	f7e9 fe32 	bl	ccf8 <ocrypto_mod_p256_square>
   23094:	a910      	add	r1, sp, #64	; 0x40
   23096:	4608      	mov	r0, r1
   23098:	f7e9 fe2e 	bl	ccf8 <ocrypto_mod_p256_square>
   2309c:	a910      	add	r1, sp, #64	; 0x40
   2309e:	4608      	mov	r0, r1
   230a0:	f7e9 fe2a 	bl	ccf8 <ocrypto_mod_p256_square>
   230a4:	a910      	add	r1, sp, #64	; 0x40
   230a6:	4608      	mov	r0, r1
   230a8:	f7e9 fe26 	bl	ccf8 <ocrypto_mod_p256_square>
   230ac:	a910      	add	r1, sp, #64	; 0x40
   230ae:	aa08      	add	r2, sp, #32
   230b0:	4608      	mov	r0, r1
   230b2:	f7e9 fe22 	bl	ccfa <ocrypto_mod_p256_mul>
   230b6:	a910      	add	r1, sp, #64	; 0x40
   230b8:	4608      	mov	r0, r1
   230ba:	f7e9 fe1d 	bl	ccf8 <ocrypto_mod_p256_square>
   230be:	a910      	add	r1, sp, #64	; 0x40
   230c0:	4608      	mov	r0, r1
   230c2:	f7e9 fe19 	bl	ccf8 <ocrypto_mod_p256_square>
   230c6:	a910      	add	r1, sp, #64	; 0x40
   230c8:	466a      	mov	r2, sp
   230ca:	a808      	add	r0, sp, #32
   230cc:	f7e9 fe15 	bl	ccfa <ocrypto_mod_p256_mul>
   230d0:	a908      	add	r1, sp, #32
   230d2:	a810      	add	r0, sp, #64	; 0x40
   230d4:	f7e9 fe10 	bl	ccf8 <ocrypto_mod_p256_square>
   230d8:	a910      	add	r1, sp, #64	; 0x40
   230da:	4608      	mov	r0, r1
   230dc:	f7e9 fe0c 	bl	ccf8 <ocrypto_mod_p256_square>
   230e0:	3c01      	subs	r4, #1
   230e2:	a910      	add	r1, sp, #64	; 0x40
   230e4:	d1f5      	bne.n	230d2 <ocrypto_mod_p256_invert+0x7a>
   230e6:	aa08      	add	r2, sp, #32
   230e8:	4608      	mov	r0, r1
   230ea:	f7e9 fe06 	bl	ccfa <ocrypto_mod_p256_mul>
   230ee:	2405      	movs	r4, #5
   230f0:	a910      	add	r1, sp, #64	; 0x40
   230f2:	4608      	mov	r0, r1
   230f4:	f7e9 fe00 	bl	ccf8 <ocrypto_mod_p256_square>
   230f8:	a910      	add	r1, sp, #64	; 0x40
   230fa:	4608      	mov	r0, r1
   230fc:	f7e9 fdfc 	bl	ccf8 <ocrypto_mod_p256_square>
   23100:	3c01      	subs	r4, #1
   23102:	d1f5      	bne.n	230f0 <ocrypto_mod_p256_invert+0x98>
   23104:	a910      	add	r1, sp, #64	; 0x40
   23106:	aa08      	add	r2, sp, #32
   23108:	4608      	mov	r0, r1
   2310a:	f7e9 fdf6 	bl	ccfa <ocrypto_mod_p256_mul>
   2310e:	a910      	add	r1, sp, #64	; 0x40
   23110:	a808      	add	r0, sp, #32
   23112:	f7e9 fdf1 	bl	ccf8 <ocrypto_mod_p256_square>
   23116:	a908      	add	r1, sp, #32
   23118:	4608      	mov	r0, r1
   2311a:	f7e9 fded 	bl	ccf8 <ocrypto_mod_p256_square>
   2311e:	a908      	add	r1, sp, #32
   23120:	466a      	mov	r2, sp
   23122:	4668      	mov	r0, sp
   23124:	f7e9 fde9 	bl	ccfa <ocrypto_mod_p256_mul>
   23128:	2410      	movs	r4, #16
   2312a:	4669      	mov	r1, sp
   2312c:	a810      	add	r0, sp, #64	; 0x40
   2312e:	f7e9 fde3 	bl	ccf8 <ocrypto_mod_p256_square>
   23132:	a910      	add	r1, sp, #64	; 0x40
   23134:	4608      	mov	r0, r1
   23136:	f7e9 fddf 	bl	ccf8 <ocrypto_mod_p256_square>
   2313a:	3c01      	subs	r4, #1
   2313c:	a910      	add	r1, sp, #64	; 0x40
   2313e:	d1f5      	bne.n	2312c <ocrypto_mod_p256_invert+0xd4>
   23140:	462a      	mov	r2, r5
   23142:	4608      	mov	r0, r1
   23144:	f7e9 fdd9 	bl	ccfa <ocrypto_mod_p256_mul>
   23148:	2440      	movs	r4, #64	; 0x40
   2314a:	a910      	add	r1, sp, #64	; 0x40
   2314c:	4608      	mov	r0, r1
   2314e:	f7e9 fdd3 	bl	ccf8 <ocrypto_mod_p256_square>
   23152:	a910      	add	r1, sp, #64	; 0x40
   23154:	4608      	mov	r0, r1
   23156:	f7e9 fdcf 	bl	ccf8 <ocrypto_mod_p256_square>
   2315a:	3c01      	subs	r4, #1
   2315c:	d1f5      	bne.n	2314a <ocrypto_mod_p256_invert+0xf2>
   2315e:	a910      	add	r1, sp, #64	; 0x40
   23160:	466a      	mov	r2, sp
   23162:	4608      	mov	r0, r1
   23164:	f7e9 fdc9 	bl	ccfa <ocrypto_mod_p256_mul>
   23168:	2410      	movs	r4, #16
   2316a:	a910      	add	r1, sp, #64	; 0x40
   2316c:	4608      	mov	r0, r1
   2316e:	f7e9 fdc3 	bl	ccf8 <ocrypto_mod_p256_square>
   23172:	a910      	add	r1, sp, #64	; 0x40
   23174:	4608      	mov	r0, r1
   23176:	f7e9 fdbf 	bl	ccf8 <ocrypto_mod_p256_square>
   2317a:	3c01      	subs	r4, #1
   2317c:	d1f5      	bne.n	2316a <ocrypto_mod_p256_invert+0x112>
   2317e:	a910      	add	r1, sp, #64	; 0x40
   23180:	466a      	mov	r2, sp
   23182:	4608      	mov	r0, r1
   23184:	f7e9 fdb9 	bl	ccfa <ocrypto_mod_p256_mul>
   23188:	2410      	movs	r4, #16
   2318a:	a910      	add	r1, sp, #64	; 0x40
   2318c:	4608      	mov	r0, r1
   2318e:	f7e9 fdb3 	bl	ccf8 <ocrypto_mod_p256_square>
   23192:	a910      	add	r1, sp, #64	; 0x40
   23194:	4608      	mov	r0, r1
   23196:	f7e9 fdaf 	bl	ccf8 <ocrypto_mod_p256_square>
   2319a:	3c01      	subs	r4, #1
   2319c:	d1f5      	bne.n	2318a <ocrypto_mod_p256_invert+0x132>
   2319e:	a910      	add	r1, sp, #64	; 0x40
   231a0:	aa08      	add	r2, sp, #32
   231a2:	4608      	mov	r0, r1
   231a4:	f7e9 fda9 	bl	ccfa <ocrypto_mod_p256_mul>
   231a8:	462a      	mov	r2, r5
   231aa:	a910      	add	r1, sp, #64	; 0x40
   231ac:	4630      	mov	r0, r6
   231ae:	f7e9 fda4 	bl	ccfa <ocrypto_mod_p256_mul>
   231b2:	b018      	add	sp, #96	; 0x60
   231b4:	bd70      	pop	{r4, r5, r6, pc}
   231b6:	bf00      	nop

000231b8 <ocrypto_sc_p256_from32bytes>:
   231b8:	b538      	push	{r3, r4, r5, lr}
   231ba:	460b      	mov	r3, r1
   231bc:	680a      	ldr	r2, [r1, #0]
   231be:	4d12      	ldr	r5, [pc, #72]	; (23208 <ocrypto_sc_p256_from32bytes+0x50>)
   231c0:	ba12      	rev	r2, r2
   231c2:	61c2      	str	r2, [r0, #28]
   231c4:	684a      	ldr	r2, [r1, #4]
   231c6:	4601      	mov	r1, r0
   231c8:	ba12      	rev	r2, r2
   231ca:	6182      	str	r2, [r0, #24]
   231cc:	689a      	ldr	r2, [r3, #8]
   231ce:	4604      	mov	r4, r0
   231d0:	ba12      	rev	r2, r2
   231d2:	6142      	str	r2, [r0, #20]
   231d4:	68da      	ldr	r2, [r3, #12]
   231d6:	ba12      	rev	r2, r2
   231d8:	6102      	str	r2, [r0, #16]
   231da:	691a      	ldr	r2, [r3, #16]
   231dc:	ba12      	rev	r2, r2
   231de:	60c2      	str	r2, [r0, #12]
   231e0:	695a      	ldr	r2, [r3, #20]
   231e2:	ba12      	rev	r2, r2
   231e4:	6082      	str	r2, [r0, #8]
   231e6:	699a      	ldr	r2, [r3, #24]
   231e8:	ba12      	rev	r2, r2
   231ea:	6042      	str	r2, [r0, #4]
   231ec:	69db      	ldr	r3, [r3, #28]
   231ee:	462a      	mov	r2, r5
   231f0:	ba1b      	rev	r3, r3
   231f2:	6003      	str	r3, [r0, #0]
   231f4:	f7e9 f9d8 	bl	c5a8 <ocrypto_bigint_sub256>
   231f8:	4629      	mov	r1, r5
   231fa:	4602      	mov	r2, r0
   231fc:	4620      	mov	r0, r4
   231fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   23202:	f7e9 b9f1 	b.w	c5e8 <ocrypto_bigint_cadd256>
   23206:	bf00      	nop
   23208:	00027868 	.word	0x00027868

0002320c <p256_zdblu>:
   2320c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23210:	4607      	mov	r7, r0
   23212:	460d      	mov	r5, r1
   23214:	4690      	mov	r8, r2
   23216:	b088      	sub	sp, #32
   23218:	f102 0120 	add.w	r1, r2, #32
   2321c:	4668      	mov	r0, sp
   2321e:	f107 0620 	add.w	r6, r7, #32
   23222:	f7e9 fd69 	bl	ccf8 <ocrypto_mod_p256_square>
   23226:	466a      	mov	r2, sp
   23228:	4669      	mov	r1, sp
   2322a:	4668      	mov	r0, sp
   2322c:	f7e9 fcf8 	bl	cc20 <ocrypto_mod_p256_add>
   23230:	4630      	mov	r0, r6
   23232:	4669      	mov	r1, sp
   23234:	f7e9 fd60 	bl	ccf8 <ocrypto_mod_p256_square>
   23238:	4632      	mov	r2, r6
   2323a:	4631      	mov	r1, r6
   2323c:	4630      	mov	r0, r6
   2323e:	f105 0420 	add.w	r4, r5, #32
   23242:	f7e9 fced 	bl	cc20 <ocrypto_mod_p256_add>
   23246:	466a      	mov	r2, sp
   23248:	4669      	mov	r1, sp
   2324a:	4668      	mov	r0, sp
   2324c:	f7e9 fce8 	bl	cc20 <ocrypto_mod_p256_add>
   23250:	4620      	mov	r0, r4
   23252:	4641      	mov	r1, r8
   23254:	f7e9 fd50 	bl	ccf8 <ocrypto_mod_p256_square>
   23258:	466a      	mov	r2, sp
   2325a:	4641      	mov	r1, r8
   2325c:	4638      	mov	r0, r7
   2325e:	f7e9 fd4c 	bl	ccfa <ocrypto_mod_p256_mul>
   23262:	4622      	mov	r2, r4
   23264:	4621      	mov	r1, r4
   23266:	4668      	mov	r0, sp
   23268:	f7e9 fcda 	bl	cc20 <ocrypto_mod_p256_add>
   2326c:	4622      	mov	r2, r4
   2326e:	4669      	mov	r1, sp
   23270:	4668      	mov	r0, sp
   23272:	f7e9 fcd5 	bl	cc20 <ocrypto_mod_p256_add>
   23276:	4669      	mov	r1, sp
   23278:	4668      	mov	r0, sp
   2327a:	4a11      	ldr	r2, [pc, #68]	; (232c0 <p256_zdblu+0xb4>)
   2327c:	f7e9 fcd0 	bl	cc20 <ocrypto_mod_p256_add>
   23280:	4669      	mov	r1, sp
   23282:	4628      	mov	r0, r5
   23284:	f7e9 fd38 	bl	ccf8 <ocrypto_mod_p256_square>
   23288:	463a      	mov	r2, r7
   2328a:	4629      	mov	r1, r5
   2328c:	4628      	mov	r0, r5
   2328e:	f7e9 fd06 	bl	cc9e <ocrypto_mod_p256_sub>
   23292:	463a      	mov	r2, r7
   23294:	4629      	mov	r1, r5
   23296:	4628      	mov	r0, r5
   23298:	f7e9 fd01 	bl	cc9e <ocrypto_mod_p256_sub>
   2329c:	462a      	mov	r2, r5
   2329e:	4639      	mov	r1, r7
   232a0:	4620      	mov	r0, r4
   232a2:	f7e9 fcfc 	bl	cc9e <ocrypto_mod_p256_sub>
   232a6:	466a      	mov	r2, sp
   232a8:	4621      	mov	r1, r4
   232aa:	4620      	mov	r0, r4
   232ac:	f7e9 fd25 	bl	ccfa <ocrypto_mod_p256_mul>
   232b0:	4632      	mov	r2, r6
   232b2:	4621      	mov	r1, r4
   232b4:	4620      	mov	r0, r4
   232b6:	f7e9 fcf2 	bl	cc9e <ocrypto_mod_p256_sub>
   232ba:	b008      	add	sp, #32
   232bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   232c0:	00027908 	.word	0x00027908

000232c4 <p256_zaddc>:
   232c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   232c6:	4604      	mov	r4, r0
   232c8:	460e      	mov	r6, r1
   232ca:	b099      	sub	sp, #100	; 0x64
   232cc:	460a      	mov	r2, r1
   232ce:	4601      	mov	r1, r0
   232d0:	4668      	mov	r0, sp
   232d2:	f7e9 fce4 	bl	cc9e <ocrypto_mod_p256_sub>
   232d6:	4669      	mov	r1, sp
   232d8:	4668      	mov	r0, sp
   232da:	f7e9 fd0d 	bl	ccf8 <ocrypto_mod_p256_square>
   232de:	466a      	mov	r2, sp
   232e0:	4621      	mov	r1, r4
   232e2:	a808      	add	r0, sp, #32
   232e4:	f106 0520 	add.w	r5, r6, #32
   232e8:	f104 0720 	add.w	r7, r4, #32
   232ec:	f7e9 fd05 	bl	ccfa <ocrypto_mod_p256_mul>
   232f0:	466a      	mov	r2, sp
   232f2:	4631      	mov	r1, r6
   232f4:	4668      	mov	r0, sp
   232f6:	f7e9 fd00 	bl	ccfa <ocrypto_mod_p256_mul>
   232fa:	4639      	mov	r1, r7
   232fc:	462a      	mov	r2, r5
   232fe:	a810      	add	r0, sp, #64	; 0x40
   23300:	f7e9 fc8e 	bl	cc20 <ocrypto_mod_p256_add>
   23304:	462a      	mov	r2, r5
   23306:	4639      	mov	r1, r7
   23308:	4628      	mov	r0, r5
   2330a:	f7e9 fcc8 	bl	cc9e <ocrypto_mod_p256_sub>
   2330e:	4629      	mov	r1, r5
   23310:	4630      	mov	r0, r6
   23312:	f7e9 fcf1 	bl	ccf8 <ocrypto_mod_p256_square>
   23316:	466a      	mov	r2, sp
   23318:	a908      	add	r1, sp, #32
   2331a:	4620      	mov	r0, r4
   2331c:	f7e9 fc80 	bl	cc20 <ocrypto_mod_p256_add>
   23320:	4622      	mov	r2, r4
   23322:	4631      	mov	r1, r6
   23324:	4630      	mov	r0, r6
   23326:	f7e9 fcba 	bl	cc9e <ocrypto_mod_p256_sub>
   2332a:	466a      	mov	r2, sp
   2332c:	a908      	add	r1, sp, #32
   2332e:	4668      	mov	r0, sp
   23330:	f7e9 fcb5 	bl	cc9e <ocrypto_mod_p256_sub>
   23334:	466a      	mov	r2, sp
   23336:	4639      	mov	r1, r7
   23338:	4638      	mov	r0, r7
   2333a:	f7e9 fcde 	bl	ccfa <ocrypto_mod_p256_mul>
   2333e:	4632      	mov	r2, r6
   23340:	a908      	add	r1, sp, #32
   23342:	4668      	mov	r0, sp
   23344:	f7e9 fcab 	bl	cc9e <ocrypto_mod_p256_sub>
   23348:	466a      	mov	r2, sp
   2334a:	4629      	mov	r1, r5
   2334c:	4628      	mov	r0, r5
   2334e:	f7e9 fcd4 	bl	ccfa <ocrypto_mod_p256_mul>
   23352:	463a      	mov	r2, r7
   23354:	4629      	mov	r1, r5
   23356:	4628      	mov	r0, r5
   23358:	f7e9 fca1 	bl	cc9e <ocrypto_mod_p256_sub>
   2335c:	a910      	add	r1, sp, #64	; 0x40
   2335e:	4668      	mov	r0, sp
   23360:	f7e9 fcca 	bl	ccf8 <ocrypto_mod_p256_square>
   23364:	4622      	mov	r2, r4
   23366:	4669      	mov	r1, sp
   23368:	4620      	mov	r0, r4
   2336a:	f7e9 fc98 	bl	cc9e <ocrypto_mod_p256_sub>
   2336e:	a908      	add	r1, sp, #32
   23370:	4622      	mov	r2, r4
   23372:	4608      	mov	r0, r1
   23374:	f7e9 fc93 	bl	cc9e <ocrypto_mod_p256_sub>
   23378:	a910      	add	r1, sp, #64	; 0x40
   2337a:	aa08      	add	r2, sp, #32
   2337c:	4608      	mov	r0, r1
   2337e:	f7e9 fcbc 	bl	ccfa <ocrypto_mod_p256_mul>
   23382:	463a      	mov	r2, r7
   23384:	a910      	add	r1, sp, #64	; 0x40
   23386:	4638      	mov	r0, r7
   23388:	f7e9 fc89 	bl	cc9e <ocrypto_mod_p256_sub>
   2338c:	b019      	add	sp, #100	; 0x64
   2338e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023390 <p256_zaddu>:
   23390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23394:	460c      	mov	r4, r1
   23396:	4605      	mov	r5, r0
   23398:	4690      	mov	r8, r2
   2339a:	b088      	sub	sp, #32
   2339c:	4622      	mov	r2, r4
   2339e:	4601      	mov	r1, r0
   233a0:	4668      	mov	r0, sp
   233a2:	f7e9 fc7c 	bl	cc9e <ocrypto_mod_p256_sub>
   233a6:	4669      	mov	r1, sp
   233a8:	4668      	mov	r0, sp
   233aa:	f7e9 fca5 	bl	ccf8 <ocrypto_mod_p256_square>
   233ae:	466a      	mov	r2, sp
   233b0:	4629      	mov	r1, r5
   233b2:	4628      	mov	r0, r5
   233b4:	f104 0620 	add.w	r6, r4, #32
   233b8:	f7e9 fc9f 	bl	ccfa <ocrypto_mod_p256_mul>
   233bc:	f105 0720 	add.w	r7, r5, #32
   233c0:	466a      	mov	r2, sp
   233c2:	4621      	mov	r1, r4
   233c4:	4668      	mov	r0, sp
   233c6:	f7e9 fc98 	bl	ccfa <ocrypto_mod_p256_mul>
   233ca:	4632      	mov	r2, r6
   233cc:	4630      	mov	r0, r6
   233ce:	4639      	mov	r1, r7
   233d0:	f7e9 fc65 	bl	cc9e <ocrypto_mod_p256_sub>
   233d4:	4631      	mov	r1, r6
   233d6:	4620      	mov	r0, r4
   233d8:	f7e9 fc8e 	bl	ccf8 <ocrypto_mod_p256_square>
   233dc:	462a      	mov	r2, r5
   233de:	4621      	mov	r1, r4
   233e0:	4620      	mov	r0, r4
   233e2:	f7e9 fc5c 	bl	cc9e <ocrypto_mod_p256_sub>
   233e6:	466a      	mov	r2, sp
   233e8:	4621      	mov	r1, r4
   233ea:	4620      	mov	r0, r4
   233ec:	f7e9 fc57 	bl	cc9e <ocrypto_mod_p256_sub>
   233f0:	466a      	mov	r2, sp
   233f2:	4629      	mov	r1, r5
   233f4:	4640      	mov	r0, r8
   233f6:	f7e9 fc52 	bl	cc9e <ocrypto_mod_p256_sub>
   233fa:	4642      	mov	r2, r8
   233fc:	4639      	mov	r1, r7
   233fe:	4638      	mov	r0, r7
   23400:	f7e9 fc7b 	bl	ccfa <ocrypto_mod_p256_mul>
   23404:	4622      	mov	r2, r4
   23406:	4629      	mov	r1, r5
   23408:	4668      	mov	r0, sp
   2340a:	f7e9 fc48 	bl	cc9e <ocrypto_mod_p256_sub>
   2340e:	466a      	mov	r2, sp
   23410:	4631      	mov	r1, r6
   23412:	4630      	mov	r0, r6
   23414:	f7e9 fc71 	bl	ccfa <ocrypto_mod_p256_mul>
   23418:	463a      	mov	r2, r7
   2341a:	4631      	mov	r1, r6
   2341c:	4630      	mov	r0, r6
   2341e:	f7e9 fc3e 	bl	cc9e <ocrypto_mod_p256_sub>
   23422:	b008      	add	sp, #32
   23424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023428 <ocrypto_curve_p256_to64bytes>:
   23428:	b538      	push	{r3, r4, r5, lr}
   2342a:	4604      	mov	r4, r0
   2342c:	460d      	mov	r5, r1
   2342e:	f7ff fdf9 	bl	23024 <ocrypto_mod_p256_toBytes>
   23432:	f105 0120 	add.w	r1, r5, #32
   23436:	f104 0020 	add.w	r0, r4, #32
   2343a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2343e:	f7ff bdf1 	b.w	23024 <ocrypto_mod_p256_toBytes>
   23442:	bf00      	nop

00023444 <ocrypto_curve_p256_scalarmult>:
   23444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23448:	b0b8      	sub	sp, #224	; 0xe0
   2344a:	468a      	mov	sl, r1
   2344c:	4681      	mov	r9, r0
   2344e:	4611      	mov	r1, r2
   23450:	a810      	add	r0, sp, #64	; 0x40
   23452:	4a51      	ldr	r2, [pc, #324]	; (23598 <ocrypto_curve_p256_scalarmult+0x154>)
   23454:	f7e9 f8a8 	bl	c5a8 <ocrypto_bigint_sub256>
   23458:	4950      	ldr	r1, [pc, #320]	; (2359c <ocrypto_curve_p256_scalarmult+0x158>)
   2345a:	4602      	mov	r2, r0
   2345c:	a810      	add	r0, sp, #64	; 0x40
   2345e:	f7e9 f8c3 	bl	c5e8 <ocrypto_bigint_cadd256>
   23462:	4680      	mov	r8, r0
   23464:	9f17      	ldr	r7, [sp, #92]	; 0x5c
   23466:	494c      	ldr	r1, [pc, #304]	; (23598 <ocrypto_curve_p256_scalarmult+0x154>)
   23468:	ea08 77d7 	and.w	r7, r8, r7, lsr #31
   2346c:	f1c7 0201 	rsb	r2, r7, #1
   23470:	a810      	add	r0, sp, #64	; 0x40
   23472:	f7e9 f8b9 	bl	c5e8 <ocrypto_bigint_cadd256>
   23476:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   23478:	4652      	mov	r2, sl
   2347a:	43ed      	mvns	r5, r5
   2347c:	a928      	add	r1, sp, #160	; 0xa0
   2347e:	a818      	add	r0, sp, #96	; 0x60
   23480:	f7ff fec4 	bl	2320c <p256_zdblu>
   23484:	0fed      	lsrs	r5, r5, #31
   23486:	a920      	add	r1, sp, #128	; 0x80
   23488:	f1c5 0201 	rsb	r2, r5, #1
   2348c:	4608      	mov	r0, r1
   2348e:	f7ff fdad 	bl	22fec <ocrypto_mod_p256_cneg>
   23492:	26fe      	movs	r6, #254	; 0xfe
   23494:	f1c8 0801 	rsb	r8, r8, #1
   23498:	466a      	mov	r2, sp
   2349a:	a918      	add	r1, sp, #96	; 0x60
   2349c:	a828      	add	r0, sp, #160	; 0xa0
   2349e:	f7ff ff77 	bl	23390 <p256_zaddu>
   234a2:	1173      	asrs	r3, r6, #5
   234a4:	aa38      	add	r2, sp, #224	; 0xe0
   234a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   234aa:	f853 4ca0 	ldr.w	r4, [r3, #-160]
   234ae:	f006 031f 	and.w	r3, r6, #31
   234b2:	40dc      	lsrs	r4, r3
   234b4:	f004 0401 	and.w	r4, r4, #1
   234b8:	4065      	eors	r5, r4
   234ba:	462a      	mov	r2, r5
   234bc:	a928      	add	r1, sp, #160	; 0xa0
   234be:	a818      	add	r0, sp, #96	; 0x60
   234c0:	f7e9 f8fd 	bl	c6be <ocrypto_bigint_cswap256>
   234c4:	462a      	mov	r2, r5
   234c6:	a930      	add	r1, sp, #192	; 0xc0
   234c8:	a820      	add	r0, sp, #128	; 0x80
   234ca:	f7e9 f8f8 	bl	c6be <ocrypto_bigint_cswap256>
   234ce:	3e01      	subs	r6, #1
   234d0:	a928      	add	r1, sp, #160	; 0xa0
   234d2:	a818      	add	r0, sp, #96	; 0x60
   234d4:	f7ff fef6 	bl	232c4 <p256_zaddc>
   234d8:	1c73      	adds	r3, r6, #1
   234da:	4625      	mov	r5, r4
   234dc:	d1dc      	bne.n	23498 <ocrypto_curve_p256_scalarmult+0x54>
   234de:	f1c4 0201 	rsb	r2, r4, #1
   234e2:	a808      	add	r0, sp, #32
   234e4:	a920      	add	r1, sp, #128	; 0x80
   234e6:	f7ff fd81 	bl	22fec <ocrypto_mod_p256_cneg>
   234ea:	407d      	eors	r5, r7
   234ec:	466a      	mov	r2, sp
   234ee:	a918      	add	r1, sp, #96	; 0x60
   234f0:	a828      	add	r0, sp, #160	; 0xa0
   234f2:	f7ff ff4d 	bl	23390 <p256_zaddu>
   234f6:	a928      	add	r1, sp, #160	; 0xa0
   234f8:	462a      	mov	r2, r5
   234fa:	a818      	add	r0, sp, #96	; 0x60
   234fc:	f7e9 f8df 	bl	c6be <ocrypto_bigint_cswap256>
   23500:	462a      	mov	r2, r5
   23502:	a930      	add	r1, sp, #192	; 0xc0
   23504:	a820      	add	r0, sp, #128	; 0x80
   23506:	f7e9 f8da 	bl	c6be <ocrypto_bigint_cswap256>
   2350a:	a908      	add	r1, sp, #32
   2350c:	466a      	mov	r2, sp
   2350e:	4608      	mov	r0, r1
   23510:	f7e9 fbf3 	bl	ccfa <ocrypto_mod_p256_mul>
   23514:	a908      	add	r1, sp, #32
   23516:	4608      	mov	r0, r1
   23518:	f7ff fd9e 	bl	23058 <ocrypto_mod_p256_invert>
   2351c:	a908      	add	r1, sp, #32
   2351e:	f109 0420 	add.w	r4, r9, #32
   23522:	f10a 0220 	add.w	r2, sl, #32
   23526:	4608      	mov	r0, r1
   23528:	f7e9 fbe7 	bl	ccfa <ocrypto_mod_p256_mul>
   2352c:	a920      	add	r1, sp, #128	; 0x80
   2352e:	aa08      	add	r2, sp, #32
   23530:	4620      	mov	r0, r4
   23532:	f7e9 fbe2 	bl	ccfa <ocrypto_mod_p256_mul>
   23536:	aa08      	add	r2, sp, #32
   23538:	a918      	add	r1, sp, #96	; 0x60
   2353a:	4668      	mov	r0, sp
   2353c:	f7e9 fbdd 	bl	ccfa <ocrypto_mod_p256_mul>
   23540:	4669      	mov	r1, sp
   23542:	4668      	mov	r0, sp
   23544:	f7e9 fbd8 	bl	ccf8 <ocrypto_mod_p256_square>
   23548:	aa18      	add	r2, sp, #96	; 0x60
   2354a:	4669      	mov	r1, sp
   2354c:	a808      	add	r0, sp, #32
   2354e:	f7e9 fbd4 	bl	ccfa <ocrypto_mod_p256_mul>
   23552:	4621      	mov	r1, r4
   23554:	4668      	mov	r0, sp
   23556:	f7e9 fbcf 	bl	ccf8 <ocrypto_mod_p256_square>
   2355a:	aa08      	add	r2, sp, #32
   2355c:	4669      	mov	r1, sp
   2355e:	4610      	mov	r0, r2
   23560:	f7e9 fb9d 	bl	cc9e <ocrypto_mod_p256_sub>
   23564:	a908      	add	r1, sp, #32
   23566:	4a0e      	ldr	r2, [pc, #56]	; (235a0 <ocrypto_curve_p256_scalarmult+0x15c>)
   23568:	4668      	mov	r0, sp
   2356a:	f7e9 fb98 	bl	cc9e <ocrypto_mod_p256_sub>
   2356e:	4620      	mov	r0, r4
   23570:	2120      	movs	r1, #32
   23572:	f7e9 fb3a 	bl	cbea <ocrypto_constant_time_is_zero>
   23576:	a908      	add	r1, sp, #32
   23578:	4243      	negs	r3, r0
   2357a:	4602      	mov	r2, r0
   2357c:	4668      	mov	r0, sp
   2357e:	ea43 0808 	orr.w	r8, r3, r8
   23582:	f7e9 f89c 	bl	c6be <ocrypto_bigint_cswap256>
   23586:	4648      	mov	r0, r9
   23588:	4669      	mov	r1, sp
   2358a:	4a06      	ldr	r2, [pc, #24]	; (235a4 <ocrypto_curve_p256_scalarmult+0x160>)
   2358c:	f7e9 fbb5 	bl	ccfa <ocrypto_mod_p256_mul>
   23590:	4640      	mov	r0, r8
   23592:	b038      	add	sp, #224	; 0xe0
   23594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23598:	00027948 	.word	0x00027948
   2359c:	000278c8 	.word	0x000278c8
   235a0:	00027928 	.word	0x00027928
   235a4:	000278e8 	.word	0x000278e8

000235a8 <ocrypto_curve_p256_scalarmult_base>:
   235a8:	460a      	mov	r2, r1
   235aa:	4901      	ldr	r1, [pc, #4]	; (235b0 <ocrypto_curve_p256_scalarmult_base+0x8>)
   235ac:	f7ff bf4a 	b.w	23444 <ocrypto_curve_p256_scalarmult>
   235b0:	00027888 	.word	0x00027888

000235b4 <main>:
		nrf_regulators_system_off(NRF_REGULATORS_NS);
	}
}
#else
void main(void)
{
   235b4:	b508      	push	{r3, lr}
	start_execute();
   235b6:	f7e9 feb7 	bl	d328 <start_execute>
	//send_message();
	do
	{
		// Send message with network stats to UDP server every 10 s.
		send_message();
   235ba:	f000 f835 	bl	23628 <send_message>
	return z_impl_k_sleep(ms);
   235be:	f242 7010 	movw	r0, #10000	; 0x2710
   235c2:	f7ff f98b 	bl	228dc <z_impl_k_sleep>
   235c6:	e7f8      	b.n	235ba <main+0x6>

000235c8 <uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   235c8:	6843      	ldr	r3, [r0, #4]
   235ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   235cc:	b103      	cbz	r3, 235d0 <uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   235ce:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
}
   235d0:	4770      	bx	lr

000235d2 <slm_at_callback>:
{
   235d2:	b510      	push	{r4, lr}
   235d4:	4604      	mov	r4, r0
	write_uart_string(str, strlen(str));
   235d6:	f001 f8ca 	bl	2476e <strlen>
   235da:	4601      	mov	r1, r0
   235dc:	4620      	mov	r0, r4
}
   235de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	write_uart_string(str, strlen(str));
   235e2:	f7e9 bedd 	b.w	d3a0 <write_uart_string>

000235e6 <response_handler>:
{
   235e6:	b510      	push	{r4, lr}
	int len = strlen(response) + 1;
   235e8:	4608      	mov	r0, r1
{
   235ea:	460c      	mov	r4, r1
	int len = strlen(response) + 1;
   235ec:	f001 f8bf 	bl	2476e <strlen>
   235f0:	1c41      	adds	r1, r0, #1
	if (len > 1) {
   235f2:	2901      	cmp	r1, #1
   235f4:	dd04      	ble.n	23600 <response_handler+0x1a>
		write_uart_string(response, len);
   235f6:	4620      	mov	r0, r4
}
   235f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		write_uart_string(response, len);
   235fc:	f7e9 bed0 	b.w	d3a0 <write_uart_string>
}
   23600:	bd10      	pop	{r4, pc}

00023602 <z_errno>:
   23602:	f7fe bad5 	b.w	21bb0 <z_impl_z_errno>

00023606 <k_sleep>:
   23606:	f7ff b969 	b.w	228dc <z_impl_k_sleep>

0002360a <check_for_ipv4.part.0>:
	for (index = 0; index < length; index++) {
   2360a:	2300      	movs	r3, #0
   2360c:	428b      	cmp	r3, r1
   2360e:	db01      	blt.n	23614 <check_for_ipv4.part.0+0xa>
	return true;
   23610:	2001      	movs	r0, #1
   23612:	4770      	bx	lr
		char ch = *(address + index);
   23614:	5cc2      	ldrb	r2, [r0, r3]
		if ((ch == '.') || (ch >= '0' && ch <= '9')) {
   23616:	2a2e      	cmp	r2, #46	; 0x2e
   23618:	d002      	beq.n	23620 <check_for_ipv4.part.0+0x16>
   2361a:	3a30      	subs	r2, #48	; 0x30
   2361c:	2a09      	cmp	r2, #9
   2361e:	d801      	bhi.n	23624 <check_for_ipv4.part.0+0x1a>
	for (index = 0; index < length; index++) {
   23620:	3301      	adds	r3, #1
   23622:	e7f3      	b.n	2360c <check_for_ipv4.part.0+0x2>
			return false;
   23624:	2000      	movs	r0, #0
}
   23626:	4770      	bx	lr

00023628 <send_message>:

void send_message(void)
{
	// Request network stats: Current and neighbor Cell ID, RSRP etc.
	request_nb_iot_network_stats();
   23628:	f7ea bf6c 	b.w	e504 <request_nb_iot_network_stats>

0002362c <z_errno>:
   2362c:	f7fe bac0 	b.w	21bb0 <z_impl_z_errno>

00023630 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
   23630:	b570      	push	{r4, r5, r6, lr}
   23632:	250c      	movs	r5, #12
   23634:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   23636:	f990 000b 	ldrsb.w	r0, [r0, #11]
   2363a:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
   2363c:	4288      	cmp	r0, r1

	*word = &bitarray[bn / 32];
   2363e:	4610      	mov	r0, r2
   23640:	eb06 0405 	add.w	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   23644:	bfb8      	it	lt
   23646:	5974      	ldrlt	r4, [r6, r5]
	*word = &bitarray[bn / 32];
   23648:	2a00      	cmp	r2, #0
   2364a:	bfb8      	it	lt
   2364c:	f102 001f 	addlt.w	r0, r2, #31
   23650:	1140      	asrs	r0, r0, #5
   23652:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   23656:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
   23658:	f002 001f 	and.w	r0, r2, #31
   2365c:	bd70      	pop	{r4, r5, r6, pc}

0002365e <pool_irq_lock.isra.2.part.3>:
   2365e:	f04f 0320 	mov.w	r3, #32
   23662:	f3ef 8011 	mrs	r0, BASEPRI
   23666:	f383 8811 	msr	BASEPRI, r3
   2366a:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
   2366e:	4770      	bx	lr

00023670 <pool_irq_unlock.isra.4>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   23670:	07c3      	lsls	r3, r0, #31
   23672:	d503      	bpl.n	2367c <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   23674:	f381 8811 	msr	BASEPRI, r1
   23678:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
   2367c:	4770      	bx	lr

0002367e <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   2367e:	23ff      	movs	r3, #255	; 0xff
{
   23680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   23684:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
   23686:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   23688:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
   2368a:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
   2368c:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   23690:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   23692:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   23694:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
   23698:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   2369c:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
   2369e:	4598      	cmp	r8, r3
   236a0:	dc05      	bgt.n	236ae <z_sys_mem_pool_base_init+0x30>
   236a2:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   236a4:	4619      	mov	r1, r3
   236a6:	428f      	cmp	r7, r1
   236a8:	dc20      	bgt.n	236ec <z_sys_mem_pool_base_init+0x6e>
}
   236aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   236ae:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   236b2:	fb09 fe03 	mul.w	lr, r9, r3
   236b6:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   236ba:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
   236bc:	eb0a 040e 	add.w	r4, sl, lr
   236c0:	f104 0b04 	add.w	fp, r4, #4
	list->tail = (sys_dnode_t *)list;
   236c4:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   236c8:	d805      	bhi.n	236d6 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   236ca:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   236cc:	0892      	lsrs	r2, r2, #2
   236ce:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   236d2:	3301      	adds	r3, #1
   236d4:	e7e3      	b.n	2369e <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   236d6:	f115 041f 	adds.w	r4, r5, #31
   236da:	bf48      	it	mi
   236dc:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   236e0:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   236e2:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   236e6:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   236ea:	e7ef      	b.n	236cc <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   236ec:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   236ee:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   236f0:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   236f4:	18ec      	adds	r4, r5, r3
	node->next = list;
   236f6:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   236fa:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   236fc:	3101      	adds	r1, #1
   236fe:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   23700:	6895      	ldr	r5, [r2, #8]
   23702:	4433      	add	r3, r6
   23704:	602c      	str	r4, [r5, #0]
	list->tail = node;
   23706:	6094      	str	r4, [r2, #8]
   23708:	e7cd      	b.n	236a6 <z_sys_mem_pool_base_init+0x28>

0002370a <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
   2370a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2370e:	b087      	sub	sp, #28
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   23710:	7a84      	ldrb	r4, [r0, #10]
{
   23712:	af00      	add	r7, sp, #0
   23714:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   23718:	00a3      	lsls	r3, r4, #2
   2371a:	3307      	adds	r3, #7
   2371c:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   23720:	ebad 0d03 	sub.w	sp, sp, r3
   23724:	46ea      	mov	sl, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
   23726:	4653      	mov	r3, sl
   23728:	6842      	ldr	r2, [r0, #4]
{
   2372a:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   2372c:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   23730:	2200      	movs	r2, #0
   23732:	4294      	cmp	r4, r2
   23734:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   23738:	dd09      	ble.n	2374e <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   2373a:	b122      	cbz	r2, 23746 <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   2373c:	6818      	ldr	r0, [r3, #0]
   2373e:	0880      	lsrs	r0, r0, #2
   23740:	f020 0003 	bic.w	r0, r0, #3
   23744:	6058      	str	r0, [r3, #4]
		}

		if (lsizes[i] < size) {
   23746:	f853 0f04 	ldr.w	r0, [r3, #4]!
   2374a:	4288      	cmp	r0, r1
   2374c:	d208      	bcs.n	23760 <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
   2374e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   23752:	d107      	bne.n	23764 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   23754:	2300      	movs	r3, #0
   23756:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   23758:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
   2375a:	f06f 000b 	mvn.w	r0, #11
   2375e:	e02c      	b.n	237ba <z_sys_mem_pool_block_alloc+0xb0>
	for (i = 0; i < p->n_levels; i++) {
   23760:	3201      	adds	r2, #1
   23762:	e7e6      	b.n	23732 <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   23764:	7c28      	ldrb	r0, [r5, #16]
   23766:	f010 0001 	ands.w	r0, r0, #1
   2376a:	d001      	beq.n	23770 <z_sys_mem_pool_block_alloc+0x66>
   2376c:	f7ff ff77 	bl	2365e <pool_irq_lock.isra.2.part.3>
   23770:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
   23772:	4680      	mov	r8, r0
	block = sys_dlist_get(&p->levels[l].free_list);
   23774:	464e      	mov	r6, r9
   23776:	68ea      	ldr	r2, [r5, #12]
   23778:	fb03 2309 	mla	r3, r3, r9, r2
	return list->head == list;
   2377c:	461a      	mov	r2, r3
   2377e:	f852 4f04 	ldr.w	r4, [r2, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   23782:	4294      	cmp	r4, r2
   23784:	d11d      	bne.n	237c2 <z_sys_mem_pool_block_alloc+0xb8>
	for (i = alloc_l; i >= 0; i--) {
   23786:	3e01      	subs	r6, #1
   23788:	1c72      	adds	r2, r6, #1
   2378a:	f1a3 030c 	sub.w	r3, r3, #12
   2378e:	d1f5      	bne.n	2377c <z_sys_mem_pool_block_alloc+0x72>
   23790:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
   23792:	4641      	mov	r1, r8
   23794:	7c28      	ldrb	r0, [r5, #16]
   23796:	f7ff ff6b 	bl	23670 <pool_irq_unlock.isra.4>
	*data_p = data;
   2379a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2379c:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   2379e:	2c00      	cmp	r4, #0
   237a0:	d0db      	beq.n	2375a <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
   237a2:	68bb      	ldr	r3, [r7, #8]
	*block_p = block_num(p, data, lsizes[alloc_l]);

	return 0;
   237a4:	2000      	movs	r0, #0
	*level_p = alloc_l;
   237a6:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   237aa:	682b      	ldr	r3, [r5, #0]
   237ac:	1ae4      	subs	r4, r4, r3
   237ae:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   237b2:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   237b6:	687b      	ldr	r3, [r7, #4]
   237b8:	601c      	str	r4, [r3, #0]
}
   237ba:	371c      	adds	r7, #28
   237bc:	46bd      	mov	sp, r7
   237be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	node->prev->next = node->next;
   237c2:	e9d4 3200 	ldrd	r3, r2, [r4]
   237c6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   237c8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   237ca:	2300      	movs	r3, #0
	node->prev = NULL;
   237cc:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   237d0:	682b      	ldr	r3, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   237d2:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   237d6:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   237d8:	f107 0b14 	add.w	fp, r7, #20
   237dc:	fb92 f2f1 	sdiv	r2, r2, r1
   237e0:	465b      	mov	r3, fp
   237e2:	4631      	mov	r1, r6
   237e4:	4628      	mov	r0, r5
   237e6:	f7ff ff23 	bl	23630 <get_bit_ptr>
	*word |= (1<<bit);
   237ea:	2201      	movs	r2, #1
   237ec:	6979      	ldr	r1, [r7, #20]
   237ee:	fa02 f000 	lsl.w	r0, r2, r0
   237f2:	680b      	ldr	r3, [r1, #0]
   237f4:	603a      	str	r2, [r7, #0]
   237f6:	4303      	orrs	r3, r0
   237f8:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
   237fa:	454e      	cmp	r6, r9
   237fc:	dac9      	bge.n	23792 <z_sys_mem_pool_block_alloc+0x88>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   237fe:	682a      	ldr	r2, [r5, #0]
   23800:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
   23804:	1aa2      	subs	r2, r4, r2
   23806:	fb92 f2f3 	sdiv	r2, r2, r3
	set_alloc_bit(p, l + 1, 4*bn);
   2380a:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   2380c:	465b      	mov	r3, fp
   2380e:	0092      	lsls	r2, r2, #2
   23810:	4631      	mov	r1, r6
   23812:	4628      	mov	r0, r5
   23814:	f7ff ff0c 	bl	23630 <get_bit_ptr>
	*word |= (1<<bit);
   23818:	697a      	ldr	r2, [r7, #20]
   2381a:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   2381c:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   2381e:	fa03 f000 	lsl.w	r0, r3, r0
   23822:	6813      	ldr	r3, [r2, #0]
   23824:	4303      	orrs	r3, r0
   23826:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   23828:	230c      	movs	r3, #12
   2382a:	2203      	movs	r2, #3
   2382c:	fb03 1106 	mla	r1, r3, r6, r1
		int lsz = lsizes[l + 1];
   23830:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   23834:	f101 0e04 	add.w	lr, r1, #4
   23838:	1823      	adds	r3, r4, r0
   2383a:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
   2383c:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   2383e:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   23842:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   23844:	688a      	ldr	r2, [r1, #8]
   23846:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   23848:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
   2384a:	608b      	str	r3, [r1, #8]
   2384c:	3a01      	subs	r2, #1
   2384e:	4403      	add	r3, r0
   23850:	60fa      	str	r2, [r7, #12]
   23852:	d1f3      	bne.n	2383c <z_sys_mem_pool_block_alloc+0x132>
				pool_irq_unlock(p, key);
   23854:	4641      	mov	r1, r8
   23856:	7c28      	ldrb	r0, [r5, #16]
   23858:	f7ff ff0a 	bl	23670 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   2385c:	7c2b      	ldrb	r3, [r5, #16]
   2385e:	07db      	lsls	r3, r3, #31
   23860:	d503      	bpl.n	2386a <z_sys_mem_pool_block_alloc+0x160>
   23862:	f7ff fefc 	bl	2365e <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   23866:	4680      	mov	r8, r0
   23868:	e7c7      	b.n	237fa <z_sys_mem_pool_block_alloc+0xf0>
		return 0;
   2386a:	68f8      	ldr	r0, [r7, #12]
   2386c:	e7fb      	b.n	23866 <z_sys_mem_pool_block_alloc+0x15c>

0002386e <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   2386e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23872:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   23874:	7a83      	ldrb	r3, [r0, #10]
{
   23876:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   23878:	009b      	lsls	r3, r3, #2
   2387a:	3307      	adds	r3, #7
   2387c:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   23880:	ebad 0d03 	sub.w	sp, sp, r3
   23884:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   23886:	6843      	ldr	r3, [r0, #4]
{
   23888:	4606      	mov	r6, r0
	lsizes[0] = p->max_sz;
   2388a:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
   2388c:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
   2388e:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
   23892:	4281      	cmp	r1, r0
   23894:	d215      	bcs.n	238c2 <z_sys_mem_pool_block_free+0x54>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   23896:	7c30      	ldrb	r0, [r6, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   23898:	4688      	mov	r8, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   2389a:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
   2389e:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   238a0:	d001      	beq.n	238a6 <z_sys_mem_pool_block_free+0x38>
   238a2:	f7ff fedc 	bl	2365e <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   238a6:	4604      	mov	r4, r0
	while (level >= 0) {
   238a8:	f1b8 0f00 	cmp.w	r8, #0
   238ac:	da11      	bge.n	238d2 <z_sys_mem_pool_block_free+0x64>
	return -1;
   238ae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
   238b2:	4621      	mov	r1, r4
   238b4:	7c30      	ldrb	r0, [r6, #16]
   238b6:	f7ff fedb 	bl	23670 <pool_irq_unlock.isra.4>
}
   238ba:	3714      	adds	r7, #20
   238bc:	46bd      	mov	sp, r7
   238be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   238c2:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
   238c4:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   238c6:	089b      	lsrs	r3, r3, #2
   238c8:	f023 0303 	bic.w	r3, r3, #3
   238cc:	f844 3f04 	str.w	r3, [r4, #4]!
   238d0:	e7df      	b.n	23892 <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   238d2:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   238d6:	462a      	mov	r2, r5
	return (u8_t *)p->buf + lsz * block;
   238d8:	fb03 fa05 	mul.w	sl, r3, r5
		int i, lsz = lsizes[level];
   238dc:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   238de:	6833      	ldr	r3, [r6, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   238e0:	4641      	mov	r1, r8
	return (u8_t *)p->buf + lsz * block;
   238e2:	eb03 090a 	add.w	r9, r3, sl
   238e6:	603b      	str	r3, [r7, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   238e8:	4630      	mov	r0, r6
   238ea:	f107 030c 	add.w	r3, r7, #12
   238ee:	f7ff fe9f 	bl	23630 <get_bit_ptr>
	*word &= ~(1<<bit);
   238f2:	2301      	movs	r3, #1
   238f4:	68fa      	ldr	r2, [r7, #12]
   238f6:	fa03 f000 	lsl.w	r0, r3, r0
   238fa:	6813      	ldr	r3, [r2, #0]
	node->next = list;
   238fc:	6839      	ldr	r1, [r7, #0]
   238fe:	ea23 0300 	bic.w	r3, r3, r0
   23902:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   23904:	220c      	movs	r2, #12
   23906:	68f3      	ldr	r3, [r6, #12]
   23908:	fb02 3308 	mla	r3, r2, r8, r3
   2390c:	1d1a      	adds	r2, r3, #4
   2390e:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
   23912:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
   23914:	4621      	mov	r1, r4
   23916:	f8c9 2004 	str.w	r2, [r9, #4]
	list->tail->next = node;
   2391a:	689a      	ldr	r2, [r3, #8]
   2391c:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
   23920:	f8c3 9008 	str.w	r9, [r3, #8]
   23924:	7c30      	ldrb	r0, [r6, #16]
   23926:	f7ff fea3 	bl	23670 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   2392a:	7c30      	ldrb	r0, [r6, #16]
   2392c:	f010 0001 	ands.w	r0, r0, #1
   23930:	d001      	beq.n	23936 <z_sys_mem_pool_block_free+0xc8>
   23932:	f7ff fe94 	bl	2365e <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   23936:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   23938:	f1b8 0f00 	cmp.w	r8, #0
   2393c:	d0b9      	beq.n	238b2 <z_sys_mem_pool_block_free+0x44>
	int bit = get_bit_ptr(p, level, bn, &word);
   2393e:	f107 030c 	add.w	r3, r7, #12
   23942:	462a      	mov	r2, r5
   23944:	4641      	mov	r1, r8
   23946:	4630      	mov	r0, r6
   23948:	f7ff fe72 	bl	23630 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   2394c:	68fb      	ldr	r3, [r7, #12]
   2394e:	2800      	cmp	r0, #0
   23950:	bfb8      	it	lt
   23952:	3003      	addlt	r0, #3
   23954:	681b      	ldr	r3, [r3, #0]
   23956:	f020 0003 	bic.w	r0, r0, #3
   2395a:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   2395e:	f010 000f 	ands.w	r0, r0, #15
   23962:	d1a6      	bne.n	238b2 <z_sys_mem_pool_block_free+0x44>
	node->next = NULL;
   23964:	4684      	mov	ip, r0
			int b = (bn & ~3) + i;
   23966:	f025 0a03 	bic.w	sl, r5, #3
	return (u8_t *)p->buf + lsz * block;
   2396a:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
   2396c:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
   23970:	4353      	muls	r3, r2
   23972:	6832      	ldr	r2, [r6, #0]
		for (i = 0; i < 4; i++) {
   23974:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
   23976:	18d1      	adds	r1, r2, r3
	node->prev->next = node->next;
   23978:	f8d1 9004 	ldr.w	r9, [r1, #4]
   2397c:	f852 e003 	ldr.w	lr, [r2, r3]
		for (i = 0; i < 4; i++) {
   23980:	2804      	cmp	r0, #4
   23982:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
   23986:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
   2398a:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
   2398e:	f8c1 c004 	str.w	ip, [r1, #4]
   23992:	d1ea      	bne.n	2396a <z_sys_mem_pool_block_free+0xfc>
		bn = bn / 4;
   23994:	2d00      	cmp	r5, #0
   23996:	bfb8      	it	lt
   23998:	3503      	addlt	r5, #3
		level = level - 1;
   2399a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		bn = bn / 4;
   2399e:	10ad      	asrs	r5, r5, #2
   239a0:	e782      	b.n	238a8 <z_sys_mem_pool_block_free+0x3a>

000239a2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   239a2:	4604      	mov	r4, r0
   239a4:	b508      	push	{r3, lr}
   239a6:	4608      	mov	r0, r1
   239a8:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   239aa:	461a      	mov	r2, r3
   239ac:	47a0      	blx	r4
	return z_impl_k_current_get();
   239ae:	f7fe ffbd 	bl	2292c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   239b2:	f7ec ff09 	bl	107c8 <z_impl_k_thread_abort>

000239b6 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   239b6:	b510      	push	{r4, lr}
   239b8:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   239ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   239be:	4620      	mov	r0, r4
   239c0:	f002 f8b6 	bl	25b30 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   239c4:	4603      	mov	r3, r0
   239c6:	2800      	cmp	r0, #0
   239c8:	d0f7      	beq.n	239ba <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   239ca:	6842      	ldr	r2, [r0, #4]
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   239cc:	3308      	adds	r3, #8
   239ce:	e8d3 1fef 	ldaex	r1, [r3]
   239d2:	f021 0c01 	bic.w	ip, r1, #1
   239d6:	e8c3 cfee 	stlex	lr, ip, [r3]
   239da:	f1be 0f00 	cmp.w	lr, #0
   239de:	d1f6      	bne.n	239ce <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   239e0:	07cb      	lsls	r3, r1, #31
   239e2:	d500      	bpl.n	239e6 <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   239e4:	4790      	blx	r2
	z_impl_k_yield();
   239e6:	f7fe ff2d 	bl	22844 <z_impl_k_yield>
   239ea:	e7e6      	b.n	239ba <z_work_q_main+0x4>

000239ec <arch_printk_char_out>:
}
   239ec:	2000      	movs	r0, #0
   239ee:	4770      	bx	lr

000239f0 <print_err>:
{
   239f0:	b570      	push	{r4, r5, r6, lr}
   239f2:	460d      	mov	r5, r1
   239f4:	4604      	mov	r4, r0
	out('E', ctx);
   239f6:	2045      	movs	r0, #69	; 0x45
   239f8:	47a0      	blx	r4
	out('R', ctx);
   239fa:	4629      	mov	r1, r5
   239fc:	2052      	movs	r0, #82	; 0x52
   239fe:	47a0      	blx	r4
	out('R', ctx);
   23a00:	4629      	mov	r1, r5
   23a02:	4623      	mov	r3, r4
}
   23a04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   23a08:	2052      	movs	r0, #82	; 0x52
   23a0a:	4718      	bx	r3

00023a0c <z_vprintk>:
{
   23a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   23a10:	f04f 0800 	mov.w	r8, #0
{
   23a14:	4606      	mov	r6, r0
   23a16:	460f      	mov	r7, r1
	int min_width = -1;
   23a18:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   23a1c:	46c1      	mov	r9, r8
{
   23a1e:	b08b      	sub	sp, #44	; 0x2c
   23a20:	461c      	mov	r4, r3
	while (*fmt) {
   23a22:	1e53      	subs	r3, r2, #1
   23a24:	9302      	str	r3, [sp, #8]
			might_format = 0;
   23a26:	2500      	movs	r5, #0
					break;
   23a28:	e005      	b.n	23a36 <z_vprintk+0x2a>
		if (!might_format) {
   23a2a:	b96d      	cbnz	r5, 23a48 <z_vprintk+0x3c>
			if (*fmt != '%') {
   23a2c:	2825      	cmp	r0, #37	; 0x25
   23a2e:	f000 814f 	beq.w	23cd0 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   23a32:	4639      	mov	r1, r7
   23a34:	47b0      	blx	r6
	while (*fmt) {
   23a36:	9b02      	ldr	r3, [sp, #8]
   23a38:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   23a3c:	9302      	str	r3, [sp, #8]
   23a3e:	2800      	cmp	r0, #0
   23a40:	d1f3      	bne.n	23a2a <z_vprintk+0x1e>
}
   23a42:	b00b      	add	sp, #44	; 0x2c
   23a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   23a48:	2864      	cmp	r0, #100	; 0x64
   23a4a:	d06e      	beq.n	23b2a <z_vprintk+0x11e>
   23a4c:	d81a      	bhi.n	23a84 <z_vprintk+0x78>
   23a4e:	2839      	cmp	r0, #57	; 0x39
   23a50:	d80a      	bhi.n	23a68 <z_vprintk+0x5c>
   23a52:	2831      	cmp	r0, #49	; 0x31
   23a54:	d260      	bcs.n	23b18 <z_vprintk+0x10c>
   23a56:	282d      	cmp	r0, #45	; 0x2d
   23a58:	f000 8140 	beq.w	23cdc <z_vprintk+0x2d0>
   23a5c:	2830      	cmp	r0, #48	; 0x30
   23a5e:	d04c      	beq.n	23afa <z_vprintk+0xee>
   23a60:	2825      	cmp	r0, #37	; 0x25
   23a62:	d107      	bne.n	23a74 <z_vprintk+0x68>
				out((int)'%', ctx);
   23a64:	4639      	mov	r1, r7
   23a66:	e00b      	b.n	23a80 <z_vprintk+0x74>
			switch (*fmt) {
   23a68:	2858      	cmp	r0, #88	; 0x58
   23a6a:	f000 80bb 	beq.w	23be4 <z_vprintk+0x1d8>
   23a6e:	2863      	cmp	r0, #99	; 0x63
   23a70:	f000 812a 	beq.w	23cc8 <z_vprintk+0x2bc>
					out((int)'%', ctx);
   23a74:	4639      	mov	r1, r7
   23a76:	2025      	movs	r0, #37	; 0x25
   23a78:	47b0      	blx	r6
					out((int)*fmt, ctx);
   23a7a:	4639      	mov	r1, r7
   23a7c:	9b02      	ldr	r3, [sp, #8]
   23a7e:	7818      	ldrb	r0, [r3, #0]
   23a80:	47b0      	blx	r6
   23a82:	e7d0      	b.n	23a26 <z_vprintk+0x1a>
			switch (*fmt) {
   23a84:	2870      	cmp	r0, #112	; 0x70
   23a86:	f000 80a3 	beq.w	23bd0 <z_vprintk+0x1c4>
   23a8a:	d811      	bhi.n	23ab0 <z_vprintk+0xa4>
   23a8c:	2869      	cmp	r0, #105	; 0x69
   23a8e:	d04c      	beq.n	23b2a <z_vprintk+0x11e>
   23a90:	286c      	cmp	r0, #108	; 0x6c
   23a92:	d105      	bne.n	23aa0 <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
   23a94:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   23a98:	d12a      	bne.n	23af0 <z_vprintk+0xe4>
					length_mod = 'L';
   23a9a:	f04f 084c 	mov.w	r8, #76	; 0x4c
   23a9e:	e7ca      	b.n	23a36 <z_vprintk+0x2a>
			switch (*fmt) {
   23aa0:	2868      	cmp	r0, #104	; 0x68
   23aa2:	d1e7      	bne.n	23a74 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   23aa4:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   23aa8:	d122      	bne.n	23af0 <z_vprintk+0xe4>
					length_mod = 'H';
   23aaa:	f04f 0848 	mov.w	r8, #72	; 0x48
   23aae:	e7c2      	b.n	23a36 <z_vprintk+0x2a>
			switch (*fmt) {
   23ab0:	2875      	cmp	r0, #117	; 0x75
   23ab2:	d071      	beq.n	23b98 <z_vprintk+0x18c>
   23ab4:	d818      	bhi.n	23ae8 <z_vprintk+0xdc>
   23ab6:	2873      	cmp	r0, #115	; 0x73
   23ab8:	d1dc      	bne.n	23a74 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   23aba:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   23abe:	46ab      	mov	fp, r5
   23ac0:	465b      	mov	r3, fp
   23ac2:	f81b 0b01 	ldrb.w	r0, [fp], #1
   23ac6:	2800      	cmp	r0, #0
   23ac8:	f040 80fb 	bne.w	23cc2 <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
   23acc:	f1b9 0f03 	cmp.w	r9, #3
   23ad0:	f040 810a 	bne.w	23ce8 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   23ad4:	1b5d      	subs	r5, r3, r5
   23ad6:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   23ada:	2d00      	cmp	r5, #0
   23adc:	dda3      	ble.n	23a26 <z_vprintk+0x1a>
						out(' ', ctx);
   23ade:	4639      	mov	r1, r7
   23ae0:	2020      	movs	r0, #32
   23ae2:	47b0      	blx	r6
   23ae4:	3d01      	subs	r5, #1
   23ae6:	e7f8      	b.n	23ada <z_vprintk+0xce>
			switch (*fmt) {
   23ae8:	2878      	cmp	r0, #120	; 0x78
   23aea:	d07b      	beq.n	23be4 <z_vprintk+0x1d8>
   23aec:	287a      	cmp	r0, #122	; 0x7a
   23aee:	d1c1      	bne.n	23a74 <z_vprintk+0x68>
				} else if (length_mod == 0) {
   23af0:	f1b8 0f00 	cmp.w	r8, #0
   23af4:	d1be      	bne.n	23a74 <z_vprintk+0x68>
   23af6:	4680      	mov	r8, r0
   23af8:	e79d      	b.n	23a36 <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
   23afa:	f1ba 0f00 	cmp.w	sl, #0
   23afe:	da0e      	bge.n	23b1e <z_vprintk+0x112>
   23b00:	f1b9 0f00 	cmp.w	r9, #0
   23b04:	f000 80ed 	beq.w	23ce2 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   23b08:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   23b0c:	f1b9 0f00 	cmp.w	r9, #0
   23b10:	bf08      	it	eq
   23b12:	f04f 0902 	moveq.w	r9, #2
   23b16:	e78e      	b.n	23a36 <z_vprintk+0x2a>
				if (min_width < 0) {
   23b18:	f1ba 0f00 	cmp.w	sl, #0
   23b1c:	dbf4      	blt.n	23b08 <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
   23b1e:	230a      	movs	r3, #10
   23b20:	fb03 0a0a 	mla	sl, r3, sl, r0
   23b24:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   23b28:	e7f0      	b.n	23b0c <z_vprintk+0x100>
				if (length_mod == 'z') {
   23b2a:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   23b2e:	d102      	bne.n	23b36 <z_vprintk+0x12a>
					d = va_arg(ap, int);
   23b30:	f854 5b04 	ldr.w	r5, [r4], #4
   23b34:	e01f      	b.n	23b76 <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
   23b36:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   23b3a:	d0f9      	beq.n	23b30 <z_vprintk+0x124>
				} else if (length_mod == 'L') {
   23b3c:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   23b40:	d1f6      	bne.n	23b30 <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
   23b42:	3407      	adds	r4, #7
   23b44:	f024 0407 	bic.w	r4, r4, #7
   23b48:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   23b4c:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   23b50:	9106      	str	r1, [sp, #24]
   23b52:	f143 0100 	adc.w	r1, r3, #0
   23b56:	9107      	str	r1, [sp, #28]
   23b58:	2100      	movs	r1, #0
   23b5a:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   23b5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23b62:	4561      	cmp	r1, ip
   23b64:	bf08      	it	eq
   23b66:	4558      	cmpeq	r0, fp
   23b68:	d204      	bcs.n	23b74 <z_vprintk+0x168>
						print_err(out, ctx);
   23b6a:	4639      	mov	r1, r7
   23b6c:	4630      	mov	r0, r6
   23b6e:	f7ff ff3f 	bl	239f0 <print_err>
						break;
   23b72:	e758      	b.n	23a26 <z_vprintk+0x1a>
					d = lld;
   23b74:	4615      	mov	r5, r2
				if (d < 0) {
   23b76:	2d00      	cmp	r5, #0
   23b78:	da05      	bge.n	23b86 <z_vprintk+0x17a>
					out((int)'-', ctx);
   23b7a:	4639      	mov	r1, r7
   23b7c:	202d      	movs	r0, #45	; 0x2d
   23b7e:	47b0      	blx	r6
					d = -d;
   23b80:	426d      	negs	r5, r5
					min_width--;
   23b82:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   23b86:	464b      	mov	r3, r9
   23b88:	462a      	mov	r2, r5
   23b8a:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   23b8e:	4639      	mov	r1, r7
   23b90:	4630      	mov	r0, r6
   23b92:	f7eb fae7 	bl	f164 <_printk_dec_ulong>
				break;
   23b96:	e746      	b.n	23a26 <z_vprintk+0x1a>
				if (length_mod == 'z') {
   23b98:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   23b9c:	d102      	bne.n	23ba4 <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
   23b9e:	f854 2b04 	ldr.w	r2, [r4], #4
   23ba2:	e011      	b.n	23bc8 <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
   23ba4:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   23ba8:	d0f9      	beq.n	23b9e <z_vprintk+0x192>
				} else if (length_mod == 'L') {
   23baa:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   23bae:	d1f6      	bne.n	23b9e <z_vprintk+0x192>
					if (llu > ~0UL) {
   23bb0:	2100      	movs	r1, #0
   23bb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
   23bb6:	3407      	adds	r4, #7
   23bb8:	f024 0407 	bic.w	r4, r4, #7
   23bbc:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   23bc0:	4299      	cmp	r1, r3
   23bc2:	bf08      	it	eq
   23bc4:	4290      	cmpeq	r0, r2
   23bc6:	d3d0      	bcc.n	23b6a <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
   23bc8:	f8cd a000 	str.w	sl, [sp]
   23bcc:	464b      	mov	r3, r9
   23bce:	e7de      	b.n	23b8e <z_vprintk+0x182>
				out('0', ctx);
   23bd0:	4639      	mov	r1, r7
   23bd2:	2030      	movs	r0, #48	; 0x30
   23bd4:	47b0      	blx	r6
				out('x', ctx);
   23bd6:	4639      	mov	r1, r7
   23bd8:	2078      	movs	r0, #120	; 0x78
   23bda:	47b0      	blx	r6
					min_width = 8;
   23bdc:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   23be0:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   23be4:	9b02      	ldr	r3, [sp, #8]
   23be6:	781b      	ldrb	r3, [r3, #0]
   23be8:	2b70      	cmp	r3, #112	; 0x70
   23bea:	d104      	bne.n	23bf6 <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
   23bec:	f854 3b04 	ldr.w	r3, [r4], #4
   23bf0:	9304      	str	r3, [sp, #16]
   23bf2:	2300      	movs	r3, #0
   23bf4:	e00d      	b.n	23c12 <z_vprintk+0x206>
				} else if (length_mod == 'l') {
   23bf6:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   23bfa:	d0f7      	beq.n	23bec <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
   23bfc:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   23c00:	d1f4      	bne.n	23bec <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
   23c02:	3407      	adds	r4, #7
   23c04:	f024 0307 	bic.w	r3, r4, #7
   23c08:	461c      	mov	r4, r3
   23c0a:	f854 2b08 	ldr.w	r2, [r4], #8
   23c0e:	685b      	ldr	r3, [r3, #4]
   23c10:	9204      	str	r2, [sp, #16]
	int digits = 0;
   23c12:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   23c14:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
   23c16:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
   23c1a:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   23c1c:	9105      	str	r1, [sp, #20]
		shift -= 4;
   23c1e:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   23c22:	9804      	ldr	r0, [sp, #16]
   23c24:	f1cb 0c20 	rsb	ip, fp, #32
   23c28:	f1ab 0120 	sub.w	r1, fp, #32
   23c2c:	fa20 f00b 	lsr.w	r0, r0, fp
   23c30:	fa03 fc0c 	lsl.w	ip, r3, ip
   23c34:	ea40 000c 	orr.w	r0, r0, ip
   23c38:	fa23 f101 	lsr.w	r1, r3, r1
   23c3c:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   23c3e:	f010 000f 	ands.w	r0, r0, #15
   23c42:	d106      	bne.n	23c52 <z_vprintk+0x246>
   23c44:	9905      	ldr	r1, [sp, #20]
   23c46:	b911      	cbnz	r1, 23c4e <z_vprintk+0x242>
   23c48:	f1bb 0f00 	cmp.w	fp, #0
   23c4c:	d122      	bne.n	23c94 <z_vprintk+0x288>
			nibble += nibble > 9 ? 87 : 48;
   23c4e:	2130      	movs	r1, #48	; 0x30
   23c50:	e003      	b.n	23c5a <z_vprintk+0x24e>
   23c52:	2809      	cmp	r0, #9
   23c54:	bf8c      	ite	hi
   23c56:	2157      	movhi	r1, #87	; 0x57
   23c58:	2130      	movls	r1, #48	; 0x30
   23c5a:	4408      	add	r0, r1
			out((int)nibble, ctx);
   23c5c:	b240      	sxtb	r0, r0
   23c5e:	4639      	mov	r1, r7
   23c60:	9308      	str	r3, [sp, #32]
   23c62:	9205      	str	r2, [sp, #20]
   23c64:	47b0      	blx	r6
			digits++;
   23c66:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   23c68:	9a05      	ldr	r2, [sp, #20]
			digits++;
   23c6a:	3301      	adds	r3, #1
   23c6c:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   23c6e:	9b08      	ldr	r3, [sp, #32]
   23c70:	f1bb 0f00 	cmp.w	fp, #0
   23c74:	d123      	bne.n	23cbe <z_vprintk+0x2b2>
	if (padding == PAD_SPACE_AFTER) {
   23c76:	f1b9 0f03 	cmp.w	r9, #3
   23c7a:	f47f aed4 	bne.w	23a26 <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
   23c7e:	9b03      	ldr	r3, [sp, #12]
   23c80:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   23c84:	2d00      	cmp	r5, #0
   23c86:	f77f aece 	ble.w	23a26 <z_vprintk+0x1a>
			out(' ', ctx);
   23c8a:	4639      	mov	r1, r7
   23c8c:	2020      	movs	r0, #32
   23c8e:	47b0      	blx	r6
   23c90:	3d01      	subs	r5, #1
   23c92:	e7f7      	b.n	23c84 <z_vprintk+0x278>
		if (remaining-- <= min_width) {
   23c94:	1e51      	subs	r1, r2, #1
   23c96:	4592      	cmp	sl, r2
   23c98:	9108      	str	r1, [sp, #32]
   23c9a:	db07      	blt.n	23cac <z_vprintk+0x2a0>
			if (padding == PAD_ZERO_BEFORE) {
   23c9c:	f1b9 0f01 	cmp.w	r9, #1
   23ca0:	d106      	bne.n	23cb0 <z_vprintk+0x2a4>
				out('0', ctx);
   23ca2:	4639      	mov	r1, r7
   23ca4:	2030      	movs	r0, #48	; 0x30
   23ca6:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   23ca8:	47b0      	blx	r6
   23caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
   23cac:	9a08      	ldr	r2, [sp, #32]
   23cae:	e7b6      	b.n	23c1e <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
   23cb0:	f1b9 0f02 	cmp.w	r9, #2
   23cb4:	d1fa      	bne.n	23cac <z_vprintk+0x2a0>
   23cb6:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   23cb8:	4639      	mov	r1, r7
   23cba:	2020      	movs	r0, #32
   23cbc:	e7f4      	b.n	23ca8 <z_vprintk+0x29c>
			found_largest_digit = 1;
   23cbe:	9505      	str	r5, [sp, #20]
   23cc0:	e7ad      	b.n	23c1e <z_vprintk+0x212>
					out((int)(*s++), ctx);
   23cc2:	4639      	mov	r1, r7
   23cc4:	47b0      	blx	r6
   23cc6:	e6fb      	b.n	23ac0 <z_vprintk+0xb4>
				out(c, ctx);
   23cc8:	4639      	mov	r1, r7
   23cca:	f854 0b04 	ldr.w	r0, [r4], #4
   23cce:	e6d7      	b.n	23a80 <z_vprintk+0x74>
				length_mod = 0;
   23cd0:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   23cd2:	46a9      	mov	r9, r5
				min_width = -1;
   23cd4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
   23cd8:	2501      	movs	r5, #1
   23cda:	e6ac      	b.n	23a36 <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
   23cdc:	f04f 0903 	mov.w	r9, #3
   23ce0:	e6a9      	b.n	23a36 <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
   23ce2:	f04f 0901 	mov.w	r9, #1
   23ce6:	e6a6      	b.n	23a36 <z_vprintk+0x2a>
			might_format = 0;
   23ce8:	4605      	mov	r5, r0
		++fmt;
   23cea:	e6a4      	b.n	23a36 <z_vprintk+0x2a>

00023cec <printk>:
{
   23cec:	b40f      	push	{r0, r1, r2, r3}
   23cee:	b507      	push	{r0, r1, r2, lr}
   23cf0:	a904      	add	r1, sp, #16
   23cf2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   23cf6:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   23cf8:	f7eb fa86 	bl	f208 <vprintk>
}
   23cfc:	b003      	add	sp, #12
   23cfe:	f85d eb04 	ldr.w	lr, [sp], #4
   23d02:	b004      	add	sp, #16
   23d04:	4770      	bx	lr

00023d06 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_SLM_CR_LF_TERMINATION, 1);
GEN_ABSOLUTE_SYM(CONFIG_SLM_AT_HOST_TERMINATION, 3);
GEN_ABSOLUTE_SYM(CONFIG_SLM_LOG_LEVEL_INF, 1);
GEN_ABSOLUTE_SYM(CONFIG_SLM_LOG_LEVEL, 3);

GEN_ABS_SYM_END
   23d06:	4770      	bx	lr

00023d08 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   23d08:	f7fd be26 	b.w	21958 <SystemInit>

00023d0c <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   23d0c:	2300      	movs	r3, #0
	list->head = NULL;
   23d0e:	e9c0 3300 	strd	r3, r3, [r0]
}
   23d12:	4770      	bx	lr

00023d14 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   23d14:	6803      	ldr	r3, [r0, #0]
   23d16:	b923      	cbnz	r3, 23d22 <log_list_add_tail+0xe>
		list->head = msg;
   23d18:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   23d1a:	2300      	movs	r3, #0
	list->tail = msg;
   23d1c:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   23d1e:	600b      	str	r3, [r1, #0]
}
   23d20:	4770      	bx	lr
		list->tail->next = msg;
   23d22:	6843      	ldr	r3, [r0, #4]
   23d24:	6019      	str	r1, [r3, #0]
   23d26:	e7f8      	b.n	23d1a <log_list_add_tail+0x6>

00023d28 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   23d28:	6800      	ldr	r0, [r0, #0]
   23d2a:	4770      	bx	lr

00023d2c <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   23d2c:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   23d2e:	b10b      	cbz	r3, 23d34 <log_list_head_get+0x8>
		list->head = list->head->next;
   23d30:	681a      	ldr	r2, [r3, #0]
   23d32:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   23d34:	4618      	mov	r0, r3
   23d36:	4770      	bx	lr

00023d38 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   23d38:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   23d3a:	f7eb fcbb 	bl	f6b4 <log_msg_chunk_alloc>

	if (msg != NULL) {
   23d3e:	b118      	cbz	r0, 23d48 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   23d40:	2301      	movs	r3, #1
   23d42:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   23d44:	2300      	movs	r3, #0
   23d46:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   23d48:	bd08      	pop	{r3, pc}

00023d4a <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   23d4a:	f7ec b83f 	b.w	fdcc <z_timer_cycle_get_32>

00023d4e <dummy_timestamp>:
   23d4e:	2000      	movs	r0, #0
   23d50:	4770      	bx	lr

00023d52 <log_0>:
{
   23d52:	b538      	push	{r3, r4, r5, lr}
   23d54:	4605      	mov	r5, r0
   23d56:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   23d58:	f7ff ffee 	bl	23d38 <z_log_msg_std_alloc>

	if (msg != NULL) {
   23d5c:	b128      	cbz	r0, 23d6a <log_0+0x18>
		msg->str = str;
   23d5e:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   23d60:	4621      	mov	r1, r4
}
   23d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   23d66:	f7eb bb35 	b.w	f3d4 <msg_finalize>
}
   23d6a:	bd38      	pop	{r3, r4, r5, pc}

00023d6c <log_1>:
{
   23d6c:	b570      	push	{r4, r5, r6, lr}
   23d6e:	4604      	mov	r4, r0
   23d70:	460e      	mov	r6, r1
   23d72:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   23d74:	f7ff ffe0 	bl	23d38 <z_log_msg_std_alloc>

	if (msg != NULL) {
   23d78:	b158      	cbz	r0, 23d92 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   23d7a:	2201      	movs	r2, #1
		msg->str = str;
   23d7c:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   23d7e:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
   23d80:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   23d82:	f362 1407 	bfi	r4, r2, #4, #4
   23d86:	7244      	strb	r4, [r0, #9]
		msg_finalize(msg, src_level);
   23d88:	4629      	mov	r1, r5
}
   23d8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   23d8e:	f7eb bb21 	b.w	f3d4 <msg_finalize>
}
   23d92:	bd70      	pop	{r4, r5, r6, pc}

00023d94 <log_2>:
{
   23d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23d98:	4605      	mov	r5, r0
   23d9a:	4688      	mov	r8, r1
   23d9c:	4617      	mov	r7, r2
   23d9e:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   23da0:	f7ff ffca 	bl	23d38 <z_log_msg_std_alloc>

	if (msg != NULL) {
   23da4:	b160      	cbz	r0, 23dc0 <log_2+0x2c>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   23da6:	2302      	movs	r3, #2
		msg->str = str;
   23da8:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   23daa:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   23dac:	e9c0 8705 	strd	r8, r7, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   23db0:	f363 1507 	bfi	r5, r3, #4, #4
   23db4:	7245      	strb	r5, [r0, #9]
		msg_finalize(msg, src_level);
   23db6:	4631      	mov	r1, r6
}
   23db8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   23dbc:	f7eb bb0a 	b.w	f3d4 <msg_finalize>
}
   23dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023dc4 <log_3>:
{
   23dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23dc8:	4605      	mov	r5, r0
   23dca:	4689      	mov	r9, r1
   23dcc:	4690      	mov	r8, r2
   23dce:	461f      	mov	r7, r3
   23dd0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   23dd4:	f7ff ffb0 	bl	23d38 <z_log_msg_std_alloc>

	if (msg != NULL) {
   23dd8:	b168      	cbz	r0, 23df6 <log_3+0x32>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   23dda:	2303      	movs	r3, #3
		msg->str = str;
   23ddc:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   23dde:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   23de0:	e9c0 9805 	strd	r9, r8, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   23de4:	f363 1507 	bfi	r5, r3, #4, #4
   23de8:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[2] = arg3;
   23dea:	61c7      	str	r7, [r0, #28]
		msg_finalize(msg, src_level);
   23dec:	4631      	mov	r1, r6
}
   23dee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   23df2:	f7eb baef 	b.w	f3d4 <msg_finalize>
}
   23df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00023dfa <log_n>:
{
   23dfa:	b510      	push	{r4, lr}
   23dfc:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   23dfe:	f000 f893 	bl	23f28 <log_msg_create_n>
		if (msg == NULL) {
   23e02:	b120      	cbz	r0, 23e0e <log_n+0x14>
		msg_finalize(msg, src_level);
   23e04:	4621      	mov	r1, r4
}
   23e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   23e0a:	f7eb bae3 	b.w	f3d4 <msg_finalize>
}
   23e0e:	bd10      	pop	{r4, pc}

00023e10 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   23e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23e14:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
   23e16:	8903      	ldrh	r3, [r0, #8]
{
   23e18:	460e      	mov	r6, r1
	u32_t available_len = msg->hdr.params.hexdump.length;
   23e1a:	089b      	lsrs	r3, r3, #2
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
   23e1c:	42a3      	cmp	r3, r4
{
   23e1e:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   23e22:	d803      	bhi.n	23e2c <log_msg_hexdump_data_op+0x1c>
		*length = 0;
   23e24:	2300      	movs	r3, #0
   23e26:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   23e28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   23e2c:	6811      	ldr	r1, [r2, #0]
   23e2e:	4421      	add	r1, r4
   23e30:	4299      	cmp	r1, r3
		*length = available_len - offset;
   23e32:	bf84      	itt	hi
   23e34:	1b19      	subhi	r1, r3, r4
   23e36:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   23e38:	2b0c      	cmp	r3, #12
	req_len = *length;
   23e3a:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   23e3e:	d928      	bls.n	23e92 <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
   23e40:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   23e42:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   23e46:	d82b      	bhi.n	23ea0 <log_msg_hexdump_data_op+0x90>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   23e48:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   23e4a:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   23e4c:	454b      	cmp	r3, r9
   23e4e:	bf28      	it	cs
   23e50:	464b      	movcs	r3, r9
   23e52:	4420      	add	r0, r4
   23e54:	461d      	mov	r5, r3
			(void)memcpy(&head_data[offset], data, cpy_len);
   23e56:	461a      	mov	r2, r3
		if (put_op) {
   23e58:	b1ff      	cbz	r7, 23e9a <log_msg_hexdump_data_op+0x8a>
			(void)memcpy(&head_data[offset], data, cpy_len);
   23e5a:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   23e5c:	f000 fcb9 	bl	247d2 <memcpy>
		req_len -= cpy_len;
   23e60:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   23e64:	442e      	add	r6, r5
	while (req_len > 0) {
   23e66:	f1b9 0f00 	cmp.w	r9, #0
   23e6a:	d0dd      	beq.n	23e28 <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   23e6c:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   23e70:	454d      	cmp	r5, r9
   23e72:	bf28      	it	cs
   23e74:	464d      	movcs	r5, r9
		if (put_op) {
   23e76:	1d20      	adds	r0, r4, #4
   23e78:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
   23e7a:	462a      	mov	r2, r5
		if (put_op) {
   23e7c:	b1bf      	cbz	r7, 23eae <log_msg_hexdump_data_op+0x9e>
			(void)memcpy(&cont->payload.bytes[offset],
   23e7e:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   23e80:	f000 fca7 	bl	247d2 <memcpy>
		req_len -= cpy_len;
   23e84:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   23e88:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   23e8c:	442e      	add	r6, r5
		offset = 0;
   23e8e:	2400      	movs	r4, #0
   23e90:	e7e9      	b.n	23e66 <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
   23e92:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   23e94:	f04f 0800 	mov.w	r8, #0
   23e98:	e7d8      	b.n	23e4c <log_msg_hexdump_data_op+0x3c>
			(void)memcpy(data, &head_data[offset], cpy_len);
   23e9a:	4601      	mov	r1, r0
   23e9c:	4630      	mov	r0, r6
   23e9e:	e7dd      	b.n	23e5c <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
   23ea0:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   23ea2:	2c1b      	cmp	r4, #27
   23ea4:	d9df      	bls.n	23e66 <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
   23ea6:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   23eaa:	3c1c      	subs	r4, #28
   23eac:	e7f9      	b.n	23ea2 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(data, &cont->payload.bytes[offset],
   23eae:	4601      	mov	r1, r0
   23eb0:	4630      	mov	r0, r6
   23eb2:	e7e5      	b.n	23e80 <log_msg_hexdump_data_op+0x70>

00023eb4 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   23eb4:	3004      	adds	r0, #4
   23eb6:	e8d0 3fef 	ldaex	r3, [r0]
   23eba:	3301      	adds	r3, #1
   23ebc:	e8c0 3fe2 	stlex	r2, r3, [r0]
   23ec0:	2a00      	cmp	r2, #0
   23ec2:	d1f8      	bne.n	23eb6 <log_msg_get+0x2>
}
   23ec4:	4770      	bx	lr

00023ec6 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   23ec6:	7a40      	ldrb	r0, [r0, #9]
}
   23ec8:	0900      	lsrs	r0, r0, #4
   23eca:	4770      	bx	lr

00023ecc <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   23ecc:	7a43      	ldrb	r3, [r0, #9]
   23ece:	091b      	lsrs	r3, r3, #4
   23ed0:	428b      	cmp	r3, r1
   23ed2:	d916      	bls.n	23f02 <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   23ed4:	2b03      	cmp	r3, #3
   23ed6:	d803      	bhi.n	23ee0 <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
   23ed8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   23edc:	6948      	ldr	r0, [r1, #20]
   23ede:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   23ee0:	2901      	cmp	r1, #1
   23ee2:	d803      	bhi.n	23eec <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
   23ee4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   23ee8:	6988      	ldr	r0, [r1, #24]
   23eea:	4770      	bx	lr
	cont = msg->payload.ext.next;
   23eec:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   23eee:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   23ef0:	2906      	cmp	r1, #6
   23ef2:	d803      	bhi.n	23efc <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
   23ef4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   23ef8:	6848      	ldr	r0, [r1, #4]
   23efa:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
   23efc:	3907      	subs	r1, #7
		cont = cont->next;
   23efe:	681b      	ldr	r3, [r3, #0]
   23f00:	e7f6      	b.n	23ef0 <log_msg_arg_get+0x24>
		return 0;
   23f02:	2000      	movs	r0, #0
}
   23f04:	4770      	bx	lr

00023f06 <log_msg_put>:
{
   23f06:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   23f08:	1d02      	adds	r2, r0, #4
   23f0a:	e8d2 1fef 	ldaex	r1, [r2]
   23f0e:	3901      	subs	r1, #1
   23f10:	e8c2 1fec 	stlex	ip, r1, [r2]
   23f14:	f1bc 0f00 	cmp.w	ip, #0
   23f18:	d1f7      	bne.n	23f0a <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   23f1a:	685b      	ldr	r3, [r3, #4]
   23f1c:	b90b      	cbnz	r3, 23f22 <log_msg_put+0x1c>
		msg_free(msg);
   23f1e:	f7eb bbdb 	b.w	f6d8 <msg_free>
}
   23f22:	4770      	bx	lr

00023f24 <log_msg_str_get>:
}
   23f24:	6900      	ldr	r0, [r0, #16]
   23f26:	4770      	bx	lr

00023f28 <log_msg_create_n>:
{
   23f28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f2c:	4682      	mov	sl, r0
   23f2e:	4688      	mov	r8, r1
   23f30:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   23f32:	f7eb fbbf 	bl	f6b4 <log_msg_chunk_alloc>
	if (msg != NULL) {
   23f36:	4604      	mov	r4, r0
   23f38:	b330      	cbz	r0, 23f88 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   23f3a:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   23f3c:	2600      	movs	r6, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   23f3e:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   23f40:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   23f42:	8106      	strh	r6, [r0, #8]
   23f44:	d909      	bls.n	23f5a <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   23f46:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   23f48:	f1a5 0902 	sub.w	r9, r5, #2
	msg->hdr.params.generic.ext = 1;
   23f4c:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   23f4e:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   23f52:	6146      	str	r6, [r0, #20]
	while (n > 0) {
   23f54:	f1b9 0f00 	cmp.w	r9, #0
   23f58:	dc0e      	bgt.n	23f78 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   23f5a:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   23f5c:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   23f5e:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   23f62:	f8c4 a010 	str.w	sl, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   23f66:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   23f68:	d818      	bhi.n	23f9c <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   23f6a:	00aa      	lsls	r2, r5, #2
   23f6c:	4641      	mov	r1, r8
   23f6e:	f104 0014 	add.w	r0, r4, #20
   23f72:	f000 fc2e 	bl	247d2 <memcpy>
		nargs  = 0U;
   23f76:	e007      	b.n	23f88 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   23f78:	f7eb fb9c 	bl	f6b4 <log_msg_chunk_alloc>
		if (cont == NULL) {
   23f7c:	4607      	mov	r7, r0
   23f7e:	b930      	cbnz	r0, 23f8e <log_msg_create_n+0x66>
			msg_free(msg);
   23f80:	4620      	mov	r0, r4
   23f82:	f7eb fba9 	bl	f6d8 <msg_free>
			return NULL;
   23f86:	463c      	mov	r4, r7
}
   23f88:	4620      	mov	r0, r4
   23f8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   23f8e:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   23f92:	f1a9 0907 	sub.w	r9, r9, #7
   23f96:	6006      	str	r6, [r0, #0]
		next = &cont->next;
   23f98:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   23f9a:	e7db      	b.n	23f54 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   23f9c:	4641      	mov	r1, r8
   23f9e:	2208      	movs	r2, #8
   23fa0:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   23fa4:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   23fa6:	f000 fc14 	bl	247d2 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   23faa:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   23fac:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   23fb0:	2d07      	cmp	r5, #7
   23fb2:	462e      	mov	r6, r5
   23fb4:	bf28      	it	cs
   23fb6:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   23fb8:	ea4f 0986 	mov.w	r9, r6, lsl #2
   23fbc:	4641      	mov	r1, r8
   23fbe:	1d38      	adds	r0, r7, #4
   23fc0:	464a      	mov	r2, r9
   23fc2:	f000 fc06 	bl	247d2 <memcpy>
	while (nargs != 0U) {
   23fc6:	1bad      	subs	r5, r5, r6
		args += cpy_args;
   23fc8:	44c8      	add	r8, r9
		cont = cont->next;
   23fca:	683f      	ldr	r7, [r7, #0]
	while (nargs != 0U) {
   23fcc:	d1f0      	bne.n	23fb0 <log_msg_create_n+0x88>
   23fce:	e7db      	b.n	23f88 <log_msg_create_n+0x60>

00023fd0 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
   23fd0:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   23fd2:	2400      	movs	r4, #0
   23fd4:	9400      	str	r4, [sp, #0]
   23fd6:	f7ff ff1b 	bl	23e10 <log_msg_hexdump_data_op>
}
   23fda:	b002      	add	sp, #8
   23fdc:	bd10      	pop	{r4, pc}

00023fde <buffer_write>:
{
   23fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23fe0:	4606      	mov	r6, r0
   23fe2:	460d      	mov	r5, r1
   23fe4:	4614      	mov	r4, r2
   23fe6:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   23fe8:	4621      	mov	r1, r4
   23fea:	4628      	mov	r0, r5
   23fec:	463a      	mov	r2, r7
   23fee:	47b0      	blx	r6
	} while (len != 0);
   23ff0:	1a24      	subs	r4, r4, r0
		buf += processed;
   23ff2:	4405      	add	r5, r0
	} while (len != 0);
   23ff4:	d1f8      	bne.n	23fe8 <buffer_write+0xa>
}
   23ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023ff8 <std_print>:
{
   23ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23ffc:	b08e      	sub	sp, #56	; 0x38
   23ffe:	af0e      	add	r7, sp, #56	; 0x38
   24000:	4681      	mov	r9, r0
   24002:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   24004:	f7ff ff8e 	bl	23f24 <log_msg_str_get>
   24008:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
   2400a:	4648      	mov	r0, r9
   2400c:	f7ff ff5b 	bl	23ec6 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   24010:	f04f 0800 	mov.w	r8, #0
	u32_t nargs = log_msg_nargs_get(msg);
   24014:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   24016:	0083      	lsls	r3, r0, #2
   24018:	3307      	adds	r3, #7
   2401a:	f023 0307 	bic.w	r3, r3, #7
   2401e:	ebad 0d03 	sub.w	sp, sp, r3
   24022:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   24024:	45d0      	cmp	r8, sl
   24026:	d116      	bne.n	24056 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   24028:	4648      	mov	r0, r9
   2402a:	f7ff ff4c 	bl	23ec6 <log_msg_nargs_get>
   2402e:	280f      	cmp	r0, #15
   24030:	d81e      	bhi.n	24070 <std_print+0x78>
   24032:	e8df f010 	tbh	[pc, r0, lsl #1]
   24036:	0019      	.short	0x0019
   24038:	00260020 	.word	0x00260020
   2403c:	0036002d 	.word	0x0036002d
   24040:	004e0041 	.word	0x004e0041
   24044:	006e005d 	.word	0x006e005d
   24048:	00960081 	.word	0x00960081
   2404c:	00c600ad 	.word	0x00c600ad
   24050:	00fe00e1 	.word	0x00fe00e1
   24054:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   24056:	4641      	mov	r1, r8
   24058:	4648      	mov	r0, r9
   2405a:	f7ff ff37 	bl	23ecc <log_msg_arg_get>
   2405e:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	for (i = 0; i < nargs; i++) {
   24062:	f108 0801 	add.w	r8, r8, #1
   24066:	e7dd      	b.n	24024 <std_print+0x2c>
		print_formatted(log_output, str);
   24068:	4631      	mov	r1, r6
   2406a:	4628      	mov	r0, r5
   2406c:	f7eb fb66 	bl	f73c <print_formatted>
}
   24070:	46bd      	mov	sp, r7
   24072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   24076:	6822      	ldr	r2, [r4, #0]
   24078:	4631      	mov	r1, r6
   2407a:	4628      	mov	r0, r5
   2407c:	f7eb fb5e 	bl	f73c <print_formatted>
		break;
   24080:	e7f6      	b.n	24070 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   24082:	e9d4 2300 	ldrd	r2, r3, [r4]
   24086:	4631      	mov	r1, r6
   24088:	4628      	mov	r0, r5
   2408a:	f7eb fb57 	bl	f73c <print_formatted>
		break;
   2408e:	e7ef      	b.n	24070 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   24090:	68a3      	ldr	r3, [r4, #8]
   24092:	4631      	mov	r1, r6
   24094:	9300      	str	r3, [sp, #0]
   24096:	e9d4 2300 	ldrd	r2, r3, [r4]
   2409a:	4628      	mov	r0, r5
   2409c:	f7eb fb4e 	bl	f73c <print_formatted>
		break;
   240a0:	e7e6      	b.n	24070 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   240a2:	68e3      	ldr	r3, [r4, #12]
   240a4:	4631      	mov	r1, r6
   240a6:	9301      	str	r3, [sp, #4]
   240a8:	68a3      	ldr	r3, [r4, #8]
   240aa:	4628      	mov	r0, r5
   240ac:	9300      	str	r3, [sp, #0]
   240ae:	e9d4 2300 	ldrd	r2, r3, [r4]
   240b2:	f7eb fb43 	bl	f73c <print_formatted>
		break;
   240b6:	e7db      	b.n	24070 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   240b8:	6923      	ldr	r3, [r4, #16]
   240ba:	4631      	mov	r1, r6
   240bc:	9302      	str	r3, [sp, #8]
   240be:	68e3      	ldr	r3, [r4, #12]
   240c0:	4628      	mov	r0, r5
   240c2:	9301      	str	r3, [sp, #4]
   240c4:	68a3      	ldr	r3, [r4, #8]
   240c6:	9300      	str	r3, [sp, #0]
   240c8:	e9d4 2300 	ldrd	r2, r3, [r4]
   240cc:	f7eb fb36 	bl	f73c <print_formatted>
		break;
   240d0:	e7ce      	b.n	24070 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   240d2:	6963      	ldr	r3, [r4, #20]
   240d4:	4631      	mov	r1, r6
   240d6:	9303      	str	r3, [sp, #12]
   240d8:	6923      	ldr	r3, [r4, #16]
   240da:	4628      	mov	r0, r5
   240dc:	9302      	str	r3, [sp, #8]
   240de:	68e3      	ldr	r3, [r4, #12]
   240e0:	9301      	str	r3, [sp, #4]
   240e2:	68a3      	ldr	r3, [r4, #8]
   240e4:	9300      	str	r3, [sp, #0]
   240e6:	e9d4 2300 	ldrd	r2, r3, [r4]
   240ea:	f7eb fb27 	bl	f73c <print_formatted>
		break;
   240ee:	e7bf      	b.n	24070 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   240f0:	69a3      	ldr	r3, [r4, #24]
   240f2:	4631      	mov	r1, r6
   240f4:	9304      	str	r3, [sp, #16]
   240f6:	6963      	ldr	r3, [r4, #20]
   240f8:	4628      	mov	r0, r5
   240fa:	9303      	str	r3, [sp, #12]
   240fc:	6923      	ldr	r3, [r4, #16]
   240fe:	9302      	str	r3, [sp, #8]
   24100:	68e3      	ldr	r3, [r4, #12]
   24102:	9301      	str	r3, [sp, #4]
   24104:	68a3      	ldr	r3, [r4, #8]
   24106:	9300      	str	r3, [sp, #0]
   24108:	e9d4 2300 	ldrd	r2, r3, [r4]
   2410c:	f7eb fb16 	bl	f73c <print_formatted>
		break;
   24110:	e7ae      	b.n	24070 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   24112:	69e3      	ldr	r3, [r4, #28]
   24114:	4631      	mov	r1, r6
   24116:	9305      	str	r3, [sp, #20]
   24118:	69a3      	ldr	r3, [r4, #24]
   2411a:	4628      	mov	r0, r5
   2411c:	9304      	str	r3, [sp, #16]
   2411e:	6963      	ldr	r3, [r4, #20]
   24120:	9303      	str	r3, [sp, #12]
   24122:	6923      	ldr	r3, [r4, #16]
   24124:	9302      	str	r3, [sp, #8]
   24126:	68e3      	ldr	r3, [r4, #12]
   24128:	9301      	str	r3, [sp, #4]
   2412a:	68a3      	ldr	r3, [r4, #8]
   2412c:	9300      	str	r3, [sp, #0]
   2412e:	e9d4 2300 	ldrd	r2, r3, [r4]
   24132:	f7eb fb03 	bl	f73c <print_formatted>
		break;
   24136:	e79b      	b.n	24070 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   24138:	6a23      	ldr	r3, [r4, #32]
   2413a:	4631      	mov	r1, r6
   2413c:	9306      	str	r3, [sp, #24]
   2413e:	69e3      	ldr	r3, [r4, #28]
   24140:	4628      	mov	r0, r5
   24142:	9305      	str	r3, [sp, #20]
   24144:	69a3      	ldr	r3, [r4, #24]
   24146:	9304      	str	r3, [sp, #16]
   24148:	6963      	ldr	r3, [r4, #20]
   2414a:	9303      	str	r3, [sp, #12]
   2414c:	6923      	ldr	r3, [r4, #16]
   2414e:	9302      	str	r3, [sp, #8]
   24150:	68e3      	ldr	r3, [r4, #12]
   24152:	9301      	str	r3, [sp, #4]
   24154:	68a3      	ldr	r3, [r4, #8]
   24156:	9300      	str	r3, [sp, #0]
   24158:	e9d4 2300 	ldrd	r2, r3, [r4]
   2415c:	f7eb faee 	bl	f73c <print_formatted>
		break;
   24160:	e786      	b.n	24070 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   24162:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24164:	4631      	mov	r1, r6
   24166:	9307      	str	r3, [sp, #28]
   24168:	6a23      	ldr	r3, [r4, #32]
   2416a:	4628      	mov	r0, r5
   2416c:	9306      	str	r3, [sp, #24]
   2416e:	69e3      	ldr	r3, [r4, #28]
   24170:	9305      	str	r3, [sp, #20]
   24172:	69a3      	ldr	r3, [r4, #24]
   24174:	9304      	str	r3, [sp, #16]
   24176:	6963      	ldr	r3, [r4, #20]
   24178:	9303      	str	r3, [sp, #12]
   2417a:	6923      	ldr	r3, [r4, #16]
   2417c:	9302      	str	r3, [sp, #8]
   2417e:	68e3      	ldr	r3, [r4, #12]
   24180:	9301      	str	r3, [sp, #4]
   24182:	68a3      	ldr	r3, [r4, #8]
   24184:	9300      	str	r3, [sp, #0]
   24186:	e9d4 2300 	ldrd	r2, r3, [r4]
   2418a:	f7eb fad7 	bl	f73c <print_formatted>
		break;
   2418e:	e76f      	b.n	24070 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   24190:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   24192:	4631      	mov	r1, r6
   24194:	9308      	str	r3, [sp, #32]
   24196:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24198:	4628      	mov	r0, r5
   2419a:	9307      	str	r3, [sp, #28]
   2419c:	6a23      	ldr	r3, [r4, #32]
   2419e:	9306      	str	r3, [sp, #24]
   241a0:	69e3      	ldr	r3, [r4, #28]
   241a2:	9305      	str	r3, [sp, #20]
   241a4:	69a3      	ldr	r3, [r4, #24]
   241a6:	9304      	str	r3, [sp, #16]
   241a8:	6963      	ldr	r3, [r4, #20]
   241aa:	9303      	str	r3, [sp, #12]
   241ac:	6923      	ldr	r3, [r4, #16]
   241ae:	9302      	str	r3, [sp, #8]
   241b0:	68e3      	ldr	r3, [r4, #12]
   241b2:	9301      	str	r3, [sp, #4]
   241b4:	68a3      	ldr	r3, [r4, #8]
   241b6:	9300      	str	r3, [sp, #0]
   241b8:	e9d4 2300 	ldrd	r2, r3, [r4]
   241bc:	f7eb fabe 	bl	f73c <print_formatted>
		break;
   241c0:	e756      	b.n	24070 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   241c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   241c4:	4631      	mov	r1, r6
   241c6:	9309      	str	r3, [sp, #36]	; 0x24
   241c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   241ca:	4628      	mov	r0, r5
   241cc:	9308      	str	r3, [sp, #32]
   241ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
   241d0:	9307      	str	r3, [sp, #28]
   241d2:	6a23      	ldr	r3, [r4, #32]
   241d4:	9306      	str	r3, [sp, #24]
   241d6:	69e3      	ldr	r3, [r4, #28]
   241d8:	9305      	str	r3, [sp, #20]
   241da:	69a3      	ldr	r3, [r4, #24]
   241dc:	9304      	str	r3, [sp, #16]
   241de:	6963      	ldr	r3, [r4, #20]
   241e0:	9303      	str	r3, [sp, #12]
   241e2:	6923      	ldr	r3, [r4, #16]
   241e4:	9302      	str	r3, [sp, #8]
   241e6:	68e3      	ldr	r3, [r4, #12]
   241e8:	9301      	str	r3, [sp, #4]
   241ea:	68a3      	ldr	r3, [r4, #8]
   241ec:	9300      	str	r3, [sp, #0]
   241ee:	e9d4 2300 	ldrd	r2, r3, [r4]
   241f2:	f7eb faa3 	bl	f73c <print_formatted>
		break;
   241f6:	e73b      	b.n	24070 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   241f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   241fa:	4631      	mov	r1, r6
   241fc:	930a      	str	r3, [sp, #40]	; 0x28
   241fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   24200:	4628      	mov	r0, r5
   24202:	9309      	str	r3, [sp, #36]	; 0x24
   24204:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   24206:	9308      	str	r3, [sp, #32]
   24208:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2420a:	9307      	str	r3, [sp, #28]
   2420c:	6a23      	ldr	r3, [r4, #32]
   2420e:	9306      	str	r3, [sp, #24]
   24210:	69e3      	ldr	r3, [r4, #28]
   24212:	9305      	str	r3, [sp, #20]
   24214:	69a3      	ldr	r3, [r4, #24]
   24216:	9304      	str	r3, [sp, #16]
   24218:	6963      	ldr	r3, [r4, #20]
   2421a:	9303      	str	r3, [sp, #12]
   2421c:	6923      	ldr	r3, [r4, #16]
   2421e:	9302      	str	r3, [sp, #8]
   24220:	68e3      	ldr	r3, [r4, #12]
   24222:	9301      	str	r3, [sp, #4]
   24224:	68a3      	ldr	r3, [r4, #8]
   24226:	9300      	str	r3, [sp, #0]
   24228:	e9d4 2300 	ldrd	r2, r3, [r4]
   2422c:	f7eb fa86 	bl	f73c <print_formatted>
		break;
   24230:	e71e      	b.n	24070 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   24232:	6b63      	ldr	r3, [r4, #52]	; 0x34
   24234:	4631      	mov	r1, r6
   24236:	930b      	str	r3, [sp, #44]	; 0x2c
   24238:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2423a:	4628      	mov	r0, r5
   2423c:	930a      	str	r3, [sp, #40]	; 0x28
   2423e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   24240:	9309      	str	r3, [sp, #36]	; 0x24
   24242:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   24244:	9308      	str	r3, [sp, #32]
   24246:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24248:	9307      	str	r3, [sp, #28]
   2424a:	6a23      	ldr	r3, [r4, #32]
   2424c:	9306      	str	r3, [sp, #24]
   2424e:	69e3      	ldr	r3, [r4, #28]
   24250:	9305      	str	r3, [sp, #20]
   24252:	69a3      	ldr	r3, [r4, #24]
   24254:	9304      	str	r3, [sp, #16]
   24256:	6963      	ldr	r3, [r4, #20]
   24258:	9303      	str	r3, [sp, #12]
   2425a:	6923      	ldr	r3, [r4, #16]
   2425c:	9302      	str	r3, [sp, #8]
   2425e:	68e3      	ldr	r3, [r4, #12]
   24260:	9301      	str	r3, [sp, #4]
   24262:	68a3      	ldr	r3, [r4, #8]
   24264:	9300      	str	r3, [sp, #0]
   24266:	e9d4 2300 	ldrd	r2, r3, [r4]
   2426a:	f7eb fa67 	bl	f73c <print_formatted>
		break;
   2426e:	e6ff      	b.n	24070 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   24270:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   24272:	4631      	mov	r1, r6
   24274:	930c      	str	r3, [sp, #48]	; 0x30
   24276:	6b63      	ldr	r3, [r4, #52]	; 0x34
   24278:	4628      	mov	r0, r5
   2427a:	930b      	str	r3, [sp, #44]	; 0x2c
   2427c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2427e:	930a      	str	r3, [sp, #40]	; 0x28
   24280:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   24282:	9309      	str	r3, [sp, #36]	; 0x24
   24284:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   24286:	9308      	str	r3, [sp, #32]
   24288:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2428a:	9307      	str	r3, [sp, #28]
   2428c:	6a23      	ldr	r3, [r4, #32]
   2428e:	9306      	str	r3, [sp, #24]
   24290:	69e3      	ldr	r3, [r4, #28]
   24292:	9305      	str	r3, [sp, #20]
   24294:	69a3      	ldr	r3, [r4, #24]
   24296:	9304      	str	r3, [sp, #16]
   24298:	6963      	ldr	r3, [r4, #20]
   2429a:	9303      	str	r3, [sp, #12]
   2429c:	6923      	ldr	r3, [r4, #16]
   2429e:	9302      	str	r3, [sp, #8]
   242a0:	68e3      	ldr	r3, [r4, #12]
   242a2:	9301      	str	r3, [sp, #4]
   242a4:	68a3      	ldr	r3, [r4, #8]
   242a6:	9300      	str	r3, [sp, #0]
   242a8:	e9d4 2300 	ldrd	r2, r3, [r4]
   242ac:	f7eb fa46 	bl	f73c <print_formatted>
}
   242b0:	e6de      	b.n	24070 <std_print+0x78>

000242b2 <log_output_flush>:
		     log_output->control_block->offset,
   242b2:	6842      	ldr	r2, [r0, #4]
{
   242b4:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   242b6:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   242ba:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   242bc:	6881      	ldr	r1, [r0, #8]
   242be:	6800      	ldr	r0, [r0, #0]
   242c0:	f7ff fe8d 	bl	23fde <buffer_write>
	log_output->control_block->offset = 0;
   242c4:	2200      	movs	r2, #0
   242c6:	6863      	ldr	r3, [r4, #4]
   242c8:	601a      	str	r2, [r3, #0]
}
   242ca:	bd10      	pop	{r4, pc}

000242cc <out_func>:
{
   242cc:	b508      	push	{r3, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
   242ce:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   242d2:	681b      	ldr	r3, [r3, #0]
   242d4:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
   242d6:	684a      	ldr	r2, [r1, #4]
   242d8:	6813      	ldr	r3, [r2, #0]
   242da:	3301      	adds	r3, #1
   242dc:	6013      	str	r3, [r2, #0]
	if (out_ctx->control_block->offset == out_ctx->size) {
   242de:	68ca      	ldr	r2, [r1, #12]
   242e0:	4293      	cmp	r3, r2
   242e2:	d102      	bne.n	242ea <out_func+0x1e>
		log_output_flush(out_ctx);
   242e4:	4608      	mov	r0, r1
   242e6:	f7ff ffe4 	bl	242b2 <log_output_flush>
}
   242ea:	2000      	movs	r0, #0
   242ec:	bd08      	pop	{r3, pc}

000242ee <char_out>:
{
   242ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   242f0:	460d      	mov	r5, r1
   242f2:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
   242f4:	4604      	mov	r4, r0
   242f6:	1847      	adds	r7, r0, r1
   242f8:	42bc      	cmp	r4, r7
   242fa:	d101      	bne.n	24300 <char_out+0x12>
}
   242fc:	4628      	mov	r0, r5
   242fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   24300:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   24304:	6873      	ldr	r3, [r6, #4]
   24306:	4630      	mov	r0, r6
   24308:	685b      	ldr	r3, [r3, #4]
   2430a:	4798      	blx	r3
   2430c:	e7f4      	b.n	242f8 <char_out+0xa>

0002430e <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
   2430e:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
   24310:	7a5a      	ldrb	r2, [r3, #9]
   24312:	b932      	cbnz	r2, 24322 <get_status+0x14>
	if (data->ref > 0) {
   24314:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
   24318:	2800      	cmp	r0, #0
   2431a:	bfcc      	ite	gt
   2431c:	2000      	movgt	r0, #0
   2431e:	2001      	movle	r0, #1
   24320:	4770      	bx	lr
   24322:	2002      	movs	r0, #2
}
   24324:	4770      	bx	lr

00024326 <clock_stop>:
	const struct nrf_clock_control_config *config =
   24326:	6802      	ldr	r2, [r0, #0]
{
   24328:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
   2432a:	6896      	ldr	r6, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
   2432c:	6884      	ldr	r4, [r0, #8]
	__asm__ volatile(
   2432e:	f04f 0320 	mov.w	r3, #32
   24332:	f3ef 8511 	mrs	r5, BASEPRI
   24336:	f383 8811 	msr	BASEPRI, r3
   2433a:	f3bf 8f6f 	isb	sy
	data->ref--;
   2433e:	7a23      	ldrb	r3, [r4, #8]
   24340:	3b01      	subs	r3, #1
   24342:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
   24344:	2b00      	cmp	r3, #0
	data->ref--;
   24346:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
   24348:	d11c      	bne.n	24384 <clock_stop+0x5e>
	list->tail = NULL;
   2434a:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
   2434e:	6873      	ldr	r3, [r6, #4]
				config->stop_handler(dev) : true;
   24350:	b9a3      	cbnz	r3, 2437c <clock_stop+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24352:	2201      	movs	r2, #1
   24354:	7af3      	ldrb	r3, [r6, #11]
   24356:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2435a:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   2435e:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24360:	2200      	movs	r2, #0
   24362:	8933      	ldrh	r3, [r6, #8]
   24364:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   24368:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   2436c:	601a      	str	r2, [r3, #0]
		data->started = false;
   2436e:	2000      	movs	r0, #0
   24370:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   24372:	f385 8811 	msr	BASEPRI, r5
   24376:	f3bf 8f6f 	isb	sy
}
   2437a:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
   2437c:	4798      	blx	r3
   2437e:	2800      	cmp	r0, #0
   24380:	d1e7      	bne.n	24352 <clock_stop+0x2c>
   24382:	e7f4      	b.n	2436e <clock_stop+0x48>
	} else if (data->ref < 0) {
   24384:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
   24388:	bfbc      	itt	lt
   2438a:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
   2438c:	f06f 0044 	mvnlt.w	r0, #68	; 0x44
   24390:	e7ef      	b.n	24372 <clock_stop+0x4c>

00024392 <clock_async_start>:
{
   24392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
   24394:	6803      	ldr	r3, [r0, #0]
{
   24396:	4606      	mov	r6, r0
   24398:	4614      	mov	r4, r2
	const struct nrf_clock_control_config *config =
   2439a:	689f      	ldr	r7, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
   2439c:	6885      	ldr	r5, [r0, #8]
	__asm__ volatile(
   2439e:	f04f 0320 	mov.w	r3, #32
   243a2:	f3ef 8211 	mrs	r2, BASEPRI
   243a6:	f383 8811 	msr	BASEPRI, r3
   243aa:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   243ae:	7a2b      	ldrb	r3, [r5, #8]
   243b0:	3301      	adds	r3, #1
   243b2:	b25b      	sxtb	r3, r3
   243b4:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
   243b6:	f382 8811 	msr	BASEPRI, r2
   243ba:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
   243be:	7a6a      	ldrb	r2, [r5, #9]
   243c0:	b132      	cbz	r2, 243d0 <clock_async_start+0x3e>
		if (data) {
   243c2:	b90c      	cbnz	r4, 243c8 <clock_async_start+0x36>
	return 0;
   243c4:	2000      	movs	r0, #0
}
   243c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
   243c8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   243cc:	4798      	blx	r3
   243ce:	e7f9      	b.n	243c4 <clock_async_start+0x32>
		if (ref == 1) {
   243d0:	2b01      	cmp	r3, #1
   243d2:	d108      	bne.n	243e6 <clock_async_start+0x54>
			do_start =  (config->start_handler) ?
   243d4:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
   243d6:	b943      	cbnz	r3, 243ea <clock_async_start+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   243d8:	2201      	movs	r2, #1
   243da:	7abb      	ldrb	r3, [r7, #10]
   243dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   243e0:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   243e4:	601a      	str	r2, [r3, #0]
		if (data) {
   243e6:	b94c      	cbnz	r4, 243fc <clock_async_start+0x6a>
   243e8:	e7ec      	b.n	243c4 <clock_async_start+0x32>
					config->start_handler(dev) : true;
   243ea:	4798      	blx	r3
   243ec:	2800      	cmp	r0, #0
   243ee:	d1f3      	bne.n	243d8 <clock_async_start+0x46>
			} else if (data) {
   243f0:	2c00      	cmp	r4, #0
   243f2:	d0e7      	beq.n	243c4 <clock_async_start+0x32>
				data->cb(dev, data->user_data);
   243f4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   243f8:	4630      	mov	r0, r6
   243fa:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
   243fc:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
   243fe:	429c      	cmp	r4, r3
   24400:	d00d      	beq.n	2441e <clock_async_start+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24402:	b113      	cbz	r3, 2440a <clock_async_start+0x78>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   24404:	681b      	ldr	r3, [r3, #0]
	} while (item);
   24406:	2b00      	cmp	r3, #0
   24408:	d1f9      	bne.n	243fe <clock_async_start+0x6c>
	parent->next = child;
   2440a:	2000      	movs	r0, #0
   2440c:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   2440e:	686b      	ldr	r3, [r5, #4]
   24410:	b913      	cbnz	r3, 24418 <clock_async_start+0x86>
	list->head = node;
   24412:	e9c5 4400 	strd	r4, r4, [r5]
   24416:	e7d5      	b.n	243c4 <clock_async_start+0x32>
	parent->next = child;
   24418:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2441a:	606c      	str	r4, [r5, #4]
   2441c:	e7d3      	b.n	243c6 <clock_async_start+0x34>
				return -EALREADY;
   2441e:	f06f 0044 	mvn.w	r0, #68	; 0x44
   24422:	e7d0      	b.n	243c6 <clock_async_start+0x34>

00024424 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   24424:	2200      	movs	r2, #0
   24426:	f7ff bfb4 	b.w	24392 <clock_async_start>

0002442a <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
   2442a:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
   2442c:	2000      	movs	r0, #0
	list->tail = NULL;
   2442e:	e9c3 0000 	strd	r0, r0, [r3]
}
   24432:	4770      	bx	lr

00024434 <clkstarted_handle>:
{
   24434:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
   24436:	6884      	ldr	r4, [r0, #8]
{
   24438:	4605      	mov	r5, r0
Z_GENLIST_IS_EMPTY(slist)
   2443a:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   2443c:	b12b      	cbz	r3, 2444a <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2443e:	6861      	ldr	r1, [r4, #4]
   24440:	681a      	ldr	r2, [r3, #0]
   24442:	428b      	cmp	r3, r1
	list->head = node;
   24444:	6022      	str	r2, [r4, #0]
	list->tail = node;
   24446:	bf08      	it	eq
   24448:	6062      	streq	r2, [r4, #4]
	data->started = true;
   2444a:	2201      	movs	r2, #1
   2444c:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
   2444e:	b903      	cbnz	r3, 24452 <clkstarted_handle+0x1e>
}
   24450:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   24452:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   24456:	4628      	mov	r0, r5
   24458:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
   2445a:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   2445c:	2b00      	cmp	r3, #0
   2445e:	d0f7      	beq.n	24450 <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24460:	6861      	ldr	r1, [r4, #4]
   24462:	681a      	ldr	r2, [r3, #0]
   24464:	428b      	cmp	r3, r1
	list->head = node;
   24466:	6022      	str	r2, [r4, #0]
	list->tail = node;
   24468:	bf08      	it	eq
   2446a:	6062      	streq	r2, [r4, #4]
   2446c:	e7ef      	b.n	2444e <clkstarted_handle+0x1a>

0002446e <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   2446e:	4770      	bx	lr

00024470 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   24470:	4770      	bx	lr

00024472 <z_irq_spurious>:
	z_arm_reserved();
   24472:	f7eb bdeb 	b.w	1004c <z_arm_bus_fault>

00024476 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   24476:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   24478:	6800      	ldr	r0, [r0, #0]
   2447a:	f7eb bdf1 	b.w	10060 <z_arm_fatal_error>

0002447e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   2447e:	b508      	push	{r3, lr}
	handler();
   24480:	f7eb fe88 	bl	10194 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   24484:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   24488:	f7eb bcba 	b.w	fe00 <z_arm_exc_exit>

0002448c <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   2448c:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   2448e:	2100      	movs	r1, #0
   24490:	a801      	add	r0, sp, #4
   24492:	f7ec fb91 	bl	10bb8 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   24496:	b003      	add	sp, #12
   24498:	f85d fb04 	ldr.w	pc, [sp], #4

0002449c <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   2449c:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   244a0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   244a4:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   244a6:	bf08      	it	eq
   244a8:	f06f 0015 	mvneq.w	r0, #21
   244ac:	4770      	bx	lr

000244ae <atoi>:

#include <stdlib.h>
#include <ctype.h>

int atoi(const char *s)
{
   244ae:	b530      	push	{r4, r5, lr}
	int n = 0;
	int neg = 0;

	while (isspace(*s)) {
   244b0:	7802      	ldrb	r2, [r0, #0]
   244b2:	4603      	mov	r3, r0
   244b4:	2a20      	cmp	r2, #32
   244b6:	f100 0001 	add.w	r0, r0, #1
   244ba:	d0f9      	beq.n	244b0 <atoi+0x2>
   244bc:	f1a2 0109 	sub.w	r1, r2, #9
   244c0:	2904      	cmp	r1, #4
   244c2:	d9f5      	bls.n	244b0 <atoi+0x2>
		s++;
	}
	switch (*s) {
   244c4:	2a2b      	cmp	r2, #43	; 0x2b
   244c6:	d008      	beq.n	244da <atoi+0x2c>
	case '-':
		neg = 1;
		s++;
   244c8:	2a2d      	cmp	r2, #45	; 0x2d
   244ca:	bf0a      	itet	eq
   244cc:	4603      	moveq	r3, r0
   244ce:	2100      	movne	r1, #0
   244d0:	2101      	moveq	r1, #1
   244d2:	3b01      	subs	r3, #1
	int neg = 0;
   244d4:	2000      	movs	r0, #0
	case '+':
		s++;
	}
	/* Compute n as a negative number to avoid overflow on INT_MIN */
	while (isdigit(*s)) {
		n = 10*n - (*s++ - '0');
   244d6:	250a      	movs	r5, #10
   244d8:	e006      	b.n	244e8 <atoi+0x3a>
		s++;
   244da:	4603      	mov	r3, r0
	int neg = 0;
   244dc:	2100      	movs	r1, #0
   244de:	e7f8      	b.n	244d2 <atoi+0x24>
		n = 10*n - (*s++ - '0');
   244e0:	f1c2 0230 	rsb	r2, r2, #48	; 0x30
   244e4:	fb05 2000 	mla	r0, r5, r0, r2
	while (isdigit(*s)) {
   244e8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   244ec:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   244f0:	2c09      	cmp	r4, #9
   244f2:	d9f5      	bls.n	244e0 <atoi+0x32>
	}
	return neg ? n : -n;
   244f4:	b901      	cbnz	r1, 244f8 <atoi+0x4a>
   244f6:	4240      	negs	r0, r0
}
   244f8:	bd30      	pop	{r4, r5, pc}

000244fa <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   244fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   244fe:	4684      	mov	ip, r0
   24500:	460f      	mov	r7, r1
	register const char *s = nptr;
   24502:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   24504:	462c      	mov	r4, r5
   24506:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   2450a:	2b20      	cmp	r3, #32
   2450c:	d036      	beq.n	2457c <strtol+0x82>
   2450e:	f1a3 0109 	sub.w	r1, r3, #9
   24512:	2904      	cmp	r1, #4
   24514:	d932      	bls.n	2457c <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
   24516:	2b2d      	cmp	r3, #45	; 0x2d
   24518:	d132      	bne.n	24580 <strtol+0x86>
		neg = 1;
   2451a:	2101      	movs	r1, #1
		c = *s++;
   2451c:	786b      	ldrb	r3, [r5, #1]
   2451e:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   24520:	2a00      	cmp	r2, #0
   24522:	d05c      	beq.n	245de <strtol+0xe4>
   24524:	2a10      	cmp	r2, #16
   24526:	d109      	bne.n	2453c <strtol+0x42>
   24528:	2b30      	cmp	r3, #48	; 0x30
   2452a:	d107      	bne.n	2453c <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2452c:	7823      	ldrb	r3, [r4, #0]
   2452e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   24532:	2b58      	cmp	r3, #88	; 0x58
   24534:	d14e      	bne.n	245d4 <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   24536:	2210      	movs	r2, #16
		c = s[1];
   24538:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   2453a:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   2453c:	2900      	cmp	r1, #0
   2453e:	bf14      	ite	ne
   24540:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
   24544:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   24548:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   2454a:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
   2454e:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   24550:	fb02 891e 	mls	r9, r2, lr, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   24554:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   24558:	2d09      	cmp	r5, #9
   2455a:	d817      	bhi.n	2458c <strtol+0x92>
			c -= '0';
   2455c:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   2455e:	429a      	cmp	r2, r3
   24560:	dd24      	ble.n	245ac <strtol+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   24562:	1c75      	adds	r5, r6, #1
   24564:	d007      	beq.n	24576 <strtol+0x7c>
   24566:	4570      	cmp	r0, lr
   24568:	d81d      	bhi.n	245a6 <strtol+0xac>
   2456a:	d101      	bne.n	24570 <strtol+0x76>
   2456c:	454b      	cmp	r3, r9
   2456e:	dc1a      	bgt.n	245a6 <strtol+0xac>
			any = -1;
		} else {
			any = 1;
   24570:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   24572:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   24576:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   2457a:	e7eb      	b.n	24554 <strtol+0x5a>
{
   2457c:	4625      	mov	r5, r4
   2457e:	e7c1      	b.n	24504 <strtol+0xa>
	} else if (c == '+') {
   24580:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   24582:	bf04      	itt	eq
   24584:	1cac      	addeq	r4, r5, #2
   24586:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   24588:	2100      	movs	r1, #0
   2458a:	e7c9      	b.n	24520 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   2458c:	f043 0520 	orr.w	r5, r3, #32
   24590:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   24592:	2d19      	cmp	r5, #25
   24594:	d80a      	bhi.n	245ac <strtol+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   24596:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   2459a:	2d1a      	cmp	r5, #26
   2459c:	bf34      	ite	cc
   2459e:	2537      	movcc	r5, #55	; 0x37
   245a0:	2557      	movcs	r5, #87	; 0x57
   245a2:	1b5b      	subs	r3, r3, r5
   245a4:	e7db      	b.n	2455e <strtol+0x64>
			any = -1;
   245a6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   245aa:	e7e4      	b.n	24576 <strtol+0x7c>
		}
	}

	if (any < 0) {
   245ac:	1c73      	adds	r3, r6, #1
   245ae:	d107      	bne.n	245c0 <strtol+0xc6>
   245b0:	f7fd fafe 	bl	21bb0 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   245b4:	2326      	movs	r3, #38	; 0x26
   245b6:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   245b8:	4640      	mov	r0, r8
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   245ba:	b937      	cbnz	r7, 245ca <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   245bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   245c0:	b101      	cbz	r1, 245c4 <strtol+0xca>
		acc = -acc;
   245c2:	4240      	negs	r0, r0
	if (endptr != NULL) {
   245c4:	2f00      	cmp	r7, #0
   245c6:	d0f9      	beq.n	245bc <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
   245c8:	b10e      	cbz	r6, 245ce <strtol+0xd4>
   245ca:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   245ce:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   245d2:	e7f3      	b.n	245bc <strtol+0xc2>
	if (base == 0) {
   245d4:	2330      	movs	r3, #48	; 0x30
   245d6:	2a00      	cmp	r2, #0
   245d8:	d1b0      	bne.n	2453c <strtol+0x42>
		base = c == '0' ? 8 : 10;
   245da:	2208      	movs	r2, #8
   245dc:	e7ae      	b.n	2453c <strtol+0x42>
	if ((base == 0 || base == 16) &&
   245de:	2b30      	cmp	r3, #48	; 0x30
   245e0:	d0a4      	beq.n	2452c <strtol+0x32>
		base = c == '0' ? 8 : 10;
   245e2:	220a      	movs	r2, #10
   245e4:	e7aa      	b.n	2453c <strtol+0x42>

000245e6 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   245e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   245ea:	4684      	mov	ip, r0
   245ec:	460f      	mov	r7, r1
	register const char *s = nptr;
   245ee:	4605      	mov	r5, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   245f0:	462c      	mov	r4, r5
   245f2:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   245f6:	2b20      	cmp	r3, #32
   245f8:	d035      	beq.n	24666 <strtoul+0x80>
   245fa:	f1a3 0109 	sub.w	r1, r3, #9
   245fe:	2904      	cmp	r1, #4
   24600:	d931      	bls.n	24666 <strtoul+0x80>
	} while (isspace(c));
	if (c == '-') {
   24602:	2b2d      	cmp	r3, #45	; 0x2d
   24604:	d131      	bne.n	2466a <strtoul+0x84>
		neg = 1;
   24606:	f04f 0e01 	mov.w	lr, #1
		c = *s++;
   2460a:	786b      	ldrb	r3, [r5, #1]
   2460c:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   2460e:	2a00      	cmp	r2, #0
   24610:	d05e      	beq.n	246d0 <strtoul+0xea>
   24612:	2a10      	cmp	r2, #16
   24614:	d109      	bne.n	2462a <strtoul+0x44>
   24616:	2b30      	cmp	r3, #48	; 0x30
   24618:	d107      	bne.n	2462a <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2461a:	7823      	ldrb	r3, [r4, #0]
   2461c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   24620:	2b58      	cmp	r3, #88	; 0x58
   24622:	d150      	bne.n	246c6 <strtoul+0xe0>
		c = s[1];
		s += 2;
		base = 16;
   24624:	2210      	movs	r2, #16
		c = s[1];
   24626:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   24628:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   2462a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2462e:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   24632:	2600      	movs	r6, #0
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   24634:	fb02 f801 	mul.w	r8, r2, r1
	for (acc = 0, any = 0;; c = *s++) {
   24638:	4630      	mov	r0, r6
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   2463a:	ea6f 0808 	mvn.w	r8, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2463e:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   24642:	2d09      	cmp	r5, #9
   24644:	d818      	bhi.n	24678 <strtoul+0x92>
			c -= '0';
   24646:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   24648:	429a      	cmp	r2, r3
   2464a:	dd25      	ble.n	24698 <strtoul+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   2464c:	2e00      	cmp	r6, #0
   2464e:	db20      	blt.n	24692 <strtoul+0xac>
   24650:	4288      	cmp	r0, r1
   24652:	d81e      	bhi.n	24692 <strtoul+0xac>
   24654:	d101      	bne.n	2465a <strtoul+0x74>
   24656:	4543      	cmp	r3, r8
   24658:	dc1b      	bgt.n	24692 <strtoul+0xac>
			any = -1;
		} else {
			any = 1;
   2465a:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   2465c:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   24660:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   24664:	e7eb      	b.n	2463e <strtoul+0x58>
{
   24666:	4625      	mov	r5, r4
   24668:	e7c2      	b.n	245f0 <strtoul+0xa>
	} else if (c == '+') {
   2466a:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   2466c:	bf04      	itt	eq
   2466e:	1cac      	addeq	r4, r5, #2
   24670:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   24672:	f04f 0e00 	mov.w	lr, #0
   24676:	e7ca      	b.n	2460e <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   24678:	f043 0520 	orr.w	r5, r3, #32
   2467c:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   2467e:	2d19      	cmp	r5, #25
   24680:	d80a      	bhi.n	24698 <strtoul+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   24682:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   24686:	2d1a      	cmp	r5, #26
   24688:	bf34      	ite	cc
   2468a:	2537      	movcc	r5, #55	; 0x37
   2468c:	2557      	movcs	r5, #87	; 0x57
   2468e:	1b5b      	subs	r3, r3, r5
   24690:	e7da      	b.n	24648 <strtoul+0x62>
			any = -1;
   24692:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   24696:	e7e3      	b.n	24660 <strtoul+0x7a>
		}
	}
	if (any < 0) {
   24698:	2e00      	cmp	r6, #0
   2469a:	da08      	bge.n	246ae <strtoul+0xc8>
   2469c:	f7fd fa88 	bl	21bb0 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   246a0:	2326      	movs	r3, #38	; 0x26
   246a2:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   246a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   246a8:	b947      	cbnz	r7, 246bc <strtoul+0xd6>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   246aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   246ae:	f1be 0f00 	cmp.w	lr, #0
   246b2:	d000      	beq.n	246b6 <strtoul+0xd0>
		acc = -acc;
   246b4:	4240      	negs	r0, r0
	if (endptr != NULL) {
   246b6:	2f00      	cmp	r7, #0
   246b8:	d0f7      	beq.n	246aa <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   246ba:	b10e      	cbz	r6, 246c0 <strtoul+0xda>
   246bc:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   246c0:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   246c4:	e7f1      	b.n	246aa <strtoul+0xc4>
	if (base == 0) {
   246c6:	2330      	movs	r3, #48	; 0x30
   246c8:	2a00      	cmp	r2, #0
   246ca:	d1ae      	bne.n	2462a <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   246cc:	2208      	movs	r2, #8
   246ce:	e7ac      	b.n	2462a <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   246d0:	2b30      	cmp	r3, #48	; 0x30
   246d2:	d0a2      	beq.n	2461a <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   246d4:	220a      	movs	r2, #10
   246d6:	e7a8      	b.n	2462a <strtoul+0x44>

000246d8 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   246d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   246dc:	780f      	ldrb	r7, [r1, #0]
{
   246de:	4605      	mov	r5, r0
	if (c != 0) {
   246e0:	b187      	cbz	r7, 24704 <strstr+0x2c>
	c = *find++;
   246e2:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   246e4:	4620      	mov	r0, r4
   246e6:	f000 f842 	bl	2476e <strlen>
   246ea:	4680      	mov	r8, r0
		do {
			do {
				sc = *s++;
   246ec:	462e      	mov	r6, r5
   246ee:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   246f2:	b163      	cbz	r3, 2470e <strstr+0x36>
					return NULL;
				}
			} while (sc != c);
   246f4:	429f      	cmp	r7, r3
   246f6:	d108      	bne.n	2470a <strstr+0x32>
		} while (strncmp(s, find, len) != 0);
   246f8:	4642      	mov	r2, r8
   246fa:	4621      	mov	r1, r4
   246fc:	4630      	mov	r0, r6
   246fe:	f000 f849 	bl	24794 <strncmp>
   24702:	b910      	cbnz	r0, 2470a <strstr+0x32>
	s--;
	}
	return (char *)s;
}
   24704:	4628      	mov	r0, r5
   24706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   2470a:	4635      	mov	r5, r6
   2470c:	e7ee      	b.n	246ec <strstr+0x14>
					return NULL;
   2470e:	461d      	mov	r5, r3
   24710:	e7f8      	b.n	24704 <strstr+0x2c>

00024712 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   24712:	b570      	push	{r4, r5, r6, lr}
   24714:	4605      	mov	r5, r0
   24716:	3901      	subs	r1, #1
   24718:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   2471a:	b142      	cbz	r2, 2472e <strncpy+0x1c>
   2471c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   24720:	1e56      	subs	r6, r2, #1
   24722:	b92b      	cbnz	r3, 24730 <strncpy+0x1e>
   24724:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   24726:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   2472a:	42a2      	cmp	r2, r4
   2472c:	d1fb      	bne.n	24726 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   2472e:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   24730:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   24734:	4632      	mov	r2, r6
   24736:	e7ef      	b.n	24718 <strncpy+0x6>

00024738 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   24738:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   2473a:	7802      	ldrb	r2, [r0, #0]
   2473c:	4603      	mov	r3, r0
   2473e:	428a      	cmp	r2, r1
   24740:	f100 0001 	add.w	r0, r0, #1
   24744:	d004      	beq.n	24750 <strchr+0x18>
   24746:	2a00      	cmp	r2, #0
   24748:	d1f7      	bne.n	2473a <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   2474a:	2900      	cmp	r1, #0
   2474c:	bf18      	it	ne
   2474e:	2300      	movne	r3, #0
}
   24750:	4618      	mov	r0, r3
   24752:	4770      	bx	lr

00024754 <strrchr>:
 * @return pointer to last instance of found byte, or NULL if not found
 */

char *strrchr(const char *s, int c)
{
	char *match = NULL;
   24754:	2300      	movs	r3, #0
{
   24756:	b510      	push	{r4, lr}

	do {
		if (*s == (char)c) {
   24758:	b2c9      	uxtb	r1, r1
   2475a:	4604      	mov	r4, r0
   2475c:	f810 2b01 	ldrb.w	r2, [r0], #1
   24760:	428a      	cmp	r2, r1
   24762:	bf08      	it	eq
   24764:	4623      	moveq	r3, r4
			match = (char *)s;
		}
	} while (*s++);
   24766:	2a00      	cmp	r2, #0
   24768:	d1f7      	bne.n	2475a <strrchr+0x6>

	return match;
}
   2476a:	4618      	mov	r0, r3
   2476c:	bd10      	pop	{r4, pc}

0002476e <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
   2476e:	2300      	movs	r3, #0

	while (*s != '\0') {
   24770:	5cc2      	ldrb	r2, [r0, r3]
   24772:	b90a      	cbnz	r2, 24778 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   24774:	4618      	mov	r0, r3
   24776:	4770      	bx	lr
		n++;
   24778:	3301      	adds	r3, #1
   2477a:	e7f9      	b.n	24770 <strlen+0x2>

0002477c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2477c:	3801      	subs	r0, #1
   2477e:	3901      	subs	r1, #1
   24780:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   24784:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   24788:	4293      	cmp	r3, r2
   2478a:	d101      	bne.n	24790 <strcmp+0x14>
   2478c:	2b00      	cmp	r3, #0
   2478e:	d1f7      	bne.n	24780 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   24790:	1a98      	subs	r0, r3, r2
   24792:	4770      	bx	lr

00024794 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   24794:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   24796:	2400      	movs	r4, #0
   24798:	42a2      	cmp	r2, r4
   2479a:	d008      	beq.n	247ae <strncmp+0x1a>
   2479c:	5d03      	ldrb	r3, [r0, r4]
   2479e:	5d0d      	ldrb	r5, [r1, r4]
   247a0:	42ab      	cmp	r3, r5
   247a2:	d102      	bne.n	247aa <strncmp+0x16>
   247a4:	3401      	adds	r4, #1
   247a6:	2b00      	cmp	r3, #0
   247a8:	d1f6      	bne.n	24798 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   247aa:	1b58      	subs	r0, r3, r5
   247ac:	e000      	b.n	247b0 <strncmp+0x1c>
   247ae:	2000      	movs	r0, #0
}
   247b0:	bd30      	pop	{r4, r5, pc}

000247b2 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   247b2:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   247b4:	b15a      	cbz	r2, 247ce <memcmp+0x1c>
   247b6:	3901      	subs	r1, #1
   247b8:	1884      	adds	r4, r0, r2
   247ba:	f810 2b01 	ldrb.w	r2, [r0], #1
   247be:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   247c2:	42a0      	cmp	r0, r4
   247c4:	d001      	beq.n	247ca <memcmp+0x18>
   247c6:	429a      	cmp	r2, r3
   247c8:	d0f7      	beq.n	247ba <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   247ca:	1ad0      	subs	r0, r2, r3
}
   247cc:	bd10      	pop	{r4, pc}
		return 0;
   247ce:	4610      	mov	r0, r2
   247d0:	e7fc      	b.n	247cc <memcmp+0x1a>

000247d2 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   247d2:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   247d4:	ea81 0400 	eor.w	r4, r1, r0
   247d8:	07a5      	lsls	r5, r4, #30
   247da:	4603      	mov	r3, r0
   247dc:	d00b      	beq.n	247f6 <memcpy+0x24>
   247de:	3b01      	subs	r3, #1
   247e0:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   247e2:	4291      	cmp	r1, r2
   247e4:	d11a      	bne.n	2481c <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   247e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   247e8:	2a00      	cmp	r2, #0
   247ea:	d0fc      	beq.n	247e6 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   247ec:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   247f0:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   247f2:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   247f6:	079c      	lsls	r4, r3, #30
   247f8:	d1f6      	bne.n	247e8 <memcpy+0x16>
   247fa:	0895      	lsrs	r5, r2, #2
   247fc:	00ac      	lsls	r4, r5, #2
   247fe:	1f1e      	subs	r6, r3, #4
   24800:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   24802:	42b9      	cmp	r1, r7
   24804:	d105      	bne.n	24812 <memcpy+0x40>
   24806:	f06f 0603 	mvn.w	r6, #3
   2480a:	4423      	add	r3, r4
   2480c:	fb06 2205 	mla	r2, r6, r5, r2
   24810:	e7e5      	b.n	247de <memcpy+0xc>
			*(d_word++) = *(s_word++);
   24812:	f851 cb04 	ldr.w	ip, [r1], #4
   24816:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
   2481a:	e7f2      	b.n	24802 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
   2481c:	f811 4b01 	ldrb.w	r4, [r1], #1
   24820:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   24824:	e7dd      	b.n	247e2 <memcpy+0x10>

00024826 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   24826:	4603      	mov	r3, r0
{
   24828:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   2482a:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   2482c:	079c      	lsls	r4, r3, #30
   2482e:	d110      	bne.n	24852 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   24830:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   24834:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   24838:	0894      	lsrs	r4, r2, #2
   2483a:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   2483e:	42b3      	cmp	r3, r6
   24840:	d10d      	bne.n	2485e <memset+0x38>
   24842:	f06f 0503 	mvn.w	r5, #3
   24846:	fb05 2404 	mla	r4, r5, r4, r2
   2484a:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   2484c:	42a3      	cmp	r3, r4
   2484e:	d109      	bne.n	24864 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   24850:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   24852:	2a00      	cmp	r2, #0
   24854:	d0fc      	beq.n	24850 <memset+0x2a>
		*(d_byte++) = c_byte;
   24856:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2485a:	3a01      	subs	r2, #1
   2485c:	e7e6      	b.n	2482c <memset+0x6>
		*(d_word++) = c_word;
   2485e:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   24862:	e7ec      	b.n	2483e <memset+0x18>
		*(d_byte++) = c_byte;
   24864:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   24868:	e7f0      	b.n	2484c <memset+0x26>

0002486a <_to_x>:
{
   2486a:	4603      	mov	r3, r0
   2486c:	b5f0      	push	{r4, r5, r6, r7, lr}
		unsigned int d = n % base;
   2486e:	fbb1 f7f2 	udiv	r7, r1, r2
   24872:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   24876:	2d09      	cmp	r5, #9
   24878:	bf8c      	ite	hi
   2487a:	2627      	movhi	r6, #39	; 0x27
   2487c:	2600      	movls	r6, #0
   2487e:	461c      	mov	r4, r3
   24880:	3530      	adds	r5, #48	; 0x30
   24882:	4435      	add	r5, r6
	} while (n);
   24884:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   24886:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
   2488a:	d206      	bcs.n	2489a <_to_x+0x30>
	*buf = 0;
   2488c:	2200      	movs	r2, #0
   2488e:	7022      	strb	r2, [r4, #0]
	len = buf - start;
   24890:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
   24892:	4283      	cmp	r3, r0
   24894:	d804      	bhi.n	248a0 <_to_x+0x36>
}
   24896:	4620      	mov	r0, r4
   24898:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
   2489a:	4639      	mov	r1, r7
   2489c:	4623      	mov	r3, r4
   2489e:	e7e6      	b.n	2486e <_to_x+0x4>
		char tmp = *buf;
   248a0:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
   248a2:	7801      	ldrb	r1, [r0, #0]
   248a4:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
   248a8:	f800 2b01 	strb.w	r2, [r0], #1
   248ac:	e7f1      	b.n	24892 <_to_x+0x28>

000248ae <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
   248ae:	2100      	movs	r1, #0
{
   248b0:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   248b2:	e9d0 6500 	ldrd	r6, r5, [r0]
   248b6:	0872      	lsrs	r2, r6, #1
   248b8:	f006 0301 	and.w	r3, r6, #1
   248bc:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   248c0:	189b      	adds	r3, r3, r2
   248c2:	ea4f 0455 	mov.w	r4, r5, lsr #1
   248c6:	eb44 0101 	adc.w	r1, r4, r1
   248ca:	e9c0 3100 	strd	r3, r1, [r0]
}
   248ce:	bd70      	pop	{r4, r5, r6, pc}

000248d0 <_ldiv5>:
{
   248d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint64_t rem = *v, quot = 0U, q;
   248d4:	e9d0 3200 	ldrd	r3, r2, [r0]
		q = (uint64_t)(hi / 5U) << shifts[i];
   248d8:	2705      	movs	r7, #5
	rem += 2U;
   248da:	3302      	adds	r3, #2
   248dc:	f142 0200 	adc.w	r2, r2, #0
		q = (uint64_t)(hi / 5U) << shifts[i];
   248e0:	fbb2 fef7 	udiv	lr, r2, r7
   248e4:	f04f 0c00 	mov.w	ip, #0
		rem -= q * 5U;
   248e8:	fb07 f10e 	mul.w	r1, r7, lr
   248ec:	ebb3 060c 	subs.w	r6, r3, ip
   248f0:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
   248f4:	08f2      	lsrs	r2, r6, #3
   248f6:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   248fa:	fbb2 f1f7 	udiv	r1, r2, r7
   248fe:	00ca      	lsls	r2, r1, #3
		quot += q;
   24900:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   24904:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
   24908:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
   2490c:	fba2 2307 	umull	r2, r3, r2, r7
   24910:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   24912:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
   24916:	eb18 0403 	adds.w	r4, r8, r3
   2491a:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
   2491e:	e9c0 4500 	strd	r4, r5, [r0]
}
   24922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00024926 <_get_digit>:
	if (*digit_count > 0) {
   24926:	680b      	ldr	r3, [r1, #0]
{
   24928:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   2492a:	2b00      	cmp	r3, #0
   2492c:	dd10      	ble.n	24950 <_get_digit+0x2a>
		*digit_count -= 1;
   2492e:	3b01      	subs	r3, #1
   24930:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   24932:	210a      	movs	r1, #10
   24934:	6802      	ldr	r2, [r0, #0]
   24936:	6844      	ldr	r4, [r0, #4]
   24938:	fba2 5601 	umull	r5, r6, r2, r1
   2493c:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   24940:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   24944:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   24948:	0f31      	lsrs	r1, r6, #28
   2494a:	3130      	adds	r1, #48	; 0x30
}
   2494c:	4608      	mov	r0, r1
   2494e:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   24950:	2130      	movs	r1, #48	; 0x30
   24952:	e7fb      	b.n	2494c <_get_digit+0x26>

00024954 <_stdout_hook_default>:
}
   24954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24958:	4770      	bx	lr

0002495a <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   2495a:	684b      	ldr	r3, [r1, #4]
   2495c:	2b01      	cmp	r3, #1
   2495e:	dd07      	ble.n	24970 <sprintf_out+0x16>
		*(p->ptr) = c;
   24960:	680b      	ldr	r3, [r1, #0]
   24962:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   24964:	680b      	ldr	r3, [r1, #0]
   24966:	3301      	adds	r3, #1
   24968:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   2496a:	684b      	ldr	r3, [r1, #4]
   2496c:	3b01      	subs	r3, #1
   2496e:	604b      	str	r3, [r1, #4]
}
   24970:	2000      	movs	r0, #0
   24972:	4770      	bx	lr

00024974 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   24974:	b508      	push	{r3, lr}
	net_if_init();
   24976:	f7ec fe61 	bl	1163c <net_if_init>
	net_if_post_init();
   2497a:	f7ec fe73 	bl	11664 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   2497e:	2000      	movs	r0, #0
   24980:	bd08      	pop	{r3, pc}

00024982 <l2_flags_get>:
	return iface->if_dev->l2;
   24982:	6803      	ldr	r3, [r0, #0]
   24984:	685b      	ldr	r3, [r3, #4]
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   24986:	b113      	cbz	r3, 2498e <l2_flags_get+0xc>
   24988:	68db      	ldr	r3, [r3, #12]
   2498a:	b103      	cbz	r3, 2498e <l2_flags_get+0xc>
		flags = net_if_l2(iface)->get_flags(iface);
   2498c:	4718      	bx	r3
}
   2498e:	2000      	movs	r0, #0
   24990:	4770      	bx	lr

00024992 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24992:	e8d0 0faf 	lda	r0, [r0]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   24996:	4108      	asrs	r0, r1
}
   24998:	f000 0001 	and.w	r0, r0, #1
   2499c:	4770      	bx	lr

0002499e <net_if_up>:
{
   2499e:	b510      	push	{r4, lr}
   249a0:	4604      	mov	r4, r0
	return atomic_test_bit(iface->if_dev->flags, value);
   249a2:	6800      	ldr	r0, [r0, #0]
   249a4:	2100      	movs	r1, #0
   249a6:	300c      	adds	r0, #12
   249a8:	f7ff fff3 	bl	24992 <atomic_test_bit>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   249ac:	b9d8      	cbnz	r0, 249e6 <net_if_up+0x48>
	     net_if_is_socket_offloaded(iface))) {
   249ae:	6823      	ldr	r3, [r4, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   249b0:	7e9a      	ldrb	r2, [r3, #26]
   249b2:	b14a      	cbz	r2, 249c8 <net_if_up+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   249b4:	330c      	adds	r3, #12
   249b6:	e8d3 2fef 	ldaex	r2, [r3]
   249ba:	f042 0201 	orr.w	r2, r2, #1
   249be:	e8c3 2fe1 	stlex	r1, r2, [r3]
   249c2:	2900      	cmp	r1, #0
   249c4:	d1f7      	bne.n	249b6 <net_if_up+0x18>
}
   249c6:	bd10      	pop	{r4, pc}
	return iface->if_dev->l2;
   249c8:	685b      	ldr	r3, [r3, #4]
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   249ca:	b973      	cbnz	r3, 249ea <net_if_up+0x4c>
   249cc:	6823      	ldr	r3, [r4, #0]
   249ce:	330c      	adds	r3, #12
   249d0:	e8d3 2fef 	ldaex	r2, [r3]
   249d4:	f042 0201 	orr.w	r2, r2, #1
   249d8:	e8c3 2fe1 	stlex	r1, r2, [r3]
   249dc:	2900      	cmp	r1, #0
   249de:	d1f7      	bne.n	249d0 <net_if_up+0x32>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   249e0:	4620      	mov	r0, r4
   249e2:	f7ff ffce 	bl	24982 <l2_flags_get>
		return 0;
   249e6:	2000      	movs	r0, #0
   249e8:	e7ed      	b.n	249c6 <net_if_up+0x28>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   249ea:	689b      	ldr	r3, [r3, #8]
   249ec:	2b00      	cmp	r3, #0
   249ee:	d0ed      	beq.n	249cc <net_if_up+0x2e>
	status = net_if_l2(iface)->enable(iface, true);
   249f0:	2101      	movs	r1, #1
   249f2:	4620      	mov	r0, r4
   249f4:	4798      	blx	r3
	if (status < 0) {
   249f6:	2800      	cmp	r0, #0
   249f8:	dae8      	bge.n	249cc <net_if_up+0x2e>
   249fa:	e7e4      	b.n	249c6 <net_if_up+0x28>

000249fc <net_byte_to_hex>:
{
   249fc:	b570      	push	{r4, r5, r6, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   249fe:	090e      	lsrs	r6, r1, #4
		if (i == 0 && !pad && !val) {
   24a00:	b1b3      	cbz	r3, 24a30 <net_byte_to_hex+0x34>
		if (val < 10) {
   24a02:	2e09      	cmp	r6, #9
			*ptr++ = (char) (val - 10 + base);
   24a04:	b274      	sxtb	r4, r6
   24a06:	bf86      	itte	hi
   24a08:	f1a2 030a 	subhi.w	r3, r2, #10
   24a0c:	18e4      	addhi	r4, r4, r3
			*ptr++ = (char) (val + '0');
   24a0e:	3430      	addls	r4, #48	; 0x30
   24a10:	1c45      	adds	r5, r0, #1
   24a12:	7004      	strb	r4, [r0, #0]
   24a14:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   24a18:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   24a1a:	b24b      	sxtb	r3, r1
   24a1c:	bf83      	ittte	hi
   24a1e:	3a0a      	subhi	r2, #10
   24a20:	189b      	addhi	r3, r3, r2
   24a22:	b2db      	uxtbhi	r3, r3
			*ptr++ = (char) (val + '0');
   24a24:	3330      	addls	r3, #48	; 0x30
   24a26:	702b      	strb	r3, [r5, #0]
	*ptr = '\0';
   24a28:	2300      	movs	r3, #0
   24a2a:	706b      	strb	r3, [r5, #1]
   24a2c:	1c68      	adds	r0, r5, #1
}
   24a2e:	bd70      	pop	{r4, r5, r6, pc}
		if (i == 0 && !pad && !val) {
   24a30:	2e00      	cmp	r6, #0
   24a32:	d1e6      	bne.n	24a02 <net_byte_to_hex+0x6>
   24a34:	4605      	mov	r5, r0
   24a36:	e7ed      	b.n	24a14 <net_byte_to_hex+0x18>

00024a38 <z_impl_net_addr_pton>:
#endif /* CONFIG_USERSPACE */

int z_impl_net_addr_pton(sa_family_t family, const char *src,
			 void *dst)
{
	if (family == AF_INET) {
   24a38:	2801      	cmp	r0, #1
{
   24a3a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   24a3e:	460c      	mov	r4, r1
   24a40:	4616      	mov	r6, r2
	if (family == AF_INET) {
   24a42:	d128      	bne.n	24a96 <z_impl_net_addr_pton+0x5e>
		struct in_addr *addr = (struct in_addr *)dst;
		size_t i, len;

		len = strlen(src);
   24a44:	4608      	mov	r0, r1
   24a46:	f7ff fe92 	bl	2476e <strlen>
		for (i = 0; i < len; i++) {
   24a4a:	4623      	mov	r3, r4
   24a4c:	4420      	add	r0, r4
   24a4e:	4298      	cmp	r0, r3
   24a50:	d114      	bne.n	24a7c <z_impl_net_addr_pton+0x44>
			    src[i] != '.') {
				return -EINVAL;
			}
		}

		(void)memset(addr, 0, sizeof(struct in_addr));
   24a52:	4630      	mov	r0, r6
   24a54:	2204      	movs	r2, #4
   24a56:	2100      	movs	r1, #0
   24a58:	f7ff fee5 	bl	24826 <memset>

		for (i = 0; i < sizeof(struct in_addr); i++) {
   24a5c:	1e75      	subs	r5, r6, #1
   24a5e:	3603      	adds	r6, #3
			char *endptr;

			addr->s4_addr[i] = strtol(src, &endptr, 10);
   24a60:	4620      	mov	r0, r4
   24a62:	220a      	movs	r2, #10
   24a64:	a901      	add	r1, sp, #4
   24a66:	f7ff fd48 	bl	244fa <strtol>

			src = ++endptr;
   24a6a:	9c01      	ldr	r4, [sp, #4]
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   24a6c:	f805 0f01 	strb.w	r0, [r5, #1]!
		for (i = 0; i < sizeof(struct in_addr); i++) {
   24a70:	42b5      	cmp	r5, r6
			src = ++endptr;
   24a72:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   24a76:	d1f3      	bne.n	24a60 <z_impl_net_addr_pton+0x28>
		}
	} else {
		return -EINVAL;
	}

	return 0;
   24a78:	2000      	movs	r0, #0
   24a7a:	e009      	b.n	24a90 <z_impl_net_addr_pton+0x58>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   24a7c:	f813 2b01 	ldrb.w	r2, [r3], #1
   24a80:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   24a84:	2909      	cmp	r1, #9
   24a86:	d9e2      	bls.n	24a4e <z_impl_net_addr_pton+0x16>
   24a88:	2a2e      	cmp	r2, #46	; 0x2e
   24a8a:	d0e0      	beq.n	24a4e <z_impl_net_addr_pton+0x16>
				return -EINVAL;
   24a8c:	f06f 0015 	mvn.w	r0, #21
}
   24a90:	b003      	add	sp, #12
   24a92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (family == AF_INET6) {
   24a96:	2802      	cmp	r0, #2
   24a98:	d1f8      	bne.n	24a8c <z_impl_net_addr_pton+0x54>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   24a9a:	212e      	movs	r1, #46	; 0x2e
   24a9c:	4620      	mov	r0, r4
   24a9e:	f7ff fe4b 	bl	24738 <strchr>
		if (*src == ':') {
   24aa2:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   24aa4:	2800      	cmp	r0, #0
   24aa6:	bf14      	ite	ne
   24aa8:	2706      	movne	r7, #6
   24aaa:	2708      	moveq	r7, #8
		if (*src == ':') {
   24aac:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   24aae:	bf08      	it	eq
   24ab0:	3401      	addeq	r4, #1
		len = strlen(src);
   24ab2:	4620      	mov	r0, r4
   24ab4:	f7ff fe5b 	bl	2476e <strlen>
		for (i = 0; i < len; i++) {
   24ab8:	2300      	movs	r3, #0
   24aba:	4283      	cmp	r3, r0
   24abc:	db21      	blt.n	24b02 <z_impl_net_addr_pton+0xca>
		for (i = 0; i < expected_groups; i++) {
   24abe:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   24ac0:	46a9      	mov	r9, r5
			if (!src || *src == '\0') {
   24ac2:	2c00      	cmp	r4, #0
   24ac4:	d0e2      	beq.n	24a8c <z_impl_net_addr_pton+0x54>
   24ac6:	7823      	ldrb	r3, [r4, #0]
   24ac8:	2b00      	cmp	r3, #0
   24aca:	d0df      	beq.n	24a8c <z_impl_net_addr_pton+0x54>
			if (*src != ':') {
   24acc:	2b3a      	cmp	r3, #58	; 0x3a
   24ace:	d02d      	beq.n	24b2c <z_impl_net_addr_pton+0xf4>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   24ad0:	2210      	movs	r2, #16
   24ad2:	2100      	movs	r1, #0
   24ad4:	4620      	mov	r0, r4
   24ad6:	f7ff fd10 	bl	244fa <strtol>
   24ada:	2210      	movs	r2, #16
   24adc:	4680      	mov	r8, r0
   24ade:	2100      	movs	r1, #0
   24ae0:	4620      	mov	r0, r4
   24ae2:	f7ff fd0a 	bl	244fa <strtol>
   24ae6:	f3c8 2807 	ubfx	r8, r8, #8, #8
   24aea:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
   24aee:	f826 8015 	strh.w	r8, [r6, r5, lsl #1]
				src = strchr(src, ':');
   24af2:	213a      	movs	r1, #58	; 0x3a
   24af4:	4620      	mov	r0, r4
   24af6:	f7ff fe1f 	bl	24738 <strchr>
				if (src) {
   24afa:	4604      	mov	r4, r0
   24afc:	b178      	cbz	r0, 24b1e <z_impl_net_addr_pton+0xe6>
			src++;
   24afe:	3401      	adds	r4, #1
   24b00:	e010      	b.n	24b24 <z_impl_net_addr_pton+0xec>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   24b02:	5ce2      	ldrb	r2, [r4, r3]
   24b04:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   24b08:	290a      	cmp	r1, #10
   24b0a:	d906      	bls.n	24b1a <z_impl_net_addr_pton+0xe2>
   24b0c:	f022 0120 	bic.w	r1, r2, #32
   24b10:	3941      	subs	r1, #65	; 0x41
   24b12:	2905      	cmp	r1, #5
   24b14:	d901      	bls.n	24b1a <z_impl_net_addr_pton+0xe2>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   24b16:	2a2e      	cmp	r2, #46	; 0x2e
   24b18:	d1b8      	bne.n	24a8c <z_impl_net_addr_pton+0x54>
		for (i = 0; i < len; i++) {
   24b1a:	3301      	adds	r3, #1
   24b1c:	e7cd      	b.n	24aba <z_impl_net_addr_pton+0x82>
					if (i < expected_groups - 1) {
   24b1e:	1e7b      	subs	r3, r7, #1
   24b20:	42ab      	cmp	r3, r5
   24b22:	dcb3      	bgt.n	24a8c <z_impl_net_addr_pton+0x54>
		for (i = 0; i < expected_groups; i++) {
   24b24:	3501      	adds	r5, #1
   24b26:	42af      	cmp	r7, r5
   24b28:	dccb      	bgt.n	24ac2 <z_impl_net_addr_pton+0x8a>
   24b2a:	e013      	b.n	24b54 <z_impl_net_addr_pton+0x11c>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   24b2c:	eb06 0345 	add.w	r3, r6, r5, lsl #1
   24b30:	f806 9015 	strb.w	r9, [r6, r5, lsl #1]
   24b34:	f883 9001 	strb.w	r9, [r3, #1]
			for (; i < expected_groups; i++) {
   24b38:	3501      	adds	r5, #1
   24b3a:	42af      	cmp	r7, r5
   24b3c:	dcf6      	bgt.n	24b2c <z_impl_net_addr_pton+0xf4>
			tmp = strrchr(src, ':');
   24b3e:	213a      	movs	r1, #58	; 0x3a
   24b40:	4620      	mov	r0, r4
   24b42:	f7ff fe07 	bl	24754 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   24b46:	42a0      	cmp	r0, r4
   24b48:	d11f      	bne.n	24b8a <z_impl_net_addr_pton+0x152>
   24b4a:	2f06      	cmp	r7, #6
   24b4c:	d001      	beq.n	24b52 <z_impl_net_addr_pton+0x11a>
   24b4e:	7863      	ldrb	r3, [r4, #1]
   24b50:	bb63      	cbnz	r3, 24bac <z_impl_net_addr_pton+0x174>
				src++;
   24b52:	3401      	adds	r4, #1
		if (expected_groups == 6) {
   24b54:	2f06      	cmp	r7, #6
   24b56:	d18f      	bne.n	24a78 <z_impl_net_addr_pton+0x40>
			for (i = 0; i < 4; i++) {
   24b58:	2500      	movs	r5, #0
   24b5a:	360c      	adds	r6, #12
				if (!src || !*src) {
   24b5c:	2c00      	cmp	r4, #0
   24b5e:	d095      	beq.n	24a8c <z_impl_net_addr_pton+0x54>
   24b60:	7823      	ldrb	r3, [r4, #0]
   24b62:	2b00      	cmp	r3, #0
   24b64:	d092      	beq.n	24a8c <z_impl_net_addr_pton+0x54>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   24b66:	220a      	movs	r2, #10
   24b68:	2100      	movs	r1, #0
   24b6a:	4620      	mov	r0, r4
   24b6c:	f7ff fcc5 	bl	244fa <strtol>
				src = strchr(src, '.');
   24b70:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   24b72:	f806 0b01 	strb.w	r0, [r6], #1
				src = strchr(src, '.');
   24b76:	4620      	mov	r0, r4
   24b78:	f7ff fdde 	bl	24738 <strchr>
				if (src) {
   24b7c:	4604      	mov	r4, r0
   24b7e:	b1b8      	cbz	r0, 24bb0 <z_impl_net_addr_pton+0x178>
					src++;
   24b80:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
   24b82:	3501      	adds	r5, #1
   24b84:	2d04      	cmp	r5, #4
   24b86:	d1e9      	bne.n	24b5c <z_impl_net_addr_pton+0x124>
   24b88:	e776      	b.n	24a78 <z_impl_net_addr_pton+0x40>
			if (expected_groups == 6) {
   24b8a:	2f06      	cmp	r7, #6
   24b8c:	d100      	bne.n	24b90 <z_impl_net_addr_pton+0x158>
				tmp--;
   24b8e:	3801      	subs	r0, #1
			i = expected_groups - 1;
   24b90:	1e7d      	subs	r5, r7, #1
   24b92:	3001      	adds	r0, #1
				if (*tmp == ':') {
   24b94:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   24b98:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   24b9a:	bf08      	it	eq
   24b9c:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
				if (i < 0) {
   24ba0:	2d00      	cmp	r5, #0
   24ba2:	f6ff af73 	blt.w	24a8c <z_impl_net_addr_pton+0x54>
			} while (tmp-- != src);
   24ba6:	42a0      	cmp	r0, r4
   24ba8:	d1f4      	bne.n	24b94 <z_impl_net_addr_pton+0x15c>
   24baa:	e7a8      	b.n	24afe <z_impl_net_addr_pton+0xc6>
   24bac:	4620      	mov	r0, r4
   24bae:	e7ef      	b.n	24b90 <z_impl_net_addr_pton+0x158>
					if (i < 3) {
   24bb0:	2d03      	cmp	r5, #3
   24bb2:	f47f af6b 	bne.w	24a8c <z_impl_net_addr_pton+0x54>
   24bb6:	e7e4      	b.n	24b82 <z_impl_net_addr_pton+0x14a>

00024bb8 <gpio_nrfx_write>:
{
   24bb8:	b510      	push	{r4, lr}
	return port->config->config_info;
   24bba:	6804      	ldr	r4, [r0, #0]
   24bbc:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24bbe:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   24bc0:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24bc2:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   24bc4:	69c0      	ldr	r0, [r0, #28]
   24bc6:	d103      	bne.n	24bd0 <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   24bc8:	4058      	eors	r0, r3
    p_reg->OUT = value;
   24bca:	6060      	str	r0, [r4, #4]
}
   24bcc:	2000      	movs	r0, #0
   24bce:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   24bd0:	3300      	adds	r3, #0
   24bd2:	f04f 0101 	mov.w	r1, #1
   24bd6:	bf18      	it	ne
   24bd8:	2301      	movne	r3, #1
   24bda:	40d0      	lsrs	r0, r2
   24bdc:	f000 0001 	and.w	r0, r0, #1
   24be0:	4091      	lsls	r1, r2
   24be2:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   24be4:	bf14      	ite	ne
   24be6:	60a1      	strne	r1, [r4, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   24be8:	60e1      	streq	r1, [r4, #12]
   24bea:	e7ef      	b.n	24bcc <gpio_nrfx_write+0x14>

00024bec <gpio_nrfx_read>:
{
   24bec:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   24bee:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   24bf0:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24bf2:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   24bf4:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24bf6:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   24bf8:	2901      	cmp	r1, #1
    return p_reg->DIR;
   24bfa:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   24bfc:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   24bfe:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   24c00:	ea80 0004 	eor.w	r0, r0, r4
   24c04:	ea84 0405 	eor.w	r4, r4, r5
   24c08:	ea04 0406 	and.w	r4, r4, r6
   24c0c:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   24c10:	bf1c      	itt	ne
   24c12:	40d0      	lsrne	r0, r2
   24c14:	f000 0001 	andne.w	r0, r0, #1
   24c18:	6018      	str	r0, [r3, #0]
}
   24c1a:	2000      	movs	r0, #0
   24c1c:	bd70      	pop	{r4, r5, r6, pc}

00024c1e <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   24c1e:	6883      	ldr	r3, [r0, #8]
{
   24c20:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   24c22:	6818      	ldr	r0, [r3, #0]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   24c24:	b158      	cbz	r0, 24c3e <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24c26:	2400      	movs	r4, #0
   24c28:	4281      	cmp	r1, r0
   24c2a:	d113      	bne.n	24c54 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   24c2c:	6808      	ldr	r0, [r1, #0]
   24c2e:	b95c      	cbnz	r4, 24c48 <gpio_nrfx_manage_callback+0x2a>
   24c30:	685c      	ldr	r4, [r3, #4]
	list->head = node;
   24c32:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   24c34:	42a1      	cmp	r1, r4
   24c36:	d100      	bne.n	24c3a <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   24c38:	6058      	str	r0, [r3, #4]
	parent->next = child;
   24c3a:	2000      	movs	r0, #0
   24c3c:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   24c3e:	b972      	cbnz	r2, 24c5e <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   24c40:	2000      	movs	r0, #0
}
   24c42:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24c44:	4628      	mov	r0, r5
   24c46:	e7ef      	b.n	24c28 <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
   24c48:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   24c4a:	6858      	ldr	r0, [r3, #4]
   24c4c:	4281      	cmp	r1, r0
	list->tail = node;
   24c4e:	bf08      	it	eq
   24c50:	605c      	streq	r4, [r3, #4]
   24c52:	e7f2      	b.n	24c3a <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   24c54:	6805      	ldr	r5, [r0, #0]
	return node->next;
   24c56:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24c58:	2d00      	cmp	r5, #0
   24c5a:	d1f3      	bne.n	24c44 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   24c5c:	b13a      	cbz	r2, 24c6e <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   24c5e:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   24c60:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   24c62:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   24c64:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   24c66:	2800      	cmp	r0, #0
   24c68:	d1ea      	bne.n	24c40 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   24c6a:	6059      	str	r1, [r3, #4]
   24c6c:	e7e9      	b.n	24c42 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   24c6e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   24c72:	e7e6      	b.n	24c42 <gpio_nrfx_manage_callback+0x24>

00024c74 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   24c74:	2901      	cmp	r1, #1
{
   24c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   24c7a:	bf18      	it	ne
   24c7c:	b2d4      	uxtbne	r4, r2
{
   24c7e:	4606      	mov	r6, r0
		to_pin   = pin;
   24c80:	bf12      	itee	ne
   24c82:	4625      	movne	r5, r4
		to_pin   = 31U;
   24c84:	251f      	moveq	r5, #31
		from_pin = 0U;
   24c86:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   24c88:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   24c8c:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   24c8e:	42ac      	cmp	r4, r5
   24c90:	d902      	bls.n	24c98 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   24c92:	2000      	movs	r0, #0
}
   24c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   24c98:	68fb      	ldr	r3, [r7, #12]
   24c9a:	fa08 f204 	lsl.w	r2, r8, r4
   24c9e:	ea23 0302 	bic.w	r3, r3, r2
   24ca2:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   24ca4:	4621      	mov	r1, r4
   24ca6:	4630      	mov	r0, r6
   24ca8:	f7ec fde4 	bl	11874 <gpiote_pin_int_cfg>
		if (res != 0) {
   24cac:	2800      	cmp	r0, #0
   24cae:	d1f1      	bne.n	24c94 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   24cb0:	3401      	adds	r4, #1
   24cb2:	b2e4      	uxtb	r4, r4
   24cb4:	e7eb      	b.n	24c8e <gpio_nrfx_pin_disable_callback+0x1a>

00024cb6 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   24cb6:	2901      	cmp	r1, #1
{
   24cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   24cbc:	bf18      	it	ne
   24cbe:	b2d4      	uxtbne	r4, r2
{
   24cc0:	4606      	mov	r6, r0
		to_pin   = pin;
   24cc2:	bf12      	itee	ne
   24cc4:	4625      	movne	r5, r4
		to_pin   = 31U;
   24cc6:	251f      	moveq	r5, #31
		from_pin = 0U;
   24cc8:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   24cca:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   24cce:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   24cd0:	42ac      	cmp	r4, r5
   24cd2:	d902      	bls.n	24cda <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   24cd4:	2000      	movs	r0, #0
}
   24cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   24cda:	68fb      	ldr	r3, [r7, #12]
   24cdc:	fa08 f204 	lsl.w	r2, r8, r4
   24ce0:	4313      	orrs	r3, r2
   24ce2:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   24ce4:	4621      	mov	r1, r4
   24ce6:	4630      	mov	r0, r6
   24ce8:	f7ec fdc4 	bl	11874 <gpiote_pin_int_cfg>
		if (res != 0) {
   24cec:	2800      	cmp	r0, #0
   24cee:	d1f2      	bne.n	24cd6 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   24cf0:	3401      	adds	r4, #1
   24cf2:	b2e4      	uxtb	r4, r4
   24cf4:	e7ec      	b.n	24cd0 <gpio_nrfx_pin_enable_callback+0x1a>

00024cf6 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   24cf6:	6883      	ldr	r3, [r0, #8]
   24cf8:	689b      	ldr	r3, [r3, #8]
   24cfa:	7b9a      	ldrb	r2, [r3, #14]
   24cfc:	b172      	cbz	r2, 24d1c <uarte_nrfx_isr_int+0x26>
	return dev->config->config_info;
   24cfe:	6802      	ldr	r2, [r0, #0]
	return config->uarte_regs;
   24d00:	6892      	ldr	r2, [r2, #8]
   24d02:	6812      	ldr	r2, [r2, #0]
   24d04:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (data->int_driven->disable_tx_irq &&
   24d08:	b141      	cbz	r1, 24d1c <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   24d0a:	f44f 7180 	mov.w	r1, #256	; 0x100
   24d0e:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24d12:	2101      	movs	r1, #1
   24d14:	60d1      	str	r1, [r2, #12]
		data->int_driven->disable_tx_irq = false;
   24d16:	2200      	movs	r2, #0
   24d18:	739a      	strb	r2, [r3, #14]
		return;
   24d1a:	4770      	bx	lr
	if (data->int_driven->cb) {
   24d1c:	681a      	ldr	r2, [r3, #0]
   24d1e:	b10a      	cbz	r2, 24d24 <uarte_nrfx_isr_int+0x2e>
		data->int_driven->cb(data->int_driven->cb_data);
   24d20:	6858      	ldr	r0, [r3, #4]
   24d22:	4710      	bx	r2
}
   24d24:	4770      	bx	lr

00024d26 <uarte_nrfx_config_get>:
{
   24d26:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   24d28:	6882      	ldr	r2, [r0, #8]
   24d2a:	e892 0003 	ldmia.w	r2, {r0, r1}
   24d2e:	e883 0003 	stmia.w	r3, {r0, r1}
}
   24d32:	2000      	movs	r0, #0
   24d34:	4770      	bx	lr

00024d36 <uarte_nrfx_err_check>:
	return dev->config->config_info;
   24d36:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   24d38:	689b      	ldr	r3, [r3, #8]
   24d3a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24d3c:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   24d40:	b118      	cbz	r0, 24d4a <uarte_nrfx_err_check+0x14>
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   24d42:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   24d46:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   24d4a:	4770      	bx	lr

00024d4c <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   24d4c:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   24d4e:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   24d50:	689b      	ldr	r3, [r3, #8]
   24d52:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24d54:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   24d58:	b138      	cbz	r0, 24d6a <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   24d5a:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24d5c:	2000      	movs	r0, #0
   24d5e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24d60:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24d62:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24d66:	601a      	str	r2, [r3, #0]
	return 0;
   24d68:	4770      	bx	lr
		return -1;
   24d6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   24d6e:	4770      	bx	lr

00024d70 <uarte_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24d70:	2200      	movs	r2, #0
	return dev->config->config_info;
   24d72:	6803      	ldr	r3, [r0, #0]
{
   24d74:	b082      	sub	sp, #8
	return config->uarte_regs;
   24d76:	689b      	ldr	r3, [r3, #8]
{
   24d78:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   24d7c:	681b      	ldr	r3, [r3, #0]
   24d7e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   24d82:	f10d 0207 	add.w	r2, sp, #7
   24d86:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   24d8a:	2201      	movs	r2, #1
   24d8c:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24d90:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24d92:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   24d96:	2900      	cmp	r1, #0
   24d98:	d0fb      	beq.n	24d92 <uarte_nrfx_poll_out+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24d9a:	60da      	str	r2, [r3, #12]
}
   24d9c:	b002      	add	sp, #8
   24d9e:	4770      	bx	lr

00024da0 <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   24da0:	6803      	ldr	r3, [r0, #0]
{
   24da2:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   24da4:	689b      	ldr	r3, [r3, #8]
   24da6:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24da8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   24dac:	b1bb      	cbz	r3, 24dde <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   24dae:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   24db0:	68ab      	ldr	r3, [r5, #8]
   24db2:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24db4:	2300      	movs	r3, #0
   24db6:	4290      	cmp	r0, r2
   24db8:	bfa8      	it	ge
   24dba:	4610      	movge	r0, r2
   24dbc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   24dc0:	68aa      	ldr	r2, [r5, #8]
   24dc2:	4283      	cmp	r3, r0
   24dc4:	6892      	ldr	r2, [r2, #8]
   24dc6:	db06      	blt.n	24dd6 <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24dc8:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   24dca:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   24dce:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24dd2:	60a3      	str	r3, [r4, #8]
}
   24dd4:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   24dd6:	5cce      	ldrb	r6, [r1, r3]
   24dd8:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   24dda:	3301      	adds	r3, #1
   24ddc:	e7f0      	b.n	24dc0 <uarte_nrfx_fifo_fill+0x20>
		return 0;
   24dde:	4618      	mov	r0, r3
   24de0:	e7f8      	b.n	24dd4 <uarte_nrfx_fifo_fill+0x34>

00024de2 <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   24de2:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   24de4:	689b      	ldr	r3, [r3, #8]
   24de6:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24de8:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   24dec:	b143      	cbz	r3, 24e00 <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   24dee:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24df0:	2000      	movs	r0, #0
   24df2:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24df6:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   24df8:	7b1b      	ldrb	r3, [r3, #12]
   24dfa:	700b      	strb	r3, [r1, #0]
   24dfc:	6010      	str	r0, [r2, #0]
   24dfe:	4770      	bx	lr
	int num_rx = 0;
   24e00:	4618      	mov	r0, r3
}
   24e02:	4770      	bx	lr

00024e04 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   24e04:	2100      	movs	r1, #0
	return dev->config->config_info;
   24e06:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   24e08:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   24e0a:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   24e0c:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   24e0e:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   24e10:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   24e12:	f44f 7280 	mov.w	r2, #256	; 0x100
   24e16:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   24e1a:	4770      	bx	lr

00024e1c <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   24e1c:	2201      	movs	r2, #1
   24e1e:	6883      	ldr	r3, [r0, #8]
   24e20:	689b      	ldr	r3, [r3, #8]
   24e22:	739a      	strb	r2, [r3, #14]
}
   24e24:	4770      	bx	lr

00024e26 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   24e26:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   24e28:	689b      	ldr	r3, [r3, #8]
   24e2a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24e2c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   24e30:	b118      	cbz	r0, 24e3a <uarte_nrfx_irq_tx_ready_complete+0x14>
    return p_reg->INTENSET & mask;
   24e32:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   24e36:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   24e3a:	4770      	bx	lr

00024e3c <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   24e3c:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   24e3e:	689b      	ldr	r3, [r3, #8]
   24e40:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24e42:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   24e46:	3000      	adds	r0, #0
   24e48:	bf18      	it	ne
   24e4a:	2001      	movne	r0, #1
   24e4c:	4770      	bx	lr

00024e4e <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   24e4e:	2210      	movs	r2, #16
	return dev->config->config_info;
   24e50:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   24e52:	689b      	ldr	r3, [r3, #8]
   24e54:	681b      	ldr	r3, [r3, #0]
   24e56:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   24e5a:	4770      	bx	lr

00024e5c <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   24e5c:	2210      	movs	r2, #16
	return dev->config->config_info;
   24e5e:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   24e60:	689b      	ldr	r3, [r3, #8]
   24e62:	681b      	ldr	r3, [r3, #0]
   24e64:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   24e68:	4770      	bx	lr

00024e6a <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   24e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   24e6e:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   24e70:	689b      	ldr	r3, [r3, #8]
   24e72:	681b      	ldr	r3, [r3, #0]
   24e74:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   24e78:	4770      	bx	lr

00024e7a <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   24e7a:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   24e7e:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   24e80:	689b      	ldr	r3, [r3, #8]
   24e82:	681b      	ldr	r3, [r3, #0]
   24e84:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   24e88:	4770      	bx	lr

00024e8a <uarte_nrfx_irq_update>:
}
   24e8a:	2001      	movs	r0, #1
   24e8c:	4770      	bx	lr

00024e8e <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   24e8e:	6883      	ldr	r3, [r0, #8]
   24e90:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   24e92:	e9c3 1200 	strd	r1, r2, [r3]
}
   24e96:	4770      	bx	lr

00024e98 <uarte_nrfx_irq_is_pending>:
{
   24e98:	b508      	push	{r3, lr}
	return dev->config->config_info;
   24e9a:	6803      	ldr	r3, [r0, #0]
{
   24e9c:	4602      	mov	r2, r0
	return config->uarte_regs;
   24e9e:	689b      	ldr	r3, [r3, #8]
   24ea0:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   24ea2:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   24ea6:	05db      	lsls	r3, r3, #23
   24ea8:	d405      	bmi.n	24eb6 <uarte_nrfx_irq_is_pending+0x1e>
   24eaa:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   24eae:	f010 0010 	ands.w	r0, r0, #16
   24eb2:	d106      	bne.n	24ec2 <uarte_nrfx_irq_is_pending+0x2a>
}
   24eb4:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   24eb6:	f7ff ffb6 	bl	24e26 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   24eba:	2800      	cmp	r0, #0
   24ebc:	d0f5      	beq.n	24eaa <uarte_nrfx_irq_is_pending+0x12>
		||
   24ebe:	2001      	movs	r0, #1
   24ec0:	e7f8      	b.n	24eb4 <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   24ec2:	4610      	mov	r0, r2
   24ec4:	f7ff ffba 	bl	24e3c <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   24ec8:	3000      	adds	r0, #0
   24eca:	bf18      	it	ne
   24ecc:	2001      	movne	r0, #1
   24ece:	e7f1      	b.n	24eb4 <uarte_nrfx_irq_is_pending+0x1c>

00024ed0 <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   24ed0:	2000      	movs	r0, #0
   24ed2:	4770      	bx	lr

00024ed4 <entropy_cc310_rng_get_entropy>:
{
   24ed4:	b513      	push	{r0, r1, r4, lr}
   24ed6:	4614      	mov	r4, r2
   24ed8:	4608      	mov	r0, r1
	res = spm_request_random_number(buffer, length, &olen);
   24eda:	aa01      	add	r2, sp, #4
   24edc:	4621      	mov	r1, r4
   24ede:	f7e3 f887 	bl	7ff0 <spm_request_random_number>
	if (olen != length) {
   24ee2:	9b01      	ldr	r3, [sp, #4]
   24ee4:	429c      	cmp	r4, r3
}
   24ee6:	bf18      	it	ne
   24ee8:	f06f 0015 	mvnne.w	r0, #21
   24eec:	b002      	add	sp, #8
   24eee:	bd10      	pop	{r4, pc}

00024ef0 <z_errno>:
   24ef0:	f7fc be5e 	b.w	21bb0 <z_impl_z_errno>

00024ef4 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   24ef4:	4668      	mov	r0, sp
   24ef6:	f020 0107 	bic.w	r1, r0, #7
   24efa:	468d      	mov	sp, r1
   24efc:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   24efe:	f7f1 f899 	bl	16034 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   24f02:	f7eb f83b 	bl	ff7c <_arch_isr_direct_pm>
   24f06:	f7ea ff7b 	bl	fe00 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   24f0a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   24f0e:	4685      	mov	sp, r0
   24f10:	4770      	bx	lr

00024f12 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   24f12:	4668      	mov	r0, sp
   24f14:	f020 0107 	bic.w	r1, r0, #7
   24f18:	468d      	mov	sp, r1
   24f1a:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   24f1c:	f7ef fc12 	bl	14744 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   24f20:	f7eb f82c 	bl	ff7c <_arch_isr_direct_pm>
   24f24:	f7ea ff6c 	bl	fe00 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   24f28:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   24f2c:	4685      	mov	sp, r0
   24f2e:	4770      	bx	lr

00024f30 <trace_task_create>:
{
   24f30:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   24f32:	201d      	movs	r0, #29
   24f34:	2200      	movs	r2, #0
   24f36:	2106      	movs	r1, #6
   24f38:	f7eb f808 	bl	ff4c <z_arm_irq_priority_set>
}
   24f3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   24f40:	201d      	movs	r0, #29
   24f42:	f7ea bff3 	b.w	ff2c <arch_irq_enable>

00024f46 <read_task_create>:
{
   24f46:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   24f48:	201c      	movs	r0, #28
   24f4a:	2200      	movs	r2, #0
   24f4c:	2106      	movs	r1, #6
   24f4e:	f7ea fffd 	bl	ff4c <z_arm_irq_priority_set>
}
   24f52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   24f56:	201c      	movs	r0, #28
   24f58:	f7ea bfe8 	b.w	ff2c <arch_irq_enable>

00024f5c <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   24f5c:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   24f60:	bf18      	it	ne
   24f62:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   24f64:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   24f66:	bf48      	it	mi
   24f68:	f043 0308 	orrmi.w	r3, r3, #8
}
   24f6c:	4618      	mov	r0, r3
   24f6e:	4770      	bx	lr

00024f70 <z_to_nrf_family>:
	switch (z_family) {
   24f70:	2803      	cmp	r0, #3
   24f72:	d00f      	beq.n	24f94 <z_to_nrf_family+0x24>
   24f74:	d808      	bhi.n	24f88 <z_to_nrf_family+0x18>
   24f76:	2801      	cmp	r0, #1
   24f78:	d00e      	beq.n	24f98 <z_to_nrf_family+0x28>
   24f7a:	2802      	cmp	r0, #2
		return -EAFNOSUPPORT;
   24f7c:	bf08      	it	eq
   24f7e:	200a      	moveq	r0, #10
   24f80:	bf18      	it	ne
   24f82:	f06f 002e 	mvnne.w	r0, #46	; 0x2e
   24f86:	4770      	bx	lr
	switch (z_family) {
   24f88:	2866      	cmp	r0, #102	; 0x66
   24f8a:	d006      	beq.n	24f9a <z_to_nrf_family+0x2a>
   24f8c:	2867      	cmp	r0, #103	; 0x67
		return -EAFNOSUPPORT;
   24f8e:	bf08      	it	eq
   24f90:	2001      	moveq	r0, #1
   24f92:	e7f5      	b.n	24f80 <z_to_nrf_family+0x10>
		return NRF_AF_PACKET;
   24f94:	2005      	movs	r0, #5
   24f96:	4770      	bx	lr
		return NRF_AF_INET;
   24f98:	2002      	movs	r0, #2
}
   24f9a:	4770      	bx	lr

00024f9c <z_to_nrf_protocol>:
	switch (proto) {
   24f9c:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   24fa0:	d01d      	beq.n	24fde <z_to_nrf_protocol+0x42>
   24fa2:	dc08      	bgt.n	24fb6 <z_to_nrf_protocol+0x1a>
   24fa4:	2806      	cmp	r0, #6
   24fa6:	d01d      	beq.n	24fe4 <z_to_nrf_protocol+0x48>
   24fa8:	2811      	cmp	r0, #17
   24faa:	d01d      	beq.n	24fe8 <z_to_nrf_protocol+0x4c>
   24fac:	2800      	cmp	r0, #0
		return -EPROTONOSUPPORT;
   24fae:	bf18      	it	ne
   24fb0:	f06f 002a 	mvnne.w	r0, #42	; 0x2a
   24fb4:	4770      	bx	lr
	switch (proto) {
   24fb6:	f240 2301 	movw	r3, #513	; 0x201
   24fba:	4298      	cmp	r0, r3
   24fbc:	d015      	beq.n	24fea <z_to_nrf_protocol+0x4e>
   24fbe:	dc06      	bgt.n	24fce <z_to_nrf_protocol+0x32>
   24fc0:	f240 1311 	movw	r3, #273	; 0x111
   24fc4:	4298      	cmp	r0, r3
		return -EPROTONOSUPPORT;
   24fc6:	bf08      	it	eq
   24fc8:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   24fcc:	e7ef      	b.n	24fae <z_to_nrf_protocol+0x12>
	switch (proto) {
   24fce:	f240 2302 	movw	r3, #514	; 0x202
   24fd2:	4298      	cmp	r0, r3
   24fd4:	d009      	beq.n	24fea <z_to_nrf_protocol+0x4e>
   24fd6:	f240 2303 	movw	r3, #515	; 0x203
   24fda:	4298      	cmp	r0, r3
   24fdc:	e7e7      	b.n	24fae <z_to_nrf_protocol+0x12>
		return NRF_SPROTO_TLS1v2;
   24fde:	f44f 7082 	mov.w	r0, #260	; 0x104
   24fe2:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   24fe4:	2001      	movs	r0, #1
   24fe6:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   24fe8:	2002      	movs	r0, #2
}
   24fea:	4770      	bx	lr

00024fec <nrf91_bsdlib_socket_offload_init>:
}
   24fec:	2000      	movs	r0, #0
   24fee:	4770      	bx	lr

00024ff0 <z_errno>:
   24ff0:	f7fc bdde 	b.w	21bb0 <z_impl_z_errno>

00024ff4 <nrf91_socket_offload_freeaddrinfo>:
{
   24ff4:	b538      	push	{r3, r4, r5, lr}
   24ff6:	4604      	mov	r4, r0
	while (next != NULL) {
   24ff8:	b904      	cbnz	r4, 24ffc <nrf91_socket_offload_freeaddrinfo+0x8>
}
   24ffa:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   24ffc:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   24ffe:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   25000:	f000 fd15 	bl	25a2e <k_free>
		k_free(this);
   25004:	4620      	mov	r0, r4
   25006:	f000 fd12 	bl	25a2e <k_free>
		next = next->ai_next;
   2500a:	462c      	mov	r4, r5
   2500c:	e7f4      	b.n	24ff8 <nrf91_socket_offload_freeaddrinfo+0x4>

0002500e <z_to_nrf_addrinfo_hints>:
{
   2500e:	b538      	push	{r3, r4, r5, lr}
   25010:	460c      	mov	r4, r1
   25012:	4605      	mov	r5, r0
	memset(nrf_out, 0, sizeof(struct nrf_addrinfo));
   25014:	2220      	movs	r2, #32
   25016:	2100      	movs	r1, #0
   25018:	4620      	mov	r0, r4
   2501a:	f7ff fc04 	bl	24826 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   2501e:	2300      	movs	r3, #0
   25020:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   25022:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   25024:	2b03      	cmp	r3, #3
   25026:	d003      	beq.n	25030 <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   25028:	2b04      	cmp	r3, #4
   2502a:	bf08      	it	eq
   2502c:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   25030:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   25032:	88a8      	ldrh	r0, [r5, #4]
   25034:	f7ff ff9c 	bl	24f70 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   25038:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
   2503c:	d00b      	beq.n	25056 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   2503e:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   25040:	68e8      	ldr	r0, [r5, #12]
   25042:	f7ff ffab 	bl	24f9c <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   25046:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   2504a:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   2504c:	d003      	beq.n	25056 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   2504e:	69a8      	ldr	r0, [r5, #24]
   25050:	b108      	cbz	r0, 25056 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   25052:	61a0      	str	r0, [r4, #24]
	return 0;
   25054:	2000      	movs	r0, #0
}
   25056:	bd38      	pop	{r3, r4, r5, pc}

00025058 <nrf91_socket_offload_send>:
{
   25058:	b570      	push	{r4, r5, r6, lr}
   2505a:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   2505c:	4618      	mov	r0, r3
{
   2505e:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   25060:	f7ff ff7c 	bl	24f5c <z_to_nrf_flags>
   25064:	462a      	mov	r2, r5
   25066:	4603      	mov	r3, r0
   25068:	4620      	mov	r0, r4
}
   2506a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   2506e:	f7ef b929 	b.w	142c4 <nrf_send>

00025072 <nrf91_socket_offload_recv>:
{
   25072:	b570      	push	{r4, r5, r6, lr}
   25074:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   25076:	4618      	mov	r0, r3
{
   25078:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   2507a:	f7ff ff6f 	bl	24f5c <z_to_nrf_flags>
   2507e:	462a      	mov	r2, r5
   25080:	4603      	mov	r3, r0
   25082:	4620      	mov	r0, r4
}
   25084:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   25088:	f7ef b952 	b.w	14330 <nrf_recv>

0002508c <nrf91_socket_offload_getsockopt>:
{
   2508c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25090:	461d      	mov	r5, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   25092:	2300      	movs	r3, #0
{
   25094:	b086      	sub	sp, #24
   25096:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   2509a:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   2509e:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   250a2:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   250a6:	4607      	mov	r7, r0
   250a8:	460c      	mov	r4, r1
   250aa:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   250ac:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   250ae:	d002      	beq.n	250b6 <nrf91_socket_offload_getsockopt+0x2a>
   250b0:	dc2b      	bgt.n	2510a <nrf91_socket_offload_getsockopt+0x7e>
   250b2:	2901      	cmp	r1, #1
   250b4:	d13d      	bne.n	25132 <nrf91_socket_offload_getsockopt+0xa6>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   250b6:	aa02      	add	r2, sp, #8
   250b8:	4631      	mov	r1, r6
   250ba:	4620      	mov	r0, r4
   250bc:	f7ed f8f8 	bl	122b0 <z_to_nrf_optname>
   250c0:	2800      	cmp	r0, #0
   250c2:	db36      	blt.n	25132 <nrf91_socket_offload_getsockopt+0xa6>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   250c4:	2c01      	cmp	r4, #1
   250c6:	d128      	bne.n	2511a <nrf91_socket_offload_getsockopt+0x8e>
   250c8:	2e14      	cmp	r6, #20
   250ca:	d126      	bne.n	2511a <nrf91_socket_offload_getsockopt+0x8e>
		nrf_optlen = sizeof(struct nrf_timeval);
   250cc:	2308      	movs	r3, #8
   250ce:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   250d0:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   250d2:	aa03      	add	r2, sp, #12
   250d4:	9200      	str	r2, [sp, #0]
   250d6:	4638      	mov	r0, r7
   250d8:	9a02      	ldr	r2, [sp, #8]
   250da:	4621      	mov	r1, r4
   250dc:	f7ef f9a8 	bl	14430 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   250e0:	4607      	mov	r7, r0
   250e2:	b970      	cbnz	r0, 25102 <nrf91_socket_offload_getsockopt+0x76>
   250e4:	b16d      	cbz	r5, 25102 <nrf91_socket_offload_getsockopt+0x76>
		*optlen = nrf_optlen;
   250e6:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   250e8:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   250ea:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   250ee:	d108      	bne.n	25102 <nrf91_socket_offload_getsockopt+0x76>
			if (optname == SO_ERROR) {
   250f0:	2e04      	cmp	r6, #4
   250f2:	d114      	bne.n	2511e <nrf91_socket_offload_getsockopt+0x92>
				bsd_os_errno_set(*(int *)optval);
   250f4:	6828      	ldr	r0, [r5, #0]
   250f6:	f7ec ffbf 	bl	12078 <bsd_os_errno_set>
				*(int *)optval = errno;
   250fa:	f7ff ff79 	bl	24ff0 <z_errno>
   250fe:	6803      	ldr	r3, [r0, #0]
   25100:	602b      	str	r3, [r5, #0]
}
   25102:	4638      	mov	r0, r7
   25104:	b006      	add	sp, #24
   25106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   2510a:	f240 2302 	movw	r3, #514	; 0x202
   2510e:	4299      	cmp	r1, r3
   25110:	d0d1      	beq.n	250b6 <nrf91_socket_offload_getsockopt+0x2a>
   25112:	f240 2303 	movw	r3, #515	; 0x203
   25116:	4299      	cmp	r1, r3
   25118:	e7cc      	b.n	250b4 <nrf91_socket_offload_getsockopt+0x28>
   2511a:	462b      	mov	r3, r5
   2511c:	e7d9      	b.n	250d2 <nrf91_socket_offload_getsockopt+0x46>
			} else if (optname == SO_RCVTIMEO) {
   2511e:	2e14      	cmp	r6, #20
   25120:	d1ef      	bne.n	25102 <nrf91_socket_offload_getsockopt+0x76>
				((struct timeval *)optval)->tv_sec =
   25122:	9b04      	ldr	r3, [sp, #16]
   25124:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   25126:	9b05      	ldr	r3, [sp, #20]
   25128:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   2512a:	2308      	movs	r3, #8
   2512c:	f8c8 3000 	str.w	r3, [r8]
   25130:	e7e7      	b.n	25102 <nrf91_socket_offload_getsockopt+0x76>
	errno = ENOPROTOOPT;
   25132:	f7ff ff5d 	bl	24ff0 <z_errno>
   25136:	232a      	movs	r3, #42	; 0x2a
	return retval;
   25138:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	errno = ENOPROTOOPT;
   2513c:	6003      	str	r3, [r0, #0]
	return retval;
   2513e:	e7e0      	b.n	25102 <nrf91_socket_offload_getsockopt+0x76>

00025140 <nrf91_socket_offload_poll>:
{
   25140:	b5f0      	push	{r4, r5, r6, r7, lr}
   25142:	b091      	sub	sp, #68	; 0x44
   25144:	4605      	mov	r5, r0
   25146:	460c      	mov	r4, r1
   25148:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   2514a:	2100      	movs	r1, #0
   2514c:	2240      	movs	r2, #64	; 0x40
   2514e:	4668      	mov	r0, sp
   25150:	f7ff fb69 	bl	24826 <memset>
	for (int i = 0; i < nfds; i++) {
   25154:	466a      	mov	r2, sp
   25156:	2100      	movs	r1, #0
		if (fds[i].events & POLLIN) {
   25158:	1d2f      	adds	r7, r5, #4
	for (int i = 0; i < nfds; i++) {
   2515a:	42a1      	cmp	r1, r4
   2515c:	db0c      	blt.n	25178 <nrf91_socket_offload_poll+0x38>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   2515e:	4632      	mov	r2, r6
   25160:	4621      	mov	r1, r4
   25162:	4668      	mov	r0, sp
   25164:	f7ef f984 	bl	14470 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   25168:	2200      	movs	r2, #0
   2516a:	462b      	mov	r3, r5
		fds[i].revents = 0;
   2516c:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   2516e:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   25170:	42a2      	cmp	r2, r4
   25172:	db1a      	blt.n	251aa <nrf91_socket_offload_poll+0x6a>
}
   25174:	b011      	add	sp, #68	; 0x44
   25176:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   25178:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   2517c:	f837 0031 	ldrh.w	r0, [r7, r1, lsl #3]
		tmp[i].handle = fds[i].fd;
   25180:	6013      	str	r3, [r2, #0]
		if (fds[i].events & POLLIN) {
   25182:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   25184:	bf48      	it	mi
   25186:	8893      	ldrhmi	r3, [r2, #4]
	for (int i = 0; i < nfds; i++) {
   25188:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   2518c:	bf44      	itt	mi
   2518e:	f043 0301 	orrmi.w	r3, r3, #1
   25192:	8093      	strhmi	r3, [r2, #4]
		if (fds[i].events & POLLOUT) {
   25194:	0743      	lsls	r3, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   25196:	bf48      	it	mi
   25198:	8893      	ldrhmi	r3, [r2, #4]
   2519a:	f102 0208 	add.w	r2, r2, #8
   2519e:	bf44      	itt	mi
   251a0:	f043 0302 	orrmi.w	r3, r3, #2
   251a4:	f822 3c04 	strhmi.w	r3, [r2, #-4]
   251a8:	e7d7      	b.n	2515a <nrf91_socket_offload_poll+0x1a>
		if (tmp[i].returned & NRF_POLLIN) {
   251aa:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   251ae:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   251b0:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   251b2:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   251b4:	bf48      	it	mi
   251b6:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   251b8:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   251ba:	bf48      	it	mi
   251bc:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   251be:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   251c2:	bf44      	itt	mi
   251c4:	f045 0504 	orrmi.w	r5, r5, #4
   251c8:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   251ca:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   251cc:	bf48      	it	mi
   251ce:	88dd      	ldrhmi	r5, [r3, #6]
   251d0:	f103 0308 	add.w	r3, r3, #8
   251d4:	bf44      	itt	mi
   251d6:	f045 0508 	orrmi.w	r5, r5, #8
   251da:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   251de:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   251e0:	bf42      	ittt	mi
   251e2:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   251e6:	f045 0520 	orrmi.w	r5, r5, #32
   251ea:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   251ee:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   251f0:	bf42      	ittt	mi
   251f2:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   251f6:	f041 0110 	orrmi.w	r1, r1, #16
   251fa:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   251fe:	e7b7      	b.n	25170 <nrf91_socket_offload_poll+0x30>

00025200 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   25200:	f7ef b8c2 	b.w	14388 <nrf_listen>

00025204 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   25204:	f7ef b834 	b.w	14270 <nrf_close>

00025208 <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   25208:	2903      	cmp	r1, #3
{
   2520a:	b508      	push	{r3, lr}
	switch (cmd) {
   2520c:	d00b      	beq.n	25226 <nrf91_socket_offload_fcntl+0x1e>
   2520e:	2904      	cmp	r1, #4
   25210:	d111      	bne.n	25236 <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   25212:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   25214:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   25218:	d10d      	bne.n	25236 <nrf91_socket_offload_fcntl+0x2e>
}
   2521a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   2521e:	1392      	asrs	r2, r2, #14
   25220:	2101      	movs	r1, #1
   25222:	f7ef b927 	b.w	14474 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   25226:	2200      	movs	r2, #0
   25228:	2102      	movs	r1, #2
   2522a:	f7ef f923 	bl	14474 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   2522e:	0380      	lsls	r0, r0, #14
   25230:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   25234:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   25236:	f7ff fedb 	bl	24ff0 <z_errno>
   2523a:	2316      	movs	r3, #22
   2523c:	6003      	str	r3, [r0, #0]
	return retval;
   2523e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25242:	e7f7      	b.n	25234 <nrf91_socket_offload_fcntl+0x2c>

00025244 <nrf91_socket_offload_recvfrom>:
{
   25244:	b5f0      	push	{r4, r5, r6, r7, lr}
   25246:	4605      	mov	r5, r0
   25248:	b08d      	sub	sp, #52	; 0x34
   2524a:	4618      	mov	r0, r3
   2524c:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   25250:	4617      	mov	r7, r2
	if (from == NULL) {
   25252:	f7ff fe83 	bl	24f5c <z_to_nrf_flags>
   25256:	4603      	mov	r3, r0
   25258:	b94c      	cbnz	r4, 2526e <nrf91_socket_offload_recvfrom+0x2a>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   2525a:	4628      	mov	r0, r5
   2525c:	e9cd 4400 	strd	r4, r4, [sp]
   25260:	463a      	mov	r2, r7
   25262:	f7ef f849 	bl	142f8 <nrf_recvfrom>
   25266:	4605      	mov	r5, r0
}
   25268:	4628      	mov	r0, r5
   2526a:	b00d      	add	sp, #52	; 0x34
   2526c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   2526e:	2224      	movs	r2, #36	; 0x24
   25270:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   25272:	aa02      	add	r2, sp, #8
   25274:	9201      	str	r2, [sp, #4]
   25276:	aa03      	add	r2, sp, #12
   25278:	9200      	str	r2, [sp, #0]
   2527a:	4628      	mov	r0, r5
   2527c:	463a      	mov	r2, r7
   2527e:	f7ef f83b 	bl	142f8 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   25282:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   25284:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   25286:	2b02      	cmp	r3, #2
   25288:	d109      	bne.n	2529e <nrf91_socket_offload_recvfrom+0x5a>
	ptr->sin_port = nrf_in->sin_port;
   2528a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   2528e:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   25290:	2301      	movs	r3, #1
   25292:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   25294:	9b06      	ldr	r3, [sp, #24]
   25296:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   25298:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   2529a:	6033      	str	r3, [r6, #0]
	return retval;
   2529c:	e7e4      	b.n	25268 <nrf91_socket_offload_recvfrom+0x24>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   2529e:	2b0a      	cmp	r3, #10
   252a0:	d1e2      	bne.n	25268 <nrf91_socket_offload_recvfrom+0x24>
	ptr->sin6_port = nrf_in->sin6_port;
   252a2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	ptr->sin6_family = AF_INET6;
   252a6:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   252a8:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   252aa:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   252ac:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   252ae:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   252b2:	a907      	add	r1, sp, #28
   252b4:	f7ff fa8d 	bl	247d2 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   252b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   252ba:	7523      	strb	r3, [r4, #20]
			*fromlen = sizeof(struct sockaddr_in6);
   252bc:	2318      	movs	r3, #24
   252be:	e7ec      	b.n	2529a <nrf91_socket_offload_recvfrom+0x56>

000252c0 <nrf91_socket_offload_connect>:
{
   252c0:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   252c2:	880b      	ldrh	r3, [r1, #0]
{
   252c4:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   252c6:	2b01      	cmp	r3, #1
{
   252c8:	4606      	mov	r6, r0
   252ca:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   252cc:	d10e      	bne.n	252ec <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   252ce:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   252d0:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   252d2:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   252d6:	2302      	movs	r3, #2
   252d8:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   252da:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   252dc:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   252e0:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   252e2:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   252e4:	f7ef f83e 	bl	14364 <nrf_connect>
}
   252e8:	b00a      	add	sp, #40	; 0x28
   252ea:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   252ec:	2b02      	cmp	r3, #2
   252ee:	d112      	bne.n	25316 <nrf91_socket_offload_connect+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   252f0:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   252f2:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   252f4:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   252f8:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   252fa:	2210      	movs	r2, #16
   252fc:	3104      	adds	r1, #4
   252fe:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   25300:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   25302:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   25306:	f7ff fa64 	bl	247d2 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   2530a:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   2530c:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   2530e:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   25310:	a901      	add	r1, sp, #4
   25312:	4630      	mov	r0, r6
   25314:	e7e6      	b.n	252e4 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   25316:	f7ef f825 	bl	14364 <nrf_connect>
		if (retval < 0) {
   2531a:	2800      	cmp	r0, #0
   2531c:	dae4      	bge.n	252e8 <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   2531e:	f7ff fe67 	bl	24ff0 <z_errno>
   25322:	2323      	movs	r3, #35	; 0x23
   25324:	6003      	str	r3, [r0, #0]
   25326:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2532a:	e7dd      	b.n	252e8 <nrf91_socket_offload_connect+0x28>

0002532c <nrf91_socket_offload_socket>:
{
   2532c:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   2532e:	b280      	uxth	r0, r0
   25330:	f7ff fe1e 	bl	24f70 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   25334:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
	family = z_to_nrf_family(family);
   25338:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   2533a:	d106      	bne.n	2534a <nrf91_socket_offload_socket+0x1e>
		errno = EAFNOSUPPORT;
   2533c:	f7ff fe58 	bl	24ff0 <z_errno>
   25340:	232f      	movs	r3, #47	; 0x2f
		errno = EPROTONOSUPPORT;
   25342:	6003      	str	r3, [r0, #0]
}
   25344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25348:	bd10      	pop	{r4, pc}
	switch (socktype) {
   2534a:	2903      	cmp	r1, #3
   2534c:	d003      	beq.n	25356 <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   2534e:	2904      	cmp	r1, #4
   25350:	bf08      	it	eq
   25352:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   25356:	4610      	mov	r0, r2
   25358:	f7ff fe20 	bl	24f9c <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   2535c:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	proto = z_to_nrf_protocol(proto);
   25360:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   25362:	d103      	bne.n	2536c <nrf91_socket_offload_socket+0x40>
		errno = EPROTONOSUPPORT;
   25364:	f7ff fe44 	bl	24ff0 <z_errno>
   25368:	232b      	movs	r3, #43	; 0x2b
   2536a:	e7ea      	b.n	25342 <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   2536c:	4620      	mov	r0, r4
}
   2536e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   25372:	f7ee bf6b 	b.w	1424c <nrf_socket>

00025376 <nrf91_socket_offload_accept>:
{
   25376:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   25378:	2708      	movs	r7, #8
{
   2537a:	b085      	sub	sp, #20
   2537c:	460c      	mov	r4, r1
   2537e:	4616      	mov	r6, r2
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   25380:	eb0d 0107 	add.w	r1, sp, r7
   25384:	aa01      	add	r2, sp, #4
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   25386:	9701      	str	r7, [sp, #4]
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   25388:	f7ef f80e 	bl	143a8 <nrf_accept>
	if (retval < 0) {
   2538c:	1e05      	subs	r5, r0, #0
   2538e:	db23      	blt.n	253d8 <nrf91_socket_offload_accept+0x62>
	if (nrf_addr.sa_family == NRF_AF_INET) {
   25390:	9b03      	ldr	r3, [sp, #12]
   25392:	2b02      	cmp	r3, #2
   25394:	d10a      	bne.n	253ac <nrf91_socket_offload_accept+0x36>
	ptr->sin_port = nrf_in->sin_port;
   25396:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		*addrlen = sizeof(struct sockaddr_in);
   2539a:	6037      	str	r7, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   2539c:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   2539e:	2301      	movs	r3, #1
   253a0:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   253a2:	9b05      	ldr	r3, [sp, #20]
   253a4:	6063      	str	r3, [r4, #4]
}
   253a6:	4628      	mov	r0, r5
   253a8:	b005      	add	sp, #20
   253aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (nrf_addr.sa_family == NRF_AF_INET6) {
   253ac:	2b0a      	cmp	r3, #10
   253ae:	d10f      	bne.n	253d0 <nrf91_socket_offload_accept+0x5a>
		*addrlen = sizeof(struct sockaddr_in6);
   253b0:	2318      	movs	r3, #24
   253b2:	6033      	str	r3, [r6, #0]
	ptr->sin6_port = nrf_in->sin6_port;
   253b4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	ptr->sin6_family = AF_INET6;
   253b8:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   253ba:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   253bc:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   253be:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   253c0:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   253c4:	a906      	add	r1, sp, #24
   253c6:	f7ff fa04 	bl	247d2 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   253ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   253cc:	7523      	strb	r3, [r4, #20]
   253ce:	e7ea      	b.n	253a6 <nrf91_socket_offload_accept+0x30>
	errno = ENOTSUP;
   253d0:	f7ff fe0e 	bl	24ff0 <z_errno>
   253d4:	2323      	movs	r3, #35	; 0x23
   253d6:	6003      	str	r3, [r0, #0]
		return -1;
   253d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   253dc:	e7e3      	b.n	253a6 <nrf91_socket_offload_accept+0x30>

000253de <nrf91_socket_offload_getaddrinfo>:
{
   253de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   253e2:	4614      	mov	r4, r2
   253e4:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   253e6:	2100      	movs	r1, #0
{
   253e8:	b093      	sub	sp, #76	; 0x4c
   253ea:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   253ec:	2220      	movs	r2, #32
   253ee:	a802      	add	r0, sp, #8
{
   253f0:	4698      	mov	r8, r3
	struct nrf_addrinfo *nrf_res = NULL;
   253f2:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   253f4:	f7ff fa17 	bl	24826 <memset>
	if (hints != NULL) {
   253f8:	b194      	cbz	r4, 25420 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   253fa:	a902      	add	r1, sp, #8
   253fc:	4620      	mov	r0, r4
   253fe:	f7ff fe06 	bl	2500e <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   25402:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
   25406:	f000 80bf 	beq.w	25588 <nrf91_socket_offload_getaddrinfo+0x1aa>
		} else if (error == -EAFNOSUPPORT) {
   2540a:	302f      	adds	r0, #47	; 0x2f
   2540c:	f000 80bf 	beq.w	2558e <nrf91_socket_offload_getaddrinfo+0x1b0>
		if (hints->ai_next != NULL) {
   25410:	69e0      	ldr	r0, [r4, #28]
   25412:	b120      	cbz	r0, 2541e <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   25414:	ac0a      	add	r4, sp, #40	; 0x28
   25416:	4621      	mov	r1, r4
   25418:	f7ff fdf9 	bl	2500e <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   2541c:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   2541e:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   25420:	4631      	mov	r1, r6
   25422:	4628      	mov	r0, r5
   25424:	ab01      	add	r3, sp, #4
   25426:	4622      	mov	r2, r4
   25428:	f7ef f81e 	bl	14468 <nrf_getaddrinfo>
	*res = NULL;
   2542c:	2700      	movs	r7, #0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   2542e:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   25430:	f8c8 7000 	str.w	r7, [r8]
		return AF_INET6;
   25434:	f04f 0902 	mov.w	r9, #2
	while ((retval == 0) && (next_nrf_res != NULL)) {
   25438:	4605      	mov	r5, r0
   2543a:	2800      	cmp	r0, #0
   2543c:	d04a      	beq.n	254d4 <nrf91_socket_offload_getaddrinfo+0xf6>
		nrf91_socket_offload_freeaddrinfo(*res);
   2543e:	f8d8 0000 	ldr.w	r0, [r8]
   25442:	f7ff fdd7 	bl	24ff4 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   25446:	2300      	movs	r3, #0
   25448:	f8c8 3000 	str.w	r3, [r8]
   2544c:	e044      	b.n	254d8 <nrf91_socket_offload_getaddrinfo+0xfa>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   2544e:	2020      	movs	r0, #32
   25450:	f7fc fe14 	bl	2207c <k_malloc>
		if (next_z_res == NULL) {
   25454:	4604      	mov	r4, r0
   25456:	2800      	cmp	r0, #0
   25458:	f000 8091 	beq.w	2557e <nrf91_socket_offload_getaddrinfo+0x1a0>
	family = nrf_to_z_family(nrf_in->ai_family);
   2545c:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   2545e:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   25460:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   25462:	e9c0 5506 	strd	r5, r5, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   25466:	6005      	str	r5, [r0, #0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   25468:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   2546a:	d03c      	beq.n	254e6 <nrf91_socket_offload_getaddrinfo+0x108>
   2546c:	dc09      	bgt.n	25482 <nrf91_socket_offload_getaddrinfo+0xa4>
   2546e:	2a01      	cmp	r2, #1
   25470:	d03b      	beq.n	254ea <nrf91_socket_offload_getaddrinfo+0x10c>
   25472:	2a02      	cmp	r2, #2
   25474:	d03b      	beq.n	254ee <nrf91_socket_offload_getaddrinfo+0x110>
			k_free(next_z_res);
   25476:	4620      	mov	r0, r4
   25478:	f000 fad9 	bl	25a2e <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   2547c:	f06f 0508 	mvn.w	r5, #8
   25480:	e7dd      	b.n	2543e <nrf91_socket_offload_getaddrinfo+0x60>
	switch (nrf_family) {
   25482:	2a0a      	cmp	r2, #10
   25484:	d035      	beq.n	254f2 <nrf91_socket_offload_getaddrinfo+0x114>
   25486:	2a66      	cmp	r2, #102	; 0x66
   25488:	d1f5      	bne.n	25476 <nrf91_socket_offload_getaddrinfo+0x98>
		return AF_LTE;
   2548a:	4613      	mov	r3, r2
	z_out->ai_family = family;
   2548c:	6063      	str	r3, [r4, #4]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2548e:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   25490:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   25494:	d04e      	beq.n	25534 <nrf91_socket_offload_getaddrinfo+0x156>
   25496:	dc2e      	bgt.n	254f6 <nrf91_socket_offload_getaddrinfo+0x118>
   25498:	2b01      	cmp	r3, #1
   2549a:	d050      	beq.n	2553e <nrf91_socket_offload_getaddrinfo+0x160>
   2549c:	2b02      	cmp	r3, #2
   2549e:	d04c      	beq.n	2553a <nrf91_socket_offload_getaddrinfo+0x15c>
   254a0:	2b00      	cmp	r3, #0
   254a2:	d130      	bne.n	25506 <nrf91_socket_offload_getaddrinfo+0x128>
	if (nrf_in->ai_family == NRF_AF_INET) {
   254a4:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   254a6:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   254a8:	d14b      	bne.n	25542 <nrf91_socket_offload_getaddrinfo+0x164>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   254aa:	2008      	movs	r0, #8
   254ac:	f7fc fde6 	bl	2207c <k_malloc>
   254b0:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   254b2:	2800      	cmp	r0, #0
   254b4:	d060      	beq.n	25578 <nrf91_socket_offload_getaddrinfo+0x19a>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   254b6:	2308      	movs	r3, #8
   254b8:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   254ba:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   254bc:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   254be:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   254c0:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   254c2:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   254c4:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   254c6:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   254c8:	2f00      	cmp	r7, #0
   254ca:	d15b      	bne.n	25584 <nrf91_socket_offload_getaddrinfo+0x1a6>
			*res = next_z_res;
   254cc:	f8c8 4000 	str.w	r4, [r8]
		next_nrf_res = next_nrf_res->ai_next;
   254d0:	4627      	mov	r7, r4
   254d2:	69f6      	ldr	r6, [r6, #28]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   254d4:	2e00      	cmp	r6, #0
   254d6:	d1ba      	bne.n	2544e <nrf91_socket_offload_getaddrinfo+0x70>
	nrf_freeaddrinfo(nrf_res);
   254d8:	9801      	ldr	r0, [sp, #4]
   254da:	f7ee ffc7 	bl	1446c <nrf_freeaddrinfo>
}
   254de:	4628      	mov	r0, r5
   254e0:	b013      	add	sp, #76	; 0x4c
   254e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return AF_PACKET;
   254e6:	2303      	movs	r3, #3
   254e8:	e7d0      	b.n	2548c <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_LOCAL;
   254ea:	2367      	movs	r3, #103	; 0x67
   254ec:	e7ce      	b.n	2548c <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_INET;
   254ee:	2301      	movs	r3, #1
   254f0:	e7cc      	b.n	2548c <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_INET6;
   254f2:	2302      	movs	r3, #2
   254f4:	e7ca      	b.n	2548c <nrf91_socket_offload_getaddrinfo+0xae>
	switch (proto) {
   254f6:	f240 2101 	movw	r1, #513	; 0x201
   254fa:	428b      	cmp	r3, r1
   254fc:	d0d2      	beq.n	254a4 <nrf91_socket_offload_getaddrinfo+0xc6>
   254fe:	dc0d      	bgt.n	2551c <nrf91_socket_offload_getaddrinfo+0x13e>
   25500:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   25504:	d013      	beq.n	2552e <nrf91_socket_offload_getaddrinfo+0x150>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   25506:	f06f 032a 	mvn.w	r3, #42	; 0x2a
   2550a:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   2550c:	2300      	movs	r3, #0
   2550e:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   25510:	4620      	mov	r0, r4
   25512:	f000 fa8c 	bl	25a2e <k_free>
			retval = DNS_EAI_SOCKTYPE;
   25516:	f06f 0506 	mvn.w	r5, #6
   2551a:	e790      	b.n	2543e <nrf91_socket_offload_getaddrinfo+0x60>
	switch (proto) {
   2551c:	f240 2102 	movw	r1, #514	; 0x202
   25520:	428b      	cmp	r3, r1
   25522:	d0bf      	beq.n	254a4 <nrf91_socket_offload_getaddrinfo+0xc6>
   25524:	f240 2103 	movw	r1, #515	; 0x203
   25528:	428b      	cmp	r3, r1
   2552a:	d0bb      	beq.n	254a4 <nrf91_socket_offload_getaddrinfo+0xc6>
   2552c:	e7eb      	b.n	25506 <nrf91_socket_offload_getaddrinfo+0x128>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2552e:	f240 1311 	movw	r3, #273	; 0x111
   25532:	e7b7      	b.n	254a4 <nrf91_socket_offload_getaddrinfo+0xc6>
   25534:	f44f 7381 	mov.w	r3, #258	; 0x102
   25538:	e7b4      	b.n	254a4 <nrf91_socket_offload_getaddrinfo+0xc6>
   2553a:	2311      	movs	r3, #17
   2553c:	e7b2      	b.n	254a4 <nrf91_socket_offload_getaddrinfo+0xc6>
   2553e:	2306      	movs	r3, #6
   25540:	e7b0      	b.n	254a4 <nrf91_socket_offload_getaddrinfo+0xc6>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   25542:	2a0a      	cmp	r2, #10
   25544:	d1e4      	bne.n	25510 <nrf91_socket_offload_getaddrinfo+0x132>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   25546:	2018      	movs	r0, #24
   25548:	f7fc fd98 	bl	2207c <k_malloc>
   2554c:	4682      	mov	sl, r0
   2554e:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   25550:	b190      	cbz	r0, 25578 <nrf91_socket_offload_getaddrinfo+0x19a>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   25552:	2318      	movs	r3, #24
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   25554:	2210      	movs	r2, #16
			(const struct nrf_sockaddr_in6 *)nrf_in->ai_addr);
   25556:	f8d6 b014 	ldr.w	fp, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   2555a:	6123      	str	r3, [r4, #16]
	ptr->sin6_port = nrf_in->sin6_port;
   2555c:	f8bb 3008 	ldrh.w	r3, [fp, #8]
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   25560:	eb0b 0102 	add.w	r1, fp, r2
	ptr->sin6_port = nrf_in->sin6_port;
   25564:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   25566:	f820 9b04 	strh.w	r9, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   2556a:	f7ff f932 	bl	247d2 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   2556e:	f8db 3020 	ldr.w	r3, [fp, #32]
   25572:	f88a 3014 	strb.w	r3, [sl, #20]
		} else if (error == -EAFNOSUPPORT) {
   25576:	e7a7      	b.n	254c8 <nrf91_socket_offload_getaddrinfo+0xea>
			k_free(next_z_res);
   25578:	4620      	mov	r0, r4
   2557a:	f000 fa58 	bl	25a2e <k_free>
			retval = DNS_EAI_MEMORY;
   2557e:	f06f 0509 	mvn.w	r5, #9
   25582:	e75c      	b.n	2543e <nrf91_socket_offload_getaddrinfo+0x60>
			latest_z_res->ai_next = next_z_res;
   25584:	61fc      	str	r4, [r7, #28]
   25586:	e7a3      	b.n	254d0 <nrf91_socket_offload_getaddrinfo+0xf2>
			return DNS_EAI_SOCKTYPE;
   25588:	f06f 0506 	mvn.w	r5, #6
   2558c:	e7a7      	b.n	254de <nrf91_socket_offload_getaddrinfo+0x100>
			return DNS_EAI_ADDRFAMILY;
   2558e:	f06f 0508 	mvn.w	r5, #8
   25592:	e7a4      	b.n	254de <nrf91_socket_offload_getaddrinfo+0x100>

00025594 <nrf91_socket_offload_setsockopt>:
{
   25594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   25598:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   2559c:	b086      	sub	sp, #24
   2559e:	4680      	mov	r8, r0
   255a0:	460c      	mov	r4, r1
   255a2:	4617      	mov	r7, r2
   255a4:	461d      	mov	r5, r3
   255a6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   255a8:	d002      	beq.n	255b0 <nrf91_socket_offload_setsockopt+0x1c>
   255aa:	dc1c      	bgt.n	255e6 <nrf91_socket_offload_setsockopt+0x52>
   255ac:	2901      	cmp	r1, #1
   255ae:	d122      	bne.n	255f6 <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   255b0:	aa03      	add	r2, sp, #12
   255b2:	4639      	mov	r1, r7
   255b4:	4620      	mov	r0, r4
   255b6:	f7ec fe7b 	bl	122b0 <z_to_nrf_optname>
   255ba:	2800      	cmp	r0, #0
   255bc:	db1b      	blt.n	255f6 <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   255be:	2c01      	cmp	r4, #1
   255c0:	d107      	bne.n	255d2 <nrf91_socket_offload_setsockopt+0x3e>
   255c2:	2f14      	cmp	r7, #20
   255c4:	d105      	bne.n	255d2 <nrf91_socket_offload_setsockopt+0x3e>
		nrf_optlen = sizeof(struct nrf_timeval);
   255c6:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   255c8:	682b      	ldr	r3, [r5, #0]
   255ca:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   255cc:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   255ce:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   255d0:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   255d2:	9600      	str	r6, [sp, #0]
   255d4:	462b      	mov	r3, r5
   255d6:	9a03      	ldr	r2, [sp, #12]
   255d8:	4621      	mov	r1, r4
   255da:	4640      	mov	r0, r8
   255dc:	f7ee ff0c 	bl	143f8 <nrf_setsockopt>
}
   255e0:	b006      	add	sp, #24
   255e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   255e6:	f240 2302 	movw	r3, #514	; 0x202
   255ea:	4299      	cmp	r1, r3
   255ec:	d0e0      	beq.n	255b0 <nrf91_socket_offload_setsockopt+0x1c>
   255ee:	f240 2303 	movw	r3, #515	; 0x203
   255f2:	4299      	cmp	r1, r3
   255f4:	e7db      	b.n	255ae <nrf91_socket_offload_setsockopt+0x1a>
	errno = ENOPROTOOPT;
   255f6:	f7ff fcfb 	bl	24ff0 <z_errno>
   255fa:	232a      	movs	r3, #42	; 0x2a
   255fc:	6003      	str	r3, [r0, #0]
   255fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25602:	e7ed      	b.n	255e0 <nrf91_socket_offload_setsockopt+0x4c>

00025604 <nrf91_socket_offload_sendto>:
{
   25604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25608:	b08d      	sub	sp, #52	; 0x34
   2560a:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2560c:	4605      	mov	r5, r0
   2560e:	460e      	mov	r6, r1
   25610:	4617      	mov	r7, r2
   25612:	4698      	mov	r8, r3
	if (to == NULL) {
   25614:	b96c      	cbnz	r4, 25632 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   25616:	4618      	mov	r0, r3
   25618:	f7ff fca0 	bl	24f5c <z_to_nrf_flags>
   2561c:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   25620:	4603      	mov	r3, r0
   25622:	463a      	mov	r2, r7
   25624:	4631      	mov	r1, r6
   25626:	4628      	mov	r0, r5
   25628:	f7ee fe30 	bl	1428c <nrf_sendto>
}
   2562c:	b00d      	add	sp, #52	; 0x34
   2562e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   25632:	8823      	ldrh	r3, [r4, #0]
   25634:	2b01      	cmp	r3, #1
   25636:	d110      	bne.n	2565a <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   25638:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2563a:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   2563c:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   25640:	2302      	movs	r3, #2
   25642:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   25644:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   25646:	4640      	mov	r0, r8
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   25648:	f88d 100c 	strb.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2564c:	9306      	str	r3, [sp, #24]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   2564e:	f7ff fc85 	bl	24f5c <z_to_nrf_flags>
   25652:	9101      	str	r1, [sp, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   25654:	ab03      	add	r3, sp, #12
   25656:	9300      	str	r3, [sp, #0]
   25658:	e7e2      	b.n	25620 <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   2565a:	2b02      	cmp	r3, #2
   2565c:	d115      	bne.n	2568a <nrf91_socket_offload_sendto+0x86>
	nrf_out->sin6_port = ptr->sin6_port;
   2565e:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   25660:	f04f 0924 	mov.w	r9, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   25664:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin6_family = NRF_AF_INET6;
   25668:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   2566a:	2210      	movs	r2, #16
   2566c:	1d21      	adds	r1, r4, #4
   2566e:	a807      	add	r0, sp, #28
	nrf_out->sin6_family = NRF_AF_INET6;
   25670:	9304      	str	r3, [sp, #16]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   25672:	f88d 900c 	strb.w	r9, [sp, #12]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   25676:	f7ff f8ac 	bl	247d2 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   2567a:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   2567c:	4640      	mov	r0, r8
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   2567e:	930b      	str	r3, [sp, #44]	; 0x2c
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   25680:	f7ff fc6c 	bl	24f5c <z_to_nrf_flags>
   25684:	f8cd 9004 	str.w	r9, [sp, #4]
   25688:	e7e4      	b.n	25654 <nrf91_socket_offload_sendto+0x50>
	errno = ENOTSUP;
   2568a:	f7ff fcb1 	bl	24ff0 <z_errno>
   2568e:	2323      	movs	r3, #35	; 0x23
   25690:	6003      	str	r3, [r0, #0]
	return retval;
   25692:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25696:	e7c9      	b.n	2562c <nrf91_socket_offload_sendto+0x28>

00025698 <nrf91_socket_offload_bind>:
{
   25698:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   2569a:	880b      	ldrh	r3, [r1, #0]
{
   2569c:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   2569e:	2b01      	cmp	r3, #1
{
   256a0:	4606      	mov	r6, r0
   256a2:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   256a4:	d10e      	bne.n	256c4 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   256a6:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   256a8:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   256aa:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   256ae:	2302      	movs	r3, #2
   256b0:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   256b2:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   256b4:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   256b8:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   256ba:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   256bc:	f7ee fe8a 	bl	143d4 <nrf_bind>
}
   256c0:	b00a      	add	sp, #40	; 0x28
   256c2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   256c4:	2b02      	cmp	r3, #2
   256c6:	d112      	bne.n	256ee <nrf91_socket_offload_bind+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   256c8:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   256ca:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   256cc:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   256d0:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   256d2:	2210      	movs	r2, #16
   256d4:	3104      	adds	r1, #4
   256d6:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   256d8:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   256da:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   256de:	f7ff f878 	bl	247d2 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   256e2:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   256e4:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   256e6:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   256e8:	a901      	add	r1, sp, #4
   256ea:	4630      	mov	r0, r6
   256ec:	e7e6      	b.n	256bc <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   256ee:	f7ff fc7f 	bl	24ff0 <z_errno>
   256f2:	2323      	movs	r3, #35	; 0x23
   256f4:	6003      	str	r3, [r0, #0]
   256f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   256fa:	e7e1      	b.n	256c0 <nrf91_socket_offload_bind+0x28>

000256fc <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   256fc:	280d      	cmp	r0, #13
   256fe:	d004      	beq.n	2570a <is_lfcr+0xe>
   25700:	f1a0 030a 	sub.w	r3, r0, #10
   25704:	4258      	negs	r0, r3
   25706:	4158      	adcs	r0, r3
   25708:	4770      	bx	lr
		return true;
   2570a:	2001      	movs	r0, #1
}
   2570c:	4770      	bx	lr

0002570e <skip_command_prefix>:
{
   2570e:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   25710:	6802      	ldr	r2, [r0, #0]
{
   25712:	4601      	mov	r1, r0
	*cmd += sizeof("AT") - 1;
   25714:	1c93      	adds	r3, r2, #2
   25716:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   25718:	7894      	ldrb	r4, [r2, #2]
   2571a:	4620      	mov	r0, r4
   2571c:	f7ff ffee 	bl	256fc <is_lfcr>
   25720:	b910      	cbnz	r0, 25728 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   25722:	b10c      	cbz	r4, 25728 <skip_command_prefix+0x1a>
	(*cmd)++;
   25724:	3203      	adds	r2, #3
   25726:	600a      	str	r2, [r1, #0]
}
   25728:	bd10      	pop	{r4, pc}

0002572a <is_valid_notification_char>:
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
}

static inline int toupper(int chr)
{
	return (int)((chr >= (int)'a' && chr <=
   2572a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   2572e:	2b19      	cmp	r3, #25
   25730:	bf98      	it	ls
   25732:	3820      	subls	r0, #32
	if ((chr >= 'A') && (chr <= 'Z')) {
   25734:	3841      	subs	r0, #65	; 0x41
   25736:	b2c0      	uxtb	r0, r0
}
   25738:	2819      	cmp	r0, #25
   2573a:	bf8c      	ite	hi
   2573c:	2000      	movhi	r0, #0
   2573e:	2001      	movls	r0, #1
   25740:	4770      	bx	lr

00025742 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   25742:	b510      	push	{r4, lr}
   25744:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   25746:	f7ff f812 	bl	2476e <strlen>
   2574a:	2801      	cmp	r0, #1
   2574c:	d91e      	bls.n	2578c <is_command+0x4a>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   2574e:	7823      	ldrb	r3, [r4, #0]
   25750:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   25754:	2a19      	cmp	r2, #25
   25756:	bf98      	it	ls
   25758:	3b20      	subls	r3, #32
   2575a:	2b41      	cmp	r3, #65	; 0x41
   2575c:	d116      	bne.n	2578c <is_command+0x4a>
   2575e:	7863      	ldrb	r3, [r4, #1]
   25760:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   25764:	2a19      	cmp	r2, #25
   25766:	bf98      	it	ls
   25768:	3b20      	subls	r3, #32
   2576a:	2b54      	cmp	r3, #84	; 0x54
   2576c:	d10e      	bne.n	2578c <is_command+0x4a>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2576e:	78a2      	ldrb	r2, [r4, #2]
   25770:	2a25      	cmp	r2, #37	; 0x25
   25772:	d00d      	beq.n	25790 <is_command+0x4e>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   25774:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   25778:	2b23      	cmp	r3, #35	; 0x23
   2577a:	d009      	beq.n	25790 <is_command+0x4e>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   2577c:	4610      	mov	r0, r2
   2577e:	f7ff ffbd 	bl	256fc <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   25782:	b910      	cbnz	r0, 2578a <is_command+0x48>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   25784:	fab2 f082 	clz	r0, r2
   25788:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   2578a:	bd10      	pop	{r4, pc}
		return false;
   2578c:	2000      	movs	r0, #0
   2578e:	e7fc      	b.n	2578a <is_command+0x48>
		return true;
   25790:	2001      	movs	r0, #1
   25792:	e7fa      	b.n	2578a <is_command+0x48>

00025794 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   25794:	6813      	ldr	r3, [r2, #0]
   25796:	f7ec bfc9 	b.w	1272c <at_parser_max_params_from_str>

0002579a <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   2579a:	6803      	ldr	r3, [r0, #0]
   2579c:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   2579e:	bf83      	ittte	hi
   257a0:	230c      	movhi	r3, #12
   257a2:	6840      	ldrhi	r0, [r0, #4]
   257a4:	fb03 0001 	mlahi	r0, r3, r1, r0
		return NULL;
   257a8:	2000      	movls	r0, #0
}
   257aa:	4770      	bx	lr

000257ac <at_param_size>:
/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
	__ASSERT(param != NULL, "Parameter cannot be NULL.");

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   257ac:	7803      	ldrb	r3, [r0, #0]
   257ae:	2b01      	cmp	r3, #1
   257b0:	d006      	beq.n	257c0 <at_param_size+0x14>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   257b2:	2b02      	cmp	r3, #2
   257b4:	d006      	beq.n	257c4 <at_param_size+0x18>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   257b6:	3b03      	subs	r3, #3
   257b8:	2b01      	cmp	r3, #1
   257ba:	d805      	bhi.n	257c8 <at_param_size+0x1c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   257bc:	6840      	ldr	r0, [r0, #4]
   257be:	4770      	bx	lr
		return sizeof(u16_t);
   257c0:	2002      	movs	r0, #2
   257c2:	4770      	bx	lr
		return sizeof(u32_t);
   257c4:	2004      	movs	r0, #4
   257c6:	4770      	bx	lr
	}

	return 0;
   257c8:	2000      	movs	r0, #0
}
   257ca:	4770      	bx	lr

000257cc <at_param_clear>:
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   257cc:	7803      	ldrb	r3, [r0, #0]
{
   257ce:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   257d0:	3b03      	subs	r3, #3
   257d2:	2b01      	cmp	r3, #1
{
   257d4:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   257d6:	d802      	bhi.n	257de <at_param_clear+0x12>
		k_free(param->value.str_val);
   257d8:	6880      	ldr	r0, [r0, #8]
   257da:	f000 f928 	bl	25a2e <k_free>
	param->value.int_val = 0;
   257de:	2300      	movs	r3, #0
   257e0:	60a3      	str	r3, [r4, #8]
}
   257e2:	bd10      	pop	{r4, pc}

000257e4 <at_params_list_init>:

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   257e4:	b538      	push	{r3, r4, r5, lr}
   257e6:	460d      	mov	r5, r1
	if (list == NULL) {
   257e8:	4604      	mov	r4, r0
   257ea:	b140      	cbz	r0, 257fe <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   257ec:	210c      	movs	r1, #12
   257ee:	4628      	mov	r0, r5
   257f0:	f000 f922 	bl	25a38 <k_calloc>
   257f4:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   257f6:	b128      	cbz	r0, 25804 <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   257f8:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   257fa:	6025      	str	r5, [r4, #0]
}
   257fc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   257fe:	f06f 0015 	mvn.w	r0, #21
   25802:	e7fb      	b.n	257fc <at_params_list_init+0x18>
		return -ENOMEM;
   25804:	f06f 000b 	mvn.w	r0, #11
   25808:	e7f8      	b.n	257fc <at_params_list_init+0x18>

0002580a <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   2580a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (list == NULL || list->params == NULL) {
   2580c:	4605      	mov	r5, r0
   2580e:	b130      	cbz	r0, 2581e <at_params_list_clear+0x14>
   25810:	6843      	ldr	r3, [r0, #4]
   25812:	b123      	cbz	r3, 2581e <at_params_list_clear+0x14>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   25814:	2400      	movs	r4, #0
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
   25816:	270c      	movs	r7, #12
	for (size_t i = 0; i < list->param_count; ++i) {
   25818:	682b      	ldr	r3, [r5, #0]
   2581a:	429c      	cmp	r4, r3
   2581c:	d300      	bcc.n	25820 <at_params_list_clear+0x16>
		at_param_init(&params[i]);
	}
}
   2581e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		at_param_clear(&params[i]);
   25820:	686e      	ldr	r6, [r5, #4]
   25822:	fb07 6604 	mla	r6, r7, r4, r6
   25826:	4630      	mov	r0, r6
   25828:	f7ff ffd0 	bl	257cc <at_param_clear>
	memset(param, 0, sizeof(struct at_param));
   2582c:	220c      	movs	r2, #12
   2582e:	2100      	movs	r1, #0
   25830:	4630      	mov	r0, r6
   25832:	f7fe fff8 	bl	24826 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   25836:	3401      	adds	r4, #1
   25838:	e7ee      	b.n	25818 <at_params_list_clear+0xe>

0002583a <at_params_short_put>:
	list->params = NULL;
}

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   2583a:	b538      	push	{r3, r4, r5, lr}
   2583c:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   2583e:	b160      	cbz	r0, 2585a <at_params_short_put+0x20>
   25840:	6843      	ldr	r3, [r0, #4]
   25842:	b153      	cbz	r3, 2585a <at_params_short_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   25844:	f7ff ffa9 	bl	2579a <at_params_get>

	if (param == NULL) {
   25848:	4604      	mov	r4, r0
   2584a:	b130      	cbz	r0, 2585a <at_params_short_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   2584c:	f7ff ffbe 	bl	257cc <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_SHORT;
   25850:	2301      	movs	r3, #1
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
   25852:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   25854:	7023      	strb	r3, [r4, #0]
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   25856:	60a5      	str	r5, [r4, #8]
}
   25858:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2585a:	f06f 0015 	mvn.w	r0, #21
   2585e:	e7fb      	b.n	25858 <at_params_short_put+0x1e>

00025860 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   25860:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   25862:	b160      	cbz	r0, 2587e <at_params_empty_put+0x1e>
   25864:	6843      	ldr	r3, [r0, #4]
   25866:	b153      	cbz	r3, 2587e <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   25868:	f7ff ff97 	bl	2579a <at_params_get>

	if (param == NULL) {
   2586c:	4604      	mov	r4, r0
   2586e:	b130      	cbz	r0, 2587e <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	at_param_clear(param);
   25870:	f7ff ffac 	bl	257cc <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   25874:	2305      	movs	r3, #5
	param->value.int_val = 0;
   25876:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   25878:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   2587a:	60a0      	str	r0, [r4, #8]

	return 0;
}
   2587c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2587e:	f06f 0015 	mvn.w	r0, #21
   25882:	e7fb      	b.n	2587c <at_params_empty_put+0x1c>

00025884 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   25884:	b538      	push	{r3, r4, r5, lr}
   25886:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   25888:	b160      	cbz	r0, 258a4 <at_params_int_put+0x20>
   2588a:	6843      	ldr	r3, [r0, #4]
   2588c:	b153      	cbz	r3, 258a4 <at_params_int_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2588e:	f7ff ff84 	bl	2579a <at_params_get>

	if (param == NULL) {
   25892:	4604      	mov	r4, r0
   25894:	b130      	cbz	r0, 258a4 <at_params_int_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   25896:	f7ff ff99 	bl	257cc <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   2589a:	2302      	movs	r3, #2
	param->value.int_val = value;
	return 0;
   2589c:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   2589e:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   258a0:	60a5      	str	r5, [r4, #8]
}
   258a2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   258a4:	f06f 0015 	mvn.w	r0, #21
   258a8:	e7fb      	b.n	258a2 <at_params_int_put+0x1e>

000258aa <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   258aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   258ac:	4616      	mov	r6, r2
   258ae:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   258b0:	b1c0      	cbz	r0, 258e4 <at_params_string_put+0x3a>
   258b2:	6843      	ldr	r3, [r0, #4]
   258b4:	b1b3      	cbz	r3, 258e4 <at_params_string_put+0x3a>
   258b6:	b1aa      	cbz	r2, 258e4 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   258b8:	f7ff ff6f 	bl	2579a <at_params_get>

	if (param == NULL) {
   258bc:	4604      	mov	r4, r0
   258be:	b188      	cbz	r0, 258e4 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   258c0:	1c68      	adds	r0, r5, #1
   258c2:	f7fc fbdb 	bl	2207c <k_malloc>

	if (param_value == NULL) {
   258c6:	4607      	mov	r7, r0
   258c8:	b178      	cbz	r0, 258ea <at_params_string_put+0x40>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);
   258ca:	462a      	mov	r2, r5
   258cc:	4631      	mov	r1, r6
   258ce:	f7fe ff80 	bl	247d2 <memcpy>

	at_param_clear(param);
   258d2:	4620      	mov	r0, r4
   258d4:	f7ff ff7a 	bl	257cc <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   258d8:	2303      	movs	r3, #3
	param->value.str_val = param_value;

	return 0;
   258da:	2000      	movs	r0, #0
	param->size = str_len;
   258dc:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   258de:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   258e0:	60a7      	str	r7, [r4, #8]
}
   258e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   258e4:	f06f 0015 	mvn.w	r0, #21
   258e8:	e7fb      	b.n	258e2 <at_params_string_put+0x38>
		return -ENOMEM;
   258ea:	f06f 000b 	mvn.w	r0, #11
   258ee:	e7f8      	b.n	258e2 <at_params_string_put+0x38>

000258f0 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const u32_t *array, size_t array_len)
{
   258f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   258f2:	4616      	mov	r6, r2
   258f4:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   258f6:	b1c0      	cbz	r0, 2592a <at_params_array_put+0x3a>
   258f8:	6843      	ldr	r3, [r0, #4]
   258fa:	b1b3      	cbz	r3, 2592a <at_params_array_put+0x3a>
   258fc:	b1aa      	cbz	r2, 2592a <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   258fe:	f7ff ff4c 	bl	2579a <at_params_get>

	if (param == NULL) {
   25902:	4604      	mov	r4, r0
   25904:	b188      	cbz	r0, 2592a <at_params_array_put+0x3a>
		return -EINVAL;
	}

	u32_t *param_value = (u32_t *)k_malloc(array_len);
   25906:	4628      	mov	r0, r5
   25908:	f7fc fbb8 	bl	2207c <k_malloc>

	if (param_value == NULL) {
   2590c:	4607      	mov	r7, r0
   2590e:	b178      	cbz	r0, 25930 <at_params_array_put+0x40>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);
   25910:	462a      	mov	r2, r5
   25912:	4631      	mov	r1, r6
   25914:	f7fe ff5d 	bl	247d2 <memcpy>

	at_param_clear(param);
   25918:	4620      	mov	r0, r4
   2591a:	f7ff ff57 	bl	257cc <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   2591e:	2304      	movs	r3, #4
	param->value.array_val = param_value;

	return 0;
   25920:	2000      	movs	r0, #0
	param->size = array_len;
   25922:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   25924:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   25926:	60a7      	str	r7, [r4, #8]
}
   25928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   2592a:	f06f 0015 	mvn.w	r0, #21
   2592e:	e7fb      	b.n	25928 <at_params_array_put+0x38>
		return -ENOMEM;
   25930:	f06f 000b 	mvn.w	r0, #11
   25934:	e7f8      	b.n	25928 <at_params_array_put+0x38>

00025936 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			u16_t *value)
{
   25936:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   25938:	b160      	cbz	r0, 25954 <at_params_short_get+0x1e>
   2593a:	6843      	ldr	r3, [r0, #4]
   2593c:	b153      	cbz	r3, 25954 <at_params_short_get+0x1e>
   2593e:	b14a      	cbz	r2, 25954 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   25940:	f7ff ff2b 	bl	2579a <at_params_get>

	if (param == NULL) {
   25944:	b130      	cbz	r0, 25954 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   25946:	7803      	ldrb	r3, [r0, #0]
   25948:	2b01      	cmp	r3, #1
   2594a:	d103      	bne.n	25954 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	*value = (u16_t)param->value.int_val;
   2594c:	6883      	ldr	r3, [r0, #8]
	return 0;
   2594e:	2000      	movs	r0, #0
	*value = (u16_t)param->value.int_val;
   25950:	8013      	strh	r3, [r2, #0]
}
   25952:	bd08      	pop	{r3, pc}
		return -EINVAL;
   25954:	f06f 0015 	mvn.w	r0, #21
   25958:	e7fb      	b.n	25952 <at_params_short_get+0x1c>

0002595a <at_params_string_get>:
	return 0;
}

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   2595a:	b570      	push	{r4, r5, r6, lr}
   2595c:	4616      	mov	r6, r2
   2595e:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   25960:	b1c0      	cbz	r0, 25994 <at_params_string_get+0x3a>
   25962:	6843      	ldr	r3, [r0, #4]
   25964:	b1b3      	cbz	r3, 25994 <at_params_string_get+0x3a>
   25966:	b1aa      	cbz	r2, 25994 <at_params_string_get+0x3a>
	    value == NULL || len == NULL) {
   25968:	b1a4      	cbz	r4, 25994 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2596a:	f7ff ff16 	bl	2579a <at_params_get>

	if (param == NULL) {
   2596e:	4601      	mov	r1, r0
   25970:	b180      	cbz	r0, 25994 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   25972:	7803      	ldrb	r3, [r0, #0]
   25974:	2b03      	cmp	r3, #3
   25976:	d10d      	bne.n	25994 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   25978:	f7ff ff18 	bl	257ac <at_param_size>

	if (*len < param_len) {
   2597c:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   2597e:	4605      	mov	r5, r0
	if (*len < param_len) {
   25980:	4283      	cmp	r3, r0
   25982:	d30a      	bcc.n	2599a <at_params_string_get+0x40>
		return -ENOMEM;
	}

	memcpy(value, param->value.str_val, param_len);
   25984:	4602      	mov	r2, r0
   25986:	6889      	ldr	r1, [r1, #8]
   25988:	4630      	mov	r0, r6
   2598a:	f7fe ff22 	bl	247d2 <memcpy>
	*len = param_len;

	return 0;
   2598e:	2000      	movs	r0, #0
	*len = param_len;
   25990:	6025      	str	r5, [r4, #0]
}
   25992:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   25994:	f06f 0015 	mvn.w	r0, #21
   25998:	e7fb      	b.n	25992 <at_params_string_get+0x38>
		return -ENOMEM;
   2599a:	f06f 000b 	mvn.w	r0, #11
   2599e:	e7f8      	b.n	25992 <at_params_string_get+0x38>

000259a0 <at_params_valid_count_get>:

	return 0;
}

u32_t at_params_valid_count_get(const struct at_param_list *list)
{
   259a0:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   259a2:	4604      	mov	r4, r0
   259a4:	b178      	cbz	r0, 259c6 <at_params_valid_count_get+0x26>
   259a6:	6840      	ldr	r0, [r0, #4]
   259a8:	b168      	cbz	r0, 259c6 <at_params_valid_count_get+0x26>
	if (index >= list->param_count) {
   259aa:	6822      	ldr	r2, [r4, #0]
   259ac:	b14a      	cbz	r2, 259c2 <at_params_valid_count_get+0x22>
   259ae:	2200      	movs	r2, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   259b0:	7803      	ldrb	r3, [r0, #0]
   259b2:	b133      	cbz	r3, 259c2 <at_params_valid_count_get+0x22>
		valid_i += 1;
   259b4:	3201      	adds	r2, #1
		param = at_params_get(list, valid_i);
   259b6:	4611      	mov	r1, r2
   259b8:	4620      	mov	r0, r4
   259ba:	f7ff feee 	bl	2579a <at_params_get>
	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   259be:	2800      	cmp	r0, #0
   259c0:	d1f6      	bne.n	259b0 <at_params_valid_count_get+0x10>
	}

	return valid_i;
}
   259c2:	4610      	mov	r0, r2
   259c4:	bd10      	pop	{r4, pc}
		return -EINVAL;
   259c6:	f06f 0215 	mvn.w	r2, #21
   259ca:	e7fa      	b.n	259c2 <at_params_valid_count_get+0x22>

000259cc <arch_system_halt>:
	__asm__ volatile(
   259cc:	f04f 0220 	mov.w	r2, #32
   259d0:	f3ef 8311 	mrs	r3, BASEPRI
   259d4:	f382 8811 	msr	BASEPRI, r2
   259d8:	f3bf 8f6f 	isb	sy
	}
   259dc:	e7fe      	b.n	259dc <arch_system_halt+0x10>

000259de <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   259de:	f7fe bd47 	b.w	24470 <z_clock_idle_exit>

000259e2 <k_mem_slab_init>:
{
   259e2:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   259e4:	2400      	movs	r4, #0
	slab->block_size = block_size;
   259e6:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
   259ea:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
   259ee:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   259f0:	42a3      	cmp	r3, r4
   259f2:	d102      	bne.n	259fa <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
   259f4:	e9c0 0000 	strd	r0, r0, [r0]
}
   259f8:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   259fa:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   259fc:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   259fe:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   25a00:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   25a02:	4411      	add	r1, r2
   25a04:	e7f4      	b.n	259f0 <k_mem_slab_init+0xe>

00025a06 <k_mem_pool_malloc>:
{
   25a06:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   25a08:	2404      	movs	r4, #4
   25a0a:	190a      	adds	r2, r1, r4
   25a0c:	d204      	bcs.n	25a18 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   25a0e:	2300      	movs	r3, #0
   25a10:	4669      	mov	r1, sp
   25a12:	f7fc fabb 	bl	21f8c <k_mem_pool_alloc>
   25a16:	b110      	cbz	r0, 25a1e <k_mem_pool_malloc+0x18>
		return NULL;
   25a18:	2000      	movs	r0, #0
}
   25a1a:	b002      	add	sp, #8
   25a1c:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   25a1e:	4622      	mov	r2, r4
   25a20:	a901      	add	r1, sp, #4
   25a22:	9800      	ldr	r0, [sp, #0]
   25a24:	f7fe fed5 	bl	247d2 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   25a28:	9800      	ldr	r0, [sp, #0]
   25a2a:	3004      	adds	r0, #4
   25a2c:	e7f5      	b.n	25a1a <k_mem_pool_malloc+0x14>

00025a2e <k_free>:
	if (ptr != NULL) {
   25a2e:	b110      	cbz	r0, 25a36 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   25a30:	3804      	subs	r0, #4
   25a32:	f7fc baf7 	b.w	22024 <k_mem_pool_free_id>
}
   25a36:	4770      	bx	lr

00025a38 <k_calloc>:
{
   25a38:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   25a3a:	fba0 4501 	umull	r4, r5, r0, r1
   25a3e:	b935      	cbnz	r5, 25a4e <k_calloc+0x16>
	ret = k_malloc(bounds);
   25a40:	4620      	mov	r0, r4
   25a42:	f7fc fb1b 	bl	2207c <k_malloc>
	if (ret != NULL) {
   25a46:	4606      	mov	r6, r0
   25a48:	b918      	cbnz	r0, 25a52 <k_calloc+0x1a>
}
   25a4a:	4630      	mov	r0, r6
   25a4c:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   25a4e:	2600      	movs	r6, #0
   25a50:	e7fb      	b.n	25a4a <k_calloc+0x12>
		(void)memset(ret, 0, bounds);
   25a52:	4622      	mov	r2, r4
   25a54:	4629      	mov	r1, r5
   25a56:	f7fe fee6 	bl	24826 <memset>
   25a5a:	e7f6      	b.n	25a4a <k_calloc+0x12>

00025a5c <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   25a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25a60:	4604      	mov	r4, r0
   25a62:	460f      	mov	r7, r1
   25a64:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   25a66:	f100 0508 	add.w	r5, r0, #8
   25a6a:	f04f 0220 	mov.w	r2, #32
   25a6e:	f3ef 8611 	mrs	r6, BASEPRI
   25a72:	f382 8811 	msr	BASEPRI, r2
   25a76:	f3bf 8f6f 	isb	sy
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   25a7a:	b1db      	cbz	r3, 25ab4 <queue_insert+0x58>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   25a7c:	2008      	movs	r0, #8
   25a7e:	f7fc fb03 	bl	22088 <z_thread_malloc>
		if (anode == NULL) {
   25a82:	b938      	cbnz	r0, 25a94 <queue_insert+0x38>
	__asm__ volatile(
   25a84:	f386 8811 	msr	BASEPRI, r6
   25a88:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   25a8c:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   25a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   25a94:	2301      	movs	r3, #1
		anode->data = data;
   25a96:	f8c0 8004 	str.w	r8, [r0, #4]
   25a9a:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   25a9c:	6803      	ldr	r3, [r0, #0]
   25a9e:	f003 0203 	and.w	r2, r3, #3
   25aa2:	b95f      	cbnz	r7, 25abc <queue_insert+0x60>
	parent->next_and_flags = cur_flags | (unative_t)child;
   25aa4:	6823      	ldr	r3, [r4, #0]
   25aa6:	4313      	orrs	r3, r2
   25aa8:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   25aaa:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   25aac:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   25aae:	b973      	cbnz	r3, 25ace <queue_insert+0x72>
	list->tail = node;
   25ab0:	6060      	str	r0, [r4, #4]
   25ab2:	e00c      	b.n	25ace <queue_insert+0x72>
	node->next_and_flags = flags;
   25ab4:	f8c8 3000 	str.w	r3, [r8]
   25ab8:	4640      	mov	r0, r8
   25aba:	e7ef      	b.n	25a9c <queue_insert+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25abc:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   25abe:	f033 0303 	bics.w	r3, r3, #3
   25ac2:	d114      	bne.n	25aee <queue_insert+0x92>
	parent->next_and_flags = cur_flags | (unative_t)child;
   25ac4:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   25ac6:	6862      	ldr	r2, [r4, #4]
   25ac8:	b95a      	cbnz	r2, 25ae2 <queue_insert+0x86>
	list->head = node;
   25aca:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   25ace:	2104      	movs	r1, #4
   25ad0:	4628      	mov	r0, r5
   25ad2:	f000 fb6a 	bl	261aa <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   25ad6:	4628      	mov	r0, r5
   25ad8:	4631      	mov	r1, r6
   25ada:	f000 f8d2 	bl	25c82 <z_reschedule>
	return 0;
   25ade:	2000      	movs	r0, #0
   25ae0:	e7d6      	b.n	25a90 <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25ae2:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25ae4:	f003 0303 	and.w	r3, r3, #3
   25ae8:	4303      	orrs	r3, r0
   25aea:	6013      	str	r3, [r2, #0]
   25aec:	e7e0      	b.n	25ab0 <queue_insert+0x54>
   25aee:	4313      	orrs	r3, r2
   25af0:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25af2:	683b      	ldr	r3, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25af4:	f003 0303 	and.w	r3, r3, #3
   25af8:	4318      	orrs	r0, r3
   25afa:	6038      	str	r0, [r7, #0]
   25afc:	e7e7      	b.n	25ace <queue_insert+0x72>

00025afe <z_queue_node_peek>:
{
   25afe:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   25b00:	4604      	mov	r4, r0
   25b02:	b130      	cbz	r0, 25b12 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25b04:	6802      	ldr	r2, [r0, #0]
   25b06:	0793      	lsls	r3, r2, #30
   25b08:	d003      	beq.n	25b12 <z_queue_node_peek+0x14>
		ret = anode->data;
   25b0a:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   25b0c:	b109      	cbz	r1, 25b12 <z_queue_node_peek+0x14>
			k_free(anode);
   25b0e:	f7ff ff8e 	bl	25a2e <k_free>
}
   25b12:	4620      	mov	r0, r4
   25b14:	bd10      	pop	{r4, pc}

00025b16 <z_impl_k_queue_init>:
	list->head = NULL;
   25b16:	2300      	movs	r3, #0
	list->tail = NULL;
   25b18:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
   25b1c:	f100 0308 	add.w	r3, r0, #8
   25b20:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   25b24:	4770      	bx	lr

00025b26 <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   25b26:	460a      	mov	r2, r1
   25b28:	2300      	movs	r3, #0
   25b2a:	6841      	ldr	r1, [r0, #4]
   25b2c:	f7ff bf96 	b.w	25a5c <queue_insert>

00025b30 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   25b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25b34:	4604      	mov	r4, r0
   25b36:	b086      	sub	sp, #24
   25b38:	460d      	mov	r5, r1
	__asm__ volatile(
   25b3a:	f04f 0320 	mov.w	r3, #32
   25b3e:	f3ef 8711 	mrs	r7, BASEPRI
   25b42:	f383 8811 	msr	BASEPRI, r3
   25b46:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   25b4a:	6800      	ldr	r0, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   25b4c:	b188      	cbz	r0, 25b72 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25b4e:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25b50:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25b52:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25b56:	4290      	cmp	r0, r2
	list->head = node;
   25b58:	6023      	str	r3, [r4, #0]
	list->tail = node;
   25b5a:	bf08      	it	eq
   25b5c:	6063      	streq	r3, [r4, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   25b5e:	2101      	movs	r1, #1
   25b60:	f7ff ffcd 	bl	25afe <z_queue_node_peek>
	__asm__ volatile(
   25b64:	f387 8811 	msr	BASEPRI, r7
   25b68:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   25b6c:	b006      	add	sp, #24
   25b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   25b72:	2900      	cmp	r1, #0
   25b74:	d0f6      	beq.n	25b64 <z_impl_k_queue_get+0x34>
   25b76:	f387 8811 	msr	BASEPRI, r7
   25b7a:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   25b7e:	2104      	movs	r1, #4
   25b80:	4602      	mov	r2, r0
   25b82:	4623      	mov	r3, r4
   25b84:	eb0d 0001 	add.w	r0, sp, r1
   25b88:	f7fd f9b6 	bl	22ef8 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   25b8c:	1c6a      	adds	r2, r5, #1
   25b8e:	d002      	beq.n	25b96 <z_impl_k_queue_get+0x66>
	return z_impl_k_uptime_get();
   25b90:	f000 f9d8 	bl	25f44 <z_impl_k_uptime_get>
   25b94:	4606      	mov	r6, r0
{
   25b96:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   25b98:	9b04      	ldr	r3, [sp, #16]
   25b9a:	f36f 3310 	bfc	r3, #12, #5
   25b9e:	9304      	str	r3, [sp, #16]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   25ba0:	2101      	movs	r1, #1
   25ba2:	1bea      	subs	r2, r5, r7
   25ba4:	a801      	add	r0, sp, #4
   25ba6:	f7fd f9bb 	bl	22f20 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   25baa:	b118      	cbz	r0, 25bb4 <z_impl_k_queue_get+0x84>
   25bac:	300b      	adds	r0, #11
   25bae:	d001      	beq.n	25bb4 <z_impl_k_queue_get+0x84>
			return NULL;
   25bb0:	2000      	movs	r0, #0
   25bb2:	e7db      	b.n	25b6c <z_impl_k_queue_get+0x3c>
	__asm__ volatile(
   25bb4:	f04f 0320 	mov.w	r3, #32
   25bb8:	f3ef 8811 	mrs	r8, BASEPRI
   25bbc:	f383 8811 	msr	BASEPRI, r3
   25bc0:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   25bc4:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   25bc6:	b138      	cbz	r0, 25bd8 <z_impl_k_queue_get+0xa8>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25bc8:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25bca:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25bcc:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25bd0:	4290      	cmp	r0, r2
	list->head = node;
   25bd2:	6023      	str	r3, [r4, #0]
	list->tail = node;
   25bd4:	bf08      	it	eq
   25bd6:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   25bd8:	2101      	movs	r1, #1
   25bda:	f7ff ff90 	bl	25afe <z_queue_node_peek>
	__asm__ volatile(
   25bde:	f388 8811 	msr	BASEPRI, r8
   25be2:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   25be6:	2800      	cmp	r0, #0
   25be8:	d1c0      	bne.n	25b6c <z_impl_k_queue_get+0x3c>
   25bea:	1c6b      	adds	r3, r5, #1
   25bec:	d0d4      	beq.n	25b98 <z_impl_k_queue_get+0x68>
	return z_impl_k_uptime_get();
   25bee:	f000 f9a9 	bl	25f44 <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   25bf2:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   25bf4:	42bd      	cmp	r5, r7
   25bf6:	dacf      	bge.n	25b98 <z_impl_k_queue_get+0x68>
   25bf8:	e7da      	b.n	25bb0 <z_impl_k_queue_get+0x80>

00025bfa <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   25bfa:	7b43      	ldrb	r3, [r0, #13]
   25bfc:	06db      	lsls	r3, r3, #27
   25bfe:	bf03      	ittte	eq
   25c00:	6980      	ldreq	r0, [r0, #24]
   25c02:	fab0 f080 	clzeq	r0, r0
   25c06:	0940      	lsreq	r0, r0, #5
   25c08:	2000      	movne	r0, #0
}
   25c0a:	4770      	bx	lr

00025c0c <z_swap_irqlock>:
{
   25c0c:	b510      	push	{r4, lr}
   25c0e:	4604      	mov	r4, r0
	z_check_stack_sentinel();
   25c10:	f7fc fefc 	bl	22a0c <z_check_stack_sentinel>
	ret = arch_swap(key);
   25c14:	4620      	mov	r0, r4
}
   25c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   25c1a:	f7ea b905 	b.w	fe28 <arch_swap>

00025c1e <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   25c1e:	f990 000e 	ldrsb.w	r0, [r0, #14]
   25c22:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   25c26:	4298      	cmp	r0, r3
   25c28:	bfac      	ite	ge
   25c2a:	2000      	movge	r0, #0
   25c2c:	2001      	movlt	r0, #1
   25c2e:	4770      	bx	lr

00025c30 <z_find_first_thread_to_unpend>:
{
   25c30:	b510      	push	{r4, lr}
	__asm__ volatile(
   25c32:	f04f 0320 	mov.w	r3, #32
   25c36:	f3ef 8411 	mrs	r4, BASEPRI
   25c3a:	f383 8811 	msr	BASEPRI, r3
   25c3e:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   25c42:	f000 f85d 	bl	25d00 <z_priq_dumb_best>
	__asm__ volatile(
   25c46:	f384 8811 	msr	BASEPRI, r4
   25c4a:	f3bf 8f6f 	isb	sy
}
   25c4e:	bd10      	pop	{r4, pc}

00025c50 <z_unpend_thread_no_timeout>:
{
   25c50:	b538      	push	{r3, r4, r5, lr}
   25c52:	4604      	mov	r4, r0
	__asm__ volatile(
   25c54:	f04f 0320 	mov.w	r3, #32
   25c58:	f3ef 8511 	mrs	r5, BASEPRI
   25c5c:	f383 8811 	msr	BASEPRI, r3
   25c60:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   25c64:	4601      	mov	r1, r0
   25c66:	6880      	ldr	r0, [r0, #8]
   25c68:	f7fc fbd0 	bl	2240c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   25c6c:	7b63      	ldrb	r3, [r4, #13]
   25c6e:	f023 0302 	bic.w	r3, r3, #2
   25c72:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   25c74:	f385 8811 	msr	BASEPRI, r5
   25c78:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   25c7c:	2300      	movs	r3, #0
   25c7e:	60a3      	str	r3, [r4, #8]
}
   25c80:	bd38      	pop	{r3, r4, r5, pc}

00025c82 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   25c82:	b921      	cbnz	r1, 25c8e <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   25c84:	f3ef 8005 	mrs	r0, IPSR
   25c88:	b908      	cbnz	r0, 25c8e <z_reschedule+0xc>
	return z_swap_irqlock(key.key);
   25c8a:	f7ff bfbf 	b.w	25c0c <z_swap_irqlock>
   25c8e:	f381 8811 	msr	BASEPRI, r1
   25c92:	f3bf 8f6f 	isb	sy
}
   25c96:	4770      	bx	lr

00025c98 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   25c98:	4603      	mov	r3, r0
   25c9a:	b920      	cbnz	r0, 25ca6 <z_reschedule_irqlock+0xe>
   25c9c:	f3ef 8205 	mrs	r2, IPSR
   25ca0:	b90a      	cbnz	r2, 25ca6 <z_reschedule_irqlock+0xe>
		z_swap_irqlock(key);
   25ca2:	f7ff bfb3 	b.w	25c0c <z_swap_irqlock>
   25ca6:	f383 8811 	msr	BASEPRI, r3
   25caa:	f3bf 8f6f 	isb	sy
}
   25cae:	4770      	bx	lr

00025cb0 <z_reschedule_unlocked>:
	__asm__ volatile(
   25cb0:	f04f 0320 	mov.w	r3, #32
   25cb4:	f3ef 8011 	mrs	r0, BASEPRI
   25cb8:	f383 8811 	msr	BASEPRI, r3
   25cbc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   25cc0:	f7ff bfea 	b.w	25c98 <z_reschedule_irqlock>

00025cc4 <z_unpend_thread>:
{
   25cc4:	b538      	push	{r3, r4, r5, lr}
   25cc6:	4604      	mov	r4, r0
   25cc8:	f04f 0320 	mov.w	r3, #32
   25ccc:	f3ef 8511 	mrs	r5, BASEPRI
   25cd0:	f383 8811 	msr	BASEPRI, r3
   25cd4:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   25cd8:	4601      	mov	r1, r0
   25cda:	6880      	ldr	r0, [r0, #8]
   25cdc:	f7fc fb96 	bl	2240c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   25ce0:	7b63      	ldrb	r3, [r4, #13]
   25ce2:	f023 0302 	bic.w	r3, r3, #2
   25ce6:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   25ce8:	f385 8811 	msr	BASEPRI, r5
   25cec:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   25cf0:	2300      	movs	r3, #0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   25cf2:	f104 0018 	add.w	r0, r4, #24
   25cf6:	60a3      	str	r3, [r4, #8]
}
   25cf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   25cfc:	f000 b8de 	b.w	25ebc <z_abort_timeout>

00025d00 <z_priq_dumb_best>:
	return list->head == list;
   25d00:	6803      	ldr	r3, [r0, #0]
}
   25d02:	4298      	cmp	r0, r3
   25d04:	bf14      	ite	ne
   25d06:	4618      	movne	r0, r3
   25d08:	2000      	moveq	r0, #0
   25d0a:	4770      	bx	lr

00025d0c <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   25d0c:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   25d10:	b570      	push	{r4, r5, r6, lr}
   25d12:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   25d14:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   25d18:	b1cb      	cbz	r3, 25d4e <z_thread_timeout+0x42>
	__asm__ volatile(
   25d1a:	f04f 0320 	mov.w	r3, #32
   25d1e:	f3ef 8611 	mrs	r6, BASEPRI
   25d22:	f383 8811 	msr	BASEPRI, r3
   25d26:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   25d2a:	4629      	mov	r1, r5
   25d2c:	f850 0c10 	ldr.w	r0, [r0, #-16]
   25d30:	f7fc fb6c 	bl	2240c <z_priq_dumb_remove>
   25d34:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   25d38:	f023 0302 	bic.w	r3, r3, #2
   25d3c:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
   25d40:	f386 8811 	msr	BASEPRI, r6
   25d44:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   25d48:	2300      	movs	r3, #0
   25d4a:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   25d4e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   25d52:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   25d54:	f023 0314 	bic.w	r3, r3, #20
   25d58:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   25d5c:	f7ff ff4d 	bl	25bfa <z_is_thread_ready>
   25d60:	b120      	cbz	r0, 25d6c <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
   25d62:	4628      	mov	r0, r5
}
   25d64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25d68:	f7fc bba0 	b.w	224ac <z_add_thread_to_ready_q>
   25d6c:	bd70      	pop	{r4, r5, r6, pc}

00025d6e <z_unpend_first_thread>:
{
   25d6e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   25d70:	f04f 0320 	mov.w	r3, #32
   25d74:	f3ef 8211 	mrs	r2, BASEPRI
   25d78:	f383 8811 	msr	BASEPRI, r3
   25d7c:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   25d80:	f7ff ffbe 	bl	25d00 <z_priq_dumb_best>
   25d84:	4604      	mov	r4, r0
	__asm__ volatile(
   25d86:	f382 8811 	msr	BASEPRI, r2
   25d8a:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   25d8e:	b1c8      	cbz	r0, 25dc4 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   25d90:	f04f 0320 	mov.w	r3, #32
   25d94:	f3ef 8511 	mrs	r5, BASEPRI
   25d98:	f383 8811 	msr	BASEPRI, r3
   25d9c:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   25da0:	4601      	mov	r1, r0
   25da2:	6880      	ldr	r0, [r0, #8]
   25da4:	f7fc fb32 	bl	2240c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   25da8:	7b63      	ldrb	r3, [r4, #13]
   25daa:	f023 0302 	bic.w	r3, r3, #2
   25dae:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   25db0:	f385 8811 	msr	BASEPRI, r5
   25db4:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   25db8:	2300      	movs	r3, #0
   25dba:	f104 0018 	add.w	r0, r4, #24
   25dbe:	60a3      	str	r3, [r4, #8]
   25dc0:	f000 f87c 	bl	25ebc <z_abort_timeout>
}
   25dc4:	4620      	mov	r0, r4
   25dc6:	bd38      	pop	{r3, r4, r5, pc}

00025dc8 <z_unpend_all>:
{
   25dc8:	b570      	push	{r4, r5, r6, lr}
   25dca:	4606      	mov	r6, r0
	int need_sched = 0;
   25dcc:	2500      	movs	r5, #0
   25dce:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25dd0:	42a6      	cmp	r6, r4
   25dd2:	d000      	beq.n	25dd6 <z_unpend_all+0xe>
	while ((th = z_waitq_head(wait_q)) != NULL) {
   25dd4:	b90c      	cbnz	r4, 25dda <z_unpend_all+0x12>
}
   25dd6:	4628      	mov	r0, r5
   25dd8:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(th);
   25dda:	4620      	mov	r0, r4
   25ddc:	f7ff ff72 	bl	25cc4 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   25de0:	4620      	mov	r0, r4
   25de2:	f7ff ff0a 	bl	25bfa <z_is_thread_ready>
		need_sched = 1;
   25de6:	2501      	movs	r5, #1
   25de8:	2800      	cmp	r0, #0
   25dea:	d0f0      	beq.n	25dce <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   25dec:	4620      	mov	r0, r4
   25dee:	f7fc fb5d 	bl	224ac <z_add_thread_to_ready_q>
   25df2:	e7ec      	b.n	25dce <z_unpend_all+0x6>

00025df4 <z_impl_k_sem_init>:
	sys_dlist_init(&sem->poll_events);
   25df4:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   25df8:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   25dfc:	e9c0 0000 	strd	r0, r0, [r0]
   25e00:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   25e04:	4770      	bx	lr

00025e06 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   25e06:	7b43      	ldrb	r3, [r0, #13]
   25e08:	06db      	lsls	r3, r3, #27
   25e0a:	bf03      	ittte	eq
   25e0c:	6980      	ldreq	r0, [r0, #24]
   25e0e:	fab0 f080 	clzeq	r0, r0
   25e12:	0940      	lsreq	r0, r0, #5
   25e14:	2000      	movne	r0, #0
}
   25e16:	4770      	bx	lr

00025e18 <z_impl_k_thread_name_set>:
}
   25e18:	f06f 0046 	mvn.w	r0, #70	; 0x46
   25e1c:	4770      	bx	lr

00025e1e <k_thread_name_get>:
}
   25e1e:	2000      	movs	r0, #0
   25e20:	4770      	bx	lr

00025e22 <z_new_thread_init>:
{
   25e22:	b510      	push	{r4, lr}
	*((u32_t *)pStack) = STACK_SENTINEL;
   25e24:	f04f 34f0 	mov.w	r4, #4042322160	; 0xf0f0f0f0
   25e28:	600c      	str	r4, [r1, #0]
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   25e2a:	9c02      	ldr	r4, [sp, #8]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
   25e2c:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
   25e2e:	7304      	strb	r4, [r0, #12]

	thread_base->sched_locked = 0U;
   25e30:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   25e32:	2404      	movs	r4, #4
	thread_base->sched_locked = 0U;
   25e34:	73c3      	strb	r3, [r0, #15]
	thread_base->thread_state = (u8_t)initial_state;
   25e36:	7344      	strb	r4, [r0, #13]
	node->prev = NULL;
   25e38:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   25e3c:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   25e40:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
   25e44:	bd10      	pop	{r4, pc}

00025e46 <z_thread_single_suspend>:
{
   25e46:	b510      	push	{r4, lr}
   25e48:	4604      	mov	r4, r0
	if (z_is_thread_ready(thread)) {
   25e4a:	f7ff ffdc 	bl	25e06 <z_is_thread_ready>
   25e4e:	b110      	cbz	r0, 25e56 <z_thread_single_suspend+0x10>
		z_remove_thread_from_ready_q(thread);
   25e50:	4620      	mov	r0, r4
   25e52:	f7fc fbd9 	bl	22608 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   25e56:	7b63      	ldrb	r3, [r4, #13]
   25e58:	f043 0310 	orr.w	r3, r3, #16
   25e5c:	7363      	strb	r3, [r4, #13]
}
   25e5e:	bd10      	pop	{r4, pc}

00025e60 <z_thread_single_resume>:
{
   25e60:	b508      	push	{r3, lr}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   25e62:	7b43      	ldrb	r3, [r0, #13]
   25e64:	4602      	mov	r2, r0
   25e66:	f023 0310 	bic.w	r3, r3, #16
   25e6a:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   25e6c:	f7ff ffcb 	bl	25e06 <z_is_thread_ready>
   25e70:	b120      	cbz	r0, 25e7c <z_thread_single_resume+0x1c>
}
   25e72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_add_thread_to_ready_q(thread);
   25e76:	4610      	mov	r0, r2
   25e78:	f7fc bb18 	b.w	224ac <z_add_thread_to_ready_q>
   25e7c:	bd08      	pop	{r3, pc}

00025e7e <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   25e7e:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   25e80:	b510      	push	{r4, lr}
   25e82:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   25e84:	b103      	cbz	r3, 25e88 <z_thread_single_abort+0xa>
		thread->fn_abort();
   25e86:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   25e88:	4620      	mov	r0, r4
   25e8a:	f7ff ffbc 	bl	25e06 <z_is_thread_ready>
   25e8e:	b138      	cbz	r0, 25ea0 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
   25e90:	4620      	mov	r0, r4
   25e92:	f7fc fbb9 	bl	22608 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   25e96:	7b63      	ldrb	r3, [r4, #13]
   25e98:	f043 0308 	orr.w	r3, r3, #8
   25e9c:	7363      	strb	r3, [r4, #13]
}
   25e9e:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
   25ea0:	7b63      	ldrb	r3, [r4, #13]
   25ea2:	079b      	lsls	r3, r3, #30
   25ea4:	d502      	bpl.n	25eac <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
   25ea6:	4620      	mov	r0, r4
   25ea8:	f7ff fed2 	bl	25c50 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   25eac:	69a3      	ldr	r3, [r4, #24]
   25eae:	2b00      	cmp	r3, #0
   25eb0:	d0f1      	beq.n	25e96 <z_thread_single_abort+0x18>
   25eb2:	f104 0018 	add.w	r0, r4, #24
   25eb6:	f000 f801 	bl	25ebc <z_abort_timeout>
   25eba:	e7ec      	b.n	25e96 <z_thread_single_abort+0x18>

00025ebc <z_abort_timeout>:
{
   25ebc:	b510      	push	{r4, lr}
	__asm__ volatile(
   25ebe:	f04f 0220 	mov.w	r2, #32
   25ec2:	f3ef 8411 	mrs	r4, BASEPRI
   25ec6:	f382 8811 	msr	BASEPRI, r2
   25eca:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   25ece:	6803      	ldr	r3, [r0, #0]
   25ed0:	b13b      	cbz	r3, 25ee2 <z_abort_timeout+0x26>
			remove_timeout(to);
   25ed2:	f7fc fed9 	bl	22c88 <remove_timeout>
			ret = 0;
   25ed6:	2000      	movs	r0, #0
	__asm__ volatile(
   25ed8:	f384 8811 	msr	BASEPRI, r4
   25edc:	f3bf 8f6f 	isb	sy
}
   25ee0:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   25ee2:	f06f 0015 	mvn.w	r0, #21
   25ee6:	e7f7      	b.n	25ed8 <z_abort_timeout+0x1c>

00025ee8 <z_get_next_timeout_expiry>:
{
   25ee8:	b510      	push	{r4, lr}
	__asm__ volatile(
   25eea:	f04f 0320 	mov.w	r3, #32
   25eee:	f3ef 8411 	mrs	r4, BASEPRI
   25ef2:	f383 8811 	msr	BASEPRI, r3
   25ef6:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   25efa:	f7fc fed9 	bl	22cb0 <next_timeout>
	__asm__ volatile(
   25efe:	f384 8811 	msr	BASEPRI, r4
   25f02:	f3bf 8f6f 	isb	sy
}
   25f06:	bd10      	pop	{r4, pc}

00025f08 <z_set_timeout_expiry>:
{
   25f08:	b570      	push	{r4, r5, r6, lr}
   25f0a:	4604      	mov	r4, r0
   25f0c:	460e      	mov	r6, r1
	__asm__ volatile(
   25f0e:	f04f 0320 	mov.w	r3, #32
   25f12:	f3ef 8511 	mrs	r5, BASEPRI
   25f16:	f383 8811 	msr	BASEPRI, r3
   25f1a:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   25f1e:	f7fc fec7 	bl	22cb0 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   25f22:	2801      	cmp	r0, #1
   25f24:	dd05      	ble.n	25f32 <z_set_timeout_expiry+0x2a>
   25f26:	42a0      	cmp	r0, r4
   25f28:	dd03      	ble.n	25f32 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   25f2a:	4631      	mov	r1, r6
   25f2c:	4620      	mov	r0, r4
   25f2e:	f7e9 fee5 	bl	fcfc <z_clock_set_timeout>
	__asm__ volatile(
   25f32:	f385 8811 	msr	BASEPRI, r5
   25f36:	f3bf 8f6f 	isb	sy
}
   25f3a:	bd70      	pop	{r4, r5, r6, pc}

00025f3c <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   25f3c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   25f3e:	f7fc ff6b 	bl	22e18 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   25f42:	bd08      	pop	{r3, pc}

00025f44 <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   25f44:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
   25f46:	f7fc ff67 	bl	22e18 <z_tick_get>
			return (t * to_hz + off) / from_hz;
   25f4a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   25f4e:	fba0 2304 	umull	r2, r3, r0, r4
   25f52:	fb04 3301 	mla	r3, r4, r1, r3
   25f56:	0bd0      	lsrs	r0, r2, #15
}
   25f58:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   25f5c:	0bd9      	lsrs	r1, r3, #15
   25f5e:	bd10      	pop	{r4, pc}

00025f60 <k_timer_init>:
	timer->status = 0U;
   25f60:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   25f62:	e9c0 1206 	strd	r1, r2, [r0, #24]
   25f66:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
   25f6a:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   25f6c:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   25f70:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
   25f74:	6283      	str	r3, [r0, #40]	; 0x28
}
   25f76:	4770      	bx	lr

00025f78 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   25f78:	b510      	push	{r4, lr}
   25f7a:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   25f7c:	f7ff ff9e 	bl	25ebc <z_abort_timeout>

	if (inactive) {
   25f80:	bb00      	cbnz	r0, 25fc4 <z_impl_k_timer_stop+0x4c>
		return;
	}

	if (timer->stop_fn != NULL) {
   25f82:	69e3      	ldr	r3, [r4, #28]
   25f84:	b10b      	cbz	r3, 25f8a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   25f86:	4620      	mov	r0, r4
   25f88:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   25f8a:	f104 0010 	add.w	r0, r4, #16
   25f8e:	2100      	movs	r1, #0
   25f90:	f7ff fe4e 	bl	25c30 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   25f94:	4604      	mov	r4, r0
   25f96:	b1a8      	cbz	r0, 25fc4 <z_impl_k_timer_stop+0x4c>
		z_unpend_thread_no_timeout(thread);
   25f98:	f7ff fe5a 	bl	25c50 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   25f9c:	7b63      	ldrb	r3, [r4, #13]
   25f9e:	06db      	lsls	r3, r3, #27
   25fa0:	d104      	bne.n	25fac <z_impl_k_timer_stop+0x34>
	if (z_is_thread_ready(thread)) {
   25fa2:	69a3      	ldr	r3, [r4, #24]
   25fa4:	b913      	cbnz	r3, 25fac <z_impl_k_timer_stop+0x34>
		z_add_thread_to_ready_q(thread);
   25fa6:	4620      	mov	r0, r4
   25fa8:	f7fc fa80 	bl	224ac <z_add_thread_to_ready_q>
	__asm__ volatile(
   25fac:	f04f 0320 	mov.w	r3, #32
   25fb0:	f3ef 8011 	mrs	r0, BASEPRI
   25fb4:	f383 8811 	msr	BASEPRI, r3
   25fb8:	f3bf 8f6f 	isb	sy

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
		z_reschedule_unlocked();
	}
}
   25fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   25fc0:	f7ff be6a 	b.w	25c98 <z_reschedule_irqlock>
   25fc4:	bd10      	pop	{r4, pc}

00025fc6 <clear_event_registrations>:
	while (num_events--) {
   25fc6:	2314      	movs	r3, #20
{
   25fc8:	b570      	push	{r4, r5, r6, lr}
	event->poller = NULL;
   25fca:	2400      	movs	r4, #0
   25fcc:	2601      	movs	r6, #1
   25fce:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   25fd2:	4281      	cmp	r1, r0
   25fd4:	d100      	bne.n	25fd8 <clear_event_registrations+0x12>
}
   25fd6:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   25fd8:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   25fdc:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   25fe0:	f003 030f 	and.w	r3, r3, #15
   25fe4:	2b04      	cmp	r3, #4
   25fe6:	d80d      	bhi.n	26004 <clear_event_registrations+0x3e>
   25fe8:	fa06 f303 	lsl.w	r3, r6, r3
   25fec:	f013 0f16 	tst.w	r3, #22
   25ff0:	d008      	beq.n	26004 <clear_event_registrations+0x3e>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   25ff2:	f851 3c14 	ldr.w	r3, [r1, #-20]
   25ff6:	b12b      	cbz	r3, 26004 <clear_event_registrations+0x3e>
	node->prev->next = node->next;
   25ff8:	f851 5c10 	ldr.w	r5, [r1, #-16]
   25ffc:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   25ffe:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   26000:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   26004:	f382 8811 	msr	BASEPRI, r2
   26008:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2600c:	f04f 0320 	mov.w	r3, #32
   26010:	f3ef 8211 	mrs	r2, BASEPRI
   26014:	f383 8811 	msr	BASEPRI, r3
   26018:	f3bf 8f6f 	isb	sy
   2601c:	3914      	subs	r1, #20
   2601e:	e7d8      	b.n	25fd2 <clear_event_registrations+0xc>

00026020 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   26020:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   26022:	6884      	ldr	r4, [r0, #8]
{
   26024:	4605      	mov	r5, r0
   26026:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   26028:	b19c      	cbz	r4, 26052 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   2602a:	68a3      	ldr	r3, [r4, #8]
   2602c:	b95b      	cbnz	r3, 26046 <signal_poll_event+0x26>
	int retcode = 0;
   2602e:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   26030:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   26032:	2300      	movs	r3, #0
   26034:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   26036:	68eb      	ldr	r3, [r5, #12]
   26038:	f3c3 3204 	ubfx	r2, r3, #12, #5
   2603c:	4316      	orrs	r6, r2
   2603e:	f366 3310 	bfi	r3, r6, #12, #5
   26042:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   26044:	e004      	b.n	26050 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   26046:	4798      	blx	r3
		poller->is_polling = false;
   26048:	2300      	movs	r3, #0
		if (retcode < 0) {
   2604a:	2800      	cmp	r0, #0
		poller->is_polling = false;
   2604c:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   2604e:	daf0      	bge.n	26032 <signal_poll_event+0x12>
}
   26050:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   26052:	4620      	mov	r0, r4
   26054:	e7ed      	b.n	26032 <signal_poll_event+0x12>

00026056 <k_poll_poller_cb>:
{
   26056:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   26058:	6883      	ldr	r3, [r0, #8]
{
   2605a:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   2605c:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   2605e:	7b63      	ldrb	r3, [r4, #13]
   26060:	079a      	lsls	r2, r3, #30
   26062:	d401      	bmi.n	26068 <k_poll_poller_cb+0x12>
		return 0;
   26064:	2000      	movs	r0, #0
}
   26066:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   26068:	6a23      	ldr	r3, [r4, #32]
   2606a:	3302      	adds	r3, #2
   2606c:	d012      	beq.n	26094 <k_poll_poller_cb+0x3e>
	z_unpend_thread(thread);
   2606e:	4620      	mov	r0, r4
   26070:	f7ff fe28 	bl	25cc4 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   26074:	2d08      	cmp	r5, #8
   26076:	bf0c      	ite	eq
   26078:	f06f 0303 	mvneq.w	r3, #3
   2607c:	2300      	movne	r3, #0
   2607e:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   26080:	7b63      	ldrb	r3, [r4, #13]
   26082:	06db      	lsls	r3, r3, #27
   26084:	d1ee      	bne.n	26064 <k_poll_poller_cb+0xe>
	if (!z_is_thread_ready(thread)) {
   26086:	69a5      	ldr	r5, [r4, #24]
   26088:	2d00      	cmp	r5, #0
   2608a:	d1eb      	bne.n	26064 <k_poll_poller_cb+0xe>
		z_add_thread_to_ready_q(thread);
   2608c:	4620      	mov	r0, r4
   2608e:	f7fc fa0d 	bl	224ac <z_add_thread_to_ready_q>
	return 0;
   26092:	e7e7      	b.n	26064 <k_poll_poller_cb+0xe>
		return -EAGAIN;
   26094:	f06f 000a 	mvn.w	r0, #10
   26098:	e7e5      	b.n	26066 <k_poll_poller_cb+0x10>

0002609a <add_event>:
{
   2609a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2609c:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2609e:	e9d0 2300 	ldrd	r2, r3, [r0]
   260a2:	4290      	cmp	r0, r2
   260a4:	4604      	mov	r4, r0
   260a6:	460d      	mov	r5, r1
   260a8:	d106      	bne.n	260b8 <add_event+0x1e>
	node->prev = list->tail;
   260aa:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   260ac:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   260ae:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   260b0:	6863      	ldr	r3, [r4, #4]
   260b2:	601d      	str	r5, [r3, #0]
	list->tail = node;
   260b4:	6065      	str	r5, [r4, #4]
}
   260b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   260b8:	2b00      	cmp	r3, #0
   260ba:	d0f6      	beq.n	260aa <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   260bc:	689b      	ldr	r3, [r3, #8]
   260be:	6879      	ldr	r1, [r7, #4]
   260c0:	6858      	ldr	r0, [r3, #4]
   260c2:	f7ff fdac 	bl	25c1e <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   260c6:	2800      	cmp	r0, #0
   260c8:	d1ef      	bne.n	260aa <add_event+0x10>
	return list->head == list;
   260ca:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   260cc:	42b4      	cmp	r4, r6
   260ce:	d0ec      	beq.n	260aa <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   260d0:	2e00      	cmp	r6, #0
   260d2:	d0ea      	beq.n	260aa <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   260d4:	68b3      	ldr	r3, [r6, #8]
   260d6:	6878      	ldr	r0, [r7, #4]
   260d8:	6859      	ldr	r1, [r3, #4]
   260da:	f7ff fda0 	bl	25c1e <z_is_t1_higher_prio_than_t2>
   260de:	b128      	cbz	r0, 260ec <add_event+0x52>
	node->prev = successor->prev;
   260e0:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   260e2:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   260e6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   260e8:	6075      	str	r5, [r6, #4]
			return;
   260ea:	e7e4      	b.n	260b6 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   260ec:	6863      	ldr	r3, [r4, #4]
   260ee:	429e      	cmp	r6, r3
   260f0:	d0db      	beq.n	260aa <add_event+0x10>
   260f2:	6836      	ldr	r6, [r6, #0]
   260f4:	e7ec      	b.n	260d0 <add_event+0x36>

000260f6 <register_events>:
{
   260f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   260fa:	f04f 0b00 	mov.w	fp, #0
{
   260fe:	4688      	mov	r8, r1
   26100:	4615      	mov	r5, r2
   26102:	4699      	mov	r9, r3
   26104:	4604      	mov	r4, r0
	int events_registered = 0;
   26106:	465e      	mov	r6, fp
	event->poller = NULL;
   26108:	465f      	mov	r7, fp
	for (int ii = 0; ii < num_events; ii++) {
   2610a:	45c3      	cmp	fp, r8
   2610c:	db02      	blt.n	26114 <register_events+0x1e>
}
   2610e:	4630      	mov	r0, r6
   26110:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26114:	f04f 0320 	mov.w	r3, #32
   26118:	f3ef 8a11 	mrs	sl, BASEPRI
   2611c:	f383 8811 	msr	BASEPRI, r3
   26120:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   26124:	7b63      	ldrb	r3, [r4, #13]
   26126:	f003 030f 	and.w	r3, r3, #15
   2612a:	2b02      	cmp	r3, #2
   2612c:	d005      	beq.n	2613a <register_events+0x44>
   2612e:	2b04      	cmp	r3, #4
   26130:	d006      	beq.n	26140 <register_events+0x4a>
   26132:	2b01      	cmp	r3, #1
   26134:	d118      	bne.n	26168 <register_events+0x72>
		if (event->signal->signaled != 0U) {
   26136:	6922      	ldr	r2, [r4, #16]
   26138:	e000      	b.n	2613c <register_events+0x46>
		if (k_sem_count_get(event->sem) > 0) {
   2613a:	6922      	ldr	r2, [r4, #16]
		if (event->signal->signaled != 0U) {
   2613c:	6892      	ldr	r2, [r2, #8]
   2613e:	e001      	b.n	26144 <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
   26140:	6922      	ldr	r2, [r4, #16]
   26142:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0U) {
   26144:	b182      	cbz	r2, 26168 <register_events+0x72>
	event->state |= state;
   26146:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   26148:	60a7      	str	r7, [r4, #8]
	event->state |= state;
   2614a:	f3c2 3104 	ubfx	r1, r2, #12, #5
   2614e:	430b      	orrs	r3, r1
   26150:	f363 3210 	bfi	r2, r3, #12, #5
   26154:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   26156:	702f      	strb	r7, [r5, #0]
	__asm__ volatile(
   26158:	f38a 8811 	msr	BASEPRI, sl
   2615c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   26160:	f10b 0b01 	add.w	fp, fp, #1
   26164:	3414      	adds	r4, #20
   26166:	e7d0      	b.n	2610a <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   26168:	f1b9 0f00 	cmp.w	r9, #0
   2616c:	d1f4      	bne.n	26158 <register_events+0x62>
   2616e:	782b      	ldrb	r3, [r5, #0]
   26170:	2b00      	cmp	r3, #0
   26172:	d0f1      	beq.n	26158 <register_events+0x62>
	switch (event->type) {
   26174:	7b63      	ldrb	r3, [r4, #13]
   26176:	f003 030f 	and.w	r3, r3, #15
   2617a:	2b02      	cmp	r3, #2
   2617c:	d007      	beq.n	2618e <register_events+0x98>
   2617e:	2b04      	cmp	r3, #4
   26180:	d00e      	beq.n	261a0 <register_events+0xaa>
   26182:	2b01      	cmp	r3, #1
   26184:	d109      	bne.n	2619a <register_events+0xa4>
		add_event(&event->signal->poll_events, event, poller);
   26186:	462a      	mov	r2, r5
   26188:	4621      	mov	r1, r4
   2618a:	6920      	ldr	r0, [r4, #16]
   2618c:	e003      	b.n	26196 <register_events+0xa0>
		add_event(&event->sem->poll_events, event, poller);
   2618e:	462a      	mov	r2, r5
   26190:	4621      	mov	r1, r4
   26192:	6920      	ldr	r0, [r4, #16]
   26194:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   26196:	f7ff ff80 	bl	2609a <add_event>
	event->poller = poller;
   2619a:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   2619c:	3601      	adds	r6, #1
   2619e:	e7db      	b.n	26158 <register_events+0x62>
		add_event(&event->queue->poll_events, event, poller);
   261a0:	6920      	ldr	r0, [r4, #16]
   261a2:	462a      	mov	r2, r5
   261a4:	4621      	mov	r1, r4
   261a6:	3008      	adds	r0, #8
   261a8:	e7f5      	b.n	26196 <register_events+0xa0>

000261aa <z_handle_obj_poll_events>:
	return list->head == list;
   261aa:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   261ac:	4298      	cmp	r0, r3
   261ae:	d009      	beq.n	261c4 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   261b0:	e9d3 2000 	ldrd	r2, r0, [r3]
   261b4:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   261b6:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   261b8:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   261ba:	4618      	mov	r0, r3
	node->prev = NULL;
   261bc:	e9c3 2200 	strd	r2, r2, [r3]
   261c0:	f7ff bf2e 	b.w	26020 <signal_poll_event>
	}
}
   261c4:	4770      	bx	lr

000261c6 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   261c6:	4770      	bx	lr
