
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

0000c000 <_vector_table>:
    c000:	200281e8 	.word	0x200281e8
    c004:	0000f6a5 	.word	0x0000f6a5
    c008:	0001cd7f 	.word	0x0001cd7f
    c00c:	0000f4c5 	.word	0x0000f4c5
    c010:	0000f4c5 	.word	0x0000f4c5
    c014:	0000f4c5 	.word	0x0000f4c5
    c018:	0000f4c5 	.word	0x0000f4c5
    c01c:	0000f4c5 	.word	0x0000f4c5
    c020:	0000f4c5 	.word	0x0000f4c5
    c024:	0000f4c5 	.word	0x0000f4c5
    c028:	0000f4c5 	.word	0x0000f4c5
    c02c:	0000f385 	.word	0x0000f385
    c030:	0000f4c5 	.word	0x0000f4c5
    c034:	0000f4c5 	.word	0x0000f4c5
    c038:	0000f2d5 	.word	0x0000f2d5
    c03c:	0001cd6f 	.word	0x0001cd6f

0000c040 <_irq_vector_table>:
    c040:	0000f665 0000f665 0000f665 0000f665     e...e...e...e...
    c050:	0000f665 0000f665 0000f665 0000f665     e...e...e...e...
    c060:	0000f665 0000f665 0000f665 0000f665     e...e...e...e...
    c070:	0000f665 0000f665 0000f665 0000f665     e...e...e...e...
    c080:	0000f665 0000f665 0000f665 0000f665     e...e...e...e...
    c090:	0000f665 0000f665 0000f665 0000f665     e...e...e...e...
    c0a0:	0000f665 0000f665 0000f665 0000f665     e...e...e...e...
    c0b0:	00011335 0001d869 0000f665 0000f665     5...i...e...e...
    c0c0:	0000f665 0000f665 0000f665 0000f665     e...e...e...e...
    c0d0:	0000f665 0000f665 0000f665 0000f665     e...e...e...e...
    c0e0:	0000f665 0000f665 0001d887 0000f665     e...e.......e...
    c0f0:	0000f665 0000f665 0000f665 0000f665     e...e...e...e...
    c100:	0000f665 0000f665 0000f665 0000f665     e...e...e...e...
    c110:	0000f665 0000f665 0000f665 0000f665     e...e...e...e...
    c120:	0000f665 0000f665 0000f665 0000f665     e...e...e...e...
    c130:	0000f665 0000f665 0000f665 0000f665     e...e...e...e...
    c140:	0000f665                                e...

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b01 00014c10     ...(L....[...L..
    c210:	00000001 0000c000 2002c538 000122ed     ........8.. ."..

Disassembly of section _TEXT_SECTION_NAME_2:

0000c220 <__aeabi_uldivmod>:
    c220:	b953      	cbnz	r3, c238 <__aeabi_uldivmod+0x18>
    c222:	b94a      	cbnz	r2, c238 <__aeabi_uldivmod+0x18>
    c224:	2900      	cmp	r1, #0
    c226:	bf08      	it	eq
    c228:	2800      	cmpeq	r0, #0
    c22a:	bf1c      	itt	ne
    c22c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c234:	f000 b970 	b.w	c518 <__aeabi_idiv0>
    c238:	f1ad 0c08 	sub.w	ip, sp, #8
    c23c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c240:	f000 f806 	bl	c250 <__udivmoddi4>
    c244:	f8dd e004 	ldr.w	lr, [sp, #4]
    c248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c24c:	b004      	add	sp, #16
    c24e:	4770      	bx	lr

0000c250 <__udivmoddi4>:
    c250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c254:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c256:	4604      	mov	r4, r0
    c258:	4689      	mov	r9, r1
    c25a:	2b00      	cmp	r3, #0
    c25c:	f040 8083 	bne.w	c366 <__udivmoddi4+0x116>
    c260:	428a      	cmp	r2, r1
    c262:	4615      	mov	r5, r2
    c264:	d945      	bls.n	c2f2 <__udivmoddi4+0xa2>
    c266:	fab2 f282 	clz	r2, r2
    c26a:	b14a      	cbz	r2, c280 <__udivmoddi4+0x30>
    c26c:	f1c2 0720 	rsb	r7, r2, #32
    c270:	fa01 f302 	lsl.w	r3, r1, r2
    c274:	4095      	lsls	r5, r2
    c276:	4094      	lsls	r4, r2
    c278:	fa20 f707 	lsr.w	r7, r0, r7
    c27c:	ea47 0903 	orr.w	r9, r7, r3
    c280:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c284:	0c23      	lsrs	r3, r4, #16
    c286:	fa1f f885 	uxth.w	r8, r5
    c28a:	fbb9 fcfe 	udiv	ip, r9, lr
    c28e:	fb0e 991c 	mls	r9, lr, ip, r9
    c292:	fb0c f108 	mul.w	r1, ip, r8
    c296:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
    c29a:	4299      	cmp	r1, r3
    c29c:	d90a      	bls.n	c2b4 <__udivmoddi4+0x64>
    c29e:	18eb      	adds	r3, r5, r3
    c2a0:	bf2c      	ite	cs
    c2a2:	2001      	movcs	r0, #1
    c2a4:	2000      	movcc	r0, #0
    c2a6:	4299      	cmp	r1, r3
    c2a8:	d902      	bls.n	c2b0 <__udivmoddi4+0x60>
    c2aa:	2800      	cmp	r0, #0
    c2ac:	f000 811d 	beq.w	c4ea <__udivmoddi4+0x29a>
    c2b0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c2b4:	1a59      	subs	r1, r3, r1
    c2b6:	b2a3      	uxth	r3, r4
    c2b8:	fbb1 f0fe 	udiv	r0, r1, lr
    c2bc:	fb0e 1110 	mls	r1, lr, r0, r1
    c2c0:	fb00 f808 	mul.w	r8, r0, r8
    c2c4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c2c8:	45a0      	cmp	r8, r4
    c2ca:	d905      	bls.n	c2d8 <__udivmoddi4+0x88>
    c2cc:	192c      	adds	r4, r5, r4
    c2ce:	d202      	bcs.n	c2d6 <__udivmoddi4+0x86>
    c2d0:	45a0      	cmp	r8, r4
    c2d2:	f200 810e 	bhi.w	c4f2 <__udivmoddi4+0x2a2>
    c2d6:	3801      	subs	r0, #1
    c2d8:	eba4 0408 	sub.w	r4, r4, r8
    c2dc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c2e0:	2700      	movs	r7, #0
    c2e2:	b11e      	cbz	r6, c2ec <__udivmoddi4+0x9c>
    c2e4:	40d4      	lsrs	r4, r2
    c2e6:	2300      	movs	r3, #0
    c2e8:	e9c6 4300 	strd	r4, r3, [r6]
    c2ec:	4639      	mov	r1, r7
    c2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c2f2:	2a00      	cmp	r2, #0
    c2f4:	d051      	beq.n	c39a <__udivmoddi4+0x14a>
    c2f6:	fab2 f282 	clz	r2, r2
    c2fa:	2a00      	cmp	r2, #0
    c2fc:	f040 80af 	bne.w	c45e <__udivmoddi4+0x20e>
    c300:	1b49      	subs	r1, r1, r5
    c302:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c306:	fa1f f885 	uxth.w	r8, r5
    c30a:	2701      	movs	r7, #1
    c30c:	0c23      	lsrs	r3, r4, #16
    c30e:	fbb1 fcfe 	udiv	ip, r1, lr
    c312:	fb0e 111c 	mls	r1, lr, ip, r1
    c316:	fb08 f00c 	mul.w	r0, r8, ip
    c31a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c31e:	4298      	cmp	r0, r3
    c320:	d90a      	bls.n	c338 <__udivmoddi4+0xe8>
    c322:	18eb      	adds	r3, r5, r3
    c324:	bf2c      	ite	cs
    c326:	2101      	movcs	r1, #1
    c328:	2100      	movcc	r1, #0
    c32a:	4298      	cmp	r0, r3
    c32c:	d902      	bls.n	c334 <__udivmoddi4+0xe4>
    c32e:	2900      	cmp	r1, #0
    c330:	f000 80d7 	beq.w	c4e2 <__udivmoddi4+0x292>
    c334:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c338:	1a19      	subs	r1, r3, r0
    c33a:	b2a3      	uxth	r3, r4
    c33c:	fbb1 f0fe 	udiv	r0, r1, lr
    c340:	fb0e 1110 	mls	r1, lr, r0, r1
    c344:	fb08 f800 	mul.w	r8, r8, r0
    c348:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c34c:	45a0      	cmp	r8, r4
    c34e:	d905      	bls.n	c35c <__udivmoddi4+0x10c>
    c350:	192c      	adds	r4, r5, r4
    c352:	d202      	bcs.n	c35a <__udivmoddi4+0x10a>
    c354:	45a0      	cmp	r8, r4
    c356:	f200 80c1 	bhi.w	c4dc <__udivmoddi4+0x28c>
    c35a:	3801      	subs	r0, #1
    c35c:	eba4 0408 	sub.w	r4, r4, r8
    c360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c364:	e7bd      	b.n	c2e2 <__udivmoddi4+0x92>
    c366:	428b      	cmp	r3, r1
    c368:	d908      	bls.n	c37c <__udivmoddi4+0x12c>
    c36a:	2e00      	cmp	r6, #0
    c36c:	d074      	beq.n	c458 <__udivmoddi4+0x208>
    c36e:	2700      	movs	r7, #0
    c370:	e9c6 0100 	strd	r0, r1, [r6]
    c374:	4638      	mov	r0, r7
    c376:	4639      	mov	r1, r7
    c378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c37c:	fab3 f783 	clz	r7, r3
    c380:	b967      	cbnz	r7, c39c <__udivmoddi4+0x14c>
    c382:	428b      	cmp	r3, r1
    c384:	f0c0 80a4 	bcc.w	c4d0 <__udivmoddi4+0x280>
    c388:	4282      	cmp	r2, r0
    c38a:	f240 80a1 	bls.w	c4d0 <__udivmoddi4+0x280>
    c38e:	4638      	mov	r0, r7
    c390:	2e00      	cmp	r6, #0
    c392:	d0ab      	beq.n	c2ec <__udivmoddi4+0x9c>
    c394:	e9c6 4900 	strd	r4, r9, [r6]
    c398:	e7a8      	b.n	c2ec <__udivmoddi4+0x9c>
    c39a:	deff      	udf	#255	; 0xff
    c39c:	f1c7 0520 	rsb	r5, r7, #32
    c3a0:	40bb      	lsls	r3, r7
    c3a2:	fa02 fc07 	lsl.w	ip, r2, r7
    c3a6:	fa01 f407 	lsl.w	r4, r1, r7
    c3aa:	40ea      	lsrs	r2, r5
    c3ac:	fa20 f805 	lsr.w	r8, r0, r5
    c3b0:	40e9      	lsrs	r1, r5
    c3b2:	fa00 fe07 	lsl.w	lr, r0, r7
    c3b6:	431a      	orrs	r2, r3
    c3b8:	ea48 0404 	orr.w	r4, r8, r4
    c3bc:	ea4f 4812 	mov.w	r8, r2, lsr #16
    c3c0:	0c20      	lsrs	r0, r4, #16
    c3c2:	fa1f f982 	uxth.w	r9, r2
    c3c6:	fbb1 faf8 	udiv	sl, r1, r8
    c3ca:	fb08 111a 	mls	r1, r8, sl, r1
    c3ce:	fb0a fb09 	mul.w	fp, sl, r9
    c3d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    c3d6:	458b      	cmp	fp, r1
    c3d8:	d90a      	bls.n	c3f0 <__udivmoddi4+0x1a0>
    c3da:	1851      	adds	r1, r2, r1
    c3dc:	bf2c      	ite	cs
    c3de:	2301      	movcs	r3, #1
    c3e0:	2300      	movcc	r3, #0
    c3e2:	458b      	cmp	fp, r1
    c3e4:	d902      	bls.n	c3ec <__udivmoddi4+0x19c>
    c3e6:	2b00      	cmp	r3, #0
    c3e8:	f000 8088 	beq.w	c4fc <__udivmoddi4+0x2ac>
    c3ec:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    c3f0:	eba1 010b 	sub.w	r1, r1, fp
    c3f4:	b2a4      	uxth	r4, r4
    c3f6:	fbb1 f0f8 	udiv	r0, r1, r8
    c3fa:	fb08 1110 	mls	r1, r8, r0, r1
    c3fe:	fb00 f909 	mul.w	r9, r0, r9
    c402:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
    c406:	4589      	cmp	r9, r1
    c408:	d904      	bls.n	c414 <__udivmoddi4+0x1c4>
    c40a:	1851      	adds	r1, r2, r1
    c40c:	d201      	bcs.n	c412 <__udivmoddi4+0x1c2>
    c40e:	4589      	cmp	r9, r1
    c410:	d87b      	bhi.n	c50a <__udivmoddi4+0x2ba>
    c412:	3801      	subs	r0, #1
    c414:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c418:	eba1 0109 	sub.w	r1, r1, r9
    c41c:	fba0 890c 	umull	r8, r9, r0, ip
    c420:	4549      	cmp	r1, r9
    c422:	4644      	mov	r4, r8
    c424:	464b      	mov	r3, r9
    c426:	d302      	bcc.n	c42e <__udivmoddi4+0x1de>
    c428:	d106      	bne.n	c438 <__udivmoddi4+0x1e8>
    c42a:	45c6      	cmp	lr, r8
    c42c:	d204      	bcs.n	c438 <__udivmoddi4+0x1e8>
    c42e:	3801      	subs	r0, #1
    c430:	ebb8 040c 	subs.w	r4, r8, ip
    c434:	eb69 0302 	sbc.w	r3, r9, r2
    c438:	2e00      	cmp	r6, #0
    c43a:	d05d      	beq.n	c4f8 <__udivmoddi4+0x2a8>
    c43c:	ebbe 0204 	subs.w	r2, lr, r4
    c440:	eb61 0103 	sbc.w	r1, r1, r3
    c444:	fa01 f505 	lsl.w	r5, r1, r5
    c448:	fa22 f307 	lsr.w	r3, r2, r7
    c44c:	40f9      	lsrs	r1, r7
    c44e:	2700      	movs	r7, #0
    c450:	431d      	orrs	r5, r3
    c452:	e9c6 5100 	strd	r5, r1, [r6]
    c456:	e749      	b.n	c2ec <__udivmoddi4+0x9c>
    c458:	4637      	mov	r7, r6
    c45a:	4630      	mov	r0, r6
    c45c:	e746      	b.n	c2ec <__udivmoddi4+0x9c>
    c45e:	f1c2 0020 	rsb	r0, r2, #32
    c462:	4095      	lsls	r5, r2
    c464:	fa01 f702 	lsl.w	r7, r1, r2
    c468:	fa21 f300 	lsr.w	r3, r1, r0
    c46c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c470:	fa24 f100 	lsr.w	r1, r4, r0
    c474:	fa1f f885 	uxth.w	r8, r5
    c478:	4094      	lsls	r4, r2
    c47a:	4339      	orrs	r1, r7
    c47c:	fbb3 f0fe 	udiv	r0, r3, lr
    c480:	0c0f      	lsrs	r7, r1, #16
    c482:	fb0e 3310 	mls	r3, lr, r0, r3
    c486:	fb00 fc08 	mul.w	ip, r0, r8
    c48a:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    c48e:	459c      	cmp	ip, r3
    c490:	d907      	bls.n	c4a2 <__udivmoddi4+0x252>
    c492:	18eb      	adds	r3, r5, r3
    c494:	bf2c      	ite	cs
    c496:	2701      	movcs	r7, #1
    c498:	2700      	movcc	r7, #0
    c49a:	459c      	cmp	ip, r3
    c49c:	d900      	bls.n	c4a0 <__udivmoddi4+0x250>
    c49e:	b38f      	cbz	r7, c504 <__udivmoddi4+0x2b4>
    c4a0:	3801      	subs	r0, #1
    c4a2:	eba3 030c 	sub.w	r3, r3, ip
    c4a6:	b289      	uxth	r1, r1
    c4a8:	fbb3 f7fe 	udiv	r7, r3, lr
    c4ac:	fb0e 3317 	mls	r3, lr, r7, r3
    c4b0:	fb07 fc08 	mul.w	ip, r7, r8
    c4b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c4b8:	458c      	cmp	ip, r1
    c4ba:	d904      	bls.n	c4c6 <__udivmoddi4+0x276>
    c4bc:	1869      	adds	r1, r5, r1
    c4be:	d201      	bcs.n	c4c4 <__udivmoddi4+0x274>
    c4c0:	458c      	cmp	ip, r1
    c4c2:	d825      	bhi.n	c510 <__udivmoddi4+0x2c0>
    c4c4:	3f01      	subs	r7, #1
    c4c6:	eba1 010c 	sub.w	r1, r1, ip
    c4ca:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
    c4ce:	e71d      	b.n	c30c <__udivmoddi4+0xbc>
    c4d0:	1a84      	subs	r4, r0, r2
    c4d2:	eb61 0303 	sbc.w	r3, r1, r3
    c4d6:	2001      	movs	r0, #1
    c4d8:	4699      	mov	r9, r3
    c4da:	e759      	b.n	c390 <__udivmoddi4+0x140>
    c4dc:	3802      	subs	r0, #2
    c4de:	442c      	add	r4, r5
    c4e0:	e73c      	b.n	c35c <__udivmoddi4+0x10c>
    c4e2:	f1ac 0c02 	sub.w	ip, ip, #2
    c4e6:	442b      	add	r3, r5
    c4e8:	e726      	b.n	c338 <__udivmoddi4+0xe8>
    c4ea:	f1ac 0c02 	sub.w	ip, ip, #2
    c4ee:	442b      	add	r3, r5
    c4f0:	e6e0      	b.n	c2b4 <__udivmoddi4+0x64>
    c4f2:	3802      	subs	r0, #2
    c4f4:	442c      	add	r4, r5
    c4f6:	e6ef      	b.n	c2d8 <__udivmoddi4+0x88>
    c4f8:	4637      	mov	r7, r6
    c4fa:	e6f7      	b.n	c2ec <__udivmoddi4+0x9c>
    c4fc:	f1aa 0a02 	sub.w	sl, sl, #2
    c500:	4411      	add	r1, r2
    c502:	e775      	b.n	c3f0 <__udivmoddi4+0x1a0>
    c504:	3802      	subs	r0, #2
    c506:	442b      	add	r3, r5
    c508:	e7cb      	b.n	c4a2 <__udivmoddi4+0x252>
    c50a:	3802      	subs	r0, #2
    c50c:	4411      	add	r1, r2
    c50e:	e781      	b.n	c414 <__udivmoddi4+0x1c4>
    c510:	3f02      	subs	r7, #2
    c512:	4429      	add	r1, r5
    c514:	e7d7      	b.n	c4c6 <__udivmoddi4+0x276>
    c516:	bf00      	nop

0000c518 <__aeabi_idiv0>:
    c518:	4770      	bx	lr
    c51a:	bf00      	nop

0000c51c <bsd_recoverable_error_handler>:
struct at_param_list m_param_list;

/**@brief Recoverable BSD library error. */
void bsd_recoverable_error_handler(uint32_t err)
{
	LOG_ERR("bsdlib recoverable error: %u", err);
    c51c:	2301      	movs	r3, #1
    c51e:	f04f 0200 	mov.w	r2, #0
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    c522:	4906      	ldr	r1, [pc, #24]	; (c53c <bsd_recoverable_error_handler+0x20>)
    c524:	f363 0207 	bfi	r2, r3, #0, #8
    c528:	4b05      	ldr	r3, [pc, #20]	; (c540 <bsd_recoverable_error_handler+0x24>)
    c52a:	1a5b      	subs	r3, r3, r1
    c52c:	08db      	lsrs	r3, r3, #3
    c52e:	4601      	mov	r1, r0
    c530:	f363 128f 	bfi	r2, r3, #6, #10
    c534:	4803      	ldr	r0, [pc, #12]	; (c544 <bsd_recoverable_error_handler+0x28>)
    c536:	f010 b899 	b.w	1c66c <log_1>
    c53a:	bf00      	nop
    c53c:	0001ee58 	.word	0x0001ee58
    c540:	0001ee58 	.word	0x0001ee58
    c544:	0001f424 	.word	0x0001f424

0000c548 <start_execute>:

void start_execute(void)
{
	int err;

	LOG_INF("NB-IoT DATA COLLECTION PROGRAM");
    c548:	2303      	movs	r3, #3
    c54a:	f04f 0100 	mov.w	r1, #0
{
    c54e:	b510      	push	{r4, lr}
	LOG_INF("NB-IoT DATA COLLECTION PROGRAM");
    c550:	f363 0107 	bfi	r1, r3, #0, #8
    c554:	4c14      	ldr	r4, [pc, #80]	; (c5a8 <start_execute+0x60>)
    c556:	4b15      	ldr	r3, [pc, #84]	; (c5ac <start_execute+0x64>)
    c558:	4815      	ldr	r0, [pc, #84]	; (c5b0 <start_execute+0x68>)
    c55a:	1ae4      	subs	r4, r4, r3
    c55c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    c560:	f364 118f 	bfi	r1, r4, #6, #10
    c564:	f010 f875 	bl	1c652 <log_0>
	err = slm_at_host_init();
    c568:	f000 f902 	bl	c770 <slm_at_host_init>
	if (err != 0) {
    c56c:	4601      	mov	r1, r0
    c56e:	b158      	cbz	r0, c588 <start_execute+0x40>
		LOG_ERR("Failed to init at_host: %d", err);
    c570:	f04f 0200 	mov.w	r2, #0
    c574:	2301      	movs	r3, #1
    c576:	480f      	ldr	r0, [pc, #60]	; (c5b4 <start_execute+0x6c>)
    c578:	f363 0207 	bfi	r2, r3, #0, #8
    c57c:	f364 128f 	bfi	r2, r4, #6, #10
	err = at_params_list_init(&m_param_list, CONFIG_SLM_AT_MAX_PARAM);
	if (err) {
		LOG_ERR("Failed to init AT Parser: %d", err);
		return;
	}
}
    c580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Failed to init AT Parser: %d", err);
    c584:	f010 b872 	b.w	1c66c <log_1>
	err = at_params_list_init(&m_param_list, CONFIG_SLM_AT_MAX_PARAM);
    c588:	2108      	movs	r1, #8
    c58a:	480b      	ldr	r0, [pc, #44]	; (c5b8 <start_execute+0x70>)
    c58c:	f011 fe0d 	bl	1e1aa <at_params_list_init>
	if (err) {
    c590:	4601      	mov	r1, r0
    c592:	b140      	cbz	r0, c5a6 <start_execute+0x5e>
		LOG_ERR("Failed to init AT Parser: %d", err);
    c594:	f04f 0200 	mov.w	r2, #0
    c598:	2301      	movs	r3, #1
    c59a:	f363 0207 	bfi	r2, r3, #0, #8
    c59e:	f364 128f 	bfi	r2, r4, #6, #10
    c5a2:	4806      	ldr	r0, [pc, #24]	; (c5bc <start_execute+0x74>)
    c5a4:	e7ec      	b.n	c580 <start_execute+0x38>
}
    c5a6:	bd10      	pop	{r4, pc}
    c5a8:	0001ee58 	.word	0x0001ee58
    c5ac:	0001ee58 	.word	0x0001ee58
    c5b0:	0001f441 	.word	0x0001f441
    c5b4:	0001f460 	.word	0x0001f460
    c5b8:	20020110 	.word	0x20020110
    c5bc:	0001f47b 	.word	0x0001f47b

0000c5c0 <write_uart_string>:

/* forward declaration */
void slm_at_host_uninit(void);

static inline void write_uart_string(char *str, size_t len)
{
    c5c0:	b570      	push	{r4, r5, r6, lr}
    c5c2:	4604      	mov	r4, r0
	LOG_HEXDUMP_DBG(str, len, "TX");

	for (size_t i = 0; i < len; i++) {
		uart_poll_out(uart_dev, str[i]);
    c5c4:	4e05      	ldr	r6, [pc, #20]	; (c5dc <write_uart_string+0x1c>)
    c5c6:	1845      	adds	r5, r0, r1
	for (size_t i = 0; i < len; i++) {
    c5c8:	42ac      	cmp	r4, r5
    c5ca:	d100      	bne.n	c5ce <write_uart_string+0xe>
	}
}
    c5cc:	bd70      	pop	{r4, r5, r6, pc}
		uart_poll_out(uart_dev, str[i]);
    c5ce:	6830      	ldr	r0, [r6, #0]
    c5d0:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    c5d4:	6843      	ldr	r3, [r0, #4]
    c5d6:	685b      	ldr	r3, [r3, #4]
    c5d8:	4798      	blx	r3
    c5da:	e7f5      	b.n	c5c8 <write_uart_string+0x8>
    c5dc:	2002012c 	.word	0x2002012c

0000c5e0 <isr>:
	at_buf_len = cmd_len;
	cmd_len = 0;
}

static void isr(struct device *dev)
{
    c5e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5e4:	4607      	mov	r7, r0
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
    c5e6:	6843      	ldr	r3, [r0, #4]
    c5e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c5ea:	b103      	cbz	r3, c5ee <isr+0xe>
		return api->irq_update(dev);
    c5ec:	4798      	blx	r3
	if (api->irq_rx_ready) {
    c5ee:	687b      	ldr	r3, [r7, #4]
    c5f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c5f2:	b19b      	cbz	r3, c61c <isr+0x3c>
		return api->irq_rx_ready(dev);
    c5f4:	4638      	mov	r0, r7
    c5f6:	4798      	blx	r3
	u8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
    c5f8:	b180      	cbz	r0, c61c <isr+0x3c>
    c5fa:	4d4f      	ldr	r5, [pc, #316]	; (c738 <isr+0x158>)
		LOG_ERR("Invalid termination mode: %d", term_mode);
    c5fc:	4b4f      	ldr	r3, [pc, #316]	; (c73c <isr+0x15c>)
	cmd_len += 1;
    c5fe:	4e50      	ldr	r6, [pc, #320]	; (c740 <isr+0x160>)
		LOG_ERR("Invalid termination mode: %d", term_mode);
    c600:	1aed      	subs	r5, r5, r3
	if (inside_quotes) {
    c602:	f8df b168 	ldr.w	fp, [pc, #360]	; c76c <isr+0x18c>
		LOG_ERR("Invalid termination mode: %d", term_mode);
    c606:	f3c5 05c9 	ubfx	r5, r5, #3, #10
	if (api->fifo_read) {
    c60a:	687b      	ldr	r3, [r7, #4]
    c60c:	699b      	ldr	r3, [r3, #24]
    c60e:	b12b      	cbz	r3, c61c <isr+0x3c>
		return api->fifo_read(dev, rx_data, size);
    c610:	2201      	movs	r2, #1
    c612:	f10d 0107 	add.w	r1, sp, #7
    c616:	4638      	mov	r0, r7
    c618:	4798      	blx	r3
		return;
	}

	while (uart_fifo_read(dev, &character, 1)) {
    c61a:	b910      	cbnz	r0, c622 <isr+0x42>
		uart_rx_handler(character);
	}
}
    c61c:	b003      	add	sp, #12
    c61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	cmd_len += 1;
    c622:	6832      	ldr	r2, [r6, #0]
		uart_rx_handler(character);
    c624:	f89d 1007 	ldrb.w	r1, [sp, #7]
	cmd_len += 1;
    c628:	1c54      	adds	r4, r2, #1
	switch (character) {
    c62a:	2922      	cmp	r1, #34	; 0x22
	cmd_len += 1;
    c62c:	6034      	str	r4, [r6, #0]
	switch (character) {
    c62e:	d019      	beq.n	c664 <isr+0x84>
    c630:	297f      	cmp	r1, #127	; 0x7f
    c632:	d001      	beq.n	c638 <isr+0x58>
    c634:	2908      	cmp	r1, #8
    c636:	d11b      	bne.n	c670 <isr+0x90>
		pos = pos ? pos - 1 : 0;
    c638:	b102      	cbz	r2, c63c <isr+0x5c>
    c63a:	3a01      	subs	r2, #1
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    c63c:	2c02      	cmp	r4, #2
    c63e:	bf38      	it	cc
    c640:	2402      	movcc	r4, #2
		at_buf[pos] = 0;
    c642:	2000      	movs	r0, #0
    c644:	4b3f      	ldr	r3, [pc, #252]	; (c744 <isr+0x164>)
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    c646:	3c02      	subs	r4, #2
		at_buf[pos] = 0;
    c648:	5498      	strb	r0, [r3, r2]
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    c64a:	6034      	str	r4, [r6, #0]
	if (inside_quotes) {
    c64c:	f89b 3000 	ldrb.w	r3, [fp]
    c650:	2b00      	cmp	r3, #0
    c652:	d1da      	bne.n	c60a <isr+0x2a>
	switch (term_mode) {
    c654:	4b3c      	ldr	r3, [pc, #240]	; (c748 <isr+0x168>)
    c656:	781b      	ldrb	r3, [r3, #0]
    c658:	2b03      	cmp	r3, #3
    c65a:	d85e      	bhi.n	c71a <isr+0x13a>
    c65c:	e8df f003 	tbb	[pc, r3]
    c660:	554d2f2f 	.word	0x554d2f2f
		inside_quotes = !inside_quotes;
    c664:	f89b 3000 	ldrb.w	r3, [fp]
    c668:	f083 0301 	eor.w	r3, r3, #1
    c66c:	f88b 3000 	strb.w	r3, [fp]
		if (cmd_len > AT_MAX_CMD_LEN) {
    c670:	f640 238c 	movw	r3, #2700	; 0xa8c
    c674:	429c      	cmp	r4, r3
    c676:	d90f      	bls.n	c698 <isr+0xb8>
			LOG_ERR("Buffer overflow, dropping '%c'\n", character);
    c678:	f028 023f 	bic.w	r2, r8, #63	; 0x3f
    c67c:	f042 0201 	orr.w	r2, r2, #1
    c680:	f362 0807 	bfi	r8, r2, #0, #8
    c684:	f365 188f 	bfi	r8, r5, #6, #10
    c688:	4642      	mov	r2, r8
    c68a:	4830      	ldr	r0, [pc, #192]	; (c74c <isr+0x16c>)
    c68c:	f00f ffee 	bl	1c66c <log_1>
			cmd_len = AT_MAX_CMD_LEN;
    c690:	f640 238c 	movw	r3, #2700	; 0xa8c
	cmd_len = 0;
    c694:	6033      	str	r3, [r6, #0]
    c696:	e7b8      	b.n	c60a <isr+0x2a>
		} else if (cmd_len < 1) {
    c698:	b974      	cbnz	r4, c6b8 <isr+0xd8>
			LOG_ERR("Invalid AT command length: %d", cmd_len);
    c69a:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    c69e:	f043 0301 	orr.w	r3, r3, #1
    c6a2:	f363 0907 	bfi	r9, r3, #0, #8
    c6a6:	f365 198f 	bfi	r9, r5, #6, #10
    c6aa:	464a      	mov	r2, r9
    c6ac:	4621      	mov	r1, r4
    c6ae:	4828      	ldr	r0, [pc, #160]	; (c750 <isr+0x170>)
    c6b0:	f00f ffdc 	bl	1c66c <log_1>
			cmd_len = 0;
    c6b4:	6034      	str	r4, [r6, #0]
			return;
    c6b6:	e7a8      	b.n	c60a <isr+0x2a>
		at_buf[pos] = character;
    c6b8:	4b22      	ldr	r3, [pc, #136]	; (c744 <isr+0x164>)
    c6ba:	5499      	strb	r1, [r3, r2]
		break;
    c6bc:	e7c6      	b.n	c64c <isr+0x6c>
		if (character == termination[term_mode]) {
    c6be:	4a25      	ldr	r2, [pc, #148]	; (c754 <isr+0x174>)
    c6c0:	5cd3      	ldrb	r3, [r2, r3]
    c6c2:	428b      	cmp	r3, r1
		if ((at_buf[pos - 1]) &&
    c6c4:	d1a1      	bne.n	c60a <isr+0x2a>
	uart_irq_rx_disable(uart_dev);
    c6c6:	4b24      	ldr	r3, [pc, #144]	; (c758 <isr+0x178>)
    c6c8:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
    c6ca:	6843      	ldr	r3, [r0, #4]
    c6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c6ce:	b103      	cbz	r3, c6d2 <isr+0xf2>
		api->irq_rx_disable(dev);
    c6d0:	4798      	blx	r3
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c6d2:	4922      	ldr	r1, [pc, #136]	; (c75c <isr+0x17c>)
    c6d4:	e8d1 3fef 	ldaex	r3, [r1]
    c6d8:	f043 0201 	orr.w	r2, r3, #1
    c6dc:	e8c1 2fe0 	stlex	r0, r2, [r1]
    c6e0:	2800      	cmp	r0, #0
    c6e2:	d1f7      	bne.n	c6d4 <isr+0xf4>
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    c6e4:	07db      	lsls	r3, r3, #31
    c6e6:	d403      	bmi.n	c6f0 <isr+0x110>
		k_queue_append(&work_q->queue, work);
    c6e8:	3908      	subs	r1, #8
    c6ea:	481d      	ldr	r0, [pc, #116]	; (c760 <isr+0x180>)
    c6ec:	f011 fef5 	bl	1e4da <k_queue_append>
	at_buf_len = cmd_len;
    c6f0:	4b1c      	ldr	r3, [pc, #112]	; (c764 <isr+0x184>)
    c6f2:	6832      	ldr	r2, [r6, #0]
    c6f4:	601a      	str	r2, [r3, #0]
	cmd_len = 0;
    c6f6:	2300      	movs	r3, #0
    c6f8:	e7cc      	b.n	c694 <isr+0xb4>
		if ((at_buf[pos - 1]) &&
    c6fa:	4b12      	ldr	r3, [pc, #72]	; (c744 <isr+0x164>)
    c6fc:	441a      	add	r2, r3
    c6fe:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    c702:	2b00      	cmp	r3, #0
    c704:	d081      	beq.n	c60a <isr+0x2a>
    c706:	290a      	cmp	r1, #10
    c708:	e7dc      	b.n	c6c4 <isr+0xe4>
		if ((at_buf[pos - 1] == '\r') && (character == '\n')) {
    c70a:	4b0e      	ldr	r3, [pc, #56]	; (c744 <isr+0x164>)
    c70c:	441a      	add	r2, r3
    c70e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    c712:	2b0d      	cmp	r3, #13
    c714:	f47f af79 	bne.w	c60a <isr+0x2a>
    c718:	e7f5      	b.n	c706 <isr+0x126>
		LOG_ERR("Invalid termination mode: %d", term_mode);
    c71a:	f02a 023f 	bic.w	r2, sl, #63	; 0x3f
    c71e:	f042 0201 	orr.w	r2, r2, #1
    c722:	f362 0a07 	bfi	sl, r2, #0, #8
    c726:	f365 1a8f 	bfi	sl, r5, #6, #10
    c72a:	4652      	mov	r2, sl
    c72c:	4619      	mov	r1, r3
    c72e:	480e      	ldr	r0, [pc, #56]	; (c768 <isr+0x188>)
    c730:	f00f ff9c 	bl	1c66c <log_1>
    c734:	e769      	b.n	c60a <isr+0x2a>
    c736:	bf00      	nop
    c738:	0001ee68 	.word	0x0001ee68
    c73c:	0001ee58 	.word	0x0001ee58
    c740:	2002011c 	.word	0x2002011c
    c744:	20024e4e 	.word	0x20024e4e
    c748:	20026367 	.word	0x20026367
    c74c:	0001f53c 	.word	0x0001f53c
    c750:	0001f55c 	.word	0x0001f55c
    c754:	0001f6bc 	.word	0x0001f6bc
    c758:	2002012c 	.word	0x2002012c
    c75c:	20020128 	.word	0x20020128
    c760:	20024d68 	.word	0x20024d68
    c764:	20020118 	.word	0x20020118
    c768:	0001f57a 	.word	0x0001f57a
    c76c:	20026366 	.word	0x20026366

0000c770 <slm_at_host_init>:
{
	write_uart_string(str, strlen(str));
}

int slm_at_host_init(void)
{
    c770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	enum select_uart uart_id = CONFIG_SLM_CONNECT_UART;
	enum term_modes mode = CONFIG_SLM_AT_HOST_TERMINATION;

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
    c772:	2203      	movs	r2, #3
    c774:	4b41      	ldr	r3, [pc, #260]	; (c87c <slm_at_host_init+0x10c>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
    c776:	4942      	ldr	r1, [pc, #264]	; (c880 <slm_at_host_init+0x110>)
    c778:	2000      	movs	r0, #0
		term_mode = mode;
    c77a:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
    c77c:	f005 fb26 	bl	11dcc <at_notif_register_handler>
	if (err != 0) {
    c780:	4c40      	ldr	r4, [pc, #256]	; (c884 <slm_at_host_init+0x114>)
    c782:	4b41      	ldr	r3, [pc, #260]	; (c888 <slm_at_host_init+0x118>)
    c784:	4605      	mov	r5, r0
    c786:	1ae4      	subs	r4, r4, r3
    c788:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    c78c:	b168      	cbz	r0, c7aa <slm_at_host_init+0x3a>
		LOG_ERR("Can't register handler err=%d", err);
    c78e:	f04f 0200 	mov.w	r2, #0
    c792:	2301      	movs	r3, #1
    c794:	f363 0207 	bfi	r2, r3, #0, #8
    c798:	4601      	mov	r1, r0
    c79a:	f364 128f 	bfi	r2, r4, #6, #10
    c79e:	483b      	ldr	r0, [pc, #236]	; (c88c <slm_at_host_init+0x11c>)
    c7a0:	f00f ff64 	bl	1c66c <log_1>
// 		return -EFAULT;
// 	}
// #endif
	LOG_DBG("at_host init done");
	return err;
}
    c7a4:	4628      	mov	r0, r5
    c7a6:	b003      	add	sp, #12
    c7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    c7aa:	4839      	ldr	r0, [pc, #228]	; (c890 <slm_at_host_init+0x120>)
    c7ac:	f00e f93c 	bl	1aa28 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
    c7b0:	4d38      	ldr	r5, [pc, #224]	; (c894 <slm_at_host_init+0x124>)
    c7b2:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
    c7b4:	b1e0      	cbz	r0, c7f0 <slm_at_host_init+0x80>
			LOG_ERR("UART check failed: %d. "
    c7b6:	4f38      	ldr	r7, [pc, #224]	; (c898 <slm_at_host_init+0x128>)
		err = uart_err_check(uart_dev);
    c7b8:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
    c7ba:	6843      	ldr	r3, [r0, #4]
    c7bc:	689b      	ldr	r3, [r3, #8]
    c7be:	2b00      	cmp	r3, #0
    c7c0:	d037      	beq.n	c832 <slm_at_host_init+0xc2>
		return api->err_check(dev);
    c7c2:	4798      	blx	r3
		if (err) {
    c7c4:	4601      	mov	r1, r0
    c7c6:	b3a0      	cbz	r0, c832 <slm_at_host_init+0xc2>
			LOG_ERR("UART check failed: %d. "
    c7c8:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
    c7cc:	f043 0301 	orr.w	r3, r3, #1
    c7d0:	f363 0607 	bfi	r6, r3, #0, #8
    c7d4:	f364 168f 	bfi	r6, r4, #6, #10
    c7d8:	4632      	mov	r2, r6
    c7da:	4638      	mov	r0, r7
    c7dc:	f00f ff46 	bl	1c66c <log_1>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
    c7e0:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
    c7e2:	6843      	ldr	r3, [r0, #4]
    c7e4:	699b      	ldr	r3, [r3, #24]
    c7e6:	b9eb      	cbnz	r3, c824 <slm_at_host_init+0xb4>
	if (z_syscall_trap()) {
		return (s32_t) arch_syscall_invoke1(*(uintptr_t *)&ms, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(ms);
    c7e8:	200a      	movs	r0, #10
    c7ea:	f00e ffc1 	bl	1b770 <z_impl_k_sleep>
    c7ee:	e7e3      	b.n	c7b8 <slm_at_host_init+0x48>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
    c7f0:	2301      	movs	r3, #1
    c7f2:	f04f 0200 	mov.w	r2, #0
    c7f6:	f363 0207 	bfi	r2, r3, #0, #8
    c7fa:	f364 128f 	bfi	r2, r4, #6, #10
    c7fe:	4924      	ldr	r1, [pc, #144]	; (c890 <slm_at_host_init+0x120>)
    c800:	4826      	ldr	r0, [pc, #152]	; (c89c <slm_at_host_init+0x12c>)
    c802:	f00f ff33 	bl	1c66c <log_1>
		LOG_ERR("UART can not be initialized: %d", err);
    c806:	f04f 0200 	mov.w	r2, #0
    c80a:	2301      	movs	r3, #1
    c80c:	f06f 0115 	mvn.w	r1, #21
    c810:	f363 0207 	bfi	r2, r3, #0, #8
    c814:	4822      	ldr	r0, [pc, #136]	; (c8a0 <slm_at_host_init+0x130>)
    c816:	f364 128f 	bfi	r2, r4, #6, #10
		LOG_ERR("TCPIP could not be initialized: %d", err);
    c81a:	f00f ff27 	bl	1c66c <log_1>
		return -EFAULT;
    c81e:	f06f 050d 	mvn.w	r5, #13
    c822:	e7bf      	b.n	c7a4 <slm_at_host_init+0x34>
		return api->fifo_read(dev, rx_data, size);
    c824:	2201      	movs	r2, #1
    c826:	f10d 0107 	add.w	r1, sp, #7
    c82a:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
    c82c:	2800      	cmp	r0, #0
    c82e:	d1d7      	bne.n	c7e0 <slm_at_host_init+0x70>
    c830:	e7da      	b.n	c7e8 <slm_at_host_init+0x78>
	uart_irq_callback_set(uart_dev, isr);
    c832:	682a      	ldr	r2, [r5, #0]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
    c834:	6853      	ldr	r3, [r2, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    c836:	b123      	cbz	r3, c842 <slm_at_host_init+0xd2>
    c838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    c83a:	b113      	cbz	r3, c842 <slm_at_host_init+0xd2>
		api->irq_callback_set(dev, cb, user_data);
    c83c:	4919      	ldr	r1, [pc, #100]	; (c8a4 <slm_at_host_init+0x134>)
    c83e:	4610      	mov	r0, r2
    c840:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    c842:	2200      	movs	r2, #0
    c844:	4b18      	ldr	r3, [pc, #96]	; (c8a8 <slm_at_host_init+0x138>)
    c846:	4919      	ldr	r1, [pc, #100]	; (c8ac <slm_at_host_init+0x13c>)
	uart_irq_rx_enable(uart_dev);
    c848:	6828      	ldr	r0, [r5, #0]
    c84a:	e9c3 1201 	strd	r1, r2, [r3, #4]
    c84e:	601a      	str	r2, [r3, #0]
    c850:	f00f fb48 	bl	1bee4 <uart_irq_rx_enable>
	write_uart_string(SLM_SYNC_STR, sizeof(SLM_SYNC_STR)-1);
    c854:	2107      	movs	r1, #7
    c856:	4816      	ldr	r0, [pc, #88]	; (c8b0 <slm_at_host_init+0x140>)
    c858:	f7ff feb2 	bl	c5c0 <write_uart_string>
	err = slm_at_tcpip_init(slm_at_callback);
    c85c:	4815      	ldr	r0, [pc, #84]	; (c8b4 <slm_at_host_init+0x144>)
    c85e:	f001 fa49 	bl	dcf4 <slm_at_tcpip_init>
	if (err) {
    c862:	4605      	mov	r5, r0
    c864:	2800      	cmp	r0, #0
    c866:	d09d      	beq.n	c7a4 <slm_at_host_init+0x34>
		LOG_ERR("TCPIP could not be initialized: %d", err);
    c868:	f04f 0200 	mov.w	r2, #0
    c86c:	2301      	movs	r3, #1
    c86e:	f363 0207 	bfi	r2, r3, #0, #8
    c872:	4601      	mov	r1, r0
    c874:	f364 128f 	bfi	r2, r4, #6, #10
    c878:	480f      	ldr	r0, [pc, #60]	; (c8b8 <slm_at_host_init+0x148>)
    c87a:	e7ce      	b.n	c81a <slm_at_host_init+0xaa>
    c87c:	20026367 	.word	0x20026367
    c880:	0001bf03 	.word	0x0001bf03
    c884:	0001ee68 	.word	0x0001ee68
    c888:	0001ee58 	.word	0x0001ee58
    c88c:	0001f597 	.word	0x0001f597
    c890:	0001f5b5 	.word	0x0001f5b5
    c894:	2002012c 	.word	0x2002012c
    c898:	0001f5ec 	.word	0x0001f5ec
    c89c:	0001f5bc 	.word	0x0001f5bc
    c8a0:	0001f5cc 	.word	0x0001f5cc
    c8a4:	0000c5e1 	.word	0x0000c5e1
    c8a8:	20020120 	.word	0x20020120
    c8ac:	0000c94d 	.word	0x0000c94d
    c8b0:	0001f621 	.word	0x0001f621
    c8b4:	0001beef 	.word	0x0001beef
    c8b8:	0001f629 	.word	0x0001f629

0000c8bc <slm_at_host_uninit>:

void slm_at_host_uninit(void)
{
    c8bc:	b508      	push	{r3, lr}
	int err;

#if defined(CONFIG_SLM_TCPIP_AT_MODE)
	/* Uninitialize the TCPIP module */
	err = slm_at_tcpip_uninit();
    c8be:	f00f fb32 	bl	1bf26 <slm_at_tcpip_uninit>
	if (err) {
    c8c2:	4601      	mov	r1, r0
    c8c4:	b168      	cbz	r0, c8e2 <slm_at_host_uninit+0x26>
		LOG_WRN("TCPIP could not be uninitialized: %d", err);
    c8c6:	2302      	movs	r3, #2
    c8c8:	f04f 0200 	mov.w	r2, #0
    c8cc:	4819      	ldr	r0, [pc, #100]	; (c934 <slm_at_host_uninit+0x78>)
    c8ce:	f363 0207 	bfi	r2, r3, #0, #8
    c8d2:	4b19      	ldr	r3, [pc, #100]	; (c938 <slm_at_host_uninit+0x7c>)
    c8d4:	1a1b      	subs	r3, r3, r0
    c8d6:	08db      	lsrs	r3, r3, #3
    c8d8:	f363 128f 	bfi	r2, r3, #6, #10
    c8dc:	4817      	ldr	r0, [pc, #92]	; (c93c <slm_at_host_uninit+0x80>)
    c8de:	f00f fec5 	bl	1c66c <log_1>
	}
#endif
#if defined(CONFIG_SLM_GPS_AT_MODE)
	/* Uninitialize the GPS module */
	err = slm_at_gps_uninit();
    c8e2:	f001 fe5b 	bl	e59c <slm_at_gps_uninit>
	if (err) {
    c8e6:	4601      	mov	r1, r0
    c8e8:	b168      	cbz	r0, c906 <slm_at_host_uninit+0x4a>
		LOG_WRN("GPS could not be uninitialized: %d", err);
    c8ea:	2302      	movs	r3, #2
    c8ec:	f04f 0200 	mov.w	r2, #0
    c8f0:	4810      	ldr	r0, [pc, #64]	; (c934 <slm_at_host_uninit+0x78>)
    c8f2:	f363 0207 	bfi	r2, r3, #0, #8
    c8f6:	4b10      	ldr	r3, [pc, #64]	; (c938 <slm_at_host_uninit+0x7c>)
    c8f8:	1a1b      	subs	r3, r3, r0
    c8fa:	08db      	lsrs	r3, r3, #3
    c8fc:	f363 128f 	bfi	r2, r3, #6, #10
    c900:	480f      	ldr	r0, [pc, #60]	; (c940 <slm_at_host_uninit+0x84>)
    c902:	f00f feb3 	bl	1c66c <log_1>
	}
#endif
	err = at_notif_deregister_handler(NULL, response_handler);
    c906:	490f      	ldr	r1, [pc, #60]	; (c944 <slm_at_host_uninit+0x88>)
    c908:	2000      	movs	r0, #0
    c90a:	f005 faaf 	bl	11e6c <at_notif_deregister_handler>
	if (err != 0) {
    c90e:	4601      	mov	r1, r0
    c910:	b178      	cbz	r0, c932 <slm_at_host_uninit+0x76>
		LOG_WRN("Can't deregister handler err=%d", err);
    c912:	2302      	movs	r3, #2
    c914:	f04f 0200 	mov.w	r2, #0
    c918:	4806      	ldr	r0, [pc, #24]	; (c934 <slm_at_host_uninit+0x78>)
    c91a:	f363 0207 	bfi	r2, r3, #0, #8
    c91e:	4b06      	ldr	r3, [pc, #24]	; (c938 <slm_at_host_uninit+0x7c>)
    c920:	1a1b      	subs	r3, r3, r0
    c922:	08db      	lsrs	r3, r3, #3
    c924:	f363 128f 	bfi	r2, r3, #6, #10
    c928:	4807      	ldr	r0, [pc, #28]	; (c948 <slm_at_host_uninit+0x8c>)
	if (err != 0) {
		LOG_WRN("Can't power off uart err=%d", err);
	}
#endif
	LOG_DBG("at_host uninit done");
}
    c92a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_WRN("Can't deregister handler err=%d", err);
    c92e:	f00f be9d 	b.w	1c66c <log_1>
}
    c932:	bd08      	pop	{r3, pc}
    c934:	0001ee58 	.word	0x0001ee58
    c938:	0001ee68 	.word	0x0001ee68
    c93c:	0001f64c 	.word	0x0001f64c
    c940:	0001f671 	.word	0x0001f671
    c944:	0001bf03 	.word	0x0001bf03
    c948:	0001f694 	.word	0x0001f694

0000c94c <cmd_send>:
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    c94c:	4a68      	ldr	r2, [pc, #416]	; (caf0 <cmd_send+0x1a4>)
    c94e:	4b69      	ldr	r3, [pc, #420]	; (caf4 <cmd_send+0x1a8>)
    c950:	6811      	ldr	r1, [r2, #0]
    c952:	f640 228b 	movw	r2, #2699	; 0xa8b
    c956:	4291      	cmp	r1, r2
    c958:	bf28      	it	cs
    c95a:	4611      	movcs	r1, r2
    c95c:	2200      	movs	r2, #0
{
    c95e:	b530      	push	{r4, r5, lr}
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    c960:	461c      	mov	r4, r3
    c962:	4865      	ldr	r0, [pc, #404]	; (caf8 <cmd_send+0x1ac>)
{
    c964:	b087      	sub	sp, #28
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    c966:	545a      	strb	r2, [r3, r1]
static inline bool slm_at_cmd_cmp(const char *cmd,
				const char *slm_cmd,
				u8_t length)
{
	for (int i = 0; i < length; i++) {
		if (toupper(*(cmd + i)) != *(slm_cmd + i)) {
    c968:	f814 1b01 	ldrb.w	r1, [r4], #1
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
}

static inline int toupper(int chr)
{
	return (int)((chr >= (int)'a' && chr <=
    c96c:	f1a1 0561 	sub.w	r5, r1, #97	; 0x61
    c970:	2d19      	cmp	r5, #25
    c972:	f810 5b01 	ldrb.w	r5, [r0], #1
    c976:	bf98      	it	ls
    c978:	3920      	subls	r1, #32
    c97a:	428d      	cmp	r5, r1
    c97c:	d105      	bne.n	c98a <cmd_send+0x3e>
	for (int i = 0; i < length; i++) {
    c97e:	3201      	adds	r2, #1
    c980:	2a0a      	cmp	r2, #10
    c982:	d1f1      	bne.n	c968 <cmd_send+0x1c>
		write_uart_string(SLM_VERSION, sizeof(SLM_VERSION));
    c984:	2110      	movs	r1, #16
    c986:	485d      	ldr	r0, [pc, #372]	; (cafc <cmd_send+0x1b0>)
    c988:	e079      	b.n	ca7e <cmd_send+0x132>
    c98a:	2100      	movs	r1, #0
    c98c:	485c      	ldr	r0, [pc, #368]	; (cb00 <cmd_send+0x1b4>)
		if (toupper(*(cmd + i)) != *(slm_cmd + i)) {
    c98e:	f813 2b01 	ldrb.w	r2, [r3], #1
    c992:	f1a2 0461 	sub.w	r4, r2, #97	; 0x61
    c996:	2c19      	cmp	r4, #25
    c998:	f810 4b01 	ldrb.w	r4, [r0], #1
    c99c:	bf98      	it	ls
    c99e:	3a20      	subls	r2, #32
    c9a0:	4294      	cmp	r4, r2
    c9a2:	d17a      	bne.n	ca9a <cmd_send+0x14e>
	for (int i = 0; i < length; i++) {
    c9a4:	3101      	adds	r1, #1
    c9a6:	2909      	cmp	r1, #9
    c9a8:	d1f1      	bne.n	c98e <cmd_send+0x42>
	ret = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    c9aa:	4a56      	ldr	r2, [pc, #344]	; (cb04 <cmd_send+0x1b8>)
    c9ac:	2100      	movs	r1, #0
    c9ae:	4851      	ldr	r0, [pc, #324]	; (caf4 <cmd_send+0x1a8>)
    c9b0:	f011 fbaa 	bl	1e108 <at_parser_params_from_str>
	if (ret < 0) {
    c9b4:	1e04      	subs	r4, r0, #0
    c9b6:	da18      	bge.n	c9ea <cmd_send+0x9e>
		LOG_ERR("Failed to parse AT command %d", ret);
    c9b8:	2301      	movs	r3, #1
    c9ba:	f04f 0200 	mov.w	r2, #0
    c9be:	4952      	ldr	r1, [pc, #328]	; (cb08 <cmd_send+0x1bc>)
    c9c0:	f363 0207 	bfi	r2, r3, #0, #8
    c9c4:	4b51      	ldr	r3, [pc, #324]	; (cb0c <cmd_send+0x1c0>)
    c9c6:	4852      	ldr	r0, [pc, #328]	; (cb10 <cmd_send+0x1c4>)
    c9c8:	1a5b      	subs	r3, r3, r1
    c9ca:	08db      	lsrs	r3, r3, #3
    c9cc:	f363 128f 	bfi	r2, r3, #6, #10
    c9d0:	4621      	mov	r1, r4
    c9d2:	f00f fe4b 	bl	1c66c <log_1>
		write_uart_string(ERROR_STR, sizeof(ERROR_STR));
    c9d6:	2108      	movs	r1, #8
    c9d8:	484e      	ldr	r0, [pc, #312]	; (cb14 <cmd_send+0x1c8>)
		write_uart_string(str, ++chars);
    c9da:	f7ff fdf1 	bl	c5c0 <write_uart_string>
	uart_irq_rx_enable(uart_dev);
    c9de:	4b4e      	ldr	r3, [pc, #312]	; (cb18 <cmd_send+0x1cc>)
    c9e0:	6818      	ldr	r0, [r3, #0]
    c9e2:	f00f fa7f 	bl	1bee4 <uart_irq_rx_enable>
}
    c9e6:	b007      	add	sp, #28
    c9e8:	bd30      	pop	{r4, r5, pc}
	type = at_parser_cmd_type_get(at_cmd);
    c9ea:	4842      	ldr	r0, [pc, #264]	; (caf4 <cmd_send+0x1a8>)
    c9ec:	f011 fb8f 	bl	1e10e <at_parser_cmd_type_get>
	if (type == AT_CMD_TYPE_SET_COMMAND) {
    c9f0:	2801      	cmp	r0, #1
	type = at_parser_cmd_type_get(at_cmd);
    c9f2:	4605      	mov	r5, r0
	if (type == AT_CMD_TYPE_SET_COMMAND) {
    c9f4:	d12c      	bne.n	ca50 <cmd_send+0x104>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    c9f6:	4843      	ldr	r0, [pc, #268]	; (cb04 <cmd_send+0x1b8>)
    c9f8:	f011 fcb5 	bl	1e366 <at_params_valid_count_get>
    c9fc:	2801      	cmp	r0, #1
    c9fe:	d80e      	bhi.n	ca1e <cmd_send+0xd2>
			LOG_ERR("AT parameter error");
    ca00:	2301      	movs	r3, #1
    ca02:	f04f 0100 	mov.w	r1, #0
    ca06:	4a40      	ldr	r2, [pc, #256]	; (cb08 <cmd_send+0x1bc>)
    ca08:	f363 0107 	bfi	r1, r3, #0, #8
    ca0c:	4b3f      	ldr	r3, [pc, #252]	; (cb0c <cmd_send+0x1c0>)
    ca0e:	4843      	ldr	r0, [pc, #268]	; (cb1c <cmd_send+0x1d0>)
    ca10:	1a9b      	subs	r3, r3, r2
    ca12:	08db      	lsrs	r3, r3, #3
    ca14:	f363 118f 	bfi	r1, r3, #6, #10
    ca18:	f00f fe1b 	bl	1c652 <log_0>
		if (err == 0) {
    ca1c:	e7db      	b.n	c9d6 <cmd_send+0x8a>
		ret = at_params_short_get(&m_param_list, 1, &shutdown_mode);
    ca1e:	aa02      	add	r2, sp, #8
    ca20:	4629      	mov	r1, r5
    ca22:	4838      	ldr	r0, [pc, #224]	; (cb04 <cmd_send+0x1b8>)
    ca24:	f011 fc6a 	bl	1e2fc <at_params_short_get>
		if (ret < 0) {
    ca28:	2800      	cmp	r0, #0
    ca2a:	dbe9      	blt.n	ca00 <cmd_send+0xb4>
		switch (shutdown_mode) {
    ca2c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    ca30:	2b00      	cmp	r3, #0
    ca32:	d0e5      	beq.n	ca00 <cmd_send+0xb4>
    ca34:	2b02      	cmp	r3, #2
    ca36:	d908      	bls.n	ca4a <cmd_send+0xfe>
    ca38:	2b03      	cmp	r3, #3
    ca3a:	d1e1      	bne.n	ca00 <cmd_send+0xb4>
			enter_sleep(shutdown_mode);
    ca3c:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    ca40:	f00f fa30 	bl	1bea4 <enter_sleep>
		write_uart_string(OK_STR, sizeof(OK_STR));
    ca44:	2105      	movs	r1, #5
    ca46:	4836      	ldr	r0, [pc, #216]	; (cb20 <cmd_send+0x1d4>)
    ca48:	e7c7      	b.n	c9da <cmd_send+0x8e>
			slm_at_host_uninit();
    ca4a:	f7ff ff37 	bl	c8bc <slm_at_host_uninit>
    ca4e:	e7f5      	b.n	ca3c <cmd_send+0xf0>
		if (err == 0) {
    ca50:	2c00      	cmp	r4, #0
    ca52:	d1c0      	bne.n	c9d6 <cmd_send+0x8a>
    ca54:	e7f6      	b.n	ca44 <cmd_send+0xf8>
	switch (state) {
    ca56:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ca5a:	2b03      	cmp	r3, #3
    ca5c:	d8bf      	bhi.n	c9de <cmd_send+0x92>
    ca5e:	a201      	add	r2, pc, #4	; (adr r2, ca64 <cmd_send+0x118>)
    ca60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ca64:	0000ca75 	.word	0x0000ca75
    ca68:	0000c9d7 	.word	0x0000c9d7
    ca6c:	0000ca85 	.word	0x0000ca85
    ca70:	0000ca95 	.word	0x0000ca95
		write_uart_string(buf, strlen(buf));
    ca74:	482b      	ldr	r0, [pc, #172]	; (cb24 <cmd_send+0x1d8>)
    ca76:	f010 fb27 	bl	1d0c8 <strlen>
    ca7a:	4601      	mov	r1, r0
    ca7c:	4829      	ldr	r0, [pc, #164]	; (cb24 <cmd_send+0x1d8>)
		write_uart_string(SLM_VERSION, sizeof(SLM_VERSION));
    ca7e:	f7ff fd9f 	bl	c5c0 <write_uart_string>
    ca82:	e7df      	b.n	ca44 <cmd_send+0xf8>
		chars = sprintf(str, "+CMS: %d\r\n", err);
    ca84:	460a      	mov	r2, r1
    ca86:	4928      	ldr	r1, [pc, #160]	; (cb28 <cmd_send+0x1dc>)
		chars = sprintf(str, "+CME: %d\r\n", err);
    ca88:	a802      	add	r0, sp, #8
    ca8a:	f003 ffd5 	bl	10a38 <sprintf>
		write_uart_string(str, ++chars);
    ca8e:	1c41      	adds	r1, r0, #1
    ca90:	a802      	add	r0, sp, #8
    ca92:	e7a2      	b.n	c9da <cmd_send+0x8e>
		chars = sprintf(str, "+CME: %d\r\n", err);
    ca94:	460a      	mov	r2, r1
    ca96:	4925      	ldr	r1, [pc, #148]	; (cb2c <cmd_send+0x1e0>)
    ca98:	e7f6      	b.n	ca88 <cmd_send+0x13c>
	err = slm_at_tcpip_parse(at_buf);
    ca9a:	4816      	ldr	r0, [pc, #88]	; (caf4 <cmd_send+0x1a8>)
    ca9c:	f000 fe52 	bl	d744 <slm_at_tcpip_parse>
	if (err == 0) {
    caa0:	2800      	cmp	r0, #0
    caa2:	d0cf      	beq.n	ca44 <cmd_send+0xf8>
	} else if (err != -ENOTSUP) {
    caa4:	3023      	adds	r0, #35	; 0x23
    caa6:	d196      	bne.n	c9d6 <cmd_send+0x8a>
	err = slm_at_gps_parse(at_buf);
    caa8:	4812      	ldr	r0, [pc, #72]	; (caf4 <cmd_send+0x1a8>)
    caaa:	f001 fd35 	bl	e518 <slm_at_gps_parse>
	if (err == 0) {
    caae:	2800      	cmp	r0, #0
    cab0:	d0c8      	beq.n	ca44 <cmd_send+0xf8>
	} else if (err != -ENOTSUP) {
    cab2:	3023      	adds	r0, #35	; 0x23
    cab4:	d18f      	bne.n	c9d6 <cmd_send+0x8a>
	err = at_cmd_write(at_buf, buf, AT_MAX_CMD_LEN, &state);
    cab6:	491b      	ldr	r1, [pc, #108]	; (cb24 <cmd_send+0x1d8>)
    cab8:	f10d 0307 	add.w	r3, sp, #7
    cabc:	f640 228c 	movw	r2, #2700	; 0xa8c
    cac0:	480c      	ldr	r0, [pc, #48]	; (caf4 <cmd_send+0x1a8>)
    cac2:	f005 f8df 	bl	11c84 <at_cmd_write>
	if (err < 0) {
    cac6:	1e01      	subs	r1, r0, #0
    cac8:	dac5      	bge.n	ca56 <cmd_send+0x10a>
		LOG_ERR("Could not send AT command to modem: %d", err);
    caca:	2301      	movs	r3, #1
    cacc:	f04f 0200 	mov.w	r2, #0
    cad0:	480d      	ldr	r0, [pc, #52]	; (cb08 <cmd_send+0x1bc>)
    cad2:	f363 0207 	bfi	r2, r3, #0, #8
    cad6:	4b0d      	ldr	r3, [pc, #52]	; (cb0c <cmd_send+0x1c0>)
    cad8:	1a1b      	subs	r3, r3, r0
    cada:	08db      	lsrs	r3, r3, #3
    cadc:	f363 128f 	bfi	r2, r3, #6, #10
    cae0:	4813      	ldr	r0, [pc, #76]	; (cb30 <cmd_send+0x1e4>)
    cae2:	f00f fdc3 	bl	1c66c <log_1>
		state = AT_CMD_ERROR;
    cae6:	2301      	movs	r3, #1
    cae8:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (state) {
    caec:	e773      	b.n	c9d6 <cmd_send+0x8a>
    caee:	bf00      	nop
    caf0:	20020118 	.word	0x20020118
    caf4:	20024e4e 	.word	0x20024e4e
    caf8:	0001f49c 	.word	0x0001f49c
    cafc:	0001f52c 	.word	0x0001f52c
    cb00:	0001f4a7 	.word	0x0001f4a7
    cb04:	20020110 	.word	0x20020110
    cb08:	0001ee58 	.word	0x0001ee58
    cb0c:	0001ee68 	.word	0x0001ee68
    cb10:	0001f4b1 	.word	0x0001f4b1
    cb14:	0001f4e7 	.word	0x0001f4e7
    cb18:	2002012c 	.word	0x2002012c
    cb1c:	0001f4cf 	.word	0x0001f4cf
    cb20:	0001f4e2 	.word	0x0001f4e2
    cb24:	200258da 	.word	0x200258da
    cb28:	0001f516 	.word	0x0001f516
    cb2c:	0001f521 	.word	0x0001f521
    cb30:	0001f4ef 	.word	0x0001f4ef

0000cb34 <socket>:
static inline int socket(int family, int type, int proto)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->socket);

	return socket_ops->socket(family, type, proto);
    cb34:	4b01      	ldr	r3, [pc, #4]	; (cb3c <socket+0x8>)
    cb36:	681b      	ldr	r3, [r3, #0]
    cb38:	681b      	ldr	r3, [r3, #0]
    cb3a:	4718      	bx	r3
    cb3c:	20020344 	.word	0x20020344

0000cb40 <close>:
static inline int close(int sock)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->close);

	return socket_ops->close(sock);
    cb40:	4b01      	ldr	r3, [pc, #4]	; (cb48 <close+0x8>)
    cb42:	681b      	ldr	r3, [r3, #0]
    cb44:	685b      	ldr	r3, [r3, #4]
    cb46:	4718      	bx	r3
    cb48:	20020344 	.word	0x20020344

0000cb4c <do_socket_close>:
	LOG_DBG("Socket opened");
	return ret;
}

static int do_socket_close(int error)
{
    cb4c:	b570      	push	{r4, r5, r6, lr}
	int ret = 0;

	if (client.sock > 0) {
    cb4e:	4c18      	ldr	r4, [pc, #96]	; (cbb0 <do_socket_close+0x64>)
{
    cb50:	4606      	mov	r6, r0
	if (client.sock > 0) {
    cb52:	6820      	ldr	r0, [r4, #0]
    cb54:	2800      	cmp	r0, #0
    cb56:	dd29      	ble.n	cbac <do_socket_close+0x60>
		ret = close(client.sock);
    cb58:	f7ff fff2 	bl	cb40 <close>
		if (ret < 0) {
    cb5c:	1e05      	subs	r5, r0, #0
    cb5e:	da16      	bge.n	cb8e <do_socket_close+0x42>
			LOG_WRN("close() failed: %d", -errno);
    cb60:	2302      	movs	r3, #2
    cb62:	f04f 0500 	mov.w	r5, #0
    cb66:	4a13      	ldr	r2, [pc, #76]	; (cbb4 <do_socket_close+0x68>)
    cb68:	f363 0507 	bfi	r5, r3, #0, #8
    cb6c:	4b12      	ldr	r3, [pc, #72]	; (cbb8 <do_socket_close+0x6c>)
    cb6e:	1a9b      	subs	r3, r3, r2
    cb70:	08db      	lsrs	r3, r3, #3
    cb72:	f363 158f 	bfi	r5, r3, #6, #10
    cb76:	f00f f9d2 	bl	1bf1e <z_errno>
    cb7a:	6801      	ldr	r1, [r0, #0]
    cb7c:	462a      	mov	r2, r5
    cb7e:	4249      	negs	r1, r1
    cb80:	480e      	ldr	r0, [pc, #56]	; (cbbc <do_socket_close+0x70>)
    cb82:	f00f fd73 	bl	1c66c <log_1>
			ret = -errno;
    cb86:	f00f f9ca 	bl	1bf1e <z_errno>
    cb8a:	6805      	ldr	r5, [r0, #0]
    cb8c:	426d      	negs	r5, r5
		}
		client.sock = INVALID_SOCKET;
    cb8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cb92:	6023      	str	r3, [r4, #0]
		client.ip_proto = IPPROTO_IP;
    cb94:	2300      	movs	r3, #0
		client.connected = false;

		sprintf(buf, "#XSOCKET: %d\r\n", error);
    cb96:	4632      	mov	r2, r6
    cb98:	4909      	ldr	r1, [pc, #36]	; (cbc0 <do_socket_close+0x74>)
    cb9a:	480a      	ldr	r0, [pc, #40]	; (cbc4 <do_socket_close+0x78>)
		client.ip_proto = IPPROTO_IP;
    cb9c:	80a3      	strh	r3, [r4, #4]
		sprintf(buf, "#XSOCKET: %d\r\n", error);
    cb9e:	f003 ff4b 	bl	10a38 <sprintf>
		client.callback(buf);
    cba2:	68a3      	ldr	r3, [r4, #8]
    cba4:	4807      	ldr	r0, [pc, #28]	; (cbc4 <do_socket_close+0x78>)
    cba6:	4798      	blx	r3
		LOG_DBG("Socket closed");
	}

	return ret;
}
    cba8:	4628      	mov	r0, r5
    cbaa:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
    cbac:	2500      	movs	r5, #0
	return ret;
    cbae:	e7fb      	b.n	cba8 <do_socket_close+0x5c>
    cbb0:	20020130 	.word	0x20020130
    cbb4:	0001ee58 	.word	0x0001ee58
    cbb8:	0001eed0 	.word	0x0001eed0
    cbbc:	0001f6bf 	.word	0x0001f6bf
    cbc0:	0001f6d2 	.word	0x0001f6d2
    cbc4:	20026368 	.word	0x20026368

0000cbc8 <do_socket_open>:
	if (type == SOCK_STREAM) {
    cbc8:	2801      	cmp	r0, #1
{
    cbca:	b538      	push	{r3, r4, r5, lr}
    cbcc:	4601      	mov	r1, r0
    cbce:	4c21      	ldr	r4, [pc, #132]	; (cc54 <do_socket_open+0x8c>)
	if (type == SOCK_STREAM) {
    cbd0:	d12d      	bne.n	cc2e <do_socket_open+0x66>
		client.sock = socket(AF_INET, SOCK_STREAM,
    cbd2:	2206      	movs	r2, #6
    cbd4:	f7ff ffae 	bl	cb34 <socket>
		client.ip_proto = IPPROTO_TCP;
    cbd8:	2306      	movs	r3, #6
		client.sock = socket(AF_INET, SOCK_STREAM,
    cbda:	6020      	str	r0, [r4, #0]
		client.ip_proto = IPPROTO_UDP;
    cbdc:	7123      	strb	r3, [r4, #4]
	if (client.sock < 0) {
    cbde:	6822      	ldr	r2, [r4, #0]
    cbe0:	2a00      	cmp	r2, #0
    cbe2:	da2d      	bge.n	cc40 <do_socket_open+0x78>
		LOG_ERR("socket() failed: %d", -errno);
    cbe4:	2301      	movs	r3, #1
    cbe6:	f04f 0500 	mov.w	r5, #0
    cbea:	4a1b      	ldr	r2, [pc, #108]	; (cc58 <do_socket_open+0x90>)
    cbec:	f363 0507 	bfi	r5, r3, #0, #8
    cbf0:	4b1a      	ldr	r3, [pc, #104]	; (cc5c <do_socket_open+0x94>)
    cbf2:	1a9b      	subs	r3, r3, r2
    cbf4:	08db      	lsrs	r3, r3, #3
    cbf6:	f363 158f 	bfi	r5, r3, #6, #10
    cbfa:	f00f f990 	bl	1bf1e <z_errno>
    cbfe:	6801      	ldr	r1, [r0, #0]
    cc00:	462a      	mov	r2, r5
    cc02:	4249      	negs	r1, r1
    cc04:	4816      	ldr	r0, [pc, #88]	; (cc60 <do_socket_open+0x98>)
    cc06:	f00f fd31 	bl	1c66c <log_1>
		sprintf(buf, "#XSOCKET: %d\r\n", -errno);
    cc0a:	f00f f988 	bl	1bf1e <z_errno>
    cc0e:	6802      	ldr	r2, [r0, #0]
    cc10:	4914      	ldr	r1, [pc, #80]	; (cc64 <do_socket_open+0x9c>)
    cc12:	4252      	negs	r2, r2
    cc14:	4814      	ldr	r0, [pc, #80]	; (cc68 <do_socket_open+0xa0>)
    cc16:	f003 ff0f 	bl	10a38 <sprintf>
		client.callback(buf);
    cc1a:	68a3      	ldr	r3, [r4, #8]
    cc1c:	4812      	ldr	r0, [pc, #72]	; (cc68 <do_socket_open+0xa0>)
    cc1e:	4798      	blx	r3
		client.ip_proto = IPPROTO_IP;
    cc20:	2300      	movs	r3, #0
    cc22:	7123      	strb	r3, [r4, #4]
		ret = -errno;
    cc24:	f00f f97b 	bl	1bf1e <z_errno>
    cc28:	6800      	ldr	r0, [r0, #0]
    cc2a:	4240      	negs	r0, r0
}
    cc2c:	bd38      	pop	{r3, r4, r5, pc}
	} else if (type == SOCK_DGRAM) {
    cc2e:	2802      	cmp	r0, #2
    cc30:	d1d5      	bne.n	cbde <do_socket_open+0x16>
		client.sock = socket(AF_INET, SOCK_DGRAM,
    cc32:	2211      	movs	r2, #17
    cc34:	2001      	movs	r0, #1
    cc36:	f7ff ff7d 	bl	cb34 <socket>
		client.ip_proto = IPPROTO_UDP;
    cc3a:	2311      	movs	r3, #17
		client.sock = socket(AF_INET, SOCK_DGRAM,
    cc3c:	6020      	str	r0, [r4, #0]
		client.ip_proto = IPPROTO_UDP;
    cc3e:	e7cd      	b.n	cbdc <do_socket_open+0x14>
		sprintf(buf, "#XSOCKET: %d, %d\r\n", client.sock,
    cc40:	7923      	ldrb	r3, [r4, #4]
    cc42:	490a      	ldr	r1, [pc, #40]	; (cc6c <do_socket_open+0xa4>)
    cc44:	4808      	ldr	r0, [pc, #32]	; (cc68 <do_socket_open+0xa0>)
    cc46:	f003 fef7 	bl	10a38 <sprintf>
		client.callback(buf);
    cc4a:	4807      	ldr	r0, [pc, #28]	; (cc68 <do_socket_open+0xa0>)
    cc4c:	68a3      	ldr	r3, [r4, #8]
    cc4e:	4798      	blx	r3
	int ret = 0;
    cc50:	2000      	movs	r0, #0
	return ret;
    cc52:	e7eb      	b.n	cc2c <do_socket_open+0x64>
    cc54:	20020130 	.word	0x20020130
    cc58:	0001ee58 	.word	0x0001ee58
    cc5c:	0001eed0 	.word	0x0001eed0
    cc60:	0001f6e1 	.word	0x0001f6e1
    cc64:	0001f6d2 	.word	0x0001f6d2
    cc68:	20026368 	.word	0x20026368
    cc6c:	0001f6f5 	.word	0x0001f6f5

0000cc70 <handle_at_socket>:
static int handle_at_socket(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	u16_t op;

	switch (cmd_type) {
    cc70:	2801      	cmp	r0, #1
{
    cc72:	b513      	push	{r0, r1, r4, lr}
    cc74:	4604      	mov	r4, r0
	switch (cmd_type) {
    cc76:	d004      	beq.n	cc82 <handle_at_socket+0x12>
    cc78:	2802      	cmp	r0, #2
    cc7a:	d050      	beq.n	cd1e <handle_at_socket+0xae>
	case AT_CMD_TYPE_SET_COMMAND:
		if (at_params_valid_count_get(&m_param_list) < 2) {
			return -EINVAL;
    cc7c:	f06f 0415 	mvn.w	r4, #21
    cc80:	e02e      	b.n	cce0 <handle_at_socket+0x70>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    cc82:	4830      	ldr	r0, [pc, #192]	; (cd44 <handle_at_socket+0xd4>)
    cc84:	f011 fb6f 	bl	1e366 <at_params_valid_count_get>
    cc88:	2801      	cmp	r0, #1
    cc8a:	d9f7      	bls.n	cc7c <handle_at_socket+0xc>
		}
		err = at_params_short_get(&m_param_list, 1, &op);
    cc8c:	4621      	mov	r1, r4
    cc8e:	aa01      	add	r2, sp, #4
    cc90:	482c      	ldr	r0, [pc, #176]	; (cd44 <handle_at_socket+0xd4>)
    cc92:	f011 fb33 	bl	1e2fc <at_params_short_get>
		if (err < 0) {
    cc96:	1e04      	subs	r4, r0, #0
    cc98:	db22      	blt.n	cce0 <handle_at_socket+0x70>
			return err;
		}
		if (op == 1) {
    cc9a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    cc9e:	2801      	cmp	r0, #1
    cca0:	d127      	bne.n	ccf2 <handle_at_socket+0x82>
			u16_t type;

			if (at_params_valid_count_get(&m_param_list) < 3) {
    cca2:	4828      	ldr	r0, [pc, #160]	; (cd44 <handle_at_socket+0xd4>)
    cca4:	f011 fb5f 	bl	1e366 <at_params_valid_count_get>
    cca8:	2802      	cmp	r0, #2
    ccaa:	d9e7      	bls.n	cc7c <handle_at_socket+0xc>
				return -EINVAL;
			}
			err = at_params_short_get(&m_param_list, 2, &type);
    ccac:	f10d 0206 	add.w	r2, sp, #6
    ccb0:	2102      	movs	r1, #2
    ccb2:	4824      	ldr	r0, [pc, #144]	; (cd44 <handle_at_socket+0xd4>)
    ccb4:	f011 fb22 	bl	1e2fc <at_params_short_get>
			if (err < 0) {
    ccb8:	1e04      	subs	r4, r0, #0
    ccba:	db11      	blt.n	cce0 <handle_at_socket+0x70>
				return err;
			}
			if (client.sock > 0) {
    ccbc:	4b22      	ldr	r3, [pc, #136]	; (cd48 <handle_at_socket+0xd8>)
    ccbe:	681b      	ldr	r3, [r3, #0]
    ccc0:	2b00      	cmp	r3, #0
    ccc2:	dd10      	ble.n	cce6 <handle_at_socket+0x76>
				LOG_WRN("Socket is already opened");
    ccc4:	2302      	movs	r3, #2
    ccc6:	f04f 0100 	mov.w	r1, #0
    ccca:	4a20      	ldr	r2, [pc, #128]	; (cd4c <handle_at_socket+0xdc>)
    cccc:	f363 0107 	bfi	r1, r3, #0, #8
    ccd0:	4b1f      	ldr	r3, [pc, #124]	; (cd50 <handle_at_socket+0xe0>)
    ccd2:	4820      	ldr	r0, [pc, #128]	; (cd54 <handle_at_socket+0xe4>)
    ccd4:	1a9b      	subs	r3, r3, r2
    ccd6:	08db      	lsrs	r3, r3, #3
    ccd8:	f363 118f 	bfi	r1, r3, #6, #10
			} else {
				err = do_socket_open(type);
			}
		} else if (op == 0) {
			if (client.sock < 0) {
				LOG_WRN("Socket is not opened yet");
    ccdc:	f00f fcb9 	bl	1c652 <log_0>
	default:
		break;
	}

	return err;
}
    cce0:	4620      	mov	r0, r4
    cce2:	b002      	add	sp, #8
    cce4:	bd10      	pop	{r4, pc}
				err = do_socket_open(type);
    cce6:	f89d 0006 	ldrb.w	r0, [sp, #6]
    ccea:	f7ff ff6d 	bl	cbc8 <do_socket_open>
				err = do_socket_close(0);
    ccee:	4604      	mov	r4, r0
    ccf0:	e7f6      	b.n	cce0 <handle_at_socket+0x70>
		} else if (op == 0) {
    ccf2:	2800      	cmp	r0, #0
    ccf4:	d1f4      	bne.n	cce0 <handle_at_socket+0x70>
			if (client.sock < 0) {
    ccf6:	4b14      	ldr	r3, [pc, #80]	; (cd48 <handle_at_socket+0xd8>)
    ccf8:	681b      	ldr	r3, [r3, #0]
    ccfa:	2b00      	cmp	r3, #0
    ccfc:	da0c      	bge.n	cd18 <handle_at_socket+0xa8>
				LOG_WRN("Socket is not opened yet");
    ccfe:	2302      	movs	r3, #2
    cd00:	f04f 0100 	mov.w	r1, #0
    cd04:	4a11      	ldr	r2, [pc, #68]	; (cd4c <handle_at_socket+0xdc>)
    cd06:	f363 0107 	bfi	r1, r3, #0, #8
    cd0a:	4b11      	ldr	r3, [pc, #68]	; (cd50 <handle_at_socket+0xe0>)
    cd0c:	4812      	ldr	r0, [pc, #72]	; (cd58 <handle_at_socket+0xe8>)
    cd0e:	1a9b      	subs	r3, r3, r2
    cd10:	08db      	lsrs	r3, r3, #3
    cd12:	f363 118f 	bfi	r1, r3, #6, #10
    cd16:	e7e1      	b.n	ccdc <handle_at_socket+0x6c>
				err = do_socket_close(0);
    cd18:	f7ff ff18 	bl	cb4c <do_socket_close>
    cd1c:	e7e7      	b.n	ccee <handle_at_socket+0x7e>
		if (client.sock != INVALID_SOCKET) {
    cd1e:	4c0a      	ldr	r4, [pc, #40]	; (cd48 <handle_at_socket+0xd8>)
    cd20:	6822      	ldr	r2, [r4, #0]
    cd22:	1c53      	adds	r3, r2, #1
    cd24:	d009      	beq.n	cd3a <handle_at_socket+0xca>
			sprintf(buf, "#XSOCKET: %d, %d\r\n", client.sock,
    cd26:	7923      	ldrb	r3, [r4, #4]
    cd28:	490c      	ldr	r1, [pc, #48]	; (cd5c <handle_at_socket+0xec>)
    cd2a:	480d      	ldr	r0, [pc, #52]	; (cd60 <handle_at_socket+0xf0>)
    cd2c:	f003 fe84 	bl	10a38 <sprintf>
		client.callback(buf);
    cd30:	68a3      	ldr	r3, [r4, #8]
    cd32:	480b      	ldr	r0, [pc, #44]	; (cd60 <handle_at_socket+0xf0>)
    cd34:	4798      	blx	r3
		err = 0;
    cd36:	2400      	movs	r4, #0
		break;
    cd38:	e7d2      	b.n	cce0 <handle_at_socket+0x70>
			sprintf(buf, "#XSOCKET: 0\r\n");
    cd3a:	490a      	ldr	r1, [pc, #40]	; (cd64 <handle_at_socket+0xf4>)
    cd3c:	4808      	ldr	r0, [pc, #32]	; (cd60 <handle_at_socket+0xf0>)
    cd3e:	f003 fe7b 	bl	10a38 <sprintf>
    cd42:	e7f5      	b.n	cd30 <handle_at_socket+0xc0>
    cd44:	20020110 	.word	0x20020110
    cd48:	20020130 	.word	0x20020130
    cd4c:	0001ee58 	.word	0x0001ee58
    cd50:	0001eed0 	.word	0x0001eed0
    cd54:	0001f80b 	.word	0x0001f80b
    cd58:	0001f824 	.word	0x0001f824
    cd5c:	0001f6f5 	.word	0x0001f6f5
    cd60:	20026368 	.word	0x20026368
    cd64:	0001f83d 	.word	0x0001f83d

0000cd68 <send.constprop.11>:
			   int flags)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->send);

	return socket_ops->send(sock, buf, len, flags);
    cd68:	4b04      	ldr	r3, [pc, #16]	; (cd7c <send.constprop.11+0x14>)
static inline ssize_t send(int sock, const void *buf, size_t len,
    cd6a:	b410      	push	{r4}
	return socket_ops->send(sock, buf, len, flags);
    cd6c:	681b      	ldr	r3, [r3, #0]
    cd6e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    cd70:	2300      	movs	r3, #0
    cd72:	46a4      	mov	ip, r4
}
    cd74:	f85d 4b04 	ldr.w	r4, [sp], #4
	return socket_ops->send(sock, buf, len, flags);
    cd78:	4760      	bx	ip
    cd7a:	bf00      	nop
    cd7c:	20020344 	.word	0x20020344

0000cd80 <handle_at_tcp_send>:
 */
static int handle_at_tcp_send(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	char data[NET_IPV4_MTU];
	int size = NET_IPV4_MTU;
    cd80:	f44f 7310 	mov.w	r3, #576	; 0x240
{
    cd84:	b5f0      	push	{r4, r5, r6, r7, lr}

	if (!client.connected) {
    cd86:	4d2f      	ldr	r5, [pc, #188]	; (ce44 <handle_at_tcp_send+0xc4>)
{
    cd88:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
	int size = NET_IPV4_MTU;
    cd8c:	9301      	str	r3, [sp, #4]
	if (!client.connected) {
    cd8e:	796b      	ldrb	r3, [r5, #5]
{
    cd90:	4604      	mov	r4, r0
	if (!client.connected) {
    cd92:	b993      	cbnz	r3, cdba <handle_at_tcp_send+0x3a>
		LOG_ERR("TCP not connected yet");
    cd94:	2301      	movs	r3, #1
    cd96:	f04f 0100 	mov.w	r1, #0
    cd9a:	4a2b      	ldr	r2, [pc, #172]	; (ce48 <handle_at_tcp_send+0xc8>)
    cd9c:	f363 0107 	bfi	r1, r3, #0, #8
    cda0:	4b2a      	ldr	r3, [pc, #168]	; (ce4c <handle_at_tcp_send+0xcc>)
    cda2:	482b      	ldr	r0, [pc, #172]	; (ce50 <handle_at_tcp_send+0xd0>)
    cda4:	1a9b      	subs	r3, r3, r2
    cda6:	08db      	lsrs	r3, r3, #3
    cda8:	f363 118f 	bfi	r1, r3, #6, #10
    cdac:	f00f fc51 	bl	1c652 <log_0>
	int err = -EINVAL;
    cdb0:	f06f 0015 	mvn.w	r0, #21
	default:
		break;
	}

	return err;
}
    cdb4:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
    cdb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (cmd_type) {
    cdba:	2801      	cmp	r0, #1
    cdbc:	d1f8      	bne.n	cdb0 <handle_at_tcp_send+0x30>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    cdbe:	4825      	ldr	r0, [pc, #148]	; (ce54 <handle_at_tcp_send+0xd4>)
    cdc0:	f011 fad1 	bl	1e366 <at_params_valid_count_get>
    cdc4:	2801      	cmp	r0, #1
    cdc6:	d9f3      	bls.n	cdb0 <handle_at_tcp_send+0x30>
		err = at_params_string_get(&m_param_list, 1, data, &size);
    cdc8:	ae02      	add	r6, sp, #8
    cdca:	ab01      	add	r3, sp, #4
    cdcc:	4632      	mov	r2, r6
    cdce:	4621      	mov	r1, r4
    cdd0:	4820      	ldr	r0, [pc, #128]	; (ce54 <handle_at_tcp_send+0xd4>)
    cdd2:	f011 faa5 	bl	1e320 <at_params_string_get>
		if (err < 0) {
    cdd6:	2800      	cmp	r0, #0
    cdd8:	dbec      	blt.n	cdb4 <handle_at_tcp_send+0x34>
		data[size] = '\0';
    cdda:	2400      	movs	r4, #0
    cddc:	9b01      	ldr	r3, [sp, #4]
	u32_t datalen = strlen(data);
    cdde:	4630      	mov	r0, r6
		data[size] = '\0';
    cde0:	54f4      	strb	r4, [r6, r3]
	u32_t datalen = strlen(data);
    cde2:	f010 f971 	bl	1d0c8 <strlen>
    cde6:	4607      	mov	r7, r0
	while (offset < datalen) {
    cde8:	42a7      	cmp	r7, r4
    cdea:	d91f      	bls.n	ce2c <handle_at_tcp_send+0xac>
		ret = send(client.sock, data + offset,
    cdec:	1b3a      	subs	r2, r7, r4
    cdee:	1931      	adds	r1, r6, r4
    cdf0:	6828      	ldr	r0, [r5, #0]
    cdf2:	f7ff ffb9 	bl	cd68 <send.constprop.11>
		if (ret < 0) {
    cdf6:	2800      	cmp	r0, #0
    cdf8:	da22      	bge.n	ce40 <handle_at_tcp_send+0xc0>
			do_socket_close(-errno);
    cdfa:	f00f f890 	bl	1bf1e <z_errno>
    cdfe:	6800      	ldr	r0, [r0, #0]
			LOG_WRN("send() failed: %d", -errno);
    ce00:	f04f 0600 	mov.w	r6, #0
			do_socket_close(-errno);
    ce04:	4240      	negs	r0, r0
    ce06:	f7ff fea1 	bl	cb4c <do_socket_close>
			LOG_WRN("send() failed: %d", -errno);
    ce0a:	2302      	movs	r3, #2
    ce0c:	4a0e      	ldr	r2, [pc, #56]	; (ce48 <handle_at_tcp_send+0xc8>)
    ce0e:	f363 0607 	bfi	r6, r3, #0, #8
    ce12:	4b0e      	ldr	r3, [pc, #56]	; (ce4c <handle_at_tcp_send+0xcc>)
    ce14:	1a9b      	subs	r3, r3, r2
    ce16:	08db      	lsrs	r3, r3, #3
    ce18:	f363 168f 	bfi	r6, r3, #6, #10
    ce1c:	f00f f87f 	bl	1bf1e <z_errno>
    ce20:	6801      	ldr	r1, [r0, #0]
    ce22:	4632      	mov	r2, r6
    ce24:	4249      	negs	r1, r1
    ce26:	480c      	ldr	r0, [pc, #48]	; (ce58 <handle_at_tcp_send+0xd8>)
    ce28:	f00f fc20 	bl	1c66c <log_1>
	sprintf(buf, "#XTCPSEND: %d\r\n", offset);
    ce2c:	4622      	mov	r2, r4
    ce2e:	490b      	ldr	r1, [pc, #44]	; (ce5c <handle_at_tcp_send+0xdc>)
    ce30:	480b      	ldr	r0, [pc, #44]	; (ce60 <handle_at_tcp_send+0xe0>)
    ce32:	f003 fe01 	bl	10a38 <sprintf>
	client.callback(buf);
    ce36:	480a      	ldr	r0, [pc, #40]	; (ce60 <handle_at_tcp_send+0xe0>)
    ce38:	68ab      	ldr	r3, [r5, #8]
    ce3a:	4798      	blx	r3
		err = do_tcp_send(data);
    ce3c:	2000      	movs	r0, #0
		break;
    ce3e:	e7b9      	b.n	cdb4 <handle_at_tcp_send+0x34>
		offset += ret;
    ce40:	4404      	add	r4, r0
    ce42:	e7d1      	b.n	cde8 <handle_at_tcp_send+0x68>
    ce44:	20020130 	.word	0x20020130
    ce48:	0001ee58 	.word	0x0001ee58
    ce4c:	0001eed0 	.word	0x0001eed0
    ce50:	0001f89e 	.word	0x0001f89e
    ce54:	20020110 	.word	0x20020110
    ce58:	0001f8b4 	.word	0x0001f8b4
    ce5c:	0001f8c6 	.word	0x0001f8c6
    ce60:	20026368 	.word	0x20026368

0000ce64 <recv.constprop.13>:
	return socket_ops->recv(sock, buf, max_len, flags);
    ce64:	4b04      	ldr	r3, [pc, #16]	; (ce78 <recv.constprop.13+0x14>)
static inline ssize_t recv(int sock, void *buf, size_t max_len,
    ce66:	b410      	push	{r4}
	return socket_ops->recv(sock, buf, max_len, flags);
    ce68:	681b      	ldr	r3, [r3, #0]
    ce6a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    ce6c:	2300      	movs	r3, #0
    ce6e:	46a4      	mov	ip, r4
}
    ce70:	f85d 4b04 	ldr.w	r4, [sp], #4
	return socket_ops->recv(sock, buf, max_len, flags);
    ce74:	4760      	bx	ip
    ce76:	bf00      	nop
    ce78:	20020344 	.word	0x20020344

0000ce7c <handle_at_bind>:
{
    ce7c:	b530      	push	{r4, r5, lr}
	if (client.sock < 0) {
    ce7e:	4d2d      	ldr	r5, [pc, #180]	; (cf34 <handle_at_bind+0xb8>)
{
    ce80:	b085      	sub	sp, #20
	if (client.sock < 0) {
    ce82:	682b      	ldr	r3, [r5, #0]
{
    ce84:	4604      	mov	r4, r0
	if (client.sock < 0) {
    ce86:	2b00      	cmp	r3, #0
    ce88:	da11      	bge.n	ceae <handle_at_bind+0x32>
		LOG_ERR("Socket not opened yet");
    ce8a:	2301      	movs	r3, #1
    ce8c:	f04f 0100 	mov.w	r1, #0
    ce90:	4a29      	ldr	r2, [pc, #164]	; (cf38 <handle_at_bind+0xbc>)
    ce92:	f363 0107 	bfi	r1, r3, #0, #8
    ce96:	4b29      	ldr	r3, [pc, #164]	; (cf3c <handle_at_bind+0xc0>)
    ce98:	4829      	ldr	r0, [pc, #164]	; (cf40 <handle_at_bind+0xc4>)
    ce9a:	1a9b      	subs	r3, r3, r2
    ce9c:	08db      	lsrs	r3, r3, #3
    ce9e:	f363 118f 	bfi	r1, r3, #6, #10
    cea2:	f00f fbd6 	bl	1c652 <log_0>
	int err = -EINVAL;
    cea6:	f06f 0015 	mvn.w	r0, #21
}
    ceaa:	b005      	add	sp, #20
    ceac:	bd30      	pop	{r4, r5, pc}
	switch (cmd_type) {
    ceae:	2801      	cmp	r0, #1
    ceb0:	d1f9      	bne.n	cea6 <handle_at_bind+0x2a>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    ceb2:	4824      	ldr	r0, [pc, #144]	; (cf44 <handle_at_bind+0xc8>)
    ceb4:	f011 fa57 	bl	1e366 <at_params_valid_count_get>
    ceb8:	2801      	cmp	r0, #1
    ceba:	d9f4      	bls.n	cea6 <handle_at_bind+0x2a>
		err = at_params_short_get(&m_param_list, 1, &port);
    cebc:	f10d 0206 	add.w	r2, sp, #6
    cec0:	4621      	mov	r1, r4
    cec2:	4820      	ldr	r0, [pc, #128]	; (cf44 <handle_at_bind+0xc8>)
    cec4:	f011 fa1a 	bl	1e2fc <at_params_short_get>
		if (err < 0) {
    cec8:	2800      	cmp	r0, #0
    ceca:	dbee      	blt.n	ceaa <handle_at_bind+0x2e>
		err = do_bind(port);
    cecc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
	local.sin_family = AF_INET;
    ced0:	f8ad 4008 	strh.w	r4, [sp, #8]
	local.sin_port = htons(port);
    ced4:	0213      	lsls	r3, r2, #8
    ced6:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	local.sin_addr.s_addr = htonl(INADDR_ANY);
    ceda:	2400      	movs	r4, #0
	return socket_ops->bind(sock, addr, addrlen);
    cedc:	2208      	movs	r2, #8
	local.sin_port = htons(port);
    cede:	f8ad 300a 	strh.w	r3, [sp, #10]
    cee2:	4b19      	ldr	r3, [pc, #100]	; (cf48 <handle_at_bind+0xcc>)
	local.sin_addr.s_addr = htonl(INADDR_ANY);
    cee4:	9403      	str	r4, [sp, #12]
    cee6:	681b      	ldr	r3, [r3, #0]
    cee8:	eb0d 0102 	add.w	r1, sp, r2
    ceec:	68db      	ldr	r3, [r3, #12]
    ceee:	6828      	ldr	r0, [r5, #0]
    cef0:	4798      	blx	r3
	if (ret < 0) {
    cef2:	42a0      	cmp	r0, r4
    cef4:	da1b      	bge.n	cf2e <handle_at_bind+0xb2>
		LOG_ERR("bind() failed: %d", -errno);
    cef6:	2301      	movs	r3, #1
    cef8:	4a0f      	ldr	r2, [pc, #60]	; (cf38 <handle_at_bind+0xbc>)
    cefa:	f363 0407 	bfi	r4, r3, #0, #8
    cefe:	4b0f      	ldr	r3, [pc, #60]	; (cf3c <handle_at_bind+0xc0>)
    cf00:	1a9b      	subs	r3, r3, r2
    cf02:	08db      	lsrs	r3, r3, #3
    cf04:	f363 148f 	bfi	r4, r3, #6, #10
    cf08:	f00f f809 	bl	1bf1e <z_errno>
    cf0c:	6801      	ldr	r1, [r0, #0]
    cf0e:	4622      	mov	r2, r4
    cf10:	4249      	negs	r1, r1
    cf12:	480e      	ldr	r0, [pc, #56]	; (cf4c <handle_at_bind+0xd0>)
    cf14:	f00f fbaa 	bl	1c66c <log_1>
		do_socket_close(-errno);
    cf18:	f00f f801 	bl	1bf1e <z_errno>
    cf1c:	6800      	ldr	r0, [r0, #0]
    cf1e:	4240      	negs	r0, r0
    cf20:	f7ff fe14 	bl	cb4c <do_socket_close>
		return -errno;
    cf24:	f00e fffb 	bl	1bf1e <z_errno>
    cf28:	6800      	ldr	r0, [r0, #0]
    cf2a:	4240      	negs	r0, r0
    cf2c:	e7bd      	b.n	ceaa <handle_at_bind+0x2e>
	return 0;
    cf2e:	4620      	mov	r0, r4
		break;
    cf30:	e7bb      	b.n	ceaa <handle_at_bind+0x2e>
    cf32:	bf00      	nop
    cf34:	20020130 	.word	0x20020130
    cf38:	0001ee58 	.word	0x0001ee58
    cf3c:	0001eed0 	.word	0x0001eed0
    cf40:	0001f7e3 	.word	0x0001f7e3
    cf44:	20020110 	.word	0x20020110
    cf48:	20020344 	.word	0x20020344
    cf4c:	0001f7f9 	.word	0x0001f7f9

0000cf50 <parse_host_by_name>:
{
    cf50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf54:	4614      	mov	r4, r2
    cf56:	4680      	mov	r8, r0
	struct addrinfo hints = {
    cf58:	2501      	movs	r5, #1
{
    cf5a:	b08e      	sub	sp, #56	; 0x38
			      struct addrinfo **res)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);

	return socket_ops->getaddrinfo(node, service, hints, res);
    cf5c:	4f24      	ldr	r7, [pc, #144]	; (cff0 <parse_host_by_name+0xa0>)
	struct addrinfo hints = {
    cf5e:	2220      	movs	r2, #32
{
    cf60:	460e      	mov	r6, r1
	struct addrinfo hints = {
    cf62:	a806      	add	r0, sp, #24
    cf64:	2100      	movs	r1, #0
    cf66:	f010 f914 	bl	1d192 <memset>
    cf6a:	683b      	ldr	r3, [r7, #0]
    cf6c:	e9cd 5407 	strd	r5, r4, [sp, #28]
    cf70:	aa06      	add	r2, sp, #24
    cf72:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    cf74:	2100      	movs	r1, #0
    cf76:	ab01      	add	r3, sp, #4
    cf78:	4640      	mov	r0, r8
    cf7a:	47a0      	blx	r4
	if (err) {
    cf7c:	4604      	mov	r4, r0
    cf7e:	b188      	cbz	r0, cfa4 <parse_host_by_name+0x54>
		LOG_ERR("ERROR: getaddrinfo failed %d", err);
    cf80:	f04f 0200 	mov.w	r2, #0
    cf84:	491b      	ldr	r1, [pc, #108]	; (cff4 <parse_host_by_name+0xa4>)
    cf86:	4b1c      	ldr	r3, [pc, #112]	; (cff8 <parse_host_by_name+0xa8>)
    cf88:	f365 0207 	bfi	r2, r5, #0, #8
    cf8c:	1a5b      	subs	r3, r3, r1
    cf8e:	08db      	lsrs	r3, r3, #3
    cf90:	4601      	mov	r1, r0
    cf92:	f363 128f 	bfi	r2, r3, #6, #10
    cf96:	4819      	ldr	r0, [pc, #100]	; (cffc <parse_host_by_name+0xac>)
    cf98:	f00f fb68 	bl	1c66c <log_1>
}
    cf9c:	4620      	mov	r0, r4
    cf9e:	b00e      	add	sp, #56	; 0x38
    cfa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (result == NULL) {
    cfa4:	9b01      	ldr	r3, [sp, #4]
    cfa6:	b983      	cbnz	r3, cfca <parse_host_by_name+0x7a>
		LOG_ERR("ERROR: Address not found\n");
    cfa8:	2301      	movs	r3, #1
    cfaa:	f04f 0100 	mov.w	r1, #0
    cfae:	4a11      	ldr	r2, [pc, #68]	; (cff4 <parse_host_by_name+0xa4>)
    cfb0:	f363 0107 	bfi	r1, r3, #0, #8
    cfb4:	4b10      	ldr	r3, [pc, #64]	; (cff8 <parse_host_by_name+0xa8>)
    cfb6:	4812      	ldr	r0, [pc, #72]	; (d000 <parse_host_by_name+0xb0>)
    cfb8:	1a9b      	subs	r3, r3, r2
    cfba:	08db      	lsrs	r3, r3, #3
    cfbc:	f363 118f 	bfi	r1, r3, #6, #10
    cfc0:	f00f fb47 	bl	1c652 <log_0>
		return -ENOENT;
    cfc4:	f06f 0401 	mvn.w	r4, #1
    cfc8:	e7e8      	b.n	cf9c <parse_host_by_name+0x4c>
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
    cfca:	695b      	ldr	r3, [r3, #20]
	server4->sin_addr.s_addr =
    cfcc:	490d      	ldr	r1, [pc, #52]	; (d004 <parse_host_by_name+0xb4>)
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
    cfce:	685b      	ldr	r3, [r3, #4]
	server4->sin_port = htons(port);
    cfd0:	ba76      	rev16	r6, r6
	server4->sin_addr.s_addr =
    cfd2:	604b      	str	r3, [r1, #4]
	server4->sin_family = AF_INET;
    cfd4:	800d      	strh	r5, [r1, #0]
	server4->sin_port = htons(port);
    cfd6:	804e      	strh	r6, [r1, #2]
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
    cfd8:	2310      	movs	r3, #16
    cfda:	aa02      	add	r2, sp, #8
    cfdc:	3104      	adds	r1, #4
    cfde:	4628      	mov	r0, r5
    cfe0:	f003 fd6c 	bl	10abc <z_impl_net_addr_ntop>
static inline void freeaddrinfo(struct addrinfo *res)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);

	return socket_ops->freeaddrinfo(res);
    cfe4:	683b      	ldr	r3, [r7, #0]
    cfe6:	9801      	ldr	r0, [sp, #4]
    cfe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    cfea:	4798      	blx	r3
    cfec:	e7d6      	b.n	cf9c <parse_host_by_name+0x4c>
    cfee:	bf00      	nop
    cff0:	20020344 	.word	0x20020344
    cff4:	0001ee58 	.word	0x0001ee58
    cff8:	0001eed0 	.word	0x0001eed0
    cffc:	0001f98e 	.word	0x0001f98e
    d000:	0001f9ab 	.word	0x0001f9ab
    d004:	20024e2c 	.word	0x20024e2c

0000d008 <parse_host_by_ipv4>:
{
    d008:	b508      	push	{r3, lr}
	address4->sin_family = AF_INET;
    d00a:	2301      	movs	r3, #1
    d00c:	4a06      	ldr	r2, [pc, #24]	; (d028 <parse_host_by_ipv4+0x20>)
	address4->sin_port = htons(port);
    d00e:	ba49      	rev16	r1, r1
	address4->sin_family = AF_INET;
    d010:	8013      	strh	r3, [r2, #0]
	address4->sin_port = htons(port);
    d012:	8051      	strh	r1, [r2, #2]
	return z_impl_net_addr_pton(family, src, dst);
    d014:	4601      	mov	r1, r0
    d016:	3204      	adds	r2, #4
    d018:	4618      	mov	r0, r3
    d01a:	f010 f9c4 	bl	1d3a6 <z_impl_net_addr_pton>
	if ((family != AF_INET) && (family != AF_INET6)) {
		errno = EAFNOSUPPORT;
		return -1;
	}

	if (net_addr_pton(family, src, dst) == 0) {
    d01e:	2800      	cmp	r0, #0
}
    d020:	bf18      	it	ne
    d022:	f06f 0015 	mvnne.w	r0, #21
    d026:	bd08      	pop	{r3, pc}
    d028:	20024e2c 	.word	0x20024e2c

0000d02c <handle_at_tcp_conn>:
	int size = TCPIP_MAX_URL;
    d02c:	2380      	movs	r3, #128	; 0x80
{
    d02e:	b570      	push	{r4, r5, r6, lr}
    d030:	b0a2      	sub	sp, #136	; 0x88
	int size = TCPIP_MAX_URL;
    d032:	9301      	str	r3, [sp, #4]
	if (client.sock < 0) {
    d034:	4b4f      	ldr	r3, [pc, #316]	; (d174 <handle_at_tcp_conn+0x148>)
{
    d036:	4604      	mov	r4, r0
	if (client.sock < 0) {
    d038:	681a      	ldr	r2, [r3, #0]
    d03a:	461e      	mov	r6, r3
    d03c:	2a00      	cmp	r2, #0
    d03e:	da10      	bge.n	d062 <handle_at_tcp_conn+0x36>
		LOG_ERR("Socket not opened yet");
    d040:	2301      	movs	r3, #1
    d042:	f04f 0100 	mov.w	r1, #0
    d046:	4a4c      	ldr	r2, [pc, #304]	; (d178 <handle_at_tcp_conn+0x14c>)
    d048:	f363 0107 	bfi	r1, r3, #0, #8
    d04c:	4b4b      	ldr	r3, [pc, #300]	; (d17c <handle_at_tcp_conn+0x150>)
    d04e:	484c      	ldr	r0, [pc, #304]	; (d180 <handle_at_tcp_conn+0x154>)
    d050:	1a9b      	subs	r3, r3, r2
    d052:	08db      	lsrs	r3, r3, #3
    d054:	f363 118f 	bfi	r1, r3, #6, #10
    d058:	f00f fafb 	bl	1c652 <log_0>
			return -EINVAL;
    d05c:	f06f 0415 	mvn.w	r4, #21
    d060:	e045      	b.n	d0ee <handle_at_tcp_conn+0xc2>
	switch (cmd_type) {
    d062:	2801      	cmp	r0, #1
    d064:	d009      	beq.n	d07a <handle_at_tcp_conn+0x4e>
    d066:	2802      	cmp	r0, #2
    d068:	d1f8      	bne.n	d05c <handle_at_tcp_conn+0x30>
		if (client.connected) {
    d06a:	795c      	ldrb	r4, [r3, #5]
    d06c:	689a      	ldr	r2, [r3, #8]
    d06e:	2c00      	cmp	r4, #0
    d070:	d076      	beq.n	d160 <handle_at_tcp_conn+0x134>
			client.callback("+XTCPCONN: 1\r\n");
    d072:	4844      	ldr	r0, [pc, #272]	; (d184 <handle_at_tcp_conn+0x158>)
    d074:	4790      	blx	r2
		err = 0;
    d076:	2400      	movs	r4, #0
    d078:	e039      	b.n	d0ee <handle_at_tcp_conn+0xc2>
		if (at_params_valid_count_get(&m_param_list) < 3) {
    d07a:	4843      	ldr	r0, [pc, #268]	; (d188 <handle_at_tcp_conn+0x15c>)
    d07c:	f011 f973 	bl	1e366 <at_params_valid_count_get>
    d080:	2802      	cmp	r0, #2
    d082:	d9eb      	bls.n	d05c <handle_at_tcp_conn+0x30>
		err = at_params_string_get(&m_param_list, 1, url, &size);
    d084:	4621      	mov	r1, r4
    d086:	ab01      	add	r3, sp, #4
    d088:	aa02      	add	r2, sp, #8
    d08a:	483f      	ldr	r0, [pc, #252]	; (d188 <handle_at_tcp_conn+0x15c>)
    d08c:	f011 f948 	bl	1e320 <at_params_string_get>
		if (err < 0) {
    d090:	1e04      	subs	r4, r0, #0
    d092:	db2c      	blt.n	d0ee <handle_at_tcp_conn+0xc2>
		url[size] = '\0';
    d094:	2500      	movs	r5, #0
    d096:	9b01      	ldr	r3, [sp, #4]
    d098:	aa22      	add	r2, sp, #136	; 0x88
    d09a:	4413      	add	r3, r2
		err = at_params_short_get(&m_param_list, 2, &port);
    d09c:	2102      	movs	r1, #2
    d09e:	f10d 0202 	add.w	r2, sp, #2
    d0a2:	4839      	ldr	r0, [pc, #228]	; (d188 <handle_at_tcp_conn+0x15c>)
		url[size] = '\0';
    d0a4:	f803 5c80 	strb.w	r5, [r3, #-128]
		err = at_params_short_get(&m_param_list, 2, &port);
    d0a8:	f011 f928 	bl	1e2fc <at_params_short_get>
		if (err < 0) {
    d0ac:	1e04      	subs	r4, r0, #0
    d0ae:	db1e      	blt.n	d0ee <handle_at_tcp_conn+0xc2>
	if (check_for_ipv4(url, strlen(url))) {
    d0b0:	a802      	add	r0, sp, #8
		err = do_tcp_connect(url, port);
    d0b2:	f8bd 4002 	ldrh.w	r4, [sp, #2]
	if (check_for_ipv4(url, strlen(url))) {
    d0b6:	f010 f807 	bl	1d0c8 <strlen>
	for (index = 0; index < length; index++) {
    d0ba:	462b      	mov	r3, r5
    d0bc:	a902      	add	r1, sp, #8
    d0be:	b2c0      	uxtb	r0, r0
    d0c0:	4283      	cmp	r3, r0
    d0c2:	db17      	blt.n	d0f4 <handle_at_tcp_conn+0xc8>
		ret = parse_host_by_ipv4(url, port);
    d0c4:	4621      	mov	r1, r4
    d0c6:	a802      	add	r0, sp, #8
    d0c8:	f7ff ff9e 	bl	d008 <parse_host_by_ipv4>
		ret = parse_host_by_name(url, port, SOCK_STREAM);
    d0cc:	4604      	mov	r4, r0
	if (ret) {
    d0ce:	b1d4      	cbz	r4, d106 <handle_at_tcp_conn+0xda>
		LOG_ERR("Parse failed: %d", ret);
    d0d0:	2301      	movs	r3, #1
    d0d2:	f04f 0200 	mov.w	r2, #0
    d0d6:	4928      	ldr	r1, [pc, #160]	; (d178 <handle_at_tcp_conn+0x14c>)
    d0d8:	f363 0207 	bfi	r2, r3, #0, #8
    d0dc:	4b27      	ldr	r3, [pc, #156]	; (d17c <handle_at_tcp_conn+0x150>)
    d0de:	482b      	ldr	r0, [pc, #172]	; (d18c <handle_at_tcp_conn+0x160>)
    d0e0:	1a5b      	subs	r3, r3, r1
    d0e2:	08db      	lsrs	r3, r3, #3
    d0e4:	f363 128f 	bfi	r2, r3, #6, #10
    d0e8:	4621      	mov	r1, r4
    d0ea:	f00f fabf 	bl	1c66c <log_1>
}
    d0ee:	4620      	mov	r0, r4
    d0f0:	b022      	add	sp, #136	; 0x88
    d0f2:	bd70      	pop	{r4, r5, r6, pc}
		char ch = *(address + index);
    d0f4:	f811 2b01 	ldrb.w	r2, [r1], #1
		if ((ch == '.') || (ch >= '0' && ch <= '9')) {
    d0f8:	2a2e      	cmp	r2, #46	; 0x2e
    d0fa:	d002      	beq.n	d102 <handle_at_tcp_conn+0xd6>
    d0fc:	3a30      	subs	r2, #48	; 0x30
    d0fe:	2a09      	cmp	r2, #9
    d100:	d831      	bhi.n	d166 <handle_at_tcp_conn+0x13a>
	for (index = 0; index < length; index++) {
    d102:	3301      	adds	r3, #1
    d104:	e7dc      	b.n	d0c0 <handle_at_tcp_conn+0x94>
	return socket_ops->connect(sock, addr, addrlen);
    d106:	4b22      	ldr	r3, [pc, #136]	; (d190 <handle_at_tcp_conn+0x164>)
    d108:	2208      	movs	r2, #8
    d10a:	681b      	ldr	r3, [r3, #0]
    d10c:	4921      	ldr	r1, [pc, #132]	; (d194 <handle_at_tcp_conn+0x168>)
    d10e:	695b      	ldr	r3, [r3, #20]
    d110:	6830      	ldr	r0, [r6, #0]
    d112:	4798      	blx	r3
	if (ret < 0) {
    d114:	2800      	cmp	r0, #0
    d116:	da1d      	bge.n	d154 <handle_at_tcp_conn+0x128>
		LOG_ERR("connect() failed: %d", -errno);
    d118:	2301      	movs	r3, #1
    d11a:	f04f 0400 	mov.w	r4, #0
    d11e:	4a16      	ldr	r2, [pc, #88]	; (d178 <handle_at_tcp_conn+0x14c>)
    d120:	f363 0407 	bfi	r4, r3, #0, #8
    d124:	4b15      	ldr	r3, [pc, #84]	; (d17c <handle_at_tcp_conn+0x150>)
    d126:	1a9b      	subs	r3, r3, r2
    d128:	08db      	lsrs	r3, r3, #3
    d12a:	f363 148f 	bfi	r4, r3, #6, #10
    d12e:	f00e fef6 	bl	1bf1e <z_errno>
    d132:	6801      	ldr	r1, [r0, #0]
    d134:	4622      	mov	r2, r4
    d136:	4249      	negs	r1, r1
    d138:	4817      	ldr	r0, [pc, #92]	; (d198 <handle_at_tcp_conn+0x16c>)
    d13a:	f00f fa97 	bl	1c66c <log_1>
		do_socket_close(-errno);
    d13e:	f00e feee 	bl	1bf1e <z_errno>
    d142:	6800      	ldr	r0, [r0, #0]
    d144:	4240      	negs	r0, r0
    d146:	f7ff fd01 	bl	cb4c <do_socket_close>
		return -errno;
    d14a:	f00e fee8 	bl	1bf1e <z_errno>
    d14e:	6804      	ldr	r4, [r0, #0]
    d150:	4264      	negs	r4, r4
    d152:	e7cc      	b.n	d0ee <handle_at_tcp_conn+0xc2>
	client.connected = true;
    d154:	2301      	movs	r3, #1
	client.callback("#XTCPCONN: 1\r\n");
    d156:	4811      	ldr	r0, [pc, #68]	; (d19c <handle_at_tcp_conn+0x170>)
	client.connected = true;
    d158:	7173      	strb	r3, [r6, #5]
	client.callback("#XTCPCONN: 1\r\n");
    d15a:	68b3      	ldr	r3, [r6, #8]
    d15c:	4798      	blx	r3
	return 0;
    d15e:	e7c6      	b.n	d0ee <handle_at_tcp_conn+0xc2>
			client.callback("+XTCPCONN: 0\r\n");
    d160:	480f      	ldr	r0, [pc, #60]	; (d1a0 <handle_at_tcp_conn+0x174>)
    d162:	4790      	blx	r2
    d164:	e7c3      	b.n	d0ee <handle_at_tcp_conn+0xc2>
		ret = parse_host_by_name(url, port, SOCK_STREAM);
    d166:	2201      	movs	r2, #1
    d168:	4621      	mov	r1, r4
    d16a:	a802      	add	r0, sp, #8
    d16c:	f7ff fef0 	bl	cf50 <parse_host_by_name>
    d170:	e7ac      	b.n	d0cc <handle_at_tcp_conn+0xa0>
    d172:	bf00      	nop
    d174:	20020130 	.word	0x20020130
    d178:	0001ee58 	.word	0x0001ee58
    d17c:	0001eed0 	.word	0x0001eed0
    d180:	0001f7e3 	.word	0x0001f7e3
    d184:	0001f880 	.word	0x0001f880
    d188:	20020110 	.word	0x20020110
    d18c:	0001f84b 	.word	0x0001f84b
    d190:	20020344 	.word	0x20020344
    d194:	20024e2c 	.word	0x20024e2c
    d198:	0001f85c 	.word	0x0001f85c
    d19c:	0001f871 	.word	0x0001f871
    d1a0:	0001f88f 	.word	0x0001f88f

0000d1a4 <do_tcp_receive>:
	struct timeval tmo = {
    d1a4:	2300      	movs	r3, #0
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
    d1a6:	2208      	movs	r2, #8
{
    d1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1aa:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
	struct timeval tmo = {
    d1ae:	e9cd 1302 	strd	r1, r3, [sp, #8]
    d1b2:	4b3f      	ldr	r3, [pc, #252]	; (d2b0 <do_tcp_receive+0x10c>)
	ret = setsockopt(client.sock, SOL_SOCKET, SO_RCVTIMEO,
    d1b4:	4d3f      	ldr	r5, [pc, #252]	; (d2b4 <do_tcp_receive+0x110>)
    d1b6:	681b      	ldr	r3, [r3, #0]
    d1b8:	9200      	str	r2, [sp, #0]
    d1ba:	69dc      	ldr	r4, [r3, #28]
{
    d1bc:	4607      	mov	r7, r0
    d1be:	eb0d 0302 	add.w	r3, sp, r2
    d1c2:	2101      	movs	r1, #1
    d1c4:	2214      	movs	r2, #20
    d1c6:	6828      	ldr	r0, [r5, #0]
    d1c8:	47a0      	blx	r4
	if (ret < 0) {
    d1ca:	1e04      	subs	r4, r0, #0
    d1cc:	da1c      	bge.n	d208 <do_tcp_receive+0x64>
		do_socket_close(-errno);
    d1ce:	f00e fea6 	bl	1bf1e <z_errno>
    d1d2:	6800      	ldr	r0, [r0, #0]
		LOG_ERR("setsockopt() error: %d", -errno);
    d1d4:	f04f 0500 	mov.w	r5, #0
		do_socket_close(-errno);
    d1d8:	4240      	negs	r0, r0
    d1da:	f7ff fcb7 	bl	cb4c <do_socket_close>
		LOG_ERR("setsockopt() error: %d", -errno);
    d1de:	2301      	movs	r3, #1
    d1e0:	4a35      	ldr	r2, [pc, #212]	; (d2b8 <do_tcp_receive+0x114>)
    d1e2:	f363 0507 	bfi	r5, r3, #0, #8
    d1e6:	4b35      	ldr	r3, [pc, #212]	; (d2bc <do_tcp_receive+0x118>)
    d1e8:	1a9b      	subs	r3, r3, r2
    d1ea:	08db      	lsrs	r3, r3, #3
    d1ec:	f363 158f 	bfi	r5, r3, #6, #10
    d1f0:	f00e fe95 	bl	1bf1e <z_errno>
    d1f4:	6801      	ldr	r1, [r0, #0]
    d1f6:	462a      	mov	r2, r5
    d1f8:	4249      	negs	r1, r1
    d1fa:	4831      	ldr	r0, [pc, #196]	; (d2c0 <do_tcp_receive+0x11c>)
    d1fc:	f00f fa36 	bl	1c66c <log_1>
}
    d200:	4620      	mov	r0, r4
    d202:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    d206:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (length > NET_IPV4_MTU) {
    d208:	f5b7 7f10 	cmp.w	r7, #576	; 0x240
    d20c:	ae04      	add	r6, sp, #16
		ret = recv(client.sock, data, NET_IPV4_MTU, 0);
    d20e:	bf8c      	ite	hi
    d210:	f44f 7210 	movhi.w	r2, #576	; 0x240
		ret = recv(client.sock, data, length, 0);
    d214:	463a      	movls	r2, r7
    d216:	6828      	ldr	r0, [r5, #0]
    d218:	4631      	mov	r1, r6
    d21a:	f7ff fe23 	bl	ce64 <recv.constprop.13>
	if (ret < 0) {
    d21e:	2800      	cmp	r0, #0
		ret = recv(client.sock, data, length, 0);
    d220:	4604      	mov	r4, r0
	if (ret < 0) {
    d222:	da1d      	bge.n	d260 <do_tcp_receive+0xbc>
		LOG_WRN("recv() error: %d", -errno);
    d224:	2302      	movs	r3, #2
    d226:	f04f 0400 	mov.w	r4, #0
    d22a:	4a23      	ldr	r2, [pc, #140]	; (d2b8 <do_tcp_receive+0x114>)
    d22c:	f363 0407 	bfi	r4, r3, #0, #8
    d230:	4b22      	ldr	r3, [pc, #136]	; (d2bc <do_tcp_receive+0x118>)
    d232:	1a9b      	subs	r3, r3, r2
    d234:	08db      	lsrs	r3, r3, #3
    d236:	f363 148f 	bfi	r4, r3, #6, #10
    d23a:	f00e fe70 	bl	1bf1e <z_errno>
    d23e:	6801      	ldr	r1, [r0, #0]
    d240:	4622      	mov	r2, r4
    d242:	4249      	negs	r1, r1
    d244:	481f      	ldr	r0, [pc, #124]	; (d2c4 <do_tcp_receive+0x120>)
    d246:	f00f fa11 	bl	1c66c <log_1>
		do_socket_close(-errno);
    d24a:	f00e fe68 	bl	1bf1e <z_errno>
    d24e:	6800      	ldr	r0, [r0, #0]
    d250:	4240      	negs	r0, r0
    d252:	f7ff fc7b 	bl	cb4c <do_socket_close>
		ret = -errno;
    d256:	f00e fe62 	bl	1bf1e <z_errno>
    d25a:	6804      	ldr	r4, [r0, #0]
    d25c:	4264      	negs	r4, r4
    d25e:	e7cf      	b.n	d200 <do_tcp_receive+0x5c>
	} else if (ret == 0) {
    d260:	d111      	bne.n	d286 <do_tcp_receive+0xe2>
		LOG_WRN("recv() return 0");
    d262:	2302      	movs	r3, #2
    d264:	f04f 0100 	mov.w	r1, #0
    d268:	4a13      	ldr	r2, [pc, #76]	; (d2b8 <do_tcp_receive+0x114>)
    d26a:	f363 0107 	bfi	r1, r3, #0, #8
    d26e:	4b13      	ldr	r3, [pc, #76]	; (d2bc <do_tcp_receive+0x118>)
    d270:	4815      	ldr	r0, [pc, #84]	; (d2c8 <do_tcp_receive+0x124>)
    d272:	1a9b      	subs	r3, r3, r2
    d274:	08db      	lsrs	r3, r3, #3
    d276:	f363 118f 	bfi	r1, r3, #6, #10
    d27a:	f00f f9ea 	bl	1c652 <log_0>
		do_socket_close(0);
    d27e:	4620      	mov	r0, r4
    d280:	f7ff fc64 	bl	cb4c <do_socket_close>
    d284:	e7bc      	b.n	d200 <do_tcp_receive+0x5c>
		data[ret] = '\0';
    d286:	2700      	movs	r7, #0
		client.callback("#XTCPRECV: ");
    d288:	68ab      	ldr	r3, [r5, #8]
		data[ret] = '\0';
    d28a:	5437      	strb	r7, [r6, r0]
		client.callback("#XTCPRECV: ");
    d28c:	480f      	ldr	r0, [pc, #60]	; (d2cc <do_tcp_receive+0x128>)
    d28e:	4798      	blx	r3
		client.callback(data);
    d290:	68ab      	ldr	r3, [r5, #8]
    d292:	4630      	mov	r0, r6
    d294:	4798      	blx	r3
		client.callback("\r\n");
    d296:	68ab      	ldr	r3, [r5, #8]
    d298:	480d      	ldr	r0, [pc, #52]	; (d2d0 <do_tcp_receive+0x12c>)
    d29a:	4798      	blx	r3
		sprintf(buf, "#XTCPRECV: %d\r\n", ret);
    d29c:	4622      	mov	r2, r4
    d29e:	490d      	ldr	r1, [pc, #52]	; (d2d4 <do_tcp_receive+0x130>)
    d2a0:	480d      	ldr	r0, [pc, #52]	; (d2d8 <do_tcp_receive+0x134>)
    d2a2:	f003 fbc9 	bl	10a38 <sprintf>
		client.callback(buf);
    d2a6:	68ab      	ldr	r3, [r5, #8]
    d2a8:	480b      	ldr	r0, [pc, #44]	; (d2d8 <do_tcp_receive+0x134>)
    d2aa:	4798      	blx	r3
		ret = 0;
    d2ac:	463c      	mov	r4, r7
    d2ae:	e7a7      	b.n	d200 <do_tcp_receive+0x5c>
    d2b0:	20020344 	.word	0x20020344
    d2b4:	20020130 	.word	0x20020130
    d2b8:	0001ee58 	.word	0x0001ee58
    d2bc:	0001eed0 	.word	0x0001eed0
    d2c0:	0001f708 	.word	0x0001f708
    d2c4:	0001f71f 	.word	0x0001f71f
    d2c8:	0001f730 	.word	0x0001f730
    d2cc:	0001f740 	.word	0x0001f740
    d2d0:	0001f89b 	.word	0x0001f89b
    d2d4:	0001f74c 	.word	0x0001f74c
    d2d8:	20026368 	.word	0x20026368

0000d2dc <handle_at_tcp_recv>:
static int handle_at_tcp_recv(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	u16_t length, time;

	if (!client.connected) {
    d2dc:	4b19      	ldr	r3, [pc, #100]	; (d344 <handle_at_tcp_recv+0x68>)
{
    d2de:	b513      	push	{r0, r1, r4, lr}
	if (!client.connected) {
    d2e0:	795b      	ldrb	r3, [r3, #5]
{
    d2e2:	4604      	mov	r4, r0
	if (!client.connected) {
    d2e4:	b98b      	cbnz	r3, d30a <handle_at_tcp_recv+0x2e>
		LOG_ERR("TCP not connected yet");
    d2e6:	2301      	movs	r3, #1
    d2e8:	f04f 0100 	mov.w	r1, #0
    d2ec:	4a16      	ldr	r2, [pc, #88]	; (d348 <handle_at_tcp_recv+0x6c>)
    d2ee:	f363 0107 	bfi	r1, r3, #0, #8
    d2f2:	4b16      	ldr	r3, [pc, #88]	; (d34c <handle_at_tcp_recv+0x70>)
    d2f4:	4816      	ldr	r0, [pc, #88]	; (d350 <handle_at_tcp_recv+0x74>)
    d2f6:	1a9b      	subs	r3, r3, r2
    d2f8:	08db      	lsrs	r3, r3, #3
    d2fa:	f363 118f 	bfi	r1, r3, #6, #10
    d2fe:	f00f f9a8 	bl	1c652 <log_0>
	int err = -EINVAL;
    d302:	f06f 0015 	mvn.w	r0, #21
	default:
		break;
	}

	return err;
}
    d306:	b002      	add	sp, #8
    d308:	bd10      	pop	{r4, pc}
	switch (cmd_type) {
    d30a:	2801      	cmp	r0, #1
    d30c:	d1f9      	bne.n	d302 <handle_at_tcp_recv+0x26>
		if (at_params_valid_count_get(&m_param_list) < 3) {
    d30e:	4811      	ldr	r0, [pc, #68]	; (d354 <handle_at_tcp_recv+0x78>)
    d310:	f011 f829 	bl	1e366 <at_params_valid_count_get>
    d314:	2802      	cmp	r0, #2
    d316:	d9f4      	bls.n	d302 <handle_at_tcp_recv+0x26>
		err = at_params_short_get(&m_param_list, 1, &length);
    d318:	aa01      	add	r2, sp, #4
    d31a:	4621      	mov	r1, r4
    d31c:	480d      	ldr	r0, [pc, #52]	; (d354 <handle_at_tcp_recv+0x78>)
    d31e:	f010 ffed 	bl	1e2fc <at_params_short_get>
		if (err < 0) {
    d322:	2800      	cmp	r0, #0
    d324:	dbef      	blt.n	d306 <handle_at_tcp_recv+0x2a>
		err = at_params_short_get(&m_param_list, 2, &time);
    d326:	f10d 0206 	add.w	r2, sp, #6
    d32a:	2102      	movs	r1, #2
    d32c:	4809      	ldr	r0, [pc, #36]	; (d354 <handle_at_tcp_recv+0x78>)
    d32e:	f010 ffe5 	bl	1e2fc <at_params_short_get>
		if (err < 0) {
    d332:	2800      	cmp	r0, #0
    d334:	dbe7      	blt.n	d306 <handle_at_tcp_recv+0x2a>
		err = do_tcp_receive(length, time);
    d336:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    d33a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d33e:	f7ff ff31 	bl	d1a4 <do_tcp_receive>
		break;
    d342:	e7e0      	b.n	d306 <handle_at_tcp_recv+0x2a>
    d344:	20020130 	.word	0x20020130
    d348:	0001ee58 	.word	0x0001ee58
    d34c:	0001eed0 	.word	0x0001eed0
    d350:	0001f89e 	.word	0x0001f89e
    d354:	20020110 	.word	0x20020110

0000d358 <do_udp_init>:
{
    d358:	b538      	push	{r3, r4, r5, lr}
    d35a:	4604      	mov	r4, r0
    d35c:	460d      	mov	r5, r1
	if (check_for_ipv4(url, strlen(url))) {
    d35e:	f00f feb3 	bl	1d0c8 <strlen>
	for (index = 0; index < length; index++) {
    d362:	2300      	movs	r3, #0
    d364:	b2c0      	uxtb	r0, r0
    d366:	4283      	cmp	r3, r0
    d368:	db16      	blt.n	d398 <do_udp_init+0x40>
		ret = parse_host_by_ipv4(url, port);
    d36a:	4629      	mov	r1, r5
    d36c:	4620      	mov	r0, r4
    d36e:	f7ff fe4b 	bl	d008 <parse_host_by_ipv4>
		ret = parse_host_by_name(url, port, SOCK_DGRAM);
    d372:	4604      	mov	r4, r0
	if (ret) {
    d374:	b174      	cbz	r4, d394 <do_udp_init+0x3c>
		LOG_ERR("Parse failed: %d", ret);
    d376:	2301      	movs	r3, #1
    d378:	f04f 0200 	mov.w	r2, #0
    d37c:	490d      	ldr	r1, [pc, #52]	; (d3b4 <do_udp_init+0x5c>)
    d37e:	f363 0207 	bfi	r2, r3, #0, #8
    d382:	4b0d      	ldr	r3, [pc, #52]	; (d3b8 <do_udp_init+0x60>)
    d384:	480d      	ldr	r0, [pc, #52]	; (d3bc <do_udp_init+0x64>)
    d386:	1a5b      	subs	r3, r3, r1
    d388:	08db      	lsrs	r3, r3, #3
    d38a:	f363 128f 	bfi	r2, r3, #6, #10
    d38e:	4621      	mov	r1, r4
    d390:	f00f f96c 	bl	1c66c <log_1>
}
    d394:	4620      	mov	r0, r4
    d396:	bd38      	pop	{r3, r4, r5, pc}
		char ch = *(address + index);
    d398:	5ce2      	ldrb	r2, [r4, r3]
		if ((ch == '.') || (ch >= '0' && ch <= '9')) {
    d39a:	2a2e      	cmp	r2, #46	; 0x2e
    d39c:	d002      	beq.n	d3a4 <do_udp_init+0x4c>
    d39e:	3a30      	subs	r2, #48	; 0x30
    d3a0:	2a09      	cmp	r2, #9
    d3a2:	d801      	bhi.n	d3a8 <do_udp_init+0x50>
	for (index = 0; index < length; index++) {
    d3a4:	3301      	adds	r3, #1
    d3a6:	e7de      	b.n	d366 <do_udp_init+0xe>
		ret = parse_host_by_name(url, port, SOCK_DGRAM);
    d3a8:	2202      	movs	r2, #2
    d3aa:	4629      	mov	r1, r5
    d3ac:	4620      	mov	r0, r4
    d3ae:	f7ff fdcf 	bl	cf50 <parse_host_by_name>
    d3b2:	e7de      	b.n	d372 <do_udp_init+0x1a>
    d3b4:	0001ee58 	.word	0x0001ee58
    d3b8:	0001eed0 	.word	0x0001eed0
    d3bc:	0001f84b 	.word	0x0001f84b

0000d3c0 <handle_at_udp_recvfrom>:
 */
static int handle_at_udp_recvfrom(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	char url[TCPIP_MAX_URL];
	int size = TCPIP_MAX_URL;
    d3c0:	2380      	movs	r3, #128	; 0x80
{
    d3c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d3c6:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
	int size = TCPIP_MAX_URL;
    d3ca:	9304      	str	r3, [sp, #16]
	u16_t port, length, time;

	if (client.sock < 0) {
    d3cc:	4b69      	ldr	r3, [pc, #420]	; (d574 <handle_at_udp_recvfrom+0x1b4>)
{
    d3ce:	4680      	mov	r8, r0
	if (client.sock < 0) {
    d3d0:	681a      	ldr	r2, [r3, #0]
    d3d2:	461d      	mov	r5, r3
    d3d4:	2a00      	cmp	r2, #0
    d3d6:	da14      	bge.n	d402 <handle_at_udp_recvfrom+0x42>
		LOG_ERR("Socket not opened yet");
    d3d8:	2301      	movs	r3, #1
    d3da:	f04f 0100 	mov.w	r1, #0
    d3de:	4a66      	ldr	r2, [pc, #408]	; (d578 <handle_at_udp_recvfrom+0x1b8>)
    d3e0:	f363 0107 	bfi	r1, r3, #0, #8
    d3e4:	4b65      	ldr	r3, [pc, #404]	; (d57c <handle_at_udp_recvfrom+0x1bc>)
    d3e6:	4866      	ldr	r0, [pc, #408]	; (d580 <handle_at_udp_recvfrom+0x1c0>)
    d3e8:	1a9b      	subs	r3, r3, r2
    d3ea:	08db      	lsrs	r3, r3, #3
    d3ec:	f363 118f 	bfi	r1, r3, #6, #10
		return err;
	} else if (client.ip_proto != IPPROTO_UDP) {
		LOG_ERR("Invalid socket");
    d3f0:	f00f f92f 	bl	1c652 <log_0>
		return err;
    d3f4:	f06f 0415 	mvn.w	r4, #21
	default:
		break;
	}

	return err;
}
    d3f8:	4620      	mov	r0, r4
    d3fa:	f50d 7d38 	add.w	sp, sp, #736	; 0x2e0
    d3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (client.ip_proto != IPPROTO_UDP) {
    d402:	791b      	ldrb	r3, [r3, #4]
    d404:	2b11      	cmp	r3, #17
    d406:	d00c      	beq.n	d422 <handle_at_udp_recvfrom+0x62>
		LOG_ERR("Invalid socket");
    d408:	2301      	movs	r3, #1
    d40a:	f04f 0100 	mov.w	r1, #0
    d40e:	4a5a      	ldr	r2, [pc, #360]	; (d578 <handle_at_udp_recvfrom+0x1b8>)
    d410:	f363 0107 	bfi	r1, r3, #0, #8
    d414:	4b59      	ldr	r3, [pc, #356]	; (d57c <handle_at_udp_recvfrom+0x1bc>)
    d416:	485b      	ldr	r0, [pc, #364]	; (d584 <handle_at_udp_recvfrom+0x1c4>)
    d418:	1a9b      	subs	r3, r3, r2
    d41a:	08db      	lsrs	r3, r3, #3
    d41c:	f363 118f 	bfi	r1, r3, #6, #10
    d420:	e7e6      	b.n	d3f0 <handle_at_udp_recvfrom+0x30>
	switch (cmd_type) {
    d422:	2801      	cmp	r0, #1
    d424:	d1e6      	bne.n	d3f4 <handle_at_udp_recvfrom+0x34>
		if (at_params_valid_count_get(&m_param_list) < 5) {
    d426:	4858      	ldr	r0, [pc, #352]	; (d588 <handle_at_udp_recvfrom+0x1c8>)
    d428:	f010 ff9d 	bl	1e366 <at_params_valid_count_get>
    d42c:	2804      	cmp	r0, #4
    d42e:	d9e1      	bls.n	d3f4 <handle_at_udp_recvfrom+0x34>
		err = at_params_string_get(&m_param_list, 1, url, &size);
    d430:	af08      	add	r7, sp, #32
    d432:	ab04      	add	r3, sp, #16
    d434:	463a      	mov	r2, r7
    d436:	4641      	mov	r1, r8
    d438:	4853      	ldr	r0, [pc, #332]	; (d588 <handle_at_udp_recvfrom+0x1c8>)
    d43a:	f010 ff71 	bl	1e320 <at_params_string_get>
		if (err < 0) {
    d43e:	1e04      	subs	r4, r0, #0
    d440:	dbda      	blt.n	d3f8 <handle_at_udp_recvfrom+0x38>
		url[size] = '\0';
    d442:	f04f 0a00 	mov.w	sl, #0
    d446:	9b04      	ldr	r3, [sp, #16]
		err = at_params_short_get(&m_param_list, 2, &port);
    d448:	f10d 020a 	add.w	r2, sp, #10
    d44c:	2102      	movs	r1, #2
    d44e:	484e      	ldr	r0, [pc, #312]	; (d588 <handle_at_udp_recvfrom+0x1c8>)
		url[size] = '\0';
    d450:	f807 a003 	strb.w	sl, [r7, r3]
		err = at_params_short_get(&m_param_list, 2, &port);
    d454:	f010 ff52 	bl	1e2fc <at_params_short_get>
		if (err < 0) {
    d458:	1e04      	subs	r4, r0, #0
    d45a:	dbcd      	blt.n	d3f8 <handle_at_udp_recvfrom+0x38>
		err = at_params_short_get(&m_param_list, 3, &length);
    d45c:	aa03      	add	r2, sp, #12
    d45e:	2103      	movs	r1, #3
    d460:	4849      	ldr	r0, [pc, #292]	; (d588 <handle_at_udp_recvfrom+0x1c8>)
    d462:	f010 ff4b 	bl	1e2fc <at_params_short_get>
		if (err < 0) {
    d466:	1e04      	subs	r4, r0, #0
    d468:	dbc6      	blt.n	d3f8 <handle_at_udp_recvfrom+0x38>
		err = at_params_short_get(&m_param_list, 4, &time);
    d46a:	f10d 020e 	add.w	r2, sp, #14
    d46e:	2104      	movs	r1, #4
    d470:	4845      	ldr	r0, [pc, #276]	; (d588 <handle_at_udp_recvfrom+0x1c8>)
    d472:	f010 ff43 	bl	1e2fc <at_params_short_get>
		if (err < 0) {
    d476:	1e04      	subs	r4, r0, #0
    d478:	dbbe      	blt.n	d3f8 <handle_at_udp_recvfrom+0x38>
	int sockaddr_len = sizeof(struct sockaddr);
    d47a:	2218      	movs	r2, #24
		err = do_udp_recvfrom(url, port, length, time);
    d47c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	int sockaddr_len = sizeof(struct sockaddr);
    d480:	ae05      	add	r6, sp, #20
	ret = do_udp_init(url, port);
    d482:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    d486:	4638      	mov	r0, r7
		err = do_udp_recvfrom(url, port, length, time);
    d488:	f8bd 900c 	ldrh.w	r9, [sp, #12]
	int sockaddr_len = sizeof(struct sockaddr);
    d48c:	6032      	str	r2, [r6, #0]
	struct timeval tmo = {
    d48e:	e9cd 3a06 	strd	r3, sl, [sp, #24]
	ret = do_udp_init(url, port);
    d492:	f7ff ff61 	bl	d358 <do_udp_init>
	if (ret < 0) {
    d496:	1e04      	subs	r4, r0, #0
    d498:	dbae      	blt.n	d3f8 <handle_at_udp_recvfrom+0x38>
    d49a:	2208      	movs	r2, #8
    d49c:	4f3b      	ldr	r7, [pc, #236]	; (d58c <handle_at_udp_recvfrom+0x1cc>)
    d49e:	4641      	mov	r1, r8
    d4a0:	683b      	ldr	r3, [r7, #0]
    d4a2:	9200      	str	r2, [sp, #0]
    d4a4:	69dc      	ldr	r4, [r3, #28]
    d4a6:	2214      	movs	r2, #20
    d4a8:	ab06      	add	r3, sp, #24
    d4aa:	6828      	ldr	r0, [r5, #0]
    d4ac:	47a0      	blx	r4
	if (ret < 0) {
    d4ae:	1e04      	subs	r4, r0, #0
    d4b0:	da19      	bge.n	d4e6 <handle_at_udp_recvfrom+0x126>
		LOG_ERR("setsockopt() error: %d", -errno);
    d4b2:	2301      	movs	r3, #1
    d4b4:	f04f 0500 	mov.w	r5, #0
    d4b8:	4a2f      	ldr	r2, [pc, #188]	; (d578 <handle_at_udp_recvfrom+0x1b8>)
    d4ba:	f363 0507 	bfi	r5, r3, #0, #8
    d4be:	4b2f      	ldr	r3, [pc, #188]	; (d57c <handle_at_udp_recvfrom+0x1bc>)
    d4c0:	1a9b      	subs	r3, r3, r2
    d4c2:	08db      	lsrs	r3, r3, #3
    d4c4:	f363 158f 	bfi	r5, r3, #6, #10
    d4c8:	f00e fd29 	bl	1bf1e <z_errno>
    d4cc:	6801      	ldr	r1, [r0, #0]
    d4ce:	462a      	mov	r2, r5
    d4d0:	4249      	negs	r1, r1
    d4d2:	482f      	ldr	r0, [pc, #188]	; (d590 <handle_at_udp_recvfrom+0x1d0>)
    d4d4:	f00f f8ca 	bl	1c66c <log_1>
		do_socket_close(-errno);
    d4d8:	f00e fd21 	bl	1bf1e <z_errno>
    d4dc:	6800      	ldr	r0, [r0, #0]
    d4de:	4240      	negs	r0, r0
    d4e0:	f7ff fb34 	bl	cb4c <do_socket_close>
		return ret;
    d4e4:	e788      	b.n	d3f8 <handle_at_udp_recvfrom+0x38>
	if (length > NET_IPV4_MTU) {
    d4e6:	683b      	ldr	r3, [r7, #0]
    d4e8:	f5b9 7f10 	cmp.w	r9, #576	; 0x240
    d4ec:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    d4ee:	4b29      	ldr	r3, [pc, #164]	; (d594 <handle_at_udp_recvfrom+0x1d4>)
    d4f0:	af28      	add	r7, sp, #160	; 0xa0
    d4f2:	6828      	ldr	r0, [r5, #0]
	return socket_ops->recvfrom(sock, buf, len, flags, from, fromlen);
    d4f4:	bf88      	it	hi
    d4f6:	f44f 7210 	movhi.w	r2, #576	; 0x240
    d4fa:	9601      	str	r6, [sp, #4]
    d4fc:	9300      	str	r3, [sp, #0]
    d4fe:	bf98      	it	ls
    d500:	fa0f f289 	sxthls.w	r2, r9
    d504:	2300      	movs	r3, #0
    d506:	4639      	mov	r1, r7
    d508:	47a0      	blx	r4
	if (ret < 0) {
    d50a:	2800      	cmp	r0, #0
    d50c:	4606      	mov	r6, r0
    d50e:	da1d      	bge.n	d54c <handle_at_udp_recvfrom+0x18c>
		LOG_WRN("recvfrom() error: %d", -errno);
    d510:	2302      	movs	r3, #2
    d512:	f04f 0400 	mov.w	r4, #0
    d516:	4a18      	ldr	r2, [pc, #96]	; (d578 <handle_at_udp_recvfrom+0x1b8>)
    d518:	f363 0407 	bfi	r4, r3, #0, #8
    d51c:	4b17      	ldr	r3, [pc, #92]	; (d57c <handle_at_udp_recvfrom+0x1bc>)
    d51e:	1a9b      	subs	r3, r3, r2
    d520:	08db      	lsrs	r3, r3, #3
    d522:	f363 148f 	bfi	r4, r3, #6, #10
    d526:	f00e fcfa 	bl	1bf1e <z_errno>
    d52a:	6801      	ldr	r1, [r0, #0]
    d52c:	4622      	mov	r2, r4
    d52e:	4249      	negs	r1, r1
    d530:	4819      	ldr	r0, [pc, #100]	; (d598 <handle_at_udp_recvfrom+0x1d8>)
    d532:	f00f f89b 	bl	1c66c <log_1>
		do_socket_close(-errno);
    d536:	f00e fcf2 	bl	1bf1e <z_errno>
    d53a:	6800      	ldr	r0, [r0, #0]
    d53c:	4240      	negs	r0, r0
    d53e:	f7ff fb05 	bl	cb4c <do_socket_close>
		ret = -errno;
    d542:	f00e fcec 	bl	1bf1e <z_errno>
    d546:	6804      	ldr	r4, [r0, #0]
    d548:	4264      	negs	r4, r4
    d54a:	e755      	b.n	d3f8 <handle_at_udp_recvfrom+0x38>
		data[ret] = '\0';
    d54c:	2400      	movs	r4, #0
		client.callback("#XUDPRECV: ");
    d54e:	68ab      	ldr	r3, [r5, #8]
		data[ret] = '\0';
    d550:	543c      	strb	r4, [r7, r0]
		client.callback("#XUDPRECV: ");
    d552:	4812      	ldr	r0, [pc, #72]	; (d59c <handle_at_udp_recvfrom+0x1dc>)
    d554:	4798      	blx	r3
		client.callback(data);
    d556:	68ab      	ldr	r3, [r5, #8]
    d558:	4638      	mov	r0, r7
    d55a:	4798      	blx	r3
		client.callback("\r\n");
    d55c:	68ab      	ldr	r3, [r5, #8]
    d55e:	4810      	ldr	r0, [pc, #64]	; (d5a0 <handle_at_udp_recvfrom+0x1e0>)
    d560:	4798      	blx	r3
		sprintf(buf, "#XUDPRECV: %d\r\n", ret);
    d562:	4632      	mov	r2, r6
    d564:	490f      	ldr	r1, [pc, #60]	; (d5a4 <handle_at_udp_recvfrom+0x1e4>)
    d566:	4810      	ldr	r0, [pc, #64]	; (d5a8 <handle_at_udp_recvfrom+0x1e8>)
    d568:	f003 fa66 	bl	10a38 <sprintf>
		client.callback(buf);
    d56c:	68ab      	ldr	r3, [r5, #8]
    d56e:	480e      	ldr	r0, [pc, #56]	; (d5a8 <handle_at_udp_recvfrom+0x1e8>)
    d570:	4798      	blx	r3
		break;
    d572:	e741      	b.n	d3f8 <handle_at_udp_recvfrom+0x38>
    d574:	20020130 	.word	0x20020130
    d578:	0001ee58 	.word	0x0001ee58
    d57c:	0001eed0 	.word	0x0001eed0
    d580:	0001f7e3 	.word	0x0001f7e3
    d584:	0001f8d6 	.word	0x0001f8d6
    d588:	20020110 	.word	0x20020110
    d58c:	20020344 	.word	0x20020344
    d590:	0001f708 	.word	0x0001f708
    d594:	20024e2c 	.word	0x20024e2c
    d598:	0001f8e5 	.word	0x0001f8e5
    d59c:	0001f8fa 	.word	0x0001f8fa
    d5a0:	0001f89b 	.word	0x0001f89b
    d5a4:	0001f906 	.word	0x0001f906
    d5a8:	20026368 	.word	0x20026368

0000d5ac <do_udp_sendto>:
{
    d5ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    d5b0:	4604      	mov	r4, r0
	u32_t datalen = strlen(data);
    d5b2:	4610      	mov	r0, r2
{
    d5b4:	460d      	mov	r5, r1
    d5b6:	4617      	mov	r7, r2
	u32_t datalen = strlen(data);
    d5b8:	f00f fd86 	bl	1d0c8 <strlen>
	ret = do_udp_init(url, port);
    d5bc:	4629      	mov	r1, r5
	u32_t datalen = strlen(data);
    d5be:	4606      	mov	r6, r0
	ret = do_udp_init(url, port);
    d5c0:	4620      	mov	r0, r4
    d5c2:	f7ff fec9 	bl	d358 <do_udp_init>
	if (ret < 0) {
    d5c6:	2800      	cmp	r0, #0
    d5c8:	db3c      	blt.n	d644 <do_udp_sendto+0x98>
	u32_t offset = 0;
    d5ca:	2400      	movs	r4, #0
    d5cc:	4d20      	ldr	r5, [pc, #128]	; (d650 <do_udp_sendto+0xa4>)
	return socket_ops->sendto(sock, buf, len, flags, to, tolen);
    d5ce:	f8df 8098 	ldr.w	r8, [pc, #152]	; d668 <do_udp_sendto+0xbc>
    d5d2:	f8df 9098 	ldr.w	r9, [pc, #152]	; d66c <do_udp_sendto+0xc0>
	while (offset < datalen) {
    d5d6:	42a6      	cmp	r6, r4
    d5d8:	d809      	bhi.n	d5ee <do_udp_sendto+0x42>
	sprintf(buf, "#XUDPSENDTO: %d\r\n", offset);
    d5da:	4622      	mov	r2, r4
    d5dc:	491d      	ldr	r1, [pc, #116]	; (d654 <do_udp_sendto+0xa8>)
    d5de:	481e      	ldr	r0, [pc, #120]	; (d658 <do_udp_sendto+0xac>)
    d5e0:	f003 fa2a 	bl	10a38 <sprintf>
	client.callback(buf);
    d5e4:	481c      	ldr	r0, [pc, #112]	; (d658 <do_udp_sendto+0xac>)
    d5e6:	68ab      	ldr	r3, [r5, #8]
    d5e8:	4798      	blx	r3
	return 0;
    d5ea:	2000      	movs	r0, #0
    d5ec:	e02a      	b.n	d644 <do_udp_sendto+0x98>
    d5ee:	2208      	movs	r2, #8
    d5f0:	e9cd 9200 	strd	r9, r2, [sp]
    d5f4:	f8d8 3000 	ldr.w	r3, [r8]
    d5f8:	1b32      	subs	r2, r6, r4
    d5fa:	f8d3 a030 	ldr.w	sl, [r3, #48]	; 0x30
    d5fe:	1939      	adds	r1, r7, r4
    d600:	2300      	movs	r3, #0
    d602:	6828      	ldr	r0, [r5, #0]
    d604:	47d0      	blx	sl
		if (ret <= 0) {
    d606:	2800      	cmp	r0, #0
    d608:	dc1f      	bgt.n	d64a <do_udp_sendto+0x9e>
			LOG_ERR("sendto() failed: %d", -errno);
    d60a:	2301      	movs	r3, #1
    d60c:	f04f 0400 	mov.w	r4, #0
    d610:	4a12      	ldr	r2, [pc, #72]	; (d65c <do_udp_sendto+0xb0>)
    d612:	f363 0407 	bfi	r4, r3, #0, #8
    d616:	4b12      	ldr	r3, [pc, #72]	; (d660 <do_udp_sendto+0xb4>)
    d618:	1a9b      	subs	r3, r3, r2
    d61a:	08db      	lsrs	r3, r3, #3
    d61c:	f363 148f 	bfi	r4, r3, #6, #10
    d620:	f00e fc7d 	bl	1bf1e <z_errno>
    d624:	6801      	ldr	r1, [r0, #0]
    d626:	4622      	mov	r2, r4
    d628:	4249      	negs	r1, r1
    d62a:	480e      	ldr	r0, [pc, #56]	; (d664 <do_udp_sendto+0xb8>)
    d62c:	f00f f81e 	bl	1c66c <log_1>
			do_socket_close(-errno);
    d630:	f00e fc75 	bl	1bf1e <z_errno>
    d634:	6800      	ldr	r0, [r0, #0]
    d636:	4240      	negs	r0, r0
    d638:	f7ff fa88 	bl	cb4c <do_socket_close>
			return -errno;
    d63c:	f00e fc6f 	bl	1bf1e <z_errno>
    d640:	6800      	ldr	r0, [r0, #0]
    d642:	4240      	negs	r0, r0
}
    d644:	b002      	add	sp, #8
    d646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		offset += ret;
    d64a:	4404      	add	r4, r0
    d64c:	e7c3      	b.n	d5d6 <do_udp_sendto+0x2a>
    d64e:	bf00      	nop
    d650:	20020130 	.word	0x20020130
    d654:	0001f770 	.word	0x0001f770
    d658:	20026368 	.word	0x20026368
    d65c:	0001ee58 	.word	0x0001ee58
    d660:	0001eed0 	.word	0x0001eed0
    d664:	0001f75c 	.word	0x0001f75c
    d668:	20020344 	.word	0x20020344
    d66c:	20024e2c 	.word	0x20024e2c

0000d670 <handle_at_udp_sendto>:
{
    d670:	b570      	push	{r4, r5, r6, lr}
	if (client.sock < 0) {
    d672:	4b2e      	ldr	r3, [pc, #184]	; (d72c <handle_at_udp_sendto+0xbc>)
{
    d674:	f5ad 7d32 	sub.w	sp, sp, #712	; 0x2c8
	if (client.sock < 0) {
    d678:	681a      	ldr	r2, [r3, #0]
{
    d67a:	4605      	mov	r5, r0
	if (client.sock < 0) {
    d67c:	2a00      	cmp	r2, #0
    d67e:	da12      	bge.n	d6a6 <handle_at_udp_sendto+0x36>
		LOG_ERR("Socket not opened yet");
    d680:	2301      	movs	r3, #1
    d682:	f04f 0100 	mov.w	r1, #0
    d686:	4a2a      	ldr	r2, [pc, #168]	; (d730 <handle_at_udp_sendto+0xc0>)
    d688:	f363 0107 	bfi	r1, r3, #0, #8
    d68c:	4b29      	ldr	r3, [pc, #164]	; (d734 <handle_at_udp_sendto+0xc4>)
    d68e:	482a      	ldr	r0, [pc, #168]	; (d738 <handle_at_udp_sendto+0xc8>)
    d690:	1a9b      	subs	r3, r3, r2
    d692:	08db      	lsrs	r3, r3, #3
    d694:	f363 118f 	bfi	r1, r3, #6, #10
		LOG_ERR("Invalid socket");
    d698:	f00e ffdb 	bl	1c652 <log_0>
		return err;
    d69c:	f06f 0015 	mvn.w	r0, #21
}
    d6a0:	f50d 7d32 	add.w	sp, sp, #712	; 0x2c8
    d6a4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (client.ip_proto != IPPROTO_UDP) {
    d6a6:	791b      	ldrb	r3, [r3, #4]
    d6a8:	2b11      	cmp	r3, #17
    d6aa:	d00c      	beq.n	d6c6 <handle_at_udp_sendto+0x56>
		LOG_ERR("Invalid socket");
    d6ac:	2301      	movs	r3, #1
    d6ae:	f04f 0100 	mov.w	r1, #0
    d6b2:	4a1f      	ldr	r2, [pc, #124]	; (d730 <handle_at_udp_sendto+0xc0>)
    d6b4:	f363 0107 	bfi	r1, r3, #0, #8
    d6b8:	4b1e      	ldr	r3, [pc, #120]	; (d734 <handle_at_udp_sendto+0xc4>)
    d6ba:	4820      	ldr	r0, [pc, #128]	; (d73c <handle_at_udp_sendto+0xcc>)
    d6bc:	1a9b      	subs	r3, r3, r2
    d6be:	08db      	lsrs	r3, r3, #3
    d6c0:	f363 118f 	bfi	r1, r3, #6, #10
    d6c4:	e7e8      	b.n	d698 <handle_at_udp_sendto+0x28>
	switch (cmd_type) {
    d6c6:	2801      	cmp	r0, #1
    d6c8:	d1e8      	bne.n	d69c <handle_at_udp_sendto+0x2c>
		if (at_params_valid_count_get(&m_param_list) < 4) {
    d6ca:	481d      	ldr	r0, [pc, #116]	; (d740 <handle_at_udp_sendto+0xd0>)
    d6cc:	f010 fe4b 	bl	1e366 <at_params_valid_count_get>
    d6d0:	2803      	cmp	r0, #3
    d6d2:	d9e3      	bls.n	d69c <handle_at_udp_sendto+0x2c>
		size = TCPIP_MAX_URL;
    d6d4:	2380      	movs	r3, #128	; 0x80
		err = at_params_string_get(&m_param_list, 1, url, &size);
    d6d6:	ac02      	add	r4, sp, #8
		size = TCPIP_MAX_URL;
    d6d8:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&m_param_list, 1, url, &size);
    d6da:	4622      	mov	r2, r4
    d6dc:	ab01      	add	r3, sp, #4
    d6de:	4629      	mov	r1, r5
    d6e0:	4817      	ldr	r0, [pc, #92]	; (d740 <handle_at_udp_sendto+0xd0>)
    d6e2:	f010 fe1d 	bl	1e320 <at_params_string_get>
		if (err < 0) {
    d6e6:	2800      	cmp	r0, #0
    d6e8:	dbda      	blt.n	d6a0 <handle_at_udp_sendto+0x30>
		url[size] = '\0';
    d6ea:	2600      	movs	r6, #0
    d6ec:	9b01      	ldr	r3, [sp, #4]
		err = at_params_short_get(&m_param_list, 2, &port);
    d6ee:	f10d 0202 	add.w	r2, sp, #2
    d6f2:	2102      	movs	r1, #2
    d6f4:	4812      	ldr	r0, [pc, #72]	; (d740 <handle_at_udp_sendto+0xd0>)
		url[size] = '\0';
    d6f6:	54e6      	strb	r6, [r4, r3]
		err = at_params_short_get(&m_param_list, 2, &port);
    d6f8:	f010 fe00 	bl	1e2fc <at_params_short_get>
		if (err < 0) {
    d6fc:	2800      	cmp	r0, #0
    d6fe:	dbcf      	blt.n	d6a0 <handle_at_udp_sendto+0x30>
		size = NET_IPV4_MTU;
    d700:	f44f 7310 	mov.w	r3, #576	; 0x240
		err = at_params_string_get(&m_param_list, 3, data, &size);
    d704:	ad22      	add	r5, sp, #136	; 0x88
		size = NET_IPV4_MTU;
    d706:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&m_param_list, 3, data, &size);
    d708:	462a      	mov	r2, r5
    d70a:	ab01      	add	r3, sp, #4
    d70c:	2103      	movs	r1, #3
    d70e:	480c      	ldr	r0, [pc, #48]	; (d740 <handle_at_udp_sendto+0xd0>)
    d710:	f010 fe06 	bl	1e320 <at_params_string_get>
		if (err < 0) {
    d714:	2800      	cmp	r0, #0
    d716:	dbc3      	blt.n	d6a0 <handle_at_udp_sendto+0x30>
		data[size] = '\0';
    d718:	9b01      	ldr	r3, [sp, #4]
		err = do_udp_sendto(url, port, data);
    d71a:	462a      	mov	r2, r5
    d71c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    d720:	4620      	mov	r0, r4
		data[size] = '\0';
    d722:	54ee      	strb	r6, [r5, r3]
		err = do_udp_sendto(url, port, data);
    d724:	f7ff ff42 	bl	d5ac <do_udp_sendto>
		break;
    d728:	e7ba      	b.n	d6a0 <handle_at_udp_sendto+0x30>
    d72a:	bf00      	nop
    d72c:	20020130 	.word	0x20020130
    d730:	0001ee58 	.word	0x0001ee58
    d734:	0001eed0 	.word	0x0001eed0
    d738:	0001f7e3 	.word	0x0001f7e3
    d73c:	0001f8d6 	.word	0x0001f8d6
    d740:	20020110 	.word	0x20020110

0000d744 <slm_at_tcpip_parse>:

/**@brief API to handle TCP/IP AT commands
 */
int slm_at_tcpip_parse(const char *at_cmd)
{
    d744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d748:	4d20      	ldr	r5, [pc, #128]	; (d7cc <slm_at_tcpip_parse+0x88>)
    d74a:	4606      	mov	r6, r0
	int ret = -ENOTSUP;
	enum at_cmd_type type;

	for (int i = 0; i < AT_TCPIP_MAX; i++) {
    d74c:	2400      	movs	r4, #0
    d74e:	46a8      	mov	r8, r5
		u8_t cmd_len = strlen(m_tcpip_at_list[i].string);
    d750:	686f      	ldr	r7, [r5, #4]
    d752:	4638      	mov	r0, r7
    d754:	f00f fcb8 	bl	1d0c8 <strlen>
    d758:	2300      	movs	r3, #0
    d75a:	b2c0      	uxtb	r0, r0
    d75c:	4283      	cmp	r3, r0
    d75e:	db18      	blt.n	d792 <slm_at_tcpip_parse+0x4e>

		if (slm_at_cmd_cmp(at_cmd, m_tcpip_at_list[i].string,
			cmd_len)) {
			ret = at_parser_params_from_str(at_cmd, NULL,
    d760:	2100      	movs	r1, #0
    d762:	4a1b      	ldr	r2, [pc, #108]	; (d7d0 <slm_at_tcpip_parse+0x8c>)
    d764:	4630      	mov	r0, r6
    d766:	f010 fccf 	bl	1e108 <at_parser_params_from_str>
						&m_param_list);
			if (ret < 0) {
    d76a:	1e01      	subs	r1, r0, #0
    d76c:	da1c      	bge.n	d7a8 <slm_at_tcpip_parse+0x64>
				LOG_ERR("Failed to parse AT command %d", ret);
    d76e:	2301      	movs	r3, #1
    d770:	f04f 0200 	mov.w	r2, #0
    d774:	4817      	ldr	r0, [pc, #92]	; (d7d4 <slm_at_tcpip_parse+0x90>)
    d776:	f363 0207 	bfi	r2, r3, #0, #8
    d77a:	4b17      	ldr	r3, [pc, #92]	; (d7d8 <slm_at_tcpip_parse+0x94>)
    d77c:	1a1b      	subs	r3, r3, r0
    d77e:	08db      	lsrs	r3, r3, #3
    d780:	4816      	ldr	r0, [pc, #88]	; (d7dc <slm_at_tcpip_parse+0x98>)
    d782:	f363 128f 	bfi	r2, r3, #6, #10
    d786:	f00e ff71 	bl	1c66c <log_1>
				return -EINVAL;
    d78a:	f06f 0015 	mvn.w	r0, #21
			break;
		}
	}

	return ret;
}
    d78e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (toupper(*(cmd + i)) != *(slm_cmd + i)) {
    d792:	5cf2      	ldrb	r2, [r6, r3]
    d794:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
    d798:	2919      	cmp	r1, #25
    d79a:	5cf9      	ldrb	r1, [r7, r3]
    d79c:	bf98      	it	ls
    d79e:	3a20      	subls	r2, #32
    d7a0:	4291      	cmp	r1, r2
    d7a2:	d10b      	bne.n	d7bc <slm_at_tcpip_parse+0x78>
	for (int i = 0; i < length; i++) {
    d7a4:	3301      	adds	r3, #1
    d7a6:	e7d9      	b.n	d75c <slm_at_tcpip_parse+0x18>
			type = at_parser_cmd_type_get(at_cmd);
    d7a8:	4630      	mov	r0, r6
    d7aa:	f010 fcb0 	bl	1e10e <at_parser_cmd_type_get>
			ret = m_tcpip_at_list[i].handler(type);
    d7ae:	230c      	movs	r3, #12
    d7b0:	fb03 8404 	mla	r4, r3, r4, r8
    d7b4:	68a3      	ldr	r3, [r4, #8]
}
    d7b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			ret = m_tcpip_at_list[i].handler(type);
    d7ba:	4718      	bx	r3
	for (int i = 0; i < AT_TCPIP_MAX; i++) {
    d7bc:	3401      	adds	r4, #1
    d7be:	2c07      	cmp	r4, #7
    d7c0:	f105 050c 	add.w	r5, r5, #12
    d7c4:	d1c4      	bne.n	d750 <slm_at_tcpip_parse+0xc>
	int ret = -ENOTSUP;
    d7c6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d7ca:	e7e0      	b.n	d78e <slm_at_tcpip_parse+0x4a>
    d7cc:	0001ef10 	.word	0x0001ef10
    d7d0:	20020110 	.word	0x20020110
    d7d4:	0001ee58 	.word	0x0001ee58
    d7d8:	0001eed0 	.word	0x0001eed0
    d7dc:	0001f4b1 	.word	0x0001f4b1

0000d7e0 <request_cell_id>:
	close(at_sock);
}

// Request Cell ID: AT+CEREG?
int request_cell_id(int at_sock)
{
    d7e0:	b510      	push	{r4, lr}
    d7e2:	b0a6      	sub	sp, #152	; 0x98
	int  bytes_sent;
	int  bytes_received;
	char buffer[150] = {0};
    d7e4:	2296      	movs	r2, #150	; 0x96
    d7e6:	2100      	movs	r1, #0
{
    d7e8:	4604      	mov	r4, r0
	char buffer[150] = {0};
    d7ea:	4668      	mov	r0, sp
    d7ec:	f00f fcd1 	bl	1d192 <memset>

	bytes_sent = send(at_sock, AT_CEREG, strlen(AT_CEREG), 0);
    d7f0:	482d      	ldr	r0, [pc, #180]	; (d8a8 <request_cell_id+0xc8>)
    d7f2:	f00f fc69 	bl	1d0c8 <strlen>
    d7f6:	492c      	ldr	r1, [pc, #176]	; (d8a8 <request_cell_id+0xc8>)
    d7f8:	4602      	mov	r2, r0
    d7fa:	4620      	mov	r0, r4
    d7fc:	f7ff fab4 	bl	cd68 <send.constprop.11>
	if (bytes_sent < 0) {
    d800:	2800      	cmp	r0, #0
    d802:	da13      	bge.n	d82c <request_cell_id+0x4c>
		LOG_INF("CEREG send error");
    d804:	2303      	movs	r3, #3
    d806:	f04f 0100 	mov.w	r1, #0
    d80a:	4a28      	ldr	r2, [pc, #160]	; (d8ac <request_cell_id+0xcc>)
    d80c:	f363 0107 	bfi	r1, r3, #0, #8
    d810:	4b27      	ldr	r3, [pc, #156]	; (d8b0 <request_cell_id+0xd0>)
    d812:	4828      	ldr	r0, [pc, #160]	; (d8b4 <request_cell_id+0xd4>)
    d814:	1a9b      	subs	r3, r3, r2
    d816:	08db      	lsrs	r3, r3, #3
    d818:	f363 118f 	bfi	r1, r3, #6, #10
		}
		LOG_INF("Current cell ID = %s", current_cell_id);
	} 
	else if (strstr(buffer, "ERROR") != NULL) 
	{
		LOG_ERR("Error while getting current cell ID!");
    d81c:	f00e ff19 	bl	1c652 <log_0>
		close(at_sock);
    d820:	4620      	mov	r0, r4
    d822:	f7ff f98d 	bl	cb40 <close>
		return -1;
    d826:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d82a:	e028      	b.n	d87e <request_cell_id+0x9e>
		bytes_received = recv(at_sock, buffer, 100, 0);
    d82c:	2264      	movs	r2, #100	; 0x64
    d82e:	4669      	mov	r1, sp
    d830:	4620      	mov	r0, r4
    d832:	f7ff fb17 	bl	ce64 <recv.constprop.13>
	} while (bytes_received == 0);
    d836:	2800      	cmp	r0, #0
    d838:	d0f8      	beq.n	d82c <request_cell_id+0x4c>
	if(strstr(buffer, "OK") != NULL)
    d83a:	491f      	ldr	r1, [pc, #124]	; (d8b8 <request_cell_id+0xd8>)
    d83c:	4668      	mov	r0, sp
    d83e:	f00f fbee 	bl	1d01e <strstr>
    d842:	b1f0      	cbz	r0, d882 <request_cell_id+0xa2>
		char* pos = strstr(buffer, "\",\"")+3;		
    d844:	491d      	ldr	r1, [pc, #116]	; (d8bc <request_cell_id+0xdc>)
    d846:	4668      	mov	r0, sp
    d848:	f00f fbe9 	bl	1d01e <strstr>
    d84c:	4a1c      	ldr	r2, [pc, #112]	; (d8c0 <request_cell_id+0xe0>)
    d84e:	1c83      	adds	r3, r0, #2
    d850:	300a      	adds	r0, #10
			current_cell_id[i] = pos[i];
    d852:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		for(uint8_t i=0; i<8; i++)
    d856:	4283      	cmp	r3, r0
			current_cell_id[i] = pos[i];
    d858:	f802 1b01 	strb.w	r1, [r2], #1
		for(uint8_t i=0; i<8; i++)
    d85c:	d1f9      	bne.n	d852 <request_cell_id+0x72>
		LOG_INF("Current cell ID = %s", current_cell_id);
    d85e:	2303      	movs	r3, #3
    d860:	f04f 0200 	mov.w	r2, #0
    d864:	4911      	ldr	r1, [pc, #68]	; (d8ac <request_cell_id+0xcc>)
    d866:	f363 0207 	bfi	r2, r3, #0, #8
    d86a:	4b11      	ldr	r3, [pc, #68]	; (d8b0 <request_cell_id+0xd0>)
    d86c:	4815      	ldr	r0, [pc, #84]	; (d8c4 <request_cell_id+0xe4>)
    d86e:	1a5b      	subs	r3, r3, r1
    d870:	08db      	lsrs	r3, r3, #3
    d872:	f363 128f 	bfi	r2, r3, #6, #10
    d876:	4912      	ldr	r1, [pc, #72]	; (d8c0 <request_cell_id+0xe0>)
    d878:	f00e fef8 	bl	1c66c <log_1>
	}
	return 0;
    d87c:	2000      	movs	r0, #0
}
    d87e:	b026      	add	sp, #152	; 0x98
    d880:	bd10      	pop	{r4, pc}
	else if (strstr(buffer, "ERROR") != NULL) 
    d882:	4911      	ldr	r1, [pc, #68]	; (d8c8 <request_cell_id+0xe8>)
    d884:	4668      	mov	r0, sp
    d886:	f00f fbca 	bl	1d01e <strstr>
    d88a:	2800      	cmp	r0, #0
    d88c:	d0f7      	beq.n	d87e <request_cell_id+0x9e>
		LOG_ERR("Error while getting current cell ID!");
    d88e:	2301      	movs	r3, #1
    d890:	f04f 0100 	mov.w	r1, #0
    d894:	4a05      	ldr	r2, [pc, #20]	; (d8ac <request_cell_id+0xcc>)
    d896:	f363 0107 	bfi	r1, r3, #0, #8
    d89a:	4b05      	ldr	r3, [pc, #20]	; (d8b0 <request_cell_id+0xd0>)
    d89c:	480b      	ldr	r0, [pc, #44]	; (d8cc <request_cell_id+0xec>)
    d89e:	1a9b      	subs	r3, r3, r2
    d8a0:	08db      	lsrs	r3, r3, #3
    d8a2:	f363 118f 	bfi	r1, r3, #6, #10
    d8a6:	e7b9      	b.n	d81c <request_cell_id+0x3c>
    d8a8:	0001f9c5 	.word	0x0001f9c5
    d8ac:	0001ee58 	.word	0x0001ee58
    d8b0:	0001eed0 	.word	0x0001eed0
    d8b4:	0001f9cf 	.word	0x0001f9cf
    d8b8:	0001fcf6 	.word	0x0001fcf6
    d8bc:	0001f9e0 	.word	0x0001f9e0
    d8c0:	20026494 	.word	0x20026494
    d8c4:	0001f9e4 	.word	0x0001f9e4
    d8c8:	0001f9f9 	.word	0x0001f9f9
    d8cc:	0001f9ff 	.word	0x0001f9ff

0000d8d0 <request_rsrp>:

// Get and parse current RSRP: AT+CESQ
int request_rsrp(int at_sock)
{
    d8d0:	b570      	push	{r4, r5, r6, lr}
    d8d2:	b0a6      	sub	sp, #152	; 0x98
	int  bytes_sent;
	int  bytes_received;
	char buffer[150] = {0};
    d8d4:	2296      	movs	r2, #150	; 0x96
    d8d6:	2100      	movs	r1, #0
{
    d8d8:	4604      	mov	r4, r0
	char buffer[150] = {0};
    d8da:	4668      	mov	r0, sp
    d8dc:	f00f fc59 	bl	1d192 <memset>

	bytes_sent = send(at_sock, AT_CESQ, strlen(AT_CESQ), 0);
    d8e0:	4832      	ldr	r0, [pc, #200]	; (d9ac <request_rsrp+0xdc>)
    d8e2:	f00f fbf1 	bl	1d0c8 <strlen>
    d8e6:	4931      	ldr	r1, [pc, #196]	; (d9ac <request_rsrp+0xdc>)
    d8e8:	4602      	mov	r2, r0
    d8ea:	4620      	mov	r0, r4
    d8ec:	f7ff fa3c 	bl	cd68 <send.constprop.11>
	if (bytes_sent < 0) {
    d8f0:	2800      	cmp	r0, #0
    d8f2:	da13      	bge.n	d91c <request_rsrp+0x4c>
		LOG_INF("CESQ send error");
    d8f4:	2303      	movs	r3, #3
    d8f6:	f04f 0100 	mov.w	r1, #0
    d8fa:	4a2d      	ldr	r2, [pc, #180]	; (d9b0 <request_rsrp+0xe0>)
    d8fc:	f363 0107 	bfi	r1, r3, #0, #8
    d900:	4b2c      	ldr	r3, [pc, #176]	; (d9b4 <request_rsrp+0xe4>)
    d902:	482d      	ldr	r0, [pc, #180]	; (d9b8 <request_rsrp+0xe8>)
    d904:	1a9b      	subs	r3, r3, r2
    d906:	08db      	lsrs	r3, r3, #3
    d908:	f363 118f 	bfi	r1, r3, #6, #10

		LOG_INF("Current RSRP = %s", current_rsrp);
	} 
	else if (strstr(buffer, "ERROR") != NULL) 
	{
		LOG_ERR("Error while getting current RSRP!");
    d90c:	f00e fea1 	bl	1c652 <log_0>
		close(at_sock);
    d910:	4620      	mov	r0, r4
    d912:	f7ff f915 	bl	cb40 <close>
		return -1;
    d916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d91a:	e031      	b.n	d980 <request_rsrp+0xb0>
		bytes_received = recv(at_sock, buffer, 100, 0);
    d91c:	2264      	movs	r2, #100	; 0x64
    d91e:	4669      	mov	r1, sp
    d920:	4620      	mov	r0, r4
    d922:	f7ff fa9f 	bl	ce64 <recv.constprop.13>
	} while (bytes_received == 0);
    d926:	2800      	cmp	r0, #0
    d928:	d0f8      	beq.n	d91c <request_rsrp+0x4c>
	if(strstr(buffer, "OK") != NULL)
    d92a:	4924      	ldr	r1, [pc, #144]	; (d9bc <request_rsrp+0xec>)
    d92c:	4668      	mov	r0, sp
    d92e:	f00f fb76 	bl	1d01e <strstr>
    d932:	b338      	cbz	r0, d984 <request_rsrp+0xb4>
		char *pos1 = strrchr(buffer, ',') + 1;
    d934:	212c      	movs	r1, #44	; 0x2c
    d936:	4668      	mov	r0, sp
    d938:	f00f fbb9 	bl	1d0ae <strrchr>
    d93c:	1c44      	adds	r4, r0, #1
		char *pos2 = strstr(pos1, "\n") - 1;
    d93e:	4920      	ldr	r1, [pc, #128]	; (d9c0 <request_rsrp+0xf0>)
    d940:	4620      	mov	r0, r4
    d942:	f00f fb6c 	bl	1d01e <strstr>
    d946:	4606      	mov	r6, r0
		memcpy(current_rsrp, pos1, strlen(pos1)-strlen(pos2));
    d948:	4620      	mov	r0, r4
    d94a:	f00f fbbd 	bl	1d0c8 <strlen>
    d94e:	4605      	mov	r5, r0
    d950:	1e70      	subs	r0, r6, #1
    d952:	f00f fbb9 	bl	1d0c8 <strlen>
    d956:	4621      	mov	r1, r4
    d958:	1a2a      	subs	r2, r5, r0
    d95a:	481a      	ldr	r0, [pc, #104]	; (d9c4 <request_rsrp+0xf4>)
    d95c:	f00f fbef 	bl	1d13e <memcpy>
		LOG_INF("Current RSRP = %s", current_rsrp);
    d960:	2303      	movs	r3, #3
    d962:	f04f 0200 	mov.w	r2, #0
    d966:	4912      	ldr	r1, [pc, #72]	; (d9b0 <request_rsrp+0xe0>)
    d968:	f363 0207 	bfi	r2, r3, #0, #8
    d96c:	4b11      	ldr	r3, [pc, #68]	; (d9b4 <request_rsrp+0xe4>)
    d96e:	4816      	ldr	r0, [pc, #88]	; (d9c8 <request_rsrp+0xf8>)
    d970:	1a5b      	subs	r3, r3, r1
    d972:	08db      	lsrs	r3, r3, #3
    d974:	f363 128f 	bfi	r2, r3, #6, #10
    d978:	4912      	ldr	r1, [pc, #72]	; (d9c4 <request_rsrp+0xf4>)
    d97a:	f00e fe77 	bl	1c66c <log_1>
	}
	return 0;
    d97e:	2000      	movs	r0, #0
}
    d980:	b026      	add	sp, #152	; 0x98
    d982:	bd70      	pop	{r4, r5, r6, pc}
	else if (strstr(buffer, "ERROR") != NULL) 
    d984:	4911      	ldr	r1, [pc, #68]	; (d9cc <request_rsrp+0xfc>)
    d986:	4668      	mov	r0, sp
    d988:	f00f fb49 	bl	1d01e <strstr>
    d98c:	2800      	cmp	r0, #0
    d98e:	d0f7      	beq.n	d980 <request_rsrp+0xb0>
		LOG_ERR("Error while getting current RSRP!");
    d990:	2301      	movs	r3, #1
    d992:	f04f 0100 	mov.w	r1, #0
    d996:	4a06      	ldr	r2, [pc, #24]	; (d9b0 <request_rsrp+0xe0>)
    d998:	f363 0107 	bfi	r1, r3, #0, #8
    d99c:	4b05      	ldr	r3, [pc, #20]	; (d9b4 <request_rsrp+0xe4>)
    d99e:	480c      	ldr	r0, [pc, #48]	; (d9d0 <request_rsrp+0x100>)
    d9a0:	1a9b      	subs	r3, r3, r2
    d9a2:	08db      	lsrs	r3, r3, #3
    d9a4:	f363 118f 	bfi	r1, r3, #6, #10
    d9a8:	e7b0      	b.n	d90c <request_rsrp+0x3c>
    d9aa:	bf00      	nop
    d9ac:	0001faf0 	.word	0x0001faf0
    d9b0:	0001ee58 	.word	0x0001ee58
    d9b4:	0001eed0 	.word	0x0001eed0
    d9b8:	0001faf8 	.word	0x0001faf8
    d9bc:	0001fcf6 	.word	0x0001fcf6
    d9c0:	0001f89c 	.word	0x0001f89c
    d9c4:	2002649e 	.word	0x2002649e
    d9c8:	0001fb08 	.word	0x0001fb08
    d9cc:	0001f9f9 	.word	0x0001f9f9
    d9d0:	0001fb1a 	.word	0x0001fb1a

0000d9d4 <request_neighbors>:

// Wait for and parse neighboring cell IDs and RSRP values: AT+NBRGRSRP
int request_neighbors(int at_sock)
{
    d9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d9d8:	b0ab      	sub	sp, #172	; 0xac
    d9da:	4606      	mov	r6, r0
	int  bytes_sent;
	int  bytes_received;
	char buffer[150] = {0};
    d9dc:	2296      	movs	r2, #150	; 0x96
    d9de:	2100      	movs	r1, #0
    d9e0:	a804      	add	r0, sp, #16
    d9e2:	f00f fbd6 	bl	1d192 <memset>
    d9e6:	4d4c      	ldr	r5, [pc, #304]	; (db18 <request_neighbors+0x144>)
				LOG_INF("Neighbors = %s", neighbors);
				neighbors_found = 1;
			}
			else
			{
				LOG_INF("No neighbors found.");
    d9e8:	4b4c      	ldr	r3, [pc, #304]	; (db1c <request_neighbors+0x148>)
		bytes_sent = send(at_sock, AT_NBRGRSRP, strlen(AT_NBRGRSRP), 0);
    d9ea:	f8df a158 	ldr.w	sl, [pc, #344]	; db44 <request_neighbors+0x170>
				LOG_INF("No neighbors found.");
    d9ee:	1aed      	subs	r5, r5, r3
				request_cell_id(at_sock); //################TODO remove again##########################################
				request_rsrp(at_sock); //###################TODO remove agian##########################################
				neighbors[0] = '\0';
    d9f0:	f8df 9154 	ldr.w	r9, [pc, #340]	; db48 <request_neighbors+0x174>
				LOG_INF("No neighbors found.");
    d9f4:	f3c5 05c9 	ubfx	r5, r5, #3, #10
		bytes_sent = send(at_sock, AT_NBRGRSRP, strlen(AT_NBRGRSRP), 0);
    d9f8:	4650      	mov	r0, sl
    d9fa:	f00f fb65 	bl	1d0c8 <strlen>
    d9fe:	4651      	mov	r1, sl
    da00:	4602      	mov	r2, r0
    da02:	4630      	mov	r0, r6
    da04:	f7ff f9b0 	bl	cd68 <send.constprop.11>
		if (bytes_sent < 0) {
    da08:	2800      	cmp	r0, #0
    da0a:	da11      	bge.n	da30 <request_neighbors+0x5c>
			LOG_INF("NBRGRSRP send error");
    da0c:	f04f 0100 	mov.w	r1, #0
    da10:	2303      	movs	r3, #3
    da12:	4843      	ldr	r0, [pc, #268]	; (db20 <request_neighbors+0x14c>)
    da14:	f363 0107 	bfi	r1, r3, #0, #8
    da18:	f365 118f 	bfi	r1, r5, #6, #10
			}	
		}
		else if (strstr(buffer, "ERROR") != NULL) 
		{
			LOG_ERR("Error while getting neighbor data!");
    da1c:	f00e fe19 	bl	1c652 <log_0>
			close(at_sock);
    da20:	4630      	mov	r0, r6
    da22:	f7ff f88d 	bl	cb40 <close>
			return -1;
    da26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		}
		k_sleep(K_SECONDS(1));
	}
	return 0;
}
    da2a:	b02b      	add	sp, #172	; 0xac
    da2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			bytes_received = recv(at_sock, buffer, 150, 0);
    da30:	2296      	movs	r2, #150	; 0x96
    da32:	a904      	add	r1, sp, #16
    da34:	4630      	mov	r0, r6
    da36:	f7ff fa15 	bl	ce64 <recv.constprop.13>
		} while (bytes_received == 0);
    da3a:	2800      	cmp	r0, #0
    da3c:	d0f8      	beq.n	da30 <request_neighbors+0x5c>
		if(strstr(buffer, "OK") != NULL)
    da3e:	4939      	ldr	r1, [pc, #228]	; (db24 <request_neighbors+0x150>)
    da40:	a804      	add	r0, sp, #16
    da42:	f00f faec 	bl	1d01e <strstr>
    da46:	2800      	cmp	r0, #0
    da48:	d056      	beq.n	daf8 <request_neighbors+0x124>
			if(strstr(buffer, "NBRGRSRP") != NULL)
    da4a:	4937      	ldr	r1, [pc, #220]	; (db28 <request_neighbors+0x154>)
    da4c:	a804      	add	r0, sp, #16
    da4e:	f00f fae6 	bl	1d01e <strstr>
    da52:	4604      	mov	r4, r0
    da54:	2800      	cmp	r0, #0
    da56:	d03a      	beq.n	dace <request_neighbors+0xfa>
				char* pos1 = strstr(buffer, "\%NBRGRSRP: ") + strlen("\%NBRGRSRP: ");
    da58:	4934      	ldr	r1, [pc, #208]	; (db2c <request_neighbors+0x158>)
    da5a:	a804      	add	r0, sp, #16
    da5c:	f00f fadf 	bl	1d01e <strstr>
    da60:	4683      	mov	fp, r0
    da62:	4832      	ldr	r0, [pc, #200]	; (db2c <request_neighbors+0x158>)
    da64:	f00f fb30 	bl	1d0c8 <strlen>
    da68:	4483      	add	fp, r0
				char* pos2 = strstr(pos1, "\n") -1;
    da6a:	4931      	ldr	r1, [pc, #196]	; (db30 <request_neighbors+0x15c>)
    da6c:	4658      	mov	r0, fp
    da6e:	f00f fad6 	bl	1d01e <strstr>
				for(uint8_t i=0; i<strlen(pos1)-strlen(pos2); i++)
    da72:	2400      	movs	r4, #0
				char* pos2 = strstr(pos1, "\n") -1;
    da74:	1e43      	subs	r3, r0, #1
    da76:	9301      	str	r3, [sp, #4]
				for(uint8_t i=0; i<strlen(pos1)-strlen(pos2); i++)
    da78:	b2e2      	uxtb	r2, r4
    da7a:	4658      	mov	r0, fp
    da7c:	9203      	str	r2, [sp, #12]
    da7e:	f00f fb23 	bl	1d0c8 <strlen>
    da82:	9002      	str	r0, [sp, #8]
    da84:	9801      	ldr	r0, [sp, #4]
    da86:	f00f fb1f 	bl	1d0c8 <strlen>
    da8a:	9902      	ldr	r1, [sp, #8]
    da8c:	9a03      	ldr	r2, [sp, #12]
    da8e:	1a08      	subs	r0, r1, r0
    da90:	4290      	cmp	r0, r2
    da92:	f104 0401 	add.w	r4, r4, #1
    da96:	d815      	bhi.n	dac4 <request_neighbors+0xf0>
				LOG_INF("Neighbors = %s", neighbors);
    da98:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
    da9c:	f043 0303 	orr.w	r3, r3, #3
    daa0:	f363 0707 	bfi	r7, r3, #0, #8
    daa4:	f365 178f 	bfi	r7, r5, #6, #10
    daa8:	463a      	mov	r2, r7
    daaa:	4649      	mov	r1, r9
    daac:	4821      	ldr	r0, [pc, #132]	; (db34 <request_neighbors+0x160>)
    daae:	f00e fddd 	bl	1c66c <log_1>
				neighbors_found = 1;
    dab2:	2401      	movs	r4, #1
		k_sleep(K_SECONDS(1));
    dab4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    dab8:	f00e fa33 	bl	1bf22 <k_sleep>
	while(!neighbors_found)
    dabc:	2c00      	cmp	r4, #0
    dabe:	d09b      	beq.n	d9f8 <request_neighbors+0x24>
	return 0;
    dac0:	2000      	movs	r0, #0
    dac2:	e7b2      	b.n	da2a <request_neighbors+0x56>
					neighbors[i] = pos1[i];
    dac4:	f81b 1002 	ldrb.w	r1, [fp, r2]
    dac8:	f809 1002 	strb.w	r1, [r9, r2]
    dacc:	e7d4      	b.n	da78 <request_neighbors+0xa4>
				LOG_INF("No neighbors found.");
    dace:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    dad2:	f043 0303 	orr.w	r3, r3, #3
    dad6:	f363 0807 	bfi	r8, r3, #0, #8
    dada:	f365 188f 	bfi	r8, r5, #6, #10
    dade:	4641      	mov	r1, r8
    dae0:	4815      	ldr	r0, [pc, #84]	; (db38 <request_neighbors+0x164>)
    dae2:	f00e fdb6 	bl	1c652 <log_0>
				request_cell_id(at_sock); //################TODO remove again##########################################
    dae6:	4630      	mov	r0, r6
    dae8:	f7ff fe7a 	bl	d7e0 <request_cell_id>
				request_rsrp(at_sock); //###################TODO remove agian##########################################
    daec:	4630      	mov	r0, r6
    daee:	f7ff feef 	bl	d8d0 <request_rsrp>
				neighbors[0] = '\0';
    daf2:	f889 4000 	strb.w	r4, [r9]
    daf6:	e7dd      	b.n	dab4 <request_neighbors+0xe0>
		else if (strstr(buffer, "ERROR") != NULL) 
    daf8:	4910      	ldr	r1, [pc, #64]	; (db3c <request_neighbors+0x168>)
    dafa:	a804      	add	r0, sp, #16
    dafc:	f00f fa8f 	bl	1d01e <strstr>
    db00:	b140      	cbz	r0, db14 <request_neighbors+0x140>
			LOG_ERR("Error while getting neighbor data!");
    db02:	f04f 0100 	mov.w	r1, #0
    db06:	2301      	movs	r3, #1
    db08:	f363 0107 	bfi	r1, r3, #0, #8
    db0c:	f365 118f 	bfi	r1, r5, #6, #10
    db10:	480b      	ldr	r0, [pc, #44]	; (db40 <request_neighbors+0x16c>)
    db12:	e783      	b.n	da1c <request_neighbors+0x48>
    db14:	4604      	mov	r4, r0
    db16:	e7cd      	b.n	dab4 <request_neighbors+0xe0>
    db18:	0001eed0 	.word	0x0001eed0
    db1c:	0001ee58 	.word	0x0001ee58
    db20:	0001fa8a 	.word	0x0001fa8a
    db24:	0001fcf6 	.word	0x0001fcf6
    db28:	0001fa81 	.word	0x0001fa81
    db2c:	0001fa9e 	.word	0x0001fa9e
    db30:	0001f89c 	.word	0x0001f89c
    db34:	0001faaa 	.word	0x0001faaa
    db38:	0001fab9 	.word	0x0001fab9
    db3c:	0001f9f9 	.word	0x0001f9f9
    db40:	0001facd 	.word	0x0001facd
    db44:	0001fa7e 	.word	0x0001fa7e
    db48:	200264d4 	.word	0x200264d4

0000db4c <request_datetime>:

// Request date and time from the network (no accuracy guaranteed): AT+CCLK?
int request_datetime(int at_sock)
{
    db4c:	b570      	push	{r4, r5, r6, lr}
    db4e:	b0a6      	sub	sp, #152	; 0x98
	int  bytes_sent;
	int  bytes_received;
	char buffer[150] = {0};
    db50:	2296      	movs	r2, #150	; 0x96
    db52:	2100      	movs	r1, #0
{
    db54:	4604      	mov	r4, r0
	char buffer[150] = {0};
    db56:	4668      	mov	r0, sp
    db58:	f00f fb1b 	bl	1d192 <memset>

	bytes_sent = send(at_sock, AT_CCLK, strlen(AT_CCLK), 0);
    db5c:	4832      	ldr	r0, [pc, #200]	; (dc28 <request_datetime+0xdc>)
    db5e:	f00f fab3 	bl	1d0c8 <strlen>
    db62:	4931      	ldr	r1, [pc, #196]	; (dc28 <request_datetime+0xdc>)
    db64:	4602      	mov	r2, r0
    db66:	4620      	mov	r0, r4
    db68:	f7ff f8fe 	bl	cd68 <send.constprop.11>
	if (bytes_sent < 0) {
    db6c:	2800      	cmp	r0, #0
    db6e:	da13      	bge.n	db98 <request_datetime+0x4c>
		LOG_INF("CEREG send error");
    db70:	2303      	movs	r3, #3
    db72:	f04f 0100 	mov.w	r1, #0
    db76:	4a2d      	ldr	r2, [pc, #180]	; (dc2c <request_datetime+0xe0>)
    db78:	f363 0107 	bfi	r1, r3, #0, #8
    db7c:	4b2c      	ldr	r3, [pc, #176]	; (dc30 <request_datetime+0xe4>)
    db7e:	482d      	ldr	r0, [pc, #180]	; (dc34 <request_datetime+0xe8>)
    db80:	1a9b      	subs	r3, r3, r2
    db82:	08db      	lsrs	r3, r3, #3
    db84:	f363 118f 	bfi	r1, r3, #6, #10

		LOG_INF("Datetime = %s", datetime);
	} 
	else if (strstr(buffer, "ERROR") != NULL) 
	{
		LOG_ERR("Error while getting current cell ID!");
    db88:	f00e fd63 	bl	1c652 <log_0>
		close(at_sock);
    db8c:	4620      	mov	r0, r4
    db8e:	f7fe ffd7 	bl	cb40 <close>
		return -1;
    db92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    db96:	e031      	b.n	dbfc <request_datetime+0xb0>
		bytes_received = recv(at_sock, buffer, 100, 0);
    db98:	2264      	movs	r2, #100	; 0x64
    db9a:	4669      	mov	r1, sp
    db9c:	4620      	mov	r0, r4
    db9e:	f7ff f961 	bl	ce64 <recv.constprop.13>
	} while (bytes_received == 0);
    dba2:	2800      	cmp	r0, #0
    dba4:	d0f8      	beq.n	db98 <request_datetime+0x4c>
	if(strstr(buffer, "OK") != NULL)
    dba6:	4924      	ldr	r1, [pc, #144]	; (dc38 <request_datetime+0xec>)
    dba8:	4668      	mov	r0, sp
    dbaa:	f00f fa38 	bl	1d01e <strstr>
    dbae:	b338      	cbz	r0, dc00 <request_datetime+0xb4>
		char* pos1 = strstr(buffer, "\"") + 1;
    dbb0:	4922      	ldr	r1, [pc, #136]	; (dc3c <request_datetime+0xf0>)
    dbb2:	4668      	mov	r0, sp
    dbb4:	f00f fa33 	bl	1d01e <strstr>
    dbb8:	1c44      	adds	r4, r0, #1
		char *pos2 = strstr(pos1, "\"");
    dbba:	4920      	ldr	r1, [pc, #128]	; (dc3c <request_datetime+0xf0>)
    dbbc:	4620      	mov	r0, r4
    dbbe:	f00f fa2e 	bl	1d01e <strstr>
    dbc2:	4606      	mov	r6, r0
		memcpy(datetime, pos1, strlen(pos1)-strlen(pos2));
    dbc4:	4620      	mov	r0, r4
    dbc6:	f00f fa7f 	bl	1d0c8 <strlen>
    dbca:	4605      	mov	r5, r0
    dbcc:	4630      	mov	r0, r6
    dbce:	f00f fa7b 	bl	1d0c8 <strlen>
    dbd2:	4621      	mov	r1, r4
    dbd4:	1a2a      	subs	r2, r5, r0
    dbd6:	481a      	ldr	r0, [pc, #104]	; (dc40 <request_datetime+0xf4>)
    dbd8:	f00f fab1 	bl	1d13e <memcpy>
		LOG_INF("Datetime = %s", datetime);
    dbdc:	2303      	movs	r3, #3
    dbde:	f04f 0200 	mov.w	r2, #0
    dbe2:	4912      	ldr	r1, [pc, #72]	; (dc2c <request_datetime+0xe0>)
    dbe4:	f363 0207 	bfi	r2, r3, #0, #8
    dbe8:	4b11      	ldr	r3, [pc, #68]	; (dc30 <request_datetime+0xe4>)
    dbea:	4816      	ldr	r0, [pc, #88]	; (dc44 <request_datetime+0xf8>)
    dbec:	1a5b      	subs	r3, r3, r1
    dbee:	08db      	lsrs	r3, r3, #3
    dbf0:	f363 128f 	bfi	r2, r3, #6, #10
    dbf4:	4912      	ldr	r1, [pc, #72]	; (dc40 <request_datetime+0xf4>)
    dbf6:	f00e fd39 	bl	1c66c <log_1>
	}
	return 0;
    dbfa:	2000      	movs	r0, #0
}
    dbfc:	b026      	add	sp, #152	; 0x98
    dbfe:	bd70      	pop	{r4, r5, r6, pc}
	else if (strstr(buffer, "ERROR") != NULL) 
    dc00:	4911      	ldr	r1, [pc, #68]	; (dc48 <request_datetime+0xfc>)
    dc02:	4668      	mov	r0, sp
    dc04:	f00f fa0b 	bl	1d01e <strstr>
    dc08:	2800      	cmp	r0, #0
    dc0a:	d0f7      	beq.n	dbfc <request_datetime+0xb0>
		LOG_ERR("Error while getting current cell ID!");
    dc0c:	2301      	movs	r3, #1
    dc0e:	f04f 0100 	mov.w	r1, #0
    dc12:	4a06      	ldr	r2, [pc, #24]	; (dc2c <request_datetime+0xe0>)
    dc14:	f363 0107 	bfi	r1, r3, #0, #8
    dc18:	4b05      	ldr	r3, [pc, #20]	; (dc30 <request_datetime+0xe4>)
    dc1a:	480c      	ldr	r0, [pc, #48]	; (dc4c <request_datetime+0x100>)
    dc1c:	1a9b      	subs	r3, r3, r2
    dc1e:	08db      	lsrs	r3, r3, #3
    dc20:	f363 118f 	bfi	r1, r3, #6, #10
    dc24:	e7b0      	b.n	db88 <request_datetime+0x3c>
    dc26:	bf00      	nop
    dc28:	0001fa24 	.word	0x0001fa24
    dc2c:	0001ee58 	.word	0x0001ee58
    dc30:	0001eed0 	.word	0x0001eed0
    dc34:	0001f9cf 	.word	0x0001f9cf
    dc38:	0001fcf6 	.word	0x0001fcf6
    dc3c:	0001f9e2 	.word	0x0001f9e2
    dc40:	200264a2 	.word	0x200264a2
    dc44:	0001fa2d 	.word	0x0001fa2d
    dc48:	0001f9f9 	.word	0x0001f9f9
    dc4c:	0001f9ff 	.word	0x0001f9ff

0000dc50 <request_nb_iot_network_stats>:


int request_nb_iot_network_stats()
{
	LOG_INF("Requesting NB-IoT network stats...");
    dc50:	2303      	movs	r3, #3
    dc52:	f04f 0100 	mov.w	r1, #0
{
    dc56:	b570      	push	{r4, r5, r6, lr}
	LOG_INF("Requesting NB-IoT network stats...");
    dc58:	f363 0107 	bfi	r1, r3, #0, #8
    dc5c:	4c21      	ldr	r4, [pc, #132]	; (dce4 <request_nb_iot_network_stats+0x94>)
    dc5e:	4b22      	ldr	r3, [pc, #136]	; (dce8 <request_nb_iot_network_stats+0x98>)
    dc60:	4822      	ldr	r0, [pc, #136]	; (dcec <request_nb_iot_network_stats+0x9c>)
    dc62:	1ae4      	subs	r4, r4, r3
    dc64:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    dc68:	f364 118f 	bfi	r1, r4, #6, #10
    dc6c:	f00e fcf1 	bl	1c652 <log_0>

	int  at_sock;
	at_sock = socket(AF_LTE, 0, NPROTO_AT);
    dc70:	f240 2201 	movw	r2, #513	; 0x201
    dc74:	2100      	movs	r1, #0
    dc76:	2066      	movs	r0, #102	; 0x66
    dc78:	f7fe ff5c 	bl	cb34 <socket>
	if (at_sock < 0) {
    dc7c:	1e05      	subs	r5, r0, #0
    dc7e:	da03      	bge.n	dc88 <request_nb_iot_network_stats+0x38>
		return -1;
    dc80:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	close(at_sock);
	LOG_INF("NB-IoT network stats requested.");
	
	return 0;
}
    dc84:	4630      	mov	r0, r6
    dc86:	bd70      	pop	{r4, r5, r6, pc}
	if(request_neighbors(at_sock) != 0)
    dc88:	f7ff fea4 	bl	d9d4 <request_neighbors>
    dc8c:	2800      	cmp	r0, #0
    dc8e:	d1f7      	bne.n	dc80 <request_nb_iot_network_stats+0x30>
	k_sleep(K_MSEC(500));
    dc90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    dc94:	f00e f945 	bl	1bf22 <k_sleep>
	if(request_cell_id(at_sock) != 0)
    dc98:	4628      	mov	r0, r5
    dc9a:	f7ff fda1 	bl	d7e0 <request_cell_id>
    dc9e:	2800      	cmp	r0, #0
    dca0:	d1ee      	bne.n	dc80 <request_nb_iot_network_stats+0x30>
	k_sleep(K_MSEC(500));
    dca2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    dca6:	f00e f93c 	bl	1bf22 <k_sleep>
	if(request_rsrp(at_sock) != 0)
    dcaa:	4628      	mov	r0, r5
    dcac:	f7ff fe10 	bl	d8d0 <request_rsrp>
    dcb0:	2800      	cmp	r0, #0
    dcb2:	d1e5      	bne.n	dc80 <request_nb_iot_network_stats+0x30>
	k_sleep(K_MSEC(500));
    dcb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    dcb8:	f00e f933 	bl	1bf22 <k_sleep>
	if(request_datetime(at_sock) != 0)
    dcbc:	4628      	mov	r0, r5
    dcbe:	f7ff ff45 	bl	db4c <request_datetime>
    dcc2:	4606      	mov	r6, r0
    dcc4:	2800      	cmp	r0, #0
    dcc6:	d1db      	bne.n	dc80 <request_nb_iot_network_stats+0x30>
	close(at_sock);
    dcc8:	4628      	mov	r0, r5
    dcca:	f7fe ff39 	bl	cb40 <close>
	LOG_INF("NB-IoT network stats requested.");
    dcce:	2303      	movs	r3, #3
    dcd0:	f04f 0100 	mov.w	r1, #0
    dcd4:	f363 0107 	bfi	r1, r3, #0, #8
    dcd8:	f364 118f 	bfi	r1, r4, #6, #10
    dcdc:	4804      	ldr	r0, [pc, #16]	; (dcf0 <request_nb_iot_network_stats+0xa0>)
    dcde:	f00e fcb8 	bl	1c652 <log_0>
	return 0;
    dce2:	e7cf      	b.n	dc84 <request_nb_iot_network_stats+0x34>
    dce4:	0001eed0 	.word	0x0001eed0
    dce8:	0001ee58 	.word	0x0001ee58
    dcec:	0001fa3b 	.word	0x0001fa3b
    dcf0:	0001fa5e 	.word	0x0001fa5e

0000dcf4 <slm_at_tcpip_init>:


/**@brief API to initialize TCP/IP AT commands handler
 */
int slm_at_tcpip_init(at_cmd_handler_t callback)
{
    dcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dcf8:	4a52      	ldr	r2, [pc, #328]	; (de44 <slm_at_tcpip_init+0x150>)
    dcfa:	4c53      	ldr	r4, [pc, #332]	; (de48 <slm_at_tcpip_init+0x154>)
    dcfc:	b0a7      	sub	sp, #156	; 0x9c
    dcfe:	1aa4      	subs	r4, r4, r2
    dd00:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (callback == NULL) {
    dd04:	b978      	cbnz	r0, dd26 <slm_at_tcpip_init+0x32>
		LOG_ERR("No callback");
    dd06:	2301      	movs	r3, #1
    dd08:	f04f 0100 	mov.w	r1, #0
    dd0c:	f363 0107 	bfi	r1, r3, #0, #8
    dd10:	f364 118f 	bfi	r1, r4, #6, #10
    dd14:	484d      	ldr	r0, [pc, #308]	; (de4c <slm_at_tcpip_init+0x158>)
    dd16:	f00e fc9c 	bl	1c652 <log_0>
		return -EINVAL;
    dd1a:	f06f 0815 	mvn.w	r8, #21
	}
	
	////////////////////////////////////////////////////////////////////

	
}
    dd1e:	4640      	mov	r0, r8
    dd20:	b027      	add	sp, #156	; 0x9c
    dd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	client.ip_proto = IPPROTO_IP;
    dd26:	2500      	movs	r5, #0
	client.sock = INVALID_SOCKET;
    dd28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    dd2c:	4a48      	ldr	r2, [pc, #288]	; (de50 <slm_at_tcpip_init+0x15c>)
    dd2e:	6011      	str	r1, [r2, #0]
	client.callback = callback;
    dd30:	6090      	str	r0, [r2, #8]
	client.ip_proto = IPPROTO_IP;
    dd32:	8095      	strh	r5, [r2, #4]
	LOG_INF("Initializing NB-IoT Parameters");
    dd34:	f04f 0100 	mov.w	r1, #0
    dd38:	2203      	movs	r2, #3
    dd3a:	f362 0107 	bfi	r1, r2, #0, #8
    dd3e:	f364 118f 	bfi	r1, r4, #6, #10
    dd42:	4844      	ldr	r0, [pc, #272]	; (de54 <slm_at_tcpip_init+0x160>)
    dd44:	f00e fc85 	bl	1c652 <log_0>
	char buffer[150] = {0};
    dd48:	2296      	movs	r2, #150	; 0x96
    dd4a:	4629      	mov	r1, r5
    dd4c:	4668      	mov	r0, sp
    dd4e:	f00f fa20 	bl	1d192 <memset>
	at_sock = socket(AF_LTE, 0, NPROTO_AT);
    dd52:	f240 2201 	movw	r2, #513	; 0x201
    dd56:	4629      	mov	r1, r5
    dd58:	2066      	movs	r0, #102	; 0x66
    dd5a:	f7fe feeb 	bl	cb34 <socket>
	if (at_sock < 0) {
    dd5e:	1e06      	subs	r6, r0, #0
    dd60:	db26      	blt.n	ddb0 <slm_at_tcpip_init+0xbc>
    dd62:	4f3d      	ldr	r7, [pc, #244]	; (de58 <slm_at_tcpip_init+0x164>)
		if (memcmp(buffer, "OK", 2) != 0) {
    dd64:	f8df a108 	ldr.w	sl, [pc, #264]	; de70 <slm_at_tcpip_init+0x17c>
		LOG_INF("%s",nb_init_at_commands[i]);
    dd68:	f02b 023f 	bic.w	r2, fp, #63	; 0x3f
    dd6c:	f042 0203 	orr.w	r2, r2, #3
    dd70:	f362 0b07 	bfi	fp, r2, #0, #8
    dd74:	f364 1b8f 	bfi	fp, r4, #6, #10
    dd78:	465a      	mov	r2, fp
    dd7a:	4639      	mov	r1, r7
    dd7c:	4837      	ldr	r0, [pc, #220]	; (de5c <slm_at_tcpip_init+0x168>)
    dd7e:	f00e fc75 	bl	1c66c <log_1>
		bytes_sent = send(at_sock, nb_init_at_commands[i],
    dd82:	4638      	mov	r0, r7
    dd84:	f00f f9a0 	bl	1d0c8 <strlen>
    dd88:	4639      	mov	r1, r7
    dd8a:	4602      	mov	r2, r0
    dd8c:	4630      	mov	r0, r6
    dd8e:	f7fe ffeb 	bl	cd68 <send.constprop.11>
		if (bytes_sent < 0) {
    dd92:	2800      	cmp	r0, #0
    dd94:	da19      	bge.n	ddca <slm_at_tcpip_init+0xd6>
			LOG_INF("NO BYTES SENT");
    dd96:	f04f 0100 	mov.w	r1, #0
    dd9a:	2303      	movs	r3, #3
    dd9c:	4830      	ldr	r0, [pc, #192]	; (de60 <slm_at_tcpip_init+0x16c>)
    dd9e:	f363 0107 	bfi	r1, r3, #0, #8
    dda2:	f364 118f 	bfi	r1, r4, #6, #10
			LOG_INF("NOK");
    dda6:	f00e fc54 	bl	1c652 <log_0>
			close(at_sock);
    ddaa:	4630      	mov	r0, r6
    ddac:	f7fe fec8 	bl	cb40 <close>
		LOG_ERR("Could not init nb-iot parameters!");
    ddb0:	2301      	movs	r3, #1
    ddb2:	f04f 0100 	mov.w	r1, #0
    ddb6:	f363 0107 	bfi	r1, r3, #0, #8
    ddba:	f364 118f 	bfi	r1, r4, #6, #10
    ddbe:	4829      	ldr	r0, [pc, #164]	; (de64 <slm_at_tcpip_init+0x170>)
    ddc0:	f00e fc47 	bl	1c652 <log_0>
		return -1;
    ddc4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    ddc8:	e7a9      	b.n	dd1e <slm_at_tcpip_init+0x2a>
			bytes_received = recv(at_sock, buffer, 2, 0);
    ddca:	2202      	movs	r2, #2
    ddcc:	4669      	mov	r1, sp
    ddce:	4630      	mov	r0, r6
    ddd0:	f7ff f848 	bl	ce64 <recv.constprop.13>
		} while (bytes_received == 0);
    ddd4:	2800      	cmp	r0, #0
    ddd6:	d0f8      	beq.n	ddca <slm_at_tcpip_init+0xd6>
		if (memcmp(buffer, "OK", 2) != 0) {
    ddd8:	2202      	movs	r2, #2
    ddda:	4651      	mov	r1, sl
    dddc:	4668      	mov	r0, sp
    ddde:	f00f f99e 	bl	1d11e <memcmp>
    dde2:	4680      	mov	r8, r0
    dde4:	b140      	cbz	r0, ddf8 <slm_at_tcpip_init+0x104>
			LOG_INF("NOK");
    dde6:	f04f 0100 	mov.w	r1, #0
    ddea:	2303      	movs	r3, #3
    ddec:	f363 0107 	bfi	r1, r3, #0, #8
    ddf0:	f364 118f 	bfi	r1, r4, #6, #10
    ddf4:	481c      	ldr	r0, [pc, #112]	; (de68 <slm_at_tcpip_init+0x174>)
    ddf6:	e7d6      	b.n	dda6 <slm_at_tcpip_init+0xb2>
			LOG_INF("OK");
    ddf8:	f029 023f 	bic.w	r2, r9, #63	; 0x3f
    ddfc:	f042 0203 	orr.w	r2, r2, #3
    de00:	f362 0907 	bfi	r9, r2, #0, #8
    de04:	f364 198f 	bfi	r9, r4, #6, #10
    de08:	4649      	mov	r1, r9
    de0a:	4650      	mov	r0, sl
    de0c:	f00e fc21 	bl	1c652 <log_0>
	for (int i = 0; i < ARRAY_SIZE(nb_init_at_commands); i++) {
    de10:	3501      	adds	r5, #1
		k_sleep(K_SECONDS(1));
    de12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    de16:	f00e f884 	bl	1bf22 <k_sleep>
	for (int i = 0; i < ARRAY_SIZE(nb_init_at_commands); i++) {
    de1a:	2d03      	cmp	r5, #3
    de1c:	f107 0728 	add.w	r7, r7, #40	; 0x28
    de20:	d1a2      	bne.n	dd68 <slm_at_tcpip_init+0x74>
	close(at_sock);
    de22:	4630      	mov	r0, r6
    de24:	f7fe fe8c 	bl	cb40 <close>
	LOG_INF("NB-IoT Parameters Initialized");
    de28:	2303      	movs	r3, #3
    de2a:	f04f 0100 	mov.w	r1, #0
    de2e:	f363 0107 	bfi	r1, r3, #0, #8
    de32:	f364 118f 	bfi	r1, r4, #6, #10
    de36:	480d      	ldr	r0, [pc, #52]	; (de6c <slm_at_tcpip_init+0x178>)
    de38:	f00e fc0b 	bl	1c652 <log_0>
		do_socket_open(2);
    de3c:	2002      	movs	r0, #2
    de3e:	f7fe fec3 	bl	cbc8 <do_socket_open>
		return 0;
    de42:	e76c      	b.n	dd1e <slm_at_tcpip_init+0x2a>
    de44:	0001ee58 	.word	0x0001ee58
    de48:	0001eed0 	.word	0x0001eed0
    de4c:	0001fcbc 	.word	0x0001fcbc
    de50:	20020130 	.word	0x20020130
    de54:	0001fcc8 	.word	0x0001fcc8
    de58:	0001f916 	.word	0x0001f916
    de5c:	000207ed 	.word	0x000207ed
    de60:	0001fce7 	.word	0x0001fce7
    de64:	0001fd17 	.word	0x0001fd17
    de68:	0001fcf5 	.word	0x0001fcf5
    de6c:	0001fcf9 	.word	0x0001fcf9
    de70:	0001fcf6 	.word	0x0001fcf6

0000de74 <send_message_without_gps>:
	LOG_INF("---------END-----------");
}

void send_message_without_gps(void)
{
	LOG_INF("--------BEGIN----------");
    de74:	2303      	movs	r3, #3
    de76:	f04f 0100 	mov.w	r1, #0
{
    de7a:	b530      	push	{r4, r5, lr}
	LOG_INF("--------BEGIN----------");
    de7c:	f363 0107 	bfi	r1, r3, #0, #8
    de80:	4c40      	ldr	r4, [pc, #256]	; (df84 <send_message_without_gps+0x110>)
    de82:	4b41      	ldr	r3, [pc, #260]	; (df88 <send_message_without_gps+0x114>)
{
    de84:	b0ff      	sub	sp, #508	; 0x1fc
	LOG_INF("--------BEGIN----------");
    de86:	1ae4      	subs	r4, r4, r3
    de88:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    de8c:	f364 118f 	bfi	r1, r4, #6, #10
    de90:	483e      	ldr	r0, [pc, #248]	; (df8c <send_message_without_gps+0x118>)
    de92:	f00e fbde 	bl	1c652 <log_0>
	int error = request_nb_iot_network_stats();
    de96:	f7ff fedb 	bl	dc50 <request_nb_iot_network_stats>
	if(error == 0)
    de9a:	4601      	mov	r1, r0
    de9c:	2800      	cmp	r0, #0
    de9e:	d168      	bne.n	df72 <send_message_without_gps+0xfe>
	{
		// Put all data in a buffer
		char payloadstring[500] = {0};
    dea0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    dea4:	a801      	add	r0, sp, #4
    dea6:	f00f f974 	bl	1d192 <memset>
		strcat(payloadstring, datetime);
    deaa:	4939      	ldr	r1, [pc, #228]	; (df90 <send_message_without_gps+0x11c>)
    deac:	a801      	add	r0, sp, #4
    deae:	f00f f92d 	bl	1d10c <strcat>
		strcat(payloadstring, ";");
    deb2:	4938      	ldr	r1, [pc, #224]	; (df94 <send_message_without_gps+0x120>)
    deb4:	a801      	add	r0, sp, #4
    deb6:	f00f f929 	bl	1d10c <strcat>
		strcat(payloadstring, current_cell_id);
    deba:	4937      	ldr	r1, [pc, #220]	; (df98 <send_message_without_gps+0x124>)
    debc:	a801      	add	r0, sp, #4
    debe:	f00f f925 	bl	1d10c <strcat>
		strcat(payloadstring, ";");
    dec2:	4934      	ldr	r1, [pc, #208]	; (df94 <send_message_without_gps+0x120>)
    dec4:	a801      	add	r0, sp, #4
    dec6:	f00f f921 	bl	1d10c <strcat>
		strcat(payloadstring, current_rsrp);
    deca:	4934      	ldr	r1, [pc, #208]	; (df9c <send_message_without_gps+0x128>)
    decc:	a801      	add	r0, sp, #4
    dece:	f00f f91d 	bl	1d10c <strcat>
		strcat(payloadstring, ";");
    ded2:	4930      	ldr	r1, [pc, #192]	; (df94 <send_message_without_gps+0x120>)
    ded4:	a801      	add	r0, sp, #4
    ded6:	f00f f919 	bl	1d10c <strcat>
		if(neighbors[0] != '\0')
    deda:	4931      	ldr	r1, [pc, #196]	; (dfa0 <send_message_without_gps+0x12c>)
    dedc:	780b      	ldrb	r3, [r1, #0]
    dede:	b113      	cbz	r3, dee6 <send_message_without_gps+0x72>
			strcat(payloadstring, neighbors);
    dee0:	a801      	add	r0, sp, #4
    dee2:	f00f f913 	bl	1d10c <strcat>
		strcat(payloadstring, ";");
    dee6:	492b      	ldr	r1, [pc, #172]	; (df94 <send_message_without_gps+0x120>)
    dee8:	a801      	add	r0, sp, #4
    deea:	f00f f90f 	bl	1d10c <strcat>

		// Send valid messages to UDP server
		if(strcmp(current_rsrp, "255")==0)
    deee:	492d      	ldr	r1, [pc, #180]	; (dfa4 <send_message_without_gps+0x130>)
    def0:	482a      	ldr	r0, [pc, #168]	; (df9c <send_message_without_gps+0x128>)
    def2:	f00f f8f0 	bl	1d0d6 <strcmp>
    def6:	b950      	cbnz	r0, df0e <send_message_without_gps+0x9a>
			LOG_ERR("Not sending the message (RSRP = 255)");
    def8:	f04f 0100 	mov.w	r1, #0
    defc:	2301      	movs	r3, #1
    defe:	482a      	ldr	r0, [pc, #168]	; (dfa8 <send_message_without_gps+0x134>)
    df00:	f363 0107 	bfi	r1, r3, #0, #8
    df04:	f364 118f 	bfi	r1, r4, #6, #10
			{
				LOG_INF("MESSAGE SENT: \"%s\" (LENGTH = %d)", payloadstring, strlen(payloadstring));
			}
		}
	} else 
		LOG_ERR("Unexpected ERROR, try rebooting the device.");
    df08:	f00e fba3 	bl	1c652 <log_0>
    df0c:	e014      	b.n	df38 <send_message_without_gps+0xc4>
			int err = do_udp_sendto("nbiot.idlab.uantwerpen.be", 1270, payloadstring); // TODO change UDP port
    df0e:	aa01      	add	r2, sp, #4
    df10:	f240 41f6 	movw	r1, #1270	; 0x4f6
    df14:	4825      	ldr	r0, [pc, #148]	; (dfac <send_message_without_gps+0x138>)
    df16:	f7ff fb49 	bl	d5ac <do_udp_sendto>
			if(err==-1)
    df1a:	3001      	adds	r0, #1
    df1c:	d118      	bne.n	df50 <send_message_without_gps+0xdc>
				LOG_ERR("Could not send message, trying to reopen the socket...");
    df1e:	2301      	movs	r3, #1
    df20:	f04f 0100 	mov.w	r1, #0
    df24:	f363 0107 	bfi	r1, r3, #0, #8
    df28:	4821      	ldr	r0, [pc, #132]	; (dfb0 <send_message_without_gps+0x13c>)
    df2a:	f364 118f 	bfi	r1, r4, #6, #10
    df2e:	f00e fb90 	bl	1c652 <log_0>
				do_socket_open(2);
    df32:	2002      	movs	r0, #2
    df34:	f7fe fe48 	bl	cbc8 <do_socket_open>

	LOG_INF("---------END-----------");
    df38:	2303      	movs	r3, #3
    df3a:	f04f 0100 	mov.w	r1, #0
    df3e:	f363 0107 	bfi	r1, r3, #0, #8
    df42:	f364 118f 	bfi	r1, r4, #6, #10
    df46:	481b      	ldr	r0, [pc, #108]	; (dfb4 <send_message_without_gps+0x140>)
    df48:	f00e fb83 	bl	1c652 <log_0>
}
    df4c:	b07f      	add	sp, #508	; 0x1fc
    df4e:	bd30      	pop	{r4, r5, pc}
				LOG_INF("MESSAGE SENT: \"%s\" (LENGTH = %d)", payloadstring, strlen(payloadstring));
    df50:	2303      	movs	r3, #3
    df52:	f04f 0500 	mov.w	r5, #0
    df56:	a801      	add	r0, sp, #4
    df58:	f363 0507 	bfi	r5, r3, #0, #8
    df5c:	f00f f8b4 	bl	1d0c8 <strlen>
    df60:	f364 158f 	bfi	r5, r4, #6, #10
    df64:	4602      	mov	r2, r0
    df66:	462b      	mov	r3, r5
    df68:	a901      	add	r1, sp, #4
    df6a:	4813      	ldr	r0, [pc, #76]	; (dfb8 <send_message_without_gps+0x144>)
    df6c:	f00e fb92 	bl	1c694 <log_2>
    df70:	e7e2      	b.n	df38 <send_message_without_gps+0xc4>
		LOG_ERR("Unexpected ERROR, try rebooting the device.");
    df72:	f04f 0100 	mov.w	r1, #0
    df76:	2301      	movs	r3, #1
    df78:	f363 0107 	bfi	r1, r3, #0, #8
    df7c:	f364 118f 	bfi	r1, r4, #6, #10
    df80:	480e      	ldr	r0, [pc, #56]	; (dfbc <send_message_without_gps+0x148>)
    df82:	e7c1      	b.n	df08 <send_message_without_gps+0x94>
    df84:	0001eed0 	.word	0x0001eed0
    df88:	0001ee58 	.word	0x0001ee58
    df8c:	0001fc6d 	.word	0x0001fc6d
    df90:	200264a2 	.word	0x200264a2
    df94:	0001fbc3 	.word	0x0001fbc3
    df98:	20026494 	.word	0x20026494
    df9c:	2002649e 	.word	0x2002649e
    dfa0:	200264d4 	.word	0x200264d4
    dfa4:	0001fbc5 	.word	0x0001fbc5
    dfa8:	0001fbc9 	.word	0x0001fbc9
    dfac:	0001fbee 	.word	0x0001fbee
    dfb0:	0001fc85 	.word	0x0001fc85
    dfb4:	0001fc55 	.word	0x0001fc55
    dfb8:	0001fc08 	.word	0x0001fc08
    dfbc:	0001fc29 	.word	0x0001fc29

0000dfc0 <do_gps_stop>:

	return -errno;
}

static int do_gps_stop(void)
{
    dfc0:	b530      	push	{r4, r5, lr}
	int ret = 0;
	nrf_gnss_delete_mask_t	delete_mask  = 0;
    dfc2:	2400      	movs	r4, #0

	if (gps_client_inst.sock != INVALID_SOCKET) {
    dfc4:	4d1a      	ldr	r5, [pc, #104]	; (e030 <do_gps_stop+0x70>)
{
    dfc6:	b085      	sub	sp, #20
	if (gps_client_inst.sock != INVALID_SOCKET) {
    dfc8:	6828      	ldr	r0, [r5, #0]
	nrf_gnss_delete_mask_t	delete_mask  = 0;
    dfca:	9403      	str	r4, [sp, #12]
	if (gps_client_inst.sock != INVALID_SOCKET) {
    dfcc:	1c43      	adds	r3, r0, #1
    dfce:	d020      	beq.n	e012 <do_gps_stop+0x52>
		ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS,
    dfd0:	2304      	movs	r3, #4
    dfd2:	2208      	movs	r2, #8
    dfd4:	9300      	str	r3, [sp, #0]
    dfd6:	f44f 7101 	mov.w	r1, #516	; 0x204
    dfda:	ab03      	add	r3, sp, #12
    dfdc:	f008 ff24 	bl	16e28 <nrf_setsockopt>
			NRF_SO_GNSS_STOP, &delete_mask, sizeof(delete_mask));
		if (ret != 0) {
    dfe0:	4604      	mov	r4, r0
    dfe2:	b1c8      	cbz	r0, e018 <do_gps_stop+0x58>
			LOG_ERR("Failed to stop GPS (err: %d)", -errno);
    dfe4:	2301      	movs	r3, #1
    dfe6:	f04f 0400 	mov.w	r4, #0
    dfea:	4a12      	ldr	r2, [pc, #72]	; (e034 <do_gps_stop+0x74>)
    dfec:	f363 0407 	bfi	r4, r3, #0, #8
    dff0:	4b11      	ldr	r3, [pc, #68]	; (e038 <do_gps_stop+0x78>)
    dff2:	1a9b      	subs	r3, r3, r2
    dff4:	08db      	lsrs	r3, r3, #3
    dff6:	f363 148f 	bfi	r4, r3, #6, #10
    dffa:	f00d ff97 	bl	1bf2c <z_errno>
    dffe:	6801      	ldr	r1, [r0, #0]
    e000:	4622      	mov	r2, r4
    e002:	4249      	negs	r1, r1
    e004:	480d      	ldr	r0, [pc, #52]	; (e03c <do_gps_stop+0x7c>)
    e006:	f00e fb31 	bl	1c66c <log_1>
			ret = -errno;
    e00a:	f00d ff8f 	bl	1bf2c <z_errno>
    e00e:	6804      	ldr	r4, [r0, #0]
    e010:	4264      	negs	r4, r4
		}

	}

	return ret;
}
    e012:	4620      	mov	r0, r4
    e014:	b005      	add	sp, #20
    e016:	bd30      	pop	{r4, r5, pc}
			k_thread_suspend(gps_thread_id);
    e018:	4b09      	ldr	r3, [pc, #36]	; (e040 <do_gps_stop+0x80>)
    e01a:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
    e01c:	f00d fce6 	bl	1b9ec <z_impl_k_thread_suspend>
			nrf_close(gps_client_inst.sock);
    e020:	6828      	ldr	r0, [r5, #0]
    e022:	f008 fe3d 	bl	16ca0 <nrf_close>
			gps_client_inst.running = false;
    e026:	71ac      	strb	r4, [r5, #6]
			gps_client_inst.callback("#XGPSRUN: 0\r\n");
    e028:	68ab      	ldr	r3, [r5, #8]
    e02a:	4806      	ldr	r0, [pc, #24]	; (e044 <do_gps_stop+0x84>)
    e02c:	4798      	blx	r3
			LOG_DBG("GPS stopped");
    e02e:	e7f0      	b.n	e012 <do_gps_stop+0x52>
    e030:	2002013c 	.word	0x2002013c
    e034:	0001ee58 	.word	0x0001ee58
    e038:	0001ee90 	.word	0x0001ee90
    e03c:	0001fe7d 	.word	0x0001fe7d
    e040:	200201f8 	.word	0x200201f8
    e044:	0001fe9a 	.word	0x0001fe9a

0000e048 <do_gps_start>:
	nrf_gnss_fix_retry_t    fix_retry    = 0; /* unlimited retry period */
    e048:	2300      	movs	r3, #0
{
    e04a:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_gnss_fix_interval_t fix_interval = 1; /* 1s delay between fixes */
    e04c:	2701      	movs	r7, #1
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)gps_client_inst.mask;
    e04e:	4d70      	ldr	r5, [pc, #448]	; (e210 <do_gps_start+0x1c8>)
{
    e050:	b08b      	sub	sp, #44	; 0x2c
	nrf_gnss_fix_retry_t    fix_retry    = 0; /* unlimited retry period */
    e052:	f8ad 301e 	strh.w	r3, [sp, #30]
	nrf_gnss_delete_mask_t  delete_mask  = 0;
    e056:	9309      	str	r3, [sp, #36]	; 0x24
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)gps_client_inst.mask;
    e058:	88ab      	ldrh	r3, [r5, #4]
	gps_client_inst.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    e05a:	f44f 7201 	mov.w	r2, #516	; 0x204
    e05e:	2102      	movs	r1, #2
    e060:	4638      	mov	r0, r7
	nrf_gnss_fix_interval_t fix_interval = 1; /* 1s delay between fixes */
    e062:	f8ad 7020 	strh.w	r7, [sp, #32]
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)gps_client_inst.mask;
    e066:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	gps_client_inst.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    e06a:	f008 fe07 	bl	16c7c <nrf_socket>
	if (gps_client_inst.sock < 0) {
    e06e:	2800      	cmp	r0, #0
	gps_client_inst.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    e070:	6028      	str	r0, [r5, #0]
	if (gps_client_inst.sock < 0) {
    e072:	da31      	bge.n	e0d8 <do_gps_start+0x90>
		LOG_ERR("Could not init socket (err: %d)", -errno);
    e074:	f04f 0400 	mov.w	r4, #0
    e078:	4a66      	ldr	r2, [pc, #408]	; (e214 <do_gps_start+0x1cc>)
    e07a:	4b67      	ldr	r3, [pc, #412]	; (e218 <do_gps_start+0x1d0>)
    e07c:	f367 0407 	bfi	r4, r7, #0, #8
    e080:	1a9b      	subs	r3, r3, r2
    e082:	08db      	lsrs	r3, r3, #3
    e084:	f363 148f 	bfi	r4, r3, #6, #10
    e088:	f00d ff50 	bl	1bf2c <z_errno>
    e08c:	6801      	ldr	r1, [r0, #0]
    e08e:	4622      	mov	r2, r4
    e090:	4249      	negs	r1, r1
    e092:	4862      	ldr	r0, [pc, #392]	; (e21c <do_gps_start+0x1d4>)
    e094:	f00e faea 	bl	1c66c <log_1>
	int ret = -EINVAL;
    e098:	f06f 0415 	mvn.w	r4, #21
	LOG_ERR("GPS start failed: %d", ret);
    e09c:	2301      	movs	r3, #1
    e09e:	f04f 0200 	mov.w	r2, #0
    e0a2:	495c      	ldr	r1, [pc, #368]	; (e214 <do_gps_start+0x1cc>)
    e0a4:	f363 0207 	bfi	r2, r3, #0, #8
    e0a8:	4b5b      	ldr	r3, [pc, #364]	; (e218 <do_gps_start+0x1d0>)
    e0aa:	485d      	ldr	r0, [pc, #372]	; (e220 <do_gps_start+0x1d8>)
    e0ac:	1a5b      	subs	r3, r3, r1
    e0ae:	08db      	lsrs	r3, r3, #3
    e0b0:	f363 128f 	bfi	r2, r3, #6, #10
    e0b4:	4621      	mov	r1, r4
    e0b6:	f00e fad9 	bl	1c66c <log_1>
	sprintf(buf, "#XGPSRUN: %d\r\n", ret);
    e0ba:	4622      	mov	r2, r4
    e0bc:	4959      	ldr	r1, [pc, #356]	; (e224 <do_gps_start+0x1dc>)
    e0be:	485a      	ldr	r0, [pc, #360]	; (e228 <do_gps_start+0x1e0>)
    e0c0:	f002 fcba 	bl	10a38 <sprintf>
	gps_client_inst.callback(buf);
    e0c4:	68ab      	ldr	r3, [r5, #8]
    e0c6:	4858      	ldr	r0, [pc, #352]	; (e228 <do_gps_start+0x1e0>)
    e0c8:	4798      	blx	r3
	gps_client_inst.running = false;
    e0ca:	2300      	movs	r3, #0
    e0cc:	71ab      	strb	r3, [r5, #6]
	return -errno;
    e0ce:	f00d ff2d 	bl	1bf2c <z_errno>
    e0d2:	6804      	ldr	r4, [r0, #0]
    e0d4:	4264      	negs	r4, r4
    e0d6:	e088      	b.n	e1ea <do_gps_start+0x1a2>
	ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS, NRF_SO_GNSS_FIX_RETRY,
    e0d8:	2602      	movs	r6, #2
    e0da:	f10d 031e 	add.w	r3, sp, #30
    e0de:	9600      	str	r6, [sp, #0]
    e0e0:	4632      	mov	r2, r6
    e0e2:	f44f 7101 	mov.w	r1, #516	; 0x204
    e0e6:	f008 fe9f 	bl	16e28 <nrf_setsockopt>
	if (ret != 0) {
    e0ea:	4604      	mov	r4, r0
    e0ec:	b198      	cbz	r0, e116 <do_gps_start+0xce>
		LOG_ERR("Failed to set fix retry value (err: %d)", -errno);
    e0ee:	2301      	movs	r3, #1
    e0f0:	f04f 0600 	mov.w	r6, #0
    e0f4:	4a47      	ldr	r2, [pc, #284]	; (e214 <do_gps_start+0x1cc>)
    e0f6:	f363 0607 	bfi	r6, r3, #0, #8
    e0fa:	4b47      	ldr	r3, [pc, #284]	; (e218 <do_gps_start+0x1d0>)
    e0fc:	1a9b      	subs	r3, r3, r2
    e0fe:	08db      	lsrs	r3, r3, #3
    e100:	f363 168f 	bfi	r6, r3, #6, #10
    e104:	f00d ff12 	bl	1bf2c <z_errno>
    e108:	4632      	mov	r2, r6
    e10a:	6801      	ldr	r1, [r0, #0]
    e10c:	4847      	ldr	r0, [pc, #284]	; (e22c <do_gps_start+0x1e4>)
    e10e:	4249      	negs	r1, r1
		LOG_ERR("Failed to start GPS (err: %d)", -errno);
    e110:	f00e faac 	bl	1c66c <log_1>
		goto error;
    e114:	e7c2      	b.n	e09c <do_gps_start+0x54>
	ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS,
    e116:	9600      	str	r6, [sp, #0]
    e118:	ab08      	add	r3, sp, #32
    e11a:	463a      	mov	r2, r7
    e11c:	f44f 7101 	mov.w	r1, #516	; 0x204
    e120:	6828      	ldr	r0, [r5, #0]
    e122:	f008 fe81 	bl	16e28 <nrf_setsockopt>
	if (ret != 0) {
    e126:	4604      	mov	r4, r0
    e128:	b188      	cbz	r0, e14e <do_gps_start+0x106>
		LOG_ERR("Failed to set fix interval value (err: %d)", -errno);
    e12a:	2301      	movs	r3, #1
    e12c:	f04f 0600 	mov.w	r6, #0
    e130:	4a38      	ldr	r2, [pc, #224]	; (e214 <do_gps_start+0x1cc>)
    e132:	f363 0607 	bfi	r6, r3, #0, #8
    e136:	4b38      	ldr	r3, [pc, #224]	; (e218 <do_gps_start+0x1d0>)
    e138:	1a9b      	subs	r3, r3, r2
    e13a:	08db      	lsrs	r3, r3, #3
    e13c:	f363 168f 	bfi	r6, r3, #6, #10
    e140:	f00d fef4 	bl	1bf2c <z_errno>
    e144:	6801      	ldr	r1, [r0, #0]
    e146:	4632      	mov	r2, r6
    e148:	4249      	negs	r1, r1
    e14a:	4839      	ldr	r0, [pc, #228]	; (e230 <do_gps_start+0x1e8>)
    e14c:	e7e0      	b.n	e110 <do_gps_start+0xc8>
	ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS, NRF_SO_GNSS_NMEA_MASK,
    e14e:	9600      	str	r6, [sp, #0]
    e150:	f10d 0322 	add.w	r3, sp, #34	; 0x22
    e154:	2204      	movs	r2, #4
    e156:	f44f 7101 	mov.w	r1, #516	; 0x204
    e15a:	6828      	ldr	r0, [r5, #0]
    e15c:	f008 fe64 	bl	16e28 <nrf_setsockopt>
	if (ret != 0) {
    e160:	4604      	mov	r4, r0
    e162:	b188      	cbz	r0, e188 <do_gps_start+0x140>
		LOG_ERR("Failed to set nmea mask (err: %d)", -errno);
    e164:	2301      	movs	r3, #1
    e166:	f04f 0600 	mov.w	r6, #0
    e16a:	4a2a      	ldr	r2, [pc, #168]	; (e214 <do_gps_start+0x1cc>)
    e16c:	f363 0607 	bfi	r6, r3, #0, #8
    e170:	4b29      	ldr	r3, [pc, #164]	; (e218 <do_gps_start+0x1d0>)
    e172:	1a9b      	subs	r3, r3, r2
    e174:	08db      	lsrs	r3, r3, #3
    e176:	f363 168f 	bfi	r6, r3, #6, #10
    e17a:	f00d fed7 	bl	1bf2c <z_errno>
    e17e:	6801      	ldr	r1, [r0, #0]
    e180:	4632      	mov	r2, r6
    e182:	4249      	negs	r1, r1
    e184:	482b      	ldr	r0, [pc, #172]	; (e234 <do_gps_start+0x1ec>)
    e186:	e7c3      	b.n	e110 <do_gps_start+0xc8>
	ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS, NRF_SO_GNSS_START,
    e188:	2304      	movs	r3, #4
    e18a:	2207      	movs	r2, #7
    e18c:	9300      	str	r3, [sp, #0]
    e18e:	f44f 7101 	mov.w	r1, #516	; 0x204
    e192:	ab09      	add	r3, sp, #36	; 0x24
    e194:	6828      	ldr	r0, [r5, #0]
    e196:	f008 fe47 	bl	16e28 <nrf_setsockopt>
	if (ret != 0) {
    e19a:	4604      	mov	r4, r0
    e19c:	b188      	cbz	r0, e1c2 <do_gps_start+0x17a>
		LOG_ERR("Failed to start GPS (err: %d)", -errno);
    e19e:	2301      	movs	r3, #1
    e1a0:	f04f 0600 	mov.w	r6, #0
    e1a4:	4a1b      	ldr	r2, [pc, #108]	; (e214 <do_gps_start+0x1cc>)
    e1a6:	f363 0607 	bfi	r6, r3, #0, #8
    e1aa:	4b1b      	ldr	r3, [pc, #108]	; (e218 <do_gps_start+0x1d0>)
    e1ac:	1a9b      	subs	r3, r3, r2
    e1ae:	08db      	lsrs	r3, r3, #3
    e1b0:	f363 168f 	bfi	r6, r3, #6, #10
    e1b4:	f00d feba 	bl	1bf2c <z_errno>
    e1b8:	6801      	ldr	r1, [r0, #0]
    e1ba:	4632      	mov	r2, r6
    e1bc:	4249      	negs	r1, r1
    e1be:	481e      	ldr	r0, [pc, #120]	; (e238 <do_gps_start+0x1f0>)
    e1c0:	e7a6      	b.n	e110 <do_gps_start+0xc8>
	if (gps_thread_id != NULL) {
    e1c2:	4e1e      	ldr	r6, [pc, #120]	; (e23c <do_gps_start+0x1f4>)
    e1c4:	6830      	ldr	r0, [r6, #0]
    e1c6:	b198      	cbz	r0, e1f0 <do_gps_start+0x1a8>
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_RESUME);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_resume(thread);
    e1c8:	f00d fc30 	bl	1ba2c <z_impl_k_thread_resume>
	gps_client_inst.running = true;
    e1cc:	2301      	movs	r3, #1
	sprintf(buf, "#XGPSRUN: 1,%d\r\n", gps_client_inst.mask);
    e1ce:	88aa      	ldrh	r2, [r5, #4]
    e1d0:	491b      	ldr	r1, [pc, #108]	; (e240 <do_gps_start+0x1f8>)
    e1d2:	4815      	ldr	r0, [pc, #84]	; (e228 <do_gps_start+0x1e0>)
	gps_client_inst.running = true;
    e1d4:	71ab      	strb	r3, [r5, #6]
	sprintf(buf, "#XGPSRUN: 1,%d\r\n", gps_client_inst.mask);
    e1d6:	f002 fc2f 	bl	10a38 <sprintf>
	gps_client_inst.callback(buf);
    e1da:	68ab      	ldr	r3, [r5, #8]
    e1dc:	4812      	ldr	r0, [pc, #72]	; (e228 <do_gps_start+0x1e0>)
    e1de:	4798      	blx	r3
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_GET);
		return (s64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_get();
    e1e0:	f010 fb7d 	bl	1e8de <z_impl_k_uptime_get>
	ttft_start = k_uptime_get();
    e1e4:	4b17      	ldr	r3, [pc, #92]	; (e244 <do_gps_start+0x1fc>)
    e1e6:	e9c3 0100 	strd	r0, r1, [r3]
}
    e1ea:	4620      	mov	r0, r4
    e1ec:	b00b      	add	sp, #44	; 0x2c
    e1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    e1f0:	230e      	movs	r3, #14
    e1f2:	e9cd 4404 	strd	r4, r4, [sp, #16]
    e1f6:	e9cd 4302 	strd	r4, r3, [sp, #8]
    e1fa:	e9cd 4400 	strd	r4, r4, [sp]
    e1fe:	4b12      	ldr	r3, [pc, #72]	; (e248 <do_gps_start+0x200>)
    e200:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e204:	4911      	ldr	r1, [pc, #68]	; (e24c <do_gps_start+0x204>)
    e206:	4812      	ldr	r0, [pc, #72]	; (e250 <do_gps_start+0x208>)
    e208:	f00d fb9c 	bl	1b944 <z_impl_k_thread_create>
		gps_thread_id = k_thread_create(&gps_thread, gps_thread_stack,
    e20c:	6030      	str	r0, [r6, #0]
    e20e:	e7dd      	b.n	e1cc <do_gps_start+0x184>
    e210:	2002013c 	.word	0x2002013c
    e214:	0001ee58 	.word	0x0001ee58
    e218:	0001ee90 	.word	0x0001ee90
    e21c:	0001fd95 	.word	0x0001fd95
    e220:	0001fe59 	.word	0x0001fe59
    e224:	0001fe6e 	.word	0x0001fe6e
    e228:	20026538 	.word	0x20026538
    e22c:	0001fdb5 	.word	0x0001fdb5
    e230:	0001fddd 	.word	0x0001fddd
    e234:	0001fe08 	.word	0x0001fe08
    e238:	0001fe2a 	.word	0x0001fe2a
    e23c:	200201f8 	.word	0x200201f8
    e240:	0001fe48 	.word	0x0001fe48
    e244:	20020100 	.word	0x20020100
    e248:	0000e349 	.word	0x0000e349
    e24c:	200266e8 	.word	0x200266e8
    e250:	20020148 	.word	0x20020148

0000e254 <handle_at_gpsrun>:
static int handle_at_gpsrun(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	u16_t op;

	switch (cmd_type) {
    e254:	2801      	cmp	r0, #1
{
    e256:	b513      	push	{r0, r1, r4, lr}
    e258:	4604      	mov	r4, r0
	switch (cmd_type) {
    e25a:	d004      	beq.n	e266 <handle_at_gpsrun+0x12>
    e25c:	2802      	cmp	r0, #2
    e25e:	d04c      	beq.n	e2fa <handle_at_gpsrun+0xa6>
	case AT_CMD_TYPE_SET_COMMAND:
		if (at_params_valid_count_get(&m_param_list) < 2) {
			return -EINVAL;
    e260:	f06f 0415 	mvn.w	r4, #21
    e264:	e02d      	b.n	e2c2 <handle_at_gpsrun+0x6e>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    e266:	482e      	ldr	r0, [pc, #184]	; (e320 <handle_at_gpsrun+0xcc>)
    e268:	f010 f87d 	bl	1e366 <at_params_valid_count_get>
    e26c:	2801      	cmp	r0, #1
    e26e:	d9f7      	bls.n	e260 <handle_at_gpsrun+0xc>
		}
		err = at_params_short_get(&m_param_list, 1, &op);
    e270:	4621      	mov	r1, r4
    e272:	f10d 0206 	add.w	r2, sp, #6
    e276:	482a      	ldr	r0, [pc, #168]	; (e320 <handle_at_gpsrun+0xcc>)
    e278:	f010 f840 	bl	1e2fc <at_params_short_get>
		if (err < 0) {
    e27c:	1e04      	subs	r4, r0, #0
    e27e:	db20      	blt.n	e2c2 <handle_at_gpsrun+0x6e>
			return err;
		}
		if (op == 1) {
    e280:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    e284:	2b01      	cmp	r3, #1
    e286:	d123      	bne.n	e2d0 <handle_at_gpsrun+0x7c>
			if (at_params_valid_count_get(&m_param_list) > 2) {
    e288:	4825      	ldr	r0, [pc, #148]	; (e320 <handle_at_gpsrun+0xcc>)
    e28a:	f010 f86c 	bl	1e366 <at_params_valid_count_get>
    e28e:	2802      	cmp	r0, #2
    e290:	d906      	bls.n	e2a0 <handle_at_gpsrun+0x4c>
				err = at_params_short_get(&m_param_list, 2,
    e292:	4a24      	ldr	r2, [pc, #144]	; (e324 <handle_at_gpsrun+0xd0>)
    e294:	2102      	movs	r1, #2
    e296:	4822      	ldr	r0, [pc, #136]	; (e320 <handle_at_gpsrun+0xcc>)
    e298:	f010 f830 	bl	1e2fc <at_params_short_get>
							&gps_client_inst.mask);
				if (err < 0) {
    e29c:	1e04      	subs	r4, r0, #0
    e29e:	db10      	blt.n	e2c2 <handle_at_gpsrun+0x6e>
					return err;
				}
			}
			if (gps_client_inst.running) {
    e2a0:	4b21      	ldr	r3, [pc, #132]	; (e328 <handle_at_gpsrun+0xd4>)
    e2a2:	799b      	ldrb	r3, [r3, #6]
    e2a4:	b183      	cbz	r3, e2c8 <handle_at_gpsrun+0x74>
				LOG_WRN("GPS is running");
    e2a6:	2302      	movs	r3, #2
    e2a8:	f04f 0100 	mov.w	r1, #0
    e2ac:	4a1f      	ldr	r2, [pc, #124]	; (e32c <handle_at_gpsrun+0xd8>)
    e2ae:	f363 0107 	bfi	r1, r3, #0, #8
    e2b2:	4b1f      	ldr	r3, [pc, #124]	; (e330 <handle_at_gpsrun+0xdc>)
    e2b4:	481f      	ldr	r0, [pc, #124]	; (e334 <handle_at_gpsrun+0xe0>)
    e2b6:	1a9b      	subs	r3, r3, r2
    e2b8:	08db      	lsrs	r3, r3, #3
    e2ba:	f363 118f 	bfi	r1, r3, #6, #10
			} else {
				err = do_gps_start();
			}
		} else if (op == 0) {
			if (!gps_client_inst.running) {
				LOG_WRN("GPS is not running");
    e2be:	f00e f9c8 	bl	1c652 <log_0>
	default:
		break;
	}

	return err;
}
    e2c2:	4620      	mov	r0, r4
    e2c4:	b002      	add	sp, #8
    e2c6:	bd10      	pop	{r4, pc}
				err = do_gps_start();
    e2c8:	f7ff febe 	bl	e048 <do_gps_start>
				err = do_gps_stop();
    e2cc:	4604      	mov	r4, r0
    e2ce:	e7f8      	b.n	e2c2 <handle_at_gpsrun+0x6e>
		} else if (op == 0) {
    e2d0:	2b00      	cmp	r3, #0
    e2d2:	d1f6      	bne.n	e2c2 <handle_at_gpsrun+0x6e>
			if (!gps_client_inst.running) {
    e2d4:	4b14      	ldr	r3, [pc, #80]	; (e328 <handle_at_gpsrun+0xd4>)
    e2d6:	799b      	ldrb	r3, [r3, #6]
    e2d8:	b963      	cbnz	r3, e2f4 <handle_at_gpsrun+0xa0>
				LOG_WRN("GPS is not running");
    e2da:	2302      	movs	r3, #2
    e2dc:	f04f 0100 	mov.w	r1, #0
    e2e0:	4a12      	ldr	r2, [pc, #72]	; (e32c <handle_at_gpsrun+0xd8>)
    e2e2:	f363 0107 	bfi	r1, r3, #0, #8
    e2e6:	4b12      	ldr	r3, [pc, #72]	; (e330 <handle_at_gpsrun+0xdc>)
    e2e8:	4813      	ldr	r0, [pc, #76]	; (e338 <handle_at_gpsrun+0xe4>)
    e2ea:	1a9b      	subs	r3, r3, r2
    e2ec:	08db      	lsrs	r3, r3, #3
    e2ee:	f363 118f 	bfi	r1, r3, #6, #10
    e2f2:	e7e4      	b.n	e2be <handle_at_gpsrun+0x6a>
				err = do_gps_stop();
    e2f4:	f7ff fe64 	bl	dfc0 <do_gps_stop>
    e2f8:	e7e8      	b.n	e2cc <handle_at_gpsrun+0x78>
		if (gps_client_inst.running) {
    e2fa:	4c0b      	ldr	r4, [pc, #44]	; (e328 <handle_at_gpsrun+0xd4>)
    e2fc:	79a3      	ldrb	r3, [r4, #6]
    e2fe:	b14b      	cbz	r3, e314 <handle_at_gpsrun+0xc0>
			sprintf(buf, "#XGPSRUN: 1,%d\r\n", gps_client_inst.mask);
    e300:	88a2      	ldrh	r2, [r4, #4]
    e302:	490e      	ldr	r1, [pc, #56]	; (e33c <handle_at_gpsrun+0xe8>)
    e304:	480e      	ldr	r0, [pc, #56]	; (e340 <handle_at_gpsrun+0xec>)
    e306:	f002 fb97 	bl	10a38 <sprintf>
		gps_client_inst.callback(buf);
    e30a:	68a3      	ldr	r3, [r4, #8]
    e30c:	480c      	ldr	r0, [pc, #48]	; (e340 <handle_at_gpsrun+0xec>)
    e30e:	4798      	blx	r3
		err = 0;
    e310:	2400      	movs	r4, #0
		break;
    e312:	e7d6      	b.n	e2c2 <handle_at_gpsrun+0x6e>
			sprintf(buf, "#XGPSRUN: 0\r\n");
    e314:	490b      	ldr	r1, [pc, #44]	; (e344 <handle_at_gpsrun+0xf0>)
    e316:	480a      	ldr	r0, [pc, #40]	; (e340 <handle_at_gpsrun+0xec>)
    e318:	f002 fb8e 	bl	10a38 <sprintf>
    e31c:	e7f5      	b.n	e30a <handle_at_gpsrun+0xb6>
    e31e:	bf00      	nop
    e320:	20020110 	.word	0x20020110
    e324:	20020140 	.word	0x20020140
    e328:	2002013c 	.word	0x2002013c
    e32c:	0001ee58 	.word	0x0001ee58
    e330:	0001ee90 	.word	0x0001ee90
    e334:	0001ff29 	.word	0x0001ff29
    e338:	0001ff38 	.word	0x0001ff38
    e33c:	0001fe48 	.word	0x0001fe48
    e340:	20026538 	.word	0x20026538
    e344:	0001fe9a 	.word	0x0001fe9a

0000e348 <gps_thread_fn>:
{
    e348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
		if (nrf_recv(gps_client_inst.sock, &gps_data, sizeof(gps_data), 0)
    e34c:	4f62      	ldr	r7, [pc, #392]	; (e4d8 <gps_thread_fn+0x190>)
    e34e:	4e63      	ldr	r6, [pc, #396]	; (e4dc <gps_thread_fn+0x194>)
    e350:	463d      	mov	r5, r7
	LOG_INF("NOTIFY!");
    e352:	4b63      	ldr	r3, [pc, #396]	; (e4e0 <gps_thread_fn+0x198>)
		if (nrf_recv(gps_client_inst.sock, &gps_data, sizeof(gps_data), 0)
    e354:	4c63      	ldr	r4, [pc, #396]	; (e4e4 <gps_thread_fn+0x19c>)
	LOG_INF("NOTIFY!");
    e356:	1af6      	subs	r6, r6, r3
    e358:	f3c6 06c9 	ubfx	r6, r6, #3, #10
		if (nrf_recv(gps_client_inst.sock, &gps_data, sizeof(gps_data), 0)
    e35c:	2300      	movs	r3, #0
    e35e:	22d8      	movs	r2, #216	; 0xd8
    e360:	4960      	ldr	r1, [pc, #384]	; (e4e4 <gps_thread_fn+0x19c>)
    e362:	6838      	ldr	r0, [r7, #0]
    e364:	f008 fcfc 	bl	16d60 <nrf_recv>
    e368:	2800      	cmp	r0, #0
    e36a:	dc21      	bgt.n	e3b0 <gps_thread_fn+0x68>
			LOG_ERR("GPS nrf_recv(): %d", -errno);
    e36c:	2301      	movs	r3, #1
    e36e:	f04f 0400 	mov.w	r4, #0
    e372:	f363 0407 	bfi	r4, r3, #0, #8
    e376:	f00d fdd9 	bl	1bf2c <z_errno>
    e37a:	6801      	ldr	r1, [r0, #0]
    e37c:	f366 148f 	bfi	r4, r6, #6, #10
    e380:	4622      	mov	r2, r4
    e382:	4249      	negs	r1, r1
    e384:	4858      	ldr	r0, [pc, #352]	; (e4e8 <gps_thread_fn+0x1a0>)
    e386:	f00e f971 	bl	1c66c <log_1>
			sprintf(buf, "#XGPSRUN: %d\r\n", -errno);
    e38a:	f00d fdcf 	bl	1bf2c <z_errno>
    e38e:	6802      	ldr	r2, [r0, #0]
    e390:	4956      	ldr	r1, [pc, #344]	; (e4ec <gps_thread_fn+0x1a4>)
    e392:	4252      	negs	r2, r2
    e394:	4856      	ldr	r0, [pc, #344]	; (e4f0 <gps_thread_fn+0x1a8>)
    e396:	f002 fb4f 	bl	10a38 <sprintf>
			gps_client_inst.callback(buf);
    e39a:	68bb      	ldr	r3, [r7, #8]
    e39c:	4854      	ldr	r0, [pc, #336]	; (e4f0 <gps_thread_fn+0x1a8>)
    e39e:	4798      	blx	r3
			nrf_close(gps_client_inst.sock);
    e3a0:	6838      	ldr	r0, [r7, #0]
    e3a2:	f008 fc7d 	bl	16ca0 <nrf_close>
			gps_client_inst.running = false;
    e3a6:	2300      	movs	r3, #0
    e3a8:	71bb      	strb	r3, [r7, #6]
}
    e3aa:	b004      	add	sp, #16
    e3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (gps_data.data_id != NRF_GNSS_PVT_DATA_ID || gps_client_inst.has_fix) {
    e3b0:	7823      	ldrb	r3, [r4, #0]
    e3b2:	2b01      	cmp	r3, #1
    e3b4:	d1d2      	bne.n	e35c <gps_thread_fn+0x14>
    e3b6:	79f9      	ldrb	r1, [r7, #7]
    e3b8:	2900      	cmp	r1, #0
    e3ba:	d055      	beq.n	e468 <gps_thread_fn+0x120>
			if (IS_FIX(gps_data.pvt.flags)) {
    e3bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    e3c0:	07db      	lsls	r3, r3, #31
    e3c2:	d5cb      	bpl.n	e35c <gps_thread_fn+0x14>
	notified = 1;
    e3c4:	f04f 0901 	mov.w	r9, #1
	LOG_INF("NOTIFY!");
    e3c8:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    e3cc:	f043 0303 	orr.w	r3, r3, #3
    e3d0:	f363 0807 	bfi	r8, r3, #0, #8
    e3d4:	f366 188f 	bfi	r8, r6, #6, #10
    e3d8:	4641      	mov	r1, r8
    e3da:	4846      	ldr	r0, [pc, #280]	; (e4f4 <gps_thread_fn+0x1ac>)
    e3dc:	f00e f939 	bl	1c652 <log_0>
	current_location.lat = gps_data.pvt.latitude;
    e3e0:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
	notified = 1;
    e3e4:	4b44      	ldr	r3, [pc, #272]	; (e4f8 <gps_thread_fn+0x1b0>)
	current_location.alt = gps_data.pvt.altitude;
    e3e6:	69a2      	ldr	r2, [r4, #24]
	notified = 1;
    e3e8:	f883 9000 	strb.w	r9, [r3]
	current_location.lat = gps_data.pvt.latitude;
    e3ec:	4b43      	ldr	r3, [pc, #268]	; (e4fc <gps_thread_fn+0x1b4>)
	current_location.alt = gps_data.pvt.altitude;
    e3ee:	611a      	str	r2, [r3, #16]
	current_location.hdop = gps_data.pvt.hdop;
    e3f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	current_location.lat = gps_data.pvt.latitude;
    e3f2:	e9c3 0100 	strd	r0, r1, [r3]
	current_location.lon = gps_data.pvt.longitude;
    e3f6:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
	current_location.hdop = gps_data.pvt.hdop;
    e3fa:	615a      	str	r2, [r3, #20]
	current_location.datetime = gps_data.pvt.datetime;
    e3fc:	4a40      	ldr	r2, [pc, #256]	; (e500 <gps_thread_fn+0x1b8>)
	current_location.lon = gps_data.pvt.longitude;
    e3fe:	e9c3 0102 	strd	r0, r1, [r3, #8]
	current_location.datetime = gps_data.pvt.datetime;
    e402:	ca07      	ldmia	r2, {r0, r1, r2}
    e404:	3318      	adds	r3, #24
    e406:	c303      	stmia	r3!, {r0, r1}
	gps_client_inst.callback(buf);
    e408:	4839      	ldr	r0, [pc, #228]	; (e4f0 <gps_thread_fn+0x1a8>)
	current_location.datetime = gps_data.pvt.datetime;
    e40a:	801a      	strh	r2, [r3, #0]
	gps_client_inst.callback(buf);
    e40c:	68ab      	ldr	r3, [r5, #8]
    e40e:	4798      	blx	r3
	sprintf(buf, "#XGPSP: %04u-%02u-%02u %02u:%02u:%02u\r\n",
    e410:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    e414:	493b      	ldr	r1, [pc, #236]	; (e504 <gps_thread_fn+0x1bc>)
    e416:	9303      	str	r3, [sp, #12]
    e418:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    e41c:	4834      	ldr	r0, [pc, #208]	; (e4f0 <gps_thread_fn+0x1a8>)
    e41e:	9302      	str	r3, [sp, #8]
    e420:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    e424:	9301      	str	r3, [sp, #4]
    e426:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    e42a:	9300      	str	r3, [sp, #0]
    e42c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    e430:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    e432:	f002 fb01 	bl	10a38 <sprintf>
	gps_client_inst.callback(buf);
    e436:	68ab      	ldr	r3, [r5, #8]
    e438:	482d      	ldr	r0, [pc, #180]	; (e4f0 <gps_thread_fn+0x1a8>)
    e43a:	4798      	blx	r3
				if (!gps_client_inst.has_fix) {
    e43c:	79eb      	ldrb	r3, [r5, #7]
    e43e:	2b00      	cmp	r3, #0
    e440:	d18c      	bne.n	e35c <gps_thread_fn+0x14>
	return z_impl_k_uptime_get();
    e442:	f010 fa4c 	bl	1e8de <z_impl_k_uptime_get>
						(int)(now - ttft_start)/1000);
    e446:	4b30      	ldr	r3, [pc, #192]	; (e508 <gps_thread_fn+0x1c0>)
					sprintf(buf, "#	: TTFF %d sec\r\n",
    e448:	4930      	ldr	r1, [pc, #192]	; (e50c <gps_thread_fn+0x1c4>)
						(int)(now - ttft_start)/1000);
    e44a:	681a      	ldr	r2, [r3, #0]
					sprintf(buf, "#	: TTFF %d sec\r\n",
    e44c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
						(int)(now - ttft_start)/1000);
    e450:	1a82      	subs	r2, r0, r2
					sprintf(buf, "#	: TTFF %d sec\r\n",
    e452:	fb92 f2f3 	sdiv	r2, r2, r3
    e456:	4826      	ldr	r0, [pc, #152]	; (e4f0 <gps_thread_fn+0x1a8>)
    e458:	f002 faee 	bl	10a38 <sprintf>
					gps_client_inst.callback(buf);
    e45c:	68ab      	ldr	r3, [r5, #8]
    e45e:	4824      	ldr	r0, [pc, #144]	; (e4f0 <gps_thread_fn+0x1a8>)
    e460:	4798      	blx	r3
					gps_client_inst.has_fix = true;
    e462:	f885 9007 	strb.w	r9, [r5, #7]
    e466:	e779      	b.n	e35c <gps_thread_fn+0x14>
	u8_t in_fix = 0;
    e468:	460b      	mov	r3, r1
	u8_t tracked = 0;
    e46a:	4689      	mov	r9, r1
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
    e46c:	4608      	mov	r0, r1
    e46e:	4a1d      	ldr	r2, [pc, #116]	; (e4e4 <gps_thread_fn+0x19c>)
		if ((gps_data.pvt.sv[i].sv > 0) &&
    e470:	f8b2 c046 	ldrh.w	ip, [r2, #70]	; 0x46
    e474:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    e478:	f1bc 0f1f 	cmp.w	ip, #31
    e47c:	d810      	bhi.n	e4a0 <gps_thread_fn+0x158>
			if (IS_FIX(gps_data.pvt.sv[i].flags)) {
    e47e:	f892 c050 	ldrb.w	ip, [r2, #80]	; 0x50
			tracked++;
    e482:	f109 0901 	add.w	r9, r9, #1
			if (IS_FIX(gps_data.pvt.sv[i].flags)) {
    e486:	f01c 0f01 	tst.w	ip, #1
				in_fix++;
    e48a:	bf1c      	itt	ne
    e48c:	3301      	addne	r3, #1
    e48e:	b2db      	uxtbne	r3, r3
			if (IS_UNHEALTHY(gps_data.pvt.sv[i].flags)) {
    e490:	f01c 0f08 	tst.w	ip, #8
				unhealthy++;
    e494:	bf18      	it	ne
    e496:	3101      	addne	r1, #1
			tracked++;
    e498:	fa5f f989 	uxtb.w	r9, r9
				unhealthy++;
    e49c:	bf18      	it	ne
    e49e:	b2c9      	uxtbne	r1, r1
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
    e4a0:	3001      	adds	r0, #1
    e4a2:	280c      	cmp	r0, #12
    e4a4:	f102 020c 	add.w	r2, r2, #12
    e4a8:	d1e2      	bne.n	e470 <gps_thread_fn+0x128>
	if (last_tracked != tracked) {
    e4aa:	f8df a068 	ldr.w	sl, [pc, #104]	; e514 <gps_thread_fn+0x1cc>
    e4ae:	f89a 2000 	ldrb.w	r2, [sl]
    e4b2:	454a      	cmp	r2, r9
    e4b4:	d082      	beq.n	e3bc <gps_thread_fn+0x74>
		sprintf(buf, "#XGPSS: tracking %d using %d unhealthy %d\r\n",
    e4b6:	9100      	str	r1, [sp, #0]
    e4b8:	464a      	mov	r2, r9
    e4ba:	4915      	ldr	r1, [pc, #84]	; (e510 <gps_thread_fn+0x1c8>)
    e4bc:	480c      	ldr	r0, [pc, #48]	; (e4f0 <gps_thread_fn+0x1a8>)
    e4be:	f002 fabb 	bl	10a38 <sprintf>
		gps_client_inst.callback(buf);
    e4c2:	68ab      	ldr	r3, [r5, #8]
    e4c4:	480a      	ldr	r0, [pc, #40]	; (e4f0 <gps_thread_fn+0x1a8>)
    e4c6:	4798      	blx	r3
		switch (gps_data.data_id) {
    e4c8:	7823      	ldrb	r3, [r4, #0]
		last_tracked = tracked;
    e4ca:	f88a 9000 	strb.w	r9, [sl]
		switch (gps_data.data_id) {
    e4ce:	2b01      	cmp	r3, #1
    e4d0:	f43f af74 	beq.w	e3bc <gps_thread_fn+0x74>
    e4d4:	e742      	b.n	e35c <gps_thread_fn+0x14>
    e4d6:	bf00      	nop
    e4d8:	2002013c 	.word	0x2002013c
    e4dc:	0001ee90 	.word	0x0001ee90
    e4e0:	0001ee58 	.word	0x0001ee58
    e4e4:	20020028 	.word	0x20020028
    e4e8:	0001fea8 	.word	0x0001fea8
    e4ec:	0001fe6e 	.word	0x0001fe6e
    e4f0:	20026538 	.word	0x20026538
    e4f4:	0001fee7 	.word	0x0001fee7
    e4f8:	20026579 	.word	0x20026579
    e4fc:	20020000 	.word	0x20020000
    e500:	20020050 	.word	0x20020050
    e504:	0001feef 	.word	0x0001feef
    e508:	20020100 	.word	0x20020100
    e50c:	0001ff17 	.word	0x0001ff17
    e510:	0001febb 	.word	0x0001febb
    e514:	20026578 	.word	0x20026578

0000e518 <slm_at_gps_parse>:

/**@brief API to handle GPS AT commands
 */
int slm_at_gps_parse(const char *at_cmd)
{
    e518:	b538      	push	{r3, r4, r5, lr}
    e51a:	4604      	mov	r4, r0
	int ret = -ENOTSUP;
	enum at_cmd_type type;

	for (int i = 0; i < AT_GPS_MAX; i++) {
		u8_t cmd_len = strlen(m_gps_at_list[i].string);
    e51c:	481a      	ldr	r0, [pc, #104]	; (e588 <slm_at_gps_parse+0x70>)
    e51e:	f00e fdd3 	bl	1d0c8 <strlen>
    e522:	2300      	movs	r3, #0
    e524:	4918      	ldr	r1, [pc, #96]	; (e588 <slm_at_gps_parse+0x70>)
    e526:	b2c0      	uxtb	r0, r0
    e528:	4283      	cmp	r3, r0
    e52a:	db17      	blt.n	e55c <slm_at_gps_parse+0x44>

		if (slm_at_cmd_cmp(at_cmd, m_gps_at_list[i].string, cmd_len)) {
			ret = at_parser_params_from_str(at_cmd, NULL,
    e52c:	2100      	movs	r1, #0
    e52e:	4a17      	ldr	r2, [pc, #92]	; (e58c <slm_at_gps_parse+0x74>)
    e530:	4620      	mov	r0, r4
    e532:	f00f fde9 	bl	1e108 <at_parser_params_from_str>
						&m_param_list);
			if (ret < 0) {
    e536:	1e01      	subs	r1, r0, #0
    e538:	da1c      	bge.n	e574 <slm_at_gps_parse+0x5c>
				LOG_ERR("Failed to parse AT command %d", ret);
    e53a:	2301      	movs	r3, #1
    e53c:	f04f 0200 	mov.w	r2, #0
    e540:	4813      	ldr	r0, [pc, #76]	; (e590 <slm_at_gps_parse+0x78>)
    e542:	f363 0207 	bfi	r2, r3, #0, #8
    e546:	4b13      	ldr	r3, [pc, #76]	; (e594 <slm_at_gps_parse+0x7c>)
    e548:	1a1b      	subs	r3, r3, r0
    e54a:	08db      	lsrs	r3, r3, #3
    e54c:	4812      	ldr	r0, [pc, #72]	; (e598 <slm_at_gps_parse+0x80>)
    e54e:	f363 128f 	bfi	r2, r3, #6, #10
    e552:	f00e f88b 	bl	1c66c <log_1>
				return -EINVAL;
    e556:	f06f 0015 	mvn.w	r0, #21
			break;
		}
	}

	return ret;
}
    e55a:	bd38      	pop	{r3, r4, r5, pc}
		if (toupper(*(cmd + i)) != *(slm_cmd + i)) {
    e55c:	5ce2      	ldrb	r2, [r4, r3]
    e55e:	f1a2 0561 	sub.w	r5, r2, #97	; 0x61
    e562:	2d19      	cmp	r5, #25
    e564:	f811 5b01 	ldrb.w	r5, [r1], #1
    e568:	bf98      	it	ls
    e56a:	3a20      	subls	r2, #32
    e56c:	4295      	cmp	r5, r2
    e56e:	d108      	bne.n	e582 <slm_at_gps_parse+0x6a>
	for (int i = 0; i < length; i++) {
    e570:	3301      	adds	r3, #1
    e572:	e7d9      	b.n	e528 <slm_at_gps_parse+0x10>
			type = at_parser_cmd_type_get(at_cmd);
    e574:	4620      	mov	r0, r4
    e576:	f00f fdca 	bl	1e10e <at_parser_cmd_type_get>
}
    e57a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			ret = m_gps_at_list[i].handler(type);
    e57e:	f7ff be69 	b.w	e254 <handle_at_gpsrun>
	int ret = -ENOTSUP;
    e582:	f06f 0022 	mvn.w	r0, #34	; 0x22
    e586:	e7e8      	b.n	e55a <slm_at_gps_parse+0x42>
    e588:	0001ff4b 	.word	0x0001ff4b
    e58c:	20020110 	.word	0x20020110
    e590:	0001ee58 	.word	0x0001ee58
    e594:	0001ee90 	.word	0x0001ee90
    e598:	0001f4b1 	.word	0x0001f4b1

0000e59c <slm_at_gps_uninit>:
}

/**@brief API to uninitialize GPS AT commands handler
 */
int slm_at_gps_uninit(void)
{
    e59c:	b510      	push	{r4, lr}
	if (gps_thread_id != NULL) {
    e59e:	4c06      	ldr	r4, [pc, #24]	; (e5b8 <slm_at_gps_uninit+0x1c>)
    e5a0:	6823      	ldr	r3, [r4, #0]
    e5a2:	b133      	cbz	r3, e5b2 <slm_at_gps_uninit+0x16>
		do_gps_stop();
    e5a4:	f7ff fd0c 	bl	dfc0 <do_gps_stop>
		k_thread_abort(gps_thread_id);
    e5a8:	6820      	ldr	r0, [r4, #0]
	z_impl_k_thread_abort(thread);
    e5aa:	f001 fb5b 	bl	fc64 <z_impl_k_thread_abort>
		gps_thread_id = NULL;
    e5ae:	2300      	movs	r3, #0
    e5b0:	6023      	str	r3, [r4, #0]
	}

	return 0;
}
    e5b2:	2000      	movs	r0, #0
    e5b4:	bd10      	pop	{r4, pc}
    e5b6:	bf00      	nop
    e5b8:	200201f8 	.word	0x200201f8

0000e5bc <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    e5bc:	680b      	ldr	r3, [r1, #0]
    e5be:	3301      	adds	r3, #1
    e5c0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    e5c2:	4b01      	ldr	r3, [pc, #4]	; (e5c8 <char_out+0xc>)
    e5c4:	681b      	ldr	r3, [r3, #0]
    e5c6:	4718      	bx	r3
    e5c8:	2002c53c 	.word	0x2002c53c

0000e5cc <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    e5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e5d0:	b085      	sub	sp, #20
    e5d2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    e5d4:	469b      	mov	fp, r3
    e5d6:	2c01      	cmp	r4, #1
    e5d8:	bfb8      	it	lt
    e5da:	2401      	movlt	r4, #1
    e5dc:	2b01      	cmp	r3, #1
    e5de:	bf0c      	ite	eq
    e5e0:	2330      	moveq	r3, #48	; 0x30
    e5e2:	2320      	movne	r3, #32
    e5e4:	4616      	mov	r6, r2
    e5e6:	4682      	mov	sl, r0
    e5e8:	4688      	mov	r8, r1
    e5ea:	2501      	movs	r5, #1
    e5ec:	270a      	movs	r7, #10
    e5ee:	2200      	movs	r2, #0
    e5f0:	f8df 906c 	ldr.w	r9, [pc, #108]	; e660 <_printk_dec_ulong+0x94>
    e5f4:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    e5f6:	fbb6 f3f9 	udiv	r3, r6, r9
    e5fa:	9301      	str	r3, [sp, #4]
    e5fc:	b90a      	cbnz	r2, e602 <_printk_dec_ulong+0x36>
    e5fe:	45b1      	cmp	r9, r6
    e600:	d81c      	bhi.n	e63c <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    e602:	9b01      	ldr	r3, [sp, #4]
    e604:	4641      	mov	r1, r8
    e606:	f103 0030 	add.w	r0, r3, #48	; 0x30
    e60a:	47d0      	blx	sl
			found_largest_digit = 1;
    e60c:	2201      	movs	r2, #1
			digits++;
    e60e:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    e610:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    e612:	3f01      	subs	r7, #1
		remainder %= pos;
    e614:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
    e618:	230a      	movs	r3, #10
	while (pos >= 10) {
    e61a:	2f01      	cmp	r7, #1
		pos /= 10;
    e61c:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    e620:	d1e9      	bne.n	e5f6 <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
    e622:	4641      	mov	r1, r8
    e624:	f106 0030 	add.w	r0, r6, #48	; 0x30
    e628:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    e62a:	f1bb 0f03 	cmp.w	fp, #3
    e62e:	d102      	bne.n	e636 <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
    e630:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
    e632:	2c00      	cmp	r4, #0
    e634:	dc0e      	bgt.n	e654 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
    e636:	b005      	add	sp, #20
    e638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    e63c:	42bc      	cmp	r4, r7
    e63e:	dbe7      	blt.n	e610 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    e640:	f1bb 0f02 	cmp.w	fp, #2
    e644:	d8e4      	bhi.n	e610 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    e646:	4641      	mov	r1, r8
    e648:	9802      	ldr	r0, [sp, #8]
    e64a:	9203      	str	r2, [sp, #12]
			digits++;
    e64c:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    e64e:	47d0      	blx	sl
			digits++;
    e650:	9a03      	ldr	r2, [sp, #12]
    e652:	e7dd      	b.n	e610 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    e654:	4641      	mov	r1, r8
    e656:	2020      	movs	r0, #32
    e658:	47d0      	blx	sl
    e65a:	3c01      	subs	r4, #1
    e65c:	e7e9      	b.n	e632 <_printk_dec_ulong+0x66>
    e65e:	bf00      	nop
    e660:	3b9aca00 	.word	0x3b9aca00

0000e664 <__printk_hook_install>:
	_char_out = fn;
    e664:	4b01      	ldr	r3, [pc, #4]	; (e66c <__printk_hook_install+0x8>)
    e666:	6018      	str	r0, [r3, #0]
}
    e668:	4770      	bx	lr
    e66a:	bf00      	nop
    e66c:	2002c53c 	.word	0x2002c53c

0000e670 <vprintk>:
	struct out_context ctx = { 0 };
    e670:	2300      	movs	r3, #0
{
    e672:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
    e674:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    e676:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    e678:	4803      	ldr	r0, [pc, #12]	; (e688 <vprintk+0x18>)
    e67a:	460b      	mov	r3, r1
    e67c:	a901      	add	r1, sp, #4
    e67e:	f00d fe45 	bl	1c30c <z_vprintk>
}
    e682:	b003      	add	sp, #12
    e684:	f85d fb04 	ldr.w	pc, [sp], #4
    e688:	0000e5bd 	.word	0x0000e5bd

0000e68c <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    e68c:	f04f 0220 	mov.w	r2, #32
    e690:	f3ef 8311 	mrs	r3, BASEPRI
    e694:	f382 8811 	msr	BASEPRI, r2
    e698:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    e69c:	2101      	movs	r1, #1
    e69e:	4a04      	ldr	r2, [pc, #16]	; (e6b0 <nordicsemi_nrf91_init+0x24>)
    e6a0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    e6a4:	f383 8811 	msr	BASEPRI, r3
    e6a8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    e6ac:	2000      	movs	r0, #0
    e6ae:	4770      	bx	lr
    e6b0:	40039000 	.word	0x40039000

0000e6b4 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    e6b4:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    e6b6:	2200      	movs	r2, #0
{
    e6b8:	b087      	sub	sp, #28
		k_timer_init(&log_process_thread_timer,
    e6ba:	490d      	ldr	r1, [pc, #52]	; (e6f0 <enable_logger+0x3c>)
    e6bc:	480d      	ldr	r0, [pc, #52]	; (e6f4 <enable_logger+0x40>)
    e6be:	f010 f91c 	bl	1e8fa <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    e6c2:	2400      	movs	r4, #0
    e6c4:	230e      	movs	r3, #14
    e6c6:	4d0c      	ldr	r5, [pc, #48]	; (e6f8 <enable_logger+0x44>)
    e6c8:	e9cd 4302 	strd	r4, r3, [sp, #8]
    e6cc:	e9cd 4404 	strd	r4, r4, [sp, #16]
    e6d0:	e9cd 4400 	strd	r4, r4, [sp]
    e6d4:	4b09      	ldr	r3, [pc, #36]	; (e6fc <enable_logger+0x48>)
    e6d6:	f44f 7240 	mov.w	r2, #768	; 0x300
    e6da:	4909      	ldr	r1, [pc, #36]	; (e700 <enable_logger+0x4c>)
    e6dc:	4628      	mov	r0, r5
    e6de:	f00d f931 	bl	1b944 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    e6e2:	4908      	ldr	r1, [pc, #32]	; (e704 <enable_logger+0x50>)
    e6e4:	4628      	mov	r0, r5
    e6e6:	f010 f871 	bl	1e7cc <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    e6ea:	4620      	mov	r0, r4
    e6ec:	b007      	add	sp, #28
    e6ee:	bd30      	pop	{r4, r5, pc}
    e6f0:	0000e709 	.word	0x0000e709
    e6f4:	20020210 	.word	0x20020210
    e6f8:	20020258 	.word	0x20020258
    e6fc:	0000e9e9 	.word	0x0000e9e9
    e700:	20026ae8 	.word	0x20026ae8
    e704:	0001ff6d 	.word	0x0001ff6d

0000e708 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    e708:	4801      	ldr	r0, [pc, #4]	; (e710 <log_process_thread_timer_expiry_fn+0x8>)
    e70a:	f00d b85f 	b.w	1b7cc <z_impl_k_sem_give>
    e70e:	bf00      	nop
    e710:	2002c6b8 	.word	0x2002c6b8

0000e714 <log_core_init>:
{
    e714:	b508      	push	{r3, lr}
		log_msg_pool_init();
    e716:	f000 f9df 	bl	ead8 <log_msg_pool_init>
		log_list_init(&list);
    e71a:	4809      	ldr	r0, [pc, #36]	; (e740 <log_core_init+0x2c>)
    e71c:	f00d ff76 	bl	1c60c <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    e720:	2304      	movs	r3, #4
    e722:	2234      	movs	r2, #52	; 0x34
    e724:	4807      	ldr	r0, [pc, #28]	; (e744 <log_core_init+0x30>)
    e726:	4908      	ldr	r1, [pc, #32]	; (e748 <log_core_init+0x34>)
    e728:	f00f fe35 	bl	1e396 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    e72c:	4b07      	ldr	r3, [pc, #28]	; (e74c <log_core_init+0x38>)
    e72e:	4a08      	ldr	r2, [pc, #32]	; (e750 <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
    e730:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    e734:	601a      	str	r2, [r3, #0]
}
    e736:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    e73a:	f000 bbfd 	b.w	ef38 <log_output_timestamp_freq_set>
    e73e:	bf00      	nop
    e740:	20020208 	.word	0x20020208
    e744:	2002023c 	.word	0x2002023c
    e748:	2002ab28 	.word	0x2002ab28
    e74c:	2002c540 	.word	0x2002c540
    e750:	0001c64b 	.word	0x0001c64b

0000e754 <dropped_notify>:
{
    e754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e756:	2500      	movs	r5, #0
    e758:	4b0c      	ldr	r3, [pc, #48]	; (e78c <dropped_notify+0x38>)
    e75a:	e8d3 7fef 	ldaex	r7, [r3]
    e75e:	e8c3 5fe2 	stlex	r2, r5, [r3]
    e762:	2a00      	cmp	r2, #0
    e764:	d1f9      	bne.n	e75a <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    e766:	4c0a      	ldr	r4, [pc, #40]	; (e790 <dropped_notify+0x3c>)
    e768:	4e0a      	ldr	r6, [pc, #40]	; (e794 <dropped_notify+0x40>)
    e76a:	1b36      	subs	r6, r6, r4
    e76c:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    e76e:	42b5      	cmp	r5, r6
    e770:	db00      	blt.n	e774 <dropped_notify+0x20>
}
    e772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    e774:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    e776:	795b      	ldrb	r3, [r3, #5]
    e778:	b12b      	cbz	r3, e786 <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
    e77a:	6823      	ldr	r3, [r4, #0]
    e77c:	68db      	ldr	r3, [r3, #12]
    e77e:	b113      	cbz	r3, e786 <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
    e780:	4639      	mov	r1, r7
    e782:	4620      	mov	r0, r4
    e784:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    e786:	3501      	adds	r5, #1
    e788:	3410      	adds	r4, #16
    e78a:	e7f0      	b.n	e76e <dropped_notify+0x1a>
    e78c:	20020200 	.word	0x20020200
    e790:	0001eee0 	.word	0x0001eee0
    e794:	0001eef0 	.word	0x0001eef0

0000e798 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    e798:	4b22      	ldr	r3, [pc, #136]	; (e824 <z_impl_log_process+0x8c>)
{
    e79a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!backend_attached && !bypass) {
    e79e:	781b      	ldrb	r3, [r3, #0]
{
    e7a0:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    e7a2:	b903      	cbnz	r3, e7a6 <z_impl_log_process+0xe>
    e7a4:	b340      	cbz	r0, e7f8 <z_impl_log_process+0x60>
	__asm__ volatile(
    e7a6:	f04f 0320 	mov.w	r3, #32
    e7aa:	f3ef 8411 	mrs	r4, BASEPRI
    e7ae:	f383 8811 	msr	BASEPRI, r3
    e7b2:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    e7b6:	481c      	ldr	r0, [pc, #112]	; (e828 <z_impl_log_process+0x90>)
    e7b8:	f00d ff38 	bl	1c62c <log_list_head_get>
    e7bc:	4607      	mov	r7, r0
	__asm__ volatile(
    e7be:	f384 8811 	msr	BASEPRI, r4
    e7c2:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    e7c6:	b158      	cbz	r0, e7e0 <z_impl_log_process+0x48>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    e7c8:	4b18      	ldr	r3, [pc, #96]	; (e82c <z_impl_log_process+0x94>)
    e7ca:	e8d3 2fef 	ldaex	r2, [r3]
    e7ce:	3a01      	subs	r2, #1
    e7d0:	e8c3 2fe1 	stlex	r1, r2, [r3]
    e7d4:	2900      	cmp	r1, #0
    e7d6:	d1f8      	bne.n	e7ca <z_impl_log_process+0x32>
	if (!bypass) {
    e7d8:	b18d      	cbz	r5, e7fe <z_impl_log_process+0x66>
	log_msg_put(msg);
    e7da:	4638      	mov	r0, r7
    e7dc:	f00e f813 	bl	1c806 <log_msg_put>
	if (!bypass && dropped_cnt) {
    e7e0:	b925      	cbnz	r5, e7ec <z_impl_log_process+0x54>
    e7e2:	4b13      	ldr	r3, [pc, #76]	; (e830 <z_impl_log_process+0x98>)
    e7e4:	681b      	ldr	r3, [r3, #0]
    e7e6:	b10b      	cbz	r3, e7ec <z_impl_log_process+0x54>
		dropped_notify();
    e7e8:	f7ff ffb4 	bl	e754 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    e7ec:	480e      	ldr	r0, [pc, #56]	; (e828 <z_impl_log_process+0x90>)
    e7ee:	f00d ff1b 	bl	1c628 <log_list_head_peek>
    e7f2:	1c05      	adds	r5, r0, #0
    e7f4:	bf18      	it	ne
    e7f6:	2501      	movne	r5, #1
}
    e7f8:	4628      	mov	r0, r5
    e7fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (int i = 0; i < log_backend_count_get(); i++) {
    e7fe:	46a8      	mov	r8, r5
	return __log_backends_end - __log_backends_start;
    e800:	4c0c      	ldr	r4, [pc, #48]	; (e834 <z_impl_log_process+0x9c>)
    e802:	4e0d      	ldr	r6, [pc, #52]	; (e838 <z_impl_log_process+0xa0>)
    e804:	1b36      	subs	r6, r6, r4
    e806:	1136      	asrs	r6, r6, #4
    e808:	45b0      	cmp	r8, r6
    e80a:	dae6      	bge.n	e7da <z_impl_log_process+0x42>
	return backend->cb->active;
    e80c:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    e80e:	795b      	ldrb	r3, [r3, #5]
    e810:	b123      	cbz	r3, e81c <z_impl_log_process+0x84>
	backend->api->put(backend, msg);
    e812:	6823      	ldr	r3, [r4, #0]
    e814:	4639      	mov	r1, r7
    e816:	681b      	ldr	r3, [r3, #0]
    e818:	4620      	mov	r0, r4
    e81a:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    e81c:	f108 0801 	add.w	r8, r8, #1
    e820:	3410      	adds	r4, #16
    e822:	e7f1      	b.n	e808 <z_impl_log_process+0x70>
    e824:	2002657a 	.word	0x2002657a
    e828:	20020208 	.word	0x20020208
    e82c:	200201fc 	.word	0x200201fc
    e830:	20020200 	.word	0x20020200
    e834:	0001eee0 	.word	0x0001eee0
    e838:	0001eef0 	.word	0x0001eef0

0000e83c <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    e83c:	4b24      	ldr	r3, [pc, #144]	; (e8d0 <msg_finalize+0x94>)
{
    e83e:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    e840:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    e842:	8141      	strh	r1, [r0, #10]
{
    e844:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    e846:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    e848:	4c22      	ldr	r4, [pc, #136]	; (e8d4 <msg_finalize+0x98>)
    e84a:	60e8      	str	r0, [r5, #12]
    e84c:	e8d4 3fef 	ldaex	r3, [r4]
    e850:	3301      	adds	r3, #1
    e852:	e8c4 3fe2 	stlex	r2, r3, [r4]
    e856:	2a00      	cmp	r2, #0
    e858:	d1f8      	bne.n	e84c <msg_finalize+0x10>
	__asm__ volatile(
    e85a:	f04f 0320 	mov.w	r3, #32
    e85e:	f3ef 8611 	mrs	r6, BASEPRI
    e862:	f383 8811 	msr	BASEPRI, r3
    e866:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    e86a:	481b      	ldr	r0, [pc, #108]	; (e8d8 <msg_finalize+0x9c>)
    e86c:	4629      	mov	r1, r5
    e86e:	f00d fed1 	bl	1c614 <log_list_add_tail>
	__asm__ volatile(
    e872:	f386 8811 	msr	BASEPRI, r6
    e876:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    e87a:	4b18      	ldr	r3, [pc, #96]	; (e8dc <msg_finalize+0xa0>)
    e87c:	781a      	ldrb	r2, [r3, #0]
    e87e:	b17a      	cbz	r2, e8a0 <msg_finalize+0x64>
	__asm__ volatile(
    e880:	f04f 0320 	mov.w	r3, #32
    e884:	f3ef 8411 	mrs	r4, BASEPRI
    e888:	f383 8811 	msr	BASEPRI, r3
    e88c:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    e890:	2000      	movs	r0, #0
    e892:	f7ff ff81 	bl	e798 <z_impl_log_process>
	__asm__ volatile(
    e896:	f384 8811 	msr	BASEPRI, r4
    e89a:	f3bf 8f6f 	isb	sy
}
    e89e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    e8a0:	490f      	ldr	r1, [pc, #60]	; (e8e0 <msg_finalize+0xa4>)
    e8a2:	6823      	ldr	r3, [r4, #0]
    e8a4:	6809      	ldr	r1, [r1, #0]
    e8a6:	2900      	cmp	r1, #0
    e8a8:	d0f9      	beq.n	e89e <msg_finalize+0x62>
    e8aa:	2b01      	cmp	r3, #1
    e8ac:	d106      	bne.n	e8bc <msg_finalize+0x80>
}
    e8ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_timer_start(timer, duration, period);
    e8b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e8b6:	480b      	ldr	r0, [pc, #44]	; (e8e4 <msg_finalize+0xa8>)
    e8b8:	f00d ba5e 	b.w	1bd78 <z_impl_k_timer_start>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    e8bc:	2b0a      	cmp	r3, #10
    e8be:	d1ee      	bne.n	e89e <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
    e8c0:	4808      	ldr	r0, [pc, #32]	; (e8e4 <msg_finalize+0xa8>)
    e8c2:	f010 f826 	bl	1e912 <z_impl_k_timer_stop>
}
    e8c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_sem_give(sem);
    e8ca:	4807      	ldr	r0, [pc, #28]	; (e8e8 <msg_finalize+0xac>)
    e8cc:	f00c bf7e 	b.w	1b7cc <z_impl_k_sem_give>
    e8d0:	2002c540 	.word	0x2002c540
    e8d4:	200201fc 	.word	0x200201fc
    e8d8:	20020208 	.word	0x20020208
    e8dc:	2002657b 	.word	0x2002657b
    e8e0:	20020308 	.word	0x20020308
    e8e4:	20020210 	.word	0x20020210
    e8e8:	2002c6b8 	.word	0x2002c6b8

0000e8ec <log_dropped>:
    e8ec:	4b04      	ldr	r3, [pc, #16]	; (e900 <log_dropped+0x14>)
    e8ee:	e8d3 2fef 	ldaex	r2, [r3]
    e8f2:	3201      	adds	r2, #1
    e8f4:	e8c3 2fe1 	stlex	r1, r2, [r3]
    e8f8:	2900      	cmp	r1, #0
    e8fa:	d1f8      	bne.n	e8ee <log_dropped+0x2>
}
    e8fc:	4770      	bx	lr
    e8fe:	bf00      	nop
    e900:	20020200 	.word	0x20020200

0000e904 <log_source_name_get>:
    e904:	4a04      	ldr	r2, [pc, #16]	; (e918 <log_source_name_get+0x14>)
    e906:	4b05      	ldr	r3, [pc, #20]	; (e91c <log_source_name_get+0x18>)
    e908:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    e90a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    e90e:	bf34      	ite	cc
    e910:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    e914:	2000      	movcs	r0, #0
}
    e916:	4770      	bx	lr
    e918:	0001ee58 	.word	0x0001ee58
    e91c:	0001eee0 	.word	0x0001eee0

0000e920 <log_backend_enable>:
	id += backend - log_backend_get(0);
    e920:	4b09      	ldr	r3, [pc, #36]	; (e948 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    e922:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    e924:	1ac3      	subs	r3, r0, r3
    e926:	111b      	asrs	r3, r3, #4
    e928:	3301      	adds	r3, #1
{
    e92a:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    e92c:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
    e92e:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
    e930:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    e932:	4c06      	ldr	r4, [pc, #24]	; (e94c <log_backend_enable+0x2c>)
    e934:	715a      	strb	r2, [r3, #5]
    e936:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    e938:	6019      	str	r1, [r3, #0]
    e93a:	b912      	cbnz	r2, e942 <log_backend_enable+0x22>
    e93c:	4804      	ldr	r0, [pc, #16]	; (e950 <log_backend_enable+0x30>)
    e93e:	f00c ff45 	bl	1b7cc <z_impl_k_sem_give>
	backend_attached = true;
    e942:	2301      	movs	r3, #1
    e944:	7023      	strb	r3, [r4, #0]
}
    e946:	bd10      	pop	{r4, pc}
    e948:	0001eee0 	.word	0x0001eee0
    e94c:	2002657a 	.word	0x2002657a
    e950:	2002c6b8 	.word	0x2002c6b8

0000e954 <log_init>:
{
    e954:	b570      	push	{r4, r5, r6, lr}
    e956:	4b0f      	ldr	r3, [pc, #60]	; (e994 <log_init+0x40>)
    e958:	e8d3 5fef 	ldaex	r5, [r3]
    e95c:	1c6a      	adds	r2, r5, #1
    e95e:	e8c3 2fe1 	stlex	r1, r2, [r3]
    e962:	2900      	cmp	r1, #0
    e964:	d1f8      	bne.n	e958 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    e966:	b92d      	cbnz	r5, e974 <log_init+0x20>
	return __log_backends_end - __log_backends_start;
    e968:	4c0b      	ldr	r4, [pc, #44]	; (e998 <log_init+0x44>)
    e96a:	4e0c      	ldr	r6, [pc, #48]	; (e99c <log_init+0x48>)
    e96c:	1b36      	subs	r6, r6, r4
    e96e:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    e970:	42b5      	cmp	r5, r6
    e972:	db00      	blt.n	e976 <log_init+0x22>
}
    e974:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    e976:	7b23      	ldrb	r3, [r4, #12]
    e978:	b143      	cbz	r3, e98c <log_init+0x38>
			if (backend->api->init != NULL) {
    e97a:	6823      	ldr	r3, [r4, #0]
    e97c:	695b      	ldr	r3, [r3, #20]
    e97e:	b103      	cbz	r3, e982 <log_init+0x2e>
				backend->api->init();
    e980:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    e982:	2204      	movs	r2, #4
    e984:	2100      	movs	r1, #0
    e986:	4620      	mov	r0, r4
    e988:	f7ff ffca 	bl	e920 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    e98c:	3501      	adds	r5, #1
    e98e:	3410      	adds	r4, #16
    e990:	e7ee      	b.n	e970 <log_init+0x1c>
    e992:	bf00      	nop
    e994:	20020204 	.word	0x20020204
    e998:	0001eee0 	.word	0x0001eee0
    e99c:	0001eef0 	.word	0x0001eef0

0000e9a0 <z_impl_log_panic>:
{
    e9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    e9a2:	4f0e      	ldr	r7, [pc, #56]	; (e9dc <z_impl_log_panic+0x3c>)
    e9a4:	783d      	ldrb	r5, [r7, #0]
    e9a6:	b975      	cbnz	r5, e9c6 <z_impl_log_panic+0x26>
	log_init();
    e9a8:	f7ff ffd4 	bl	e954 <log_init>
    e9ac:	4c0c      	ldr	r4, [pc, #48]	; (e9e0 <z_impl_log_panic+0x40>)
    e9ae:	4e0d      	ldr	r6, [pc, #52]	; (e9e4 <z_impl_log_panic+0x44>)
    e9b0:	1b36      	subs	r6, r6, r4
    e9b2:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    e9b4:	42b5      	cmp	r5, r6
    e9b6:	db07      	blt.n	e9c8 <z_impl_log_panic+0x28>
    e9b8:	2000      	movs	r0, #0
    e9ba:	f7ff feed 	bl	e798 <z_impl_log_process>
		while (log_process(false) == true) {
    e9be:	2800      	cmp	r0, #0
    e9c0:	d1fa      	bne.n	e9b8 <z_impl_log_panic+0x18>
	panic_mode = true;
    e9c2:	2301      	movs	r3, #1
    e9c4:	703b      	strb	r3, [r7, #0]
}
    e9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    e9c8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    e9ca:	795b      	ldrb	r3, [r3, #5]
    e9cc:	b11b      	cbz	r3, e9d6 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    e9ce:	6823      	ldr	r3, [r4, #0]
    e9d0:	4620      	mov	r0, r4
    e9d2:	691b      	ldr	r3, [r3, #16]
    e9d4:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    e9d6:	3501      	adds	r5, #1
    e9d8:	3410      	adds	r4, #16
    e9da:	e7eb      	b.n	e9b4 <z_impl_log_panic+0x14>
    e9dc:	2002657b 	.word	0x2002657b
    e9e0:	0001eee0 	.word	0x0001eee0
    e9e4:	0001eef0 	.word	0x0001eef0

0000e9e8 <log_process_thread_func>:
{
    e9e8:	b508      	push	{r3, lr}
	log_init();
    e9ea:	f7ff ffb3 	bl	e954 <log_init>
	return z_impl_k_current_get();
    e9ee:	f00c fee7 	bl	1b7c0 <z_impl_k_current_get>
	proc_tid = process_tid;
    e9f2:	4b0b      	ldr	r3, [pc, #44]	; (ea20 <log_process_thread_func+0x38>)
    e9f4:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    e9f6:	b130      	cbz	r0, ea06 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    e9f8:	4b0a      	ldr	r3, [pc, #40]	; (ea24 <log_process_thread_func+0x3c>)
	    process_tid &&
    e9fa:	681b      	ldr	r3, [r3, #0]
    e9fc:	2b09      	cmp	r3, #9
    e9fe:	dd02      	ble.n	ea06 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    ea00:	4809      	ldr	r0, [pc, #36]	; (ea28 <log_process_thread_func+0x40>)
    ea02:	f00c fee3 	bl	1b7cc <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    ea06:	4c08      	ldr	r4, [pc, #32]	; (ea28 <log_process_thread_func+0x40>)
    ea08:	2000      	movs	r0, #0
    ea0a:	f7ff fec5 	bl	e798 <z_impl_log_process>
		if (log_process(false) == false) {
    ea0e:	2800      	cmp	r0, #0
    ea10:	d1fa      	bne.n	ea08 <log_process_thread_func+0x20>
    ea12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ea16:	4620      	mov	r0, r4
    ea18:	f00c ff04 	bl	1b824 <z_impl_k_sem_take>
    ea1c:	e7f4      	b.n	ea08 <log_process_thread_func+0x20>
    ea1e:	bf00      	nop
    ea20:	20020308 	.word	0x20020308
    ea24:	200201fc 	.word	0x200201fc
    ea28:	2002c6b8 	.word	0x2002c6b8

0000ea2c <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    ea2c:	4b14      	ldr	r3, [pc, #80]	; (ea80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x20>)
{
    ea2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
    ea30:	4298      	cmp	r0, r3
{
    ea32:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    ea34:	d302      	bcc.n	ea3c <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    ea36:	4b13      	ldr	r3, [pc, #76]	; (ea84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x24>)
    ea38:	4298      	cmp	r0, r3
    ea3a:	d31b      	bcc.n	ea74 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    ea3c:	2200      	movs	r2, #0
    ea3e:	a901      	add	r1, sp, #4
    ea40:	4811      	ldr	r0, [pc, #68]	; (ea88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x28>)
    ea42:	f00c f97f 	bl	1ad44 <k_mem_slab_alloc>
	if (err != 0) {
    ea46:	4605      	mov	r5, r0
    ea48:	b9b8      	cbnz	r0, ea7a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ea4a:	2201      	movs	r2, #1
    ea4c:	9b01      	ldr	r3, [sp, #4]
    ea4e:	e8d3 1fef 	ldaex	r1, [r3]
    ea52:	e8c3 2fe0 	stlex	r0, r2, [r3]
    ea56:	2800      	cmp	r0, #0
    ea58:	d1f9      	bne.n	ea4e <log_strdup+0x22>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    ea5a:	9801      	ldr	r0, [sp, #4]
    ea5c:	4621      	mov	r1, r4
    ea5e:	222d      	movs	r2, #45	; 0x2d
    ea60:	3004      	adds	r0, #4
    ea62:	f00e fb03 	bl	1d06c <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    ea66:	237e      	movs	r3, #126	; 0x7e
    ea68:	9c01      	ldr	r4, [sp, #4]
    ea6a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    ea6e:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	return dup->buf;
    ea72:	3404      	adds	r4, #4
}
    ea74:	4620      	mov	r0, r4
    ea76:	b003      	add	sp, #12
    ea78:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    ea7a:	4c04      	ldr	r4, [pc, #16]	; (ea8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2c>)
    ea7c:	e7fa      	b.n	ea74 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14>
    ea7e:	bf00      	nop
    ea80:	0001eb6c 	.word	0x0001eb6c
    ea84:	000209d0 	.word	0x000209d0
    ea88:	2002023c 	.word	0x2002023c
    ea8c:	0001ff75 	.word	0x0001ff75

0000ea90 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
    ea90:	b148      	cbz	r0, eaa6 <log_is_strdup+0x16>
    ea92:	4b05      	ldr	r3, [pc, #20]	; (eaa8 <log_is_strdup+0x18>)
    ea94:	4298      	cmp	r0, r3
    ea96:	d305      	bcc.n	eaa4 <log_is_strdup+0x14>
    ea98:	33d0      	adds	r3, #208	; 0xd0
    ea9a:	4298      	cmp	r0, r3
    ea9c:	bf2c      	ite	cs
    ea9e:	2000      	movcs	r0, #0
    eaa0:	2001      	movcc	r0, #1
    eaa2:	4770      	bx	lr
    eaa4:	2000      	movs	r0, #0
}
    eaa6:	4770      	bx	lr
    eaa8:	2002ab28 	.word	0x2002ab28

0000eaac <log_free>:
{
    eaac:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    eaae:	3804      	subs	r0, #4
    eab0:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    eab2:	e8d0 3fef 	ldaex	r3, [r0]
    eab6:	1e5a      	subs	r2, r3, #1
    eab8:	e8c0 2fe1 	stlex	r1, r2, [r0]
    eabc:	2900      	cmp	r1, #0
    eabe:	d1f8      	bne.n	eab2 <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
    eac0:	2b01      	cmp	r3, #1
    eac2:	d103      	bne.n	eacc <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    eac4:	a901      	add	r1, sp, #4
    eac6:	4803      	ldr	r0, [pc, #12]	; (ead4 <log_free+0x28>)
    eac8:	f00c f968 	bl	1ad9c <k_mem_slab_free>
}
    eacc:	b003      	add	sp, #12
    eace:	f85d fb04 	ldr.w	pc, [sp], #4
    ead2:	bf00      	nop
    ead4:	2002023c 	.word	0x2002023c

0000ead8 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    ead8:	2320      	movs	r3, #32
    eada:	4902      	ldr	r1, [pc, #8]	; (eae4 <log_msg_pool_init+0xc>)
    eadc:	461a      	mov	r2, r3
    eade:	4802      	ldr	r0, [pc, #8]	; (eae8 <log_msg_pool_init+0x10>)
    eae0:	f00f bc59 	b.w	1e396 <k_mem_slab_init>
    eae4:	2002abf8 	.word	0x2002abf8
    eae8:	2002030c 	.word	0x2002030c

0000eaec <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
    eaec:	2300      	movs	r3, #0
{
    eaee:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    eaf0:	4d09      	ldr	r5, [pc, #36]	; (eb18 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    eaf2:	9301      	str	r3, [sp, #4]
    eaf4:	2001      	movs	r0, #1
    eaf6:	f7ff fe4f 	bl	e798 <z_impl_log_process>
    eafa:	4604      	mov	r4, r0
			log_dropped();
    eafc:	f7ff fef6 	bl	e8ec <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    eb00:	2200      	movs	r2, #0
    eb02:	a901      	add	r1, sp, #4
    eb04:	4628      	mov	r0, r5
    eb06:	f00c f91d 	bl	1ad44 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    eb0a:	b108      	cbz	r0, eb10 <log_msg_no_space_handle+0x24>
    eb0c:	2c00      	cmp	r4, #0
    eb0e:	d1f1      	bne.n	eaf4 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    eb10:	9801      	ldr	r0, [sp, #4]
    eb12:	b003      	add	sp, #12
    eb14:	bd30      	pop	{r4, r5, pc}
    eb16:	bf00      	nop
    eb18:	2002030c 	.word	0x2002030c

0000eb1c <log_msg_chunk_alloc>:
{
    eb1c:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    eb1e:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    eb20:	a901      	add	r1, sp, #4
    eb22:	4806      	ldr	r0, [pc, #24]	; (eb3c <log_msg_chunk_alloc+0x20>)
	union log_msg_chunk *msg = NULL;
    eb24:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    eb26:	f00c f90d 	bl	1ad44 <k_mem_slab_alloc>
	if (err != 0) {
    eb2a:	b110      	cbz	r0, eb32 <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
    eb2c:	f7ff ffde 	bl	eaec <log_msg_no_space_handle>
    eb30:	9001      	str	r0, [sp, #4]
}
    eb32:	9801      	ldr	r0, [sp, #4]
    eb34:	b003      	add	sp, #12
    eb36:	f85d fb04 	ldr.w	pc, [sp], #4
    eb3a:	bf00      	nop
    eb3c:	2002030c 	.word	0x2002030c

0000eb40 <msg_free>:
{
    eb40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    eb42:	7a04      	ldrb	r4, [r0, #8]
	u32_t nargs = msg->hdr.params.std.nargs;
    eb44:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
    eb46:	f014 0401 	ands.w	r4, r4, #1
{
    eb4a:	9001      	str	r0, [sp, #4]
	u32_t nargs = msg->hdr.params.std.nargs;
    eb4c:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    eb50:	d00e      	beq.n	eb70 <msg_free+0x30>
	if (msg->hdr.params.generic.ext == 1) {
    eb52:	9b01      	ldr	r3, [sp, #4]
    eb54:	7a1a      	ldrb	r2, [r3, #8]
    eb56:	0792      	lsls	r2, r2, #30
    eb58:	d504      	bpl.n	eb64 <msg_free+0x24>
		cont_free(msg->payload.ext.next);
    eb5a:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    eb5c:	4c10      	ldr	r4, [pc, #64]	; (eba0 <msg_free+0x60>)
    eb5e:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    eb60:	9b03      	ldr	r3, [sp, #12]
    eb62:	b9b3      	cbnz	r3, eb92 <msg_free+0x52>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    eb64:	a901      	add	r1, sp, #4
    eb66:	480e      	ldr	r0, [pc, #56]	; (eba0 <msg_free+0x60>)
    eb68:	f00c f918 	bl	1ad9c <k_mem_slab_free>
}
    eb6c:	b004      	add	sp, #16
    eb6e:	bd70      	pop	{r4, r5, r6, pc}
	if (log_msg_is_std(msg) && nargs) {
    eb70:	2d00      	cmp	r5, #0
    eb72:	d0ee      	beq.n	eb52 <msg_free+0x12>
		for (i = 0; i < nargs; i++) {
    eb74:	42a5      	cmp	r5, r4
    eb76:	9801      	ldr	r0, [sp, #4]
    eb78:	d9eb      	bls.n	eb52 <msg_free+0x12>
			void *buf = (void *)log_msg_arg_get(msg, i);
    eb7a:	4621      	mov	r1, r4
    eb7c:	f00d fe26 	bl	1c7cc <log_msg_arg_get>
    eb80:	4606      	mov	r6, r0
			if (log_is_strdup(buf)) {
    eb82:	f7ff ff85 	bl	ea90 <log_is_strdup>
    eb86:	b110      	cbz	r0, eb8e <msg_free+0x4e>
				log_free(buf);
    eb88:	4630      	mov	r0, r6
    eb8a:	f7ff ff8f 	bl	eaac <log_free>
		for (i = 0; i < nargs; i++) {
    eb8e:	3401      	adds	r4, #1
    eb90:	e7f0      	b.n	eb74 <msg_free+0x34>
		next = cont->next;
    eb92:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    eb94:	a903      	add	r1, sp, #12
    eb96:	4620      	mov	r0, r4
    eb98:	f00c f900 	bl	1ad9c <k_mem_slab_free>
		cont = next;
    eb9c:	9503      	str	r5, [sp, #12]
    eb9e:	e7df      	b.n	eb60 <msg_free+0x20>
    eba0:	2002030c 	.word	0x2002030c

0000eba4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    eba4:	b40e      	push	{r1, r2, r3}
    eba6:	b503      	push	{r0, r1, lr}
    eba8:	ab03      	add	r3, sp, #12
    ebaa:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    ebae:	4601      	mov	r1, r0
    ebb0:	4804      	ldr	r0, [pc, #16]	; (ebc4 <print_formatted+0x20>)
	va_start(args, fmt);
    ebb2:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    ebb4:	f00d fbaa 	bl	1c30c <z_vprintk>
#endif
	va_end(args);

	return length;
}
    ebb8:	2000      	movs	r0, #0
    ebba:	b002      	add	sp, #8
    ebbc:	f85d eb04 	ldr.w	lr, [sp], #4
    ebc0:	b003      	add	sp, #12
    ebc2:	4770      	bx	lr
    ebc4:	0001cbcd 	.word	0x0001cbcd

0000ebc8 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    ebc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    ebcc:	f011 0402 	ands.w	r4, r1, #2
{
    ebd0:	b085      	sub	sp, #20
    ebd2:	4606      	mov	r6, r0
    ebd4:	4690      	mov	r8, r2
    ebd6:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    ebda:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    ebde:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    ebe2:	d007      	beq.n	ebf4 <prefix_print+0x2c>
	if (!format) {
    ebe4:	f011 0f44 	tst.w	r1, #68	; 0x44
    ebe8:	d137      	bne.n	ec5a <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    ebea:	461a      	mov	r2, r3
    ebec:	4932      	ldr	r1, [pc, #200]	; (ecb8 <prefix_print+0xf0>)
    ebee:	f7ff ffd9 	bl	eba4 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    ebf2:	4604      	mov	r4, r0
	if (color) {
    ebf4:	f1b9 0f00 	cmp.w	r9, #0
    ebf8:	d00a      	beq.n	ec10 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
    ebfa:	4b30      	ldr	r3, [pc, #192]	; (ecbc <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    ebfc:	4930      	ldr	r1, [pc, #192]	; (ecc0 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
    ebfe:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    ec02:	4b30      	ldr	r3, [pc, #192]	; (ecc4 <prefix_print+0xfc>)
    ec04:	4630      	mov	r0, r6
    ec06:	2a00      	cmp	r2, #0
    ec08:	bf08      	it	eq
    ec0a:	461a      	moveq	r2, r3
    ec0c:	f7ff ffca 	bl	eba4 <print_formatted>
	if (level_on) {
    ec10:	b13d      	cbz	r5, ec22 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    ec12:	4b2d      	ldr	r3, [pc, #180]	; (ecc8 <prefix_print+0x100>)
    ec14:	492d      	ldr	r1, [pc, #180]	; (eccc <prefix_print+0x104>)
    ec16:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    ec1a:	4630      	mov	r0, r6
    ec1c:	f7ff ffc2 	bl	eba4 <print_formatted>
    ec20:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    ec22:	f1b8 0f00 	cmp.w	r8, #0
    ec26:	d044      	beq.n	ecb2 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    ec28:	2301      	movs	r3, #1
    ec2a:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    ec2e:	4b28      	ldr	r3, [pc, #160]	; (ecd0 <prefix_print+0x108>)
    ec30:	f017 0f10 	tst.w	r7, #16
    ec34:	4f27      	ldr	r7, [pc, #156]	; (ecd4 <prefix_print+0x10c>)
    ec36:	bf18      	it	ne
    ec38:	461f      	movne	r7, r3
    ec3a:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    ec3e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    ec42:	f7ff fe5f 	bl	e904 <log_source_name_get>
    ec46:	4639      	mov	r1, r7
    ec48:	4602      	mov	r2, r0
    ec4a:	4630      	mov	r0, r6
    ec4c:	f7ff ffaa 	bl	eba4 <print_formatted>
    ec50:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    ec52:	4420      	add	r0, r4
    ec54:	b005      	add	sp, #20
    ec56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    ec5a:	4a1f      	ldr	r2, [pc, #124]	; (ecd8 <prefix_print+0x110>)
    ec5c:	6811      	ldr	r1, [r2, #0]
    ec5e:	b331      	cbz	r1, ecae <prefix_print+0xe6>
		timestamp /= timestamp_div;
    ec60:	4a1e      	ldr	r2, [pc, #120]	; (ecdc <prefix_print+0x114>)
    ec62:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    ec66:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
    ec68:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    ec6c:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
    ec70:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    ec74:	fbb4 f2fe 	udiv	r2, r4, lr
    ec78:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    ec7c:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    ec80:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ec84:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    ec88:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ec8c:	fb01 441b 	mls	r4, r1, fp, r4
    ec90:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    ec94:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ec98:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    ec9c:	e9cd b101 	strd	fp, r1, [sp, #4]
    eca0:	fb0a e113 	mls	r1, sl, r3, lr
    eca4:	9100      	str	r1, [sp, #0]
    eca6:	490e      	ldr	r1, [pc, #56]	; (ece0 <prefix_print+0x118>)
    eca8:	f7ff ff7c 	bl	eba4 <print_formatted>
    ecac:	e7a1      	b.n	ebf2 <prefix_print+0x2a>
		length = 0;
    ecae:	4608      	mov	r0, r1
    ecb0:	e79f      	b.n	ebf2 <prefix_print+0x2a>
	total += print_formatted(log_output,
    ecb2:	4f08      	ldr	r7, [pc, #32]	; (ecd4 <prefix_print+0x10c>)
    ecb4:	e7c1      	b.n	ec3a <prefix_print+0x72>
    ecb6:	bf00      	nop
    ecb8:	0001ffda 	.word	0x0001ffda
    ecbc:	0001ef8c 	.word	0x0001ef8c
    ecc0:	000207ed 	.word	0x000207ed
    ecc4:	0001ffcc 	.word	0x0001ffcc
    ecc8:	0001efa0 	.word	0x0001efa0
    eccc:	0001ffff 	.word	0x0001ffff
    ecd0:	0001ffd6 	.word	0x0001ffd6
    ecd4:	0001ffd1 	.word	0x0001ffd1
    ecd8:	20020328 	.word	0x20020328
    ecdc:	2002032c 	.word	0x2002032c
    ece0:	0001ffe3 	.word	0x0001ffe3

0000ece4 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    ece4:	b538      	push	{r3, r4, r5, lr}
    ece6:	460c      	mov	r4, r1
	if (color) {
    ece8:	07e1      	lsls	r1, r4, #31
{
    ecea:	4605      	mov	r5, r0
	if (color) {
    ecec:	d503      	bpl.n	ecf6 <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    ecee:	4a08      	ldr	r2, [pc, #32]	; (ed10 <postfix_print+0x2c>)
    ecf0:	4908      	ldr	r1, [pc, #32]	; (ed14 <postfix_print+0x30>)
    ecf2:	f7ff ff57 	bl	eba4 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    ecf6:	06e2      	lsls	r2, r4, #27
    ecf8:	d408      	bmi.n	ed0c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    ecfa:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    ecfc:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    ecfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    ed02:	bf4c      	ite	mi
    ed04:	4904      	ldrmi	r1, [pc, #16]	; (ed18 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    ed06:	4905      	ldrpl	r1, [pc, #20]	; (ed1c <postfix_print+0x38>)
    ed08:	f7ff bf4c 	b.w	eba4 <print_formatted>
}
    ed0c:	bd38      	pop	{r3, r4, r5, pc}
    ed0e:	bf00      	nop
    ed10:	0001ffcc 	.word	0x0001ffcc
    ed14:	000207ed 	.word	0x000207ed
    ed18:	0001f89c 	.word	0x0001f89c
    ed1c:	0001f89b 	.word	0x0001f89b

0000ed20 <hexdump_line_print>:
{
    ed20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ed24:	4698      	mov	r8, r3
    ed26:	9b08      	ldr	r3, [sp, #32]
    ed28:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    ed2a:	06dd      	lsls	r5, r3, #27
{
    ed2c:	460e      	mov	r6, r1
    ed2e:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    ed30:	d405      	bmi.n	ed3e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    ed32:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    ed34:	bf4c      	ite	mi
    ed36:	4929      	ldrmi	r1, [pc, #164]	; (eddc <hexdump_line_print+0xbc>)
		print_formatted(ctx, "\r\n");
    ed38:	4929      	ldrpl	r1, [pc, #164]	; (ede0 <hexdump_line_print+0xc0>)
    ed3a:	f7ff ff33 	bl	eba4 <print_formatted>
{
    ed3e:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
    ed40:	f8df 90a4 	ldr.w	r9, [pc, #164]	; ede8 <hexdump_line_print+0xc8>
	for (int i = 0; i < prefix_offset; i++) {
    ed44:	4545      	cmp	r5, r8
    ed46:	db2a      	blt.n	ed9e <hexdump_line_print+0x7e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ed48:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    ed4a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; edec <hexdump_line_print+0xcc>
			print_formatted(log_output, "%02x ", data[i]);
    ed4e:	f8df 90a0 	ldr.w	r9, [pc, #160]	; edf0 <hexdump_line_print+0xd0>
			print_formatted(log_output, " ");
    ed52:	f8df a094 	ldr.w	sl, [pc, #148]	; ede8 <hexdump_line_print+0xc8>
		if (i < length) {
    ed56:	42bd      	cmp	r5, r7
    ed58:	d22e      	bcs.n	edb8 <hexdump_line_print+0x98>
			print_formatted(log_output, "%02x ", data[i]);
    ed5a:	5d72      	ldrb	r2, [r6, r5]
    ed5c:	4649      	mov	r1, r9
    ed5e:	4620      	mov	r0, r4
    ed60:	f7ff ff20 	bl	eba4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ed64:	3501      	adds	r5, #1
    ed66:	2d10      	cmp	r5, #16
    ed68:	d11f      	bne.n	edaa <hexdump_line_print+0x8a>
	print_formatted(log_output, "|");
    ed6a:	491e      	ldr	r1, [pc, #120]	; (ede4 <hexdump_line_print+0xc4>)
    ed6c:	4620      	mov	r0, r4
    ed6e:	f7ff ff19 	bl	eba4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ed72:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    ed74:	f8df 8070 	ldr.w	r8, [pc, #112]	; ede8 <hexdump_line_print+0xc8>
			print_formatted(log_output, "%c",
    ed78:	f8df 9078 	ldr.w	r9, [pc, #120]	; edf4 <hexdump_line_print+0xd4>
		if (i < length) {
    ed7c:	42af      	cmp	r7, r5
    ed7e:	d927      	bls.n	edd0 <hexdump_line_print+0xb0>
			      isprint((int)c) ? c : '.');
    ed80:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    ed82:	4649      	mov	r1, r9
	return (int)((((unsigned)c) >= ' ') &&
    ed84:	f1a2 0320 	sub.w	r3, r2, #32
    ed88:	2b5f      	cmp	r3, #95	; 0x5f
    ed8a:	bf28      	it	cs
    ed8c:	222e      	movcs	r2, #46	; 0x2e
    ed8e:	4620      	mov	r0, r4
    ed90:	f7ff ff08 	bl	eba4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ed94:	3501      	adds	r5, #1
    ed96:	2d10      	cmp	r5, #16
    ed98:	d113      	bne.n	edc2 <hexdump_line_print+0xa2>
}
    ed9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    ed9e:	4649      	mov	r1, r9
    eda0:	4620      	mov	r0, r4
    eda2:	f7ff feff 	bl	eba4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    eda6:	3501      	adds	r5, #1
    eda8:	e7cc      	b.n	ed44 <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
    edaa:	076a      	lsls	r2, r5, #29
    edac:	d1d3      	bne.n	ed56 <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
    edae:	4651      	mov	r1, sl
    edb0:	4620      	mov	r0, r4
    edb2:	f7ff fef7 	bl	eba4 <print_formatted>
    edb6:	e7ce      	b.n	ed56 <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
    edb8:	4641      	mov	r1, r8
    edba:	4620      	mov	r0, r4
    edbc:	f7ff fef2 	bl	eba4 <print_formatted>
    edc0:	e7d0      	b.n	ed64 <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
    edc2:	076b      	lsls	r3, r5, #29
    edc4:	d1da      	bne.n	ed7c <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    edc6:	4641      	mov	r1, r8
    edc8:	4620      	mov	r0, r4
    edca:	f7ff feeb 	bl	eba4 <print_formatted>
    edce:	e7d5      	b.n	ed7c <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    edd0:	4641      	mov	r1, r8
    edd2:	4620      	mov	r0, r4
    edd4:	f7ff fee6 	bl	eba4 <print_formatted>
    edd8:	e7dc      	b.n	ed94 <hexdump_line_print+0x74>
    edda:	bf00      	nop
    eddc:	0001f89c 	.word	0x0001f89c
    ede0:	0001f89b 	.word	0x0001f89b
    ede4:	0001ff9d 	.word	0x0001ff9d
    ede8:	0001ff9b 	.word	0x0001ff9b
    edec:	0001ff99 	.word	0x0001ff99
    edf0:	0001ff93 	.word	0x0001ff93
    edf4:	0001ff9f 	.word	0x0001ff9f

0000edf8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    edf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    edfc:	7a8b      	ldrb	r3, [r1, #10]
    edfe:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    ee00:	f013 0407 	ands.w	r4, r3, #7
{
    ee04:	b08a      	sub	sp, #40	; 0x28
    ee06:	4605      	mov	r5, r0
    ee08:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    ee0a:	7a0a      	ldrb	r2, [r1, #8]
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    ee0c:	d01c      	beq.n	ee48 <log_output_msg_process+0x50>
    ee0e:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
    ee10:	8949      	ldrh	r1, [r1, #10]
    ee12:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    ee16:	0989      	lsrs	r1, r1, #6
    ee18:	9102      	str	r1, [sp, #8]
    ee1a:	e9cd 4300 	strd	r4, r3, [sp]
    ee1e:	f002 0201 	and.w	r2, r2, #1
    ee22:	68f3      	ldr	r3, [r6, #12]
    ee24:	4639      	mov	r1, r7
    ee26:	f7ff fecf 	bl	ebc8 <prefix_print>
    ee2a:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    ee2c:	7a33      	ldrb	r3, [r6, #8]
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    ee2e:	07da      	lsls	r2, r3, #31
    ee30:	d40c      	bmi.n	ee4c <log_output_msg_process+0x54>
		std_print(msg, log_output);
    ee32:	4629      	mov	r1, r5
    ee34:	4630      	mov	r0, r6
    ee36:	f00d fd5f 	bl	1c8f8 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    ee3a:	b34c      	cbz	r4, ee90 <log_output_msg_process+0x98>
		postfix_print(log_output, flags, level);
    ee3c:	4622      	mov	r2, r4
    ee3e:	4639      	mov	r1, r7
    ee40:	4628      	mov	r0, r5
    ee42:	f7ff ff4f 	bl	ece4 <postfix_print>
    ee46:	e023      	b.n	ee90 <log_output_msg_process+0x98>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    ee48:	46a1      	mov	r9, r4
    ee4a:	e7ef      	b.n	ee2c <log_output_msg_process+0x34>
	} else if (raw_string) {
    ee4c:	bb34      	cbnz	r4, ee9c <log_output_msg_process+0xa4>
	size_t offset = 0;
    ee4e:	4627      	mov	r7, r4
		length = log_output->size;
    ee50:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    ee52:	aa06      	add	r2, sp, #24
		length = log_output->size;
    ee54:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    ee56:	68a9      	ldr	r1, [r5, #8]
    ee58:	463b      	mov	r3, r7
    ee5a:	4630      	mov	r0, r6
    ee5c:	f00d fd38 	bl	1c8d0 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    ee60:	9a06      	ldr	r2, [sp, #24]
    ee62:	686b      	ldr	r3, [r5, #4]
    ee64:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    ee66:	b13a      	cbz	r2, ee78 <log_output_msg_process+0x80>
			eol = (log_output->buf[length - 1] == '\n');
    ee68:	68ab      	ldr	r3, [r5, #8]
    ee6a:	4413      	add	r3, r2
    ee6c:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    ee70:	f1a4 030a 	sub.w	r3, r4, #10
    ee74:	425c      	negs	r4, r3
    ee76:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    ee78:	4628      	mov	r0, r5
    ee7a:	f00d fe9a 	bl	1cbb2 <log_output_flush>
		offset += length;
    ee7e:	9b06      	ldr	r3, [sp, #24]
    ee80:	441f      	add	r7, r3
	} while (length > 0);
    ee82:	2b00      	cmp	r3, #0
    ee84:	d1e4      	bne.n	ee50 <log_output_msg_process+0x58>
	if (eol) {
    ee86:	b11c      	cbz	r4, ee90 <log_output_msg_process+0x98>
		print_formatted(log_output, "\r");
    ee88:	4914      	ldr	r1, [pc, #80]	; (eedc <log_output_msg_process+0xe4>)
    ee8a:	4628      	mov	r0, r5
    ee8c:	f7ff fe8a 	bl	eba4 <print_formatted>
	}

	log_output_flush(log_output);
    ee90:	4628      	mov	r0, r5
    ee92:	f00d fe8e 	bl	1cbb2 <log_output_flush>
}
    ee96:	b00a      	add	sp, #40	; 0x28
    ee98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    ee9c:	4630      	mov	r0, r6
    ee9e:	f00d fcc1 	bl	1c824 <log_msg_str_get>
    eea2:	490f      	ldr	r1, [pc, #60]	; (eee0 <log_output_msg_process+0xe8>)
    eea4:	4602      	mov	r2, r0
    eea6:	4628      	mov	r0, r5
    eea8:	f7ff fe7c 	bl	eba4 <print_formatted>
	u32_t offset = 0U;
    eeac:	f04f 0800 	mov.w	r8, #0
		length = sizeof(buf);
    eeb0:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    eeb4:	aa05      	add	r2, sp, #20
    eeb6:	4643      	mov	r3, r8
    eeb8:	a906      	add	r1, sp, #24
    eeba:	4630      	mov	r0, r6
		length = sizeof(buf);
    eebc:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    eec0:	f00d fd06 	bl	1c8d0 <log_msg_hexdump_data_get>
		if (length) {
    eec4:	9a05      	ldr	r2, [sp, #20]
    eec6:	2a00      	cmp	r2, #0
    eec8:	d0b8      	beq.n	ee3c <log_output_msg_process+0x44>
			hexdump_line_print(log_output, buf, length,
    eeca:	464b      	mov	r3, r9
    eecc:	9700      	str	r7, [sp, #0]
    eece:	a906      	add	r1, sp, #24
    eed0:	4628      	mov	r0, r5
    eed2:	f7ff ff25 	bl	ed20 <hexdump_line_print>
			offset += length;
    eed6:	9b05      	ldr	r3, [sp, #20]
    eed8:	4498      	add	r8, r3
    eeda:	e7eb      	b.n	eeb4 <log_output_msg_process+0xbc>
    eedc:	0001ffa2 	.word	0x0001ffa2
    eee0:	000207ed 	.word	0x000207ed

0000eee4 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    eee4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    eee6:	e9d0 4300 	ldrd	r4, r3, [r0]
    eeea:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    eeec:	f242 730f 	movw	r3, #9999	; 0x270f
    eef0:	428b      	cmp	r3, r1
    eef2:	bf28      	it	cs
    eef4:	460b      	movcs	r3, r1
    eef6:	4a0d      	ldr	r2, [pc, #52]	; (ef2c <log_output_dropped_process+0x48>)
    eef8:	2105      	movs	r1, #5
    eefa:	4668      	mov	r0, sp
    eefc:	f001 fd84 	bl	10a08 <snprintf>
    ef00:	4606      	mov	r6, r0

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    ef02:	462b      	mov	r3, r5
    ef04:	4620      	mov	r0, r4
    ef06:	220b      	movs	r2, #11
    ef08:	4909      	ldr	r1, [pc, #36]	; (ef30 <log_output_dropped_process+0x4c>)
    ef0a:	f00d fce8 	bl	1c8de <buffer_write>
	buffer_write(outf, buf, len, dev);
    ef0e:	462b      	mov	r3, r5
    ef10:	4632      	mov	r2, r6
    ef12:	4669      	mov	r1, sp
    ef14:	4620      	mov	r0, r4
    ef16:	f00d fce2 	bl	1c8de <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    ef1a:	462b      	mov	r3, r5
    ef1c:	221b      	movs	r2, #27
    ef1e:	4905      	ldr	r1, [pc, #20]	; (ef34 <log_output_dropped_process+0x50>)
    ef20:	4620      	mov	r0, r4
    ef22:	f00d fcdc 	bl	1c8de <buffer_write>
}
    ef26:	b002      	add	sp, #8
    ef28:	bd70      	pop	{r4, r5, r6, pc}
    ef2a:	bf00      	nop
    ef2c:	0001feb8 	.word	0x0001feb8
    ef30:	0001ffc0 	.word	0x0001ffc0
    ef34:	0001ffa4 	.word	0x0001ffa4

0000ef38 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    ef38:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    ef3a:	2100      	movs	r1, #0
	timestamp_div = 1U;
    ef3c:	4a07      	ldr	r2, [pc, #28]	; (ef5c <log_output_timestamp_freq_set+0x24>)
{
    ef3e:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    ef40:	4c07      	ldr	r4, [pc, #28]	; (ef60 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    ef42:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    ef44:	42a0      	cmp	r0, r4
    ef46:	d804      	bhi.n	ef52 <log_output_timestamp_freq_set+0x1a>
    ef48:	b101      	cbz	r1, ef4c <log_output_timestamp_freq_set+0x14>
    ef4a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    ef4c:	4b05      	ldr	r3, [pc, #20]	; (ef64 <log_output_timestamp_freq_set+0x2c>)
    ef4e:	6018      	str	r0, [r3, #0]
}
    ef50:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    ef52:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    ef54:	005b      	lsls	r3, r3, #1
    ef56:	2101      	movs	r1, #1
    ef58:	e7f4      	b.n	ef44 <log_output_timestamp_freq_set+0xc>
    ef5a:	bf00      	nop
    ef5c:	2002032c 	.word	0x2002032c
    ef60:	000f4240 	.word	0x000f4240
    ef64:	20020328 	.word	0x20020328

0000ef68 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    ef68:	4801      	ldr	r0, [pc, #4]	; (ef70 <panic+0x8>)
    ef6a:	f00d be22 	b.w	1cbb2 <log_output_flush>
    ef6e:	bf00      	nop
    ef70:	0001efcc 	.word	0x0001efcc

0000ef74 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    ef74:	4801      	ldr	r0, [pc, #4]	; (ef7c <dropped+0x8>)
    ef76:	f7ff bfb5 	b.w	eee4 <log_output_dropped_process>
    ef7a:	bf00      	nop
    ef7c:	0001efcc 	.word	0x0001efcc

0000ef80 <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
    ef80:	b508      	push	{r3, lr}
    ef82:	4803      	ldr	r0, [pc, #12]	; (ef90 <log_backend_uart_init+0x10>)
    ef84:	f00b fd50 	bl	1aa28 <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    ef88:	4b02      	ldr	r3, [pc, #8]	; (ef94 <log_backend_uart_init+0x14>)
    ef8a:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
    ef8c:	bd08      	pop	{r3, pc}
    ef8e:	bf00      	nop
    ef90:	0001f5b5 	.word	0x0001f5b5
    ef94:	20020338 	.word	0x20020338

0000ef98 <put>:
{
    ef98:	b510      	push	{r4, lr}
    ef9a:	460c      	mov	r4, r1
	log_msg_get(msg);
    ef9c:	4608      	mov	r0, r1
    ef9e:	f00d fc09 	bl	1c7b4 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    efa2:	4621      	mov	r1, r4
    efa4:	4804      	ldr	r0, [pc, #16]	; (efb8 <put+0x20>)
    efa6:	220f      	movs	r2, #15
    efa8:	f7ff ff26 	bl	edf8 <log_output_msg_process>
	log_msg_put(msg);
    efac:	4620      	mov	r0, r4
}
    efae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    efb2:	f00d bc28 	b.w	1c806 <log_msg_put>
    efb6:	bf00      	nop
    efb8:	0001efcc 	.word	0x0001efcc

0000efbc <socket_offload_register>:
void socket_offload_register(const struct socket_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(socket_ops == NULL);

	socket_ops = ops;
    efbc:	4b01      	ldr	r3, [pc, #4]	; (efc4 <socket_offload_register+0x8>)
    efbe:	6018      	str	r0, [r3, #0]
}
    efc0:	4770      	bx	lr
    efc2:	bf00      	nop
    efc4:	20020344 	.word	0x20020344

0000efc8 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    efc8:	280a      	cmp	r0, #10
{
    efca:	b538      	push	{r3, r4, r5, lr}
    efcc:	4604      	mov	r4, r0
    efce:	4d07      	ldr	r5, [pc, #28]	; (efec <console_out+0x24>)
	if ('\n' == c) {
    efd0:	d104      	bne.n	efdc <console_out+0x14>
    efd2:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    efd4:	6843      	ldr	r3, [r0, #4]
    efd6:	210d      	movs	r1, #13
    efd8:	685b      	ldr	r3, [r3, #4]
    efda:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    efdc:	6828      	ldr	r0, [r5, #0]
    efde:	6843      	ldr	r3, [r0, #4]
    efe0:	b2e1      	uxtb	r1, r4
    efe2:	685b      	ldr	r3, [r3, #4]
    efe4:	4798      	blx	r3

	return c;
}
    efe6:	4620      	mov	r0, r4
    efe8:	bd38      	pop	{r3, r4, r5, pc}
    efea:	bf00      	nop
    efec:	20020348 	.word	0x20020348

0000eff0 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    eff0:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    eff2:	4c04      	ldr	r4, [pc, #16]	; (f004 <uart_console_hook_install+0x14>)
    eff4:	4620      	mov	r0, r4
    eff6:	f001 fd01 	bl	109fc <__stdout_hook_install>
	__printk_hook_install(console_out);
    effa:	4620      	mov	r0, r4
}
    effc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    f000:	f7ff bb30 	b.w	e664 <__printk_hook_install>
    f004:	0000efc9 	.word	0x0000efc9

0000f008 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    f008:	b508      	push	{r3, lr}
    f00a:	4804      	ldr	r0, [pc, #16]	; (f01c <uart_console_init+0x14>)
    f00c:	f00b fd0c 	bl	1aa28 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    f010:	4b03      	ldr	r3, [pc, #12]	; (f020 <uart_console_init+0x18>)
    f012:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    f014:	f7ff ffec 	bl	eff0 <uart_console_hook_install>

	return 0;
}
    f018:	2000      	movs	r0, #0
    f01a:	bd08      	pop	{r3, pc}
    f01c:	0001f5b5 	.word	0x0001f5b5
    f020:	20020348 	.word	0x20020348

0000f024 <hfclk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int hfclk_init(struct device *dev)
{
    f024:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    f026:	2200      	movs	r2, #0
{
    f028:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    f02a:	2101      	movs	r1, #1
    f02c:	2005      	movs	r0, #5
    f02e:	f000 f9c9 	bl	f3c4 <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    f032:	2005      	movs	r0, #5
    f034:	f000 f9b6 	bl	f3a4 <arch_irq_enable>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    f038:	2202      	movs	r2, #2
    f03a:	4b05      	ldr	r3, [pc, #20]	; (f050 <hfclk_init+0x2c>)
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    f03c:	2000      	movs	r0, #0
    f03e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    f042:	2203      	movs	r2, #3
    f044:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			(NRF_POWER_INT_USBDETECTED_MASK |
			 NRF_POWER_INT_USBREMOVED_MASK |
			 NRF_POWER_INT_USBPWRRDY_MASK),
			(0))));

	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    f048:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
    f04a:	e9c3 0000 	strd	r0, r0, [r3]

	return 0;
}
    f04e:	bd10      	pop	{r4, pc}
    f050:	40005000 	.word	0x40005000

0000f054 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    f054:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f056:	4b10      	ldr	r3, [pc, #64]	; (f098 <nrf_power_clock_isr+0x44>)
    f058:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    f05a:	b162      	cbz	r2, f076 <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
    f05c:	4a0f      	ldr	r2, [pc, #60]	; (f09c <nrf_power_clock_isr+0x48>)
    f05e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    f062:	07d1      	lsls	r1, r2, #31
    f064:	d507      	bpl.n	f076 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f066:	2200      	movs	r2, #0
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
    f068:	480d      	ldr	r0, [pc, #52]	; (f0a0 <nrf_power_clock_isr+0x4c>)
    f06a:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    f06c:	6883      	ldr	r3, [r0, #8]
    f06e:	7a5b      	ldrb	r3, [r3, #9]
    f070:	b90b      	cbnz	r3, f076 <nrf_power_clock_isr+0x22>
			clkstarted_handle(hfclk_dev);
    f072:	f00d fe5f 	bl	1cd34 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f076:	4b0b      	ldr	r3, [pc, #44]	; (f0a4 <nrf_power_clock_isr+0x50>)
    f078:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    f07a:	b15a      	cbz	r2, f094 <nrf_power_clock_isr+0x40>
    return p_reg->INTENSET & mask;
    f07c:	4a07      	ldr	r2, [pc, #28]	; (f09c <nrf_power_clock_isr+0x48>)
    f07e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    f082:	0792      	lsls	r2, r2, #30
    f084:	d506      	bpl.n	f094 <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f086:	2200      	movs	r2, #0

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
    f088:	4807      	ldr	r0, [pc, #28]	; (f0a8 <nrf_power_clock_isr+0x54>)
    f08a:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    f08c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(lfclk_dev);
    f090:	f00d be50 	b.w	1cd34 <clkstarted_handle>
}
    f094:	bd08      	pop	{r3, pc}
    f096:	bf00      	nop
    f098:	40005100 	.word	0x40005100
    f09c:	40005000 	.word	0x40005000
    f0a0:	2002c5cc 	.word	0x2002c5cc
    f0a4:	40005104 	.word	0x40005104
    f0a8:	2002c5d8 	.word	0x2002c5d8

0000f0ac <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    f0ac:	2200      	movs	r2, #0
    f0ae:	4b0d      	ldr	r3, [pc, #52]	; (f0e4 <rtc1_nrf_isr+0x38>)
    f0b0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    f0b4:	f04f 0220 	mov.w	r2, #32
    f0b8:	f3ef 8111 	mrs	r1, BASEPRI
    f0bc:	f382 8811 	msr	BASEPRI, r2
    f0c0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    f0c4:	4a08      	ldr	r2, [pc, #32]	; (f0e8 <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    f0c6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    f0ca:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    f0cc:	1ac0      	subs	r0, r0, r3
    f0ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    f0d2:	4403      	add	r3, r0
    f0d4:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    f0d6:	f381 8811 	msr	BASEPRI, r1
    f0da:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    f0de:	f00c bdb3 	b.w	1bc48 <z_clock_announce>
    f0e2:	bf00      	nop
    f0e4:	40015000 	.word	0x40015000
    f0e8:	20020364 	.word	0x20020364

0000f0ec <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    f0ec:	b570      	push	{r4, r5, r6, lr}
    f0ee:	4818      	ldr	r0, [pc, #96]	; (f150 <z_clock_driver_init+0x64>)
    f0f0:	f00b fc9a 	bl	1aa28 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
    f0f4:	b348      	cbz	r0, f14a <z_clock_driver_init+0x5e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    f0f6:	6843      	ldr	r3, [r0, #4]
    f0f8:	2100      	movs	r1, #0
    f0fa:	681b      	ldr	r3, [r3, #0]
    f0fc:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
    f0fe:	2601      	movs	r6, #1
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    f100:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    f102:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f106:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    f10a:	4d12      	ldr	r5, [pc, #72]	; (f154 <z_clock_driver_init+0x68>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    f10c:	4631      	mov	r1, r6
    f10e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    f112:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    f116:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f11a:	4b0f      	ldr	r3, [pc, #60]	; (f158 <z_clock_driver_init+0x6c>)
    f11c:	2015      	movs	r0, #21
    f11e:	601c      	str	r4, [r3, #0]
    f120:	4b0e      	ldr	r3, [pc, #56]	; (f15c <z_clock_driver_init+0x70>)
    f122:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    f126:	4622      	mov	r2, r4
    f128:	f000 f94c 	bl	f3c4 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    f12c:	2015      	movs	r0, #21
    f12e:	f000 f939 	bl	f3a4 <arch_irq_enable>

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    f132:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    f134:	4b0a      	ldr	r3, [pc, #40]	; (f160 <z_clock_driver_init+0x74>)
    f136:	601e      	str	r6, [r3, #0]
    f138:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
    f13a:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
    f13e:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    f140:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    f144:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
    f148:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    f14a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f14e:	e7fb      	b.n	f148 <z_clock_driver_init+0x5c>
    f150:	0002003c 	.word	0x0002003c
    f154:	40015000 	.word	0x40015000
    f158:	40015140 	.word	0x40015140
    f15c:	e000e100 	.word	0xe000e100
    f160:	40015008 	.word	0x40015008

0000f164 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    f164:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    f166:	4c25      	ldr	r4, [pc, #148]	; (f1fc <z_clock_set_timeout+0x98>)
    f168:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    f16c:	bf08      	it	eq
    f16e:	4620      	moveq	r0, r4
	__asm__ volatile(
    f170:	f04f 0320 	mov.w	r3, #32
    f174:	f3ef 8511 	mrs	r5, BASEPRI
    f178:	f383 8811 	msr	BASEPRI, r3
    f17c:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    f180:	4b1f      	ldr	r3, [pc, #124]	; (f200 <z_clock_set_timeout+0x9c>)
    f182:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
    f186:	4b1f      	ldr	r3, [pc, #124]	; (f204 <z_clock_set_timeout+0xa0>)
    f188:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
    f18a:	1aca      	subs	r2, r1, r3
    f18c:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    f190:	0212      	lsls	r2, r2, #8
    f192:	d41a      	bmi.n	f1ca <z_clock_set_timeout+0x66>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    f194:	1e42      	subs	r2, r0, #1
    f196:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    f19a:	42a2      	cmp	r2, r4
    f19c:	bfa8      	it	ge
    f19e:	4622      	movge	r2, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    f1a0:	1c70      	adds	r0, r6, #1
    f1a2:	4410      	add	r0, r2
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    f1a4:	42a0      	cmp	r0, r4
    f1a6:	bf94      	ite	ls
    f1a8:	1818      	addls	r0, r3, r0
    f1aa:	1918      	addhi	r0, r3, r4
	return (a - b) & COUNTER_MAX;
    f1ac:	1a41      	subs	r1, r0, r1
    f1ae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    f1b2:	4a13      	ldr	r2, [pc, #76]	; (f200 <z_clock_set_timeout+0x9c>)
    f1b4:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    f1b8:	2902      	cmp	r1, #2
    p_reg->CC[ch] = cc_val;
    f1ba:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    f1be:	d906      	bls.n	f1ce <z_clock_set_timeout+0x6a>
	__asm__ volatile(
    f1c0:	f385 8811 	msr	BASEPRI, r5
    f1c4:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    f1c8:	bd70      	pop	{r4, r5, r6, pc}
		ticks = 0;
    f1ca:	2200      	movs	r2, #0
    f1cc:	e7e8      	b.n	f1a0 <z_clock_set_timeout+0x3c>
     return p_reg->COUNTER;
    f1ce:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    f1d2:	490d      	ldr	r1, [pc, #52]	; (f208 <z_clock_set_timeout+0xa4>)
	return (a - b) & COUNTER_MAX;
    f1d4:	1ac3      	subs	r3, r0, r3
    f1d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    f1da:	1e5c      	subs	r4, r3, #1
    f1dc:	428c      	cmp	r4, r1
    f1de:	d905      	bls.n	f1ec <z_clock_set_timeout+0x88>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f1e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    f1e4:	4b09      	ldr	r3, [pc, #36]	; (f20c <z_clock_set_timeout+0xa8>)
    f1e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    f1ea:	e7e9      	b.n	f1c0 <z_clock_set_timeout+0x5c>
		} else if (dt == 1) {
    f1ec:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    f1ee:	bf02      	ittt	eq
    f1f0:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    f1f2:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    f1f6:	f8c2 0540 	streq.w	r0, [r2, #1344]	; 0x540
    f1fa:	e7e1      	b.n	f1c0 <z_clock_set_timeout+0x5c>
    f1fc:	00fffffe 	.word	0x00fffffe
    f200:	40015000 	.word	0x40015000
    f204:	20020364 	.word	0x20020364
    f208:	007ffffe 	.word	0x007ffffe
    f20c:	e000e100 	.word	0xe000e100

0000f210 <z_clock_elapsed>:
	__asm__ volatile(
    f210:	f04f 0220 	mov.w	r2, #32
    f214:	f3ef 8311 	mrs	r3, BASEPRI
    f218:	f382 8811 	msr	BASEPRI, r2
    f21c:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    f220:	4a06      	ldr	r2, [pc, #24]	; (f23c <z_clock_elapsed+0x2c>)
    f222:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    f226:	4a06      	ldr	r2, [pc, #24]	; (f240 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    f228:	6812      	ldr	r2, [r2, #0]
    f22a:	1a80      	subs	r0, r0, r2
    f22c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    f230:	f383 8811 	msr	BASEPRI, r3
    f234:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    f238:	4770      	bx	lr
    f23a:	bf00      	nop
    f23c:	40015000 	.word	0x40015000
    f240:	20020364 	.word	0x20020364

0000f244 <z_timer_cycle_get_32>:
	__asm__ volatile(
    f244:	f04f 0320 	mov.w	r3, #32
    f248:	f3ef 8211 	mrs	r2, BASEPRI
    f24c:	f383 8811 	msr	BASEPRI, r3
    f250:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    f254:	4906      	ldr	r1, [pc, #24]	; (f270 <z_timer_cycle_get_32+0x2c>)
    f256:	4b07      	ldr	r3, [pc, #28]	; (f274 <z_timer_cycle_get_32+0x30>)
    f258:	6808      	ldr	r0, [r1, #0]
    f25a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    f25e:	f382 8811 	msr	BASEPRI, r2
    f262:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    f266:	1a1b      	subs	r3, r3, r0
    f268:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    f26c:	4418      	add	r0, r3
    f26e:	4770      	bx	lr
    f270:	20020364 	.word	0x20020364
    f274:	40015000 	.word	0x40015000

0000f278 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    f278:	4807      	ldr	r0, [pc, #28]	; (f298 <_EXIT_EXC+0xe>)

    ldr r1, [r0, #_kernel_offset_to_current]
    f27a:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    f27c:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    f27e:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    f280:	d003      	beq.n	f28a <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    f282:	4906      	ldr	r1, [pc, #24]	; (f29c <_EXIT_EXC+0x12>)
    ldr r2, =_SCS_ICSR_PENDSV
    f284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    f288:	600a      	str	r2, [r1, #0]

0000f28a <_EXIT_EXC>:
_EXIT_EXC:
#endif /* CONFIG_PREEMPT_ENABLED */

#ifdef CONFIG_STACK_SENTINEL
#if defined(CONFIG_CPU_CORTEX_M)
    push {r0, lr}
    f28a:	b501      	push	{r0, lr}
    bl z_check_stack_sentinel
    f28c:	f00c fb08 	bl	1b8a0 <z_check_stack_sentinel>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0, r1}
    mov lr, r1
#else
    pop {r0, lr}
    f290:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    f294:	4770      	bx	lr
    f296:	0000      	.short	0x0000
    ldr r0, =_kernel
    f298:	20024d28 	.word	0x20024d28
    ldr r1, =_SCS_ICSR
    f29c:	e000ed04 	.word	0xe000ed04

0000f2a0 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    f2a0:	4a09      	ldr	r2, [pc, #36]	; (f2c8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    f2a2:	490a      	ldr	r1, [pc, #40]	; (f2cc <arch_swap+0x2c>)
	_current->arch.basepri = key;
    f2a4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    f2a6:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    f2a8:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    f2aa:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    f2ac:	4908      	ldr	r1, [pc, #32]	; (f2d0 <arch_swap+0x30>)
    f2ae:	684b      	ldr	r3, [r1, #4]
    f2b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    f2b4:	604b      	str	r3, [r1, #4]
    f2b6:	2300      	movs	r3, #0
    f2b8:	f383 8811 	msr	BASEPRI, r3
    f2bc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    f2c0:	6893      	ldr	r3, [r2, #8]
}
    f2c2:	6e98      	ldr	r0, [r3, #104]	; 0x68
    f2c4:	4770      	bx	lr
    f2c6:	bf00      	nop
    f2c8:	20024d28 	.word	0x20024d28
    f2cc:	0001f40c 	.word	0x0001f40c
    f2d0:	e000ed00 	.word	0xe000ed00

0000f2d4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    f2d4:	4929      	ldr	r1, [pc, #164]	; (f37c <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    f2d6:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    f2d8:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    f2dc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    f2de:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    f2e2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
    f2e6:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    f2ea:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
    f2ee:	d004      	beq.n	f2fa <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
    f2f0:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
    f2f4:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
    f2f8:	e007      	b.n	f30a <out_fp_endif>

0000f2fa <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
    f2fa:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
    f2fe:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
    f302:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
    f306:	f050 0004 	orrs.w	r0, r0, #4

0000f30a <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
    f30a:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    f30e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    f310:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    f314:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    f318:	4f19      	ldr	r7, [pc, #100]	; (f380 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    f31a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    f31e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    f320:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    f322:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    f324:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    f326:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    f328:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    f32a:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
    f32e:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
    f332:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
    f336:	d105      	bne.n	f344 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    f338:	2300      	movs	r3, #0
    vmsr fpscr, r3
    f33a:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    f33e:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
    f342:	e005      	b.n	f350 <in_fp_endif>

0000f344 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
    f344:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
    f348:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
    f34c:	ec90 8a10 	vldmia	r0, {s16-s31}

0000f350 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    f350:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
    f354:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    f358:	f383 8814 	msr	CONTROL, r3
    isb
    f35c:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    f360:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    f362:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    f364:	f00d fd12 	bl	1cd8c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    f368:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    f36c:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    f370:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    f374:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    f378:	4770      	bx	lr
    f37a:	0000      	.short	0x0000
    ldr r1, =_kernel
    f37c:	20024d28 	.word	0x20024d28
    ldr v4, =_SCS_ICSR
    f380:	e000ed04 	.word	0xe000ed04

0000f384 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    f384:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    f388:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    f38a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    f38e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    f392:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    f394:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    f398:	2902      	cmp	r1, #2
    beq _oops
    f39a:	d0ff      	beq.n	f39c <_oops>

0000f39c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    f39c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    f39e:	f00d fcea 	bl	1cd76 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    f3a2:	bd01      	pop	{r0, pc}

0000f3a4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    f3a4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    f3a6:	2b00      	cmp	r3, #0
    f3a8:	db08      	blt.n	f3bc <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f3aa:	2201      	movs	r2, #1
    f3ac:	f000 001f 	and.w	r0, r0, #31
    f3b0:	fa02 f000 	lsl.w	r0, r2, r0
    f3b4:	4a02      	ldr	r2, [pc, #8]	; (f3c0 <arch_irq_enable+0x1c>)
    f3b6:	095b      	lsrs	r3, r3, #5
    f3b8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    f3bc:	4770      	bx	lr
    f3be:	bf00      	nop
    f3c0:	e000e100 	.word	0xe000e100

0000f3c4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    f3c4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    f3c6:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    f3c8:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f3cc:	bfa8      	it	ge
    f3ce:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    f3d2:	ea4f 1141 	mov.w	r1, r1, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f3d6:	bfb8      	it	lt
    f3d8:	4b05      	ldrlt	r3, [pc, #20]	; (f3f0 <z_arm_irq_priority_set+0x2c>)
    f3da:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f3dc:	bfab      	itete	ge
    f3de:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f3e2:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f3e6:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f3ea:	5419      	strblt	r1, [r3, r0]
}
    f3ec:	4770      	bx	lr
    f3ee:	bf00      	nop
    f3f0:	e000ed14 	.word	0xe000ed14

0000f3f4 <_arch_isr_direct_pm>:
	z_arm_reserved();
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    f3f4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    f3f6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    f3f8:	4b04      	ldr	r3, [pc, #16]	; (f40c <_arch_isr_direct_pm+0x18>)
    f3fa:	6a18      	ldr	r0, [r3, #32]
    f3fc:	b118      	cbz	r0, f406 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    f3fe:	2200      	movs	r2, #0
    f400:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    f402:	f00e ffc6 	bl	1e392 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    f406:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    f408:	bd08      	pop	{r3, pc}
    f40a:	bf00      	nop
    f40c:	20024d28 	.word	0x20024d28

0000f410 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
    f410:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f412:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
    f414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
    f416:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    f418:	9300      	str	r3, [sp, #0]
    f41a:	9b09      	ldr	r3, [sp, #36]	; 0x24
	stackEnd = pStackMem + stackSize;
    f41c:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    f41e:	f00f f9da 	bl	1e7d6 <z_new_thread_init>
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    f422:	4a0c      	ldr	r2, [pc, #48]	; (f454 <arch_new_thread+0x44>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    f424:	f1a4 0320 	sub.w	r3, r4, #32
    f428:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    f42c:	f022 0201 	bic.w	r2, r2, #1
    f430:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    f432:	9a06      	ldr	r2, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
    f434:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    f436:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    f438:	9a07      	ldr	r2, [sp, #28]
    f43a:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    f43c:	9a08      	ldr	r2, [sp, #32]
    f43e:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
    f440:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    f444:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    f446:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    f448:	2300      	movs	r3, #0
    f44a:	666b      	str	r3, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
    f44c:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    f450:	b002      	add	sp, #8
    f452:	bd70      	pop	{r4, r5, r6, pc}
    f454:	0001c2a3 	.word	0x0001c2a3

0000f458 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    f458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f45c:	461f      	mov	r7, r3
    f45e:	4606      	mov	r6, r0
    f460:	460c      	mov	r4, r1
    f462:	4690      	mov	r8, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    f464:	2300      	movs	r3, #0
    f466:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    f46a:	f3ef 8514 	mrs	r5, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    f46e:	f025 0504 	bic.w	r5, r5, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    f472:	f385 8814 	msr	CONTROL, r5
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    f476:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    f47a:	f000 fc1b 	bl	fcb4 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    f47e:	4b0a      	ldr	r3, [pc, #40]	; (f4a8 <arch_switch_to_main_thread+0x50>)
	start_of_main_stack =
    f480:	4444      	add	r4, r8
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    f482:	4630      	mov	r0, r6
	_current = main_thread;
    f484:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    f486:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    f48a:	f00d fc7f 	bl	1cd8c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    f48e:	4638      	mov	r0, r7
    f490:	f384 8809 	msr	PSP, r4
    f494:	2100      	movs	r1, #0
    f496:	b663      	cpsie	if
    f498:	f381 8811 	msr	BASEPRI, r1
    f49c:	f3bf 8f6f 	isb	sy
    f4a0:	2200      	movs	r2, #0
    f4a2:	2300      	movs	r3, #0
    f4a4:	f00c fefd 	bl	1c2a2 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    f4a8:	20024d28 	.word	0x20024d28

0000f4ac <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    f4ac:	4901      	ldr	r1, [pc, #4]	; (f4b4 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    f4ae:	2210      	movs	r2, #16
	str r2, [r1]
    f4b0:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    f4b2:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    f4b4:	e000ed10 	.word	0xe000ed10

0000f4b8 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    f4b8:	4040      	eors	r0, r0
	msr BASEPRI, r0
    f4ba:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    f4be:	bf30      	wfi

	bx lr
    f4c0:	4770      	bx	lr
    f4c2:	bf00      	nop

0000f4c4 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
    f4c4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    f4c8:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    f4cc:	4672      	mov	r2, lr

	push {r0, lr}
    f4ce:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
    f4d0:	f000 fab0 	bl	fa34 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    f4d4:	bd01      	pop	{r0, pc}
    f4d6:	bf00      	nop

0000f4d8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    f4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f4dc:	4681      	mov	r9, r0
    f4de:	b08a      	sub	sp, #40	; 0x28

	if (esf != NULL) {
    f4e0:	460c      	mov	r4, r1
    f4e2:	2900      	cmp	r1, #0
    f4e4:	d07a      	beq.n	f5dc <z_arm_fatal_error+0x104>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    f4e6:	2201      	movs	r2, #1
    f4e8:	f04f 0300 	mov.w	r3, #0
    f4ec:	4d3f      	ldr	r5, [pc, #252]	; (f5ec <z_arm_fatal_error+0x114>)
    f4ee:	f362 0307 	bfi	r3, r2, #0, #8
    f4f2:	4a3f      	ldr	r2, [pc, #252]	; (f5f0 <z_arm_fatal_error+0x118>)
    f4f4:	483f      	ldr	r0, [pc, #252]	; (f5f4 <z_arm_fatal_error+0x11c>)
    f4f6:	1aad      	subs	r5, r5, r2
    f4f8:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    f4fc:	f365 138f 	bfi	r3, r5, #6, #10
    f500:	f8ad 3000 	strh.w	r3, [sp]
    f504:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    f508:	6809      	ldr	r1, [r1, #0]
    f50a:	f00d f8db 	bl	1c6c4 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    f50e:	2201      	movs	r2, #1
    f510:	f04f 0300 	mov.w	r3, #0
    f514:	f362 0307 	bfi	r3, r2, #0, #8
    f518:	f365 138f 	bfi	r3, r5, #6, #10
    f51c:	f8ad 3000 	strh.w	r3, [sp]
    f520:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    f524:	68e1      	ldr	r1, [r4, #12]
    f526:	4834      	ldr	r0, [pc, #208]	; (f5f8 <z_arm_fatal_error+0x120>)
    f528:	f00d f8cc 	bl	1c6c4 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    f52c:	2301      	movs	r3, #1
    f52e:	f04f 0200 	mov.w	r2, #0
    f532:	f363 0207 	bfi	r2, r3, #0, #8
    f536:	f365 128f 	bfi	r2, r5, #6, #10
    f53a:	69e1      	ldr	r1, [r4, #28]
    f53c:	482f      	ldr	r0, [pc, #188]	; (f5fc <z_arm_fatal_error+0x124>)
    f53e:	f00d f895 	bl	1c66c <log_1>
	for (int i = 0; i < 16; i += 4) {
    f542:	4627      	mov	r7, r4
    f544:	2600      	movs	r6, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    f546:	f8df a0c0 	ldr.w	sl, [pc, #192]	; f608 <z_arm_fatal_error+0x130>
    f54a:	edd7 7a08 	vldr	s15, [r7, #32]
    f54e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    f552:	edcd 7a03 	vstr	s15, [sp, #12]
    f556:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
    f55a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    f55e:	edcd 7a05 	vstr	s15, [sp, #20]
    f562:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    f566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    f56a:	edcd 7a07 	vstr	s15, [sp, #28]
    f56e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    f572:	2208      	movs	r2, #8
    f574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    f578:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    f57c:	f043 0301 	orr.w	r3, r3, #1
    f580:	f363 0807 	bfi	r8, r3, #0, #8
    f584:	1c73      	adds	r3, r6, #1
    f586:	9304      	str	r3, [sp, #16]
    f588:	1cb3      	adds	r3, r6, #2
    f58a:	9306      	str	r3, [sp, #24]
    f58c:	f365 188f 	bfi	r8, r5, #6, #10
    f590:	1cf3      	adds	r3, r6, #3
    f592:	9602      	str	r6, [sp, #8]
    f594:	9308      	str	r3, [sp, #32]
    f596:	eb0d 0102 	add.w	r1, sp, r2
    f59a:	4643      	mov	r3, r8
    f59c:	4650      	mov	r0, sl
	for (int i = 0; i < 16; i += 4) {
    f59e:	3604      	adds	r6, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    f5a0:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
    f5a4:	f00d f8a9 	bl	1c6fa <log_n>
	for (int i = 0; i < 16; i += 4) {
    f5a8:	2e10      	cmp	r6, #16
    f5aa:	f107 0710 	add.w	r7, r7, #16
    f5ae:	d1cc      	bne.n	f54a <z_arm_fatal_error+0x72>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
    f5b0:	2301      	movs	r3, #1
    f5b2:	f04f 0200 	mov.w	r2, #0
    f5b6:	f363 0207 	bfi	r2, r3, #0, #8
    f5ba:	f365 128f 	bfi	r2, r5, #6, #10
    f5be:	6e21      	ldr	r1, [r4, #96]	; 0x60
    f5c0:	480f      	ldr	r0, [pc, #60]	; (f600 <z_arm_fatal_error+0x128>)
    f5c2:	f00d f853 	bl	1c66c <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    f5c6:	f04f 0200 	mov.w	r2, #0
    f5ca:	2301      	movs	r3, #1
    f5cc:	f363 0207 	bfi	r2, r3, #0, #8
    f5d0:	f365 128f 	bfi	r2, r5, #6, #10
    f5d4:	69a1      	ldr	r1, [r4, #24]
    f5d6:	480b      	ldr	r0, [pc, #44]	; (f604 <z_arm_fatal_error+0x12c>)
    f5d8:	f00d f848 	bl	1c66c <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    f5dc:	4621      	mov	r1, r4
    f5de:	4648      	mov	r0, r9
    f5e0:	f00b fa4e 	bl	1aa80 <z_fatal_error>
}
    f5e4:	b00a      	add	sp, #40	; 0x28
    f5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f5ea:	bf00      	nop
    f5ec:	0001eeb8 	.word	0x0001eeb8
    f5f0:	0001ee58 	.word	0x0001ee58
    f5f4:	00020068 	.word	0x00020068
    f5f8:	00020097 	.word	0x00020097
    f5fc:	000200c6 	.word	0x000200c6
    f600:	00020118 	.word	0x00020118
    f604:	00020127 	.word	0x00020127
    f608:	000200d5 	.word	0x000200d5

0000f60c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    f60c:	bf30      	wfi
    b z_SysNmiOnReset
    f60e:	f7ff bffd 	b.w	f60c <z_SysNmiOnReset>
    f612:	bf00      	nop

0000f614 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    f614:	4a11      	ldr	r2, [pc, #68]	; (f65c <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    f616:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    f618:	4b11      	ldr	r3, [pc, #68]	; (f660 <z_arm_prep_c+0x4c>)
    f61a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    f61e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    f620:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    f624:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    f628:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    f62c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    f630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    f634:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    f638:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    f63c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    f640:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    f644:	2300      	movs	r3, #0
    f646:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    f64a:	f00b fa99 	bl	1ab80 <z_bss_zero>
	z_data_copy();
    f64e:	f00b faa1 	bl	1ab94 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    f652:	f000 fafb 	bl	fc4c <z_arm_int_lib_init>
	z_cstart();
    f656:	f00b fad5 	bl	1ac04 <z_cstart>
    f65a:	bf00      	nop
    f65c:	0000c000 	.word	0x0000c000
    f660:	e000ed00 	.word	0xe000ed00

0000f664 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    f664:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    f666:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    f668:	4a0b      	ldr	r2, [pc, #44]	; (f698 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    f66a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    f66c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    f66e:	bf1e      	ittt	ne
	movne	r1, #0
    f670:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    f672:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    f674:	f00e fe8d 	blne	1e392 <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    f678:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    f67a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    f67e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    f682:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    f686:	4905      	ldr	r1, [pc, #20]	; (f69c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    f688:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    f68a:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    f68c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    f68e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    f692:	4903      	ldr	r1, [pc, #12]	; (f6a0 <_isr_wrapper+0x3c>)
	bx r1
    f694:	4708      	bx	r1
    f696:	0000      	.short	0x0000
	ldr r2, =_kernel
    f698:	20024d28 	.word	0x20024d28
	ldr r1, =_sw_isr_table
    f69c:	0001eb6c 	.word	0x0001eb6c
	ldr r1, =z_arm_int_exit
    f6a0:	0000f279 	.word	0x0000f279

0000f6a4 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    f6a4:	f00c ffb0 	bl	1c608 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    f6a8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    f6aa:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    f6ae:	4808      	ldr	r0, [pc, #32]	; (f6d0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    f6b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    f6b4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    f6b6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    f6ba:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    f6be:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    f6c0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    f6c2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    f6c6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    f6ca:	f7ff ffa3 	bl	f614 <z_arm_prep_c>
    f6ce:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    f6d0:	20028328 	.word	0x20028328

0000f6d4 <usage_fault.isra.2>:
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    f6d4:	2301      	movs	r3, #1
    f6d6:	f04f 0100 	mov.w	r1, #0
static u32_t usage_fault(const z_arch_esf_t *esf)
    f6da:	b510      	push	{r4, lr}
	PR_FAULT_INFO("***** USAGE FAULT *****");
    f6dc:	f363 0107 	bfi	r1, r3, #0, #8
    f6e0:	4c3a      	ldr	r4, [pc, #232]	; (f7cc <usage_fault.isra.2+0xf8>)
    f6e2:	4b3b      	ldr	r3, [pc, #236]	; (f7d0 <usage_fault.isra.2+0xfc>)
    f6e4:	483b      	ldr	r0, [pc, #236]	; (f7d4 <usage_fault.isra.2+0x100>)
    f6e6:	1ae4      	subs	r4, r4, r3
    f6e8:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    f6ec:	f364 118f 	bfi	r1, r4, #6, #10
    f6f0:	f00c ffaf 	bl	1c652 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    f6f4:	4b38      	ldr	r3, [pc, #224]	; (f7d8 <usage_fault.isra.2+0x104>)
    f6f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f6f8:	0199      	lsls	r1, r3, #6
    f6fa:	d509      	bpl.n	f710 <usage_fault.isra.2+0x3c>
		PR_FAULT_INFO("  Division by zero");
    f6fc:	f04f 0100 	mov.w	r1, #0
    f700:	2301      	movs	r3, #1
    f702:	f363 0107 	bfi	r1, r3, #0, #8
    f706:	f364 118f 	bfi	r1, r4, #6, #10
    f70a:	4834      	ldr	r0, [pc, #208]	; (f7dc <usage_fault.isra.2+0x108>)
    f70c:	f00c ffa1 	bl	1c652 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    f710:	4b31      	ldr	r3, [pc, #196]	; (f7d8 <usage_fault.isra.2+0x104>)
    f712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f714:	01da      	lsls	r2, r3, #7
    f716:	d509      	bpl.n	f72c <usage_fault.isra.2+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
    f718:	f04f 0100 	mov.w	r1, #0
    f71c:	2301      	movs	r3, #1
    f71e:	f363 0107 	bfi	r1, r3, #0, #8
    f722:	f364 118f 	bfi	r1, r4, #6, #10
    f726:	482e      	ldr	r0, [pc, #184]	; (f7e0 <usage_fault.isra.2+0x10c>)
    f728:	f00c ff93 	bl	1c652 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    f72c:	4b2a      	ldr	r3, [pc, #168]	; (f7d8 <usage_fault.isra.2+0x104>)
    f72e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f730:	02db      	lsls	r3, r3, #11
    f732:	d509      	bpl.n	f748 <usage_fault.isra.2+0x74>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    f734:	f04f 0100 	mov.w	r1, #0
    f738:	2301      	movs	r3, #1
    f73a:	f363 0107 	bfi	r1, r3, #0, #8
    f73e:	f364 118f 	bfi	r1, r4, #6, #10
    f742:	4828      	ldr	r0, [pc, #160]	; (f7e4 <usage_fault.isra.2+0x110>)
    f744:	f00c ff85 	bl	1c652 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    f748:	4b23      	ldr	r3, [pc, #140]	; (f7d8 <usage_fault.isra.2+0x104>)
    f74a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f74c:	0318      	lsls	r0, r3, #12
    f74e:	d509      	bpl.n	f764 <usage_fault.isra.2+0x90>
		PR_FAULT_INFO("  No coprocessor instructions");
    f750:	f04f 0100 	mov.w	r1, #0
    f754:	2301      	movs	r3, #1
    f756:	f363 0107 	bfi	r1, r3, #0, #8
    f75a:	f364 118f 	bfi	r1, r4, #6, #10
    f75e:	4822      	ldr	r0, [pc, #136]	; (f7e8 <usage_fault.isra.2+0x114>)
    f760:	f00c ff77 	bl	1c652 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    f764:	4b1c      	ldr	r3, [pc, #112]	; (f7d8 <usage_fault.isra.2+0x104>)
    f766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f768:	0359      	lsls	r1, r3, #13
    f76a:	d509      	bpl.n	f780 <usage_fault.isra.2+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    f76c:	f04f 0100 	mov.w	r1, #0
    f770:	2301      	movs	r3, #1
    f772:	f363 0107 	bfi	r1, r3, #0, #8
    f776:	f364 118f 	bfi	r1, r4, #6, #10
    f77a:	481c      	ldr	r0, [pc, #112]	; (f7ec <usage_fault.isra.2+0x118>)
    f77c:	f00c ff69 	bl	1c652 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    f780:	4b15      	ldr	r3, [pc, #84]	; (f7d8 <usage_fault.isra.2+0x104>)
    f782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f784:	039a      	lsls	r2, r3, #14
    f786:	d509      	bpl.n	f79c <usage_fault.isra.2+0xc8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    f788:	f04f 0100 	mov.w	r1, #0
    f78c:	2301      	movs	r3, #1
    f78e:	f363 0107 	bfi	r1, r3, #0, #8
    f792:	f364 118f 	bfi	r1, r4, #6, #10
    f796:	4816      	ldr	r0, [pc, #88]	; (f7f0 <usage_fault.isra.2+0x11c>)
    f798:	f00c ff5b 	bl	1c652 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    f79c:	4b0e      	ldr	r3, [pc, #56]	; (f7d8 <usage_fault.isra.2+0x104>)
    f79e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f7a0:	03db      	lsls	r3, r3, #15
    f7a2:	d509      	bpl.n	f7b8 <usage_fault.isra.2+0xe4>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    f7a4:	f04f 0100 	mov.w	r1, #0
    f7a8:	2301      	movs	r3, #1
    f7aa:	f363 0107 	bfi	r1, r3, #0, #8
    f7ae:	f364 118f 	bfi	r1, r4, #6, #10
    f7b2:	4810      	ldr	r0, [pc, #64]	; (f7f4 <usage_fault.isra.2+0x120>)
    f7b4:	f00c ff4d 	bl	1c652 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    f7b8:	4a07      	ldr	r2, [pc, #28]	; (f7d8 <usage_fault.isra.2+0x104>)

	return reason;
}
    f7ba:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    f7bc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f7be:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    f7c2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    f7c6:	6293      	str	r3, [r2, #40]	; 0x28
}
    f7c8:	bd10      	pop	{r4, pc}
    f7ca:	bf00      	nop
    f7cc:	0001eeb8 	.word	0x0001eeb8
    f7d0:	0001ee58 	.word	0x0001ee58
    f7d4:	000202b5 	.word	0x000202b5
    f7d8:	e000ed00 	.word	0xe000ed00
    f7dc:	000202cd 	.word	0x000202cd
    f7e0:	000202e0 	.word	0x000202e0
    f7e4:	000202fa 	.word	0x000202fa
    f7e8:	00020324 	.word	0x00020324
    f7ec:	00020342 	.word	0x00020342
    f7f0:	00020367 	.word	0x00020367
    f7f4:	00020381 	.word	0x00020381

0000f7f8 <mem_manage_fault.isra.4>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    f7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
    f7fa:	2301      	movs	r3, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    f7fc:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    f7fe:	f04f 0100 	mov.w	r1, #0
    f802:	4c37      	ldr	r4, [pc, #220]	; (f8e0 <mem_manage_fault.isra.4+0xe8>)
    f804:	f363 0107 	bfi	r1, r3, #0, #8
    f808:	4b36      	ldr	r3, [pc, #216]	; (f8e4 <mem_manage_fault.isra.4+0xec>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    f80a:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    f80c:	1ae4      	subs	r4, r4, r3
    f80e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    f812:	f364 118f 	bfi	r1, r4, #6, #10
    f816:	4834      	ldr	r0, [pc, #208]	; (f8e8 <mem_manage_fault.isra.4+0xf0>)
    f818:	f00c ff1b 	bl	1c652 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    f81c:	4b33      	ldr	r3, [pc, #204]	; (f8ec <mem_manage_fault.isra.4+0xf4>)
    f81e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f820:	06d9      	lsls	r1, r3, #27
    f822:	d509      	bpl.n	f838 <mem_manage_fault.isra.4+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    f824:	f04f 0100 	mov.w	r1, #0
    f828:	2301      	movs	r3, #1
    f82a:	f363 0107 	bfi	r1, r3, #0, #8
    f82e:	f364 118f 	bfi	r1, r4, #6, #10
    f832:	482f      	ldr	r0, [pc, #188]	; (f8f0 <mem_manage_fault.isra.4+0xf8>)
    f834:	f00c ff0d 	bl	1c652 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    f838:	4b2c      	ldr	r3, [pc, #176]	; (f8ec <mem_manage_fault.isra.4+0xf4>)
    f83a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f83c:	071a      	lsls	r2, r3, #28
    f83e:	d509      	bpl.n	f854 <mem_manage_fault.isra.4+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    f840:	f04f 0100 	mov.w	r1, #0
    f844:	2301      	movs	r3, #1
    f846:	f363 0107 	bfi	r1, r3, #0, #8
    f84a:	f364 118f 	bfi	r1, r4, #6, #10
    f84e:	4829      	ldr	r0, [pc, #164]	; (f8f4 <mem_manage_fault.isra.4+0xfc>)
    f850:	f00c feff 	bl	1c652 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    f854:	4d25      	ldr	r5, [pc, #148]	; (f8ec <mem_manage_fault.isra.4+0xf4>)
    f856:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f858:	079b      	lsls	r3, r3, #30
    f85a:	d51c      	bpl.n	f896 <mem_manage_fault.isra.4+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
    f85c:	2301      	movs	r3, #1
    f85e:	f04f 0100 	mov.w	r1, #0
    f862:	f363 0107 	bfi	r1, r3, #0, #8
    f866:	f364 118f 	bfi	r1, r4, #6, #10
    f86a:	4823      	ldr	r0, [pc, #140]	; (f8f8 <mem_manage_fault.isra.4+0x100>)
    f86c:	f00c fef1 	bl	1c652 <log_0>
		mmfar = SCB->MMFAR;
    f870:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    f872:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f874:	0618      	lsls	r0, r3, #24
    f876:	d50e      	bpl.n	f896 <mem_manage_fault.isra.4+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    f878:	f04f 0200 	mov.w	r2, #0
    f87c:	2301      	movs	r3, #1
    f87e:	f363 0207 	bfi	r2, r3, #0, #8
    f882:	f364 128f 	bfi	r2, r4, #6, #10
    f886:	481d      	ldr	r0, [pc, #116]	; (f8fc <mem_manage_fault.isra.4+0x104>)
    f888:	f00c fef0 	bl	1c66c <log_1>
			if (from_hard_fault) {
    f88c:	b11f      	cbz	r7, f896 <mem_manage_fault.isra.4+0x9e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    f88e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f890:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    f894:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    f896:	4b15      	ldr	r3, [pc, #84]	; (f8ec <mem_manage_fault.isra.4+0xf4>)
    f898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f89a:	07da      	lsls	r2, r3, #31
    f89c:	d509      	bpl.n	f8b2 <mem_manage_fault.isra.4+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
    f89e:	f04f 0100 	mov.w	r1, #0
    f8a2:	2301      	movs	r3, #1
    f8a4:	f363 0107 	bfi	r1, r3, #0, #8
    f8a8:	f364 118f 	bfi	r1, r4, #6, #10
    f8ac:	4814      	ldr	r0, [pc, #80]	; (f900 <mem_manage_fault.isra.4+0x108>)
    f8ae:	f00c fed0 	bl	1c652 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    f8b2:	4b0e      	ldr	r3, [pc, #56]	; (f8ec <mem_manage_fault.isra.4+0xf4>)
    f8b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f8b6:	069b      	lsls	r3, r3, #26
    f8b8:	d509      	bpl.n	f8ce <mem_manage_fault.isra.4+0xd6>
		PR_FAULT_INFO(
    f8ba:	f04f 0100 	mov.w	r1, #0
    f8be:	2301      	movs	r3, #1
    f8c0:	f363 0107 	bfi	r1, r3, #0, #8
    f8c4:	f364 118f 	bfi	r1, r4, #6, #10
    f8c8:	480e      	ldr	r0, [pc, #56]	; (f904 <mem_manage_fault.isra.4+0x10c>)
    f8ca:	f00c fec2 	bl	1c652 <log_0>
	*recoverable = memory_fault_recoverable(esf);
    f8ce:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    f8d0:	4b06      	ldr	r3, [pc, #24]	; (f8ec <mem_manage_fault.isra.4+0xf4>)
    f8d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    f8d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f8d6:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    f8da:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    f8dc:	7030      	strb	r0, [r6, #0]
}
    f8de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f8e0:	0001eeb8 	.word	0x0001eeb8
    f8e4:	0001ee58 	.word	0x0001ee58
    f8e8:	000201dd 	.word	0x000201dd
    f8ec:	e000ed00 	.word	0xe000ed00
    f8f0:	000201f3 	.word	0x000201f3
    f8f4:	00020226 	.word	0x00020226
    f8f8:	00020239 	.word	0x00020239
    f8fc:	00020251 	.word	0x00020251
    f900:	00020267 	.word	0x00020267
    f904:	00020286 	.word	0x00020286

0000f908 <bus_fault.isra.5>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    f908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
    f90a:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    f90c:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    f90e:	f04f 0100 	mov.w	r1, #0
    f912:	4c3d      	ldr	r4, [pc, #244]	; (fa08 <bus_fault.isra.5+0x100>)
    f914:	f363 0107 	bfi	r1, r3, #0, #8
    f918:	4b3c      	ldr	r3, [pc, #240]	; (fa0c <bus_fault.isra.5+0x104>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    f91a:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    f91c:	1ae4      	subs	r4, r4, r3
    f91e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    f922:	f364 118f 	bfi	r1, r4, #6, #10
    f926:	483a      	ldr	r0, [pc, #232]	; (fa10 <bus_fault.isra.5+0x108>)
    f928:	f00c fe93 	bl	1c652 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    f92c:	4b39      	ldr	r3, [pc, #228]	; (fa14 <bus_fault.isra.5+0x10c>)
    f92e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f930:	04d9      	lsls	r1, r3, #19
    f932:	d509      	bpl.n	f948 <bus_fault.isra.5+0x40>
		PR_FAULT_INFO("  Stacking error");
    f934:	f04f 0100 	mov.w	r1, #0
    f938:	2301      	movs	r3, #1
    f93a:	f363 0107 	bfi	r1, r3, #0, #8
    f93e:	f364 118f 	bfi	r1, r4, #6, #10
    f942:	4835      	ldr	r0, [pc, #212]	; (fa18 <bus_fault.isra.5+0x110>)
    f944:	f00c fe85 	bl	1c652 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    f948:	4b32      	ldr	r3, [pc, #200]	; (fa14 <bus_fault.isra.5+0x10c>)
    f94a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f94c:	051a      	lsls	r2, r3, #20
    f94e:	d509      	bpl.n	f964 <bus_fault.isra.5+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    f950:	f04f 0100 	mov.w	r1, #0
    f954:	2301      	movs	r3, #1
    f956:	f363 0107 	bfi	r1, r3, #0, #8
    f95a:	f364 118f 	bfi	r1, r4, #6, #10
    f95e:	482f      	ldr	r0, [pc, #188]	; (fa1c <bus_fault.isra.5+0x114>)
    f960:	f00c fe77 	bl	1c652 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    f964:	4d2b      	ldr	r5, [pc, #172]	; (fa14 <bus_fault.isra.5+0x10c>)
    f966:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f968:	059b      	lsls	r3, r3, #22
    f96a:	d51c      	bpl.n	f9a6 <bus_fault.isra.5+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
    f96c:	2301      	movs	r3, #1
    f96e:	f04f 0100 	mov.w	r1, #0
    f972:	f363 0107 	bfi	r1, r3, #0, #8
    f976:	f364 118f 	bfi	r1, r4, #6, #10
    f97a:	4829      	ldr	r0, [pc, #164]	; (fa20 <bus_fault.isra.5+0x118>)
    f97c:	f00c fe69 	bl	1c652 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    f980:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    f982:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f984:	0418      	lsls	r0, r3, #16
    f986:	d50e      	bpl.n	f9a6 <bus_fault.isra.5+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    f988:	f04f 0200 	mov.w	r2, #0
    f98c:	2301      	movs	r3, #1
    f98e:	f363 0207 	bfi	r2, r3, #0, #8
    f992:	f364 128f 	bfi	r2, r4, #6, #10
    f996:	4823      	ldr	r0, [pc, #140]	; (fa24 <bus_fault.isra.5+0x11c>)
    f998:	f00c fe68 	bl	1c66c <log_1>
			if (from_hard_fault) {
    f99c:	b11f      	cbz	r7, f9a6 <bus_fault.isra.5+0x9e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    f99e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f9a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    f9a4:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    f9a6:	4b1b      	ldr	r3, [pc, #108]	; (fa14 <bus_fault.isra.5+0x10c>)
    f9a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f9aa:	0559      	lsls	r1, r3, #21
    f9ac:	d509      	bpl.n	f9c2 <bus_fault.isra.5+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
    f9ae:	f04f 0100 	mov.w	r1, #0
    f9b2:	2301      	movs	r3, #1
    f9b4:	f363 0107 	bfi	r1, r3, #0, #8
    f9b8:	f364 118f 	bfi	r1, r4, #6, #10
    f9bc:	481a      	ldr	r0, [pc, #104]	; (fa28 <bus_fault.isra.5+0x120>)
    f9be:	f00c fe48 	bl	1c652 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    f9c2:	4b14      	ldr	r3, [pc, #80]	; (fa14 <bus_fault.isra.5+0x10c>)
    f9c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f9c6:	05d2      	lsls	r2, r2, #23
    f9c8:	d511      	bpl.n	f9ee <bus_fault.isra.5+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
    f9ca:	f04f 0100 	mov.w	r1, #0
    f9ce:	2301      	movs	r3, #1
    f9d0:	4816      	ldr	r0, [pc, #88]	; (fa2c <bus_fault.isra.5+0x124>)
    f9d2:	f363 0107 	bfi	r1, r3, #0, #8
    f9d6:	f364 118f 	bfi	r1, r4, #6, #10
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    f9da:	f00c fe3a 	bl	1c652 <log_0>
	*recoverable = memory_fault_recoverable(esf);
    f9de:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    f9e0:	4a0c      	ldr	r2, [pc, #48]	; (fa14 <bus_fault.isra.5+0x10c>)
    f9e2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f9e4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    f9e8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    f9ea:	7030      	strb	r0, [r6, #0]
}
    f9ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    f9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f9f0:	049b      	lsls	r3, r3, #18
    f9f2:	d5f4      	bpl.n	f9de <bus_fault.isra.5+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    f9f4:	f04f 0100 	mov.w	r1, #0
    f9f8:	2301      	movs	r3, #1
    f9fa:	f363 0107 	bfi	r1, r3, #0, #8
    f9fe:	f364 118f 	bfi	r1, r4, #6, #10
    fa02:	480b      	ldr	r0, [pc, #44]	; (fa30 <bus_fault.isra.5+0x128>)
    fa04:	e7e9      	b.n	f9da <bus_fault.isra.5+0xd2>
    fa06:	bf00      	nop
    fa08:	0001eeb8 	.word	0x0001eeb8
    fa0c:	0001ee58 	.word	0x0001ee58
    fa10:	00020155 	.word	0x00020155
    fa14:	e000ed00 	.word	0xe000ed00
    fa18:	0002016b 	.word	0x0002016b
    fa1c:	00020226 	.word	0x00020226
    fa20:	0002017c 	.word	0x0002017c
    fa24:	00020195 	.word	0x00020195
    fa28:	000201aa 	.word	0x000201aa
    fa2c:	000201c5 	.word	0x000201c5
    fa30:	00020286 	.word	0x00020286

0000fa34 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    fa34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    fa38:	4b69      	ldr	r3, [pc, #420]	; (fbe0 <z_arm_fault+0x1ac>)
{
    fa3a:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    fa3c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    fa40:	4606      	mov	r6, r0
    fa42:	4689      	mov	r9, r1
    fa44:	4614      	mov	r4, r2
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    fa46:	f3c8 0708 	ubfx	r7, r8, #0, #9
    fa4a:	2500      	movs	r5, #0
    fa4c:	f385 8811 	msr	BASEPRI, r5
    fa50:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    fa54:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    fa58:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    fa5c:	d128      	bne.n	fab0 <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    fa5e:	07d0      	lsls	r0, r2, #31
    fa60:	d426      	bmi.n	fab0 <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    fa62:	0651      	lsls	r1, r2, #25
    fa64:	d403      	bmi.n	fa6e <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    fa66:	0722      	lsls	r2, r4, #28
    fa68:	d412      	bmi.n	fa90 <z_arm_fault+0x5c>
			*nested_exc = true;
    fa6a:	2501      	movs	r5, #1
    fa6c:	e012      	b.n	fa94 <z_arm_fault+0x60>
		PR_FAULT_INFO("Exception occurred in Secure State");
    fa6e:	2301      	movs	r3, #1
    fa70:	f04f 0100 	mov.w	r1, #0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    fa74:	4a5b      	ldr	r2, [pc, #364]	; (fbe4 <z_arm_fault+0x1b0>)
    fa76:	f363 0107 	bfi	r1, r3, #0, #8
    fa7a:	4b5b      	ldr	r3, [pc, #364]	; (fbe8 <z_arm_fault+0x1b4>)
    fa7c:	485b      	ldr	r0, [pc, #364]	; (fbec <z_arm_fault+0x1b8>)
    fa7e:	1a9b      	subs	r3, r3, r2
    fa80:	08db      	lsrs	r3, r3, #3
    fa82:	f363 118f 	bfi	r1, r3, #6, #10
    fa86:	f00c fde4 	bl	1c652 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    fa8a:	f014 0504 	ands.w	r5, r4, #4
    fa8e:	d001      	beq.n	fa94 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)psp;
    fa90:	464e      	mov	r6, r9
	*nested_exc = false;
    fa92:	2500      	movs	r5, #0
	*recoverable = false;
    fa94:	2300      	movs	r3, #0
    fa96:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    fa9a:	1efb      	subs	r3, r7, #3
    fa9c:	2b09      	cmp	r3, #9
    fa9e:	f200 8082 	bhi.w	fba6 <z_arm_fault+0x172>
    faa2:	e8df f003 	tbb	[pc, r3]
    faa6:	6b07      	.short	0x6b07
    faa8:	80804e6f 	.word	0x80804e6f
    faac:	73808080 	.word	0x73808080
		return NULL;
    fab0:	462e      	mov	r6, r5
    fab2:	e7ef      	b.n	fa94 <z_arm_fault+0x60>
	PR_FAULT_INFO("***** HARD FAULT *****");
    fab4:	2301      	movs	r3, #1
    fab6:	f04f 0100 	mov.w	r1, #0
	*recoverable = false;
    faba:	f04f 0800 	mov.w	r8, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
    fabe:	f363 0107 	bfi	r1, r3, #0, #8
    fac2:	4f49      	ldr	r7, [pc, #292]	; (fbe8 <z_arm_fault+0x1b4>)
    fac4:	4b47      	ldr	r3, [pc, #284]	; (fbe4 <z_arm_fault+0x1b0>)
    fac6:	484a      	ldr	r0, [pc, #296]	; (fbf0 <z_arm_fault+0x1bc>)
    fac8:	1aff      	subs	r7, r7, r3
    faca:	f3c7 07c9 	ubfx	r7, r7, #3, #10
    face:	f367 118f 	bfi	r1, r7, #6, #10
    fad2:	f00c fdbe 	bl	1c652 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    fad6:	4b42      	ldr	r3, [pc, #264]	; (fbe0 <z_arm_fault+0x1ac>)
	*recoverable = false;
    fad8:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    fadc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    fade:	f014 0402 	ands.w	r4, r4, #2
    fae2:	d00b      	beq.n	fafc <z_arm_fault+0xc8>
		PR_EXC("  Bus fault on vector table read");
    fae4:	f04f 0100 	mov.w	r1, #0
    fae8:	2301      	movs	r3, #1
    faea:	4842      	ldr	r0, [pc, #264]	; (fbf4 <z_arm_fault+0x1c0>)
    faec:	f363 0107 	bfi	r1, r3, #0, #8
    faf0:	f367 118f 	bfi	r1, r7, #6, #10
	PR_FAULT_INFO(
    faf4:	f00c fdad 	bl	1c652 <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    faf8:	2400      	movs	r4, #0
    fafa:	e025      	b.n	fb48 <z_arm_fault+0x114>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    fafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    fafe:	005b      	lsls	r3, r3, #1
    fb00:	d522      	bpl.n	fb48 <z_arm_fault+0x114>
		PR_EXC("  Fault escalation (see below)");
    fb02:	2301      	movs	r3, #1
    fb04:	f04f 0100 	mov.w	r1, #0
    fb08:	f363 0107 	bfi	r1, r3, #0, #8
    fb0c:	f367 118f 	bfi	r1, r7, #6, #10
    fb10:	4839      	ldr	r0, [pc, #228]	; (fbf8 <z_arm_fault+0x1c4>)
    fb12:	f00c fd9e 	bl	1c652 <log_0>
		if (SCB_MMFSR != 0) {
    fb16:	4b39      	ldr	r3, [pc, #228]	; (fbfc <z_arm_fault+0x1c8>)
    fb18:	781b      	ldrb	r3, [r3, #0]
    fb1a:	b12b      	cbz	r3, fb28 <z_arm_fault+0xf4>
			reason = mem_manage_fault(esf, 1, recoverable);
    fb1c:	2001      	movs	r0, #1
    fb1e:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    fb22:	f7ff fe69 	bl	f7f8 <mem_manage_fault.isra.4>
    fb26:	e00e      	b.n	fb46 <z_arm_fault+0x112>
		} else if (SCB_BFSR != 0) {
    fb28:	4b35      	ldr	r3, [pc, #212]	; (fc00 <z_arm_fault+0x1cc>)
    fb2a:	781b      	ldrb	r3, [r3, #0]
    fb2c:	b12b      	cbz	r3, fb3a <z_arm_fault+0x106>
			reason = bus_fault(esf, 1, recoverable);
    fb2e:	2001      	movs	r0, #1
    fb30:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    fb34:	f7ff fee8 	bl	f908 <bus_fault.isra.5>
    fb38:	e005      	b.n	fb46 <z_arm_fault+0x112>
		} else if (SCB_UFSR != 0) {
    fb3a:	4b32      	ldr	r3, [pc, #200]	; (fc04 <z_arm_fault+0x1d0>)
    fb3c:	881b      	ldrh	r3, [r3, #0]
    fb3e:	b29b      	uxth	r3, r3
    fb40:	b113      	cbz	r3, fb48 <z_arm_fault+0x114>
			reason = usage_fault(esf);
    fb42:	f7ff fdc7 	bl	f6d4 <usage_fault.isra.2>
    fb46:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    fb48:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fb4c:	b99b      	cbnz	r3, fb76 <z_arm_fault+0x142>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    fb4e:	2268      	movs	r2, #104	; 0x68
    fb50:	4631      	mov	r1, r6
    fb52:	a802      	add	r0, sp, #8
    fb54:	f00d faf3 	bl	1d13e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    fb58:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fb5a:	2d00      	cmp	r5, #0
    fb5c:	d03a      	beq.n	fbd4 <z_arm_fault+0x1a0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    fb5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    fb62:	b922      	cbnz	r2, fb6e <z_arm_fault+0x13a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    fb64:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    fb68:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    fb6c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    fb6e:	a902      	add	r1, sp, #8
    fb70:	4620      	mov	r0, r4
    fb72:	f7ff fcb1 	bl	f4d8 <z_arm_fatal_error>
}
    fb76:	b01d      	add	sp, #116	; 0x74
    fb78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    fb7c:	f10d 0107 	add.w	r1, sp, #7
    fb80:	2000      	movs	r0, #0
    fb82:	e7ce      	b.n	fb22 <z_arm_fault+0xee>
		reason = bus_fault(esf, 0, recoverable);
    fb84:	f10d 0107 	add.w	r1, sp, #7
    fb88:	2000      	movs	r0, #0
    fb8a:	e7d3      	b.n	fb34 <z_arm_fault+0x100>
	PR_FAULT_INFO(
    fb8c:	2301      	movs	r3, #1
    fb8e:	f04f 0100 	mov.w	r1, #0
    fb92:	4a14      	ldr	r2, [pc, #80]	; (fbe4 <z_arm_fault+0x1b0>)
    fb94:	f363 0107 	bfi	r1, r3, #0, #8
    fb98:	4b13      	ldr	r3, [pc, #76]	; (fbe8 <z_arm_fault+0x1b4>)
    fb9a:	481b      	ldr	r0, [pc, #108]	; (fc08 <z_arm_fault+0x1d4>)
    fb9c:	1a9b      	subs	r3, r3, r2
    fb9e:	08db      	lsrs	r3, r3, #3
    fba0:	f363 118f 	bfi	r1, r3, #6, #10
    fba4:	e7a6      	b.n	faf4 <z_arm_fault+0xc0>
	PR_FAULT_INFO("***** %s %d) *****",
    fba6:	2201      	movs	r2, #1
    fba8:	f04f 0300 	mov.w	r3, #0
    fbac:	490e      	ldr	r1, [pc, #56]	; (fbe8 <z_arm_fault+0x1b4>)
    fbae:	f362 0307 	bfi	r3, r2, #0, #8
    fbb2:	4a0c      	ldr	r2, [pc, #48]	; (fbe4 <z_arm_fault+0x1b0>)
    fbb4:	4815      	ldr	r0, [pc, #84]	; (fc0c <z_arm_fault+0x1d8>)
    fbb6:	1a89      	subs	r1, r1, r2
    fbb8:	08c9      	lsrs	r1, r1, #3
    fbba:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    fbbe:	f361 138f 	bfi	r3, r1, #6, #10
    fbc2:	f1a7 0210 	sub.w	r2, r7, #16
    fbc6:	4912      	ldr	r1, [pc, #72]	; (fc10 <z_arm_fault+0x1dc>)
    fbc8:	bf18      	it	ne
    fbca:	4601      	movne	r1, r0
    fbcc:	4811      	ldr	r0, [pc, #68]	; (fc14 <z_arm_fault+0x1e0>)
    fbce:	f00c fd61 	bl	1c694 <log_2>
    fbd2:	e791      	b.n	faf8 <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    fbd4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    fbd8:	f023 0301 	bic.w	r3, r3, #1
    fbdc:	e7c6      	b.n	fb6c <z_arm_fault+0x138>
    fbde:	bf00      	nop
    fbe0:	e000ed00 	.word	0xe000ed00
    fbe4:	0001ee58 	.word	0x0001ee58
    fbe8:	0001eeb8 	.word	0x0001eeb8
    fbec:	000203ac 	.word	0x000203ac
    fbf0:	000203cf 	.word	0x000203cf
    fbf4:	000203e6 	.word	0x000203e6
    fbf8:	00020407 	.word	0x00020407
    fbfc:	e000ed28 	.word	0xe000ed28
    fc00:	e000ed29 	.word	0xe000ed29
    fc04:	e000ed2a 	.word	0xe000ed2a
    fc08:	00020426 	.word	0x00020426
    fc0c:	00020471 	.word	0x00020471
    fc10:	0002045c 	.word	0x0002045c
    fc14:	0002048a 	.word	0x0002048a

0000fc18 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    fc18:	4a02      	ldr	r2, [pc, #8]	; (fc24 <z_arm_fault_init+0xc>)
    fc1a:	6953      	ldr	r3, [r2, #20]
    fc1c:	f043 0310 	orr.w	r3, r3, #16
    fc20:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    fc22:	4770      	bx	lr
    fc24:	e000ed00 	.word	0xe000ed00

0000fc28 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    fc28:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    fc2c:	4905      	ldr	r1, [pc, #20]	; (fc44 <sys_arch_reboot+0x1c>)
    fc2e:	4b06      	ldr	r3, [pc, #24]	; (fc48 <sys_arch_reboot+0x20>)
    fc30:	68ca      	ldr	r2, [r1, #12]
    fc32:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    fc36:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    fc38:	60cb      	str	r3, [r1, #12]
    fc3a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    fc3e:	bf00      	nop
    fc40:	e7fd      	b.n	fc3e <sys_arch_reboot+0x16>
    fc42:	bf00      	nop
    fc44:	e000ed00 	.word	0xe000ed00
    fc48:	05fa0004 	.word	0x05fa0004

0000fc4c <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    fc4c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fc4e:	2120      	movs	r1, #32
    fc50:	4803      	ldr	r0, [pc, #12]	; (fc60 <z_arm_int_lib_init+0x14>)
    fc52:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    fc54:	3301      	adds	r3, #1
    fc56:	2b41      	cmp	r3, #65	; 0x41
    fc58:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    fc5c:	d1f9      	bne.n	fc52 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    fc5e:	4770      	bx	lr
    fc60:	e000e100 	.word	0xe000e100

0000fc64 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    fc64:	b538      	push	{r3, r4, r5, lr}
    fc66:	4605      	mov	r5, r0
	__asm__ volatile(
    fc68:	f04f 0320 	mov.w	r3, #32
    fc6c:	f3ef 8411 	mrs	r4, BASEPRI
    fc70:	f383 8811 	msr	BASEPRI, r3
    fc74:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    fc78:	f00e fdce 	bl	1e818 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    fc7c:	4b0b      	ldr	r3, [pc, #44]	; (fcac <z_impl_k_thread_abort+0x48>)
    fc7e:	689b      	ldr	r3, [r3, #8]
    fc80:	42ab      	cmp	r3, r5
    fc82:	d10d      	bne.n	fca0 <z_impl_k_thread_abort+0x3c>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    fc84:	4b0a      	ldr	r3, [pc, #40]	; (fcb0 <z_impl_k_thread_abort+0x4c>)
    fc86:	685a      	ldr	r2, [r3, #4]
    fc88:	f3c2 0208 	ubfx	r2, r2, #0, #9
    fc8c:	b922      	cbnz	r2, fc98 <z_impl_k_thread_abort+0x34>
extern int arch_swap(unsigned int key);

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
    fc8e:	f00b fe07 	bl	1b8a0 <z_check_stack_sentinel>

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    fc92:	4620      	mov	r0, r4
    fc94:	f7ff fb04 	bl	f2a0 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    fc98:	685a      	ldr	r2, [r3, #4]
    fc9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    fc9e:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    fca0:	4620      	mov	r0, r4
}
    fca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    fca6:	f00e bcd1 	b.w	1e64c <z_reschedule_irqlock>
    fcaa:	bf00      	nop
    fcac:	20024d28 	.word	0x20024d28
    fcb0:	e000ed00 	.word	0xe000ed00

0000fcb4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    fcb4:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    fcb6:	4b0e      	ldr	r3, [pc, #56]	; (fcf0 <z_arm_configure_static_mpu_regions+0x3c>)
{
    fcb8:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    fcba:	9302      	str	r3, [sp, #8]
    fcbc:	4b0d      	ldr	r3, [pc, #52]	; (fcf4 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    fcbe:	4c0e      	ldr	r4, [pc, #56]	; (fcf8 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    fcc0:	9303      	str	r3, [sp, #12]
    fcc2:	4b0e      	ldr	r3, [pc, #56]	; (fcfc <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    fcc4:	4a0e      	ldr	r2, [pc, #56]	; (fd00 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    fcc6:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    fcc8:	ab02      	add	r3, sp, #8
    fcca:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    fccc:	a801      	add	r0, sp, #4
    fcce:	4623      	mov	r3, r4
    fcd0:	2101      	movs	r1, #1
    fcd2:	f000 f951 	bl	ff78 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    fcd6:	2300      	movs	r3, #0
    fcd8:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    fcda:	4b0a      	ldr	r3, [pc, #40]	; (fd04 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    fcdc:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    fcde:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    fce0:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    fce2:	9305      	str	r3, [sp, #20]
    fce4:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    fce6:	f000 f951 	bl	ff8c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    fcea:	b008      	add	sp, #32
    fcec:	bd10      	pop	{r4, pc}
    fcee:	bf00      	nop
    fcf0:	20020000 	.word	0x20020000
    fcf4:	00000000 	.word	0x00000000
    fcf8:	20040000 	.word	0x20040000
    fcfc:	00010006 	.word	0x00010006
    fd00:	20020000 	.word	0x20020000
    fd04:	20020000 	.word	0x20020000

0000fd08 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    fd08:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    fd0a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    fd0c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    fd0e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    fd12:	f004 031f 	and.w	r3, r4, #31
    fd16:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    fd18:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    fd1a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    fd1c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    fd20:	4904      	ldr	r1, [pc, #16]	; (fd34 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    fd22:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    fd26:	f043 0301 	orr.w	r3, r3, #1
    fd2a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    fd2c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    fd2e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    fd30:	bd10      	pop	{r4, pc}
    fd32:	bf00      	nop
    fd34:	e000ed90 	.word	0xe000ed90

0000fd38 <region_allocate_and_init.part.0>:
#include <arm_mpu_v8_internal.h>
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const u8_t index,
    fd38:	b508      	push	{r3, lr}
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    fd3a:	f04f 0200 	mov.w	r2, #0
    fd3e:	2301      	movs	r3, #1
    fd40:	4907      	ldr	r1, [pc, #28]	; (fd60 <region_allocate_and_init.part.0+0x28>)
    fd42:	f363 0207 	bfi	r2, r3, #0, #8
    fd46:	4b07      	ldr	r3, [pc, #28]	; (fd64 <region_allocate_and_init.part.0+0x2c>)
    fd48:	1a5b      	subs	r3, r3, r1
    fd4a:	08db      	lsrs	r3, r3, #3
    fd4c:	4601      	mov	r1, r0
    fd4e:	f363 128f 	bfi	r2, r3, #6, #10
    fd52:	4805      	ldr	r0, [pc, #20]	; (fd68 <region_allocate_and_init.part.0+0x30>)
    fd54:	f00c fc8a 	bl	1c66c <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    fd58:	f06f 0015 	mvn.w	r0, #21
    fd5c:	bd08      	pop	{r3, pc}
    fd5e:	bf00      	nop
    fd60:	0001ee58 	.word	0x0001ee58
    fd64:	0001eea8 	.word	0x0001eea8
    fd68:	000204e7 	.word	0x000204e7

0000fd6c <mpu_configure_regions_and_partition.constprop.2>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    fd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fd70:	4607      	mov	r7, r0
    fd72:	4688      	mov	r8, r1
    fd74:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    fd76:	2600      	movs	r6, #0
	MPU->RNR = index;
    fd78:	4d5e      	ldr	r5, [pc, #376]	; (fef4 <mpu_configure_regions_and_partition.constprop.2+0x188>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    fd7a:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    fd7c:	4546      	cmp	r6, r8
    fd7e:	da3d      	bge.n	fdfc <mpu_configure_regions_and_partition.constprop.2+0x90>
		if (regions[i]->size == 0U) {
    fd80:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
    fd84:	f8d3 9004 	ldr.w	r9, [r3, #4]
    fd88:	f1b9 0f00 	cmp.w	r9, #0
    fd8c:	d059      	beq.n	fe42 <mpu_configure_regions_and_partition.constprop.2+0xd6>
		&&
    fd8e:	f1b9 0f1f 	cmp.w	r9, #31
    fd92:	d922      	bls.n	fdda <mpu_configure_regions_and_partition.constprop.2+0x6e>
		&&
    fd94:	f019 0f1f 	tst.w	r9, #31
    fd98:	d11f      	bne.n	fdda <mpu_configure_regions_and_partition.constprop.2+0x6e>
		((part->start &
    fd9a:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    fd9e:	f01a 0f1f 	tst.w	sl, #31
    fda2:	d11a      	bne.n	fdda <mpu_configure_regions_and_partition.constprop.2+0x6e>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    fda4:	4650      	mov	r0, sl
    fda6:	f00d f81c 	bl	1cde2 <arm_cmse_mpu_region_get>
    fdaa:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    fdac:	eb09 000a 	add.w	r0, r9, sl
    fdb0:	3801      	subs	r0, #1
    fdb2:	f00d f816 	bl	1cde2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    fdb6:	4583      	cmp	fp, r0
    fdb8:	d024      	beq.n	fe04 <mpu_configure_regions_and_partition.constprop.2+0x98>
	return -EINVAL;
    fdba:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    fdbe:	2301      	movs	r3, #1
    fdc0:	f04f 0200 	mov.w	r2, #0
    fdc4:	494c      	ldr	r1, [pc, #304]	; (fef8 <mpu_configure_regions_and_partition.constprop.2+0x18c>)
    fdc6:	f363 0207 	bfi	r2, r3, #0, #8
    fdca:	4b4c      	ldr	r3, [pc, #304]	; (fefc <mpu_configure_regions_and_partition.constprop.2+0x190>)
    fdcc:	484c      	ldr	r0, [pc, #304]	; (ff00 <mpu_configure_regions_and_partition.constprop.2+0x194>)
    fdce:	1a5b      	subs	r3, r3, r1
    fdd0:	08db      	lsrs	r3, r3, #3
    fdd2:	f363 128f 	bfi	r2, r3, #6, #10
    fdd6:	4659      	mov	r1, fp
    fdd8:	e00c      	b.n	fdf4 <mpu_configure_regions_and_partition.constprop.2+0x88>
			LOG_ERR("Partition %u: sanity check failed.", i);
    fdda:	2301      	movs	r3, #1
    fddc:	f04f 0200 	mov.w	r2, #0
    fde0:	4945      	ldr	r1, [pc, #276]	; (fef8 <mpu_configure_regions_and_partition.constprop.2+0x18c>)
    fde2:	f363 0207 	bfi	r2, r3, #0, #8
    fde6:	4b45      	ldr	r3, [pc, #276]	; (fefc <mpu_configure_regions_and_partition.constprop.2+0x190>)
    fde8:	4846      	ldr	r0, [pc, #280]	; (ff04 <mpu_configure_regions_and_partition.constprop.2+0x198>)
    fdea:	1a5b      	subs	r3, r3, r1
    fdec:	4631      	mov	r1, r6
    fdee:	08db      	lsrs	r3, r3, #3
    fdf0:	f363 128f 	bfi	r2, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
    fdf4:	f00c fc3a 	bl	1c66c <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    fdf8:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    fdfc:	4620      	mov	r0, r4
    fdfe:	b005      	add	sp, #20
    fe00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    fe04:	f11b 0f16 	cmn.w	fp, #22
    fe08:	d0d9      	beq.n	fdbe <mpu_configure_regions_and_partition.constprop.2+0x52>
			(u_reg_index > (reg_index - 1))) {
    fe0a:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    fe0c:	455b      	cmp	r3, fp
    fe0e:	dbd6      	blt.n	fdbe <mpu_configure_regions_and_partition.constprop.2+0x52>
	MPU->RNR = index;
    fe10:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    fe14:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
    fe16:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    fe1a:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    fe1c:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    fe20:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    fe24:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    fe28:	e9d1 3200 	ldrd	r3, r2, [r1]
    fe2c:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    fe2e:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    fe30:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
    fe34:	d118      	bne.n	fe68 <mpu_configure_regions_and_partition.constprop.2+0xfc>
    fe36:	45ca      	cmp	sl, r9
    fe38:	d105      	bne.n	fe46 <mpu_configure_regions_and_partition.constprop.2+0xda>
			mpu_configure_region(u_reg_index, regions[i]);
    fe3a:	fa5f f08b 	uxtb.w	r0, fp
    fe3e:	f00c ffad 	bl	1cd9c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    fe42:	3601      	adds	r6, #1
    fe44:	e79a      	b.n	fd7c <mpu_configure_regions_and_partition.constprop.2+0x10>
	MPU->RNR = index;
    fe46:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    fe4a:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    fe4c:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    fe50:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    fe54:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    fe56:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    fe58:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    fe5a:	f00c ff9f 	bl	1cd9c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    fe5e:	f110 0f16 	cmn.w	r0, #22
    fe62:	d0c9      	beq.n	fdf8 <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
    fe64:	1c44      	adds	r4, r0, #1
    fe66:	e7ec      	b.n	fe42 <mpu_configure_regions_and_partition.constprop.2+0xd6>
	MPU->RNR = index;
    fe68:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    fe6c:	692a      	ldr	r2, [r5, #16]
    fe6e:	3b01      	subs	r3, #1
    fe70:	f023 031f 	bic.w	r3, r3, #31
    fe74:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    fe78:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    fe7a:	45ca      	cmp	sl, r9
    fe7c:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    fe7e:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    fe80:	d0eb      	beq.n	fe5a <mpu_configure_regions_and_partition.constprop.2+0xee>
				mpu_configure_region(reg_index, regions[i]);
    fe82:	f00c ff8b 	bl	1cd9c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    fe86:	f110 0f16 	cmn.w	r0, #22
    fe8a:	d0b5      	beq.n	fdf8 <mpu_configure_regions_and_partition.constprop.2+0x8c>
	MPU->RNR = index;
    fe8c:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    fe90:	68ea      	ldr	r2, [r5, #12]
    fe92:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    fe96:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
    fe9a:	f362 0304 	bfi	r3, r2, #0, #5
    fe9e:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    fea2:	692b      	ldr	r3, [r5, #16]
    fea4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    fea8:	085b      	lsrs	r3, r3, #1
    feaa:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
    feae:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    feb2:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    feb6:	e9d3 1300 	ldrd	r1, r3, [r3]
    feba:	440b      	add	r3, r1
    febc:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    febe:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    fec2:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
    fec4:	4453      	add	r3, sl
    fec6:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
    feca:	b2e4      	uxtb	r4, r4
			REGION_LIMIT_ADDR((regions[i]->start +
    fecc:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    fed0:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
    fed2:	9303      	str	r3, [sp, #12]
    fed4:	d908      	bls.n	fee8 <mpu_configure_regions_and_partition.constprop.2+0x17c>
    fed6:	4620      	mov	r0, r4
    fed8:	f7ff ff2e 	bl	fd38 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
    fedc:	f110 0f16 	cmn.w	r0, #22
    fee0:	4604      	mov	r4, r0
    fee2:	d089      	beq.n	fdf8 <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
    fee4:	3401      	adds	r4, #1
    fee6:	e7ac      	b.n	fe42 <mpu_configure_regions_and_partition.constprop.2+0xd6>
	region_init(index, region_conf);
    fee8:	4669      	mov	r1, sp
    feea:	4620      	mov	r0, r4
    feec:	f7ff ff0c 	bl	fd08 <region_init>
			if (reg_index == -EINVAL) {
    fef0:	e7f8      	b.n	fee4 <mpu_configure_regions_and_partition.constprop.2+0x178>
    fef2:	bf00      	nop
    fef4:	e000ed90 	.word	0xe000ed90
    fef8:	0001ee58 	.word	0x0001ee58
    fefc:	0001eea8 	.word	0x0001eea8
    ff00:	000204c4 	.word	0x000204c4
    ff04:	000204a1 	.word	0x000204a1

0000ff08 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    ff08:	2205      	movs	r2, #5
    ff0a:	4b03      	ldr	r3, [pc, #12]	; (ff18 <arm_core_mpu_enable+0x10>)
    ff0c:	605a      	str	r2, [r3, #4]
    ff0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ff12:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    ff16:	4770      	bx	lr
    ff18:	e000ed90 	.word	0xe000ed90

0000ff1c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    ff1c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    ff20:	2200      	movs	r2, #0
    ff22:	4b01      	ldr	r3, [pc, #4]	; (ff28 <arm_core_mpu_disable+0xc>)
    ff24:	605a      	str	r2, [r3, #4]
}
    ff26:	4770      	bx	lr
    ff28:	e000ed90 	.word	0xe000ed90

0000ff2c <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    ff2c:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    ff2e:	4d0e      	ldr	r5, [pc, #56]	; (ff68 <arm_mpu_init+0x3c>)
    ff30:	682e      	ldr	r6, [r5, #0]
    ff32:	2e10      	cmp	r6, #16
    ff34:	d815      	bhi.n	ff62 <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    ff36:	2400      	movs	r4, #0
	arm_core_mpu_disable();
    ff38:	f7ff fff0 	bl	ff1c <arm_core_mpu_disable>
	MPU->MAIR0 =
    ff3c:	4b0b      	ldr	r3, [pc, #44]	; (ff6c <arm_mpu_init+0x40>)
    ff3e:	4a0c      	ldr	r2, [pc, #48]	; (ff70 <arm_mpu_init+0x44>)
    ff40:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    ff42:	42a6      	cmp	r6, r4
    ff44:	d105      	bne.n	ff52 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    ff46:	4b0b      	ldr	r3, [pc, #44]	; (ff74 <arm_mpu_init+0x48>)
    ff48:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
    ff4a:	f7ff ffdd 	bl	ff08 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    ff4e:	2000      	movs	r0, #0
}
    ff50:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    ff52:	6869      	ldr	r1, [r5, #4]
    ff54:	4620      	mov	r0, r4
    ff56:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    ff5a:	f7ff fed5 	bl	fd08 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    ff5e:	3401      	adds	r4, #1
    ff60:	e7ef      	b.n	ff42 <arm_mpu_init+0x16>
		return -1;
    ff62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ff66:	e7f3      	b.n	ff50 <arm_mpu_init+0x24>
    ff68:	0001ef64 	.word	0x0001ef64
    ff6c:	e000ed90 	.word	0xe000ed90
    ff70:	0044ffaa 	.word	0x0044ffaa
    ff74:	2002657d 	.word	0x2002657d

0000ff78 <arm_core_mpu_configure_static_mpu_regions>:
{
    ff78:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    ff7a:	4c03      	ldr	r4, [pc, #12]	; (ff88 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    ff7c:	7822      	ldrb	r2, [r4, #0]
    ff7e:	f7ff fef5 	bl	fd6c <mpu_configure_regions_and_partition.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    ff82:	7020      	strb	r0, [r4, #0]
}
    ff84:	bd10      	pop	{r4, pc}
    ff86:	bf00      	nop
    ff88:	2002657d 	.word	0x2002657d

0000ff8c <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    ff8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ff90:	4c25      	ldr	r4, [pc, #148]	; (10028 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>)
    ff92:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    ff94:	4680      	mov	r8, r0
    ff96:	2700      	movs	r7, #0
    ff98:	46a1      	mov	r9, r4
	attr->rbar = MPU->RBAR &
    ff9a:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
    ff9e:	4d23      	ldr	r5, [pc, #140]	; (1002c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    ffa0:	4557      	cmp	r7, sl
    ffa2:	da1a      	bge.n	ffda <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    ffa4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    ffa8:	9301      	str	r3, [sp, #4]
    ffaa:	2b00      	cmp	r3, #0
    ffac:	d036      	beq.n	1001c <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    ffae:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    ffb2:	4608      	mov	r0, r1
    ffb4:	9100      	str	r1, [sp, #0]
    ffb6:	f00c ff14 	bl	1cde2 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    ffba:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    ffbe:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    ffc0:	1858      	adds	r0, r3, r1
    ffc2:	3801      	subs	r0, #1
    ffc4:	f00c ff0d 	bl	1cde2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    ffc8:	4286      	cmp	r6, r0
    ffca:	4a19      	ldr	r2, [pc, #100]	; (10030 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
    ffcc:	d008      	beq.n	ffe0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    ffce:	2314      	movs	r3, #20
    ffd0:	435f      	muls	r7, r3
    ffd2:	f06f 0315 	mvn.w	r3, #21
    ffd6:	f849 3007 	str.w	r3, [r9, r7]
}
    ffda:	b003      	add	sp, #12
    ffdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    ffe0:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
    ffe4:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    ffe6:	d0f8      	beq.n	ffda <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    ffe8:	7813      	ldrb	r3, [r2, #0]
    ffea:	42b3      	cmp	r3, r6
    ffec:	ddf5      	ble.n	ffda <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    ffee:	fb0b 9307 	mla	r3, fp, r7, r9
	MPU->RNR = index;
    fff2:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
    fff4:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
    fff6:	68e8      	ldr	r0, [r5, #12]
    fff8:	7b19      	ldrb	r1, [r3, #12]
    fffa:	f360 0104 	bfi	r1, r0, #0, #5
    fffe:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   10000:	6929      	ldr	r1, [r5, #16]
   10002:	7b18      	ldrb	r0, [r3, #12]
   10004:	0849      	lsrs	r1, r1, #1
   10006:	f361 1047 	bfi	r0, r1, #5, #3
   1000a:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   1000c:	68eb      	ldr	r3, [r5, #12]
   1000e:	f023 031f 	bic.w	r3, r3, #31
   10012:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   10014:	692b      	ldr	r3, [r5, #16]
   10016:	f023 031f 	bic.w	r3, r3, #31
   1001a:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1001c:	3701      	adds	r7, #1
   1001e:	3414      	adds	r4, #20
   10020:	f108 080c 	add.w	r8, r8, #12
   10024:	e7bc      	b.n	ffa0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   10026:	bf00      	nop
   10028:	20020368 	.word	0x20020368
   1002c:	e000ed90 	.word	0xe000ed90
   10030:	2002657d 	.word	0x2002657d

00010034 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   10034:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
   10036:	4b0c      	ldr	r3, [pc, #48]	; (10068 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
   10038:	460e      	mov	r6, r1
   1003a:	781c      	ldrb	r4, [r3, #0]
   1003c:	4605      	mov	r5, r0
   1003e:	4623      	mov	r3, r4
  mpu->RLAR = 0U;
   10040:	2100      	movs	r1, #0
  mpu->RNR = rnr;
   10042:	4a0a      	ldr	r2, [pc, #40]	; (1006c <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   10044:	2b0f      	cmp	r3, #15
   10046:	dd0b      	ble.n	10060 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>
#if defined(CONFIG_MPU_GAP_FILLING)
	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
   10048:	4909      	ldr	r1, [pc, #36]	; (10070 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
   1004a:	f851 0b04 	ldr.w	r0, [r1], #4
   1004e:	f7ff fe5b 	bl	fd08 <region_init>

	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */
	mpu_reg_index = mpu_configure_regions_and_partition(dynamic_regions,
   10052:	4622      	mov	r2, r4
   10054:	4631      	mov	r1, r6
   10056:	4628      	mov	r0, r5
}
   10058:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1005c:	f7ff be86 	b.w	fd6c <mpu_configure_regions_and_partition.constprop.2>
   10060:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   10062:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   10064:	3301      	adds	r3, #1
   10066:	e7ed      	b.n	10044 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
   10068:	2002657d 	.word	0x2002657d
   1006c:	e000ed90 	.word	0xe000ed90
   10070:	20020368 	.word	0x20020368

00010074 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
   10074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10078:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
   1007a:	2300      	movs	r3, #0
{
   1007c:	b0a3      	sub	sp, #140	; 0x8c
   1007e:	e9cd 0102 	strd	r0, r1, [sp, #8]
	count = 0;
   10082:	9301      	str	r3, [sp, #4]

	while ((c = *format++)) {
   10084:	4613      	mov	r3, r2
   10086:	f813 0b01 	ldrb.w	r0, [r3], #1
   1008a:	9308      	str	r3, [sp, #32]
   1008c:	b158      	cbz	r0, 100a6 <z_prf+0x32>
		if (c != '%') {
   1008e:	2825      	cmp	r0, #37	; 0x25
   10090:	f000 8085 	beq.w	1019e <z_prf+0x12a>
			PUTC(c);
   10094:	9903      	ldr	r1, [sp, #12]
   10096:	9b02      	ldr	r3, [sp, #8]
   10098:	4798      	blx	r3
   1009a:	3001      	adds	r0, #1
   1009c:	f040 841a 	bne.w	108d4 <z_prf+0x860>
   100a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   100a4:	9301      	str	r3, [sp, #4]
		}
	}
	return count;

#undef PUTC
}
   100a6:	9801      	ldr	r0, [sp, #4]
   100a8:	b023      	add	sp, #140	; 0x8c
   100aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
   100ae:	2c23      	cmp	r4, #35	; 0x23
   100b0:	d06c      	beq.n	1018c <z_prf+0x118>
   100b2:	d861      	bhi.n	10178 <z_prf+0x104>
   100b4:	2c00      	cmp	r4, #0
   100b6:	d0f6      	beq.n	100a6 <z_prf+0x32>
					fspace = true;
   100b8:	2c20      	cmp	r4, #32
   100ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   100bc:	bf08      	it	eq
   100be:	2301      	moveq	r3, #1
   100c0:	930e      	str	r3, [sp, #56]	; 0x38
					fminus = true;
   100c2:	f8cd 8020 	str.w	r8, [sp, #32]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
   100c6:	f8dd 8020 	ldr.w	r8, [sp, #32]
   100ca:	48b7      	ldr	r0, [pc, #732]	; (103a8 <z_prf+0x334>)
   100cc:	f818 4b01 	ldrb.w	r4, [r8], #1
   100d0:	4621      	mov	r1, r4
   100d2:	f00c ffde 	bl	1d092 <strchr>
   100d6:	2800      	cmp	r0, #0
   100d8:	d1e9      	bne.n	100ae <z_prf+0x3a>
			if (c == '*') {
   100da:	2c2a      	cmp	r4, #42	; 0x2a
   100dc:	d166      	bne.n	101ac <z_prf+0x138>
				width = va_arg(vargs, int);
   100de:	f856 3b04 	ldr.w	r3, [r6], #4
				c = *format++;
   100e2:	f898 4000 	ldrb.w	r4, [r8]
				if (width < 0) {
   100e6:	2b00      	cmp	r3, #0
				width = va_arg(vargs, int);
   100e8:	9309      	str	r3, [sp, #36]	; 0x24
					width = -width;
   100ea:	bfbf      	itttt	lt
   100ec:	425b      	neglt	r3, r3
   100ee:	9309      	strlt	r3, [sp, #36]	; 0x24
					fminus = true;
   100f0:	2301      	movlt	r3, #1
   100f2:	930f      	strlt	r3, [sp, #60]	; 0x3c
				c = *format++;
   100f4:	9b08      	ldr	r3, [sp, #32]
   100f6:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
   100fa:	2c2e      	cmp	r4, #46	; 0x2e
   100fc:	d17b      	bne.n	101f6 <z_prf+0x182>
				if (c == '*') {
   100fe:	f898 3000 	ldrb.w	r3, [r8]
   10102:	2b2a      	cmp	r3, #42	; 0x2a
   10104:	d174      	bne.n	101f0 <z_prf+0x17c>
					precision = va_arg(vargs, int);
   10106:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
   1010a:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
   1010e:	f818 4b01 	ldrb.w	r4, [r8], #1
			if (strchr("hlz", c) != NULL) {
   10112:	4621      	mov	r1, r4
   10114:	48a5      	ldr	r0, [pc, #660]	; (103ac <z_prf+0x338>)
   10116:	4627      	mov	r7, r4
   10118:	f00c ffbb 	bl	1d092 <strchr>
   1011c:	2800      	cmp	r0, #0
   1011e:	d06d      	beq.n	101fc <z_prf+0x188>
				c = *format++;
   10120:	4643      	mov	r3, r8
   10122:	f813 4b01 	ldrb.w	r4, [r3], #1
				} else if (i == 'h' && c == 'h') {
   10126:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
   10128:	9308      	str	r3, [sp, #32]
				} else if (i == 'h' && c == 'h') {
   1012a:	d107      	bne.n	1013c <z_prf+0xc8>
   1012c:	2c68      	cmp	r4, #104	; 0x68
   1012e:	d105      	bne.n	1013c <z_prf+0xc8>
					i = 'H';
   10130:	2748      	movs	r7, #72	; 0x48
					c = *format++;
   10132:	f108 0302 	add.w	r3, r8, #2
   10136:	f898 4001 	ldrb.w	r4, [r8, #1]
   1013a:	9308      	str	r3, [sp, #32]
			switch (c) {
   1013c:	2c67      	cmp	r4, #103	; 0x67
   1013e:	d87b      	bhi.n	10238 <z_prf+0x1c4>
   10140:	2c65      	cmp	r4, #101	; 0x65
   10142:	f080 8135 	bcs.w	103b0 <z_prf+0x33c>
   10146:	2c47      	cmp	r4, #71	; 0x47
   10148:	d85c      	bhi.n	10204 <z_prf+0x190>
   1014a:	2c45      	cmp	r4, #69	; 0x45
   1014c:	f080 8130 	bcs.w	103b0 <z_prf+0x33c>
   10150:	2c00      	cmp	r4, #0
   10152:	d0a8      	beq.n	100a6 <z_prf+0x32>
   10154:	2c25      	cmp	r4, #37	; 0x25
   10156:	f000 83b9 	beq.w	108cc <z_prf+0x858>
				PUTC('%');
   1015a:	9903      	ldr	r1, [sp, #12]
   1015c:	2025      	movs	r0, #37	; 0x25
   1015e:	9b02      	ldr	r3, [sp, #8]
   10160:	4798      	blx	r3
   10162:	3001      	adds	r0, #1
   10164:	d09c      	beq.n	100a0 <z_prf+0x2c>
				PUTC(c);
   10166:	9903      	ldr	r1, [sp, #12]
   10168:	4620      	mov	r0, r4
   1016a:	9b02      	ldr	r3, [sp, #8]
   1016c:	4798      	blx	r3
   1016e:	3001      	adds	r0, #1
   10170:	d096      	beq.n	100a0 <z_prf+0x2c>
				count += 2;
   10172:	9b01      	ldr	r3, [sp, #4]
   10174:	3302      	adds	r3, #2
   10176:	e3af      	b.n	108d8 <z_prf+0x864>
				switch (c) {
   10178:	2c2d      	cmp	r4, #45	; 0x2d
   1017a:	d00a      	beq.n	10192 <z_prf+0x11e>
   1017c:	2c30      	cmp	r4, #48	; 0x30
   1017e:	d00b      	beq.n	10198 <z_prf+0x124>
					fplus = true;
   10180:	2c2b      	cmp	r4, #43	; 0x2b
   10182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10184:	bf08      	it	eq
   10186:	2301      	moveq	r3, #1
   10188:	930b      	str	r3, [sp, #44]	; 0x2c
   1018a:	e79a      	b.n	100c2 <z_prf+0x4e>
					falt = true;
   1018c:	f04f 0b01 	mov.w	fp, #1
   10190:	e797      	b.n	100c2 <z_prf+0x4e>
					fminus = true;
   10192:	2301      	movs	r3, #1
   10194:	930f      	str	r3, [sp, #60]	; 0x3c
   10196:	e794      	b.n	100c2 <z_prf+0x4e>
					fzero = true;
   10198:	2301      	movs	r3, #1
   1019a:	930a      	str	r3, [sp, #40]	; 0x28
   1019c:	e791      	b.n	100c2 <z_prf+0x4e>
			fminus = fplus = fspace = falt = fzero = false;
   1019e:	2300      	movs	r3, #0
   101a0:	930a      	str	r3, [sp, #40]	; 0x28
   101a2:	930e      	str	r3, [sp, #56]	; 0x38
   101a4:	930b      	str	r3, [sp, #44]	; 0x2c
   101a6:	930f      	str	r3, [sp, #60]	; 0x3c
   101a8:	469b      	mov	fp, r3
   101aa:	e78c      	b.n	100c6 <z_prf+0x52>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   101ac:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
   101b0:	2b09      	cmp	r3, #9
				width = 0;
   101b2:	9009      	str	r0, [sp, #36]	; 0x24
			} else if (!isdigit(c)) {
   101b4:	d8a1      	bhi.n	100fa <z_prf+0x86>
		i = 10 * i + *p++ - '0';
   101b6:	220a      	movs	r2, #10
	while (isdigit(*p)) {
   101b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
   101bc:	f818 4b01 	ldrb.w	r4, [r8], #1
   101c0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   101c4:	2b09      	cmp	r3, #9
   101c6:	d898      	bhi.n	100fa <z_prf+0x86>
		i = 10 * i + *p++ - '0';
   101c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   101ca:	fb02 4403 	mla	r4, r2, r3, r4
   101ce:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   101d2:	e9cd 8308 	strd	r8, r3, [sp, #32]
   101d6:	e7ef      	b.n	101b8 <z_prf+0x144>
   101d8:	4690      	mov	r8, r2
   101da:	fb01 3505 	mla	r5, r1, r5, r3
   101de:	3d30      	subs	r5, #48	; 0x30
	while (isdigit(*p)) {
   101e0:	4642      	mov	r2, r8
   101e2:	f812 3b01 	ldrb.w	r3, [r2], #1
   101e6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   101ea:	2809      	cmp	r0, #9
   101ec:	d9f4      	bls.n	101d8 <z_prf+0x164>
   101ee:	e78e      	b.n	1010e <z_prf+0x9a>
	int i = 0;
   101f0:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
   101f2:	210a      	movs	r1, #10
   101f4:	e7f4      	b.n	101e0 <z_prf+0x16c>
			precision = -1;
   101f6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   101fa:	e78a      	b.n	10112 <z_prf+0x9e>
   101fc:	f8cd 8020 	str.w	r8, [sp, #32]
			i = 0;
   10200:	4607      	mov	r7, r0
   10202:	e79b      	b.n	1013c <z_prf+0xc8>
			switch (c) {
   10204:	2c63      	cmp	r4, #99	; 0x63
   10206:	d059      	beq.n	102bc <z_prf+0x248>
   10208:	d820      	bhi.n	1024c <z_prf+0x1d8>
   1020a:	2c58      	cmp	r4, #88	; 0x58
   1020c:	d1a5      	bne.n	1015a <z_prf+0xe6>
				if (c == 'o') {
   1020e:	2c6f      	cmp	r4, #111	; 0x6f
   10210:	f106 0904 	add.w	r9, r6, #4
   10214:	6831      	ldr	r1, [r6, #0]
   10216:	f040 8328 	bne.w	1086a <z_prf+0x7f6>
	if (alt_form) {
   1021a:	f1bb 0f00 	cmp.w	fp, #0
   1021e:	f000 8317 	beq.w	10850 <z_prf+0x7dc>
		*buf++ = '0';
   10222:	2330      	movs	r3, #48	; 0x30
   10224:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		if (!value) {
   10228:	2900      	cmp	r1, #0
   1022a:	f040 831b 	bne.w	10864 <z_prf+0x7f0>
			*buf++ = 0;
   1022e:	f88d 106d 	strb.w	r1, [sp, #109]	; 0x6d
			prefix = 0;
   10232:	460f      	mov	r7, r1
			return 1;
   10234:	2601      	movs	r6, #1
   10236:	e025      	b.n	10284 <z_prf+0x210>
			switch (c) {
   10238:	2c70      	cmp	r4, #112	; 0x70
   1023a:	f000 82f5 	beq.w	10828 <z_prf+0x7b4>
   1023e:	d827      	bhi.n	10290 <z_prf+0x21c>
   10240:	2c6e      	cmp	r4, #110	; 0x6e
   10242:	f000 82de 	beq.w	10802 <z_prf+0x78e>
   10246:	d8e2      	bhi.n	1020e <z_prf+0x19a>
   10248:	2c69      	cmp	r4, #105	; 0x69
   1024a:	d186      	bne.n	1015a <z_prf+0xe6>
				switch (i) {
   1024c:	6837      	ldr	r7, [r6, #0]
   1024e:	f106 0904 	add.w	r9, r6, #4
	if (value < 0) {
   10252:	2f00      	cmp	r7, #0
   10254:	f280 809a 	bge.w	1038c <z_prf+0x318>
		*buf++ = '-';
   10258:	232d      	movs	r3, #45	; 0x2d
		value = -value;
   1025a:	4279      	negs	r1, r7
		*buf++ = '-';
   1025c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		*buf++ = ' ';
   10260:	f10d 066d 	add.w	r6, sp, #109	; 0x6d
	return _to_x(buf, value, 10);
   10264:	4630      	mov	r0, r6
   10266:	220a      	movs	r2, #10
   10268:	f00c ffb5 	bl	1d1d6 <_to_x>
				if (fplus || fspace || val < 0) {
   1026c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	return (buf + _to_udec(buf, value)) - start;
   1026e:	4406      	add	r6, r0
   10270:	a81b      	add	r0, sp, #108	; 0x6c
   10272:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
   10274:	2b00      	cmp	r3, #0
   10276:	f040 8332 	bne.w	108de <z_prf+0x86a>
   1027a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1027c:	2b00      	cmp	r3, #0
   1027e:	f040 832e 	bne.w	108de <z_prf+0x86a>
   10282:	0fff      	lsrs	r7, r7, #31
			if (precision >= 0) {
   10284:	2d00      	cmp	r5, #0
   10286:	da21      	bge.n	102cc <z_prf+0x258>
			zero.predot = zero.postdot = zero.trail = 0;
   10288:	2500      	movs	r5, #0
   1028a:	46ab      	mov	fp, r5
   1028c:	46a8      	mov	r8, r5
   1028e:	e0e1      	b.n	10454 <z_prf+0x3e0>
			switch (c) {
   10290:	2c75      	cmp	r4, #117	; 0x75
   10292:	d0bc      	beq.n	1020e <z_prf+0x19a>
   10294:	2c78      	cmp	r4, #120	; 0x78
   10296:	d0ba      	beq.n	1020e <z_prf+0x19a>
   10298:	2c73      	cmp	r4, #115	; 0x73
   1029a:	f47f af5e 	bne.w	1015a <z_prf+0xe6>
				cptr = va_arg(vargs, char *);
   1029e:	46b1      	mov	r9, r6
					precision = INT_MAX;
   102a0:	2d00      	cmp	r5, #0
   102a2:	bfb8      	it	lt
   102a4:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
   102a8:	2600      	movs	r6, #0
				cptr = va_arg(vargs, char *);
   102aa:	f859 3b04 	ldr.w	r3, [r9], #4
				for (clen = 0; clen < precision; clen++) {
   102ae:	42b5      	cmp	r5, r6
   102b0:	f040 82c9 	bne.w	10846 <z_prf+0x7d2>
   102b4:	462e      	mov	r6, r5
   102b6:	2500      	movs	r5, #0
   102b8:	462f      	mov	r7, r5
   102ba:	e008      	b.n	102ce <z_prf+0x25a>
				break;
   102bc:	2700      	movs	r7, #0
				buf[0] = va_arg(vargs, int);
   102be:	46b1      	mov	r9, r6
				break;
   102c0:	463d      	mov	r5, r7
				clen = 1;
   102c2:	2601      	movs	r6, #1
				buf[0] = va_arg(vargs, int);
   102c4:	f859 3b04 	ldr.w	r3, [r9], #4
   102c8:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
				break;
   102cc:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = precision - clen + prefix;
   102ce:	19ea      	adds	r2, r5, r7
			zero.predot = zero.postdot = zero.trail = 0;
   102d0:	2500      	movs	r5, #0
   102d2:	46ab      	mov	fp, r5
   102d4:	46a8      	mov	r8, r5
				zero_head = precision - clen + prefix;
   102d6:	1b92      	subs	r2, r2, r6
			if (zero_head < 0) {
   102d8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			width -= clen + zero_head;
   102dc:	1991      	adds	r1, r2, r6
   102de:	9106      	str	r1, [sp, #24]
   102e0:	9909      	ldr	r1, [sp, #36]	; 0x24
   102e2:	1990      	adds	r0, r2, r6
   102e4:	1a0c      	subs	r4, r1, r0
			if (!fminus && width > 0) {
   102e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   102e8:	b911      	cbnz	r1, 102f0 <z_prf+0x27c>
   102ea:	2c00      	cmp	r4, #0
   102ec:	f300 8314 	bgt.w	10918 <z_prf+0x8a4>
			while (prefix-- > 0) {
   102f0:	eb03 0a07 	add.w	sl, r3, r7
   102f4:	4553      	cmp	r3, sl
   102f6:	f040 8313 	bne.w	10920 <z_prf+0x8ac>
			while (zero_head-- > 0) {
   102fa:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
   102fe:	f080 831d 	bcs.w	1093c <z_prf+0x8c8>
			clen -= prefix;
   10302:	1bf6      	subs	r6, r6, r7
			if (zero.predot) {
   10304:	f1b8 0f00 	cmp.w	r8, #0
   10308:	d011      	beq.n	1032e <z_prf+0x2ba>
				c = *cptr;
   1030a:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c)) {
   1030e:	eb0a 0706 	add.w	r7, sl, r6
   10312:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   10316:	2b09      	cmp	r3, #9
   10318:	eba7 060a 	sub.w	r6, r7, sl
   1031c:	f240 8319 	bls.w	10952 <z_prf+0x8de>
   10320:	4647      	mov	r7, r8
				while (zero.predot-- > 0) {
   10322:	f117 37ff 	adds.w	r7, r7, #4294967295	; 0xffffffff
   10326:	f080 831d 	bcs.w	10964 <z_prf+0x8f0>
				clen -= zero.predot;
   1032a:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.postdot) {
   1032e:	f1bb 0f00 	cmp.w	fp, #0
   10332:	d015      	beq.n	10360 <z_prf+0x2ec>
   10334:	eb0a 0706 	add.w	r7, sl, r6
					c = *cptr++;
   10338:	f81a 8b01 	ldrb.w	r8, [sl], #1
					PUTC(c);
   1033c:	9903      	ldr	r1, [sp, #12]
   1033e:	4640      	mov	r0, r8
   10340:	9b02      	ldr	r3, [sp, #8]
   10342:	4798      	blx	r3
   10344:	3001      	adds	r0, #1
   10346:	f43f aeab 	beq.w	100a0 <z_prf+0x2c>
				} while (c != '.');
   1034a:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
   1034e:	eba7 060a 	sub.w	r6, r7, sl
   10352:	d1f1      	bne.n	10338 <z_prf+0x2c4>
				while (zero.postdot-- > 0) {
   10354:	465f      	mov	r7, fp
   10356:	2f00      	cmp	r7, #0
   10358:	f300 830d 	bgt.w	10976 <z_prf+0x902>
				clen -= zero.postdot;
   1035c:	eba6 060b 	sub.w	r6, r6, fp
			if (zero.trail) {
   10360:	b195      	cbz	r5, 10388 <z_prf+0x314>
				c = *cptr;
   10362:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c) || c == '.') {
   10366:	eb0a 0706 	add.w	r7, sl, r6
   1036a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1036e:	2b09      	cmp	r3, #9
   10370:	eba7 060a 	sub.w	r6, r7, sl
   10374:	f240 830a 	bls.w	1098c <z_prf+0x918>
   10378:	282e      	cmp	r0, #46	; 0x2e
   1037a:	f000 8307 	beq.w	1098c <z_prf+0x918>
				while (zero.trail-- > 0) {
   1037e:	462f      	mov	r7, r5
   10380:	2f00      	cmp	r7, #0
   10382:	f300 830c 	bgt.w	1099e <z_prf+0x92a>
				clen -= zero.trail;
   10386:	1b76      	subs	r6, r6, r5
   10388:	4456      	add	r6, sl
   1038a:	e31b      	b.n	109c4 <z_prf+0x950>
	} else if (fplus) {
   1038c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1038e:	b123      	cbz	r3, 1039a <z_prf+0x326>
		*buf++ = '+';
   10390:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
   10392:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   10396:	4639      	mov	r1, r7
   10398:	e762      	b.n	10260 <z_prf+0x1ec>
	} else if (fspace) {
   1039a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1039c:	b10b      	cbz	r3, 103a2 <z_prf+0x32e>
		*buf++ = ' ';
   1039e:	2320      	movs	r3, #32
   103a0:	e7f7      	b.n	10392 <z_prf+0x31e>
	} else if (fspace) {
   103a2:	4639      	mov	r1, r7
   103a4:	ae1b      	add	r6, sp, #108	; 0x6c
   103a6:	e75d      	b.n	10264 <z_prf+0x1f0>
   103a8:	0002050d 	.word	0x0002050d
   103ac:	00020513 	.word	0x00020513
				u.d = va_arg(vargs, double);
   103b0:	f106 0907 	add.w	r9, r6, #7
   103b4:	f029 0907 	bic.w	r9, r9, #7
   103b8:	e8f9 2302 	ldrd	r2, r3, [r9], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
   103bc:	02d8      	lsls	r0, r3, #11
   103be:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
   103c2:	02d6      	lsls	r6, r2, #11
   103c4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
	if (sign) {
   103c8:	2a00      	cmp	r2, #0
	exp = double_temp >> 52 & 0x7ff;
   103ca:	f3c3 510a 	ubfx	r1, r3, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
   103ce:	9604      	str	r6, [sp, #16]
   103d0:	9005      	str	r0, [sp, #20]
	if (sign) {
   103d2:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
   103d6:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   103da:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
	if (sign) {
   103de:	da41      	bge.n	10464 <z_prf+0x3f0>
		*buf++ = '-';
   103e0:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
   103e2:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   103e6:	f10d 076d 	add.w	r7, sp, #109	; 0x6d
	if (exp == 0x7ff) {
   103ea:	f240 73ff 	movw	r3, #2047	; 0x7ff
   103ee:	4299      	cmp	r1, r3
   103f0:	d153      	bne.n	1049a <z_prf+0x426>
		if (!fract) {
   103f2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   103f6:	430a      	orrs	r2, r1
   103f8:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
   103fc:	f107 0303 	add.w	r3, r7, #3
   10400:	d140      	bne.n	10484 <z_prf+0x410>
			if (isupper(c)) {
   10402:	2c19      	cmp	r4, #25
   10404:	d838      	bhi.n	10478 <z_prf+0x404>
				*buf++ = 'I';
   10406:	2249      	movs	r2, #73	; 0x49
   10408:	703a      	strb	r2, [r7, #0]
				*buf++ = 'N';
   1040a:	224e      	movs	r2, #78	; 0x4e
   1040c:	707a      	strb	r2, [r7, #1]
				*buf++ = 'F';
   1040e:	2246      	movs	r2, #70	; 0x46
		*buf = 0;
   10410:	2500      	movs	r5, #0
			zero.predot = zero.postdot = zero.trail = 0;
   10412:	46ab      	mov	fp, r5
   10414:	46a8      	mov	r8, r5
		return buf - start;
   10416:	ae1b      	add	r6, sp, #108	; 0x6c
				*buf++ = 'n';
   10418:	70ba      	strb	r2, [r7, #2]
		*buf = 0;
   1041a:	70fd      	strb	r5, [r7, #3]
		return buf - start;
   1041c:	1b9b      	subs	r3, r3, r6
				if (fplus || fspace || (buf[0] == '-')) {
   1041e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10420:	2a00      	cmp	r2, #0
   10422:	f040 81ec 	bne.w	107fe <z_prf+0x78a>
   10426:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10428:	2a00      	cmp	r2, #0
   1042a:	f040 81e8 	bne.w	107fe <z_prf+0x78a>
   1042e:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
   10432:	f1a7 022d 	sub.w	r2, r7, #45	; 0x2d
   10436:	4257      	negs	r7, r2
   10438:	4157      	adcs	r7, r2
				clen += zero.predot + zero.postdot + zero.trail;
   1043a:	eb05 0608 	add.w	r6, r5, r8
   1043e:	4433      	add	r3, r6
   10440:	eb03 060b 	add.w	r6, r3, fp
				if (!isdigit(buf[prefix])) {
   10444:	ab22      	add	r3, sp, #136	; 0x88
   10446:	443b      	add	r3, r7
   10448:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
   1044c:	3b30      	subs	r3, #48	; 0x30
   1044e:	2b09      	cmp	r3, #9
   10450:	f200 8249 	bhi.w	108e6 <z_prf+0x872>
			} else if (fzero) {
   10454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10456:	2b00      	cmp	r3, #0
   10458:	f000 8248 	beq.w	108ec <z_prf+0x878>
   1045c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1045e:	1b9a      	subs	r2, r3, r6
   10460:	ab1b      	add	r3, sp, #108	; 0x6c
   10462:	e739      	b.n	102d8 <z_prf+0x264>
	} else if (fplus) {
   10464:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10466:	b10b      	cbz	r3, 1046c <z_prf+0x3f8>
		*buf++ = '+';
   10468:	232b      	movs	r3, #43	; 0x2b
   1046a:	e7ba      	b.n	103e2 <z_prf+0x36e>
	} else if (fspace) {
   1046c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1046e:	b10b      	cbz	r3, 10474 <z_prf+0x400>
		*buf++ = ' ';
   10470:	2320      	movs	r3, #32
   10472:	e7b6      	b.n	103e2 <z_prf+0x36e>
	} else if (fspace) {
   10474:	af1b      	add	r7, sp, #108	; 0x6c
   10476:	e7b8      	b.n	103ea <z_prf+0x376>
				*buf++ = 'i';
   10478:	2269      	movs	r2, #105	; 0x69
   1047a:	703a      	strb	r2, [r7, #0]
				*buf++ = 'n';
   1047c:	226e      	movs	r2, #110	; 0x6e
   1047e:	707a      	strb	r2, [r7, #1]
				*buf++ = 'f';
   10480:	2266      	movs	r2, #102	; 0x66
   10482:	e7c5      	b.n	10410 <z_prf+0x39c>
			if (isupper(c)) {
   10484:	2c19      	cmp	r4, #25
				*buf++ = 'N';
   10486:	bf99      	ittee	ls
   10488:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
   1048a:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
   1048c:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
   1048e:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
   10490:	bf94      	ite	ls
   10492:	703a      	strbls	r2, [r7, #0]
				*buf++ = 'n';
   10494:	703a      	strbhi	r2, [r7, #0]
				*buf++ = 'a';
   10496:	7079      	strb	r1, [r7, #1]
   10498:	e7ba      	b.n	10410 <z_prf+0x39c>
	if ((exp | fract) != 0) {
   1049a:	9b04      	ldr	r3, [sp, #16]
   1049c:	9805      	ldr	r0, [sp, #20]
   1049e:	430b      	orrs	r3, r1
   104a0:	9310      	str	r3, [sp, #64]	; 0x40
   104a2:	17cb      	asrs	r3, r1, #31
   104a4:	4303      	orrs	r3, r0
		c = 'f';
   104a6:	2c46      	cmp	r4, #70	; 0x46
	if ((exp | fract) != 0) {
   104a8:	9311      	str	r3, [sp, #68]	; 0x44
		c = 'f';
   104aa:	bf08      	it	eq
   104ac:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
   104ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   104b2:	4313      	orrs	r3, r2
   104b4:	f000 8111 	beq.w	106da <z_prf+0x666>
		if (exp == 0) {
   104b8:	2900      	cmp	r1, #0
   104ba:	f000 809b 	beq.w	105f4 <z_prf+0x580>
		fract |= HIGHBIT64;
   104be:	2600      	movs	r6, #0
   104c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
   104c2:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
   104c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   104ca:	9317      	str	r3, [sp, #92]	; 0x5c
	while (exp <= -3) {
   104cc:	f118 0f02 	cmn.w	r8, #2
   104d0:	f2c0 80a4 	blt.w	1061c <z_prf+0x5a8>
	while (exp > 0) {
   104d4:	f1b8 0f00 	cmp.w	r8, #0
   104d8:	f300 80dd 	bgt.w	10696 <z_prf+0x622>
		_rlrshift(&fract);
   104dc:	a816      	add	r0, sp, #88	; 0x58
		exp++;
   104de:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
   104e2:	f00c fe9a 	bl	1d21a <_rlrshift>
	while (exp < (0 + 4)) {
   104e6:	f1b8 0f04 	cmp.w	r8, #4
   104ea:	d1f7      	bne.n	104dc <z_prf+0x468>
		precision = 6;		/* Default precision if none given */
   104ec:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
   104ee:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
   104f2:	bfb8      	it	lt
   104f4:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
   104f6:	2b47      	cmp	r3, #71	; 0x47
   104f8:	f040 80f8 	bne.w	106ec <z_prf+0x678>
		if (decexp < (-4 + 1) || decexp > precision) {
   104fc:	1cf1      	adds	r1, r6, #3
   104fe:	db02      	blt.n	10506 <z_prf+0x492>
   10500:	42ae      	cmp	r6, r5
   10502:	f340 80ed 	ble.w	106e0 <z_prf+0x66c>
			c += 'e' - 'g';
   10506:	3c02      	subs	r4, #2
   10508:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
   1050a:	2d00      	cmp	r5, #0
   1050c:	f000 80f4 	beq.w	106f8 <z_prf+0x684>
				precision--;
   10510:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
   10512:	f1bb 0f00 	cmp.w	fp, #0
   10516:	f040 80ef 	bne.w	106f8 <z_prf+0x684>
   1051a:	2d00      	cmp	r5, #0
   1051c:	bfd4      	ite	le
   1051e:	f04f 0a00 	movle.w	sl, #0
   10522:	f04f 0a01 	movgt.w	sl, #1
	if (c == 'f') {
   10526:	2c66      	cmp	r4, #102	; 0x66
   10528:	f040 80e8 	bne.w	106fc <z_prf+0x688>
		if (exp < 0) {
   1052c:	eb16 0805 	adds.w	r8, r6, r5
   10530:	f140 80ec 	bpl.w	1070c <z_prf+0x698>
	digit_count = 16;
   10534:	2310      	movs	r3, #16
   10536:	2466      	movs	r4, #102	; 0x66
			exp = 0;
   10538:	f04f 0800 	mov.w	r8, #0
	digit_count = 16;
   1053c:	9315      	str	r3, [sp, #84]	; 0x54
	ltemp = 0x0800000000000000;
   1053e:	2200      	movs	r2, #0
   10540:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   10544:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	while (exp--) {
   10548:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
   1054c:	f080 80e0 	bcs.w	10710 <z_prf+0x69c>
	fract += ltemp;
   10550:	9b16      	ldr	r3, [sp, #88]	; 0x58
   10552:	9a18      	ldr	r2, [sp, #96]	; 0x60
   10554:	9919      	ldr	r1, [sp, #100]	; 0x64
   10556:	189b      	adds	r3, r3, r2
   10558:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1055a:	eb41 0202 	adc.w	r2, r1, r2
   1055e:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
	if ((fract >> 32) & 0xF0000000) {
   10562:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
   10566:	9312      	str	r3, [sp, #72]	; 0x48
   10568:	2300      	movs	r3, #0
   1056a:	9313      	str	r3, [sp, #76]	; 0x4c
   1056c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   10570:	4313      	orrs	r3, r2
   10572:	d006      	beq.n	10582 <z_prf+0x50e>
		_ldiv5(&fract);
   10574:	a816      	add	r0, sp, #88	; 0x58
   10576:	f00c fe61 	bl	1d23c <_ldiv5>
		_rlrshift(&fract);
   1057a:	a816      	add	r0, sp, #88	; 0x58
   1057c:	f00c fe4d 	bl	1d21a <_rlrshift>
		decexp++;
   10580:	3601      	adds	r6, #1
	if (c == 'f') {
   10582:	2c66      	cmp	r4, #102	; 0x66
   10584:	f040 80e1 	bne.w	1074a <z_prf+0x6d6>
		if (decexp > 0) {
   10588:	2e00      	cmp	r6, #0
   1058a:	f340 80c8 	ble.w	1071e <z_prf+0x6aa>
			while (decexp > 0 && digit_count > 0) {
   1058e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10590:	2b00      	cmp	r3, #0
   10592:	dd07      	ble.n	105a4 <z_prf+0x530>
				*buf++ = _get_digit(&fract, &digit_count);
   10594:	a915      	add	r1, sp, #84	; 0x54
   10596:	a816      	add	r0, sp, #88	; 0x58
   10598:	f00c fe7b 	bl	1d292 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   1059c:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
   1059e:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
   105a2:	d1f4      	bne.n	1058e <z_prf+0x51a>
			zp->predot = decexp;
   105a4:	46b0      	mov	r8, r6
   105a6:	463b      	mov	r3, r7
			decexp = 0;
   105a8:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
   105aa:	f1bb 0f00 	cmp.w	fp, #0
   105ae:	d101      	bne.n	105b4 <z_prf+0x540>
   105b0:	2d00      	cmp	r5, #0
   105b2:	dd15      	ble.n	105e0 <z_prf+0x56c>
			*buf++ = '.';
   105b4:	222e      	movs	r2, #46	; 0x2e
   105b6:	f803 2b01 	strb.w	r2, [r3], #1
		if (decexp < 0 && precision > 0) {
   105ba:	2e00      	cmp	r6, #0
   105bc:	f000 80c0 	beq.w	10740 <z_prf+0x6cc>
   105c0:	2d00      	cmp	r5, #0
   105c2:	f340 80bf 	ble.w	10744 <z_prf+0x6d0>
			zp->postdot = -decexp;
   105c6:	f1c6 0b00 	rsb	fp, r6, #0
   105ca:	45ab      	cmp	fp, r5
   105cc:	bfa8      	it	ge
   105ce:	46ab      	movge	fp, r5
			precision -= zp->postdot;
   105d0:	eba5 050b 	sub.w	r5, r5, fp
		while (precision > 0 && digit_count > 0) {
   105d4:	2d00      	cmp	r5, #0
   105d6:	dd03      	ble.n	105e0 <z_prf+0x56c>
   105d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   105da:	2a00      	cmp	r2, #0
   105dc:	f300 80a6 	bgt.w	1072c <z_prf+0x6b8>
	if (prune_zero) {
   105e0:	f1ba 0f00 	cmp.w	sl, #0
   105e4:	f040 80c6 	bne.w	10774 <z_prf+0x700>
	*buf = 0;
   105e8:	2200      	movs	r2, #0
	return buf - start;
   105ea:	ae1b      	add	r6, sp, #108	; 0x6c
	*buf = 0;
   105ec:	701a      	strb	r2, [r3, #0]
	return buf - start;
   105ee:	1b9b      	subs	r3, r3, r6
   105f0:	e715      	b.n	1041e <z_prf+0x3aa>
				exp--;
   105f2:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
   105f4:	9b04      	ldr	r3, [sp, #16]
   105f6:	18db      	adds	r3, r3, r3
   105f8:	9304      	str	r3, [sp, #16]
   105fa:	9b05      	ldr	r3, [sp, #20]
   105fc:	415b      	adcs	r3, r3
   105fe:	9305      	str	r3, [sp, #20]
   10600:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10604:	2a00      	cmp	r2, #0
   10606:	f173 0300 	sbcs.w	r3, r3, #0
   1060a:	daf2      	bge.n	105f2 <z_prf+0x57e>
   1060c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10610:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   10614:	e753      	b.n	104be <z_prf+0x44a>
			_rlrshift(&fract);
   10616:	a816      	add	r0, sp, #88	; 0x58
   10618:	f00c fdff 	bl	1d21a <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
   1061c:	e9dd ec16 	ldrd	lr, ip, [sp, #88]	; 0x58
   10620:	2300      	movs	r3, #0
   10622:	2100      	movs	r1, #0
   10624:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
   10628:	930d      	str	r3, [sp, #52]	; 0x34
   1062a:	48bc      	ldr	r0, [pc, #752]	; (1091c <z_prf+0x8a8>)
   1062c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   10630:	4299      	cmp	r1, r3
   10632:	bf08      	it	eq
   10634:	4290      	cmpeq	r0, r2
   10636:	f108 0801 	add.w	r8, r8, #1
   1063a:	d3ec      	bcc.n	10616 <z_prf+0x5a2>
		fract *= 5U;
   1063c:	2005      	movs	r0, #5
   1063e:	fbae 2300 	umull	r2, r3, lr, r0
   10642:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10646:	9b07      	ldr	r3, [sp, #28]
		decexp--;
   10648:	3e01      	subs	r6, #1
		fract *= 5U;
   1064a:	fb00 330c 	mla	r3, r0, ip, r3
		decexp--;
   1064e:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
   10652:	9307      	str	r3, [sp, #28]
   10654:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   10658:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		while ((fract >> 32) <= (MAXFP1 / 2)) {
   1065c:	2100      	movs	r1, #0
   1065e:	2300      	movs	r3, #0
   10660:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   10664:	9807      	ldr	r0, [sp, #28]
   10666:	428b      	cmp	r3, r1
   10668:	bf08      	it	eq
   1066a:	4282      	cmpeq	r2, r0
   1066c:	d208      	bcs.n	10680 <z_prf+0x60c>
   1066e:	f1bc 0f00 	cmp.w	ip, #0
   10672:	f43f af2b 	beq.w	104cc <z_prf+0x458>
   10676:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1067a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   1067e:	e725      	b.n	104cc <z_prf+0x458>
			fract <<= 1;
   10680:	9b06      	ldr	r3, [sp, #24]
			exp--;
   10682:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			fract <<= 1;
   10686:	18db      	adds	r3, r3, r3
   10688:	9306      	str	r3, [sp, #24]
   1068a:	9b07      	ldr	r3, [sp, #28]
   1068c:	f04f 0c01 	mov.w	ip, #1
   10690:	415b      	adcs	r3, r3
   10692:	9307      	str	r3, [sp, #28]
			exp--;
   10694:	e7e2      	b.n	1065c <z_prf+0x5e8>
		_ldiv5(&fract);
   10696:	a816      	add	r0, sp, #88	; 0x58
   10698:	f00c fdd0 	bl	1d23c <_ldiv5>
		exp--;
   1069c:	e9dd ae16 	ldrd	sl, lr, [sp, #88]	; 0x58
		decexp++;
   106a0:	f04f 0c00 	mov.w	ip, #0
		exp--;
   106a4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
   106a8:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
   106aa:	2300      	movs	r3, #0
   106ac:	2100      	movs	r1, #0
   106ae:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   106b2:	4299      	cmp	r1, r3
   106b4:	bf08      	it	eq
   106b6:	4570      	cmpeq	r0, lr
   106b8:	d206      	bcs.n	106c8 <z_prf+0x654>
   106ba:	f1bc 0f00 	cmp.w	ip, #0
   106be:	f43f af09 	beq.w	104d4 <z_prf+0x460>
   106c2:	e9cd ae16 	strd	sl, lr, [sp, #88]	; 0x58
   106c6:	e705      	b.n	104d4 <z_prf+0x460>
			fract <<= 1;
   106c8:	eb1a 0a0a 	adds.w	sl, sl, sl
   106cc:	eb4e 0e0e 	adc.w	lr, lr, lr
			exp--;
   106d0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   106d4:	f04f 0c01 	mov.w	ip, #1
   106d8:	e7e7      	b.n	106aa <z_prf+0x636>
	if ((exp | fract) != 0) {
   106da:	2600      	movs	r6, #0
   106dc:	46b0      	mov	r8, r6
   106de:	e6fd      	b.n	104dc <z_prf+0x468>
			precision -= decexp;
   106e0:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
   106e2:	f1bb 0f00 	cmp.w	fp, #0
   106e6:	d104      	bne.n	106f2 <z_prf+0x67e>
			c = 'f';
   106e8:	2466      	movs	r4, #102	; 0x66
   106ea:	e716      	b.n	1051a <z_prf+0x4a6>
	prune_zero = false;		/* Assume trailing 0's allowed     */
   106ec:	f04f 0a00 	mov.w	sl, #0
   106f0:	e719      	b.n	10526 <z_prf+0x4b2>
   106f2:	f04f 0a00 	mov.w	sl, #0
   106f6:	e719      	b.n	1052c <z_prf+0x4b8>
   106f8:	f04f 0a00 	mov.w	sl, #0
		exp = precision + 1;
   106fc:	f105 0801 	add.w	r8, r5, #1
	digit_count = 16;
   10700:	2310      	movs	r3, #16
   10702:	4598      	cmp	r8, r3
   10704:	9315      	str	r3, [sp, #84]	; 0x54
	if (exp > 16) {
   10706:	bfa8      	it	ge
   10708:	4698      	movge	r8, r3
   1070a:	e718      	b.n	1053e <z_prf+0x4ca>
		if (exp < 0) {
   1070c:	2466      	movs	r4, #102	; 0x66
   1070e:	e7f7      	b.n	10700 <z_prf+0x68c>
		_ldiv5(&ltemp);
   10710:	a818      	add	r0, sp, #96	; 0x60
   10712:	f00c fd93 	bl	1d23c <_ldiv5>
		_rlrshift(&ltemp);
   10716:	a818      	add	r0, sp, #96	; 0x60
   10718:	f00c fd7f 	bl	1d21a <_rlrshift>
   1071c:	e714      	b.n	10548 <z_prf+0x4d4>
			*buf++ = '0';
   1071e:	463b      	mov	r3, r7
   10720:	2230      	movs	r2, #48	; 0x30
			zero.predot = zero.postdot = zero.trail = 0;
   10722:	f04f 0800 	mov.w	r8, #0
			*buf++ = '0';
   10726:	f803 2b01 	strb.w	r2, [r3], #1
   1072a:	e73e      	b.n	105aa <z_prf+0x536>
			*buf++ = _get_digit(&fract, &digit_count);
   1072c:	a915      	add	r1, sp, #84	; 0x54
   1072e:	a816      	add	r0, sp, #88	; 0x58
   10730:	9306      	str	r3, [sp, #24]
   10732:	f00c fdae 	bl	1d292 <_get_digit>
   10736:	9b06      	ldr	r3, [sp, #24]
			precision--;
   10738:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
   1073a:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
   1073e:	e749      	b.n	105d4 <z_prf+0x560>
			zero.predot = zero.postdot = zero.trail = 0;
   10740:	46b3      	mov	fp, r6
   10742:	e747      	b.n	105d4 <z_prf+0x560>
   10744:	f04f 0b00 	mov.w	fp, #0
   10748:	e74a      	b.n	105e0 <z_prf+0x56c>
		*buf = _get_digit(&fract, &digit_count);
   1074a:	a915      	add	r1, sp, #84	; 0x54
   1074c:	a816      	add	r0, sp, #88	; 0x58
   1074e:	f00c fda0 	bl	1d292 <_get_digit>
		if (*buf++ != '0') {
   10752:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
   10754:	7038      	strb	r0, [r7, #0]
			decexp--;
   10756:	bf18      	it	ne
   10758:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
   1075c:	f1bb 0f00 	cmp.w	fp, #0
   10760:	d138      	bne.n	107d4 <z_prf+0x760>
   10762:	2d00      	cmp	r5, #0
   10764:	dc36      	bgt.n	107d4 <z_prf+0x760>
		if (*buf++ != '0') {
   10766:	1c7b      	adds	r3, r7, #1
	if (prune_zero) {
   10768:	f1ba 0f00 	cmp.w	sl, #0
   1076c:	d044      	beq.n	107f8 <z_prf+0x784>
			zero.predot = zero.postdot = zero.trail = 0;
   1076e:	f04f 0b00 	mov.w	fp, #0
   10772:	46d8      	mov	r8, fp
		while (*--buf == '0')
   10774:	461a      	mov	r2, r3
   10776:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
   1077a:	2930      	cmp	r1, #48	; 0x30
   1077c:	d0fa      	beq.n	10774 <z_prf+0x700>
		if (*buf != '.') {
   1077e:	292e      	cmp	r1, #46	; 0x2e
   10780:	bf18      	it	ne
   10782:	4613      	movne	r3, r2
   10784:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
   10786:	f004 02df 	and.w	r2, r4, #223	; 0xdf
   1078a:	2a45      	cmp	r2, #69	; 0x45
   1078c:	f47f af2c 	bne.w	105e8 <z_prf+0x574>
		if (decexp < 0) {
   10790:	2e00      	cmp	r6, #0
			*buf++ = '-';
   10792:	bfb4      	ite	lt
   10794:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
   10796:	222b      	movge	r2, #43	; 0x2b
		*buf++ = c;
   10798:	4619      	mov	r1, r3
			decexp = -decexp;
   1079a:	bfb8      	it	lt
   1079c:	4276      	neglt	r6, r6
		if (decexp >= 100) {
   1079e:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
   107a0:	f801 4b02 	strb.w	r4, [r1], #2
			*buf++ = '-';
   107a4:	705a      	strb	r2, [r3, #1]
		if (decexp >= 100) {
   107a6:	dd08      	ble.n	107ba <z_prf+0x746>
			*buf++ = (decexp / 100) + '0';
   107a8:	2064      	movs	r0, #100	; 0x64
   107aa:	fb96 f2f0 	sdiv	r2, r6, r0
			decexp %= 100;
   107ae:	fb00 6612 	mls	r6, r0, r2, r6
			*buf++ = (decexp / 100) + '0';
   107b2:	f102 0430 	add.w	r4, r2, #48	; 0x30
   107b6:	1cd9      	adds	r1, r3, #3
   107b8:	709c      	strb	r4, [r3, #2]
		*buf++ = (decexp / 10) + '0';
   107ba:	200a      	movs	r0, #10
   107bc:	fb96 f2f0 	sdiv	r2, r6, r0
   107c0:	460b      	mov	r3, r1
		decexp %= 10;
   107c2:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
   107c6:	f102 0430 	add.w	r4, r2, #48	; 0x30
		*buf++ = decexp + '0';
   107ca:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   107cc:	f803 4b02 	strb.w	r4, [r3], #2
		*buf++ = decexp + '0';
   107d0:	704e      	strb	r6, [r1, #1]
   107d2:	e709      	b.n	105e8 <z_prf+0x574>
			*buf++ = '.';
   107d4:	222e      	movs	r2, #46	; 0x2e
   107d6:	1cbb      	adds	r3, r7, #2
   107d8:	707a      	strb	r2, [r7, #1]
		while (precision > 0 && digit_count > 0) {
   107da:	2d00      	cmp	r5, #0
   107dc:	ddc4      	ble.n	10768 <z_prf+0x6f4>
   107de:	9a15      	ldr	r2, [sp, #84]	; 0x54
   107e0:	2a00      	cmp	r2, #0
   107e2:	ddc1      	ble.n	10768 <z_prf+0x6f4>
			*buf++ = _get_digit(&fract, &digit_count);
   107e4:	a915      	add	r1, sp, #84	; 0x54
   107e6:	a816      	add	r0, sp, #88	; 0x58
   107e8:	9306      	str	r3, [sp, #24]
   107ea:	f00c fd52 	bl	1d292 <_get_digit>
   107ee:	9b06      	ldr	r3, [sp, #24]
			precision--;
   107f0:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
   107f2:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
   107f6:	e7f0      	b.n	107da <z_prf+0x766>
			zero.predot = zero.postdot = zero.trail = 0;
   107f8:	46d3      	mov	fp, sl
   107fa:	46d0      	mov	r8, sl
   107fc:	e7c3      	b.n	10786 <z_prf+0x712>
					prefix = 1;
   107fe:	2701      	movs	r7, #1
   10800:	e61b      	b.n	1043a <z_prf+0x3c6>
				switch (i) {
   10802:	46b1      	mov	r9, r6
   10804:	2f68      	cmp	r7, #104	; 0x68
   10806:	f859 3b04 	ldr.w	r3, [r9], #4
   1080a:	d005      	beq.n	10818 <z_prf+0x7a4>
   1080c:	dc01      	bgt.n	10812 <z_prf+0x79e>
   1080e:	2f48      	cmp	r7, #72	; 0x48
   10810:	d007      	beq.n	10822 <z_prf+0x7ae>
					*va_arg(vargs, int *) = count;
   10812:	9a01      	ldr	r2, [sp, #4]
   10814:	601a      	str	r2, [r3, #0]
					break;
   10816:	e001      	b.n	1081c <z_prf+0x7a8>
					*va_arg(vargs, short *) = count;
   10818:	9a01      	ldr	r2, [sp, #4]
   1081a:	801a      	strh	r2, [r3, #0]
				continue;
   1081c:	464e      	mov	r6, r9
   1081e:	9a08      	ldr	r2, [sp, #32]
   10820:	e430      	b.n	10084 <z_prf+0x10>
					*va_arg(vargs, char *) = count;
   10822:	9a01      	ldr	r2, [sp, #4]
   10824:	701a      	strb	r2, [r3, #0]
					break;
   10826:	e7f9      	b.n	1081c <z_prf+0x7a8>
				val = (uintptr_t) va_arg(vargs, void *);
   10828:	46b1      	mov	r9, r6
		*buf++ = '0';
   1082a:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16);
   1082e:	2210      	movs	r2, #16
   10830:	f859 1b04 	ldr.w	r1, [r9], #4
   10834:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
		*buf++ = '0';
   10838:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
   1083c:	f00c fccb 	bl	1d1d6 <_to_x>
				prefix = 2;
   10840:	2702      	movs	r7, #2
	return len + (buf - buf0);
   10842:	1c86      	adds	r6, r0, #2
				break;
   10844:	e51e      	b.n	10284 <z_prf+0x210>
					if (cptr[clen] == '\0') {
   10846:	5d9a      	ldrb	r2, [r3, r6]
   10848:	2a00      	cmp	r2, #0
   1084a:	d04a      	beq.n	108e2 <z_prf+0x86e>
				for (clen = 0; clen < precision; clen++) {
   1084c:	3601      	adds	r6, #1
   1084e:	e52e      	b.n	102ae <z_prf+0x23a>
	if (alt_form) {
   10850:	ac1b      	add	r4, sp, #108	; 0x6c
	return (buf - buf0) + _to_x(buf, value, 8);
   10852:	2208      	movs	r2, #8
   10854:	4620      	mov	r0, r4
   10856:	f00c fcbe 	bl	1d1d6 <_to_x>
   1085a:	ae1b      	add	r6, sp, #108	; 0x6c
   1085c:	1ba6      	subs	r6, r4, r6
   1085e:	4406      	add	r6, r0
			prefix = 0;
   10860:	2700      	movs	r7, #0
   10862:	e50f      	b.n	10284 <z_prf+0x210>
		*buf++ = '0';
   10864:	f10d 046d 	add.w	r4, sp, #109	; 0x6d
   10868:	e7f3      	b.n	10852 <z_prf+0x7de>
				} else if (c == 'u') {
   1086a:	2c75      	cmp	r4, #117	; 0x75
   1086c:	d105      	bne.n	1087a <z_prf+0x806>
	return _to_x(buf, value, 10);
   1086e:	220a      	movs	r2, #10
   10870:	a81b      	add	r0, sp, #108	; 0x6c
   10872:	f00c fcb0 	bl	1d1d6 <_to_x>
   10876:	4606      	mov	r6, r0
   10878:	e7f2      	b.n	10860 <z_prf+0x7ec>
	if (alt_form) {
   1087a:	f1bb 0f00 	cmp.w	fp, #0
   1087e:	d012      	beq.n	108a6 <z_prf+0x832>
		*buf++ = '0';
   10880:	f647 0330 	movw	r3, #30768	; 0x7830
		*buf++ = 'x';
   10884:	f10d 086e 	add.w	r8, sp, #110	; 0x6e
		*buf++ = '0';
   10888:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
   1088c:	2210      	movs	r2, #16
   1088e:	4640      	mov	r0, r8
   10890:	f00c fca1 	bl	1d1d6 <_to_x>
	if (prefix == 'X') {
   10894:	2c58      	cmp	r4, #88	; 0x58
   10896:	d009      	beq.n	108ac <z_prf+0x838>
	return len + (buf - buf0);
   10898:	ae1b      	add	r6, sp, #108	; 0x6c
   1089a:	eba8 0606 	sub.w	r6, r8, r6
   1089e:	4406      	add	r6, r0
						prefix = 2;
   108a0:	ea4f 074b 	mov.w	r7, fp, lsl #1
   108a4:	e4ee      	b.n	10284 <z_prf+0x210>
	if (alt_form) {
   108a6:	f10d 086c 	add.w	r8, sp, #108	; 0x6c
   108aa:	e7ef      	b.n	1088c <z_prf+0x818>
   108ac:	aa1b      	add	r2, sp, #108	; 0x6c
		if (*buf >= 'a' && *buf <= 'z') {
   108ae:	f812 3b01 	ldrb.w	r3, [r2], #1
   108b2:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   108b6:	2919      	cmp	r1, #25
   108b8:	d803      	bhi.n	108c2 <z_prf+0x84e>
			*buf += 'A' - 'a';
   108ba:	3b20      	subs	r3, #32
   108bc:	f802 3c01 	strb.w	r3, [r2, #-1]
   108c0:	e7f5      	b.n	108ae <z_prf+0x83a>
	} while (*buf++);
   108c2:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   108c6:	2b00      	cmp	r3, #0
   108c8:	d1f1      	bne.n	108ae <z_prf+0x83a>
   108ca:	e7e5      	b.n	10898 <z_prf+0x824>
				PUTC('%');
   108cc:	9903      	ldr	r1, [sp, #12]
   108ce:	4620      	mov	r0, r4
   108d0:	f7ff bbe1 	b.w	10096 <z_prf+0x22>
				count++;
   108d4:	9b01      	ldr	r3, [sp, #4]
   108d6:	3301      	adds	r3, #1
				count += 2;
   108d8:	9301      	str	r3, [sp, #4]
				continue;
   108da:	46b1      	mov	r9, r6
   108dc:	e79e      	b.n	1081c <z_prf+0x7a8>
					prefix = 1;
   108de:	2701      	movs	r7, #1
   108e0:	e4d0      	b.n	10284 <z_prf+0x210>
   108e2:	4615      	mov	r5, r2
   108e4:	e4e8      	b.n	102b8 <z_prf+0x244>
			cptr = buf;
   108e6:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = 0;
   108e8:	2200      	movs	r2, #0
   108ea:	e4f7      	b.n	102dc <z_prf+0x268>
   108ec:	ab1b      	add	r3, sp, #108	; 0x6c
   108ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   108f0:	e4f4      	b.n	102dc <z_prf+0x268>
   108f2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
					PUTC(' ');
   108f6:	9903      	ldr	r1, [sp, #12]
   108f8:	9b02      	ldr	r3, [sp, #8]
   108fa:	2020      	movs	r0, #32
   108fc:	4798      	blx	r3
   108fe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   10902:	3001      	adds	r0, #1
   10904:	f43f abcc 	beq.w	100a0 <z_prf+0x2c>
				while (width-- > 0) {
   10908:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
   1090c:	d2f1      	bcs.n	108f2 <z_prf+0x87e>
				count += width;
   1090e:	9901      	ldr	r1, [sp, #4]
   10910:	4421      	add	r1, r4
   10912:	9101      	str	r1, [sp, #4]
				while (width-- > 0) {
   10914:	4654      	mov	r4, sl
   10916:	e4eb      	b.n	102f0 <z_prf+0x27c>
   10918:	46a2      	mov	sl, r4
   1091a:	e7f5      	b.n	10908 <z_prf+0x894>
   1091c:	33333332 	.word	0x33333332
				PUTC(*cptr++);
   10920:	f813 0b01 	ldrb.w	r0, [r3], #1
   10924:	9903      	ldr	r1, [sp, #12]
   10926:	9309      	str	r3, [sp, #36]	; 0x24
   10928:	9b02      	ldr	r3, [sp, #8]
   1092a:	920a      	str	r2, [sp, #40]	; 0x28
   1092c:	4798      	blx	r3
   1092e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   10932:	3001      	adds	r0, #1
   10934:	f47f acde 	bne.w	102f4 <z_prf+0x280>
   10938:	f7ff bbb2 	b.w	100a0 <z_prf+0x2c>
				PUTC('0');
   1093c:	9903      	ldr	r1, [sp, #12]
   1093e:	2030      	movs	r0, #48	; 0x30
   10940:	9b02      	ldr	r3, [sp, #8]
   10942:	9209      	str	r2, [sp, #36]	; 0x24
   10944:	4798      	blx	r3
   10946:	3001      	adds	r0, #1
   10948:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1094a:	f47f acd6 	bne.w	102fa <z_prf+0x286>
   1094e:	f7ff bba7 	b.w	100a0 <z_prf+0x2c>
					PUTC(c);
   10952:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
   10956:	4798      	blx	r3
   10958:	3001      	adds	r0, #1
   1095a:	f43f aba1 	beq.w	100a0 <z_prf+0x2c>
					c = *++cptr;
   1095e:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
   10962:	e4d6      	b.n	10312 <z_prf+0x29e>
					PUTC('0');
   10964:	9903      	ldr	r1, [sp, #12]
   10966:	2030      	movs	r0, #48	; 0x30
   10968:	9b02      	ldr	r3, [sp, #8]
   1096a:	4798      	blx	r3
   1096c:	3001      	adds	r0, #1
   1096e:	f47f acd8 	bne.w	10322 <z_prf+0x2ae>
   10972:	f7ff bb95 	b.w	100a0 <z_prf+0x2c>
					PUTC('0');
   10976:	9903      	ldr	r1, [sp, #12]
   10978:	2030      	movs	r0, #48	; 0x30
   1097a:	9b02      	ldr	r3, [sp, #8]
   1097c:	4798      	blx	r3
   1097e:	3001      	adds	r0, #1
   10980:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   10984:	f47f ace7 	bne.w	10356 <z_prf+0x2e2>
   10988:	f7ff bb8a 	b.w	100a0 <z_prf+0x2c>
					PUTC(c);
   1098c:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
   10990:	4798      	blx	r3
   10992:	3001      	adds	r0, #1
   10994:	f43f ab84 	beq.w	100a0 <z_prf+0x2c>
					c = *++cptr;
   10998:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
   1099c:	e4e5      	b.n	1036a <z_prf+0x2f6>
					PUTC('0');
   1099e:	9903      	ldr	r1, [sp, #12]
   109a0:	2030      	movs	r0, #48	; 0x30
   109a2:	9b02      	ldr	r3, [sp, #8]
   109a4:	4798      	blx	r3
   109a6:	3001      	adds	r0, #1
   109a8:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   109ac:	f47f ace8 	bne.w	10380 <z_prf+0x30c>
   109b0:	f7ff bb76 	b.w	100a0 <z_prf+0x2c>
				PUTC(*cptr++);
   109b4:	9903      	ldr	r1, [sp, #12]
   109b6:	f81a 0b01 	ldrb.w	r0, [sl], #1
   109ba:	9b02      	ldr	r3, [sp, #8]
   109bc:	4798      	blx	r3
   109be:	3001      	adds	r0, #1
   109c0:	f43f ab6e 	beq.w	100a0 <z_prf+0x2c>
   109c4:	eba6 030a 	sub.w	r3, r6, sl
			while (clen-- > 0) {
   109c8:	2b00      	cmp	r3, #0
   109ca:	dcf3      	bgt.n	109b4 <z_prf+0x940>
			count += clen;
   109cc:	9b01      	ldr	r3, [sp, #4]
   109ce:	9a06      	ldr	r2, [sp, #24]
			if (width > 0) {
   109d0:	2c00      	cmp	r4, #0
			count += clen;
   109d2:	4413      	add	r3, r2
   109d4:	9301      	str	r3, [sp, #4]
			if (width > 0) {
   109d6:	f77f af21 	ble.w	1081c <z_prf+0x7a8>
   109da:	4625      	mov	r5, r4
   109dc:	e006      	b.n	109ec <z_prf+0x978>
					PUTC(' ');
   109de:	9903      	ldr	r1, [sp, #12]
   109e0:	2020      	movs	r0, #32
   109e2:	9b02      	ldr	r3, [sp, #8]
   109e4:	4798      	blx	r3
   109e6:	3001      	adds	r0, #1
   109e8:	f43f ab5a 	beq.w	100a0 <z_prf+0x2c>
				while (width-- > 0) {
   109ec:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
   109f0:	d2f5      	bcs.n	109de <z_prf+0x96a>
				count += width;
   109f2:	9b01      	ldr	r3, [sp, #4]
   109f4:	4423      	add	r3, r4
   109f6:	9301      	str	r3, [sp, #4]
   109f8:	e710      	b.n	1081c <z_prf+0x7a8>
   109fa:	bf00      	nop

000109fc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   109fc:	4b01      	ldr	r3, [pc, #4]	; (10a04 <__stdout_hook_install+0x8>)
   109fe:	6018      	str	r0, [r3, #0]
}
   10a00:	4770      	bx	lr
   10a02:	bf00      	nop
   10a04:	2002c544 	.word	0x2002c544

00010a08 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
   10a08:	b40c      	push	{r2, r3}
   10a0a:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   10a0c:	b909      	cbnz	r1, 10a12 <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
   10a0e:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
   10a12:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
   10a16:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   10a18:	9a06      	ldr	r2, [sp, #24]
   10a1a:	a902      	add	r1, sp, #8
   10a1c:	4805      	ldr	r0, [pc, #20]	; (10a34 <snprintf+0x2c>)
	va_start(vargs, format);
   10a1e:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   10a20:	f7ff fb28 	bl	10074 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
   10a24:	2200      	movs	r2, #0
   10a26:	9b02      	ldr	r3, [sp, #8]
   10a28:	701a      	strb	r2, [r3, #0]
	return r;
}
   10a2a:	b005      	add	sp, #20
   10a2c:	f85d eb04 	ldr.w	lr, [sp], #4
   10a30:	b002      	add	sp, #8
   10a32:	4770      	bx	lr
   10a34:	0001d2c7 	.word	0x0001d2c7

00010a38 <sprintf>:

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
   10a38:	b40e      	push	{r1, r2, r3}
   10a3a:	b50f      	push	{r0, r1, r2, r3, lr}

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   10a3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
   10a40:	ab05      	add	r3, sp, #20
   10a42:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
   10a46:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   10a48:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   10a4a:	4806      	ldr	r0, [pc, #24]	; (10a64 <sprintf+0x2c>)
   10a4c:	a902      	add	r1, sp, #8
	va_start(vargs, format);
   10a4e:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   10a50:	f7ff fb10 	bl	10074 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
   10a54:	2200      	movs	r2, #0
   10a56:	9b02      	ldr	r3, [sp, #8]
   10a58:	701a      	strb	r2, [r3, #0]
	return r;
}
   10a5a:	b004      	add	sp, #16
   10a5c:	f85d eb04 	ldr.w	lr, [sp], #4
   10a60:	b003      	add	sp, #12
   10a62:	4770      	bx	lr
   10a64:	0001d2c7 	.word	0x0001d2c7

00010a68 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   10a68:	b538      	push	{r3, r4, r5, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   10a6a:	4c07      	ldr	r4, [pc, #28]	; (10a88 <net_if_init+0x20>)
   10a6c:	4d07      	ldr	r5, [pc, #28]	; (10a8c <net_if_init+0x24>)
   10a6e:	42ac      	cmp	r4, r5
   10a70:	d100      	bne.n	10a74 <net_if_init+0xc>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   10a72:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   10a74:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   10a76:	681b      	ldr	r3, [r3, #0]
   10a78:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
   10a7a:	b11b      	cbz	r3, 10a84 <net_if_init+0x1c>
   10a7c:	681b      	ldr	r3, [r3, #0]
   10a7e:	b10b      	cbz	r3, 10a84 <net_if_init+0x1c>
	api->init(iface);
   10a80:	4620      	mov	r0, r4
   10a82:	4798      	blx	r3
	     iface++, if_count++) {
   10a84:	3420      	adds	r4, #32
   10a86:	e7f2      	b.n	10a6e <net_if_init+0x6>
   10a88:	2002c740 	.word	0x2002c740
   10a8c:	2002c760 	.word	0x2002c760

00010a90 <net_if_post_init>:

void net_if_post_init(void)
{
   10a90:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   10a92:	4c08      	ldr	r4, [pc, #32]	; (10ab4 <net_if_post_init+0x24>)
   10a94:	4d08      	ldr	r5, [pc, #32]	; (10ab8 <net_if_post_init+0x28>)
   10a96:	42ac      	cmp	r4, r5
   10a98:	d100      	bne.n	10a9c <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   10a9a:	bd38      	pop	{r3, r4, r5, pc}
	return atomic_test_bit(iface->if_dev->flags, value);
   10a9c:	6820      	ldr	r0, [r4, #0]
   10a9e:	2103      	movs	r1, #3
   10aa0:	300c      	adds	r0, #12
   10aa2:	f00c fc24 	bl	1d2ee <atomic_test_bit>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   10aa6:	b910      	cbnz	r0, 10aae <net_if_post_init+0x1e>
			net_if_up(iface);
   10aa8:	4620      	mov	r0, r4
   10aaa:	f00c fc2f 	bl	1d30c <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   10aae:	3420      	adds	r4, #32
   10ab0:	e7f1      	b.n	10a96 <net_if_post_init+0x6>
   10ab2:	bf00      	nop
   10ab4:	2002c740 	.word	0x2002c740
   10ab8:	2002c760 	.word	0x2002c760

00010abc <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	u16_t *w;
	u8_t i, bl, bh, longest = 1U;
	s8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   10abc:	2300      	movs	r3, #0
{
   10abe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	u16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   10ac2:	2802      	cmp	r0, #2
{
   10ac4:	b089      	sub	sp, #36	; 0x24
   10ac6:	4681      	mov	r9, r0
   10ac8:	468a      	mov	sl, r1
   10aca:	4690      	mov	r8, r2
	unsigned char zeros[8] = { 0 };
   10acc:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (family == AF_INET6) {
   10ad0:	d13c      	bne.n	10b4c <z_impl_net_addr_ntop+0x90>
		addr6 = (struct in6_addr *)src;
		w = (u16_t *)addr6->s6_addr16;
   10ad2:	aa06      	add	r2, sp, #24
   10ad4:	4610      	mov	r0, r2
   10ad6:	9104      	str	r1, [sp, #16]
{
   10ad8:	4619      	mov	r1, r3
   10ada:	e006      	b.n	10aea <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   10adc:	7804      	ldrb	r4, [r0, #0]
   10ade:	3101      	adds	r1, #1
   10ae0:	3401      	adds	r4, #1
   10ae2:	7004      	strb	r4, [r0, #0]
			for (j = i; j < 8; j++) {
   10ae4:	b2cc      	uxtb	r4, r1
   10ae6:	2c07      	cmp	r4, #7
   10ae8:	d803      	bhi.n	10af2 <z_impl_net_addr_ntop+0x36>
				if (UNALIGNED_GET(&w[j]) != 0) {
   10aea:	f83a 4011 	ldrh.w	r4, [sl, r1, lsl #1]
   10aee:	2c00      	cmp	r4, #0
   10af0:	d0f4      	beq.n	10adc <z_impl_net_addr_ntop+0x20>
   10af2:	3301      	adds	r3, #1
		for (i = 0U; i < 8; i++) {
   10af4:	2b08      	cmp	r3, #8
   10af6:	f100 0001 	add.w	r0, r0, #1
   10afa:	d1ed      	bne.n	10ad8 <z_impl_net_addr_ntop+0x1c>
	s8_t pos = -1;
   10afc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1U;
   10b00:	2701      	movs	r7, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   10b02:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   10b04:	f812 1b01 	ldrb.w	r1, [r2], #1
   10b08:	42b9      	cmp	r1, r7
				longest = zeros[i];
				pos = i;
   10b0a:	bf88      	it	hi
   10b0c:	b25e      	sxtbhi	r6, r3
		for (i = 0U; i < 8; i++) {
   10b0e:	f103 0301 	add.w	r3, r3, #1
   10b12:	b2db      	uxtb	r3, r3
				pos = i;
   10b14:	bf88      	it	hi
   10b16:	460f      	movhi	r7, r1
		for (i = 0U; i < 8; i++) {
   10b18:	2b08      	cmp	r3, #8
   10b1a:	d1f3      	bne.n	10b04 <z_impl_net_addr_ntop+0x48>
		len = 8;
   10b1c:	9303      	str	r3, [sp, #12]
   10b1e:	2f01      	cmp	r7, #1
   10b20:	f04f 033a 	mov.w	r3, #58	; 0x3a
   10b24:	bf08      	it	eq
   10b26:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
   10b2a:	9302      	str	r3, [sp, #8]
	bool needcolon = false;
   10b2c:	2200      	movs	r2, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   10b2e:	4644      	mov	r4, r8
   10b30:	4615      	mov	r5, r2
   10b32:	9b03      	ldr	r3, [sp, #12]
   10b34:	429d      	cmp	r5, r3
   10b36:	db19      	blt.n	10b6c <z_impl_net_addr_ntop+0xb0>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   10b38:	4544      	cmp	r4, r8
   10b3a:	d009      	beq.n	10b50 <z_impl_net_addr_ntop+0x94>
		return NULL;
	}

	if (family == AF_INET) {
   10b3c:	2300      	movs	r3, #0
   10b3e:	f1b9 0f01 	cmp.w	r9, #1
		*(ptr - 1) = '\0';
   10b42:	bf0c      	ite	eq
   10b44:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   10b48:	7023      	strbne	r3, [r4, #0]
   10b4a:	e003      	b.n	10b54 <z_impl_net_addr_ntop+0x98>
	} else if (family == AF_INET) {
   10b4c:	2801      	cmp	r0, #1
   10b4e:	d005      	beq.n	10b5c <z_impl_net_addr_ntop+0xa0>
		return NULL;
   10b50:	f04f 0800 	mov.w	r8, #0
	}

	return dst;
}
   10b54:	4640      	mov	r0, r8
   10b56:	b009      	add	sp, #36	; 0x24
   10b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   10b5c:	232e      	movs	r3, #46	; 0x2e
   10b5e:	2204      	movs	r2, #4
	s8_t pos = -1;
   10b60:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		delim = '.';
   10b64:	e9cd 3202 	strd	r3, r2, [sp, #8]
	u8_t i, bl, bh, longest = 1U;
   10b68:	4607      	mov	r7, r0
   10b6a:	e7df      	b.n	10b2c <z_impl_net_addr_ntop+0x70>
		if (len == 4) {
   10b6c:	9b03      	ldr	r3, [sp, #12]
   10b6e:	2b04      	cmp	r3, #4
   10b70:	d134      	bne.n	10bdc <z_impl_net_addr_ntop+0x120>
			value = (u32_t)addr->s4_addr[i];
   10b72:	f81a 1005 	ldrb.w	r1, [sl, r5]
			if (value == 0U) {
   10b76:	b949      	cbnz	r1, 10b8c <z_impl_net_addr_ntop+0xd0>
				*ptr++ = '0';
   10b78:	2330      	movs	r3, #48	; 0x30
   10b7a:	4620      	mov	r0, r4
   10b7c:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   10b80:	9b02      	ldr	r3, [sp, #8]
   10b82:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   10b84:	3501      	adds	r5, #1
   10b86:	b2ed      	uxtb	r5, r5
   10b88:	4604      	mov	r4, r0
   10b8a:	e7d2      	b.n	10b32 <z_impl_net_addr_ntop+0x76>
			l = net_value_to_udec(ptr, value, 0);
   10b8c:	2009      	movs	r0, #9
   10b8e:	f04f 0b00 	mov.w	fp, #0
   10b92:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 10c6c <z_impl_net_addr_ntop+0x1b0>
   10b96:	9401      	str	r4, [sp, #4]
		temp = value / divisor;
   10b98:	fbb1 fefc 	udiv	lr, r1, ip
		value = value % divisor;
   10b9c:	fb0c 131e 	mls	r3, ip, lr, r1
		if ((precision > i) || (temp != 0)) {
   10ba0:	4583      	cmp	fp, r0
		value = value % divisor;
   10ba2:	9305      	str	r3, [sp, #20]
		if ((precision > i) || (temp != 0)) {
   10ba4:	dc01      	bgt.n	10baa <z_impl_net_addr_ntop+0xee>
   10ba6:	4561      	cmp	r1, ip
   10ba8:	d306      	bcc.n	10bb8 <z_impl_net_addr_ntop+0xfc>
			*buf++ = (char) (temp + '0');
   10baa:	4683      	mov	fp, r0
   10bac:	9b01      	ldr	r3, [sp, #4]
   10bae:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
   10bb2:	f803 eb01 	strb.w	lr, [r3], #1
   10bb6:	9301      	str	r3, [sp, #4]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   10bb8:	230a      	movs	r3, #10
   10bba:	3801      	subs	r0, #1
   10bbc:	fbbc fcf3 	udiv	ip, ip, r3
   10bc0:	1c43      	adds	r3, r0, #1
		value = value % divisor;
   10bc2:	9905      	ldr	r1, [sp, #20]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   10bc4:	d1e8      	bne.n	10b98 <z_impl_net_addr_ntop+0xdc>
	*buf = 0;
   10bc6:	f04f 0300 	mov.w	r3, #0
   10bca:	9901      	ldr	r1, [sp, #4]
   10bcc:	700b      	strb	r3, [r1, #0]
	return buf - start;
   10bce:	1b0b      	subs	r3, r1, r4
			ptr += l;
   10bd0:	b2db      	uxtb	r3, r3
			*ptr++ = delim;
   10bd2:	9902      	ldr	r1, [sp, #8]
			ptr += l;
   10bd4:	18e0      	adds	r0, r4, r3
			*ptr++ = delim;
   10bd6:	3001      	adds	r0, #1
   10bd8:	54e1      	strb	r1, [r4, r3]
			continue;
   10bda:	e7d3      	b.n	10b84 <z_impl_net_addr_ntop+0xc8>
		if (i == pos) {
   10bdc:	42ae      	cmp	r6, r5
   10bde:	d10d      	bne.n	10bfc <z_impl_net_addr_ntop+0x140>
			if (needcolon || i == 0U) {
   10be0:	b902      	cbnz	r2, 10be4 <z_impl_net_addr_ntop+0x128>
   10be2:	b916      	cbnz	r6, 10bea <z_impl_net_addr_ntop+0x12e>
				*ptr++ = ':';
   10be4:	233a      	movs	r3, #58	; 0x3a
   10be6:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   10bea:	233a      	movs	r3, #58	; 0x3a
   10bec:	4620      	mov	r0, r4
   10bee:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   10bf2:	1e7b      	subs	r3, r7, #1
   10bf4:	441d      	add	r5, r3
   10bf6:	b2ed      	uxtb	r5, r5
			needcolon = false;
   10bf8:	2200      	movs	r2, #0
			continue;
   10bfa:	e7c3      	b.n	10b84 <z_impl_net_addr_ntop+0xc8>
		if (needcolon) {
   10bfc:	b112      	cbz	r2, 10c04 <z_impl_net_addr_ntop+0x148>
			*ptr++ = ':';
   10bfe:	233a      	movs	r3, #58	; 0x3a
   10c00:	f804 3b01 	strb.w	r3, [r4], #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   10c04:	9b04      	ldr	r3, [sp, #16]
   10c06:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   10c0a:	021a      	lsls	r2, r3, #8
   10c0c:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
   10c10:	b212      	sxth	r2, r2
		bh = value >> 8;
   10c12:	f3c2 2307 	ubfx	r3, r2, #8, #8
		bl = value & 0xff;
   10c16:	fa5f fb82 	uxtb.w	fp, r2
		if (bh) {
   10c1a:	b1b3      	cbz	r3, 10c4a <z_impl_net_addr_ntop+0x18e>
			if (bh > 0x0f) {
   10c1c:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   10c1e:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   10c20:	d90b      	bls.n	10c3a <z_impl_net_addr_ntop+0x17e>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   10c22:	2300      	movs	r3, #0
   10c24:	2261      	movs	r2, #97	; 0x61
   10c26:	4620      	mov	r0, r4
   10c28:	f00c fb9f 	bl	1d36a <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   10c2c:	2301      	movs	r3, #1
   10c2e:	2261      	movs	r2, #97	; 0x61
   10c30:	4659      	mov	r1, fp
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   10c32:	f00c fb9a 	bl	1d36a <net_byte_to_hex>
		needcolon = true;
   10c36:	2201      	movs	r2, #1
   10c38:	e7a4      	b.n	10b84 <z_impl_net_addr_ntop+0xc8>
				if (bh < 10) {
   10c3a:	b25b      	sxtb	r3, r3
   10c3c:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   10c3e:	bf94      	ite	ls
   10c40:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   10c42:	3357      	addhi	r3, #87	; 0x57
   10c44:	1c60      	adds	r0, r4, #1
   10c46:	7023      	strb	r3, [r4, #0]
   10c48:	e7f0      	b.n	10c2c <z_impl_net_addr_ntop+0x170>
		} else if (bl > 0x0f) {
   10c4a:	f1bb 0f0f 	cmp.w	fp, #15
   10c4e:	d903      	bls.n	10c58 <z_impl_net_addr_ntop+0x19c>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   10c50:	2261      	movs	r2, #97	; 0x61
   10c52:	4659      	mov	r1, fp
   10c54:	4620      	mov	r0, r4
   10c56:	e7ec      	b.n	10c32 <z_impl_net_addr_ntop+0x176>
			if (bl < 10) {
   10c58:	b252      	sxtb	r2, r2
   10c5a:	f1bb 0f09 	cmp.w	fp, #9
				*ptr++ = (char)(bl + '0');
   10c5e:	bf94      	ite	ls
   10c60:	3230      	addls	r2, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   10c62:	3257      	addhi	r2, #87	; 0x57
   10c64:	1c60      	adds	r0, r4, #1
   10c66:	7022      	strb	r2, [r4, #0]
   10c68:	e7e5      	b.n	10c36 <z_impl_net_addr_ntop+0x17a>
   10c6a:	bf00      	nop
   10c6c:	3b9aca00 	.word	0x3b9aca00

00010c70 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   10c70:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   10c72:	4b09      	ldr	r3, [pc, #36]	; (10c98 <gpio_nrfx_init+0x28>)
   10c74:	781a      	ldrb	r2, [r3, #0]
   10c76:	b96a      	cbnz	r2, 10c94 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   10c78:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   10c7a:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   10c7c:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   10c7e:	2105      	movs	r1, #5
   10c80:	f7fe fba0 	bl	f3c4 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
   10c84:	2031      	movs	r0, #49	; 0x31
   10c86:	f7fe fb8d 	bl	f3a4 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   10c8a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   10c8e:	4b03      	ldr	r3, [pc, #12]	; (10c9c <gpio_nrfx_init+0x2c>)
   10c90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   10c94:	2000      	movs	r0, #0
   10c96:	bd08      	pop	{r3, pc}
   10c98:	2002657e 	.word	0x2002657e
   10c9c:	40031000 	.word	0x40031000

00010ca0 <gpiote_pin_int_cfg>:
{
   10ca0:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   10ca2:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
   10ca4:	6882      	ldr	r2, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   10ca6:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   10ca8:	4c51      	ldr	r4, [pc, #324]	; (10df0 <gpiote_pin_int_cfg+0x150>)
   10caa:	7918      	ldrb	r0, [r3, #4]
   10cac:	f001 031f 	and.w	r3, r1, #31
   10cb0:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   10cb4:	2000      	movs	r0, #0
   10cb6:	f8d4 5304 	ldr.w	r5, [r4, #772]	; 0x304
   10cba:	b2ed      	uxtb	r5, r5
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   10cbc:	f500 76a2 	add.w	r6, r0, #324	; 0x144
   10cc0:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   10cc4:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   10cc8:	42b3      	cmp	r3, r6
   10cca:	d170      	bne.n	10dae <gpiote_pin_int_cfg+0x10e>
		    && (intenset & BIT(i))) {
   10ccc:	fa25 f600 	lsr.w	r6, r5, r0
   10cd0:	07f6      	lsls	r6, r6, #31
   10cd2:	d56c      	bpl.n	10dae <gpiote_pin_int_cfg+0x10e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   10cd4:	0085      	lsls	r5, r0, #2
   10cd6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   10cda:	f505 3544 	add.w	r5, r5, #200704	; 0x31000
   10cde:	f8d5 6510 	ldr.w	r6, [r5, #1296]	; 0x510
   10ce2:	f026 0601 	bic.w	r6, r6, #1
   10ce6:	f8c5 6510 	str.w	r6, [r5, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   10cea:	2501      	movs	r5, #1
   10cec:	fa05 f000 	lsl.w	r0, r5, r0
    p_reg->INTENCLR = mask;
   10cf0:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   10cf4:	4d3f      	ldr	r5, [pc, #252]	; (10df4 <gpiote_pin_int_cfg+0x154>)
   10cf6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   10cfa:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   10cfe:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   10d02:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   10d06:	6890      	ldr	r0, [r2, #8]
   10d08:	40c8      	lsrs	r0, r1
   10d0a:	f010 0001 	ands.w	r0, r0, #1
   10d0e:	d04d      	beq.n	10dac <gpiote_pin_int_cfg+0x10c>
   10d10:	68d0      	ldr	r0, [r2, #12]
   10d12:	40c8      	lsrs	r0, r1
   10d14:	f010 0001 	ands.w	r0, r0, #1
   10d18:	d048      	beq.n	10dac <gpiote_pin_int_cfg+0x10c>
		if (data->trig_edge & BIT(pin)) {
   10d1a:	6950      	ldr	r0, [r2, #20]
   10d1c:	40c8      	lsrs	r0, r1
   10d1e:	f010 0001 	ands.w	r0, r0, #1
   10d22:	d050      	beq.n	10dc6 <gpiote_pin_int_cfg+0x126>
			if (data->double_edge & BIT(pin)) {
   10d24:	6990      	ldr	r0, [r2, #24]
   10d26:	40c8      	lsrs	r0, r1
   10d28:	07c0      	lsls	r0, r0, #31
   10d2a:	d444      	bmi.n	10db6 <gpiote_pin_int_cfg+0x116>
			} else if (((data->active_level & BIT(pin)) != 0U)
   10d2c:	6910      	ldr	r0, [r2, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   10d2e:	69d2      	ldr	r2, [r2, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   10d30:	40c8      	lsrs	r0, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   10d32:	fa22 f101 	lsr.w	r1, r2, r1
			} else if (((data->active_level & BIT(pin)) != 0U)
   10d36:	f000 0001 	and.w	r0, r0, #1
   10d3a:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   10d3e:	4288      	cmp	r0, r1
   10d40:	bf14      	ite	ne
   10d42:	2101      	movne	r1, #1
   10d44:	2102      	moveq	r1, #2
   10d46:	2500      	movs	r5, #0
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   10d48:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   10d4c:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   10d50:	f010 0003 	ands.w	r0, r0, #3
   10d54:	d131      	bne.n	10dba <gpiote_pin_int_cfg+0x11a>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   10d56:	00aa      	lsls	r2, r5, #2
   10d58:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   10d5c:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   10d60:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   10d64:	021b      	lsls	r3, r3, #8
   10d66:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   10d6a:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
   10d6e:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   10d72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
			nrf_gpiote_event_t evt =
   10d76:	f105 0340 	add.w	r3, r5, #64	; 0x40
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   10d7a:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
   10d7e:	009b      	lsls	r3, r3, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   10d80:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   10d84:	b29b      	uxth	r3, r3
   10d86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   10d8a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   10d8e:	4331      	orrs	r1, r6
   10d90:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   10d94:	6018      	str	r0, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   10d96:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   10d9a:	f043 0301 	orr.w	r3, r3, #1
   10d9e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   10da2:	2301      	movs	r3, #1
   10da4:	fa03 f505 	lsl.w	r5, r3, r5
    p_reg->INTENSET = mask;
   10da8:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
}
   10dac:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   10dae:	3001      	adds	r0, #1
   10db0:	2808      	cmp	r0, #8
   10db2:	d183      	bne.n	10cbc <gpiote_pin_int_cfg+0x1c>
   10db4:	e79e      	b.n	10cf4 <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   10db6:	2103      	movs	r1, #3
   10db8:	e7c5      	b.n	10d46 <gpiote_pin_int_cfg+0xa6>
   10dba:	3501      	adds	r5, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   10dbc:	2d08      	cmp	r5, #8
   10dbe:	d1c3      	bne.n	10d48 <gpiote_pin_int_cfg+0xa8>
	return -ENODEV;
   10dc0:	f06f 0012 	mvn.w	r0, #18
   10dc4:	e7f2      	b.n	10dac <gpiote_pin_int_cfg+0x10c>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   10dc6:	6913      	ldr	r3, [r2, #16]
   10dc8:	69d2      	ldr	r2, [r2, #28]
   10dca:	4053      	eors	r3, r2
   10dcc:	fa23 f101 	lsr.w	r1, r3, r1
		return NRF_GPIO_PIN_SENSE_HIGH;
   10dd0:	f011 0f01 	tst.w	r1, #1
   10dd4:	bf14      	ite	ne
   10dd6:	f44f 3200 	movne.w	r2, #131072	; 0x20000
   10dda:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   10dde:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   10de2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   10de6:	4313      	orrs	r3, r2
   10de8:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
   10dec:	e7de      	b.n	10dac <gpiote_pin_int_cfg+0x10c>
   10dee:	bf00      	nop
   10df0:	40031000 	.word	0x40031000
   10df4:	40842500 	.word	0x40842500

00010df8 <gpio_nrfx_config>:
{
   10df8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10dfc:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   10dfe:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   10e00:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   10e04:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   10e08:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   10e0a:	d040      	beq.n	10e8e <gpio_nrfx_config+0x96>
   10e0c:	dc09      	bgt.n	10e22 <gpio_nrfx_config+0x2a>
   10e0e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   10e12:	d03e      	beq.n	10e92 <gpio_nrfx_config+0x9a>
   10e14:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   10e18:	d03d      	beq.n	10e96 <gpio_nrfx_config+0x9e>
   10e1a:	b190      	cbz	r0, 10e42 <gpio_nrfx_config+0x4a>
		return -EINVAL;
   10e1c:	f06f 0015 	mvn.w	r0, #21
   10e20:	e032      	b.n	10e88 <gpio_nrfx_config+0x90>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   10e22:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   10e26:	d038      	beq.n	10e9a <gpio_nrfx_config+0xa2>
   10e28:	dc04      	bgt.n	10e34 <gpio_nrfx_config+0x3c>
   10e2a:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   10e2e:	d1f5      	bne.n	10e1c <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   10e30:	2003      	movs	r0, #3
   10e32:	e006      	b.n	10e42 <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   10e34:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   10e38:	d031      	beq.n	10e9e <gpio_nrfx_config+0xa6>
   10e3a:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   10e3e:	d1ed      	bne.n	10e1c <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
   10e40:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   10e42:	f406 7740 	and.w	r7, r6, #768	; 0x300
   10e46:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   10e4a:	d02a      	beq.n	10ea2 <gpio_nrfx_config+0xaa>
		pull = NRF_GPIO_PIN_NOPULL;
   10e4c:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   10e50:	4263      	negs	r3, r4
   10e52:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   10e54:	2901      	cmp	r1, #1
		from_pin = pin;
   10e56:	bf19      	ittee	ne
   10e58:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
   10e5a:	46a1      	movne	r9, r4
		to_pin   = 31U;
   10e5c:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   10e60:	2400      	moveq	r4, #0
   10e62:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   10e66:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   10e6a:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   10e6e:	ea47 070c 	orr.w	r7, r7, ip
   10e72:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10e76:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 10f18 <gpio_nrfx_config+0x120>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   10e7a:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   10e7e:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   10e82:	45a1      	cmp	r9, r4
   10e84:	d20f      	bcs.n	10ea6 <gpio_nrfx_config+0xae>
	return 0;
   10e86:	2000      	movs	r0, #0
}
   10e88:	b003      	add	sp, #12
   10e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
   10e8e:	2002      	movs	r0, #2
   10e90:	e7d7      	b.n	10e42 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
   10e92:	2001      	movs	r0, #1
   10e94:	e7d5      	b.n	10e42 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
   10e96:	2004      	movs	r0, #4
   10e98:	e7d3      	b.n	10e42 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
   10e9a:	2005      	movs	r0, #5
   10e9c:	e7d1      	b.n	10e42 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
   10e9e:	2006      	movs	r0, #6
   10ea0:	e7cf      	b.n	10e42 <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
   10ea2:	2303      	movs	r3, #3
   10ea4:	e7d6      	b.n	10e54 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
   10ea6:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   10eaa:	6892      	ldr	r2, [r2, #8]
   10eac:	7911      	ldrb	r1, [r2, #4]
   10eae:	f004 021f 	and.w	r2, r4, #31
   10eb2:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10eb6:	3280      	adds	r2, #128	; 0x80
   10eb8:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   10ebc:	68a9      	ldr	r1, [r5, #8]
   10ebe:	fa0b f204 	lsl.w	r2, fp, r4
   10ec2:	2b00      	cmp	r3, #0
   10ec4:	d025      	beq.n	10f12 <gpio_nrfx_config+0x11a>
   10ec6:	4311      	orrs	r1, r2
   10ec8:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   10eca:	6969      	ldr	r1, [r5, #20]
   10ecc:	06b0      	lsls	r0, r6, #26
   10ece:	bf4c      	ite	mi
   10ed0:	4311      	orrmi	r1, r2
   10ed2:	4391      	bicpl	r1, r2
   10ed4:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
   10ed6:	69a9      	ldr	r1, [r5, #24]
   10ed8:	0670      	lsls	r0, r6, #25
   10eda:	bf4c      	ite	mi
   10edc:	4311      	orrmi	r1, r2
   10ede:	4391      	bicpl	r1, r2
   10ee0:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
   10ee2:	6929      	ldr	r1, [r5, #16]
   10ee4:	0770      	lsls	r0, r6, #29
   10ee6:	bf4c      	ite	mi
   10ee8:	4311      	orrmi	r1, r2
   10eea:	4391      	bicpl	r1, r2
   10eec:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   10eee:	69e9      	ldr	r1, [r5, #28]
   10ef0:	0630      	lsls	r0, r6, #24
   10ef2:	bf4c      	ite	mi
   10ef4:	430a      	orrmi	r2, r1
   10ef6:	ea21 0202 	bicpl.w	r2, r1, r2
   10efa:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   10efc:	4621      	mov	r1, r4
   10efe:	4640      	mov	r0, r8
   10f00:	9301      	str	r3, [sp, #4]
   10f02:	f7ff fecd 	bl	10ca0 <gpiote_pin_int_cfg>
		if (res != 0) {
   10f06:	2800      	cmp	r0, #0
   10f08:	d1be      	bne.n	10e88 <gpio_nrfx_config+0x90>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   10f0a:	3401      	adds	r4, #1
   10f0c:	b2e4      	uxtb	r4, r4
   10f0e:	9b01      	ldr	r3, [sp, #4]
   10f10:	e7b7      	b.n	10e82 <gpio_nrfx_config+0x8a>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   10f12:	ea21 0102 	bic.w	r1, r1, r2
   10f16:	e7d7      	b.n	10ec8 <gpio_nrfx_config+0xd0>
   10f18:	40842500 	.word	0x40842500

00010f1c <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10f1c:	494f      	ldr	r1, [pc, #316]	; (1105c <gpiote_event_handler+0x140>)
{
   10f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f22:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
   10f24:	2d00      	cmp	r5, #0
   10f26:	d060      	beq.n	10fea <gpiote_event_handler+0xce>
	struct gpio_nrfx_data *data = get_port_data(port);
   10f28:	4b4d      	ldr	r3, [pc, #308]	; (11060 <gpiote_event_handler+0x144>)
	u32_t pin = 0U;
   10f2a:	2600      	movs	r6, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   10f2c:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
   10f2e:	681b      	ldr	r3, [r3, #0]
   10f30:	f8df e138 	ldr.w	lr, [pc, #312]	; 1106c <gpiote_event_handler+0x150>
   10f34:	689f      	ldr	r7, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   10f36:	e9d2 0302 	ldrd	r0, r3, [r2, #8]
   10f3a:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
   10f3c:	e9d2 0405 	ldrd	r0, r4, [r2, #20]
   10f40:	4320      	orrs	r0, r4
   10f42:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   10f46:	6838      	ldr	r0, [r7, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   10f48:	69d4      	ldr	r4, [r2, #28]
   10f4a:	6912      	ldr	r2, [r2, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   10f4c:	6900      	ldr	r0, [r0, #16]
   10f4e:	4054      	eors	r4, r2
   10f50:	4044      	eors	r4, r0
	u32_t bit = 1U << pin;
   10f52:	2001      	movs	r0, #1
	u32_t out = pin_states & level_pins;
   10f54:	ea23 0404 	bic.w	r4, r3, r4
	while (level_pins) {
   10f58:	bb93      	cbnz	r3, 10fc0 <gpiote_event_handler+0xa4>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   10f5a:	600b      	str	r3, [r1, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   10f5c:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   10f5e:	2001      	movs	r0, #1
   10f60:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   10f62:	4940      	ldr	r1, [pc, #256]	; (11064 <gpiote_event_handler+0x148>)
   10f64:	4e40      	ldr	r6, [pc, #256]	; (11068 <gpiote_event_handler+0x14c>)
   10f66:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   10f6a:	fa00 fc03 	lsl.w	ip, r0, r3
   10f6e:	ea1c 0f02 	tst.w	ip, r2
   10f72:	d00d      	beq.n	10f90 <gpiote_event_handler+0x74>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10f74:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   10f78:	b152      	cbz	r2, 10f90 <gpiote_event_handler+0x74>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   10f7a:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   10f7e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   10f82:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   10f86:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   10f8a:	fa00 f202 	lsl.w	r2, r0, r2
   10f8e:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   10f90:	3301      	adds	r3, #1
   10f92:	2b08      	cmp	r3, #8
   10f94:	d1e7      	bne.n	10f66 <gpiote_event_handler+0x4a>
	if (fired_triggers[0]) {
   10f96:	bb54      	cbnz	r4, 10fee <gpiote_event_handler+0xd2>
	if (port_event) {
   10f98:	b185      	cbz	r5, 10fbc <gpiote_event_handler+0xa0>
	u32_t bit = 1U << pin;
   10f9a:	2401      	movs	r4, #1
	u32_t pin = 0U;
   10f9c:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   10f9e:	4b30      	ldr	r3, [pc, #192]	; (11060 <gpiote_event_handler+0x144>)
   10fa0:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 1106c <gpiote_event_handler+0x150>
   10fa4:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
   10fa6:	681b      	ldr	r3, [r3, #0]
   10fa8:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   10faa:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
   10fae:	400b      	ands	r3, r1
	out &= ~data->trig_edge & ~data->double_edge;
   10fb0:	e9d2 1005 	ldrd	r1, r0, [r2, #20]
   10fb4:	4301      	orrs	r1, r0
   10fb6:	ea23 0301 	bic.w	r3, r3, r1
	while (level_pins) {
   10fba:	bb7b      	cbnz	r3, 1101c <gpiote_event_handler+0x100>
}
   10fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   10fc0:	4203      	tst	r3, r0
   10fc2:	d00f      	beq.n	10fe4 <gpiote_event_handler+0xc8>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   10fc4:	f897 c004 	ldrb.w	ip, [r7, #4]
   10fc8:	f006 021f 	and.w	r2, r6, #31
   10fcc:	ea42 124c 	orr.w	r2, r2, ip, lsl #5
   10fd0:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   10fd4:	f8d2 c200 	ldr.w	ip, [r2, #512]	; 0x200
			level_pins &= ~bit;
   10fd8:	ea23 0300 	bic.w	r3, r3, r0
   10fdc:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   10fe0:	f8c2 c200 	str.w	ip, [r2, #512]	; 0x200
		++pin;
   10fe4:	3601      	adds	r6, #1
		bit <<= 1;
   10fe6:	0040      	lsls	r0, r0, #1
   10fe8:	e7b6      	b.n	10f58 <gpiote_event_handler+0x3c>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   10fea:	462c      	mov	r4, r5
   10fec:	e7b6      	b.n	10f5c <gpiote_event_handler+0x40>
	struct gpio_nrfx_data *data = get_port_data(port);
   10fee:	4f1c      	ldr	r7, [pc, #112]	; (11060 <gpiote_event_handler+0x144>)
   10ff0:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   10ff4:	f8d8 1000 	ldr.w	r1, [r8]
   10ff8:	2900      	cmp	r1, #0
   10ffa:	d0cd      	beq.n	10f98 <gpiote_event_handler+0x7c>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10ffc:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
   10ffe:	f8d8 300c 	ldr.w	r3, [r8, #12]
   11002:	688a      	ldr	r2, [r1, #8]
   11004:	4023      	ands	r3, r4
   11006:	4213      	tst	r3, r2
   11008:	d003      	beq.n	11012 <gpiote_event_handler+0xf6>
			cb->handler(port, cb, pins);
   1100a:	684b      	ldr	r3, [r1, #4]
   1100c:	4622      	mov	r2, r4
   1100e:	4638      	mov	r0, r7
   11010:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   11012:	2e00      	cmp	r6, #0
   11014:	d0c0      	beq.n	10f98 <gpiote_event_handler+0x7c>
   11016:	4631      	mov	r1, r6
   11018:	6836      	ldr	r6, [r6, #0]
   1101a:	e7f0      	b.n	10ffe <gpiote_event_handler+0xe2>
		if (level_pins & bit) {
   1101c:	421c      	tst	r4, r3
   1101e:	d01a      	beq.n	11056 <gpiote_event_handler+0x13a>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11020:	7930      	ldrb	r0, [r6, #4]
   11022:	f005 011f 	and.w	r1, r5, #31
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   11026:	69d7      	ldr	r7, [r2, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11028:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   1102c:	6910      	ldr	r0, [r2, #16]
   1102e:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
   11032:	4078      	eors	r0, r7
   11034:	40e8      	lsrs	r0, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   11036:	f010 0f01 	tst.w	r0, #1
   1103a:	bf14      	ite	ne
   1103c:	f44f 3700 	movne.w	r7, #131072	; 0x20000
   11040:	f44f 3740 	moveq.w	r7, #196608	; 0x30000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   11044:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
			level_pins &= ~bit;
   11048:	ea23 0304 	bic.w	r3, r3, r4
   1104c:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11050:	4338      	orrs	r0, r7
   11052:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
		++pin;
   11056:	3501      	adds	r5, #1
		bit <<= 1;
   11058:	0064      	lsls	r4, r4, #1
   1105a:	e7ae      	b.n	10fba <gpiote_event_handler+0x9e>
   1105c:	4003117c 	.word	0x4003117c
   11060:	2002c638 	.word	0x2002c638
   11064:	40031000 	.word	0x40031000
   11068:	40031100 	.word	0x40031100
   1106c:	40842500 	.word	0x40842500

00011070 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   11070:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   11072:	794b      	ldrb	r3, [r1, #5]
   11074:	2b01      	cmp	r3, #1
   11076:	d029      	beq.n	110cc <uarte_nrfx_configure+0x5c>
   11078:	2b03      	cmp	r3, #3
   1107a:	d124      	bne.n	110c6 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1107c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1107e:	798b      	ldrb	r3, [r1, #6]
   11080:	2b03      	cmp	r3, #3
   11082:	d120      	bne.n	110c6 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   11084:	79cc      	ldrb	r4, [r1, #7]
   11086:	b12c      	cbz	r4, 11094 <uarte_nrfx_configure+0x24>
   11088:	2c01      	cmp	r4, #1
   1108a:	d11c      	bne.n	110c6 <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
   1108c:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   1108e:	689b      	ldr	r3, [r3, #8]
   11090:	791b      	ldrb	r3, [r3, #4]
   11092:	b1c3      	cbz	r3, 110c6 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   11094:	790a      	ldrb	r2, [r1, #4]
   11096:	b112      	cbz	r2, 1109e <uarte_nrfx_configure+0x2e>
   11098:	2a02      	cmp	r2, #2
   1109a:	d114      	bne.n	110c6 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1109c:	220e      	movs	r2, #14
	switch (baudrate) {
   1109e:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
   110a2:	6805      	ldr	r5, [r0, #0]
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   110a4:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   110a6:	68ad      	ldr	r5, [r5, #8]
	switch (baudrate) {
   110a8:	42bb      	cmp	r3, r7
	return config->uarte_regs;
   110aa:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   110ac:	d062      	beq.n	11174 <uarte_nrfx_configure+0x104>
   110ae:	d829      	bhi.n	11104 <uarte_nrfx_configure+0x94>
   110b0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   110b4:	d061      	beq.n	1117a <uarte_nrfx_configure+0x10a>
   110b6:	d814      	bhi.n	110e2 <uarte_nrfx_configure+0x72>
   110b8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   110bc:	d05f      	beq.n	1117e <uarte_nrfx_configure+0x10e>
   110be:	d807      	bhi.n	110d0 <uarte_nrfx_configure+0x60>
   110c0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   110c4:	d05e      	beq.n	11184 <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
   110c6:	f06f 0022 	mvn.w	r0, #34	; 0x22
   110ca:	e052      	b.n	11172 <uarte_nrfx_configure+0x102>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   110cc:	2600      	movs	r6, #0
   110ce:	e7d6      	b.n	1107e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   110d0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   110d4:	d059      	beq.n	1118a <uarte_nrfx_configure+0x11a>
   110d6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   110da:	d1f4      	bne.n	110c6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   110dc:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   110e0:	e03c      	b.n	1115c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   110e2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   110e6:	d053      	beq.n	11190 <uarte_nrfx_configure+0x120>
   110e8:	d804      	bhi.n	110f4 <uarte_nrfx_configure+0x84>
   110ea:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   110ee:	d1ea      	bne.n	110c6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   110f0:	4b32      	ldr	r3, [pc, #200]	; (111bc <uarte_nrfx_configure+0x14c>)
   110f2:	e033      	b.n	1115c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   110f4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   110f8:	d04c      	beq.n	11194 <uarte_nrfx_configure+0x124>
   110fa:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   110fe:	d1e2      	bne.n	110c6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   11100:	4b2f      	ldr	r3, [pc, #188]	; (111c0 <uarte_nrfx_configure+0x150>)
   11102:	e02b      	b.n	1115c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   11104:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   11108:	d046      	beq.n	11198 <uarte_nrfx_configure+0x128>
   1110a:	d812      	bhi.n	11132 <uarte_nrfx_configure+0xc2>
   1110c:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   11110:	42bb      	cmp	r3, r7
   11112:	d044      	beq.n	1119e <uarte_nrfx_configure+0x12e>
   11114:	d805      	bhi.n	11122 <uarte_nrfx_configure+0xb2>
   11116:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   1111a:	d1d4      	bne.n	110c6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1111c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   11120:	e01c      	b.n	1115c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   11122:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   11126:	d03d      	beq.n	111a4 <uarte_nrfx_configure+0x134>
   11128:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1112c:	d1cb      	bne.n	110c6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1112e:	4b25      	ldr	r3, [pc, #148]	; (111c4 <uarte_nrfx_configure+0x154>)
   11130:	e014      	b.n	1115c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   11132:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   11136:	d038      	beq.n	111aa <uarte_nrfx_configure+0x13a>
   11138:	d808      	bhi.n	1114c <uarte_nrfx_configure+0xdc>
   1113a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1113e:	d037      	beq.n	111b0 <uarte_nrfx_configure+0x140>
   11140:	4f21      	ldr	r7, [pc, #132]	; (111c8 <uarte_nrfx_configure+0x158>)
   11142:	42bb      	cmp	r3, r7
   11144:	d1bf      	bne.n	110c6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   11146:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1114a:	e007      	b.n	1115c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1114c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   11150:	d031      	beq.n	111b6 <uarte_nrfx_configure+0x146>
   11152:	4f1e      	ldr	r7, [pc, #120]	; (111cc <uarte_nrfx_configure+0x15c>)
   11154:	42bb      	cmp	r3, r7
   11156:	d1b6      	bne.n	110c6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   11158:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1115c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   11160:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   11162:	6883      	ldr	r3, [r0, #8]
   11164:	4322      	orrs	r2, r4
   11166:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   11168:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1116c:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   11170:	2000      	movs	r0, #0
}
   11172:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   11174:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   11178:	e7f0      	b.n	1115c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1117a:	4b15      	ldr	r3, [pc, #84]	; (111d0 <uarte_nrfx_configure+0x160>)
   1117c:	e7ee      	b.n	1115c <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00027000;
   1117e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   11182:	e7eb      	b.n	1115c <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
   11184:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   11188:	e7e8      	b.n	1115c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1118a:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1118e:	e7e5      	b.n	1115c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   11190:	4b10      	ldr	r3, [pc, #64]	; (111d4 <uarte_nrfx_configure+0x164>)
   11192:	e7e3      	b.n	1115c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   11194:	4b10      	ldr	r3, [pc, #64]	; (111d8 <uarte_nrfx_configure+0x168>)
   11196:	e7e1      	b.n	1115c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   11198:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1119c:	e7de      	b.n	1115c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1119e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   111a2:	e7db      	b.n	1115c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   111a4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   111a8:	e7d8      	b.n	1115c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   111aa:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   111ae:	e7d5      	b.n	1115c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   111b0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   111b4:	e7d2      	b.n	1115c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   111b6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   111ba:	e7cf      	b.n	1115c <uarte_nrfx_configure+0xec>
   111bc:	00275000 	.word	0x00275000
   111c0:	0075c000 	.word	0x0075c000
   111c4:	013a9000 	.word	0x013a9000
   111c8:	0003d090 	.word	0x0003d090
   111cc:	000f4240 	.word	0x000f4240
   111d0:	0013b000 	.word	0x0013b000
   111d4:	003af000 	.word	0x003af000
   111d8:	004ea000 	.word	0x004ea000

000111dc <uarte_instance_init.constprop.4>:
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(struct device *dev,
   111dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   111e0:	2501      	movs	r5, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   111e2:	f04f 0e03 	mov.w	lr, #3
   111e6:	f04f 0c00 	mov.w	ip, #0
	return dev->config->config_info;
   111ea:	6803      	ldr	r3, [r0, #0]
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_gpio_pin_write(config->pseltxd, 1);
   111ec:	680a      	ldr	r2, [r1, #0]
	return config->uarte_regs;
   111ee:	689b      	ldr	r3, [r3, #8]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   111f0:	fa05 f702 	lsl.w	r7, r5, r2
   111f4:	681c      	ldr	r4, [r3, #0]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   111f6:	4b1f      	ldr	r3, [pc, #124]	; (11274 <uarte_instance_init.constprop.4+0x98>)
	struct uarte_nrfx_data *data = get_dev_data(dev);
   111f8:	6886      	ldr	r6, [r0, #8]
   111fa:	609f      	str	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   111fc:	f102 0780 	add.w	r7, r2, #128	; 0x80
   11200:	f843 e027 	str.w	lr, [r3, r7, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
   11204:	684f      	ldr	r7, [r1, #4]
   11206:	f107 0880 	add.w	r8, r7, #128	; 0x80
   1120a:	f843 c028 	str.w	ip, [r3, r8, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   1120e:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   11212:	f8c4 7514 	str.w	r7, [r4, #1300]	; 0x514

	nrf_uarte_txrx_pins_set(uarte,
				config->pseltxd,
				config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   11216:	688f      	ldr	r7, [r1, #8]
   11218:	1c7a      	adds	r2, r7, #1
   1121a:	d010      	beq.n	1123e <uarte_instance_init.constprop.4+0x62>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1121c:	68ca      	ldr	r2, [r1, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   1121e:	1c51      	adds	r1, r2, #1
   11220:	d00d      	beq.n	1123e <uarte_instance_init.constprop.4+0x62>
   11222:	f102 0180 	add.w	r1, r2, #128	; 0x80
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11226:	4095      	lsls	r5, r2
    p_reg->OUTSET = set_mask;
   11228:	609d      	str	r5, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1122a:	f843 e021 	str.w	lr, [r3, r1, lsl #2]
   1122e:	f107 0180 	add.w	r1, r7, #128	; 0x80
   11232:	f843 c021 	str.w	ip, [r3, r1, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   11236:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1123a:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
		nrf_uarte_hwfc_pins_set(uarte,
					config->pselrts,
					config->pselcts);
	}

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1123e:	4631      	mov	r1, r6
   11240:	f7ff ff16 	bl	11070 <uarte_nrfx_configure>
	if (err) {
   11244:	b9a0      	cbnz	r0, 11270 <uarte_instance_init.constprop.4+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   11246:	2308      	movs	r3, #8
   11248:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1124c:	f106 030c 	add.w	r3, r6, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11250:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   11254:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   11258:	2301      	movs	r3, #1
		/* Set ENDTX event by requesting fake (zero-length) transfer.
		 * Pointer to RAM variable (data->tx_buffer) is set because
		 * otherwise such operation may result in HardFault or RAM
		 * corruption.
		 */
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   1125a:	68b2      	ldr	r2, [r6, #8]
   1125c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   11260:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11262:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   11264:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   11268:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1126c:	60a3      	str	r3, [r4, #8]
   1126e:	60e3      	str	r3, [r4, #12]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
   11270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11274:	40842500 	.word	0x40842500

00011278 <uarte_2_init>:
	#if defined(DT_NORDIC_NRF_UARTE_UART_2_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_2_CTS_PIN)
		#define UARTE_2_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(2);
   11278:	b530      	push	{r4, r5, lr}
   1127a:	b085      	sub	sp, #20
   1127c:	466c      	mov	r4, sp
   1127e:	4605      	mov	r5, r0
   11280:	4b08      	ldr	r3, [pc, #32]	; (112a4 <uarte_2_init+0x2c>)
   11282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   11284:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   11288:	2200      	movs	r2, #0
   1128a:	2101      	movs	r1, #1
   1128c:	200a      	movs	r0, #10
   1128e:	f7fe f899 	bl	f3c4 <z_arm_irq_priority_set>
   11292:	200a      	movs	r0, #10
   11294:	f7fe f886 	bl	f3a4 <arch_irq_enable>
   11298:	4621      	mov	r1, r4
   1129a:	4628      	mov	r0, r5
   1129c:	f7ff ff9e 	bl	111dc <uarte_instance_init.constprop.4>
   112a0:	b005      	add	sp, #20
   112a2:	bd30      	pop	{r4, r5, pc}
   112a4:	0001eef0 	.word	0x0001eef0

000112a8 <uarte_0_init>:
	UART_NRF_UARTE_DEVICE(0);
   112a8:	b530      	push	{r4, r5, lr}
   112aa:	b085      	sub	sp, #20
   112ac:	466c      	mov	r4, sp
   112ae:	4605      	mov	r5, r0
   112b0:	4b08      	ldr	r3, [pc, #32]	; (112d4 <uarte_0_init+0x2c>)
   112b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   112b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   112b8:	2200      	movs	r2, #0
   112ba:	2101      	movs	r1, #1
   112bc:	2008      	movs	r0, #8
   112be:	f7fe f881 	bl	f3c4 <z_arm_irq_priority_set>
   112c2:	2008      	movs	r0, #8
   112c4:	f7fe f86e 	bl	f3a4 <arch_irq_enable>
   112c8:	4621      	mov	r1, r4
   112ca:	4628      	mov	r0, r5
   112cc:	f7ff ff86 	bl	111dc <uarte_instance_init.constprop.4>
   112d0:	b005      	add	sp, #20
   112d2:	bd30      	pop	{r4, r5, pc}
   112d4:	0001ef00 	.word	0x0001ef00

000112d8 <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   112d8:	2200      	movs	r2, #0
{
   112da:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   112dc:	4611      	mov	r1, r2
   112de:	202a      	movs	r0, #42	; 0x2a
   112e0:	f7fe f870 	bl	f3c4 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
   112e4:	f003 f90c 	bl	14500 <bsd_init>
   112e8:	4b01      	ldr	r3, [pc, #4]	; (112f0 <_bsdlib_init+0x18>)
   112ea:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   112ec:	2000      	movs	r0, #0
   112ee:	bd08      	pop	{r3, pc}
   112f0:	2002039c 	.word	0x2002039c

000112f4 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   112f4:	b570      	push	{r4, r5, r6, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   112f6:	4b0d      	ldr	r3, [pc, #52]	; (1132c <thread_monitor_entry_get+0x38>)
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   112f8:	4c0d      	ldr	r4, [pc, #52]	; (11330 <thread_monitor_entry_get+0x3c>)
		entry_age = rpc_event_cnt - entry->cnt;
   112fa:	681a      	ldr	r2, [r3, #0]
   112fc:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   112fe:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   11300:	4623      	mov	r3, r4
		if (entry->id == id) {
   11302:	6819      	ldr	r1, [r3, #0]
   11304:	4281      	cmp	r1, r0
   11306:	d00e      	beq.n	11326 <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   11308:	b151      	cbz	r1, 11320 <thread_monitor_entry_get+0x2c>
		entry_age = rpc_event_cnt - entry->cnt;
   1130a:	6859      	ldr	r1, [r3, #4]
   1130c:	1a51      	subs	r1, r2, r1
		if (entry_age > oldest_entry_age) {
   1130e:	42b1      	cmp	r1, r6
   11310:	bfc4      	itt	gt
   11312:	461c      	movgt	r4, r3
   11314:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   11316:	3d01      	subs	r5, #1
   11318:	f103 0308 	add.w	r3, r3, #8
   1131c:	d1f1      	bne.n	11302 <thread_monitor_entry_get+0xe>
   1131e:	4623      	mov	r3, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   11320:	3a01      	subs	r2, #1
	new_entry->id = id;
   11322:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   11324:	605a      	str	r2, [r3, #4]

	return new_entry;
}
   11326:	4618      	mov	r0, r3
   11328:	bd70      	pop	{r4, r5, r6, pc}
   1132a:	bf00      	nop
   1132c:	200203a0 	.word	0x200203a0
   11330:	200203ac 	.word	0x200203ac

00011334 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   11334:	4668      	mov	r0, sp
   11336:	f020 0107 	bic.w	r1, r0, #7
   1133a:	468d      	mov	sp, r1
   1133c:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1133e:	4b0d      	ldr	r3, [pc, #52]	; (11374 <rpc_proxy_irq_handler+0x40>)
   11340:	e8d3 2fef 	ldaex	r2, [r3]
   11344:	3201      	adds	r2, #1
   11346:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1134a:	2900      	cmp	r1, #0
   1134c:	d1f8      	bne.n	11340 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   1134e:	f007 fb0b 	bl	18968 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   11352:	4b09      	ldr	r3, [pc, #36]	; (11378 <rpc_proxy_irq_handler+0x44>)
   11354:	681c      	ldr	r4, [r3, #0]
   11356:	b93c      	cbnz	r4, 11368 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   11358:	f7fe f84c 	bl	f3f4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   1135c:	f7fd ff8c 	bl	f278 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   11360:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   11364:	4685      	mov	sp, r0
   11366:	4770      	bx	lr
	z_impl_k_sem_give(sem);
   11368:	1d20      	adds	r0, r4, #4
   1136a:	f00a fa2f 	bl	1b7cc <z_impl_k_sem_give>
   1136e:	6824      	ldr	r4, [r4, #0]
	return node->next;
   11370:	e7f1      	b.n	11356 <rpc_proxy_irq_handler+0x22>
   11372:	bf00      	nop
   11374:	200203a0 	.word	0x200203a0
   11378:	200203a4 	.word	0x200203a4

0001137c <bsd_os_timedwait>:
{
   1137c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11380:	4688      	mov	r8, r1
   11382:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
   11384:	f00d faab 	bl	1e8de <z_impl_k_uptime_get>
	if (*timeout == 0) {
   11388:	f8d8 3000 	ldr.w	r3, [r8]
   1138c:	4606      	mov	r6, r0
   1138e:	2b00      	cmp	r3, #0
   11390:	460f      	mov	r7, r1
   11392:	d103      	bne.n	1139c <bsd_os_timedwait+0x20>
	z_impl_k_yield();
   11394:	f00a f9a0 	bl	1b6d8 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   11398:	203c      	movs	r0, #60	; 0x3c
   1139a:	e06e      	b.n	1147a <bsd_os_timedwait+0xfe>
		*timeout = K_FOREVER;
   1139c:	bfbc      	itt	lt
   1139e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   113a2:	f8c8 3000 	strlt.w	r3, [r8]
	z_impl_k_sem_init(sem, initial_count, limit);
   113a6:	2201      	movs	r2, #1
   113a8:	2100      	movs	r1, #0
   113aa:	a802      	add	r0, sp, #8
   113ac:	f00d f9fc 	bl	1e7a8 <z_impl_k_sem_init>
   113b0:	f10d 0a04 	add.w	sl, sp, #4
   113b4:	f04f 0320 	mov.w	r3, #32
   113b8:	f3ef 8b11 	mrs	fp, BASEPRI
   113bc:	f383 8811 	msr	BASEPRI, r3
   113c0:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   113c4:	f00a f9fc 	bl	1b7c0 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   113c8:	f7ff ff94 	bl	112f4 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   113cc:	4933      	ldr	r1, [pc, #204]	; (1149c <bsd_os_timedwait+0x120>)
   113ce:	6843      	ldr	r3, [r0, #4]
   113d0:	680a      	ldr	r2, [r1, #0]
   113d2:	4689      	mov	r9, r1
   113d4:	4293      	cmp	r3, r2
   113d6:	f04f 0300 	mov.w	r3, #0
   113da:	d108      	bne.n	113ee <bsd_os_timedwait+0x72>
	parent->next = child;
   113dc:	9301      	str	r3, [sp, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   113de:	4b30      	ldr	r3, [pc, #192]	; (114a0 <bsd_os_timedwait+0x124>)
   113e0:	685a      	ldr	r2, [r3, #4]
   113e2:	2a00      	cmp	r2, #0
   113e4:	d14c      	bne.n	11480 <bsd_os_timedwait+0x104>
	list->head = node;
   113e6:	e9c3 aa00 	strd	sl, sl, [r3]
		allow_to_sleep = true;
   113ea:	2301      	movs	r3, #1
   113ec:	e000      	b.n	113f0 <bsd_os_timedwait+0x74>
	entry->cnt = rpc_event_cnt;
   113ee:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   113f0:	f38b 8811 	msr	BASEPRI, fp
   113f4:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   113f8:	2b00      	cmp	r3, #0
   113fa:	d03d      	beq.n	11478 <bsd_os_timedwait+0xfc>
	(void)k_sem_take(&thread.sem, *timeout);
   113fc:	f8d8 1000 	ldr.w	r1, [r8]
	return z_impl_k_sem_take(sem, timeout);
   11400:	a802      	add	r0, sp, #8
   11402:	f00a fa0f 	bl	1b824 <z_impl_k_sem_take>
	__asm__ volatile(
   11406:	f04f 0320 	mov.w	r3, #32
   1140a:	f3ef 8b11 	mrs	fp, BASEPRI
   1140e:	f383 8811 	msr	BASEPRI, r3
   11412:	f3bf 8f6f 	isb	sy
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11416:	2000      	movs	r0, #0
   11418:	4b21      	ldr	r3, [pc, #132]	; (114a0 <bsd_os_timedwait+0x124>)
   1141a:	681a      	ldr	r2, [r3, #0]
   1141c:	b152      	cbz	r2, 11434 <bsd_os_timedwait+0xb8>
   1141e:	4552      	cmp	r2, sl
   11420:	d139      	bne.n	11496 <bsd_os_timedwait+0x11a>
Z_GENLIST_REMOVE(slist, snode)
   11422:	9901      	ldr	r1, [sp, #4]
   11424:	bb88      	cbnz	r0, 1148a <bsd_os_timedwait+0x10e>
   11426:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   11428:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1142a:	4290      	cmp	r0, r2
   1142c:	d100      	bne.n	11430 <bsd_os_timedwait+0xb4>
	list->tail = node;
   1142e:	6059      	str	r1, [r3, #4]
	parent->next = child;
   11430:	2300      	movs	r3, #0
   11432:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   11434:	f00a f9c4 	bl	1b7c0 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   11438:	f7ff ff5c 	bl	112f4 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   1143c:	f8d9 3000 	ldr.w	r3, [r9]
   11440:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   11442:	f38b 8811 	msr	BASEPRI, fp
   11446:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
   1144a:	f8d8 9000 	ldr.w	r9, [r8]
   1144e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   11452:	d011      	beq.n	11478 <bsd_os_timedwait+0xfc>
	return z_impl_k_uptime_get();
   11454:	f00d fa43 	bl	1e8de <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
   11458:	eb16 0209 	adds.w	r2, r6, r9
   1145c:	eb47 73e9 	adc.w	r3, r7, r9, asr #31
   11460:	1a14      	subs	r4, r2, r0
   11462:	eb63 0501 	sbc.w	r5, r3, r1
	*timeout = remaining > 0 ? remaining : 0;
   11466:	2c00      	cmp	r4, #0
   11468:	f175 0300 	sbcs.w	r3, r5, #0
   1146c:	bfb8      	it	lt
   1146e:	2400      	movlt	r4, #0
   11470:	f8c8 4000 	str.w	r4, [r8]
	if (*timeout == 0) {
   11474:	2c00      	cmp	r4, #0
   11476:	d08f      	beq.n	11398 <bsd_os_timedwait+0x1c>
	return 0;
   11478:	2000      	movs	r0, #0
}
   1147a:	b009      	add	sp, #36	; 0x24
   1147c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11480:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   11484:	f8c3 a004 	str.w	sl, [r3, #4]
   11488:	e7af      	b.n	113ea <bsd_os_timedwait+0x6e>
	parent->next = child;
   1148a:	6001      	str	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1148c:	6859      	ldr	r1, [r3, #4]
   1148e:	4291      	cmp	r1, r2
	list->tail = node;
   11490:	bf08      	it	eq
   11492:	6058      	streq	r0, [r3, #4]
   11494:	e7cc      	b.n	11430 <bsd_os_timedwait+0xb4>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11496:	4610      	mov	r0, r2
   11498:	6812      	ldr	r2, [r2, #0]
   1149a:	e7bf      	b.n	1141c <bsd_os_timedwait+0xa0>
   1149c:	200203a0 	.word	0x200203a0
   114a0:	200203a4 	.word	0x200203a4

000114a4 <bsd_os_errno_set>:
	switch (err_code) {
   114a4:	282d      	cmp	r0, #45	; 0x2d
{
   114a6:	b510      	push	{r4, lr}
   114a8:	4604      	mov	r4, r0
	switch (err_code) {
   114aa:	d00c      	beq.n	114c6 <bsd_os_errno_set+0x22>
   114ac:	dc38      	bgt.n	11520 <bsd_os_errno_set+0x7c>
   114ae:	280e      	cmp	r0, #14
   114b0:	d009      	beq.n	114c6 <bsd_os_errno_set+0x22>
   114b2:	dc11      	bgt.n	114d8 <bsd_os_errno_set+0x34>
   114b4:	2808      	cmp	r0, #8
   114b6:	d006      	beq.n	114c6 <bsd_os_errno_set+0x22>
   114b8:	dc09      	bgt.n	114ce <bsd_os_errno_set+0x2a>
   114ba:	2802      	cmp	r0, #2
   114bc:	d003      	beq.n	114c6 <bsd_os_errno_set+0x22>
   114be:	2805      	cmp	r0, #5
   114c0:	d001      	beq.n	114c6 <bsd_os_errno_set+0x22>
   114c2:	2801      	cmp	r0, #1
   114c4:	d119      	bne.n	114fa <bsd_os_errno_set+0x56>
		errno = ETIMEDOUT;
   114c6:	f00c f9cd 	bl	1d864 <z_errno>
   114ca:	6004      	str	r4, [r0, #0]
}
   114cc:	bd10      	pop	{r4, pc}
	switch (err_code) {
   114ce:	280c      	cmp	r0, #12
   114d0:	d0f9      	beq.n	114c6 <bsd_os_errno_set+0x22>
   114d2:	dc57      	bgt.n	11584 <bsd_os_errno_set+0xe0>
   114d4:	2809      	cmp	r0, #9
   114d6:	e7f5      	b.n	114c4 <bsd_os_errno_set+0x20>
   114d8:	2828      	cmp	r0, #40	; 0x28
   114da:	f000 8083 	beq.w	115e4 <bsd_os_errno_set+0x140>
   114de:	dc05      	bgt.n	114ec <bsd_os_errno_set+0x48>
   114e0:	2818      	cmp	r0, #24
   114e2:	d0f0      	beq.n	114c6 <bsd_os_errno_set+0x22>
   114e4:	2823      	cmp	r0, #35	; 0x23
   114e6:	d052      	beq.n	1158e <bsd_os_errno_set+0xea>
   114e8:	2816      	cmp	r0, #22
   114ea:	e7eb      	b.n	114c4 <bsd_os_errno_set+0x20>
   114ec:	282a      	cmp	r0, #42	; 0x2a
   114ee:	d0ea      	beq.n	114c6 <bsd_os_errno_set+0x22>
   114f0:	db51      	blt.n	11596 <bsd_os_errno_set+0xf2>
   114f2:	282b      	cmp	r0, #43	; 0x2b
   114f4:	d0e7      	beq.n	114c6 <bsd_os_errno_set+0x22>
   114f6:	282c      	cmp	r0, #44	; 0x2c
   114f8:	d051      	beq.n	1159e <bsd_os_errno_set+0xfa>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   114fa:	2301      	movs	r3, #1
   114fc:	f04f 0200 	mov.w	r2, #0
   11500:	493a      	ldr	r1, [pc, #232]	; (115ec <bsd_os_errno_set+0x148>)
   11502:	f363 0207 	bfi	r2, r3, #0, #8
   11506:	4b3a      	ldr	r3, [pc, #232]	; (115f0 <bsd_os_errno_set+0x14c>)
   11508:	483a      	ldr	r0, [pc, #232]	; (115f4 <bsd_os_errno_set+0x150>)
   1150a:	1a5b      	subs	r3, r3, r1
   1150c:	08db      	lsrs	r3, r3, #3
   1150e:	f363 128f 	bfi	r2, r3, #6, #10
   11512:	4621      	mov	r1, r4
   11514:	f00b f8aa 	bl	1c66c <log_1>
		errno = 0xBAADBAAD;
   11518:	f00c f9a4 	bl	1d864 <z_errno>
   1151c:	4b36      	ldr	r3, [pc, #216]	; (115f8 <bsd_os_errno_set+0x154>)
   1151e:	e034      	b.n	1158a <bsd_os_errno_set+0xe6>
	switch (err_code) {
   11520:	283c      	cmp	r0, #60	; 0x3c
   11522:	d0d0      	beq.n	114c6 <bsd_os_errno_set+0x22>
   11524:	dc15      	bgt.n	11552 <bsd_os_errno_set+0xae>
   11526:	2833      	cmp	r0, #51	; 0x33
   11528:	d0cd      	beq.n	114c6 <bsd_os_errno_set+0x22>
   1152a:	dc05      	bgt.n	11538 <bsd_os_errno_set+0x94>
   1152c:	2830      	cmp	r0, #48	; 0x30
   1152e:	d0ca      	beq.n	114c6 <bsd_os_errno_set+0x22>
   11530:	2832      	cmp	r0, #50	; 0x32
   11532:	d038      	beq.n	115a6 <bsd_os_errno_set+0x102>
   11534:	282f      	cmp	r0, #47	; 0x2f
   11536:	e7c5      	b.n	114c4 <bsd_os_errno_set+0x20>
   11538:	2836      	cmp	r0, #54	; 0x36
   1153a:	d0c4      	beq.n	114c6 <bsd_os_errno_set+0x22>
   1153c:	dc01      	bgt.n	11542 <bsd_os_errno_set+0x9e>
   1153e:	2834      	cmp	r0, #52	; 0x34
   11540:	e7c0      	b.n	114c4 <bsd_os_errno_set+0x20>
   11542:	2838      	cmp	r0, #56	; 0x38
   11544:	d0bf      	beq.n	114c6 <bsd_os_errno_set+0x22>
   11546:	2839      	cmp	r0, #57	; 0x39
   11548:	d1d7      	bne.n	114fa <bsd_os_errno_set+0x56>
		errno = ENOTCONN;
   1154a:	f00c f98b 	bl	1d864 <z_errno>
   1154e:	2339      	movs	r3, #57	; 0x39
   11550:	e01b      	b.n	1158a <bsd_os_errno_set+0xe6>
	switch (err_code) {
   11552:	287d      	cmp	r0, #125	; 0x7d
   11554:	d033      	beq.n	115be <bsd_os_errno_set+0x11a>
   11556:	dc09      	bgt.n	1156c <bsd_os_errno_set+0xc8>
   11558:	2870      	cmp	r0, #112	; 0x70
   1155a:	d028      	beq.n	115ae <bsd_os_errno_set+0x10a>
   1155c:	2873      	cmp	r0, #115	; 0x73
   1155e:	d02a      	beq.n	115b6 <bsd_os_errno_set+0x112>
   11560:	2869      	cmp	r0, #105	; 0x69
   11562:	d1ca      	bne.n	114fa <bsd_os_errno_set+0x56>
		errno = ENOBUFS;
   11564:	f00c f97e 	bl	1d864 <z_errno>
   11568:	2337      	movs	r3, #55	; 0x37
   1156a:	e00e      	b.n	1158a <bsd_os_errno_set+0xe6>
	switch (err_code) {
   1156c:	287f      	cmp	r0, #127	; 0x7f
   1156e:	d02f      	beq.n	115d0 <bsd_os_errno_set+0x12c>
   11570:	db29      	blt.n	115c6 <bsd_os_errno_set+0x122>
   11572:	2880      	cmp	r0, #128	; 0x80
   11574:	d031      	beq.n	115da <bsd_os_errno_set+0x136>
   11576:	2881      	cmp	r0, #129	; 0x81
   11578:	d1bf      	bne.n	114fa <bsd_os_errno_set+0x56>
		errno = EKEYREJECTED;
   1157a:	f00c f973 	bl	1d864 <z_errno>
   1157e:	f240 73d4 	movw	r3, #2004	; 0x7d4
   11582:	e002      	b.n	1158a <bsd_os_errno_set+0xe6>
		errno = EACCES;
   11584:	f00c f96e 	bl	1d864 <z_errno>
   11588:	230d      	movs	r3, #13
		errno = 0xBAADBAAD;
   1158a:	6003      	str	r3, [r0, #0]
}
   1158c:	e79e      	b.n	114cc <bsd_os_errno_set+0x28>
		errno = EAGAIN;
   1158e:	f00c f969 	bl	1d864 <z_errno>
   11592:	230b      	movs	r3, #11
   11594:	e7f9      	b.n	1158a <bsd_os_errno_set+0xe6>
		errno = EPROTOTYPE;
   11596:	f00c f965 	bl	1d864 <z_errno>
   1159a:	2329      	movs	r3, #41	; 0x29
   1159c:	e7f5      	b.n	1158a <bsd_os_errno_set+0xe6>
		errno = ESOCKTNOSUPPORT;
   1159e:	f00c f961 	bl	1d864 <z_errno>
   115a2:	232c      	movs	r3, #44	; 0x2c
   115a4:	e7f1      	b.n	1158a <bsd_os_errno_set+0xe6>
		errno = ENETDOWN;
   115a6:	f00c f95d 	bl	1d864 <z_errno>
   115aa:	233e      	movs	r3, #62	; 0x3e
   115ac:	e7ed      	b.n	1158a <bsd_os_errno_set+0xe6>
		errno = EHOSTDOWN;
   115ae:	f00c f959 	bl	1d864 <z_errno>
   115b2:	2343      	movs	r3, #67	; 0x43
   115b4:	e7e9      	b.n	1158a <bsd_os_errno_set+0xe6>
		errno = EINPROGRESS;
   115b6:	f00c f955 	bl	1d864 <z_errno>
   115ba:	2344      	movs	r3, #68	; 0x44
   115bc:	e7e5      	b.n	1158a <bsd_os_errno_set+0xe6>
		errno = ECANCELED;
   115be:	f00c f951 	bl	1d864 <z_errno>
   115c2:	2348      	movs	r3, #72	; 0x48
   115c4:	e7e1      	b.n	1158a <bsd_os_errno_set+0xe6>
		errno = ENOKEY;
   115c6:	f00c f94d 	bl	1d864 <z_errno>
   115ca:	f240 73d1 	movw	r3, #2001	; 0x7d1
   115ce:	e7dc      	b.n	1158a <bsd_os_errno_set+0xe6>
		errno = EKEYEXPIRED;
   115d0:	f00c f948 	bl	1d864 <z_errno>
   115d4:	f240 73d2 	movw	r3, #2002	; 0x7d2
   115d8:	e7d7      	b.n	1158a <bsd_os_errno_set+0xe6>
		errno = EKEYREVOKED;
   115da:	f00c f943 	bl	1d864 <z_errno>
   115de:	f240 73d3 	movw	r3, #2003	; 0x7d3
   115e2:	e7d2      	b.n	1158a <bsd_os_errno_set+0xe6>
		errno = EMSGSIZE;
   115e4:	f00c f93e 	bl	1d864 <z_errno>
   115e8:	2324      	movs	r3, #36	; 0x24
   115ea:	e7ce      	b.n	1158a <bsd_os_errno_set+0xe6>
   115ec:	0001ee58 	.word	0x0001ee58
   115f0:	0001ee78 	.word	0x0001ee78
   115f4:	00020547 	.word	0x00020547
   115f8:	baadbaad 	.word	0xbaadbaad

000115fc <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   115fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   11600:	4b01      	ldr	r3, [pc, #4]	; (11608 <bsd_os_application_irq_set+0xc>)
   11602:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   11606:	4770      	bx	lr
   11608:	e000e100 	.word	0xe000e100

0001160c <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1160c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   11610:	4b01      	ldr	r3, [pc, #4]	; (11618 <bsd_os_application_irq_clear+0xc>)
   11612:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   11616:	4770      	bx	lr
   11618:	e000e100 	.word	0xe000e100

0001161c <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1161c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   11620:	4b01      	ldr	r3, [pc, #4]	; (11628 <bsd_os_trace_irq_set+0xc>)
   11622:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   11626:	4770      	bx	lr
   11628:	e000e100 	.word	0xe000e100

0001162c <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1162c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   11630:	4b01      	ldr	r3, [pc, #4]	; (11638 <bsd_os_trace_irq_clear+0xc>)
   11632:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   11636:	4770      	bx	lr
   11638:	e000e100 	.word	0xe000e100

0001163c <trace_uart_init>:
			   rpc_proxy_irq_handler, UNUSED_FLAGS);
	irq_enable(BSD_APPLICATION_IRQ);
}

void trace_uart_init(void)
{
   1163c:	b500      	push	{lr}
   1163e:	b089      	sub	sp, #36	; 0x24
#ifdef CONFIG_BSD_LIBRARY_TRACE_ENABLED
	/* UART pins are defined in "nrf9160_pca10090.dts". */
	const nrfx_uarte_config_t config = {
   11640:	2218      	movs	r2, #24
   11642:	2100      	movs	r1, #0
   11644:	a802      	add	r0, sp, #8
   11646:	f00b fda4 	bl	1d192 <memset>
   1164a:	2301      	movs	r3, #1
   1164c:	9301      	str	r3, [sp, #4]
   1164e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11652:	e9cd 3303 	strd	r3, r3, [sp, #12]
   11656:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1165a:	9306      	str	r3, [sp, #24]
   1165c:	2307      	movs	r3, #7
		.p_context = NULL,
	};

	/* Initialize nrfx UARTE driver in blocking mode. */
	/* TODO: use UARTE in non-blocking mode with IRQ handler. */
	nrfx_uarte_init(&uarte_inst, &config, NULL);
   1165e:	2200      	movs	r2, #0
   11660:	a901      	add	r1, sp, #4
   11662:	4804      	ldr	r0, [pc, #16]	; (11674 <trace_uart_init+0x38>)
	const nrfx_uarte_config_t config = {
   11664:	f88d 301c 	strb.w	r3, [sp, #28]
	nrfx_uarte_init(&uarte_inst, &config, NULL);
   11668:	f009 f8ee 	bl	1a848 <nrfx_uarte_init>
#endif
}
   1166c:	b009      	add	sp, #36	; 0x24
   1166e:	f85d fb04 	ldr.w	pc, [sp], #4
   11672:	bf00      	nop
   11674:	0001f090 	.word	0x0001f090

00011678 <bsd_os_init>:

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   11678:	b508      	push	{r3, lr}
	list->head = NULL;
   1167a:	2300      	movs	r3, #0
   1167c:	4a08      	ldr	r2, [pc, #32]	; (116a0 <bsd_os_init+0x28>)
	list->tail = NULL;
   1167e:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11682:	4a08      	ldr	r2, [pc, #32]	; (116a4 <bsd_os_init+0x2c>)
   11684:	e8d2 1fef 	ldaex	r1, [r2]
   11688:	e8c2 3fe0 	stlex	r0, r3, [r2]
   1168c:	2800      	cmp	r0, #0
   1168e:	d1f9      	bne.n	11684 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   11690:	f00c f913 	bl	1d8ba <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
   11694:	f7ff ffd2 	bl	1163c <trace_uart_init>
	trace_task_create();
}
   11698:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   1169c:	f00c b902 	b.w	1d8a4 <trace_task_create>
   116a0:	200203a4 	.word	0x200203a4
   116a4:	200203a0 	.word	0x200203a0

000116a8 <bsd_os_trace_put>:

int32_t bsd_os_trace_put(const uint8_t * const data, uint32_t len)
{
   116a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   116ac:	4607      	mov	r7, r0
   116ae:	460d      	mov	r5, r1
#ifdef CONFIG_BSD_LIBRARY_TRACE_ENABLED
	/* Max DMA transfers are 255 bytes.
	 * Split RAM buffer into smaller chunks
	 * to be transferred using DMA.
	 */
	u32_t remaining_bytes = len;
   116b0:	460c      	mov	r4, r1

	while (remaining_bytes) {
		u8_t transfer_len = MIN(remaining_bytes, UINT8_MAX);
		u32_t idx = len - remaining_bytes;

		nrfx_uarte_tx(&uarte_inst, &data[idx], transfer_len);
   116b2:	f8df 8024 	ldr.w	r8, [pc, #36]	; 116d8 <bsd_os_trace_put+0x30>
	while (remaining_bytes) {
   116b6:	b914      	cbnz	r4, 116be <bsd_os_trace_put+0x16>
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   116b8:	4620      	mov	r0, r4
   116ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		u8_t transfer_len = MIN(remaining_bytes, UINT8_MAX);
   116be:	2cff      	cmp	r4, #255	; 0xff
   116c0:	4626      	mov	r6, r4
   116c2:	bf28      	it	cs
   116c4:	26ff      	movcs	r6, #255	; 0xff
		u32_t idx = len - remaining_bytes;
   116c6:	1b29      	subs	r1, r5, r4
		nrfx_uarte_tx(&uarte_inst, &data[idx], transfer_len);
   116c8:	4632      	mov	r2, r6
   116ca:	4439      	add	r1, r7
   116cc:	4640      	mov	r0, r8
   116ce:	f009 f94f 	bl	1a970 <nrfx_uarte_tx>
		remaining_bytes -= transfer_len;
   116d2:	1ba4      	subs	r4, r4, r6
   116d4:	e7ef      	b.n	116b6 <bsd_os_trace_put+0xe>
   116d6:	bf00      	nop
   116d8:	0001f090 	.word	0x0001f090

000116dc <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   116dc:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   116e0:	d03c      	beq.n	1175c <z_to_nrf_optname+0x80>
   116e2:	dc04      	bgt.n	116ee <z_to_nrf_optname+0x12>
   116e4:	2801      	cmp	r0, #1
   116e6:	d044      	beq.n	11772 <z_to_nrf_optname+0x96>
			break;
		}
		break;

	default:
		retval = -1;
   116e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		break;
	}

	return retval;
}
   116ec:	4770      	bx	lr
	switch (z_in_level) {
   116ee:	f240 2302 	movw	r3, #514	; 0x202
   116f2:	4298      	cmp	r0, r3
   116f4:	d052      	beq.n	1179c <z_to_nrf_optname+0xc0>
   116f6:	f240 2303 	movw	r3, #515	; 0x203
   116fa:	4298      	cmp	r0, r3
   116fc:	d1f4      	bne.n	116e8 <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
   116fe:	3901      	subs	r1, #1
   11700:	2913      	cmp	r1, #19
   11702:	d8f1      	bhi.n	116e8 <z_to_nrf_optname+0xc>
   11704:	a301      	add	r3, pc, #4	; (adr r3, 1170c <z_to_nrf_optname+0x30>)
   11706:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   1170a:	bf00      	nop
   1170c:	000117a9 	.word	0x000117a9
   11710:	0001176d 	.word	0x0001176d
   11714:	0001178d 	.word	0x0001178d
   11718:	0001177f 	.word	0x0001177f
   1171c:	00011791 	.word	0x00011791
   11720:	00011795 	.word	0x00011795
   11724:	00011799 	.word	0x00011799
   11728:	000116e9 	.word	0x000116e9
   1172c:	000116e9 	.word	0x000116e9
   11730:	000116e9 	.word	0x000116e9
   11734:	000116e9 	.word	0x000116e9
   11738:	000116e9 	.word	0x000116e9
   1173c:	000116e9 	.word	0x000116e9
   11740:	000116e9 	.word	0x000116e9
   11744:	000116e9 	.word	0x000116e9
   11748:	000116e9 	.word	0x000116e9
   1174c:	000116e9 	.word	0x000116e9
   11750:	000116e9 	.word	0x000116e9
   11754:	000116e9 	.word	0x000116e9
   11758:	00011783 	.word	0x00011783
		switch (z_in_optname) {
   1175c:	3901      	subs	r1, #1
   1175e:	2905      	cmp	r1, #5
   11760:	d8c2      	bhi.n	116e8 <z_to_nrf_optname+0xc>
   11762:	e8df f001 	tbb	[pc, r1]
   11766:	1503      	.short	0x1503
   11768:	210c1917 	.word	0x210c1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   1176c:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   1176e:	6013      	str	r3, [r2, #0]
   11770:	e00a      	b.n	11788 <z_to_nrf_optname+0xac>
		switch (z_in_optname) {
   11772:	2914      	cmp	r1, #20
   11774:	d005      	beq.n	11782 <z_to_nrf_optname+0xa6>
   11776:	2919      	cmp	r1, #25
   11778:	d005      	beq.n	11786 <z_to_nrf_optname+0xaa>
   1177a:	2904      	cmp	r1, #4
   1177c:	d1b4      	bne.n	116e8 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   1177e:	2304      	movs	r3, #4
   11780:	e7f5      	b.n	1176e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   11782:	2314      	movs	r3, #20
   11784:	e7f3      	b.n	1176e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   11786:	6011      	str	r1, [r2, #0]
	int retval = 0;
   11788:	2000      	movs	r0, #0
			break;
   1178a:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   1178c:	2303      	movs	r3, #3
   1178e:	e7ee      	b.n	1176e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   11790:	2305      	movs	r3, #5
   11792:	e7ec      	b.n	1176e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   11794:	2306      	movs	r3, #6
   11796:	e7ea      	b.n	1176e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   11798:	2307      	movs	r3, #7
   1179a:	e7e8      	b.n	1176e <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   1179c:	2902      	cmp	r1, #2
   1179e:	d0e5      	beq.n	1176c <z_to_nrf_optname+0x90>
   117a0:	2903      	cmp	r1, #3
   117a2:	d0f3      	beq.n	1178c <z_to_nrf_optname+0xb0>
   117a4:	2901      	cmp	r1, #1
   117a6:	d19f      	bne.n	116e8 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   117a8:	2301      	movs	r3, #1
   117aa:	e7e0      	b.n	1176e <z_to_nrf_optname+0x92>

000117ac <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   117ac:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   117ae:	4b03      	ldr	r3, [pc, #12]	; (117bc <nrf91_socket_iface_init+0x10>)
   117b0:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   117b2:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
   117b4:	4802      	ldr	r0, [pc, #8]	; (117c0 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   117b6:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
   117b8:	f7fd bc00 	b.w	efbc <socket_offload_register>
   117bc:	200203fc 	.word	0x200203fc
   117c0:	0001f098 	.word	0x0001f098

000117c4 <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   117c4:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   117c6:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   117c8:	b118      	cbz	r0, 117d2 <callback_worker+0xe>
		data->callback(data->data);
   117ca:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   117ce:	300c      	adds	r0, #12
   117d0:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   117d2:	a901      	add	r1, sp, #4
   117d4:	4802      	ldr	r0, [pc, #8]	; (117e0 <callback_worker+0x1c>)
   117d6:	f009 fae1 	bl	1ad9c <k_mem_slab_free>
}
   117da:	b003      	add	sp, #12
   117dc:	f85d fb04 	ldr.w	pc, [sp], #4
   117e0:	2002c680 	.word	0x2002c680

000117e4 <open_socket>:
{
   117e4:	b508      	push	{r3, lr}
	return socket_ops->socket(family, type, proto);
   117e6:	4b09      	ldr	r3, [pc, #36]	; (1180c <open_socket+0x28>)
   117e8:	f240 2201 	movw	r2, #513	; 0x201
   117ec:	681b      	ldr	r3, [r3, #0]
   117ee:	2100      	movs	r1, #0
   117f0:	681b      	ldr	r3, [r3, #0]
   117f2:	2066      	movs	r0, #102	; 0x66
   117f4:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, 0, NPROTO_AT);
   117f6:	4b06      	ldr	r3, [pc, #24]	; (11810 <open_socket+0x2c>)
   117f8:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   117fa:	3001      	adds	r0, #1
   117fc:	d104      	bne.n	11808 <open_socket+0x24>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   117fe:	f009 f939 	bl	1aa74 <z_impl_z_errno>
		return -errno;
   11802:	6800      	ldr	r0, [r0, #0]
   11804:	4240      	negs	r0, r0
}
   11806:	bd08      	pop	{r3, pc}
	return 0;
   11808:	2000      	movs	r0, #0
   1180a:	e7fc      	b.n	11806 <open_socket+0x22>
   1180c:	20020344 	.word	0x20020344
   11810:	20020400 	.word	0x20020400

00011814 <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   11814:	b530      	push	{r4, r5, lr}
   11816:	b087      	sub	sp, #28
	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   11818:	f7ff ffe4 	bl	117e4 <open_socket>
	if (err) {
   1181c:	4d1a      	ldr	r5, [pc, #104]	; (11888 <at_cmd_driver_init+0x74>)
   1181e:	4b1b      	ldr	r3, [pc, #108]	; (1188c <at_cmd_driver_init+0x78>)
   11820:	4604      	mov	r4, r0
   11822:	1aed      	subs	r5, r5, r3
   11824:	f3c5 05c9 	ubfx	r5, r5, #3, #10
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   11828:	f04f 0200 	mov.w	r2, #0
	if (err) {
   1182c:	b158      	cbz	r0, 11846 <at_cmd_driver_init+0x32>
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   1182e:	2301      	movs	r3, #1
   11830:	4601      	mov	r1, r0
   11832:	f363 0207 	bfi	r2, r3, #0, #8
   11836:	4816      	ldr	r0, [pc, #88]	; (11890 <at_cmd_driver_init+0x7c>)
   11838:	f365 128f 	bfi	r2, r5, #6, #10
			K_THREAD_STACK_SIZEOF(socket_thread_stack),
			socket_thread_fn,
			NULL, NULL, NULL,
			THREAD_PRIORITY, 0, K_NO_WAIT);

	LOG_DBG("Common AT socket processing thread created");
   1183c:	f00a ff16 	bl	1c66c <log_1>

	return 0;
}
   11840:	4620      	mov	r0, r4
   11842:	b007      	add	sp, #28
   11844:	bd30      	pop	{r4, r5, pc}
	LOG_DBG("Common AT socket created");
   11846:	2304      	movs	r3, #4
   11848:	f363 0207 	bfi	r2, r3, #0, #8
   1184c:	f365 128f 	bfi	r2, r5, #6, #10
   11850:	4910      	ldr	r1, [pc, #64]	; (11894 <at_cmd_driver_init+0x80>)
   11852:	4811      	ldr	r0, [pc, #68]	; (11898 <at_cmd_driver_init+0x84>)
   11854:	f00a ff0a 	bl	1c66c <log_1>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11858:	230a      	movs	r3, #10
   1185a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1185e:	e9cd 4302 	strd	r4, r3, [sp, #8]
   11862:	490e      	ldr	r1, [pc, #56]	; (1189c <at_cmd_driver_init+0x88>)
   11864:	4b0e      	ldr	r3, [pc, #56]	; (118a0 <at_cmd_driver_init+0x8c>)
   11866:	e9cd 4404 	strd	r4, r4, [sp, #16]
   1186a:	e9cd 4400 	strd	r4, r4, [sp]
   1186e:	480d      	ldr	r0, [pc, #52]	; (118a4 <at_cmd_driver_init+0x90>)
   11870:	f00a f868 	bl	1b944 <z_impl_k_thread_create>
	LOG_DBG("Common AT socket processing thread created");
   11874:	f04f 0200 	mov.w	r2, #0
   11878:	2304      	movs	r3, #4
   1187a:	f363 0207 	bfi	r2, r3, #0, #8
   1187e:	f365 128f 	bfi	r2, r5, #6, #10
   11882:	4904      	ldr	r1, [pc, #16]	; (11894 <at_cmd_driver_init+0x80>)
   11884:	4808      	ldr	r0, [pc, #32]	; (118a8 <at_cmd_driver_init+0x94>)
   11886:	e7d9      	b.n	1183c <at_cmd_driver_init+0x28>
   11888:	0001ee60 	.word	0x0001ee60
   1188c:	0001ee58 	.word	0x0001ee58
   11890:	000205cd 	.word	0x000205cd
   11894:	000205ba 	.word	0x000205ba
   11898:	000205ef 	.word	0x000205ef
   1189c:	20026de8 	.word	0x20026de8
   118a0:	000118ad 	.word	0x000118ad
   118a4:	20020414 	.word	0x20020414
   118a8:	0002060c 	.word	0x0002060c

000118ac <socket_thread_fn>:
	LOG_DBG("AT socket thread started");
   118ac:	2304      	movs	r3, #4
   118ae:	f04f 0200 	mov.w	r2, #0
{
   118b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_DBG("AT socket thread started");
   118b6:	f363 0207 	bfi	r2, r3, #0, #8
   118ba:	499b      	ldr	r1, [pc, #620]	; (11b28 <socket_thread_fn+0x27c>)
   118bc:	4b9b      	ldr	r3, [pc, #620]	; (11b2c <socket_thread_fn+0x280>)
{
   118be:	b087      	sub	sp, #28
	LOG_DBG("AT socket thread started");
   118c0:	1a5b      	subs	r3, r3, r1
   118c2:	f3c3 0bc9 	ubfx	fp, r3, #3, #10
   118c6:	f36b 128f 	bfi	r2, fp, #6, #10
   118ca:	4999      	ldr	r1, [pc, #612]	; (11b30 <socket_thread_fn+0x284>)
   118cc:	4899      	ldr	r0, [pc, #612]	; (11b34 <socket_thread_fn+0x288>)
   118ce:	f00a fecd 	bl	1c66c <log_1>
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   118d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   118d6:	a903      	add	r1, sp, #12
   118d8:	4897      	ldr	r0, [pc, #604]	; (11b38 <socket_thread_fn+0x28c>)
   118da:	f009 fa33 	bl	1ad44 <k_mem_slab_alloc>
		ret.code  = 0;
   118de:	2300      	movs	r3, #0
	return socket_ops->recv(sock, buf, max_len, flags);
   118e0:	4c96      	ldr	r4, [pc, #600]	; (11b3c <socket_thread_fn+0x290>)
		item->callback = NULL;
   118e2:	9903      	ldr	r1, [sp, #12]
   118e4:	6822      	ldr	r2, [r4, #0]
   118e6:	4896      	ldr	r0, [pc, #600]	; (11b40 <socket_thread_fn+0x294>)
   118e8:	f8c1 3a98 	str.w	r3, [r1, #2712]	; 0xa98
   118ec:	f8d2 a024 	ldr.w	sl, [r2, #36]	; 0x24
   118f0:	310c      	adds	r1, #12
		ret.code  = 0;
   118f2:	9304      	str	r3, [sp, #16]
		ret.state = AT_CMD_OK;
   118f4:	f88d 3014 	strb.w	r3, [sp, #20]
   118f8:	f640 228c 	movw	r2, #2700	; 0xa8c
   118fc:	6800      	ldr	r0, [r0, #0]
   118fe:	47d0      	blx	sl
		if (bytes_read < 0) {
   11900:	1e01      	subs	r1, r0, #0
   11902:	da5b      	bge.n	119bc <socket_thread_fn+0x110>
			LOG_ERR("AT socket recv failed with err %d",
   11904:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
   11908:	f043 0301 	orr.w	r3, r3, #1
   1190c:	f363 0507 	bfi	r5, r3, #0, #8
   11910:	f36b 158f 	bfi	r5, fp, #6, #10
   11914:	488b      	ldr	r0, [pc, #556]	; (11b44 <socket_thread_fn+0x298>)
   11916:	462a      	mov	r2, r5
   11918:	f00a fea8 	bl	1c66c <log_1>
	return socket_ops->close(sock);
   1191c:	6823      	ldr	r3, [r4, #0]
   1191e:	4888      	ldr	r0, [pc, #544]	; (11b40 <socket_thread_fn+0x294>)
   11920:	685b      	ldr	r3, [r3, #4]
   11922:	6800      	ldr	r0, [r0, #0]
   11924:	4798      	blx	r3
			if ((close(common_socket_fd) == 0) &&
   11926:	2800      	cmp	r0, #0
   11928:	d131      	bne.n	1198e <socket_thread_fn+0xe2>
			    (open_socket() == 0)) {
   1192a:	f7ff ff5b 	bl	117e4 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   1192e:	bb70      	cbnz	r0, 1198e <socket_thread_fn+0xe2>
				LOG_INF("AT socket recovered");
   11930:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   11934:	f043 0303 	orr.w	r3, r3, #3
   11938:	f363 0607 	bfi	r6, r3, #0, #8
   1193c:	f36b 168f 	bfi	r6, fp, #6, #10
   11940:	4631      	mov	r1, r6
   11942:	4881      	ldr	r0, [pc, #516]	; (11b48 <socket_thread_fn+0x29c>)
   11944:	f00a fe85 	bl	1c652 <log_0>
				ret.state = AT_CMD_ERROR;
   11948:	2301      	movs	r3, #1
   1194a:	f88d 3014 	strb.w	r3, [sp, #20]
   1194e:	f009 f891 	bl	1aa74 <z_impl_z_errno>
				ret.code  = -errno;
   11952:	6803      	ldr	r3, [r0, #0]
   11954:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   11956:	9304      	str	r3, [sp, #16]
		if (item->callback == NULL) {
   11958:	9903      	ldr	r1, [sp, #12]
   1195a:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   1195e:	2b00      	cmp	r3, #0
   11960:	f040 80b8 	bne.w	11ad4 <socket_thread_fn+0x228>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   11964:	a903      	add	r1, sp, #12
   11966:	4874      	ldr	r0, [pc, #464]	; (11b38 <socket_thread_fn+0x28c>)
   11968:	f009 fa18 	bl	1ad9c <k_mem_slab_free>
	if (z_syscall_trap()) {
		return (unsigned int) arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_COUNT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_count_get(sem);
   1196c:	4b77      	ldr	r3, [pc, #476]	; (11b4c <socket_thread_fn+0x2a0>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   1196e:	689b      	ldr	r3, [r3, #8]
   11970:	2b00      	cmp	r3, #0
   11972:	d1ae      	bne.n	118d2 <socket_thread_fn+0x26>
   11974:	f89d 2014 	ldrb.w	r2, [sp, #20]
   11978:	2a04      	cmp	r2, #4
   1197a:	d0aa      	beq.n	118d2 <socket_thread_fn+0x26>
			current_cmd_handler = NULL;
   1197c:	4a74      	ldr	r2, [pc, #464]	; (11b50 <socket_thread_fn+0x2a4>)
   1197e:	6013      	str	r3, [r2, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&q, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(q, data, timeout);
   11980:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11984:	a904      	add	r1, sp, #16
   11986:	4873      	ldr	r0, [pc, #460]	; (11b54 <socket_thread_fn+0x2a8>)
   11988:	f009 fad2 	bl	1af30 <z_impl_k_msgq_put>
   1198c:	e7a1      	b.n	118d2 <socket_thread_fn+0x26>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   1198e:	2301      	movs	r3, #1
   11990:	f04f 0400 	mov.w	r4, #0
   11994:	f363 0407 	bfi	r4, r3, #0, #8
   11998:	f36b 148f 	bfi	r4, fp, #6, #10
   1199c:	f009 f86a 	bl	1aa74 <z_impl_z_errno>
   119a0:	4622      	mov	r2, r4
   119a2:	6801      	ldr	r1, [r0, #0]
   119a4:	486c      	ldr	r0, [pc, #432]	; (11b58 <socket_thread_fn+0x2ac>)
   119a6:	f00a fe61 	bl	1c66c <log_1>
   119aa:	4b64      	ldr	r3, [pc, #400]	; (11b3c <socket_thread_fn+0x290>)
   119ac:	4a64      	ldr	r2, [pc, #400]	; (11b40 <socket_thread_fn+0x294>)
   119ae:	681b      	ldr	r3, [r3, #0]
   119b0:	6810      	ldr	r0, [r2, #0]
   119b2:	685b      	ldr	r3, [r3, #4]
   119b4:	4798      	blx	r3
}
   119b6:	b007      	add	sp, #28
   119b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (bytes_read == sizeof(item->data) ||
   119bc:	f640 238c 	movw	r3, #2700	; 0xa8c
   119c0:	4299      	cmp	r1, r3
   119c2:	d004      	beq.n	119ce <socket_thread_fn+0x122>
			   item->data[bytes_read - 1] != '\0') {
   119c4:	9803      	ldr	r0, [sp, #12]
   119c6:	4401      	add	r1, r0
		} else if (bytes_read == sizeof(item->data) ||
   119c8:	7acb      	ldrb	r3, [r1, #11]
   119ca:	9301      	str	r3, [sp, #4]
   119cc:	b173      	cbz	r3, 119ec <socket_thread_fn+0x140>
			LOG_ERR("AT message to large for reception buffer or "
   119ce:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   119d2:	f043 0301 	orr.w	r3, r3, #1
   119d6:	f363 0707 	bfi	r7, r3, #0, #8
   119da:	f36b 178f 	bfi	r7, fp, #6, #10
   119de:	4639      	mov	r1, r7
   119e0:	485e      	ldr	r0, [pc, #376]	; (11b5c <socket_thread_fn+0x2b0>)
   119e2:	f00a fe36 	bl	1c652 <log_0>
			ret.code  = -ENOBUFS;
   119e6:	f06f 0336 	mvn.w	r3, #54	; 0x36
   119ea:	e7b4      	b.n	11956 <socket_thread_fn+0xaa>
		LOG_DBG("at_cmd_rx: %s", log_strdup(item->data));
   119ec:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   119f0:	f043 0304 	orr.w	r3, r3, #4
   119f4:	300c      	adds	r0, #12
   119f6:	f363 0807 	bfi	r8, r3, #0, #8
   119fa:	f7fd f817 	bl	ea2c <log_strdup>
   119fe:	f36b 188f 	bfi	r8, fp, #6, #10
   11a02:	4602      	mov	r2, r0
   11a04:	4643      	mov	r3, r8
   11a06:	494a      	ldr	r1, [pc, #296]	; (11b30 <socket_thread_fn+0x284>)
   11a08:	4855      	ldr	r0, [pc, #340]	; (11b60 <socket_thread_fn+0x2b4>)
   11a0a:	f00a fe43 	bl	1c694 <log_2>
	ret->state = AT_CMD_NOTIFICATION;
   11a0e:	2304      	movs	r3, #4
		payload_len = get_return_code(item->data, &ret);
   11a10:	f8dd a00c 	ldr.w	sl, [sp, #12]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   11a14:	4953      	ldr	r1, [pc, #332]	; (11b64 <socket_thread_fn+0x2b8>)
		payload_len = get_return_code(item->data, &ret);
   11a16:	f10a 040c 	add.w	r4, sl, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   11a1a:	4620      	mov	r0, r4
	ret->state = AT_CMD_NOTIFICATION;
   11a1c:	f88d 3014 	strb.w	r3, [sp, #20]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   11a20:	f00b fafd 	bl	1d01e <strstr>
		if (tmpstr) {
   11a24:	4603      	mov	r3, r0
   11a26:	b120      	cbz	r0, 11a32 <socket_thread_fn+0x186>
			ret->state = AT_CMD_OK;
   11a28:	9a01      	ldr	r2, [sp, #4]
   11a2a:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code  = -ENOEXEC;
   11a2e:	9204      	str	r2, [sp, #16]
			break;
   11a30:	e00e      	b.n	11a50 <socket_thread_fn+0x1a4>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   11a32:	494d      	ldr	r1, [pc, #308]	; (11b68 <socket_thread_fn+0x2bc>)
   11a34:	4620      	mov	r0, r4
   11a36:	f00b faf2 	bl	1d01e <strstr>
		if (tmpstr) {
   11a3a:	9001      	str	r0, [sp, #4]
   11a3c:	b328      	cbz	r0, 11a8a <socket_thread_fn+0x1de>
			ret->state = AT_CMD_ERROR_CMS;
   11a3e:	2202      	movs	r2, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   11a40:	f10a 0017 	add.w	r0, sl, #23
			ret->state = AT_CMD_ERROR_CME;
   11a44:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   11a48:	f00b f9d4 	bl	1cdf4 <atoi>
   11a4c:	9b01      	ldr	r3, [sp, #4]
   11a4e:	9004      	str	r0, [sp, #16]
		buf[new_len++] = '\0';
   11a50:	2100      	movs	r1, #0
		new_len = tmpstr - buf;
   11a52:	1b1a      	subs	r2, r3, r4
		buf[new_len++] = '\0';
   11a54:	3201      	adds	r2, #1
   11a56:	7019      	strb	r1, [r3, #0]
		if (ret.state != AT_CMD_NOTIFICATION) {
   11a58:	f89d 3014 	ldrb.w	r3, [sp, #20]
   11a5c:	2b04      	cmp	r3, #4
   11a5e:	d04f      	beq.n	11b00 <socket_thread_fn+0x254>
			if ((response_buf_len > 0) &&
   11a60:	f8df a124 	ldr.w	sl, [pc, #292]	; 11b88 <socket_thread_fn+0x2dc>
   11a64:	f8da 3000 	ldr.w	r3, [sl]
   11a68:	2b00      	cmp	r3, #0
   11a6a:	d052      	beq.n	11b12 <socket_thread_fn+0x266>
			    (response_buf != NULL)) {
   11a6c:	4c3f      	ldr	r4, [pc, #252]	; (11b6c <socket_thread_fn+0x2c0>)
   11a6e:	6820      	ldr	r0, [r4, #0]
			if ((response_buf_len > 0) &&
   11a70:	2800      	cmp	r0, #0
   11a72:	d04e      	beq.n	11b12 <socket_thread_fn+0x266>
				if (response_buf_len > payload_len) {
   11a74:	4293      	cmp	r3, r2
   11a76:	d91d      	bls.n	11ab4 <socket_thread_fn+0x208>
					memcpy(response_buf, item->data,
   11a78:	9903      	ldr	r1, [sp, #12]
   11a7a:	310c      	adds	r1, #12
   11a7c:	f00b fb5f 	bl	1d13e <memcpy>
				response_buf_len = 0;
   11a80:	2300      	movs	r3, #0
   11a82:	f8ca 3000 	str.w	r3, [sl]
				response_buf     = NULL;
   11a86:	6023      	str	r3, [r4, #0]
				goto next;
   11a88:	e766      	b.n	11958 <socket_thread_fn+0xac>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   11a8a:	4939      	ldr	r1, [pc, #228]	; (11b70 <socket_thread_fn+0x2c4>)
   11a8c:	4620      	mov	r0, r4
   11a8e:	f00b fac6 	bl	1d01e <strstr>
		if (tmpstr) {
   11a92:	9001      	str	r0, [sp, #4]
   11a94:	b108      	cbz	r0, 11a9a <socket_thread_fn+0x1ee>
			ret->state = AT_CMD_ERROR_CME;
   11a96:	2203      	movs	r2, #3
   11a98:	e7d2      	b.n	11a40 <socket_thread_fn+0x194>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   11a9a:	4936      	ldr	r1, [pc, #216]	; (11b74 <socket_thread_fn+0x2c8>)
   11a9c:	4620      	mov	r0, r4
   11a9e:	f00b fabe 	bl	1d01e <strstr>
		if (tmpstr) {
   11aa2:	4603      	mov	r3, r0
   11aa4:	2800      	cmp	r0, #0
   11aa6:	d039      	beq.n	11b1c <socket_thread_fn+0x270>
			ret->state = AT_CMD_ERROR;
   11aa8:	2201      	movs	r2, #1
   11aaa:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code  = -ENOEXEC;
   11aae:	f06f 0207 	mvn.w	r2, #7
   11ab2:	e7bc      	b.n	11a2e <socket_thread_fn+0x182>
					LOG_ERR("Response buffer not large "
   11ab4:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   11ab8:	f043 0301 	orr.w	r3, r3, #1
   11abc:	f363 0907 	bfi	r9, r3, #0, #8
   11ac0:	f36b 198f 	bfi	r9, fp, #6, #10
   11ac4:	4649      	mov	r1, r9
   11ac6:	482c      	ldr	r0, [pc, #176]	; (11b78 <socket_thread_fn+0x2cc>)
   11ac8:	f00a fdc3 	bl	1c652 <log_0>
					ret.code  = -EMSGSIZE;
   11acc:	f06f 0323 	mvn.w	r3, #35	; 0x23
   11ad0:	9304      	str	r3, [sp, #16]
   11ad2:	e7d5      	b.n	11a80 <socket_thread_fn+0x1d4>
   11ad4:	4b29      	ldr	r3, [pc, #164]	; (11b7c <socket_thread_fn+0x2d0>)
   11ad6:	2200      	movs	r2, #0
   11ad8:	604b      	str	r3, [r1, #4]
   11ada:	460b      	mov	r3, r1
   11adc:	600a      	str	r2, [r1, #0]
   11ade:	f843 2f08 	str.w	r2, [r3, #8]!
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11ae2:	e8d3 2fef 	ldaex	r2, [r3]
   11ae6:	f042 0001 	orr.w	r0, r2, #1
   11aea:	e8c3 0fe4 	stlex	r4, r0, [r3]
   11aee:	2c00      	cmp	r4, #0
   11af0:	d1f7      	bne.n	11ae2 <socket_thread_fn+0x236>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   11af2:	07d3      	lsls	r3, r2, #31
   11af4:	f53f af3a 	bmi.w	1196c <socket_thread_fn+0xc0>
		k_queue_append(&work_q->queue, work);
   11af8:	4821      	ldr	r0, [pc, #132]	; (11b80 <socket_thread_fn+0x2d4>)
   11afa:	f00c fcee 	bl	1e4da <k_queue_append>
   11afe:	e735      	b.n	1196c <socket_thread_fn+0xc0>
		if (payload_len == 0) {
   11b00:	2a00      	cmp	r2, #0
   11b02:	f43f af29 	beq.w	11958 <socket_thread_fn+0xac>
			item->callback = notification_handler;
   11b06:	4b1f      	ldr	r3, [pc, #124]	; (11b84 <socket_thread_fn+0x2d8>)
			item->callback = current_cmd_handler;
   11b08:	681a      	ldr	r2, [r3, #0]
   11b0a:	9b03      	ldr	r3, [sp, #12]
   11b0c:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
   11b10:	e722      	b.n	11958 <socket_thread_fn+0xac>
		if (payload_len == 0) {
   11b12:	2a00      	cmp	r2, #0
   11b14:	f43f af20 	beq.w	11958 <socket_thread_fn+0xac>
			item->callback = current_cmd_handler;
   11b18:	4b0d      	ldr	r3, [pc, #52]	; (11b50 <socket_thread_fn+0x2a4>)
   11b1a:	e7f5      	b.n	11b08 <socket_thread_fn+0x25c>
		new_len = strlen(buf) + 1;
   11b1c:	4620      	mov	r0, r4
   11b1e:	f00b fad3 	bl	1d0c8 <strlen>
   11b22:	1c42      	adds	r2, r0, #1
   11b24:	e798      	b.n	11a58 <socket_thread_fn+0x1ac>
   11b26:	bf00      	nop
   11b28:	0001ee58 	.word	0x0001ee58
   11b2c:	0001ee60 	.word	0x0001ee60
   11b30:	00020580 	.word	0x00020580
   11b34:	0002070a 	.word	0x0002070a
   11b38:	2002c680 	.word	0x2002c680
   11b3c:	20020344 	.word	0x20020344
   11b40:	20020400 	.word	0x20020400
   11b44:	00020727 	.word	0x00020727
   11b48:	00020749 	.word	0x00020749
   11b4c:	2002c6d0 	.word	0x2002c6d0
   11b50:	20020404 	.word	0x20020404
   11b54:	2002c710 	.word	0x2002c710
   11b58:	0002075d 	.word	0x0002075d
   11b5c:	00020794 	.word	0x00020794
   11b60:	000207de 	.word	0x000207de
   11b64:	0001fcf6 	.word	0x0001fcf6
   11b68:	000207f0 	.word	0x000207f0
   11b6c:	2002040c 	.word	0x2002040c
   11b70:	000207fc 	.word	0x000207fc
   11b74:	0001f9f9 	.word	0x0001f9f9
   11b78:	00020808 	.word	0x00020808
   11b7c:	000117c5 	.word	0x000117c5
   11b80:	20024d68 	.word	0x20024d68
   11b84:	20020408 	.word	0x20020408
   11b88:	20020410 	.word	0x20020410

00011b8c <at_write>:
{
   11b8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11b90:	4680      	mov	r8, r0
   11b92:	460e      	mov	r6, r1
	LOG_DBG("Sending command %s", log_strdup(cmd));
   11b94:	f04f 0500 	mov.w	r5, #0
	int bytes_to_send = strlen(cmd);
   11b98:	f00b fa96 	bl	1d0c8 <strlen>
	LOG_DBG("Sending command %s", log_strdup(cmd));
   11b9c:	2304      	movs	r3, #4
   11b9e:	4c2f      	ldr	r4, [pc, #188]	; (11c5c <at_write+0xd0>)
   11ba0:	f363 0507 	bfi	r5, r3, #0, #8
   11ba4:	4b2e      	ldr	r3, [pc, #184]	; (11c60 <at_write+0xd4>)
	int bytes_to_send = strlen(cmd);
   11ba6:	4607      	mov	r7, r0
	LOG_DBG("Sending command %s", log_strdup(cmd));
   11ba8:	4640      	mov	r0, r8
   11baa:	1ae4      	subs	r4, r4, r3
   11bac:	f7fc ff3e 	bl	ea2c <log_strdup>
   11bb0:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   11bb4:	f364 158f 	bfi	r5, r4, #6, #10
   11bb8:	462b      	mov	r3, r5
   11bba:	4602      	mov	r2, r0
   11bbc:	4929      	ldr	r1, [pc, #164]	; (11c64 <at_write+0xd8>)
   11bbe:	482a      	ldr	r0, [pc, #168]	; (11c68 <at_write+0xdc>)
   11bc0:	f00a fd68 	bl	1c694 <log_2>
	return socket_ops->send(sock, buf, len, flags);
   11bc4:	4b29      	ldr	r3, [pc, #164]	; (11c6c <at_write+0xe0>)
   11bc6:	482a      	ldr	r0, [pc, #168]	; (11c70 <at_write+0xe4>)
   11bc8:	681b      	ldr	r3, [r3, #0]
   11bca:	463a      	mov	r2, r7
   11bcc:	6add      	ldr	r5, [r3, #44]	; 0x2c
   11bce:	4641      	mov	r1, r8
   11bd0:	2300      	movs	r3, #0
   11bd2:	6800      	ldr	r0, [r0, #0]
   11bd4:	47a8      	blx	r5
	if (bytes_sent == -1) {
   11bd6:	1c43      	adds	r3, r0, #1
   11bd8:	4605      	mov	r5, r0
   11bda:	d11d      	bne.n	11c18 <at_write+0x8c>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   11bdc:	2301      	movs	r3, #1
   11bde:	f04f 0500 	mov.w	r5, #0
   11be2:	f363 0507 	bfi	r5, r3, #0, #8
   11be6:	f364 158f 	bfi	r5, r4, #6, #10
   11bea:	f008 ff43 	bl	1aa74 <z_impl_z_errno>
   11bee:	462a      	mov	r2, r5
   11bf0:	6801      	ldr	r1, [r0, #0]
   11bf2:	4820      	ldr	r0, [pc, #128]	; (11c74 <at_write+0xe8>)
   11bf4:	f00a fd3a 	bl	1c66c <log_1>
   11bf8:	f008 ff3c 	bl	1aa74 <z_impl_z_errno>
		ret.code  = -errno;
   11bfc:	6803      	ldr	r3, [r0, #0]
   11bfe:	425b      	negs	r3, r3
   11c00:	9300      	str	r3, [sp, #0]
		ret.state = AT_CMD_ERROR;
   11c02:	2301      	movs	r3, #1
   11c04:	f88d 3004 	strb.w	r3, [sp, #4]
	if (state) {
   11c08:	b116      	cbz	r6, 11c10 <at_write+0x84>
		*state = ret.state;
   11c0a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   11c0e:	7033      	strb	r3, [r6, #0]
}
   11c10:	9800      	ldr	r0, [sp, #0]
   11c12:	b002      	add	sp, #8
   11c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&q, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(q, data, timeout);
   11c18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11c1c:	4669      	mov	r1, sp
   11c1e:	4816      	ldr	r0, [pc, #88]	; (11c78 <at_write+0xec>)
   11c20:	f009 f9d8 	bl	1afd4 <z_impl_k_msgq_get>
		LOG_DBG("Bytes sent: %d", bytes_sent);
   11c24:	2204      	movs	r2, #4
   11c26:	f04f 0300 	mov.w	r3, #0
   11c2a:	f362 0307 	bfi	r3, r2, #0, #8
   11c2e:	f364 138f 	bfi	r3, r4, #6, #10
   11c32:	462a      	mov	r2, r5
   11c34:	490b      	ldr	r1, [pc, #44]	; (11c64 <at_write+0xd8>)
   11c36:	4811      	ldr	r0, [pc, #68]	; (11c7c <at_write+0xf0>)
   11c38:	f00a fd2c 	bl	1c694 <log_2>
		if (bytes_sent != bytes_to_send) {
   11c3c:	42af      	cmp	r7, r5
   11c3e:	d0e3      	beq.n	11c08 <at_write+0x7c>
			LOG_ERR("Bytes sent (%d) was not the "
   11c40:	2201      	movs	r2, #1
   11c42:	f04f 0300 	mov.w	r3, #0
   11c46:	f362 0307 	bfi	r3, r2, #0, #8
   11c4a:	f364 138f 	bfi	r3, r4, #6, #10
   11c4e:	463a      	mov	r2, r7
   11c50:	4629      	mov	r1, r5
   11c52:	480b      	ldr	r0, [pc, #44]	; (11c80 <at_write+0xf4>)
   11c54:	f00a fd1e 	bl	1c694 <log_2>
   11c58:	e7d6      	b.n	11c08 <at_write+0x7c>
   11c5a:	bf00      	nop
   11c5c:	0001ee60 	.word	0x0001ee60
   11c60:	0001ee58 	.word	0x0001ee58
   11c64:	00020591 	.word	0x00020591
   11c68:	0002068b 	.word	0x0002068b
   11c6c:	20020344 	.word	0x20020344
   11c70:	20020400 	.word	0x20020400
   11c74:	000206a2 	.word	0x000206a2
   11c78:	2002c710 	.word	0x2002c710
   11c7c:	000206c5 	.word	0x000206c5
   11c80:	000206d8 	.word	0x000206d8

00011c84 <at_cmd_write>:
{
   11c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c88:	4605      	mov	r5, r0
   11c8a:	4688      	mov	r8, r1
   11c8c:	4617      	mov	r7, r2
   11c8e:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
   11c90:	4c0a      	ldr	r4, [pc, #40]	; (11cbc <at_cmd_write+0x38>)
   11c92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11c96:	4620      	mov	r0, r4
   11c98:	f009 fdc4 	bl	1b824 <z_impl_k_sem_take>
	response_buf     = buf;
   11c9c:	4b08      	ldr	r3, [pc, #32]	; (11cc0 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   11c9e:	4631      	mov	r1, r6
	response_buf     = buf;
   11ca0:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   11ca4:	4b07      	ldr	r3, [pc, #28]	; (11cc4 <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   11ca6:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   11ca8:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
   11caa:	f7ff ff6f 	bl	11b8c <at_write>
   11cae:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   11cb0:	4620      	mov	r0, r4
   11cb2:	f009 fd8b 	bl	1b7cc <z_impl_k_sem_give>
}
   11cb6:	4628      	mov	r0, r5
   11cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11cbc:	2002c6d0 	.word	0x2002c6d0
   11cc0:	2002040c 	.word	0x2002040c
   11cc4:	20020410 	.word	0x20020410

00011cc8 <at_cmd_set_notification_handler>:
	LOG_DBG("Setting notification handler to %p", handler);
   11cc8:	2204      	movs	r2, #4
   11cca:	f04f 0300 	mov.w	r3, #0
{
   11cce:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("Setting notification handler to %p", handler);
   11cd0:	f362 0307 	bfi	r3, r2, #0, #8
   11cd4:	4c13      	ldr	r4, [pc, #76]	; (11d24 <at_cmd_set_notification_handler+0x5c>)
   11cd6:	4a14      	ldr	r2, [pc, #80]	; (11d28 <at_cmd_set_notification_handler+0x60>)
	if (notification_handler != NULL && handler != notification_handler) {
   11cd8:	4d14      	ldr	r5, [pc, #80]	; (11d2c <at_cmd_set_notification_handler+0x64>)
	LOG_DBG("Setting notification handler to %p", handler);
   11cda:	1aa4      	subs	r4, r4, r2
   11cdc:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   11ce0:	4602      	mov	r2, r0
   11ce2:	4913      	ldr	r1, [pc, #76]	; (11d30 <at_cmd_set_notification_handler+0x68>)
{
   11ce4:	4606      	mov	r6, r0
	LOG_DBG("Setting notification handler to %p", handler);
   11ce6:	f364 138f 	bfi	r3, r4, #6, #10
   11cea:	4812      	ldr	r0, [pc, #72]	; (11d34 <at_cmd_set_notification_handler+0x6c>)
   11cec:	f00a fcd2 	bl	1c694 <log_2>
	if (notification_handler != NULL && handler != notification_handler) {
   11cf0:	6829      	ldr	r1, [r5, #0]
   11cf2:	b159      	cbz	r1, 11d0c <at_cmd_set_notification_handler+0x44>
   11cf4:	428e      	cmp	r6, r1
   11cf6:	d009      	beq.n	11d0c <at_cmd_set_notification_handler+0x44>
		LOG_WRN("Forgetting prior notification handler %p",
   11cf8:	f04f 0200 	mov.w	r2, #0
   11cfc:	2302      	movs	r3, #2
   11cfe:	f363 0207 	bfi	r2, r3, #0, #8
   11d02:	f364 128f 	bfi	r2, r4, #6, #10
   11d06:	480c      	ldr	r0, [pc, #48]	; (11d38 <at_cmd_set_notification_handler+0x70>)
   11d08:	f00a fcb0 	bl	1c66c <log_1>
	return z_impl_k_sem_take(sem, timeout);
   11d0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11d10:	480a      	ldr	r0, [pc, #40]	; (11d3c <at_cmd_set_notification_handler+0x74>)
   11d12:	f009 fd87 	bl	1b824 <z_impl_k_sem_take>
	notification_handler = handler;
   11d16:	602e      	str	r6, [r5, #0]
	z_impl_k_sem_give(sem);
   11d18:	4808      	ldr	r0, [pc, #32]	; (11d3c <at_cmd_set_notification_handler+0x74>)
}
   11d1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11d1e:	f009 bd55 	b.w	1b7cc <z_impl_k_sem_give>
   11d22:	bf00      	nop
   11d24:	0001ee60 	.word	0x0001ee60
   11d28:	0001ee58 	.word	0x0001ee58
   11d2c:	20020408 	.word	0x20020408
   11d30:	0002059a 	.word	0x0002059a
   11d34:	0002063b 	.word	0x0002063b
   11d38:	00020662 	.word	0x00020662
   11d3c:	2002c6d0 	.word	0x2002c6d0

00011d40 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   11d40:	4b0b      	ldr	r3, [pc, #44]	; (11d70 <find_node+0x30>)
{
   11d42:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   11d44:	681b      	ldr	r3, [r3, #0]
   11d46:	b153      	cbz	r3, 11d5e <find_node+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11d48:	2500      	movs	r5, #0
   11d4a:	461c      	mov	r4, r3
   11d4c:	681b      	ldr	r3, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   11d4e:	6866      	ldr	r6, [r4, #4]
   11d50:	428e      	cmp	r6, r1
   11d52:	d106      	bne.n	11d62 <find_node+0x22>
   11d54:	68a6      	ldr	r6, [r4, #8]
   11d56:	4296      	cmp	r6, r2
   11d58:	d103      	bne.n	11d62 <find_node+0x22>
			*prev_out = prev;
			return curr;
   11d5a:	4623      	mov	r3, r4
			*prev_out = prev;
   11d5c:	6005      	str	r5, [r0, #0]
		}
		prev = curr;
	}
	return NULL;
}
   11d5e:	4618      	mov	r0, r3
   11d60:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   11d62:	2b00      	cmp	r3, #0
   11d64:	d0fb      	beq.n	11d5e <find_node+0x1e>
   11d66:	4625      	mov	r5, r4
   11d68:	461c      	mov	r4, r3
   11d6a:	681b      	ldr	r3, [r3, #0]
   11d6c:	e7ef      	b.n	11d4e <find_node+0xe>
   11d6e:	bf00      	nop
   11d70:	200204c4 	.word	0x200204c4

00011d74 <module_init>:

	k_mutex_unlock(&list_mtx);
}

static int module_init(struct device *dev)
{
   11d74:	b510      	push	{r4, lr}
	list->head = NULL;
   11d76:	2400      	movs	r4, #0
   11d78:	4b03      	ldr	r3, [pc, #12]	; (11d88 <module_init+0x14>)
	ARG_UNUSED(dev);

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
   11d7a:	4804      	ldr	r0, [pc, #16]	; (11d8c <module_init+0x18>)
	list->tail = NULL;
   11d7c:	e9c3 4400 	strd	r4, r4, [r3]
   11d80:	f7ff ffa2 	bl	11cc8 <at_cmd_set_notification_handler>
	return 0;
}
   11d84:	4620      	mov	r0, r4
   11d86:	bd10      	pop	{r4, pc}
   11d88:	200204c4 	.word	0x200204c4
   11d8c:	00011d91 	.word	0x00011d91

00011d90 <notif_dispatch>:
{
   11d90:	b538      	push	{r3, r4, r5, lr}
   11d92:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   11d94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11d98:	480a      	ldr	r0, [pc, #40]	; (11dc4 <notif_dispatch+0x34>)
   11d9a:	f009 f979 	bl	1b090 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   11d9e:	4b0a      	ldr	r3, [pc, #40]	; (11dc8 <notif_dispatch+0x38>)
   11da0:	681b      	ldr	r3, [r3, #0]
   11da2:	b923      	cbnz	r3, 11dae <notif_dispatch+0x1e>
}
   11da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_mutex_unlock(mutex);
   11da8:	4806      	ldr	r0, [pc, #24]	; (11dc4 <notif_dispatch+0x34>)
   11daa:	f009 b9e3 	b.w	1b174 <z_impl_k_mutex_unlock>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11dae:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   11db0:	689a      	ldr	r2, [r3, #8]
   11db2:	4629      	mov	r1, r5
   11db4:	6858      	ldr	r0, [r3, #4]
   11db6:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   11db8:	2c00      	cmp	r4, #0
   11dba:	d0f3      	beq.n	11da4 <notif_dispatch+0x14>
   11dbc:	4623      	mov	r3, r4
   11dbe:	6824      	ldr	r4, [r4, #0]
   11dc0:	e7f6      	b.n	11db0 <notif_dispatch+0x20>
   11dc2:	bf00      	nop
   11dc4:	2002c6fc 	.word	0x2002c6fc
   11dc8:	200204c4 	.word	0x200204c4

00011dcc <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   11dcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11dce:	4606      	mov	r6, r0
	if (handler == NULL) {
   11dd0:	460c      	mov	r4, r1
   11dd2:	b999      	cbnz	r1, 11dfc <at_notif_register_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   11dd4:	2201      	movs	r2, #1
   11dd6:	f04f 0300 	mov.w	r3, #0
   11dda:	491f      	ldr	r1, [pc, #124]	; (11e58 <at_notif_register_handler+0x8c>)
   11ddc:	f362 0307 	bfi	r3, r2, #0, #8
   11de0:	4a1e      	ldr	r2, [pc, #120]	; (11e5c <at_notif_register_handler+0x90>)
   11de2:	1a52      	subs	r2, r2, r1
   11de4:	08d2      	lsrs	r2, r2, #3
   11de6:	f362 138f 	bfi	r3, r2, #6, #10
   11dea:	4601      	mov	r1, r0
   11dec:	4622      	mov	r2, r4
   11dee:	481c      	ldr	r0, [pc, #112]	; (11e60 <at_notif_register_handler+0x94>)
   11df0:	f00a fc50 	bl	1c694 <log_2>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   11df4:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   11df8:	b002      	add	sp, #8
   11dfa:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   11dfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11e00:	4818      	ldr	r0, [pc, #96]	; (11e64 <at_notif_register_handler+0x98>)
   11e02:	f009 f945 	bl	1b090 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   11e06:	4622      	mov	r2, r4
   11e08:	4631      	mov	r1, r6
   11e0a:	a801      	add	r0, sp, #4
   11e0c:	f7ff ff98 	bl	11d40 <find_node>
   11e10:	4605      	mov	r5, r0
   11e12:	b120      	cbz	r0, 11e1e <at_notif_register_handler+0x52>
	z_impl_k_mutex_unlock(mutex);
   11e14:	4813      	ldr	r0, [pc, #76]	; (11e64 <at_notif_register_handler+0x98>)
   11e16:	f009 f9ad 	bl	1b174 <z_impl_k_mutex_unlock>
	return 0;
   11e1a:	2000      	movs	r0, #0
	return append_notif_handler(context, handler);
   11e1c:	e7ec      	b.n	11df8 <at_notif_register_handler+0x2c>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   11e1e:	200c      	movs	r0, #12
   11e20:	f009 f876 	bl	1af10 <k_malloc>
   11e24:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   11e26:	b928      	cbnz	r0, 11e34 <at_notif_register_handler+0x68>
   11e28:	480e      	ldr	r0, [pc, #56]	; (11e64 <at_notif_register_handler+0x98>)
   11e2a:	f009 f9a3 	bl	1b174 <z_impl_k_mutex_unlock>
		return -ENOBUFS;
   11e2e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   11e32:	e7e1      	b.n	11df8 <at_notif_register_handler+0x2c>
	memset(to_ins, 0, sizeof(struct notif_handler));
   11e34:	220c      	movs	r2, #12
   11e36:	4629      	mov	r1, r5
   11e38:	f00b f9ab 	bl	1d192 <memset>
	to_ins->ctx     = ctx;
   11e3c:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   11e3e:	4a0a      	ldr	r2, [pc, #40]	; (11e68 <at_notif_register_handler+0x9c>)
	parent->next = child;
   11e40:	601d      	str	r5, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   11e42:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   11e44:	e9c3 6401 	strd	r6, r4, [r3, #4]
   11e48:	b911      	cbnz	r1, 11e50 <at_notif_register_handler+0x84>
	list->head = node;
   11e4a:	e9c2 3300 	strd	r3, r3, [r2]
   11e4e:	e7e1      	b.n	11e14 <at_notif_register_handler+0x48>
	parent->next = child;
   11e50:	600b      	str	r3, [r1, #0]
	list->tail = node;
   11e52:	6053      	str	r3, [r2, #4]
   11e54:	e7de      	b.n	11e14 <at_notif_register_handler+0x48>
   11e56:	bf00      	nop
   11e58:	0001ee58 	.word	0x0001ee58
   11e5c:	0001ee70 	.word	0x0001ee70
   11e60:	00020856 	.word	0x00020856
   11e64:	2002c6fc 	.word	0x2002c6fc
   11e68:	200204c4 	.word	0x200204c4

00011e6c <at_notif_deregister_handler>:

int at_notif_deregister_handler(void *context, at_notif_handler_t handler)
{
   11e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11e6e:	4605      	mov	r5, r0
	if (handler == NULL) {
   11e70:	460c      	mov	r4, r1
   11e72:	b999      	cbnz	r1, 11e9c <at_notif_deregister_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   11e74:	2201      	movs	r2, #1
   11e76:	f04f 0300 	mov.w	r3, #0
   11e7a:	4922      	ldr	r1, [pc, #136]	; (11f04 <at_notif_deregister_handler+0x98>)
   11e7c:	f362 0307 	bfi	r3, r2, #0, #8
   11e80:	4a21      	ldr	r2, [pc, #132]	; (11f08 <at_notif_deregister_handler+0x9c>)
   11e82:	1a89      	subs	r1, r1, r2
   11e84:	08c9      	lsrs	r1, r1, #3
   11e86:	f361 138f 	bfi	r3, r1, #6, #10
   11e8a:	4622      	mov	r2, r4
   11e8c:	4601      	mov	r1, r0
   11e8e:	481f      	ldr	r0, [pc, #124]	; (11f0c <at_notif_deregister_handler+0xa0>)
   11e90:	f00a fc00 	bl	1c694 <log_2>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   11e94:	f06f 0015 	mvn.w	r0, #21
	}
	return remove_notif_handler(context, handler);
}
   11e98:	b003      	add	sp, #12
   11e9a:	bd30      	pop	{r4, r5, pc}
	struct notif_handler *curr, *prev = NULL;
   11e9c:	2300      	movs	r3, #0
   11e9e:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   11ea0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11ea4:	481a      	ldr	r0, [pc, #104]	; (11f10 <at_notif_deregister_handler+0xa4>)
   11ea6:	f009 f8f3 	bl	1b090 <z_impl_k_mutex_lock>
	curr = find_node(&prev, ctx, handler);
   11eaa:	4622      	mov	r2, r4
   11eac:	4629      	mov	r1, r5
   11eae:	a801      	add	r0, sp, #4
   11eb0:	f7ff ff46 	bl	11d40 <find_node>
	if (curr == NULL) {
   11eb4:	b990      	cbnz	r0, 11edc <at_notif_deregister_handler+0x70>
		LOG_WRN("Handler not registered. Nothing to do");
   11eb6:	2302      	movs	r3, #2
   11eb8:	f04f 0100 	mov.w	r1, #0
   11ebc:	4a12      	ldr	r2, [pc, #72]	; (11f08 <at_notif_deregister_handler+0x9c>)
   11ebe:	f363 0107 	bfi	r1, r3, #0, #8
   11ec2:	4b10      	ldr	r3, [pc, #64]	; (11f04 <at_notif_deregister_handler+0x98>)
   11ec4:	4813      	ldr	r0, [pc, #76]	; (11f14 <at_notif_deregister_handler+0xa8>)
   11ec6:	1a9b      	subs	r3, r3, r2
   11ec8:	08db      	lsrs	r3, r3, #3
   11eca:	f363 118f 	bfi	r1, r3, #6, #10
   11ece:	f00a fbc0 	bl	1c652 <log_0>
	z_impl_k_mutex_unlock(mutex);
   11ed2:	480f      	ldr	r0, [pc, #60]	; (11f10 <at_notif_deregister_handler+0xa4>)
   11ed4:	f009 f94e 	bl	1b174 <z_impl_k_mutex_unlock>
	return remove_notif_handler(context, handler);
   11ed8:	2000      	movs	r0, #0
   11eda:	e7dd      	b.n	11e98 <at_notif_deregister_handler+0x2c>
	sys_slist_remove(&handler_list, &prev->node, &curr->node);
   11edc:	9a01      	ldr	r2, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   11ede:	6801      	ldr	r1, [r0, #0]
   11ee0:	4b0d      	ldr	r3, [pc, #52]	; (11f18 <at_notif_deregister_handler+0xac>)
   11ee2:	b94a      	cbnz	r2, 11ef8 <at_notif_deregister_handler+0x8c>
   11ee4:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   11ee6:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   11ee8:	4290      	cmp	r0, r2
   11eea:	d100      	bne.n	11eee <at_notif_deregister_handler+0x82>
	list->tail = node;
   11eec:	6059      	str	r1, [r3, #4]
	parent->next = child;
   11eee:	2300      	movs	r3, #0
   11ef0:	6003      	str	r3, [r0, #0]
	k_free(curr);
   11ef2:	f00c fa76 	bl	1e3e2 <k_free>
   11ef6:	e7ec      	b.n	11ed2 <at_notif_deregister_handler+0x66>
   11ef8:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   11efa:	6859      	ldr	r1, [r3, #4]
   11efc:	4288      	cmp	r0, r1
	list->tail = node;
   11efe:	bf08      	it	eq
   11f00:	605a      	streq	r2, [r3, #4]
   11f02:	e7f4      	b.n	11eee <at_notif_deregister_handler+0x82>
   11f04:	0001ee70 	.word	0x0001ee70
   11f08:	0001ee58 	.word	0x0001ee58
   11f0c:	00020856 	.word	0x00020856
   11f10:	2002c6fc 	.word	0x2002c6fc
   11f14:	00020830 	.word	0x00020830
   11f18:	200204c4 	.word	0x200204c4

00011f1c <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   11f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   11f20:	6805      	ldr	r5, [r0, #0]
{
   11f22:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   11f24:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   11f26:	782b      	ldrb	r3, [r5, #0]
{
   11f28:	4680      	mov	r8, r0
   11f2a:	460f      	mov	r7, r1
   11f2c:	4616      	mov	r6, r2
   11f2e:	2b00      	cmp	r3, #0
   11f30:	f000 80c1 	beq.w	120b6 <at_parse_process_element+0x19a>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   11f34:	4b61      	ldr	r3, [pc, #388]	; (120bc <at_parse_process_element+0x1a0>)
   11f36:	781c      	ldrb	r4, [r3, #0]
   11f38:	2c05      	cmp	r4, #5
   11f3a:	d110      	bne.n	11f5e <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   11f3c:	1c6b      	adds	r3, r5, #1
   11f3e:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   11f40:	9a00      	ldr	r2, [sp, #0]
   11f42:	7810      	ldrb	r0, [r2, #0]
   11f44:	f00c f8ab 	bl	1e09e <is_valid_notification_char>
   11f48:	b930      	cbnz	r0, 11f58 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   11f4a:	1b53      	subs	r3, r2, r5

		while (isxdigit(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   11f4c:	462a      	mov	r2, r5
   11f4e:	4639      	mov	r1, r7
   11f50:	4630      	mov	r0, r6
   11f52:	f00c f98d 	bl	1e270 <at_params_string_put>
   11f56:	e01b      	b.n	11f90 <at_parse_process_element+0x74>
			tmpstr++;
   11f58:	3201      	adds	r2, #1
   11f5a:	9200      	str	r2, [sp, #0]
   11f5c:	e7f0      	b.n	11f40 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   11f5e:	2c06      	cmp	r4, #6
   11f60:	d124      	bne.n	11fac <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   11f62:	4668      	mov	r0, sp
   11f64:	f00c f88d 	bl	1e082 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   11f68:	9a00      	ldr	r2, [sp, #0]
   11f6a:	7810      	ldrb	r0, [r2, #0]
   11f6c:	f00c f897 	bl	1e09e <is_valid_notification_char>
   11f70:	b9a8      	cbnz	r0, 11f9e <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   11f72:	1b53      	subs	r3, r2, r5
   11f74:	4639      	mov	r1, r7
   11f76:	462a      	mov	r2, r5
   11f78:	4630      	mov	r0, r6
   11f7a:	f00c f979 	bl	1e270 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   11f7e:	9b00      	ldr	r3, [sp, #0]
   11f80:	781a      	ldrb	r2, [r3, #0]
   11f82:	2a3d      	cmp	r2, #61	; 0x3d
   11f84:	d10e      	bne.n	11fa4 <at_parse_process_element+0x88>
   11f86:	785a      	ldrb	r2, [r3, #1]
   11f88:	2a3f      	cmp	r2, #63	; 0x3f
   11f8a:	d101      	bne.n	11f90 <at_parse_process_element+0x74>
			tmpstr += 2;
   11f8c:	3302      	adds	r3, #2
			tmpstr++;
   11f8e:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   11f90:	2000      	movs	r0, #0
	*str = tmpstr;
   11f92:	9b00      	ldr	r3, [sp, #0]
   11f94:	f8c8 3000 	str.w	r3, [r8]
}
   11f98:	b023      	add	sp, #140	; 0x8c
   11f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   11f9e:	3201      	adds	r2, #1
   11fa0:	9200      	str	r2, [sp, #0]
   11fa2:	e7e1      	b.n	11f68 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   11fa4:	2a3f      	cmp	r2, #63	; 0x3f
   11fa6:	d1f3      	bne.n	11f90 <at_parse_process_element+0x74>
			tmpstr++;
   11fa8:	3301      	adds	r3, #1
   11faa:	e7f0      	b.n	11f8e <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   11fac:	2c07      	cmp	r4, #7
   11fae:	d103      	bne.n	11fb8 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   11fb0:	4610      	mov	r0, r2
   11fb2:	f00c f938 	bl	1e226 <at_params_empty_put>
   11fb6:	e7eb      	b.n	11f90 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   11fb8:	2c02      	cmp	r4, #2
   11fba:	d112      	bne.n	11fe2 <at_parse_process_element+0xc6>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   11fbc:	9a00      	ldr	r2, [sp, #0]
   11fbe:	7810      	ldrb	r0, [r2, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   11fc0:	2822      	cmp	r0, #34	; 0x22
   11fc2:	d003      	beq.n	11fcc <at_parse_process_element+0xb0>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   11fc4:	b110      	cbz	r0, 11fcc <at_parse_process_element+0xb0>
		       !is_lfcr(*tmpstr)) {
   11fc6:	f00c f853 	bl	1e070 <is_lfcr>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   11fca:	b138      	cbz	r0, 11fdc <at_parse_process_element+0xc0>
		at_params_string_put(list, index, start_ptr,
   11fcc:	1b53      	subs	r3, r2, r5
   11fce:	4639      	mov	r1, r7
   11fd0:	462a      	mov	r2, r5
   11fd2:	4630      	mov	r0, r6
   11fd4:	f00c f94c 	bl	1e270 <at_params_string_put>
		tmpstr++;
   11fd8:	9b00      	ldr	r3, [sp, #0]
   11fda:	e7e5      	b.n	11fa8 <at_parse_process_element+0x8c>
			tmpstr++;
   11fdc:	3201      	adds	r2, #1
   11fde:	9200      	str	r2, [sp, #0]
   11fe0:	e7ec      	b.n	11fbc <at_parse_process_element+0xa0>
	} else if (state == ARRAY) {
   11fe2:	2c01      	cmp	r4, #1
   11fe4:	d13c      	bne.n	12060 <at_parse_process_element+0x144>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   11fe6:	4628      	mov	r0, r5
   11fe8:	220a      	movs	r2, #10
   11fea:	a901      	add	r1, sp, #4
   11fec:	f00a ff9e 	bl	1cf2c <strtoul>
		tmpstr = next;
   11ff0:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   11ff2:	4d33      	ldr	r5, [pc, #204]	; (120c0 <at_parse_process_element+0x1a4>)
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   11ff4:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   11ff6:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   11ff8:	9800      	ldr	r0, [sp, #0]
   11ffa:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   11ffc:	2b29      	cmp	r3, #41	; 0x29
   11ffe:	d028      	beq.n	12052 <at_parse_process_element+0x136>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12000:	b33b      	cbz	r3, 12052 <at_parse_process_element+0x136>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   12002:	3b2c      	subs	r3, #44	; 0x2c
   12004:	b2db      	uxtb	r3, r3
   12006:	3001      	adds	r0, #1
   12008:	2b11      	cmp	r3, #17
				tmparray[i++] =
   1200a:	9000      	str	r0, [sp, #0]
   1200c:	d803      	bhi.n	12016 <at_parse_process_element+0xfa>
   1200e:	fa25 f303 	lsr.w	r3, r5, r3
   12012:	07db      	lsls	r3, r3, #31
   12014:	d408      	bmi.n	12028 <at_parse_process_element+0x10c>
				tmpstr++;
   12016:	46a1      	mov	r9, r4
   12018:	e004      	b.n	12024 <at_parse_process_element+0x108>
					tmpstr = next;
   1201a:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1201c:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   12020:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   12022:	d015      	beq.n	12050 <at_parse_process_element+0x134>
				tmpstr++;
   12024:	464c      	mov	r4, r9
   12026:	e7e7      	b.n	11ff8 <at_parse_process_element+0xdc>
					(u32_t)strtoul(++tmpstr, &next, 10);
   12028:	220a      	movs	r2, #10
   1202a:	a901      	add	r1, sp, #4
   1202c:	f00a ff7e 	bl	1cf2c <strtoul>
				tmparray[i++] =
   12030:	ab22      	add	r3, sp, #136	; 0x88
   12032:	f104 0901 	add.w	r9, r4, #1
   12036:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1203a:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   1203e:	9800      	ldr	r0, [sp, #0]
   12040:	f00b f842 	bl	1d0c8 <strlen>
   12044:	4604      	mov	r4, r0
   12046:	9801      	ldr	r0, [sp, #4]
   12048:	f00b f83e 	bl	1d0c8 <strlen>
   1204c:	4284      	cmp	r4, r0
   1204e:	d1e4      	bne.n	1201a <at_parse_process_element+0xfe>
   12050:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(u32_t));
   12052:	00a3      	lsls	r3, r4, #2
   12054:	aa02      	add	r2, sp, #8
   12056:	4639      	mov	r1, r7
   12058:	4630      	mov	r0, r6
   1205a:	f00c f92c 	bl	1e2b6 <at_params_array_put>
   1205e:	e7bb      	b.n	11fd8 <at_parse_process_element+0xbc>
	} else if (state == NUMBER) {
   12060:	2c03      	cmp	r4, #3
   12062:	d115      	bne.n	12090 <at_parse_process_element+0x174>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   12064:	220a      	movs	r2, #10
   12066:	a902      	add	r1, sp, #8
   12068:	4628      	mov	r0, r5
   1206a:	f00a ff5f 	bl	1cf2c <strtoul>
		tmpstr = next;
   1206e:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   12070:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   12074:	4602      	mov	r2, r0
		tmpstr = next;
   12076:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   12078:	d205      	bcs.n	12086 <at_parse_process_element+0x16a>
			at_params_short_put(list, index, (u16_t)value);
   1207a:	b282      	uxth	r2, r0
   1207c:	4639      	mov	r1, r7
   1207e:	4630      	mov	r0, r6
   12080:	f00c f8be 	bl	1e200 <at_params_short_put>
   12084:	e784      	b.n	11f90 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   12086:	4639      	mov	r1, r7
   12088:	4630      	mov	r0, r6
   1208a:	f00c f8de 	bl	1e24a <at_params_int_put>
   1208e:	e77f      	b.n	11f90 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   12090:	2c04      	cmp	r4, #4
   12092:	f47f af7d 	bne.w	11f90 <at_parse_process_element+0x74>
		while (isxdigit(*tmpstr)) {
   12096:	9b00      	ldr	r3, [sp, #0]
   12098:	781a      	ldrb	r2, [r3, #0]
	return (int)(((ua - (unsigned)'0') < 10U) ||
   1209a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1209e:	2909      	cmp	r1, #9
   120a0:	d906      	bls.n	120b0 <at_parse_process_element+0x194>
			((ua | 32U) - (unsigned)'a' < 6U));
   120a2:	f042 0220 	orr.w	r2, r2, #32
   120a6:	3a61      	subs	r2, #97	; 0x61
	return (int)(((ua - (unsigned)'0') < 10U) ||
   120a8:	2a05      	cmp	r2, #5
   120aa:	d901      	bls.n	120b0 <at_parse_process_element+0x194>
		at_params_string_put(list, index, start_ptr,
   120ac:	1b5b      	subs	r3, r3, r5
   120ae:	e74d      	b.n	11f4c <at_parse_process_element+0x30>
			tmpstr++;
   120b0:	3301      	adds	r3, #1
   120b2:	9300      	str	r3, [sp, #0]
   120b4:	e7ef      	b.n	12096 <at_parse_process_element+0x17a>
		return -1;
   120b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   120ba:	e76d      	b.n	11f98 <at_parse_process_element+0x7c>
   120bc:	200265bf 	.word	0x200265bf
   120c0:	00024001 	.word	0x00024001

000120c4 <at_parse_detect_type>:
{
   120c4:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   120c6:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   120c8:	2900      	cmp	r1, #0
{
   120ca:	4605      	mov	r5, r0
   120cc:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   120ce:	d144      	bne.n	1215a <at_parse_detect_type+0x96>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   120d0:	2a2b      	cmp	r2, #43	; 0x2b
   120d2:	4e2a      	ldr	r6, [pc, #168]	; (1217c <at_parse_detect_type+0xb8>)
   120d4:	d001      	beq.n	120da <at_parse_detect_type+0x16>
   120d6:	2a25      	cmp	r2, #37	; 0x25
   120d8:	d104      	bne.n	120e4 <at_parse_detect_type+0x20>
	state = new_state;
   120da:	2305      	movs	r3, #5
   120dc:	7033      	strb	r3, [r6, #0]
	return 0;
   120de:	2000      	movs	r0, #0
	*str = tmpstr;
   120e0:	602c      	str	r4, [r5, #0]
}
   120e2:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   120e4:	4620      	mov	r0, r4
   120e6:	f00b ffe6 	bl	1e0b6 <is_command>
   120ea:	b3a0      	cbz	r0, 12156 <at_parse_detect_type+0x92>
	state = new_state;
   120ec:	2306      	movs	r3, #6
   120ee:	e7f5      	b.n	120dc <at_parse_detect_type+0x18>
 * @retval true  If character is number character
 * @retval false If character is something else
 */
static inline bool is_number(char chr)
{
	if (isdigit(chr) || (chr == '-') || (chr == '+')) {
   120f0:	f647 71e5 	movw	r1, #32741	; 0x7fe5
   120f4:	fa21 f303 	lsr.w	r3, r1, r3
   120f8:	07d9      	lsls	r1, r3, #31
   120fa:	d50a      	bpl.n	12112 <at_parse_detect_type+0x4e>
   120fc:	2203      	movs	r2, #3
   120fe:	4b1f      	ldr	r3, [pc, #124]	; (1217c <at_parse_detect_type+0xb8>)
   12100:	701a      	strb	r2, [r3, #0]
   12102:	e7ec      	b.n	120de <at_parse_detect_type+0x1a>
	if (chr == '(') {
   12104:	2a28      	cmp	r2, #40	; 0x28
   12106:	d104      	bne.n	12112 <at_parse_detect_type+0x4e>
   12108:	2201      	movs	r2, #1
   1210a:	4b1c      	ldr	r3, [pc, #112]	; (1217c <at_parse_detect_type+0xb8>)
		tmpstr++;
   1210c:	4414      	add	r4, r2
	state = new_state;
   1210e:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   12110:	e7e5      	b.n	120de <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   12112:	4610      	mov	r0, r2
   12114:	f00b ffac 	bl	1e070 <is_lfcr>
   12118:	b170      	cbz	r0, 12138 <at_parse_detect_type+0x74>
   1211a:	4918      	ldr	r1, [pc, #96]	; (1217c <at_parse_detect_type+0xb8>)
   1211c:	7808      	ldrb	r0, [r1, #0]
   1211e:	2803      	cmp	r0, #3
   12120:	d108      	bne.n	12134 <at_parse_detect_type+0x70>
		while (is_lfcr(*tmpstr)) {
   12122:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   12126:	f00b ffa3 	bl	1e070 <is_lfcr>
   1212a:	2800      	cmp	r0, #0
   1212c:	d1f9      	bne.n	12122 <at_parse_detect_type+0x5e>
	state = new_state;
   1212e:	2304      	movs	r3, #4
   12130:	700b      	strb	r3, [r1, #0]
   12132:	e7d4      	b.n	120de <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   12134:	2807      	cmp	r0, #7
   12136:	d0d2      	beq.n	120de <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   12138:	3a2c      	subs	r2, #44	; 0x2c
   1213a:	b2d2      	uxtb	r2, r2
   1213c:	2a11      	cmp	r2, #17
   1213e:	d807      	bhi.n	12150 <at_parse_detect_type+0x8c>
   12140:	4b0f      	ldr	r3, [pc, #60]	; (12180 <at_parse_detect_type+0xbc>)
   12142:	fa23 f202 	lsr.w	r2, r3, r2
   12146:	07d3      	lsls	r3, r2, #31
   12148:	d502      	bpl.n	12150 <at_parse_detect_type+0x8c>
	state = new_state;
   1214a:	4b0c      	ldr	r3, [pc, #48]	; (1217c <at_parse_detect_type+0xb8>)
   1214c:	2207      	movs	r2, #7
   1214e:	e7d7      	b.n	12100 <at_parse_detect_type+0x3c>
		return -1;
   12150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12154:	e7c5      	b.n	120e2 <at_parse_detect_type+0x1e>
	state = new_state;
   12156:	2302      	movs	r3, #2
   12158:	e7c0      	b.n	120dc <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   1215a:	dd03      	ble.n	12164 <at_parse_detect_type+0xa0>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1215c:	2a2b      	cmp	r2, #43	; 0x2b
   1215e:	d0f7      	beq.n	12150 <at_parse_detect_type+0x8c>
   12160:	2a25      	cmp	r2, #37	; 0x25
   12162:	d0f5      	beq.n	12150 <at_parse_detect_type+0x8c>
	if (isdigit(chr) || (chr == '-') || (chr == '+')) {
   12164:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
   12168:	b2db      	uxtb	r3, r3
   1216a:	2b0e      	cmp	r3, #14
   1216c:	d9c0      	bls.n	120f0 <at_parse_detect_type+0x2c>
	if (chr == '"') {
   1216e:	2a22      	cmp	r2, #34	; 0x22
   12170:	d1c8      	bne.n	12104 <at_parse_detect_type+0x40>
	state = new_state;
   12172:	2202      	movs	r2, #2
   12174:	4b01      	ldr	r3, [pc, #4]	; (1217c <at_parse_detect_type+0xb8>)
		tmpstr++;
   12176:	3401      	adds	r4, #1
	state = new_state;
   12178:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1217a:	e7b0      	b.n	120de <at_parse_detect_type+0x1a>
   1217c:	200265bf 	.word	0x200265bf
   12180:	00024001 	.word	0x00024001

00012184 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   12184:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12188:	4688      	mov	r8, r1
   1218a:	4616      	mov	r6, r2
   1218c:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   1218e:	4604      	mov	r4, r0
   12190:	2800      	cmp	r0, #0
   12192:	d07c      	beq.n	1228e <at_parser_max_params_from_str+0x10a>
   12194:	2a00      	cmp	r2, #0
   12196:	d07a      	beq.n	1228e <at_parser_max_params_from_str+0x10a>
   12198:	6853      	ldr	r3, [r2, #4]
   1219a:	2b00      	cmp	r3, #0
   1219c:	d077      	beq.n	1228e <at_parser_max_params_from_str+0x10a>
	state = IDLE;
   1219e:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   121a0:	4610      	mov	r0, r2
   121a2:	f00c f815 	bl	1e1d0 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   121a6:	6832      	ldr	r2, [r6, #0]
	const char *str = *at_params_str;
   121a8:	9401      	str	r4, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   121aa:	4297      	cmp	r7, r2
   121ac:	bf28      	it	cs
   121ae:	4617      	movcs	r7, r2
	int index = 0;
   121b0:	462c      	mov	r4, r5
	state = IDLE;
   121b2:	4b38      	ldr	r3, [pc, #224]	; (12294 <at_parser_max_params_from_str+0x110>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   121b4:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 12298 <at_parser_max_params_from_str+0x114>
   121b8:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   121ba:	9a01      	ldr	r2, [sp, #4]
   121bc:	7813      	ldrb	r3, [r2, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   121be:	2b00      	cmp	r3, #0
   121c0:	d04b      	beq.n	1225a <at_parser_max_params_from_str+0xd6>
   121c2:	42a7      	cmp	r7, r4
   121c4:	d949      	bls.n	1225a <at_parser_max_params_from_str+0xd6>
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   121c6:	2b20      	cmp	r3, #32
   121c8:	d002      	beq.n	121d0 <at_parser_max_params_from_str+0x4c>
   121ca:	3b09      	subs	r3, #9
   121cc:	2b04      	cmp	r3, #4
   121ce:	d801      	bhi.n	121d4 <at_parser_max_params_from_str+0x50>
			str++;
   121d0:	3201      	adds	r2, #1
   121d2:	9201      	str	r2, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   121d4:	4621      	mov	r1, r4
   121d6:	a801      	add	r0, sp, #4
   121d8:	f7ff ff74 	bl	120c4 <at_parse_detect_type>
   121dc:	1c42      	adds	r2, r0, #1
   121de:	d03c      	beq.n	1225a <at_parser_max_params_from_str+0xd6>
		if (at_parse_process_element(&str, index, list) == -1) {
   121e0:	4632      	mov	r2, r6
   121e2:	4621      	mov	r1, r4
   121e4:	a801      	add	r0, sp, #4
   121e6:	f7ff fe99 	bl	11f1c <at_parse_process_element>
   121ea:	1c43      	adds	r3, r0, #1
   121ec:	d035      	beq.n	1225a <at_parser_max_params_from_str+0xd6>
		if (is_separator(*str)) {
   121ee:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   121f0:	781a      	ldrb	r2, [r3, #0]
   121f2:	3a2c      	subs	r2, #44	; 0x2c
   121f4:	b2d2      	uxtb	r2, r2
   121f6:	2a11      	cmp	r2, #17
   121f8:	d81a      	bhi.n	12230 <at_parser_max_params_from_str+0xac>
   121fa:	fa29 f202 	lsr.w	r2, r9, r2
   121fe:	07d1      	lsls	r1, r2, #31
   12200:	d516      	bpl.n	12230 <at_parser_max_params_from_str+0xac>
			if (is_lfcr(*(str + 1))) {
   12202:	7858      	ldrb	r0, [r3, #1]
   12204:	f00b ff34 	bl	1e070 <is_lfcr>
   12208:	b178      	cbz	r0, 1222a <at_parser_max_params_from_str+0xa6>
				index++;
   1220a:	3401      	adds	r4, #1
				if (index == max_params) {
   1220c:	42bc      	cmp	r4, r7
   1220e:	d039      	beq.n	12284 <at_parser_max_params_from_str+0x100>
				if (at_parse_detect_type(&str, index) == -1) {
   12210:	4621      	mov	r1, r4
   12212:	a801      	add	r0, sp, #4
   12214:	f7ff ff56 	bl	120c4 <at_parse_detect_type>
   12218:	1c42      	adds	r2, r0, #1
   1221a:	d01e      	beq.n	1225a <at_parser_max_params_from_str+0xd6>
				if (at_parse_process_element(&str, index,
   1221c:	4632      	mov	r2, r6
   1221e:	4621      	mov	r1, r4
   12220:	a801      	add	r0, sp, #4
   12222:	f7ff fe7b 	bl	11f1c <at_parse_process_element>
   12226:	1c43      	adds	r3, r0, #1
   12228:	d017      	beq.n	1225a <at_parser_max_params_from_str+0xd6>
			str++;
   1222a:	9b01      	ldr	r3, [sp, #4]
   1222c:	3301      	adds	r3, #1
   1222e:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   12230:	9a01      	ldr	r2, [sp, #4]
   12232:	7810      	ldrb	r0, [r2, #0]
   12234:	f00b ff1c 	bl	1e070 <is_lfcr>
   12238:	b1f8      	cbz	r0, 1227a <at_parser_max_params_from_str+0xf6>
   1223a:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   1223c:	7811      	ldrb	r1, [r2, #0]
   1223e:	4692      	mov	sl, r2
   12240:	4608      	mov	r0, r1
   12242:	3201      	adds	r2, #1
   12244:	f00b ff14 	bl	1e070 <is_lfcr>
   12248:	2800      	cmp	r0, #0
   1224a:	d1f7      	bne.n	1223c <at_parser_max_params_from_str+0xb8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1224c:	b119      	cbz	r1, 12256 <at_parser_max_params_from_str+0xd2>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1224e:	292b      	cmp	r1, #43	; 0x2b
   12250:	d001      	beq.n	12256 <at_parser_max_params_from_str+0xd2>
   12252:	2925      	cmp	r1, #37	; 0x25
   12254:	d111      	bne.n	1227a <at_parser_max_params_from_str+0xf6>
				str += i;
   12256:	f8cd a004 	str.w	sl, [sp, #4]
	*at_params_str = str;
   1225a:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   1225c:	b9a5      	cbnz	r5, 12288 <at_parser_max_params_from_str+0x104>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1225e:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   12260:	2a00      	cmp	r2, #0
   12262:	bf0c      	ite	eq
   12264:	2000      	moveq	r0, #0
   12266:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   1226a:	f1b8 0f00 	cmp.w	r8, #0
   1226e:	d001      	beq.n	12274 <at_parser_max_params_from_str+0xf0>
		*next_param_str = (char *)at_params_str;
   12270:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   12274:	b002      	add	sp, #8
   12276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		index++;
   1227a:	3401      	adds	r4, #1
			oversized = true;
   1227c:	42bc      	cmp	r4, r7
   1227e:	bf08      	it	eq
   12280:	2501      	moveq	r5, #1
   12282:	e79a      	b.n	121ba <at_parser_max_params_from_str+0x36>
					oversized = true;
   12284:	4605      	mov	r5, r0
   12286:	e7e8      	b.n	1225a <at_parser_max_params_from_str+0xd6>
		return -E2BIG;
   12288:	f06f 0006 	mvn.w	r0, #6
   1228c:	e7ed      	b.n	1226a <at_parser_max_params_from_str+0xe6>
		return -EINVAL;
   1228e:	f06f 0015 	mvn.w	r0, #21
   12292:	e7ef      	b.n	12274 <at_parser_max_params_from_str+0xf0>
   12294:	200265bf 	.word	0x200265bf
   12298:	00024001 	.word	0x00024001

0001229c <lte_lc_power_off>:

	return 0;
}

int lte_lc_power_off(void)
{
   1229c:	b508      	push	{r3, lr}
	if (at_cmd_write(power_off, NULL, 0, NULL) != 0) {
   1229e:	2300      	movs	r3, #0
   122a0:	4804      	ldr	r0, [pc, #16]	; (122b4 <lte_lc_power_off+0x18>)
   122a2:	461a      	mov	r2, r3
   122a4:	4619      	mov	r1, r3
   122a6:	f7ff fced 	bl	11c84 <at_cmd_write>
   122aa:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   122ac:	bf18      	it	ne
   122ae:	f06f 0004 	mvnne.w	r0, #4
   122b2:	bd08      	pop	{r3, pc}
   122b4:	00020890 	.word	0x00020890

000122b8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   122b8:	b508      	push	{r3, lr}
	z_impl_log_panic();
   122ba:	f7fc fb71 	bl	e9a0 <z_impl_log_panic>
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   122be:	2301      	movs	r3, #1
   122c0:	f04f 0100 	mov.w	r1, #0
   122c4:	4a06      	ldr	r2, [pc, #24]	; (122e0 <k_sys_fatal_error_handler+0x28>)
   122c6:	f363 0107 	bfi	r1, r3, #0, #8
   122ca:	4b06      	ldr	r3, [pc, #24]	; (122e4 <k_sys_fatal_error_handler+0x2c>)
   122cc:	4806      	ldr	r0, [pc, #24]	; (122e8 <k_sys_fatal_error_handler+0x30>)
   122ce:	1a9b      	subs	r3, r3, r2
   122d0:	08db      	lsrs	r3, r3, #3
   122d2:	f363 118f 	bfi	r1, r3, #6, #10
   122d6:	f00a f9bc 	bl	1c652 <log_0>
	sys_arch_reboot(0);
   122da:	2000      	movs	r0, #0
   122dc:	f7fd fca4 	bl	fc28 <sys_arch_reboot>

	CODE_UNREACHABLE;
   122e0:	0001ee58 	.word	0x0001ee58
   122e4:	0001ee88 	.word	0x0001ee88
   122e8:	000208a1 	.word	0x000208a1

000122ec <ext_api_getter>:
extern const struct fw_info_ext_api * const _ext_apis_start[];
extern const u32_t _ext_apis_size;
__noinit fw_info_ext_api_getter ext_api_getter_in;

int ext_api_getter(u32_t id, u32_t index, const struct fw_info_ext_api **out)
{
   122ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!out) {
   122ee:	b1da      	cbz	r2, 12328 <ext_api_getter+0x3c>
		return -EFAULT;
	}

	bool id_found = false;

	for (u32_t i = 0; i < (u32_t)&_ext_apis_size; i++) {
   122f0:	2300      	movs	r3, #0
	bool id_found = false;
   122f2:	461c      	mov	r4, r3
   122f4:	4d0e      	ldr	r5, [pc, #56]	; (12330 <ext_api_getter+0x44>)
	for (u32_t i = 0; i < (u32_t)&_ext_apis_size; i++) {
   122f6:	4f0f      	ldr	r7, [pc, #60]	; (12334 <ext_api_getter+0x48>)
   122f8:	42bb      	cmp	r3, r7
   122fa:	d306      	bcc.n	1230a <ext_api_getter+0x1e>
				*out = ext_api;
				return 0;
			}
		}
	}
	return id_found ? -EBADF : -ENOENT;
   122fc:	2c00      	cmp	r4, #0
   122fe:	bf14      	ite	ne
   12300:	f06f 0008 	mvnne.w	r0, #8
   12304:	f06f 0001 	mvneq.w	r0, #1
   12308:	e009      	b.n	1231e <ext_api_getter+0x32>
		const struct fw_info_ext_api *ext_api = _ext_apis_start[i];
   1230a:	f855 6b04 	ldr.w	r6, [r5], #4
		if (ext_api->ext_api_id == id) {
   1230e:	f8d6 c00c 	ldr.w	ip, [r6, #12]
   12312:	4560      	cmp	r0, ip
   12314:	d106      	bne.n	12324 <ext_api_getter+0x38>
			if (index-- == 0) {
   12316:	1e4c      	subs	r4, r1, #1
   12318:	b911      	cbnz	r1, 12320 <ext_api_getter+0x34>
				return 0;
   1231a:	4608      	mov	r0, r1
				*out = ext_api;
   1231c:	6016      	str	r6, [r2, #0]
}
   1231e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (index-- == 0) {
   12320:	4621      	mov	r1, r4
			id_found = true;
   12322:	2401      	movs	r4, #1
	for (u32_t i = 0; i < (u32_t)&_ext_apis_size; i++) {
   12324:	3301      	adds	r3, #1
   12326:	e7e7      	b.n	122f8 <ext_api_getter+0xc>
		return -EFAULT;
   12328:	f06f 000d 	mvn.w	r0, #13
   1232c:	e7f7      	b.n	1231e <ext_api_getter+0x32>
   1232e:	bf00      	nop
   12330:	000209d0 	.word	0x000209d0
   12334:	00000000 	.word	0x00000000

00012338 <rpc_logobj_client_evt_handler>:
   12338:	b120      	cbz	r0, 12344 <rpc_logobj_client_evt_handler+0xc>
   1233a:	f850 1b08 	ldr.w	r1, [r0], #8
   1233e:	0c09      	lsrs	r1, r1, #16
   12340:	f000 b852 	b.w	123e8 <logobj_event_handler>
   12344:	4770      	bx	lr
   12346:	bf00      	nop

00012348 <rpc_logobj_client_init>:
   12348:	4801      	ldr	r0, [pc, #4]	; (12350 <rpc_logobj_client_init+0x8>)
   1234a:	f006 bb87 	b.w	18a5c <rpc_client_register>
   1234e:	bf00      	nop
   12350:	0001f0d8 	.word	0x0001f0d8

00012354 <rpc_logobj_client_request_alloc>:
   12354:	2300      	movs	r3, #0
   12356:	b510      	push	{r4, lr}
   12358:	b082      	sub	sp, #8
   1235a:	9301      	str	r3, [sp, #4]
   1235c:	b961      	cbnz	r1, 12378 <rpc_logobj_client_request_alloc+0x24>
   1235e:	b170      	cbz	r0, 1237e <rpc_logobj_client_request_alloc+0x2a>
   12360:	4604      	mov	r4, r0
   12362:	aa01      	add	r2, sp, #4
   12364:	2009      	movs	r0, #9
   12366:	f006 fdb1 	bl	18ecc <rpc_message_alloc>
   1236a:	b918      	cbnz	r0, 12374 <rpc_logobj_client_request_alloc+0x20>
   1236c:	9b01      	ldr	r3, [sp, #4]
   1236e:	b10b      	cbz	r3, 12374 <rpc_logobj_client_request_alloc+0x20>
   12370:	3308      	adds	r3, #8
   12372:	6023      	str	r3, [r4, #0]
   12374:	b002      	add	sp, #8
   12376:	bd10      	pop	{r4, pc}
   12378:	200f      	movs	r0, #15
   1237a:	b002      	add	sp, #8
   1237c:	bd10      	pop	{r4, pc}
   1237e:	200e      	movs	r0, #14
   12380:	b002      	add	sp, #8
   12382:	bd10      	pop	{r4, pc}

00012384 <rpc_logobj_client_request_send>:
   12384:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   12388:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   1238c:	d10b      	bne.n	123a6 <rpc_logobj_client_request_send+0x22>
   1238e:	b160      	cbz	r0, 123aa <rpc_logobj_client_request_send+0x26>
   12390:	4603      	mov	r3, r0
   12392:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   12396:	2009      	movs	r0, #9
   12398:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1239c:	f843 1d08 	str.w	r1, [r3, #-8]!
   123a0:	4619      	mov	r1, r3
   123a2:	f006 bd7b 	b.w	18e9c <rpc_message_send>
   123a6:	200f      	movs	r0, #15
   123a8:	4770      	bx	lr
   123aa:	200e      	movs	r0, #14
   123ac:	4770      	bx	lr
   123ae:	bf00      	nop

000123b0 <rpc_logobj_client_message_free>:
   123b0:	b120      	cbz	r0, 123bc <rpc_logobj_client_message_free+0xc>
   123b2:	f1a0 0108 	sub.w	r1, r0, #8
   123b6:	2009      	movs	r0, #9
   123b8:	f006 bdba 	b.w	18f30 <rpc_message_free>
   123bc:	200e      	movs	r0, #14
   123be:	4770      	bx	lr

000123c0 <rpc_logobj_client_data_free>:
   123c0:	b118      	cbz	r0, 123ca <rpc_logobj_client_data_free+0xa>
   123c2:	4601      	mov	r1, r0
   123c4:	2009      	movs	r0, #9
   123c6:	f006 bec5 	b.w	19154 <rpc_message_data_free>
   123ca:	200e      	movs	r0, #14
   123cc:	4770      	bx	lr
   123ce:	bf00      	nop

000123d0 <packet_free_cb>:
   123d0:	b510      	push	{r4, lr}
   123d2:	4604      	mov	r4, r0
   123d4:	6800      	ldr	r0, [r0, #0]
   123d6:	f7ff fff3 	bl	123c0 <rpc_logobj_client_data_free>
   123da:	68a0      	ldr	r0, [r4, #8]
   123dc:	b118      	cbz	r0, 123e6 <packet_free_cb+0x16>
   123de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   123e2:	f001 b90f 	b.w	13604 <nrf_free>
   123e6:	bd10      	pop	{r4, pc}

000123e8 <logobj_event_handler>:
   123e8:	b530      	push	{r4, r5, lr}
   123ea:	4b3b      	ldr	r3, [pc, #236]	; (124d8 <logobj_event_handler+0xf0>)
   123ec:	b085      	sub	sp, #20
   123ee:	681d      	ldr	r5, [r3, #0]
   123f0:	2d00      	cmp	r5, #0
   123f2:	d04c      	beq.n	1248e <logobj_event_handler+0xa6>
   123f4:	f248 0302 	movw	r3, #32770	; 0x8002
   123f8:	4299      	cmp	r1, r3
   123fa:	d053      	beq.n	124a4 <logobj_event_handler+0xbc>
   123fc:	d91c      	bls.n	12438 <logobj_event_handler+0x50>
   123fe:	f248 0303 	movw	r3, #32771	; 0x8003
   12402:	4299      	cmp	r1, r3
   12404:	d05a      	beq.n	124bc <logobj_event_handler+0xd4>
   12406:	f249 0301 	movw	r3, #36865	; 0x9001
   1240a:	4299      	cmp	r1, r3
   1240c:	d147      	bne.n	1249e <logobj_event_handler+0xb6>
   1240e:	2400      	movs	r4, #0
   12410:	6843      	ldr	r3, [r0, #4]
   12412:	6802      	ldr	r2, [r0, #0]
   12414:	e9cd 4402 	strd	r4, r4, [sp, #8]
   12418:	e9cd 2300 	strd	r2, r3, [sp]
   1241c:	69e8      	ldr	r0, [r5, #28]
   1241e:	4669      	mov	r1, sp
   12420:	6803      	ldr	r3, [r0, #0]
   12422:	685b      	ldr	r3, [r3, #4]
   12424:	4798      	blx	r3
   12426:	3001      	adds	r0, #1
   12428:	d04e      	beq.n	124c8 <logobj_event_handler+0xe0>
   1242a:	4620      	mov	r0, r4
   1242c:	682b      	ldr	r3, [r5, #0]
   1242e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   12432:	602b      	str	r3, [r5, #0]
   12434:	b005      	add	sp, #20
   12436:	bd30      	pop	{r4, r5, pc}
   12438:	f248 0301 	movw	r3, #32769	; 0x8001
   1243c:	4299      	cmp	r1, r3
   1243e:	d12e      	bne.n	1249e <logobj_event_handler+0xb6>
   12440:	68c3      	ldr	r3, [r0, #12]
   12442:	2b00      	cmp	r3, #0
   12444:	d135      	bne.n	124b2 <logobj_event_handler+0xca>
   12446:	6828      	ldr	r0, [r5, #0]
   12448:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   1244c:	d03e      	beq.n	124cc <logobj_event_handler+0xe4>
   1244e:	682b      	ldr	r3, [r5, #0]
   12450:	b29b      	uxth	r3, r3
   12452:	2b01      	cmp	r3, #1
   12454:	d105      	bne.n	12462 <logobj_event_handler+0x7a>
   12456:	682b      	ldr	r3, [r5, #0]
   12458:	0c1b      	lsrs	r3, r3, #16
   1245a:	041b      	lsls	r3, r3, #16
   1245c:	f043 0302 	orr.w	r3, r3, #2
   12460:	602b      	str	r3, [r5, #0]
   12462:	4b1e      	ldr	r3, [pc, #120]	; (124dc <logobj_event_handler+0xf4>)
   12464:	781a      	ldrb	r2, [r3, #0]
   12466:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   1246a:	2a00      	cmp	r2, #0
   1246c:	d031      	beq.n	124d2 <logobj_event_handler+0xea>
   1246e:	4a1c      	ldr	r2, [pc, #112]	; (124e0 <logobj_event_handler+0xf8>)
   12470:	7811      	ldrb	r1, [r2, #0]
   12472:	b909      	cbnz	r1, 12478 <logobj_event_handler+0x90>
   12474:	2101      	movs	r1, #1
   12476:	7011      	strb	r1, [r2, #0]
   12478:	2000      	movs	r0, #0
   1247a:	7018      	strb	r0, [r3, #0]
   1247c:	682b      	ldr	r3, [r5, #0]
   1247e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12482:	602b      	str	r3, [r5, #0]
   12484:	682b      	ldr	r3, [r5, #0]
   12486:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1248a:	602b      	str	r3, [r5, #0]
   1248c:	e7d2      	b.n	12434 <logobj_event_handler+0x4c>
   1248e:	6800      	ldr	r0, [r0, #0]
   12490:	2800      	cmp	r0, #0
   12492:	d0cf      	beq.n	12434 <logobj_event_handler+0x4c>
   12494:	f7ff ff94 	bl	123c0 <rpc_logobj_client_data_free>
   12498:	4628      	mov	r0, r5
   1249a:	b005      	add	sp, #20
   1249c:	bd30      	pop	{r4, r5, pc}
   1249e:	2000      	movs	r0, #0
   124a0:	b005      	add	sp, #20
   124a2:	bd30      	pop	{r4, r5, pc}
   124a4:	682b      	ldr	r3, [r5, #0]
   124a6:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   124aa:	d00b      	beq.n	124c4 <logobj_event_handler+0xdc>
   124ac:	68c0      	ldr	r0, [r0, #12]
   124ae:	2800      	cmp	r0, #0
   124b0:	d0e4      	beq.n	1247c <logobj_event_handler+0x94>
   124b2:	230e      	movs	r3, #14
   124b4:	2000      	movs	r0, #0
   124b6:	606b      	str	r3, [r5, #4]
   124b8:	b005      	add	sp, #20
   124ba:	bd30      	pop	{r4, r5, pc}
   124bc:	68c3      	ldr	r3, [r0, #12]
   124be:	2b01      	cmp	r3, #1
   124c0:	d1a5      	bne.n	1240e <logobj_event_handler+0x26>
   124c2:	e7f6      	b.n	124b2 <logobj_event_handler+0xca>
   124c4:	4618      	mov	r0, r3
   124c6:	e7b5      	b.n	12434 <logobj_event_handler+0x4c>
   124c8:	2002      	movs	r0, #2
   124ca:	e7b3      	b.n	12434 <logobj_event_handler+0x4c>
   124cc:	230e      	movs	r3, #14
   124ce:	606b      	str	r3, [r5, #4]
   124d0:	e7b0      	b.n	12434 <logobj_event_handler+0x4c>
   124d2:	4a03      	ldr	r2, [pc, #12]	; (124e0 <logobj_event_handler+0xf8>)
   124d4:	7011      	strb	r1, [r2, #0]
   124d6:	e7cf      	b.n	12478 <logobj_event_handler+0x90>
   124d8:	200204d0 	.word	0x200204d0
   124dc:	200265c0 	.word	0x200265c0
   124e0:	200265c1 	.word	0x200265c1

000124e4 <logobj_interface_init>:
   124e4:	2300      	movs	r3, #0
   124e6:	b510      	push	{r4, lr}
   124e8:	4907      	ldr	r1, [pc, #28]	; (12508 <logobj_interface_init+0x24>)
   124ea:	4a08      	ldr	r2, [pc, #32]	; (1250c <logobj_interface_init+0x28>)
   124ec:	4c08      	ldr	r4, [pc, #32]	; (12510 <logobj_interface_init+0x2c>)
   124ee:	4809      	ldr	r0, [pc, #36]	; (12514 <logobj_interface_init+0x30>)
   124f0:	7023      	strb	r3, [r4, #0]
   124f2:	6003      	str	r3, [r0, #0]
   124f4:	700b      	strb	r3, [r1, #0]
   124f6:	6013      	str	r3, [r2, #0]
   124f8:	f7ff ff26 	bl	12348 <rpc_logobj_client_init>
   124fc:	3000      	adds	r0, #0
   124fe:	bf18      	it	ne
   12500:	2001      	movne	r0, #1
   12502:	4240      	negs	r0, r0
   12504:	bd10      	pop	{r4, pc}
   12506:	bf00      	nop
   12508:	200265c0 	.word	0x200265c0
   1250c:	200204cc 	.word	0x200204cc
   12510:	200265c1 	.word	0x200265c1
   12514:	200204d0 	.word	0x200204d0

00012518 <logobj_interface_open>:
   12518:	2300      	movs	r3, #0
   1251a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1251e:	2866      	cmp	r0, #102	; 0x66
   12520:	b082      	sub	sp, #8
   12522:	9300      	str	r3, [sp, #0]
   12524:	d172      	bne.n	1260c <logobj_interface_open+0xf4>
   12526:	2902      	cmp	r1, #2
   12528:	4689      	mov	r9, r1
   1252a:	d16f      	bne.n	1260c <logobj_interface_open+0xf4>
   1252c:	f240 2305 	movw	r3, #517	; 0x205
   12530:	429a      	cmp	r2, r3
   12532:	4692      	mov	sl, r2
   12534:	d16a      	bne.n	1260c <logobj_interface_open+0xf4>
   12536:	4f48      	ldr	r7, [pc, #288]	; (12658 <logobj_interface_open+0x140>)
   12538:	683d      	ldr	r5, [r7, #0]
   1253a:	2d00      	cmp	r5, #0
   1253c:	d17c      	bne.n	12638 <logobj_interface_open+0x120>
   1253e:	4680      	mov	r8, r0
   12540:	4a46      	ldr	r2, [pc, #280]	; (1265c <logobj_interface_open+0x144>)
   12542:	4668      	mov	r0, sp
   12544:	f006 f81c 	bl	18580 <interface_socket_allocate>
   12548:	9b00      	ldr	r3, [sp, #0]
   1254a:	4606      	mov	r6, r0
   1254c:	2b00      	cmp	r3, #0
   1254e:	d07d      	beq.n	1264c <logobj_interface_open+0x134>
   12550:	4629      	mov	r1, r5
   12552:	2204      	movs	r2, #4
   12554:	4842      	ldr	r0, [pc, #264]	; (12660 <logobj_interface_open+0x148>)
   12556:	603b      	str	r3, [r7, #0]
   12558:	f00a fe1b 	bl	1d192 <memset>
   1255c:	9c00      	ldr	r4, [sp, #0]
   1255e:	4629      	mov	r1, r5
   12560:	e9c4 8903 	strd	r8, r9, [r4, #12]
   12564:	f8c4 a014 	str.w	sl, [r4, #20]
   12568:	a801      	add	r0, sp, #4
   1256a:	f7ff fef3 	bl	12354 <rpc_logobj_client_request_alloc>
   1256e:	2800      	cmp	r0, #0
   12570:	d13c      	bne.n	125ec <logobj_interface_open+0xd4>
   12572:	2201      	movs	r2, #1
   12574:	2104      	movs	r1, #4
   12576:	9b01      	ldr	r3, [sp, #4]
   12578:	4d3a      	ldr	r5, [pc, #232]	; (12664 <logobj_interface_open+0x14c>)
   1257a:	7358      	strb	r0, [r3, #13]
   1257c:	7398      	strb	r0, [r3, #14]
   1257e:	73d8      	strb	r0, [r3, #15]
   12580:	7258      	strb	r0, [r3, #9]
   12582:	7298      	strb	r0, [r3, #10]
   12584:	72d8      	strb	r0, [r3, #11]
   12586:	7219      	strb	r1, [r3, #8]
   12588:	702a      	strb	r2, [r5, #0]
   1258a:	731a      	strb	r2, [r3, #12]
   1258c:	6822      	ldr	r2, [r4, #0]
   1258e:	4618      	mov	r0, r3
   12590:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   12594:	6022      	str	r2, [r4, #0]
   12596:	f247 0101 	movw	r1, #28673	; 0x7001
   1259a:	f7ff fef3 	bl	12384 <rpc_logobj_client_request_send>
   1259e:	bb38      	cbnz	r0, 125f0 <logobj_interface_open+0xd8>
   125a0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   125a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   125a8:	4611      	mov	r1, r2
   125aa:	4630      	mov	r0, r6
   125ac:	f006 f88c 	bl	186c8 <interface_socket_wait>
   125b0:	4604      	mov	r4, r0
   125b2:	b310      	cbz	r0, 125fa <logobj_interface_open+0xe2>
   125b4:	9a00      	ldr	r2, [sp, #0]
   125b6:	2e00      	cmp	r6, #0
   125b8:	6813      	ldr	r3, [r2, #0]
   125ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   125be:	6013      	str	r3, [r2, #0]
   125c0:	9a00      	ldr	r2, [sp, #0]
   125c2:	6813      	ldr	r3, [r2, #0]
   125c4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   125c8:	6013      	str	r3, [r2, #0]
   125ca:	9a00      	ldr	r2, [sp, #0]
   125cc:	6813      	ldr	r3, [r2, #0]
   125ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   125d2:	6013      	str	r3, [r2, #0]
   125d4:	da36      	bge.n	12644 <logobj_interface_open+0x12c>
   125d6:	2300      	movs	r3, #0
   125d8:	4620      	mov	r0, r4
   125da:	603b      	str	r3, [r7, #0]
   125dc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   125e0:	f7fe ff60 	bl	114a4 <bsd_os_errno_set>
   125e4:	4630      	mov	r0, r6
   125e6:	b002      	add	sp, #8
   125e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   125ec:	240c      	movs	r4, #12
   125ee:	e7e1      	b.n	125b4 <logobj_interface_open+0x9c>
   125f0:	9801      	ldr	r0, [sp, #4]
   125f2:	f7ff fedd 	bl	123b0 <rpc_logobj_client_message_free>
   125f6:	2405      	movs	r4, #5
   125f8:	e7dc      	b.n	125b4 <logobj_interface_open+0x9c>
   125fa:	4630      	mov	r0, r6
   125fc:	f006 f8d0 	bl	187a0 <interface_socket_from_handle_get>
   12600:	b150      	cbz	r0, 12618 <logobj_interface_open+0x100>
   12602:	6844      	ldr	r4, [r0, #4]
   12604:	b144      	cbz	r4, 12618 <logobj_interface_open+0x100>
   12606:	2300      	movs	r3, #0
   12608:	6043      	str	r3, [r0, #4]
   1260a:	e7d3      	b.n	125b4 <logobj_interface_open+0x9c>
   1260c:	2016      	movs	r0, #22
   1260e:	f7fe ff49 	bl	114a4 <bsd_os_errno_set>
   12612:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   12616:	e7e5      	b.n	125e4 <logobj_interface_open+0xcc>
   12618:	9a00      	ldr	r2, [sp, #0]
   1261a:	6813      	ldr	r3, [r2, #0]
   1261c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12620:	6013      	str	r3, [r2, #0]
   12622:	9a00      	ldr	r2, [sp, #0]
   12624:	6813      	ldr	r3, [r2, #0]
   12626:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1262a:	6013      	str	r3, [r2, #0]
   1262c:	9a00      	ldr	r2, [sp, #0]
   1262e:	6813      	ldr	r3, [r2, #0]
   12630:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   12634:	6013      	str	r3, [r2, #0]
   12636:	e7d5      	b.n	125e4 <logobj_interface_open+0xcc>
   12638:	2001      	movs	r0, #1
   1263a:	f7fe ff33 	bl	114a4 <bsd_os_errno_set>
   1263e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   12642:	e7cf      	b.n	125e4 <logobj_interface_open+0xcc>
   12644:	4630      	mov	r0, r6
   12646:	f005 fff1 	bl	1862c <interface_socket_free>
   1264a:	e7c4      	b.n	125d6 <logobj_interface_open+0xbe>
   1264c:	2018      	movs	r0, #24
   1264e:	f7fe ff29 	bl	114a4 <bsd_os_errno_set>
   12652:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   12656:	e7c5      	b.n	125e4 <logobj_interface_open+0xcc>
   12658:	200204d0 	.word	0x200204d0
   1265c:	000123d1 	.word	0x000123d1
   12660:	200204cc 	.word	0x200204cc
   12664:	200265c0 	.word	0x200265c0

00012668 <logobj_interface_read>:
   12668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1266c:	b085      	sub	sp, #20
   1266e:	2900      	cmp	r1, #0
   12670:	d05e      	beq.n	12730 <logobj_interface_read+0xc8>
   12672:	2a00      	cmp	r2, #0
   12674:	4616      	mov	r6, r2
   12676:	dd5b      	ble.n	12730 <logobj_interface_read+0xc8>
   12678:	461f      	mov	r7, r3
   1267a:	4680      	mov	r8, r0
   1267c:	460d      	mov	r5, r1
   1267e:	f006 f88f 	bl	187a0 <interface_socket_from_handle_get>
   12682:	4604      	mov	r4, r0
   12684:	2800      	cmp	r0, #0
   12686:	d059      	beq.n	1273c <logobj_interface_read+0xd4>
   12688:	69c0      	ldr	r0, [r0, #28]
   1268a:	07ba      	lsls	r2, r7, #30
   1268c:	6803      	ldr	r3, [r0, #0]
   1268e:	68db      	ldr	r3, [r3, #12]
   12690:	d524      	bpl.n	126dc <logobj_interface_read+0x74>
   12692:	4798      	blx	r3
   12694:	3001      	adds	r0, #1
   12696:	d03b      	beq.n	12710 <logobj_interface_read+0xa8>
   12698:	6823      	ldr	r3, [r4, #0]
   1269a:	69e0      	ldr	r0, [r4, #28]
   1269c:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   126a0:	d038      	beq.n	12714 <logobj_interface_read+0xac>
   126a2:	2100      	movs	r1, #0
   126a4:	6823      	ldr	r3, [r4, #0]
   126a6:	463a      	mov	r2, r7
   126a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   126ac:	6023      	str	r3, [r4, #0]
   126ae:	e9cd 1102 	strd	r1, r1, [sp, #8]
   126b2:	e9cd 5600 	strd	r5, r6, [sp]
   126b6:	6803      	ldr	r3, [r0, #0]
   126b8:	4669      	mov	r1, sp
   126ba:	689b      	ldr	r3, [r3, #8]
   126bc:	4798      	blx	r3
   126be:	4605      	mov	r5, r0
   126c0:	69e0      	ldr	r0, [r4, #28]
   126c2:	6803      	ldr	r3, [r0, #0]
   126c4:	68db      	ldr	r3, [r3, #12]
   126c6:	4798      	blx	r3
   126c8:	3001      	adds	r0, #1
   126ca:	d003      	beq.n	126d4 <logobj_interface_read+0x6c>
   126cc:	6823      	ldr	r3, [r4, #0]
   126ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   126d2:	6023      	str	r3, [r4, #0]
   126d4:	4628      	mov	r0, r5
   126d6:	b005      	add	sp, #20
   126d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   126dc:	6822      	ldr	r2, [r4, #0]
   126de:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   126e2:	d1d6      	bne.n	12692 <logobj_interface_read+0x2a>
   126e4:	4798      	blx	r3
   126e6:	1c43      	adds	r3, r0, #1
   126e8:	d1d6      	bne.n	12698 <logobj_interface_read+0x30>
   126ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   126ee:	6a23      	ldr	r3, [r4, #32]
   126f0:	4611      	mov	r1, r2
   126f2:	2b00      	cmp	r3, #0
   126f4:	bf08      	it	eq
   126f6:	4603      	moveq	r3, r0
   126f8:	4640      	mov	r0, r8
   126fa:	f005 ffe5 	bl	186c8 <interface_socket_wait>
   126fe:	b158      	cbz	r0, 12718 <logobj_interface_read+0xb0>
   12700:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12704:	f7fe fece 	bl	114a4 <bsd_os_errno_set>
   12708:	4628      	mov	r0, r5
   1270a:	b005      	add	sp, #20
   1270c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12710:	2023      	movs	r0, #35	; 0x23
   12712:	e7f5      	b.n	12700 <logobj_interface_read+0x98>
   12714:	461d      	mov	r5, r3
   12716:	e7d4      	b.n	126c2 <logobj_interface_read+0x5a>
   12718:	4640      	mov	r0, r8
   1271a:	f006 f841 	bl	187a0 <interface_socket_from_handle_get>
   1271e:	4603      	mov	r3, r0
   12720:	2800      	cmp	r0, #0
   12722:	d0b9      	beq.n	12698 <logobj_interface_read+0x30>
   12724:	6840      	ldr	r0, [r0, #4]
   12726:	2800      	cmp	r0, #0
   12728:	d0b6      	beq.n	12698 <logobj_interface_read+0x30>
   1272a:	f8c3 9004 	str.w	r9, [r3, #4]
   1272e:	e7e7      	b.n	12700 <logobj_interface_read+0x98>
   12730:	2016      	movs	r0, #22
   12732:	f7fe feb7 	bl	114a4 <bsd_os_errno_set>
   12736:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1273a:	e7cb      	b.n	126d4 <logobj_interface_read+0x6c>
   1273c:	2009      	movs	r0, #9
   1273e:	f7fe feb1 	bl	114a4 <bsd_os_errno_set>
   12742:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12746:	e7c5      	b.n	126d4 <logobj_interface_read+0x6c>

00012748 <logobj_interface_write>:
   12748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1274c:	b082      	sub	sp, #8
   1274e:	2900      	cmp	r1, #0
   12750:	d05b      	beq.n	1280a <logobj_interface_write+0xc2>
   12752:	2a04      	cmp	r2, #4
   12754:	d159      	bne.n	1280a <logobj_interface_write+0xc2>
   12756:	461e      	mov	r6, r3
   12758:	4607      	mov	r7, r0
   1275a:	460d      	mov	r5, r1
   1275c:	f006 f820 	bl	187a0 <interface_socket_from_handle_get>
   12760:	4604      	mov	r4, r0
   12762:	2800      	cmp	r0, #0
   12764:	d067      	beq.n	12836 <logobj_interface_write+0xee>
   12766:	07b0      	lsls	r0, r6, #30
   12768:	d526      	bpl.n	127b8 <logobj_interface_write+0x70>
   1276a:	6823      	ldr	r3, [r4, #0]
   1276c:	039b      	lsls	r3, r3, #14
   1276e:	d55e      	bpl.n	1282e <logobj_interface_write+0xe6>
   12770:	2600      	movs	r6, #0
   12772:	6823      	ldr	r3, [r4, #0]
   12774:	2100      	movs	r1, #0
   12776:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1277a:	6023      	str	r3, [r4, #0]
   1277c:	a801      	add	r0, sp, #4
   1277e:	f8d5 8000 	ldr.w	r8, [r5]
   12782:	f7ff fde7 	bl	12354 <rpc_logobj_client_request_alloc>
   12786:	b9f8      	cbnz	r0, 127c8 <logobj_interface_write+0x80>
   12788:	2504      	movs	r5, #4
   1278a:	9b01      	ldr	r3, [sp, #4]
   1278c:	f247 0103 	movw	r1, #28675	; 0x7003
   12790:	f8c3 800c 	str.w	r8, [r3, #12]
   12794:	7258      	strb	r0, [r3, #9]
   12796:	7298      	strb	r0, [r3, #10]
   12798:	72d8      	strb	r0, [r3, #11]
   1279a:	721d      	strb	r5, [r3, #8]
   1279c:	4618      	mov	r0, r3
   1279e:	f7ff fdf1 	bl	12384 <rpc_logobj_client_request_send>
   127a2:	4680      	mov	r8, r0
   127a4:	bb40      	cbnz	r0, 127f8 <logobj_interface_write+0xb0>
   127a6:	b9ce      	cbnz	r6, 127dc <logobj_interface_write+0x94>
   127a8:	4628      	mov	r0, r5
   127aa:	6823      	ldr	r3, [r4, #0]
   127ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   127b0:	6023      	str	r3, [r4, #0]
   127b2:	b002      	add	sp, #8
   127b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   127b8:	6823      	ldr	r3, [r4, #0]
   127ba:	00d9      	lsls	r1, r3, #3
   127bc:	d4d5      	bmi.n	1276a <logobj_interface_write+0x22>
   127be:	6823      	ldr	r3, [r4, #0]
   127c0:	039a      	lsls	r2, r3, #14
   127c2:	d536      	bpl.n	12832 <logobj_interface_write+0xea>
   127c4:	2601      	movs	r6, #1
   127c6:	e7d4      	b.n	12772 <logobj_interface_write+0x2a>
   127c8:	200c      	movs	r0, #12
   127ca:	6823      	ldr	r3, [r4, #0]
   127cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   127d0:	6023      	str	r3, [r4, #0]
   127d2:	f7fe fe67 	bl	114a4 <bsd_os_errno_set>
   127d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   127da:	e7ea      	b.n	127b2 <logobj_interface_write+0x6a>
   127dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   127e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   127e4:	4611      	mov	r1, r2
   127e6:	4638      	mov	r0, r7
   127e8:	f005 ff6e 	bl	186c8 <interface_socket_wait>
   127ec:	b198      	cbz	r0, 12816 <logobj_interface_write+0xce>
   127ee:	6823      	ldr	r3, [r4, #0]
   127f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   127f4:	6023      	str	r3, [r4, #0]
   127f6:	e7ec      	b.n	127d2 <logobj_interface_write+0x8a>
   127f8:	9801      	ldr	r0, [sp, #4]
   127fa:	f7ff fdd9 	bl	123b0 <rpc_logobj_client_message_free>
   127fe:	6823      	ldr	r3, [r4, #0]
   12800:	2005      	movs	r0, #5
   12802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12806:	6023      	str	r3, [r4, #0]
   12808:	e7e3      	b.n	127d2 <logobj_interface_write+0x8a>
   1280a:	2016      	movs	r0, #22
   1280c:	f7fe fe4a 	bl	114a4 <bsd_os_errno_set>
   12810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12814:	e7cd      	b.n	127b2 <logobj_interface_write+0x6a>
   12816:	4638      	mov	r0, r7
   12818:	f005 ffc2 	bl	187a0 <interface_socket_from_handle_get>
   1281c:	4603      	mov	r3, r0
   1281e:	2800      	cmp	r0, #0
   12820:	d0c2      	beq.n	127a8 <logobj_interface_write+0x60>
   12822:	6840      	ldr	r0, [r0, #4]
   12824:	2800      	cmp	r0, #0
   12826:	d0bf      	beq.n	127a8 <logobj_interface_write+0x60>
   12828:	f8c3 8004 	str.w	r8, [r3, #4]
   1282c:	e7df      	b.n	127ee <logobj_interface_write+0xa6>
   1282e:	2073      	movs	r0, #115	; 0x73
   12830:	e7cf      	b.n	127d2 <logobj_interface_write+0x8a>
   12832:	2009      	movs	r0, #9
   12834:	e7cd      	b.n	127d2 <logobj_interface_write+0x8a>
   12836:	2009      	movs	r0, #9
   12838:	f7fe fe34 	bl	114a4 <bsd_os_errno_set>
   1283c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12840:	e7b7      	b.n	127b2 <logobj_interface_write+0x6a>
   12842:	bf00      	nop

00012844 <logobj_interface_setopt>:
   12844:	b5f0      	push	{r4, r5, r6, r7, lr}
   12846:	2901      	cmp	r1, #1
   12848:	b085      	sub	sp, #20
   1284a:	d068      	beq.n	1291e <logobj_interface_setopt+0xda>
   1284c:	461e      	mov	r6, r3
   1284e:	f240 2305 	movw	r3, #517	; 0x205
   12852:	4299      	cmp	r1, r3
   12854:	f040 8095 	bne.w	12982 <logobj_interface_setopt+0x13e>
   12858:	4607      	mov	r7, r0
   1285a:	4615      	mov	r5, r2
   1285c:	f005 ffa0 	bl	187a0 <interface_socket_from_handle_get>
   12860:	4604      	mov	r4, r0
   12862:	2800      	cmp	r0, #0
   12864:	f000 80b2 	beq.w	129cc <logobj_interface_setopt+0x188>
   12868:	2d01      	cmp	r5, #1
   1286a:	d019      	beq.n	128a0 <logobj_interface_setopt+0x5c>
   1286c:	2d02      	cmp	r5, #2
   1286e:	d010      	beq.n	12892 <logobj_interface_setopt+0x4e>
   12870:	252a      	movs	r5, #42	; 0x2a
   12872:	6803      	ldr	r3, [r0, #0]
   12874:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12878:	6023      	str	r3, [r4, #0]
   1287a:	6823      	ldr	r3, [r4, #0]
   1287c:	4628      	mov	r0, r5
   1287e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   12882:	6023      	str	r3, [r4, #0]
   12884:	f7fe fe0e 	bl	114a4 <bsd_os_errno_set>
   12888:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1288c:	4628      	mov	r0, r5
   1288e:	b005      	add	sp, #20
   12890:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12892:	b116      	cbz	r6, 1289a <logobj_interface_setopt+0x56>
   12894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12896:	2b01      	cmp	r3, #1
   12898:	d049      	beq.n	1292e <logobj_interface_setopt+0xea>
   1289a:	6823      	ldr	r3, [r4, #0]
   1289c:	2516      	movs	r5, #22
   1289e:	e7e9      	b.n	12874 <logobj_interface_setopt+0x30>
   128a0:	2e00      	cmp	r6, #0
   128a2:	d0fa      	beq.n	1289a <logobj_interface_setopt+0x56>
   128a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   128a6:	2b04      	cmp	r3, #4
   128a8:	d1f7      	bne.n	1289a <logobj_interface_setopt+0x56>
   128aa:	2100      	movs	r1, #0
   128ac:	a803      	add	r0, sp, #12
   128ae:	f7ff fd51 	bl	12354 <rpc_logobj_client_request_alloc>
   128b2:	4605      	mov	r5, r0
   128b4:	2800      	cmp	r0, #0
   128b6:	d16a      	bne.n	1298e <logobj_interface_setopt+0x14a>
   128b8:	9803      	ldr	r0, [sp, #12]
   128ba:	2208      	movs	r2, #8
   128bc:	4629      	mov	r1, r5
   128be:	300c      	adds	r0, #12
   128c0:	f00a fc67 	bl	1d192 <memset>
   128c4:	9803      	ldr	r0, [sp, #12]
   128c6:	4631      	mov	r1, r6
   128c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   128ca:	300c      	adds	r0, #12
   128cc:	f00a fc37 	bl	1d13e <memcpy>
   128d0:	2308      	movs	r3, #8
   128d2:	9803      	ldr	r0, [sp, #12]
   128d4:	f247 0102 	movw	r1, #28674	; 0x7002
   128d8:	7203      	strb	r3, [r0, #8]
   128da:	7245      	strb	r5, [r0, #9]
   128dc:	7285      	strb	r5, [r0, #10]
   128de:	72c5      	strb	r5, [r0, #11]
   128e0:	6823      	ldr	r3, [r4, #0]
   128e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   128e6:	6023      	str	r3, [r4, #0]
   128e8:	f7ff fd4c 	bl	12384 <rpc_logobj_client_request_send>
   128ec:	2800      	cmp	r0, #0
   128ee:	d151      	bne.n	12994 <logobj_interface_setopt+0x150>
   128f0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   128f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   128f8:	4611      	mov	r1, r2
   128fa:	4638      	mov	r0, r7
   128fc:	f005 fee4 	bl	186c8 <interface_socket_wait>
   12900:	4605      	mov	r5, r0
   12902:	2800      	cmp	r0, #0
   12904:	d13b      	bne.n	1297e <logobj_interface_setopt+0x13a>
   12906:	4638      	mov	r0, r7
   12908:	f005 ff4a 	bl	187a0 <interface_socket_from_handle_get>
   1290c:	2800      	cmp	r0, #0
   1290e:	d04f      	beq.n	129b0 <logobj_interface_setopt+0x16c>
   12910:	6843      	ldr	r3, [r0, #4]
   12912:	2b00      	cmp	r3, #0
   12914:	d04c      	beq.n	129b0 <logobj_interface_setopt+0x16c>
   12916:	2200      	movs	r2, #0
   12918:	461d      	mov	r5, r3
   1291a:	6042      	str	r2, [r0, #4]
   1291c:	e02f      	b.n	1297e <logobj_interface_setopt+0x13a>
   1291e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   12920:	9400      	str	r4, [sp, #0]
   12922:	f005 ff65 	bl	187f0 <interface_socket_setopt>
   12926:	4605      	mov	r5, r0
   12928:	4628      	mov	r0, r5
   1292a:	b005      	add	sp, #20
   1292c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1292e:	2100      	movs	r1, #0
   12930:	a803      	add	r0, sp, #12
   12932:	7835      	ldrb	r5, [r6, #0]
   12934:	f7ff fd0e 	bl	12354 <rpc_logobj_client_request_alloc>
   12938:	bb48      	cbnz	r0, 1298e <logobj_interface_setopt+0x14a>
   1293a:	2d01      	cmp	r5, #1
   1293c:	bf08      	it	eq
   1293e:	4b26      	ldreq	r3, [pc, #152]	; (129d8 <logobj_interface_setopt+0x194>)
   12940:	f04f 0204 	mov.w	r2, #4
   12944:	bf08      	it	eq
   12946:	701d      	strbeq	r5, [r3, #0]
   12948:	2300      	movs	r3, #0
   1294a:	9803      	ldr	r0, [sp, #12]
   1294c:	f247 0101 	movw	r1, #28673	; 0x7001
   12950:	7243      	strb	r3, [r0, #9]
   12952:	60c5      	str	r5, [r0, #12]
   12954:	7283      	strb	r3, [r0, #10]
   12956:	72c3      	strb	r3, [r0, #11]
   12958:	7202      	strb	r2, [r0, #8]
   1295a:	6823      	ldr	r3, [r4, #0]
   1295c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   12960:	6023      	str	r3, [r4, #0]
   12962:	f7ff fd0f 	bl	12384 <rpc_logobj_client_request_send>
   12966:	4606      	mov	r6, r0
   12968:	b9a0      	cbnz	r0, 12994 <logobj_interface_setopt+0x150>
   1296a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1296e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12972:	4611      	mov	r1, r2
   12974:	4638      	mov	r0, r7
   12976:	f005 fea7 	bl	186c8 <interface_socket_wait>
   1297a:	4605      	mov	r5, r0
   1297c:	b180      	cbz	r0, 129a0 <logobj_interface_setopt+0x15c>
   1297e:	6823      	ldr	r3, [r4, #0]
   12980:	e778      	b.n	12874 <logobj_interface_setopt+0x30>
   12982:	202a      	movs	r0, #42	; 0x2a
   12984:	f7fe fd8e 	bl	114a4 <bsd_os_errno_set>
   12988:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1298c:	e77e      	b.n	1288c <logobj_interface_setopt+0x48>
   1298e:	6823      	ldr	r3, [r4, #0]
   12990:	250c      	movs	r5, #12
   12992:	e76f      	b.n	12874 <logobj_interface_setopt+0x30>
   12994:	9803      	ldr	r0, [sp, #12]
   12996:	f7ff fd0b 	bl	123b0 <rpc_logobj_client_message_free>
   1299a:	2505      	movs	r5, #5
   1299c:	6823      	ldr	r3, [r4, #0]
   1299e:	e769      	b.n	12874 <logobj_interface_setopt+0x30>
   129a0:	4638      	mov	r0, r7
   129a2:	f005 fefd 	bl	187a0 <interface_socket_from_handle_get>
   129a6:	b140      	cbz	r0, 129ba <logobj_interface_setopt+0x176>
   129a8:	6845      	ldr	r5, [r0, #4]
   129aa:	b135      	cbz	r5, 129ba <logobj_interface_setopt+0x176>
   129ac:	6046      	str	r6, [r0, #4]
   129ae:	e7e6      	b.n	1297e <logobj_interface_setopt+0x13a>
   129b0:	4631      	mov	r1, r6
   129b2:	2204      	movs	r2, #4
   129b4:	4809      	ldr	r0, [pc, #36]	; (129dc <logobj_interface_setopt+0x198>)
   129b6:	f00a fbc2 	bl	1d13e <memcpy>
   129ba:	6823      	ldr	r3, [r4, #0]
   129bc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   129c0:	6023      	str	r3, [r4, #0]
   129c2:	6823      	ldr	r3, [r4, #0]
   129c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   129c8:	6023      	str	r3, [r4, #0]
   129ca:	e75f      	b.n	1288c <logobj_interface_setopt+0x48>
   129cc:	2009      	movs	r0, #9
   129ce:	f7fe fd69 	bl	114a4 <bsd_os_errno_set>
   129d2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   129d6:	e759      	b.n	1288c <logobj_interface_setopt+0x48>
   129d8:	200265c0 	.word	0x200265c0
   129dc:	200204cc 	.word	0x200204cc

000129e0 <logobj_interface_getopt>:
   129e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   129e2:	2901      	cmp	r1, #1
   129e4:	b083      	sub	sp, #12
   129e6:	9e08      	ldr	r6, [sp, #32]
   129e8:	d030      	beq.n	12a4c <logobj_interface_getopt+0x6c>
   129ea:	461f      	mov	r7, r3
   129ec:	f240 2305 	movw	r3, #517	; 0x205
   129f0:	4299      	cmp	r1, r3
   129f2:	d134      	bne.n	12a5e <logobj_interface_getopt+0x7e>
   129f4:	4615      	mov	r5, r2
   129f6:	f005 fed3 	bl	187a0 <interface_socket_from_handle_get>
   129fa:	2800      	cmp	r0, #0
   129fc:	d037      	beq.n	12a6e <logobj_interface_getopt+0x8e>
   129fe:	2d01      	cmp	r5, #1
   12a00:	d015      	beq.n	12a2e <logobj_interface_getopt+0x4e>
   12a02:	2d02      	cmp	r5, #2
   12a04:	d10b      	bne.n	12a1e <logobj_interface_getopt+0x3e>
   12a06:	b387      	cbz	r7, 12a6a <logobj_interface_getopt+0x8a>
   12a08:	6833      	ldr	r3, [r6, #0]
   12a0a:	b373      	cbz	r3, 12a6a <logobj_interface_getopt+0x8a>
   12a0c:	2300      	movs	r3, #0
   12a0e:	2201      	movs	r2, #1
   12a10:	4618      	mov	r0, r3
   12a12:	491a      	ldr	r1, [pc, #104]	; (12a7c <logobj_interface_getopt+0x9c>)
   12a14:	7809      	ldrb	r1, [r1, #0]
   12a16:	7039      	strb	r1, [r7, #0]
   12a18:	6032      	str	r2, [r6, #0]
   12a1a:	b003      	add	sp, #12
   12a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12a1e:	2009      	movs	r0, #9
   12a20:	f7fe fd40 	bl	114a4 <bsd_os_errno_set>
   12a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12a28:	4618      	mov	r0, r3
   12a2a:	b003      	add	sp, #12
   12a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12a2e:	b1e7      	cbz	r7, 12a6a <logobj_interface_getopt+0x8a>
   12a30:	6833      	ldr	r3, [r6, #0]
   12a32:	2b03      	cmp	r3, #3
   12a34:	d919      	bls.n	12a6a <logobj_interface_getopt+0x8a>
   12a36:	4638      	mov	r0, r7
   12a38:	2204      	movs	r2, #4
   12a3a:	4911      	ldr	r1, [pc, #68]	; (12a80 <logobj_interface_getopt+0xa0>)
   12a3c:	f00a fb7f 	bl	1d13e <memcpy>
   12a40:	2300      	movs	r3, #0
   12a42:	2204      	movs	r2, #4
   12a44:	4618      	mov	r0, r3
   12a46:	6032      	str	r2, [r6, #0]
   12a48:	b003      	add	sp, #12
   12a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12a4c:	9600      	str	r6, [sp, #0]
   12a4e:	f005 ff05 	bl	1885c <interface_socket_getopt>
   12a52:	4603      	mov	r3, r0
   12a54:	2800      	cmp	r0, #0
   12a56:	d1e3      	bne.n	12a20 <logobj_interface_getopt+0x40>
   12a58:	4618      	mov	r0, r3
   12a5a:	b003      	add	sp, #12
   12a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12a5e:	202a      	movs	r0, #42	; 0x2a
   12a60:	f7fe fd20 	bl	114a4 <bsd_os_errno_set>
   12a64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12a68:	e7de      	b.n	12a28 <logobj_interface_getopt+0x48>
   12a6a:	2016      	movs	r0, #22
   12a6c:	e7d8      	b.n	12a20 <logobj_interface_getopt+0x40>
   12a6e:	2009      	movs	r0, #9
   12a70:	f7fe fd18 	bl	114a4 <bsd_os_errno_set>
   12a74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12a78:	e7d6      	b.n	12a28 <logobj_interface_getopt+0x48>
   12a7a:	bf00      	nop
   12a7c:	200265c1 	.word	0x200265c1
   12a80:	200204cc 	.word	0x200204cc

00012a84 <logobj_interface_close>:
   12a84:	b510      	push	{r4, lr}
   12a86:	4604      	mov	r4, r0
   12a88:	f005 fe8a 	bl	187a0 <interface_socket_from_handle_get>
   12a8c:	b138      	cbz	r0, 12a9e <logobj_interface_close+0x1a>
   12a8e:	4620      	mov	r0, r4
   12a90:	f005 fdcc 	bl	1862c <interface_socket_free>
   12a94:	2300      	movs	r3, #0
   12a96:	4a05      	ldr	r2, [pc, #20]	; (12aac <logobj_interface_close+0x28>)
   12a98:	4618      	mov	r0, r3
   12a9a:	6013      	str	r3, [r2, #0]
   12a9c:	bd10      	pop	{r4, pc}
   12a9e:	2009      	movs	r0, #9
   12aa0:	f7fe fd00 	bl	114a4 <bsd_os_errno_set>
   12aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12aa8:	bd10      	pop	{r4, pc}
   12aaa:	bf00      	nop
   12aac:	200204d0 	.word	0x200204d0

00012ab0 <packet_free_cb>:
   12ab0:	6800      	ldr	r0, [r0, #0]
   12ab2:	f004 ba31 	b.w	16f18 <rpc_at_client_data_free>
   12ab6:	bf00      	nop

00012ab8 <at_interface_write>:
   12ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12aba:	b083      	sub	sp, #12
   12abc:	460f      	mov	r7, r1
   12abe:	4615      	mov	r5, r2
   12ac0:	4606      	mov	r6, r0
   12ac2:	f005 fe6d 	bl	187a0 <interface_socket_from_handle_get>
   12ac6:	2800      	cmp	r0, #0
   12ac8:	d047      	beq.n	12b5a <at_interface_write+0xa2>
   12aca:	6803      	ldr	r3, [r0, #0]
   12acc:	4604      	mov	r4, r0
   12ace:	039b      	lsls	r3, r3, #14
   12ad0:	d543      	bpl.n	12b5a <at_interface_write+0xa2>
   12ad2:	6803      	ldr	r3, [r0, #0]
   12ad4:	4629      	mov	r1, r5
   12ad6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   12ada:	6003      	str	r3, [r0, #0]
   12adc:	6803      	ldr	r3, [r0, #0]
   12ade:	a801      	add	r0, sp, #4
   12ae0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   12ae4:	6023      	str	r3, [r4, #0]
   12ae6:	f004 f9ed 	bl	16ec4 <rpc_at_client_request_alloc>
   12aea:	bba0      	cbnz	r0, 12b56 <at_interface_write+0x9e>
   12aec:	2204      	movs	r2, #4
   12aee:	9b01      	ldr	r3, [sp, #4]
   12af0:	721a      	strb	r2, [r3, #8]
   12af2:	7258      	strb	r0, [r3, #9]
   12af4:	7298      	strb	r0, [r3, #10]
   12af6:	72d8      	strb	r0, [r3, #11]
   12af8:	60de      	str	r6, [r3, #12]
   12afa:	b985      	cbnz	r5, 12b1e <at_interface_write+0x66>
   12afc:	4618      	mov	r0, r3
   12afe:	2101      	movs	r1, #1
   12b00:	f004 f9f4 	bl	16eec <rpc_at_client_request_send>
   12b04:	b9d0      	cbnz	r0, 12b3c <at_interface_write+0x84>
   12b06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   12b0a:	4630      	mov	r0, r6
   12b0c:	4611      	mov	r1, r2
   12b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12b12:	f005 fdd9 	bl	186c8 <interface_socket_wait>
   12b16:	b9a8      	cbnz	r0, 12b44 <at_interface_write+0x8c>
   12b18:	4628      	mov	r0, r5
   12b1a:	b003      	add	sp, #12
   12b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12b1e:	4639      	mov	r1, r7
   12b20:	6818      	ldr	r0, [r3, #0]
   12b22:	462a      	mov	r2, r5
   12b24:	f00a fb0b 	bl	1d13e <memcpy>
   12b28:	2101      	movs	r1, #1
   12b2a:	9801      	ldr	r0, [sp, #4]
   12b2c:	f004 f9de 	bl	16eec <rpc_at_client_request_send>
   12b30:	2800      	cmp	r0, #0
   12b32:	d0e8      	beq.n	12b06 <at_interface_write+0x4e>
   12b34:	9b01      	ldr	r3, [sp, #4]
   12b36:	6818      	ldr	r0, [r3, #0]
   12b38:	f004 f9ee 	bl	16f18 <rpc_at_client_data_free>
   12b3c:	9801      	ldr	r0, [sp, #4]
   12b3e:	f004 f9e3 	bl	16f08 <rpc_at_client_message_free>
   12b42:	2023      	movs	r0, #35	; 0x23
   12b44:	6823      	ldr	r3, [r4, #0]
   12b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12b4a:	6023      	str	r3, [r4, #0]
   12b4c:	f7fe fcaa 	bl	114a4 <bsd_os_errno_set>
   12b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12b54:	e7e1      	b.n	12b1a <at_interface_write+0x62>
   12b56:	200c      	movs	r0, #12
   12b58:	e7f4      	b.n	12b44 <at_interface_write+0x8c>
   12b5a:	2016      	movs	r0, #22
   12b5c:	e7f6      	b.n	12b4c <at_interface_write+0x94>
   12b5e:	bf00      	nop

00012b60 <at_interface_init>:
   12b60:	f004 b9aa 	b.w	16eb8 <rpc_at_client_init>

00012b64 <at_interface_open>:
   12b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12b68:	2500      	movs	r5, #0
   12b6a:	b082      	sub	sp, #8
   12b6c:	ab02      	add	r3, sp, #8
   12b6e:	f843 5d08 	str.w	r5, [r3, #-8]!
   12b72:	4680      	mov	r8, r0
   12b74:	460f      	mov	r7, r1
   12b76:	4618      	mov	r0, r3
   12b78:	4616      	mov	r6, r2
   12b7a:	2102      	movs	r1, #2
   12b7c:	4a1d      	ldr	r2, [pc, #116]	; (12bf4 <at_interface_open+0x90>)
   12b7e:	f005 fcff 	bl	18580 <interface_socket_allocate>
   12b82:	9b00      	ldr	r3, [sp, #0]
   12b84:	4604      	mov	r4, r0
   12b86:	b30b      	cbz	r3, 12bcc <at_interface_open+0x68>
   12b88:	e9c3 8703 	strd	r8, r7, [r3, #12]
   12b8c:	615e      	str	r6, [r3, #20]
   12b8e:	4629      	mov	r1, r5
   12b90:	a801      	add	r0, sp, #4
   12b92:	f004 f997 	bl	16ec4 <rpc_at_client_request_alloc>
   12b96:	b9e8      	cbnz	r0, 12bd4 <at_interface_open+0x70>
   12b98:	2204      	movs	r2, #4
   12b9a:	9b01      	ldr	r3, [sp, #4]
   12b9c:	2105      	movs	r1, #5
   12b9e:	7258      	strb	r0, [r3, #9]
   12ba0:	7298      	strb	r0, [r3, #10]
   12ba2:	72d8      	strb	r0, [r3, #11]
   12ba4:	721a      	strb	r2, [r3, #8]
   12ba6:	60dc      	str	r4, [r3, #12]
   12ba8:	4618      	mov	r0, r3
   12baa:	f004 f99f 	bl	16eec <rpc_at_client_request_send>
   12bae:	b9d8      	cbnz	r0, 12be8 <at_interface_open+0x84>
   12bb0:	2202      	movs	r2, #2
   12bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12bb6:	4611      	mov	r1, r2
   12bb8:	4620      	mov	r0, r4
   12bba:	f005 fd85 	bl	186c8 <interface_socket_wait>
   12bbe:	4605      	mov	r5, r0
   12bc0:	b948      	cbnz	r0, 12bd6 <at_interface_open+0x72>
   12bc2:	9a00      	ldr	r2, [sp, #0]
   12bc4:	6813      	ldr	r3, [r2, #0]
   12bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12bca:	6013      	str	r3, [r2, #0]
   12bcc:	4620      	mov	r0, r4
   12bce:	b002      	add	sp, #8
   12bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12bd4:	250c      	movs	r5, #12
   12bd6:	4620      	mov	r0, r4
   12bd8:	f005 fd28 	bl	1862c <interface_socket_free>
   12bdc:	4628      	mov	r0, r5
   12bde:	f7fe fc61 	bl	114a4 <bsd_os_errno_set>
   12be2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12be6:	e7f1      	b.n	12bcc <at_interface_open+0x68>
   12be8:	9801      	ldr	r0, [sp, #4]
   12bea:	f004 f98d 	bl	16f08 <rpc_at_client_message_free>
   12bee:	2523      	movs	r5, #35	; 0x23
   12bf0:	e7f1      	b.n	12bd6 <at_interface_open+0x72>
   12bf2:	bf00      	nop
   12bf4:	00012ab1 	.word	0x00012ab1

00012bf8 <at_interface_close>:
   12bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12bfa:	b083      	sub	sp, #12
   12bfc:	4606      	mov	r6, r0
   12bfe:	f005 fdcf 	bl	187a0 <interface_socket_from_handle_get>
   12c02:	2800      	cmp	r0, #0
   12c04:	d03d      	beq.n	12c82 <at_interface_close+0x8a>
   12c06:	230d      	movs	r3, #13
   12c08:	6807      	ldr	r7, [r0, #0]
   12c0a:	6003      	str	r3, [r0, #0]
   12c0c:	6803      	ldr	r3, [r0, #0]
   12c0e:	4604      	mov	r4, r0
   12c10:	039b      	lsls	r3, r3, #14
   12c12:	d41f      	bmi.n	12c54 <at_interface_close+0x5c>
   12c14:	2100      	movs	r1, #0
   12c16:	a801      	add	r0, sp, #4
   12c18:	f004 f954 	bl	16ec4 <rpc_at_client_request_alloc>
   12c1c:	bb20      	cbnz	r0, 12c68 <at_interface_close+0x70>
   12c1e:	2204      	movs	r2, #4
   12c20:	9b01      	ldr	r3, [sp, #4]
   12c22:	2106      	movs	r1, #6
   12c24:	7258      	strb	r0, [r3, #9]
   12c26:	7298      	strb	r0, [r3, #10]
   12c28:	72d8      	strb	r0, [r3, #11]
   12c2a:	721a      	strb	r2, [r3, #8]
   12c2c:	60de      	str	r6, [r3, #12]
   12c2e:	4618      	mov	r0, r3
   12c30:	f004 f95c 	bl	16eec <rpc_at_client_request_send>
   12c34:	b9d0      	cbnz	r0, 12c6c <at_interface_close+0x74>
   12c36:	220e      	movs	r2, #14
   12c38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12c3c:	4611      	mov	r1, r2
   12c3e:	4630      	mov	r0, r6
   12c40:	f005 fd42 	bl	186c8 <interface_socket_wait>
   12c44:	4605      	mov	r5, r0
   12c46:	b9a8      	cbnz	r0, 12c74 <at_interface_close+0x7c>
   12c48:	4630      	mov	r0, r6
   12c4a:	f005 fcef 	bl	1862c <interface_socket_free>
   12c4e:	4628      	mov	r0, r5
   12c50:	b003      	add	sp, #12
   12c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12c54:	6803      	ldr	r3, [r0, #0]
   12c56:	2100      	movs	r1, #0
   12c58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   12c5c:	6003      	str	r3, [r0, #0]
   12c5e:	a801      	add	r0, sp, #4
   12c60:	f004 f930 	bl	16ec4 <rpc_at_client_request_alloc>
   12c64:	2800      	cmp	r0, #0
   12c66:	d0da      	beq.n	12c1e <at_interface_close+0x26>
   12c68:	250c      	movs	r5, #12
   12c6a:	e003      	b.n	12c74 <at_interface_close+0x7c>
   12c6c:	9801      	ldr	r0, [sp, #4]
   12c6e:	f004 f94b 	bl	16f08 <rpc_at_client_message_free>
   12c72:	2523      	movs	r5, #35	; 0x23
   12c74:	6027      	str	r7, [r4, #0]
   12c76:	4628      	mov	r0, r5
   12c78:	f7fe fc14 	bl	114a4 <bsd_os_errno_set>
   12c7c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12c80:	e7e5      	b.n	12c4e <at_interface_close+0x56>
   12c82:	2516      	movs	r5, #22
   12c84:	e7f7      	b.n	12c76 <at_interface_close+0x7e>
   12c86:	bf00      	nop

00012c88 <at_interface_read>:
   12c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12c8c:	b084      	sub	sp, #16
   12c8e:	4688      	mov	r8, r1
   12c90:	4615      	mov	r5, r2
   12c92:	461e      	mov	r6, r3
   12c94:	4607      	mov	r7, r0
   12c96:	f005 fd83 	bl	187a0 <interface_socket_from_handle_get>
   12c9a:	2800      	cmp	r0, #0
   12c9c:	d049      	beq.n	12d32 <at_interface_read+0xaa>
   12c9e:	2300      	movs	r3, #0
   12ca0:	e9cd 8500 	strd	r8, r5, [sp]
   12ca4:	f016 0502 	ands.w	r5, r6, #2
   12ca8:	4604      	mov	r4, r0
   12caa:	e9cd 3302 	strd	r3, r3, [sp, #8]
   12cae:	d00e      	beq.n	12cce <at_interface_read+0x46>
   12cb0:	e01e      	b.n	12cf0 <at_interface_read+0x68>
   12cb2:	2d00      	cmp	r5, #0
   12cb4:	d133      	bne.n	12d1e <at_interface_read+0x96>
   12cb6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   12cba:	6a23      	ldr	r3, [r4, #32]
   12cbc:	4611      	mov	r1, r2
   12cbe:	2b00      	cmp	r3, #0
   12cc0:	bf08      	it	eq
   12cc2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   12cc6:	4638      	mov	r0, r7
   12cc8:	f005 fcfe 	bl	186c8 <interface_socket_wait>
   12ccc:	4605      	mov	r5, r0
   12cce:	6823      	ldr	r3, [r4, #0]
   12cd0:	69e0      	ldr	r0, [r4, #28]
   12cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   12cd6:	6023      	str	r3, [r4, #0]
   12cd8:	6803      	ldr	r3, [r0, #0]
   12cda:	4632      	mov	r2, r6
   12cdc:	689b      	ldr	r3, [r3, #8]
   12cde:	4669      	mov	r1, sp
   12ce0:	4798      	blx	r3
   12ce2:	f1b0 0800 	subs.w	r8, r0, #0
   12ce6:	dbe4      	blt.n	12cb2 <at_interface_read+0x2a>
   12ce8:	4640      	mov	r0, r8
   12cea:	b004      	add	sp, #16
   12cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12cf0:	6803      	ldr	r3, [r0, #0]
   12cf2:	69c0      	ldr	r0, [r0, #28]
   12cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   12cf8:	6023      	str	r3, [r4, #0]
   12cfa:	6803      	ldr	r3, [r0, #0]
   12cfc:	4632      	mov	r2, r6
   12cfe:	689b      	ldr	r3, [r3, #8]
   12d00:	4669      	mov	r1, sp
   12d02:	4798      	blx	r3
   12d04:	f1b0 0800 	subs.w	r8, r0, #0
   12d08:	daee      	bge.n	12ce8 <at_interface_read+0x60>
   12d0a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   12d0e:	d1eb      	bne.n	12ce8 <at_interface_read+0x60>
   12d10:	2023      	movs	r0, #35	; 0x23
   12d12:	f7fe fbc7 	bl	114a4 <bsd_os_errno_set>
   12d16:	4640      	mov	r0, r8
   12d18:	b004      	add	sp, #16
   12d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12d1e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   12d22:	d1e1      	bne.n	12ce8 <at_interface_read+0x60>
   12d24:	4628      	mov	r0, r5
   12d26:	f7fe fbbd 	bl	114a4 <bsd_os_errno_set>
   12d2a:	4640      	mov	r0, r8
   12d2c:	b004      	add	sp, #16
   12d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12d32:	2016      	movs	r0, #22
   12d34:	f7fe fbb6 	bl	114a4 <bsd_os_errno_set>
   12d38:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   12d3c:	e7d4      	b.n	12ce8 <at_interface_read+0x60>
   12d3e:	bf00      	nop

00012d40 <at_interface_getopt>:
   12d40:	f005 bd8c 	b.w	1885c <interface_socket_getopt>

00012d44 <at_interface_setopt>:
   12d44:	f005 bd54 	b.w	187f0 <interface_socket_setopt>

00012d48 <rpc_at_event_handler>:
   12d48:	b570      	push	{r4, r5, r6, lr}
   12d4a:	4606      	mov	r6, r0
   12d4c:	b084      	sub	sp, #16
   12d4e:	68c0      	ldr	r0, [r0, #12]
   12d50:	460d      	mov	r5, r1
   12d52:	f005 fd25 	bl	187a0 <interface_socket_from_handle_get>
   12d56:	4604      	mov	r4, r0
   12d58:	b348      	cbz	r0, 12dae <rpc_at_event_handler+0x66>
   12d5a:	6803      	ldr	r3, [r0, #0]
   12d5c:	b29b      	uxth	r3, r3
   12d5e:	2b01      	cmp	r3, #1
   12d60:	d01f      	beq.n	12da2 <rpc_at_event_handler+0x5a>
   12d62:	6803      	ldr	r3, [r0, #0]
   12d64:	b29b      	uxth	r3, r3
   12d66:	2b0d      	cmp	r3, #13
   12d68:	d029      	beq.n	12dbe <rpc_at_event_handler+0x76>
   12d6a:	6803      	ldr	r3, [r0, #0]
   12d6c:	b29b      	uxth	r3, r3
   12d6e:	2b02      	cmp	r3, #2
   12d70:	d02d      	beq.n	12dce <rpc_at_event_handler+0x86>
   12d72:	3d03      	subs	r5, #3
   12d74:	2d01      	cmp	r5, #1
   12d76:	d817      	bhi.n	12da8 <rpc_at_event_handler+0x60>
   12d78:	2500      	movs	r5, #0
   12d7a:	6873      	ldr	r3, [r6, #4]
   12d7c:	6832      	ldr	r2, [r6, #0]
   12d7e:	e9cd 5502 	strd	r5, r5, [sp, #8]
   12d82:	e9cd 2300 	strd	r2, r3, [sp]
   12d86:	69e0      	ldr	r0, [r4, #28]
   12d88:	4669      	mov	r1, sp
   12d8a:	6803      	ldr	r3, [r0, #0]
   12d8c:	685b      	ldr	r3, [r3, #4]
   12d8e:	4798      	blx	r3
   12d90:	3001      	adds	r0, #1
   12d92:	d019      	beq.n	12dc8 <rpc_at_event_handler+0x80>
   12d94:	4628      	mov	r0, r5
   12d96:	6823      	ldr	r3, [r4, #0]
   12d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   12d9c:	6023      	str	r3, [r4, #0]
   12d9e:	b004      	add	sp, #16
   12da0:	bd70      	pop	{r4, r5, r6, pc}
   12da2:	2d02      	cmp	r5, #2
   12da4:	d1e5      	bne.n	12d72 <rpc_at_event_handler+0x2a>
   12da6:	6005      	str	r5, [r0, #0]
   12da8:	2000      	movs	r0, #0
   12daa:	b004      	add	sp, #16
   12dac:	bd70      	pop	{r4, r5, r6, pc}
   12dae:	6830      	ldr	r0, [r6, #0]
   12db0:	2800      	cmp	r0, #0
   12db2:	d0f9      	beq.n	12da8 <rpc_at_event_handler+0x60>
   12db4:	f004 f8b0 	bl	16f18 <rpc_at_client_data_free>
   12db8:	4620      	mov	r0, r4
   12dba:	b004      	add	sp, #16
   12dbc:	bd70      	pop	{r4, r5, r6, pc}
   12dbe:	2d02      	cmp	r5, #2
   12dc0:	d1d7      	bne.n	12d72 <rpc_at_event_handler+0x2a>
   12dc2:	230e      	movs	r3, #14
   12dc4:	6003      	str	r3, [r0, #0]
   12dc6:	e7ef      	b.n	12da8 <rpc_at_event_handler+0x60>
   12dc8:	2002      	movs	r0, #2
   12dca:	b004      	add	sp, #16
   12dcc:	bd70      	pop	{r4, r5, r6, pc}
   12dce:	6803      	ldr	r3, [r0, #0]
   12dd0:	029b      	lsls	r3, r3, #10
   12dd2:	d5ce      	bpl.n	12d72 <rpc_at_event_handler+0x2a>
   12dd4:	2d02      	cmp	r5, #2
   12dd6:	d1cc      	bne.n	12d72 <rpc_at_event_handler+0x2a>
   12dd8:	6803      	ldr	r3, [r0, #0]
   12dda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   12dde:	6003      	str	r3, [r0, #0]
   12de0:	6803      	ldr	r3, [r0, #0]
   12de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12de6:	6003      	str	r3, [r0, #0]
   12de8:	e7de      	b.n	12da8 <rpc_at_event_handler+0x60>
   12dea:	bf00      	nop

00012dec <dfu_client_event_handler>:
   12dec:	f850 1b08 	ldr.w	r1, [r0], #8
   12df0:	0c09      	lsrs	r1, r1, #16
   12df2:	f001 b891 	b.w	13f18 <rpc_dfu_event_handler>
   12df6:	bf00      	nop

00012df8 <rpc_dfu_client_init>:
   12df8:	4801      	ldr	r0, [pc, #4]	; (12e00 <rpc_dfu_client_init+0x8>)
   12dfa:	f005 be2f 	b.w	18a5c <rpc_client_register>
   12dfe:	bf00      	nop
   12e00:	0001f0e8 	.word	0x0001f0e8

00012e04 <rpc_dfu_client_request_alloc>:
   12e04:	2300      	movs	r3, #0
   12e06:	b510      	push	{r4, lr}
   12e08:	b082      	sub	sp, #8
   12e0a:	9301      	str	r3, [sp, #4]
   12e0c:	b158      	cbz	r0, 12e26 <rpc_dfu_client_request_alloc+0x22>
   12e0e:	4604      	mov	r4, r0
   12e10:	aa01      	add	r2, sp, #4
   12e12:	2006      	movs	r0, #6
   12e14:	f006 f85a 	bl	18ecc <rpc_message_alloc>
   12e18:	b918      	cbnz	r0, 12e22 <rpc_dfu_client_request_alloc+0x1e>
   12e1a:	9b01      	ldr	r3, [sp, #4]
   12e1c:	b10b      	cbz	r3, 12e22 <rpc_dfu_client_request_alloc+0x1e>
   12e1e:	3308      	adds	r3, #8
   12e20:	6023      	str	r3, [r4, #0]
   12e22:	b002      	add	sp, #8
   12e24:	bd10      	pop	{r4, pc}
   12e26:	2007      	movs	r0, #7
   12e28:	b002      	add	sp, #8
   12e2a:	bd10      	pop	{r4, pc}

00012e2c <rpc_dfu_client_request_send>:
   12e2c:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   12e30:	d10b      	bne.n	12e4a <rpc_dfu_client_request_send+0x1e>
   12e32:	b160      	cbz	r0, 12e4e <rpc_dfu_client_request_send+0x22>
   12e34:	4603      	mov	r3, r0
   12e36:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   12e3a:	2006      	movs	r0, #6
   12e3c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   12e40:	f843 1d08 	str.w	r1, [r3, #-8]!
   12e44:	4619      	mov	r1, r3
   12e46:	f006 b829 	b.w	18e9c <rpc_message_send>
   12e4a:	200f      	movs	r0, #15
   12e4c:	4770      	bx	lr
   12e4e:	2007      	movs	r0, #7
   12e50:	4770      	bx	lr
   12e52:	bf00      	nop

00012e54 <rpc_dfu_client_message_free>:
   12e54:	b120      	cbz	r0, 12e60 <rpc_dfu_client_message_free+0xc>
   12e56:	f1a0 0108 	sub.w	r1, r0, #8
   12e5a:	2006      	movs	r0, #6
   12e5c:	f006 b868 	b.w	18f30 <rpc_message_free>
   12e60:	2007      	movs	r0, #7
   12e62:	4770      	bx	lr

00012e64 <rpc_dfu_client_data_free>:
   12e64:	b118      	cbz	r0, 12e6e <rpc_dfu_client_data_free+0xa>
   12e66:	4601      	mov	r1, r0
   12e68:	2006      	movs	r0, #6
   12e6a:	f006 b973 	b.w	19154 <rpc_message_data_free>
   12e6e:	2007      	movs	r0, #7
   12e70:	4770      	bx	lr
   12e72:	bf00      	nop

00012e74 <mem_free>:
   12e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e78:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 12f48 <mem_free+0xd4>
   12e7c:	b083      	sub	sp, #12
   12e7e:	9000      	str	r0, [sp, #0]
   12e80:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   12e84:	f8dc 3008 	ldr.w	r3, [ip, #8]
   12e88:	b12b      	cbz	r3, 12e96 <mem_free+0x22>
   12e8a:	f8dc 2000 	ldr.w	r2, [ip]
   12e8e:	9c00      	ldr	r4, [sp, #0]
   12e90:	7810      	ldrb	r0, [r2, #0]
   12e92:	42a0      	cmp	r0, r4
   12e94:	d006      	beq.n	12ea4 <mem_free+0x30>
   12e96:	f10c 0c0c 	add.w	ip, ip, #12
   12e9a:	45e3      	cmp	fp, ip
   12e9c:	d1f2      	bne.n	12e84 <mem_free+0x10>
   12e9e:	b003      	add	sp, #12
   12ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ea4:	f8dc a004 	ldr.w	sl, [ip, #4]
   12ea8:	eb03 080a 	add.w	r8, r3, sl
   12eac:	45c2      	cmp	sl, r8
   12eae:	d2f2      	bcs.n	12e96 <mem_free+0x22>
   12eb0:	6853      	ldr	r3, [r2, #4]
   12eb2:	f8cd c004 	str.w	ip, [sp, #4]
   12eb6:	46d6      	mov	lr, sl
   12eb8:	469c      	mov	ip, r3
   12eba:	f8d2 9010 	ldr.w	r9, [r2, #16]
   12ebe:	8997      	ldrh	r7, [r2, #12]
   12ec0:	ebae 000a 	sub.w	r0, lr, sl
   12ec4:	b3df      	cbz	r7, 12f3e <mem_free+0xca>
   12ec6:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   12eca:	4290      	cmp	r0, r2
   12ecc:	d31c      	bcc.n	12f08 <mem_free+0x94>
   12ece:	4665      	mov	r5, ip
   12ed0:	2400      	movs	r4, #0
   12ed2:	f109 0304 	add.w	r3, r9, #4
   12ed6:	e003      	b.n	12ee0 <mem_free+0x6c>
   12ed8:	885a      	ldrh	r2, [r3, #2]
   12eda:	3304      	adds	r3, #4
   12edc:	4282      	cmp	r2, r0
   12ede:	d815      	bhi.n	12f0c <mem_free+0x98>
   12ee0:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   12ee4:	3401      	adds	r4, #1
   12ee6:	42a7      	cmp	r7, r4
   12ee8:	fb02 5506 	mla	r5, r2, r6, r5
   12eec:	eba0 0002 	sub.w	r0, r0, r2
   12ef0:	461e      	mov	r6, r3
   12ef2:	d1f1      	bne.n	12ed8 <mem_free+0x64>
   12ef4:	2000      	movs	r0, #0
   12ef6:	4281      	cmp	r1, r0
   12ef8:	d00d      	beq.n	12f16 <mem_free+0xa2>
   12efa:	f10e 0e01 	add.w	lr, lr, #1
   12efe:	45f0      	cmp	r8, lr
   12f00:	d1de      	bne.n	12ec0 <mem_free+0x4c>
   12f02:	f8dd c004 	ldr.w	ip, [sp, #4]
   12f06:	e7c6      	b.n	12e96 <mem_free+0x22>
   12f08:	4665      	mov	r5, ip
   12f0a:	464e      	mov	r6, r9
   12f0c:	8833      	ldrh	r3, [r6, #0]
   12f0e:	fb00 5003 	mla	r0, r0, r3, r5
   12f12:	4281      	cmp	r1, r0
   12f14:	d1f1      	bne.n	12efa <mem_free+0x86>
   12f16:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   12f1a:	f8dd c004 	ldr.w	ip, [sp, #4]
   12f1e:	d0ba      	beq.n	12e96 <mem_free+0x22>
   12f20:	2301      	movs	r3, #1
   12f22:	4a08      	ldr	r2, [pc, #32]	; (12f44 <mem_free+0xd0>)
   12f24:	ea4f 115e 	mov.w	r1, lr, lsr #5
   12f28:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   12f2c:	f00e 0e1f 	and.w	lr, lr, #31
   12f30:	fa03 fe0e 	lsl.w	lr, r3, lr
   12f34:	ea4e 0000 	orr.w	r0, lr, r0
   12f38:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   12f3c:	e7af      	b.n	12e9e <mem_free+0x2a>
   12f3e:	4638      	mov	r0, r7
   12f40:	e7d9      	b.n	12ef6 <mem_free+0x82>
   12f42:	bf00      	nop
   12f44:	200204d4 	.word	0x200204d4
   12f48:	20020518 	.word	0x20020518

00012f4c <mem_alloc.constprop.5>:
   12f4c:	2800      	cmp	r0, #0
   12f4e:	d050      	beq.n	12ff2 <mem_alloc.constprop.5+0xa6>
   12f50:	4b6d      	ldr	r3, [pc, #436]	; (13108 <mem_alloc.constprop.5+0x1bc>)
   12f52:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   12f56:	4290      	cmp	r0, r2
   12f58:	d84b      	bhi.n	12ff2 <mem_alloc.constprop.5+0xa6>
   12f5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f5e:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   12f62:	b083      	sub	sp, #12
   12f64:	f1bb 0f00 	cmp.w	fp, #0
   12f68:	d054      	beq.n	13014 <mem_alloc.constprop.5+0xc8>
   12f6a:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   12f6e:	4691      	mov	r9, r2
   12f70:	2600      	movs	r6, #0
   12f72:	f04f 0812 	mov.w	r8, #18
   12f76:	4f65      	ldr	r7, [pc, #404]	; (1310c <mem_alloc.constprop.5+0x1c0>)
   12f78:	9201      	str	r2, [sp, #4]
   12f7a:	f10b 0e11 	add.w	lr, fp, #17
   12f7e:	eb06 0209 	add.w	r2, r6, r9
   12f82:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   12f86:	3201      	adds	r2, #1
   12f88:	0852      	lsrs	r2, r2, #1
   12f8a:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   12f8e:	f102 0112 	add.w	r1, r2, #18
   12f92:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   12f96:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   12f9a:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   12f9e:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   12fa2:	f8dc c004 	ldr.w	ip, [ip, #4]
   12fa6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   12faa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   12fae:	f8da a010 	ldr.w	sl, [sl, #16]
   12fb2:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   12fb6:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   12fba:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   12fbe:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   12fc2:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   12fc6:	6849      	ldr	r1, [r1, #4]
   12fc8:	692d      	ldr	r5, [r5, #16]
   12fca:	6924      	ldr	r4, [r4, #16]
   12fcc:	f8dc c004 	ldr.w	ip, [ip, #4]
   12fd0:	4550      	cmp	r0, sl
   12fd2:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   12fd6:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   12fda:	d915      	bls.n	13008 <mem_alloc.constprop.5+0xbc>
   12fdc:	4288      	cmp	r0, r1
   12fde:	d211      	bcs.n	13004 <mem_alloc.constprop.5+0xb8>
   12fe0:	42a8      	cmp	r0, r5
   12fe2:	d908      	bls.n	12ff6 <mem_alloc.constprop.5+0xaa>
   12fe4:	1c56      	adds	r6, r2, #1
   12fe6:	45b1      	cmp	r9, r6
   12fe8:	f0c0 8087 	bcc.w	130fa <mem_alloc.constprop.5+0x1ae>
   12fec:	f102 0813 	add.w	r8, r2, #19
   12ff0:	e7c5      	b.n	12f7e <mem_alloc.constprop.5+0x32>
   12ff2:	2000      	movs	r0, #0
   12ff4:	4770      	bx	lr
   12ff6:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   12ffa:	454e      	cmp	r6, r9
   12ffc:	d87d      	bhi.n	130fa <mem_alloc.constprop.5+0x1ae>
   12ffe:	f102 0e11 	add.w	lr, r2, #17
   13002:	e7bc      	b.n	12f7e <mem_alloc.constprop.5+0x32>
   13004:	f109 0601 	add.w	r6, r9, #1
   13008:	45b3      	cmp	fp, r6
   1300a:	d007      	beq.n	1301c <mem_alloc.constprop.5+0xd0>
   1300c:	2e10      	cmp	r6, #16
   1300e:	d001      	beq.n	13014 <mem_alloc.constprop.5+0xc8>
   13010:	45b3      	cmp	fp, r6
   13012:	d808      	bhi.n	13026 <mem_alloc.constprop.5+0xda>
   13014:	2000      	movs	r0, #0
   13016:	b003      	add	sp, #12
   13018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1301c:	9a01      	ldr	r2, [sp, #4]
   1301e:	2a10      	cmp	r2, #16
   13020:	bf18      	it	ne
   13022:	4616      	movne	r6, r2
   13024:	d0f6      	beq.n	13014 <mem_alloc.constprop.5+0xc8>
   13026:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 13110 <mem_alloc.constprop.5+0x1c4>
   1302a:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   1302e:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   13032:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   13036:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   1303a:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   1303e:	f8d2 e004 	ldr.w	lr, [r2, #4]
   13042:	691d      	ldr	r5, [r3, #16]
   13044:	2c00      	cmp	r4, #0
   13046:	d056      	beq.n	130f6 <mem_alloc.constprop.5+0x1aa>
   13048:	462a      	mov	r2, r5
   1304a:	4670      	mov	r0, lr
   1304c:	00a4      	lsls	r4, r4, #2
   1304e:	eb05 0904 	add.w	r9, r5, r4
   13052:	8851      	ldrh	r1, [r2, #2]
   13054:	3204      	adds	r2, #4
   13056:	4591      	cmp	r9, r2
   13058:	4408      	add	r0, r1
   1305a:	d1fa      	bne.n	13052 <mem_alloc.constprop.5+0x106>
   1305c:	1929      	adds	r1, r5, r4
   1305e:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   13062:	4482      	add	sl, r0
   13064:	4582      	cmp	sl, r0
   13066:	d918      	bls.n	1309a <mem_alloc.constprop.5+0x14e>
   13068:	0941      	lsrs	r1, r0, #5
   1306a:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   1306e:	f000 041f 	and.w	r4, r0, #31
   13072:	fa22 f904 	lsr.w	r9, r2, r4
   13076:	f019 0f01 	tst.w	r9, #1
   1307a:	d007      	beq.n	1308c <mem_alloc.constprop.5+0x140>
   1307c:	e013      	b.n	130a6 <mem_alloc.constprop.5+0x15a>
   1307e:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   13082:	fa22 f904 	lsr.w	r9, r2, r4
   13086:	f019 0f01 	tst.w	r9, #1
   1308a:	d10c      	bne.n	130a6 <mem_alloc.constprop.5+0x15a>
   1308c:	3001      	adds	r0, #1
   1308e:	4582      	cmp	sl, r0
   13090:	ea4f 1150 	mov.w	r1, r0, lsr #5
   13094:	f000 041f 	and.w	r4, r0, #31
   13098:	d1f1      	bne.n	1307e <mem_alloc.constprop.5+0x132>
   1309a:	3601      	adds	r6, #1
   1309c:	455e      	cmp	r6, fp
   1309e:	f108 0808 	add.w	r8, r8, #8
   130a2:	d3c4      	bcc.n	1302e <mem_alloc.constprop.5+0xe2>
   130a4:	e7b6      	b.n	13014 <mem_alloc.constprop.5+0xc8>
   130a6:	2601      	movs	r6, #1
   130a8:	fa06 f404 	lsl.w	r4, r6, r4
   130ac:	899e      	ldrh	r6, [r3, #12]
   130ae:	ea22 0204 	bic.w	r2, r2, r4
   130b2:	eba0 000e 	sub.w	r0, r0, lr
   130b6:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   130ba:	685c      	ldr	r4, [r3, #4]
   130bc:	2e00      	cmp	r6, #0
   130be:	d0a9      	beq.n	13014 <mem_alloc.constprop.5+0xc8>
   130c0:	886a      	ldrh	r2, [r5, #2]
   130c2:	4282      	cmp	r2, r0
   130c4:	d811      	bhi.n	130ea <mem_alloc.constprop.5+0x19e>
   130c6:	2100      	movs	r1, #0
   130c8:	1d2b      	adds	r3, r5, #4
   130ca:	e003      	b.n	130d4 <mem_alloc.constprop.5+0x188>
   130cc:	885a      	ldrh	r2, [r3, #2]
   130ce:	3304      	adds	r3, #4
   130d0:	4282      	cmp	r2, r0
   130d2:	d80a      	bhi.n	130ea <mem_alloc.constprop.5+0x19e>
   130d4:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   130d8:	3101      	adds	r1, #1
   130da:	428e      	cmp	r6, r1
   130dc:	fb02 4405 	mla	r4, r2, r5, r4
   130e0:	eba0 0002 	sub.w	r0, r0, r2
   130e4:	461d      	mov	r5, r3
   130e6:	d1f1      	bne.n	130cc <mem_alloc.constprop.5+0x180>
   130e8:	e794      	b.n	13014 <mem_alloc.constprop.5+0xc8>
   130ea:	882b      	ldrh	r3, [r5, #0]
   130ec:	fb00 4003 	mla	r0, r0, r3, r4
   130f0:	b003      	add	sp, #12
   130f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130f6:	4670      	mov	r0, lr
   130f8:	e7b0      	b.n	1305c <mem_alloc.constprop.5+0x110>
   130fa:	f1bb 0f10 	cmp.w	fp, #16
   130fe:	bf08      	it	eq
   13100:	260f      	moveq	r6, #15
   13102:	d090      	beq.n	13026 <mem_alloc.constprop.5+0xda>
   13104:	e786      	b.n	13014 <mem_alloc.constprop.5+0xc8>
   13106:	bf00      	nop
   13108:	20020554 	.word	0x20020554
   1310c:	20020518 	.word	0x20020518
   13110:	200204d4 	.word	0x200204d4

00013114 <mem_alloc.constprop.4>:
   13114:	2800      	cmp	r0, #0
   13116:	d04c      	beq.n	131b2 <mem_alloc.constprop.4+0x9e>
   13118:	4b6b      	ldr	r3, [pc, #428]	; (132c8 <mem_alloc.constprop.4+0x1b4>)
   1311a:	681a      	ldr	r2, [r3, #0]
   1311c:	4290      	cmp	r0, r2
   1311e:	d848      	bhi.n	131b2 <mem_alloc.constprop.4+0x9e>
   13120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13124:	685f      	ldr	r7, [r3, #4]
   13126:	b083      	sub	sp, #12
   13128:	9700      	str	r7, [sp, #0]
   1312a:	2f00      	cmp	r7, #0
   1312c:	d051      	beq.n	131d2 <mem_alloc.constprop.4+0xbe>
   1312e:	1e7a      	subs	r2, r7, #1
   13130:	4696      	mov	lr, r2
   13132:	2100      	movs	r1, #0
   13134:	f04f 0c01 	mov.w	ip, #1
   13138:	4c64      	ldr	r4, [pc, #400]	; (132cc <mem_alloc.constprop.4+0x1b8>)
   1313a:	9201      	str	r2, [sp, #4]
   1313c:	eb01 020e 	add.w	r2, r1, lr
   13140:	3201      	adds	r2, #1
   13142:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   13146:	0852      	lsrs	r2, r2, #1
   13148:	f102 0801 	add.w	r8, r2, #1
   1314c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   13150:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   13154:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   13158:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   1315c:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   13160:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   13164:	f8d9 9004 	ldr.w	r9, [r9, #4]
   13168:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   1316c:	f8da a010 	ldr.w	sl, [sl, #16]
   13170:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   13174:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   13178:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   1317c:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   13180:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   13184:	6936      	ldr	r6, [r6, #16]
   13186:	f8db b004 	ldr.w	fp, [fp, #4]
   1318a:	692d      	ldr	r5, [r5, #16]
   1318c:	f8d9 9004 	ldr.w	r9, [r9, #4]
   13190:	4550      	cmp	r0, sl
   13192:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   13196:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   1319a:	d913      	bls.n	131c4 <mem_alloc.constprop.4+0xb0>
   1319c:	42a8      	cmp	r0, r5
   1319e:	d210      	bcs.n	131c2 <mem_alloc.constprop.4+0xae>
   131a0:	42b0      	cmp	r0, r6
   131a2:	d908      	bls.n	131b6 <mem_alloc.constprop.4+0xa2>
   131a4:	45c6      	cmp	lr, r8
   131a6:	4641      	mov	r1, r8
   131a8:	f0c0 8087 	bcc.w	132ba <mem_alloc.constprop.4+0x1a6>
   131ac:	f108 0c01 	add.w	ip, r8, #1
   131b0:	e7c4      	b.n	1313c <mem_alloc.constprop.4+0x28>
   131b2:	2000      	movs	r0, #0
   131b4:	4770      	bx	lr
   131b6:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
   131ba:	4571      	cmp	r1, lr
   131bc:	d87d      	bhi.n	132ba <mem_alloc.constprop.4+0x1a6>
   131be:	4617      	mov	r7, r2
   131c0:	e7bc      	b.n	1313c <mem_alloc.constprop.4+0x28>
   131c2:	4639      	mov	r1, r7
   131c4:	9a00      	ldr	r2, [sp, #0]
   131c6:	428a      	cmp	r2, r1
   131c8:	d007      	beq.n	131da <mem_alloc.constprop.4+0xc6>
   131ca:	2910      	cmp	r1, #16
   131cc:	d001      	beq.n	131d2 <mem_alloc.constprop.4+0xbe>
   131ce:	428a      	cmp	r2, r1
   131d0:	d808      	bhi.n	131e4 <mem_alloc.constprop.4+0xd0>
   131d2:	2000      	movs	r0, #0
   131d4:	b003      	add	sp, #12
   131d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131da:	9a01      	ldr	r2, [sp, #4]
   131dc:	2a10      	cmp	r2, #16
   131de:	bf18      	it	ne
   131e0:	4611      	movne	r1, r2
   131e2:	d0f6      	beq.n	131d2 <mem_alloc.constprop.4+0xbe>
   131e4:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 132d0 <mem_alloc.constprop.4+0x1bc>
   131e8:	f8dd 9000 	ldr.w	r9, [sp]
   131ec:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   131f0:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   131f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   131f8:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   131fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   13200:	f8d2 e004 	ldr.w	lr, [r2, #4]
   13204:	691f      	ldr	r7, [r3, #16]
   13206:	2e00      	cmp	r6, #0
   13208:	d055      	beq.n	132b6 <mem_alloc.constprop.4+0x1a2>
   1320a:	463a      	mov	r2, r7
   1320c:	4670      	mov	r0, lr
   1320e:	00b6      	lsls	r6, r6, #2
   13210:	eb07 0a06 	add.w	sl, r7, r6
   13214:	8855      	ldrh	r5, [r2, #2]
   13216:	3204      	adds	r2, #4
   13218:	4592      	cmp	sl, r2
   1321a:	4428      	add	r0, r5
   1321c:	d1fa      	bne.n	13214 <mem_alloc.constprop.4+0x100>
   1321e:	19bd      	adds	r5, r7, r6
   13220:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   13224:	4483      	add	fp, r0
   13226:	4583      	cmp	fp, r0
   13228:	d918      	bls.n	1325c <mem_alloc.constprop.4+0x148>
   1322a:	0945      	lsrs	r5, r0, #5
   1322c:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   13230:	f000 061f 	and.w	r6, r0, #31
   13234:	fa22 fa06 	lsr.w	sl, r2, r6
   13238:	f01a 0f01 	tst.w	sl, #1
   1323c:	d007      	beq.n	1324e <mem_alloc.constprop.4+0x13a>
   1323e:	e013      	b.n	13268 <mem_alloc.constprop.4+0x154>
   13240:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   13244:	fa22 fa06 	lsr.w	sl, r2, r6
   13248:	f01a 0f01 	tst.w	sl, #1
   1324c:	d10c      	bne.n	13268 <mem_alloc.constprop.4+0x154>
   1324e:	3001      	adds	r0, #1
   13250:	4583      	cmp	fp, r0
   13252:	ea4f 1550 	mov.w	r5, r0, lsr #5
   13256:	f000 061f 	and.w	r6, r0, #31
   1325a:	d1f1      	bne.n	13240 <mem_alloc.constprop.4+0x12c>
   1325c:	3101      	adds	r1, #1
   1325e:	4549      	cmp	r1, r9
   13260:	f108 0808 	add.w	r8, r8, #8
   13264:	d3c4      	bcc.n	131f0 <mem_alloc.constprop.4+0xdc>
   13266:	e7b4      	b.n	131d2 <mem_alloc.constprop.4+0xbe>
   13268:	2101      	movs	r1, #1
   1326a:	40b1      	lsls	r1, r6
   1326c:	899e      	ldrh	r6, [r3, #12]
   1326e:	ea22 0201 	bic.w	r2, r2, r1
   13272:	eba0 000e 	sub.w	r0, r0, lr
   13276:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   1327a:	685c      	ldr	r4, [r3, #4]
   1327c:	2e00      	cmp	r6, #0
   1327e:	d0a8      	beq.n	131d2 <mem_alloc.constprop.4+0xbe>
   13280:	887a      	ldrh	r2, [r7, #2]
   13282:	4282      	cmp	r2, r0
   13284:	d811      	bhi.n	132aa <mem_alloc.constprop.4+0x196>
   13286:	2100      	movs	r1, #0
   13288:	1d3b      	adds	r3, r7, #4
   1328a:	e003      	b.n	13294 <mem_alloc.constprop.4+0x180>
   1328c:	885a      	ldrh	r2, [r3, #2]
   1328e:	3304      	adds	r3, #4
   13290:	4282      	cmp	r2, r0
   13292:	d80a      	bhi.n	132aa <mem_alloc.constprop.4+0x196>
   13294:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   13298:	3101      	adds	r1, #1
   1329a:	428e      	cmp	r6, r1
   1329c:	eba0 0002 	sub.w	r0, r0, r2
   132a0:	fb02 4405 	mla	r4, r2, r5, r4
   132a4:	461f      	mov	r7, r3
   132a6:	d1f1      	bne.n	1328c <mem_alloc.constprop.4+0x178>
   132a8:	e793      	b.n	131d2 <mem_alloc.constprop.4+0xbe>
   132aa:	883b      	ldrh	r3, [r7, #0]
   132ac:	fb00 4003 	mla	r0, r0, r3, r4
   132b0:	b003      	add	sp, #12
   132b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132b6:	4670      	mov	r0, lr
   132b8:	e7b1      	b.n	1321e <mem_alloc.constprop.4+0x10a>
   132ba:	9a00      	ldr	r2, [sp, #0]
   132bc:	2a10      	cmp	r2, #16
   132be:	bf08      	it	eq
   132c0:	210f      	moveq	r1, #15
   132c2:	d08f      	beq.n	131e4 <mem_alloc.constprop.4+0xd0>
   132c4:	e785      	b.n	131d2 <mem_alloc.constprop.4+0xbe>
   132c6:	bf00      	nop
   132c8:	20020554 	.word	0x20020554
   132cc:	20020518 	.word	0x20020518
   132d0:	200204d4 	.word	0x200204d4

000132d4 <nrf_mem_init>:
   132d4:	b570      	push	{r4, r5, r6, lr}
   132d6:	2200      	movs	r2, #0
   132d8:	2501      	movs	r5, #1
   132da:	4833      	ldr	r0, [pc, #204]	; (133a8 <nrf_mem_init+0xd4>)
   132dc:	0951      	lsrs	r1, r2, #5
   132de:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   132e2:	f002 031f 	and.w	r3, r2, #31
   132e6:	fa05 f303 	lsl.w	r3, r5, r3
   132ea:	3201      	adds	r2, #1
   132ec:	4323      	orrs	r3, r4
   132ee:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   132f2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   132f6:	d1f1      	bne.n	132dc <nrf_mem_init+0x8>
   132f8:	2400      	movs	r4, #0
   132fa:	4b2c      	ldr	r3, [pc, #176]	; (133ac <nrf_mem_init+0xd8>)
   132fc:	4621      	mov	r1, r4
   132fe:	223c      	movs	r2, #60	; 0x3c
   13300:	482b      	ldr	r0, [pc, #172]	; (133b0 <nrf_mem_init+0xdc>)
   13302:	601c      	str	r4, [r3, #0]
   13304:	f009 ff45 	bl	1d192 <memset>
   13308:	2110      	movs	r1, #16
   1330a:	2205      	movs	r2, #5
   1330c:	4b29      	ldr	r3, [pc, #164]	; (133b4 <nrf_mem_init+0xe0>)
   1330e:	4e2a      	ldr	r6, [pc, #168]	; (133b8 <nrf_mem_init+0xe4>)
   13310:	e9c3 4400 	strd	r4, r4, [r3]
   13314:	60d9      	str	r1, [r3, #12]
   13316:	6159      	str	r1, [r3, #20]
   13318:	61d9      	str	r1, [r3, #28]
   1331a:	6259      	str	r1, [r3, #36]	; 0x24
   1331c:	62d9      	str	r1, [r3, #44]	; 0x2c
   1331e:	6359      	str	r1, [r3, #52]	; 0x34
   13320:	63d9      	str	r1, [r3, #60]	; 0x3c
   13322:	6459      	str	r1, [r3, #68]	; 0x44
   13324:	64d9      	str	r1, [r3, #76]	; 0x4c
   13326:	6559      	str	r1, [r3, #84]	; 0x54
   13328:	65d9      	str	r1, [r3, #92]	; 0x5c
   1332a:	6659      	str	r1, [r3, #100]	; 0x64
   1332c:	66d9      	str	r1, [r3, #108]	; 0x6c
   1332e:	6759      	str	r1, [r3, #116]	; 0x74
   13330:	67d9      	str	r1, [r3, #124]	; 0x7c
   13332:	609a      	str	r2, [r3, #8]
   13334:	611a      	str	r2, [r3, #16]
   13336:	619a      	str	r2, [r3, #24]
   13338:	621a      	str	r2, [r3, #32]
   1333a:	629a      	str	r2, [r3, #40]	; 0x28
   1333c:	631a      	str	r2, [r3, #48]	; 0x30
   1333e:	639a      	str	r2, [r3, #56]	; 0x38
   13340:	641a      	str	r2, [r3, #64]	; 0x40
   13342:	649a      	str	r2, [r3, #72]	; 0x48
   13344:	651a      	str	r2, [r3, #80]	; 0x50
   13346:	659a      	str	r2, [r3, #88]	; 0x58
   13348:	661a      	str	r2, [r3, #96]	; 0x60
   1334a:	669a      	str	r2, [r3, #104]	; 0x68
   1334c:	671a      	str	r2, [r3, #112]	; 0x70
   1334e:	679a      	str	r2, [r3, #120]	; 0x78
   13350:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   13354:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   13358:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   1335c:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   13360:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   13364:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   13368:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   1336c:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   13370:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   13374:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   13378:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   1337c:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   13380:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   13384:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   13388:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   1338c:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   13390:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   13394:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   13398:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   1339c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   133a0:	4620      	mov	r0, r4
   133a2:	7035      	strb	r5, [r6, #0]
   133a4:	bd70      	pop	{r4, r5, r6, pc}
   133a6:	bf00      	nop
   133a8:	200204d4 	.word	0x200204d4
   133ac:	20020514 	.word	0x20020514
   133b0:	20020518 	.word	0x20020518
   133b4:	20020554 	.word	0x20020554
   133b8:	200265c2 	.word	0x200265c2

000133bc <nrf_mem_register>:
   133bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133c0:	4b87      	ldr	r3, [pc, #540]	; (135e0 <nrf_mem_register+0x224>)
   133c2:	b087      	sub	sp, #28
   133c4:	781b      	ldrb	r3, [r3, #0]
   133c6:	2b00      	cmp	r3, #0
   133c8:	f000 808c 	beq.w	134e4 <nrf_mem_register+0x128>
   133cc:	b328      	cbz	r0, 1341a <nrf_mem_register+0x5e>
   133ce:	b321      	cbz	r1, 1341a <nrf_mem_register+0x5e>
   133d0:	780b      	ldrb	r3, [r1, #0]
   133d2:	f8df 8218 	ldr.w	r8, [pc, #536]	; 135ec <nrf_mem_register+0x230>
   133d6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   133da:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   133de:	685b      	ldr	r3, [r3, #4]
   133e0:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   133e4:	4463      	add	r3, ip
   133e6:	2b10      	cmp	r3, #16
   133e8:	d811      	bhi.n	1340e <nrf_mem_register+0x52>
   133ea:	f04f 0a00 	mov.w	sl, #0
   133ee:	4689      	mov	r9, r1
   133f0:	4b7c      	ldr	r3, [pc, #496]	; (135e4 <nrf_mem_register+0x228>)
   133f2:	4f7d      	ldr	r7, [pc, #500]	; (135e8 <nrf_mem_register+0x22c>)
   133f4:	681b      	ldr	r3, [r3, #0]
   133f6:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   133fa:	9300      	str	r3, [sp, #0]
   133fc:	68b9      	ldr	r1, [r7, #8]
   133fe:	b191      	cbz	r1, 13426 <nrf_mem_register+0x6a>
   13400:	f10a 0a01 	add.w	sl, sl, #1
   13404:	f1ba 0f05 	cmp.w	sl, #5
   13408:	f107 070c 	add.w	r7, r7, #12
   1340c:	d1f6      	bne.n	133fc <nrf_mem_register+0x40>
   1340e:	f248 1b07 	movw	fp, #33031	; 0x8107
   13412:	4658      	mov	r0, fp
   13414:	b007      	add	sp, #28
   13416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1341a:	f248 1b0e 	movw	fp, #33038	; 0x810e
   1341e:	4658      	mov	r0, fp
   13420:	b007      	add	sp, #28
   13422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13426:	f1bc 0f00 	cmp.w	ip, #0
   1342a:	d061      	beq.n	134f0 <nrf_mem_register+0x134>
   1342c:	460d      	mov	r5, r1
   1342e:	460c      	mov	r4, r1
   13430:	f8d9 3010 	ldr.w	r3, [r9, #16]
   13434:	eb0e 0b03 	add.w	fp, lr, r3
   13438:	885a      	ldrh	r2, [r3, #2]
   1343a:	f833 6b04 	ldrh.w	r6, [r3], #4
   1343e:	4415      	add	r5, r2
   13440:	459b      	cmp	fp, r3
   13442:	fb02 4406 	mla	r4, r2, r6, r4
   13446:	d1f7      	bne.n	13438 <nrf_mem_register+0x7c>
   13448:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1344c:	42a3      	cmp	r3, r4
   1344e:	d3d7      	bcc.n	13400 <nrf_mem_register+0x44>
   13450:	9b00      	ldr	r3, [sp, #0]
   13452:	442b      	add	r3, r5
   13454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   13458:	d2d2      	bcs.n	13400 <nrf_mem_register+0x44>
   1345a:	4c63      	ldr	r4, [pc, #396]	; (135e8 <nrf_mem_register+0x22c>)
   1345c:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   13460:	0092      	lsls	r2, r2, #2
   13462:	f8c0 a000 	str.w	sl, [r0]
   13466:	18a0      	adds	r0, r4, r2
   13468:	f844 9002 	str.w	r9, [r4, r2]
   1346c:	9a00      	ldr	r2, [sp, #0]
   1346e:	468b      	mov	fp, r1
   13470:	e9c0 2501 	strd	r2, r5, [r0, #4]
   13474:	f899 2001 	ldrb.w	r2, [r9, #1]
   13478:	485a      	ldr	r0, [pc, #360]	; (135e4 <nrf_mem_register+0x228>)
   1347a:	2a01      	cmp	r2, #1
   1347c:	6003      	str	r3, [r0, #0]
   1347e:	d0c8      	beq.n	13412 <nrf_mem_register+0x56>
   13480:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   13484:	2b00      	cmp	r3, #0
   13486:	d0c4      	beq.n	13412 <nrf_mem_register+0x56>
   13488:	2500      	movs	r5, #0
   1348a:	f8cd 9004 	str.w	r9, [sp, #4]
   1348e:	f8cd a00c 	str.w	sl, [sp, #12]
   13492:	f8cd b014 	str.w	fp, [sp, #20]
   13496:	9b01      	ldr	r3, [sp, #4]
   13498:	781f      	ldrb	r7, [r3, #0]
   1349a:	691a      	ldr	r2, [r3, #16]
   1349c:	013b      	lsls	r3, r7, #4
   1349e:	eb03 0907 	add.w	r9, r3, r7
   134a2:	9300      	str	r3, [sp, #0]
   134a4:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   134a8:	6859      	ldr	r1, [r3, #4]
   134aa:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   134ae:	9102      	str	r1, [sp, #8]
   134b0:	bb39      	cbnz	r1, 13502 <nrf_mem_register+0x146>
   134b2:	9a03      	ldr	r2, [sp, #12]
   134b4:	60dd      	str	r5, [r3, #12]
   134b6:	609a      	str	r2, [r3, #8]
   134b8:	9b00      	ldr	r3, [sp, #0]
   134ba:	443b      	add	r3, r7
   134bc:	461f      	mov	r7, r3
   134be:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   134c2:	684b      	ldr	r3, [r1, #4]
   134c4:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   134c8:	3301      	adds	r3, #1
   134ca:	4294      	cmp	r4, r2
   134cc:	604b      	str	r3, [r1, #4]
   134ce:	d912      	bls.n	134f6 <nrf_mem_register+0x13a>
   134d0:	9b01      	ldr	r3, [sp, #4]
   134d2:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   134d6:	899b      	ldrh	r3, [r3, #12]
   134d8:	3501      	adds	r5, #1
   134da:	429d      	cmp	r5, r3
   134dc:	d3db      	bcc.n	13496 <nrf_mem_register+0xda>
   134de:	f8dd b014 	ldr.w	fp, [sp, #20]
   134e2:	e796      	b.n	13412 <nrf_mem_register+0x56>
   134e4:	f248 1b08 	movw	fp, #33032	; 0x8108
   134e8:	4658      	mov	r0, fp
   134ea:	b007      	add	sp, #28
   134ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134f0:	9b00      	ldr	r3, [sp, #0]
   134f2:	4665      	mov	r5, ip
   134f4:	e7ae      	b.n	13454 <nrf_mem_register+0x98>
   134f6:	9b01      	ldr	r3, [sp, #4]
   134f8:	3501      	adds	r5, #1
   134fa:	899b      	ldrh	r3, [r3, #12]
   134fc:	42ab      	cmp	r3, r5
   134fe:	d8ca      	bhi.n	13496 <nrf_mem_register+0xda>
   13500:	e7ed      	b.n	134de <nrf_mem_register+0x122>
   13502:	2600      	movs	r6, #0
   13504:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
   13508:	9504      	str	r5, [sp, #16]
   1350a:	eb06 000a 	add.w	r0, r6, sl
   1350e:	eb09 0206 	add.w	r2, r9, r6
   13512:	3201      	adds	r2, #1
   13514:	3001      	adds	r0, #1
   13516:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   1351a:	0840      	lsrs	r0, r0, #1
   1351c:	4d32      	ldr	r5, [pc, #200]	; (135e8 <nrf_mem_register+0x22c>)
   1351e:	eb09 0100 	add.w	r1, r9, r0
   13522:	eb09 030a 	add.w	r3, r9, sl
   13526:	3101      	adds	r1, #1
   13528:	3301      	adds	r3, #1
   1352a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   1352e:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   13532:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   13536:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   1353a:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   1353e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   13542:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   13546:	f8db b010 	ldr.w	fp, [fp, #16]
   1354a:	6852      	ldr	r2, [r2, #4]
   1354c:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   13550:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   13554:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   13558:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   1355c:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   13560:	f8de e010 	ldr.w	lr, [lr, #16]
   13564:	6849      	ldr	r1, [r1, #4]
   13566:	f8dc c010 	ldr.w	ip, [ip, #16]
   1356a:	685b      	ldr	r3, [r3, #4]
   1356c:	4294      	cmp	r4, r2
   1356e:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   13572:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   13576:	d92d      	bls.n	135d4 <nrf_mem_register+0x218>
   13578:	429c      	cmp	r4, r3
   1357a:	d22d      	bcs.n	135d8 <nrf_mem_register+0x21c>
   1357c:	428c      	cmp	r4, r1
   1357e:	d924      	bls.n	135ca <nrf_mem_register+0x20e>
   13580:	1c46      	adds	r6, r0, #1
   13582:	45b2      	cmp	sl, r6
   13584:	d2c1      	bcs.n	1350a <nrf_mem_register+0x14e>
   13586:	2610      	movs	r6, #16
   13588:	9d04      	ldr	r5, [sp, #16]
   1358a:	9a02      	ldr	r2, [sp, #8]
   1358c:	42b2      	cmp	r2, r6
   1358e:	d911      	bls.n	135b4 <nrf_mem_register+0x1f8>
   13590:	9b00      	ldr	r3, [sp, #0]
   13592:	443b      	add	r3, r7
   13594:	441a      	add	r2, r3
   13596:	4433      	add	r3, r6
   13598:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   1359c:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   135a0:	2208      	movs	r2, #8
   135a2:	4651      	mov	r1, sl
   135a4:	eb0a 0002 	add.w	r0, sl, r2
   135a8:	f1aa 0a08 	sub.w	sl, sl, #8
   135ac:	f009 fdc7 	bl	1d13e <memcpy>
   135b0:	45d1      	cmp	r9, sl
   135b2:	d1f5      	bne.n	135a0 <nrf_mem_register+0x1e4>
   135b4:	9b00      	ldr	r3, [sp, #0]
   135b6:	9903      	ldr	r1, [sp, #12]
   135b8:	443b      	add	r3, r7
   135ba:	4433      	add	r3, r6
   135bc:	3301      	adds	r3, #1
   135be:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   135c2:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   135c6:	6055      	str	r5, [r2, #4]
   135c8:	e776      	b.n	134b8 <nrf_mem_register+0xfc>
   135ca:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
   135ce:	4556      	cmp	r6, sl
   135d0:	d99b      	bls.n	1350a <nrf_mem_register+0x14e>
   135d2:	e7d8      	b.n	13586 <nrf_mem_register+0x1ca>
   135d4:	9d04      	ldr	r5, [sp, #16]
   135d6:	e7d8      	b.n	1358a <nrf_mem_register+0x1ce>
   135d8:	9d04      	ldr	r5, [sp, #16]
   135da:	f10a 0601 	add.w	r6, sl, #1
   135de:	e7d4      	b.n	1358a <nrf_mem_register+0x1ce>
   135e0:	200265c2 	.word	0x200265c2
   135e4:	20020514 	.word	0x20020514
   135e8:	20020518 	.word	0x20020518
   135ec:	20020554 	.word	0x20020554

000135f0 <nrf_malloc>:
   135f0:	4b03      	ldr	r3, [pc, #12]	; (13600 <nrf_malloc+0x10>)
   135f2:	781b      	ldrb	r3, [r3, #0]
   135f4:	b10b      	cbz	r3, 135fa <nrf_malloc+0xa>
   135f6:	f7ff bd8d 	b.w	13114 <mem_alloc.constprop.4>
   135fa:	4618      	mov	r0, r3
   135fc:	4770      	bx	lr
   135fe:	bf00      	nop
   13600:	200265c2 	.word	0x200265c2

00013604 <nrf_free>:
   13604:	4b04      	ldr	r3, [pc, #16]	; (13618 <nrf_free+0x14>)
   13606:	781b      	ldrb	r3, [r3, #0]
   13608:	b123      	cbz	r3, 13614 <nrf_free+0x10>
   1360a:	b118      	cbz	r0, 13614 <nrf_free+0x10>
   1360c:	4601      	mov	r1, r0
   1360e:	2000      	movs	r0, #0
   13610:	f7ff bc30 	b.w	12e74 <mem_free>
   13614:	4770      	bx	lr
   13616:	bf00      	nop
   13618:	200265c2 	.word	0x200265c2

0001361c <nrf_shared_malloc>:
   1361c:	4b03      	ldr	r3, [pc, #12]	; (1362c <nrf_shared_malloc+0x10>)
   1361e:	781b      	ldrb	r3, [r3, #0]
   13620:	b10b      	cbz	r3, 13626 <nrf_shared_malloc+0xa>
   13622:	f7ff bc93 	b.w	12f4c <mem_alloc.constprop.5>
   13626:	4618      	mov	r0, r3
   13628:	4770      	bx	lr
   1362a:	bf00      	nop
   1362c:	200265c2 	.word	0x200265c2

00013630 <nrf_shared_free>:
   13630:	4b04      	ldr	r3, [pc, #16]	; (13644 <nrf_shared_free+0x14>)
   13632:	781b      	ldrb	r3, [r3, #0]
   13634:	b123      	cbz	r3, 13640 <nrf_shared_free+0x10>
   13636:	b118      	cbz	r0, 13640 <nrf_shared_free+0x10>
   13638:	4601      	mov	r1, r0
   1363a:	2001      	movs	r0, #1
   1363c:	f7ff bc1a 	b.w	12e74 <mem_free>
   13640:	4770      	bx	lr
   13642:	bf00      	nop
   13644:	200265c2 	.word	0x200265c2

00013648 <ip_client_event_handler>:
   13648:	f850 1b08 	ldr.w	r1, [r0], #8
   1364c:	0c09      	lsrs	r1, r1, #16
   1364e:	f004 bd23 	b.w	18098 <rpc_ip_event_handler>
   13652:	bf00      	nop

00013654 <rpc_ip_client_init>:
   13654:	4801      	ldr	r0, [pc, #4]	; (1365c <rpc_ip_client_init+0x8>)
   13656:	f005 ba01 	b.w	18a5c <rpc_client_register>
   1365a:	bf00      	nop
   1365c:	0001f0f8 	.word	0x0001f0f8

00013660 <rpc_ip_client_request_alloc>:
   13660:	2300      	movs	r3, #0
   13662:	b510      	push	{r4, lr}
   13664:	b082      	sub	sp, #8
   13666:	9301      	str	r3, [sp, #4]
   13668:	b158      	cbz	r0, 13682 <rpc_ip_client_request_alloc+0x22>
   1366a:	4604      	mov	r4, r0
   1366c:	aa01      	add	r2, sp, #4
   1366e:	2004      	movs	r0, #4
   13670:	f005 fc2c 	bl	18ecc <rpc_message_alloc>
   13674:	b918      	cbnz	r0, 1367e <rpc_ip_client_request_alloc+0x1e>
   13676:	9b01      	ldr	r3, [sp, #4]
   13678:	b10b      	cbz	r3, 1367e <rpc_ip_client_request_alloc+0x1e>
   1367a:	3308      	adds	r3, #8
   1367c:	6023      	str	r3, [r4, #0]
   1367e:	b002      	add	sp, #8
   13680:	bd10      	pop	{r4, pc}
   13682:	2007      	movs	r0, #7
   13684:	b002      	add	sp, #8
   13686:	bd10      	pop	{r4, pc}

00013688 <rpc_ip_client_request_send>:
   13688:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1368c:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   13690:	d10b      	bne.n	136aa <rpc_ip_client_request_send+0x22>
   13692:	b160      	cbz	r0, 136ae <rpc_ip_client_request_send+0x26>
   13694:	4603      	mov	r3, r0
   13696:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1369a:	2004      	movs	r0, #4
   1369c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   136a0:	f843 1d08 	str.w	r1, [r3, #-8]!
   136a4:	4619      	mov	r1, r3
   136a6:	f005 bbf9 	b.w	18e9c <rpc_message_send>
   136aa:	200f      	movs	r0, #15
   136ac:	4770      	bx	lr
   136ae:	2007      	movs	r0, #7
   136b0:	4770      	bx	lr
   136b2:	bf00      	nop

000136b4 <rpc_ip_client_message_free>:
   136b4:	b120      	cbz	r0, 136c0 <rpc_ip_client_message_free+0xc>
   136b6:	f1a0 0108 	sub.w	r1, r0, #8
   136ba:	2004      	movs	r0, #4
   136bc:	f005 bc38 	b.w	18f30 <rpc_message_free>
   136c0:	2007      	movs	r0, #7
   136c2:	4770      	bx	lr

000136c4 <rpc_ip_client_data_free>:
   136c4:	b118      	cbz	r0, 136ce <rpc_ip_client_data_free+0xa>
   136c6:	4601      	mov	r1, r0
   136c8:	2004      	movs	r0, #4
   136ca:	f005 bd43 	b.w	19154 <rpc_message_data_free>
   136ce:	2007      	movs	r0, #7
   136d0:	4770      	bx	lr
   136d2:	bf00      	nop

000136d4 <secure_client_socket>:
   136d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   136d8:	460c      	mov	r4, r1
   136da:	680b      	ldr	r3, [r1, #0]
   136dc:	6989      	ldr	r1, [r1, #24]
   136de:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   136e2:	6023      	str	r3, [r4, #0]
   136e4:	6822      	ldr	r2, [r4, #0]
   136e6:	2300      	movs	r3, #0
   136e8:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
   136ec:	6022      	str	r2, [r4, #0]
   136ee:	f247 0281 	movw	r2, #28801	; 0x7081
   136f2:	6827      	ldr	r7, [r4, #0]
   136f4:	4606      	mov	r6, r0
   136f6:	f003 fc2d 	bl	16f54 <ip_interface_request_create>
   136fa:	2800      	cmp	r0, #0
   136fc:	d03b      	beq.n	13776 <secure_client_socket+0xa2>
   136fe:	4605      	mov	r5, r0
   13700:	4b28      	ldr	r3, [pc, #160]	; (137a4 <secure_client_socket+0xd0>)
   13702:	eb06 01c6 	add.w	r1, r6, r6, lsl #3
   13706:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1370a:	2224      	movs	r2, #36	; 0x24
   1370c:	3014      	adds	r0, #20
   1370e:	f009 fd16 	bl	1d13e <memcpy>
   13712:	68ab      	ldr	r3, [r5, #8]
   13714:	f8df 8090 	ldr.w	r8, [pc, #144]	; 137a8 <secure_client_socket+0xd4>
   13718:	3324      	adds	r3, #36	; 0x24
   1371a:	60ab      	str	r3, [r5, #8]
   1371c:	6823      	ldr	r3, [r4, #0]
   1371e:	4629      	mov	r1, r5
   13720:	ea03 0308 	and.w	r3, r3, r8
   13724:	f043 030a 	orr.w	r3, r3, #10
   13728:	6023      	str	r3, [r4, #0]
   1372a:	f247 0281 	movw	r2, #28801	; 0x7081
   1372e:	463b      	mov	r3, r7
   13730:	4620      	mov	r0, r4
   13732:	f003 fc2f 	bl	16f94 <ip_interface_request_send>
   13736:	b960      	cbnz	r0, 13752 <secure_client_socket+0x7e>
   13738:	6823      	ldr	r3, [r4, #0]
   1373a:	00db      	lsls	r3, r3, #3
   1373c:	d40b      	bmi.n	13756 <secure_client_socket+0x82>
   1373e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13742:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13746:	210b      	movs	r1, #11
   13748:	4630      	mov	r0, r6
   1374a:	f003 fc37 	bl	16fbc <ip_interface_wait>
   1374e:	b128      	cbz	r0, 1375c <secure_client_socket+0x88>
   13750:	6027      	str	r7, [r4, #0]
   13752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13756:	2073      	movs	r0, #115	; 0x73
   13758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1375c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   13760:	4630      	mov	r0, r6
   13762:	4611      	mov	r1, r2
   13764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13768:	f003 fc28 	bl	16fbc <ip_interface_wait>
   1376c:	b130      	cbz	r0, 1377c <secure_client_socket+0xa8>
   1376e:	2873      	cmp	r0, #115	; 0x73
   13770:	d0ef      	beq.n	13752 <secure_client_socket+0x7e>
   13772:	6027      	str	r7, [r4, #0]
   13774:	e7ed      	b.n	13752 <secure_client_socket+0x7e>
   13776:	200c      	movs	r0, #12
   13778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1377c:	6823      	ldr	r3, [r4, #0]
   1377e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   13782:	6023      	str	r3, [r4, #0]
   13784:	6823      	ldr	r3, [r4, #0]
   13786:	ea03 0808 	and.w	r8, r3, r8
   1378a:	f048 030c 	orr.w	r3, r8, #12
   1378e:	6023      	str	r3, [r4, #0]
   13790:	6823      	ldr	r3, [r4, #0]
   13792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13796:	6023      	str	r3, [r4, #0]
   13798:	6823      	ldr	r3, [r4, #0]
   1379a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1379e:	6023      	str	r3, [r4, #0]
   137a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   137a4:	20020664 	.word	0x20020664
   137a8:	ffff0000 	.word	0xffff0000

000137ac <tls_interface_init>:
   137ac:	2000      	movs	r0, #0
   137ae:	4770      	bx	lr

000137b0 <tls_interface_open>:
   137b0:	b538      	push	{r3, r4, r5, lr}
   137b2:	f020 0308 	bic.w	r3, r0, #8
   137b6:	2b02      	cmp	r3, #2
   137b8:	d006      	beq.n	137c8 <tls_interface_open+0x18>
   137ba:	202f      	movs	r0, #47	; 0x2f
   137bc:	f7fd fe72 	bl	114a4 <bsd_os_errno_set>
   137c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   137c4:	4628      	mov	r0, r5
   137c6:	bd38      	pop	{r3, r4, r5, pc}
   137c8:	4614      	mov	r4, r2
   137ca:	1e4a      	subs	r2, r1, #1
   137cc:	2a01      	cmp	r2, #1
   137ce:	d828      	bhi.n	13822 <tls_interface_open+0x72>
   137d0:	bb14      	cbnz	r4, 13818 <tls_interface_open+0x68>
   137d2:	2901      	cmp	r1, #1
   137d4:	bf06      	itte	eq
   137d6:	2301      	moveq	r3, #1
   137d8:	f44f 7482 	moveq.w	r4, #260	; 0x104
   137dc:	f44f 7487 	movne.w	r4, #270	; 0x10e
   137e0:	461a      	mov	r2, r3
   137e2:	f003 fc17 	bl	17014 <ip_interface_open>
   137e6:	1e05      	subs	r5, r0, #0
   137e8:	db26      	blt.n	13838 <tls_interface_open+0x88>
   137ea:	4b15      	ldr	r3, [pc, #84]	; (13840 <tls_interface_open+0x90>)
   137ec:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   137f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   137f4:	2224      	movs	r2, #36	; 0x24
   137f6:	4913      	ldr	r1, [pc, #76]	; (13844 <tls_interface_open+0x94>)
   137f8:	f009 fca1 	bl	1d13e <memcpy>
   137fc:	4628      	mov	r0, r5
   137fe:	f004 ffcf 	bl	187a0 <interface_socket_from_handle_get>
   13802:	6803      	ldr	r3, [r0, #0]
   13804:	6144      	str	r4, [r0, #20]
   13806:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1380a:	6003      	str	r3, [r0, #0]
   1380c:	6803      	ldr	r3, [r0, #0]
   1380e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   13812:	6003      	str	r3, [r0, #0]
   13814:	4628      	mov	r0, r5
   13816:	bd38      	pop	{r3, r4, r5, pc}
   13818:	2901      	cmp	r1, #1
   1381a:	d008      	beq.n	1382e <tls_interface_open+0x7e>
   1381c:	f5b4 7f87 	cmp.w	r4, #270	; 0x10e
   13820:	d0de      	beq.n	137e0 <tls_interface_open+0x30>
   13822:	2016      	movs	r0, #22
   13824:	f7fd fe3e 	bl	114a4 <bsd_os_errno_set>
   13828:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1382c:	e7ca      	b.n	137c4 <tls_interface_open+0x14>
   1382e:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
   13832:	d1f6      	bne.n	13822 <tls_interface_open+0x72>
   13834:	460b      	mov	r3, r1
   13836:	e7d3      	b.n	137e0 <tls_interface_open+0x30>
   13838:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1383c:	e7c2      	b.n	137c4 <tls_interface_open+0x14>
   1383e:	bf00      	nop
   13840:	20020664 	.word	0x20020664
   13844:	0001f108 	.word	0x0001f108

00013848 <tls_interface_close>:
   13848:	b510      	push	{r4, lr}
   1384a:	4604      	mov	r4, r0
   1384c:	f004 ffa8 	bl	187a0 <interface_socket_from_handle_get>
   13850:	b120      	cbz	r0, 1385c <tls_interface_close+0x14>
   13852:	4620      	mov	r0, r4
   13854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13858:	f003 bc88 	b.w	1716c <ip_interface_close>
   1385c:	2009      	movs	r0, #9
   1385e:	f7fd fe21 	bl	114a4 <bsd_os_errno_set>
   13862:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13866:	bd10      	pop	{r4, pc}

00013868 <tls_interface_sendto>:
   13868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1386c:	460d      	mov	r5, r1
   1386e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   13872:	4616      	mov	r6, r2
   13874:	461f      	mov	r7, r3
   13876:	4604      	mov	r4, r0
   13878:	f004 ff92 	bl	187a0 <interface_socket_from_handle_get>
   1387c:	2800      	cmp	r0, #0
   1387e:	d03b      	beq.n	138f8 <tls_interface_sendto+0x90>
   13880:	6803      	ldr	r3, [r0, #0]
   13882:	b29b      	uxth	r3, r3
   13884:	2b0c      	cmp	r3, #12
   13886:	d039      	beq.n	138fc <tls_interface_sendto+0x94>
   13888:	6803      	ldr	r3, [r0, #0]
   1388a:	b29b      	uxth	r3, r3
   1388c:	2b0b      	cmp	r3, #11
   1388e:	d111      	bne.n	138b4 <tls_interface_sendto+0x4c>
   13890:	4b20      	ldr	r3, [pc, #128]	; (13914 <tls_interface_sendto+0xac>)
   13892:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   13896:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   1389a:	2b02      	cmp	r3, #2
   1389c:	d038      	beq.n	13910 <tls_interface_sendto+0xa8>
   1389e:	6903      	ldr	r3, [r0, #16]
   138a0:	2b01      	cmp	r3, #1
   138a2:	bf14      	ite	ne
   138a4:	2039      	movne	r0, #57	; 0x39
   138a6:	202a      	moveq	r0, #42	; 0x2a
   138a8:	f7fd fdfc 	bl	114a4 <bsd_os_errno_set>
   138ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   138b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   138b4:	6903      	ldr	r3, [r0, #16]
   138b6:	2b01      	cmp	r3, #1
   138b8:	d00b      	beq.n	138d2 <tls_interface_sendto+0x6a>
   138ba:	2b02      	cmp	r3, #2
   138bc:	d001      	beq.n	138c2 <tls_interface_sendto+0x5a>
   138be:	2039      	movs	r0, #57	; 0x39
   138c0:	e7f2      	b.n	138a8 <tls_interface_sendto+0x40>
   138c2:	6803      	ldr	r3, [r0, #0]
   138c4:	b29b      	uxth	r3, r3
   138c6:	2b02      	cmp	r3, #2
   138c8:	d007      	beq.n	138da <tls_interface_sendto+0x72>
   138ca:	6803      	ldr	r3, [r0, #0]
   138cc:	b29b      	uxth	r3, r3
   138ce:	2b04      	cmp	r3, #4
   138d0:	d003      	beq.n	138da <tls_interface_sendto+0x72>
   138d2:	6803      	ldr	r3, [r0, #0]
   138d4:	b29b      	uxth	r3, r3
   138d6:	2b05      	cmp	r3, #5
   138d8:	d1f1      	bne.n	138be <tls_interface_sendto+0x56>
   138da:	4b0e      	ldr	r3, [pc, #56]	; (13914 <tls_interface_sendto+0xac>)
   138dc:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   138e0:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   138e4:	2b02      	cmp	r3, #2
   138e6:	d1ea      	bne.n	138be <tls_interface_sendto+0x56>
   138e8:	4601      	mov	r1, r0
   138ea:	4620      	mov	r0, r4
   138ec:	f7ff fef2 	bl	136d4 <secure_client_socket>
   138f0:	2800      	cmp	r0, #0
   138f2:	d003      	beq.n	138fc <tls_interface_sendto+0x94>
   138f4:	dcd8      	bgt.n	138a8 <tls_interface_sendto+0x40>
   138f6:	e7d9      	b.n	138ac <tls_interface_sendto+0x44>
   138f8:	2009      	movs	r0, #9
   138fa:	e7d5      	b.n	138a8 <tls_interface_sendto+0x40>
   138fc:	e9cd 8908 	strd	r8, r9, [sp, #32]
   13900:	463b      	mov	r3, r7
   13902:	4632      	mov	r2, r6
   13904:	4629      	mov	r1, r5
   13906:	4620      	mov	r0, r4
   13908:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1390c:	f003 bc9e 	b.w	1724c <ip_interface_sendto>
   13910:	2023      	movs	r0, #35	; 0x23
   13912:	e7c9      	b.n	138a8 <tls_interface_sendto+0x40>
   13914:	20020664 	.word	0x20020664

00013918 <tls_interface_recvfrom>:
   13918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1391c:	460d      	mov	r5, r1
   1391e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   13922:	4616      	mov	r6, r2
   13924:	461f      	mov	r7, r3
   13926:	4604      	mov	r4, r0
   13928:	f004 ff3a 	bl	187a0 <interface_socket_from_handle_get>
   1392c:	2800      	cmp	r0, #0
   1392e:	d038      	beq.n	139a2 <tls_interface_recvfrom+0x8a>
   13930:	6803      	ldr	r3, [r0, #0]
   13932:	b29b      	uxth	r3, r3
   13934:	2b0c      	cmp	r3, #12
   13936:	d00f      	beq.n	13958 <tls_interface_recvfrom+0x40>
   13938:	6803      	ldr	r3, [r0, #0]
   1393a:	b29b      	uxth	r3, r3
   1393c:	2b0d      	cmp	r3, #13
   1393e:	d00b      	beq.n	13958 <tls_interface_recvfrom+0x40>
   13940:	6903      	ldr	r3, [r0, #16]
   13942:	2b01      	cmp	r3, #1
   13944:	d01a      	beq.n	1397c <tls_interface_recvfrom+0x64>
   13946:	2b02      	cmp	r3, #2
   13948:	d010      	beq.n	1396c <tls_interface_recvfrom+0x54>
   1394a:	2023      	movs	r0, #35	; 0x23
   1394c:	f7fd fdaa 	bl	114a4 <bsd_os_errno_set>
   13950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13958:	e9cd 8908 	strd	r8, r9, [sp, #32]
   1395c:	463b      	mov	r3, r7
   1395e:	4632      	mov	r2, r6
   13960:	4629      	mov	r1, r5
   13962:	4620      	mov	r0, r4
   13964:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13968:	f003 bdaa 	b.w	174c0 <ip_interface_recvfrom>
   1396c:	6803      	ldr	r3, [r0, #0]
   1396e:	b29b      	uxth	r3, r3
   13970:	2b02      	cmp	r3, #2
   13972:	d007      	beq.n	13984 <tls_interface_recvfrom+0x6c>
   13974:	6803      	ldr	r3, [r0, #0]
   13976:	b29b      	uxth	r3, r3
   13978:	2b04      	cmp	r3, #4
   1397a:	d003      	beq.n	13984 <tls_interface_recvfrom+0x6c>
   1397c:	6803      	ldr	r3, [r0, #0]
   1397e:	b29b      	uxth	r3, r3
   13980:	2b05      	cmp	r3, #5
   13982:	d1e2      	bne.n	1394a <tls_interface_recvfrom+0x32>
   13984:	4b08      	ldr	r3, [pc, #32]	; (139a8 <tls_interface_recvfrom+0x90>)
   13986:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1398a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1398e:	2b02      	cmp	r3, #2
   13990:	d1db      	bne.n	1394a <tls_interface_recvfrom+0x32>
   13992:	4601      	mov	r1, r0
   13994:	4620      	mov	r0, r4
   13996:	f7ff fe9d 	bl	136d4 <secure_client_socket>
   1399a:	2800      	cmp	r0, #0
   1399c:	d0dc      	beq.n	13958 <tls_interface_recvfrom+0x40>
   1399e:	dcd5      	bgt.n	1394c <tls_interface_recvfrom+0x34>
   139a0:	e7d6      	b.n	13950 <tls_interface_recvfrom+0x38>
   139a2:	2009      	movs	r0, #9
   139a4:	e7d2      	b.n	1394c <tls_interface_recvfrom+0x34>
   139a6:	bf00      	nop
   139a8:	20020664 	.word	0x20020664

000139ac <tls_interface_bind>:
   139ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   139b0:	460c      	mov	r4, r1
   139b2:	4617      	mov	r7, r2
   139b4:	4606      	mov	r6, r0
   139b6:	f004 fef3 	bl	187a0 <interface_socket_from_handle_get>
   139ba:	2800      	cmp	r0, #0
   139bc:	d04c      	beq.n	13a58 <tls_interface_bind+0xac>
   139be:	6803      	ldr	r3, [r0, #0]
   139c0:	4605      	mov	r5, r0
   139c2:	b29b      	uxth	r3, r3
   139c4:	2b02      	cmp	r3, #2
   139c6:	d150      	bne.n	13a6a <tls_interface_bind+0xbe>
   139c8:	4621      	mov	r1, r4
   139ca:	463a      	mov	r2, r7
   139cc:	4630      	mov	r0, r6
   139ce:	f003 ff4d 	bl	1786c <ip_interface_bind>
   139d2:	4604      	mov	r4, r0
   139d4:	b120      	cbz	r0, 139e0 <tls_interface_bind+0x34>
   139d6:	2c00      	cmp	r4, #0
   139d8:	dc3f      	bgt.n	13a5a <tls_interface_bind+0xae>
   139da:	4620      	mov	r0, r4
   139dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   139e0:	eb06 07c6 	add.w	r7, r6, r6, lsl #3
   139e4:	f8df 8094 	ldr.w	r8, [pc, #148]	; 13a7c <tls_interface_bind+0xd0>
   139e8:	00bf      	lsls	r7, r7, #2
   139ea:	f818 3007 	ldrb.w	r3, [r8, r7]
   139ee:	2b01      	cmp	r3, #1
   139f0:	d1f3      	bne.n	139da <tls_interface_bind+0x2e>
   139f2:	4603      	mov	r3, r0
   139f4:	f247 0281 	movw	r2, #28801	; 0x7081
   139f8:	69a9      	ldr	r1, [r5, #24]
   139fa:	4630      	mov	r0, r6
   139fc:	f003 faaa 	bl	16f54 <ip_interface_request_create>
   13a00:	4681      	mov	r9, r0
   13a02:	b3b0      	cbz	r0, 13a72 <tls_interface_bind+0xc6>
   13a04:	eb08 0107 	add.w	r1, r8, r7
   13a08:	2224      	movs	r2, #36	; 0x24
   13a0a:	3014      	adds	r0, #20
   13a0c:	f009 fb97 	bl	1d13e <memcpy>
   13a10:	f8d9 3008 	ldr.w	r3, [r9, #8]
   13a14:	4649      	mov	r1, r9
   13a16:	3324      	adds	r3, #36	; 0x24
   13a18:	f8c9 3008 	str.w	r3, [r9, #8]
   13a1c:	682a      	ldr	r2, [r5, #0]
   13a1e:	2304      	movs	r3, #4
   13a20:	0c12      	lsrs	r2, r2, #16
   13a22:	0412      	lsls	r2, r2, #16
   13a24:	f042 020a 	orr.w	r2, r2, #10
   13a28:	602a      	str	r2, [r5, #0]
   13a2a:	4628      	mov	r0, r5
   13a2c:	f247 0281 	movw	r2, #28801	; 0x7081
   13a30:	f003 fab0 	bl	16f94 <ip_interface_request_send>
   13a34:	b9f8      	cbnz	r0, 13a76 <tls_interface_bind+0xca>
   13a36:	682b      	ldr	r3, [r5, #0]
   13a38:	00db      	lsls	r3, r3, #3
   13a3a:	d418      	bmi.n	13a6e <tls_interface_bind+0xc2>
   13a3c:	4630      	mov	r0, r6
   13a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13a42:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13a46:	210b      	movs	r1, #11
   13a48:	f003 fab8 	bl	16fbc <ip_interface_wait>
   13a4c:	2800      	cmp	r0, #0
   13a4e:	d0c4      	beq.n	139da <tls_interface_bind+0x2e>
   13a50:	2304      	movs	r3, #4
   13a52:	4604      	mov	r4, r0
   13a54:	602b      	str	r3, [r5, #0]
   13a56:	e7be      	b.n	139d6 <tls_interface_bind+0x2a>
   13a58:	2409      	movs	r4, #9
   13a5a:	4620      	mov	r0, r4
   13a5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   13a60:	f7fd fd20 	bl	114a4 <bsd_os_errno_set>
   13a64:	4620      	mov	r0, r4
   13a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13a6a:	242d      	movs	r4, #45	; 0x2d
   13a6c:	e7f5      	b.n	13a5a <tls_interface_bind+0xae>
   13a6e:	2473      	movs	r4, #115	; 0x73
   13a70:	e7f3      	b.n	13a5a <tls_interface_bind+0xae>
   13a72:	240c      	movs	r4, #12
   13a74:	e7f1      	b.n	13a5a <tls_interface_bind+0xae>
   13a76:	4604      	mov	r4, r0
   13a78:	e7ad      	b.n	139d6 <tls_interface_bind+0x2a>
   13a7a:	bf00      	nop
   13a7c:	20020664 	.word	0x20020664

00013a80 <tls_interface_connect>:
   13a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13a82:	460e      	mov	r6, r1
   13a84:	4617      	mov	r7, r2
   13a86:	4604      	mov	r4, r0
   13a88:	f004 fe8a 	bl	187a0 <interface_socket_from_handle_get>
   13a8c:	b1e8      	cbz	r0, 13aca <tls_interface_connect+0x4a>
   13a8e:	4b13      	ldr	r3, [pc, #76]	; (13adc <tls_interface_connect+0x5c>)
   13a90:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   13a94:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   13a98:	2b02      	cmp	r3, #2
   13a9a:	d11c      	bne.n	13ad6 <tls_interface_connect+0x56>
   13a9c:	6803      	ldr	r3, [r0, #0]
   13a9e:	4605      	mov	r5, r0
   13aa0:	b29b      	uxth	r3, r3
   13aa2:	2b02      	cmp	r3, #2
   13aa4:	d003      	beq.n	13aae <tls_interface_connect+0x2e>
   13aa6:	6803      	ldr	r3, [r0, #0]
   13aa8:	b29b      	uxth	r3, r3
   13aaa:	2b04      	cmp	r3, #4
   13aac:	d113      	bne.n	13ad6 <tls_interface_connect+0x56>
   13aae:	463a      	mov	r2, r7
   13ab0:	4631      	mov	r1, r6
   13ab2:	4620      	mov	r0, r4
   13ab4:	f003 fe30 	bl	17718 <ip_interface_connect>
   13ab8:	b110      	cbz	r0, 13ac0 <tls_interface_connect+0x40>
   13aba:	2800      	cmp	r0, #0
   13abc:	dc06      	bgt.n	13acc <tls_interface_connect+0x4c>
   13abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13ac0:	4629      	mov	r1, r5
   13ac2:	4620      	mov	r0, r4
   13ac4:	f7ff fe06 	bl	136d4 <secure_client_socket>
   13ac8:	e7f7      	b.n	13aba <tls_interface_connect+0x3a>
   13aca:	2009      	movs	r0, #9
   13acc:	f7fd fcea 	bl	114a4 <bsd_os_errno_set>
   13ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13ad6:	202d      	movs	r0, #45	; 0x2d
   13ad8:	e7f8      	b.n	13acc <tls_interface_connect+0x4c>
   13ada:	bf00      	nop
   13adc:	20020664 	.word	0x20020664

00013ae0 <tls_interface_listen>:
   13ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13ae4:	460f      	mov	r7, r1
   13ae6:	4606      	mov	r6, r0
   13ae8:	f004 fe5a 	bl	187a0 <interface_socket_from_handle_get>
   13aec:	2800      	cmp	r0, #0
   13aee:	d06b      	beq.n	13bc8 <tls_interface_listen+0xe8>
   13af0:	6903      	ldr	r3, [r0, #16]
   13af2:	4604      	mov	r4, r0
   13af4:	2b01      	cmp	r3, #1
   13af6:	d165      	bne.n	13bc4 <tls_interface_listen+0xe4>
   13af8:	6803      	ldr	r3, [r0, #0]
   13afa:	b29b      	uxth	r3, r3
   13afc:	2b04      	cmp	r3, #4
   13afe:	d056      	beq.n	13bae <tls_interface_listen+0xce>
   13b00:	6823      	ldr	r3, [r4, #0]
   13b02:	b29b      	uxth	r3, r3
   13b04:	2b0b      	cmp	r3, #11
   13b06:	d15d      	bne.n	13bc4 <tls_interface_listen+0xe4>
   13b08:	00f3      	lsls	r3, r6, #3
   13b0a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 13bcc <tls_interface_listen+0xec>
   13b0e:	199a      	adds	r2, r3, r6
   13b10:	f819 2022 	ldrb.w	r2, [r9, r2, lsl #2]
   13b14:	2a01      	cmp	r2, #1
   13b16:	d155      	bne.n	13bc4 <tls_interface_listen+0xe4>
   13b18:	2201      	movs	r2, #1
   13b1a:	4433      	add	r3, r6
   13b1c:	009d      	lsls	r5, r3, #2
   13b1e:	f809 2005 	strb.w	r2, [r9, r5]
   13b22:	69a1      	ldr	r1, [r4, #24]
   13b24:	2300      	movs	r3, #0
   13b26:	f247 0281 	movw	r2, #28801	; 0x7081
   13b2a:	4630      	mov	r0, r6
   13b2c:	f8d4 8000 	ldr.w	r8, [r4]
   13b30:	f003 fa10 	bl	16f54 <ip_interface_request_create>
   13b34:	4682      	mov	sl, r0
   13b36:	2800      	cmp	r0, #0
   13b38:	d042      	beq.n	13bc0 <tls_interface_listen+0xe0>
   13b3a:	eb09 0105 	add.w	r1, r9, r5
   13b3e:	2224      	movs	r2, #36	; 0x24
   13b40:	3014      	adds	r0, #20
   13b42:	f009 fafc 	bl	1d13e <memcpy>
   13b46:	f8da 3008 	ldr.w	r3, [sl, #8]
   13b4a:	4651      	mov	r1, sl
   13b4c:	3324      	adds	r3, #36	; 0x24
   13b4e:	f8ca 3008 	str.w	r3, [sl, #8]
   13b52:	6822      	ldr	r2, [r4, #0]
   13b54:	4643      	mov	r3, r8
   13b56:	0c12      	lsrs	r2, r2, #16
   13b58:	0412      	lsls	r2, r2, #16
   13b5a:	f042 020a 	orr.w	r2, r2, #10
   13b5e:	6022      	str	r2, [r4, #0]
   13b60:	4620      	mov	r0, r4
   13b62:	f247 0281 	movw	r2, #28801	; 0x7081
   13b66:	f003 fa15 	bl	16f94 <ip_interface_request_send>
   13b6a:	b9e0      	cbnz	r0, 13ba6 <tls_interface_listen+0xc6>
   13b6c:	6823      	ldr	r3, [r4, #0]
   13b6e:	00db      	lsls	r3, r3, #3
   13b70:	d40e      	bmi.n	13b90 <tls_interface_listen+0xb0>
   13b72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13b76:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13b7a:	210b      	movs	r1, #11
   13b7c:	4630      	mov	r0, r6
   13b7e:	f003 fa1d 	bl	16fbc <ip_interface_wait>
   13b82:	b160      	cbz	r0, 13b9e <tls_interface_listen+0xbe>
   13b84:	2800      	cmp	r0, #0
   13b86:	f8c4 8000 	str.w	r8, [r4]
   13b8a:	dc02      	bgt.n	13b92 <tls_interface_listen+0xb2>
   13b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13b90:	2073      	movs	r0, #115	; 0x73
   13b92:	f7fd fc87 	bl	114a4 <bsd_os_errno_set>
   13b96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13b9e:	4639      	mov	r1, r7
   13ba0:	4630      	mov	r0, r6
   13ba2:	f003 fef9 	bl	17998 <ip_interface_listen>
   13ba6:	2800      	cmp	r0, #0
   13ba8:	dcf3      	bgt.n	13b92 <tls_interface_listen+0xb2>
   13baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13bae:	00f3      	lsls	r3, r6, #3
   13bb0:	f8df 9018 	ldr.w	r9, [pc, #24]	; 13bcc <tls_interface_listen+0xec>
   13bb4:	199a      	adds	r2, r3, r6
   13bb6:	f819 2022 	ldrb.w	r2, [r9, r2, lsl #2]
   13bba:	2a02      	cmp	r2, #2
   13bbc:	d1a0      	bne.n	13b00 <tls_interface_listen+0x20>
   13bbe:	e7ab      	b.n	13b18 <tls_interface_listen+0x38>
   13bc0:	200c      	movs	r0, #12
   13bc2:	e7e6      	b.n	13b92 <tls_interface_listen+0xb2>
   13bc4:	202d      	movs	r0, #45	; 0x2d
   13bc6:	e7e4      	b.n	13b92 <tls_interface_listen+0xb2>
   13bc8:	2009      	movs	r0, #9
   13bca:	e7e2      	b.n	13b92 <tls_interface_listen+0xb2>
   13bcc:	20020664 	.word	0x20020664

00013bd0 <tls_interface_accept>:
   13bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13bd2:	460c      	mov	r4, r1
   13bd4:	4616      	mov	r6, r2
   13bd6:	461f      	mov	r7, r3
   13bd8:	4605      	mov	r5, r0
   13bda:	f004 fde1 	bl	187a0 <interface_socket_from_handle_get>
   13bde:	2800      	cmp	r0, #0
   13be0:	d03b      	beq.n	13c5a <tls_interface_accept+0x8a>
   13be2:	6800      	ldr	r0, [r0, #0]
   13be4:	b280      	uxth	r0, r0
   13be6:	2806      	cmp	r0, #6
   13be8:	d137      	bne.n	13c5a <tls_interface_accept+0x8a>
   13bea:	4621      	mov	r1, r4
   13bec:	463b      	mov	r3, r7
   13bee:	4632      	mov	r2, r6
   13bf0:	4628      	mov	r0, r5
   13bf2:	f003 ff47 	bl	17a84 <ip_interface_accept>
   13bf6:	4604      	mov	r4, r0
   13bf8:	b118      	cbz	r0, 13c02 <tls_interface_accept+0x32>
   13bfa:	2c00      	cmp	r4, #0
   13bfc:	dc2e      	bgt.n	13c5c <tls_interface_accept+0x8c>
   13bfe:	4620      	mov	r0, r4
   13c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13c02:	4628      	mov	r0, r5
   13c04:	f004 fdcc 	bl	187a0 <interface_socket_from_handle_get>
   13c08:	6803      	ldr	r3, [r0, #0]
   13c0a:	4f18      	ldr	r7, [pc, #96]	; (13c6c <tls_interface_accept+0x9c>)
   13c0c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   13c10:	6003      	str	r3, [r0, #0]
   13c12:	6803      	ldr	r3, [r0, #0]
   13c14:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   13c18:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   13c1c:	4606      	mov	r6, r0
   13c1e:	6003      	str	r3, [r0, #0]
   13c20:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   13c24:	2224      	movs	r2, #36	; 0x24
   13c26:	4638      	mov	r0, r7
   13c28:	f009 fa89 	bl	1d13e <memcpy>
   13c2c:	2302      	movs	r3, #2
   13c2e:	703b      	strb	r3, [r7, #0]
   13c30:	6833      	ldr	r3, [r6, #0]
   13c32:	4620      	mov	r0, r4
   13c34:	0c1b      	lsrs	r3, r3, #16
   13c36:	041b      	lsls	r3, r3, #16
   13c38:	f043 030b 	orr.w	r3, r3, #11
   13c3c:	6033      	str	r3, [r6, #0]
   13c3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13c46:	210c      	movs	r1, #12
   13c48:	f003 f9b8 	bl	16fbc <ip_interface_wait>
   13c4c:	4604      	mov	r4, r0
   13c4e:	2800      	cmp	r0, #0
   13c50:	d0d5      	beq.n	13bfe <tls_interface_accept+0x2e>
   13c52:	2000      	movs	r0, #0
   13c54:	f003 fa8a 	bl	1716c <ip_interface_close>
   13c58:	e7cf      	b.n	13bfa <tls_interface_accept+0x2a>
   13c5a:	2409      	movs	r4, #9
   13c5c:	4620      	mov	r0, r4
   13c5e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   13c62:	f7fd fc1f 	bl	114a4 <bsd_os_errno_set>
   13c66:	4620      	mov	r0, r4
   13c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13c6a:	bf00      	nop
   13c6c:	20020664 	.word	0x20020664

00013c70 <tls_interface_setopt>:
   13c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13c74:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   13c78:	9f06      	ldr	r7, [sp, #24]
   13c7a:	d11d      	bne.n	13cb8 <tls_interface_setopt+0x48>
   13c7c:	461c      	mov	r4, r3
   13c7e:	b1c3      	cbz	r3, 13cb2 <tls_interface_setopt+0x42>
   13c80:	b1bf      	cbz	r7, 13cb2 <tls_interface_setopt+0x42>
   13c82:	4605      	mov	r5, r0
   13c84:	4616      	mov	r6, r2
   13c86:	f004 fd8b 	bl	187a0 <interface_socket_from_handle_get>
   13c8a:	b1c8      	cbz	r0, 13cc0 <tls_interface_setopt+0x50>
   13c8c:	6803      	ldr	r3, [r0, #0]
   13c8e:	b29b      	uxth	r3, r3
   13c90:	2b02      	cmp	r3, #2
   13c92:	d007      	beq.n	13ca4 <tls_interface_setopt+0x34>
   13c94:	6803      	ldr	r3, [r0, #0]
   13c96:	b29b      	uxth	r3, r3
   13c98:	2b04      	cmp	r3, #4
   13c9a:	d003      	beq.n	13ca4 <tls_interface_setopt+0x34>
   13c9c:	6803      	ldr	r3, [r0, #0]
   13c9e:	b29b      	uxth	r3, r3
   13ca0:	2b05      	cmp	r3, #5
   13ca2:	d10d      	bne.n	13cc0 <tls_interface_setopt+0x50>
   13ca4:	3e01      	subs	r6, #1
   13ca6:	2e03      	cmp	r6, #3
   13ca8:	d851      	bhi.n	13d4e <tls_interface_setopt+0xde>
   13caa:	e8df f006 	tbb	[pc, r6]
   13cae:	3225      	.short	0x3225
   13cb0:	0b18      	.short	0x0b18
   13cb2:	200e      	movs	r0, #14
   13cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13cb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13cbc:	f004 b81a 	b.w	17cf4 <ip_interface_setopt>
   13cc0:	2009      	movs	r0, #9
   13cc2:	e7f7      	b.n	13cb4 <tls_interface_setopt+0x44>
   13cc4:	2f04      	cmp	r7, #4
   13cc6:	d139      	bne.n	13d3c <tls_interface_setopt+0xcc>
   13cc8:	6823      	ldr	r3, [r4, #0]
   13cca:	2b02      	cmp	r3, #2
   13ccc:	d836      	bhi.n	13d3c <tls_interface_setopt+0xcc>
   13cce:	4a21      	ldr	r2, [pc, #132]	; (13d54 <tls_interface_setopt+0xe4>)
   13cd0:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   13cd4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   13cd8:	70ab      	strb	r3, [r5, #2]
   13cda:	2000      	movs	r0, #0
   13cdc:	e7ea      	b.n	13cb4 <tls_interface_setopt+0x44>
   13cde:	2f01      	cmp	r7, #1
   13ce0:	d12c      	bne.n	13d3c <tls_interface_setopt+0xcc>
   13ce2:	7823      	ldrb	r3, [r4, #0]
   13ce4:	2b01      	cmp	r3, #1
   13ce6:	d829      	bhi.n	13d3c <tls_interface_setopt+0xcc>
   13ce8:	4a1a      	ldr	r2, [pc, #104]	; (13d54 <tls_interface_setopt+0xe4>)
   13cea:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   13cee:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   13cf2:	7053      	strb	r3, [r2, #1]
   13cf4:	2000      	movs	r0, #0
   13cf6:	e7dd      	b.n	13cb4 <tls_interface_setopt+0x44>
   13cf8:	2f04      	cmp	r7, #4
   13cfa:	d11f      	bne.n	13d3c <tls_interface_setopt+0xcc>
   13cfc:	6820      	ldr	r0, [r4, #0]
   13cfe:	b1f8      	cbz	r0, 13d40 <tls_interface_setopt+0xd0>
   13d00:	2801      	cmp	r0, #1
   13d02:	d11b      	bne.n	13d3c <tls_interface_setopt+0xcc>
   13d04:	4b13      	ldr	r3, [pc, #76]	; (13d54 <tls_interface_setopt+0xe4>)
   13d06:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   13d0a:	f803 0025 	strb.w	r0, [r3, r5, lsl #2]
   13d0e:	2000      	movs	r0, #0
   13d10:	e7d0      	b.n	13cb4 <tls_interface_setopt+0x44>
   13d12:	ea5f 0c97 	movs.w	ip, r7, lsr #2
   13d16:	d011      	beq.n	13d3c <tls_interface_setopt+0xcc>
   13d18:	f017 0603 	ands.w	r6, r7, #3
   13d1c:	d10e      	bne.n	13d3c <tls_interface_setopt+0xcc>
   13d1e:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   13d22:	00ad      	lsls	r5, r5, #2
   13d24:	4b0b      	ldr	r3, [pc, #44]	; (13d54 <tls_interface_setopt+0xe4>)
   13d26:	1d28      	adds	r0, r5, #4
   13d28:	4418      	add	r0, r3
   13d2a:	442b      	add	r3, r5
   13d2c:	463a      	mov	r2, r7
   13d2e:	4621      	mov	r1, r4
   13d30:	f883 c003 	strb.w	ip, [r3, #3]
   13d34:	f009 fa03 	bl	1d13e <memcpy>
   13d38:	4630      	mov	r0, r6
   13d3a:	e7bb      	b.n	13cb4 <tls_interface_setopt+0x44>
   13d3c:	2016      	movs	r0, #22
   13d3e:	e7b9      	b.n	13cb4 <tls_interface_setopt+0x44>
   13d40:	2202      	movs	r2, #2
   13d42:	4b04      	ldr	r3, [pc, #16]	; (13d54 <tls_interface_setopt+0xe4>)
   13d44:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   13d48:	f803 2025 	strb.w	r2, [r3, r5, lsl #2]
   13d4c:	e7b2      	b.n	13cb4 <tls_interface_setopt+0x44>
   13d4e:	202a      	movs	r0, #42	; 0x2a
   13d50:	e7b0      	b.n	13cb4 <tls_interface_setopt+0x44>
   13d52:	bf00      	nop
   13d54:	20020664 	.word	0x20020664

00013d58 <tls_interface_getopt>:
   13d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13d5c:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   13d60:	9f06      	ldr	r7, [sp, #24]
   13d62:	d112      	bne.n	13d8a <tls_interface_getopt+0x32>
   13d64:	461d      	mov	r5, r3
   13d66:	b16b      	cbz	r3, 13d84 <tls_interface_getopt+0x2c>
   13d68:	b167      	cbz	r7, 13d84 <tls_interface_getopt+0x2c>
   13d6a:	4606      	mov	r6, r0
   13d6c:	4614      	mov	r4, r2
   13d6e:	f004 fd17 	bl	187a0 <interface_socket_from_handle_get>
   13d72:	2800      	cmp	r0, #0
   13d74:	d04f      	beq.n	13e16 <tls_interface_getopt+0xbe>
   13d76:	3c01      	subs	r4, #1
   13d78:	2c03      	cmp	r4, #3
   13d7a:	d852      	bhi.n	13e22 <tls_interface_getopt+0xca>
   13d7c:	e8df f004 	tbb	[pc, r4]
   13d80:	09152139 	.word	0x09152139
   13d84:	200e      	movs	r0, #14
   13d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13d8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13d8e:	f004 b86d 	b.w	17e6c <ip_interface_getopt>
   13d92:	683b      	ldr	r3, [r7, #0]
   13d94:	2b04      	cmp	r3, #4
   13d96:	d13c      	bne.n	13e12 <tls_interface_getopt+0xba>
   13d98:	4b23      	ldr	r3, [pc, #140]	; (13e28 <tls_interface_getopt+0xd0>)
   13d9a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   13d9e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   13da2:	78b3      	ldrb	r3, [r6, #2]
   13da4:	2000      	movs	r0, #0
   13da6:	602b      	str	r3, [r5, #0]
   13da8:	e7ed      	b.n	13d86 <tls_interface_getopt+0x2e>
   13daa:	683b      	ldr	r3, [r7, #0]
   13dac:	2b04      	cmp	r3, #4
   13dae:	d130      	bne.n	13e12 <tls_interface_getopt+0xba>
   13db0:	4b1d      	ldr	r3, [pc, #116]	; (13e28 <tls_interface_getopt+0xd0>)
   13db2:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   13db6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   13dba:	7873      	ldrb	r3, [r6, #1]
   13dbc:	2000      	movs	r0, #0
   13dbe:	602b      	str	r3, [r5, #0]
   13dc0:	e7e1      	b.n	13d86 <tls_interface_getopt+0x2e>
   13dc2:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   13dc6:	4918      	ldr	r1, [pc, #96]	; (13e28 <tls_interface_getopt+0xd0>)
   13dc8:	683b      	ldr	r3, [r7, #0]
   13dca:	00b6      	lsls	r6, r6, #2
   13dcc:	198a      	adds	r2, r1, r6
   13dce:	f013 0403 	ands.w	r4, r3, #3
   13dd2:	78d0      	ldrb	r0, [r2, #3]
   13dd4:	d121      	bne.n	13e1a <tls_interface_getopt+0xc2>
   13dd6:	089b      	lsrs	r3, r3, #2
   13dd8:	4283      	cmp	r3, r0
   13dda:	bf28      	it	cs
   13ddc:	4603      	movcs	r3, r0
   13dde:	009a      	lsls	r2, r3, #2
   13de0:	b1db      	cbz	r3, 13e1a <tls_interface_getopt+0xc2>
   13de2:	3604      	adds	r6, #4
   13de4:	4431      	add	r1, r6
   13de6:	603a      	str	r2, [r7, #0]
   13de8:	4628      	mov	r0, r5
   13dea:	f009 f9a8 	bl	1d13e <memcpy>
   13dee:	4620      	mov	r0, r4
   13df0:	e7c9      	b.n	13d86 <tls_interface_getopt+0x2e>
   13df2:	683b      	ldr	r3, [r7, #0]
   13df4:	2b04      	cmp	r3, #4
   13df6:	d10c      	bne.n	13e12 <tls_interface_getopt+0xba>
   13df8:	4b0b      	ldr	r3, [pc, #44]	; (13e28 <tls_interface_getopt+0xd0>)
   13dfa:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   13dfe:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   13e02:	2000      	movs	r0, #0
   13e04:	f1a3 0301 	sub.w	r3, r3, #1
   13e08:	fab3 f383 	clz	r3, r3
   13e0c:	095b      	lsrs	r3, r3, #5
   13e0e:	602b      	str	r3, [r5, #0]
   13e10:	e7b9      	b.n	13d86 <tls_interface_getopt+0x2e>
   13e12:	2016      	movs	r0, #22
   13e14:	e7b7      	b.n	13d86 <tls_interface_getopt+0x2e>
   13e16:	2009      	movs	r0, #9
   13e18:	e7b5      	b.n	13d86 <tls_interface_getopt+0x2e>
   13e1a:	2800      	cmp	r0, #0
   13e1c:	d1f9      	bne.n	13e12 <tls_interface_getopt+0xba>
   13e1e:	6038      	str	r0, [r7, #0]
   13e20:	e7b1      	b.n	13d86 <tls_interface_getopt+0x2e>
   13e22:	202a      	movs	r0, #42	; 0x2a
   13e24:	e7af      	b.n	13d86 <tls_interface_getopt+0x2e>
   13e26:	bf00      	nop
   13e28:	20020664 	.word	0x20020664

00013e2c <tls_rpc_ip_event_handler>:
   13e2c:	b538      	push	{r3, r4, r5, lr}
   13e2e:	f248 0581 	movw	r5, #32897	; 0x8081
   13e32:	42ab      	cmp	r3, r5
   13e34:	460c      	mov	r4, r1
   13e36:	d053      	beq.n	13ee0 <tls_rpc_ip_event_handler+0xb4>
   13e38:	f249 0182 	movw	r1, #36994	; 0x9082
   13e3c:	428b      	cmp	r3, r1
   13e3e:	d02d      	beq.n	13e9c <tls_rpc_ip_event_handler+0x70>
   13e40:	f248 0102 	movw	r1, #32770	; 0x8002
   13e44:	428b      	cmp	r3, r1
   13e46:	d001      	beq.n	13e4c <tls_rpc_ip_event_handler+0x20>
   13e48:	2001      	movs	r0, #1
   13e4a:	bd38      	pop	{r3, r4, r5, pc}
   13e4c:	2c00      	cmp	r4, #0
   13e4e:	d0fb      	beq.n	13e48 <tls_rpc_ip_event_handler+0x1c>
   13e50:	6963      	ldr	r3, [r4, #20]
   13e52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   13e56:	d002      	beq.n	13e5e <tls_rpc_ip_event_handler+0x32>
   13e58:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   13e5c:	d1f4      	bne.n	13e48 <tls_rpc_ip_event_handler+0x1c>
   13e5e:	6823      	ldr	r3, [r4, #0]
   13e60:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   13e64:	6023      	str	r3, [r4, #0]
   13e66:	6955      	ldr	r5, [r2, #20]
   13e68:	2d00      	cmp	r5, #0
   13e6a:	d148      	bne.n	13efe <tls_rpc_ip_event_handler+0xd2>
   13e6c:	6823      	ldr	r3, [r4, #0]
   13e6e:	0c1b      	lsrs	r3, r3, #16
   13e70:	041b      	lsls	r3, r3, #16
   13e72:	f043 0305 	orr.w	r3, r3, #5
   13e76:	6023      	str	r3, [r4, #0]
   13e78:	6823      	ldr	r3, [r4, #0]
   13e7a:	00da      	lsls	r2, r3, #3
   13e7c:	d50c      	bpl.n	13e98 <tls_rpc_ip_event_handler+0x6c>
   13e7e:	4b25      	ldr	r3, [pc, #148]	; (13f14 <tls_rpc_ip_event_handler+0xe8>)
   13e80:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
   13e84:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   13e88:	2b02      	cmp	r3, #2
   13e8a:	d105      	bne.n	13e98 <tls_rpc_ip_event_handler+0x6c>
   13e8c:	4621      	mov	r1, r4
   13e8e:	f7ff fc21 	bl	136d4 <secure_client_socket>
   13e92:	b108      	cbz	r0, 13e98 <tls_rpc_ip_event_handler+0x6c>
   13e94:	2873      	cmp	r0, #115	; 0x73
   13e96:	d135      	bne.n	13f04 <tls_rpc_ip_event_handler+0xd8>
   13e98:	2000      	movs	r0, #0
   13e9a:	bd38      	pop	{r3, r4, r5, pc}
   13e9c:	2c00      	cmp	r4, #0
   13e9e:	d0fb      	beq.n	13e98 <tls_rpc_ip_event_handler+0x6c>
   13ea0:	6823      	ldr	r3, [r4, #0]
   13ea2:	b29b      	uxth	r3, r3
   13ea4:	2b0b      	cmp	r3, #11
   13ea6:	d1f7      	bne.n	13e98 <tls_rpc_ip_event_handler+0x6c>
   13ea8:	6910      	ldr	r0, [r2, #16]
   13eaa:	bb48      	cbnz	r0, 13f00 <tls_rpc_ip_event_handler+0xd4>
   13eac:	6823      	ldr	r3, [r4, #0]
   13eae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   13eb2:	6023      	str	r3, [r4, #0]
   13eb4:	6823      	ldr	r3, [r4, #0]
   13eb6:	00db      	lsls	r3, r3, #3
   13eb8:	d5ee      	bpl.n	13e98 <tls_rpc_ip_event_handler+0x6c>
   13eba:	6823      	ldr	r3, [r4, #0]
   13ebc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   13ec0:	6023      	str	r3, [r4, #0]
   13ec2:	6823      	ldr	r3, [r4, #0]
   13ec4:	0c1b      	lsrs	r3, r3, #16
   13ec6:	041b      	lsls	r3, r3, #16
   13ec8:	f043 030c 	orr.w	r3, r3, #12
   13ecc:	6023      	str	r3, [r4, #0]
   13ece:	6823      	ldr	r3, [r4, #0]
   13ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13ed4:	6023      	str	r3, [r4, #0]
   13ed6:	6823      	ldr	r3, [r4, #0]
   13ed8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   13edc:	6023      	str	r3, [r4, #0]
   13ede:	bd38      	pop	{r3, r4, r5, pc}
   13ee0:	2900      	cmp	r1, #0
   13ee2:	d0d9      	beq.n	13e98 <tls_rpc_ip_event_handler+0x6c>
   13ee4:	680b      	ldr	r3, [r1, #0]
   13ee6:	b29b      	uxth	r3, r3
   13ee8:	2b0a      	cmp	r3, #10
   13eea:	d1d5      	bne.n	13e98 <tls_rpc_ip_event_handler+0x6c>
   13eec:	6950      	ldr	r0, [r2, #20]
   13eee:	b938      	cbnz	r0, 13f00 <tls_rpc_ip_event_handler+0xd4>
   13ef0:	680b      	ldr	r3, [r1, #0]
   13ef2:	0c1b      	lsrs	r3, r3, #16
   13ef4:	041b      	lsls	r3, r3, #16
   13ef6:	f043 030b 	orr.w	r3, r3, #11
   13efa:	600b      	str	r3, [r1, #0]
   13efc:	bd38      	pop	{r3, r4, r5, pc}
   13efe:	4628      	mov	r0, r5
   13f00:	f003 f81e 	bl	16f40 <rpc_error_to_nrf_bsd_error>
   13f04:	6060      	str	r0, [r4, #4]
   13f06:	6823      	ldr	r3, [r4, #0]
   13f08:	2000      	movs	r0, #0
   13f0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   13f0e:	6023      	str	r3, [r4, #0]
   13f10:	bd38      	pop	{r3, r4, r5, pc}
   13f12:	bf00      	nop
   13f14:	20020664 	.word	0x20020664

00013f18 <rpc_dfu_event_handler>:
   13f18:	b508      	push	{r3, lr}
   13f1a:	4a08      	ldr	r2, [pc, #32]	; (13f3c <rpc_dfu_event_handler+0x24>)
   13f1c:	68c1      	ldr	r1, [r0, #12]
   13f1e:	8812      	ldrh	r2, [r2, #0]
   13f20:	4603      	mov	r3, r0
   13f22:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   13f26:	d005      	beq.n	13f34 <rpc_dfu_event_handler+0x1c>
   13f28:	6800      	ldr	r0, [r0, #0]
   13f2a:	b110      	cbz	r0, 13f32 <rpc_dfu_event_handler+0x1a>
   13f2c:	f7fe ff9a 	bl	12e64 <rpc_dfu_client_data_free>
   13f30:	2000      	movs	r0, #0
   13f32:	bd08      	pop	{r3, pc}
   13f34:	4a02      	ldr	r2, [pc, #8]	; (13f40 <rpc_dfu_event_handler+0x28>)
   13f36:	2001      	movs	r0, #1
   13f38:	6013      	str	r3, [r2, #0]
   13f3a:	bd08      	pop	{r3, pc}
   13f3c:	20024e44 	.word	0x20024e44
   13f40:	20020790 	.word	0x20020790

00013f44 <mfu_interface_init>:
   13f44:	2300      	movs	r3, #0
   13f46:	b510      	push	{r4, lr}
   13f48:	4808      	ldr	r0, [pc, #32]	; (13f6c <mfu_interface_init+0x28>)
   13f4a:	4909      	ldr	r1, [pc, #36]	; (13f70 <mfu_interface_init+0x2c>)
   13f4c:	4a09      	ldr	r2, [pc, #36]	; (13f74 <mfu_interface_init+0x30>)
   13f4e:	4c0a      	ldr	r4, [pc, #40]	; (13f78 <mfu_interface_init+0x34>)
   13f50:	8003      	strh	r3, [r0, #0]
   13f52:	600b      	str	r3, [r1, #0]
   13f54:	6013      	str	r3, [r2, #0]
   13f56:	6023      	str	r3, [r4, #0]
   13f58:	f7fe ff4e 	bl	12df8 <rpc_dfu_client_init>
   13f5c:	b910      	cbnz	r0, 13f64 <mfu_interface_init+0x20>
   13f5e:	2301      	movs	r3, #1
   13f60:	6023      	str	r3, [r4, #0]
   13f62:	bd10      	pop	{r4, pc}
   13f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13f68:	bd10      	pop	{r4, pc}
   13f6a:	bf00      	nop
   13f6c:	20024e44 	.word	0x20024e44
   13f70:	20020790 	.word	0x20020790
   13f74:	2002078c 	.word	0x2002078c
   13f78:	20020784 	.word	0x20020784

00013f7c <mfu_interface_open>:
   13f7c:	2801      	cmp	r0, #1
   13f7e:	b508      	push	{r3, lr}
   13f80:	d10b      	bne.n	13f9a <mfu_interface_open+0x1e>
   13f82:	f240 2303 	movw	r3, #515	; 0x203
   13f86:	429a      	cmp	r2, r3
   13f88:	d107      	bne.n	13f9a <mfu_interface_open+0x1e>
   13f8a:	4b09      	ldr	r3, [pc, #36]	; (13fb0 <mfu_interface_open+0x34>)
   13f8c:	681a      	ldr	r2, [r3, #0]
   13f8e:	2a01      	cmp	r2, #1
   13f90:	d109      	bne.n	13fa6 <mfu_interface_open+0x2a>
   13f92:	2202      	movs	r2, #2
   13f94:	601a      	str	r2, [r3, #0]
   13f96:	4807      	ldr	r0, [pc, #28]	; (13fb4 <mfu_interface_open+0x38>)
   13f98:	bd08      	pop	{r3, pc}
   13f9a:	2016      	movs	r0, #22
   13f9c:	f7fd fa82 	bl	114a4 <bsd_os_errno_set>
   13fa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13fa4:	bd08      	pop	{r3, pc}
   13fa6:	f7fd fa7d 	bl	114a4 <bsd_os_errno_set>
   13faa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13fae:	bd08      	pop	{r3, pc}
   13fb0:	20020784 	.word	0x20020784
   13fb4:	49765432 	.word	0x49765432

00013fb8 <mfu_interface_close>:
   13fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   13fba:	4c32      	ldr	r4, [pc, #200]	; (14084 <mfu_interface_close+0xcc>)
   13fbc:	b083      	sub	sp, #12
   13fbe:	6823      	ldr	r3, [r4, #0]
   13fc0:	1e9a      	subs	r2, r3, #2
   13fc2:	2a01      	cmp	r2, #1
   13fc4:	d857      	bhi.n	14076 <mfu_interface_close+0xbe>
   13fc6:	2b03      	cmp	r3, #3
   13fc8:	d004      	beq.n	13fd4 <mfu_interface_close+0x1c>
   13fca:	2301      	movs	r3, #1
   13fcc:	2000      	movs	r0, #0
   13fce:	6023      	str	r3, [r4, #0]
   13fd0:	b003      	add	sp, #12
   13fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13fd4:	2100      	movs	r1, #0
   13fd6:	4668      	mov	r0, sp
   13fd8:	f7fe ff14 	bl	12e04 <rpc_dfu_client_request_alloc>
   13fdc:	4603      	mov	r3, r0
   13fde:	2800      	cmp	r0, #0
   13fe0:	d13d      	bne.n	1405e <mfu_interface_close+0xa6>
   13fe2:	2104      	movs	r1, #4
   13fe4:	4e28      	ldr	r6, [pc, #160]	; (14088 <mfu_interface_close+0xd0>)
   13fe6:	9800      	ldr	r0, [sp, #0]
   13fe8:	8832      	ldrh	r2, [r6, #0]
   13fea:	7201      	strb	r1, [r0, #8]
   13fec:	3201      	adds	r2, #1
   13fee:	b292      	uxth	r2, r2
   13ff0:	0411      	lsls	r1, r2, #16
   13ff2:	f041 0106 	orr.w	r1, r1, #6
   13ff6:	4d25      	ldr	r5, [pc, #148]	; (1408c <mfu_interface_close+0xd4>)
   13ff8:	60c1      	str	r1, [r0, #12]
   13ffa:	7103      	strb	r3, [r0, #4]
   13ffc:	7143      	strb	r3, [r0, #5]
   13ffe:	7183      	strb	r3, [r0, #6]
   14000:	71c3      	strb	r3, [r0, #7]
   14002:	7243      	strb	r3, [r0, #9]
   14004:	7283      	strb	r3, [r0, #10]
   14006:	72c3      	strb	r3, [r0, #11]
   14008:	2106      	movs	r1, #6
   1400a:	8032      	strh	r2, [r6, #0]
   1400c:	602b      	str	r3, [r5, #0]
   1400e:	f7fe ff0d 	bl	12e2c <rpc_dfu_client_request_send>
   14012:	b9d8      	cbnz	r0, 1404c <mfu_interface_close+0x94>
   14014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14018:	ae02      	add	r6, sp, #8
   1401a:	4627      	mov	r7, r4
   1401c:	f846 3d04 	str.w	r3, [r6, #-4]!
   14020:	e004      	b.n	1402c <mfu_interface_close+0x74>
   14022:	4631      	mov	r1, r6
   14024:	4638      	mov	r0, r7
   14026:	f7fd f9a9 	bl	1137c <bsd_os_timedwait>
   1402a:	b9f0      	cbnz	r0, 1406a <mfu_interface_close+0xb2>
   1402c:	6828      	ldr	r0, [r5, #0]
   1402e:	2800      	cmp	r0, #0
   14030:	d0f7      	beq.n	14022 <mfu_interface_close+0x6a>
   14032:	6905      	ldr	r5, [r0, #16]
   14034:	f7fe ff0e 	bl	12e54 <rpc_dfu_client_message_free>
   14038:	2d00      	cmp	r5, #0
   1403a:	d0c6      	beq.n	13fca <mfu_interface_close+0x12>
   1403c:	4b14      	ldr	r3, [pc, #80]	; (14090 <mfu_interface_close+0xd8>)
   1403e:	2008      	movs	r0, #8
   14040:	601d      	str	r5, [r3, #0]
   14042:	f7fd fa2f 	bl	114a4 <bsd_os_errno_set>
   14046:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1404a:	e7c1      	b.n	13fd0 <mfu_interface_close+0x18>
   1404c:	9800      	ldr	r0, [sp, #0]
   1404e:	6803      	ldr	r3, [r0, #0]
   14050:	b11b      	cbz	r3, 1405a <mfu_interface_close+0xa2>
   14052:	4618      	mov	r0, r3
   14054:	f7fe ff06 	bl	12e64 <rpc_dfu_client_data_free>
   14058:	9800      	ldr	r0, [sp, #0]
   1405a:	f7fe fefb 	bl	12e54 <rpc_dfu_client_message_free>
   1405e:	200c      	movs	r0, #12
   14060:	f7fd fa20 	bl	114a4 <bsd_os_errno_set>
   14064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14068:	e7b2      	b.n	13fd0 <mfu_interface_close+0x18>
   1406a:	203c      	movs	r0, #60	; 0x3c
   1406c:	f7fd fa1a 	bl	114a4 <bsd_os_errno_set>
   14070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14074:	e7ac      	b.n	13fd0 <mfu_interface_close+0x18>
   14076:	2001      	movs	r0, #1
   14078:	f7fd fa14 	bl	114a4 <bsd_os_errno_set>
   1407c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14080:	e7a6      	b.n	13fd0 <mfu_interface_close+0x18>
   14082:	bf00      	nop
   14084:	20020784 	.word	0x20020784
   14088:	20024e44 	.word	0x20024e44
   1408c:	20020790 	.word	0x20020790
   14090:	20020788 	.word	0x20020788

00014094 <mfu_interface_sendto>:
   14094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14098:	4e5a      	ldr	r6, [pc, #360]	; (14204 <mfu_interface_sendto+0x170>)
   1409a:	4615      	mov	r5, r2
   1409c:	6833      	ldr	r3, [r6, #0]
   1409e:	b082      	sub	sp, #8
   140a0:	1e9a      	subs	r2, r3, #2
   140a2:	2a01      	cmp	r2, #1
   140a4:	f200 80a7 	bhi.w	141f6 <mfu_interface_sendto+0x162>
   140a8:	460f      	mov	r7, r1
   140aa:	2900      	cmp	r1, #0
   140ac:	f000 809d 	beq.w	141ea <mfu_interface_sendto+0x156>
   140b0:	2d00      	cmp	r5, #0
   140b2:	f000 809a 	beq.w	141ea <mfu_interface_sendto+0x156>
   140b6:	2b02      	cmp	r3, #2
   140b8:	46e8      	mov	r8, sp
   140ba:	d04e      	beq.n	1415a <mfu_interface_sendto+0xc6>
   140bc:	4640      	mov	r0, r8
   140be:	4629      	mov	r1, r5
   140c0:	f7fe fea0 	bl	12e04 <rpc_dfu_client_request_alloc>
   140c4:	4606      	mov	r6, r0
   140c6:	b140      	cbz	r0, 140da <mfu_interface_sendto+0x46>
   140c8:	200c      	movs	r0, #12
   140ca:	f7fd f9eb 	bl	114a4 <bsd_os_errno_set>
   140ce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   140d2:	4628      	mov	r0, r5
   140d4:	b002      	add	sp, #8
   140d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   140da:	9b00      	ldr	r3, [sp, #0]
   140dc:	4639      	mov	r1, r7
   140de:	6818      	ldr	r0, [r3, #0]
   140e0:	462a      	mov	r2, r5
   140e2:	f009 f82c 	bl	1d13e <memcpy>
   140e6:	2104      	movs	r1, #4
   140e8:	4c47      	ldr	r4, [pc, #284]	; (14208 <mfu_interface_sendto+0x174>)
   140ea:	9800      	ldr	r0, [sp, #0]
   140ec:	8823      	ldrh	r3, [r4, #0]
   140ee:	6045      	str	r5, [r0, #4]
   140f0:	3301      	adds	r3, #1
   140f2:	b29b      	uxth	r3, r3
   140f4:	041a      	lsls	r2, r3, #16
   140f6:	8023      	strh	r3, [r4, #0]
   140f8:	430a      	orrs	r2, r1
   140fa:	4c44      	ldr	r4, [pc, #272]	; (1420c <mfu_interface_sendto+0x178>)
   140fc:	60c2      	str	r2, [r0, #12]
   140fe:	7246      	strb	r6, [r0, #9]
   14100:	7286      	strb	r6, [r0, #10]
   14102:	72c6      	strb	r6, [r0, #11]
   14104:	7201      	strb	r1, [r0, #8]
   14106:	6026      	str	r6, [r4, #0]
   14108:	f7fe fe90 	bl	12e2c <rpc_dfu_client_request_send>
   1410c:	2800      	cmp	r0, #0
   1410e:	d162      	bne.n	141d6 <mfu_interface_sendto+0x142>
   14110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14114:	ae02      	add	r6, sp, #8
   14116:	4f3b      	ldr	r7, [pc, #236]	; (14204 <mfu_interface_sendto+0x170>)
   14118:	f846 3d04 	str.w	r3, [r6, #-4]!
   1411c:	e004      	b.n	14128 <mfu_interface_sendto+0x94>
   1411e:	4631      	mov	r1, r6
   14120:	4638      	mov	r0, r7
   14122:	f7fd f92b 	bl	1137c <bsd_os_timedwait>
   14126:	b978      	cbnz	r0, 14148 <mfu_interface_sendto+0xb4>
   14128:	6820      	ldr	r0, [r4, #0]
   1412a:	2800      	cmp	r0, #0
   1412c:	d0f7      	beq.n	1411e <mfu_interface_sendto+0x8a>
   1412e:	6904      	ldr	r4, [r0, #16]
   14130:	f7fe fe90 	bl	12e54 <rpc_dfu_client_message_free>
   14134:	2c00      	cmp	r4, #0
   14136:	d0cc      	beq.n	140d2 <mfu_interface_sendto+0x3e>
   14138:	4b35      	ldr	r3, [pc, #212]	; (14210 <mfu_interface_sendto+0x17c>)
   1413a:	2008      	movs	r0, #8
   1413c:	601c      	str	r4, [r3, #0]
   1413e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   14142:	f7fd f9af 	bl	114a4 <bsd_os_errno_set>
   14146:	e7c4      	b.n	140d2 <mfu_interface_sendto+0x3e>
   14148:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1414c:	203c      	movs	r0, #60	; 0x3c
   1414e:	f7fd f9a9 	bl	114a4 <bsd_os_errno_set>
   14152:	4628      	mov	r0, r5
   14154:	b002      	add	sp, #8
   14156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1415a:	4640      	mov	r0, r8
   1415c:	2100      	movs	r1, #0
   1415e:	f7fe fe51 	bl	12e04 <rpc_dfu_client_request_alloc>
   14162:	4602      	mov	r2, r0
   14164:	2800      	cmp	r0, #0
   14166:	d1af      	bne.n	140c8 <mfu_interface_sendto+0x34>
   14168:	f04f 0c08 	mov.w	ip, #8
   1416c:	4926      	ldr	r1, [pc, #152]	; (14208 <mfu_interface_sendto+0x174>)
   1416e:	4829      	ldr	r0, [pc, #164]	; (14214 <mfu_interface_sendto+0x180>)
   14170:	880b      	ldrh	r3, [r1, #0]
   14172:	6804      	ldr	r4, [r0, #0]
   14174:	3301      	adds	r3, #1
   14176:	9800      	ldr	r0, [sp, #0]
   14178:	b29b      	uxth	r3, r3
   1417a:	800b      	strh	r3, [r1, #0]
   1417c:	041b      	lsls	r3, r3, #16
   1417e:	f043 0303 	orr.w	r3, r3, #3
   14182:	6104      	str	r4, [r0, #16]
   14184:	4c21      	ldr	r4, [pc, #132]	; (1420c <mfu_interface_sendto+0x178>)
   14186:	60c3      	str	r3, [r0, #12]
   14188:	7102      	strb	r2, [r0, #4]
   1418a:	7142      	strb	r2, [r0, #5]
   1418c:	7182      	strb	r2, [r0, #6]
   1418e:	71c2      	strb	r2, [r0, #7]
   14190:	7242      	strb	r2, [r0, #9]
   14192:	7282      	strb	r2, [r0, #10]
   14194:	72c2      	strb	r2, [r0, #11]
   14196:	f880 c008 	strb.w	ip, [r0, #8]
   1419a:	2103      	movs	r1, #3
   1419c:	6022      	str	r2, [r4, #0]
   1419e:	f7fe fe45 	bl	12e2c <rpc_dfu_client_request_send>
   141a2:	b9c0      	cbnz	r0, 141d6 <mfu_interface_sendto+0x142>
   141a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   141a8:	f10d 0908 	add.w	r9, sp, #8
   141ac:	f849 3d04 	str.w	r3, [r9, #-4]!
   141b0:	46b2      	mov	sl, r6
   141b2:	e005      	b.n	141c0 <mfu_interface_sendto+0x12c>
   141b4:	4649      	mov	r1, r9
   141b6:	4650      	mov	r0, sl
   141b8:	f7fd f8e0 	bl	1137c <bsd_os_timedwait>
   141bc:	2800      	cmp	r0, #0
   141be:	d1c3      	bne.n	14148 <mfu_interface_sendto+0xb4>
   141c0:	6820      	ldr	r0, [r4, #0]
   141c2:	2800      	cmp	r0, #0
   141c4:	d0f6      	beq.n	141b4 <mfu_interface_sendto+0x120>
   141c6:	6904      	ldr	r4, [r0, #16]
   141c8:	f7fe fe44 	bl	12e54 <rpc_dfu_client_message_free>
   141cc:	2c00      	cmp	r4, #0
   141ce:	d1b3      	bne.n	14138 <mfu_interface_sendto+0xa4>
   141d0:	2303      	movs	r3, #3
   141d2:	6033      	str	r3, [r6, #0]
   141d4:	e772      	b.n	140bc <mfu_interface_sendto+0x28>
   141d6:	9800      	ldr	r0, [sp, #0]
   141d8:	6803      	ldr	r3, [r0, #0]
   141da:	b11b      	cbz	r3, 141e4 <mfu_interface_sendto+0x150>
   141dc:	4618      	mov	r0, r3
   141de:	f7fe fe41 	bl	12e64 <rpc_dfu_client_data_free>
   141e2:	9800      	ldr	r0, [sp, #0]
   141e4:	f7fe fe36 	bl	12e54 <rpc_dfu_client_message_free>
   141e8:	e76e      	b.n	140c8 <mfu_interface_sendto+0x34>
   141ea:	2016      	movs	r0, #22
   141ec:	f7fd f95a 	bl	114a4 <bsd_os_errno_set>
   141f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   141f4:	e76d      	b.n	140d2 <mfu_interface_sendto+0x3e>
   141f6:	2001      	movs	r0, #1
   141f8:	f7fd f954 	bl	114a4 <bsd_os_errno_set>
   141fc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   14200:	e767      	b.n	140d2 <mfu_interface_sendto+0x3e>
   14202:	bf00      	nop
   14204:	20020784 	.word	0x20020784
   14208:	20024e44 	.word	0x20024e44
   1420c:	20020790 	.word	0x20020790
   14210:	20020788 	.word	0x20020788
   14214:	2002078c 	.word	0x2002078c

00014218 <mfu_interface_setopt>:
   14218:	b5f0      	push	{r4, r5, r6, r7, lr}
   1421a:	4846      	ldr	r0, [pc, #280]	; (14334 <mfu_interface_setopt+0x11c>)
   1421c:	b083      	sub	sp, #12
   1421e:	6800      	ldr	r0, [r0, #0]
   14220:	3802      	subs	r0, #2
   14222:	2801      	cmp	r0, #1
   14224:	d877      	bhi.n	14316 <mfu_interface_setopt+0xfe>
   14226:	f240 2003 	movw	r0, #515	; 0x203
   1422a:	4281      	cmp	r1, r0
   1422c:	d16d      	bne.n	1430a <mfu_interface_setopt+0xf2>
   1422e:	3a04      	subs	r2, #4
   14230:	2a03      	cmp	r2, #3
   14232:	d85c      	bhi.n	142ee <mfu_interface_setopt+0xd6>
   14234:	e8df f002 	tbb	[pc, r2]
   14238:	514e024b 	.word	0x514e024b
   1423c:	2407      	movs	r4, #7
   1423e:	4625      	mov	r5, r4
   14240:	2100      	movs	r1, #0
   14242:	4668      	mov	r0, sp
   14244:	f7fe fdde 	bl	12e04 <rpc_dfu_client_request_alloc>
   14248:	4603      	mov	r3, r0
   1424a:	2800      	cmp	r0, #0
   1424c:	d138      	bne.n	142c0 <mfu_interface_setopt+0xa8>
   1424e:	2704      	movs	r7, #4
   14250:	4e39      	ldr	r6, [pc, #228]	; (14338 <mfu_interface_setopt+0x120>)
   14252:	9800      	ldr	r0, [sp, #0]
   14254:	8832      	ldrh	r2, [r6, #0]
   14256:	4629      	mov	r1, r5
   14258:	3201      	adds	r2, #1
   1425a:	b292      	uxth	r2, r2
   1425c:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   14260:	4c36      	ldr	r4, [pc, #216]	; (1433c <mfu_interface_setopt+0x124>)
   14262:	60c5      	str	r5, [r0, #12]
   14264:	7103      	strb	r3, [r0, #4]
   14266:	7143      	strb	r3, [r0, #5]
   14268:	7183      	strb	r3, [r0, #6]
   1426a:	71c3      	strb	r3, [r0, #7]
   1426c:	7243      	strb	r3, [r0, #9]
   1426e:	7283      	strb	r3, [r0, #10]
   14270:	72c3      	strb	r3, [r0, #11]
   14272:	7207      	strb	r7, [r0, #8]
   14274:	8032      	strh	r2, [r6, #0]
   14276:	6023      	str	r3, [r4, #0]
   14278:	f7fe fdd8 	bl	12e2c <rpc_dfu_client_request_send>
   1427c:	b9b8      	cbnz	r0, 142ae <mfu_interface_setopt+0x96>
   1427e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14282:	ad02      	add	r5, sp, #8
   14284:	4e2b      	ldr	r6, [pc, #172]	; (14334 <mfu_interface_setopt+0x11c>)
   14286:	f845 3d04 	str.w	r3, [r5, #-4]!
   1428a:	e005      	b.n	14298 <mfu_interface_setopt+0x80>
   1428c:	4629      	mov	r1, r5
   1428e:	4630      	mov	r0, r6
   14290:	f7fd f874 	bl	1137c <bsd_os_timedwait>
   14294:	2800      	cmp	r0, #0
   14296:	d131      	bne.n	142fc <mfu_interface_setopt+0xe4>
   14298:	6820      	ldr	r0, [r4, #0]
   1429a:	2800      	cmp	r0, #0
   1429c:	d0f6      	beq.n	1428c <mfu_interface_setopt+0x74>
   1429e:	6904      	ldr	r4, [r0, #16]
   142a0:	f7fe fdd8 	bl	12e54 <rpc_dfu_client_message_free>
   142a4:	2c00      	cmp	r4, #0
   142a6:	d13c      	bne.n	14322 <mfu_interface_setopt+0x10a>
   142a8:	4620      	mov	r0, r4
   142aa:	b003      	add	sp, #12
   142ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   142ae:	9800      	ldr	r0, [sp, #0]
   142b0:	6803      	ldr	r3, [r0, #0]
   142b2:	b11b      	cbz	r3, 142bc <mfu_interface_setopt+0xa4>
   142b4:	4618      	mov	r0, r3
   142b6:	f7fe fdd5 	bl	12e64 <rpc_dfu_client_data_free>
   142ba:	9800      	ldr	r0, [sp, #0]
   142bc:	f7fe fdca 	bl	12e54 <rpc_dfu_client_message_free>
   142c0:	200c      	movs	r0, #12
   142c2:	f7fd f8ef 	bl	114a4 <bsd_os_errno_set>
   142c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   142ca:	b003      	add	sp, #12
   142cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   142ce:	2405      	movs	r4, #5
   142d0:	4625      	mov	r5, r4
   142d2:	e7b5      	b.n	14240 <mfu_interface_setopt+0x28>
   142d4:	2408      	movs	r4, #8
   142d6:	4625      	mov	r5, r4
   142d8:	e7b2      	b.n	14240 <mfu_interface_setopt+0x28>
   142da:	b1b3      	cbz	r3, 1430a <mfu_interface_setopt+0xf2>
   142dc:	9a08      	ldr	r2, [sp, #32]
   142de:	2a04      	cmp	r2, #4
   142e0:	d113      	bne.n	1430a <mfu_interface_setopt+0xf2>
   142e2:	2000      	movs	r0, #0
   142e4:	681a      	ldr	r2, [r3, #0]
   142e6:	4b16      	ldr	r3, [pc, #88]	; (14340 <mfu_interface_setopt+0x128>)
   142e8:	601a      	str	r2, [r3, #0]
   142ea:	b003      	add	sp, #12
   142ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   142ee:	202a      	movs	r0, #42	; 0x2a
   142f0:	f7fd f8d8 	bl	114a4 <bsd_os_errno_set>
   142f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   142f8:	b003      	add	sp, #12
   142fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   142fc:	203c      	movs	r0, #60	; 0x3c
   142fe:	f7fd f8d1 	bl	114a4 <bsd_os_errno_set>
   14302:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14306:	b003      	add	sp, #12
   14308:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1430a:	2016      	movs	r0, #22
   1430c:	f7fd f8ca 	bl	114a4 <bsd_os_errno_set>
   14310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14314:	e7c9      	b.n	142aa <mfu_interface_setopt+0x92>
   14316:	2001      	movs	r0, #1
   14318:	f7fd f8c4 	bl	114a4 <bsd_os_errno_set>
   1431c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14320:	e7c3      	b.n	142aa <mfu_interface_setopt+0x92>
   14322:	4b08      	ldr	r3, [pc, #32]	; (14344 <mfu_interface_setopt+0x12c>)
   14324:	2008      	movs	r0, #8
   14326:	601c      	str	r4, [r3, #0]
   14328:	f7fd f8bc 	bl	114a4 <bsd_os_errno_set>
   1432c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14330:	e7bb      	b.n	142aa <mfu_interface_setopt+0x92>
   14332:	bf00      	nop
   14334:	20020784 	.word	0x20020784
   14338:	20024e44 	.word	0x20024e44
   1433c:	20020790 	.word	0x20020790
   14340:	2002078c 	.word	0x2002078c
   14344:	20020788 	.word	0x20020788

00014348 <mfu_interface_getopt>:
   14348:	f240 2003 	movw	r0, #515	; 0x203
   1434c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14350:	4281      	cmp	r1, r0
   14352:	b082      	sub	sp, #8
   14354:	9e08      	ldr	r6, [sp, #32]
   14356:	f040 80ae 	bne.w	144b6 <mfu_interface_getopt+0x16e>
   1435a:	461d      	mov	r5, r3
   1435c:	2b00      	cmp	r3, #0
   1435e:	f000 80aa 	beq.w	144b6 <mfu_interface_getopt+0x16e>
   14362:	2e00      	cmp	r6, #0
   14364:	f000 80a7 	beq.w	144b6 <mfu_interface_getopt+0x16e>
   14368:	4b5e      	ldr	r3, [pc, #376]	; (144e4 <mfu_interface_getopt+0x19c>)
   1436a:	681b      	ldr	r3, [r3, #0]
   1436c:	3b02      	subs	r3, #2
   1436e:	2b01      	cmp	r3, #1
   14370:	f200 80a7 	bhi.w	144c2 <mfu_interface_getopt+0x17a>
   14374:	3a01      	subs	r2, #1
   14376:	2a13      	cmp	r2, #19
   14378:	d879      	bhi.n	1446e <mfu_interface_getopt+0x126>
   1437a:	e8df f002 	tbb	[pc, r2]
   1437e:	5f17      	.short	0x5f17
   14380:	78787878 	.word	0x78787878
   14384:	78787872 	.word	0x78787872
   14388:	78787878 	.word	0x78787878
   1438c:	78787878 	.word	0x78787878
   14390:	0a78      	.short	0x0a78
   14392:	6833      	ldr	r3, [r6, #0]
   14394:	2b04      	cmp	r3, #4
   14396:	f040 808e 	bne.w	144b6 <mfu_interface_getopt+0x16e>
   1439a:	2200      	movs	r2, #0
   1439c:	4610      	mov	r0, r2
   1439e:	4b52      	ldr	r3, [pc, #328]	; (144e8 <mfu_interface_getopt+0x1a0>)
   143a0:	6819      	ldr	r1, [r3, #0]
   143a2:	601a      	str	r2, [r3, #0]
   143a4:	6029      	str	r1, [r5, #0]
   143a6:	b002      	add	sp, #8
   143a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   143ac:	6833      	ldr	r3, [r6, #0]
   143ae:	2b24      	cmp	r3, #36	; 0x24
   143b0:	f040 8081 	bne.w	144b6 <mfu_interface_getopt+0x16e>
   143b4:	2401      	movs	r4, #1
   143b6:	46a0      	mov	r8, r4
   143b8:	2100      	movs	r1, #0
   143ba:	4668      	mov	r0, sp
   143bc:	f7fe fd22 	bl	12e04 <rpc_dfu_client_request_alloc>
   143c0:	2800      	cmp	r0, #0
   143c2:	d146      	bne.n	14452 <mfu_interface_getopt+0x10a>
   143c4:	4949      	ldr	r1, [pc, #292]	; (144ec <mfu_interface_getopt+0x1a4>)
   143c6:	9b00      	ldr	r3, [sp, #0]
   143c8:	880a      	ldrh	r2, [r1, #0]
   143ca:	f1b8 0f03 	cmp.w	r8, #3
   143ce:	f102 0201 	add.w	r2, r2, #1
   143d2:	b292      	uxth	r2, r2
   143d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   143d8:	7118      	strb	r0, [r3, #4]
   143da:	800a      	strh	r2, [r1, #0]
   143dc:	60dc      	str	r4, [r3, #12]
   143de:	7158      	strb	r0, [r3, #5]
   143e0:	7198      	strb	r0, [r3, #6]
   143e2:	71d8      	strb	r0, [r3, #7]
   143e4:	d04b      	beq.n	1447e <mfu_interface_getopt+0x136>
   143e6:	2104      	movs	r1, #4
   143e8:	2200      	movs	r2, #0
   143ea:	4f41      	ldr	r7, [pc, #260]	; (144f0 <mfu_interface_getopt+0x1a8>)
   143ec:	6099      	str	r1, [r3, #8]
   143ee:	4618      	mov	r0, r3
   143f0:	4641      	mov	r1, r8
   143f2:	603a      	str	r2, [r7, #0]
   143f4:	f7fe fd1a 	bl	12e2c <rpc_dfu_client_request_send>
   143f8:	2800      	cmp	r0, #0
   143fa:	d14d      	bne.n	14498 <mfu_interface_getopt+0x150>
   143fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14400:	ac02      	add	r4, sp, #8
   14402:	f844 3d04 	str.w	r3, [r4, #-4]!
   14406:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 144e4 <mfu_interface_getopt+0x19c>
   1440a:	e005      	b.n	14418 <mfu_interface_getopt+0xd0>
   1440c:	4621      	mov	r1, r4
   1440e:	4640      	mov	r0, r8
   14410:	f7fc ffb4 	bl	1137c <bsd_os_timedwait>
   14414:	2800      	cmp	r0, #0
   14416:	d137      	bne.n	14488 <mfu_interface_getopt+0x140>
   14418:	6839      	ldr	r1, [r7, #0]
   1441a:	2900      	cmp	r1, #0
   1441c:	d0f6      	beq.n	1440c <mfu_interface_getopt+0xc4>
   1441e:	690c      	ldr	r4, [r1, #16]
   14420:	2c00      	cmp	r4, #0
   14422:	d154      	bne.n	144ce <mfu_interface_getopt+0x186>
   14424:	6832      	ldr	r2, [r6, #0]
   14426:	3114      	adds	r1, #20
   14428:	4628      	mov	r0, r5
   1442a:	f008 fe88 	bl	1d13e <memcpy>
   1442e:	6838      	ldr	r0, [r7, #0]
   14430:	f7fe fd10 	bl	12e54 <rpc_dfu_client_message_free>
   14434:	4620      	mov	r0, r4
   14436:	b002      	add	sp, #8
   14438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1443c:	6833      	ldr	r3, [r6, #0]
   1443e:	2b04      	cmp	r3, #4
   14440:	d139      	bne.n	144b6 <mfu_interface_getopt+0x16e>
   14442:	2402      	movs	r4, #2
   14444:	2100      	movs	r1, #0
   14446:	4668      	mov	r0, sp
   14448:	46a0      	mov	r8, r4
   1444a:	f7fe fcdb 	bl	12e04 <rpc_dfu_client_request_alloc>
   1444e:	2800      	cmp	r0, #0
   14450:	d0b8      	beq.n	143c4 <mfu_interface_getopt+0x7c>
   14452:	200c      	movs	r0, #12
   14454:	f7fd f826 	bl	114a4 <bsd_os_errno_set>
   14458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1445c:	b002      	add	sp, #8
   1445e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14462:	6833      	ldr	r3, [r6, #0]
   14464:	2b04      	cmp	r3, #4
   14466:	d126      	bne.n	144b6 <mfu_interface_getopt+0x16e>
   14468:	2409      	movs	r4, #9
   1446a:	46a0      	mov	r8, r4
   1446c:	e7a4      	b.n	143b8 <mfu_interface_getopt+0x70>
   1446e:	202a      	movs	r0, #42	; 0x2a
   14470:	f7fd f818 	bl	114a4 <bsd_os_errno_set>
   14474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14478:	b002      	add	sp, #8
   1447a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1447e:	4a1d      	ldr	r2, [pc, #116]	; (144f4 <mfu_interface_getopt+0x1ac>)
   14480:	2108      	movs	r1, #8
   14482:	6812      	ldr	r2, [r2, #0]
   14484:	611a      	str	r2, [r3, #16]
   14486:	e7af      	b.n	143e8 <mfu_interface_getopt+0xa0>
   14488:	203c      	movs	r0, #60	; 0x3c
   1448a:	f7fd f80b 	bl	114a4 <bsd_os_errno_set>
   1448e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14492:	b002      	add	sp, #8
   14494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14498:	9800      	ldr	r0, [sp, #0]
   1449a:	6803      	ldr	r3, [r0, #0]
   1449c:	b11b      	cbz	r3, 144a6 <mfu_interface_getopt+0x15e>
   1449e:	4618      	mov	r0, r3
   144a0:	f7fe fce0 	bl	12e64 <rpc_dfu_client_data_free>
   144a4:	9800      	ldr	r0, [sp, #0]
   144a6:	f7fe fcd5 	bl	12e54 <rpc_dfu_client_message_free>
   144aa:	200c      	movs	r0, #12
   144ac:	f7fc fffa 	bl	114a4 <bsd_os_errno_set>
   144b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   144b4:	e7d2      	b.n	1445c <mfu_interface_getopt+0x114>
   144b6:	2016      	movs	r0, #22
   144b8:	f7fc fff4 	bl	114a4 <bsd_os_errno_set>
   144bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   144c0:	e771      	b.n	143a6 <mfu_interface_getopt+0x5e>
   144c2:	2001      	movs	r0, #1
   144c4:	f7fc ffee 	bl	114a4 <bsd_os_errno_set>
   144c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   144cc:	e76b      	b.n	143a6 <mfu_interface_getopt+0x5e>
   144ce:	4b06      	ldr	r3, [pc, #24]	; (144e8 <mfu_interface_getopt+0x1a0>)
   144d0:	2008      	movs	r0, #8
   144d2:	601c      	str	r4, [r3, #0]
   144d4:	f7fc ffe6 	bl	114a4 <bsd_os_errno_set>
   144d8:	6838      	ldr	r0, [r7, #0]
   144da:	f7fe fcbb 	bl	12e54 <rpc_dfu_client_message_free>
   144de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   144e2:	e760      	b.n	143a6 <mfu_interface_getopt+0x5e>
   144e4:	20020784 	.word	0x20020784
   144e8:	20020788 	.word	0x20020788
   144ec:	20024e44 	.word	0x20024e44
   144f0:	20020790 	.word	0x20020790
   144f4:	2002078c 	.word	0x2002078c

000144f8 <bsd_platform_error_handler>:
   144f8:	b508      	push	{r3, lr}
   144fa:	f7f8 f80f 	bl	c51c <bsd_recoverable_error_handler>
   144fe:	bd08      	pop	{r3, pc}

00014500 <bsd_init>:
   14500:	b510      	push	{r4, lr}
   14502:	4c06      	ldr	r4, [pc, #24]	; (1451c <bsd_init+0x1c>)
   14504:	7823      	ldrb	r3, [r4, #0]
   14506:	b92b      	cbnz	r3, 14514 <bsd_init+0x14>
   14508:	f000 f826 	bl	14558 <bsd_platform_init>
   1450c:	b908      	cbnz	r0, 14512 <bsd_init+0x12>
   1450e:	2301      	movs	r3, #1
   14510:	7023      	strb	r3, [r4, #0]
   14512:	bd10      	pop	{r4, pc}
   14514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14518:	bd10      	pop	{r4, pc}
   1451a:	bf00      	nop
   1451c:	200265c3 	.word	0x200265c3

00014520 <bsd_shutdown>:
   14520:	b510      	push	{r4, lr}
   14522:	4c05      	ldr	r4, [pc, #20]	; (14538 <bsd_shutdown+0x18>)
   14524:	7823      	ldrb	r3, [r4, #0]
   14526:	b123      	cbz	r3, 14532 <bsd_shutdown+0x12>
   14528:	f000 f87c 	bl	14624 <bsd_platform_shutdown>
   1452c:	b900      	cbnz	r0, 14530 <bsd_shutdown+0x10>
   1452e:	7020      	strb	r0, [r4, #0]
   14530:	bd10      	pop	{r4, pc}
   14532:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14536:	bd10      	pop	{r4, pc}
   14538:	200265c3 	.word	0x200265c3

0001453c <unimplemented_method>:
   1453c:	b40f      	push	{r0, r1, r2, r3}
   1453e:	b508      	push	{r3, lr}
   14540:	202d      	movs	r0, #45	; 0x2d
   14542:	f7fc ffaf 	bl	114a4 <bsd_os_errno_set>
   14546:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1454a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1454e:	b004      	add	sp, #16
   14550:	4770      	bx	lr
   14552:	bf00      	nop

00014554 <rpc_transport_ipc_fault_handler>:
   14554:	f7ff bfd0 	b.w	144f8 <bsd_platform_error_handler>

00014558 <bsd_platform_init>:
   14558:	b5f0      	push	{r4, r5, r6, r7, lr}
   1455a:	b093      	sub	sp, #76	; 0x4c
   1455c:	f7fe feba 	bl	132d4 <nrf_mem_init>
   14560:	2800      	cmp	r0, #0
   14562:	d14c      	bne.n	145fe <bsd_platform_init+0xa6>
   14564:	4928      	ldr	r1, [pc, #160]	; (14608 <bsd_platform_init+0xb0>)
   14566:	a801      	add	r0, sp, #4
   14568:	f7fe ff28 	bl	133bc <nrf_mem_register>
   1456c:	2800      	cmp	r0, #0
   1456e:	d146      	bne.n	145fe <bsd_platform_init+0xa6>
   14570:	f7fd f882 	bl	11678 <bsd_os_init>
   14574:	f004 fa68 	bl	18a48 <rpc_framework_init>
   14578:	2800      	cmp	r0, #0
   1457a:	d140      	bne.n	145fe <bsd_platform_init+0xa6>
   1457c:	2320      	movs	r3, #32
   1457e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   14582:	2208      	movs	r2, #8
   14584:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   14588:	4f20      	ldr	r7, [pc, #128]	; (1460c <bsd_platform_init+0xb4>)
   1458a:	4e21      	ldr	r6, [pc, #132]	; (14610 <bsd_platform_init+0xb8>)
   1458c:	9303      	str	r3, [sp, #12]
   1458e:	9305      	str	r3, [sp, #20]
   14590:	9307      	str	r3, [sp, #28]
   14592:	4d20      	ldr	r5, [pc, #128]	; (14614 <bsd_platform_init+0xbc>)
   14594:	9109      	str	r1, [sp, #36]	; 0x24
   14596:	910d      	str	r1, [sp, #52]	; 0x34
   14598:	4c1f      	ldr	r4, [pc, #124]	; (14618 <bsd_platform_init+0xc0>)
   1459a:	4920      	ldr	r1, [pc, #128]	; (1461c <bsd_platform_init+0xc4>)
   1459c:	4b20      	ldr	r3, [pc, #128]	; (14620 <bsd_platform_init+0xc8>)
   1459e:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
   145a2:	eb0d 0002 	add.w	r0, sp, r2
   145a6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   145aa:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
   145ae:	9702      	str	r7, [sp, #8]
   145b0:	9604      	str	r6, [sp, #16]
   145b2:	9506      	str	r5, [sp, #24]
   145b4:	9408      	str	r4, [sp, #32]
   145b6:	910a      	str	r1, [sp, #40]	; 0x28
   145b8:	930c      	str	r3, [sp, #48]	; 0x30
   145ba:	f000 fbe7 	bl	14d8c <rpc_transport_ipc_init>
   145be:	b108      	cbz	r0, 145c4 <bsd_platform_init+0x6c>
   145c0:	b013      	add	sp, #76	; 0x4c
   145c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   145c4:	f003 ffd0 	bl	18568 <interface_init>
   145c8:	b9c8      	cbnz	r0, 145fe <bsd_platform_init+0xa6>
   145ca:	f7fe fac9 	bl	12b60 <at_interface_init>
   145ce:	b9b0      	cbnz	r0, 145fe <bsd_platform_init+0xa6>
   145d0:	f002 fd08 	bl	16fe4 <ip_interface_init>
   145d4:	b998      	cbnz	r0, 145fe <bsd_platform_init+0xa6>
   145d6:	f7ff f8e9 	bl	137ac <tls_interface_init>
   145da:	b980      	cbnz	r0, 145fe <bsd_platform_init+0xa6>
   145dc:	f7ff fcb2 	bl	13f44 <mfu_interface_init>
   145e0:	b968      	cbnz	r0, 145fe <bsd_platform_init+0xa6>
   145e2:	f001 fac3 	bl	15b6c <pdn_interface_init>
   145e6:	b950      	cbnz	r0, 145fe <bsd_platform_init+0xa6>
   145e8:	f005 fcf8 	bl	19fdc <gnss_interface_init>
   145ec:	b938      	cbnz	r0, 145fe <bsd_platform_init+0xa6>
   145ee:	f7fd ff79 	bl	124e4 <logobj_interface_init>
   145f2:	3000      	adds	r0, #0
   145f4:	bf18      	it	ne
   145f6:	2001      	movne	r0, #1
   145f8:	4240      	negs	r0, r0
   145fa:	b013      	add	sp, #76	; 0x4c
   145fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   145fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14602:	b013      	add	sp, #76	; 0x4c
   14604:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14606:	bf00      	nop
   14608:	0001f284 	.word	0x0001f284
   1460c:	20010000 	.word	0x20010000
   14610:	20010040 	.word	0x20010040
   14614:	20010020 	.word	0x20010020
   14618:	20017060 	.word	0x20017060
   1461c:	20010060 	.word	0x20010060
   14620:	20013060 	.word	0x20013060

00014624 <bsd_platform_shutdown>:
   14624:	b508      	push	{r3, lr}
   14626:	f004 f947 	bl	188b8 <interface_shutdown>
   1462a:	f000 fc13 	bl	14e54 <rpc_transport_ipc_shutdown>
   1462e:	2000      	movs	r0, #0
   14630:	bd08      	pop	{r3, pc}
   14632:	bf00      	nop

00014634 <bsd_platform_af_method_table_get>:
   14634:	2805      	cmp	r0, #5
   14636:	d02a      	beq.n	1468e <bsd_platform_af_method_table_get+0x5a>
   14638:	b508      	push	{r3, lr}
   1463a:	d914      	bls.n	14666 <bsd_platform_af_method_table_get+0x32>
   1463c:	280a      	cmp	r0, #10
   1463e:	d016      	beq.n	1466e <bsd_platform_af_method_table_get+0x3a>
   14640:	2866      	cmp	r0, #102	; 0x66
   14642:	d10b      	bne.n	1465c <bsd_platform_af_method_table_get+0x28>
   14644:	f240 2302 	movw	r3, #514	; 0x202
   14648:	429a      	cmp	r2, r3
   1464a:	d032      	beq.n	146b2 <bsd_platform_af_method_table_get+0x7e>
   1464c:	f240 2305 	movw	r3, #517	; 0x205
   14650:	429a      	cmp	r2, r3
   14652:	d032      	beq.n	146ba <bsd_platform_af_method_table_get+0x86>
   14654:	f240 2301 	movw	r3, #513	; 0x201
   14658:	429a      	cmp	r2, r3
   1465a:	d02c      	beq.n	146b6 <bsd_platform_af_method_table_get+0x82>
   1465c:	2016      	movs	r0, #22
   1465e:	f7fc ff21 	bl	114a4 <bsd_os_errno_set>
   14662:	2000      	movs	r0, #0
   14664:	bd08      	pop	{r3, pc}
   14666:	2801      	cmp	r0, #1
   14668:	d016      	beq.n	14698 <bsd_platform_af_method_table_get+0x64>
   1466a:	2802      	cmp	r0, #2
   1466c:	d1f6      	bne.n	1465c <bsd_platform_af_method_table_get+0x28>
   1466e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   14672:	2a0a      	cmp	r2, #10
   14674:	d819      	bhi.n	146aa <bsd_platform_af_method_table_get+0x76>
   14676:	2301      	movs	r3, #1
   14678:	f240 4103 	movw	r1, #1027	; 0x403
   1467c:	4810      	ldr	r0, [pc, #64]	; (146c0 <bsd_platform_af_method_table_get+0x8c>)
   1467e:	fa03 f202 	lsl.w	r2, r3, r2
   14682:	420a      	tst	r2, r1
   14684:	f100 0328 	add.w	r3, r0, #40	; 0x28
   14688:	bf18      	it	ne
   1468a:	4618      	movne	r0, r3
   1468c:	bd08      	pop	{r3, pc}
   1468e:	2903      	cmp	r1, #3
   14690:	480c      	ldr	r0, [pc, #48]	; (146c4 <bsd_platform_af_method_table_get+0x90>)
   14692:	bf18      	it	ne
   14694:	2000      	movne	r0, #0
   14696:	4770      	bx	lr
   14698:	f240 2303 	movw	r3, #515	; 0x203
   1469c:	429a      	cmp	r2, r3
   1469e:	d006      	beq.n	146ae <bsd_platform_af_method_table_get+0x7a>
   146a0:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   146a4:	d1da      	bne.n	1465c <bsd_platform_af_method_table_get+0x28>
   146a6:	4808      	ldr	r0, [pc, #32]	; (146c8 <bsd_platform_af_method_table_get+0x94>)
   146a8:	bd08      	pop	{r3, pc}
   146aa:	4805      	ldr	r0, [pc, #20]	; (146c0 <bsd_platform_af_method_table_get+0x8c>)
   146ac:	bd08      	pop	{r3, pc}
   146ae:	4807      	ldr	r0, [pc, #28]	; (146cc <bsd_platform_af_method_table_get+0x98>)
   146b0:	bd08      	pop	{r3, pc}
   146b2:	4807      	ldr	r0, [pc, #28]	; (146d0 <bsd_platform_af_method_table_get+0x9c>)
   146b4:	bd08      	pop	{r3, pc}
   146b6:	4807      	ldr	r0, [pc, #28]	; (146d4 <bsd_platform_af_method_table_get+0xa0>)
   146b8:	bd08      	pop	{r3, pc}
   146ba:	4807      	ldr	r0, [pc, #28]	; (146d8 <bsd_platform_af_method_table_get+0xa4>)
   146bc:	bd08      	pop	{r3, pc}
   146be:	bf00      	nop
   146c0:	0001f154 	.word	0x0001f154
   146c4:	0001f244 	.word	0x0001f244
   146c8:	0001f1f4 	.word	0x0001f1f4
   146cc:	0001f1a4 	.word	0x0001f1a4
   146d0:	0001f1cc 	.word	0x0001f1cc
   146d4:	0001f12c 	.word	0x0001f12c
   146d8:	0001f21c 	.word	0x0001f21c

000146dc <bsd_platform_fd_method_table_get>:
   146dc:	b538      	push	{r3, r4, r5, lr}
   146de:	4605      	mov	r5, r0
   146e0:	f004 f85e 	bl	187a0 <interface_socket_from_handle_get>
   146e4:	4604      	mov	r4, r0
   146e6:	b950      	cbnz	r0, 146fe <bsd_platform_fd_method_table_get+0x22>
   146e8:	4b2a      	ldr	r3, [pc, #168]	; (14794 <bsd_platform_fd_method_table_get+0xb8>)
   146ea:	43ab      	bics	r3, r5
   146ec:	d032      	beq.n	14754 <bsd_platform_fd_method_table_get+0x78>
   146ee:	4b2a      	ldr	r3, [pc, #168]	; (14798 <bsd_platform_fd_method_table_get+0xbc>)
   146f0:	43ab      	bics	r3, r5
   146f2:	d043      	beq.n	1477c <bsd_platform_fd_method_table_get+0xa0>
   146f4:	4b29      	ldr	r3, [pc, #164]	; (1479c <bsd_platform_fd_method_table_get+0xc0>)
   146f6:	43ab      	bics	r3, r5
   146f8:	d146      	bne.n	14788 <bsd_platform_fd_method_table_get+0xac>
   146fa:	4829      	ldr	r0, [pc, #164]	; (147a0 <bsd_platform_fd_method_table_get+0xc4>)
   146fc:	bd38      	pop	{r3, r4, r5, pc}
   146fe:	68c3      	ldr	r3, [r0, #12]
   14700:	6942      	ldr	r2, [r0, #20]
   14702:	2b05      	cmp	r3, #5
   14704:	d034      	beq.n	14770 <bsd_platform_fd_method_table_get+0x94>
   14706:	d911      	bls.n	1472c <bsd_platform_fd_method_table_get+0x50>
   14708:	2b0a      	cmp	r3, #10
   1470a:	d013      	beq.n	14734 <bsd_platform_fd_method_table_get+0x58>
   1470c:	2b66      	cmp	r3, #102	; 0x66
   1470e:	d12a      	bne.n	14766 <bsd_platform_fd_method_table_get+0x8a>
   14710:	f240 2302 	movw	r3, #514	; 0x202
   14714:	429a      	cmp	r2, r3
   14716:	d031      	beq.n	1477c <bsd_platform_fd_method_table_get+0xa0>
   14718:	f240 2305 	movw	r3, #517	; 0x205
   1471c:	429a      	cmp	r2, r3
   1471e:	d031      	beq.n	14784 <bsd_platform_fd_method_table_get+0xa8>
   14720:	f240 2301 	movw	r3, #513	; 0x201
   14724:	429a      	cmp	r2, r3
   14726:	d11e      	bne.n	14766 <bsd_platform_fd_method_table_get+0x8a>
   14728:	481e      	ldr	r0, [pc, #120]	; (147a4 <bsd_platform_fd_method_table_get+0xc8>)
   1472a:	bd38      	pop	{r3, r4, r5, pc}
   1472c:	2b01      	cmp	r3, #1
   1472e:	d013      	beq.n	14758 <bsd_platform_fd_method_table_get+0x7c>
   14730:	2b02      	cmp	r3, #2
   14732:	d118      	bne.n	14766 <bsd_platform_fd_method_table_get+0x8a>
   14734:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   14738:	2a0a      	cmp	r2, #10
   1473a:	d821      	bhi.n	14780 <bsd_platform_fd_method_table_get+0xa4>
   1473c:	2301      	movs	r3, #1
   1473e:	f240 4103 	movw	r1, #1027	; 0x403
   14742:	4819      	ldr	r0, [pc, #100]	; (147a8 <bsd_platform_fd_method_table_get+0xcc>)
   14744:	fa03 f202 	lsl.w	r2, r3, r2
   14748:	420a      	tst	r2, r1
   1474a:	f100 0428 	add.w	r4, r0, #40	; 0x28
   1474e:	bf18      	it	ne
   14750:	4620      	movne	r0, r4
   14752:	bd38      	pop	{r3, r4, r5, pc}
   14754:	4815      	ldr	r0, [pc, #84]	; (147ac <bsd_platform_fd_method_table_get+0xd0>)
   14756:	bd38      	pop	{r3, r4, r5, pc}
   14758:	f240 2303 	movw	r3, #515	; 0x203
   1475c:	429a      	cmp	r2, r3
   1475e:	d0f9      	beq.n	14754 <bsd_platform_fd_method_table_get+0x78>
   14760:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   14764:	d0c9      	beq.n	146fa <bsd_platform_fd_method_table_get+0x1e>
   14766:	2016      	movs	r0, #22
   14768:	f7fc fe9c 	bl	114a4 <bsd_os_errno_set>
   1476c:	2000      	movs	r0, #0
   1476e:	bd38      	pop	{r3, r4, r5, pc}
   14770:	6903      	ldr	r3, [r0, #16]
   14772:	480f      	ldr	r0, [pc, #60]	; (147b0 <bsd_platform_fd_method_table_get+0xd4>)
   14774:	2b03      	cmp	r3, #3
   14776:	bf18      	it	ne
   14778:	2000      	movne	r0, #0
   1477a:	bd38      	pop	{r3, r4, r5, pc}
   1477c:	480d      	ldr	r0, [pc, #52]	; (147b4 <bsd_platform_fd_method_table_get+0xd8>)
   1477e:	bd38      	pop	{r3, r4, r5, pc}
   14780:	4809      	ldr	r0, [pc, #36]	; (147a8 <bsd_platform_fd_method_table_get+0xcc>)
   14782:	bd38      	pop	{r3, r4, r5, pc}
   14784:	480c      	ldr	r0, [pc, #48]	; (147b8 <bsd_platform_fd_method_table_get+0xdc>)
   14786:	bd38      	pop	{r3, r4, r5, pc}
   14788:	2009      	movs	r0, #9
   1478a:	f7fc fe8b 	bl	114a4 <bsd_os_errno_set>
   1478e:	4620      	mov	r0, r4
   14790:	bd38      	pop	{r3, r4, r5, pc}
   14792:	bf00      	nop
   14794:	49765432 	.word	0x49765432
   14798:	789a0000 	.word	0x789a0000
   1479c:	49765443 	.word	0x49765443
   147a0:	0001f1f4 	.word	0x0001f1f4
   147a4:	0001f12c 	.word	0x0001f12c
   147a8:	0001f154 	.word	0x0001f154
   147ac:	0001f1a4 	.word	0x0001f1a4
   147b0:	0001f244 	.word	0x0001f244
   147b4:	0001f1cc 	.word	0x0001f1cc
   147b8:	0001f21c 	.word	0x0001f21c

000147bc <bsd_platform_getaddrinfo>:
   147bc:	f003 bb58 	b.w	17e70 <ip_interface_getaddrinfo>

000147c0 <bsd_platform_freeaddrinfo>:
   147c0:	f003 bc4c 	b.w	1805c <ip_interface_freeaddrinfo>

000147c4 <bsd_platform_poll>:
   147c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   147c8:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   147cc:	b083      	sub	sp, #12
   147ce:	9200      	str	r2, [sp, #0]
   147d0:	2800      	cmp	r0, #0
   147d2:	d048      	beq.n	14866 <bsd_platform_poll+0xa2>
   147d4:	1e4b      	subs	r3, r1, #1
   147d6:	2b07      	cmp	r3, #7
   147d8:	d845      	bhi.n	14866 <bsd_platform_poll+0xa2>
   147da:	4680      	mov	r8, r0
   147dc:	4605      	mov	r5, r0
   147de:	2400      	movs	r4, #0
   147e0:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   147e4:	88ab      	ldrh	r3, [r5, #4]
   147e6:	6828      	ldr	r0, [r5, #0]
   147e8:	f003 0303 	and.w	r3, r3, #3
   147ec:	a901      	add	r1, sp, #4
   147ee:	f043 061c 	orr.w	r6, r3, #28
   147f2:	f003 ffe3 	bl	187bc <interface_socket_event_get>
   147f6:	9b01      	ldr	r3, [sp, #4]
   147f8:	3508      	adds	r5, #8
   147fa:	4033      	ands	r3, r6
   147fc:	f825 3c02 	strh.w	r3, [r5, #-2]
   14800:	b103      	cbz	r3, 14804 <bsd_platform_poll+0x40>
   14802:	3401      	adds	r4, #1
   14804:	42af      	cmp	r7, r5
   14806:	d1ed      	bne.n	147e4 <bsd_platform_poll+0x20>
   14808:	bb9c      	cbnz	r4, 14872 <bsd_platform_poll+0xae>
   1480a:	4669      	mov	r1, sp
   1480c:	4640      	mov	r0, r8
   1480e:	f7fc fdb5 	bl	1137c <bsd_os_timedwait>
   14812:	4607      	mov	r7, r0
   14814:	b108      	cbz	r0, 1481a <bsd_platform_poll+0x56>
   14816:	283c      	cmp	r0, #60	; 0x3c
   14818:	d11d      	bne.n	14856 <bsd_platform_poll+0x92>
   1481a:	46c1      	mov	r9, r8
   1481c:	2600      	movs	r6, #0
   1481e:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   14822:	f8d9 0000 	ldr.w	r0, [r9]
   14826:	f003 0303 	and.w	r3, r3, #3
   1482a:	a901      	add	r1, sp, #4
   1482c:	f043 041c 	orr.w	r4, r3, #28
   14830:	f003 ffc4 	bl	187bc <interface_socket_event_get>
   14834:	9b01      	ldr	r3, [sp, #4]
   14836:	f109 0908 	add.w	r9, r9, #8
   1483a:	4023      	ands	r3, r4
   1483c:	f829 3c02 	strh.w	r3, [r9, #-2]
   14840:	b103      	cbz	r3, 14844 <bsd_platform_poll+0x80>
   14842:	3601      	adds	r6, #1
   14844:	454d      	cmp	r5, r9
   14846:	d1ea      	bne.n	1481e <bsd_platform_poll+0x5a>
   14848:	b90e      	cbnz	r6, 1484e <bsd_platform_poll+0x8a>
   1484a:	2f00      	cmp	r7, #0
   1484c:	d0dd      	beq.n	1480a <bsd_platform_poll+0x46>
   1484e:	4630      	mov	r0, r6
   14850:	b003      	add	sp, #12
   14852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14856:	2023      	movs	r0, #35	; 0x23
   14858:	f7fc fe24 	bl	114a4 <bsd_os_errno_set>
   1485c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14860:	b003      	add	sp, #12
   14862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14866:	2016      	movs	r0, #22
   14868:	f7fc fe1c 	bl	114a4 <bsd_os_errno_set>
   1486c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14870:	e7ee      	b.n	14850 <bsd_platform_poll+0x8c>
   14872:	4620      	mov	r0, r4
   14874:	e7ec      	b.n	14850 <bsd_platform_poll+0x8c>
   14876:	bf00      	nop

00014878 <bsd_platform_fcntl>:
   14878:	b508      	push	{r3, lr}
   1487a:	4b06      	ldr	r3, [pc, #24]	; (14894 <bsd_platform_fcntl+0x1c>)
   1487c:	4383      	bics	r3, r0
   1487e:	d003      	beq.n	14888 <bsd_platform_fcntl+0x10>
   14880:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14884:	f004 b846 	b.w	18914 <interface_socket_fcntl>
   14888:	202d      	movs	r0, #45	; 0x2d
   1488a:	f7fc fe0b 	bl	114a4 <bsd_os_errno_set>
   1488e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14892:	bd08      	pop	{r3, pc}
   14894:	49765432 	.word	0x49765432

00014898 <ipc_trace_init>:
   14898:	4b01      	ldr	r3, [pc, #4]	; (148a0 <ipc_trace_init+0x8>)
   1489a:	6018      	str	r0, [r3, #0]
   1489c:	4770      	bx	lr
   1489e:	bf00      	nop
   148a0:	200207a0 	.word	0x200207a0

000148a4 <bsd_os_trace_irq_handler>:
   148a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   148a6:	4b6c      	ldr	r3, [pc, #432]	; (14a58 <bsd_os_trace_irq_handler+0x1b4>)
   148a8:	b083      	sub	sp, #12
   148aa:	781b      	ldrb	r3, [r3, #0]
   148ac:	2b00      	cmp	r3, #0
   148ae:	f000 80ad 	beq.w	14a0c <bsd_os_trace_irq_handler+0x168>
   148b2:	4b6a      	ldr	r3, [pc, #424]	; (14a5c <bsd_os_trace_irq_handler+0x1b8>)
   148b4:	681c      	ldr	r4, [r3, #0]
   148b6:	68a2      	ldr	r2, [r4, #8]
   148b8:	6863      	ldr	r3, [r4, #4]
   148ba:	429a      	cmp	r2, r3
   148bc:	d02d      	beq.n	1491a <bsd_os_trace_irq_handler+0x76>
   148be:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   148c2:	f8ad 3000 	strh.w	r3, [sp]
   148c6:	7823      	ldrb	r3, [r4, #0]
   148c8:	466e      	mov	r6, sp
   148ca:	f88d 3004 	strb.w	r3, [sp, #4]
   148ce:	6863      	ldr	r3, [r4, #4]
   148d0:	2105      	movs	r1, #5
   148d2:	429a      	cmp	r2, r3
   148d4:	bf2a      	itet	cs
   148d6:	6927      	ldrcs	r7, [r4, #16]
   148d8:	1a9f      	subcc	r7, r3, r2
   148da:	1abf      	subcs	r7, r7, r2
   148dc:	429a      	cmp	r2, r3
   148de:	bf94      	ite	ls
   148e0:	2500      	movls	r5, #0
   148e2:	68e5      	ldrhi	r5, [r4, #12]
   148e4:	b2bf      	uxth	r7, r7
   148e6:	bf88      	it	hi
   148e8:	1b5b      	subhi	r3, r3, r5
   148ea:	4630      	mov	r0, r6
   148ec:	bf88      	it	hi
   148ee:	b29d      	uxthhi	r5, r3
   148f0:	f8ad 7002 	strh.w	r7, [sp, #2]
   148f4:	f7fc fed8 	bl	116a8 <bsd_os_trace_put>
   148f8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   148fc:	68a0      	ldr	r0, [r4, #8]
   148fe:	f7fc fed3 	bl	116a8 <bsd_os_trace_put>
   14902:	68a3      	ldr	r3, [r4, #8]
   14904:	6922      	ldr	r2, [r4, #16]
   14906:	441f      	add	r7, r3
   14908:	4297      	cmp	r7, r2
   1490a:	bf08      	it	eq
   1490c:	68e3      	ldreq	r3, [r4, #12]
   1490e:	60a7      	str	r7, [r4, #8]
   14910:	bf08      	it	eq
   14912:	60a3      	streq	r3, [r4, #8]
   14914:	2d00      	cmp	r5, #0
   14916:	f040 808d 	bne.w	14a34 <bsd_os_trace_irq_handler+0x190>
   1491a:	4b51      	ldr	r3, [pc, #324]	; (14a60 <bsd_os_trace_irq_handler+0x1bc>)
   1491c:	681c      	ldr	r4, [r3, #0]
   1491e:	68a2      	ldr	r2, [r4, #8]
   14920:	6863      	ldr	r3, [r4, #4]
   14922:	429a      	cmp	r2, r3
   14924:	d02c      	beq.n	14980 <bsd_os_trace_irq_handler+0xdc>
   14926:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   1492a:	f8ad 3000 	strh.w	r3, [sp]
   1492e:	7823      	ldrb	r3, [r4, #0]
   14930:	466e      	mov	r6, sp
   14932:	f88d 3004 	strb.w	r3, [sp, #4]
   14936:	6863      	ldr	r3, [r4, #4]
   14938:	2105      	movs	r1, #5
   1493a:	429a      	cmp	r2, r3
   1493c:	bf2a      	itet	cs
   1493e:	6927      	ldrcs	r7, [r4, #16]
   14940:	1a9f      	subcc	r7, r3, r2
   14942:	1abf      	subcs	r7, r7, r2
   14944:	429a      	cmp	r2, r3
   14946:	bf94      	ite	ls
   14948:	2500      	movls	r5, #0
   1494a:	68e5      	ldrhi	r5, [r4, #12]
   1494c:	b2bf      	uxth	r7, r7
   1494e:	bf88      	it	hi
   14950:	1b5b      	subhi	r3, r3, r5
   14952:	4630      	mov	r0, r6
   14954:	bf88      	it	hi
   14956:	b29d      	uxthhi	r5, r3
   14958:	f8ad 7002 	strh.w	r7, [sp, #2]
   1495c:	f7fc fea4 	bl	116a8 <bsd_os_trace_put>
   14960:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14964:	68a0      	ldr	r0, [r4, #8]
   14966:	f7fc fe9f 	bl	116a8 <bsd_os_trace_put>
   1496a:	68a3      	ldr	r3, [r4, #8]
   1496c:	6922      	ldr	r2, [r4, #16]
   1496e:	441f      	add	r7, r3
   14970:	4297      	cmp	r7, r2
   14972:	bf08      	it	eq
   14974:	68e3      	ldreq	r3, [r4, #12]
   14976:	60a7      	str	r7, [r4, #8]
   14978:	bf08      	it	eq
   1497a:	60a3      	streq	r3, [r4, #8]
   1497c:	2d00      	cmp	r5, #0
   1497e:	d148      	bne.n	14a12 <bsd_os_trace_irq_handler+0x16e>
   14980:	4b38      	ldr	r3, [pc, #224]	; (14a64 <bsd_os_trace_irq_handler+0x1c0>)
   14982:	681c      	ldr	r4, [r3, #0]
   14984:	68a2      	ldr	r2, [r4, #8]
   14986:	6863      	ldr	r3, [r4, #4]
   14988:	429a      	cmp	r2, r3
   1498a:	d02b      	beq.n	149e4 <bsd_os_trace_irq_handler+0x140>
   1498c:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   14990:	f8ad 3000 	strh.w	r3, [sp]
   14994:	7823      	ldrb	r3, [r4, #0]
   14996:	466e      	mov	r6, sp
   14998:	f88d 3004 	strb.w	r3, [sp, #4]
   1499c:	6863      	ldr	r3, [r4, #4]
   1499e:	2105      	movs	r1, #5
   149a0:	429a      	cmp	r2, r3
   149a2:	bf2a      	itet	cs
   149a4:	6927      	ldrcs	r7, [r4, #16]
   149a6:	1a9f      	subcc	r7, r3, r2
   149a8:	1abf      	subcs	r7, r7, r2
   149aa:	429a      	cmp	r2, r3
   149ac:	bf94      	ite	ls
   149ae:	2500      	movls	r5, #0
   149b0:	68e5      	ldrhi	r5, [r4, #12]
   149b2:	b2bf      	uxth	r7, r7
   149b4:	bf88      	it	hi
   149b6:	1b5b      	subhi	r3, r3, r5
   149b8:	4630      	mov	r0, r6
   149ba:	bf88      	it	hi
   149bc:	b29d      	uxthhi	r5, r3
   149be:	f8ad 7002 	strh.w	r7, [sp, #2]
   149c2:	f7fc fe71 	bl	116a8 <bsd_os_trace_put>
   149c6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   149ca:	68a0      	ldr	r0, [r4, #8]
   149cc:	f7fc fe6c 	bl	116a8 <bsd_os_trace_put>
   149d0:	68a3      	ldr	r3, [r4, #8]
   149d2:	6922      	ldr	r2, [r4, #16]
   149d4:	441f      	add	r7, r3
   149d6:	4297      	cmp	r7, r2
   149d8:	bf08      	it	eq
   149da:	68e3      	ldreq	r3, [r4, #12]
   149dc:	60a7      	str	r7, [r4, #8]
   149de:	bf08      	it	eq
   149e0:	60a3      	streq	r3, [r4, #8]
   149e2:	b90d      	cbnz	r5, 149e8 <bsd_os_trace_irq_handler+0x144>
   149e4:	b003      	add	sp, #12
   149e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   149e8:	4630      	mov	r0, r6
   149ea:	2105      	movs	r1, #5
   149ec:	f8ad 5002 	strh.w	r5, [sp, #2]
   149f0:	f7fc fe5a 	bl	116a8 <bsd_os_trace_put>
   149f4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   149f8:	68e0      	ldr	r0, [r4, #12]
   149fa:	f7fc fe55 	bl	116a8 <bsd_os_trace_put>
   149fe:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14a02:	68e3      	ldr	r3, [r4, #12]
   14a04:	4413      	add	r3, r2
   14a06:	60a3      	str	r3, [r4, #8]
   14a08:	b003      	add	sp, #12
   14a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14a0c:	f7fc fe0e 	bl	1162c <bsd_os_trace_irq_clear>
   14a10:	e74f      	b.n	148b2 <bsd_os_trace_irq_handler+0xe>
   14a12:	2105      	movs	r1, #5
   14a14:	4630      	mov	r0, r6
   14a16:	f8ad 5002 	strh.w	r5, [sp, #2]
   14a1a:	f7fc fe45 	bl	116a8 <bsd_os_trace_put>
   14a1e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14a22:	68e0      	ldr	r0, [r4, #12]
   14a24:	f7fc fe40 	bl	116a8 <bsd_os_trace_put>
   14a28:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14a2c:	68e3      	ldr	r3, [r4, #12]
   14a2e:	4413      	add	r3, r2
   14a30:	60a3      	str	r3, [r4, #8]
   14a32:	e7a5      	b.n	14980 <bsd_os_trace_irq_handler+0xdc>
   14a34:	2105      	movs	r1, #5
   14a36:	4630      	mov	r0, r6
   14a38:	f8ad 5002 	strh.w	r5, [sp, #2]
   14a3c:	f7fc fe34 	bl	116a8 <bsd_os_trace_put>
   14a40:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14a44:	68e0      	ldr	r0, [r4, #12]
   14a46:	f7fc fe2f 	bl	116a8 <bsd_os_trace_put>
   14a4a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14a4e:	68e3      	ldr	r3, [r4, #12]
   14a50:	4413      	add	r3, r2
   14a52:	60a3      	str	r3, [r4, #8]
   14a54:	e761      	b.n	1491a <bsd_os_trace_irq_handler+0x76>
   14a56:	bf00      	nop
   14a58:	200265c4 	.word	0x200265c4
   14a5c:	2002079c 	.word	0x2002079c
   14a60:	20020794 	.word	0x20020794
   14a64:	20020798 	.word	0x20020798

00014a68 <ipc_trace_handle>:
   14a68:	2200      	movs	r2, #0
   14a6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a6e:	4bb0      	ldr	r3, [pc, #704]	; (14d30 <_flash_used+0x120>)
   14a70:	b083      	sub	sp, #12
   14a72:	681b      	ldr	r3, [r3, #0]
   14a74:	6919      	ldr	r1, [r3, #16]
   14a76:	695c      	ldr	r4, [r3, #20]
   14a78:	7c18      	ldrb	r0, [r3, #16]
   14a7a:	741a      	strb	r2, [r3, #16]
   14a7c:	7c58      	ldrb	r0, [r3, #17]
   14a7e:	745a      	strb	r2, [r3, #17]
   14a80:	7c98      	ldrb	r0, [r3, #18]
   14a82:	749a      	strb	r2, [r3, #18]
   14a84:	7cd8      	ldrb	r0, [r3, #19]
   14a86:	74da      	strb	r2, [r3, #19]
   14a88:	7d18      	ldrb	r0, [r3, #20]
   14a8a:	751a      	strb	r2, [r3, #20]
   14a8c:	7d58      	ldrb	r0, [r3, #21]
   14a8e:	755a      	strb	r2, [r3, #21]
   14a90:	7d98      	ldrb	r0, [r3, #22]
   14a92:	759a      	strb	r2, [r3, #22]
   14a94:	7dd8      	ldrb	r0, [r3, #23]
   14a96:	75da      	strb	r2, [r3, #23]
   14a98:	b1b9      	cbz	r1, 14aca <ipc_trace_handle+0x62>
   14a9a:	3901      	subs	r1, #1
   14a9c:	2903      	cmp	r1, #3
   14a9e:	d814      	bhi.n	14aca <ipc_trace_handle+0x62>
   14aa0:	e8df f011 	tbh	[pc, r1, lsl #1]
   14aa4:	010300d6 	.word	0x010300d6
   14aa8:	00160004 	.word	0x00160004
   14aac:	2501      	movs	r5, #1
   14aae:	2003      	movs	r0, #3
   14ab0:	2200      	movs	r2, #0
   14ab2:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   14ab6:	4c9f      	ldr	r4, [pc, #636]	; (14d34 <_flash_used+0x124>)
   14ab8:	7025      	strb	r5, [r4, #0]
   14aba:	7a1c      	ldrb	r4, [r3, #8]
   14abc:	7218      	strb	r0, [r3, #8]
   14abe:	7a58      	ldrb	r0, [r3, #9]
   14ac0:	725a      	strb	r2, [r3, #9]
   14ac2:	7a98      	ldrb	r0, [r3, #10]
   14ac4:	729a      	strb	r2, [r3, #10]
   14ac6:	7ada      	ldrb	r2, [r3, #11]
   14ac8:	72d9      	strb	r1, [r3, #11]
   14aca:	b003      	add	sp, #12
   14acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ad0:	2104      	movs	r1, #4
   14ad2:	2200      	movs	r2, #0
   14ad4:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   14ad8:	7a1c      	ldrb	r4, [r3, #8]
   14ada:	7219      	strb	r1, [r3, #8]
   14adc:	7a59      	ldrb	r1, [r3, #9]
   14ade:	725a      	strb	r2, [r3, #9]
   14ae0:	4994      	ldr	r1, [pc, #592]	; (14d34 <_flash_used+0x124>)
   14ae2:	7a9c      	ldrb	r4, [r3, #10]
   14ae4:	729a      	strb	r2, [r3, #10]
   14ae6:	7adc      	ldrb	r4, [r3, #11]
   14ae8:	72d8      	strb	r0, [r3, #11]
   14aea:	700a      	strb	r2, [r1, #0]
   14aec:	780b      	ldrb	r3, [r1, #0]
   14aee:	2b00      	cmp	r3, #0
   14af0:	f000 8117 	beq.w	14d22 <_flash_used+0x112>
   14af4:	4b90      	ldr	r3, [pc, #576]	; (14d38 <_flash_used+0x128>)
   14af6:	681c      	ldr	r4, [r3, #0]
   14af8:	68a2      	ldr	r2, [r4, #8]
   14afa:	6863      	ldr	r3, [r4, #4]
   14afc:	429a      	cmp	r2, r3
   14afe:	d02d      	beq.n	14b5c <ipc_trace_handle+0xf4>
   14b00:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   14b04:	f8ad 3000 	strh.w	r3, [sp]
   14b08:	7823      	ldrb	r3, [r4, #0]
   14b0a:	466e      	mov	r6, sp
   14b0c:	f88d 3004 	strb.w	r3, [sp, #4]
   14b10:	6863      	ldr	r3, [r4, #4]
   14b12:	2105      	movs	r1, #5
   14b14:	429a      	cmp	r2, r3
   14b16:	bf2a      	itet	cs
   14b18:	6927      	ldrcs	r7, [r4, #16]
   14b1a:	1a9f      	subcc	r7, r3, r2
   14b1c:	1abf      	subcs	r7, r7, r2
   14b1e:	429a      	cmp	r2, r3
   14b20:	bf94      	ite	ls
   14b22:	2500      	movls	r5, #0
   14b24:	68e5      	ldrhi	r5, [r4, #12]
   14b26:	b2bf      	uxth	r7, r7
   14b28:	bf88      	it	hi
   14b2a:	1b5b      	subhi	r3, r3, r5
   14b2c:	4630      	mov	r0, r6
   14b2e:	bf88      	it	hi
   14b30:	b29d      	uxthhi	r5, r3
   14b32:	f8ad 7002 	strh.w	r7, [sp, #2]
   14b36:	f7fc fdb7 	bl	116a8 <bsd_os_trace_put>
   14b3a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14b3e:	68a0      	ldr	r0, [r4, #8]
   14b40:	f7fc fdb2 	bl	116a8 <bsd_os_trace_put>
   14b44:	68a3      	ldr	r3, [r4, #8]
   14b46:	6922      	ldr	r2, [r4, #16]
   14b48:	441f      	add	r7, r3
   14b4a:	4297      	cmp	r7, r2
   14b4c:	bf08      	it	eq
   14b4e:	68e3      	ldreq	r3, [r4, #12]
   14b50:	60a7      	str	r7, [r4, #8]
   14b52:	bf08      	it	eq
   14b54:	60a3      	streq	r3, [r4, #8]
   14b56:	2d00      	cmp	r5, #0
   14b58:	f040 80d2 	bne.w	14d00 <_flash_used+0xf0>
   14b5c:	4b77      	ldr	r3, [pc, #476]	; (14d3c <_flash_used+0x12c>)
   14b5e:	681c      	ldr	r4, [r3, #0]
   14b60:	68a2      	ldr	r2, [r4, #8]
   14b62:	6863      	ldr	r3, [r4, #4]
   14b64:	429a      	cmp	r2, r3
   14b66:	d02d      	beq.n	14bc4 <ipc_trace_handle+0x15c>
   14b68:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   14b6c:	f8ad 3000 	strh.w	r3, [sp]
   14b70:	7823      	ldrb	r3, [r4, #0]
   14b72:	466e      	mov	r6, sp
   14b74:	f88d 3004 	strb.w	r3, [sp, #4]
   14b78:	6863      	ldr	r3, [r4, #4]
   14b7a:	2105      	movs	r1, #5
   14b7c:	429a      	cmp	r2, r3
   14b7e:	bf2a      	itet	cs
   14b80:	6927      	ldrcs	r7, [r4, #16]
   14b82:	1a9f      	subcc	r7, r3, r2
   14b84:	1abf      	subcs	r7, r7, r2
   14b86:	429a      	cmp	r2, r3
   14b88:	bf94      	ite	ls
   14b8a:	2500      	movls	r5, #0
   14b8c:	68e5      	ldrhi	r5, [r4, #12]
   14b8e:	b2bf      	uxth	r7, r7
   14b90:	bf88      	it	hi
   14b92:	1b5b      	subhi	r3, r3, r5
   14b94:	4630      	mov	r0, r6
   14b96:	bf88      	it	hi
   14b98:	b29d      	uxthhi	r5, r3
   14b9a:	f8ad 7002 	strh.w	r7, [sp, #2]
   14b9e:	f7fc fd83 	bl	116a8 <bsd_os_trace_put>
   14ba2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14ba6:	68a0      	ldr	r0, [r4, #8]
   14ba8:	f7fc fd7e 	bl	116a8 <bsd_os_trace_put>
   14bac:	68a3      	ldr	r3, [r4, #8]
   14bae:	6922      	ldr	r2, [r4, #16]
   14bb0:	441f      	add	r7, r3
   14bb2:	4297      	cmp	r7, r2
   14bb4:	bf08      	it	eq
   14bb6:	68e3      	ldreq	r3, [r4, #12]
   14bb8:	60a7      	str	r7, [r4, #8]
   14bba:	bf08      	it	eq
   14bbc:	60a3      	streq	r3, [r4, #8]
   14bbe:	2d00      	cmp	r5, #0
   14bc0:	f040 808d 	bne.w	14cde <_flash_used+0xce>
   14bc4:	4b5e      	ldr	r3, [pc, #376]	; (14d40 <_flash_used+0x130>)
   14bc6:	681c      	ldr	r4, [r3, #0]
   14bc8:	68a2      	ldr	r2, [r4, #8]
   14bca:	6863      	ldr	r3, [r4, #4]
   14bcc:	429a      	cmp	r2, r3
   14bce:	f43f af7c 	beq.w	14aca <ipc_trace_handle+0x62>
   14bd2:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   14bd6:	f8ad 3000 	strh.w	r3, [sp]
   14bda:	7823      	ldrb	r3, [r4, #0]
   14bdc:	466e      	mov	r6, sp
   14bde:	f88d 3004 	strb.w	r3, [sp, #4]
   14be2:	6863      	ldr	r3, [r4, #4]
   14be4:	2105      	movs	r1, #5
   14be6:	429a      	cmp	r2, r3
   14be8:	bf2a      	itet	cs
   14bea:	6927      	ldrcs	r7, [r4, #16]
   14bec:	1a9f      	subcc	r7, r3, r2
   14bee:	1abf      	subcs	r7, r7, r2
   14bf0:	429a      	cmp	r2, r3
   14bf2:	bf94      	ite	ls
   14bf4:	2500      	movls	r5, #0
   14bf6:	68e5      	ldrhi	r5, [r4, #12]
   14bf8:	b2bf      	uxth	r7, r7
   14bfa:	bf88      	it	hi
   14bfc:	1b5b      	subhi	r3, r3, r5
   14bfe:	4630      	mov	r0, r6
   14c00:	bf88      	it	hi
   14c02:	b29d      	uxthhi	r5, r3
   14c04:	f8ad 7002 	strh.w	r7, [sp, #2]
   14c08:	f7fc fd4e 	bl	116a8 <bsd_os_trace_put>
   14c0c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14c10:	68a0      	ldr	r0, [r4, #8]
   14c12:	f7fc fd49 	bl	116a8 <bsd_os_trace_put>
   14c16:	68a3      	ldr	r3, [r4, #8]
   14c18:	6922      	ldr	r2, [r4, #16]
   14c1a:	441f      	add	r7, r3
   14c1c:	4297      	cmp	r7, r2
   14c1e:	bf08      	it	eq
   14c20:	68e3      	ldreq	r3, [r4, #12]
   14c22:	60a7      	str	r7, [r4, #8]
   14c24:	bf08      	it	eq
   14c26:	60a3      	streq	r3, [r4, #8]
   14c28:	2d00      	cmp	r5, #0
   14c2a:	f43f af4e 	beq.w	14aca <ipc_trace_handle+0x62>
   14c2e:	2105      	movs	r1, #5
   14c30:	4630      	mov	r0, r6
   14c32:	f8ad 5002 	strh.w	r5, [sp, #2]
   14c36:	f7fc fd37 	bl	116a8 <bsd_os_trace_put>
   14c3a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14c3e:	68e0      	ldr	r0, [r4, #12]
   14c40:	f7fc fd32 	bl	116a8 <bsd_os_trace_put>
   14c44:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14c48:	68e3      	ldr	r3, [r4, #12]
   14c4a:	4413      	add	r3, r2
   14c4c:	60a3      	str	r3, [r4, #8]
   14c4e:	e73c      	b.n	14aca <ipc_trace_handle+0x62>
   14c50:	4a38      	ldr	r2, [pc, #224]	; (14d34 <_flash_used+0x124>)
   14c52:	7811      	ldrb	r1, [r2, #0]
   14c54:	b109      	cbz	r1, 14c5a <_flash_used+0x4a>
   14c56:	2100      	movs	r1, #0
   14c58:	7011      	strb	r1, [r2, #0]
   14c5a:	68a5      	ldr	r5, [r4, #8]
   14c5c:	2d00      	cmp	r5, #0
   14c5e:	d039      	beq.n	14cd4 <_flash_used+0xc4>
   14c60:	f04f 0c00 	mov.w	ip, #0
   14c64:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 14d3c <_flash_used+0x12c>
   14c68:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 14d38 <_flash_used+0x128>
   14c6c:	4934      	ldr	r1, [pc, #208]	; (14d40 <_flash_used+0x130>)
   14c6e:	46e1      	mov	r9, ip
   14c70:	4666      	mov	r6, ip
   14c72:	4662      	mov	r2, ip
   14c74:	f8d1 e000 	ldr.w	lr, [r1]
   14c78:	f8da 8000 	ldr.w	r8, [sl]
   14c7c:	f8db 7000 	ldr.w	r7, [fp]
   14c80:	e008      	b.n	14c94 <_flash_used+0x84>
   14c82:	2963      	cmp	r1, #99	; 0x63
   14c84:	d016      	beq.n	14cb4 <_flash_used+0xa4>
   14c86:	2961      	cmp	r1, #97	; 0x61
   14c88:	bf04      	itt	eq
   14c8a:	4607      	moveq	r7, r0
   14c8c:	2601      	moveq	r6, #1
   14c8e:	3201      	adds	r2, #1
   14c90:	42aa      	cmp	r2, r5
   14c92:	d013      	beq.n	14cbc <_flash_used+0xac>
   14c94:	1c91      	adds	r1, r2, #2
   14c96:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   14c9a:	6848      	ldr	r0, [r1, #4]
   14c9c:	7801      	ldrb	r1, [r0, #0]
   14c9e:	2962      	cmp	r1, #98	; 0x62
   14ca0:	d1ef      	bne.n	14c82 <_flash_used+0x72>
   14ca2:	4680      	mov	r8, r0
   14ca4:	f04f 0901 	mov.w	r9, #1
   14ca8:	e7f1      	b.n	14c8e <_flash_used+0x7e>
   14caa:	f7fc fcb7 	bl	1161c <bsd_os_trace_irq_set>
   14cae:	b003      	add	sp, #12
   14cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cb4:	4686      	mov	lr, r0
   14cb6:	f04f 0c01 	mov.w	ip, #1
   14cba:	e7e8      	b.n	14c8e <_flash_used+0x7e>
   14cbc:	bba6      	cbnz	r6, 14d28 <_flash_used+0x118>
   14cbe:	f1b9 0f00 	cmp.w	r9, #0
   14cc2:	d001      	beq.n	14cc8 <_flash_used+0xb8>
   14cc4:	f8ca 8000 	str.w	r8, [sl]
   14cc8:	f1bc 0f00 	cmp.w	ip, #0
   14ccc:	d002      	beq.n	14cd4 <_flash_used+0xc4>
   14cce:	4a1c      	ldr	r2, [pc, #112]	; (14d40 <_flash_used+0x130>)
   14cd0:	f8c2 e000 	str.w	lr, [r2]
   14cd4:	2001      	movs	r0, #1
   14cd6:	2200      	movs	r2, #0
   14cd8:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   14cdc:	e6ed      	b.n	14aba <ipc_trace_handle+0x52>
   14cde:	2105      	movs	r1, #5
   14ce0:	4630      	mov	r0, r6
   14ce2:	f8ad 5002 	strh.w	r5, [sp, #2]
   14ce6:	f7fc fcdf 	bl	116a8 <bsd_os_trace_put>
   14cea:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14cee:	68e0      	ldr	r0, [r4, #12]
   14cf0:	f7fc fcda 	bl	116a8 <bsd_os_trace_put>
   14cf4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14cf8:	68e3      	ldr	r3, [r4, #12]
   14cfa:	4413      	add	r3, r2
   14cfc:	60a3      	str	r3, [r4, #8]
   14cfe:	e761      	b.n	14bc4 <ipc_trace_handle+0x15c>
   14d00:	2105      	movs	r1, #5
   14d02:	4630      	mov	r0, r6
   14d04:	f8ad 5002 	strh.w	r5, [sp, #2]
   14d08:	f7fc fcce 	bl	116a8 <bsd_os_trace_put>
   14d0c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14d10:	68e0      	ldr	r0, [r4, #12]
   14d12:	f7fc fcc9 	bl	116a8 <bsd_os_trace_put>
   14d16:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14d1a:	68e3      	ldr	r3, [r4, #12]
   14d1c:	4413      	add	r3, r2
   14d1e:	60a3      	str	r3, [r4, #8]
   14d20:	e71c      	b.n	14b5c <ipc_trace_handle+0xf4>
   14d22:	f7fc fc83 	bl	1162c <bsd_os_trace_irq_clear>
   14d26:	e6e5      	b.n	14af4 <ipc_trace_handle+0x8c>
   14d28:	f8cb 7000 	str.w	r7, [fp]
   14d2c:	e7c7      	b.n	14cbe <_flash_used+0xae>
   14d2e:	bf00      	nop
   14d30:	200207a0 	.word	0x200207a0
   14d34:	200265c4 	.word	0x200265c4
   14d38:	2002079c 	.word	0x2002079c
   14d3c:	20020794 	.word	0x20020794
   14d40:	20020798 	.word	0x20020798

00014d44 <rpc_trace_coredump_in_progress>:
   14d44:	4b01      	ldr	r3, [pc, #4]	; (14d4c <rpc_trace_coredump_in_progress+0x8>)
   14d46:	7818      	ldrb	r0, [r3, #0]
   14d48:	4770      	bx	lr
   14d4a:	bf00      	nop
   14d4c:	200265c4 	.word	0x200265c4

00014d50 <transport_reset>:
   14d50:	2000      	movs	r0, #0
   14d52:	4770      	bx	lr

00014d54 <transport_data_free>:
   14d54:	4b0b      	ldr	r3, [pc, #44]	; (14d84 <transport_data_free+0x30>)
   14d56:	e9d3 2300 	ldrd	r2, r3, [r3]
   14d5a:	4413      	add	r3, r2
   14d5c:	4298      	cmp	r0, r3
   14d5e:	d20d      	bcs.n	14d7c <transport_data_free+0x28>
   14d60:	4282      	cmp	r2, r0
   14d62:	d80b      	bhi.n	14d7c <transport_data_free+0x28>
   14d64:	b510      	push	{r4, lr}
   14d66:	4604      	mov	r4, r0
   14d68:	f000 fdfc 	bl	15964 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   14d6c:	b140      	cbz	r0, 14d80 <transport_data_free+0x2c>
   14d6e:	4a06      	ldr	r2, [pc, #24]	; (14d88 <transport_data_free+0x34>)
   14d70:	6084      	str	r4, [r0, #8]
   14d72:	6002      	str	r2, [r0, #0]
   14d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14d78:	f000 bd3c 	b.w	157f4 <rpc_transport_ipc_tx_send>
   14d7c:	f7fe bc58 	b.w	13630 <nrf_shared_free>
   14d80:	bd10      	pop	{r4, pc}
   14d82:	bf00      	nop
   14d84:	200207a4 	.word	0x200207a4
   14d88:	00020001 	.word	0x00020001

00014d8c <rpc_transport_ipc_init>:
   14d8c:	2800      	cmp	r0, #0
   14d8e:	d02b      	beq.n	14de8 <rpc_transport_ipc_init+0x5c>
   14d90:	b530      	push	{r4, r5, lr}
   14d92:	b089      	sub	sp, #36	; 0x24
   14d94:	aa01      	add	r2, sp, #4
   14d96:	4669      	mov	r1, sp
   14d98:	4604      	mov	r4, r0
   14d9a:	f000 fc41 	bl	15620 <rpc_transport_ipc_tx_init>
   14d9e:	4603      	mov	r3, r0
   14da0:	b140      	cbz	r0, 14db4 <rpc_transport_ipc_init+0x28>
   14da2:	4a13      	ldr	r2, [pc, #76]	; (14df0 <rpc_transport_ipc_init+0x64>)
   14da4:	f104 0028 	add.w	r0, r4, #40	; 0x28
   14da8:	c803      	ldmia	r0, {r0, r1}
   14daa:	e882 0003 	stmia.w	r2, {r0, r1}
   14dae:	4618      	mov	r0, r3
   14db0:	b009      	add	sp, #36	; 0x24
   14db2:	bd30      	pop	{r4, r5, pc}
   14db4:	e9dd 1200 	ldrd	r1, r2, [sp]
   14db8:	4620      	mov	r0, r4
   14dba:	f000 f857 	bl	14e6c <rpc_transport_ipc_rx_init>
   14dbe:	4603      	mov	r3, r0
   14dc0:	2800      	cmp	r0, #0
   14dc2:	d1ee      	bne.n	14da2 <rpc_transport_ipc_init+0x16>
   14dc4:	4b0b      	ldr	r3, [pc, #44]	; (14df4 <rpc_transport_ipc_init+0x68>)
   14dc6:	490c      	ldr	r1, [pc, #48]	; (14df8 <rpc_transport_ipc_init+0x6c>)
   14dc8:	480c      	ldr	r0, [pc, #48]	; (14dfc <rpc_transport_ipc_init+0x70>)
   14dca:	4a0d      	ldr	r2, [pc, #52]	; (14e00 <rpc_transport_ipc_init+0x74>)
   14dcc:	9303      	str	r3, [sp, #12]
   14dce:	4d0d      	ldr	r5, [pc, #52]	; (14e04 <rpc_transport_ipc_init+0x78>)
   14dd0:	4b0d      	ldr	r3, [pc, #52]	; (14e08 <rpc_transport_ipc_init+0x7c>)
   14dd2:	9104      	str	r1, [sp, #16]
   14dd4:	9005      	str	r0, [sp, #20]
   14dd6:	490d      	ldr	r1, [pc, #52]	; (14e0c <rpc_transport_ipc_init+0x80>)
   14dd8:	a802      	add	r0, sp, #8
   14dda:	9307      	str	r3, [sp, #28]
   14ddc:	9506      	str	r5, [sp, #24]
   14dde:	9202      	str	r2, [sp, #8]
   14de0:	f003 ffb4 	bl	18d4c <rpc_transport_register>
   14de4:	4603      	mov	r3, r0
   14de6:	e7dc      	b.n	14da2 <rpc_transport_ipc_init+0x16>
   14de8:	230e      	movs	r3, #14
   14dea:	4618      	mov	r0, r3
   14dec:	4770      	bx	lr
   14dee:	bf00      	nop
   14df0:	200207a4 	.word	0x200207a4
   14df4:	000158f5 	.word	0x000158f5
   14df8:	000159c5 	.word	0x000159c5
   14dfc:	00015489 	.word	0x00015489
   14e00:	000157f5 	.word	0x000157f5
   14e04:	00014d55 	.word	0x00014d55
   14e08:	00014d51 	.word	0x00014d51
   14e0c:	200207ac 	.word	0x200207ac

00014e10 <rpc_transport_rx_handle>:
   14e10:	b160      	cbz	r0, 14e2c <rpc_transport_rx_handle+0x1c>
   14e12:	b508      	push	{r3, lr}
   14e14:	6843      	ldr	r3, [r0, #4]
   14e16:	b2db      	uxtb	r3, r3
   14e18:	2b02      	cmp	r3, #2
   14e1a:	d00e      	beq.n	14e3a <rpc_transport_rx_handle+0x2a>
   14e1c:	6803      	ldr	r3, [r0, #0]
   14e1e:	0c1b      	lsrs	r3, r3, #16
   14e20:	2b02      	cmp	r3, #2
   14e22:	d005      	beq.n	14e30 <rpc_transport_rx_handle+0x20>
   14e24:	2b04      	cmp	r3, #4
   14e26:	d00e      	beq.n	14e46 <rpc_transport_rx_handle+0x36>
   14e28:	2000      	movs	r0, #0
   14e2a:	bd08      	pop	{r3, pc}
   14e2c:	2000      	movs	r0, #0
   14e2e:	4770      	bx	lr
   14e30:	6880      	ldr	r0, [r0, #8]
   14e32:	f7fe fbfd 	bl	13630 <nrf_shared_free>
   14e36:	2000      	movs	r0, #0
   14e38:	bd08      	pop	{r3, pc}
   14e3a:	4601      	mov	r1, r0
   14e3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14e40:	4803      	ldr	r0, [pc, #12]	; (14e50 <rpc_transport_rx_handle+0x40>)
   14e42:	f003 be75 	b.w	18b30 <rpc_transport_input>
   14e46:	4802      	ldr	r0, [pc, #8]	; (14e50 <rpc_transport_rx_handle+0x40>)
   14e48:	f003 ffe0 	bl	18e0c <rpc_transport_unregister>
   14e4c:	2000      	movs	r0, #0
   14e4e:	bd08      	pop	{r3, pc}
   14e50:	200207ac 	.word	0x200207ac

00014e54 <rpc_transport_ipc_shutdown>:
   14e54:	b508      	push	{r3, lr}
   14e56:	f000 fdbf 	bl	159d8 <rpc_transport_ipc_tx_suspend>
   14e5a:	f000 fb4b 	bl	154f4 <rpc_transport_ipc_rx_suspend>
   14e5e:	f000 fdc1 	bl	159e4 <rpc_transport_ipc_tx_shutdown>
   14e62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14e66:	f000 bb65 	b.w	15534 <rpc_transport_ipc_rx_shutdown>
   14e6a:	bf00      	nop

00014e6c <rpc_transport_ipc_rx_init>:
   14e6c:	2800      	cmp	r0, #0
   14e6e:	f000 80ff 	beq.w	15070 <rpc_transport_ipc_rx_init+0x204>
   14e72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e76:	6805      	ldr	r5, [r0, #0]
   14e78:	b095      	sub	sp, #84	; 0x54
   14e7a:	2d00      	cmp	r5, #0
   14e7c:	f000 80ee 	beq.w	1505c <rpc_transport_ipc_rx_init+0x1f0>
   14e80:	6883      	ldr	r3, [r0, #8]
   14e82:	2b00      	cmp	r3, #0
   14e84:	f000 80ea 	beq.w	1505c <rpc_transport_ipc_rx_init+0x1f0>
   14e88:	6907      	ldr	r7, [r0, #16]
   14e8a:	2f00      	cmp	r7, #0
   14e8c:	f000 80e6 	beq.w	1505c <rpc_transport_ipc_rx_init+0x1f0>
   14e90:	6a84      	ldr	r4, [r0, #40]	; 0x28
   14e92:	2c00      	cmp	r4, #0
   14e94:	f000 80e2 	beq.w	1505c <rpc_transport_ipc_rx_init+0x1f0>
   14e98:	6844      	ldr	r4, [r0, #4]
   14e9a:	2c1b      	cmp	r4, #27
   14e9c:	f240 80e3 	bls.w	15066 <rpc_transport_ipc_rx_init+0x1fa>
   14ea0:	68c4      	ldr	r4, [r0, #12]
   14ea2:	2c0b      	cmp	r4, #11
   14ea4:	f240 80df 	bls.w	15066 <rpc_transport_ipc_rx_init+0x1fa>
   14ea8:	f8d0 e014 	ldr.w	lr, [r0, #20]
   14eac:	f1be 0f17 	cmp.w	lr, #23
   14eb0:	f240 80d9 	bls.w	15066 <rpc_transport_ipc_rx_init+0x1fa>
   14eb4:	2600      	movs	r6, #0
   14eb6:	4604      	mov	r4, r0
   14eb8:	486f      	ldr	r0, [pc, #444]	; (15078 <rpc_transport_ipc_rx_init+0x20c>)
   14eba:	e9cd 1200 	strd	r1, r2, [sp]
   14ebe:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 15098 <rpc_transport_ipc_rx_init+0x22c>
   14ec2:	496e      	ldr	r1, [pc, #440]	; (1507c <rpc_transport_ipc_rx_init+0x210>)
   14ec4:	8006      	strh	r6, [r0, #0]
   14ec6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   14ec8:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 1509c <rpc_transport_ipc_rx_init+0x230>
   14ecc:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 150a0 <rpc_transport_ipc_rx_init+0x234>
   14ed0:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 150a4 <rpc_transport_ipc_rx_init+0x238>
   14ed4:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 150a8 <rpc_transport_ipc_rx_init+0x23c>
   14ed8:	4672      	mov	r2, lr
   14eda:	600e      	str	r6, [r1, #0]
   14edc:	f8ca 0000 	str.w	r0, [sl]
   14ee0:	4631      	mov	r1, r6
   14ee2:	4638      	mov	r0, r7
   14ee4:	f8cc 6000 	str.w	r6, [ip]
   14ee8:	f8cb 3000 	str.w	r3, [fp]
   14eec:	f8c8 6000 	str.w	r6, [r8]
   14ef0:	f8c9 6000 	str.w	r6, [r9]
   14ef4:	f008 f94d 	bl	1d192 <memset>
   14ef8:	69e3      	ldr	r3, [r4, #28]
   14efa:	4638      	mov	r0, r7
   14efc:	603b      	str	r3, [r7, #0]
   14efe:	69a3      	ldr	r3, [r4, #24]
   14f00:	607b      	str	r3, [r7, #4]
   14f02:	f7ff fcc9 	bl	14898 <ipc_trace_init>
   14f06:	2201      	movs	r2, #1
   14f08:	f04f 0c04 	mov.w	ip, #4
   14f0c:	4b5c      	ldr	r3, [pc, #368]	; (15080 <rpc_transport_ipc_rx_init+0x214>)
   14f0e:	495d      	ldr	r1, [pc, #372]	; (15084 <rpc_transport_ipc_rx_init+0x218>)
   14f10:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   14f14:	6809      	ldr	r1, [r1, #0]
   14f16:	2080      	movs	r0, #128	; 0x80
   14f18:	9104      	str	r1, [sp, #16]
   14f1a:	495b      	ldr	r1, [pc, #364]	; (15088 <rpc_transport_ipc_rx_init+0x21c>)
   14f1c:	f8dd e010 	ldr.w	lr, [sp, #16]
   14f20:	f8c3 6614 	str.w	r6, [r3, #1556]	; 0x614
   14f24:	6809      	ldr	r1, [r1, #0]
   14f26:	702e      	strb	r6, [r5, #0]
   14f28:	9103      	str	r1, [sp, #12]
   14f2a:	706e      	strb	r6, [r5, #1]
   14f2c:	70ee      	strb	r6, [r5, #3]
   14f2e:	70aa      	strb	r2, [r5, #2]
   14f30:	9903      	ldr	r1, [sp, #12]
   14f32:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   14f34:	f8db e000 	ldr.w	lr, [fp]
   14f38:	6069      	str	r1, [r5, #4]
   14f3a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   14f3c:	9c01      	ldr	r4, [sp, #4]
   14f3e:	60a9      	str	r1, [r5, #8]
   14f40:	60ec      	str	r4, [r5, #12]
   14f42:	9c00      	ldr	r4, [sp, #0]
   14f44:	4951      	ldr	r1, [pc, #324]	; (1508c <rpc_transport_ipc_rx_init+0x220>)
   14f46:	61af      	str	r7, [r5, #24]
   14f48:	f8c5 e014 	str.w	lr, [r5, #20]
   14f4c:	612c      	str	r4, [r5, #16]
   14f4e:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   14f52:	680c      	ldr	r4, [r1, #0]
   14f54:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   14f58:	9405      	str	r4, [sp, #20]
   14f5a:	9c05      	ldr	r4, [sp, #20]
   14f5c:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   14f60:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   14f64:	f44f 6780 	mov.w	r7, #1024	; 0x400
   14f68:	9406      	str	r4, [sp, #24]
   14f6a:	9c06      	ldr	r4, [sp, #24]
   14f6c:	2410      	movs	r4, #16
   14f6e:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   14f72:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   14f76:	4d46      	ldr	r5, [pc, #280]	; (15090 <rpc_transport_ipc_rx_init+0x224>)
   14f78:	9407      	str	r4, [sp, #28]
   14f7a:	9c07      	ldr	r4, [sp, #28]
   14f7c:	2440      	movs	r4, #64	; 0x40
   14f7e:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   14f82:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   14f86:	9408      	str	r4, [sp, #32]
   14f88:	9c08      	ldr	r4, [sp, #32]
   14f8a:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   14f8e:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   14f92:	9009      	str	r0, [sp, #36]	; 0x24
   14f94:	9809      	ldr	r0, [sp, #36]	; 0x24
   14f96:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
   14f9a:	6808      	ldr	r0, [r1, #0]
   14f9c:	900a      	str	r0, [sp, #40]	; 0x28
   14f9e:	980a      	ldr	r0, [sp, #40]	; 0x28
   14fa0:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
   14fa4:	6888      	ldr	r0, [r1, #8]
   14fa6:	900b      	str	r0, [sp, #44]	; 0x2c
   14fa8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   14faa:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
   14fae:	6908      	ldr	r0, [r1, #16]
   14fb0:	900c      	str	r0, [sp, #48]	; 0x30
   14fb2:	980c      	ldr	r0, [sp, #48]	; 0x30
   14fb4:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
   14fb8:	6988      	ldr	r0, [r1, #24]
   14fba:	900d      	str	r0, [sp, #52]	; 0x34
   14fbc:	980d      	ldr	r0, [sp, #52]	; 0x34
   14fbe:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
   14fc2:	69c8      	ldr	r0, [r1, #28]
   14fc4:	f501 7101 	add.w	r1, r1, #516	; 0x204
   14fc8:	900e      	str	r0, [sp, #56]	; 0x38
   14fca:	980e      	ldr	r0, [sp, #56]	; 0x38
   14fcc:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   14fd0:	4310      	orrs	r0, r2
   14fd2:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   14fd6:	680c      	ldr	r4, [r1, #0]
   14fd8:	482e      	ldr	r0, [pc, #184]	; (15094 <rpc_transport_ipc_rx_init+0x228>)
   14fda:	940f      	str	r4, [sp, #60]	; 0x3c
   14fdc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   14fde:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   14fe2:	ea44 040c 	orr.w	r4, r4, ip
   14fe6:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   14fea:	680c      	ldr	r4, [r1, #0]
   14fec:	9410      	str	r4, [sp, #64]	; 0x40
   14fee:	9c10      	ldr	r4, [sp, #64]	; 0x40
   14ff0:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   14ff4:	f044 0410 	orr.w	r4, r4, #16
   14ff8:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   14ffc:	680c      	ldr	r4, [r1, #0]
   14ffe:	9411      	str	r4, [sp, #68]	; 0x44
   15000:	9c11      	ldr	r4, [sp, #68]	; 0x44
   15002:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   15006:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   1500a:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1500e:	680c      	ldr	r4, [r1, #0]
   15010:	9412      	str	r4, [sp, #72]	; 0x48
   15012:	9c12      	ldr	r4, [sp, #72]	; 0x48
   15014:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   15018:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   1501c:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   15020:	f8da 3000 	ldr.w	r3, [sl]
   15024:	6809      	ldr	r1, [r1, #0]
   15026:	015b      	lsls	r3, r3, #5
   15028:	9113      	str	r1, [sp, #76]	; 0x4c
   1502a:	b2db      	uxtb	r3, r3
   1502c:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1502e:	f8c8 2000 	str.w	r2, [r8]
   15032:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   15036:	f8c0 7184 	str.w	r7, [r0, #388]	; 0x184
   1503a:	6047      	str	r7, [r0, #4]
   1503c:	9602      	str	r6, [sp, #8]
   1503e:	f8c5 6610 	str.w	r6, [r5, #1552]	; 0x610
   15042:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   15046:	9302      	str	r3, [sp, #8]
   15048:	9b02      	ldr	r3, [sp, #8]
   1504a:	f8d8 3000 	ldr.w	r3, [r8]
   1504e:	2b01      	cmp	r3, #1
   15050:	d0fb      	beq.n	1504a <rpc_transport_ipc_rx_init+0x1de>
   15052:	f8d9 0000 	ldr.w	r0, [r9]
   15056:	b015      	add	sp, #84	; 0x54
   15058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1505c:	f24c 000e 	movw	r0, #49166	; 0xc00e
   15060:	b015      	add	sp, #84	; 0x54
   15062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15066:	f24c 0009 	movw	r0, #49161	; 0xc009
   1506a:	b015      	add	sp, #84	; 0x54
   1506c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15070:	f24c 000e 	movw	r0, #49166	; 0xc00e
   15074:	4770      	bx	lr
   15076:	bf00      	nop
   15078:	20024e46 	.word	0x20024e46
   1507c:	200207bc 	.word	0x200207bc
   15080:	4002a000 	.word	0x4002a000
   15084:	4002a610 	.word	0x4002a610
   15088:	4002a614 	.word	0x4002a614
   1508c:	4002a590 	.word	0x4002a590
   15090:	40005000 	.word	0x40005000
   15094:	e000e100 	.word	0xe000e100
   15098:	200207b4 	.word	0x200207b4
   1509c:	200207c0 	.word	0x200207c0
   150a0:	200207b8 	.word	0x200207b8
   150a4:	200207c4 	.word	0x200207c4
   150a8:	200207b0 	.word	0x200207b0

000150ac <IPC_IRQHandler>:
   150ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150b0:	f44f 6580 	mov.w	r5, #1024	; 0x400
   150b4:	4ca7      	ldr	r4, [pc, #668]	; (15354 <IPC_IRQHandler+0x2a8>)
   150b6:	b087      	sub	sp, #28
   150b8:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   150bc:	f3bf 8f4f 	dsb	sy
   150c0:	f3bf 8f6f 	isb	sy
   150c4:	4ea4      	ldr	r6, [pc, #656]	; (15358 <IPC_IRQHandler+0x2ac>)
   150c6:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
   150ca:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   150ce:	061f      	lsls	r7, r3, #24
   150d0:	f100 80c8 	bmi.w	15264 <IPC_IRQHandler+0x1b8>
   150d4:	4ba0      	ldr	r3, [pc, #640]	; (15358 <IPC_IRQHandler+0x2ac>)
   150d6:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   150da:	07d0      	lsls	r0, r2, #31
   150dc:	f100 80d4 	bmi.w	15288 <IPC_IRQHandler+0x1dc>
   150e0:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   150e4:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   150e8:	f040 80b6 	bne.w	15258 <IPC_IRQHandler+0x1ac>
   150ec:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   150f0:	0749      	lsls	r1, r1, #29
   150f2:	f100 80e6 	bmi.w	152c2 <IPC_IRQHandler+0x216>
   150f6:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   150fa:	06da      	lsls	r2, r3, #27
   150fc:	f140 809d 	bpl.w	1523a <IPC_IRQHandler+0x18e>
   15100:	2100      	movs	r1, #0
   15102:	4a95      	ldr	r2, [pc, #596]	; (15358 <IPC_IRQHandler+0x2ac>)
   15104:	4b95      	ldr	r3, [pc, #596]	; (1535c <IPC_IRQHandler+0x2b0>)
   15106:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
   1510a:	681b      	ldr	r3, [r3, #0]
   1510c:	9304      	str	r3, [sp, #16]
   1510e:	9b04      	ldr	r3, [sp, #16]
   15110:	f8df 8270 	ldr.w	r8, [pc, #624]	; 15384 <IPC_IRQHandler+0x2d8>
   15114:	4f92      	ldr	r7, [pc, #584]	; (15360 <IPC_IRQHandler+0x2b4>)
   15116:	f8df 9270 	ldr.w	r9, [pc, #624]	; 15388 <IPC_IRQHandler+0x2dc>
   1511a:	f8d8 a000 	ldr.w	sl, [r8]
   1511e:	f8da 1000 	ldr.w	r1, [sl]
   15122:	2900      	cmp	r1, #0
   15124:	d03f      	beq.n	151a6 <IPC_IRQHandler+0xfa>
   15126:	2200      	movs	r2, #0
   15128:	4614      	mov	r4, r2
   1512a:	e002      	b.n	15132 <IPC_IRQHandler+0x86>
   1512c:	3401      	adds	r4, #1
   1512e:	428c      	cmp	r4, r1
   15130:	d227      	bcs.n	15182 <IPC_IRQHandler+0xd6>
   15132:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   15136:	68ab      	ldr	r3, [r5, #8]
   15138:	2b00      	cmp	r3, #0
   1513a:	d0f7      	beq.n	1512c <IPC_IRQHandler+0x80>
   1513c:	686e      	ldr	r6, [r5, #4]
   1513e:	b2f6      	uxtb	r6, r6
   15140:	2e01      	cmp	r6, #1
   15142:	d1f3      	bne.n	1512c <IPC_IRQHandler+0x80>
   15144:	6868      	ldr	r0, [r5, #4]
   15146:	f8b9 3000 	ldrh.w	r3, [r9]
   1514a:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   1514e:	d1ed      	bne.n	1512c <IPC_IRQHandler+0x80>
   15150:	686a      	ldr	r2, [r5, #4]
   15152:	3301      	adds	r3, #1
   15154:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   15158:	f042 0202 	orr.w	r2, r2, #2
   1515c:	606a      	str	r2, [r5, #4]
   1515e:	68a8      	ldr	r0, [r5, #8]
   15160:	f8a9 3000 	strh.w	r3, [r9]
   15164:	f7ff fe54 	bl	14e10 <rpc_transport_rx_handle>
   15168:	4632      	mov	r2, r6
   1516a:	b928      	cbnz	r0, 15178 <IPC_IRQHandler+0xcc>
   1516c:	686b      	ldr	r3, [r5, #4]
   1516e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15172:	f043 0303 	orr.w	r3, r3, #3
   15176:	606b      	str	r3, [r5, #4]
   15178:	f8da 1000 	ldr.w	r1, [sl]
   1517c:	3401      	adds	r4, #1
   1517e:	428c      	cmp	r4, r1
   15180:	d3d7      	bcc.n	15132 <IPC_IRQHandler+0x86>
   15182:	2a00      	cmp	r2, #0
   15184:	d1cd      	bne.n	15122 <IPC_IRQHandler+0x76>
   15186:	b171      	cbz	r1, 151a6 <IPC_IRQHandler+0xfa>
   15188:	4613      	mov	r3, r2
   1518a:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
   1518e:	6890      	ldr	r0, [r2, #8]
   15190:	3301      	adds	r3, #1
   15192:	b130      	cbz	r0, 151a2 <IPC_IRQHandler+0xf6>
   15194:	f8d2 b004 	ldr.w	fp, [r2, #4]
   15198:	fa5f fb8b 	uxtb.w	fp, fp
   1519c:	f1bb 0f01 	cmp.w	fp, #1
   151a0:	d003      	beq.n	151aa <IPC_IRQHandler+0xfe>
   151a2:	428b      	cmp	r3, r1
   151a4:	d1f1      	bne.n	1518a <IPC_IRQHandler+0xde>
   151a6:	f04f 0b00 	mov.w	fp, #0
   151aa:	f8d7 a000 	ldr.w	sl, [r7]
   151ae:	f8da 2000 	ldr.w	r2, [sl]
   151b2:	2a00      	cmp	r2, #0
   151b4:	d03d      	beq.n	15232 <IPC_IRQHandler+0x186>
   151b6:	2100      	movs	r1, #0
   151b8:	460c      	mov	r4, r1
   151ba:	e002      	b.n	151c2 <IPC_IRQHandler+0x116>
   151bc:	3401      	adds	r4, #1
   151be:	4294      	cmp	r4, r2
   151c0:	d227      	bcs.n	15212 <IPC_IRQHandler+0x166>
   151c2:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   151c6:	68ab      	ldr	r3, [r5, #8]
   151c8:	2b00      	cmp	r3, #0
   151ca:	d0f7      	beq.n	151bc <IPC_IRQHandler+0x110>
   151cc:	686e      	ldr	r6, [r5, #4]
   151ce:	b2f6      	uxtb	r6, r6
   151d0:	2e01      	cmp	r6, #1
   151d2:	d1f3      	bne.n	151bc <IPC_IRQHandler+0x110>
   151d4:	6868      	ldr	r0, [r5, #4]
   151d6:	f8b9 3000 	ldrh.w	r3, [r9]
   151da:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   151de:	d1ed      	bne.n	151bc <IPC_IRQHandler+0x110>
   151e0:	686a      	ldr	r2, [r5, #4]
   151e2:	3301      	adds	r3, #1
   151e4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   151e8:	f042 0202 	orr.w	r2, r2, #2
   151ec:	606a      	str	r2, [r5, #4]
   151ee:	68a8      	ldr	r0, [r5, #8]
   151f0:	f8a9 3000 	strh.w	r3, [r9]
   151f4:	f7ff fe0c 	bl	14e10 <rpc_transport_rx_handle>
   151f8:	4631      	mov	r1, r6
   151fa:	b928      	cbnz	r0, 15208 <IPC_IRQHandler+0x15c>
   151fc:	686a      	ldr	r2, [r5, #4]
   151fe:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
   15202:	f043 0303 	orr.w	r3, r3, #3
   15206:	606b      	str	r3, [r5, #4]
   15208:	f8da 2000 	ldr.w	r2, [sl]
   1520c:	3401      	adds	r4, #1
   1520e:	4294      	cmp	r4, r2
   15210:	d3d7      	bcc.n	151c2 <IPC_IRQHandler+0x116>
   15212:	2900      	cmp	r1, #0
   15214:	d1cd      	bne.n	151b2 <IPC_IRQHandler+0x106>
   15216:	b162      	cbz	r2, 15232 <IPC_IRQHandler+0x186>
   15218:	460b      	mov	r3, r1
   1521a:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   1521e:	6888      	ldr	r0, [r1, #8]
   15220:	3301      	adds	r3, #1
   15222:	b120      	cbz	r0, 1522e <IPC_IRQHandler+0x182>
   15224:	6849      	ldr	r1, [r1, #4]
   15226:	b2c9      	uxtb	r1, r1
   15228:	2901      	cmp	r1, #1
   1522a:	f43f af76 	beq.w	1511a <IPC_IRQHandler+0x6e>
   1522e:	4293      	cmp	r3, r2
   15230:	d1f3      	bne.n	1521a <IPC_IRQHandler+0x16e>
   15232:	f1bb 0f00 	cmp.w	fp, #0
   15236:	f47f af70 	bne.w	1511a <IPC_IRQHandler+0x6e>
   1523a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1523e:	4b49      	ldr	r3, [pc, #292]	; (15364 <IPC_IRQHandler+0x2b8>)
   15240:	4a44      	ldr	r2, [pc, #272]	; (15354 <IPC_IRQHandler+0x2a8>)
   15242:	681b      	ldr	r3, [r3, #0]
   15244:	015b      	lsls	r3, r3, #5
   15246:	b2db      	uxtb	r3, r3
   15248:	f882 332a 	strb.w	r3, [r2, #810]	; 0x32a
   1524c:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
   15250:	6051      	str	r1, [r2, #4]
   15252:	b007      	add	sp, #28
   15254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15258:	2206      	movs	r2, #6
   1525a:	4b43      	ldr	r3, [pc, #268]	; (15368 <IPC_IRQHandler+0x2bc>)
   1525c:	601a      	str	r2, [r3, #0]
   1525e:	b007      	add	sp, #28
   15260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15264:	f7ff fc00 	bl	14a68 <ipc_trace_handle>
   15268:	f7ff fd6c 	bl	14d44 <rpc_trace_coredump_in_progress>
   1526c:	2800      	cmp	r0, #0
   1526e:	d149      	bne.n	15304 <IPC_IRQHandler+0x258>
   15270:	4b3e      	ldr	r3, [pc, #248]	; (1536c <IPC_IRQHandler+0x2c0>)
   15272:	f8c6 011c 	str.w	r0, [r6, #284]	; 0x11c
   15276:	681b      	ldr	r3, [r3, #0]
   15278:	9301      	str	r3, [sp, #4]
   1527a:	9b01      	ldr	r3, [sp, #4]
   1527c:	4b36      	ldr	r3, [pc, #216]	; (15358 <IPC_IRQHandler+0x2ac>)
   1527e:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   15282:	07d0      	lsls	r0, r2, #31
   15284:	f57f af2c 	bpl.w	150e0 <IPC_IRQHandler+0x34>
   15288:	2000      	movs	r0, #0
   1528a:	f248 0202 	movw	r2, #32770	; 0x8002
   1528e:	4938      	ldr	r1, [pc, #224]	; (15370 <IPC_IRQHandler+0x2c4>)
   15290:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   15294:	6809      	ldr	r1, [r1, #0]
   15296:	9102      	str	r1, [sp, #8]
   15298:	9902      	ldr	r1, [sp, #8]
   1529a:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   1529e:	4293      	cmp	r3, r2
   152a0:	d040      	beq.n	15324 <IPC_IRQHandler+0x278>
   152a2:	d81e      	bhi.n	152e2 <IPC_IRQHandler+0x236>
   152a4:	2b00      	cmp	r3, #0
   152a6:	d04f      	beq.n	15348 <IPC_IRQHandler+0x29c>
   152a8:	2b02      	cmp	r3, #2
   152aa:	d942      	bls.n	15332 <IPC_IRQHandler+0x286>
   152ac:	f248 0201 	movw	r2, #32769	; 0x8001
   152b0:	4293      	cmp	r3, r2
   152b2:	d149      	bne.n	15348 <IPC_IRQHandler+0x29c>
   152b4:	2003      	movs	r0, #3
   152b6:	2207      	movs	r2, #7
   152b8:	492b      	ldr	r1, [pc, #172]	; (15368 <IPC_IRQHandler+0x2bc>)
   152ba:	4b2e      	ldr	r3, [pc, #184]	; (15374 <IPC_IRQHandler+0x2c8>)
   152bc:	6008      	str	r0, [r1, #0]
   152be:	601a      	str	r2, [r3, #0]
   152c0:	e7cd      	b.n	1525e <IPC_IRQHandler+0x1b2>
   152c2:	4d29      	ldr	r5, [pc, #164]	; (15368 <IPC_IRQHandler+0x2bc>)
   152c4:	6829      	ldr	r1, [r5, #0]
   152c6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   152ca:	2901      	cmp	r1, #1
   152cc:	492a      	ldr	r1, [pc, #168]	; (15378 <IPC_IRQHandler+0x2cc>)
   152ce:	d05d      	beq.n	1538c <IPC_IRQHandler+0x2e0>
   152d0:	680a      	ldr	r2, [r1, #0]
   152d2:	9203      	str	r2, [sp, #12]
   152d4:	9a03      	ldr	r2, [sp, #12]
   152d6:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   152da:	06db      	lsls	r3, r3, #27
   152dc:	f53f af10 	bmi.w	15100 <IPC_IRQHandler+0x54>
   152e0:	e716      	b.n	15110 <IPC_IRQHandler+0x64>
   152e2:	4a26      	ldr	r2, [pc, #152]	; (1537c <IPC_IRQHandler+0x2d0>)
   152e4:	4293      	cmp	r3, r2
   152e6:	d814      	bhi.n	15312 <IPC_IRQHandler+0x266>
   152e8:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   152ec:	d814      	bhi.n	15318 <IPC_IRQHandler+0x26c>
   152ee:	f248 0203 	movw	r2, #32771	; 0x8003
   152f2:	4293      	cmp	r3, r2
   152f4:	d128      	bne.n	15348 <IPC_IRQHandler+0x29c>
   152f6:	2003      	movs	r0, #3
   152f8:	2204      	movs	r2, #4
   152fa:	491b      	ldr	r1, [pc, #108]	; (15368 <IPC_IRQHandler+0x2bc>)
   152fc:	4b1d      	ldr	r3, [pc, #116]	; (15374 <IPC_IRQHandler+0x2c8>)
   152fe:	6008      	str	r0, [r1, #0]
   15300:	601a      	str	r2, [r3, #0]
   15302:	e7ac      	b.n	1525e <IPC_IRQHandler+0x1b2>
   15304:	23e0      	movs	r3, #224	; 0xe0
   15306:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
   1530a:	6065      	str	r5, [r4, #4]
   1530c:	b007      	add	sp, #28
   1530e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15312:	4a1b      	ldr	r2, [pc, #108]	; (15380 <IPC_IRQHandler+0x2d4>)
   15314:	4293      	cmp	r3, r2
   15316:	d117      	bne.n	15348 <IPC_IRQHandler+0x29c>
   15318:	2003      	movs	r0, #3
   1531a:	4913      	ldr	r1, [pc, #76]	; (15368 <IPC_IRQHandler+0x2bc>)
   1531c:	4a15      	ldr	r2, [pc, #84]	; (15374 <IPC_IRQHandler+0x2c8>)
   1531e:	6008      	str	r0, [r1, #0]
   15320:	6013      	str	r3, [r2, #0]
   15322:	e79c      	b.n	1525e <IPC_IRQHandler+0x1b2>
   15324:	2003      	movs	r0, #3
   15326:	2206      	movs	r2, #6
   15328:	490f      	ldr	r1, [pc, #60]	; (15368 <IPC_IRQHandler+0x2bc>)
   1532a:	4b12      	ldr	r3, [pc, #72]	; (15374 <IPC_IRQHandler+0x2c8>)
   1532c:	6008      	str	r0, [r1, #0]
   1532e:	601a      	str	r2, [r3, #0]
   15330:	e795      	b.n	1525e <IPC_IRQHandler+0x1b2>
   15332:	2303      	movs	r3, #3
   15334:	4618      	mov	r0, r3
   15336:	490c      	ldr	r1, [pc, #48]	; (15368 <IPC_IRQHandler+0x2bc>)
   15338:	4a0e      	ldr	r2, [pc, #56]	; (15374 <IPC_IRQHandler+0x2c8>)
   1533a:	600b      	str	r3, [r1, #0]
   1533c:	6013      	str	r3, [r2, #0]
   1533e:	b007      	add	sp, #28
   15340:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15344:	f7ff b906 	b.w	14554 <rpc_transport_ipc_fault_handler>
   15348:	2303      	movs	r3, #3
   1534a:	4907      	ldr	r1, [pc, #28]	; (15368 <IPC_IRQHandler+0x2bc>)
   1534c:	4a09      	ldr	r2, [pc, #36]	; (15374 <IPC_IRQHandler+0x2c8>)
   1534e:	600b      	str	r3, [r1, #0]
   15350:	6013      	str	r3, [r2, #0]
   15352:	e784      	b.n	1525e <IPC_IRQHandler+0x1b2>
   15354:	e000e100 	.word	0xe000e100
   15358:	4002a000 	.word	0x4002a000
   1535c:	4002a110 	.word	0x4002a110
   15360:	200207bc 	.word	0x200207bc
   15364:	200207b4 	.word	0x200207b4
   15368:	200207b8 	.word	0x200207b8
   1536c:	4002a11c 	.word	0x4002a11c
   15370:	4002a100 	.word	0x4002a100
   15374:	200207b0 	.word	0x200207b0
   15378:	4002a108 	.word	0x4002a108
   1537c:	04400004 	.word	0x04400004
   15380:	05500001 	.word	0x05500001
   15384:	200207c0 	.word	0x200207c0
   15388:	20024e46 	.word	0x20024e46
   1538c:	4a37      	ldr	r2, [pc, #220]	; (1546c <IPC_IRQHandler+0x3c0>)
   1538e:	680b      	ldr	r3, [r1, #0]
   15390:	6812      	ldr	r2, [r2, #0]
   15392:	9305      	str	r3, [sp, #20]
   15394:	6893      	ldr	r3, [r2, #8]
   15396:	4836      	ldr	r0, [pc, #216]	; (15470 <IPC_IRQHandler+0x3c4>)
   15398:	4936      	ldr	r1, [pc, #216]	; (15474 <IPC_IRQHandler+0x3c8>)
   1539a:	6003      	str	r3, [r0, #0]
   1539c:	6854      	ldr	r4, [r2, #4]
   1539e:	9a05      	ldr	r2, [sp, #20]
   153a0:	600c      	str	r4, [r1, #0]
   153a2:	b16b      	cbz	r3, 153c0 <IPC_IRQHandler+0x314>
   153a4:	b164      	cbz	r4, 153c0 <IPC_IRQHandler+0x314>
   153a6:	681b      	ldr	r3, [r3, #0]
   153a8:	2b10      	cmp	r3, #16
   153aa:	d802      	bhi.n	153b2 <IPC_IRQHandler+0x306>
   153ac:	6822      	ldr	r2, [r4, #0]
   153ae:	2a10      	cmp	r2, #16
   153b0:	d90c      	bls.n	153cc <IPC_IRQHandler+0x320>
   153b2:	2103      	movs	r1, #3
   153b4:	f24c 0206 	movw	r2, #49158	; 0xc006
   153b8:	4b2f      	ldr	r3, [pc, #188]	; (15478 <IPC_IRQHandler+0x3cc>)
   153ba:	6029      	str	r1, [r5, #0]
   153bc:	601a      	str	r2, [r3, #0]
   153be:	e74e      	b.n	1525e <IPC_IRQHandler+0x1b2>
   153c0:	2103      	movs	r1, #3
   153c2:	2210      	movs	r2, #16
   153c4:	4b2c      	ldr	r3, [pc, #176]	; (15478 <IPC_IRQHandler+0x3cc>)
   153c6:	6029      	str	r1, [r5, #0]
   153c8:	601a      	str	r2, [r3, #0]
   153ca:	e748      	b.n	1525e <IPC_IRQHandler+0x1b2>
   153cc:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 15484 <IPC_IRQHandler+0x3d8>
   153d0:	2a00      	cmp	r2, #0
   153d2:	d042      	beq.n	1545a <IPC_IRQHandler+0x3ae>
   153d4:	2300      	movs	r3, #0
   153d6:	f104 0904 	add.w	r9, r4, #4
   153da:	461e      	mov	r6, r3
   153dc:	e002      	b.n	153e4 <IPC_IRQHandler+0x338>
   153de:	3601      	adds	r6, #1
   153e0:	4296      	cmp	r6, r2
   153e2:	d22a      	bcs.n	1543a <IPC_IRQHandler+0x38e>
   153e4:	00f7      	lsls	r7, r6, #3
   153e6:	19e1      	adds	r1, r4, r7
   153e8:	6888      	ldr	r0, [r1, #8]
   153ea:	2800      	cmp	r0, #0
   153ec:	d0f7      	beq.n	153de <IPC_IRQHandler+0x332>
   153ee:	f8d1 a004 	ldr.w	sl, [r1, #4]
   153f2:	fa5f fa8a 	uxtb.w	sl, sl
   153f6:	f1ba 0f01 	cmp.w	sl, #1
   153fa:	d1f0      	bne.n	153de <IPC_IRQHandler+0x332>
   153fc:	f8d1 c004 	ldr.w	ip, [r1, #4]
   15400:	f8b8 0000 	ldrh.w	r0, [r8]
   15404:	ebb0 4f1c 	cmp.w	r0, ip, lsr #16
   15408:	d1e9      	bne.n	153de <IPC_IRQHandler+0x332>
   1540a:	684b      	ldr	r3, [r1, #4]
   1540c:	1c42      	adds	r2, r0, #1
   1540e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15412:	f043 0302 	orr.w	r3, r3, #2
   15416:	604b      	str	r3, [r1, #4]
   15418:	6888      	ldr	r0, [r1, #8]
   1541a:	f8a8 2000 	strh.w	r2, [r8]
   1541e:	f7ff fcf7 	bl	14e10 <rpc_transport_rx_handle>
   15422:	4653      	mov	r3, sl
   15424:	b938      	cbnz	r0, 15436 <IPC_IRQHandler+0x38a>
   15426:	f859 2007 	ldr.w	r2, [r9, r7]
   1542a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1542e:	f042 0203 	orr.w	r2, r2, #3
   15432:	f849 2007 	str.w	r2, [r9, r7]
   15436:	6822      	ldr	r2, [r4, #0]
   15438:	e7d1      	b.n	153de <IPC_IRQHandler+0x332>
   1543a:	2b00      	cmp	r3, #0
   1543c:	d1c8      	bne.n	153d0 <IPC_IRQHandler+0x324>
   1543e:	b912      	cbnz	r2, 15446 <IPC_IRQHandler+0x39a>
   15440:	e00b      	b.n	1545a <IPC_IRQHandler+0x3ae>
   15442:	4293      	cmp	r3, r2
   15444:	d009      	beq.n	1545a <IPC_IRQHandler+0x3ae>
   15446:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
   1544a:	6888      	ldr	r0, [r1, #8]
   1544c:	3301      	adds	r3, #1
   1544e:	2800      	cmp	r0, #0
   15450:	d0f7      	beq.n	15442 <IPC_IRQHandler+0x396>
   15452:	6849      	ldr	r1, [r1, #4]
   15454:	b2c9      	uxtb	r1, r1
   15456:	2901      	cmp	r1, #1
   15458:	d1f3      	bne.n	15442 <IPC_IRQHandler+0x396>
   1545a:	2002      	movs	r0, #2
   1545c:	4b07      	ldr	r3, [pc, #28]	; (1547c <IPC_IRQHandler+0x3d0>)
   1545e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   15462:	4a07      	ldr	r2, [pc, #28]	; (15480 <IPC_IRQHandler+0x3d4>)
   15464:	681b      	ldr	r3, [r3, #0]
   15466:	6028      	str	r0, [r5, #0]
   15468:	e6ec      	b.n	15244 <IPC_IRQHandler+0x198>
   1546a:	bf00      	nop
   1546c:	200207c4 	.word	0x200207c4
   15470:	200207c0 	.word	0x200207c0
   15474:	200207bc 	.word	0x200207bc
   15478:	200207b0 	.word	0x200207b0
   1547c:	200207b4 	.word	0x200207b4
   15480:	e000e100 	.word	0xe000e100
   15484:	20024e46 	.word	0x20024e46

00015488 <rpc_transport_msg_free>:
   15488:	b430      	push	{r4, r5}
   1548a:	4b18      	ldr	r3, [pc, #96]	; (154ec <rpc_transport_msg_free+0x64>)
   1548c:	681c      	ldr	r4, [r3, #0]
   1548e:	6825      	ldr	r5, [r4, #0]
   15490:	b16d      	cbz	r5, 154ae <rpc_transport_msg_free+0x26>
   15492:	68a3      	ldr	r3, [r4, #8]
   15494:	4283      	cmp	r3, r0
   15496:	d027      	beq.n	154e8 <rpc_transport_msg_free+0x60>
   15498:	2300      	movs	r3, #0
   1549a:	e002      	b.n	154a2 <rpc_transport_msg_free+0x1a>
   1549c:	6889      	ldr	r1, [r1, #8]
   1549e:	4281      	cmp	r1, r0
   154a0:	d019      	beq.n	154d6 <rpc_transport_msg_free+0x4e>
   154a2:	3301      	adds	r3, #1
   154a4:	00da      	lsls	r2, r3, #3
   154a6:	42ab      	cmp	r3, r5
   154a8:	eb04 0102 	add.w	r1, r4, r2
   154ac:	d1f6      	bne.n	1549c <rpc_transport_msg_free+0x14>
   154ae:	4b10      	ldr	r3, [pc, #64]	; (154f0 <rpc_transport_msg_free+0x68>)
   154b0:	681c      	ldr	r4, [r3, #0]
   154b2:	6825      	ldr	r5, [r4, #0]
   154b4:	b16d      	cbz	r5, 154d2 <rpc_transport_msg_free+0x4a>
   154b6:	68a3      	ldr	r3, [r4, #8]
   154b8:	4283      	cmp	r3, r0
   154ba:	d015      	beq.n	154e8 <rpc_transport_msg_free+0x60>
   154bc:	2300      	movs	r3, #0
   154be:	e002      	b.n	154c6 <rpc_transport_msg_free+0x3e>
   154c0:	6889      	ldr	r1, [r1, #8]
   154c2:	4281      	cmp	r1, r0
   154c4:	d007      	beq.n	154d6 <rpc_transport_msg_free+0x4e>
   154c6:	3301      	adds	r3, #1
   154c8:	00da      	lsls	r2, r3, #3
   154ca:	429d      	cmp	r5, r3
   154cc:	eb04 0102 	add.w	r1, r4, r2
   154d0:	d1f6      	bne.n	154c0 <rpc_transport_msg_free+0x38>
   154d2:	bc30      	pop	{r4, r5}
   154d4:	4770      	bx	lr
   154d6:	3204      	adds	r2, #4
   154d8:	58a3      	ldr	r3, [r4, r2]
   154da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   154de:	f043 0303 	orr.w	r3, r3, #3
   154e2:	50a3      	str	r3, [r4, r2]
   154e4:	bc30      	pop	{r4, r5}
   154e6:	4770      	bx	lr
   154e8:	2204      	movs	r2, #4
   154ea:	e7f5      	b.n	154d8 <rpc_transport_msg_free+0x50>
   154ec:	200207c0 	.word	0x200207c0
   154f0:	200207bc 	.word	0x200207bc

000154f4 <rpc_transport_ipc_rx_suspend>:
   154f4:	b410      	push	{r4}
   154f6:	2400      	movs	r4, #0
   154f8:	2010      	movs	r0, #16
   154fa:	2204      	movs	r2, #4
   154fc:	4b0a      	ldr	r3, [pc, #40]	; (15528 <rpc_transport_ipc_rx_suspend+0x34>)
   154fe:	490b      	ldr	r1, [pc, #44]	; (1552c <rpc_transport_ipc_rx_suspend+0x38>)
   15500:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   15504:	680c      	ldr	r4, [r1, #0]
   15506:	b083      	sub	sp, #12
   15508:	9401      	str	r4, [sp, #4]
   1550a:	9c01      	ldr	r4, [sp, #4]
   1550c:	f5a1 7126 	sub.w	r1, r1, #664	; 0x298
   15510:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   15514:	6809      	ldr	r1, [r1, #0]
   15516:	4b06      	ldr	r3, [pc, #24]	; (15530 <rpc_transport_ipc_rx_suspend+0x3c>)
   15518:	9100      	str	r1, [sp, #0]
   1551a:	9900      	ldr	r1, [sp, #0]
   1551c:	601a      	str	r2, [r3, #0]
   1551e:	b003      	add	sp, #12
   15520:	f85d 4b04 	ldr.w	r4, [sp], #4
   15524:	4770      	bx	lr
   15526:	bf00      	nop
   15528:	4002a000 	.word	0x4002a000
   1552c:	4002a5a0 	.word	0x4002a5a0
   15530:	200207b8 	.word	0x200207b8

00015534 <rpc_transport_ipc_rx_shutdown>:
   15534:	b4f0      	push	{r4, r5, r6, r7}
   15536:	4a32      	ldr	r2, [pc, #200]	; (15600 <rpc_transport_ipc_rx_shutdown+0xcc>)
   15538:	b08c      	sub	sp, #48	; 0x30
   1553a:	6813      	ldr	r3, [r2, #0]
   1553c:	2b06      	cmp	r3, #6
   1553e:	d1fc      	bne.n	1553a <rpc_transport_ipc_rx_shutdown+0x6>
   15540:	2000      	movs	r0, #0
   15542:	2201      	movs	r2, #1
   15544:	210a      	movs	r1, #10
   15546:	4b2f      	ldr	r3, [pc, #188]	; (15604 <rpc_transport_ipc_rx_shutdown+0xd0>)
   15548:	9000      	str	r0, [sp, #0]
   1554a:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
   1554e:	f8d3 0610 	ldr.w	r0, [r3, #1552]	; 0x610
   15552:	9000      	str	r0, [sp, #0]
   15554:	9800      	ldr	r0, [sp, #0]
   15556:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   1555a:	9101      	str	r1, [sp, #4]
   1555c:	9b01      	ldr	r3, [sp, #4]
   1555e:	b12b      	cbz	r3, 1556c <rpc_transport_ipc_rx_shutdown+0x38>
   15560:	9b01      	ldr	r3, [sp, #4]
   15562:	3b01      	subs	r3, #1
   15564:	9301      	str	r3, [sp, #4]
   15566:	9b01      	ldr	r3, [sp, #4]
   15568:	2b00      	cmp	r3, #0
   1556a:	d1f9      	bne.n	15560 <rpc_transport_ipc_rx_shutdown+0x2c>
   1556c:	2200      	movs	r2, #0
   1556e:	2601      	movs	r6, #1
   15570:	2504      	movs	r5, #4
   15572:	2410      	movs	r4, #16
   15574:	4923      	ldr	r1, [pc, #140]	; (15604 <rpc_transport_ipc_rx_shutdown+0xd0>)
   15576:	4b24      	ldr	r3, [pc, #144]	; (15608 <rpc_transport_ipc_rx_shutdown+0xd4>)
   15578:	f8c1 2614 	str.w	r2, [r1, #1556]	; 0x614
   1557c:	f501 3115 	add.w	r1, r1, #152576	; 0x25400
   15580:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   15584:	f501 71c8 	add.w	r1, r1, #400	; 0x190
   15588:	6809      	ldr	r1, [r1, #0]
   1558a:	2040      	movs	r0, #64	; 0x40
   1558c:	9102      	str	r1, [sp, #8]
   1558e:	491f      	ldr	r1, [pc, #124]	; (1560c <rpc_transport_ipc_rx_shutdown+0xd8>)
   15590:	9f02      	ldr	r7, [sp, #8]
   15592:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
   15596:	680f      	ldr	r7, [r1, #0]
   15598:	2180      	movs	r1, #128	; 0x80
   1559a:	9703      	str	r7, [sp, #12]
   1559c:	4f1c      	ldr	r7, [pc, #112]	; (15610 <rpc_transport_ipc_rx_shutdown+0xdc>)
   1559e:	f8dd c00c 	ldr.w	ip, [sp, #12]
   155a2:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   155a6:	683f      	ldr	r7, [r7, #0]
   155a8:	9704      	str	r7, [sp, #16]
   155aa:	4f1a      	ldr	r7, [pc, #104]	; (15614 <rpc_transport_ipc_rx_shutdown+0xe0>)
   155ac:	f8dd c010 	ldr.w	ip, [sp, #16]
   155b0:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
   155b4:	683f      	ldr	r7, [r7, #0]
   155b6:	9705      	str	r7, [sp, #20]
   155b8:	9f05      	ldr	r7, [sp, #20]
   155ba:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
   155be:	4a16      	ldr	r2, [pc, #88]	; (15618 <rpc_transport_ipc_rx_shutdown+0xe4>)
   155c0:	6812      	ldr	r2, [r2, #0]
   155c2:	9206      	str	r2, [sp, #24]
   155c4:	4a15      	ldr	r2, [pc, #84]	; (1561c <rpc_transport_ipc_rx_shutdown+0xe8>)
   155c6:	9f06      	ldr	r7, [sp, #24]
   155c8:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
   155cc:	6816      	ldr	r6, [r2, #0]
   155ce:	9607      	str	r6, [sp, #28]
   155d0:	9e07      	ldr	r6, [sp, #28]
   155d2:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
   155d6:	6815      	ldr	r5, [r2, #0]
   155d8:	9508      	str	r5, [sp, #32]
   155da:	9d08      	ldr	r5, [sp, #32]
   155dc:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
   155e0:	6814      	ldr	r4, [r2, #0]
   155e2:	9409      	str	r4, [sp, #36]	; 0x24
   155e4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   155e6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   155ea:	6810      	ldr	r0, [r2, #0]
   155ec:	900a      	str	r0, [sp, #40]	; 0x28
   155ee:	980a      	ldr	r0, [sp, #40]	; 0x28
   155f0:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
   155f4:	6813      	ldr	r3, [r2, #0]
   155f6:	930b      	str	r3, [sp, #44]	; 0x2c
   155f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   155fa:	b00c      	add	sp, #48	; 0x30
   155fc:	bcf0      	pop	{r4, r5, r6, r7}
   155fe:	4770      	bx	lr
   15600:	200207b8 	.word	0x200207b8
   15604:	40005000 	.word	0x40005000
   15608:	4002a000 	.word	0x4002a000
   1560c:	4002a598 	.word	0x4002a598
   15610:	4002a5a0 	.word	0x4002a5a0
   15614:	4002a5a8 	.word	0x4002a5a8
   15618:	4002a5ac 	.word	0x4002a5ac
   1561c:	4002a308 	.word	0x4002a308

00015620 <rpc_transport_ipc_tx_init>:
   15620:	2800      	cmp	r0, #0
   15622:	f000 80b8 	beq.w	15796 <rpc_transport_ipc_tx_init+0x176>
   15626:	2900      	cmp	r1, #0
   15628:	f000 80b5 	beq.w	15796 <rpc_transport_ipc_tx_init+0x176>
   1562c:	2a00      	cmp	r2, #0
   1562e:	f000 80b2 	beq.w	15796 <rpc_transport_ipc_tx_init+0x176>
   15632:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15636:	6a04      	ldr	r4, [r0, #32]
   15638:	b085      	sub	sp, #20
   1563a:	2c00      	cmp	r4, #0
   1563c:	f000 80a6 	beq.w	1578c <rpc_transport_ipc_tx_init+0x16c>
   15640:	6a40      	ldr	r0, [r0, #36]	; 0x24
   15642:	2800      	cmp	r0, #0
   15644:	f000 80a2 	beq.w	1578c <rpc_transport_ipc_tx_init+0x16c>
   15648:	f642 4587 	movw	r5, #11399	; 0x2c87
   1564c:	f04f 0a00 	mov.w	sl, #0
   15650:	4e55      	ldr	r6, [pc, #340]	; (157a8 <rpc_transport_ipc_tx_init+0x188>)
   15652:	42a8      	cmp	r0, r5
   15654:	f886 a000 	strb.w	sl, [r6]
   15658:	f240 80a0 	bls.w	1579c <rpc_transport_ipc_tx_init+0x17c>
   1565c:	2708      	movs	r7, #8
   1565e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 157e0 <rpc_transport_ipc_tx_init+0x1c0>
   15662:	4620      	mov	r0, r4
   15664:	4616      	mov	r6, r2
   15666:	460d      	mov	r5, r1
   15668:	2244      	movs	r2, #68	; 0x44
   1566a:	4651      	mov	r1, sl
   1566c:	f8c9 4000 	str.w	r4, [r9]
   15670:	f007 fd8f 	bl	1d192 <memset>
   15674:	f8d9 2000 	ldr.w	r2, [r9]
   15678:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1567c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 157e4 <rpc_transport_ipc_tx_init+0x1c4>
   15680:	f882 a001 	strb.w	sl, [r2, #1]
   15684:	f882 a002 	strb.w	sl, [r2, #2]
   15688:	f882 a003 	strb.w	sl, [r2, #3]
   1568c:	7017      	strb	r7, [r2, #0]
   1568e:	4618      	mov	r0, r3
   15690:	2244      	movs	r2, #68	; 0x44
   15692:	4651      	mov	r1, sl
   15694:	f8c8 3000 	str.w	r3, [r8]
   15698:	f007 fd7b 	bl	1d192 <memset>
   1569c:	f8d8 2000 	ldr.w	r2, [r8]
   156a0:	f104 0388 	add.w	r3, r4, #136	; 0x88
   156a4:	f8df b140 	ldr.w	fp, [pc, #320]	; 157e8 <rpc_transport_ipc_tx_init+0x1c8>
   156a8:	7017      	strb	r7, [r2, #0]
   156aa:	f882 a001 	strb.w	sl, [r2, #1]
   156ae:	f882 a002 	strb.w	sl, [r2, #2]
   156b2:	f882 a003 	strb.w	sl, [r2, #3]
   156b6:	4618      	mov	r0, r3
   156b8:	f44f 7200 	mov.w	r2, #512	; 0x200
   156bc:	4651      	mov	r1, sl
   156be:	f8cb 3000 	str.w	r3, [fp]
   156c2:	f007 fd66 	bl	1d192 <memset>
   156c6:	4b39      	ldr	r3, [pc, #228]	; (157ac <rpc_transport_ipc_tx_init+0x18c>)
   156c8:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   156cc:	f8c3 c000 	str.w	ip, [r3]
   156d0:	4651      	mov	r1, sl
   156d2:	4660      	mov	r0, ip
   156d4:	f44f 7200 	mov.w	r2, #512	; 0x200
   156d8:	f007 fd5b 	bl	1d192 <memset>
   156dc:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   156e0:	2106      	movs	r1, #6
   156e2:	f04f 0e01 	mov.w	lr, #1
   156e6:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   156ea:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   156ee:	4b30      	ldr	r3, [pc, #192]	; (157b0 <rpc_transport_ipc_tx_init+0x190>)
   156f0:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   156f4:	605c      	str	r4, [r3, #4]
   156f6:	4c2f      	ldr	r4, [pc, #188]	; (157b4 <rpc_transport_ipc_tx_init+0x194>)
   156f8:	f8c3 c008 	str.w	ip, [r3, #8]
   156fc:	8199      	strh	r1, [r3, #12]
   156fe:	f8a3 e000 	strh.w	lr, [r3]
   15702:	4619      	mov	r1, r3
   15704:	611c      	str	r4, [r3, #16]
   15706:	4b2c      	ldr	r3, [pc, #176]	; (157b8 <rpc_transport_ipc_tx_init+0x198>)
   15708:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 157ec <rpc_transport_ipc_tx_init+0x1cc>
   1570c:	6120      	str	r0, [r4, #16]
   1570e:	482b      	ldr	r0, [pc, #172]	; (157bc <rpc_transport_ipc_tx_init+0x19c>)
   15710:	6063      	str	r3, [r4, #4]
   15712:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   15716:	60a0      	str	r0, [r4, #8]
   15718:	f8c4 c000 	str.w	ip, [r4]
   1571c:	4828      	ldr	r0, [pc, #160]	; (157c0 <rpc_transport_ipc_tx_init+0x1a0>)
   1571e:	60e3      	str	r3, [r4, #12]
   15720:	6162      	str	r2, [r4, #20]
   15722:	f7fd fe4b 	bl	133bc <nrf_mem_register>
   15726:	2800      	cmp	r0, #0
   15728:	d132      	bne.n	15790 <rpc_transport_ipc_tx_init+0x170>
   1572a:	f04f 0c02 	mov.w	ip, #2
   1572e:	2420      	movs	r4, #32
   15730:	f8d9 1000 	ldr.w	r1, [r9]
   15734:	f8db 2000 	ldr.w	r2, [fp]
   15738:	6029      	str	r1, [r5, #0]
   1573a:	4b1c      	ldr	r3, [pc, #112]	; (157ac <rpc_transport_ipc_tx_init+0x18c>)
   1573c:	f8d8 1000 	ldr.w	r1, [r8]
   15740:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 157f0 <rpc_transport_ipc_tx_init+0x1d0>
   15744:	4d1f      	ldr	r5, [pc, #124]	; (157c4 <rpc_transport_ipc_tx_init+0x1a4>)
   15746:	6031      	str	r1, [r6, #0]
   15748:	f8ce 2000 	str.w	r2, [lr]
   1574c:	681b      	ldr	r3, [r3, #0]
   1574e:	491e      	ldr	r1, [pc, #120]	; (157c8 <rpc_transport_ipc_tx_init+0x1a8>)
   15750:	f502 7200 	add.w	r2, r2, #512	; 0x200
   15754:	602a      	str	r2, [r5, #0]
   15756:	4e1d      	ldr	r6, [pc, #116]	; (157cc <rpc_transport_ipc_tx_init+0x1ac>)
   15758:	4a1d      	ldr	r2, [pc, #116]	; (157d0 <rpc_transport_ipc_tx_init+0x1b0>)
   1575a:	4d1e      	ldr	r5, [pc, #120]	; (157d4 <rpc_transport_ipc_tx_init+0x1b4>)
   1575c:	600b      	str	r3, [r1, #0]
   1575e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   15762:	491d      	ldr	r1, [pc, #116]	; (157d8 <rpc_transport_ipc_tx_init+0x1b8>)
   15764:	6033      	str	r3, [r6, #0]
   15766:	8028      	strh	r0, [r5, #0]
   15768:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   1576c:	6809      	ldr	r1, [r1, #0]
   1576e:	4b1b      	ldr	r3, [pc, #108]	; (157dc <rpc_transport_ipc_tx_init+0x1bc>)
   15770:	9103      	str	r1, [sp, #12]
   15772:	9903      	ldr	r1, [sp, #12]
   15774:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   15778:	6819      	ldr	r1, [r3, #0]
   1577a:	443b      	add	r3, r7
   1577c:	9102      	str	r1, [sp, #8]
   1577e:	9902      	ldr	r1, [sp, #8]
   15780:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   15784:	681b      	ldr	r3, [r3, #0]
   15786:	9301      	str	r3, [sp, #4]
   15788:	9b01      	ldr	r3, [sp, #4]
   1578a:	e001      	b.n	15790 <rpc_transport_ipc_tx_init+0x170>
   1578c:	f24c 0007 	movw	r0, #49159	; 0xc007
   15790:	b005      	add	sp, #20
   15792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15796:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1579a:	4770      	bx	lr
   1579c:	f24c 0004 	movw	r0, #49156	; 0xc004
   157a0:	b005      	add	sp, #20
   157a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157a6:	bf00      	nop
   157a8:	200265c5 	.word	0x200265c5
   157ac:	200207f0 	.word	0x200207f0
   157b0:	200207dc 	.word	0x200207dc
   157b4:	20020800 	.word	0x20020800
   157b8:	00040080 	.word	0x00040080
   157bc:	00040100 	.word	0x00040100
   157c0:	200207c8 	.word	0x200207c8
   157c4:	200207d4 	.word	0x200207d4
   157c8:	200207d0 	.word	0x200207d0
   157cc:	200207cc 	.word	0x200207cc
   157d0:	4002a000 	.word	0x4002a000
   157d4:	20024e48 	.word	0x20024e48
   157d8:	4002a514 	.word	0x4002a514
   157dc:	4002a51c 	.word	0x4002a51c
   157e0:	200207fc 	.word	0x200207fc
   157e4:	200207f4 	.word	0x200207f4
   157e8:	200207f8 	.word	0x200207f8
   157ec:	00080040 	.word	0x00080040
   157f0:	200207d8 	.word	0x200207d8

000157f4 <rpc_transport_ipc_tx_send>:
   157f4:	2800      	cmp	r0, #0
   157f6:	d05f      	beq.n	158b8 <rpc_transport_ipc_tx_send+0xc4>
   157f8:	b470      	push	{r4, r5, r6}
   157fa:	4b33      	ldr	r3, [pc, #204]	; (158c8 <rpc_transport_ipc_tx_send+0xd4>)
   157fc:	b083      	sub	sp, #12
   157fe:	681a      	ldr	r2, [r3, #0]
   15800:	4b32      	ldr	r3, [pc, #200]	; (158cc <rpc_transport_ipc_tx_send+0xd8>)
   15802:	4282      	cmp	r2, r0
   15804:	d81e      	bhi.n	15844 <rpc_transport_ipc_tx_send+0x50>
   15806:	681b      	ldr	r3, [r3, #0]
   15808:	4931      	ldr	r1, [pc, #196]	; (158d0 <rpc_transport_ipc_tx_send+0xdc>)
   1580a:	4283      	cmp	r3, r0
   1580c:	6809      	ldr	r1, [r1, #0]
   1580e:	d803      	bhi.n	15818 <rpc_transport_ipc_tx_send+0x24>
   15810:	4c30      	ldr	r4, [pc, #192]	; (158d4 <rpc_transport_ipc_tx_send+0xe0>)
   15812:	6824      	ldr	r4, [r4, #0]
   15814:	4284      	cmp	r4, r0
   15816:	d847      	bhi.n	158a8 <rpc_transport_ipc_tx_send+0xb4>
   15818:	4281      	cmp	r1, r0
   1581a:	d90e      	bls.n	1583a <rpc_transport_ipc_tx_send+0x46>
   1581c:	4b2e      	ldr	r3, [pc, #184]	; (158d8 <rpc_transport_ipc_tx_send+0xe4>)
   1581e:	781b      	ldrb	r3, [r3, #0]
   15820:	2b00      	cmp	r3, #0
   15822:	d14c      	bne.n	158be <rpc_transport_ipc_tx_send+0xca>
   15824:	1a83      	subs	r3, r0, r2
   15826:	492d      	ldr	r1, [pc, #180]	; (158dc <rpc_transport_ipc_tx_send+0xe8>)
   15828:	099e      	lsrs	r6, r3, #6
   1582a:	069b      	lsls	r3, r3, #26
   1582c:	680a      	ldr	r2, [r1, #0]
   1582e:	4c2c      	ldr	r4, [pc, #176]	; (158e0 <rpc_transport_ipc_tx_send+0xec>)
   15830:	f04f 0103 	mov.w	r1, #3
   15834:	f04f 0502 	mov.w	r5, #2
   15838:	d014      	beq.n	15864 <rpc_transport_ipc_tx_send+0x70>
   1583a:	f24c 0010 	movw	r0, #49168	; 0xc010
   1583e:	b003      	add	sp, #12
   15840:	bc70      	pop	{r4, r5, r6}
   15842:	4770      	bx	lr
   15844:	681b      	ldr	r3, [r3, #0]
   15846:	4298      	cmp	r0, r3
   15848:	d3f7      	bcc.n	1583a <rpc_transport_ipc_tx_send+0x46>
   1584a:	4a22      	ldr	r2, [pc, #136]	; (158d4 <rpc_transport_ipc_tx_send+0xe0>)
   1584c:	6812      	ldr	r2, [r2, #0]
   1584e:	4290      	cmp	r0, r2
   15850:	d2f3      	bcs.n	1583a <rpc_transport_ipc_tx_send+0x46>
   15852:	2101      	movs	r1, #1
   15854:	1ac3      	subs	r3, r0, r3
   15856:	4a23      	ldr	r2, [pc, #140]	; (158e4 <rpc_transport_ipc_tx_send+0xf0>)
   15858:	099e      	lsrs	r6, r3, #6
   1585a:	069b      	lsls	r3, r3, #26
   1585c:	460d      	mov	r5, r1
   1585e:	6812      	ldr	r2, [r2, #0]
   15860:	4c21      	ldr	r4, [pc, #132]	; (158e8 <rpc_transport_ipc_tx_send+0xf4>)
   15862:	d1ea      	bne.n	1583a <rpc_transport_ipc_tx_send+0x46>
   15864:	6843      	ldr	r3, [r0, #4]
   15866:	b2db      	uxtb	r3, r3
   15868:	429d      	cmp	r5, r3
   1586a:	d120      	bne.n	158ae <rpc_transport_ipc_tx_send+0xba>
   1586c:	2020      	movs	r0, #32
   1586e:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
   15872:	4d1e      	ldr	r5, [pc, #120]	; (158ec <rpc_transport_ipc_tx_send+0xf8>)
   15874:	6853      	ldr	r3, [r2, #4]
   15876:	882e      	ldrh	r6, [r5, #0]
   15878:	b29b      	uxth	r3, r3
   1587a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1587e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15882:	f043 0301 	orr.w	r3, r3, #1
   15886:	6053      	str	r3, [r2, #4]
   15888:	bf00      	nop
   1588a:	3801      	subs	r0, #1
   1588c:	d1fc      	bne.n	15888 <rpc_transport_ipc_tx_send+0x94>
   1588e:	2201      	movs	r2, #1
   15890:	4b17      	ldr	r3, [pc, #92]	; (158f0 <rpc_transport_ipc_tx_send+0xfc>)
   15892:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   15896:	6822      	ldr	r2, [r4, #0]
   15898:	882b      	ldrh	r3, [r5, #0]
   1589a:	9201      	str	r2, [sp, #4]
   1589c:	9a01      	ldr	r2, [sp, #4]
   1589e:	3301      	adds	r3, #1
   158a0:	802b      	strh	r3, [r5, #0]
   158a2:	b003      	add	sp, #12
   158a4:	bc70      	pop	{r4, r5, r6}
   158a6:	4770      	bx	lr
   158a8:	4281      	cmp	r1, r0
   158aa:	d9d2      	bls.n	15852 <rpc_transport_ipc_tx_send+0x5e>
   158ac:	e7b6      	b.n	1581c <rpc_transport_ipc_tx_send+0x28>
   158ae:	f24c 0007 	movw	r0, #49159	; 0xc007
   158b2:	b003      	add	sp, #12
   158b4:	bc70      	pop	{r4, r5, r6}
   158b6:	4770      	bx	lr
   158b8:	f24c 000e 	movw	r0, #49166	; 0xc00e
   158bc:	4770      	bx	lr
   158be:	f24c 000f 	movw	r0, #49167	; 0xc00f
   158c2:	b003      	add	sp, #12
   158c4:	bc70      	pop	{r4, r5, r6}
   158c6:	4770      	bx	lr
   158c8:	200207d8 	.word	0x200207d8
   158cc:	200207d0 	.word	0x200207d0
   158d0:	200207d4 	.word	0x200207d4
   158d4:	200207cc 	.word	0x200207cc
   158d8:	200265c5 	.word	0x200265c5
   158dc:	200207fc 	.word	0x200207fc
   158e0:	4002a00c 	.word	0x4002a00c
   158e4:	200207f4 	.word	0x200207f4
   158e8:	4002a004 	.word	0x4002a004
   158ec:	20024e48 	.word	0x20024e48
   158f0:	4002a000 	.word	0x4002a000

000158f4 <rpc_transport_ipc_tx_rpc_data_alloc>:
   158f4:	4b18      	ldr	r3, [pc, #96]	; (15958 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   158f6:	781b      	ldrb	r3, [r3, #0]
   158f8:	bb63      	cbnz	r3, 15954 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   158fa:	b4f0      	push	{r4, r5, r6, r7}
   158fc:	4a17      	ldr	r2, [pc, #92]	; (1595c <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   158fe:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   15902:	6814      	ldr	r4, [r2, #0]
   15904:	4b16      	ldr	r3, [pc, #88]	; (15960 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   15906:	6825      	ldr	r5, [r4, #0]
   15908:	681e      	ldr	r6, [r3, #0]
   1590a:	b1a5      	cbz	r5, 15936 <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   1590c:	4607      	mov	r7, r0
   1590e:	00c1      	lsls	r1, r0, #3
   15910:	1863      	adds	r3, r4, r1
   15912:	685a      	ldr	r2, [r3, #4]
   15914:	b2d2      	uxtb	r2, r2
   15916:	2a03      	cmp	r2, #3
   15918:	d104      	bne.n	15924 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   1591a:	609f      	str	r7, [r3, #8]
   1591c:	685a      	ldr	r2, [r3, #4]
   1591e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   15922:	605a      	str	r2, [r3, #4]
   15924:	685a      	ldr	r2, [r3, #4]
   15926:	f012 0fff 	tst.w	r2, #255	; 0xff
   1592a:	d101      	bne.n	15930 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   1592c:	689b      	ldr	r3, [r3, #8]
   1592e:	b12b      	cbz	r3, 1593c <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   15930:	3001      	adds	r0, #1
   15932:	42a8      	cmp	r0, r5
   15934:	d1eb      	bne.n	1590e <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   15936:	2000      	movs	r0, #0
   15938:	bcf0      	pop	{r4, r5, r6, r7}
   1593a:	4770      	bx	lr
   1593c:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   15940:	4421      	add	r1, r4
   15942:	6088      	str	r0, [r1, #8]
   15944:	6843      	ldr	r3, [r0, #4]
   15946:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1594a:	f043 0302 	orr.w	r3, r3, #2
   1594e:	6043      	str	r3, [r0, #4]
   15950:	bcf0      	pop	{r4, r5, r6, r7}
   15952:	4770      	bx	lr
   15954:	2000      	movs	r0, #0
   15956:	4770      	bx	lr
   15958:	200265c5 	.word	0x200265c5
   1595c:	200207fc 	.word	0x200207fc
   15960:	200207f8 	.word	0x200207f8

00015964 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   15964:	b4f0      	push	{r4, r5, r6, r7}
   15966:	4a15      	ldr	r2, [pc, #84]	; (159bc <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   15968:	4b15      	ldr	r3, [pc, #84]	; (159c0 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   1596a:	6814      	ldr	r4, [r2, #0]
   1596c:	681e      	ldr	r6, [r3, #0]
   1596e:	6825      	ldr	r5, [r4, #0]
   15970:	b1ad      	cbz	r5, 1599e <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   15972:	2000      	movs	r0, #0
   15974:	4607      	mov	r7, r0
   15976:	00c1      	lsls	r1, r0, #3
   15978:	1863      	adds	r3, r4, r1
   1597a:	685a      	ldr	r2, [r3, #4]
   1597c:	b2d2      	uxtb	r2, r2
   1597e:	2a03      	cmp	r2, #3
   15980:	d104      	bne.n	1598c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   15982:	609f      	str	r7, [r3, #8]
   15984:	685a      	ldr	r2, [r3, #4]
   15986:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1598a:	605a      	str	r2, [r3, #4]
   1598c:	685a      	ldr	r2, [r3, #4]
   1598e:	f012 0fff 	tst.w	r2, #255	; 0xff
   15992:	d101      	bne.n	15998 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   15994:	689b      	ldr	r3, [r3, #8]
   15996:	b12b      	cbz	r3, 159a4 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   15998:	3001      	adds	r0, #1
   1599a:	4285      	cmp	r5, r0
   1599c:	d1eb      	bne.n	15976 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   1599e:	2000      	movs	r0, #0
   159a0:	bcf0      	pop	{r4, r5, r6, r7}
   159a2:	4770      	bx	lr
   159a4:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   159a8:	4421      	add	r1, r4
   159aa:	6088      	str	r0, [r1, #8]
   159ac:	6843      	ldr	r3, [r0, #4]
   159ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   159b2:	f043 0301 	orr.w	r3, r3, #1
   159b6:	6043      	str	r3, [r0, #4]
   159b8:	bcf0      	pop	{r4, r5, r6, r7}
   159ba:	4770      	bx	lr
   159bc:	200207f4 	.word	0x200207f4
   159c0:	200207f0 	.word	0x200207f0

000159c4 <rpc_transport_ipc_tx_data_alloc>:
   159c4:	4b03      	ldr	r3, [pc, #12]	; (159d4 <rpc_transport_ipc_tx_data_alloc+0x10>)
   159c6:	781b      	ldrb	r3, [r3, #0]
   159c8:	b90b      	cbnz	r3, 159ce <rpc_transport_ipc_tx_data_alloc+0xa>
   159ca:	f7fd be27 	b.w	1361c <nrf_shared_malloc>
   159ce:	2000      	movs	r0, #0
   159d0:	4770      	bx	lr
   159d2:	bf00      	nop
   159d4:	200265c5 	.word	0x200265c5

000159d8 <rpc_transport_ipc_tx_suspend>:
   159d8:	2201      	movs	r2, #1
   159da:	4b01      	ldr	r3, [pc, #4]	; (159e0 <rpc_transport_ipc_tx_suspend+0x8>)
   159dc:	701a      	strb	r2, [r3, #0]
   159de:	4770      	bx	lr
   159e0:	200265c5 	.word	0x200265c5

000159e4 <rpc_transport_ipc_tx_shutdown>:
   159e4:	b4f0      	push	{r4, r5, r6, r7}
   159e6:	4a16      	ldr	r2, [pc, #88]	; (15a40 <rpc_transport_ipc_tx_shutdown+0x5c>)
   159e8:	4b16      	ldr	r3, [pc, #88]	; (15a44 <rpc_transport_ipc_tx_shutdown+0x60>)
   159ea:	6814      	ldr	r4, [r2, #0]
   159ec:	681e      	ldr	r6, [r3, #0]
   159ee:	6825      	ldr	r5, [r4, #0]
   159f0:	b1ad      	cbz	r5, 15a1e <rpc_transport_ipc_tx_shutdown+0x3a>
   159f2:	2200      	movs	r2, #0
   159f4:	4617      	mov	r7, r2
   159f6:	00d0      	lsls	r0, r2, #3
   159f8:	1823      	adds	r3, r4, r0
   159fa:	6859      	ldr	r1, [r3, #4]
   159fc:	b2c9      	uxtb	r1, r1
   159fe:	2903      	cmp	r1, #3
   15a00:	d104      	bne.n	15a0c <rpc_transport_ipc_tx_shutdown+0x28>
   15a02:	609f      	str	r7, [r3, #8]
   15a04:	6859      	ldr	r1, [r3, #4]
   15a06:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   15a0a:	6059      	str	r1, [r3, #4]
   15a0c:	6859      	ldr	r1, [r3, #4]
   15a0e:	f011 0fff 	tst.w	r1, #255	; 0xff
   15a12:	d101      	bne.n	15a18 <rpc_transport_ipc_tx_shutdown+0x34>
   15a14:	689b      	ldr	r3, [r3, #8]
   15a16:	b123      	cbz	r3, 15a22 <rpc_transport_ipc_tx_shutdown+0x3e>
   15a18:	3201      	adds	r2, #1
   15a1a:	42aa      	cmp	r2, r5
   15a1c:	d1eb      	bne.n	159f6 <rpc_transport_ipc_tx_shutdown+0x12>
   15a1e:	bcf0      	pop	{r4, r5, r6, r7}
   15a20:	4770      	bx	lr
   15a22:	0192      	lsls	r2, r2, #6
   15a24:	4404      	add	r4, r0
   15a26:	18b0      	adds	r0, r6, r2
   15a28:	60a0      	str	r0, [r4, #8]
   15a2a:	6843      	ldr	r3, [r0, #4]
   15a2c:	4906      	ldr	r1, [pc, #24]	; (15a48 <rpc_transport_ipc_tx_shutdown+0x64>)
   15a2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15a32:	f043 0301 	orr.w	r3, r3, #1
   15a36:	6043      	str	r3, [r0, #4]
   15a38:	50b1      	str	r1, [r6, r2]
   15a3a:	bcf0      	pop	{r4, r5, r6, r7}
   15a3c:	f7ff beda 	b.w	157f4 <rpc_transport_ipc_tx_send>
   15a40:	200207f4 	.word	0x200207f4
   15a44:	200207f0 	.word	0x200207f0
   15a48:	00030001 	.word	0x00030001

00015a4c <ok_rsp_parser>:
   15a4c:	2000      	movs	r0, #0
   15a4e:	4770      	bx	lr

00015a50 <pdn_state_get_parser>:
   15a50:	2200      	movs	r2, #0
   15a52:	b570      	push	{r4, r5, r6, lr}
   15a54:	780b      	ldrb	r3, [r1, #0]
   15a56:	b084      	sub	sp, #16
   15a58:	460e      	mov	r6, r1
   15a5a:	e9cd 2200 	strd	r2, r2, [sp]
   15a5e:	e9cd 2202 	strd	r2, r2, [sp, #8]
   15a62:	b323      	cbz	r3, 15aae <pdn_state_get_parser+0x5e>
   15a64:	460c      	mov	r4, r1
   15a66:	2b20      	cmp	r3, #32
   15a68:	460d      	mov	r5, r1
   15a6a:	d01b      	beq.n	15aa4 <pdn_state_get_parser+0x54>
   15a6c:	700b      	strb	r3, [r1, #0]
   15a6e:	3201      	adds	r2, #1
   15a70:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   15a74:	18b1      	adds	r1, r6, r2
   15a76:	460d      	mov	r5, r1
   15a78:	2b00      	cmp	r3, #0
   15a7a:	d1f4      	bne.n	15a66 <pdn_state_get_parser+0x16>
   15a7c:	2200      	movs	r2, #0
   15a7e:	4b0d      	ldr	r3, [pc, #52]	; (15ab4 <pdn_state_get_parser+0x64>)
   15a80:	702a      	strb	r2, [r5, #0]
   15a82:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   15a86:	4a0c      	ldr	r2, [pc, #48]	; (15ab8 <pdn_state_get_parser+0x68>)
   15a88:	681b      	ldr	r3, [r3, #0]
   15a8a:	2110      	movs	r1, #16
   15a8c:	4668      	mov	r0, sp
   15a8e:	f7fa ffbb 	bl	10a08 <snprintf>
   15a92:	4669      	mov	r1, sp
   15a94:	4630      	mov	r0, r6
   15a96:	f007 fac2 	bl	1d01e <strstr>
   15a9a:	3000      	adds	r0, #0
   15a9c:	bf18      	it	ne
   15a9e:	2001      	movne	r0, #1
   15aa0:	b004      	add	sp, #16
   15aa2:	bd70      	pop	{r4, r5, r6, pc}
   15aa4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   15aa8:	2b00      	cmp	r3, #0
   15aaa:	d1dc      	bne.n	15a66 <pdn_state_get_parser+0x16>
   15aac:	e7e6      	b.n	15a7c <pdn_state_get_parser+0x2c>
   15aae:	460d      	mov	r5, r1
   15ab0:	e7e4      	b.n	15a7c <pdn_state_get_parser+0x2c>
   15ab2:	bf00      	nop
   15ab4:	2002091c 	.word	0x2002091c
   15ab8:	0001f340 	.word	0x0001f340

00015abc <pdn_id_get_parser>:
   15abc:	b570      	push	{r4, r5, r6, lr}
   15abe:	780b      	ldrb	r3, [r1, #0]
   15ac0:	4606      	mov	r6, r0
   15ac2:	b313      	cbz	r3, 15b0a <pdn_id_get_parser+0x4e>
   15ac4:	4608      	mov	r0, r1
   15ac6:	2400      	movs	r4, #0
   15ac8:	460a      	mov	r2, r1
   15aca:	2b20      	cmp	r3, #32
   15acc:	4615      	mov	r5, r2
   15ace:	d017      	beq.n	15b00 <pdn_id_get_parser+0x44>
   15ad0:	7013      	strb	r3, [r2, #0]
   15ad2:	3401      	adds	r4, #1
   15ad4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   15ad8:	190a      	adds	r2, r1, r4
   15ada:	4615      	mov	r5, r2
   15adc:	2b00      	cmp	r3, #0
   15ade:	d1f4      	bne.n	15aca <pdn_id_get_parser+0xe>
   15ae0:	2300      	movs	r3, #0
   15ae2:	4608      	mov	r0, r1
   15ae4:	702b      	strb	r3, [r5, #0]
   15ae6:	213a      	movs	r1, #58	; 0x3a
   15ae8:	f007 fad3 	bl	1d092 <strchr>
   15aec:	b130      	cbz	r0, 15afc <pdn_id_get_parser+0x40>
   15aee:	3001      	adds	r0, #1
   15af0:	f007 f980 	bl	1cdf4 <atoi>
   15af4:	4b06      	ldr	r3, [pc, #24]	; (15b10 <pdn_id_get_parser+0x54>)
   15af6:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   15afa:	6058      	str	r0, [r3, #4]
   15afc:	2000      	movs	r0, #0
   15afe:	bd70      	pop	{r4, r5, r6, pc}
   15b00:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   15b04:	2b00      	cmp	r3, #0
   15b06:	d1e0      	bne.n	15aca <pdn_id_get_parser+0xe>
   15b08:	e7ea      	b.n	15ae0 <pdn_id_get_parser+0x24>
   15b0a:	460d      	mov	r5, r1
   15b0c:	e7e8      	b.n	15ae0 <pdn_id_get_parser+0x24>
   15b0e:	bf00      	nop
   15b10:	2002091c 	.word	0x2002091c

00015b14 <context_create_parser>:
   15b14:	b570      	push	{r4, r5, r6, lr}
   15b16:	780b      	ldrb	r3, [r1, #0]
   15b18:	4606      	mov	r6, r0
   15b1a:	b313      	cbz	r3, 15b62 <context_create_parser+0x4e>
   15b1c:	4608      	mov	r0, r1
   15b1e:	2400      	movs	r4, #0
   15b20:	460a      	mov	r2, r1
   15b22:	2b20      	cmp	r3, #32
   15b24:	4615      	mov	r5, r2
   15b26:	d017      	beq.n	15b58 <context_create_parser+0x44>
   15b28:	7013      	strb	r3, [r2, #0]
   15b2a:	3401      	adds	r4, #1
   15b2c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   15b30:	190a      	adds	r2, r1, r4
   15b32:	4615      	mov	r5, r2
   15b34:	2b00      	cmp	r3, #0
   15b36:	d1f4      	bne.n	15b22 <context_create_parser+0xe>
   15b38:	2300      	movs	r3, #0
   15b3a:	4608      	mov	r0, r1
   15b3c:	702b      	strb	r3, [r5, #0]
   15b3e:	213a      	movs	r1, #58	; 0x3a
   15b40:	f007 faa7 	bl	1d092 <strchr>
   15b44:	b130      	cbz	r0, 15b54 <context_create_parser+0x40>
   15b46:	4b08      	ldr	r3, [pc, #32]	; (15b68 <context_create_parser+0x54>)
   15b48:	3001      	adds	r0, #1
   15b4a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   15b4e:	f007 f951 	bl	1cdf4 <atoi>
   15b52:	6020      	str	r0, [r4, #0]
   15b54:	2000      	movs	r0, #0
   15b56:	bd70      	pop	{r4, r5, r6, pc}
   15b58:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   15b5c:	2b00      	cmp	r3, #0
   15b5e:	d1e0      	bne.n	15b22 <context_create_parser+0xe>
   15b60:	e7ea      	b.n	15b38 <context_create_parser+0x24>
   15b62:	460d      	mov	r5, r1
   15b64:	e7e8      	b.n	15b38 <context_create_parser+0x24>
   15b66:	bf00      	nop
   15b68:	2002091c 	.word	0x2002091c

00015b6c <pdn_interface_init>:
   15b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15b70:	b510      	push	{r4, lr}
   15b72:	4c09      	ldr	r4, [pc, #36]	; (15b98 <pdn_interface_init+0x2c>)
   15b74:	2228      	movs	r2, #40	; 0x28
   15b76:	2100      	movs	r1, #0
   15b78:	4808      	ldr	r0, [pc, #32]	; (15b9c <pdn_interface_init+0x30>)
   15b7a:	6023      	str	r3, [r4, #0]
   15b7c:	f007 fb09 	bl	1d192 <memset>
   15b80:	f240 2201 	movw	r2, #513	; 0x201
   15b84:	2100      	movs	r1, #0
   15b86:	2066      	movs	r0, #102	; 0x66
   15b88:	f7fc ffec 	bl	12b64 <at_interface_open>
   15b8c:	2800      	cmp	r0, #0
   15b8e:	6020      	str	r0, [r4, #0]
   15b90:	bfb4      	ite	lt
   15b92:	2003      	movlt	r0, #3
   15b94:	2000      	movge	r0, #0
   15b96:	bd10      	pop	{r4, pc}
   15b98:	20020818 	.word	0x20020818
   15b9c:	2002091c 	.word	0x2002091c

00015ba0 <pdn_interface_open>:
   15ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15ba4:	2866      	cmp	r0, #102	; 0x66
   15ba6:	b083      	sub	sp, #12
   15ba8:	f040 80bc 	bne.w	15d24 <pdn_interface_open+0x184>
   15bac:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   15bb0:	f040 80aa 	bne.w	15d08 <pdn_interface_open+0x168>
   15bb4:	f240 2302 	movw	r3, #514	; 0x202
   15bb8:	429a      	cmp	r2, r3
   15bba:	f040 80a5 	bne.w	15d08 <pdn_interface_open+0x168>
   15bbe:	4c62      	ldr	r4, [pc, #392]	; (15d48 <pdn_interface_open+0x1a8>)
   15bc0:	6825      	ldr	r5, [r4, #0]
   15bc2:	b34d      	cbz	r5, 15c18 <pdn_interface_open+0x78>
   15bc4:	6863      	ldr	r3, [r4, #4]
   15bc6:	2b00      	cmp	r3, #0
   15bc8:	f000 8098 	beq.w	15cfc <pdn_interface_open+0x15c>
   15bcc:	68a3      	ldr	r3, [r4, #8]
   15bce:	2b00      	cmp	r3, #0
   15bd0:	f000 8096 	beq.w	15d00 <pdn_interface_open+0x160>
   15bd4:	68e3      	ldr	r3, [r4, #12]
   15bd6:	2b00      	cmp	r3, #0
   15bd8:	f000 8094 	beq.w	15d04 <pdn_interface_open+0x164>
   15bdc:	6923      	ldr	r3, [r4, #16]
   15bde:	2b00      	cmp	r3, #0
   15be0:	f000 8098 	beq.w	15d14 <pdn_interface_open+0x174>
   15be4:	6963      	ldr	r3, [r4, #20]
   15be6:	2b00      	cmp	r3, #0
   15be8:	f000 8098 	beq.w	15d1c <pdn_interface_open+0x17c>
   15bec:	69a3      	ldr	r3, [r4, #24]
   15bee:	2b00      	cmp	r3, #0
   15bf0:	f000 8096 	beq.w	15d20 <pdn_interface_open+0x180>
   15bf4:	69e3      	ldr	r3, [r4, #28]
   15bf6:	2b00      	cmp	r3, #0
   15bf8:	f000 808e 	beq.w	15d18 <pdn_interface_open+0x178>
   15bfc:	6a23      	ldr	r3, [r4, #32]
   15bfe:	b153      	cbz	r3, 15c16 <pdn_interface_open+0x76>
   15c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15c02:	2509      	movs	r5, #9
   15c04:	b143      	cbz	r3, 15c18 <pdn_interface_open+0x78>
   15c06:	200c      	movs	r0, #12
   15c08:	f7fb fc4c 	bl	114a4 <bsd_os_errno_set>
   15c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15c10:	b003      	add	sp, #12
   15c12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15c16:	2508      	movs	r5, #8
   15c18:	2074      	movs	r0, #116	; 0x74
   15c1a:	f7fd fce9 	bl	135f0 <nrf_malloc>
   15c1e:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   15c22:	2800      	cmp	r0, #0
   15c24:	d0ef      	beq.n	15c06 <pdn_interface_open+0x66>
   15c26:	2274      	movs	r2, #116	; 0x74
   15c28:	2100      	movs	r1, #0
   15c2a:	f007 fab2 	bl	1d192 <memset>
   15c2e:	2101      	movs	r1, #1
   15c30:	2003      	movs	r0, #3
   15c32:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   15c36:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   15c3a:	4a44      	ldr	r2, [pc, #272]	; (15d4c <pdn_interface_open+0x1ac>)
   15c3c:	6099      	str	r1, [r3, #8]
   15c3e:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   15c42:	f44f 7180 	mov.w	r1, #256	; 0x100
   15c46:	6718      	str	r0, [r3, #112]	; 0x70
   15c48:	605f      	str	r7, [r3, #4]
   15c4a:	4841      	ldr	r0, [pc, #260]	; (15d50 <pdn_interface_open+0x1b0>)
   15c4c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 15d5c <pdn_interface_open+0x1bc>
   15c50:	f7fa feda 	bl	10a08 <snprintf>
   15c54:	483e      	ldr	r0, [pc, #248]	; (15d50 <pdn_interface_open+0x1b0>)
   15c56:	f8d8 9000 	ldr.w	r9, [r8]
   15c5a:	2600      	movs	r6, #0
   15c5c:	f007 fa34 	bl	1d0c8 <strlen>
   15c60:	4633      	mov	r3, r6
   15c62:	4602      	mov	r2, r0
   15c64:	493a      	ldr	r1, [pc, #232]	; (15d50 <pdn_interface_open+0x1b0>)
   15c66:	4648      	mov	r0, r9
   15c68:	9601      	str	r6, [sp, #4]
   15c6a:	9600      	str	r6, [sp, #0]
   15c6c:	f7fc ff24 	bl	12ab8 <at_interface_write>
   15c70:	4681      	mov	r9, r0
   15c72:	4837      	ldr	r0, [pc, #220]	; (15d50 <pdn_interface_open+0x1b0>)
   15c74:	f007 fa28 	bl	1d0c8 <strlen>
   15c78:	4548      	cmp	r0, r9
   15c7a:	d159      	bne.n	15d30 <pdn_interface_open+0x190>
   15c7c:	4633      	mov	r3, r6
   15c7e:	e9cd 6600 	strd	r6, r6, [sp]
   15c82:	f44f 7280 	mov.w	r2, #256	; 0x100
   15c86:	4932      	ldr	r1, [pc, #200]	; (15d50 <pdn_interface_open+0x1b0>)
   15c88:	f8d8 0000 	ldr.w	r0, [r8]
   15c8c:	f7fc fffc 	bl	12c88 <at_interface_read>
   15c90:	4606      	mov	r6, r0
   15c92:	4830      	ldr	r0, [pc, #192]	; (15d54 <pdn_interface_open+0x1b4>)
   15c94:	f007 fa18 	bl	1d0c8 <strlen>
   15c98:	4286      	cmp	r6, r0
   15c9a:	db15      	blt.n	15cc8 <pdn_interface_open+0x128>
   15c9c:	4602      	mov	r2, r0
   15c9e:	492c      	ldr	r1, [pc, #176]	; (15d50 <pdn_interface_open+0x1b0>)
   15ca0:	482c      	ldr	r0, [pc, #176]	; (15d54 <pdn_interface_open+0x1b4>)
   15ca2:	f007 fa24 	bl	1d0ee <strncmp>
   15ca6:	b978      	cbnz	r0, 15cc8 <pdn_interface_open+0x128>
   15ca8:	4929      	ldr	r1, [pc, #164]	; (15d50 <pdn_interface_open+0x1b0>)
   15caa:	4628      	mov	r0, r5
   15cac:	f7ff ff32 	bl	15b14 <context_create_parser>
   15cb0:	b9b0      	cbnz	r0, 15ce0 <pdn_interface_open+0x140>
   15cb2:	2202      	movs	r2, #2
   15cb4:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   15cb8:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   15cbc:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   15cc0:	609a      	str	r2, [r3, #8]
   15cc2:	b003      	add	sp, #12
   15cc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15cc8:	4823      	ldr	r0, [pc, #140]	; (15d58 <pdn_interface_open+0x1b8>)
   15cca:	f007 f9fd 	bl	1d0c8 <strlen>
   15cce:	4920      	ldr	r1, [pc, #128]	; (15d50 <pdn_interface_open+0x1b0>)
   15cd0:	4602      	mov	r2, r0
   15cd2:	4821      	ldr	r0, [pc, #132]	; (15d58 <pdn_interface_open+0x1b8>)
   15cd4:	f007 fa0b 	bl	1d0ee <strncmp>
   15cd8:	b960      	cbnz	r0, 15cf4 <pdn_interface_open+0x154>
   15cda:	2008      	movs	r0, #8
   15cdc:	f7fb fbe2 	bl	114a4 <bsd_os_errno_set>
   15ce0:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   15ce4:	f7fd fc8e 	bl	13604 <nrf_free>
   15ce8:	2300      	movs	r3, #0
   15cea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15cee:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   15cf2:	e78d      	b.n	15c10 <pdn_interface_open+0x70>
   15cf4:	2005      	movs	r0, #5
   15cf6:	f7fb fbd5 	bl	114a4 <bsd_os_errno_set>
   15cfa:	e7f1      	b.n	15ce0 <pdn_interface_open+0x140>
   15cfc:	2501      	movs	r5, #1
   15cfe:	e78b      	b.n	15c18 <pdn_interface_open+0x78>
   15d00:	2502      	movs	r5, #2
   15d02:	e789      	b.n	15c18 <pdn_interface_open+0x78>
   15d04:	2503      	movs	r5, #3
   15d06:	e787      	b.n	15c18 <pdn_interface_open+0x78>
   15d08:	2016      	movs	r0, #22
   15d0a:	f7fb fbcb 	bl	114a4 <bsd_os_errno_set>
   15d0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15d12:	e77d      	b.n	15c10 <pdn_interface_open+0x70>
   15d14:	2504      	movs	r5, #4
   15d16:	e77f      	b.n	15c18 <pdn_interface_open+0x78>
   15d18:	2507      	movs	r5, #7
   15d1a:	e77d      	b.n	15c18 <pdn_interface_open+0x78>
   15d1c:	2505      	movs	r5, #5
   15d1e:	e77b      	b.n	15c18 <pdn_interface_open+0x78>
   15d20:	2506      	movs	r5, #6
   15d22:	e779      	b.n	15c18 <pdn_interface_open+0x78>
   15d24:	202f      	movs	r0, #47	; 0x2f
   15d26:	f7fb fbbd 	bl	114a4 <bsd_os_errno_set>
   15d2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15d2e:	e76f      	b.n	15c10 <pdn_interface_open+0x70>
   15d30:	2005      	movs	r0, #5
   15d32:	f7fb fbb7 	bl	114a4 <bsd_os_errno_set>
   15d36:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   15d3a:	f7fd fc63 	bl	13604 <nrf_free>
   15d3e:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   15d42:	4638      	mov	r0, r7
   15d44:	e764      	b.n	15c10 <pdn_interface_open+0x70>
   15d46:	bf00      	nop
   15d48:	2002091c 	.word	0x2002091c
   15d4c:	0001f31c 	.word	0x0001f31c
   15d50:	2002081c 	.word	0x2002081c
   15d54:	0001f32c 	.word	0x0001f32c
   15d58:	0001f338 	.word	0x0001f338
   15d5c:	20020818 	.word	0x20020818

00015d60 <pdn_interface_connect>:
   15d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d64:	b083      	sub	sp, #12
   15d66:	2900      	cmp	r1, #0
   15d68:	f000 813e 	beq.w	15fe8 <pdn_interface_connect+0x288>
   15d6c:	2a64      	cmp	r2, #100	; 0x64
   15d6e:	4691      	mov	r9, r2
   15d70:	f200 813a 	bhi.w	15fe8 <pdn_interface_connect+0x288>
   15d74:	4605      	mov	r5, r0
   15d76:	4608      	mov	r0, r1
   15d78:	4688      	mov	r8, r1
   15d7a:	f007 f9a5 	bl	1d0c8 <strlen>
   15d7e:	2864      	cmp	r0, #100	; 0x64
   15d80:	f200 8132 	bhi.w	15fe8 <pdn_interface_connect+0x288>
   15d84:	4ba5      	ldr	r3, [pc, #660]	; (1601c <pdn_interface_connect+0x2bc>)
   15d86:	43ab      	bics	r3, r5
   15d88:	f040 8125 	bne.w	15fd6 <pdn_interface_connect+0x276>
   15d8c:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   15d90:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   15d94:	2d09      	cmp	r5, #9
   15d96:	f300 811e 	bgt.w	15fd6 <pdn_interface_connect+0x276>
   15d9a:	4fa1      	ldr	r7, [pc, #644]	; (16020 <pdn_interface_connect+0x2c0>)
   15d9c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   15da0:	2b00      	cmp	r3, #0
   15da2:	f000 8118 	beq.w	15fd6 <pdn_interface_connect+0x276>
   15da6:	689a      	ldr	r2, [r3, #8]
   15da8:	2a00      	cmp	r2, #0
   15daa:	f000 8114 	beq.w	15fd6 <pdn_interface_connect+0x276>
   15dae:	2d00      	cmp	r5, #0
   15db0:	f2c0 8111 	blt.w	15fd6 <pdn_interface_connect+0x276>
   15db4:	689b      	ldr	r3, [r3, #8]
   15db6:	2b02      	cmp	r3, #2
   15db8:	f040 810d 	bne.w	15fd6 <pdn_interface_connect+0x276>
   15dbc:	4e99      	ldr	r6, [pc, #612]	; (16024 <pdn_interface_connect+0x2c4>)
   15dbe:	4a9a      	ldr	r2, [pc, #616]	; (16028 <pdn_interface_connect+0x2c8>)
   15dc0:	f44f 7180 	mov.w	r1, #256	; 0x100
   15dc4:	4630      	mov	r0, r6
   15dc6:	f7fa fe1f 	bl	10a08 <snprintf>
   15dca:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   15dce:	4604      	mov	r4, r0
   15dd0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   15dd4:	681b      	ldr	r3, [r3, #0]
   15dd6:	4a95      	ldr	r2, [pc, #596]	; (1602c <pdn_interface_connect+0x2cc>)
   15dd8:	1830      	adds	r0, r6, r0
   15dda:	f7fa fe15 	bl	10a08 <snprintf>
   15dde:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   15de2:	4404      	add	r4, r0
   15de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   15de6:	f003 0203 	and.w	r2, r3, #3
   15dea:	2a03      	cmp	r2, #3
   15dec:	f000 80ea 	beq.w	15fc4 <pdn_interface_connect+0x264>
   15df0:	079b      	lsls	r3, r3, #30
   15df2:	eb06 0004 	add.w	r0, r6, r4
   15df6:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   15dfa:	bf4c      	ite	mi
   15dfc:	4b8c      	ldrmi	r3, [pc, #560]	; (16030 <pdn_interface_connect+0x2d0>)
   15dfe:	4b8d      	ldrpl	r3, [pc, #564]	; (16034 <pdn_interface_connect+0x2d4>)
   15e00:	4a8d      	ldr	r2, [pc, #564]	; (16038 <pdn_interface_connect+0x2d8>)
   15e02:	f7fa fe01 	bl	10a08 <snprintf>
   15e06:	4404      	add	r4, r0
   15e08:	4643      	mov	r3, r8
   15e0a:	4a8c      	ldr	r2, [pc, #560]	; (1603c <pdn_interface_connect+0x2dc>)
   15e0c:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   15e10:	1930      	adds	r0, r6, r4
   15e12:	f7fa fdf9 	bl	10a08 <snprintf>
   15e16:	4420      	add	r0, r4
   15e18:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   15e1c:	f300 80f7 	bgt.w	1600e <pdn_interface_connect+0x2ae>
   15e20:	f8df a238 	ldr.w	sl, [pc, #568]	; 1605c <pdn_interface_connect+0x2fc>
   15e24:	487f      	ldr	r0, [pc, #508]	; (16024 <pdn_interface_connect+0x2c4>)
   15e26:	f8da b000 	ldr.w	fp, [sl]
   15e2a:	2400      	movs	r4, #0
   15e2c:	f007 f94c 	bl	1d0c8 <strlen>
   15e30:	4623      	mov	r3, r4
   15e32:	4602      	mov	r2, r0
   15e34:	497b      	ldr	r1, [pc, #492]	; (16024 <pdn_interface_connect+0x2c4>)
   15e36:	4658      	mov	r0, fp
   15e38:	9401      	str	r4, [sp, #4]
   15e3a:	9400      	str	r4, [sp, #0]
   15e3c:	f7fc fe3c 	bl	12ab8 <at_interface_write>
   15e40:	4683      	mov	fp, r0
   15e42:	4878      	ldr	r0, [pc, #480]	; (16024 <pdn_interface_connect+0x2c4>)
   15e44:	f007 f940 	bl	1d0c8 <strlen>
   15e48:	4558      	cmp	r0, fp
   15e4a:	d008      	beq.n	15e5e <pdn_interface_connect+0xfe>
   15e4c:	2005      	movs	r0, #5
   15e4e:	f7fb fb29 	bl	114a4 <bsd_os_errno_set>
   15e52:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15e56:	4620      	mov	r0, r4
   15e58:	b003      	add	sp, #12
   15e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e5e:	4623      	mov	r3, r4
   15e60:	e9cd 4400 	strd	r4, r4, [sp]
   15e64:	f44f 7280 	mov.w	r2, #256	; 0x100
   15e68:	496e      	ldr	r1, [pc, #440]	; (16024 <pdn_interface_connect+0x2c4>)
   15e6a:	f8da 0000 	ldr.w	r0, [sl]
   15e6e:	f7fc ff0b 	bl	12c88 <at_interface_read>
   15e72:	4604      	mov	r4, r0
   15e74:	4872      	ldr	r0, [pc, #456]	; (16040 <pdn_interface_connect+0x2e0>)
   15e76:	f007 f927 	bl	1d0c8 <strlen>
   15e7a:	4284      	cmp	r4, r0
   15e7c:	f2c0 8091 	blt.w	15fa2 <pdn_interface_connect+0x242>
   15e80:	4602      	mov	r2, r0
   15e82:	4968      	ldr	r1, [pc, #416]	; (16024 <pdn_interface_connect+0x2c4>)
   15e84:	486e      	ldr	r0, [pc, #440]	; (16040 <pdn_interface_connect+0x2e0>)
   15e86:	f007 f932 	bl	1d0ee <strncmp>
   15e8a:	2800      	cmp	r0, #0
   15e8c:	f040 8089 	bne.w	15fa2 <pdn_interface_connect+0x242>
   15e90:	4964      	ldr	r1, [pc, #400]	; (16024 <pdn_interface_connect+0x2c4>)
   15e92:	4628      	mov	r0, r5
   15e94:	f7ff fdda 	bl	15a4c <ok_rsp_parser>
   15e98:	4604      	mov	r4, r0
   15e9a:	2800      	cmp	r0, #0
   15e9c:	d1db      	bne.n	15e56 <pdn_interface_connect+0xf6>
   15e9e:	4a69      	ldr	r2, [pc, #420]	; (16044 <pdn_interface_connect+0x2e4>)
   15ea0:	f44f 7180 	mov.w	r1, #256	; 0x100
   15ea4:	485f      	ldr	r0, [pc, #380]	; (16024 <pdn_interface_connect+0x2c4>)
   15ea6:	f7fa fdaf 	bl	10a08 <snprintf>
   15eaa:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   15eae:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   15eb2:	681b      	ldr	r3, [r3, #0]
   15eb4:	4a64      	ldr	r2, [pc, #400]	; (16048 <pdn_interface_connect+0x2e8>)
   15eb6:	4430      	add	r0, r6
   15eb8:	f7fa fda6 	bl	10a08 <snprintf>
   15ebc:	4859      	ldr	r0, [pc, #356]	; (16024 <pdn_interface_connect+0x2c4>)
   15ebe:	f8da b000 	ldr.w	fp, [sl]
   15ec2:	f007 f901 	bl	1d0c8 <strlen>
   15ec6:	4623      	mov	r3, r4
   15ec8:	4602      	mov	r2, r0
   15eca:	4956      	ldr	r1, [pc, #344]	; (16024 <pdn_interface_connect+0x2c4>)
   15ecc:	4658      	mov	r0, fp
   15ece:	9401      	str	r4, [sp, #4]
   15ed0:	9400      	str	r4, [sp, #0]
   15ed2:	f7fc fdf1 	bl	12ab8 <at_interface_write>
   15ed6:	4683      	mov	fp, r0
   15ed8:	4852      	ldr	r0, [pc, #328]	; (16024 <pdn_interface_connect+0x2c4>)
   15eda:	f007 f8f5 	bl	1d0c8 <strlen>
   15ede:	4558      	cmp	r0, fp
   15ee0:	d1b4      	bne.n	15e4c <pdn_interface_connect+0xec>
   15ee2:	4623      	mov	r3, r4
   15ee4:	f44f 7280 	mov.w	r2, #256	; 0x100
   15ee8:	494e      	ldr	r1, [pc, #312]	; (16024 <pdn_interface_connect+0x2c4>)
   15eea:	f8da 0000 	ldr.w	r0, [sl]
   15eee:	e9cd 4400 	strd	r4, r4, [sp]
   15ef2:	f7fc fec9 	bl	12c88 <at_interface_read>
   15ef6:	4683      	mov	fp, r0
   15ef8:	4851      	ldr	r0, [pc, #324]	; (16040 <pdn_interface_connect+0x2e0>)
   15efa:	f007 f8e5 	bl	1d0c8 <strlen>
   15efe:	4583      	cmp	fp, r0
   15f00:	db4f      	blt.n	15fa2 <pdn_interface_connect+0x242>
   15f02:	4602      	mov	r2, r0
   15f04:	4947      	ldr	r1, [pc, #284]	; (16024 <pdn_interface_connect+0x2c4>)
   15f06:	484e      	ldr	r0, [pc, #312]	; (16040 <pdn_interface_connect+0x2e0>)
   15f08:	f007 f8f1 	bl	1d0ee <strncmp>
   15f0c:	2800      	cmp	r0, #0
   15f0e:	d148      	bne.n	15fa2 <pdn_interface_connect+0x242>
   15f10:	2103      	movs	r1, #3
   15f12:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   15f16:	464a      	mov	r2, r9
   15f18:	6099      	str	r1, [r3, #8]
   15f1a:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   15f1e:	4641      	mov	r1, r8
   15f20:	300c      	adds	r0, #12
   15f22:	f007 f90c 	bl	1d13e <memcpy>
   15f26:	4a49      	ldr	r2, [pc, #292]	; (1604c <pdn_interface_connect+0x2ec>)
   15f28:	f44f 7180 	mov.w	r1, #256	; 0x100
   15f2c:	483d      	ldr	r0, [pc, #244]	; (16024 <pdn_interface_connect+0x2c4>)
   15f2e:	f7fa fd6b 	bl	10a08 <snprintf>
   15f32:	4601      	mov	r1, r0
   15f34:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   15f38:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   15f3c:	681b      	ldr	r3, [r3, #0]
   15f3e:	4a42      	ldr	r2, [pc, #264]	; (16048 <pdn_interface_connect+0x2e8>)
   15f40:	1830      	adds	r0, r6, r0
   15f42:	f7fa fd61 	bl	10a08 <snprintf>
   15f46:	4837      	ldr	r0, [pc, #220]	; (16024 <pdn_interface_connect+0x2c4>)
   15f48:	f8da 6000 	ldr.w	r6, [sl]
   15f4c:	f007 f8bc 	bl	1d0c8 <strlen>
   15f50:	4623      	mov	r3, r4
   15f52:	4602      	mov	r2, r0
   15f54:	4933      	ldr	r1, [pc, #204]	; (16024 <pdn_interface_connect+0x2c4>)
   15f56:	4630      	mov	r0, r6
   15f58:	9401      	str	r4, [sp, #4]
   15f5a:	9400      	str	r4, [sp, #0]
   15f5c:	f7fc fdac 	bl	12ab8 <at_interface_write>
   15f60:	4606      	mov	r6, r0
   15f62:	4830      	ldr	r0, [pc, #192]	; (16024 <pdn_interface_connect+0x2c4>)
   15f64:	f007 f8b0 	bl	1d0c8 <strlen>
   15f68:	42b0      	cmp	r0, r6
   15f6a:	d153      	bne.n	16014 <pdn_interface_connect+0x2b4>
   15f6c:	4623      	mov	r3, r4
   15f6e:	f44f 7280 	mov.w	r2, #256	; 0x100
   15f72:	492c      	ldr	r1, [pc, #176]	; (16024 <pdn_interface_connect+0x2c4>)
   15f74:	f8da 0000 	ldr.w	r0, [sl]
   15f78:	e9cd 4400 	strd	r4, r4, [sp]
   15f7c:	f7fc fe84 	bl	12c88 <at_interface_read>
   15f80:	4606      	mov	r6, r0
   15f82:	4833      	ldr	r0, [pc, #204]	; (16050 <pdn_interface_connect+0x2f0>)
   15f84:	f007 f8a0 	bl	1d0c8 <strlen>
   15f88:	4286      	cmp	r6, r0
   15f8a:	db33      	blt.n	15ff4 <pdn_interface_connect+0x294>
   15f8c:	4602      	mov	r2, r0
   15f8e:	4925      	ldr	r1, [pc, #148]	; (16024 <pdn_interface_connect+0x2c4>)
   15f90:	482f      	ldr	r0, [pc, #188]	; (16050 <pdn_interface_connect+0x2f0>)
   15f92:	f007 f8ac 	bl	1d0ee <strncmp>
   15f96:	bb68      	cbnz	r0, 15ff4 <pdn_interface_connect+0x294>
   15f98:	4628      	mov	r0, r5
   15f9a:	4922      	ldr	r1, [pc, #136]	; (16024 <pdn_interface_connect+0x2c4>)
   15f9c:	f7ff fd8e 	bl	15abc <pdn_id_get_parser>
   15fa0:	e759      	b.n	15e56 <pdn_interface_connect+0xf6>
   15fa2:	482c      	ldr	r0, [pc, #176]	; (16054 <pdn_interface_connect+0x2f4>)
   15fa4:	f007 f890 	bl	1d0c8 <strlen>
   15fa8:	491e      	ldr	r1, [pc, #120]	; (16024 <pdn_interface_connect+0x2c4>)
   15faa:	4602      	mov	r2, r0
   15fac:	4829      	ldr	r0, [pc, #164]	; (16054 <pdn_interface_connect+0x2f4>)
   15fae:	f007 f89e 	bl	1d0ee <strncmp>
   15fb2:	2800      	cmp	r0, #0
   15fb4:	f47f af4a 	bne.w	15e4c <pdn_interface_connect+0xec>
   15fb8:	2008      	movs	r0, #8
   15fba:	f7fb fa73 	bl	114a4 <bsd_os_errno_set>
   15fbe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15fc2:	e748      	b.n	15e56 <pdn_interface_connect+0xf6>
   15fc4:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   15fc8:	1930      	adds	r0, r6, r4
   15fca:	4b23      	ldr	r3, [pc, #140]	; (16058 <pdn_interface_connect+0x2f8>)
   15fcc:	4a1a      	ldr	r2, [pc, #104]	; (16038 <pdn_interface_connect+0x2d8>)
   15fce:	f7fa fd1b 	bl	10a08 <snprintf>
   15fd2:	4404      	add	r4, r0
   15fd4:	e718      	b.n	15e08 <pdn_interface_connect+0xa8>
   15fd6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15fda:	2009      	movs	r0, #9
   15fdc:	f7fb fa62 	bl	114a4 <bsd_os_errno_set>
   15fe0:	4620      	mov	r0, r4
   15fe2:	b003      	add	sp, #12
   15fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fe8:	2016      	movs	r0, #22
   15fea:	f7fb fa5b 	bl	114a4 <bsd_os_errno_set>
   15fee:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15ff2:	e730      	b.n	15e56 <pdn_interface_connect+0xf6>
   15ff4:	4817      	ldr	r0, [pc, #92]	; (16054 <pdn_interface_connect+0x2f4>)
   15ff6:	f007 f867 	bl	1d0c8 <strlen>
   15ffa:	490a      	ldr	r1, [pc, #40]	; (16024 <pdn_interface_connect+0x2c4>)
   15ffc:	4602      	mov	r2, r0
   15ffe:	4815      	ldr	r0, [pc, #84]	; (16054 <pdn_interface_connect+0x2f4>)
   16000:	f007 f875 	bl	1d0ee <strncmp>
   16004:	b930      	cbnz	r0, 16014 <pdn_interface_connect+0x2b4>
   16006:	2008      	movs	r0, #8
   16008:	f7fb fa4c 	bl	114a4 <bsd_os_errno_set>
   1600c:	e723      	b.n	15e56 <pdn_interface_connect+0xf6>
   1600e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16012:	e720      	b.n	15e56 <pdn_interface_connect+0xf6>
   16014:	2005      	movs	r0, #5
   16016:	f7fb fa45 	bl	114a4 <bsd_os_errno_set>
   1601a:	e71c      	b.n	15e56 <pdn_interface_connect+0xf6>
   1601c:	789a0000 	.word	0x789a0000
   16020:	2002091c 	.word	0x2002091c
   16024:	2002081c 	.word	0x2002081c
   16028:	0001f2a4 	.word	0x0001f2a4
   1602c:	0001f2b0 	.word	0x0001f2b0
   16030:	0001f2c4 	.word	0x0001f2c4
   16034:	0001f2cc 	.word	0x0001f2cc
   16038:	0001f2bc 	.word	0x0001f2bc
   1603c:	0001f300 	.word	0x0001f300
   16040:	0001f2d0 	.word	0x0001f2d0
   16044:	0001f2d4 	.word	0x0001f2d4
   16048:	0001f2e0 	.word	0x0001f2e0
   1604c:	0001f2e4 	.word	0x0001f2e4
   16050:	0001f2f4 	.word	0x0001f2f4
   16054:	0001f338 	.word	0x0001f338
   16058:	0001f2b4 	.word	0x0001f2b4
   1605c:	20020818 	.word	0x20020818

00016060 <pdn_interface_close>:
   16060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16064:	4b63      	ldr	r3, [pc, #396]	; (161f4 <pdn_interface_close+0x194>)
   16066:	b083      	sub	sp, #12
   16068:	4383      	bics	r3, r0
   1606a:	f040 809d 	bne.w	161a8 <pdn_interface_close+0x148>
   1606e:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   16072:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   16076:	2c09      	cmp	r4, #9
   16078:	f300 8096 	bgt.w	161a8 <pdn_interface_close+0x148>
   1607c:	4d5e      	ldr	r5, [pc, #376]	; (161f8 <pdn_interface_close+0x198>)
   1607e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   16082:	2800      	cmp	r0, #0
   16084:	f000 8090 	beq.w	161a8 <pdn_interface_close+0x148>
   16088:	6883      	ldr	r3, [r0, #8]
   1608a:	2b00      	cmp	r3, #0
   1608c:	f000 808c 	beq.w	161a8 <pdn_interface_close+0x148>
   16090:	6883      	ldr	r3, [r0, #8]
   16092:	2b03      	cmp	r3, #3
   16094:	d008      	beq.n	160a8 <pdn_interface_close+0x48>
   16096:	f7fd fab5 	bl	13604 <nrf_free>
   1609a:	2300      	movs	r3, #0
   1609c:	4618      	mov	r0, r3
   1609e:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   160a2:	b003      	add	sp, #12
   160a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   160a8:	4e54      	ldr	r6, [pc, #336]	; (161fc <pdn_interface_close+0x19c>)
   160aa:	4a55      	ldr	r2, [pc, #340]	; (16200 <pdn_interface_close+0x1a0>)
   160ac:	f44f 7180 	mov.w	r1, #256	; 0x100
   160b0:	4630      	mov	r0, r6
   160b2:	f7fa fca9 	bl	10a08 <snprintf>
   160b6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   160ba:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   160be:	681b      	ldr	r3, [r3, #0]
   160c0:	4a50      	ldr	r2, [pc, #320]	; (16204 <pdn_interface_close+0x1a4>)
   160c2:	4430      	add	r0, r6
   160c4:	f8df 814c 	ldr.w	r8, [pc, #332]	; 16214 <pdn_interface_close+0x1b4>
   160c8:	f7fa fc9e 	bl	10a08 <snprintf>
   160cc:	4630      	mov	r0, r6
   160ce:	f8d8 9000 	ldr.w	r9, [r8]
   160d2:	2700      	movs	r7, #0
   160d4:	f006 fff8 	bl	1d0c8 <strlen>
   160d8:	4631      	mov	r1, r6
   160da:	4602      	mov	r2, r0
   160dc:	463b      	mov	r3, r7
   160de:	4648      	mov	r0, r9
   160e0:	9701      	str	r7, [sp, #4]
   160e2:	9700      	str	r7, [sp, #0]
   160e4:	f7fc fce8 	bl	12ab8 <at_interface_write>
   160e8:	4681      	mov	r9, r0
   160ea:	4630      	mov	r0, r6
   160ec:	f006 ffec 	bl	1d0c8 <strlen>
   160f0:	4548      	cmp	r0, r9
   160f2:	d176      	bne.n	161e2 <pdn_interface_close+0x182>
   160f4:	463b      	mov	r3, r7
   160f6:	e9cd 7700 	strd	r7, r7, [sp]
   160fa:	f44f 7280 	mov.w	r2, #256	; 0x100
   160fe:	4631      	mov	r1, r6
   16100:	f8d8 0000 	ldr.w	r0, [r8]
   16104:	f7fc fdc0 	bl	12c88 <at_interface_read>
   16108:	4607      	mov	r7, r0
   1610a:	483f      	ldr	r0, [pc, #252]	; (16208 <pdn_interface_close+0x1a8>)
   1610c:	f006 ffdc 	bl	1d0c8 <strlen>
   16110:	4287      	cmp	r7, r0
   16112:	da4f      	bge.n	161b4 <pdn_interface_close+0x154>
   16114:	483d      	ldr	r0, [pc, #244]	; (1620c <pdn_interface_close+0x1ac>)
   16116:	f006 ffd7 	bl	1d0c8 <strlen>
   1611a:	4938      	ldr	r1, [pc, #224]	; (161fc <pdn_interface_close+0x19c>)
   1611c:	4602      	mov	r2, r0
   1611e:	483b      	ldr	r0, [pc, #236]	; (1620c <pdn_interface_close+0x1ac>)
   16120:	f006 ffe5 	bl	1d0ee <strncmp>
   16124:	2800      	cmp	r0, #0
   16126:	d15c      	bne.n	161e2 <pdn_interface_close+0x182>
   16128:	2008      	movs	r0, #8
   1612a:	f7fb f9bb 	bl	114a4 <bsd_os_errno_set>
   1612e:	4a38      	ldr	r2, [pc, #224]	; (16210 <pdn_interface_close+0x1b0>)
   16130:	f44f 7180 	mov.w	r1, #256	; 0x100
   16134:	4831      	ldr	r0, [pc, #196]	; (161fc <pdn_interface_close+0x19c>)
   16136:	f7fa fc67 	bl	10a08 <snprintf>
   1613a:	4601      	mov	r1, r0
   1613c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   16140:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   16144:	681b      	ldr	r3, [r3, #0]
   16146:	4a2f      	ldr	r2, [pc, #188]	; (16204 <pdn_interface_close+0x1a4>)
   16148:	1830      	adds	r0, r6, r0
   1614a:	f7fa fc5d 	bl	10a08 <snprintf>
   1614e:	482b      	ldr	r0, [pc, #172]	; (161fc <pdn_interface_close+0x19c>)
   16150:	f8d8 7000 	ldr.w	r7, [r8]
   16154:	2600      	movs	r6, #0
   16156:	f006 ffb7 	bl	1d0c8 <strlen>
   1615a:	4633      	mov	r3, r6
   1615c:	4602      	mov	r2, r0
   1615e:	4927      	ldr	r1, [pc, #156]	; (161fc <pdn_interface_close+0x19c>)
   16160:	4638      	mov	r0, r7
   16162:	9601      	str	r6, [sp, #4]
   16164:	9600      	str	r6, [sp, #0]
   16166:	f7fc fca7 	bl	12ab8 <at_interface_write>
   1616a:	4607      	mov	r7, r0
   1616c:	4823      	ldr	r0, [pc, #140]	; (161fc <pdn_interface_close+0x19c>)
   1616e:	f006 ffab 	bl	1d0c8 <strlen>
   16172:	42b8      	cmp	r0, r7
   16174:	d139      	bne.n	161ea <pdn_interface_close+0x18a>
   16176:	4633      	mov	r3, r6
   16178:	e9cd 6600 	strd	r6, r6, [sp]
   1617c:	f44f 7280 	mov.w	r2, #256	; 0x100
   16180:	491e      	ldr	r1, [pc, #120]	; (161fc <pdn_interface_close+0x19c>)
   16182:	f8d8 0000 	ldr.w	r0, [r8]
   16186:	f7fc fd7f 	bl	12c88 <at_interface_read>
   1618a:	4606      	mov	r6, r0
   1618c:	481e      	ldr	r0, [pc, #120]	; (16208 <pdn_interface_close+0x1a8>)
   1618e:	f006 ff9b 	bl	1d0c8 <strlen>
   16192:	4286      	cmp	r6, r0
   16194:	db16      	blt.n	161c4 <pdn_interface_close+0x164>
   16196:	4602      	mov	r2, r0
   16198:	4918      	ldr	r1, [pc, #96]	; (161fc <pdn_interface_close+0x19c>)
   1619a:	481b      	ldr	r0, [pc, #108]	; (16208 <pdn_interface_close+0x1a8>)
   1619c:	f006 ffa7 	bl	1d0ee <strncmp>
   161a0:	b980      	cbnz	r0, 161c4 <pdn_interface_close+0x164>
   161a2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   161a6:	e776      	b.n	16096 <pdn_interface_close+0x36>
   161a8:	2009      	movs	r0, #9
   161aa:	f7fb f97b 	bl	114a4 <bsd_os_errno_set>
   161ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   161b2:	e776      	b.n	160a2 <pdn_interface_close+0x42>
   161b4:	4602      	mov	r2, r0
   161b6:	4631      	mov	r1, r6
   161b8:	4813      	ldr	r0, [pc, #76]	; (16208 <pdn_interface_close+0x1a8>)
   161ba:	f006 ff98 	bl	1d0ee <strncmp>
   161be:	2800      	cmp	r0, #0
   161c0:	d0b5      	beq.n	1612e <pdn_interface_close+0xce>
   161c2:	e7a7      	b.n	16114 <pdn_interface_close+0xb4>
   161c4:	4811      	ldr	r0, [pc, #68]	; (1620c <pdn_interface_close+0x1ac>)
   161c6:	f006 ff7f 	bl	1d0c8 <strlen>
   161ca:	490c      	ldr	r1, [pc, #48]	; (161fc <pdn_interface_close+0x19c>)
   161cc:	4602      	mov	r2, r0
   161ce:	480f      	ldr	r0, [pc, #60]	; (1620c <pdn_interface_close+0x1ac>)
   161d0:	f006 ff8d 	bl	1d0ee <strncmp>
   161d4:	b948      	cbnz	r0, 161ea <pdn_interface_close+0x18a>
   161d6:	2008      	movs	r0, #8
   161d8:	f7fb f964 	bl	114a4 <bsd_os_errno_set>
   161dc:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   161e0:	e759      	b.n	16096 <pdn_interface_close+0x36>
   161e2:	2005      	movs	r0, #5
   161e4:	f7fb f95e 	bl	114a4 <bsd_os_errno_set>
   161e8:	e7a1      	b.n	1612e <pdn_interface_close+0xce>
   161ea:	2005      	movs	r0, #5
   161ec:	f7fb f95a 	bl	114a4 <bsd_os_errno_set>
   161f0:	e7d7      	b.n	161a2 <pdn_interface_close+0x142>
   161f2:	bf00      	nop
   161f4:	789a0000 	.word	0x789a0000
   161f8:	2002091c 	.word	0x2002091c
   161fc:	2002081c 	.word	0x2002081c
   16200:	0001f298 	.word	0x0001f298
   16204:	0001f2e0 	.word	0x0001f2e0
   16208:	0001f2d0 	.word	0x0001f2d0
   1620c:	0001f338 	.word	0x0001f338
   16210:	0001f2a4 	.word	0x0001f2a4
   16214:	20020818 	.word	0x20020818

00016218 <pdn_interface_setopt>:
   16218:	b510      	push	{r4, lr}
   1621a:	f240 2402 	movw	r4, #514	; 0x202
   1621e:	42a1      	cmp	r1, r4
   16220:	d10b      	bne.n	1623a <pdn_interface_setopt+0x22>
   16222:	b153      	cbz	r3, 1623a <pdn_interface_setopt+0x22>
   16224:	9902      	ldr	r1, [sp, #8]
   16226:	b141      	cbz	r1, 1623a <pdn_interface_setopt+0x22>
   16228:	4925      	ldr	r1, [pc, #148]	; (162c0 <pdn_interface_setopt+0xa8>)
   1622a:	4381      	bics	r1, r0
   1622c:	d00b      	beq.n	16246 <pdn_interface_setopt+0x2e>
   1622e:	2009      	movs	r0, #9
   16230:	f7fb f938 	bl	114a4 <bsd_os_errno_set>
   16234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16238:	bd10      	pop	{r4, pc}
   1623a:	2016      	movs	r0, #22
   1623c:	f7fb f932 	bl	114a4 <bsd_os_errno_set>
   16240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16244:	bd10      	pop	{r4, pc}
   16246:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   1624a:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   1624e:	2809      	cmp	r0, #9
   16250:	dced      	bgt.n	1622e <pdn_interface_setopt+0x16>
   16252:	491c      	ldr	r1, [pc, #112]	; (162c4 <pdn_interface_setopt+0xac>)
   16254:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   16258:	2900      	cmp	r1, #0
   1625a:	d0e8      	beq.n	1622e <pdn_interface_setopt+0x16>
   1625c:	688c      	ldr	r4, [r1, #8]
   1625e:	2c00      	cmp	r4, #0
   16260:	d0e5      	beq.n	1622e <pdn_interface_setopt+0x16>
   16262:	2800      	cmp	r0, #0
   16264:	dbe3      	blt.n	1622e <pdn_interface_setopt+0x16>
   16266:	2a01      	cmp	r2, #1
   16268:	d001      	beq.n	1626e <pdn_interface_setopt+0x56>
   1626a:	202d      	movs	r0, #45	; 0x2d
   1626c:	e7e6      	b.n	1623c <pdn_interface_setopt+0x24>
   1626e:	688a      	ldr	r2, [r1, #8]
   16270:	b1fa      	cbz	r2, 162b2 <pdn_interface_setopt+0x9a>
   16272:	688a      	ldr	r2, [r1, #8]
   16274:	2a03      	cmp	r2, #3
   16276:	d01c      	beq.n	162b2 <pdn_interface_setopt+0x9a>
   16278:	688a      	ldr	r2, [r1, #8]
   1627a:	2a04      	cmp	r2, #4
   1627c:	d019      	beq.n	162b2 <pdn_interface_setopt+0x9a>
   1627e:	9a02      	ldr	r2, [sp, #8]
   16280:	0890      	lsrs	r0, r2, #2
   16282:	1e42      	subs	r2, r0, #1
   16284:	2a01      	cmp	r2, #1
   16286:	d8d8      	bhi.n	1623a <pdn_interface_setopt+0x22>
   16288:	9a02      	ldr	r2, [sp, #8]
   1628a:	0792      	lsls	r2, r2, #30
   1628c:	d1d5      	bne.n	1623a <pdn_interface_setopt+0x22>
   1628e:	681a      	ldr	r2, [r3, #0]
   16290:	2a02      	cmp	r2, #2
   16292:	d010      	beq.n	162b6 <pdn_interface_setopt+0x9e>
   16294:	2a0a      	cmp	r2, #10
   16296:	d1d0      	bne.n	1623a <pdn_interface_setopt+0x22>
   16298:	2202      	movs	r2, #2
   1629a:	2802      	cmp	r0, #2
   1629c:	d106      	bne.n	162ac <pdn_interface_setopt+0x94>
   1629e:	685b      	ldr	r3, [r3, #4]
   162a0:	2b02      	cmp	r3, #2
   162a2:	d00a      	beq.n	162ba <pdn_interface_setopt+0xa2>
   162a4:	2b0a      	cmp	r3, #10
   162a6:	d1c8      	bne.n	1623a <pdn_interface_setopt+0x22>
   162a8:	f042 0202 	orr.w	r2, r2, #2
   162ac:	670a      	str	r2, [r1, #112]	; 0x70
   162ae:	2000      	movs	r0, #0
   162b0:	e7c4      	b.n	1623c <pdn_interface_setopt+0x24>
   162b2:	200e      	movs	r0, #14
   162b4:	e7c2      	b.n	1623c <pdn_interface_setopt+0x24>
   162b6:	2201      	movs	r2, #1
   162b8:	e7ef      	b.n	1629a <pdn_interface_setopt+0x82>
   162ba:	f042 0201 	orr.w	r2, r2, #1
   162be:	e7f5      	b.n	162ac <pdn_interface_setopt+0x94>
   162c0:	789a0000 	.word	0x789a0000
   162c4:	2002091c 	.word	0x2002091c

000162c8 <pdn_interface_getopt>:
   162c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   162cc:	f240 2402 	movw	r4, #514	; 0x202
   162d0:	b083      	sub	sp, #12
   162d2:	42a1      	cmp	r1, r4
   162d4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   162d6:	f040 80a9 	bne.w	1642c <pdn_interface_getopt+0x164>
   162da:	461e      	mov	r6, r3
   162dc:	2b00      	cmp	r3, #0
   162de:	f000 80a5 	beq.w	1642c <pdn_interface_getopt+0x164>
   162e2:	2d00      	cmp	r5, #0
   162e4:	f000 80a2 	beq.w	1642c <pdn_interface_getopt+0x164>
   162e8:	4b56      	ldr	r3, [pc, #344]	; (16444 <pdn_interface_getopt+0x17c>)
   162ea:	4383      	bics	r3, r0
   162ec:	f040 8084 	bne.w	163f8 <pdn_interface_getopt+0x130>
   162f0:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   162f4:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   162f8:	2c09      	cmp	r4, #9
   162fa:	dc7d      	bgt.n	163f8 <pdn_interface_getopt+0x130>
   162fc:	4b52      	ldr	r3, [pc, #328]	; (16448 <pdn_interface_getopt+0x180>)
   162fe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   16302:	2b00      	cmp	r3, #0
   16304:	d078      	beq.n	163f8 <pdn_interface_getopt+0x130>
   16306:	6899      	ldr	r1, [r3, #8]
   16308:	2900      	cmp	r1, #0
   1630a:	d075      	beq.n	163f8 <pdn_interface_getopt+0x130>
   1630c:	2c00      	cmp	r4, #0
   1630e:	db73      	blt.n	163f8 <pdn_interface_getopt+0x130>
   16310:	2a02      	cmp	r2, #2
   16312:	d00e      	beq.n	16332 <pdn_interface_getopt+0x6a>
   16314:	2a03      	cmp	r2, #3
   16316:	d008      	beq.n	1632a <pdn_interface_getopt+0x62>
   16318:	2a01      	cmp	r2, #1
   1631a:	d015      	beq.n	16348 <pdn_interface_getopt+0x80>
   1631c:	202d      	movs	r0, #45	; 0x2d
   1631e:	f7fb f8c1 	bl	114a4 <bsd_os_errno_set>
   16322:	2000      	movs	r0, #0
   16324:	b003      	add	sp, #12
   16326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1632a:	682b      	ldr	r3, [r5, #0]
   1632c:	bb23      	cbnz	r3, 16378 <pdn_interface_getopt+0xb0>
   1632e:	2016      	movs	r0, #22
   16330:	e7f5      	b.n	1631e <pdn_interface_getopt+0x56>
   16332:	682a      	ldr	r2, [r5, #0]
   16334:	2a00      	cmp	r2, #0
   16336:	d0fa      	beq.n	1632e <pdn_interface_getopt+0x66>
   16338:	2201      	movs	r2, #1
   1633a:	2000      	movs	r0, #0
   1633c:	681b      	ldr	r3, [r3, #0]
   1633e:	7033      	strb	r3, [r6, #0]
   16340:	602a      	str	r2, [r5, #0]
   16342:	b003      	add	sp, #12
   16344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16348:	689a      	ldr	r2, [r3, #8]
   1634a:	2a00      	cmp	r2, #0
   1634c:	d052      	beq.n	163f4 <pdn_interface_getopt+0x12c>
   1634e:	689a      	ldr	r2, [r3, #8]
   16350:	2a04      	cmp	r2, #4
   16352:	d04f      	beq.n	163f4 <pdn_interface_getopt+0x12c>
   16354:	682a      	ldr	r2, [r5, #0]
   16356:	2a07      	cmp	r2, #7
   16358:	d9e9      	bls.n	1632e <pdn_interface_getopt+0x66>
   1635a:	f012 0203 	ands.w	r2, r2, #3
   1635e:	d1e6      	bne.n	1632e <pdn_interface_getopt+0x66>
   16360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   16362:	0799      	lsls	r1, r3, #30
   16364:	d45d      	bmi.n	16422 <pdn_interface_getopt+0x15a>
   16366:	2104      	movs	r1, #4
   16368:	07db      	lsls	r3, r3, #31
   1636a:	d502      	bpl.n	16372 <pdn_interface_getopt+0xaa>
   1636c:	2302      	movs	r3, #2
   1636e:	50b3      	str	r3, [r6, r2]
   16370:	460a      	mov	r2, r1
   16372:	602a      	str	r2, [r5, #0]
   16374:	2000      	movs	r0, #0
   16376:	e7d5      	b.n	16324 <pdn_interface_getopt+0x5c>
   16378:	4a34      	ldr	r2, [pc, #208]	; (1644c <pdn_interface_getopt+0x184>)
   1637a:	f44f 7180 	mov.w	r1, #256	; 0x100
   1637e:	4834      	ldr	r0, [pc, #208]	; (16450 <pdn_interface_getopt+0x188>)
   16380:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 1645c <pdn_interface_getopt+0x194>
   16384:	f7fa fb40 	bl	10a08 <snprintf>
   16388:	4831      	ldr	r0, [pc, #196]	; (16450 <pdn_interface_getopt+0x188>)
   1638a:	f8d8 9000 	ldr.w	r9, [r8]
   1638e:	2700      	movs	r7, #0
   16390:	f006 fe9a 	bl	1d0c8 <strlen>
   16394:	463b      	mov	r3, r7
   16396:	4602      	mov	r2, r0
   16398:	492d      	ldr	r1, [pc, #180]	; (16450 <pdn_interface_getopt+0x188>)
   1639a:	4648      	mov	r0, r9
   1639c:	9701      	str	r7, [sp, #4]
   1639e:	9700      	str	r7, [sp, #0]
   163a0:	f7fc fb8a 	bl	12ab8 <at_interface_write>
   163a4:	4681      	mov	r9, r0
   163a6:	482a      	ldr	r0, [pc, #168]	; (16450 <pdn_interface_getopt+0x188>)
   163a8:	f006 fe8e 	bl	1d0c8 <strlen>
   163ac:	4548      	cmp	r0, r9
   163ae:	d143      	bne.n	16438 <pdn_interface_getopt+0x170>
   163b0:	463b      	mov	r3, r7
   163b2:	e9cd 7700 	strd	r7, r7, [sp]
   163b6:	f44f 7280 	mov.w	r2, #256	; 0x100
   163ba:	4925      	ldr	r1, [pc, #148]	; (16450 <pdn_interface_getopt+0x188>)
   163bc:	f8d8 0000 	ldr.w	r0, [r8]
   163c0:	f7fc fc62 	bl	12c88 <at_interface_read>
   163c4:	4607      	mov	r7, r0
   163c6:	4823      	ldr	r0, [pc, #140]	; (16454 <pdn_interface_getopt+0x18c>)
   163c8:	f006 fe7e 	bl	1d0c8 <strlen>
   163cc:	4287      	cmp	r7, r0
   163ce:	db19      	blt.n	16404 <pdn_interface_getopt+0x13c>
   163d0:	4602      	mov	r2, r0
   163d2:	491f      	ldr	r1, [pc, #124]	; (16450 <pdn_interface_getopt+0x188>)
   163d4:	481f      	ldr	r0, [pc, #124]	; (16454 <pdn_interface_getopt+0x18c>)
   163d6:	f006 fe8a 	bl	1d0ee <strncmp>
   163da:	4607      	mov	r7, r0
   163dc:	b990      	cbnz	r0, 16404 <pdn_interface_getopt+0x13c>
   163de:	4620      	mov	r0, r4
   163e0:	491b      	ldr	r1, [pc, #108]	; (16450 <pdn_interface_getopt+0x188>)
   163e2:	f7ff fb35 	bl	15a50 <pdn_state_get_parser>
   163e6:	2800      	cmp	r0, #0
   163e8:	db99      	blt.n	1631e <pdn_interface_getopt+0x56>
   163ea:	2301      	movs	r3, #1
   163ec:	7030      	strb	r0, [r6, #0]
   163ee:	4638      	mov	r0, r7
   163f0:	602b      	str	r3, [r5, #0]
   163f2:	e797      	b.n	16324 <pdn_interface_getopt+0x5c>
   163f4:	200e      	movs	r0, #14
   163f6:	e792      	b.n	1631e <pdn_interface_getopt+0x56>
   163f8:	2009      	movs	r0, #9
   163fa:	f7fb f853 	bl	114a4 <bsd_os_errno_set>
   163fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16402:	e78f      	b.n	16324 <pdn_interface_getopt+0x5c>
   16404:	4814      	ldr	r0, [pc, #80]	; (16458 <pdn_interface_getopt+0x190>)
   16406:	f006 fe5f 	bl	1d0c8 <strlen>
   1640a:	4911      	ldr	r1, [pc, #68]	; (16450 <pdn_interface_getopt+0x188>)
   1640c:	4602      	mov	r2, r0
   1640e:	4812      	ldr	r0, [pc, #72]	; (16458 <pdn_interface_getopt+0x190>)
   16410:	f006 fe6d 	bl	1d0ee <strncmp>
   16414:	b980      	cbnz	r0, 16438 <pdn_interface_getopt+0x170>
   16416:	2008      	movs	r0, #8
   16418:	f7fb f844 	bl	114a4 <bsd_os_errno_set>
   1641c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16420:	e77d      	b.n	1631e <pdn_interface_getopt+0x56>
   16422:	220a      	movs	r2, #10
   16424:	2108      	movs	r1, #8
   16426:	6032      	str	r2, [r6, #0]
   16428:	2204      	movs	r2, #4
   1642a:	e79d      	b.n	16368 <pdn_interface_getopt+0xa0>
   1642c:	2016      	movs	r0, #22
   1642e:	f7fb f839 	bl	114a4 <bsd_os_errno_set>
   16432:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16436:	e775      	b.n	16324 <pdn_interface_getopt+0x5c>
   16438:	2005      	movs	r0, #5
   1643a:	f7fb f833 	bl	114a4 <bsd_os_errno_set>
   1643e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16442:	e76c      	b.n	1631e <pdn_interface_getopt+0x56>
   16444:	789a0000 	.word	0x789a0000
   16448:	2002091c 	.word	0x2002091c
   1644c:	0001f308 	.word	0x0001f308
   16450:	2002081c 	.word	0x2002081c
   16454:	0001f314 	.word	0x0001f314
   16458:	0001f338 	.word	0x0001f338
   1645c:	20020818 	.word	0x20020818

00016460 <pdn_interface_pdn_id_get>:
   16460:	2900      	cmp	r1, #0
   16462:	f000 83b9 	beq.w	16bd8 <pdn_interface_pdn_id_get+0x778>
   16466:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1646a:	4ca3      	ldr	r4, [pc, #652]	; (166f8 <pdn_interface_pdn_id_get+0x298>)
   1646c:	2802      	cmp	r0, #2
   1646e:	b083      	sub	sp, #12
   16470:	460d      	mov	r5, r1
   16472:	6823      	ldr	r3, [r4, #0]
   16474:	f000 8094 	beq.w	165a0 <pdn_interface_pdn_id_get+0x140>
   16478:	280a      	cmp	r0, #10
   1647a:	d03f      	beq.n	164fc <pdn_interface_pdn_id_get+0x9c>
   1647c:	b11b      	cbz	r3, 16486 <pdn_interface_pdn_id_get+0x26>
   1647e:	689b      	ldr	r3, [r3, #8]
   16480:	2b03      	cmp	r3, #3
   16482:	f000 8127 	beq.w	166d4 <pdn_interface_pdn_id_get+0x274>
   16486:	6863      	ldr	r3, [r4, #4]
   16488:	b11b      	cbz	r3, 16492 <pdn_interface_pdn_id_get+0x32>
   1648a:	689b      	ldr	r3, [r3, #8]
   1648c:	2b03      	cmp	r3, #3
   1648e:	f000 8110 	beq.w	166b2 <pdn_interface_pdn_id_get+0x252>
   16492:	68a3      	ldr	r3, [r4, #8]
   16494:	b11b      	cbz	r3, 1649e <pdn_interface_pdn_id_get+0x3e>
   16496:	689b      	ldr	r3, [r3, #8]
   16498:	2b03      	cmp	r3, #3
   1649a:	f000 80f9 	beq.w	16690 <pdn_interface_pdn_id_get+0x230>
   1649e:	68e3      	ldr	r3, [r4, #12]
   164a0:	b11b      	cbz	r3, 164aa <pdn_interface_pdn_id_get+0x4a>
   164a2:	689b      	ldr	r3, [r3, #8]
   164a4:	2b03      	cmp	r3, #3
   164a6:	f000 80e2 	beq.w	1666e <pdn_interface_pdn_id_get+0x20e>
   164aa:	6923      	ldr	r3, [r4, #16]
   164ac:	b11b      	cbz	r3, 164b6 <pdn_interface_pdn_id_get+0x56>
   164ae:	689b      	ldr	r3, [r3, #8]
   164b0:	2b03      	cmp	r3, #3
   164b2:	f000 8123 	beq.w	166fc <pdn_interface_pdn_id_get+0x29c>
   164b6:	6963      	ldr	r3, [r4, #20]
   164b8:	b11b      	cbz	r3, 164c2 <pdn_interface_pdn_id_get+0x62>
   164ba:	689b      	ldr	r3, [r3, #8]
   164bc:	2b03      	cmp	r3, #3
   164be:	f000 8161 	beq.w	16784 <pdn_interface_pdn_id_get+0x324>
   164c2:	69a3      	ldr	r3, [r4, #24]
   164c4:	b11b      	cbz	r3, 164ce <pdn_interface_pdn_id_get+0x6e>
   164c6:	689b      	ldr	r3, [r3, #8]
   164c8:	2b03      	cmp	r3, #3
   164ca:	f000 814a 	beq.w	16762 <pdn_interface_pdn_id_get+0x302>
   164ce:	69e3      	ldr	r3, [r4, #28]
   164d0:	b11b      	cbz	r3, 164da <pdn_interface_pdn_id_get+0x7a>
   164d2:	689b      	ldr	r3, [r3, #8]
   164d4:	2b03      	cmp	r3, #3
   164d6:	f000 8133 	beq.w	16740 <pdn_interface_pdn_id_get+0x2e0>
   164da:	6a23      	ldr	r3, [r4, #32]
   164dc:	b11b      	cbz	r3, 164e6 <pdn_interface_pdn_id_get+0x86>
   164de:	689b      	ldr	r3, [r3, #8]
   164e0:	2b03      	cmp	r3, #3
   164e2:	f000 811c 	beq.w	1671e <pdn_interface_pdn_id_get+0x2be>
   164e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   164e8:	b11b      	cbz	r3, 164f2 <pdn_interface_pdn_id_get+0x92>
   164ea:	689b      	ldr	r3, [r3, #8]
   164ec:	2b03      	cmp	r3, #3
   164ee:	f000 80ad 	beq.w	1664c <pdn_interface_pdn_id_get+0x1ec>
   164f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   164f6:	b003      	add	sp, #12
   164f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   164fc:	b11b      	cbz	r3, 16506 <pdn_interface_pdn_id_get+0xa6>
   164fe:	689b      	ldr	r3, [r3, #8]
   16500:	2b03      	cmp	r3, #3
   16502:	f000 8335 	beq.w	16b70 <pdn_interface_pdn_id_get+0x710>
   16506:	6863      	ldr	r3, [r4, #4]
   16508:	b11b      	cbz	r3, 16512 <pdn_interface_pdn_id_get+0xb2>
   1650a:	689b      	ldr	r3, [r3, #8]
   1650c:	2b03      	cmp	r3, #3
   1650e:	f000 82fd 	beq.w	16b0c <pdn_interface_pdn_id_get+0x6ac>
   16512:	68a3      	ldr	r3, [r4, #8]
   16514:	b11b      	cbz	r3, 1651e <pdn_interface_pdn_id_get+0xbe>
   16516:	689b      	ldr	r3, [r3, #8]
   16518:	2b03      	cmp	r3, #3
   1651a:	f000 82d5 	beq.w	16ac8 <pdn_interface_pdn_id_get+0x668>
   1651e:	68e3      	ldr	r3, [r4, #12]
   16520:	b11b      	cbz	r3, 1652a <pdn_interface_pdn_id_get+0xca>
   16522:	689e      	ldr	r6, [r3, #8]
   16524:	2e03      	cmp	r6, #3
   16526:	f000 81f0 	beq.w	1690a <pdn_interface_pdn_id_get+0x4aa>
   1652a:	6923      	ldr	r3, [r4, #16]
   1652c:	b11b      	cbz	r3, 16536 <pdn_interface_pdn_id_get+0xd6>
   1652e:	689b      	ldr	r3, [r3, #8]
   16530:	2b03      	cmp	r3, #3
   16532:	f000 8203 	beq.w	1693c <pdn_interface_pdn_id_get+0x4dc>
   16536:	6963      	ldr	r3, [r4, #20]
   16538:	b11b      	cbz	r3, 16542 <pdn_interface_pdn_id_get+0xe2>
   1653a:	689b      	ldr	r3, [r3, #8]
   1653c:	2b03      	cmp	r3, #3
   1653e:	f000 8215 	beq.w	1696c <pdn_interface_pdn_id_get+0x50c>
   16542:	69a3      	ldr	r3, [r4, #24]
   16544:	b11b      	cbz	r3, 1654e <pdn_interface_pdn_id_get+0xee>
   16546:	689b      	ldr	r3, [r3, #8]
   16548:	2b03      	cmp	r3, #3
   1654a:	f000 8227 	beq.w	1699c <pdn_interface_pdn_id_get+0x53c>
   1654e:	69e3      	ldr	r3, [r4, #28]
   16550:	b11b      	cbz	r3, 1655a <pdn_interface_pdn_id_get+0xfa>
   16552:	689b      	ldr	r3, [r3, #8]
   16554:	2b03      	cmp	r3, #3
   16556:	f000 8239 	beq.w	169cc <pdn_interface_pdn_id_get+0x56c>
   1655a:	6a23      	ldr	r3, [r4, #32]
   1655c:	b11b      	cbz	r3, 16566 <pdn_interface_pdn_id_get+0x106>
   1655e:	689b      	ldr	r3, [r3, #8]
   16560:	2b03      	cmp	r3, #3
   16562:	f000 824d 	beq.w	16a00 <pdn_interface_pdn_id_get+0x5a0>
   16566:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16568:	2b00      	cmp	r3, #0
   1656a:	d0c2      	beq.n	164f2 <pdn_interface_pdn_id_get+0x92>
   1656c:	689b      	ldr	r3, [r3, #8]
   1656e:	2b03      	cmp	r3, #3
   16570:	d1bf      	bne.n	164f2 <pdn_interface_pdn_id_get+0x92>
   16572:	4628      	mov	r0, r5
   16574:	f006 fda8 	bl	1d0c8 <strlen>
   16578:	4606      	mov	r6, r0
   1657a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1657c:	300c      	adds	r0, #12
   1657e:	f006 fda3 	bl	1d0c8 <strlen>
   16582:	42b0      	cmp	r0, r6
   16584:	d1b5      	bne.n	164f2 <pdn_interface_pdn_id_get+0x92>
   16586:	6a61      	ldr	r1, [r4, #36]	; 0x24
   16588:	4628      	mov	r0, r5
   1658a:	310c      	adds	r1, #12
   1658c:	f006 fda3 	bl	1d0d6 <strcmp>
   16590:	2800      	cmp	r0, #0
   16592:	d1ae      	bne.n	164f2 <pdn_interface_pdn_id_get+0x92>
   16594:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16596:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16598:	0792      	lsls	r2, r2, #30
   1659a:	d5aa      	bpl.n	164f2 <pdn_interface_pdn_id_get+0x92>
   1659c:	2609      	movs	r6, #9
   1659e:	e11a      	b.n	167d6 <pdn_interface_pdn_id_get+0x376>
   165a0:	b11b      	cbz	r3, 165aa <pdn_interface_pdn_id_get+0x14a>
   165a2:	689b      	ldr	r3, [r3, #8]
   165a4:	2b03      	cmp	r3, #3
   165a6:	f000 82fd 	beq.w	16ba4 <pdn_interface_pdn_id_get+0x744>
   165aa:	6863      	ldr	r3, [r4, #4]
   165ac:	b11b      	cbz	r3, 165b6 <pdn_interface_pdn_id_get+0x156>
   165ae:	689b      	ldr	r3, [r3, #8]
   165b0:	2b03      	cmp	r3, #3
   165b2:	f000 82c5 	beq.w	16b40 <pdn_interface_pdn_id_get+0x6e0>
   165b6:	68a3      	ldr	r3, [r4, #8]
   165b8:	b11b      	cbz	r3, 165c2 <pdn_interface_pdn_id_get+0x162>
   165ba:	689b      	ldr	r3, [r3, #8]
   165bc:	2b03      	cmp	r3, #3
   165be:	f000 8269 	beq.w	16a94 <pdn_interface_pdn_id_get+0x634>
   165c2:	68e3      	ldr	r3, [r4, #12]
   165c4:	b11b      	cbz	r3, 165ce <pdn_interface_pdn_id_get+0x16e>
   165c6:	689e      	ldr	r6, [r3, #8]
   165c8:	2e03      	cmp	r6, #3
   165ca:	f000 80ec 	beq.w	167a6 <pdn_interface_pdn_id_get+0x346>
   165ce:	6923      	ldr	r3, [r4, #16]
   165d0:	b11b      	cbz	r3, 165da <pdn_interface_pdn_id_get+0x17a>
   165d2:	689b      	ldr	r3, [r3, #8]
   165d4:	2b03      	cmp	r3, #3
   165d6:	f000 814a 	beq.w	1686e <pdn_interface_pdn_id_get+0x40e>
   165da:	6963      	ldr	r3, [r4, #20]
   165dc:	b11b      	cbz	r3, 165e6 <pdn_interface_pdn_id_get+0x186>
   165de:	689b      	ldr	r3, [r3, #8]
   165e0:	2b03      	cmp	r3, #3
   165e2:	f000 815e 	beq.w	168a2 <pdn_interface_pdn_id_get+0x442>
   165e6:	69a3      	ldr	r3, [r4, #24]
   165e8:	b11b      	cbz	r3, 165f2 <pdn_interface_pdn_id_get+0x192>
   165ea:	689b      	ldr	r3, [r3, #8]
   165ec:	2b03      	cmp	r3, #3
   165ee:	f000 8172 	beq.w	168d6 <pdn_interface_pdn_id_get+0x476>
   165f2:	69e3      	ldr	r3, [r4, #28]
   165f4:	b11b      	cbz	r3, 165fe <pdn_interface_pdn_id_get+0x19e>
   165f6:	689b      	ldr	r3, [r3, #8]
   165f8:	2b03      	cmp	r3, #3
   165fa:	f000 821b 	beq.w	16a34 <pdn_interface_pdn_id_get+0x5d4>
   165fe:	6a23      	ldr	r3, [r4, #32]
   16600:	b11b      	cbz	r3, 1660a <pdn_interface_pdn_id_get+0x1aa>
   16602:	689b      	ldr	r3, [r3, #8]
   16604:	2b03      	cmp	r3, #3
   16606:	f000 822d 	beq.w	16a64 <pdn_interface_pdn_id_get+0x604>
   1660a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1660c:	2b00      	cmp	r3, #0
   1660e:	f43f af70 	beq.w	164f2 <pdn_interface_pdn_id_get+0x92>
   16612:	689b      	ldr	r3, [r3, #8]
   16614:	2b03      	cmp	r3, #3
   16616:	f47f af6c 	bne.w	164f2 <pdn_interface_pdn_id_get+0x92>
   1661a:	4628      	mov	r0, r5
   1661c:	f006 fd54 	bl	1d0c8 <strlen>
   16620:	4606      	mov	r6, r0
   16622:	6a60      	ldr	r0, [r4, #36]	; 0x24
   16624:	300c      	adds	r0, #12
   16626:	f006 fd4f 	bl	1d0c8 <strlen>
   1662a:	4286      	cmp	r6, r0
   1662c:	f47f af61 	bne.w	164f2 <pdn_interface_pdn_id_get+0x92>
   16630:	6a61      	ldr	r1, [r4, #36]	; 0x24
   16632:	4628      	mov	r0, r5
   16634:	310c      	adds	r1, #12
   16636:	f006 fd4e 	bl	1d0d6 <strcmp>
   1663a:	2800      	cmp	r0, #0
   1663c:	f47f af59 	bne.w	164f2 <pdn_interface_pdn_id_get+0x92>
   16640:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16642:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16644:	07d2      	lsls	r2, r2, #31
   16646:	f57f af54 	bpl.w	164f2 <pdn_interface_pdn_id_get+0x92>
   1664a:	e7a7      	b.n	1659c <pdn_interface_pdn_id_get+0x13c>
   1664c:	4628      	mov	r0, r5
   1664e:	f006 fd3b 	bl	1d0c8 <strlen>
   16652:	4606      	mov	r6, r0
   16654:	6a60      	ldr	r0, [r4, #36]	; 0x24
   16656:	300c      	adds	r0, #12
   16658:	f006 fd36 	bl	1d0c8 <strlen>
   1665c:	42b0      	cmp	r0, r6
   1665e:	f47f af48 	bne.w	164f2 <pdn_interface_pdn_id_get+0x92>
   16662:	6a61      	ldr	r1, [r4, #36]	; 0x24
   16664:	4628      	mov	r0, r5
   16666:	310c      	adds	r1, #12
   16668:	f006 fd35 	bl	1d0d6 <strcmp>
   1666c:	e741      	b.n	164f2 <pdn_interface_pdn_id_get+0x92>
   1666e:	4628      	mov	r0, r5
   16670:	f006 fd2a 	bl	1d0c8 <strlen>
   16674:	4606      	mov	r6, r0
   16676:	68e0      	ldr	r0, [r4, #12]
   16678:	300c      	adds	r0, #12
   1667a:	f006 fd25 	bl	1d0c8 <strlen>
   1667e:	4286      	cmp	r6, r0
   16680:	f47f af13 	bne.w	164aa <pdn_interface_pdn_id_get+0x4a>
   16684:	68e1      	ldr	r1, [r4, #12]
   16686:	4628      	mov	r0, r5
   16688:	310c      	adds	r1, #12
   1668a:	f006 fd24 	bl	1d0d6 <strcmp>
   1668e:	e70c      	b.n	164aa <pdn_interface_pdn_id_get+0x4a>
   16690:	4628      	mov	r0, r5
   16692:	f006 fd19 	bl	1d0c8 <strlen>
   16696:	4606      	mov	r6, r0
   16698:	68a0      	ldr	r0, [r4, #8]
   1669a:	300c      	adds	r0, #12
   1669c:	f006 fd14 	bl	1d0c8 <strlen>
   166a0:	4286      	cmp	r6, r0
   166a2:	f47f aefc 	bne.w	1649e <pdn_interface_pdn_id_get+0x3e>
   166a6:	68a1      	ldr	r1, [r4, #8]
   166a8:	4628      	mov	r0, r5
   166aa:	310c      	adds	r1, #12
   166ac:	f006 fd13 	bl	1d0d6 <strcmp>
   166b0:	e6f5      	b.n	1649e <pdn_interface_pdn_id_get+0x3e>
   166b2:	4628      	mov	r0, r5
   166b4:	f006 fd08 	bl	1d0c8 <strlen>
   166b8:	4606      	mov	r6, r0
   166ba:	6860      	ldr	r0, [r4, #4]
   166bc:	300c      	adds	r0, #12
   166be:	f006 fd03 	bl	1d0c8 <strlen>
   166c2:	4286      	cmp	r6, r0
   166c4:	f47f aee5 	bne.w	16492 <pdn_interface_pdn_id_get+0x32>
   166c8:	6861      	ldr	r1, [r4, #4]
   166ca:	4628      	mov	r0, r5
   166cc:	310c      	adds	r1, #12
   166ce:	f006 fd02 	bl	1d0d6 <strcmp>
   166d2:	e6de      	b.n	16492 <pdn_interface_pdn_id_get+0x32>
   166d4:	4608      	mov	r0, r1
   166d6:	f006 fcf7 	bl	1d0c8 <strlen>
   166da:	4606      	mov	r6, r0
   166dc:	6820      	ldr	r0, [r4, #0]
   166de:	300c      	adds	r0, #12
   166e0:	f006 fcf2 	bl	1d0c8 <strlen>
   166e4:	4286      	cmp	r6, r0
   166e6:	f47f aece 	bne.w	16486 <pdn_interface_pdn_id_get+0x26>
   166ea:	6821      	ldr	r1, [r4, #0]
   166ec:	4628      	mov	r0, r5
   166ee:	310c      	adds	r1, #12
   166f0:	f006 fcf1 	bl	1d0d6 <strcmp>
   166f4:	e6c7      	b.n	16486 <pdn_interface_pdn_id_get+0x26>
   166f6:	bf00      	nop
   166f8:	2002091c 	.word	0x2002091c
   166fc:	4628      	mov	r0, r5
   166fe:	f006 fce3 	bl	1d0c8 <strlen>
   16702:	4606      	mov	r6, r0
   16704:	6920      	ldr	r0, [r4, #16]
   16706:	300c      	adds	r0, #12
   16708:	f006 fcde 	bl	1d0c8 <strlen>
   1670c:	4286      	cmp	r6, r0
   1670e:	f47f aed2 	bne.w	164b6 <pdn_interface_pdn_id_get+0x56>
   16712:	6921      	ldr	r1, [r4, #16]
   16714:	4628      	mov	r0, r5
   16716:	310c      	adds	r1, #12
   16718:	f006 fcdd 	bl	1d0d6 <strcmp>
   1671c:	e6cb      	b.n	164b6 <pdn_interface_pdn_id_get+0x56>
   1671e:	4628      	mov	r0, r5
   16720:	f006 fcd2 	bl	1d0c8 <strlen>
   16724:	4606      	mov	r6, r0
   16726:	6a20      	ldr	r0, [r4, #32]
   16728:	300c      	adds	r0, #12
   1672a:	f006 fccd 	bl	1d0c8 <strlen>
   1672e:	4286      	cmp	r6, r0
   16730:	f47f aed9 	bne.w	164e6 <pdn_interface_pdn_id_get+0x86>
   16734:	6a21      	ldr	r1, [r4, #32]
   16736:	4628      	mov	r0, r5
   16738:	310c      	adds	r1, #12
   1673a:	f006 fccc 	bl	1d0d6 <strcmp>
   1673e:	e6d2      	b.n	164e6 <pdn_interface_pdn_id_get+0x86>
   16740:	4628      	mov	r0, r5
   16742:	f006 fcc1 	bl	1d0c8 <strlen>
   16746:	4606      	mov	r6, r0
   16748:	69e0      	ldr	r0, [r4, #28]
   1674a:	300c      	adds	r0, #12
   1674c:	f006 fcbc 	bl	1d0c8 <strlen>
   16750:	4286      	cmp	r6, r0
   16752:	f47f aec2 	bne.w	164da <pdn_interface_pdn_id_get+0x7a>
   16756:	69e1      	ldr	r1, [r4, #28]
   16758:	4628      	mov	r0, r5
   1675a:	310c      	adds	r1, #12
   1675c:	f006 fcbb 	bl	1d0d6 <strcmp>
   16760:	e6bb      	b.n	164da <pdn_interface_pdn_id_get+0x7a>
   16762:	4628      	mov	r0, r5
   16764:	f006 fcb0 	bl	1d0c8 <strlen>
   16768:	4606      	mov	r6, r0
   1676a:	69a0      	ldr	r0, [r4, #24]
   1676c:	300c      	adds	r0, #12
   1676e:	f006 fcab 	bl	1d0c8 <strlen>
   16772:	4286      	cmp	r6, r0
   16774:	f47f aeab 	bne.w	164ce <pdn_interface_pdn_id_get+0x6e>
   16778:	69a1      	ldr	r1, [r4, #24]
   1677a:	4628      	mov	r0, r5
   1677c:	310c      	adds	r1, #12
   1677e:	f006 fcaa 	bl	1d0d6 <strcmp>
   16782:	e6a4      	b.n	164ce <pdn_interface_pdn_id_get+0x6e>
   16784:	4628      	mov	r0, r5
   16786:	f006 fc9f 	bl	1d0c8 <strlen>
   1678a:	4606      	mov	r6, r0
   1678c:	6960      	ldr	r0, [r4, #20]
   1678e:	300c      	adds	r0, #12
   16790:	f006 fc9a 	bl	1d0c8 <strlen>
   16794:	4286      	cmp	r6, r0
   16796:	f47f ae94 	bne.w	164c2 <pdn_interface_pdn_id_get+0x62>
   1679a:	6961      	ldr	r1, [r4, #20]
   1679c:	4628      	mov	r0, r5
   1679e:	310c      	adds	r1, #12
   167a0:	f006 fc99 	bl	1d0d6 <strcmp>
   167a4:	e68d      	b.n	164c2 <pdn_interface_pdn_id_get+0x62>
   167a6:	4628      	mov	r0, r5
   167a8:	f006 fc8e 	bl	1d0c8 <strlen>
   167ac:	4607      	mov	r7, r0
   167ae:	68e0      	ldr	r0, [r4, #12]
   167b0:	300c      	adds	r0, #12
   167b2:	f006 fc89 	bl	1d0c8 <strlen>
   167b6:	4287      	cmp	r7, r0
   167b8:	f47f af09 	bne.w	165ce <pdn_interface_pdn_id_get+0x16e>
   167bc:	68e1      	ldr	r1, [r4, #12]
   167be:	4628      	mov	r0, r5
   167c0:	310c      	adds	r1, #12
   167c2:	f006 fc88 	bl	1d0d6 <strcmp>
   167c6:	2800      	cmp	r0, #0
   167c8:	f47f af01 	bne.w	165ce <pdn_interface_pdn_id_get+0x16e>
   167cc:	68e3      	ldr	r3, [r4, #12]
   167ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   167d0:	07d1      	lsls	r1, r2, #31
   167d2:	f57f aefc 	bpl.w	165ce <pdn_interface_pdn_id_get+0x16e>
   167d6:	6858      	ldr	r0, [r3, #4]
   167d8:	1c43      	adds	r3, r0, #1
   167da:	f47f ae8c 	bne.w	164f6 <pdn_interface_pdn_id_get+0x96>
   167de:	4dc6      	ldr	r5, [pc, #792]	; (16af8 <pdn_interface_pdn_id_get+0x698>)
   167e0:	4ac6      	ldr	r2, [pc, #792]	; (16afc <pdn_interface_pdn_id_get+0x69c>)
   167e2:	f44f 7180 	mov.w	r1, #256	; 0x100
   167e6:	4628      	mov	r0, r5
   167e8:	f7fa f90e 	bl	10a08 <snprintf>
   167ec:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   167f0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   167f4:	681b      	ldr	r3, [r3, #0]
   167f6:	4ac2      	ldr	r2, [pc, #776]	; (16b00 <pdn_interface_pdn_id_get+0x6a0>)
   167f8:	4428      	add	r0, r5
   167fa:	f8df 830c 	ldr.w	r8, [pc, #780]	; 16b08 <pdn_interface_pdn_id_get+0x6a8>
   167fe:	f7fa f903 	bl	10a08 <snprintf>
   16802:	4628      	mov	r0, r5
   16804:	f8d8 9000 	ldr.w	r9, [r8]
   16808:	2700      	movs	r7, #0
   1680a:	f006 fc5d 	bl	1d0c8 <strlen>
   1680e:	4629      	mov	r1, r5
   16810:	4602      	mov	r2, r0
   16812:	463b      	mov	r3, r7
   16814:	4648      	mov	r0, r9
   16816:	9701      	str	r7, [sp, #4]
   16818:	9700      	str	r7, [sp, #0]
   1681a:	f7fc f94d 	bl	12ab8 <at_interface_write>
   1681e:	4681      	mov	r9, r0
   16820:	4628      	mov	r0, r5
   16822:	f006 fc51 	bl	1d0c8 <strlen>
   16826:	4548      	cmp	r0, r9
   16828:	f040 81e9 	bne.w	16bfe <pdn_interface_pdn_id_get+0x79e>
   1682c:	463b      	mov	r3, r7
   1682e:	f44f 7280 	mov.w	r2, #256	; 0x100
   16832:	e9cd 7700 	strd	r7, r7, [sp]
   16836:	4629      	mov	r1, r5
   16838:	f8d8 0000 	ldr.w	r0, [r8]
   1683c:	f7fc fa24 	bl	12c88 <at_interface_read>
   16840:	4607      	mov	r7, r0
   16842:	48b0      	ldr	r0, [pc, #704]	; (16b04 <pdn_interface_pdn_id_get+0x6a4>)
   16844:	f006 fc40 	bl	1d0c8 <strlen>
   16848:	4287      	cmp	r7, r0
   1684a:	4602      	mov	r2, r0
   1684c:	f2c0 81c7 	blt.w	16bde <pdn_interface_pdn_id_get+0x77e>
   16850:	4629      	mov	r1, r5
   16852:	48ac      	ldr	r0, [pc, #688]	; (16b04 <pdn_interface_pdn_id_get+0x6a4>)
   16854:	f006 fc4b 	bl	1d0ee <strncmp>
   16858:	2800      	cmp	r0, #0
   1685a:	f040 81c0 	bne.w	16bde <pdn_interface_pdn_id_get+0x77e>
   1685e:	4629      	mov	r1, r5
   16860:	4630      	mov	r0, r6
   16862:	f7ff f92b 	bl	15abc <pdn_id_get_parser>
   16866:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1686a:	6858      	ldr	r0, [r3, #4]
   1686c:	e643      	b.n	164f6 <pdn_interface_pdn_id_get+0x96>
   1686e:	4628      	mov	r0, r5
   16870:	f006 fc2a 	bl	1d0c8 <strlen>
   16874:	4606      	mov	r6, r0
   16876:	6920      	ldr	r0, [r4, #16]
   16878:	300c      	adds	r0, #12
   1687a:	f006 fc25 	bl	1d0c8 <strlen>
   1687e:	4286      	cmp	r6, r0
   16880:	f47f aeab 	bne.w	165da <pdn_interface_pdn_id_get+0x17a>
   16884:	6921      	ldr	r1, [r4, #16]
   16886:	4628      	mov	r0, r5
   16888:	310c      	adds	r1, #12
   1688a:	f006 fc24 	bl	1d0d6 <strcmp>
   1688e:	2800      	cmp	r0, #0
   16890:	f47f aea3 	bne.w	165da <pdn_interface_pdn_id_get+0x17a>
   16894:	6923      	ldr	r3, [r4, #16]
   16896:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16898:	07d2      	lsls	r2, r2, #31
   1689a:	f57f ae9e 	bpl.w	165da <pdn_interface_pdn_id_get+0x17a>
   1689e:	2604      	movs	r6, #4
   168a0:	e799      	b.n	167d6 <pdn_interface_pdn_id_get+0x376>
   168a2:	4628      	mov	r0, r5
   168a4:	f006 fc10 	bl	1d0c8 <strlen>
   168a8:	4606      	mov	r6, r0
   168aa:	6960      	ldr	r0, [r4, #20]
   168ac:	300c      	adds	r0, #12
   168ae:	f006 fc0b 	bl	1d0c8 <strlen>
   168b2:	4286      	cmp	r6, r0
   168b4:	f47f ae97 	bne.w	165e6 <pdn_interface_pdn_id_get+0x186>
   168b8:	6961      	ldr	r1, [r4, #20]
   168ba:	4628      	mov	r0, r5
   168bc:	310c      	adds	r1, #12
   168be:	f006 fc0a 	bl	1d0d6 <strcmp>
   168c2:	2800      	cmp	r0, #0
   168c4:	f47f ae8f 	bne.w	165e6 <pdn_interface_pdn_id_get+0x186>
   168c8:	6963      	ldr	r3, [r4, #20]
   168ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   168cc:	07d7      	lsls	r7, r2, #31
   168ce:	f57f ae8a 	bpl.w	165e6 <pdn_interface_pdn_id_get+0x186>
   168d2:	2605      	movs	r6, #5
   168d4:	e77f      	b.n	167d6 <pdn_interface_pdn_id_get+0x376>
   168d6:	4628      	mov	r0, r5
   168d8:	f006 fbf6 	bl	1d0c8 <strlen>
   168dc:	4606      	mov	r6, r0
   168de:	69a0      	ldr	r0, [r4, #24]
   168e0:	300c      	adds	r0, #12
   168e2:	f006 fbf1 	bl	1d0c8 <strlen>
   168e6:	4286      	cmp	r6, r0
   168e8:	f47f ae83 	bne.w	165f2 <pdn_interface_pdn_id_get+0x192>
   168ec:	69a1      	ldr	r1, [r4, #24]
   168ee:	4628      	mov	r0, r5
   168f0:	310c      	adds	r1, #12
   168f2:	f006 fbf0 	bl	1d0d6 <strcmp>
   168f6:	2800      	cmp	r0, #0
   168f8:	f47f ae7b 	bne.w	165f2 <pdn_interface_pdn_id_get+0x192>
   168fc:	69a3      	ldr	r3, [r4, #24]
   168fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16900:	07d6      	lsls	r6, r2, #31
   16902:	f57f ae76 	bpl.w	165f2 <pdn_interface_pdn_id_get+0x192>
   16906:	2606      	movs	r6, #6
   16908:	e765      	b.n	167d6 <pdn_interface_pdn_id_get+0x376>
   1690a:	4628      	mov	r0, r5
   1690c:	f006 fbdc 	bl	1d0c8 <strlen>
   16910:	4607      	mov	r7, r0
   16912:	68e0      	ldr	r0, [r4, #12]
   16914:	300c      	adds	r0, #12
   16916:	f006 fbd7 	bl	1d0c8 <strlen>
   1691a:	4287      	cmp	r7, r0
   1691c:	f47f ae05 	bne.w	1652a <pdn_interface_pdn_id_get+0xca>
   16920:	68e1      	ldr	r1, [r4, #12]
   16922:	4628      	mov	r0, r5
   16924:	310c      	adds	r1, #12
   16926:	f006 fbd6 	bl	1d0d6 <strcmp>
   1692a:	2800      	cmp	r0, #0
   1692c:	f47f adfd 	bne.w	1652a <pdn_interface_pdn_id_get+0xca>
   16930:	68e3      	ldr	r3, [r4, #12]
   16932:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16934:	0791      	lsls	r1, r2, #30
   16936:	f53f af4e 	bmi.w	167d6 <pdn_interface_pdn_id_get+0x376>
   1693a:	e5f6      	b.n	1652a <pdn_interface_pdn_id_get+0xca>
   1693c:	4628      	mov	r0, r5
   1693e:	f006 fbc3 	bl	1d0c8 <strlen>
   16942:	4606      	mov	r6, r0
   16944:	6920      	ldr	r0, [r4, #16]
   16946:	300c      	adds	r0, #12
   16948:	f006 fbbe 	bl	1d0c8 <strlen>
   1694c:	4286      	cmp	r6, r0
   1694e:	f47f adf2 	bne.w	16536 <pdn_interface_pdn_id_get+0xd6>
   16952:	6921      	ldr	r1, [r4, #16]
   16954:	4628      	mov	r0, r5
   16956:	310c      	adds	r1, #12
   16958:	f006 fbbd 	bl	1d0d6 <strcmp>
   1695c:	2800      	cmp	r0, #0
   1695e:	f47f adea 	bne.w	16536 <pdn_interface_pdn_id_get+0xd6>
   16962:	6923      	ldr	r3, [r4, #16]
   16964:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16966:	0792      	lsls	r2, r2, #30
   16968:	d499      	bmi.n	1689e <pdn_interface_pdn_id_get+0x43e>
   1696a:	e5e4      	b.n	16536 <pdn_interface_pdn_id_get+0xd6>
   1696c:	4628      	mov	r0, r5
   1696e:	f006 fbab 	bl	1d0c8 <strlen>
   16972:	4606      	mov	r6, r0
   16974:	6960      	ldr	r0, [r4, #20]
   16976:	300c      	adds	r0, #12
   16978:	f006 fba6 	bl	1d0c8 <strlen>
   1697c:	4286      	cmp	r6, r0
   1697e:	f47f ade0 	bne.w	16542 <pdn_interface_pdn_id_get+0xe2>
   16982:	6961      	ldr	r1, [r4, #20]
   16984:	4628      	mov	r0, r5
   16986:	310c      	adds	r1, #12
   16988:	f006 fba5 	bl	1d0d6 <strcmp>
   1698c:	2800      	cmp	r0, #0
   1698e:	f47f add8 	bne.w	16542 <pdn_interface_pdn_id_get+0xe2>
   16992:	6963      	ldr	r3, [r4, #20]
   16994:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16996:	0797      	lsls	r7, r2, #30
   16998:	d49b      	bmi.n	168d2 <pdn_interface_pdn_id_get+0x472>
   1699a:	e5d2      	b.n	16542 <pdn_interface_pdn_id_get+0xe2>
   1699c:	4628      	mov	r0, r5
   1699e:	f006 fb93 	bl	1d0c8 <strlen>
   169a2:	4606      	mov	r6, r0
   169a4:	69a0      	ldr	r0, [r4, #24]
   169a6:	300c      	adds	r0, #12
   169a8:	f006 fb8e 	bl	1d0c8 <strlen>
   169ac:	4286      	cmp	r6, r0
   169ae:	f47f adce 	bne.w	1654e <pdn_interface_pdn_id_get+0xee>
   169b2:	69a1      	ldr	r1, [r4, #24]
   169b4:	4628      	mov	r0, r5
   169b6:	310c      	adds	r1, #12
   169b8:	f006 fb8d 	bl	1d0d6 <strcmp>
   169bc:	2800      	cmp	r0, #0
   169be:	f47f adc6 	bne.w	1654e <pdn_interface_pdn_id_get+0xee>
   169c2:	69a3      	ldr	r3, [r4, #24]
   169c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   169c6:	0796      	lsls	r6, r2, #30
   169c8:	d49d      	bmi.n	16906 <pdn_interface_pdn_id_get+0x4a6>
   169ca:	e5c0      	b.n	1654e <pdn_interface_pdn_id_get+0xee>
   169cc:	4628      	mov	r0, r5
   169ce:	f006 fb7b 	bl	1d0c8 <strlen>
   169d2:	4606      	mov	r6, r0
   169d4:	69e0      	ldr	r0, [r4, #28]
   169d6:	300c      	adds	r0, #12
   169d8:	f006 fb76 	bl	1d0c8 <strlen>
   169dc:	4286      	cmp	r6, r0
   169de:	f47f adbc 	bne.w	1655a <pdn_interface_pdn_id_get+0xfa>
   169e2:	69e1      	ldr	r1, [r4, #28]
   169e4:	4628      	mov	r0, r5
   169e6:	310c      	adds	r1, #12
   169e8:	f006 fb75 	bl	1d0d6 <strcmp>
   169ec:	2800      	cmp	r0, #0
   169ee:	f47f adb4 	bne.w	1655a <pdn_interface_pdn_id_get+0xfa>
   169f2:	69e3      	ldr	r3, [r4, #28]
   169f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   169f6:	0790      	lsls	r0, r2, #30
   169f8:	f57f adaf 	bpl.w	1655a <pdn_interface_pdn_id_get+0xfa>
   169fc:	2607      	movs	r6, #7
   169fe:	e6ea      	b.n	167d6 <pdn_interface_pdn_id_get+0x376>
   16a00:	4628      	mov	r0, r5
   16a02:	f006 fb61 	bl	1d0c8 <strlen>
   16a06:	4606      	mov	r6, r0
   16a08:	6a20      	ldr	r0, [r4, #32]
   16a0a:	300c      	adds	r0, #12
   16a0c:	f006 fb5c 	bl	1d0c8 <strlen>
   16a10:	4286      	cmp	r6, r0
   16a12:	f47f ada8 	bne.w	16566 <pdn_interface_pdn_id_get+0x106>
   16a16:	6a21      	ldr	r1, [r4, #32]
   16a18:	4628      	mov	r0, r5
   16a1a:	310c      	adds	r1, #12
   16a1c:	f006 fb5b 	bl	1d0d6 <strcmp>
   16a20:	2800      	cmp	r0, #0
   16a22:	f47f ada0 	bne.w	16566 <pdn_interface_pdn_id_get+0x106>
   16a26:	6a23      	ldr	r3, [r4, #32]
   16a28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16a2a:	0791      	lsls	r1, r2, #30
   16a2c:	f57f ad9b 	bpl.w	16566 <pdn_interface_pdn_id_get+0x106>
   16a30:	2608      	movs	r6, #8
   16a32:	e6d0      	b.n	167d6 <pdn_interface_pdn_id_get+0x376>
   16a34:	4628      	mov	r0, r5
   16a36:	f006 fb47 	bl	1d0c8 <strlen>
   16a3a:	4606      	mov	r6, r0
   16a3c:	69e0      	ldr	r0, [r4, #28]
   16a3e:	300c      	adds	r0, #12
   16a40:	f006 fb42 	bl	1d0c8 <strlen>
   16a44:	4286      	cmp	r6, r0
   16a46:	f47f adda 	bne.w	165fe <pdn_interface_pdn_id_get+0x19e>
   16a4a:	69e1      	ldr	r1, [r4, #28]
   16a4c:	4628      	mov	r0, r5
   16a4e:	310c      	adds	r1, #12
   16a50:	f006 fb41 	bl	1d0d6 <strcmp>
   16a54:	2800      	cmp	r0, #0
   16a56:	f47f add2 	bne.w	165fe <pdn_interface_pdn_id_get+0x19e>
   16a5a:	69e3      	ldr	r3, [r4, #28]
   16a5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16a5e:	07d0      	lsls	r0, r2, #31
   16a60:	d4cc      	bmi.n	169fc <pdn_interface_pdn_id_get+0x59c>
   16a62:	e5cc      	b.n	165fe <pdn_interface_pdn_id_get+0x19e>
   16a64:	4628      	mov	r0, r5
   16a66:	f006 fb2f 	bl	1d0c8 <strlen>
   16a6a:	4606      	mov	r6, r0
   16a6c:	6a20      	ldr	r0, [r4, #32]
   16a6e:	300c      	adds	r0, #12
   16a70:	f006 fb2a 	bl	1d0c8 <strlen>
   16a74:	4286      	cmp	r6, r0
   16a76:	f47f adc8 	bne.w	1660a <pdn_interface_pdn_id_get+0x1aa>
   16a7a:	6a21      	ldr	r1, [r4, #32]
   16a7c:	4628      	mov	r0, r5
   16a7e:	310c      	adds	r1, #12
   16a80:	f006 fb29 	bl	1d0d6 <strcmp>
   16a84:	2800      	cmp	r0, #0
   16a86:	f47f adc0 	bne.w	1660a <pdn_interface_pdn_id_get+0x1aa>
   16a8a:	6a23      	ldr	r3, [r4, #32]
   16a8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16a8e:	07d1      	lsls	r1, r2, #31
   16a90:	d4ce      	bmi.n	16a30 <pdn_interface_pdn_id_get+0x5d0>
   16a92:	e5ba      	b.n	1660a <pdn_interface_pdn_id_get+0x1aa>
   16a94:	4628      	mov	r0, r5
   16a96:	f006 fb17 	bl	1d0c8 <strlen>
   16a9a:	4606      	mov	r6, r0
   16a9c:	68a0      	ldr	r0, [r4, #8]
   16a9e:	300c      	adds	r0, #12
   16aa0:	f006 fb12 	bl	1d0c8 <strlen>
   16aa4:	4286      	cmp	r6, r0
   16aa6:	f47f ad8c 	bne.w	165c2 <pdn_interface_pdn_id_get+0x162>
   16aaa:	68a1      	ldr	r1, [r4, #8]
   16aac:	4628      	mov	r0, r5
   16aae:	310c      	adds	r1, #12
   16ab0:	f006 fb11 	bl	1d0d6 <strcmp>
   16ab4:	2800      	cmp	r0, #0
   16ab6:	f47f ad84 	bne.w	165c2 <pdn_interface_pdn_id_get+0x162>
   16aba:	68a3      	ldr	r3, [r4, #8]
   16abc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16abe:	07d0      	lsls	r0, r2, #31
   16ac0:	f57f ad7f 	bpl.w	165c2 <pdn_interface_pdn_id_get+0x162>
   16ac4:	2602      	movs	r6, #2
   16ac6:	e686      	b.n	167d6 <pdn_interface_pdn_id_get+0x376>
   16ac8:	4628      	mov	r0, r5
   16aca:	f006 fafd 	bl	1d0c8 <strlen>
   16ace:	4606      	mov	r6, r0
   16ad0:	68a0      	ldr	r0, [r4, #8]
   16ad2:	300c      	adds	r0, #12
   16ad4:	f006 faf8 	bl	1d0c8 <strlen>
   16ad8:	4286      	cmp	r6, r0
   16ada:	f47f ad20 	bne.w	1651e <pdn_interface_pdn_id_get+0xbe>
   16ade:	68a1      	ldr	r1, [r4, #8]
   16ae0:	4628      	mov	r0, r5
   16ae2:	310c      	adds	r1, #12
   16ae4:	f006 faf7 	bl	1d0d6 <strcmp>
   16ae8:	2800      	cmp	r0, #0
   16aea:	f47f ad18 	bne.w	1651e <pdn_interface_pdn_id_get+0xbe>
   16aee:	68a3      	ldr	r3, [r4, #8]
   16af0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16af2:	0790      	lsls	r0, r2, #30
   16af4:	d4e6      	bmi.n	16ac4 <pdn_interface_pdn_id_get+0x664>
   16af6:	e512      	b.n	1651e <pdn_interface_pdn_id_get+0xbe>
   16af8:	2002081c 	.word	0x2002081c
   16afc:	0001f2e4 	.word	0x0001f2e4
   16b00:	0001f2e0 	.word	0x0001f2e0
   16b04:	0001f2f4 	.word	0x0001f2f4
   16b08:	20020818 	.word	0x20020818
   16b0c:	4628      	mov	r0, r5
   16b0e:	f006 fadb 	bl	1d0c8 <strlen>
   16b12:	4606      	mov	r6, r0
   16b14:	6860      	ldr	r0, [r4, #4]
   16b16:	300c      	adds	r0, #12
   16b18:	f006 fad6 	bl	1d0c8 <strlen>
   16b1c:	4286      	cmp	r6, r0
   16b1e:	f47f acf8 	bne.w	16512 <pdn_interface_pdn_id_get+0xb2>
   16b22:	6861      	ldr	r1, [r4, #4]
   16b24:	4628      	mov	r0, r5
   16b26:	310c      	adds	r1, #12
   16b28:	f006 fad5 	bl	1d0d6 <strcmp>
   16b2c:	2800      	cmp	r0, #0
   16b2e:	f47f acf0 	bne.w	16512 <pdn_interface_pdn_id_get+0xb2>
   16b32:	6863      	ldr	r3, [r4, #4]
   16b34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16b36:	0796      	lsls	r6, r2, #30
   16b38:	f57f aceb 	bpl.w	16512 <pdn_interface_pdn_id_get+0xb2>
   16b3c:	2601      	movs	r6, #1
   16b3e:	e64a      	b.n	167d6 <pdn_interface_pdn_id_get+0x376>
   16b40:	4628      	mov	r0, r5
   16b42:	f006 fac1 	bl	1d0c8 <strlen>
   16b46:	4606      	mov	r6, r0
   16b48:	6860      	ldr	r0, [r4, #4]
   16b4a:	300c      	adds	r0, #12
   16b4c:	f006 fabc 	bl	1d0c8 <strlen>
   16b50:	4286      	cmp	r6, r0
   16b52:	f47f ad30 	bne.w	165b6 <pdn_interface_pdn_id_get+0x156>
   16b56:	6861      	ldr	r1, [r4, #4]
   16b58:	4628      	mov	r0, r5
   16b5a:	310c      	adds	r1, #12
   16b5c:	f006 fabb 	bl	1d0d6 <strcmp>
   16b60:	2800      	cmp	r0, #0
   16b62:	f47f ad28 	bne.w	165b6 <pdn_interface_pdn_id_get+0x156>
   16b66:	6863      	ldr	r3, [r4, #4]
   16b68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16b6a:	07d6      	lsls	r6, r2, #31
   16b6c:	d4e6      	bmi.n	16b3c <pdn_interface_pdn_id_get+0x6dc>
   16b6e:	e522      	b.n	165b6 <pdn_interface_pdn_id_get+0x156>
   16b70:	4608      	mov	r0, r1
   16b72:	f006 faa9 	bl	1d0c8 <strlen>
   16b76:	4606      	mov	r6, r0
   16b78:	6820      	ldr	r0, [r4, #0]
   16b7a:	300c      	adds	r0, #12
   16b7c:	f006 faa4 	bl	1d0c8 <strlen>
   16b80:	4286      	cmp	r6, r0
   16b82:	f47f acc0 	bne.w	16506 <pdn_interface_pdn_id_get+0xa6>
   16b86:	6821      	ldr	r1, [r4, #0]
   16b88:	4628      	mov	r0, r5
   16b8a:	310c      	adds	r1, #12
   16b8c:	f006 faa3 	bl	1d0d6 <strcmp>
   16b90:	4606      	mov	r6, r0
   16b92:	2800      	cmp	r0, #0
   16b94:	f47f acb7 	bne.w	16506 <pdn_interface_pdn_id_get+0xa6>
   16b98:	6823      	ldr	r3, [r4, #0]
   16b9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16b9c:	0797      	lsls	r7, r2, #30
   16b9e:	f53f ae1a 	bmi.w	167d6 <pdn_interface_pdn_id_get+0x376>
   16ba2:	e4b0      	b.n	16506 <pdn_interface_pdn_id_get+0xa6>
   16ba4:	4608      	mov	r0, r1
   16ba6:	f006 fa8f 	bl	1d0c8 <strlen>
   16baa:	4606      	mov	r6, r0
   16bac:	6820      	ldr	r0, [r4, #0]
   16bae:	300c      	adds	r0, #12
   16bb0:	f006 fa8a 	bl	1d0c8 <strlen>
   16bb4:	4286      	cmp	r6, r0
   16bb6:	f47f acf8 	bne.w	165aa <pdn_interface_pdn_id_get+0x14a>
   16bba:	6821      	ldr	r1, [r4, #0]
   16bbc:	4628      	mov	r0, r5
   16bbe:	310c      	adds	r1, #12
   16bc0:	f006 fa89 	bl	1d0d6 <strcmp>
   16bc4:	4606      	mov	r6, r0
   16bc6:	2800      	cmp	r0, #0
   16bc8:	f47f acef 	bne.w	165aa <pdn_interface_pdn_id_get+0x14a>
   16bcc:	6823      	ldr	r3, [r4, #0]
   16bce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16bd0:	07d7      	lsls	r7, r2, #31
   16bd2:	f53f ae00 	bmi.w	167d6 <pdn_interface_pdn_id_get+0x376>
   16bd6:	e4e8      	b.n	165aa <pdn_interface_pdn_id_get+0x14a>
   16bd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16bdc:	4770      	bx	lr
   16bde:	480b      	ldr	r0, [pc, #44]	; (16c0c <pdn_interface_pdn_id_get+0x7ac>)
   16be0:	f006 fa72 	bl	1d0c8 <strlen>
   16be4:	490a      	ldr	r1, [pc, #40]	; (16c10 <pdn_interface_pdn_id_get+0x7b0>)
   16be6:	4602      	mov	r2, r0
   16be8:	4808      	ldr	r0, [pc, #32]	; (16c0c <pdn_interface_pdn_id_get+0x7ac>)
   16bea:	f006 fa80 	bl	1d0ee <strncmp>
   16bee:	b930      	cbnz	r0, 16bfe <pdn_interface_pdn_id_get+0x79e>
   16bf0:	2008      	movs	r0, #8
   16bf2:	f7fa fc57 	bl	114a4 <bsd_os_errno_set>
   16bf6:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   16bfa:	6858      	ldr	r0, [r3, #4]
   16bfc:	e47b      	b.n	164f6 <pdn_interface_pdn_id_get+0x96>
   16bfe:	2005      	movs	r0, #5
   16c00:	f7fa fc50 	bl	114a4 <bsd_os_errno_set>
   16c04:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   16c08:	6858      	ldr	r0, [r3, #4]
   16c0a:	e474      	b.n	164f6 <pdn_interface_pdn_id_get+0x96>
   16c0c:	0001f338 	.word	0x0001f338
   16c10:	2002081c 	.word	0x2002081c

00016c14 <linked_list_init>:
   16c14:	b128      	cbz	r0, 16c22 <linked_list_init+0xe>
   16c16:	2300      	movs	r3, #0
   16c18:	6003      	str	r3, [r0, #0]
   16c1a:	e9c0 3301 	strd	r3, r3, [r0, #4]
   16c1e:	4618      	mov	r0, r3
   16c20:	4770      	bx	lr
   16c22:	2007      	movs	r0, #7
   16c24:	4770      	bx	lr
   16c26:	bf00      	nop

00016c28 <linked_list_push>:
   16c28:	6802      	ldr	r2, [r0, #0]
   16c2a:	4603      	mov	r3, r0
   16c2c:	3201      	adds	r2, #1
   16c2e:	d00e      	beq.n	16c4e <linked_list_push+0x26>
   16c30:	2200      	movs	r2, #0
   16c32:	600a      	str	r2, [r1, #0]
   16c34:	6802      	ldr	r2, [r0, #0]
   16c36:	b13a      	cbz	r2, 16c48 <linked_list_push+0x20>
   16c38:	6882      	ldr	r2, [r0, #8]
   16c3a:	6011      	str	r1, [r2, #0]
   16c3c:	6081      	str	r1, [r0, #8]
   16c3e:	681a      	ldr	r2, [r3, #0]
   16c40:	2000      	movs	r0, #0
   16c42:	3201      	adds	r2, #1
   16c44:	601a      	str	r2, [r3, #0]
   16c46:	4770      	bx	lr
   16c48:	e9c0 1101 	strd	r1, r1, [r0, #4]
   16c4c:	e7f7      	b.n	16c3e <linked_list_push+0x16>
   16c4e:	2004      	movs	r0, #4
   16c50:	4770      	bx	lr
   16c52:	bf00      	nop

00016c54 <linked_list_pop>:
   16c54:	4603      	mov	r3, r0
   16c56:	6800      	ldr	r0, [r0, #0]
   16c58:	b128      	cbz	r0, 16c66 <linked_list_pop+0x12>
   16c5a:	6858      	ldr	r0, [r3, #4]
   16c5c:	681a      	ldr	r2, [r3, #0]
   16c5e:	6801      	ldr	r1, [r0, #0]
   16c60:	3a01      	subs	r2, #1
   16c62:	6059      	str	r1, [r3, #4]
   16c64:	601a      	str	r2, [r3, #0]
   16c66:	4770      	bx	lr

00016c68 <linked_list_peek>:
   16c68:	6803      	ldr	r3, [r0, #0]
   16c6a:	b10b      	cbz	r3, 16c70 <linked_list_peek+0x8>
   16c6c:	6840      	ldr	r0, [r0, #4]
   16c6e:	4770      	bx	lr
   16c70:	4618      	mov	r0, r3
   16c72:	4770      	bx	lr

00016c74 <linked_list_size_get>:
   16c74:	6800      	ldr	r0, [r0, #0]
   16c76:	4770      	bx	lr

00016c78 <linked_list_get_next>:
   16c78:	6800      	ldr	r0, [r0, #0]
   16c7a:	4770      	bx	lr

00016c7c <nrf_socket>:
   16c7c:	b570      	push	{r4, r5, r6, lr}
   16c7e:	4604      	mov	r4, r0
   16c80:	460d      	mov	r5, r1
   16c82:	4616      	mov	r6, r2
   16c84:	f7fd fcd6 	bl	14634 <bsd_platform_af_method_table_get>
   16c88:	b130      	cbz	r0, 16c98 <nrf_socket+0x1c>
   16c8a:	6803      	ldr	r3, [r0, #0]
   16c8c:	4632      	mov	r2, r6
   16c8e:	4629      	mov	r1, r5
   16c90:	4620      	mov	r0, r4
   16c92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16c96:	4718      	bx	r3
   16c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16c9c:	bd70      	pop	{r4, r5, r6, pc}
   16c9e:	bf00      	nop

00016ca0 <nrf_close>:
   16ca0:	b510      	push	{r4, lr}
   16ca2:	4604      	mov	r4, r0
   16ca4:	f7fd fd1a 	bl	146dc <bsd_platform_fd_method_table_get>
   16ca8:	b120      	cbz	r0, 16cb4 <nrf_close+0x14>
   16caa:	6843      	ldr	r3, [r0, #4]
   16cac:	4620      	mov	r0, r4
   16cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16cb2:	4718      	bx	r3
   16cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16cb8:	bd10      	pop	{r4, pc}
   16cba:	bf00      	nop

00016cbc <nrf_sendto>:
   16cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16cc0:	460d      	mov	r5, r1
   16cc2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   16cc6:	4616      	mov	r6, r2
   16cc8:	461f      	mov	r7, r3
   16cca:	4604      	mov	r4, r0
   16ccc:	f7fd fd06 	bl	146dc <bsd_platform_fd_method_table_get>
   16cd0:	b158      	cbz	r0, 16cea <nrf_sendto+0x2e>
   16cd2:	e9cd 8908 	strd	r8, r9, [sp, #32]
   16cd6:	f8d0 e008 	ldr.w	lr, [r0, #8]
   16cda:	463b      	mov	r3, r7
   16cdc:	4632      	mov	r2, r6
   16cde:	4629      	mov	r1, r5
   16ce0:	4620      	mov	r0, r4
   16ce2:	46f4      	mov	ip, lr
   16ce4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16ce8:	4760      	bx	ip
   16cea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16cf2:	bf00      	nop

00016cf4 <nrf_send>:
   16cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16cf8:	b082      	sub	sp, #8
   16cfa:	460e      	mov	r6, r1
   16cfc:	4617      	mov	r7, r2
   16cfe:	4698      	mov	r8, r3
   16d00:	4605      	mov	r5, r0
   16d02:	f7fd fceb 	bl	146dc <bsd_platform_fd_method_table_get>
   16d06:	b160      	cbz	r0, 16d22 <nrf_send+0x2e>
   16d08:	4604      	mov	r4, r0
   16d0a:	2000      	movs	r0, #0
   16d0c:	e9cd 0000 	strd	r0, r0, [sp]
   16d10:	4643      	mov	r3, r8
   16d12:	463a      	mov	r2, r7
   16d14:	4631      	mov	r1, r6
   16d16:	4628      	mov	r0, r5
   16d18:	68a4      	ldr	r4, [r4, #8]
   16d1a:	47a0      	blx	r4
   16d1c:	b002      	add	sp, #8
   16d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16d22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16d26:	e7f9      	b.n	16d1c <nrf_send+0x28>

00016d28 <nrf_recvfrom>:
   16d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16d2c:	460d      	mov	r5, r1
   16d2e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   16d32:	4616      	mov	r6, r2
   16d34:	461f      	mov	r7, r3
   16d36:	4604      	mov	r4, r0
   16d38:	f7fd fcd0 	bl	146dc <bsd_platform_fd_method_table_get>
   16d3c:	b158      	cbz	r0, 16d56 <nrf_recvfrom+0x2e>
   16d3e:	e9cd 8908 	strd	r8, r9, [sp, #32]
   16d42:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   16d46:	463b      	mov	r3, r7
   16d48:	4632      	mov	r2, r6
   16d4a:	4629      	mov	r1, r5
   16d4c:	4620      	mov	r0, r4
   16d4e:	46f4      	mov	ip, lr
   16d50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16d54:	4760      	bx	ip
   16d56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16d5e:	bf00      	nop

00016d60 <nrf_recv>:
   16d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16d64:	b082      	sub	sp, #8
   16d66:	460e      	mov	r6, r1
   16d68:	4617      	mov	r7, r2
   16d6a:	4698      	mov	r8, r3
   16d6c:	4605      	mov	r5, r0
   16d6e:	f7fd fcb5 	bl	146dc <bsd_platform_fd_method_table_get>
   16d72:	b160      	cbz	r0, 16d8e <nrf_recv+0x2e>
   16d74:	4604      	mov	r4, r0
   16d76:	2000      	movs	r0, #0
   16d78:	e9cd 0000 	strd	r0, r0, [sp]
   16d7c:	4643      	mov	r3, r8
   16d7e:	463a      	mov	r2, r7
   16d80:	4631      	mov	r1, r6
   16d82:	4628      	mov	r0, r5
   16d84:	68e4      	ldr	r4, [r4, #12]
   16d86:	47a0      	blx	r4
   16d88:	b002      	add	sp, #8
   16d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16d8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16d92:	e7f9      	b.n	16d88 <nrf_recv+0x28>

00016d94 <nrf_connect>:
   16d94:	b570      	push	{r4, r5, r6, lr}
   16d96:	460d      	mov	r5, r1
   16d98:	4616      	mov	r6, r2
   16d9a:	4604      	mov	r4, r0
   16d9c:	f7fd fc9e 	bl	146dc <bsd_platform_fd_method_table_get>
   16da0:	b130      	cbz	r0, 16db0 <nrf_connect+0x1c>
   16da2:	6943      	ldr	r3, [r0, #20]
   16da4:	4632      	mov	r2, r6
   16da6:	4629      	mov	r1, r5
   16da8:	4620      	mov	r0, r4
   16daa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16dae:	4718      	bx	r3
   16db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16db4:	bd70      	pop	{r4, r5, r6, pc}
   16db6:	bf00      	nop

00016db8 <nrf_listen>:
   16db8:	b570      	push	{r4, r5, r6, lr}
   16dba:	460d      	mov	r5, r1
   16dbc:	4604      	mov	r4, r0
   16dbe:	f7fd fc8d 	bl	146dc <bsd_platform_fd_method_table_get>
   16dc2:	b128      	cbz	r0, 16dd0 <nrf_listen+0x18>
   16dc4:	6983      	ldr	r3, [r0, #24]
   16dc6:	4629      	mov	r1, r5
   16dc8:	4620      	mov	r0, r4
   16dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16dce:	4718      	bx	r3
   16dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16dd4:	bd70      	pop	{r4, r5, r6, pc}
   16dd6:	bf00      	nop

00016dd8 <nrf_accept>:
   16dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16ddc:	460d      	mov	r5, r1
   16dde:	4616      	mov	r6, r2
   16de0:	4604      	mov	r4, r0
   16de2:	f7fd fc7b 	bl	146dc <bsd_platform_fd_method_table_get>
   16de6:	b140      	cbz	r0, 16dfa <nrf_accept+0x22>
   16de8:	69c7      	ldr	r7, [r0, #28]
   16dea:	4632      	mov	r2, r6
   16dec:	4629      	mov	r1, r5
   16dee:	4620      	mov	r0, r4
   16df0:	46bc      	mov	ip, r7
   16df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16df6:	2300      	movs	r3, #0
   16df8:	4760      	bx	ip
   16dfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16e02:	bf00      	nop

00016e04 <nrf_bind>:
   16e04:	b570      	push	{r4, r5, r6, lr}
   16e06:	460d      	mov	r5, r1
   16e08:	4616      	mov	r6, r2
   16e0a:	4604      	mov	r4, r0
   16e0c:	f7fd fc66 	bl	146dc <bsd_platform_fd_method_table_get>
   16e10:	b130      	cbz	r0, 16e20 <nrf_bind+0x1c>
   16e12:	6903      	ldr	r3, [r0, #16]
   16e14:	4632      	mov	r2, r6
   16e16:	4629      	mov	r1, r5
   16e18:	4620      	mov	r0, r4
   16e1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16e1e:	4718      	bx	r3
   16e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16e24:	bd70      	pop	{r4, r5, r6, pc}
   16e26:	bf00      	nop

00016e28 <nrf_setsockopt>:
   16e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16e2c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   16e30:	460d      	mov	r5, r1
   16e32:	4616      	mov	r6, r2
   16e34:	461f      	mov	r7, r3
   16e36:	4604      	mov	r4, r0
   16e38:	f7fd fc50 	bl	146dc <bsd_platform_fd_method_table_get>
   16e3c:	b158      	cbz	r0, 16e56 <nrf_setsockopt+0x2e>
   16e3e:	f8cd 8018 	str.w	r8, [sp, #24]
   16e42:	f8d0 e020 	ldr.w	lr, [r0, #32]
   16e46:	463b      	mov	r3, r7
   16e48:	4632      	mov	r2, r6
   16e4a:	4629      	mov	r1, r5
   16e4c:	4620      	mov	r0, r4
   16e4e:	46f4      	mov	ip, lr
   16e50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16e54:	4760      	bx	ip
   16e56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16e5e:	bf00      	nop

00016e60 <nrf_getsockopt>:
   16e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16e64:	f8dd 8018 	ldr.w	r8, [sp, #24]
   16e68:	460d      	mov	r5, r1
   16e6a:	4616      	mov	r6, r2
   16e6c:	461f      	mov	r7, r3
   16e6e:	4604      	mov	r4, r0
   16e70:	f7fd fc34 	bl	146dc <bsd_platform_fd_method_table_get>
   16e74:	b158      	cbz	r0, 16e8e <nrf_getsockopt+0x2e>
   16e76:	f8cd 8018 	str.w	r8, [sp, #24]
   16e7a:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   16e7e:	463b      	mov	r3, r7
   16e80:	4632      	mov	r2, r6
   16e82:	4629      	mov	r1, r5
   16e84:	4620      	mov	r0, r4
   16e86:	46f4      	mov	ip, lr
   16e88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16e8c:	4760      	bx	ip
   16e8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16e96:	bf00      	nop

00016e98 <nrf_getaddrinfo>:
   16e98:	f7fd bc90 	b.w	147bc <bsd_platform_getaddrinfo>

00016e9c <nrf_freeaddrinfo>:
   16e9c:	f7fd bc90 	b.w	147c0 <bsd_platform_freeaddrinfo>

00016ea0 <nrf_poll>:
   16ea0:	f7fd bc90 	b.w	147c4 <bsd_platform_poll>

00016ea4 <nrf_fcntl>:
   16ea4:	f7fd bce8 	b.w	14878 <bsd_platform_fcntl>

00016ea8 <at_client_evt_handler>:
   16ea8:	b120      	cbz	r0, 16eb4 <at_client_evt_handler+0xc>
   16eaa:	f850 1b08 	ldr.w	r1, [r0], #8
   16eae:	0c09      	lsrs	r1, r1, #16
   16eb0:	f7fb bf4a 	b.w	12d48 <rpc_at_event_handler>
   16eb4:	4770      	bx	lr
   16eb6:	bf00      	nop

00016eb8 <rpc_at_client_init>:
   16eb8:	4801      	ldr	r0, [pc, #4]	; (16ec0 <rpc_at_client_init+0x8>)
   16eba:	f001 bdcf 	b.w	18a5c <rpc_client_register>
   16ebe:	bf00      	nop
   16ec0:	0001f34c 	.word	0x0001f34c

00016ec4 <rpc_at_client_request_alloc>:
   16ec4:	b180      	cbz	r0, 16ee8 <rpc_at_client_request_alloc+0x24>
   16ec6:	2300      	movs	r3, #0
   16ec8:	b510      	push	{r4, lr}
   16eca:	b082      	sub	sp, #8
   16ecc:	aa02      	add	r2, sp, #8
   16ece:	4604      	mov	r4, r0
   16ed0:	f842 3d04 	str.w	r3, [r2, #-4]!
   16ed4:	2003      	movs	r0, #3
   16ed6:	f001 fff9 	bl	18ecc <rpc_message_alloc>
   16eda:	b918      	cbnz	r0, 16ee4 <rpc_at_client_request_alloc+0x20>
   16edc:	9b01      	ldr	r3, [sp, #4]
   16ede:	b10b      	cbz	r3, 16ee4 <rpc_at_client_request_alloc+0x20>
   16ee0:	3308      	adds	r3, #8
   16ee2:	6023      	str	r3, [r4, #0]
   16ee4:	b002      	add	sp, #8
   16ee6:	bd10      	pop	{r4, pc}
   16ee8:	200e      	movs	r0, #14
   16eea:	4770      	bx	lr

00016eec <rpc_at_client_request_send>:
   16eec:	b150      	cbz	r0, 16f04 <rpc_at_client_request_send+0x18>
   16eee:	4603      	mov	r3, r0
   16ef0:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   16ef4:	2003      	movs	r0, #3
   16ef6:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   16efa:	f843 1d08 	str.w	r1, [r3, #-8]!
   16efe:	4619      	mov	r1, r3
   16f00:	f001 bfcc 	b.w	18e9c <rpc_message_send>
   16f04:	200e      	movs	r0, #14
   16f06:	4770      	bx	lr

00016f08 <rpc_at_client_message_free>:
   16f08:	b120      	cbz	r0, 16f14 <rpc_at_client_message_free+0xc>
   16f0a:	f1a0 0108 	sub.w	r1, r0, #8
   16f0e:	2003      	movs	r0, #3
   16f10:	f002 b80e 	b.w	18f30 <rpc_message_free>
   16f14:	200e      	movs	r0, #14
   16f16:	4770      	bx	lr

00016f18 <rpc_at_client_data_free>:
   16f18:	b118      	cbz	r0, 16f22 <rpc_at_client_data_free+0xa>
   16f1a:	4601      	mov	r1, r0
   16f1c:	2003      	movs	r0, #3
   16f1e:	f002 b919 	b.w	19154 <rpc_message_data_free>
   16f22:	200e      	movs	r0, #14
   16f24:	4770      	bx	lr
   16f26:	bf00      	nop

00016f28 <ip_recvd_packet_free_cb>:
   16f28:	b510      	push	{r4, lr}
   16f2a:	4604      	mov	r4, r0
   16f2c:	6800      	ldr	r0, [r0, #0]
   16f2e:	f7fc fbc9 	bl	136c4 <rpc_ip_client_data_free>
   16f32:	68a0      	ldr	r0, [r4, #8]
   16f34:	b118      	cbz	r0, 16f3e <ip_recvd_packet_free_cb+0x16>
   16f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16f3a:	f7fc bb63 	b.w	13604 <nrf_free>
   16f3e:	bd10      	pop	{r4, pc}

00016f40 <rpc_error_to_nrf_bsd_error>:
   16f40:	2810      	cmp	r0, #16
   16f42:	bf9a      	itte	ls
   16f44:	4b02      	ldrls	r3, [pc, #8]	; (16f50 <rpc_error_to_nrf_bsd_error+0x10>)
   16f46:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   16f4a:	202d      	movhi	r0, #45	; 0x2d
   16f4c:	4770      	bx	lr
   16f4e:	bf00      	nop
   16f50:	0001f35c 	.word	0x0001f35c

00016f54 <ip_interface_request_create>:
   16f54:	b570      	push	{r4, r5, r6, lr}
   16f56:	2500      	movs	r5, #0
   16f58:	b082      	sub	sp, #8
   16f5a:	ac02      	add	r4, sp, #8
   16f5c:	f844 5d04 	str.w	r5, [r4, #-4]!
   16f60:	4606      	mov	r6, r0
   16f62:	460d      	mov	r5, r1
   16f64:	4620      	mov	r0, r4
   16f66:	4619      	mov	r1, r3
   16f68:	4614      	mov	r4, r2
   16f6a:	f7fc fb79 	bl	13660 <rpc_ip_client_request_alloc>
   16f6e:	b960      	cbnz	r0, 16f8a <ip_interface_request_create+0x36>
   16f70:	9b01      	ldr	r3, [sp, #4]
   16f72:	2208      	movs	r2, #8
   16f74:	7258      	strb	r0, [r3, #9]
   16f76:	7298      	strb	r0, [r3, #10]
   16f78:	72d8      	strb	r0, [r3, #11]
   16f7a:	4618      	mov	r0, r3
   16f7c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   16f80:	60dc      	str	r4, [r3, #12]
   16f82:	611d      	str	r5, [r3, #16]
   16f84:	721a      	strb	r2, [r3, #8]
   16f86:	b002      	add	sp, #8
   16f88:	bd70      	pop	{r4, r5, r6, pc}
   16f8a:	9b01      	ldr	r3, [sp, #4]
   16f8c:	4618      	mov	r0, r3
   16f8e:	b002      	add	sp, #8
   16f90:	bd70      	pop	{r4, r5, r6, pc}
   16f92:	bf00      	nop

00016f94 <ip_interface_request_send>:
   16f94:	b570      	push	{r4, r5, r6, lr}
   16f96:	460c      	mov	r4, r1
   16f98:	4605      	mov	r5, r0
   16f9a:	4611      	mov	r1, r2
   16f9c:	4620      	mov	r0, r4
   16f9e:	461e      	mov	r6, r3
   16fa0:	f7fc fb72 	bl	13688 <rpc_ip_client_request_send>
   16fa4:	b900      	cbnz	r0, 16fa8 <ip_interface_request_send+0x14>
   16fa6:	bd70      	pop	{r4, r5, r6, pc}
   16fa8:	6820      	ldr	r0, [r4, #0]
   16faa:	b108      	cbz	r0, 16fb0 <ip_interface_request_send+0x1c>
   16fac:	f7fc fb8a 	bl	136c4 <rpc_ip_client_data_free>
   16fb0:	4620      	mov	r0, r4
   16fb2:	f7fc fb7f 	bl	136b4 <rpc_ip_client_message_free>
   16fb6:	602e      	str	r6, [r5, #0]
   16fb8:	2023      	movs	r0, #35	; 0x23
   16fba:	bd70      	pop	{r4, r5, r6, pc}

00016fbc <ip_interface_wait>:
   16fbc:	b538      	push	{r3, r4, r5, lr}
   16fbe:	4605      	mov	r5, r0
   16fc0:	f001 fb82 	bl	186c8 <interface_socket_wait>
   16fc4:	4604      	mov	r4, r0
   16fc6:	b108      	cbz	r0, 16fcc <ip_interface_wait+0x10>
   16fc8:	4620      	mov	r0, r4
   16fca:	bd38      	pop	{r3, r4, r5, pc}
   16fcc:	4628      	mov	r0, r5
   16fce:	f001 fbe7 	bl	187a0 <interface_socket_from_handle_get>
   16fd2:	2800      	cmp	r0, #0
   16fd4:	d0f8      	beq.n	16fc8 <ip_interface_wait+0xc>
   16fd6:	6844      	ldr	r4, [r0, #4]
   16fd8:	2c00      	cmp	r4, #0
   16fda:	d0f5      	beq.n	16fc8 <ip_interface_wait+0xc>
   16fdc:	2300      	movs	r3, #0
   16fde:	6043      	str	r3, [r0, #4]
   16fe0:	4620      	mov	r0, r4
   16fe2:	bd38      	pop	{r3, r4, r5, pc}

00016fe4 <ip_interface_init>:
   16fe4:	b538      	push	{r3, r4, r5, lr}
   16fe6:	2300      	movs	r3, #0
   16fe8:	4d07      	ldr	r5, [pc, #28]	; (17008 <ip_interface_init+0x24>)
   16fea:	4c08      	ldr	r4, [pc, #32]	; (1700c <ip_interface_init+0x28>)
   16fec:	4619      	mov	r1, r3
   16fee:	2220      	movs	r2, #32
   16ff0:	4807      	ldr	r0, [pc, #28]	; (17010 <ip_interface_init+0x2c>)
   16ff2:	602b      	str	r3, [r5, #0]
   16ff4:	6023      	str	r3, [r4, #0]
   16ff6:	f006 f8cc 	bl	1d192 <memset>
   16ffa:	f7fc fb2b 	bl	13654 <rpc_ip_client_init>
   16ffe:	3000      	adds	r0, #0
   17000:	bf18      	it	ne
   17002:	2001      	movne	r0, #1
   17004:	4240      	negs	r0, r0
   17006:	bd38      	pop	{r3, r4, r5, pc}
   17008:	20020954 	.word	0x20020954
   1700c:	20020950 	.word	0x20020950
   17010:	2002095c 	.word	0x2002095c

00017014 <ip_interface_open>:
   17014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17018:	4606      	mov	r6, r0
   1701a:	2000      	movs	r0, #0
   1701c:	f026 0308 	bic.w	r3, r6, #8
   17020:	b082      	sub	sp, #8
   17022:	2b02      	cmp	r3, #2
   17024:	460c      	mov	r4, r1
   17026:	4617      	mov	r7, r2
   17028:	9000      	str	r0, [sp, #0]
   1702a:	d002      	beq.n	17032 <ip_interface_open+0x1e>
   1702c:	2e05      	cmp	r6, #5
   1702e:	f040 8084 	bne.w	1713a <ip_interface_open+0x126>
   17032:	1e63      	subs	r3, r4, #1
   17034:	2b02      	cmp	r3, #2
   17036:	d85c      	bhi.n	170f2 <ip_interface_open+0xde>
   17038:	2f00      	cmp	r7, #0
   1703a:	d154      	bne.n	170e6 <ip_interface_open+0xd2>
   1703c:	2c01      	cmp	r4, #1
   1703e:	d067      	beq.n	17110 <ip_interface_open+0xfc>
   17040:	2c03      	cmp	r4, #3
   17042:	bf18      	it	ne
   17044:	2702      	movne	r7, #2
   17046:	4a48      	ldr	r2, [pc, #288]	; (17168 <ip_interface_open+0x154>)
   17048:	4621      	mov	r1, r4
   1704a:	4668      	mov	r0, sp
   1704c:	f001 fa98 	bl	18580 <interface_socket_allocate>
   17050:	9b00      	ldr	r3, [sp, #0]
   17052:	4680      	mov	r8, r0
   17054:	2b00      	cmp	r3, #0
   17056:	d059      	beq.n	1710c <ip_interface_open+0xf8>
   17058:	2100      	movs	r1, #0
   1705a:	a802      	add	r0, sp, #8
   1705c:	f840 1d04 	str.w	r1, [r0, #-4]!
   17060:	e9c3 6403 	strd	r6, r4, [r3, #12]
   17064:	615f      	str	r7, [r3, #20]
   17066:	f7fc fafb 	bl	13660 <rpc_ip_client_request_alloc>
   1706a:	2800      	cmp	r0, #0
   1706c:	d14b      	bne.n	17106 <ip_interface_open+0xf2>
   1706e:	f247 0201 	movw	r2, #28673	; 0x7001
   17072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17076:	2108      	movs	r1, #8
   17078:	9d01      	ldr	r5, [sp, #4]
   1707a:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
   1707e:	60ea      	str	r2, [r5, #12]
   17080:	7268      	strb	r0, [r5, #9]
   17082:	72a8      	strb	r0, [r5, #10]
   17084:	72e8      	strb	r0, [r5, #11]
   17086:	7229      	strb	r1, [r5, #8]
   17088:	742b      	strb	r3, [r5, #16]
   1708a:	746b      	strb	r3, [r5, #17]
   1708c:	74ab      	strb	r3, [r5, #18]
   1708e:	74eb      	strb	r3, [r5, #19]
   17090:	68ab      	ldr	r3, [r5, #8]
   17092:	2e05      	cmp	r6, #5
   17094:	f103 030c 	add.w	r3, r3, #12
   17098:	60ab      	str	r3, [r5, #8]
   1709a:	d003      	beq.n	170a4 <ip_interface_open+0x90>
   1709c:	2e0a      	cmp	r6, #10
   1709e:	bf14      	ite	ne
   170a0:	2601      	movne	r6, #1
   170a2:	2602      	moveq	r6, #2
   170a4:	616e      	str	r6, [r5, #20]
   170a6:	61ef      	str	r7, [r5, #28]
   170a8:	61ac      	str	r4, [r5, #24]
   170aa:	f247 0101 	movw	r1, #28673	; 0x7001
   170ae:	4628      	mov	r0, r5
   170b0:	9f00      	ldr	r7, [sp, #0]
   170b2:	f7fc fae9 	bl	13688 <rpc_ip_client_request_send>
   170b6:	4606      	mov	r6, r0
   170b8:	b360      	cbz	r0, 17114 <ip_interface_open+0x100>
   170ba:	6828      	ldr	r0, [r5, #0]
   170bc:	b108      	cbz	r0, 170c2 <ip_interface_open+0xae>
   170be:	f7fc fb01 	bl	136c4 <rpc_ip_client_data_free>
   170c2:	4628      	mov	r0, r5
   170c4:	f7fc faf6 	bl	136b4 <rpc_ip_client_message_free>
   170c8:	2301      	movs	r3, #1
   170ca:	2523      	movs	r5, #35	; 0x23
   170cc:	603b      	str	r3, [r7, #0]
   170ce:	4640      	mov	r0, r8
   170d0:	f001 faac 	bl	1862c <interface_socket_free>
   170d4:	4628      	mov	r0, r5
   170d6:	f7fa f9e5 	bl	114a4 <bsd_os_errno_set>
   170da:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   170de:	4640      	mov	r0, r8
   170e0:	b002      	add	sp, #8
   170e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   170e6:	2c01      	cmp	r4, #1
   170e8:	d009      	beq.n	170fe <ip_interface_open+0xea>
   170ea:	2c02      	cmp	r4, #2
   170ec:	d109      	bne.n	17102 <ip_interface_open+0xee>
   170ee:	2f02      	cmp	r7, #2
   170f0:	d0a9      	beq.n	17046 <ip_interface_open+0x32>
   170f2:	2016      	movs	r0, #22
   170f4:	f7fa f9d6 	bl	114a4 <bsd_os_errno_set>
   170f8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   170fc:	e7ef      	b.n	170de <ip_interface_open+0xca>
   170fe:	2f01      	cmp	r7, #1
   17100:	d1f7      	bne.n	170f2 <ip_interface_open+0xde>
   17102:	2702      	movs	r7, #2
   17104:	e79f      	b.n	17046 <ip_interface_open+0x32>
   17106:	9d01      	ldr	r5, [sp, #4]
   17108:	2d00      	cmp	r5, #0
   1710a:	d1c1      	bne.n	17090 <ip_interface_open+0x7c>
   1710c:	250c      	movs	r5, #12
   1710e:	e7de      	b.n	170ce <ip_interface_open+0xba>
   17110:	4627      	mov	r7, r4
   17112:	e798      	b.n	17046 <ip_interface_open+0x32>
   17114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17118:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1711c:	2102      	movs	r1, #2
   1711e:	4640      	mov	r0, r8
   17120:	f001 fad2 	bl	186c8 <interface_socket_wait>
   17124:	4605      	mov	r5, r0
   17126:	2800      	cmp	r0, #0
   17128:	d1d1      	bne.n	170ce <ip_interface_open+0xba>
   1712a:	4640      	mov	r0, r8
   1712c:	f001 fb38 	bl	187a0 <interface_socket_from_handle_get>
   17130:	b148      	cbz	r0, 17146 <ip_interface_open+0x132>
   17132:	6845      	ldr	r5, [r0, #4]
   17134:	b13d      	cbz	r5, 17146 <ip_interface_open+0x132>
   17136:	6046      	str	r6, [r0, #4]
   17138:	e7c9      	b.n	170ce <ip_interface_open+0xba>
   1713a:	202f      	movs	r0, #47	; 0x2f
   1713c:	f7fa f9b2 	bl	114a4 <bsd_os_errno_set>
   17140:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   17144:	e7cb      	b.n	170de <ip_interface_open+0xca>
   17146:	3c02      	subs	r4, #2
   17148:	2c01      	cmp	r4, #1
   1714a:	d8c8      	bhi.n	170de <ip_interface_open+0xca>
   1714c:	4640      	mov	r0, r8
   1714e:	9b00      	ldr	r3, [sp, #0]
   17150:	681a      	ldr	r2, [r3, #0]
   17152:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   17156:	601a      	str	r2, [r3, #0]
   17158:	681a      	ldr	r2, [r3, #0]
   1715a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   1715e:	601a      	str	r2, [r3, #0]
   17160:	b002      	add	sp, #8
   17162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17166:	bf00      	nop
   17168:	00016f29 	.word	0x00016f29

0001716c <ip_interface_close>:
   1716c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17170:	b082      	sub	sp, #8
   17172:	4606      	mov	r6, r0
   17174:	f001 fb14 	bl	187a0 <interface_socket_from_handle_get>
   17178:	2800      	cmp	r0, #0
   1717a:	d063      	beq.n	17244 <ip_interface_close+0xd8>
   1717c:	4604      	mov	r4, r0
   1717e:	2100      	movs	r1, #0
   17180:	a802      	add	r0, sp, #8
   17182:	6827      	ldr	r7, [r4, #0]
   17184:	f840 1d04 	str.w	r1, [r0, #-4]!
   17188:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1718c:	f7fc fa68 	bl	13660 <rpc_ip_client_request_alloc>
   17190:	2800      	cmp	r0, #0
   17192:	d13a      	bne.n	1720a <ip_interface_close+0x9e>
   17194:	f247 0309 	movw	r3, #28681	; 0x7009
   17198:	2208      	movs	r2, #8
   1719a:	9d01      	ldr	r5, [sp, #4]
   1719c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   171a0:	60eb      	str	r3, [r5, #12]
   171a2:	f8c5 8010 	str.w	r8, [r5, #16]
   171a6:	7268      	strb	r0, [r5, #9]
   171a8:	72a8      	strb	r0, [r5, #10]
   171aa:	72e8      	strb	r0, [r5, #11]
   171ac:	722a      	strb	r2, [r5, #8]
   171ae:	6823      	ldr	r3, [r4, #0]
   171b0:	f247 0109 	movw	r1, #28681	; 0x7009
   171b4:	0c1b      	lsrs	r3, r3, #16
   171b6:	041b      	lsls	r3, r3, #16
   171b8:	f043 030d 	orr.w	r3, r3, #13
   171bc:	6023      	str	r3, [r4, #0]
   171be:	6823      	ldr	r3, [r4, #0]
   171c0:	4628      	mov	r0, r5
   171c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   171c6:	6023      	str	r3, [r4, #0]
   171c8:	6823      	ldr	r3, [r4, #0]
   171ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   171ce:	6023      	str	r3, [r4, #0]
   171d0:	f7fc fa5a 	bl	13688 <rpc_ip_client_request_send>
   171d4:	bb40      	cbnz	r0, 17228 <ip_interface_close+0xbc>
   171d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   171da:	f64f 72ff 	movw	r2, #65535	; 0xffff
   171de:	210e      	movs	r1, #14
   171e0:	4630      	mov	r0, r6
   171e2:	f001 fa71 	bl	186c8 <interface_socket_wait>
   171e6:	4604      	mov	r4, r0
   171e8:	b1a0      	cbz	r0, 17214 <ip_interface_close+0xa8>
   171ea:	4c17      	ldr	r4, [pc, #92]	; (17248 <ip_interface_close+0xdc>)
   171ec:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   171f0:	b120      	cbz	r0, 171fc <ip_interface_close+0x90>
   171f2:	f7fc fa5f 	bl	136b4 <rpc_ip_client_message_free>
   171f6:	2300      	movs	r3, #0
   171f8:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   171fc:	4630      	mov	r0, r6
   171fe:	f001 fa15 	bl	1862c <interface_socket_free>
   17202:	2000      	movs	r0, #0
   17204:	b002      	add	sp, #8
   17206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1720a:	9d01      	ldr	r5, [sp, #4]
   1720c:	200c      	movs	r0, #12
   1720e:	2d00      	cmp	r5, #0
   17210:	d1cd      	bne.n	171ae <ip_interface_close+0x42>
   17212:	e012      	b.n	1723a <ip_interface_close+0xce>
   17214:	4630      	mov	r0, r6
   17216:	f001 fac3 	bl	187a0 <interface_socket_from_handle_get>
   1721a:	2800      	cmp	r0, #0
   1721c:	d0e5      	beq.n	171ea <ip_interface_close+0x7e>
   1721e:	6843      	ldr	r3, [r0, #4]
   17220:	2b00      	cmp	r3, #0
   17222:	d0e2      	beq.n	171ea <ip_interface_close+0x7e>
   17224:	6044      	str	r4, [r0, #4]
   17226:	e7e0      	b.n	171ea <ip_interface_close+0x7e>
   17228:	6828      	ldr	r0, [r5, #0]
   1722a:	b108      	cbz	r0, 17230 <ip_interface_close+0xc4>
   1722c:	f7fc fa4a 	bl	136c4 <rpc_ip_client_data_free>
   17230:	4628      	mov	r0, r5
   17232:	f7fc fa3f 	bl	136b4 <rpc_ip_client_message_free>
   17236:	2023      	movs	r0, #35	; 0x23
   17238:	6027      	str	r7, [r4, #0]
   1723a:	f7fa f933 	bl	114a4 <bsd_os_errno_set>
   1723e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17242:	e7df      	b.n	17204 <ip_interface_close+0x98>
   17244:	2009      	movs	r0, #9
   17246:	e7f8      	b.n	1723a <ip_interface_close+0xce>
   17248:	2002095c 	.word	0x2002095c

0001724c <ip_interface_sendto>:
   1724c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17250:	2500      	movs	r5, #0
   17252:	b089      	sub	sp, #36	; 0x24
   17254:	9103      	str	r1, [sp, #12]
   17256:	4614      	mov	r4, r2
   17258:	9301      	str	r3, [sp, #4]
   1725a:	9507      	str	r5, [sp, #28]
   1725c:	4607      	mov	r7, r0
   1725e:	9e12      	ldr	r6, [sp, #72]	; 0x48
   17260:	f001 fa9e 	bl	187a0 <interface_socket_from_handle_get>
   17264:	2800      	cmp	r0, #0
   17266:	f000 8124 	beq.w	174b2 <ip_interface_sendto+0x266>
   1726a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   1726e:	f300 8118 	bgt.w	174a2 <ip_interface_sendto+0x256>
   17272:	6903      	ldr	r3, [r0, #16]
   17274:	4605      	mov	r5, r0
   17276:	2b01      	cmp	r3, #1
   17278:	f000 80d1 	beq.w	1741e <ip_interface_sendto+0x1d2>
   1727c:	682a      	ldr	r2, [r5, #0]
   1727e:	0390      	lsls	r0, r2, #14
   17280:	d423      	bmi.n	172ca <ip_interface_sendto+0x7e>
   17282:	682a      	ldr	r2, [r5, #0]
   17284:	0091      	lsls	r1, r2, #2
   17286:	d406      	bmi.n	17296 <ip_interface_sendto+0x4a>
   17288:	2b01      	cmp	r3, #1
   1728a:	f000 80ed 	beq.w	17468 <ip_interface_sendto+0x21c>
   1728e:	682b      	ldr	r3, [r5, #0]
   17290:	031a      	lsls	r2, r3, #12
   17292:	f140 8102 	bpl.w	1749a <ip_interface_sendto+0x24e>
   17296:	682b      	ldr	r3, [r5, #0]
   17298:	031b      	lsls	r3, r3, #12
   1729a:	f140 8106 	bpl.w	174aa <ip_interface_sendto+0x25e>
   1729e:	68a8      	ldr	r0, [r5, #8]
   172a0:	f8df 9218 	ldr.w	r9, [pc, #536]	; 174bc <ip_interface_sendto+0x270>
   172a4:	2800      	cmp	r0, #0
   172a6:	f040 8096 	bne.w	173d6 <ip_interface_sendto+0x18a>
   172aa:	682b      	ldr	r3, [r5, #0]
   172ac:	0118      	lsls	r0, r3, #4
   172ae:	f140 8082 	bpl.w	173b6 <ip_interface_sendto+0x16a>
   172b2:	682b      	ldr	r3, [r5, #0]
   172b4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   172b8:	602b      	str	r3, [r5, #0]
   172ba:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   172be:	2800      	cmp	r0, #0
   172c0:	d17c      	bne.n	173bc <ip_interface_sendto+0x170>
   172c2:	4620      	mov	r0, r4
   172c4:	b009      	add	sp, #36	; 0x24
   172c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172ca:	f247 0806 	movw	r8, #28678	; 0x7006
   172ce:	f04f 0a0c 	mov.w	sl, #12
   172d2:	043b      	lsls	r3, r7, #16
   172d4:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 174bc <ip_interface_sendto+0x270>
   172d8:	9304      	str	r3, [sp, #16]
   172da:	4621      	mov	r1, r4
   172dc:	a807      	add	r0, sp, #28
   172de:	f7fc f9bf 	bl	13660 <rpc_ip_client_request_alloc>
   172e2:	2804      	cmp	r0, #4
   172e4:	d0f9      	beq.n	172da <ip_interface_sendto+0x8e>
   172e6:	2800      	cmp	r0, #0
   172e8:	d171      	bne.n	173ce <ip_interface_sendto+0x182>
   172ea:	9b07      	ldr	r3, [sp, #28]
   172ec:	f883 a008 	strb.w	sl, [r3, #8]
   172f0:	7258      	strb	r0, [r3, #9]
   172f2:	7298      	strb	r0, [r3, #10]
   172f4:	72d8      	strb	r0, [r3, #11]
   172f6:	b33e      	cbz	r6, 17348 <ip_interface_sendto+0xfc>
   172f8:	68ea      	ldr	r2, [r5, #12]
   172fa:	6871      	ldr	r1, [r6, #4]
   172fc:	428a      	cmp	r2, r1
   172fe:	d10a      	bne.n	17316 <ip_interface_sendto+0xca>
   17300:	2a02      	cmp	r2, #2
   17302:	f103 001c 	add.w	r0, r3, #28
   17306:	7831      	ldrb	r1, [r6, #0]
   17308:	f000 8090 	beq.w	1742c <ip_interface_sendto+0x1e0>
   1730c:	2a0a      	cmp	r2, #10
   1730e:	d102      	bne.n	17316 <ip_interface_sendto+0xca>
   17310:	2924      	cmp	r1, #36	; 0x24
   17312:	f000 80af 	beq.w	17474 <ip_interface_sendto+0x228>
   17316:	6818      	ldr	r0, [r3, #0]
   17318:	b110      	cbz	r0, 17320 <ip_interface_sendto+0xd4>
   1731a:	f7fc f9d3 	bl	136c4 <rpc_ip_client_data_free>
   1731e:	9b07      	ldr	r3, [sp, #28]
   17320:	4618      	mov	r0, r3
   17322:	f7fc f9c7 	bl	136b4 <rpc_ip_client_message_free>
   17326:	2016      	movs	r0, #22
   17328:	682b      	ldr	r3, [r5, #0]
   1732a:	031a      	lsls	r2, r3, #12
   1732c:	d453      	bmi.n	173d6 <ip_interface_sendto+0x18a>
   1732e:	682b      	ldr	r3, [r5, #0]
   17330:	b29b      	uxth	r3, r3
   17332:	2b0d      	cmp	r3, #13
   17334:	d0b6      	beq.n	172a4 <ip_interface_sendto+0x58>
   17336:	682b      	ldr	r3, [r5, #0]
   17338:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1733c:	602b      	str	r3, [r5, #0]
   1733e:	682b      	ldr	r3, [r5, #0]
   17340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17344:	602b      	str	r3, [r5, #0]
   17346:	e7ad      	b.n	172a4 <ip_interface_sendto+0x58>
   17348:	4642      	mov	r2, r8
   1734a:	9901      	ldr	r1, [sp, #4]
   1734c:	6159      	str	r1, [r3, #20]
   1734e:	69a9      	ldr	r1, [r5, #24]
   17350:	9804      	ldr	r0, [sp, #16]
   17352:	6119      	str	r1, [r3, #16]
   17354:	9903      	ldr	r1, [sp, #12]
   17356:	4302      	orrs	r2, r0
   17358:	60da      	str	r2, [r3, #12]
   1735a:	605c      	str	r4, [r3, #4]
   1735c:	b119      	cbz	r1, 17366 <ip_interface_sendto+0x11a>
   1735e:	6818      	ldr	r0, [r3, #0]
   17360:	4622      	mov	r2, r4
   17362:	f005 feec 	bl	1d13e <memcpy>
   17366:	682b      	ldr	r3, [r5, #0]
   17368:	4641      	mov	r1, r8
   1736a:	9305      	str	r3, [sp, #20]
   1736c:	682b      	ldr	r3, [r5, #0]
   1736e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   17372:	602b      	str	r3, [r5, #0]
   17374:	682b      	ldr	r3, [r5, #0]
   17376:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   1737a:	602b      	str	r3, [r5, #0]
   1737c:	9b07      	ldr	r3, [sp, #28]
   1737e:	4618      	mov	r0, r3
   17380:	9302      	str	r3, [sp, #8]
   17382:	f7fc f981 	bl	13688 <rpc_ip_client_request_send>
   17386:	9b02      	ldr	r3, [sp, #8]
   17388:	4683      	mov	fp, r0
   1738a:	bb58      	cbnz	r0, 173e4 <ip_interface_sendto+0x198>
   1738c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   17390:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17394:	4611      	mov	r1, r2
   17396:	4638      	mov	r0, r7
   17398:	f001 f996 	bl	186c8 <interface_socket_wait>
   1739c:	b370      	cbz	r0, 173fc <ip_interface_sendto+0x1b0>
   1739e:	682b      	ldr	r3, [r5, #0]
   173a0:	0319      	lsls	r1, r3, #12
   173a2:	d437      	bmi.n	17414 <ip_interface_sendto+0x1c8>
   173a4:	280c      	cmp	r0, #12
   173a6:	d1bf      	bne.n	17328 <ip_interface_sendto+0xdc>
   173a8:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   173ac:	2800      	cmp	r0, #0
   173ae:	d094      	beq.n	172da <ip_interface_sendto+0x8e>
   173b0:	f7fc f980 	bl	136b4 <rpc_ip_client_message_free>
   173b4:	e791      	b.n	172da <ip_interface_sendto+0x8e>
   173b6:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   173ba:	6984      	ldr	r4, [r0, #24]
   173bc:	f7fc f97a 	bl	136b4 <rpc_ip_client_message_free>
   173c0:	2300      	movs	r3, #0
   173c2:	4620      	mov	r0, r4
   173c4:	f849 3027 	str.w	r3, [r9, r7, lsl #2]
   173c8:	b009      	add	sp, #36	; 0x24
   173ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173ce:	682b      	ldr	r3, [r5, #0]
   173d0:	200c      	movs	r0, #12
   173d2:	031a      	lsls	r2, r3, #12
   173d4:	d5ab      	bpl.n	1732e <ip_interface_sendto+0xe2>
   173d6:	f7fa f865 	bl	114a4 <bsd_os_errno_set>
   173da:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   173de:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   173e2:	e76c      	b.n	172be <ip_interface_sendto+0x72>
   173e4:	6818      	ldr	r0, [r3, #0]
   173e6:	469b      	mov	fp, r3
   173e8:	b108      	cbz	r0, 173ee <ip_interface_sendto+0x1a2>
   173ea:	f7fc f96b 	bl	136c4 <rpc_ip_client_data_free>
   173ee:	4658      	mov	r0, fp
   173f0:	f7fc f960 	bl	136b4 <rpc_ip_client_message_free>
   173f4:	9b05      	ldr	r3, [sp, #20]
   173f6:	2023      	movs	r0, #35	; 0x23
   173f8:	602b      	str	r3, [r5, #0]
   173fa:	e795      	b.n	17328 <ip_interface_sendto+0xdc>
   173fc:	4638      	mov	r0, r7
   173fe:	f001 f9cf 	bl	187a0 <interface_socket_from_handle_get>
   17402:	4603      	mov	r3, r0
   17404:	b1f0      	cbz	r0, 17444 <ip_interface_sendto+0x1f8>
   17406:	6840      	ldr	r0, [r0, #4]
   17408:	b1e0      	cbz	r0, 17444 <ip_interface_sendto+0x1f8>
   1740a:	f8c3 b004 	str.w	fp, [r3, #4]
   1740e:	682b      	ldr	r3, [r5, #0]
   17410:	0319      	lsls	r1, r3, #12
   17412:	d5c7      	bpl.n	173a4 <ip_interface_sendto+0x158>
   17414:	68a8      	ldr	r0, [r5, #8]
   17416:	682b      	ldr	r3, [r5, #0]
   17418:	031e      	lsls	r6, r3, #12
   1741a:	d588      	bpl.n	1732e <ip_interface_sendto+0xe2>
   1741c:	e742      	b.n	172a4 <ip_interface_sendto+0x58>
   1741e:	2e00      	cmp	r6, #0
   17420:	f43f af2c 	beq.w	1727c <ip_interface_sendto+0x30>
   17424:	2016      	movs	r0, #22
   17426:	f8df 9094 	ldr.w	r9, [pc, #148]	; 174bc <ip_interface_sendto+0x270>
   1742a:	e7d4      	b.n	173d6 <ip_interface_sendto+0x18a>
   1742c:	2910      	cmp	r1, #16
   1742e:	f47f af72 	bne.w	17316 <ip_interface_sendto+0xca>
   17432:	2204      	movs	r2, #4
   17434:	8931      	ldrh	r1, [r6, #8]
   17436:	835a      	strh	r2, [r3, #26]
   17438:	8319      	strh	r1, [r3, #24]
   1743a:	f106 010c 	add.w	r1, r6, #12
   1743e:	f005 fe7e 	bl	1d13e <memcpy>
   17442:	e01e      	b.n	17482 <ip_interface_sendto+0x236>
   17444:	682b      	ldr	r3, [r5, #0]
   17446:	031b      	lsls	r3, r3, #12
   17448:	f53f af2f 	bmi.w	172aa <ip_interface_sendto+0x5e>
   1744c:	682b      	ldr	r3, [r5, #0]
   1744e:	b29b      	uxth	r3, r3
   17450:	2b0d      	cmp	r3, #13
   17452:	f43f af2a 	beq.w	172aa <ip_interface_sendto+0x5e>
   17456:	682b      	ldr	r3, [r5, #0]
   17458:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1745c:	602b      	str	r3, [r5, #0]
   1745e:	682b      	ldr	r3, [r5, #0]
   17460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17464:	602b      	str	r3, [r5, #0]
   17466:	e720      	b.n	172aa <ip_interface_sendto+0x5e>
   17468:	682b      	ldr	r3, [r5, #0]
   1746a:	b29b      	uxth	r3, r3
   1746c:	2b05      	cmp	r3, #5
   1746e:	f47f af12 	bne.w	17296 <ip_interface_sendto+0x4a>
   17472:	e70c      	b.n	1728e <ip_interface_sendto+0x42>
   17474:	2210      	movs	r2, #16
   17476:	8931      	ldrh	r1, [r6, #8]
   17478:	835a      	strh	r2, [r3, #26]
   1747a:	8319      	strh	r1, [r3, #24]
   1747c:	18b1      	adds	r1, r6, r2
   1747e:	f005 fe5e 	bl	1d13e <memcpy>
   17482:	f247 0207 	movw	r2, #28679	; 0x7007
   17486:	9b07      	ldr	r3, [sp, #28]
   17488:	4690      	mov	r8, r2
   1748a:	6899      	ldr	r1, [r3, #8]
   1748c:	8b58      	ldrh	r0, [r3, #26]
   1748e:	3104      	adds	r1, #4
   17490:	4401      	add	r1, r0
   17492:	9801      	ldr	r0, [sp, #4]
   17494:	6099      	str	r1, [r3, #8]
   17496:	6158      	str	r0, [r3, #20]
   17498:	e759      	b.n	1734e <ip_interface_sendto+0x102>
   1749a:	2023      	movs	r0, #35	; 0x23
   1749c:	f8df 901c 	ldr.w	r9, [pc, #28]	; 174bc <ip_interface_sendto+0x270>
   174a0:	e799      	b.n	173d6 <ip_interface_sendto+0x18a>
   174a2:	2028      	movs	r0, #40	; 0x28
   174a4:	f8df 9014 	ldr.w	r9, [pc, #20]	; 174bc <ip_interface_sendto+0x270>
   174a8:	e795      	b.n	173d6 <ip_interface_sendto+0x18a>
   174aa:	2039      	movs	r0, #57	; 0x39
   174ac:	f8df 900c 	ldr.w	r9, [pc, #12]	; 174bc <ip_interface_sendto+0x270>
   174b0:	e791      	b.n	173d6 <ip_interface_sendto+0x18a>
   174b2:	2009      	movs	r0, #9
   174b4:	f8df 9004 	ldr.w	r9, [pc, #4]	; 174bc <ip_interface_sendto+0x270>
   174b8:	e78d      	b.n	173d6 <ip_interface_sendto+0x18a>
   174ba:	bf00      	nop
   174bc:	2002095c 	.word	0x2002095c

000174c0 <ip_interface_recvfrom>:
   174c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174c4:	b085      	sub	sp, #20
   174c6:	2a00      	cmp	r2, #0
   174c8:	f000 8110 	beq.w	176ec <ip_interface_recvfrom+0x22c>
   174cc:	468a      	mov	sl, r1
   174ce:	4699      	mov	r9, r3
   174d0:	4607      	mov	r7, r0
   174d2:	4616      	mov	r6, r2
   174d4:	f001 f964 	bl	187a0 <interface_socket_from_handle_get>
   174d8:	4604      	mov	r4, r0
   174da:	2800      	cmp	r0, #0
   174dc:	f000 810d 	beq.w	176fa <ip_interface_recvfrom+0x23a>
   174e0:	6803      	ldr	r3, [r0, #0]
   174e2:	02d9      	lsls	r1, r3, #11
   174e4:	d565      	bpl.n	175b2 <ip_interface_recvfrom+0xf2>
   174e6:	f019 0f02 	tst.w	r9, #2
   174ea:	bf18      	it	ne
   174ec:	f04f 0800 	movne.w	r8, #0
   174f0:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   174f4:	bf08      	it	eq
   174f6:	6803      	ldreq	r3, [r0, #0]
   174f8:	f009 0510 	and.w	r5, r9, #16
   174fc:	bf04      	itt	eq
   174fe:	f083 5880 	eoreq.w	r8, r3, #268435456	; 0x10000000
   17502:	f3c8 7800 	ubfxeq	r8, r8, #28, #1
   17506:	6823      	ldr	r3, [r4, #0]
   17508:	03da      	lsls	r2, r3, #15
   1750a:	d56d      	bpl.n	175e8 <ip_interface_recvfrom+0x128>
   1750c:	6823      	ldr	r3, [r4, #0]
   1750e:	69e0      	ldr	r0, [r4, #28]
   17510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   17514:	6023      	str	r3, [r4, #0]
   17516:	6803      	ldr	r3, [r0, #0]
   17518:	68db      	ldr	r3, [r3, #12]
   1751a:	4798      	blx	r3
   1751c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   17520:	4683      	mov	fp, r0
   17522:	f000 8081 	beq.w	17628 <ip_interface_recvfrom+0x168>
   17526:	4286      	cmp	r6, r0
   17528:	dd03      	ble.n	17532 <ip_interface_recvfrom+0x72>
   1752a:	6923      	ldr	r3, [r4, #16]
   1752c:	2b01      	cmp	r3, #1
   1752e:	f000 80a7 	beq.w	17680 <ip_interface_recvfrom+0x1c0>
   17532:	2500      	movs	r5, #0
   17534:	69e0      	ldr	r0, [r4, #28]
   17536:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17538:	b103      	cbz	r3, 1753c <ip_interface_recvfrom+0x7c>
   1753a:	681b      	ldr	r3, [r3, #0]
   1753c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1753e:	e9cd a600 	strd	sl, r6, [sp]
   17542:	e9cd 2302 	strd	r2, r3, [sp, #8]
   17546:	6803      	ldr	r3, [r0, #0]
   17548:	464a      	mov	r2, r9
   1754a:	689b      	ldr	r3, [r3, #8]
   1754c:	4669      	mov	r1, sp
   1754e:	4798      	blx	r3
   17550:	4683      	mov	fp, r0
   17552:	69e0      	ldr	r0, [r4, #28]
   17554:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   17558:	6803      	ldr	r3, [r0, #0]
   1755a:	bf18      	it	ne
   1755c:	2601      	movne	r6, #1
   1755e:	68db      	ldr	r3, [r3, #12]
   17560:	bf0a      	itet	eq
   17562:	2600      	moveq	r6, #0
   17564:	f04f 0800 	movne.w	r8, #0
   17568:	f04f 0823 	moveq.w	r8, #35	; 0x23
   1756c:	4798      	blx	r3
   1756e:	3001      	adds	r0, #1
   17570:	d135      	bne.n	175de <ip_interface_recvfrom+0x11e>
   17572:	2d00      	cmp	r5, #0
   17574:	f000 80b6 	beq.w	176e4 <ip_interface_recvfrom+0x224>
   17578:	2e00      	cmp	r6, #0
   1757a:	f000 80a6 	beq.w	176ca <ip_interface_recvfrom+0x20a>
   1757e:	6823      	ldr	r3, [r4, #0]
   17580:	0319      	lsls	r1, r3, #12
   17582:	d506      	bpl.n	17592 <ip_interface_recvfrom+0xd2>
   17584:	6823      	ldr	r3, [r4, #0]
   17586:	b29b      	uxth	r3, r3
   17588:	2b0d      	cmp	r3, #13
   1758a:	d002      	beq.n	17592 <ip_interface_recvfrom+0xd2>
   1758c:	6923      	ldr	r3, [r4, #16]
   1758e:	2b01      	cmp	r3, #1
   17590:	d025      	beq.n	175de <ip_interface_recvfrom+0x11e>
   17592:	6823      	ldr	r3, [r4, #0]
   17594:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   17598:	6823      	ldr	r3, [r4, #0]
   1759a:	f040 80b1 	bne.w	17700 <ip_interface_recvfrom+0x240>
   1759e:	031a      	lsls	r2, r3, #12
   175a0:	d475      	bmi.n	1768e <ip_interface_recvfrom+0x1ce>
   175a2:	f1b8 0f00 	cmp.w	r8, #0
   175a6:	f040 808a 	bne.w	176be <ip_interface_recvfrom+0x1fe>
   175aa:	4658      	mov	r0, fp
   175ac:	b005      	add	sp, #20
   175ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175b2:	6803      	ldr	r3, [r0, #0]
   175b4:	b29b      	uxth	r3, r3
   175b6:	2b06      	cmp	r3, #6
   175b8:	d073      	beq.n	176a2 <ip_interface_recvfrom+0x1e2>
   175ba:	6803      	ldr	r3, [r0, #0]
   175bc:	b29b      	uxth	r3, r3
   175be:	2b07      	cmp	r3, #7
   175c0:	bf0c      	ite	eq
   175c2:	f04f 0809 	moveq.w	r8, #9
   175c6:	f04f 0839 	movne.w	r8, #57	; 0x39
   175ca:	69e0      	ldr	r0, [r4, #28]
   175cc:	6803      	ldr	r3, [r0, #0]
   175ce:	68db      	ldr	r3, [r3, #12]
   175d0:	4798      	blx	r3
   175d2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   175d6:	4683      	mov	fp, r0
   175d8:	d0db      	beq.n	17592 <ip_interface_recvfrom+0xd2>
   175da:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   175de:	6823      	ldr	r3, [r4, #0]
   175e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   175e4:	6023      	str	r3, [r4, #0]
   175e6:	e7dc      	b.n	175a2 <ip_interface_recvfrom+0xe2>
   175e8:	f1b8 0f00 	cmp.w	r8, #0
   175ec:	f000 8081 	beq.w	176f2 <ip_interface_recvfrom+0x232>
   175f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   175f4:	6a23      	ldr	r3, [r4, #32]
   175f6:	4611      	mov	r1, r2
   175f8:	2b00      	cmp	r3, #0
   175fa:	bf08      	it	eq
   175fc:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   17600:	4638      	mov	r0, r7
   17602:	f001 f861 	bl	186c8 <interface_socket_wait>
   17606:	4680      	mov	r8, r0
   17608:	b358      	cbz	r0, 17662 <ip_interface_recvfrom+0x1a2>
   1760a:	6823      	ldr	r3, [r4, #0]
   1760c:	69e0      	ldr	r0, [r4, #28]
   1760e:	031b      	lsls	r3, r3, #12
   17610:	d521      	bpl.n	17656 <ip_interface_recvfrom+0x196>
   17612:	6823      	ldr	r3, [r4, #0]
   17614:	b29b      	uxth	r3, r3
   17616:	2b0d      	cmp	r3, #13
   17618:	d01d      	beq.n	17656 <ip_interface_recvfrom+0x196>
   1761a:	6925      	ldr	r5, [r4, #16]
   1761c:	f1a5 0501 	sub.w	r5, r5, #1
   17620:	fab5 f585 	clz	r5, r5
   17624:	096d      	lsrs	r5, r5, #5
   17626:	e786      	b.n	17536 <ip_interface_recvfrom+0x76>
   17628:	6823      	ldr	r3, [r4, #0]
   1762a:	0318      	lsls	r0, r3, #12
   1762c:	d5dc      	bpl.n	175e8 <ip_interface_recvfrom+0x128>
   1762e:	6823      	ldr	r3, [r4, #0]
   17630:	b29b      	uxth	r3, r3
   17632:	2b0d      	cmp	r3, #13
   17634:	d0d8      	beq.n	175e8 <ip_interface_recvfrom+0x128>
   17636:	6923      	ldr	r3, [r4, #16]
   17638:	69e0      	ldr	r0, [r4, #28]
   1763a:	2b01      	cmp	r3, #1
   1763c:	d034      	beq.n	176a8 <ip_interface_recvfrom+0x1e8>
   1763e:	f04f 0839 	mov.w	r8, #57	; 0x39
   17642:	6823      	ldr	r3, [r4, #0]
   17644:	0c1b      	lsrs	r3, r3, #16
   17646:	041b      	lsls	r3, r3, #16
   17648:	f043 030d 	orr.w	r3, r3, #13
   1764c:	6023      	str	r3, [r4, #0]
   1764e:	6823      	ldr	r3, [r4, #0]
   17650:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   17654:	6023      	str	r3, [r4, #0]
   17656:	6803      	ldr	r3, [r0, #0]
   17658:	68db      	ldr	r3, [r3, #12]
   1765a:	4798      	blx	r3
   1765c:	3001      	adds	r0, #1
   1765e:	d1be      	bne.n	175de <ip_interface_recvfrom+0x11e>
   17660:	e797      	b.n	17592 <ip_interface_recvfrom+0xd2>
   17662:	4638      	mov	r0, r7
   17664:	f001 f89c 	bl	187a0 <interface_socket_from_handle_get>
   17668:	b138      	cbz	r0, 1767a <ip_interface_recvfrom+0x1ba>
   1766a:	f8d0 8004 	ldr.w	r8, [r0, #4]
   1766e:	f1b8 0f00 	cmp.w	r8, #0
   17672:	d002      	beq.n	1767a <ip_interface_recvfrom+0x1ba>
   17674:	2300      	movs	r3, #0
   17676:	6043      	str	r3, [r0, #4]
   17678:	e7c7      	b.n	1760a <ip_interface_recvfrom+0x14a>
   1767a:	f04f 0801 	mov.w	r8, #1
   1767e:	e742      	b.n	17506 <ip_interface_recvfrom+0x46>
   17680:	b11d      	cbz	r5, 1768a <ip_interface_recvfrom+0x1ca>
   17682:	6823      	ldr	r3, [r4, #0]
   17684:	00db      	lsls	r3, r3, #3
   17686:	d5b3      	bpl.n	175f0 <ip_interface_recvfrom+0x130>
   17688:	e753      	b.n	17532 <ip_interface_recvfrom+0x72>
   1768a:	69e0      	ldr	r0, [r4, #28]
   1768c:	e753      	b.n	17536 <ip_interface_recvfrom+0x76>
   1768e:	6823      	ldr	r3, [r4, #0]
   17690:	b29b      	uxth	r3, r3
   17692:	2b0d      	cmp	r3, #13
   17694:	d185      	bne.n	175a2 <ip_interface_recvfrom+0xe2>
   17696:	68a3      	ldr	r3, [r4, #8]
   17698:	2b00      	cmp	r3, #0
   1769a:	d082      	beq.n	175a2 <ip_interface_recvfrom+0xe2>
   1769c:	f8d4 8008 	ldr.w	r8, [r4, #8]
   176a0:	e77f      	b.n	175a2 <ip_interface_recvfrom+0xe2>
   176a2:	f04f 0809 	mov.w	r8, #9
   176a6:	e790      	b.n	175ca <ip_interface_recvfrom+0x10a>
   176a8:	6803      	ldr	r3, [r0, #0]
   176aa:	68db      	ldr	r3, [r3, #12]
   176ac:	4798      	blx	r3
   176ae:	3001      	adds	r0, #1
   176b0:	d00b      	beq.n	176ca <ip_interface_recvfrom+0x20a>
   176b2:	f04f 0823 	mov.w	r8, #35	; 0x23
   176b6:	6823      	ldr	r3, [r4, #0]
   176b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   176bc:	6023      	str	r3, [r4, #0]
   176be:	4640      	mov	r0, r8
   176c0:	f7f9 fef0 	bl	114a4 <bsd_os_errno_set>
   176c4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   176c8:	e76f      	b.n	175aa <ip_interface_recvfrom+0xea>
   176ca:	6823      	ldr	r3, [r4, #0]
   176cc:	f04f 0b00 	mov.w	fp, #0
   176d0:	0c1b      	lsrs	r3, r3, #16
   176d2:	041b      	lsls	r3, r3, #16
   176d4:	f043 030d 	orr.w	r3, r3, #13
   176d8:	6023      	str	r3, [r4, #0]
   176da:	6823      	ldr	r3, [r4, #0]
   176dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   176e0:	6023      	str	r3, [r4, #0]
   176e2:	e762      	b.n	175aa <ip_interface_recvfrom+0xea>
   176e4:	2e00      	cmp	r6, #0
   176e6:	f47f af4a 	bne.w	1757e <ip_interface_recvfrom+0xbe>
   176ea:	e752      	b.n	17592 <ip_interface_recvfrom+0xd2>
   176ec:	f04f 0816 	mov.w	r8, #22
   176f0:	e7e5      	b.n	176be <ip_interface_recvfrom+0x1fe>
   176f2:	f04f 0823 	mov.w	r8, #35	; 0x23
   176f6:	69e0      	ldr	r0, [r4, #28]
   176f8:	e7ad      	b.n	17656 <ip_interface_recvfrom+0x196>
   176fa:	f04f 0809 	mov.w	r8, #9
   176fe:	e7de      	b.n	176be <ip_interface_recvfrom+0x1fe>
   17700:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   17704:	6023      	str	r3, [r4, #0]
   17706:	6823      	ldr	r3, [r4, #0]
   17708:	f04f 0869 	mov.w	r8, #105	; 0x69
   1770c:	0c1b      	lsrs	r3, r3, #16
   1770e:	041b      	lsls	r3, r3, #16
   17710:	f043 030d 	orr.w	r3, r3, #13
   17714:	6023      	str	r3, [r4, #0]
   17716:	e7d2      	b.n	176be <ip_interface_recvfrom+0x1fe>

00017718 <ip_interface_connect>:
   17718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1771c:	b082      	sub	sp, #8
   1771e:	2900      	cmp	r1, #0
   17720:	d044      	beq.n	177ac <ip_interface_connect+0x94>
   17722:	2a00      	cmp	r2, #0
   17724:	d042      	beq.n	177ac <ip_interface_connect+0x94>
   17726:	4606      	mov	r6, r0
   17728:	460f      	mov	r7, r1
   1772a:	f001 f839 	bl	187a0 <interface_socket_from_handle_get>
   1772e:	4605      	mov	r5, r0
   17730:	2800      	cmp	r0, #0
   17732:	f000 8096 	beq.w	17862 <ip_interface_connect+0x14a>
   17736:	6803      	ldr	r3, [r0, #0]
   17738:	b29b      	uxth	r3, r3
   1773a:	2b02      	cmp	r3, #2
   1773c:	d004      	beq.n	17748 <ip_interface_connect+0x30>
   1773e:	6803      	ldr	r3, [r0, #0]
   17740:	b29b      	uxth	r3, r3
   17742:	2b04      	cmp	r3, #4
   17744:	f040 808d 	bne.w	17862 <ip_interface_connect+0x14a>
   17748:	6829      	ldr	r1, [r5, #0]
   1774a:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   1774e:	f040 8084 	bne.w	1785a <ip_interface_connect+0x142>
   17752:	a802      	add	r0, sp, #8
   17754:	f840 1d04 	str.w	r1, [r0, #-4]!
   17758:	f8d5 8018 	ldr.w	r8, [r5, #24]
   1775c:	f7fb ff80 	bl	13660 <rpc_ip_client_request_alloc>
   17760:	bb70      	cbnz	r0, 177c0 <ip_interface_connect+0xa8>
   17762:	2108      	movs	r1, #8
   17764:	0433      	lsls	r3, r6, #16
   17766:	9c01      	ldr	r4, [sp, #4]
   17768:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
   1776c:	f042 0202 	orr.w	r2, r2, #2
   17770:	60e2      	str	r2, [r4, #12]
   17772:	f8c4 8010 	str.w	r8, [r4, #16]
   17776:	7260      	strb	r0, [r4, #9]
   17778:	72a0      	strb	r0, [r4, #10]
   1777a:	72e0      	strb	r0, [r4, #11]
   1777c:	7221      	strb	r1, [r4, #8]
   1777e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
   17782:	f043 0302 	orr.w	r3, r3, #2
   17786:	60e3      	str	r3, [r4, #12]
   17788:	68a3      	ldr	r3, [r4, #8]
   1778a:	69aa      	ldr	r2, [r5, #24]
   1778c:	3304      	adds	r3, #4
   1778e:	6122      	str	r2, [r4, #16]
   17790:	60a3      	str	r3, [r4, #8]
   17792:	68eb      	ldr	r3, [r5, #12]
   17794:	687a      	ldr	r2, [r7, #4]
   17796:	4293      	cmp	r3, r2
   17798:	d108      	bne.n	177ac <ip_interface_connect+0x94>
   1779a:	2b02      	cmp	r3, #2
   1779c:	f104 0018 	add.w	r0, r4, #24
   177a0:	783a      	ldrb	r2, [r7, #0]
   177a2:	d03a      	beq.n	1781a <ip_interface_connect+0x102>
   177a4:	2b0a      	cmp	r3, #10
   177a6:	d101      	bne.n	177ac <ip_interface_connect+0x94>
   177a8:	2a24      	cmp	r2, #36	; 0x24
   177aa:	d00e      	beq.n	177ca <ip_interface_connect+0xb2>
   177ac:	2416      	movs	r4, #22
   177ae:	4620      	mov	r0, r4
   177b0:	f7f9 fe78 	bl	114a4 <bsd_os_errno_set>
   177b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   177b8:	4620      	mov	r0, r4
   177ba:	b002      	add	sp, #8
   177bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   177c0:	9c01      	ldr	r4, [sp, #4]
   177c2:	2c00      	cmp	r4, #0
   177c4:	d04f      	beq.n	17866 <ip_interface_connect+0x14e>
   177c6:	0433      	lsls	r3, r6, #16
   177c8:	e7d9      	b.n	1777e <ip_interface_connect+0x66>
   177ca:	2210      	movs	r2, #16
   177cc:	893b      	ldrh	r3, [r7, #8]
   177ce:	18b9      	adds	r1, r7, r2
   177d0:	82e2      	strh	r2, [r4, #22]
   177d2:	82a3      	strh	r3, [r4, #20]
   177d4:	f005 fcb3 	bl	1d13e <memcpy>
   177d8:	68a3      	ldr	r3, [r4, #8]
   177da:	8ae2      	ldrh	r2, [r4, #22]
   177dc:	f247 0102 	movw	r1, #28674	; 0x7002
   177e0:	4413      	add	r3, r2
   177e2:	60a3      	str	r3, [r4, #8]
   177e4:	682f      	ldr	r7, [r5, #0]
   177e6:	682b      	ldr	r3, [r5, #0]
   177e8:	4620      	mov	r0, r4
   177ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   177ee:	602b      	str	r3, [r5, #0]
   177f0:	f7fb ff4a 	bl	13688 <rpc_ip_client_request_send>
   177f4:	b9e0      	cbnz	r0, 17830 <ip_interface_connect+0x118>
   177f6:	682b      	ldr	r3, [r5, #0]
   177f8:	f013 5880 	ands.w	r8, r3, #268435456	; 0x10000000
   177fc:	d12f      	bne.n	1785e <ip_interface_connect+0x146>
   177fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17802:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17806:	2105      	movs	r1, #5
   17808:	4630      	mov	r0, r6
   1780a:	f000 ff5d 	bl	186c8 <interface_socket_wait>
   1780e:	4604      	mov	r4, r0
   17810:	b1c0      	cbz	r0, 17844 <ip_interface_connect+0x12c>
   17812:	2c73      	cmp	r4, #115	; 0x73
   17814:	d0cb      	beq.n	177ae <ip_interface_connect+0x96>
   17816:	602f      	str	r7, [r5, #0]
   17818:	e7c9      	b.n	177ae <ip_interface_connect+0x96>
   1781a:	2a10      	cmp	r2, #16
   1781c:	d1c6      	bne.n	177ac <ip_interface_connect+0x94>
   1781e:	2204      	movs	r2, #4
   17820:	893b      	ldrh	r3, [r7, #8]
   17822:	f107 010c 	add.w	r1, r7, #12
   17826:	82e2      	strh	r2, [r4, #22]
   17828:	82a3      	strh	r3, [r4, #20]
   1782a:	f005 fc88 	bl	1d13e <memcpy>
   1782e:	e7d3      	b.n	177d8 <ip_interface_connect+0xc0>
   17830:	6820      	ldr	r0, [r4, #0]
   17832:	b108      	cbz	r0, 17838 <ip_interface_connect+0x120>
   17834:	f7fb ff46 	bl	136c4 <rpc_ip_client_data_free>
   17838:	4620      	mov	r0, r4
   1783a:	f7fb ff3b 	bl	136b4 <rpc_ip_client_message_free>
   1783e:	2423      	movs	r4, #35	; 0x23
   17840:	602f      	str	r7, [r5, #0]
   17842:	e7b4      	b.n	177ae <ip_interface_connect+0x96>
   17844:	4630      	mov	r0, r6
   17846:	f000 ffab 	bl	187a0 <interface_socket_from_handle_get>
   1784a:	2800      	cmp	r0, #0
   1784c:	d0b4      	beq.n	177b8 <ip_interface_connect+0xa0>
   1784e:	6844      	ldr	r4, [r0, #4]
   17850:	2c00      	cmp	r4, #0
   17852:	d0b1      	beq.n	177b8 <ip_interface_connect+0xa0>
   17854:	f8c0 8004 	str.w	r8, [r0, #4]
   17858:	e7db      	b.n	17812 <ip_interface_connect+0xfa>
   1785a:	2472      	movs	r4, #114	; 0x72
   1785c:	e7a7      	b.n	177ae <ip_interface_connect+0x96>
   1785e:	2473      	movs	r4, #115	; 0x73
   17860:	e7a5      	b.n	177ae <ip_interface_connect+0x96>
   17862:	2409      	movs	r4, #9
   17864:	e7a3      	b.n	177ae <ip_interface_connect+0x96>
   17866:	240c      	movs	r4, #12
   17868:	e7a1      	b.n	177ae <ip_interface_connect+0x96>
   1786a:	bf00      	nop

0001786c <ip_interface_bind>:
   1786c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17870:	b082      	sub	sp, #8
   17872:	b389      	cbz	r1, 178d8 <ip_interface_bind+0x6c>
   17874:	b382      	cbz	r2, 178d8 <ip_interface_bind+0x6c>
   17876:	4607      	mov	r7, r0
   17878:	460e      	mov	r6, r1
   1787a:	f000 ff91 	bl	187a0 <interface_socket_from_handle_get>
   1787e:	4605      	mov	r5, r0
   17880:	2800      	cmp	r0, #0
   17882:	d07b      	beq.n	1797c <ip_interface_bind+0x110>
   17884:	6803      	ldr	r3, [r0, #0]
   17886:	b29b      	uxth	r3, r3
   17888:	2b02      	cmp	r3, #2
   1788a:	d177      	bne.n	1797c <ip_interface_bind+0x110>
   1788c:	2100      	movs	r1, #0
   1788e:	a802      	add	r0, sp, #8
   17890:	f840 1d04 	str.w	r1, [r0, #-4]!
   17894:	f8d5 8018 	ldr.w	r8, [r5, #24]
   17898:	f7fb fee2 	bl	13660 <rpc_ip_client_request_alloc>
   1789c:	bb30      	cbnz	r0, 178ec <ip_interface_bind+0x80>
   1789e:	f247 0305 	movw	r3, #28677	; 0x7005
   178a2:	2208      	movs	r2, #8
   178a4:	9c01      	ldr	r4, [sp, #4]
   178a6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   178aa:	60e3      	str	r3, [r4, #12]
   178ac:	f8c4 8010 	str.w	r8, [r4, #16]
   178b0:	7260      	strb	r0, [r4, #9]
   178b2:	72a0      	strb	r0, [r4, #10]
   178b4:	72e0      	strb	r0, [r4, #11]
   178b6:	7222      	strb	r2, [r4, #8]
   178b8:	68a3      	ldr	r3, [r4, #8]
   178ba:	3304      	adds	r3, #4
   178bc:	60a3      	str	r3, [r4, #8]
   178be:	68eb      	ldr	r3, [r5, #12]
   178c0:	6872      	ldr	r2, [r6, #4]
   178c2:	4293      	cmp	r3, r2
   178c4:	d108      	bne.n	178d8 <ip_interface_bind+0x6c>
   178c6:	2b02      	cmp	r3, #2
   178c8:	f104 0018 	add.w	r0, r4, #24
   178cc:	7832      	ldrb	r2, [r6, #0]
   178ce:	d03c      	beq.n	1794a <ip_interface_bind+0xde>
   178d0:	2b0a      	cmp	r3, #10
   178d2:	d101      	bne.n	178d8 <ip_interface_bind+0x6c>
   178d4:	2a24      	cmp	r2, #36	; 0x24
   178d6:	d00e      	beq.n	178f6 <ip_interface_bind+0x8a>
   178d8:	2416      	movs	r4, #22
   178da:	4620      	mov	r0, r4
   178dc:	f7f9 fde2 	bl	114a4 <bsd_os_errno_set>
   178e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   178e4:	4620      	mov	r0, r4
   178e6:	b002      	add	sp, #8
   178e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   178ec:	9c01      	ldr	r4, [sp, #4]
   178ee:	2c00      	cmp	r4, #0
   178f0:	d1e2      	bne.n	178b8 <ip_interface_bind+0x4c>
   178f2:	240c      	movs	r4, #12
   178f4:	e7f1      	b.n	178da <ip_interface_bind+0x6e>
   178f6:	2210      	movs	r2, #16
   178f8:	8933      	ldrh	r3, [r6, #8]
   178fa:	18b1      	adds	r1, r6, r2
   178fc:	82e2      	strh	r2, [r4, #22]
   178fe:	82a3      	strh	r3, [r4, #20]
   17900:	f005 fc1d 	bl	1d13e <memcpy>
   17904:	68a3      	ldr	r3, [r4, #8]
   17906:	8ae2      	ldrh	r2, [r4, #22]
   17908:	f247 0105 	movw	r1, #28677	; 0x7005
   1790c:	4413      	add	r3, r2
   1790e:	60a3      	str	r3, [r4, #8]
   17910:	682b      	ldr	r3, [r5, #0]
   17912:	4620      	mov	r0, r4
   17914:	0c1b      	lsrs	r3, r3, #16
   17916:	041b      	lsls	r3, r3, #16
   17918:	f043 0303 	orr.w	r3, r3, #3
   1791c:	602b      	str	r3, [r5, #0]
   1791e:	682e      	ldr	r6, [r5, #0]
   17920:	f7fb feb2 	bl	13688 <rpc_ip_client_request_send>
   17924:	4680      	mov	r8, r0
   17926:	b9d8      	cbnz	r0, 17960 <ip_interface_bind+0xf4>
   17928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1792c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17930:	2104      	movs	r1, #4
   17932:	4638      	mov	r0, r7
   17934:	f000 fec8 	bl	186c8 <interface_socket_wait>
   17938:	4604      	mov	r4, r0
   1793a:	b308      	cbz	r0, 17980 <ip_interface_bind+0x114>
   1793c:	682b      	ldr	r3, [r5, #0]
   1793e:	0c1b      	lsrs	r3, r3, #16
   17940:	041b      	lsls	r3, r3, #16
   17942:	f043 0302 	orr.w	r3, r3, #2
   17946:	602b      	str	r3, [r5, #0]
   17948:	e7c7      	b.n	178da <ip_interface_bind+0x6e>
   1794a:	2a10      	cmp	r2, #16
   1794c:	d1c4      	bne.n	178d8 <ip_interface_bind+0x6c>
   1794e:	2204      	movs	r2, #4
   17950:	8933      	ldrh	r3, [r6, #8]
   17952:	f106 010c 	add.w	r1, r6, #12
   17956:	82e2      	strh	r2, [r4, #22]
   17958:	82a3      	strh	r3, [r4, #20]
   1795a:	f005 fbf0 	bl	1d13e <memcpy>
   1795e:	e7d1      	b.n	17904 <ip_interface_bind+0x98>
   17960:	6820      	ldr	r0, [r4, #0]
   17962:	b108      	cbz	r0, 17968 <ip_interface_bind+0xfc>
   17964:	f7fb feae 	bl	136c4 <rpc_ip_client_data_free>
   17968:	0c36      	lsrs	r6, r6, #16
   1796a:	0436      	lsls	r6, r6, #16
   1796c:	4620      	mov	r0, r4
   1796e:	f046 0602 	orr.w	r6, r6, #2
   17972:	f7fb fe9f 	bl	136b4 <rpc_ip_client_message_free>
   17976:	2423      	movs	r4, #35	; 0x23
   17978:	602e      	str	r6, [r5, #0]
   1797a:	e7ae      	b.n	178da <ip_interface_bind+0x6e>
   1797c:	2409      	movs	r4, #9
   1797e:	e7ac      	b.n	178da <ip_interface_bind+0x6e>
   17980:	4638      	mov	r0, r7
   17982:	f000 ff0d 	bl	187a0 <interface_socket_from_handle_get>
   17986:	2800      	cmp	r0, #0
   17988:	d0ac      	beq.n	178e4 <ip_interface_bind+0x78>
   1798a:	6844      	ldr	r4, [r0, #4]
   1798c:	2c00      	cmp	r4, #0
   1798e:	d0a9      	beq.n	178e4 <ip_interface_bind+0x78>
   17990:	f8c0 8004 	str.w	r8, [r0, #4]
   17994:	e7d2      	b.n	1793c <ip_interface_bind+0xd0>
   17996:	bf00      	nop

00017998 <ip_interface_listen>:
   17998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1799c:	b082      	sub	sp, #8
   1799e:	4606      	mov	r6, r0
   179a0:	f000 fefe 	bl	187a0 <interface_socket_from_handle_get>
   179a4:	2800      	cmp	r0, #0
   179a6:	d067      	beq.n	17a78 <ip_interface_listen+0xe0>
   179a8:	6803      	ldr	r3, [r0, #0]
   179aa:	4605      	mov	r5, r0
   179ac:	b29b      	uxth	r3, r3
   179ae:	2b04      	cmp	r3, #4
   179b0:	d162      	bne.n	17a78 <ip_interface_listen+0xe0>
   179b2:	2100      	movs	r1, #0
   179b4:	4a32      	ldr	r2, [pc, #200]	; (17a80 <ip_interface_listen+0xe8>)
   179b6:	4630      	mov	r0, r6
   179b8:	f000 fe4e 	bl	18658 <interface_socket_packet_handler_update>
   179bc:	4601      	mov	r1, r0
   179be:	2800      	cmp	r0, #0
   179c0:	d15c      	bne.n	17a7c <ip_interface_listen+0xe4>
   179c2:	a802      	add	r0, sp, #8
   179c4:	f840 1d04 	str.w	r1, [r0, #-4]!
   179c8:	69af      	ldr	r7, [r5, #24]
   179ca:	f7fb fe49 	bl	13660 <rpc_ip_client_request_alloc>
   179ce:	bba8      	cbnz	r0, 17a3c <ip_interface_listen+0xa4>
   179d0:	f247 0308 	movw	r3, #28680	; 0x7008
   179d4:	2208      	movs	r2, #8
   179d6:	9c01      	ldr	r4, [sp, #4]
   179d8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   179dc:	60e3      	str	r3, [r4, #12]
   179de:	6127      	str	r7, [r4, #16]
   179e0:	7260      	strb	r0, [r4, #9]
   179e2:	72a0      	strb	r0, [r4, #10]
   179e4:	72e0      	strb	r0, [r4, #11]
   179e6:	7222      	strb	r2, [r4, #8]
   179e8:	68a3      	ldr	r3, [r4, #8]
   179ea:	f247 0108 	movw	r1, #28680	; 0x7008
   179ee:	3304      	adds	r3, #4
   179f0:	60a3      	str	r3, [r4, #8]
   179f2:	682b      	ldr	r3, [r5, #0]
   179f4:	4620      	mov	r0, r4
   179f6:	0c1b      	lsrs	r3, r3, #16
   179f8:	041b      	lsls	r3, r3, #16
   179fa:	f043 0306 	orr.w	r3, r3, #6
   179fe:	602b      	str	r3, [r5, #0]
   17a00:	682f      	ldr	r7, [r5, #0]
   17a02:	f7fb fe41 	bl	13688 <rpc_ip_client_request_send>
   17a06:	4680      	mov	r8, r0
   17a08:	b9e8      	cbnz	r0, 17a46 <ip_interface_listen+0xae>
   17a0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17a0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17a12:	2107      	movs	r1, #7
   17a14:	4630      	mov	r0, r6
   17a16:	f000 fe57 	bl	186c8 <interface_socket_wait>
   17a1a:	4604      	mov	r4, r0
   17a1c:	b308      	cbz	r0, 17a62 <ip_interface_listen+0xca>
   17a1e:	682b      	ldr	r3, [r5, #0]
   17a20:	0c1b      	lsrs	r3, r3, #16
   17a22:	041b      	lsls	r3, r3, #16
   17a24:	f043 0304 	orr.w	r3, r3, #4
   17a28:	602b      	str	r3, [r5, #0]
   17a2a:	4620      	mov	r0, r4
   17a2c:	f7f9 fd3a 	bl	114a4 <bsd_os_errno_set>
   17a30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17a34:	4620      	mov	r0, r4
   17a36:	b002      	add	sp, #8
   17a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17a3c:	9c01      	ldr	r4, [sp, #4]
   17a3e:	2c00      	cmp	r4, #0
   17a40:	d1d2      	bne.n	179e8 <ip_interface_listen+0x50>
   17a42:	240c      	movs	r4, #12
   17a44:	e7f1      	b.n	17a2a <ip_interface_listen+0x92>
   17a46:	6820      	ldr	r0, [r4, #0]
   17a48:	b108      	cbz	r0, 17a4e <ip_interface_listen+0xb6>
   17a4a:	f7fb fe3b 	bl	136c4 <rpc_ip_client_data_free>
   17a4e:	0c3f      	lsrs	r7, r7, #16
   17a50:	043f      	lsls	r7, r7, #16
   17a52:	4620      	mov	r0, r4
   17a54:	f047 0704 	orr.w	r7, r7, #4
   17a58:	f7fb fe2c 	bl	136b4 <rpc_ip_client_message_free>
   17a5c:	2423      	movs	r4, #35	; 0x23
   17a5e:	602f      	str	r7, [r5, #0]
   17a60:	e7e3      	b.n	17a2a <ip_interface_listen+0x92>
   17a62:	4630      	mov	r0, r6
   17a64:	f000 fe9c 	bl	187a0 <interface_socket_from_handle_get>
   17a68:	2800      	cmp	r0, #0
   17a6a:	d0e3      	beq.n	17a34 <ip_interface_listen+0x9c>
   17a6c:	6844      	ldr	r4, [r0, #4]
   17a6e:	2c00      	cmp	r4, #0
   17a70:	d0e0      	beq.n	17a34 <ip_interface_listen+0x9c>
   17a72:	f8c0 8004 	str.w	r8, [r0, #4]
   17a76:	e7d2      	b.n	17a1e <ip_interface_listen+0x86>
   17a78:	2409      	movs	r4, #9
   17a7a:	e7d6      	b.n	17a2a <ip_interface_listen+0x92>
   17a7c:	2423      	movs	r4, #35	; 0x23
   17a7e:	e7d4      	b.n	17a2a <ip_interface_listen+0x92>
   17a80:	00016f29 	.word	0x00016f29

00017a84 <ip_interface_accept>:
   17a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a88:	2500      	movs	r5, #0
   17a8a:	b085      	sub	sp, #20
   17a8c:	460f      	mov	r7, r1
   17a8e:	4690      	mov	r8, r2
   17a90:	9502      	str	r5, [sp, #8]
   17a92:	4606      	mov	r6, r0
   17a94:	f000 fe84 	bl	187a0 <interface_socket_from_handle_get>
   17a98:	4604      	mov	r4, r0
   17a9a:	2800      	cmp	r0, #0
   17a9c:	f000 811c 	beq.w	17cd8 <ip_interface_accept+0x254>
   17aa0:	6803      	ldr	r3, [r0, #0]
   17aa2:	b29b      	uxth	r3, r3
   17aa4:	2b07      	cmp	r3, #7
   17aa6:	d10a      	bne.n	17abe <ip_interface_accept+0x3a>
   17aa8:	6803      	ldr	r3, [r0, #0]
   17aaa:	6805      	ldr	r5, [r0, #0]
   17aac:	00db      	lsls	r3, r3, #3
   17aae:	d416      	bmi.n	17ade <ip_interface_accept+0x5a>
   17ab0:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   17ab4:	d019      	beq.n	17aea <ip_interface_accept+0x66>
   17ab6:	6805      	ldr	r5, [r0, #0]
   17ab8:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   17abc:	d124      	bne.n	17b08 <ip_interface_accept+0x84>
   17abe:	f04f 0909 	mov.w	r9, #9
   17ac2:	9b02      	ldr	r3, [sp, #8]
   17ac4:	b113      	cbz	r3, 17acc <ip_interface_accept+0x48>
   17ac6:	4628      	mov	r0, r5
   17ac8:	f000 fdb0 	bl	1862c <interface_socket_free>
   17acc:	4648      	mov	r0, r9
   17ace:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   17ad2:	f7f9 fce7 	bl	114a4 <bsd_os_errno_set>
   17ad6:	4648      	mov	r0, r9
   17ad8:	b005      	add	sp, #20
   17ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ade:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   17ae2:	d16d      	bne.n	17bc0 <ip_interface_accept+0x13c>
   17ae4:	f04f 0923 	mov.w	r9, #35	; 0x23
   17ae8:	e7eb      	b.n	17ac2 <ip_interface_accept+0x3e>
   17aea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   17aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17af2:	4611      	mov	r1, r2
   17af4:	4630      	mov	r0, r6
   17af6:	f000 fde7 	bl	186c8 <interface_socket_wait>
   17afa:	4681      	mov	r9, r0
   17afc:	2800      	cmp	r0, #0
   17afe:	d07e      	beq.n	17bfe <ip_interface_accept+0x17a>
   17b00:	6825      	ldr	r5, [r4, #0]
   17b02:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   17b06:	d0dc      	beq.n	17ac2 <ip_interface_accept+0x3e>
   17b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17b0c:	2300      	movs	r3, #0
   17b0e:	e9cd 0300 	strd	r0, r3, [sp]
   17b12:	4a75      	ldr	r2, [pc, #468]	; (17ce8 <ip_interface_accept+0x264>)
   17b14:	6921      	ldr	r1, [r4, #16]
   17b16:	a802      	add	r0, sp, #8
   17b18:	f000 fd32 	bl	18580 <interface_socket_allocate>
   17b1c:	9b02      	ldr	r3, [sp, #8]
   17b1e:	4605      	mov	r5, r0
   17b20:	2b00      	cmp	r3, #0
   17b22:	f000 80dd 	beq.w	17ce0 <ip_interface_accept+0x25c>
   17b26:	2100      	movs	r1, #0
   17b28:	6962      	ldr	r2, [r4, #20]
   17b2a:	a804      	add	r0, sp, #16
   17b2c:	615a      	str	r2, [r3, #20]
   17b2e:	68e2      	ldr	r2, [r4, #12]
   17b30:	f840 1d04 	str.w	r1, [r0, #-4]!
   17b34:	60da      	str	r2, [r3, #12]
   17b36:	6922      	ldr	r2, [r4, #16]
   17b38:	611a      	str	r2, [r3, #16]
   17b3a:	f8d4 9018 	ldr.w	r9, [r4, #24]
   17b3e:	f7fb fd8f 	bl	13660 <rpc_ip_client_request_alloc>
   17b42:	2800      	cmp	r0, #0
   17b44:	d143      	bne.n	17bce <ip_interface_accept+0x14a>
   17b46:	f247 030c 	movw	r3, #28684	; 0x700c
   17b4a:	2108      	movs	r1, #8
   17b4c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   17b50:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   17b54:	f8cb 300c 	str.w	r3, [fp, #12]
   17b58:	f8cb 9010 	str.w	r9, [fp, #16]
   17b5c:	f88b 0009 	strb.w	r0, [fp, #9]
   17b60:	f88b 000a 	strb.w	r0, [fp, #10]
   17b64:	f88b 000b 	strb.w	r0, [fp, #11]
   17b68:	f88b 1008 	strb.w	r1, [fp, #8]
   17b6c:	6823      	ldr	r3, [r4, #0]
   17b6e:	f247 010c 	movw	r1, #28684	; 0x700c
   17b72:	0c1b      	lsrs	r3, r3, #16
   17b74:	041b      	lsls	r3, r3, #16
   17b76:	f043 0308 	orr.w	r3, r3, #8
   17b7a:	6023      	str	r3, [r4, #0]
   17b7c:	4658      	mov	r0, fp
   17b7e:	f8d4 9000 	ldr.w	r9, [r4]
   17b82:	f7fb fd81 	bl	13688 <rpc_ip_client_request_send>
   17b86:	4682      	mov	sl, r0
   17b88:	bb48      	cbnz	r0, 17bde <ip_interface_accept+0x15a>
   17b8a:	6822      	ldr	r2, [r4, #0]
   17b8c:	9900      	ldr	r1, [sp, #0]
   17b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17b92:	400a      	ands	r2, r1
   17b94:	6022      	str	r2, [r4, #0]
   17b96:	2109      	movs	r1, #9
   17b98:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17b9c:	4630      	mov	r0, r6
   17b9e:	f000 fd93 	bl	186c8 <interface_socket_wait>
   17ba2:	4681      	mov	r9, r0
   17ba4:	2800      	cmp	r0, #0
   17ba6:	f000 8085 	beq.w	17cb4 <ip_interface_accept+0x230>
   17baa:	6823      	ldr	r3, [r4, #0]
   17bac:	9a01      	ldr	r2, [sp, #4]
   17bae:	431a      	orrs	r2, r3
   17bb0:	6022      	str	r2, [r4, #0]
   17bb2:	6823      	ldr	r3, [r4, #0]
   17bb4:	0c1b      	lsrs	r3, r3, #16
   17bb6:	041b      	lsls	r3, r3, #16
   17bb8:	f043 0307 	orr.w	r3, r3, #7
   17bbc:	6023      	str	r3, [r4, #0]
   17bbe:	e780      	b.n	17ac2 <ip_interface_accept+0x3e>
   17bc0:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   17bc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   17bc8:	e9cd 2300 	strd	r2, r3, [sp]
   17bcc:	e7a1      	b.n	17b12 <ip_interface_accept+0x8e>
   17bce:	f8dd b00c 	ldr.w	fp, [sp, #12]
   17bd2:	f04f 090c 	mov.w	r9, #12
   17bd6:	f1bb 0f00 	cmp.w	fp, #0
   17bda:	d1c7      	bne.n	17b6c <ip_interface_accept+0xe8>
   17bdc:	e771      	b.n	17ac2 <ip_interface_accept+0x3e>
   17bde:	f8db 0000 	ldr.w	r0, [fp]
   17be2:	b108      	cbz	r0, 17be8 <ip_interface_accept+0x164>
   17be4:	f7fb fd6e 	bl	136c4 <rpc_ip_client_data_free>
   17be8:	ea4f 4919 	mov.w	r9, r9, lsr #16
   17bec:	4658      	mov	r0, fp
   17bee:	ea4f 4909 	mov.w	r9, r9, lsl #16
   17bf2:	f7fb fd5f 	bl	136b4 <rpc_ip_client_message_free>
   17bf6:	f049 0307 	orr.w	r3, r9, #7
   17bfa:	6023      	str	r3, [r4, #0]
   17bfc:	e772      	b.n	17ae4 <ip_interface_accept+0x60>
   17bfe:	4630      	mov	r0, r6
   17c00:	f000 fdce 	bl	187a0 <interface_socket_from_handle_get>
   17c04:	b130      	cbz	r0, 17c14 <ip_interface_accept+0x190>
   17c06:	f8d0 9004 	ldr.w	r9, [r0, #4]
   17c0a:	f1b9 0f00 	cmp.w	r9, #0
   17c0e:	d001      	beq.n	17c14 <ip_interface_accept+0x190>
   17c10:	6045      	str	r5, [r0, #4]
   17c12:	e775      	b.n	17b00 <ip_interface_accept+0x7c>
   17c14:	6823      	ldr	r3, [r4, #0]
   17c16:	03d9      	lsls	r1, r3, #15
   17c18:	f53f af76 	bmi.w	17b08 <ip_interface_accept+0x84>
   17c1c:	4d33      	ldr	r5, [pc, #204]	; (17cec <ip_interface_accept+0x268>)
   17c1e:	9902      	ldr	r1, [sp, #8]
   17c20:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   17c24:	699b      	ldr	r3, [r3, #24]
   17c26:	618b      	str	r3, [r1, #24]
   17c28:	b147      	cbz	r7, 17c3c <ip_interface_accept+0x1b8>
   17c2a:	68cb      	ldr	r3, [r1, #12]
   17c2c:	2b0a      	cmp	r3, #10
   17c2e:	d024      	beq.n	17c7a <ip_interface_accept+0x1f6>
   17c30:	2b02      	cmp	r3, #2
   17c32:	d103      	bne.n	17c3c <ip_interface_accept+0x1b8>
   17c34:	f8d8 2000 	ldr.w	r2, [r8]
   17c38:	2a10      	cmp	r2, #16
   17c3a:	d032      	beq.n	17ca2 <ip_interface_accept+0x21e>
   17c3c:	680a      	ldr	r2, [r1, #0]
   17c3e:	482c      	ldr	r0, [pc, #176]	; (17cf0 <ip_interface_accept+0x26c>)
   17c40:	4002      	ands	r2, r0
   17c42:	f042 0205 	orr.w	r2, r2, #5
   17c46:	600a      	str	r2, [r1, #0]
   17c48:	9a02      	ldr	r2, [sp, #8]
   17c4a:	6811      	ldr	r1, [r2, #0]
   17c4c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   17c50:	6011      	str	r1, [r2, #0]
   17c52:	6811      	ldr	r1, [r2, #0]
   17c54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17c58:	6011      	str	r1, [r2, #0]
   17c5a:	6823      	ldr	r3, [r4, #0]
   17c5c:	4003      	ands	r3, r0
   17c5e:	f043 0307 	orr.w	r3, r3, #7
   17c62:	6023      	str	r3, [r4, #0]
   17c64:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   17c68:	f7fb fd24 	bl	136b4 <rpc_ip_client_message_free>
   17c6c:	2300      	movs	r3, #0
   17c6e:	4648      	mov	r0, r9
   17c70:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   17c74:	b005      	add	sp, #20
   17c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c7a:	f8d8 2000 	ldr.w	r2, [r8]
   17c7e:	2a24      	cmp	r2, #36	; 0x24
   17c80:	d1dc      	bne.n	17c3c <ip_interface_accept+0x1b8>
   17c82:	703a      	strb	r2, [r7, #0]
   17c84:	2210      	movs	r2, #16
   17c86:	607b      	str	r3, [r7, #4]
   17c88:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   17c8c:	f107 0010 	add.w	r0, r7, #16
   17c90:	8b9b      	ldrh	r3, [r3, #28]
   17c92:	813b      	strh	r3, [r7, #8]
   17c94:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   17c98:	3120      	adds	r1, #32
   17c9a:	f005 fa50 	bl	1d13e <memcpy>
   17c9e:	9902      	ldr	r1, [sp, #8]
   17ca0:	e7cc      	b.n	17c3c <ip_interface_accept+0x1b8>
   17ca2:	703a      	strb	r2, [r7, #0]
   17ca4:	607b      	str	r3, [r7, #4]
   17ca6:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   17caa:	f107 000c 	add.w	r0, r7, #12
   17cae:	8b9b      	ldrh	r3, [r3, #28]
   17cb0:	2204      	movs	r2, #4
   17cb2:	e7ee      	b.n	17c92 <ip_interface_accept+0x20e>
   17cb4:	4630      	mov	r0, r6
   17cb6:	f000 fd73 	bl	187a0 <interface_socket_from_handle_get>
   17cba:	b138      	cbz	r0, 17ccc <ip_interface_accept+0x248>
   17cbc:	f8d0 9004 	ldr.w	r9, [r0, #4]
   17cc0:	f1b9 0f00 	cmp.w	r9, #0
   17cc4:	d002      	beq.n	17ccc <ip_interface_accept+0x248>
   17cc6:	f8c0 a004 	str.w	sl, [r0, #4]
   17cca:	e76e      	b.n	17baa <ip_interface_accept+0x126>
   17ccc:	6823      	ldr	r3, [r4, #0]
   17cce:	9a01      	ldr	r2, [sp, #4]
   17cd0:	46a9      	mov	r9, r5
   17cd2:	4313      	orrs	r3, r2
   17cd4:	6023      	str	r3, [r4, #0]
   17cd6:	e7a1      	b.n	17c1c <ip_interface_accept+0x198>
   17cd8:	4605      	mov	r5, r0
   17cda:	f04f 0909 	mov.w	r9, #9
   17cde:	e6f0      	b.n	17ac2 <ip_interface_accept+0x3e>
   17ce0:	f04f 090c 	mov.w	r9, #12
   17ce4:	e6f2      	b.n	17acc <ip_interface_accept+0x48>
   17ce6:	bf00      	nop
   17ce8:	00016f29 	.word	0x00016f29
   17cec:	2002095c 	.word	0x2002095c
   17cf0:	ffff0000 	.word	0xffff0000

00017cf4 <ip_interface_setopt>:
   17cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17cf8:	2901      	cmp	r1, #1
   17cfa:	b084      	sub	sp, #16
   17cfc:	f040 809c 	bne.w	17e38 <ip_interface_setopt+0x144>
   17d00:	460e      	mov	r6, r1
   17d02:	4690      	mov	r8, r2
   17d04:	461d      	mov	r5, r3
   17d06:	4607      	mov	r7, r0
   17d08:	f000 fd4a 	bl	187a0 <interface_socket_from_handle_get>
   17d0c:	4604      	mov	r4, r0
   17d0e:	2800      	cmp	r0, #0
   17d10:	f000 80a5 	beq.w	17e5e <ip_interface_setopt+0x16a>
   17d14:	f1b8 0f19 	cmp.w	r8, #25
   17d18:	d16e      	bne.n	17df8 <ip_interface_setopt+0x104>
   17d1a:	2d00      	cmp	r5, #0
   17d1c:	f000 8092 	beq.w	17e44 <ip_interface_setopt+0x150>
   17d20:	4628      	mov	r0, r5
   17d22:	f005 f9d1 	bl	1d0c8 <strlen>
   17d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17d28:	4298      	cmp	r0, r3
   17d2a:	f040 808b 	bne.w	17e44 <ip_interface_setopt+0x150>
   17d2e:	6823      	ldr	r3, [r4, #0]
   17d30:	b29b      	uxth	r3, r3
   17d32:	2b02      	cmp	r3, #2
   17d34:	d173      	bne.n	17e1e <ip_interface_setopt+0x12a>
   17d36:	4629      	mov	r1, r5
   17d38:	68e0      	ldr	r0, [r4, #12]
   17d3a:	f7fe fb91 	bl	16460 <pdn_interface_pdn_id_get>
   17d3e:	9002      	str	r0, [sp, #8]
   17d40:	3001      	adds	r0, #1
   17d42:	bf08      	it	eq
   17d44:	2516      	moveq	r5, #22
   17d46:	d04e      	beq.n	17de6 <ip_interface_setopt+0xf2>
   17d48:	6823      	ldr	r3, [r4, #0]
   17d4a:	025b      	lsls	r3, r3, #9
   17d4c:	d44a      	bmi.n	17de4 <ip_interface_setopt+0xf0>
   17d4e:	6823      	ldr	r3, [r4, #0]
   17d50:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
   17d54:	d146      	bne.n	17de4 <ip_interface_setopt+0xf0>
   17d56:	6826      	ldr	r6, [r4, #0]
   17d58:	6822      	ldr	r2, [r4, #0]
   17d5a:	a804      	add	r0, sp, #16
   17d5c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   17d60:	6022      	str	r2, [r4, #0]
   17d62:	2104      	movs	r1, #4
   17d64:	f840 3d04 	str.w	r3, [r0, #-4]!
   17d68:	f8d4 8018 	ldr.w	r8, [r4, #24]
   17d6c:	f7fb fc78 	bl	13660 <rpc_ip_client_request_alloc>
   17d70:	2800      	cmp	r0, #0
   17d72:	d14e      	bne.n	17e12 <ip_interface_setopt+0x11e>
   17d74:	f247 0203 	movw	r2, #28675	; 0x7003
   17d78:	2300      	movs	r3, #0
   17d7a:	2108      	movs	r1, #8
   17d7c:	9d03      	ldr	r5, [sp, #12]
   17d7e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   17d82:	60ea      	str	r2, [r5, #12]
   17d84:	f8c5 8010 	str.w	r8, [r5, #16]
   17d88:	7229      	strb	r1, [r5, #8]
   17d8a:	726b      	strb	r3, [r5, #9]
   17d8c:	72ab      	strb	r3, [r5, #10]
   17d8e:	72eb      	strb	r3, [r5, #11]
   17d90:	f04f 0c08 	mov.w	ip, #8
   17d94:	2300      	movs	r3, #0
   17d96:	2010      	movs	r0, #16
   17d98:	2130      	movs	r1, #48	; 0x30
   17d9a:	68aa      	ldr	r2, [r5, #8]
   17d9c:	756b      	strb	r3, [r5, #21]
   17d9e:	4462      	add	r2, ip
   17da0:	60aa      	str	r2, [r5, #8]
   17da2:	75ab      	strb	r3, [r5, #22]
   17da4:	75eb      	strb	r3, [r5, #23]
   17da6:	76ab      	strb	r3, [r5, #26]
   17da8:	76eb      	strb	r3, [r5, #27]
   17daa:	f885 c014 	strb.w	ip, [r5, #20]
   17dae:	7628      	strb	r0, [r5, #24]
   17db0:	7669      	strb	r1, [r5, #25]
   17db2:	2204      	movs	r2, #4
   17db4:	eb0d 010c 	add.w	r1, sp, ip
   17db8:	6828      	ldr	r0, [r5, #0]
   17dba:	f005 f9c0 	bl	1d13e <memcpy>
   17dbe:	f247 0103 	movw	r1, #28675	; 0x7003
   17dc2:	4628      	mov	r0, r5
   17dc4:	f7fb fc60 	bl	13688 <rpc_ip_client_request_send>
   17dc8:	4680      	mov	r8, r0
   17dca:	bb50      	cbnz	r0, 17e22 <ip_interface_setopt+0x12e>
   17dcc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   17dd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17dd4:	4611      	mov	r1, r2
   17dd6:	4638      	mov	r0, r7
   17dd8:	f000 fc76 	bl	186c8 <interface_socket_wait>
   17ddc:	4605      	mov	r5, r0
   17dde:	b398      	cbz	r0, 17e48 <ip_interface_setopt+0x154>
   17de0:	6026      	str	r6, [r4, #0]
   17de2:	e000      	b.n	17de6 <ip_interface_setopt+0xf2>
   17de4:	2523      	movs	r5, #35	; 0x23
   17de6:	4628      	mov	r0, r5
   17de8:	f7f9 fb5c 	bl	114a4 <bsd_os_errno_set>
   17dec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   17df0:	4628      	mov	r0, r5
   17df2:	b004      	add	sp, #16
   17df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17dfa:	4642      	mov	r2, r8
   17dfc:	9300      	str	r3, [sp, #0]
   17dfe:	4631      	mov	r1, r6
   17e00:	462b      	mov	r3, r5
   17e02:	4638      	mov	r0, r7
   17e04:	f000 fcf4 	bl	187f0 <interface_socket_setopt>
   17e08:	4605      	mov	r5, r0
   17e0a:	4628      	mov	r0, r5
   17e0c:	b004      	add	sp, #16
   17e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17e12:	9d03      	ldr	r5, [sp, #12]
   17e14:	2d00      	cmp	r5, #0
   17e16:	d1bb      	bne.n	17d90 <ip_interface_setopt+0x9c>
   17e18:	6026      	str	r6, [r4, #0]
   17e1a:	250c      	movs	r5, #12
   17e1c:	e7e3      	b.n	17de6 <ip_interface_setopt+0xf2>
   17e1e:	2509      	movs	r5, #9
   17e20:	e7e1      	b.n	17de6 <ip_interface_setopt+0xf2>
   17e22:	6828      	ldr	r0, [r5, #0]
   17e24:	b108      	cbz	r0, 17e2a <ip_interface_setopt+0x136>
   17e26:	f7fb fc4d 	bl	136c4 <rpc_ip_client_data_free>
   17e2a:	4628      	mov	r0, r5
   17e2c:	f7fb fc42 	bl	136b4 <rpc_ip_client_message_free>
   17e30:	2523      	movs	r5, #35	; 0x23
   17e32:	6026      	str	r6, [r4, #0]
   17e34:	6026      	str	r6, [r4, #0]
   17e36:	e7d6      	b.n	17de6 <ip_interface_setopt+0xf2>
   17e38:	202a      	movs	r0, #42	; 0x2a
   17e3a:	f7f9 fb33 	bl	114a4 <bsd_os_errno_set>
   17e3e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   17e42:	e7d5      	b.n	17df0 <ip_interface_setopt+0xfc>
   17e44:	250e      	movs	r5, #14
   17e46:	e7ce      	b.n	17de6 <ip_interface_setopt+0xf2>
   17e48:	4638      	mov	r0, r7
   17e4a:	f000 fca9 	bl	187a0 <interface_socket_from_handle_get>
   17e4e:	b120      	cbz	r0, 17e5a <ip_interface_setopt+0x166>
   17e50:	6845      	ldr	r5, [r0, #4]
   17e52:	b115      	cbz	r5, 17e5a <ip_interface_setopt+0x166>
   17e54:	f8c0 8004 	str.w	r8, [r0, #4]
   17e58:	e7c2      	b.n	17de0 <ip_interface_setopt+0xec>
   17e5a:	6026      	str	r6, [r4, #0]
   17e5c:	e7c8      	b.n	17df0 <ip_interface_setopt+0xfc>
   17e5e:	2009      	movs	r0, #9
   17e60:	f7f9 fb20 	bl	114a4 <bsd_os_errno_set>
   17e64:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   17e68:	e7c2      	b.n	17df0 <ip_interface_setopt+0xfc>
   17e6a:	bf00      	nop

00017e6c <ip_interface_getopt>:
   17e6c:	f000 bcf6 	b.w	1885c <interface_socket_getopt>

00017e70 <ip_interface_getaddrinfo>:
   17e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e74:	f04f 0c00 	mov.w	ip, #0
   17e78:	2401      	movs	r4, #1
   17e7a:	4e72      	ldr	r6, [pc, #456]	; (18044 <ip_interface_getaddrinfo+0x1d4>)
   17e7c:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 18050 <ip_interface_getaddrinfo+0x1e0>
   17e80:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 18054 <ip_interface_getaddrinfo+0x1e4>
   17e84:	b085      	sub	sp, #20
   17e86:	4607      	mov	r7, r0
   17e88:	4615      	mov	r5, r2
   17e8a:	9301      	str	r3, [sp, #4]
   17e8c:	f8a6 c000 	strh.w	ip, [r6]
   17e90:	f8ca 4000 	str.w	r4, [sl]
   17e94:	f8c9 4000 	str.w	r4, [r9]
   17e98:	b171      	cbz	r1, 17eb8 <ip_interface_getaddrinfo+0x48>
   17e9a:	4608      	mov	r0, r1
   17e9c:	220a      	movs	r2, #10
   17e9e:	4661      	mov	r1, ip
   17ea0:	f004 ffce 	bl	1ce40 <strtol>
   17ea4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   17ea8:	1e42      	subs	r2, r0, #1
   17eaa:	429a      	cmp	r2, r3
   17eac:	f200 8083 	bhi.w	17fb6 <ip_interface_getaddrinfo+0x146>
   17eb0:	0203      	lsls	r3, r0, #8
   17eb2:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   17eb6:	8030      	strh	r0, [r6, #0]
   17eb8:	f8df 819c 	ldr.w	r8, [pc, #412]	; 18058 <ip_interface_getaddrinfo+0x1e8>
   17ebc:	f8d8 3000 	ldr.w	r3, [r8]
   17ec0:	2b00      	cmp	r3, #0
   17ec2:	d174      	bne.n	17fae <ip_interface_getaddrinfo+0x13e>
   17ec4:	4a60      	ldr	r2, [pc, #384]	; (18048 <ip_interface_getaddrinfo+0x1d8>)
   17ec6:	6013      	str	r3, [r2, #0]
   17ec8:	4a60      	ldr	r2, [pc, #384]	; (1804c <ip_interface_getaddrinfo+0x1dc>)
   17eca:	6013      	str	r3, [r2, #0]
   17ecc:	2f00      	cmp	r7, #0
   17ece:	d062      	beq.n	17f96 <ip_interface_getaddrinfo+0x126>
   17ed0:	4638      	mov	r0, r7
   17ed2:	f005 f8f9 	bl	1d0c8 <strlen>
   17ed6:	4683      	mov	fp, r0
   17ed8:	b125      	cbz	r5, 17ee4 <ip_interface_getaddrinfo+0x74>
   17eda:	69ea      	ldr	r2, [r5, #28]
   17edc:	b112      	cbz	r2, 17ee4 <ip_interface_getaddrinfo+0x74>
   17ede:	6851      	ldr	r1, [r2, #4]
   17ee0:	2966      	cmp	r1, #102	; 0x66
   17ee2:	d06c      	beq.n	17fbe <ip_interface_getaddrinfo+0x14e>
   17ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17ee8:	2100      	movs	r1, #0
   17eea:	ae04      	add	r6, sp, #16
   17eec:	f846 1d04 	str.w	r1, [r6, #-4]!
   17ef0:	4630      	mov	r0, r6
   17ef2:	4659      	mov	r1, fp
   17ef4:	9200      	str	r2, [sp, #0]
   17ef6:	f7fb fbb3 	bl	13660 <rpc_ip_client_request_alloc>
   17efa:	9a00      	ldr	r2, [sp, #0]
   17efc:	2800      	cmp	r0, #0
   17efe:	d14c      	bne.n	17f9a <ip_interface_getaddrinfo+0x12a>
   17f00:	f247 010d 	movw	r1, #28685	; 0x700d
   17f04:	f04f 0c08 	mov.w	ip, #8
   17f08:	9c03      	ldr	r4, [sp, #12]
   17f0a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   17f0e:	60e1      	str	r1, [r4, #12]
   17f10:	6122      	str	r2, [r4, #16]
   17f12:	7260      	strb	r0, [r4, #9]
   17f14:	72a0      	strb	r0, [r4, #10]
   17f16:	72e0      	strb	r0, [r4, #11]
   17f18:	f884 c008 	strb.w	ip, [r4, #8]
   17f1c:	2d00      	cmp	r5, #0
   17f1e:	d076      	beq.n	1800e <ip_interface_getaddrinfo+0x19e>
   17f20:	686a      	ldr	r2, [r5, #4]
   17f22:	f022 0108 	bic.w	r1, r2, #8
   17f26:	2902      	cmp	r1, #2
   17f28:	d05c      	beq.n	17fe4 <ip_interface_getaddrinfo+0x174>
   17f2a:	2a05      	cmp	r2, #5
   17f2c:	d178      	bne.n	18020 <ip_interface_getaddrinfo+0x1b0>
   17f2e:	68a9      	ldr	r1, [r5, #8]
   17f30:	2902      	cmp	r1, #2
   17f32:	f8c9 1000 	str.w	r1, [r9]
   17f36:	d061      	beq.n	17ffc <ip_interface_getaddrinfo+0x18c>
   17f38:	61a2      	str	r2, [r4, #24]
   17f3a:	68ea      	ldr	r2, [r5, #12]
   17f3c:	6222      	str	r2, [r4, #32]
   17f3e:	68aa      	ldr	r2, [r5, #8]
   17f40:	61e2      	str	r2, [r4, #28]
   17f42:	682a      	ldr	r2, [r5, #0]
   17f44:	6162      	str	r2, [r4, #20]
   17f46:	68a2      	ldr	r2, [r4, #8]
   17f48:	3210      	adds	r2, #16
   17f4a:	60a2      	str	r2, [r4, #8]
   17f4c:	b12f      	cbz	r7, 17f5a <ip_interface_getaddrinfo+0xea>
   17f4e:	6820      	ldr	r0, [r4, #0]
   17f50:	b118      	cbz	r0, 17f5a <ip_interface_getaddrinfo+0xea>
   17f52:	465a      	mov	r2, fp
   17f54:	4639      	mov	r1, r7
   17f56:	f005 f8f2 	bl	1d13e <memcpy>
   17f5a:	2301      	movs	r3, #1
   17f5c:	f247 010d 	movw	r1, #28685	; 0x700d
   17f60:	4620      	mov	r0, r4
   17f62:	f8c8 3000 	str.w	r3, [r8]
   17f66:	f7fb fb8f 	bl	13688 <rpc_ip_client_request_send>
   17f6a:	2800      	cmp	r0, #0
   17f6c:	d156      	bne.n	1801c <ip_interface_getaddrinfo+0x1ac>
   17f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17f72:	9303      	str	r3, [sp, #12]
   17f74:	4631      	mov	r1, r6
   17f76:	4620      	mov	r0, r4
   17f78:	f7f9 fa00 	bl	1137c <bsd_os_timedwait>
   17f7c:	f8d8 3000 	ldr.w	r3, [r8]
   17f80:	2b01      	cmp	r3, #1
   17f82:	d0f7      	beq.n	17f74 <ip_interface_getaddrinfo+0x104>
   17f84:	4b31      	ldr	r3, [pc, #196]	; (1804c <ip_interface_getaddrinfo+0x1dc>)
   17f86:	6818      	ldr	r0, [r3, #0]
   17f88:	2800      	cmp	r0, #0
   17f8a:	d13b      	bne.n	18004 <ip_interface_getaddrinfo+0x194>
   17f8c:	4b2e      	ldr	r3, [pc, #184]	; (18048 <ip_interface_getaddrinfo+0x1d8>)
   17f8e:	9a01      	ldr	r2, [sp, #4]
   17f90:	681b      	ldr	r3, [r3, #0]
   17f92:	6013      	str	r3, [r2, #0]
   17f94:	e00c      	b.n	17fb0 <ip_interface_getaddrinfo+0x140>
   17f96:	46bb      	mov	fp, r7
   17f98:	e79e      	b.n	17ed8 <ip_interface_getaddrinfo+0x68>
   17f9a:	9c03      	ldr	r4, [sp, #12]
   17f9c:	2c00      	cmp	r4, #0
   17f9e:	d1bd      	bne.n	17f1c <ip_interface_getaddrinfo+0xac>
   17fa0:	200c      	movs	r0, #12
   17fa2:	2300      	movs	r3, #0
   17fa4:	f8c8 3000 	str.w	r3, [r8]
   17fa8:	b005      	add	sp, #20
   17faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fae:	2073      	movs	r0, #115	; 0x73
   17fb0:	b005      	add	sp, #20
   17fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fb6:	2016      	movs	r0, #22
   17fb8:	b005      	add	sp, #20
   17fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fbe:	6891      	ldr	r1, [r2, #8]
   17fc0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   17fc4:	d18e      	bne.n	17ee4 <ip_interface_getaddrinfo+0x74>
   17fc6:	f240 2102 	movw	r1, #514	; 0x202
   17fca:	68d0      	ldr	r0, [r2, #12]
   17fcc:	4288      	cmp	r0, r1
   17fce:	d189      	bne.n	17ee4 <ip_interface_getaddrinfo+0x74>
   17fd0:	6991      	ldr	r1, [r2, #24]
   17fd2:	2900      	cmp	r1, #0
   17fd4:	d086      	beq.n	17ee4 <ip_interface_getaddrinfo+0x74>
   17fd6:	6868      	ldr	r0, [r5, #4]
   17fd8:	f7fe fa42 	bl	16460 <pdn_interface_pdn_id_get>
   17fdc:	1c43      	adds	r3, r0, #1
   17fde:	d081      	beq.n	17ee4 <ip_interface_getaddrinfo+0x74>
   17fe0:	4602      	mov	r2, r0
   17fe2:	e781      	b.n	17ee8 <ip_interface_getaddrinfo+0x78>
   17fe4:	68a9      	ldr	r1, [r5, #8]
   17fe6:	2902      	cmp	r1, #2
   17fe8:	f8c9 1000 	str.w	r1, [r9]
   17fec:	d006      	beq.n	17ffc <ip_interface_getaddrinfo+0x18c>
   17fee:	2a05      	cmp	r2, #5
   17ff0:	d0a2      	beq.n	17f38 <ip_interface_getaddrinfo+0xc8>
   17ff2:	2a0a      	cmp	r2, #10
   17ff4:	bf14      	ite	ne
   17ff6:	2201      	movne	r2, #1
   17ff8:	2202      	moveq	r2, #2
   17ffa:	e79d      	b.n	17f38 <ip_interface_getaddrinfo+0xc8>
   17ffc:	2102      	movs	r1, #2
   17ffe:	f8ca 1000 	str.w	r1, [sl]
   18002:	e7f4      	b.n	17fee <ip_interface_getaddrinfo+0x17e>
   18004:	4b11      	ldr	r3, [pc, #68]	; (1804c <ip_interface_getaddrinfo+0x1dc>)
   18006:	6818      	ldr	r0, [r3, #0]
   18008:	2800      	cmp	r0, #0
   1800a:	d0d1      	beq.n	17fb0 <ip_interface_getaddrinfo+0x140>
   1800c:	e7c9      	b.n	17fa2 <ip_interface_getaddrinfo+0x132>
   1800e:	4629      	mov	r1, r5
   18010:	2210      	movs	r2, #16
   18012:	f104 0014 	add.w	r0, r4, #20
   18016:	f005 f8bc 	bl	1d192 <memset>
   1801a:	e794      	b.n	17f46 <ip_interface_getaddrinfo+0xd6>
   1801c:	2023      	movs	r0, #35	; 0x23
   1801e:	e7c0      	b.n	17fa2 <ip_interface_getaddrinfo+0x132>
   18020:	202f      	movs	r0, #47	; 0x2f
   18022:	f7f9 fa3f 	bl	114a4 <bsd_os_errno_set>
   18026:	68a2      	ldr	r2, [r4, #8]
   18028:	3210      	adds	r2, #16
   1802a:	60a2      	str	r2, [r4, #8]
   1802c:	b917      	cbnz	r7, 18034 <ip_interface_getaddrinfo+0x1c4>
   1802e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18032:	e7b6      	b.n	17fa2 <ip_interface_getaddrinfo+0x132>
   18034:	6820      	ldr	r0, [r4, #0]
   18036:	2800      	cmp	r0, #0
   18038:	d0f9      	beq.n	1802e <ip_interface_getaddrinfo+0x1be>
   1803a:	465a      	mov	r2, fp
   1803c:	4639      	mov	r1, r7
   1803e:	f005 f87e 	bl	1d13e <memcpy>
   18042:	e7f4      	b.n	1802e <ip_interface_getaddrinfo+0x1be>
   18044:	20024e4a 	.word	0x20024e4a
   18048:	20020954 	.word	0x20020954
   1804c:	2002094c 	.word	0x2002094c
   18050:	20020944 	.word	0x20020944
   18054:	20020948 	.word	0x20020948
   18058:	20020950 	.word	0x20020950

0001805c <ip_interface_freeaddrinfo>:
   1805c:	b538      	push	{r3, r4, r5, lr}
   1805e:	4c0b      	ldr	r4, [pc, #44]	; (1808c <ip_interface_freeaddrinfo+0x30>)
   18060:	6823      	ldr	r3, [r4, #0]
   18062:	2b02      	cmp	r3, #2
   18064:	d000      	beq.n	18068 <ip_interface_freeaddrinfo+0xc>
   18066:	bd38      	pop	{r3, r4, r5, pc}
   18068:	b130      	cbz	r0, 18078 <ip_interface_freeaddrinfo+0x1c>
   1806a:	4605      	mov	r5, r0
   1806c:	6940      	ldr	r0, [r0, #20]
   1806e:	f7fb fac9 	bl	13604 <nrf_free>
   18072:	4628      	mov	r0, r5
   18074:	f7fb fac6 	bl	13604 <nrf_free>
   18078:	2300      	movs	r3, #0
   1807a:	4a05      	ldr	r2, [pc, #20]	; (18090 <ip_interface_freeaddrinfo+0x34>)
   1807c:	4905      	ldr	r1, [pc, #20]	; (18094 <ip_interface_freeaddrinfo+0x38>)
   1807e:	6023      	str	r3, [r4, #0]
   18080:	6013      	str	r3, [r2, #0]
   18082:	6808      	ldr	r0, [r1, #0]
   18084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18088:	f7fb bb1c 	b.w	136c4 <rpc_ip_client_data_free>
   1808c:	20020950 	.word	0x20020950
   18090:	2002094c 	.word	0x2002094c
   18094:	20020958 	.word	0x20020958

00018098 <rpc_ip_event_handler>:
   18098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1809c:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   180a0:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   180a4:	4605      	mov	r5, r0
   180a6:	b089      	sub	sp, #36	; 0x24
   180a8:	460e      	mov	r6, r1
   180aa:	68c0      	ldr	r0, [r0, #12]
   180ac:	d05e      	beq.n	1816c <rpc_ip_event_handler+0xd4>
   180ae:	0c04      	lsrs	r4, r0, #16
   180b0:	4620      	mov	r0, r4
   180b2:	f000 fb75 	bl	187a0 <interface_socket_from_handle_get>
   180b6:	f248 030d 	movw	r3, #32781	; 0x800d
   180ba:	429e      	cmp	r6, r3
   180bc:	4607      	mov	r7, r0
   180be:	46a0      	mov	r8, r4
   180c0:	d041      	beq.n	18146 <rpc_ip_event_handler+0xae>
   180c2:	2f00      	cmp	r7, #0
   180c4:	d04e      	beq.n	18164 <rpc_ip_event_handler+0xcc>
   180c6:	4640      	mov	r0, r8
   180c8:	4633      	mov	r3, r6
   180ca:	462a      	mov	r2, r5
   180cc:	4639      	mov	r1, r7
   180ce:	f7fb fead 	bl	13e2c <tls_rpc_ip_event_handler>
   180d2:	2800      	cmp	r0, #0
   180d4:	d042      	beq.n	1815c <rpc_ip_event_handler+0xc4>
   180d6:	f248 0307 	movw	r3, #32775	; 0x8007
   180da:	429e      	cmp	r6, r3
   180dc:	d961      	bls.n	181a2 <rpc_ip_event_handler+0x10a>
   180de:	f248 030c 	movw	r3, #32780	; 0x800c
   180e2:	429e      	cmp	r6, r3
   180e4:	f000 816b 	beq.w	183be <rpc_ip_event_handler+0x326>
   180e8:	f240 8106 	bls.w	182f8 <rpc_ip_event_handler+0x260>
   180ec:	f249 0302 	movw	r3, #36866	; 0x9002
   180f0:	429e      	cmp	r6, r3
   180f2:	f000 808c 	beq.w	1820e <rpc_ip_event_handler+0x176>
   180f6:	f249 0303 	movw	r3, #36867	; 0x9003
   180fa:	429e      	cmp	r6, r3
   180fc:	f000 8180 	beq.w	18400 <rpc_ip_event_handler+0x368>
   18100:	f249 0301 	movw	r3, #36865	; 0x9001
   18104:	429e      	cmp	r6, r3
   18106:	d12d      	bne.n	18164 <rpc_ip_event_handler+0xcc>
   18108:	683c      	ldr	r4, [r7, #0]
   1810a:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   1810e:	f000 81c3 	beq.w	18498 <rpc_ip_event_handler+0x400>
   18112:	68ab      	ldr	r3, [r5, #8]
   18114:	2b04      	cmp	r3, #4
   18116:	f200 81eb 	bhi.w	184f0 <rpc_ip_event_handler+0x458>
   1811a:	2400      	movs	r4, #0
   1811c:	4626      	mov	r6, r4
   1811e:	6829      	ldr	r1, [r5, #0]
   18120:	686a      	ldr	r2, [r5, #4]
   18122:	e9cd 6406 	strd	r6, r4, [sp, #24]
   18126:	e9cd 1204 	strd	r1, r2, [sp, #16]
   1812a:	69f8      	ldr	r0, [r7, #28]
   1812c:	a904      	add	r1, sp, #16
   1812e:	6803      	ldr	r3, [r0, #0]
   18130:	685b      	ldr	r3, [r3, #4]
   18132:	4798      	blx	r3
   18134:	3001      	adds	r0, #1
   18136:	f000 81cc 	beq.w	184d2 <rpc_ip_event_handler+0x43a>
   1813a:	683b      	ldr	r3, [r7, #0]
   1813c:	2000      	movs	r0, #0
   1813e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   18142:	603b      	str	r3, [r7, #0]
   18144:	e00b      	b.n	1815e <rpc_ip_event_handler+0xc6>
   18146:	f8df 9344 	ldr.w	r9, [pc, #836]	; 1848c <rpc_ip_event_handler+0x3f4>
   1814a:	682f      	ldr	r7, [r5, #0]
   1814c:	f8d9 3000 	ldr.w	r3, [r9]
   18150:	2b01      	cmp	r3, #1
   18152:	d015      	beq.n	18180 <rpc_ip_event_handler+0xe8>
   18154:	b117      	cbz	r7, 1815c <rpc_ip_event_handler+0xc4>
   18156:	4638      	mov	r0, r7
   18158:	f7fb fab4 	bl	136c4 <rpc_ip_client_data_free>
   1815c:	2000      	movs	r0, #0
   1815e:	b009      	add	sp, #36	; 0x24
   18160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18164:	6828      	ldr	r0, [r5, #0]
   18166:	2800      	cmp	r0, #0
   18168:	d1f6      	bne.n	18158 <rpc_ip_event_handler+0xc0>
   1816a:	e7f7      	b.n	1815c <rpc_ip_event_handler+0xc4>
   1816c:	f000 face 	bl	1870c <interface_from_internal_id_search>
   18170:	4680      	mov	r8, r0
   18172:	f000 fb15 	bl	187a0 <interface_socket_from_handle_get>
   18176:	4607      	mov	r7, r0
   18178:	4644      	mov	r4, r8
   1817a:	2f00      	cmp	r7, #0
   1817c:	d1a3      	bne.n	180c6 <rpc_ip_event_handler+0x2e>
   1817e:	e7f1      	b.n	18164 <rpc_ip_event_handler+0xcc>
   18180:	696b      	ldr	r3, [r5, #20]
   18182:	2b00      	cmp	r3, #0
   18184:	d048      	beq.n	18218 <rpc_ip_event_handler+0x180>
   18186:	2b10      	cmp	r3, #16
   18188:	bf96      	itet	ls
   1818a:	4aba      	ldrls	r2, [pc, #744]	; (18474 <rpc_ip_event_handler+0x3dc>)
   1818c:	212d      	movhi	r1, #45	; 0x2d
   1818e:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
   18192:	2302      	movs	r3, #2
   18194:	4ab8      	ldr	r2, [pc, #736]	; (18478 <rpc_ip_event_handler+0x3e0>)
   18196:	6011      	str	r1, [r2, #0]
   18198:	f8c9 3000 	str.w	r3, [r9]
   1819c:	2f00      	cmp	r7, #0
   1819e:	d1da      	bne.n	18156 <rpc_ip_event_handler+0xbe>
   181a0:	e7dc      	b.n	1815c <rpc_ip_event_handler+0xc4>
   181a2:	f248 0306 	movw	r3, #32774	; 0x8006
   181a6:	429e      	cmp	r6, r3
   181a8:	f080 80e6 	bcs.w	18378 <rpc_ip_event_handler+0x2e0>
   181ac:	f248 0302 	movw	r3, #32770	; 0x8002
   181b0:	429e      	cmp	r6, r3
   181b2:	f000 80c8 	beq.w	18346 <rpc_ip_event_handler+0x2ae>
   181b6:	d918      	bls.n	181ea <rpc_ip_event_handler+0x152>
   181b8:	f248 0303 	movw	r3, #32771	; 0x8003
   181bc:	429e      	cmp	r6, r3
   181be:	f000 8112 	beq.w	183e6 <rpc_ip_event_handler+0x34e>
   181c2:	f248 0305 	movw	r3, #32773	; 0x8005
   181c6:	429e      	cmp	r6, r3
   181c8:	d1cc      	bne.n	18164 <rpc_ip_event_handler+0xcc>
   181ca:	683b      	ldr	r3, [r7, #0]
   181cc:	b29b      	uxth	r3, r3
   181ce:	2b03      	cmp	r3, #3
   181d0:	d1c4      	bne.n	1815c <rpc_ip_event_handler+0xc4>
   181d2:	696b      	ldr	r3, [r5, #20]
   181d4:	2b00      	cmp	r3, #0
   181d6:	f000 817e 	beq.w	184d6 <rpc_ip_event_handler+0x43e>
   181da:	2b10      	cmp	r3, #16
   181dc:	f200 813b 	bhi.w	18456 <rpc_ip_event_handler+0x3be>
   181e0:	4aa4      	ldr	r2, [pc, #656]	; (18474 <rpc_ip_event_handler+0x3dc>)
   181e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   181e6:	607b      	str	r3, [r7, #4]
   181e8:	e7b8      	b.n	1815c <rpc_ip_event_handler+0xc4>
   181ea:	f248 0301 	movw	r3, #32769	; 0x8001
   181ee:	429e      	cmp	r6, r3
   181f0:	d1b8      	bne.n	18164 <rpc_ip_event_handler+0xcc>
   181f2:	683b      	ldr	r3, [r7, #0]
   181f4:	2b01      	cmp	r3, #1
   181f6:	d1b1      	bne.n	1815c <rpc_ip_event_handler+0xc4>
   181f8:	6968      	ldr	r0, [r5, #20]
   181fa:	2800      	cmp	r0, #0
   181fc:	f000 8173 	beq.w	184e6 <rpc_ip_event_handler+0x44e>
   18200:	2810      	cmp	r0, #16
   18202:	f200 8128 	bhi.w	18456 <rpc_ip_event_handler+0x3be>
   18206:	4b9b      	ldr	r3, [pc, #620]	; (18474 <rpc_ip_event_handler+0x3dc>)
   18208:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1820c:	e7eb      	b.n	181e6 <rpc_ip_event_handler+0x14e>
   1820e:	683b      	ldr	r3, [r7, #0]
   18210:	b29b      	uxth	r3, r3
   18212:	2b07      	cmp	r3, #7
   18214:	d1a2      	bne.n	1815c <rpc_ip_event_handler+0xc4>
   18216:	e790      	b.n	1813a <rpc_ip_event_handler+0xa2>
   18218:	4b98      	ldr	r3, [pc, #608]	; (1847c <rpc_ip_event_handler+0x3e4>)
   1821a:	601f      	str	r7, [r3, #0]
   1821c:	69ac      	ldr	r4, [r5, #24]
   1821e:	0163      	lsls	r3, r4, #5
   18220:	4618      	mov	r0, r3
   18222:	9303      	str	r3, [sp, #12]
   18224:	f7fb f9e4 	bl	135f0 <nrf_malloc>
   18228:	9002      	str	r0, [sp, #8]
   1822a:	2800      	cmp	r0, #0
   1822c:	f000 8103 	beq.w	18436 <rpc_ip_event_handler+0x39e>
   18230:	00e5      	lsls	r5, r4, #3
   18232:	1928      	adds	r0, r5, r4
   18234:	0080      	lsls	r0, r0, #2
   18236:	f7fb f9db 	bl	135f0 <nrf_malloc>
   1823a:	2800      	cmp	r0, #0
   1823c:	f000 810d 	beq.w	1845a <rpc_ip_event_handler+0x3c2>
   18240:	2c00      	cmp	r4, #0
   18242:	d078      	beq.n	18336 <rpc_ip_event_handler+0x29e>
   18244:	f105 0210 	add.w	r2, r5, #16
   18248:	1883      	adds	r3, r0, r2
   1824a:	9301      	str	r3, [sp, #4]
   1824c:	9b02      	ldr	r3, [sp, #8]
   1824e:	2404      	movs	r4, #4
   18250:	f8df a23c 	ldr.w	sl, [pc, #572]	; 18490 <rpc_ip_event_handler+0x3f8>
   18254:	f8df b23c 	ldr.w	fp, [pc, #572]	; 18494 <rpc_ip_event_handler+0x3fc>
   18258:	f100 0810 	add.w	r8, r0, #16
   1825c:	f103 0620 	add.w	r6, r3, #32
   18260:	e01d      	b.n	1829e <rpc_ip_event_handler+0x206>
   18262:	220a      	movs	r2, #10
   18264:	f848 2c0c 	str.w	r2, [r8, #-12]
   18268:	f04f 0224 	mov.w	r2, #36	; 0x24
   1826c:	4640      	mov	r0, r8
   1826e:	f808 2c10 	strb.w	r2, [r8, #-16]
   18272:	f828 3c08 	strh.w	r3, [r8, #-8]
   18276:	f856 2c10 	ldr.w	r2, [r6, #-16]
   1827a:	f004 ff60 	bl	1d13e <memcpy>
   1827e:	f856 3c10 	ldr.w	r3, [r6, #-16]
   18282:	f108 0808 	add.w	r8, r8, #8
   18286:	441c      	add	r4, r3
   18288:	193b      	adds	r3, r7, r4
   1828a:	f846 3c08 	str.w	r3, [r6, #-8]
   1828e:	9b01      	ldr	r3, [sp, #4]
   18290:	f846 6c04 	str.w	r6, [r6, #-4]
   18294:	4598      	cmp	r8, r3
   18296:	442c      	add	r4, r5
   18298:	f106 0620 	add.w	r6, r6, #32
   1829c:	d045      	beq.n	1832a <rpc_ip_event_handler+0x292>
   1829e:	593b      	ldr	r3, [r7, r4]
   182a0:	193a      	adds	r2, r7, r4
   182a2:	f846 3c20 	str.w	r3, [r6, #-32]
   182a6:	6853      	ldr	r3, [r2, #4]
   182a8:	f8da 1000 	ldr.w	r1, [sl]
   182ac:	2b02      	cmp	r3, #2
   182ae:	bf14      	ite	ne
   182b0:	2002      	movne	r0, #2
   182b2:	200a      	moveq	r0, #10
   182b4:	f8db 3000 	ldr.w	r3, [fp]
   182b8:	e946 0107 	strd	r0, r1, [r6, #-28]
   182bc:	f846 3c14 	str.w	r3, [r6, #-20]
   182c0:	8a10      	ldrh	r0, [r2, #16]
   182c2:	f1a8 0310 	sub.w	r3, r8, #16
   182c6:	f846 0c10 	str.w	r0, [r6, #-16]
   182ca:	8a55      	ldrh	r5, [r2, #18]
   182cc:	f846 3c0c 	str.w	r3, [r6, #-12]
   182d0:	4b6b      	ldr	r3, [pc, #428]	; (18480 <rpc_ip_event_handler+0x3e8>)
   182d2:	3414      	adds	r4, #20
   182d4:	2804      	cmp	r0, #4
   182d6:	eb07 0104 	add.w	r1, r7, r4
   182da:	881b      	ldrh	r3, [r3, #0]
   182dc:	d1c1      	bne.n	18262 <rpc_ip_event_handler+0x1ca>
   182de:	2210      	movs	r2, #16
   182e0:	2002      	movs	r0, #2
   182e2:	f828 3c08 	strh.w	r3, [r8, #-8]
   182e6:	f848 0c0c 	str.w	r0, [r8, #-12]
   182ea:	f808 2c10 	strb.w	r2, [r8, #-16]
   182ee:	f856 2c10 	ldr.w	r2, [r6, #-16]
   182f2:	f1a8 0004 	sub.w	r0, r8, #4
   182f6:	e7c0      	b.n	1827a <rpc_ip_event_handler+0x1e2>
   182f8:	f248 0308 	movw	r3, #32776	; 0x8008
   182fc:	429e      	cmp	r6, r3
   182fe:	d04e      	beq.n	1839e <rpc_ip_event_handler+0x306>
   18300:	f248 0309 	movw	r3, #32777	; 0x8009
   18304:	429e      	cmp	r6, r3
   18306:	f47f af2d 	bne.w	18164 <rpc_ip_event_handler+0xcc>
   1830a:	683b      	ldr	r3, [r7, #0]
   1830c:	b29b      	uxth	r3, r3
   1830e:	2b0d      	cmp	r3, #13
   18310:	f47f af24 	bne.w	1815c <rpc_ip_event_handler+0xc4>
   18314:	6968      	ldr	r0, [r5, #20]
   18316:	2800      	cmp	r0, #0
   18318:	f47f af72 	bne.w	18200 <rpc_ip_event_handler+0x168>
   1831c:	683b      	ldr	r3, [r7, #0]
   1831e:	0c1b      	lsrs	r3, r3, #16
   18320:	041b      	lsls	r3, r3, #16
   18322:	f043 030e 	orr.w	r3, r3, #14
   18326:	603b      	str	r3, [r7, #0]
   18328:	e719      	b.n	1815e <rpc_ip_event_handler+0xc6>
   1832a:	2200      	movs	r2, #0
   1832c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   18330:	440b      	add	r3, r1
   18332:	f843 2c04 	str.w	r2, [r3, #-4]
   18336:	2202      	movs	r2, #2
   18338:	4b52      	ldr	r3, [pc, #328]	; (18484 <rpc_ip_event_handler+0x3ec>)
   1833a:	f8c9 2000 	str.w	r2, [r9]
   1833e:	9a02      	ldr	r2, [sp, #8]
   18340:	2000      	movs	r0, #0
   18342:	601a      	str	r2, [r3, #0]
   18344:	e70b      	b.n	1815e <rpc_ip_event_handler+0xc6>
   18346:	683b      	ldr	r3, [r7, #0]
   18348:	0099      	lsls	r1, r3, #2
   1834a:	f57f af07 	bpl.w	1815c <rpc_ip_event_handler+0xc4>
   1834e:	683b      	ldr	r3, [r7, #0]
   18350:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   18354:	603b      	str	r3, [r7, #0]
   18356:	6968      	ldr	r0, [r5, #20]
   18358:	2800      	cmp	r0, #0
   1835a:	f000 80a2 	beq.w	184a2 <rpc_ip_event_handler+0x40a>
   1835e:	2810      	cmp	r0, #16
   18360:	bf8e      	itee	hi
   18362:	232d      	movhi	r3, #45	; 0x2d
   18364:	4b43      	ldrls	r3, [pc, #268]	; (18474 <rpc_ip_event_handler+0x3dc>)
   18366:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   1836a:	2000      	movs	r0, #0
   1836c:	607b      	str	r3, [r7, #4]
   1836e:	683b      	ldr	r3, [r7, #0]
   18370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   18374:	603b      	str	r3, [r7, #0]
   18376:	e6f2      	b.n	1815e <rpc_ip_event_handler+0xc6>
   18378:	683b      	ldr	r3, [r7, #0]
   1837a:	029a      	lsls	r2, r3, #10
   1837c:	f57f aeee 	bpl.w	1815c <rpc_ip_event_handler+0xc4>
   18380:	696b      	ldr	r3, [r5, #20]
   18382:	2b00      	cmp	r3, #0
   18384:	f000 809c 	beq.w	184c0 <rpc_ip_event_handler+0x428>
   18388:	2b6b      	cmp	r3, #107	; 0x6b
   1838a:	f47f af26 	bne.w	181da <rpc_ip_event_handler+0x142>
   1838e:	693b      	ldr	r3, [r7, #16]
   18390:	2b01      	cmp	r3, #1
   18392:	f000 80b1 	beq.w	184f8 <rpc_ip_event_handler+0x460>
   18396:	230c      	movs	r3, #12
   18398:	2000      	movs	r0, #0
   1839a:	607b      	str	r3, [r7, #4]
   1839c:	e6df      	b.n	1815e <rpc_ip_event_handler+0xc6>
   1839e:	683b      	ldr	r3, [r7, #0]
   183a0:	b29b      	uxth	r3, r3
   183a2:	2b06      	cmp	r3, #6
   183a4:	f47f aeda 	bne.w	1815c <rpc_ip_event_handler+0xc4>
   183a8:	6968      	ldr	r0, [r5, #20]
   183aa:	2800      	cmp	r0, #0
   183ac:	f47f af28 	bne.w	18200 <rpc_ip_event_handler+0x168>
   183b0:	683b      	ldr	r3, [r7, #0]
   183b2:	0c1b      	lsrs	r3, r3, #16
   183b4:	041b      	lsls	r3, r3, #16
   183b6:	f043 0307 	orr.w	r3, r3, #7
   183ba:	603b      	str	r3, [r7, #0]
   183bc:	e6cf      	b.n	1815e <rpc_ip_event_handler+0xc6>
   183be:	683b      	ldr	r3, [r7, #0]
   183c0:	b29b      	uxth	r3, r3
   183c2:	2b08      	cmp	r3, #8
   183c4:	f47f aeca 	bne.w	1815c <rpc_ip_event_handler+0xc4>
   183c8:	696b      	ldr	r3, [r5, #20]
   183ca:	2b00      	cmp	r3, #0
   183cc:	f47f af05 	bne.w	181da <rpc_ip_event_handler+0x142>
   183d0:	4b2d      	ldr	r3, [pc, #180]	; (18488 <rpc_ip_event_handler+0x3f0>)
   183d2:	2001      	movs	r0, #1
   183d4:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
   183d8:	683b      	ldr	r3, [r7, #0]
   183da:	0c1b      	lsrs	r3, r3, #16
   183dc:	041b      	lsls	r3, r3, #16
   183de:	f043 0309 	orr.w	r3, r3, #9
   183e2:	603b      	str	r3, [r7, #0]
   183e4:	e6bb      	b.n	1815e <rpc_ip_event_handler+0xc6>
   183e6:	683b      	ldr	r3, [r7, #0]
   183e8:	025b      	lsls	r3, r3, #9
   183ea:	f57f aeb7 	bpl.w	1815c <rpc_ip_event_handler+0xc4>
   183ee:	6968      	ldr	r0, [r5, #20]
   183f0:	2800      	cmp	r0, #0
   183f2:	f47f af05 	bne.w	18200 <rpc_ip_event_handler+0x168>
   183f6:	683b      	ldr	r3, [r7, #0]
   183f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   183fc:	603b      	str	r3, [r7, #0]
   183fe:	e6ae      	b.n	1815e <rpc_ip_event_handler+0xc6>
   18400:	683b      	ldr	r3, [r7, #0]
   18402:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   18406:	603b      	str	r3, [r7, #0]
   18408:	683b      	ldr	r3, [r7, #0]
   1840a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1840e:	603b      	str	r3, [r7, #0]
   18410:	683b      	ldr	r3, [r7, #0]
   18412:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   18416:	603b      	str	r3, [r7, #0]
   18418:	692b      	ldr	r3, [r5, #16]
   1841a:	2b6c      	cmp	r3, #108	; 0x6c
   1841c:	d021      	beq.n	18462 <rpc_ip_event_handler+0x3ca>
   1841e:	2b10      	cmp	r3, #16
   18420:	bf8c      	ite	hi
   18422:	232d      	movhi	r3, #45	; 0x2d
   18424:	4a13      	ldrls	r2, [pc, #76]	; (18474 <rpc_ip_event_handler+0x3dc>)
   18426:	f04f 0000 	mov.w	r0, #0
   1842a:	bf98      	it	ls
   1842c:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   18430:	607b      	str	r3, [r7, #4]
   18432:	60bb      	str	r3, [r7, #8]
   18434:	e693      	b.n	1815e <rpc_ip_event_handler+0xc6>
   18436:	f7fb f8e5 	bl	13604 <nrf_free>
   1843a:	200c      	movs	r0, #12
   1843c:	2302      	movs	r3, #2
   1843e:	490e      	ldr	r1, [pc, #56]	; (18478 <rpc_ip_event_handler+0x3e0>)
   18440:	4a10      	ldr	r2, [pc, #64]	; (18484 <rpc_ip_event_handler+0x3ec>)
   18442:	6008      	str	r0, [r1, #0]
   18444:	682f      	ldr	r7, [r5, #0]
   18446:	9902      	ldr	r1, [sp, #8]
   18448:	6011      	str	r1, [r2, #0]
   1844a:	f8c9 3000 	str.w	r3, [r9]
   1844e:	2f00      	cmp	r7, #0
   18450:	f47f ae81 	bne.w	18156 <rpc_ip_event_handler+0xbe>
   18454:	e682      	b.n	1815c <rpc_ip_event_handler+0xc4>
   18456:	232d      	movs	r3, #45	; 0x2d
   18458:	e6c5      	b.n	181e6 <rpc_ip_event_handler+0x14e>
   1845a:	220c      	movs	r2, #12
   1845c:	4b06      	ldr	r3, [pc, #24]	; (18478 <rpc_ip_event_handler+0x3e0>)
   1845e:	601a      	str	r2, [r3, #0]
   18460:	e769      	b.n	18336 <rpc_ip_event_handler+0x29e>
   18462:	2239      	movs	r2, #57	; 0x39
   18464:	683b      	ldr	r3, [r7, #0]
   18466:	2000      	movs	r0, #0
   18468:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   1846c:	603b      	str	r3, [r7, #0]
   1846e:	607a      	str	r2, [r7, #4]
   18470:	60ba      	str	r2, [r7, #8]
   18472:	e674      	b.n	1815e <rpc_ip_event_handler+0xc6>
   18474:	0001f35c 	.word	0x0001f35c
   18478:	2002094c 	.word	0x2002094c
   1847c:	20020958 	.word	0x20020958
   18480:	20024e4a 	.word	0x20024e4a
   18484:	20020954 	.word	0x20020954
   18488:	2002095c 	.word	0x2002095c
   1848c:	20020950 	.word	0x20020950
   18490:	20020948 	.word	0x20020948
   18494:	20020944 	.word	0x20020944
   18498:	6828      	ldr	r0, [r5, #0]
   1849a:	f7fb f913 	bl	136c4 <rpc_ip_client_data_free>
   1849e:	4620      	mov	r0, r4
   184a0:	e65d      	b.n	1815e <rpc_ip_event_handler+0xc6>
   184a2:	683b      	ldr	r3, [r7, #0]
   184a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   184a8:	603b      	str	r3, [r7, #0]
   184aa:	683b      	ldr	r3, [r7, #0]
   184ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   184b0:	603b      	str	r3, [r7, #0]
   184b2:	683b      	ldr	r3, [r7, #0]
   184b4:	0c1b      	lsrs	r3, r3, #16
   184b6:	041b      	lsls	r3, r3, #16
   184b8:	f043 0305 	orr.w	r3, r3, #5
   184bc:	603b      	str	r3, [r7, #0]
   184be:	e64e      	b.n	1815e <rpc_ip_event_handler+0xc6>
   184c0:	683b      	ldr	r3, [r7, #0]
   184c2:	4a28      	ldr	r2, [pc, #160]	; (18564 <rpc_ip_event_handler+0x4cc>)
   184c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   184c8:	603b      	str	r3, [r7, #0]
   184ca:	2001      	movs	r0, #1
   184cc:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   184d0:	e645      	b.n	1815e <rpc_ip_event_handler+0xc6>
   184d2:	2002      	movs	r0, #2
   184d4:	e643      	b.n	1815e <rpc_ip_event_handler+0xc6>
   184d6:	683b      	ldr	r3, [r7, #0]
   184d8:	2000      	movs	r0, #0
   184da:	0c1b      	lsrs	r3, r3, #16
   184dc:	041b      	lsls	r3, r3, #16
   184de:	f043 0304 	orr.w	r3, r3, #4
   184e2:	603b      	str	r3, [r7, #0]
   184e4:	e63b      	b.n	1815e <rpc_ip_event_handler+0xc6>
   184e6:	2302      	movs	r3, #2
   184e8:	603b      	str	r3, [r7, #0]
   184ea:	69ab      	ldr	r3, [r5, #24]
   184ec:	61bb      	str	r3, [r7, #24]
   184ee:	e636      	b.n	1815e <rpc_ip_event_handler+0xc6>
   184f0:	8a6c      	ldrh	r4, [r5, #18]
   184f2:	b94c      	cbnz	r4, 18508 <rpc_ip_event_handler+0x470>
   184f4:	4626      	mov	r6, r4
   184f6:	e612      	b.n	1811e <rpc_ip_event_handler+0x86>
   184f8:	220c      	movs	r2, #12
   184fa:	683b      	ldr	r3, [r7, #0]
   184fc:	2000      	movs	r0, #0
   184fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   18502:	603b      	str	r3, [r7, #0]
   18504:	607a      	str	r2, [r7, #4]
   18506:	e62a      	b.n	1815e <rpc_ip_event_handler+0xc6>
   18508:	2024      	movs	r0, #36	; 0x24
   1850a:	f7fb f871 	bl	135f0 <nrf_malloc>
   1850e:	4606      	mov	r6, r0
   18510:	b158      	cbz	r0, 1852a <rpc_ip_event_handler+0x492>
   18512:	8a6a      	ldrh	r2, [r5, #18]
   18514:	2a10      	cmp	r2, #16
   18516:	d018      	beq.n	1854a <rpc_ip_event_handler+0x4b2>
   18518:	2a04      	cmp	r2, #4
   1851a:	d00a      	beq.n	18532 <rpc_ip_event_handler+0x49a>
   1851c:	6828      	ldr	r0, [r5, #0]
   1851e:	f7fb f8d1 	bl	136c4 <rpc_ip_client_data_free>
   18522:	4630      	mov	r0, r6
   18524:	f7fb f86e 	bl	13604 <nrf_free>
   18528:	e618      	b.n	1815c <rpc_ip_event_handler+0xc4>
   1852a:	6828      	ldr	r0, [r5, #0]
   1852c:	f7fb f8ca 	bl	136c4 <rpc_ip_client_data_free>
   18530:	e614      	b.n	1815c <rpc_ip_event_handler+0xc4>
   18532:	2302      	movs	r3, #2
   18534:	2410      	movs	r4, #16
   18536:	6043      	str	r3, [r0, #4]
   18538:	7004      	strb	r4, [r0, #0]
   1853a:	8a2b      	ldrh	r3, [r5, #16]
   1853c:	f105 0114 	add.w	r1, r5, #20
   18540:	8103      	strh	r3, [r0, #8]
   18542:	300c      	adds	r0, #12
   18544:	f004 fdfb 	bl	1d13e <memcpy>
   18548:	e5e9      	b.n	1811e <rpc_ip_event_handler+0x86>
   1854a:	230a      	movs	r3, #10
   1854c:	2424      	movs	r4, #36	; 0x24
   1854e:	6043      	str	r3, [r0, #4]
   18550:	7004      	strb	r4, [r0, #0]
   18552:	8a2b      	ldrh	r3, [r5, #16]
   18554:	f105 0114 	add.w	r1, r5, #20
   18558:	8103      	strh	r3, [r0, #8]
   1855a:	3010      	adds	r0, #16
   1855c:	f004 fdef 	bl	1d13e <memcpy>
   18560:	e5dd      	b.n	1811e <rpc_ip_event_handler+0x86>
   18562:	bf00      	nop
   18564:	2002095c 	.word	0x2002095c

00018568 <interface_init>:
   18568:	b508      	push	{r3, lr}
   1856a:	f44f 7290 	mov.w	r2, #288	; 0x120
   1856e:	2100      	movs	r1, #0
   18570:	4802      	ldr	r0, [pc, #8]	; (1857c <interface_init+0x14>)
   18572:	f004 fe0e 	bl	1d192 <memset>
   18576:	2000      	movs	r0, #0
   18578:	bd08      	pop	{r3, pc}
   1857a:	bf00      	nop
   1857c:	200265c8 	.word	0x200265c8

00018580 <interface_socket_allocate>:
   18580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18582:	4b29      	ldr	r3, [pc, #164]	; (18628 <interface_socket_allocate+0xa8>)
   18584:	4606      	mov	r6, r0
   18586:	681d      	ldr	r5, [r3, #0]
   18588:	4608      	mov	r0, r1
   1858a:	b1e5      	cbz	r5, 185c6 <interface_socket_allocate+0x46>
   1858c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1858e:	2c00      	cmp	r4, #0
   18590:	d03d      	beq.n	1860e <interface_socket_allocate+0x8e>
   18592:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   18594:	2c00      	cmp	r4, #0
   18596:	d03c      	beq.n	18612 <interface_socket_allocate+0x92>
   18598:	6edc      	ldr	r4, [r3, #108]	; 0x6c
   1859a:	2c00      	cmp	r4, #0
   1859c:	d03b      	beq.n	18616 <interface_socket_allocate+0x96>
   1859e:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   185a2:	b179      	cbz	r1, 185c4 <interface_socket_allocate+0x44>
   185a4:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
   185a8:	b3b9      	cbz	r1, 1861a <interface_socket_allocate+0x9a>
   185aa:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
   185ae:	b3b1      	cbz	r1, 1861e <interface_socket_allocate+0x9e>
   185b0:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
   185b4:	b3a9      	cbz	r1, 18622 <interface_socket_allocate+0xa2>
   185b6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   185ba:	200c      	movs	r0, #12
   185bc:	f7f8 ff72 	bl	114a4 <bsd_os_errno_set>
   185c0:	4628      	mov	r0, r5
   185c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   185c4:	2504      	movs	r5, #4
   185c6:	f04f 0c01 	mov.w	ip, #1
   185ca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   185ce:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   185d2:	00a4      	lsls	r4, r4, #2
   185d4:	f843 c004 	str.w	ip, [r3, r4]
   185d8:	441c      	add	r4, r3
   185da:	4611      	mov	r1, r2
   185dc:	61a7      	str	r7, [r4, #24]
   185de:	4622      	mov	r2, r4
   185e0:	f001 ffde 	bl	1a5a0 <packet_handler_create>
   185e4:	4603      	mov	r3, r0
   185e6:	61e0      	str	r0, [r4, #28]
   185e8:	b158      	cbz	r0, 18602 <interface_socket_allocate+0x82>
   185ea:	681b      	ldr	r3, [r3, #0]
   185ec:	681b      	ldr	r3, [r3, #0]
   185ee:	4798      	blx	r3
   185f0:	b910      	cbnz	r0, 185f8 <interface_socket_allocate+0x78>
   185f2:	6034      	str	r4, [r6, #0]
   185f4:	4628      	mov	r0, r5
   185f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   185f8:	69e0      	ldr	r0, [r4, #28]
   185fa:	f001 fff1 	bl	1a5e0 <packet_handler_delete>
   185fe:	2300      	movs	r3, #0
   18600:	61e3      	str	r3, [r4, #28]
   18602:	4620      	mov	r0, r4
   18604:	2224      	movs	r2, #36	; 0x24
   18606:	2100      	movs	r1, #0
   18608:	f004 fdc3 	bl	1d192 <memset>
   1860c:	e7d3      	b.n	185b6 <interface_socket_allocate+0x36>
   1860e:	2501      	movs	r5, #1
   18610:	e7d9      	b.n	185c6 <interface_socket_allocate+0x46>
   18612:	2502      	movs	r5, #2
   18614:	e7d7      	b.n	185c6 <interface_socket_allocate+0x46>
   18616:	2503      	movs	r5, #3
   18618:	e7d5      	b.n	185c6 <interface_socket_allocate+0x46>
   1861a:	2505      	movs	r5, #5
   1861c:	e7d3      	b.n	185c6 <interface_socket_allocate+0x46>
   1861e:	2506      	movs	r5, #6
   18620:	e7d1      	b.n	185c6 <interface_socket_allocate+0x46>
   18622:	2507      	movs	r5, #7
   18624:	e7cf      	b.n	185c6 <interface_socket_allocate+0x46>
   18626:	bf00      	nop
   18628:	200265c8 	.word	0x200265c8

0001862c <interface_socket_free>:
   1862c:	2807      	cmp	r0, #7
   1862e:	d900      	bls.n	18632 <interface_socket_free+0x6>
   18630:	4770      	bx	lr
   18632:	b510      	push	{r4, lr}
   18634:	4c07      	ldr	r4, [pc, #28]	; (18654 <interface_socket_free+0x28>)
   18636:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   1863a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   1863e:	69e0      	ldr	r0, [r4, #28]
   18640:	b108      	cbz	r0, 18646 <interface_socket_free+0x1a>
   18642:	f001 ffcd 	bl	1a5e0 <packet_handler_delete>
   18646:	4620      	mov	r0, r4
   18648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1864c:	2224      	movs	r2, #36	; 0x24
   1864e:	2100      	movs	r1, #0
   18650:	f004 bd9f 	b.w	1d192 <memset>
   18654:	200265c8 	.word	0x200265c8

00018658 <interface_socket_packet_handler_update>:
   18658:	2807      	cmp	r0, #7
   1865a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1865e:	d81e      	bhi.n	1869e <interface_socket_packet_handler_update+0x46>
   18660:	ea4f 08c0 	mov.w	r8, r0, lsl #3
   18664:	4e17      	ldr	r6, [pc, #92]	; (186c4 <interface_socket_packet_handler_update+0x6c>)
   18666:	eb08 0300 	add.w	r3, r8, r0
   1866a:	009b      	lsls	r3, r3, #2
   1866c:	58f4      	ldr	r4, [r6, r3]
   1866e:	18f5      	adds	r5, r6, r3
   18670:	b1ac      	cbz	r4, 1869e <interface_socket_packet_handler_update+0x46>
   18672:	460b      	mov	r3, r1
   18674:	4604      	mov	r4, r0
   18676:	4611      	mov	r1, r2
   18678:	4618      	mov	r0, r3
   1867a:	462a      	mov	r2, r5
   1867c:	f8d5 901c 	ldr.w	r9, [r5, #28]
   18680:	f001 ff8e 	bl	1a5a0 <packet_handler_create>
   18684:	61e8      	str	r0, [r5, #28]
   18686:	b1d0      	cbz	r0, 186be <interface_socket_packet_handler_update+0x66>
   18688:	6803      	ldr	r3, [r0, #0]
   1868a:	681b      	ldr	r3, [r3, #0]
   1868c:	4798      	blx	r3
   1868e:	4607      	mov	r7, r0
   18690:	b948      	cbnz	r0, 186a6 <interface_socket_packet_handler_update+0x4e>
   18692:	4648      	mov	r0, r9
   18694:	f001 ffa4 	bl	1a5e0 <packet_handler_delete>
   18698:	4638      	mov	r0, r7
   1869a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1869e:	2705      	movs	r7, #5
   186a0:	4638      	mov	r0, r7
   186a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   186a6:	69e8      	ldr	r0, [r5, #28]
   186a8:	f001 ff9a 	bl	1a5e0 <packet_handler_delete>
   186ac:	eb08 0004 	add.w	r0, r8, r4
   186b0:	eb06 0680 	add.w	r6, r6, r0, lsl #2
   186b4:	f8c6 901c 	str.w	r9, [r6, #28]
   186b8:	4638      	mov	r0, r7
   186ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   186be:	2704      	movs	r7, #4
   186c0:	e7f4      	b.n	186ac <interface_socket_packet_handler_update+0x54>
   186c2:	bf00      	nop
   186c4:	200265c8 	.word	0x200265c8

000186c8 <interface_socket_wait>:
   186c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   186ca:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   186ce:	4c0e      	ldr	r4, [pc, #56]	; (18708 <interface_socket_wait+0x40>)
   186d0:	0080      	lsls	r0, r0, #2
   186d2:	5825      	ldr	r5, [r4, r0]
   186d4:	b083      	sub	sp, #12
   186d6:	4015      	ands	r5, r2
   186d8:	428d      	cmp	r5, r1
   186da:	9301      	str	r3, [sp, #4]
   186dc:	4404      	add	r4, r0
   186de:	d010      	beq.n	18702 <interface_socket_wait+0x3a>
   186e0:	6863      	ldr	r3, [r4, #4]
   186e2:	b973      	cbnz	r3, 18702 <interface_socket_wait+0x3a>
   186e4:	460f      	mov	r7, r1
   186e6:	4616      	mov	r6, r2
   186e8:	4625      	mov	r5, r4
   186ea:	e006      	b.n	186fa <interface_socket_wait+0x32>
   186ec:	686b      	ldr	r3, [r5, #4]
   186ee:	b943      	cbnz	r3, 18702 <interface_socket_wait+0x3a>
   186f0:	a901      	add	r1, sp, #4
   186f2:	4620      	mov	r0, r4
   186f4:	f7f8 fe42 	bl	1137c <bsd_os_timedwait>
   186f8:	b920      	cbnz	r0, 18704 <interface_socket_wait+0x3c>
   186fa:	682b      	ldr	r3, [r5, #0]
   186fc:	4033      	ands	r3, r6
   186fe:	42bb      	cmp	r3, r7
   18700:	d1f4      	bne.n	186ec <interface_socket_wait+0x24>
   18702:	2000      	movs	r0, #0
   18704:	b003      	add	sp, #12
   18706:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18708:	200265c8 	.word	0x200265c8

0001870c <interface_from_internal_id_search>:
   1870c:	4b23      	ldr	r3, [pc, #140]	; (1879c <interface_from_internal_id_search+0x90>)
   1870e:	681a      	ldr	r2, [r3, #0]
   18710:	b112      	cbz	r2, 18718 <interface_from_internal_id_search+0xc>
   18712:	699a      	ldr	r2, [r3, #24]
   18714:	4282      	cmp	r2, r0
   18716:	d032      	beq.n	1877e <interface_from_internal_id_search+0x72>
   18718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1871a:	b112      	cbz	r2, 18722 <interface_from_internal_id_search+0x16>
   1871c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1871e:	4282      	cmp	r2, r0
   18720:	d02f      	beq.n	18782 <interface_from_internal_id_search+0x76>
   18722:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   18724:	b112      	cbz	r2, 1872c <interface_from_internal_id_search+0x20>
   18726:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   18728:	4282      	cmp	r2, r0
   1872a:	d02c      	beq.n	18786 <interface_from_internal_id_search+0x7a>
   1872c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   1872e:	b11a      	cbz	r2, 18738 <interface_from_internal_id_search+0x2c>
   18730:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   18734:	4282      	cmp	r2, r0
   18736:	d028      	beq.n	1878a <interface_from_internal_id_search+0x7e>
   18738:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   1873c:	b11a      	cbz	r2, 18746 <interface_from_internal_id_search+0x3a>
   1873e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
   18742:	4282      	cmp	r2, r0
   18744:	d023      	beq.n	1878e <interface_from_internal_id_search+0x82>
   18746:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   1874a:	b11a      	cbz	r2, 18754 <interface_from_internal_id_search+0x48>
   1874c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   18750:	4282      	cmp	r2, r0
   18752:	d01e      	beq.n	18792 <interface_from_internal_id_search+0x86>
   18754:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
   18758:	b11a      	cbz	r2, 18762 <interface_from_internal_id_search+0x56>
   1875a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   1875e:	4282      	cmp	r2, r0
   18760:	d019      	beq.n	18796 <interface_from_internal_id_search+0x8a>
   18762:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
   18766:	b13a      	cbz	r2, 18778 <interface_from_internal_id_search+0x6c>
   18768:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   1876c:	4283      	cmp	r3, r0
   1876e:	bf14      	ite	ne
   18770:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   18774:	2007      	moveq	r0, #7
   18776:	4770      	bx	lr
   18778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1877c:	4770      	bx	lr
   1877e:	2000      	movs	r0, #0
   18780:	4770      	bx	lr
   18782:	2001      	movs	r0, #1
   18784:	4770      	bx	lr
   18786:	2002      	movs	r0, #2
   18788:	4770      	bx	lr
   1878a:	2003      	movs	r0, #3
   1878c:	4770      	bx	lr
   1878e:	2004      	movs	r0, #4
   18790:	4770      	bx	lr
   18792:	2005      	movs	r0, #5
   18794:	4770      	bx	lr
   18796:	2006      	movs	r0, #6
   18798:	4770      	bx	lr
   1879a:	bf00      	nop
   1879c:	200265c8 	.word	0x200265c8

000187a0 <interface_socket_from_handle_get>:
   187a0:	2807      	cmp	r0, #7
   187a2:	d807      	bhi.n	187b4 <interface_socket_from_handle_get+0x14>
   187a4:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   187a8:	4b03      	ldr	r3, [pc, #12]	; (187b8 <interface_socket_from_handle_get+0x18>)
   187aa:	0080      	lsls	r0, r0, #2
   187ac:	581a      	ldr	r2, [r3, r0]
   187ae:	b10a      	cbz	r2, 187b4 <interface_socket_from_handle_get+0x14>
   187b0:	4418      	add	r0, r3
   187b2:	4770      	bx	lr
   187b4:	2000      	movs	r0, #0
   187b6:	4770      	bx	lr
   187b8:	200265c8 	.word	0x200265c8

000187bc <interface_socket_event_get>:
   187bc:	b119      	cbz	r1, 187c6 <interface_socket_event_get+0xa>
   187be:	2807      	cmp	r0, #7
   187c0:	d902      	bls.n	187c8 <interface_socket_event_get+0xc>
   187c2:	2310      	movs	r3, #16
   187c4:	600b      	str	r3, [r1, #0]
   187c6:	4770      	bx	lr
   187c8:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   187cc:	4b07      	ldr	r3, [pc, #28]	; (187ec <interface_socket_event_get+0x30>)
   187ce:	0080      	lsls	r0, r0, #2
   187d0:	581a      	ldr	r2, [r3, r0]
   187d2:	2a00      	cmp	r2, #0
   187d4:	d0f5      	beq.n	187c2 <interface_socket_event_get+0x6>
   187d6:	581b      	ldr	r3, [r3, r0]
   187d8:	0c1b      	lsrs	r3, r3, #16
   187da:	f003 020a 	and.w	r2, r3, #10
   187de:	2a0a      	cmp	r2, #10
   187e0:	bf14      	ite	ne
   187e2:	f003 030f 	andne.w	r3, r3, #15
   187e6:	f003 030d 	andeq.w	r3, r3, #13
   187ea:	e7eb      	b.n	187c4 <interface_socket_event_get+0x8>
   187ec:	200265c8 	.word	0x200265c8

000187f0 <interface_socket_setopt>:
   187f0:	2807      	cmp	r0, #7
   187f2:	b570      	push	{r4, r5, r6, lr}
   187f4:	d827      	bhi.n	18846 <interface_socket_setopt+0x56>
   187f6:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   187fa:	4c16      	ldr	r4, [pc, #88]	; (18854 <interface_socket_setopt+0x64>)
   187fc:	0080      	lsls	r0, r0, #2
   187fe:	5825      	ldr	r5, [r4, r0]
   18800:	b30d      	cbz	r5, 18846 <interface_socket_setopt+0x56>
   18802:	2901      	cmp	r1, #1
   18804:	d119      	bne.n	1883a <interface_socket_setopt+0x4a>
   18806:	2a14      	cmp	r2, #20
   18808:	d117      	bne.n	1883a <interface_socket_setopt+0x4a>
   1880a:	b183      	cbz	r3, 1882e <interface_socket_setopt+0x3e>
   1880c:	9a04      	ldr	r2, [sp, #16]
   1880e:	2a08      	cmp	r2, #8
   18810:	d10d      	bne.n	1882e <interface_socket_setopt+0x3e>
   18812:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   18816:	685a      	ldr	r2, [r3, #4]
   18818:	4e0f      	ldr	r6, [pc, #60]	; (18858 <interface_socket_setopt+0x68>)
   1881a:	6819      	ldr	r1, [r3, #0]
   1881c:	fba6 2302 	umull	r2, r3, r6, r2
   18820:	099b      	lsrs	r3, r3, #6
   18822:	fb05 3301 	mla	r3, r5, r1, r3
   18826:	4420      	add	r0, r4
   18828:	6203      	str	r3, [r0, #32]
   1882a:	2000      	movs	r0, #0
   1882c:	bd70      	pop	{r4, r5, r6, pc}
   1882e:	2016      	movs	r0, #22
   18830:	f7f8 fe38 	bl	114a4 <bsd_os_errno_set>
   18834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18838:	bd70      	pop	{r4, r5, r6, pc}
   1883a:	202a      	movs	r0, #42	; 0x2a
   1883c:	f7f8 fe32 	bl	114a4 <bsd_os_errno_set>
   18840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18844:	bd70      	pop	{r4, r5, r6, pc}
   18846:	2009      	movs	r0, #9
   18848:	f7f8 fe2c 	bl	114a4 <bsd_os_errno_set>
   1884c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18850:	bd70      	pop	{r4, r5, r6, pc}
   18852:	bf00      	nop
   18854:	200265c8 	.word	0x200265c8
   18858:	10624dd3 	.word	0x10624dd3

0001885c <interface_socket_getopt>:
   1885c:	b570      	push	{r4, r5, r6, lr}
   1885e:	2807      	cmp	r0, #7
   18860:	9d04      	ldr	r5, [sp, #16]
   18862:	d821      	bhi.n	188a8 <interface_socket_getopt+0x4c>
   18864:	4c13      	ldr	r4, [pc, #76]	; (188b4 <interface_socket_getopt+0x58>)
   18866:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   1886a:	0080      	lsls	r0, r0, #2
   1886c:	5826      	ldr	r6, [r4, r0]
   1886e:	4404      	add	r4, r0
   18870:	b1d6      	cbz	r6, 188a8 <interface_socket_getopt+0x4c>
   18872:	2901      	cmp	r1, #1
   18874:	d112      	bne.n	1889c <interface_socket_getopt+0x40>
   18876:	2a04      	cmp	r2, #4
   18878:	d110      	bne.n	1889c <interface_socket_getopt+0x40>
   1887a:	b14b      	cbz	r3, 18890 <interface_socket_getopt+0x34>
   1887c:	b145      	cbz	r5, 18890 <interface_socket_getopt+0x34>
   1887e:	682a      	ldr	r2, [r5, #0]
   18880:	2a04      	cmp	r2, #4
   18882:	d105      	bne.n	18890 <interface_socket_getopt+0x34>
   18884:	2200      	movs	r2, #0
   18886:	6861      	ldr	r1, [r4, #4]
   18888:	4610      	mov	r0, r2
   1888a:	6019      	str	r1, [r3, #0]
   1888c:	6062      	str	r2, [r4, #4]
   1888e:	bd70      	pop	{r4, r5, r6, pc}
   18890:	2016      	movs	r0, #22
   18892:	f7f8 fe07 	bl	114a4 <bsd_os_errno_set>
   18896:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1889a:	bd70      	pop	{r4, r5, r6, pc}
   1889c:	202a      	movs	r0, #42	; 0x2a
   1889e:	f7f8 fe01 	bl	114a4 <bsd_os_errno_set>
   188a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   188a6:	bd70      	pop	{r4, r5, r6, pc}
   188a8:	2009      	movs	r0, #9
   188aa:	f7f8 fdfb 	bl	114a4 <bsd_os_errno_set>
   188ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   188b2:	bd70      	pop	{r4, r5, r6, pc}
   188b4:	200265c8 	.word	0x200265c8

000188b8 <interface_shutdown>:
   188b8:	4b15      	ldr	r3, [pc, #84]	; (18910 <interface_shutdown+0x58>)
   188ba:	681a      	ldr	r2, [r3, #0]
   188bc:	b10a      	cbz	r2, 188c2 <interface_shutdown+0xa>
   188be:	2270      	movs	r2, #112	; 0x70
   188c0:	605a      	str	r2, [r3, #4]
   188c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   188c4:	b10a      	cbz	r2, 188ca <interface_shutdown+0x12>
   188c6:	2270      	movs	r2, #112	; 0x70
   188c8:	629a      	str	r2, [r3, #40]	; 0x28
   188ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   188cc:	b10a      	cbz	r2, 188d2 <interface_shutdown+0x1a>
   188ce:	2270      	movs	r2, #112	; 0x70
   188d0:	64da      	str	r2, [r3, #76]	; 0x4c
   188d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   188d4:	b10a      	cbz	r2, 188da <interface_shutdown+0x22>
   188d6:	2270      	movs	r2, #112	; 0x70
   188d8:	671a      	str	r2, [r3, #112]	; 0x70
   188da:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   188de:	b112      	cbz	r2, 188e6 <interface_shutdown+0x2e>
   188e0:	2270      	movs	r2, #112	; 0x70
   188e2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   188e6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   188ea:	b112      	cbz	r2, 188f2 <interface_shutdown+0x3a>
   188ec:	2270      	movs	r2, #112	; 0x70
   188ee:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
   188f2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
   188f6:	b112      	cbz	r2, 188fe <interface_shutdown+0x46>
   188f8:	2270      	movs	r2, #112	; 0x70
   188fa:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
   188fe:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
   18902:	b112      	cbz	r2, 1890a <interface_shutdown+0x52>
   18904:	2270      	movs	r2, #112	; 0x70
   18906:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1890a:	2000      	movs	r0, #0
   1890c:	4770      	bx	lr
   1890e:	bf00      	nop
   18910:	200265c8 	.word	0x200265c8

00018914 <interface_socket_fcntl>:
   18914:	2807      	cmp	r0, #7
   18916:	b510      	push	{r4, lr}
   18918:	d818      	bhi.n	1894c <interface_socket_fcntl+0x38>
   1891a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   1891e:	4c11      	ldr	r4, [pc, #68]	; (18964 <interface_socket_fcntl+0x50>)
   18920:	0083      	lsls	r3, r0, #2
   18922:	58e0      	ldr	r0, [r4, r3]
   18924:	b190      	cbz	r0, 1894c <interface_socket_fcntl+0x38>
   18926:	2901      	cmp	r1, #1
   18928:	d005      	beq.n	18936 <interface_socket_fcntl+0x22>
   1892a:	2902      	cmp	r1, #2
   1892c:	d114      	bne.n	18958 <interface_socket_fcntl+0x44>
   1892e:	58e0      	ldr	r0, [r4, r3]
   18930:	f3c0 7000 	ubfx	r0, r0, #28, #1
   18934:	bd10      	pop	{r4, pc}
   18936:	f012 0001 	ands.w	r0, r2, #1
   1893a:	58e2      	ldr	r2, [r4, r3]
   1893c:	bf1a      	itte	ne
   1893e:	2000      	movne	r0, #0
   18940:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
   18944:	f022 5280 	biceq.w	r2, r2, #268435456	; 0x10000000
   18948:	50e2      	str	r2, [r4, r3]
   1894a:	bd10      	pop	{r4, pc}
   1894c:	2009      	movs	r0, #9
   1894e:	f7f8 fda9 	bl	114a4 <bsd_os_errno_set>
   18952:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18956:	bd10      	pop	{r4, pc}
   18958:	2016      	movs	r0, #22
   1895a:	f7f8 fda3 	bl	114a4 <bsd_os_errno_set>
   1895e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18962:	bd10      	pop	{r4, pc}
   18964:	200265c8 	.word	0x200265c8

00018968 <bsd_os_application_irq_handler>:
   18968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1896c:	4c33      	ldr	r4, [pc, #204]	; (18a3c <bsd_os_application_irq_handler+0xd4>)
   1896e:	f7f8 fe4d 	bl	1160c <bsd_os_application_irq_clear>
   18972:	f04f 0803 	mov.w	r8, #3
   18976:	4d32      	ldr	r5, [pc, #200]	; (18a40 <bsd_os_application_irq_handler+0xd8>)
   18978:	4f32      	ldr	r7, [pc, #200]	; (18a44 <bsd_os_application_irq_handler+0xdc>)
   1897a:	f104 0680 	add.w	r6, r4, #128	; 0x80
   1897e:	e004      	b.n	1898a <bsd_os_application_irq_handler+0x22>
   18980:	2b04      	cmp	r3, #4
   18982:	d006      	beq.n	18992 <bsd_os_application_irq_handler+0x2a>
   18984:	3408      	adds	r4, #8
   18986:	42b4      	cmp	r4, r6
   18988:	d03b      	beq.n	18a02 <bsd_os_application_irq_handler+0x9a>
   1898a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1898e:	2b02      	cmp	r3, #2
   18990:	d1f6      	bne.n	18980 <bsd_os_application_irq_handler+0x18>
   18992:	6820      	ldr	r0, [r4, #0]
   18994:	882a      	ldrh	r2, [r5, #0]
   18996:	6803      	ldr	r3, [r0, #0]
   18998:	b29b      	uxth	r3, r3
   1899a:	429a      	cmp	r2, r3
   1899c:	d033      	beq.n	18a06 <bsd_os_application_irq_handler+0x9e>
   1899e:	8a2a      	ldrh	r2, [r5, #16]
   189a0:	429a      	cmp	r2, r3
   189a2:	d032      	beq.n	18a0a <bsd_os_application_irq_handler+0xa2>
   189a4:	8c2a      	ldrh	r2, [r5, #32]
   189a6:	429a      	cmp	r2, r3
   189a8:	d031      	beq.n	18a0e <bsd_os_application_irq_handler+0xa6>
   189aa:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   189ac:	429a      	cmp	r2, r3
   189ae:	d030      	beq.n	18a12 <bsd_os_application_irq_handler+0xaa>
   189b0:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
   189b4:	429a      	cmp	r2, r3
   189b6:	d036      	beq.n	18a26 <bsd_os_application_irq_handler+0xbe>
   189b8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
   189bc:	429a      	cmp	r2, r3
   189be:	d034      	beq.n	18a2a <bsd_os_application_irq_handler+0xc2>
   189c0:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
   189c4:	429a      	cmp	r2, r3
   189c6:	d032      	beq.n	18a2e <bsd_os_application_irq_handler+0xc6>
   189c8:	f8b5 2070 	ldrh.w	r2, [r5, #112]	; 0x70
   189cc:	429a      	cmp	r2, r3
   189ce:	d030      	beq.n	18a32 <bsd_os_application_irq_handler+0xca>
   189d0:	f8b5 2080 	ldrh.w	r2, [r5, #128]	; 0x80
   189d4:	429a      	cmp	r2, r3
   189d6:	d02e      	beq.n	18a36 <bsd_os_application_irq_handler+0xce>
   189d8:	f8b5 2090 	ldrh.w	r2, [r5, #144]	; 0x90
   189dc:	429a      	cmp	r2, r3
   189de:	bf08      	it	eq
   189e0:	2309      	moveq	r3, #9
   189e2:	d1cf      	bne.n	18984 <bsd_os_application_irq_handler+0x1c>
   189e4:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   189e8:	685a      	ldr	r2, [r3, #4]
   189ea:	68d9      	ldr	r1, [r3, #12]
   189ec:	4790      	blx	r2
   189ee:	b990      	cbnz	r0, 18a16 <bsd_os_application_irq_handler+0xae>
   189f0:	2201      	movs	r2, #1
   189f2:	6820      	ldr	r0, [r4, #0]
   189f4:	f804 2c04 	strb.w	r2, [r4, #-4]
   189f8:	68fb      	ldr	r3, [r7, #12]
   189fa:	3408      	adds	r4, #8
   189fc:	4798      	blx	r3
   189fe:	42b4      	cmp	r4, r6
   18a00:	d1c3      	bne.n	1898a <bsd_os_application_irq_handler+0x22>
   18a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18a06:	2300      	movs	r3, #0
   18a08:	e7ec      	b.n	189e4 <bsd_os_application_irq_handler+0x7c>
   18a0a:	2301      	movs	r3, #1
   18a0c:	e7ea      	b.n	189e4 <bsd_os_application_irq_handler+0x7c>
   18a0e:	2302      	movs	r3, #2
   18a10:	e7e8      	b.n	189e4 <bsd_os_application_irq_handler+0x7c>
   18a12:	2303      	movs	r3, #3
   18a14:	e7e6      	b.n	189e4 <bsd_os_application_irq_handler+0x7c>
   18a16:	2802      	cmp	r0, #2
   18a18:	bf0a      	itet	eq
   18a1a:	2304      	moveq	r3, #4
   18a1c:	f804 8c04 	strbne.w	r8, [r4, #-4]
   18a20:	f804 3c04 	strbeq.w	r3, [r4, #-4]
   18a24:	e7ae      	b.n	18984 <bsd_os_application_irq_handler+0x1c>
   18a26:	2304      	movs	r3, #4
   18a28:	e7dc      	b.n	189e4 <bsd_os_application_irq_handler+0x7c>
   18a2a:	2305      	movs	r3, #5
   18a2c:	e7da      	b.n	189e4 <bsd_os_application_irq_handler+0x7c>
   18a2e:	2306      	movs	r3, #6
   18a30:	e7d8      	b.n	189e4 <bsd_os_application_irq_handler+0x7c>
   18a32:	2307      	movs	r3, #7
   18a34:	e7d6      	b.n	189e4 <bsd_os_application_irq_handler+0x7c>
   18a36:	2308      	movs	r3, #8
   18a38:	e7d4      	b.n	189e4 <bsd_os_application_irq_handler+0x7c>
   18a3a:	bf00      	nop
   18a3c:	20020ab8 	.word	0x20020ab8
   18a40:	2002097c 	.word	0x2002097c
   18a44:	20020a1c 	.word	0x20020a1c

00018a48 <rpc_framework_init>:
   18a48:	b508      	push	{r3, lr}
   18a4a:	22a0      	movs	r2, #160	; 0xa0
   18a4c:	2100      	movs	r1, #0
   18a4e:	4802      	ldr	r0, [pc, #8]	; (18a58 <rpc_framework_init+0x10>)
   18a50:	f004 fb9f 	bl	1d192 <memset>
   18a54:	2000      	movs	r0, #0
   18a56:	bd08      	pop	{r3, pc}
   18a58:	2002097c 	.word	0x2002097c

00018a5c <rpc_client_register>:
   18a5c:	8803      	ldrh	r3, [r0, #0]
   18a5e:	2b00      	cmp	r3, #0
   18a60:	d045      	beq.n	18aee <rpc_client_register+0x92>
   18a62:	6842      	ldr	r2, [r0, #4]
   18a64:	4601      	mov	r1, r0
   18a66:	2a00      	cmp	r2, #0
   18a68:	d050      	beq.n	18b0c <rpc_client_register+0xb0>
   18a6a:	4a30      	ldr	r2, [pc, #192]	; (18b2c <rpc_client_register+0xd0>)
   18a6c:	8810      	ldrh	r0, [r2, #0]
   18a6e:	4283      	cmp	r3, r0
   18a70:	d03d      	beq.n	18aee <rpc_client_register+0x92>
   18a72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18a76:	8a14      	ldrh	r4, [r2, #16]
   18a78:	42a3      	cmp	r3, r4
   18a7a:	d035      	beq.n	18ae8 <rpc_client_register+0x8c>
   18a7c:	8c15      	ldrh	r5, [r2, #32]
   18a7e:	42ab      	cmp	r3, r5
   18a80:	d032      	beq.n	18ae8 <rpc_client_register+0x8c>
   18a82:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   18a84:	42b3      	cmp	r3, r6
   18a86:	d02f      	beq.n	18ae8 <rpc_client_register+0x8c>
   18a88:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   18a8c:	42bb      	cmp	r3, r7
   18a8e:	d02b      	beq.n	18ae8 <rpc_client_register+0x8c>
   18a90:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   18a94:	4563      	cmp	r3, ip
   18a96:	d027      	beq.n	18ae8 <rpc_client_register+0x8c>
   18a98:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   18a9c:	4573      	cmp	r3, lr
   18a9e:	d023      	beq.n	18ae8 <rpc_client_register+0x8c>
   18aa0:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   18aa4:	4543      	cmp	r3, r8
   18aa6:	d01f      	beq.n	18ae8 <rpc_client_register+0x8c>
   18aa8:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   18aac:	454b      	cmp	r3, r9
   18aae:	d01b      	beq.n	18ae8 <rpc_client_register+0x8c>
   18ab0:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   18ab4:	4553      	cmp	r3, sl
   18ab6:	d017      	beq.n	18ae8 <rpc_client_register+0x8c>
   18ab8:	b1e0      	cbz	r0, 18af4 <rpc_client_register+0x98>
   18aba:	b35c      	cbz	r4, 18b14 <rpc_client_register+0xb8>
   18abc:	b365      	cbz	r5, 18b18 <rpc_client_register+0xbc>
   18abe:	b36e      	cbz	r6, 18b1c <rpc_client_register+0xc0>
   18ac0:	b377      	cbz	r7, 18b20 <rpc_client_register+0xc4>
   18ac2:	f1bc 0f00 	cmp.w	ip, #0
   18ac6:	d02d      	beq.n	18b24 <rpc_client_register+0xc8>
   18ac8:	f1be 0f00 	cmp.w	lr, #0
   18acc:	d020      	beq.n	18b10 <rpc_client_register+0xb4>
   18ace:	f1b8 0f00 	cmp.w	r8, #0
   18ad2:	d029      	beq.n	18b28 <rpc_client_register+0xcc>
   18ad4:	f1b9 0f00 	cmp.w	r9, #0
   18ad8:	d00b      	beq.n	18af2 <rpc_client_register+0x96>
   18ada:	2009      	movs	r0, #9
   18adc:	f1ba 0f00 	cmp.w	sl, #0
   18ae0:	d008      	beq.n	18af4 <rpc_client_register+0x98>
   18ae2:	2004      	movs	r0, #4
   18ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18ae8:	2007      	movs	r0, #7
   18aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18aee:	2007      	movs	r0, #7
   18af0:	4770      	bx	lr
   18af2:	2008      	movs	r0, #8
   18af4:	0100      	lsls	r0, r0, #4
   18af6:	5213      	strh	r3, [r2, r0]
   18af8:	684b      	ldr	r3, [r1, #4]
   18afa:	4402      	add	r2, r0
   18afc:	6053      	str	r3, [r2, #4]
   18afe:	688b      	ldr	r3, [r1, #8]
   18b00:	2000      	movs	r0, #0
   18b02:	6093      	str	r3, [r2, #8]
   18b04:	68cb      	ldr	r3, [r1, #12]
   18b06:	60d3      	str	r3, [r2, #12]
   18b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18b0c:	200e      	movs	r0, #14
   18b0e:	4770      	bx	lr
   18b10:	2006      	movs	r0, #6
   18b12:	e7ef      	b.n	18af4 <rpc_client_register+0x98>
   18b14:	2001      	movs	r0, #1
   18b16:	e7ed      	b.n	18af4 <rpc_client_register+0x98>
   18b18:	2002      	movs	r0, #2
   18b1a:	e7eb      	b.n	18af4 <rpc_client_register+0x98>
   18b1c:	2003      	movs	r0, #3
   18b1e:	e7e9      	b.n	18af4 <rpc_client_register+0x98>
   18b20:	2004      	movs	r0, #4
   18b22:	e7e7      	b.n	18af4 <rpc_client_register+0x98>
   18b24:	2005      	movs	r0, #5
   18b26:	e7e5      	b.n	18af4 <rpc_client_register+0x98>
   18b28:	2007      	movs	r0, #7
   18b2a:	e7e3      	b.n	18af4 <rpc_client_register+0x98>
   18b2c:	2002097c 	.word	0x2002097c

00018b30 <rpc_transport_input>:
   18b30:	b538      	push	{r3, r4, r5, lr}
   18b32:	4a82      	ldr	r2, [pc, #520]	; (18d3c <rpc_transport_input+0x20c>)
   18b34:	680b      	ldr	r3, [r1, #0]
   18b36:	8810      	ldrh	r0, [r2, #0]
   18b38:	b29b      	uxth	r3, r3
   18b3a:	4298      	cmp	r0, r3
   18b3c:	d027      	beq.n	18b8e <rpc_transport_input+0x5e>
   18b3e:	8a10      	ldrh	r0, [r2, #16]
   18b40:	4298      	cmp	r0, r3
   18b42:	d024      	beq.n	18b8e <rpc_transport_input+0x5e>
   18b44:	8c10      	ldrh	r0, [r2, #32]
   18b46:	4298      	cmp	r0, r3
   18b48:	d021      	beq.n	18b8e <rpc_transport_input+0x5e>
   18b4a:	8e10      	ldrh	r0, [r2, #48]	; 0x30
   18b4c:	4298      	cmp	r0, r3
   18b4e:	d01e      	beq.n	18b8e <rpc_transport_input+0x5e>
   18b50:	f8b2 0040 	ldrh.w	r0, [r2, #64]	; 0x40
   18b54:	4298      	cmp	r0, r3
   18b56:	d01a      	beq.n	18b8e <rpc_transport_input+0x5e>
   18b58:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
   18b5c:	4298      	cmp	r0, r3
   18b5e:	d016      	beq.n	18b8e <rpc_transport_input+0x5e>
   18b60:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
   18b64:	4298      	cmp	r0, r3
   18b66:	d012      	beq.n	18b8e <rpc_transport_input+0x5e>
   18b68:	f8b2 0070 	ldrh.w	r0, [r2, #112]	; 0x70
   18b6c:	4298      	cmp	r0, r3
   18b6e:	d00e      	beq.n	18b8e <rpc_transport_input+0x5e>
   18b70:	f8b2 0080 	ldrh.w	r0, [r2, #128]	; 0x80
   18b74:	4298      	cmp	r0, r3
   18b76:	d00a      	beq.n	18b8e <rpc_transport_input+0x5e>
   18b78:	f8b2 2090 	ldrh.w	r2, [r2, #144]	; 0x90
   18b7c:	429a      	cmp	r2, r3
   18b7e:	d006      	beq.n	18b8e <rpc_transport_input+0x5e>
   18b80:	6888      	ldr	r0, [r1, #8]
   18b82:	b118      	cbz	r0, 18b8c <rpc_transport_input+0x5c>
   18b84:	4b6e      	ldr	r3, [pc, #440]	; (18d40 <rpc_transport_input+0x210>)
   18b86:	691b      	ldr	r3, [r3, #16]
   18b88:	4798      	blx	r3
   18b8a:	2000      	movs	r0, #0
   18b8c:	bd38      	pop	{r3, r4, r5, pc}
   18b8e:	6888      	ldr	r0, [r1, #8]
   18b90:	2800      	cmp	r0, #0
   18b92:	f000 8098 	beq.w	18cc6 <rpc_transport_input+0x196>
   18b96:	4a6b      	ldr	r2, [pc, #428]	; (18d44 <rpc_transport_input+0x214>)
   18b98:	6814      	ldr	r4, [r2, #0]
   18b9a:	2c00      	cmp	r4, #0
   18b9c:	d03c      	beq.n	18c18 <rpc_transport_input+0xe8>
   18b9e:	6894      	ldr	r4, [r2, #8]
   18ba0:	2c00      	cmp	r4, #0
   18ba2:	f000 809a 	beq.w	18cda <rpc_transport_input+0x1aa>
   18ba6:	6914      	ldr	r4, [r2, #16]
   18ba8:	2c00      	cmp	r4, #0
   18baa:	f000 809a 	beq.w	18ce2 <rpc_transport_input+0x1b2>
   18bae:	6994      	ldr	r4, [r2, #24]
   18bb0:	2c00      	cmp	r4, #0
   18bb2:	f000 809a 	beq.w	18cea <rpc_transport_input+0x1ba>
   18bb6:	6a14      	ldr	r4, [r2, #32]
   18bb8:	2c00      	cmp	r4, #0
   18bba:	f000 809a 	beq.w	18cf2 <rpc_transport_input+0x1c2>
   18bbe:	6a94      	ldr	r4, [r2, #40]	; 0x28
   18bc0:	2c00      	cmp	r4, #0
   18bc2:	f000 8084 	beq.w	18cce <rpc_transport_input+0x19e>
   18bc6:	6b14      	ldr	r4, [r2, #48]	; 0x30
   18bc8:	2c00      	cmp	r4, #0
   18bca:	f000 8098 	beq.w	18cfe <rpc_transport_input+0x1ce>
   18bce:	6b94      	ldr	r4, [r2, #56]	; 0x38
   18bd0:	2c00      	cmp	r4, #0
   18bd2:	f000 8096 	beq.w	18d02 <rpc_transport_input+0x1d2>
   18bd6:	6c14      	ldr	r4, [r2, #64]	; 0x40
   18bd8:	2c00      	cmp	r4, #0
   18bda:	f000 8096 	beq.w	18d0a <rpc_transport_input+0x1da>
   18bde:	6c94      	ldr	r4, [r2, #72]	; 0x48
   18be0:	2c00      	cmp	r4, #0
   18be2:	f000 8096 	beq.w	18d12 <rpc_transport_input+0x1e2>
   18be6:	6d14      	ldr	r4, [r2, #80]	; 0x50
   18be8:	2c00      	cmp	r4, #0
   18bea:	f000 8096 	beq.w	18d1a <rpc_transport_input+0x1ea>
   18bee:	6d94      	ldr	r4, [r2, #88]	; 0x58
   18bf0:	2c00      	cmp	r4, #0
   18bf2:	f000 8098 	beq.w	18d26 <rpc_transport_input+0x1f6>
   18bf6:	6e14      	ldr	r4, [r2, #96]	; 0x60
   18bf8:	2c00      	cmp	r4, #0
   18bfa:	f000 8098 	beq.w	18d2e <rpc_transport_input+0x1fe>
   18bfe:	6e94      	ldr	r4, [r2, #104]	; 0x68
   18c00:	2c00      	cmp	r4, #0
   18c02:	f000 8096 	beq.w	18d32 <rpc_transport_input+0x202>
   18c06:	6f14      	ldr	r4, [r2, #112]	; 0x70
   18c08:	2c00      	cmp	r4, #0
   18c0a:	f000 8094 	beq.w	18d36 <rpc_transport_input+0x206>
   18c0e:	6f94      	ldr	r4, [r2, #120]	; 0x78
   18c10:	b10c      	cbz	r4, 18c16 <rpc_transport_input+0xe6>
   18c12:	2001      	movs	r0, #1
   18c14:	bd38      	pop	{r3, r4, r5, pc}
   18c16:	240f      	movs	r4, #15
   18c18:	eb02 05c4 	add.w	r5, r2, r4, lsl #3
   18c1c:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
   18c20:	80ab      	strh	r3, [r5, #4]
   18c22:	4b49      	ldr	r3, [pc, #292]	; (18d48 <rpc_transport_input+0x218>)
   18c24:	781a      	ldrb	r2, [r3, #0]
   18c26:	2a01      	cmp	r2, #1
   18c28:	d053      	beq.n	18cd2 <rpc_transport_input+0x1a2>
   18c2a:	7a1a      	ldrb	r2, [r3, #8]
   18c2c:	2a01      	cmp	r2, #1
   18c2e:	d041      	beq.n	18cb4 <rpc_transport_input+0x184>
   18c30:	7c1a      	ldrb	r2, [r3, #16]
   18c32:	2a01      	cmp	r2, #1
   18c34:	d04f      	beq.n	18cd6 <rpc_transport_input+0x1a6>
   18c36:	7e1a      	ldrb	r2, [r3, #24]
   18c38:	2a01      	cmp	r2, #1
   18c3a:	d050      	beq.n	18cde <rpc_transport_input+0x1ae>
   18c3c:	f893 2020 	ldrb.w	r2, [r3, #32]
   18c40:	2a01      	cmp	r2, #1
   18c42:	d050      	beq.n	18ce6 <rpc_transport_input+0x1b6>
   18c44:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   18c48:	2a01      	cmp	r2, #1
   18c4a:	d050      	beq.n	18cee <rpc_transport_input+0x1be>
   18c4c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   18c50:	2a01      	cmp	r2, #1
   18c52:	d03a      	beq.n	18cca <rpc_transport_input+0x19a>
   18c54:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   18c58:	2a01      	cmp	r2, #1
   18c5a:	d04c      	beq.n	18cf6 <rpc_transport_input+0x1c6>
   18c5c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   18c60:	2a01      	cmp	r2, #1
   18c62:	d04a      	beq.n	18cfa <rpc_transport_input+0x1ca>
   18c64:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   18c68:	2a01      	cmp	r2, #1
   18c6a:	d04c      	beq.n	18d06 <rpc_transport_input+0x1d6>
   18c6c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   18c70:	2a01      	cmp	r2, #1
   18c72:	d04c      	beq.n	18d0e <rpc_transport_input+0x1de>
   18c74:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   18c78:	2a01      	cmp	r2, #1
   18c7a:	d04c      	beq.n	18d16 <rpc_transport_input+0x1e6>
   18c7c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   18c80:	2a01      	cmp	r2, #1
   18c82:	d04c      	beq.n	18d1e <rpc_transport_input+0x1ee>
   18c84:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   18c88:	2a01      	cmp	r2, #1
   18c8a:	d04a      	beq.n	18d22 <rpc_transport_input+0x1f2>
   18c8c:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   18c90:	2a01      	cmp	r2, #1
   18c92:	d04a      	beq.n	18d2a <rpc_transport_input+0x1fa>
   18c94:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   18c98:	2a01      	cmp	r2, #1
   18c9a:	d00a      	beq.n	18cb2 <rpc_transport_input+0x182>
   18c9c:	2c10      	cmp	r4, #16
   18c9e:	d0b8      	beq.n	18c12 <rpc_transport_input+0xe2>
   18ca0:	2200      	movs	r2, #0
   18ca2:	4b28      	ldr	r3, [pc, #160]	; (18d44 <rpc_transport_input+0x214>)
   18ca4:	2001      	movs	r0, #1
   18ca6:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   18caa:	808a      	strh	r2, [r1, #4]
   18cac:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
   18cb0:	bd38      	pop	{r3, r4, r5, pc}
   18cb2:	220f      	movs	r2, #15
   18cb4:	2402      	movs	r4, #2
   18cb6:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
   18cba:	f803 4032 	strb.w	r4, [r3, r2, lsl #3]
   18cbe:	6041      	str	r1, [r0, #4]
   18cc0:	f7f8 fc9c 	bl	115fc <bsd_os_application_irq_set>
   18cc4:	e7a5      	b.n	18c12 <rpc_transport_input+0xe2>
   18cc6:	2410      	movs	r4, #16
   18cc8:	e7ab      	b.n	18c22 <rpc_transport_input+0xf2>
   18cca:	2206      	movs	r2, #6
   18ccc:	e7f2      	b.n	18cb4 <rpc_transport_input+0x184>
   18cce:	2405      	movs	r4, #5
   18cd0:	e7a2      	b.n	18c18 <rpc_transport_input+0xe8>
   18cd2:	2200      	movs	r2, #0
   18cd4:	e7ee      	b.n	18cb4 <rpc_transport_input+0x184>
   18cd6:	2202      	movs	r2, #2
   18cd8:	e7ec      	b.n	18cb4 <rpc_transport_input+0x184>
   18cda:	2401      	movs	r4, #1
   18cdc:	e79c      	b.n	18c18 <rpc_transport_input+0xe8>
   18cde:	2203      	movs	r2, #3
   18ce0:	e7e8      	b.n	18cb4 <rpc_transport_input+0x184>
   18ce2:	2402      	movs	r4, #2
   18ce4:	e798      	b.n	18c18 <rpc_transport_input+0xe8>
   18ce6:	2204      	movs	r2, #4
   18ce8:	e7e4      	b.n	18cb4 <rpc_transport_input+0x184>
   18cea:	2403      	movs	r4, #3
   18cec:	e794      	b.n	18c18 <rpc_transport_input+0xe8>
   18cee:	2205      	movs	r2, #5
   18cf0:	e7e0      	b.n	18cb4 <rpc_transport_input+0x184>
   18cf2:	2404      	movs	r4, #4
   18cf4:	e790      	b.n	18c18 <rpc_transport_input+0xe8>
   18cf6:	2207      	movs	r2, #7
   18cf8:	e7dc      	b.n	18cb4 <rpc_transport_input+0x184>
   18cfa:	2208      	movs	r2, #8
   18cfc:	e7da      	b.n	18cb4 <rpc_transport_input+0x184>
   18cfe:	2406      	movs	r4, #6
   18d00:	e78a      	b.n	18c18 <rpc_transport_input+0xe8>
   18d02:	2407      	movs	r4, #7
   18d04:	e788      	b.n	18c18 <rpc_transport_input+0xe8>
   18d06:	2209      	movs	r2, #9
   18d08:	e7d4      	b.n	18cb4 <rpc_transport_input+0x184>
   18d0a:	2408      	movs	r4, #8
   18d0c:	e784      	b.n	18c18 <rpc_transport_input+0xe8>
   18d0e:	220a      	movs	r2, #10
   18d10:	e7d0      	b.n	18cb4 <rpc_transport_input+0x184>
   18d12:	2409      	movs	r4, #9
   18d14:	e780      	b.n	18c18 <rpc_transport_input+0xe8>
   18d16:	220b      	movs	r2, #11
   18d18:	e7cc      	b.n	18cb4 <rpc_transport_input+0x184>
   18d1a:	240a      	movs	r4, #10
   18d1c:	e77c      	b.n	18c18 <rpc_transport_input+0xe8>
   18d1e:	220c      	movs	r2, #12
   18d20:	e7c8      	b.n	18cb4 <rpc_transport_input+0x184>
   18d22:	220d      	movs	r2, #13
   18d24:	e7c6      	b.n	18cb4 <rpc_transport_input+0x184>
   18d26:	240b      	movs	r4, #11
   18d28:	e776      	b.n	18c18 <rpc_transport_input+0xe8>
   18d2a:	220e      	movs	r2, #14
   18d2c:	e7c2      	b.n	18cb4 <rpc_transport_input+0x184>
   18d2e:	240c      	movs	r4, #12
   18d30:	e772      	b.n	18c18 <rpc_transport_input+0xe8>
   18d32:	240d      	movs	r4, #13
   18d34:	e770      	b.n	18c18 <rpc_transport_input+0xe8>
   18d36:	240e      	movs	r4, #14
   18d38:	e76e      	b.n	18c18 <rpc_transport_input+0xe8>
   18d3a:	bf00      	nop
   18d3c:	2002097c 	.word	0x2002097c
   18d40:	20020a1c 	.word	0x20020a1c
   18d44:	20020a34 	.word	0x20020a34
   18d48:	20020ab4 	.word	0x20020ab4

00018d4c <rpc_transport_register>:
   18d4c:	b4f0      	push	{r4, r5, r6, r7}
   18d4e:	2900      	cmp	r1, #0
   18d50:	d052      	beq.n	18df8 <rpc_transport_register+0xac>
   18d52:	2800      	cmp	r0, #0
   18d54:	d050      	beq.n	18df8 <rpc_transport_register+0xac>
   18d56:	6883      	ldr	r3, [r0, #8]
   18d58:	2b00      	cmp	r3, #0
   18d5a:	d04d      	beq.n	18df8 <rpc_transport_register+0xac>
   18d5c:	6903      	ldr	r3, [r0, #16]
   18d5e:	2b00      	cmp	r3, #0
   18d60:	d04a      	beq.n	18df8 <rpc_transport_register+0xac>
   18d62:	6843      	ldr	r3, [r0, #4]
   18d64:	2b00      	cmp	r3, #0
   18d66:	d047      	beq.n	18df8 <rpc_transport_register+0xac>
   18d68:	68c3      	ldr	r3, [r0, #12]
   18d6a:	2b00      	cmp	r3, #0
   18d6c:	d044      	beq.n	18df8 <rpc_transport_register+0xac>
   18d6e:	6803      	ldr	r3, [r0, #0]
   18d70:	2b00      	cmp	r3, #0
   18d72:	d041      	beq.n	18df8 <rpc_transport_register+0xac>
   18d74:	6943      	ldr	r3, [r0, #20]
   18d76:	2b00      	cmp	r3, #0
   18d78:	d03e      	beq.n	18df8 <rpc_transport_register+0xac>
   18d7a:	2601      	movs	r6, #1
   18d7c:	2500      	movs	r5, #0
   18d7e:	4604      	mov	r4, r0
   18d80:	460f      	mov	r7, r1
   18d82:	4a1f      	ldr	r2, [pc, #124]	; (18e00 <rpc_transport_register+0xb4>)
   18d84:	4b1f      	ldr	r3, [pc, #124]	; (18e04 <rpc_transport_register+0xb8>)
   18d86:	f8df c080 	ldr.w	ip, [pc, #128]	; 18e08 <rpc_transport_register+0xbc>
   18d8a:	7416      	strb	r6, [r2, #16]
   18d8c:	7616      	strb	r6, [r2, #24]
   18d8e:	f882 6020 	strb.w	r6, [r2, #32]
   18d92:	f882 6028 	strb.w	r6, [r2, #40]	; 0x28
   18d96:	f882 6030 	strb.w	r6, [r2, #48]	; 0x30
   18d9a:	f882 6038 	strb.w	r6, [r2, #56]	; 0x38
   18d9e:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
   18da2:	f882 6048 	strb.w	r6, [r2, #72]	; 0x48
   18da6:	f882 6050 	strb.w	r6, [r2, #80]	; 0x50
   18daa:	f882 6058 	strb.w	r6, [r2, #88]	; 0x58
   18dae:	f882 6060 	strb.w	r6, [r2, #96]	; 0x60
   18db2:	f882 6068 	strb.w	r6, [r2, #104]	; 0x68
   18db6:	f882 6070 	strb.w	r6, [r2, #112]	; 0x70
   18dba:	f882 6078 	strb.w	r6, [r2, #120]	; 0x78
   18dbe:	611d      	str	r5, [r3, #16]
   18dc0:	619d      	str	r5, [r3, #24]
   18dc2:	621d      	str	r5, [r3, #32]
   18dc4:	629d      	str	r5, [r3, #40]	; 0x28
   18dc6:	631d      	str	r5, [r3, #48]	; 0x30
   18dc8:	639d      	str	r5, [r3, #56]	; 0x38
   18dca:	641d      	str	r5, [r3, #64]	; 0x40
   18dcc:	649d      	str	r5, [r3, #72]	; 0x48
   18dce:	651d      	str	r5, [r3, #80]	; 0x50
   18dd0:	659d      	str	r5, [r3, #88]	; 0x58
   18dd2:	661d      	str	r5, [r3, #96]	; 0x60
   18dd4:	669d      	str	r5, [r3, #104]	; 0x68
   18dd6:	671d      	str	r5, [r3, #112]	; 0x70
   18dd8:	679d      	str	r5, [r3, #120]	; 0x78
   18dda:	7016      	strb	r6, [r2, #0]
   18ddc:	7216      	strb	r6, [r2, #8]
   18dde:	601d      	str	r5, [r3, #0]
   18de0:	609d      	str	r5, [r3, #8]
   18de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   18de4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   18de8:	e894 0003 	ldmia.w	r4, {r0, r1}
   18dec:	e88c 0003 	stmia.w	ip, {r0, r1}
   18df0:	603e      	str	r6, [r7, #0]
   18df2:	4628      	mov	r0, r5
   18df4:	bcf0      	pop	{r4, r5, r6, r7}
   18df6:	4770      	bx	lr
   18df8:	250e      	movs	r5, #14
   18dfa:	4628      	mov	r0, r5
   18dfc:	bcf0      	pop	{r4, r5, r6, r7}
   18dfe:	4770      	bx	lr
   18e00:	20020ab4 	.word	0x20020ab4
   18e04:	20020a34 	.word	0x20020a34
   18e08:	20020a1c 	.word	0x20020a1c

00018e0c <rpc_transport_unregister>:
   18e0c:	2800      	cmp	r0, #0
   18e0e:	d03a      	beq.n	18e86 <rpc_transport_unregister+0x7a>
   18e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18e14:	4680      	mov	r8, r0
   18e16:	4c1d      	ldr	r4, [pc, #116]	; (18e8c <rpc_transport_unregister+0x80>)
   18e18:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
   18e1c:	68a3      	ldr	r3, [r4, #8]
   18e1e:	3410      	adds	r4, #16
   18e20:	b103      	cbz	r3, 18e24 <rpc_transport_unregister+0x18>
   18e22:	4798      	blx	r3
   18e24:	42ac      	cmp	r4, r5
   18e26:	d1f9      	bne.n	18e1c <rpc_transport_unregister+0x10>
   18e28:	f04f 0901 	mov.w	r9, #1
   18e2c:	2600      	movs	r6, #0
   18e2e:	4c18      	ldr	r4, [pc, #96]	; (18e90 <rpc_transport_unregister+0x84>)
   18e30:	4d18      	ldr	r5, [pc, #96]	; (18e94 <rpc_transport_unregister+0x88>)
   18e32:	f8df a064 	ldr.w	sl, [pc, #100]	; 18e98 <rpc_transport_unregister+0x8c>
   18e36:	f104 0780 	add.w	r7, r4, #128	; 0x80
   18e3a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   18e3e:	2b01      	cmp	r3, #1
   18e40:	d005      	beq.n	18e4e <rpc_transport_unregister+0x42>
   18e42:	f8da 300c 	ldr.w	r3, [sl, #12]
   18e46:	6820      	ldr	r0, [r4, #0]
   18e48:	4798      	blx	r3
   18e4a:	f804 9c04 	strb.w	r9, [r4, #-4]
   18e4e:	f855 0c04 	ldr.w	r0, [r5, #-4]
   18e52:	3408      	adds	r4, #8
   18e54:	b128      	cbz	r0, 18e62 <rpc_transport_unregister+0x56>
   18e56:	f8da 3010 	ldr.w	r3, [sl, #16]
   18e5a:	4798      	blx	r3
   18e5c:	802e      	strh	r6, [r5, #0]
   18e5e:	f845 6c04 	str.w	r6, [r5, #-4]
   18e62:	42bc      	cmp	r4, r7
   18e64:	f105 0508 	add.w	r5, r5, #8
   18e68:	d1e7      	bne.n	18e3a <rpc_transport_unregister+0x2e>
   18e6a:	f8d8 0000 	ldr.w	r0, [r8]
   18e6e:	2218      	movs	r2, #24
   18e70:	3801      	subs	r0, #1
   18e72:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18e76:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
   18e7a:	2100      	movs	r1, #0
   18e7c:	f004 f989 	bl	1d192 <memset>
   18e80:	2000      	movs	r0, #0
   18e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18e86:	200e      	movs	r0, #14
   18e88:	4770      	bx	lr
   18e8a:	bf00      	nop
   18e8c:	2002097c 	.word	0x2002097c
   18e90:	20020ab8 	.word	0x20020ab8
   18e94:	20020a38 	.word	0x20020a38
   18e98:	20020a1c 	.word	0x20020a1c

00018e9c <rpc_message_send>:
   18e9c:	b168      	cbz	r0, 18eba <rpc_message_send+0x1e>
   18e9e:	b171      	cbz	r1, 18ebe <rpc_message_send+0x22>
   18ea0:	4a09      	ldr	r2, [pc, #36]	; (18ec8 <rpc_message_send+0x2c>)
   18ea2:	6853      	ldr	r3, [r2, #4]
   18ea4:	b16b      	cbz	r3, 18ec2 <rpc_message_send+0x26>
   18ea6:	684b      	ldr	r3, [r1, #4]
   18ea8:	8008      	strh	r0, [r1, #0]
   18eaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   18eae:	f043 0302 	orr.w	r3, r3, #2
   18eb2:	6812      	ldr	r2, [r2, #0]
   18eb4:	604b      	str	r3, [r1, #4]
   18eb6:	4608      	mov	r0, r1
   18eb8:	4710      	bx	r2
   18eba:	2007      	movs	r0, #7
   18ebc:	4770      	bx	lr
   18ebe:	200e      	movs	r0, #14
   18ec0:	4770      	bx	lr
   18ec2:	2008      	movs	r0, #8
   18ec4:	4770      	bx	lr
   18ec6:	bf00      	nop
   18ec8:	20020a1c 	.word	0x20020a1c

00018ecc <rpc_message_alloc>:
   18ecc:	b35a      	cbz	r2, 18f26 <rpc_message_alloc+0x5a>
   18ece:	b330      	cbz	r0, 18f1e <rpc_message_alloc+0x52>
   18ed0:	2300      	movs	r3, #0
   18ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18ed6:	4f15      	ldr	r7, [pc, #84]	; (18f2c <rpc_message_alloc+0x60>)
   18ed8:	6013      	str	r3, [r2, #0]
   18eda:	687b      	ldr	r3, [r7, #4]
   18edc:	b30b      	cbz	r3, 18f22 <rpc_message_alloc+0x56>
   18ede:	4615      	mov	r5, r2
   18ee0:	460c      	mov	r4, r1
   18ee2:	4606      	mov	r6, r0
   18ee4:	b959      	cbnz	r1, 18efe <rpc_message_alloc+0x32>
   18ee6:	4798      	blx	r3
   18ee8:	4603      	mov	r3, r0
   18eea:	b1a8      	cbz	r0, 18f18 <rpc_message_alloc+0x4c>
   18eec:	46a0      	mov	r8, r4
   18eee:	60dc      	str	r4, [r3, #12]
   18ef0:	f8c3 8008 	str.w	r8, [r3, #8]
   18ef4:	801e      	strh	r6, [r3, #0]
   18ef6:	602b      	str	r3, [r5, #0]
   18ef8:	2000      	movs	r0, #0
   18efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18efe:	68bb      	ldr	r3, [r7, #8]
   18f00:	4608      	mov	r0, r1
   18f02:	4798      	blx	r3
   18f04:	4680      	mov	r8, r0
   18f06:	b138      	cbz	r0, 18f18 <rpc_message_alloc+0x4c>
   18f08:	687b      	ldr	r3, [r7, #4]
   18f0a:	4798      	blx	r3
   18f0c:	4603      	mov	r3, r0
   18f0e:	2800      	cmp	r0, #0
   18f10:	d1ed      	bne.n	18eee <rpc_message_alloc+0x22>
   18f12:	693b      	ldr	r3, [r7, #16]
   18f14:	4640      	mov	r0, r8
   18f16:	4798      	blx	r3
   18f18:	2004      	movs	r0, #4
   18f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18f1e:	2007      	movs	r0, #7
   18f20:	4770      	bx	lr
   18f22:	2008      	movs	r0, #8
   18f24:	e7f9      	b.n	18f1a <rpc_message_alloc+0x4e>
   18f26:	200e      	movs	r0, #14
   18f28:	4770      	bx	lr
   18f2a:	bf00      	nop
   18f2c:	20020a1c 	.word	0x20020a1c

00018f30 <rpc_message_free>:
   18f30:	2800      	cmp	r0, #0
   18f32:	f000 808c 	beq.w	1904e <rpc_message_free+0x11e>
   18f36:	2900      	cmp	r1, #0
   18f38:	f000 80e9 	beq.w	1910e <rpc_message_free+0x1de>
   18f3c:	b538      	push	{r3, r4, r5, lr}
   18f3e:	4a83      	ldr	r2, [pc, #524]	; (1914c <rpc_message_free+0x21c>)
   18f40:	6853      	ldr	r3, [r2, #4]
   18f42:	2b00      	cmp	r3, #0
   18f44:	f000 8085 	beq.w	19052 <rpc_message_free+0x122>
   18f48:	4c81      	ldr	r4, [pc, #516]	; (19150 <rpc_message_free+0x220>)
   18f4a:	4608      	mov	r0, r1
   18f4c:	6863      	ldr	r3, [r4, #4]
   18f4e:	4299      	cmp	r1, r3
   18f50:	f000 8085 	beq.w	1905e <rpc_message_free+0x12e>
   18f54:	68e3      	ldr	r3, [r4, #12]
   18f56:	4298      	cmp	r0, r3
   18f58:	f000 808e 	beq.w	19078 <rpc_message_free+0x148>
   18f5c:	6963      	ldr	r3, [r4, #20]
   18f5e:	4298      	cmp	r0, r3
   18f60:	f000 8090 	beq.w	19084 <rpc_message_free+0x154>
   18f64:	69e3      	ldr	r3, [r4, #28]
   18f66:	4298      	cmp	r0, r3
   18f68:	f000 8092 	beq.w	19090 <rpc_message_free+0x160>
   18f6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18f6e:	4298      	cmp	r0, r3
   18f70:	f000 8095 	beq.w	1909e <rpc_message_free+0x16e>
   18f74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   18f76:	4298      	cmp	r0, r3
   18f78:	f000 8098 	beq.w	190ac <rpc_message_free+0x17c>
   18f7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   18f7e:	4298      	cmp	r0, r3
   18f80:	f000 809b 	beq.w	190ba <rpc_message_free+0x18a>
   18f84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   18f86:	4298      	cmp	r0, r3
   18f88:	f000 809e 	beq.w	190c8 <rpc_message_free+0x198>
   18f8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   18f8e:	4298      	cmp	r0, r3
   18f90:	f000 80a1 	beq.w	190d6 <rpc_message_free+0x1a6>
   18f94:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   18f96:	4298      	cmp	r0, r3
   18f98:	f000 80a4 	beq.w	190e4 <rpc_message_free+0x1b4>
   18f9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   18f9e:	4298      	cmp	r0, r3
   18fa0:	f000 80a7 	beq.w	190f2 <rpc_message_free+0x1c2>
   18fa4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   18fa6:	4298      	cmp	r0, r3
   18fa8:	f000 80aa 	beq.w	19100 <rpc_message_free+0x1d0>
   18fac:	6e63      	ldr	r3, [r4, #100]	; 0x64
   18fae:	4298      	cmp	r0, r3
   18fb0:	f000 80af 	beq.w	19112 <rpc_message_free+0x1e2>
   18fb4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   18fb6:	4298      	cmp	r0, r3
   18fb8:	f000 80b2 	beq.w	19120 <rpc_message_free+0x1f0>
   18fbc:	6f63      	ldr	r3, [r4, #116]	; 0x74
   18fbe:	4298      	cmp	r0, r3
   18fc0:	f000 80b5 	beq.w	1912e <rpc_message_free+0x1fe>
   18fc4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   18fc6:	4283      	cmp	r3, r0
   18fc8:	f000 80b8 	beq.w	1913c <rpc_message_free+0x20c>
   18fcc:	68d3      	ldr	r3, [r2, #12]
   18fce:	4798      	blx	r3
   18fd0:	7823      	ldrb	r3, [r4, #0]
   18fd2:	2b04      	cmp	r3, #4
   18fd4:	d03f      	beq.n	19056 <rpc_message_free+0x126>
   18fd6:	7a23      	ldrb	r3, [r4, #8]
   18fd8:	2b04      	cmp	r3, #4
   18fda:	d03c      	beq.n	19056 <rpc_message_free+0x126>
   18fdc:	7c23      	ldrb	r3, [r4, #16]
   18fde:	2b04      	cmp	r3, #4
   18fe0:	d039      	beq.n	19056 <rpc_message_free+0x126>
   18fe2:	7e23      	ldrb	r3, [r4, #24]
   18fe4:	2b04      	cmp	r3, #4
   18fe6:	d036      	beq.n	19056 <rpc_message_free+0x126>
   18fe8:	f894 3020 	ldrb.w	r3, [r4, #32]
   18fec:	2b04      	cmp	r3, #4
   18fee:	d032      	beq.n	19056 <rpc_message_free+0x126>
   18ff0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   18ff4:	2b04      	cmp	r3, #4
   18ff6:	d02e      	beq.n	19056 <rpc_message_free+0x126>
   18ff8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   18ffc:	2b04      	cmp	r3, #4
   18ffe:	d02a      	beq.n	19056 <rpc_message_free+0x126>
   19000:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   19004:	2b04      	cmp	r3, #4
   19006:	d026      	beq.n	19056 <rpc_message_free+0x126>
   19008:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1900c:	2b04      	cmp	r3, #4
   1900e:	d022      	beq.n	19056 <rpc_message_free+0x126>
   19010:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   19014:	2b04      	cmp	r3, #4
   19016:	d01e      	beq.n	19056 <rpc_message_free+0x126>
   19018:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   1901c:	2b04      	cmp	r3, #4
   1901e:	d01a      	beq.n	19056 <rpc_message_free+0x126>
   19020:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   19024:	2b04      	cmp	r3, #4
   19026:	d016      	beq.n	19056 <rpc_message_free+0x126>
   19028:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   1902c:	2b04      	cmp	r3, #4
   1902e:	d012      	beq.n	19056 <rpc_message_free+0x126>
   19030:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   19034:	2b04      	cmp	r3, #4
   19036:	d00e      	beq.n	19056 <rpc_message_free+0x126>
   19038:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1903c:	2b04      	cmp	r3, #4
   1903e:	d00a      	beq.n	19056 <rpc_message_free+0x126>
   19040:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   19044:	2b04      	cmp	r3, #4
   19046:	bf18      	it	ne
   19048:	2000      	movne	r0, #0
   1904a:	d004      	beq.n	19056 <rpc_message_free+0x126>
   1904c:	bd38      	pop	{r3, r4, r5, pc}
   1904e:	2007      	movs	r0, #7
   19050:	4770      	bx	lr
   19052:	2008      	movs	r0, #8
   19054:	bd38      	pop	{r3, r4, r5, pc}
   19056:	f7f8 fad1 	bl	115fc <bsd_os_application_irq_set>
   1905a:	2000      	movs	r0, #0
   1905c:	bd38      	pop	{r3, r4, r5, pc}
   1905e:	7821      	ldrb	r1, [r4, #0]
   19060:	2903      	cmp	r1, #3
   19062:	f47f af77 	bne.w	18f54 <rpc_message_free+0x24>
   19066:	2100      	movs	r1, #0
   19068:	2501      	movs	r5, #1
   1906a:	4618      	mov	r0, r3
   1906c:	68d2      	ldr	r2, [r2, #12]
   1906e:	f804 5031 	strb.w	r5, [r4, r1, lsl #3]
   19072:	4790      	blx	r2
   19074:	2000      	movs	r0, #0
   19076:	bd38      	pop	{r3, r4, r5, pc}
   19078:	7a21      	ldrb	r1, [r4, #8]
   1907a:	2903      	cmp	r1, #3
   1907c:	f47f af6e 	bne.w	18f5c <rpc_message_free+0x2c>
   19080:	2101      	movs	r1, #1
   19082:	e7f1      	b.n	19068 <rpc_message_free+0x138>
   19084:	7c21      	ldrb	r1, [r4, #16]
   19086:	2903      	cmp	r1, #3
   19088:	f47f af6c 	bne.w	18f64 <rpc_message_free+0x34>
   1908c:	2102      	movs	r1, #2
   1908e:	e7eb      	b.n	19068 <rpc_message_free+0x138>
   19090:	7e21      	ldrb	r1, [r4, #24]
   19092:	2903      	cmp	r1, #3
   19094:	d0e8      	beq.n	19068 <rpc_message_free+0x138>
   19096:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19098:	4298      	cmp	r0, r3
   1909a:	f47f af6b 	bne.w	18f74 <rpc_message_free+0x44>
   1909e:	f894 1020 	ldrb.w	r1, [r4, #32]
   190a2:	2903      	cmp	r1, #3
   190a4:	f47f af66 	bne.w	18f74 <rpc_message_free+0x44>
   190a8:	2104      	movs	r1, #4
   190aa:	e7dd      	b.n	19068 <rpc_message_free+0x138>
   190ac:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   190b0:	2903      	cmp	r1, #3
   190b2:	f47f af63 	bne.w	18f7c <rpc_message_free+0x4c>
   190b6:	2105      	movs	r1, #5
   190b8:	e7d6      	b.n	19068 <rpc_message_free+0x138>
   190ba:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   190be:	2903      	cmp	r1, #3
   190c0:	f47f af60 	bne.w	18f84 <rpc_message_free+0x54>
   190c4:	2106      	movs	r1, #6
   190c6:	e7cf      	b.n	19068 <rpc_message_free+0x138>
   190c8:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   190cc:	2903      	cmp	r1, #3
   190ce:	f47f af5d 	bne.w	18f8c <rpc_message_free+0x5c>
   190d2:	2107      	movs	r1, #7
   190d4:	e7c8      	b.n	19068 <rpc_message_free+0x138>
   190d6:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   190da:	2903      	cmp	r1, #3
   190dc:	f47f af5a 	bne.w	18f94 <rpc_message_free+0x64>
   190e0:	2108      	movs	r1, #8
   190e2:	e7c1      	b.n	19068 <rpc_message_free+0x138>
   190e4:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
   190e8:	2903      	cmp	r1, #3
   190ea:	f47f af57 	bne.w	18f9c <rpc_message_free+0x6c>
   190ee:	2109      	movs	r1, #9
   190f0:	e7ba      	b.n	19068 <rpc_message_free+0x138>
   190f2:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   190f6:	2903      	cmp	r1, #3
   190f8:	f47f af54 	bne.w	18fa4 <rpc_message_free+0x74>
   190fc:	210a      	movs	r1, #10
   190fe:	e7b3      	b.n	19068 <rpc_message_free+0x138>
   19100:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
   19104:	2903      	cmp	r1, #3
   19106:	f47f af51 	bne.w	18fac <rpc_message_free+0x7c>
   1910a:	210b      	movs	r1, #11
   1910c:	e7ac      	b.n	19068 <rpc_message_free+0x138>
   1910e:	200e      	movs	r0, #14
   19110:	4770      	bx	lr
   19112:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   19116:	2903      	cmp	r1, #3
   19118:	f47f af4c 	bne.w	18fb4 <rpc_message_free+0x84>
   1911c:	210c      	movs	r1, #12
   1911e:	e7a3      	b.n	19068 <rpc_message_free+0x138>
   19120:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   19124:	2903      	cmp	r1, #3
   19126:	f47f af49 	bne.w	18fbc <rpc_message_free+0x8c>
   1912a:	210d      	movs	r1, #13
   1912c:	e79c      	b.n	19068 <rpc_message_free+0x138>
   1912e:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
   19132:	2903      	cmp	r1, #3
   19134:	f47f af46 	bne.w	18fc4 <rpc_message_free+0x94>
   19138:	210e      	movs	r1, #14
   1913a:	e795      	b.n	19068 <rpc_message_free+0x138>
   1913c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   19140:	2b03      	cmp	r3, #3
   19142:	f47f af43 	bne.w	18fcc <rpc_message_free+0x9c>
   19146:	4603      	mov	r3, r0
   19148:	210f      	movs	r1, #15
   1914a:	e78d      	b.n	19068 <rpc_message_free+0x138>
   1914c:	20020a1c 	.word	0x20020a1c
   19150:	20020ab4 	.word	0x20020ab4

00019154 <rpc_message_data_free>:
   19154:	2800      	cmp	r0, #0
   19156:	f000 8091 	beq.w	1927c <rpc_message_data_free+0x128>
   1915a:	2900      	cmp	r1, #0
   1915c:	f000 80e4 	beq.w	19328 <rpc_message_data_free+0x1d4>
   19160:	b538      	push	{r3, r4, r5, lr}
   19162:	4a81      	ldr	r2, [pc, #516]	; (19368 <rpc_message_data_free+0x214>)
   19164:	6853      	ldr	r3, [r2, #4]
   19166:	2b00      	cmp	r3, #0
   19168:	f000 808a 	beq.w	19280 <rpc_message_data_free+0x12c>
   1916c:	4b7f      	ldr	r3, [pc, #508]	; (1936c <rpc_message_data_free+0x218>)
   1916e:	681c      	ldr	r4, [r3, #0]
   19170:	42a1      	cmp	r1, r4
   19172:	f000 8087 	beq.w	19284 <rpc_message_data_free+0x130>
   19176:	689c      	ldr	r4, [r3, #8]
   19178:	42a1      	cmp	r1, r4
   1917a:	f000 808f 	beq.w	1929c <rpc_message_data_free+0x148>
   1917e:	691c      	ldr	r4, [r3, #16]
   19180:	42a1      	cmp	r1, r4
   19182:	f000 8091 	beq.w	192a8 <rpc_message_data_free+0x154>
   19186:	699c      	ldr	r4, [r3, #24]
   19188:	42a1      	cmp	r1, r4
   1918a:	f000 8093 	beq.w	192b4 <rpc_message_data_free+0x160>
   1918e:	6a1c      	ldr	r4, [r3, #32]
   19190:	42a1      	cmp	r1, r4
   19192:	f000 8095 	beq.w	192c0 <rpc_message_data_free+0x16c>
   19196:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   19198:	42a1      	cmp	r1, r4
   1919a:	f000 8097 	beq.w	192cc <rpc_message_data_free+0x178>
   1919e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   191a0:	42a1      	cmp	r1, r4
   191a2:	f000 8099 	beq.w	192d8 <rpc_message_data_free+0x184>
   191a6:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   191a8:	42a1      	cmp	r1, r4
   191aa:	f000 809b 	beq.w	192e4 <rpc_message_data_free+0x190>
   191ae:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   191b0:	42a1      	cmp	r1, r4
   191b2:	f000 809d 	beq.w	192f0 <rpc_message_data_free+0x19c>
   191b6:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   191b8:	42a1      	cmp	r1, r4
   191ba:	f000 80a0 	beq.w	192fe <rpc_message_data_free+0x1aa>
   191be:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   191c0:	42a1      	cmp	r1, r4
   191c2:	f000 80a3 	beq.w	1930c <rpc_message_data_free+0x1b8>
   191c6:	6d9c      	ldr	r4, [r3, #88]	; 0x58
   191c8:	42a1      	cmp	r1, r4
   191ca:	f000 80a6 	beq.w	1931a <rpc_message_data_free+0x1c6>
   191ce:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   191d0:	42a1      	cmp	r1, r4
   191d2:	f000 80ab 	beq.w	1932c <rpc_message_data_free+0x1d8>
   191d6:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   191d8:	42a1      	cmp	r1, r4
   191da:	f000 80ae 	beq.w	1933a <rpc_message_data_free+0x1e6>
   191de:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   191e0:	42a1      	cmp	r1, r4
   191e2:	f000 80b1 	beq.w	19348 <rpc_message_data_free+0x1f4>
   191e6:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   191e8:	428c      	cmp	r4, r1
   191ea:	f000 80b4 	beq.w	19356 <rpc_message_data_free+0x202>
   191ee:	6913      	ldr	r3, [r2, #16]
   191f0:	4608      	mov	r0, r1
   191f2:	4798      	blx	r3
   191f4:	4b5e      	ldr	r3, [pc, #376]	; (19370 <rpc_message_data_free+0x21c>)
   191f6:	781a      	ldrb	r2, [r3, #0]
   191f8:	2a04      	cmp	r2, #4
   191fa:	d03b      	beq.n	19274 <rpc_message_data_free+0x120>
   191fc:	7a1a      	ldrb	r2, [r3, #8]
   191fe:	2a04      	cmp	r2, #4
   19200:	d038      	beq.n	19274 <rpc_message_data_free+0x120>
   19202:	7c1a      	ldrb	r2, [r3, #16]
   19204:	2a04      	cmp	r2, #4
   19206:	d035      	beq.n	19274 <rpc_message_data_free+0x120>
   19208:	7e1a      	ldrb	r2, [r3, #24]
   1920a:	2a04      	cmp	r2, #4
   1920c:	d032      	beq.n	19274 <rpc_message_data_free+0x120>
   1920e:	f893 2020 	ldrb.w	r2, [r3, #32]
   19212:	2a04      	cmp	r2, #4
   19214:	d02e      	beq.n	19274 <rpc_message_data_free+0x120>
   19216:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   1921a:	2a04      	cmp	r2, #4
   1921c:	d02a      	beq.n	19274 <rpc_message_data_free+0x120>
   1921e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   19222:	2a04      	cmp	r2, #4
   19224:	d026      	beq.n	19274 <rpc_message_data_free+0x120>
   19226:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1922a:	2a04      	cmp	r2, #4
   1922c:	d022      	beq.n	19274 <rpc_message_data_free+0x120>
   1922e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   19232:	2a04      	cmp	r2, #4
   19234:	d01e      	beq.n	19274 <rpc_message_data_free+0x120>
   19236:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   1923a:	2a04      	cmp	r2, #4
   1923c:	d01a      	beq.n	19274 <rpc_message_data_free+0x120>
   1923e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   19242:	2a04      	cmp	r2, #4
   19244:	d016      	beq.n	19274 <rpc_message_data_free+0x120>
   19246:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   1924a:	2a04      	cmp	r2, #4
   1924c:	d012      	beq.n	19274 <rpc_message_data_free+0x120>
   1924e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   19252:	2a04      	cmp	r2, #4
   19254:	d00e      	beq.n	19274 <rpc_message_data_free+0x120>
   19256:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   1925a:	2a04      	cmp	r2, #4
   1925c:	d00a      	beq.n	19274 <rpc_message_data_free+0x120>
   1925e:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   19262:	2a04      	cmp	r2, #4
   19264:	d006      	beq.n	19274 <rpc_message_data_free+0x120>
   19266:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   1926a:	2b04      	cmp	r3, #4
   1926c:	bf18      	it	ne
   1926e:	2000      	movne	r0, #0
   19270:	d000      	beq.n	19274 <rpc_message_data_free+0x120>
   19272:	bd38      	pop	{r3, r4, r5, pc}
   19274:	f7f8 f9c2 	bl	115fc <bsd_os_application_irq_set>
   19278:	2000      	movs	r0, #0
   1927a:	bd38      	pop	{r3, r4, r5, pc}
   1927c:	2007      	movs	r0, #7
   1927e:	4770      	bx	lr
   19280:	2008      	movs	r0, #8
   19282:	bd38      	pop	{r3, r4, r5, pc}
   19284:	889c      	ldrh	r4, [r3, #4]
   19286:	4284      	cmp	r4, r0
   19288:	f47f af75 	bne.w	19176 <rpc_message_data_free+0x22>
   1928c:	2400      	movs	r4, #0
   1928e:	2000      	movs	r0, #0
   19290:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   19294:	f843 0034 	str.w	r0, [r3, r4, lsl #3]
   19298:	80a8      	strh	r0, [r5, #4]
   1929a:	e7a8      	b.n	191ee <rpc_message_data_free+0x9a>
   1929c:	899c      	ldrh	r4, [r3, #12]
   1929e:	4284      	cmp	r4, r0
   192a0:	f47f af6d 	bne.w	1917e <rpc_message_data_free+0x2a>
   192a4:	2401      	movs	r4, #1
   192a6:	e7f2      	b.n	1928e <rpc_message_data_free+0x13a>
   192a8:	8a9c      	ldrh	r4, [r3, #20]
   192aa:	4284      	cmp	r4, r0
   192ac:	f47f af6b 	bne.w	19186 <rpc_message_data_free+0x32>
   192b0:	2402      	movs	r4, #2
   192b2:	e7ec      	b.n	1928e <rpc_message_data_free+0x13a>
   192b4:	8b9c      	ldrh	r4, [r3, #28]
   192b6:	4284      	cmp	r4, r0
   192b8:	f47f af69 	bne.w	1918e <rpc_message_data_free+0x3a>
   192bc:	2403      	movs	r4, #3
   192be:	e7e6      	b.n	1928e <rpc_message_data_free+0x13a>
   192c0:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
   192c2:	4284      	cmp	r4, r0
   192c4:	f47f af67 	bne.w	19196 <rpc_message_data_free+0x42>
   192c8:	2404      	movs	r4, #4
   192ca:	e7e0      	b.n	1928e <rpc_message_data_free+0x13a>
   192cc:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
   192ce:	4284      	cmp	r4, r0
   192d0:	f47f af65 	bne.w	1919e <rpc_message_data_free+0x4a>
   192d4:	2405      	movs	r4, #5
   192d6:	e7da      	b.n	1928e <rpc_message_data_free+0x13a>
   192d8:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
   192da:	4284      	cmp	r4, r0
   192dc:	f47f af63 	bne.w	191a6 <rpc_message_data_free+0x52>
   192e0:	2406      	movs	r4, #6
   192e2:	e7d4      	b.n	1928e <rpc_message_data_free+0x13a>
   192e4:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   192e6:	4284      	cmp	r4, r0
   192e8:	f47f af61 	bne.w	191ae <rpc_message_data_free+0x5a>
   192ec:	2407      	movs	r4, #7
   192ee:	e7ce      	b.n	1928e <rpc_message_data_free+0x13a>
   192f0:	f8b3 4044 	ldrh.w	r4, [r3, #68]	; 0x44
   192f4:	4284      	cmp	r4, r0
   192f6:	f47f af5e 	bne.w	191b6 <rpc_message_data_free+0x62>
   192fa:	2408      	movs	r4, #8
   192fc:	e7c7      	b.n	1928e <rpc_message_data_free+0x13a>
   192fe:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
   19302:	4284      	cmp	r4, r0
   19304:	f47f af5b 	bne.w	191be <rpc_message_data_free+0x6a>
   19308:	2409      	movs	r4, #9
   1930a:	e7c0      	b.n	1928e <rpc_message_data_free+0x13a>
   1930c:	f8b3 4054 	ldrh.w	r4, [r3, #84]	; 0x54
   19310:	4284      	cmp	r4, r0
   19312:	f47f af58 	bne.w	191c6 <rpc_message_data_free+0x72>
   19316:	240a      	movs	r4, #10
   19318:	e7b9      	b.n	1928e <rpc_message_data_free+0x13a>
   1931a:	f8b3 405c 	ldrh.w	r4, [r3, #92]	; 0x5c
   1931e:	4284      	cmp	r4, r0
   19320:	f47f af55 	bne.w	191ce <rpc_message_data_free+0x7a>
   19324:	240b      	movs	r4, #11
   19326:	e7b2      	b.n	1928e <rpc_message_data_free+0x13a>
   19328:	200e      	movs	r0, #14
   1932a:	4770      	bx	lr
   1932c:	f8b3 4064 	ldrh.w	r4, [r3, #100]	; 0x64
   19330:	4284      	cmp	r4, r0
   19332:	f47f af50 	bne.w	191d6 <rpc_message_data_free+0x82>
   19336:	240c      	movs	r4, #12
   19338:	e7a9      	b.n	1928e <rpc_message_data_free+0x13a>
   1933a:	f8b3 406c 	ldrh.w	r4, [r3, #108]	; 0x6c
   1933e:	4284      	cmp	r4, r0
   19340:	f47f af4d 	bne.w	191de <rpc_message_data_free+0x8a>
   19344:	240d      	movs	r4, #13
   19346:	e7a2      	b.n	1928e <rpc_message_data_free+0x13a>
   19348:	f8b3 4074 	ldrh.w	r4, [r3, #116]	; 0x74
   1934c:	4284      	cmp	r4, r0
   1934e:	f47f af4a 	bne.w	191e6 <rpc_message_data_free+0x92>
   19352:	240e      	movs	r4, #14
   19354:	e79b      	b.n	1928e <rpc_message_data_free+0x13a>
   19356:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
   1935a:	4284      	cmp	r4, r0
   1935c:	bf08      	it	eq
   1935e:	240f      	moveq	r4, #15
   19360:	f47f af45 	bne.w	191ee <rpc_message_data_free+0x9a>
   19364:	e793      	b.n	1928e <rpc_message_data_free+0x13a>
   19366:	bf00      	nop
   19368:	20020a1c 	.word	0x20020a1c
   1936c:	20020a34 	.word	0x20020a34
   19370:	20020ab4 	.word	0x20020ab4

00019374 <packet_free_cb>:
   19374:	b510      	push	{r4, lr}
   19376:	4604      	mov	r4, r0
   19378:	b118      	cbz	r0, 19382 <packet_free_cb+0xe>
   1937a:	6800      	ldr	r0, [r0, #0]
   1937c:	b108      	cbz	r0, 19382 <packet_free_cb+0xe>
   1937e:	f001 f829 	bl	1a3d4 <rpc_gnss_client_data_free>
   19382:	68a0      	ldr	r0, [r4, #8]
   19384:	b118      	cbz	r0, 1938e <packet_free_cb+0x1a>
   19386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1938a:	f7fa b93b 	b.w	13604 <nrf_free>
   1938e:	bd10      	pop	{r4, pc}

00019390 <rpc_gnss_event_handler>:
   19390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19394:	4b64      	ldr	r3, [pc, #400]	; (19528 <rpc_gnss_event_handler+0x198>)
   19396:	4606      	mov	r6, r0
   19398:	6800      	ldr	r0, [r0, #0]
   1939a:	881b      	ldrh	r3, [r3, #0]
   1939c:	6802      	ldr	r2, [r0, #0]
   1939e:	4f63      	ldr	r7, [pc, #396]	; (1952c <rpc_gnss_event_handler+0x19c>)
   193a0:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   193a4:	b084      	sub	sp, #16
   193a6:	460d      	mov	r5, r1
   193a8:	6038      	str	r0, [r7, #0]
   193aa:	d038      	beq.n	1941e <rpc_gnss_event_handler+0x8e>
   193ac:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   193b0:	33ff      	adds	r3, #255	; 0xff
   193b2:	b29b      	uxth	r3, r3
   193b4:	2b02      	cmp	r3, #2
   193b6:	d810      	bhi.n	193da <rpc_gnss_event_handler+0x4a>
   193b8:	4c5d      	ldr	r4, [pc, #372]	; (19530 <rpc_gnss_event_handler+0x1a0>)
   193ba:	6823      	ldr	r3, [r4, #0]
   193bc:	075a      	lsls	r2, r3, #29
   193be:	d410      	bmi.n	193e2 <rpc_gnss_event_handler+0x52>
   193c0:	6823      	ldr	r3, [r4, #0]
   193c2:	079b      	lsls	r3, r3, #30
   193c4:	d503      	bpl.n	193ce <rpc_gnss_event_handler+0x3e>
   193c6:	f244 0303 	movw	r3, #16387	; 0x4003
   193ca:	429d      	cmp	r5, r3
   193cc:	d009      	beq.n	193e2 <rpc_gnss_event_handler+0x52>
   193ce:	6830      	ldr	r0, [r6, #0]
   193d0:	b118      	cbz	r0, 193da <rpc_gnss_event_handler+0x4a>
   193d2:	f000 ffff 	bl	1a3d4 <rpc_gnss_client_data_free>
   193d6:	2300      	movs	r3, #0
   193d8:	603b      	str	r3, [r7, #0]
   193da:	2000      	movs	r0, #0
   193dc:	b004      	add	sp, #16
   193de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   193e2:	2002      	movs	r0, #2
   193e4:	f7fa f904 	bl	135f0 <nrf_malloc>
   193e8:	4680      	mov	r8, r0
   193ea:	2800      	cmp	r0, #0
   193ec:	f000 8093 	beq.w	19516 <rpc_gnss_event_handler+0x186>
   193f0:	2302      	movs	r3, #2
   193f2:	8005      	strh	r5, [r0, #0]
   193f4:	6831      	ldr	r1, [r6, #0]
   193f6:	6872      	ldr	r2, [r6, #4]
   193f8:	484e      	ldr	r0, [pc, #312]	; (19534 <rpc_gnss_event_handler+0x1a4>)
   193fa:	e88d 0106 	stmia.w	sp, {r1, r2, r8}
   193fe:	6800      	ldr	r0, [r0, #0]
   19400:	9303      	str	r3, [sp, #12]
   19402:	6803      	ldr	r3, [r0, #0]
   19404:	4669      	mov	r1, sp
   19406:	685b      	ldr	r3, [r3, #4]
   19408:	4798      	blx	r3
   1940a:	3001      	adds	r0, #1
   1940c:	d070      	beq.n	194f0 <rpc_gnss_event_handler+0x160>
   1940e:	2000      	movs	r0, #0
   19410:	6823      	ldr	r3, [r4, #0]
   19412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   19416:	6023      	str	r3, [r4, #0]
   19418:	b004      	add	sp, #16
   1941a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1941e:	4c44      	ldr	r4, [pc, #272]	; (19530 <rpc_gnss_event_handler+0x1a0>)
   19420:	6823      	ldr	r3, [r4, #0]
   19422:	01d9      	lsls	r1, r3, #7
   19424:	d523      	bpl.n	1946e <rpc_gnss_event_handler+0xde>
   19426:	f242 1302 	movw	r3, #8450	; 0x2102
   1942a:	429d      	cmp	r5, r3
   1942c:	d11f      	bne.n	1946e <rpc_gnss_event_handler+0xde>
   1942e:	6843      	ldr	r3, [r0, #4]
   19430:	b91b      	cbnz	r3, 1943a <rpc_gnss_event_handler+0xaa>
   19432:	6823      	ldr	r3, [r4, #0]
   19434:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   19438:	6023      	str	r3, [r4, #0]
   1943a:	6823      	ldr	r3, [r4, #0]
   1943c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   19440:	6023      	str	r3, [r4, #0]
   19442:	6823      	ldr	r3, [r4, #0]
   19444:	025a      	lsls	r2, r3, #9
   19446:	d430      	bmi.n	194aa <rpc_gnss_event_handler+0x11a>
   19448:	f242 0305 	movw	r3, #8197	; 0x2005
   1944c:	429d      	cmp	r5, r3
   1944e:	d12c      	bne.n	194aa <rpc_gnss_event_handler+0x11a>
   19450:	6823      	ldr	r3, [r4, #0]
   19452:	0299      	lsls	r1, r3, #10
   19454:	d529      	bpl.n	194aa <rpc_gnss_event_handler+0x11a>
   19456:	6843      	ldr	r3, [r0, #4]
   19458:	2b00      	cmp	r3, #0
   1945a:	d157      	bne.n	1950c <rpc_gnss_event_handler+0x17c>
   1945c:	6823      	ldr	r3, [r4, #0]
   1945e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   19462:	6023      	str	r3, [r4, #0]
   19464:	6823      	ldr	r3, [r4, #0]
   19466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1946a:	6023      	str	r3, [r4, #0]
   1946c:	e01d      	b.n	194aa <rpc_gnss_event_handler+0x11a>
   1946e:	6823      	ldr	r3, [r4, #0]
   19470:	025b      	lsls	r3, r3, #9
   19472:	d50e      	bpl.n	19492 <rpc_gnss_event_handler+0x102>
   19474:	f242 1303 	movw	r3, #8451	; 0x2103
   19478:	429d      	cmp	r5, r3
   1947a:	d10a      	bne.n	19492 <rpc_gnss_event_handler+0x102>
   1947c:	6843      	ldr	r3, [r0, #4]
   1947e:	b91b      	cbnz	r3, 19488 <rpc_gnss_event_handler+0xf8>
   19480:	6823      	ldr	r3, [r4, #0]
   19482:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   19486:	6023      	str	r3, [r4, #0]
   19488:	6823      	ldr	r3, [r4, #0]
   1948a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1948e:	6023      	str	r3, [r4, #0]
   19490:	e00b      	b.n	194aa <rpc_gnss_event_handler+0x11a>
   19492:	f242 0301 	movw	r3, #8193	; 0x2001
   19496:	429d      	cmp	r5, r3
   19498:	d10c      	bne.n	194b4 <rpc_gnss_event_handler+0x124>
   1949a:	6843      	ldr	r3, [r0, #4]
   1949c:	b92b      	cbnz	r3, 194aa <rpc_gnss_event_handler+0x11a>
   1949e:	6823      	ldr	r3, [r4, #0]
   194a0:	0c1b      	lsrs	r3, r3, #16
   194a2:	041b      	lsls	r3, r3, #16
   194a4:	f043 0302 	orr.w	r3, r3, #2
   194a8:	6023      	str	r3, [r4, #0]
   194aa:	f000 ff93 	bl	1a3d4 <rpc_gnss_client_data_free>
   194ae:	2300      	movs	r3, #0
   194b0:	603b      	str	r3, [r7, #0]
   194b2:	e77b      	b.n	193ac <rpc_gnss_event_handler+0x1c>
   194b4:	f242 0304 	movw	r3, #8196	; 0x2004
   194b8:	429d      	cmp	r5, r3
   194ba:	d1c5      	bne.n	19448 <rpc_gnss_event_handler+0xb8>
   194bc:	6843      	ldr	r3, [r0, #4]
   194be:	b993      	cbnz	r3, 194e6 <rpc_gnss_event_handler+0x156>
   194c0:	6823      	ldr	r3, [r4, #0]
   194c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   194c6:	6023      	str	r3, [r4, #0]
   194c8:	6823      	ldr	r3, [r4, #0]
   194ca:	b29b      	uxth	r3, r3
   194cc:	2b03      	cmp	r3, #3
   194ce:	6823      	ldr	r3, [r4, #0]
   194d0:	d016      	beq.n	19500 <rpc_gnss_event_handler+0x170>
   194d2:	b29b      	uxth	r3, r3
   194d4:	2b04      	cmp	r3, #4
   194d6:	d1d7      	bne.n	19488 <rpc_gnss_event_handler+0xf8>
   194d8:	6823      	ldr	r3, [r4, #0]
   194da:	0c1b      	lsrs	r3, r3, #16
   194dc:	041b      	lsls	r3, r3, #16
   194de:	f043 0302 	orr.w	r3, r3, #2
   194e2:	6023      	str	r3, [r4, #0]
   194e4:	e7d0      	b.n	19488 <rpc_gnss_event_handler+0xf8>
   194e6:	6823      	ldr	r3, [r4, #0]
   194e8:	b29b      	uxth	r3, r3
   194ea:	2b03      	cmp	r3, #3
   194ec:	d1cc      	bne.n	19488 <rpc_gnss_event_handler+0xf8>
   194ee:	e7f3      	b.n	194d8 <rpc_gnss_event_handler+0x148>
   194f0:	4640      	mov	r0, r8
   194f2:	f7fa f887 	bl	13604 <nrf_free>
   194f6:	6830      	ldr	r0, [r6, #0]
   194f8:	2800      	cmp	r0, #0
   194fa:	f47f af6a 	bne.w	193d2 <rpc_gnss_event_handler+0x42>
   194fe:	e76c      	b.n	193da <rpc_gnss_event_handler+0x4a>
   19500:	0c1b      	lsrs	r3, r3, #16
   19502:	041b      	lsls	r3, r3, #16
   19504:	f043 0304 	orr.w	r3, r3, #4
   19508:	6023      	str	r3, [r4, #0]
   1950a:	e7bd      	b.n	19488 <rpc_gnss_event_handler+0xf8>
   1950c:	6823      	ldr	r3, [r4, #0]
   1950e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   19512:	6023      	str	r3, [r4, #0]
   19514:	e7c9      	b.n	194aa <rpc_gnss_event_handler+0x11a>
   19516:	6830      	ldr	r0, [r6, #0]
   19518:	2800      	cmp	r0, #0
   1951a:	f43f af5e 	beq.w	193da <rpc_gnss_event_handler+0x4a>
   1951e:	f000 ff59 	bl	1a3d4 <rpc_gnss_client_data_free>
   19522:	f8c7 8000 	str.w	r8, [r7]
   19526:	e758      	b.n	193da <rpc_gnss_event_handler+0x4a>
   19528:	20024e4c 	.word	0x20024e4c
   1952c:	20020b38 	.word	0x20020b38
   19530:	20020b34 	.word	0x20020b34
   19534:	20020b3c 	.word	0x20020b3c

00019538 <gnss_interface_write>:
   19538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1953c:	4a75      	ldr	r2, [pc, #468]	; (19714 <gnss_interface_write+0x1dc>)
   1953e:	b09f      	sub	sp, #124	; 0x7c
   19540:	4290      	cmp	r0, r2
   19542:	9d26      	ldr	r5, [sp, #152]	; 0x98
   19544:	f040 80d4 	bne.w	196f0 <gnss_interface_write+0x1b8>
   19548:	2900      	cmp	r1, #0
   1954a:	f000 80c9 	beq.w	196e0 <gnss_interface_write+0x1a8>
   1954e:	2d00      	cmp	r5, #0
   19550:	f000 80c6 	beq.w	196e0 <gnss_interface_write+0x1a8>
   19554:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   19556:	2a02      	cmp	r2, #2
   19558:	f040 80c2 	bne.w	196e0 <gnss_interface_write+0x1a8>
   1955c:	4c6e      	ldr	r4, [pc, #440]	; (19718 <gnss_interface_write+0x1e0>)
   1955e:	6822      	ldr	r2, [r4, #0]
   19560:	b292      	uxth	r2, r2
   19562:	2a02      	cmp	r2, #2
   19564:	d004      	beq.n	19570 <gnss_interface_write+0x38>
   19566:	6822      	ldr	r2, [r4, #0]
   19568:	b292      	uxth	r2, r2
   1956a:	2a04      	cmp	r2, #4
   1956c:	f040 80c6 	bne.w	196fc <gnss_interface_write+0x1c4>
   19570:	0798      	lsls	r0, r3, #30
   19572:	f100 80c9 	bmi.w	19708 <gnss_interface_write+0x1d0>
   19576:	6820      	ldr	r0, [r4, #0]
   19578:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
   1957c:	d065      	beq.n	1964a <gnss_interface_write+0x112>
   1957e:	6822      	ldr	r2, [r4, #0]
   19580:	882b      	ldrh	r3, [r5, #0]
   19582:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   19586:	6022      	str	r2, [r4, #0]
   19588:	6822      	ldr	r2, [r4, #0]
   1958a:	3b01      	subs	r3, #1
   1958c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   19590:	6022      	str	r2, [r4, #0]
   19592:	2b07      	cmp	r3, #7
   19594:	f200 80a4 	bhi.w	196e0 <gnss_interface_write+0x1a8>
   19598:	e8df f003 	tbb	[pc, r3]
   1959c:	696e7378 	.word	0x696e7378
   195a0:	045f5a64 	.word	0x045f5a64
   195a4:	4608      	mov	r0, r1
   195a6:	a902      	add	r1, sp, #8
   195a8:	f000 fec8 	bl	1a33c <rpc_gnss_serialize_integrity>
   195ac:	2172      	movs	r1, #114	; 0x72
   195ae:	4668      	mov	r0, sp
   195b0:	f000 fede 	bl	1a370 <rpc_gnss_client_request_alloc>
   195b4:	4605      	mov	r5, r0
   195b6:	9800      	ldr	r0, [sp, #0]
   195b8:	2d00      	cmp	r5, #0
   195ba:	d16c      	bne.n	19696 <gnss_interface_write+0x15e>
   195bc:	2800      	cmp	r0, #0
   195be:	d071      	beq.n	196a4 <gnss_interface_write+0x16c>
   195c0:	f241 0605 	movw	r6, #4101	; 0x1005
   195c4:	f04f 0c49 	mov.w	ip, #73	; 0x49
   195c8:	2272      	movs	r2, #114	; 0x72
   195ca:	f04f 0e76 	mov.w	lr, #118	; 0x76
   195ce:	f04f 0943 	mov.w	r9, #67	; 0x43
   195d2:	f04f 0854 	mov.w	r8, #84	; 0x54
   195d6:	4f51      	ldr	r7, [pc, #324]	; (1971c <gnss_interface_write+0x1e4>)
   195d8:	a91e      	add	r1, sp, #120	; 0x78
   195da:	883b      	ldrh	r3, [r7, #0]
   195dc:	f880 c00f 	strb.w	ip, [r0, #15]
   195e0:	3301      	adds	r3, #1
   195e2:	b29b      	uxth	r3, r3
   195e4:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   195e8:	f841 cd74 	str.w	ip, [r1, #-116]!
   195ec:	7145      	strb	r5, [r0, #5]
   195ee:	7185      	strb	r5, [r0, #6]
   195f0:	71c5      	strb	r5, [r0, #7]
   195f2:	7205      	strb	r5, [r0, #8]
   195f4:	7245      	strb	r5, [r0, #9]
   195f6:	7285      	strb	r5, [r0, #10]
   195f8:	72c5      	strb	r5, [r0, #11]
   195fa:	7102      	strb	r2, [r0, #4]
   195fc:	f880 900c 	strb.w	r9, [r0, #12]
   19600:	f880 800d 	strb.w	r8, [r0, #13]
   19604:	f880 e00e 	strb.w	lr, [r0, #14]
   19608:	6800      	ldr	r0, [r0, #0]
   1960a:	803b      	strh	r3, [r7, #0]
   1960c:	f003 fd97 	bl	1d13e <memcpy>
   19610:	4b43      	ldr	r3, [pc, #268]	; (19720 <gnss_interface_write+0x1e8>)
   19612:	4631      	mov	r1, r6
   19614:	9800      	ldr	r0, [sp, #0]
   19616:	601d      	str	r5, [r3, #0]
   19618:	f000 febe 	bl	1a398 <rpc_gnss_client_request_send>
   1961c:	2800      	cmp	r0, #0
   1961e:	d148      	bne.n	196b2 <gnss_interface_write+0x17a>
   19620:	6823      	ldr	r3, [r4, #0]
   19622:	0299      	lsls	r1, r3, #10
   19624:	d50d      	bpl.n	19642 <gnss_interface_write+0x10a>
   19626:	4e3f      	ldr	r6, [pc, #252]	; (19724 <gnss_interface_write+0x1ec>)
   19628:	4d3a      	ldr	r5, [pc, #232]	; (19714 <gnss_interface_write+0x1dc>)
   1962a:	e001      	b.n	19630 <gnss_interface_write+0xf8>
   1962c:	2800      	cmp	r0, #0
   1962e:	d150      	bne.n	196d2 <gnss_interface_write+0x19a>
   19630:	4631      	mov	r1, r6
   19632:	4628      	mov	r0, r5
   19634:	f7f7 fea2 	bl	1137c <bsd_os_timedwait>
   19638:	6823      	ldr	r3, [r4, #0]
   1963a:	029a      	lsls	r2, r3, #10
   1963c:	d4f6      	bmi.n	1962c <gnss_interface_write+0xf4>
   1963e:	2800      	cmp	r0, #0
   19640:	d147      	bne.n	196d2 <gnss_interface_write+0x19a>
   19642:	6823      	ldr	r3, [r4, #0]
   19644:	039b      	lsls	r3, r3, #14
   19646:	d53f      	bpl.n	196c8 <gnss_interface_write+0x190>
   19648:	2000      	movs	r0, #0
   1964a:	b01f      	add	sp, #124	; 0x7c
   1964c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19650:	4608      	mov	r0, r1
   19652:	a902      	add	r1, sp, #8
   19654:	f000 fe2a 	bl	1a2ac <rpc_gnss_serialize_time_and_sv_tow>
   19658:	e7a8      	b.n	195ac <gnss_interface_write+0x74>
   1965a:	4608      	mov	r0, r1
   1965c:	a902      	add	r1, sp, #8
   1965e:	f000 fe4d 	bl	1a2fc <rpc_gnss_serialize_location>
   19662:	e7a3      	b.n	195ac <gnss_interface_write+0x74>
   19664:	4608      	mov	r0, r1
   19666:	a902      	add	r1, sp, #8
   19668:	f000 fe06 	bl	1a278 <rpc_gnss_serialize_nequick>
   1966c:	e79e      	b.n	195ac <gnss_interface_write+0x74>
   1966e:	4608      	mov	r0, r1
   19670:	a902      	add	r1, sp, #8
   19672:	f000 fddd 	bl	1a230 <rpc_gnss_serialize_klob>
   19676:	e799      	b.n	195ac <gnss_interface_write+0x74>
   19678:	4608      	mov	r0, r1
   1967a:	a902      	add	r1, sp, #8
   1967c:	f000 fda6 	bl	1a1cc <rpc_gnss_serialize_alm>
   19680:	e794      	b.n	195ac <gnss_interface_write+0x74>
   19682:	4608      	mov	r0, r1
   19684:	a902      	add	r1, sp, #8
   19686:	f000 fd4f 	bl	1a128 <rpc_gnss_serialize_ephe>
   1968a:	e78f      	b.n	195ac <gnss_interface_write+0x74>
   1968c:	4608      	mov	r0, r1
   1968e:	a902      	add	r1, sp, #8
   19690:	f000 fd28 	bl	1a0e4 <rpc_gnss_serialize_utc>
   19694:	e78a      	b.n	195ac <gnss_interface_write+0x74>
   19696:	b128      	cbz	r0, 196a4 <gnss_interface_write+0x16c>
   19698:	6803      	ldr	r3, [r0, #0]
   1969a:	b11b      	cbz	r3, 196a4 <gnss_interface_write+0x16c>
   1969c:	4618      	mov	r0, r3
   1969e:	f000 fe99 	bl	1a3d4 <rpc_gnss_client_data_free>
   196a2:	9800      	ldr	r0, [sp, #0]
   196a4:	f000 fe8e 	bl	1a3c4 <rpc_gnss_client_message_free>
   196a8:	2023      	movs	r0, #35	; 0x23
   196aa:	f7f7 fefb 	bl	114a4 <bsd_os_errno_set>
   196ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   196b2:	6823      	ldr	r3, [r4, #0]
   196b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   196b8:	6023      	str	r3, [r4, #0]
   196ba:	6823      	ldr	r3, [r4, #0]
   196bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   196c0:	6023      	str	r3, [r4, #0]
   196c2:	b01f      	add	sp, #124	; 0x7c
   196c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   196c8:	2005      	movs	r0, #5
   196ca:	6823      	ldr	r3, [r4, #0]
   196cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   196d0:	6023      	str	r3, [r4, #0]
   196d2:	f7f7 fee7 	bl	114a4 <bsd_os_errno_set>
   196d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   196da:	b01f      	add	sp, #124	; 0x7c
   196dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   196e0:	2016      	movs	r0, #22
   196e2:	f7f7 fedf 	bl	114a4 <bsd_os_errno_set>
   196e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   196ea:	b01f      	add	sp, #124	; 0x7c
   196ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   196f0:	2009      	movs	r0, #9
   196f2:	f7f7 fed7 	bl	114a4 <bsd_os_errno_set>
   196f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   196fa:	e7a6      	b.n	1964a <gnss_interface_write+0x112>
   196fc:	2039      	movs	r0, #57	; 0x39
   196fe:	f7f7 fed1 	bl	114a4 <bsd_os_errno_set>
   19702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19706:	e7a0      	b.n	1964a <gnss_interface_write+0x112>
   19708:	202d      	movs	r0, #45	; 0x2d
   1970a:	f7f7 fecb 	bl	114a4 <bsd_os_errno_set>
   1970e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19712:	e79a      	b.n	1964a <gnss_interface_write+0x112>
   19714:	49765443 	.word	0x49765443
   19718:	20020b34 	.word	0x20020b34
   1971c:	20024e4c 	.word	0x20024e4c
   19720:	20020b38 	.word	0x20020b38
   19724:	2002c58c 	.word	0x2002c58c

00019728 <gnss_interface_read>:
   19728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1972c:	4c4a      	ldr	r4, [pc, #296]	; (19858 <gnss_interface_read+0x130>)
   1972e:	b0b7      	sub	sp, #220	; 0xdc
   19730:	42a0      	cmp	r0, r4
   19732:	f040 81ec 	bne.w	19b0e <gnss_interface_read+0x3e6>
   19736:	4688      	mov	r8, r1
   19738:	2900      	cmp	r1, #0
   1973a:	f000 81e2 	beq.w	19b02 <gnss_interface_read+0x3da>
   1973e:	2ad7      	cmp	r2, #215	; 0xd7
   19740:	f240 81df 	bls.w	19b02 <gnss_interface_read+0x3da>
   19744:	4d45      	ldr	r5, [pc, #276]	; (1985c <gnss_interface_read+0x134>)
   19746:	4699      	mov	r9, r3
   19748:	682b      	ldr	r3, [r5, #0]
   1974a:	b29b      	uxth	r3, r3
   1974c:	2b04      	cmp	r3, #4
   1974e:	d004      	beq.n	1975a <gnss_interface_read+0x32>
   19750:	682b      	ldr	r3, [r5, #0]
   19752:	b29b      	uxth	r3, r3
   19754:	2b02      	cmp	r3, #2
   19756:	f040 81e0 	bne.w	19b1a <gnss_interface_read+0x3f2>
   1975a:	2102      	movs	r1, #2
   1975c:	20b6      	movs	r0, #182	; 0xb6
   1975e:	2400      	movs	r4, #0
   19760:	682b      	ldr	r3, [r5, #0]
   19762:	f10d 020e 	add.w	r2, sp, #14
   19766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1976a:	602b      	str	r3, [r5, #0]
   1976c:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 19864 <gnss_interface_read+0x13c>
   19770:	ab08      	add	r3, sp, #32
   19772:	4f3b      	ldr	r7, [pc, #236]	; (19860 <gnss_interface_read+0x138>)
   19774:	4e38      	ldr	r6, [pc, #224]	; (19858 <gnss_interface_read+0x130>)
   19776:	9005      	str	r0, [sp, #20]
   19778:	9107      	str	r1, [sp, #28]
   1977a:	9304      	str	r3, [sp, #16]
   1977c:	9206      	str	r2, [sp, #24]
   1977e:	ea09 0b01 	and.w	fp, r9, r1
   19782:	f8da 0000 	ldr.w	r0, [sl]
   19786:	464a      	mov	r2, r9
   19788:	6803      	ldr	r3, [r0, #0]
   1978a:	a904      	add	r1, sp, #16
   1978c:	689b      	ldr	r3, [r3, #8]
   1978e:	4798      	blx	r3
   19790:	2800      	cmp	r0, #0
   19792:	da11      	bge.n	197b8 <gnss_interface_read+0x90>
   19794:	f1bb 0f00 	cmp.w	fp, #0
   19798:	d138      	bne.n	1980c <gnss_interface_read+0xe4>
   1979a:	682b      	ldr	r3, [r5, #0]
   1979c:	03d8      	lsls	r0, r3, #15
   1979e:	d4f0      	bmi.n	19782 <gnss_interface_read+0x5a>
   197a0:	b10c      	cbz	r4, 197a6 <gnss_interface_read+0x7e>
   197a2:	e7ee      	b.n	19782 <gnss_interface_read+0x5a>
   197a4:	b930      	cbnz	r0, 197b4 <gnss_interface_read+0x8c>
   197a6:	4639      	mov	r1, r7
   197a8:	4630      	mov	r0, r6
   197aa:	f7f7 fde7 	bl	1137c <bsd_os_timedwait>
   197ae:	682b      	ldr	r3, [r5, #0]
   197b0:	03d9      	lsls	r1, r3, #15
   197b2:	d5f7      	bpl.n	197a4 <gnss_interface_read+0x7c>
   197b4:	4604      	mov	r4, r0
   197b6:	e7e4      	b.n	19782 <gnss_interface_read+0x5a>
   197b8:	f244 0202 	movw	r2, #16386	; 0x4002
   197bc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   197c0:	4293      	cmp	r3, r2
   197c2:	d039      	beq.n	19838 <gnss_interface_read+0x110>
   197c4:	f244 0201 	movw	r2, #16385	; 0x4001
   197c8:	4293      	cmp	r3, r2
   197ca:	d04d      	beq.n	19868 <gnss_interface_read+0x140>
   197cc:	f244 0203 	movw	r2, #16387	; 0x4003
   197d0:	4293      	cmp	r3, r2
   197d2:	f040 8196 	bne.w	19b02 <gnss_interface_read+0x3da>
   197d6:	2201      	movs	r2, #1
   197d8:	2414      	movs	r4, #20
   197da:	9b08      	ldr	r3, [sp, #32]
   197dc:	f888 2000 	strb.w	r2, [r8]
   197e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   197e2:	f8c8 3008 	str.w	r3, [r8, #8]
   197e6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   197ea:	e9c8 2303 	strd	r2, r3, [r8, #12]
   197ee:	f8da 0000 	ldr.w	r0, [sl]
   197f2:	6803      	ldr	r3, [r0, #0]
   197f4:	68db      	ldr	r3, [r3, #12]
   197f6:	4798      	blx	r3
   197f8:	2800      	cmp	r0, #0
   197fa:	dd03      	ble.n	19804 <gnss_interface_read+0xdc>
   197fc:	682b      	ldr	r3, [r5, #0]
   197fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   19802:	602b      	str	r3, [r5, #0]
   19804:	4620      	mov	r0, r4
   19806:	b037      	add	sp, #220	; 0xdc
   19808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1980c:	1c42      	adds	r2, r0, #1
   1980e:	4603      	mov	r3, r0
   19810:	d1d2      	bne.n	197b8 <gnss_interface_read+0x90>
   19812:	b93c      	cbnz	r4, 19824 <gnss_interface_read+0xfc>
   19814:	461c      	mov	r4, r3
   19816:	2023      	movs	r0, #35	; 0x23
   19818:	f7f7 fe44 	bl	114a4 <bsd_os_errno_set>
   1981c:	4620      	mov	r0, r4
   1981e:	b037      	add	sp, #220	; 0xdc
   19820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19824:	9001      	str	r0, [sp, #4]
   19826:	4620      	mov	r0, r4
   19828:	f7f7 fe3c 	bl	114a4 <bsd_os_errno_set>
   1982c:	9b01      	ldr	r3, [sp, #4]
   1982e:	461c      	mov	r4, r3
   19830:	4620      	mov	r0, r4
   19832:	b037      	add	sp, #220	; 0xdc
   19834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19838:	a808      	add	r0, sp, #32
   1983a:	f003 fc45 	bl	1d0c8 <strlen>
   1983e:	2302      	movs	r3, #2
   19840:	1c44      	adds	r4, r0, #1
   19842:	b2a4      	uxth	r4, r4
   19844:	f808 3b08 	strb.w	r3, [r8], #8
   19848:	4622      	mov	r2, r4
   1984a:	a908      	add	r1, sp, #32
   1984c:	4640      	mov	r0, r8
   1984e:	f003 fc76 	bl	1d13e <memcpy>
   19852:	3408      	adds	r4, #8
   19854:	e7cb      	b.n	197ee <gnss_interface_read+0xc6>
   19856:	bf00      	nop
   19858:	49765443 	.word	0x49765443
   1985c:	20020b34 	.word	0x20020b34
   19860:	2002c58c 	.word	0x2002c58c
   19864:	20020b3c 	.word	0x20020b3c
   19868:	2401      	movs	r4, #1
   1986a:	a809      	add	r0, sp, #36	; 0x24
   1986c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   1986e:	e9c8 0102 	strd	r0, r1, [r8, #8]
   19872:	e9c8 2304 	strd	r2, r3, [r8, #16]
   19876:	990d      	ldr	r1, [sp, #52]	; 0x34
   19878:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1987a:	f888 4000 	strb.w	r4, [r8]
   1987e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19880:	f8c8 1018 	str.w	r1, [r8, #24]
   19884:	9910      	ldr	r1, [sp, #64]	; 0x40
   19886:	f8c8 201c 	str.w	r2, [r8, #28]
   1988a:	f8c8 3020 	str.w	r3, [r8, #32]
   1988e:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   19892:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   19896:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
   1989a:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   1989e:	f888 2044 	strb.w	r2, [r8, #68]	; 0x44
   198a2:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   198a6:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
   198aa:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   198ae:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
   198b2:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   198b6:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
   198ba:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
   198be:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   198c2:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   198c6:	f8a8 1028 	strh.w	r1, [r8, #40]	; 0x28
   198ca:	f888 302e 	strb.w	r3, [r8, #46]	; 0x2e
   198ce:	f8c8 202a 	str.w	r2, [r8, #42]	; 0x2a
   198d2:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   198d6:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   198da:	9b18      	ldr	r3, [sp, #96]	; 0x60
   198dc:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   198e0:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   198e4:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   198e8:	f3c3 210f 	ubfx	r1, r3, #8, #16
   198ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   198ee:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   198f2:	f8a8 0030 	strh.w	r0, [r8, #48]	; 0x30
   198f6:	f8a8 104a 	strh.w	r1, [r8, #74]	; 0x4a
   198fa:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   198fe:	f3c3 230f 	ubfx	r3, r3, #8, #16
   19902:	f8a8 2056 	strh.w	r2, [r8, #86]	; 0x56
   19906:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   1990a:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
   1990e:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   19912:	f8a8 1046 	strh.w	r1, [r8, #70]	; 0x46
   19916:	f888 2048 	strb.w	r2, [r8, #72]	; 0x48
   1991a:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   1991e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   19922:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
   19926:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   1992a:	f888 1050 	strb.w	r1, [r8, #80]	; 0x50
   1992e:	f8a8 2052 	strh.w	r2, [r8, #82]	; 0x52
   19932:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
   19936:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   1993a:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   1993e:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   19942:	f8c8 1058 	str.w	r1, [r8, #88]	; 0x58
   19946:	f888 205c 	strb.w	r2, [r8, #92]	; 0x5c
   1994a:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   1994e:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   19952:	f8a8 305e 	strh.w	r3, [r8, #94]	; 0x5e
   19956:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   1995a:	f888 1060 	strb.w	r1, [r8, #96]	; 0x60
   1995e:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
   19962:	f888 3068 	strb.w	r3, [r8, #104]	; 0x68
   19966:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   1996a:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   1996e:	9a22      	ldr	r2, [sp, #136]	; 0x88
   19970:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   19974:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   19978:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   1997c:	f3c2 220f 	ubfx	r2, r2, #8, #16
   19980:	f8a8 106e 	strh.w	r1, [r8, #110]	; 0x6e
   19984:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   19988:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1998c:	f8a8 207a 	strh.w	r2, [r8, #122]	; 0x7a
   19990:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   19994:	f8a8 3086 	strh.w	r3, [r8, #134]	; 0x86
   19998:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   1999c:	f8a8 106a 	strh.w	r1, [r8, #106]	; 0x6a
   199a0:	f888 206c 	strb.w	r2, [r8, #108]	; 0x6c
   199a4:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   199a8:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   199ac:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
   199b0:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   199b4:	f888 1074 	strb.w	r1, [r8, #116]	; 0x74
   199b8:	f8a8 2076 	strh.w	r2, [r8, #118]	; 0x76
   199bc:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
   199c0:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   199c4:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   199c8:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   199cc:	f8c8 107c 	str.w	r1, [r8, #124]	; 0x7c
   199d0:	f888 2080 	strb.w	r2, [r8, #128]	; 0x80
   199d4:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   199d8:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   199dc:	f8a8 3082 	strh.w	r3, [r8, #130]	; 0x82
   199e0:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   199e4:	f888 1084 	strb.w	r1, [r8, #132]	; 0x84
   199e8:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
   199ec:	f888 308c 	strb.w	r3, [r8, #140]	; 0x8c
   199f0:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   199f4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   199f6:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   199fa:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   199fe:	f3c3 210f 	ubfx	r1, r3, #8, #16
   19a02:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   19a04:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   19a08:	f8a8 1092 	strh.w	r1, [r8, #146]	; 0x92
   19a0c:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   19a10:	f8a8 209e 	strh.w	r2, [r8, #158]	; 0x9e
   19a14:	f3c3 230f 	ubfx	r3, r3, #8, #16
   19a18:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   19a1c:	f8a8 008e 	strh.w	r0, [r8, #142]	; 0x8e
   19a20:	f8a8 30aa 	strh.w	r3, [r8, #170]	; 0xaa
   19a24:	f888 1090 	strb.w	r1, [r8, #144]	; 0x90
   19a28:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   19a2c:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   19a30:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
   19a34:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   19a38:	f888 3098 	strb.w	r3, [r8, #152]	; 0x98
   19a3c:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   19a40:	f8a8 109a 	strh.w	r1, [r8, #154]	; 0x9a
   19a44:	f888 209c 	strb.w	r2, [r8, #156]	; 0x9c
   19a48:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   19a4c:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   19a50:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
   19a54:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   19a58:	f888 10a4 	strb.w	r1, [r8, #164]	; 0xa4
   19a5c:	f8a8 20a6 	strh.w	r2, [r8, #166]	; 0xa6
   19a60:	f888 30a8 	strb.w	r3, [r8, #168]	; 0xa8
   19a64:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   19a68:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   19a6c:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   19a70:	f8c8 10ac 	str.w	r1, [r8, #172]	; 0xac
   19a74:	f888 20b0 	strb.w	r2, [r8, #176]	; 0xb0
   19a78:	f8a8 30b2 	strh.w	r3, [r8, #178]	; 0xb2
   19a7c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   19a80:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   19a84:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   19a88:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   19a8a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   19a8e:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   19a92:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   19a96:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   19a9a:	f3c2 220f 	ubfx	r2, r2, #8, #16
   19a9e:	f8a8 10b6 	strh.w	r1, [r8, #182]	; 0xb6
   19aa2:	f8a8 30ce 	strh.w	r3, [r8, #206]	; 0xce
   19aa6:	f888 40b4 	strb.w	r4, [r8, #180]	; 0xb4
   19aaa:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
   19aae:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   19ab2:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   19ab6:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   19aba:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   19abe:	f888 10bc 	strb.w	r1, [r8, #188]	; 0xbc
   19ac2:	f8a8 20be 	strh.w	r2, [r8, #190]	; 0xbe
   19ac6:	f8c8 00b8 	str.w	r0, [r8, #184]	; 0xb8
   19aca:	f888 30c0 	strb.w	r3, [r8, #192]	; 0xc0
   19ace:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   19ad2:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   19ad6:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   19ada:	f8c8 10c4 	str.w	r1, [r8, #196]	; 0xc4
   19ade:	f888 20c8 	strb.w	r2, [r8, #200]	; 0xc8
   19ae2:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   19ae6:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   19aea:	f8a8 30ca 	strh.w	r3, [r8, #202]	; 0xca
   19aee:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   19af2:	f888 10cc 	strb.w	r1, [r8, #204]	; 0xcc
   19af6:	f8c8 20d0 	str.w	r2, [r8, #208]	; 0xd0
   19afa:	f888 30d4 	strb.w	r3, [r8, #212]	; 0xd4
   19afe:	24d8      	movs	r4, #216	; 0xd8
   19b00:	e675      	b.n	197ee <gnss_interface_read+0xc6>
   19b02:	2016      	movs	r0, #22
   19b04:	f7f7 fcce 	bl	114a4 <bsd_os_errno_set>
   19b08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19b0c:	e67a      	b.n	19804 <gnss_interface_read+0xdc>
   19b0e:	2009      	movs	r0, #9
   19b10:	f7f7 fcc8 	bl	114a4 <bsd_os_errno_set>
   19b14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19b18:	e674      	b.n	19804 <gnss_interface_read+0xdc>
   19b1a:	2039      	movs	r0, #57	; 0x39
   19b1c:	f7f7 fcc2 	bl	114a4 <bsd_os_errno_set>
   19b20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19b24:	e66e      	b.n	19804 <gnss_interface_read+0xdc>
   19b26:	bf00      	nop

00019b28 <gnss_interface_setopt>:
   19b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19b2c:	f241 1402 	movw	r4, #4354	; 0x1102
   19b30:	4222      	tst	r2, r4
   19b32:	b086      	sub	sp, #24
   19b34:	4d9c      	ldr	r5, [pc, #624]	; (19da8 <gnss_interface_setopt+0x280>)
   19b36:	d004      	beq.n	19b42 <gnss_interface_setopt+0x1a>
   19b38:	682c      	ldr	r4, [r5, #0]
   19b3a:	b2a4      	uxth	r4, r4
   19b3c:	2c02      	cmp	r4, #2
   19b3e:	f040 8104 	bne.w	19d4a <gnss_interface_setopt+0x222>
   19b42:	682c      	ldr	r4, [r5, #0]
   19b44:	0264      	lsls	r4, r4, #9
   19b46:	f100 8128 	bmi.w	19d9a <gnss_interface_setopt+0x272>
   19b4a:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   19b4e:	f040 811e 	bne.w	19d8e <gnss_interface_setopt+0x266>
   19b52:	4996      	ldr	r1, [pc, #600]	; (19dac <gnss_interface_setopt+0x284>)
   19b54:	4288      	cmp	r0, r1
   19b56:	f040 8114 	bne.w	19d82 <gnss_interface_setopt+0x25a>
   19b5a:	3a01      	subs	r2, #1
   19b5c:	2a08      	cmp	r2, #8
   19b5e:	f200 80ec 	bhi.w	19d3a <gnss_interface_setopt+0x212>
   19b62:	e8df f012 	tbh	[pc, r2, lsl #1]
   19b66:	0075      	.short	0x0075
   19b68:	00c200d8 	.word	0x00c200d8
   19b6c:	008100cc 	.word	0x008100cc
   19b70:	0098008c 	.word	0x0098008c
   19b74:	000900af 	.word	0x000900af
   19b78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19b7a:	2a01      	cmp	r2, #1
   19b7c:	f040 80dd 	bne.w	19d3a <gnss_interface_setopt+0x212>
   19b80:	f241 1603 	movw	r6, #4355	; 0x1103
   19b84:	2240      	movs	r2, #64	; 0x40
   19b86:	4637      	mov	r7, r6
   19b88:	781b      	ldrb	r3, [r3, #0]
   19b8a:	9202      	str	r2, [sp, #8]
   19b8c:	f88d 3015 	strb.w	r3, [sp, #21]
   19b90:	682b      	ldr	r3, [r5, #0]
   19b92:	2112      	movs	r1, #18
   19b94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   19b98:	4668      	mov	r0, sp
   19b9a:	602b      	str	r3, [r5, #0]
   19b9c:	f000 fbe8 	bl	1a370 <rpc_gnss_client_request_alloc>
   19ba0:	4604      	mov	r4, r0
   19ba2:	9800      	ldr	r0, [sp, #0]
   19ba4:	2c00      	cmp	r4, #0
   19ba6:	f040 80d6 	bne.w	19d56 <gnss_interface_setopt+0x22e>
   19baa:	2800      	cmp	r0, #0
   19bac:	f000 80da 	beq.w	19d64 <gnss_interface_setopt+0x23c>
   19bb0:	2212      	movs	r2, #18
   19bb2:	f04f 0876 	mov.w	r8, #118	; 0x76
   19bb6:	f04f 0e49 	mov.w	lr, #73	; 0x49
   19bba:	f04f 0a43 	mov.w	sl, #67	; 0x43
   19bbe:	f04f 0954 	mov.w	r9, #84	; 0x54
   19bc2:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 19db4 <gnss_interface_setopt+0x28c>
   19bc6:	a906      	add	r1, sp, #24
   19bc8:	f8bc 3000 	ldrh.w	r3, [ip]
   19bcc:	f880 800e 	strb.w	r8, [r0, #14]
   19bd0:	3301      	adds	r3, #1
   19bd2:	b29b      	uxth	r3, r3
   19bd4:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   19bd8:	f841 6d14 	str.w	r6, [r1, #-20]!
   19bdc:	7144      	strb	r4, [r0, #5]
   19bde:	7184      	strb	r4, [r0, #6]
   19be0:	71c4      	strb	r4, [r0, #7]
   19be2:	7204      	strb	r4, [r0, #8]
   19be4:	7244      	strb	r4, [r0, #9]
   19be6:	7284      	strb	r4, [r0, #10]
   19be8:	72c4      	strb	r4, [r0, #11]
   19bea:	7102      	strb	r2, [r0, #4]
   19bec:	f880 a00c 	strb.w	sl, [r0, #12]
   19bf0:	f880 900d 	strb.w	r9, [r0, #13]
   19bf4:	f880 e00f 	strb.w	lr, [r0, #15]
   19bf8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 19db8 <gnss_interface_setopt+0x290>
   19bfc:	6800      	ldr	r0, [r0, #0]
   19bfe:	f8ac 3000 	strh.w	r3, [ip]
   19c02:	f003 fa9c 	bl	1d13e <memcpy>
   19c06:	4639      	mov	r1, r7
   19c08:	9800      	ldr	r0, [sp, #0]
   19c0a:	f8c8 4000 	str.w	r4, [r8]
   19c0e:	f000 fbc3 	bl	1a398 <rpc_gnss_client_request_send>
   19c12:	2800      	cmp	r0, #0
   19c14:	f040 80ab 	bne.w	19d6e <gnss_interface_setopt+0x246>
   19c18:	4f65      	ldr	r7, [pc, #404]	; (19db0 <gnss_interface_setopt+0x288>)
   19c1a:	4e64      	ldr	r6, [pc, #400]	; (19dac <gnss_interface_setopt+0x284>)
   19c1c:	4639      	mov	r1, r7
   19c1e:	4630      	mov	r0, r6
   19c20:	f7f7 fbac 	bl	1137c <bsd_os_timedwait>
   19c24:	682c      	ldr	r4, [r5, #0]
   19c26:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   19c2a:	d1f7      	bne.n	19c1c <gnss_interface_setopt+0xf4>
   19c2c:	f8d8 0000 	ldr.w	r0, [r8]
   19c30:	b118      	cbz	r0, 19c3a <gnss_interface_setopt+0x112>
   19c32:	f000 fbcf 	bl	1a3d4 <rpc_gnss_client_data_free>
   19c36:	f8c8 4000 	str.w	r4, [r8]
   19c3a:	682b      	ldr	r3, [r5, #0]
   19c3c:	021b      	lsls	r3, r3, #8
   19c3e:	d576      	bpl.n	19d2e <gnss_interface_setopt+0x206>
   19c40:	2000      	movs	r0, #0
   19c42:	682b      	ldr	r3, [r5, #0]
   19c44:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   19c48:	602b      	str	r3, [r5, #0]
   19c4a:	b006      	add	sp, #24
   19c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19c50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19c52:	2a02      	cmp	r2, #2
   19c54:	d171      	bne.n	19d3a <gnss_interface_setopt+0x212>
   19c56:	2208      	movs	r2, #8
   19c58:	f241 1603 	movw	r6, #4355	; 0x1103
   19c5c:	881b      	ldrh	r3, [r3, #0]
   19c5e:	9202      	str	r2, [sp, #8]
   19c60:	f8ad 300f 	strh.w	r3, [sp, #15]
   19c64:	4637      	mov	r7, r6
   19c66:	e793      	b.n	19b90 <gnss_interface_setopt+0x68>
   19c68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19c6a:	2a01      	cmp	r2, #1
   19c6c:	d165      	bne.n	19d3a <gnss_interface_setopt+0x212>
   19c6e:	f241 1603 	movw	r6, #4355	; 0x1103
   19c72:	781b      	ldrb	r3, [r3, #0]
   19c74:	9202      	str	r2, [sp, #8]
   19c76:	f88d 300c 	strb.w	r3, [sp, #12]
   19c7a:	4637      	mov	r7, r6
   19c7c:	e788      	b.n	19b90 <gnss_interface_setopt+0x68>
   19c7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19c80:	2a01      	cmp	r2, #1
   19c82:	d15a      	bne.n	19d3a <gnss_interface_setopt+0x212>
   19c84:	2202      	movs	r2, #2
   19c86:	f241 1603 	movw	r6, #4355	; 0x1103
   19c8a:	781b      	ldrb	r3, [r3, #0]
   19c8c:	9202      	str	r2, [sp, #8]
   19c8e:	f88d 300d 	strb.w	r3, [sp, #13]
   19c92:	4637      	mov	r7, r6
   19c94:	e77c      	b.n	19b90 <gnss_interface_setopt+0x68>
   19c96:	682a      	ldr	r2, [r5, #0]
   19c98:	b292      	uxth	r2, r2
   19c9a:	2a02      	cmp	r2, #2
   19c9c:	d155      	bne.n	19d4a <gnss_interface_setopt+0x222>
   19c9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19ca0:	2a04      	cmp	r2, #4
   19ca2:	d14a      	bne.n	19d3a <gnss_interface_setopt+0x212>
   19ca4:	2101      	movs	r1, #1
   19ca6:	f241 0604 	movw	r6, #4100	; 0x1004
   19caa:	682a      	ldr	r2, [r5, #0]
   19cac:	6818      	ldr	r0, [r3, #0]
   19cae:	0c13      	lsrs	r3, r2, #16
   19cb0:	041b      	lsls	r3, r3, #16
   19cb2:	f043 0303 	orr.w	r3, r3, #3
   19cb6:	f8cd 0009 	str.w	r0, [sp, #9]
   19cba:	602b      	str	r3, [r5, #0]
   19cbc:	f88d 1008 	strb.w	r1, [sp, #8]
   19cc0:	4637      	mov	r7, r6
   19cc2:	e765      	b.n	19b90 <gnss_interface_setopt+0x68>
   19cc4:	682b      	ldr	r3, [r5, #0]
   19cc6:	b29b      	uxth	r3, r3
   19cc8:	2b04      	cmp	r3, #4
   19cca:	d13e      	bne.n	19d4a <gnss_interface_setopt+0x222>
   19ccc:	2300      	movs	r3, #0
   19cce:	f241 0604 	movw	r6, #4100	; 0x1004
   19cd2:	f88d 3008 	strb.w	r3, [sp, #8]
   19cd6:	f88d 3009 	strb.w	r3, [sp, #9]
   19cda:	f88d 300a 	strb.w	r3, [sp, #10]
   19cde:	f88d 300b 	strb.w	r3, [sp, #11]
   19ce2:	f88d 300c 	strb.w	r3, [sp, #12]
   19ce6:	4637      	mov	r7, r6
   19ce8:	e752      	b.n	19b90 <gnss_interface_setopt+0x68>
   19cea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19cec:	2a01      	cmp	r2, #1
   19cee:	d124      	bne.n	19d3a <gnss_interface_setopt+0x212>
   19cf0:	781b      	ldrb	r3, [r3, #0]
   19cf2:	2b01      	cmp	r3, #1
   19cf4:	d121      	bne.n	19d3a <gnss_interface_setopt+0x212>
   19cf6:	f241 1603 	movw	r6, #4355	; 0x1103
   19cfa:	4637      	mov	r7, r6
   19cfc:	e748      	b.n	19b90 <gnss_interface_setopt+0x68>
   19cfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19d00:	2a02      	cmp	r2, #2
   19d02:	d11a      	bne.n	19d3a <gnss_interface_setopt+0x212>
   19d04:	2220      	movs	r2, #32
   19d06:	f241 1603 	movw	r6, #4355	; 0x1103
   19d0a:	881b      	ldrh	r3, [r3, #0]
   19d0c:	9202      	str	r2, [sp, #8]
   19d0e:	f8ad 3013 	strh.w	r3, [sp, #19]
   19d12:	4637      	mov	r7, r6
   19d14:	e73c      	b.n	19b90 <gnss_interface_setopt+0x68>
   19d16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19d18:	2a02      	cmp	r2, #2
   19d1a:	d10e      	bne.n	19d3a <gnss_interface_setopt+0x212>
   19d1c:	2210      	movs	r2, #16
   19d1e:	f241 1603 	movw	r6, #4355	; 0x1103
   19d22:	881b      	ldrh	r3, [r3, #0]
   19d24:	9202      	str	r2, [sp, #8]
   19d26:	f8ad 3011 	strh.w	r3, [sp, #17]
   19d2a:	4637      	mov	r7, r6
   19d2c:	e730      	b.n	19b90 <gnss_interface_setopt+0x68>
   19d2e:	200e      	movs	r0, #14
   19d30:	f7f7 fbb8 	bl	114a4 <bsd_os_errno_set>
   19d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19d38:	e783      	b.n	19c42 <gnss_interface_setopt+0x11a>
   19d3a:	2016      	movs	r0, #22
   19d3c:	f7f7 fbb2 	bl	114a4 <bsd_os_errno_set>
   19d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19d44:	b006      	add	sp, #24
   19d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19d4a:	200e      	movs	r0, #14
   19d4c:	f7f7 fbaa 	bl	114a4 <bsd_os_errno_set>
   19d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19d54:	e779      	b.n	19c4a <gnss_interface_setopt+0x122>
   19d56:	b128      	cbz	r0, 19d64 <gnss_interface_setopt+0x23c>
   19d58:	6803      	ldr	r3, [r0, #0]
   19d5a:	b11b      	cbz	r3, 19d64 <gnss_interface_setopt+0x23c>
   19d5c:	4618      	mov	r0, r3
   19d5e:	f000 fb39 	bl	1a3d4 <rpc_gnss_client_data_free>
   19d62:	9800      	ldr	r0, [sp, #0]
   19d64:	f000 fb2e 	bl	1a3c4 <rpc_gnss_client_message_free>
   19d68:	2023      	movs	r0, #35	; 0x23
   19d6a:	f7f7 fb9b 	bl	114a4 <bsd_os_errno_set>
   19d6e:	682b      	ldr	r3, [r5, #0]
   19d70:	200e      	movs	r0, #14
   19d72:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   19d76:	602b      	str	r3, [r5, #0]
   19d78:	f7f7 fb94 	bl	114a4 <bsd_os_errno_set>
   19d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19d80:	e763      	b.n	19c4a <gnss_interface_setopt+0x122>
   19d82:	2009      	movs	r0, #9
   19d84:	f7f7 fb8e 	bl	114a4 <bsd_os_errno_set>
   19d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19d8c:	e75d      	b.n	19c4a <gnss_interface_setopt+0x122>
   19d8e:	202a      	movs	r0, #42	; 0x2a
   19d90:	f7f7 fb88 	bl	114a4 <bsd_os_errno_set>
   19d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19d98:	e757      	b.n	19c4a <gnss_interface_setopt+0x122>
   19d9a:	2073      	movs	r0, #115	; 0x73
   19d9c:	f7f7 fb82 	bl	114a4 <bsd_os_errno_set>
   19da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19da4:	e751      	b.n	19c4a <gnss_interface_setopt+0x122>
   19da6:	bf00      	nop
   19da8:	20020b34 	.word	0x20020b34
   19dac:	49765443 	.word	0x49765443
   19db0:	2002c58c 	.word	0x2002c58c
   19db4:	20024e4c 	.word	0x20024e4c
   19db8:	20020b38 	.word	0x20020b38

00019dbc <gnss_interface_getopt>:
   19dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19dc0:	4c81      	ldr	r4, [pc, #516]	; (19fc8 <gnss_interface_getopt+0x20c>)
   19dc2:	b087      	sub	sp, #28
   19dc4:	6825      	ldr	r5, [r4, #0]
   19dc6:	4698      	mov	r8, r3
   19dc8:	b2ad      	uxth	r5, r5
   19dca:	2d02      	cmp	r5, #2
   19dcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19dce:	f040 80dd 	bne.w	19f8c <gnss_interface_getopt+0x1d0>
   19dd2:	6825      	ldr	r5, [r4, #0]
   19dd4:	03ee      	lsls	r6, r5, #15
   19dd6:	f100 80eb 	bmi.w	19fb0 <gnss_interface_getopt+0x1f4>
   19dda:	6825      	ldr	r5, [r4, #0]
   19ddc:	01ed      	lsls	r5, r5, #7
   19dde:	f100 80ed 	bmi.w	19fbc <gnss_interface_getopt+0x200>
   19de2:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   19de6:	f040 80d7 	bne.w	19f98 <gnss_interface_getopt+0x1dc>
   19dea:	4978      	ldr	r1, [pc, #480]	; (19fcc <gnss_interface_getopt+0x210>)
   19dec:	4288      	cmp	r0, r1
   19dee:	f040 80d9 	bne.w	19fa4 <gnss_interface_getopt+0x1e8>
   19df2:	f1b8 0f00 	cmp.w	r8, #0
   19df6:	d00b      	beq.n	19e10 <gnss_interface_getopt+0x54>
   19df8:	b153      	cbz	r3, 19e10 <gnss_interface_getopt+0x54>
   19dfa:	1e57      	subs	r7, r2, #1
   19dfc:	2f05      	cmp	r7, #5
   19dfe:	d807      	bhi.n	19e10 <gnss_interface_getopt+0x54>
   19e00:	e8df f007 	tbb	[pc, r7]
   19e04:	0f030f0f 	.word	0x0f030f0f
   19e08:	0303      	.short	0x0303
   19e0a:	681b      	ldr	r3, [r3, #0]
   19e0c:	2b01      	cmp	r3, #1
   19e0e:	d00b      	beq.n	19e28 <gnss_interface_getopt+0x6c>
   19e10:	2016      	movs	r0, #22
   19e12:	f7f7 fb47 	bl	114a4 <bsd_os_errno_set>
   19e16:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19e1a:	4628      	mov	r0, r5
   19e1c:	b007      	add	sp, #28
   19e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e22:	681b      	ldr	r3, [r3, #0]
   19e24:	2b02      	cmp	r3, #2
   19e26:	d1f3      	bne.n	19e10 <gnss_interface_getopt+0x54>
   19e28:	6823      	ldr	r3, [r4, #0]
   19e2a:	2212      	movs	r2, #18
   19e2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   19e30:	2100      	movs	r1, #0
   19e32:	a801      	add	r0, sp, #4
   19e34:	6023      	str	r3, [r4, #0]
   19e36:	f003 f9ac 	bl	1d192 <memset>
   19e3a:	2112      	movs	r1, #18
   19e3c:	4668      	mov	r0, sp
   19e3e:	f000 fa97 	bl	1a370 <rpc_gnss_client_request_alloc>
   19e42:	4605      	mov	r5, r0
   19e44:	9800      	ldr	r0, [sp, #0]
   19e46:	2d00      	cmp	r5, #0
   19e48:	f040 808a 	bne.w	19f60 <gnss_interface_getopt+0x1a4>
   19e4c:	2800      	cmp	r0, #0
   19e4e:	f000 808e 	beq.w	19f6e <gnss_interface_getopt+0x1b2>
   19e52:	f241 1602 	movw	r6, #4354	; 0x1102
   19e56:	f04f 0e49 	mov.w	lr, #73	; 0x49
   19e5a:	2212      	movs	r2, #18
   19e5c:	f04f 0976 	mov.w	r9, #118	; 0x76
   19e60:	f04f 0b43 	mov.w	fp, #67	; 0x43
   19e64:	f04f 0a54 	mov.w	sl, #84	; 0x54
   19e68:	f8df c168 	ldr.w	ip, [pc, #360]	; 19fd4 <gnss_interface_getopt+0x218>
   19e6c:	f880 e00f 	strb.w	lr, [r0, #15]
   19e70:	f8bc 3000 	ldrh.w	r3, [ip]
   19e74:	f880 900e 	strb.w	r9, [r0, #14]
   19e78:	3301      	adds	r3, #1
   19e7a:	b29b      	uxth	r3, r3
   19e7c:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   19e80:	f8cd e004 	str.w	lr, [sp, #4]
   19e84:	7145      	strb	r5, [r0, #5]
   19e86:	7185      	strb	r5, [r0, #6]
   19e88:	71c5      	strb	r5, [r0, #7]
   19e8a:	7205      	strb	r5, [r0, #8]
   19e8c:	7245      	strb	r5, [r0, #9]
   19e8e:	7285      	strb	r5, [r0, #10]
   19e90:	72c5      	strb	r5, [r0, #11]
   19e92:	a901      	add	r1, sp, #4
   19e94:	7102      	strb	r2, [r0, #4]
   19e96:	f880 b00c 	strb.w	fp, [r0, #12]
   19e9a:	f880 a00d 	strb.w	sl, [r0, #13]
   19e9e:	f8df 9138 	ldr.w	r9, [pc, #312]	; 19fd8 <gnss_interface_getopt+0x21c>
   19ea2:	6800      	ldr	r0, [r0, #0]
   19ea4:	f8ac 3000 	strh.w	r3, [ip]
   19ea8:	f003 f949 	bl	1d13e <memcpy>
   19eac:	4631      	mov	r1, r6
   19eae:	9800      	ldr	r0, [sp, #0]
   19eb0:	f8c9 5000 	str.w	r5, [r9]
   19eb4:	f000 fa70 	bl	1a398 <rpc_gnss_client_request_send>
   19eb8:	2800      	cmp	r0, #0
   19eba:	d15d      	bne.n	19f78 <gnss_interface_getopt+0x1bc>
   19ebc:	4e44      	ldr	r6, [pc, #272]	; (19fd0 <gnss_interface_getopt+0x214>)
   19ebe:	4d43      	ldr	r5, [pc, #268]	; (19fcc <gnss_interface_getopt+0x210>)
   19ec0:	4631      	mov	r1, r6
   19ec2:	4628      	mov	r0, r5
   19ec4:	f7f7 fa5a 	bl	1137c <bsd_os_timedwait>
   19ec8:	6823      	ldr	r3, [r4, #0]
   19eca:	01db      	lsls	r3, r3, #7
   19ecc:	d4f8      	bmi.n	19ec0 <gnss_interface_getopt+0x104>
   19ece:	f8d9 0000 	ldr.w	r0, [r9]
   19ed2:	b1d8      	cbz	r0, 19f0c <gnss_interface_getopt+0x150>
   19ed4:	6825      	ldr	r5, [r4, #0]
   19ed6:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   19eda:	d00f      	beq.n	19efc <gnss_interface_getopt+0x140>
   19edc:	2f05      	cmp	r7, #5
   19ede:	d837      	bhi.n	19f50 <gnss_interface_getopt+0x194>
   19ee0:	e8df f007 	tbb	[pc, r7]
   19ee4:	2b26201a 	.word	0x2b26201a
   19ee8:	0331      	.short	0x0331
   19eea:	2500      	movs	r5, #0
   19eec:	7b43      	ldrb	r3, [r0, #13]
   19eee:	f888 3000 	strb.w	r3, [r8]
   19ef2:	f000 fa6f 	bl	1a3d4 <rpc_gnss_client_data_free>
   19ef6:	2300      	movs	r3, #0
   19ef8:	f8c9 3000 	str.w	r3, [r9]
   19efc:	6823      	ldr	r3, [r4, #0]
   19efe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   19f02:	6023      	str	r3, [r4, #0]
   19f04:	4628      	mov	r0, r5
   19f06:	b007      	add	sp, #28
   19f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f0c:	6823      	ldr	r3, [r4, #0]
   19f0e:	4605      	mov	r5, r0
   19f10:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   19f14:	6023      	str	r3, [r4, #0]
   19f16:	e7f5      	b.n	19f04 <gnss_interface_getopt+0x148>
   19f18:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   19f1c:	2500      	movs	r5, #0
   19f1e:	f8a8 3000 	strh.w	r3, [r8]
   19f22:	e7e6      	b.n	19ef2 <gnss_interface_getopt+0x136>
   19f24:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   19f28:	2500      	movs	r5, #0
   19f2a:	f8a8 3000 	strh.w	r3, [r8]
   19f2e:	e7e0      	b.n	19ef2 <gnss_interface_getopt+0x136>
   19f30:	7b83      	ldrb	r3, [r0, #14]
   19f32:	2500      	movs	r5, #0
   19f34:	f888 3000 	strb.w	r3, [r8]
   19f38:	e7db      	b.n	19ef2 <gnss_interface_getopt+0x136>
   19f3a:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   19f3e:	2500      	movs	r5, #0
   19f40:	f8a8 3000 	strh.w	r3, [r8]
   19f44:	e7d5      	b.n	19ef2 <gnss_interface_getopt+0x136>
   19f46:	7b03      	ldrb	r3, [r0, #12]
   19f48:	2500      	movs	r5, #0
   19f4a:	f888 3000 	strb.w	r3, [r8]
   19f4e:	e7d0      	b.n	19ef2 <gnss_interface_getopt+0x136>
   19f50:	2016      	movs	r0, #22
   19f52:	f7f7 faa7 	bl	114a4 <bsd_os_errno_set>
   19f56:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19f5a:	f8d9 0000 	ldr.w	r0, [r9]
   19f5e:	e7c8      	b.n	19ef2 <gnss_interface_getopt+0x136>
   19f60:	b128      	cbz	r0, 19f6e <gnss_interface_getopt+0x1b2>
   19f62:	6803      	ldr	r3, [r0, #0]
   19f64:	b11b      	cbz	r3, 19f6e <gnss_interface_getopt+0x1b2>
   19f66:	4618      	mov	r0, r3
   19f68:	f000 fa34 	bl	1a3d4 <rpc_gnss_client_data_free>
   19f6c:	9800      	ldr	r0, [sp, #0]
   19f6e:	f000 fa29 	bl	1a3c4 <rpc_gnss_client_message_free>
   19f72:	2023      	movs	r0, #35	; 0x23
   19f74:	f7f7 fa96 	bl	114a4 <bsd_os_errno_set>
   19f78:	6823      	ldr	r3, [r4, #0]
   19f7a:	200e      	movs	r0, #14
   19f7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   19f80:	6023      	str	r3, [r4, #0]
   19f82:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19f86:	f7f7 fa8d 	bl	114a4 <bsd_os_errno_set>
   19f8a:	e746      	b.n	19e1a <gnss_interface_getopt+0x5e>
   19f8c:	200e      	movs	r0, #14
   19f8e:	f7f7 fa89 	bl	114a4 <bsd_os_errno_set>
   19f92:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19f96:	e740      	b.n	19e1a <gnss_interface_getopt+0x5e>
   19f98:	202a      	movs	r0, #42	; 0x2a
   19f9a:	f7f7 fa83 	bl	114a4 <bsd_os_errno_set>
   19f9e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19fa2:	e73a      	b.n	19e1a <gnss_interface_getopt+0x5e>
   19fa4:	2009      	movs	r0, #9
   19fa6:	f7f7 fa7d 	bl	114a4 <bsd_os_errno_set>
   19faa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19fae:	e734      	b.n	19e1a <gnss_interface_getopt+0x5e>
   19fb0:	2005      	movs	r0, #5
   19fb2:	f7f7 fa77 	bl	114a4 <bsd_os_errno_set>
   19fb6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19fba:	e72e      	b.n	19e1a <gnss_interface_getopt+0x5e>
   19fbc:	2073      	movs	r0, #115	; 0x73
   19fbe:	f7f7 fa71 	bl	114a4 <bsd_os_errno_set>
   19fc2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19fc6:	e728      	b.n	19e1a <gnss_interface_getopt+0x5e>
   19fc8:	20020b34 	.word	0x20020b34
   19fcc:	49765443 	.word	0x49765443
   19fd0:	2002c58c 	.word	0x2002c58c
   19fd4:	20024e4c 	.word	0x20024e4c
   19fd8:	20020b38 	.word	0x20020b38

00019fdc <gnss_interface_init>:
   19fdc:	2100      	movs	r1, #0
   19fde:	b538      	push	{r3, r4, r5, lr}
   19fe0:	4c09      	ldr	r4, [pc, #36]	; (1a008 <gnss_interface_init+0x2c>)
   19fe2:	4d0a      	ldr	r5, [pc, #40]	; (1a00c <gnss_interface_init+0x30>)
   19fe4:	6822      	ldr	r2, [r4, #0]
   19fe6:	480a      	ldr	r0, [pc, #40]	; (1a010 <gnss_interface_init+0x34>)
   19fe8:	4b0a      	ldr	r3, [pc, #40]	; (1a014 <gnss_interface_init+0x38>)
   19fea:	402a      	ands	r2, r5
   19fec:	6022      	str	r2, [r4, #0]
   19fee:	8001      	strh	r1, [r0, #0]
   19ff0:	6019      	str	r1, [r3, #0]
   19ff2:	f000 f9b7 	bl	1a364 <rpc_gnss_client_init>
   19ff6:	b928      	cbnz	r0, 1a004 <gnss_interface_init+0x28>
   19ff8:	6823      	ldr	r3, [r4, #0]
   19ffa:	402b      	ands	r3, r5
   19ffc:	f043 0301 	orr.w	r3, r3, #1
   1a000:	6023      	str	r3, [r4, #0]
   1a002:	bd38      	pop	{r3, r4, r5, pc}
   1a004:	2003      	movs	r0, #3
   1a006:	bd38      	pop	{r3, r4, r5, pc}
   1a008:	20020b34 	.word	0x20020b34
   1a00c:	ffff0000 	.word	0xffff0000
   1a010:	20024e4c 	.word	0x20024e4c
   1a014:	20020b38 	.word	0x20020b38

0001a018 <gnss_interface_open>:
   1a018:	2801      	cmp	r0, #1
   1a01a:	b510      	push	{r4, lr}
   1a01c:	d120      	bne.n	1a060 <gnss_interface_open+0x48>
   1a01e:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1a022:	d11d      	bne.n	1a060 <gnss_interface_open+0x48>
   1a024:	2902      	cmp	r1, #2
   1a026:	d11b      	bne.n	1a060 <gnss_interface_open+0x48>
   1a028:	4c13      	ldr	r4, [pc, #76]	; (1a078 <gnss_interface_open+0x60>)
   1a02a:	6823      	ldr	r3, [r4, #0]
   1a02c:	b29b      	uxth	r3, r3
   1a02e:	2b01      	cmp	r3, #1
   1a030:	d11c      	bne.n	1a06c <gnss_interface_open+0x54>
   1a032:	6823      	ldr	r3, [r4, #0]
   1a034:	4608      	mov	r0, r1
   1a036:	0c1b      	lsrs	r3, r3, #16
   1a038:	041b      	lsls	r3, r3, #16
   1a03a:	f043 0302 	orr.w	r3, r3, #2
   1a03e:	2200      	movs	r2, #0
   1a040:	490e      	ldr	r1, [pc, #56]	; (1a07c <gnss_interface_open+0x64>)
   1a042:	6023      	str	r3, [r4, #0]
   1a044:	f000 faac 	bl	1a5a0 <packet_handler_create>
   1a048:	4a0d      	ldr	r2, [pc, #52]	; (1a080 <gnss_interface_open+0x68>)
   1a04a:	6010      	str	r0, [r2, #0]
   1a04c:	b170      	cbz	r0, 1a06c <gnss_interface_open+0x54>
   1a04e:	6823      	ldr	r3, [r4, #0]
   1a050:	6802      	ldr	r2, [r0, #0]
   1a052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1a056:	6812      	ldr	r2, [r2, #0]
   1a058:	6023      	str	r3, [r4, #0]
   1a05a:	4790      	blx	r2
   1a05c:	4809      	ldr	r0, [pc, #36]	; (1a084 <gnss_interface_open+0x6c>)
   1a05e:	bd10      	pop	{r4, pc}
   1a060:	2016      	movs	r0, #22
   1a062:	f7f7 fa1f 	bl	114a4 <bsd_os_errno_set>
   1a066:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a06a:	bd10      	pop	{r4, pc}
   1a06c:	200e      	movs	r0, #14
   1a06e:	f7f7 fa19 	bl	114a4 <bsd_os_errno_set>
   1a072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a076:	bd10      	pop	{r4, pc}
   1a078:	20020b34 	.word	0x20020b34
   1a07c:	00019375 	.word	0x00019375
   1a080:	20020b3c 	.word	0x20020b3c
   1a084:	49765443 	.word	0x49765443

0001a088 <gnss_interface_close>:
   1a088:	b530      	push	{r4, r5, lr}
   1a08a:	4b13      	ldr	r3, [pc, #76]	; (1a0d8 <gnss_interface_close+0x50>)
   1a08c:	b083      	sub	sp, #12
   1a08e:	4298      	cmp	r0, r3
   1a090:	d11c      	bne.n	1a0cc <gnss_interface_close+0x44>
   1a092:	4c12      	ldr	r4, [pc, #72]	; (1a0dc <gnss_interface_close+0x54>)
   1a094:	6823      	ldr	r3, [r4, #0]
   1a096:	b29b      	uxth	r3, r3
   1a098:	2b04      	cmp	r3, #4
   1a09a:	d00f      	beq.n	1a0bc <gnss_interface_close+0x34>
   1a09c:	4d10      	ldr	r5, [pc, #64]	; (1a0e0 <gnss_interface_close+0x58>)
   1a09e:	6828      	ldr	r0, [r5, #0]
   1a0a0:	b118      	cbz	r0, 1a0aa <gnss_interface_close+0x22>
   1a0a2:	f000 fa9d 	bl	1a5e0 <packet_handler_delete>
   1a0a6:	2300      	movs	r3, #0
   1a0a8:	602b      	str	r3, [r5, #0]
   1a0aa:	2000      	movs	r0, #0
   1a0ac:	6823      	ldr	r3, [r4, #0]
   1a0ae:	0c1b      	lsrs	r3, r3, #16
   1a0b0:	041b      	lsls	r3, r3, #16
   1a0b2:	f043 0301 	orr.w	r3, r3, #1
   1a0b6:	6023      	str	r3, [r4, #0]
   1a0b8:	b003      	add	sp, #12
   1a0ba:	bd30      	pop	{r4, r5, pc}
   1a0bc:	2300      	movs	r3, #0
   1a0be:	2208      	movs	r2, #8
   1a0c0:	9300      	str	r3, [sp, #0]
   1a0c2:	f44f 7101 	mov.w	r1, #516	; 0x204
   1a0c6:	f7fc feaf 	bl	16e28 <nrf_setsockopt>
   1a0ca:	e7e7      	b.n	1a09c <gnss_interface_close+0x14>
   1a0cc:	2009      	movs	r0, #9
   1a0ce:	f7f7 f9e9 	bl	114a4 <bsd_os_errno_set>
   1a0d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a0d6:	e7ef      	b.n	1a0b8 <gnss_interface_close+0x30>
   1a0d8:	49765443 	.word	0x49765443
   1a0dc:	20020b34 	.word	0x20020b34
   1a0e0:	20020b3c 	.word	0x20020b3c

0001a0e4 <rpc_gnss_serialize_utc>:
   1a0e4:	4603      	mov	r3, r0
   1a0e6:	b1d8      	cbz	r0, 1a120 <rpc_gnss_serialize_utc+0x3c>
   1a0e8:	b1d1      	cbz	r1, 1a120 <rpc_gnss_serialize_utc+0x3c>
   1a0ea:	2000      	movs	r0, #0
   1a0ec:	2201      	movs	r2, #1
   1a0ee:	7048      	strb	r0, [r1, #1]
   1a0f0:	700a      	strb	r2, [r1, #0]
   1a0f2:	685a      	ldr	r2, [r3, #4]
   1a0f4:	2010      	movs	r0, #16
   1a0f6:	f8c1 2006 	str.w	r2, [r1, #6]
   1a0fa:	681a      	ldr	r2, [r3, #0]
   1a0fc:	f8c1 2002 	str.w	r2, [r1, #2]
   1a100:	f993 200a 	ldrsb.w	r2, [r3, #10]
   1a104:	730a      	strb	r2, [r1, #12]
   1a106:	f993 200d 	ldrsb.w	r2, [r3, #13]
   1a10a:	73ca      	strb	r2, [r1, #15]
   1a10c:	f993 200c 	ldrsb.w	r2, [r3, #12]
   1a110:	738a      	strb	r2, [r1, #14]
   1a112:	7a1a      	ldrb	r2, [r3, #8]
   1a114:	728a      	strb	r2, [r1, #10]
   1a116:	7ada      	ldrb	r2, [r3, #11]
   1a118:	734a      	strb	r2, [r1, #13]
   1a11a:	7a5b      	ldrb	r3, [r3, #9]
   1a11c:	72cb      	strb	r3, [r1, #11]
   1a11e:	4770      	bx	lr
   1a120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a124:	4770      	bx	lr
   1a126:	bf00      	nop

0001a128 <rpc_gnss_serialize_ephe>:
   1a128:	4603      	mov	r3, r0
   1a12a:	2800      	cmp	r0, #0
   1a12c:	d04b      	beq.n	1a1c6 <rpc_gnss_serialize_ephe+0x9e>
   1a12e:	2900      	cmp	r1, #0
   1a130:	d049      	beq.n	1a1c6 <rpc_gnss_serialize_ephe+0x9e>
   1a132:	2000      	movs	r0, #0
   1a134:	2202      	movs	r2, #2
   1a136:	7048      	strb	r0, [r1, #1]
   1a138:	700a      	strb	r2, [r1, #0]
   1a13a:	68da      	ldr	r2, [r3, #12]
   1a13c:	2040      	movs	r0, #64	; 0x40
   1a13e:	f8c1 200b 	str.w	r2, [r1, #11]
   1a142:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a146:	f8a1 2009 	strh.w	r2, [r1, #9]
   1a14a:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1a14e:	720a      	strb	r2, [r1, #8]
   1a150:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   1a154:	878a      	strh	r2, [r1, #60]	; 0x3c
   1a156:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   1a15a:	86ca      	strh	r2, [r1, #54]	; 0x36
   1a15c:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   1a160:	874a      	strh	r2, [r1, #58]	; 0x3a
   1a162:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   1a166:	868a      	strh	r2, [r1, #52]	; 0x34
   1a168:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   1a16c:	87ca      	strh	r2, [r1, #62]	; 0x3e
   1a16e:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   1a172:	870a      	strh	r2, [r1, #56]	; 0x38
   1a174:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1a178:	830a      	strh	r2, [r1, #24]
   1a17a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a17c:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   1a180:	7c9a      	ldrb	r2, [r3, #18]
   1a182:	744a      	strb	r2, [r1, #17]
   1a184:	785a      	ldrb	r2, [r3, #1]
   1a186:	70ca      	strb	r2, [r1, #3]
   1a188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1a18a:	62ca      	str	r2, [r1, #44]	; 0x2c
   1a18c:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   1a190:	84ca      	strh	r2, [r1, #38]	; 0x26
   1a192:	885a      	ldrh	r2, [r3, #2]
   1a194:	808a      	strh	r2, [r1, #4]
   1a196:	6a1a      	ldr	r2, [r3, #32]
   1a198:	f8c1 201a 	str.w	r2, [r1, #26]
   1a19c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a19e:	630a      	str	r2, [r1, #48]	; 0x30
   1a1a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a1a2:	f8c1 201e 	str.w	r2, [r1, #30]
   1a1a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1a1a8:	628a      	str	r2, [r1, #40]	; 0x28
   1a1aa:	781a      	ldrb	r2, [r3, #0]
   1a1ac:	708a      	strb	r2, [r1, #2]
   1a1ae:	f993 2010 	ldrsb.w	r2, [r3, #16]
   1a1b2:	73ca      	strb	r2, [r1, #15]
   1a1b4:	889a      	ldrh	r2, [r3, #4]
   1a1b6:	80ca      	strh	r2, [r1, #6]
   1a1b8:	8a9a      	ldrh	r2, [r3, #20]
   1a1ba:	824a      	strh	r2, [r1, #18]
   1a1bc:	7c5a      	ldrb	r2, [r3, #17]
   1a1be:	740a      	strb	r2, [r1, #16]
   1a1c0:	699b      	ldr	r3, [r3, #24]
   1a1c2:	614b      	str	r3, [r1, #20]
   1a1c4:	4770      	bx	lr
   1a1c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a1ca:	4770      	bx	lr

0001a1cc <rpc_gnss_serialize_alm>:
   1a1cc:	4603      	mov	r3, r0
   1a1ce:	b360      	cbz	r0, 1a22a <rpc_gnss_serialize_alm+0x5e>
   1a1d0:	b359      	cbz	r1, 1a22a <rpc_gnss_serialize_alm+0x5e>
   1a1d2:	2000      	movs	r0, #0
   1a1d4:	2203      	movs	r2, #3
   1a1d6:	7048      	strb	r0, [r1, #1]
   1a1d8:	700a      	strb	r2, [r1, #0]
   1a1da:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1a1de:	2021      	movs	r0, #33	; 0x21
   1a1e0:	f8a1 201d 	strh.w	r2, [r1, #29]
   1a1e4:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   1a1e8:	f8a1 201f 	strh.w	r2, [r1, #31]
   1a1ec:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   1a1f0:	810a      	strh	r2, [r1, #8]
   1a1f2:	889a      	ldrh	r2, [r3, #4]
   1a1f4:	80ca      	strh	r2, [r1, #6]
   1a1f6:	78da      	ldrb	r2, [r3, #3]
   1a1f8:	714a      	strb	r2, [r1, #5]
   1a1fa:	699a      	ldr	r2, [r3, #24]
   1a1fc:	f8c1 2019 	str.w	r2, [r1, #25]
   1a200:	691a      	ldr	r2, [r3, #16]
   1a202:	f8c1 2011 	str.w	r2, [r1, #17]
   1a206:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a20a:	814a      	strh	r2, [r1, #10]
   1a20c:	68da      	ldr	r2, [r3, #12]
   1a20e:	f8c1 200d 	str.w	r2, [r1, #13]
   1a212:	7a9a      	ldrb	r2, [r3, #10]
   1a214:	730a      	strb	r2, [r1, #12]
   1a216:	781a      	ldrb	r2, [r3, #0]
   1a218:	708a      	strb	r2, [r1, #2]
   1a21a:	789a      	ldrb	r2, [r3, #2]
   1a21c:	710a      	strb	r2, [r1, #4]
   1a21e:	695a      	ldr	r2, [r3, #20]
   1a220:	f8c1 2015 	str.w	r2, [r1, #21]
   1a224:	785b      	ldrb	r3, [r3, #1]
   1a226:	70cb      	strb	r3, [r1, #3]
   1a228:	4770      	bx	lr
   1a22a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a22e:	4770      	bx	lr

0001a230 <rpc_gnss_serialize_klob>:
   1a230:	4603      	mov	r3, r0
   1a232:	b1f0      	cbz	r0, 1a272 <rpc_gnss_serialize_klob+0x42>
   1a234:	b1e9      	cbz	r1, 1a272 <rpc_gnss_serialize_klob+0x42>
   1a236:	2000      	movs	r0, #0
   1a238:	2204      	movs	r2, #4
   1a23a:	7048      	strb	r0, [r1, #1]
   1a23c:	700a      	strb	r2, [r1, #0]
   1a23e:	f993 2000 	ldrsb.w	r2, [r3]
   1a242:	200a      	movs	r0, #10
   1a244:	708a      	strb	r2, [r1, #2]
   1a246:	f993 2001 	ldrsb.w	r2, [r3, #1]
   1a24a:	70ca      	strb	r2, [r1, #3]
   1a24c:	f993 2002 	ldrsb.w	r2, [r3, #2]
   1a250:	710a      	strb	r2, [r1, #4]
   1a252:	f993 2003 	ldrsb.w	r2, [r3, #3]
   1a256:	714a      	strb	r2, [r1, #5]
   1a258:	f993 2004 	ldrsb.w	r2, [r3, #4]
   1a25c:	718a      	strb	r2, [r1, #6]
   1a25e:	f993 2005 	ldrsb.w	r2, [r3, #5]
   1a262:	71ca      	strb	r2, [r1, #7]
   1a264:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1a268:	720a      	strb	r2, [r1, #8]
   1a26a:	f993 3007 	ldrsb.w	r3, [r3, #7]
   1a26e:	724b      	strb	r3, [r1, #9]
   1a270:	4770      	bx	lr
   1a272:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a276:	4770      	bx	lr

0001a278 <rpc_gnss_serialize_nequick>:
   1a278:	4603      	mov	r3, r0
   1a27a:	b198      	cbz	r0, 1a2a4 <rpc_gnss_serialize_nequick+0x2c>
   1a27c:	b191      	cbz	r1, 1a2a4 <rpc_gnss_serialize_nequick+0x2c>
   1a27e:	2000      	movs	r0, #0
   1a280:	2205      	movs	r2, #5
   1a282:	7048      	strb	r0, [r1, #1]
   1a284:	700a      	strb	r2, [r1, #0]
   1a286:	f9b3 2000 	ldrsh.w	r2, [r3]
   1a28a:	200a      	movs	r0, #10
   1a28c:	804a      	strh	r2, [r1, #2]
   1a28e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   1a292:	808a      	strh	r2, [r1, #4]
   1a294:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   1a298:	80ca      	strh	r2, [r1, #6]
   1a29a:	799a      	ldrb	r2, [r3, #6]
   1a29c:	720a      	strb	r2, [r1, #8]
   1a29e:	79db      	ldrb	r3, [r3, #7]
   1a2a0:	724b      	strb	r3, [r1, #9]
   1a2a2:	4770      	bx	lr
   1a2a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a2a8:	4770      	bx	lr
   1a2aa:	bf00      	nop

0001a2ac <rpc_gnss_serialize_time_and_sv_tow>:
   1a2ac:	b310      	cbz	r0, 1a2f4 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   1a2ae:	b309      	cbz	r1, 1a2f4 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   1a2b0:	b470      	push	{r4, r5, r6}
   1a2b2:	2500      	movs	r5, #0
   1a2b4:	2606      	movs	r6, #6
   1a2b6:	460c      	mov	r4, r1
   1a2b8:	704d      	strb	r5, [r1, #1]
   1a2ba:	700e      	strb	r6, [r1, #0]
   1a2bc:	462b      	mov	r3, r5
   1a2be:	8805      	ldrh	r5, [r0, #0]
   1a2c0:	4602      	mov	r2, r0
   1a2c2:	804d      	strh	r5, [r1, #2]
   1a2c4:	68c5      	ldr	r5, [r0, #12]
   1a2c6:	f8c1 500a 	str.w	r5, [r1, #10]
   1a2ca:	8905      	ldrh	r5, [r0, #8]
   1a2cc:	810d      	strh	r5, [r1, #8]
   1a2ce:	6840      	ldr	r0, [r0, #4]
   1a2d0:	6048      	str	r0, [r1, #4]
   1a2d2:	8a15      	ldrh	r5, [r2, #16]
   1a2d4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   1a2d8:	4408      	add	r0, r1
   1a2da:	81c5      	strh	r5, [r0, #14]
   1a2dc:	7c90      	ldrb	r0, [r2, #18]
   1a2de:	3301      	adds	r3, #1
   1a2e0:	2b20      	cmp	r3, #32
   1a2e2:	7420      	strb	r0, [r4, #16]
   1a2e4:	f102 0204 	add.w	r2, r2, #4
   1a2e8:	f104 0403 	add.w	r4, r4, #3
   1a2ec:	d1f1      	bne.n	1a2d2 <rpc_gnss_serialize_time_and_sv_tow+0x26>
   1a2ee:	206e      	movs	r0, #110	; 0x6e
   1a2f0:	bc70      	pop	{r4, r5, r6}
   1a2f2:	4770      	bx	lr
   1a2f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a2f8:	4770      	bx	lr
   1a2fa:	bf00      	nop

0001a2fc <rpc_gnss_serialize_location>:
   1a2fc:	4603      	mov	r3, r0
   1a2fe:	b1c8      	cbz	r0, 1a334 <rpc_gnss_serialize_location+0x38>
   1a300:	b1c1      	cbz	r1, 1a334 <rpc_gnss_serialize_location+0x38>
   1a302:	2000      	movs	r0, #0
   1a304:	2207      	movs	r2, #7
   1a306:	7048      	strb	r0, [r1, #1]
   1a308:	700a      	strb	r2, [r1, #0]
   1a30a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a30e:	2011      	movs	r0, #17
   1a310:	814a      	strh	r2, [r1, #10]
   1a312:	7b9a      	ldrb	r2, [r3, #14]
   1a314:	740a      	strb	r2, [r1, #16]
   1a316:	681a      	ldr	r2, [r3, #0]
   1a318:	f8c1 2002 	str.w	r2, [r1, #2]
   1a31c:	685a      	ldr	r2, [r3, #4]
   1a31e:	f8c1 2006 	str.w	r2, [r1, #6]
   1a322:	7b1a      	ldrb	r2, [r3, #12]
   1a324:	738a      	strb	r2, [r1, #14]
   1a326:	7b5a      	ldrb	r2, [r3, #13]
   1a328:	73ca      	strb	r2, [r1, #15]
   1a32a:	7a9a      	ldrb	r2, [r3, #10]
   1a32c:	730a      	strb	r2, [r1, #12]
   1a32e:	7adb      	ldrb	r3, [r3, #11]
   1a330:	734b      	strb	r3, [r1, #13]
   1a332:	4770      	bx	lr
   1a334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a338:	4770      	bx	lr
   1a33a:	bf00      	nop

0001a33c <rpc_gnss_serialize_integrity>:
   1a33c:	b148      	cbz	r0, 1a352 <rpc_gnss_serialize_integrity+0x16>
   1a33e:	b141      	cbz	r1, 1a352 <rpc_gnss_serialize_integrity+0x16>
   1a340:	2200      	movs	r2, #0
   1a342:	2308      	movs	r3, #8
   1a344:	704a      	strb	r2, [r1, #1]
   1a346:	700b      	strb	r3, [r1, #0]
   1a348:	6803      	ldr	r3, [r0, #0]
   1a34a:	2006      	movs	r0, #6
   1a34c:	f8c1 3002 	str.w	r3, [r1, #2]
   1a350:	4770      	bx	lr
   1a352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a356:	4770      	bx	lr

0001a358 <gnss_client_event_handler>:
   1a358:	f850 1b08 	ldr.w	r1, [r0], #8
   1a35c:	0c09      	lsrs	r1, r1, #16
   1a35e:	f7ff b817 	b.w	19390 <rpc_gnss_event_handler>
   1a362:	bf00      	nop

0001a364 <rpc_gnss_client_init>:
   1a364:	4801      	ldr	r0, [pc, #4]	; (1a36c <rpc_gnss_client_init+0x8>)
   1a366:	f7fe bb79 	b.w	18a5c <rpc_client_register>
   1a36a:	bf00      	nop
   1a36c:	0001f3a0 	.word	0x0001f3a0

0001a370 <rpc_gnss_client_request_alloc>:
   1a370:	2300      	movs	r3, #0
   1a372:	b510      	push	{r4, lr}
   1a374:	b082      	sub	sp, #8
   1a376:	9301      	str	r3, [sp, #4]
   1a378:	b158      	cbz	r0, 1a392 <rpc_gnss_client_request_alloc+0x22>
   1a37a:	4604      	mov	r4, r0
   1a37c:	aa01      	add	r2, sp, #4
   1a37e:	2007      	movs	r0, #7
   1a380:	f7fe fda4 	bl	18ecc <rpc_message_alloc>
   1a384:	b918      	cbnz	r0, 1a38e <rpc_gnss_client_request_alloc+0x1e>
   1a386:	9b01      	ldr	r3, [sp, #4]
   1a388:	b10b      	cbz	r3, 1a38e <rpc_gnss_client_request_alloc+0x1e>
   1a38a:	3308      	adds	r3, #8
   1a38c:	6023      	str	r3, [r4, #0]
   1a38e:	b002      	add	sp, #8
   1a390:	bd10      	pop	{r4, pc}
   1a392:	2007      	movs	r0, #7
   1a394:	b002      	add	sp, #8
   1a396:	bd10      	pop	{r4, pc}

0001a398 <rpc_gnss_client_request_send>:
   1a398:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1a39c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1a3a0:	d10b      	bne.n	1a3ba <rpc_gnss_client_request_send+0x22>
   1a3a2:	b160      	cbz	r0, 1a3be <rpc_gnss_client_request_send+0x26>
   1a3a4:	4603      	mov	r3, r0
   1a3a6:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1a3aa:	2007      	movs	r0, #7
   1a3ac:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1a3b0:	f843 1d08 	str.w	r1, [r3, #-8]!
   1a3b4:	4619      	mov	r1, r3
   1a3b6:	f7fe bd71 	b.w	18e9c <rpc_message_send>
   1a3ba:	200f      	movs	r0, #15
   1a3bc:	4770      	bx	lr
   1a3be:	2007      	movs	r0, #7
   1a3c0:	4770      	bx	lr
   1a3c2:	bf00      	nop

0001a3c4 <rpc_gnss_client_message_free>:
   1a3c4:	b120      	cbz	r0, 1a3d0 <rpc_gnss_client_message_free+0xc>
   1a3c6:	f1a0 0108 	sub.w	r1, r0, #8
   1a3ca:	2007      	movs	r0, #7
   1a3cc:	f7fe bdb0 	b.w	18f30 <rpc_message_free>
   1a3d0:	2007      	movs	r0, #7
   1a3d2:	4770      	bx	lr

0001a3d4 <rpc_gnss_client_data_free>:
   1a3d4:	b118      	cbz	r0, 1a3de <rpc_gnss_client_data_free+0xa>
   1a3d6:	4601      	mov	r1, r0
   1a3d8:	2007      	movs	r0, #7
   1a3da:	f7fe bebb 	b.w	19154 <rpc_message_data_free>
   1a3de:	2007      	movs	r0, #7
   1a3e0:	4770      	bx	lr
   1a3e2:	bf00      	nop

0001a3e4 <datagram_handler_init>:
   1a3e4:	b510      	push	{r4, lr}
   1a3e6:	4604      	mov	r4, r0
   1a3e8:	200c      	movs	r0, #12
   1a3ea:	f7f9 f901 	bl	135f0 <nrf_malloc>
   1a3ee:	60e0      	str	r0, [r4, #12]
   1a3f0:	b118      	cbz	r0, 1a3fa <datagram_handler_init+0x16>
   1a3f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a3f6:	f7fc bc0d 	b.w	16c14 <linked_list_init>
   1a3fa:	2004      	movs	r0, #4
   1a3fc:	bd10      	pop	{r4, pc}
   1a3fe:	bf00      	nop

0001a400 <datagram_handler_put>:
   1a400:	b570      	push	{r4, r5, r6, lr}
   1a402:	4606      	mov	r6, r0
   1a404:	2014      	movs	r0, #20
   1a406:	460d      	mov	r5, r1
   1a408:	f7f9 f8f2 	bl	135f0 <nrf_malloc>
   1a40c:	b178      	cbz	r0, 1a42e <datagram_handler_put+0x2e>
   1a40e:	682b      	ldr	r3, [r5, #0]
   1a410:	4604      	mov	r4, r0
   1a412:	6043      	str	r3, [r0, #4]
   1a414:	686b      	ldr	r3, [r5, #4]
   1a416:	4601      	mov	r1, r0
   1a418:	6083      	str	r3, [r0, #8]
   1a41a:	68eb      	ldr	r3, [r5, #12]
   1a41c:	60c3      	str	r3, [r0, #12]
   1a41e:	68ab      	ldr	r3, [r5, #8]
   1a420:	6103      	str	r3, [r0, #16]
   1a422:	68f0      	ldr	r0, [r6, #12]
   1a424:	f7fc fc00 	bl	16c28 <linked_list_push>
   1a428:	b920      	cbnz	r0, 1a434 <datagram_handler_put+0x34>
   1a42a:	6868      	ldr	r0, [r5, #4]
   1a42c:	bd70      	pop	{r4, r5, r6, pc}
   1a42e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a432:	bd70      	pop	{r4, r5, r6, pc}
   1a434:	4620      	mov	r0, r4
   1a436:	f7f9 f8e5 	bl	13604 <nrf_free>
   1a43a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a43e:	bd70      	pop	{r4, r5, r6, pc}

0001a440 <datagram_handler_get>:
   1a440:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a442:	4606      	mov	r6, r0
   1a444:	b085      	sub	sp, #20
   1a446:	68c0      	ldr	r0, [r0, #12]
   1a448:	460c      	mov	r4, r1
   1a44a:	4617      	mov	r7, r2
   1a44c:	f7fc fc0c 	bl	16c68 <linked_list_peek>
   1a450:	2800      	cmp	r0, #0
   1a452:	d037      	beq.n	1a4c4 <datagram_handler_get+0x84>
   1a454:	6882      	ldr	r2, [r0, #8]
   1a456:	4605      	mov	r5, r0
   1a458:	e9d4 0300 	ldrd	r0, r3, [r4]
   1a45c:	429a      	cmp	r2, r3
   1a45e:	bf28      	it	cs
   1a460:	461a      	movcs	r2, r3
   1a462:	6062      	str	r2, [r4, #4]
   1a464:	b110      	cbz	r0, 1a46c <datagram_handler_get+0x2c>
   1a466:	6869      	ldr	r1, [r5, #4]
   1a468:	f002 fe69 	bl	1d13e <memcpy>
   1a46c:	68a0      	ldr	r0, [r4, #8]
   1a46e:	b118      	cbz	r0, 1a478 <datagram_handler_get+0x38>
   1a470:	692b      	ldr	r3, [r5, #16]
   1a472:	b10b      	cbz	r3, 1a478 <datagram_handler_get+0x38>
   1a474:	68ea      	ldr	r2, [r5, #12]
   1a476:	b9e2      	cbnz	r2, 1a4b2 <datagram_handler_get+0x72>
   1a478:	2300      	movs	r3, #0
   1a47a:	60e3      	str	r3, [r4, #12]
   1a47c:	073b      	lsls	r3, r7, #28
   1a47e:	d502      	bpl.n	1a486 <datagram_handler_get+0x46>
   1a480:	6860      	ldr	r0, [r4, #4]
   1a482:	b005      	add	sp, #20
   1a484:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a486:	68f0      	ldr	r0, [r6, #12]
   1a488:	f7fc fbe4 	bl	16c54 <linked_list_pop>
   1a48c:	4605      	mov	r5, r0
   1a48e:	2800      	cmp	r0, #0
   1a490:	d0f6      	beq.n	1a480 <datagram_handler_get+0x40>
   1a492:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1a496:	6902      	ldr	r2, [r0, #16]
   1a498:	9300      	str	r3, [sp, #0]
   1a49a:	68c3      	ldr	r3, [r0, #12]
   1a49c:	e9cd 1201 	strd	r1, r2, [sp, #4]
   1a4a0:	9303      	str	r3, [sp, #12]
   1a4a2:	4668      	mov	r0, sp
   1a4a4:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
   1a4a8:	4798      	blx	r3
   1a4aa:	4628      	mov	r0, r5
   1a4ac:	f7f9 f8aa 	bl	13604 <nrf_free>
   1a4b0:	e7e6      	b.n	1a480 <datagram_handler_get+0x40>
   1a4b2:	68e3      	ldr	r3, [r4, #12]
   1a4b4:	429a      	cmp	r2, r3
   1a4b6:	bf28      	it	cs
   1a4b8:	461a      	movcs	r2, r3
   1a4ba:	60e2      	str	r2, [r4, #12]
   1a4bc:	6929      	ldr	r1, [r5, #16]
   1a4be:	f002 fe3e 	bl	1d13e <memcpy>
   1a4c2:	e7db      	b.n	1a47c <datagram_handler_get+0x3c>
   1a4c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a4c8:	e7db      	b.n	1a482 <datagram_handler_get+0x42>
   1a4ca:	bf00      	nop

0001a4cc <datagram_handler_available>:
   1a4cc:	b508      	push	{r3, lr}
   1a4ce:	68c0      	ldr	r0, [r0, #12]
   1a4d0:	f7fc fbca 	bl	16c68 <linked_list_peek>
   1a4d4:	b108      	cbz	r0, 1a4da <datagram_handler_available+0xe>
   1a4d6:	6880      	ldr	r0, [r0, #8]
   1a4d8:	bd08      	pop	{r3, pc}
   1a4da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a4de:	bd08      	pop	{r3, pc}

0001a4e0 <datagram_handler_flush>:
   1a4e0:	b530      	push	{r4, r5, lr}
   1a4e2:	4605      	mov	r5, r0
   1a4e4:	68c0      	ldr	r0, [r0, #12]
   1a4e6:	b085      	sub	sp, #20
   1a4e8:	b9a8      	cbnz	r0, 1a516 <datagram_handler_flush+0x36>
   1a4ea:	e01a      	b.n	1a522 <datagram_handler_flush+0x42>
   1a4ec:	68e8      	ldr	r0, [r5, #12]
   1a4ee:	f7fc fbb1 	bl	16c54 <linked_list_pop>
   1a4f2:	4604      	mov	r4, r0
   1a4f4:	b170      	cbz	r0, 1a514 <datagram_handler_flush+0x34>
   1a4f6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1a4fa:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1a4fe:	e9cd 0100 	strd	r0, r1, [sp]
   1a502:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1a506:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1a50a:	4668      	mov	r0, sp
   1a50c:	4798      	blx	r3
   1a50e:	4620      	mov	r0, r4
   1a510:	f7f9 f878 	bl	13604 <nrf_free>
   1a514:	68e8      	ldr	r0, [r5, #12]
   1a516:	f7fc fbad 	bl	16c74 <linked_list_size_get>
   1a51a:	2800      	cmp	r0, #0
   1a51c:	d1e6      	bne.n	1a4ec <datagram_handler_flush+0xc>
   1a51e:	b005      	add	sp, #20
   1a520:	bd30      	pop	{r4, r5, pc}
   1a522:	2008      	movs	r0, #8
   1a524:	b005      	add	sp, #20
   1a526:	bd30      	pop	{r4, r5, pc}

0001a528 <datagram_handler_free>:
   1a528:	b530      	push	{r4, r5, lr}
   1a52a:	4605      	mov	r5, r0
   1a52c:	68c0      	ldr	r0, [r0, #12]
   1a52e:	b085      	sub	sp, #20
   1a530:	b9a0      	cbnz	r0, 1a55c <datagram_handler_free+0x34>
   1a532:	e01c      	b.n	1a56e <datagram_handler_free+0x46>
   1a534:	f7fc fb8e 	bl	16c54 <linked_list_pop>
   1a538:	4604      	mov	r4, r0
   1a53a:	b170      	cbz	r0, 1a55a <datagram_handler_free+0x32>
   1a53c:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1a540:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1a544:	e9cd 0100 	strd	r0, r1, [sp]
   1a548:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1a54c:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1a550:	4668      	mov	r0, sp
   1a552:	4798      	blx	r3
   1a554:	4620      	mov	r0, r4
   1a556:	f7f9 f855 	bl	13604 <nrf_free>
   1a55a:	68e8      	ldr	r0, [r5, #12]
   1a55c:	f7fc fb8a 	bl	16c74 <linked_list_size_get>
   1a560:	4604      	mov	r4, r0
   1a562:	68e8      	ldr	r0, [r5, #12]
   1a564:	2c00      	cmp	r4, #0
   1a566:	d1e5      	bne.n	1a534 <datagram_handler_free+0xc>
   1a568:	f7f9 f84c 	bl	13604 <nrf_free>
   1a56c:	60ec      	str	r4, [r5, #12]
   1a56e:	b005      	add	sp, #20
   1a570:	bd30      	pop	{r4, r5, pc}
   1a572:	bf00      	nop

0001a574 <null_handler_init>:
   1a574:	2000      	movs	r0, #0
   1a576:	4770      	bx	lr

0001a578 <null_handler_put>:
   1a578:	b510      	push	{r4, lr}
   1a57a:	460c      	mov	r4, r1
   1a57c:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1a580:	4620      	mov	r0, r4
   1a582:	4798      	blx	r3
   1a584:	6860      	ldr	r0, [r4, #4]
   1a586:	bd10      	pop	{r4, pc}

0001a588 <null_handler_get>:
   1a588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a58c:	4770      	bx	lr
   1a58e:	bf00      	nop

0001a590 <null_handler_available>:
   1a590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a594:	4770      	bx	lr
   1a596:	bf00      	nop

0001a598 <null_handler_flush>:
   1a598:	2000      	movs	r0, #0
   1a59a:	4770      	bx	lr

0001a59c <null_handler_free>:
   1a59c:	4770      	bx	lr
   1a59e:	bf00      	nop

0001a5a0 <packet_handler_create>:
   1a5a0:	2801      	cmp	r0, #1
   1a5a2:	b538      	push	{r3, r4, r5, lr}
   1a5a4:	460d      	mov	r5, r1
   1a5a6:	4614      	mov	r4, r2
   1a5a8:	d00d      	beq.n	1a5c6 <packet_handler_create+0x26>
   1a5aa:	db11      	blt.n	1a5d0 <packet_handler_create+0x30>
   1a5ac:	2803      	cmp	r0, #3
   1a5ae:	dc0f      	bgt.n	1a5d0 <packet_handler_create+0x30>
   1a5b0:	2010      	movs	r0, #16
   1a5b2:	f7f9 f81d 	bl	135f0 <nrf_malloc>
   1a5b6:	2218      	movs	r2, #24
   1a5b8:	b120      	cbz	r0, 1a5c4 <packet_handler_create+0x24>
   1a5ba:	4b08      	ldr	r3, [pc, #32]	; (1a5dc <packet_handler_create+0x3c>)
   1a5bc:	6045      	str	r5, [r0, #4]
   1a5be:	4413      	add	r3, r2
   1a5c0:	6084      	str	r4, [r0, #8]
   1a5c2:	6003      	str	r3, [r0, #0]
   1a5c4:	bd38      	pop	{r3, r4, r5, pc}
   1a5c6:	2014      	movs	r0, #20
   1a5c8:	f7f9 f812 	bl	135f0 <nrf_malloc>
   1a5cc:	2230      	movs	r2, #48	; 0x30
   1a5ce:	e7f3      	b.n	1a5b8 <packet_handler_create+0x18>
   1a5d0:	200c      	movs	r0, #12
   1a5d2:	f7f9 f80d 	bl	135f0 <nrf_malloc>
   1a5d6:	2200      	movs	r2, #0
   1a5d8:	e7ee      	b.n	1a5b8 <packet_handler_create+0x18>
   1a5da:	bf00      	nop
   1a5dc:	0001f3b0 	.word	0x0001f3b0

0001a5e0 <packet_handler_delete>:
   1a5e0:	b510      	push	{r4, lr}
   1a5e2:	4604      	mov	r4, r0
   1a5e4:	6803      	ldr	r3, [r0, #0]
   1a5e6:	691b      	ldr	r3, [r3, #16]
   1a5e8:	4798      	blx	r3
   1a5ea:	6823      	ldr	r3, [r4, #0]
   1a5ec:	4620      	mov	r0, r4
   1a5ee:	695b      	ldr	r3, [r3, #20]
   1a5f0:	4798      	blx	r3
   1a5f2:	4620      	mov	r0, r4
   1a5f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a5f8:	f7f9 b804 	b.w	13604 <nrf_free>

0001a5fc <stream_handler_init>:
   1a5fc:	b510      	push	{r4, lr}
   1a5fe:	4604      	mov	r4, r0
   1a600:	200c      	movs	r0, #12
   1a602:	f7f8 fff5 	bl	135f0 <nrf_malloc>
   1a606:	60e0      	str	r0, [r4, #12]
   1a608:	b128      	cbz	r0, 1a616 <stream_handler_init+0x1a>
   1a60a:	2300      	movs	r3, #0
   1a60c:	6123      	str	r3, [r4, #16]
   1a60e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a612:	f7fc baff 	b.w	16c14 <linked_list_init>
   1a616:	2004      	movs	r0, #4
   1a618:	bd10      	pop	{r4, pc}
   1a61a:	bf00      	nop

0001a61c <stream_handler_put>:
   1a61c:	b570      	push	{r4, r5, r6, lr}
   1a61e:	4606      	mov	r6, r0
   1a620:	2014      	movs	r0, #20
   1a622:	460d      	mov	r5, r1
   1a624:	f7f8 ffe4 	bl	135f0 <nrf_malloc>
   1a628:	b178      	cbz	r0, 1a64a <stream_handler_put+0x2e>
   1a62a:	682b      	ldr	r3, [r5, #0]
   1a62c:	4604      	mov	r4, r0
   1a62e:	6043      	str	r3, [r0, #4]
   1a630:	686b      	ldr	r3, [r5, #4]
   1a632:	4601      	mov	r1, r0
   1a634:	6083      	str	r3, [r0, #8]
   1a636:	68eb      	ldr	r3, [r5, #12]
   1a638:	60c3      	str	r3, [r0, #12]
   1a63a:	68ab      	ldr	r3, [r5, #8]
   1a63c:	6103      	str	r3, [r0, #16]
   1a63e:	68f0      	ldr	r0, [r6, #12]
   1a640:	f7fc faf2 	bl	16c28 <linked_list_push>
   1a644:	b920      	cbnz	r0, 1a650 <stream_handler_put+0x34>
   1a646:	6868      	ldr	r0, [r5, #4]
   1a648:	bd70      	pop	{r4, r5, r6, pc}
   1a64a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a64e:	bd70      	pop	{r4, r5, r6, pc}
   1a650:	4620      	mov	r0, r4
   1a652:	f7f8 ffd7 	bl	13604 <nrf_free>
   1a656:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a65a:	bd70      	pop	{r4, r5, r6, pc}

0001a65c <stream_handler_get>:
   1a65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a660:	4682      	mov	sl, r0
   1a662:	b087      	sub	sp, #28
   1a664:	68c0      	ldr	r0, [r0, #12]
   1a666:	4689      	mov	r9, r1
   1a668:	4693      	mov	fp, r2
   1a66a:	f7fc fafd 	bl	16c68 <linked_list_peek>
   1a66e:	2800      	cmp	r0, #0
   1a670:	d072      	beq.n	1a758 <stream_handler_get+0xfc>
   1a672:	4605      	mov	r5, r0
   1a674:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1a678:	b120      	cbz	r0, 1a684 <stream_handler_get+0x28>
   1a67a:	692b      	ldr	r3, [r5, #16]
   1a67c:	b113      	cbz	r3, 1a684 <stream_handler_get+0x28>
   1a67e:	68ea      	ldr	r2, [r5, #12]
   1a680:	2a00      	cmp	r2, #0
   1a682:	d15c      	bne.n	1a73e <stream_handler_get+0xe2>
   1a684:	2300      	movs	r3, #0
   1a686:	f8c9 300c 	str.w	r3, [r9, #12]
   1a68a:	f8d9 2000 	ldr.w	r2, [r9]
   1a68e:	f8d9 8004 	ldr.w	r8, [r9, #4]
   1a692:	f8da 1010 	ldr.w	r1, [sl, #16]
   1a696:	9201      	str	r2, [sp, #4]
   1a698:	f1b8 0f00 	cmp.w	r8, #0
   1a69c:	d05a      	beq.n	1a754 <stream_handler_get+0xf8>
   1a69e:	f00b 0308 	and.w	r3, fp, #8
   1a6a2:	2400      	movs	r4, #0
   1a6a4:	9300      	str	r3, [sp, #0]
   1a6a6:	e010      	b.n	1a6ca <stream_handler_get+0x6e>
   1a6a8:	f8da 3010 	ldr.w	r3, [sl, #16]
   1a6ac:	443b      	add	r3, r7
   1a6ae:	f8ca 3010 	str.w	r3, [sl, #16]
   1a6b2:	4628      	mov	r0, r5
   1a6b4:	f7fc fae0 	bl	16c78 <linked_list_get_next>
   1a6b8:	443c      	add	r4, r7
   1a6ba:	4605      	mov	r5, r0
   1a6bc:	2800      	cmp	r0, #0
   1a6be:	d038      	beq.n	1a732 <stream_handler_get+0xd6>
   1a6c0:	45a0      	cmp	r8, r4
   1a6c2:	d936      	bls.n	1a732 <stream_handler_get+0xd6>
   1a6c4:	2100      	movs	r1, #0
   1a6c6:	f8d9 2000 	ldr.w	r2, [r9]
   1a6ca:	68ae      	ldr	r6, [r5, #8]
   1a6cc:	eba8 0b04 	sub.w	fp, r8, r4
   1a6d0:	1a76      	subs	r6, r6, r1
   1a6d2:	455e      	cmp	r6, fp
   1a6d4:	4637      	mov	r7, r6
   1a6d6:	bf28      	it	cs
   1a6d8:	465f      	movcs	r7, fp
   1a6da:	b132      	cbz	r2, 1a6ea <stream_handler_get+0x8e>
   1a6dc:	6868      	ldr	r0, [r5, #4]
   1a6de:	9b01      	ldr	r3, [sp, #4]
   1a6e0:	4401      	add	r1, r0
   1a6e2:	463a      	mov	r2, r7
   1a6e4:	1918      	adds	r0, r3, r4
   1a6e6:	f002 fd2a 	bl	1d13e <memcpy>
   1a6ea:	9b00      	ldr	r3, [sp, #0]
   1a6ec:	2b00      	cmp	r3, #0
   1a6ee:	d1e0      	bne.n	1a6b2 <stream_handler_get+0x56>
   1a6f0:	455e      	cmp	r6, fp
   1a6f2:	d8d9      	bhi.n	1a6a8 <stream_handler_get+0x4c>
   1a6f4:	f8da 000c 	ldr.w	r0, [sl, #12]
   1a6f8:	f7fc faac 	bl	16c54 <linked_list_pop>
   1a6fc:	4606      	mov	r6, r0
   1a6fe:	b170      	cbz	r0, 1a71e <stream_handler_get+0xc2>
   1a700:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   1a704:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   1a708:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1a70c:	e9cd 1004 	strd	r1, r0, [sp, #16]
   1a710:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   1a714:	a802      	add	r0, sp, #8
   1a716:	4798      	blx	r3
   1a718:	4630      	mov	r0, r6
   1a71a:	f7f8 ff73 	bl	13604 <nrf_free>
   1a71e:	2300      	movs	r3, #0
   1a720:	4628      	mov	r0, r5
   1a722:	f8ca 3010 	str.w	r3, [sl, #16]
   1a726:	f7fc faa7 	bl	16c78 <linked_list_get_next>
   1a72a:	443c      	add	r4, r7
   1a72c:	4605      	mov	r5, r0
   1a72e:	2800      	cmp	r0, #0
   1a730:	d1c6      	bne.n	1a6c0 <stream_handler_get+0x64>
   1a732:	4620      	mov	r0, r4
   1a734:	f8c9 4004 	str.w	r4, [r9, #4]
   1a738:	b007      	add	sp, #28
   1a73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a73e:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1a742:	429a      	cmp	r2, r3
   1a744:	bf28      	it	cs
   1a746:	461a      	movcs	r2, r3
   1a748:	f8c9 200c 	str.w	r2, [r9, #12]
   1a74c:	6929      	ldr	r1, [r5, #16]
   1a74e:	f002 fcf6 	bl	1d13e <memcpy>
   1a752:	e79a      	b.n	1a68a <stream_handler_get+0x2e>
   1a754:	4644      	mov	r4, r8
   1a756:	e7ec      	b.n	1a732 <stream_handler_get+0xd6>
   1a758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a75c:	e7ec      	b.n	1a738 <stream_handler_get+0xdc>
   1a75e:	bf00      	nop

0001a760 <stream_handler_available>:
   1a760:	b510      	push	{r4, lr}
   1a762:	4604      	mov	r4, r0
   1a764:	68c0      	ldr	r0, [r0, #12]
   1a766:	f7fc fa7f 	bl	16c68 <linked_list_peek>
   1a76a:	b150      	cbz	r0, 1a782 <stream_handler_available+0x22>
   1a76c:	6924      	ldr	r4, [r4, #16]
   1a76e:	4264      	negs	r4, r4
   1a770:	6883      	ldr	r3, [r0, #8]
   1a772:	441c      	add	r4, r3
   1a774:	f7fc fa80 	bl	16c78 <linked_list_get_next>
   1a778:	2800      	cmp	r0, #0
   1a77a:	d1f9      	bne.n	1a770 <stream_handler_available+0x10>
   1a77c:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   1a780:	bd10      	pop	{r4, pc}
   1a782:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a786:	bd10      	pop	{r4, pc}

0001a788 <stream_handler_flush>:
   1a788:	b530      	push	{r4, r5, lr}
   1a78a:	4605      	mov	r5, r0
   1a78c:	68c0      	ldr	r0, [r0, #12]
   1a78e:	b085      	sub	sp, #20
   1a790:	b9a8      	cbnz	r0, 1a7be <stream_handler_flush+0x36>
   1a792:	e01a      	b.n	1a7ca <stream_handler_flush+0x42>
   1a794:	68e8      	ldr	r0, [r5, #12]
   1a796:	f7fc fa5d 	bl	16c54 <linked_list_pop>
   1a79a:	4604      	mov	r4, r0
   1a79c:	b170      	cbz	r0, 1a7bc <stream_handler_flush+0x34>
   1a79e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1a7a2:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1a7a6:	e9cd 0100 	strd	r0, r1, [sp]
   1a7aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1a7ae:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1a7b2:	4668      	mov	r0, sp
   1a7b4:	4798      	blx	r3
   1a7b6:	4620      	mov	r0, r4
   1a7b8:	f7f8 ff24 	bl	13604 <nrf_free>
   1a7bc:	68e8      	ldr	r0, [r5, #12]
   1a7be:	f7fc fa59 	bl	16c74 <linked_list_size_get>
   1a7c2:	2800      	cmp	r0, #0
   1a7c4:	d1e6      	bne.n	1a794 <stream_handler_flush+0xc>
   1a7c6:	b005      	add	sp, #20
   1a7c8:	bd30      	pop	{r4, r5, pc}
   1a7ca:	2008      	movs	r0, #8
   1a7cc:	b005      	add	sp, #20
   1a7ce:	bd30      	pop	{r4, r5, pc}

0001a7d0 <stream_handler_free>:
   1a7d0:	b530      	push	{r4, r5, lr}
   1a7d2:	4605      	mov	r5, r0
   1a7d4:	68c0      	ldr	r0, [r0, #12]
   1a7d6:	b085      	sub	sp, #20
   1a7d8:	b9a0      	cbnz	r0, 1a804 <stream_handler_free+0x34>
   1a7da:	e01c      	b.n	1a816 <stream_handler_free+0x46>
   1a7dc:	f7fc fa3a 	bl	16c54 <linked_list_pop>
   1a7e0:	4604      	mov	r4, r0
   1a7e2:	b170      	cbz	r0, 1a802 <stream_handler_free+0x32>
   1a7e4:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1a7e8:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1a7ec:	e9cd 0100 	strd	r0, r1, [sp]
   1a7f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1a7f4:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1a7f8:	4668      	mov	r0, sp
   1a7fa:	4798      	blx	r3
   1a7fc:	4620      	mov	r0, r4
   1a7fe:	f7f8 ff01 	bl	13604 <nrf_free>
   1a802:	68e8      	ldr	r0, [r5, #12]
   1a804:	f7fc fa36 	bl	16c74 <linked_list_size_get>
   1a808:	4604      	mov	r4, r0
   1a80a:	68e8      	ldr	r0, [r5, #12]
   1a80c:	2c00      	cmp	r4, #0
   1a80e:	d1e5      	bne.n	1a7dc <stream_handler_free+0xc>
   1a810:	f7f8 fef8 	bl	13604 <nrf_free>
   1a814:	60ec      	str	r4, [r5, #12]
   1a816:	b005      	add	sp, #20
   1a818:	bd30      	pop	{r4, r5, pc}
   1a81a:	bf00      	nop

0001a81c <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   1a81c:	4a07      	ldr	r2, [pc, #28]	; (1a83c <SystemInit+0x20>)
   1a81e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1a822:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1a826:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   1a82a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1a82e:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   1a832:	4b03      	ldr	r3, [pc, #12]	; (1a840 <SystemInit+0x24>)
   1a834:	4a03      	ldr	r2, [pc, #12]	; (1a844 <SystemInit+0x28>)
   1a836:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   1a838:	4770      	bx	lr
   1a83a:	bf00      	nop
   1a83c:	e000ed00 	.word	0xe000ed00
   1a840:	2002c590 	.word	0x2002c590
   1a844:	03d09000 	.word	0x03d09000

0001a848 <nrfx_uarte_init>:
}

nrfx_err_t nrfx_uarte_init(nrfx_uarte_t const *        p_instance,
                           nrfx_uarte_config_t const * p_config,
                           nrfx_uarte_event_handler_t  event_handler)
{
   1a848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a84c:	4606      	mov	r6, r0
    NRFX_ASSERT(p_config);
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1a84e:	7904      	ldrb	r4, [r0, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1a850:	2024      	movs	r0, #36	; 0x24
   1a852:	4d42      	ldr	r5, [pc, #264]	; (1a95c <nrfx_uarte_init+0x114>)
   1a854:	fb00 5004 	mla	r0, r0, r4, r5
   1a858:	f890 0020 	ldrb.w	r0, [r0, #32]
   1a85c:	2800      	cmp	r0, #0
   1a85e:	d17a      	bne.n	1a956 <nrfx_uarte_init+0x10e>
    if (p_config->pseltxd != NRF_UARTE_PSEL_DISCONNECTED)
   1a860:	680f      	ldr	r7, [r1, #0]
   1a862:	1c7b      	adds	r3, r7, #1
   1a864:	d009      	beq.n	1a87a <nrfx_uarte_init+0x32>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1a866:	2301      	movs	r3, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1a868:	f04f 0c03 	mov.w	ip, #3
    p_reg->OUTSET = set_mask;
   1a86c:	483c      	ldr	r0, [pc, #240]	; (1a960 <nrfx_uarte_init+0x118>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1a86e:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1a870:	6083      	str	r3, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1a872:	f107 0380 	add.w	r3, r7, #128	; 0x80
   1a876:	f840 c023 	str.w	ip, [r0, r3, lsl #2]
    if (p_config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED)
   1a87a:	f8d1 c004 	ldr.w	ip, [r1, #4]
                    | (uint32_t)p_cfg->hwfc;
   1a87e:	f891 801b 	ldrb.w	r8, [r1, #27]
   1a882:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
   1a886:	bf1f      	itttt	ne
   1a888:	f04f 0e00 	movne.w	lr, #0
   1a88c:	4834      	ldrne	r0, [pc, #208]	; (1a960 <nrfx_uarte_init+0x118>)
   1a88e:	f10c 0380 	addne.w	r3, ip, #128	; 0x80
   1a892:	f840 e023 	strne.w	lr, [r0, r3, lsl #2]
    nrf_uarte_baudrate_set(p_instance->p_reg, p_config->baudrate);
   1a896:	6948      	ldr	r0, [r1, #20]
   1a898:	6833      	ldr	r3, [r6, #0]
   1a89a:	f891 e019 	ldrb.w	lr, [r1, #25]
    p_reg->BAUDRATE = baudrate;
   1a89e:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   1a8a2:	7e88      	ldrb	r0, [r1, #26]
    if (p_config->hal_cfg.hwfc == NRF_UARTE_HWFC_ENABLED)
   1a8a4:	f1be 0f01 	cmp.w	lr, #1
   1a8a8:	ea40 0008 	orr.w	r0, r0, r8
   1a8ac:	ea4e 0000 	orr.w	r0, lr, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1a8b0:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->PSEL.TXD = pseltxd;
   1a8b4:	f8c3 750c 	str.w	r7, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1a8b8:	f8c3 c514 	str.w	ip, [r3, #1300]	; 0x514
   1a8bc:	d120      	bne.n	1a900 <nrfx_uarte_init+0xb8>
        if (p_config->pselcts != NRF_UARTE_PSEL_DISCONNECTED)
   1a8be:	688f      	ldr	r7, [r1, #8]
   1a8c0:	1c78      	adds	r0, r7, #1
   1a8c2:	bf1f      	itttt	ne
   1a8c4:	f04f 0e00 	movne.w	lr, #0
   1a8c8:	f8df c094 	ldrne.w	ip, [pc, #148]	; 1a960 <nrfx_uarte_init+0x118>
   1a8cc:	f107 0080 	addne.w	r0, r7, #128	; 0x80
   1a8d0:	f84c e020 	strne.w	lr, [ip, r0, lsl #2]
        if (p_config->pselrts != NRF_UARTE_PSEL_DISCONNECTED)
   1a8d4:	68c8      	ldr	r0, [r1, #12]
   1a8d6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1a8da:	d00d      	beq.n	1a8f8 <nrfx_uarte_init+0xb0>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1a8dc:	f04f 0c01 	mov.w	ip, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1a8e0:	f04f 0803 	mov.w	r8, #3
    p_reg->OUTSET = set_mask;
   1a8e4:	f8df e078 	ldr.w	lr, [pc, #120]	; 1a960 <nrfx_uarte_init+0x118>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1a8e8:	fa0c fc00 	lsl.w	ip, ip, r0
    p_reg->OUTSET = set_mask;
   1a8ec:	f8ce c008 	str.w	ip, [lr, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1a8f0:	f100 0c80 	add.w	ip, r0, #128	; 0x80
   1a8f4:	f84e 802c 	str.w	r8, [lr, ip, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   1a8f8:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1a8fc:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    apply_config(p_instance, p_config);

    p_cb->handler   = event_handler;
   1a900:	2324      	movs	r3, #36	; 0x24
   1a902:	4363      	muls	r3, r4
    p_cb->p_context = p_config->p_context;
   1a904:	6909      	ldr	r1, [r1, #16]
    p_cb->handler   = event_handler;
   1a906:	18e8      	adds	r0, r5, r3
   1a908:	6042      	str	r2, [r0, #4]
    p_cb->p_context = p_config->p_context;
   1a90a:	50e9      	str	r1, [r5, r3]

    if (p_cb->handler)
   1a90c:	b192      	cbz	r2, 1a934 <nrfx_uarte_init+0xec>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a90e:	2300      	movs	r3, #0
    {
        interrupts_enable(p_instance, p_config->interrupt_priority);
   1a910:	6830      	ldr	r0, [r6, #0]
   1a912:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
   1a916:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   1a91a:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1a91e:	f8c0 3144 	str.w	r3, [r0, #324]	; 0x144
   1a922:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
    p_reg->INTENSET = mask;
   1a926:	4b0f      	ldr	r3, [pc, #60]	; (1a964 <nrfx_uarte_init+0x11c>)
   1a928:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    NRFX_IRQ_ENABLE(nrfx_get_irq_number((void *)p_instance->p_reg));
   1a92c:	f340 3007 	sbfx	r0, r0, #12, #8
   1a930:	f7f4 fd38 	bl	f3a4 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1a934:	2208      	movs	r2, #8
    }

    nrf_uarte_enable(p_instance->p_reg);
   1a936:	6833      	ldr	r3, [r6, #0]
    p_cb->tx_buffer_length           = 0;
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1a938:	480b      	ldr	r0, [pc, #44]	; (1a968 <nrfx_uarte_init+0x120>)
   1a93a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->rx_buffer_length           = 0;
   1a93e:	2324      	movs	r3, #36	; 0x24
   1a940:	2200      	movs	r2, #0
   1a942:	fb03 5304 	mla	r3, r3, r4, r5
    p_cb->rx_secondary_buffer_length = 0;
   1a946:	e9c3 2206 	strd	r2, r2, [r3, #24]
    p_cb->tx_buffer_length           = 0;
   1a94a:	615a      	str	r2, [r3, #20]
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
   1a94c:	2201      	movs	r2, #1
   1a94e:	f883 2020 	strb.w	r2, [r3, #32]
}
   1a952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
   1a956:	4805      	ldr	r0, [pc, #20]	; (1a96c <nrfx_uarte_init+0x124>)
   1a958:	e7fb      	b.n	1a952 <nrfx_uarte_init+0x10a>
   1a95a:	bf00      	nop
   1a95c:	20020b40 	.word	0x20020b40
   1a960:	40842500 	.word	0x40842500
   1a964:	00420310 	.word	0x00420310
   1a968:	0bad0000 	.word	0x0bad0000
   1a96c:	0bad0005 	.word	0x0bad0005

0001a970 <nrfx_uarte_tx>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1a970:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000

    nrfx_err_t err_code;

    // EasyDMA requires that transfer buffers are placed in DataRAM,
    // signal error if the are not.
    if (!nrfx_is_in_ram(p_data))
   1a974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
   1a978:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!nrfx_is_in_ram(p_data))
   1a97a:	d12e      	bne.n	1a9da <nrfx_uarte_tx+0x6a>
    return err_code;
}

bool nrfx_uarte_tx_in_progress(nrfx_uarte_t const * p_instance)
{
    return (m_cb[p_instance->drv_inst_idx].tx_buffer_length != 0);
   1a97c:	2424      	movs	r4, #36	; 0x24
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1a97e:	7905      	ldrb	r5, [r0, #4]
    return (m_cb[p_instance->drv_inst_idx].tx_buffer_length != 0);
   1a980:	4f19      	ldr	r7, [pc, #100]	; (1a9e8 <nrfx_uarte_tx+0x78>)
   1a982:	fb04 7405 	mla	r4, r4, r5, r7
   1a986:	6966      	ldr	r6, [r4, #20]
    if (nrfx_uarte_tx_in_progress(p_instance))
   1a988:	bb4e      	cbnz	r6, 1a9de <nrfx_uarte_tx+0x6e>
    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_ENDTX);
   1a98a:	6803      	ldr	r3, [r0, #0]
    p_cb->tx_buffer_length = length;
   1a98c:	6162      	str	r2, [r4, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a98e:	f8c3 6120 	str.w	r6, [r3, #288]	; 0x120
   1a992:	f8c3 6158 	str.w	r6, [r3, #344]	; 0x158
    nrf_uarte_tx_buffer_set(p_instance->p_reg, p_cb->p_tx_buffer, p_cb->tx_buffer_length);
   1a996:	6962      	ldr	r2, [r4, #20]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a998:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1a99c:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a9a0:	2201      	movs	r2, #1
    p_cb->p_tx_buffer      = p_data;
   1a9a2:	60a1      	str	r1, [r4, #8]
   1a9a4:	609a      	str	r2, [r3, #8]
    if (p_cb->handler == NULL)
   1a9a6:	6862      	ldr	r2, [r4, #4]
   1a9a8:	b9da      	cbnz	r2, 1a9e2 <nrfx_uarte_tx+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a9aa:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1a9ae:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
        while ((!endtx) && (!txstopped));
   1a9b2:	b919      	cbnz	r1, 1a9bc <nrfx_uarte_tx+0x4c>
   1a9b4:	2a00      	cmp	r2, #0
   1a9b6:	d0f8      	beq.n	1a9aa <nrfx_uarte_tx+0x3a>
            err_code = NRFX_ERROR_FORBIDDEN;
   1a9b8:	480c      	ldr	r0, [pc, #48]	; (1a9ec <nrfx_uarte_tx+0x7c>)
   1a9ba:	e008      	b.n	1a9ce <nrfx_uarte_tx+0x5e>
        if (txstopped)
   1a9bc:	2a00      	cmp	r2, #0
   1a9be:	d1fb      	bne.n	1a9b8 <nrfx_uarte_tx+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a9c0:	2201      	movs	r2, #1
   1a9c2:	60da      	str	r2, [r3, #12]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a9c4:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
            while (!nrf_uarte_event_check(p_instance->p_reg, NRF_UARTE_EVENT_TXSTOPPED))
   1a9c8:	2a00      	cmp	r2, #0
   1a9ca:	d0fb      	beq.n	1a9c4 <nrfx_uarte_tx+0x54>
    err_code = NRFX_SUCCESS;
   1a9cc:	4808      	ldr	r0, [pc, #32]	; (1a9f0 <nrfx_uarte_tx+0x80>)
        p_cb->tx_buffer_length = 0;
   1a9ce:	2324      	movs	r3, #36	; 0x24
   1a9d0:	fb03 7505 	mla	r5, r3, r5, r7
   1a9d4:	2300      	movs	r3, #0
   1a9d6:	616b      	str	r3, [r5, #20]
}
   1a9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return err_code;
   1a9da:	4806      	ldr	r0, [pc, #24]	; (1a9f4 <nrfx_uarte_tx+0x84>)
   1a9dc:	e7fc      	b.n	1a9d8 <nrfx_uarte_tx+0x68>
        return err_code;
   1a9de:	4806      	ldr	r0, [pc, #24]	; (1a9f8 <nrfx_uarte_tx+0x88>)
   1a9e0:	e7fa      	b.n	1a9d8 <nrfx_uarte_tx+0x68>
    err_code = NRFX_SUCCESS;
   1a9e2:	4803      	ldr	r0, [pc, #12]	; (1a9f0 <nrfx_uarte_tx+0x80>)
   1a9e4:	e7f8      	b.n	1a9d8 <nrfx_uarte_tx+0x68>
   1a9e6:	bf00      	nop
   1a9e8:	20020b40 	.word	0x20020b40
   1a9ec:	0bad0008 	.word	0x0bad0008
   1a9f0:	0bad0000 	.word	0x0bad0000
   1a9f4:	0bad000a 	.word	0x0bad000a
   1a9f8:	0bad000b 	.word	0x0bad000b

0001a9fc <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   1a9fc:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   1a9fe:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   1aa00:	4b08      	ldr	r3, [pc, #32]	; (1aa24 <z_sys_device_do_config_level+0x28>)
   1aa02:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1aa06:	3001      	adds	r0, #1
   1aa08:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1aa0c:	42a5      	cmp	r5, r4
   1aa0e:	d800      	bhi.n	1aa12 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   1aa10:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   1aa12:	6823      	ldr	r3, [r4, #0]
   1aa14:	4620      	mov	r0, r4
   1aa16:	685b      	ldr	r3, [r3, #4]
   1aa18:	4798      	blx	r3
		if (retval != 0) {
   1aa1a:	b100      	cbz	r0, 1aa1e <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   1aa1c:	6066      	str	r6, [r4, #4]
								info++) {
   1aa1e:	340c      	adds	r4, #12
   1aa20:	e7f4      	b.n	1aa0c <z_sys_device_do_config_level+0x10>
   1aa22:	bf00      	nop
   1aa24:	0001f3f8 	.word	0x0001f3f8

0001aa28 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   1aa28:	4b10      	ldr	r3, [pc, #64]	; (1aa6c <z_impl_device_get_binding+0x44>)
{
   1aa2a:	b570      	push	{r4, r5, r6, lr}
   1aa2c:	4605      	mov	r5, r0
   1aa2e:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   1aa30:	4c0f      	ldr	r4, [pc, #60]	; (1aa70 <z_impl_device_get_binding+0x48>)
   1aa32:	429c      	cmp	r4, r3
   1aa34:	d104      	bne.n	1aa40 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   1aa36:	4c0e      	ldr	r4, [pc, #56]	; (1aa70 <z_impl_device_get_binding+0x48>)
   1aa38:	42b4      	cmp	r4, r6
   1aa3a:	d109      	bne.n	1aa50 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   1aa3c:	2400      	movs	r4, #0
   1aa3e:	e012      	b.n	1aa66 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   1aa40:	6862      	ldr	r2, [r4, #4]
   1aa42:	b11a      	cbz	r2, 1aa4c <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   1aa44:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   1aa46:	6812      	ldr	r2, [r2, #0]
   1aa48:	42aa      	cmp	r2, r5
   1aa4a:	d00c      	beq.n	1aa66 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1aa4c:	340c      	adds	r4, #12
   1aa4e:	e7f0      	b.n	1aa32 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   1aa50:	6863      	ldr	r3, [r4, #4]
   1aa52:	b90b      	cbnz	r3, 1aa58 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1aa54:	340c      	adds	r4, #12
   1aa56:	e7ef      	b.n	1aa38 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   1aa58:	6823      	ldr	r3, [r4, #0]
   1aa5a:	4628      	mov	r0, r5
   1aa5c:	6819      	ldr	r1, [r3, #0]
   1aa5e:	f002 fb3a 	bl	1d0d6 <strcmp>
   1aa62:	2800      	cmp	r0, #0
   1aa64:	d1f6      	bne.n	1aa54 <z_impl_device_get_binding+0x2c>
}
   1aa66:	4620      	mov	r0, r4
   1aa68:	bd70      	pop	{r4, r5, r6, pc}
   1aa6a:	bf00      	nop
   1aa6c:	2002c680 	.word	0x2002c680
   1aa70:	2002c59c 	.word	0x2002c59c

0001aa74 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1aa74:	4b01      	ldr	r3, [pc, #4]	; (1aa7c <z_impl_z_errno+0x8>)
   1aa76:	6898      	ldr	r0, [r3, #8]
}
   1aa78:	3054      	adds	r0, #84	; 0x54
   1aa7a:	4770      	bx	lr
   1aa7c:	20024d28 	.word	0x20024d28

0001aa80 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1aa80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1aa84:	4605      	mov	r5, r0
   1aa86:	4688      	mov	r8, r1
	return z_impl_k_current_get();
   1aa88:	f000 fe9a 	bl	1b7c0 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1aa8c:	2201      	movs	r2, #1
   1aa8e:	f04f 0300 	mov.w	r3, #0
   1aa92:	4c26      	ldr	r4, [pc, #152]	; (1ab2c <z_fatal_error+0xac>)
   1aa94:	f362 0307 	bfi	r3, r2, #0, #8
   1aa98:	4a25      	ldr	r2, [pc, #148]	; (1ab30 <z_fatal_error+0xb0>)
   1aa9a:	2d04      	cmp	r5, #4
   1aa9c:	eba4 0402 	sub.w	r4, r4, r2
   1aaa0:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   1aaa4:	bf98      	it	ls
   1aaa6:	4a23      	ldrls	r2, [pc, #140]	; (1ab34 <z_fatal_error+0xb4>)
   1aaa8:	f364 138f 	bfi	r3, r4, #6, #10
   1aaac:	f8ad 3000 	strh.w	r3, [sp]
   1aab0:	4606      	mov	r6, r0
   1aab2:	f04f 0300 	mov.w	r3, #0
   1aab6:	bf94      	ite	ls
   1aab8:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
   1aabc:	4a1e      	ldrhi	r2, [pc, #120]	; (1ab38 <z_fatal_error+0xb8>)
   1aabe:	4629      	mov	r1, r5
   1aac0:	481e      	ldr	r0, [pc, #120]	; (1ab3c <z_fatal_error+0xbc>)
   1aac2:	f001 fdff 	bl	1c6c4 <log_3>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1aac6:	f8d8 301c 	ldr.w	r3, [r8, #28]
   1aaca:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
   1aace:	b14b      	cbz	r3, 1aae4 <z_fatal_error+0x64>
		LOG_ERR("Fault during interrupt handling\n");
   1aad0:	f04f 0100 	mov.w	r1, #0
   1aad4:	2301      	movs	r3, #1
   1aad6:	f363 0107 	bfi	r1, r3, #0, #8
   1aada:	f364 118f 	bfi	r1, r4, #6, #10
   1aade:	4818      	ldr	r0, [pc, #96]	; (1ab40 <z_fatal_error+0xc0>)
   1aae0:	f001 fdb7 	bl	1c652 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1aae4:	f04f 0700 	mov.w	r7, #0
   1aae8:	2301      	movs	r3, #1
	const char *thread_name = k_thread_name_get(thread);
   1aaea:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
   1aaec:	f363 0707 	bfi	r7, r3, #0, #8
   1aaf0:	f364 178f 	bfi	r7, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   1aaf4:	f003 fe6d 	bl	1e7d2 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1aaf8:	b1b0      	cbz	r0, 1ab28 <z_fatal_error+0xa8>
   1aafa:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   1aafc:	4b11      	ldr	r3, [pc, #68]	; (1ab44 <z_fatal_error+0xc4>)
   1aafe:	2a00      	cmp	r2, #0
   1ab00:	bf08      	it	eq
   1ab02:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   1ab04:	f7f3 ff92 	bl	ea2c <log_strdup>
   1ab08:	463b      	mov	r3, r7
   1ab0a:	4602      	mov	r2, r0
   1ab0c:	4631      	mov	r1, r6
   1ab0e:	480e      	ldr	r0, [pc, #56]	; (1ab48 <z_fatal_error+0xc8>)
   1ab10:	f001 fdc0 	bl	1c694 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   1ab14:	4641      	mov	r1, r8
   1ab16:	4628      	mov	r0, r5
   1ab18:	f7f7 fbce 	bl	122b8 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
   1ab1c:	4630      	mov	r0, r6
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
   1ab1e:	b002      	add	sp, #8
   1ab20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ab24:	f7f5 b89e 	b.w	fc64 <z_impl_k_thread_abort>
		thread_name = "unknown";
   1ab28:	4806      	ldr	r0, [pc, #24]	; (1ab44 <z_fatal_error+0xc4>)
   1ab2a:	e7eb      	b.n	1ab04 <z_fatal_error+0x84>
   1ab2c:	0001eeb8 	.word	0x0001eeb8
   1ab30:	0001ee58 	.word	0x0001ee58
   1ab34:	0001f410 	.word	0x0001f410
   1ab38:	00020908 	.word	0x00020908
   1ab3c:	0002091e 	.word	0x0002091e
   1ab40:	00020946 	.word	0x00020946
   1ab44:	00020916 	.word	0x00020916
   1ab48:	00020967 	.word	0x00020967

0001ab4c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1ab4c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1ab4e:	4d0b      	ldr	r5, [pc, #44]	; (1ab7c <idle+0x30>)
	__asm__ volatile(
   1ab50:	f04f 0220 	mov.w	r2, #32
   1ab54:	f3ef 8311 	mrs	r3, BASEPRI
   1ab58:	f382 8811 	msr	BASEPRI, r2
   1ab5c:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   1ab60:	f003 fe8f 	bl	1e882 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1ab64:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   1ab66:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1ab68:	2802      	cmp	r0, #2
   1ab6a:	bfd8      	it	le
   1ab6c:	4608      	movle	r0, r1
   1ab6e:	f003 fe98 	bl	1e8a2 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1ab72:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1ab74:	f7f4 fca0 	bl	f4b8 <arch_cpu_idle>
   1ab78:	e7ea      	b.n	1ab50 <idle+0x4>
   1ab7a:	bf00      	nop
   1ab7c:	20024d28 	.word	0x20024d28

0001ab80 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1ab80:	4802      	ldr	r0, [pc, #8]	; (1ab8c <z_bss_zero+0xc>)
   1ab82:	4a03      	ldr	r2, [pc, #12]	; (1ab90 <z_bss_zero+0x10>)
   1ab84:	2100      	movs	r1, #0
   1ab86:	1a12      	subs	r2, r2, r0
   1ab88:	f002 bb03 	b.w	1d192 <memset>
   1ab8c:	20020000 	.word	0x20020000
   1ab90:	200266e8 	.word	0x200266e8

0001ab94 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1ab94:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1ab96:	4806      	ldr	r0, [pc, #24]	; (1abb0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1ab98:	4a06      	ldr	r2, [pc, #24]	; (1abb4 <z_data_copy+0x20>)
   1ab9a:	4907      	ldr	r1, [pc, #28]	; (1abb8 <z_data_copy+0x24>)
   1ab9c:	1a12      	subs	r2, r2, r0
   1ab9e:	f002 face 	bl	1d13e <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1aba2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1aba6:	4a05      	ldr	r2, [pc, #20]	; (1abbc <z_data_copy+0x28>)
   1aba8:	4905      	ldr	r1, [pc, #20]	; (1abc0 <z_data_copy+0x2c>)
   1abaa:	4806      	ldr	r0, [pc, #24]	; (1abc4 <z_data_copy+0x30>)
   1abac:	f002 bac7 	b.w	1d13e <memcpy>
   1abb0:	2002c53c 	.word	0x2002c53c
   1abb4:	2002c77c 	.word	0x2002c77c
   1abb8:	000209d0 	.word	0x000209d0
   1abbc:	00000000 	.word	0x00000000
   1abc0:	000209d0 	.word	0x000209d0
   1abc4:	20020000 	.word	0x20020000

0001abc8 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1abc8:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1abca:	2002      	movs	r0, #2
   1abcc:	f7ff ff16 	bl	1a9fc <z_sys_device_do_config_level>
#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
			STRINGIFY(BUILD_VERSION), BOOT_DELAY_BANNER);
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
   1abd0:	4a08      	ldr	r2, [pc, #32]	; (1abf4 <bg_thread_main+0x2c>)
   1abd2:	4909      	ldr	r1, [pc, #36]	; (1abf8 <bg_thread_main+0x30>)
   1abd4:	4809      	ldr	r0, [pc, #36]	; (1abfc <bg_thread_main+0x34>)
   1abd6:	f001 fd09 	bl	1c5ec <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   1abda:	2003      	movs	r0, #3
   1abdc:	f7ff ff0e 	bl	1a9fc <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   1abe0:	f000 ff38 	bl	1ba54 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1abe4:	f001 f974 	bl	1bed0 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1abe8:	4a05      	ldr	r2, [pc, #20]	; (1ac00 <bg_thread_main+0x38>)
   1abea:	7b13      	ldrb	r3, [r2, #12]
   1abec:	f023 0301 	bic.w	r3, r3, #1
   1abf0:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1abf2:	bd08      	pop	{r3, pc}
   1abf4:	0001f89d 	.word	0x0001f89d
   1abf8:	0002097f 	.word	0x0002097f
   1abfc:	00020985 	.word	0x00020985
   1ac00:	20020c14 	.word	0x20020c14

0001ac04 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1ac04:	b580      	push	{r7, lr}
   1ac06:	b0b2      	sub	sp, #200	; 0xc8
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1ac08:	f7f3 fd84 	bl	e714 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   1ac0c:	4b33      	ldr	r3, [pc, #204]	; (1acdc <z_cstart+0xd8>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1ac0e:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ac12:	2400      	movs	r4, #0
   1ac14:	23e0      	movs	r3, #224	; 0xe0
   1ac16:	4d32      	ldr	r5, [pc, #200]	; (1ace0 <z_cstart+0xdc>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   1ac18:	2701      	movs	r7, #1
   1ac1a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1ac1e:	77ec      	strb	r4, [r5, #31]
   1ac20:	762c      	strb	r4, [r5, #24]
   1ac22:	766c      	strb	r4, [r5, #25]
   1ac24:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1ac26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   1ac28:	4e2e      	ldr	r6, [pc, #184]	; (1ace4 <z_cstart+0xe0>)
   1ac2a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1ac2e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1ac30:	f7f4 fff2 	bl	fc18 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1ac34:	f7f4 fc3a 	bl	f4ac <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1ac38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ac3c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1ac3e:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   1ac40:	ab06      	add	r3, sp, #24
   1ac42:	22b0      	movs	r2, #176	; 0xb0
   1ac44:	4621      	mov	r1, r4
   1ac46:	4618      	mov	r0, r3
   1ac48:	f002 faa3 	bl	1d192 <memset>
	_current = &dummy_thread;
   1ac4c:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1ac4e:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   1ac50:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1ac54:	f7ff fed2 	bl	1a9fc <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1ac58:	4638      	mov	r0, r7
   1ac5a:	f7ff fecf 	bl	1a9fc <z_sys_device_do_config_level>
	_kernel.ready_q.cache = &z_main_thread;
   1ac5e:	4d22      	ldr	r5, [pc, #136]	; (1ace8 <z_cstart+0xe4>)
	z_sched_init();
   1ac60:	f000 fd2e 	bl	1b6c0 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1ac64:	4b21      	ldr	r3, [pc, #132]	; (1acec <z_cstart+0xe8>)
   1ac66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1ac6a:	e9cd 7304 	strd	r7, r3, [sp, #16]
   1ac6e:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1ac72:	4b1f      	ldr	r3, [pc, #124]	; (1acf0 <z_cstart+0xec>)
   1ac74:	e9cd 4400 	strd	r4, r4, [sp]
   1ac78:	491e      	ldr	r1, [pc, #120]	; (1acf4 <z_cstart+0xf0>)
   1ac7a:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   1ac7c:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1ac7e:	f000 fe49 	bl	1b914 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1ac82:	7b6b      	ldrb	r3, [r5, #13]
   1ac84:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1ac88:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1ac8c:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1ac8e:	d104      	bne.n	1ac9a <z_cstart+0x96>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   1ac90:	69ab      	ldr	r3, [r5, #24]
   1ac92:	b913      	cbnz	r3, 1ac9a <z_cstart+0x96>
		z_add_thread_to_ready_q(thread);
   1ac94:	4628      	mov	r0, r5
   1ac96:	f000 fb53 	bl	1b340 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
   1ac9a:	4b17      	ldr	r3, [pc, #92]	; (1acf8 <z_cstart+0xf4>)
   1ac9c:	2201      	movs	r2, #1
   1ac9e:	9305      	str	r3, [sp, #20]
   1aca0:	230f      	movs	r3, #15
   1aca2:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1aca6:	2300      	movs	r3, #0
   1aca8:	4d14      	ldr	r5, [pc, #80]	; (1acfc <z_cstart+0xf8>)
   1acaa:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1acae:	9300      	str	r3, [sp, #0]
   1acb0:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1acb4:	4b12      	ldr	r3, [pc, #72]	; (1ad00 <z_cstart+0xfc>)
   1acb6:	4913      	ldr	r1, [pc, #76]	; (1ad04 <z_cstart+0x100>)
   1acb8:	4628      	mov	r0, r5
   1acba:	f000 fe2b 	bl	1b914 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1acbe:	7b6b      	ldrb	r3, [r5, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1acc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1acc4:	f023 0304 	bic.w	r3, r3, #4
   1acc8:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1acca:	4b0f      	ldr	r3, [pc, #60]	; (1ad08 <z_cstart+0x104>)
   1accc:	4909      	ldr	r1, [pc, #36]	; (1acf4 <z_cstart+0xf0>)
	list->tail = (sys_dnode_t *)list;
   1acce:	e9c6 3306 	strd	r3, r3, [r6, #24]
   1acd2:	4805      	ldr	r0, [pc, #20]	; (1ace8 <z_cstart+0xe4>)
   1acd4:	4b06      	ldr	r3, [pc, #24]	; (1acf0 <z_cstart+0xec>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   1acd6:	60f5      	str	r5, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1acd8:	f7f4 fbbe 	bl	f458 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1acdc:	20028b28 	.word	0x20028b28
   1ace0:	e000ed00 	.word	0xe000ed00
   1ace4:	20024d28 	.word	0x20024d28
   1ace8:	20020c14 	.word	0x20020c14
   1acec:	000209b1 	.word	0x000209b1
   1acf0:	0001abc9 	.word	0x0001abc9
   1acf4:	200271e8 	.word	0x200271e8
   1acf8:	000209b6 	.word	0x000209b6
   1acfc:	20020b64 	.word	0x20020b64
   1ad00:	0001ab4d 	.word	0x0001ab4d
   1ad04:	200281e8 	.word	0x200281e8
   1ad08:	20024d40 	.word	0x20024d40

0001ad0c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   1ad0c:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
   1ad0e:	2400      	movs	r4, #0
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1ad10:	4b0a      	ldr	r3, [pc, #40]	; (1ad3c <init_mem_slab_module+0x30>)
   1ad12:	480b      	ldr	r0, [pc, #44]	; (1ad40 <init_mem_slab_module+0x34>)
   1ad14:	4283      	cmp	r3, r0
   1ad16:	d301      	bcc.n	1ad1c <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
   1ad18:	2000      	movs	r0, #0
   1ad1a:	bd70      	pop	{r4, r5, r6, pc}
	for (j = 0U; j < slab->num_blocks; j++) {
   1ad1c:	2100      	movs	r1, #0
	p = slab->buffer;
   1ad1e:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   1ad20:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1ad22:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1ad24:	42a9      	cmp	r1, r5
   1ad26:	d101      	bne.n	1ad2c <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1ad28:	331c      	adds	r3, #28
   1ad2a:	e7f3      	b.n	1ad14 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   1ad2c:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1ad2e:	3101      	adds	r1, #1
		*(char **)p = slab->free_list;
   1ad30:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
   1ad32:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
   1ad34:	615a      	str	r2, [r3, #20]
		p += slab->block_size;
   1ad36:	4432      	add	r2, r6
   1ad38:	e7f4      	b.n	1ad24 <init_mem_slab_module+0x18>
   1ad3a:	bf00      	nop
   1ad3c:	2002c680 	.word	0x2002c680
   1ad40:	2002c69c 	.word	0x2002c69c

0001ad44 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   1ad44:	b510      	push	{r4, lr}
   1ad46:	4613      	mov	r3, r2
   1ad48:	460c      	mov	r4, r1
   1ad4a:	f04f 0220 	mov.w	r2, #32
   1ad4e:	f3ef 8111 	mrs	r1, BASEPRI
   1ad52:	f382 8811 	msr	BASEPRI, r2
   1ad56:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1ad5a:	6942      	ldr	r2, [r0, #20]
   1ad5c:	b15a      	cbz	r2, 1ad76 <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
   1ad5e:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1ad60:	6813      	ldr	r3, [r2, #0]
   1ad62:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1ad64:	6983      	ldr	r3, [r0, #24]
   1ad66:	3301      	adds	r3, #1
   1ad68:	6183      	str	r3, [r0, #24]
		result = 0;
   1ad6a:	2000      	movs	r0, #0
	__asm__ volatile(
   1ad6c:	f381 8811 	msr	BASEPRI, r1
   1ad70:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1ad74:	e00d      	b.n	1ad92 <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
   1ad76:	b91b      	cbnz	r3, 1ad80 <k_mem_slab_alloc+0x3c>
		*mem = NULL;
   1ad78:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1ad7a:	f06f 000b 	mvn.w	r0, #11
   1ad7e:	e7f5      	b.n	1ad6c <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1ad80:	4602      	mov	r2, r0
   1ad82:	4804      	ldr	r0, [pc, #16]	; (1ad94 <k_mem_slab_alloc+0x50>)
   1ad84:	f000 fc18 	bl	1b5b8 <z_pend_curr>
		if (result == 0) {
   1ad88:	b918      	cbnz	r0, 1ad92 <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
   1ad8a:	4b03      	ldr	r3, [pc, #12]	; (1ad98 <k_mem_slab_alloc+0x54>)
   1ad8c:	689b      	ldr	r3, [r3, #8]
   1ad8e:	695b      	ldr	r3, [r3, #20]
   1ad90:	6023      	str	r3, [r4, #0]
}
   1ad92:	bd10      	pop	{r4, pc}
   1ad94:	200265c6 	.word	0x200265c6
   1ad98:	20024d28 	.word	0x20024d28

0001ad9c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1ad9c:	b570      	push	{r4, r5, r6, lr}
   1ad9e:	4604      	mov	r4, r0
   1ada0:	460d      	mov	r5, r1
	__asm__ volatile(
   1ada2:	f04f 0320 	mov.w	r3, #32
   1ada6:	f3ef 8611 	mrs	r6, BASEPRI
   1adaa:	f383 8811 	msr	BASEPRI, r3
   1adae:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1adb2:	f003 fcb6 	bl	1e722 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1adb6:	b180      	cbz	r0, 1adda <k_mem_slab_free+0x3e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1adb8:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1adba:	682a      	ldr	r2, [r5, #0]
   1adbc:	6681      	str	r1, [r0, #104]	; 0x68
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1adbe:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1adc0:	7b42      	ldrb	r2, [r0, #13]
   1adc2:	06d2      	lsls	r2, r2, #27
   1adc4:	d103      	bne.n	1adce <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
   1adc6:	6983      	ldr	r3, [r0, #24]
   1adc8:	b90b      	cbnz	r3, 1adce <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
   1adca:	f000 fab9 	bl	1b340 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   1adce:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1add0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1add4:	4807      	ldr	r0, [pc, #28]	; (1adf4 <k_mem_slab_free+0x58>)
   1add6:	f003 bc2e 	b.w	1e636 <z_reschedule>
		**(char ***)mem = slab->free_list;
   1adda:	682b      	ldr	r3, [r5, #0]
   1addc:	6962      	ldr	r2, [r4, #20]
   1adde:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1ade0:	682b      	ldr	r3, [r5, #0]
   1ade2:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1ade4:	69a3      	ldr	r3, [r4, #24]
   1ade6:	3b01      	subs	r3, #1
   1ade8:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1adea:	f386 8811 	msr	BASEPRI, r6
   1adee:	f3bf 8f6f 	isb	sy
}
   1adf2:	bd70      	pop	{r4, r5, r6, pc}
   1adf4:	200265c6 	.word	0x200265c6

0001adf8 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   1adf8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   1adfa:	4c07      	ldr	r4, [pc, #28]	; (1ae18 <init_static_pools+0x20>)
   1adfc:	4d07      	ldr	r5, [pc, #28]	; (1ae1c <init_static_pools+0x24>)
   1adfe:	42ac      	cmp	r4, r5
   1ae00:	d301      	bcc.n	1ae06 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   1ae02:	2000      	movs	r0, #0
   1ae04:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1ae06:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   1ae0a:	4620      	mov	r0, r4
   1ae0c:	e9c4 3305 	strd	r3, r3, [r4, #20]
   1ae10:	f001 f8b5 	bl	1bf7e <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   1ae14:	341c      	adds	r4, #28
   1ae16:	e7f2      	b.n	1adfe <init_static_pools+0x6>
   1ae18:	2002c69c 	.word	0x2002c69c
   1ae1c:	2002c6b8 	.word	0x2002c6b8

0001ae20 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   1ae20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   1ae24:	1e1c      	subs	r4, r3, #0
{
   1ae26:	b085      	sub	sp, #20
   1ae28:	4607      	mov	r7, r0
   1ae2a:	460d      	mov	r5, r1
   1ae2c:	4692      	mov	sl, r2
	if (timeout > 0) {
   1ae2e:	dd3b      	ble.n	1aea8 <k_mem_pool_alloc+0x88>
	return z_impl_k_uptime_get();
   1ae30:	f003 fd55 	bl	1e8de <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   1ae34:	eb10 0804 	adds.w	r8, r0, r4
	return pool - &_k_mem_pool_list_start[0];
   1ae38:	4b1d      	ldr	r3, [pc, #116]	; (1aeb0 <k_mem_pool_alloc+0x90>)
   1ae3a:	4e1e      	ldr	r6, [pc, #120]	; (1aeb4 <k_mem_pool_alloc+0x94>)
   1ae3c:	1afb      	subs	r3, r7, r3
   1ae3e:	109b      	asrs	r3, r3, #2
   1ae40:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   1ae42:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   1ae46:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   1ae48:	ab03      	add	r3, sp, #12
   1ae4a:	aa02      	add	r2, sp, #8
   1ae4c:	9500      	str	r5, [sp, #0]
   1ae4e:	4651      	mov	r1, sl
   1ae50:	4638      	mov	r0, r7
   1ae52:	f001 f8da 	bl	1c00a <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   1ae56:	796b      	ldrb	r3, [r5, #5]
   1ae58:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   1ae5a:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   1ae5c:	f362 0303 	bfi	r3, r2, #0, #4
   1ae60:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   1ae62:	686b      	ldr	r3, [r5, #4]
   1ae64:	9a03      	ldr	r2, [sp, #12]
   1ae66:	f362 331f 	bfi	r3, r2, #12, #20
   1ae6a:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   1ae6c:	b1c8      	cbz	r0, 1aea2 <k_mem_pool_alloc+0x82>
   1ae6e:	b1c4      	cbz	r4, 1aea2 <k_mem_pool_alloc+0x82>
   1ae70:	f110 0f0c 	cmn.w	r0, #12
   1ae74:	d115      	bne.n	1aea2 <k_mem_pool_alloc+0x82>
	__asm__ volatile(
   1ae76:	f04f 0320 	mov.w	r3, #32
   1ae7a:	f3ef 8011 	mrs	r0, BASEPRI
   1ae7e:	f383 8811 	msr	BASEPRI, r3
   1ae82:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
   1ae86:	4622      	mov	r2, r4
   1ae88:	4659      	mov	r1, fp
   1ae8a:	f000 fb71 	bl	1b570 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   1ae8e:	1c63      	adds	r3, r4, #1
   1ae90:	d0da      	beq.n	1ae48 <k_mem_pool_alloc+0x28>
   1ae92:	f003 fd24 	bl	1e8de <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   1ae96:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   1ae9a:	2c00      	cmp	r4, #0
   1ae9c:	dcd4      	bgt.n	1ae48 <k_mem_pool_alloc+0x28>
				break;
			}
		}
	}

	return -EAGAIN;
   1ae9e:	f06f 000a 	mvn.w	r0, #10
}
   1aea2:	b005      	add	sp, #20
   1aea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   1aea8:	f04f 0800 	mov.w	r8, #0
   1aeac:	e7c4      	b.n	1ae38 <k_mem_pool_alloc+0x18>
   1aeae:	bf00      	nop
   1aeb0:	2002c69c 	.word	0x2002c69c
   1aeb4:	b6db6db7 	.word	0xb6db6db7

0001aeb8 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   1aeb8:	b570      	push	{r4, r5, r6, lr}
   1aeba:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   1aebc:	6802      	ldr	r2, [r0, #0]
   1aebe:	7841      	ldrb	r1, [r0, #1]
   1aec0:	4e11      	ldr	r6, [pc, #68]	; (1af08 <k_mem_pool_free_id+0x50>)
   1aec2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1aec6:	00a4      	lsls	r4, r4, #2
   1aec8:	0b12      	lsrs	r2, r2, #12
   1aeca:	f001 010f 	and.w	r1, r1, #15
   1aece:	1930      	adds	r0, r6, r4
   1aed0:	f001 f94d 	bl	1c16e <z_sys_mem_pool_block_free>
   1aed4:	f04f 0320 	mov.w	r3, #32
   1aed8:	f3ef 8511 	mrs	r5, BASEPRI
   1aedc:	f383 8811 	msr	BASEPRI, r3
   1aee0:	f3bf 8f6f 	isb	sy
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   1aee4:	f104 0014 	add.w	r0, r4, #20
   1aee8:	4430      	add	r0, r6
   1aeea:	f003 fc47 	bl	1e77c <z_unpend_all>

	if (need_sched != 0) {
   1aeee:	b128      	cbz	r0, 1aefc <k_mem_pool_free_id+0x44>
		z_reschedule(&lock, key);
   1aef0:	4629      	mov	r1, r5
	} else {
		k_spin_unlock(&lock, key);
	}
}
   1aef2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1aef6:	4805      	ldr	r0, [pc, #20]	; (1af0c <k_mem_pool_free_id+0x54>)
   1aef8:	f003 bb9d 	b.w	1e636 <z_reschedule>
	__asm__ volatile(
   1aefc:	f385 8811 	msr	BASEPRI, r5
   1af00:	f3bf 8f6f 	isb	sy
}
   1af04:	bd70      	pop	{r4, r5, r6, pc}
   1af06:	bf00      	nop
   1af08:	2002c69c 	.word	0x2002c69c
   1af0c:	200265c6 	.word	0x200265c6

0001af10 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   1af10:	4601      	mov	r1, r0
   1af12:	4801      	ldr	r0, [pc, #4]	; (1af18 <k_malloc+0x8>)
   1af14:	f003 ba51 	b.w	1e3ba <k_mem_pool_malloc>
   1af18:	2002c69c 	.word	0x2002c69c

0001af1c <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   1af1c:	4b03      	ldr	r3, [pc, #12]	; (1af2c <z_thread_malloc+0x10>)
{
   1af1e:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   1af20:	689b      	ldr	r3, [r3, #8]
   1af22:	6e18      	ldr	r0, [r3, #96]	; 0x60
   1af24:	b108      	cbz	r0, 1af2a <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   1af26:	f003 ba48 	b.w	1e3ba <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   1af2a:	4770      	bx	lr
   1af2c:	20024d28 	.word	0x20024d28

0001af30 <z_impl_k_msgq_put>:
	}
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
   1af30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af34:	4613      	mov	r3, r2
   1af36:	4604      	mov	r4, r0
   1af38:	460f      	mov	r7, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   1af3a:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   1af3e:	f04f 0220 	mov.w	r2, #32
   1af42:	f3ef 8611 	mrs	r6, BASEPRI
   1af46:	f382 8811 	msr	BASEPRI, r2
   1af4a:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   1af4e:	6a01      	ldr	r1, [r0, #32]
   1af50:	68c2      	ldr	r2, [r0, #12]
   1af52:	4291      	cmp	r1, r2
   1af54:	d22e      	bcs.n	1afb4 <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1af56:	f003 fbe4 	bl	1e722 <z_unpend_first_thread>
		if (pending_thread != NULL) {
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   1af5a:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   1af5c:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   1af5e:	4639      	mov	r1, r7
		if (pending_thread != NULL) {
   1af60:	b198      	cbz	r0, 1af8a <z_impl_k_msgq_put+0x5a>
			(void)memcpy(pending_thread->base.swap_data, data,
   1af62:	6940      	ldr	r0, [r0, #20]
   1af64:	f002 f8eb 	bl	1d13e <memcpy>
   1af68:	2300      	movs	r3, #0
   1af6a:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1af6c:	7b6b      	ldrb	r3, [r5, #13]
   1af6e:	06db      	lsls	r3, r3, #27
   1af70:	d104      	bne.n	1af7c <z_impl_k_msgq_put+0x4c>
	if (z_is_thread_ready(thread)) {
   1af72:	69ab      	ldr	r3, [r5, #24]
   1af74:	b913      	cbnz	r3, 1af7c <z_impl_k_msgq_put+0x4c>
		z_add_thread_to_ready_q(thread);
   1af76:	4628      	mov	r0, r5
   1af78:	f000 f9e2 	bl	1b340 <z_add_thread_to_ready_q>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   1af7c:	4640      	mov	r0, r8
   1af7e:	4631      	mov	r1, r6
   1af80:	f003 fb59 	bl	1e636 <z_reschedule>
			return 0;
   1af84:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1af86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   1af8a:	69e0      	ldr	r0, [r4, #28]
   1af8c:	f002 f8d7 	bl	1d13e <memcpy>
		result = 0;
   1af90:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
   1af92:	69e3      	ldr	r3, [r4, #28]
   1af94:	68a2      	ldr	r2, [r4, #8]
   1af96:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1af98:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1af9a:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1af9c:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1af9e:	bf04      	itt	eq
   1afa0:	6923      	ldreq	r3, [r4, #16]
   1afa2:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   1afa4:	6a23      	ldr	r3, [r4, #32]
   1afa6:	3301      	adds	r3, #1
   1afa8:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
   1afaa:	f386 8811 	msr	BASEPRI, r6
   1afae:	f3bf 8f6f 	isb	sy
	return result;
   1afb2:	e7e8      	b.n	1af86 <z_impl_k_msgq_put+0x56>
	} else if (timeout == K_NO_WAIT) {
   1afb4:	b14b      	cbz	r3, 1afca <z_impl_k_msgq_put+0x9a>
		_current->base.swap_data = data;
   1afb6:	4a06      	ldr	r2, [pc, #24]	; (1afd0 <z_impl_k_msgq_put+0xa0>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1afb8:	4631      	mov	r1, r6
		_current->base.swap_data = data;
   1afba:	6892      	ldr	r2, [r2, #8]
   1afbc:	6157      	str	r7, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1afbe:	4602      	mov	r2, r0
   1afc0:	4640      	mov	r0, r8
}
   1afc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1afc6:	f000 baf7 	b.w	1b5b8 <z_pend_curr>
		result = -ENOMSG;
   1afca:	f06f 004f 	mvn.w	r0, #79	; 0x4f
   1afce:	e7ec      	b.n	1afaa <z_impl_k_msgq_put+0x7a>
   1afd0:	20024d28 	.word	0x20024d28

0001afd4 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
   1afd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1afd8:	4604      	mov	r4, r0
   1afda:	4613      	mov	r3, r2
   1afdc:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   1afde:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
   1afe2:	f04f 0220 	mov.w	r2, #32
   1afe6:	f3ef 8611 	mrs	r6, BASEPRI
   1afea:	f382 8811 	msr	BASEPRI, r2
   1afee:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   1aff2:	6a22      	ldr	r2, [r4, #32]
   1aff4:	2a00      	cmp	r2, #0
   1aff6:	d037      	beq.n	1b068 <z_impl_k_msgq_get+0x94>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   1aff8:	68a2      	ldr	r2, [r4, #8]
   1affa:	69a1      	ldr	r1, [r4, #24]
   1affc:	f002 f89f 	bl	1d13e <memcpy>
		msgq->read_ptr += msgq->msg_size;
   1b000:	69a3      	ldr	r3, [r4, #24]
   1b002:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1b004:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   1b006:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   1b008:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   1b00a:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   1b00c:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   1b00e:	bf04      	itt	eq
   1b010:	6923      	ldreq	r3, [r4, #16]
   1b012:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   1b014:	6a23      	ldr	r3, [r4, #32]
   1b016:	3b01      	subs	r3, #1
   1b018:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1b01a:	f003 fb82 	bl	1e722 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1b01e:	4605      	mov	r5, r0
   1b020:	2800      	cmp	r0, #0
   1b022:	d02e      	beq.n	1b082 <z_impl_k_msgq_get+0xae>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   1b024:	68a2      	ldr	r2, [r4, #8]
   1b026:	6941      	ldr	r1, [r0, #20]
   1b028:	69e0      	ldr	r0, [r4, #28]
   1b02a:	f002 f888 	bl	1d13e <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   1b02e:	69e3      	ldr	r3, [r4, #28]
   1b030:	68a2      	ldr	r2, [r4, #8]
   1b032:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1b034:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1b036:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1b038:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1b03a:	bf04      	itt	eq
   1b03c:	6923      	ldreq	r3, [r4, #16]
   1b03e:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   1b040:	6a23      	ldr	r3, [r4, #32]
   1b042:	3301      	adds	r3, #1
   1b044:	6223      	str	r3, [r4, #32]
   1b046:	2300      	movs	r3, #0
   1b048:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b04a:	7b6b      	ldrb	r3, [r5, #13]
   1b04c:	06db      	lsls	r3, r3, #27
   1b04e:	d104      	bne.n	1b05a <z_impl_k_msgq_get+0x86>
	if (z_is_thread_ready(thread)) {
   1b050:	69ab      	ldr	r3, [r5, #24]
   1b052:	b913      	cbnz	r3, 1b05a <z_impl_k_msgq_get+0x86>
		z_add_thread_to_ready_q(thread);
   1b054:	4628      	mov	r0, r5
   1b056:	f000 f973 	bl	1b340 <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   1b05a:	4638      	mov	r0, r7
   1b05c:	4631      	mov	r1, r6
   1b05e:	f003 faea 	bl	1e636 <z_reschedule>
			return 0;
   1b062:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1b064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   1b068:	b14b      	cbz	r3, 1b07e <z_impl_k_msgq_get+0xaa>
		_current->base.swap_data = data;
   1b06a:	4a08      	ldr	r2, [pc, #32]	; (1b08c <z_impl_k_msgq_get+0xb8>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b06c:	4638      	mov	r0, r7
		_current->base.swap_data = data;
   1b06e:	6892      	ldr	r2, [r2, #8]
   1b070:	6151      	str	r1, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b072:	4622      	mov	r2, r4
   1b074:	4631      	mov	r1, r6
}
   1b076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b07a:	f000 ba9d 	b.w	1b5b8 <z_pend_curr>
		result = -ENOMSG;
   1b07e:	f06f 004f 	mvn.w	r0, #79	; 0x4f
	__asm__ volatile(
   1b082:	f386 8811 	msr	BASEPRI, r6
   1b086:	f3bf 8f6f 	isb	sy
	return result;
   1b08a:	e7eb      	b.n	1b064 <z_impl_k_msgq_get+0x90>
   1b08c:	20024d28 	.word	0x20024d28

0001b090 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   1b090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b092:	4604      	mov	r4, r0
   1b094:	460f      	mov	r7, r1
	__asm__ volatile(
   1b096:	f04f 0320 	mov.w	r3, #32
   1b09a:	f3ef 8511 	mrs	r5, BASEPRI
   1b09e:	f383 8811 	msr	BASEPRI, r3
   1b0a2:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1b0a6:	68c2      	ldr	r2, [r0, #12]
   1b0a8:	4930      	ldr	r1, [pc, #192]	; (1b16c <z_impl_k_mutex_lock+0xdc>)
   1b0aa:	b15a      	cbz	r2, 1b0c4 <z_impl_k_mutex_lock+0x34>
   1b0ac:	6880      	ldr	r0, [r0, #8]
   1b0ae:	688e      	ldr	r6, [r1, #8]
   1b0b0:	42b0      	cmp	r0, r6
   1b0b2:	d015      	beq.n	1b0e0 <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   1b0b4:	b9b7      	cbnz	r7, 1b0e4 <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
   1b0b6:	f385 8811 	msr	BASEPRI, r5
   1b0ba:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1b0be:	f06f 000f 	mvn.w	r0, #15
   1b0c2:	e00c      	b.n	1b0de <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
   1b0c4:	688b      	ldr	r3, [r1, #8]
   1b0c6:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1b0ca:	6123      	str	r3, [r4, #16]
		mutex->owner = _current;
   1b0cc:	688b      	ldr	r3, [r1, #8]
		mutex->lock_count++;
   1b0ce:	3201      	adds	r2, #1
   1b0d0:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
   1b0d2:	60a3      	str	r3, [r4, #8]
   1b0d4:	f385 8811 	msr	BASEPRI, r5
   1b0d8:	f3bf 8f6f 	isb	sy
		return 0;
   1b0dc:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1b0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   1b0e0:	6923      	ldr	r3, [r4, #16]
   1b0e2:	e7f2      	b.n	1b0ca <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1b0e4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b0e8:	f996 100e 	ldrsb.w	r1, [r6, #14]
   1b0ec:	4299      	cmp	r1, r3
   1b0ee:	bfa8      	it	ge
   1b0f0:	4619      	movge	r1, r3
   1b0f2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1b0f6:	4299      	cmp	r1, r3
   1b0f8:	da2b      	bge.n	1b152 <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
   1b0fa:	f000 fa9f 	bl	1b63c <z_set_prio>
   1b0fe:	4606      	mov	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1b100:	463b      	mov	r3, r7
   1b102:	4622      	mov	r2, r4
   1b104:	4629      	mov	r1, r5
   1b106:	481a      	ldr	r0, [pc, #104]	; (1b170 <z_impl_k_mutex_lock+0xe0>)
   1b108:	f000 fa56 	bl	1b5b8 <z_pend_curr>
	if (got_mutex == 0) {
   1b10c:	2800      	cmp	r0, #0
   1b10e:	d0e6      	beq.n	1b0de <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
   1b110:	f04f 0320 	mov.w	r3, #32
   1b114:	f3ef 8511 	mrs	r5, BASEPRI
   1b118:	f383 8811 	msr	BASEPRI, r3
   1b11c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1b120:	6823      	ldr	r3, [r4, #0]
   1b122:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b124:	429c      	cmp	r4, r3
   1b126:	d007      	beq.n	1b138 <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
   1b128:	b133      	cbz	r3, 1b138 <z_impl_k_mutex_lock+0xa8>
   1b12a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1b12e:	4299      	cmp	r1, r3
   1b130:	bfa8      	it	ge
   1b132:	4619      	movge	r1, r3
   1b134:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1b138:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1b13a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b13e:	4299      	cmp	r1, r3
   1b140:	d109      	bne.n	1b156 <z_impl_k_mutex_lock+0xc6>
	if (resched) {
   1b142:	b16e      	cbz	r6, 1b160 <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
   1b144:	4629      	mov	r1, r5
   1b146:	480a      	ldr	r0, [pc, #40]	; (1b170 <z_impl_k_mutex_lock+0xe0>)
   1b148:	f003 fa75 	bl	1e636 <z_reschedule>
	return -EAGAIN;
   1b14c:	f06f 000a 	mvn.w	r0, #10
   1b150:	e7c5      	b.n	1b0de <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
   1b152:	2600      	movs	r6, #0
   1b154:	e7d4      	b.n	1b100 <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
   1b156:	f000 fa71 	bl	1b63c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1b15a:	2800      	cmp	r0, #0
   1b15c:	d1f2      	bne.n	1b144 <z_impl_k_mutex_lock+0xb4>
   1b15e:	e7f0      	b.n	1b142 <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
   1b160:	f385 8811 	msr	BASEPRI, r5
   1b164:	f3bf 8f6f 	isb	sy
   1b168:	e7f0      	b.n	1b14c <z_impl_k_mutex_lock+0xbc>
   1b16a:	bf00      	nop
   1b16c:	20024d28 	.word	0x20024d28
   1b170:	200265c6 	.word	0x200265c6

0001b174 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1b174:	b538      	push	{r3, r4, r5, lr}
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1b176:	4b1d      	ldr	r3, [pc, #116]	; (1b1ec <z_impl_k_mutex_unlock+0x78>)
   1b178:	4604      	mov	r4, r0
   1b17a:	689a      	ldr	r2, [r3, #8]
   1b17c:	7bd3      	ldrb	r3, [r2, #15]
   1b17e:	3b01      	subs	r3, #1
   1b180:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
   1b182:	68c3      	ldr	r3, [r0, #12]
   1b184:	2b01      	cmp	r3, #1
   1b186:	d005      	beq.n	1b194 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
   1b188:	3b01      	subs	r3, #1
   1b18a:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
   1b18c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sched_unlock();
   1b190:	f000 b8ba 	b.w	1b308 <k_sched_unlock>
	__asm__ volatile(
   1b194:	f04f 0320 	mov.w	r3, #32
   1b198:	f3ef 8511 	mrs	r5, BASEPRI
   1b19c:	f383 8811 	msr	BASEPRI, r3
   1b1a0:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1b1a4:	6901      	ldr	r1, [r0, #16]
   1b1a6:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1b1a8:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b1ac:	4299      	cmp	r1, r3
   1b1ae:	d001      	beq.n	1b1b4 <z_impl_k_mutex_unlock+0x40>
		return z_set_prio(mutex->owner, new_prio);
   1b1b0:	f000 fa44 	bl	1b63c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1b1b4:	4620      	mov	r0, r4
   1b1b6:	f003 fab4 	bl	1e722 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1b1ba:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1b1bc:	b180      	cbz	r0, 1b1e0 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1b1be:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1b1c2:	6122      	str	r2, [r4, #16]
   1b1c4:	2200      	movs	r2, #0
   1b1c6:	6682      	str	r2, [r0, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b1c8:	7b42      	ldrb	r2, [r0, #13]
   1b1ca:	06d2      	lsls	r2, r2, #27
   1b1cc:	d103      	bne.n	1b1d6 <z_impl_k_mutex_unlock+0x62>
	if (z_is_thread_ready(thread)) {
   1b1ce:	6983      	ldr	r3, [r0, #24]
   1b1d0:	b90b      	cbnz	r3, 1b1d6 <z_impl_k_mutex_unlock+0x62>
		z_add_thread_to_ready_q(thread);
   1b1d2:	f000 f8b5 	bl	1b340 <z_add_thread_to_ready_q>
		z_reschedule(&lock, key);
   1b1d6:	4629      	mov	r1, r5
   1b1d8:	4805      	ldr	r0, [pc, #20]	; (1b1f0 <z_impl_k_mutex_unlock+0x7c>)
   1b1da:	f003 fa2c 	bl	1e636 <z_reschedule>
   1b1de:	e7d5      	b.n	1b18c <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0U;
   1b1e0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1b1e2:	f385 8811 	msr	BASEPRI, r5
   1b1e6:	f3bf 8f6f 	isb	sy
   1b1ea:	e7cf      	b.n	1b18c <z_impl_k_mutex_unlock+0x18>
   1b1ec:	20024d28 	.word	0x20024d28
   1b1f0:	200265c6 	.word	0x200265c6

0001b1f4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1b1f4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1b1f6:	4c08      	ldr	r4, [pc, #32]	; (1b218 <z_reset_time_slice+0x24>)
   1b1f8:	6823      	ldr	r3, [r4, #0]
   1b1fa:	b15b      	cbz	r3, 1b214 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1b1fc:	f7f4 f808 	bl	f210 <z_clock_elapsed>
   1b200:	6823      	ldr	r3, [r4, #0]
   1b202:	4a06      	ldr	r2, [pc, #24]	; (1b21c <z_reset_time_slice+0x28>)
   1b204:	4418      	add	r0, r3
   1b206:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1b208:	2100      	movs	r1, #0
	}
}
   1b20a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   1b20e:	4618      	mov	r0, r3
   1b210:	f003 bb47 	b.w	1e8a2 <z_set_timeout_expiry>
}
   1b214:	bd10      	pop	{r4, pc}
   1b216:	bf00      	nop
   1b218:	20024d64 	.word	0x20024d64
   1b21c:	20024d28 	.word	0x20024d28

0001b220 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
   1b220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b222:	460d      	mov	r5, r1
	__asm__ volatile(
   1b224:	f04f 0320 	mov.w	r3, #32
   1b228:	f3ef 8411 	mrs	r4, BASEPRI
   1b22c:	f383 8811 	msr	BASEPRI, r3
   1b230:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
   1b234:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1b238:	f240 36e7 	movw	r6, #999	; 0x3e7
   1b23c:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1b23e:	2200      	movs	r2, #0
   1b240:	fbe1 6700 	umlal	r6, r7, r1, r0
   1b244:	4b09      	ldr	r3, [pc, #36]	; (1b26c <k_sched_time_slice_set+0x4c>)
   1b246:	4630      	mov	r0, r6
   1b248:	611a      	str	r2, [r3, #16]
   1b24a:	4639      	mov	r1, r7
   1b24c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b250:	2300      	movs	r3, #0
   1b252:	f7f0 ffe5 	bl	c220 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1b256:	4b06      	ldr	r3, [pc, #24]	; (1b270 <k_sched_time_slice_set+0x50>)
   1b258:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1b25a:	4b06      	ldr	r3, [pc, #24]	; (1b274 <k_sched_time_slice_set+0x54>)
   1b25c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1b25e:	f7ff ffc9 	bl	1b1f4 <z_reset_time_slice>
	__asm__ volatile(
   1b262:	f384 8811 	msr	BASEPRI, r4
   1b266:	f3bf 8f6f 	isb	sy
	}
}
   1b26a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b26c:	20024d28 	.word	0x20024d28
   1b270:	20024d64 	.word	0x20024d64
   1b274:	20024d60 	.word	0x20024d60

0001b278 <k_sched_lock>:
	__asm__ volatile(
   1b278:	f04f 0320 	mov.w	r3, #32
   1b27c:	f3ef 8111 	mrs	r1, BASEPRI
   1b280:	f383 8811 	msr	BASEPRI, r3
   1b284:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1b288:	4b04      	ldr	r3, [pc, #16]	; (1b29c <k_sched_lock+0x24>)
   1b28a:	689a      	ldr	r2, [r3, #8]
   1b28c:	7bd3      	ldrb	r3, [r2, #15]
   1b28e:	3b01      	subs	r3, #1
   1b290:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1b292:	f381 8811 	msr	BASEPRI, r1
   1b296:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1b29a:	4770      	bx	lr
   1b29c:	20024d28 	.word	0x20024d28

0001b2a0 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1b2a0:	4b09      	ldr	r3, [pc, #36]	; (1b2c8 <z_priq_dumb_remove+0x28>)
   1b2a2:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1b2a6:	4282      	cmp	r2, r0
   1b2a8:	d105      	bne.n	1b2b6 <z_priq_dumb_remove+0x16>
   1b2aa:	689b      	ldr	r3, [r3, #8]
   1b2ac:	428b      	cmp	r3, r1
   1b2ae:	d102      	bne.n	1b2b6 <z_priq_dumb_remove+0x16>
   1b2b0:	7b4b      	ldrb	r3, [r1, #13]
   1b2b2:	06db      	lsls	r3, r3, #27
   1b2b4:	d106      	bne.n	1b2c4 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1b2b6:	e9d1 3200 	ldrd	r3, r2, [r1]
   1b2ba:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1b2bc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b2be:	2300      	movs	r3, #0
	node->prev = NULL;
   1b2c0:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1b2c4:	4770      	bx	lr
   1b2c6:	bf00      	nop
   1b2c8:	20024d28 	.word	0x20024d28

0001b2cc <update_cache>:
{
   1b2cc:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   1b2ce:	4c0d      	ldr	r4, [pc, #52]	; (1b304 <update_cache+0x38>)
{
   1b2d0:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   1b2d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1b2d6:	f003 f9ed 	bl	1e6b4 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
   1b2da:	4605      	mov	r5, r0
   1b2dc:	b900      	cbnz	r0, 1b2e0 <update_cache+0x14>
   1b2de:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1b2e0:	68a3      	ldr	r3, [r4, #8]
   1b2e2:	b94a      	cbnz	r2, 1b2f8 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   1b2e4:	7b5a      	ldrb	r2, [r3, #13]
   1b2e6:	06d2      	lsls	r2, r2, #27
   1b2e8:	d106      	bne.n	1b2f8 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1b2ea:	69aa      	ldr	r2, [r5, #24]
   1b2ec:	b922      	cbnz	r2, 1b2f8 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
   1b2ee:	89da      	ldrh	r2, [r3, #14]
   1b2f0:	2a7f      	cmp	r2, #127	; 0x7f
   1b2f2:	d901      	bls.n	1b2f8 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   1b2f4:	6263      	str	r3, [r4, #36]	; 0x24
}
   1b2f6:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   1b2f8:	429d      	cmp	r5, r3
   1b2fa:	d001      	beq.n	1b300 <update_cache+0x34>
			z_reset_time_slice();
   1b2fc:	f7ff ff7a 	bl	1b1f4 <z_reset_time_slice>
		_kernel.ready_q.cache = th;
   1b300:	6265      	str	r5, [r4, #36]	; 0x24
}
   1b302:	e7f8      	b.n	1b2f6 <update_cache+0x2a>
   1b304:	20024d28 	.word	0x20024d28

0001b308 <k_sched_unlock>:
{
   1b308:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b30a:	f04f 0320 	mov.w	r3, #32
   1b30e:	f3ef 8411 	mrs	r4, BASEPRI
   1b312:	f383 8811 	msr	BASEPRI, r3
   1b316:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1b31a:	4b08      	ldr	r3, [pc, #32]	; (1b33c <k_sched_unlock+0x34>)
		update_cache(0);
   1b31c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1b31e:	689a      	ldr	r2, [r3, #8]
   1b320:	7bd3      	ldrb	r3, [r2, #15]
   1b322:	3301      	adds	r3, #1
   1b324:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1b326:	f7ff ffd1 	bl	1b2cc <update_cache>
	__asm__ volatile(
   1b32a:	f384 8811 	msr	BASEPRI, r4
   1b32e:	f3bf 8f6f 	isb	sy
}
   1b332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1b336:	f003 b995 	b.w	1e664 <z_reschedule_unlocked>
   1b33a:	bf00      	nop
   1b33c:	20024d28 	.word	0x20024d28

0001b340 <z_add_thread_to_ready_q>:
{
   1b340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1b342:	f04f 0320 	mov.w	r3, #32
   1b346:	f3ef 8411 	mrs	r4, BASEPRI
   1b34a:	f383 8811 	msr	BASEPRI, r3
   1b34e:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1b352:	4a15      	ldr	r2, [pc, #84]	; (1b3a8 <z_add_thread_to_ready_q+0x68>)
   1b354:	4611      	mov	r1, r2
   1b356:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b35a:	428b      	cmp	r3, r1
   1b35c:	d01d      	beq.n	1b39a <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b35e:	b1e3      	cbz	r3, 1b39a <z_add_thread_to_ready_q+0x5a>
   1b360:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1b362:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1b366:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1b36a:	42af      	cmp	r7, r5
   1b36c:	dd10      	ble.n	1b390 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
   1b36e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b370:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1b374:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1b376:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1b378:	7b43      	ldrb	r3, [r0, #13]
   1b37a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b37e:	7343      	strb	r3, [r0, #13]
		update_cache(0);
   1b380:	2000      	movs	r0, #0
   1b382:	f7ff ffa3 	bl	1b2cc <update_cache>
	__asm__ volatile(
   1b386:	f384 8811 	msr	BASEPRI, r4
   1b38a:	f3bf 8f6f 	isb	sy
}
   1b38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1b390:	42b3      	cmp	r3, r6
   1b392:	d002      	beq.n	1b39a <z_add_thread_to_ready_q+0x5a>
   1b394:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b396:	2b00      	cmp	r3, #0
   1b398:	d1e5      	bne.n	1b366 <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
   1b39a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   1b39c:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   1b39e:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   1b3a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1b3a2:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1b3a4:	62d0      	str	r0, [r2, #44]	; 0x2c
   1b3a6:	e7e7      	b.n	1b378 <z_add_thread_to_ready_q+0x38>
   1b3a8:	20024d28 	.word	0x20024d28

0001b3ac <z_move_thread_to_end_of_prio_q>:
{
   1b3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b3ae:	4604      	mov	r4, r0
	__asm__ volatile(
   1b3b0:	f04f 0320 	mov.w	r3, #32
   1b3b4:	f3ef 8511 	mrs	r5, BASEPRI
   1b3b8:	f383 8811 	msr	BASEPRI, r3
   1b3bc:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1b3c0:	7b43      	ldrb	r3, [r0, #13]
   1b3c2:	065a      	lsls	r2, r3, #25
   1b3c4:	d503      	bpl.n	1b3ce <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b3c6:	4601      	mov	r1, r0
   1b3c8:	4817      	ldr	r0, [pc, #92]	; (1b428 <z_move_thread_to_end_of_prio_q+0x7c>)
   1b3ca:	f7ff ff69 	bl	1b2a0 <z_priq_dumb_remove>
	return list->head == list;
   1b3ce:	4a17      	ldr	r2, [pc, #92]	; (1b42c <z_move_thread_to_end_of_prio_q+0x80>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b3d0:	f102 0128 	add.w	r1, r2, #40	; 0x28
   1b3d4:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   1b3d8:	428b      	cmp	r3, r1
   1b3da:	d01f      	beq.n	1b41c <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b3dc:	b1f3      	cbz	r3, 1b41c <z_move_thread_to_end_of_prio_q+0x70>
	if (t1->base.prio < t2->base.prio) {
   1b3de:	f994 600e 	ldrsb.w	r6, [r4, #14]
   1b3e2:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1b3e6:	42b7      	cmp	r7, r6
   1b3e8:	dd13      	ble.n	1b412 <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
   1b3ea:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1b3ec:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   1b3f0:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1b3f2:	605c      	str	r4, [r3, #4]
   1b3f4:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   1b3f6:	6890      	ldr	r0, [r2, #8]
   1b3f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b3fc:	7363      	strb	r3, [r4, #13]
   1b3fe:	1b03      	subs	r3, r0, r4
   1b400:	4258      	negs	r0, r3
   1b402:	4158      	adcs	r0, r3
   1b404:	f7ff ff62 	bl	1b2cc <update_cache>
	__asm__ volatile(
   1b408:	f385 8811 	msr	BASEPRI, r5
   1b40c:	f3bf 8f6f 	isb	sy
}
   1b410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1b412:	4298      	cmp	r0, r3
   1b414:	d002      	beq.n	1b41c <z_move_thread_to_end_of_prio_q+0x70>
   1b416:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b418:	2b00      	cmp	r3, #0
   1b41a:	d1e2      	bne.n	1b3e2 <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
   1b41c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   1b420:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1b422:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b424:	62d4      	str	r4, [r2, #44]	; 0x2c
   1b426:	e7e5      	b.n	1b3f4 <z_move_thread_to_end_of_prio_q+0x48>
   1b428:	20024d50 	.word	0x20024d50
   1b42c:	20024d28 	.word	0x20024d28

0001b430 <z_time_slice>:
	if (pending_current == _current) {
   1b430:	4a15      	ldr	r2, [pc, #84]	; (1b488 <z_time_slice+0x58>)
   1b432:	4916      	ldr	r1, [pc, #88]	; (1b48c <z_time_slice+0x5c>)
{
   1b434:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   1b436:	680c      	ldr	r4, [r1, #0]
   1b438:	6893      	ldr	r3, [r2, #8]
   1b43a:	42a3      	cmp	r3, r4
   1b43c:	4614      	mov	r4, r2
   1b43e:	d103      	bne.n	1b448 <z_time_slice+0x18>
}
   1b440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   1b444:	f7ff bed6 	b.w	1b1f4 <z_reset_time_slice>
	pending_current = NULL;
   1b448:	2500      	movs	r5, #0
   1b44a:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   1b44c:	4910      	ldr	r1, [pc, #64]	; (1b490 <z_time_slice+0x60>)
   1b44e:	6809      	ldr	r1, [r1, #0]
   1b450:	b1b9      	cbz	r1, 1b482 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   1b452:	89d9      	ldrh	r1, [r3, #14]
   1b454:	297f      	cmp	r1, #127	; 0x7f
   1b456:	d814      	bhi.n	1b482 <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
   1b458:	490e      	ldr	r1, [pc, #56]	; (1b494 <z_time_slice+0x64>)
   1b45a:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1b45e:	6809      	ldr	r1, [r1, #0]
   1b460:	428d      	cmp	r5, r1
   1b462:	db0e      	blt.n	1b482 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
   1b464:	490c      	ldr	r1, [pc, #48]	; (1b498 <z_time_slice+0x68>)
   1b466:	428b      	cmp	r3, r1
   1b468:	d00b      	beq.n	1b482 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   1b46a:	6999      	ldr	r1, [r3, #24]
   1b46c:	b949      	cbnz	r1, 1b482 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   1b46e:	6911      	ldr	r1, [r2, #16]
   1b470:	4281      	cmp	r1, r0
   1b472:	dc03      	bgt.n	1b47c <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   1b474:	4618      	mov	r0, r3
   1b476:	f7ff ff99 	bl	1b3ac <z_move_thread_to_end_of_prio_q>
   1b47a:	e7e1      	b.n	1b440 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   1b47c:	1a09      	subs	r1, r1, r0
   1b47e:	6111      	str	r1, [r2, #16]
}
   1b480:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   1b482:	2300      	movs	r3, #0
   1b484:	6123      	str	r3, [r4, #16]
   1b486:	e7fb      	b.n	1b480 <z_time_slice+0x50>
   1b488:	20024d28 	.word	0x20024d28
   1b48c:	20024d5c 	.word	0x20024d5c
   1b490:	20024d64 	.word	0x20024d64
   1b494:	20024d60 	.word	0x20024d60
   1b498:	20020b64 	.word	0x20020b64

0001b49c <z_remove_thread_from_ready_q>:
{
   1b49c:	b538      	push	{r3, r4, r5, lr}
   1b49e:	4604      	mov	r4, r0
	__asm__ volatile(
   1b4a0:	f04f 0320 	mov.w	r3, #32
   1b4a4:	f3ef 8511 	mrs	r5, BASEPRI
   1b4a8:	f383 8811 	msr	BASEPRI, r3
   1b4ac:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1b4b0:	7b43      	ldrb	r3, [r0, #13]
   1b4b2:	065a      	lsls	r2, r3, #25
   1b4b4:	d507      	bpl.n	1b4c6 <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b4b6:	4601      	mov	r1, r0
   1b4b8:	4809      	ldr	r0, [pc, #36]	; (1b4e0 <z_remove_thread_from_ready_q+0x44>)
   1b4ba:	f7ff fef1 	bl	1b2a0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1b4be:	7b63      	ldrb	r3, [r4, #13]
   1b4c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1b4c4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1b4c6:	4b07      	ldr	r3, [pc, #28]	; (1b4e4 <z_remove_thread_from_ready_q+0x48>)
   1b4c8:	6898      	ldr	r0, [r3, #8]
   1b4ca:	1b03      	subs	r3, r0, r4
   1b4cc:	4258      	negs	r0, r3
   1b4ce:	4158      	adcs	r0, r3
   1b4d0:	f7ff fefc 	bl	1b2cc <update_cache>
	__asm__ volatile(
   1b4d4:	f385 8811 	msr	BASEPRI, r5
   1b4d8:	f3bf 8f6f 	isb	sy
}
   1b4dc:	bd38      	pop	{r3, r4, r5, pc}
   1b4de:	bf00      	nop
   1b4e0:	20024d50 	.word	0x20024d50
   1b4e4:	20024d28 	.word	0x20024d28

0001b4e8 <pend>:
{
   1b4e8:	b570      	push	{r4, r5, r6, lr}
   1b4ea:	4604      	mov	r4, r0
   1b4ec:	460d      	mov	r5, r1
   1b4ee:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   1b4f0:	f7ff ffd4 	bl	1b49c <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   1b4f4:	7b63      	ldrb	r3, [r4, #13]
   1b4f6:	f043 0302 	orr.w	r3, r3, #2
   1b4fa:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1b4fc:	b17d      	cbz	r5, 1b51e <pend+0x36>
	return list->head == list;
   1b4fe:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1b500:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b502:	429d      	cmp	r5, r3
   1b504:	d029      	beq.n	1b55a <pend+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b506:	b343      	cbz	r3, 1b55a <pend+0x72>
	if (t1->base.prio < t2->base.prio) {
   1b508:	f994 200e 	ldrsb.w	r2, [r4, #14]
   1b50c:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1b510:	4291      	cmp	r1, r2
   1b512:	dd1c      	ble.n	1b54e <pend+0x66>
	node->prev = successor->prev;
   1b514:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b516:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1b51a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b51c:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   1b51e:	1c73      	adds	r3, r6, #1
   1b520:	d022      	beq.n	1b568 <pend+0x80>
   1b522:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1b526:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b52a:	2100      	movs	r1, #0
   1b52c:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   1b530:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b534:	fbc5 0106 	smlal	r0, r1, r5, r6
   1b538:	2300      	movs	r3, #0
   1b53a:	f7f0 fe71 	bl	c220 <__aeabi_uldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1b53e:	490b      	ldr	r1, [pc, #44]	; (1b56c <pend+0x84>)
   1b540:	1c42      	adds	r2, r0, #1
   1b542:	f104 0018 	add.w	r0, r4, #24
}
   1b546:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1b54a:	f000 bb3b 	b.w	1bbc4 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   1b54e:	6869      	ldr	r1, [r5, #4]
   1b550:	428b      	cmp	r3, r1
   1b552:	d002      	beq.n	1b55a <pend+0x72>
   1b554:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b556:	2b00      	cmp	r3, #0
   1b558:	d1d8      	bne.n	1b50c <pend+0x24>
	node->prev = list->tail;
   1b55a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1b55c:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   1b55e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1b560:	686b      	ldr	r3, [r5, #4]
   1b562:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b564:	606c      	str	r4, [r5, #4]
   1b566:	e7da      	b.n	1b51e <pend+0x36>
}
   1b568:	bd70      	pop	{r4, r5, r6, pc}
   1b56a:	bf00      	nop
   1b56c:	0001e6c1 	.word	0x0001e6c1

0001b570 <z_pend_curr_irqlock>:
{
   1b570:	b570      	push	{r4, r5, r6, lr}
   1b572:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   1b574:	4d0e      	ldr	r5, [pc, #56]	; (1b5b0 <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
   1b576:	4c0f      	ldr	r4, [pc, #60]	; (1b5b4 <z_pend_curr_irqlock+0x44>)
	pend(_current, wait_q, timeout);
   1b578:	68a8      	ldr	r0, [r5, #8]
   1b57a:	f7ff ffb5 	bl	1b4e8 <pend>
	pending_current = _current;
   1b57e:	68ab      	ldr	r3, [r5, #8]
	int ret = z_swap_irqlock(key);
   1b580:	4630      	mov	r0, r6
	pending_current = _current;
   1b582:	6023      	str	r3, [r4, #0]
	int ret = z_swap_irqlock(key);
   1b584:	f003 f81c 	bl	1e5c0 <z_swap_irqlock>
	__asm__ volatile(
   1b588:	f04f 0220 	mov.w	r2, #32
   1b58c:	f3ef 8311 	mrs	r3, BASEPRI
   1b590:	f382 8811 	msr	BASEPRI, r2
   1b594:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
   1b598:	6822      	ldr	r2, [r4, #0]
   1b59a:	68a9      	ldr	r1, [r5, #8]
   1b59c:	4291      	cmp	r1, r2
			pending_current = NULL;
   1b59e:	bf04      	itt	eq
   1b5a0:	2200      	moveq	r2, #0
   1b5a2:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
   1b5a4:	f383 8811 	msr	BASEPRI, r3
   1b5a8:	f3bf 8f6f 	isb	sy
}
   1b5ac:	bd70      	pop	{r4, r5, r6, pc}
   1b5ae:	bf00      	nop
   1b5b0:	20024d28 	.word	0x20024d28
   1b5b4:	20024d5c 	.word	0x20024d5c

0001b5b8 <z_pend_curr>:
{
   1b5b8:	b510      	push	{r4, lr}
   1b5ba:	460c      	mov	r4, r1
   1b5bc:	4611      	mov	r1, r2
	pending_current = _current;
   1b5be:	4a06      	ldr	r2, [pc, #24]	; (1b5d8 <z_pend_curr+0x20>)
   1b5c0:	6890      	ldr	r0, [r2, #8]
   1b5c2:	4a06      	ldr	r2, [pc, #24]	; (1b5dc <z_pend_curr+0x24>)
   1b5c4:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   1b5c6:	461a      	mov	r2, r3
   1b5c8:	f7ff ff8e 	bl	1b4e8 <pend>
 * handling.
 */
static ALWAYS_INLINE int z_swap(struct k_spinlock *lock, k_spinlock_key_t key)
{
	k_spin_release(lock);
	return z_swap_irqlock(key.key);
   1b5cc:	4620      	mov	r0, r4
}
   1b5ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b5d2:	f002 bff5 	b.w	1e5c0 <z_swap_irqlock>
   1b5d6:	bf00      	nop
   1b5d8:	20024d28 	.word	0x20024d28
   1b5dc:	20024d5c 	.word	0x20024d5c

0001b5e0 <z_tick_sleep.part.19>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
   1b5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
   1b5e2:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   1b5e4:	f003 f977 	bl	1e8d6 <z_tick_get_32>
   1b5e8:	1834      	adds	r4, r6, r0
	__asm__ volatile(
   1b5ea:	f04f 0320 	mov.w	r3, #32
   1b5ee:	f3ef 8711 	mrs	r7, BASEPRI
   1b5f2:	f383 8811 	msr	BASEPRI, r3
   1b5f6:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1b5fa:	4d0d      	ldr	r5, [pc, #52]	; (1b630 <z_tick_sleep.part.19+0x50>)
   1b5fc:	4b0d      	ldr	r3, [pc, #52]	; (1b634 <z_tick_sleep.part.19+0x54>)
   1b5fe:	68a8      	ldr	r0, [r5, #8]
   1b600:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   1b602:	f7ff ff4b 	bl	1b49c <z_remove_thread_from_ready_q>
   1b606:	68a8      	ldr	r0, [r5, #8]
   1b608:	490b      	ldr	r1, [pc, #44]	; (1b638 <z_tick_sleep.part.19+0x58>)
   1b60a:	4632      	mov	r2, r6
   1b60c:	3018      	adds	r0, #24
   1b60e:	f000 fad9 	bl	1bbc4 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
   1b612:	68aa      	ldr	r2, [r5, #8]
   1b614:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b616:	7b53      	ldrb	r3, [r2, #13]
   1b618:	f043 0310 	orr.w	r3, r3, #16
   1b61c:	7353      	strb	r3, [r2, #13]
   1b61e:	f002 ffcf 	bl	1e5c0 <z_swap_irqlock>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   1b622:	f003 f958 	bl	1e8d6 <z_tick_get_32>
   1b626:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1b628:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1b62c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b62e:	bf00      	nop
   1b630:	20024d28 	.word	0x20024d28
   1b634:	20024d5c 	.word	0x20024d5c
   1b638:	0001e6c1 	.word	0x0001e6c1

0001b63c <z_set_prio>:
{
   1b63c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b640:	4604      	mov	r4, r0
   1b642:	f04f 0320 	mov.w	r3, #32
   1b646:	f3ef 8911 	mrs	r9, BASEPRI
   1b64a:	f383 8811 	msr	BASEPRI, r3
   1b64e:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
   1b652:	f002 ffac 	bl	1e5ae <z_is_thread_ready>
		if (need_sched) {
   1b656:	b24e      	sxtb	r6, r1
   1b658:	4680      	mov	r8, r0
   1b65a:	b360      	cbz	r0, 1b6b6 <z_set_prio+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b65c:	4d17      	ldr	r5, [pc, #92]	; (1b6bc <z_set_prio+0x80>)
   1b65e:	4621      	mov	r1, r4
   1b660:	f105 0728 	add.w	r7, r5, #40	; 0x28
   1b664:	4638      	mov	r0, r7
   1b666:	f7ff fe1b 	bl	1b2a0 <z_priq_dumb_remove>
	return list->head == list;
   1b66a:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
   1b66c:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b66e:	42bb      	cmp	r3, r7
   1b670:	462a      	mov	r2, r5
   1b672:	d019      	beq.n	1b6a8 <z_set_prio+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b674:	b1c3      	cbz	r3, 1b6a8 <z_set_prio+0x6c>
   1b676:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1b678:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1b67c:	42b0      	cmp	r0, r6
   1b67e:	dd0e      	ble.n	1b69e <z_set_prio+0x62>
	node->prev = successor->prev;
   1b680:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b682:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1b686:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b688:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1b68a:	2001      	movs	r0, #1
   1b68c:	f7ff fe1e 	bl	1b2cc <update_cache>
	__asm__ volatile(
   1b690:	f389 8811 	msr	BASEPRI, r9
   1b694:	f3bf 8f6f 	isb	sy
}
   1b698:	4640      	mov	r0, r8
   1b69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (node == list->tail) ? NULL : node->next;
   1b69e:	4299      	cmp	r1, r3
   1b6a0:	d002      	beq.n	1b6a8 <z_set_prio+0x6c>
   1b6a2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b6a4:	2b00      	cmp	r3, #0
   1b6a6:	d1e7      	bne.n	1b678 <z_set_prio+0x3c>
	node->prev = list->tail;
   1b6a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   1b6aa:	6027      	str	r7, [r4, #0]
	node->prev = list->tail;
   1b6ac:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1b6ae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1b6b0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b6b2:	62d4      	str	r4, [r2, #44]	; 0x2c
   1b6b4:	e7e9      	b.n	1b68a <z_set_prio+0x4e>
			thread->base.prio = prio;
   1b6b6:	73a6      	strb	r6, [r4, #14]
   1b6b8:	e7ea      	b.n	1b690 <z_set_prio+0x54>
   1b6ba:	bf00      	nop
   1b6bc:	20024d28 	.word	0x20024d28

0001b6c0 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1b6c0:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1b6c2:	4b04      	ldr	r3, [pc, #16]	; (1b6d4 <z_sched_init+0x14>)
   1b6c4:	4608      	mov	r0, r1
   1b6c6:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1b6ca:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1b6ce:	f7ff bda7 	b.w	1b220 <k_sched_time_slice_set>
   1b6d2:	bf00      	nop
   1b6d4:	20024d28 	.word	0x20024d28

0001b6d8 <z_impl_k_yield>:
{
   1b6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1b6da:	4c23      	ldr	r4, [pc, #140]	; (1b768 <z_impl_k_yield+0x90>)
   1b6dc:	4b23      	ldr	r3, [pc, #140]	; (1b76c <z_impl_k_yield+0x94>)
   1b6de:	68a2      	ldr	r2, [r4, #8]
   1b6e0:	429a      	cmp	r2, r3
   1b6e2:	d029      	beq.n	1b738 <z_impl_k_yield+0x60>
	__asm__ volatile(
   1b6e4:	f04f 0320 	mov.w	r3, #32
   1b6e8:	f3ef 8611 	mrs	r6, BASEPRI
   1b6ec:	f383 8811 	msr	BASEPRI, r3
   1b6f0:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1b6f4:	f104 0528 	add.w	r5, r4, #40	; 0x28
   1b6f8:	68a1      	ldr	r1, [r4, #8]
   1b6fa:	4628      	mov	r0, r5
   1b6fc:	f7ff fdd0 	bl	1b2a0 <z_priq_dumb_remove>
	return list->head == list;
   1b700:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1b702:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b704:	42aa      	cmp	r2, r5
   1b706:	d028      	beq.n	1b75a <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b708:	b33a      	cbz	r2, 1b75a <z_impl_k_yield+0x82>
   1b70a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1b70c:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1b710:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1b714:	428f      	cmp	r7, r1
   1b716:	dd1b      	ble.n	1b750 <z_impl_k_yield+0x78>
	node->prev = successor->prev;
   1b718:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1b71a:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   1b71e:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1b720:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   1b722:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
   1b724:	2001      	movs	r0, #1
   1b726:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1b72a:	735a      	strb	r2, [r3, #13]
   1b72c:	f7ff fdce 	bl	1b2cc <update_cache>
	__asm__ volatile(
   1b730:	f386 8811 	msr	BASEPRI, r6
   1b734:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1b738:	f04f 0320 	mov.w	r3, #32
   1b73c:	f3ef 8011 	mrs	r0, BASEPRI
   1b740:	f383 8811 	msr	BASEPRI, r3
   1b744:	f3bf 8f6f 	isb	sy
}
   1b748:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
}

static inline void z_swap_unlocked(void)
{
	(void) z_swap_irqlock(arch_irq_lock());
   1b74c:	f002 bf38 	b.w	1e5c0 <z_swap_irqlock>
	return (node == list->tail) ? NULL : node->next;
   1b750:	4282      	cmp	r2, r0
   1b752:	d002      	beq.n	1b75a <z_impl_k_yield+0x82>
   1b754:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b756:	2a00      	cmp	r2, #0
   1b758:	d1da      	bne.n	1b710 <z_impl_k_yield+0x38>
	node->prev = list->tail;
   1b75a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
   1b75c:	601d      	str	r5, [r3, #0]
	node->prev = list->tail;
   1b75e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1b760:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1b762:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1b764:	62e3      	str	r3, [r4, #44]	; 0x2c
   1b766:	e7dc      	b.n	1b722 <z_impl_k_yield+0x4a>
   1b768:	20024d28 	.word	0x20024d28
   1b76c:	20020b64 	.word	0x20020b64

0001b770 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
   1b770:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	if (ms == K_FOREVER) {
   1b772:	1c43      	adds	r3, r0, #1
{
   1b774:	4604      	mov	r4, r0
	if (ms == K_FOREVER) {
   1b776:	d105      	bne.n	1b784 <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
   1b778:	4b10      	ldr	r3, [pc, #64]	; (1b7bc <z_impl_k_sleep+0x4c>)
   1b77a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1b77c:	f000 f936 	bl	1b9ec <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   1b780:	4620      	mov	r0, r4
   1b782:	bd38      	pop	{r3, r4, r5, pc}
   1b784:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1b788:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b78c:	2100      	movs	r1, #0
   1b78e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b792:	fbe5 0104 	umlal	r0, r1, r5, r4
   1b796:	2300      	movs	r3, #0
   1b798:	f7f0 fd42 	bl	c220 <__aeabi_uldivmod>
	if (ticks == 0) {
   1b79c:	4604      	mov	r4, r0
   1b79e:	b948      	cbnz	r0, 1b7b4 <z_impl_k_sleep+0x44>
	z_impl_k_yield();
   1b7a0:	f7ff ff9a 	bl	1b6d8 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
   1b7a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1b7a8:	fb84 0100 	smull	r0, r1, r4, r0
   1b7ac:	0bc4      	lsrs	r4, r0, #15
   1b7ae:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1b7b2:	e7e5      	b.n	1b780 <z_impl_k_sleep+0x10>
   1b7b4:	f7ff ff14 	bl	1b5e0 <z_tick_sleep.part.19>
   1b7b8:	4604      	mov	r4, r0
   1b7ba:	e7f3      	b.n	1b7a4 <z_impl_k_sleep+0x34>
   1b7bc:	20024d28 	.word	0x20024d28

0001b7c0 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   1b7c0:	4b01      	ldr	r3, [pc, #4]	; (1b7c8 <z_impl_k_current_get+0x8>)
   1b7c2:	6898      	ldr	r0, [r3, #8]
   1b7c4:	4770      	bx	lr
   1b7c6:	bf00      	nop
   1b7c8:	20024d28 	.word	0x20024d28

0001b7cc <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1b7cc:	b570      	push	{r4, r5, r6, lr}
   1b7ce:	4604      	mov	r4, r0
   1b7d0:	f04f 0320 	mov.w	r3, #32
   1b7d4:	f3ef 8611 	mrs	r6, BASEPRI
   1b7d8:	f383 8811 	msr	BASEPRI, r3
   1b7dc:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   1b7e0:	f002 ff9f 	bl	1e722 <z_unpend_first_thread>
	if (thread != NULL) {
   1b7e4:	4605      	mov	r5, r0
   1b7e6:	b170      	cbz	r0, 1b806 <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b7e8:	7b43      	ldrb	r3, [r0, #13]
   1b7ea:	06db      	lsls	r3, r3, #27
   1b7ec:	d103      	bne.n	1b7f6 <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
   1b7ee:	6983      	ldr	r3, [r0, #24]
   1b7f0:	b90b      	cbnz	r3, 1b7f6 <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
   1b7f2:	f7ff fda5 	bl	1b340 <z_add_thread_to_ready_q>
   1b7f6:	2300      	movs	r3, #0
   1b7f8:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   1b7fa:	4631      	mov	r1, r6
}
   1b7fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   1b800:	4807      	ldr	r0, [pc, #28]	; (1b820 <z_impl_k_sem_give+0x54>)
   1b802:	f002 bf18 	b.w	1e636 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1b806:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1b80a:	429a      	cmp	r2, r3
   1b80c:	bf18      	it	ne
   1b80e:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1b810:	2102      	movs	r1, #2
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1b812:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1b814:	f104 0010 	add.w	r0, r4, #16
   1b818:	f003 f994 	bl	1eb44 <z_handle_obj_poll_events>
   1b81c:	e7ed      	b.n	1b7fa <z_impl_k_sem_give+0x2e>
   1b81e:	bf00      	nop
   1b820:	200265c6 	.word	0x200265c6

0001b824 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   1b824:	b410      	push	{r4}
   1b826:	4602      	mov	r2, r0
   1b828:	460b      	mov	r3, r1
   1b82a:	f04f 0020 	mov.w	r0, #32
   1b82e:	f3ef 8111 	mrs	r1, BASEPRI
   1b832:	f380 8811 	msr	BASEPRI, r0
   1b836:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   1b83a:	6894      	ldr	r4, [r2, #8]
   1b83c:	b14c      	cbz	r4, 1b852 <z_impl_k_sem_take+0x2e>
		sem->count--;
   1b83e:	3c01      	subs	r4, #1
   1b840:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
   1b842:	f381 8811 	msr	BASEPRI, r1
   1b846:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   1b84a:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   1b84c:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b850:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   1b852:	b933      	cbnz	r3, 1b862 <z_impl_k_sem_take+0x3e>
   1b854:	f381 8811 	msr	BASEPRI, r1
   1b858:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1b85c:	f06f 000f 	mvn.w	r0, #15
   1b860:	e7f4      	b.n	1b84c <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1b862:	4802      	ldr	r0, [pc, #8]	; (1b86c <z_impl_k_sem_take+0x48>)
}
   1b864:	f85d 4b04 	ldr.w	r4, [sp], #4
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1b868:	f7ff bea6 	b.w	1b5b8 <z_pend_curr>
   1b86c:	200265c6 	.word	0x200265c6

0001b870 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   1b870:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1b872:	4c08      	ldr	r4, [pc, #32]	; (1b894 <k_sys_work_q_init+0x24>)
   1b874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b878:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1b87c:	4906      	ldr	r1, [pc, #24]	; (1b898 <k_sys_work_q_init+0x28>)
   1b87e:	4620      	mov	r0, r4
   1b880:	f000 f942 	bl	1bb08 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1b884:	4905      	ldr	r1, [pc, #20]	; (1b89c <k_sys_work_q_init+0x2c>)
   1b886:	f104 0010 	add.w	r0, r4, #16
   1b88a:	f002 ff9f 	bl	1e7cc <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1b88e:	2000      	movs	r0, #0
   1b890:	bd10      	pop	{r4, pc}
   1b892:	bf00      	nop
   1b894:	20024d68 	.word	0x20024d68
   1b898:	20028b28 	.word	0x20028b28
   1b89c:	000209bb 	.word	0x000209bb

0001b8a0 <z_check_stack_sentinel>:
 */
void z_check_stack_sentinel(void)
{
	u32_t *stack;

	if ((_current->base.thread_state & _THREAD_DUMMY) != 0) {
   1b8a0:	4b09      	ldr	r3, [pc, #36]	; (1b8c8 <z_check_stack_sentinel+0x28>)
   1b8a2:	689b      	ldr	r3, [r3, #8]
   1b8a4:	7b5a      	ldrb	r2, [r3, #13]
   1b8a6:	07d2      	lsls	r2, r2, #31
   1b8a8:	d40d      	bmi.n	1b8c6 <z_check_stack_sentinel+0x26>
		return;
	}

	stack = (u32_t *)_current->stack_info.start;
   1b8aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
	if (*stack != STACK_SENTINEL) {
   1b8ac:	681a      	ldr	r2, [r3, #0]
   1b8ae:	f1b2 3ff0 	cmp.w	r2, #4042322160	; 0xf0f0f0f0
   1b8b2:	d008      	beq.n	1b8c6 <z_check_stack_sentinel+0x26>
		/* Restore it so further checks don't trigger this same error */
		*stack = STACK_SENTINEL;
   1b8b4:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
   1b8b8:	601a      	str	r2, [r3, #0]
		z_except_reason(K_ERR_STACK_CHK_FAIL);
   1b8ba:	4040      	eors	r0, r0
   1b8bc:	f380 8811 	msr	BASEPRI, r0
   1b8c0:	f04f 0002 	mov.w	r0, #2
   1b8c4:	df02      	svc	2
	}
}
   1b8c6:	4770      	bx	lr
   1b8c8:	20024d28 	.word	0x20024d28

0001b8cc <z_impl_k_thread_start>:
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
   1b8cc:	b510      	push	{r4, lr}
   1b8ce:	4602      	mov	r2, r0
	__asm__ volatile(
   1b8d0:	f04f 0320 	mov.w	r3, #32
   1b8d4:	f3ef 8411 	mrs	r4, BASEPRI
   1b8d8:	f383 8811 	msr	BASEPRI, r3
   1b8dc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
   1b8e0:	7b43      	ldrb	r3, [r0, #13]
   1b8e2:	0759      	lsls	r1, r3, #29
   1b8e4:	d404      	bmi.n	1b8f0 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
   1b8e6:	f384 8811 	msr	BASEPRI, r4
   1b8ea:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
   1b8ee:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b8f0:	f023 0304 	bic.w	r3, r3, #4
   1b8f4:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   1b8f6:	f002 ff60 	bl	1e7ba <z_is_thread_ready>
   1b8fa:	b110      	cbz	r0, 1b902 <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
   1b8fc:	4610      	mov	r0, r2
   1b8fe:	f7ff fd1f 	bl	1b340 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   1b902:	4621      	mov	r1, r4
}
   1b904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   1b908:	4801      	ldr	r0, [pc, #4]	; (1b910 <z_impl_k_thread_start+0x44>)
   1b90a:	f002 be94 	b.w	1e636 <z_reschedule>
   1b90e:	bf00      	nop
   1b910:	200265c6 	.word	0x200265c6

0001b914 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   1b914:	b530      	push	{r4, r5, lr}
   1b916:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b918:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   1b91a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b91c:	9504      	str	r5, [sp, #16]
   1b91e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1b920:	9503      	str	r5, [sp, #12]
   1b922:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1b924:	9502      	str	r5, [sp, #8]
   1b926:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1b928:	9501      	str	r5, [sp, #4]
   1b92a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1b92c:	9500      	str	r5, [sp, #0]
   1b92e:	f7f3 fd6f 	bl	f410 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1b932:	4b03      	ldr	r3, [pc, #12]	; (1b940 <z_setup_new_thread+0x2c>)
   1b934:	689b      	ldr	r3, [r3, #8]
   1b936:	b103      	cbz	r3, 1b93a <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1b938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b93a:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   1b93c:	b007      	add	sp, #28
   1b93e:	bd30      	pop	{r4, r5, pc}
   1b940:	20024d28 	.word	0x20024d28

0001b944 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   1b944:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b946:	2600      	movs	r6, #0
{
   1b948:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b94a:	9605      	str	r6, [sp, #20]
   1b94c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
{
   1b94e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b950:	9604      	str	r6, [sp, #16]
   1b952:	9e0d      	ldr	r6, [sp, #52]	; 0x34
{
   1b954:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b956:	9603      	str	r6, [sp, #12]
   1b958:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1b95a:	9602      	str	r6, [sp, #8]
   1b95c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1b95e:	9601      	str	r6, [sp, #4]
   1b960:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1b962:	9600      	str	r6, [sp, #0]
   1b964:	f7ff ffd6 	bl	1b914 <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
   1b968:	1c6b      	adds	r3, r5, #1
   1b96a:	d003      	beq.n	1b974 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
   1b96c:	b92d      	cbnz	r5, 1b97a <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
   1b96e:	4620      	mov	r0, r4
   1b970:	f7ff ffac 	bl	1b8cc <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   1b974:	4620      	mov	r0, r4
   1b976:	b006      	add	sp, #24
   1b978:	bd70      	pop	{r4, r5, r6, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   1b97a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1b97e:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b982:	2100      	movs	r1, #0
   1b984:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b988:	2300      	movs	r3, #0
   1b98a:	fbe6 0105 	umlal	r0, r1, r6, r5
   1b98e:	f7f0 fc47 	bl	c220 <__aeabi_uldivmod>
   1b992:	4903      	ldr	r1, [pc, #12]	; (1b9a0 <z_impl_k_thread_create+0x5c>)
   1b994:	1c42      	adds	r2, r0, #1
   1b996:	f104 0018 	add.w	r0, r4, #24
   1b99a:	f000 f913 	bl	1bbc4 <z_add_timeout>
   1b99e:	e7e9      	b.n	1b974 <z_impl_k_thread_create+0x30>
   1b9a0:	0001e6c1 	.word	0x0001e6c1

0001b9a4 <z_thread_single_suspend>:
#include <syscalls/k_thread_create_mrsh.c>
#endif /* CONFIG_USERSPACE */
#endif /* CONFIG_MULTITHREADING */

void z_thread_single_suspend(struct k_thread *thread)
{
   1b9a4:	b510      	push	{r4, lr}
   1b9a6:	4604      	mov	r4, r0
	if (z_is_thread_ready(thread)) {
   1b9a8:	f002 ff07 	bl	1e7ba <z_is_thread_ready>
   1b9ac:	b110      	cbz	r0, 1b9b4 <z_thread_single_suspend+0x10>
		z_remove_thread_from_ready_q(thread);
   1b9ae:	4620      	mov	r0, r4
   1b9b0:	f7ff fd74 	bl	1b49c <z_remove_thread_from_ready_q>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1b9b4:	f104 0018 	add.w	r0, r4, #24
   1b9b8:	f002 ff4d 	bl	1e856 <z_abort_timeout>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b9bc:	7b63      	ldrb	r3, [r4, #13]
   1b9be:	f043 0310 	orr.w	r3, r3, #16
   1b9c2:	7363      	strb	r3, [r4, #13]

	(void)z_abort_thread_timeout(thread);

	z_mark_thread_as_suspended(thread);

	if (thread == _current) {
   1b9c4:	4b08      	ldr	r3, [pc, #32]	; (1b9e8 <z_thread_single_suspend+0x44>)
   1b9c6:	689b      	ldr	r3, [r3, #8]
   1b9c8:	42a3      	cmp	r3, r4
   1b9ca:	d10b      	bne.n	1b9e4 <z_thread_single_suspend+0x40>
	__asm__ volatile(
   1b9cc:	f04f 0320 	mov.w	r3, #32
   1b9d0:	f3ef 8011 	mrs	r0, BASEPRI
   1b9d4:	f383 8811 	msr	BASEPRI, r3
   1b9d8:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   1b9dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1b9e0:	f002 be34 	b.w	1e64c <z_reschedule_irqlock>
   1b9e4:	bd10      	pop	{r4, pc}
   1b9e6:	bf00      	nop
   1b9e8:	20024d28 	.word	0x20024d28

0001b9ec <z_impl_k_thread_suspend>:

void z_impl_k_thread_suspend(struct k_thread *thread)
{
   1b9ec:	b538      	push	{r3, r4, r5, lr}
   1b9ee:	4605      	mov	r5, r0
   1b9f0:	f04f 0320 	mov.w	r3, #32
   1b9f4:	f3ef 8411 	mrs	r4, BASEPRI
   1b9f8:	f383 8811 	msr	BASEPRI, r3
   1b9fc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
   1ba00:	f7ff ffd0 	bl	1b9a4 <z_thread_single_suspend>

	sys_trace_thread_suspend(thread);

	if (thread == _current) {
   1ba04:	4b07      	ldr	r3, [pc, #28]	; (1ba24 <z_impl_k_thread_suspend+0x38>)
   1ba06:	689b      	ldr	r3, [r3, #8]
   1ba08:	42ab      	cmp	r3, r5
   1ba0a:	d105      	bne.n	1ba18 <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
   1ba0c:	4621      	mov	r1, r4
	} else {
		k_spin_unlock(&lock, key);
	}
}
   1ba0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   1ba12:	4805      	ldr	r0, [pc, #20]	; (1ba28 <z_impl_k_thread_suspend+0x3c>)
   1ba14:	f002 be0f 	b.w	1e636 <z_reschedule>
	__asm__ volatile(
   1ba18:	f384 8811 	msr	BASEPRI, r4
   1ba1c:	f3bf 8f6f 	isb	sy
}
   1ba20:	bd38      	pop	{r3, r4, r5, pc}
   1ba22:	bf00      	nop
   1ba24:	20024d28 	.word	0x20024d28
   1ba28:	200265c6 	.word	0x200265c6

0001ba2c <z_impl_k_thread_resume>:
	z_mark_thread_as_not_suspended(thread);
	z_ready_thread(thread);
}

void z_impl_k_thread_resume(struct k_thread *thread)
{
   1ba2c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ba2e:	f04f 0320 	mov.w	r3, #32
   1ba32:	f3ef 8411 	mrs	r4, BASEPRI
   1ba36:	f383 8811 	msr	BASEPRI, r3
   1ba3a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_resume(thread);
   1ba3e:	f002 fedc 	bl	1e7fa <z_thread_single_resume>

	sys_trace_thread_resume(thread);
	z_reschedule(&lock, key);
   1ba42:	4621      	mov	r1, r4
}
   1ba44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   1ba48:	4801      	ldr	r0, [pc, #4]	; (1ba50 <z_impl_k_thread_resume+0x24>)
   1ba4a:	f002 bdf4 	b.w	1e636 <z_reschedule>
   1ba4e:	bf00      	nop
   1ba50:	200265c6 	.word	0x200265c6

0001ba54 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1ba54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1ba58:	4e28      	ldr	r6, [pc, #160]	; (1bafc <z_init_static_threads+0xa8>)
   1ba5a:	4d29      	ldr	r5, [pc, #164]	; (1bb00 <z_init_static_threads+0xac>)
   1ba5c:	46b0      	mov	r8, r6
{
   1ba5e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1ba60:	42b5      	cmp	r5, r6
   1ba62:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1ba66:	d310      	bcc.n	1ba8a <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1ba68:	f7ff fc06 	bl	1b278 <k_sched_lock>
   1ba6c:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1ba70:	f240 36e7 	movw	r6, #999	; 0x3e7
   1ba74:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   1ba76:	4c22      	ldr	r4, [pc, #136]	; (1bb00 <z_init_static_threads+0xac>)
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1ba78:	f8df a088 	ldr.w	sl, [pc, #136]	; 1bb04 <z_init_static_threads+0xb0>
   1ba7c:	4544      	cmp	r4, r8
   1ba7e:	d321      	bcc.n	1bac4 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
   1ba80:	b007      	add	sp, #28
   1ba82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   1ba86:	f7ff bc3f 	b.w	1b308 <k_sched_unlock>
		z_setup_new_thread(
   1ba8a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1ba8e:	9305      	str	r3, [sp, #20]
   1ba90:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1ba94:	9304      	str	r3, [sp, #16]
   1ba96:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1ba9a:	9303      	str	r3, [sp, #12]
   1ba9c:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1baa0:	9302      	str	r3, [sp, #8]
   1baa2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1baa6:	9301      	str	r3, [sp, #4]
   1baa8:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1baac:	9300      	str	r3, [sp, #0]
   1baae:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1bab2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1bab6:	f7ff ff2d 	bl	1b914 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1baba:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1babe:	64dd      	str	r5, [r3, #76]	; 0x4c
   1bac0:	4625      	mov	r5, r4
   1bac2:	e7cd      	b.n	1ba60 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   1bac4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1bac6:	1c4b      	adds	r3, r1, #1
   1bac8:	d004      	beq.n	1bad4 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
   1baca:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   1bacc:	b921      	cbnz	r1, 1bad8 <z_init_static_threads+0x84>
   1bace:	4628      	mov	r0, r5
   1bad0:	f7ff fefc 	bl	1b8cc <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1bad4:	3430      	adds	r4, #48	; 0x30
   1bad6:	e7d1      	b.n	1ba7c <z_init_static_threads+0x28>
   1bad8:	46b3      	mov	fp, r6
   1bada:	46bc      	mov	ip, r7
   1badc:	fbe9 bc01 	umlal	fp, ip, r9, r1
   1bae0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bae4:	2300      	movs	r3, #0
   1bae6:	4658      	mov	r0, fp
   1bae8:	4661      	mov	r1, ip
   1baea:	f7f0 fb99 	bl	c220 <__aeabi_uldivmod>
   1baee:	4651      	mov	r1, sl
   1baf0:	1c42      	adds	r2, r0, #1
   1baf2:	f105 0018 	add.w	r0, r5, #24
   1baf6:	f000 f865 	bl	1bbc4 <z_add_timeout>
   1bafa:	e7eb      	b.n	1bad4 <z_init_static_threads+0x80>
   1bafc:	2002c680 	.word	0x2002c680
   1bb00:	2002c680 	.word	0x2002c680
   1bb04:	0001e6c1 	.word	0x0001e6c1

0001bb08 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1bb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb0c:	4605      	mov	r5, r0
   1bb0e:	b086      	sub	sp, #24
   1bb10:	460e      	mov	r6, r1
   1bb12:	4617      	mov	r7, r2
   1bb14:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   1bb16:	f002 fcd8 	bl	1e4ca <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1bb1a:	f105 0410 	add.w	r4, r5, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1bb1e:	2000      	movs	r0, #0
   1bb20:	4b09      	ldr	r3, [pc, #36]	; (1bb48 <k_work_q_start+0x40>)
   1bb22:	e9cd 0004 	strd	r0, r0, [sp, #16]
   1bb26:	e9cd 0802 	strd	r0, r8, [sp, #8]
   1bb2a:	e9cd 5000 	strd	r5, r0, [sp]
   1bb2e:	463a      	mov	r2, r7
   1bb30:	4631      	mov	r1, r6
   1bb32:	4620      	mov	r0, r4
   1bb34:	f7ff ff06 	bl	1b944 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1bb38:	4620      	mov	r0, r4
   1bb3a:	4904      	ldr	r1, [pc, #16]	; (1bb4c <k_work_q_start+0x44>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1bb3c:	b006      	add	sp, #24
   1bb3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1bb42:	f002 be43 	b.w	1e7cc <z_impl_k_thread_name_set>
   1bb46:	bf00      	nop
   1bb48:	0001c2b7 	.word	0x0001c2b7
   1bb4c:	000209c4 	.word	0x000209c4

0001bb50 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   1bb50:	4b03      	ldr	r3, [pc, #12]	; (1bb60 <elapsed+0x10>)
   1bb52:	681b      	ldr	r3, [r3, #0]
   1bb54:	b90b      	cbnz	r3, 1bb5a <elapsed+0xa>
   1bb56:	f7f3 bb5b 	b.w	f210 <z_clock_elapsed>
}
   1bb5a:	2000      	movs	r0, #0
   1bb5c:	4770      	bx	lr
   1bb5e:	bf00      	nop
   1bb60:	20024e28 	.word	0x20024e28

0001bb64 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bb64:	6803      	ldr	r3, [r0, #0]
   1bb66:	b140      	cbz	r0, 1bb7a <remove_timeout+0x16>
   1bb68:	4a07      	ldr	r2, [pc, #28]	; (1bb88 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   1bb6a:	6852      	ldr	r2, [r2, #4]
   1bb6c:	4290      	cmp	r0, r2
   1bb6e:	d004      	beq.n	1bb7a <remove_timeout+0x16>
	if (next(t) != NULL) {
   1bb70:	b11b      	cbz	r3, 1bb7a <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   1bb72:	689a      	ldr	r2, [r3, #8]
   1bb74:	6881      	ldr	r1, [r0, #8]
   1bb76:	440a      	add	r2, r1
   1bb78:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   1bb7a:	6842      	ldr	r2, [r0, #4]
   1bb7c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1bb7e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1bb80:	2300      	movs	r3, #0
	node->prev = NULL;
   1bb82:	e9c0 3300 	strd	r3, r3, [r0]
}
   1bb86:	4770      	bx	lr
   1bb88:	2002c594 	.word	0x2002c594

0001bb8c <next_timeout>:
	return list->head == list;
   1bb8c:	4b0b      	ldr	r3, [pc, #44]	; (1bbbc <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   1bb8e:	b510      	push	{r4, lr}
   1bb90:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bb92:	429c      	cmp	r4, r3
   1bb94:	bf08      	it	eq
   1bb96:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   1bb98:	f7ff ffda 	bl	1bb50 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1bb9c:	b154      	cbz	r4, 1bbb4 <next_timeout+0x28>
   1bb9e:	68a3      	ldr	r3, [r4, #8]
   1bba0:	1a18      	subs	r0, r3, r0
   1bba2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1bba6:	4b06      	ldr	r3, [pc, #24]	; (1bbc0 <next_timeout+0x34>)
   1bba8:	691b      	ldr	r3, [r3, #16]
   1bbaa:	b113      	cbz	r3, 1bbb2 <next_timeout+0x26>
   1bbac:	4298      	cmp	r0, r3
   1bbae:	bfa8      	it	ge
   1bbb0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1bbb2:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1bbb4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1bbb8:	e7f5      	b.n	1bba6 <next_timeout+0x1a>
   1bbba:	bf00      	nop
   1bbbc:	2002c594 	.word	0x2002c594
   1bbc0:	20024d28 	.word	0x20024d28

0001bbc4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   1bbc4:	b570      	push	{r4, r5, r6, lr}
   1bbc6:	4604      	mov	r4, r0
   1bbc8:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1bbca:	60c1      	str	r1, [r0, #12]
   1bbcc:	f04f 0320 	mov.w	r3, #32
   1bbd0:	f3ef 8511 	mrs	r5, BASEPRI
   1bbd4:	f383 8811 	msr	BASEPRI, r3
   1bbd8:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1bbdc:	f7ff ffb8 	bl	1bb50 <elapsed>
   1bbe0:	2e01      	cmp	r6, #1
   1bbe2:	bfac      	ite	ge
   1bbe4:	1980      	addge	r0, r0, r6
   1bbe6:	3001      	addlt	r0, #1
	return list->head == list;
   1bbe8:	4b16      	ldr	r3, [pc, #88]	; (1bc44 <z_add_timeout+0x80>)
   1bbea:	60a0      	str	r0, [r4, #8]
   1bbec:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bbee:	429a      	cmp	r2, r3
   1bbf0:	d001      	beq.n	1bbf6 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bbf2:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1bbf4:	b932      	cbnz	r2, 1bc04 <z_add_timeout+0x40>
	node->prev = list->tail;
   1bbf6:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1bbf8:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   1bbfa:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   1bbfc:	685a      	ldr	r2, [r3, #4]
   1bbfe:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1bc00:	605c      	str	r4, [r3, #4]
   1bc02:	e00a      	b.n	1bc1a <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   1bc04:	6890      	ldr	r0, [r2, #8]
   1bc06:	68a1      	ldr	r1, [r4, #8]
   1bc08:	4288      	cmp	r0, r1
   1bc0a:	dd15      	ble.n	1bc38 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
   1bc0c:	1a41      	subs	r1, r0, r1
   1bc0e:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   1bc10:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1bc12:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
   1bc16:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1bc18:	6054      	str	r4, [r2, #4]
	return list->head == list;
   1bc1a:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bc1c:	429a      	cmp	r2, r3
   1bc1e:	d006      	beq.n	1bc2e <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1bc20:	4294      	cmp	r4, r2
   1bc22:	d104      	bne.n	1bc2e <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
   1bc24:	f7ff ffb2 	bl	1bb8c <next_timeout>
   1bc28:	2100      	movs	r1, #0
   1bc2a:	f7f3 fa9b 	bl	f164 <z_clock_set_timeout>
	__asm__ volatile(
   1bc2e:	f385 8811 	msr	BASEPRI, r5
   1bc32:	f3bf 8f6f 	isb	sy
		}
	}
}
   1bc36:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
   1bc38:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1bc3a:	4296      	cmp	r6, r2
   1bc3c:	60a1      	str	r1, [r4, #8]
   1bc3e:	d0da      	beq.n	1bbf6 <z_add_timeout+0x32>
   1bc40:	6812      	ldr	r2, [r2, #0]
   1bc42:	e7d7      	b.n	1bbf4 <z_add_timeout+0x30>
   1bc44:	2002c594 	.word	0x2002c594

0001bc48 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   1bc48:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   1bc4c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1bc4e:	f7ff fbef 	bl	1b430 <z_time_slice>
	__asm__ volatile(
   1bc52:	f04f 0320 	mov.w	r3, #32
   1bc56:	f3ef 8511 	mrs	r5, BASEPRI
   1bc5a:	f383 8811 	msr	BASEPRI, r3
   1bc5e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1bc62:	4f21      	ldr	r7, [pc, #132]	; (1bce8 <z_clock_announce+0xa0>)
   1bc64:	4e21      	ldr	r6, [pc, #132]	; (1bcec <z_clock_announce+0xa4>)
   1bc66:	46b8      	mov	r8, r7
	return list->head == list;
   1bc68:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1bcf0 <z_clock_announce+0xa8>
   1bc6c:	6034      	str	r4, [r6, #0]
   1bc6e:	f8d9 4000 	ldr.w	r4, [r9]
   1bc72:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bc74:	454c      	cmp	r4, r9
   1bc76:	e9d7 bc00 	ldrd	fp, ip, [r7]
   1bc7a:	d005      	beq.n	1bc88 <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1bc7c:	b124      	cbz	r4, 1bc88 <z_clock_announce+0x40>
   1bc7e:	68a3      	ldr	r3, [r4, #8]
   1bc80:	4293      	cmp	r3, r2
   1bc82:	dd14      	ble.n	1bcae <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1bc84:	1a9b      	subs	r3, r3, r2
   1bc86:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1bc88:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1bc8a:	eb1b 0002 	adds.w	r0, fp, r2
   1bc8e:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   1bc92:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
   1bc96:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   1bc98:	f7ff ff78 	bl	1bb8c <next_timeout>
   1bc9c:	4621      	mov	r1, r4
   1bc9e:	f7f3 fa61 	bl	f164 <z_clock_set_timeout>
	__asm__ volatile(
   1bca2:	f385 8811 	msr	BASEPRI, r5
   1bca6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1bcaa:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   1bcae:	eb1b 0003 	adds.w	r0, fp, r3
   1bcb2:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   1bcb6:	1ad3      	subs	r3, r2, r3
   1bcb8:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1bcba:	2300      	movs	r3, #0
		curr_tick += dt;
   1bcbc:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   1bcc0:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   1bcc2:	4620      	mov	r0, r4
   1bcc4:	f7ff ff4e 	bl	1bb64 <remove_timeout>
   1bcc8:	f385 8811 	msr	BASEPRI, r5
   1bccc:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1bcd0:	68e3      	ldr	r3, [r4, #12]
   1bcd2:	4798      	blx	r3
	__asm__ volatile(
   1bcd4:	f04f 0320 	mov.w	r3, #32
   1bcd8:	f3ef 8511 	mrs	r5, BASEPRI
   1bcdc:	f383 8811 	msr	BASEPRI, r3
   1bce0:	f3bf 8f6f 	isb	sy
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1bce4:	e7c3      	b.n	1bc6e <z_clock_announce+0x26>
   1bce6:	bf00      	nop
   1bce8:	20020108 	.word	0x20020108
   1bcec:	20024e28 	.word	0x20024e28
   1bcf0:	2002c594 	.word	0x2002c594

0001bcf4 <z_tick_get>:

s64_t z_tick_get(void)
{
   1bcf4:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   1bcf8:	f04f 0320 	mov.w	r3, #32
   1bcfc:	f3ef 8411 	mrs	r4, BASEPRI
   1bd00:	f383 8811 	msr	BASEPRI, r3
   1bd04:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1bd08:	f7f3 fa82 	bl	f210 <z_clock_elapsed>
   1bd0c:	4b07      	ldr	r3, [pc, #28]	; (1bd2c <z_tick_get+0x38>)
   1bd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bd12:	eb12 0b00 	adds.w	fp, r2, r0
   1bd16:	f143 0c00 	adc.w	ip, r3, #0
   1bd1a:	4658      	mov	r0, fp
   1bd1c:	4661      	mov	r1, ip
	__asm__ volatile(
   1bd1e:	f384 8811 	msr	BASEPRI, r4
   1bd22:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1bd26:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   1bd2a:	bf00      	nop
   1bd2c:	20020108 	.word	0x20020108

0001bd30 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   1bd30:	6a02      	ldr	r2, [r0, #32]
{
   1bd32:	b538      	push	{r3, r4, r5, lr}
	if (timer->period > 0) {
   1bd34:	2a00      	cmp	r2, #0
{
   1bd36:	4604      	mov	r4, r0
	if (timer->period > 0) {
   1bd38:	dd02      	ble.n	1bd40 <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bd3a:	490e      	ldr	r1, [pc, #56]	; (1bd74 <z_timer_expiration_handler+0x44>)
   1bd3c:	f7ff ff42 	bl	1bbc4 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1bd40:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bd42:	3301      	adds	r3, #1
   1bd44:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1bd46:	69a3      	ldr	r3, [r4, #24]
   1bd48:	b10b      	cbz	r3, 1bd4e <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
   1bd4a:	4620      	mov	r0, r4
   1bd4c:	4798      	blx	r3
	return list->head == list;
   1bd4e:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bd52:	42a5      	cmp	r5, r4
   1bd54:	d00d      	beq.n	1bd72 <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1bd56:	b165      	cbz	r5, 1bd72 <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1bd58:	4628      	mov	r0, r5
   1bd5a:	f002 fc53 	bl	1e604 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1bd5e:	7b6b      	ldrb	r3, [r5, #13]
   1bd60:	06db      	lsls	r3, r3, #27
   1bd62:	d104      	bne.n	1bd6e <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
   1bd64:	69ab      	ldr	r3, [r5, #24]
   1bd66:	b913      	cbnz	r3, 1bd6e <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
   1bd68:	4628      	mov	r0, r5
   1bd6a:	f7ff fae9 	bl	1b340 <z_add_thread_to_ready_q>
   1bd6e:	2300      	movs	r3, #0
   1bd70:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	arch_thread_return_value_set(thread, 0);
}
   1bd72:	bd38      	pop	{r3, r4, r5, pc}
   1bd74:	0001bd31 	.word	0x0001bd31

0001bd78 <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   1bd78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1bd7c:	f240 36e7 	movw	r6, #999	; 0x3e7
   1bd80:	2700      	movs	r7, #0
   1bd82:	4604      	mov	r4, r0
   1bd84:	4688      	mov	r8, r1
   1bd86:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1bd8a:	4630      	mov	r0, r6
   1bd8c:	4639      	mov	r1, r7
   1bd8e:	2300      	movs	r3, #0
   1bd90:	fbe5 0102 	umlal	r0, r1, r5, r2
   1bd94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bd98:	f7f0 fa42 	bl	c220 <__aeabi_uldivmod>
   1bd9c:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = k_ms_to_ticks_ceil32(period);
   1bd9e:	9000      	str	r0, [sp, #0]
   1bda0:	4630      	mov	r0, r6
   1bda2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bda6:	2300      	movs	r3, #0
   1bda8:	fbe5 0108 	umlal	r0, r1, r5, r8
   1bdac:	f7f0 fa38 	bl	c220 <__aeabi_uldivmod>
	duration_in_ticks = k_ms_to_ticks_ceil32(duration);
   1bdb0:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
   1bdb2:	4620      	mov	r0, r4
   1bdb4:	f002 fd4f 	bl	1e856 <z_abort_timeout>
	timer->period = period_in_ticks;
   1bdb8:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bdba:	4620      	mov	r0, r4
	timer->period = period_in_ticks;
   1bdbc:	6223      	str	r3, [r4, #32]
	timer->status = 0U;
   1bdbe:	2300      	movs	r3, #0
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bdc0:	9a01      	ldr	r2, [sp, #4]
   1bdc2:	4903      	ldr	r1, [pc, #12]	; (1bdd0 <z_impl_k_timer_start+0x58>)
	timer->status = 0U;
   1bdc4:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
   1bdc6:	b002      	add	sp, #8
   1bdc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bdcc:	f7ff befa 	b.w	1bbc4 <z_add_timeout>
   1bdd0:	0001bd31 	.word	0x0001bd31

0001bdd4 <k_poll_event_init>:
 */
static struct k_spinlock lock;

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
   1bdd4:	b510      	push	{r4, lr}
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
	__ASSERT(obj != NULL, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   1bdd6:	7b44      	ldrb	r4, [r0, #13]
   1bdd8:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
   1bddc:	7b81      	ldrb	r1, [r0, #14]
	event->type = type;
   1bdde:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   1bde0:	f362 0141 	bfi	r1, r2, #1, #1
	event->poller = NULL;
   1bde4:	2200      	movs	r2, #0
	event->mode = mode;
   1bde6:	7381      	strb	r1, [r0, #14]
	event->state = K_POLL_STATE_NOT_READY;
   1bde8:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
   1bdea:	6082      	str	r2, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   1bdec:	4a02      	ldr	r2, [pc, #8]	; (1bdf8 <k_poll_event_init+0x24>)
   1bdee:	400a      	ands	r2, r1
	event->unused = 0U;
	event->obj = obj;
   1bdf0:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   1bdf4:	bd10      	pop	{r4, pc}
   1bdf6:	bf00      	nop
   1bdf8:	00020fff 	.word	0x00020fff

0001bdfc <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   1bdfc:	2301      	movs	r3, #1
{
   1bdfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1be02:	b086      	sub	sp, #24
	struct _poller poller = { .is_polling = true,
   1be04:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   1be08:	4b23      	ldr	r3, [pc, #140]	; (1be98 <z_impl_k_poll+0x9c>)

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events > 0, "zero events\n");

	events_registered = register_events(events, num_events, &poller,
   1be0a:	4690      	mov	r8, r2
	struct _poller poller = { .is_polling = true,
   1be0c:	689b      	ldr	r3, [r3, #8]
{
   1be0e:	4606      	mov	r6, r0
	struct _poller poller = { .is_polling = true,
   1be10:	9304      	str	r3, [sp, #16]
   1be12:	4b22      	ldr	r3, [pc, #136]	; (1be9c <z_impl_k_poll+0xa0>)
   1be14:	9305      	str	r3, [sp, #20]
	events_registered = register_events(events, num_events, &poller,
   1be16:	fab2 f382 	clz	r3, r2
   1be1a:	aa03      	add	r2, sp, #12
   1be1c:	095b      	lsrs	r3, r3, #5
   1be1e:	f002 fe37 	bl	1ea90 <register_events>
   1be22:	4607      	mov	r7, r0
	__asm__ volatile(
   1be24:	f04f 0320 	mov.w	r3, #32
   1be28:	f3ef 8511 	mrs	r5, BASEPRI
   1be2c:	f383 8811 	msr	BASEPRI, r3
   1be30:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   1be34:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1be38:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1be3c:	b94b      	cbnz	r3, 1be52 <z_impl_k_poll+0x56>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   1be3e:	462a      	mov	r2, r5
   1be40:	4639      	mov	r1, r7
   1be42:	4630      	mov	r0, r6
   1be44:	f002 fd8c 	bl	1e960 <clear_event_registrations>
	__asm__ volatile(
   1be48:	f385 8811 	msr	BASEPRI, r5
   1be4c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
   1be50:	e00b      	b.n	1be6a <z_impl_k_poll+0x6e>
	poller.is_polling = false;
   1be52:	2300      	movs	r3, #0
   1be54:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   1be58:	f1b8 0f00 	cmp.w	r8, #0
   1be5c:	d109      	bne.n	1be72 <z_impl_k_poll+0x76>
   1be5e:	f385 8811 	msr	BASEPRI, r5
   1be62:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1be66:	f06f 040a 	mvn.w	r4, #10
}
   1be6a:	4620      	mov	r0, r4
   1be6c:	b006      	add	sp, #24
   1be6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1be72:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1be74:	4643      	mov	r3, r8
   1be76:	4629      	mov	r1, r5
   1be78:	4809      	ldr	r0, [pc, #36]	; (1bea0 <z_impl_k_poll+0xa4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1be7a:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1be7e:	f7ff fb9b 	bl	1b5b8 <z_pend_curr>
   1be82:	4604      	mov	r4, r0
	__asm__ volatile(
   1be84:	f04f 0320 	mov.w	r3, #32
   1be88:	f3ef 8511 	mrs	r5, BASEPRI
   1be8c:	f383 8811 	msr	BASEPRI, r3
   1be90:	f3bf 8f6f 	isb	sy
   1be94:	e7d3      	b.n	1be3e <z_impl_k_poll+0x42>
   1be96:	bf00      	nop
   1be98:	20024d28 	.word	0x20024d28
   1be9c:	0001e9f1 	.word	0x0001e9f1
   1bea0:	200265c6 	.word	0x200265c6

0001bea4 <enter_sleep>:

void enter_sleep(u16_t mode)
{
	if (mode == SHUTDOWN_MODEM_ONLY) {
   1bea4:	2803      	cmp	r0, #3
{
   1bea6:	b508      	push	{r3, lr}
	if (mode == SHUTDOWN_MODEM_ONLY) {
   1bea8:	d103      	bne.n	1beb2 <enter_sleep+0xe>
	if (mode == SHUTDOWN_APP_MODEM) {
		lte_lc_power_off();
	}
	bsd_shutdown();
	nrf_regulators_system_off(NRF_REGULATORS_NS);
}
   1beaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		lte_lc_power_off();
   1beae:	f7f6 b9f5 	b.w	1229c <lte_lc_power_off>
	if (mode == SHUTDOWN_APP_MODEM) {
   1beb2:	2801      	cmp	r0, #1
   1beb4:	d101      	bne.n	1beba <enter_sleep+0x16>
		lte_lc_power_off();
   1beb6:	f7f6 f9f1 	bl	1229c <lte_lc_power_off>
	bsd_shutdown();
   1beba:	f7f8 fb31 	bl	14520 <bsd_shutdown>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   1bebe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1bec2:	2201      	movs	r2, #1
   1bec4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1bec8:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   1becc:	bf20      	wfe
   1bece:	e7fd      	b.n	1becc <enter_sleep+0x28>

0001bed0 <main>:
		enter_sleep(SHUTDOWN_APP_MODEM);
	}
}
#else
void main(void)
{
   1bed0:	b508      	push	{r3, lr}
	start_execute();
   1bed2:	f7f0 fb39 	bl	c548 <start_execute>
	
	while(1)
	{
		//send_message(); // also uncomment GPS init in slm_at_host.c and uncomment XSYSTEMMODE command!
		send_message_without_gps();
   1bed6:	f7f1 ffcd 	bl	de74 <send_message_without_gps>
	return z_impl_k_sleep(ms);
   1beda:	f241 3088 	movw	r0, #5000	; 0x1388
   1bede:	f7ff fc47 	bl	1b770 <z_impl_k_sleep>
   1bee2:	e7f8      	b.n	1bed6 <main+0x6>

0001bee4 <uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   1bee4:	6843      	ldr	r3, [r0, #4]
   1bee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bee8:	b103      	cbz	r3, 1beec <uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   1beea:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
}
   1beec:	4770      	bx	lr

0001beee <slm_at_callback>:
{
   1beee:	b510      	push	{r4, lr}
   1bef0:	4604      	mov	r4, r0
	write_uart_string(str, strlen(str));
   1bef2:	f001 f8e9 	bl	1d0c8 <strlen>
   1bef6:	4601      	mov	r1, r0
   1bef8:	4620      	mov	r0, r4
}
   1befa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	write_uart_string(str, strlen(str));
   1befe:	f7f0 bb5f 	b.w	c5c0 <write_uart_string>

0001bf02 <response_handler>:
{
   1bf02:	b510      	push	{r4, lr}
	int len = strlen(response) + 1;
   1bf04:	4608      	mov	r0, r1
{
   1bf06:	460c      	mov	r4, r1
	int len = strlen(response) + 1;
   1bf08:	f001 f8de 	bl	1d0c8 <strlen>
   1bf0c:	1c41      	adds	r1, r0, #1
	if (len > 1) {
   1bf0e:	2901      	cmp	r1, #1
   1bf10:	dd04      	ble.n	1bf1c <response_handler+0x1a>
		write_uart_string(response, len);
   1bf12:	4620      	mov	r0, r4
}
   1bf14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		write_uart_string(response, len);
   1bf18:	f7f0 bb52 	b.w	c5c0 <write_uart_string>
}
   1bf1c:	bd10      	pop	{r4, pc}

0001bf1e <z_errno>:
   1bf1e:	f7fe bda9 	b.w	1aa74 <z_impl_z_errno>

0001bf22 <k_sleep>:
   1bf22:	f7ff bc25 	b.w	1b770 <z_impl_k_sleep>

0001bf26 <slm_at_tcpip_uninit>:
	return do_socket_close(0);
   1bf26:	2000      	movs	r0, #0
   1bf28:	f7f0 be10 	b.w	cb4c <do_socket_close>

0001bf2c <z_errno>:
   1bf2c:	f7fe bda2 	b.w	1aa74 <z_impl_z_errno>

0001bf30 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
   1bf30:	b570      	push	{r4, r5, r6, lr}
   1bf32:	250c      	movs	r5, #12
   1bf34:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   1bf36:	f990 000b 	ldrsb.w	r0, [r0, #11]
   1bf3a:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
   1bf3c:	4288      	cmp	r0, r1

	*word = &bitarray[bn / 32];
   1bf3e:	4610      	mov	r0, r2
   1bf40:	eb06 0405 	add.w	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   1bf44:	bfb8      	it	lt
   1bf46:	5974      	ldrlt	r4, [r6, r5]
	*word = &bitarray[bn / 32];
   1bf48:	2a00      	cmp	r2, #0
   1bf4a:	bfb8      	it	lt
   1bf4c:	f102 001f 	addlt.w	r0, r2, #31
   1bf50:	1140      	asrs	r0, r0, #5
   1bf52:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   1bf56:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
   1bf58:	f002 001f 	and.w	r0, r2, #31
   1bf5c:	bd70      	pop	{r4, r5, r6, pc}

0001bf5e <pool_irq_lock.isra.2.part.3>:
   1bf5e:	f04f 0320 	mov.w	r3, #32
   1bf62:	f3ef 8011 	mrs	r0, BASEPRI
   1bf66:	f383 8811 	msr	BASEPRI, r3
   1bf6a:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
   1bf6e:	4770      	bx	lr

0001bf70 <pool_irq_unlock.isra.4>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1bf70:	07c3      	lsls	r3, r0, #31
   1bf72:	d503      	bpl.n	1bf7c <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   1bf74:	f381 8811 	msr	BASEPRI, r1
   1bf78:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
   1bf7c:	4770      	bx	lr

0001bf7e <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   1bf7e:	23ff      	movs	r3, #255	; 0xff
{
   1bf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1bf84:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
   1bf86:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1bf88:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
   1bf8a:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
   1bf8c:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1bf90:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1bf92:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1bf94:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
   1bf98:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1bf9c:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
   1bf9e:	4598      	cmp	r8, r3
   1bfa0:	dc05      	bgt.n	1bfae <z_sys_mem_pool_base_init+0x30>
   1bfa2:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   1bfa4:	4619      	mov	r1, r3
   1bfa6:	428f      	cmp	r7, r1
   1bfa8:	dc20      	bgt.n	1bfec <z_sys_mem_pool_base_init+0x6e>
}
   1bfaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   1bfae:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   1bfb2:	fb09 fe03 	mul.w	lr, r9, r3
   1bfb6:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   1bfba:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
   1bfbc:	eb0a 040e 	add.w	r4, sl, lr
   1bfc0:	f104 0b04 	add.w	fp, r4, #4
	list->tail = (sys_dnode_t *)list;
   1bfc4:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   1bfc8:	d805      	bhi.n	1bfd6 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   1bfca:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   1bfcc:	0892      	lsrs	r2, r2, #2
   1bfce:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   1bfd2:	3301      	adds	r3, #1
   1bfd4:	e7e3      	b.n	1bf9e <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   1bfd6:	f115 041f 	adds.w	r4, r5, #31
   1bfda:	bf48      	it	mi
   1bfdc:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   1bfe0:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   1bfe2:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   1bfe6:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1bfea:	e7ef      	b.n	1bfcc <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   1bfec:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   1bfee:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   1bff0:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   1bff4:	18ec      	adds	r4, r5, r3
	node->next = list;
   1bff6:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   1bffa:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   1bffc:	3101      	adds	r1, #1
   1bffe:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   1c000:	6895      	ldr	r5, [r2, #8]
   1c002:	4433      	add	r3, r6
   1c004:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1c006:	6094      	str	r4, [r2, #8]
   1c008:	e7cd      	b.n	1bfa6 <z_sys_mem_pool_base_init+0x28>

0001c00a <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
   1c00a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c00e:	b087      	sub	sp, #28
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c010:	7a84      	ldrb	r4, [r0, #10]
{
   1c012:	af00      	add	r7, sp, #0
   1c014:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c018:	00a3      	lsls	r3, r4, #2
   1c01a:	3307      	adds	r3, #7
   1c01c:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1c020:	ebad 0d03 	sub.w	sp, sp, r3
   1c024:	46ea      	mov	sl, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
   1c026:	4653      	mov	r3, sl
   1c028:	6842      	ldr	r2, [r0, #4]
{
   1c02a:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   1c02c:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   1c030:	2200      	movs	r2, #0
   1c032:	4294      	cmp	r4, r2
   1c034:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   1c038:	dd09      	ble.n	1c04e <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   1c03a:	b122      	cbz	r2, 1c046 <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1c03c:	6818      	ldr	r0, [r3, #0]
   1c03e:	0880      	lsrs	r0, r0, #2
   1c040:	f020 0003 	bic.w	r0, r0, #3
   1c044:	6058      	str	r0, [r3, #4]
		}

		if (lsizes[i] < size) {
   1c046:	f853 0f04 	ldr.w	r0, [r3, #4]!
   1c04a:	4288      	cmp	r0, r1
   1c04c:	d208      	bcs.n	1c060 <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
   1c04e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   1c052:	d107      	bne.n	1c064 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   1c054:	2300      	movs	r3, #0
   1c056:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1c058:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
   1c05a:	f06f 000b 	mvn.w	r0, #11
   1c05e:	e02c      	b.n	1c0ba <z_sys_mem_pool_block_alloc+0xb0>
	for (i = 0; i < p->n_levels; i++) {
   1c060:	3201      	adds	r2, #1
   1c062:	e7e6      	b.n	1c032 <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c064:	7c28      	ldrb	r0, [r5, #16]
   1c066:	f010 0001 	ands.w	r0, r0, #1
   1c06a:	d001      	beq.n	1c070 <z_sys_mem_pool_block_alloc+0x66>
   1c06c:	f7ff ff77 	bl	1bf5e <pool_irq_lock.isra.2.part.3>
   1c070:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
   1c072:	4680      	mov	r8, r0
	block = sys_dlist_get(&p->levels[l].free_list);
   1c074:	464e      	mov	r6, r9
   1c076:	68ea      	ldr	r2, [r5, #12]
   1c078:	fb03 2309 	mla	r3, r3, r9, r2
	return list->head == list;
   1c07c:	461a      	mov	r2, r3
   1c07e:	f852 4f04 	ldr.w	r4, [r2, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1c082:	4294      	cmp	r4, r2
   1c084:	d11d      	bne.n	1c0c2 <z_sys_mem_pool_block_alloc+0xb8>
	for (i = alloc_l; i >= 0; i--) {
   1c086:	3e01      	subs	r6, #1
   1c088:	1c72      	adds	r2, r6, #1
   1c08a:	f1a3 030c 	sub.w	r3, r3, #12
   1c08e:	d1f5      	bne.n	1c07c <z_sys_mem_pool_block_alloc+0x72>
   1c090:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
   1c092:	4641      	mov	r1, r8
   1c094:	7c28      	ldrb	r0, [r5, #16]
   1c096:	f7ff ff6b 	bl	1bf70 <pool_irq_unlock.isra.4>
	*data_p = data;
   1c09a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1c09c:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   1c09e:	2c00      	cmp	r4, #0
   1c0a0:	d0db      	beq.n	1c05a <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
   1c0a2:	68bb      	ldr	r3, [r7, #8]
	*block_p = block_num(p, data, lsizes[alloc_l]);

	return 0;
   1c0a4:	2000      	movs	r0, #0
	*level_p = alloc_l;
   1c0a6:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c0aa:	682b      	ldr	r3, [r5, #0]
   1c0ac:	1ae4      	subs	r4, r4, r3
   1c0ae:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   1c0b2:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   1c0b6:	687b      	ldr	r3, [r7, #4]
   1c0b8:	601c      	str	r4, [r3, #0]
}
   1c0ba:	371c      	adds	r7, #28
   1c0bc:	46bd      	mov	sp, r7
   1c0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	node->prev->next = node->next;
   1c0c2:	e9d4 3200 	ldrd	r3, r2, [r4]
   1c0c6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1c0c8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c0ca:	2300      	movs	r3, #0
	node->prev = NULL;
   1c0cc:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c0d0:	682b      	ldr	r3, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   1c0d2:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c0d6:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   1c0d8:	f107 0b14 	add.w	fp, r7, #20
   1c0dc:	fb92 f2f1 	sdiv	r2, r2, r1
   1c0e0:	465b      	mov	r3, fp
   1c0e2:	4631      	mov	r1, r6
   1c0e4:	4628      	mov	r0, r5
   1c0e6:	f7ff ff23 	bl	1bf30 <get_bit_ptr>
	*word |= (1<<bit);
   1c0ea:	2201      	movs	r2, #1
   1c0ec:	6979      	ldr	r1, [r7, #20]
   1c0ee:	fa02 f000 	lsl.w	r0, r2, r0
   1c0f2:	680b      	ldr	r3, [r1, #0]
   1c0f4:	603a      	str	r2, [r7, #0]
   1c0f6:	4303      	orrs	r3, r0
   1c0f8:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
   1c0fa:	454e      	cmp	r6, r9
   1c0fc:	dac9      	bge.n	1c092 <z_sys_mem_pool_block_alloc+0x88>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c0fe:	682a      	ldr	r2, [r5, #0]
   1c100:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
   1c104:	1aa2      	subs	r2, r4, r2
   1c106:	fb92 f2f3 	sdiv	r2, r2, r3
	set_alloc_bit(p, l + 1, 4*bn);
   1c10a:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   1c10c:	465b      	mov	r3, fp
   1c10e:	0092      	lsls	r2, r2, #2
   1c110:	4631      	mov	r1, r6
   1c112:	4628      	mov	r0, r5
   1c114:	f7ff ff0c 	bl	1bf30 <get_bit_ptr>
	*word |= (1<<bit);
   1c118:	697a      	ldr	r2, [r7, #20]
   1c11a:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1c11c:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   1c11e:	fa03 f000 	lsl.w	r0, r3, r0
   1c122:	6813      	ldr	r3, [r2, #0]
   1c124:	4303      	orrs	r3, r0
   1c126:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1c128:	230c      	movs	r3, #12
   1c12a:	2203      	movs	r2, #3
   1c12c:	fb03 1106 	mla	r1, r3, r6, r1
		int lsz = lsizes[l + 1];
   1c130:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1c134:	f101 0e04 	add.w	lr, r1, #4
   1c138:	1823      	adds	r3, r4, r0
   1c13a:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
   1c13c:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   1c13e:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   1c142:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1c144:	688a      	ldr	r2, [r1, #8]
   1c146:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   1c148:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
   1c14a:	608b      	str	r3, [r1, #8]
   1c14c:	3a01      	subs	r2, #1
   1c14e:	4403      	add	r3, r0
   1c150:	60fa      	str	r2, [r7, #12]
   1c152:	d1f3      	bne.n	1c13c <z_sys_mem_pool_block_alloc+0x132>
				pool_irq_unlock(p, key);
   1c154:	4641      	mov	r1, r8
   1c156:	7c28      	ldrb	r0, [r5, #16]
   1c158:	f7ff ff0a 	bl	1bf70 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c15c:	7c2b      	ldrb	r3, [r5, #16]
   1c15e:	07db      	lsls	r3, r3, #31
   1c160:	d503      	bpl.n	1c16a <z_sys_mem_pool_block_alloc+0x160>
   1c162:	f7ff fefc 	bl	1bf5e <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   1c166:	4680      	mov	r8, r0
   1c168:	e7c7      	b.n	1c0fa <z_sys_mem_pool_block_alloc+0xf0>
		return 0;
   1c16a:	68f8      	ldr	r0, [r7, #12]
   1c16c:	e7fb      	b.n	1c166 <z_sys_mem_pool_block_alloc+0x15c>

0001c16e <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   1c16e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c172:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c174:	7a83      	ldrb	r3, [r0, #10]
{
   1c176:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c178:	009b      	lsls	r3, r3, #2
   1c17a:	3307      	adds	r3, #7
   1c17c:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1c180:	ebad 0d03 	sub.w	sp, sp, r3
   1c184:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   1c186:	6843      	ldr	r3, [r0, #4]
{
   1c188:	4606      	mov	r6, r0
	lsizes[0] = p->max_sz;
   1c18a:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
   1c18c:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
   1c18e:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
   1c192:	4281      	cmp	r1, r0
   1c194:	d215      	bcs.n	1c1c2 <z_sys_mem_pool_block_free+0x54>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c196:	7c30      	ldrb	r0, [r6, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   1c198:	4688      	mov	r8, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c19a:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
   1c19e:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c1a0:	d001      	beq.n	1c1a6 <z_sys_mem_pool_block_free+0x38>
   1c1a2:	f7ff fedc 	bl	1bf5e <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   1c1a6:	4604      	mov	r4, r0
	while (level >= 0) {
   1c1a8:	f1b8 0f00 	cmp.w	r8, #0
   1c1ac:	da11      	bge.n	1c1d2 <z_sys_mem_pool_block_free+0x64>
	return -1;
   1c1ae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
   1c1b2:	4621      	mov	r1, r4
   1c1b4:	7c30      	ldrb	r0, [r6, #16]
   1c1b6:	f7ff fedb 	bl	1bf70 <pool_irq_unlock.isra.4>
}
   1c1ba:	3714      	adds	r7, #20
   1c1bc:	46bd      	mov	sp, r7
   1c1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1c1c2:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
   1c1c4:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1c1c6:	089b      	lsrs	r3, r3, #2
   1c1c8:	f023 0303 	bic.w	r3, r3, #3
   1c1cc:	f844 3f04 	str.w	r3, [r4, #4]!
   1c1d0:	e7df      	b.n	1c192 <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   1c1d2:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   1c1d6:	462a      	mov	r2, r5
	return (u8_t *)p->buf + lsz * block;
   1c1d8:	fb03 fa05 	mul.w	sl, r3, r5
		int i, lsz = lsizes[level];
   1c1dc:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   1c1de:	6833      	ldr	r3, [r6, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1c1e0:	4641      	mov	r1, r8
	return (u8_t *)p->buf + lsz * block;
   1c1e2:	eb03 090a 	add.w	r9, r3, sl
   1c1e6:	603b      	str	r3, [r7, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1c1e8:	4630      	mov	r0, r6
   1c1ea:	f107 030c 	add.w	r3, r7, #12
   1c1ee:	f7ff fe9f 	bl	1bf30 <get_bit_ptr>
	*word &= ~(1<<bit);
   1c1f2:	2301      	movs	r3, #1
   1c1f4:	68fa      	ldr	r2, [r7, #12]
   1c1f6:	fa03 f000 	lsl.w	r0, r3, r0
   1c1fa:	6813      	ldr	r3, [r2, #0]
	node->next = list;
   1c1fc:	6839      	ldr	r1, [r7, #0]
   1c1fe:	ea23 0300 	bic.w	r3, r3, r0
   1c202:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   1c204:	220c      	movs	r2, #12
   1c206:	68f3      	ldr	r3, [r6, #12]
   1c208:	fb02 3308 	mla	r3, r2, r8, r3
   1c20c:	1d1a      	adds	r2, r3, #4
   1c20e:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
   1c212:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
   1c214:	4621      	mov	r1, r4
   1c216:	f8c9 2004 	str.w	r2, [r9, #4]
	list->tail->next = node;
   1c21a:	689a      	ldr	r2, [r3, #8]
   1c21c:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
   1c220:	f8c3 9008 	str.w	r9, [r3, #8]
   1c224:	7c30      	ldrb	r0, [r6, #16]
   1c226:	f7ff fea3 	bl	1bf70 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c22a:	7c30      	ldrb	r0, [r6, #16]
   1c22c:	f010 0001 	ands.w	r0, r0, #1
   1c230:	d001      	beq.n	1c236 <z_sys_mem_pool_block_free+0xc8>
   1c232:	f7ff fe94 	bl	1bf5e <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   1c236:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1c238:	f1b8 0f00 	cmp.w	r8, #0
   1c23c:	d0b9      	beq.n	1c1b2 <z_sys_mem_pool_block_free+0x44>
	int bit = get_bit_ptr(p, level, bn, &word);
   1c23e:	f107 030c 	add.w	r3, r7, #12
   1c242:	462a      	mov	r2, r5
   1c244:	4641      	mov	r1, r8
   1c246:	4630      	mov	r0, r6
   1c248:	f7ff fe72 	bl	1bf30 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   1c24c:	68fb      	ldr	r3, [r7, #12]
   1c24e:	2800      	cmp	r0, #0
   1c250:	bfb8      	it	lt
   1c252:	3003      	addlt	r0, #3
   1c254:	681b      	ldr	r3, [r3, #0]
   1c256:	f020 0003 	bic.w	r0, r0, #3
   1c25a:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1c25e:	f010 000f 	ands.w	r0, r0, #15
   1c262:	d1a6      	bne.n	1c1b2 <z_sys_mem_pool_block_free+0x44>
	node->next = NULL;
   1c264:	4684      	mov	ip, r0
			int b = (bn & ~3) + i;
   1c266:	f025 0a03 	bic.w	sl, r5, #3
	return (u8_t *)p->buf + lsz * block;
   1c26a:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
   1c26c:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
   1c270:	4353      	muls	r3, r2
   1c272:	6832      	ldr	r2, [r6, #0]
		for (i = 0; i < 4; i++) {
   1c274:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
   1c276:	18d1      	adds	r1, r2, r3
	node->prev->next = node->next;
   1c278:	f8d1 9004 	ldr.w	r9, [r1, #4]
   1c27c:	f852 e003 	ldr.w	lr, [r2, r3]
		for (i = 0; i < 4; i++) {
   1c280:	2804      	cmp	r0, #4
   1c282:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
   1c286:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
   1c28a:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
   1c28e:	f8c1 c004 	str.w	ip, [r1, #4]
   1c292:	d1ea      	bne.n	1c26a <z_sys_mem_pool_block_free+0xfc>
		bn = bn / 4;
   1c294:	2d00      	cmp	r5, #0
   1c296:	bfb8      	it	lt
   1c298:	3503      	addlt	r5, #3
		level = level - 1;
   1c29a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		bn = bn / 4;
   1c29e:	10ad      	asrs	r5, r5, #2
   1c2a0:	e782      	b.n	1c1a8 <z_sys_mem_pool_block_free+0x3a>

0001c2a2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1c2a2:	4604      	mov	r4, r0
   1c2a4:	b508      	push	{r3, lr}
   1c2a6:	4608      	mov	r0, r1
   1c2a8:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1c2aa:	461a      	mov	r2, r3
   1c2ac:	47a0      	blx	r4
	return z_impl_k_current_get();
   1c2ae:	f7ff fa87 	bl	1b7c0 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1c2b2:	f7f3 fcd7 	bl	fc64 <z_impl_k_thread_abort>

0001c2b6 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1c2b6:	b510      	push	{r4, lr}
   1c2b8:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1c2ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c2be:	4620      	mov	r0, r4
   1c2c0:	f002 f910 	bl	1e4e4 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1c2c4:	4603      	mov	r3, r0
   1c2c6:	2800      	cmp	r0, #0
   1c2c8:	d0f7      	beq.n	1c2ba <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   1c2ca:	6842      	ldr	r2, [r0, #4]
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c2cc:	3308      	adds	r3, #8
   1c2ce:	e8d3 1fef 	ldaex	r1, [r3]
   1c2d2:	f021 0c01 	bic.w	ip, r1, #1
   1c2d6:	e8c3 cfee 	stlex	lr, ip, [r3]
   1c2da:	f1be 0f00 	cmp.w	lr, #0
   1c2de:	d1f6      	bne.n	1c2ce <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1c2e0:	07cb      	lsls	r3, r1, #31
   1c2e2:	d500      	bpl.n	1c2e6 <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1c2e4:	4790      	blx	r2
	z_impl_k_yield();
   1c2e6:	f7ff f9f7 	bl	1b6d8 <z_impl_k_yield>
   1c2ea:	e7e6      	b.n	1c2ba <z_work_q_main+0x4>

0001c2ec <arch_printk_char_out>:
}
   1c2ec:	2000      	movs	r0, #0
   1c2ee:	4770      	bx	lr

0001c2f0 <print_err>:
{
   1c2f0:	b570      	push	{r4, r5, r6, lr}
   1c2f2:	460d      	mov	r5, r1
   1c2f4:	4604      	mov	r4, r0
	out('E', ctx);
   1c2f6:	2045      	movs	r0, #69	; 0x45
   1c2f8:	47a0      	blx	r4
	out('R', ctx);
   1c2fa:	4629      	mov	r1, r5
   1c2fc:	2052      	movs	r0, #82	; 0x52
   1c2fe:	47a0      	blx	r4
	out('R', ctx);
   1c300:	4629      	mov	r1, r5
   1c302:	4623      	mov	r3, r4
}
   1c304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   1c308:	2052      	movs	r0, #82	; 0x52
   1c30a:	4718      	bx	r3

0001c30c <z_vprintk>:
{
   1c30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   1c310:	f04f 0800 	mov.w	r8, #0
{
   1c314:	4606      	mov	r6, r0
   1c316:	460f      	mov	r7, r1
	int min_width = -1;
   1c318:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   1c31c:	46c1      	mov	r9, r8
{
   1c31e:	b08b      	sub	sp, #44	; 0x2c
   1c320:	461c      	mov	r4, r3
	while (*fmt) {
   1c322:	1e53      	subs	r3, r2, #1
   1c324:	9302      	str	r3, [sp, #8]
			might_format = 0;
   1c326:	2500      	movs	r5, #0
					break;
   1c328:	e005      	b.n	1c336 <z_vprintk+0x2a>
		if (!might_format) {
   1c32a:	b96d      	cbnz	r5, 1c348 <z_vprintk+0x3c>
			if (*fmt != '%') {
   1c32c:	2825      	cmp	r0, #37	; 0x25
   1c32e:	f000 814f 	beq.w	1c5d0 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   1c332:	4639      	mov	r1, r7
   1c334:	47b0      	blx	r6
	while (*fmt) {
   1c336:	9b02      	ldr	r3, [sp, #8]
   1c338:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1c33c:	9302      	str	r3, [sp, #8]
   1c33e:	2800      	cmp	r0, #0
   1c340:	d1f3      	bne.n	1c32a <z_vprintk+0x1e>
}
   1c342:	b00b      	add	sp, #44	; 0x2c
   1c344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   1c348:	2864      	cmp	r0, #100	; 0x64
   1c34a:	d06e      	beq.n	1c42a <z_vprintk+0x11e>
   1c34c:	d81a      	bhi.n	1c384 <z_vprintk+0x78>
   1c34e:	2839      	cmp	r0, #57	; 0x39
   1c350:	d80a      	bhi.n	1c368 <z_vprintk+0x5c>
   1c352:	2831      	cmp	r0, #49	; 0x31
   1c354:	d260      	bcs.n	1c418 <z_vprintk+0x10c>
   1c356:	282d      	cmp	r0, #45	; 0x2d
   1c358:	f000 8140 	beq.w	1c5dc <z_vprintk+0x2d0>
   1c35c:	2830      	cmp	r0, #48	; 0x30
   1c35e:	d04c      	beq.n	1c3fa <z_vprintk+0xee>
   1c360:	2825      	cmp	r0, #37	; 0x25
   1c362:	d107      	bne.n	1c374 <z_vprintk+0x68>
				out((int)'%', ctx);
   1c364:	4639      	mov	r1, r7
   1c366:	e00b      	b.n	1c380 <z_vprintk+0x74>
			switch (*fmt) {
   1c368:	2858      	cmp	r0, #88	; 0x58
   1c36a:	f000 80bb 	beq.w	1c4e4 <z_vprintk+0x1d8>
   1c36e:	2863      	cmp	r0, #99	; 0x63
   1c370:	f000 812a 	beq.w	1c5c8 <z_vprintk+0x2bc>
					out((int)'%', ctx);
   1c374:	4639      	mov	r1, r7
   1c376:	2025      	movs	r0, #37	; 0x25
   1c378:	47b0      	blx	r6
					out((int)*fmt, ctx);
   1c37a:	4639      	mov	r1, r7
   1c37c:	9b02      	ldr	r3, [sp, #8]
   1c37e:	7818      	ldrb	r0, [r3, #0]
   1c380:	47b0      	blx	r6
   1c382:	e7d0      	b.n	1c326 <z_vprintk+0x1a>
			switch (*fmt) {
   1c384:	2870      	cmp	r0, #112	; 0x70
   1c386:	f000 80a3 	beq.w	1c4d0 <z_vprintk+0x1c4>
   1c38a:	d811      	bhi.n	1c3b0 <z_vprintk+0xa4>
   1c38c:	2869      	cmp	r0, #105	; 0x69
   1c38e:	d04c      	beq.n	1c42a <z_vprintk+0x11e>
   1c390:	286c      	cmp	r0, #108	; 0x6c
   1c392:	d105      	bne.n	1c3a0 <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
   1c394:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1c398:	d12a      	bne.n	1c3f0 <z_vprintk+0xe4>
					length_mod = 'L';
   1c39a:	f04f 084c 	mov.w	r8, #76	; 0x4c
   1c39e:	e7ca      	b.n	1c336 <z_vprintk+0x2a>
			switch (*fmt) {
   1c3a0:	2868      	cmp	r0, #104	; 0x68
   1c3a2:	d1e7      	bne.n	1c374 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   1c3a4:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   1c3a8:	d122      	bne.n	1c3f0 <z_vprintk+0xe4>
					length_mod = 'H';
   1c3aa:	f04f 0848 	mov.w	r8, #72	; 0x48
   1c3ae:	e7c2      	b.n	1c336 <z_vprintk+0x2a>
			switch (*fmt) {
   1c3b0:	2875      	cmp	r0, #117	; 0x75
   1c3b2:	d071      	beq.n	1c498 <z_vprintk+0x18c>
   1c3b4:	d818      	bhi.n	1c3e8 <z_vprintk+0xdc>
   1c3b6:	2873      	cmp	r0, #115	; 0x73
   1c3b8:	d1dc      	bne.n	1c374 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   1c3ba:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   1c3be:	46ab      	mov	fp, r5
   1c3c0:	465b      	mov	r3, fp
   1c3c2:	f81b 0b01 	ldrb.w	r0, [fp], #1
   1c3c6:	2800      	cmp	r0, #0
   1c3c8:	f040 80fb 	bne.w	1c5c2 <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
   1c3cc:	f1b9 0f03 	cmp.w	r9, #3
   1c3d0:	f040 810a 	bne.w	1c5e8 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   1c3d4:	1b5d      	subs	r5, r3, r5
   1c3d6:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   1c3da:	2d00      	cmp	r5, #0
   1c3dc:	dda3      	ble.n	1c326 <z_vprintk+0x1a>
						out(' ', ctx);
   1c3de:	4639      	mov	r1, r7
   1c3e0:	2020      	movs	r0, #32
   1c3e2:	47b0      	blx	r6
   1c3e4:	3d01      	subs	r5, #1
   1c3e6:	e7f8      	b.n	1c3da <z_vprintk+0xce>
			switch (*fmt) {
   1c3e8:	2878      	cmp	r0, #120	; 0x78
   1c3ea:	d07b      	beq.n	1c4e4 <z_vprintk+0x1d8>
   1c3ec:	287a      	cmp	r0, #122	; 0x7a
   1c3ee:	d1c1      	bne.n	1c374 <z_vprintk+0x68>
				} else if (length_mod == 0) {
   1c3f0:	f1b8 0f00 	cmp.w	r8, #0
   1c3f4:	d1be      	bne.n	1c374 <z_vprintk+0x68>
   1c3f6:	4680      	mov	r8, r0
   1c3f8:	e79d      	b.n	1c336 <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
   1c3fa:	f1ba 0f00 	cmp.w	sl, #0
   1c3fe:	da0e      	bge.n	1c41e <z_vprintk+0x112>
   1c400:	f1b9 0f00 	cmp.w	r9, #0
   1c404:	f000 80ed 	beq.w	1c5e2 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   1c408:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   1c40c:	f1b9 0f00 	cmp.w	r9, #0
   1c410:	bf08      	it	eq
   1c412:	f04f 0902 	moveq.w	r9, #2
   1c416:	e78e      	b.n	1c336 <z_vprintk+0x2a>
				if (min_width < 0) {
   1c418:	f1ba 0f00 	cmp.w	sl, #0
   1c41c:	dbf4      	blt.n	1c408 <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
   1c41e:	230a      	movs	r3, #10
   1c420:	fb03 0a0a 	mla	sl, r3, sl, r0
   1c424:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   1c428:	e7f0      	b.n	1c40c <z_vprintk+0x100>
				if (length_mod == 'z') {
   1c42a:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   1c42e:	d102      	bne.n	1c436 <z_vprintk+0x12a>
					d = va_arg(ap, int);
   1c430:	f854 5b04 	ldr.w	r5, [r4], #4
   1c434:	e01f      	b.n	1c476 <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
   1c436:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1c43a:	d0f9      	beq.n	1c430 <z_vprintk+0x124>
				} else if (length_mod == 'L') {
   1c43c:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1c440:	d1f6      	bne.n	1c430 <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
   1c442:	3407      	adds	r4, #7
   1c444:	f024 0407 	bic.w	r4, r4, #7
   1c448:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   1c44c:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   1c450:	9106      	str	r1, [sp, #24]
   1c452:	f143 0100 	adc.w	r1, r3, #0
   1c456:	9107      	str	r1, [sp, #28]
   1c458:	2100      	movs	r1, #0
   1c45a:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   1c45e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c462:	4561      	cmp	r1, ip
   1c464:	bf08      	it	eq
   1c466:	4558      	cmpeq	r0, fp
   1c468:	d204      	bcs.n	1c474 <z_vprintk+0x168>
						print_err(out, ctx);
   1c46a:	4639      	mov	r1, r7
   1c46c:	4630      	mov	r0, r6
   1c46e:	f7ff ff3f 	bl	1c2f0 <print_err>
						break;
   1c472:	e758      	b.n	1c326 <z_vprintk+0x1a>
					d = lld;
   1c474:	4615      	mov	r5, r2
				if (d < 0) {
   1c476:	2d00      	cmp	r5, #0
   1c478:	da05      	bge.n	1c486 <z_vprintk+0x17a>
					out((int)'-', ctx);
   1c47a:	4639      	mov	r1, r7
   1c47c:	202d      	movs	r0, #45	; 0x2d
   1c47e:	47b0      	blx	r6
					d = -d;
   1c480:	426d      	negs	r5, r5
					min_width--;
   1c482:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   1c486:	464b      	mov	r3, r9
   1c488:	462a      	mov	r2, r5
   1c48a:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   1c48e:	4639      	mov	r1, r7
   1c490:	4630      	mov	r0, r6
   1c492:	f7f2 f89b 	bl	e5cc <_printk_dec_ulong>
				break;
   1c496:	e746      	b.n	1c326 <z_vprintk+0x1a>
				if (length_mod == 'z') {
   1c498:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   1c49c:	d102      	bne.n	1c4a4 <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
   1c49e:	f854 2b04 	ldr.w	r2, [r4], #4
   1c4a2:	e011      	b.n	1c4c8 <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
   1c4a4:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1c4a8:	d0f9      	beq.n	1c49e <z_vprintk+0x192>
				} else if (length_mod == 'L') {
   1c4aa:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1c4ae:	d1f6      	bne.n	1c49e <z_vprintk+0x192>
					if (llu > ~0UL) {
   1c4b0:	2100      	movs	r1, #0
   1c4b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
   1c4b6:	3407      	adds	r4, #7
   1c4b8:	f024 0407 	bic.w	r4, r4, #7
   1c4bc:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   1c4c0:	4299      	cmp	r1, r3
   1c4c2:	bf08      	it	eq
   1c4c4:	4290      	cmpeq	r0, r2
   1c4c6:	d3d0      	bcc.n	1c46a <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
   1c4c8:	f8cd a000 	str.w	sl, [sp]
   1c4cc:	464b      	mov	r3, r9
   1c4ce:	e7de      	b.n	1c48e <z_vprintk+0x182>
				out('0', ctx);
   1c4d0:	4639      	mov	r1, r7
   1c4d2:	2030      	movs	r0, #48	; 0x30
   1c4d4:	47b0      	blx	r6
				out('x', ctx);
   1c4d6:	4639      	mov	r1, r7
   1c4d8:	2078      	movs	r0, #120	; 0x78
   1c4da:	47b0      	blx	r6
					min_width = 8;
   1c4dc:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   1c4e0:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   1c4e4:	9b02      	ldr	r3, [sp, #8]
   1c4e6:	781b      	ldrb	r3, [r3, #0]
   1c4e8:	2b70      	cmp	r3, #112	; 0x70
   1c4ea:	d104      	bne.n	1c4f6 <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
   1c4ec:	f854 3b04 	ldr.w	r3, [r4], #4
   1c4f0:	9304      	str	r3, [sp, #16]
   1c4f2:	2300      	movs	r3, #0
   1c4f4:	e00d      	b.n	1c512 <z_vprintk+0x206>
				} else if (length_mod == 'l') {
   1c4f6:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1c4fa:	d0f7      	beq.n	1c4ec <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
   1c4fc:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1c500:	d1f4      	bne.n	1c4ec <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
   1c502:	3407      	adds	r4, #7
   1c504:	f024 0307 	bic.w	r3, r4, #7
   1c508:	461c      	mov	r4, r3
   1c50a:	f854 2b08 	ldr.w	r2, [r4], #8
   1c50e:	685b      	ldr	r3, [r3, #4]
   1c510:	9204      	str	r2, [sp, #16]
	int digits = 0;
   1c512:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   1c514:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
   1c516:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
   1c51a:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   1c51c:	9105      	str	r1, [sp, #20]
		shift -= 4;
   1c51e:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   1c522:	9804      	ldr	r0, [sp, #16]
   1c524:	f1cb 0c20 	rsb	ip, fp, #32
   1c528:	f1ab 0120 	sub.w	r1, fp, #32
   1c52c:	fa20 f00b 	lsr.w	r0, r0, fp
   1c530:	fa03 fc0c 	lsl.w	ip, r3, ip
   1c534:	ea40 000c 	orr.w	r0, r0, ip
   1c538:	fa23 f101 	lsr.w	r1, r3, r1
   1c53c:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   1c53e:	f010 000f 	ands.w	r0, r0, #15
   1c542:	d106      	bne.n	1c552 <z_vprintk+0x246>
   1c544:	9905      	ldr	r1, [sp, #20]
   1c546:	b911      	cbnz	r1, 1c54e <z_vprintk+0x242>
   1c548:	f1bb 0f00 	cmp.w	fp, #0
   1c54c:	d122      	bne.n	1c594 <z_vprintk+0x288>
			nibble += nibble > 9 ? 87 : 48;
   1c54e:	2130      	movs	r1, #48	; 0x30
   1c550:	e003      	b.n	1c55a <z_vprintk+0x24e>
   1c552:	2809      	cmp	r0, #9
   1c554:	bf8c      	ite	hi
   1c556:	2157      	movhi	r1, #87	; 0x57
   1c558:	2130      	movls	r1, #48	; 0x30
   1c55a:	4408      	add	r0, r1
			out((int)nibble, ctx);
   1c55c:	b240      	sxtb	r0, r0
   1c55e:	4639      	mov	r1, r7
   1c560:	9308      	str	r3, [sp, #32]
   1c562:	9205      	str	r2, [sp, #20]
   1c564:	47b0      	blx	r6
			digits++;
   1c566:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   1c568:	9a05      	ldr	r2, [sp, #20]
			digits++;
   1c56a:	3301      	adds	r3, #1
   1c56c:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   1c56e:	9b08      	ldr	r3, [sp, #32]
   1c570:	f1bb 0f00 	cmp.w	fp, #0
   1c574:	d123      	bne.n	1c5be <z_vprintk+0x2b2>
	if (padding == PAD_SPACE_AFTER) {
   1c576:	f1b9 0f03 	cmp.w	r9, #3
   1c57a:	f47f aed4 	bne.w	1c326 <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
   1c57e:	9b03      	ldr	r3, [sp, #12]
   1c580:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   1c584:	2d00      	cmp	r5, #0
   1c586:	f77f aece 	ble.w	1c326 <z_vprintk+0x1a>
			out(' ', ctx);
   1c58a:	4639      	mov	r1, r7
   1c58c:	2020      	movs	r0, #32
   1c58e:	47b0      	blx	r6
   1c590:	3d01      	subs	r5, #1
   1c592:	e7f7      	b.n	1c584 <z_vprintk+0x278>
		if (remaining-- <= min_width) {
   1c594:	1e51      	subs	r1, r2, #1
   1c596:	4592      	cmp	sl, r2
   1c598:	9108      	str	r1, [sp, #32]
   1c59a:	db07      	blt.n	1c5ac <z_vprintk+0x2a0>
			if (padding == PAD_ZERO_BEFORE) {
   1c59c:	f1b9 0f01 	cmp.w	r9, #1
   1c5a0:	d106      	bne.n	1c5b0 <z_vprintk+0x2a4>
				out('0', ctx);
   1c5a2:	4639      	mov	r1, r7
   1c5a4:	2030      	movs	r0, #48	; 0x30
   1c5a6:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   1c5a8:	47b0      	blx	r6
   1c5aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
   1c5ac:	9a08      	ldr	r2, [sp, #32]
   1c5ae:	e7b6      	b.n	1c51e <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
   1c5b0:	f1b9 0f02 	cmp.w	r9, #2
   1c5b4:	d1fa      	bne.n	1c5ac <z_vprintk+0x2a0>
   1c5b6:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   1c5b8:	4639      	mov	r1, r7
   1c5ba:	2020      	movs	r0, #32
   1c5bc:	e7f4      	b.n	1c5a8 <z_vprintk+0x29c>
			found_largest_digit = 1;
   1c5be:	9505      	str	r5, [sp, #20]
   1c5c0:	e7ad      	b.n	1c51e <z_vprintk+0x212>
					out((int)(*s++), ctx);
   1c5c2:	4639      	mov	r1, r7
   1c5c4:	47b0      	blx	r6
   1c5c6:	e6fb      	b.n	1c3c0 <z_vprintk+0xb4>
				out(c, ctx);
   1c5c8:	4639      	mov	r1, r7
   1c5ca:	f854 0b04 	ldr.w	r0, [r4], #4
   1c5ce:	e6d7      	b.n	1c380 <z_vprintk+0x74>
				length_mod = 0;
   1c5d0:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   1c5d2:	46a9      	mov	r9, r5
				min_width = -1;
   1c5d4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
   1c5d8:	2501      	movs	r5, #1
   1c5da:	e6ac      	b.n	1c336 <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
   1c5dc:	f04f 0903 	mov.w	r9, #3
   1c5e0:	e6a9      	b.n	1c336 <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
   1c5e2:	f04f 0901 	mov.w	r9, #1
   1c5e6:	e6a6      	b.n	1c336 <z_vprintk+0x2a>
			might_format = 0;
   1c5e8:	4605      	mov	r5, r0
		++fmt;
   1c5ea:	e6a4      	b.n	1c336 <z_vprintk+0x2a>

0001c5ec <printk>:
{
   1c5ec:	b40f      	push	{r0, r1, r2, r3}
   1c5ee:	b507      	push	{r0, r1, r2, lr}
   1c5f0:	a904      	add	r1, sp, #16
   1c5f2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1c5f6:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1c5f8:	f7f2 f83a 	bl	e670 <vprintk>
}
   1c5fc:	b003      	add	sp, #12
   1c5fe:	f85d eb04 	ldr.w	lr, [sp], #4
   1c602:	b004      	add	sp, #16
   1c604:	4770      	bx	lr

0001c606 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_SLM_CR_LF_TERMINATION, 1);
GEN_ABSOLUTE_SYM(CONFIG_SLM_AT_HOST_TERMINATION, 3);
GEN_ABSOLUTE_SYM(CONFIG_SLM_LOG_LEVEL_INF, 1);
GEN_ABSOLUTE_SYM(CONFIG_SLM_LOG_LEVEL, 3);

GEN_ABS_SYM_END
   1c606:	4770      	bx	lr

0001c608 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   1c608:	f7fe b908 	b.w	1a81c <SystemInit>

0001c60c <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1c60c:	2300      	movs	r3, #0
	list->head = NULL;
   1c60e:	e9c0 3300 	strd	r3, r3, [r0]
}
   1c612:	4770      	bx	lr

0001c614 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1c614:	6803      	ldr	r3, [r0, #0]
   1c616:	b923      	cbnz	r3, 1c622 <log_list_add_tail+0xe>
		list->head = msg;
   1c618:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1c61a:	2300      	movs	r3, #0
	list->tail = msg;
   1c61c:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1c61e:	600b      	str	r3, [r1, #0]
}
   1c620:	4770      	bx	lr
		list->tail->next = msg;
   1c622:	6843      	ldr	r3, [r0, #4]
   1c624:	6019      	str	r1, [r3, #0]
   1c626:	e7f8      	b.n	1c61a <log_list_add_tail+0x6>

0001c628 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1c628:	6800      	ldr	r0, [r0, #0]
   1c62a:	4770      	bx	lr

0001c62c <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   1c62c:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   1c62e:	b10b      	cbz	r3, 1c634 <log_list_head_get+0x8>
		list->head = list->head->next;
   1c630:	681a      	ldr	r2, [r3, #0]
   1c632:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   1c634:	4618      	mov	r0, r3
   1c636:	4770      	bx	lr

0001c638 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1c638:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1c63a:	f7f2 fa6f 	bl	eb1c <log_msg_chunk_alloc>

	if (msg != NULL) {
   1c63e:	b118      	cbz	r0, 1c648 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1c640:	2301      	movs	r3, #1
   1c642:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1c644:	2300      	movs	r3, #0
   1c646:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   1c648:	bd08      	pop	{r3, pc}

0001c64a <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   1c64a:	f7f2 bdfb 	b.w	f244 <z_timer_cycle_get_32>

0001c64e <dummy_timestamp>:
   1c64e:	2000      	movs	r0, #0
   1c650:	4770      	bx	lr

0001c652 <log_0>:
{
   1c652:	b538      	push	{r3, r4, r5, lr}
   1c654:	4605      	mov	r5, r0
   1c656:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1c658:	f7ff ffee 	bl	1c638 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c65c:	b128      	cbz	r0, 1c66a <log_0+0x18>
		msg->str = str;
   1c65e:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1c660:	4621      	mov	r1, r4
}
   1c662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1c666:	f7f2 b8e9 	b.w	e83c <msg_finalize>
}
   1c66a:	bd38      	pop	{r3, r4, r5, pc}

0001c66c <log_1>:
{
   1c66c:	b570      	push	{r4, r5, r6, lr}
   1c66e:	4604      	mov	r4, r0
   1c670:	460e      	mov	r6, r1
   1c672:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1c674:	f7ff ffe0 	bl	1c638 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c678:	b158      	cbz	r0, 1c692 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1c67a:	2201      	movs	r2, #1
		msg->str = str;
   1c67c:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1c67e:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1c680:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   1c682:	f362 1407 	bfi	r4, r2, #4, #4
   1c686:	7244      	strb	r4, [r0, #9]
		msg_finalize(msg, src_level);
   1c688:	4629      	mov	r1, r5
}
   1c68a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1c68e:	f7f2 b8d5 	b.w	e83c <msg_finalize>
}
   1c692:	bd70      	pop	{r4, r5, r6, pc}

0001c694 <log_2>:
{
   1c694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c698:	4605      	mov	r5, r0
   1c69a:	4688      	mov	r8, r1
   1c69c:	4617      	mov	r7, r2
   1c69e:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1c6a0:	f7ff ffca 	bl	1c638 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c6a4:	b160      	cbz	r0, 1c6c0 <log_2+0x2c>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1c6a6:	2302      	movs	r3, #2
		msg->str = str;
   1c6a8:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1c6aa:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1c6ac:	e9c0 8705 	strd	r8, r7, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   1c6b0:	f363 1507 	bfi	r5, r3, #4, #4
   1c6b4:	7245      	strb	r5, [r0, #9]
		msg_finalize(msg, src_level);
   1c6b6:	4631      	mov	r1, r6
}
   1c6b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1c6bc:	f7f2 b8be 	b.w	e83c <msg_finalize>
}
   1c6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c6c4 <log_3>:
{
   1c6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c6c8:	4605      	mov	r5, r0
   1c6ca:	4689      	mov	r9, r1
   1c6cc:	4690      	mov	r8, r2
   1c6ce:	461f      	mov	r7, r3
   1c6d0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1c6d4:	f7ff ffb0 	bl	1c638 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c6d8:	b168      	cbz	r0, 1c6f6 <log_3+0x32>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1c6da:	2303      	movs	r3, #3
		msg->str = str;
   1c6dc:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1c6de:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1c6e0:	e9c0 9805 	strd	r9, r8, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   1c6e4:	f363 1507 	bfi	r5, r3, #4, #4
   1c6e8:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[2] = arg3;
   1c6ea:	61c7      	str	r7, [r0, #28]
		msg_finalize(msg, src_level);
   1c6ec:	4631      	mov	r1, r6
}
   1c6ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1c6f2:	f7f2 b8a3 	b.w	e83c <msg_finalize>
}
   1c6f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c6fa <log_n>:
{
   1c6fa:	b510      	push	{r4, lr}
   1c6fc:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1c6fe:	f000 f893 	bl	1c828 <log_msg_create_n>
		if (msg == NULL) {
   1c702:	b120      	cbz	r0, 1c70e <log_n+0x14>
		msg_finalize(msg, src_level);
   1c704:	4621      	mov	r1, r4
}
   1c706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1c70a:	f7f2 b897 	b.w	e83c <msg_finalize>
}
   1c70e:	bd10      	pop	{r4, pc}

0001c710 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1c710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c714:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
   1c716:	8903      	ldrh	r3, [r0, #8]
{
   1c718:	460e      	mov	r6, r1
	u32_t available_len = msg->hdr.params.hexdump.length;
   1c71a:	089b      	lsrs	r3, r3, #2
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
   1c71c:	42a3      	cmp	r3, r4
{
   1c71e:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   1c722:	d803      	bhi.n	1c72c <log_msg_hexdump_data_op+0x1c>
		*length = 0;
   1c724:	2300      	movs	r3, #0
   1c726:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1c728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1c72c:	6811      	ldr	r1, [r2, #0]
   1c72e:	4421      	add	r1, r4
   1c730:	4299      	cmp	r1, r3
		*length = available_len - offset;
   1c732:	bf84      	itt	hi
   1c734:	1b19      	subhi	r1, r3, r4
   1c736:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1c738:	2b0c      	cmp	r3, #12
	req_len = *length;
   1c73a:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1c73e:	d928      	bls.n	1c792 <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
   1c740:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1c742:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   1c746:	d82b      	bhi.n	1c7a0 <log_msg_hexdump_data_op+0x90>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1c748:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   1c74a:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1c74c:	454b      	cmp	r3, r9
   1c74e:	bf28      	it	cs
   1c750:	464b      	movcs	r3, r9
   1c752:	4420      	add	r0, r4
   1c754:	461d      	mov	r5, r3
			(void)memcpy(&head_data[offset], data, cpy_len);
   1c756:	461a      	mov	r2, r3
		if (put_op) {
   1c758:	b1ff      	cbz	r7, 1c79a <log_msg_hexdump_data_op+0x8a>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1c75a:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   1c75c:	f000 fcef 	bl	1d13e <memcpy>
		req_len -= cpy_len;
   1c760:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1c764:	442e      	add	r6, r5
	while (req_len > 0) {
   1c766:	f1b9 0f00 	cmp.w	r9, #0
   1c76a:	d0dd      	beq.n	1c728 <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1c76c:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1c770:	454d      	cmp	r5, r9
   1c772:	bf28      	it	cs
   1c774:	464d      	movcs	r5, r9
		if (put_op) {
   1c776:	1d20      	adds	r0, r4, #4
   1c778:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
   1c77a:	462a      	mov	r2, r5
		if (put_op) {
   1c77c:	b1bf      	cbz	r7, 1c7ae <log_msg_hexdump_data_op+0x9e>
			(void)memcpy(&cont->payload.bytes[offset],
   1c77e:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   1c780:	f000 fcdd 	bl	1d13e <memcpy>
		req_len -= cpy_len;
   1c784:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1c788:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   1c78c:	442e      	add	r6, r5
		offset = 0;
   1c78e:	2400      	movs	r4, #0
   1c790:	e7e9      	b.n	1c766 <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
   1c792:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1c794:	f04f 0800 	mov.w	r8, #0
   1c798:	e7d8      	b.n	1c74c <log_msg_hexdump_data_op+0x3c>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1c79a:	4601      	mov	r1, r0
   1c79c:	4630      	mov	r0, r6
   1c79e:	e7dd      	b.n	1c75c <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
   1c7a0:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1c7a2:	2c1b      	cmp	r4, #27
   1c7a4:	d9df      	bls.n	1c766 <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
   1c7a6:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   1c7aa:	3c1c      	subs	r4, #28
   1c7ac:	e7f9      	b.n	1c7a2 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1c7ae:	4601      	mov	r1, r0
   1c7b0:	4630      	mov	r0, r6
   1c7b2:	e7e5      	b.n	1c780 <log_msg_hexdump_data_op+0x70>

0001c7b4 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1c7b4:	3004      	adds	r0, #4
   1c7b6:	e8d0 3fef 	ldaex	r3, [r0]
   1c7ba:	3301      	adds	r3, #1
   1c7bc:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1c7c0:	2a00      	cmp	r2, #0
   1c7c2:	d1f8      	bne.n	1c7b6 <log_msg_get+0x2>
}
   1c7c4:	4770      	bx	lr

0001c7c6 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1c7c6:	7a40      	ldrb	r0, [r0, #9]
}
   1c7c8:	0900      	lsrs	r0, r0, #4
   1c7ca:	4770      	bx	lr

0001c7cc <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1c7cc:	7a43      	ldrb	r3, [r0, #9]
   1c7ce:	091b      	lsrs	r3, r3, #4
   1c7d0:	428b      	cmp	r3, r1
   1c7d2:	d916      	bls.n	1c802 <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1c7d4:	2b03      	cmp	r3, #3
   1c7d6:	d803      	bhi.n	1c7e0 <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
   1c7d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1c7dc:	6948      	ldr	r0, [r1, #20]
   1c7de:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1c7e0:	2901      	cmp	r1, #1
   1c7e2:	d803      	bhi.n	1c7ec <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
   1c7e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1c7e8:	6988      	ldr	r0, [r1, #24]
   1c7ea:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1c7ec:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1c7ee:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1c7f0:	2906      	cmp	r1, #6
   1c7f2:	d803      	bhi.n	1c7fc <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
   1c7f4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1c7f8:	6848      	ldr	r0, [r1, #4]
   1c7fa:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
   1c7fc:	3907      	subs	r1, #7
		cont = cont->next;
   1c7fe:	681b      	ldr	r3, [r3, #0]
   1c800:	e7f6      	b.n	1c7f0 <log_msg_arg_get+0x24>
		return 0;
   1c802:	2000      	movs	r0, #0
}
   1c804:	4770      	bx	lr

0001c806 <log_msg_put>:
{
   1c806:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1c808:	1d02      	adds	r2, r0, #4
   1c80a:	e8d2 1fef 	ldaex	r1, [r2]
   1c80e:	3901      	subs	r1, #1
   1c810:	e8c2 1fec 	stlex	ip, r1, [r2]
   1c814:	f1bc 0f00 	cmp.w	ip, #0
   1c818:	d1f7      	bne.n	1c80a <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   1c81a:	685b      	ldr	r3, [r3, #4]
   1c81c:	b90b      	cbnz	r3, 1c822 <log_msg_put+0x1c>
		msg_free(msg);
   1c81e:	f7f2 b98f 	b.w	eb40 <msg_free>
}
   1c822:	4770      	bx	lr

0001c824 <log_msg_str_get>:
}
   1c824:	6900      	ldr	r0, [r0, #16]
   1c826:	4770      	bx	lr

0001c828 <log_msg_create_n>:
{
   1c828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c82c:	4682      	mov	sl, r0
   1c82e:	4688      	mov	r8, r1
   1c830:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1c832:	f7f2 f973 	bl	eb1c <log_msg_chunk_alloc>
	if (msg != NULL) {
   1c836:	4604      	mov	r4, r0
   1c838:	b330      	cbz	r0, 1c888 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1c83a:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1c83c:	2600      	movs	r6, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1c83e:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1c840:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1c842:	8106      	strh	r6, [r0, #8]
   1c844:	d909      	bls.n	1c85a <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1c846:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1c848:	f1a5 0902 	sub.w	r9, r5, #2
	msg->hdr.params.generic.ext = 1;
   1c84c:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   1c84e:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1c852:	6146      	str	r6, [r0, #20]
	while (n > 0) {
   1c854:	f1b9 0f00 	cmp.w	r9, #0
   1c858:	dc0e      	bgt.n	1c878 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   1c85a:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1c85c:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1c85e:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   1c862:	f8c4 a010 	str.w	sl, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1c866:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1c868:	d818      	bhi.n	1c89c <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1c86a:	00aa      	lsls	r2, r5, #2
   1c86c:	4641      	mov	r1, r8
   1c86e:	f104 0014 	add.w	r0, r4, #20
   1c872:	f000 fc64 	bl	1d13e <memcpy>
		nargs  = 0U;
   1c876:	e007      	b.n	1c888 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1c878:	f7f2 f950 	bl	eb1c <log_msg_chunk_alloc>
		if (cont == NULL) {
   1c87c:	4607      	mov	r7, r0
   1c87e:	b930      	cbnz	r0, 1c88e <log_msg_create_n+0x66>
			msg_free(msg);
   1c880:	4620      	mov	r0, r4
   1c882:	f7f2 f95d 	bl	eb40 <msg_free>
			return NULL;
   1c886:	463c      	mov	r4, r7
}
   1c888:	4620      	mov	r0, r4
   1c88a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1c88e:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1c892:	f1a9 0907 	sub.w	r9, r9, #7
   1c896:	6006      	str	r6, [r0, #0]
		next = &cont->next;
   1c898:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1c89a:	e7db      	b.n	1c854 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1c89c:	4641      	mov	r1, r8
   1c89e:	2208      	movs	r2, #8
   1c8a0:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1c8a4:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1c8a6:	f000 fc4a 	bl	1d13e <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1c8aa:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1c8ac:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1c8b0:	2d07      	cmp	r5, #7
   1c8b2:	462e      	mov	r6, r5
   1c8b4:	bf28      	it	cs
   1c8b6:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1c8b8:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1c8bc:	4641      	mov	r1, r8
   1c8be:	1d38      	adds	r0, r7, #4
   1c8c0:	464a      	mov	r2, r9
   1c8c2:	f000 fc3c 	bl	1d13e <memcpy>
	while (nargs != 0U) {
   1c8c6:	1bad      	subs	r5, r5, r6
		args += cpy_args;
   1c8c8:	44c8      	add	r8, r9
		cont = cont->next;
   1c8ca:	683f      	ldr	r7, [r7, #0]
	while (nargs != 0U) {
   1c8cc:	d1f0      	bne.n	1c8b0 <log_msg_create_n+0x88>
   1c8ce:	e7db      	b.n	1c888 <log_msg_create_n+0x60>

0001c8d0 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
   1c8d0:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1c8d2:	2400      	movs	r4, #0
   1c8d4:	9400      	str	r4, [sp, #0]
   1c8d6:	f7ff ff1b 	bl	1c710 <log_msg_hexdump_data_op>
}
   1c8da:	b002      	add	sp, #8
   1c8dc:	bd10      	pop	{r4, pc}

0001c8de <buffer_write>:
{
   1c8de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c8e0:	4606      	mov	r6, r0
   1c8e2:	460d      	mov	r5, r1
   1c8e4:	4614      	mov	r4, r2
   1c8e6:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1c8e8:	4621      	mov	r1, r4
   1c8ea:	4628      	mov	r0, r5
   1c8ec:	463a      	mov	r2, r7
   1c8ee:	47b0      	blx	r6
	} while (len != 0);
   1c8f0:	1a24      	subs	r4, r4, r0
		buf += processed;
   1c8f2:	4405      	add	r5, r0
	} while (len != 0);
   1c8f4:	d1f8      	bne.n	1c8e8 <buffer_write+0xa>
}
   1c8f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c8f8 <std_print>:
{
   1c8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c8fc:	b08e      	sub	sp, #56	; 0x38
   1c8fe:	af0e      	add	r7, sp, #56	; 0x38
   1c900:	4681      	mov	r9, r0
   1c902:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1c904:	f7ff ff8e 	bl	1c824 <log_msg_str_get>
   1c908:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
   1c90a:	4648      	mov	r0, r9
   1c90c:	f7ff ff5b 	bl	1c7c6 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   1c910:	f04f 0800 	mov.w	r8, #0
	u32_t nargs = log_msg_nargs_get(msg);
   1c914:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   1c916:	0083      	lsls	r3, r0, #2
   1c918:	3307      	adds	r3, #7
   1c91a:	f023 0307 	bic.w	r3, r3, #7
   1c91e:	ebad 0d03 	sub.w	sp, sp, r3
   1c922:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1c924:	45d0      	cmp	r8, sl
   1c926:	d116      	bne.n	1c956 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1c928:	4648      	mov	r0, r9
   1c92a:	f7ff ff4c 	bl	1c7c6 <log_msg_nargs_get>
   1c92e:	280f      	cmp	r0, #15
   1c930:	d81e      	bhi.n	1c970 <std_print+0x78>
   1c932:	e8df f010 	tbh	[pc, r0, lsl #1]
   1c936:	0019      	.short	0x0019
   1c938:	00260020 	.word	0x00260020
   1c93c:	0036002d 	.word	0x0036002d
   1c940:	004e0041 	.word	0x004e0041
   1c944:	006e005d 	.word	0x006e005d
   1c948:	00960081 	.word	0x00960081
   1c94c:	00c600ad 	.word	0x00c600ad
   1c950:	00fe00e1 	.word	0x00fe00e1
   1c954:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   1c956:	4641      	mov	r1, r8
   1c958:	4648      	mov	r0, r9
   1c95a:	f7ff ff37 	bl	1c7cc <log_msg_arg_get>
   1c95e:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	for (i = 0; i < nargs; i++) {
   1c962:	f108 0801 	add.w	r8, r8, #1
   1c966:	e7dd      	b.n	1c924 <std_print+0x2c>
		print_formatted(log_output, str);
   1c968:	4631      	mov	r1, r6
   1c96a:	4628      	mov	r0, r5
   1c96c:	f7f2 f91a 	bl	eba4 <print_formatted>
}
   1c970:	46bd      	mov	sp, r7
   1c972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   1c976:	6822      	ldr	r2, [r4, #0]
   1c978:	4631      	mov	r1, r6
   1c97a:	4628      	mov	r0, r5
   1c97c:	f7f2 f912 	bl	eba4 <print_formatted>
		break;
   1c980:	e7f6      	b.n	1c970 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   1c982:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c986:	4631      	mov	r1, r6
   1c988:	4628      	mov	r0, r5
   1c98a:	f7f2 f90b 	bl	eba4 <print_formatted>
		break;
   1c98e:	e7ef      	b.n	1c970 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   1c990:	68a3      	ldr	r3, [r4, #8]
   1c992:	4631      	mov	r1, r6
   1c994:	9300      	str	r3, [sp, #0]
   1c996:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c99a:	4628      	mov	r0, r5
   1c99c:	f7f2 f902 	bl	eba4 <print_formatted>
		break;
   1c9a0:	e7e6      	b.n	1c970 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c9a2:	68e3      	ldr	r3, [r4, #12]
   1c9a4:	4631      	mov	r1, r6
   1c9a6:	9301      	str	r3, [sp, #4]
   1c9a8:	68a3      	ldr	r3, [r4, #8]
   1c9aa:	4628      	mov	r0, r5
   1c9ac:	9300      	str	r3, [sp, #0]
   1c9ae:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c9b2:	f7f2 f8f7 	bl	eba4 <print_formatted>
		break;
   1c9b6:	e7db      	b.n	1c970 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c9b8:	6923      	ldr	r3, [r4, #16]
   1c9ba:	4631      	mov	r1, r6
   1c9bc:	9302      	str	r3, [sp, #8]
   1c9be:	68e3      	ldr	r3, [r4, #12]
   1c9c0:	4628      	mov	r0, r5
   1c9c2:	9301      	str	r3, [sp, #4]
   1c9c4:	68a3      	ldr	r3, [r4, #8]
   1c9c6:	9300      	str	r3, [sp, #0]
   1c9c8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c9cc:	f7f2 f8ea 	bl	eba4 <print_formatted>
		break;
   1c9d0:	e7ce      	b.n	1c970 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c9d2:	6963      	ldr	r3, [r4, #20]
   1c9d4:	4631      	mov	r1, r6
   1c9d6:	9303      	str	r3, [sp, #12]
   1c9d8:	6923      	ldr	r3, [r4, #16]
   1c9da:	4628      	mov	r0, r5
   1c9dc:	9302      	str	r3, [sp, #8]
   1c9de:	68e3      	ldr	r3, [r4, #12]
   1c9e0:	9301      	str	r3, [sp, #4]
   1c9e2:	68a3      	ldr	r3, [r4, #8]
   1c9e4:	9300      	str	r3, [sp, #0]
   1c9e6:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c9ea:	f7f2 f8db 	bl	eba4 <print_formatted>
		break;
   1c9ee:	e7bf      	b.n	1c970 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c9f0:	69a3      	ldr	r3, [r4, #24]
   1c9f2:	4631      	mov	r1, r6
   1c9f4:	9304      	str	r3, [sp, #16]
   1c9f6:	6963      	ldr	r3, [r4, #20]
   1c9f8:	4628      	mov	r0, r5
   1c9fa:	9303      	str	r3, [sp, #12]
   1c9fc:	6923      	ldr	r3, [r4, #16]
   1c9fe:	9302      	str	r3, [sp, #8]
   1ca00:	68e3      	ldr	r3, [r4, #12]
   1ca02:	9301      	str	r3, [sp, #4]
   1ca04:	68a3      	ldr	r3, [r4, #8]
   1ca06:	9300      	str	r3, [sp, #0]
   1ca08:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ca0c:	f7f2 f8ca 	bl	eba4 <print_formatted>
		break;
   1ca10:	e7ae      	b.n	1c970 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1ca12:	69e3      	ldr	r3, [r4, #28]
   1ca14:	4631      	mov	r1, r6
   1ca16:	9305      	str	r3, [sp, #20]
   1ca18:	69a3      	ldr	r3, [r4, #24]
   1ca1a:	4628      	mov	r0, r5
   1ca1c:	9304      	str	r3, [sp, #16]
   1ca1e:	6963      	ldr	r3, [r4, #20]
   1ca20:	9303      	str	r3, [sp, #12]
   1ca22:	6923      	ldr	r3, [r4, #16]
   1ca24:	9302      	str	r3, [sp, #8]
   1ca26:	68e3      	ldr	r3, [r4, #12]
   1ca28:	9301      	str	r3, [sp, #4]
   1ca2a:	68a3      	ldr	r3, [r4, #8]
   1ca2c:	9300      	str	r3, [sp, #0]
   1ca2e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ca32:	f7f2 f8b7 	bl	eba4 <print_formatted>
		break;
   1ca36:	e79b      	b.n	1c970 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1ca38:	6a23      	ldr	r3, [r4, #32]
   1ca3a:	4631      	mov	r1, r6
   1ca3c:	9306      	str	r3, [sp, #24]
   1ca3e:	69e3      	ldr	r3, [r4, #28]
   1ca40:	4628      	mov	r0, r5
   1ca42:	9305      	str	r3, [sp, #20]
   1ca44:	69a3      	ldr	r3, [r4, #24]
   1ca46:	9304      	str	r3, [sp, #16]
   1ca48:	6963      	ldr	r3, [r4, #20]
   1ca4a:	9303      	str	r3, [sp, #12]
   1ca4c:	6923      	ldr	r3, [r4, #16]
   1ca4e:	9302      	str	r3, [sp, #8]
   1ca50:	68e3      	ldr	r3, [r4, #12]
   1ca52:	9301      	str	r3, [sp, #4]
   1ca54:	68a3      	ldr	r3, [r4, #8]
   1ca56:	9300      	str	r3, [sp, #0]
   1ca58:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ca5c:	f7f2 f8a2 	bl	eba4 <print_formatted>
		break;
   1ca60:	e786      	b.n	1c970 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1ca62:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ca64:	4631      	mov	r1, r6
   1ca66:	9307      	str	r3, [sp, #28]
   1ca68:	6a23      	ldr	r3, [r4, #32]
   1ca6a:	4628      	mov	r0, r5
   1ca6c:	9306      	str	r3, [sp, #24]
   1ca6e:	69e3      	ldr	r3, [r4, #28]
   1ca70:	9305      	str	r3, [sp, #20]
   1ca72:	69a3      	ldr	r3, [r4, #24]
   1ca74:	9304      	str	r3, [sp, #16]
   1ca76:	6963      	ldr	r3, [r4, #20]
   1ca78:	9303      	str	r3, [sp, #12]
   1ca7a:	6923      	ldr	r3, [r4, #16]
   1ca7c:	9302      	str	r3, [sp, #8]
   1ca7e:	68e3      	ldr	r3, [r4, #12]
   1ca80:	9301      	str	r3, [sp, #4]
   1ca82:	68a3      	ldr	r3, [r4, #8]
   1ca84:	9300      	str	r3, [sp, #0]
   1ca86:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ca8a:	f7f2 f88b 	bl	eba4 <print_formatted>
		break;
   1ca8e:	e76f      	b.n	1c970 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1ca90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1ca92:	4631      	mov	r1, r6
   1ca94:	9308      	str	r3, [sp, #32]
   1ca96:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ca98:	4628      	mov	r0, r5
   1ca9a:	9307      	str	r3, [sp, #28]
   1ca9c:	6a23      	ldr	r3, [r4, #32]
   1ca9e:	9306      	str	r3, [sp, #24]
   1caa0:	69e3      	ldr	r3, [r4, #28]
   1caa2:	9305      	str	r3, [sp, #20]
   1caa4:	69a3      	ldr	r3, [r4, #24]
   1caa6:	9304      	str	r3, [sp, #16]
   1caa8:	6963      	ldr	r3, [r4, #20]
   1caaa:	9303      	str	r3, [sp, #12]
   1caac:	6923      	ldr	r3, [r4, #16]
   1caae:	9302      	str	r3, [sp, #8]
   1cab0:	68e3      	ldr	r3, [r4, #12]
   1cab2:	9301      	str	r3, [sp, #4]
   1cab4:	68a3      	ldr	r3, [r4, #8]
   1cab6:	9300      	str	r3, [sp, #0]
   1cab8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cabc:	f7f2 f872 	bl	eba4 <print_formatted>
		break;
   1cac0:	e756      	b.n	1c970 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cac2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1cac4:	4631      	mov	r1, r6
   1cac6:	9309      	str	r3, [sp, #36]	; 0x24
   1cac8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1caca:	4628      	mov	r0, r5
   1cacc:	9308      	str	r3, [sp, #32]
   1cace:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cad0:	9307      	str	r3, [sp, #28]
   1cad2:	6a23      	ldr	r3, [r4, #32]
   1cad4:	9306      	str	r3, [sp, #24]
   1cad6:	69e3      	ldr	r3, [r4, #28]
   1cad8:	9305      	str	r3, [sp, #20]
   1cada:	69a3      	ldr	r3, [r4, #24]
   1cadc:	9304      	str	r3, [sp, #16]
   1cade:	6963      	ldr	r3, [r4, #20]
   1cae0:	9303      	str	r3, [sp, #12]
   1cae2:	6923      	ldr	r3, [r4, #16]
   1cae4:	9302      	str	r3, [sp, #8]
   1cae6:	68e3      	ldr	r3, [r4, #12]
   1cae8:	9301      	str	r3, [sp, #4]
   1caea:	68a3      	ldr	r3, [r4, #8]
   1caec:	9300      	str	r3, [sp, #0]
   1caee:	e9d4 2300 	ldrd	r2, r3, [r4]
   1caf2:	f7f2 f857 	bl	eba4 <print_formatted>
		break;
   1caf6:	e73b      	b.n	1c970 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1caf8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cafa:	4631      	mov	r1, r6
   1cafc:	930a      	str	r3, [sp, #40]	; 0x28
   1cafe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1cb00:	4628      	mov	r0, r5
   1cb02:	9309      	str	r3, [sp, #36]	; 0x24
   1cb04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cb06:	9308      	str	r3, [sp, #32]
   1cb08:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cb0a:	9307      	str	r3, [sp, #28]
   1cb0c:	6a23      	ldr	r3, [r4, #32]
   1cb0e:	9306      	str	r3, [sp, #24]
   1cb10:	69e3      	ldr	r3, [r4, #28]
   1cb12:	9305      	str	r3, [sp, #20]
   1cb14:	69a3      	ldr	r3, [r4, #24]
   1cb16:	9304      	str	r3, [sp, #16]
   1cb18:	6963      	ldr	r3, [r4, #20]
   1cb1a:	9303      	str	r3, [sp, #12]
   1cb1c:	6923      	ldr	r3, [r4, #16]
   1cb1e:	9302      	str	r3, [sp, #8]
   1cb20:	68e3      	ldr	r3, [r4, #12]
   1cb22:	9301      	str	r3, [sp, #4]
   1cb24:	68a3      	ldr	r3, [r4, #8]
   1cb26:	9300      	str	r3, [sp, #0]
   1cb28:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cb2c:	f7f2 f83a 	bl	eba4 <print_formatted>
		break;
   1cb30:	e71e      	b.n	1c970 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cb32:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1cb34:	4631      	mov	r1, r6
   1cb36:	930b      	str	r3, [sp, #44]	; 0x2c
   1cb38:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cb3a:	4628      	mov	r0, r5
   1cb3c:	930a      	str	r3, [sp, #40]	; 0x28
   1cb3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1cb40:	9309      	str	r3, [sp, #36]	; 0x24
   1cb42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cb44:	9308      	str	r3, [sp, #32]
   1cb46:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cb48:	9307      	str	r3, [sp, #28]
   1cb4a:	6a23      	ldr	r3, [r4, #32]
   1cb4c:	9306      	str	r3, [sp, #24]
   1cb4e:	69e3      	ldr	r3, [r4, #28]
   1cb50:	9305      	str	r3, [sp, #20]
   1cb52:	69a3      	ldr	r3, [r4, #24]
   1cb54:	9304      	str	r3, [sp, #16]
   1cb56:	6963      	ldr	r3, [r4, #20]
   1cb58:	9303      	str	r3, [sp, #12]
   1cb5a:	6923      	ldr	r3, [r4, #16]
   1cb5c:	9302      	str	r3, [sp, #8]
   1cb5e:	68e3      	ldr	r3, [r4, #12]
   1cb60:	9301      	str	r3, [sp, #4]
   1cb62:	68a3      	ldr	r3, [r4, #8]
   1cb64:	9300      	str	r3, [sp, #0]
   1cb66:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cb6a:	f7f2 f81b 	bl	eba4 <print_formatted>
		break;
   1cb6e:	e6ff      	b.n	1c970 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cb70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1cb72:	4631      	mov	r1, r6
   1cb74:	930c      	str	r3, [sp, #48]	; 0x30
   1cb76:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1cb78:	4628      	mov	r0, r5
   1cb7a:	930b      	str	r3, [sp, #44]	; 0x2c
   1cb7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cb7e:	930a      	str	r3, [sp, #40]	; 0x28
   1cb80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1cb82:	9309      	str	r3, [sp, #36]	; 0x24
   1cb84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cb86:	9308      	str	r3, [sp, #32]
   1cb88:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cb8a:	9307      	str	r3, [sp, #28]
   1cb8c:	6a23      	ldr	r3, [r4, #32]
   1cb8e:	9306      	str	r3, [sp, #24]
   1cb90:	69e3      	ldr	r3, [r4, #28]
   1cb92:	9305      	str	r3, [sp, #20]
   1cb94:	69a3      	ldr	r3, [r4, #24]
   1cb96:	9304      	str	r3, [sp, #16]
   1cb98:	6963      	ldr	r3, [r4, #20]
   1cb9a:	9303      	str	r3, [sp, #12]
   1cb9c:	6923      	ldr	r3, [r4, #16]
   1cb9e:	9302      	str	r3, [sp, #8]
   1cba0:	68e3      	ldr	r3, [r4, #12]
   1cba2:	9301      	str	r3, [sp, #4]
   1cba4:	68a3      	ldr	r3, [r4, #8]
   1cba6:	9300      	str	r3, [sp, #0]
   1cba8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cbac:	f7f1 fffa 	bl	eba4 <print_formatted>
}
   1cbb0:	e6de      	b.n	1c970 <std_print+0x78>

0001cbb2 <log_output_flush>:
		     log_output->control_block->offset,
   1cbb2:	6842      	ldr	r2, [r0, #4]
{
   1cbb4:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   1cbb6:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   1cbba:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   1cbbc:	6881      	ldr	r1, [r0, #8]
   1cbbe:	6800      	ldr	r0, [r0, #0]
   1cbc0:	f7ff fe8d 	bl	1c8de <buffer_write>
	log_output->control_block->offset = 0;
   1cbc4:	2200      	movs	r2, #0
   1cbc6:	6863      	ldr	r3, [r4, #4]
   1cbc8:	601a      	str	r2, [r3, #0]
}
   1cbca:	bd10      	pop	{r4, pc}

0001cbcc <out_func>:
{
   1cbcc:	b508      	push	{r3, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
   1cbce:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   1cbd2:	681b      	ldr	r3, [r3, #0]
   1cbd4:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
   1cbd6:	684a      	ldr	r2, [r1, #4]
   1cbd8:	6813      	ldr	r3, [r2, #0]
   1cbda:	3301      	adds	r3, #1
   1cbdc:	6013      	str	r3, [r2, #0]
	if (out_ctx->control_block->offset == out_ctx->size) {
   1cbde:	68ca      	ldr	r2, [r1, #12]
   1cbe0:	4293      	cmp	r3, r2
   1cbe2:	d102      	bne.n	1cbea <out_func+0x1e>
		log_output_flush(out_ctx);
   1cbe4:	4608      	mov	r0, r1
   1cbe6:	f7ff ffe4 	bl	1cbb2 <log_output_flush>
}
   1cbea:	2000      	movs	r0, #0
   1cbec:	bd08      	pop	{r3, pc}

0001cbee <char_out>:
{
   1cbee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cbf0:	460d      	mov	r5, r1
   1cbf2:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
   1cbf4:	4604      	mov	r4, r0
   1cbf6:	1847      	adds	r7, r0, r1
   1cbf8:	42bc      	cmp	r4, r7
   1cbfa:	d101      	bne.n	1cc00 <char_out+0x12>
}
   1cbfc:	4628      	mov	r0, r5
   1cbfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   1cc00:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   1cc04:	6873      	ldr	r3, [r6, #4]
   1cc06:	4630      	mov	r0, r6
   1cc08:	685b      	ldr	r3, [r3, #4]
   1cc0a:	4798      	blx	r3
   1cc0c:	e7f4      	b.n	1cbf8 <char_out+0xa>

0001cc0e <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
   1cc0e:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
   1cc10:	7a5a      	ldrb	r2, [r3, #9]
   1cc12:	b932      	cbnz	r2, 1cc22 <get_status+0x14>
	if (data->ref > 0) {
   1cc14:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
   1cc18:	2800      	cmp	r0, #0
   1cc1a:	bfcc      	ite	gt
   1cc1c:	2000      	movgt	r0, #0
   1cc1e:	2001      	movle	r0, #1
   1cc20:	4770      	bx	lr
   1cc22:	2002      	movs	r0, #2
}
   1cc24:	4770      	bx	lr

0001cc26 <clock_stop>:
	const struct nrf_clock_control_config *config =
   1cc26:	6802      	ldr	r2, [r0, #0]
{
   1cc28:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
   1cc2a:	6896      	ldr	r6, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
   1cc2c:	6884      	ldr	r4, [r0, #8]
	__asm__ volatile(
   1cc2e:	f04f 0320 	mov.w	r3, #32
   1cc32:	f3ef 8511 	mrs	r5, BASEPRI
   1cc36:	f383 8811 	msr	BASEPRI, r3
   1cc3a:	f3bf 8f6f 	isb	sy
	data->ref--;
   1cc3e:	7a23      	ldrb	r3, [r4, #8]
   1cc40:	3b01      	subs	r3, #1
   1cc42:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
   1cc44:	2b00      	cmp	r3, #0
	data->ref--;
   1cc46:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
   1cc48:	d11c      	bne.n	1cc84 <clock_stop+0x5e>
	list->tail = NULL;
   1cc4a:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
   1cc4e:	6873      	ldr	r3, [r6, #4]
				config->stop_handler(dev) : true;
   1cc50:	b9a3      	cbnz	r3, 1cc7c <clock_stop+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cc52:	2201      	movs	r2, #1
   1cc54:	7af3      	ldrb	r3, [r6, #11]
   1cc56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cc5a:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1cc5e:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cc60:	2200      	movs	r2, #0
   1cc62:	8933      	ldrh	r3, [r6, #8]
   1cc64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cc68:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1cc6c:	601a      	str	r2, [r3, #0]
		data->started = false;
   1cc6e:	2000      	movs	r0, #0
   1cc70:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   1cc72:	f385 8811 	msr	BASEPRI, r5
   1cc76:	f3bf 8f6f 	isb	sy
}
   1cc7a:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
   1cc7c:	4798      	blx	r3
   1cc7e:	2800      	cmp	r0, #0
   1cc80:	d1e7      	bne.n	1cc52 <clock_stop+0x2c>
   1cc82:	e7f4      	b.n	1cc6e <clock_stop+0x48>
	} else if (data->ref < 0) {
   1cc84:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
   1cc88:	bfbc      	itt	lt
   1cc8a:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
   1cc8c:	f06f 0044 	mvnlt.w	r0, #68	; 0x44
   1cc90:	e7ef      	b.n	1cc72 <clock_stop+0x4c>

0001cc92 <clock_async_start>:
{
   1cc92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
   1cc94:	6803      	ldr	r3, [r0, #0]
{
   1cc96:	4606      	mov	r6, r0
   1cc98:	4614      	mov	r4, r2
	const struct nrf_clock_control_config *config =
   1cc9a:	689f      	ldr	r7, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
   1cc9c:	6885      	ldr	r5, [r0, #8]
	__asm__ volatile(
   1cc9e:	f04f 0320 	mov.w	r3, #32
   1cca2:	f3ef 8211 	mrs	r2, BASEPRI
   1cca6:	f383 8811 	msr	BASEPRI, r3
   1ccaa:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   1ccae:	7a2b      	ldrb	r3, [r5, #8]
   1ccb0:	3301      	adds	r3, #1
   1ccb2:	b25b      	sxtb	r3, r3
   1ccb4:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
   1ccb6:	f382 8811 	msr	BASEPRI, r2
   1ccba:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
   1ccbe:	7a6a      	ldrb	r2, [r5, #9]
   1ccc0:	b132      	cbz	r2, 1ccd0 <clock_async_start+0x3e>
		if (data) {
   1ccc2:	b90c      	cbnz	r4, 1ccc8 <clock_async_start+0x36>
	return 0;
   1ccc4:	2000      	movs	r0, #0
}
   1ccc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
   1ccc8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1cccc:	4798      	blx	r3
   1ccce:	e7f9      	b.n	1ccc4 <clock_async_start+0x32>
		if (ref == 1) {
   1ccd0:	2b01      	cmp	r3, #1
   1ccd2:	d108      	bne.n	1cce6 <clock_async_start+0x54>
			do_start =  (config->start_handler) ?
   1ccd4:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
   1ccd6:	b943      	cbnz	r3, 1ccea <clock_async_start+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ccd8:	2201      	movs	r2, #1
   1ccda:	7abb      	ldrb	r3, [r7, #10]
   1ccdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cce0:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1cce4:	601a      	str	r2, [r3, #0]
		if (data) {
   1cce6:	b94c      	cbnz	r4, 1ccfc <clock_async_start+0x6a>
   1cce8:	e7ec      	b.n	1ccc4 <clock_async_start+0x32>
					config->start_handler(dev) : true;
   1ccea:	4798      	blx	r3
   1ccec:	2800      	cmp	r0, #0
   1ccee:	d1f3      	bne.n	1ccd8 <clock_async_start+0x46>
			} else if (data) {
   1ccf0:	2c00      	cmp	r4, #0
   1ccf2:	d0e7      	beq.n	1ccc4 <clock_async_start+0x32>
				data->cb(dev, data->user_data);
   1ccf4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1ccf8:	4630      	mov	r0, r6
   1ccfa:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
   1ccfc:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
   1ccfe:	429c      	cmp	r4, r3
   1cd00:	d00d      	beq.n	1cd1e <clock_async_start+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1cd02:	b113      	cbz	r3, 1cd0a <clock_async_start+0x78>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1cd04:	681b      	ldr	r3, [r3, #0]
	} while (item);
   1cd06:	2b00      	cmp	r3, #0
   1cd08:	d1f9      	bne.n	1ccfe <clock_async_start+0x6c>
	parent->next = child;
   1cd0a:	2000      	movs	r0, #0
   1cd0c:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1cd0e:	686b      	ldr	r3, [r5, #4]
   1cd10:	b913      	cbnz	r3, 1cd18 <clock_async_start+0x86>
	list->head = node;
   1cd12:	e9c5 4400 	strd	r4, r4, [r5]
   1cd16:	e7d5      	b.n	1ccc4 <clock_async_start+0x32>
	parent->next = child;
   1cd18:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1cd1a:	606c      	str	r4, [r5, #4]
   1cd1c:	e7d3      	b.n	1ccc6 <clock_async_start+0x34>
				return -EALREADY;
   1cd1e:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1cd22:	e7d0      	b.n	1ccc6 <clock_async_start+0x34>

0001cd24 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   1cd24:	2200      	movs	r2, #0
   1cd26:	f7ff bfb4 	b.w	1cc92 <clock_async_start>

0001cd2a <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
   1cd2a:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
   1cd2c:	2000      	movs	r0, #0
	list->tail = NULL;
   1cd2e:	e9c3 0000 	strd	r0, r0, [r3]
}
   1cd32:	4770      	bx	lr

0001cd34 <clkstarted_handle>:
{
   1cd34:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
   1cd36:	6884      	ldr	r4, [r0, #8]
{
   1cd38:	4605      	mov	r5, r0
Z_GENLIST_IS_EMPTY(slist)
   1cd3a:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1cd3c:	b12b      	cbz	r3, 1cd4a <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1cd3e:	6861      	ldr	r1, [r4, #4]
   1cd40:	681a      	ldr	r2, [r3, #0]
   1cd42:	428b      	cmp	r3, r1
	list->head = node;
   1cd44:	6022      	str	r2, [r4, #0]
	list->tail = node;
   1cd46:	bf08      	it	eq
   1cd48:	6062      	streq	r2, [r4, #4]
	data->started = true;
   1cd4a:	2201      	movs	r2, #1
   1cd4c:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
   1cd4e:	b903      	cbnz	r3, 1cd52 <clkstarted_handle+0x1e>
}
   1cd50:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   1cd52:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   1cd56:	4628      	mov	r0, r5
   1cd58:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
   1cd5a:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1cd5c:	2b00      	cmp	r3, #0
   1cd5e:	d0f7      	beq.n	1cd50 <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1cd60:	6861      	ldr	r1, [r4, #4]
   1cd62:	681a      	ldr	r2, [r3, #0]
   1cd64:	428b      	cmp	r3, r1
	list->head = node;
   1cd66:	6022      	str	r2, [r4, #0]
	list->tail = node;
   1cd68:	bf08      	it	eq
   1cd6a:	6062      	streq	r2, [r4, #4]
   1cd6c:	e7ef      	b.n	1cd4e <clkstarted_handle+0x1a>

0001cd6e <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1cd6e:	4770      	bx	lr

0001cd70 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1cd70:	4770      	bx	lr

0001cd72 <z_irq_spurious>:
	z_arm_reserved();
   1cd72:	f7f2 bba7 	b.w	f4c4 <z_arm_bus_fault>

0001cd76 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1cd76:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   1cd78:	6800      	ldr	r0, [r0, #0]
   1cd7a:	f7f2 bbad 	b.w	f4d8 <z_arm_fatal_error>

0001cd7e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1cd7e:	b508      	push	{r3, lr}
	handler();
   1cd80:	f7f2 fc44 	bl	f60c <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   1cd84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   1cd88:	f7f2 ba76 	b.w	f278 <z_arm_exc_exit>

0001cd8c <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   1cd8c:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   1cd8e:	2100      	movs	r1, #0
   1cd90:	a801      	add	r0, sp, #4
   1cd92:	f7f3 f94f 	bl	10034 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   1cd96:	b003      	add	sp, #12
   1cd98:	f85d fb04 	ldr.w	pc, [sp], #4

0001cd9c <mpu_configure_region>:
{
   1cd9c:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   1cd9e:	684b      	ldr	r3, [r1, #4]
{
   1cda0:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   1cda2:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   1cda4:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1cda8:	890d      	ldrh	r5, [r1, #8]
   1cdaa:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   1cdac:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1cdae:	f024 041f 	bic.w	r4, r4, #31
   1cdb2:	3b01      	subs	r3, #1
   1cdb4:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   1cdb6:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   1cdba:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1cdbe:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   1cdc2:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
   1cdc4:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1cdc8:	9303      	str	r3, [sp, #12]
   1cdca:	4604      	mov	r4, r0
   1cdcc:	d905      	bls.n	1cdda <mpu_configure_region+0x3e>
   1cdce:	f7f2 ffb3 	bl	fd38 <region_allocate_and_init.part.0>
   1cdd2:	4604      	mov	r4, r0
}
   1cdd4:	4620      	mov	r0, r4
   1cdd6:	b005      	add	sp, #20
   1cdd8:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   1cdda:	4669      	mov	r1, sp
   1cddc:	f7f2 ff94 	bl	fd08 <region_init>
	return region_allocate_and_init(index,
   1cde0:	e7f8      	b.n	1cdd4 <mpu_configure_region+0x38>

0001cde2 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1cde2:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   1cde6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1cdea:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   1cdec:	bf08      	it	eq
   1cdee:	f06f 0015 	mvneq.w	r0, #21
   1cdf2:	4770      	bx	lr

0001cdf4 <atoi>:

#include <stdlib.h>
#include <ctype.h>

int atoi(const char *s)
{
   1cdf4:	b530      	push	{r4, r5, lr}
	int n = 0;
	int neg = 0;

	while (isspace(*s)) {
   1cdf6:	7802      	ldrb	r2, [r0, #0]
   1cdf8:	4603      	mov	r3, r0
   1cdfa:	2a20      	cmp	r2, #32
   1cdfc:	f100 0001 	add.w	r0, r0, #1
   1ce00:	d0f9      	beq.n	1cdf6 <atoi+0x2>
   1ce02:	f1a2 0109 	sub.w	r1, r2, #9
   1ce06:	2904      	cmp	r1, #4
   1ce08:	d9f5      	bls.n	1cdf6 <atoi+0x2>
		s++;
	}
	switch (*s) {
   1ce0a:	2a2b      	cmp	r2, #43	; 0x2b
   1ce0c:	d008      	beq.n	1ce20 <atoi+0x2c>
	case '-':
		neg = 1;
		s++;
   1ce0e:	2a2d      	cmp	r2, #45	; 0x2d
   1ce10:	bf0a      	itet	eq
   1ce12:	4603      	moveq	r3, r0
   1ce14:	2100      	movne	r1, #0
   1ce16:	2101      	moveq	r1, #1
   1ce18:	3b01      	subs	r3, #1
	int neg = 0;
   1ce1a:	2000      	movs	r0, #0
	case '+':
		s++;
	}
	/* Compute n as a negative number to avoid overflow on INT_MIN */
	while (isdigit(*s)) {
		n = 10*n - (*s++ - '0');
   1ce1c:	250a      	movs	r5, #10
   1ce1e:	e006      	b.n	1ce2e <atoi+0x3a>
		s++;
   1ce20:	4603      	mov	r3, r0
	int neg = 0;
   1ce22:	2100      	movs	r1, #0
   1ce24:	e7f8      	b.n	1ce18 <atoi+0x24>
		n = 10*n - (*s++ - '0');
   1ce26:	f1c2 0230 	rsb	r2, r2, #48	; 0x30
   1ce2a:	fb05 2000 	mla	r0, r5, r0, r2
	while (isdigit(*s)) {
   1ce2e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1ce32:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   1ce36:	2c09      	cmp	r4, #9
   1ce38:	d9f5      	bls.n	1ce26 <atoi+0x32>
	}
	return neg ? n : -n;
   1ce3a:	b901      	cbnz	r1, 1ce3e <atoi+0x4a>
   1ce3c:	4240      	negs	r0, r0
}
   1ce3e:	bd30      	pop	{r4, r5, pc}

0001ce40 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1ce40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ce44:	4684      	mov	ip, r0
   1ce46:	460f      	mov	r7, r1
	register const char *s = nptr;
   1ce48:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1ce4a:	462c      	mov	r4, r5
   1ce4c:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1ce50:	2b20      	cmp	r3, #32
   1ce52:	d036      	beq.n	1cec2 <strtol+0x82>
   1ce54:	f1a3 0109 	sub.w	r1, r3, #9
   1ce58:	2904      	cmp	r1, #4
   1ce5a:	d932      	bls.n	1cec2 <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
   1ce5c:	2b2d      	cmp	r3, #45	; 0x2d
   1ce5e:	d132      	bne.n	1cec6 <strtol+0x86>
		neg = 1;
   1ce60:	2101      	movs	r1, #1
		c = *s++;
   1ce62:	786b      	ldrb	r3, [r5, #1]
   1ce64:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1ce66:	2a00      	cmp	r2, #0
   1ce68:	d05c      	beq.n	1cf24 <strtol+0xe4>
   1ce6a:	2a10      	cmp	r2, #16
   1ce6c:	d109      	bne.n	1ce82 <strtol+0x42>
   1ce6e:	2b30      	cmp	r3, #48	; 0x30
   1ce70:	d107      	bne.n	1ce82 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1ce72:	7823      	ldrb	r3, [r4, #0]
   1ce74:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1ce78:	2b58      	cmp	r3, #88	; 0x58
   1ce7a:	d14e      	bne.n	1cf1a <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   1ce7c:	2210      	movs	r2, #16
		c = s[1];
   1ce7e:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1ce80:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1ce82:	2900      	cmp	r1, #0
   1ce84:	bf14      	ite	ne
   1ce86:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
   1ce8a:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1ce8e:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   1ce90:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
   1ce94:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1ce96:	fb02 891e 	mls	r9, r2, lr, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1ce9a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1ce9e:	2d09      	cmp	r5, #9
   1cea0:	d817      	bhi.n	1ced2 <strtol+0x92>
			c -= '0';
   1cea2:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1cea4:	429a      	cmp	r2, r3
   1cea6:	dd24      	ble.n	1cef2 <strtol+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1cea8:	1c75      	adds	r5, r6, #1
   1ceaa:	d007      	beq.n	1cebc <strtol+0x7c>
   1ceac:	4570      	cmp	r0, lr
   1ceae:	d81d      	bhi.n	1ceec <strtol+0xac>
   1ceb0:	d101      	bne.n	1ceb6 <strtol+0x76>
   1ceb2:	454b      	cmp	r3, r9
   1ceb4:	dc1a      	bgt.n	1ceec <strtol+0xac>
			any = -1;
		} else {
			any = 1;
   1ceb6:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1ceb8:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1cebc:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1cec0:	e7eb      	b.n	1ce9a <strtol+0x5a>
{
   1cec2:	4625      	mov	r5, r4
   1cec4:	e7c1      	b.n	1ce4a <strtol+0xa>
	} else if (c == '+') {
   1cec6:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1cec8:	bf04      	itt	eq
   1ceca:	1cac      	addeq	r4, r5, #2
   1cecc:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   1cece:	2100      	movs	r1, #0
   1ced0:	e7c9      	b.n	1ce66 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1ced2:	f043 0520 	orr.w	r5, r3, #32
   1ced6:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1ced8:	2d19      	cmp	r5, #25
   1ceda:	d80a      	bhi.n	1cef2 <strtol+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1cedc:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1cee0:	2d1a      	cmp	r5, #26
   1cee2:	bf34      	ite	cc
   1cee4:	2537      	movcc	r5, #55	; 0x37
   1cee6:	2557      	movcs	r5, #87	; 0x57
   1cee8:	1b5b      	subs	r3, r3, r5
   1ceea:	e7db      	b.n	1cea4 <strtol+0x64>
			any = -1;
   1ceec:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1cef0:	e7e4      	b.n	1cebc <strtol+0x7c>
		}
	}

	if (any < 0) {
   1cef2:	1c73      	adds	r3, r6, #1
   1cef4:	d107      	bne.n	1cf06 <strtol+0xc6>
   1cef6:	f7fd fdbd 	bl	1aa74 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1cefa:	2326      	movs	r3, #38	; 0x26
   1cefc:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1cefe:	4640      	mov	r0, r8
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1cf00:	b937      	cbnz	r7, 1cf10 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1cf02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1cf06:	b101      	cbz	r1, 1cf0a <strtol+0xca>
		acc = -acc;
   1cf08:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1cf0a:	2f00      	cmp	r7, #0
   1cf0c:	d0f9      	beq.n	1cf02 <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
   1cf0e:	b10e      	cbz	r6, 1cf14 <strtol+0xd4>
   1cf10:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   1cf14:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   1cf18:	e7f3      	b.n	1cf02 <strtol+0xc2>
	if (base == 0) {
   1cf1a:	2330      	movs	r3, #48	; 0x30
   1cf1c:	2a00      	cmp	r2, #0
   1cf1e:	d1b0      	bne.n	1ce82 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1cf20:	2208      	movs	r2, #8
   1cf22:	e7ae      	b.n	1ce82 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1cf24:	2b30      	cmp	r3, #48	; 0x30
   1cf26:	d0a4      	beq.n	1ce72 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1cf28:	220a      	movs	r2, #10
   1cf2a:	e7aa      	b.n	1ce82 <strtol+0x42>

0001cf2c <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   1cf2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cf30:	4684      	mov	ip, r0
   1cf32:	460f      	mov	r7, r1
	register const char *s = nptr;
   1cf34:	4605      	mov	r5, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   1cf36:	462c      	mov	r4, r5
   1cf38:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1cf3c:	2b20      	cmp	r3, #32
   1cf3e:	d035      	beq.n	1cfac <strtoul+0x80>
   1cf40:	f1a3 0109 	sub.w	r1, r3, #9
   1cf44:	2904      	cmp	r1, #4
   1cf46:	d931      	bls.n	1cfac <strtoul+0x80>
	} while (isspace(c));
	if (c == '-') {
   1cf48:	2b2d      	cmp	r3, #45	; 0x2d
   1cf4a:	d131      	bne.n	1cfb0 <strtoul+0x84>
		neg = 1;
   1cf4c:	f04f 0e01 	mov.w	lr, #1
		c = *s++;
   1cf50:	786b      	ldrb	r3, [r5, #1]
   1cf52:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1cf54:	2a00      	cmp	r2, #0
   1cf56:	d05e      	beq.n	1d016 <strtoul+0xea>
   1cf58:	2a10      	cmp	r2, #16
   1cf5a:	d109      	bne.n	1cf70 <strtoul+0x44>
   1cf5c:	2b30      	cmp	r3, #48	; 0x30
   1cf5e:	d107      	bne.n	1cf70 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1cf60:	7823      	ldrb	r3, [r4, #0]
   1cf62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1cf66:	2b58      	cmp	r3, #88	; 0x58
   1cf68:	d150      	bne.n	1d00c <strtoul+0xe0>
		c = s[1];
		s += 2;
		base = 16;
   1cf6a:	2210      	movs	r2, #16
		c = s[1];
   1cf6c:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1cf6e:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   1cf70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cf74:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1cf78:	2600      	movs	r6, #0
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   1cf7a:	fb02 f801 	mul.w	r8, r2, r1
	for (acc = 0, any = 0;; c = *s++) {
   1cf7e:	4630      	mov	r0, r6
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   1cf80:	ea6f 0808 	mvn.w	r8, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1cf84:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1cf88:	2d09      	cmp	r5, #9
   1cf8a:	d818      	bhi.n	1cfbe <strtoul+0x92>
			c -= '0';
   1cf8c:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1cf8e:	429a      	cmp	r2, r3
   1cf90:	dd25      	ble.n	1cfde <strtoul+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1cf92:	2e00      	cmp	r6, #0
   1cf94:	db20      	blt.n	1cfd8 <strtoul+0xac>
   1cf96:	4288      	cmp	r0, r1
   1cf98:	d81e      	bhi.n	1cfd8 <strtoul+0xac>
   1cf9a:	d101      	bne.n	1cfa0 <strtoul+0x74>
   1cf9c:	4543      	cmp	r3, r8
   1cf9e:	dc1b      	bgt.n	1cfd8 <strtoul+0xac>
			any = -1;
		} else {
			any = 1;
   1cfa0:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1cfa2:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1cfa6:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1cfaa:	e7eb      	b.n	1cf84 <strtoul+0x58>
{
   1cfac:	4625      	mov	r5, r4
   1cfae:	e7c2      	b.n	1cf36 <strtoul+0xa>
	} else if (c == '+') {
   1cfb0:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1cfb2:	bf04      	itt	eq
   1cfb4:	1cac      	addeq	r4, r5, #2
   1cfb6:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   1cfb8:	f04f 0e00 	mov.w	lr, #0
   1cfbc:	e7ca      	b.n	1cf54 <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1cfbe:	f043 0520 	orr.w	r5, r3, #32
   1cfc2:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1cfc4:	2d19      	cmp	r5, #25
   1cfc6:	d80a      	bhi.n	1cfde <strtoul+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1cfc8:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1cfcc:	2d1a      	cmp	r5, #26
   1cfce:	bf34      	ite	cc
   1cfd0:	2537      	movcc	r5, #55	; 0x37
   1cfd2:	2557      	movcs	r5, #87	; 0x57
   1cfd4:	1b5b      	subs	r3, r3, r5
   1cfd6:	e7da      	b.n	1cf8e <strtoul+0x62>
			any = -1;
   1cfd8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1cfdc:	e7e3      	b.n	1cfa6 <strtoul+0x7a>
		}
	}
	if (any < 0) {
   1cfde:	2e00      	cmp	r6, #0
   1cfe0:	da08      	bge.n	1cff4 <strtoul+0xc8>
   1cfe2:	f7fd fd47 	bl	1aa74 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   1cfe6:	2326      	movs	r3, #38	; 0x26
   1cfe8:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   1cfea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   1cfee:	b947      	cbnz	r7, 1d002 <strtoul+0xd6>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1cff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   1cff4:	f1be 0f00 	cmp.w	lr, #0
   1cff8:	d000      	beq.n	1cffc <strtoul+0xd0>
		acc = -acc;
   1cffa:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1cffc:	2f00      	cmp	r7, #0
   1cffe:	d0f7      	beq.n	1cff0 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   1d000:	b10e      	cbz	r6, 1d006 <strtoul+0xda>
   1d002:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   1d006:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   1d00a:	e7f1      	b.n	1cff0 <strtoul+0xc4>
	if (base == 0) {
   1d00c:	2330      	movs	r3, #48	; 0x30
   1d00e:	2a00      	cmp	r2, #0
   1d010:	d1ae      	bne.n	1cf70 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   1d012:	2208      	movs	r2, #8
   1d014:	e7ac      	b.n	1cf70 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   1d016:	2b30      	cmp	r3, #48	; 0x30
   1d018:	d0a2      	beq.n	1cf60 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   1d01a:	220a      	movs	r2, #10
   1d01c:	e7a8      	b.n	1cf70 <strtoul+0x44>

0001d01e <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   1d01e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   1d022:	780f      	ldrb	r7, [r1, #0]
{
   1d024:	4605      	mov	r5, r0
	if (c != 0) {
   1d026:	b187      	cbz	r7, 1d04a <strstr+0x2c>
	c = *find++;
   1d028:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   1d02a:	4620      	mov	r0, r4
   1d02c:	f000 f84c 	bl	1d0c8 <strlen>
   1d030:	4680      	mov	r8, r0
		do {
			do {
				sc = *s++;
   1d032:	462e      	mov	r6, r5
   1d034:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   1d038:	b163      	cbz	r3, 1d054 <strstr+0x36>
					return NULL;
				}
			} while (sc != c);
   1d03a:	429f      	cmp	r7, r3
   1d03c:	d108      	bne.n	1d050 <strstr+0x32>
		} while (strncmp(s, find, len) != 0);
   1d03e:	4642      	mov	r2, r8
   1d040:	4621      	mov	r1, r4
   1d042:	4630      	mov	r0, r6
   1d044:	f000 f853 	bl	1d0ee <strncmp>
   1d048:	b910      	cbnz	r0, 1d050 <strstr+0x32>
	s--;
	}
	return (char *)s;
}
   1d04a:	4628      	mov	r0, r5
   1d04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1d050:	4635      	mov	r5, r6
   1d052:	e7ee      	b.n	1d032 <strstr+0x14>
					return NULL;
   1d054:	461d      	mov	r5, r3
   1d056:	e7f8      	b.n	1d04a <strstr+0x2c>

0001d058 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1d058:	4603      	mov	r3, r0
   1d05a:	3901      	subs	r1, #1
   1d05c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1d060:	b90a      	cbnz	r2, 1d066 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1d062:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1d064:	4770      	bx	lr
		*d = *s;
   1d066:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1d06a:	e7f7      	b.n	1d05c <strcpy+0x4>

0001d06c <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1d06c:	b570      	push	{r4, r5, r6, lr}
   1d06e:	4605      	mov	r5, r0
   1d070:	3901      	subs	r1, #1
   1d072:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1d074:	b142      	cbz	r2, 1d088 <strncpy+0x1c>
   1d076:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1d07a:	1e56      	subs	r6, r2, #1
   1d07c:	b92b      	cbnz	r3, 1d08a <strncpy+0x1e>
   1d07e:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1d080:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   1d084:	42a2      	cmp	r2, r4
   1d086:	d1fb      	bne.n	1d080 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   1d088:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   1d08a:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   1d08e:	4632      	mov	r2, r6
   1d090:	e7ef      	b.n	1d072 <strncpy+0x6>

0001d092 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   1d092:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   1d094:	7802      	ldrb	r2, [r0, #0]
   1d096:	4603      	mov	r3, r0
   1d098:	428a      	cmp	r2, r1
   1d09a:	f100 0001 	add.w	r0, r0, #1
   1d09e:	d004      	beq.n	1d0aa <strchr+0x18>
   1d0a0:	2a00      	cmp	r2, #0
   1d0a2:	d1f7      	bne.n	1d094 <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   1d0a4:	2900      	cmp	r1, #0
   1d0a6:	bf18      	it	ne
   1d0a8:	2300      	movne	r3, #0
}
   1d0aa:	4618      	mov	r0, r3
   1d0ac:	4770      	bx	lr

0001d0ae <strrchr>:
 * @return pointer to last instance of found byte, or NULL if not found
 */

char *strrchr(const char *s, int c)
{
	char *match = NULL;
   1d0ae:	2300      	movs	r3, #0
{
   1d0b0:	b510      	push	{r4, lr}

	do {
		if (*s == (char)c) {
   1d0b2:	b2c9      	uxtb	r1, r1
   1d0b4:	4604      	mov	r4, r0
   1d0b6:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d0ba:	428a      	cmp	r2, r1
   1d0bc:	bf08      	it	eq
   1d0be:	4623      	moveq	r3, r4
			match = (char *)s;
		}
	} while (*s++);
   1d0c0:	2a00      	cmp	r2, #0
   1d0c2:	d1f7      	bne.n	1d0b4 <strrchr+0x6>

	return match;
}
   1d0c4:	4618      	mov	r0, r3
   1d0c6:	bd10      	pop	{r4, pc}

0001d0c8 <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
   1d0c8:	2300      	movs	r3, #0

	while (*s != '\0') {
   1d0ca:	5cc2      	ldrb	r2, [r0, r3]
   1d0cc:	b90a      	cbnz	r2, 1d0d2 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1d0ce:	4618      	mov	r0, r3
   1d0d0:	4770      	bx	lr
		n++;
   1d0d2:	3301      	adds	r3, #1
   1d0d4:	e7f9      	b.n	1d0ca <strlen+0x2>

0001d0d6 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1d0d6:	3801      	subs	r0, #1
   1d0d8:	3901      	subs	r1, #1
   1d0da:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1d0de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1d0e2:	4293      	cmp	r3, r2
   1d0e4:	d101      	bne.n	1d0ea <strcmp+0x14>
   1d0e6:	2b00      	cmp	r3, #0
   1d0e8:	d1f7      	bne.n	1d0da <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1d0ea:	1a98      	subs	r0, r3, r2
   1d0ec:	4770      	bx	lr

0001d0ee <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1d0ee:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1d0f0:	2400      	movs	r4, #0
   1d0f2:	42a2      	cmp	r2, r4
   1d0f4:	d008      	beq.n	1d108 <strncmp+0x1a>
   1d0f6:	5d03      	ldrb	r3, [r0, r4]
   1d0f8:	5d0d      	ldrb	r5, [r1, r4]
   1d0fa:	42ab      	cmp	r3, r5
   1d0fc:	d102      	bne.n	1d104 <strncmp+0x16>
   1d0fe:	3401      	adds	r4, #1
   1d100:	2b00      	cmp	r3, #0
   1d102:	d1f6      	bne.n	1d0f2 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1d104:	1b58      	subs	r0, r3, r5
   1d106:	e000      	b.n	1d10a <strncmp+0x1c>
   1d108:	2000      	movs	r0, #0
}
   1d10a:	bd30      	pop	{r4, r5, pc}

0001d10c <strcat>:

char *strcat(char *_MLIBC_RESTRICT dest, const char *_MLIBC_RESTRICT src)
{
   1d10c:	b510      	push	{r4, lr}
   1d10e:	4604      	mov	r4, r0
	strcpy(dest + strlen(dest), src);
   1d110:	f7ff ffda 	bl	1d0c8 <strlen>
   1d114:	4420      	add	r0, r4
   1d116:	f7ff ff9f 	bl	1d058 <strcpy>
	return dest;
}
   1d11a:	4620      	mov	r0, r4
   1d11c:	bd10      	pop	{r4, pc}

0001d11e <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1d11e:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1d120:	b15a      	cbz	r2, 1d13a <memcmp+0x1c>
   1d122:	3901      	subs	r1, #1
   1d124:	1884      	adds	r4, r0, r2
   1d126:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d12a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1d12e:	42a0      	cmp	r0, r4
   1d130:	d001      	beq.n	1d136 <memcmp+0x18>
   1d132:	429a      	cmp	r2, r3
   1d134:	d0f7      	beq.n	1d126 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1d136:	1ad0      	subs	r0, r2, r3
}
   1d138:	bd10      	pop	{r4, pc}
		return 0;
   1d13a:	4610      	mov	r0, r2
   1d13c:	e7fc      	b.n	1d138 <memcmp+0x1a>

0001d13e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1d13e:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1d140:	ea81 0400 	eor.w	r4, r1, r0
   1d144:	07a5      	lsls	r5, r4, #30
   1d146:	4603      	mov	r3, r0
   1d148:	d00b      	beq.n	1d162 <memcpy+0x24>
   1d14a:	3b01      	subs	r3, #1
   1d14c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1d14e:	4291      	cmp	r1, r2
   1d150:	d11a      	bne.n	1d188 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1d152:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1d154:	2a00      	cmp	r2, #0
   1d156:	d0fc      	beq.n	1d152 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1d158:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1d15c:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1d15e:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1d162:	079c      	lsls	r4, r3, #30
   1d164:	d1f6      	bne.n	1d154 <memcpy+0x16>
   1d166:	0895      	lsrs	r5, r2, #2
   1d168:	00ac      	lsls	r4, r5, #2
   1d16a:	1f1e      	subs	r6, r3, #4
   1d16c:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1d16e:	42b9      	cmp	r1, r7
   1d170:	d105      	bne.n	1d17e <memcpy+0x40>
   1d172:	f06f 0603 	mvn.w	r6, #3
   1d176:	4423      	add	r3, r4
   1d178:	fb06 2205 	mla	r2, r6, r5, r2
   1d17c:	e7e5      	b.n	1d14a <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1d17e:	f851 cb04 	ldr.w	ip, [r1], #4
   1d182:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
   1d186:	e7f2      	b.n	1d16e <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
   1d188:	f811 4b01 	ldrb.w	r4, [r1], #1
   1d18c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1d190:	e7dd      	b.n	1d14e <memcpy+0x10>

0001d192 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1d192:	4603      	mov	r3, r0
{
   1d194:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   1d196:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1d198:	079c      	lsls	r4, r3, #30
   1d19a:	d110      	bne.n	1d1be <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1d19c:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1d1a0:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1d1a4:	0894      	lsrs	r4, r2, #2
   1d1a6:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   1d1aa:	42b3      	cmp	r3, r6
   1d1ac:	d10d      	bne.n	1d1ca <memset+0x38>
   1d1ae:	f06f 0503 	mvn.w	r5, #3
   1d1b2:	fb05 2404 	mla	r4, r5, r4, r2
   1d1b6:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1d1b8:	42a3      	cmp	r3, r4
   1d1ba:	d109      	bne.n	1d1d0 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1d1bc:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1d1be:	2a00      	cmp	r2, #0
   1d1c0:	d0fc      	beq.n	1d1bc <memset+0x2a>
		*(d_byte++) = c_byte;
   1d1c2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1d1c6:	3a01      	subs	r2, #1
   1d1c8:	e7e6      	b.n	1d198 <memset+0x6>
		*(d_word++) = c_word;
   1d1ca:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1d1ce:	e7ec      	b.n	1d1aa <memset+0x18>
		*(d_byte++) = c_byte;
   1d1d0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1d1d4:	e7f0      	b.n	1d1b8 <memset+0x26>

0001d1d6 <_to_x>:
{
   1d1d6:	4603      	mov	r3, r0
   1d1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
		unsigned int d = n % base;
   1d1da:	fbb1 f7f2 	udiv	r7, r1, r2
   1d1de:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1d1e2:	2d09      	cmp	r5, #9
   1d1e4:	bf8c      	ite	hi
   1d1e6:	2627      	movhi	r6, #39	; 0x27
   1d1e8:	2600      	movls	r6, #0
   1d1ea:	461c      	mov	r4, r3
   1d1ec:	3530      	adds	r5, #48	; 0x30
   1d1ee:	4435      	add	r5, r6
	} while (n);
   1d1f0:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1d1f2:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
   1d1f6:	d206      	bcs.n	1d206 <_to_x+0x30>
	*buf = 0;
   1d1f8:	2200      	movs	r2, #0
   1d1fa:	7022      	strb	r2, [r4, #0]
	len = buf - start;
   1d1fc:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
   1d1fe:	4283      	cmp	r3, r0
   1d200:	d804      	bhi.n	1d20c <_to_x+0x36>
}
   1d202:	4620      	mov	r0, r4
   1d204:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
   1d206:	4639      	mov	r1, r7
   1d208:	4623      	mov	r3, r4
   1d20a:	e7e6      	b.n	1d1da <_to_x+0x4>
		char tmp = *buf;
   1d20c:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
   1d20e:	7801      	ldrb	r1, [r0, #0]
   1d210:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
   1d214:	f800 2b01 	strb.w	r2, [r0], #1
   1d218:	e7f1      	b.n	1d1fe <_to_x+0x28>

0001d21a <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
   1d21a:	2100      	movs	r1, #0
{
   1d21c:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   1d21e:	e9d0 6500 	ldrd	r6, r5, [r0]
   1d222:	0872      	lsrs	r2, r6, #1
   1d224:	f006 0301 	and.w	r3, r6, #1
   1d228:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   1d22c:	189b      	adds	r3, r3, r2
   1d22e:	ea4f 0455 	mov.w	r4, r5, lsr #1
   1d232:	eb44 0101 	adc.w	r1, r4, r1
   1d236:	e9c0 3100 	strd	r3, r1, [r0]
}
   1d23a:	bd70      	pop	{r4, r5, r6, pc}

0001d23c <_ldiv5>:
{
   1d23c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint64_t rem = *v, quot = 0U, q;
   1d240:	e9d0 3200 	ldrd	r3, r2, [r0]
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d244:	2705      	movs	r7, #5
	rem += 2U;
   1d246:	3302      	adds	r3, #2
   1d248:	f142 0200 	adc.w	r2, r2, #0
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d24c:	fbb2 fef7 	udiv	lr, r2, r7
   1d250:	f04f 0c00 	mov.w	ip, #0
		rem -= q * 5U;
   1d254:	fb07 f10e 	mul.w	r1, r7, lr
   1d258:	ebb3 060c 	subs.w	r6, r3, ip
   1d25c:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
   1d260:	08f2      	lsrs	r2, r6, #3
   1d262:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d266:	fbb2 f1f7 	udiv	r1, r2, r7
   1d26a:	00ca      	lsls	r2, r1, #3
		quot += q;
   1d26c:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d270:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
   1d274:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
   1d278:	fba2 2307 	umull	r2, r3, r2, r7
   1d27c:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d27e:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
   1d282:	eb18 0403 	adds.w	r4, r8, r3
   1d286:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
   1d28a:	e9c0 4500 	strd	r4, r5, [r0]
}
   1d28e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001d292 <_get_digit>:
	if (*digit_count > 0) {
   1d292:	680b      	ldr	r3, [r1, #0]
{
   1d294:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   1d296:	2b00      	cmp	r3, #0
   1d298:	dd10      	ble.n	1d2bc <_get_digit+0x2a>
		*digit_count -= 1;
   1d29a:	3b01      	subs	r3, #1
   1d29c:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   1d29e:	210a      	movs	r1, #10
   1d2a0:	6802      	ldr	r2, [r0, #0]
   1d2a2:	6844      	ldr	r4, [r0, #4]
   1d2a4:	fba2 5601 	umull	r5, r6, r2, r1
   1d2a8:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   1d2ac:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   1d2b0:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   1d2b4:	0f31      	lsrs	r1, r6, #28
   1d2b6:	3130      	adds	r1, #48	; 0x30
}
   1d2b8:	4608      	mov	r0, r1
   1d2ba:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   1d2bc:	2130      	movs	r1, #48	; 0x30
   1d2be:	e7fb      	b.n	1d2b8 <_get_digit+0x26>

0001d2c0 <_stdout_hook_default>:
}
   1d2c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d2c4:	4770      	bx	lr

0001d2c6 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   1d2c6:	684b      	ldr	r3, [r1, #4]
   1d2c8:	2b01      	cmp	r3, #1
   1d2ca:	dd07      	ble.n	1d2dc <sprintf_out+0x16>
		*(p->ptr) = c;
   1d2cc:	680b      	ldr	r3, [r1, #0]
   1d2ce:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   1d2d0:	680b      	ldr	r3, [r1, #0]
   1d2d2:	3301      	adds	r3, #1
   1d2d4:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   1d2d6:	684b      	ldr	r3, [r1, #4]
   1d2d8:	3b01      	subs	r3, #1
   1d2da:	604b      	str	r3, [r1, #4]
}
   1d2dc:	2000      	movs	r0, #0
   1d2de:	4770      	bx	lr

0001d2e0 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   1d2e0:	b508      	push	{r3, lr}
	net_if_init();
   1d2e2:	f7f3 fbc1 	bl	10a68 <net_if_init>
	net_if_post_init();
   1d2e6:	f7f3 fbd3 	bl	10a90 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   1d2ea:	2000      	movs	r0, #0
   1d2ec:	bd08      	pop	{r3, pc}

0001d2ee <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d2ee:	e8d0 0faf 	lda	r0, [r0]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1d2f2:	4108      	asrs	r0, r1
}
   1d2f4:	f000 0001 	and.w	r0, r0, #1
   1d2f8:	4770      	bx	lr

0001d2fa <l2_flags_get>:
	if (!iface) {
   1d2fa:	b128      	cbz	r0, 1d308 <l2_flags_get+0xe>
	return iface->if_dev->l2;
   1d2fc:	6803      	ldr	r3, [r0, #0]
   1d2fe:	685b      	ldr	r3, [r3, #4]
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   1d300:	b113      	cbz	r3, 1d308 <l2_flags_get+0xe>
   1d302:	68db      	ldr	r3, [r3, #12]
   1d304:	b103      	cbz	r3, 1d308 <l2_flags_get+0xe>
		flags = net_if_l2(iface)->get_flags(iface);
   1d306:	4718      	bx	r3
}
   1d308:	2000      	movs	r0, #0
   1d30a:	4770      	bx	lr

0001d30c <net_if_up>:
{
   1d30c:	b510      	push	{r4, lr}
   1d30e:	4604      	mov	r4, r0
	return atomic_test_bit(iface->if_dev->flags, value);
   1d310:	6800      	ldr	r0, [r0, #0]
   1d312:	2100      	movs	r1, #0
   1d314:	300c      	adds	r0, #12
   1d316:	f7ff ffea 	bl	1d2ee <atomic_test_bit>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1d31a:	b9d8      	cbnz	r0, 1d354 <net_if_up+0x48>
	     net_if_is_socket_offloaded(iface))) {
   1d31c:	6823      	ldr	r3, [r4, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1d31e:	7e9a      	ldrb	r2, [r3, #26]
   1d320:	b14a      	cbz	r2, 1d336 <net_if_up+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d322:	330c      	adds	r3, #12
   1d324:	e8d3 2fef 	ldaex	r2, [r3]
   1d328:	f042 0201 	orr.w	r2, r2, #1
   1d32c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1d330:	2900      	cmp	r1, #0
   1d332:	d1f7      	bne.n	1d324 <net_if_up+0x18>
}
   1d334:	bd10      	pop	{r4, pc}
	return iface->if_dev->l2;
   1d336:	685b      	ldr	r3, [r3, #4]
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1d338:	b973      	cbnz	r3, 1d358 <net_if_up+0x4c>
   1d33a:	6823      	ldr	r3, [r4, #0]
   1d33c:	330c      	adds	r3, #12
   1d33e:	e8d3 2fef 	ldaex	r2, [r3]
   1d342:	f042 0201 	orr.w	r2, r2, #1
   1d346:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1d34a:	2900      	cmp	r1, #0
   1d34c:	d1f7      	bne.n	1d33e <net_if_up+0x32>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1d34e:	4620      	mov	r0, r4
   1d350:	f7ff ffd3 	bl	1d2fa <l2_flags_get>
		return 0;
   1d354:	2000      	movs	r0, #0
   1d356:	e7ed      	b.n	1d334 <net_if_up+0x28>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1d358:	689b      	ldr	r3, [r3, #8]
   1d35a:	2b00      	cmp	r3, #0
   1d35c:	d0ed      	beq.n	1d33a <net_if_up+0x2e>
	status = net_if_l2(iface)->enable(iface, true);
   1d35e:	2101      	movs	r1, #1
   1d360:	4620      	mov	r0, r4
   1d362:	4798      	blx	r3
	if (status < 0) {
   1d364:	2800      	cmp	r0, #0
   1d366:	dae8      	bge.n	1d33a <net_if_up+0x2e>
   1d368:	e7e4      	b.n	1d334 <net_if_up+0x28>

0001d36a <net_byte_to_hex>:
{
   1d36a:	b570      	push	{r4, r5, r6, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1d36c:	090e      	lsrs	r6, r1, #4
		if (i == 0 && !pad && !val) {
   1d36e:	b1b3      	cbz	r3, 1d39e <net_byte_to_hex+0x34>
		if (val < 10) {
   1d370:	2e09      	cmp	r6, #9
			*ptr++ = (char) (val - 10 + base);
   1d372:	b274      	sxtb	r4, r6
   1d374:	bf86      	itte	hi
   1d376:	f1a2 030a 	subhi.w	r3, r2, #10
   1d37a:	18e4      	addhi	r4, r4, r3
			*ptr++ = (char) (val + '0');
   1d37c:	3430      	addls	r4, #48	; 0x30
   1d37e:	1c45      	adds	r5, r0, #1
   1d380:	7004      	strb	r4, [r0, #0]
   1d382:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   1d386:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   1d388:	b24b      	sxtb	r3, r1
   1d38a:	bf83      	ittte	hi
   1d38c:	3a0a      	subhi	r2, #10
   1d38e:	189b      	addhi	r3, r3, r2
   1d390:	b2db      	uxtbhi	r3, r3
			*ptr++ = (char) (val + '0');
   1d392:	3330      	addls	r3, #48	; 0x30
   1d394:	702b      	strb	r3, [r5, #0]
	*ptr = '\0';
   1d396:	2300      	movs	r3, #0
   1d398:	706b      	strb	r3, [r5, #1]
   1d39a:	1c68      	adds	r0, r5, #1
}
   1d39c:	bd70      	pop	{r4, r5, r6, pc}
		if (i == 0 && !pad && !val) {
   1d39e:	2e00      	cmp	r6, #0
   1d3a0:	d1e6      	bne.n	1d370 <net_byte_to_hex+0x6>
   1d3a2:	4605      	mov	r5, r0
   1d3a4:	e7ed      	b.n	1d382 <net_byte_to_hex+0x18>

0001d3a6 <z_impl_net_addr_pton>:
#endif /* CONFIG_USERSPACE */

int z_impl_net_addr_pton(sa_family_t family, const char *src,
			 void *dst)
{
	if (family == AF_INET) {
   1d3a6:	2801      	cmp	r0, #1
{
   1d3a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d3ac:	460c      	mov	r4, r1
   1d3ae:	4616      	mov	r6, r2
	if (family == AF_INET) {
   1d3b0:	d128      	bne.n	1d404 <z_impl_net_addr_pton+0x5e>
		struct in_addr *addr = (struct in_addr *)dst;
		size_t i, len;

		len = strlen(src);
   1d3b2:	4608      	mov	r0, r1
   1d3b4:	f7ff fe88 	bl	1d0c8 <strlen>
		for (i = 0; i < len; i++) {
   1d3b8:	4623      	mov	r3, r4
   1d3ba:	4420      	add	r0, r4
   1d3bc:	4298      	cmp	r0, r3
   1d3be:	d114      	bne.n	1d3ea <z_impl_net_addr_pton+0x44>
			    src[i] != '.') {
				return -EINVAL;
			}
		}

		(void)memset(addr, 0, sizeof(struct in_addr));
   1d3c0:	4630      	mov	r0, r6
   1d3c2:	2204      	movs	r2, #4
   1d3c4:	2100      	movs	r1, #0
   1d3c6:	f7ff fee4 	bl	1d192 <memset>

		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d3ca:	1e75      	subs	r5, r6, #1
   1d3cc:	3603      	adds	r6, #3
			char *endptr;

			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1d3ce:	4620      	mov	r0, r4
   1d3d0:	220a      	movs	r2, #10
   1d3d2:	a901      	add	r1, sp, #4
   1d3d4:	f7ff fd34 	bl	1ce40 <strtol>

			src = ++endptr;
   1d3d8:	9c01      	ldr	r4, [sp, #4]
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1d3da:	f805 0f01 	strb.w	r0, [r5, #1]!
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d3de:	42b5      	cmp	r5, r6
			src = ++endptr;
   1d3e0:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d3e4:	d1f3      	bne.n	1d3ce <z_impl_net_addr_pton+0x28>
		}
	} else {
		return -EINVAL;
	}

	return 0;
   1d3e6:	2000      	movs	r0, #0
   1d3e8:	e009      	b.n	1d3fe <z_impl_net_addr_pton+0x58>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1d3ea:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d3ee:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1d3f2:	2909      	cmp	r1, #9
   1d3f4:	d9e2      	bls.n	1d3bc <z_impl_net_addr_pton+0x16>
   1d3f6:	2a2e      	cmp	r2, #46	; 0x2e
   1d3f8:	d0e0      	beq.n	1d3bc <z_impl_net_addr_pton+0x16>
				return -EINVAL;
   1d3fa:	f06f 0015 	mvn.w	r0, #21
}
   1d3fe:	b003      	add	sp, #12
   1d400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (family == AF_INET6) {
   1d404:	2802      	cmp	r0, #2
   1d406:	d1f8      	bne.n	1d3fa <z_impl_net_addr_pton+0x54>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1d408:	212e      	movs	r1, #46	; 0x2e
   1d40a:	4620      	mov	r0, r4
   1d40c:	f7ff fe41 	bl	1d092 <strchr>
		if (*src == ':') {
   1d410:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1d412:	2800      	cmp	r0, #0
   1d414:	bf14      	ite	ne
   1d416:	2706      	movne	r7, #6
   1d418:	2708      	moveq	r7, #8
		if (*src == ':') {
   1d41a:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   1d41c:	bf08      	it	eq
   1d41e:	3401      	addeq	r4, #1
		len = strlen(src);
   1d420:	4620      	mov	r0, r4
   1d422:	f7ff fe51 	bl	1d0c8 <strlen>
		for (i = 0; i < len; i++) {
   1d426:	2300      	movs	r3, #0
   1d428:	4283      	cmp	r3, r0
   1d42a:	db21      	blt.n	1d470 <z_impl_net_addr_pton+0xca>
		for (i = 0; i < expected_groups; i++) {
   1d42c:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1d42e:	46a9      	mov	r9, r5
			if (!src || *src == '\0') {
   1d430:	2c00      	cmp	r4, #0
   1d432:	d0e2      	beq.n	1d3fa <z_impl_net_addr_pton+0x54>
   1d434:	7823      	ldrb	r3, [r4, #0]
   1d436:	2b00      	cmp	r3, #0
   1d438:	d0df      	beq.n	1d3fa <z_impl_net_addr_pton+0x54>
			if (*src != ':') {
   1d43a:	2b3a      	cmp	r3, #58	; 0x3a
   1d43c:	d02d      	beq.n	1d49a <z_impl_net_addr_pton+0xf4>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1d43e:	2210      	movs	r2, #16
   1d440:	2100      	movs	r1, #0
   1d442:	4620      	mov	r0, r4
   1d444:	f7ff fcfc 	bl	1ce40 <strtol>
   1d448:	2210      	movs	r2, #16
   1d44a:	4680      	mov	r8, r0
   1d44c:	2100      	movs	r1, #0
   1d44e:	4620      	mov	r0, r4
   1d450:	f7ff fcf6 	bl	1ce40 <strtol>
   1d454:	f3c8 2807 	ubfx	r8, r8, #8, #8
   1d458:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
   1d45c:	f826 8015 	strh.w	r8, [r6, r5, lsl #1]
				src = strchr(src, ':');
   1d460:	213a      	movs	r1, #58	; 0x3a
   1d462:	4620      	mov	r0, r4
   1d464:	f7ff fe15 	bl	1d092 <strchr>
				if (src) {
   1d468:	4604      	mov	r4, r0
   1d46a:	b178      	cbz	r0, 1d48c <z_impl_net_addr_pton+0xe6>
			src++;
   1d46c:	3401      	adds	r4, #1
   1d46e:	e010      	b.n	1d492 <z_impl_net_addr_pton+0xec>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1d470:	5ce2      	ldrb	r2, [r4, r3]
   1d472:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1d476:	290a      	cmp	r1, #10
   1d478:	d906      	bls.n	1d488 <z_impl_net_addr_pton+0xe2>
   1d47a:	f022 0120 	bic.w	r1, r2, #32
   1d47e:	3941      	subs	r1, #65	; 0x41
   1d480:	2905      	cmp	r1, #5
   1d482:	d901      	bls.n	1d488 <z_impl_net_addr_pton+0xe2>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1d484:	2a2e      	cmp	r2, #46	; 0x2e
   1d486:	d1b8      	bne.n	1d3fa <z_impl_net_addr_pton+0x54>
		for (i = 0; i < len; i++) {
   1d488:	3301      	adds	r3, #1
   1d48a:	e7cd      	b.n	1d428 <z_impl_net_addr_pton+0x82>
					if (i < expected_groups - 1) {
   1d48c:	1e7b      	subs	r3, r7, #1
   1d48e:	42ab      	cmp	r3, r5
   1d490:	dcb3      	bgt.n	1d3fa <z_impl_net_addr_pton+0x54>
		for (i = 0; i < expected_groups; i++) {
   1d492:	3501      	adds	r5, #1
   1d494:	42af      	cmp	r7, r5
   1d496:	dccb      	bgt.n	1d430 <z_impl_net_addr_pton+0x8a>
   1d498:	e013      	b.n	1d4c2 <z_impl_net_addr_pton+0x11c>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   1d49a:	eb06 0345 	add.w	r3, r6, r5, lsl #1
   1d49e:	f806 9015 	strb.w	r9, [r6, r5, lsl #1]
   1d4a2:	f883 9001 	strb.w	r9, [r3, #1]
			for (; i < expected_groups; i++) {
   1d4a6:	3501      	adds	r5, #1
   1d4a8:	42af      	cmp	r7, r5
   1d4aa:	dcf6      	bgt.n	1d49a <z_impl_net_addr_pton+0xf4>
			tmp = strrchr(src, ':');
   1d4ac:	213a      	movs	r1, #58	; 0x3a
   1d4ae:	4620      	mov	r0, r4
   1d4b0:	f7ff fdfd 	bl	1d0ae <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1d4b4:	42a0      	cmp	r0, r4
   1d4b6:	d11f      	bne.n	1d4f8 <z_impl_net_addr_pton+0x152>
   1d4b8:	2f06      	cmp	r7, #6
   1d4ba:	d001      	beq.n	1d4c0 <z_impl_net_addr_pton+0x11a>
   1d4bc:	7863      	ldrb	r3, [r4, #1]
   1d4be:	bb63      	cbnz	r3, 1d51a <z_impl_net_addr_pton+0x174>
				src++;
   1d4c0:	3401      	adds	r4, #1
		if (expected_groups == 6) {
   1d4c2:	2f06      	cmp	r7, #6
   1d4c4:	d18f      	bne.n	1d3e6 <z_impl_net_addr_pton+0x40>
			for (i = 0; i < 4; i++) {
   1d4c6:	2500      	movs	r5, #0
   1d4c8:	360c      	adds	r6, #12
				if (!src || !*src) {
   1d4ca:	2c00      	cmp	r4, #0
   1d4cc:	d095      	beq.n	1d3fa <z_impl_net_addr_pton+0x54>
   1d4ce:	7823      	ldrb	r3, [r4, #0]
   1d4d0:	2b00      	cmp	r3, #0
   1d4d2:	d092      	beq.n	1d3fa <z_impl_net_addr_pton+0x54>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1d4d4:	220a      	movs	r2, #10
   1d4d6:	2100      	movs	r1, #0
   1d4d8:	4620      	mov	r0, r4
   1d4da:	f7ff fcb1 	bl	1ce40 <strtol>
				src = strchr(src, '.');
   1d4de:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1d4e0:	f806 0b01 	strb.w	r0, [r6], #1
				src = strchr(src, '.');
   1d4e4:	4620      	mov	r0, r4
   1d4e6:	f7ff fdd4 	bl	1d092 <strchr>
				if (src) {
   1d4ea:	4604      	mov	r4, r0
   1d4ec:	b1b8      	cbz	r0, 1d51e <z_impl_net_addr_pton+0x178>
					src++;
   1d4ee:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
   1d4f0:	3501      	adds	r5, #1
   1d4f2:	2d04      	cmp	r5, #4
   1d4f4:	d1e9      	bne.n	1d4ca <z_impl_net_addr_pton+0x124>
   1d4f6:	e776      	b.n	1d3e6 <z_impl_net_addr_pton+0x40>
			if (expected_groups == 6) {
   1d4f8:	2f06      	cmp	r7, #6
   1d4fa:	d100      	bne.n	1d4fe <z_impl_net_addr_pton+0x158>
				tmp--;
   1d4fc:	3801      	subs	r0, #1
			i = expected_groups - 1;
   1d4fe:	1e7d      	subs	r5, r7, #1
   1d500:	3001      	adds	r0, #1
				if (*tmp == ':') {
   1d502:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   1d506:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   1d508:	bf08      	it	eq
   1d50a:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
				if (i < 0) {
   1d50e:	2d00      	cmp	r5, #0
   1d510:	f6ff af73 	blt.w	1d3fa <z_impl_net_addr_pton+0x54>
			} while (tmp-- != src);
   1d514:	42a0      	cmp	r0, r4
   1d516:	d1f4      	bne.n	1d502 <z_impl_net_addr_pton+0x15c>
   1d518:	e7a8      	b.n	1d46c <z_impl_net_addr_pton+0xc6>
   1d51a:	4620      	mov	r0, r4
   1d51c:	e7ef      	b.n	1d4fe <z_impl_net_addr_pton+0x158>
					if (i < 3) {
   1d51e:	2d03      	cmp	r5, #3
   1d520:	f47f af6b 	bne.w	1d3fa <z_impl_net_addr_pton+0x54>
   1d524:	e7e4      	b.n	1d4f0 <z_impl_net_addr_pton+0x14a>

0001d526 <gpio_nrfx_write>:
{
   1d526:	b510      	push	{r4, lr}
	return port->config->config_info;
   1d528:	6804      	ldr	r4, [r0, #0]
   1d52a:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d52c:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1d52e:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d530:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1d532:	69c0      	ldr	r0, [r0, #28]
   1d534:	d103      	bne.n	1d53e <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   1d536:	4058      	eors	r0, r3
    p_reg->OUT = value;
   1d538:	6060      	str	r0, [r4, #4]
}
   1d53a:	2000      	movs	r0, #0
   1d53c:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   1d53e:	3300      	adds	r3, #0
   1d540:	f04f 0101 	mov.w	r1, #1
   1d544:	bf18      	it	ne
   1d546:	2301      	movne	r3, #1
   1d548:	40d0      	lsrs	r0, r2
   1d54a:	f000 0001 	and.w	r0, r0, #1
   1d54e:	4091      	lsls	r1, r2
   1d550:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   1d552:	bf14      	ite	ne
   1d554:	60a1      	strne	r1, [r4, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   1d556:	60e1      	streq	r1, [r4, #12]
   1d558:	e7ef      	b.n	1d53a <gpio_nrfx_write+0x14>

0001d55a <gpio_nrfx_read>:
{
   1d55a:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   1d55c:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1d55e:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d560:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1d562:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d564:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1d566:	2901      	cmp	r1, #1
    return p_reg->DIR;
   1d568:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   1d56a:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   1d56c:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1d56e:	ea80 0004 	eor.w	r0, r0, r4
   1d572:	ea84 0405 	eor.w	r4, r4, r5
   1d576:	ea04 0406 	and.w	r4, r4, r6
   1d57a:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   1d57e:	bf1c      	itt	ne
   1d580:	40d0      	lsrne	r0, r2
   1d582:	f000 0001 	andne.w	r0, r0, #1
   1d586:	6018      	str	r0, [r3, #0]
}
   1d588:	2000      	movs	r0, #0
   1d58a:	bd70      	pop	{r4, r5, r6, pc}

0001d58c <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d58c:	6883      	ldr	r3, [r0, #8]
{
   1d58e:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   1d590:	6818      	ldr	r0, [r3, #0]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   1d592:	b158      	cbz	r0, 1d5ac <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d594:	2400      	movs	r4, #0
   1d596:	4281      	cmp	r1, r0
   1d598:	d113      	bne.n	1d5c2 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1d59a:	6808      	ldr	r0, [r1, #0]
   1d59c:	b95c      	cbnz	r4, 1d5b6 <gpio_nrfx_manage_callback+0x2a>
   1d59e:	685c      	ldr	r4, [r3, #4]
	list->head = node;
   1d5a0:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d5a2:	42a1      	cmp	r1, r4
   1d5a4:	d100      	bne.n	1d5a8 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1d5a6:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1d5a8:	2000      	movs	r0, #0
   1d5aa:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1d5ac:	b972      	cbnz	r2, 1d5cc <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1d5ae:	2000      	movs	r0, #0
}
   1d5b0:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d5b2:	4628      	mov	r0, r5
   1d5b4:	e7ef      	b.n	1d596 <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
   1d5b6:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d5b8:	6858      	ldr	r0, [r3, #4]
   1d5ba:	4281      	cmp	r1, r0
	list->tail = node;
   1d5bc:	bf08      	it	eq
   1d5be:	605c      	streq	r4, [r3, #4]
   1d5c0:	e7f2      	b.n	1d5a8 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d5c2:	6805      	ldr	r5, [r0, #0]
	return node->next;
   1d5c4:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d5c6:	2d00      	cmp	r5, #0
   1d5c8:	d1f3      	bne.n	1d5b2 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1d5ca:	b13a      	cbz	r2, 1d5dc <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1d5cc:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   1d5ce:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d5d0:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   1d5d2:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d5d4:	2800      	cmp	r0, #0
   1d5d6:	d1ea      	bne.n	1d5ae <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1d5d8:	6059      	str	r1, [r3, #4]
   1d5da:	e7e9      	b.n	1d5b0 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1d5dc:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d5e0:	e7e6      	b.n	1d5b0 <gpio_nrfx_manage_callback+0x24>

0001d5e2 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1d5e2:	2901      	cmp	r1, #1
{
   1d5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1d5e8:	bf18      	it	ne
   1d5ea:	b2d4      	uxtbne	r4, r2
{
   1d5ec:	4606      	mov	r6, r0
		to_pin   = pin;
   1d5ee:	bf12      	itee	ne
   1d5f0:	4625      	movne	r5, r4
		to_pin   = 31U;
   1d5f2:	251f      	moveq	r5, #31
		from_pin = 0U;
   1d5f4:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1d5f6:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   1d5fa:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1d5fc:	42ac      	cmp	r4, r5
   1d5fe:	d902      	bls.n	1d606 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   1d600:	2000      	movs	r0, #0
}
   1d602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1d606:	68fb      	ldr	r3, [r7, #12]
   1d608:	fa08 f204 	lsl.w	r2, r8, r4
   1d60c:	ea23 0302 	bic.w	r3, r3, r2
   1d610:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1d612:	4621      	mov	r1, r4
   1d614:	4630      	mov	r0, r6
   1d616:	f7f3 fb43 	bl	10ca0 <gpiote_pin_int_cfg>
		if (res != 0) {
   1d61a:	2800      	cmp	r0, #0
   1d61c:	d1f1      	bne.n	1d602 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1d61e:	3401      	adds	r4, #1
   1d620:	b2e4      	uxtb	r4, r4
   1d622:	e7eb      	b.n	1d5fc <gpio_nrfx_pin_disable_callback+0x1a>

0001d624 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1d624:	2901      	cmp	r1, #1
{
   1d626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1d62a:	bf18      	it	ne
   1d62c:	b2d4      	uxtbne	r4, r2
{
   1d62e:	4606      	mov	r6, r0
		to_pin   = pin;
   1d630:	bf12      	itee	ne
   1d632:	4625      	movne	r5, r4
		to_pin   = 31U;
   1d634:	251f      	moveq	r5, #31
		from_pin = 0U;
   1d636:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1d638:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   1d63c:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1d63e:	42ac      	cmp	r4, r5
   1d640:	d902      	bls.n	1d648 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   1d642:	2000      	movs	r0, #0
}
   1d644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1d648:	68fb      	ldr	r3, [r7, #12]
   1d64a:	fa08 f204 	lsl.w	r2, r8, r4
   1d64e:	4313      	orrs	r3, r2
   1d650:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1d652:	4621      	mov	r1, r4
   1d654:	4630      	mov	r0, r6
   1d656:	f7f3 fb23 	bl	10ca0 <gpiote_pin_int_cfg>
		if (res != 0) {
   1d65a:	2800      	cmp	r0, #0
   1d65c:	d1f2      	bne.n	1d644 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1d65e:	3401      	adds	r4, #1
   1d660:	b2e4      	uxtb	r4, r4
   1d662:	e7ec      	b.n	1d63e <gpio_nrfx_pin_enable_callback+0x1a>

0001d664 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   1d664:	6882      	ldr	r2, [r0, #8]
	return dev->config->config_info;
   1d666:	6803      	ldr	r3, [r0, #0]
	if (data->int_driven->disable_tx_irq &&
   1d668:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   1d66a:	689b      	ldr	r3, [r3, #8]
	if (data->int_driven->disable_tx_irq &&
   1d66c:	7b91      	ldrb	r1, [r2, #14]
	return config->uarte_regs;
   1d66e:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   1d670:	b159      	cbz	r1, 1d68a <uarte_nrfx_isr_int+0x26>
   1d672:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1d676:	b141      	cbz	r1, 1d68a <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   1d678:	f44f 7180 	mov.w	r1, #256	; 0x100
   1d67c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d680:	2101      	movs	r1, #1
   1d682:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   1d684:	2300      	movs	r3, #0
   1d686:	7393      	strb	r3, [r2, #14]
		return;
   1d688:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d68a:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1d68e:	b111      	cbz	r1, 1d696 <uarte_nrfx_isr_int+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d690:	2100      	movs	r1, #0
   1d692:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1d696:	6813      	ldr	r3, [r2, #0]
   1d698:	b10b      	cbz	r3, 1d69e <uarte_nrfx_isr_int+0x3a>
		data->int_driven->cb(data->int_driven->cb_data);
   1d69a:	6850      	ldr	r0, [r2, #4]
   1d69c:	4718      	bx	r3
}
   1d69e:	4770      	bx	lr

0001d6a0 <uarte_nrfx_config_get>:
{
   1d6a0:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1d6a2:	6882      	ldr	r2, [r0, #8]
   1d6a4:	e892 0003 	ldmia.w	r2, {r0, r1}
   1d6a8:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1d6ac:	2000      	movs	r0, #0
   1d6ae:	4770      	bx	lr

0001d6b0 <uarte_nrfx_err_check>:
	return dev->config->config_info;
   1d6b0:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1d6b2:	689b      	ldr	r3, [r3, #8]
   1d6b4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1d6b6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1d6ba:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1d6be:	4770      	bx	lr

0001d6c0 <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   1d6c0:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1d6c2:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   1d6c4:	689b      	ldr	r3, [r3, #8]
   1d6c6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d6c8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d6cc:	b138      	cbz	r0, 1d6de <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   1d6ce:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d6d0:	2000      	movs	r0, #0
   1d6d2:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d6d4:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d6d6:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d6da:	601a      	str	r2, [r3, #0]
	return 0;
   1d6dc:	4770      	bx	lr
		return -1;
   1d6de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1d6e2:	4770      	bx	lr

0001d6e4 <uarte_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d6e4:	2200      	movs	r2, #0
	return dev->config->config_info;
   1d6e6:	6803      	ldr	r3, [r0, #0]
{
   1d6e8:	b082      	sub	sp, #8
	return config->uarte_regs;
   1d6ea:	689b      	ldr	r3, [r3, #8]
{
   1d6ec:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   1d6f0:	681b      	ldr	r3, [r3, #0]
   1d6f2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d6f6:	f10d 0207 	add.w	r2, sp, #7
   1d6fa:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d6fe:	2201      	movs	r2, #1
   1d700:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d704:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d706:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1d70a:	2900      	cmp	r1, #0
   1d70c:	d0fb      	beq.n	1d706 <uarte_nrfx_poll_out+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d70e:	60da      	str	r2, [r3, #12]
}
   1d710:	b002      	add	sp, #8
   1d712:	4770      	bx	lr

0001d714 <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   1d714:	6803      	ldr	r3, [r0, #0]
{
   1d716:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   1d718:	689b      	ldr	r3, [r3, #8]
   1d71a:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d71c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1d720:	b1bb      	cbz	r3, 1d752 <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1d722:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   1d724:	68ab      	ldr	r3, [r5, #8]
   1d726:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d728:	2300      	movs	r3, #0
   1d72a:	4290      	cmp	r0, r2
   1d72c:	bfa8      	it	ge
   1d72e:	4610      	movge	r0, r2
   1d730:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   1d734:	68aa      	ldr	r2, [r5, #8]
   1d736:	4283      	cmp	r3, r0
   1d738:	6892      	ldr	r2, [r2, #8]
   1d73a:	db06      	blt.n	1d74a <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d73c:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d73e:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d742:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d746:	60a3      	str	r3, [r4, #8]
}
   1d748:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1d74a:	5cce      	ldrb	r6, [r1, r3]
   1d74c:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   1d74e:	3301      	adds	r3, #1
   1d750:	e7f0      	b.n	1d734 <uarte_nrfx_fifo_fill+0x20>
		return 0;
   1d752:	4618      	mov	r0, r3
   1d754:	e7f8      	b.n	1d748 <uarte_nrfx_fifo_fill+0x34>

0001d756 <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   1d756:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1d758:	689b      	ldr	r3, [r3, #8]
   1d75a:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d75c:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d760:	b143      	cbz	r3, 1d774 <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1d762:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d764:	2000      	movs	r0, #0
   1d766:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d76a:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   1d76c:	7b1b      	ldrb	r3, [r3, #12]
   1d76e:	700b      	strb	r3, [r1, #0]
   1d770:	6010      	str	r0, [r2, #0]
   1d772:	4770      	bx	lr
	int num_rx = 0;
   1d774:	4618      	mov	r0, r3
}
   1d776:	4770      	bx	lr

0001d778 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   1d778:	2100      	movs	r1, #0
	return dev->config->config_info;
   1d77a:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   1d77c:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   1d77e:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   1d780:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   1d782:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   1d784:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   1d786:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d78a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d78e:	4770      	bx	lr

0001d790 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1d790:	2201      	movs	r2, #1
   1d792:	6883      	ldr	r3, [r0, #8]
   1d794:	689b      	ldr	r3, [r3, #8]
   1d796:	739a      	strb	r2, [r3, #14]
}
   1d798:	4770      	bx	lr

0001d79a <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   1d79a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1d79c:	689b      	ldr	r3, [r3, #8]
   1d79e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d7a0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   1d7a4:	b118      	cbz	r0, 1d7ae <uarte_nrfx_irq_tx_ready_complete+0x14>
    return p_reg->INTENSET & mask;
   1d7a6:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   1d7aa:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   1d7ae:	4770      	bx	lr

0001d7b0 <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   1d7b0:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1d7b2:	689b      	ldr	r3, [r3, #8]
   1d7b4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d7b6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1d7ba:	3000      	adds	r0, #0
   1d7bc:	bf18      	it	ne
   1d7be:	2001      	movne	r0, #1
   1d7c0:	4770      	bx	lr

0001d7c2 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   1d7c2:	2210      	movs	r2, #16
	return dev->config->config_info;
   1d7c4:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1d7c6:	689b      	ldr	r3, [r3, #8]
   1d7c8:	681b      	ldr	r3, [r3, #0]
   1d7ca:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d7ce:	4770      	bx	lr

0001d7d0 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   1d7d0:	2210      	movs	r2, #16
	return dev->config->config_info;
   1d7d2:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1d7d4:	689b      	ldr	r3, [r3, #8]
   1d7d6:	681b      	ldr	r3, [r3, #0]
   1d7d8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1d7dc:	4770      	bx	lr

0001d7de <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1d7de:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   1d7e2:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1d7e4:	689b      	ldr	r3, [r3, #8]
   1d7e6:	681b      	ldr	r3, [r3, #0]
   1d7e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d7ec:	4770      	bx	lr

0001d7ee <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1d7ee:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   1d7f2:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1d7f4:	689b      	ldr	r3, [r3, #8]
   1d7f6:	681b      	ldr	r3, [r3, #0]
   1d7f8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1d7fc:	4770      	bx	lr

0001d7fe <uarte_nrfx_irq_update>:
}
   1d7fe:	2001      	movs	r0, #1
   1d800:	4770      	bx	lr

0001d802 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1d802:	6883      	ldr	r3, [r0, #8]
   1d804:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   1d806:	e9c3 1200 	strd	r1, r2, [r3]
}
   1d80a:	4770      	bx	lr

0001d80c <uarte_nrfx_irq_is_pending>:
{
   1d80c:	b508      	push	{r3, lr}
	return dev->config->config_info;
   1d80e:	6803      	ldr	r3, [r0, #0]
{
   1d810:	4602      	mov	r2, r0
	return config->uarte_regs;
   1d812:	689b      	ldr	r3, [r3, #8]
   1d814:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   1d816:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   1d81a:	05db      	lsls	r3, r3, #23
   1d81c:	d405      	bmi.n	1d82a <uarte_nrfx_irq_is_pending+0x1e>
   1d81e:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   1d822:	f010 0010 	ands.w	r0, r0, #16
   1d826:	d106      	bne.n	1d836 <uarte_nrfx_irq_is_pending+0x2a>
}
   1d828:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1d82a:	f7ff ffb6 	bl	1d79a <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   1d82e:	2800      	cmp	r0, #0
   1d830:	d0f5      	beq.n	1d81e <uarte_nrfx_irq_is_pending+0x12>
		||
   1d832:	2001      	movs	r0, #1
   1d834:	e7f8      	b.n	1d828 <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   1d836:	4610      	mov	r0, r2
   1d838:	f7ff ffba 	bl	1d7b0 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1d83c:	3000      	adds	r0, #0
   1d83e:	bf18      	it	ne
   1d840:	2001      	movne	r0, #1
   1d842:	e7f1      	b.n	1d828 <uarte_nrfx_irq_is_pending+0x1c>

0001d844 <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   1d844:	2000      	movs	r0, #0
   1d846:	4770      	bx	lr

0001d848 <entropy_cc310_rng_get_entropy>:
{
   1d848:	b513      	push	{r0, r1, r4, lr}
   1d84a:	4614      	mov	r4, r2
   1d84c:	4608      	mov	r0, r1
	res = spm_request_random_number(buffer, length, &olen);
   1d84e:	aa01      	add	r2, sp, #4
   1d850:	4621      	mov	r1, r4
   1d852:	f7ea fbcd 	bl	7ff0 <spm_request_random_number>
	if (olen != length) {
   1d856:	9b01      	ldr	r3, [sp, #4]
   1d858:	429c      	cmp	r4, r3
}
   1d85a:	bf18      	it	ne
   1d85c:	f06f 0015 	mvnne.w	r0, #21
   1d860:	b002      	add	sp, #8
   1d862:	bd10      	pop	{r4, pc}

0001d864 <z_errno>:
   1d864:	f7fd b906 	b.w	1aa74 <z_impl_z_errno>

0001d868 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1d868:	4668      	mov	r0, sp
   1d86a:	f020 0107 	bic.w	r1, r0, #7
   1d86e:	468d      	mov	sp, r1
   1d870:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   1d872:	f7f7 f817 	bl	148a4 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1d876:	f7f1 fdbd 	bl	f3f4 <_arch_isr_direct_pm>
   1d87a:	f7f1 fcfd 	bl	f278 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1d87e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1d882:	4685      	mov	sp, r0
   1d884:	4770      	bx	lr

0001d886 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1d886:	4668      	mov	r0, sp
   1d888:	f020 0107 	bic.w	r1, r0, #7
   1d88c:	468d      	mov	sp, r1
   1d88e:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   1d890:	f7f7 fc0c 	bl	150ac <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1d894:	f7f1 fdae 	bl	f3f4 <_arch_isr_direct_pm>
   1d898:	f7f1 fcee 	bl	f278 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1d89c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1d8a0:	4685      	mov	sp, r0
   1d8a2:	4770      	bx	lr

0001d8a4 <trace_task_create>:
{
   1d8a4:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   1d8a6:	201d      	movs	r0, #29
   1d8a8:	2200      	movs	r2, #0
   1d8aa:	2106      	movs	r1, #6
   1d8ac:	f7f1 fd8a 	bl	f3c4 <z_arm_irq_priority_set>
}
   1d8b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   1d8b4:	201d      	movs	r0, #29
   1d8b6:	f7f1 bd75 	b.w	f3a4 <arch_irq_enable>

0001d8ba <read_task_create>:
{
   1d8ba:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   1d8bc:	201c      	movs	r0, #28
   1d8be:	2200      	movs	r2, #0
   1d8c0:	2106      	movs	r1, #6
   1d8c2:	f7f1 fd7f 	bl	f3c4 <z_arm_irq_priority_set>
}
   1d8c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   1d8ca:	201c      	movs	r0, #28
   1d8cc:	f7f1 bd6a 	b.w	f3a4 <arch_irq_enable>

0001d8d0 <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   1d8d0:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   1d8d4:	bf18      	it	ne
   1d8d6:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   1d8d8:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   1d8da:	bf48      	it	mi
   1d8dc:	f043 0308 	orrmi.w	r3, r3, #8
}
   1d8e0:	4618      	mov	r0, r3
   1d8e2:	4770      	bx	lr

0001d8e4 <z_to_nrf_family>:
	switch (z_family) {
   1d8e4:	2803      	cmp	r0, #3
   1d8e6:	d00f      	beq.n	1d908 <z_to_nrf_family+0x24>
   1d8e8:	d808      	bhi.n	1d8fc <z_to_nrf_family+0x18>
   1d8ea:	2801      	cmp	r0, #1
   1d8ec:	d00e      	beq.n	1d90c <z_to_nrf_family+0x28>
   1d8ee:	2802      	cmp	r0, #2
		return -EAFNOSUPPORT;
   1d8f0:	bf08      	it	eq
   1d8f2:	200a      	moveq	r0, #10
   1d8f4:	bf18      	it	ne
   1d8f6:	f06f 002e 	mvnne.w	r0, #46	; 0x2e
   1d8fa:	4770      	bx	lr
	switch (z_family) {
   1d8fc:	2866      	cmp	r0, #102	; 0x66
   1d8fe:	d006      	beq.n	1d90e <z_to_nrf_family+0x2a>
   1d900:	2867      	cmp	r0, #103	; 0x67
		return -EAFNOSUPPORT;
   1d902:	bf08      	it	eq
   1d904:	2001      	moveq	r0, #1
   1d906:	e7f5      	b.n	1d8f4 <z_to_nrf_family+0x10>
		return NRF_AF_PACKET;
   1d908:	2005      	movs	r0, #5
   1d90a:	4770      	bx	lr
		return NRF_AF_INET;
   1d90c:	2002      	movs	r0, #2
}
   1d90e:	4770      	bx	lr

0001d910 <z_to_nrf_protocol>:
	switch (proto) {
   1d910:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   1d914:	d01d      	beq.n	1d952 <z_to_nrf_protocol+0x42>
   1d916:	dc08      	bgt.n	1d92a <z_to_nrf_protocol+0x1a>
   1d918:	2806      	cmp	r0, #6
   1d91a:	d01d      	beq.n	1d958 <z_to_nrf_protocol+0x48>
   1d91c:	2811      	cmp	r0, #17
   1d91e:	d01d      	beq.n	1d95c <z_to_nrf_protocol+0x4c>
   1d920:	2800      	cmp	r0, #0
		return -EPROTONOSUPPORT;
   1d922:	bf18      	it	ne
   1d924:	f06f 002a 	mvnne.w	r0, #42	; 0x2a
   1d928:	4770      	bx	lr
	switch (proto) {
   1d92a:	f240 2301 	movw	r3, #513	; 0x201
   1d92e:	4298      	cmp	r0, r3
   1d930:	d015      	beq.n	1d95e <z_to_nrf_protocol+0x4e>
   1d932:	dc06      	bgt.n	1d942 <z_to_nrf_protocol+0x32>
   1d934:	f240 1311 	movw	r3, #273	; 0x111
   1d938:	4298      	cmp	r0, r3
		return -EPROTONOSUPPORT;
   1d93a:	bf08      	it	eq
   1d93c:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   1d940:	e7ef      	b.n	1d922 <z_to_nrf_protocol+0x12>
	switch (proto) {
   1d942:	f240 2302 	movw	r3, #514	; 0x202
   1d946:	4298      	cmp	r0, r3
   1d948:	d009      	beq.n	1d95e <z_to_nrf_protocol+0x4e>
   1d94a:	f240 2303 	movw	r3, #515	; 0x203
   1d94e:	4298      	cmp	r0, r3
   1d950:	e7e7      	b.n	1d922 <z_to_nrf_protocol+0x12>
		return NRF_SPROTO_TLS1v2;
   1d952:	f44f 7082 	mov.w	r0, #260	; 0x104
   1d956:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   1d958:	2001      	movs	r0, #1
   1d95a:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   1d95c:	2002      	movs	r0, #2
}
   1d95e:	4770      	bx	lr

0001d960 <nrf91_bsdlib_socket_offload_init>:
}
   1d960:	2000      	movs	r0, #0
   1d962:	4770      	bx	lr

0001d964 <z_errno>:
   1d964:	f7fd b886 	b.w	1aa74 <z_impl_z_errno>

0001d968 <nrf91_socket_offload_freeaddrinfo>:
{
   1d968:	b538      	push	{r3, r4, r5, lr}
   1d96a:	4604      	mov	r4, r0
	while (next != NULL) {
   1d96c:	b904      	cbnz	r4, 1d970 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   1d96e:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   1d970:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   1d972:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   1d974:	f000 fd35 	bl	1e3e2 <k_free>
		k_free(this);
   1d978:	4620      	mov	r0, r4
   1d97a:	f000 fd32 	bl	1e3e2 <k_free>
		next = next->ai_next;
   1d97e:	462c      	mov	r4, r5
   1d980:	e7f4      	b.n	1d96c <nrf91_socket_offload_freeaddrinfo+0x4>

0001d982 <z_to_nrf_addrinfo_hints>:
{
   1d982:	b538      	push	{r3, r4, r5, lr}
   1d984:	460c      	mov	r4, r1
   1d986:	4605      	mov	r5, r0
	memset(nrf_out, 0, sizeof(struct nrf_addrinfo));
   1d988:	2220      	movs	r2, #32
   1d98a:	2100      	movs	r1, #0
   1d98c:	4620      	mov	r0, r4
   1d98e:	f7ff fc00 	bl	1d192 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   1d992:	2300      	movs	r3, #0
   1d994:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1d996:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   1d998:	2b03      	cmp	r3, #3
   1d99a:	d003      	beq.n	1d9a4 <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   1d99c:	2b04      	cmp	r3, #4
   1d99e:	bf08      	it	eq
   1d9a0:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1d9a4:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   1d9a6:	88a8      	ldrh	r0, [r5, #4]
   1d9a8:	f7ff ff9c 	bl	1d8e4 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1d9ac:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
   1d9b0:	d00b      	beq.n	1d9ca <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   1d9b2:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1d9b4:	68e8      	ldr	r0, [r5, #12]
   1d9b6:	f7ff ffab 	bl	1d910 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1d9ba:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1d9be:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1d9c0:	d003      	beq.n	1d9ca <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   1d9c2:	69a8      	ldr	r0, [r5, #24]
   1d9c4:	b108      	cbz	r0, 1d9ca <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   1d9c6:	61a0      	str	r0, [r4, #24]
	return 0;
   1d9c8:	2000      	movs	r0, #0
}
   1d9ca:	bd38      	pop	{r3, r4, r5, pc}

0001d9cc <nrf91_socket_offload_send>:
{
   1d9cc:	b570      	push	{r4, r5, r6, lr}
   1d9ce:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1d9d0:	4618      	mov	r0, r3
{
   1d9d2:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1d9d4:	f7ff ff7c 	bl	1d8d0 <z_to_nrf_flags>
   1d9d8:	462a      	mov	r2, r5
   1d9da:	4603      	mov	r3, r0
   1d9dc:	4620      	mov	r0, r4
}
   1d9de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1d9e2:	f7f9 b987 	b.w	16cf4 <nrf_send>

0001d9e6 <nrf91_socket_offload_recv>:
{
   1d9e6:	b570      	push	{r4, r5, r6, lr}
   1d9e8:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1d9ea:	4618      	mov	r0, r3
{
   1d9ec:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1d9ee:	f7ff ff6f 	bl	1d8d0 <z_to_nrf_flags>
   1d9f2:	462a      	mov	r2, r5
   1d9f4:	4603      	mov	r3, r0
   1d9f6:	4620      	mov	r0, r4
}
   1d9f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1d9fc:	f7f9 b9b0 	b.w	16d60 <nrf_recv>

0001da00 <nrf91_socket_offload_getsockopt>:
{
   1da00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1da04:	461d      	mov	r5, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   1da06:	2300      	movs	r3, #0
{
   1da08:	b086      	sub	sp, #24
   1da0a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   1da0e:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1da12:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   1da16:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   1da1a:	4607      	mov	r7, r0
   1da1c:	460c      	mov	r4, r1
   1da1e:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1da20:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   1da22:	d002      	beq.n	1da2a <nrf91_socket_offload_getsockopt+0x2a>
   1da24:	dc2b      	bgt.n	1da7e <nrf91_socket_offload_getsockopt+0x7e>
   1da26:	2901      	cmp	r1, #1
   1da28:	d13d      	bne.n	1daa6 <nrf91_socket_offload_getsockopt+0xa6>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1da2a:	aa02      	add	r2, sp, #8
   1da2c:	4631      	mov	r1, r6
   1da2e:	4620      	mov	r0, r4
   1da30:	f7f3 fe54 	bl	116dc <z_to_nrf_optname>
   1da34:	2800      	cmp	r0, #0
   1da36:	db36      	blt.n	1daa6 <nrf91_socket_offload_getsockopt+0xa6>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   1da38:	2c01      	cmp	r4, #1
   1da3a:	d128      	bne.n	1da8e <nrf91_socket_offload_getsockopt+0x8e>
   1da3c:	2e14      	cmp	r6, #20
   1da3e:	d126      	bne.n	1da8e <nrf91_socket_offload_getsockopt+0x8e>
		nrf_optlen = sizeof(struct nrf_timeval);
   1da40:	2308      	movs	r3, #8
   1da42:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   1da44:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1da46:	aa03      	add	r2, sp, #12
   1da48:	9200      	str	r2, [sp, #0]
   1da4a:	4638      	mov	r0, r7
   1da4c:	9a02      	ldr	r2, [sp, #8]
   1da4e:	4621      	mov	r1, r4
   1da50:	f7f9 fa06 	bl	16e60 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   1da54:	4607      	mov	r7, r0
   1da56:	b970      	cbnz	r0, 1da76 <nrf91_socket_offload_getsockopt+0x76>
   1da58:	b16d      	cbz	r5, 1da76 <nrf91_socket_offload_getsockopt+0x76>
		*optlen = nrf_optlen;
   1da5a:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   1da5c:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   1da5e:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   1da62:	d108      	bne.n	1da76 <nrf91_socket_offload_getsockopt+0x76>
			if (optname == SO_ERROR) {
   1da64:	2e04      	cmp	r6, #4
   1da66:	d114      	bne.n	1da92 <nrf91_socket_offload_getsockopt+0x92>
				bsd_os_errno_set(*(int *)optval);
   1da68:	6828      	ldr	r0, [r5, #0]
   1da6a:	f7f3 fd1b 	bl	114a4 <bsd_os_errno_set>
				*(int *)optval = errno;
   1da6e:	f7ff ff79 	bl	1d964 <z_errno>
   1da72:	6803      	ldr	r3, [r0, #0]
   1da74:	602b      	str	r3, [r5, #0]
}
   1da76:	4638      	mov	r0, r7
   1da78:	b006      	add	sp, #24
   1da7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1da7e:	f240 2302 	movw	r3, #514	; 0x202
   1da82:	4299      	cmp	r1, r3
   1da84:	d0d1      	beq.n	1da2a <nrf91_socket_offload_getsockopt+0x2a>
   1da86:	f240 2303 	movw	r3, #515	; 0x203
   1da8a:	4299      	cmp	r1, r3
   1da8c:	e7cc      	b.n	1da28 <nrf91_socket_offload_getsockopt+0x28>
   1da8e:	462b      	mov	r3, r5
   1da90:	e7d9      	b.n	1da46 <nrf91_socket_offload_getsockopt+0x46>
			} else if (optname == SO_RCVTIMEO) {
   1da92:	2e14      	cmp	r6, #20
   1da94:	d1ef      	bne.n	1da76 <nrf91_socket_offload_getsockopt+0x76>
				((struct timeval *)optval)->tv_sec =
   1da96:	9b04      	ldr	r3, [sp, #16]
   1da98:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   1da9a:	9b05      	ldr	r3, [sp, #20]
   1da9c:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   1da9e:	2308      	movs	r3, #8
   1daa0:	f8c8 3000 	str.w	r3, [r8]
   1daa4:	e7e7      	b.n	1da76 <nrf91_socket_offload_getsockopt+0x76>
	errno = ENOPROTOOPT;
   1daa6:	f7ff ff5d 	bl	1d964 <z_errno>
   1daaa:	232a      	movs	r3, #42	; 0x2a
	return retval;
   1daac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	errno = ENOPROTOOPT;
   1dab0:	6003      	str	r3, [r0, #0]
	return retval;
   1dab2:	e7e0      	b.n	1da76 <nrf91_socket_offload_getsockopt+0x76>

0001dab4 <nrf91_socket_offload_poll>:
{
   1dab4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dab6:	b091      	sub	sp, #68	; 0x44
   1dab8:	4605      	mov	r5, r0
   1daba:	460c      	mov	r4, r1
   1dabc:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   1dabe:	2100      	movs	r1, #0
   1dac0:	2240      	movs	r2, #64	; 0x40
   1dac2:	4668      	mov	r0, sp
   1dac4:	f7ff fb65 	bl	1d192 <memset>
	for (int i = 0; i < nfds; i++) {
   1dac8:	466a      	mov	r2, sp
   1daca:	2100      	movs	r1, #0
		if (fds[i].events & POLLIN) {
   1dacc:	1d2f      	adds	r7, r5, #4
	for (int i = 0; i < nfds; i++) {
   1dace:	42a1      	cmp	r1, r4
   1dad0:	db0c      	blt.n	1daec <nrf91_socket_offload_poll+0x38>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   1dad2:	4632      	mov	r2, r6
   1dad4:	4621      	mov	r1, r4
   1dad6:	4668      	mov	r0, sp
   1dad8:	f7f9 f9e2 	bl	16ea0 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   1dadc:	2200      	movs	r2, #0
   1dade:	462b      	mov	r3, r5
		fds[i].revents = 0;
   1dae0:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   1dae2:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   1dae4:	42a2      	cmp	r2, r4
   1dae6:	db1a      	blt.n	1db1e <nrf91_socket_offload_poll+0x6a>
}
   1dae8:	b011      	add	sp, #68	; 0x44
   1daea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   1daec:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   1daf0:	f837 0031 	ldrh.w	r0, [r7, r1, lsl #3]
		tmp[i].handle = fds[i].fd;
   1daf4:	6013      	str	r3, [r2, #0]
		if (fds[i].events & POLLIN) {
   1daf6:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   1daf8:	bf48      	it	mi
   1dafa:	8893      	ldrhmi	r3, [r2, #4]
	for (int i = 0; i < nfds; i++) {
   1dafc:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   1db00:	bf44      	itt	mi
   1db02:	f043 0301 	orrmi.w	r3, r3, #1
   1db06:	8093      	strhmi	r3, [r2, #4]
		if (fds[i].events & POLLOUT) {
   1db08:	0743      	lsls	r3, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   1db0a:	bf48      	it	mi
   1db0c:	8893      	ldrhmi	r3, [r2, #4]
   1db0e:	f102 0208 	add.w	r2, r2, #8
   1db12:	bf44      	itt	mi
   1db14:	f043 0302 	orrmi.w	r3, r3, #2
   1db18:	f822 3c04 	strhmi.w	r3, [r2, #-4]
   1db1c:	e7d7      	b.n	1dace <nrf91_socket_offload_poll+0x1a>
		if (tmp[i].returned & NRF_POLLIN) {
   1db1e:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   1db22:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   1db24:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   1db26:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   1db28:	bf48      	it	mi
   1db2a:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   1db2c:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   1db2e:	bf48      	it	mi
   1db30:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   1db32:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   1db36:	bf44      	itt	mi
   1db38:	f045 0504 	orrmi.w	r5, r5, #4
   1db3c:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   1db3e:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   1db40:	bf48      	it	mi
   1db42:	88dd      	ldrhmi	r5, [r3, #6]
   1db44:	f103 0308 	add.w	r3, r3, #8
   1db48:	bf44      	itt	mi
   1db4a:	f045 0508 	orrmi.w	r5, r5, #8
   1db4e:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   1db52:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   1db54:	bf42      	ittt	mi
   1db56:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   1db5a:	f045 0520 	orrmi.w	r5, r5, #32
   1db5e:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   1db62:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   1db64:	bf42      	ittt	mi
   1db66:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   1db6a:	f041 0110 	orrmi.w	r1, r1, #16
   1db6e:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   1db72:	e7b7      	b.n	1dae4 <nrf91_socket_offload_poll+0x30>

0001db74 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   1db74:	f7f9 b920 	b.w	16db8 <nrf_listen>

0001db78 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   1db78:	f7f9 b892 	b.w	16ca0 <nrf_close>

0001db7c <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   1db7c:	2903      	cmp	r1, #3
{
   1db7e:	b508      	push	{r3, lr}
	switch (cmd) {
   1db80:	d00b      	beq.n	1db9a <nrf91_socket_offload_fcntl+0x1e>
   1db82:	2904      	cmp	r1, #4
   1db84:	d111      	bne.n	1dbaa <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   1db86:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   1db88:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   1db8c:	d10d      	bne.n	1dbaa <nrf91_socket_offload_fcntl+0x2e>
}
   1db8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1db92:	1392      	asrs	r2, r2, #14
   1db94:	2101      	movs	r1, #1
   1db96:	f7f9 b985 	b.w	16ea4 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   1db9a:	2200      	movs	r2, #0
   1db9c:	2102      	movs	r1, #2
   1db9e:	f7f9 f981 	bl	16ea4 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1dba2:	0380      	lsls	r0, r0, #14
   1dba4:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   1dba8:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   1dbaa:	f7ff fedb 	bl	1d964 <z_errno>
   1dbae:	2316      	movs	r3, #22
   1dbb0:	6003      	str	r3, [r0, #0]
	return retval;
   1dbb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dbb6:	e7f7      	b.n	1dba8 <nrf91_socket_offload_fcntl+0x2c>

0001dbb8 <nrf91_socket_offload_recvfrom>:
{
   1dbb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dbba:	4605      	mov	r5, r0
   1dbbc:	b08d      	sub	sp, #52	; 0x34
   1dbbe:	4618      	mov	r0, r3
   1dbc0:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   1dbc4:	4617      	mov	r7, r2
	if (from == NULL) {
   1dbc6:	f7ff fe83 	bl	1d8d0 <z_to_nrf_flags>
   1dbca:	4603      	mov	r3, r0
   1dbcc:	b94c      	cbnz	r4, 1dbe2 <nrf91_socket_offload_recvfrom+0x2a>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1dbce:	4628      	mov	r0, r5
   1dbd0:	e9cd 4400 	strd	r4, r4, [sp]
   1dbd4:	463a      	mov	r2, r7
   1dbd6:	f7f9 f8a7 	bl	16d28 <nrf_recvfrom>
   1dbda:	4605      	mov	r5, r0
}
   1dbdc:	4628      	mov	r0, r5
   1dbde:	b00d      	add	sp, #52	; 0x34
   1dbe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   1dbe2:	2224      	movs	r2, #36	; 0x24
   1dbe4:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1dbe6:	aa02      	add	r2, sp, #8
   1dbe8:	9201      	str	r2, [sp, #4]
   1dbea:	aa03      	add	r2, sp, #12
   1dbec:	9200      	str	r2, [sp, #0]
   1dbee:	4628      	mov	r0, r5
   1dbf0:	463a      	mov	r2, r7
   1dbf2:	f7f9 f899 	bl	16d28 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   1dbf6:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1dbf8:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   1dbfa:	2b02      	cmp	r3, #2
   1dbfc:	d109      	bne.n	1dc12 <nrf91_socket_offload_recvfrom+0x5a>
	ptr->sin_port = nrf_in->sin_port;
   1dbfe:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1dc02:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1dc04:	2301      	movs	r3, #1
   1dc06:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1dc08:	9b06      	ldr	r3, [sp, #24]
   1dc0a:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   1dc0c:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   1dc0e:	6033      	str	r3, [r6, #0]
	return retval;
   1dc10:	e7e4      	b.n	1dbdc <nrf91_socket_offload_recvfrom+0x24>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   1dc12:	2b0a      	cmp	r3, #10
   1dc14:	d1e2      	bne.n	1dbdc <nrf91_socket_offload_recvfrom+0x24>
	ptr->sin6_port = nrf_in->sin6_port;
   1dc16:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	ptr->sin6_family = AF_INET6;
   1dc1a:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   1dc1c:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   1dc1e:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1dc20:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   1dc22:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1dc26:	a907      	add	r1, sp, #28
   1dc28:	f7ff fa89 	bl	1d13e <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1dc2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1dc2e:	7523      	strb	r3, [r4, #20]
			*fromlen = sizeof(struct sockaddr_in6);
   1dc30:	2318      	movs	r3, #24
   1dc32:	e7ec      	b.n	1dc0e <nrf91_socket_offload_recvfrom+0x56>

0001dc34 <nrf91_socket_offload_connect>:
{
   1dc34:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1dc36:	880b      	ldrh	r3, [r1, #0]
{
   1dc38:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   1dc3a:	2b01      	cmp	r3, #1
{
   1dc3c:	4606      	mov	r6, r0
   1dc3e:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   1dc40:	d10e      	bne.n	1dc60 <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   1dc42:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1dc44:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1dc46:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1dc4a:	2302      	movs	r3, #2
   1dc4c:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1dc4e:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1dc50:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1dc54:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   1dc56:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1dc58:	f7f9 f89c 	bl	16d94 <nrf_connect>
}
   1dc5c:	b00a      	add	sp, #40	; 0x28
   1dc5e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1dc60:	2b02      	cmp	r3, #2
   1dc62:	d112      	bne.n	1dc8a <nrf91_socket_offload_connect+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   1dc64:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1dc66:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1dc68:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1dc6c:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1dc6e:	2210      	movs	r2, #16
   1dc70:	3104      	adds	r1, #4
   1dc72:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   1dc74:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1dc76:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1dc7a:	f7ff fa60 	bl	1d13e <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1dc7e:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1dc80:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1dc82:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1dc84:	a901      	add	r1, sp, #4
   1dc86:	4630      	mov	r0, r6
   1dc88:	e7e6      	b.n	1dc58 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   1dc8a:	f7f9 f883 	bl	16d94 <nrf_connect>
		if (retval < 0) {
   1dc8e:	2800      	cmp	r0, #0
   1dc90:	dae4      	bge.n	1dc5c <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   1dc92:	f7ff fe67 	bl	1d964 <z_errno>
   1dc96:	2323      	movs	r3, #35	; 0x23
   1dc98:	6003      	str	r3, [r0, #0]
   1dc9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dc9e:	e7dd      	b.n	1dc5c <nrf91_socket_offload_connect+0x28>

0001dca0 <nrf91_socket_offload_socket>:
{
   1dca0:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   1dca2:	b280      	uxth	r0, r0
   1dca4:	f7ff fe1e 	bl	1d8e4 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1dca8:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
	family = z_to_nrf_family(family);
   1dcac:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   1dcae:	d106      	bne.n	1dcbe <nrf91_socket_offload_socket+0x1e>
		errno = EAFNOSUPPORT;
   1dcb0:	f7ff fe58 	bl	1d964 <z_errno>
   1dcb4:	232f      	movs	r3, #47	; 0x2f
		errno = EPROTONOSUPPORT;
   1dcb6:	6003      	str	r3, [r0, #0]
}
   1dcb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dcbc:	bd10      	pop	{r4, pc}
	switch (socktype) {
   1dcbe:	2903      	cmp	r1, #3
   1dcc0:	d003      	beq.n	1dcca <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   1dcc2:	2904      	cmp	r1, #4
   1dcc4:	bf08      	it	eq
   1dcc6:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   1dcca:	4610      	mov	r0, r2
   1dccc:	f7ff fe20 	bl	1d910 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   1dcd0:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	proto = z_to_nrf_protocol(proto);
   1dcd4:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   1dcd6:	d103      	bne.n	1dce0 <nrf91_socket_offload_socket+0x40>
		errno = EPROTONOSUPPORT;
   1dcd8:	f7ff fe44 	bl	1d964 <z_errno>
   1dcdc:	232b      	movs	r3, #43	; 0x2b
   1dcde:	e7ea      	b.n	1dcb6 <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   1dce0:	4620      	mov	r0, r4
}
   1dce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   1dce6:	f7f8 bfc9 	b.w	16c7c <nrf_socket>

0001dcea <nrf91_socket_offload_accept>:
{
   1dcea:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   1dcec:	2708      	movs	r7, #8
{
   1dcee:	b085      	sub	sp, #20
   1dcf0:	460c      	mov	r4, r1
   1dcf2:	4616      	mov	r6, r2
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   1dcf4:	eb0d 0107 	add.w	r1, sp, r7
   1dcf8:	aa01      	add	r2, sp, #4
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   1dcfa:	9701      	str	r7, [sp, #4]
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   1dcfc:	f7f9 f86c 	bl	16dd8 <nrf_accept>
	if (retval < 0) {
   1dd00:	1e05      	subs	r5, r0, #0
   1dd02:	db23      	blt.n	1dd4c <nrf91_socket_offload_accept+0x62>
	if (nrf_addr.sa_family == NRF_AF_INET) {
   1dd04:	9b03      	ldr	r3, [sp, #12]
   1dd06:	2b02      	cmp	r3, #2
   1dd08:	d10a      	bne.n	1dd20 <nrf91_socket_offload_accept+0x36>
	ptr->sin_port = nrf_in->sin_port;
   1dd0a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		*addrlen = sizeof(struct sockaddr_in);
   1dd0e:	6037      	str	r7, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   1dd10:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1dd12:	2301      	movs	r3, #1
   1dd14:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1dd16:	9b05      	ldr	r3, [sp, #20]
   1dd18:	6063      	str	r3, [r4, #4]
}
   1dd1a:	4628      	mov	r0, r5
   1dd1c:	b005      	add	sp, #20
   1dd1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (nrf_addr.sa_family == NRF_AF_INET6) {
   1dd20:	2b0a      	cmp	r3, #10
   1dd22:	d10f      	bne.n	1dd44 <nrf91_socket_offload_accept+0x5a>
		*addrlen = sizeof(struct sockaddr_in6);
   1dd24:	2318      	movs	r3, #24
   1dd26:	6033      	str	r3, [r6, #0]
	ptr->sin6_port = nrf_in->sin6_port;
   1dd28:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	ptr->sin6_family = AF_INET6;
   1dd2c:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   1dd2e:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   1dd30:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1dd32:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   1dd34:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1dd38:	a906      	add	r1, sp, #24
   1dd3a:	f7ff fa00 	bl	1d13e <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1dd3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1dd40:	7523      	strb	r3, [r4, #20]
   1dd42:	e7ea      	b.n	1dd1a <nrf91_socket_offload_accept+0x30>
	errno = ENOTSUP;
   1dd44:	f7ff fe0e 	bl	1d964 <z_errno>
   1dd48:	2323      	movs	r3, #35	; 0x23
   1dd4a:	6003      	str	r3, [r0, #0]
		return -1;
   1dd4c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1dd50:	e7e3      	b.n	1dd1a <nrf91_socket_offload_accept+0x30>

0001dd52 <nrf91_socket_offload_getaddrinfo>:
{
   1dd52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd56:	4614      	mov	r4, r2
   1dd58:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   1dd5a:	2100      	movs	r1, #0
{
   1dd5c:	b093      	sub	sp, #76	; 0x4c
   1dd5e:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1dd60:	2220      	movs	r2, #32
   1dd62:	a802      	add	r0, sp, #8
{
   1dd64:	4698      	mov	r8, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1dd66:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1dd68:	f7ff fa13 	bl	1d192 <memset>
	if (hints != NULL) {
   1dd6c:	b194      	cbz	r4, 1dd94 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   1dd6e:	a902      	add	r1, sp, #8
   1dd70:	4620      	mov	r0, r4
   1dd72:	f7ff fe06 	bl	1d982 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   1dd76:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
   1dd7a:	f000 80bf 	beq.w	1defc <nrf91_socket_offload_getaddrinfo+0x1aa>
		} else if (error == -EAFNOSUPPORT) {
   1dd7e:	302f      	adds	r0, #47	; 0x2f
   1dd80:	f000 80bf 	beq.w	1df02 <nrf91_socket_offload_getaddrinfo+0x1b0>
		if (hints->ai_next != NULL) {
   1dd84:	69e0      	ldr	r0, [r4, #28]
   1dd86:	b120      	cbz	r0, 1dd92 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   1dd88:	ac0a      	add	r4, sp, #40	; 0x28
   1dd8a:	4621      	mov	r1, r4
   1dd8c:	f7ff fdf9 	bl	1d982 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   1dd90:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   1dd92:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   1dd94:	4631      	mov	r1, r6
   1dd96:	4628      	mov	r0, r5
   1dd98:	ab01      	add	r3, sp, #4
   1dd9a:	4622      	mov	r2, r4
   1dd9c:	f7f9 f87c 	bl	16e98 <nrf_getaddrinfo>
	*res = NULL;
   1dda0:	2700      	movs	r7, #0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   1dda2:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   1dda4:	f8c8 7000 	str.w	r7, [r8]
		return AF_INET6;
   1dda8:	f04f 0902 	mov.w	r9, #2
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1ddac:	4605      	mov	r5, r0
   1ddae:	2800      	cmp	r0, #0
   1ddb0:	d04a      	beq.n	1de48 <nrf91_socket_offload_getaddrinfo+0xf6>
		nrf91_socket_offload_freeaddrinfo(*res);
   1ddb2:	f8d8 0000 	ldr.w	r0, [r8]
   1ddb6:	f7ff fdd7 	bl	1d968 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   1ddba:	2300      	movs	r3, #0
   1ddbc:	f8c8 3000 	str.w	r3, [r8]
   1ddc0:	e044      	b.n	1de4c <nrf91_socket_offload_getaddrinfo+0xfa>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   1ddc2:	2020      	movs	r0, #32
   1ddc4:	f7fd f8a4 	bl	1af10 <k_malloc>
		if (next_z_res == NULL) {
   1ddc8:	4604      	mov	r4, r0
   1ddca:	2800      	cmp	r0, #0
   1ddcc:	f000 8091 	beq.w	1def2 <nrf91_socket_offload_getaddrinfo+0x1a0>
	family = nrf_to_z_family(nrf_in->ai_family);
   1ddd0:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1ddd2:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   1ddd4:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   1ddd6:	e9c0 5506 	strd	r5, r5, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   1ddda:	6005      	str	r5, [r0, #0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1dddc:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   1ddde:	d03c      	beq.n	1de5a <nrf91_socket_offload_getaddrinfo+0x108>
   1dde0:	dc09      	bgt.n	1ddf6 <nrf91_socket_offload_getaddrinfo+0xa4>
   1dde2:	2a01      	cmp	r2, #1
   1dde4:	d03b      	beq.n	1de5e <nrf91_socket_offload_getaddrinfo+0x10c>
   1dde6:	2a02      	cmp	r2, #2
   1dde8:	d03b      	beq.n	1de62 <nrf91_socket_offload_getaddrinfo+0x110>
			k_free(next_z_res);
   1ddea:	4620      	mov	r0, r4
   1ddec:	f000 faf9 	bl	1e3e2 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   1ddf0:	f06f 0508 	mvn.w	r5, #8
   1ddf4:	e7dd      	b.n	1ddb2 <nrf91_socket_offload_getaddrinfo+0x60>
	switch (nrf_family) {
   1ddf6:	2a0a      	cmp	r2, #10
   1ddf8:	d035      	beq.n	1de66 <nrf91_socket_offload_getaddrinfo+0x114>
   1ddfa:	2a66      	cmp	r2, #102	; 0x66
   1ddfc:	d1f5      	bne.n	1ddea <nrf91_socket_offload_getaddrinfo+0x98>
		return AF_LTE;
   1ddfe:	4613      	mov	r3, r2
	z_out->ai_family = family;
   1de00:	6063      	str	r3, [r4, #4]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1de02:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   1de04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1de08:	d04e      	beq.n	1dea8 <nrf91_socket_offload_getaddrinfo+0x156>
   1de0a:	dc2e      	bgt.n	1de6a <nrf91_socket_offload_getaddrinfo+0x118>
   1de0c:	2b01      	cmp	r3, #1
   1de0e:	d050      	beq.n	1deb2 <nrf91_socket_offload_getaddrinfo+0x160>
   1de10:	2b02      	cmp	r3, #2
   1de12:	d04c      	beq.n	1deae <nrf91_socket_offload_getaddrinfo+0x15c>
   1de14:	2b00      	cmp	r3, #0
   1de16:	d130      	bne.n	1de7a <nrf91_socket_offload_getaddrinfo+0x128>
	if (nrf_in->ai_family == NRF_AF_INET) {
   1de18:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1de1a:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   1de1c:	d14b      	bne.n	1deb6 <nrf91_socket_offload_getaddrinfo+0x164>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   1de1e:	2008      	movs	r0, #8
   1de20:	f7fd f876 	bl	1af10 <k_malloc>
   1de24:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   1de26:	2800      	cmp	r0, #0
   1de28:	d060      	beq.n	1deec <nrf91_socket_offload_getaddrinfo+0x19a>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   1de2a:	2308      	movs	r3, #8
   1de2c:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   1de2e:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   1de30:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1de32:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   1de34:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   1de36:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1de38:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   1de3a:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   1de3c:	2f00      	cmp	r7, #0
   1de3e:	d15b      	bne.n	1def8 <nrf91_socket_offload_getaddrinfo+0x1a6>
			*res = next_z_res;
   1de40:	f8c8 4000 	str.w	r4, [r8]
		next_nrf_res = next_nrf_res->ai_next;
   1de44:	4627      	mov	r7, r4
   1de46:	69f6      	ldr	r6, [r6, #28]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1de48:	2e00      	cmp	r6, #0
   1de4a:	d1ba      	bne.n	1ddc2 <nrf91_socket_offload_getaddrinfo+0x70>
	nrf_freeaddrinfo(nrf_res);
   1de4c:	9801      	ldr	r0, [sp, #4]
   1de4e:	f7f9 f825 	bl	16e9c <nrf_freeaddrinfo>
}
   1de52:	4628      	mov	r0, r5
   1de54:	b013      	add	sp, #76	; 0x4c
   1de56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return AF_PACKET;
   1de5a:	2303      	movs	r3, #3
   1de5c:	e7d0      	b.n	1de00 <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_LOCAL;
   1de5e:	2367      	movs	r3, #103	; 0x67
   1de60:	e7ce      	b.n	1de00 <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_INET;
   1de62:	2301      	movs	r3, #1
   1de64:	e7cc      	b.n	1de00 <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_INET6;
   1de66:	2302      	movs	r3, #2
   1de68:	e7ca      	b.n	1de00 <nrf91_socket_offload_getaddrinfo+0xae>
	switch (proto) {
   1de6a:	f240 2101 	movw	r1, #513	; 0x201
   1de6e:	428b      	cmp	r3, r1
   1de70:	d0d2      	beq.n	1de18 <nrf91_socket_offload_getaddrinfo+0xc6>
   1de72:	dc0d      	bgt.n	1de90 <nrf91_socket_offload_getaddrinfo+0x13e>
   1de74:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1de78:	d013      	beq.n	1dea2 <nrf91_socket_offload_getaddrinfo+0x150>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1de7a:	f06f 032a 	mvn.w	r3, #42	; 0x2a
   1de7e:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   1de80:	2300      	movs	r3, #0
   1de82:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   1de84:	4620      	mov	r0, r4
   1de86:	f000 faac 	bl	1e3e2 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   1de8a:	f06f 0506 	mvn.w	r5, #6
   1de8e:	e790      	b.n	1ddb2 <nrf91_socket_offload_getaddrinfo+0x60>
	switch (proto) {
   1de90:	f240 2102 	movw	r1, #514	; 0x202
   1de94:	428b      	cmp	r3, r1
   1de96:	d0bf      	beq.n	1de18 <nrf91_socket_offload_getaddrinfo+0xc6>
   1de98:	f240 2103 	movw	r1, #515	; 0x203
   1de9c:	428b      	cmp	r3, r1
   1de9e:	d0bb      	beq.n	1de18 <nrf91_socket_offload_getaddrinfo+0xc6>
   1dea0:	e7eb      	b.n	1de7a <nrf91_socket_offload_getaddrinfo+0x128>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1dea2:	f240 1311 	movw	r3, #273	; 0x111
   1dea6:	e7b7      	b.n	1de18 <nrf91_socket_offload_getaddrinfo+0xc6>
   1dea8:	f44f 7381 	mov.w	r3, #258	; 0x102
   1deac:	e7b4      	b.n	1de18 <nrf91_socket_offload_getaddrinfo+0xc6>
   1deae:	2311      	movs	r3, #17
   1deb0:	e7b2      	b.n	1de18 <nrf91_socket_offload_getaddrinfo+0xc6>
   1deb2:	2306      	movs	r3, #6
   1deb4:	e7b0      	b.n	1de18 <nrf91_socket_offload_getaddrinfo+0xc6>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   1deb6:	2a0a      	cmp	r2, #10
   1deb8:	d1e4      	bne.n	1de84 <nrf91_socket_offload_getaddrinfo+0x132>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1deba:	2018      	movs	r0, #24
   1debc:	f7fd f828 	bl	1af10 <k_malloc>
   1dec0:	4682      	mov	sl, r0
   1dec2:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   1dec4:	b190      	cbz	r0, 1deec <nrf91_socket_offload_getaddrinfo+0x19a>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1dec6:	2318      	movs	r3, #24
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1dec8:	2210      	movs	r2, #16
			(const struct nrf_sockaddr_in6 *)nrf_in->ai_addr);
   1deca:	f8d6 b014 	ldr.w	fp, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1dece:	6123      	str	r3, [r4, #16]
	ptr->sin6_port = nrf_in->sin6_port;
   1ded0:	f8bb 3008 	ldrh.w	r3, [fp, #8]
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1ded4:	eb0b 0102 	add.w	r1, fp, r2
	ptr->sin6_port = nrf_in->sin6_port;
   1ded8:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   1deda:	f820 9b04 	strh.w	r9, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1dede:	f7ff f92e 	bl	1d13e <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1dee2:	f8db 3020 	ldr.w	r3, [fp, #32]
   1dee6:	f88a 3014 	strb.w	r3, [sl, #20]
		} else if (error == -EAFNOSUPPORT) {
   1deea:	e7a7      	b.n	1de3c <nrf91_socket_offload_getaddrinfo+0xea>
			k_free(next_z_res);
   1deec:	4620      	mov	r0, r4
   1deee:	f000 fa78 	bl	1e3e2 <k_free>
			retval = DNS_EAI_MEMORY;
   1def2:	f06f 0509 	mvn.w	r5, #9
   1def6:	e75c      	b.n	1ddb2 <nrf91_socket_offload_getaddrinfo+0x60>
			latest_z_res->ai_next = next_z_res;
   1def8:	61fc      	str	r4, [r7, #28]
   1defa:	e7a3      	b.n	1de44 <nrf91_socket_offload_getaddrinfo+0xf2>
			return DNS_EAI_SOCKTYPE;
   1defc:	f06f 0506 	mvn.w	r5, #6
   1df00:	e7a7      	b.n	1de52 <nrf91_socket_offload_getaddrinfo+0x100>
			return DNS_EAI_ADDRFAMILY;
   1df02:	f06f 0508 	mvn.w	r5, #8
   1df06:	e7a4      	b.n	1de52 <nrf91_socket_offload_getaddrinfo+0x100>

0001df08 <nrf91_socket_offload_setsockopt>:
{
   1df08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   1df0c:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   1df10:	b086      	sub	sp, #24
   1df12:	4680      	mov	r8, r0
   1df14:	460c      	mov	r4, r1
   1df16:	4617      	mov	r7, r2
   1df18:	461d      	mov	r5, r3
   1df1a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   1df1c:	d002      	beq.n	1df24 <nrf91_socket_offload_setsockopt+0x1c>
   1df1e:	dc1c      	bgt.n	1df5a <nrf91_socket_offload_setsockopt+0x52>
   1df20:	2901      	cmp	r1, #1
   1df22:	d122      	bne.n	1df6a <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1df24:	aa03      	add	r2, sp, #12
   1df26:	4639      	mov	r1, r7
   1df28:	4620      	mov	r0, r4
   1df2a:	f7f3 fbd7 	bl	116dc <z_to_nrf_optname>
   1df2e:	2800      	cmp	r0, #0
   1df30:	db1b      	blt.n	1df6a <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   1df32:	2c01      	cmp	r4, #1
   1df34:	d107      	bne.n	1df46 <nrf91_socket_offload_setsockopt+0x3e>
   1df36:	2f14      	cmp	r7, #20
   1df38:	d105      	bne.n	1df46 <nrf91_socket_offload_setsockopt+0x3e>
		nrf_optlen = sizeof(struct nrf_timeval);
   1df3a:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   1df3c:	682b      	ldr	r3, [r5, #0]
   1df3e:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1df40:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   1df42:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1df44:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1df46:	9600      	str	r6, [sp, #0]
   1df48:	462b      	mov	r3, r5
   1df4a:	9a03      	ldr	r2, [sp, #12]
   1df4c:	4621      	mov	r1, r4
   1df4e:	4640      	mov	r0, r8
   1df50:	f7f8 ff6a 	bl	16e28 <nrf_setsockopt>
}
   1df54:	b006      	add	sp, #24
   1df56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1df5a:	f240 2302 	movw	r3, #514	; 0x202
   1df5e:	4299      	cmp	r1, r3
   1df60:	d0e0      	beq.n	1df24 <nrf91_socket_offload_setsockopt+0x1c>
   1df62:	f240 2303 	movw	r3, #515	; 0x203
   1df66:	4299      	cmp	r1, r3
   1df68:	e7db      	b.n	1df22 <nrf91_socket_offload_setsockopt+0x1a>
	errno = ENOPROTOOPT;
   1df6a:	f7ff fcfb 	bl	1d964 <z_errno>
   1df6e:	232a      	movs	r3, #42	; 0x2a
   1df70:	6003      	str	r3, [r0, #0]
   1df72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1df76:	e7ed      	b.n	1df54 <nrf91_socket_offload_setsockopt+0x4c>

0001df78 <nrf91_socket_offload_sendto>:
{
   1df78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1df7c:	b08d      	sub	sp, #52	; 0x34
   1df7e:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1df80:	4605      	mov	r5, r0
   1df82:	460e      	mov	r6, r1
   1df84:	4617      	mov	r7, r2
   1df86:	4698      	mov	r8, r3
	if (to == NULL) {
   1df88:	b96c      	cbnz	r4, 1dfa6 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1df8a:	4618      	mov	r0, r3
   1df8c:	f7ff fca0 	bl	1d8d0 <z_to_nrf_flags>
   1df90:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1df94:	4603      	mov	r3, r0
   1df96:	463a      	mov	r2, r7
   1df98:	4631      	mov	r1, r6
   1df9a:	4628      	mov	r0, r5
   1df9c:	f7f8 fe8e 	bl	16cbc <nrf_sendto>
}
   1dfa0:	b00d      	add	sp, #52	; 0x34
   1dfa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   1dfa6:	8823      	ldrh	r3, [r4, #0]
   1dfa8:	2b01      	cmp	r3, #1
   1dfaa:	d110      	bne.n	1dfce <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   1dfac:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1dfae:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   1dfb0:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   1dfb4:	2302      	movs	r3, #2
   1dfb6:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1dfb8:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1dfba:	4640      	mov	r0, r8
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1dfbc:	f88d 100c 	strb.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1dfc0:	9306      	str	r3, [sp, #24]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1dfc2:	f7ff fc85 	bl	1d8d0 <z_to_nrf_flags>
   1dfc6:	9101      	str	r1, [sp, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1dfc8:	ab03      	add	r3, sp, #12
   1dfca:	9300      	str	r3, [sp, #0]
   1dfcc:	e7e2      	b.n	1df94 <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   1dfce:	2b02      	cmp	r3, #2
   1dfd0:	d115      	bne.n	1dffe <nrf91_socket_offload_sendto+0x86>
	nrf_out->sin6_port = ptr->sin6_port;
   1dfd2:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1dfd4:	f04f 0924 	mov.w	r9, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1dfd8:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin6_family = NRF_AF_INET6;
   1dfdc:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1dfde:	2210      	movs	r2, #16
   1dfe0:	1d21      	adds	r1, r4, #4
   1dfe2:	a807      	add	r0, sp, #28
	nrf_out->sin6_family = NRF_AF_INET6;
   1dfe4:	9304      	str	r3, [sp, #16]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1dfe6:	f88d 900c 	strb.w	r9, [sp, #12]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1dfea:	f7ff f8a8 	bl	1d13e <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1dfee:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1dff0:	4640      	mov	r0, r8
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1dff2:	930b      	str	r3, [sp, #44]	; 0x2c
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1dff4:	f7ff fc6c 	bl	1d8d0 <z_to_nrf_flags>
   1dff8:	f8cd 9004 	str.w	r9, [sp, #4]
   1dffc:	e7e4      	b.n	1dfc8 <nrf91_socket_offload_sendto+0x50>
	errno = ENOTSUP;
   1dffe:	f7ff fcb1 	bl	1d964 <z_errno>
   1e002:	2323      	movs	r3, #35	; 0x23
   1e004:	6003      	str	r3, [r0, #0]
	return retval;
   1e006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e00a:	e7c9      	b.n	1dfa0 <nrf91_socket_offload_sendto+0x28>

0001e00c <nrf91_socket_offload_bind>:
{
   1e00c:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1e00e:	880b      	ldrh	r3, [r1, #0]
{
   1e010:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   1e012:	2b01      	cmp	r3, #1
{
   1e014:	4606      	mov	r6, r0
   1e016:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   1e018:	d10e      	bne.n	1e038 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   1e01a:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e01c:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1e01e:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1e022:	2302      	movs	r3, #2
   1e024:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e026:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e028:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e02c:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   1e02e:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1e030:	f7f8 fee8 	bl	16e04 <nrf_bind>
}
   1e034:	b00a      	add	sp, #40	; 0x28
   1e036:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1e038:	2b02      	cmp	r3, #2
   1e03a:	d112      	bne.n	1e062 <nrf91_socket_offload_bind+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   1e03c:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e03e:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1e040:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1e044:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e046:	2210      	movs	r2, #16
   1e048:	3104      	adds	r1, #4
   1e04a:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   1e04c:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e04e:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e052:	f7ff f874 	bl	1d13e <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e056:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1e058:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e05a:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1e05c:	a901      	add	r1, sp, #4
   1e05e:	4630      	mov	r0, r6
   1e060:	e7e6      	b.n	1e030 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   1e062:	f7ff fc7f 	bl	1d964 <z_errno>
   1e066:	2323      	movs	r3, #35	; 0x23
   1e068:	6003      	str	r3, [r0, #0]
   1e06a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e06e:	e7e1      	b.n	1e034 <nrf91_socket_offload_bind+0x28>

0001e070 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   1e070:	280d      	cmp	r0, #13
   1e072:	d004      	beq.n	1e07e <is_lfcr+0xe>
   1e074:	f1a0 030a 	sub.w	r3, r0, #10
   1e078:	4258      	negs	r0, r3
   1e07a:	4158      	adcs	r0, r3
   1e07c:	4770      	bx	lr
		return true;
   1e07e:	2001      	movs	r0, #1
}
   1e080:	4770      	bx	lr

0001e082 <skip_command_prefix>:
{
   1e082:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   1e084:	6802      	ldr	r2, [r0, #0]
{
   1e086:	4601      	mov	r1, r0
	*cmd += sizeof("AT") - 1;
   1e088:	1c93      	adds	r3, r2, #2
   1e08a:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   1e08c:	7894      	ldrb	r4, [r2, #2]
   1e08e:	4620      	mov	r0, r4
   1e090:	f7ff ffee 	bl	1e070 <is_lfcr>
   1e094:	b910      	cbnz	r0, 1e09c <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e096:	b10c      	cbz	r4, 1e09c <skip_command_prefix+0x1a>
	(*cmd)++;
   1e098:	3203      	adds	r2, #3
   1e09a:	600a      	str	r2, [r1, #0]
}
   1e09c:	bd10      	pop	{r4, pc}

0001e09e <is_valid_notification_char>:
	return (int)((chr >= (int)'a' && chr <=
   1e09e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1e0a2:	2b19      	cmp	r3, #25
   1e0a4:	bf98      	it	ls
   1e0a6:	3820      	subls	r0, #32
	if ((chr >= 'A') && (chr <= 'Z')) {
   1e0a8:	3841      	subs	r0, #65	; 0x41
   1e0aa:	b2c0      	uxtb	r0, r0
}
   1e0ac:	2819      	cmp	r0, #25
   1e0ae:	bf8c      	ite	hi
   1e0b0:	2000      	movhi	r0, #0
   1e0b2:	2001      	movls	r0, #1
   1e0b4:	4770      	bx	lr

0001e0b6 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   1e0b6:	b510      	push	{r4, lr}
   1e0b8:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   1e0ba:	f7ff f805 	bl	1d0c8 <strlen>
   1e0be:	2801      	cmp	r0, #1
   1e0c0:	d91e      	bls.n	1e100 <is_command+0x4a>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   1e0c2:	7823      	ldrb	r3, [r4, #0]
   1e0c4:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1e0c8:	2a19      	cmp	r2, #25
   1e0ca:	bf98      	it	ls
   1e0cc:	3b20      	subls	r3, #32
   1e0ce:	2b41      	cmp	r3, #65	; 0x41
   1e0d0:	d116      	bne.n	1e100 <is_command+0x4a>
   1e0d2:	7863      	ldrb	r3, [r4, #1]
   1e0d4:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1e0d8:	2a19      	cmp	r2, #25
   1e0da:	bf98      	it	ls
   1e0dc:	3b20      	subls	r3, #32
   1e0de:	2b54      	cmp	r3, #84	; 0x54
   1e0e0:	d10e      	bne.n	1e100 <is_command+0x4a>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1e0e2:	78a2      	ldrb	r2, [r4, #2]
   1e0e4:	2a25      	cmp	r2, #37	; 0x25
   1e0e6:	d00d      	beq.n	1e104 <is_command+0x4e>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   1e0e8:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   1e0ec:	2b23      	cmp	r3, #35	; 0x23
   1e0ee:	d009      	beq.n	1e104 <is_command+0x4e>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1e0f0:	4610      	mov	r0, r2
   1e0f2:	f7ff ffbd 	bl	1e070 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   1e0f6:	b910      	cbnz	r0, 1e0fe <is_command+0x48>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e0f8:	fab2 f082 	clz	r0, r2
   1e0fc:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   1e0fe:	bd10      	pop	{r4, pc}
		return false;
   1e100:	2000      	movs	r0, #0
   1e102:	e7fc      	b.n	1e0fe <is_command+0x48>
		return true;
   1e104:	2001      	movs	r0, #1
   1e106:	e7fa      	b.n	1e0fe <is_command+0x48>

0001e108 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   1e108:	6813      	ldr	r3, [r2, #0]
   1e10a:	f7f4 b83b 	b.w	12184 <at_parser_max_params_from_str>

0001e10e <at_parser_cmd_type_get>:

enum at_cmd_type at_parser_cmd_type_get(const char *at_cmd)
{
   1e10e:	b507      	push	{r0, r1, r2, lr}
   1e110:	9001      	str	r0, [sp, #4]
	enum at_cmd_type type;

	if (!is_command(at_cmd)) {
   1e112:	f7ff ffd0 	bl	1e0b6 <is_command>
   1e116:	b178      	cbz	r0, 1e138 <at_parser_cmd_type_get+0x2a>
		return AT_CMD_TYPE_UNKNOWN;
	}

	skip_command_prefix(&at_cmd);
   1e118:	a801      	add	r0, sp, #4
   1e11a:	f7ff ffb2 	bl	1e082 <skip_command_prefix>

	while (is_valid_notification_char(*at_cmd)) {
   1e11e:	9901      	ldr	r1, [sp, #4]
   1e120:	780a      	ldrb	r2, [r1, #0]
   1e122:	4610      	mov	r0, r2
   1e124:	f7ff ffbb 	bl	1e09e <is_valid_notification_char>
   1e128:	b948      	cbnz	r0, 1e13e <at_parser_cmd_type_get+0x30>
		at_cmd++;
	}

	if ((*at_cmd == AT_CMD_SEPARATOR) &&
   1e12a:	2a3d      	cmp	r2, #61	; 0x3d
   1e12c:	d114      	bne.n	1e158 <at_parser_cmd_type_get+0x4a>
   1e12e:	784b      	ldrb	r3, [r1, #1]
	    (*(at_cmd + 1) == AT_CMD_READ_TEST_IDENTIFIER)) {
		type = AT_CMD_TYPE_TEST_COMMAND;
   1e130:	2b3f      	cmp	r3, #63	; 0x3f
   1e132:	bf14      	ite	ne
   1e134:	2001      	movne	r0, #1
   1e136:	2003      	moveq	r0, #3
	} else {
		type = AT_CMD_TYPE_UNKNOWN;
	}

	return type;
}
   1e138:	b003      	add	sp, #12
   1e13a:	f85d fb04 	ldr.w	pc, [sp], #4
		at_cmd++;
   1e13e:	3101      	adds	r1, #1
   1e140:	9101      	str	r1, [sp, #4]
   1e142:	e7ec      	b.n	1e11e <at_parser_cmd_type_get+0x10>
	} else if ((*at_cmd == AT_CMD_SEPARATOR) || is_lfcr(*at_cmd) ||
   1e144:	4610      	mov	r0, r2
   1e146:	f7ff ff93 	bl	1e070 <is_lfcr>
   1e14a:	b918      	cbnz	r0, 1e154 <at_parser_cmd_type_get+0x46>
		return AT_CMD_TYPE_UNKNOWN;
   1e14c:	fab2 f082 	clz	r0, r2
   1e150:	0940      	lsrs	r0, r0, #5
   1e152:	e7f1      	b.n	1e138 <at_parser_cmd_type_get+0x2a>
		type = AT_CMD_TYPE_SET_COMMAND;
   1e154:	2001      	movs	r0, #1
   1e156:	e7ef      	b.n	1e138 <at_parser_cmd_type_get+0x2a>
	} else if (*at_cmd == AT_CMD_READ_TEST_IDENTIFIER) {
   1e158:	2a3f      	cmp	r2, #63	; 0x3f
   1e15a:	d1f3      	bne.n	1e144 <at_parser_cmd_type_get+0x36>
		type = AT_CMD_TYPE_READ_COMMAND;
   1e15c:	2002      	movs	r0, #2
   1e15e:	e7eb      	b.n	1e138 <at_parser_cmd_type_get+0x2a>

0001e160 <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   1e160:	6803      	ldr	r3, [r0, #0]
   1e162:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   1e164:	bf83      	ittte	hi
   1e166:	230c      	movhi	r3, #12
   1e168:	6840      	ldrhi	r0, [r0, #4]
   1e16a:	fb03 0001 	mlahi	r0, r3, r1, r0
		return NULL;
   1e16e:	2000      	movls	r0, #0
}
   1e170:	4770      	bx	lr

0001e172 <at_param_size>:
/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
	__ASSERT(param != NULL, "Parameter cannot be NULL.");

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   1e172:	7803      	ldrb	r3, [r0, #0]
   1e174:	2b01      	cmp	r3, #1
   1e176:	d006      	beq.n	1e186 <at_param_size+0x14>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   1e178:	2b02      	cmp	r3, #2
   1e17a:	d006      	beq.n	1e18a <at_param_size+0x18>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e17c:	3b03      	subs	r3, #3
   1e17e:	2b01      	cmp	r3, #1
   1e180:	d805      	bhi.n	1e18e <at_param_size+0x1c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   1e182:	6840      	ldr	r0, [r0, #4]
   1e184:	4770      	bx	lr
		return sizeof(u16_t);
   1e186:	2002      	movs	r0, #2
   1e188:	4770      	bx	lr
		return sizeof(u32_t);
   1e18a:	2004      	movs	r0, #4
   1e18c:	4770      	bx	lr
	}

	return 0;
   1e18e:	2000      	movs	r0, #0
}
   1e190:	4770      	bx	lr

0001e192 <at_param_clear>:
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e192:	7803      	ldrb	r3, [r0, #0]
{
   1e194:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e196:	3b03      	subs	r3, #3
   1e198:	2b01      	cmp	r3, #1
{
   1e19a:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e19c:	d802      	bhi.n	1e1a4 <at_param_clear+0x12>
		k_free(param->value.str_val);
   1e19e:	6880      	ldr	r0, [r0, #8]
   1e1a0:	f000 f91f 	bl	1e3e2 <k_free>
	param->value.int_val = 0;
   1e1a4:	2300      	movs	r3, #0
   1e1a6:	60a3      	str	r3, [r4, #8]
}
   1e1a8:	bd10      	pop	{r4, pc}

0001e1aa <at_params_list_init>:

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   1e1aa:	b538      	push	{r3, r4, r5, lr}
   1e1ac:	460d      	mov	r5, r1
	if (list == NULL) {
   1e1ae:	4604      	mov	r4, r0
   1e1b0:	b140      	cbz	r0, 1e1c4 <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   1e1b2:	210c      	movs	r1, #12
   1e1b4:	4628      	mov	r0, r5
   1e1b6:	f000 f919 	bl	1e3ec <k_calloc>
   1e1ba:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   1e1bc:	b128      	cbz	r0, 1e1ca <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   1e1be:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   1e1c0:	6025      	str	r5, [r4, #0]
}
   1e1c2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1e1c4:	f06f 0015 	mvn.w	r0, #21
   1e1c8:	e7fb      	b.n	1e1c2 <at_params_list_init+0x18>
		return -ENOMEM;
   1e1ca:	f06f 000b 	mvn.w	r0, #11
   1e1ce:	e7f8      	b.n	1e1c2 <at_params_list_init+0x18>

0001e1d0 <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   1e1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (list == NULL || list->params == NULL) {
   1e1d2:	4605      	mov	r5, r0
   1e1d4:	b130      	cbz	r0, 1e1e4 <at_params_list_clear+0x14>
   1e1d6:	6843      	ldr	r3, [r0, #4]
   1e1d8:	b123      	cbz	r3, 1e1e4 <at_params_list_clear+0x14>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   1e1da:	2400      	movs	r4, #0
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
   1e1dc:	270c      	movs	r7, #12
	for (size_t i = 0; i < list->param_count; ++i) {
   1e1de:	682b      	ldr	r3, [r5, #0]
   1e1e0:	429c      	cmp	r4, r3
   1e1e2:	d300      	bcc.n	1e1e6 <at_params_list_clear+0x16>
		at_param_init(&params[i]);
	}
}
   1e1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		at_param_clear(&params[i]);
   1e1e6:	686e      	ldr	r6, [r5, #4]
   1e1e8:	fb07 6604 	mla	r6, r7, r4, r6
   1e1ec:	4630      	mov	r0, r6
   1e1ee:	f7ff ffd0 	bl	1e192 <at_param_clear>
	memset(param, 0, sizeof(struct at_param));
   1e1f2:	220c      	movs	r2, #12
   1e1f4:	2100      	movs	r1, #0
   1e1f6:	4630      	mov	r0, r6
   1e1f8:	f7fe ffcb 	bl	1d192 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   1e1fc:	3401      	adds	r4, #1
   1e1fe:	e7ee      	b.n	1e1de <at_params_list_clear+0xe>

0001e200 <at_params_short_put>:
	list->params = NULL;
}

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   1e200:	b538      	push	{r3, r4, r5, lr}
   1e202:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   1e204:	b160      	cbz	r0, 1e220 <at_params_short_put+0x20>
   1e206:	6843      	ldr	r3, [r0, #4]
   1e208:	b153      	cbz	r3, 1e220 <at_params_short_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e20a:	f7ff ffa9 	bl	1e160 <at_params_get>

	if (param == NULL) {
   1e20e:	4604      	mov	r4, r0
   1e210:	b130      	cbz	r0, 1e220 <at_params_short_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   1e212:	f7ff ffbe 	bl	1e192 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_SHORT;
   1e216:	2301      	movs	r3, #1
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
   1e218:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   1e21a:	7023      	strb	r3, [r4, #0]
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   1e21c:	60a5      	str	r5, [r4, #8]
}
   1e21e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1e220:	f06f 0015 	mvn.w	r0, #21
   1e224:	e7fb      	b.n	1e21e <at_params_short_put+0x1e>

0001e226 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   1e226:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   1e228:	b160      	cbz	r0, 1e244 <at_params_empty_put+0x1e>
   1e22a:	6843      	ldr	r3, [r0, #4]
   1e22c:	b153      	cbz	r3, 1e244 <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e22e:	f7ff ff97 	bl	1e160 <at_params_get>

	if (param == NULL) {
   1e232:	4604      	mov	r4, r0
   1e234:	b130      	cbz	r0, 1e244 <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	at_param_clear(param);
   1e236:	f7ff ffac 	bl	1e192 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   1e23a:	2305      	movs	r3, #5
	param->value.int_val = 0;
   1e23c:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   1e23e:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   1e240:	60a0      	str	r0, [r4, #8]

	return 0;
}
   1e242:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1e244:	f06f 0015 	mvn.w	r0, #21
   1e248:	e7fb      	b.n	1e242 <at_params_empty_put+0x1c>

0001e24a <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   1e24a:	b538      	push	{r3, r4, r5, lr}
   1e24c:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   1e24e:	b160      	cbz	r0, 1e26a <at_params_int_put+0x20>
   1e250:	6843      	ldr	r3, [r0, #4]
   1e252:	b153      	cbz	r3, 1e26a <at_params_int_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e254:	f7ff ff84 	bl	1e160 <at_params_get>

	if (param == NULL) {
   1e258:	4604      	mov	r4, r0
   1e25a:	b130      	cbz	r0, 1e26a <at_params_int_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   1e25c:	f7ff ff99 	bl	1e192 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   1e260:	2302      	movs	r3, #2
	param->value.int_val = value;
	return 0;
   1e262:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   1e264:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   1e266:	60a5      	str	r5, [r4, #8]
}
   1e268:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1e26a:	f06f 0015 	mvn.w	r0, #21
   1e26e:	e7fb      	b.n	1e268 <at_params_int_put+0x1e>

0001e270 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   1e270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e272:	4616      	mov	r6, r2
   1e274:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   1e276:	b1c0      	cbz	r0, 1e2aa <at_params_string_put+0x3a>
   1e278:	6843      	ldr	r3, [r0, #4]
   1e27a:	b1b3      	cbz	r3, 1e2aa <at_params_string_put+0x3a>
   1e27c:	b1aa      	cbz	r2, 1e2aa <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e27e:	f7ff ff6f 	bl	1e160 <at_params_get>

	if (param == NULL) {
   1e282:	4604      	mov	r4, r0
   1e284:	b188      	cbz	r0, 1e2aa <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   1e286:	1c68      	adds	r0, r5, #1
   1e288:	f7fc fe42 	bl	1af10 <k_malloc>

	if (param_value == NULL) {
   1e28c:	4607      	mov	r7, r0
   1e28e:	b178      	cbz	r0, 1e2b0 <at_params_string_put+0x40>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);
   1e290:	462a      	mov	r2, r5
   1e292:	4631      	mov	r1, r6
   1e294:	f7fe ff53 	bl	1d13e <memcpy>

	at_param_clear(param);
   1e298:	4620      	mov	r0, r4
   1e29a:	f7ff ff7a 	bl	1e192 <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   1e29e:	2303      	movs	r3, #3
	param->value.str_val = param_value;

	return 0;
   1e2a0:	2000      	movs	r0, #0
	param->size = str_len;
   1e2a2:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   1e2a4:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   1e2a6:	60a7      	str	r7, [r4, #8]
}
   1e2a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1e2aa:	f06f 0015 	mvn.w	r0, #21
   1e2ae:	e7fb      	b.n	1e2a8 <at_params_string_put+0x38>
		return -ENOMEM;
   1e2b0:	f06f 000b 	mvn.w	r0, #11
   1e2b4:	e7f8      	b.n	1e2a8 <at_params_string_put+0x38>

0001e2b6 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const u32_t *array, size_t array_len)
{
   1e2b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e2b8:	4616      	mov	r6, r2
   1e2ba:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   1e2bc:	b1c0      	cbz	r0, 1e2f0 <at_params_array_put+0x3a>
   1e2be:	6843      	ldr	r3, [r0, #4]
   1e2c0:	b1b3      	cbz	r3, 1e2f0 <at_params_array_put+0x3a>
   1e2c2:	b1aa      	cbz	r2, 1e2f0 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e2c4:	f7ff ff4c 	bl	1e160 <at_params_get>

	if (param == NULL) {
   1e2c8:	4604      	mov	r4, r0
   1e2ca:	b188      	cbz	r0, 1e2f0 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	u32_t *param_value = (u32_t *)k_malloc(array_len);
   1e2cc:	4628      	mov	r0, r5
   1e2ce:	f7fc fe1f 	bl	1af10 <k_malloc>

	if (param_value == NULL) {
   1e2d2:	4607      	mov	r7, r0
   1e2d4:	b178      	cbz	r0, 1e2f6 <at_params_array_put+0x40>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);
   1e2d6:	462a      	mov	r2, r5
   1e2d8:	4631      	mov	r1, r6
   1e2da:	f7fe ff30 	bl	1d13e <memcpy>

	at_param_clear(param);
   1e2de:	4620      	mov	r0, r4
   1e2e0:	f7ff ff57 	bl	1e192 <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   1e2e4:	2304      	movs	r3, #4
	param->value.array_val = param_value;

	return 0;
   1e2e6:	2000      	movs	r0, #0
	param->size = array_len;
   1e2e8:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   1e2ea:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   1e2ec:	60a7      	str	r7, [r4, #8]
}
   1e2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1e2f0:	f06f 0015 	mvn.w	r0, #21
   1e2f4:	e7fb      	b.n	1e2ee <at_params_array_put+0x38>
		return -ENOMEM;
   1e2f6:	f06f 000b 	mvn.w	r0, #11
   1e2fa:	e7f8      	b.n	1e2ee <at_params_array_put+0x38>

0001e2fc <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			u16_t *value)
{
   1e2fc:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   1e2fe:	b160      	cbz	r0, 1e31a <at_params_short_get+0x1e>
   1e300:	6843      	ldr	r3, [r0, #4]
   1e302:	b153      	cbz	r3, 1e31a <at_params_short_get+0x1e>
   1e304:	b14a      	cbz	r2, 1e31a <at_params_short_get+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e306:	f7ff ff2b 	bl	1e160 <at_params_get>

	if (param == NULL) {
   1e30a:	b130      	cbz	r0, 1e31a <at_params_short_get+0x1e>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   1e30c:	7803      	ldrb	r3, [r0, #0]
   1e30e:	2b01      	cmp	r3, #1
   1e310:	d103      	bne.n	1e31a <at_params_short_get+0x1e>
		return -EINVAL;
	}

	*value = (u16_t)param->value.int_val;
   1e312:	6883      	ldr	r3, [r0, #8]
	return 0;
   1e314:	2000      	movs	r0, #0
	*value = (u16_t)param->value.int_val;
   1e316:	8013      	strh	r3, [r2, #0]
}
   1e318:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1e31a:	f06f 0015 	mvn.w	r0, #21
   1e31e:	e7fb      	b.n	1e318 <at_params_short_get+0x1c>

0001e320 <at_params_string_get>:
	return 0;
}

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   1e320:	b570      	push	{r4, r5, r6, lr}
   1e322:	4616      	mov	r6, r2
   1e324:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   1e326:	b1c0      	cbz	r0, 1e35a <at_params_string_get+0x3a>
   1e328:	6843      	ldr	r3, [r0, #4]
   1e32a:	b1b3      	cbz	r3, 1e35a <at_params_string_get+0x3a>
   1e32c:	b1aa      	cbz	r2, 1e35a <at_params_string_get+0x3a>
	    value == NULL || len == NULL) {
   1e32e:	b1a4      	cbz	r4, 1e35a <at_params_string_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e330:	f7ff ff16 	bl	1e160 <at_params_get>

	if (param == NULL) {
   1e334:	4601      	mov	r1, r0
   1e336:	b180      	cbz	r0, 1e35a <at_params_string_get+0x3a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   1e338:	7803      	ldrb	r3, [r0, #0]
   1e33a:	2b03      	cmp	r3, #3
   1e33c:	d10d      	bne.n	1e35a <at_params_string_get+0x3a>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   1e33e:	f7ff ff18 	bl	1e172 <at_param_size>

	if (*len < param_len) {
   1e342:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   1e344:	4605      	mov	r5, r0
	if (*len < param_len) {
   1e346:	4283      	cmp	r3, r0
   1e348:	d30a      	bcc.n	1e360 <at_params_string_get+0x40>
		return -ENOMEM;
	}

	memcpy(value, param->value.str_val, param_len);
   1e34a:	4602      	mov	r2, r0
   1e34c:	6889      	ldr	r1, [r1, #8]
   1e34e:	4630      	mov	r0, r6
   1e350:	f7fe fef5 	bl	1d13e <memcpy>
	*len = param_len;

	return 0;
   1e354:	2000      	movs	r0, #0
	*len = param_len;
   1e356:	6025      	str	r5, [r4, #0]
}
   1e358:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1e35a:	f06f 0015 	mvn.w	r0, #21
   1e35e:	e7fb      	b.n	1e358 <at_params_string_get+0x38>
		return -ENOMEM;
   1e360:	f06f 000b 	mvn.w	r0, #11
   1e364:	e7f8      	b.n	1e358 <at_params_string_get+0x38>

0001e366 <at_params_valid_count_get>:

	return 0;
}

u32_t at_params_valid_count_get(const struct at_param_list *list)
{
   1e366:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   1e368:	4604      	mov	r4, r0
   1e36a:	b178      	cbz	r0, 1e38c <at_params_valid_count_get+0x26>
   1e36c:	6840      	ldr	r0, [r0, #4]
   1e36e:	b168      	cbz	r0, 1e38c <at_params_valid_count_get+0x26>
	if (index >= list->param_count) {
   1e370:	6822      	ldr	r2, [r4, #0]
   1e372:	b14a      	cbz	r2, 1e388 <at_params_valid_count_get+0x22>
   1e374:	2200      	movs	r2, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   1e376:	7803      	ldrb	r3, [r0, #0]
   1e378:	b133      	cbz	r3, 1e388 <at_params_valid_count_get+0x22>
		valid_i += 1;
   1e37a:	3201      	adds	r2, #1
		param = at_params_get(list, valid_i);
   1e37c:	4611      	mov	r1, r2
   1e37e:	4620      	mov	r0, r4
   1e380:	f7ff feee 	bl	1e160 <at_params_get>
	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   1e384:	2800      	cmp	r0, #0
   1e386:	d1f6      	bne.n	1e376 <at_params_valid_count_get+0x10>
	}

	return valid_i;
}
   1e388:	4610      	mov	r0, r2
   1e38a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1e38c:	f06f 0215 	mvn.w	r2, #21
   1e390:	e7fa      	b.n	1e388 <at_params_valid_count_get+0x22>

0001e392 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   1e392:	f7fe bced 	b.w	1cd70 <z_clock_idle_exit>

0001e396 <k_mem_slab_init>:
{
   1e396:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1e398:	2400      	movs	r4, #0
	slab->block_size = block_size;
   1e39a:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
   1e39e:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
   1e3a2:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e3a4:	42a3      	cmp	r3, r4
   1e3a6:	d102      	bne.n	1e3ae <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
   1e3a8:	e9c0 0000 	strd	r0, r0, [r0]
}
   1e3ac:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1e3ae:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e3b0:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   1e3b2:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   1e3b4:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   1e3b6:	4411      	add	r1, r2
   1e3b8:	e7f4      	b.n	1e3a4 <k_mem_slab_init+0xe>

0001e3ba <k_mem_pool_malloc>:
{
   1e3ba:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1e3bc:	2404      	movs	r4, #4
   1e3be:	190a      	adds	r2, r1, r4
   1e3c0:	d204      	bcs.n	1e3cc <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   1e3c2:	2300      	movs	r3, #0
   1e3c4:	4669      	mov	r1, sp
   1e3c6:	f7fc fd2b 	bl	1ae20 <k_mem_pool_alloc>
   1e3ca:	b110      	cbz	r0, 1e3d2 <k_mem_pool_malloc+0x18>
		return NULL;
   1e3cc:	2000      	movs	r0, #0
}
   1e3ce:	b002      	add	sp, #8
   1e3d0:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   1e3d2:	4622      	mov	r2, r4
   1e3d4:	a901      	add	r1, sp, #4
   1e3d6:	9800      	ldr	r0, [sp, #0]
   1e3d8:	f7fe feb1 	bl	1d13e <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   1e3dc:	9800      	ldr	r0, [sp, #0]
   1e3de:	3004      	adds	r0, #4
   1e3e0:	e7f5      	b.n	1e3ce <k_mem_pool_malloc+0x14>

0001e3e2 <k_free>:
	if (ptr != NULL) {
   1e3e2:	b110      	cbz	r0, 1e3ea <k_free+0x8>
		k_mem_pool_free_id(ptr);
   1e3e4:	3804      	subs	r0, #4
   1e3e6:	f7fc bd67 	b.w	1aeb8 <k_mem_pool_free_id>
}
   1e3ea:	4770      	bx	lr

0001e3ec <k_calloc>:
{
   1e3ec:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   1e3ee:	fba0 4501 	umull	r4, r5, r0, r1
   1e3f2:	b935      	cbnz	r5, 1e402 <k_calloc+0x16>
	ret = k_malloc(bounds);
   1e3f4:	4620      	mov	r0, r4
   1e3f6:	f7fc fd8b 	bl	1af10 <k_malloc>
	if (ret != NULL) {
   1e3fa:	4606      	mov	r6, r0
   1e3fc:	b918      	cbnz	r0, 1e406 <k_calloc+0x1a>
}
   1e3fe:	4630      	mov	r0, r6
   1e400:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1e402:	2600      	movs	r6, #0
   1e404:	e7fb      	b.n	1e3fe <k_calloc+0x12>
		(void)memset(ret, 0, bounds);
   1e406:	4622      	mov	r2, r4
   1e408:	4629      	mov	r1, r5
   1e40a:	f7fe fec2 	bl	1d192 <memset>
   1e40e:	e7f6      	b.n	1e3fe <k_calloc+0x12>

0001e410 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   1e410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e414:	4604      	mov	r4, r0
   1e416:	460f      	mov	r7, r1
   1e418:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1e41a:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1e41e:	f04f 0220 	mov.w	r2, #32
   1e422:	f3ef 8611 	mrs	r6, BASEPRI
   1e426:	f382 8811 	msr	BASEPRI, r2
   1e42a:	f3bf 8f6f 	isb	sy
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   1e42e:	b1db      	cbz	r3, 1e468 <queue_insert+0x58>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   1e430:	2008      	movs	r0, #8
   1e432:	f7fc fd73 	bl	1af1c <z_thread_malloc>
		if (anode == NULL) {
   1e436:	b938      	cbnz	r0, 1e448 <queue_insert+0x38>
	__asm__ volatile(
   1e438:	f386 8811 	msr	BASEPRI, r6
   1e43c:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   1e440:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   1e444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   1e448:	2301      	movs	r3, #1
		anode->data = data;
   1e44a:	f8c0 8004 	str.w	r8, [r0, #4]
   1e44e:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1e450:	6803      	ldr	r3, [r0, #0]
   1e452:	f003 0203 	and.w	r2, r3, #3
   1e456:	b95f      	cbnz	r7, 1e470 <queue_insert+0x60>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e458:	6823      	ldr	r3, [r4, #0]
   1e45a:	4313      	orrs	r3, r2
   1e45c:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1e45e:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1e460:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1e462:	b973      	cbnz	r3, 1e482 <queue_insert+0x72>
	list->tail = node;
   1e464:	6060      	str	r0, [r4, #4]
   1e466:	e00c      	b.n	1e482 <queue_insert+0x72>
	node->next_and_flags = flags;
   1e468:	f8c8 3000 	str.w	r3, [r8]
   1e46c:	4640      	mov	r0, r8
   1e46e:	e7ef      	b.n	1e450 <queue_insert+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e470:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1e472:	f033 0303 	bics.w	r3, r3, #3
   1e476:	d114      	bne.n	1e4a2 <queue_insert+0x92>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e478:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1e47a:	6862      	ldr	r2, [r4, #4]
   1e47c:	b95a      	cbnz	r2, 1e496 <queue_insert+0x86>
	list->head = node;
   1e47e:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1e482:	2104      	movs	r1, #4
   1e484:	4628      	mov	r0, r5
   1e486:	f000 fb5d 	bl	1eb44 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1e48a:	4628      	mov	r0, r5
   1e48c:	4631      	mov	r1, r6
   1e48e:	f000 f8d2 	bl	1e636 <z_reschedule>
	return 0;
   1e492:	2000      	movs	r0, #0
   1e494:	e7d6      	b.n	1e444 <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e496:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e498:	f003 0303 	and.w	r3, r3, #3
   1e49c:	4303      	orrs	r3, r0
   1e49e:	6013      	str	r3, [r2, #0]
   1e4a0:	e7e0      	b.n	1e464 <queue_insert+0x54>
   1e4a2:	4313      	orrs	r3, r2
   1e4a4:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e4a6:	683b      	ldr	r3, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e4a8:	f003 0303 	and.w	r3, r3, #3
   1e4ac:	4318      	orrs	r0, r3
   1e4ae:	6038      	str	r0, [r7, #0]
   1e4b0:	e7e7      	b.n	1e482 <queue_insert+0x72>

0001e4b2 <z_queue_node_peek>:
{
   1e4b2:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   1e4b4:	4604      	mov	r4, r0
   1e4b6:	b130      	cbz	r0, 1e4c6 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e4b8:	6802      	ldr	r2, [r0, #0]
   1e4ba:	0793      	lsls	r3, r2, #30
   1e4bc:	d003      	beq.n	1e4c6 <z_queue_node_peek+0x14>
		ret = anode->data;
   1e4be:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1e4c0:	b109      	cbz	r1, 1e4c6 <z_queue_node_peek+0x14>
			k_free(anode);
   1e4c2:	f7ff ff8e 	bl	1e3e2 <k_free>
}
   1e4c6:	4620      	mov	r0, r4
   1e4c8:	bd10      	pop	{r4, pc}

0001e4ca <z_impl_k_queue_init>:
	list->head = NULL;
   1e4ca:	2300      	movs	r3, #0
	list->tail = NULL;
   1e4cc:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
   1e4d0:	f100 0308 	add.w	r3, r0, #8
   1e4d4:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   1e4d8:	4770      	bx	lr

0001e4da <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   1e4da:	460a      	mov	r2, r1
   1e4dc:	2300      	movs	r3, #0
   1e4de:	6841      	ldr	r1, [r0, #4]
   1e4e0:	f7ff bf96 	b.w	1e410 <queue_insert>

0001e4e4 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   1e4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e4e8:	4604      	mov	r4, r0
   1e4ea:	b086      	sub	sp, #24
   1e4ec:	460d      	mov	r5, r1
	__asm__ volatile(
   1e4ee:	f04f 0320 	mov.w	r3, #32
   1e4f2:	f3ef 8711 	mrs	r7, BASEPRI
   1e4f6:	f383 8811 	msr	BASEPRI, r3
   1e4fa:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   1e4fe:	6800      	ldr	r0, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1e500:	b188      	cbz	r0, 1e526 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e502:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1e504:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e506:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1e50a:	4290      	cmp	r0, r2
	list->head = node;
   1e50c:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1e50e:	bf08      	it	eq
   1e510:	6063      	streq	r3, [r4, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1e512:	2101      	movs	r1, #1
   1e514:	f7ff ffcd 	bl	1e4b2 <z_queue_node_peek>
	__asm__ volatile(
   1e518:	f387 8811 	msr	BASEPRI, r7
   1e51c:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   1e520:	b006      	add	sp, #24
   1e522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   1e526:	2900      	cmp	r1, #0
   1e528:	d0f6      	beq.n	1e518 <z_impl_k_queue_get+0x34>
   1e52a:	f387 8811 	msr	BASEPRI, r7
   1e52e:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   1e532:	2104      	movs	r1, #4
   1e534:	4602      	mov	r2, r0
   1e536:	4623      	mov	r3, r4
   1e538:	eb0d 0001 	add.w	r0, sp, r1
   1e53c:	f7fd fc4a 	bl	1bdd4 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   1e540:	1c6a      	adds	r2, r5, #1
   1e542:	d002      	beq.n	1e54a <z_impl_k_queue_get+0x66>
	return z_impl_k_uptime_get();
   1e544:	f000 f9cb 	bl	1e8de <z_impl_k_uptime_get>
   1e548:	4606      	mov	r6, r0
{
   1e54a:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   1e54c:	9b04      	ldr	r3, [sp, #16]
   1e54e:	f36f 3310 	bfc	r3, #12, #5
   1e552:	9304      	str	r3, [sp, #16]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1e554:	2101      	movs	r1, #1
   1e556:	1bea      	subs	r2, r5, r7
   1e558:	a801      	add	r0, sp, #4
   1e55a:	f7fd fc4f 	bl	1bdfc <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   1e55e:	b118      	cbz	r0, 1e568 <z_impl_k_queue_get+0x84>
   1e560:	300b      	adds	r0, #11
   1e562:	d001      	beq.n	1e568 <z_impl_k_queue_get+0x84>
			return NULL;
   1e564:	2000      	movs	r0, #0
   1e566:	e7db      	b.n	1e520 <z_impl_k_queue_get+0x3c>
	__asm__ volatile(
   1e568:	f04f 0320 	mov.w	r3, #32
   1e56c:	f3ef 8811 	mrs	r8, BASEPRI
   1e570:	f383 8811 	msr	BASEPRI, r3
   1e574:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   1e578:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   1e57a:	b138      	cbz	r0, 1e58c <z_impl_k_queue_get+0xa8>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e57c:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1e57e:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e580:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1e584:	4290      	cmp	r0, r2
	list->head = node;
   1e586:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1e588:	bf08      	it	eq
   1e58a:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   1e58c:	2101      	movs	r1, #1
   1e58e:	f7ff ff90 	bl	1e4b2 <z_queue_node_peek>
	__asm__ volatile(
   1e592:	f388 8811 	msr	BASEPRI, r8
   1e596:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   1e59a:	2800      	cmp	r0, #0
   1e59c:	d1c0      	bne.n	1e520 <z_impl_k_queue_get+0x3c>
   1e59e:	1c6b      	adds	r3, r5, #1
   1e5a0:	d0d4      	beq.n	1e54c <z_impl_k_queue_get+0x68>
	return z_impl_k_uptime_get();
   1e5a2:	f000 f99c 	bl	1e8de <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   1e5a6:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   1e5a8:	42bd      	cmp	r5, r7
   1e5aa:	dacf      	bge.n	1e54c <z_impl_k_queue_get+0x68>
   1e5ac:	e7da      	b.n	1e564 <z_impl_k_queue_get+0x80>

0001e5ae <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1e5ae:	7b43      	ldrb	r3, [r0, #13]
   1e5b0:	06db      	lsls	r3, r3, #27
   1e5b2:	bf03      	ittte	eq
   1e5b4:	6980      	ldreq	r0, [r0, #24]
   1e5b6:	fab0 f080 	clzeq	r0, r0
   1e5ba:	0940      	lsreq	r0, r0, #5
   1e5bc:	2000      	movne	r0, #0
}
   1e5be:	4770      	bx	lr

0001e5c0 <z_swap_irqlock>:
{
   1e5c0:	b510      	push	{r4, lr}
   1e5c2:	4604      	mov	r4, r0
	z_check_stack_sentinel();
   1e5c4:	f7fd f96c 	bl	1b8a0 <z_check_stack_sentinel>
	ret = arch_swap(key);
   1e5c8:	4620      	mov	r0, r4
}
   1e5ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   1e5ce:	f7f0 be67 	b.w	f2a0 <arch_swap>

0001e5d2 <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   1e5d2:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1e5d6:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1e5da:	4298      	cmp	r0, r3
   1e5dc:	bfac      	ite	ge
   1e5de:	2000      	movge	r0, #0
   1e5e0:	2001      	movlt	r0, #1
   1e5e2:	4770      	bx	lr

0001e5e4 <z_find_first_thread_to_unpend>:
{
   1e5e4:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e5e6:	f04f 0320 	mov.w	r3, #32
   1e5ea:	f3ef 8411 	mrs	r4, BASEPRI
   1e5ee:	f383 8811 	msr	BASEPRI, r3
   1e5f2:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1e5f6:	f000 f85d 	bl	1e6b4 <z_priq_dumb_best>
	__asm__ volatile(
   1e5fa:	f384 8811 	msr	BASEPRI, r4
   1e5fe:	f3bf 8f6f 	isb	sy
}
   1e602:	bd10      	pop	{r4, pc}

0001e604 <z_unpend_thread_no_timeout>:
{
   1e604:	b538      	push	{r3, r4, r5, lr}
   1e606:	4604      	mov	r4, r0
	__asm__ volatile(
   1e608:	f04f 0320 	mov.w	r3, #32
   1e60c:	f3ef 8511 	mrs	r5, BASEPRI
   1e610:	f383 8811 	msr	BASEPRI, r3
   1e614:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1e618:	4601      	mov	r1, r0
   1e61a:	6880      	ldr	r0, [r0, #8]
   1e61c:	f7fc fe40 	bl	1b2a0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1e620:	7b63      	ldrb	r3, [r4, #13]
   1e622:	f023 0302 	bic.w	r3, r3, #2
   1e626:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1e628:	f385 8811 	msr	BASEPRI, r5
   1e62c:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1e630:	2300      	movs	r3, #0
   1e632:	60a3      	str	r3, [r4, #8]
}
   1e634:	bd38      	pop	{r3, r4, r5, pc}

0001e636 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1e636:	b921      	cbnz	r1, 1e642 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1e638:	f3ef 8005 	mrs	r0, IPSR
   1e63c:	b908      	cbnz	r0, 1e642 <z_reschedule+0xc>
	return z_swap_irqlock(key.key);
   1e63e:	f7ff bfbf 	b.w	1e5c0 <z_swap_irqlock>
   1e642:	f381 8811 	msr	BASEPRI, r1
   1e646:	f3bf 8f6f 	isb	sy
}
   1e64a:	4770      	bx	lr

0001e64c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1e64c:	4603      	mov	r3, r0
   1e64e:	b920      	cbnz	r0, 1e65a <z_reschedule_irqlock+0xe>
   1e650:	f3ef 8205 	mrs	r2, IPSR
   1e654:	b90a      	cbnz	r2, 1e65a <z_reschedule_irqlock+0xe>
		z_swap_irqlock(key);
   1e656:	f7ff bfb3 	b.w	1e5c0 <z_swap_irqlock>
   1e65a:	f383 8811 	msr	BASEPRI, r3
   1e65e:	f3bf 8f6f 	isb	sy
}
   1e662:	4770      	bx	lr

0001e664 <z_reschedule_unlocked>:
	__asm__ volatile(
   1e664:	f04f 0320 	mov.w	r3, #32
   1e668:	f3ef 8011 	mrs	r0, BASEPRI
   1e66c:	f383 8811 	msr	BASEPRI, r3
   1e670:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1e674:	f7ff bfea 	b.w	1e64c <z_reschedule_irqlock>

0001e678 <z_unpend_thread>:
{
   1e678:	b538      	push	{r3, r4, r5, lr}
   1e67a:	4604      	mov	r4, r0
   1e67c:	f04f 0320 	mov.w	r3, #32
   1e680:	f3ef 8511 	mrs	r5, BASEPRI
   1e684:	f383 8811 	msr	BASEPRI, r3
   1e688:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1e68c:	4601      	mov	r1, r0
   1e68e:	6880      	ldr	r0, [r0, #8]
   1e690:	f7fc fe06 	bl	1b2a0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1e694:	7b63      	ldrb	r3, [r4, #13]
   1e696:	f023 0302 	bic.w	r3, r3, #2
   1e69a:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1e69c:	f385 8811 	msr	BASEPRI, r5
   1e6a0:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1e6a4:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   1e6a6:	f104 0018 	add.w	r0, r4, #24
   1e6aa:	60a3      	str	r3, [r4, #8]
}
   1e6ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1e6b0:	f000 b8d1 	b.w	1e856 <z_abort_timeout>

0001e6b4 <z_priq_dumb_best>:
	return list->head == list;
   1e6b4:	6803      	ldr	r3, [r0, #0]
}
   1e6b6:	4298      	cmp	r0, r3
   1e6b8:	bf14      	ite	ne
   1e6ba:	4618      	movne	r0, r3
   1e6bc:	2000      	moveq	r0, #0
   1e6be:	4770      	bx	lr

0001e6c0 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   1e6c0:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   1e6c4:	b570      	push	{r4, r5, r6, lr}
   1e6c6:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   1e6c8:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   1e6cc:	b1cb      	cbz	r3, 1e702 <z_thread_timeout+0x42>
	__asm__ volatile(
   1e6ce:	f04f 0320 	mov.w	r3, #32
   1e6d2:	f3ef 8611 	mrs	r6, BASEPRI
   1e6d6:	f383 8811 	msr	BASEPRI, r3
   1e6da:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1e6de:	4629      	mov	r1, r5
   1e6e0:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1e6e4:	f7fc fddc 	bl	1b2a0 <z_priq_dumb_remove>
   1e6e8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1e6ec:	f023 0302 	bic.w	r3, r3, #2
   1e6f0:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
   1e6f4:	f386 8811 	msr	BASEPRI, r6
   1e6f8:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1e6fc:	2300      	movs	r3, #0
   1e6fe:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1e702:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1e706:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1e708:	f023 0314 	bic.w	r3, r3, #20
   1e70c:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1e710:	f7ff ff4d 	bl	1e5ae <z_is_thread_ready>
   1e714:	b120      	cbz	r0, 1e720 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
   1e716:	4628      	mov	r0, r5
}
   1e718:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e71c:	f7fc be10 	b.w	1b340 <z_add_thread_to_ready_q>
   1e720:	bd70      	pop	{r4, r5, r6, pc}

0001e722 <z_unpend_first_thread>:
{
   1e722:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1e724:	f04f 0320 	mov.w	r3, #32
   1e728:	f3ef 8211 	mrs	r2, BASEPRI
   1e72c:	f383 8811 	msr	BASEPRI, r3
   1e730:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1e734:	f7ff ffbe 	bl	1e6b4 <z_priq_dumb_best>
   1e738:	4604      	mov	r4, r0
	__asm__ volatile(
   1e73a:	f382 8811 	msr	BASEPRI, r2
   1e73e:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1e742:	b1c8      	cbz	r0, 1e778 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   1e744:	f04f 0320 	mov.w	r3, #32
   1e748:	f3ef 8511 	mrs	r5, BASEPRI
   1e74c:	f383 8811 	msr	BASEPRI, r3
   1e750:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1e754:	4601      	mov	r1, r0
   1e756:	6880      	ldr	r0, [r0, #8]
   1e758:	f7fc fda2 	bl	1b2a0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1e75c:	7b63      	ldrb	r3, [r4, #13]
   1e75e:	f023 0302 	bic.w	r3, r3, #2
   1e762:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1e764:	f385 8811 	msr	BASEPRI, r5
   1e768:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1e76c:	2300      	movs	r3, #0
   1e76e:	f104 0018 	add.w	r0, r4, #24
   1e772:	60a3      	str	r3, [r4, #8]
   1e774:	f000 f86f 	bl	1e856 <z_abort_timeout>
}
   1e778:	4620      	mov	r0, r4
   1e77a:	bd38      	pop	{r3, r4, r5, pc}

0001e77c <z_unpend_all>:
{
   1e77c:	b570      	push	{r4, r5, r6, lr}
   1e77e:	4606      	mov	r6, r0
	int need_sched = 0;
   1e780:	2500      	movs	r5, #0
   1e782:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e784:	42a6      	cmp	r6, r4
   1e786:	d000      	beq.n	1e78a <z_unpend_all+0xe>
	while ((th = z_waitq_head(wait_q)) != NULL) {
   1e788:	b90c      	cbnz	r4, 1e78e <z_unpend_all+0x12>
}
   1e78a:	4628      	mov	r0, r5
   1e78c:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(th);
   1e78e:	4620      	mov	r0, r4
   1e790:	f7ff ff72 	bl	1e678 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   1e794:	4620      	mov	r0, r4
   1e796:	f7ff ff0a 	bl	1e5ae <z_is_thread_ready>
		need_sched = 1;
   1e79a:	2501      	movs	r5, #1
   1e79c:	2800      	cmp	r0, #0
   1e79e:	d0f0      	beq.n	1e782 <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   1e7a0:	4620      	mov	r0, r4
   1e7a2:	f7fc fdcd 	bl	1b340 <z_add_thread_to_ready_q>
   1e7a6:	e7ec      	b.n	1e782 <z_unpend_all+0x6>

0001e7a8 <z_impl_k_sem_init>:
	sys_dlist_init(&sem->poll_events);
   1e7a8:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1e7ac:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1e7b0:	e9c0 0000 	strd	r0, r0, [r0]
   1e7b4:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1e7b8:	4770      	bx	lr

0001e7ba <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1e7ba:	7b43      	ldrb	r3, [r0, #13]
   1e7bc:	06db      	lsls	r3, r3, #27
   1e7be:	bf03      	ittte	eq
   1e7c0:	6980      	ldreq	r0, [r0, #24]
   1e7c2:	fab0 f080 	clzeq	r0, r0
   1e7c6:	0940      	lsreq	r0, r0, #5
   1e7c8:	2000      	movne	r0, #0
}
   1e7ca:	4770      	bx	lr

0001e7cc <z_impl_k_thread_name_set>:
}
   1e7cc:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1e7d0:	4770      	bx	lr

0001e7d2 <k_thread_name_get>:
}
   1e7d2:	2000      	movs	r0, #0
   1e7d4:	4770      	bx	lr

0001e7d6 <z_new_thread_init>:
{
   1e7d6:	b510      	push	{r4, lr}
	*((u32_t *)pStack) = STACK_SENTINEL;
   1e7d8:	f04f 34f0 	mov.w	r4, #4042322160	; 0xf0f0f0f0
   1e7dc:	600c      	str	r4, [r1, #0]
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   1e7de:	9c02      	ldr	r4, [sp, #8]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
   1e7e0:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
   1e7e2:	7304      	strb	r4, [r0, #12]

	thread_base->sched_locked = 0U;
   1e7e4:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   1e7e6:	2404      	movs	r4, #4
	thread_base->sched_locked = 0U;
   1e7e8:	73c3      	strb	r3, [r0, #15]
	thread_base->thread_state = (u8_t)initial_state;
   1e7ea:	7344      	strb	r4, [r0, #13]
	node->prev = NULL;
   1e7ec:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   1e7f0:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   1e7f4:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
   1e7f8:	bd10      	pop	{r4, pc}

0001e7fa <z_thread_single_resume>:
{
   1e7fa:	b508      	push	{r3, lr}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1e7fc:	7b43      	ldrb	r3, [r0, #13]
   1e7fe:	4602      	mov	r2, r0
   1e800:	f023 0310 	bic.w	r3, r3, #16
   1e804:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   1e806:	f7ff ffd8 	bl	1e7ba <z_is_thread_ready>
   1e80a:	b120      	cbz	r0, 1e816 <z_thread_single_resume+0x1c>
}
   1e80c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_add_thread_to_ready_q(thread);
   1e810:	4610      	mov	r0, r2
   1e812:	f7fc bd95 	b.w	1b340 <z_add_thread_to_ready_q>
   1e816:	bd08      	pop	{r3, pc}

0001e818 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   1e818:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1e81a:	b510      	push	{r4, lr}
   1e81c:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1e81e:	b103      	cbz	r3, 1e822 <z_thread_single_abort+0xa>
		thread->fn_abort();
   1e820:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   1e822:	4620      	mov	r0, r4
   1e824:	f7ff ffc9 	bl	1e7ba <z_is_thread_ready>
   1e828:	b138      	cbz	r0, 1e83a <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
   1e82a:	4620      	mov	r0, r4
   1e82c:	f7fc fe36 	bl	1b49c <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   1e830:	7b63      	ldrb	r3, [r4, #13]
   1e832:	f043 0308 	orr.w	r3, r3, #8
   1e836:	7363      	strb	r3, [r4, #13]
}
   1e838:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
   1e83a:	7b63      	ldrb	r3, [r4, #13]
   1e83c:	079b      	lsls	r3, r3, #30
   1e83e:	d502      	bpl.n	1e846 <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
   1e840:	4620      	mov	r0, r4
   1e842:	f7ff fedf 	bl	1e604 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   1e846:	69a3      	ldr	r3, [r4, #24]
   1e848:	2b00      	cmp	r3, #0
   1e84a:	d0f1      	beq.n	1e830 <z_thread_single_abort+0x18>
   1e84c:	f104 0018 	add.w	r0, r4, #24
   1e850:	f000 f801 	bl	1e856 <z_abort_timeout>
   1e854:	e7ec      	b.n	1e830 <z_thread_single_abort+0x18>

0001e856 <z_abort_timeout>:
{
   1e856:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e858:	f04f 0220 	mov.w	r2, #32
   1e85c:	f3ef 8411 	mrs	r4, BASEPRI
   1e860:	f382 8811 	msr	BASEPRI, r2
   1e864:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1e868:	6803      	ldr	r3, [r0, #0]
   1e86a:	b13b      	cbz	r3, 1e87c <z_abort_timeout+0x26>
			remove_timeout(to);
   1e86c:	f7fd f97a 	bl	1bb64 <remove_timeout>
			ret = 0;
   1e870:	2000      	movs	r0, #0
	__asm__ volatile(
   1e872:	f384 8811 	msr	BASEPRI, r4
   1e876:	f3bf 8f6f 	isb	sy
}
   1e87a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1e87c:	f06f 0015 	mvn.w	r0, #21
   1e880:	e7f7      	b.n	1e872 <z_abort_timeout+0x1c>

0001e882 <z_get_next_timeout_expiry>:
{
   1e882:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e884:	f04f 0320 	mov.w	r3, #32
   1e888:	f3ef 8411 	mrs	r4, BASEPRI
   1e88c:	f383 8811 	msr	BASEPRI, r3
   1e890:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1e894:	f7fd f97a 	bl	1bb8c <next_timeout>
	__asm__ volatile(
   1e898:	f384 8811 	msr	BASEPRI, r4
   1e89c:	f3bf 8f6f 	isb	sy
}
   1e8a0:	bd10      	pop	{r4, pc}

0001e8a2 <z_set_timeout_expiry>:
{
   1e8a2:	b570      	push	{r4, r5, r6, lr}
   1e8a4:	4604      	mov	r4, r0
   1e8a6:	460e      	mov	r6, r1
	__asm__ volatile(
   1e8a8:	f04f 0320 	mov.w	r3, #32
   1e8ac:	f3ef 8511 	mrs	r5, BASEPRI
   1e8b0:	f383 8811 	msr	BASEPRI, r3
   1e8b4:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   1e8b8:	f7fd f968 	bl	1bb8c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1e8bc:	2801      	cmp	r0, #1
   1e8be:	dd05      	ble.n	1e8cc <z_set_timeout_expiry+0x2a>
   1e8c0:	42a0      	cmp	r0, r4
   1e8c2:	dd03      	ble.n	1e8cc <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   1e8c4:	4631      	mov	r1, r6
   1e8c6:	4620      	mov	r0, r4
   1e8c8:	f7f0 fc4c 	bl	f164 <z_clock_set_timeout>
	__asm__ volatile(
   1e8cc:	f385 8811 	msr	BASEPRI, r5
   1e8d0:	f3bf 8f6f 	isb	sy
}
   1e8d4:	bd70      	pop	{r4, r5, r6, pc}

0001e8d6 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   1e8d6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   1e8d8:	f7fd fa0c 	bl	1bcf4 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   1e8dc:	bd08      	pop	{r3, pc}

0001e8de <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   1e8de:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
   1e8e0:	f7fd fa08 	bl	1bcf4 <z_tick_get>
			return (t * to_hz + off) / from_hz;
   1e8e4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1e8e8:	fba0 2304 	umull	r2, r3, r0, r4
   1e8ec:	fb04 3301 	mla	r3, r4, r1, r3
   1e8f0:	0bd0      	lsrs	r0, r2, #15
}
   1e8f2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1e8f6:	0bd9      	lsrs	r1, r3, #15
   1e8f8:	bd10      	pop	{r4, pc}

0001e8fa <k_timer_init>:
	timer->status = 0U;
   1e8fa:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1e8fc:	e9c0 1206 	strd	r1, r2, [r0, #24]
   1e900:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
   1e904:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   1e906:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   1e90a:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
   1e90e:	6283      	str	r3, [r0, #40]	; 0x28
}
   1e910:	4770      	bx	lr

0001e912 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1e912:	b510      	push	{r4, lr}
   1e914:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1e916:	f7ff ff9e 	bl	1e856 <z_abort_timeout>

	if (inactive) {
   1e91a:	bb00      	cbnz	r0, 1e95e <z_impl_k_timer_stop+0x4c>
		return;
	}

	if (timer->stop_fn != NULL) {
   1e91c:	69e3      	ldr	r3, [r4, #28]
   1e91e:	b10b      	cbz	r3, 1e924 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1e920:	4620      	mov	r0, r4
   1e922:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   1e924:	f104 0010 	add.w	r0, r4, #16
   1e928:	2100      	movs	r1, #0
   1e92a:	f7ff fe5b 	bl	1e5e4 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   1e92e:	4604      	mov	r4, r0
   1e930:	b1a8      	cbz	r0, 1e95e <z_impl_k_timer_stop+0x4c>
		z_unpend_thread_no_timeout(thread);
   1e932:	f7ff fe67 	bl	1e604 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1e936:	7b63      	ldrb	r3, [r4, #13]
   1e938:	06db      	lsls	r3, r3, #27
   1e93a:	d104      	bne.n	1e946 <z_impl_k_timer_stop+0x34>
	if (z_is_thread_ready(thread)) {
   1e93c:	69a3      	ldr	r3, [r4, #24]
   1e93e:	b913      	cbnz	r3, 1e946 <z_impl_k_timer_stop+0x34>
		z_add_thread_to_ready_q(thread);
   1e940:	4620      	mov	r0, r4
   1e942:	f7fc fcfd 	bl	1b340 <z_add_thread_to_ready_q>
	__asm__ volatile(
   1e946:	f04f 0320 	mov.w	r3, #32
   1e94a:	f3ef 8011 	mrs	r0, BASEPRI
   1e94e:	f383 8811 	msr	BASEPRI, r3
   1e952:	f3bf 8f6f 	isb	sy

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
		z_reschedule_unlocked();
	}
}
   1e956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1e95a:	f7ff be77 	b.w	1e64c <z_reschedule_irqlock>
   1e95e:	bd10      	pop	{r4, pc}

0001e960 <clear_event_registrations>:
	while (num_events--) {
   1e960:	2314      	movs	r3, #20
{
   1e962:	b570      	push	{r4, r5, r6, lr}
	event->poller = NULL;
   1e964:	2400      	movs	r4, #0
   1e966:	2601      	movs	r6, #1
   1e968:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   1e96c:	4281      	cmp	r1, r0
   1e96e:	d100      	bne.n	1e972 <clear_event_registrations+0x12>
}
   1e970:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   1e972:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   1e976:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   1e97a:	f003 030f 	and.w	r3, r3, #15
   1e97e:	2b04      	cmp	r3, #4
   1e980:	d80d      	bhi.n	1e99e <clear_event_registrations+0x3e>
   1e982:	fa06 f303 	lsl.w	r3, r6, r3
   1e986:	f013 0f16 	tst.w	r3, #22
   1e98a:	d008      	beq.n	1e99e <clear_event_registrations+0x3e>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1e98c:	f851 3c14 	ldr.w	r3, [r1, #-20]
   1e990:	b12b      	cbz	r3, 1e99e <clear_event_registrations+0x3e>
	node->prev->next = node->next;
   1e992:	f851 5c10 	ldr.w	r5, [r1, #-16]
   1e996:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   1e998:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1e99a:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   1e99e:	f382 8811 	msr	BASEPRI, r2
   1e9a2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1e9a6:	f04f 0320 	mov.w	r3, #32
   1e9aa:	f3ef 8211 	mrs	r2, BASEPRI
   1e9ae:	f383 8811 	msr	BASEPRI, r3
   1e9b2:	f3bf 8f6f 	isb	sy
   1e9b6:	3914      	subs	r1, #20
   1e9b8:	e7d8      	b.n	1e96c <clear_event_registrations+0xc>

0001e9ba <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   1e9ba:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   1e9bc:	6884      	ldr	r4, [r0, #8]
{
   1e9be:	4605      	mov	r5, r0
   1e9c0:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   1e9c2:	b19c      	cbz	r4, 1e9ec <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   1e9c4:	68a3      	ldr	r3, [r4, #8]
   1e9c6:	b95b      	cbnz	r3, 1e9e0 <signal_poll_event+0x26>
	int retcode = 0;
   1e9c8:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   1e9ca:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1e9cc:	2300      	movs	r3, #0
   1e9ce:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   1e9d0:	68eb      	ldr	r3, [r5, #12]
   1e9d2:	f3c3 3204 	ubfx	r2, r3, #12, #5
   1e9d6:	4316      	orrs	r6, r2
   1e9d8:	f366 3310 	bfi	r3, r6, #12, #5
   1e9dc:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   1e9de:	e004      	b.n	1e9ea <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   1e9e0:	4798      	blx	r3
		poller->is_polling = false;
   1e9e2:	2300      	movs	r3, #0
		if (retcode < 0) {
   1e9e4:	2800      	cmp	r0, #0
		poller->is_polling = false;
   1e9e6:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   1e9e8:	daf0      	bge.n	1e9cc <signal_poll_event+0x12>
}
   1e9ea:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   1e9ec:	4620      	mov	r0, r4
   1e9ee:	e7ed      	b.n	1e9cc <signal_poll_event+0x12>

0001e9f0 <k_poll_poller_cb>:
{
   1e9f0:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   1e9f2:	6883      	ldr	r3, [r0, #8]
{
   1e9f4:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   1e9f6:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   1e9f8:	7b63      	ldrb	r3, [r4, #13]
   1e9fa:	079a      	lsls	r2, r3, #30
   1e9fc:	d401      	bmi.n	1ea02 <k_poll_poller_cb+0x12>
		return 0;
   1e9fe:	2000      	movs	r0, #0
}
   1ea00:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   1ea02:	6a23      	ldr	r3, [r4, #32]
   1ea04:	3302      	adds	r3, #2
   1ea06:	d012      	beq.n	1ea2e <k_poll_poller_cb+0x3e>
	z_unpend_thread(thread);
   1ea08:	4620      	mov	r0, r4
   1ea0a:	f7ff fe35 	bl	1e678 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1ea0e:	2d08      	cmp	r5, #8
   1ea10:	bf0c      	ite	eq
   1ea12:	f06f 0303 	mvneq.w	r3, #3
   1ea16:	2300      	movne	r3, #0
   1ea18:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1ea1a:	7b63      	ldrb	r3, [r4, #13]
   1ea1c:	06db      	lsls	r3, r3, #27
   1ea1e:	d1ee      	bne.n	1e9fe <k_poll_poller_cb+0xe>
	if (!z_is_thread_ready(thread)) {
   1ea20:	69a5      	ldr	r5, [r4, #24]
   1ea22:	2d00      	cmp	r5, #0
   1ea24:	d1eb      	bne.n	1e9fe <k_poll_poller_cb+0xe>
		z_add_thread_to_ready_q(thread);
   1ea26:	4620      	mov	r0, r4
   1ea28:	f7fc fc8a 	bl	1b340 <z_add_thread_to_ready_q>
	return 0;
   1ea2c:	e7e7      	b.n	1e9fe <k_poll_poller_cb+0xe>
		return -EAGAIN;
   1ea2e:	f06f 000a 	mvn.w	r0, #10
   1ea32:	e7e5      	b.n	1ea00 <k_poll_poller_cb+0x10>

0001ea34 <add_event>:
{
   1ea34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ea36:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1ea38:	e9d0 2300 	ldrd	r2, r3, [r0]
   1ea3c:	4290      	cmp	r0, r2
   1ea3e:	4604      	mov	r4, r0
   1ea40:	460d      	mov	r5, r1
   1ea42:	d106      	bne.n	1ea52 <add_event+0x1e>
	node->prev = list->tail;
   1ea44:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1ea46:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   1ea48:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1ea4a:	6863      	ldr	r3, [r4, #4]
   1ea4c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1ea4e:	6065      	str	r5, [r4, #4]
}
   1ea50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1ea52:	2b00      	cmp	r3, #0
   1ea54:	d0f6      	beq.n	1ea44 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   1ea56:	689b      	ldr	r3, [r3, #8]
   1ea58:	6879      	ldr	r1, [r7, #4]
   1ea5a:	6858      	ldr	r0, [r3, #4]
   1ea5c:	f7ff fdb9 	bl	1e5d2 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1ea60:	2800      	cmp	r0, #0
   1ea62:	d1ef      	bne.n	1ea44 <add_event+0x10>
	return list->head == list;
   1ea64:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ea66:	42b4      	cmp	r4, r6
   1ea68:	d0ec      	beq.n	1ea44 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1ea6a:	2e00      	cmp	r6, #0
   1ea6c:	d0ea      	beq.n	1ea44 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   1ea6e:	68b3      	ldr	r3, [r6, #8]
   1ea70:	6878      	ldr	r0, [r7, #4]
   1ea72:	6859      	ldr	r1, [r3, #4]
   1ea74:	f7ff fdad 	bl	1e5d2 <z_is_t1_higher_prio_than_t2>
   1ea78:	b128      	cbz	r0, 1ea86 <add_event+0x52>
	node->prev = successor->prev;
   1ea7a:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1ea7c:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1ea80:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1ea82:	6075      	str	r5, [r6, #4]
			return;
   1ea84:	e7e4      	b.n	1ea50 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1ea86:	6863      	ldr	r3, [r4, #4]
   1ea88:	429e      	cmp	r6, r3
   1ea8a:	d0db      	beq.n	1ea44 <add_event+0x10>
   1ea8c:	6836      	ldr	r6, [r6, #0]
   1ea8e:	e7ec      	b.n	1ea6a <add_event+0x36>

0001ea90 <register_events>:
{
   1ea90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1ea94:	f04f 0b00 	mov.w	fp, #0
{
   1ea98:	4688      	mov	r8, r1
   1ea9a:	4615      	mov	r5, r2
   1ea9c:	4699      	mov	r9, r3
   1ea9e:	4604      	mov	r4, r0
	int events_registered = 0;
   1eaa0:	465e      	mov	r6, fp
	event->poller = NULL;
   1eaa2:	465f      	mov	r7, fp
	for (int ii = 0; ii < num_events; ii++) {
   1eaa4:	45c3      	cmp	fp, r8
   1eaa6:	db02      	blt.n	1eaae <register_events+0x1e>
}
   1eaa8:	4630      	mov	r0, r6
   1eaaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eaae:	f04f 0320 	mov.w	r3, #32
   1eab2:	f3ef 8a11 	mrs	sl, BASEPRI
   1eab6:	f383 8811 	msr	BASEPRI, r3
   1eaba:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1eabe:	7b63      	ldrb	r3, [r4, #13]
   1eac0:	f003 030f 	and.w	r3, r3, #15
   1eac4:	2b02      	cmp	r3, #2
   1eac6:	d005      	beq.n	1ead4 <register_events+0x44>
   1eac8:	2b04      	cmp	r3, #4
   1eaca:	d006      	beq.n	1eada <register_events+0x4a>
   1eacc:	2b01      	cmp	r3, #1
   1eace:	d118      	bne.n	1eb02 <register_events+0x72>
		if (event->signal->signaled != 0U) {
   1ead0:	6922      	ldr	r2, [r4, #16]
   1ead2:	e000      	b.n	1ead6 <register_events+0x46>
		if (k_sem_count_get(event->sem) > 0) {
   1ead4:	6922      	ldr	r2, [r4, #16]
		if (event->signal->signaled != 0U) {
   1ead6:	6892      	ldr	r2, [r2, #8]
   1ead8:	e001      	b.n	1eade <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
   1eada:	6922      	ldr	r2, [r4, #16]
   1eadc:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0U) {
   1eade:	b182      	cbz	r2, 1eb02 <register_events+0x72>
	event->state |= state;
   1eae0:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   1eae2:	60a7      	str	r7, [r4, #8]
	event->state |= state;
   1eae4:	f3c2 3104 	ubfx	r1, r2, #12, #5
   1eae8:	430b      	orrs	r3, r1
   1eaea:	f363 3210 	bfi	r2, r3, #12, #5
   1eaee:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   1eaf0:	702f      	strb	r7, [r5, #0]
	__asm__ volatile(
   1eaf2:	f38a 8811 	msr	BASEPRI, sl
   1eaf6:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1eafa:	f10b 0b01 	add.w	fp, fp, #1
   1eafe:	3414      	adds	r4, #20
   1eb00:	e7d0      	b.n	1eaa4 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   1eb02:	f1b9 0f00 	cmp.w	r9, #0
   1eb06:	d1f4      	bne.n	1eaf2 <register_events+0x62>
   1eb08:	782b      	ldrb	r3, [r5, #0]
   1eb0a:	2b00      	cmp	r3, #0
   1eb0c:	d0f1      	beq.n	1eaf2 <register_events+0x62>
	switch (event->type) {
   1eb0e:	7b63      	ldrb	r3, [r4, #13]
   1eb10:	f003 030f 	and.w	r3, r3, #15
   1eb14:	2b02      	cmp	r3, #2
   1eb16:	d007      	beq.n	1eb28 <register_events+0x98>
   1eb18:	2b04      	cmp	r3, #4
   1eb1a:	d00e      	beq.n	1eb3a <register_events+0xaa>
   1eb1c:	2b01      	cmp	r3, #1
   1eb1e:	d109      	bne.n	1eb34 <register_events+0xa4>
		add_event(&event->signal->poll_events, event, poller);
   1eb20:	462a      	mov	r2, r5
   1eb22:	4621      	mov	r1, r4
   1eb24:	6920      	ldr	r0, [r4, #16]
   1eb26:	e003      	b.n	1eb30 <register_events+0xa0>
		add_event(&event->sem->poll_events, event, poller);
   1eb28:	462a      	mov	r2, r5
   1eb2a:	4621      	mov	r1, r4
   1eb2c:	6920      	ldr	r0, [r4, #16]
   1eb2e:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   1eb30:	f7ff ff80 	bl	1ea34 <add_event>
	event->poller = poller;
   1eb34:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   1eb36:	3601      	adds	r6, #1
   1eb38:	e7db      	b.n	1eaf2 <register_events+0x62>
		add_event(&event->queue->poll_events, event, poller);
   1eb3a:	6920      	ldr	r0, [r4, #16]
   1eb3c:	462a      	mov	r2, r5
   1eb3e:	4621      	mov	r1, r4
   1eb40:	3008      	adds	r0, #8
   1eb42:	e7f5      	b.n	1eb30 <register_events+0xa0>

0001eb44 <z_handle_obj_poll_events>:
	return list->head == list;
   1eb44:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1eb46:	4298      	cmp	r0, r3
   1eb48:	d009      	beq.n	1eb5e <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1eb4a:	e9d3 2000 	ldrd	r2, r0, [r3]
   1eb4e:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   1eb50:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   1eb52:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   1eb54:	4618      	mov	r0, r3
	node->prev = NULL;
   1eb56:	e9c3 2200 	strd	r2, r2, [r3]
   1eb5a:	f7ff bf2e 	b.w	1e9ba <signal_poll_event>
	}
}
   1eb5e:	4770      	bx	lr

0001eb60 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   1eb60:	4770      	bx	lr
